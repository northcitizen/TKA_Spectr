
Clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026798  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d2e8  08026958  08026958  00036958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08033c40  08033c40  00043c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08033c48  08033c48  00043c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08033c4c  08033c4c  00043c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00001140  20000000  08033c50  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00090ccc  20001140  08034d90  00051140  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  20091e0c  08034d90  00051e0c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00051140  2**0
                  CONTENTS, READONLY
 10 .debug_info   000773cc  00000000  00000000  00051170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c10f  00000000  00000000  000c853c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002bc96  00000000  00000000  000d464b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002f00  00000000  00000000  001002e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003f38  00000000  00000000  001031e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001e9dd  00000000  00000000  00107120  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000f19e  00000000  00000000  00125afd  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00134c9b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a340  00000000  00000000  00134d18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20001140 	.word	0x20001140
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08026940 	.word	0x08026940

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20001144 	.word	0x20001144
 80001fc:	08026940 	.word	0x08026940

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f092 0f00 	teq	r2, #0
 800059a:	bf14      	ite	ne
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b0:	e720      	b.n	80003f4 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aedc 	beq.w	80003a2 <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6c1      	b.n	80003a2 <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b97a 	b.w	8000fbc <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	9e08      	ldr	r6, [sp, #32]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d151      	bne.n	8000d94 <__udivmoddi4+0xb4>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4617      	mov	r7, r2
 8000cf4:	d96d      	bls.n	8000dd2 <__udivmoddi4+0xf2>
 8000cf6:	fab2 fe82 	clz	lr, r2
 8000cfa:	f1be 0f00 	cmp.w	lr, #0
 8000cfe:	d00b      	beq.n	8000d18 <__udivmoddi4+0x38>
 8000d00:	f1ce 0c20 	rsb	ip, lr, #32
 8000d04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d1c:	0c25      	lsrs	r5, r4, #16
 8000d1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d22:	fa1f f987 	uxth.w	r9, r7
 8000d26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d2e:	fb08 f309 	mul.w	r3, r8, r9
 8000d32:	42ab      	cmp	r3, r5
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x6c>
 8000d36:	19ed      	adds	r5, r5, r7
 8000d38:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d3c:	f080 8123 	bcs.w	8000f86 <__udivmoddi4+0x2a6>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	f240 8120 	bls.w	8000f86 <__udivmoddi4+0x2a6>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	443d      	add	r5, r7
 8000d4c:	1aed      	subs	r5, r5, r3
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb00 f909 	mul.w	r9, r0, r9
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x98>
 8000d64:	19e4      	adds	r4, r4, r7
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	f080 810a 	bcs.w	8000f82 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8107 	bls.w	8000f82 <__udivmoddi4+0x2a2>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 0409 	sub.w	r4, r4, r9
 8000d7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d80:	2100      	movs	r1, #0
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d061      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000d86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	6034      	str	r4, [r6, #0]
 8000d8e:	6073      	str	r3, [r6, #4]
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0xc8>
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d054      	beq.n	8000e46 <__udivmoddi4+0x166>
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000da2:	4608      	mov	r0, r1
 8000da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da8:	fab3 f183 	clz	r1, r3
 8000dac:	2900      	cmp	r1, #0
 8000dae:	f040 808e 	bne.w	8000ece <__udivmoddi4+0x1ee>
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xdc>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80fa 	bhi.w	8000fb0 <__udivmoddi4+0x2d0>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	46ac      	mov	ip, r5
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d03f      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000dca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	b912      	cbnz	r2, 8000dda <__udivmoddi4+0xfa>
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dda:	fab7 fe87 	clz	lr, r7
 8000dde:	f1be 0f00 	cmp.w	lr, #0
 8000de2:	d134      	bne.n	8000e4e <__udivmoddi4+0x16e>
 8000de4:	1beb      	subs	r3, r5, r7
 8000de6:	0c3a      	lsrs	r2, r7, #16
 8000de8:	fa1f fc87 	uxth.w	ip, r7
 8000dec:	2101      	movs	r1, #1
 8000dee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000df2:	0c25      	lsrs	r5, r4, #16
 8000df4:	fb02 3318 	mls	r3, r2, r8, r3
 8000df8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dfc:	fb0c f308 	mul.w	r3, ip, r8
 8000e00:	42ab      	cmp	r3, r5
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x134>
 8000e04:	19ed      	adds	r5, r5, r7
 8000e06:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x132>
 8000e0c:	42ab      	cmp	r3, r5
 8000e0e:	f200 80d1 	bhi.w	8000fb4 <__udivmoddi4+0x2d4>
 8000e12:	4680      	mov	r8, r0
 8000e14:	1aed      	subs	r5, r5, r3
 8000e16:	b2a3      	uxth	r3, r4
 8000e18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e24:	fb0c fc00 	mul.w	ip, ip, r0
 8000e28:	45a4      	cmp	ip, r4
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x15c>
 8000e2c:	19e4      	adds	r4, r4, r7
 8000e2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x15a>
 8000e34:	45a4      	cmp	ip, r4
 8000e36:	f200 80b8 	bhi.w	8000faa <__udivmoddi4+0x2ca>
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	eba4 040c 	sub.w	r4, r4, ip
 8000e40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e44:	e79d      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	f1ce 0420 	rsb	r4, lr, #32
 8000e52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e5e:	0c3a      	lsrs	r2, r7, #16
 8000e60:	fa25 f404 	lsr.w	r4, r5, r4
 8000e64:	ea48 0803 	orr.w	r8, r8, r3
 8000e68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e70:	fb02 4411 	mls	r4, r2, r1, r4
 8000e74:	fa1f fc87 	uxth.w	ip, r7
 8000e78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e86:	d909      	bls.n	8000e9c <__udivmoddi4+0x1bc>
 8000e88:	19ed      	adds	r5, r5, r7
 8000e8a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e8e:	f080 808a 	bcs.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	f240 8087 	bls.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e98:	3902      	subs	r1, #2
 8000e9a:	443d      	add	r5, r7
 8000e9c:	1aeb      	subs	r3, r5, r3
 8000e9e:	fa1f f588 	uxth.w	r5, r8
 8000ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ea6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eaa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000eae:	fb00 f30c 	mul.w	r3, r0, ip
 8000eb2:	42ab      	cmp	r3, r5
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x1e6>
 8000eb6:	19ed      	adds	r5, r5, r7
 8000eb8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebc:	d26f      	bcs.n	8000f9e <__udivmoddi4+0x2be>
 8000ebe:	42ab      	cmp	r3, r5
 8000ec0:	d96d      	bls.n	8000f9e <__udivmoddi4+0x2be>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	443d      	add	r5, r7
 8000ec6:	1aeb      	subs	r3, r5, r3
 8000ec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ecc:	e78f      	b.n	8000dee <__udivmoddi4+0x10e>
 8000ece:	f1c1 0720 	rsb	r7, r1, #32
 8000ed2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ed6:	408b      	lsls	r3, r1
 8000ed8:	fa05 f401 	lsl.w	r4, r5, r1
 8000edc:	ea48 0303 	orr.w	r3, r8, r3
 8000ee0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ee4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000eee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ef2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ef6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000efa:	fa1f f883 	uxth.w	r8, r3
 8000efe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f02:	fb09 f408 	mul.w	r4, r9, r8
 8000f06:	42ac      	cmp	r4, r5
 8000f08:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x244>
 8000f12:	18ed      	adds	r5, r5, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d243      	bcs.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	d941      	bls.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	441d      	add	r5, r3
 8000f24:	1b2d      	subs	r5, r5, r4
 8000f26:	fa1f fe8e 	uxth.w	lr, lr
 8000f2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45a0      	cmp	r8, r4
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x26e>
 8000f3e:	18e4      	adds	r4, r4, r3
 8000f40:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f44:	d229      	bcs.n	8000f9a <__udivmoddi4+0x2ba>
 8000f46:	45a0      	cmp	r8, r4
 8000f48:	d927      	bls.n	8000f9a <__udivmoddi4+0x2ba>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	441c      	add	r4, r3
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba4 0408 	sub.w	r4, r4, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454c      	cmp	r4, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	464d      	mov	r5, r9
 8000f60:	d315      	bcc.n	8000f8e <__udivmoddi4+0x2ae>
 8000f62:	d012      	beq.n	8000f8a <__udivmoddi4+0x2aa>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x29c>
 8000f66:	ebba 030e 	subs.w	r3, sl, lr
 8000f6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40cb      	lsrs	r3, r1
 8000f74:	431f      	orrs	r7, r3
 8000f76:	40cc      	lsrs	r4, r1
 8000f78:	6037      	str	r7, [r6, #0]
 8000f7a:	6074      	str	r4, [r6, #4]
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f82:	4618      	mov	r0, r3
 8000f84:	e6f8      	b.n	8000d78 <__udivmoddi4+0x98>
 8000f86:	4690      	mov	r8, r2
 8000f88:	e6e0      	b.n	8000d4c <__udivmoddi4+0x6c>
 8000f8a:	45c2      	cmp	sl, r8
 8000f8c:	d2ea      	bcs.n	8000f64 <__udivmoddi4+0x284>
 8000f8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f92:	eb69 0503 	sbc.w	r5, r9, r3
 8000f96:	3801      	subs	r0, #1
 8000f98:	e7e4      	b.n	8000f64 <__udivmoddi4+0x284>
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	e7d7      	b.n	8000f4e <__udivmoddi4+0x26e>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	e791      	b.n	8000ec6 <__udivmoddi4+0x1e6>
 8000fa2:	4681      	mov	r9, r0
 8000fa4:	e7be      	b.n	8000f24 <__udivmoddi4+0x244>
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	e778      	b.n	8000e9c <__udivmoddi4+0x1bc>
 8000faa:	3802      	subs	r0, #2
 8000fac:	443c      	add	r4, r7
 8000fae:	e745      	b.n	8000e3c <__udivmoddi4+0x15c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xe6>
 8000fb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fb8:	443d      	add	r5, r7
 8000fba:	e72b      	b.n	8000e14 <__udivmoddi4+0x134>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_InitTick+0x2c>)
{
 8000fc4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fd0:	f000 fd34 	bl	8001a3c <HAL_SYSTICK_Config>
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	b938      	cbnz	r0, 8000fe8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4629      	mov	r1, r5
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fcde 	bl	80019a0 <HAL_NVIC_SetPriority>
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	20000a50 	.word	0x20000a50

08000ff0 <HAL_Init>:
{
 8000ff0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 fcc2 	bl	800197c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ffe1 	bl	8000fc0 <HAL_InitTick>
 8000ffe:	4604      	mov	r4, r0
 8001000:	b918      	cbnz	r0, 800100a <HAL_Init+0x1a>
    HAL_MspInit();
 8001002:	f020 f8c1 	bl	8021188 <HAL_MspInit>
}
 8001006:	4620      	mov	r0, r4
 8001008:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800100a:	2401      	movs	r4, #1
 800100c:	e7fb      	b.n	8001006 <HAL_Init+0x16>
	...

08001010 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001010:	4a02      	ldr	r2, [pc, #8]	; (800101c <HAL_IncTick+0xc>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2008bed4 	.word	0x2008bed4

08001020 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001020:	4b01      	ldr	r3, [pc, #4]	; (8001028 <HAL_GetTick+0x8>)
 8001022:	6818      	ldr	r0, [r3, #0]
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	2008bed4 	.word	0x2008bed4

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff6 	bl	8001020 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001034:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001036:	4605      	mov	r5, r0
  {
    wait++;
 8001038:	bf18      	it	ne
 800103a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103c:	f7ff fff0 	bl	8001020 <HAL_GetTick>
 8001040:	1b40      	subs	r0, r0, r5
 8001042:	4284      	cmp	r4, r0
 8001044:	d8fa      	bhi.n	800103c <HAL_Delay+0x10>
  {
  }
}
 8001046:	bd38      	pop	{r3, r4, r5, pc}

08001048 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001048:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800104e:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001052:	fab6 f386 	clz	r3, r6
 8001056:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 800105a:	40de      	lsrs	r6, r3
 800105c:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 800105e:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8001062:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001066:	fa93 f5a3 	rbit	r5, r3
 800106a:	fab5 f585 	clz	r5, r5
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	2407      	movs	r4, #7
 8001074:	fa21 f505 	lsr.w	r5, r1, r5
 8001078:	fa04 f505 	lsl.w	r5, r4, r5
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001084:	40d9      	lsrs	r1, r3
 8001086:	ea24 0405 	bic.w	r4, r4, r5
 800108a:	fa02 f101 	lsl.w	r1, r2, r1
 800108e:	4321      	orrs	r1, r4
 8001090:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8001094:	bd70      	pop	{r4, r5, r6, pc}
	...

08001098 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001098:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109e:	4604      	mov	r4, r0
 80010a0:	2800      	cmp	r0, #0
 80010a2:	f000 80b4 	beq.w	800120e <HAL_ADC_Init+0x176>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010a6:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80010a8:	b925      	cbnz	r5, 80010b4 <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010aa:	f020 f9b9 	bl	8021420 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ae:	6625      	str	r5, [r4, #96]	; 0x60
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010b0:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 80010b4:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010ba:	bf41      	itttt	mi
 80010bc:	689a      	ldrmi	r2, [r3, #8]
 80010be:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 80010c2:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 80010c6:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 80010c8:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010ca:	00d1      	lsls	r1, r2, #3
 80010cc:	d576      	bpl.n	80011bc <HAL_ADC_Init+0x124>
 80010ce:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010d0:	00d2      	lsls	r2, r2, #3
 80010d2:	f140 808a 	bpl.w	80011ea <HAL_ADC_Init+0x152>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d6:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010da:	06d5      	lsls	r5, r2, #27
 80010dc:	f100 8093 	bmi.w	8001206 <HAL_ADC_Init+0x16e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80010e0:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010e2:	0751      	lsls	r1, r2, #29
 80010e4:	f100 808f 	bmi.w	8001206 <HAL_ADC_Init+0x16e>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010ea:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80010ee:	f042 0202 	orr.w	r2, r2, #2
 80010f2:	65e2      	str	r2, [r4, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	2a01      	cmp	r2, #1
 80010fc:	f040 8089 	bne.w	8001212 <HAL_ADC_Init+0x17a>
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	07d2      	lsls	r2, r2, #31
 8001104:	f140 8085 	bpl.w	8001212 <HAL_ADC_Init+0x17a>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 8001108:	68e5      	ldr	r5, [r4, #12]
 800110a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 800110c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 800110e:	432a      	orrs	r2, r5
 8001110:	68a5      	ldr	r5, [r4, #8]
 8001112:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8001114:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001116:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 8001118:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 800111c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001120:	bf02      	ittt	eq
 8001122:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 8001124:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001128:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800112c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800112e:	b121      	cbz	r1, 800113a <HAL_ADC_Init+0xa2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001130:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001132:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001136:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001138:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 800113a:	68dd      	ldr	r5, [r3, #12]
 800113c:	4939      	ldr	r1, [pc, #228]	; (8001224 <HAL_ADC_Init+0x18c>)
 800113e:	4029      	ands	r1, r5
 8001140:	430a      	orrs	r2, r1
 8001142:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	f012 0f0c 	tst.w	r2, #12
 800114a:	d120      	bne.n	800118e <HAL_ADC_Init+0xf6>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 800114c:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800114e:	69a5      	ldr	r5, [r4, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001150:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8001152:	0052      	lsls	r2, r2, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8001154:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8001158:	6d25      	ldr	r5, [r4, #80]	; 0x50
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800115a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 800115e:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001160:	f021 0106 	bic.w	r1, r1, #6
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8001168:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800116a:	2a01      	cmp	r2, #1
 800116c:	d147      	bne.n	80011fe <HAL_ADC_Init+0x166>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800116e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001170:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001172:	6919      	ldr	r1, [r3, #16]
 8001174:	432a      	orrs	r2, r5
 8001176:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	432a      	orrs	r2, r5
 800117e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001180:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001184:	432a      	orrs	r2, r5
 8001186:	f021 0104 	bic.w	r1, r1, #4
 800118a:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800118c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800118e:	6922      	ldr	r2, [r4, #16]
 8001190:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001192:	bf05      	ittet	eq
 8001194:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001196:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001198:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800119a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800119e:	bf06      	itte	eq
 80011a0:	f021 010f 	biceq.w	r1, r1, #15
 80011a4:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011a6:	f022 020f 	bicne.w	r2, r2, #15
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011ae:	f023 0303 	bic.w	r3, r3, #3
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80011b8:	b003      	add	sp, #12
 80011ba:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80011bc:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80011be:	491a      	ldr	r1, [pc, #104]	; (8001228 <HAL_ADC_Init+0x190>)
 80011c0:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80011c4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80011c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_ADC_Init+0x194>)
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	fbb2 f1f1 	udiv	r1, r2, r1
 80011d6:	220a      	movs	r2, #10
 80011d8:	434a      	muls	r2, r1
      wait_loop_index--;
 80011da:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80011dc:	9a01      	ldr	r2, [sp, #4]
 80011de:	2a00      	cmp	r2, #0
 80011e0:	f43f af75 	beq.w	80010ce <HAL_ADC_Init+0x36>
      wait_loop_index--;
 80011e4:	9a01      	ldr	r2, [sp, #4]
 80011e6:	3a01      	subs	r2, #1
 80011e8:	e7f7      	b.n	80011da <HAL_ADC_Init+0x142>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011ec:	f042 0210 	orr.w	r2, r2, #16
 80011f0:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	6622      	str	r2, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	e76c      	b.n	80010d8 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	e7c2      	b.n	800118c <HAL_ADC_Init+0xf4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001206:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
 8001210:	e7d2      	b.n	80011b8 <HAL_ADC_Init+0x120>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001212:	4907      	ldr	r1, [pc, #28]	; (8001230 <HAL_ADC_Init+0x198>)
 8001214:	6865      	ldr	r5, [r4, #4]
 8001216:	688a      	ldr	r2, [r1, #8]
 8001218:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800121c:	432a      	orrs	r2, r5
 800121e:	608a      	str	r2, [r1, #8]
 8001220:	e772      	b.n	8001108 <HAL_ADC_Init+0x70>
 8001222:	bf00      	nop
 8001224:	fff0c007 	.word	0xfff0c007
 8001228:	001e8480 	.word	0x001e8480
 800122c:	20000a50 	.word	0x20000a50
 8001230:	50040300 	.word	0x50040300

08001234 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001236:	6945      	ldr	r5, [r0, #20]
 8001238:	2d08      	cmp	r5, #8
{
 800123a:	4604      	mov	r4, r0
 800123c:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800123e:	d00a      	beq.n	8001256 <HAL_ADC_PollForConversion+0x22>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Check ADC DMA mode in independant mode */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 8001240:	6803      	ldr	r3, [r0, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	07dd      	lsls	r5, r3, #31
 8001246:	d505      	bpl.n	8001254 <HAL_ADC_PollForConversion+0x20>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001248:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800124a:	f043 0320 	orr.w	r3, r3, #32
 800124e:	65c3      	str	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001250:	2001      	movs	r0, #1
 8001252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001254:	2504      	movs	r5, #4
      }
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001256:	f7ff fee3 	bl	8001020 <HAL_GetTick>
 800125a:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4215      	tst	r5, r2
 8001262:	d01d      	beq.n	80012a0 <HAL_ADC_PollForConversion+0x6c>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001264:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800126a:	65e2      	str	r2, [r4, #92]	; 0x5c
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001272:	d10f      	bne.n	8001294 <HAL_ADC_PollForConversion+0x60>
 8001274:	69e2      	ldr	r2, [r4, #28]
 8001276:	b96a      	cbnz	r2, 8001294 <HAL_ADC_PollForConversion+0x60>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	0711      	lsls	r1, r2, #28
 800127c:	d50a      	bpl.n	8001294 <HAL_ADC_PollForConversion+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800127e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001284:	65e2      	str	r2, [r4, #92]	; 0x5c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001286:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001288:	04d2      	lsls	r2, r2, #19
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128a:	bf5e      	ittt	pl
 800128c:	6de2      	ldrpl	r2, [r4, #92]	; 0x5c
 800128e:	f042 0201 	orrpl.w	r2, r2, #1
 8001292:	65e2      	strpl	r2, [r4, #92]	; 0x5c
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001294:	2d08      	cmp	r5, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 8001296:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001298:	d114      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x90>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 800129a:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800129c:	2000      	movs	r0, #0
}
 800129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012a0:	1c70      	adds	r0, r6, #1
 80012a2:	d0dc      	beq.n	800125e <HAL_ADC_PollForConversion+0x2a>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012a4:	b946      	cbnz	r6, 80012b8 <HAL_ADC_PollForConversion+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 80012ae:	2300      	movs	r3, #0
 80012b0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_TIMEOUT;
 80012b4:	2003      	movs	r0, #3
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012b8:	f7ff feb2 	bl	8001020 <HAL_GetTick>
 80012bc:	1bc0      	subs	r0, r0, r7
 80012be:	4286      	cmp	r6, r0
 80012c0:	d2cc      	bcs.n	800125c <HAL_ADC_PollForConversion+0x28>
 80012c2:	e7f0      	b.n	80012a6 <HAL_ADC_PollForConversion+0x72>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80012c4:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80012c8:	d1e8      	bne.n	800129c <HAL_ADC_PollForConversion+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012d0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012d0:	6803      	ldr	r3, [r0, #0]
 80012d2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012de:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80012e2:	2b01      	cmp	r3, #1
{
 80012e4:	4605      	mov	r5, r0
 80012e6:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80012e8:	f000 8168 	beq.w	80015bc <HAL_ADC_ConfigChannel+0x2e4>
 80012ec:	2301      	movs	r3, #1
 80012ee:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f2:	6800      	ldr	r0, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80012f4:	6882      	ldr	r2, [r0, #8]
 80012f6:	0757      	lsls	r7, r2, #29
 80012f8:	f100 815a 	bmi.w	80015b0 <HAL_ADC_ConfigChannel+0x2d8>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012fc:	684b      	ldr	r3, [r1, #4]
 80012fe:	2b05      	cmp	r3, #5
 8001300:	d808      	bhi.n	8001314 <HAL_ADC_ConfigChannel+0x3c>
    {
      switch (sConfig->Rank)
 8001302:	3b02      	subs	r3, #2
 8001304:	2b03      	cmp	r3, #3
 8001306:	d864      	bhi.n	80013d2 <HAL_ADC_ConfigChannel+0xfa>
 8001308:	e8df f003 	tbb	[pc, r3]
 800130c:	605e5c02 	.word	0x605e5c02
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001310:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 8001312:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001314:	6861      	ldr	r1, [r4, #4]
 8001316:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131a:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	f401 7640 	and.w	r6, r1, #768	; 0x300
 8001326:	40de      	lsrs	r6, r3
 8001328:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 800132c:	f001 011f 	and.w	r1, r1, #31
 8001330:	231f      	movs	r3, #31
 8001332:	fa03 f201 	lsl.w	r2, r3, r1
 8001336:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 800133a:	ea23 0302 	bic.w	r3, r3, r2
 800133e:	6822      	ldr	r2, [r4, #0]
 8001340:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001344:	408a      	lsls	r2, r1
 8001346:	4313      	orrs	r3, r2
 8001348:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800134c:	6882      	ldr	r2, [r0, #8]
 800134e:	f012 020c 	ands.w	r2, r2, #12
 8001352:	d126      	bne.n	80013a2 <HAL_ADC_ConfigChannel+0xca>
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001354:	68a3      	ldr	r3, [r4, #8]
 8001356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800135a:	d13c      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800135c:	6821      	ldr	r1, [r4, #0]
 800135e:	f7ff fe73 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
        
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001362:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001364:	6953      	ldr	r3, [r2, #20]
 8001366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800136a:	6153      	str	r3, [r2, #20]

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800136c:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800136e:	f8d5 e000 	ldr.w	lr, [r5]
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001378:	2e04      	cmp	r6, #4
 800137a:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 800137e:	d033      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x110>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001380:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8001384:	0048      	lsls	r0, r1, #1
 8001386:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8001388:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 800138c:	4081      	lsls	r1, r0
 800138e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001392:	4319      	orrs	r1, r3
 8001394:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8001398:	4bc5      	ldr	r3, [pc, #788]	; (80016b0 <HAL_ADC_ConfigChannel+0x3d8>)
 800139a:	4003      	ands	r3, r0
 800139c:	4319      	orrs	r1, r3
 800139e:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80013a2:	6828      	ldr	r0, [r5, #0]
 80013a4:	6883      	ldr	r3, [r0, #8]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	f040 8108 	bne.w	80015c0 <HAL_ADC_ConfigChannel+0x2e8>
 80013b0:	6803      	ldr	r3, [r0, #0]
 80013b2:	07de      	lsls	r6, r3, #31
 80013b4:	f140 8104 	bpl.w	80015c0 <HAL_ADC_ConfigChannel+0x2e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b8:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ba:	2300      	movs	r3, #0
 80013bc:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
  
  /* Return function status */
  return tmp_hal_status;
}
 80013c0:	b003      	add	sp, #12
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80013c4:	2312      	movs	r3, #18
 80013c6:	e7a4      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80013c8:	2318      	movs	r3, #24
 80013ca:	e7a2      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80013cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d0:	e79f      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 80013d2:	2306      	movs	r3, #6
 80013d4:	e79d      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013d6:	461a      	mov	r2, r3
 80013d8:	6821      	ldr	r1, [r4, #0]
 80013da:	f7ff fe35 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013de:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013e0:	6953      	ldr	r3, [r2, #20]
 80013e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013e6:	e7c0      	b.n	800136a <HAL_ADC_ConfigChannel+0x92>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013e8:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013ec:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80013f0:	f3c1 6784 	ubfx	r7, r1, #26, #5
 80013f4:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d13a      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x19a>
 80013fc:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8001400:	4287      	cmp	r7, r0
 8001402:	f040 8149 	bne.w	8001698 <HAL_ADC_ConfigChannel+0x3c0>
  MODIFY_REG(*preg,
 8001406:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800140a:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800140e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001410:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 8001414:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001418:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800141c:	bb9f      	cbnz	r7, 8001486 <HAL_ADC_ConfigChannel+0x1ae>
 800141e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001422:	4283      	cmp	r3, r0
 8001424:	f040 813d 	bne.w	80016a2 <HAL_ADC_ConfigChannel+0x3ca>
  MODIFY_REG(*preg,
 8001428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800142c:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800142e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001430:	6891      	ldr	r1, [r2, #8]
 8001432:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001436:	f102 0608 	add.w	r6, r2, #8
 800143a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800143e:	bb77      	cbnz	r7, 800149e <HAL_ADC_ConfigChannel+0x1c6>
 8001440:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001444:	4283      	cmp	r3, r0
 8001446:	f040 8147 	bne.w	80016d8 <HAL_ADC_ConfigChannel+0x400>
  MODIFY_REG(*preg,
 800144a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800144e:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001450:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001452:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001456:	68d2      	ldr	r2, [r2, #12]
 8001458:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800145c:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001460:	bb4e      	cbnz	r6, 80014b6 <HAL_ADC_ConfigChannel+0x1de>
 8001462:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001466:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8001468:	bf04      	itt	eq
 800146a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800146e:	6002      	streq	r2, [r0, #0]
 8001470:	e797      	b.n	80013a2 <HAL_ADC_ConfigChannel+0xca>
 8001472:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001476:	fab0 f080 	clz	r0, r0
 800147a:	4287      	cmp	r7, r0
 800147c:	d0c3      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x12e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800147e:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001482:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	4283      	cmp	r3, r0
 8001490:	d0ca      	beq.n	8001428 <HAL_ADC_ConfigChannel+0x150>
 8001492:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001494:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001496:	f102 0608 	add.w	r6, r2, #8
 800149a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	4283      	cmp	r3, r0
 80014a8:	d0cf      	beq.n	800144a <HAL_ADC_ConfigChannel+0x172>
 80014aa:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014ae:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	e7d2      	b.n	8001466 <HAL_ADC_ConfigChannel+0x18e>
 80014c0:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80014c4:	fab2 f282 	clz	r2, r2
 80014c8:	3201      	adds	r2, #1
 80014ca:	2a09      	cmp	r2, #9
 80014cc:	d90d      	bls.n	80014ea <HAL_ADC_ConfigChannel+0x212>
 80014ce:	fa93 f2a3 	rbit	r2, r3
 80014d2:	fab2 f282 	clz	r2, r2
 80014d6:	3201      	adds	r2, #1
 80014d8:	0696      	lsls	r6, r2, #26
 80014da:	fa93 f1a3 	rbit	r1, r3
 80014de:	fab1 f181 	clz	r1, r1
 80014e2:	1c4a      	adds	r2, r1, #1
 80014e4:	2101      	movs	r1, #1
 80014e6:	4091      	lsls	r1, r2
 80014e8:	e016      	b.n	8001518 <HAL_ADC_ConfigChannel+0x240>
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	fab2 f282 	clz	r2, r2
 80014f2:	3201      	adds	r2, #1
 80014f4:	0692      	lsls	r2, r2, #26
 80014f6:	fa93 f1a3 	rbit	r1, r3
 80014fa:	fab1 f181 	clz	r1, r1
 80014fe:	1c4e      	adds	r6, r1, #1
 8001500:	2101      	movs	r1, #1
 8001502:	40b1      	lsls	r1, r6
 8001504:	e07f      	b.n	8001606 <HAL_ADC_ConfigChannel+0x32e>
 8001506:	fa93 f1a3 	rbit	r1, r3
 800150a:	fab1 f181 	clz	r1, r1
 800150e:	3101      	adds	r1, #1
 8001510:	e080      	b.n	8001614 <HAL_ADC_ConfigChannel+0x33c>
 8001512:	4616      	mov	r6, r2
 8001514:	fa01 f10e 	lsl.w	r1, r1, lr
 8001518:	ea41 0206 	orr.w	r2, r1, r6
 800151c:	b94f      	cbnz	r7, 8001532 <HAL_ADC_ConfigChannel+0x25a>
 800151e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001526:	f1a3 011b 	sub.w	r1, r3, #27
 800152a:	0509      	lsls	r1, r1, #20
 800152c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001530:	e073      	b.n	800161a <HAL_ADC_ConfigChannel+0x342>
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	e7f2      	b.n	8001522 <HAL_ADC_ConfigChannel+0x24a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 800153c:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <HAL_ADC_ConfigChannel+0x3dc>)
 800153e:	429a      	cmp	r2, r3
 8001540:	d104      	bne.n	800154c <HAL_ADC_ConfigChannel+0x274>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001542:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001544:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001546:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800154a:	e072      	b.n	8001632 <HAL_ADC_ConfigChannel+0x35a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 800154c:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <HAL_ADC_ConfigChannel+0x3e4>)
 800154e:	429a      	cmp	r2, r3
 8001550:	f47f af32 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 8001554:	4b58      	ldr	r3, [pc, #352]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001556:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001558:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800155c:	e069      	b.n	8001632 <HAL_ADC_ConfigChannel+0x35a>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800155e:	4955      	ldr	r1, [pc, #340]	; (80016b4 <HAL_ADC_ConfigChannel+0x3dc>)
 8001560:	428a      	cmp	r2, r1
 8001562:	d111      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x2b0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001564:	4a56      	ldr	r2, [pc, #344]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	f47f af26 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 800156c:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001570:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001574:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001578:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800157c:	430b      	orrs	r3, r1
 800157e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001582:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 8001586:	e717      	b.n	80013b8 <HAL_ADC_ConfigChannel+0xe0>
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001588:	494c      	ldr	r1, [pc, #304]	; (80016bc <HAL_ADC_ConfigChannel+0x3e4>)
 800158a:	428a      	cmp	r2, r1
 800158c:	f47f af14 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001590:	4a4b      	ldr	r2, [pc, #300]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	f47f af10 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001598:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800159c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015a0:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015a4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80015a8:	430b      	orrs	r3, r1
 80015aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015ae:	e7e8      	b.n	8001582 <HAL_ADC_ConfigChannel+0x2aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015b2:	f042 0220 	orr.w	r2, r2, #32
 80015b6:	65ea      	str	r2, [r5, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80015b8:	4618      	mov	r0, r3
 80015ba:	e6fe      	b.n	80013ba <HAL_ADC_ConfigChannel+0xe2>
  __HAL_LOCK(hadc);
 80015bc:	2002      	movs	r0, #2
 80015be:	e6ff      	b.n	80013c0 <HAL_ADC_ConfigChannel+0xe8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80015c0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80015c2:	4a40      	ldr	r2, [pc, #256]	; (80016c4 <HAL_ADC_ConfigChannel+0x3ec>)
 80015c4:	f8d0 60b0 	ldr.w	r6, [r0, #176]	; 0xb0
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	f001 0e20 	and.w	lr, r1, #32
 80015ce:	fa02 f20e 	lsl.w	r2, r2, lr
 80015d2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80015d6:	4072      	eors	r2, r6
 80015d8:	403a      	ands	r2, r7
 80015da:	4072      	eors	r2, r6
 80015dc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015e0:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <HAL_ADC_ConfigChannel+0x3f0>)
 80015e2:	4291      	cmp	r1, r2
 80015e4:	d11d      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x34a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80015e6:	2f00      	cmp	r7, #0
 80015e8:	f47f af6a 	bne.w	80014c0 <HAL_ADC_ConfigChannel+0x1e8>
 80015ec:	f3c3 6184 	ubfx	r1, r3, #26, #5
 80015f0:	f101 0e01 	add.w	lr, r1, #1
 80015f4:	f1be 0f09 	cmp.w	lr, #9
 80015f8:	f04f 0101 	mov.w	r1, #1
 80015fc:	ea4f 628e 	mov.w	r2, lr, lsl #26
 8001600:	d887      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x23a>
 8001602:	fa01 f10e 	lsl.w	r1, r1, lr
 8001606:	430a      	orrs	r2, r1
 8001608:	2f00      	cmp	r7, #0
 800160a:	f47f af7c 	bne.w	8001506 <HAL_ADC_ConfigChannel+0x22e>
 800160e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001612:	1c59      	adds	r1, r3, #1
 8001614:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001618:	0509      	lsls	r1, r1, #20
 800161a:	4311      	orrs	r1, r2
 800161c:	68a2      	ldr	r2, [r4, #8]
 800161e:	f7ff fd13 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001622:	6822      	ldr	r2, [r4, #0]
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_ADC_ConfigChannel+0x3f4>)
 8001626:	429a      	cmp	r2, r3
 8001628:	d188      	bne.n	800153c <HAL_ADC_ConfigChannel+0x264>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001632:	f47f aec1 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	6898      	ldr	r0, [r3, #8]
 800163a:	f000 0003 	and.w	r0, r0, #3
 800163e:	2801      	cmp	r0, #1
 8001640:	d102      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x370>
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	07c9      	lsls	r1, r1, #31
 8001646:	d422      	bmi.n	800168e <HAL_ADC_ConfigChannel+0x3b6>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001648:	4920      	ldr	r1, [pc, #128]	; (80016cc <HAL_ADC_ConfigChannel+0x3f4>)
 800164a:	428a      	cmp	r2, r1
 800164c:	d187      	bne.n	800155e <HAL_ADC_ConfigChannel+0x286>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	f47f aeb1 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 8001656:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800165a:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800165e:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001662:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001666:	430b      	orrs	r3, r1
 8001668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800166c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_ADC_ConfigChannel+0x3f8>)
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_ADC_ConfigChannel+0x3fc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fbb3 f2f2 	udiv	r2, r3, r2
 800167a:	2378      	movs	r3, #120	; 0x78
 800167c:	4353      	muls	r3, r2
                wait_loop_index--;
 800167e:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0)
 8001680:	9b01      	ldr	r3, [sp, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f43f ae98 	beq.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
                wait_loop_index--;
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	e7f7      	b.n	800167e <HAL_ADC_ConfigChannel+0x3a6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001696:	e690      	b.n	80013ba <HAL_ADC_ConfigChannel+0xe2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001698:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800169c:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80016a0:	e6bd      	b.n	800141e <HAL_ADC_ConfigChannel+0x146>
 80016a2:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016a4:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	f102 0608 	add.w	r6, r2, #8
 80016aa:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80016ae:	e6c7      	b.n	8001440 <HAL_ADC_ConfigChannel+0x168>
 80016b0:	03fff000 	.word	0x03fff000
 80016b4:	cb840000 	.word	0xcb840000
 80016b8:	50040300 	.word	0x50040300
 80016bc:	80000001 	.word	0x80000001
 80016c0:	50040000 	.word	0x50040000
 80016c4:	0007ffff 	.word	0x0007ffff
 80016c8:	407f0000 	.word	0x407f0000
 80016cc:	c7520000 	.word	0xc7520000
 80016d0:	20000a50 	.word	0x20000a50
 80016d4:	001e8480 	.word	0x001e8480
 80016d8:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016dc:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80016e4:	e6bd      	b.n	8001462 <HAL_ADC_ConfigChannel+0x18a>
 80016e6:	bf00      	nop

080016e8 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016e8:	6803      	ldr	r3, [r0, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	f012 0f0c 	tst.w	r2, #12
{
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016f4:	d101      	bne.n	80016fa <ADC_ConversionStop+0x12>
    }
    
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016f6:	2000      	movs	r0, #0
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	0190      	lsls	r0, r2, #6
 80016fe:	d52a      	bpl.n	8001756 <ADC_ConversionStop+0x6e>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 8001700:	69e2      	ldr	r2, [r4, #28]
 8001702:	2a01      	cmp	r2, #1
 8001704:	d127      	bne.n	8001756 <ADC_ConversionStop+0x6e>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 8001706:	69a2      	ldr	r2, [r4, #24]
 8001708:	2a01      	cmp	r2, #1
 800170a:	d124      	bne.n	8001756 <ADC_ConversionStop+0x6e>
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <ADC_ConversionStop+0xb0>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	0649      	lsls	r1, r1, #25
 8001712:	d514      	bpl.n	800173e <ADC_ConversionStop+0x56>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001714:	2240      	movs	r2, #64	; 0x40
 8001716:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8001718:	2101      	movs	r1, #1
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	0756      	lsls	r6, r2, #29
 800171e:	d50a      	bpl.n	8001736 <ADC_ConversionStop+0x4e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001720:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001722:	0795      	lsls	r5, r2, #30
 8001724:	d407      	bmi.n	8001736 <ADC_ConversionStop+0x4e>
  MODIFY_REG(ADCx->CR,
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800172c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001730:	f042 0210 	orr.w	r2, r2, #16
 8001734:	609a      	str	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001736:	2901      	cmp	r1, #1
 8001738:	d10f      	bne.n	800175a <ADC_ConversionStop+0x72>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800173a:	2504      	movs	r5, #4
        break;
 800173c:	e01e      	b.n	800177c <ADC_ConversionStop+0x94>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 800173e:	3a01      	subs	r2, #1
 8001740:	d1e5      	bne.n	800170e <ADC_ConversionStop+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001742:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
 8001754:	bd70      	pop	{r4, r5, r6, pc}
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001756:	2902      	cmp	r1, #2
 8001758:	d1df      	bne.n	800171a <ADC_ConversionStop+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	0710      	lsls	r0, r2, #28
 800175e:	d506      	bpl.n	800176e <ADC_ConversionStop+0x86>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001760:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001762:	0792      	lsls	r2, r2, #30
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 8001764:	bf5e      	ittt	pl
 8001766:	689a      	ldrpl	r2, [r3, #8]
 8001768:	f042 0220 	orrpl.w	r2, r2, #32
 800176c:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 800176e:	2902      	cmp	r1, #2
 8001770:	d003      	beq.n	800177a <ADC_ConversionStop+0x92>
 8001772:	2903      	cmp	r1, #3
 8001774:	d1e1      	bne.n	800173a <ADC_ConversionStop+0x52>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001776:	250c      	movs	r5, #12
 8001778:	e000      	b.n	800177c <ADC_ConversionStop+0x94>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800177a:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 800177c:	f7ff fc50 	bl	8001020 <HAL_GetTick>
 8001780:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	421d      	tst	r5, r3
 8001788:	d0b5      	beq.n	80016f6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800178a:	f7ff fc49 	bl	8001020 <HAL_GetTick>
 800178e:	1b80      	subs	r0, r0, r6
 8001790:	2805      	cmp	r0, #5
 8001792:	d9f6      	bls.n	8001782 <ADC_ConversionStop+0x9a>
 8001794:	e7d5      	b.n	8001742 <ADC_ConversionStop+0x5a>
 8001796:	bf00      	nop
 8001798:	0a340001 	.word	0x0a340001

0800179c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800179c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 800179e:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a0:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 80017a2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a4:	6893      	ldr	r3, [r2, #8]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b01      	cmp	r3, #1
{
 80017ac:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017ae:	d108      	bne.n	80017c2 <ADC_Enable+0x26>
 80017b0:	6813      	ldr	r3, [r2, #0]
 80017b2:	07d8      	lsls	r0, r3, #31
 80017b4:	d505      	bpl.n	80017c2 <ADC_Enable+0x26>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017b6:	2000      	movs	r0, #0
}
 80017b8:	b002      	add	sp, #8
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 80017bc:	9b01      	ldr	r3, [sp, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	e012      	b.n	80017e8 <ADC_Enable+0x4c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017c2:	6891      	ldr	r1, [r2, #8]
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <ADC_Enable+0x94>)
 80017c6:	4219      	tst	r1, r3
 80017c8:	d127      	bne.n	800181a <ADC_Enable+0x7e>
  MODIFY_REG(ADCx->CR,
 80017ca:	6893      	ldr	r3, [r2, #8]
 80017cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6093      	str	r3, [r2, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <ADC_Enable+0x98>)
 80017dc:	4a16      	ldr	r2, [pc, #88]	; (8001838 <ADC_Enable+0x9c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80017e4:	230a      	movs	r3, #10
 80017e6:	4353      	muls	r3, r2
      wait_loop_index--;
 80017e8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80017ea:	9b01      	ldr	r3, [sp, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1e5      	bne.n	80017bc <ADC_Enable+0x20>
    tickstart = HAL_GetTick();
 80017f0:	f7ff fc16 	bl	8001020 <HAL_GetTick>
 80017f4:	4e11      	ldr	r6, [pc, #68]	; (800183c <ADC_Enable+0xa0>)
 80017f6:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	6813      	ldr	r3, [r2, #0]
 80017fc:	07db      	lsls	r3, r3, #31
 80017fe:	d4da      	bmi.n	80017b6 <ADC_Enable+0x1a>
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001800:	6893      	ldr	r3, [r2, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 8001802:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8001804:	bf5f      	itttt	pl
 8001806:	6893      	ldrpl	r3, [r2, #8]
 8001808:	4033      	andpl	r3, r6
 800180a:	f043 0301 	orrpl.w	r3, r3, #1
 800180e:	6093      	strpl	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001810:	f7ff fc06 	bl	8001020 <HAL_GetTick>
 8001814:	1b40      	subs	r0, r0, r5
 8001816:	2802      	cmp	r0, #2
 8001818:	d9ee      	bls.n	80017f8 <ADC_Enable+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 800182a:	2001      	movs	r0, #1
 800182c:	e7c4      	b.n	80017b8 <ADC_Enable+0x1c>
 800182e:	bf00      	nop
 8001830:	8000003f 	.word	0x8000003f
 8001834:	20000a50 	.word	0x20000a50
 8001838:	001e8480 	.word	0x001e8480
 800183c:	7fffffc0 	.word	0x7fffffc0

08001840 <HAL_ADC_Start>:
{
 8001840:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001842:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001844:	689d      	ldr	r5, [r3, #8]
 8001846:	f015 0504 	ands.w	r5, r5, #4
{
 800184a:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800184c:	d13a      	bne.n	80018c4 <HAL_ADC_Start+0x84>
    __HAL_LOCK(hadc);
 800184e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001852:	2b01      	cmp	r3, #1
 8001854:	d036      	beq.n	80018c4 <HAL_ADC_Start+0x84>
 8001856:	2301      	movs	r3, #1
 8001858:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 800185c:	f7ff ff9e 	bl	800179c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001860:	2800      	cmp	r0, #0
 8001862:	d12c      	bne.n	80018be <HAL_ADC_Start+0x7e>
      ADC_STATE_CLR_SET(hadc->State,
 8001864:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001866:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	65e3      	str	r3, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001874:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001876:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800187a:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800187e:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001880:	bf48      	it	mi
 8001882:	6e23      	ldrmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001884:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 8001886:	bf52      	itee	pl
 8001888:	6620      	strpl	r0, [r4, #96]	; 0x60
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800188a:	f023 0306 	bicmi.w	r3, r3, #6
 800188e:	6623      	strmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001890:	231c      	movs	r3, #28
 8001892:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001894:	2300      	movs	r3, #0
 8001896:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800189a:	68d3      	ldr	r3, [r2, #12]
 800189c:	019b      	lsls	r3, r3, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800189e:	bf41      	itttt	mi
 80018a0:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
 80018a2:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 80018a6:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 80018aa:	65e3      	strmi	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 80018ac:	6893      	ldr	r3, [r2, #8]
 80018ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	6093      	str	r3, [r2, #8]
 80018bc:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80018be:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80018c2:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80018c4:	2002      	movs	r0, #2
}
 80018c6:	bd38      	pop	{r3, r4, r5, pc}

080018c8 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018c8:	6802      	ldr	r2, [r0, #0]
{
 80018ca:	b538      	push	{r3, r4, r5, lr}
 80018cc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018ce:	6890      	ldr	r0, [r2, #8]
 80018d0:	f000 0003 	and.w	r0, r0, #3
 80018d4:	2801      	cmp	r0, #1
 80018d6:	d001      	beq.n	80018dc <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018d8:	2000      	movs	r0, #0
 80018da:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	07d9      	lsls	r1, r3, #31
 80018e0:	d5fa      	bpl.n	80018d8 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018e2:	6893      	ldr	r3, [r2, #8]
 80018e4:	f003 030d 	and.w	r3, r3, #13
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d11f      	bne.n	800192c <ADC_Disable+0x64>
  MODIFY_REG(ADCx->CR,
 80018ec:	6893      	ldr	r3, [r2, #8]
 80018ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80018fc:	2303      	movs	r3, #3
 80018fe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001900:	f7ff fb8e 	bl	8001020 <HAL_GetTick>
 8001904:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	07db      	lsls	r3, r3, #31
 800190c:	d5e4      	bpl.n	80018d8 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800190e:	f7ff fb87 	bl	8001020 <HAL_GetTick>
 8001912:	1b40      	subs	r0, r0, r5
 8001914:	2802      	cmp	r0, #2
 8001916:	d9f6      	bls.n	8001906 <ADC_Disable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001918:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001920:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001928:	2001      	movs	r0, #1
 800192a:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800192e:	f043 0310 	orr.w	r3, r3, #16
 8001932:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 800193c:	bd38      	pop	{r3, r4, r5, pc}

0800193e <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800193e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001942:	2b01      	cmp	r3, #1
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001948:	d016      	beq.n	8001978 <HAL_ADC_Stop+0x3a>
 800194a:	2301      	movs	r3, #1
 800194c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001950:	2103      	movs	r1, #3
 8001952:	f7ff fec9 	bl	80016e8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001956:	b958      	cbnz	r0, 8001970 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff ffb5 	bl	80018c8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800195e:	b938      	cbnz	r0, 8001970 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8001960:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001962:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	65e3      	str	r3, [r4, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8001970:	2300      	movs	r3, #0
 8001972:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return tmp_hal_status;
 8001976:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001978:	2002      	movs	r0, #2
}
 800197a:	bd10      	pop	{r4, pc}

0800197c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800197e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001980:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800198c:	0200      	lsls	r0, r0, #8
 800198e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001992:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001996:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001998:	60d3      	str	r3, [r2, #12]
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a2:	b530      	push	{r4, r5, lr}
 80019a4:	68dc      	ldr	r4, [r3, #12]
 80019a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	bf28      	it	cs
 80019b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 0501 	mov.w	r5, #1
 80019bc:	fa05 f303 	lsl.w	r3, r5, r3
 80019c0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c4:	bf8c      	ite	hi
 80019c6:	3c03      	subhi	r4, #3
 80019c8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ca:	4019      	ands	r1, r3
 80019cc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ce:	fa05 f404 	lsl.w	r4, r5, r4
 80019d2:	3c01      	subs	r4, #1
 80019d4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80019d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	ea42 0201 	orr.w	r2, r2, r1
 80019dc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	bfaf      	iteee	ge
 80019e2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	f000 000f 	andlt.w	r0, r0, #15
 80019ea:	4b06      	ldrlt	r3, [pc, #24]	; (8001a04 <HAL_NVIC_SetPriority+0x64>)
 80019ec:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	bfa5      	ittet	ge
 80019f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80019f4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80019fc:	bd30      	pop	{r4, r5, pc}
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	e000ed14 	.word	0xe000ed14

08001a08 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a08:	0942      	lsrs	r2, r0, #5
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f000 001f 	and.w	r0, r0, #31
 8001a10:	fa03 f000 	lsl.w	r0, r3, r0
 8001a14:	4b01      	ldr	r3, [pc, #4]	; (8001a1c <HAL_NVIC_EnableIRQ+0x14>)
 8001a16:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a20:	0943      	lsrs	r3, r0, #5
 8001a22:	2201      	movs	r2, #1
 8001a24:	f000 001f 	and.w	r0, r0, #31
 8001a28:	fa02 f000 	lsl.w	r0, r2, r0
 8001a2c:	3320      	adds	r3, #32
 8001a2e:	4a02      	ldr	r2, [pc, #8]	; (8001a38 <HAL_NVIC_DisableIRQ+0x18>)
 8001a30:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	3801      	subs	r0, #1
 8001a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a42:	d20a      	bcs.n	8001a5a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a48:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	21f0      	movs	r1, #240	; 0xf0
 8001a4c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a68:	0943      	lsrs	r3, r0, #5
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f000 001f 	and.w	r0, r0, #31
 8001a70:	fa02 f000 	lsl.w	r0, r2, r0
 8001a74:	3360      	adds	r3, #96	; 0x60
 8001a76:	4a02      	ldr	r2, [pc, #8]	; (8001a80 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8001a78:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a86:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a88:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a8a:	bf0c      	ite	eq
 8001a8c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a90:	f022 0204 	bicne.w	r2, r2, #4
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	4770      	bx	lr
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a9c:	4770      	bx	lr

08001a9e <HAL_SYSTICK_IRQHandler>:
{
 8001a9e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001aa0:	f7ff fffc 	bl	8001a9c <HAL_SYSTICK_Callback>
 8001aa4:	bd08      	pop	{r3, pc}

08001aa6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001aa6:	b570      	push	{r4, r5, r6, lr}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001aaa:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8001aac:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001aae:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001ab0:	b114      	cbz	r4, 8001ab8 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ab2:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001ab4:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001ab6:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ab8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001aba:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001abc:	f004 051c 	and.w	r5, r4, #28
 8001ac0:	2401      	movs	r4, #1
 8001ac2:	40ac      	lsls	r4, r5
 8001ac4:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ac6:	6804      	ldr	r4, [r0, #0]
 8001ac8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aca:	6883      	ldr	r3, [r0, #8]
 8001acc:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ace:	bf0b      	itete	eq
 8001ad0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001ad2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001ad4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001ad6:	60e2      	strne	r2, [r4, #12]
 8001ad8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001adc <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001adc:	6803      	ldr	r3, [r0, #0]
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
  }
  else
  {
    /* DMA2 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
 8001ade:	490d      	ldr	r1, [pc, #52]	; (8001b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	; (8001b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
{
 8001ae2:	b510      	push	{r4, lr}
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
 8001ae4:	4c0d      	ldr	r4, [pc, #52]	; (8001b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8001ae6:	42a3      	cmp	r3, r4
 8001ae8:	bf88      	it	hi
 8001aea:	460a      	movhi	r2, r1
  }
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001aec:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001aee:	f021 0103 	bic.w	r1, r1, #3
 8001af2:	440a      	add	r2, r1
 8001af4:	6482      	str	r2, [r0, #72]	; 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001af6:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001af8:	4a09      	ldr	r2, [pc, #36]	; (8001b20 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001afa:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001afc:	3b08      	subs	r3, #8
 8001afe:	2214      	movs	r2, #20
 8001b00:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001b04:	2201      	movs	r2, #1
 8001b06:	f003 031c 	and.w	r3, r3, #28
 8001b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0e:	6503      	str	r3, [r0, #80]	; 0x50
 8001b10:	bd10      	pop	{r4, pc}
 8001b12:	bf00      	nop
 8001b14:	4002081c 	.word	0x4002081c
 8001b18:	40020800 	.word	0x40020800
 8001b1c:	40020407 	.word	0x40020407
 8001b20:	40020880 	.word	0x40020880

08001b24 <HAL_DMA_Init>:
{
 8001b24:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8001b26:	4604      	mov	r4, r0
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	d05d      	beq.n	8001be8 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b2c:	6801      	ldr	r1, [r0, #0]
 8001b2e:	4b2f      	ldr	r3, [pc, #188]	; (8001bec <HAL_DMA_Init+0xc8>)
 8001b30:	4299      	cmp	r1, r3
 8001b32:	f04f 0014 	mov.w	r0, #20
 8001b36:	d84a      	bhi.n	8001bce <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b38:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <HAL_DMA_Init+0xcc>)
 8001b3a:	440a      	add	r2, r1
 8001b3c:	fbb2 f2f0 	udiv	r2, r2, r0
 8001b40:	0092      	lsls	r2, r2, #2
 8001b42:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b44:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001b48:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8001b50:	68e0      	ldr	r0, [r4, #12]
 8001b52:	68a3      	ldr	r3, [r4, #8]
  tmp = hdma->Instance->CCR;
 8001b54:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8001b56:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b58:	6920      	ldr	r0, [r4, #16]
 8001b5a:	4303      	orrs	r3, r0
 8001b5c:	6960      	ldr	r0, [r4, #20]
 8001b5e:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b60:	69a0      	ldr	r0, [r4, #24]
 8001b62:	4303      	orrs	r3, r0
 8001b64:	69e0      	ldr	r0, [r4, #28]
 8001b66:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b68:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b6a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001b6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b72:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001b74:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001b76:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b78:	4620      	mov	r0, r4
 8001b7a:	f7ff ffaf 	bl	8001adc <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b7e:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b82:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b88:	bf04      	itt	eq
 8001b8a:	2300      	moveq	r3, #0
 8001b8c:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b8e:	6862      	ldr	r2, [r4, #4]
 8001b90:	b2d3      	uxtb	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b94:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b98:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b9a:	6048      	str	r0, [r1, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b9c:	d81f      	bhi.n	8001bde <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b9e:	4a15      	ldr	r2, [pc, #84]	; (8001bf4 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001ba0:	4815      	ldr	r0, [pc, #84]	; (8001bf8 <HAL_DMA_Init+0xd4>)
 8001ba2:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ba4:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ba6:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ba8:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001baa:	2101      	movs	r1, #1
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bb4:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001bb6:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001bb8:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001bba:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bbc:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bbe:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8001bc0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bc2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8001bc4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001bc8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  return HAL_OK;
 8001bcc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_DMA_Init+0xd8>)
 8001bd0:	440b      	add	r3, r1
 8001bd2:	fbb3 f3f0 	udiv	r3, r3, r0
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_DMA_Init+0xdc>)
 8001bdc:	e7b4      	b.n	8001b48 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001be2:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001be4:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001be6:	e7ea      	b.n	8001bbe <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
}
 8001bea:	bd10      	pop	{r4, pc}
 8001bec:	40020407 	.word	0x40020407
 8001bf0:	bffdfff8 	.word	0xbffdfff8
 8001bf4:	1000823f 	.word	0x1000823f
 8001bf8:	40020940 	.word	0x40020940
 8001bfc:	bffdfbf8 	.word	0xbffdfbf8
 8001c00:	40020400 	.word	0x40020400

08001c04 <HAL_DMA_DeInit>:
{
 8001c04:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma )
 8001c06:	4604      	mov	r4, r0
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d045      	beq.n	8001c98 <HAL_DMA_DeInit+0x94>
  __HAL_DMA_DISABLE(hdma);
 8001c0c:	6801      	ldr	r1, [r0, #0]
 8001c0e:	680b      	ldr	r3, [r1, #0]
 8001c10:	f023 0301 	bic.w	r3, r3, #1
 8001c14:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_DMA_DeInit+0x98>)
 8001c18:	4299      	cmp	r1, r3
 8001c1a:	f04f 0014 	mov.w	r0, #20
 8001c1e:	d833      	bhi.n	8001c88 <HAL_DMA_DeInit+0x84>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c20:	4a1f      	ldr	r2, [pc, #124]	; (8001ca0 <HAL_DMA_DeInit+0x9c>)
 8001c22:	440a      	add	r2, r1
 8001c24:	fbb2 f2f0 	udiv	r2, r2, r0
 8001c28:	0092      	lsls	r2, r2, #2
 8001c2a:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c2c:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001c30:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c34:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c36:	f003 031c 	and.w	r3, r3, #28
 8001c3a:	2501      	movs	r5, #1
 8001c3c:	fa05 f303 	lsl.w	r3, r5, r3
  hdma->Instance->CCR  = 0;
 8001c40:	2600      	movs	r6, #0
 8001c42:	600e      	str	r6, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c44:	4620      	mov	r0, r4
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c46:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c48:	f7ff ff48 	bl	8001adc <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 8001c4c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c4e:	6861      	ldr	r1, [r4, #4]
  hdma->DMAmuxChannel->CCR = 0;
 8001c50:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001c54:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001c56:	605a      	str	r2, [r3, #4]
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c58:	1e4a      	subs	r2, r1, #1
 8001c5a:	2a03      	cmp	r2, #3
 8001c5c:	d806      	bhi.n	8001c6c <HAL_DMA_DeInit+0x68>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c5e:	4b11      	ldr	r3, [pc, #68]	; (8001ca4 <HAL_DMA_DeInit+0xa0>)
 8001c60:	440b      	add	r3, r1
 8001c62:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c64:	4095      	lsls	r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c66:	601e      	str	r6, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c68:	4b0f      	ldr	r3, [pc, #60]	; (8001ca8 <HAL_DMA_DeInit+0xa4>)
 8001c6a:	605d      	str	r5, [r3, #4]
  hdma->DMAmuxRequestGen = 0U;
 8001c6c:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c6e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->DMAmuxRequestGen = 0U;
 8001c70:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001c72:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c74:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8001c76:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001c78:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001c7a:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001c7c:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 8001c7e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001c82:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  return HAL_OK;
 8001c86:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_DMA_DeInit+0xa8>)
 8001c8a:	440b      	add	r3, r1
 8001c8c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_DMA_DeInit+0xac>)
 8001c96:	e7cb      	b.n	8001c30 <HAL_DMA_DeInit+0x2c>
    return HAL_ERROR;
 8001c98:	2001      	movs	r0, #1
}
 8001c9a:	bd70      	pop	{r4, r5, r6, pc}
 8001c9c:	40020407 	.word	0x40020407
 8001ca0:	bffdfff8 	.word	0xbffdfff8
 8001ca4:	1000823f 	.word	0x1000823f
 8001ca8:	40020940 	.word	0x40020940
 8001cac:	bffdfbf8 	.word	0xbffdfbf8
 8001cb0:	40020400 	.word	0x40020400

08001cb4 <HAL_DMA_Start_IT>:
{
 8001cb4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001cb6:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8001cba:	2d01      	cmp	r5, #1
{
 8001cbc:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001cbe:	d039      	beq.n	8001d34 <HAL_DMA_Start_IT+0x80>
 8001cc0:	2501      	movs	r5, #1
 8001cc2:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cc6:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8001cca:	2d01      	cmp	r5, #1
 8001ccc:	f04f 0600 	mov.w	r6, #0
 8001cd0:	f04f 0502 	mov.w	r5, #2
 8001cd4:	d12c      	bne.n	8001d30 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cd6:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cda:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001cdc:	6806      	ldr	r6, [r0, #0]
 8001cde:	6835      	ldr	r5, [r6, #0]
 8001ce0:	f025 0501 	bic.w	r5, r5, #1
 8001ce4:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ce6:	f7ff fede 	bl	8001aa6 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001cea:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001cec:	6803      	ldr	r3, [r0, #0]
 8001cee:	b1ba      	cbz	r2, 8001d20 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cf6:	601a      	str	r2, [r3, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001cf8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001cfa:	6811      	ldr	r1, [r2, #0]
 8001cfc:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001cfe:	bf42      	ittt	mi
 8001d00:	6811      	ldrmi	r1, [r2, #0]
 8001d02:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8001d06:	6011      	strmi	r1, [r2, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8001d08:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001d0a:	b11a      	cbz	r2, 8001d14 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001d0c:	6811      	ldr	r1, [r2, #0]
 8001d0e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001d12:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	f022 0204 	bic.w	r2, r2, #4
 8001d26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	f042 020a 	orr.w	r2, r2, #10
 8001d2e:	e7e2      	b.n	8001cf6 <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8001d30:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001d34:	2002      	movs	r0, #2
}
 8001d36:	bd70      	pop	{r4, r5, r6, pc}

08001d38 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d38:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001d3c:	2b02      	cmp	r3, #2
{
 8001d3e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d40:	d003      	beq.n	8001d4a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d42:	2304      	movs	r3, #4
 8001d44:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001d46:	2001      	movs	r0, #1
 8001d48:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d4a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d4c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	f022 020e 	bic.w	r2, r2, #14
 8001d54:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	f022 0201 	bic.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d5e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001d60:	6813      	ldr	r3, [r2, #0]
 8001d62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d66:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d68:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d6a:	f003 021c 	and.w	r2, r3, #28
 8001d6e:	2301      	movs	r3, #1
 8001d70:	4093      	lsls	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d74:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d76:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001d78:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001d7a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d7c:	b133      	cbz	r3, 8001d8c <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d84:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d86:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001d88:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d8a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if(hdma->XferAbortCallback != NULL)
 8001d92:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001d94:	2400      	movs	r4, #0
 8001d96:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001d9a:	b113      	cbz	r3, 8001da2 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8001d9c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001d9e:	4620      	mov	r0, r4
 8001da0:	bd10      	pop	{r4, pc}
 8001da2:	4618      	mov	r0, r3
}
 8001da4:	bd10      	pop	{r4, pc}

08001da6 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001da6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001da8:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001daa:	6803      	ldr	r3, [r0, #0]
{
 8001dac:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001dae:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001db2:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001db4:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001db6:	2404      	movs	r4, #4
 8001db8:	4094      	lsls	r4, r2
 8001dba:	4226      	tst	r6, r4
 8001dbc:	d00e      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x36>
 8001dbe:	f015 0f04 	tst.w	r5, #4
 8001dc2:	d00b      	beq.n	8001ddc <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001dc8:	bf5e      	ittt	pl
 8001dca:	681a      	ldrpl	r2, [r3, #0]
 8001dcc:	f022 0204 	bicpl.w	r2, r2, #4
 8001dd0:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001dd2:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001dd4:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001dd6:	b373      	cbz	r3, 8001e36 <HAL_DMA_IRQHandler+0x90>
}
 8001dd8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001dda:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001ddc:	2402      	movs	r4, #2
 8001dde:	4094      	lsls	r4, r2
 8001de0:	4226      	tst	r6, r4
 8001de2:	d012      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x64>
 8001de4:	f015 0f02 	tst.w	r5, #2
 8001de8:	d00f      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	0695      	lsls	r5, r2, #26
 8001dee:	d406      	bmi.n	8001dfe <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	f022 020a 	bic.w	r2, r2, #10
 8001df6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001dfe:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e00:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001e02:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001e06:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001e08:	e7e5      	b.n	8001dd6 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001e0a:	2408      	movs	r4, #8
 8001e0c:	4094      	lsls	r4, r2
 8001e0e:	4234      	tst	r4, r6
 8001e10:	d011      	beq.n	8001e36 <HAL_DMA_IRQHandler+0x90>
 8001e12:	072c      	lsls	r4, r5, #28
 8001e14:	d50f      	bpl.n	8001e36 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e16:	681c      	ldr	r4, [r3, #0]
 8001e18:	f024 040e 	bic.w	r4, r4, #14
 8001e1c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e1e:	2301      	movs	r3, #1
 8001e20:	fa03 f202 	lsl.w	r2, r3, r2
 8001e24:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e26:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001e28:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001e32:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e34:	e7cf      	b.n	8001dd6 <HAL_DMA_IRQHandler+0x30>
}
 8001e36:	bc70      	pop	{r4, r5, r6}
 8001e38:	4770      	bx	lr
	...

08001e3c <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8001e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8001e3e:	6805      	ldr	r5, [r0, #0]
 8001e40:	4e0a      	ldr	r6, [pc, #40]	; (8001e6c <DMA2D_SetConfig+0x30>)
 8001e42:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001e44:	fa96 f6a6 	rbit	r6, r6
 8001e48:	9f05      	ldr	r7, [sp, #20]
 8001e4a:	fab6 f686 	clz	r6, r6
 8001e4e:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8001e52:	433c      	orrs	r4, r7
 8001e54:	40b3      	lsls	r3, r6
 8001e56:	4323      	orrs	r3, r4
 8001e58:	646b      	str	r3, [r5, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e5a:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001e5c:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, pdata);    
 8001e62:	bf0c      	ite	eq
 8001e64:	63a9      	streq	r1, [r5, #56]	; 0x38
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
  WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001e66:	60e9      	strne	r1, [r5, #12]
 8001e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	3fff0000 	.word	0x3fff0000

08001e70 <HAL_DMA2D_Init>:
{ 
 8001e70:	b538      	push	{r3, r4, r5, lr}
  if(hdma2d == NULL)
 8001e72:	4604      	mov	r4, r0
 8001e74:	2800      	cmp	r0, #0
 8001e76:	d043      	beq.n	8001f00 <HAL_DMA2D_Init+0x90>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001e78:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001e7c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e80:	b91b      	cbnz	r3, 8001e8a <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
 8001e82:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
    HAL_DMA2D_MspInit(hdma2d);
 8001e86:	f01f fbab 	bl	80215e0 <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	69e0      	ldr	r0, [r4, #28]
 8001e94:	6819      	ldr	r1, [r3, #0]
 8001e96:	6862      	ldr	r2, [r4, #4]
 8001e98:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8001e9c:	4302      	orrs	r2, r0
 8001e9e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8001ea6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ea8:	68a2      	ldr	r2, [r4, #8]
 8001eaa:	69a0      	ldr	r0, [r4, #24]
 8001eac:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8001eb0:	4302      	orrs	r2, r0
 8001eb2:	f021 0101 	bic.w	r1, r1, #1
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001eba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ebc:	68e1      	ldr	r1, [r4, #12]
 8001ebe:	0c12      	lsrs	r2, r2, #16
 8001ec0:	0412      	lsls	r2, r2, #16
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), \
 8001ec6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001ec8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ecc:	fa92 f2a2 	rbit	r2, r2
 8001ed0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001ed4:	fab2 f082 	clz	r0, r2
 8001ed8:	fa91 f1a1 	rbit	r1, r1
 8001edc:	6922      	ldr	r2, [r4, #16]
 8001ede:	4082      	lsls	r2, r0
 8001ee0:	6960      	ldr	r0, [r4, #20]
 8001ee2:	fab1 f181 	clz	r1, r1
 8001ee6:	fa00 f101 	lsl.w	r1, r0, r1
 8001eea:	430a      	orrs	r2, r1
 8001eec:	f425 1140 	bic.w	r1, r5, #3145728	; 0x300000
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ef4:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001ef6:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ef8:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001efa:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  return HAL_OK;
 8001efe:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001f00:	2001      	movs	r0, #1
}
 8001f02:	bd38      	pop	{r3, r4, r5, pc}

08001f04 <HAL_DMA2D_Start>:
{
 8001f04:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001f06:	f890 4058 	ldrb.w	r4, [r0, #88]	; 0x58
 8001f0a:	2c01      	cmp	r4, #1
 8001f0c:	f04f 0402 	mov.w	r4, #2
 8001f10:	d00f      	beq.n	8001f32 <HAL_DMA2D_Start+0x2e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f12:	f880 4059 	strb.w	r4, [r0, #89]	; 0x59
  __HAL_LOCK(hdma2d);
 8001f16:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001f18:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8001f1a:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001f1e:	9400      	str	r4, [sp, #0]
 8001f20:	f7ff ff8c 	bl	8001e3c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001f24:	6802      	ldr	r2, [r0, #0]
 8001f26:	6813      	ldr	r3, [r2, #0]
 8001f28:	4333      	orrs	r3, r6
 8001f2a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001f2c:	2000      	movs	r0, #0
}
 8001f2e:	b002      	add	sp, #8
 8001f30:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001f32:	4620      	mov	r0, r4
 8001f34:	e7fb      	b.n	8001f2e <HAL_DMA2D_Start+0x2a>

08001f36 <HAL_DMA2D_PollForTransfer>:
{
 8001f36:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001f3c:	6803      	ldr	r3, [r0, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	07db      	lsls	r3, r3, #31
{
 8001f42:	4604      	mov	r4, r0
 8001f44:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001f46:	d427      	bmi.n	8001f98 <HAL_DMA2D_PollForTransfer+0x62>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001f48:	6823      	ldr	r3, [r4, #0]
 8001f4a:	69da      	ldr	r2, [r3, #28]
 8001f4c:	0696      	lsls	r6, r2, #26
 8001f4e:	d55c      	bpl.n	800200a <HAL_DMA2D_PollForTransfer+0xd4>
    tickstart = HAL_GetTick();
 8001f50:	f7ff f866 	bl	8001020 <HAL_GetTick>
 8001f54:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001f56:	6823      	ldr	r3, [r4, #0]
 8001f58:	685a      	ldr	r2, [r3, #4]
 8001f5a:	06d2      	lsls	r2, r2, #27
 8001f5c:	d458      	bmi.n	8002010 <HAL_DMA2D_PollForTransfer+0xda>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001f62:	9a01      	ldr	r2, [sp, #4]
 8001f64:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001f68:	d05d      	beq.n	8002026 <HAL_DMA2D_PollForTransfer+0xf0>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001f6a:	9a01      	ldr	r2, [sp, #4]
 8001f6c:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8001f6e:	bf42      	ittt	mi
 8001f70:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001f72:	f042 0204 	orrmi.w	r2, r2, #4
 8001f76:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8001f78:	9a01      	ldr	r2, [sp, #4]
 8001f7a:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001f7c:	bf42      	ittt	mi
 8001f7e:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001f80:	f042 0202 	orrmi.w	r2, r2, #2
 8001f84:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001f86:	9a01      	ldr	r2, [sp, #4]
 8001f88:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001f8a:	bf42      	ittt	mi
 8001f8c:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001f8e:	f042 0201 	orrmi.w	r2, r2, #1
 8001f92:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f94:	2229      	movs	r2, #41	; 0x29
 8001f96:	e01b      	b.n	8001fd0 <HAL_DMA2D_PollForTransfer+0x9a>
   tickstart = HAL_GetTick();
 8001f98:	f7ff f842 	bl	8001020 <HAL_GetTick>
 8001f9c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001f9e:	6823      	ldr	r3, [r4, #0]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	0792      	lsls	r2, r2, #30
 8001fa4:	d4d0      	bmi.n	8001f48 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001faa:	9a01      	ldr	r2, [sp, #4]
 8001fac:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001fb0:	d017      	beq.n	8001fe2 <HAL_DMA2D_PollForTransfer+0xac>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001fb2:	9a01      	ldr	r2, [sp, #4]
 8001fb4:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001fb6:	bf42      	ittt	mi
 8001fb8:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001fba:	f042 0202 	orrmi.w	r2, r2, #2
 8001fbe:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001fc0:	9a01      	ldr	r2, [sp, #4]
 8001fc2:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001fc4:	bf42      	ittt	mi
 8001fc6:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001fc8:	f042 0201 	orrmi.w	r2, r2, #1
 8001fcc:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001fce:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001fd0:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001fd2:	2304      	movs	r3, #4
 8001fd4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
        __HAL_UNLOCK(hdma2d);
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_ERROR;      
 8001fde:	2001      	movs	r0, #1
 8001fe0:	e01f      	b.n	8002022 <HAL_DMA2D_PollForTransfer+0xec>
      if(Timeout != HAL_MAX_DELAY)
 8001fe2:	1c69      	adds	r1, r5, #1
 8001fe4:	d0dc      	beq.n	8001fa0 <HAL_DMA2D_PollForTransfer+0x6a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001fe6:	b955      	cbnz	r5, 8001ffe <HAL_DMA2D_PollForTransfer+0xc8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001fe8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001fea:	f043 0320 	orr.w	r3, r3, #32
 8001fee:	65e3      	str	r3, [r4, #92]	; 0x5c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001ff0:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8001ff2:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001ff4:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
          __HAL_UNLOCK(hdma2d);
 8001ff8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
          return HAL_TIMEOUT;
 8001ffc:	e011      	b.n	8002022 <HAL_DMA2D_PollForTransfer+0xec>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001ffe:	f7ff f80f 	bl	8001020 <HAL_GetTick>
 8002002:	1b80      	subs	r0, r0, r6
 8002004:	4285      	cmp	r5, r0
 8002006:	d2ca      	bcs.n	8001f9e <HAL_DMA2D_PollForTransfer+0x68>
 8002008:	e7ee      	b.n	8001fe8 <HAL_DMA2D_PollForTransfer+0xb2>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 800200a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 800200c:	069b      	lsls	r3, r3, #26
 800200e:	d49f      	bmi.n	8001f50 <HAL_DMA2D_PollForTransfer+0x1a>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	2212      	movs	r2, #18
 8002014:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8002016:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002018:	2301      	movs	r3, #1
 800201a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);
 800201e:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
}
 8002022:	b002      	add	sp, #8
 8002024:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8002026:	1c69      	adds	r1, r5, #1
 8002028:	d096      	beq.n	8001f58 <HAL_DMA2D_PollForTransfer+0x22>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800202a:	2d00      	cmp	r5, #0
 800202c:	d0dc      	beq.n	8001fe8 <HAL_DMA2D_PollForTransfer+0xb2>
 800202e:	f7fe fff7 	bl	8001020 <HAL_GetTick>
 8002032:	1b80      	subs	r0, r0, r6
 8002034:	4285      	cmp	r5, r0
 8002036:	d28e      	bcs.n	8001f56 <HAL_DMA2D_PollForTransfer+0x20>
 8002038:	e7d6      	b.n	8001fe8 <HAL_DMA2D_PollForTransfer+0xb2>
	...

0800203c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800203c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8002040:	2b01      	cmp	r3, #1
{   
 8002042:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002044:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 8002048:	d041      	beq.n	80020ce <HAL_DMA2D_ConfigLayer+0x92>
 800204a:	2201      	movs	r2, #1
 800204c:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  hdma2d->State = HAL_DMA2D_STATE_BUSY;   
 8002050:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 8002054:	6802      	ldr	r2, [r0, #0]
  if(LayerIdx == 0)
 8002056:	2900      	cmp	r1, #0
 8002058:	d14d      	bne.n	80020f6 <HAL_DMA2D_ConfigLayer+0xba>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800205a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800205c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800205e:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8002060:	f1a6 0509 	sub.w	r5, r6, #9
 8002064:	2d01      	cmp	r5, #1
 8002066:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800206a:	d832      	bhi.n	80020d2 <HAL_DMA2D_ConfigLayer+0x96>
 800206c:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA));
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	f004 417f 	and.w	r1, r4, #4278190080	; 0xff000000
 8002078:	4331      	orrs	r1, r6
 800207a:	fa07 f303 	lsl.w	r3, r7, r3
 800207e:	4319      	orrs	r1, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS), \
 8002080:	f8d2 e024 	ldr.w	lr, [r2, #36]	; 0x24
 8002084:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8002090:	fab3 f783 	clz	r7, r3
 8002094:	fa96 f6a6 	rbit	r6, r6
 8002098:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800209a:	40bb      	lsls	r3, r7
 800209c:	4f3c      	ldr	r7, [pc, #240]	; (8002190 <HAL_DMA2D_ConfigLayer+0x154>)
 800209e:	ea0e 0707 	and.w	r7, lr, r7
 80020a2:	4339      	orrs	r1, r7
 80020a4:	430b      	orrs	r3, r1
 80020a6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80020a8:	fab6 f686 	clz	r6, r6
 80020ac:	fa01 f606 	lsl.w	r6, r1, r6
 80020b0:	4333      	orrs	r3, r6
 80020b2:	6253      	str	r3, [r2, #36]	; 0x24
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020b4:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->BGOR, LayerCfg->InputOffset);
 80020b6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80020b8:	6193      	str	r3, [r2, #24]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020ba:	d802      	bhi.n	80020c2 <HAL_DMA2D_ConfigLayer+0x86>
      WRITE_REG(hdma2d->Instance->BGCOLR, LayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80020bc:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80020c0:	6294      	str	r4, [r2, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020c2:	2301      	movs	r3, #1
 80020c4:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);  
 80020c8:	2300      	movs	r3, #0
 80020ca:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  __HAL_LOCK(hdma2d);
 80020ce:	4618      	mov	r0, r3
}
 80020d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA));
 80020da:	fab3 f383 	clz	r3, r3
 80020de:	fa91 f1a1 	rbit	r1, r1
 80020e2:	fab1 f181 	clz	r1, r1
 80020e6:	fa04 f101 	lsl.w	r1, r4, r1
 80020ea:	fa07 f303 	lsl.w	r3, r7, r3
 80020ee:	430b      	orrs	r3, r1
 80020f0:	ea43 0106 	orr.w	r1, r3, r6
 80020f4:	e7c4      	b.n	8002080 <HAL_DMA2D_ConfigLayer+0x44>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020f6:	2418      	movs	r4, #24
 80020f8:	fb04 0401 	mla	r4, r4, r1, r0
 80020fc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002100:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8002102:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8002104:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8002106:	f1a7 0509 	sub.w	r5, r7, #9
 800210a:	2d01      	cmp	r5, #1
 800210c:	d82f      	bhi.n	800216e <HAL_DMA2D_ConfigLayer+0x132>
 800210e:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_FGPFCCR_ALPHA));
 8002112:	fab3 f383 	clz	r3, r3
 8002116:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 800211a:	4337      	orrs	r7, r6
 800211c:	fa04 f303 	lsl.w	r3, r4, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8002120:	433b      	orrs	r3, r7
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_AI | DMA2D_FGPFCCR_RBS), \
 8002122:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8002126:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 800212a:	fa94 f4a4 	rbit	r4, r4
 800212e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8002132:	fab4 f784 	clz	r7, r4
 8002136:	fa96 f6a6 	rbit	r6, r6
 800213a:	2418      	movs	r4, #24
 800213c:	fb04 0101 	mla	r1, r4, r1, r0
 8002140:	fab6 f686 	clz	r6, r6
 8002144:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8002146:	40bc      	lsls	r4, r7
 8002148:	4f11      	ldr	r7, [pc, #68]	; (8002190 <HAL_DMA2D_ConfigLayer+0x154>)
 800214a:	ea0e 0707 	and.w	r7, lr, r7
 800214e:	433b      	orrs	r3, r7
 8002150:	4323      	orrs	r3, r4
 8002152:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8002154:	fa04 f606 	lsl.w	r6, r4, r6
 8002158:	4333      	orrs	r3, r6
 800215a:	61d3      	str	r3, [r2, #28]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800215c:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->FGOR, LayerCfg->InputOffset);      
 800215e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002160:	6113      	str	r3, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, LayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8002162:	bf9e      	ittt	ls
 8002164:	6b4b      	ldrls	r3, [r1, #52]	; 0x34
 8002166:	f023 437f 	bicls.w	r3, r3, #4278190080	; 0xff000000
 800216a:	6213      	strls	r3, [r2, #32]
 800216c:	e7a9      	b.n	80020c2 <HAL_DMA2D_ConfigLayer+0x86>
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8002176:	fab3 f383 	clz	r3, r3
 800217a:	fa9e feae 	rbit	lr, lr
 800217e:	fabe fe8e 	clz	lr, lr
 8002182:	fa04 f303 	lsl.w	r3, r4, r3
 8002186:	fa06 f60e 	lsl.w	r6, r6, lr
 800218a:	4333      	orrs	r3, r6
 800218c:	e7c8      	b.n	8002120 <HAL_DMA2D_ConfigLayer+0xe4>
 800218e:	bf00      	nop
 8002190:	00ccfff0 	.word	0x00ccfff0

08002194 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002194:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <FLASH_Program_Fast+0x20>)
 8002196:	6953      	ldr	r3, [r2, #20]
 8002198:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800219c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800219e:	b672      	cpsid	i
 80021a0:	f501 7300 	add.w	r3, r1, #512	; 0x200
 80021a4:	1a40      	subs	r0, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80021a6:	680a      	ldr	r2, [r1, #0]
 80021a8:	500a      	str	r2, [r1, r0]
    dest_addr++;
    src_addr++;
 80021aa:	3104      	adds	r1, #4
    row_index--;
  } while (row_index != 0U);
 80021ac:	4299      	cmp	r1, r3
 80021ae:	d1fa      	bne.n	80021a6 <FLASH_Program_Fast+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 80021b0:	b662      	cpsie	i
 80021b2:	4770      	bx	lr
 80021b4:	40022000 	.word	0x40022000

080021b8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_FLASH_Unlock+0x1c>)
 80021ba:	695a      	ldr	r2, [r3, #20]
 80021bc:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80021be:	bfbf      	itttt	lt
 80021c0:	4a05      	ldrlt	r2, [pc, #20]	; (80021d8 <HAL_FLASH_Unlock+0x20>)
 80021c2:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80021c4:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80021c8:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80021ca:	bfba      	itte	lt
 80021cc:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80021ce:	0fc0      	lsrlt	r0, r0, #31
 80021d0:	2000      	movge	r0, #0
}
 80021d2:	4770      	bx	lr
 80021d4:	40022000 	.word	0x40022000
 80021d8:	45670123 	.word	0x45670123

080021dc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80021dc:	4a03      	ldr	r2, [pc, #12]	; (80021ec <HAL_FLASH_Lock+0x10>)
 80021de:	6953      	ldr	r3, [r2, #20]
 80021e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021e4:	6153      	str	r3, [r2, #20]
}
 80021e6:	2000      	movs	r0, #0
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000

080021f0 <FLASH_WaitForLastOperation>:
{
 80021f0:	b570      	push	{r4, r5, r6, lr}
 80021f2:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7fe ff14 	bl	8001020 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80021f8:	4c1a      	ldr	r4, [pc, #104]	; (8002264 <FLASH_WaitForLastOperation+0x74>)
  uint32_t tickstart = HAL_GetTick();
 80021fa:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80021fc:	6923      	ldr	r3, [r4, #16]
 80021fe:	03db      	lsls	r3, r3, #15
 8002200:	d41e      	bmi.n	8002240 <FLASH_WaitForLastOperation+0x50>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002202:	6923      	ldr	r3, [r4, #16]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8002204:	69a0      	ldr	r0, [r4, #24]
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002206:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800220a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800220e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8002212:	f023 0305 	bic.w	r3, r3, #5
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8002216:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  if(error != 0u)
 800221a:	4318      	orrs	r0, r3
 800221c:	d019      	beq.n	8002252 <FLASH_WaitForLastOperation+0x62>
    pFlash.ErrorCode |= error;
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <FLASH_WaitForLastOperation+0x78>)
 8002220:	6853      	ldr	r3, [r2, #4]
 8002222:	4303      	orrs	r3, r0
 8002224:	6053      	str	r3, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8002226:	f010 4340 	ands.w	r3, r0, #3221225472	; 0xc0000000
 800222a:	bf1e      	ittt	ne
 800222c:	69a2      	ldrne	r2, [r4, #24]
 800222e:	4313      	orrne	r3, r2
 8002230:	61a3      	strne	r3, [r4, #24]
 8002232:	f030 4040 	bics.w	r0, r0, #3221225472	; 0xc0000000
 8002236:	d001      	beq.n	800223c <FLASH_WaitForLastOperation+0x4c>
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <FLASH_WaitForLastOperation+0x74>)
 800223a:	6118      	str	r0, [r3, #16]
    return HAL_ERROR;
 800223c:	2001      	movs	r0, #1
 800223e:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002240:	1c6a      	adds	r2, r5, #1
 8002242:	d0db      	beq.n	80021fc <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002244:	f7fe feec 	bl	8001020 <HAL_GetTick>
 8002248:	1b80      	subs	r0, r0, r6
 800224a:	4285      	cmp	r5, r0
 800224c:	d8d6      	bhi.n	80021fc <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 800224e:	2003      	movs	r0, #3
 8002250:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002252:	6923      	ldr	r3, [r4, #16]
 8002254:	f013 0301 	ands.w	r3, r3, #1
 8002258:	d002      	beq.n	8002260 <FLASH_WaitForLastOperation+0x70>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800225a:	2301      	movs	r3, #1
 800225c:	6123      	str	r3, [r4, #16]
 800225e:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002260:	4618      	mov	r0, r3
}
 8002262:	bd70      	pop	{r4, r5, r6, pc}
 8002264:	40022000 	.word	0x40022000
 8002268:	20000000 	.word	0x20000000

0800226c <HAL_FLASH_Program>:
{
 800226c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8002270:	4c24      	ldr	r4, [pc, #144]	; (8002304 <HAL_FLASH_Program+0x98>)
{
 8002272:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 8002274:	7823      	ldrb	r3, [r4, #0]
 8002276:	2b01      	cmp	r3, #1
{
 8002278:	4607      	mov	r7, r0
 800227a:	4688      	mov	r8, r1
 800227c:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 800227e:	d03f      	beq.n	8002300 <HAL_FLASH_Program+0x94>
 8002280:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002282:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002286:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002288:	f7ff ffb2 	bl	80021f0 <FLASH_WaitForLastOperation>
 800228c:	4606      	mov	r6, r0
  if(status == HAL_OK)
 800228e:	bb20      	cbnz	r0, 80022da <HAL_FLASH_Program+0x6e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002290:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002292:	481d      	ldr	r0, [pc, #116]	; (8002308 <HAL_FLASH_Program+0x9c>)
 8002294:	6805      	ldr	r5, [r0, #0]
 8002296:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800229a:	bf17      	itett	ne
 800229c:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800229e:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80022a0:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 80022a4:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80022a6:	bf1c      	itt	ne
 80022a8:	2302      	movne	r3, #2
 80022aa:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80022ac:	b9d7      	cbnz	r7, 80022e4 <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80022ae:	6945      	ldr	r5, [r0, #20]
 80022b0:	f045 0501 	orr.w	r5, r5, #1
 80022b4:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80022b6:	f8c8 9000 	str.w	r9, [r8]
      prog_bit = FLASH_CR_PG;
 80022ba:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80022bc:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022c4:	f7ff ff94 	bl	80021f0 <FLASH_WaitForLastOperation>
 80022c8:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 80022ca:	b125      	cbz	r5, 80022d6 <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <HAL_FLASH_Program+0x9c>)
 80022ce:	6953      	ldr	r3, [r2, #20]
 80022d0:	ea23 0505 	bic.w	r5, r3, r5
 80022d4:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 80022d6:	f000 f85d 	bl	8002394 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80022da:	2300      	movs	r3, #0
 80022dc:	7023      	strb	r3, [r4, #0]
}
 80022de:	4630      	mov	r0, r6
 80022e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80022e4:	1e7b      	subs	r3, r7, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d901      	bls.n	80022ee <HAL_FLASH_Program+0x82>
  uint32_t prog_bit = 0;
 80022ea:	2500      	movs	r5, #0
 80022ec:	e7e8      	b.n	80022c0 <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80022ee:	4649      	mov	r1, r9
 80022f0:	4640      	mov	r0, r8
 80022f2:	f7ff ff4f 	bl	8002194 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80022f6:	2f02      	cmp	r7, #2
 80022f8:	d1f7      	bne.n	80022ea <HAL_FLASH_Program+0x7e>
        prog_bit = FLASH_CR_FSTPG;
 80022fa:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80022fe:	e7df      	b.n	80022c0 <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 8002300:	2602      	movs	r6, #2
 8002302:	e7ec      	b.n	80022de <HAL_FLASH_Program+0x72>
 8002304:	20000000 	.word	0x20000000
 8002308:	40022000 	.word	0x40022000

0800230c <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 800230c:	4a0f      	ldr	r2, [pc, #60]	; (800234c <FLASH_MassErase+0x40>)
 800230e:	6a13      	ldr	r3, [r2, #32]
 8002310:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002314:	4613      	mov	r3, r2
 8002316:	d011      	beq.n	800233c <FLASH_MassErase+0x30>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002318:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800231a:	bf42      	ittt	mi
 800231c:	6952      	ldrmi	r2, [r2, #20]
 800231e:	f042 0204 	orrmi.w	r2, r2, #4
 8002322:	615a      	strmi	r2, [r3, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002324:	0782      	lsls	r2, r0, #30
 8002326:	d503      	bpl.n	8002330 <FLASH_MassErase+0x24>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002328:	695a      	ldr	r2, [r3, #20]
 800232a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800232e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002330:	4a06      	ldr	r2, [pc, #24]	; (800234c <FLASH_MassErase+0x40>)
 8002332:	6953      	ldr	r3, [r2, #20]
 8002334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002338:	6153      	str	r3, [r2, #20]
 800233a:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800233c:	6953      	ldr	r3, [r2, #20]
 800233e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	6153      	str	r3, [r2, #20]
 8002348:	e7f2      	b.n	8002330 <FLASH_MassErase+0x24>
 800234a:	bf00      	nop
 800234c:	40022000 	.word	0x40022000

08002350 <FLASH_PageErase>:

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <FLASH_PageErase+0x40>)
 8002352:	6a1a      	ldr	r2, [r3, #32]
 8002354:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002358:	695a      	ldr	r2, [r3, #20]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800235a:	d113      	bne.n	8002384 <FLASH_PageErase+0x34>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800235c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002360:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	00c0      	lsls	r0, r0, #3
 8002366:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800236a:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 800236e:	4310      	orrs	r0, r2
 8002370:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	f042 0202 	orr.w	r2, r2, #2
 8002378:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002380:	615a      	str	r2, [r3, #20]
 8002382:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 8002384:	07c9      	lsls	r1, r1, #31
 8002386:	d4e9      	bmi.n	800235c <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800238c:	e7e8      	b.n	8002360 <FLASH_PageErase+0x10>
 800238e:	bf00      	nop
 8002390:	40022000 	.word	0x40022000

08002394 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002394:	4913      	ldr	r1, [pc, #76]	; (80023e4 <FLASH_FlushCaches+0x50>)
 8002396:	7f0b      	ldrb	r3, [r1, #28]
 8002398:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 800239a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800239e:	2a01      	cmp	r2, #1
 80023a0:	d10c      	bne.n	80023bc <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80023a2:	4a11      	ldr	r2, [pc, #68]	; (80023e8 <FLASH_FlushCaches+0x54>)
 80023a4:	6810      	ldr	r0, [r2, #0]
 80023a6:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80023aa:	6010      	str	r0, [r2, #0]
 80023ac:	6810      	ldr	r0, [r2, #0]
 80023ae:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80023b2:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b4:	6810      	ldr	r0, [r2, #0]
 80023b6:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 80023ba:	6010      	str	r0, [r2, #0]
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 80023bc:	3b02      	subs	r3, #2
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d80c      	bhi.n	80023dc <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80023c2:	4b09      	ldr	r3, [pc, #36]	; (80023e8 <FLASH_FlushCaches+0x54>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023d2:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023da:	601a      	str	r2, [r3, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80023dc:	2300      	movs	r3, #0
 80023de:	770b      	strb	r3, [r1, #28]
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000000 	.word	0x20000000
 80023e8:	40022000 	.word	0x40022000

080023ec <HAL_FLASHEx_Erase>:
{
 80023ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 80023f0:	4c35      	ldr	r4, [pc, #212]	; (80024c8 <HAL_FLASHEx_Erase+0xdc>)
 80023f2:	7823      	ldrb	r3, [r4, #0]
 80023f4:	2b01      	cmp	r3, #1
{
 80023f6:	4606      	mov	r6, r0
 80023f8:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80023fa:	d062      	beq.n	80024c2 <HAL_FLASHEx_Erase+0xd6>
 80023fc:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023fe:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002402:	7027      	strb	r7, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002404:	f7ff fef4 	bl	80021f0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8002408:	4605      	mov	r5, r0
 800240a:	bb40      	cbnz	r0, 800245e <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800240c:	4b2f      	ldr	r3, [pc, #188]	; (80024cc <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800240e:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002416:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002418:	d026      	beq.n	8002468 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800241a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800241e:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	0551      	lsls	r1, r2, #21
 8002424:	d506      	bpl.n	8002434 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242c:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800242e:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002430:	7723      	strb	r3, [r4, #28]
 8002432:	e000      	b.n	8002436 <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002434:	7727      	strb	r7, [r4, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002436:	6833      	ldr	r3, [r6, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d11f      	bne.n	800247c <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 800243c:	6870      	ldr	r0, [r6, #4]
 800243e:	f7ff ff65 	bl	800230c <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002442:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002446:	f7ff fed3 	bl	80021f0 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800244a:	4a20      	ldr	r2, [pc, #128]	; (80024cc <HAL_FLASHEx_Erase+0xe0>)
 800244c:	6953      	ldr	r3, [r2, #20]
 800244e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002452:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002456:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002458:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800245a:	f7ff ff9b 	bl	8002394 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800245e:	2300      	movs	r3, #0
 8002460:	7023      	strb	r3, [r4, #0]
}
 8002462:	4628      	mov	r0, r5
 8002464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002468:	0552      	lsls	r2, r2, #21
 800246a:	d505      	bpl.n	8002478 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002472:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002474:	2302      	movs	r3, #2
 8002476:	e7db      	b.n	8002430 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002478:	7720      	strb	r0, [r4, #28]
 800247a:	e7dc      	b.n	8002436 <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 800247c:	f04f 33ff 	mov.w	r3, #4294967295
 8002480:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002484:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002486:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80024cc <HAL_FLASHEx_Erase+0xe0>
 800248a:	f8df a044 	ldr.w	sl, [pc, #68]	; 80024d0 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800248e:	68b3      	ldr	r3, [r6, #8]
 8002490:	68f2      	ldr	r2, [r6, #12]
 8002492:	4413      	add	r3, r2
 8002494:	429f      	cmp	r7, r3
 8002496:	d2e0      	bcs.n	800245a <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002498:	6871      	ldr	r1, [r6, #4]
 800249a:	4638      	mov	r0, r7
 800249c:	f7ff ff58 	bl	8002350 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024a4:	f7ff fea4 	bl	80021f0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80024a8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80024ac:	ea03 030a 	and.w	r3, r3, sl
 80024b0:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 80024b4:	b118      	cbz	r0, 80024be <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 80024b6:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024ba:	4605      	mov	r5, r0
          break;
 80024bc:	e7cd      	b.n	800245a <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80024be:	3701      	adds	r7, #1
 80024c0:	e7e5      	b.n	800248e <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 80024c2:	2502      	movs	r5, #2
 80024c4:	e7cd      	b.n	8002462 <HAL_FLASHEx_Erase+0x76>
 80024c6:	bf00      	nop
 80024c8:	20000000 	.word	0x20000000
 80024cc:	40022000 	.word	0x40022000
 80024d0:	fffff805 	.word	0xfffff805

080024d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d8:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024dc:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8002680 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024e0:	4a65      	ldr	r2, [pc, #404]	; (8002678 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 80024e2:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024e4:	fa38 f403 	lsrs.w	r4, r8, r3
 80024e8:	d102      	bne.n	80024f0 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80024ea:	b003      	add	sp, #12
 80024ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024f0:	f04f 0e01 	mov.w	lr, #1
 80024f4:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 80024f8:	ea18 060e 	ands.w	r6, r8, lr
 80024fc:	f000 80ab 	beq.w	8002656 <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002500:	684c      	ldr	r4, [r1, #4]
 8002502:	f024 0710 	bic.w	r7, r4, #16
 8002506:	2f02      	cmp	r7, #2
 8002508:	d116      	bne.n	8002538 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 800250a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800250e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002512:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002516:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800251a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800251e:	f04f 0c0f 	mov.w	ip, #15
 8002522:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002526:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800252a:	690d      	ldr	r5, [r1, #16]
 800252c:	fa05 f50b 	lsl.w	r5, r5, fp
 8002530:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002534:	f8ca 5020 	str.w	r5, [sl, #32]
 8002538:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800253c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800253e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002542:	fa05 f50a 	lsl.w	r5, r5, sl
 8002546:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002548:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800254c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002550:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002554:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002556:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800255a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800255c:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002560:	d811      	bhi.n	8002586 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8002562:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002564:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002568:	68cf      	ldr	r7, [r1, #12]
 800256a:	fa07 fc0a 	lsl.w	ip, r7, sl
 800256e:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8002572:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002574:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002576:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800257a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800257e:	409f      	lsls	r7, r3
 8002580:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002584:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002586:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002588:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800258a:	688f      	ldr	r7, [r1, #8]
 800258c:	fa07 f70a 	lsl.w	r7, r7, sl
 8002590:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8002592:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002594:	00e5      	lsls	r5, r4, #3
 8002596:	d55e      	bpl.n	8002656 <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002598:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 800259c:	f045 0501 	orr.w	r5, r5, #1
 80025a0:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 80025a4:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 80025a8:	f023 0703 	bic.w	r7, r3, #3
 80025ac:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80025b0:	f005 0501 	and.w	r5, r5, #1
 80025b4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80025b8:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025ba:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80025c0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025c4:	f04f 0c0f 	mov.w	ip, #15
 80025c8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80025cc:	fa0c f50e 	lsl.w	r5, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025d0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025d4:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025d8:	d03f      	beq.n	800265a <HAL_GPIO_Init+0x186>
 80025da:	4d28      	ldr	r5, [pc, #160]	; (800267c <HAL_GPIO_Init+0x1a8>)
 80025dc:	42a8      	cmp	r0, r5
 80025de:	d03e      	beq.n	800265e <HAL_GPIO_Init+0x18a>
 80025e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025e4:	42a8      	cmp	r0, r5
 80025e6:	d03c      	beq.n	8002662 <HAL_GPIO_Init+0x18e>
 80025e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025ec:	42a8      	cmp	r0, r5
 80025ee:	d03a      	beq.n	8002666 <HAL_GPIO_Init+0x192>
 80025f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025f4:	42a8      	cmp	r0, r5
 80025f6:	d038      	beq.n	800266a <HAL_GPIO_Init+0x196>
 80025f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025fc:	42a8      	cmp	r0, r5
 80025fe:	d036      	beq.n	800266e <HAL_GPIO_Init+0x19a>
 8002600:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002604:	42a8      	cmp	r0, r5
 8002606:	d034      	beq.n	8002672 <HAL_GPIO_Init+0x19e>
 8002608:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800260c:	42a8      	cmp	r0, r5
 800260e:	bf14      	ite	ne
 8002610:	2508      	movne	r5, #8
 8002612:	2507      	moveq	r5, #7
 8002614:	fa05 f50e 	lsl.w	r5, r5, lr
 8002618:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800261c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 800261e:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 8002620:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002622:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002626:	bf0c      	ite	eq
 8002628:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800262a:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 800262c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 800262e:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002630:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002634:	bf0c      	ite	eq
 8002636:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002638:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 800263a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 800263c:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800263e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002642:	bf0c      	ite	eq
 8002644:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002646:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 8002648:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 800264a:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800264c:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800264e:	bf54      	ite	pl
 8002650:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8002652:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 8002654:	60d5      	str	r5, [r2, #12]
    position++;
 8002656:	3301      	adds	r3, #1
 8002658:	e744      	b.n	80024e4 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800265a:	2500      	movs	r5, #0
 800265c:	e7da      	b.n	8002614 <HAL_GPIO_Init+0x140>
 800265e:	2501      	movs	r5, #1
 8002660:	e7d8      	b.n	8002614 <HAL_GPIO_Init+0x140>
 8002662:	2502      	movs	r5, #2
 8002664:	e7d6      	b.n	8002614 <HAL_GPIO_Init+0x140>
 8002666:	2503      	movs	r5, #3
 8002668:	e7d4      	b.n	8002614 <HAL_GPIO_Init+0x140>
 800266a:	2504      	movs	r5, #4
 800266c:	e7d2      	b.n	8002614 <HAL_GPIO_Init+0x140>
 800266e:	2505      	movs	r5, #5
 8002670:	e7d0      	b.n	8002614 <HAL_GPIO_Init+0x140>
 8002672:	2506      	movs	r5, #6
 8002674:	e7ce      	b.n	8002614 <HAL_GPIO_Init+0x140>
 8002676:	bf00      	nop
 8002678:	40010400 	.word	0x40010400
 800267c:	48000400 	.word	0x48000400
 8002680:	40021000 	.word	0x40021000

08002684 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002688:	4d46      	ldr	r5, [pc, #280]	; (80027a4 <HAL_GPIO_DeInit+0x120>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800268a:	f8df a120 	ldr.w	sl, [pc, #288]	; 80027ac <HAL_GPIO_DeInit+0x128>
 800268e:	f8df b120 	ldr.w	fp, [pc, #288]	; 80027b0 <HAL_GPIO_DeInit+0x12c>
  uint32_t position = 0x00u;
 8002692:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002694:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8002698:	fa31 f302 	lsrs.w	r3, r1, r2
 800269c:	d101      	bne.n	80026a2 <HAL_GPIO_DeInit+0x1e>
      }
    }

    position++;
  }
}
 800269e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80026a2:	fa09 f802 	lsl.w	r8, r9, r2
    if (iocurrent != 0x00u)
 80026a6:	ea11 0608 	ands.w	r6, r1, r8
 80026aa:	d06b      	beq.n	8002784 <HAL_GPIO_DeInit+0x100>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80026ac:	6807      	ldr	r7, [r0, #0]
 80026ae:	2303      	movs	r3, #3
 80026b0:	0054      	lsls	r4, r2, #1
 80026b2:	fa03 f404 	lsl.w	r4, r3, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80026b6:	fa22 fc03 	lsr.w	ip, r2, r3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80026ba:	4327      	orrs	r7, r4
 80026bc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80026c0:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80026c2:	f8dc 7020 	ldr.w	r7, [ip, #32]
 80026c6:	f002 0e07 	and.w	lr, r2, #7
 80026ca:	463b      	mov	r3, r7
 80026cc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80026d0:	270f      	movs	r7, #15
 80026d2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80026d6:	ea23 0e0e 	bic.w	lr, r3, lr
 80026da:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026de:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80026e2:	43e4      	mvns	r4, r4
 80026e4:	ea0e 0e04 	and.w	lr, lr, r4
 80026e8:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ec:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80026f0:	ea2e 0808 	bic.w	r8, lr, r8
 80026f4:	f8c0 8004 	str.w	r8, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026f8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80026fc:	ea04 040e 	and.w	r4, r4, lr
 8002700:	60c4      	str	r4, [r0, #12]
 8002702:	f022 0403 	bic.w	r4, r2, #3
 8002706:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 800270a:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800270e:	f002 0e03 	and.w	lr, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002712:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002716:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800271a:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800271e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002722:	ea0c 0c07 	and.w	ip, ip, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002726:	d02f      	beq.n	8002788 <HAL_GPIO_DeInit+0x104>
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <HAL_GPIO_DeInit+0x124>)
 800272a:	4298      	cmp	r0, r3
 800272c:	d02e      	beq.n	800278c <HAL_GPIO_DeInit+0x108>
 800272e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002732:	4298      	cmp	r0, r3
 8002734:	d02c      	beq.n	8002790 <HAL_GPIO_DeInit+0x10c>
 8002736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800273a:	4298      	cmp	r0, r3
 800273c:	d02a      	beq.n	8002794 <HAL_GPIO_DeInit+0x110>
 800273e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002742:	4298      	cmp	r0, r3
 8002744:	d028      	beq.n	8002798 <HAL_GPIO_DeInit+0x114>
 8002746:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800274a:	4298      	cmp	r0, r3
 800274c:	d026      	beq.n	800279c <HAL_GPIO_DeInit+0x118>
 800274e:	4550      	cmp	r0, sl
 8002750:	d026      	beq.n	80027a0 <HAL_GPIO_DeInit+0x11c>
 8002752:	4558      	cmp	r0, fp
 8002754:	bf0c      	ite	eq
 8002756:	2307      	moveq	r3, #7
 8002758:	2308      	movne	r3, #8
 800275a:	fa03 f30e 	lsl.w	r3, r3, lr
 800275e:	459c      	cmp	ip, r3
 8002760:	d110      	bne.n	8002784 <HAL_GPIO_DeInit+0x100>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002762:	68a3      	ldr	r3, [r4, #8]
 8002764:	ea23 0707 	bic.w	r7, r3, r7
 8002768:	60a7      	str	r7, [r4, #8]
        EXTI->IMR1 &= ~(iocurrent);
 800276a:	682b      	ldr	r3, [r5, #0]
 800276c:	43f6      	mvns	r6, r6
 800276e:	4033      	ands	r3, r6
 8002770:	602b      	str	r3, [r5, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002772:	686b      	ldr	r3, [r5, #4]
 8002774:	4033      	ands	r3, r6
 8002776:	606b      	str	r3, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002778:	68ab      	ldr	r3, [r5, #8]
 800277a:	4033      	ands	r3, r6
 800277c:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800277e:	68eb      	ldr	r3, [r5, #12]
 8002780:	401e      	ands	r6, r3
 8002782:	60ee      	str	r6, [r5, #12]
    position++;
 8002784:	3201      	adds	r2, #1
 8002786:	e787      	b.n	8002698 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002788:	2300      	movs	r3, #0
 800278a:	e7e6      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 800278c:	2301      	movs	r3, #1
 800278e:	e7e4      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 8002790:	2302      	movs	r3, #2
 8002792:	e7e2      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 8002794:	2303      	movs	r3, #3
 8002796:	e7e0      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 8002798:	2304      	movs	r3, #4
 800279a:	e7de      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 800279c:	2305      	movs	r3, #5
 800279e:	e7dc      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 80027a0:	2306      	movs	r3, #6
 80027a2:	e7da      	b.n	800275a <HAL_GPIO_DeInit+0xd6>
 80027a4:	40010400 	.word	0x40010400
 80027a8:	48000400 	.word	0x48000400
 80027ac:	48001800 	.word	0x48001800
 80027b0:	48001c00 	.word	0x48001c00

080027b4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027b4:	6903      	ldr	r3, [r0, #16]
 80027b6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80027b8:	bf14      	ite	ne
 80027ba:	2001      	movne	r0, #1
 80027bc:	2000      	moveq	r0, #0
 80027be:	4770      	bx	lr

080027c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c0:	b10a      	cbz	r2, 80027c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c2:	6181      	str	r1, [r0, #24]
 80027c4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027c6:	6281      	str	r1, [r0, #40]	; 0x28
 80027c8:	4770      	bx	lr

080027ca <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80027ca:	6943      	ldr	r3, [r0, #20]
 80027cc:	4059      	eors	r1, r3
 80027ce:	6141      	str	r1, [r0, #20]
 80027d0:	4770      	bx	lr

080027d2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027d2:	4770      	bx	lr

080027d4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80027d4:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027d6:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80027d8:	6959      	ldr	r1, [r3, #20]
 80027da:	4201      	tst	r1, r0
 80027dc:	d002      	beq.n	80027e4 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027de:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027e0:	f7ff fff7 	bl	80027d2 <HAL_GPIO_EXTI_Callback>
 80027e4:	bd08      	pop	{r3, pc}
 80027e6:	bf00      	nop
 80027e8:	40010400 	.word	0x40010400

080027ec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027ec:	6803      	ldr	r3, [r0, #0]
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80027f2:	bf44      	itt	mi
 80027f4:	2200      	movmi	r2, #0
 80027f6:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027f8:	699a      	ldr	r2, [r3, #24]
 80027fa:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027fc:	bf5e      	ittt	pl
 80027fe:	699a      	ldrpl	r2, [r3, #24]
 8002800:	f042 0201 	orrpl.w	r2, r2, #1
 8002804:	619a      	strpl	r2, [r3, #24]
 8002806:	4770      	bx	lr

08002808 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002808:	b530      	push	{r4, r5, lr}
 800280a:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800280c:	6805      	ldr	r5, [r0, #0]
 800280e:	4323      	orrs	r3, r4
 8002810:	0d64      	lsrs	r4, r4, #21
 8002812:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002816:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800281a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800281e:	6868      	ldr	r0, [r5, #4]
 8002820:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002824:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002828:	4319      	orrs	r1, r3
 800282a:	f044 0403 	orr.w	r4, r4, #3
 800282e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002832:	ea20 0404 	bic.w	r4, r0, r4
 8002836:	4321      	orrs	r1, r4
 8002838:	6069      	str	r1, [r5, #4]
 800283a:	bd30      	pop	{r4, r5, pc}

0800283c <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800283c:	f011 0301 	ands.w	r3, r1, #1
 8002840:	d007      	beq.n	8002852 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002842:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002846:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800284a:	2b28      	cmp	r3, #40	; 0x28
 800284c:	bf0c      	ite	eq
 800284e:	2342      	moveq	r3, #66	; 0x42
 8002850:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002852:	078a      	lsls	r2, r1, #30
 8002854:	d509      	bpl.n	800286a <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002856:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800285a:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800285e:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002860:	bf0c      	ite	eq
 8002862:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002866:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800286a:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800286c:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002870:	bf48      	it	mi
 8002872:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002876:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800287a:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800287c:	bf08      	it	eq
 800287e:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002882:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002884:	6801      	ldr	r1, [r0, #0]
 8002886:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 8002888:	bf08      	it	eq
 800288a:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800288e:	ea22 0303 	bic.w	r3, r2, r3
 8002892:	600b      	str	r3, [r1, #0]
 8002894:	4770      	bx	lr

08002896 <I2C_WaitOnFlagUntilTimeout>:
{
 8002896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800289a:	9f06      	ldr	r7, [sp, #24]
 800289c:	4604      	mov	r4, r0
 800289e:	4688      	mov	r8, r1
 80028a0:	4616      	mov	r6, r2
 80028a2:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028a4:	6822      	ldr	r2, [r4, #0]
 80028a6:	6993      	ldr	r3, [r2, #24]
 80028a8:	ea38 0303 	bics.w	r3, r8, r3
 80028ac:	bf0c      	ite	eq
 80028ae:	2301      	moveq	r3, #1
 80028b0:	2300      	movne	r3, #0
 80028b2:	42b3      	cmp	r3, r6
 80028b4:	d002      	beq.n	80028bc <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80028b6:	2000      	movs	r0, #0
}
 80028b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80028bc:	1c6b      	adds	r3, r5, #1
 80028be:	d0f2      	beq.n	80028a6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c0:	f7fe fbae 	bl	8001020 <HAL_GetTick>
 80028c4:	1bc0      	subs	r0, r0, r7
 80028c6:	4285      	cmp	r5, r0
 80028c8:	d301      	bcc.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x38>
 80028ca:	2d00      	cmp	r5, #0
 80028cc:	d1ea      	bne.n	80028a4 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028d0:	f043 0320 	orr.w	r3, r3, #32
 80028d4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028d6:	2320      	movs	r3, #32
 80028d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028dc:	2300      	movs	r3, #0
 80028de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80028e2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80028e6:	2001      	movs	r0, #1
 80028e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028ec <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ec:	6803      	ldr	r3, [r0, #0]
{
 80028ee:	b570      	push	{r4, r5, r6, lr}
 80028f0:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028f2:	6998      	ldr	r0, [r3, #24]
 80028f4:	f010 0010 	ands.w	r0, r0, #16
{
 80028f8:	460d      	mov	r5, r1
 80028fa:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028fc:	d116      	bne.n	800292c <I2C_IsAcknowledgeFailed+0x40>
 80028fe:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 8002900:	1c69      	adds	r1, r5, #1
 8002902:	d014      	beq.n	800292e <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002904:	f7fe fb8c 	bl	8001020 <HAL_GetTick>
 8002908:	1b80      	subs	r0, r0, r6
 800290a:	4285      	cmp	r5, r0
 800290c:	d300      	bcc.n	8002910 <I2C_IsAcknowledgeFailed+0x24>
 800290e:	b96d      	cbnz	r5, 800292c <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002910:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002912:	f043 0320 	orr.w	r3, r3, #32
 8002916:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002918:	2320      	movs	r3, #32
 800291a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800291e:	2300      	movs	r3, #0
 8002920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002924:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002928:	2001      	movs	r0, #1
}
 800292a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	6999      	ldr	r1, [r3, #24]
 8002930:	068a      	lsls	r2, r1, #26
 8002932:	d5e5      	bpl.n	8002900 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002934:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002936:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002938:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800293a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800293c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800293e:	f7ff ff55 	bl	80027ec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002942:	6822      	ldr	r2, [r4, #0]
 8002944:	6853      	ldr	r3, [r2, #4]
 8002946:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800294a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800294e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002958:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800295a:	f043 0304 	orr.w	r3, r3, #4
 800295e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002960:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8002964:	e7db      	b.n	800291e <I2C_IsAcknowledgeFailed+0x32>

08002966 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002966:	b570      	push	{r4, r5, r6, lr}
 8002968:	4604      	mov	r4, r0
 800296a:	460d      	mov	r5, r1
 800296c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	079b      	lsls	r3, r3, #30
 8002974:	d501      	bpl.n	800297a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8002976:	2000      	movs	r0, #0
 8002978:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800297a:	4632      	mov	r2, r6
 800297c:	4629      	mov	r1, r5
 800297e:	4620      	mov	r0, r4
 8002980:	f7ff ffb4 	bl	80028ec <I2C_IsAcknowledgeFailed>
 8002984:	b9a0      	cbnz	r0, 80029b0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002986:	1c6a      	adds	r2, r5, #1
 8002988:	d0f1      	beq.n	800296e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298a:	f7fe fb49 	bl	8001020 <HAL_GetTick>
 800298e:	1b80      	subs	r0, r0, r6
 8002990:	4285      	cmp	r5, r0
 8002992:	d301      	bcc.n	8002998 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002994:	2d00      	cmp	r5, #0
 8002996:	d1ea      	bne.n	800296e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800299a:	f043 0320 	orr.w	r3, r3, #32
 800299e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029a0:	2320      	movs	r3, #32
 80029a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80029ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80029b0:	2001      	movs	r0, #1
}
 80029b2:	bd70      	pop	{r4, r5, r6, pc}

080029b4 <I2C_RequestMemoryRead>:
{
 80029b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029b6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80029b8:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029ba:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <I2C_RequestMemoryRead+0x60>)
 80029bc:	9300      	str	r3, [sp, #0]
{
 80029be:	4605      	mov	r5, r0
 80029c0:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029c2:	2300      	movs	r3, #0
 80029c4:	b2fa      	uxtb	r2, r7
 80029c6:	f7ff ff1f 	bl	8002808 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ca:	4632      	mov	r2, r6
 80029cc:	9908      	ldr	r1, [sp, #32]
 80029ce:	4628      	mov	r0, r5
 80029d0:	f7ff ffc9 	bl	8002966 <I2C_WaitOnTXISFlagUntilTimeout>
 80029d4:	b110      	cbz	r0, 80029dc <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80029d6:	2001      	movs	r0, #1
}
 80029d8:	b003      	add	sp, #12
 80029da:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029dc:	2f01      	cmp	r7, #1
 80029de:	682b      	ldr	r3, [r5, #0]
 80029e0:	d10c      	bne.n	80029fc <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029e2:	b2e4      	uxtb	r4, r4
 80029e4:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029e6:	9b08      	ldr	r3, [sp, #32]
 80029e8:	9600      	str	r6, [sp, #0]
 80029ea:	2200      	movs	r2, #0
 80029ec:	2140      	movs	r1, #64	; 0x40
 80029ee:	4628      	mov	r0, r5
 80029f0:	f7ff ff51 	bl	8002896 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80029f4:	3000      	adds	r0, #0
 80029f6:	bf18      	it	ne
 80029f8:	2001      	movne	r0, #1
 80029fa:	e7ed      	b.n	80029d8 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029fc:	0a22      	lsrs	r2, r4, #8
 80029fe:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a00:	9908      	ldr	r1, [sp, #32]
 8002a02:	4632      	mov	r2, r6
 8002a04:	4628      	mov	r0, r5
 8002a06:	f7ff ffae 	bl	8002966 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a0a:	2800      	cmp	r0, #0
 8002a0c:	d1e3      	bne.n	80029d6 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a0e:	682b      	ldr	r3, [r5, #0]
 8002a10:	e7e7      	b.n	80029e2 <I2C_RequestMemoryRead+0x2e>
 8002a12:	bf00      	nop
 8002a14:	80002000 	.word	0x80002000

08002a18 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002a18:	b570      	push	{r4, r5, r6, lr}
 8002a1a:	4604      	mov	r4, r0
 8002a1c:	460d      	mov	r5, r1
 8002a1e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	069b      	lsls	r3, r3, #26
 8002a26:	d501      	bpl.n	8002a2c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002a28:	2000      	movs	r0, #0
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2c:	4632      	mov	r2, r6
 8002a2e:	4629      	mov	r1, r5
 8002a30:	4620      	mov	r0, r4
 8002a32:	f7ff ff5b 	bl	80028ec <I2C_IsAcknowledgeFailed>
 8002a36:	b990      	cbnz	r0, 8002a5e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a38:	f7fe faf2 	bl	8001020 <HAL_GetTick>
 8002a3c:	1b80      	subs	r0, r0, r6
 8002a3e:	4285      	cmp	r5, r0
 8002a40:	d301      	bcc.n	8002a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002a42:	2d00      	cmp	r5, #0
 8002a44:	d1ec      	bne.n	8002a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a46:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a48:	f043 0320 	orr.w	r3, r3, #32
 8002a4c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a4e:	2320      	movs	r3, #32
 8002a50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	2300      	movs	r3, #0
 8002a56:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002a5e:	2001      	movs	r0, #1
}
 8002a60:	bd70      	pop	{r4, r5, r6, pc}

08002a62 <HAL_I2C_Init>:
{
 8002a62:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002a64:	4604      	mov	r4, r0
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d04a      	beq.n	8002b00 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a6a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a72:	b91b      	cbnz	r3, 8002a7c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002a74:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002a78:	f01e fdd0 	bl	802161c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a7c:	2324      	movs	r3, #36	; 0x24
 8002a7e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002a82:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a84:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a8e:	6862      	ldr	r2, [r4, #4]
 8002a90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a94:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a96:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a98:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002aa2:	d124      	bne.n	8002aee <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002aa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa8:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aaa:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002aac:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002aae:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ab6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002abe:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ac0:	6922      	ldr	r2, [r4, #16]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	69a1      	ldr	r1, [r4, #24]
 8002ac6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002aca:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002acc:	6a21      	ldr	r1, [r4, #32]
 8002ace:	69e2      	ldr	r2, [r4, #28]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002adc:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002ade:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ae0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002aec:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002aee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002af2:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002af4:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002af6:	bf04      	itt	eq
 8002af8:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002afc:	605a      	streq	r2, [r3, #4]
 8002afe:	e7d4      	b.n	8002aaa <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002b00:	2001      	movs	r0, #1
}
 8002b02:	bd10      	pop	{r4, pc}

08002b04 <HAL_I2C_Mem_Read>:
{
 8002b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b08:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b0a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002b0e:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b10:	2b20      	cmp	r3, #32
{
 8002b12:	4604      	mov	r4, r0
 8002b14:	460f      	mov	r7, r1
 8002b16:	9203      	str	r2, [sp, #12]
 8002b18:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002b1c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b20:	f040 80a9 	bne.w	8002c76 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002b24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b26:	b113      	cbz	r3, 8002b2e <HAL_I2C_Mem_Read+0x2a>
 8002b28:	f1ba 0f00 	cmp.w	sl, #0
 8002b2c:	d106      	bne.n	8002b3c <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b32:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002b34:	2001      	movs	r0, #1
}
 8002b36:	b005      	add	sp, #20
 8002b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002b3c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	f000 8098 	beq.w	8002c76 <HAL_I2C_Mem_Read+0x172>
 8002b46:	2501      	movs	r5, #1
 8002b48:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fa68 	bl	8001020 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b50:	2319      	movs	r3, #25
 8002b52:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002b54:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b56:	462a      	mov	r2, r5
 8002b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b5c:	4620      	mov	r0, r4
 8002b5e:	f7ff fe9a 	bl	8002896 <I2C_WaitOnFlagUntilTimeout>
 8002b62:	4681      	mov	r9, r0
 8002b64:	2800      	cmp	r0, #0
 8002b66:	d1e5      	bne.n	8002b34 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b68:	2322      	movs	r3, #34	; 0x22
 8002b6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b6e:	2340      	movs	r3, #64	; 0x40
 8002b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002b74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b76:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002b78:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8002b7a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002b7c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b80:	9601      	str	r6, [sp, #4]
 8002b82:	f8cd 8000 	str.w	r8, [sp]
 8002b86:	465b      	mov	r3, fp
 8002b88:	9a03      	ldr	r2, [sp, #12]
 8002b8a:	4639      	mov	r1, r7
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7ff ff11 	bl	80029b4 <I2C_RequestMemoryRead>
 8002b92:	b110      	cbz	r0, 8002b9a <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8002b94:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8002b98:	e7cc      	b.n	8002b34 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b9a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2bff      	cmp	r3, #255	; 0xff
 8002ba0:	4b36      	ldr	r3, [pc, #216]	; (8002c7c <HAL_I2C_Mem_Read+0x178>)
 8002ba2:	d958      	bls.n	8002c56 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba4:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002ba6:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ba8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002baa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002bae:	4639      	mov	r1, r7
 8002bb0:	4620      	mov	r0, r4
 8002bb2:	f7ff fe29 	bl	8002808 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002bb6:	9600      	str	r6, [sp, #0]
 8002bb8:	4643      	mov	r3, r8
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	f7ff fe69 	bl	8002896 <I2C_WaitOnFlagUntilTimeout>
 8002bc4:	2800      	cmp	r0, #0
 8002bc6:	d1b5      	bne.n	8002b34 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bc8:	6822      	ldr	r2, [r4, #0]
 8002bca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bce:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002bd2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002bd8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002be0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002be2:	3a01      	subs	r2, #1
 8002be4:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002be6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002be8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bea:	b1ab      	cbz	r3, 8002c18 <HAL_I2C_Mem_Read+0x114>
 8002bec:	b9a2      	cbnz	r2, 8002c18 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bee:	9600      	str	r6, [sp, #0]
 8002bf0:	4643      	mov	r3, r8
 8002bf2:	2180      	movs	r1, #128	; 0x80
 8002bf4:	4620      	mov	r0, r4
 8002bf6:	f7ff fe4e 	bl	8002896 <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	2800      	cmp	r0, #0
 8002bfc:	d19a      	bne.n	8002b34 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bfe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2bff      	cmp	r3, #255	; 0xff
 8002c04:	d92f      	bls.n	8002c66 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c06:	22ff      	movs	r2, #255	; 0xff
 8002c08:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c0a:	9000      	str	r0, [sp, #0]
 8002c0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c10:	4639      	mov	r1, r7
 8002c12:	4620      	mov	r0, r4
 8002c14:	f7ff fdf8 	bl	8002808 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002c18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ca      	bne.n	8002bb6 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c20:	4632      	mov	r2, r6
 8002c22:	4641      	mov	r1, r8
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7ff fef7 	bl	8002a18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	d182      	bne.n	8002b34 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	2120      	movs	r1, #32
 8002c32:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002c3a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002c3e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c48:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002c4c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c50:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002c54:	e76f      	b.n	8002b36 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002c56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002c58:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002c5a:	b292      	uxth	r2, r2
 8002c5c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	e7a3      	b.n	8002bae <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8002c66:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c68:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	e7cc      	b.n	8002c10 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8002c76:	2002      	movs	r0, #2
 8002c78:	e75d      	b.n	8002b36 <HAL_I2C_Mem_Read+0x32>
 8002c7a:	bf00      	nop
 8002c7c:	80002400 	.word	0x80002400

08002c80 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c80:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8002c82:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c84:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c86:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8002c88:	b103      	cbz	r3, 8002c8c <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c8a:	4718      	bx	r3
 8002c8c:	4770      	bx	lr

08002c8e <HAL_I2C_SlaveTxCpltCallback>:
 8002c8e:	4770      	bx	lr

08002c90 <HAL_I2C_SlaveRxCpltCallback>:
 8002c90:	4770      	bx	lr

08002c92 <I2C_ITSlaveSequentialCplt>:
{
 8002c92:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c94:	2500      	movs	r5, #0
 8002c96:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002c9a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c9e:	2b29      	cmp	r3, #41	; 0x29
 8002ca0:	d10c      	bne.n	8002cbc <I2C_ITSlaveSequentialCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ca2:	2328      	movs	r3, #40	; 0x28
 8002ca4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ca8:	2321      	movs	r3, #33	; 0x21
 8002caa:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cac:	2101      	movs	r1, #1
 8002cae:	f7ff fdc5 	bl	800283c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002cb2:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cb6:	f7ff ffea 	bl	8002c8e <HAL_I2C_SlaveTxCpltCallback>
 8002cba:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002cbc:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002cc0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cc2:	d10b      	bne.n	8002cdc <I2C_ITSlaveSequentialCplt+0x4a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002cc4:	2328      	movs	r3, #40	; 0x28
 8002cc6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cca:	2322      	movs	r3, #34	; 0x22
 8002ccc:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002cce:	2102      	movs	r1, #2
 8002cd0:	f7ff fdb4 	bl	800283c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002cd4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cd8:	f7ff ffda 	bl	8002c90 <HAL_I2C_SlaveRxCpltCallback>
 8002cdc:	bd38      	pop	{r3, r4, r5, pc}

08002cde <HAL_I2C_AddrCallback>:
{
 8002cde:	4770      	bx	lr

08002ce0 <I2C_ITAddrCplt.isra.8>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ce2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002ce6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cea:	2b28      	cmp	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002cec:	4604      	mov	r4, r0
 8002cee:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cf0:	d134      	bne.n	8002d5c <I2C_ITAddrCplt.isra.8+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 8002cf2:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cf4:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002cf6:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002cf8:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002cfa:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002cfc:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cfe:	2902      	cmp	r1, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8002d00:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002d04:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d08:	d120      	bne.n	8002d4c <I2C_ITAddrCplt.isra.8+0x6c>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002d0a:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002d0e:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8002d12:	f015 0506 	ands.w	r5, r5, #6
 8002d16:	d10e      	bne.n	8002d36 <I2C_ITAddrCplt.isra.8+0x56>
        hi2c->AddrEventCount++;
 8002d18:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d1a:	3101      	adds	r1, #1
 8002d1c:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002d1e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d20:	2902      	cmp	r1, #2
 8002d22:	d120      	bne.n	8002d66 <I2C_ITAddrCplt.isra.8+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d24:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8002d26:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d28:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002d2a:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d2e:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d30:	f7ff ffd5 	bl	8002cde <HAL_I2C_AddrCallback>
 8002d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d36:	2104      	movs	r1, #4
 8002d38:	f7ff fd80 	bl	800283c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d42:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d46:	4631      	mov	r1, r6
 8002d48:	4620      	mov	r0, r4
 8002d4a:	e7f1      	b.n	8002d30 <I2C_ITAddrCplt.isra.8+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d4c:	2104      	movs	r1, #4
 8002d4e:	f7ff fd75 	bl	800283c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d52:	2300      	movs	r3, #0
 8002d54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d58:	462a      	mov	r2, r5
 8002d5a:	e7f4      	b.n	8002d46 <I2C_ITAddrCplt.isra.8+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d5c:	2208      	movs	r2, #8
 8002d5e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d60:	2300      	movs	r3, #0
 8002d62:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002d66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d68 <HAL_I2C_ListenCpltCallback>:
 8002d68:	4770      	bx	lr
	...

08002d6c <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d6c:	4b17      	ldr	r3, [pc, #92]	; (8002dcc <I2C_ITListenCplt+0x60>)
{
 8002d6e:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8002d70:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d72:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8002d78:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d82:	074b      	lsls	r3, r1, #29
{
 8002d84:	4604      	mov	r4, r0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d86:	d512      	bpl.n	8002dae <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d88:	6802      	ldr	r2, [r0, #0]
 8002d8a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d8e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d92:	3301      	adds	r3, #1
 8002d94:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002d96:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002d98:	b14b      	cbz	r3, 8002dae <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002d9e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002da6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002dae:	4620      	mov	r0, r4
 8002db0:	2107      	movs	r1, #7
 8002db2:	f7ff fd43 	bl	800283c <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	2210      	movs	r2, #16
 8002dba:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	f7ff ffd0 	bl	8002d68 <HAL_I2C_ListenCpltCallback>
 8002dc8:	bd10      	pop	{r4, pc}
 8002dca:	bf00      	nop
 8002dcc:	ffff0000 	.word	0xffff0000

08002dd0 <HAL_I2C_ErrorCallback>:
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_I2C_AbortCpltCallback>:
{
 8002dd2:	4770      	bx	lr

08002dd4 <I2C_ITError>:
{
 8002dd4:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002dd6:	4a32      	ldr	r2, [pc, #200]	; (8002ea0 <I2C_ITError+0xcc>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002dd8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ddc:	2500      	movs	r5, #0
 8002dde:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002de2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002de4:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002de6:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002de8:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8002dea:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002dec:	2b02      	cmp	r3, #2
{
 8002dee:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8002df0:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002df2:	d822      	bhi.n	8002e3a <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002df4:	2103      	movs	r1, #3
 8002df6:	f7ff fd21 	bl	800283c <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002dfa:	2328      	movs	r3, #40	; 0x28
 8002dfc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002e00:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e02:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002e04:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e0a:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002e0c:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8002e10:	d020      	beq.n	8002e54 <I2C_ITError+0x80>
    if (hi2c->hdmatx != NULL)
 8002e12:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e18:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002e1a:	2800      	cmp	r0, #0
 8002e1c:	d03e      	beq.n	8002e9c <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e1e:	4b22      	ldr	r3, [pc, #136]	; (8002ea8 <I2C_ITError+0xd4>)
 8002e20:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002e22:	2300      	movs	r3, #0
 8002e24:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e28:	f7fe ff86 	bl	8001d38 <HAL_DMA_Abort_IT>
 8002e2c:	2800      	cmp	r0, #0
 8002e2e:	d035      	beq.n	8002e9c <I2C_ITError+0xc8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e30:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e32:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8002e34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e38:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e3a:	2107      	movs	r1, #7
 8002e3c:	f7ff fcfe 	bl	800283c <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002e40:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e44:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8002e46:	bf1c      	itt	ne
 8002e48:	2320      	movne	r3, #32
 8002e4a:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	6303      	str	r3, [r0, #48]	; 0x30
 8002e52:	e7d7      	b.n	8002e04 <I2C_ITError+0x30>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002e54:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8002e58:	d00e      	beq.n	8002e78 <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e5a:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002e5c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e62:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002e64:	b1d0      	cbz	r0, 8002e9c <I2C_ITError+0xc8>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e66:	4b10      	ldr	r3, [pc, #64]	; (8002ea8 <I2C_ITError+0xd4>)
 8002e68:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002e6a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e6e:	f7fe ff63 	bl	8001d38 <HAL_DMA_Abort_IT>
 8002e72:	b198      	cbz	r0, 8002e9c <I2C_ITError+0xc8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e74:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e76:	e7dc      	b.n	8002e32 <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e78:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002e7c:	2b60      	cmp	r3, #96	; 0x60
 8002e7e:	d108      	bne.n	8002e92 <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	2320      	movs	r3, #32
 8002e82:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002e86:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f7ff ffa1 	bl	8002dd2 <HAL_I2C_AbortCpltCallback>
 8002e90:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hi2c);
 8002e92:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002e96:	4620      	mov	r0, r4
 8002e98:	f7ff ff9a 	bl	8002dd0 <HAL_I2C_ErrorCallback>
 8002e9c:	bd70      	pop	{r4, r5, r6, pc}
 8002e9e:	bf00      	nop
 8002ea0:	ffff0000 	.word	0xffff0000
 8002ea4:	08002f9d 	.word	0x08002f9d
 8002ea8:	0800310d 	.word	0x0800310d

08002eac <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002eac:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eae:	2220      	movs	r2, #32
{
 8002eb0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002eb2:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002eb4:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	61da      	str	r2, [r3, #28]
{
 8002eba:	460d      	mov	r5, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002ebc:	2107      	movs	r1, #7
{
 8002ebe:	4604      	mov	r4, r0
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002ec0:	f7ff fcbc 	bl	800283c <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002ec4:	6803      	ldr	r3, [r0, #0]
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ecc:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002ed4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002ed8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002edc:	f022 0201 	bic.w	r2, r2, #1
 8002ee0:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8002ee2:	f7ff fc83 	bl	80027ec <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ee6:	0471      	lsls	r1, r6, #17
 8002ee8:	d532      	bpl.n	8002f50 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8002eea:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8002eec:	b11b      	cbz	r3, 8002ef6 <I2C_ITSlaveCplt+0x4a>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ef6:	076b      	lsls	r3, r5, #29
 8002ef8:	d50e      	bpl.n	8002f18 <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002efa:	6822      	ldr	r2, [r4, #0]
 8002efc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002efe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f04:	3301      	adds	r3, #1
 8002f06:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002f08:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002f0a:	b12b      	cbz	r3, 8002f18 <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002f10:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8002f18:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	b11b      	cbz	r3, 8002f26 <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f1e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002f2e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f32:	b18b      	cbz	r3, 8002f58 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f34:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002f36:	4620      	mov	r0, r4
 8002f38:	f7ff ff4c 	bl	8002dd4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f3c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002f40:	2b28      	cmp	r3, #40	; 0x28
 8002f42:	d128      	bne.n	8002f96 <I2C_ITSlaveCplt+0xea>
      I2C_ITListenCplt(hi2c, ITFlags);
 8002f44:	4629      	mov	r1, r5
 8002f46:	4620      	mov	r0, r4
}
 8002f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8002f4c:	f7ff bf0e 	b.w	8002d6c <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f50:	0432      	lsls	r2, r6, #16
 8002f52:	d5d0      	bpl.n	8002ef6 <I2C_ITSlaveCplt+0x4a>
    if (hi2c->hdmarx != NULL)
 8002f54:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002f56:	e7c9      	b.n	8002eec <I2C_ITSlaveCplt+0x40>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002f58:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f5a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002f5e:	d00a      	beq.n	8002f76 <I2C_ITSlaveCplt+0xca>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f60:	4a0d      	ldr	r2, [pc, #52]	; (8002f98 <I2C_ITSlaveCplt+0xec>)
 8002f62:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002f64:	2220      	movs	r2, #32
 8002f66:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f6e:	4620      	mov	r0, r4
 8002f70:	f7ff fefa 	bl	8002d68 <HAL_I2C_ListenCpltCallback>
 8002f74:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f76:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f7e:	2a22      	cmp	r2, #34	; 0x22
 8002f80:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f88:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f8a:	d102      	bne.n	8002f92 <I2C_ITSlaveCplt+0xe6>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f8c:	f7ff fe80 	bl	8002c90 <HAL_I2C_SlaveRxCpltCallback>
 8002f90:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f92:	f7ff fe7c 	bl	8002c8e <HAL_I2C_SlaveTxCpltCallback>
 8002f96:	bd70      	pop	{r4, r5, r6, pc}
 8002f98:	ffff0000 	.word	0xffff0000

08002f9c <I2C_Slave_ISR_IT>:
{
 8002f9c:	b570      	push	{r4, r5, r6, lr}
 8002f9e:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8002fa0:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8002fa4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8002fa6:	2a01      	cmp	r2, #1
{
 8002fa8:	4604      	mov	r4, r0
 8002faa:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8002fac:	d07c      	beq.n	80030a8 <I2C_Slave_ISR_IT+0x10c>
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fb4:	06ca      	lsls	r2, r1, #27
 8002fb6:	d539      	bpl.n	800302c <I2C_Slave_ISR_IT+0x90>
 8002fb8:	06f2      	lsls	r2, r6, #27
 8002fba:	d537      	bpl.n	800302c <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 8002fbc:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002fbe:	b292      	uxth	r2, r2
 8002fc0:	bb32      	cbnz	r2, 8003010 <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002fc2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002fc6:	2a28      	cmp	r2, #40	; 0x28
 8002fc8:	d110      	bne.n	8002fec <I2C_Slave_ISR_IT+0x50>
 8002fca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fce:	d10d      	bne.n	8002fec <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, ITFlags);
 8002fd0:	f7ff fecc 	bl	8002d6c <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fd4:	06aa      	lsls	r2, r5, #26
 8002fd6:	d505      	bpl.n	8002fe4 <I2C_Slave_ISR_IT+0x48>
 8002fd8:	06b3      	lsls	r3, r6, #26
 8002fda:	d503      	bpl.n	8002fe4 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002fdc:	4629      	mov	r1, r5
 8002fde:	4620      	mov	r0, r4
 8002fe0:	f7ff ff64 	bl	8002eac <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8002fe4:	2000      	movs	r0, #0
 8002fe6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002fec:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002ff0:	2a29      	cmp	r2, #41	; 0x29
 8002ff2:	6822      	ldr	r2, [r4, #0]
 8002ff4:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ff8:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002ffa:	d1eb      	bne.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
 8002ffc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003000:	d0e8      	beq.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 8003002:	4620      	mov	r0, r4
 8003004:	f7ff fbf2 	bl	80027ec <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8003008:	4620      	mov	r0, r4
 800300a:	f7ff fe42 	bl	8002c92 <I2C_ITSlaveSequentialCplt>
 800300e:	e7e1      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003010:	6802      	ldr	r2, [r0, #0]
 8003012:	2110      	movs	r1, #16
 8003014:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003016:	6c42      	ldr	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003018:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800301c:	f042 0204 	orr.w	r2, r2, #4
 8003020:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003022:	d1d7      	bne.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003024:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003026:	f7ff fed5 	bl	8002dd4 <I2C_ITError>
 800302a:	e7d3      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800302c:	076a      	lsls	r2, r5, #29
 800302e:	d51a      	bpl.n	8003066 <I2C_Slave_ISR_IT+0xca>
 8003030:	0770      	lsls	r0, r6, #29
 8003032:	d518      	bpl.n	8003066 <I2C_Slave_ISR_IT+0xca>
    if (hi2c->XferCount > 0U)
 8003034:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003036:	b292      	uxth	r2, r2
 8003038:	b16a      	cbz	r2, 8003056 <I2C_Slave_ISR_IT+0xba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800303a:	6821      	ldr	r1, [r4, #0]
 800303c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800303e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8003040:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 8003042:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003044:	3201      	adds	r2, #1
 8003046:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003048:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800304a:	3a01      	subs	r2, #1
 800304c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800304e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003050:	3a01      	subs	r2, #1
 8003052:	b292      	uxth	r2, r2
 8003054:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8003056:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003058:	b292      	uxth	r2, r2
 800305a:	2a00      	cmp	r2, #0
 800305c:	d1ba      	bne.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
 800305e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003062:	d1d1      	bne.n	8003008 <I2C_Slave_ISR_IT+0x6c>
 8003064:	e7b6      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003066:	0729      	lsls	r1, r5, #28
 8003068:	d505      	bpl.n	8003076 <I2C_Slave_ISR_IT+0xda>
 800306a:	0732      	lsls	r2, r6, #28
 800306c:	d503      	bpl.n	8003076 <I2C_Slave_ISR_IT+0xda>
    I2C_ITAddrCplt(hi2c, ITFlags);
 800306e:	4620      	mov	r0, r4
 8003070:	f7ff fe36 	bl	8002ce0 <I2C_ITAddrCplt.isra.8>
 8003074:	e7ae      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003076:	07a8      	lsls	r0, r5, #30
 8003078:	d5ac      	bpl.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
 800307a:	07b1      	lsls	r1, r6, #30
 800307c:	d5aa      	bpl.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 800307e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003080:	b292      	uxth	r2, r2
 8003082:	b16a      	cbz	r2, 80030a0 <I2C_Slave_ISR_IT+0x104>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003084:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003086:	6822      	ldr	r2, [r4, #0]
 8003088:	f813 1b01 	ldrb.w	r1, [r3], #1
 800308c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800308e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003090:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003092:	3b01      	subs	r3, #1
 8003094:	b29b      	uxth	r3, r3
 8003096:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003098:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800309a:	3b01      	subs	r3, #1
 800309c:	8523      	strh	r3, [r4, #40]	; 0x28
 800309e:	e799      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80030a0:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 80030a4:	d0b0      	beq.n	8003008 <I2C_Slave_ISR_IT+0x6c>
 80030a6:	e795      	b.n	8002fd4 <I2C_Slave_ISR_IT+0x38>
  __HAL_LOCK(hi2c);
 80030a8:	2002      	movs	r0, #2
}
 80030aa:	bd70      	pop	{r4, r5, r6, pc}

080030ac <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80030ac:	6803      	ldr	r3, [r0, #0]
 80030ae:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80030b0:	681a      	ldr	r2, [r3, #0]
{
 80030b2:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030b4:	05cc      	lsls	r4, r1, #23
 80030b6:	d508      	bpl.n	80030ca <HAL_I2C_ER_IRQHandler+0x1e>
 80030b8:	0614      	lsls	r4, r2, #24
 80030ba:	d506      	bpl.n	80030ca <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80030bc:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80030be:	f044 0401 	orr.w	r4, r4, #1
 80030c2:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030c4:	f44f 7480 	mov.w	r4, #256	; 0x100
 80030c8:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030ca:	054c      	lsls	r4, r1, #21
 80030cc:	d508      	bpl.n	80030e0 <HAL_I2C_ER_IRQHandler+0x34>
 80030ce:	0614      	lsls	r4, r2, #24
 80030d0:	d506      	bpl.n	80030e0 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80030d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80030d4:	f044 0408 	orr.w	r4, r4, #8
 80030d8:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80030de:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030e0:	0589      	lsls	r1, r1, #22
 80030e2:	d508      	bpl.n	80030f6 <HAL_I2C_ER_IRQHandler+0x4a>
 80030e4:	0612      	lsls	r2, r2, #24
 80030e6:	d506      	bpl.n	80030f6 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80030e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80030ea:	f042 0202 	orr.w	r2, r2, #2
 80030ee:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030f4:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 80030f6:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80030f8:	f011 0f0b 	tst.w	r1, #11
 80030fc:	d003      	beq.n	8003106 <HAL_I2C_ER_IRQHandler+0x5a>
}
 80030fe:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8003102:	f7ff be67 	b.w	8002dd4 <I2C_ITError>
}
 8003106:	f85d 4b04 	ldr.w	r4, [sp], #4
 800310a:	4770      	bx	lr

0800310c <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800310c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 800310e:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 8003110:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003112:	2300      	movs	r3, #0
 8003114:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003116:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003118:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800311a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800311e:	2b60      	cmp	r3, #96	; 0x60
 8003120:	d105      	bne.n	800312e <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8003122:	2320      	movs	r3, #32
 8003124:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8003128:	f7ff fe53 	bl	8002dd2 <HAL_I2C_AbortCpltCallback>
 800312c:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 800312e:	f7ff fe4f 	bl	8002dd0 <HAL_I2C_ErrorCallback>
 8003132:	bd08      	pop	{r3, pc}

08003134 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003134:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	2a20      	cmp	r2, #32
{
 800313c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800313e:	d11d      	bne.n	800317c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003140:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003144:	2b01      	cmp	r3, #1
 8003146:	d019      	beq.n	800317c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003148:	2324      	movs	r3, #36	; 0x24
 800314a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800314e:	6803      	ldr	r3, [r0, #0]
 8003150:	681c      	ldr	r4, [r3, #0]
 8003152:	f024 0401 	bic.w	r4, r4, #1
 8003156:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003158:	681c      	ldr	r4, [r3, #0]
 800315a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800315e:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003160:	681c      	ldr	r4, [r3, #0]
 8003162:	4321      	orrs	r1, r4
 8003164:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003166:	6819      	ldr	r1, [r3, #0]
 8003168:	f041 0101 	orr.w	r1, r1, #1
 800316c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800316e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003170:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003174:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003178:	4618      	mov	r0, r3
 800317a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800317c:	2002      	movs	r0, #2
  }
}
 800317e:	bd10      	pop	{r4, pc}

08003180 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003180:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003182:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8003186:	b2e4      	uxtb	r4, r4
 8003188:	2c20      	cmp	r4, #32
 800318a:	d11c      	bne.n	80031c6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800318c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003190:	2b01      	cmp	r3, #1
 8003192:	d018      	beq.n	80031c6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003194:	2324      	movs	r3, #36	; 0x24
 8003196:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800319a:	6803      	ldr	r3, [r0, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80031a4:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80031a6:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80031aa:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80031ae:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80031ba:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80031be:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80031c2:	4618      	mov	r0, r3
 80031c4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80031c6:	2002      	movs	r0, #2
  }
}
 80031c8:	bd10      	pop	{r4, pc}

080031ca <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80031ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031ce:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80031d0:	6804      	ldr	r4, [r0, #0]
 80031d2:	684f      	ldr	r7, [r1, #4]
 80031d4:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031d6:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 80031da:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031de:	3284      	adds	r2, #132	; 0x84
 80031e0:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031e2:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031e6:	6858      	ldr	r0, [r3, #4]
 80031e8:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 80031ec:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031ee:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80031f0:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031f4:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80031f8:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031fa:	4430      	add	r0, r6
 80031fc:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003200:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8003202:	68e0      	ldr	r0, [r4, #12]
 8003204:	68cd      	ldr	r5, [r1, #12]
 8003206:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800320a:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800320c:	6898      	ldr	r0, [r3, #8]
 800320e:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8003212:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003214:	68e6      	ldr	r6, [r4, #12]
 8003216:	6888      	ldr	r0, [r1, #8]
 8003218:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800321c:	3001      	adds	r0, #1
 800321e:	4430      	add	r0, r6
 8003220:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003224:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003226:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003228:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800322a:	f020 0007 	bic.w	r0, r0, #7
 800322e:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003230:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003234:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003236:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003238:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800323c:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003240:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003244:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8003248:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800324c:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003250:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003254:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003256:	6958      	ldr	r0, [r3, #20]
 8003258:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800325c:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800325e:	6948      	ldr	r0, [r1, #20]
 8003260:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003262:	69d8      	ldr	r0, [r3, #28]
 8003264:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8003268:	f020 0007 	bic.w	r0, r0, #7
 800326c:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800326e:	6a08      	ldr	r0, [r1, #32]
 8003270:	69cd      	ldr	r5, [r1, #28]
 8003272:	4305      	orrs	r5, r0
 8003274:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003276:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003278:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800327a:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800327e:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003280:	b31e      	cbz	r6, 80032ca <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003282:	2e01      	cmp	r6, #1
 8003284:	d023      	beq.n	80032ce <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003286:	1eb0      	subs	r0, r6, #2
 8003288:	2802      	cmp	r0, #2
 800328a:	d922      	bls.n	80032d2 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800328c:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 800328e:	bf0c      	ite	eq
 8003290:	2002      	moveq	r0, #2
 8003292:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003294:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003296:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800329a:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800329c:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800329e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 80032a0:	eba7 070e 	sub.w	r7, r7, lr
 80032a4:	4345      	muls	r5, r0
 80032a6:	4378      	muls	r0, r7
 80032a8:	3003      	adds	r0, #3
 80032aa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80032ae:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80032b0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032b2:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80032b6:	f020 0007 	bic.w	r0, r0, #7
 80032ba:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80032bc:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80032be:	58a3      	ldr	r3, [r4, r2]
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	50a3      	str	r3, [r4, r2]
 80032c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 80032ca:	2004      	movs	r0, #4
 80032cc:	e7e2      	b.n	8003294 <LTDC_SetConfig+0xca>
    tmp = 3;
 80032ce:	2003      	movs	r0, #3
 80032d0:	e7e0      	b.n	8003294 <LTDC_SetConfig+0xca>
    tmp = 2;
 80032d2:	2002      	movs	r0, #2
 80032d4:	e7de      	b.n	8003294 <LTDC_SetConfig+0xca>
	...

080032d8 <HAL_LTDC_Init>:
{
 80032d8:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 80032da:	4604      	mov	r4, r0
 80032dc:	2800      	cmp	r0, #0
 80032de:	d063      	beq.n	80033a8 <HAL_LTDC_Init+0xd0>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80032e0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80032e4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032e8:	b91b      	cbnz	r3, 80032f2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80032ea:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80032ee:	f01d ff91 	bl	8021214 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80032f2:	2302      	movs	r3, #2
 80032f4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80032f8:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032fa:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003302:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003304:	6862      	ldr	r2, [r4, #4]
 8003306:	6999      	ldr	r1, [r3, #24]
 8003308:	4302      	orrs	r2, r0
 800330a:	68e0      	ldr	r0, [r4, #12]
 800330c:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800330e:	6920      	ldr	r0, [r4, #16]
 8003310:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003312:	430a      	orrs	r2, r1
 8003314:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	4924      	ldr	r1, [pc, #144]	; (80033ac <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16);
 800331a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800331c:	400a      	ands	r2, r1
 800331e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003326:	69a0      	ldr	r0, [r4, #24]
 8003328:	4302      	orrs	r2, r0
 800332a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800332c:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 800332e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003330:	400a      	ands	r2, r1
 8003332:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800333a:	6a20      	ldr	r0, [r4, #32]
 800333c:	4302      	orrs	r2, r0
 800333e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003340:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8003342:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003344:	400a      	ands	r2, r1
 8003346:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800334e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003350:	4302      	orrs	r2, r0
 8003352:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003354:	695a      	ldr	r2, [r3, #20]
 8003356:	4011      	ands	r1, r2
 8003358:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800335a:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 800335c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800335e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003362:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003364:	430a      	orrs	r2, r1
 8003366:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800336a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 800336e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003372:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8003376:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003378:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800337a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800337e:	430a      	orrs	r2, r1
 8003380:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003384:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003388:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800338a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800338c:	f042 0206 	orr.w	r2, r2, #6
 8003390:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003392:	699a      	ldr	r2, [r3, #24]
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800339a:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800339c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800339e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80033a2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 80033a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80033a8:	2001      	movs	r0, #1
}
 80033aa:	bd38      	pop	{r3, r4, r5, pc}
 80033ac:	f000f800 	.word	0xf000f800

080033b0 <HAL_LTDC_ConfigLayer>:
{   
 80033b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80033b2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80033b6:	2b01      	cmp	r3, #1
{   
 80033b8:	4606      	mov	r6, r0
 80033ba:	468e      	mov	lr, r1
 80033bc:	4694      	mov	ip, r2
 80033be:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80033c2:	d01d      	beq.n	8003400 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80033c4:	2434      	movs	r4, #52	; 0x34
 80033c6:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80033c8:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80033cc:	fb04 6402 	mla	r4, r4, r2, r6
 80033d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 80033d2:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80033d4:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 80033d6:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80033da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033e4:	682b      	ldr	r3, [r5, #0]
 80033e6:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80033e8:	4630      	mov	r0, r6
 80033ea:	4662      	mov	r2, ip
 80033ec:	4671      	mov	r1, lr
 80033ee:	f7ff feec 	bl	80031ca <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80033f2:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80033f4:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80033f6:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80033f8:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80033fc:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003400:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003402 <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 8003402:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003406:	2b01      	cmp	r3, #1
{
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	f04f 0302 	mov.w	r3, #2
 800340e:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8003410:	d015      	beq.n	800343e <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003412:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 8003416:	2334      	movs	r3, #52	; 0x34
 8003418:	4353      	muls	r3, r2
 800341a:	18c6      	adds	r6, r0, r3
  __HAL_LOCK(hltdc);
 800341c:	2501      	movs	r5, #1
 800341e:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8003422:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003424:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003428:	4401      	add	r1, r0
 800342a:	f7ff fece 	bl	80031ca <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800342e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8003430:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003432:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003434:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003438:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 800343c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 800343e:	4618      	mov	r0, r3
}
 8003440:	bd70      	pop	{r4, r5, r6, pc}

08003442 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003446:	4604      	mov	r4, r0
{
 8003448:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 800344a:	2800      	cmp	r0, #0
 800344c:	d074      	beq.n	8003538 <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800344e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8003452:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003456:	b91b      	cbnz	r3, 8003460 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003458:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800345c:	f01e fa26 	bl	80218ac <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003460:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003462:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8003464:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003468:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 800346c:	f004 f98f 	bl	800778e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003472:	466e      	mov	r6, sp
 8003474:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003478:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800347a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800347e:	e886 0003 	stmia.w	r6, {r0, r1}
 8003482:	f104 0804 	add.w	r8, r4, #4
 8003486:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800348a:	6820      	ldr	r0, [r4, #0]
 800348c:	f004 f94a 	bl	8007724 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003490:	2100      	movs	r1, #0
 8003492:	6820      	ldr	r0, [r4, #0]
 8003494:	f004 f981 	bl	800779a <USB_SetCurrentMode>
 8003498:	2100      	movs	r1, #0
 800349a:	4622      	mov	r2, r4
 800349c:	4623      	mov	r3, r4
 800349e:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034a2:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034a4:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 80034a6:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034aa:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 80034ae:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 80034b0:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 80034b2:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034b6:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80034ba:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034bc:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80034be:	6518      	str	r0, [r3, #80]	; 0x50
 80034c0:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 80034c4:	d1ef      	bne.n	80034a6 <HAL_PCD_Init+0x64>
 80034c6:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034c8:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 80034ca:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 80034ce:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 80034d0:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 80034d2:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034d6:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034da:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034de:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034e2:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 80034e6:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 80034ea:	d1ee      	bne.n	80034ca <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80034ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034ee:	466e      	mov	r6, sp
 80034f0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80034f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034f4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80034f6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034fa:	e886 0003 	stmia.w	r6, {r0, r1}
 80034fe:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8003502:	6820      	ldr	r0, [r4, #0]
 8003504:	f004 f98a 	bl	800781c <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8003508:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 800350a:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800350e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003514:	2b01      	cmp	r3, #1
 8003516:	d102      	bne.n	800351e <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003518:	4620      	mov	r0, r4
 800351a:	f000 fc27 	bl	8003d6c <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 800351e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003520:	2b01      	cmp	r3, #1
 8003522:	d102      	bne.n	800352a <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8003524:	4620      	mov	r0, r4
 8003526:	f000 fc34 	bl	8003d92 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800352a:	6820      	ldr	r0, [r4, #0]
 800352c:	f004 fc50 	bl	8007dd0 <USB_DevDisconnect>

  return HAL_OK;
 8003530:	2000      	movs	r0, #0
}
 8003532:	b00a      	add	sp, #40	; 0x28
 8003534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003538:	2001      	movs	r0, #1
 800353a:	e7fa      	b.n	8003532 <HAL_PCD_Init+0xf0>

0800353c <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800353c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003540:	2b01      	cmp	r3, #1
{
 8003542:	b510      	push	{r4, lr}
 8003544:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003546:	d00c      	beq.n	8003562 <HAL_PCD_Start+0x26>
 8003548:	2301      	movs	r3, #1
 800354a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 800354e:	6800      	ldr	r0, [r0, #0]
 8003550:	f004 fc32 	bl	8007db8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003554:	6820      	ldr	r0, [r4, #0]
 8003556:	f004 f914 	bl	8007782 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800355a:	2000      	movs	r0, #0
 800355c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003560:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003562:	2002      	movs	r0, #2
}
 8003564:	bd10      	pop	{r4, pc}
	...

08003568 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800356c:	f8d0 9000 	ldr.w	r9, [r0]
{
 8003570:	b085      	sub	sp, #20
 8003572:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003574:	4648      	mov	r0, r9
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 8003576:	f8d9 8040 	ldr.w	r8, [r9, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800357a:	f004 fc64 	bl	8007e46 <USB_GetMode>
 800357e:	9000      	str	r0, [sp, #0]
 8003580:	2800      	cmp	r0, #0
 8003582:	f040 8154 	bne.w	800382e <HAL_PCD_IRQHandler+0x2c6>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003586:	6820      	ldr	r0, [r4, #0]
 8003588:	f004 fc2e 	bl	8007de8 <USB_ReadInterrupts>
 800358c:	2800      	cmp	r0, #0
 800358e:	f000 814e 	beq.w	800382e <HAL_PCD_IRQHandler+0x2c6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003592:	6820      	ldr	r0, [r4, #0]
 8003594:	f004 fc28 	bl	8007de8 <USB_ReadInterrupts>
 8003598:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800359a:	bf48      	it	mi
 800359c:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800359e:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80035a0:	bf42      	ittt	mi
 80035a2:	6953      	ldrmi	r3, [r2, #20]
 80035a4:	f003 0302 	andmi.w	r3, r3, #2
 80035a8:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035aa:	f004 fc1d 	bl	8007de8 <USB_ReadInterrupts>
 80035ae:	f410 2b00 	ands.w	fp, r0, #524288	; 0x80000
 80035b2:	d00b      	beq.n	80035cc <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035b4:	6820      	ldr	r0, [r4, #0]
 80035b6:	f004 fc1b 	bl	8007df0 <USB_ReadDevAllOutEpInterrupt>
 80035ba:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 80035be:	4605      	mov	r5, r0

      while (ep_intr != 0U)
 80035c0:	46b2      	mov	sl, r6
      epnum = 0U;
 80035c2:	f04f 0b00 	mov.w	fp, #0
      while (ep_intr != 0U)
 80035c6:	2d00      	cmp	r5, #0
 80035c8:	f040 8134 	bne.w	8003834 <HAL_PCD_IRQHandler+0x2cc>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035cc:	6820      	ldr	r0, [r4, #0]
 80035ce:	f004 fc0b 	bl	8007de8 <USB_ReadInterrupts>
 80035d2:	0347      	lsls	r7, r0, #13
 80035d4:	d50c      	bpl.n	80035f0 <HAL_PCD_IRQHandler+0x88>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035d6:	6820      	ldr	r0, [r4, #0]
 80035d8:	f004 fc12 	bl	8007e00 <USB_ReadDevAllInEpInterrupt>
 80035dc:	4625      	mov	r5, r4
 80035de:	9001      	str	r0, [sp, #4]
 80035e0:	f509 6810 	add.w	r8, r9, #2304	; 0x900

      epnum = 0U;
 80035e4:	f04f 0b00 	mov.w	fp, #0

      while (ep_intr != 0U)
 80035e8:	9b01      	ldr	r3, [sp, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 8164 	bne.w	80038b8 <HAL_PCD_IRQHandler+0x350>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035f0:	6820      	ldr	r0, [r4, #0]
 80035f2:	f004 fbf9 	bl	8007de8 <USB_ReadInterrupts>
 80035f6:	2800      	cmp	r0, #0
 80035f8:	da15      	bge.n	8003626 <HAL_PCD_IRQHandler+0xbe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035fa:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 80035fe:	f023 0301 	bic.w	r3, r3, #1
 8003602:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8003606:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800360a:	2b01      	cmp	r3, #1
 800360c:	f040 81cf 	bne.w	80039ae <HAL_PCD_IRQHandler+0x446>
      {
        hpcd->LPM_State = LPM_L0;
 8003610:	2100      	movs	r1, #0
 8003612:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003616:	4620      	mov	r0, r4
 8003618:	f01e faae 	bl	8021b78 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800361c:	6822      	ldr	r2, [r4, #0]
 800361e:	6953      	ldr	r3, [r2, #20]
 8003620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003624:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003626:	6820      	ldr	r0, [r4, #0]
 8003628:	f004 fbde 	bl	8007de8 <USB_ReadInterrupts>
 800362c:	0505      	lsls	r5, r0, #20
 800362e:	d50b      	bpl.n	8003648 <HAL_PCD_IRQHandler+0xe0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003630:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8003634:	07d8      	lsls	r0, r3, #31
 8003636:	d502      	bpl.n	800363e <HAL_PCD_IRQHandler+0xd6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003638:	4620      	mov	r0, r4
 800363a:	f01e f9a1 	bl	8021980 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800363e:	6822      	ldr	r2, [r4, #0]
 8003640:	6953      	ldr	r3, [r2, #20]
 8003642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003646:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003648:	6820      	ldr	r0, [r4, #0]
 800364a:	f004 fbcd 	bl	8007de8 <USB_ReadInterrupts>
 800364e:	0101      	lsls	r1, r0, #4
 8003650:	d514      	bpl.n	800367c <HAL_PCD_IRQHandler+0x114>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800365a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800365c:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8003660:	2a00      	cmp	r2, #0
 8003662:	f040 81a8 	bne.w	80039b6 <HAL_PCD_IRQHandler+0x44e>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8003668:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800366a:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 800366e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003672:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003676:	4620      	mov	r0, r4
 8003678:	f01e fa7e 	bl	8021b78 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800367c:	6820      	ldr	r0, [r4, #0]
 800367e:	f004 fbb3 	bl	8007de8 <USB_ReadInterrupts>
 8003682:	04c2      	lsls	r2, r0, #19
 8003684:	d534      	bpl.n	80036f0 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003686:	f509 6500 	add.w	r5, r9, #2048	; 0x800
 800368a:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800368c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003694:	2110      	movs	r1, #16
 8003696:	f004 f897 	bl	80077c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369a:	6860      	ldr	r0, [r4, #4]
 800369c:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036a0:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a4:	9a00      	ldr	r2, [sp, #0]
 80036a6:	4282      	cmp	r2, r0
 80036a8:	f040 8189 	bne.w	80039be <HAL_PCD_IRQHandler+0x456>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80036ac:	69eb      	ldr	r3, [r5, #28]
 80036ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036b2:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 819a 	beq.w	80039f0 <HAL_PCD_IRQHandler+0x488>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80036bc:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80036c0:	f043 030b 	orr.w	r3, r3, #11
 80036c4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80036c8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80036ca:	f043 030b 	orr.w	r3, r3, #11
 80036ce:	646b      	str	r3, [r5, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036d0:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036d4:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036da:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036de:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80036e2:	f004 fbcf 	bl	8007e84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036e6:	6822      	ldr	r2, [r4, #0]
 80036e8:	6953      	ldr	r3, [r2, #20]
 80036ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ee:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036f0:	6820      	ldr	r0, [r4, #0]
 80036f2:	f004 fb79 	bl	8007de8 <USB_ReadInterrupts>
 80036f6:	0483      	lsls	r3, r0, #18
 80036f8:	d520      	bpl.n	800373c <HAL_PCD_IRQHandler+0x1d4>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036fa:	6820      	ldr	r0, [r4, #0]
 80036fc:	f004 fba7 	bl	8007e4e <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003700:	6822      	ldr	r2, [r4, #0]
 8003702:	68d3      	ldr	r3, [r2, #12]
 8003704:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8003708:	60d3      	str	r3, [r2, #12]
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800370a:	2303      	movs	r3, #3
 800370c:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 800370e:	2340      	movs	r3, #64	; 0x40
 8003710:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8003712:	f000 ff9d 	bl	8004650 <HAL_RCC_GetHCLKFreq>

        if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003716:	4bb3      	ldr	r3, [pc, #716]	; (80039e4 <HAL_PCD_IRQHandler+0x47c>)
 8003718:	4ab3      	ldr	r2, [pc, #716]	; (80039e8 <HAL_PCD_IRQHandler+0x480>)
 800371a:	4403      	add	r3, r0
 800371c:	4293      	cmp	r3, r2
 800371e:	6823      	ldr	r3, [r4, #0]
 8003720:	f200 816f 	bhi.w	8003a02 <HAL_PCD_IRQHandler+0x49a>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 800372a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800372c:	4620      	mov	r0, r4
 800372e:	f01e f91a 	bl	8021966 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003732:	6822      	ldr	r2, [r4, #0]
 8003734:	6953      	ldr	r3, [r2, #20]
 8003736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800373a:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800373c:	6820      	ldr	r0, [r4, #0]
 800373e:	f004 fb53 	bl	8007de8 <USB_ReadInterrupts>
 8003742:	06c7      	lsls	r7, r0, #27
 8003744:	d52b      	bpl.n	800379e <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003746:	6822      	ldr	r2, [r4, #0]
 8003748:	6993      	ldr	r3, [r2, #24]
 800374a:	f023 0310 	bic.w	r3, r3, #16
 800374e:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8003750:	f8d9 5020 	ldr.w	r5, [r9, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003754:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8003758:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800375a:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800375e:	f040 81a0 	bne.w	8003aa2 <HAL_PCD_IRQHandler+0x53a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003762:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003766:	421d      	tst	r5, r3
 8003768:	d014      	beq.n	8003794 <HAL_PCD_IRQHandler+0x22c>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800376a:	261c      	movs	r6, #28
 800376c:	fb06 4607 	mla	r6, r6, r7, r4
 8003770:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003774:	462a      	mov	r2, r5
 8003776:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800377a:	4648      	mov	r0, r9
 800377c:	f004 faa6 	bl	8007ccc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003780:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 8003784:	442b      	add	r3, r5
 8003786:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800378a:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800378e:	441d      	add	r5, r3
 8003790:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003794:	6822      	ldr	r2, [r4, #0]
 8003796:	6993      	ldr	r3, [r2, #24]
 8003798:	f043 0310 	orr.w	r3, r3, #16
 800379c:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800379e:	6820      	ldr	r0, [r4, #0]
 80037a0:	f004 fb22 	bl	8007de8 <USB_ReadInterrupts>
 80037a4:	0706      	lsls	r6, r0, #28
 80037a6:	d507      	bpl.n	80037b8 <HAL_PCD_IRQHandler+0x250>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037a8:	4620      	mov	r0, r4
 80037aa:	f01e f8d8 	bl	802195e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037ae:	6822      	ldr	r2, [r4, #0]
 80037b0:	6953      	ldr	r3, [r2, #20]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037b8:	6820      	ldr	r0, [r4, #0]
 80037ba:	f004 fb15 	bl	8007de8 <USB_ReadInterrupts>
 80037be:	02c5      	lsls	r5, r0, #11
 80037c0:	d509      	bpl.n	80037d6 <HAL_PCD_IRQHandler+0x26e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037c2:	fa5f f18b 	uxtb.w	r1, fp
 80037c6:	4620      	mov	r0, r4
 80037c8:	f01e f910 	bl	80219ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037cc:	6822      	ldr	r2, [r4, #0]
 80037ce:	6953      	ldr	r3, [r2, #20]
 80037d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037d4:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037d6:	6820      	ldr	r0, [r4, #0]
 80037d8:	f004 fb06 	bl	8007de8 <USB_ReadInterrupts>
 80037dc:	0280      	lsls	r0, r0, #10
 80037de:	d509      	bpl.n	80037f4 <HAL_PCD_IRQHandler+0x28c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037e0:	fa5f f18b 	uxtb.w	r1, fp
 80037e4:	4620      	mov	r0, r4
 80037e6:	f01e f8fd 	bl	80219e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037ea:	6822      	ldr	r2, [r4, #0]
 80037ec:	6953      	ldr	r3, [r2, #20]
 80037ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037f2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037f4:	6820      	ldr	r0, [r4, #0]
 80037f6:	f004 faf7 	bl	8007de8 <USB_ReadInterrupts>
 80037fa:	0041      	lsls	r1, r0, #1
 80037fc:	d507      	bpl.n	800380e <HAL_PCD_IRQHandler+0x2a6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037fe:	4620      	mov	r0, r4
 8003800:	f01e f8f8 	bl	80219f4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003804:	6822      	ldr	r2, [r4, #0]
 8003806:	6953      	ldr	r3, [r2, #20]
 8003808:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800380c:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800380e:	6820      	ldr	r0, [r4, #0]
 8003810:	f004 faea 	bl	8007de8 <USB_ReadInterrupts>
 8003814:	0742      	lsls	r2, r0, #29
 8003816:	d50a      	bpl.n	800382e <HAL_PCD_IRQHandler+0x2c6>
    {
      temp = hpcd->Instance->GOTGINT;
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800381c:	076b      	lsls	r3, r5, #29
 800381e:	d502      	bpl.n	8003826 <HAL_PCD_IRQHandler+0x2be>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003820:	4620      	mov	r0, r4
 8003822:	f01e f8eb 	bl	80219fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	685a      	ldr	r2, [r3, #4]
 800382a:	4315      	orrs	r5, r2
 800382c:	605d      	str	r5, [r3, #4]
    }
  }
}
 800382e:	b005      	add	sp, #20
 8003830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 8003834:	07e9      	lsls	r1, r5, #31
 8003836:	d52e      	bpl.n	8003896 <HAL_PCD_IRQHandler+0x32e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003838:	fa5f f28b 	uxtb.w	r2, fp
 800383c:	4611      	mov	r1, r2
 800383e:	6820      	ldr	r0, [r4, #0]
 8003840:	9201      	str	r2, [sp, #4]
 8003842:	f004 fae5 	bl	8007e10 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003846:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003848:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800384a:	d50d      	bpl.n	8003868 <HAL_PCD_IRQHandler+0x300>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800384c:	4b67      	ldr	r3, [pc, #412]	; (80039ec <HAL_PCD_IRQHandler+0x484>)
 800384e:	9a01      	ldr	r2, [sp, #4]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003850:	2101      	movs	r1, #1
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003852:	4598      	cmp	r8, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003854:	f8ca 1008 	str.w	r1, [sl, #8]
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003858:	d129      	bne.n	80038ae <HAL_PCD_IRQHandler+0x346>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 800385a:	68b1      	ldr	r1, [r6, #8]
 800385c:	040b      	lsls	r3, r1, #16
 800385e:	d520      	bpl.n	80038a2 <HAL_PCD_IRQHandler+0x33a>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003860:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003864:	f8ca 2008 	str.w	r2, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003868:	0739      	lsls	r1, r7, #28
 800386a:	d50f      	bpl.n	800388c <HAL_PCD_IRQHandler+0x324>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800386c:	4b5f      	ldr	r3, [pc, #380]	; (80039ec <HAL_PCD_IRQHandler+0x484>)
 800386e:	4598      	cmp	r8, r3
 8003870:	d106      	bne.n	8003880 <HAL_PCD_IRQHandler+0x318>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8003872:	68b2      	ldr	r2, [r6, #8]
 8003874:	0412      	lsls	r2, r2, #16
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003876:	bf44      	itt	mi
 8003878:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 800387c:	f8ca 2008 	strmi.w	r2, [sl, #8]
            HAL_PCD_SetupStageCallback(hpcd);
 8003880:	4620      	mov	r0, r4
 8003882:	f01e f855 	bl	8021930 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003886:	2308      	movs	r3, #8
 8003888:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800388c:	06fb      	lsls	r3, r7, #27
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800388e:	bf44      	itt	mi
 8003890:	2310      	movmi	r3, #16
 8003892:	f8ca 3008 	strmi.w	r3, [sl, #8]
        epnum++;
 8003896:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 800389a:	086d      	lsrs	r5, r5, #1
 800389c:	f10a 0a20 	add.w	sl, sl, #32
 80038a0:	e691      	b.n	80035c6 <HAL_PCD_IRQHandler+0x5e>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 5)) != 0U)
 80038a2:	68b1      	ldr	r1, [r6, #8]
 80038a4:	0688      	lsls	r0, r1, #26
                  CLEAR_OUT_EP_INTR(epnum, (1U << 5));
 80038a6:	bf44      	itt	mi
 80038a8:	2120      	movmi	r1, #32
 80038aa:	f8ca 1008 	strmi.w	r1, [sl, #8]
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80038ae:	4611      	mov	r1, r2
 80038b0:	4620      	mov	r0, r4
 80038b2:	f01e f843 	bl	802193c <HAL_PCD_DataOutStageCallback>
 80038b6:	e7d7      	b.n	8003868 <HAL_PCD_IRQHandler+0x300>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038b8:	9b01      	ldr	r3, [sp, #4]
 80038ba:	07de      	lsls	r6, r3, #31
 80038bc:	d56e      	bpl.n	800399c <HAL_PCD_IRQHandler+0x434>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038be:	fa5f fa8b 	uxtb.w	sl, fp
 80038c2:	4651      	mov	r1, sl
 80038c4:	6820      	ldr	r0, [r4, #0]
 80038c6:	f004 faac 	bl	8007e22 <USB_ReadDevInEPInterrupt>
 80038ca:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038cc:	07f0      	lsls	r0, r6, #31
 80038ce:	d510      	bpl.n	80038f2 <HAL_PCD_IRQHandler+0x38a>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038d0:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 80038d4:	2001      	movs	r0, #1
 80038d6:	f00b 020f 	and.w	r2, fp, #15
 80038da:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038de:	ea23 0302 	bic.w	r3, r3, r2
 80038e2:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038e6:	4651      	mov	r1, sl
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038e8:	f8c8 0008 	str.w	r0, [r8, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038ec:	4620      	mov	r0, r4
 80038ee:	f01e f82e 	bl	802194e <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038f2:	0731      	lsls	r1, r6, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038f4:	bf44      	itt	mi
 80038f6:	2308      	movmi	r3, #8
 80038f8:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038fc:	06f2      	lsls	r2, r6, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038fe:	bf44      	itt	mi
 8003900:	2310      	movmi	r3, #16
 8003902:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003906:	0673      	lsls	r3, r6, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003908:	bf44      	itt	mi
 800390a:	2340      	movmi	r3, #64	; 0x40
 800390c:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003910:	07b7      	lsls	r7, r6, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003912:	bf44      	itt	mi
 8003914:	2302      	movmi	r3, #2
 8003916:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800391a:	0636      	lsls	r6, r6, #24
 800391c:	d53e      	bpl.n	800399c <HAL_PCD_IRQHandler+0x434>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800391e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003920:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 8003922:	42b3      	cmp	r3, r6
 8003924:	d83a      	bhi.n	800399c <HAL_PCD_IRQHandler+0x434>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8003926:	1af6      	subs	r6, r6, r3
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8003928:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800392a:	6822      	ldr	r2, [r4, #0]
 800392c:	9202      	str	r2, [sp, #8]
  len32b = (len + 3U) / 4U;
 800392e:	429e      	cmp	r6, r3
 8003930:	bf28      	it	cs
 8003932:	461e      	movcs	r6, r3

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003934:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8003938:	3603      	adds	r6, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800393a:	eb03 134b 	add.w	r3, r3, fp, lsl #5
  len32b = (len + 3U) / 4U;
 800393e:	08b6      	lsrs	r6, r6, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003940:	9303      	str	r3, [sp, #12]
 8003942:	9b03      	ldr	r3, [sp, #12]
 8003944:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	b29b      	uxth	r3, r3
 800394a:	42b3      	cmp	r3, r6
 800394c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800394e:	d923      	bls.n	8003998 <HAL_PCD_IRQHandler+0x430>
 8003950:	429f      	cmp	r7, r3
 8003952:	d921      	bls.n	8003998 <HAL_PCD_IRQHandler+0x430>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003954:	b967      	cbnz	r7, 8003970 <HAL_PCD_IRQHandler+0x408>
  }

  if (ep->xfer_len <= ep->xfer_count)
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003956:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8003958:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800395a:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 800395e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8003962:	fa02 f20b 	lsl.w	r2, r2, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003966:	ea23 0302 	bic.w	r3, r3, r2
 800396a:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 800396e:	e015      	b.n	800399c <HAL_PCD_IRQHandler+0x434>
    len = ep->xfer_len - ep->xfer_count;
 8003970:	1aff      	subs	r7, r7, r3
 8003972:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003974:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8003976:	9802      	ldr	r0, [sp, #8]
 8003978:	429f      	cmp	r7, r3
 800397a:	bf28      	it	cs
 800397c:	461f      	movcs	r7, r3
 800397e:	b2bb      	uxth	r3, r7
 8003980:	4652      	mov	r2, sl
 8003982:	f004 f8cd 	bl	8007b20 <USB_WritePacket>
    ep->xfer_buff  += len;
 8003986:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003988:	443b      	add	r3, r7
 800398a:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800398c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 800398e:	1cfe      	adds	r6, r7, #3
    ep->xfer_count += len;
 8003990:	441f      	add	r7, r3
    len32b = (len + 3U) / 4U;
 8003992:	08b6      	lsrs	r6, r6, #2
    ep->xfer_count += len;
 8003994:	656f      	str	r7, [r5, #84]	; 0x54
 8003996:	e7d4      	b.n	8003942 <HAL_PCD_IRQHandler+0x3da>
  if (ep->xfer_len <= ep->xfer_count)
 8003998:	429f      	cmp	r7, r3
 800399a:	d9dc      	bls.n	8003956 <HAL_PCD_IRQHandler+0x3ee>
        ep_intr >>= 1U;
 800399c:	9b01      	ldr	r3, [sp, #4]
 800399e:	085b      	lsrs	r3, r3, #1
        epnum++;
 80039a0:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 80039a4:	9301      	str	r3, [sp, #4]
 80039a6:	351c      	adds	r5, #28
 80039a8:	f108 0820 	add.w	r8, r8, #32
 80039ac:	e61c      	b.n	80035e8 <HAL_PCD_IRQHandler+0x80>
        HAL_PCD_ResumeCallback(hpcd);
 80039ae:	4620      	mov	r0, r4
 80039b0:	f01d fffe 	bl	80219b0 <HAL_PCD_ResumeCallback>
 80039b4:	e632      	b.n	800361c <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 80039b6:	4620      	mov	r0, r4
 80039b8:	f01d ffe2 	bl	8021980 <HAL_PCD_SuspendCallback>
 80039bc:	e65e      	b.n	800367c <HAL_PCD_IRQHandler+0x114>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039be:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80039c6:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039c8:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80039d0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80039d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d8:	9a00      	ldr	r2, [sp, #0]
 80039da:	3201      	adds	r2, #1
 80039dc:	9200      	str	r2, [sp, #0]
 80039de:	3320      	adds	r3, #32
 80039e0:	e660      	b.n	80036a4 <HAL_PCD_IRQHandler+0x13c>
 80039e2:	bf00      	nop
 80039e4:	ff275340 	.word	0xff275340
 80039e8:	000c34ff 	.word	0x000c34ff
 80039ec:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80039f0:	696b      	ldr	r3, [r5, #20]
 80039f2:	f043 030b 	orr.w	r3, r3, #11
 80039f6:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80039f8:	692b      	ldr	r3, [r5, #16]
 80039fa:	f043 030b 	orr.w	r3, r3, #11
 80039fe:	612b      	str	r3, [r5, #16]
 8003a00:	e666      	b.n	80036d0 <HAL_PCD_IRQHandler+0x168>
        else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a02:	4a2f      	ldr	r2, [pc, #188]	; (8003ac0 <HAL_PCD_IRQHandler+0x558>)
 8003a04:	492f      	ldr	r1, [pc, #188]	; (8003ac4 <HAL_PCD_IRQHandler+0x55c>)
 8003a06:	4402      	add	r2, r0
 8003a08:	428a      	cmp	r2, r1
 8003a0a:	d803      	bhi.n	8003a14 <HAL_PCD_IRQHandler+0x4ac>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a0c:	68da      	ldr	r2, [r3, #12]
 8003a0e:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003a12:	e68a      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a14:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8003a18:	492b      	ldr	r1, [pc, #172]	; (8003ac8 <HAL_PCD_IRQHandler+0x560>)
 8003a1a:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8003a1e:	428a      	cmp	r2, r1
 8003a20:	d803      	bhi.n	8003a2a <HAL_PCD_IRQHandler+0x4c2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8003a28:	e67f      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a2a:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8003a2e:	4927      	ldr	r1, [pc, #156]	; (8003acc <HAL_PCD_IRQHandler+0x564>)
 8003a30:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8003a34:	428a      	cmp	r2, r1
 8003a36:	d803      	bhi.n	8003a40 <HAL_PCD_IRQHandler+0x4d8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003a3e:	e674      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a40:	4a23      	ldr	r2, [pc, #140]	; (8003ad0 <HAL_PCD_IRQHandler+0x568>)
 8003a42:	4924      	ldr	r1, [pc, #144]	; (8003ad4 <HAL_PCD_IRQHandler+0x56c>)
 8003a44:	4402      	add	r2, r0
 8003a46:	428a      	cmp	r2, r1
 8003a48:	d803      	bhi.n	8003a52 <HAL_PCD_IRQHandler+0x4ea>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a4a:	68da      	ldr	r2, [r3, #12]
 8003a4c:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8003a50:	e66b      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a52:	4a21      	ldr	r2, [pc, #132]	; (8003ad8 <HAL_PCD_IRQHandler+0x570>)
 8003a54:	4921      	ldr	r1, [pc, #132]	; (8003adc <HAL_PCD_IRQHandler+0x574>)
 8003a56:	4402      	add	r2, r0
 8003a58:	428a      	cmp	r2, r1
 8003a5a:	d803      	bhi.n	8003a64 <HAL_PCD_IRQHandler+0x4fc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8003a62:	e662      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003a64:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <HAL_PCD_IRQHandler+0x578>)
 8003a66:	491f      	ldr	r1, [pc, #124]	; (8003ae4 <HAL_PCD_IRQHandler+0x57c>)
 8003a68:	4402      	add	r2, r0
 8003a6a:	428a      	cmp	r2, r1
 8003a6c:	d803      	bhi.n	8003a76 <HAL_PCD_IRQHandler+0x50e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8003a74:	e659      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003a76:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8003a7a:	491b      	ldr	r1, [pc, #108]	; (8003ae8 <HAL_PCD_IRQHandler+0x580>)
 8003a7c:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8003a80:	428a      	cmp	r2, r1
 8003a82:	d803      	bhi.n	8003a8c <HAL_PCD_IRQHandler+0x524>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a8a:	e64e      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003a8c:	4a17      	ldr	r2, [pc, #92]	; (8003aec <HAL_PCD_IRQHandler+0x584>)
 8003a8e:	4918      	ldr	r1, [pc, #96]	; (8003af0 <HAL_PCD_IRQHandler+0x588>)
 8003a90:	4402      	add	r2, r0
 8003a92:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a94:	68da      	ldr	r2, [r3, #12]
 8003a96:	bf94      	ite	ls
 8003a98:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a9c:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8003aa0:	e643      	b.n	800372a <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	f47f ae76 	bne.w	8003794 <HAL_PCD_IRQHandler+0x22c>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003aae:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ab0:	261c      	movs	r6, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ab2:	f004 f90b 	bl	8007ccc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ab6:	fb06 4607 	mla	r6, r6, r7, r4
 8003aba:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003abe:	e664      	b.n	800378a <HAL_PCD_IRQHandler+0x222>
 8003ac0:	ff1b1e40 	.word	0xff1b1e40
 8003ac4:	000f423f 	.word	0x000f423f
 8003ac8:	00124f7f 	.word	0x00124f7f
 8003acc:	0013d61f 	.word	0x0013d61f
 8003ad0:	fee5b660 	.word	0xfee5b660
 8003ad4:	0016e35f 	.word	0x0016e35f
 8003ad8:	feced300 	.word	0xfeced300
 8003adc:	001b773f 	.word	0x001b773f
 8003ae0:	feb35bc0 	.word	0xfeb35bc0
 8003ae4:	002191bf 	.word	0x002191bf
 8003ae8:	0038751f 	.word	0x0038751f
 8003aec:	fe5954e0 	.word	0xfe5954e0
 8003af0:	00419cdf 	.word	0x00419cdf

08003af4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003af4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003af8:	2a01      	cmp	r2, #1
{
 8003afa:	b510      	push	{r4, lr}
 8003afc:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003afe:	d00b      	beq.n	8003b18 <HAL_PCD_SetAddress+0x24>
 8003b00:	2201      	movs	r2, #1
 8003b02:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003b06:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b0a:	6800      	ldr	r0, [r0, #0]
 8003b0c:	f004 f944 	bl	8007d98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b10:	2000      	movs	r0, #0
 8003b12:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003b16:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003b18:	2002      	movs	r0, #2
}
 8003b1a:	bd10      	pop	{r4, pc}

08003b1c <HAL_PCD_EP_Open>:
{
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	4604      	mov	r4, r0
 8003b20:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003b24:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003b28:	f04f 061c 	mov.w	r6, #28
 8003b2c:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003b2e:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8003b32:	bf15      	itete	ne
 8003b34:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 8003b38:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003b3c:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003b3e:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003b42:	bf15      	itete	ne
 8003b44:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8003b46:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8003b48:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 8003b4c:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8003b50:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8003b52:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8003b54:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 8003b56:	b2c0      	uxtb	r0, r0
 8003b58:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8003b5a:	b102      	cbz	r2, 8003b5e <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8003b5c:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8003b5e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8003b60:	bf04      	itt	eq
 8003b62:	2300      	moveq	r3, #0
 8003b64:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003b66:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d009      	beq.n	8003b82 <HAL_PCD_EP_Open+0x66>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	f003 feed 	bl	8007954 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 8003b80:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8003b82:	2002      	movs	r0, #2
}
 8003b84:	bd70      	pop	{r4, r5, r6, pc}

08003b86 <HAL_PCD_EP_Close>:
{
 8003b86:	f001 030f 	and.w	r3, r1, #15
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	b510      	push	{r4, lr}
 8003b8e:	4604      	mov	r4, r0
 8003b90:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8003b92:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003b96:	fb00 4102 	mla	r1, r0, r2, r4
 8003b9a:	bf19      	ittee	ne
 8003b9c:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003b9e:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 8003ba2:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003ba6:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003baa:	bf15      	itete	ne
 8003bac:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003bae:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8003bb0:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8003bb4:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & 0xFU;
 8003bb8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003bba:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d009      	beq.n	8003bd6 <HAL_PCD_EP_Close+0x50>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bc8:	6820      	ldr	r0, [r4, #0]
 8003bca:	f003 ff05 	bl	80079d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003bd4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003bd6:	2002      	movs	r0, #2
}
 8003bd8:	bd10      	pop	{r4, pc}

08003bda <HAL_PCD_EP_Receive>:
{
 8003bda:	b538      	push	{r3, r4, r5, lr}
 8003bdc:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003be0:	241c      	movs	r4, #28
 8003be2:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003be6:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003bea:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8003bee:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8003bf2:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003bf4:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003bf8:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003bfc:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 8003c00:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c04:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003c06:	b91d      	cbnz	r5, 8003c10 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c08:	f003 ff18 	bl	8007a3c <USB_EP0StartXfer>
}
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c10:	f003 ff96 	bl	8007b40 <USB_EPStartXfer>
 8003c14:	e7fa      	b.n	8003c0c <HAL_PCD_EP_Receive+0x32>

08003c16 <HAL_PCD_EP_Transmit>:
{
 8003c16:	b538      	push	{r3, r4, r5, lr}
 8003c18:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003c1c:	241c      	movs	r4, #28
 8003c1e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003c22:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003c26:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8003c28:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8003c2e:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8003c30:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8003c32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & 0xFU;
 8003c36:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c3a:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003c3c:	b91d      	cbnz	r5, 8003c46 <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c3e:	f003 fefd 	bl	8007a3c <USB_EP0StartXfer>
}
 8003c42:	2000      	movs	r0, #0
 8003c44:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c46:	f003 ff7b 	bl	8007b40 <USB_EPStartXfer>
 8003c4a:	e7fa      	b.n	8003c42 <HAL_PCD_EP_Transmit+0x2c>

08003c4c <HAL_PCD_EP_SetStall>:
{
 8003c4c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003c4e:	6843      	ldr	r3, [r0, #4]
 8003c50:	f001 050f 	and.w	r5, r1, #15
 8003c54:	429d      	cmp	r5, r3
{
 8003c56:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003c58:	d82d      	bhi.n	8003cb6 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8003c5a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003c5e:	f04f 021c 	mov.w	r2, #28
 8003c62:	d01e      	beq.n	8003ca2 <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8003c64:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003c68:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8003c6c:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003c6e:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8003c70:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 8003c74:	2201      	movs	r2, #1
 8003c76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8003c78:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8003c7a:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8003c7e:	4291      	cmp	r1, r2
 8003c80:	d01b      	beq.n	8003cba <HAL_PCD_EP_SetStall+0x6e>
 8003c82:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c86:	4619      	mov	r1, r3
 8003c88:	6820      	ldr	r0, [r4, #0]
 8003c8a:	f004 f82d 	bl	8007ce8 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8003c8e:	b925      	cbnz	r5, 8003c9a <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c90:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003c94:	6820      	ldr	r0, [r4, #0]
 8003c96:	f004 f8f5 	bl	8007e84 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003ca0:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003ca2:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8003ca6:	fb02 0101 	mla	r1, r2, r1, r0
 8003caa:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003cac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003cb0:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8003cb4:	e7de      	b.n	8003c74 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8003cb6:	2001      	movs	r0, #1
 8003cb8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003cba:	2002      	movs	r0, #2
}
 8003cbc:	bd38      	pop	{r3, r4, r5, pc}

08003cbe <HAL_PCD_EP_ClrStall>:
{
 8003cbe:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cc0:	6843      	ldr	r3, [r0, #4]
 8003cc2:	f001 020f 	and.w	r2, r1, #15
 8003cc6:	429a      	cmp	r2, r3
{
 8003cc8:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cca:	d826      	bhi.n	8003d1a <HAL_PCD_EP_ClrStall+0x5c>
 8003ccc:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003cce:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003cd2:	fb03 0102 	mla	r1, r3, r2, r0
 8003cd6:	bf19      	ittee	ne
 8003cd8:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003cda:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003cde:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8003ce2:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8003ce6:	bf14      	ite	ne
 8003ce8:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003cea:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8003cec:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003cf0:	bf14      	ite	ne
 8003cf2:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 8003cf6:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003cfa:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8003cfc:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003cfe:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d00b      	beq.n	8003d1e <HAL_PCD_EP_ClrStall+0x60>
 8003d06:	2301      	movs	r3, #1
 8003d08:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d0c:	6820      	ldr	r0, [r4, #0]
 8003d0e:	f004 f818 	bl	8007d42 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d12:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003d16:	4628      	mov	r0, r5
 8003d18:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003d1e:	2002      	movs	r0, #2
}
 8003d20:	bd38      	pop	{r3, r4, r5, pc}

08003d22 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d22:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d24:	6804      	ldr	r4, [r0, #0]
 8003d26:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003d28:	b921      	cbnz	r1, 8003d34 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d2e:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003d30:	2000      	movs	r0, #0
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003d36:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d38:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	1c46      	adds	r6, r0, #1
 8003d40:	b2c0      	uxtb	r0, r0
 8003d42:	4285      	cmp	r5, r0
 8003d44:	d806      	bhi.n	8003d54 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d46:	313f      	adds	r1, #63	; 0x3f
 8003d48:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003d4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d50:	6063      	str	r3, [r4, #4]
 8003d52:	e7ed      	b.n	8003d30 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d54:	3040      	adds	r0, #64	; 0x40
 8003d56:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003d5a:	6840      	ldr	r0, [r0, #4]
 8003d5c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003d60:	4630      	mov	r0, r6
 8003d62:	e7ec      	b.n	8003d3e <HAL_PCDEx_SetTxFiFo+0x1c>

08003d64 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003d64:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003d66:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003d68:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003d6a:	4770      	bx	lr

08003d6c <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d6c:	6802      	ldr	r2, [r0, #0]
{
 8003d6e:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8003d70:	2101      	movs	r1, #1
 8003d72:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003d76:	2000      	movs	r0, #0
 8003d78:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d7c:	6993      	ldr	r3, [r2, #24]
 8003d7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d82:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d84:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003d86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d8a:	f043 0303 	orr.w	r3, r3, #3
 8003d8e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003d90:	4770      	bx	lr

08003d92 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d92:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8003d94:	2301      	movs	r3, #1
 8003d96:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8003d9a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003d9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da0:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8003da2:	2000      	movs	r0, #0
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003da8:	4b07      	ldr	r3, [pc, #28]	; (8003dc8 <HAL_PWREx_GetVoltageRange+0x20>)
 8003daa:	6818      	ldr	r0, [r3, #0]
 8003dac:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003db0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003db4:	d007      	beq.n	8003dc6 <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dba:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003dbe:	bf14      	ite	ne
 8003dc0:	f44f 7000 	movne.w	r0, #512	; 0x200
 8003dc4:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003dc6:	4770      	bx	lr
 8003dc8:	40007000 	.word	0x40007000

08003dcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dcc:	4b29      	ldr	r3, [pc, #164]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa8>)

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dce:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003dd0:	bb28      	cbnz	r0, 8003e1e <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dd2:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003dd6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dda:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003dde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003de6:	d119      	bne.n	8003e1c <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df2:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003df4:	4a20      	ldr	r2, [pc, #128]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003df6:	6811      	ldr	r1, [r2, #0]
 8003df8:	2232      	movs	r2, #50	; 0x32
 8003dfa:	434a      	muls	r2, r1
 8003dfc:	491f      	ldr	r1, [pc, #124]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003dfe:	fbb2 f2f1 	udiv	r2, r2, r1
 8003e02:	4619      	mov	r1, r3
 8003e04:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e06:	6958      	ldr	r0, [r3, #20]
 8003e08:	0540      	lsls	r0, r0, #21
 8003e0a:	d500      	bpl.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x42>
 8003e0c:	b922      	cbnz	r2, 8003e18 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e0e:	694b      	ldr	r3, [r1, #20]
 8003e10:	055b      	lsls	r3, r3, #21
 8003e12:	d52d      	bpl.n	8003e70 <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 8003e14:	2003      	movs	r0, #3
 8003e16:	4770      	bx	lr
        wait_loop_index--;
 8003e18:	3a01      	subs	r2, #1
 8003e1a:	e7f4      	b.n	8003e06 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003e1c:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e1e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003e22:	d120      	bne.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e24:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003e28:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e2c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003e30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e38:	d11a      	bne.n	8003e70 <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003e40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e44:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e46:	4a0c      	ldr	r2, [pc, #48]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003e48:	6811      	ldr	r1, [r2, #0]
 8003e4a:	2232      	movs	r2, #50	; 0x32
 8003e4c:	434a      	muls	r2, r1
 8003e4e:	490b      	ldr	r1, [pc, #44]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003e50:	fbb2 f2f1 	udiv	r2, r2, r1
 8003e54:	4619      	mov	r1, r3
 8003e56:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e58:	6958      	ldr	r0, [r3, #20]
 8003e5a:	0540      	lsls	r0, r0, #21
 8003e5c:	d5d7      	bpl.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x42>
 8003e5e:	2a00      	cmp	r2, #0
 8003e60:	d0d5      	beq.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 8003e62:	3a01      	subs	r2, #1
 8003e64:	e7f8      	b.n	8003e58 <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e66:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003e6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e6e:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e70:	2000      	movs	r0, #0
}
 8003e72:	4770      	bx	lr
 8003e74:	40007000 	.word	0x40007000
 8003e78:	20000a50 	.word	0x20000a50
 8003e7c:	000f4240 	.word	0x000f4240

08003e80 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003e80:	4a02      	ldr	r2, [pc, #8]	; (8003e8c <HAL_PWREx_EnableVddUSB+0xc>)
 8003e82:	6853      	ldr	r3, [r2, #4]
 8003e84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e88:	6053      	str	r3, [r2, #4]
 8003e8a:	4770      	bx	lr
 8003e8c:	40007000 	.word	0x40007000

08003e90 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003e90:	4a02      	ldr	r2, [pc, #8]	; (8003e9c <HAL_PWREx_EnableVddIO2+0xc>)
 8003e92:	6853      	ldr	r3, [r2, #4]
 8003e94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e98:	6053      	str	r3, [r2, #4]
 8003e9a:	4770      	bx	lr
 8003e9c:	40007000 	.word	0x40007000

08003ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ea2:	4d1c      	ldr	r5, [pc, #112]	; (8003f14 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8003ea4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ea6:	00da      	lsls	r2, r3, #3
{
 8003ea8:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003eaa:	d518      	bpl.n	8003ede <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003eac:	f7ff ff7c 	bl	8003da8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003eb0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003eb4:	d123      	bne.n	8003efe <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003eb6:	2c80      	cmp	r4, #128	; 0x80
 8003eb8:	d928      	bls.n	8003f0c <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003eba:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ebc:	bf8c      	ite	hi
 8003ebe:	2002      	movhi	r0, #2
 8003ec0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003ec2:	4a15      	ldr	r2, [pc, #84]	; (8003f18 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8003ec4:	6813      	ldr	r3, [r2, #0]
 8003ec6:	f023 030f 	bic.w	r3, r3, #15
 8003eca:	4303      	orrs	r3, r0
 8003ecc:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ece:	6813      	ldr	r3, [r2, #0]
 8003ed0:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003ed4:	1a18      	subs	r0, r3, r0
 8003ed6:	bf18      	it	ne
 8003ed8:	2001      	movne	r0, #1
 8003eda:	b003      	add	sp, #12
 8003edc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ede:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	65ab      	str	r3, [r5, #88]	; 0x58
 8003ee6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003ef0:	f7ff ff5a 	bl	8003da8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ef4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efa:	65ab      	str	r3, [r5, #88]	; 0x58
 8003efc:	e7d8      	b.n	8003eb0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8003efe:	2c7f      	cmp	r4, #127	; 0x7f
 8003f00:	d806      	bhi.n	8003f10 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8003f02:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003f06:	4258      	negs	r0, r3
 8003f08:	4158      	adcs	r0, r3
 8003f0a:	e7da      	b.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	e7d8      	b.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f10:	2002      	movs	r0, #2
 8003f12:	e7d6      	b.n	8003ec2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003f14:	40021000 	.word	0x40021000
 8003f18:	40022000 	.word	0x40022000

08003f1c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f1c:	4b23      	ldr	r3, [pc, #140]	; (8003fac <HAL_RCC_GetSysClockFreq+0x90>)
 8003f1e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f20:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f22:	f012 020c 	ands.w	r2, r2, #12
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_GetSysClockFreq+0x18>
 8003f28:	2a0c      	cmp	r2, #12
 8003f2a:	d115      	bne.n	8003f58 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f2c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f30:	2901      	cmp	r1, #1
 8003f32:	d118      	bne.n	8003f66 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f34:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003f36:	481e      	ldr	r0, [pc, #120]	; (8003fb0 <HAL_RCC_GetSysClockFreq+0x94>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f38:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f3a:	bf55      	itete	pl
 8003f3c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f40:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f42:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f46:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003f4a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f4e:	b112      	cbz	r2, 8003f56 <HAL_RCC_GetSysClockFreq+0x3a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f50:	2a0c      	cmp	r2, #12
 8003f52:	d009      	beq.n	8003f68 <HAL_RCC_GetSysClockFreq+0x4c>
 8003f54:	2000      	movs	r0, #0
}
 8003f56:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f58:	2a04      	cmp	r2, #4
 8003f5a:	d024      	beq.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x8a>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f5c:	2a08      	cmp	r2, #8
 8003f5e:	4815      	ldr	r0, [pc, #84]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f60:	bf18      	it	ne
 8003f62:	2000      	movne	r0, #0
 8003f64:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f66:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f68:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f6a:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f6c:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f70:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 8003f74:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f76:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8003f7a:	d005      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x6c>
 8003f7c:	2903      	cmp	r1, #3
 8003f7e:	d003      	beq.n	8003f88 <HAL_RCC_GetSysClockFreq+0x6c>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f80:	68d9      	ldr	r1, [r3, #12]
 8003f82:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8003f86:	e003      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f88:	68d9      	ldr	r1, [r3, #12]
 8003f8a:	480a      	ldr	r0, [pc, #40]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f8c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f90:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f92:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f96:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003f9a:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f9c:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f9e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003fa0:	fbb0 f0f3 	udiv	r0, r0, r3
 8003fa4:	4770      	bx	lr
 8003fa6:	4803      	ldr	r0, [pc, #12]	; (8003fb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	080338b4 	.word	0x080338b4
 8003fb4:	00f42400 	.word	0x00f42400

08003fb8 <HAL_RCC_OscConfig>:
{
 8003fb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003fbc:	4605      	mov	r5, r0
 8003fbe:	b908      	cbnz	r0, 8003fc4 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8003fc0:	2001      	movs	r0, #1
 8003fc2:	e046      	b.n	8004052 <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc4:	4ca8      	ldr	r4, [pc, #672]	; (8004268 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fc6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc8:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fca:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fcc:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fce:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fd2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fd6:	d572      	bpl.n	80040be <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fd8:	b11e      	cbz	r6, 8003fe2 <HAL_RCC_OscConfig+0x2a>
 8003fda:	2e0c      	cmp	r6, #12
 8003fdc:	d151      	bne.n	8004082 <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fde:	2f01      	cmp	r7, #1
 8003fe0:	d14f      	bne.n	8004082 <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	0799      	lsls	r1, r3, #30
 8003fe6:	d502      	bpl.n	8003fee <HAL_RCC_OscConfig+0x36>
 8003fe8:	69ab      	ldr	r3, [r5, #24]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0e8      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	6a28      	ldr	r0, [r5, #32]
 8003ff2:	071a      	lsls	r2, r3, #28
 8003ff4:	bf56      	itet	pl
 8003ff6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003ffa:	6823      	ldrmi	r3, [r4, #0]
 8003ffc:	091b      	lsrpl	r3, r3, #4
 8003ffe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004002:	4283      	cmp	r3, r0
 8004004:	d228      	bcs.n	8004058 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004006:	f7ff ff4b 	bl	8003ea0 <RCC_SetFlashLatencyFromMSIRange>
 800400a:	2800      	cmp	r0, #0
 800400c:	d1d8      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	f043 0308 	orr.w	r3, r3, #8
 8004014:	6023      	str	r3, [r4, #0]
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	6a2a      	ldr	r2, [r5, #32]
 800401a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800401e:	4313      	orrs	r3, r2
 8004020:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004022:	6863      	ldr	r3, [r4, #4]
 8004024:	69ea      	ldr	r2, [r5, #28]
 8004026:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800402a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800402e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004030:	f7ff ff74 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8004034:	68a3      	ldr	r3, [r4, #8]
 8004036:	4a8d      	ldr	r2, [pc, #564]	; (800426c <HAL_RCC_OscConfig+0x2b4>)
 8004038:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800403c:	5cd3      	ldrb	r3, [r2, r3]
 800403e:	f003 031f 	and.w	r3, r3, #31
 8004042:	40d8      	lsrs	r0, r3
 8004044:	4b8a      	ldr	r3, [pc, #552]	; (8004270 <HAL_RCC_OscConfig+0x2b8>)
 8004046:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004048:	2000      	movs	r0, #0
 800404a:	f7fc ffb9 	bl	8000fc0 <HAL_InitTick>
        if(status != HAL_OK)
 800404e:	2800      	cmp	r0, #0
 8004050:	d035      	beq.n	80040be <HAL_RCC_OscConfig+0x106>
}
 8004052:	b003      	add	sp, #12
 8004054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	f043 0308 	orr.w	r3, r3, #8
 800405e:	6023      	str	r3, [r4, #0]
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004066:	4303      	orrs	r3, r0
 8004068:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800406a:	6863      	ldr	r3, [r4, #4]
 800406c:	69ea      	ldr	r2, [r5, #28]
 800406e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004072:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004076:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004078:	f7ff ff12 	bl	8003ea0 <RCC_SetFlashLatencyFromMSIRange>
 800407c:	2800      	cmp	r0, #0
 800407e:	d0d7      	beq.n	8004030 <HAL_RCC_OscConfig+0x78>
 8004080:	e79e      	b.n	8003fc0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004082:	69ab      	ldr	r3, [r5, #24]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d03a      	beq.n	80040fe <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	f043 0301 	orr.w	r3, r3, #1
 800408e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004090:	f7fc ffc6 	bl	8001020 <HAL_GetTick>
 8004094:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004096:	6823      	ldr	r3, [r4, #0]
 8004098:	079b      	lsls	r3, r3, #30
 800409a:	d528      	bpl.n	80040ee <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	f043 0308 	orr.w	r3, r3, #8
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	6823      	ldr	r3, [r4, #0]
 80040a6:	6a2a      	ldr	r2, [r5, #32]
 80040a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040ac:	4313      	orrs	r3, r2
 80040ae:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040b0:	6863      	ldr	r3, [r4, #4]
 80040b2:	69ea      	ldr	r2, [r5, #28]
 80040b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040bc:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040be:	682b      	ldr	r3, [r5, #0]
 80040c0:	07d9      	lsls	r1, r3, #31
 80040c2:	d42d      	bmi.n	8004120 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c4:	682b      	ldr	r3, [r5, #0]
 80040c6:	079a      	lsls	r2, r3, #30
 80040c8:	d46b      	bmi.n	80041a2 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ca:	682b      	ldr	r3, [r5, #0]
 80040cc:	0719      	lsls	r1, r3, #28
 80040ce:	f100 80a0 	bmi.w	8004212 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d2:	682b      	ldr	r3, [r5, #0]
 80040d4:	075a      	lsls	r2, r3, #29
 80040d6:	f100 80cd 	bmi.w	8004274 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	069a      	lsls	r2, r3, #26
 80040de:	f100 8136 	bmi.w	800434e <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f040 815c 	bne.w	80043a2 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80040ea:	2000      	movs	r0, #0
 80040ec:	e7b1      	b.n	8004052 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040ee:	f7fc ff97 	bl	8001020 <HAL_GetTick>
 80040f2:	eba0 0008 	sub.w	r0, r0, r8
 80040f6:	2802      	cmp	r0, #2
 80040f8:	d9cd      	bls.n	8004096 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 80040fa:	2003      	movs	r0, #3
 80040fc:	e7a9      	b.n	8004052 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 80040fe:	6823      	ldr	r3, [r4, #0]
 8004100:	f023 0301 	bic.w	r3, r3, #1
 8004104:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004106:	f7fc ff8b 	bl	8001020 <HAL_GetTick>
 800410a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	0798      	lsls	r0, r3, #30
 8004110:	d5d5      	bpl.n	80040be <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004112:	f7fc ff85 	bl	8001020 <HAL_GetTick>
 8004116:	eba0 0008 	sub.w	r0, r0, r8
 800411a:	2802      	cmp	r0, #2
 800411c:	d9f6      	bls.n	800410c <HAL_RCC_OscConfig+0x154>
 800411e:	e7ec      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004120:	2e08      	cmp	r6, #8
 8004122:	d003      	beq.n	800412c <HAL_RCC_OscConfig+0x174>
 8004124:	2e0c      	cmp	r6, #12
 8004126:	d108      	bne.n	800413a <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8004128:	2f03      	cmp	r7, #3
 800412a:	d106      	bne.n	800413a <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	039b      	lsls	r3, r3, #14
 8004130:	d5c8      	bpl.n	80040c4 <HAL_RCC_OscConfig+0x10c>
 8004132:	686b      	ldr	r3, [r5, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1c5      	bne.n	80040c4 <HAL_RCC_OscConfig+0x10c>
 8004138:	e742      	b.n	8003fc0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800413a:	686b      	ldr	r3, [r5, #4]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d110      	bne.n	8004164 <HAL_RCC_OscConfig+0x1ac>
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004148:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800414a:	f7fc ff69 	bl	8001020 <HAL_GetTick>
 800414e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	0398      	lsls	r0, r3, #14
 8004154:	d4b6      	bmi.n	80040c4 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004156:	f7fc ff63 	bl	8001020 <HAL_GetTick>
 800415a:	eba0 0008 	sub.w	r0, r0, r8
 800415e:	2864      	cmp	r0, #100	; 0x64
 8004160:	d9f6      	bls.n	8004150 <HAL_RCC_OscConfig+0x198>
 8004162:	e7ca      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004168:	d104      	bne.n	8004174 <HAL_RCC_OscConfig+0x1bc>
 800416a:	6823      	ldr	r3, [r4, #0]
 800416c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004170:	6023      	str	r3, [r4, #0]
 8004172:	e7e6      	b.n	8004142 <HAL_RCC_OscConfig+0x18a>
 8004174:	6822      	ldr	r2, [r4, #0]
 8004176:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800417a:	6022      	str	r2, [r4, #0]
 800417c:	6822      	ldr	r2, [r4, #0]
 800417e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004182:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e0      	bne.n	800414a <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8004188:	f7fc ff4a 	bl	8001020 <HAL_GetTick>
 800418c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	0399      	lsls	r1, r3, #14
 8004192:	d597      	bpl.n	80040c4 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004194:	f7fc ff44 	bl	8001020 <HAL_GetTick>
 8004198:	eba0 0008 	sub.w	r0, r0, r8
 800419c:	2864      	cmp	r0, #100	; 0x64
 800419e:	d9f6      	bls.n	800418e <HAL_RCC_OscConfig+0x1d6>
 80041a0:	e7ab      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041a2:	2e04      	cmp	r6, #4
 80041a4:	d003      	beq.n	80041ae <HAL_RCC_OscConfig+0x1f6>
 80041a6:	2e0c      	cmp	r6, #12
 80041a8:	d110      	bne.n	80041cc <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 80041aa:	2f02      	cmp	r7, #2
 80041ac:	d10e      	bne.n	80041cc <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041ae:	6823      	ldr	r3, [r4, #0]
 80041b0:	055a      	lsls	r2, r3, #21
 80041b2:	d503      	bpl.n	80041bc <HAL_RCC_OscConfig+0x204>
 80041b4:	68eb      	ldr	r3, [r5, #12]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f43f af02 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041bc:	6863      	ldr	r3, [r4, #4]
 80041be:	692a      	ldr	r2, [r5, #16]
 80041c0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041c4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80041c8:	6063      	str	r3, [r4, #4]
 80041ca:	e77e      	b.n	80040ca <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041cc:	68eb      	ldr	r3, [r5, #12]
 80041ce:	b17b      	cbz	r3, 80041f0 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 80041d0:	6823      	ldr	r3, [r4, #0]
 80041d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80041d8:	f7fc ff22 	bl	8001020 <HAL_GetTick>
 80041dc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	055b      	lsls	r3, r3, #21
 80041e2:	d4eb      	bmi.n	80041bc <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041e4:	f7fc ff1c 	bl	8001020 <HAL_GetTick>
 80041e8:	1bc0      	subs	r0, r0, r7
 80041ea:	2802      	cmp	r0, #2
 80041ec:	d9f7      	bls.n	80041de <HAL_RCC_OscConfig+0x226>
 80041ee:	e784      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 80041f0:	6823      	ldr	r3, [r4, #0]
 80041f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80041f8:	f7fc ff12 	bl	8001020 <HAL_GetTick>
 80041fc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	0558      	lsls	r0, r3, #21
 8004202:	f57f af62 	bpl.w	80040ca <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004206:	f7fc ff0b 	bl	8001020 <HAL_GetTick>
 800420a:	1bc0      	subs	r0, r0, r7
 800420c:	2802      	cmp	r0, #2
 800420e:	d9f6      	bls.n	80041fe <HAL_RCC_OscConfig+0x246>
 8004210:	e773      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004212:	696b      	ldr	r3, [r5, #20]
 8004214:	b19b      	cbz	r3, 800423e <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8004216:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004222:	f7fc fefd 	bl	8001020 <HAL_GetTick>
 8004226:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004228:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800422c:	079b      	lsls	r3, r3, #30
 800422e:	f53f af50 	bmi.w	80040d2 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004232:	f7fc fef5 	bl	8001020 <HAL_GetTick>
 8004236:	1bc0      	subs	r0, r0, r7
 8004238:	2802      	cmp	r0, #2
 800423a:	d9f5      	bls.n	8004228 <HAL_RCC_OscConfig+0x270>
 800423c:	e75d      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 800423e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004242:	f023 0301 	bic.w	r3, r3, #1
 8004246:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800424a:	f7fc fee9 	bl	8001020 <HAL_GetTick>
 800424e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004250:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004254:	0798      	lsls	r0, r3, #30
 8004256:	f57f af3c 	bpl.w	80040d2 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800425a:	f7fc fee1 	bl	8001020 <HAL_GetTick>
 800425e:	1bc0      	subs	r0, r0, r7
 8004260:	2802      	cmp	r0, #2
 8004262:	d9f5      	bls.n	8004250 <HAL_RCC_OscConfig+0x298>
 8004264:	e749      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
 8004266:	bf00      	nop
 8004268:	40021000 	.word	0x40021000
 800426c:	0803389b 	.word	0x0803389b
 8004270:	20000a50 	.word	0x20000a50
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004274:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004276:	00d9      	lsls	r1, r3, #3
 8004278:	d429      	bmi.n	80042ce <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	65a3      	str	r3, [r4, #88]	; 0x58
 8004282:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004288:	9301      	str	r3, [sp, #4]
 800428a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800428c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004290:	4f71      	ldr	r7, [pc, #452]	; (8004458 <HAL_RCC_OscConfig+0x4a0>)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	05da      	lsls	r2, r3, #23
 8004296:	d51d      	bpl.n	80042d4 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004298:	68ab      	ldr	r3, [r5, #8]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d12b      	bne.n	80042f6 <HAL_RCC_OscConfig+0x33e>
 800429e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80042a2:	f043 0301 	orr.w	r3, r3, #1
 80042a6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80042aa:	f7fc feb9 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ae:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80042b2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042b4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80042b8:	0798      	lsls	r0, r3, #30
 80042ba:	d542      	bpl.n	8004342 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 80042bc:	f1b8 0f00 	cmp.w	r8, #0
 80042c0:	f43f af0b 	beq.w	80040da <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ca:	65a3      	str	r3, [r4, #88]	; 0x58
 80042cc:	e705      	b.n	80040da <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 80042ce:	f04f 0800 	mov.w	r8, #0
 80042d2:	e7dd      	b.n	8004290 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042da:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80042dc:	f7fc fea0 	bl	8001020 <HAL_GetTick>
 80042e0:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	05db      	lsls	r3, r3, #23
 80042e6:	d4d7      	bmi.n	8004298 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042e8:	f7fc fe9a 	bl	8001020 <HAL_GetTick>
 80042ec:	eba0 0009 	sub.w	r0, r0, r9
 80042f0:	2802      	cmp	r0, #2
 80042f2:	d9f6      	bls.n	80042e2 <HAL_RCC_OscConfig+0x32a>
 80042f4:	e701      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f6:	2b05      	cmp	r3, #5
 80042f8:	d106      	bne.n	8004308 <HAL_RCC_OscConfig+0x350>
 80042fa:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80042fe:	f043 0304 	orr.w	r3, r3, #4
 8004302:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004306:	e7ca      	b.n	800429e <HAL_RCC_OscConfig+0x2e6>
 8004308:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8004314:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004318:	f022 0204 	bic.w	r2, r2, #4
 800431c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1c2      	bne.n	80042aa <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 8004324:	f7fc fe7c 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004328:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800432c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800432e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004332:	0799      	lsls	r1, r3, #30
 8004334:	d5c2      	bpl.n	80042bc <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004336:	f7fc fe73 	bl	8001020 <HAL_GetTick>
 800433a:	1bc0      	subs	r0, r0, r7
 800433c:	4548      	cmp	r0, r9
 800433e:	d9f6      	bls.n	800432e <HAL_RCC_OscConfig+0x376>
 8004340:	e6db      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004342:	f7fc fe6d 	bl	8001020 <HAL_GetTick>
 8004346:	1bc0      	subs	r0, r0, r7
 8004348:	4548      	cmp	r0, r9
 800434a:	d9b3      	bls.n	80042b4 <HAL_RCC_OscConfig+0x2fc>
 800434c:	e6d5      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800434e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004350:	b19b      	cbz	r3, 800437a <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 8004352:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800435e:	f7fc fe5f 	bl	8001020 <HAL_GetTick>
 8004362:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004364:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004368:	079b      	lsls	r3, r3, #30
 800436a:	f53f aeba 	bmi.w	80040e2 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800436e:	f7fc fe57 	bl	8001020 <HAL_GetTick>
 8004372:	1bc0      	subs	r0, r0, r7
 8004374:	2802      	cmp	r0, #2
 8004376:	d9f5      	bls.n	8004364 <HAL_RCC_OscConfig+0x3ac>
 8004378:	e6bf      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 800437a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004386:	f7fc fe4b 	bl	8001020 <HAL_GetTick>
 800438a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800438c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004390:	0798      	lsls	r0, r3, #30
 8004392:	f57f aea6 	bpl.w	80040e2 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004396:	f7fc fe43 	bl	8001020 <HAL_GetTick>
 800439a:	1bc0      	subs	r0, r0, r7
 800439c:	2802      	cmp	r0, #2
 800439e:	d9f5      	bls.n	800438c <HAL_RCC_OscConfig+0x3d4>
 80043a0:	e6ab      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043a2:	2e0c      	cmp	r6, #12
 80043a4:	f43f ae0c 	beq.w	8003fc0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043a8:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043b2:	d136      	bne.n	8004422 <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 80043b4:	f7fc fe34 	bl	8001020 <HAL_GetTick>
 80043b8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	0199      	lsls	r1, r3, #6
 80043be:	d42a      	bmi.n	8004416 <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043c0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80043c2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80043c4:	06db      	lsls	r3, r3, #27
 80043c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80043ca:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80043cc:	4313      	orrs	r3, r2
 80043ce:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80043d0:	3a01      	subs	r2, #1
 80043d2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80043d6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80043d8:	0852      	lsrs	r2, r2, #1
 80043da:	3a01      	subs	r2, #1
 80043dc:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80043e0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80043e2:	0852      	lsrs	r2, r2, #1
 80043e4:	3a01      	subs	r2, #1
 80043e6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80043ea:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f2:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043f4:	68e3      	ldr	r3, [r4, #12]
 80043f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043fa:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80043fc:	f7fc fe10 	bl	8001020 <HAL_GetTick>
 8004400:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	019a      	lsls	r2, r3, #6
 8004406:	f53f ae70 	bmi.w	80040ea <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440a:	f7fc fe09 	bl	8001020 <HAL_GetTick>
 800440e:	1b40      	subs	r0, r0, r5
 8004410:	2802      	cmp	r0, #2
 8004412:	d9f6      	bls.n	8004402 <HAL_RCC_OscConfig+0x44a>
 8004414:	e671      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004416:	f7fc fe03 	bl	8001020 <HAL_GetTick>
 800441a:	1b80      	subs	r0, r0, r6
 800441c:	2802      	cmp	r0, #2
 800441e:	d9cc      	bls.n	80043ba <HAL_RCC_OscConfig+0x402>
 8004420:	e66b      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004428:	bf02      	ittt	eq
 800442a:	68e3      	ldreq	r3, [r4, #12]
 800442c:	f023 0303 	biceq.w	r3, r3, #3
 8004430:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004432:	68e3      	ldr	r3, [r4, #12]
 8004434:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004438:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800443e:	f7fc fdef 	bl	8001020 <HAL_GetTick>
 8004442:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	019b      	lsls	r3, r3, #6
 8004448:	f57f ae4f 	bpl.w	80040ea <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444c:	f7fc fde8 	bl	8001020 <HAL_GetTick>
 8004450:	1b40      	subs	r0, r0, r5
 8004452:	2802      	cmp	r0, #2
 8004454:	d9f6      	bls.n	8004444 <HAL_RCC_OscConfig+0x48c>
 8004456:	e650      	b.n	80040fa <HAL_RCC_OscConfig+0x142>
 8004458:	40007000 	.word	0x40007000

0800445c <HAL_RCC_ClockConfig>:
{
 800445c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004460:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8004462:	4605      	mov	r5, r0
 8004464:	b910      	cbnz	r0, 800446c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004466:	2001      	movs	r0, #1
 8004468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800446c:	4a71      	ldr	r2, [pc, #452]	; (8004634 <HAL_RCC_ClockConfig+0x1d8>)
 800446e:	6813      	ldr	r3, [r2, #0]
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	428b      	cmp	r3, r1
 8004476:	d334      	bcc.n	80044e2 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004478:	6829      	ldr	r1, [r5, #0]
 800447a:	f011 0701 	ands.w	r7, r1, #1
 800447e:	d13b      	bne.n	80044f8 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	682a      	ldr	r2, [r5, #0]
 8004482:	0791      	lsls	r1, r2, #30
 8004484:	f140 80bb 	bpl.w	80045fe <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004488:	496b      	ldr	r1, [pc, #428]	; (8004638 <HAL_RCC_ClockConfig+0x1dc>)
 800448a:	68a8      	ldr	r0, [r5, #8]
 800448c:	688b      	ldr	r3, [r1, #8]
 800448e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004492:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004494:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004496:	4967      	ldr	r1, [pc, #412]	; (8004634 <HAL_RCC_ClockConfig+0x1d8>)
 8004498:	680b      	ldr	r3, [r1, #0]
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	429e      	cmp	r6, r3
 80044a0:	f0c0 80b5 	bcc.w	800460e <HAL_RCC_ClockConfig+0x1b2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	f012 0f04 	tst.w	r2, #4
 80044a8:	4c63      	ldr	r4, [pc, #396]	; (8004638 <HAL_RCC_ClockConfig+0x1dc>)
 80044aa:	f040 80bc 	bne.w	8004626 <HAL_RCC_ClockConfig+0x1ca>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ae:	0713      	lsls	r3, r2, #28
 80044b0:	d506      	bpl.n	80044c0 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044b2:	68a3      	ldr	r3, [r4, #8]
 80044b4:	692a      	ldr	r2, [r5, #16]
 80044b6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80044ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80044be:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044c0:	f7ff fd2c 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 80044c4:	68a3      	ldr	r3, [r4, #8]
 80044c6:	4a5d      	ldr	r2, [pc, #372]	; (800463c <HAL_RCC_ClockConfig+0x1e0>)
 80044c8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80044cc:	5cd3      	ldrb	r3, [r2, r3]
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	40d8      	lsrs	r0, r3
 80044d4:	4b5a      	ldr	r3, [pc, #360]	; (8004640 <HAL_RCC_ClockConfig+0x1e4>)
 80044d6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80044d8:	2000      	movs	r0, #0
}
 80044da:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80044de:	f7fc bd6f 	b.w	8000fc0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	6813      	ldr	r3, [r2, #0]
 80044e4:	f023 030f 	bic.w	r3, r3, #15
 80044e8:	430b      	orrs	r3, r1
 80044ea:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ec:	6813      	ldr	r3, [r2, #0]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	4299      	cmp	r1, r3
 80044f4:	d1b7      	bne.n	8004466 <HAL_RCC_ClockConfig+0xa>
 80044f6:	e7bf      	b.n	8004478 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044f8:	686b      	ldr	r3, [r5, #4]
 80044fa:	4c4f      	ldr	r4, [pc, #316]	; (8004638 <HAL_RCC_ClockConfig+0x1dc>)
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d168      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x176>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	019b      	lsls	r3, r3, #6
 8004504:	d5af      	bpl.n	8004466 <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004506:	68e3      	ldr	r3, [r4, #12]
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d11e      	bne.n	800454e <HAL_RCC_ClockConfig+0xf2>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004510:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004512:	4a4c      	ldr	r2, [pc, #304]	; (8004644 <HAL_RCC_ClockConfig+0x1e8>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004514:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004516:	bf55      	itete	pl
 8004518:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800451c:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800451e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004522:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 8004526:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800452a:	68e7      	ldr	r7, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800452c:	68e3      	ldr	r3, [r4, #12]
 800452e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004532:	1c58      	adds	r0, r3, #1
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004534:	f007 0303 	and.w	r3, r7, #3

  switch (pllsource)
 8004538:	2b02      	cmp	r3, #2
 800453a:	d00a      	beq.n	8004552 <HAL_RCC_ClockConfig+0xf6>
 800453c:	2b03      	cmp	r3, #3
 800453e:	d008      	beq.n	8004552 <HAL_RCC_ClockConfig+0xf6>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004540:	fbb2 f3f0 	udiv	r3, r2, r0
 8004544:	68e7      	ldr	r7, [r4, #12]
 8004546:	f3c7 2706 	ubfx	r7, r7, #8, #7
 800454a:	437b      	muls	r3, r7
 800454c:	e008      	b.n	8004560 <HAL_RCC_ClockConfig+0x104>
  uint32_t msirange = 0U;
 800454e:	2200      	movs	r2, #0
 8004550:	e7eb      	b.n	800452a <HAL_RCC_ClockConfig+0xce>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004552:	68e2      	ldr	r2, [r4, #12]
 8004554:	4b3c      	ldr	r3, [pc, #240]	; (8004648 <HAL_RCC_ClockConfig+0x1ec>)
 8004556:	fbb3 f3f0 	udiv	r3, r3, r0
 800455a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800455e:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004560:	68e2      	ldr	r2, [r4, #12]
 8004562:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8004566:	3201      	adds	r2, #1
 8004568:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 800456a:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800456e:	4a37      	ldr	r2, [pc, #220]	; (800464c <HAL_RCC_ClockConfig+0x1f0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d81c      	bhi.n	80045ae <HAL_RCC_ClockConfig+0x152>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004574:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004576:	68a3      	ldr	r3, [r4, #8]
 8004578:	686a      	ldr	r2, [r5, #4]
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	4313      	orrs	r3, r2
 8004580:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004582:	f7fc fd4d 	bl	8001020 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004586:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800458a:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800458c:	68a3      	ldr	r3, [r4, #8]
 800458e:	686a      	ldr	r2, [r5, #4]
 8004590:	f003 030c 	and.w	r3, r3, #12
 8004594:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004598:	f43f af72 	beq.w	8004480 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800459c:	f7fc fd40 	bl	8001020 <HAL_GetTick>
 80045a0:	eba0 0008 	sub.w	r0, r0, r8
 80045a4:	4548      	cmp	r0, r9
 80045a6:	d9f1      	bls.n	800458c <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 80045a8:	2003      	movs	r0, #3
}
 80045aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80045ae:	68a3      	ldr	r3, [r4, #8]
 80045b0:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80045b4:	d107      	bne.n	80045c6 <HAL_RCC_ClockConfig+0x16a>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045b6:	68a3      	ldr	r3, [r4, #8]
 80045b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045c0:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045c2:	2780      	movs	r7, #128	; 0x80
 80045c4:	e7d7      	b.n	8004576 <HAL_RCC_ClockConfig+0x11a>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80045c6:	0788      	lsls	r0, r1, #30
 80045c8:	d5d4      	bpl.n	8004574 <HAL_RCC_ClockConfig+0x118>
 80045ca:	68ab      	ldr	r3, [r5, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1d1      	bne.n	8004574 <HAL_RCC_ClockConfig+0x118>
 80045d0:	e7f1      	b.n	80045b6 <HAL_RCC_ClockConfig+0x15a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d10a      	bne.n	80045ec <HAL_RCC_ClockConfig+0x190>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045dc:	f43f af43 	beq.w	8004466 <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80045e0:	f7ff fc9c 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 80045e4:	4b19      	ldr	r3, [pc, #100]	; (800464c <HAL_RCC_ClockConfig+0x1f0>)
 80045e6:	4298      	cmp	r0, r3
 80045e8:	d9c4      	bls.n	8004574 <HAL_RCC_ClockConfig+0x118>
 80045ea:	e7e4      	b.n	80045b6 <HAL_RCC_ClockConfig+0x15a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ec:	b91b      	cbnz	r3, 80045f6 <HAL_RCC_ClockConfig+0x19a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	f013 0f02 	tst.w	r3, #2
 80045f4:	e7f2      	b.n	80045dc <HAL_RCC_ClockConfig+0x180>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80045fc:	e7ee      	b.n	80045dc <HAL_RCC_ClockConfig+0x180>
    if(hpre == RCC_SYSCLK_DIV2)
 80045fe:	2f80      	cmp	r7, #128	; 0x80
 8004600:	f47f af49 	bne.w	8004496 <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004604:	490c      	ldr	r1, [pc, #48]	; (8004638 <HAL_RCC_ClockConfig+0x1dc>)
 8004606:	688b      	ldr	r3, [r1, #8]
 8004608:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800460c:	e742      	b.n	8004494 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460e:	680b      	ldr	r3, [r1, #0]
 8004610:	f023 030f 	bic.w	r3, r3, #15
 8004614:	4333      	orrs	r3, r6
 8004616:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004618:	680b      	ldr	r3, [r1, #0]
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	429e      	cmp	r6, r3
 8004620:	f47f af21 	bne.w	8004466 <HAL_RCC_ClockConfig+0xa>
 8004624:	e73e      	b.n	80044a4 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004626:	68a3      	ldr	r3, [r4, #8]
 8004628:	68e9      	ldr	r1, [r5, #12]
 800462a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800462e:	430b      	orrs	r3, r1
 8004630:	60a3      	str	r3, [r4, #8]
 8004632:	e73c      	b.n	80044ae <HAL_RCC_ClockConfig+0x52>
 8004634:	40022000 	.word	0x40022000
 8004638:	40021000 	.word	0x40021000
 800463c:	0803389b 	.word	0x0803389b
 8004640:	20000a50 	.word	0x20000a50
 8004644:	080338b4 	.word	0x080338b4
 8004648:	00f42400 	.word	0x00f42400
 800464c:	04c4b400 	.word	0x04c4b400

08004650 <HAL_RCC_GetHCLKFreq>:
}
 8004650:	4b01      	ldr	r3, [pc, #4]	; (8004658 <HAL_RCC_GetHCLKFreq+0x8>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	20000a50 	.word	0x20000a50

0800465c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800465c:	4b05      	ldr	r3, [pc, #20]	; (8004674 <HAL_RCC_GetPCLK1Freq+0x18>)
 800465e:	4a06      	ldr	r2, [pc, #24]	; (8004678 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004666:	5cd3      	ldrb	r3, [r2, r3]
 8004668:	4a04      	ldr	r2, [pc, #16]	; (800467c <HAL_RCC_GetPCLK1Freq+0x20>)
 800466a:	6810      	ldr	r0, [r2, #0]
 800466c:	f003 031f 	and.w	r3, r3, #31
}
 8004670:	40d8      	lsrs	r0, r3
 8004672:	4770      	bx	lr
 8004674:	40021000 	.word	0x40021000
 8004678:	080338ab 	.word	0x080338ab
 800467c:	20000a50 	.word	0x20000a50

08004680 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004680:	4b05      	ldr	r3, [pc, #20]	; (8004698 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004682:	4a06      	ldr	r2, [pc, #24]	; (800469c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800468a:	5cd3      	ldrb	r3, [r2, r3]
 800468c:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800468e:	6810      	ldr	r0, [r2, #0]
 8004690:	f003 031f 	and.w	r3, r3, #31
}
 8004694:	40d8      	lsrs	r0, r3
 8004696:	4770      	bx	lr
 8004698:	40021000 	.word	0x40021000
 800469c:	080338ab 	.word	0x080338ab
 80046a0:	20000a50 	.word	0x20000a50

080046a4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046a6:	4b3f      	ldr	r3, [pc, #252]	; (80047a4 <RCCEx_PLLSAI1_Config+0x100>)
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	f012 0f03 	tst.w	r2, #3
{
 80046ae:	4605      	mov	r5, r0
 80046b0:	460e      	mov	r6, r1
 80046b2:	461c      	mov	r4, r3
 80046b4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046b6:	d022      	beq.n	80046fe <RCCEx_PLLSAI1_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	4283      	cmp	r3, r0
 80046c0:	d130      	bne.n	8004724 <RCCEx_PLLSAI1_Config+0x80>
       ||
 80046c2:	b37b      	cbz	r3, 8004724 <RCCEx_PLLSAI1_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046ca:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046cc:	f7fc fca8 	bl	8001020 <HAL_GetTick>
 80046d0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	011a      	lsls	r2, r3, #4
 80046d6:	d42e      	bmi.n	8004736 <RCCEx_PLLSAI1_Config+0x92>
 80046d8:	68af      	ldr	r7, [r5, #8]
 80046da:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046dc:	b396      	cbz	r6, 8004744 <RCCEx_PLLSAI1_Config+0xa0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046de:	2e01      	cmp	r6, #1
 80046e0:	d14c      	bne.n	800477c <RCCEx_PLLSAI1_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046e2:	6922      	ldr	r2, [r4, #16]
 80046e4:	4930      	ldr	r1, [pc, #192]	; (80047a8 <RCCEx_PLLSAI1_Config+0x104>)
 80046e6:	4011      	ands	r1, r2
 80046e8:	692a      	ldr	r2, [r5, #16]
 80046ea:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80046ee:	3b01      	subs	r3, #1
 80046f0:	0852      	lsrs	r2, r2, #1
 80046f2:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 80046f6:	3a01      	subs	r2, #1
 80046f8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80046fc:	e02d      	b.n	800475a <RCCEx_PLLSAI1_Config+0xb6>
    switch(PllSai1->PLLSAI1Source)
 80046fe:	2802      	cmp	r0, #2
 8004700:	d00c      	beq.n	800471c <RCCEx_PLLSAI1_Config+0x78>
 8004702:	2803      	cmp	r0, #3
 8004704:	d010      	beq.n	8004728 <RCCEx_PLLSAI1_Config+0x84>
 8004706:	2801      	cmp	r0, #1
 8004708:	d10c      	bne.n	8004724 <RCCEx_PLLSAI1_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	079f      	lsls	r7, r3, #30
 800470e:	d534      	bpl.n	800477a <RCCEx_PLLSAI1_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004710:	68e3      	ldr	r3, [r4, #12]
 8004712:	f023 0303 	bic.w	r3, r3, #3
 8004716:	4318      	orrs	r0, r3
 8004718:	60e0      	str	r0, [r4, #12]
 800471a:	e7d3      	b.n	80046c4 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004722:	d1f5      	bne.n	8004710 <RCCEx_PLLSAI1_Config+0x6c>
 8004724:	2001      	movs	r0, #1
 8004726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	0391      	lsls	r1, r2, #14
 800472c:	d4f0      	bmi.n	8004710 <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004734:	e7f5      	b.n	8004722 <RCCEx_PLLSAI1_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004736:	f7fc fc73 	bl	8001020 <HAL_GetTick>
 800473a:	1bc0      	subs	r0, r0, r7
 800473c:	2802      	cmp	r0, #2
 800473e:	d9c8      	bls.n	80046d2 <RCCEx_PLLSAI1_Config+0x2e>
        status = HAL_TIMEOUT;
 8004740:	2003      	movs	r0, #3
 8004742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004744:	68e8      	ldr	r0, [r5, #12]
 8004746:	6926      	ldr	r6, [r4, #16]
 8004748:	4918      	ldr	r1, [pc, #96]	; (80047ac <RCCEx_PLLSAI1_Config+0x108>)
 800474a:	06c2      	lsls	r2, r0, #27
 800474c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004750:	4031      	ands	r1, r6
 8004752:	430a      	orrs	r2, r1
 8004754:	3b01      	subs	r3, #1
 8004756:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800475a:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004762:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004764:	f7fc fc5c 	bl	8001020 <HAL_GetTick>
 8004768:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	d513      	bpl.n	8004798 <RCCEx_PLLSAI1_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004770:	6923      	ldr	r3, [r4, #16]
 8004772:	69aa      	ldr	r2, [r5, #24]
 8004774:	4313      	orrs	r3, r2
 8004776:	6123      	str	r3, [r4, #16]
 8004778:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800477a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800477c:	6921      	ldr	r1, [r4, #16]
 800477e:	4a0c      	ldr	r2, [pc, #48]	; (80047b0 <RCCEx_PLLSAI1_Config+0x10c>)
 8004780:	400a      	ands	r2, r1
 8004782:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004786:	3b01      	subs	r3, #1
 8004788:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800478c:	696a      	ldr	r2, [r5, #20]
 800478e:	0852      	lsrs	r2, r2, #1
 8004790:	3a01      	subs	r2, #1
 8004792:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004796:	e7e0      	b.n	800475a <RCCEx_PLLSAI1_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004798:	f7fc fc42 	bl	8001020 <HAL_GetTick>
 800479c:	1b80      	subs	r0, r0, r6
 800479e:	2802      	cmp	r0, #2
 80047a0:	d9e3      	bls.n	800476a <RCCEx_PLLSAI1_Config+0xc6>
 80047a2:	e7cd      	b.n	8004740 <RCCEx_PLLSAI1_Config+0x9c>
 80047a4:	40021000 	.word	0x40021000
 80047a8:	ff9f800f 	.word	0xff9f800f
 80047ac:	07ff800f 	.word	0x07ff800f
 80047b0:	f9ff800f 	.word	0xf9ff800f

080047b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047b6:	4b3f      	ldr	r3, [pc, #252]	; (80048b4 <RCCEx_PLLSAI2_Config+0x100>)
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	f012 0f03 	tst.w	r2, #3
{
 80047be:	4605      	mov	r5, r0
 80047c0:	460e      	mov	r6, r1
 80047c2:	461c      	mov	r4, r3
 80047c4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047c6:	d022      	beq.n	800480e <RCCEx_PLLSAI2_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	4283      	cmp	r3, r0
 80047d0:	d130      	bne.n	8004834 <RCCEx_PLLSAI2_Config+0x80>
       ||
 80047d2:	b37b      	cbz	r3, 8004834 <RCCEx_PLLSAI2_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047d4:	6823      	ldr	r3, [r4, #0]
 80047d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047da:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047dc:	f7fc fc20 	bl	8001020 <HAL_GetTick>
 80047e0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	009a      	lsls	r2, r3, #2
 80047e6:	d42e      	bmi.n	8004846 <RCCEx_PLLSAI2_Config+0x92>
 80047e8:	68af      	ldr	r7, [r5, #8]
 80047ea:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047ec:	b396      	cbz	r6, 8004854 <RCCEx_PLLSAI2_Config+0xa0>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80047ee:	2e01      	cmp	r6, #1
 80047f0:	d14c      	bne.n	800488c <RCCEx_PLLSAI2_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047f2:	6962      	ldr	r2, [r4, #20]
 80047f4:	4930      	ldr	r1, [pc, #192]	; (80048b8 <RCCEx_PLLSAI2_Config+0x104>)
 80047f6:	4011      	ands	r1, r2
 80047f8:	692a      	ldr	r2, [r5, #16]
 80047fa:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80047fe:	3b01      	subs	r3, #1
 8004800:	0852      	lsrs	r2, r2, #1
 8004802:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 8004806:	3a01      	subs	r2, #1
 8004808:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800480c:	e02d      	b.n	800486a <RCCEx_PLLSAI2_Config+0xb6>
    switch(PllSai2->PLLSAI2Source)
 800480e:	2802      	cmp	r0, #2
 8004810:	d00c      	beq.n	800482c <RCCEx_PLLSAI2_Config+0x78>
 8004812:	2803      	cmp	r0, #3
 8004814:	d010      	beq.n	8004838 <RCCEx_PLLSAI2_Config+0x84>
 8004816:	2801      	cmp	r0, #1
 8004818:	d10c      	bne.n	8004834 <RCCEx_PLLSAI2_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	079f      	lsls	r7, r3, #30
 800481e:	d534      	bpl.n	800488a <RCCEx_PLLSAI2_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004820:	68e3      	ldr	r3, [r4, #12]
 8004822:	f023 0303 	bic.w	r3, r3, #3
 8004826:	4318      	orrs	r0, r3
 8004828:	60e0      	str	r0, [r4, #12]
 800482a:	e7d3      	b.n	80047d4 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004832:	d1f5      	bne.n	8004820 <RCCEx_PLLSAI2_Config+0x6c>
 8004834:	2001      	movs	r0, #1
 8004836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	0391      	lsls	r1, r2, #14
 800483c:	d4f0      	bmi.n	8004820 <RCCEx_PLLSAI2_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004844:	e7f5      	b.n	8004832 <RCCEx_PLLSAI2_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004846:	f7fc fbeb 	bl	8001020 <HAL_GetTick>
 800484a:	1bc0      	subs	r0, r0, r7
 800484c:	2802      	cmp	r0, #2
 800484e:	d9c8      	bls.n	80047e2 <RCCEx_PLLSAI2_Config+0x2e>
        status = HAL_TIMEOUT;
 8004850:	2003      	movs	r0, #3
 8004852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004854:	68e8      	ldr	r0, [r5, #12]
 8004856:	6966      	ldr	r6, [r4, #20]
 8004858:	4918      	ldr	r1, [pc, #96]	; (80048bc <RCCEx_PLLSAI2_Config+0x108>)
 800485a:	06c2      	lsls	r2, r0, #27
 800485c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004860:	4031      	ands	r1, r6
 8004862:	430a      	orrs	r2, r1
 8004864:	3b01      	subs	r3, #1
 8004866:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800486a:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004872:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004874:	f7fc fbd4 	bl	8001020 <HAL_GetTick>
 8004878:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	d513      	bpl.n	80048a8 <RCCEx_PLLSAI2_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004880:	6963      	ldr	r3, [r4, #20]
 8004882:	69aa      	ldr	r2, [r5, #24]
 8004884:	4313      	orrs	r3, r2
 8004886:	6163      	str	r3, [r4, #20]
 8004888:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800488a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800488c:	6961      	ldr	r1, [r4, #20]
 800488e:	4a0c      	ldr	r2, [pc, #48]	; (80048c0 <RCCEx_PLLSAI2_Config+0x10c>)
 8004890:	400a      	ands	r2, r1
 8004892:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004896:	3b01      	subs	r3, #1
 8004898:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800489c:	696a      	ldr	r2, [r5, #20]
 800489e:	0852      	lsrs	r2, r2, #1
 80048a0:	3a01      	subs	r2, #1
 80048a2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80048a6:	e7e0      	b.n	800486a <RCCEx_PLLSAI2_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048a8:	f7fc fbba 	bl	8001020 <HAL_GetTick>
 80048ac:	1b80      	subs	r0, r0, r6
 80048ae:	2802      	cmp	r0, #2
 80048b0:	d9e3      	bls.n	800487a <RCCEx_PLLSAI2_Config+0xc6>
 80048b2:	e7cd      	b.n	8004850 <RCCEx_PLLSAI2_Config+0x9c>
 80048b4:	40021000 	.word	0x40021000
 80048b8:	ff9f800f 	.word	0xff9f800f
 80048bc:	07ff800f 	.word	0x07ff800f
 80048c0:	f9ff800f 	.word	0xf9ff800f

080048c4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80048c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048c8:	6805      	ldr	r5, [r0, #0]
 80048ca:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 80048ce:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048d0:	d023      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 80048d2:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80048d4:	2940      	cmp	r1, #64	; 0x40
 80048d6:	d014      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80048d8:	d804      	bhi.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80048da:	b1c1      	cbz	r1, 800490e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80048dc:	2920      	cmp	r1, #32
 80048de:	d02b      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = HAL_ERROR;
 80048e0:	2501      	movs	r5, #1
 80048e2:	e01a      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 80048e4:	2960      	cmp	r1, #96	; 0x60
 80048e6:	d001      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x28>
 80048e8:	2980      	cmp	r1, #128	; 0x80
 80048ea:	d1f9      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048ec:	4a4e      	ldr	r2, [pc, #312]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048ee:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80048f0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80048f4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80048f8:	430b      	orrs	r3, r1
 80048fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80048fe:	2500      	movs	r5, #0
 8004900:	e00b      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004902:	4a49      	ldr	r2, [pc, #292]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004904:	68d3      	ldr	r3, [r2, #12]
 8004906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800490a:	60d3      	str	r3, [r2, #12]
      break;
 800490c:	e7ee      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x28>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800490e:	3004      	adds	r0, #4
 8004910:	f7ff fec8 	bl	80046a4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004914:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004916:	2800      	cmp	r0, #0
 8004918:	d0e8      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x28>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	04db      	lsls	r3, r3, #19
 800491e:	d509      	bpl.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004920:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004922:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004926:	d014      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8004928:	d80b      	bhi.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800492a:	b1c1      	cbz	r1, 800495e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800492c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004930:	d071      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x152>
      ret = HAL_ERROR;
 8004932:	2501      	movs	r5, #1
 8004934:	462e      	mov	r6, r5
 8004936:	e021      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004938:	2100      	movs	r1, #0
 800493a:	3020      	adds	r0, #32
 800493c:	f7ff ff3a 	bl	80047b4 <RCCEx_PLLSAI2_Config>
 8004940:	e7e8      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004942:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8004946:	d002      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004948:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800494c:	d1f1      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800494e:	462e      	mov	r6, r5
 8004950:	e009      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004952:	4a35      	ldr	r2, [pc, #212]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004954:	68d3      	ldr	r3, [r2, #12]
 8004956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495a:	60d3      	str	r3, [r2, #12]
 800495c:	e7f7      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800495e:	1d20      	adds	r0, r4, #4
 8004960:	f7ff fea0 	bl	80046a4 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004964:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004966:	2e00      	cmp	r6, #0
 8004968:	d15b      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800496a:	4a2f      	ldr	r2, [pc, #188]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800496c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800496e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004972:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004976:	430b      	orrs	r3, r1
 8004978:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	039f      	lsls	r7, r3, #14
 8004980:	d565      	bpl.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004982:	4f29      	ldr	r7, [pc, #164]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004984:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004986:	00d8      	lsls	r0, r3, #3
 8004988:	f140 81f3 	bpl.w	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    FlagStatus       pwrclkchanged = RESET;
 800498c:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004990:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004a2c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004994:	f8d9 3000 	ldr.w	r3, [r9]
 8004998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499c:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 80049a0:	f7fc fb3e 	bl	8001020 <HAL_GetTick>
 80049a4:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049a6:	f8d9 3000 	ldr.w	r3, [r9]
 80049aa:	05d9      	lsls	r1, r3, #23
 80049ac:	d540      	bpl.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 80049ae:	2e00      	cmp	r6, #0
 80049b0:	f040 8197 	bne.w	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049b8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80049bc:	d015      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x126>
 80049be:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d011      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x126>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ca:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80049ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80049d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80049e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049ea:	07da      	lsls	r2, r3, #31
 80049ec:	d509      	bpl.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x13e>
        tickstart = HAL_GetTick();
 80049ee:	f7fc fb17 	bl	8001020 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f2:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80049f6:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049fc:	079b      	lsls	r3, r3, #30
 80049fe:	f140 8168 	bpl.w	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a06:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8004a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a14:	e014      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a16:	2100      	movs	r1, #0
 8004a18:	f104 0020 	add.w	r0, r4, #32
 8004a1c:	f7ff feca 	bl	80047b4 <RCCEx_PLLSAI2_Config>
 8004a20:	e7a0      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004a22:	4635      	mov	r5, r6
 8004a24:	e7aa      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a30:	f7fc faf6 	bl	8001020 <HAL_GetTick>
 8004a34:	eba0 000a 	sub.w	r0, r0, sl
 8004a38:	2802      	cmp	r0, #2
 8004a3a:	d9b4      	bls.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 8004a3c:	2503      	movs	r5, #3
 8004a3e:	462e      	mov	r6, r5
    if(pwrclkchanged == SET)
 8004a40:	f1b8 0f00 	cmp.w	r8, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	07df      	lsls	r7, r3, #31
 8004a52:	d508      	bpl.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a54:	49c0      	ldr	r1, [pc, #768]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a56:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004a58:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a5c:	f022 0203 	bic.w	r2, r2, #3
 8004a60:	4302      	orrs	r2, r0
 8004a62:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a66:	0798      	lsls	r0, r3, #30
 8004a68:	d508      	bpl.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a6a:	49bb      	ldr	r1, [pc, #748]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a6c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004a6e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a72:	f022 020c 	bic.w	r2, r2, #12
 8004a76:	4302      	orrs	r2, r0
 8004a78:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a7c:	0759      	lsls	r1, r3, #29
 8004a7e:	d508      	bpl.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a80:	49b5      	ldr	r1, [pc, #724]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a82:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004a84:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a88:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004a8c:	4302      	orrs	r2, r0
 8004a8e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a92:	071a      	lsls	r2, r3, #28
 8004a94:	d508      	bpl.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a96:	49b0      	ldr	r1, [pc, #704]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a98:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004a9a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a9e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004aa2:	4302      	orrs	r2, r0
 8004aa4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aa8:	06df      	lsls	r7, r3, #27
 8004aaa:	d508      	bpl.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004aac:	49aa      	ldr	r1, [pc, #680]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004aae:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004ab0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ab4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ab8:	4302      	orrs	r2, r0
 8004aba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004abe:	0698      	lsls	r0, r3, #26
 8004ac0:	d508      	bpl.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ac2:	49a5      	ldr	r1, [pc, #660]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004ac4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004ac6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004aca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ace:	4302      	orrs	r2, r0
 8004ad0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ad4:	0599      	lsls	r1, r3, #22
 8004ad6:	d508      	bpl.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ad8:	499f      	ldr	r1, [pc, #636]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004ada:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004adc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ae0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004ae4:	4302      	orrs	r2, r0
 8004ae6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004aea:	055a      	lsls	r2, r3, #21
 8004aec:	d508      	bpl.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aee:	499a      	ldr	r1, [pc, #616]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004af0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004af2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004af6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004afa:	4302      	orrs	r2, r0
 8004afc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b00:	065f      	lsls	r7, r3, #25
 8004b02:	d508      	bpl.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b04:	4994      	ldr	r1, [pc, #592]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b08:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b0c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004b10:	4302      	orrs	r2, r0
 8004b12:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b16:	0618      	lsls	r0, r3, #24
 8004b18:	d508      	bpl.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b1a:	498f      	ldr	r1, [pc, #572]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b1e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b22:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004b26:	4302      	orrs	r2, r0
 8004b28:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b2c:	05d9      	lsls	r1, r3, #23
 8004b2e:	d508      	bpl.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b30:	4989      	ldr	r1, [pc, #548]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b32:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004b34:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b38:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004b3c:	4302      	orrs	r2, r0
 8004b3e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b42:	02da      	lsls	r2, r3, #11
 8004b44:	d508      	bpl.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x294>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b46:	4984      	ldr	r1, [pc, #528]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b48:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004b4a:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004b4e:	f022 0203 	bic.w	r2, r2, #3
 8004b52:	4302      	orrs	r2, r0
 8004b54:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b58:	049f      	lsls	r7, r3, #18
 8004b5a:	d510      	bpl.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b5c:	4a7e      	ldr	r2, [pc, #504]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b5e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004b60:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b64:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004b68:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b6a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b6e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b72:	f040 80b8 	bne.w	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b76:	68d3      	ldr	r3, [r2, #12]
 8004b78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b7c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b7e:	6823      	ldr	r3, [r4, #0]
 8004b80:	0318      	lsls	r0, r3, #12
 8004b82:	d50f      	bpl.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b84:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004b86:	4b74      	ldr	r3, [pc, #464]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b88:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004b8c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004b90:	f040 80b6 	bne.w	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8004b94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b98:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b9c:	68da      	ldr	r2, [r3, #12]
 8004b9e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ba2:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ba4:	6823      	ldr	r3, [r4, #0]
 8004ba6:	0359      	lsls	r1, r3, #13
 8004ba8:	d510      	bpl.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004baa:	4a6b      	ldr	r2, [pc, #428]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004bac:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004bae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004bb2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004bb6:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bb8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bc0:	f040 80bd 	bne.w	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bc4:	68d3      	ldr	r3, [r2, #12]
 8004bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bca:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	045a      	lsls	r2, r3, #17
 8004bd0:	d514      	bpl.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x338>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bd2:	4961      	ldr	r1, [pc, #388]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004bd4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004bd8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004bdc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004be0:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004be2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bea:	d107      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x338>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bec:	2102      	movs	r1, #2
 8004bee:	1d20      	adds	r0, r4, #4
 8004bf0:	f7ff fd58 	bl	80046a4 <RCCEx_PLLSAI1_Config>
 8004bf4:	4606      	mov	r6, r0
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	bf18      	it	ne
 8004bfa:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bfc:	6822      	ldr	r2, [r4, #0]
 8004bfe:	03d3      	lsls	r3, r2, #15
 8004c00:	d509      	bpl.n	8004c16 <HAL_RCCEx_PeriphCLKConfig+0x352>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c02:	4955      	ldr	r1, [pc, #340]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c04:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004c08:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004c0c:	f023 0304 	bic.w	r3, r3, #4
 8004c10:	4303      	orrs	r3, r0
 8004c12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004c16:	0297      	lsls	r7, r2, #10
 8004c18:	d509      	bpl.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c1a:	494f      	ldr	r1, [pc, #316]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c1c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004c20:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004c24:	f023 0318 	bic.w	r3, r3, #24
 8004c28:	4303      	orrs	r3, r0
 8004c2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c2e:	0250      	lsls	r0, r2, #9
 8004c30:	d51f      	bpl.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c32:	4f49      	ldr	r7, [pc, #292]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004c3c:	f7fc f9f0 	bl	8001020 <HAL_GetTick>
 8004c40:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	0099      	lsls	r1, r3, #2
 8004c46:	f100 8089 	bmi.w	8004d5c <HAL_RCCEx_PeriphCLKConfig+0x498>
    if(ret == HAL_OK)
 8004c4a:	2e00      	cmp	r6, #0
 8004c4c:	f040 808f 	bne.w	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c54:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004c58:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c62:	2102      	movs	r1, #2
 8004c64:	f104 0020 	add.w	r0, r4, #32
 8004c68:	f7ff fda4 	bl	80047b4 <RCCEx_PLLSAI2_Config>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	bf18      	it	ne
 8004c70:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	021a      	lsls	r2, r3, #8
 8004c76:	d514      	bpl.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004c78:	4937      	ldr	r1, [pc, #220]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c7a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004c7e:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c86:	4313      	orrs	r3, r2
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004c88:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004c8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004c90:	d107      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004c92:	2101      	movs	r1, #1
 8004c94:	f104 0020 	add.w	r0, r4, #32
 8004c98:	f7ff fd8c 	bl	80047b4 <RCCEx_PLLSAI2_Config>
 8004c9c:	2800      	cmp	r0, #0
 8004c9e:	bf18      	it	ne
 8004ca0:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	01db      	lsls	r3, r3, #7
 8004ca6:	d510      	bpl.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x406>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004ca8:	4a2b      	ldr	r2, [pc, #172]	; (8004d58 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004caa:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004cae:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004cb2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004cb6:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004cb8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004cbc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004cc0:	d103      	bne.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc2:	68d3      	ldr	r3, [r2, #12]
 8004cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cc8:	60d3      	str	r3, [r2, #12]
}
 8004cca:	4628      	mov	r0, r5
 8004ccc:	b002      	add	sp, #8
 8004cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd2:	f7fc f9a5 	bl	8001020 <HAL_GetTick>
 8004cd6:	eba0 0009 	sub.w	r0, r0, r9
 8004cda:	4550      	cmp	r0, sl
 8004cdc:	f67f ae8c 	bls.w	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004ce0:	e6ac      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004ce2:	4635      	mov	r5, r6
 8004ce4:	e6ac      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ce6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004cea:	f47f af48 	bne.w	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cee:	2101      	movs	r1, #1
 8004cf0:	1d20      	adds	r0, r4, #4
 8004cf2:	f7ff fcd7 	bl	80046a4 <RCCEx_PLLSAI1_Config>
 8004cf6:	4606      	mov	r6, r0
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	bf18      	it	ne
 8004cfc:	4605      	movne	r5, r0
 8004cfe:	e73e      	b.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d00:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004d08:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004d0c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004d10:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d12:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d1a:	d103      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x460>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d22:	e73e      	b.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d24:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004d28:	f47f af3c 	bne.w	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d2c:	2101      	movs	r1, #1
 8004d2e:	1d20      	adds	r0, r4, #4
 8004d30:	f7ff fcb8 	bl	80046a4 <RCCEx_PLLSAI1_Config>
 8004d34:	4606      	mov	r6, r0
 8004d36:	2800      	cmp	r0, #0
 8004d38:	bf18      	it	ne
 8004d3a:	4605      	movne	r5, r0
 8004d3c:	e732      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d3e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004d42:	f47f af43 	bne.w	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d46:	2101      	movs	r1, #1
 8004d48:	1d20      	adds	r0, r4, #4
 8004d4a:	f7ff fcab 	bl	80046a4 <RCCEx_PLLSAI1_Config>
 8004d4e:	4606      	mov	r6, r0
 8004d50:	2800      	cmp	r0, #0
 8004d52:	bf18      	it	ne
 8004d54:	4605      	movne	r5, r0
 8004d56:	e739      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004d58:	40021000 	.word	0x40021000
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d5c:	f7fc f960 	bl	8001020 <HAL_GetTick>
 8004d60:	eba0 0008 	sub.w	r0, r0, r8
 8004d64:	2802      	cmp	r0, #2
 8004d66:	f67f af6c 	bls.w	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        ret = HAL_TIMEOUT;
 8004d6a:	2503      	movs	r5, #3
 8004d6c:	e781      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004d6e:	4635      	mov	r5, r6
 8004d70:	e77f      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d78:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d84:	f04f 0801 	mov.w	r8, #1
 8004d88:	e602      	b.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004d8a:	bf00      	nop

08004d8c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d90:	b087      	sub	sp, #28
 8004d92:	4606      	mov	r6, r0
 8004d94:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8004d96:	f7fc f943 	bl	8001020 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004d9a:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8004d9c:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004d9e:	6830      	ldr	r0, [r6, #0]
 8004da0:	f002 fa76 	bl	8007290 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8004da4:	4604      	mov	r4, r0
 8004da6:	bb40      	cbnz	r0, 8004dfa <SD_FindSCR+0x6e>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004da8:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8004daa:	6830      	ldr	r0, [r6, #0]
 8004dac:	0409      	lsls	r1, r1, #16
 8004dae:	f002 fb89 	bl	80074c4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8004db2:	4604      	mov	r4, r0
 8004db4:	bb08      	cbnz	r0, 8004dfa <SD_FindSCR+0x6e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004db6:	2230      	movs	r2, #48	; 0x30
 8004db8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dbc:	2108      	movs	r1, #8
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004dc4:	2301      	movs	r3, #1
  SDMMC_ConfigData(hsd->Instance, &config);
 8004dc6:	4669      	mov	r1, sp
 8004dc8:	6830      	ldr	r0, [r6, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004dca:	9404      	str	r4, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004dcc:	9305      	str	r3, [sp, #20]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004dce:	f002 fa4d 	bl	800726c <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004dd2:	6830      	ldr	r0, [r6, #0]
 8004dd4:	f002 fba5 	bl	8007522 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8004dd8:	4604      	mov	r4, r0
 8004dda:	b970      	cbnz	r0, 8004dfa <SD_FindSCR+0x6e>
 8004ddc:	4605      	mov	r5, r0
 8004dde:	4607      	mov	r7, r0
 8004de0:	4683      	mov	fp, r0
  {
    return errorstate;
  }
  
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004de2:	f240 592a 	movw	r9, #1322	; 0x52a
 8004de6:	6830      	ldr	r0, [r6, #0]
 8004de8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004dea:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004dee:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004df0:	d007      	beq.n	8004e02 <SD_FindSCR+0x76>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004df2:	0719      	lsls	r1, r3, #28
 8004df4:	d51c      	bpl.n	8004e30 <SD_FindSCR+0xa4>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004df6:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004df8:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	b007      	add	sp, #28
 8004dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004e02:	031b      	lsls	r3, r3, #12
 8004e04:	d40b      	bmi.n	8004e1e <SD_FindSCR+0x92>
 8004e06:	f1bb 0f00 	cmp.w	fp, #0
 8004e0a:	d108      	bne.n	8004e1e <SD_FindSCR+0x92>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004e0c:	f002 f96a 	bl	80070e4 <SDMMC_ReadFIFO>
 8004e10:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004e12:	6830      	ldr	r0, [r6, #0]
 8004e14:	f002 f966 	bl	80070e4 <SDMMC_ReadFIFO>
      index++;
 8004e18:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004e1c:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004e1e:	f7fc f8ff 	bl	8001020 <HAL_GetTick>
 8004e22:	eba0 000a 	sub.w	r0, r0, sl
 8004e26:	3001      	adds	r0, #1
 8004e28:	d1dd      	bne.n	8004de6 <SD_FindSCR+0x5a>
      return HAL_SD_ERROR_TIMEOUT;
 8004e2a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004e2e:	e7e4      	b.n	8004dfa <SD_FindSCR+0x6e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004e30:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e32:	079a      	lsls	r2, r3, #30
 8004e34:	d501      	bpl.n	8004e3a <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004e36:	2402      	movs	r4, #2
 8004e38:	e7de      	b.n	8004df8 <SD_FindSCR+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004e3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e3c:	069b      	lsls	r3, r3, #26
 8004e3e:	d501      	bpl.n	8004e44 <SD_FindSCR+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004e40:	2420      	movs	r4, #32
 8004e42:	e7d9      	b.n	8004df8 <SD_FindSCR+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004e44:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <SD_FindSCR+0xcc>)
 8004e46:	6383      	str	r3, [r0, #56]	; 0x38
 8004e48:	ba3f      	rev	r7, r7
 8004e4a:	ba2d      	rev	r5, r5
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e4c:	f8c8 7004 	str.w	r7, [r8, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e50:	f8c8 5000 	str.w	r5, [r8]
  return HAL_SD_ERROR_NONE;
 8004e54:	e7d1      	b.n	8004dfa <SD_FindSCR+0x6e>
 8004e56:	bf00      	nop
 8004e58:	18000f3a 	.word	0x18000f3a

08004e5c <HAL_SD_DeInit>:
{
 8004e5c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8004e5e:	4604      	mov	r4, r0
 8004e60:	b168      	cbz	r0, 8004e7e <HAL_SD_DeInit+0x22>
  hsd->State = HAL_SD_STATE_BUSY;
 8004e62:	2303      	movs	r3, #3
 8004e64:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  SDMMC_PowerState_OFF(hsd->Instance);
 8004e68:	6800      	ldr	r0, [r0, #0]
 8004e6a:	f002 f949 	bl	8007100 <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f01c fc5c 	bl	802172c <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e74:	2000      	movs	r0, #0
 8004e76:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8004e78:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8004e7c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004e7e:	2001      	movs	r0, #1
}
 8004e80:	bd10      	pop	{r4, pc}
	...

08004e84 <HAL_SD_ReadBlocks_DMA>:
{
 8004e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e88:	4604      	mov	r4, r0
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	4615      	mov	r5, r2
 8004e8e:	461e      	mov	r6, r3
  if(NULL == pData)
 8004e90:	460f      	mov	r7, r1
 8004e92:	b939      	cbnz	r1, 8004ea4 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004e94:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004e96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e9a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004e9c:	2001      	movs	r0, #1
}
 8004e9e:	b006      	add	sp, #24
 8004ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004ea4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004ea8:	b2c0      	uxtb	r0, r0
 8004eaa:	2801      	cmp	r0, #1
 8004eac:	d158      	bne.n	8004f60 <HAL_SD_ReadBlocks_DMA+0xdc>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004eae:	18d3      	adds	r3, r2, r3
 8004eb0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004eb2:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004eb4:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004eb6:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004eb8:	d904      	bls.n	8004ec4 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004eba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ebc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ec0:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004ec2:	e7ec      	b.n	8004e9e <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004eca:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ecc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004ece:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004ed0:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ed4:	2b01      	cmp	r3, #1
    hsd->pRxBuffPtr = (uint32_t*)pData;
 8004ed6:	62a7      	str	r7, [r4, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004ed8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004edc:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004ee0:	bf18      	it	ne
 8004ee2:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ee4:	f002 f9d4 	bl	8007290 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ee8:	b148      	cbz	r0, 8004efe <HAL_SD_ReadBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004eea:	6823      	ldr	r3, [r4, #0]
 8004eec:	4a1d      	ldr	r2, [pc, #116]	; (8004f64 <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004eee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ef0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ef2:	4318      	orrs	r0, r3
 8004ef4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ef6:	2001      	movs	r0, #1
 8004ef8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004efc:	e7cf      	b.n	8004e9e <HAL_SD_ReadBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004efe:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004f02:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004f06:	2390      	movs	r3, #144	; 0x90
 8004f08:	9302      	str	r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004f0a:	9004      	str	r0, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004f0c:	2302      	movs	r3, #2
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004f0e:	9005      	str	r0, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004f10:	4669      	mov	r1, sp
 8004f12:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004f14:	9303      	str	r3, [sp, #12]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004f16:	f002 f9a9 	bl	800726c <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004f1a:	6820      	ldr	r0, [r4, #0]
 8004f1c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004f1e:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8004f22:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004f24:	68c3      	ldr	r3, [r0, #12]
 8004f26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f2a:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004f2c:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8004f2e:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004f30:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004f32:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8004f34:	d90e      	bls.n	8004f54 <HAL_SD_ReadBlocks_DMA+0xd0>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004f36:	2382      	movs	r3, #130	; 0x82
 8004f38:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004f3a:	4629      	mov	r1, r5
 8004f3c:	f002 f9da 	bl	80072f4 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d0ac      	beq.n	8004e9e <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	4a07      	ldr	r2, [pc, #28]	; (8004f64 <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004f48:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f4c:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004f50:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f52:	e7cd      	b.n	8004ef0 <HAL_SD_ReadBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004f54:	2381      	movs	r3, #129	; 0x81
 8004f56:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004f58:	4629      	mov	r1, r5
 8004f5a:	f002 f9b2 	bl	80072c2 <SDMMC_CmdReadSingleBlock>
 8004f5e:	e7ef      	b.n	8004f40 <HAL_SD_ReadBlocks_DMA+0xbc>
    return HAL_BUSY;
 8004f60:	2002      	movs	r0, #2
 8004f62:	e79c      	b.n	8004e9e <HAL_SD_ReadBlocks_DMA+0x1a>
 8004f64:	1fe00fff 	.word	0x1fe00fff

08004f68 <HAL_SD_WriteBlocks_DMA>:
{
 8004f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	b086      	sub	sp, #24
 8004f70:	4615      	mov	r5, r2
 8004f72:	461e      	mov	r6, r3
  if(NULL == pData)
 8004f74:	460f      	mov	r7, r1
 8004f76:	b939      	cbnz	r1, 8004f88 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004f7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f7e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004f80:	2001      	movs	r0, #1
}
 8004f82:	b006      	add	sp, #24
 8004f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004f88:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004f8c:	b2c0      	uxtb	r0, r0
 8004f8e:	2801      	cmp	r0, #1
 8004f90:	d159      	bne.n	8005046 <HAL_SD_WriteBlocks_DMA+0xde>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f92:	18d3      	adds	r3, r2, r3
 8004f94:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f96:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f98:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f9a:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f9c:	d904      	bls.n	8004fa8 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004f9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004fa4:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004fa6:	e7ec      	b.n	8004f82 <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004fae:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004fb0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004fb2:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004fb4:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004fb8:	2b01      	cmp	r3, #1
    hsd->pTxBuffPtr = (uint32_t*)pData;
 8004fba:	6227      	str	r7, [r4, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004fbc:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fc0:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004fc4:	bf18      	it	ne
 8004fc6:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fc8:	f002 f962 	bl	8007290 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fcc:	b148      	cbz	r0, 8004fe2 <HAL_SD_WriteBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004fce:	6823      	ldr	r3, [r4, #0]
 8004fd0:	4a1e      	ldr	r2, [pc, #120]	; (800504c <HAL_SD_WriteBlocks_DMA+0xe4>)
 8004fd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004fd4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fd6:	4318      	orrs	r0, r3
 8004fd8:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fda:	2001      	movs	r0, #1
 8004fdc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004fe0:	e7cf      	b.n	8004f82 <HAL_SD_WriteBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004fe2:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004fe6:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004fea:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004fec:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004fee:	9005      	str	r0, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004ff0:	f04f 0890 	mov.w	r8, #144	; 0x90
    SDMMC_ConfigData(hsd->Instance, &config);
 8004ff4:	4669      	mov	r1, sp
 8004ff6:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004ff8:	f8cd 8008 	str.w	r8, [sp, #8]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004ffc:	f002 f936 	bl	800726c <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND)); 
 8005000:	6820      	ldr	r0, [r4, #0]
 8005002:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005004:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
 8005008:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800500a:	68c3      	ldr	r3, [r0, #12]
 800500c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005010:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8005012:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8005014:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8005016:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005018:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 800501a:	d90e      	bls.n	800503a <HAL_SD_WriteBlocks_DMA+0xd2>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800501c:	23a0      	movs	r3, #160	; 0xa0
 800501e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8005020:	4629      	mov	r1, r5
 8005022:	f002 f999 	bl	8007358 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005026:	2800      	cmp	r0, #0
 8005028:	d0ab      	beq.n	8004f82 <HAL_SD_WriteBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	4a07      	ldr	r2, [pc, #28]	; (800504c <HAL_SD_WriteBlocks_DMA+0xe4>)
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8005030:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005032:	f422 728d 	bic.w	r2, r2, #282	; 0x11a
 8005036:	63da      	str	r2, [r3, #60]	; 0x3c
 8005038:	e7cc      	b.n	8004fd4 <HAL_SD_WriteBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800503a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800503e:	4629      	mov	r1, r5
 8005040:	f002 f971 	bl	8007326 <SDMMC_CmdWriteSingleBlock>
 8005044:	e7ef      	b.n	8005026 <HAL_SD_WriteBlocks_DMA+0xbe>
    return HAL_BUSY;
 8005046:	2002      	movs	r0, #2
 8005048:	e79b      	b.n	8004f82 <HAL_SD_WriteBlocks_DMA+0x1a>
 800504a:	bf00      	nop
 800504c:	1fe00fff 	.word	0x1fe00fff

08005050 <HAL_SD_ErrorCallback>:
 8005050:	4770      	bx	lr
	...

08005054 <HAL_SD_IRQHandler>:
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8005054:	6803      	ldr	r3, [r0, #0]
 8005056:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{  
 8005058:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 800505a:	05d5      	lsls	r5, r2, #23
{  
 800505c:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 800505e:	d55f      	bpl.n	8005120 <HAL_SD_IRQHandler+0xcc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 8005060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005064:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT   |\
 8005066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005068:	f422 4241 	bic.w	r2, r2, #49408	; 0xc100
 800506c:	f022 023a 	bic.w	r2, r2, #58	; 0x3a
 8005070:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005074:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005078:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005080:	60da      	str	r2, [r3, #12]
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8005082:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005084:	f012 0208 	ands.w	r2, r2, #8
 8005088:	d023      	beq.n	80050d2 <HAL_SD_IRQHandler+0x7e>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800508a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800508c:	0790      	lsls	r0, r2, #30
 800508e:	d402      	bmi.n	8005096 <HAL_SD_IRQHandler+0x42>
 8005090:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005092:	0691      	lsls	r1, r2, #26
 8005094:	d509      	bpl.n	80050aa <HAL_SD_IRQHandler+0x56>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005096:	4618      	mov	r0, r3
 8005098:	f002 f978 	bl	800738c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800509c:	b128      	cbz	r0, 80050aa <HAL_SD_IRQHandler+0x56>
          hsd->ErrorCode |= errorstate;
 800509e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050a0:	4318      	orrs	r0, r3
 80050a2:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80050a4:	4620      	mov	r0, r4
 80050a6:	f7ff ffd3 	bl	8005050 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80050aa:	6823      	ldr	r3, [r4, #0]
 80050ac:	4a59      	ldr	r2, [pc, #356]	; (8005214 <HAL_SD_IRQHandler+0x1c0>)
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80050b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050b8:	07da      	lsls	r2, r3, #31
 80050ba:	d503      	bpl.n	80050c4 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 80050bc:	4620      	mov	r0, r4
 80050be:	f018 fed9 	bl	801de74 <HAL_SD_RxCpltCallback>
 80050c2:	bd70      	pop	{r4, r5, r6, pc}
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80050c4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050c6:	079b      	lsls	r3, r3, #30
 80050c8:	d4f8      	bmi.n	80050bc <HAL_SD_IRQHandler+0x68>
        HAL_SD_TxCpltCallback(hsd);
 80050ca:	4620      	mov	r0, r4
 80050cc:	f018 fecd 	bl	801de6a <HAL_SD_TxCpltCallback>
 80050d0:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80050d2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80050d4:	060e      	lsls	r6, r1, #24
 80050d6:	f140 8090 	bpl.w	80051fa <HAL_SD_IRQHandler+0x1a6>
      hsd->Instance->DLEN = 0;
 80050da:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80050dc:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80050de:	651a      	str	r2, [r3, #80]	; 0x50
      if((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET)
 80050e0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80050e2:	07d5      	lsls	r5, r2, #31
 80050e4:	d409      	bmi.n	80050fa <HAL_SD_IRQHandler+0xa6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80050e6:	4618      	mov	r0, r3
 80050e8:	f002 f950 	bl	800738c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80050ec:	b128      	cbz	r0, 80050fa <HAL_SD_IRQHandler+0xa6>
          hsd->ErrorCode |= errorstate;
 80050ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050f0:	4318      	orrs	r0, r3
 80050f2:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80050f4:	4620      	mov	r0, r4
 80050f6:	f7ff ffab 	bl	8005050 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80050fa:	2301      	movs	r3, #1
 80050fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8005100:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005102:	06d8      	lsls	r0, r3, #27
 8005104:	d402      	bmi.n	800510c <HAL_SD_IRQHandler+0xb8>
 8005106:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005108:	0699      	lsls	r1, r3, #26
 800510a:	d502      	bpl.n	8005112 <HAL_SD_IRQHandler+0xbe>
        HAL_SD_TxCpltCallback(hsd);
 800510c:	4620      	mov	r0, r4
 800510e:	f018 feac 	bl	801de6a <HAL_SD_TxCpltCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8005112:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005114:	07da      	lsls	r2, r3, #31
 8005116:	d4d1      	bmi.n	80050bc <HAL_SD_IRQHandler+0x68>
 8005118:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800511a:	079b      	lsls	r3, r3, #30
 800511c:	d4ce      	bmi.n	80050bc <HAL_SD_IRQHandler+0x68>
 800511e:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 8005120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005122:	0456      	lsls	r6, r2, #17
 8005124:	d50d      	bpl.n	8005142 <HAL_SD_IRQHandler+0xee>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8005126:	6a05      	ldr	r5, [r0, #32]
 8005128:	f105 0620 	add.w	r6, r5, #32
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 800512c:	4629      	mov	r1, r5
 800512e:	6820      	ldr	r0, [r4, #0]
 8005130:	3504      	adds	r5, #4
 8005132:	f001 ffda 	bl	80070ea <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 8005136:	42ae      	cmp	r6, r5
 8005138:	d1f8      	bne.n	800512c <HAL_SD_IRQHandler+0xd8>
  }
  
  hsd->pTxBuffPtr += 8;
 800513a:	6a23      	ldr	r3, [r4, #32]
 800513c:	3320      	adds	r3, #32
 800513e:	6223      	str	r3, [r4, #32]
 8005140:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 8005142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005144:	0415      	lsls	r5, r2, #16
 8005146:	d50d      	bpl.n	8005164 <HAL_SD_IRQHandler+0x110>
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8005148:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800514a:	1f2e      	subs	r6, r5, #4
 800514c:	351c      	adds	r5, #28
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 800514e:	6820      	ldr	r0, [r4, #0]
 8005150:	f001 ffc8 	bl	80070e4 <SDMMC_ReadFIFO>
 8005154:	f846 0f04 	str.w	r0, [r6, #4]!
  for(count = 0; count < 8; count++)
 8005158:	42b5      	cmp	r5, r6
 800515a:	d1f8      	bne.n	800514e <HAL_SD_IRQHandler+0xfa>
  hsd->pRxBuffPtr += 8;
 800515c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800515e:	3320      	adds	r3, #32
 8005160:	62a3      	str	r3, [r4, #40]	; 0x28
 8005162:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8005164:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005166:	f012 0f3a 	tst.w	r2, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800516a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 800516c:	d036      	beq.n	80051dc <HAL_SD_IRQHandler+0x188>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800516e:	0791      	lsls	r1, r2, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8005170:	bf42      	ittt	mi
 8005172:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8005174:	f042 0202 	orrmi.w	r2, r2, #2
 8005178:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800517a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800517c:	0712      	lsls	r2, r2, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800517e:	bf42      	ittt	mi
 8005180:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8005182:	f042 0208 	orrmi.w	r2, r2, #8
 8005186:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005188:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800518a:	0696      	lsls	r6, r2, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800518c:	bf42      	ittt	mi
 800518e:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8005190:	f042 0220 	orrmi.w	r2, r2, #32
 8005194:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005196:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005198:	06d5      	lsls	r5, r2, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800519a:	bf42      	ittt	mi
 800519c:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 800519e:	f042 0210 	orrmi.w	r2, r2, #16
 80051a2:	6382      	strmi	r2, [r0, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80051a4:	4a1b      	ldr	r2, [pc, #108]	; (8005214 <HAL_SD_IRQHandler+0x1c0>)
 80051a6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80051a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051aa:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80051ae:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80051b0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80051b2:	f012 0208 	ands.w	r2, r2, #8
 80051b6:	d006      	beq.n	80051c6 <HAL_SD_IRQHandler+0x172>
        hsd->State = HAL_SD_STATE_READY;
 80051b8:	2301      	movs	r3, #1
 80051ba:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80051be:	4620      	mov	r0, r4
 80051c0:	f7ff ff46 	bl	8005050 <HAL_SD_ErrorCallback>
 80051c4:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80051c6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80051c8:	0608      	lsls	r0, r1, #24
 80051ca:	d516      	bpl.n	80051fa <HAL_SD_IRQHandler+0x1a6>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80051cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051ce:	b1a1      	cbz	r1, 80051fa <HAL_SD_IRQHandler+0x1a6>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80051d0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80051d2:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80051d6:	63d9      	str	r1, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80051d8:	651a      	str	r2, [r3, #80]	; 0x50
 80051da:	e7ed      	b.n	80051b8 <HAL_SD_IRQHandler+0x164>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_IDMABTC) != RESET)
 80051dc:	00d1      	lsls	r1, r2, #3
 80051de:	d50c      	bpl.n	80051fa <HAL_SD_IRQHandler+0x1a6>
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 80051e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e2:	f013 0f04 	tst.w	r3, #4
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80051e6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 80051e8:	d10b      	bne.n	8005202 <HAL_SD_IRQHandler+0x1ae>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80051ea:	069a      	lsls	r2, r3, #26
 80051ec:	d506      	bpl.n	80051fc <HAL_SD_IRQHandler+0x1a8>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 80051ee:	f000 fb72 	bl	80058d6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
 80051fa:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 80051fc:	f000 fb69 	bl	80058d2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
 8005200:	e7f7      	b.n	80051f2 <HAL_SD_IRQHandler+0x19e>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8005202:	069b      	lsls	r3, r3, #26
 8005204:	d502      	bpl.n	800520c <HAL_SD_IRQHandler+0x1b8>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8005206:	f000 fb65 	bl	80058d4 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
 800520a:	e7f2      	b.n	80051f2 <HAL_SD_IRQHandler+0x19e>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 800520c:	f000 fb60 	bl	80058d0 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
 8005210:	e7ef      	b.n	80051f2 <HAL_SD_IRQHandler+0x19e>
 8005212:	bf00      	nop
 8005214:	18000f3a 	.word	0x18000f3a

08005218 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8005218:	6e03      	ldr	r3, [r0, #96]	; 0x60
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800521a:	0f9a      	lsrs	r2, r3, #30
 800521c:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800521e:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8005222:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8005224:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8005228:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 800522a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800522e:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8005230:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005234:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8005236:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005238:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 800523a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800523c:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800523e:	0112      	lsls	r2, r2, #4
 8005240:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005242:	88ca      	ldrh	r2, [r1, #6]
{
 8005244:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005246:	b292      	uxth	r2, r2
 8005248:	f3c3 5403 	ubfx	r4, r3, #20, #4
 800524c:	4322      	orrs	r2, r4
 800524e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8005250:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8005254:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8005256:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800525a:	09d4      	lsrs	r4, r2, #7
 800525c:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800525e:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8005262:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8005264:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8005268:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800526a:	f3c2 1400 	ubfx	r4, r2, #4, #1
 800526e:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8005270:	2400      	movs	r4, #0
 8005272:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8005274:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005276:	2c00      	cmp	r4, #0
 8005278:	f040 8083 	bne.w	8005382 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800527c:	0292      	lsls	r2, r2, #10
 800527e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005282:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 8005284:	690a      	ldr	r2, [r1, #16]
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800528c:	4313      	orrs	r3, r2
 800528e:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8005290:	6e82      	ldr	r2, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8005292:	690b      	ldr	r3, [r1, #16]
 8005294:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8005298:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800529a:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800529e:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 80052a0:	f3c2 6302 	ubfx	r3, r2, #24, #3
 80052a4:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 80052a6:	f3c2 5342 	ubfx	r3, r2, #21, #3
 80052aa:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 80052ac:	f3c2 4382 	ubfx	r3, r2, #18, #3
 80052b0:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80052b2:	0bd3      	lsrs	r3, r2, #15
 80052b4:	f003 0306 	and.w	r3, r3, #6
 80052b8:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80052ba:	7e0c      	ldrb	r4, [r1, #24]
 80052bc:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80052c0:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80052c4:	4322      	orrs	r2, r4
 80052c6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80052c8:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80052ca:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80052cc:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80052ce:	3402      	adds	r4, #2
 80052d0:	40a2      	lsls	r2, r4
 80052d2:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80052d4:	7a0d      	ldrb	r5, [r1, #8]
 80052d6:	2401      	movs	r4, #1
 80052d8:	40ac      	lsls	r4, r5
 80052da:	6504      	str	r4, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80052dc:	0a64      	lsrs	r4, r4, #9
 80052de:	4362      	muls	r2, r4
 80052e0:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512;
 80052e2:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80052e6:	6582      	str	r2, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80052e8:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80052ec:	005b      	lsls	r3, r3, #1
 80052ee:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80052f2:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80052f4:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80052f6:	6e83      	ldr	r3, [r0, #104]	; 0x68
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80052f8:	7e8a      	ldrb	r2, [r1, #26]
 80052fa:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 80052fe:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8005300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8005304:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8005306:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8005308:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800530a:	0fda      	lsrs	r2, r3, #31
 800530c:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800530e:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8005312:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8005314:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8005318:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800531a:	0d9a      	lsrs	r2, r3, #22
 800531c:	f002 020c 	and.w	r2, r2, #12
 8005320:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8005322:	7fca      	ldrb	r2, [r1, #31]
 8005324:	f3c3 5081 	ubfx	r0, r3, #22, #2
 8005328:	4302      	orrs	r2, r0
 800532a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800532c:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8005330:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0;
 8005334:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8005336:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 800533a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800533e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8005342:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8005346:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 800534a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800534e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8005352:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8005356:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800535a:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800535e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8005362:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8005366:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800536a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800536e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 8005372:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8005376:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800537a:	2301      	movs	r3, #1
 800537c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8005380:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005382:	2c01      	cmp	r4, #1
 8005384:	d11a      	bne.n	80053bc <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8005386:	041b      	lsls	r3, r3, #16
 8005388:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800538c:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800538e:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp << 8);
 8005390:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8005392:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 8005394:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8005398:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 800539a:	690c      	ldr	r4, [r1, #16]
 800539c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80053a0:	4322      	orrs	r2, r4
 80053a2:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80053a4:	690a      	ldr	r2, [r1, #16]
 80053a6:	0292      	lsls	r2, r2, #10
 80053a8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80053ac:	64c2      	str	r2, [r0, #76]	; 0x4c
 80053ae:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80053b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053b4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80053b8:	6502      	str	r2, [r0, #80]	; 0x50
 80053ba:	e794      	b.n	80052e6 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80053bc:	6803      	ldr	r3, [r0, #0]
 80053be:	4a05      	ldr	r2, [pc, #20]	; (80053d4 <HAL_SD_GetCardCSD+0x1bc>)
 80053c0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053c2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80053c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053c8:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053ca:	2301      	movs	r3, #1
 80053cc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80053d0:	4618      	mov	r0, r3
 80053d2:	bd30      	pop	{r4, r5, pc}
 80053d4:	1fe00fff 	.word	0x1fe00fff

080053d8 <HAL_SD_InitCard>:
{
 80053d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053da:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80053dc:	2300      	movs	r3, #0
 80053de:	9307      	str	r3, [sp, #28]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80053e0:	9308      	str	r3, [sp, #32]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80053e2:	9309      	str	r3, [sp, #36]	; 0x24
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80053e4:	930a      	str	r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80053e6:	233c      	movs	r3, #60	; 0x3c
 80053e8:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80053ea:	6983      	ldr	r3, [r0, #24]
 80053ec:	2b01      	cmp	r3, #1
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80053ee:	bf01      	itttt	eq
 80053f0:	6802      	ldreq	r2, [r0, #0]
 80053f2:	6813      	ldreq	r3, [r2, #0]
 80053f4:	f043 0304 	orreq.w	r3, r3, #4
 80053f8:	6013      	streq	r3, [r2, #0]
  status = SDMMC_Init(hsd->Instance, Init);
 80053fa:	ab0a      	add	r3, sp, #40	; 0x28
{
 80053fc:	4604      	mov	r4, r0
  status = SDMMC_Init(hsd->Instance, Init);
 80053fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005402:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005406:	ab07      	add	r3, sp, #28
 8005408:	cb0e      	ldmia	r3, {r1, r2, r3}
 800540a:	6820      	ldr	r0, [r4, #0]
 800540c:	f001 fe50 	bl	80070b0 <SDMMC_Init>
  if(status != HAL_OK)
 8005410:	2800      	cmp	r0, #0
 8005412:	f040 80e9 	bne.w	80055e8 <HAL_SD_InitCard+0x210>
  status = SDMMC_PowerState_ON(hsd->Instance);
 8005416:	6820      	ldr	r0, [r4, #0]
 8005418:	f001 fe6c 	bl	80070f4 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 800541c:	4605      	mov	r5, r0
 800541e:	2800      	cmp	r0, #0
 8005420:	f040 80e2 	bne.w	80055e8 <HAL_SD_InitCard+0x210>
  HAL_Delay(2U);
 8005424:	2002      	movs	r0, #2
 8005426:	f7fb fe01 	bl	800102c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800542a:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 800542c:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800542e:	f001 ffe1 	bl	80073f4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005432:	b958      	cbnz	r0, 800544c <HAL_SD_InitCard+0x74>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005434:	6820      	ldr	r0, [r4, #0]
 8005436:	f002 f807 	bl	8007448 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800543a:	b170      	cbz	r0, 800545a <HAL_SD_InitCard+0x82>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800543c:	6425      	str	r5, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800543e:	2100      	movs	r1, #0
 8005440:	6820      	ldr	r0, [r4, #0]
 8005442:	f002 f83f 	bl	80074c4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005446:	b158      	cbz	r0, 8005460 <HAL_SD_InitCard+0x88>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005448:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 800544c:	2501      	movs	r5, #1
 800544e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005454:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 8005456:	63a0      	str	r0, [r4, #56]	; 0x38
 8005458:	e098      	b.n	800558c <HAL_SD_InitCard+0x1b4>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800545a:	2301      	movs	r3, #1
 800545c:	6423      	str	r3, [r4, #64]	; 0x40
 800545e:	e7ee      	b.n	800543e <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005460:	4f62      	ldr	r7, [pc, #392]	; (80055ec <HAL_SD_InitCard+0x214>)
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 8005462:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 8005466:	9b06      	ldr	r3, [sp, #24]
 8005468:	42b3      	cmp	r3, r6
 800546a:	d815      	bhi.n	8005498 <HAL_SD_InitCard+0xc0>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800546c:	2100      	movs	r1, #0
 800546e:	6820      	ldr	r0, [r4, #0]
 8005470:	f002 f828 	bl	80074c4 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005474:	2800      	cmp	r0, #0
 8005476:	d1e9      	bne.n	800544c <HAL_SD_InitCard+0x74>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005478:	4639      	mov	r1, r7
 800547a:	6820      	ldr	r0, [r4, #0]
 800547c:	f002 f83b 	bl	80074f6 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005480:	4601      	mov	r1, r0
 8005482:	2800      	cmp	r0, #0
 8005484:	d1e0      	bne.n	8005448 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005486:	6820      	ldr	r0, [r4, #0]
 8005488:	f001 fe56 	bl	8007138 <SDMMC_GetResponse>
      count++;
 800548c:	9b06      	ldr	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 800548e:	2800      	cmp	r0, #0
      count++;
 8005490:	f103 0301 	add.w	r3, r3, #1
 8005494:	9306      	str	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 8005496:	dae6      	bge.n	8005466 <HAL_SD_InitCard+0x8e>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005498:	9a06      	ldr	r2, [sp, #24]
 800549a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800549e:	429a      	cmp	r2, r3
 80054a0:	d902      	bls.n	80054a8 <HAL_SD_InitCard+0xd0>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80054a2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80054a6:	e7d1      	b.n	800544c <HAL_SD_InitCard+0x74>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80054a8:	0043      	lsls	r3, r0, #1
 80054aa:	d532      	bpl.n	8005512 <HAL_SD_InitCard+0x13a>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80054ac:	2301      	movs	r3, #1
 80054ae:	63e3      	str	r3, [r4, #60]	; 0x3c
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80054b0:	69a3      	ldr	r3, [r4, #24]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d12d      	bne.n	8005512 <HAL_SD_InitCard+0x13a>
        if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80054b6:	01c7      	lsls	r7, r0, #7
 80054b8:	d52b      	bpl.n	8005512 <HAL_SD_InitCard+0x13a>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80054ba:	6820      	ldr	r0, [r4, #0]
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80054bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054c0:	65e3      	str	r3, [r4, #92]	; 0x5c
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80054c2:	6803      	ldr	r3, [r0, #0]
 80054c4:	f043 0303 	orr.w	r3, r3, #3
 80054c8:	6003      	str	r3, [r0, #0]
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80054ca:	f002 f8f9 	bl	80076c0 <SDMMC_CmdVoltageSwitch>
          if(errorstate != HAL_SD_ERROR_NONE)
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d1bc      	bne.n	800544c <HAL_SD_InitCard+0x74>
          while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP);
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d6:	0156      	lsls	r6, r2, #5
 80054d8:	d5fc      	bpl.n	80054d4 <HAL_SD_InitCard+0xfc>
          hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80054da:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80054de:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80054e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054e2:	02d8      	lsls	r0, r3, #11
 80054e4:	d5b0      	bpl.n	8005448 <HAL_SD_InitCard+0x70>
            HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80054e6:	2001      	movs	r0, #1
 80054e8:	f000 f965 	bl	80057b6 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
            hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	f042 0202 	orr.w	r2, r2, #2
 80054f4:	601a      	str	r2, [r3, #0]
            while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND);
 80054f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f8:	0191      	lsls	r1, r2, #6
 80054fa:	d5fc      	bpl.n	80054f6 <HAL_SD_InitCard+0x11e>
            hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80054fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
            if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005504:	02d2      	lsls	r2, r2, #11
 8005506:	d4cc      	bmi.n	80054a2 <HAL_SD_InitCard+0xca>
            hsd->Instance->POWER = 0x13; 
 8005508:	2213      	movs	r2, #19
 800550a:	601a      	str	r2, [r3, #0]
            hsd->Instance->ICR = 0xFFFFFFFF;
 800550c:	f04f 32ff 	mov.w	r2, #4294967295
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1;
 8005512:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8005514:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8005516:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800551a:	f001 fdf7 	bl	800710c <SDMMC_GetPowerState>
 800551e:	b910      	cbnz	r0, 8005526 <HAL_SD_InitCard+0x14e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005520:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005524:	e03c      	b.n	80055a0 <HAL_SD_InitCard+0x1c8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005526:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005528:	2b03      	cmp	r3, #3
 800552a:	d018      	beq.n	800555e <HAL_SD_InitCard+0x186>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	f002 f811 	bl	8007554 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005532:	2800      	cmp	r0, #0
 8005534:	d134      	bne.n	80055a0 <HAL_SD_InitCard+0x1c8>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005536:	4601      	mov	r1, r0
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	f001 fdfd 	bl	8007138 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800553e:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005540:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005542:	6820      	ldr	r0, [r4, #0]
 8005544:	f001 fdf8 	bl	8007138 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005548:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800554a:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800554c:	6820      	ldr	r0, [r4, #0]
 800554e:	f001 fdf3 	bl	8007138 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005552:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005554:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005556:	6820      	ldr	r0, [r4, #0]
 8005558:	f001 fdee 	bl	8007138 <SDMMC_GetResponse>
 800555c:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800555e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005560:	2b03      	cmp	r3, #3
 8005562:	d116      	bne.n	8005592 <HAL_SD_InitCard+0x1ba>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005564:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005566:	2b03      	cmp	r3, #3
 8005568:	d120      	bne.n	80055ac <HAL_SD_InitCard+0x1d4>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800556a:	2104      	movs	r1, #4
 800556c:	6820      	ldr	r0, [r4, #0]
 800556e:	f001 fde3 	bl	8007138 <SDMMC_GetResponse>
 8005572:	0d00      	lsrs	r0, r0, #20
 8005574:	6460      	str	r0, [r4, #68]	; 0x44
  HAL_SD_GetCardCSD(hsd, &CSD);
 8005576:	a90d      	add	r1, sp, #52	; 0x34
 8005578:	4620      	mov	r0, r4
 800557a:	f7ff fe4d 	bl	8005218 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800557e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005580:	6820      	ldr	r0, [r4, #0]
 8005582:	0412      	lsls	r2, r2, #16
 8005584:	2300      	movs	r3, #0
 8005586:	f001 ff1b 	bl	80073c0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800558a:	b948      	cbnz	r0, 80055a0 <HAL_SD_InitCard+0x1c8>
}
 800558c:	4628      	mov	r0, r5
 800558e:	b019      	add	sp, #100	; 0x64
 8005590:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005592:	f10d 0116 	add.w	r1, sp, #22
 8005596:	6820      	ldr	r0, [r4, #0]
 8005598:	f002 f808 	bl	80075ac <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800559c:	2800      	cmp	r0, #0
 800559e:	d0e1      	beq.n	8005564 <HAL_SD_InitCard+0x18c>
    hsd->State = HAL_SD_STATE_READY;
 80055a0:	2501      	movs	r5, #1
 80055a2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80055a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80055a8:	4308      	orrs	r0, r1
 80055aa:	e754      	b.n	8005456 <HAL_SD_InitCard+0x7e>
    hsd->SdCard.RelCardAdd = sd_rca;
 80055ac:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80055b0:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055b2:	6820      	ldr	r0, [r4, #0]
 80055b4:	0409      	lsls	r1, r1, #16
 80055b6:	f001 ffe3 	bl	8007580 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80055ba:	2800      	cmp	r0, #0
 80055bc:	d1f0      	bne.n	80055a0 <HAL_SD_InitCard+0x1c8>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055be:	4601      	mov	r1, r0
 80055c0:	6820      	ldr	r0, [r4, #0]
 80055c2:	f001 fdb9 	bl	8007138 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055c6:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055c8:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055ca:	6820      	ldr	r0, [r4, #0]
 80055cc:	f001 fdb4 	bl	8007138 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055d0:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055d2:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055d4:	6820      	ldr	r0, [r4, #0]
 80055d6:	f001 fdaf 	bl	8007138 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055da:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055dc:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055de:	6820      	ldr	r0, [r4, #0]
 80055e0:	f001 fdaa 	bl	8007138 <SDMMC_GetResponse>
 80055e4:	66e0      	str	r0, [r4, #108]	; 0x6c
 80055e6:	e7c0      	b.n	800556a <HAL_SD_InitCard+0x192>
    return HAL_ERROR;
 80055e8:	2501      	movs	r5, #1
 80055ea:	e7cf      	b.n	800558c <HAL_SD_InitCard+0x1b4>
 80055ec:	c1100000 	.word	0xc1100000

080055f0 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80055f0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80055f2:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80055f4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80055f6:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80055f8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80055fa:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80055fc:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80055fe:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005600:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8005602:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005604:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005606:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005608:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800560a:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800560c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800560e:	61cb      	str	r3, [r1, #28]
}
 8005610:	2000      	movs	r0, #0
 8005612:	4770      	bx	lr

08005614 <HAL_SD_ConfigWideBusOperation>:
{
 8005614:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8005616:	2303      	movs	r3, #3
 8005618:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800561c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800561e:	2b03      	cmp	r3, #3
{
 8005620:	b08a      	sub	sp, #40	; 0x28
 8005622:	4604      	mov	r4, r0
 8005624:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005626:	d002      	beq.n	800562e <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005628:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800562c:	d103      	bne.n	8005636 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800562e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005634:	e056      	b.n	80056e4 <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005636:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800563a:	d12d      	bne.n	8005698 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2] = {0, 0};
 800563c:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800563e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8005640:	9104      	str	r1, [sp, #16]
 8005642:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005644:	f001 fd78 	bl	8007138 <SDMMC_GetResponse>
 8005648:	0180      	lsls	r0, r0, #6
 800564a:	d41f      	bmi.n	800568c <HAL_SD_ConfigWideBusOperation+0x78>
  errorstate = SD_FindSCR(hsd, scr);
 800564c:	a904      	add	r1, sp, #16
 800564e:	4620      	mov	r0, r4
 8005650:	f7ff fb9c 	bl	8004d8c <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005654:	b960      	cbnz	r0, 8005670 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005656:	9b05      	ldr	r3, [sp, #20]
 8005658:	0359      	lsls	r1, r3, #13
 800565a:	d51a      	bpl.n	8005692 <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800565c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800565e:	6820      	ldr	r0, [r4, #0]
 8005660:	0409      	lsls	r1, r1, #16
 8005662:	f001 ff2f 	bl	80074c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8005666:	b918      	cbnz	r0, 8005670 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8005668:	2102      	movs	r1, #2
 800566a:	6820      	ldr	r0, [r4, #0]
 800566c:	f002 f826 	bl	80076bc <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8005670:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005672:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8005674:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005676:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005678:	2d00      	cmp	r5, #0
 800567a:	d035      	beq.n	80056e8 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800567c:	6823      	ldr	r3, [r4, #0]
 800567e:	4a26      	ldr	r2, [pc, #152]	; (8005718 <HAL_SD_ConfigWideBusOperation+0x104>)
 8005680:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005682:	2001      	movs	r0, #1
 8005684:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8005688:	b00a      	add	sp, #40	; 0x28
 800568a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800568c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005690:	e7ee      	b.n	8005670 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005692:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005696:	e7eb      	b.n	8005670 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005698:	bb09      	cbnz	r1, 80056de <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800569a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 800569c:	9104      	str	r1, [sp, #16]
 800569e:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80056a0:	f001 fd4a 	bl	8007138 <SDMMC_GetResponse>
 80056a4:	0182      	lsls	r2, r0, #6
 80056a6:	d414      	bmi.n	80056d2 <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 80056a8:	a904      	add	r1, sp, #16
 80056aa:	4620      	mov	r0, r4
 80056ac:	f7ff fb6e 	bl	8004d8c <SD_FindSCR>
  if(errorstate != HAL_OK)
 80056b0:	b960      	cbnz	r0, 80056cc <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80056b2:	9b05      	ldr	r3, [sp, #20]
 80056b4:	03db      	lsls	r3, r3, #15
 80056b6:	d50f      	bpl.n	80056d8 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80056b8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056ba:	6820      	ldr	r0, [r4, #0]
 80056bc:	0409      	lsls	r1, r1, #16
 80056be:	f001 ff01 	bl	80074c4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80056c2:	b918      	cbnz	r0, 80056cc <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80056c4:	4601      	mov	r1, r0
 80056c6:	6820      	ldr	r0, [r4, #0]
 80056c8:	f001 fff8 	bl	80076bc <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80056cc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056ce:	4308      	orrs	r0, r1
 80056d0:	e7d0      	b.n	8005674 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80056d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80056d6:	e7f9      	b.n	80056cc <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80056d8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80056dc:	e7f6      	b.n	80056cc <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80056de:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80056e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80056e6:	e7c6      	b.n	8005676 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80056e8:	6863      	ldr	r3, [r4, #4]
 80056ea:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80056ec:	68a3      	ldr	r3, [r4, #8]
 80056ee:	9305      	str	r3, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80056f0:	6923      	ldr	r3, [r4, #16]
 80056f2:	9307      	str	r3, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80056f4:	6963      	ldr	r3, [r4, #20]
 80056f6:	9308      	str	r3, [sp, #32]
    SDMMC_Init(hsd->Instance, Init);
 80056f8:	ab0a      	add	r3, sp, #40	; 0x28
 80056fa:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80056fe:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.BusWide             = WideMode;
 8005702:	9606      	str	r6, [sp, #24]
    SDMMC_Init(hsd->Instance, Init);
 8005704:	ab04      	add	r3, sp, #16
 8005706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005708:	6820      	ldr	r0, [r4, #0]
 800570a:	f001 fcd1 	bl	80070b0 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 800570e:	2301      	movs	r3, #1
 8005710:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005714:	4628      	mov	r0, r5
 8005716:	e7b7      	b.n	8005688 <HAL_SD_ConfigWideBusOperation+0x74>
 8005718:	1fe00fff 	.word	0x1fe00fff

0800571c <HAL_SD_Init>:
{ 
 800571c:	b538      	push	{r3, r4, r5, lr}
  if(hsd == NULL)
 800571e:	4604      	mov	r4, r0
 8005720:	b910      	cbnz	r0, 8005728 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8005722:	2501      	movs	r5, #1
}
 8005724:	4628      	mov	r0, r5
 8005726:	bd38      	pop	{r3, r4, r5, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8005728:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800572c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005730:	b913      	cbnz	r3, 8005738 <HAL_SD_Init+0x1c>
    hsd->Lock = HAL_UNLOCKED;
 8005732:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8005734:	f01b ffaa 	bl	802168c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8005738:	2303      	movs	r3, #3
 800573a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800573e:	4620      	mov	r0, r4
 8005740:	f7ff fe4a 	bl	80053d8 <HAL_SD_InitCard>
 8005744:	2800      	cmp	r0, #0
 8005746:	d1ec      	bne.n	8005722 <HAL_SD_Init+0x6>
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005748:	68e1      	ldr	r1, [r4, #12]
 800574a:	4620      	mov	r0, r4
 800574c:	f7ff ff62 	bl	8005614 <HAL_SD_ConfigWideBusOperation>
 8005750:	4605      	mov	r5, r0
 8005752:	2800      	cmp	r0, #0
 8005754:	d1e5      	bne.n	8005722 <HAL_SD_Init+0x6>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005756:	69a3      	ldr	r3, [r4, #24]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d006      	beq.n	800576a <HAL_SD_Init+0x4e>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800575c:	2300      	movs	r3, #0
 800575e:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005760:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005762:	2301      	movs	r3, #1
 8005764:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005768:	e7dc      	b.n	8005724 <HAL_SD_Init+0x8>
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 800576a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800576c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005770:	d002      	beq.n	8005778 <HAL_SD_Init+0x5c>
 8005772:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005774:	2b01      	cmp	r3, #1
 8005776:	d1f1      	bne.n	800575c <HAL_SD_Init+0x40>
      hsd->Instance->CLKCR |= 0x00100000;
 8005778:	6822      	ldr	r2, [r4, #0]
 800577a:	6853      	ldr	r3, [r2, #4]
 800577c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005780:	6053      	str	r3, [r2, #4]
      if(HAL_SDEx_HighSpeed(hsd) != HAL_OK)
 8005782:	4620      	mov	r0, r4
 8005784:	f000 f818 	bl	80057b8 <HAL_SDEx_HighSpeed>
 8005788:	2800      	cmp	r0, #0
 800578a:	d0e7      	beq.n	800575c <HAL_SD_Init+0x40>
 800578c:	e7c9      	b.n	8005722 <HAL_SD_Init+0x6>

0800578e <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800578e:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8005790:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005792:	0409      	lsls	r1, r1, #16
{
 8005794:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005796:	6800      	ldr	r0, [r0, #0]
 8005798:	f001 ff5e 	bl	8007658 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 800579c:	4601      	mov	r1, r0
 800579e:	b928      	cbnz	r0, 80057ac <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80057a0:	6820      	ldr	r0, [r4, #0]
 80057a2:	f001 fcc9 	bl	8007138 <SDMMC_GetResponse>
  return cardstate;
 80057a6:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 80057aa:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 80057ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057ae:	4319      	orrs	r1, r3
 80057b0:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80057b2:	2000      	movs	r0, #0
 80057b4:	e7f7      	b.n	80057a6 <HAL_SD_GetCardState+0x18>

080057b6 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transciver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80057b6:	4770      	bx	lr

080057b8 <HAL_SDEx_HighSpeed>:
{
 80057b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t SD_hs[64]  = {0};
 80057bc:	2640      	movs	r6, #64	; 0x40
{
 80057be:	b096      	sub	sp, #88	; 0x58
 80057c0:	4605      	mov	r5, r0
  uint8_t SD_hs[64]  = {0};
 80057c2:	4632      	mov	r2, r6
 80057c4:	2100      	movs	r1, #0
 80057c6:	a806      	add	r0, sp, #24
 80057c8:	f01c fae1 	bl	8021d8e <memset>
  uint32_t Timeout = HAL_GetTick();
 80057cc:	f7fb fc28 	bl	8001020 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80057d0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 80057d2:	4680      	mov	r8, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d074      	beq.n	80058c2 <HAL_SDEx_HighSpeed+0x10a>
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 80057d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057dc:	d004      	beq.n	80057e8 <HAL_SDEx_HighSpeed+0x30>
  uint32_t errorstate = HAL_OK;
 80057de:	2400      	movs	r4, #0
}
 80057e0:	4620      	mov	r0, r4
 80057e2:	b016      	add	sp, #88	; 0x58
 80057e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      (hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE))
 80057e8:	69af      	ldr	r7, [r5, #24]
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 80057ea:	2f01      	cmp	r7, #1
 80057ec:	d1f7      	bne.n	80057de <HAL_SDEx_HighSpeed+0x26>
    hsd->Instance->DCTRL = 0;
 80057ee:	6828      	ldr	r0, [r5, #0]
 80057f0:	2300      	movs	r3, #0
 80057f2:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 80057f4:	4631      	mov	r1, r6
 80057f6:	f001 fd4b 	bl	8007290 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_OK)
 80057fa:	4604      	mov	r4, r0
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d1ef      	bne.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005800:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataLength    = 64;
 8005804:	e88d 0048 	stmia.w	sp, {r3, r6}
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8005808:	2360      	movs	r3, #96	; 0x60
 800580a:	9302      	str	r3, [sp, #8]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800580c:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800580e:	2302      	movs	r3, #2
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005810:	4669      	mov	r1, sp
 8005812:	6828      	ldr	r0, [r5, #0]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005814:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005816:	9705      	str	r7, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005818:	f001 fd28 	bl	800726c <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 800581c:	492a      	ldr	r1, [pc, #168]	; (80058c8 <HAL_SDEx_HighSpeed+0x110>)
 800581e:	6828      	ldr	r0, [r5, #0]
 8005820:	f001 ff33 	bl	800768a <SDMMC_CmdSwitch>
    if(errorstate != HAL_OK)
 8005824:	4604      	mov	r4, r0
 8005826:	2800      	cmp	r0, #0
 8005828:	d1da      	bne.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
 800582a:	ae06      	add	r6, sp, #24
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800582c:	f240 592a 	movw	r9, #1322	; 0x52a
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005834:	ea12 0f09 	tst.w	r2, r9
 8005838:	d005      	beq.n	8005846 <HAL_SDEx_HighSpeed+0x8e>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800583a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800583c:	0710      	lsls	r0, r2, #28
 800583e:	d51e      	bpl.n	800587e <HAL_SDEx_HighSpeed+0xc6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005840:	2208      	movs	r2, #8
 8005842:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8005844:	e7cc      	b.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005848:	041f      	lsls	r7, r3, #16
 800584a:	d50a      	bpl.n	8005862 <HAL_SDEx_HighSpeed+0xaa>
 800584c:	1f37      	subs	r7, r6, #4
 800584e:	f106 0a1c 	add.w	sl, r6, #28
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8005852:	6828      	ldr	r0, [r5, #0]
 8005854:	f001 fc46 	bl	80070e4 <SDMMC_ReadFIFO>
 8005858:	f847 0f04 	str.w	r0, [r7, #4]!
        for (count = 0; count < 8; count++)
 800585c:	4557      	cmp	r7, sl
 800585e:	d1f8      	bne.n	8005852 <HAL_SDEx_HighSpeed+0x9a>
        tempbuff += 8;
 8005860:	3620      	adds	r6, #32
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8005862:	f7fb fbdd 	bl	8001020 <HAL_GetTick>
 8005866:	eba0 0008 	sub.w	r0, r0, r8
 800586a:	3001      	adds	r0, #1
 800586c:	d1e0      	bne.n	8005830 <HAL_SDEx_HighSpeed+0x78>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800586e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005872:	63ab      	str	r3, [r5, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005874:	2301      	movs	r3, #1
 8005876:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        return HAL_TIMEOUT;
 800587a:	2403      	movs	r4, #3
 800587c:	e7b0      	b.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800587e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005880:	0791      	lsls	r1, r2, #30
 8005882:	d502      	bpl.n	800588a <HAL_SDEx_HighSpeed+0xd2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005884:	2402      	movs	r4, #2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005886:	639c      	str	r4, [r3, #56]	; 0x38
      return errorstate;
 8005888:	e7aa      	b.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800588a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800588c:	0692      	lsls	r2, r2, #26
 800588e:	d501      	bpl.n	8005894 <HAL_SDEx_HighSpeed+0xdc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005890:	2420      	movs	r4, #32
 8005892:	e7f8      	b.n	8005886 <HAL_SDEx_HighSpeed+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005894:	4a0d      	ldr	r2, [pc, #52]	; (80058cc <HAL_SDEx_HighSpeed+0x114>)
 8005896:	639a      	str	r2, [r3, #56]	; 0x38
    if ((SD_hs[13]& 2) != 2)
 8005898:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800589c:	079b      	lsls	r3, r3, #30
 800589e:	d502      	bpl.n	80058a6 <HAL_SDEx_HighSpeed+0xee>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80058a0:	2001      	movs	r0, #1
 80058a2:	f7ff ff88 	bl	80057b6 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80058a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80058aa:	6828      	ldr	r0, [r5, #0]
 80058ac:	f001 fcf0 	bl	8007290 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d094      	beq.n	80057de <HAL_SDEx_HighSpeed+0x26>
      hsd->State = HAL_SD_STATE_READY;
 80058b4:	2401      	movs	r4, #1
 80058b6:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
      hsd->ErrorCode |= errorstate;
 80058ba:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80058bc:	4318      	orrs	r0, r3
 80058be:	63a8      	str	r0, [r5, #56]	; 0x38
      return HAL_ERROR;
 80058c0:	e78e      	b.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE; 
 80058c2:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80058c6:	e78b      	b.n	80057e0 <HAL_SDEx_HighSpeed+0x28>
 80058c8:	80ffff01 	.word	0x80ffff01
 80058cc:	18000f3a 	.word	0x18000f3a

080058d0 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
 80058d0:	4770      	bx	lr

080058d2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
 80058d2:	4770      	bx	lr

080058d4 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
 80058d4:	4770      	bx	lr

080058d6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 80058d6:	4770      	bx	lr

080058d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058da:	4604      	mov	r4, r0
 80058dc:	2800      	cmp	r0, #0
 80058de:	d04a      	beq.n	8005976 <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058e0:	2300      	movs	r3, #0
 80058e2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058e4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80058e8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80058ec:	b91b      	cbnz	r3, 80058f6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058ee:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058f2:	f01b fcff 	bl	80212f4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058f6:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058f8:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80058fa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80058fe:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005900:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8005902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005906:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800590a:	600b      	str	r3, [r1, #0]
 800590c:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005910:	d92e      	bls.n	8005970 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005912:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005914:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005918:	bf18      	it	ne
 800591a:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800591c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800591e:	b92b      	cbnz	r3, 800592c <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005920:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005924:	bf8c      	ite	hi
 8005926:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005928:	2301      	movls	r3, #1
 800592a:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800592c:	68a6      	ldr	r6, [r4, #8]
 800592e:	6863      	ldr	r3, [r4, #4]
 8005930:	69a5      	ldr	r5, [r4, #24]
 8005932:	4333      	orrs	r3, r6
 8005934:	6926      	ldr	r6, [r4, #16]
 8005936:	4333      	orrs	r3, r6
 8005938:	6966      	ldr	r6, [r4, #20]
 800593a:	4333      	orrs	r3, r6
 800593c:	69e6      	ldr	r6, [r4, #28]
 800593e:	4333      	orrs	r3, r6
 8005940:	6a26      	ldr	r6, [r4, #32]
 8005942:	4333      	orrs	r3, r6
 8005944:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005946:	4333      	orrs	r3, r6
 8005948:	f405 7600 	and.w	r6, r5, #512	; 0x200
 800594c:	4333      	orrs	r3, r6
 800594e:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005952:	431a      	orrs	r2, r3
 8005954:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005956:	0c2d      	lsrs	r5, r5, #16
 8005958:	431a      	orrs	r2, r3
 800595a:	f005 0504 	and.w	r5, r5, #4
 800595e:	432a      	orrs	r2, r5
 8005960:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8005962:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005964:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005966:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005968:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800596a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

	
  return HAL_OK;
 800596e:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005970:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005974:	e7d0      	b.n	8005918 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8005976:	2001      	movs	r0, #1
}
 8005978:	bd70      	pop	{r4, r5, r6, pc}

0800597a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800597a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800597e:	461d      	mov	r5, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005980:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8005984:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8005988:	2b01      	cmp	r3, #1
{
 800598a:	4604      	mov	r4, r0
 800598c:	460e      	mov	r6, r1
 800598e:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8005990:	d07d      	beq.n	8005a8e <HAL_SPI_TransmitReceive+0x114>
 8005992:	2301      	movs	r3, #1
 8005994:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005998:	f7fb fb42 	bl	8001020 <HAL_GetTick>

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800599c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	hspi->TxISR       = NULL;


  /* Set the Rx Fifo threshold */
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059a0:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 80059a2:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059a6:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059a8:	bf1c      	itt	ne
 80059aa:	2305      	movne	r3, #5
 80059ac:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059b0:	2300      	movs	r3, #0
 80059b2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80059b4:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 80059b8:	87e5      	strh	r5, [r4, #62]	; 0x3e
	hspi->TxISR       = NULL;
 80059ba:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059bc:	6853      	ldr	r3, [r2, #4]
	hspi->TxXferSize  = Size;
 80059be:	87a5      	strh	r5, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059c4:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059c6:	63a6      	str	r6, [r4, #56]	; 0x38
  tickstart = HAL_GetTick();
 80059c8:	4681      	mov	r9, r0
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059ca:	6053      	str	r3, [r2, #4]
  uint32_t txallowed = 1U;
 80059cc:	2501      	movs	r5, #1


    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b95b      	cbnz	r3, 80059ec <HAL_SPI_TransmitReceive+0x72>
 80059d4:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 80059d8:	b280      	uxth	r0, r0
 80059da:	b938      	cbnz	r0, 80059ec <HAL_SPI_TransmitReceive+0x72>
    }
 // }


error :
  hspi->State = HAL_SPI_STATE_READY;
 80059dc:	2301      	movs	r3, #1
 80059de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80059e2:	2300      	movs	r3, #0
 80059e4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80059e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80059ec:	b195      	cbz	r5, 8005a14 <HAL_SPI_TransmitReceive+0x9a>
 80059ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	b17b      	cbz	r3, 8005a14 <HAL_SPI_TransmitReceive+0x9a>
 80059f4:	6823      	ldr	r3, [r4, #0]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	0791      	lsls	r1, r2, #30
 80059fa:	d50b      	bpl.n	8005a14 <HAL_SPI_TransmitReceive+0x9a>
        if (hspi->TxXferCount > 1U)
 80059fc:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80059fe:	b292      	uxth	r2, r2
 8005a00:	2a01      	cmp	r2, #1
 8005a02:	d932      	bls.n	8005a6a <HAL_SPI_TransmitReceive+0xf0>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8005a04:	f836 2b02 	ldrh.w	r2, [r6], #2
 8005a08:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8005a0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a0c:	3b02      	subs	r3, #2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005a12:	2500      	movs	r5, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005a14:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	b1db      	cbz	r3, 8005a54 <HAL_SPI_TransmitReceive+0xda>
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	07d2      	lsls	r2, r2, #31
 8005a22:	d517      	bpl.n	8005a54 <HAL_SPI_TransmitReceive+0xda>
        if (hspi->RxXferCount > 1U)
 8005a24:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005a28:	b292      	uxth	r2, r2
 8005a2a:	2a01      	cmp	r2, #1
 8005a2c:	d925      	bls.n	8005a7a <HAL_SPI_TransmitReceive+0x100>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	f827 2b02 	strh.w	r2, [r7], #2
          hspi->RxXferCount -= 2U;
 8005a34:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005a38:	3a02      	subs	r2, #2
 8005a3a:	b292      	uxth	r2, r2
 8005a3c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005a40:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005a44:	b292      	uxth	r2, r2
 8005a46:	2a01      	cmp	r2, #1
 8005a48:	d803      	bhi.n	8005a52 <HAL_SPI_TransmitReceive+0xd8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a50:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8005a52:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005a54:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005a58:	d0b9      	beq.n	80059ce <HAL_SPI_TransmitReceive+0x54>
 8005a5a:	f7fb fae1 	bl	8001020 <HAL_GetTick>
 8005a5e:	eba0 0009 	sub.w	r0, r0, r9
 8005a62:	4580      	cmp	r8, r0
 8005a64:	d8b3      	bhi.n	80059ce <HAL_SPI_TransmitReceive+0x54>
        errorcode = HAL_TIMEOUT;
 8005a66:	2003      	movs	r0, #3
 8005a68:	e7b8      	b.n	80059dc <HAL_SPI_TransmitReceive+0x62>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005a6a:	7832      	ldrb	r2, [r6, #0]
 8005a6c:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8005a6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005a76:	3601      	adds	r6, #1
 8005a78:	e7cb      	b.n	8005a12 <HAL_SPI_TransmitReceive+0x98>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a7a:	7b1b      	ldrb	r3, [r3, #12]
 8005a7c:	703b      	strb	r3, [r7, #0]
          hspi->RxXferCount--;
 8005a7e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005a82:	3b01      	subs	r3, #1
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a8a:	3701      	adds	r7, #1
 8005a8c:	e7e1      	b.n	8005a52 <HAL_SPI_TransmitReceive+0xd8>
  __HAL_LOCK(hspi);
 8005a8e:	2002      	movs	r0, #2
  return errorcode;
}
 8005a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005a94 <HAL_SPI_ErrorCallback>:
 8005a94:	4770      	bx	lr
	...

08005a98 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8005a98:	6803      	ldr	r3, [r0, #0]
{
 8005a9a:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8005a9c:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005a9e:	689a      	ldr	r2, [r3, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8005aa0:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8005aa4:	2d01      	cmp	r5, #1
{
 8005aa6:	b085      	sub	sp, #20
 8005aa8:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8005aaa:	d105      	bne.n	8005ab8 <HAL_SPI_IRQHandler+0x20>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8005aac:	064d      	lsls	r5, r1, #25
 8005aae:	d503      	bpl.n	8005ab8 <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 8005ab0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 8005ab2:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 8005ab4:	b005      	add	sp, #20
 8005ab6:	bd30      	pop	{r4, r5, pc}
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8005ab8:	0795      	lsls	r5, r2, #30
 8005aba:	d504      	bpl.n	8005ac6 <HAL_SPI_IRQHandler+0x2e>
 8005abc:	0608      	lsls	r0, r1, #24
 8005abe:	d502      	bpl.n	8005ac6 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8005ac0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	e7f5      	b.n	8005ab2 <HAL_SPI_IRQHandler+0x1a>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8005ac6:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8005aca:	d0f3      	beq.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
 8005acc:	068d      	lsls	r5, r1, #26
 8005ace:	d5f1      	bpl.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8005ad0:	0650      	lsls	r0, r2, #25
 8005ad2:	d50f      	bpl.n	8005af4 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ad4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005ad8:	2803      	cmp	r0, #3
 8005ada:	f04f 0500 	mov.w	r5, #0
 8005ade:	d041      	beq.n	8005b64 <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ae0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005ae2:	f040 0004 	orr.w	r0, r0, #4
 8005ae6:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ae8:	9500      	str	r5, [sp, #0]
 8005aea:	68d8      	ldr	r0, [r3, #12]
 8005aec:	9000      	str	r0, [sp, #0]
 8005aee:	6898      	ldr	r0, [r3, #8]
 8005af0:	9000      	str	r0, [sp, #0]
 8005af2:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8005af4:	0695      	lsls	r5, r2, #26
 8005af6:	d50c      	bpl.n	8005b12 <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005af8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005afa:	f040 0001 	orr.w	r0, r0, #1
 8005afe:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005b00:	2000      	movs	r0, #0
 8005b02:	9002      	str	r0, [sp, #8]
 8005b04:	6898      	ldr	r0, [r3, #8]
 8005b06:	9002      	str	r0, [sp, #8]
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005b0e:	6018      	str	r0, [r3, #0]
 8005b10:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8005b12:	05d0      	lsls	r0, r2, #23
 8005b14:	d508      	bpl.n	8005b28 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b16:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005b18:	f042 0208 	orr.w	r2, r2, #8
 8005b1c:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b1e:	2200      	movs	r2, #0
 8005b20:	9203      	str	r2, [sp, #12]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	9203      	str	r2, [sp, #12]
 8005b26:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b28:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005b2a:	2a00      	cmp	r2, #0
 8005b2c:	d0c2      	beq.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b2e:	685a      	ldr	r2, [r3, #4]
 8005b30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b34:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005b36:	2201      	movs	r2, #1
 8005b38:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b3c:	078a      	lsls	r2, r1, #30
 8005b3e:	d018      	beq.n	8005b72 <HAL_SPI_IRQHandler+0xda>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b40:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005b42:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b44:	f022 0203 	bic.w	r2, r2, #3
 8005b48:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005b4a:	b118      	cbz	r0, 8005b54 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b4c:	4b0b      	ldr	r3, [pc, #44]	; (8005b7c <HAL_SPI_IRQHandler+0xe4>)
 8005b4e:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8005b50:	f7fc f8f2 	bl	8001d38 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8005b54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d0ac      	beq.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b5a:	4b08      	ldr	r3, [pc, #32]	; (8005b7c <HAL_SPI_IRQHandler+0xe4>)
 8005b5c:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8005b5e:	f7fc f8eb 	bl	8001d38 <HAL_DMA_Abort_IT>
 8005b62:	e7a7      	b.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b64:	9501      	str	r5, [sp, #4]
 8005b66:	68da      	ldr	r2, [r3, #12]
 8005b68:	9201      	str	r2, [sp, #4]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	9b01      	ldr	r3, [sp, #4]
        return;
 8005b70:	e7a0      	b.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8005b72:	4620      	mov	r0, r4
 8005b74:	f7ff ff8e 	bl	8005a94 <HAL_SPI_ErrorCallback>
 8005b78:	e79c      	b.n	8005ab4 <HAL_SPI_IRQHandler+0x1c>
 8005b7a:	bf00      	nop
 8005b7c:	08005b81 	.word	0x08005b81

08005b80 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b80:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b82:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005b8a:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8005b8c:	f7ff ff82 	bl	8005a94 <HAL_SPI_ErrorCallback>
 8005b90:	bd08      	pop	{r3, pc}
	...

08005b94 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b94:	6a03      	ldr	r3, [r0, #32]
 8005b96:	f023 0301 	bic.w	r3, r3, #1
 8005b9a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9c:	6a03      	ldr	r3, [r0, #32]
{
 8005b9e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ba2:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ba4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ba6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005baa:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005bae:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bb0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005bb2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005bb6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bb8:	4d1b      	ldr	r5, [pc, #108]	; (8005c28 <TIM_OC1_SetConfig+0x94>)
 8005bba:	42a8      	cmp	r0, r5
 8005bbc:	d00f      	beq.n	8005bde <TIM_OC1_SetConfig+0x4a>
 8005bbe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005bc2:	42a8      	cmp	r0, r5
 8005bc4:	d00b      	beq.n	8005bde <TIM_OC1_SetConfig+0x4a>
 8005bc6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005bca:	42a8      	cmp	r0, r5
 8005bcc:	d007      	beq.n	8005bde <TIM_OC1_SetConfig+0x4a>
 8005bce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bd2:	42a8      	cmp	r0, r5
 8005bd4:	d003      	beq.n	8005bde <TIM_OC1_SetConfig+0x4a>
 8005bd6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bda:	42a8      	cmp	r0, r5
 8005bdc:	d11e      	bne.n	8005c1c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bde:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005be0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005be4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be6:	4d10      	ldr	r5, [pc, #64]	; (8005c28 <TIM_OC1_SetConfig+0x94>)
 8005be8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bea:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bee:	d00f      	beq.n	8005c10 <TIM_OC1_SetConfig+0x7c>
 8005bf0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005bf4:	42a8      	cmp	r0, r5
 8005bf6:	d00b      	beq.n	8005c10 <TIM_OC1_SetConfig+0x7c>
 8005bf8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005bfc:	42a8      	cmp	r0, r5
 8005bfe:	d007      	beq.n	8005c10 <TIM_OC1_SetConfig+0x7c>
 8005c00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c04:	42a8      	cmp	r0, r5
 8005c06:	d003      	beq.n	8005c10 <TIM_OC1_SetConfig+0x7c>
 8005c08:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c0c:	42a8      	cmp	r0, r5
 8005c0e:	d105      	bne.n	8005c1c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c10:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c14:	698e      	ldr	r6, [r1, #24]
 8005c16:	694c      	ldr	r4, [r1, #20]
 8005c18:	4334      	orrs	r4, r6
 8005c1a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c1e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c20:	684a      	ldr	r2, [r1, #4]
 8005c22:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c24:	6203      	str	r3, [r0, #32]
 8005c26:	bd70      	pop	{r4, r5, r6, pc}
 8005c28:	40012c00 	.word	0x40012c00

08005c2c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c2c:	6a03      	ldr	r3, [r0, #32]
 8005c2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c32:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c34:	6a03      	ldr	r3, [r0, #32]
{
 8005c36:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c38:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c3a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c3c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c42:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005c46:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c48:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005c4a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c4e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c52:	4d16      	ldr	r5, [pc, #88]	; (8005cac <TIM_OC3_SetConfig+0x80>)
 8005c54:	42a8      	cmp	r0, r5
 8005c56:	d003      	beq.n	8005c60 <TIM_OC3_SetConfig+0x34>
 8005c58:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005c5c:	42a8      	cmp	r0, r5
 8005c5e:	d10d      	bne.n	8005c7c <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c60:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c66:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6a:	4d10      	ldr	r5, [pc, #64]	; (8005cac <TIM_OC3_SetConfig+0x80>)
 8005c6c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c72:	d00e      	beq.n	8005c92 <TIM_OC3_SetConfig+0x66>
 8005c74:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005c78:	42a8      	cmp	r0, r5
 8005c7a:	d00a      	beq.n	8005c92 <TIM_OC3_SetConfig+0x66>
 8005c7c:	4d0c      	ldr	r5, [pc, #48]	; (8005cb0 <TIM_OC3_SetConfig+0x84>)
 8005c7e:	42a8      	cmp	r0, r5
 8005c80:	d007      	beq.n	8005c92 <TIM_OC3_SetConfig+0x66>
 8005c82:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c86:	42a8      	cmp	r0, r5
 8005c88:	d003      	beq.n	8005c92 <TIM_OC3_SetConfig+0x66>
 8005c8a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c8e:	42a8      	cmp	r0, r5
 8005c90:	d106      	bne.n	8005ca0 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c92:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c96:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c98:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c9a:	4334      	orrs	r4, r6
 8005c9c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ca4:	684a      	ldr	r2, [r1, #4]
 8005ca6:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ca8:	6203      	str	r3, [r0, #32]
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	40012c00 	.word	0x40012c00
 8005cb0:	40014000 	.word	0x40014000

08005cb4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cb4:	6a03      	ldr	r3, [r0, #32]
 8005cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cba:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cbc:	6a03      	ldr	r3, [r0, #32]
{
 8005cbe:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cc0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cc2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cc6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005cca:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cdc:	4d0e      	ldr	r5, [pc, #56]	; (8005d18 <TIM_OC4_SetConfig+0x64>)
 8005cde:	42a8      	cmp	r0, r5
 8005ce0:	d00f      	beq.n	8005d02 <TIM_OC4_SetConfig+0x4e>
 8005ce2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ce6:	42a8      	cmp	r0, r5
 8005ce8:	d00b      	beq.n	8005d02 <TIM_OC4_SetConfig+0x4e>
 8005cea:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005cee:	42a8      	cmp	r0, r5
 8005cf0:	d007      	beq.n	8005d02 <TIM_OC4_SetConfig+0x4e>
 8005cf2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005cf6:	42a8      	cmp	r0, r5
 8005cf8:	d003      	beq.n	8005d02 <TIM_OC4_SetConfig+0x4e>
 8005cfa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005cfe:	42a8      	cmp	r0, r5
 8005d00:	d104      	bne.n	8005d0c <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d02:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d04:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d08:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d0c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d0e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d10:	684a      	ldr	r2, [r1, #4]
 8005d12:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d14:	6203      	str	r3, [r0, #32]
 8005d16:	bd30      	pop	{r4, r5, pc}
 8005d18:	40012c00 	.word	0x40012c00

08005d1c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d1c:	6a03      	ldr	r3, [r0, #32]
 8005d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d22:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d24:	6a03      	ldr	r3, [r0, #32]
{
 8005d26:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d28:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d2a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d32:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005d36:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d38:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005d3a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d3e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d42:	4d0f      	ldr	r5, [pc, #60]	; (8005d80 <TIM_OC5_SetConfig+0x64>)
 8005d44:	42a8      	cmp	r0, r5
 8005d46:	d00f      	beq.n	8005d68 <TIM_OC5_SetConfig+0x4c>
 8005d48:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005d4c:	42a8      	cmp	r0, r5
 8005d4e:	d00b      	beq.n	8005d68 <TIM_OC5_SetConfig+0x4c>
 8005d50:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005d54:	42a8      	cmp	r0, r5
 8005d56:	d007      	beq.n	8005d68 <TIM_OC5_SetConfig+0x4c>
 8005d58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d5c:	42a8      	cmp	r0, r5
 8005d5e:	d003      	beq.n	8005d68 <TIM_OC5_SetConfig+0x4c>
 8005d60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d64:	42a8      	cmp	r0, r5
 8005d66:	d104      	bne.n	8005d72 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d68:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d6a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d6e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d72:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d74:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d76:	684a      	ldr	r2, [r1, #4]
 8005d78:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7a:	6203      	str	r3, [r0, #32]
 8005d7c:	bd30      	pop	{r4, r5, pc}
 8005d7e:	bf00      	nop
 8005d80:	40012c00 	.word	0x40012c00

08005d84 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d84:	6a03      	ldr	r3, [r0, #32]
 8005d86:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d8a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8c:	6a03      	ldr	r3, [r0, #32]
{
 8005d8e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d90:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d92:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d96:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005d9a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d9e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005da2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005da4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005da8:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dac:	4d0e      	ldr	r5, [pc, #56]	; (8005de8 <TIM_OC6_SetConfig+0x64>)
 8005dae:	42a8      	cmp	r0, r5
 8005db0:	d00f      	beq.n	8005dd2 <TIM_OC6_SetConfig+0x4e>
 8005db2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005db6:	42a8      	cmp	r0, r5
 8005db8:	d00b      	beq.n	8005dd2 <TIM_OC6_SetConfig+0x4e>
 8005dba:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005dbe:	42a8      	cmp	r0, r5
 8005dc0:	d007      	beq.n	8005dd2 <TIM_OC6_SetConfig+0x4e>
 8005dc2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005dc6:	42a8      	cmp	r0, r5
 8005dc8:	d003      	beq.n	8005dd2 <TIM_OC6_SetConfig+0x4e>
 8005dca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005dce:	42a8      	cmp	r0, r5
 8005dd0:	d104      	bne.n	8005ddc <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dd2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dd4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dd8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ddc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dde:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005de0:	684a      	ldr	r2, [r1, #4]
 8005de2:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de4:	6203      	str	r3, [r0, #32]
 8005de6:	bd30      	pop	{r4, r5, pc}
 8005de8:	40012c00 	.word	0x40012c00

08005dec <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	2302      	movs	r3, #2
{
 8005dee:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005df4:	6803      	ldr	r3, [r0, #0]
 8005df6:	4c09      	ldr	r4, [pc, #36]	; (8005e1c <HAL_TIM_Base_Start+0x30>)
 8005df8:	6899      	ldr	r1, [r3, #8]
 8005dfa:	4021      	ands	r1, r4
 8005dfc:	2906      	cmp	r1, #6
 8005dfe:	d008      	beq.n	8005e12 <HAL_TIM_Base_Start+0x26>
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	4022      	ands	r2, r4
 8005e04:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005e08:	bf1e      	ittt	ne
 8005e0a:	681a      	ldrne	r2, [r3, #0]
 8005e0c:	f042 0201 	orrne.w	r2, r2, #1
 8005e10:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005e12:	2301      	movs	r3, #1
 8005e14:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005e18:	2000      	movs	r0, #0
 8005e1a:	bd10      	pop	{r4, pc}
 8005e1c:	00010007 	.word	0x00010007

08005e20 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e20:	6803      	ldr	r3, [r0, #0]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005e22:	480a      	ldr	r0, [pc, #40]	; (8005e4c <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005e2c:	6899      	ldr	r1, [r3, #8]
 8005e2e:	4001      	ands	r1, r0
 8005e30:	2906      	cmp	r1, #6
 8005e32:	d008      	beq.n	8005e46 <HAL_TIM_Base_Start_IT+0x26>
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	4002      	ands	r2, r0
 8005e38:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005e3c:	bf1e      	ittt	ne
 8005e3e:	681a      	ldrne	r2, [r3, #0]
 8005e40:	f042 0201 	orrne.w	r2, r2, #1
 8005e44:	601a      	strne	r2, [r3, #0]
}
 8005e46:	2000      	movs	r0, #0
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	00010007 	.word	0x00010007

08005e50 <HAL_TIM_PeriodElapsedCallback>:
 8005e50:	4770      	bx	lr

08005e52 <HAL_TIM_OC_DelayElapsedCallback>:
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIM_IC_CaptureCallback>:
 8005e54:	4770      	bx	lr

08005e56 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIM_TriggerCallback>:
 8005e58:	4770      	bx	lr

08005e5a <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e5a:	6803      	ldr	r3, [r0, #0]
 8005e5c:	691a      	ldr	r2, [r3, #16]
 8005e5e:	0791      	lsls	r1, r2, #30
{
 8005e60:	b510      	push	{r4, lr}
 8005e62:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e64:	d50f      	bpl.n	8005e86 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	0792      	lsls	r2, r2, #30
 8005e6a:	d50c      	bpl.n	8005e86 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e6c:	f06f 0202 	mvn.w	r2, #2
 8005e70:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e72:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e74:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e76:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e78:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e7a:	f000 8085 	beq.w	8005f88 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	f7ff ffe9 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e82:	2300      	movs	r3, #0
 8005e84:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	691a      	ldr	r2, [r3, #16]
 8005e8a:	0752      	lsls	r2, r2, #29
 8005e8c:	d510      	bpl.n	8005eb0 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e8e:	68da      	ldr	r2, [r3, #12]
 8005e90:	0750      	lsls	r0, r2, #29
 8005e92:	d50d      	bpl.n	8005eb0 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e94:	f06f 0204 	mvn.w	r2, #4
 8005e98:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e9a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e9c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e9e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ea2:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ea6:	d075      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea8:	f7ff ffd4 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eac:	2300      	movs	r3, #0
 8005eae:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005eb0:	6823      	ldr	r3, [r4, #0]
 8005eb2:	691a      	ldr	r2, [r3, #16]
 8005eb4:	0711      	lsls	r1, r2, #28
 8005eb6:	d50f      	bpl.n	8005ed8 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	0712      	lsls	r2, r2, #28
 8005ebc:	d50c      	bpl.n	8005ed8 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ebe:	f06f 0208 	mvn.w	r2, #8
 8005ec2:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ec4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ec6:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ec8:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eca:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005ecc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ece:	d067      	beq.n	8005fa0 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed0:	f7ff ffc0 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	691a      	ldr	r2, [r3, #16]
 8005edc:	06d0      	lsls	r0, r2, #27
 8005ede:	d510      	bpl.n	8005f02 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	06d1      	lsls	r1, r2, #27
 8005ee4:	d50d      	bpl.n	8005f02 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ee6:	f06f 0210 	mvn.w	r2, #16
 8005eea:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005eec:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005eee:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ef4:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef8:	d058      	beq.n	8005fac <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	f7ff ffab 	bl	8005e54 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	2300      	movs	r3, #0
 8005f00:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	07d2      	lsls	r2, r2, #31
 8005f08:	d508      	bpl.n	8005f1c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	07d0      	lsls	r0, r2, #31
 8005f0e:	d505      	bpl.n	8005f1c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f10:	f06f 0201 	mvn.w	r2, #1
 8005f14:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f16:	4620      	mov	r0, r4
 8005f18:	f7ff ff9a 	bl	8005e50 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	0611      	lsls	r1, r2, #24
 8005f22:	d508      	bpl.n	8005f36 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	0612      	lsls	r2, r2, #24
 8005f28:	d505      	bpl.n	8005f36 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f2e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005f30:	4620      	mov	r0, r4
 8005f32:	f000 fb98 	bl	8006666 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	691a      	ldr	r2, [r3, #16]
 8005f3a:	05d0      	lsls	r0, r2, #23
 8005f3c:	d508      	bpl.n	8005f50 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	0611      	lsls	r1, r2, #24
 8005f42:	d505      	bpl.n	8005f50 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f44:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f48:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f000 fb8c 	bl	8006668 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	691a      	ldr	r2, [r3, #16]
 8005f54:	0652      	lsls	r2, r2, #25
 8005f56:	d508      	bpl.n	8005f6a <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	0650      	lsls	r0, r2, #25
 8005f5c:	d505      	bpl.n	8005f6a <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f62:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005f64:	4620      	mov	r0, r4
 8005f66:	f7ff ff77 	bl	8005e58 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	0691      	lsls	r1, r2, #26
 8005f70:	d522      	bpl.n	8005fb8 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f72:	68da      	ldr	r2, [r3, #12]
 8005f74:	0692      	lsls	r2, r2, #26
 8005f76:	d51f      	bpl.n	8005fb8 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f78:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8005f7c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f7e:	611a      	str	r2, [r3, #16]
}
 8005f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8005f84:	f000 bb6e 	b.w	8006664 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f88:	f7ff ff63 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8c:	4620      	mov	r0, r4
 8005f8e:	f7ff ff62 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f92:	e776      	b.n	8005e82 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f94:	f7ff ff5d 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f98:	4620      	mov	r0, r4
 8005f9a:	f7ff ff5c 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f9e:	e785      	b.n	8005eac <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa0:	f7ff ff57 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f7ff ff56 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
 8005faa:	e793      	b.n	8005ed4 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fac:	f7ff ff51 	bl	8005e52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	f7ff ff50 	bl	8005e56 <HAL_TIM_PWM_PulseFinishedCallback>
 8005fb6:	e7a2      	b.n	8005efe <HAL_TIM_IRQHandler+0xa4>
 8005fb8:	bd10      	pop	{r4, pc}
	...

08005fbc <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fbc:	4a30      	ldr	r2, [pc, #192]	; (8006080 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005fbe:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fc0:	4290      	cmp	r0, r2
 8005fc2:	d012      	beq.n	8005fea <TIM_Base_SetConfig+0x2e>
 8005fc4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005fc8:	d00f      	beq.n	8005fea <TIM_Base_SetConfig+0x2e>
 8005fca:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005fce:	4290      	cmp	r0, r2
 8005fd0:	d00b      	beq.n	8005fea <TIM_Base_SetConfig+0x2e>
 8005fd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fd6:	4290      	cmp	r0, r2
 8005fd8:	d007      	beq.n	8005fea <TIM_Base_SetConfig+0x2e>
 8005fda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fde:	4290      	cmp	r0, r2
 8005fe0:	d003      	beq.n	8005fea <TIM_Base_SetConfig+0x2e>
 8005fe2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005fe6:	4290      	cmp	r0, r2
 8005fe8:	d119      	bne.n	800601e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005fea:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ff0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ff2:	4a23      	ldr	r2, [pc, #140]	; (8006080 <TIM_Base_SetConfig+0xc4>)
 8005ff4:	4290      	cmp	r0, r2
 8005ff6:	d01d      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 8005ff8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005ffc:	d01a      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 8005ffe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8006002:	4290      	cmp	r0, r2
 8006004:	d016      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 8006006:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800600a:	4290      	cmp	r0, r2
 800600c:	d012      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 800600e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006012:	4290      	cmp	r0, r2
 8006014:	d00e      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 8006016:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800601a:	4290      	cmp	r0, r2
 800601c:	d00a      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 800601e:	4a19      	ldr	r2, [pc, #100]	; (8006084 <TIM_Base_SetConfig+0xc8>)
 8006020:	4290      	cmp	r0, r2
 8006022:	d007      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 8006024:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006028:	4290      	cmp	r0, r2
 800602a:	d003      	beq.n	8006034 <TIM_Base_SetConfig+0x78>
 800602c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006030:	4290      	cmp	r0, r2
 8006032:	d103      	bne.n	800603c <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006034:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800603a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800603c:	694a      	ldr	r2, [r1, #20]
 800603e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006042:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006044:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006046:	688b      	ldr	r3, [r1, #8]
 8006048:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800604a:	680b      	ldr	r3, [r1, #0]
 800604c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800604e:	4b0c      	ldr	r3, [pc, #48]	; (8006080 <TIM_Base_SetConfig+0xc4>)
 8006050:	4298      	cmp	r0, r3
 8006052:	d00f      	beq.n	8006074 <TIM_Base_SetConfig+0xb8>
 8006054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006058:	4298      	cmp	r0, r3
 800605a:	d00b      	beq.n	8006074 <TIM_Base_SetConfig+0xb8>
 800605c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8006060:	4298      	cmp	r0, r3
 8006062:	d007      	beq.n	8006074 <TIM_Base_SetConfig+0xb8>
 8006064:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006068:	4298      	cmp	r0, r3
 800606a:	d003      	beq.n	8006074 <TIM_Base_SetConfig+0xb8>
 800606c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006070:	4298      	cmp	r0, r3
 8006072:	d101      	bne.n	8006078 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8006074:	690b      	ldr	r3, [r1, #16]
 8006076:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006078:	2301      	movs	r3, #1
 800607a:	6143      	str	r3, [r0, #20]
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40014000 	.word	0x40014000

08006088 <HAL_TIM_Base_Init>:
{
 8006088:	b510      	push	{r4, lr}
  if (htim == NULL)
 800608a:	4604      	mov	r4, r0
 800608c:	b1a0      	cbz	r0, 80060b8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800608e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006092:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006096:	b91b      	cbnz	r3, 80060a0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006098:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800609c:	f01b f9e4 	bl	8021468 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80060a0:	2302      	movs	r3, #2
 80060a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a6:	6820      	ldr	r0, [r4, #0]
 80060a8:	1d21      	adds	r1, r4, #4
 80060aa:	f7ff ff87 	bl	8005fbc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80060ae:	2301      	movs	r3, #1
 80060b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80060b4:	2000      	movs	r0, #0
 80060b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80060b8:	2001      	movs	r0, #1
}
 80060ba:	bd10      	pop	{r4, pc}

080060bc <HAL_TIM_OC_Init>:
{
 80060bc:	b510      	push	{r4, lr}
  if (htim == NULL)
 80060be:	4604      	mov	r4, r0
 80060c0:	b1a0      	cbz	r0, 80060ec <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80060c2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060c6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060ca:	b91b      	cbnz	r3, 80060d4 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80060cc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80060d0:	f01b fa2c 	bl	802152c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	2302      	movs	r3, #2
 80060d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80060da:	6820      	ldr	r0, [r4, #0]
 80060dc:	1d21      	adds	r1, r4, #4
 80060de:	f7ff ff6d 	bl	8005fbc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80060e2:	2301      	movs	r3, #1
 80060e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80060e8:	2000      	movs	r0, #0
 80060ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80060ec:	2001      	movs	r0, #1
}
 80060ee:	bd10      	pop	{r4, pc}

080060f0 <HAL_TIM_PWM_Init>:
{
 80060f0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80060f2:	4604      	mov	r4, r0
 80060f4:	b1a0      	cbz	r0, 8006120 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80060f6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060fe:	b91b      	cbnz	r3, 8006108 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006100:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8006104:	f01b fafe 	bl	8021704 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	2302      	movs	r3, #2
 800610a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800610e:	6820      	ldr	r0, [r4, #0]
 8006110:	1d21      	adds	r1, r4, #4
 8006112:	f7ff ff53 	bl	8005fbc <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006116:	2301      	movs	r3, #1
 8006118:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800611c:	2000      	movs	r0, #0
 800611e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006120:	2001      	movs	r0, #1
}
 8006122:	bd10      	pop	{r4, pc}

08006124 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006124:	6a03      	ldr	r3, [r0, #32]
 8006126:	f023 0310 	bic.w	r3, r3, #16
 800612a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800612c:	6a03      	ldr	r3, [r0, #32]
{
 800612e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8006130:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006132:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006134:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006136:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800613a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800613e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006142:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006144:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006148:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800614c:	4d16      	ldr	r5, [pc, #88]	; (80061a8 <TIM_OC2_SetConfig+0x84>)
 800614e:	42a8      	cmp	r0, r5
 8006150:	d003      	beq.n	800615a <TIM_OC2_SetConfig+0x36>
 8006152:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006156:	42a8      	cmp	r0, r5
 8006158:	d10d      	bne.n	8006176 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800615a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800615c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006160:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006164:	4d10      	ldr	r5, [pc, #64]	; (80061a8 <TIM_OC2_SetConfig+0x84>)
 8006166:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8006168:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800616c:	d00e      	beq.n	800618c <TIM_OC2_SetConfig+0x68>
 800616e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006172:	42a8      	cmp	r0, r5
 8006174:	d00a      	beq.n	800618c <TIM_OC2_SetConfig+0x68>
 8006176:	4d0d      	ldr	r5, [pc, #52]	; (80061ac <TIM_OC2_SetConfig+0x88>)
 8006178:	42a8      	cmp	r0, r5
 800617a:	d007      	beq.n	800618c <TIM_OC2_SetConfig+0x68>
 800617c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006180:	42a8      	cmp	r0, r5
 8006182:	d003      	beq.n	800618c <TIM_OC2_SetConfig+0x68>
 8006184:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006188:	42a8      	cmp	r0, r5
 800618a:	d106      	bne.n	800619a <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800618c:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006190:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006192:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006194:	4334      	orrs	r4, r6
 8006196:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800619a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800619c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800619e:	684a      	ldr	r2, [r1, #4]
 80061a0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80061a2:	6203      	str	r3, [r0, #32]
 80061a4:	bd70      	pop	{r4, r5, r6, pc}
 80061a6:	bf00      	nop
 80061a8:	40012c00 	.word	0x40012c00
 80061ac:	40014000 	.word	0x40014000

080061b0 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80061b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80061b4:	2b01      	cmp	r3, #1
{
 80061b6:	b510      	push	{r4, lr}
 80061b8:	4604      	mov	r4, r0
 80061ba:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80061be:	d010      	beq.n	80061e2 <HAL_TIM_OC_ConfigChannel+0x32>
 80061c0:	2301      	movs	r3, #1
  switch (Channel)
 80061c2:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80061c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80061c8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80061cc:	d01c      	beq.n	8006208 <HAL_TIM_OC_ConfigChannel+0x58>
 80061ce:	d809      	bhi.n	80061e4 <HAL_TIM_OC_ConfigChannel+0x34>
 80061d0:	b192      	cbz	r2, 80061f8 <HAL_TIM_OC_ConfigChannel+0x48>
 80061d2:	2a04      	cmp	r2, #4
 80061d4:	d014      	beq.n	8006200 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 80061d6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80061d8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80061da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80061de:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80061e2:	bd10      	pop	{r4, pc}
  switch (Channel)
 80061e4:	2a10      	cmp	r2, #16
 80061e6:	d013      	beq.n	8006210 <HAL_TIM_OC_ConfigChannel+0x60>
 80061e8:	2a14      	cmp	r2, #20
 80061ea:	d015      	beq.n	8006218 <HAL_TIM_OC_ConfigChannel+0x68>
 80061ec:	2a0c      	cmp	r2, #12
 80061ee:	d1f2      	bne.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	f7ff fd5f 	bl	8005cb4 <TIM_OC4_SetConfig>
      break;
 80061f6:	e7ee      	b.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061f8:	6820      	ldr	r0, [r4, #0]
 80061fa:	f7ff fccb 	bl	8005b94 <TIM_OC1_SetConfig>
      break;
 80061fe:	e7ea      	b.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	f7ff ff8f 	bl	8006124 <TIM_OC2_SetConfig>
      break;
 8006206:	e7e6      	b.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006208:	6820      	ldr	r0, [r4, #0]
 800620a:	f7ff fd0f 	bl	8005c2c <TIM_OC3_SetConfig>
      break;
 800620e:	e7e2      	b.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006210:	6820      	ldr	r0, [r4, #0]
 8006212:	f7ff fd83 	bl	8005d1c <TIM_OC5_SetConfig>
      break;
 8006216:	e7de      	b.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006218:	6820      	ldr	r0, [r4, #0]
 800621a:	f7ff fdb3 	bl	8005d84 <TIM_OC6_SetConfig>
      break;
 800621e:	e7da      	b.n	80061d6 <HAL_TIM_OC_ConfigChannel+0x26>

08006220 <HAL_TIM_PWM_ConfigChannel>:
{
 8006220:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006222:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006226:	2b01      	cmp	r3, #1
{
 8006228:	4604      	mov	r4, r0
 800622a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800622e:	d010      	beq.n	8006252 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006230:	2301      	movs	r3, #1
  switch (Channel)
 8006232:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006234:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006238:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800623c:	d043      	beq.n	80062c6 <HAL_TIM_PWM_ConfigChannel+0xa6>
 800623e:	d809      	bhi.n	8006254 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006240:	b1fa      	cbz	r2, 8006282 <HAL_TIM_PWM_ConfigChannel+0x62>
 8006242:	2a04      	cmp	r2, #4
 8006244:	d02e      	beq.n	80062a4 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8006246:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8006248:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800624a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800624e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006252:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8006254:	2a10      	cmp	r2, #16
 8006256:	d047      	beq.n	80062e8 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8006258:	2a14      	cmp	r2, #20
 800625a:	d056      	beq.n	800630a <HAL_TIM_PWM_ConfigChannel+0xea>
 800625c:	2a0c      	cmp	r2, #12
 800625e:	d1f2      	bne.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006260:	6820      	ldr	r0, [r4, #0]
 8006262:	f7ff fd27 	bl	8005cb4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006266:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006268:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006270:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006272:	69da      	ldr	r2, [r3, #28]
 8006274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800627a:	69da      	ldr	r2, [r3, #28]
 800627c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006280:	e030      	b.n	80062e4 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006282:	6820      	ldr	r0, [r4, #0]
 8006284:	f7ff fc86 	bl	8005b94 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006288:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800628a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	f042 0208 	orr.w	r2, r2, #8
 8006292:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006294:	699a      	ldr	r2, [r3, #24]
 8006296:	f022 0204 	bic.w	r2, r2, #4
 800629a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800629c:	699a      	ldr	r2, [r3, #24]
 800629e:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062a0:	619a      	str	r2, [r3, #24]
      break;
 80062a2:	e7d0      	b.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062a4:	6820      	ldr	r0, [r4, #0]
 80062a6:	f7ff ff3d 	bl	8006124 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062aa:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062ac:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062b6:	699a      	ldr	r2, [r3, #24]
 80062b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062bc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062be:	699a      	ldr	r2, [r3, #24]
 80062c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80062c4:	e7ec      	b.n	80062a0 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062c6:	6820      	ldr	r0, [r4, #0]
 80062c8:	f7ff fcb0 	bl	8005c2c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062cc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ce:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062d0:	69da      	ldr	r2, [r3, #28]
 80062d2:	f042 0208 	orr.w	r2, r2, #8
 80062d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062d8:	69da      	ldr	r2, [r3, #28]
 80062da:	f022 0204 	bic.w	r2, r2, #4
 80062de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062e0:	69da      	ldr	r2, [r3, #28]
 80062e2:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062e4:	61da      	str	r2, [r3, #28]
      break;
 80062e6:	e7ae      	b.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062e8:	6820      	ldr	r0, [r4, #0]
 80062ea:	f7ff fd17 	bl	8005d1c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062ee:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062f0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062f4:	f042 0208 	orr.w	r2, r2, #8
 80062f8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062fc:	f022 0204 	bic.w	r2, r2, #4
 8006300:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006302:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006304:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006306:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006308:	e79d      	b.n	8006246 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800630a:	6820      	ldr	r0, [r4, #0]
 800630c:	f7ff fd3a 	bl	8005d84 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006310:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006312:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006316:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800631a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800631c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800631e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006322:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006326:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800632a:	e7ec      	b.n	8006306 <HAL_TIM_PWM_ConfigChannel+0xe6>

0800632c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800632c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800632e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006330:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006332:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006336:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800633a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633c:	6083      	str	r3, [r0, #8]
 800633e:	bd10      	pop	{r4, pc}

08006340 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006340:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006344:	2b01      	cmp	r3, #1
{
 8006346:	b570      	push	{r4, r5, r6, lr}
 8006348:	4604      	mov	r4, r0
 800634a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800634e:	d017      	beq.n	8006380 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8006350:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006354:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8006356:	2301      	movs	r3, #1
 8006358:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800635c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800635e:	4b48      	ldr	r3, [pc, #288]	; (8006480 <HAL_TIM_ConfigClockSource+0x140>)
 8006360:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8006362:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006364:	680b      	ldr	r3, [r1, #0]
 8006366:	2b40      	cmp	r3, #64	; 0x40
 8006368:	d072      	beq.n	8006450 <HAL_TIM_ConfigClockSource+0x110>
 800636a:	d815      	bhi.n	8006398 <HAL_TIM_ConfigClockSource+0x58>
 800636c:	2b10      	cmp	r3, #16
 800636e:	d00c      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x4a>
 8006370:	d807      	bhi.n	8006382 <HAL_TIM_ConfigClockSource+0x42>
 8006372:	b153      	cbz	r3, 800638a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8006374:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8006376:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006378:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800637c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006380:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8006382:	2b20      	cmp	r3, #32
 8006384:	d001      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x4a>
 8006386:	2b30      	cmp	r3, #48	; 0x30
 8006388:	d1f4      	bne.n	8006374 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 800638a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800638c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8006390:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006394:	4313      	orrs	r3, r2
 8006396:	e033      	b.n	8006400 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8006398:	2b70      	cmp	r3, #112	; 0x70
 800639a:	d033      	beq.n	8006404 <HAL_TIM_ConfigClockSource+0xc4>
 800639c:	d81b      	bhi.n	80063d6 <HAL_TIM_ConfigClockSource+0x96>
 800639e:	2b50      	cmp	r3, #80	; 0x50
 80063a0:	d03f      	beq.n	8006422 <HAL_TIM_ConfigClockSource+0xe2>
 80063a2:	2b60      	cmp	r3, #96	; 0x60
 80063a4:	d1e6      	bne.n	8006374 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80063a6:	684d      	ldr	r5, [r1, #4]
 80063a8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063aa:	6a01      	ldr	r1, [r0, #32]
 80063ac:	f021 0110 	bic.w	r1, r1, #16
 80063b0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80063b4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063b6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80063be:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063c2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80063c6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80063c8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80063ca:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063d0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80063d4:	e014      	b.n	8006400 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 80063d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063da:	d00c      	beq.n	80063f6 <HAL_TIM_ConfigClockSource+0xb6>
 80063dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e0:	d1c8      	bne.n	8006374 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80063e2:	68cb      	ldr	r3, [r1, #12]
 80063e4:	684a      	ldr	r2, [r1, #4]
 80063e6:	6889      	ldr	r1, [r1, #8]
 80063e8:	f7ff ffa0 	bl	800632c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	6893      	ldr	r3, [r2, #8]
 80063f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063f4:	e013      	b.n	800641e <HAL_TIM_ConfigClockSource+0xde>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80063f6:	6883      	ldr	r3, [r0, #8]
 80063f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fc:	f023 0307 	bic.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8006400:	6083      	str	r3, [r0, #8]
 8006402:	e7b7      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8006404:	68cb      	ldr	r3, [r1, #12]
 8006406:	684a      	ldr	r2, [r1, #4]
 8006408:	6889      	ldr	r1, [r1, #8]
 800640a:	f7ff ff8f 	bl	800632c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800640e:	6822      	ldr	r2, [r4, #0]
 8006410:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006416:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800641a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800641e:	6093      	str	r3, [r2, #8]
      break;
 8006420:	e7a8      	b.n	8006374 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006422:	684a      	ldr	r2, [r1, #4]
 8006424:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006426:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006428:	6a05      	ldr	r5, [r0, #32]
 800642a:	f025 0501 	bic.w	r5, r5, #1
 800642e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006430:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006432:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800643a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800643e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006440:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006442:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006444:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800644a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 800644e:	e7d7      	b.n	8006400 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006450:	684a      	ldr	r2, [r1, #4]
 8006452:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006454:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006456:	6a05      	ldr	r5, [r0, #32]
 8006458:	f025 0501 	bic.w	r5, r5, #1
 800645c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800645e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006460:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006464:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006468:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800646c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800646e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006470:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006472:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006478:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800647c:	e7c0      	b.n	8006400 <HAL_TIM_ConfigClockSource+0xc0>
 800647e:	bf00      	nop
 8006480:	fffe0088 	.word	0xfffe0088

08006484 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006484:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006486:	f001 011f 	and.w	r1, r1, #31
{
 800648a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800648c:	2401      	movs	r4, #1
 800648e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8006490:	ea23 0304 	bic.w	r3, r3, r4
 8006494:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006496:	6a03      	ldr	r3, [r0, #32]
 8006498:	408a      	lsls	r2, r1
 800649a:	431a      	orrs	r2, r3
 800649c:	6202      	str	r2, [r0, #32]
 800649e:	bd10      	pop	{r4, pc}

080064a0 <HAL_TIM_PWM_Start>:
{
 80064a0:	b510      	push	{r4, lr}
 80064a2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064a4:	2201      	movs	r2, #1
 80064a6:	6800      	ldr	r0, [r0, #0]
 80064a8:	f7ff ffec 	bl	8006484 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064ac:	6823      	ldr	r3, [r4, #0]
 80064ae:	4a14      	ldr	r2, [pc, #80]	; (8006500 <HAL_TIM_PWM_Start+0x60>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d01f      	beq.n	80064f4 <HAL_TIM_PWM_Start+0x54>
 80064b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d01b      	beq.n	80064f4 <HAL_TIM_PWM_Start+0x54>
 80064bc:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d017      	beq.n	80064f4 <HAL_TIM_PWM_Start+0x54>
 80064c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d013      	beq.n	80064f4 <HAL_TIM_PWM_Start+0x54>
 80064cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d00f      	beq.n	80064f4 <HAL_TIM_PWM_Start+0x54>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80064d4:	6899      	ldr	r1, [r3, #8]
 80064d6:	480b      	ldr	r0, [pc, #44]	; (8006504 <HAL_TIM_PWM_Start+0x64>)
 80064d8:	4001      	ands	r1, r0
 80064da:	2906      	cmp	r1, #6
 80064dc:	d008      	beq.n	80064f0 <HAL_TIM_PWM_Start+0x50>
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	4002      	ands	r2, r0
 80064e2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80064e6:	d003      	beq.n	80064f0 <HAL_TIM_PWM_Start+0x50>
    __HAL_TIM_ENABLE(htim);
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	f042 0201 	orr.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
}
 80064f0:	2000      	movs	r0, #0
 80064f2:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80064f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064fa:	645a      	str	r2, [r3, #68]	; 0x44
 80064fc:	e7ea      	b.n	80064d4 <HAL_TIM_PWM_Start+0x34>
 80064fe:	bf00      	nop
 8006500:	40012c00 	.word	0x40012c00
 8006504:	00010007 	.word	0x00010007

08006508 <HAL_TIM_OC_Start>:
 8006508:	f7ff bfca 	b.w	80064a0 <HAL_TIM_PWM_Start>

0800650c <HAL_TIM_PWM_Stop>:
{
 800650c:	b510      	push	{r4, lr}
 800650e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006510:	2200      	movs	r2, #0
 8006512:	6800      	ldr	r0, [r0, #0]
 8006514:	f7ff ffb6 	bl	8006484 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	4a1a      	ldr	r2, [pc, #104]	; (8006584 <HAL_TIM_PWM_Stop+0x78>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00f      	beq.n	8006540 <HAL_TIM_PWM_Stop+0x34>
 8006520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006524:	4293      	cmp	r3, r2
 8006526:	d00b      	beq.n	8006540 <HAL_TIM_PWM_Stop+0x34>
 8006528:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800652c:	4293      	cmp	r3, r2
 800652e:	d007      	beq.n	8006540 <HAL_TIM_PWM_Stop+0x34>
 8006530:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006534:	4293      	cmp	r3, r2
 8006536:	d003      	beq.n	8006540 <HAL_TIM_PWM_Stop+0x34>
 8006538:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800653c:	4293      	cmp	r3, r2
 800653e:	d10d      	bne.n	800655c <HAL_TIM_PWM_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 8006540:	6a19      	ldr	r1, [r3, #32]
 8006542:	f241 1211 	movw	r2, #4369	; 0x1111
 8006546:	4211      	tst	r1, r2
 8006548:	d108      	bne.n	800655c <HAL_TIM_PWM_Stop+0x50>
 800654a:	6a19      	ldr	r1, [r3, #32]
 800654c:	f240 4244 	movw	r2, #1092	; 0x444
 8006550:	4211      	tst	r1, r2
 8006552:	bf02      	ittt	eq
 8006554:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8006556:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800655a:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800655c:	6a19      	ldr	r1, [r3, #32]
 800655e:	f241 1211 	movw	r2, #4369	; 0x1111
 8006562:	4211      	tst	r1, r2
 8006564:	d108      	bne.n	8006578 <HAL_TIM_PWM_Stop+0x6c>
 8006566:	6a19      	ldr	r1, [r3, #32]
 8006568:	f240 4244 	movw	r2, #1092	; 0x444
 800656c:	4211      	tst	r1, r2
 800656e:	d103      	bne.n	8006578 <HAL_TIM_PWM_Stop+0x6c>
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	f022 0201 	bic.w	r2, r2, #1
 8006576:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006578:	2301      	movs	r3, #1
 800657a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800657e:	2000      	movs	r0, #0
 8006580:	bd10      	pop	{r4, pc}
 8006582:	bf00      	nop
 8006584:	40012c00 	.word	0x40012c00

08006588 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006588:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800658c:	2b01      	cmp	r3, #1
{
 800658e:	b530      	push	{r4, r5, lr}
 8006590:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8006594:	d01f      	beq.n	80065d6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006596:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006598:	4d10      	ldr	r5, [pc, #64]	; (80065dc <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 800659a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800659e:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 80065a0:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80065a2:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80065a4:	d003      	beq.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0x26>
 80065a6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80065aa:	42aa      	cmp	r2, r5
 80065ac:	d103      	bne.n	80065b6 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065ae:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065b0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065b4:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065b6:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065b8:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80065ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065be:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80065c0:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065c4:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065c6:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065c8:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 80065ca:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80065cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065d0:	2300      	movs	r3, #0
 80065d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80065d6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80065d8:	bd30      	pop	{r4, r5, pc}
 80065da:	bf00      	nop
 80065dc:	40012c00 	.word	0x40012c00

080065e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065e0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80065e4:	2b01      	cmp	r3, #1
{
 80065e6:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80065e8:	d038      	beq.n	800665c <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065ea:	68cb      	ldr	r3, [r1, #12]
 80065ec:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065ee:	4c1c      	ldr	r4, [pc, #112]	; (8006660 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065f6:	684a      	ldr	r2, [r1, #4]
 80065f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065fe:	680a      	ldr	r2, [r1, #0]
 8006600:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006604:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006606:	690a      	ldr	r2, [r1, #16]
 8006608:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800660c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800660e:	694a      	ldr	r2, [r1, #20]
 8006610:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006614:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006616:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8006618:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800661c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800661e:	698a      	ldr	r2, [r1, #24]
 8006620:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006624:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006628:	6802      	ldr	r2, [r0, #0]
 800662a:	42a2      	cmp	r2, r4
 800662c:	d003      	beq.n	8006636 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800662e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006632:	42a2      	cmp	r2, r4
 8006634:	d10c      	bne.n	8006650 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006636:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006638:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800663c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006640:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006642:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006648:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800664a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800664e:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006650:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006652:	2300      	movs	r3, #0
 8006654:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006658:	4618      	mov	r0, r3
 800665a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800665c:	2002      	movs	r0, #2
}
 800665e:	bd10      	pop	{r4, pc}
 8006660:	40012c00 	.word	0x40012c00

08006664 <HAL_TIMEx_CommutationCallback>:
 8006664:	4770      	bx	lr

08006666 <HAL_TIMEx_BreakCallback>:
 8006666:	4770      	bx	lr

08006668 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006668:	4770      	bx	lr

0800666a <UART_EndRxTransfer>:
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800666a:	6803      	ldr	r3, [r0, #0]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006672:	601a      	str	r2, [r3, #0]
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	f022 0201 	bic.w	r2, r2, #1
 800667a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800667c:	2320      	movs	r3, #32
 800667e:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	6703      	str	r3, [r0, #112]	; 0x70
 8006686:	4770      	bx	lr

08006688 <HAL_UART_Transmit_DMA>:
{
 8006688:	b538      	push	{r3, r4, r5, lr}
 800668a:	4604      	mov	r4, r0
 800668c:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800668e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006692:	2a20      	cmp	r2, #32
 8006694:	d12c      	bne.n	80066f0 <HAL_UART_Transmit_DMA+0x68>
    if((pData == NULL ) || (Size == 0U))
 8006696:	b349      	cbz	r1, 80066ec <HAL_UART_Transmit_DMA+0x64>
 8006698:	b343      	cbz	r3, 80066ec <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 800669a:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
 800669e:	2a01      	cmp	r2, #1
 80066a0:	d026      	beq.n	80066f0 <HAL_UART_Transmit_DMA+0x68>
 80066a2:	2201      	movs	r2, #1
 80066a4:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066a8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 80066aa:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ae:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b0:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066b2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066b6:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066ba:	4a0e      	ldr	r2, [pc, #56]	; (80066f4 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize  = Size;
 80066bc:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->pTxBuffPtr  = pData;
 80066c0:	6521      	str	r1, [r4, #80]	; 0x50
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066c2:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066c4:	4a0c      	ldr	r2, [pc, #48]	; (80066f8 <HAL_UART_Transmit_DMA+0x70>)
 80066c6:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066c8:	4a0c      	ldr	r2, [pc, #48]	; (80066fc <HAL_UART_Transmit_DMA+0x74>)
 80066ca:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80066cc:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 80066ce:	6385      	str	r5, [r0, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80066d0:	3228      	adds	r2, #40	; 0x28
 80066d2:	f7fb faef 	bl	8001cb4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	2240      	movs	r2, #64	; 0x40
 80066da:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066dc:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 80066de:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80066e6:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80066e8:	4628      	mov	r0, r5
 80066ea:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80066ec:	2001      	movs	r0, #1
 80066ee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80066f0:	2002      	movs	r0, #2
}
 80066f2:	bd38      	pop	{r3, r4, r5, pc}
 80066f4:	08006703 	.word	0x08006703
 80066f8:	08006733 	.word	0x08006733
 80066fc:	0800673f 	.word	0x0800673f

08006700 <HAL_UART_TxCpltCallback>:
 8006700:	4770      	bx	lr

08006702 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006702:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8006704:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006706:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f013 0320 	ands.w	r3, r3, #32
 800670e:	d10b      	bne.n	8006728 <UART_DMATransmitCplt+0x26>
  {  
    huart->TxXferCount = 0U;
 8006710:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
    
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006714:	6813      	ldr	r3, [r2, #0]
 8006716:	689a      	ldr	r2, [r3, #8]
 8006718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800671c:	609a      	str	r2, [r3, #8]
    
    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8006728:	4610      	mov	r0, r2
 800672a:	f7ff ffe9 	bl	8006700 <HAL_UART_TxCpltCallback>
 800672e:	bd08      	pop	{r3, pc}

08006730 <HAL_UART_TxHalfCpltCallback>:
 8006730:	4770      	bx	lr

08006732 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006732:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  HAL_UART_TxHalfCpltCallback(huart);
 8006734:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006736:	f7ff fffb 	bl	8006730 <HAL_UART_TxHalfCpltCallback>
 800673a:	bd08      	pop	{r3, pc}

0800673c <HAL_UART_ErrorCallback>:
 800673c:	4770      	bx	lr

0800673e <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800673e:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
 8006740:	b508      	push	{r3, lr}
  
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006742:	f891 3081 	ldrb.w	r3, [r1, #129]	; 0x81
 8006746:	2b21      	cmp	r3, #33	; 0x21
 8006748:	d10d      	bne.n	8006766 <UART_DMAError+0x28>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800674a:	680b      	ldr	r3, [r1, #0]
 800674c:	689a      	ldr	r2, [r3, #8]
 800674e:	0612      	lsls	r2, r2, #24
 8006750:	d509      	bpl.n	8006766 <UART_DMAError+0x28>
  {
    huart->TxXferCount = 0U;
 8006752:	2200      	movs	r2, #0
 8006754:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800675e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006760:	2320      	movs	r3, #32
 8006762:	f881 3081 	strb.w	r3, [r1, #129]	; 0x81
    UART_EndTxTransfer(huart);
  }
  
  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006766:	f891 3082 	ldrb.w	r3, [r1, #130]	; 0x82
 800676a:	2b22      	cmp	r3, #34	; 0x22
 800676c:	d109      	bne.n	8006782 <UART_DMAError+0x44>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800676e:	680b      	ldr	r3, [r1, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	065b      	lsls	r3, r3, #25
 8006774:	d505      	bpl.n	8006782 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
 8006776:	2300      	movs	r3, #0
 8006778:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800677c:	4608      	mov	r0, r1
 800677e:	f7ff ff74 	bl	800666a <UART_EndRxTransfer>
  }
  
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006782:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8006786:	f043 0310 	orr.w	r3, r3, #16
 800678a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  HAL_UART_ErrorCallback(huart);
 800678e:	4608      	mov	r0, r1
 8006790:	f7ff ffd4 	bl	800673c <HAL_UART_ErrorCallback>
 8006794:	bd08      	pop	{r3, pc}
	...

08006798 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006798:	6802      	ldr	r2, [r0, #0]
 800679a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800679c:	6811      	ldr	r1, [r2, #0]
{
 800679e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80067a0:	071d      	lsls	r5, r3, #28
{
 80067a2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067a4:	6890      	ldr	r0, [r2, #8]
  if (errorflags == RESET)
 80067a6:	d10b      	bne.n	80067c0 <HAL_UART_IRQHandler+0x28>
    if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 80067a8:	069e      	lsls	r6, r3, #26
 80067aa:	d577      	bpl.n	800689c <HAL_UART_IRQHandler+0x104>
       && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 80067ac:	068d      	lsls	r5, r1, #26
 80067ae:	d401      	bmi.n	80067b4 <HAL_UART_IRQHandler+0x1c>
           || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 80067b0:	00c6      	lsls	r6, r0, #3
 80067b2:	d573      	bpl.n	800689c <HAL_UART_IRQHandler+0x104>
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 80067b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 80ac 	beq.w	8006914 <HAL_UART_IRQHandler+0x17c>
 80067bc:	4620      	mov	r0, r4
 80067be:	e061      	b.n	8006884 <HAL_UART_IRQHandler+0xec>
     && (   (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 80067c0:	4e55      	ldr	r6, [pc, #340]	; (8006918 <HAL_UART_IRQHandler+0x180>)
 80067c2:	4006      	ands	r6, r0
 80067c4:	d102      	bne.n	80067cc <HAL_UART_IRQHandler+0x34>
         ||  ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))) )
 80067c6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80067ca:	d067      	beq.n	800689c <HAL_UART_IRQHandler+0x104>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067cc:	07dd      	lsls	r5, r3, #31
 80067ce:	d509      	bpl.n	80067e4 <HAL_UART_IRQHandler+0x4c>
 80067d0:	05cd      	lsls	r5, r1, #23
 80067d2:	d507      	bpl.n	80067e4 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067d4:	2501      	movs	r5, #1
 80067d6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067d8:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80067dc:	f045 0501 	orr.w	r5, r5, #1
 80067e0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067e4:	079d      	lsls	r5, r3, #30
 80067e6:	d509      	bpl.n	80067fc <HAL_UART_IRQHandler+0x64>
 80067e8:	07c5      	lsls	r5, r0, #31
 80067ea:	d507      	bpl.n	80067fc <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067ec:	2502      	movs	r5, #2
 80067ee:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067f0:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80067f4:	f045 0504 	orr.w	r5, r5, #4
 80067f8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067fc:	075d      	lsls	r5, r3, #29
 80067fe:	d509      	bpl.n	8006814 <HAL_UART_IRQHandler+0x7c>
 8006800:	07c5      	lsls	r5, r0, #31
 8006802:	d507      	bpl.n	8006814 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006804:	2504      	movs	r5, #4
 8006806:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006808:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 800680c:	f045 0502 	orr.w	r5, r5, #2
 8006810:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8006814:	071d      	lsls	r5, r3, #28
 8006816:	d509      	bpl.n	800682c <HAL_UART_IRQHandler+0x94>
       &&(  ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
 8006818:	068d      	lsls	r5, r1, #26
 800681a:	d400      	bmi.n	800681e <HAL_UART_IRQHandler+0x86>
 800681c:	b136      	cbz	r6, 800682c <HAL_UART_IRQHandler+0x94>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800681e:	2508      	movs	r5, #8
 8006820:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006822:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006826:	432a      	orrs	r2, r5
 8006828:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800682c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006830:	2a00      	cmp	r2, #0
 8006832:	d06f      	beq.n	8006914 <HAL_UART_IRQHandler+0x17c>
      if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 8006834:	069e      	lsls	r6, r3, #26
 8006836:	d507      	bpl.n	8006848 <HAL_UART_IRQHandler+0xb0>
         && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006838:	068d      	lsls	r5, r1, #26
 800683a:	d401      	bmi.n	8006840 <HAL_UART_IRQHandler+0xa8>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 800683c:	00c0      	lsls	r0, r0, #3
 800683e:	d503      	bpl.n	8006848 <HAL_UART_IRQHandler+0xb0>
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8006840:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006842:	b10b      	cbz	r3, 8006848 <HAL_UART_IRQHandler+0xb0>
 8006844:	4620      	mov	r0, r4
 8006846:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006848:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800684c:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 800684e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006850:	d404      	bmi.n	800685c <HAL_UART_IRQHandler+0xc4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006852:	6823      	ldr	r3, [r4, #0]
 8006854:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006856:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800685a:	d01a      	beq.n	8006892 <HAL_UART_IRQHandler+0xfa>
        UART_EndRxTransfer(huart);
 800685c:	f7ff ff05 	bl	800666a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	0652      	lsls	r2, r2, #25
 8006866:	d510      	bpl.n	800688a <HAL_UART_IRQHandler+0xf2>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006868:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800686a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800686c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006870:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8006872:	b150      	cbz	r0, 800688a <HAL_UART_IRQHandler+0xf2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006874:	4b29      	ldr	r3, [pc, #164]	; (800691c <HAL_UART_IRQHandler+0x184>)
 8006876:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006878:	f7fb fa5e 	bl	8001d38 <HAL_DMA_Abort_IT>
 800687c:	2800      	cmp	r0, #0
 800687e:	d049      	beq.n	8006914 <HAL_UART_IRQHandler+0x17c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006880:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006882:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8006884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006888:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800688a:	4620      	mov	r0, r4
 800688c:	f7ff ff56 	bl	800673c <HAL_UART_ErrorCallback>
 8006890:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8006892:	f7ff ff53 	bl	800673c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006896:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 800689a:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800689c:	02de      	lsls	r6, r3, #11
 800689e:	d50e      	bpl.n	80068be <HAL_UART_IRQHandler+0x126>
 80068a0:	0245      	lsls	r5, r0, #9
 80068a2:	d50c      	bpl.n	80068be <HAL_UART_IRQHandler+0x126>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80068a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068a8:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80068aa:	2320      	movs	r3, #32
 80068ac:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_UARTEx_WakeupCallback(huart);
 80068b0:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80068b2:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
}
 80068b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80068ba:	f000 bb63 	b.w	8006f84 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE_TXFNF) != RESET) 
 80068be:	061e      	lsls	r6, r3, #24
 80068c0:	d505      	bpl.n	80068ce <HAL_UART_IRQHandler+0x136>
     && (   ((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
 80068c2:	060d      	lsls	r5, r1, #24
 80068c4:	d401      	bmi.n	80068ca <HAL_UART_IRQHandler+0x132>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 80068c6:	0200      	lsls	r0, r0, #8
 80068c8:	d501      	bpl.n	80068ce <HAL_UART_IRQHandler+0x136>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 80068ca:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80068cc:	e773      	b.n	80067b6 <HAL_UART_IRQHandler+0x1e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068ce:	065e      	lsls	r6, r3, #25
 80068d0:	d50e      	bpl.n	80068f0 <HAL_UART_IRQHandler+0x158>
 80068d2:	064d      	lsls	r5, r1, #25
 80068d4:	d50c      	bpl.n	80068f0 <HAL_UART_IRQHandler+0x158>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068d6:	6813      	ldr	r3, [r2, #0]
 80068d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068dc:	6013      	str	r3, [r2, #0]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068de:	2320      	movs	r3, #32
 80068e0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068e4:	2300      	movs	r3, #0
 80068e6:	6763      	str	r3, [r4, #116]	; 0x74
  
  HAL_UART_TxCpltCallback(huart);
 80068e8:	4620      	mov	r0, r4
 80068ea:	f7ff ff09 	bl	8006700 <HAL_UART_TxCpltCallback>
 80068ee:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 80068f0:	0218      	lsls	r0, r3, #8
 80068f2:	d506      	bpl.n	8006902 <HAL_UART_IRQHandler+0x16a>
 80068f4:	004a      	lsls	r2, r1, #1
 80068f6:	d504      	bpl.n	8006902 <HAL_UART_IRQHandler+0x16a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068f8:	4620      	mov	r0, r4
}
 80068fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068fe:	f000 bb43 	b.w	8006f88 <HAL_UARTEx_TxFifoEmptyCallback>
  if(((isrflags & USART_ISR_RXFF) != RESET) && ((cr1its & USART_CR1_RXFFIE) != RESET))
 8006902:	01db      	lsls	r3, r3, #7
 8006904:	d506      	bpl.n	8006914 <HAL_UART_IRQHandler+0x17c>
 8006906:	2900      	cmp	r1, #0
 8006908:	da04      	bge.n	8006914 <HAL_UART_IRQHandler+0x17c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800690a:	4620      	mov	r0, r4
}
 800690c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006910:	f000 bb39 	b.w	8006f86 <HAL_UARTEx_RxFifoFullCallback>
 8006914:	bd70      	pop	{r4, r5, r6, pc}
 8006916:	bf00      	nop
 8006918:	10000001 	.word	0x10000001
 800691c:	08006921 	.word	0x08006921

08006920 <UART_DMAAbortOnError>:
{
 8006920:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006922:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006924:	2300      	movs	r3, #0
 8006926:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800692a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800692e:	f7ff ff05 	bl	800673c <HAL_UART_ErrorCallback>
 8006932:	bd08      	pop	{r3, pc}

08006934 <UART_SetConfig>:
  if(UART_INSTANCE_LOWPOWER(huart))
 8006934:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006936:	69c1      	ldr	r1, [r0, #28]
 8006938:	6882      	ldr	r2, [r0, #8]
{
 800693a:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800693e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006940:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006942:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006944:	4302      	orrs	r2, r0
 8006946:	6960      	ldr	r0, [r4, #20]
 8006948:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800694a:	48bd      	ldr	r0, [pc, #756]	; (8006c40 <UART_SetConfig+0x30c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800694c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800694e:	4028      	ands	r0, r5
 8006950:	4302      	orrs	r2, r0
 8006952:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	68e0      	ldr	r0, [r4, #12]
 8006958:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800695c:	4302      	orrs	r2, r0
 800695e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006960:	4ab8      	ldr	r2, [pc, #736]	; (8006c44 <UART_SetConfig+0x310>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006962:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006964:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8006966:	bf1c      	itt	ne
 8006968:	6a22      	ldrne	r2, [r4, #32]
 800696a:	4310      	orrne	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800696c:	689a      	ldr	r2, [r3, #8]
 800696e:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8006972:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8006976:	4302      	orrs	r2, r0
 8006978:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800697a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800697c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800697e:	f020 000f 	bic.w	r0, r0, #15
 8006982:	4310      	orrs	r0, r2
 8006984:	62d8      	str	r0, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006986:	48b0      	ldr	r0, [pc, #704]	; (8006c48 <UART_SetConfig+0x314>)
 8006988:	4283      	cmp	r3, r0
 800698a:	d117      	bne.n	80069bc <UART_SetConfig+0x88>
 800698c:	4baf      	ldr	r3, [pc, #700]	; (8006c4c <UART_SetConfig+0x318>)
 800698e:	48b0      	ldr	r0, [pc, #704]	; (8006c50 <UART_SetConfig+0x31c>)
 8006990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006994:	f003 0303 	and.w	r3, r3, #3
 8006998:	5cc3      	ldrb	r3, [r0, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800699a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800699e:	f040 81a7 	bne.w	8006cf0 <UART_SetConfig+0x3bc>
    switch (clocksource)
 80069a2:	2b08      	cmp	r3, #8
 80069a4:	d849      	bhi.n	8006a3a <UART_SetConfig+0x106>
 80069a6:	e8df f013 	tbh	[pc, r3, lsl #1]
 80069aa:	017f      	.short	0x017f
 80069ac:	016800d0 	.word	0x016800d0
 80069b0:	01780048 	.word	0x01780048
 80069b4:	00480048 	.word	0x00480048
 80069b8:	002d0048 	.word	0x002d0048
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069bc:	48a5      	ldr	r0, [pc, #660]	; (8006c54 <UART_SetConfig+0x320>)
 80069be:	4283      	cmp	r3, r0
 80069c0:	d106      	bne.n	80069d0 <UART_SetConfig+0x9c>
 80069c2:	4ba2      	ldr	r3, [pc, #648]	; (8006c4c <UART_SetConfig+0x318>)
 80069c4:	48a4      	ldr	r0, [pc, #656]	; (8006c58 <UART_SetConfig+0x324>)
 80069c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ca:	f003 030c 	and.w	r3, r3, #12
 80069ce:	e7e3      	b.n	8006998 <UART_SetConfig+0x64>
 80069d0:	48a2      	ldr	r0, [pc, #648]	; (8006c5c <UART_SetConfig+0x328>)
 80069d2:	4283      	cmp	r3, r0
 80069d4:	d11d      	bne.n	8006a12 <UART_SetConfig+0xde>
 80069d6:	4b9d      	ldr	r3, [pc, #628]	; (8006c4c <UART_SetConfig+0x318>)
 80069d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069e0:	2b10      	cmp	r3, #16
 80069e2:	f000 8157 	beq.w	8006c94 <UART_SetConfig+0x360>
 80069e6:	d804      	bhi.n	80069f2 <UART_SetConfig+0xbe>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 8159 	beq.w	8006ca0 <UART_SetConfig+0x36c>
 80069ee:	2310      	movs	r3, #16
 80069f0:	e7d3      	b.n	800699a <UART_SetConfig+0x66>
 80069f2:	2b20      	cmp	r3, #32
 80069f4:	f000 813e 	beq.w	8006c74 <UART_SetConfig+0x340>
 80069f8:	2b30      	cmp	r3, #48	; 0x30
 80069fa:	d1f8      	bne.n	80069ee <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069fc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006a00:	f040 80d0 	bne.w	8006ba4 <UART_SetConfig+0x270>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a04:	4b96      	ldr	r3, [pc, #600]	; (8006c60 <UART_SetConfig+0x32c>)
 8006a06:	6861      	ldr	r1, [r4, #4]
 8006a08:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006a0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006a10:	e138      	b.n	8006c84 <UART_SetConfig+0x350>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a12:	4894      	ldr	r0, [pc, #592]	; (8006c64 <UART_SetConfig+0x330>)
 8006a14:	4283      	cmp	r3, r0
 8006a16:	d12d      	bne.n	8006a74 <UART_SetConfig+0x140>
 8006a18:	f500 30e2 	add.w	r0, r0, #115712	; 0x1c400
 8006a1c:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006a20:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8006a24:	2840      	cmp	r0, #64	; 0x40
 8006a26:	f000 80fd 	beq.w	8006c24 <UART_SetConfig+0x2f0>
 8006a2a:	d812      	bhi.n	8006a52 <UART_SetConfig+0x11e>
 8006a2c:	2800      	cmp	r0, #0
 8006a2e:	f000 80c0 	beq.w	8006bb2 <UART_SetConfig+0x27e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006a32:	4884      	ldr	r0, [pc, #528]	; (8006c44 <UART_SetConfig+0x310>)
 8006a34:	4283      	cmp	r3, r0
 8006a36:	f040 8156 	bne.w	8006ce6 <UART_SetConfig+0x3b2>
      ret = HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
  huart->NbTxDataToProcess = 1;
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  huart->NbRxDataToProcess = 1;
 8006a42:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
  huart->RxISR = NULL;
 8006a46:	2200      	movs	r2, #0
 8006a48:	6722      	str	r2, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8006a4a:	6762      	str	r2, [r4, #116]	; 0x74
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a52:	2880      	cmp	r0, #128	; 0x80
 8006a54:	f000 80bb 	beq.w	8006bce <UART_SetConfig+0x29a>
 8006a58:	28c0      	cmp	r0, #192	; 0xc0
 8006a5a:	d1ea      	bne.n	8006a32 <UART_SetConfig+0xfe>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006a5c:	4879      	ldr	r0, [pc, #484]	; (8006c44 <UART_SetConfig+0x310>)
 8006a5e:	4283      	cmp	r3, r0
 8006a60:	d1cc      	bne.n	80069fc <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a62:	4b7f      	ldr	r3, [pc, #508]	; (8006c60 <UART_SetConfig+0x32c>)
 8006a64:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006a68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
      break;
 8006a6c:	2208      	movs	r2, #8
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a6e:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 8006a72:	e0aa      	b.n	8006bca <UART_SetConfig+0x296>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a74:	487c      	ldr	r0, [pc, #496]	; (8006c68 <UART_SetConfig+0x334>)
 8006a76:	4283      	cmp	r3, r0
 8006a78:	d111      	bne.n	8006a9e <UART_SetConfig+0x16a>
 8006a7a:	f500 30e0 	add.w	r0, r0, #114688	; 0x1c000
 8006a7e:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006a82:	f400 7040 	and.w	r0, r0, #768	; 0x300
 8006a86:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006a8a:	f000 80cb 	beq.w	8006c24 <UART_SetConfig+0x2f0>
 8006a8e:	d9cd      	bls.n	8006a2c <UART_SetConfig+0xf8>
 8006a90:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006a94:	f000 809b 	beq.w	8006bce <UART_SetConfig+0x29a>
 8006a98:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8006a9c:	e7dd      	b.n	8006a5a <UART_SetConfig+0x126>
 8006a9e:	4869      	ldr	r0, [pc, #420]	; (8006c44 <UART_SetConfig+0x310>)
 8006aa0:	4283      	cmp	r3, r0
 8006aa2:	d1a4      	bne.n	80069ee <UART_SetConfig+0xba>
 8006aa4:	f500 30c8 	add.w	r0, r0, #102400	; 0x19000
 8006aa8:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006aac:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
 8006ab0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006ab4:	f000 80b6 	beq.w	8006c24 <UART_SetConfig+0x2f0>
 8006ab8:	d9b8      	bls.n	8006a2c <UART_SetConfig+0xf8>
 8006aba:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8006abe:	f000 8086 	beq.w	8006bce <UART_SetConfig+0x29a>
 8006ac2:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
 8006ac6:	e7c8      	b.n	8006a5a <UART_SetConfig+0x126>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ac8:	f7fd fdc8 	bl	800465c <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006acc:	4b64      	ldr	r3, [pc, #400]	; (8006c60 <UART_SetConfig+0x32c>)
 8006ace:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ad0:	6865      	ldr	r5, [r4, #4]
 8006ad2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e005      	b.n	8006ae6 <UART_SetConfig+0x1b2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ada:	4b61      	ldr	r3, [pc, #388]	; (8006c60 <UART_SetConfig+0x32c>)
 8006adc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ade:	4863      	ldr	r0, [pc, #396]	; (8006c6c <UART_SetConfig+0x338>)
 8006ae0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006ae4:	2300      	movs	r3, #0
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	f7fa f8e2 	bl	8000cb0 <__aeabi_uldivmod>
 8006aec:	020f      	lsls	r7, r1, #8
 8006aee:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006af2:	0206      	lsls	r6, r0, #8
 8006af4:	0868      	lsrs	r0, r5, #1
 8006af6:	eb16 0b00 	adds.w	fp, r6, r0
 8006afa:	f147 0c00 	adc.w	ip, r7, #0
 8006afe:	462a      	mov	r2, r5
 8006b00:	2300      	movs	r3, #0
 8006b02:	4658      	mov	r0, fp
 8006b04:	4661      	mov	r1, ip
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b06:	f7fa f8d3 	bl	8000cb0 <__aeabi_uldivmod>
          break;
 8006b0a:	2300      	movs	r3, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006b0c:	4a58      	ldr	r2, [pc, #352]	; (8006c70 <UART_SetConfig+0x33c>)
 8006b0e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8006b12:	4291      	cmp	r1, r2
 8006b14:	d891      	bhi.n	8006a3a <UART_SetConfig+0x106>
          huart->Instance->BRR = usartdiv;
 8006b16:	6822      	ldr	r2, [r4, #0]
 8006b18:	60d0      	str	r0, [r2, #12]
 8006b1a:	e78f      	b.n	8006a3c <UART_SetConfig+0x108>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b1c:	f7fd f9fe 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8006b20:	e7d4      	b.n	8006acc <UART_SetConfig+0x198>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b24:	4b4e      	ldr	r3, [pc, #312]	; (8006c60 <UART_SetConfig+0x32c>)
 8006b26:	0868      	lsrs	r0, r5, #1
 8006b28:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	462a      	mov	r2, r5
 8006b30:	f44f 7580 	mov.w	r5, #256	; 0x100
 8006b34:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8006b38:	fbb6 f6f3 	udiv	r6, r6, r3
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	fbe6 0105 	umlal	r0, r1, r6, r5
 8006b42:	e7e0      	b.n	8006b06 <UART_SetConfig+0x1d2>
          ret = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006b46:	2000      	movs	r0, #0
 8006b48:	e7e0      	b.n	8006b0c <UART_SetConfig+0x1d8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b4a:	f7fd fd99 	bl	8004680 <HAL_RCC_GetPCLK2Freq>
 8006b4e:	e0ad      	b.n	8006cac <UART_SetConfig+0x378>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b50:	f7fd fd84 	bl	800465c <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b54:	6862      	ldr	r2, [r4, #4]
 8006b56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b58:	4b41      	ldr	r3, [pc, #260]	; (8006c60 <UART_SetConfig+0x32c>)
 8006b5a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006b5e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b62:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8006b66:	fbb0 f0f2 	udiv	r0, r0, r2
 8006b6a:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b6c:	f1a0 0210 	sub.w	r2, r0, #16
 8006b70:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006b74:	429a      	cmp	r2, r3
 8006b76:	f63f af60 	bhi.w	8006a3a <UART_SetConfig+0x106>
      huart->Instance->BRR = usartdiv;
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	60d8      	str	r0, [r3, #12]
 8006b7e:	e0b0      	b.n	8006ce2 <UART_SetConfig+0x3ae>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b80:	f7fd fd7e 	bl	8004680 <HAL_RCC_GetPCLK2Freq>
 8006b84:	e7e6      	b.n	8006b54 <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b86:	4936      	ldr	r1, [pc, #216]	; (8006c60 <UART_SetConfig+0x32c>)
 8006b88:	6863      	ldr	r3, [r4, #4]
 8006b8a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006b8e:	4837      	ldr	r0, [pc, #220]	; (8006c6c <UART_SetConfig+0x338>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b90:	fbb0 f0f2 	udiv	r0, r0, r2
 8006b94:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006b98:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b9c:	e7e5      	b.n	8006b6a <UART_SetConfig+0x236>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b9e:	f7fd f9bd 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8006ba2:	e7d7      	b.n	8006b54 <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ba4:	492e      	ldr	r1, [pc, #184]	; (8006c60 <UART_SetConfig+0x32c>)
 8006ba6:	6863      	ldr	r3, [r4, #4]
 8006ba8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006bac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006bb0:	e7ee      	b.n	8006b90 <UART_SetConfig+0x25c>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006bb2:	4a24      	ldr	r2, [pc, #144]	; (8006c44 <UART_SetConfig+0x310>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d173      	bne.n	8006ca0 <UART_SetConfig+0x36c>
      lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bb8:	f7fd fd50 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 8006bbc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006bbe:	4b28      	ldr	r3, [pc, #160]	; (8006c60 <UART_SetConfig+0x32c>)
 8006bc0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006bc4:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8006bc8:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 8006bca:	b953      	cbnz	r3, 8006be2 <UART_SetConfig+0x2ae>
 8006bcc:	e736      	b.n	8006a3c <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006bce:	481d      	ldr	r0, [pc, #116]	; (8006c44 <UART_SetConfig+0x310>)
 8006bd0:	4283      	cmp	r3, r0
 8006bd2:	d14f      	bne.n	8006c74 <UART_SetConfig+0x340>
      lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bd4:	4b22      	ldr	r3, [pc, #136]	; (8006c60 <UART_SetConfig+0x32c>)
 8006bd6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006bda:	4b24      	ldr	r3, [pc, #144]	; (8006c6c <UART_SetConfig+0x338>)
 8006bdc:	fbb3 f3f0 	udiv	r3, r3, r0
 8006be0:	2202      	movs	r2, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8006be2:	6865      	ldr	r5, [r4, #4]
 8006be4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006be8:	4299      	cmp	r1, r3
 8006bea:	f63f af26 	bhi.w	8006a3a <UART_SetConfig+0x106>
 8006bee:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006bf2:	f63f af22 	bhi.w	8006a3a <UART_SetConfig+0x106>
        switch (clocksource)
 8006bf6:	2a08      	cmp	r2, #8
 8006bf8:	d8a4      	bhi.n	8006b44 <UART_SetConfig+0x210>
 8006bfa:	a301      	add	r3, pc, #4	; (adr r3, 8006c00 <UART_SetConfig+0x2cc>)
 8006bfc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8006c00:	08006ac9 	.word	0x08006ac9
 8006c04:	08006b45 	.word	0x08006b45
 8006c08:	08006adb 	.word	0x08006adb
 8006c0c:	08006b45 	.word	0x08006b45
 8006c10:	08006b1d 	.word	0x08006b1d
 8006c14:	08006b45 	.word	0x08006b45
 8006c18:	08006b45 	.word	0x08006b45
 8006c1c:	08006b45 	.word	0x08006b45
 8006c20:	08006b23 	.word	0x08006b23
  if(UART_INSTANCE_LOWPOWER(huart))
 8006c24:	4a07      	ldr	r2, [pc, #28]	; (8006c44 <UART_SetConfig+0x310>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d134      	bne.n	8006c94 <UART_SetConfig+0x360>
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c2a:	f7fd f977 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8006c2e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c30:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <UART_SetConfig+0x32c>)
 8006c32:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006c36:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8006c3a:	2204      	movs	r2, #4
 8006c3c:	e7c5      	b.n	8006bca <UART_SetConfig+0x296>
 8006c3e:	bf00      	nop
 8006c40:	cfff69f3 	.word	0xcfff69f3
 8006c44:	40008000 	.word	0x40008000
 8006c48:	40013800 	.word	0x40013800
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	08026958 	.word	0x08026958
 8006c54:	40004400 	.word	0x40004400
 8006c58:	0802695c 	.word	0x0802695c
 8006c5c:	40004800 	.word	0x40004800
 8006c60:	0802696a 	.word	0x0802696a
 8006c64:	40004c00 	.word	0x40004c00
 8006c68:	40005000 	.word	0x40005000
 8006c6c:	00f42400 	.word	0x00f42400
 8006c70:	000ffcff 	.word	0x000ffcff
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c74:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006c78:	d185      	bne.n	8006b86 <UART_SetConfig+0x252>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c7a:	4b29      	ldr	r3, [pc, #164]	; (8006d20 <UART_SetConfig+0x3ec>)
 8006c7c:	6861      	ldr	r1, [r4, #4]
 8006c7e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006c82:	4828      	ldr	r0, [pc, #160]	; (8006d24 <UART_SetConfig+0x3f0>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c88:	0848      	lsrs	r0, r1, #1
 8006c8a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006c8e:	fbb0 f0f1 	udiv	r0, r0, r1
 8006c92:	e017      	b.n	8006cc4 <UART_SetConfig+0x390>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c94:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006c98:	d181      	bne.n	8006b9e <UART_SetConfig+0x26a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c9a:	f7fd f93f 	bl	8003f1c <HAL_RCC_GetSysClockFreq>
 8006c9e:	e005      	b.n	8006cac <UART_SetConfig+0x378>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca0:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006ca4:	f47f af54 	bne.w	8006b50 <UART_SetConfig+0x21c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ca8:	f7fd fcd8 	bl	800465c <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cac:	6862      	ldr	r2, [r4, #4]
 8006cae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006cb0:	4b1b      	ldr	r3, [pc, #108]	; (8006d20 <UART_SetConfig+0x3ec>)
 8006cb2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006cba:	0850      	lsrs	r0, r2, #1
 8006cbc:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006cc0:	fbb0 f0f2 	udiv	r0, r0, r2
 8006cc4:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cc6:	f1a0 0210 	sub.w	r2, r0, #16
 8006cca:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	f63f aeb3 	bhi.w	8006a3a <UART_SetConfig+0x106>
      brrtemp = usartdiv & 0xFFF0U;
 8006cd4:	f020 030f 	bic.w	r3, r0, #15
      huart->Instance->BRR = brrtemp;
 8006cd8:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cda:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8006cde:	4318      	orrs	r0, r3
 8006ce0:	60d0      	str	r0, [r2, #12]
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	e6aa      	b.n	8006a3c <UART_SetConfig+0x108>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ce6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006cea:	f43f aea6 	beq.w	8006a3a <UART_SetConfig+0x106>
 8006cee:	2310      	movs	r3, #16
    switch (clocksource)
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	f63f aea2 	bhi.w	8006a3a <UART_SetConfig+0x106>
 8006cf6:	a101      	add	r1, pc, #4	; (adr r1, 8006cfc <UART_SetConfig+0x3c8>)
 8006cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cfc:	08006b51 	.word	0x08006b51
 8006d00:	08006b81 	.word	0x08006b81
 8006d04:	08006b87 	.word	0x08006b87
 8006d08:	08006a3b 	.word	0x08006a3b
 8006d0c:	08006b9f 	.word	0x08006b9f
 8006d10:	08006a3b 	.word	0x08006a3b
 8006d14:	08006a3b 	.word	0x08006a3b
 8006d18:	08006a3b 	.word	0x08006a3b
 8006d1c:	08006ba5 	.word	0x08006ba5
 8006d20:	0802696a 	.word	0x0802696a
 8006d24:	00f42400 	.word	0x00f42400

08006d28 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006d2a:	07da      	lsls	r2, r3, #31
{
 8006d2c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d2e:	d506      	bpl.n	8006d3e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d30:	6801      	ldr	r1, [r0, #0]
 8006d32:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006d34:	684a      	ldr	r2, [r1, #4]
 8006d36:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006d3a:	4322      	orrs	r2, r4
 8006d3c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d3e:	079c      	lsls	r4, r3, #30
 8006d40:	d506      	bpl.n	8006d50 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d42:	6801      	ldr	r1, [r0, #0]
 8006d44:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006d46:	684a      	ldr	r2, [r1, #4]
 8006d48:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006d4c:	4322      	orrs	r2, r4
 8006d4e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d50:	0759      	lsls	r1, r3, #29
 8006d52:	d506      	bpl.n	8006d62 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d54:	6801      	ldr	r1, [r0, #0]
 8006d56:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006d58:	684a      	ldr	r2, [r1, #4]
 8006d5a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d5e:	4322      	orrs	r2, r4
 8006d60:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d62:	071a      	lsls	r2, r3, #28
 8006d64:	d506      	bpl.n	8006d74 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d66:	6801      	ldr	r1, [r0, #0]
 8006d68:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006d6a:	684a      	ldr	r2, [r1, #4]
 8006d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d70:	4322      	orrs	r2, r4
 8006d72:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d74:	06dc      	lsls	r4, r3, #27
 8006d76:	d506      	bpl.n	8006d86 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d78:	6801      	ldr	r1, [r0, #0]
 8006d7a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006d7c:	688a      	ldr	r2, [r1, #8]
 8006d7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d82:	4322      	orrs	r2, r4
 8006d84:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d86:	0699      	lsls	r1, r3, #26
 8006d88:	d506      	bpl.n	8006d98 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d8a:	6801      	ldr	r1, [r0, #0]
 8006d8c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006d8e:	688a      	ldr	r2, [r1, #8]
 8006d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d94:	4322      	orrs	r2, r4
 8006d96:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d98:	065a      	lsls	r2, r3, #25
 8006d9a:	d50f      	bpl.n	8006dbc <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d9c:	6801      	ldr	r1, [r0, #0]
 8006d9e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006da0:	684a      	ldr	r2, [r1, #4]
 8006da2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006da6:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006da8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006dac:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006dae:	d105      	bne.n	8006dbc <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006db0:	684a      	ldr	r2, [r1, #4]
 8006db2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006db4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006db8:	4322      	orrs	r2, r4
 8006dba:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dbc:	061b      	lsls	r3, r3, #24
 8006dbe:	d506      	bpl.n	8006dce <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006dc0:	6802      	ldr	r2, [r0, #0]
 8006dc2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006dc4:	6853      	ldr	r3, [r2, #4]
 8006dc6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	6053      	str	r3, [r2, #4]
 8006dce:	bd10      	pop	{r4, pc}

08006dd0 <UART_WaitOnFlagUntilTimeout>:
{
 8006dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd4:	9d06      	ldr	r5, [sp, #24]
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	460f      	mov	r7, r1
 8006dda:	4616      	mov	r6, r2
 8006ddc:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dde:	6821      	ldr	r1, [r4, #0]
 8006de0:	69ca      	ldr	r2, [r1, #28]
 8006de2:	ea37 0302 	bics.w	r3, r7, r2
 8006de6:	bf0c      	ite	eq
 8006de8:	2201      	moveq	r2, #1
 8006dea:	2200      	movne	r2, #0
 8006dec:	42b2      	cmp	r2, r6
 8006dee:	d002      	beq.n	8006df6 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8006df0:	2000      	movs	r0, #0
}
 8006df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8006df6:	1c6b      	adds	r3, r5, #1
 8006df8:	d0f2      	beq.n	8006de0 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006dfa:	b99d      	cbnz	r5, 8006e24 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006e04:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	f022 0201 	bic.w	r2, r2, #1
 8006e0c:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006e0e:	2320      	movs	r3, #32
 8006e10:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        huart->RxState = HAL_UART_STATE_READY;
 8006e14:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
        __HAL_UNLOCK(huart);
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8006e1e:	2003      	movs	r0, #3
 8006e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006e24:	f7fa f8fc 	bl	8001020 <HAL_GetTick>
 8006e28:	eba0 0008 	sub.w	r0, r0, r8
 8006e2c:	4285      	cmp	r5, r0
 8006e2e:	d2d6      	bcs.n	8006dde <UART_WaitOnFlagUntilTimeout+0xe>
 8006e30:	e7e4      	b.n	8006dfc <UART_WaitOnFlagUntilTimeout+0x2c>

08006e32 <UART_CheckIdleState>:
{
 8006e32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e34:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e36:	2600      	movs	r6, #0
 8006e38:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8006e3c:	f7fa f8f0 	bl	8001020 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8006e46:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e48:	d417      	bmi.n	8006e7a <UART_CheckIdleState+0x48>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	075b      	lsls	r3, r3, #29
 8006e50:	d50a      	bpl.n	8006e68 <UART_CheckIdleState+0x36>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	462b      	mov	r3, r5
 8006e5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e60:	4620      	mov	r0, r4
 8006e62:	f7ff ffb5 	bl	8006dd0 <UART_WaitOnFlagUntilTimeout>
 8006e66:	b9a0      	cbnz	r0, 8006e92 <UART_CheckIdleState+0x60>
  huart->gState= HAL_UART_STATE_READY;
 8006e68:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006e6a:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8006e6c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006e70:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState= HAL_UART_STATE_READY;
 8006e74:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
  return HAL_OK;
 8006e78:	e00c      	b.n	8006e94 <UART_CheckIdleState+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	4632      	mov	r2, r6
 8006e82:	4603      	mov	r3, r0
 8006e84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f7ff ffa1 	bl	8006dd0 <UART_WaitOnFlagUntilTimeout>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d0db      	beq.n	8006e4a <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006e92:	2003      	movs	r0, #3
}
 8006e94:	b002      	add	sp, #8
 8006e96:	bd70      	pop	{r4, r5, r6, pc}

08006e98 <HAL_UART_Init>:
{
 8006e98:	b510      	push	{r4, lr}
  if(huart == NULL)
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	b360      	cbz	r0, 8006ef8 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8006e9e:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006ea2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006ea6:	b91b      	cbnz	r3, 8006eb0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006ea8:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006eac:	f01a fa4e 	bl	802134c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006eb0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006eb2:	2324      	movs	r3, #36	; 0x24
 8006eb4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UART_DISABLE(huart);
 8006eb8:	6813      	ldr	r3, [r2, #0]
 8006eba:	f023 0301 	bic.w	r3, r3, #1
 8006ebe:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f7ff fd37 	bl	8006934 <UART_SetConfig>
 8006ec6:	2801      	cmp	r0, #1
 8006ec8:	d016      	beq.n	8006ef8 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ecc:	b113      	cbz	r3, 8006ed4 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f7ff ff2a 	bl	8006d28 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006edc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ee4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006eec:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006eee:	601a      	str	r2, [r3, #0]
}
 8006ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8006ef4:	f7ff bf9d 	b.w	8006e32 <UART_CheckIdleState>
}
 8006ef8:	2001      	movs	r0, #1
 8006efa:	bd10      	pop	{r4, pc}

08006efc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006efe:	2203      	movs	r2, #3
 8006f00:	f88d 2003 	strb.w	r2, [sp, #3]
 8006f04:	2207      	movs	r2, #7
 8006f06:	f88d 2004 	strb.w	r2, [sp, #4]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006f0a:	2208      	movs	r2, #8
 8006f0c:	f88d 2008 	strb.w	r2, [sp, #8]
 8006f10:	f88d 200c 	strb.w	r2, [sp, #12]
  
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f14:	6e82      	ldr	r2, [r0, #104]	; 0x68
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006f16:	2301      	movs	r3, #1
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006f18:	2104      	movs	r1, #4
 8006f1a:	2402      	movs	r4, #2
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006f1c:	f88d 3000 	strb.w	r3, [sp]
 8006f20:	f88d 3001 	strb.w	r3, [sp, #1]
 8006f24:	f88d 3002 	strb.w	r3, [sp, #2]
 8006f28:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006f2c:	f88d 1009 	strb.w	r1, [sp, #9]
 8006f30:	f88d 400a 	strb.w	r4, [sp, #10]
 8006f34:	f88d 100b 	strb.w	r1, [sp, #11]
 8006f38:	f88d 300d 	strb.w	r3, [sp, #13]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f3c:	b92a      	cbnz	r2, 8006f4a <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1;
 8006f3e:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    rx_fifo_depth = 8; /* RX Fifo size */
    tx_fifo_depth = 8; /* TX Fifo size */
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006f42:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  }
}
 8006f46:	b004      	add	sp, #16
 8006f48:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f4a:	6803      	ldr	r3, [r0, #0]
 8006f4c:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f4e:	6899      	ldr	r1, [r3, #8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8006f50:	ab04      	add	r3, sp, #16
 8006f52:	eb03 7151 	add.w	r1, r3, r1, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006f56:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8006f5a:	f811 3c10 	ldrb.w	r3, [r1, #-16]
 8006f5e:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f6a:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006f6e:	ab04      	add	r3, sp, #16
 8006f70:	441a      	add	r2, r3
 8006f72:	f812 3c10 	ldrb.w	r3, [r2, #-16]
 8006f76:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f82:	e7de      	b.n	8006f42 <UARTEx_SetNbDataToProcess+0x46>

08006f84 <HAL_UARTEx_WakeupCallback>:
 8006f84:	4770      	bx	lr

08006f86 <HAL_UARTEx_RxFifoFullCallback>:
 8006f86:	4770      	bx	lr

08006f88 <HAL_UARTEx_TxFifoEmptyCallback>:
{
 8006f88:	4770      	bx	lr

08006f8a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006f8a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006f8c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006f90:	2b01      	cmp	r3, #1
{
 8006f92:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006f94:	d01b      	beq.n	8006fce <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8006f96:	2301      	movs	r3, #1
 8006f98:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006f9c:	2324      	movs	r3, #36	; 0x24
 8006f9e:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fa2:	6803      	ldr	r3, [r0, #0]
 8006fa4:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	f022 0201 	bic.w	r2, r2, #1
 8006fac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006fb4:	4311      	orrs	r1, r2
 8006fb6:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006fb8:	f7ff ffa0 	bl	8006efc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fbc:	6803      	ldr	r3, [r0, #0]
 8006fbe:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006fc0:	2320      	movs	r3, #32
 8006fc2:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006fc6:	2000      	movs	r0, #0
 8006fc8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8006fcc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006fce:	2002      	movs	r0, #2
}
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}

08006fd2 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006fd2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006fd4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006fd8:	2b01      	cmp	r3, #1
{
 8006fda:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006fdc:	d01b      	beq.n	8007016 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8006fde:	2301      	movs	r3, #1
 8006fe0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006fe4:	2324      	movs	r3, #36	; 0x24
 8006fe6:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fea:	6803      	ldr	r3, [r0, #0]
 8006fec:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006fee:	681a      	ldr	r2, [r3, #0]
 8006ff0:	f022 0201 	bic.w	r2, r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ff6:	689a      	ldr	r2, [r3, #8]
 8006ff8:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8006ffc:	4311      	orrs	r1, r2
 8006ffe:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007000:	f7ff ff7c 	bl	8006efc <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007004:	6803      	ldr	r3, [r0, #0]
 8007006:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007008:	2320      	movs	r3, #32
 800700a:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 800700e:	2000      	movs	r0, #0
 8007010:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8007014:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007016:	2002      	movs	r0, #2
}
 8007018:	bd38      	pop	{r3, r4, r5, pc}
	...

0800701c <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800701c:	4b11      	ldr	r3, [pc, #68]	; (8007064 <SDMMC_GetCmdResp2+0x48>)
 800701e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	fbb3 f2f2 	udiv	r2, r3, r2
 8007028:	f241 3388 	movw	r3, #5000	; 0x1388
 800702c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800702e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007032:	d313      	bcc.n	800705c <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007034:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007036:	f012 0f45 	tst.w	r2, #69	; 0x45
 800703a:	d0f8      	beq.n	800702e <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800703c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800703e:	075b      	lsls	r3, r3, #29
 8007040:	d503      	bpl.n	800704a <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007042:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007044:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8007046:	4618      	mov	r0, r3
 8007048:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800704a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800704c:	f013 0301 	ands.w	r3, r3, #1
 8007050:	d001      	beq.n	8007056 <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007052:	2301      	movs	r3, #1
 8007054:	e7f6      	b.n	8007044 <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007056:	4a04      	ldr	r2, [pc, #16]	; (8007068 <SDMMC_GetCmdResp2+0x4c>)
 8007058:	6382      	str	r2, [r0, #56]	; 0x38
 800705a:	e7f4      	b.n	8007046 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800705c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007060:	e7f1      	b.n	8007046 <SDMMC_GetCmdResp2+0x2a>
 8007062:	bf00      	nop
 8007064:	20000a50 	.word	0x20000a50
 8007068:	002000c5 	.word	0x002000c5

0800706c <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800706c:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <SDMMC_GetCmdResp3+0x3c>)
 800706e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	fbb3 f2f2 	udiv	r2, r3, r2
 8007078:	f241 3388 	movw	r3, #5000	; 0x1388
 800707c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800707e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007082:	d30d      	bcc.n	80070a0 <SDMMC_GetCmdResp3+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007084:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007086:	f012 0f45 	tst.w	r2, #69	; 0x45
 800708a:	d0f8      	beq.n	800707e <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800708c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800708e:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007092:	bf15      	itete	ne
 8007094:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007096:	4a05      	ldreq	r2, [pc, #20]	; (80070ac <SDMMC_GetCmdResp3+0x40>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007098:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800709a:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800709c:	4618      	mov	r0, r3
 800709e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 80070a0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop
 80070a8:	20000a50 	.word	0x20000a50
 80070ac:	002000c5 	.word	0x002000c5

080070b0 <SDMMC_Init>:
{
 80070b0:	b084      	sub	sp, #16
 80070b2:	b510      	push	{r4, lr}
 80070b4:	ac03      	add	r4, sp, #12
 80070b6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80070ba:	9a04      	ldr	r2, [sp, #16]
 80070bc:	9b03      	ldr	r3, [sp, #12]
 80070be:	6841      	ldr	r1, [r0, #4]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	9a05      	ldr	r2, [sp, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	9a06      	ldr	r2, [sp, #24]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	9a07      	ldr	r2, [sp, #28]
}
 80070cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80070d0:	4313      	orrs	r3, r2
 80070d2:	4a03      	ldr	r2, [pc, #12]	; (80070e0 <SDMMC_Init+0x30>)
 80070d4:	400a      	ands	r2, r1
 80070d6:	4313      	orrs	r3, r2
 80070d8:	6043      	str	r3, [r0, #4]
}
 80070da:	b004      	add	sp, #16
 80070dc:	2000      	movs	r0, #0
 80070de:	4770      	bx	lr
 80070e0:	fffc2c00 	.word	0xfffc2c00

080070e4 <SDMMC_ReadFIFO>:
 80070e4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80070e8:	4770      	bx	lr

080070ea <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 80070ea:	680b      	ldr	r3, [r1, #0]
 80070ec:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80070f0:	2000      	movs	r0, #0
 80070f2:	4770      	bx	lr

080070f4 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80070f4:	6803      	ldr	r3, [r0, #0]
 80070f6:	f043 0303 	orr.w	r3, r3, #3
 80070fa:	6003      	str	r3, [r0, #0]
}
 80070fc:	2000      	movs	r0, #0
 80070fe:	4770      	bx	lr

08007100 <SDMMC_PowerState_OFF>:
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8007100:	6803      	ldr	r3, [r0, #0]
 8007102:	f023 0303 	bic.w	r3, r3, #3
 8007106:	6003      	str	r3, [r0, #0]
}
 8007108:	2000      	movs	r0, #0
 800710a:	4770      	bx	lr

0800710c <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800710c:	6800      	ldr	r0, [r0, #0]
}
 800710e:	f000 0003 	and.w	r0, r0, #3
 8007112:	4770      	bx	lr

08007114 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8007114:	680b      	ldr	r3, [r1, #0]
 8007116:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007118:	68c2      	ldr	r2, [r0, #12]
 800711a:	4b06      	ldr	r3, [pc, #24]	; (8007134 <SDMMC_SendCommand+0x20>)
 800711c:	4013      	ands	r3, r2
 800711e:	684a      	ldr	r2, [r1, #4]
 8007120:	4313      	orrs	r3, r2
 8007122:	688a      	ldr	r2, [r1, #8]
 8007124:	4313      	orrs	r3, r2
 8007126:	68ca      	ldr	r2, [r1, #12]
 8007128:	4313      	orrs	r3, r2
 800712a:	690a      	ldr	r2, [r1, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	60c3      	str	r3, [r0, #12]
}
 8007130:	2000      	movs	r0, #0
 8007132:	4770      	bx	lr
 8007134:	fffee0c0 	.word	0xfffee0c0

08007138 <SDMMC_GetResponse>:
{
 8007138:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800713a:	3014      	adds	r0, #20
 800713c:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007142:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8007144:	9b01      	ldr	r3, [sp, #4]
 8007146:	6818      	ldr	r0, [r3, #0]
}  
 8007148:	b002      	add	sp, #8
 800714a:	4770      	bx	lr

0800714c <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800714c:	4b44      	ldr	r3, [pc, #272]	; (8007260 <SDMMC_GetCmdResp1+0x114>)
{
 800714e:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8007156:	fbb3 f3f4 	udiv	r3, r3, r4
 800715a:	435a      	muls	r2, r3
    if (count-- == 0)
 800715c:	2a00      	cmp	r2, #0
 800715e:	d049      	beq.n	80071f4 <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007160:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007162:	f013 0f45 	tst.w	r3, #69	; 0x45
 8007166:	f102 32ff 	add.w	r2, r2, #4294967295
 800716a:	d0f7      	beq.n	800715c <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800716c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800716e:	075c      	lsls	r4, r3, #29
 8007170:	d503      	bpl.n	800717a <SDMMC_GetCmdResp1+0x2e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007172:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007174:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007176:	4618      	mov	r0, r3
 8007178:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800717a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800717c:	f013 0301 	ands.w	r3, r3, #1
 8007180:	d001      	beq.n	8007186 <SDMMC_GetCmdResp1+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007182:	2301      	movs	r3, #1
 8007184:	e7f6      	b.n	8007174 <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007186:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	4291      	cmp	r1, r2
 800718c:	d135      	bne.n	80071fa <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800718e:	4a35      	ldr	r2, [pc, #212]	; (8007264 <SDMMC_GetCmdResp1+0x118>)
 8007190:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007192:	4619      	mov	r1, r3
 8007194:	f7ff ffd0 	bl	8007138 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007198:	4b33      	ldr	r3, [pc, #204]	; (8007268 <SDMMC_GetCmdResp1+0x11c>)
 800719a:	4003      	ands	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d0ea      	beq.n	8007176 <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80071a0:	2800      	cmp	r0, #0
 80071a2:	db2c      	blt.n	80071fe <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80071a4:	0042      	lsls	r2, r0, #1
 80071a6:	d42d      	bmi.n	8007204 <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80071a8:	0084      	lsls	r4, r0, #2
 80071aa:	d42d      	bmi.n	8007208 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80071ac:	00c1      	lsls	r1, r0, #3
 80071ae:	d42d      	bmi.n	800720c <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80071b0:	0102      	lsls	r2, r0, #4
 80071b2:	d42e      	bmi.n	8007212 <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80071b4:	0144      	lsls	r4, r0, #5
 80071b6:	d42f      	bmi.n	8007218 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80071b8:	01c1      	lsls	r1, r0, #7
 80071ba:	d430      	bmi.n	800721e <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80071bc:	0202      	lsls	r2, r0, #8
 80071be:	d431      	bmi.n	8007224 <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80071c0:	0244      	lsls	r4, r0, #9
 80071c2:	d432      	bmi.n	800722a <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80071c4:	0281      	lsls	r1, r0, #10
 80071c6:	d433      	bmi.n	8007230 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80071c8:	02c2      	lsls	r2, r0, #11
 80071ca:	d434      	bmi.n	8007236 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80071cc:	0344      	lsls	r4, r0, #13
 80071ce:	d435      	bmi.n	800723c <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80071d0:	0381      	lsls	r1, r0, #14
 80071d2:	d436      	bmi.n	8007242 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80071d4:	03c2      	lsls	r2, r0, #15
 80071d6:	d437      	bmi.n	8007248 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80071d8:	0404      	lsls	r4, r0, #16
 80071da:	d438      	bmi.n	800724e <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80071dc:	0441      	lsls	r1, r0, #17
 80071de:	d439      	bmi.n	8007254 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80071e0:	0482      	lsls	r2, r0, #18
 80071e2:	d43a      	bmi.n	800725a <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80071e4:	f010 0f08 	tst.w	r0, #8
 80071e8:	bf14      	ite	ne
 80071ea:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80071ee:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80071f2:	e7c0      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80071f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071f8:	e7bd      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e7bb      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80071fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007202:	e7b8      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007204:	2340      	movs	r3, #64	; 0x40
 8007206:	e7b6      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007208:	2380      	movs	r3, #128	; 0x80
 800720a:	e7b4      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800720c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007210:	e7b1      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007216:	e7ae      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800721c:	e7ab      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800721e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007222:	e7a8      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007228:	e7a5      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800722a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800722e:	e7a2      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007230:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007234:	e79f      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 8007236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800723a:	e79c      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800723c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007240:	e799      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007242:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007246:	e796      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007248:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800724c:	e793      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800724e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007252:	e790      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007254:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007258:	e78d      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 800725a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800725e:	e78a      	b.n	8007176 <SDMMC_GetCmdResp1+0x2a>
 8007260:	20000a50 	.word	0x20000a50
 8007264:	002000c5 	.word	0x002000c5
 8007268:	fdffe008 	.word	0xfdffe008

0800726c <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800726c:	680b      	ldr	r3, [r1, #0]
 800726e:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007270:	684b      	ldr	r3, [r1, #4]
 8007272:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8007274:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007276:	688a      	ldr	r2, [r1, #8]
 8007278:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800727c:	4313      	orrs	r3, r2
 800727e:	68ca      	ldr	r2, [r1, #12]
 8007280:	4313      	orrs	r3, r2
 8007282:	690a      	ldr	r2, [r1, #16]
 8007284:	4313      	orrs	r3, r2
 8007286:	694a      	ldr	r2, [r1, #20]
 8007288:	4313      	orrs	r3, r2
 800728a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800728c:	2000      	movs	r0, #0
 800728e:	4770      	bx	lr

08007290 <SDMMC_CmdBlockLength>:
{
 8007290:	b530      	push	{r4, r5, lr}
 8007292:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007298:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800729a:	2300      	movs	r3, #0
{
 800729c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800729e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80072a0:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072a2:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072a4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072aa:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80072ac:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072ae:	f7ff ff31 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80072b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072b6:	4621      	mov	r1, r4
 80072b8:	4628      	mov	r0, r5
 80072ba:	f7ff ff47 	bl	800714c <SDMMC_GetCmdResp1>
}
 80072be:	b007      	add	sp, #28
 80072c0:	bd30      	pop	{r4, r5, pc}

080072c2 <SDMMC_CmdReadSingleBlock>:
{
 80072c2:	b530      	push	{r4, r5, lr}
 80072c4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072ca:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072cc:	2300      	movs	r3, #0
{
 80072ce:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80072d0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80072d2:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072d4:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072d6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072dc:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80072de:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072e0:	f7ff ff18 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80072e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072e8:	4621      	mov	r1, r4
 80072ea:	4628      	mov	r0, r5
 80072ec:	f7ff ff2e 	bl	800714c <SDMMC_GetCmdResp1>
}
 80072f0:	b007      	add	sp, #28
 80072f2:	bd30      	pop	{r4, r5, pc}

080072f4 <SDMMC_CmdReadMultiBlock>:
{
 80072f4:	b530      	push	{r4, r5, lr}
 80072f6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072fc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072fe:	2300      	movs	r3, #0
{
 8007300:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007302:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007304:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007306:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007308:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800730a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800730e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007310:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007312:	f7ff feff 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007316:	f241 3288 	movw	r2, #5000	; 0x1388
 800731a:	4621      	mov	r1, r4
 800731c:	4628      	mov	r0, r5
 800731e:	f7ff ff15 	bl	800714c <SDMMC_GetCmdResp1>
}
 8007322:	b007      	add	sp, #28
 8007324:	bd30      	pop	{r4, r5, pc}

08007326 <SDMMC_CmdWriteSingleBlock>:
{
 8007326:	b530      	push	{r4, r5, lr}
 8007328:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800732a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800732e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007330:	2300      	movs	r3, #0
{
 8007332:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007334:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007336:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007338:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800733a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800733c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007340:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007342:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007344:	f7ff fee6 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007348:	f241 3288 	movw	r2, #5000	; 0x1388
 800734c:	4621      	mov	r1, r4
 800734e:	4628      	mov	r0, r5
 8007350:	f7ff fefc 	bl	800714c <SDMMC_GetCmdResp1>
}
 8007354:	b007      	add	sp, #28
 8007356:	bd30      	pop	{r4, r5, pc}

08007358 <SDMMC_CmdWriteMultiBlock>:
{
 8007358:	b530      	push	{r4, r5, lr}
 800735a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800735c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007360:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007362:	2300      	movs	r3, #0
{
 8007364:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007366:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007368:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800736a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800736c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800736e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007372:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007374:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007376:	f7ff fecd 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800737a:	f241 3288 	movw	r2, #5000	; 0x1388
 800737e:	4621      	mov	r1, r4
 8007380:	4628      	mov	r0, r5
 8007382:	f7ff fee3 	bl	800714c <SDMMC_GetCmdResp1>
}
 8007386:	b007      	add	sp, #28
 8007388:	bd30      	pop	{r4, r5, pc}
	...

0800738c <SDMMC_CmdStopTransfer>:
{
 800738c:	b530      	push	{r4, r5, lr}
 800738e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 8007390:	2300      	movs	r3, #0
{
 8007392:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 8007394:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007396:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007398:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800739c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800739e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073a4:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073a6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80073a8:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073aa:	f7ff feb3 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80073ae:	4a03      	ldr	r2, [pc, #12]	; (80073bc <SDMMC_CmdStopTransfer+0x30>)
 80073b0:	4621      	mov	r1, r4
 80073b2:	4628      	mov	r0, r5
 80073b4:	f7ff feca 	bl	800714c <SDMMC_GetCmdResp1>
}
 80073b8:	b007      	add	sp, #28
 80073ba:	bd30      	pop	{r4, r5, pc}
 80073bc:	05f5e100 	.word	0x05f5e100

080073c0 <SDMMC_CmdSelDesel>:
{
 80073c0:	b530      	push	{r4, r5, lr}
 80073c2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073c8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073ca:	2300      	movs	r3, #0
{
 80073cc:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80073ce:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073d0:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073d2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80073d8:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073da:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80073dc:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073de:	f7ff fe99 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80073e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e6:	4621      	mov	r1, r4
 80073e8:	4628      	mov	r0, r5
 80073ea:	f7ff feaf 	bl	800714c <SDMMC_GetCmdResp1>
}
 80073ee:	b007      	add	sp, #28
 80073f0:	bd30      	pop	{r4, r5, pc}
	...

080073f4 <SDMMC_CmdGoIdleState>:
{
 80073f4:	b510      	push	{r4, lr}
 80073f6:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 80073f8:	2300      	movs	r3, #0
 80073fa:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80073fc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80073fe:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007400:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007402:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007408:	9305      	str	r3, [sp, #20]
{
 800740a:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800740c:	f7ff fe82 	bl	8007114 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007410:	4b0b      	ldr	r3, [pc, #44]	; (8007440 <SDMMC_CmdGoIdleState+0x4c>)
 8007412:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	fbb3 f2f2 	udiv	r2, r3, r2
 800741c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007420:	4353      	muls	r3, r2
    if (count-- == 0)
 8007422:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007426:	d307      	bcc.n	8007438 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007428:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800742a:	0612      	lsls	r2, r2, #24
 800742c:	d5f9      	bpl.n	8007422 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800742e:	4b05      	ldr	r3, [pc, #20]	; (8007444 <SDMMC_CmdGoIdleState+0x50>)
 8007430:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007432:	2000      	movs	r0, #0
}
 8007434:	b006      	add	sp, #24
 8007436:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8007438:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800743c:	e7fa      	b.n	8007434 <SDMMC_CmdGoIdleState+0x40>
 800743e:	bf00      	nop
 8007440:	20000a50 	.word	0x20000a50
 8007444:	002000c5 	.word	0x002000c5

08007448 <SDMMC_CmdOperCond>:
{
 8007448:	b510      	push	{r4, lr}
 800744a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800744c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007450:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007452:	2308      	movs	r3, #8
 8007454:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007456:	f44f 7380 	mov.w	r3, #256	; 0x100
 800745a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800745c:	2300      	movs	r3, #0
 800745e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007460:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007466:	9305      	str	r3, [sp, #20]
{
 8007468:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800746a:	f7ff fe53 	bl	8007114 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800746e:	4b14      	ldr	r3, [pc, #80]	; (80074c0 <SDMMC_CmdOperCond+0x78>)
 8007470:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	fbb3 f2f2 	udiv	r2, r3, r2
 800747a:	f241 3388 	movw	r3, #5000	; 0x1388
 800747e:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8007480:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007484:	d318      	bcc.n	80074b8 <SDMMC_CmdOperCond+0x70>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007486:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007488:	f012 0f45 	tst.w	r2, #69	; 0x45
 800748c:	d0f8      	beq.n	8007480 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800748e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007490:	075b      	lsls	r3, r3, #29
 8007492:	d503      	bpl.n	800749c <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007494:	2004      	movs	r0, #4
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007496:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007498:	b006      	add	sp, #24
 800749a:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800749c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800749e:	f012 0201 	ands.w	r2, r2, #1
 80074a2:	d001      	beq.n	80074a8 <SDMMC_CmdOperCond+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80074a4:	2001      	movs	r0, #1
 80074a6:	e7f6      	b.n	8007496 <SDMMC_CmdOperCond+0x4e>
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80074a8:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80074aa:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 80074ae:	d0f3      	beq.n	8007498 <SDMMC_CmdOperCond+0x50>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80074b0:	2340      	movs	r3, #64	; 0x40
 80074b2:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80074b4:	4610      	mov	r0, r2
 80074b6:	e7ef      	b.n	8007498 <SDMMC_CmdOperCond+0x50>
      return SDMMC_ERROR_TIMEOUT;
 80074b8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80074bc:	e7ec      	b.n	8007498 <SDMMC_CmdOperCond+0x50>
 80074be:	bf00      	nop
 80074c0:	20000a50 	.word	0x20000a50

080074c4 <SDMMC_CmdAppCommand>:
{
 80074c4:	b530      	push	{r4, r5, lr}
 80074c6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074cc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074ce:	2300      	movs	r3, #0
{
 80074d0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80074d2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80074d4:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074d6:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074d8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074de:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80074e0:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074e2:	f7ff fe17 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80074e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ea:	4621      	mov	r1, r4
 80074ec:	4628      	mov	r0, r5
 80074ee:	f7ff fe2d 	bl	800714c <SDMMC_GetCmdResp1>
}
 80074f2:	b007      	add	sp, #28
 80074f4:	bd30      	pop	{r4, r5, pc}

080074f6 <SDMMC_CmdAppOperCommand>:
{
 80074f6:	b510      	push	{r4, lr}
 80074f8:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80074fa:	2329      	movs	r3, #41	; 0x29
 80074fc:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007502:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007504:	2300      	movs	r3, #0
{
 8007506:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007508:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800750a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800750c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800750e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007512:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007514:	f7ff fdfe 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007518:	4620      	mov	r0, r4
 800751a:	f7ff fda7 	bl	800706c <SDMMC_GetCmdResp3>
}
 800751e:	b006      	add	sp, #24
 8007520:	bd10      	pop	{r4, pc}

08007522 <SDMMC_CmdSendSCR>:
{
 8007522:	b530      	push	{r4, r5, lr}
 8007524:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 8007526:	2300      	movs	r3, #0
{
 8007528:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 800752a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800752c:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800752e:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007532:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007534:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007536:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800753a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800753c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800753e:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007540:	f7ff fde8 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007544:	f241 3288 	movw	r2, #5000	; 0x1388
 8007548:	4621      	mov	r1, r4
 800754a:	4628      	mov	r0, r5
 800754c:	f7ff fdfe 	bl	800714c <SDMMC_GetCmdResp1>
}
 8007550:	b007      	add	sp, #28
 8007552:	bd30      	pop	{r4, r5, pc}

08007554 <SDMMC_CmdSendCID>:
{
 8007554:	b510      	push	{r4, lr}
 8007556:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 8007558:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800755a:	2202      	movs	r2, #2
{
 800755c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800755e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007560:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007562:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007564:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800756c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800756e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007570:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007572:	f7ff fdcf 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007576:	4620      	mov	r0, r4
 8007578:	f7ff fd50 	bl	800701c <SDMMC_GetCmdResp2>
}
 800757c:	b006      	add	sp, #24
 800757e:	bd10      	pop	{r4, pc}

08007580 <SDMMC_CmdSendCSD>:
{
 8007580:	b510      	push	{r4, lr}
 8007582:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007584:	2309      	movs	r3, #9
 8007586:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007588:	f44f 7340 	mov.w	r3, #768	; 0x300
 800758c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800758e:	2300      	movs	r3, #0
{
 8007590:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007592:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007594:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007596:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800759c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800759e:	f7ff fdb9 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80075a2:	4620      	mov	r0, r4
 80075a4:	f7ff fd3a 	bl	800701c <SDMMC_GetCmdResp2>
}
 80075a8:	b006      	add	sp, #24
 80075aa:	bd10      	pop	{r4, pc}

080075ac <SDMMC_CmdSetRelAdd>:
{
 80075ac:	b530      	push	{r4, r5, lr}
 80075ae:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 80075b0:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80075b2:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0;
 80075b4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80075b6:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075b8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075ba:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
 80075c2:	460d      	mov	r5, r1
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075c4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075c6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075c8:	9305      	str	r3, [sp, #20]
{
 80075ca:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075cc:	f7ff fda2 	bl	8007114 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80075d0:	4b1f      	ldr	r3, [pc, #124]	; (8007650 <SDMMC_CmdSetRelAdd+0xa4>)
 80075d2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	fbb3 f2f2 	udiv	r2, r3, r2
 80075dc:	f241 3388 	movw	r3, #5000	; 0x1388
 80075e0:	4353      	muls	r3, r2
    if (count-- == 0)
 80075e2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80075e6:	d32a      	bcc.n	800763e <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80075e8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80075ea:	f012 0f45 	tst.w	r2, #69	; 0x45
 80075ee:	d0f8      	beq.n	80075e2 <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80075f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075f2:	075a      	lsls	r2, r3, #29
 80075f4:	d503      	bpl.n	80075fe <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80075f6:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80075f8:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80075fa:	b007      	add	sp, #28
 80075fc:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80075fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007600:	f011 0101 	ands.w	r1, r1, #1
 8007604:	d001      	beq.n	800760a <SDMMC_CmdSetRelAdd+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007606:	2001      	movs	r0, #1
 8007608:	e7f6      	b.n	80075f8 <SDMMC_CmdSetRelAdd+0x4c>
  return (uint8_t)(SDMMCx->RESPCMD);
 800760a:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800760c:	b2db      	uxtb	r3, r3
 800760e:	2b03      	cmp	r3, #3
 8007610:	d118      	bne.n	8007644 <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007612:	4b10      	ldr	r3, [pc, #64]	; (8007654 <SDMMC_CmdSetRelAdd+0xa8>)
 8007614:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007616:	4620      	mov	r0, r4
 8007618:	f7ff fd8e 	bl	8007138 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800761c:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8007620:	d103      	bne.n	800762a <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007622:	0c00      	lsrs	r0, r0, #16
 8007624:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8007626:	4618      	mov	r0, r3
 8007628:	e7e7      	b.n	80075fa <SDMMC_CmdSetRelAdd+0x4e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800762a:	0443      	lsls	r3, r0, #17
 800762c:	d40c      	bmi.n	8007648 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800762e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007632:	bf14      	ite	ne
 8007634:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8007638:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800763c:	e7dd      	b.n	80075fa <SDMMC_CmdSetRelAdd+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 800763e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007642:	e7da      	b.n	80075fa <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007644:	2001      	movs	r0, #1
 8007646:	e7d8      	b.n	80075fa <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007648:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800764c:	e7d5      	b.n	80075fa <SDMMC_CmdSetRelAdd+0x4e>
 800764e:	bf00      	nop
 8007650:	20000a50 	.word	0x20000a50
 8007654:	002000c5 	.word	0x002000c5

08007658 <SDMMC_CmdSendStatus>:
{
 8007658:	b530      	push	{r4, r5, lr}
 800765a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800765c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007660:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007662:	2300      	movs	r3, #0
{
 8007664:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007666:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007668:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800766a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800766c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800766e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007672:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007674:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007676:	f7ff fd4d 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800767a:	f241 3288 	movw	r2, #5000	; 0x1388
 800767e:	4621      	mov	r1, r4
 8007680:	4628      	mov	r0, r5
 8007682:	f7ff fd63 	bl	800714c <SDMMC_GetCmdResp1>
}
 8007686:	b007      	add	sp, #28
 8007688:	bd30      	pop	{r4, r5, pc}

0800768a <SDMMC_CmdSwitch>:
{
 800768a:	b530      	push	{r4, r5, lr}
 800768c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800768e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007692:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007694:	2300      	movs	r3, #0
{
 8007696:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007698:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800769a:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800769c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800769e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076a4:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 80076a6:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076a8:	f7ff fd34 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 80076ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b0:	4621      	mov	r1, r4
 80076b2:	4628      	mov	r0, r5
 80076b4:	f7ff fd4a 	bl	800714c <SDMMC_GetCmdResp1>
}
 80076b8:	b007      	add	sp, #28
 80076ba:	bd30      	pop	{r4, r5, pc}

080076bc <SDMMC_CmdBusWidth>:
 80076bc:	f7ff bfe5 	b.w	800768a <SDMMC_CmdSwitch>

080076c0 <SDMMC_CmdVoltageSwitch>:
{
 80076c0:	b530      	push	{r4, r5, lr}
 80076c2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0x00000000;
 80076c4:	2300      	movs	r3, #0
{
 80076c6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 80076c8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80076ca:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076cc:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076d0:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076d2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076d8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076da:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80076dc:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076de:	f7ff fd19 	bl	8007114 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80076e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076e6:	4621      	mov	r1, r4
 80076e8:	4628      	mov	r0, r5
 80076ea:	f7ff fd2f 	bl	800714c <SDMMC_GetCmdResp1>
}
 80076ee:	b007      	add	sp, #28
 80076f0:	bd30      	pop	{r4, r5, pc}
	...

080076f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076f4:	4b0a      	ldr	r3, [pc, #40]	; (8007720 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80076f6:	3b01      	subs	r3, #1
 80076f8:	d101      	bne.n	80076fe <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80076fa:	2003      	movs	r0, #3
 80076fc:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076fe:	6902      	ldr	r2, [r0, #16]
 8007700:	2a00      	cmp	r2, #0
 8007702:	daf8      	bge.n	80076f6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007704:	6903      	ldr	r3, [r0, #16]
 8007706:	4a06      	ldr	r2, [pc, #24]	; (8007720 <USB_CoreReset+0x2c>)
 8007708:	f043 0301 	orr.w	r3, r3, #1
 800770c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800770e:	3a01      	subs	r2, #1
 8007710:	d0f3      	beq.n	80076fa <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007712:	6903      	ldr	r3, [r0, #16]
 8007714:	f013 0301 	ands.w	r3, r3, #1
 8007718:	d1f9      	bne.n	800770e <USB_CoreReset+0x1a>

  return HAL_OK;
 800771a:	4618      	mov	r0, r3
}
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	00030d41 	.word	0x00030d41

08007724 <USB_CoreInit>:
{
 8007724:	b084      	sub	sp, #16
 8007726:	b538      	push	{r3, r4, r5, lr}
 8007728:	ad05      	add	r5, sp, #20
 800772a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800772e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007730:	2b01      	cmp	r3, #1
{
 8007732:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007734:	d11b      	bne.n	800776e <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007736:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800773c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800773e:	68c3      	ldr	r3, [r0, #12]
 8007740:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007748:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800774a:	68c3      	ldr	r3, [r0, #12]
 800774c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007750:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8007752:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007754:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007756:	bf02      	ittt	eq
 8007758:	68c3      	ldreq	r3, [r0, #12]
 800775a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800775e:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8007760:	f7ff ffc8 	bl	80076f4 <USB_CoreReset>
}
 8007764:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007768:	2000      	movs	r0, #0
 800776a:	b004      	add	sp, #16
 800776c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800776e:	68c3      	ldr	r3, [r0, #12]
 8007770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007774:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8007776:	f7ff ffbd 	bl	80076f4 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800777a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800777e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007780:	e7f0      	b.n	8007764 <USB_CoreInit+0x40>

08007782 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007782:	6883      	ldr	r3, [r0, #8]
 8007784:	f043 0301 	orr.w	r3, r3, #1
 8007788:	6083      	str	r3, [r0, #8]
}
 800778a:	2000      	movs	r0, #0
 800778c:	4770      	bx	lr

0800778e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800778e:	6883      	ldr	r3, [r0, #8]
 8007790:	f023 0301 	bic.w	r3, r3, #1
 8007794:	6083      	str	r3, [r0, #8]
}
 8007796:	2000      	movs	r0, #0
 8007798:	4770      	bx	lr

0800779a <USB_SetCurrentMode>:
{
 800779a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800779c:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800779e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80077a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80077a4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80077a6:	d108      	bne.n	80077ba <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80077a8:	68c3      	ldr	r3, [r0, #12]
 80077aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077ae:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80077b0:	2032      	movs	r0, #50	; 0x32
 80077b2:	f7f9 fc3b 	bl	800102c <HAL_Delay>
  return HAL_OK;
 80077b6:	2000      	movs	r0, #0
 80077b8:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80077ba:	b919      	cbnz	r1, 80077c4 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077bc:	68c3      	ldr	r3, [r0, #12]
 80077be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077c2:	e7f4      	b.n	80077ae <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80077c4:	2001      	movs	r0, #1
}
 80077c6:	bd08      	pop	{r3, pc}

080077c8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077c8:	0189      	lsls	r1, r1, #6
 80077ca:	f041 0120 	orr.w	r1, r1, #32
 80077ce:	4a06      	ldr	r2, [pc, #24]	; (80077e8 <USB_FlushTxFifo+0x20>)
 80077d0:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80077d2:	3a01      	subs	r2, #1
 80077d4:	d005      	beq.n	80077e2 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077d6:	6903      	ldr	r3, [r0, #16]
 80077d8:	f013 0320 	ands.w	r3, r3, #32
 80077dc:	d1f9      	bne.n	80077d2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80077de:	4618      	mov	r0, r3
 80077e0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80077e2:	2003      	movs	r0, #3
}
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	00030d41 	.word	0x00030d41

080077ec <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077ec:	2310      	movs	r3, #16
 80077ee:	4a06      	ldr	r2, [pc, #24]	; (8007808 <USB_FlushRxFifo+0x1c>)
 80077f0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80077f2:	3a01      	subs	r2, #1
 80077f4:	d005      	beq.n	8007802 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077f6:	6903      	ldr	r3, [r0, #16]
 80077f8:	f013 0310 	ands.w	r3, r3, #16
 80077fc:	d1f9      	bne.n	80077f2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80077fe:	4618      	mov	r0, r3
 8007800:	4770      	bx	lr
      return HAL_TIMEOUT;
 8007802:	2003      	movs	r0, #3
}
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	00030d41 	.word	0x00030d41

0800780c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800780c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007810:	4319      	orrs	r1, r3
 8007812:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8007816:	2000      	movs	r0, #0
 8007818:	4770      	bx	lr
	...

0800781c <USB_DevInit>:
{
 800781c:	b084      	sub	sp, #16
 800781e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007822:	4604      	mov	r4, r0
 8007824:	a807      	add	r0, sp, #28
 8007826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800782a:	2300      	movs	r3, #0
 800782c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800782e:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8007830:	4619      	mov	r1, r3
 8007832:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007836:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800783a:	3301      	adds	r3, #1
 800783c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800783e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8007840:	d1f7      	bne.n	8007832 <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007842:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007844:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007848:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 800784a:	b95f      	cbnz	r7, 8007864 <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800784c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800784e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007852:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007854:	6823      	ldr	r3, [r4, #0]
 8007856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800785a:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007862:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8007864:	2500      	movs	r5, #0
 8007866:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800786a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800786e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007872:	2103      	movs	r1, #3
 8007874:	4620      	mov	r0, r4
 8007876:	f7ff ffc9 	bl	800780c <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800787a:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800787e:	2110      	movs	r1, #16
 8007880:	4620      	mov	r0, r4
 8007882:	f7ff ffa1 	bl	80077c8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007886:	4620      	mov	r0, r4
 8007888:	f7ff ffb0 	bl	80077ec <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 800788c:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800788e:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 8007890:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8007892:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 8007894:	61f5      	str	r5, [r6, #28]
 8007896:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800789a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800789e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80078a2:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078a6:	4543      	cmp	r3, r8
 80078a8:	d12f      	bne.n	800790a <USB_DevInit+0xee>
 80078aa:	2100      	movs	r1, #0
 80078ac:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078b0:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078b2:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078b6:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078ba:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078be:	428b      	cmp	r3, r1
 80078c0:	d134      	bne.n	800792c <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078c2:	6933      	ldr	r3, [r6, #16]
 80078c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c8:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078ce:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80078d2:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078d4:	69a3      	ldr	r3, [r4, #24]
 80078d6:	f043 0310 	orr.w	r3, r3, #16
 80078da:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078dc:	69a2      	ldr	r2, [r4, #24]
 80078de:	4b1c      	ldr	r3, [pc, #112]	; (8007950 <USB_DevInit+0x134>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80078e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078e6:	b11b      	cbz	r3, 80078f0 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078e8:	69a3      	ldr	r3, [r4, #24]
 80078ea:	f043 0308 	orr.w	r3, r3, #8
 80078ee:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80078f0:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078f2:	bf01      	itttt	eq
 80078f4:	69a3      	ldreq	r3, [r4, #24]
 80078f6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80078fa:	f043 0304 	orreq.w	r3, r3, #4
 80078fe:	61a3      	streq	r3, [r4, #24]
}
 8007900:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007904:	2000      	movs	r0, #0
 8007906:	b004      	add	sp, #16
 8007908:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800790a:	f8d2 c000 	ldr.w	ip, [r2]
 800790e:	f1bc 0f00 	cmp.w	ip, #0
 8007912:	da09      	bge.n	8007928 <USB_DevInit+0x10c>
      if (i == 0U)
 8007914:	b933      	cbnz	r3, 8007924 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007916:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007918:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800791a:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800791c:	f8c2 e008 	str.w	lr, [r2, #8]
 8007920:	3220      	adds	r2, #32
 8007922:	e7c0      	b.n	80078a6 <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007924:	6010      	str	r0, [r2, #0]
 8007926:	e7f7      	b.n	8007918 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8007928:	6011      	str	r1, [r2, #0]
 800792a:	e7f5      	b.n	8007918 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800792c:	f8d2 8000 	ldr.w	r8, [r2]
 8007930:	f1b8 0f00 	cmp.w	r8, #0
 8007934:	da0a      	bge.n	800794c <USB_DevInit+0x130>
      if (i == 0U)
 8007936:	b939      	cbnz	r1, 8007948 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007938:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800793c:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800793e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007940:	f8c2 c008 	str.w	ip, [r2, #8]
 8007944:	3220      	adds	r2, #32
 8007946:	e7ba      	b.n	80078be <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007948:	6015      	str	r5, [r2, #0]
 800794a:	e7f7      	b.n	800793c <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800794c:	6010      	str	r0, [r2, #0]
 800794e:	e7f5      	b.n	800793c <USB_DevInit+0x120>
 8007950:	803c3800 	.word	0x803c3800

08007954 <USB_ActivateEndpoint>:
{
 8007954:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8007956:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007958:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 800795a:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 800795e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8007962:	2a01      	cmp	r2, #1
 8007964:	f004 050f 	and.w	r5, r4, #15
 8007968:	d11b      	bne.n	80079a2 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 800796a:	40aa      	lsls	r2, r5
 800796c:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800796e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007972:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007974:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007978:	041a      	lsls	r2, r3, #16
 800797a:	d410      	bmi.n	800799e <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800797c:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800797e:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007980:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007984:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800798c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007990:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007994:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8007998:	4313      	orrs	r3, r2
 800799a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800799e:	2000      	movs	r0, #0
 80079a0:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 80079a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80079a6:	40aa      	lsls	r2, r5
 80079a8:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80079aa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 80079ae:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80079b0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80079b4:	041b      	lsls	r3, r3, #16
 80079b6:	d4f2      	bmi.n	800799e <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079b8:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 80079ba:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079bc:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80079c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079cc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80079d0:	4313      	orrs	r3, r2
 80079d2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80079d6:	e7e2      	b.n	800799e <USB_ActivateEndpoint+0x4a>

080079d8 <USB_DeactivateEndpoint>:
{
 80079d8:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 80079da:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80079dc:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80079de:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 80079e2:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	f004 050f 	and.w	r5, r4, #15
 80079ec:	d110      	bne.n	8007a10 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80079ee:	40ab      	lsls	r3, r5
 80079f0:	43db      	mvns	r3, r3
 80079f2:	4019      	ands	r1, r3
 80079f4:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80079f6:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80079f8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80079fc:	400b      	ands	r3, r1
 80079fe:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007a00:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007a04:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <USB_DeactivateEndpoint+0x5c>)
 8007a06:	4013      	ands	r3, r2
 8007a08:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007a10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a14:	40ab      	lsls	r3, r5
 8007a16:	43db      	mvns	r3, r3
 8007a18:	4019      	ands	r1, r3
 8007a1a:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007a1c:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007a1e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007a22:	400b      	ands	r3, r1
 8007a24:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007a26:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007a2a:	4b03      	ldr	r3, [pc, #12]	; (8007a38 <USB_DeactivateEndpoint+0x60>)
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007a32:	e7eb      	b.n	8007a0c <USB_DeactivateEndpoint+0x34>
 8007a34:	ec337800 	.word	0xec337800
 8007a38:	eff37800 	.word	0xeff37800

08007a3c <USB_EP0StartXfer>:
{
 8007a3c:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8007a3e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007a40:	780a      	ldrb	r2, [r1, #0]
 8007a42:	694d      	ldr	r5, [r1, #20]
 8007a44:	4e35      	ldr	r6, [pc, #212]	; (8007b1c <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	f04f 0320 	mov.w	r3, #32
 8007a4c:	d145      	bne.n	8007ada <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a4e:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 8007a52:	bb45      	cbnz	r5, 8007aa6 <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a54:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007a58:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007a5c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007a60:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a64:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007a68:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007a6c:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a70:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007a74:	4026      	ands	r6, r4
 8007a76:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    if (ep->xfer_len > 0U)
 8007a7a:	694b      	ldr	r3, [r1, #20]
 8007a7c:	b14b      	cbz	r3, 8007a92 <USB_EP0StartXfer+0x56>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007a7e:	780b      	ldrb	r3, [r1, #0]
 8007a80:	f8d0 5834 	ldr.w	r5, [r0, #2100]	; 0x834
 8007a84:	f003 010f 	and.w	r1, r3, #15
 8007a88:	2301      	movs	r3, #1
 8007a8a:	408b      	lsls	r3, r1
 8007a8c:	432b      	orrs	r3, r5
 8007a8e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a92:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8007a96:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8007a9a:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8007a9e:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aaa:	691c      	ldr	r4, [r3, #16]
 8007aac:	4026      	ands	r6, r4
 8007aae:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ab0:	691c      	ldr	r4, [r3, #16]
 8007ab2:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007ab6:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007aba:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8007abc:	688c      	ldr	r4, [r1, #8]
 8007abe:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8007ac0:	bf88      	it	hi
 8007ac2:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ac4:	691c      	ldr	r4, [r3, #16]
 8007ac6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007aca:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007acc:	694c      	ldr	r4, [r1, #20]
 8007ace:	691d      	ldr	r5, [r3, #16]
 8007ad0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007ad4:	432c      	orrs	r4, r5
 8007ad6:	611c      	str	r4, [r3, #16]
 8007ad8:	e7cf      	b.n	8007a7a <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ada:	fb13 0002 	smlabb	r0, r3, r2, r0
 8007ade:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007ae2:	691a      	ldr	r2, [r3, #16]
 8007ae4:	4032      	ands	r2, r6
 8007ae6:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ae8:	691a      	ldr	r2, [r3, #16]
 8007aea:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007aee:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007af2:	611a      	str	r2, [r3, #16]
 8007af4:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 8007af6:	b105      	cbz	r5, 8007afa <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8007af8:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007afa:	6919      	ldr	r1, [r3, #16]
 8007afc:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8007b00:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007b02:	6919      	ldr	r1, [r3, #16]
 8007b04:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007b08:	430a      	orrs	r2, r1
 8007b0a:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b0c:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007b10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b14:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007b18:	e7c3      	b.n	8007aa2 <USB_EP0StartXfer+0x66>
 8007b1a:	bf00      	nop
 8007b1c:	fff80000 	.word	0xfff80000

08007b20 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8007b20:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007b22:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8007b26:	f023 0303 	bic.w	r3, r3, #3
 8007b2a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b2e:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 8007b30:	4299      	cmp	r1, r3
 8007b32:	d101      	bne.n	8007b38 <USB_WritePacket+0x18>
}
 8007b34:	2000      	movs	r0, #0
 8007b36:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007b38:	f851 0b04 	ldr.w	r0, [r1], #4
 8007b3c:	6010      	str	r0, [r2, #0]
 8007b3e:	e7f7      	b.n	8007b30 <USB_WritePacket+0x10>

08007b40 <USB_EPStartXfer>:
{
 8007b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8007b42:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007b44:	780d      	ldrb	r5, [r1, #0]
 8007b46:	4e5f      	ldr	r6, [pc, #380]	; (8007cc4 <USB_EPStartXfer+0x184>)
  if (ep->is_in == 1U)
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	f04f 0220 	mov.w	r2, #32
 8007b4e:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b50:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 8007b54:	d169      	bne.n	8007c2a <USB_EPStartXfer+0xea>
    if (ep->xfer_len == 0U)
 8007b56:	bb83      	cbnz	r3, 8007bba <USB_EPStartXfer+0x7a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b58:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 8007b5c:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 8007b60:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007b64:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007b68:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b6a:	6922      	ldr	r2, [r4, #16]
 8007b6c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007b70:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b72:	6922      	ldr	r2, [r4, #16]
 8007b74:	4016      	ands	r6, r2
 8007b76:	6126      	str	r6, [r4, #16]
    if (ep->type != EP_TYPE_ISOC)
 8007b78:	78ce      	ldrb	r6, [r1, #3]
 8007b7a:	2e01      	cmp	r6, #1
 8007b7c:	f000 8094 	beq.w	8007ca8 <USB_EPStartXfer+0x168>
      if (ep->xfer_len > 0U)
 8007b80:	b153      	cbz	r3, 8007b98 <USB_EPStartXfer+0x58>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007b82:	780a      	ldrb	r2, [r1, #0]
 8007b84:	f8d0 e834 	ldr.w	lr, [r0, #2100]	; 0x834
 8007b88:	f002 040f 	and.w	r4, r2, #15
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	40a2      	lsls	r2, r4
 8007b90:	ea42 020e 	orr.w	r2, r2, lr
 8007b94:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b98:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    if (ep->type == EP_TYPE_ISOC)
 8007b9c:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b9e:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007ba2:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8007ba6:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8007baa:	d104      	bne.n	8007bb6 <USB_EPStartXfer+0x76>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007bac:	780a      	ldrb	r2, [r1, #0]
 8007bae:	68c9      	ldr	r1, [r1, #12]
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	f7ff ffb5 	bl	8007b20 <USB_WritePacket>
}
 8007bb6:	2000      	movs	r0, #0
 8007bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bba:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007bbe:	4034      	ands	r4, r6
 8007bc0:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bc4:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007bc8:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bca:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007bce:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007bd2:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007bd6:	199c      	adds	r4, r3, r6
 8007bd8:	3c01      	subs	r4, #1
 8007bda:	fbb4 f6f6 	udiv	r6, r4, r6
 8007bde:	4c3a      	ldr	r4, [pc, #232]	; (8007cc8 <USB_EPStartXfer+0x188>)
 8007be0:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 8007be4:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 8007be8:	433c      	orrs	r4, r7
 8007bea:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007bee:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 8007bf2:	f3c3 0412 	ubfx	r4, r3, #0, #19
 8007bf6:	4334      	orrs	r4, r6
 8007bf8:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8007bfc:	78cc      	ldrb	r4, [r1, #3]
 8007bfe:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8007c04:	d1b8      	bne.n	8007b78 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c06:	6914      	ldr	r4, [r2, #16]
 8007c08:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8007c0c:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007c0e:	6914      	ldr	r4, [r2, #16]
 8007c10:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8007c14:	6114      	str	r4, [r2, #16]
 8007c16:	e7af      	b.n	8007b78 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c18:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007c1c:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007c20:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c24:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
 8007c28:	e7b6      	b.n	8007b98 <USB_EPStartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c2a:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8007c2e:	692c      	ldr	r4, [r5, #16]
 8007c30:	4034      	ands	r4, r6
 8007c32:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c34:	692c      	ldr	r4, [r5, #16]
 8007c36:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007c3a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007c3e:	612c      	str	r4, [r5, #16]
 8007c40:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8007c42:	b9fb      	cbnz	r3, 8007c84 <USB_EPStartXfer+0x144>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c44:	692b      	ldr	r3, [r5, #16]
 8007c46:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007c4a:	431c      	orrs	r4, r3
 8007c4c:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c4e:	692b      	ldr	r3, [r5, #16]
 8007c50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c54:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 8007c56:	78cb      	ldrb	r3, [r1, #3]
 8007c58:	2b01      	cmp	r3, #1
 8007c5a:	d10c      	bne.n	8007c76 <USB_EPStartXfer+0x136>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c5c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8007c60:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c64:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007c68:	bf0c      	ite	eq
 8007c6a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c6e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8007c72:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c76:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007c7a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c7e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  return HAL_OK;
 8007c82:	e798      	b.n	8007bb6 <USB_EPStartXfer+0x76>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c84:	4e10      	ldr	r6, [pc, #64]	; (8007cc8 <USB_EPStartXfer+0x188>)
 8007c86:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c88:	4423      	add	r3, r4
 8007c8a:	3b01      	subs	r3, #1
 8007c8c:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c90:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8007c94:	433e      	orrs	r6, r7
 8007c96:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	692e      	ldr	r6, [r5, #16]
 8007c9c:	435c      	muls	r4, r3
 8007c9e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007ca2:	4334      	orrs	r4, r6
 8007ca4:	612c      	str	r4, [r5, #16]
 8007ca6:	e7d6      	b.n	8007c56 <USB_EPStartXfer+0x116>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007ca8:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8007cac:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007cb0:	f04f 0220 	mov.w	r2, #32
 8007cb4:	d0b0      	beq.n	8007c18 <USB_EPStartXfer+0xd8>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007cb6:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007cba:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007cbe:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8007cc2:	e7af      	b.n	8007c24 <USB_EPStartXfer+0xe4>
 8007cc4:	fff80000 	.word	0xfff80000
 8007cc8:	1ff80000 	.word	0x1ff80000

08007ccc <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007ccc:	3203      	adds	r2, #3
 8007cce:	f022 0203 	bic.w	r2, r2, #3
 8007cd2:	440a      	add	r2, r1
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007cd4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8007cd8:	4291      	cmp	r1, r2
 8007cda:	d101      	bne.n	8007ce0 <USB_ReadPacket+0x14>
}
 8007cdc:	4608      	mov	r0, r1
 8007cde:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007ce0:	6803      	ldr	r3, [r0, #0]
 8007ce2:	f841 3b04 	str.w	r3, [r1], #4
 8007ce6:	e7f7      	b.n	8007cd8 <USB_ReadPacket+0xc>

08007ce8 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8007ce8:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007cea:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cf2:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007cf6:	d112      	bne.n	8007d1e <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007cf8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	db06      	blt.n	8007d0e <USB_EPSetStall+0x26>
 8007d00:	b12a      	cbz	r2, 8007d0e <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d02:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007d06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d0a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d0e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d16:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d1e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	db06      	blt.n	8007d34 <USB_EPSetStall+0x4c>
 8007d26:	b12a      	cbz	r2, 8007d34 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d28:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d30:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d34:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d3c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007d40:	e7eb      	b.n	8007d1a <USB_EPSetStall+0x32>

08007d42 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8007d42:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007d44:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d4c:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007d50:	d111      	bne.n	8007d76 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d52:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007d56:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d5a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d5e:	78cb      	ldrb	r3, [r1, #3]
 8007d60:	3b02      	subs	r3, #2
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d805      	bhi.n	8007d72 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d66:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d6e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007d72:	2000      	movs	r0, #0
 8007d74:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d76:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d7e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d82:	78cb      	ldrb	r3, [r1, #3]
 8007d84:	3b02      	subs	r3, #2
 8007d86:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d88:	bf9e      	ittt	ls
 8007d8a:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8007d8e:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8007d92:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8007d96:	e7ec      	b.n	8007d72 <USB_EPClearStall+0x30>

08007d98 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d98:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007d9c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007da0:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007da4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007da8:	0109      	lsls	r1, r1, #4
 8007daa:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8007dae:	4319      	orrs	r1, r3
 8007db0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8007db4:	2000      	movs	r0, #0
 8007db6:	4770      	bx	lr

08007db8 <USB_DevConnect>:
{
 8007db8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007dba:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007dbe:	f023 0302 	bic.w	r3, r3, #2
 8007dc2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8007dc6:	2003      	movs	r0, #3
 8007dc8:	f7f9 f930 	bl	800102c <HAL_Delay>
}
 8007dcc:	2000      	movs	r0, #0
 8007dce:	bd08      	pop	{r3, pc}

08007dd0 <USB_DevDisconnect>:
{
 8007dd0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dd2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007dd6:	f043 0302 	orr.w	r3, r3, #2
 8007dda:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8007dde:	2003      	movs	r0, #3
 8007de0:	f7f9 f924 	bl	800102c <HAL_Delay>
}
 8007de4:	2000      	movs	r0, #0
 8007de6:	bd08      	pop	{r3, pc}

08007de8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8007de8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007dea:	6980      	ldr	r0, [r0, #24]
}
 8007dec:	4010      	ands	r0, r2
 8007dee:	4770      	bx	lr

08007df0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007df0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007df4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007df8:	69c0      	ldr	r0, [r0, #28]
 8007dfa:	4018      	ands	r0, r3
}
 8007dfc:	0c00      	lsrs	r0, r0, #16
 8007dfe:	4770      	bx	lr

08007e00 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007e00:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007e04:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e08:	69c0      	ldr	r0, [r0, #28]
 8007e0a:	4018      	ands	r0, r3
}
 8007e0c:	b280      	uxth	r0, r0
 8007e0e:	4770      	bx	lr

08007e10 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e10:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e14:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e18:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e1c:	6940      	ldr	r0, [r0, #20]
}
 8007e1e:	4010      	ands	r0, r2
 8007e20:	4770      	bx	lr

08007e22 <USB_ReadDevInEPInterrupt>:
{
 8007e22:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8007e24:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e28:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e2c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007e30:	f001 010f 	and.w	r1, r1, #15
 8007e34:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e36:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007e3a:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e3c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	4323      	orrs	r3, r4
}
 8007e42:	4018      	ands	r0, r3
 8007e44:	bd10      	pop	{r4, pc}

08007e46 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8007e46:	6940      	ldr	r0, [r0, #20]
}
 8007e48:	f000 0001 	and.w	r0, r0, #1
 8007e4c:	4770      	bx	lr

08007e4e <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e4e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007e52:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e56:	f023 0307 	bic.w	r3, r3, #7
 8007e5a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007e5e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8007e62:	689a      	ldr	r2, [r3, #8]
 8007e64:	f002 0206 	and.w	r2, r2, #6
 8007e68:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007e6a:	bf02      	ittt	eq
 8007e6c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8007e70:	f042 0203 	orreq.w	r2, r2, #3
 8007e74:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e78:	685a      	ldr	r2, [r3, #4]
 8007e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e7e:	605a      	str	r2, [r3, #4]
}
 8007e80:	2000      	movs	r0, #0
 8007e82:	4770      	bx	lr

08007e84 <USB_EP0_OutStart>:
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e84:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007e88:	2000      	movs	r0, #0
 8007e8a:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e8c:	691a      	ldr	r2, [r3, #16]
 8007e8e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007e92:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e94:	691a      	ldr	r2, [r3, #16]
 8007e96:	f042 0218 	orr.w	r2, r2, #24
 8007e9a:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e9c:	691a      	ldr	r2, [r3, #16]
 8007e9e:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8007ea2:	611a      	str	r2, [r3, #16]
}
 8007ea4:	4770      	bx	lr
	...

08007ea8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8007ea8:	2329      	movs	r3, #41	; 0x29
 8007eaa:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8007eac:	4800      	ldr	r0, [pc, #0]	; (8007eb0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 8007eae:	4770      	bx	lr
 8007eb0:	2000005c 	.word	0x2000005c

08007eb4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8007eb4:	2329      	movs	r3, #41	; 0x29
 8007eb6:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8007eb8:	4800      	ldr	r0, [pc, #0]	; (8007ebc <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 8007eba:	4770      	bx	lr
 8007ebc:	20000088 	.word	0x20000088

08007ec0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007ec0:	2329      	movs	r3, #41	; 0x29
 8007ec2:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 8007ec4:	4800      	ldr	r0, [pc, #0]	; (8007ec8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 8007ec6:	4770      	bx	lr
 8007ec8:	200000cc 	.word	0x200000cc

08007ecc <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007ecc:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	7718      	strb	r0, [r3, #28]

  return USBD_OK;
}
 8007ed4:	4770      	bx	lr

08007ed6 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ed6:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007ed8:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if (hhid->IsReportAvailable == 1U)
 8007edc:	69a3      	ldr	r3, [r4, #24]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d107      	bne.n	8007ef2 <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007ee2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007ee6:	7861      	ldrb	r1, [r4, #1]
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	7820      	ldrb	r0, [r4, #0]
 8007eec:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	61a3      	str	r3, [r4, #24]
  }

  return USBD_OK;
}
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	bd10      	pop	{r4, pc}
	...

08007ef8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007ef8:	230a      	movs	r3, #10
 8007efa:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8007efc:	4800      	ldr	r0, [pc, #0]	; (8007f00 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8007efe:	4770      	bx	lr
 8007f00:	200000c0 	.word	0x200000c0

08007f04 <USBD_CUSTOM_HID_DataOut>:
{
 8007f04:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007f06:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007f0a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007f0e:	7869      	ldrb	r1, [r5, #1]
 8007f10:	68db      	ldr	r3, [r3, #12]
{
 8007f12:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007f14:	7828      	ldrb	r0, [r5, #0]
 8007f16:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8007f18:	230c      	movs	r3, #12
 8007f1a:	462a      	mov	r2, r5
 8007f1c:	2101      	movs	r1, #1
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f019 fe1c 	bl	8021b5c <USBD_LL_PrepareReceive>
}
 8007f24:	2000      	movs	r0, #0
 8007f26:	bd38      	pop	{r3, r4, r5, pc}

08007f28 <USBD_CUSTOM_HID_Setup>:
{
 8007f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t status_info = 0U;
 8007f2a:	2500      	movs	r5, #0
 8007f2c:	f8ad 5006 	strh.w	r5, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f30:	780d      	ldrb	r5, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007f32:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f36:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	460a      	mov	r2, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f3e:	d028      	beq.n	8007f92 <USBD_CUSTOM_HID_Setup+0x6a>
 8007f40:	2d20      	cmp	r5, #32
 8007f42:	d161      	bne.n	8008008 <USBD_CUSTOM_HID_Setup+0xe0>
    switch (req->bRequest)
 8007f44:	7849      	ldrb	r1, [r1, #1]
 8007f46:	3902      	subs	r1, #2
 8007f48:	2909      	cmp	r1, #9
 8007f4a:	d85b      	bhi.n	8008004 <USBD_CUSTOM_HID_Setup+0xdc>
 8007f4c:	e8df f001 	tbb	[pc, r1]
 8007f50:	5a5a0a15 	.word	0x5a5a0a15
 8007f54:	195a5a5a 	.word	0x195a5a5a
 8007f58:	0511      	.short	0x0511
      hhid->Protocol = (uint8_t)(req->wValue);
 8007f5a:	7893      	ldrb	r3, [r2, #2]
 8007f5c:	60e3      	str	r3, [r4, #12]
  uint8_t ret = USBD_OK;
 8007f5e:	2000      	movs	r0, #0
}
 8007f60:	b003      	add	sp, #12
 8007f62:	bd30      	pop	{r4, r5, pc}
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007f64:	2201      	movs	r2, #1
 8007f66:	f104 010c 	add.w	r1, r4, #12
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fc18 	bl	80087a0 <USBD_CtlSendData>
 8007f70:	e7f5      	b.n	8007f5e <USBD_CUSTOM_HID_Setup+0x36>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007f72:	8853      	ldrh	r3, [r2, #2]
 8007f74:	0a1b      	lsrs	r3, r3, #8
 8007f76:	6123      	str	r3, [r4, #16]
 8007f78:	e7f1      	b.n	8007f5e <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f104 0110 	add.w	r1, r4, #16
 8007f80:	e7f3      	b.n	8007f6a <USBD_CUSTOM_HID_Setup+0x42>
      hhid->IsReportAvailable = 1U;
 8007f82:	2101      	movs	r1, #1
 8007f84:	61a1      	str	r1, [r4, #24]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 8007f86:	88d2      	ldrh	r2, [r2, #6]
 8007f88:	4621      	mov	r1, r4
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fc1d 	bl	80087ca <USBD_CtlPrepareRx>
 8007f90:	e7e5      	b.n	8007f5e <USBD_CUSTOM_HID_Setup+0x36>
    switch (req->bRequest)
 8007f92:	7849      	ldrb	r1, [r1, #1]
 8007f94:	290b      	cmp	r1, #11
 8007f96:	d835      	bhi.n	8008004 <USBD_CUSTOM_HID_Setup+0xdc>
 8007f98:	e8df f001 	tbb	[pc, r1]
 8007f9c:	34343406 	.word	0x34343406
 8007fa0:	340e3434 	.word	0x340e3434
 8007fa4:	2d253434 	.word	0x2d253434
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fa8:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007fac:	2903      	cmp	r1, #3
 8007fae:	d129      	bne.n	8008004 <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007fb0:	2202      	movs	r2, #2
 8007fb2:	f10d 0106 	add.w	r1, sp, #6
 8007fb6:	e7d8      	b.n	8007f6a <USBD_CUSTOM_HID_Setup+0x42>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8007fb8:	8851      	ldrh	r1, [r2, #2]
 8007fba:	0a09      	lsrs	r1, r1, #8
 8007fbc:	2922      	cmp	r1, #34	; 0x22
 8007fbe:	d107      	bne.n	8007fd0 <USBD_CUSTOM_HID_Setup+0xa8>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8007fc0:	88d2      	ldrh	r2, [r2, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007fc2:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8007fc6:	2a21      	cmp	r2, #33	; 0x21
 8007fc8:	bf28      	it	cs
 8007fca:	2221      	movcs	r2, #33	; 0x21
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007fcc:	6809      	ldr	r1, [r1, #0]
 8007fce:	e7cc      	b.n	8007f6a <USBD_CUSTOM_HID_Setup+0x42>
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007fd0:	2921      	cmp	r1, #33	; 0x21
 8007fd2:	d105      	bne.n	8007fe0 <USBD_CUSTOM_HID_Setup+0xb8>
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8007fd4:	88d2      	ldrh	r2, [r2, #6]
          pbuf = USBD_CUSTOM_HID_Desc;
 8007fd6:	490e      	ldr	r1, [pc, #56]	; (8008010 <USBD_CUSTOM_HID_Setup+0xe8>)
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8007fd8:	2a09      	cmp	r2, #9
 8007fda:	bf28      	it	cs
 8007fdc:	2209      	movcs	r2, #9
 8007fde:	e7c4      	b.n	8007f6a <USBD_CUSTOM_HID_Setup+0x42>
  uint8_t  *pbuf = NULL;
 8007fe0:	2100      	movs	r1, #0
  uint16_t len = 0U;
 8007fe2:	460a      	mov	r2, r1
 8007fe4:	e7c1      	b.n	8007f6a <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe6:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007fea:	2903      	cmp	r1, #3
 8007fec:	d10a      	bne.n	8008004 <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f104 0114 	add.w	r1, r4, #20
 8007ff4:	e7b9      	b.n	8007f6a <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff6:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007ffa:	2903      	cmp	r1, #3
 8007ffc:	d102      	bne.n	8008004 <USBD_CUSTOM_HID_Setup+0xdc>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8007ffe:	7893      	ldrb	r3, [r2, #2]
 8008000:	6163      	str	r3, [r4, #20]
 8008002:	e7ac      	b.n	8007f5e <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8008004:	4611      	mov	r1, r2
 8008006:	4618      	mov	r0, r3
    USBD_CtlError (pdev, req);
 8008008:	f000 fba3 	bl	8008752 <USBD_CtlError>
    ret = USBD_FAIL;
 800800c:	2002      	movs	r0, #2
    break;
 800800e:	e7a7      	b.n	8007f60 <USBD_CUSTOM_HID_Setup+0x38>
 8008010:	200000b4 	.word	0x200000b4

08008014 <USBD_CUSTOM_HID_DeInit>:
{
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008018:	2181      	movs	r1, #129	; 0x81
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800801a:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800801c:	f019 fd44 	bl	8021aa8 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008020:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008022:	2101      	movs	r1, #1
 8008024:	4620      	mov	r0, r4
 8008026:	f019 fd3f 	bl	8021aa8 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800802a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800802e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  if(pdev->pClassData != NULL)
 8008032:	b14b      	cbz	r3, 8008048 <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008034:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800803c:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8008040:	f019 fdd0 	bl	8021be4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008044:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8008048:	2000      	movs	r0, #0
 800804a:	bd38      	pop	{r3, r4, r5, pc}

0800804c <USBD_CUSTOM_HID_Init>:
{
 800804c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804e:	4605      	mov	r5, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008050:	2401      	movs	r4, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008052:	2340      	movs	r3, #64	; 0x40
 8008054:	2203      	movs	r2, #3
 8008056:	2181      	movs	r1, #129	; 0x81
 8008058:	f019 fd16 	bl	8021a88 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800805c:	230c      	movs	r3, #12
 800805e:	2203      	movs	r2, #3
 8008060:	4621      	mov	r1, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008062:	62ec      	str	r4, [r5, #44]	; 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008064:	4628      	mov	r0, r5
 8008066:	f019 fd0f 	bl	8021a88 <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800806a:	f8c5 4158 	str.w	r4, [r5, #344]	; 0x158
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 800806e:	2020      	movs	r0, #32
 8008070:	f019 fdb4 	bl	8021bdc <USBD_static_malloc>
 8008074:	4606      	mov	r6, r0
 8008076:	f8c5 0290 	str.w	r0, [r5, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800807a:	b168      	cbz	r0, 8008098 <USBD_CUSTOM_HID_Init+0x4c>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800807c:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
    hhid->state = CUSTOM_HID_IDLE;
 8008080:	2700      	movs	r7, #0
 8008082:	7707      	strb	r7, [r0, #28]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008088:	230c      	movs	r3, #12
 800808a:	4632      	mov	r2, r6
 800808c:	4621      	mov	r1, r4
 800808e:	4628      	mov	r0, r5
 8008090:	f019 fd64 	bl	8021b5c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008094:	4638      	mov	r0, r7
 8008096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1U;
 8008098:	4620      	mov	r0, r4
}
 800809a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800809c <USBD_CUSTOM_HID_SendReport>:
{
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 80080a0:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80080a4:	2a03      	cmp	r2, #3
 80080a6:	d109      	bne.n	80080bc <USBD_CUSTOM_HID_SendReport+0x20>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 80080a8:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    if(hhid->state == CUSTOM_HID_IDLE)
 80080ac:	7f35      	ldrb	r5, [r6, #28]
 80080ae:	2401      	movs	r4, #1
 80080b0:	b935      	cbnz	r5, 80080c0 <USBD_CUSTOM_HID_SendReport+0x24>
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80080b2:	460a      	mov	r2, r1
      hhid->state = CUSTOM_HID_BUSY;
 80080b4:	7734      	strb	r4, [r6, #28]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80080b6:	2181      	movs	r1, #129	; 0x81
 80080b8:	f019 fd42 	bl	8021b40 <USBD_LL_Transmit>
  return USBD_OK;
 80080bc:	2000      	movs	r0, #0
 80080be:	bd70      	pop	{r4, r5, r6, pc}
      return USBD_BUSY;
 80080c0:	4620      	mov	r0, r4
}
 80080c2:	bd70      	pop	{r4, r5, r6, pc}

080080c4 <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 80080c4:	b119      	cbz	r1, 80080ce <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80080c6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 80080ca:	2000      	movs	r0, #0
 80080cc:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80080ce:	2002      	movs	r0, #2
  }

  return ret;
}
 80080d0:	4770      	bx	lr

080080d2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080d2:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80080d4:	b180      	cbz	r0, 80080f8 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80080d6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80080da:	b113      	cbz	r3, 80080e2 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80080dc:	2300      	movs	r3, #0
 80080de:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80080e2:	b109      	cbz	r1, 80080e8 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80080e4:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80080e8:	2301      	movs	r3, #1
 80080ea:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 80080ee:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80080f0:	f019 fc88 	bl	8021a04 <USBD_LL_Init>

  return USBD_OK;
 80080f4:	2000      	movs	r0, #0
 80080f6:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80080f8:	2002      	movs	r0, #2
}
 80080fa:	bd08      	pop	{r3, pc}

080080fc <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80080fc:	b119      	cbz	r1, 8008106 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80080fe:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8008102:	2000      	movs	r0, #0
 8008104:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008106:	2002      	movs	r0, #2
  }

  return status;
}
 8008108:	4770      	bx	lr

0800810a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800810a:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800810c:	f019 fcae 	bl	8021a6c <USBD_LL_Start>

  return USBD_OK;
}
 8008110:	2000      	movs	r0, #0
 8008112:	bd08      	pop	{r3, pc}

08008114 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008114:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8008116:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800811a:	b90b      	cbnz	r3, 8008120 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800811c:	2002      	movs	r0, #2
 800811e:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4798      	blx	r3
 8008124:	2800      	cmp	r0, #0
 8008126:	d1f9      	bne.n	800811c <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8008128:	bd08      	pop	{r3, pc}

0800812a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800812a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800812c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	4798      	blx	r3
  return USBD_OK;
}
 8008134:	2000      	movs	r0, #0
 8008136:	bd08      	pop	{r3, pc}

08008138 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008138:	b538      	push	{r3, r4, r5, lr}
 800813a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800813c:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8008140:	4628      	mov	r0, r5
 8008142:	f000 faf2 	bl	800872a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008146:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8008148:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 800814c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8008150:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8008154:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8008158:	f001 031f 	and.w	r3, r1, #31
 800815c:	2b01      	cmp	r3, #1
 800815e:	d00e      	beq.n	800817e <USBD_LL_SetupStage+0x46>
 8008160:	d307      	bcc.n	8008172 <USBD_LL_SetupStage+0x3a>
 8008162:	2b02      	cmp	r3, #2
 8008164:	d010      	beq.n	8008188 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008166:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800816a:	4620      	mov	r0, r4
 800816c:	f019 fcaa 	bl	8021ac4 <USBD_LL_StallEP>
    break;
 8008170:	e003      	b.n	800817a <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8008172:	4629      	mov	r1, r5
 8008174:	4620      	mov	r0, r4
 8008176:	f000 f901 	bl	800837c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800817a:	2000      	movs	r0, #0
 800817c:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800817e:	4629      	mov	r1, r5
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fa25 	bl	80085d0 <USBD_StdItfReq>
    break;
 8008186:	e7f8      	b.n	800817a <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8008188:	4629      	mov	r1, r5
 800818a:	4620      	mov	r0, r4
 800818c:	f000 fa45 	bl	800861a <USBD_StdEPReq>
    break;
 8008190:	e7f3      	b.n	800817a <USBD_LL_SetupStage+0x42>

08008192 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008192:	b570      	push	{r4, r5, r6, lr}
 8008194:	4605      	mov	r5, r0
 8008196:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008198:	bb39      	cbnz	r1, 80081ea <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800819a:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d11e      	bne.n	80081e0 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 80081a2:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 80081a6:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d90b      	bls.n	80081c6 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80081ae:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 80081b0:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80081b2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80081b6:	bf8c      	ite	hi
 80081b8:	b29a      	uxthhi	r2, r3
 80081ba:	b292      	uxthls	r2, r2
 80081bc:	4631      	mov	r1, r6
 80081be:	f000 fb13 	bl	80087e8 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80081c2:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80081c4:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80081c6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	b123      	cbz	r3, 80081d8 <USBD_LL_DataOutStage+0x46>
 80081ce:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80081d2:	2a03      	cmp	r2, #3
 80081d4:	d100      	bne.n	80081d8 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80081d6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80081d8:	4628      	mov	r0, r5
 80081da:	f000 fb0d 	bl	80087f8 <USBD_CtlSendStatus>
 80081de:	e7f0      	b.n	80081c2 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80081e0:	2b05      	cmp	r3, #5
 80081e2:	d1ee      	bne.n	80081c2 <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 80081e4:	f019 fc6e 	bl	8021ac4 <USBD_LL_StallEP>
 80081e8:	e7eb      	b.n	80081c2 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 80081ea:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	b12b      	cbz	r3, 80081fe <USBD_LL_DataOutStage+0x6c>
 80081f2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80081f6:	2a03      	cmp	r2, #3
 80081f8:	d101      	bne.n	80081fe <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 80081fa:	4798      	blx	r3
 80081fc:	e7e1      	b.n	80081c2 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80081fe:	2002      	movs	r0, #2
}
 8008200:	bd70      	pop	{r4, r5, r6, pc}

08008202 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8008202:	b570      	push	{r4, r5, r6, lr}
 8008204:	4613      	mov	r3, r2
 8008206:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8008208:	460e      	mov	r6, r1
 800820a:	2900      	cmp	r1, #0
 800820c:	d148      	bne.n	80082a0 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800820e:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8008212:	2a02      	cmp	r2, #2
 8008214:	d13d      	bne.n	8008292 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008216:	6a05      	ldr	r5, [r0, #32]
 8008218:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800821a:	4295      	cmp	r5, r2
 800821c:	d914      	bls.n	8008248 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800821e:	1aaa      	subs	r2, r5, r2
 8008220:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008222:	4619      	mov	r1, r3
 8008224:	b292      	uxth	r2, r2
 8008226:	f000 fac8 	bl	80087ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800822a:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800822c:	461a      	mov	r2, r3
 800822e:	4619      	mov	r1, r3
 8008230:	4620      	mov	r0, r4
 8008232:	f019 fc93 	bl	8021b5c <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008236:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800823a:	2b01      	cmp	r3, #1
 800823c:	f04f 0000 	mov.w	r0, #0
 8008240:	d13a      	bne.n	80082b8 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8008242:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8008246:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008248:	69c3      	ldr	r3, [r0, #28]
 800824a:	fbb3 f5f2 	udiv	r5, r3, r2
 800824e:	fb02 3515 	mls	r5, r2, r5, r3
 8008252:	b965      	cbnz	r5, 800826e <USBD_LL_DataInStage+0x6c>
 8008254:	429a      	cmp	r2, r3
 8008256:	d80a      	bhi.n	800826e <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8008258:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800825c:	4293      	cmp	r3, r2
 800825e:	d206      	bcs.n	800826e <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008260:	462a      	mov	r2, r5
 8008262:	f000 faaa 	bl	80087ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008266:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800826a:	462b      	mov	r3, r5
 800826c:	e7de      	b.n	800822c <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800826e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	b12b      	cbz	r3, 8008282 <USBD_LL_DataInStage+0x80>
 8008276:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800827a:	2a03      	cmp	r2, #3
 800827c:	d101      	bne.n	8008282 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 800827e:	4620      	mov	r0, r4
 8008280:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8008282:	2180      	movs	r1, #128	; 0x80
 8008284:	4620      	mov	r0, r4
 8008286:	f019 fc1d 	bl	8021ac4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800828a:	4620      	mov	r0, r4
 800828c:	f000 fabf 	bl	800880e <USBD_CtlReceiveStatus>
 8008290:	e7d1      	b.n	8008236 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008292:	f032 0304 	bics.w	r3, r2, #4
 8008296:	d1ce      	bne.n	8008236 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8008298:	2180      	movs	r1, #128	; 0x80
 800829a:	f019 fc13 	bl	8021ac4 <USBD_LL_StallEP>
 800829e:	e7ca      	b.n	8008236 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80082a0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	b133      	cbz	r3, 80082b6 <USBD_LL_DataInStage+0xb4>
 80082a8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80082ac:	2a03      	cmp	r2, #3
 80082ae:	d102      	bne.n	80082b6 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80082b0:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80082b2:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80082b4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80082b6:	2002      	movs	r0, #2
}
 80082b8:	bd70      	pop	{r4, r5, r6, pc}

080082ba <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80082ba:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082bc:	2200      	movs	r2, #0
{
 80082be:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082c0:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082c2:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082c4:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082c6:	2340      	movs	r3, #64	; 0x40
 80082c8:	f019 fbde 	bl	8021a88 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082cc:	4633      	mov	r3, r6
 80082ce:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082d0:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082d4:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082d8:	2200      	movs	r2, #0
 80082da:	4620      	mov	r0, r4
 80082dc:	f019 fbd4 	bl	8021a88 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80082e0:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082e4:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 80082e6:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082e8:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082ea:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80082ee:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80082f2:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80082f4:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 80082f8:	b123      	cbz	r3, 8008304 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082fa:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80082fe:	4620      	mov	r0, r4
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	4798      	blx	r3
  }

  return USBD_OK;
}
 8008304:	2000      	movs	r0, #0
 8008306:	bd70      	pop	{r4, r5, r6, pc}

08008308 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8008308:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 800830a:	2000      	movs	r0, #0
 800830c:	4770      	bx	lr

0800830e <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800830e:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008312:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008316:	2304      	movs	r3, #4
 8008318:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 800831c:	2000      	movs	r0, #0
 800831e:	4770      	bx	lr

08008320 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8008320:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8008324:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8008328:	2000      	movs	r0, #0
 800832a:	4770      	bx	lr

0800832c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800832c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800832e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008332:	2a03      	cmp	r2, #3
 8008334:	d104      	bne.n	8008340 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8008336:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800833a:	69db      	ldr	r3, [r3, #28]
 800833c:	b103      	cbz	r3, 8008340 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800833e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8008340:	2000      	movs	r0, #0
 8008342:	bd08      	pop	{r3, pc}

08008344 <USBD_LL_IsoINIncomplete>:
 8008344:	2000      	movs	r0, #0
 8008346:	4770      	bx	lr

08008348 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8008348:	2000      	movs	r0, #0
 800834a:	4770      	bx	lr

0800834c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800834c:	2000      	movs	r0, #0
 800834e:	4770      	bx	lr

08008350 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008350:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008352:	2201      	movs	r2, #1
 8008354:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008358:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 800835c:	7901      	ldrb	r1, [r0, #4]
 800835e:	6852      	ldr	r2, [r2, #4]
 8008360:	4790      	blx	r2

  return USBD_OK;
}
 8008362:	2000      	movs	r0, #0
 8008364:	bd08      	pop	{r3, pc}

08008366 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8008366:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8008368:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800836a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800836c:	f019 fbaa 	bl	8021ac4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008370:	4620      	mov	r0, r4
 8008372:	2100      	movs	r1, #0
}
 8008374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8008378:	f019 bba4 	b.w	8021ac4 <USBD_LL_StallEP>

0800837c <USBD_StdDevReq>:
{
 800837c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800837e:	780b      	ldrb	r3, [r1, #0]
 8008380:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008384:	2b20      	cmp	r3, #32
{
 8008386:	4604      	mov	r4, r0
 8008388:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800838a:	d014      	beq.n	80083b6 <USBD_StdDevReq+0x3a>
 800838c:	2b40      	cmp	r3, #64	; 0x40
 800838e:	d012      	beq.n	80083b6 <USBD_StdDevReq+0x3a>
 8008390:	2b00      	cmp	r3, #0
 8008392:	f040 809c 	bne.w	80084ce <USBD_StdDevReq+0x152>
    switch (req->bRequest)
 8008396:	784b      	ldrb	r3, [r1, #1]
 8008398:	2b09      	cmp	r3, #9
 800839a:	f200 8097 	bhi.w	80084cc <USBD_StdDevReq+0x150>
 800839e:	e8df f013 	tbh	[pc, r3, lsl #1]
 80083a2:	00ef      	.short	0x00ef
 80083a4:	00950109 	.word	0x00950109
 80083a8:	00950102 	.word	0x00950102
 80083ac:	00130089 	.word	0x00130089
 80083b0:	00da0095 	.word	0x00da0095
 80083b4:	00a7      	.short	0x00a7
    pdev->pClass->Setup(pdev, req);
 80083b6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80083ba:	4629      	mov	r1, r5
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	4620      	mov	r0, r4
 80083c0:	4798      	blx	r3
}
 80083c2:	2000      	movs	r0, #0
 80083c4:	b003      	add	sp, #12
 80083c6:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 80083c8:	8849      	ldrh	r1, [r1, #2]
 80083ca:	0a0b      	lsrs	r3, r1, #8
 80083cc:	3b01      	subs	r3, #1
 80083ce:	2b0e      	cmp	r3, #14
 80083d0:	d87c      	bhi.n	80084cc <USBD_StdDevReq+0x150>
 80083d2:	e8df f003 	tbb	[pc, r3]
 80083d6:	2824      	.short	0x2824
 80083d8:	5c7b7b35 	.word	0x5c7b7b35
 80083dc:	7b7b7b65 	.word	0x7b7b7b65
 80083e0:	7b7b7b7b 	.word	0x7b7b7b7b
 80083e4:	08          	.byte	0x08
 80083e5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80083e6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80083ea:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083ec:	7c20      	ldrb	r0, [r4, #16]
 80083ee:	f10d 0106 	add.w	r1, sp, #6
 80083f2:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80083f4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80083f8:	b152      	cbz	r2, 8008410 <USBD_StdDevReq+0x94>
 80083fa:	88eb      	ldrh	r3, [r5, #6]
 80083fc:	b143      	cbz	r3, 8008410 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 80083fe:	429a      	cmp	r2, r3
 8008400:	bf28      	it	cs
 8008402:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 8008404:	4601      	mov	r1, r0
 8008406:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 8008408:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 800840c:	f000 f9c8 	bl	80087a0 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8008410:	88eb      	ldrh	r3, [r5, #6]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d1d5      	bne.n	80083c2 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8008416:	4620      	mov	r0, r4
 8008418:	f000 f9ee 	bl	80087f8 <USBD_CtlSendStatus>
 800841c:	e7d1      	b.n	80083c2 <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800841e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	e7e2      	b.n	80083ec <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008426:	7c02      	ldrb	r2, [r0, #16]
 8008428:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800842c:	b932      	cbnz	r2, 800843c <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008430:	f10d 0006 	add.w	r0, sp, #6
 8008434:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008436:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008438:	7043      	strb	r3, [r0, #1]
 800843a:	e7db      	b.n	80083f4 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800843c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843e:	e7f7      	b.n	8008430 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8008440:	b2c9      	uxtb	r1, r1
 8008442:	2905      	cmp	r1, #5
 8008444:	d81c      	bhi.n	8008480 <USBD_StdDevReq+0x104>
 8008446:	e8df f001 	tbb	[pc, r1]
 800844a:	0703      	.short	0x0703
 800844c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008450:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	e7c9      	b.n	80083ec <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008458:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800845c:	689b      	ldr	r3, [r3, #8]
 800845e:	e7c5      	b.n	80083ec <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008460:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	e7c1      	b.n	80083ec <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008468:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	e7bd      	b.n	80083ec <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008470:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	e7b9      	b.n	80083ec <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008478:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800847c:	699b      	ldr	r3, [r3, #24]
 800847e:	e7b5      	b.n	80083ec <USBD_StdDevReq+0x70>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8008480:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008484:	f10d 0206 	add.w	r2, sp, #6
 8008488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848a:	4798      	blx	r3
 800848c:	e7b2      	b.n	80083f4 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800848e:	7c03      	ldrb	r3, [r0, #16]
 8008490:	b9e3      	cbnz	r3, 80084cc <USBD_StdDevReq+0x150>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008492:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008496:	f10d 0006 	add.w	r0, sp, #6
 800849a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849c:	4798      	blx	r3
 800849e:	e7a9      	b.n	80083f4 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80084a0:	7c03      	ldrb	r3, [r0, #16]
 80084a2:	b99b      	cbnz	r3, 80084cc <USBD_StdDevReq+0x150>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80084a4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80084a8:	f10d 0006 	add.w	r0, sp, #6
 80084ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ae:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084b0:	2307      	movs	r3, #7
 80084b2:	e7c1      	b.n	8008438 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084b4:	888b      	ldrh	r3, [r1, #4]
 80084b6:	b94b      	cbnz	r3, 80084cc <USBD_StdDevReq+0x150>
 80084b8:	88cb      	ldrh	r3, [r1, #6]
 80084ba:	b93b      	cbnz	r3, 80084cc <USBD_StdDevReq+0x150>
 80084bc:	884d      	ldrh	r5, [r1, #2]
 80084be:	2d7f      	cmp	r5, #127	; 0x7f
 80084c0:	d804      	bhi.n	80084cc <USBD_StdDevReq+0x150>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80084c6:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084c8:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ca:	d103      	bne.n	80084d4 <USBD_StdDevReq+0x158>
      USBD_CtlError(pdev, req);
 80084cc:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80084ce:	f7ff ff4a 	bl	8008366 <USBD_CtlError.constprop.1>
    break;
 80084d2:	e776      	b.n	80083c2 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 80084d4:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084d8:	f019 fb24 	bl	8021b24 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 f98b 	bl	80087f8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80084e2:	b11d      	cbz	r5, 80084ec <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084e4:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084e6:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80084ea:	e76a      	b.n	80083c2 <USBD_StdDevReq+0x46>
 80084ec:	2301      	movs	r3, #1
 80084ee:	e7fa      	b.n	80084e6 <USBD_StdDevReq+0x16a>
  cfgidx = (uint8_t)(req->wValue);
 80084f0:	7889      	ldrb	r1, [r1, #2]
 80084f2:	4d36      	ldr	r5, [pc, #216]	; (80085cc <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084f4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80084f6:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084f8:	d8e8      	bhi.n	80084cc <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 80084fa:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d008      	beq.n	8008514 <USBD_StdDevReq+0x198>
 8008502:	2b03      	cmp	r3, #3
 8008504:	d015      	beq.n	8008532 <USBD_StdDevReq+0x1b6>
      USBD_CtlError(pdev, req);
 8008506:	f7ff ff2e 	bl	8008366 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 800850a:	7829      	ldrb	r1, [r5, #0]
 800850c:	4620      	mov	r0, r4
 800850e:	f7ff fe0c 	bl	800812a <USBD_ClrClassConfig>
 8008512:	e756      	b.n	80083c2 <USBD_StdDevReq+0x46>
      if (cfgidx)
 8008514:	2900      	cmp	r1, #0
 8008516:	f43f af7e 	beq.w	8008416 <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 800851a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800851c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800851e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008520:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008524:	4620      	mov	r0, r4
 8008526:	f7ff fdf5 	bl	8008114 <USBD_SetClassConfig>
 800852a:	2802      	cmp	r0, #2
 800852c:	f47f af73 	bne.w	8008416 <USBD_StdDevReq+0x9a>
 8008530:	e7cc      	b.n	80084cc <USBD_StdDevReq+0x150>
      if (cfgidx == 0U)
 8008532:	b931      	cbnz	r1, 8008542 <USBD_StdDevReq+0x1c6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008534:	2302      	movs	r3, #2
 8008536:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800853a:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800853c:	f7ff fdf5 	bl	800812a <USBD_ClrClassConfig>
 8008540:	e769      	b.n	8008416 <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8008542:	6841      	ldr	r1, [r0, #4]
 8008544:	2901      	cmp	r1, #1
 8008546:	f43f af66 	beq.w	8008416 <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800854a:	b2c9      	uxtb	r1, r1
 800854c:	f7ff fded 	bl	800812a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008550:	7829      	ldrb	r1, [r5, #0]
 8008552:	6061      	str	r1, [r4, #4]
 8008554:	e7e6      	b.n	8008524 <USBD_StdDevReq+0x1a8>
  if (req->wLength != 1U)
 8008556:	88ca      	ldrh	r2, [r1, #6]
 8008558:	2a01      	cmp	r2, #1
 800855a:	d1b7      	bne.n	80084cc <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 800855c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008560:	2b00      	cmp	r3, #0
 8008562:	d0b3      	beq.n	80084cc <USBD_StdDevReq+0x150>
 8008564:	2b02      	cmp	r3, #2
 8008566:	d903      	bls.n	8008570 <USBD_StdDevReq+0x1f4>
 8008568:	2b03      	cmp	r3, #3
 800856a:	d1af      	bne.n	80084cc <USBD_StdDevReq+0x150>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800856c:	1d01      	adds	r1, r0, #4
 800856e:	e003      	b.n	8008578 <USBD_StdDevReq+0x1fc>
      pdev->dev_default_config = 0U;
 8008570:	4601      	mov	r1, r0
 8008572:	2300      	movs	r3, #0
 8008574:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008578:	4620      	mov	r0, r4
 800857a:	f000 f911 	bl	80087a0 <USBD_CtlSendData>
 800857e:	e720      	b.n	80083c2 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8008580:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008584:	3b01      	subs	r3, #1
 8008586:	2b02      	cmp	r3, #2
 8008588:	d8a0      	bhi.n	80084cc <USBD_StdDevReq+0x150>
    if(req->wLength != 0x2U)
 800858a:	88cb      	ldrh	r3, [r1, #6]
 800858c:	2b02      	cmp	r3, #2
 800858e:	d19d      	bne.n	80084cc <USBD_StdDevReq+0x150>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008590:	2301      	movs	r3, #1
 8008592:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8008594:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8008598:	b10b      	cbz	r3, 800859e <USBD_StdDevReq+0x222>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800859a:	2303      	movs	r3, #3
 800859c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800859e:	2202      	movs	r2, #2
 80085a0:	f104 010c 	add.w	r1, r4, #12
 80085a4:	e7e8      	b.n	8008578 <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085a6:	884b      	ldrh	r3, [r1, #2]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	f47f af0a 	bne.w	80083c2 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 80085ae:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 80085b2:	e730      	b.n	8008416 <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 80085b4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80085b8:	3b01      	subs	r3, #1
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d886      	bhi.n	80084cc <USBD_StdDevReq+0x150>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085be:	884b      	ldrh	r3, [r1, #2]
 80085c0:	2b01      	cmp	r3, #1
 80085c2:	f47f aefe 	bne.w	80083c2 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	e7f1      	b.n	80085ae <USBD_StdDevReq+0x232>
 80085ca:	bf00      	nop
 80085cc:	2000115c 	.word	0x2000115c

080085d0 <USBD_StdItfReq>:
{
 80085d0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085d2:	780b      	ldrb	r3, [r1, #0]
 80085d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085d8:	2b20      	cmp	r3, #32
{
 80085da:	4604      	mov	r4, r0
 80085dc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085de:	d002      	beq.n	80085e6 <USBD_StdItfReq+0x16>
 80085e0:	2b40      	cmp	r3, #64	; 0x40
 80085e2:	d000      	beq.n	80085e6 <USBD_StdItfReq+0x16>
 80085e4:	b9b3      	cbnz	r3, 8008614 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 80085e6:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80085ea:	3b01      	subs	r3, #1
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d810      	bhi.n	8008612 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085f0:	792b      	ldrb	r3, [r5, #4]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d80d      	bhi.n	8008612 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80085f6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80085fa:	4629      	mov	r1, r5
 80085fc:	689b      	ldr	r3, [r3, #8]
 80085fe:	4620      	mov	r0, r4
 8008600:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008602:	88eb      	ldrh	r3, [r5, #6]
 8008604:	b91b      	cbnz	r3, 800860e <USBD_StdItfReq+0x3e>
 8008606:	b910      	cbnz	r0, 800860e <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 8008608:	4620      	mov	r0, r4
 800860a:	f000 f8f5 	bl	80087f8 <USBD_CtlSendStatus>
}
 800860e:	2000      	movs	r0, #0
 8008610:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8008612:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8008614:	f7ff fea7 	bl	8008366 <USBD_CtlError.constprop.1>
    break;
 8008618:	e7f9      	b.n	800860e <USBD_StdItfReq+0x3e>

0800861a <USBD_StdEPReq>:
{
 800861a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800861c:	780a      	ldrb	r2, [r1, #0]
 800861e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8008622:	2a20      	cmp	r2, #32
{
 8008624:	4604      	mov	r4, r0
 8008626:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008628:	d013      	beq.n	8008652 <USBD_StdEPReq+0x38>
 800862a:	2a40      	cmp	r2, #64	; 0x40
 800862c:	d011      	beq.n	8008652 <USBD_StdEPReq+0x38>
 800862e:	b96a      	cbnz	r2, 800864c <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8008630:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8008632:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8008634:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8008636:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8008638:	d01f      	beq.n	800867a <USBD_StdEPReq+0x60>
 800863a:	d335      	bcc.n	80086a8 <USBD_StdEPReq+0x8e>
 800863c:	2d03      	cmp	r5, #3
 800863e:	d105      	bne.n	800864c <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8008640:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008644:	2a02      	cmp	r2, #2
 8008646:	d026      	beq.n	8008696 <USBD_StdEPReq+0x7c>
 8008648:	2a03      	cmp	r2, #3
 800864a:	d00a      	beq.n	8008662 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 800864c:	f7ff fe8b 	bl	8008366 <USBD_CtlError.constprop.1>
    break;
 8008650:	e005      	b.n	800865e <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8008652:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8008656:	4619      	mov	r1, r3
 8008658:	6892      	ldr	r2, [r2, #8]
 800865a:	4620      	mov	r0, r4
 800865c:	4790      	blx	r2
}
 800865e:	2000      	movs	r0, #0
 8008660:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008662:	885a      	ldrh	r2, [r3, #2]
 8008664:	b92a      	cbnz	r2, 8008672 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008666:	064a      	lsls	r2, r1, #25
 8008668:	d003      	beq.n	8008672 <USBD_StdEPReq+0x58>
 800866a:	88db      	ldrh	r3, [r3, #6]
 800866c:	b90b      	cbnz	r3, 8008672 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 800866e:	f019 fa29 	bl	8021ac4 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8008672:	4620      	mov	r0, r4
 8008674:	f000 f8c0 	bl	80087f8 <USBD_CtlSendStatus>
        break;
 8008678:	e7f1      	b.n	800865e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 800867a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800867e:	2a02      	cmp	r2, #2
 8008680:	d009      	beq.n	8008696 <USBD_StdEPReq+0x7c>
 8008682:	2a03      	cmp	r2, #3
 8008684:	d1e2      	bne.n	800864c <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008686:	885b      	ldrh	r3, [r3, #2]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e8      	bne.n	800865e <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 800868c:	064d      	lsls	r5, r1, #25
 800868e:	d0f0      	beq.n	8008672 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008690:	f019 fa26 	bl	8021ae0 <USBD_LL_ClearStallEP>
 8008694:	e7ed      	b.n	8008672 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008696:	064b      	lsls	r3, r1, #25
 8008698:	d017      	beq.n	80086ca <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 800869a:	f019 fa13 	bl	8021ac4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800869e:	2180      	movs	r1, #128	; 0x80
 80086a0:	4620      	mov	r0, r4
 80086a2:	f019 fa0f 	bl	8021ac4 <USBD_LL_StallEP>
 80086a6:	e7da      	b.n	800865e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 80086a8:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80086ac:	2b02      	cmp	r3, #2
 80086ae:	d00e      	beq.n	80086ce <USBD_StdEPReq+0xb4>
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	d1cb      	bne.n	800864c <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 80086b4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80086b8:	f04f 0314 	mov.w	r3, #20
 80086bc:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086c0:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 80086c4:	d012      	beq.n	80086ec <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086c6:	6992      	ldr	r2, [r2, #24]
 80086c8:	b9da      	cbnz	r2, 8008702 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 80086ca:	4620      	mov	r0, r4
 80086cc:	e7be      	b.n	800864c <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086ce:	0649      	lsls	r1, r1, #25
 80086d0:	d1fb      	bne.n	80086ca <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80086d2:	0613      	lsls	r3, r2, #24
 80086d4:	bf4c      	ite	mi
 80086d6:	f100 0114 	addmi.w	r1, r0, #20
 80086da:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 80086de:	2300      	movs	r3, #0
 80086e0:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086e2:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 f85b 	bl	80087a0 <USBD_CtlSendData>
          break;
 80086ea:	e7b8      	b.n	800865e <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086ec:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80086f0:	2a00      	cmp	r2, #0
 80086f2:	d0ea      	beq.n	80086ca <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80086f4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80086f8:	fb03 0505 	mla	r5, r3, r5, r0
 80086fc:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 8008700:	e004      	b.n	800870c <USBD_StdEPReq+0xf2>
 8008702:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 8008706:	fb05 3503 	mla	r5, r5, r3, r3
 800870a:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800870c:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8008710:	d103      	bne.n	800871a <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8008712:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008714:	2202      	movs	r2, #2
 8008716:	4629      	mov	r1, r5
 8008718:	e7e4      	b.n	80086e4 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800871a:	4620      	mov	r0, r4
 800871c:	f019 f9ee 	bl	8021afc <USBD_LL_IsStallEP>
 8008720:	b108      	cbz	r0, 8008726 <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8008722:	2301      	movs	r3, #1
 8008724:	e7f5      	b.n	8008712 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8008726:	6028      	str	r0, [r5, #0]
 8008728:	e7f4      	b.n	8008714 <USBD_StdEPReq+0xfa>

0800872a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800872a:	780b      	ldrb	r3, [r1, #0]
 800872c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800872e:	784b      	ldrb	r3, [r1, #1]
 8008730:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008732:	78ca      	ldrb	r2, [r1, #3]
 8008734:	788b      	ldrb	r3, [r1, #2]
 8008736:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800873a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800873c:	794a      	ldrb	r2, [r1, #5]
 800873e:	790b      	ldrb	r3, [r1, #4]
 8008740:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008744:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008746:	79ca      	ldrb	r2, [r1, #7]
 8008748:	798b      	ldrb	r3, [r1, #6]
 800874a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800874e:	80c3      	strh	r3, [r0, #6]
 8008750:	4770      	bx	lr

08008752 <USBD_CtlError>:
{
 8008752:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8008754:	2180      	movs	r1, #128	; 0x80
{
 8008756:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8008758:	f019 f9b4 	bl	8021ac4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800875c:	4620      	mov	r0, r4
 800875e:	2100      	movs	r1, #0
}
 8008760:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8008764:	f019 b9ae 	b.w	8021ac4 <USBD_LL_StallEP>

08008768 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008768:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800876a:	b188      	cbz	r0, 8008790 <USBD_GetString+0x28>
 800876c:	4605      	mov	r5, r0
 800876e:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8008770:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2c00      	cmp	r4, #0
 8008778:	d1f9      	bne.n	800876e <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800877a:	3301      	adds	r3, #1
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008780:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008782:	2303      	movs	r3, #3
 8008784:	704b      	strb	r3, [r1, #1]
 8008786:	3801      	subs	r0, #1
 8008788:	2302      	movs	r3, #2
    while (*desc != '\0')
 800878a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800878e:	b905      	cbnz	r5, 8008792 <USBD_GetString+0x2a>
 8008790:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8008792:	1c5a      	adds	r2, r3, #1
 8008794:	b2d2      	uxtb	r2, r2
 8008796:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8008798:	3302      	adds	r3, #2
 800879a:	b2db      	uxtb	r3, r3
 800879c:	548c      	strb	r4, [r1, r2]
 800879e:	e7f4      	b.n	800878a <USBD_GetString+0x22>

080087a0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80087a0:	b510      	push	{r4, lr}
 80087a2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80087a4:	2202      	movs	r2, #2
 80087a6:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 80087aa:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80087ac:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 80087ae:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80087b0:	2100      	movs	r1, #0
 80087b2:	f019 f9c5 	bl	8021b40 <USBD_LL_Transmit>

  return USBD_OK;
}
 80087b6:	2000      	movs	r0, #0
 80087b8:	bd10      	pop	{r4, pc}

080087ba <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80087ba:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80087bc:	4613      	mov	r3, r2
 80087be:	460a      	mov	r2, r1
 80087c0:	2100      	movs	r1, #0
 80087c2:	f019 f9bd 	bl	8021b40 <USBD_LL_Transmit>

  return USBD_OK;
}
 80087c6:	2000      	movs	r0, #0
 80087c8:	bd08      	pop	{r3, pc}

080087ca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80087ca:	b510      	push	{r4, lr}
 80087cc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087ce:	2203      	movs	r2, #3
 80087d0:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80087d4:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80087d8:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80087da:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80087de:	2100      	movs	r1, #0
 80087e0:	f019 f9bc 	bl	8021b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80087e4:	2000      	movs	r0, #0
 80087e6:	bd10      	pop	{r4, pc}

080087e8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80087e8:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087ea:	4613      	mov	r3, r2
 80087ec:	460a      	mov	r2, r1
 80087ee:	2100      	movs	r1, #0
 80087f0:	f019 f9b4 	bl	8021b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80087f4:	2000      	movs	r0, #0
 80087f6:	bd08      	pop	{r3, pc}

080087f8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80087f8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087fa:	2304      	movs	r3, #4
 80087fc:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008800:	2300      	movs	r3, #0
 8008802:	461a      	mov	r2, r3
 8008804:	4619      	mov	r1, r3
 8008806:	f019 f99b 	bl	8021b40 <USBD_LL_Transmit>

  return USBD_OK;
}
 800880a:	2000      	movs	r0, #0
 800880c:	bd08      	pop	{r3, pc}

0800880e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800880e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008810:	2305      	movs	r3, #5
 8008812:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008816:	2300      	movs	r3, #0
 8008818:	461a      	mov	r2, r3
 800881a:	4619      	mov	r1, r3
 800881c:	f019 f99e 	bl	8021b5c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008820:	2000      	movs	r0, #0
 8008822:	bd08      	pop	{r3, pc}

08008824 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008824:	4b03      	ldr	r3, [pc, #12]	; (8008834 <disk_status+0x10>)
 8008826:	181a      	adds	r2, r3, r0
 8008828:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800882c:	7a10      	ldrb	r0, [r2, #8]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	4718      	bx	r3
 8008834:	20001188 	.word	0x20001188

08008838 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8008838:	4b06      	ldr	r3, [pc, #24]	; (8008854 <disk_initialize+0x1c>)
 800883a:	5c1a      	ldrb	r2, [r3, r0]
 800883c:	b942      	cbnz	r2, 8008850 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800883e:	2201      	movs	r2, #1
 8008840:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008842:	181a      	adds	r2, r3, r0
 8008844:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008848:	7a10      	ldrb	r0, [r2, #8]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4718      	bx	r3
  }
  return stat;
}
 8008850:	2000      	movs	r0, #0
 8008852:	4770      	bx	lr
 8008854:	20001188 	.word	0x20001188

08008858 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008858:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800885a:	4c05      	ldr	r4, [pc, #20]	; (8008870 <disk_read+0x18>)
 800885c:	1825      	adds	r5, r4, r0
 800885e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008862:	6860      	ldr	r0, [r4, #4]
 8008864:	6884      	ldr	r4, [r0, #8]
 8008866:	7a28      	ldrb	r0, [r5, #8]
 8008868:	46a4      	mov	ip, r4
  return res;
}
 800886a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800886c:	4760      	bx	ip
 800886e:	bf00      	nop
 8008870:	20001188 	.word	0x20001188

08008874 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008874:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008876:	4c05      	ldr	r4, [pc, #20]	; (800888c <disk_write+0x18>)
 8008878:	1825      	adds	r5, r4, r0
 800887a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800887e:	6860      	ldr	r0, [r4, #4]
 8008880:	68c4      	ldr	r4, [r0, #12]
 8008882:	7a28      	ldrb	r0, [r5, #8]
 8008884:	46a4      	mov	ip, r4
  return res;
}
 8008886:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008888:	4760      	bx	ip
 800888a:	bf00      	nop
 800888c:	20001188 	.word	0x20001188

08008890 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008890:	4b05      	ldr	r3, [pc, #20]	; (80088a8 <disk_ioctl+0x18>)
{
 8008892:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008894:	181c      	adds	r4, r3, r0
 8008896:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800889a:	7a20      	ldrb	r0, [r4, #8]
 800889c:	685b      	ldr	r3, [r3, #4]
  return res;
}
 800889e:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	4718      	bx	r3
 80088a6:	bf00      	nop
 80088a8:	20001188 	.word	0x20001188

080088ac <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 80088ac:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 80088ae:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 80088b0:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 80088b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 80088b6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80088ba:	4770      	bx	lr

080088bc <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80088bc:	0a0b      	lsrs	r3, r1, #8
 80088be:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80088c0:	7043      	strb	r3, [r0, #1]
 80088c2:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80088c4:	0e09      	lsrs	r1, r1, #24
 80088c6:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80088c8:	70c1      	strb	r1, [r0, #3]
 80088ca:	4770      	bx	lr

080088cc <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80088cc:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80088ce:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80088d2:	4290      	cmp	r0, r2
 80088d4:	d1fb      	bne.n	80088ce <mem_set+0x2>
}
 80088d6:	4770      	bx	lr

080088d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088d8:	4b15      	ldr	r3, [pc, #84]	; (8008930 <chk_lock+0x58>)
 80088da:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088dc:	2500      	movs	r5, #0
 80088de:	462a      	mov	r2, r5
 80088e0:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 80088e2:	681e      	ldr	r6, [r3, #0]
 80088e4:	b1a6      	cbz	r6, 8008910 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80088e6:	6807      	ldr	r7, [r0, #0]
 80088e8:	42be      	cmp	r6, r7
 80088ea:	d112      	bne.n	8008912 <chk_lock+0x3a>
 80088ec:	685f      	ldr	r7, [r3, #4]
 80088ee:	6886      	ldr	r6, [r0, #8]
 80088f0:	42b7      	cmp	r7, r6
 80088f2:	d10e      	bne.n	8008912 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 80088f4:	689f      	ldr	r7, [r3, #8]
 80088f6:	6946      	ldr	r6, [r0, #20]
 80088f8:	42b7      	cmp	r7, r6
 80088fa:	d10a      	bne.n	8008912 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80088fc:	b9b1      	cbnz	r1, 800892c <chk_lock+0x54>
 80088fe:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 8008902:	8993      	ldrh	r3, [r2, #12]
 8008904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008908:	bf14      	ite	ne
 800890a:	2000      	movne	r0, #0
 800890c:	2010      	moveq	r0, #16
 800890e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8008910:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008912:	3201      	adds	r2, #1
 8008914:	2a02      	cmp	r2, #2
 8008916:	f103 0310 	add.w	r3, r3, #16
 800891a:	d1e2      	bne.n	80088e2 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800891c:	b10d      	cbz	r5, 8008922 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800891e:	2000      	movs	r0, #0
 8008920:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008922:	2902      	cmp	r1, #2
 8008924:	bf0c      	ite	eq
 8008926:	2000      	moveq	r0, #0
 8008928:	2012      	movne	r0, #18
 800892a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800892c:	2010      	movs	r0, #16
 800892e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008930:	20001164 	.word	0x20001164

08008934 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008934:	4a1c      	ldr	r2, [pc, #112]	; (80089a8 <inc_lock+0x74>)
 8008936:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8008938:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800893a:	2300      	movs	r3, #0
 800893c:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 800893e:	6814      	ldr	r4, [r2, #0]
 8008940:	42ac      	cmp	r4, r5
 8008942:	d107      	bne.n	8008954 <inc_lock+0x20>
 8008944:	6857      	ldr	r7, [r2, #4]
 8008946:	6884      	ldr	r4, [r0, #8]
 8008948:	42a7      	cmp	r7, r4
 800894a:	d103      	bne.n	8008954 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 800894c:	6897      	ldr	r7, [r2, #8]
 800894e:	6944      	ldr	r4, [r0, #20]
 8008950:	42a7      	cmp	r7, r4
 8008952:	d01d      	beq.n	8008990 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008954:	3301      	adds	r3, #1
 8008956:	2b02      	cmp	r3, #2
 8008958:	f102 0210 	add.w	r2, r2, #16
 800895c:	d1ef      	bne.n	800893e <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800895e:	6833      	ldr	r3, [r6, #0]
 8008960:	b113      	cbz	r3, 8008968 <inc_lock+0x34>
 8008962:	6933      	ldr	r3, [r6, #16]
 8008964:	b9eb      	cbnz	r3, 80089a2 <inc_lock+0x6e>
 8008966:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8008968:	011c      	lsls	r4, r3, #4
 800896a:	1932      	adds	r2, r6, r4
 800896c:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 800896e:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8008970:	6940      	ldr	r0, [r0, #20]
 8008972:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8008974:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8008976:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8008978:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800897a:	b979      	cbnz	r1, 800899c <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800897c:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8008980:	8992      	ldrh	r2, [r2, #12]
 8008982:	3201      	adds	r2, #1
 8008984:	b292      	uxth	r2, r2
 8008986:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 800898a:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800898c:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 800898e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008990:	2900      	cmp	r1, #0
 8008992:	d0f3      	beq.n	800897c <inc_lock+0x48>
 8008994:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8008998:	8992      	ldrh	r2, [r2, #12]
 800899a:	b912      	cbnz	r2, 80089a2 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800899c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089a0:	e7f1      	b.n	8008986 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80089a2:	2000      	movs	r0, #0
 80089a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a6:	bf00      	nop
 80089a8:	20001164 	.word	0x20001164

080089ac <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80089ac:	3801      	subs	r0, #1
 80089ae:	2801      	cmp	r0, #1
 80089b0:	d80e      	bhi.n	80089d0 <dec_lock+0x24>
		n = Files[i].ctr;
 80089b2:	4a09      	ldr	r2, [pc, #36]	; (80089d8 <dec_lock+0x2c>)
 80089b4:	0103      	lsls	r3, r0, #4
 80089b6:	18d1      	adds	r1, r2, r3
 80089b8:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 80089ba:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 80089be:	b280      	uxth	r0, r0
 80089c0:	b108      	cbz	r0, 80089c6 <dec_lock+0x1a>
 80089c2:	1e48      	subs	r0, r1, #1
 80089c4:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 80089c6:	18d1      	adds	r1, r2, r3
 80089c8:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80089ca:	b918      	cbnz	r0, 80089d4 <dec_lock+0x28>
 80089cc:	50d0      	str	r0, [r2, r3]
 80089ce:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80089d0:	2002      	movs	r0, #2
 80089d2:	4770      	bx	lr
		res = FR_OK;
 80089d4:	2000      	movs	r0, #0
	}
	return res;
}
 80089d6:	4770      	bx	lr
 80089d8:	20001164 	.word	0x20001164

080089dc <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089dc:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 80089de:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089e0:	3b02      	subs	r3, #2
 80089e2:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80089e4:	bf3d      	ittte	cc
 80089e6:	8943      	ldrhcc	r3, [r0, #10]
 80089e8:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
 80089ea:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089ee:	2000      	movcs	r0, #0
}
 80089f0:	4770      	bx	lr

080089f2 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80089f2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 80089f4:	b510      	push	{r4, lr}
	FATFS *fs = fp->obj.fs;
 80089f6:	6804      	ldr	r4, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80089f8:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80089fa:	89a3      	ldrh	r3, [r4, #12]
 80089fc:	fbb1 f1f3 	udiv	r1, r1, r3
 8008a00:	8963      	ldrh	r3, [r4, #10]
 8008a02:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a06:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008a08:	b130      	cbz	r0, 8008a18 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008a0a:	4281      	cmp	r1, r0
 8008a0c:	d302      	bcc.n	8008a14 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 8008a0e:	1a09      	subs	r1, r1, r0
 8008a10:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a12:	e7f8      	b.n	8008a06 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8008a14:	6850      	ldr	r0, [r2, #4]
 8008a16:	4408      	add	r0, r1
}
 8008a18:	bd10      	pop	{r4, pc}

08008a1a <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008a1a:	6802      	ldr	r2, [r0, #0]
{
 8008a1c:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8008a1e:	b152      	cbz	r2, 8008a36 <get_ldnumber+0x1c>
 8008a20:	4611      	mov	r1, r2
 8008a22:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008a24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a28:	2c20      	cmp	r4, #32
 8008a2a:	d90c      	bls.n	8008a46 <get_ldnumber+0x2c>
 8008a2c:	2c3a      	cmp	r4, #58	; 0x3a
 8008a2e:	d1f8      	bne.n	8008a22 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8008a30:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008a32:	428b      	cmp	r3, r1
 8008a34:	d002      	beq.n	8008a3c <get_ldnumber+0x22>
	int vol = -1;
 8008a36:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8008a3a:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008a3c:	7812      	ldrb	r2, [r2, #0]
 8008a3e:	2a30      	cmp	r2, #48	; 0x30
 8008a40:	d1f9      	bne.n	8008a36 <get_ldnumber+0x1c>
					*path = ++tt;
 8008a42:	3301      	adds	r3, #1
 8008a44:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8008a46:	2000      	movs	r0, #0
 8008a48:	bd10      	pop	{r4, pc}

08008a4a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008a4a:	b538      	push	{r3, r4, r5, lr}
 8008a4c:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008a4e:	4604      	mov	r4, r0
 8008a50:	b918      	cbnz	r0, 8008a5a <validate+0x10>
		*fs = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8008a56:	2009      	movs	r0, #9
 8008a58:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008a5a:	6803      	ldr	r3, [r0, #0]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d0f8      	beq.n	8008a52 <validate+0x8>
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	d0f5      	beq.n	8008a52 <validate+0x8>
 8008a66:	88d9      	ldrh	r1, [r3, #6]
 8008a68:	8882      	ldrh	r2, [r0, #4]
 8008a6a:	4291      	cmp	r1, r2
 8008a6c:	d1f1      	bne.n	8008a52 <validate+0x8>
 8008a6e:	7858      	ldrb	r0, [r3, #1]
 8008a70:	f7ff fed8 	bl	8008824 <disk_status>
 8008a74:	f010 0001 	ands.w	r0, r0, #1
 8008a78:	d1eb      	bne.n	8008a52 <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8008a7a:	6823      	ldr	r3, [r4, #0]
 8008a7c:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}

08008a80 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008a80:	3801      	subs	r0, #1
 8008a82:	440a      	add	r2, r1
			*d++ = *s++;
 8008a84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a88:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8008a8c:	4291      	cmp	r1, r2
 8008a8e:	d1f9      	bne.n	8008a84 <mem_cpy.part.0+0x4>
}
 8008a90:	4770      	bx	lr

08008a92 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8008a92:	7eca      	ldrb	r2, [r1, #27]
 8008a94:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8008a96:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8008a98:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8008a9c:	bf01      	itttt	eq
 8008a9e:	7d48      	ldrbeq	r0, [r1, #21]
 8008aa0:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008aa2:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8008aa6:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	4770      	bx	lr

08008aae <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8008aae:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008ab2:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8008ab4:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8008ab6:	7803      	ldrb	r3, [r0, #0]
 8008ab8:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008aba:	bf01      	itttt	eq
 8008abc:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008abe:	750a      	strbeq	r2, [r1, #20]
 8008ac0:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8008ac2:	754a      	strbeq	r2, [r1, #21]
 8008ac4:	4770      	bx	lr

08008ac6 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008ac6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8008ac8:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008aca:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008ace:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	462a      	mov	r2, r5
 8008ad4:	4639      	mov	r1, r7
 8008ad6:	7840      	ldrb	r0, [r0, #1]
 8008ad8:	f7ff fecc 	bl	8008874 <disk_write>
 8008adc:	b9a0      	cbnz	r0, 8008b08 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ae0:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 8008ae2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008ae4:	1aeb      	subs	r3, r5, r3
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d301      	bcc.n	8008aee <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8008aea:	2000      	movs	r0, #0
 8008aec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008aee:	78a6      	ldrb	r6, [r4, #2]
 8008af0:	2e01      	cmp	r6, #1
 8008af2:	d9fa      	bls.n	8008aea <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8008af4:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008af6:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8008af8:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008afa:	462a      	mov	r2, r5
 8008afc:	2301      	movs	r3, #1
 8008afe:	4639      	mov	r1, r7
 8008b00:	f7ff feb8 	bl	8008874 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008b04:	3e01      	subs	r6, #1
 8008b06:	e7f3      	b.n	8008af0 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8008b08:	2001      	movs	r0, #1
}
 8008b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b0c <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008b0c:	78c3      	ldrb	r3, [r0, #3]
 8008b0e:	b10b      	cbz	r3, 8008b14 <sync_window+0x8>
 8008b10:	f7ff bfd9 	b.w	8008ac6 <sync_window.part.4>
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	4770      	bx	lr

08008b18 <sync_fs>:
{
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008b1c:	f7ff fff6 	bl	8008b0c <sync_window>
 8008b20:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8008b22:	2800      	cmp	r0, #0
 8008b24:	d141      	bne.n	8008baa <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b26:	7823      	ldrb	r3, [r4, #0]
 8008b28:	2b03      	cmp	r3, #3
 8008b2a:	d136      	bne.n	8008b9a <sync_fs+0x82>
 8008b2c:	7927      	ldrb	r7, [r4, #4]
 8008b2e:	2f01      	cmp	r7, #1
 8008b30:	d133      	bne.n	8008b9a <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 8008b32:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8008b36:	4601      	mov	r1, r0
 8008b38:	89a2      	ldrh	r2, [r4, #12]
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f7ff fec6 	bl	80088cc <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8008b40:	2355      	movs	r3, #85	; 0x55
 8008b42:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 8008b46:	23aa      	movs	r3, #170	; 0xaa
 8008b48:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8008b4c:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8008b4e:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8008b50:	2172      	movs	r1, #114	; 0x72
 8008b52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8008b56:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8008b5a:	2361      	movs	r3, #97	; 0x61
 8008b5c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8008b60:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8008b64:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val;
 8008b68:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 8008b6c:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 8008b70:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008b74:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008b78:	6961      	ldr	r1, [r4, #20]
 8008b7a:	f7ff fe9f 	bl	80088bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008b7e:	6921      	ldr	r1, [r4, #16]
 8008b80:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008b84:	f7ff fe9a 	bl	80088bc <st_dword>
			fs->winsect = fs->volbase + 1;
 8008b88:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008b8a:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8008b8c:	3201      	adds	r2, #1
 8008b8e:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008b90:	463b      	mov	r3, r7
 8008b92:	4631      	mov	r1, r6
 8008b94:	f7ff fe6e 	bl	8008874 <disk_write>
			fs->fsi_flag = 0;
 8008b98:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	4611      	mov	r1, r2
 8008b9e:	7860      	ldrb	r0, [r4, #1]
 8008ba0:	f7ff fe76 	bl	8008890 <disk_ioctl>
 8008ba4:	3000      	adds	r0, #0
 8008ba6:	bf18      	it	ne
 8008ba8:	2001      	movne	r0, #1
}
 8008baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008bac <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008bac:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008bae:	428b      	cmp	r3, r1
{
 8008bb0:	b570      	push	{r4, r5, r6, lr}
 8008bb2:	4606      	mov	r6, r0
 8008bb4:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008bb6:	d012      	beq.n	8008bde <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8008bb8:	f7ff ffa8 	bl	8008b0c <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	b960      	cbnz	r0, 8008bda <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008bc0:	462a      	mov	r2, r5
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8008bc8:	7870      	ldrb	r0, [r6, #1]
 8008bca:	f7ff fe45 	bl	8008858 <disk_read>
 8008bce:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8008bd0:	bf1c      	itt	ne
 8008bd2:	f04f 35ff 	movne.w	r5, #4294967295
 8008bd6:	2401      	movne	r4, #1
			fs->winsect = sector;
 8008bd8:	6335      	str	r5, [r6, #48]	; 0x30
}
 8008bda:	4620      	mov	r0, r4
 8008bdc:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8008bde:	2400      	movs	r4, #0
 8008be0:	e7fb      	b.n	8008bda <move_window+0x2e>
	...

08008be4 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008be4:	2300      	movs	r3, #0
{
 8008be6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008be8:	70c3      	strb	r3, [r0, #3]
 8008bea:	f04f 33ff 	mov.w	r3, #4294967295
 8008bee:	6303      	str	r3, [r0, #48]	; 0x30
{
 8008bf0:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008bf2:	f7ff ffdb 	bl	8008bac <move_window>
 8008bf6:	bb30      	cbnz	r0, 8008c46 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8008bf8:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8008bfc:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8008c00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008c04:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d11e      	bne.n	8008c4a <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008c0c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008c10:	2be9      	cmp	r3, #233	; 0xe9
 8008c12:	d005      	beq.n	8008c20 <check_fs+0x3c>
 8008c14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c16:	4a10      	ldr	r2, [pc, #64]	; (8008c58 <check_fs+0x74>)
 8008c18:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d116      	bne.n	8008c4e <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008c20:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8008c24:	f7ff fe42 	bl	80088ac <ld_dword>
 8008c28:	4b0c      	ldr	r3, [pc, #48]	; (8008c5c <check_fs+0x78>)
 8008c2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008c2e:	4298      	cmp	r0, r3
 8008c30:	d00f      	beq.n	8008c52 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008c32:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8008c36:	f7ff fe39 	bl	80088ac <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008c3a:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <check_fs+0x7c>)
 8008c3c:	4298      	cmp	r0, r3
 8008c3e:	bf14      	ite	ne
 8008c40:	2002      	movne	r0, #2
 8008c42:	2000      	moveq	r0, #0
 8008c44:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008c46:	2004      	movs	r0, #4
 8008c48:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008c4a:	2003      	movs	r0, #3
 8008c4c:	bd10      	pop	{r4, pc}
	return 2;
 8008c4e:	2002      	movs	r0, #2
 8008c50:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008c52:	2000      	movs	r0, #0
}
 8008c54:	bd10      	pop	{r4, pc}
 8008c56:	bf00      	nop
 8008c58:	009000eb 	.word	0x009000eb
 8008c5c:	00544146 	.word	0x00544146
 8008c60:	33544146 	.word	0x33544146

08008c64 <find_volume>:
{
 8008c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8008c68:	2300      	movs	r3, #0
{
 8008c6a:	b085      	sub	sp, #20
	*rfs = 0;
 8008c6c:	600b      	str	r3, [r1, #0]
{
 8008c6e:	460f      	mov	r7, r1
 8008c70:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8008c72:	f7ff fed2 	bl	8008a1a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c76:	1e06      	subs	r6, r0, #0
 8008c78:	f2c0 815e 	blt.w	8008f38 <find_volume+0x2d4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008c7c:	4bb2      	ldr	r3, [pc, #712]	; (8008f48 <find_volume+0x2e4>)
 8008c7e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008c82:	2c00      	cmp	r4, #0
 8008c84:	f000 815a 	beq.w	8008f3c <find_volume+0x2d8>
	*rfs = fs;							/* Return pointer to the file system object */
 8008c88:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008c8a:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008c8c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008c90:	b173      	cbz	r3, 8008cb0 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8008c92:	7860      	ldrb	r0, [r4, #1]
 8008c94:	f7ff fdc6 	bl	8008824 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008c98:	07c1      	lsls	r1, r0, #31
 8008c9a:	d409      	bmi.n	8008cb0 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008c9c:	2d00      	cmp	r5, #0
 8008c9e:	f000 814f 	beq.w	8008f40 <find_volume+0x2dc>
 8008ca2:	f010 0004 	ands.w	r0, r0, #4
 8008ca6:	d000      	beq.n	8008caa <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8008ca8:	200a      	movs	r0, #10
}
 8008caa:	b005      	add	sp, #20
 8008cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8008cb0:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008cb2:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8008cb4:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008cb6:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008cb8:	f7ff fdbe 	bl	8008838 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008cbc:	07c2      	lsls	r2, r0, #31
 8008cbe:	f100 8141 	bmi.w	8008f44 <find_volume+0x2e0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008cc2:	b10d      	cbz	r5, 8008cc8 <find_volume+0x64>
 8008cc4:	0743      	lsls	r3, r0, #29
 8008cc6:	d4ef      	bmi.n	8008ca8 <find_volume+0x44>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008cc8:	f104 020c 	add.w	r2, r4, #12
 8008ccc:	2102      	movs	r1, #2
 8008cce:	7860      	ldrb	r0, [r4, #1]
 8008cd0:	f7ff fdde 	bl	8008890 <disk_ioctl>
 8008cd4:	b108      	cbz	r0, 8008cda <find_volume+0x76>
 8008cd6:	2001      	movs	r0, #1
 8008cd8:	e7e7      	b.n	8008caa <find_volume+0x46>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8008ce0:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8008ce4:	d8f7      	bhi.n	8008cd6 <find_volume+0x72>
 8008ce6:	1e5e      	subs	r6, r3, #1
 8008ce8:	401e      	ands	r6, r3
 8008cea:	d1f4      	bne.n	8008cd6 <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008cec:	4631      	mov	r1, r6
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f7ff ff78 	bl	8008be4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008cf4:	2802      	cmp	r0, #2
 8008cf6:	f040 8101 	bne.w	8008efc <find_volume+0x298>
 8008cfa:	f504 71fd 	add.w	r1, r4, #506	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008cfe:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8008d02:	b110      	cbz	r0, 8008d0a <find_volume+0xa6>
 8008d04:	4608      	mov	r0, r1
 8008d06:	f7ff fdd1 	bl	80088ac <ld_dword>
 8008d0a:	f84d 0026 	str.w	r0, [sp, r6, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008d0e:	3601      	adds	r6, #1
 8008d10:	2e04      	cmp	r6, #4
 8008d12:	f101 0110 	add.w	r1, r1, #16
 8008d16:	d1f2      	bne.n	8008cfe <find_volume+0x9a>
 8008d18:	2500      	movs	r5, #0
			bsect = br[i];
 8008d1a:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008d1e:	2e00      	cmp	r6, #0
 8008d20:	f000 80e4 	beq.w	8008eec <find_volume+0x288>
 8008d24:	4631      	mov	r1, r6
 8008d26:	4620      	mov	r0, r4
 8008d28:	f7ff ff5c 	bl	8008be4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008d2c:	2801      	cmp	r0, #1
 8008d2e:	f200 80de 	bhi.w	8008eee <find_volume+0x28a>
	rv = rv << 8 | ptr[0];
 8008d32:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008d36:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008d3a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 8008d3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d42:	4598      	cmp	r8, r3
 8008d44:	f040 80e0 	bne.w	8008f08 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008d48:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8008d4c:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008d50:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8008d54:	d104      	bne.n	8008d60 <find_volume+0xfc>
 8008d56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d5a:	f7ff fda7 	bl	80088ac <ld_dword>
 8008d5e:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008d60:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8008d64:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d66:	1e7b      	subs	r3, r7, #1
 8008d68:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008d6a:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d6c:	f200 80cc 	bhi.w	8008f08 <find_volume+0x2a4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d70:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 8008d74:	fa1f f389 	uxth.w	r3, r9
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008d78:	434f      	muls	r7, r1
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d7a:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 80c3 	beq.w	8008f08 <find_volume+0x2a4>
 8008d82:	f109 33ff 	add.w	r3, r9, #4294967295
 8008d86:	ea13 0f09 	tst.w	r3, r9
 8008d8a:	f040 80bd 	bne.w	8008f08 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008d8e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008d92:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 8008d96:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008d9a:	ea4f 1358 	mov.w	r3, r8, lsr #5
 8008d9e:	fbba fbf3 	udiv	fp, sl, r3
 8008da2:	fb03 a31b 	mls	r3, r3, fp, sl
 8008da6:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008da8:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	f040 80ab 	bne.w	8008f08 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008db2:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8008db6:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008dba:	ea50 2005 	orrs.w	r0, r0, r5, lsl #8
 8008dbe:	d103      	bne.n	8008dc8 <find_volume+0x164>
 8008dc0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8008dc4:	f7ff fd72 	bl	80088ac <ld_dword>
	rv = rv << 8 | ptr[0];
 8008dc8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008dcc:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008dd0:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8008dd4:	f000 8098 	beq.w	8008f08 <find_volume+0x2a4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008dd8:	fa12 f38b 	uxtah	r3, r2, fp
 8008ddc:	443b      	add	r3, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008dde:	4298      	cmp	r0, r3
 8008de0:	f0c0 8092 	bcc.w	8008f08 <find_volume+0x2a4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008de4:	1ac5      	subs	r5, r0, r3
 8008de6:	fbb5 f5f9 	udiv	r5, r5, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008dea:	2d00      	cmp	r5, #0
 8008dec:	f000 808c 	beq.w	8008f08 <find_volume+0x2a4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008df0:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8008df4:	4285      	cmp	r5, r0
 8008df6:	f200 8089 	bhi.w	8008f0c <find_volume+0x2a8>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008dfa:	f640 79f5 	movw	r9, #4085	; 0xff5
 8008dfe:	454d      	cmp	r5, r9
 8008e00:	bf8c      	ite	hi
 8008e02:	f04f 0902 	movhi.w	r9, #2
 8008e06:	f04f 0901 	movls.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008e0a:	3502      	adds	r5, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008e0c:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8008e0e:	4433      	add	r3, r6
		if (fmt == FS_FAT32) {
 8008e10:	f1b9 0f03 	cmp.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008e14:	61a5      	str	r5, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008e16:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008e18:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008e1a:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008e1c:	d179      	bne.n	8008f12 <find_volume+0x2ae>
	rv = rv << 8 | ptr[0];
 8008e1e:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 8008e22:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008e26:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8008e2a:	d16d      	bne.n	8008f08 <find_volume+0x2a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008e2c:	f1ba 0f00 	cmp.w	sl, #0
 8008e30:	d16a      	bne.n	8008f08 <find_volume+0x2a4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008e32:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8008e36:	f7ff fd39 	bl	80088ac <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008e3a:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008e3c:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008e3e:	f108 33ff 	add.w	r3, r8, #4294967295
 8008e42:	441d      	add	r5, r3
 8008e44:	fbb5 f8f8 	udiv	r8, r5, r8
 8008e48:	4541      	cmp	r1, r8
 8008e4a:	d35d      	bcc.n	8008f08 <find_volume+0x2a4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e50:	6163      	str	r3, [r4, #20]
 8008e52:	6123      	str	r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008e54:	f1b9 0f03 	cmp.w	r9, #3
		fs->fsi_flag = 0x80;
 8008e58:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008e5c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008e5e:	d12f      	bne.n	8008ec0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8008e60:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8008e64:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8008e68:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d127      	bne.n	8008ec0 <find_volume+0x25c>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008e70:	1c71      	adds	r1, r6, #1
 8008e72:	4620      	mov	r0, r4
 8008e74:	f7ff fe9a 	bl	8008bac <move_window>
 8008e78:	bb10      	cbnz	r0, 8008ec0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8008e7a:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8008e7e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 8008e82:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8008e84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008e88:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d117      	bne.n	8008ec0 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008e90:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008e94:	f7ff fd0a 	bl	80088ac <ld_dword>
 8008e98:	4b2c      	ldr	r3, [pc, #176]	; (8008f4c <find_volume+0x2e8>)
 8008e9a:	4298      	cmp	r0, r3
 8008e9c:	d110      	bne.n	8008ec0 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008e9e:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008ea2:	f7ff fd03 	bl	80088ac <ld_dword>
 8008ea6:	4b2a      	ldr	r3, [pc, #168]	; (8008f50 <find_volume+0x2ec>)
 8008ea8:	4298      	cmp	r0, r3
 8008eaa:	d109      	bne.n	8008ec0 <find_volume+0x25c>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008eac:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008eb0:	f7ff fcfc 	bl	80088ac <ld_dword>
 8008eb4:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008eb6:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008eba:	f7ff fcf7 	bl	80088ac <ld_dword>
 8008ebe:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8008ec0:	4a24      	ldr	r2, [pc, #144]	; (8008f54 <find_volume+0x2f0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8008ec2:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8008ec6:	8813      	ldrh	r3, [r2, #0]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	8013      	strh	r3, [r2, #0]
 8008ece:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008ed0:	4b21      	ldr	r3, [pc, #132]	; (8008f58 <find_volume+0x2f4>)
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	4294      	cmp	r4, r2
 8008ed6:	bf04      	itt	eq
 8008ed8:	2200      	moveq	r2, #0
 8008eda:	601a      	streq	r2, [r3, #0]
 8008edc:	691a      	ldr	r2, [r3, #16]
 8008ede:	4294      	cmp	r4, r2
 8008ee0:	f04f 0000 	mov.w	r0, #0
 8008ee4:	f47f aee1 	bne.w	8008caa <find_volume+0x46>
 8008ee8:	6118      	str	r0, [r3, #16]
 8008eea:	e6de      	b.n	8008caa <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008eec:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008eee:	3501      	adds	r5, #1
 8008ef0:	2d04      	cmp	r5, #4
 8008ef2:	f47f af12 	bne.w	8008d1a <find_volume+0xb6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008ef6:	2804      	cmp	r0, #4
 8008ef8:	d106      	bne.n	8008f08 <find_volume+0x2a4>
 8008efa:	e6ec      	b.n	8008cd6 <find_volume+0x72>
 8008efc:	2804      	cmp	r0, #4
 8008efe:	f43f aeea 	beq.w	8008cd6 <find_volume+0x72>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008f02:	2801      	cmp	r0, #1
 8008f04:	f67f af15 	bls.w	8008d32 <find_volume+0xce>
 8008f08:	200d      	movs	r0, #13
 8008f0a:	e6ce      	b.n	8008caa <find_volume+0x46>
		fmt = FS_FAT32;
 8008f0c:	f04f 0903 	mov.w	r9, #3
 8008f10:	e77b      	b.n	8008e0a <find_volume+0x1a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008f12:	f1ba 0f00 	cmp.w	sl, #0
 8008f16:	d0f7      	beq.n	8008f08 <find_volume+0x2a4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008f18:	f1b9 0f02 	cmp.w	r9, #2
 8008f1c:	ea4f 0045 	mov.w	r0, r5, lsl #1
 8008f20:	bf18      	it	ne
 8008f22:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008f24:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008f26:	bf18      	it	ne
 8008f28:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008f2c:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008f2e:	bf0c      	ite	eq
 8008f30:	4605      	moveq	r5, r0
 8008f32:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 8008f36:	e782      	b.n	8008e3e <find_volume+0x1da>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f38:	200b      	movs	r0, #11
 8008f3a:	e6b6      	b.n	8008caa <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008f3c:	200c      	movs	r0, #12
 8008f3e:	e6b4      	b.n	8008caa <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8008f40:	4628      	mov	r0, r5
 8008f42:	e6b2      	b.n	8008caa <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008f44:	2003      	movs	r0, #3
 8008f46:	e6b0      	b.n	8008caa <find_volume+0x46>
 8008f48:	20001160 	.word	0x20001160
 8008f4c:	41615252 	.word	0x41615252
 8008f50:	61417272 	.word	0x61417272
 8008f54:	20001184 	.word	0x20001184
 8008f58:	20001164 	.word	0x20001164

08008f5c <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008f5c:	2901      	cmp	r1, #1
{
 8008f5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f62:	4604      	mov	r4, r0
 8008f64:	460d      	mov	r5, r1
 8008f66:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008f68:	f240 808a 	bls.w	8009080 <put_fat+0x124>
 8008f6c:	6983      	ldr	r3, [r0, #24]
 8008f6e:	4299      	cmp	r1, r3
 8008f70:	f080 8086 	bcs.w	8009080 <put_fat+0x124>
		switch (fs->fs_type) {
 8008f74:	7803      	ldrb	r3, [r0, #0]
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d049      	beq.n	800900e <put_fat+0xb2>
 8008f7a:	2b03      	cmp	r3, #3
 8008f7c:	d060      	beq.n	8009040 <put_fat+0xe4>
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d17e      	bne.n	8009080 <put_fat+0x124>
			bc = (UINT)clst; bc += bc / 2;
 8008f82:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f86:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008f88:	8983      	ldrh	r3, [r0, #12]
 8008f8a:	fbba f3f3 	udiv	r3, sl, r3
 8008f8e:	4419      	add	r1, r3
 8008f90:	f7ff fe0c 	bl	8008bac <move_window>
 8008f94:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8008f96:	bb78      	cbnz	r0, 8008ff8 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	fbba f2f3 	udiv	r2, sl, r3
 8008f9e:	f104 0834 	add.w	r8, r4, #52	; 0x34
 8008fa2:	fb03 a212 	mls	r2, r3, r2, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008fa6:	f015 0501 	ands.w	r5, r5, #1
 8008faa:	bf1f      	itttt	ne
 8008fac:	f818 3002 	ldrbne.w	r3, [r8, r2]
 8008fb0:	f003 010f 	andne.w	r1, r3, #15
 8008fb4:	013b      	lslne	r3, r7, #4
 8008fb6:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8008fba:	bf14      	ite	ne
 8008fbc:	430b      	orrne	r3, r1
 8008fbe:	b2fb      	uxtbeq	r3, r7
 8008fc0:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008fc4:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	70e3      	strb	r3, [r4, #3]
			p = fs->win + bc++ % SS(fs);
 8008fca:	f10a 0901 	add.w	r9, sl, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	fbb9 f3f3 	udiv	r3, r9, r3
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	4419      	add	r1, r3
 8008fd8:	f7ff fde8 	bl	8008bac <move_window>
			if (res != FR_OK) break;
 8008fdc:	4606      	mov	r6, r0
 8008fde:	b958      	cbnz	r0, 8008ff8 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	fbb9 f2f3 	udiv	r2, r9, r3
 8008fe6:	fb03 9212 	mls	r2, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008fea:	b145      	cbz	r5, 8008ffe <put_fat+0xa2>
 8008fec:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8008ff0:	f808 7002 	strb.w	r7, [r8, r2]
			fs->wflag = 1;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	70e3      	strb	r3, [r4, #3]
}
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008ffe:	f818 3002 	ldrb.w	r3, [r8, r2]
 8009002:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8009006:	f023 030f 	bic.w	r3, r3, #15
 800900a:	431f      	orrs	r7, r3
 800900c:	e7f0      	b.n	8008ff0 <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800900e:	8983      	ldrh	r3, [r0, #12]
 8009010:	085b      	lsrs	r3, r3, #1
 8009012:	fbb1 f3f3 	udiv	r3, r1, r3
 8009016:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009018:	4419      	add	r1, r3
 800901a:	f7ff fdc7 	bl	8008bac <move_window>
			if (res != FR_OK) break;
 800901e:	4606      	mov	r6, r0
 8009020:	2800      	cmp	r0, #0
 8009022:	d1e9      	bne.n	8008ff8 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009024:	89a1      	ldrh	r1, [r4, #12]
 8009026:	006d      	lsls	r5, r5, #1
 8009028:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800902c:	fbb5 f3f1 	udiv	r3, r5, r1
 8009030:	fb01 5513 	mls	r5, r1, r3, r5
 8009034:	1953      	adds	r3, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8009036:	5557      	strb	r7, [r2, r5]
 8009038:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 800903c:	705f      	strb	r7, [r3, #1]
 800903e:	e7d9      	b.n	8008ff4 <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009040:	8983      	ldrh	r3, [r0, #12]
 8009042:	089b      	lsrs	r3, r3, #2
 8009044:	fbb1 f3f3 	udiv	r3, r1, r3
 8009048:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800904a:	4419      	add	r1, r3
 800904c:	f7ff fdae 	bl	8008bac <move_window>
			if (res != FR_OK) break;
 8009050:	4606      	mov	r6, r0
 8009052:	2800      	cmp	r0, #0
 8009054:	d1d0      	bne.n	8008ff8 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009056:	89a1      	ldrh	r1, [r4, #12]
 8009058:	00ad      	lsls	r5, r5, #2
 800905a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800905e:	fbb5 f2f1 	udiv	r2, r5, r1
 8009062:	fb01 5512 	mls	r5, r1, r2, r5
 8009066:	441d      	add	r5, r3
 8009068:	4628      	mov	r0, r5
 800906a:	f7ff fc1f 	bl	80088ac <ld_dword>
 800906e:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8009072:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009076:	4339      	orrs	r1, r7
 8009078:	4628      	mov	r0, r5
 800907a:	f7ff fc1f 	bl	80088bc <st_dword>
 800907e:	e7b9      	b.n	8008ff4 <put_fat+0x98>
	FRESULT res = FR_INT_ERR;
 8009080:	2602      	movs	r6, #2
 8009082:	e7b9      	b.n	8008ff8 <put_fat+0x9c>

08009084 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009084:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8009086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009088:	4604      	mov	r4, r0
 800908a:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800908c:	d968      	bls.n	8009160 <get_fat.isra.8+0xdc>
 800908e:	6983      	ldr	r3, [r0, #24]
 8009090:	4299      	cmp	r1, r3
 8009092:	d265      	bcs.n	8009160 <get_fat.isra.8+0xdc>
		switch (fs->fs_type) {
 8009094:	7803      	ldrb	r3, [r0, #0]
 8009096:	2b02      	cmp	r3, #2
 8009098:	d032      	beq.n	8009100 <get_fat.isra.8+0x7c>
 800909a:	2b03      	cmp	r3, #3
 800909c:	d048      	beq.n	8009130 <get_fat.isra.8+0xac>
 800909e:	2b01      	cmp	r3, #1
 80090a0:	d15e      	bne.n	8009160 <get_fat.isra.8+0xdc>
			bc = (UINT)clst; bc += bc / 2;
 80090a2:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090a6:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80090a8:	8983      	ldrh	r3, [r0, #12]
 80090aa:	fbb5 f3f3 	udiv	r3, r5, r3
 80090ae:	4419      	add	r1, r3
 80090b0:	f7ff fd7c 	bl	8008bac <move_window>
 80090b4:	b110      	cbz	r0, 80090bc <get_fat.isra.8+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80090b6:	f04f 30ff 	mov.w	r0, #4294967295
 80090ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80090bc:	89a1      	ldrh	r1, [r4, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090be:	6a63      	ldr	r3, [r4, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 80090c0:	fbb5 f2f1 	udiv	r2, r5, r1
 80090c4:	fb01 5212 	mls	r2, r1, r2, r5
 80090c8:	4422      	add	r2, r4
 80090ca:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090cc:	4620      	mov	r0, r4
 80090ce:	fbb7 f1f1 	udiv	r1, r7, r1
 80090d2:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];
 80090d4:	f892 5034 	ldrb.w	r5, [r2, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090d8:	f7ff fd68 	bl	8008bac <move_window>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d1ea      	bne.n	80090b6 <get_fat.isra.8+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 80090e0:	89a2      	ldrh	r2, [r4, #12]
 80090e2:	fbb7 f3f2 	udiv	r3, r7, r2
 80090e6:	fb02 7313 	mls	r3, r2, r3, r7
 80090ea:	441c      	add	r4, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80090ec:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80090ee:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80090f2:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80090f6:	bf4c      	ite	mi
 80090f8:	0900      	lsrmi	r0, r0, #4
 80090fa:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80090fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009100:	8983      	ldrh	r3, [r0, #12]
 8009102:	085b      	lsrs	r3, r3, #1
 8009104:	fbb1 f3f3 	udiv	r3, r1, r3
 8009108:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800910a:	4419      	add	r1, r3
 800910c:	f7ff fd4e 	bl	8008bac <move_window>
 8009110:	2800      	cmp	r0, #0
 8009112:	d1d0      	bne.n	80090b6 <get_fat.isra.8+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009114:	89a1      	ldrh	r1, [r4, #12]
 8009116:	0076      	lsls	r6, r6, #1
 8009118:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800911c:	fbb6 f3f1 	udiv	r3, r6, r1
 8009120:	fb01 6613 	mls	r6, r1, r3, r6
 8009124:	1993      	adds	r3, r2, r6
	rv = rv << 8 | ptr[0];
 8009126:	5d90      	ldrb	r0, [r2, r6]
 8009128:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800912a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800912e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009130:	8983      	ldrh	r3, [r0, #12]
 8009132:	089b      	lsrs	r3, r3, #2
 8009134:	fbb1 f3f3 	udiv	r3, r1, r3
 8009138:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800913a:	4419      	add	r1, r3
 800913c:	f7ff fd36 	bl	8008bac <move_window>
 8009140:	2800      	cmp	r0, #0
 8009142:	d1b8      	bne.n	80090b6 <get_fat.isra.8+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009144:	89a2      	ldrh	r2, [r4, #12]
 8009146:	00b6      	lsls	r6, r6, #2
 8009148:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800914c:	fbb6 f3f2 	udiv	r3, r6, r2
 8009150:	fb02 6613 	mls	r6, r2, r3, r6
 8009154:	4430      	add	r0, r6
 8009156:	f7ff fba9 	bl	80088ac <ld_dword>
 800915a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800915e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8009160:	2001      	movs	r0, #1
}
 8009162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009164 <create_chain>:
{
 8009164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009168:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800916a:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800916c:	460f      	mov	r7, r1
 800916e:	b971      	cbnz	r1, 800918e <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009170:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009172:	b1f6      	cbz	r6, 80091b2 <create_chain+0x4e>
 8009174:	69ab      	ldr	r3, [r5, #24]
 8009176:	429e      	cmp	r6, r3
 8009178:	bf28      	it	cs
 800917a:	2601      	movcs	r6, #1
 800917c:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800917e:	69ab      	ldr	r3, [r5, #24]
			ncl++;							/* Next cluster */
 8009180:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009182:	429c      	cmp	r4, r3
 8009184:	d318      	bcc.n	80091b8 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8009186:	2e01      	cmp	r6, #1
 8009188:	d815      	bhi.n	80091b6 <create_chain+0x52>
 800918a:	2400      	movs	r4, #0
 800918c:	e009      	b.n	80091a2 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800918e:	4628      	mov	r0, r5
 8009190:	f7ff ff78 	bl	8009084 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009194:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009196:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009198:	d937      	bls.n	800920a <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800919a:	1c43      	adds	r3, r0, #1
 800919c:	d104      	bne.n	80091a8 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800919e:	f04f 34ff 	mov.w	r4, #4294967295
}
 80091a2:	4620      	mov	r0, r4
 80091a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80091a8:	69ab      	ldr	r3, [r5, #24]
 80091aa:	4298      	cmp	r0, r3
 80091ac:	d3f9      	bcc.n	80091a2 <create_chain+0x3e>
 80091ae:	463e      	mov	r6, r7
 80091b0:	e7e4      	b.n	800917c <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80091b2:	2601      	movs	r6, #1
 80091b4:	e7e2      	b.n	800917c <create_chain+0x18>
				ncl = 2;
 80091b6:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80091b8:	4621      	mov	r1, r4
 80091ba:	f8d8 0000 	ldr.w	r0, [r8]
 80091be:	f7ff ff61 	bl	8009084 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 80091c2:	b130      	cbz	r0, 80091d2 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80091c4:	2801      	cmp	r0, #1
 80091c6:	d020      	beq.n	800920a <create_chain+0xa6>
 80091c8:	3001      	adds	r0, #1
 80091ca:	d0e8      	beq.n	800919e <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 80091cc:	42b4      	cmp	r4, r6
 80091ce:	d1d6      	bne.n	800917e <create_chain+0x1a>
 80091d0:	e7db      	b.n	800918a <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80091d2:	f04f 32ff 	mov.w	r2, #4294967295
 80091d6:	4621      	mov	r1, r4
 80091d8:	4628      	mov	r0, r5
 80091da:	f7ff febf 	bl	8008f5c <put_fat>
		if (res == FR_OK && clst != 0) {
 80091de:	b990      	cbnz	r0, 8009206 <create_chain+0xa2>
 80091e0:	b957      	cbnz	r7, 80091f8 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091e2:	69aa      	ldr	r2, [r5, #24]
 80091e4:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 80091e6:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091e8:	3a02      	subs	r2, #2
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d90f      	bls.n	800920e <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80091ee:	792b      	ldrb	r3, [r5, #4]
 80091f0:	f043 0301 	orr.w	r3, r3, #1
 80091f4:	712b      	strb	r3, [r5, #4]
 80091f6:	e7d4      	b.n	80091a2 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80091f8:	4622      	mov	r2, r4
 80091fa:	4639      	mov	r1, r7
 80091fc:	4628      	mov	r0, r5
 80091fe:	f7ff fead 	bl	8008f5c <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009202:	2800      	cmp	r0, #0
 8009204:	d0ed      	beq.n	80091e2 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009206:	2801      	cmp	r0, #1
 8009208:	d0c9      	beq.n	800919e <create_chain+0x3a>
 800920a:	2401      	movs	r4, #1
 800920c:	e7c9      	b.n	80091a2 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800920e:	3b01      	subs	r3, #1
 8009210:	616b      	str	r3, [r5, #20]
 8009212:	e7ec      	b.n	80091ee <create_chain+0x8a>

08009214 <remove_chain>:
{
 8009214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009216:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009218:	2d01      	cmp	r5, #1
{
 800921a:	4607      	mov	r7, r0
 800921c:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800921e:	d801      	bhi.n	8009224 <remove_chain+0x10>
 8009220:	2002      	movs	r0, #2
 8009222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8009224:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009226:	69a3      	ldr	r3, [r4, #24]
 8009228:	429d      	cmp	r5, r3
 800922a:	d2f9      	bcs.n	8009220 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800922c:	b12a      	cbz	r2, 800923a <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800922e:	f04f 32ff 	mov.w	r2, #4294967295
 8009232:	4620      	mov	r0, r4
 8009234:	f7ff fe92 	bl	8008f5c <put_fat>
		if (res != FR_OK) return res;
 8009238:	bb08      	cbnz	r0, 800927e <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800923a:	4629      	mov	r1, r5
 800923c:	6838      	ldr	r0, [r7, #0]
 800923e:	f7ff ff21 	bl	8009084 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8009242:	4606      	mov	r6, r0
 8009244:	b908      	cbnz	r0, 800924a <remove_chain+0x36>
	return FR_OK;
 8009246:	2000      	movs	r0, #0
 8009248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800924a:	2801      	cmp	r0, #1
 800924c:	d0e8      	beq.n	8009220 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800924e:	1c43      	adds	r3, r0, #1
 8009250:	d014      	beq.n	800927c <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009252:	2200      	movs	r2, #0
 8009254:	4629      	mov	r1, r5
 8009256:	4620      	mov	r0, r4
 8009258:	f7ff fe80 	bl	8008f5c <put_fat>
			if (res != FR_OK) return res;
 800925c:	b978      	cbnz	r0, 800927e <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800925e:	69a2      	ldr	r2, [r4, #24]
 8009260:	6963      	ldr	r3, [r4, #20]
 8009262:	1e91      	subs	r1, r2, #2
 8009264:	428b      	cmp	r3, r1
 8009266:	d205      	bcs.n	8009274 <remove_chain+0x60>
			fs->free_clst++;
 8009268:	3301      	adds	r3, #1
 800926a:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 800926c:	7923      	ldrb	r3, [r4, #4]
 800926e:	f043 0301 	orr.w	r3, r3, #1
 8009272:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009274:	4296      	cmp	r6, r2
 8009276:	4635      	mov	r5, r6
 8009278:	d3df      	bcc.n	800923a <remove_chain+0x26>
 800927a:	e7e4      	b.n	8009246 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800927c:	2001      	movs	r0, #1
}
 800927e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009280 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009280:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8009282:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8009284:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8009286:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8009288:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800928a:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800928c:	b992      	cbnz	r2, 80092b4 <dir_sdi.constprop.11+0x34>
 800928e:	7823      	ldrb	r3, [r4, #0]
 8009290:	2b02      	cmp	r3, #2
 8009292:	d901      	bls.n	8009298 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 8009294:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009296:	b973      	cbnz	r3, 80092b6 <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009298:	8923      	ldrh	r3, [r4, #8]
 800929a:	b90b      	cbnz	r3, 80092a0 <dir_sdi.constprop.11+0x20>
 800929c:	2002      	movs	r0, #2
 800929e:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 80092a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80092a2:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 80092a4:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 80092a6:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d0f7      	beq.n	800929c <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80092ac:	3434      	adds	r4, #52	; 0x34
 80092ae:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80092b0:	2000      	movs	r0, #0
 80092b2:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80092b4:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80092b6:	8961      	ldrh	r1, [r4, #10]
 80092b8:	89a0      	ldrh	r0, [r4, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80092ba:	4348      	muls	r0, r1
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80092bc:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 80092be:	d10c      	bne.n	80092da <dir_sdi.constprop.11+0x5a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80092c0:	4611      	mov	r1, r2
 80092c2:	6828      	ldr	r0, [r5, #0]
 80092c4:	f7ff fede 	bl	8009084 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092c8:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80092ca:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092cc:	d00b      	beq.n	80092e6 <dir_sdi.constprop.11+0x66>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80092ce:	2801      	cmp	r0, #1
 80092d0:	d9e4      	bls.n	800929c <dir_sdi.constprop.11+0x1c>
 80092d2:	69a3      	ldr	r3, [r4, #24]
 80092d4:	4298      	cmp	r0, r3
 80092d6:	d3f3      	bcc.n	80092c0 <dir_sdi.constprop.11+0x40>
 80092d8:	e7e0      	b.n	800929c <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 80092da:	4619      	mov	r1, r3
 80092dc:	4620      	mov	r0, r4
 80092de:	f7ff fb7d 	bl	80089dc <clust2sect>
 80092e2:	61e8      	str	r0, [r5, #28]
 80092e4:	e7de      	b.n	80092a4 <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092e6:	2001      	movs	r0, #1
}
 80092e8:	bd38      	pop	{r3, r4, r5, pc}

080092ea <dir_next>:
{
 80092ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092ee:	69c3      	ldr	r3, [r0, #28]
{
 80092f0:	4605      	mov	r5, r0
 80092f2:	4688      	mov	r8, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092f4:	b1b3      	cbz	r3, 8009324 <dir_next+0x3a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80092f6:	6947      	ldr	r7, [r0, #20]
 80092f8:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092fa:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 80092fe:	d211      	bcs.n	8009324 <dir_next+0x3a>
	FATFS *fs = dp->obj.fs;
 8009300:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009302:	89a2      	ldrh	r2, [r4, #12]
 8009304:	fbb7 f0f2 	udiv	r0, r7, r2
 8009308:	fb02 7210 	mls	r2, r2, r0, r7
 800930c:	2a00      	cmp	r2, #0
 800930e:	d14f      	bne.n	80093b0 <dir_next+0xc6>
		if (!dp->clust) {		/* Static table */
 8009310:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 8009312:	3301      	adds	r3, #1
 8009314:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 8009316:	b941      	cbnz	r1, 800932a <dir_next+0x40>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009318:	8923      	ldrh	r3, [r4, #8]
 800931a:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 800931e:	d847      	bhi.n	80093b0 <dir_next+0xc6>
				dp->sect = 0; return FR_NO_FILE;
 8009320:	2300      	movs	r3, #0
 8009322:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009324:	2004      	movs	r0, #4
 8009326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800932a:	8963      	ldrh	r3, [r4, #10]
 800932c:	3b01      	subs	r3, #1
 800932e:	4203      	tst	r3, r0
 8009330:	d13e      	bne.n	80093b0 <dir_next+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009332:	4620      	mov	r0, r4
 8009334:	f7ff fea6 	bl	8009084 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009338:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800933a:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800933c:	d802      	bhi.n	8009344 <dir_next+0x5a>
 800933e:	2002      	movs	r0, #2
 8009340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009344:	1c42      	adds	r2, r0, #1
 8009346:	d102      	bne.n	800934e <dir_next+0x64>
 8009348:	2001      	movs	r0, #1
 800934a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800934e:	69a3      	ldr	r3, [r4, #24]
 8009350:	4298      	cmp	r0, r3
 8009352:	d327      	bcc.n	80093a4 <dir_next+0xba>
					if (!stretch) {								/* If no stretch, report EOT */
 8009354:	f1b8 0f00 	cmp.w	r8, #0
 8009358:	d0e2      	beq.n	8009320 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800935a:	69a9      	ldr	r1, [r5, #24]
 800935c:	4628      	mov	r0, r5
 800935e:	f7ff ff01 	bl	8009164 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009362:	4606      	mov	r6, r0
 8009364:	2800      	cmp	r0, #0
 8009366:	d03d      	beq.n	80093e4 <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009368:	2801      	cmp	r0, #1
 800936a:	d0e8      	beq.n	800933e <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800936c:	1c43      	adds	r3, r0, #1
 800936e:	d0eb      	beq.n	8009348 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009370:	4620      	mov	r0, r4
 8009372:	f7ff fbcb 	bl	8008b0c <sync_window>
 8009376:	4680      	mov	r8, r0
 8009378:	2800      	cmp	r0, #0
 800937a:	d1e5      	bne.n	8009348 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800937c:	4601      	mov	r1, r0
 800937e:	89a2      	ldrh	r2, [r4, #12]
 8009380:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8009384:	f7ff faa2 	bl	80088cc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009388:	4631      	mov	r1, r6
 800938a:	4620      	mov	r0, r4
 800938c:	f7ff fb26 	bl	80089dc <clust2sect>
						fs->wflag = 1;
 8009390:	f04f 0901 	mov.w	r9, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009394:	6320      	str	r0, [r4, #48]	; 0x30
 8009396:	8963      	ldrh	r3, [r4, #10]
 8009398:	4598      	cmp	r8, r3
 800939a:	d316      	bcc.n	80093ca <dir_next+0xe0>
					fs->winsect -= n;							/* Restore window offset */
 800939c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800939e:	eba3 0308 	sub.w	r3, r3, r8
 80093a2:	6323      	str	r3, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 80093a4:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 80093a6:	4631      	mov	r1, r6
 80093a8:	4620      	mov	r0, r4
 80093aa:	f7ff fb17 	bl	80089dc <clust2sect>
 80093ae:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80093b0:	89a1      	ldrh	r1, [r4, #12]
	dp->dptr = ofs;						/* Current entry */
 80093b2:	616f      	str	r7, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80093b4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80093b8:	fbb7 f2f1 	udiv	r2, r7, r1
 80093bc:	fb01 7712 	mls	r7, r1, r2, r7
 80093c0:	441f      	add	r7, r3
 80093c2:	622f      	str	r7, [r5, #32]
	return FR_OK;
 80093c4:	2000      	movs	r0, #0
 80093c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						fs->wflag = 1;
 80093ca:	f884 9003 	strb.w	r9, [r4, #3]
 80093ce:	4620      	mov	r0, r4
 80093d0:	f7ff fb79 	bl	8008ac6 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80093d4:	2800      	cmp	r0, #0
 80093d6:	d1b7      	bne.n	8009348 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80093da:	3301      	adds	r3, #1
 80093dc:	f108 0801 	add.w	r8, r8, #1
 80093e0:	6323      	str	r3, [r4, #48]	; 0x30
 80093e2:	e7d8      	b.n	8009396 <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80093e4:	2007      	movs	r0, #7
}
 80093e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080093ec <follow_path>:
{
 80093ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 80093f0:	6806      	ldr	r6, [r0, #0]
{
 80093f2:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80093f4:	780b      	ldrb	r3, [r1, #0]
 80093f6:	2b2f      	cmp	r3, #47	; 0x2f
 80093f8:	460d      	mov	r5, r1
 80093fa:	f101 0101 	add.w	r1, r1, #1
 80093fe:	d0f9      	beq.n	80093f4 <follow_path+0x8>
 8009400:	2b5c      	cmp	r3, #92	; 0x5c
 8009402:	d0f7      	beq.n	80093f4 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8009404:	2300      	movs	r3, #0
 8009406:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009408:	782b      	ldrb	r3, [r5, #0]
 800940a:	2b1f      	cmp	r3, #31
 800940c:	d959      	bls.n	80094c2 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800940e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8009570 <follow_path+0x184>
	p = *path; sfn = dp->fn;
 8009412:	f104 0724 	add.w	r7, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8009416:	220b      	movs	r2, #11
 8009418:	2120      	movs	r1, #32
 800941a:	4638      	mov	r0, r7
 800941c:	f7ff fa56 	bl	80088cc <mem_set>
	si = i = 0; ni = 8;
 8009420:	2200      	movs	r2, #0
 8009422:	f105 3eff 	add.w	lr, r5, #4294967295
 8009426:	4611      	mov	r1, r2
 8009428:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 800942a:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 800942e:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8009430:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009434:	d90b      	bls.n	800944e <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009436:	2b2f      	cmp	r3, #47	; 0x2f
 8009438:	d14b      	bne.n	80094d2 <follow_path+0xe6>
 800943a:	1868      	adds	r0, r5, r1
 800943c:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800943e:	f810 eb01 	ldrb.w	lr, [r0], #1
 8009442:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 8009446:	d0f9      	beq.n	800943c <follow_path+0x50>
 8009448:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 800944c:	d0f6      	beq.n	800943c <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 800944e:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009450:	2a00      	cmp	r2, #0
 8009452:	d054      	beq.n	80094fe <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009454:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8009458:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800945c:	2ae5      	cmp	r2, #229	; 0xe5
 800945e:	bf04      	itt	eq
 8009460:	2205      	moveq	r2, #5
 8009462:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009466:	2b21      	cmp	r3, #33	; 0x21
 8009468:	bf34      	ite	cc
 800946a:	2304      	movcc	r3, #4
 800946c:	2300      	movcs	r3, #0
 800946e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009472:	4620      	mov	r0, r4
 8009474:	f7ff ff04 	bl	8009280 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8009478:	2800      	cmp	r0, #0
 800947a:	d145      	bne.n	8009508 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 800947c:	69e1      	ldr	r1, [r4, #28]
 800947e:	4648      	mov	r0, r9
 8009480:	f7ff fb94 	bl	8008bac <move_window>
		if (res != FR_OK) break;
 8009484:	2800      	cmp	r0, #0
 8009486:	d13f      	bne.n	8009508 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 8009488:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800948a:	781a      	ldrb	r2, [r3, #0]
 800948c:	2a00      	cmp	r2, #0
 800948e:	d046      	beq.n	800951e <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009490:	7ada      	ldrb	r2, [r3, #11]
 8009492:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8009496:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009498:	7ada      	ldrb	r2, [r3, #11]
 800949a:	0711      	lsls	r1, r2, #28
 800949c:	d40c      	bmi.n	80094b8 <follow_path+0xcc>
 800949e:	f103 0e0b 	add.w	lr, r3, #11
 80094a2:	4639      	mov	r1, r7
		r = *d++ - *s++;
 80094a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094a8:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 80094ac:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 80094ae:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 80094b2:	d027      	beq.n	8009504 <follow_path+0x118>
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	d0f5      	beq.n	80094a4 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 80094b8:	2100      	movs	r1, #0
 80094ba:	4620      	mov	r0, r4
 80094bc:	f7ff ff15 	bl	80092ea <dir_next>
 80094c0:	e7da      	b.n	8009478 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 80094c2:	2380      	movs	r3, #128	; 0x80
 80094c4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80094c8:	4620      	mov	r0, r4
}
 80094ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 80094ce:	f7ff bed7 	b.w	8009280 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80094d2:	2b5c      	cmp	r3, #92	; 0x5c
 80094d4:	d0b1      	beq.n	800943a <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80094d6:	2b2e      	cmp	r3, #46	; 0x2e
 80094d8:	d039      	beq.n	800954e <follow_path+0x162>
 80094da:	4290      	cmp	r0, r2
 80094dc:	d90f      	bls.n	80094fe <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 80094de:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80094e2:	bf18      	it	ne
 80094e4:	3b80      	subne	r3, #128	; 0x80
 80094e6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009574 <follow_path+0x188>
 80094ea:	bf18      	it	ne
 80094ec:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 80094f0:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 80094f4:	f1bc 0f00 	cmp.w	ip, #0
 80094f8:	d02e      	beq.n	8009558 <follow_path+0x16c>
 80094fa:	4563      	cmp	r3, ip
 80094fc:	d1f8      	bne.n	80094f0 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80094fe:	2006      	movs	r0, #6
	return res;
 8009500:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009504:	2a00      	cmp	r2, #0
 8009506:	d1d7      	bne.n	80094b8 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 8009508:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800950c:	b148      	cbz	r0, 8009522 <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800950e:	2804      	cmp	r0, #4
 8009510:	d12c      	bne.n	800956c <follow_path+0x180>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009512:	f013 0f04 	tst.w	r3, #4
 8009516:	bf08      	it	eq
 8009518:	2005      	moveq	r0, #5
 800951a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800951e:	2004      	movs	r0, #4
 8009520:	e7f2      	b.n	8009508 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009522:	075a      	lsls	r2, r3, #29
 8009524:	d422      	bmi.n	800956c <follow_path+0x180>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009526:	79a3      	ldrb	r3, [r4, #6]
 8009528:	06db      	lsls	r3, r3, #27
 800952a:	d50d      	bpl.n	8009548 <follow_path+0x15c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800952c:	89b2      	ldrh	r2, [r6, #12]
 800952e:	6960      	ldr	r0, [r4, #20]
 8009530:	fbb0 f3f2 	udiv	r3, r0, r2
 8009534:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8009538:	fb02 0313 	mls	r3, r2, r3, r0
 800953c:	4419      	add	r1, r3
 800953e:	7830      	ldrb	r0, [r6, #0]
 8009540:	f7ff faa7 	bl	8008a92 <ld_clust.isra.1>
 8009544:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009546:	e764      	b.n	8009412 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009548:	2005      	movs	r0, #5
 800954a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800954e:	280b      	cmp	r0, #11
 8009550:	d0d5      	beq.n	80094fe <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8009552:	2208      	movs	r2, #8
 8009554:	200b      	movs	r0, #11
 8009556:	e768      	b.n	800942a <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009558:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 800955c:	f1bc 0f19 	cmp.w	ip, #25
 8009560:	d801      	bhi.n	8009566 <follow_path+0x17a>
 8009562:	3b20      	subs	r3, #32
 8009564:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8009566:	54bb      	strb	r3, [r7, r2]
 8009568:	3201      	adds	r2, #1
 800956a:	e75e      	b.n	800942a <follow_path+0x3e>
}
 800956c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009570:	08026982 	.word	0x08026982
 8009574:	08026a01 	.word	0x08026a01

08009578 <dir_register>:
{
 8009578:	b570      	push	{r4, r5, r6, lr}
 800957a:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800957c:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800957e:	f7ff fe7f 	bl	8009280 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 8009582:	4604      	mov	r4, r0
 8009584:	bb28      	cbnz	r0, 80095d2 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8009586:	69e9      	ldr	r1, [r5, #28]
 8009588:	4630      	mov	r0, r6
 800958a:	f7ff fb0f 	bl	8008bac <move_window>
			if (res != FR_OK) break;
 800958e:	4604      	mov	r4, r0
 8009590:	b9f8      	cbnz	r0, 80095d2 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009592:	6a2b      	ldr	r3, [r5, #32]
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	2be5      	cmp	r3, #229	; 0xe5
 8009598:	d114      	bne.n	80095c4 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 800959a:	69e9      	ldr	r1, [r5, #28]
 800959c:	4630      	mov	r0, r6
 800959e:	f7ff fb05 	bl	8008bac <move_window>
		if (res == FR_OK) {
 80095a2:	4604      	mov	r4, r0
 80095a4:	b960      	cbnz	r0, 80095c0 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80095a6:	4601      	mov	r1, r0
 80095a8:	2220      	movs	r2, #32
 80095aa:	6a28      	ldr	r0, [r5, #32]
 80095ac:	f7ff f98e 	bl	80088cc <mem_set>
 80095b0:	220b      	movs	r2, #11
 80095b2:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80095b6:	6a28      	ldr	r0, [r5, #32]
 80095b8:	f7ff fa62 	bl	8008a80 <mem_cpy.part.0>
			fs->wflag = 1;
 80095bc:	2301      	movs	r3, #1
 80095be:	70f3      	strb	r3, [r6, #3]
}
 80095c0:	4620      	mov	r0, r4
 80095c2:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d0e8      	beq.n	800959a <dir_register+0x22>
			res = dir_next(dp, 1);
 80095c8:	2101      	movs	r1, #1
 80095ca:	4628      	mov	r0, r5
 80095cc:	f7ff fe8d 	bl	80092ea <dir_next>
 80095d0:	e7d7      	b.n	8009582 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80095d2:	2c04      	cmp	r4, #4
 80095d4:	bf08      	it	eq
 80095d6:	2407      	moveq	r4, #7
 80095d8:	e7f2      	b.n	80095c0 <dir_register+0x48>
	...

080095dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80095dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80095de:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80095e0:	a804      	add	r0, sp, #16
{
 80095e2:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 80095e4:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 80095e8:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80095ea:	f7ff fa16 	bl	8008a1a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80095ee:	1e05      	subs	r5, r0, #0
 80095f0:	db1f      	blt.n	8009632 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80095f2:	4912      	ldr	r1, [pc, #72]	; (800963c <f_mount+0x60>)
 80095f4:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 80095f8:	b15c      	cbz	r4, 8009612 <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80095fa:	4b11      	ldr	r3, [pc, #68]	; (8009640 <f_mount+0x64>)
 80095fc:	681a      	ldr	r2, [r3, #0]
 80095fe:	4294      	cmp	r4, r2
 8009600:	bf04      	itt	eq
 8009602:	2200      	moveq	r2, #0
 8009604:	601a      	streq	r2, [r3, #0]
 8009606:	691a      	ldr	r2, [r3, #16]
 8009608:	2000      	movs	r0, #0
 800960a:	4294      	cmp	r4, r2
 800960c:	bf08      	it	eq
 800960e:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009610:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8009612:	9801      	ldr	r0, [sp, #4]
 8009614:	b108      	cbz	r0, 800961a <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009616:	2300      	movs	r3, #0
 8009618:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800961a:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800961e:	b130      	cbz	r0, 800962e <f_mount+0x52>
 8009620:	2e01      	cmp	r6, #1
 8009622:	d108      	bne.n	8009636 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009624:	2200      	movs	r2, #0
 8009626:	a901      	add	r1, sp, #4
 8009628:	4668      	mov	r0, sp
 800962a:	f7ff fb1b 	bl	8008c64 <find_volume>
	LEAVE_FF(fs, res);
}
 800962e:	b004      	add	sp, #16
 8009630:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8009632:	200b      	movs	r0, #11
 8009634:	e7fb      	b.n	800962e <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009636:	2000      	movs	r0, #0
 8009638:	e7f9      	b.n	800962e <f_mount+0x52>
 800963a:	bf00      	nop
 800963c:	20001160 	.word	0x20001160
 8009640:	20001164 	.word	0x20001164

08009644 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009648:	b090      	sub	sp, #64	; 0x40
 800964a:	4690      	mov	r8, r2
 800964c:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800964e:	4604      	mov	r4, r0
 8009650:	2800      	cmp	r0, #0
 8009652:	f000 80d1 	beq.w	80097f8 <f_open+0x1b4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009656:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800965a:	462a      	mov	r2, r5
 800965c:	a903      	add	r1, sp, #12
 800965e:	a801      	add	r0, sp, #4
 8009660:	f7ff fb00 	bl	8008c64 <find_volume>
	if (res == FR_OK) {
 8009664:	4607      	mov	r7, r0
 8009666:	bb38      	cbnz	r0, 80096b8 <f_open+0x74>
		dj.obj.fs = fs;
 8009668:	ae10      	add	r6, sp, #64	; 0x40
 800966a:	9b03      	ldr	r3, [sp, #12]
 800966c:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009670:	9901      	ldr	r1, [sp, #4]
 8009672:	4630      	mov	r0, r6
 8009674:	f7ff feba 	bl	80093ec <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009678:	b958      	cbnz	r0, 8009692 <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800967a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800967e:	2b00      	cmp	r3, #0
 8009680:	db1e      	blt.n	80096c0 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009682:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8009686:	bf14      	ite	ne
 8009688:	2101      	movne	r1, #1
 800968a:	2100      	moveq	r1, #0
 800968c:	4630      	mov	r0, r6
 800968e:	f7ff f923 	bl	80088d8 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009692:	f018 0f1c 	tst.w	r8, #28
 8009696:	d073      	beq.n	8009780 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8009698:	b1a0      	cbz	r0, 80096c4 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800969a:	2804      	cmp	r0, #4
 800969c:	d109      	bne.n	80096b2 <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800969e:	4b73      	ldr	r3, [pc, #460]	; (800986c <f_open+0x228>)
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	2a00      	cmp	r2, #0
 80096a4:	f000 80de 	beq.w	8009864 <f_open+0x220>
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 80da 	beq.w	8009864 <f_open+0x220>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80096b0:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80096b2:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80096b6:	b170      	cbz	r0, 80096d6 <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80096b8:	2300      	movs	r3, #0
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	4607      	mov	r7, r0
 80096be:	e095      	b.n	80097ec <f_open+0x1a8>
				res = FR_INVALID_NAME;
 80096c0:	2006      	movs	r0, #6
 80096c2:	e7e6      	b.n	8009692 <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80096c4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80096c8:	f013 0f11 	tst.w	r3, #17
 80096cc:	d163      	bne.n	8009796 <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80096ce:	f018 0f04 	tst.w	r8, #4
 80096d2:	f040 80c1 	bne.w	8009858 <f_open+0x214>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80096d6:	0728      	lsls	r0, r5, #28
 80096d8:	d53c      	bpl.n	8009754 <f_open+0x110>
				dw = GET_FATTIME();
 80096da:	f014 fbdd 	bl	801de98 <get_fattime>
 80096de:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80096e0:	4601      	mov	r1, r0
 80096e2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80096e4:	300e      	adds	r0, #14
 80096e6:	f7ff f8e9 	bl	80088bc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80096ea:	980c      	ldr	r0, [sp, #48]	; 0x30
 80096ec:	4611      	mov	r1, r2
 80096ee:	3016      	adds	r0, #22
 80096f0:	f7ff f8e4 	bl	80088bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80096f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80096f6:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80096fa:	2220      	movs	r2, #32
 80096fc:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80096fe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009702:	f899 0000 	ldrb.w	r0, [r9]
 8009706:	4651      	mov	r1, sl
 8009708:	f7ff f9c3 	bl	8008a92 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800970c:	2200      	movs	r2, #0
 800970e:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009710:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009712:	4648      	mov	r0, r9
 8009714:	f7ff f9cb 	bl	8008aae <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800971a:	2200      	movs	r2, #0
 800971c:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800971e:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8009720:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8009722:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8009724:	9b03      	ldr	r3, [sp, #12]
 8009726:	2101      	movs	r1, #1
 8009728:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800972a:	f1b8 0f00 	cmp.w	r8, #0
 800972e:	d011      	beq.n	8009754 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8009730:	4641      	mov	r1, r8
 8009732:	4630      	mov	r0, r6
						dw = fs->winsect;
 8009734:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8009738:	f7ff fd6c 	bl	8009214 <remove_chain>
						if (res == FR_OK) {
 800973c:	2800      	cmp	r0, #0
 800973e:	d1bb      	bne.n	80096b8 <f_open+0x74>
							res = move_window(fs, dw);
 8009740:	4649      	mov	r1, r9
 8009742:	9803      	ldr	r0, [sp, #12]
 8009744:	f7ff fa32 	bl	8008bac <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009748:	9a03      	ldr	r2, [sp, #12]
 800974a:	f108 33ff 	add.w	r3, r8, #4294967295
 800974e:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 8009750:	2800      	cmp	r0, #0
 8009752:	d1b1      	bne.n	80096b8 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009754:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009756:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975a:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 800975c:	bf48      	it	mi
 800975e:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009762:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8009766:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009768:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800976a:	bf14      	ite	ne
 800976c:	2101      	movne	r1, #1
 800976e:	2100      	moveq	r1, #0
 8009770:	4630      	mov	r0, r6
 8009772:	f7ff f8df 	bl	8008934 <inc_lock>
 8009776:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009778:	2800      	cmp	r0, #0
 800977a:	d13f      	bne.n	80097fc <f_open+0x1b8>
 800977c:	2002      	movs	r0, #2
 800977e:	e79b      	b.n	80096b8 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8009780:	2800      	cmp	r0, #0
 8009782:	d199      	bne.n	80096b8 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009784:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009788:	06da      	lsls	r2, r3, #27
 800978a:	d467      	bmi.n	800985c <f_open+0x218>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800978c:	f018 0f02 	tst.w	r8, #2
 8009790:	d0e0      	beq.n	8009754 <f_open+0x110>
 8009792:	07db      	lsls	r3, r3, #31
 8009794:	d5de      	bpl.n	8009754 <f_open+0x110>
					res = FR_DENIED;
 8009796:	2007      	movs	r0, #7
 8009798:	e78e      	b.n	80096b8 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 800979a:	6820      	ldr	r0, [r4, #0]
 800979c:	f7ff fc72 	bl	8009084 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 80097a0:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80097a2:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 80097a4:	d926      	bls.n	80097f4 <f_open+0x1b0>
 80097a6:	1c42      	adds	r2, r0, #1
 80097a8:	4250      	negs	r0, r2
 80097aa:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80097ac:	eba5 0508 	sub.w	r5, r5, r8
 80097b0:	2800      	cmp	r0, #0
 80097b2:	d04d      	beq.n	8009850 <f_open+0x20c>
				fp->clust = clst;
 80097b4:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80097b6:	2800      	cmp	r0, #0
 80097b8:	f47f af7e 	bne.w	80096b8 <f_open+0x74>
 80097bc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80097c0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80097c4:	fbb5 f2f3 	udiv	r2, r5, r3
 80097c8:	fb03 5512 	mls	r5, r3, r2, r5
 80097cc:	b175      	cbz	r5, 80097ec <f_open+0x1a8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80097ce:	4640      	mov	r0, r8
 80097d0:	f7ff f904 	bl	80089dc <clust2sect>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d0d1      	beq.n	800977c <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80097d8:	4402      	add	r2, r0
 80097da:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80097dc:	2301      	movs	r3, #1
 80097de:	4631      	mov	r1, r6
 80097e0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80097e4:	f7ff f838 	bl	8008858 <disk_read>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d139      	bne.n	8009860 <f_open+0x21c>

	LEAVE_FF(fs, res);
}
 80097ec:	4638      	mov	r0, r7
 80097ee:	b010      	add	sp, #64	; 0x40
 80097f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 80097f4:	2002      	movs	r0, #2
 80097f6:	e7d9      	b.n	80097ac <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 80097f8:	2709      	movs	r7, #9
 80097fa:	e7f7      	b.n	80097ec <f_open+0x1a8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80097fc:	9e03      	ldr	r6, [sp, #12]
 80097fe:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8009802:	7830      	ldrb	r0, [r6, #0]
 8009804:	4641      	mov	r1, r8
 8009806:	f7ff f944 	bl	8008a92 <ld_clust.isra.1>
 800980a:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800980c:	f108 001c 	add.w	r0, r8, #28
 8009810:	f7ff f84c 	bl	80088ac <ld_dword>
			fp->obj.id = fs->id;
 8009814:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009816:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009818:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800981a:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800981e:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8009820:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009822:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8009824:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8009826:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009828:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800982a:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800982c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009830:	4630      	mov	r0, r6
 8009832:	f7ff f84b 	bl	80088cc <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009836:	06ab      	lsls	r3, r5, #26
 8009838:	d5d8      	bpl.n	80097ec <f_open+0x1a8>
 800983a:	68e5      	ldr	r5, [r4, #12]
 800983c:	2d00      	cmp	r5, #0
 800983e:	d0d5      	beq.n	80097ec <f_open+0x1a8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009840:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009842:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009844:	895a      	ldrh	r2, [r3, #10]
 8009846:	f8b3 800c 	ldrh.w	r8, [r3, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800984a:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800984c:	fb08 f802 	mul.w	r8, r8, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009850:	45a8      	cmp	r8, r5
 8009852:	d3a2      	bcc.n	800979a <f_open+0x156>
 8009854:	2000      	movs	r0, #0
 8009856:	e7ad      	b.n	80097b4 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009858:	2008      	movs	r0, #8
 800985a:	e72d      	b.n	80096b8 <f_open+0x74>
					res = FR_NO_FILE;
 800985c:	2004      	movs	r0, #4
 800985e:	e72b      	b.n	80096b8 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009860:	2001      	movs	r0, #1
 8009862:	e729      	b.n	80096b8 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009864:	4630      	mov	r0, r6
 8009866:	f7ff fe87 	bl	8009578 <dir_register>
 800986a:	e722      	b.n	80096b2 <f_open+0x6e>
 800986c:	20001164 	.word	0x20001164

08009870 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	469b      	mov	fp, r3
 8009876:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8009878:	2300      	movs	r3, #0
{
 800987a:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 800987c:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009880:	a903      	add	r1, sp, #12
{
 8009882:	4604      	mov	r4, r0
 8009884:	4690      	mov	r8, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009886:	f7ff f8e0 	bl	8008a4a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800988a:	4605      	mov	r5, r0
 800988c:	2800      	cmp	r0, #0
 800988e:	d132      	bne.n	80098f6 <f_write+0x86>
 8009890:	7d65      	ldrb	r5, [r4, #21]
 8009892:	bb85      	cbnz	r5, 80098f6 <f_write+0x86>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009894:	7d23      	ldrb	r3, [r4, #20]
 8009896:	079a      	lsls	r2, r3, #30
 8009898:	f140 80be 	bpl.w	8009a18 <f_write+0x1a8>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800989c:	69a3      	ldr	r3, [r4, #24]
 800989e:	eb13 0f08 	cmn.w	r3, r8
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80098a2:	bf28      	it	cs
 80098a4:	ea6f 0803 	mvncs.w	r8, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80098a8:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80098ac:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 80098ae:	f1b8 0f00 	cmp.w	r8, #0
 80098b2:	d01c      	beq.n	80098ee <f_write+0x7e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80098b4:	9803      	ldr	r0, [sp, #12]
 80098b6:	69a1      	ldr	r1, [r4, #24]
 80098b8:	8983      	ldrh	r3, [r0, #12]
 80098ba:	fbb1 f2f3 	udiv	r2, r1, r3
 80098be:	fb03 1312 	mls	r3, r3, r2, r1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f040 8091 	bne.w	80099ea <f_write+0x17a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80098c8:	8943      	ldrh	r3, [r0, #10]
 80098ca:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 80098cc:	4013      	ands	r3, r2
 80098ce:	9301      	str	r3, [sp, #4]
 80098d0:	d124      	bne.n	800991c <f_write+0xac>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80098d2:	b931      	cbnz	r1, 80098e2 <f_write+0x72>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80098d4:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80098d6:	b9a0      	cbnz	r0, 8009902 <f_write+0x92>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80098d8:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80098da:	4620      	mov	r0, r4
 80098dc:	f7ff fc42 	bl	8009164 <create_chain>
 80098e0:	e004      	b.n	80098ec <f_write+0x7c>
					if (fp->cltbl) {
 80098e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098e4:	b15b      	cbz	r3, 80098fe <f_write+0x8e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80098e6:	4620      	mov	r0, r4
 80098e8:	f7ff f883 	bl	80089f2 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80098ec:	b948      	cbnz	r0, 8009902 <f_write+0x92>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80098ee:	7d23      	ldrb	r3, [r4, #20]
 80098f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098f4:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 80098f6:	4628      	mov	r0, r5
 80098f8:	b005      	add	sp, #20
 80098fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80098fe:	69e1      	ldr	r1, [r4, #28]
 8009900:	e7eb      	b.n	80098da <f_write+0x6a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009902:	2801      	cmp	r0, #1
 8009904:	d102      	bne.n	800990c <f_write+0x9c>
 8009906:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009908:	7565      	strb	r5, [r4, #21]
 800990a:	e7f4      	b.n	80098f6 <f_write+0x86>
 800990c:	1c43      	adds	r3, r0, #1
 800990e:	d101      	bne.n	8009914 <f_write+0xa4>
 8009910:	2501      	movs	r5, #1
 8009912:	e7f9      	b.n	8009908 <f_write+0x98>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009914:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8009916:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009918:	b903      	cbnz	r3, 800991c <f_write+0xac>
 800991a:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800991c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009920:	2b00      	cmp	r3, #0
 8009922:	da0c      	bge.n	800993e <f_write+0xce>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009924:	9803      	ldr	r0, [sp, #12]
 8009926:	6a22      	ldr	r2, [r4, #32]
 8009928:	9900      	ldr	r1, [sp, #0]
 800992a:	7840      	ldrb	r0, [r0, #1]
 800992c:	2301      	movs	r3, #1
 800992e:	f7fe ffa1 	bl	8008874 <disk_write>
 8009932:	2800      	cmp	r0, #0
 8009934:	d1ec      	bne.n	8009910 <f_write+0xa0>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009936:	7d23      	ldrb	r3, [r4, #20]
 8009938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800993c:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800993e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8009942:	69e1      	ldr	r1, [r4, #28]
 8009944:	4650      	mov	r0, sl
 8009946:	f7ff f849 	bl	80089dc <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800994a:	2800      	cmp	r0, #0
 800994c:	d0db      	beq.n	8009906 <f_write+0x96>
			sect += csect;
 800994e:	9b01      	ldr	r3, [sp, #4]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009950:	f8ba 700c 	ldrh.w	r7, [sl, #12]
 8009954:	fbb8 f7f7 	udiv	r7, r8, r7
			sect += csect;
 8009958:	181e      	adds	r6, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800995a:	2f00      	cmp	r7, #0
 800995c:	d034      	beq.n	80099c8 <f_write+0x158>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800995e:	9a01      	ldr	r2, [sp, #4]
 8009960:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009964:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009968:	443a      	add	r2, r7
 800996a:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800996c:	bf84      	itt	hi
 800996e:	9a01      	ldrhi	r2, [sp, #4]
 8009970:	1a9f      	subhi	r7, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009972:	463b      	mov	r3, r7
 8009974:	4632      	mov	r2, r6
 8009976:	4649      	mov	r1, r9
 8009978:	f7fe ff7c 	bl	8008874 <disk_write>
 800997c:	2800      	cmp	r0, #0
 800997e:	d1c7      	bne.n	8009910 <f_write+0xa0>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009980:	6a21      	ldr	r1, [r4, #32]
 8009982:	1b89      	subs	r1, r1, r6
 8009984:	428f      	cmp	r7, r1
 8009986:	d90b      	bls.n	80099a0 <f_write+0x130>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009988:	9b03      	ldr	r3, [sp, #12]
 800998a:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 800998c:	b122      	cbz	r2, 8009998 <f_write+0x128>
 800998e:	fb02 9101 	mla	r1, r2, r1, r9
 8009992:	9800      	ldr	r0, [sp, #0]
 8009994:	f7ff f874 	bl	8008a80 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009998:	7d23      	ldrb	r3, [r4, #20]
 800999a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800999e:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80099a0:	9b03      	ldr	r3, [sp, #12]
 80099a2:	899b      	ldrh	r3, [r3, #12]
 80099a4:	435f      	muls	r7, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80099a6:	69a3      	ldr	r3, [r4, #24]
 80099a8:	68e2      	ldr	r2, [r4, #12]
 80099aa:	443b      	add	r3, r7
 80099ac:	61a3      	str	r3, [r4, #24]
 80099ae:	429a      	cmp	r2, r3
 80099b0:	bf2c      	ite	cs
 80099b2:	60e2      	strcs	r2, [r4, #12]
 80099b4:	60e3      	strcc	r3, [r4, #12]
 80099b6:	f8db 3000 	ldr.w	r3, [fp]
 80099ba:	443b      	add	r3, r7
 80099bc:	44b9      	add	r9, r7
 80099be:	f8cb 3000 	str.w	r3, [fp]
 80099c2:	eba8 0807 	sub.w	r8, r8, r7
 80099c6:	e772      	b.n	80098ae <f_write+0x3e>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80099c8:	6a23      	ldr	r3, [r4, #32]
 80099ca:	429e      	cmp	r6, r3
 80099cc:	d00c      	beq.n	80099e8 <f_write+0x178>
 80099ce:	69a2      	ldr	r2, [r4, #24]
 80099d0:	68e3      	ldr	r3, [r4, #12]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d208      	bcs.n	80099e8 <f_write+0x178>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80099d6:	2301      	movs	r3, #1
 80099d8:	4632      	mov	r2, r6
 80099da:	9900      	ldr	r1, [sp, #0]
 80099dc:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80099e0:	f7fe ff3a 	bl	8008858 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d193      	bne.n	8009910 <f_write+0xa0>
			fp->sect = sect;
 80099e8:	6226      	str	r6, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80099ea:	9b03      	ldr	r3, [sp, #12]
 80099ec:	899f      	ldrh	r7, [r3, #12]
 80099ee:	69a3      	ldr	r3, [r4, #24]
 80099f0:	fbb3 f0f7 	udiv	r0, r3, r7
 80099f4:	fb07 3010 	mls	r0, r7, r0, r3
 80099f8:	1a3f      	subs	r7, r7, r0
 80099fa:	4547      	cmp	r7, r8
 80099fc:	bf28      	it	cs
 80099fe:	4647      	movcs	r7, r8
	if (cnt) {
 8009a00:	b12f      	cbz	r7, 8009a0e <f_write+0x19e>
 8009a02:	9b00      	ldr	r3, [sp, #0]
 8009a04:	463a      	mov	r2, r7
 8009a06:	4649      	mov	r1, r9
 8009a08:	4418      	add	r0, r3
 8009a0a:	f7ff f839 	bl	8008a80 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8009a0e:	7d23      	ldrb	r3, [r4, #20]
 8009a10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a14:	7523      	strb	r3, [r4, #20]
 8009a16:	e7c6      	b.n	80099a6 <f_write+0x136>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009a18:	2507      	movs	r5, #7
 8009a1a:	e76c      	b.n	80098f6 <f_write+0x86>

08009a1c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009a1e:	a901      	add	r1, sp, #4
{
 8009a20:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009a22:	f7ff f812 	bl	8008a4a <validate>
	if (res == FR_OK) {
 8009a26:	4605      	mov	r5, r0
 8009a28:	2800      	cmp	r0, #0
 8009a2a:	d13a      	bne.n	8009aa2 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009a2c:	7d23      	ldrb	r3, [r4, #20]
 8009a2e:	065a      	lsls	r2, r3, #25
 8009a30:	d537      	bpl.n	8009aa2 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009a32:	061b      	lsls	r3, r3, #24
 8009a34:	d50c      	bpl.n	8009a50 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009a36:	9801      	ldr	r0, [sp, #4]
 8009a38:	6a22      	ldr	r2, [r4, #32]
 8009a3a:	7840      	ldrb	r0, [r0, #1]
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8009a42:	f7fe ff17 	bl	8008874 <disk_write>
 8009a46:	bb78      	cbnz	r0, 8009aa8 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009a48:	7d23      	ldrb	r3, [r4, #20]
 8009a4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a4e:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009a50:	f014 fa22 	bl	801de98 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009a54:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8009a56:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8009a58:	9801      	ldr	r0, [sp, #4]
 8009a5a:	f7ff f8a7 	bl	8008bac <move_window>
				if (res == FR_OK) {
 8009a5e:	4605      	mov	r5, r0
 8009a60:	b9f8      	cbnz	r0, 8009aa2 <f_sync+0x86>
					dir = fp->dir_ptr;
 8009a62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009a64:	7af3      	ldrb	r3, [r6, #11]
 8009a66:	f043 0320 	orr.w	r3, r3, #32
 8009a6a:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009a6c:	68a2      	ldr	r2, [r4, #8]
 8009a6e:	6820      	ldr	r0, [r4, #0]
 8009a70:	4631      	mov	r1, r6
 8009a72:	f7ff f81c 	bl	8008aae <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009a76:	68e1      	ldr	r1, [r4, #12]
 8009a78:	f106 001c 	add.w	r0, r6, #28
 8009a7c:	f7fe ff1e 	bl	80088bc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009a80:	4639      	mov	r1, r7
 8009a82:	f106 0016 	add.w	r0, r6, #22
 8009a86:	f7fe ff19 	bl	80088bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8009a8a:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a8c:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8009a8e:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8009a90:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8009a92:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009a94:	f7ff f840 	bl	8008b18 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009a98:	7d23      	ldrb	r3, [r4, #20]
 8009a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8009a9e:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009aa0:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8009aa2:	4628      	mov	r0, r5
 8009aa4:	b003      	add	sp, #12
 8009aa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009aa8:	2501      	movs	r5, #1
 8009aaa:	e7fa      	b.n	8009aa2 <f_sync+0x86>

08009aac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009aac:	b513      	push	{r0, r1, r4, lr}
 8009aae:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009ab0:	f7ff ffb4 	bl	8009a1c <f_sync>
	if (res == FR_OK)
 8009ab4:	b948      	cbnz	r0, 8009aca <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009ab6:	a901      	add	r1, sp, #4
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f7fe ffc6 	bl	8008a4a <validate>
		if (res == FR_OK) {
 8009abe:	b920      	cbnz	r0, 8009aca <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009ac0:	6920      	ldr	r0, [r4, #16]
 8009ac2:	f7fe ff73 	bl	80089ac <dec_lock>
			if (res == FR_OK)
 8009ac6:	b900      	cbnz	r0, 8009aca <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009ac8:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009aca:	b002      	add	sp, #8
 8009acc:	bd10      	pop	{r4, pc}
	...

08009ad0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009ad0:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009ad2:	4b0f      	ldr	r3, [pc, #60]	; (8009b10 <FATFS_LinkDriverEx+0x40>)
 8009ad4:	7a5d      	ldrb	r5, [r3, #9]
 8009ad6:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8009ada:	b9b5      	cbnz	r5, 8009b0a <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009adc:	7a5d      	ldrb	r5, [r3, #9]
 8009ade:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8009ae0:	7a5d      	ldrb	r5, [r3, #9]
 8009ae2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009ae6:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8009ae8:	7a58      	ldrb	r0, [r3, #9]
 8009aea:	4418      	add	r0, r3
 8009aec:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8009aee:	7a5a      	ldrb	r2, [r3, #9]
 8009af0:	b2d2      	uxtb	r2, r2
 8009af2:	1c50      	adds	r0, r2, #1
 8009af4:	b2c0      	uxtb	r0, r0
 8009af6:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8009af8:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8009afa:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8009afc:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8009afe:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8009b00:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8009b02:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8009b04:	70cc      	strb	r4, [r1, #3]
 8009b06:	4620      	mov	r0, r4
 8009b08:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8009b0a:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8009b0c:	bd30      	pop	{r4, r5, pc}
 8009b0e:	bf00      	nop
 8009b10:	20001188 	.word	0x20001188

08009b14 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b14:	2200      	movs	r2, #0
 8009b16:	f7ff bfdb 	b.w	8009ad0 <FATFS_LinkDriverEx>
	...

08009b1c <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8009b1c:	4a0a      	ldr	r2, [pc, #40]	; (8009b48 <FATFS_UnLinkDriverEx+0x2c>)
 8009b1e:	7a53      	ldrb	r3, [r2, #9]
 8009b20:	b17b      	cbz	r3, 8009b42 <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 8009b22:	7803      	ldrb	r3, [r0, #0]
 8009b24:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009b2c:	6848      	ldr	r0, [r1, #4]
 8009b2e:	b140      	cbz	r0, 8009b42 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8009b30:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 8009b32:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8009b34:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 8009b36:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 8009b38:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	b2db      	uxtb	r3, r3
 8009b3e:	7253      	strb	r3, [r2, #9]
 8009b40:	4770      	bx	lr
  uint8_t ret = 1;
 8009b42:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 8009b44:	4770      	bx	lr
 8009b46:	bf00      	nop
 8009b48:	20001188 	.word	0x20001188

08009b4c <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	f7ff bfe5 	b.w	8009b1c <FATFS_UnLinkDriverEx>
 8009b52:	0000      	movs	r0, r0
 8009b54:	0000      	movs	r0, r0
	...

08009b58 <calcNorm560>:
double M_inv[9] = { 1.07645, -0.237662, 0.161212,
					0.410964, 0.554342, 0.034694,
					-0.010954, -0.013389, 1.024343 };
					
void calcNorm560(uint16_t CCT_measure)
{
 8009b58:	b508      	push	{r3, lr}
	norm_560 = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 8009b5a:	f7f6 fcfb 	bl	8000554 <__aeabi_i2d>
 8009b5e:	a316      	add	r3, pc, #88	; (adr r3, 8009bb8 <calcNorm560+0x60>)
 8009b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b64:	f7f6 fd5c 	bl	8000620 <__aeabi_dmul>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	a114      	add	r1, pc, #80	; (adr r1, 8009bc0 <calcNorm560+0x68>)
 8009b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b72:	f7f6 fe7f 	bl	8000874 <__aeabi_ddiv>
 8009b76:	ec41 0b10 	vmov	d0, r0, r1
 8009b7a:	f01b f941 	bl	8024e00 <exp>
 8009b7e:	2200      	movs	r2, #0
 8009b80:	ec51 0b10 	vmov	r0, r1, d0
 8009b84:	4b0a      	ldr	r3, [pc, #40]	; (8009bb0 <calcNorm560+0x58>)
 8009b86:	f7f6 fb97 	bl	80002b8 <__aeabi_dsub>
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	a106      	add	r1, pc, #24	; (adr r1, 8009ba8 <calcNorm560+0x50>)
 8009b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b94:	f7f6 fe6e 	bl	8000874 <__aeabi_ddiv>
 8009b98:	f7f7 f83a 	bl	8000c10 <__aeabi_d2f>
 8009b9c:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <calcNorm560+0x5c>)
 8009b9e:	6018      	str	r0, [r3, #0]
 8009ba0:	bd08      	pop	{r3, pc}
 8009ba2:	bf00      	nop
 8009ba4:	f3af 8000 	nop.w
 8009ba8:	f9f35846 	.word	0xf9f35846
 8009bac:	466ca5d1 	.word	0x466ca5d1
 8009bb0:	3ff00000 	.word	0x3ff00000
 8009bb4:	2008c0c8 	.word	0x2008c0c8
 8009bb8:	05ea7ab3 	.word	0x05ea7ab3
 8009bbc:	3ea2ca5d 	.word	0x3ea2ca5d
 8009bc0:	aba38759 	.word	0xaba38759
 8009bc4:	3f8d7774 	.word	0x3f8d7774

08009bc8 <calcSref>:
}

double ans = 0;
double calcSref(int idx, uint16_t CCT_measure)
{
 8009bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (CCT_measure < 5000)
 8009bcc:	f241 3387 	movw	r3, #4999	; 0x1387
 8009bd0:	4299      	cmp	r1, r3
{
 8009bd2:	460e      	mov	r6, r1
 8009bd4:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8009bd8:	4c3b      	ldr	r4, [pc, #236]	; (8009cc8 <calcSref+0x100>)
	if (CCT_measure < 5000)
 8009bda:	d84d      	bhi.n	8009c78 <calcSref+0xb0>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 8009bdc:	4d3b      	ldr	r5, [pc, #236]	; (8009ccc <calcSref+0x104>)
 8009bde:	4405      	add	r5, r0
 8009be0:	6828      	ldr	r0, [r5, #0]
 8009be2:	f7f6 fcc9 	bl	8000578 <__aeabi_f2d>
 8009be6:	a332      	add	r3, pc, #200	; (adr r3, 8009cb0 <calcSref+0xe8>)
 8009be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bec:	f7f6 fd18 	bl	8000620 <__aeabi_dmul>
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	4689      	mov	r9, r1
 8009bf6:	f7f6 fcad 	bl	8000554 <__aeabi_i2d>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4640      	mov	r0, r8
 8009c00:	4649      	mov	r1, r9
 8009c02:	f7f6 fd0d 	bl	8000620 <__aeabi_dmul>
 8009c06:	4602      	mov	r2, r0
 8009c08:	460b      	mov	r3, r1
 8009c0a:	a12b      	add	r1, pc, #172	; (adr r1, 8009cb8 <calcSref+0xf0>)
 8009c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c10:	f7f6 fe30 	bl	8000874 <__aeabi_ddiv>
 8009c14:	ec41 0b10 	vmov	d0, r0, r1
 8009c18:	f01b f8f2 	bl	8024e00 <exp>
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	ec51 0b10 	vmov	r0, r1, d0
 8009c22:	4b2b      	ldr	r3, [pc, #172]	; (8009cd0 <calcSref+0x108>)
 8009c24:	f7f6 fb48 	bl	80002b8 <__aeabi_dsub>
 8009c28:	e9c4 0100 	strd	r0, r1, [r4]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009c2c:	6828      	ldr	r0, [r5, #0]
 8009c2e:	f7f6 fca3 	bl	8000578 <__aeabi_f2d>
 8009c32:	a31f      	add	r3, pc, #124	; (adr r3, 8009cb0 <calcSref+0xe8>)
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	f7f6 fcf2 	bl	8000620 <__aeabi_dmul>
 8009c3c:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8009cc0 <calcSref+0xf8>
 8009c40:	ec41 0b10 	vmov	d0, r0, r1
 8009c44:	f01b f9d8 	bl	8024ff8 <pow>
 8009c48:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c4c:	ec51 0b10 	vmov	r0, r1, d0
 8009c50:	f7f6 fe10 	bl	8000874 <__aeabi_ddiv>
		ans /= norm_560;
 8009c54:	4b1f      	ldr	r3, [pc, #124]	; (8009cd4 <calcSref+0x10c>)
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009c56:	4606      	mov	r6, r0
		ans /= norm_560;
 8009c58:	6818      	ldr	r0, [r3, #0]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009c5a:	460f      	mov	r7, r1
		ans /= norm_560;
 8009c5c:	f7f6 fc8c 	bl	8000578 <__aeabi_f2d>
 8009c60:	4602      	mov	r2, r0
 8009c62:	460b      	mov	r3, r1
 8009c64:	4630      	mov	r0, r6
 8009c66:	4639      	mov	r1, r7
 8009c68:	f7f6 fe04 	bl	8000874 <__aeabi_ddiv>
	}
	else
	{
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 8009c6c:	e9c4 0100 	strd	r0, r1, [r4]
	}
	return ans;
}
 8009c70:	ed94 0b00 	vldr	d0, [r4]
 8009c74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 8009c78:	4a17      	ldr	r2, [pc, #92]	; (8009cd8 <calcSref+0x110>)
 8009c7a:	4b18      	ldr	r3, [pc, #96]	; (8009cdc <calcSref+0x114>)
 8009c7c:	4918      	ldr	r1, [pc, #96]	; (8009ce0 <calcSref+0x118>)
 8009c7e:	4403      	add	r3, r0
 8009c80:	4401      	add	r1, r0
 8009c82:	4410      	add	r0, r2
 8009c84:	4a17      	ldr	r2, [pc, #92]	; (8009ce4 <calcSref+0x11c>)
 8009c86:	edd1 6a00 	vldr	s13, [r1]
 8009c8a:	ed92 7a00 	vldr	s14, [r2]
 8009c8e:	edd0 7a00 	vldr	s15, [r0]
 8009c92:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009c96:	edd3 6a00 	vldr	s13, [r3]
 8009c9a:	4b13      	ldr	r3, [pc, #76]	; (8009ce8 <calcSref+0x120>)
 8009c9c:	ed93 7a00 	vldr	s14, [r3]
 8009ca0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009ca4:	ee17 0a90 	vmov	r0, s15
 8009ca8:	f7f6 fc66 	bl	8000578 <__aeabi_f2d>
 8009cac:	e7de      	b.n	8009c6c <calcSref+0xa4>
 8009cae:	bf00      	nop
 8009cb0:	e826d695 	.word	0xe826d695
 8009cb4:	3e112e0b 	.word	0x3e112e0b
 8009cb8:	aba38759 	.word	0xaba38759
 8009cbc:	3f8d7774 	.word	0x3f8d7774
 8009cc0:	00000000 	.word	0x00000000
 8009cc4:	c0140000 	.word	0xc0140000
 8009cc8:	200031b0 	.word	0x200031b0
 8009ccc:	200501ec 	.word	0x200501ec
 8009cd0:	3ff00000 	.word	0x3ff00000
 8009cd4:	2008c0c8 	.word	0x2008c0c8
 8009cd8:	2004a1e4 	.word	0x2004a1e4
 8009cdc:	2004c1e4 	.word	0x2004c1e4
 8009ce0:	2004b1e4 	.word	0x2004b1e4
 8009ce4:	20003194 	.word	0x20003194
 8009ce8:	20003198 	.word	0x20003198
 8009cec:	00000000 	.word	0x00000000

08009cf0 <cqs_func>:

void cqs_func(uint16_t CCT_measure, float *Rabs)
{
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	ed2d 8b0a 	vpush	{d8-d12}
 8009cf8:	b0af      	sub	sp, #188	; 0xbc
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	9004      	str	r0, [sp, #16]
	double x_test = 0;	
	double y_test = 0;		
	double z_test = 0;	
	
	
	memset(CQS_S_test, 0, sizeof(CQS_S_test));
 8009cfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009d02:	2100      	movs	r1, #0
 8009d04:	48c4      	ldr	r0, [pc, #784]	; (800a018 <cqs_func+0x328>)
 8009d06:	f018 f842 	bl	8021d8e <memset>
	memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 8009d0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009d0e:	2100      	movs	r1, #0
 8009d10:	48c2      	ldr	r0, [pc, #776]	; (800a01c <cqs_func+0x32c>)
 8009d12:	f018 f83c 	bl	8021d8e <memset>
	
	for (uint16_t i = 0; i < 1024; i++){
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 8009d16:	4bc2      	ldr	r3, [pc, #776]	; (800a020 <cqs_func+0x330>)
 8009d18:	ed93 7a00 	vldr	s14, [r3]
 8009d1c:	4bbe      	ldr	r3, [pc, #760]	; (800a018 <cqs_func+0x328>)
 8009d1e:	4621      	mov	r1, r4
 8009d20:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8009d24:	ecf1 6a01 	vldmia	r1!, {s13}
 8009d28:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t i = 0; i < 1024; i++){
 8009d2c:	428a      	cmp	r2, r1
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 8009d2e:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t i = 0; i < 1024; i++){
 8009d32:	d1f7      	bne.n	8009d24 <cqs_func+0x34>
	}

	if (CCT_measure < 3500){
 8009d34:	9a04      	ldr	r2, [sp, #16]
 8009d36:	f640 53ab 	movw	r3, #3499	; 0xdab
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	f200 870d 	bhi.w	800ab5a <cqs_func+0xe6a>
		Mcct = (float)CCT_measure*(float)CCT_measure*(float)CCT_measure*0.000000000092672 - (float)CCT_measure*(float)CCT_measure*0.00000083959 + (float)CCT_measure*0.00255 - 1.612;
 8009d40:	ee07 2a90 	vmov	s15, r2
 8009d44:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8009d48:	ee68 8a08 	vmul.f32	s17, s16, s16
 8009d4c:	ee68 7a28 	vmul.f32	s15, s16, s17
 8009d50:	ee17 0a90 	vmov	r0, s15
 8009d54:	f7f6 fc10 	bl	8000578 <__aeabi_f2d>
 8009d58:	a3a3      	add	r3, pc, #652	; (adr r3, 8009fe8 <cqs_func+0x2f8>)
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f7f6 fc5f 	bl	8000620 <__aeabi_dmul>
 8009d62:	4604      	mov	r4, r0
 8009d64:	ee18 0a90 	vmov	r0, s17
 8009d68:	460d      	mov	r5, r1
 8009d6a:	f7f6 fc05 	bl	8000578 <__aeabi_f2d>
 8009d6e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009ff0 <cqs_func+0x300>)
 8009d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d74:	f7f6 fc54 	bl	8000620 <__aeabi_dmul>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	4629      	mov	r1, r5
 8009d80:	f7f6 fa9a 	bl	80002b8 <__aeabi_dsub>
 8009d84:	4604      	mov	r4, r0
 8009d86:	ee18 0a10 	vmov	r0, s16
 8009d8a:	460d      	mov	r5, r1
 8009d8c:	f7f6 fbf4 	bl	8000578 <__aeabi_f2d>
 8009d90:	a399      	add	r3, pc, #612	; (adr r3, 8009ff8 <cqs_func+0x308>)
 8009d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d96:	f7f6 fc43 	bl	8000620 <__aeabi_dmul>
 8009d9a:	4602      	mov	r2, r0
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	4620      	mov	r0, r4
 8009da0:	4629      	mov	r1, r5
 8009da2:	f7f6 fa8b 	bl	80002bc <__adddf3>
 8009da6:	a396      	add	r3, pc, #600	; (adr r3, 800a000 <cqs_func+0x310>)
 8009da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dac:	f7f6 fa84 	bl	80002b8 <__aeabi_dsub>
 8009db0:	4b9c      	ldr	r3, [pc, #624]	; (800a024 <cqs_func+0x334>)
 8009db2:	e9c3 0100 	strd	r0, r1, [r3]
	}
	
	if (CCT_measure < 5000)
	{
		calcNorm560(CCT_measure);
 8009db6:	9804      	ldr	r0, [sp, #16]
 8009db8:	f7ff fece 	bl	8009b58 <calcNorm560>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
	}
	
	bar_CQS = 0.2;
 8009dbc:	a192      	add	r1, pc, #584	; (adr r1, 800a008 <cqs_func+0x318>)
 8009dbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc2:	4b99      	ldr	r3, [pc, #612]	; (800a028 <cqs_func+0x338>)
	GUI_Bar_Measure(85, 13, bar_CQS);
 8009dc4:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800a02c <cqs_func+0x33c>
	bar_CQS = 0.2;
 8009dc8:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CQS);
 8009dcc:	210d      	movs	r1, #13
 8009dce:	2055      	movs	r0, #85	; 0x55
 8009dd0:	f00b fc64 	bl	801569c <GUI_Bar_Measure>

	memset(x_ref, 0, sizeof(x_ref));
 8009dd4:	2278      	movs	r2, #120	; 0x78
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	4895      	ldr	r0, [pc, #596]	; (800a030 <cqs_func+0x340>)
 8009dda:	f017 ffd8 	bl	8021d8e <memset>
	memset(y_ref, 0, sizeof(y_ref));
 8009dde:	2278      	movs	r2, #120	; 0x78
 8009de0:	2100      	movs	r1, #0
 8009de2:	4894      	ldr	r0, [pc, #592]	; (800a034 <cqs_func+0x344>)
 8009de4:	f017 ffd3 	bl	8021d8e <memset>
	memset(z_ref, 0, sizeof(z_ref));
 8009de8:	2278      	movs	r2, #120	; 0x78
 8009dea:	2100      	movs	r1, #0
 8009dec:	4892      	ldr	r0, [pc, #584]	; (800a038 <cqs_func+0x348>)
 8009dee:	f017 ffce 	bl	8021d8e <memset>
	double zw_test = 0;
 8009df2:	f04f 0a00 	mov.w	sl, #0
 8009df6:	f04f 0b00 	mov.w	fp, #0
 8009dfa:	4b8d      	ldr	r3, [pc, #564]	; (800a030 <cqs_func+0x340>)
 8009dfc:	930a      	str	r3, [sp, #40]	; 0x28
	double yw_test = 0;
 8009dfe:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8009e02:	4b8c      	ldr	r3, [pc, #560]	; (800a034 <cqs_func+0x344>)
 8009e04:	9308      	str	r3, [sp, #32]
	double xw_test = 0;
 8009e06:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
	double zw_ref = 0;
 8009e0a:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
	double yw_ref = 0;
 8009e0e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
	double xw_ref = 0;
 8009e12:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
	double k_test = 0;
 8009e16:	e9cd ab02 	strd	sl, fp, [sp, #8]
	double k_ref = 0;
 8009e1a:	e9cd ab00 	strd	sl, fp, [sp]
 8009e1e:	4b86      	ldr	r3, [pc, #536]	; (800a038 <cqs_func+0x348>)
 8009e20:	9306      	str	r3, [sp, #24]
		bar_CQS += 0.04;
		GUI_Bar_Measure(85, 13, bar_CQS);
		
		 x_test = 0;	
		 y_test = 0;		
		 z_test = 0;	
 8009e22:	ec4b ab1b 	vmov	d11, sl, fp
		 y_test = 0;		
 8009e26:	ec4b ab1a 	vmov	d10, sl, fp
	memset(z_ref, 0, sizeof(z_ref));
 8009e2a:	2400      	movs	r4, #0
		bar_CQS += 0.04;
 8009e2c:	4d7e      	ldr	r5, [pc, #504]	; (800a028 <cqs_func+0x338>)
 8009e2e:	4f83      	ldr	r7, [pc, #524]	; (800a03c <cqs_func+0x34c>)
	
	
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 8009e30:	4e79      	ldr	r6, [pc, #484]	; (800a018 <cqs_func+0x328>)
		bar_CQS += 0.04;
 8009e32:	a377      	add	r3, pc, #476	; (adr r3, 800a010 <cqs_func+0x320>)
 8009e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e38:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009e3c:	f7f6 fa3e 	bl	80002bc <__adddf3>
 8009e40:	e9c5 0100 	strd	r0, r1, [r5]
		GUI_Bar_Measure(85, 13, bar_CQS);
 8009e44:	f7f6 fee4 	bl	8000c10 <__aeabi_d2f>
 8009e48:	210d      	movs	r1, #13
 8009e4a:	ee00 0a10 	vmov	s0, r0
 8009e4e:	2055      	movs	r0, #85	; 0x55
 8009e50:	f00b fc24 	bl	801569c <GUI_Bar_Measure>
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 8009e54:	487a      	ldr	r0, [pc, #488]	; (800a040 <cqs_func+0x350>)
 8009e56:	4a71      	ldr	r2, [pc, #452]	; (800a01c <cqs_func+0x32c>)
 8009e58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009e5c:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 8009e60:	f004 feea 	bl	800ec38 <Calibration_Load_Pack>
 8009e64:	4b77      	ldr	r3, [pc, #476]	; (800a044 <cqs_func+0x354>)
 8009e66:	9320      	str	r3, [sp, #128]	; 0x80
 8009e68:	4b77      	ldr	r3, [pc, #476]	; (800a048 <cqs_func+0x358>)
 8009e6a:	931e      	str	r3, [sp, #120]	; 0x78
		 z_test = 0;	
 8009e6c:	ed8d bb1a 	vstr	d11, [sp, #104]	; 0x68
 8009e70:	4b76      	ldr	r3, [pc, #472]	; (800a04c <cqs_func+0x35c>)
 8009e72:	931c      	str	r3, [sp, #112]	; 0x70
		 y_test = 0;		
 8009e74:	ed8d ab18 	vstr	d10, [sp, #96]	; 0x60
		 x_test = 0;	
 8009e78:	ed8d ab16 	vstr	d10, [sp, #88]	; 0x58
 8009e7c:	b2e3      	uxtb	r3, r4

		for (int j = 0; j < 1024; j++)
 8009e7e:	2500      	movs	r5, #0
 8009e80:	9326      	str	r3, [sp, #152]	; 0x98
		{
			if (i == 0)
 8009e82:	2c00      	cmp	r4, #0
 8009e84:	d17d      	bne.n	8009f82 <cqs_func+0x292>
			{
				s_ref[j] = calcSref(j, CCT_measure);
 8009e86:	9904      	ldr	r1, [sp, #16]
 8009e88:	4628      	mov	r0, r5
 8009e8a:	f7ff fe9d 	bl	8009bc8 <calcSref>
 8009e8e:	ec51 0b10 	vmov	r0, r1, d0
 8009e92:	f7f6 febd 	bl	8000c10 <__aeabi_d2f>
 8009e96:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009e98:	6018      	str	r0, [r3, #0]
				k_ref += s_ref[j] * Spectral_day[j];
 8009e9a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
				s_ref[j] = calcSref(j, CCT_measure);
 8009e9c:	ee08 0a10 	vmov	s16, r0
				k_ref += s_ref[j] * Spectral_day[j];
 8009ea0:	edd3 9a00 	vldr	s19, [r3]
 8009ea4:	ee68 7a29 	vmul.f32	s15, s16, s19
 8009ea8:	ee17 0a90 	vmov	r0, s15
 8009eac:	f7f6 fb64 	bl	8000578 <__aeabi_f2d>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	4680      	mov	r8, r0
 8009eb4:	4689      	mov	r9, r1
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ebc:	f7f6 f9fe 	bl	80002bc <__adddf3>
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8009ec0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009ec2:	ed93 9a00 	vldr	s18, [r3]
 8009ec6:	ee68 7a09 	vmul.f32	s15, s16, s18
				k_ref += s_ref[j] * Spectral_day[j];
 8009eca:	e9cd 0100 	strd	r0, r1, [sp]
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8009ece:	ee17 0a90 	vmov	r0, s15
 8009ed2:	f7f6 fb51 	bl	8000578 <__aeabi_f2d>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ede:	f7f6 f9ed 	bl	80002bc <__adddf3>
				yw_ref += s_ref[j] * Spectral_day[j];
 8009ee2:	4642      	mov	r2, r8
 8009ee4:	464b      	mov	r3, r9
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8009ee6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
				yw_ref += s_ref[j] * Spectral_day[j];
 8009eea:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009eee:	f7f6 f9e5 	bl	80002bc <__adddf3>
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8009ef2:	edd7 8a00 	vldr	s17, [r7]
 8009ef6:	ee68 7a28 	vmul.f32	s15, s16, s17
				yw_ref += s_ref[j] * Spectral_day[j];
 8009efa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8009efe:	ee17 0a90 	vmov	r0, s15
 8009f02:	f7f6 fb39 	bl	8000578 <__aeabi_f2d>
 8009f06:	4602      	mov	r2, r0
 8009f08:	460b      	mov	r3, r1
 8009f0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009f0e:	f7f6 f9d5 	bl	80002bc <__adddf3>
				k_test += CQS_S_test[j] * Spectral_day[j];
 8009f12:	ed96 8a00 	vldr	s16, [r6]
 8009f16:	ee69 7a88 	vmul.f32	s15, s19, s16
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8009f1a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
				k_test += CQS_S_test[j] * Spectral_day[j];
 8009f1e:	ee17 0a90 	vmov	r0, s15
 8009f22:	f7f6 fb29 	bl	8000578 <__aeabi_f2d>
 8009f26:	4602      	mov	r2, r0
 8009f28:	460b      	mov	r3, r1
 8009f2a:	4680      	mov	r8, r0
 8009f2c:	4689      	mov	r9, r1
 8009f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f32:	f7f6 f9c3 	bl	80002bc <__adddf3>
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8009f36:	ee69 7a08 	vmul.f32	s15, s18, s16
				k_test += CQS_S_test[j] * Spectral_day[j];
 8009f3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8009f3e:	ee17 0a90 	vmov	r0, s15
 8009f42:	f7f6 fb19 	bl	8000578 <__aeabi_f2d>
 8009f46:	4602      	mov	r2, r0
 8009f48:	460b      	mov	r3, r1
 8009f4a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8009f4e:	f7f6 f9b5 	bl	80002bc <__adddf3>
				yw_test += CQS_S_test[j] * Spectral_day[j];
 8009f52:	4642      	mov	r2, r8
 8009f54:	464b      	mov	r3, r9
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8009f56:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
				yw_test += CQS_S_test[j] * Spectral_day[j];
 8009f5a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8009f5e:	f7f6 f9ad 	bl	80002bc <__adddf3>
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 8009f62:	ee68 7a88 	vmul.f32	s15, s17, s16
				yw_test += CQS_S_test[j] * Spectral_day[j];
 8009f66:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 8009f6a:	ee17 0a90 	vmov	r0, s15
 8009f6e:	f7f6 fb03 	bl	8000578 <__aeabi_f2d>
 8009f72:	4602      	mov	r2, r0
 8009f74:	460b      	mov	r3, r1
 8009f76:	4650      	mov	r0, sl
 8009f78:	4659      	mov	r1, fp
 8009f7a:	f7f6 f99f 	bl	80002bc <__adddf3>
 8009f7e:	4682      	mov	sl, r0
 8009f80:	468b      	mov	fp, r1
			}

			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009f82:	4b26      	ldr	r3, [pc, #152]	; (800a01c <cqs_func+0x32c>)
 8009f84:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009f88:	ed93 8a00 	vldr	s16, [r3]
 8009f8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f8e:	ecb3 9a01 	vldmia	r3!, {s18}
 8009f92:	9320      	str	r3, [sp, #128]	; 0x80
 8009f94:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009f96:	ee28 9a09 	vmul.f32	s18, s16, s18
 8009f9a:	ecf3 9a01 	vldmia	r3!, {s19}
 8009f9e:	ee69 7a29 	vmul.f32	s15, s18, s19
 8009fa2:	931e      	str	r3, [sp, #120]	; 0x78
 8009fa4:	ee17 0a90 	vmov	r0, s15
 8009fa8:	f7f6 fae6 	bl	8000578 <__aeabi_f2d>
 8009fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	f7f6 f983 	bl	80002bc <__adddf3>
 8009fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb8:	e9c3 0100 	strd	r0, r1, [r3]
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 8009fbc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009fbe:	ecf3 8a01 	vldmia	r3!, {s17}
 8009fc2:	ee68 8a28 	vmul.f32	s17, s16, s17
			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009fc6:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 8009fca:	ee69 7aa8 	vmul.f32	s15, s19, s17
 8009fce:	931c      	str	r3, [sp, #112]	; 0x70
 8009fd0:	ee17 0a90 	vmov	r0, s15
 8009fd4:	f7f6 fad0 	bl	8000578 <__aeabi_f2d>
 8009fd8:	9b08      	ldr	r3, [sp, #32]
 8009fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fde:	f7f6 f96d 	bl	80002bc <__adddf3>
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009fe2:	ecf7 7a01 	vldmia	r7!, {s15}
 8009fe6:	e033      	b.n	800a050 <cqs_func+0x360>
 8009fe8:	56b31fbb 	.word	0x56b31fbb
 8009fec:	3dd97936 	.word	0x3dd97936
 8009ff0:	ef649b9b 	.word	0xef649b9b
 8009ff4:	3eac2c05 	.word	0x3eac2c05
 8009ff8:	d35a8588 	.word	0xd35a8588
 8009ffc:	3f64e3bc 	.word	0x3f64e3bc
 800a000:	83126e98 	.word	0x83126e98
 800a004:	3ff9cac0 	.word	0x3ff9cac0
 800a008:	9999999a 	.word	0x9999999a
 800a00c:	3fc99999 	.word	0x3fc99999
 800a010:	47ae147b 	.word	0x47ae147b
 800a014:	3fa47ae1 	.word	0x3fa47ae1
 800a018:	20002194 	.word	0x20002194
 800a01c:	20001194 	.word	0x20001194
 800a020:	2009115c 	.word	0x2009115c
 800a024:	20000188 	.word	0x20000188
 800a028:	2008bf50 	.word	0x2008bf50
 800a02c:	3e4ccccd 	.word	0x3e4ccccd
 800a030:	2008bf58 	.word	0x2008bf58
 800a034:	2008c0e8 	.word	0x2008c0e8
 800a038:	2008c050 	.word	0x2008c050
 800a03c:	20088db8 	.word	0x20088db8
 800a040:	0810c040 	.word	0x0810c040
 800a044:	20085db8 	.word	0x20085db8
 800a048:	200031b8 	.word	0x200031b8
 800a04c:	2004e1e8 	.word	0x2004e1e8
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a050:	9b08      	ldr	r3, [sp, #32]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a052:	ee28 8a27 	vmul.f32	s16, s16, s15
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a056:	e9c3 0100 	strd	r0, r1, [r3]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a05a:	ee69 7a88 	vmul.f32	s15, s19, s16
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a05e:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a062:	ee17 0a90 	vmov	r0, s15
 800a066:	f7f6 fa87 	bl	8000578 <__aeabi_f2d>
 800a06a:	9b06      	ldr	r3, [sp, #24]
 800a06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a070:	f7f6 f924 	bl	80002bc <__adddf3>
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a074:	ecf6 9a01 	vldmia	r6!, {s19}
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a078:	9b06      	ldr	r3, [sp, #24]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a07a:	ee69 7a29 	vmul.f32	s15, s18, s19
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a07e:	4680      	mov	r8, r0
 800a080:	4689      	mov	r9, r1
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a082:	ee17 0a90 	vmov	r0, s15
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a086:	e9c3 8900 	strd	r8, r9, [r3]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a08a:	f7f6 fa75 	bl	8000578 <__aeabi_f2d>
 800a08e:	4602      	mov	r2, r0
 800a090:	460b      	mov	r3, r1
 800a092:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a096:	f7f6 f911 	bl	80002bc <__adddf3>
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a09a:	ee68 7aa9 	vmul.f32	s15, s17, s19
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a09e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0a2:	ee17 0a90 	vmov	r0, s15
 800a0a6:	f7f6 fa67 	bl	8000578 <__aeabi_f2d>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a0b2:	f7f6 f903 	bl	80002bc <__adddf3>
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0b6:	ee68 7a29 	vmul.f32	s15, s16, s19
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0ba:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0be:	ee17 0a90 	vmov	r0, s15
 800a0c2:	f7f6 fa59 	bl	8000578 <__aeabi_f2d>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a0ce:	f7f6 f8f5 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 800a0d2:	3501      	adds	r5, #1
 800a0d4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0d8:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		for (int j = 0; j < 1024; j++)
 800a0dc:	f47f aed1 	bne.w	8009e82 <cqs_func+0x192>
		}
		
		memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 800a0e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	4874      	ldr	r0, [pc, #464]	; (800a2b8 <cqs_func+0x5c8>)
 800a0e8:	f017 fe51 	bl	8021d8e <memset>
		
		if (i == 0) {
 800a0ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0ee:	b97b      	cbnz	r3, 800a110 <cqs_func+0x420>
			k_ref = 100 / k_ref;
 800a0f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	4971      	ldr	r1, [pc, #452]	; (800a2bc <cqs_func+0x5cc>)
 800a0f8:	f7f6 fbbc 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800a0fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_ref = 100 / k_ref;
 800a100:	e9cd 0100 	strd	r0, r1, [sp]
			k_test = 100 / k_test;
 800a104:	2000      	movs	r0, #0
 800a106:	496d      	ldr	r1, [pc, #436]	; (800a2bc <cqs_func+0x5cc>)
 800a108:	f7f6 fbb4 	bl	8000874 <__aeabi_ddiv>
 800a10c:	e9cd 0102 	strd	r0, r1, [sp, #8]
		}
			
		x_ref[i] *= k_ref;
 800a110:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a114:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a118:	f7f6 fa82 	bl	8000620 <__aeabi_dmul>
 800a11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
		z_ref[i] *= k_ref;
		x_test *= k_test;
		y_test *= k_test;
		z_test *= k_test;
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a11e:	4d68      	ldr	r5, [pc, #416]	; (800a2c0 <cqs_func+0x5d0>)
 800a120:	4f68      	ldr	r7, [pc, #416]	; (800a2c4 <cqs_func+0x5d4>)
		x_ref[i] *= k_ref;
 800a122:	e8e3 0102 	strd	r0, r1, [r3], #8
		y_ref[i] *= k_ref;
 800a126:	e9dd 0100 	ldrd	r0, r1, [sp]
		x_ref[i] *= k_ref;
 800a12a:	930a      	str	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
 800a12c:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a130:	f7f6 fa76 	bl	8000620 <__aeabi_dmul>
 800a134:	9b08      	ldr	r3, [sp, #32]
 800a136:	e8e3 0102 	strd	r0, r1, [r3], #8
		z_ref[i] *= k_ref;
 800a13a:	4642      	mov	r2, r8
		y_ref[i] *= k_ref;
 800a13c:	9308      	str	r3, [sp, #32]
		z_ref[i] *= k_ref;
 800a13e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a142:	464b      	mov	r3, r9
 800a144:	f7f6 fa6c 	bl	8000620 <__aeabi_dmul>
 800a148:	9b06      	ldr	r3, [sp, #24]
 800a14a:	e8e3 0102 	strd	r0, r1, [r3], #8
		x_test *= k_test;
 800a14e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		z_ref[i] *= k_ref;
 800a152:	9306      	str	r3, [sp, #24]
		x_test *= k_test;
 800a154:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a158:	f7f6 fa62 	bl	8000620 <__aeabi_dmul>
		y_test *= k_test;
 800a15c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
		x_test *= k_test;
 800a160:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
		y_test *= k_test;
 800a164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a168:	f7f6 fa5a 	bl	8000620 <__aeabi_dmul>
		z_test *= k_test;
 800a16c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
		y_test *= k_test;
 800a170:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
		z_test *= k_test;
 800a174:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a178:	f7f6 fa52 	bl	8000620 <__aeabi_dmul>
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a17c:	ed95 7b00 	vldr	d7, [r5]
 800a180:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800a184:	ed95 7b02 	vldr	d7, [r5, #8]
 800a188:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800a18c:	ed95 7b04 	vldr	d7, [r5, #16]
 800a190:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
		z_test *= k_test;
 800a194:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a198:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a19c:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 800a1a0:	f7f6 fa3e 	bl	8000620 <__aeabi_dmul>
 800a1a4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a1a8:	4680      	mov	r8, r0
 800a1aa:	4689      	mov	r9, r1
 800a1ac:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a1b0:	f7f6 fa36 	bl	8000620 <__aeabi_dmul>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	f7f6 f87e 	bl	80002bc <__adddf3>
 800a1c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a1c4:	4680      	mov	r8, r0
 800a1c6:	4689      	mov	r9, r1
 800a1c8:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a1cc:	f7f6 fa28 	bl	8000620 <__aeabi_dmul>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	4649      	mov	r1, r9
 800a1d8:	f7f6 f870 	bl	80002bc <__adddf3>
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a1dc:	ed95 7b06 	vldr	d7, [r5, #24]
 800a1e0:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800a1e4:	ed95 7b08 	vldr	d7, [r5, #32]
 800a1e8:	00e6      	lsls	r6, r4, #3
 800a1ea:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 800a1ee:	ed95 7b0a 	vldr	d7, [r5, #40]	; 0x28
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a1f2:	4437      	add	r7, r6
 800a1f4:	e9c7 0100 	strd	r0, r1, [r7]
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a1f8:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800a1fc:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a200:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 800a204:	f7f6 fa0c 	bl	8000620 <__aeabi_dmul>
 800a208:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800a20c:	4680      	mov	r8, r0
 800a20e:	4689      	mov	r9, r1
 800a210:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a214:	f7f6 fa04 	bl	8000620 <__aeabi_dmul>
 800a218:	4602      	mov	r2, r0
 800a21a:	460b      	mov	r3, r1
 800a21c:	4640      	mov	r0, r8
 800a21e:	4649      	mov	r1, r9
 800a220:	f7f6 f84c 	bl	80002bc <__adddf3>
 800a224:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800a228:	4680      	mov	r8, r0
 800a22a:	4689      	mov	r9, r1
 800a22c:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a230:	f7f6 f9f6 	bl	8000620 <__aeabi_dmul>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	4640      	mov	r0, r8
 800a23a:	4649      	mov	r1, r9
 800a23c:	f7f6 f83e 	bl	80002bc <__adddf3>
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a240:	ed95 7b0c 	vldr	d7, [r5, #48]	; 0x30
 800a244:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 800a248:	ed95 7b0e 	vldr	d7, [r5, #56]	; 0x38
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a24c:	4f1e      	ldr	r7, [pc, #120]	; (800a2c8 <cqs_func+0x5d8>)
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a24e:	4b1f      	ldr	r3, [pc, #124]	; (800a2cc <cqs_func+0x5dc>)
 800a250:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 800a254:	ed95 7b10 	vldr	d7, [r5, #64]	; 0x40
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a258:	4437      	add	r7, r6
 800a25a:	e9c7 0100 	strd	r0, r1, [r7]
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a25e:	441e      	add	r6, r3
 800a260:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a264:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a268:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 800a26c:	f7f6 f9d8 	bl	8000620 <__aeabi_dmul>
 800a270:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a274:	4680      	mov	r8, r0
 800a276:	4689      	mov	r9, r1
 800a278:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a27c:	f7f6 f9d0 	bl	8000620 <__aeabi_dmul>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4640      	mov	r0, r8
 800a286:	4649      	mov	r1, r9
 800a288:	f7f6 f818 	bl	80002bc <__adddf3>
 800a28c:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800a290:	4680      	mov	r8, r0
 800a292:	4689      	mov	r9, r1
 800a294:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a298:	f7f6 f9c2 	bl	8000620 <__aeabi_dmul>
 800a29c:	4602      	mov	r2, r0
 800a29e:	460b      	mov	r3, r1
 800a2a0:	4640      	mov	r0, r8
 800a2a2:	4649      	mov	r1, r9
 800a2a4:	f7f6 f80a 	bl	80002bc <__adddf3>
 800a2a8:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < 15; i++)
 800a2aa:	2c0f      	cmp	r4, #15
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a2ac:	e9c6 0100 	strd	r0, r1, [r6]
	for (uint8_t i = 0; i < 15; i++)
 800a2b0:	f47f adbc 	bne.w	8009e2c <cqs_func+0x13c>
 800a2b4:	e00e      	b.n	800a2d4 <cqs_func+0x5e4>
 800a2b6:	bf00      	nop
 800a2b8:	20001194 	.word	0x20001194
 800a2bc:	40590000 	.word	0x40590000
 800a2c0:	200000f8 	.word	0x200000f8
 800a2c4:	2008bfd8 	.word	0x2008bfd8
 800a2c8:	2008c160 	.word	0x2008c160
 800a2cc:	2008bed8 	.word	0x2008bed8
 800a2d0:	00000000 	.word	0x00000000
	}

	xw_ref *= k_ref;
 800a2d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a2d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2dc:	f7f6 f9a0 	bl	8000620 <__aeabi_dmul>
	yw_ref *= k_ref;
 800a2e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
	xw_ref *= k_ref;
 800a2e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
	yw_ref *= k_ref;
 800a2e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2ec:	f7f6 f998 	bl	8000620 <__aeabi_dmul>
	zw_ref *= k_ref;
 800a2f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
	yw_ref *= k_ref;
 800a2f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
	zw_ref *= k_ref;
 800a2f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2fc:	f7f6 f990 	bl	8000620 <__aeabi_dmul>
	xw_test *= k_test;
 800a300:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
	zw_ref *= k_ref;
 800a304:	e9cd 0108 	strd	r0, r1, [sp, #32]
	xw_test *= k_test;
 800a308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a30c:	f7f6 f988 	bl	8000620 <__aeabi_dmul>
	yw_test *= k_test;
 800a310:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	xw_test *= k_test;
 800a314:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	yw_test *= k_test;
 800a318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a31c:	f7f6 f980 	bl	8000620 <__aeabi_dmul>
	zw_test *= k_test;
 800a320:	4652      	mov	r2, sl
 800a322:	465b      	mov	r3, fp
	yw_test *= k_test;
 800a324:	e9cd 0100 	strd	r0, r1, [sp]
	zw_test *= k_test;
 800a328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a32c:	f7f6 f978 	bl	8000620 <__aeabi_dmul>

	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a330:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	zw_test *= k_test;
 800a334:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a338:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a33c:	f7f6 f970 	bl	8000620 <__aeabi_dmul>
 800a340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a344:	4604      	mov	r4, r0
 800a346:	460d      	mov	r5, r1
 800a348:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a34c:	f7f6 f968 	bl	8000620 <__aeabi_dmul>
 800a350:	4602      	mov	r2, r0
 800a352:	460b      	mov	r3, r1
 800a354:	4620      	mov	r0, r4
 800a356:	4629      	mov	r1, r5
 800a358:	f7f5 ffb0 	bl	80002bc <__adddf3>
 800a35c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a360:	4604      	mov	r4, r0
 800a362:	460d      	mov	r5, r1
 800a364:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a368:	f7f6 f95a 	bl	8000620 <__aeabi_dmul>
 800a36c:	4602      	mov	r2, r0
 800a36e:	460b      	mov	r3, r1
 800a370:	4620      	mov	r0, r4
 800a372:	4629      	mov	r1, r5
 800a374:	f7f5 ffa2 	bl	80002bc <__adddf3>
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a378:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a37c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a380:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a384:	f7f6 f94c 	bl	8000620 <__aeabi_dmul>
 800a388:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a38c:	4604      	mov	r4, r0
 800a38e:	460d      	mov	r5, r1
 800a390:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a394:	f7f6 f944 	bl	8000620 <__aeabi_dmul>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	4620      	mov	r0, r4
 800a39e:	4629      	mov	r1, r5
 800a3a0:	f7f5 ff8c 	bl	80002bc <__adddf3>
 800a3a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	460d      	mov	r5, r1
 800a3ac:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800a3b0:	f7f6 f936 	bl	8000620 <__aeabi_dmul>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	4629      	mov	r1, r5
 800a3bc:	f7f5 ff7e 	bl	80002bc <__adddf3>
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a3c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a3c4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a3c8:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800a3cc:	f7f6 f928 	bl	8000620 <__aeabi_dmul>
 800a3d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	460d      	mov	r5, r1
 800a3d8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800a3dc:	f7f6 f920 	bl	8000620 <__aeabi_dmul>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	4620      	mov	r0, r4
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	f7f5 ff68 	bl	80002bc <__adddf3>
 800a3ec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3f0:	4604      	mov	r4, r0
 800a3f2:	460d      	mov	r5, r1
 800a3f4:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800a3f8:	f7f6 f912 	bl	8000620 <__aeabi_dmul>
 800a3fc:	4602      	mov	r2, r0
 800a3fe:	460b      	mov	r3, r1
 800a400:	4620      	mov	r0, r4
 800a402:	4629      	mov	r1, r5
 800a404:	f7f5 ff5a 	bl	80002bc <__adddf3>
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a408:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a40c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a410:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a414:	f7f6 f904 	bl	8000620 <__aeabi_dmul>
 800a418:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a41c:	4604      	mov	r4, r0
 800a41e:	460d      	mov	r5, r1
 800a420:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a424:	f7f6 f8fc 	bl	8000620 <__aeabi_dmul>
 800a428:	4602      	mov	r2, r0
 800a42a:	460b      	mov	r3, r1
 800a42c:	4620      	mov	r0, r4
 800a42e:	4629      	mov	r1, r5
 800a430:	f7f5 ff44 	bl	80002bc <__adddf3>
 800a434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a438:	4604      	mov	r4, r0
 800a43a:	460d      	mov	r5, r1
 800a43c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a440:	f7f6 f8ee 	bl	8000620 <__aeabi_dmul>
 800a444:	4602      	mov	r2, r0
 800a446:	460b      	mov	r3, r1
 800a448:	4620      	mov	r0, r4
 800a44a:	4629      	mov	r1, r5
 800a44c:	f7f5 ff36 	bl	80002bc <__adddf3>
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a450:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a454:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a458:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a45c:	f7f6 f8e0 	bl	8000620 <__aeabi_dmul>
 800a460:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a464:	4604      	mov	r4, r0
 800a466:	460d      	mov	r5, r1
 800a468:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a46c:	f7f6 f8d8 	bl	8000620 <__aeabi_dmul>
 800a470:	4602      	mov	r2, r0
 800a472:	460b      	mov	r3, r1
 800a474:	4620      	mov	r0, r4
 800a476:	4629      	mov	r1, r5
 800a478:	f7f5 ff20 	bl	80002bc <__adddf3>
 800a47c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a480:	4604      	mov	r4, r0
 800a482:	460d      	mov	r5, r1
 800a484:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800a488:	f7f6 f8ca 	bl	8000620 <__aeabi_dmul>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4620      	mov	r0, r4
 800a492:	4629      	mov	r1, r5
 800a494:	f7f5 ff12 	bl	80002bc <__adddf3>
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a498:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a49c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a4a0:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800a4a4:	f7f6 f8bc 	bl	8000620 <__aeabi_dmul>
 800a4a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	460d      	mov	r5, r1
 800a4b0:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800a4b4:	f7f6 f8b4 	bl	8000620 <__aeabi_dmul>
 800a4b8:	4602      	mov	r2, r0
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	4620      	mov	r0, r4
 800a4be:	4629      	mov	r1, r5
 800a4c0:	f7f5 fefc 	bl	80002bc <__adddf3>
 800a4c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	460d      	mov	r5, r1
 800a4cc:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800a4d0:	f7f6 f8a6 	bl	8000620 <__aeabi_dmul>
 800a4d4:	4602      	mov	r2, r0
 800a4d6:	460b      	mov	r3, r1
 800a4d8:	4620      	mov	r0, r4
 800a4da:	4629      	mov	r1, r5
 800a4dc:	f7f5 feee 	bl	80002bc <__adddf3>

	float alpha = yw_test / yw_ref;
 800a4e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a4e4:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
	float alpha = yw_test / yw_ref;
 800a4e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4ec:	f7f6 f9c2 	bl	8000874 <__aeabi_ddiv>
 800a4f0:	f7f6 fb8e 	bl	8000c10 <__aeabi_d2f>
	float delta_e_rms = 0;
	float sum_delta_e = 0;
	float sum_delta_c = 0;
 800a4f4:	ed5f 8a8a 	vldr	s17, [pc, #-552]	; 800a2d0 <cqs_func+0x5e0>
 800a4f8:	f8df b390 	ldr.w	fp, [pc, #912]	; 800a88c <cqs_func+0xb9c>
	float alpha = yw_test / yw_ref;
 800a4fc:	901c      	str	r0, [sp, #112]	; 0x70
 800a4fe:	f04f 0a00 	mov.w	sl, #0
	float sum_delta_e = 0;
 800a502:	eef0 9a68 	vmov.f32	s19, s17
	float delta_e_rms = 0;
 800a506:	eeb0 aa68 	vmov.f32	s20, s17

	for (int i = 0; i < 15; i++)
	{
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a50a:	981c      	ldr	r0, [sp, #112]	; 0x70
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;

		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a50c:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800a890 <cqs_func+0xba0>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];

		float y_tmp = cbrt(y_ref[i] / yw_ref);
		float L_ref = 116* y_tmp - 16;
 800a510:	ed9f 9ad3 	vldr	s18, [pc, #844]	; 800a860 <cqs_func+0xb70>
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a514:	f7f6 f830 	bl	8000578 <__aeabi_f2d>
 800a518:	4bd2      	ldr	r3, [pc, #840]	; (800a864 <cqs_func+0xb74>)
 800a51a:	4453      	add	r3, sl
 800a51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a520:	4604      	mov	r4, r0
 800a522:	460d      	mov	r5, r1
 800a524:	f7f6 f87c 	bl	8000620 <__aeabi_dmul>
 800a528:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a52c:	f7f6 f878 	bl	8000620 <__aeabi_dmul>
 800a530:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a534:	f7f6 f99e 	bl	8000874 <__aeabi_ddiv>
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a538:	4bcb      	ldr	r3, [pc, #812]	; (800a868 <cqs_func+0xb78>)
 800a53a:	4453      	add	r3, sl
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a53c:	4606      	mov	r6, r0
 800a53e:	460f      	mov	r7, r1
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	4620      	mov	r0, r4
 800a546:	4629      	mov	r1, r5
 800a548:	f7f6 f86a 	bl	8000620 <__aeabi_dmul>
 800a54c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a550:	f7f6 f866 	bl	8000620 <__aeabi_dmul>
 800a554:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a558:	f7f6 f98c 	bl	8000874 <__aeabi_ddiv>
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800a55c:	4bc3      	ldr	r3, [pc, #780]	; (800a86c <cqs_func+0xb7c>)
 800a55e:	4453      	add	r3, sl
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a560:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	4620      	mov	r0, r4
 800a56a:	4629      	mov	r1, r5
 800a56c:	f7f6 f858 	bl	8000620 <__aeabi_dmul>
 800a570:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a574:	f7f6 f854 	bl	8000620 <__aeabi_dmul>
 800a578:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a57c:	f7f6 f97a 	bl	8000874 <__aeabi_ddiv>
 800a580:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800a584:	49ba      	ldr	r1, [pc, #744]	; (800a870 <cqs_func+0xb80>)
 800a586:	4451      	add	r1, sl
 800a588:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a58c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a590:	f7f6 f970 	bl	8000874 <__aeabi_ddiv>
 800a594:	ec41 0b10 	vmov	d0, r0, r1
 800a598:	f01a faf2 	bl	8024b80 <cbrt>
 800a59c:	ec51 0b10 	vmov	r0, r1, d0
 800a5a0:	f7f6 fb36 	bl	8000c10 <__aeabi_d2f>
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a5a4:	49b3      	ldr	r1, [pc, #716]	; (800a874 <cqs_func+0xb84>)
 800a5a6:	4451      	add	r1, sl
 800a5a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800a5ac:	ee0a 0a90 	vmov	s21, r0
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a5b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5b4:	f7f6 f95e 	bl	8000874 <__aeabi_ddiv>
 800a5b8:	ec41 0b10 	vmov	d0, r0, r1
 800a5bc:	f01a fae0 	bl	8024b80 <cbrt>
 800a5c0:	ee1a 0a90 	vmov	r0, s21
 800a5c4:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800a5c8:	f7f5 ffd6 	bl	8000578 <__aeabi_f2d>
 800a5cc:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	460d      	mov	r5, r1
 800a5d4:	4602      	mov	r2, r0
 800a5d6:	460b      	mov	r3, r1
 800a5d8:	ec51 0b10 	vmov	r0, r1, d0
 800a5dc:	f7f5 fe6c 	bl	80002b8 <__aeabi_dsub>
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	4ba5      	ldr	r3, [pc, #660]	; (800a878 <cqs_func+0xb88>)
 800a5e4:	f7f6 f81c 	bl	8000620 <__aeabi_dmul>
 800a5e8:	f7f6 fb12 	bl	8000c10 <__aeabi_d2f>
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a5ec:	49a3      	ldr	r1, [pc, #652]	; (800a87c <cqs_func+0xb8c>)
 800a5ee:	4451      	add	r1, sl
 800a5f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a5f4:	ee0b 0a90 	vmov	s23, r0
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a5f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5fc:	f7f6 f93a 	bl	8000874 <__aeabi_ddiv>
 800a600:	ec41 0b10 	vmov	d0, r0, r1
 800a604:	f01a fabc 	bl	8024b80 <cbrt>
 800a608:	4620      	mov	r0, r4
 800a60a:	ec53 2b10 	vmov	r2, r3, d0
 800a60e:	4629      	mov	r1, r5
 800a610:	f7f5 fe52 	bl	80002b8 <__aeabi_dsub>
 800a614:	2200      	movs	r2, #0
 800a616:	4b9a      	ldr	r3, [pc, #616]	; (800a880 <cqs_func+0xb90>)
 800a618:	f7f6 f802 	bl	8000620 <__aeabi_dmul>
 800a61c:	f7f6 faf8 	bl	8000c10 <__aeabi_d2f>
		float L_ref = 116* y_tmp - 16;
 800a620:	eebb 8a00 	vmov.f32	s16, #176	; 0xc1800000 -16.0
 800a624:	eef0 ca48 	vmov.f32	s25, s16
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a628:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
		float L_ref = 116* y_tmp - 16;
 800a62c:	eeea ca89 	vfma.f32	s25, s21, s18
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a630:	4639      	mov	r1, r7
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a632:	ee0a 0a90 	vmov	s21, r0
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a636:	4630      	mov	r0, r6
 800a638:	f7f5 fff2 	bl	8000620 <__aeabi_dmul>
 800a63c:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800a640:	4604      	mov	r4, r0
 800a642:	460d      	mov	r5, r1
 800a644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a648:	f7f5 ffea 	bl	8000620 <__aeabi_dmul>
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	4620      	mov	r0, r4
 800a652:	4629      	mov	r1, r5
 800a654:	f7f5 fe32 	bl	80002bc <__adddf3>
 800a658:	e9d8 230a 	ldrd	r2, r3, [r8, #40]	; 0x28
 800a65c:	4604      	mov	r4, r0
 800a65e:	460d      	mov	r5, r1
 800a660:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a664:	f7f5 ffdc 	bl	8000620 <__aeabi_dmul>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4620      	mov	r0, r4
 800a66e:	4629      	mov	r1, r5
 800a670:	f7f5 fe24 	bl	80002bc <__adddf3>

		y_tmp = cbrt(Y_ic_test / yw_test);
 800a674:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a678:	f7f6 f8fc 	bl	8000874 <__aeabi_ddiv>
 800a67c:	ec41 0b10 	vmov	d0, r0, r1
 800a680:	f01a fa7e 	bl	8024b80 <cbrt>
 800a684:	ec51 0b10 	vmov	r0, r1, d0
 800a688:	f7f6 fac2 	bl	8000c10 <__aeabi_d2f>
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800a68c:	e9d8 2300 	ldrd	r2, r3, [r8]
		y_tmp = cbrt(Y_ic_test / yw_test);
 800a690:	ee0b 0a10 	vmov	s22, r0
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800a694:	4639      	mov	r1, r7
 800a696:	4630      	mov	r0, r6
 800a698:	f7f5 ffc2 	bl	8000620 <__aeabi_dmul>
 800a69c:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	460d      	mov	r5, r1
 800a6a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a6a8:	f7f5 ffba 	bl	8000620 <__aeabi_dmul>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	460b      	mov	r3, r1
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	f7f5 fe02 	bl	80002bc <__adddf3>
 800a6b8:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800a6bc:	4604      	mov	r4, r0
 800a6be:	460d      	mov	r5, r1
 800a6c0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a6c4:	f7f5 ffac 	bl	8000620 <__aeabi_dmul>
 800a6c8:	4602      	mov	r2, r0
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	f7f5 fdf4 	bl	80002bc <__adddf3>
		float L_test = 116 * y_tmp - 16;
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800a6d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6d8:	f7f6 f8cc 	bl	8000874 <__aeabi_ddiv>
 800a6dc:	ec41 0b10 	vmov	d0, r0, r1
 800a6e0:	f01a fa4e 	bl	8024b80 <cbrt>
 800a6e4:	ee1b 0a10 	vmov	r0, s22
 800a6e8:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800a6ec:	f7f5 ff44 	bl	8000578 <__aeabi_f2d>
 800a6f0:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	460d      	mov	r5, r1
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	ec51 0b10 	vmov	r0, r1, d0
 800a700:	f7f5 fdda 	bl	80002b8 <__aeabi_dsub>
 800a704:	2200      	movs	r2, #0
 800a706:	4b5c      	ldr	r3, [pc, #368]	; (800a878 <cqs_func+0xb88>)
 800a708:	f7f5 ff8a 	bl	8000620 <__aeabi_dmul>
 800a70c:	f7f6 fa80 	bl	8000c10 <__aeabi_d2f>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800a710:	e9d8 230c 	ldrd	r2, r3, [r8, #48]	; 0x30
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800a714:	ee0c 0a10 	vmov	s24, r0
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800a718:	4639      	mov	r1, r7
 800a71a:	4630      	mov	r0, r6
 800a71c:	f7f5 ff80 	bl	8000620 <__aeabi_dmul>
 800a720:	e9d8 230e 	ldrd	r2, r3, [r8, #56]	; 0x38
 800a724:	4606      	mov	r6, r0
 800a726:	460f      	mov	r7, r1
 800a728:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a72c:	f7f5 ff78 	bl	8000620 <__aeabi_dmul>
 800a730:	4602      	mov	r2, r0
 800a732:	460b      	mov	r3, r1
 800a734:	4630      	mov	r0, r6
 800a736:	4639      	mov	r1, r7
 800a738:	f7f5 fdc0 	bl	80002bc <__adddf3>
 800a73c:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
 800a740:	4606      	mov	r6, r0
 800a742:	460f      	mov	r7, r1
 800a744:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a748:	f7f5 ff6a 	bl	8000620 <__aeabi_dmul>
 800a74c:	4602      	mov	r2, r0
 800a74e:	460b      	mov	r3, r1
 800a750:	4630      	mov	r0, r6
 800a752:	4639      	mov	r1, r7
 800a754:	f7f5 fdb2 	bl	80002bc <__adddf3>
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800a758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a75c:	f7f6 f88a 	bl	8000874 <__aeabi_ddiv>
 800a760:	ec41 0b10 	vmov	d0, r0, r1
 800a764:	f01a fa0c 	bl	8024b80 <cbrt>
 800a768:	4620      	mov	r0, r4
 800a76a:	ec53 2b10 	vmov	r2, r3, d0
 800a76e:	4629      	mov	r1, r5
 800a770:	f7f5 fda2 	bl	80002b8 <__aeabi_dsub>
 800a774:	2200      	movs	r2, #0
 800a776:	4b42      	ldr	r3, [pc, #264]	; (800a880 <cqs_func+0xb90>)
 800a778:	f7f5 ff52 	bl	8000620 <__aeabi_dmul>
 800a77c:	f7f6 fa48 	bl	8000c10 <__aeabi_d2f>
		float L_test = 116 * y_tmp - 16;
 800a780:	eeab 8a09 	vfma.f32	s16, s22, s18
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800a784:	ee0b 0a10 	vmov	s22, r0

		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a788:	ee6b 7a0b 	vmul.f32	s15, s22, s22
		float L_test = 116 * y_tmp - 16;
 800a78c:	eeb0 9a48 	vmov.f32	s18, s16
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a790:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800a794:	ee17 0a90 	vmov	r0, s15
 800a798:	f7f5 feee 	bl	8000578 <__aeabi_f2d>
 800a79c:	ec41 0b10 	vmov	d0, r0, r1
 800a7a0:	f01a fda2 	bl	80252e8 <sqrt>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a7a4:	ee6a 7aaa 	vmul.f32	s15, s21, s21
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a7a8:	ec55 4b10 	vmov	r4, r5, d0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a7ac:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800a7b0:	ee17 0a90 	vmov	r0, s15
 800a7b4:	f7f5 fee0 	bl	8000578 <__aeabi_f2d>
 800a7b8:	ec41 0b10 	vmov	d0, r0, r1
 800a7bc:	f01a fd94 	bl	80252e8 <sqrt>
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a7c0:	4629      	mov	r1, r5
 800a7c2:	4620      	mov	r0, r4
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a7c4:	ed8d 0b0c 	vstr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a7c8:	f7f6 fa22 	bl	8000c10 <__aeabi_d2f>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a7cc:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a7d0:	ee08 0a10 	vmov	s16, r0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a7d4:	ec51 0b10 	vmov	r0, r1, d0
 800a7d8:	f7f6 fa1a 	bl	8000c10 <__aeabi_d2f>
		float delta_c = delta_c_test - delta_c_ref;
 800a7dc:	ee07 0a90 	vmov	s15, r0

		bar_CQS = 0.9;
 800a7e0:	a11d      	add	r1, pc, #116	; (adr r1, 800a858 <cqs_func+0xb68>)
 800a7e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7e6:	4b27      	ldr	r3, [pc, #156]	; (800a884 <cqs_func+0xb94>)
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a7e8:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800a888 <cqs_func+0xb98>
		bar_CQS = 0.9;
 800a7ec:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a7f0:	210d      	movs	r1, #13
 800a7f2:	2055      	movs	r0, #85	; 0x55
		float delta_c = delta_c_test - delta_c_ref;
 800a7f4:	ee38 8a67 	vsub.f32	s16, s16, s15
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a7f8:	f00a ff50 	bl	801569c <GUI_Bar_Measure>
	
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800a7fc:	ee79 7a6c 	vsub.f32	s15, s18, s25
 800a800:	ee17 0a90 	vmov	r0, s15
 800a804:	f7f5 feb8 	bl	8000578 <__aeabi_f2d>
 800a808:	ee7c 7a6b 	vsub.f32	s15, s24, s23
 800a80c:	4606      	mov	r6, r0
 800a80e:	ee17 0a90 	vmov	r0, s15
 800a812:	460f      	mov	r7, r1
 800a814:	f7f5 feb0 	bl	8000578 <__aeabi_f2d>
 800a818:	ee7b 7a6a 	vsub.f32	s15, s22, s21
 800a81c:	4680      	mov	r8, r0
 800a81e:	ee17 0a90 	vmov	r0, s15
 800a822:	4689      	mov	r9, r1
 800a824:	f7f5 fea8 	bl	8000578 <__aeabi_f2d>
 800a828:	4632      	mov	r2, r6
 800a82a:	4604      	mov	r4, r0
 800a82c:	460d      	mov	r5, r1
 800a82e:	463b      	mov	r3, r7
 800a830:	4630      	mov	r0, r6
 800a832:	4639      	mov	r1, r7
 800a834:	f7f5 fef4 	bl	8000620 <__aeabi_dmul>
 800a838:	4642      	mov	r2, r8
 800a83a:	4606      	mov	r6, r0
 800a83c:	460f      	mov	r7, r1
 800a83e:	464b      	mov	r3, r9
 800a840:	4640      	mov	r0, r8
 800a842:	4649      	mov	r1, r9
 800a844:	f7f5 feec 	bl	8000620 <__aeabi_dmul>
 800a848:	4602      	mov	r2, r0
 800a84a:	460b      	mov	r3, r1
 800a84c:	4630      	mov	r0, r6
 800a84e:	4639      	mov	r1, r7
 800a850:	f7f5 fd34 	bl	80002bc <__adddf3>
 800a854:	e01e      	b.n	800a894 <cqs_func+0xba4>
 800a856:	bf00      	nop
 800a858:	cccccccd 	.word	0xcccccccd
 800a85c:	3feccccc 	.word	0x3feccccc
 800a860:	42e80000 	.word	0x42e80000
 800a864:	2008bfd8 	.word	0x2008bfd8
 800a868:	2008c160 	.word	0x2008c160
 800a86c:	2008bed8 	.word	0x2008bed8
 800a870:	2008c0e8 	.word	0x2008c0e8
 800a874:	2008bf58 	.word	0x2008bf58
 800a878:	407f4000 	.word	0x407f4000
 800a87c:	2008c050 	.word	0x2008c050
 800a880:	40690000 	.word	0x40690000
 800a884:	2008bf50 	.word	0x2008bf50
 800a888:	3f666666 	.word	0x3f666666
 800a88c:	2000319b 	.word	0x2000319b
 800a890:	20000140 	.word	0x20000140
 800a894:	4622      	mov	r2, r4
 800a896:	4606      	mov	r6, r0
 800a898:	460f      	mov	r7, r1
 800a89a:	462b      	mov	r3, r5
 800a89c:	4620      	mov	r0, r4
 800a89e:	4629      	mov	r1, r5
 800a8a0:	f7f5 febe 	bl	8000620 <__aeabi_dmul>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	f7f5 fd06 	bl	80002bc <__adddf3>
 800a8b0:	ec41 0b10 	vmov	d0, r0, r1
 800a8b4:	f01a fd18 	bl	80252e8 <sqrt>
 800a8b8:	ec51 0b10 	vmov	r0, r1, d0
 800a8bc:	f7f6 f9a8 	bl	8000c10 <__aeabi_d2f>
		float E_sat = delta_E_CQS;
		if (delta_c > 0)
 800a8c0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800a8c8:	ee09 0a10 	vmov	s18, r0
		if (delta_c > 0)
 800a8cc:	f340 82a4 	ble.w	800ae18 <cqs_func+0x1128>
		{
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800a8d0:	ee68 7a48 	vnmul.f32	s15, s16, s16
 800a8d4:	eee9 7a09 	vfma.f32	s15, s18, s18
 800a8d8:	ee17 0a90 	vmov	r0, s15
 800a8dc:	f7f5 fe4c 	bl	8000578 <__aeabi_f2d>
 800a8e0:	ec41 0b10 	vmov	d0, r0, r1
 800a8e4:	f01a fd00 	bl	80252e8 <sqrt>
 800a8e8:	ec51 0b10 	vmov	r0, r1, d0
 800a8ec:	f7f6 f990 	bl	8000c10 <__aeabi_d2f>
			sum_delta_c += delta_c;
 800a8f0:	ee78 8a88 	vadd.f32	s17, s17, s16
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800a8f4:	ee07 0a90 	vmov	s15, r0
		}			

		delta_e_rms += (E_sat*E_sat);
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800a8f8:	ee17 0a90 	vmov	r0, s15
		delta_e_rms += (E_sat*E_sat);
 800a8fc:	eea7 aaa7 	vfma.f32	s20, s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800a900:	f7f5 fe3a 	bl	8000578 <__aeabi_f2d>
 800a904:	a3bc      	add	r3, pc, #752	; (adr r3, 800abf8 <cqs_func+0xf08>)
 800a906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90a:	f7f5 fe89 	bl	8000620 <__aeabi_dmul>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	2000      	movs	r0, #0
 800a914:	49c8      	ldr	r1, [pc, #800]	; (800ac38 <cqs_func+0xf48>)
 800a916:	4cc9      	ldr	r4, [pc, #804]	; (800ac3c <cqs_func+0xf4c>)
 800a918:	f7f5 fcce 	bl	80002b8 <__aeabi_dsub>
 800a91c:	2200      	movs	r2, #0
 800a91e:	4bc8      	ldr	r3, [pc, #800]	; (800ac40 <cqs_func+0xf50>)
 800a920:	f7f5 ffa8 	bl	8000874 <__aeabi_ddiv>
 800a924:	ec41 0b10 	vmov	d0, r0, r1
 800a928:	f01a fa6a 	bl	8024e00 <exp>
 800a92c:	2200      	movs	r2, #0
 800a92e:	4bc5      	ldr	r3, [pc, #788]	; (800ac44 <cqs_func+0xf54>)
 800a930:	ec51 0b10 	vmov	r0, r1, d0
 800a934:	f7f5 fcc2 	bl	80002bc <__adddf3>
 800a938:	ec41 0b10 	vmov	d0, r0, r1
 800a93c:	f01a fadc 	bl	8024ef8 <log>
 800a940:	2200      	movs	r2, #0
 800a942:	ec51 0b10 	vmov	r0, r1, d0
 800a946:	4bbe      	ldr	r3, [pc, #760]	; (800ac40 <cqs_func+0xf50>)
 800a948:	f7f5 fe6a 	bl	8000620 <__aeabi_dmul>
 800a94c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a950:	f7f5 fe66 	bl	8000620 <__aeabi_dmul>
 800a954:	f7f6 f95c 	bl	8000c10 <__aeabi_d2f>
 800a958:	ee07 0a90 	vmov	s15, r0
 800a95c:	4bba      	ldr	r3, [pc, #744]	; (800ac48 <cqs_func+0xf58>)
		Q_i[i] = (uint8_t)Q_i_temp;		
 800a95e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800a962:	6018      	str	r0, [r3, #0]
 800a964:	f10a 0a08 	add.w	sl, sl, #8
		Q_i[i] = (uint8_t)Q_i_temp;		
 800a968:	ee17 3a90 	vmov	r3, s15
	for (int i = 0; i < 15; i++)
 800a96c:	f1ba 0f78 	cmp.w	sl, #120	; 0x78
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
 800a970:	eee9 9a09 	vfma.f32	s19, s18, s18
		Q_i[i] = (uint8_t)Q_i_temp;		
 800a974:	f80b 3f01 	strb.w	r3, [fp, #1]!
	for (int i = 0; i < 15; i++)
 800a978:	f47f adc7 	bne.w	800a50a <cqs_func+0x81a>
	}
	delta_e_rms /= 15;
 800a97c:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
	delta_e_rms = sqrt(delta_e_rms);
 800a980:	eeca 7a08 	vdiv.f32	s15, s20, s16
 800a984:	ee17 0a90 	vmov	r0, s15
 800a988:	f7f5 fdf6 	bl	8000578 <__aeabi_f2d>
 800a98c:	ec41 0b10 	vmov	d0, r0, r1
 800a990:	f01a fcaa 	bl	80252e8 <sqrt>
 800a994:	ec51 0b10 	vmov	r0, r1, d0
 800a998:	f7f6 f93a 	bl	8000c10 <__aeabi_d2f>
	sum_delta_e /= 15;
	sum_delta_e = sqrt(sum_delta_e);
 800a99c:	eec9 7a88 	vdiv.f32	s15, s19, s16
	delta_e_rms = sqrt(delta_e_rms);
 800a9a0:	ee09 0a10 	vmov	s18, r0
	sum_delta_e = sqrt(sum_delta_e);
 800a9a4:	ee17 0a90 	vmov	r0, s15
 800a9a8:	f7f5 fde6 	bl	8000578 <__aeabi_f2d>
 800a9ac:	ec41 0b10 	vmov	d0, r0, r1
 800a9b0:	f01a fc9a 	bl	80252e8 <sqrt>
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800a9b4:	ee19 0a10 	vmov	r0, s18
	sum_delta_e = sqrt(sum_delta_e);
 800a9b8:	ec59 8b10 	vmov	r8, r9, d0
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800a9bc:	f7f5 fddc 	bl	8000578 <__aeabi_f2d>
 800a9c0:	a38d      	add	r3, pc, #564	; (adr r3, 800abf8 <cqs_func+0xf08>)
 800a9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c6:	f7f5 fe2b 	bl	8000620 <__aeabi_dmul>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	4999      	ldr	r1, [pc, #612]	; (800ac38 <cqs_func+0xf48>)
 800a9d2:	f7f5 fc71 	bl	80002b8 <__aeabi_dsub>
 800a9d6:	f7f6 f91b 	bl	8000c10 <__aeabi_d2f>
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800a9da:	ee06 0a90 	vmov	s13, r0
 800a9de:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800a9e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9e6:	ee17 0a10 	vmov	r0, s14
 800a9ea:	f7f5 fdc5 	bl	8000578 <__aeabi_f2d>
 800a9ee:	ec41 0b10 	vmov	d0, r0, r1
 800a9f2:	f01a fa05 	bl	8024e00 <exp>
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	4b92      	ldr	r3, [pc, #584]	; (800ac44 <cqs_func+0xf54>)
 800a9fa:	ec51 0b10 	vmov	r0, r1, d0
 800a9fe:	f7f5 fc5d 	bl	80002bc <__adddf3>
 800aa02:	ec41 0b10 	vmov	d0, r0, r1
 800aa06:	f01a fa77 	bl	8024ef8 <log>

	 Qa_temp = Mcct * Qa0_100;
 800aa0a:	e9d4 6700 	ldrd	r6, r7, [r4]
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800aa0e:	ec51 0b10 	vmov	r0, r1, d0
 800aa12:	2200      	movs	r2, #0
 800aa14:	4b8a      	ldr	r3, [pc, #552]	; (800ac40 <cqs_func+0xf50>)
 800aa16:	f7f5 fe03 	bl	8000620 <__aeabi_dmul>
 800aa1a:	f7f6 f8f9 	bl	8000c10 <__aeabi_d2f>
	 Qa_temp = Mcct * Qa0_100;
 800aa1e:	f7f5 fdab 	bl	8000578 <__aeabi_f2d>
 800aa22:	4632      	mov	r2, r6
 800aa24:	463b      	mov	r3, r7
 800aa26:	f7f5 fdfb 	bl	8000620 <__aeabi_dmul>
 800aa2a:	f7f6 f8f1 	bl	8000c10 <__aeabi_d2f>
 800aa2e:	ee07 0a90 	vmov	s15, r0
 800aa32:	4b86      	ldr	r3, [pc, #536]	; (800ac4c <cqs_func+0xf5c>)
	 Qa = (uint8_t)Qa_temp;
 800aa34:	4a86      	ldr	r2, [pc, #536]	; (800ac50 <cqs_func+0xf60>)
	 Qa_temp = Mcct * Qa0_100;
 800aa36:	6018      	str	r0, [r3, #0]
	 Qa = (uint8_t)Qa_temp;
 800aa38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sum_delta_e = sqrt(sum_delta_e);
 800aa3c:	4649      	mov	r1, r9
	 Qa = (uint8_t)Qa_temp;
 800aa3e:	ee17 3a90 	vmov	r3, s15
	sum_delta_e = sqrt(sum_delta_e);
 800aa42:	4640      	mov	r0, r8
	 Qa = (uint8_t)Qa_temp;
 800aa44:	7013      	strb	r3, [r2, #0]
	sum_delta_e = sqrt(sum_delta_e);
 800aa46:	f7f6 f8e3 	bl	8000c10 <__aeabi_d2f>
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800aa4a:	f7f5 fd95 	bl	8000578 <__aeabi_f2d>
 800aa4e:	a36c      	add	r3, pc, #432	; (adr r3, 800ac00 <cqs_func+0xf10>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f7f5 fde4 	bl	8000620 <__aeabi_dmul>
 800aa58:	4602      	mov	r2, r0
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	4976      	ldr	r1, [pc, #472]	; (800ac38 <cqs_func+0xf48>)
 800aa60:	f7f5 fc2a 	bl	80002b8 <__aeabi_dsub>
 800aa64:	2200      	movs	r2, #0
 800aa66:	4b76      	ldr	r3, [pc, #472]	; (800ac40 <cqs_func+0xf50>)
 800aa68:	f7f5 ff04 	bl	8000874 <__aeabi_ddiv>
 800aa6c:	ec41 0b10 	vmov	d0, r0, r1
 800aa70:	f01a f9c6 	bl	8024e00 <exp>
 800aa74:	2200      	movs	r2, #0
 800aa76:	4b73      	ldr	r3, [pc, #460]	; (800ac44 <cqs_func+0xf54>)
 800aa78:	ec51 0b10 	vmov	r0, r1, d0
 800aa7c:	f7f5 fc1c 	bl	80002b8 <__aeabi_dsub>
 800aa80:	ec41 0b10 	vmov	d0, r0, r1
 800aa84:	f01a fa38 	bl	8024ef8 <log>
 800aa88:	2200      	movs	r2, #0
 800aa8a:	4b6d      	ldr	r3, [pc, #436]	; (800ac40 <cqs_func+0xf50>)
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	4639      	mov	r1, r7
 800aa90:	ed8d 0b00 	vstr	d0, [sp]
 800aa94:	f7f5 fdc4 	bl	8000620 <__aeabi_dmul>
 800aa98:	ed9d 0b00 	vldr	d0, [sp]
 800aa9c:	ec53 2b10 	vmov	r2, r3, d0
 800aaa0:	f7f5 fdbe 	bl	8000620 <__aeabi_dmul>
 800aaa4:	f7f6 f8b4 	bl	8000c10 <__aeabi_d2f>
 800aaa8:	ee07 0a90 	vmov	s15, r0
 800aaac:	4b69      	ldr	r3, [pc, #420]	; (800ac54 <cqs_func+0xf64>)
		Qf = (uint8_t)Qf_temp;
 800aaae:	4a6a      	ldr	r2, [pc, #424]	; (800ac58 <cqs_func+0xf68>)
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800aab0:	6018      	str	r0, [r3, #0]
		Qf = (uint8_t)Qf_temp;
 800aab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800aab6:	e9d4 0100 	ldrd	r0, r1, [r4]
		Qf = (uint8_t)Qf_temp;
 800aaba:	ee17 3a90 	vmov	r3, s15
 800aabe:	7013      	strb	r3, [r2, #0]
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800aac0:	2200      	movs	r2, #0
 800aac2:	4b5f      	ldr	r3, [pc, #380]	; (800ac40 <cqs_func+0xf50>)
 800aac4:	f7f5 fdac 	bl	8000620 <__aeabi_dmul>
 800aac8:	eec8 7a88 	vdiv.f32	s15, s17, s16
 800aacc:	4604      	mov	r4, r0
 800aace:	460d      	mov	r5, r1
 800aad0:	ee79 7a67 	vsub.f32	s15, s18, s15
 800aad4:	ee17 0a90 	vmov	r0, s15
 800aad8:	f7f5 fd4e 	bl	8000578 <__aeabi_f2d>
 800aadc:	a34a      	add	r3, pc, #296	; (adr r3, 800ac08 <cqs_func+0xf18>)
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	f7f5 fd9d 	bl	8000620 <__aeabi_dmul>
 800aae6:	4602      	mov	r2, r0
 800aae8:	460b      	mov	r3, r1
 800aaea:	2000      	movs	r0, #0
 800aaec:	4952      	ldr	r1, [pc, #328]	; (800ac38 <cqs_func+0xf48>)
 800aaee:	f7f5 fbe3 	bl	80002b8 <__aeabi_dsub>
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	4b52      	ldr	r3, [pc, #328]	; (800ac40 <cqs_func+0xf50>)
 800aaf6:	f7f5 febd 	bl	8000874 <__aeabi_ddiv>
 800aafa:	ec41 0b10 	vmov	d0, r0, r1
 800aafe:	f01a f97f 	bl	8024e00 <exp>
 800ab02:	2200      	movs	r2, #0
 800ab04:	4b4f      	ldr	r3, [pc, #316]	; (800ac44 <cqs_func+0xf54>)
 800ab06:	ec51 0b10 	vmov	r0, r1, d0
 800ab0a:	f7f5 fbd5 	bl	80002b8 <__aeabi_dsub>
 800ab0e:	ec41 0b10 	vmov	d0, r0, r1
 800ab12:	f01a f9f1 	bl	8024ef8 <log>
 800ab16:	4620      	mov	r0, r4
 800ab18:	ec53 2b10 	vmov	r2, r3, d0
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	f7f5 fd7f 	bl	8000620 <__aeabi_dmul>
 800ab22:	f7f6 f875 	bl	8000c10 <__aeabi_d2f>
 800ab26:	ee07 0a90 	vmov	s15, r0
 800ab2a:	4b4c      	ldr	r3, [pc, #304]	; (800ac5c <cqs_func+0xf6c>)
		Qp = (uint8_t)Qp_temp;
 800ab2c:	4a4c      	ldr	r2, [pc, #304]	; (800ac60 <cqs_func+0xf70>)
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800ab2e:	6018      	str	r0, [r3, #0]
		Qp = (uint8_t)Qp_temp;
 800ab30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	
		bar_CQS = 1.0;
 800ab34:	4943      	ldr	r1, [pc, #268]	; (800ac44 <cqs_func+0xf54>)
		Qp = (uint8_t)Qp_temp;
 800ab36:	ee17 3a90 	vmov	r3, s15
 800ab3a:	7013      	strb	r3, [r2, #0]
		bar_CQS = 1.0;
 800ab3c:	4b49      	ldr	r3, [pc, #292]	; (800ac64 <cqs_func+0xf74>)
 800ab3e:	2000      	movs	r0, #0
 800ab40:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800ab44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ab48:	210d      	movs	r1, #13
 800ab4a:	2055      	movs	r0, #85	; 0x55
 800ab4c:	b02f      	add	sp, #188	; 0xbc
 800ab4e:	ecbd 8b0a 	vpop	{d8-d12}
 800ab52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		GUI_Bar_Measure(85, 13, bar_CQS);
 800ab56:	f00a bda1 	b.w	801569c <GUI_Bar_Measure>
	if (CCT_measure < 5000)
 800ab5a:	9a04      	ldr	r2, [sp, #16]
 800ab5c:	f241 3387 	movw	r3, #4999	; 0x1387
 800ab60:	429a      	cmp	r2, r3
 800ab62:	f67f a928 	bls.w	8009db6 <cqs_func+0xc6>
		if (CCT_measure < 7000)
 800ab66:	9a04      	ldr	r2, [sp, #16]
 800ab68:	f641 3357 	movw	r3, #6999	; 0x1b57
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	d97b      	bls.n	800ac68 <cqs_func+0xf78>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ab70:	9804      	ldr	r0, [sp, #16]
 800ab72:	f7f5 fcdf 	bl	8000534 <__aeabi_ui2d>
 800ab76:	ed9f 1b26 	vldr	d1, [pc, #152]	; 800ac10 <cqs_func+0xf20>
 800ab7a:	ec41 0b10 	vmov	d0, r0, r1
 800ab7e:	f01a fa3b 	bl	8024ff8 <pow>
 800ab82:	eddd 7a04 	vldr	s15, [sp, #16]
 800ab86:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800ab8a:	ed8d 0b00 	vstr	d0, [sp]
 800ab8e:	ee68 7a08 	vmul.f32	s15, s16, s16
 800ab92:	ee17 0a90 	vmov	r0, s15
 800ab96:	f7f5 fcef 	bl	8000578 <__aeabi_f2d>
 800ab9a:	4602      	mov	r2, r0
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	a11e      	add	r1, pc, #120	; (adr r1, 800ac18 <cqs_func+0xf28>)
 800aba0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aba4:	f7f5 fe66 	bl	8000874 <__aeabi_ddiv>
 800aba8:	ed9d 0b00 	vldr	d0, [sp]
 800abac:	4604      	mov	r4, r0
 800abae:	ec53 2b10 	vmov	r2, r3, d0
 800abb2:	460d      	mov	r5, r1
 800abb4:	a11a      	add	r1, pc, #104	; (adr r1, 800ac20 <cqs_func+0xf30>)
 800abb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abba:	f7f5 fe5b 	bl	8000874 <__aeabi_ddiv>
 800abbe:	4602      	mov	r2, r0
 800abc0:	460b      	mov	r3, r1
 800abc2:	4620      	mov	r0, r4
 800abc4:	4629      	mov	r1, r5
 800abc6:	f7f5 fb79 	bl	80002bc <__adddf3>
 800abca:	4604      	mov	r4, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800abcc:	ee18 0a10 	vmov	r0, s16
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800abd0:	460d      	mov	r5, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800abd2:	f7f5 fcd1 	bl	8000578 <__aeabi_f2d>
 800abd6:	4602      	mov	r2, r0
 800abd8:	460b      	mov	r3, r1
 800abda:	a113      	add	r1, pc, #76	; (adr r1, 800ac28 <cqs_func+0xf38>)
 800abdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abe0:	f7f5 fe48 	bl	8000874 <__aeabi_ddiv>
 800abe4:	4602      	mov	r2, r0
 800abe6:	460b      	mov	r3, r1
 800abe8:	4620      	mov	r0, r4
 800abea:	4629      	mov	r1, r5
 800abec:	f7f5 fb66 	bl	80002bc <__adddf3>
 800abf0:	a30f      	add	r3, pc, #60	; (adr r3, 800ac30 <cqs_func+0xf40>)
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	e073      	b.n	800ace0 <cqs_func+0xff0>
 800abf8:	cccccccd 	.word	0xcccccccd
 800abfc:	4008cccc 	.word	0x4008cccc
 800ac00:	d70a3d71 	.word	0xd70a3d71
 800ac04:	400770a3 	.word	0x400770a3
 800ac08:	a3d70a3d 	.word	0xa3d70a3d
 800ac0c:	400e3d70 	.word	0x400e3d70
 800ac10:	00000000 	.word	0x00000000
 800ac14:	40080000 	.word	0x40080000
 800ac18:	00000000 	.word	0x00000000
 800ac1c:	413d04e8 	.word	0x413d04e8
 800ac20:	00000001 	.word	0x00000001
 800ac24:	c1dde5cf 	.word	0xc1dde5cf
 800ac28:	28f5c290 	.word	0x28f5c290
 800ac2c:	406eef5c 	.word	0x406eef5c
 800ac30:	a3ec02f3 	.word	0xa3ec02f3
 800ac34:	3fce5753 	.word	0x3fce5753
 800ac38:	40590000 	.word	0x40590000
 800ac3c:	20000188 	.word	0x20000188
 800ac40:	40240000 	.word	0x40240000
 800ac44:	3ff00000 	.word	0x3ff00000
 800ac48:	2008c0e0 	.word	0x2008c0e0
 800ac4c:	2008c1d8 	.word	0x2008c1d8
 800ac50:	200031ab 	.word	0x200031ab
 800ac54:	2008c1dc 	.word	0x2008c1dc
 800ac58:	200031ac 	.word	0x200031ac
 800ac5c:	2008bfd0 	.word	0x2008bfd0
 800ac60:	200031ad 	.word	0x200031ad
 800ac64:	2008bf50 	.word	0x2008bf50
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ac68:	eddd 7a04 	vldr	s15, [sp, #16]
 800ac6c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800ac70:	ee68 8a08 	vmul.f32	s17, s16, s16
 800ac74:	ee68 7a28 	vmul.f32	s15, s16, s17
 800ac78:	ee17 0a90 	vmov	r0, s15
 800ac7c:	f7f5 fc7c 	bl	8000578 <__aeabi_f2d>
 800ac80:	4602      	mov	r2, r0
 800ac82:	460b      	mov	r3, r1
 800ac84:	a181      	add	r1, pc, #516	; (adr r1, 800ae8c <cqs_func+0x119c>)
 800ac86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac8a:	f7f5 fdf3 	bl	8000874 <__aeabi_ddiv>
 800ac8e:	4604      	mov	r4, r0
 800ac90:	ee18 0a90 	vmov	r0, s17
 800ac94:	460d      	mov	r5, r1
 800ac96:	f7f5 fc6f 	bl	8000578 <__aeabi_f2d>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	a17d      	add	r1, pc, #500	; (adr r1, 800ae94 <cqs_func+0x11a4>)
 800aca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aca4:	f7f5 fde6 	bl	8000874 <__aeabi_ddiv>
 800aca8:	4602      	mov	r2, r0
 800acaa:	460b      	mov	r3, r1
 800acac:	4620      	mov	r0, r4
 800acae:	4629      	mov	r1, r5
 800acb0:	f7f5 fb04 	bl	80002bc <__adddf3>
 800acb4:	4604      	mov	r4, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800acb6:	ee18 0a10 	vmov	r0, s16
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800acba:	460d      	mov	r5, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800acbc:	f7f5 fc5c 	bl	8000578 <__aeabi_f2d>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	a175      	add	r1, pc, #468	; (adr r1, 800ae9c <cqs_func+0x11ac>)
 800acc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acca:	f7f5 fdd3 	bl	8000874 <__aeabi_ddiv>
 800acce:	4602      	mov	r2, r0
 800acd0:	460b      	mov	r3, r1
 800acd2:	4620      	mov	r0, r4
 800acd4:	4629      	mov	r1, r5
 800acd6:	f7f5 faf1 	bl	80002bc <__adddf3>
 800acda:	a372      	add	r3, pc, #456	; (adr r3, 800aea4 <cqs_func+0x11b4>)
 800acdc:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800ace0:	f7f5 faec 	bl	80002bc <__adddf3>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ace4:	4b64      	ldr	r3, [pc, #400]	; (800ae78 <cqs_func+0x1188>)
 800ace6:	e9c3 0100 	strd	r0, r1, [r3]
		yD = -3 * xD*xD + 2.87*xD - 0.275;
 800acea:	4b63      	ldr	r3, [pc, #396]	; (800ae78 <cqs_func+0x1188>)
 800acec:	e9d3 4500 	ldrd	r4, r5, [r3]
 800acf0:	2200      	movs	r2, #0
 800acf2:	4b62      	ldr	r3, [pc, #392]	; (800ae7c <cqs_func+0x118c>)
 800acf4:	4620      	mov	r0, r4
 800acf6:	4629      	mov	r1, r5
 800acf8:	f7f5 fc92 	bl	8000620 <__aeabi_dmul>
 800acfc:	4622      	mov	r2, r4
 800acfe:	462b      	mov	r3, r5
 800ad00:	f7f5 fc8e 	bl	8000620 <__aeabi_dmul>
 800ad04:	a346      	add	r3, pc, #280	; (adr r3, 800ae20 <cqs_func+0x1130>)
 800ad06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	460f      	mov	r7, r1
 800ad0e:	4620      	mov	r0, r4
 800ad10:	4629      	mov	r1, r5
 800ad12:	f7f5 fc85 	bl	8000620 <__aeabi_dmul>
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	4639      	mov	r1, r7
 800ad1e:	f7f5 facd 	bl	80002bc <__adddf3>
 800ad22:	a341      	add	r3, pc, #260	; (adr r3, 800ae28 <cqs_func+0x1138>)
 800ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad28:	f7f5 fac6 	bl	80002b8 <__aeabi_dsub>
 800ad2c:	4b54      	ldr	r3, [pc, #336]	; (800ae80 <cqs_func+0x1190>)
 800ad2e:	4606      	mov	r6, r0
 800ad30:	460f      	mov	r7, r1
 800ad32:	e9c3 6700 	strd	r6, r7, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800ad36:	4620      	mov	r0, r4
 800ad38:	a33d      	add	r3, pc, #244	; (adr r3, 800ae30 <cqs_func+0x1140>)
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	4629      	mov	r1, r5
 800ad40:	f7f5 fc6e 	bl	8000620 <__aeabi_dmul>
 800ad44:	a33c      	add	r3, pc, #240	; (adr r3, 800ae38 <cqs_func+0x1148>)
 800ad46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad4a:	f7f5 fab7 	bl	80002bc <__adddf3>
 800ad4e:	a33c      	add	r3, pc, #240	; (adr r3, 800ae40 <cqs_func+0x1150>)
 800ad50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad54:	4680      	mov	r8, r0
 800ad56:	4689      	mov	r9, r1
 800ad58:	4630      	mov	r0, r6
 800ad5a:	4639      	mov	r1, r7
 800ad5c:	f7f5 fc60 	bl	8000620 <__aeabi_dmul>
 800ad60:	4602      	mov	r2, r0
 800ad62:	460b      	mov	r3, r1
 800ad64:	4640      	mov	r0, r8
 800ad66:	4649      	mov	r1, r9
 800ad68:	f7f5 faa6 	bl	80002b8 <__aeabi_dsub>
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800ad6c:	a336      	add	r3, pc, #216	; (adr r3, 800ae48 <cqs_func+0x1158>)
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800ad72:	4680      	mov	r8, r0
 800ad74:	4689      	mov	r9, r1
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800ad76:	4620      	mov	r0, r4
 800ad78:	4629      	mov	r1, r5
 800ad7a:	f7f5 fc51 	bl	8000620 <__aeabi_dmul>
 800ad7e:	4602      	mov	r2, r0
 800ad80:	460b      	mov	r3, r1
 800ad82:	a133      	add	r1, pc, #204	; (adr r1, 800ae50 <cqs_func+0x1160>)
 800ad84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad88:	f7f5 fa96 	bl	80002b8 <__aeabi_dsub>
 800ad8c:	a332      	add	r3, pc, #200	; (adr r3, 800ae58 <cqs_func+0x1168>)
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	4682      	mov	sl, r0
 800ad94:	468b      	mov	fp, r1
 800ad96:	4630      	mov	r0, r6
 800ad98:	4639      	mov	r1, r7
 800ad9a:	f7f5 fc41 	bl	8000620 <__aeabi_dmul>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	4650      	mov	r0, sl
 800ada4:	4659      	mov	r1, fp
 800ada6:	f7f5 fa89 	bl	80002bc <__adddf3>
 800adaa:	f7f5 ff31 	bl	8000c10 <__aeabi_d2f>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800adae:	f7f5 fbe3 	bl	8000578 <__aeabi_f2d>
 800adb2:	4642      	mov	r2, r8
 800adb4:	464b      	mov	r3, r9
 800adb6:	f7f5 fd5d 	bl	8000874 <__aeabi_ddiv>
 800adba:	f7f5 ff29 	bl	8000c10 <__aeabi_d2f>
 800adbe:	4b31      	ldr	r3, [pc, #196]	; (800ae84 <cqs_func+0x1194>)
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800adc0:	4629      	mov	r1, r5
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800adc2:	6018      	str	r0, [r3, #0]
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800adc4:	a326      	add	r3, pc, #152	; (adr r3, 800ae60 <cqs_func+0x1170>)
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	4620      	mov	r0, r4
 800adcc:	f7f5 fc28 	bl	8000620 <__aeabi_dmul>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	a124      	add	r1, pc, #144	; (adr r1, 800ae68 <cqs_func+0x1178>)
 800add6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adda:	f7f5 fa6d 	bl	80002b8 <__aeabi_dsub>
 800adde:	a324      	add	r3, pc, #144	; (adr r3, 800ae70 <cqs_func+0x1180>)
 800ade0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade4:	4604      	mov	r4, r0
 800ade6:	460d      	mov	r5, r1
 800ade8:	4630      	mov	r0, r6
 800adea:	4639      	mov	r1, r7
 800adec:	f7f5 fc18 	bl	8000620 <__aeabi_dmul>
 800adf0:	4602      	mov	r2, r0
 800adf2:	460b      	mov	r3, r1
 800adf4:	4620      	mov	r0, r4
 800adf6:	4629      	mov	r1, r5
 800adf8:	f7f5 fa60 	bl	80002bc <__adddf3>
 800adfc:	f7f5 ff08 	bl	8000c10 <__aeabi_d2f>
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800ae00:	f7f5 fbba 	bl	8000578 <__aeabi_f2d>
 800ae04:	464b      	mov	r3, r9
 800ae06:	4642      	mov	r2, r8
 800ae08:	f7f5 fd34 	bl	8000874 <__aeabi_ddiv>
 800ae0c:	f7f5 ff00 	bl	8000c10 <__aeabi_d2f>
 800ae10:	4b1d      	ldr	r3, [pc, #116]	; (800ae88 <cqs_func+0x1198>)
 800ae12:	6018      	str	r0, [r3, #0]
 800ae14:	f7fe bfd2 	b.w	8009dbc <cqs_func+0xcc>
		float E_sat = delta_E_CQS;
 800ae18:	ee07 0a90 	vmov	s15, r0
 800ae1c:	e56c      	b.n	800a8f8 <cqs_func+0xc08>
 800ae1e:	bf00      	nop
 800ae20:	8f5c28f6 	.word	0x8f5c28f6
 800ae24:	4006f5c2 	.word	0x4006f5c2
 800ae28:	9999999a 	.word	0x9999999a
 800ae2c:	3fd19999 	.word	0x3fd19999
 800ae30:	af4f0d84 	.word	0xaf4f0d84
 800ae34:	3fd06594 	.word	0x3fd06594
 800ae38:	9f559b3d 	.word	0x9f559b3d
 800ae3c:	3f98adab 	.word	0x3f98adab
 800ae40:	487fcb92 	.word	0x487fcb92
 800ae44:	3fe77dbf 	.word	0x3fe77dbf
 800ae48:	17c1bda5 	.word	0x17c1bda5
 800ae4c:	3ffc5326 	.word	0x3ffc5326
 800ae50:	76c8b439 	.word	0x76c8b439
 800ae54:	bff59fbe 	.word	0xbff59fbe
 800ae58:	0aa64c30 	.word	0x0aa64c30
 800ae5c:	4017a546 	.word	0x4017a546
 800ae60:	205bc01a 	.word	0x205bc01a
 800ae64:	403f7141 	.word	0x403f7141
 800ae68:	eb851eb8 	.word	0xeb851eb8
 800ae6c:	3f9eb851 	.word	0x3f9eb851
 800ae70:	ee631f8a 	.word	0xee631f8a
 800ae74:	403e125a 	.word	0x403e125a
 800ae78:	2008c0d8 	.word	0x2008c0d8
 800ae7c:	c0080000 	.word	0xc0080000
 800ae80:	2008c0d0 	.word	0x2008c0d0
 800ae84:	20003194 	.word	0x20003194
 800ae88:	20003198 	.word	0x20003198
 800ae8c:	dc000000 	.word	0xdc000000
 800ae90:	c1f12993 	.word	0xc1f12993
 800ae94:	00000000 	.word	0x00000000
 800ae98:	4146a47c 	.word	0x4146a47c
 800ae9c:	3d70a3d7 	.word	0x3d70a3d7
 800aea0:	4058c70a 	.word	0x4058c70a
 800aea4:	d594f26b 	.word	0xd594f26b
 800aea8:	3fcf3d74 	.word	0x3fcf3d74

0800aeac <CQS_Axes>:
#include "CQS_graph.h"
extern uint8_t TFT_direction;


void CQS_Axes(uint8_t direction){
 800aeac:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800aeae:	bbb8      	cbnz	r0, 800af20 <CQS_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800aeb0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800aeb4:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800aeb8:	2212      	movs	r2, #18
 800aeba:	215f      	movs	r1, #95	; 0x5f
 800aebc:	2010      	movs	r0, #16
 800aebe:	9400      	str	r4, [sp, #0]
 800aec0:	f013 fa2b 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800aec4:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800aec8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800aecc:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800aed0:	2010      	movs	r0, #16
 800aed2:	9400      	str	r4, [sp, #0]
 800aed4:	f013 fa21 	bl	801e31a <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800aed8:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800aedc:	4619      	mov	r1, r3
 800aede:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800aee2:	2010      	movs	r0, #16
 800aee4:	9400      	str	r4, [sp, #0]
 800aee6:	f013 f9bb 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800aeea:	f240 1301 	movw	r3, #257	; 0x101
 800aeee:	4619      	mov	r1, r3
 800aef0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800aef4:	2010      	movs	r0, #16
 800aef6:	9400      	str	r4, [sp, #0]
 800aef8:	f013 f9b2 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800aefc:	23b5      	movs	r3, #181	; 0xb5
 800aefe:	4619      	mov	r1, r3
 800af00:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800af04:	2010      	movs	r0, #16
 800af06:	9400      	str	r4, [sp, #0]
 800af08:	f013 f9aa 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800af0c:	2369      	movs	r3, #105	; 0x69
 800af0e:	9400      	str	r4, [sp, #0]
 800af10:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800af14:	4619      	mov	r1, r3
 800af16:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800af18:	f013 f9a2 	bl	801e260 <TFT_DrawLine>
		}
}
 800af1c:	b002      	add	sp, #8
 800af1e:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800af20:	2801      	cmp	r0, #1
 800af22:	d131      	bne.n	800af88 <CQS_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800af24:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800af28:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af2c:	22ff      	movs	r2, #255	; 0xff
 800af2e:	2146      	movs	r1, #70	; 0x46
 800af30:	20fd      	movs	r0, #253	; 0xfd
 800af32:	9400      	str	r4, [sp, #0]
 800af34:	f013 f9f1 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800af38:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af3c:	22ff      	movs	r2, #255	; 0xff
 800af3e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800af42:	2028      	movs	r0, #40	; 0x28
 800af44:	9400      	str	r4, [sp, #0]
 800af46:	f013 f9e8 	bl	801e31a <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800af4a:	22cc      	movs	r2, #204	; 0xcc
 800af4c:	4610      	mov	r0, r2
 800af4e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af52:	2146      	movs	r1, #70	; 0x46
 800af54:	9400      	str	r4, [sp, #0]
 800af56:	f013 f983 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800af5a:	2297      	movs	r2, #151	; 0x97
 800af5c:	4610      	mov	r0, r2
 800af5e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af62:	2146      	movs	r1, #70	; 0x46
 800af64:	9400      	str	r4, [sp, #0]
 800af66:	f013 f97b 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800af6a:	2262      	movs	r2, #98	; 0x62
 800af6c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af70:	4610      	mov	r0, r2
 800af72:	9400      	str	r4, [sp, #0]
 800af74:	2146      	movs	r1, #70	; 0x46
 800af76:	f013 f973 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800af7a:	9400      	str	r4, [sp, #0]
 800af7c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af80:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800af82:	2146      	movs	r1, #70	; 0x46
 800af84:	4610      	mov	r0, r2
 800af86:	e7c7      	b.n	800af18 <CQS_Axes+0x6c>
	}else if (direction == 0x02)
 800af88:	2802      	cmp	r0, #2
 800af8a:	d1c7      	bne.n	800af1c <CQS_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800af8c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800af90:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af94:	2210      	movs	r2, #16
 800af96:	214a      	movs	r1, #74	; 0x4a
 800af98:	2012      	movs	r0, #18
 800af9a:	9400      	str	r4, [sp, #0]
 800af9c:	f013 f9bd 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800afa0:	234c      	movs	r3, #76	; 0x4c
 800afa2:	22e8      	movs	r2, #232	; 0xe8
 800afa4:	214a      	movs	r1, #74	; 0x4a
 800afa6:	2011      	movs	r0, #17
 800afa8:	9400      	str	r4, [sp, #0]
 800afaa:	f013 f9b6 	bl	801e31a <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800afae:	2244      	movs	r2, #68	; 0x44
 800afb0:	4610      	mov	r0, r2
 800afb2:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800afb6:	2146      	movs	r1, #70	; 0x46
 800afb8:	9400      	str	r4, [sp, #0]
 800afba:	f013 f951 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800afbe:	2279      	movs	r2, #121	; 0x79
 800afc0:	4610      	mov	r0, r2
 800afc2:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800afc6:	2146      	movs	r1, #70	; 0x46
 800afc8:	9400      	str	r4, [sp, #0]
 800afca:	f013 f949 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800afce:	22ae      	movs	r2, #174	; 0xae
 800afd0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800afd4:	4610      	mov	r0, r2
 800afd6:	9400      	str	r4, [sp, #0]
 800afd8:	2146      	movs	r1, #70	; 0x46
 800afda:	f013 f941 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800afde:	9400      	str	r4, [sp, #0]
 800afe0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800afe4:	22e3      	movs	r2, #227	; 0xe3
 800afe6:	e7cc      	b.n	800af82 <CQS_Axes+0xd6>

0800afe8 <CQS_Axes_Measure>:

void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800afe8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800afec:	ac02      	add	r4, sp, #8
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800afee:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800aff0:	2300      	movs	r3, #0
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800aff2:	4688      	mov	r8, r1
 800aff4:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800aff6:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800affa:	2800      	cmp	r0, #0
 800affc:	d15a      	bne.n	800b0b4 <CQS_Axes_Measure+0xcc>
	{
		
		TFT_SetTextColor(TFT_White);
 800affe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b002:	f013 fbb9 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b006:	2063      	movs	r0, #99	; 0x63
 800b008:	f013 fbbc 	bl	801e784 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800b00c:	485c      	ldr	r0, [pc, #368]	; (800b180 <CQS_Axes_Measure+0x198>)
 800b00e:	f013 fbad 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(20, 70, 'a');
 800b012:	2261      	movs	r2, #97	; 0x61
 800b014:	2146      	movs	r1, #70	; 0x46
 800b016:	2014      	movs	r0, #20
 800b018:	f013 fc72 	bl	801e900 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b01c:	4859      	ldr	r0, [pc, #356]	; (800b184 <CQS_Axes_Measure+0x19c>)
 800b01e:	f013 fba5 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(5, 70-2, 'Q');
 800b022:	2251      	movs	r2, #81	; 0x51
 800b024:	2144      	movs	r1, #68	; 0x44
 800b026:	2005      	movs	r0, #5
 800b028:	f013 fc6a 	bl	801e900 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qa);
 800b02c:	4642      	mov	r2, r8
 800b02e:	4956      	ldr	r1, [pc, #344]	; (800b188 <CQS_Axes_Measure+0x1a0>)
 800b030:	4620      	mov	r0, r4
 800b032:	f016 feb5 	bl	8021da0 <sprintf>
		TFT_DisplayString(39, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b036:	2303      	movs	r3, #3
 800b038:	4622      	mov	r2, r4
 800b03a:	2144      	movs	r1, #68	; 0x44
 800b03c:	2027      	movs	r0, #39	; 0x27
 800b03e:	f013 fcb7 	bl	801e9b0 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b042:	484f      	ldr	r0, [pc, #316]	; (800b180 <CQS_Axes_Measure+0x198>)
 800b044:	f013 fb92 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(112, 70, 'p');
 800b048:	2270      	movs	r2, #112	; 0x70
 800b04a:	4610      	mov	r0, r2
 800b04c:	2146      	movs	r1, #70	; 0x46
 800b04e:	f013 fc57 	bl	801e900 <TFT_DrawChar>

		TFT_SetFont(&Font16EN_arch_big);
 800b052:	484c      	ldr	r0, [pc, #304]	; (800b184 <CQS_Axes_Measure+0x19c>)
 800b054:	f013 fb8a 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(93, 70-2, 'Q');
 800b058:	2251      	movs	r2, #81	; 0x51
 800b05a:	2144      	movs	r1, #68	; 0x44
 800b05c:	205d      	movs	r0, #93	; 0x5d
 800b05e:	f013 fc4f 	bl	801e900 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qp);
 800b062:	463a      	mov	r2, r7
 800b064:	4948      	ldr	r1, [pc, #288]	; (800b188 <CQS_Axes_Measure+0x1a0>)
 800b066:	4620      	mov	r0, r4
 800b068:	f016 fe9a 	bl	8021da0 <sprintf>
		TFT_DisplayString(130, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b06c:	2303      	movs	r3, #3
 800b06e:	4622      	mov	r2, r4
 800b070:	2144      	movs	r1, #68	; 0x44
 800b072:	2082      	movs	r0, #130	; 0x82
 800b074:	f013 fc9c 	bl	801e9b0 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b078:	4841      	ldr	r0, [pc, #260]	; (800b180 <CQS_Axes_Measure+0x198>)
 800b07a:	f013 fb77 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(206, 70, 'f');
 800b07e:	2266      	movs	r2, #102	; 0x66
 800b080:	2146      	movs	r1, #70	; 0x46
 800b082:	20ce      	movs	r0, #206	; 0xce
 800b084:	f013 fc3c 	bl	801e900 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b088:	483e      	ldr	r0, [pc, #248]	; (800b184 <CQS_Axes_Measure+0x19c>)
 800b08a:	f013 fb6f 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(191, 70-2, 'Q');
 800b08e:	2251      	movs	r2, #81	; 0x51
 800b090:	2144      	movs	r1, #68	; 0x44
 800b092:	20bf      	movs	r0, #191	; 0xbf
 800b094:	f013 fc34 	bl	801e900 <TFT_DrawChar>

		sprintf (buffer, "%d", Qf);
 800b098:	4632      	mov	r2, r6
 800b09a:	493b      	ldr	r1, [pc, #236]	; (800b188 <CQS_Axes_Measure+0x1a0>)
 800b09c:	4620      	mov	r0, r4
 800b09e:	f016 fe7f 	bl	8021da0 <sprintf>
		TFT_DisplayString(230, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	2144      	movs	r1, #68	; 0x44
 800b0a8:	20e6      	movs	r0, #230	; 0xe6
 800b0aa:	f013 fc81 	bl	801e9b0 <TFT_DisplayString>
		
		sprintf (buffer, "%d", Qf);
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800b0ae:	b002      	add	sp, #8
 800b0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0b4:	4d35      	ldr	r5, [pc, #212]	; (800b18c <CQS_Axes_Measure+0x1a4>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b0b6:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800b0b8:	bf14      	ite	ne
 800b0ba:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b0bc:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b0be:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b0c2:	bf18      	it	ne
 800b0c4:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b0c6:	f013 fb57 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b0ca:	2063      	movs	r0, #99	; 0x63
 800b0cc:	f013 fb5a 	bl	801e784 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800b0d0:	482b      	ldr	r0, [pc, #172]	; (800b180 <CQS_Axes_Measure+0x198>)
 800b0d2:	f013 fb4b 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800b0d6:	2261      	movs	r2, #97	; 0x61
 800b0d8:	2110      	movs	r1, #16
 800b0da:	2064      	movs	r0, #100	; 0x64
 800b0dc:	f013 fc10 	bl	801e900 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b0e0:	4828      	ldr	r0, [pc, #160]	; (800b184 <CQS_Axes_Measure+0x19c>)
 800b0e2:	f013 fb43 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'Q');
 800b0e6:	2251      	movs	r2, #81	; 0x51
 800b0e8:	210e      	movs	r1, #14
 800b0ea:	2055      	movs	r0, #85	; 0x55
 800b0ec:	f013 fc08 	bl	801e900 <TFT_DrawChar>
		sprintf (buffer, "%d", Qa);
 800b0f0:	4642      	mov	r2, r8
 800b0f2:	4925      	ldr	r1, [pc, #148]	; (800b188 <CQS_Axes_Measure+0x1a0>)
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f016 fe53 	bl	8021da0 <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	4622      	mov	r2, r4
 800b0fe:	210e      	movs	r1, #14
 800b100:	207d      	movs	r0, #125	; 0x7d
 800b102:	f013 fc55 	bl	801e9b0 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b106:	481e      	ldr	r0, [pc, #120]	; (800b180 <CQS_Axes_Measure+0x198>)
 800b108:	f013 fb30 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(216, 16, 'p');
 800b10c:	2270      	movs	r2, #112	; 0x70
 800b10e:	2110      	movs	r1, #16
 800b110:	20d8      	movs	r0, #216	; 0xd8
 800b112:	f013 fbf5 	bl	801e900 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b116:	481b      	ldr	r0, [pc, #108]	; (800b184 <CQS_Axes_Measure+0x19c>)
 800b118:	f013 fb28 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(199, 16-2, 'Q');
 800b11c:	2251      	movs	r2, #81	; 0x51
 800b11e:	210e      	movs	r1, #14
 800b120:	20c7      	movs	r0, #199	; 0xc7
 800b122:	f013 fbed 	bl	801e900 <TFT_DrawChar>
		sprintf (buffer, "%d", Qp);
 800b126:	463a      	mov	r2, r7
 800b128:	4917      	ldr	r1, [pc, #92]	; (800b188 <CQS_Axes_Measure+0x1a0>)
 800b12a:	4620      	mov	r0, r4
 800b12c:	f016 fe38 	bl	8021da0 <sprintf>
		TFT_DisplayString(252, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b130:	2303      	movs	r3, #3
 800b132:	4622      	mov	r2, r4
 800b134:	210e      	movs	r1, #14
 800b136:	20fc      	movs	r0, #252	; 0xfc
 800b138:	f013 fc3a 	bl	801e9b0 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b13c:	4810      	ldr	r0, [pc, #64]	; (800b180 <CQS_Axes_Measure+0x198>)
 800b13e:	f013 fb15 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(340, 16-2, 'f');
 800b142:	2266      	movs	r2, #102	; 0x66
 800b144:	210e      	movs	r1, #14
 800b146:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800b14a:	f013 fbd9 	bl	801e900 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b14e:	480d      	ldr	r0, [pc, #52]	; (800b184 <CQS_Axes_Measure+0x19c>)
 800b150:	f013 fb0c 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(325, 16-2, 'Q');
 800b154:	2251      	movs	r2, #81	; 0x51
 800b156:	210e      	movs	r1, #14
 800b158:	f240 1045 	movw	r0, #325	; 0x145
 800b15c:	f013 fbd0 	bl	801e900 <TFT_DrawChar>
		sprintf (buffer, "%d", Qf);
 800b160:	4632      	mov	r2, r6
 800b162:	4909      	ldr	r1, [pc, #36]	; (800b188 <CQS_Axes_Measure+0x1a0>)
 800b164:	4620      	mov	r0, r4
 800b166:	f016 fe1b 	bl	8021da0 <sprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b16a:	2303      	movs	r3, #3
 800b16c:	4622      	mov	r2, r4
 800b16e:	210e      	movs	r1, #14
 800b170:	f240 106d 	movw	r0, #365	; 0x16d
 800b174:	f013 fc1c 	bl	801e9b0 <TFT_DisplayString>
		TFT_direction = 0x00;
 800b178:	2300      	movs	r3, #0
 800b17a:	702b      	strb	r3, [r5, #0]
}
 800b17c:	e797      	b.n	800b0ae <CQS_Axes_Measure+0xc6>
 800b17e:	bf00      	nop
 800b180:	200001c0 	.word	0x200001c0
 800b184:	200001b0 	.word	0x200001b0
 800b188:	08026a11 	.word	0x08026a11
 800b18c:	20005218 	.word	0x20005218

0800b190 <CQS_Axes_Text>:

void CQS_Axes_Text(uint8_t direction){
 800b190:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800b192:	4604      	mov	r4, r0
 800b194:	2800      	cmp	r0, #0
 800b196:	f040 811f 	bne.w	800b3d8 <CQS_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800b19a:	488e      	ldr	r0, [pc, #568]	; (800b3d4 <CQS_Axes_Text+0x244>)
 800b19c:	f013 fae6 	bl	801e76c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800b1a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b1a4:	f013 fae8 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b1a8:	2063      	movs	r0, #99	; 0x63
 800b1aa:	f013 faeb 	bl	801e784 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'Q');
 800b1ae:	2251      	movs	r2, #81	; 0x51
 800b1b0:	f240 119f 	movw	r1, #415	; 0x19f
 800b1b4:	2018      	movs	r0, #24
 800b1b6:	f013 fba3 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800b1ba:	2231      	movs	r2, #49	; 0x31
 800b1bc:	f240 119f 	movw	r1, #415	; 0x19f
 800b1c0:	201e      	movs	r0, #30
 800b1c2:	f013 fb9d 	bl	801e900 <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'Q');
 800b1c6:	2251      	movs	r2, #81	; 0x51
 800b1c8:	f240 119f 	movw	r1, #415	; 0x19f
 800b1cc:	2028      	movs	r0, #40	; 0x28
 800b1ce:	f013 fb97 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800b1d2:	2232      	movs	r2, #50	; 0x32
 800b1d4:	f240 119f 	movw	r1, #415	; 0x19f
 800b1d8:	202e      	movs	r0, #46	; 0x2e
 800b1da:	f013 fb91 	bl	801e900 <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'Q');
 800b1de:	2251      	movs	r2, #81	; 0x51
 800b1e0:	f240 119f 	movw	r1, #415	; 0x19f
 800b1e4:	2038      	movs	r0, #56	; 0x38
 800b1e6:	f013 fb8b 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800b1ea:	2233      	movs	r2, #51	; 0x33
 800b1ec:	f240 119f 	movw	r1, #415	; 0x19f
 800b1f0:	203e      	movs	r0, #62	; 0x3e
 800b1f2:	f013 fb85 	bl	801e900 <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'Q');
 800b1f6:	2251      	movs	r2, #81	; 0x51
 800b1f8:	f240 119f 	movw	r1, #415	; 0x19f
 800b1fc:	2048      	movs	r0, #72	; 0x48
 800b1fe:	f013 fb7f 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800b202:	2234      	movs	r2, #52	; 0x34
 800b204:	f240 119f 	movw	r1, #415	; 0x19f
 800b208:	204e      	movs	r0, #78	; 0x4e
 800b20a:	f013 fb79 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'Q');
 800b20e:	2251      	movs	r2, #81	; 0x51
 800b210:	f240 119f 	movw	r1, #415	; 0x19f
 800b214:	2058      	movs	r0, #88	; 0x58
 800b216:	f013 fb73 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800b21a:	2235      	movs	r2, #53	; 0x35
 800b21c:	f240 119f 	movw	r1, #415	; 0x19f
 800b220:	205e      	movs	r0, #94	; 0x5e
 800b222:	f013 fb6d 	bl	801e900 <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'Q');
 800b226:	2251      	movs	r2, #81	; 0x51
 800b228:	f240 119f 	movw	r1, #415	; 0x19f
 800b22c:	2068      	movs	r0, #104	; 0x68
 800b22e:	f013 fb67 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800b232:	2236      	movs	r2, #54	; 0x36
 800b234:	f240 119f 	movw	r1, #415	; 0x19f
 800b238:	206e      	movs	r0, #110	; 0x6e
 800b23a:	f013 fb61 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'Q');
 800b23e:	2251      	movs	r2, #81	; 0x51
 800b240:	f240 119f 	movw	r1, #415	; 0x19f
 800b244:	2078      	movs	r0, #120	; 0x78
 800b246:	f013 fb5b 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800b24a:	2237      	movs	r2, #55	; 0x37
 800b24c:	f240 119f 	movw	r1, #415	; 0x19f
 800b250:	207e      	movs	r0, #126	; 0x7e
 800b252:	f013 fb55 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'Q');
 800b256:	2251      	movs	r2, #81	; 0x51
 800b258:	f240 119f 	movw	r1, #415	; 0x19f
 800b25c:	2088      	movs	r0, #136	; 0x88
 800b25e:	f013 fb4f 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800b262:	2238      	movs	r2, #56	; 0x38
 800b264:	f240 119f 	movw	r1, #415	; 0x19f
 800b268:	208e      	movs	r0, #142	; 0x8e
 800b26a:	f013 fb49 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'Q');
 800b26e:	2251      	movs	r2, #81	; 0x51
 800b270:	f240 119f 	movw	r1, #415	; 0x19f
 800b274:	2098      	movs	r0, #152	; 0x98
 800b276:	f013 fb43 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800b27a:	2239      	movs	r2, #57	; 0x39
 800b27c:	f240 119f 	movw	r1, #415	; 0x19f
 800b280:	209e      	movs	r0, #158	; 0x9e
 800b282:	f013 fb3d 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800b286:	2231      	movs	r2, #49	; 0x31
 800b288:	f240 119f 	movw	r1, #415	; 0x19f
 800b28c:	20ad      	movs	r0, #173	; 0xad
 800b28e:	f013 fb37 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'Q');
 800b292:	2251      	movs	r2, #81	; 0x51
 800b294:	f240 119f 	movw	r1, #415	; 0x19f
 800b298:	20a8      	movs	r0, #168	; 0xa8
 800b29a:	f013 fb31 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800b29e:	2230      	movs	r2, #48	; 0x30
 800b2a0:	f240 119f 	movw	r1, #415	; 0x19f
 800b2a4:	20b1      	movs	r0, #177	; 0xb1
 800b2a6:	f013 fb2b 	bl	801e900 <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800b2aa:	2231      	movs	r2, #49	; 0x31
 800b2ac:	f240 119f 	movw	r1, #415	; 0x19f
 800b2b0:	20bd      	movs	r0, #189	; 0xbd
 800b2b2:	f013 fb25 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'Q');
 800b2b6:	2251      	movs	r2, #81	; 0x51
 800b2b8:	f240 119f 	movw	r1, #415	; 0x19f
 800b2bc:	20b8      	movs	r0, #184	; 0xb8
 800b2be:	f013 fb1f 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800b2c2:	2231      	movs	r2, #49	; 0x31
 800b2c4:	f240 119f 	movw	r1, #415	; 0x19f
 800b2c8:	20c2      	movs	r0, #194	; 0xc2
 800b2ca:	f013 fb19 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800b2ce:	2231      	movs	r2, #49	; 0x31
 800b2d0:	f240 119f 	movw	r1, #415	; 0x19f
 800b2d4:	20cd      	movs	r0, #205	; 0xcd
 800b2d6:	f013 fb13 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'Q');
 800b2da:	2251      	movs	r2, #81	; 0x51
 800b2dc:	f240 119f 	movw	r1, #415	; 0x19f
 800b2e0:	20c8      	movs	r0, #200	; 0xc8
 800b2e2:	f013 fb0d 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800b2e6:	2232      	movs	r2, #50	; 0x32
 800b2e8:	f240 119f 	movw	r1, #415	; 0x19f
 800b2ec:	20d1      	movs	r0, #209	; 0xd1
 800b2ee:	f013 fb07 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800b2f2:	2231      	movs	r2, #49	; 0x31
 800b2f4:	f240 119f 	movw	r1, #415	; 0x19f
 800b2f8:	20dd      	movs	r0, #221	; 0xdd
 800b2fa:	f013 fb01 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'Q');
 800b2fe:	2251      	movs	r2, #81	; 0x51
 800b300:	f240 119f 	movw	r1, #415	; 0x19f
 800b304:	20d8      	movs	r0, #216	; 0xd8
 800b306:	f013 fafb 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800b30a:	2233      	movs	r2, #51	; 0x33
 800b30c:	f240 119f 	movw	r1, #415	; 0x19f
 800b310:	20e1      	movs	r0, #225	; 0xe1
 800b312:	f013 faf5 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800b316:	2231      	movs	r2, #49	; 0x31
 800b318:	f240 119f 	movw	r1, #415	; 0x19f
 800b31c:	20ed      	movs	r0, #237	; 0xed
 800b31e:	f013 faef 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'Q');
 800b322:	2251      	movs	r2, #81	; 0x51
 800b324:	f240 119f 	movw	r1, #415	; 0x19f
 800b328:	20e8      	movs	r0, #232	; 0xe8
 800b32a:	f013 fae9 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800b32e:	2234      	movs	r2, #52	; 0x34
 800b330:	f240 119f 	movw	r1, #415	; 0x19f
 800b334:	20f1      	movs	r0, #241	; 0xf1
 800b336:	f013 fae3 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800b33a:	2231      	movs	r2, #49	; 0x31
 800b33c:	f240 119f 	movw	r1, #415	; 0x19f
 800b340:	20fd      	movs	r0, #253	; 0xfd
 800b342:	f013 fadd 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'Q');
 800b346:	2251      	movs	r2, #81	; 0x51
 800b348:	f240 119f 	movw	r1, #415	; 0x19f
 800b34c:	20f8      	movs	r0, #248	; 0xf8
 800b34e:	f013 fad7 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800b352:	2235      	movs	r2, #53	; 0x35
 800b354:	f240 119f 	movw	r1, #415	; 0x19f
 800b358:	f240 1001 	movw	r0, #257	; 0x101
 800b35c:	f013 fad0 	bl	801e900 <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800b360:	2230      	movs	r2, #48	; 0x30
 800b362:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800b366:	2005      	movs	r0, #5
 800b368:	f013 faca 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800b36c:	2232      	movs	r2, #50	; 0x32
 800b36e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800b372:	2001      	movs	r0, #1
 800b374:	f013 fac4 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800b378:	2235      	movs	r2, #53	; 0x35
 800b37a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800b37e:	2007      	movs	r0, #7
 800b380:	f013 fabe 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800b384:	2235      	movs	r2, #53	; 0x35
 800b386:	f240 1101 	movw	r1, #257	; 0x101
 800b38a:	2001      	movs	r0, #1
 800b38c:	f013 fab8 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800b390:	2230      	movs	r2, #48	; 0x30
 800b392:	f240 1101 	movw	r1, #257	; 0x101
 800b396:	2007      	movs	r0, #7
 800b398:	f013 fab2 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800b39c:	2237      	movs	r2, #55	; 0x37
 800b39e:	21b5      	movs	r1, #181	; 0xb5
 800b3a0:	2001      	movs	r0, #1
 800b3a2:	f013 faad 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800b3a6:	2235      	movs	r2, #53	; 0x35
 800b3a8:	21b5      	movs	r1, #181	; 0xb5
 800b3aa:	2007      	movs	r0, #7
 800b3ac:	f013 faa8 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	2231      	movs	r2, #49	; 0x31
 800b3b4:	2169      	movs	r1, #105	; 0x69
 800b3b6:	f013 faa3 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800b3ba:	2230      	movs	r2, #48	; 0x30
 800b3bc:	2169      	movs	r1, #105	; 0x69
 800b3be:	2004      	movs	r0, #4
 800b3c0:	f013 fa9e 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800b3c4:	2230      	movs	r2, #48	; 0x30
 800b3c6:	2169      	movs	r1, #105	; 0x69
 800b3c8:	2009      	movs	r0, #9
		TFT_DrawChar(67, 43, '0');
		

		TFT_direction = 0x00;
	}
}
 800b3ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800b3ce:	f013 ba97 	b.w	801e900 <TFT_DrawChar>
 800b3d2:	bf00      	nop
 800b3d4:	20000210 	.word	0x20000210
 800b3d8:	4d98      	ldr	r5, [pc, #608]	; (800b63c <CQS_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b3da:	2801      	cmp	r0, #1
 800b3dc:	bf0c      	ite	eq
 800b3de:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800b3e0:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800b3e2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b3e6:	bf18      	it	ne
 800b3e8:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b3ea:	f013 f9c5 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b3ee:	2063      	movs	r0, #99	; 0x63
 800b3f0:	f013 f9c8 	bl	801e784 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800b3f4:	4892      	ldr	r0, [pc, #584]	; (800b640 <CQS_Axes_Text+0x4b0>)
 800b3f6:	f013 f9b9 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(87, 258, 'Q');
 800b3fa:	2251      	movs	r2, #81	; 0x51
 800b3fc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b400:	2057      	movs	r0, #87	; 0x57
 800b402:	f013 fa7d 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800b406:	2231      	movs	r2, #49	; 0x31
 800b408:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b40c:	205d      	movs	r0, #93	; 0x5d
 800b40e:	f013 fa77 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'Q');
 800b412:	2251      	movs	r2, #81	; 0x51
 800b414:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b418:	206d      	movs	r0, #109	; 0x6d
 800b41a:	f013 fa71 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800b41e:	2232      	movs	r2, #50	; 0x32
 800b420:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b424:	2073      	movs	r0, #115	; 0x73
 800b426:	f013 fa6b 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'Q');
 800b42a:	2251      	movs	r2, #81	; 0x51
 800b42c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b430:	2083      	movs	r0, #131	; 0x83
 800b432:	f013 fa65 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800b436:	2233      	movs	r2, #51	; 0x33
 800b438:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b43c:	2089      	movs	r0, #137	; 0x89
 800b43e:	f013 fa5f 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'Q');
 800b442:	2251      	movs	r2, #81	; 0x51
 800b444:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b448:	2099      	movs	r0, #153	; 0x99
 800b44a:	f013 fa59 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800b44e:	2234      	movs	r2, #52	; 0x34
 800b450:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b454:	209f      	movs	r0, #159	; 0x9f
 800b456:	f013 fa53 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'Q');
 800b45a:	2251      	movs	r2, #81	; 0x51
 800b45c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b460:	20af      	movs	r0, #175	; 0xaf
 800b462:	f013 fa4d 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800b466:	2235      	movs	r2, #53	; 0x35
 800b468:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b46c:	20b5      	movs	r0, #181	; 0xb5
 800b46e:	f013 fa47 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'Q');
 800b472:	2251      	movs	r2, #81	; 0x51
 800b474:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b478:	20c5      	movs	r0, #197	; 0xc5
 800b47a:	f013 fa41 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800b47e:	2236      	movs	r2, #54	; 0x36
 800b480:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b484:	20cb      	movs	r0, #203	; 0xcb
 800b486:	f013 fa3b 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'Q');
 800b48a:	2251      	movs	r2, #81	; 0x51
 800b48c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b490:	20db      	movs	r0, #219	; 0xdb
 800b492:	f013 fa35 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800b496:	2237      	movs	r2, #55	; 0x37
 800b498:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b49c:	20e1      	movs	r0, #225	; 0xe1
 800b49e:	f013 fa2f 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'Q');
 800b4a2:	2251      	movs	r2, #81	; 0x51
 800b4a4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4a8:	20f1      	movs	r0, #241	; 0xf1
 800b4aa:	f013 fa29 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800b4ae:	2238      	movs	r2, #56	; 0x38
 800b4b0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4b4:	20f7      	movs	r0, #247	; 0xf7
 800b4b6:	f013 fa23 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'Q');
 800b4ba:	2251      	movs	r2, #81	; 0x51
 800b4bc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4c0:	f240 1007 	movw	r0, #263	; 0x107
 800b4c4:	f013 fa1c 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800b4c8:	2239      	movs	r2, #57	; 0x39
 800b4ca:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4ce:	f240 100d 	movw	r0, #269	; 0x10d
 800b4d2:	f013 fa15 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800b4d6:	2231      	movs	r2, #49	; 0x31
 800b4d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4dc:	f44f 7091 	mov.w	r0, #290	; 0x122
 800b4e0:	f013 fa0e 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'Q');
 800b4e4:	2251      	movs	r2, #81	; 0x51
 800b4e6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4ea:	f240 101d 	movw	r0, #285	; 0x11d
 800b4ee:	f013 fa07 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800b4f2:	2230      	movs	r2, #48	; 0x30
 800b4f4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4f8:	f44f 7093 	mov.w	r0, #294	; 0x126
 800b4fc:	f013 fa00 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800b500:	2231      	movs	r2, #49	; 0x31
 800b502:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b506:	f44f 709c 	mov.w	r0, #312	; 0x138
 800b50a:	f013 f9f9 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'Q');
 800b50e:	2251      	movs	r2, #81	; 0x51
 800b510:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b514:	f240 1033 	movw	r0, #307	; 0x133
 800b518:	f013 f9f2 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800b51c:	2231      	movs	r2, #49	; 0x31
 800b51e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b522:	f240 103d 	movw	r0, #317	; 0x13d
 800b526:	f013 f9eb 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800b52a:	2231      	movs	r2, #49	; 0x31
 800b52c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b530:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800b534:	f013 f9e4 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'Q');
 800b538:	2251      	movs	r2, #81	; 0x51
 800b53a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b53e:	f240 1049 	movw	r0, #329	; 0x149
 800b542:	f013 f9dd 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800b546:	2232      	movs	r2, #50	; 0x32
 800b548:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b54c:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800b550:	f013 f9d6 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800b554:	2231      	movs	r2, #49	; 0x31
 800b556:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b55a:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800b55e:	f013 f9cf 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'Q');
 800b562:	2251      	movs	r2, #81	; 0x51
 800b564:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b568:	f240 105f 	movw	r0, #351	; 0x15f
 800b56c:	f013 f9c8 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800b570:	2233      	movs	r2, #51	; 0x33
 800b572:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b576:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800b57a:	f013 f9c1 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800b57e:	2231      	movs	r2, #49	; 0x31
 800b580:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b584:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800b588:	f013 f9ba 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'Q');
 800b58c:	2251      	movs	r2, #81	; 0x51
 800b58e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b592:	f240 1075 	movw	r0, #373	; 0x175
 800b596:	f013 f9b3 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800b59a:	2234      	movs	r2, #52	; 0x34
 800b59c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5a0:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800b5a4:	f013 f9ac 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800b5a8:	2231      	movs	r2, #49	; 0x31
 800b5aa:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5ae:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b5b2:	f013 f9a5 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'Q');
 800b5b6:	2251      	movs	r2, #81	; 0x51
 800b5b8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5bc:	f240 108b 	movw	r0, #395	; 0x18b
 800b5c0:	f013 f99e 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800b5c4:	2235      	movs	r2, #53	; 0x35
 800b5c6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5ca:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800b5ce:	f013 f997 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800b5d2:	2230      	movs	r2, #48	; 0x30
 800b5d4:	21fa      	movs	r1, #250	; 0xfa
 800b5d6:	2041      	movs	r0, #65	; 0x41
 800b5d8:	f013 f992 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800b5dc:	2232      	movs	r2, #50	; 0x32
 800b5de:	21ca      	movs	r1, #202	; 0xca
 800b5e0:	203a      	movs	r0, #58	; 0x3a
 800b5e2:	f013 f98d 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800b5e6:	2235      	movs	r2, #53	; 0x35
 800b5e8:	21ca      	movs	r1, #202	; 0xca
 800b5ea:	2041      	movs	r0, #65	; 0x41
 800b5ec:	f013 f988 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800b5f0:	2235      	movs	r2, #53	; 0x35
 800b5f2:	2195      	movs	r1, #149	; 0x95
 800b5f4:	203a      	movs	r0, #58	; 0x3a
 800b5f6:	f013 f983 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800b5fa:	2230      	movs	r2, #48	; 0x30
 800b5fc:	2195      	movs	r1, #149	; 0x95
 800b5fe:	2041      	movs	r0, #65	; 0x41
 800b600:	f013 f97e 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800b604:	2237      	movs	r2, #55	; 0x37
 800b606:	2160      	movs	r1, #96	; 0x60
 800b608:	203a      	movs	r0, #58	; 0x3a
 800b60a:	f013 f979 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800b60e:	2235      	movs	r2, #53	; 0x35
 800b610:	2160      	movs	r1, #96	; 0x60
 800b612:	2041      	movs	r0, #65	; 0x41
 800b614:	f013 f974 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800b618:	2231      	movs	r2, #49	; 0x31
 800b61a:	212b      	movs	r1, #43	; 0x2b
 800b61c:	2039      	movs	r0, #57	; 0x39
 800b61e:	f013 f96f 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800b622:	2230      	movs	r2, #48	; 0x30
 800b624:	212b      	movs	r1, #43	; 0x2b
 800b626:	203e      	movs	r0, #62	; 0x3e
 800b628:	f013 f96a 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800b62c:	2230      	movs	r2, #48	; 0x30
 800b62e:	212b      	movs	r1, #43	; 0x2b
 800b630:	2043      	movs	r0, #67	; 0x43
 800b632:	f013 f965 	bl	801e900 <TFT_DrawChar>
		TFT_direction = 0x00;
 800b636:	2300      	movs	r3, #0
 800b638:	702b      	strb	r3, [r5, #0]
 800b63a:	bd38      	pop	{r3, r4, r5, pc}
 800b63c:	20005218 	.word	0x20005218
 800b640:	20000210 	.word	0x20000210

0800b644 <CQS_chart>:

void CQS_chart(uint8_t direction, uint8_t *GraphData)
{
 800b644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b648:	ed2d 8b04 	vpush	{d8-d9}
 800b64c:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800b64e:	ad06      	add	r5, sp, #24
 800b650:	2300      	movs	r3, #0
{
 800b652:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800b654:	f825 3d04 	strh.w	r3, [r5, #-4]!
 800b658:	ed9f 8ae1 	vldr	s16, [pc, #900]	; 800b9e0 <CQS_chart+0x39c>
 800b65c:	1e4e      	subs	r6, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800b65e:	2800      	cmp	r0, #0
 800b660:	f040 81ca 	bne.w	800b9f8 <CQS_chart+0x3b4>
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800b664:	780b      	ldrb	r3, [r1, #0]
 800b666:	ed9f 9adf 	vldr	s18, [pc, #892]	; 800b9e4 <CQS_chart+0x3a0>
 800b66a:	eddf 8adf 	vldr	s17, [pc, #892]	; 800b9e8 <CQS_chart+0x3a4>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800b66e:	4fdf      	ldr	r7, [pc, #892]	; (800b9ec <CQS_chart+0x3a8>)
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800b670:	ee07 3a90 	vmov	s15, r3
 800b674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b678:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800b67c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b680:	9300      	str	r3, [sp, #0]
 800b682:	2222      	movs	r2, #34	; 0x22
 800b684:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b688:	2018      	movs	r0, #24
 800b68a:	eef0 7a49 	vmov.f32	s15, s18
 800b68e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b696:	edcd 7a03 	vstr	s15, [sp, #12]
 800b69a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b69e:	f012 fe3c 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(float)GraphData[1]/100*305, 50, 410, CQS_COLOR_Q2);
 800b6a2:	7863      	ldrb	r3, [r4, #1]
 800b6a4:	ee07 3a90 	vmov	s15, r3
 800b6a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6ac:	f645 2392 	movw	r3, #23186	; 0x5a92
 800b6b0:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b6b4:	9300      	str	r3, [sp, #0]
 800b6b6:	2232      	movs	r2, #50	; 0x32
 800b6b8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b6bc:	2028      	movs	r0, #40	; 0x28
 800b6be:	eef0 7a49 	vmov.f32	s15, s18
 800b6c2:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b6c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6ca:	edcd 7a03 	vstr	s15, [sp, #12]
 800b6ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b6d2:	f012 fe22 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(float)GraphData[2]/100*305, 66, 410, CQS_COLOR_Q3);
 800b6d6:	78a3      	ldrb	r3, [r4, #2]
 800b6d8:	ee07 3a90 	vmov	s15, r3
 800b6dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6e0:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800b6e4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	2242      	movs	r2, #66	; 0x42
 800b6ec:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b6f0:	2038      	movs	r0, #56	; 0x38
 800b6f2:	eef0 7a49 	vmov.f32	s15, s18
 800b6f6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b6fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6fe:	edcd 7a03 	vstr	s15, [sp, #12]
 800b702:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b706:	f012 fe08 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(float)GraphData[3]/100*305, 82, 410, CQS_COLOR_Q4);
 800b70a:	78e3      	ldrb	r3, [r4, #3]
 800b70c:	ee07 3a90 	vmov	s15, r3
 800b710:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b714:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800b718:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b71c:	9300      	str	r3, [sp, #0]
 800b71e:	2252      	movs	r2, #82	; 0x52
 800b720:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b724:	2048      	movs	r0, #72	; 0x48
 800b726:	eef0 7a49 	vmov.f32	s15, s18
 800b72a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b72e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b732:	edcd 7a03 	vstr	s15, [sp, #12]
 800b736:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b73a:	f012 fdee 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(float)GraphData[4]/100*305, 98, 410, CQS_COLOR_Q5);
 800b73e:	7923      	ldrb	r3, [r4, #4]
 800b740:	ee07 3a90 	vmov	s15, r3
 800b744:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b748:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800b74c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	2262      	movs	r2, #98	; 0x62
 800b754:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b758:	2058      	movs	r0, #88	; 0x58
 800b75a:	eef0 7a49 	vmov.f32	s15, s18
 800b75e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b762:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b766:	edcd 7a03 	vstr	s15, [sp, #12]
 800b76a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b76e:	f012 fdd4 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(float)GraphData[5]/100*305, 114, 410, CQS_COLOR_Q6);
 800b772:	7963      	ldrb	r3, [r4, #5]
 800b774:	ee07 3a90 	vmov	s15, r3
 800b778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b77c:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800b780:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	2272      	movs	r2, #114	; 0x72
 800b788:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b78c:	2068      	movs	r0, #104	; 0x68
 800b78e:	eef0 7a49 	vmov.f32	s15, s18
 800b792:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b79a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b79e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b7a2:	f012 fdba 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(float)GraphData[6]/100*305, 130, 410, CQS_COLOR_Q7);
 800b7a6:	79a3      	ldrb	r3, [r4, #6]
 800b7a8:	ee07 3a90 	vmov	s15, r3
 800b7ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7b0:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800b7b4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b7b8:	9300      	str	r3, [sp, #0]
 800b7ba:	2282      	movs	r2, #130	; 0x82
 800b7bc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b7c0:	2078      	movs	r0, #120	; 0x78
 800b7c2:	eef0 7a49 	vmov.f32	s15, s18
 800b7c6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b7ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ce:	edcd 7a03 	vstr	s15, [sp, #12]
 800b7d2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b7d6:	f012 fda0 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(float)GraphData[7]/100*305, 146, 410, CQS_COLOR_Q8);
 800b7da:	79e3      	ldrb	r3, [r4, #7]
 800b7dc:	ee07 3a90 	vmov	s15, r3
 800b7e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7e4:	f247 5369 	movw	r3, #30057	; 0x7569
 800b7e8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b7ec:	9300      	str	r3, [sp, #0]
 800b7ee:	2292      	movs	r2, #146	; 0x92
 800b7f0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b7f4:	2088      	movs	r0, #136	; 0x88
 800b7f6:	eef0 7a49 	vmov.f32	s15, s18
 800b7fa:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b7fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b802:	edcd 7a03 	vstr	s15, [sp, #12]
 800b806:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b80a:	f012 fd86 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(float)GraphData[8]/100*305, 162, 410, CQS_COLOR_Q9);
 800b80e:	7a23      	ldrb	r3, [r4, #8]
 800b810:	ee07 3a90 	vmov	s15, r3
 800b814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b818:	f24b 6307 	movw	r3, #46599	; 0xb607
 800b81c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b820:	9300      	str	r3, [sp, #0]
 800b822:	22a2      	movs	r2, #162	; 0xa2
 800b824:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b828:	2098      	movs	r0, #152	; 0x98
 800b82a:	eef0 7a49 	vmov.f32	s15, s18
 800b82e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b836:	edcd 7a03 	vstr	s15, [sp, #12]
 800b83a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b83e:	f012 fd6c 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(float)GraphData[9]/100*305, 178, 410, CQS_COLOR_Q10);
 800b842:	7a63      	ldrb	r3, [r4, #9]
 800b844:	ee07 3a90 	vmov	s15, r3
 800b848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b84c:	f64e 6325 	movw	r3, #60965	; 0xee25
 800b850:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	22b2      	movs	r2, #178	; 0xb2
 800b858:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b85c:	20a8      	movs	r0, #168	; 0xa8
 800b85e:	eef0 7a49 	vmov.f32	s15, s18
 800b862:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b86a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b86e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b872:	f012 fd52 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(float)GraphData[10]/100*305, 194, 410, CQS_COLOR_Q11);
 800b876:	7aa3      	ldrb	r3, [r4, #10]
 800b878:	ee07 3a90 	vmov	s15, r3
 800b87c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b880:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800b884:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b888:	9300      	str	r3, [sp, #0]
 800b88a:	22c2      	movs	r2, #194	; 0xc2
 800b88c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b890:	20b8      	movs	r0, #184	; 0xb8
 800b892:	eef0 7a49 	vmov.f32	s15, s18
 800b896:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b89a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b89e:	edcd 7a03 	vstr	s15, [sp, #12]
 800b8a2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b8a6:	f012 fd38 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(float)GraphData[11]/100*305, 210, 410, CQS_COLOR_Q12);
 800b8aa:	7ae3      	ldrb	r3, [r4, #11]
 800b8ac:	ee07 3a90 	vmov	s15, r3
 800b8b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8b4:	f64e 4347 	movw	r3, #60487	; 0xec47
 800b8b8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	22d2      	movs	r2, #210	; 0xd2
 800b8c0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b8c4:	20c8      	movs	r0, #200	; 0xc8
 800b8c6:	eef0 7a49 	vmov.f32	s15, s18
 800b8ca:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b8ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8d2:	edcd 7a03 	vstr	s15, [sp, #12]
 800b8d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b8da:	f012 fd1e 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(float)GraphData[12]/100*305, 226, 410, CQS_COLOR_Q13);
 800b8de:	7b23      	ldrb	r3, [r4, #12]
 800b8e0:	ee07 3a90 	vmov	s15, r3
 800b8e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8e8:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800b8ec:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b8f0:	9300      	str	r3, [sp, #0]
 800b8f2:	22e2      	movs	r2, #226	; 0xe2
 800b8f4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b8f8:	20d8      	movs	r0, #216	; 0xd8
 800b8fa:	eef0 7a49 	vmov.f32	s15, s18
 800b8fe:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b902:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b906:	edcd 7a03 	vstr	s15, [sp, #12]
 800b90a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b90e:	f012 fd04 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(float)GraphData[13]/100*305, 242, 410, CQS_COLOR_Q14);
 800b912:	7b63      	ldrb	r3, [r4, #13]
 800b914:	ee07 3a90 	vmov	s15, r3
 800b918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91c:	f64a 1347 	movw	r3, #43335	; 0xa947
 800b920:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b924:	9300      	str	r3, [sp, #0]
 800b926:	22f2      	movs	r2, #242	; 0xf2
 800b928:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b92c:	20e8      	movs	r0, #232	; 0xe8
 800b92e:	eef0 7a49 	vmov.f32	s15, s18
 800b932:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b936:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b93a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b93e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b942:	f012 fcea 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800b946:	7ba3      	ldrb	r3, [r4, #14]
 800b948:	ee07 3a90 	vmov	s15, r3
 800b94c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b950:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800b954:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b958:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	20f8      	movs	r0, #248	; 0xf8
 800b960:	f44f 73cd 	mov.w	r3, #410	; 0x19a
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b964:	2418      	movs	r4, #24
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800b966:	eea7 9a68 	vfms.f32	s18, s14, s17
 800b96a:	eefc 7ac9 	vcvt.u32.f32	s15, s18
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800b96e:	ed9f 9a20 	vldr	s18, [pc, #128]	; 800b9f0 <CQS_chart+0x3ac>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800b972:	edcd 7a03 	vstr	s15, [sp, #12]
 800b976:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b97a:	f012 fcce 	bl	801e31a <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800b97e:	481d      	ldr	r0, [pc, #116]	; (800b9f4 <CQS_chart+0x3b0>)
 800b980:	f012 fef4 	bl	801e76c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800b984:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b988:	f012 fef6 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b98c:	2063      	movs	r0, #99	; 0x63
 800b98e:	f012 fef9 	bl	801e784 <TFT_SetBackColor>
			sprintf (buffer, "%d", GraphData[i]);
 800b992:	7872      	ldrb	r2, [r6, #1]
 800b994:	4639      	mov	r1, r7
 800b996:	4628      	mov	r0, r5
 800b998:	f016 fa02 	bl	8021da0 <sprintf>
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800b99c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800b9a0:	ee07 3a90 	vmov	s15, r3
 800b9a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b9ae:	3410      	adds	r4, #16
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	462a      	mov	r2, r5
 800b9b4:	b2a4      	uxth	r4, r4
 800b9b6:	eef0 7a49 	vmov.f32	s15, s18
 800b9ba:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b9be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9c2:	edcd 7a03 	vstr	s15, [sp, #12]
 800b9c6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b9ca:	f012 fff1 	bl	801e9b0 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800b9ce:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800b9d2:	d1de      	bne.n	800b992 <CQS_chart+0x34e>
			X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800b9d4:	b006      	add	sp, #24
 800b9d6:	ecbd 8b04 	vpop	{d8-d9}
 800b9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9de:	bf00      	nop
 800b9e0:	42c80000 	.word	0x42c80000
 800b9e4:	43cd0000 	.word	0x43cd0000
 800b9e8:	43988000 	.word	0x43988000
 800b9ec:	08026a11 	.word	0x08026a11
 800b9f0:	43c80000 	.word	0x43c80000
 800b9f4:	20000210 	.word	0x20000210
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b9f8:	2801      	cmp	r0, #1
 800b9fa:	4fdf      	ldr	r7, [pc, #892]	; (800bd78 <CQS_chart+0x734>)
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800b9fc:	eddf 8adf 	vldr	s17, [pc, #892]	; 800bd7c <CQS_chart+0x738>
		if(direction == 0x01){TFT_direction = 0x01;} 
 800ba00:	bf0e      	itee	eq
 800ba02:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800ba04:	2302      	movne	r3, #2
 800ba06:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800ba08:	780b      	ldrb	r3, [r1, #0]
 800ba0a:	ed9f 9add 	vldr	s18, [pc, #884]	; 800bd80 <CQS_chart+0x73c>
			sprintf (buffer, "%d", GraphData[i]);
 800ba0e:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800bd90 <CQS_chart+0x74c>
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800ba12:	ee07 3a90 	vmov	s15, r3
 800ba16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba1a:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800ba1e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	2262      	movs	r2, #98	; 0x62
 800ba26:	23fc      	movs	r3, #252	; 0xfc
 800ba28:	2057      	movs	r0, #87	; 0x57
 800ba2a:	eef0 7a68 	vmov.f32	s15, s17
 800ba2e:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ba32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba36:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba3a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ba3e:	f012 fc6c 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(109, 252-(float)GraphData[1]/100*210, 120, 252, CQS_COLOR_Q2);
 800ba42:	7863      	ldrb	r3, [r4, #1]
 800ba44:	ee07 3a90 	vmov	s15, r3
 800ba48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4c:	f645 2392 	movw	r3, #23186	; 0x5a92
 800ba50:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	2278      	movs	r2, #120	; 0x78
 800ba58:	23fc      	movs	r3, #252	; 0xfc
 800ba5a:	206d      	movs	r0, #109	; 0x6d
 800ba5c:	eef0 7a68 	vmov.f32	s15, s17
 800ba60:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ba64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba68:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba6c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ba70:	f012 fc53 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(131, 252-(float)GraphData[2]/100*210, 142, 252, CQS_COLOR_Q3);
 800ba74:	78a3      	ldrb	r3, [r4, #2]
 800ba76:	ee07 3a90 	vmov	s15, r3
 800ba7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba7e:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800ba82:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba86:	9300      	str	r3, [sp, #0]
 800ba88:	228e      	movs	r2, #142	; 0x8e
 800ba8a:	23fc      	movs	r3, #252	; 0xfc
 800ba8c:	2083      	movs	r0, #131	; 0x83
 800ba8e:	eef0 7a68 	vmov.f32	s15, s17
 800ba92:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ba96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba9a:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba9e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800baa2:	f012 fc3a 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(153, 252-(float)GraphData[3]/100*210, 164, 252, CQS_COLOR_Q4);
 800baa6:	78e3      	ldrb	r3, [r4, #3]
 800baa8:	ee07 3a90 	vmov	s15, r3
 800baac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bab0:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800bab4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	22a4      	movs	r2, #164	; 0xa4
 800babc:	23fc      	movs	r3, #252	; 0xfc
 800babe:	2099      	movs	r0, #153	; 0x99
 800bac0:	eef0 7a68 	vmov.f32	s15, s17
 800bac4:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bacc:	edcd 7a03 	vstr	s15, [sp, #12]
 800bad0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bad4:	f012 fc21 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(175, 252-(float)GraphData[4]/100*210, 186, 252, CQS_COLOR_Q5);
 800bad8:	7923      	ldrb	r3, [r4, #4]
 800bada:	ee07 3a90 	vmov	s15, r3
 800bade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae2:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800bae6:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	22ba      	movs	r2, #186	; 0xba
 800baee:	23fc      	movs	r3, #252	; 0xfc
 800baf0:	20af      	movs	r0, #175	; 0xaf
 800baf2:	eef0 7a68 	vmov.f32	s15, s17
 800baf6:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bafa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bafe:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb02:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb06:	f012 fc08 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(197, 252-(float)GraphData[5]/100*210, 208, 252, CQS_COLOR_Q6);
 800bb0a:	7963      	ldrb	r3, [r4, #5]
 800bb0c:	ee07 3a90 	vmov	s15, r3
 800bb10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb14:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800bb18:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	22d0      	movs	r2, #208	; 0xd0
 800bb20:	23fc      	movs	r3, #252	; 0xfc
 800bb22:	20c5      	movs	r0, #197	; 0xc5
 800bb24:	eef0 7a68 	vmov.f32	s15, s17
 800bb28:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bb2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb30:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb34:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb38:	f012 fbef 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(219, 252-(float)GraphData[6]/100*210, 230, 252, CQS_COLOR_Q7);
 800bb3c:	79a3      	ldrb	r3, [r4, #6]
 800bb3e:	ee07 3a90 	vmov	s15, r3
 800bb42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb46:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800bb4a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb4e:	9300      	str	r3, [sp, #0]
 800bb50:	22e6      	movs	r2, #230	; 0xe6
 800bb52:	23fc      	movs	r3, #252	; 0xfc
 800bb54:	20db      	movs	r0, #219	; 0xdb
 800bb56:	eef0 7a68 	vmov.f32	s15, s17
 800bb5a:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bb5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb62:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb66:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb6a:	f012 fbd6 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(241, 252-(float)GraphData[7]/100*210, 252, 252, CQS_COLOR_Q8);
 800bb6e:	79e3      	ldrb	r3, [r4, #7]
 800bb70:	ee07 3a90 	vmov	s15, r3
 800bb74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb78:	f247 5369 	movw	r3, #30057	; 0x7569
 800bb7c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	23fc      	movs	r3, #252	; 0xfc
 800bb84:	461a      	mov	r2, r3
 800bb86:	20f1      	movs	r0, #241	; 0xf1
 800bb88:	eef0 7a68 	vmov.f32	s15, s17
 800bb8c:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bb90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb94:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb98:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb9c:	f012 fbbd 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(263, 252-(float)GraphData[8]/100*210, 274, 252, CQS_COLOR_Q9);
 800bba0:	7a23      	ldrb	r3, [r4, #8]
 800bba2:	ee07 3a90 	vmov	s15, r3
 800bba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbaa:	f24b 6307 	movw	r3, #46599	; 0xb607
 800bbae:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bbb2:	9300      	str	r3, [sp, #0]
 800bbb4:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bbb8:	23fc      	movs	r3, #252	; 0xfc
 800bbba:	f240 1007 	movw	r0, #263	; 0x107
 800bbbe:	eef0 7a68 	vmov.f32	s15, s17
 800bbc2:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bbc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbca:	edcd 7a03 	vstr	s15, [sp, #12]
 800bbce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bbd2:	f012 fba2 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(285, 252-(float)GraphData[9]/100*210, 296, 252, CQS_COLOR_Q10);
 800bbd6:	7a63      	ldrb	r3, [r4, #9]
 800bbd8:	ee07 3a90 	vmov	s15, r3
 800bbdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbe0:	f64e 6325 	movw	r3, #60965	; 0xee25
 800bbe4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bbe8:	9300      	str	r3, [sp, #0]
 800bbea:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bbee:	23fc      	movs	r3, #252	; 0xfc
 800bbf0:	f240 101d 	movw	r0, #285	; 0x11d
 800bbf4:	eef0 7a68 	vmov.f32	s15, s17
 800bbf8:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bbfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc00:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc04:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc08:	f012 fb87 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(307, 252-(float)GraphData[10]/100*210,318, 252, CQS_COLOR_Q11);
 800bc0c:	7aa3      	ldrb	r3, [r4, #10]
 800bc0e:	ee07 3a90 	vmov	s15, r3
 800bc12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc16:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800bc1a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc1e:	9300      	str	r3, [sp, #0]
 800bc20:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800bc24:	23fc      	movs	r3, #252	; 0xfc
 800bc26:	f240 1033 	movw	r0, #307	; 0x133
 800bc2a:	eef0 7a68 	vmov.f32	s15, s17
 800bc2e:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bc32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc36:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc3a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc3e:	f012 fb6c 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(329, 252-(float)GraphData[11]/100*210,340, 252, CQS_COLOR_Q12);
 800bc42:	7ae3      	ldrb	r3, [r4, #11]
 800bc44:	ee07 3a90 	vmov	s15, r3
 800bc48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc4c:	f64e 4347 	movw	r3, #60487	; 0xec47
 800bc50:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc54:	9300      	str	r3, [sp, #0]
 800bc56:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800bc5a:	23fc      	movs	r3, #252	; 0xfc
 800bc5c:	f240 1049 	movw	r0, #329	; 0x149
 800bc60:	eef0 7a68 	vmov.f32	s15, s17
 800bc64:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bc68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc6c:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc70:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc74:	f012 fb51 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(351, 252-(float)GraphData[12]/100*210,362, 252, CQS_COLOR_Q13);
 800bc78:	7b23      	ldrb	r3, [r4, #12]
 800bc7a:	ee07 3a90 	vmov	s15, r3
 800bc7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc82:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800bc86:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800bc90:	23fc      	movs	r3, #252	; 0xfc
 800bc92:	f240 105f 	movw	r0, #351	; 0x15f
 800bc96:	eef0 7a68 	vmov.f32	s15, s17
 800bc9a:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bc9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bca2:	edcd 7a03 	vstr	s15, [sp, #12]
 800bca6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bcaa:	f012 fb36 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(373, 252-(float)GraphData[13]/100*210,384, 252, CQS_COLOR_Q14);
 800bcae:	7b63      	ldrb	r3, [r4, #13]
 800bcb0:	ee07 3a90 	vmov	s15, r3
 800bcb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcb8:	f64a 1347 	movw	r3, #43335	; 0xa947
 800bcbc:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800bcc6:	23fc      	movs	r3, #252	; 0xfc
 800bcc8:	f240 1075 	movw	r0, #373	; 0x175
 800bccc:	eef0 7a68 	vmov.f32	s15, s17
 800bcd0:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bcd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcd8:	edcd 7a03 	vstr	s15, [sp, #12]
 800bcdc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bce0:	f012 fb1b 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800bce4:	7ba3      	ldrb	r3, [r4, #14]
 800bce6:	ee07 3a90 	vmov	s15, r3
 800bcea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcee:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800bcf2:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800bcfc:	23fc      	movs	r3, #252	; 0xfc
 800bcfe:	f240 108b 	movw	r0, #395	; 0x18b
 800bd02:	2457      	movs	r4, #87	; 0x57
 800bd04:	eee7 8a49 	vfms.f32	s17, s14, s18
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800bd08:	ed9f 9a1e 	vldr	s18, [pc, #120]	; 800bd84 <CQS_chart+0x740>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800bd0c:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800bd10:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800bd88 <CQS_chart+0x744>
 800bd14:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd18:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd1c:	f012 fafd 	bl	801e31a <TFT_FillRectangle>
			sprintf (buffer, "%d", GraphData[i]);
 800bd20:	7872      	ldrb	r2, [r6, #1]
 800bd22:	4641      	mov	r1, r8
 800bd24:	4628      	mov	r0, r5
 800bd26:	f016 f83b 	bl	8021da0 <sprintf>
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800bd2a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800bd2e:	ee07 3a90 	vmov	s15, r3
 800bd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd36:	2b09      	cmp	r3, #9
 800bd38:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bd3c:	f04f 0303 	mov.w	r3, #3
 800bd40:	4620      	mov	r0, r4
 800bd42:	462a      	mov	r2, r5
 800bd44:	f104 0416 	add.w	r4, r4, #22
 800bd48:	b2a4      	uxth	r4, r4
 800bd4a:	bf94      	ite	ls
 800bd4c:	eddf 7a0f 	vldrls	s15, [pc, #60]	; 800bd8c <CQS_chart+0x748>
 800bd50:	eef0 7a49 	vmovhi.f32	s15, s18
 800bd54:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bd58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd5c:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd60:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd64:	f012 fe24 	bl	801e9b0 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800bd68:	f240 13a1 	movw	r3, #417	; 0x1a1
 800bd6c:	429c      	cmp	r4, r3
 800bd6e:	d1d7      	bne.n	800bd20 <CQS_chart+0x6dc>
		TFT_direction = 0x00;
 800bd70:	2300      	movs	r3, #0
 800bd72:	703b      	strb	r3, [r7, #0]
}
 800bd74:	e62e      	b.n	800b9d4 <CQS_chart+0x390>
 800bd76:	bf00      	nop
 800bd78:	20005218 	.word	0x20005218
 800bd7c:	437c0000 	.word	0x437c0000
 800bd80:	43520000 	.word	0x43520000
 800bd84:	437a0000 	.word	0x437a0000
 800bd88:	43570000 	.word	0x43570000
 800bd8c:	43730000 	.word	0x43730000
 800bd90:	08026a11 	.word	0x08026a11

0800bd94 <CQS_Draw>:

void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bd94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bd98:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bd9a:	2363      	movs	r3, #99	; 0x63
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	4688      	mov	r8, r1
 800bda0:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bda2:	213a      	movs	r1, #58	; 0x3a
 800bda4:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800bda8:	9300      	str	r3, [sp, #0]
 800bdaa:	2005      	movs	r0, #5
 800bdac:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bdb0:	f89d 7020 	ldrb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bdb4:	f012 fab1 	bl	801e31a <TFT_FillRectangle>
	CQS_Axes(direction);
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f7ff f877 	bl	800aeac <CQS_Axes>
	CQS_Axes_Text(direction);
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f7ff f9e6 	bl	800b190 <CQS_Axes_Text>
	CQS_chart(direction, GraphData);
 800bdc4:	4641      	mov	r1, r8
 800bdc6:	4620      	mov	r0, r4
 800bdc8:	f7ff fc3c 	bl	800b644 <CQS_chart>
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800bdcc:	463b      	mov	r3, r7
 800bdce:	4632      	mov	r2, r6
 800bdd0:	4629      	mov	r1, r5
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	b002      	add	sp, #8
 800bdd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800bdda:	f7ff b905 	b.w	800afe8 <CQS_Axes_Measure>

0800bdde <flash_data_read_buff>:
#include "CRC_check.h"

uint64_t flash_data_read_buff(uint32_t flash_addr_buff) 
{ 
	return ( *(__IO uint64_t*) flash_addr_buff);
}
 800bdde:	e9d0 0100 	ldrd	r0, r1, [r0]
 800bde2:	4770      	bx	lr

0800bde4 <CRC_Check>:
uint32_t addr_i;

CRC_Check_StatusTypeDef CRC_Check(uint32_t start_flash_addr, uint32_t flash_size, uint32_t CRC_addr)
{

	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800bde4:	4b13      	ldr	r3, [pc, #76]	; (800be34 <CRC_Check+0x50>)
{
 800bde6:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800bdea:	4e13      	ldr	r6, [pc, #76]	; (800be38 <CRC_Check+0x54>)
	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800bdec:	6018      	str	r0, [r3, #0]
 800bdee:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800bdf2:	2400      	movs	r4, #0
 800bdf4:	4281      	cmp	r1, r0
 800bdf6:	d811      	bhi.n	800be1c <CRC_Check+0x38>
 800bdf8:	b104      	cbz	r4, 800bdfc <CRC_Check+0x18>
 800bdfa:	6018      	str	r0, [r3, #0]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800bdfc:	e9d2 0100 	ldrd	r0, r1, [r2]
	{
		CRC_buff += flash_data_read_buff(addr_i);
	}
	crcr_flash = flash_data_read_buff(CRC_addr);
 800be00:	4b0e      	ldr	r3, [pc, #56]	; (800be3c <CRC_Check+0x58>)
 800be02:	e9c3 0100 	strd	r0, r1, [r3]
	
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800be06:	e9d6 0100 	ldrd	r0, r1, [r6]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800be0a:	e9d2 2300 	ldrd	r2, r3, [r2]
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800be0e:	4299      	cmp	r1, r3
 800be10:	bf0a      	itet	eq
 800be12:	4290      	cmpeq	r0, r2
		return	CRC_OK;
	} else
	{
		return	CRC_ERROR;
	}
};
 800be14:	2001      	movne	r0, #1
 800be16:	2000      	moveq	r0, #0
 800be18:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	return ( *(__IO uint64_t*) flash_addr_buff);
 800be1c:	e8f0 8902 	ldrd	r8, r9, [r0], #8
		CRC_buff += flash_data_read_buff(addr_i);
 800be20:	e9d6 4500 	ldrd	r4, r5, [r6]
 800be24:	eb14 0408 	adds.w	r4, r4, r8
 800be28:	eb45 0509 	adc.w	r5, r5, r9
 800be2c:	e9c6 4500 	strd	r4, r5, [r6]
 800be30:	2401      	movs	r4, #1
 800be32:	e7df      	b.n	800bdf4 <CRC_Check+0x10>
 800be34:	2008c1e0 	.word	0x2008c1e0
 800be38:	200041b8 	.word	0x200041b8
 800be3c:	200041c0 	.word	0x200041c0

0800be40 <calcNorm560_CRI>:
double L_i_ref ;
double u_i_ref ;
double v_i_ref ;

void calcNorm560_CRI(uint16_t CCT_measure)
{
 800be40:	b508      	push	{r3, lr}
	norm_560_CRI = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 800be42:	f7f4 fb87 	bl	8000554 <__aeabi_i2d>
 800be46:	a316      	add	r3, pc, #88	; (adr r3, 800bea0 <calcNorm560_CRI+0x60>)
 800be48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4c:	f7f4 fbe8 	bl	8000620 <__aeabi_dmul>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	a114      	add	r1, pc, #80	; (adr r1, 800bea8 <calcNorm560_CRI+0x68>)
 800be56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be5a:	f7f4 fd0b 	bl	8000874 <__aeabi_ddiv>
 800be5e:	ec41 0b10 	vmov	d0, r0, r1
 800be62:	f018 ffcd 	bl	8024e00 <exp>
 800be66:	2200      	movs	r2, #0
 800be68:	ec51 0b10 	vmov	r0, r1, d0
 800be6c:	4b0a      	ldr	r3, [pc, #40]	; (800be98 <calcNorm560_CRI+0x58>)
 800be6e:	f7f4 fa23 	bl	80002b8 <__aeabi_dsub>
 800be72:	460b      	mov	r3, r1
 800be74:	4602      	mov	r2, r0
 800be76:	a106      	add	r1, pc, #24	; (adr r1, 800be90 <calcNorm560_CRI+0x50>)
 800be78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be7c:	f7f4 fcfa 	bl	8000874 <__aeabi_ddiv>
 800be80:	f7f4 fec6 	bl	8000c10 <__aeabi_d2f>
 800be84:	4b05      	ldr	r3, [pc, #20]	; (800be9c <calcNorm560_CRI+0x5c>)
 800be86:	6018      	str	r0, [r3, #0]
 800be88:	bd08      	pop	{r3, pc}
 800be8a:	bf00      	nop
 800be8c:	f3af 8000 	nop.w
 800be90:	f9f35846 	.word	0xf9f35846
 800be94:	466ca5d1 	.word	0x466ca5d1
 800be98:	3ff00000 	.word	0x3ff00000
 800be9c:	2008c210 	.word	0x2008c210
 800bea0:	05ea7ab3 	.word	0x05ea7ab3
 800bea4:	3ea2ca5d 	.word	0x3ea2ca5d
 800bea8:	aba38759 	.word	0xaba38759
 800beac:	3f8d7774 	.word	0x3f8d7774

0800beb0 <calcSref_CRI>:


float calcSref_CRI(int idx, uint16_t CCT_measure)
{
	float ans;
	if (CCT_measure < 5000)
 800beb0:	f241 3387 	movw	r3, #4999	; 0x1387
 800beb4:	4299      	cmp	r1, r3
{
 800beb6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800beb8:	460d      	mov	r5, r1
 800beba:	ea4f 0080 	mov.w	r0, r0, lsl #2
	if (CCT_measure < 5000)
 800bebe:	d84e      	bhi.n	800bf5e <calcSref_CRI+0xae>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bec0:	4c39      	ldr	r4, [pc, #228]	; (800bfa8 <calcSref_CRI+0xf8>)
 800bec2:	4404      	add	r4, r0
 800bec4:	6820      	ldr	r0, [r4, #0]
 800bec6:	f7f4 fb57 	bl	8000578 <__aeabi_f2d>
 800beca:	a331      	add	r3, pc, #196	; (adr r3, 800bf90 <calcSref_CRI+0xe0>)
 800becc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bed0:	f7f4 fba6 	bl	8000620 <__aeabi_dmul>
 800bed4:	4606      	mov	r6, r0
 800bed6:	4628      	mov	r0, r5
 800bed8:	460f      	mov	r7, r1
 800beda:	f7f4 fb3b 	bl	8000554 <__aeabi_i2d>
 800bede:	4602      	mov	r2, r0
 800bee0:	460b      	mov	r3, r1
 800bee2:	4630      	mov	r0, r6
 800bee4:	4639      	mov	r1, r7
 800bee6:	f7f4 fb9b 	bl	8000620 <__aeabi_dmul>
 800beea:	4602      	mov	r2, r0
 800beec:	460b      	mov	r3, r1
 800beee:	a12a      	add	r1, pc, #168	; (adr r1, 800bf98 <calcSref_CRI+0xe8>)
 800bef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bef4:	f7f4 fcbe 	bl	8000874 <__aeabi_ddiv>
 800bef8:	ec41 0b10 	vmov	d0, r0, r1
 800befc:	f018 ff80 	bl	8024e00 <exp>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bf00:	6820      	ldr	r0, [r4, #0]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bf02:	ec57 6b10 	vmov	r6, r7, d0
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bf06:	f7f4 fb37 	bl	8000578 <__aeabi_f2d>
 800bf0a:	a321      	add	r3, pc, #132	; (adr r3, 800bf90 <calcSref_CRI+0xe0>)
 800bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf10:	f7f4 fb86 	bl	8000620 <__aeabi_dmul>
 800bf14:	ed9f 1b22 	vldr	d1, [pc, #136]	; 800bfa0 <calcSref_CRI+0xf0>
 800bf18:	ec41 0b10 	vmov	d0, r0, r1
 800bf1c:	f019 f86c 	bl	8024ff8 <pow>
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bf20:	2200      	movs	r2, #0
 800bf22:	4b22      	ldr	r3, [pc, #136]	; (800bfac <calcSref_CRI+0xfc>)
 800bf24:	4630      	mov	r0, r6
 800bf26:	4639      	mov	r1, r7
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bf28:	ed8d 0b00 	vstr	d0, [sp]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bf2c:	f7f4 f9c4 	bl	80002b8 <__aeabi_dsub>
 800bf30:	f7f4 fe6e 	bl	8000c10 <__aeabi_d2f>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bf34:	f7f4 fb20 	bl	8000578 <__aeabi_f2d>
 800bf38:	ed9d 0b00 	vldr	d0, [sp]
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	4602      	mov	r2, r0
 800bf40:	ec51 0b10 	vmov	r0, r1, d0
 800bf44:	f7f4 fc96 	bl	8000874 <__aeabi_ddiv>
 800bf48:	f7f4 fe62 	bl	8000c10 <__aeabi_d2f>
		ans /= norm_560_CRI;
 800bf4c:	4b18      	ldr	r3, [pc, #96]	; (800bfb0 <calcSref_CRI+0x100>)
 800bf4e:	ee07 0a10 	vmov	s14, r0
 800bf52:	edd3 7a00 	vldr	s15, [r3]
 800bf56:	ee87 0a27 	vdiv.f32	s0, s14, s15
	else
	{
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
	}
	return ans;
}
 800bf5a:	b003      	add	sp, #12
 800bf5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
 800bf5e:	4a15      	ldr	r2, [pc, #84]	; (800bfb4 <calcSref_CRI+0x104>)
 800bf60:	4b15      	ldr	r3, [pc, #84]	; (800bfb8 <calcSref_CRI+0x108>)
 800bf62:	4916      	ldr	r1, [pc, #88]	; (800bfbc <calcSref_CRI+0x10c>)
 800bf64:	4403      	add	r3, r0
 800bf66:	4401      	add	r1, r0
 800bf68:	4410      	add	r0, r2
 800bf6a:	4a15      	ldr	r2, [pc, #84]	; (800bfc0 <calcSref_CRI+0x110>)
 800bf6c:	ed91 7a00 	vldr	s14, [r1]
 800bf70:	edd2 7a00 	vldr	s15, [r2]
 800bf74:	ed90 0a00 	vldr	s0, [r0]
 800bf78:	eea7 0a27 	vfma.f32	s0, s14, s15
 800bf7c:	ed93 7a00 	vldr	s14, [r3]
 800bf80:	4b10      	ldr	r3, [pc, #64]	; (800bfc4 <calcSref_CRI+0x114>)
 800bf82:	edd3 7a00 	vldr	s15, [r3]
 800bf86:	eea7 0a27 	vfma.f32	s0, s14, s15
	return ans;
 800bf8a:	e7e6      	b.n	800bf5a <calcSref_CRI+0xaa>
 800bf8c:	f3af 8000 	nop.w
 800bf90:	e826d695 	.word	0xe826d695
 800bf94:	3e112e0b 	.word	0x3e112e0b
 800bf98:	aba38759 	.word	0xaba38759
 800bf9c:	3f8d7774 	.word	0x3f8d7774
 800bfa0:	00000000 	.word	0x00000000
 800bfa4:	c0140000 	.word	0xc0140000
 800bfa8:	200501ec 	.word	0x200501ec
 800bfac:	3ff00000 	.word	0x3ff00000
 800bfb0:	2008c210 	.word	0x2008c210
 800bfb4:	2004a1e4 	.word	0x2004a1e4
 800bfb8:	2004c1e4 	.word	0x2004c1e4
 800bfbc:	2004b1e4 	.word	0x2004b1e4
 800bfc0:	200041c8 	.word	0x200041c8
 800bfc4:	200041cc 	.word	0x200041cc

0800bfc8 <CRI_func>:
		double x_i_ref = 0;
		double y_i_ref = 0;
		double z_i_ref = 0;

void CRI_func(uint16_t CCT_measure, float *Rabs)
{
 800bfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfcc:	ed2d 8b08 	vpush	{d8-d11}
 800bfd0:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800bfd4:	b083      	sub	sp, #12
	int16_t Ra_temp = 0, Rall_temp = 0, R9_temp = 0;
	float s_ref_CRI[1024] = {0};
 800bfd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
{
 800bfda:	900c      	str	r0, [sp, #48]	; 0x30
 800bfdc:	468a      	mov	sl, r1
	float s_ref_CRI[1024] = {0};
 800bfde:	a822      	add	r0, sp, #136	; 0x88
 800bfe0:	2100      	movs	r1, #0
 800bfe2:	f015 fed4 	bl	8021d8e <memset>
	float CRI_R_temp[1024] = {0};
 800bfe6:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800bfea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bfee:	2100      	movs	r1, #0
 800bff0:	3008      	adds	r0, #8
 800bff2:	f015 fecc 	bl	8021d8e <memset>

	memset(Ri_temp, 0, sizeof(Ri_temp));
 800bff6:	2278      	movs	r2, #120	; 0x78
 800bff8:	2100      	movs	r1, #0
 800bffa:	48c1      	ldr	r0, [pc, #772]	; (800c300 <CRI_func+0x338>)
 800bffc:	f015 fec7 	bl	8021d8e <memset>
	double y_ref = 0;
	double z_ref = 0;
	double u_ref = 0;
	double v_ref = 0;

	if (CCT_measure < 5000)
 800c000:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c002:	f241 3387 	movw	r3, #4999	; 0x1387
 800c006:	429a      	cmp	r2, r3
 800c008:	f200 8514 	bhi.w	800ca34 <CRI_func+0xa6c>
	{
		calcNorm560_CRI(CCT_measure);
 800c00c:	4610      	mov	r0, r2
 800c00e:	f7ff ff17 	bl	800be40 <calcNorm560_CRI>
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
	}
	
	
	float u_test = colorimetry_uv[0];	
 800c012:	4bbc      	ldr	r3, [pc, #752]	; (800c304 <CRI_func+0x33c>)
	float v_test = colorimetry_uv[1];
	
	bar_CRI = 0.1;
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c014:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800c308 <CRI_func+0x340>
	float u_test = colorimetry_uv[0];	
 800c018:	edd3 7a00 	vldr	s15, [r3]
	bar_CRI = 0.1;
 800c01c:	a1b2      	add	r1, pc, #712	; (adr r1, 800c2e8 <CRI_func+0x320>)
 800c01e:	e9d1 0100 	ldrd	r0, r1, [r1]
	float u_test = colorimetry_uv[0];	
 800c022:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
	float v_test = colorimetry_uv[1];
 800c026:	edd3 7a01 	vldr	s15, [r3, #4]
	bar_CRI = 0.1;
 800c02a:	4bb8      	ldr	r3, [pc, #736]	; (800c30c <CRI_func+0x344>)
	float v_test = colorimetry_uv[1];
 800c02c:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
	bar_CRI = 0.1;
 800c030:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c034:	210d      	movs	r1, #13
 800c036:	2055      	movs	r0, #85	; 0x55
 800c038:	f009 fb30 	bl	801569c <GUI_Bar_Measure>
	
	for (uint16_t y = 0; y < 1024; y++){
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c03c:	4bb4      	ldr	r3, [pc, #720]	; (800c310 <CRI_func+0x348>)
 800c03e:	ed93 7a00 	vldr	s14, [r3]
 800c042:	4bb4      	ldr	r3, [pc, #720]	; (800c314 <CRI_func+0x34c>)
 800c044:	f50a 5280 	add.w	r2, sl, #4096	; 0x1000
 800c048:	ecfa 6a01 	vldmia	sl!, {s13}
 800c04c:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t y = 0; y < 1024; y++){
 800c050:	4552      	cmp	r2, sl
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c052:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t y = 0; y < 1024; y++){
 800c056:	d1f7      	bne.n	800c048 <CRI_func+0x80>
 800c058:	ed9f 7ba5 	vldr	d7, [pc, #660]	; 800c2f0 <CRI_func+0x328>
 800c05c:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800c060:	eeb0 8a47 	vmov.f32	s16, s14
 800c064:	eef0 8a67 	vmov.f32	s17, s15
 800c068:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800c06c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c070:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c074:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c078:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c07c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c080:	2300      	movs	r3, #0
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	9310      	str	r3, [sp, #64]	; 0x40
 800c086:	9311      	str	r3, [sp, #68]	; 0x44
	}
	
	for (uint8_t i = 0; i < 15; i++)
	{
		bar_CRI += 0.05;
 800c088:	4ca0      	ldr	r4, [pc, #640]	; (800c30c <CRI_func+0x344>)
		for (int j = 0; j < 1024; j++)
		{
			if (i == 0)
			{
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c08a:	4fa3      	ldr	r7, [pc, #652]	; (800c318 <CRI_func+0x350>)
 800c08c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800c314 <CRI_func+0x34c>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c090:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800c340 <CRI_func+0x378>
		bar_CRI += 0.05;
 800c094:	a398      	add	r3, pc, #608	; (adr r3, 800c2f8 <CRI_func+0x330>)
 800c096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c09e:	f7f4 f90d 	bl	80002bc <__adddf3>
 800c0a2:	e9c4 0100 	strd	r0, r1, [r4]
		GUI_Bar_Measure(85, 13, bar_CRI);
 800c0a6:	f7f4 fdb3 	bl	8000c10 <__aeabi_d2f>
 800c0aa:	210d      	movs	r1, #13
 800c0ac:	ee00 0a10 	vmov	s0, r0
 800c0b0:	2055      	movs	r0, #85	; 0x55
 800c0b2:	f009 faf3 	bl	801569c <GUI_Bar_Measure>
		 x_i_test = 0;
 800c0b6:	4b99      	ldr	r3, [pc, #612]	; (800c31c <CRI_func+0x354>)
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c0b8:	4899      	ldr	r0, [pc, #612]	; (800c320 <CRI_func+0x358>)
		 x_i_test = 0;
 800c0ba:	ed83 8b00 	vstr	d8, [r3]
		 y_i_test = 0;
 800c0be:	4b99      	ldr	r3, [pc, #612]	; (800c324 <CRI_func+0x35c>)
 800c0c0:	ed83 8b00 	vstr	d8, [r3]
		 z_i_test = 0;
 800c0c4:	4b98      	ldr	r3, [pc, #608]	; (800c328 <CRI_func+0x360>)
 800c0c6:	ed83 8b00 	vstr	d8, [r3]
		 x_i_ref = 0;
 800c0ca:	4b98      	ldr	r3, [pc, #608]	; (800c32c <CRI_func+0x364>)
 800c0cc:	ed83 8b00 	vstr	d8, [r3]
		 y_i_ref = 0;
 800c0d0:	4b97      	ldr	r3, [pc, #604]	; (800c330 <CRI_func+0x368>)
 800c0d2:	ed83 8b00 	vstr	d8, [r3]
		 z_i_ref = 0;
 800c0d6:	4b97      	ldr	r3, [pc, #604]	; (800c334 <CRI_func+0x36c>)
 800c0d8:	ed83 8b00 	vstr	d8, [r3]
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c0dc:	9b00      	ldr	r3, [sp, #0]
 800c0de:	f50d 5284 	add.w	r2, sp, #4224	; 0x1080
 800c0e2:	3208      	adds	r2, #8
 800c0e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c0e8:	eb00 3003 	add.w	r0, r0, r3, lsl #12
 800c0ec:	f002 fda4 	bl	800ec38 <Calibration_Load_Pack>
 800c0f0:	2400      	movs	r4, #0
		for (int j = 0; j < 1024; j++)
 800c0f2:	4625      	mov	r5, r4
 800c0f4:	f89d 3000 	ldrb.w	r3, [sp]
 800c0f8:	930d      	str	r3, [sp, #52]	; 0x34
			if (i == 0)
 800c0fa:	9b00      	ldr	r3, [sp, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d150      	bne.n	800c1a2 <CRI_func+0x1da>
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c100:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c102:	4628      	mov	r0, r5
 800c104:	f7ff fed4 	bl	800beb0 <calcSref_CRI>
 800c108:	ab22      	add	r3, sp, #136	; 0x88
 800c10a:	4423      	add	r3, r4
 800c10c:	ed83 0a00 	vstr	s0, [r3]
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c110:	19e3      	adds	r3, r4, r7
 800c112:	edd3 9a00 	vldr	s19, [r3]
 800c116:	eb09 0304 	add.w	r3, r9, r4
 800c11a:	edd3 7a00 	vldr	s15, [r3]
 800c11e:	ee69 7aa7 	vmul.f32	s15, s19, s15
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c122:	eeb0 9a40 	vmov.f32	s18, s0
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c126:	ee17 0a90 	vmov	r0, s15
 800c12a:	f7f4 fa25 	bl	8000578 <__aeabi_f2d>
 800c12e:	4602      	mov	r2, r0
 800c130:	460b      	mov	r3, r1
 800c132:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c136:	f7f4 f8c1 	bl	80002bc <__adddf3>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c13a:	eb04 0308 	add.w	r3, r4, r8
 800c13e:	edd3 7a00 	vldr	s15, [r3]
 800c142:	ee69 7a27 	vmul.f32	s15, s18, s15
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c146:	e9cd 0104 	strd	r0, r1, [sp, #16]
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c14a:	ee17 0a90 	vmov	r0, s15
 800c14e:	f7f4 fa13 	bl	8000578 <__aeabi_f2d>
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c15a:	f7f4 f8af 	bl	80002bc <__adddf3>
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c15e:	ee69 7a29 	vmul.f32	s15, s18, s19
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c162:	e9cd 0108 	strd	r0, r1, [sp, #32]
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c166:	ee17 0a90 	vmov	r0, s15
 800c16a:	f7f4 fa05 	bl	8000578 <__aeabi_f2d>
 800c16e:	4602      	mov	r2, r0
 800c170:	460b      	mov	r3, r1
 800c172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c176:	f7f4 f8a1 	bl	80002bc <__adddf3>
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c17a:	4b6f      	ldr	r3, [pc, #444]	; (800c338 <CRI_func+0x370>)
 800c17c:	4423      	add	r3, r4
 800c17e:	edd3 7a00 	vldr	s15, [r3]
 800c182:	ee69 7a27 	vmul.f32	s15, s18, s15
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c186:	e9cd 0106 	strd	r0, r1, [sp, #24]
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c18a:	ee17 0a90 	vmov	r0, s15
 800c18e:	f7f4 f9f3 	bl	8000578 <__aeabi_f2d>
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
 800c196:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c19a:	f7f4 f88f 	bl	80002bc <__adddf3>
 800c19e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			}

			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c1a2:	f50d 5384 	add.w	r3, sp, #4224	; 0x1080
 800c1a6:	3308      	adds	r3, #8
 800c1a8:	4423      	add	r3, r4
 800c1aa:	ed93 9a00 	vldr	s18, [r3]
 800c1ae:	4e5b      	ldr	r6, [pc, #364]	; (800c31c <CRI_func+0x354>)
 800c1b0:	eb09 0304 	add.w	r3, r9, r4
 800c1b4:	edd3 9a00 	vldr	s19, [r3]
 800c1b8:	eb04 0308 	add.w	r3, r4, r8
 800c1bc:	ee69 9a29 	vmul.f32	s19, s18, s19
 800c1c0:	ed93 ba00 	vldr	s22, [r3]
 800c1c4:	ee69 7a8b 	vmul.f32	s15, s19, s22
		for (int j = 0; j < 1024; j++)
 800c1c8:	3501      	adds	r5, #1
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c1ca:	ee17 0a90 	vmov	r0, s15
 800c1ce:	f7f4 f9d3 	bl	8000578 <__aeabi_f2d>
 800c1d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c1d6:	f7f4 f871 	bl	80002bc <__adddf3>
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c1da:	19e3      	adds	r3, r4, r7
 800c1dc:	edd3 aa00 	vldr	s21, [r3]
 800c1e0:	ee69 7aaa 	vmul.f32	s15, s19, s21
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c1e4:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c1e8:	4e4e      	ldr	r6, [pc, #312]	; (800c324 <CRI_func+0x35c>)
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c1ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c1ee:	ee17 0a90 	vmov	r0, s15
 800c1f2:	f7f4 f9c1 	bl	8000578 <__aeabi_f2d>
 800c1f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c1fa:	f7f4 f85f 	bl	80002bc <__adddf3>
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c1fe:	4b4e      	ldr	r3, [pc, #312]	; (800c338 <CRI_func+0x370>)
 800c200:	4423      	add	r3, r4
 800c202:	ed93 aa00 	vldr	s20, [r3]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c206:	4682      	mov	sl, r0
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c208:	ee69 7a8a 	vmul.f32	s15, s19, s20
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c20c:	468b      	mov	fp, r1
 800c20e:	e9c6 ab00 	strd	sl, fp, [r6]
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c212:	4e45      	ldr	r6, [pc, #276]	; (800c328 <CRI_func+0x360>)
 800c214:	ee17 0a90 	vmov	r0, s15
 800c218:	f7f4 f9ae 	bl	8000578 <__aeabi_f2d>
 800c21c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c220:	f7f4 f84c 	bl	80002bc <__adddf3>

			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c224:	ab22      	add	r3, sp, #136	; 0x88
 800c226:	4423      	add	r3, r4
 800c228:	edd3 7a00 	vldr	s15, [r3]
 800c22c:	ee29 9a27 	vmul.f32	s18, s18, s15
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c230:	e9c6 0100 	strd	r0, r1, [r6]
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c234:	ee6b 7a09 	vmul.f32	s15, s22, s18
 800c238:	4e3c      	ldr	r6, [pc, #240]	; (800c32c <CRI_func+0x364>)
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c23a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c23e:	ee17 0a90 	vmov	r0, s15
 800c242:	f7f4 f999 	bl	8000578 <__aeabi_f2d>
 800c246:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c24a:	f7f4 f837 	bl	80002bc <__adddf3>
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c24e:	ee6a 7a89 	vmul.f32	s15, s21, s18
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c252:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c256:	4e36      	ldr	r6, [pc, #216]	; (800c330 <CRI_func+0x368>)
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c258:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c25c:	ee17 0a90 	vmov	r0, s15
 800c260:	f7f4 f98a 	bl	8000578 <__aeabi_f2d>
 800c264:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c268:	f7f4 f828 	bl	80002bc <__adddf3>
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c26c:	ee6a 7a09 	vmul.f32	s15, s20, s18
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c270:	e9c6 0100 	strd	r0, r1, [r6]
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c274:	4e2f      	ldr	r6, [pc, #188]	; (800c334 <CRI_func+0x36c>)
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c276:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c27a:	ee17 0a90 	vmov	r0, s15
 800c27e:	f7f4 f97b 	bl	8000578 <__aeabi_f2d>
 800c282:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c286:	f7f4 f819 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 800c28a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c28e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800c292:	e9c6 0100 	strd	r0, r1, [r6]
 800c296:	f104 0404 	add.w	r4, r4, #4
		for (int j = 0; j < 1024; j++)
 800c29a:	f47f af2b 	bne.w	800c0f4 <CRI_func+0x12c>
		}
		if (i == 0) 
 800c29e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f040 8089 	bne.w	800c3b8 <CRI_func+0x3f0>
		{
			k_ref = 100 / y_ref;
 800c2a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	4923      	ldr	r1, [pc, #140]	; (800c33c <CRI_func+0x374>)
 800c2ae:	f7f4 fae1 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800c2b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
			k_ref = 100 / y_ref;
 800c2b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
			k_test = 100 / k_test;
 800c2ba:	2000      	movs	r0, #0
 800c2bc:	491f      	ldr	r1, [pc, #124]	; (800c33c <CRI_func+0x374>)
 800c2be:	f7f4 fad9 	bl	8000874 <__aeabi_ddiv>
			x_ref *= k_ref;
 800c2c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_test = 100 / k_test;
 800c2c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
			x_ref *= k_ref;
 800c2ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c2ce:	f7f4 f9a7 	bl	8000620 <__aeabi_dmul>
			y_ref *= k_ref;
 800c2d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			x_ref *= k_ref;
 800c2d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
			y_ref *= k_ref;
 800c2da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2de:	f7f4 f99f 	bl	8000620 <__aeabi_dmul>
			z_ref *= k_ref;
 800c2e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2e6:	e02d      	b.n	800c344 <CRI_func+0x37c>
 800c2e8:	9999999a 	.word	0x9999999a
 800c2ec:	3fb99999 	.word	0x3fb99999
	...
 800c2f8:	9999999a 	.word	0x9999999a
 800c2fc:	3fa99999 	.word	0x3fa99999
 800c300:	2008c270 	.word	0x2008c270
 800c304:	2008add4 	.word	0x2008add4
 800c308:	3dcccccd 	.word	0x3dcccccd
 800c30c:	2008c220 	.word	0x2008c220
 800c310:	2009115c 	.word	0x2009115c
 800c314:	200041e4 	.word	0x200041e4
 800c318:	2004e1e8 	.word	0x2004e1e8
 800c31c:	200051f0 	.word	0x200051f0
 800c320:	0811b040 	.word	0x0811b040
 800c324:	20005200 	.word	0x20005200
 800c328:	20005210 	.word	0x20005210
 800c32c:	200051e8 	.word	0x200051e8
 800c330:	200051f8 	.word	0x200051f8
 800c334:	20005208 	.word	0x20005208
 800c338:	20088db8 	.word	0x20088db8
 800c33c:	40590000 	.word	0x40590000
 800c340:	20085db8 	.word	0x20085db8
			y_ref *= k_ref;
 800c344:	e9cd 0106 	strd	r0, r1, [sp, #24]
			z_ref *= k_ref;
 800c348:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c34c:	f7f4 f968 	bl	8000620 <__aeabi_dmul>
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c350:	2200      	movs	r2, #0
			z_ref *= k_ref;
 800c352:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c356:	4bb7      	ldr	r3, [pc, #732]	; (800c634 <CRI_func+0x66c>)
 800c358:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c35c:	f7f4 f960 	bl	8000620 <__aeabi_dmul>
 800c360:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c364:	f7f3 ffaa 	bl	80002bc <__adddf3>
 800c368:	2200      	movs	r2, #0
 800c36a:	4604      	mov	r4, r0
 800c36c:	460d      	mov	r5, r1
 800c36e:	4bb2      	ldr	r3, [pc, #712]	; (800c638 <CRI_func+0x670>)
 800c370:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c374:	f7f4 f954 	bl	8000620 <__aeabi_dmul>
 800c378:	4602      	mov	r2, r0
 800c37a:	460b      	mov	r3, r1
 800c37c:	4620      	mov	r0, r4
 800c37e:	4629      	mov	r1, r5
 800c380:	f7f3 ff9c 	bl	80002bc <__adddf3>
 800c384:	2200      	movs	r2, #0
 800c386:	4604      	mov	r4, r0
 800c388:	460d      	mov	r5, r1
 800c38a:	4bac      	ldr	r3, [pc, #688]	; (800c63c <CRI_func+0x674>)
 800c38c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c390:	f7f4 f946 	bl	8000620 <__aeabi_dmul>
 800c394:	4622      	mov	r2, r4
 800c396:	462b      	mov	r3, r5
 800c398:	f7f4 fa6c 	bl	8000874 <__aeabi_ddiv>
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800c39c:	2200      	movs	r2, #0
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c39e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800c3a2:	4ba7      	ldr	r3, [pc, #668]	; (800c640 <CRI_func+0x678>)
 800c3a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3a8:	f7f4 f93a 	bl	8000620 <__aeabi_dmul>
 800c3ac:	4622      	mov	r2, r4
 800c3ae:	462b      	mov	r3, r5
 800c3b0:	f7f4 fa60 	bl	8000874 <__aeabi_ddiv>
 800c3b4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58

		}	
		x_i_test *= k_test;	
 800c3b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c3bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c0:	f7f4 f92e 	bl	8000620 <__aeabi_dmul>
 800c3c4:	4b9f      	ldr	r3, [pc, #636]	; (800c644 <CRI_func+0x67c>)
 800c3c6:	4680      	mov	r8, r0
 800c3c8:	4689      	mov	r9, r1
 800c3ca:	e9c3 8900 	strd	r8, r9, [r3]
		y_i_test *= k_test;
 800c3ce:	4652      	mov	r2, sl
 800c3d0:	465b      	mov	r3, fp
 800c3d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3d6:	f7f4 f923 	bl	8000620 <__aeabi_dmul>
 800c3da:	4b9b      	ldr	r3, [pc, #620]	; (800c648 <CRI_func+0x680>)
 800c3dc:	4682      	mov	sl, r0
 800c3de:	468b      	mov	fp, r1
 800c3e0:	e9c3 ab00 	strd	sl, fp, [r3]
		z_i_test *= k_test;
 800c3e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3e8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c3ec:	f7f4 f918 	bl	8000620 <__aeabi_dmul>
 800c3f0:	4b96      	ldr	r3, [pc, #600]	; (800c64c <CRI_func+0x684>)
 800c3f2:	4604      	mov	r4, r0
 800c3f4:	460d      	mov	r5, r1
 800c3f6:	e9c3 4500 	strd	r4, r5, [r3]
		
		x_i_ref *= k_ref;
 800c3fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3fe:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c402:	f7f4 f90d 	bl	8000620 <__aeabi_dmul>
 800c406:	4b92      	ldr	r3, [pc, #584]	; (800c650 <CRI_func+0x688>)
 800c408:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800c40c:	e9c3 0100 	strd	r0, r1, [r3]
		y_i_ref *= k_ref;
 800c410:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c414:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c418:	f7f4 f902 	bl	8000620 <__aeabi_dmul>
 800c41c:	4b8d      	ldr	r3, [pc, #564]	; (800c654 <CRI_func+0x68c>)
 800c41e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c422:	e9c3 0100 	strd	r0, r1, [r3]
		z_i_ref *= k_ref;	
 800c426:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800c42a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c42e:	f7f4 f8f7 	bl	8000620 <__aeabi_dmul>
 800c432:	4b89      	ldr	r3, [pc, #548]	; (800c658 <CRI_func+0x690>)
 800c434:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800c438:	e9c3 0100 	strd	r0, r1, [r3]
	
		 u_test_s = 4 * x_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c43c:	2200      	movs	r2, #0
 800c43e:	4b7d      	ldr	r3, [pc, #500]	; (800c634 <CRI_func+0x66c>)
 800c440:	4650      	mov	r0, sl
 800c442:	4659      	mov	r1, fp
 800c444:	f7f4 f8ec 	bl	8000620 <__aeabi_dmul>
 800c448:	4642      	mov	r2, r8
 800c44a:	464b      	mov	r3, r9
 800c44c:	f7f3 ff36 	bl	80002bc <__adddf3>
 800c450:	2200      	movs	r2, #0
 800c452:	4606      	mov	r6, r0
 800c454:	460f      	mov	r7, r1
 800c456:	4b78      	ldr	r3, [pc, #480]	; (800c638 <CRI_func+0x670>)
 800c458:	4620      	mov	r0, r4
 800c45a:	4629      	mov	r1, r5
 800c45c:	f7f4 f8e0 	bl	8000620 <__aeabi_dmul>
 800c460:	4602      	mov	r2, r0
 800c462:	460b      	mov	r3, r1
 800c464:	4630      	mov	r0, r6
 800c466:	4639      	mov	r1, r7
 800c468:	f7f3 ff28 	bl	80002bc <__adddf3>
 800c46c:	2200      	movs	r2, #0
 800c46e:	4604      	mov	r4, r0
 800c470:	460d      	mov	r5, r1
 800c472:	4b72      	ldr	r3, [pc, #456]	; (800c63c <CRI_func+0x674>)
 800c474:	4640      	mov	r0, r8
 800c476:	4649      	mov	r1, r9
 800c478:	f7f4 f8d2 	bl	8000620 <__aeabi_dmul>
 800c47c:	4622      	mov	r2, r4
 800c47e:	462b      	mov	r3, r5
 800c480:	f7f4 f9f8 	bl	8000874 <__aeabi_ddiv>
 800c484:	4b75      	ldr	r3, [pc, #468]	; (800c65c <CRI_func+0x694>)
 800c486:	4680      	mov	r8, r0
 800c488:	4689      	mov	r9, r1
 800c48a:	e9c3 8900 	strd	r8, r9, [r3]
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c48e:	2200      	movs	r2, #0
 800c490:	4b6b      	ldr	r3, [pc, #428]	; (800c640 <CRI_func+0x678>)
 800c492:	4650      	mov	r0, sl
 800c494:	4659      	mov	r1, fp
 800c496:	f7f4 f8c3 	bl	8000620 <__aeabi_dmul>
 800c49a:	4622      	mov	r2, r4
 800c49c:	462b      	mov	r3, r5
 800c49e:	f7f4 f9e9 	bl	8000874 <__aeabi_ddiv>
 800c4a2:	4b6f      	ldr	r3, [pc, #444]	; (800c660 <CRI_func+0x698>)
 800c4a4:	4606      	mov	r6, r0
 800c4a6:	460f      	mov	r7, r1
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c4a8:	ec4b ab10 	vmov	d0, sl, fp
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c4ac:	e9c3 6700 	strd	r6, r7, [r3]
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c4b0:	f018 fb66 	bl	8024b80 <cbrt>
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	ec51 0b10 	vmov	r0, r1, d0
 800c4ba:	4b6a      	ldr	r3, [pc, #424]	; (800c664 <CRI_func+0x69c>)
 800c4bc:	f7f4 f8b0 	bl	8000620 <__aeabi_dmul>
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	4b69      	ldr	r3, [pc, #420]	; (800c668 <CRI_func+0x6a0>)
 800c4c4:	f7f3 fef8 	bl	80002b8 <__aeabi_dsub>
 800c4c8:	4b68      	ldr	r3, [pc, #416]	; (800c66c <CRI_func+0x6a4>)
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c4ca:	2200      	movs	r2, #0
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c4cc:	e9c3 0100 	strd	r0, r1, [r3]
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c4d0:	4b67      	ldr	r3, [pc, #412]	; (800c670 <CRI_func+0x6a8>)
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c4d2:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c4d6:	f7f4 f8a3 	bl	8000620 <__aeabi_dmul>
 800c4da:	4604      	mov	r4, r0
 800c4dc:	9820      	ldr	r0, [sp, #128]	; 0x80
 800c4de:	460d      	mov	r5, r1
 800c4e0:	f7f4 f84a 	bl	8000578 <__aeabi_f2d>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	460b      	mov	r3, r1
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	4649      	mov	r1, r9
 800c4ec:	f7f3 fee4 	bl	80002b8 <__aeabi_dsub>
 800c4f0:	4622      	mov	r2, r4
 800c4f2:	462b      	mov	r3, r5
 800c4f4:	f7f4 f894 	bl	8000620 <__aeabi_dmul>
 800c4f8:	4b5e      	ldr	r3, [pc, #376]	; (800c674 <CRI_func+0x6ac>)
 800c4fa:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800c4fe:	e9c3 0100 	strd	r0, r1, [r3]
		 v_i_test = 13 * L_i_test * (v_test_s - v_test);
 800c502:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c504:	f7f4 f838 	bl	8000578 <__aeabi_f2d>
 800c508:	4602      	mov	r2, r0
 800c50a:	460b      	mov	r3, r1
 800c50c:	4630      	mov	r0, r6
 800c50e:	4639      	mov	r1, r7
 800c510:	f7f3 fed2 	bl	80002b8 <__aeabi_dsub>
 800c514:	4622      	mov	r2, r4
 800c516:	462b      	mov	r3, r5
 800c518:	f7f4 f882 	bl	8000620 <__aeabi_dmul>
 800c51c:	4b56      	ldr	r3, [pc, #344]	; (800c678 <CRI_func+0x6b0>)
 800c51e:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800c522:	e9c3 0100 	strd	r0, r1, [r3]

		 u_ref_s = 4 * x_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c526:	2200      	movs	r2, #0
 800c528:	4b42      	ldr	r3, [pc, #264]	; (800c634 <CRI_func+0x66c>)
 800c52a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c52e:	f7f4 f877 	bl	8000620 <__aeabi_dmul>
 800c532:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c536:	f7f3 fec1 	bl	80002bc <__adddf3>
 800c53a:	2200      	movs	r2, #0
 800c53c:	4604      	mov	r4, r0
 800c53e:	460d      	mov	r5, r1
 800c540:	4b3d      	ldr	r3, [pc, #244]	; (800c638 <CRI_func+0x670>)
 800c542:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800c546:	f7f4 f86b 	bl	8000620 <__aeabi_dmul>
 800c54a:	4602      	mov	r2, r0
 800c54c:	460b      	mov	r3, r1
 800c54e:	4620      	mov	r0, r4
 800c550:	4629      	mov	r1, r5
 800c552:	f7f3 feb3 	bl	80002bc <__adddf3>
 800c556:	2200      	movs	r2, #0
 800c558:	4606      	mov	r6, r0
 800c55a:	460f      	mov	r7, r1
 800c55c:	4b37      	ldr	r3, [pc, #220]	; (800c63c <CRI_func+0x674>)
 800c55e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800c562:	f7f4 f85d 	bl	8000620 <__aeabi_dmul>
 800c566:	4632      	mov	r2, r6
 800c568:	463b      	mov	r3, r7
 800c56a:	f7f4 f983 	bl	8000874 <__aeabi_ddiv>
 800c56e:	4b43      	ldr	r3, [pc, #268]	; (800c67c <CRI_func+0x6b4>)
 800c570:	4604      	mov	r4, r0
 800c572:	460d      	mov	r5, r1
 800c574:	e9c3 4500 	strd	r4, r5, [r3]
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c578:	2200      	movs	r2, #0
 800c57a:	4b31      	ldr	r3, [pc, #196]	; (800c640 <CRI_func+0x678>)
 800c57c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c580:	f7f4 f84e 	bl	8000620 <__aeabi_dmul>
 800c584:	4632      	mov	r2, r6
 800c586:	463b      	mov	r3, r7
 800c588:	f7f4 f974 	bl	8000874 <__aeabi_ddiv>
 800c58c:	4b3c      	ldr	r3, [pc, #240]	; (800c680 <CRI_func+0x6b8>)
 800c58e:	4682      	mov	sl, r0
 800c590:	468b      	mov	fp, r1
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800c592:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c596:	e9c3 ab00 	strd	sl, fp, [r3]
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800c59a:	f018 faf1 	bl	8024b80 <cbrt>
 800c59e:	2200      	movs	r2, #0
 800c5a0:	ec51 0b10 	vmov	r0, r1, d0
 800c5a4:	4b2f      	ldr	r3, [pc, #188]	; (800c664 <CRI_func+0x69c>)
 800c5a6:	f7f4 f83b 	bl	8000620 <__aeabi_dmul>
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	4b2e      	ldr	r3, [pc, #184]	; (800c668 <CRI_func+0x6a0>)
 800c5ae:	f7f3 fe83 	bl	80002b8 <__aeabi_dsub>
 800c5b2:	4b34      	ldr	r3, [pc, #208]	; (800c684 <CRI_func+0x6bc>)
 800c5b4:	4606      	mov	r6, r0
 800c5b6:	460f      	mov	r7, r1
 800c5b8:	e9c3 6700 	strd	r6, r7, [r3]
		 u_i_ref = 13 * L_i_ref * (u_ref_s - u_ref);
 800c5bc:	2200      	movs	r2, #0
 800c5be:	4b2c      	ldr	r3, [pc, #176]	; (800c670 <CRI_func+0x6a8>)
 800c5c0:	f7f4 f82e 	bl	8000620 <__aeabi_dmul>
 800c5c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c5c8:	4680      	mov	r8, r0
 800c5ca:	4689      	mov	r9, r1
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	4629      	mov	r1, r5
 800c5d0:	f7f3 fe72 	bl	80002b8 <__aeabi_dsub>
 800c5d4:	4642      	mov	r2, r8
 800c5d6:	464b      	mov	r3, r9
 800c5d8:	f7f4 f822 	bl	8000620 <__aeabi_dmul>
 800c5dc:	4b2a      	ldr	r3, [pc, #168]	; (800c688 <CRI_func+0x6c0>)
 800c5de:	4604      	mov	r4, r0
 800c5e0:	460d      	mov	r5, r1
 800c5e2:	e9c3 4500 	strd	r4, r5, [r3]
		 v_i_ref = 13 * L_i_ref * (v_ref_s - v_ref);
 800c5e6:	4650      	mov	r0, sl
 800c5e8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800c5ec:	4659      	mov	r1, fp
 800c5ee:	f7f3 fe63 	bl	80002b8 <__aeabi_dsub>
 800c5f2:	4642      	mov	r2, r8
 800c5f4:	464b      	mov	r3, r9
 800c5f6:	f7f4 f813 	bl	8000620 <__aeabi_dmul>
 800c5fa:	4b24      	ldr	r3, [pc, #144]	; (800c68c <CRI_func+0x6c4>)
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	4689      	mov	r9, r1
 800c600:	e9c3 8900 	strd	r8, r9, [r3]

		 delta_L = L_i_ref - L_i_test;
 800c604:	4630      	mov	r0, r6
 800c606:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c60a:	4639      	mov	r1, r7
 800c60c:	f7f3 fe54 	bl	80002b8 <__aeabi_dsub>
 800c610:	4b1f      	ldr	r3, [pc, #124]	; (800c690 <CRI_func+0x6c8>)
 800c612:	4606      	mov	r6, r0
 800c614:	460f      	mov	r7, r1
 800c616:	e9c3 6700 	strd	r6, r7, [r3]
		 delta_u = u_i_ref - u_i_test;
 800c61a:	4620      	mov	r0, r4
 800c61c:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800c620:	4629      	mov	r1, r5
 800c622:	f7f3 fe49 	bl	80002b8 <__aeabi_dsub>
 800c626:	4b1b      	ldr	r3, [pc, #108]	; (800c694 <CRI_func+0x6cc>)
 800c628:	4604      	mov	r4, r0
 800c62a:	460d      	mov	r5, r1
 800c62c:	e9c3 4500 	strd	r4, r5, [r3]
		 delta_v = v_i_ref - v_i_test;	
 800c630:	4640      	mov	r0, r8
 800c632:	e031      	b.n	800c698 <CRI_func+0x6d0>
 800c634:	402e0000 	.word	0x402e0000
 800c638:	40080000 	.word	0x40080000
 800c63c:	40100000 	.word	0x40100000
 800c640:	40180000 	.word	0x40180000
 800c644:	200051f0 	.word	0x200051f0
 800c648:	20005200 	.word	0x20005200
 800c64c:	20005210 	.word	0x20005210
 800c650:	200051e8 	.word	0x200051e8
 800c654:	200051f8 	.word	0x200051f8
 800c658:	20005208 	.word	0x20005208
 800c65c:	2008c240 	.word	0x2008c240
 800c660:	2008c1f0 	.word	0x2008c1f0
 800c664:	40390000 	.word	0x40390000
 800c668:	40310000 	.word	0x40310000
 800c66c:	2008c268 	.word	0x2008c268
 800c670:	402a0000 	.word	0x402a0000
 800c674:	2008c1f8 	.word	0x2008c1f8
 800c678:	2008c238 	.word	0x2008c238
 800c67c:	2008c260 	.word	0x2008c260
 800c680:	2008c200 	.word	0x2008c200
 800c684:	2008c248 	.word	0x2008c248
 800c688:	2008c218 	.word	0x2008c218
 800c68c:	2008c1e8 	.word	0x2008c1e8
 800c690:	2008c230 	.word	0x2008c230
 800c694:	2008c228 	.word	0x2008c228
 800c698:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800c69c:	4649      	mov	r1, r9
 800c69e:	f7f3 fe0b 	bl	80002b8 <__aeabi_dsub>
 800c6a2:	4bd5      	ldr	r3, [pc, #852]	; (800c9f8 <CRI_func+0xa30>)
 800c6a4:	4680      	mov	r8, r0
 800c6a6:	4689      	mov	r9, r1
		
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800c6a8:	4632      	mov	r2, r6
		 delta_v = v_i_ref - v_i_test;	
 800c6aa:	e9c3 8900 	strd	r8, r9, [r3]
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	463b      	mov	r3, r7
 800c6b2:	4639      	mov	r1, r7
 800c6b4:	f7f3 ffb4 	bl	8000620 <__aeabi_dmul>
 800c6b8:	4622      	mov	r2, r4
 800c6ba:	462b      	mov	r3, r5
 800c6bc:	4606      	mov	r6, r0
 800c6be:	460f      	mov	r7, r1
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	4629      	mov	r1, r5
 800c6c4:	f7f3 ffac 	bl	8000620 <__aeabi_dmul>
 800c6c8:	4602      	mov	r2, r0
 800c6ca:	460b      	mov	r3, r1
 800c6cc:	4630      	mov	r0, r6
 800c6ce:	4639      	mov	r1, r7
 800c6d0:	f7f3 fdf4 	bl	80002bc <__adddf3>
 800c6d4:	4642      	mov	r2, r8
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	460d      	mov	r5, r1
 800c6da:	464b      	mov	r3, r9
 800c6dc:	4640      	mov	r0, r8
 800c6de:	4649      	mov	r1, r9
 800c6e0:	f7f3 ff9e 	bl	8000620 <__aeabi_dmul>
 800c6e4:	4602      	mov	r2, r0
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	4620      	mov	r0, r4
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	f7f3 fde6 	bl	80002bc <__adddf3>
 800c6f0:	ec41 0b10 	vmov	d0, r0, r1
 800c6f4:	f018 fdf8 	bl	80252e8 <sqrt>
 800c6f8:	4bc0      	ldr	r3, [pc, #768]	; (800c9fc <CRI_func+0xa34>)
 800c6fa:	ec51 0b10 	vmov	r0, r1, d0
 800c6fe:	ed83 0b00 	vstr	d0, [r3]
		Ri_temp[i] = 100 - 4.6*delta_E_CRI;
 800c702:	a39b      	add	r3, pc, #620	; (adr r3, 800c970 <CRI_func+0x9a8>)
 800c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c708:	f7f3 ff8a 	bl	8000620 <__aeabi_dmul>
 800c70c:	4602      	mov	r2, r0
 800c70e:	460b      	mov	r3, r1
 800c710:	2000      	movs	r0, #0
 800c712:	49bb      	ldr	r1, [pc, #748]	; (800ca00 <CRI_func+0xa38>)
 800c714:	f7f3 fdd0 	bl	80002b8 <__aeabi_dsub>
 800c718:	9a00      	ldr	r2, [sp, #0]
 800c71a:	4bba      	ldr	r3, [pc, #744]	; (800ca04 <CRI_func+0xa3c>)
 800c71c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c720:	e9c3 0100 	strd	r0, r1, [r3]
		Ri[i] = (int8_t)Ri_temp[i];
 800c724:	f7f4 fa2c 	bl	8000b80 <__aeabi_d2iz>
 800c728:	4bb7      	ldr	r3, [pc, #732]	; (800ca08 <CRI_func+0xa40>)
 800c72a:	9a00      	ldr	r2, [sp, #0]
 800c72c:	b240      	sxtb	r0, r0
 800c72e:	54d0      	strb	r0, [r2, r3]
		
		if (i < 8)
 800c730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c732:	2b07      	cmp	r3, #7
 800c734:	f200 8111 	bhi.w	800c95a <CRI_func+0x992>
			Ra_temp += Ri[i];
 800c738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c73a:	4403      	add	r3, r0
 800c73c:	b21b      	sxth	r3, r3
 800c73e:	9311      	str	r3, [sp, #68]	; 0x44
		if (i == 8)
			R9 = Ri[i];
		if(i < 14)
 800c740:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c742:	2b0e      	cmp	r3, #14
 800c744:	f040 810f 	bne.w	800c966 <CRI_func+0x99e>
			Rall_temp += Ri[i];
		
		memset(CRI_R_temp, 0, sizeof(CRI_R_temp));		
 800c748:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800c74c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c750:	2100      	movs	r1, #0
 800c752:	3008      	adds	r0, #8
 800c754:	f015 fb1b 	bl	8021d8e <memset>
 800c758:	9b00      	ldr	r3, [sp, #0]
 800c75a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 15; i++)
 800c75c:	2b0f      	cmp	r3, #15
 800c75e:	9300      	str	r3, [sp, #0]
 800c760:	f47f ac92 	bne.w	800c088 <CRI_func+0xc0>
	}
	
	bar_CRI = 0.9;
 800c764:	a384      	add	r3, pc, #528	; (adr r3, 800c978 <CRI_func+0x9b0>)
 800c766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c76a:	4ca8      	ldr	r4, [pc, #672]	; (800ca0c <CRI_func+0xa44>)
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c76c:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 800ca10 <CRI_func+0xa48>
 800c770:	210d      	movs	r1, #13
 800c772:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 0.9;
 800c774:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c778:	f008 ff90 	bl	801569c <GUI_Bar_Measure>
	
	Rall_temp /= 14;
 800c77c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	Rall = (int8_t)Rall_temp;
	
	Ra_temp /= 8;
 800c77e:	9a11      	ldr	r2, [sp, #68]	; 0x44
	Rall_temp /= 14;
 800c780:	200e      	movs	r0, #14
 800c782:	fb93 f0f0 	sdiv	r0, r3, r0
	Rall = (int8_t)Rall_temp;
 800c786:	4ba3      	ldr	r3, [pc, #652]	; (800ca14 <CRI_func+0xa4c>)
 800c788:	7018      	strb	r0, [r3, #0]
	Ra_temp /= 8;
 800c78a:	2308      	movs	r3, #8
 800c78c:	fb92 f3f3 	sdiv	r3, r2, r3
	Ra = (int8_t)Ra_temp;
 800c790:	4aa1      	ldr	r2, [pc, #644]	; (800ca18 <CRI_func+0xa50>)
 800c792:	7013      	strb	r3, [r2, #0]
	
	bar_CRI = 1.0;
 800c794:	4ba1      	ldr	r3, [pc, #644]	; (800ca1c <CRI_func+0xa54>)
 800c796:	2200      	movs	r2, #0
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c798:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c79c:	210d      	movs	r1, #13
 800c79e:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 1.0;
 800c7a0:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c7a4:	f008 ff7a 	bl	801569c <GUI_Bar_Measure>
 800c7a8:	f50d 5d02 	add.w	sp, sp, #8320	; 0x2080
 800c7ac:	b003      	add	sp, #12
 800c7ae:	ecbd 8b08 	vpop	{d8-d11}
 800c7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c7b6:	ee68 8a08 	vmul.f32	s17, s16, s16
 800c7ba:	ee68 7a28 	vmul.f32	s15, s16, s17
 800c7be:	ee17 0a90 	vmov	r0, s15
 800c7c2:	f7f3 fed9 	bl	8000578 <__aeabi_f2d>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	a16d      	add	r1, pc, #436	; (adr r1, 800c980 <CRI_func+0x9b8>)
 800c7cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7d0:	f7f4 f850 	bl	8000874 <__aeabi_ddiv>
 800c7d4:	4606      	mov	r6, r0
 800c7d6:	ee18 0a90 	vmov	r0, s17
 800c7da:	460f      	mov	r7, r1
 800c7dc:	f7f3 fecc 	bl	8000578 <__aeabi_f2d>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	460b      	mov	r3, r1
 800c7e4:	a168      	add	r1, pc, #416	; (adr r1, 800c988 <CRI_func+0x9c0>)
 800c7e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7ea:	f7f4 f843 	bl	8000874 <__aeabi_ddiv>
 800c7ee:	4602      	mov	r2, r0
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	4639      	mov	r1, r7
 800c7f6:	f7f3 fd61 	bl	80002bc <__adddf3>
 800c7fa:	4606      	mov	r6, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800c7fc:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c800:	460f      	mov	r7, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800c802:	f7f3 feb9 	bl	8000578 <__aeabi_f2d>
 800c806:	4602      	mov	r2, r0
 800c808:	460b      	mov	r3, r1
 800c80a:	a161      	add	r1, pc, #388	; (adr r1, 800c990 <CRI_func+0x9c8>)
 800c80c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c810:	f7f4 f830 	bl	8000874 <__aeabi_ddiv>
 800c814:	4602      	mov	r2, r0
 800c816:	460b      	mov	r3, r1
 800c818:	4630      	mov	r0, r6
 800c81a:	4639      	mov	r1, r7
 800c81c:	f7f3 fd4e 	bl	80002bc <__adddf3>
 800c820:	a35d      	add	r3, pc, #372	; (adr r3, 800c998 <CRI_func+0x9d0>)
 800c822:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800c826:	f7f3 fd49 	bl	80002bc <__adddf3>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c82a:	e9c4 0100 	strd	r0, r1, [r4]
		yD_CRI = -3 * xD_CRI*xD_CRI + 2.87*xD_CRI - 0.275;
 800c82e:	e9d4 4500 	ldrd	r4, r5, [r4]
 800c832:	2200      	movs	r2, #0
 800c834:	4b7a      	ldr	r3, [pc, #488]	; (800ca20 <CRI_func+0xa58>)
 800c836:	4620      	mov	r0, r4
 800c838:	4629      	mov	r1, r5
 800c83a:	f7f3 fef1 	bl	8000620 <__aeabi_dmul>
 800c83e:	4622      	mov	r2, r4
 800c840:	462b      	mov	r3, r5
 800c842:	f7f3 feed 	bl	8000620 <__aeabi_dmul>
 800c846:	a356      	add	r3, pc, #344	; (adr r3, 800c9a0 <CRI_func+0x9d8>)
 800c848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c84c:	4606      	mov	r6, r0
 800c84e:	460f      	mov	r7, r1
 800c850:	4620      	mov	r0, r4
 800c852:	4629      	mov	r1, r5
 800c854:	f7f3 fee4 	bl	8000620 <__aeabi_dmul>
 800c858:	4602      	mov	r2, r0
 800c85a:	460b      	mov	r3, r1
 800c85c:	4630      	mov	r0, r6
 800c85e:	4639      	mov	r1, r7
 800c860:	f7f3 fd2c 	bl	80002bc <__adddf3>
 800c864:	a350      	add	r3, pc, #320	; (adr r3, 800c9a8 <CRI_func+0x9e0>)
 800c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c86a:	f7f3 fd25 	bl	80002b8 <__aeabi_dsub>
 800c86e:	4b6d      	ldr	r3, [pc, #436]	; (800ca24 <CRI_func+0xa5c>)
 800c870:	4606      	mov	r6, r0
 800c872:	460f      	mov	r7, r1
 800c874:	e9c3 6700 	strd	r6, r7, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c878:	4620      	mov	r0, r4
 800c87a:	a34d      	add	r3, pc, #308	; (adr r3, 800c9b0 <CRI_func+0x9e8>)
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	4629      	mov	r1, r5
 800c882:	f7f3 fecd 	bl	8000620 <__aeabi_dmul>
 800c886:	a34c      	add	r3, pc, #304	; (adr r3, 800c9b8 <CRI_func+0x9f0>)
 800c888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88c:	f7f3 fd16 	bl	80002bc <__adddf3>
 800c890:	a34b      	add	r3, pc, #300	; (adr r3, 800c9c0 <CRI_func+0x9f8>)
 800c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c896:	4680      	mov	r8, r0
 800c898:	4689      	mov	r9, r1
 800c89a:	4630      	mov	r0, r6
 800c89c:	4639      	mov	r1, r7
 800c89e:	f7f3 febf 	bl	8000620 <__aeabi_dmul>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	4640      	mov	r0, r8
 800c8a8:	4649      	mov	r1, r9
 800c8aa:	f7f3 fd05 	bl	80002b8 <__aeabi_dsub>
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800c8ae:	a346      	add	r3, pc, #280	; (adr r3, 800c9c8 <CRI_func+0xa00>)
 800c8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c8b4:	4680      	mov	r8, r0
 800c8b6:	4689      	mov	r9, r1
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	4629      	mov	r1, r5
 800c8bc:	f7f3 feb0 	bl	8000620 <__aeabi_dmul>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	a142      	add	r1, pc, #264	; (adr r1, 800c9d0 <CRI_func+0xa08>)
 800c8c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ca:	f7f3 fcf5 	bl	80002b8 <__aeabi_dsub>
 800c8ce:	a342      	add	r3, pc, #264	; (adr r3, 800c9d8 <CRI_func+0xa10>)
 800c8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8d4:	e9cd 0100 	strd	r0, r1, [sp]
 800c8d8:	4630      	mov	r0, r6
 800c8da:	4639      	mov	r1, r7
 800c8dc:	f7f3 fea0 	bl	8000620 <__aeabi_dmul>
 800c8e0:	4602      	mov	r2, r0
 800c8e2:	460b      	mov	r3, r1
 800c8e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8e8:	f7f3 fce8 	bl	80002bc <__adddf3>
 800c8ec:	f7f4 f990 	bl	8000c10 <__aeabi_d2f>
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c8f0:	f7f3 fe42 	bl	8000578 <__aeabi_f2d>
 800c8f4:	4642      	mov	r2, r8
 800c8f6:	464b      	mov	r3, r9
 800c8f8:	f7f3 ffbc 	bl	8000874 <__aeabi_ddiv>
 800c8fc:	f7f4 f988 	bl	8000c10 <__aeabi_d2f>
 800c900:	4b49      	ldr	r3, [pc, #292]	; (800ca28 <CRI_func+0xa60>)
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800c902:	4629      	mov	r1, r5
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c904:	6018      	str	r0, [r3, #0]
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800c906:	a336      	add	r3, pc, #216	; (adr r3, 800c9e0 <CRI_func+0xa18>)
 800c908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90c:	4620      	mov	r0, r4
 800c90e:	f7f3 fe87 	bl	8000620 <__aeabi_dmul>
 800c912:	4602      	mov	r2, r0
 800c914:	460b      	mov	r3, r1
 800c916:	a134      	add	r1, pc, #208	; (adr r1, 800c9e8 <CRI_func+0xa20>)
 800c918:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c91c:	f7f3 fccc 	bl	80002b8 <__aeabi_dsub>
 800c920:	a333      	add	r3, pc, #204	; (adr r3, 800c9f0 <CRI_func+0xa28>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	4604      	mov	r4, r0
 800c928:	460d      	mov	r5, r1
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	f7f3 fe77 	bl	8000620 <__aeabi_dmul>
 800c932:	4602      	mov	r2, r0
 800c934:	460b      	mov	r3, r1
 800c936:	4620      	mov	r0, r4
 800c938:	4629      	mov	r1, r5
 800c93a:	f7f3 fcbf 	bl	80002bc <__adddf3>
 800c93e:	f7f4 f967 	bl	8000c10 <__aeabi_d2f>
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c942:	f7f3 fe19 	bl	8000578 <__aeabi_f2d>
 800c946:	464b      	mov	r3, r9
 800c948:	4642      	mov	r2, r8
 800c94a:	f7f3 ff93 	bl	8000874 <__aeabi_ddiv>
 800c94e:	f7f4 f95f 	bl	8000c10 <__aeabi_d2f>
 800c952:	4b36      	ldr	r3, [pc, #216]	; (800ca2c <CRI_func+0xa64>)
 800c954:	6018      	str	r0, [r3, #0]
 800c956:	f7ff bb5c 	b.w	800c012 <CRI_func+0x4a>
		if (i == 8)
 800c95a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c95c:	2b08      	cmp	r3, #8
 800c95e:	f47f aeef 	bne.w	800c740 <CRI_func+0x778>
			R9 = Ri[i];
 800c962:	4b33      	ldr	r3, [pc, #204]	; (800ca30 <CRI_func+0xa68>)
 800c964:	7018      	strb	r0, [r3, #0]
			Rall_temp += Ri[i];
 800c966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c968:	4418      	add	r0, r3
 800c96a:	b203      	sxth	r3, r0
 800c96c:	9310      	str	r3, [sp, #64]	; 0x40
 800c96e:	e6eb      	b.n	800c748 <CRI_func+0x780>
 800c970:	66666666 	.word	0x66666666
 800c974:	40126666 	.word	0x40126666
 800c978:	cccccccd 	.word	0xcccccccd
 800c97c:	3feccccc 	.word	0x3feccccc
 800c980:	dc000000 	.word	0xdc000000
 800c984:	c1f12993 	.word	0xc1f12993
 800c988:	00000000 	.word	0x00000000
 800c98c:	4146a47c 	.word	0x4146a47c
 800c990:	3d70a3d7 	.word	0x3d70a3d7
 800c994:	4058c70a 	.word	0x4058c70a
 800c998:	d594f26b 	.word	0xd594f26b
 800c99c:	3fcf3d74 	.word	0x3fcf3d74
 800c9a0:	8f5c28f6 	.word	0x8f5c28f6
 800c9a4:	4006f5c2 	.word	0x4006f5c2
 800c9a8:	9999999a 	.word	0x9999999a
 800c9ac:	3fd19999 	.word	0x3fd19999
 800c9b0:	af4f0d84 	.word	0xaf4f0d84
 800c9b4:	3fd06594 	.word	0x3fd06594
 800c9b8:	9f559b3d 	.word	0x9f559b3d
 800c9bc:	3f98adab 	.word	0x3f98adab
 800c9c0:	487fcb92 	.word	0x487fcb92
 800c9c4:	3fe77dbf 	.word	0x3fe77dbf
 800c9c8:	17c1bda5 	.word	0x17c1bda5
 800c9cc:	3ffc5326 	.word	0x3ffc5326
 800c9d0:	76c8b439 	.word	0x76c8b439
 800c9d4:	bff59fbe 	.word	0xbff59fbe
 800c9d8:	0aa64c30 	.word	0x0aa64c30
 800c9dc:	4017a546 	.word	0x4017a546
 800c9e0:	205bc01a 	.word	0x205bc01a
 800c9e4:	403f7141 	.word	0x403f7141
 800c9e8:	eb851eb8 	.word	0xeb851eb8
 800c9ec:	3f9eb851 	.word	0x3f9eb851
 800c9f0:	ee631f8a 	.word	0xee631f8a
 800c9f4:	403e125a 	.word	0x403e125a
 800c9f8:	2008c2e8 	.word	0x2008c2e8
 800c9fc:	2008c258 	.word	0x2008c258
 800ca00:	40590000 	.word	0x40590000
 800ca04:	2008c270 	.word	0x2008c270
 800ca08:	200041d3 	.word	0x200041d3
 800ca0c:	2008c220 	.word	0x2008c220
 800ca10:	3f666666 	.word	0x3f666666
 800ca14:	200041d2 	.word	0x200041d2
 800ca18:	200041d1 	.word	0x200041d1
 800ca1c:	3ff00000 	.word	0x3ff00000
 800ca20:	c0080000 	.word	0xc0080000
 800ca24:	2008c250 	.word	0x2008c250
 800ca28:	200041c8 	.word	0x200041c8
 800ca2c:	200041cc 	.word	0x200041cc
 800ca30:	200041d0 	.word	0x200041d0
		if (CCT_measure < 7000)
 800ca34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca36:	4c30      	ldr	r4, [pc, #192]	; (800caf8 <CRI_func+0xb30>)
 800ca38:	f641 3357 	movw	r3, #6999	; 0x1b57
 800ca3c:	ee07 2a90 	vmov	s15, r2
 800ca40:	429a      	cmp	r2, r3
 800ca42:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800ca46:	f67f aeb6 	bls.w	800c7b6 <CRI_func+0x7ee>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ca4a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca4c:	f7f3 fd72 	bl	8000534 <__aeabi_ui2d>
 800ca50:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800cad0 <CRI_func+0xb08>
 800ca54:	ec41 0b10 	vmov	d0, r0, r1
 800ca58:	f018 face 	bl	8024ff8 <pow>
 800ca5c:	ee68 7a08 	vmul.f32	s15, s16, s16
 800ca60:	ed8d 0b00 	vstr	d0, [sp]
 800ca64:	ee17 0a90 	vmov	r0, s15
 800ca68:	f7f3 fd86 	bl	8000578 <__aeabi_f2d>
 800ca6c:	4602      	mov	r2, r0
 800ca6e:	460b      	mov	r3, r1
 800ca70:	a119      	add	r1, pc, #100	; (adr r1, 800cad8 <CRI_func+0xb10>)
 800ca72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca76:	f7f3 fefd 	bl	8000874 <__aeabi_ddiv>
 800ca7a:	ed9d 0b00 	vldr	d0, [sp]
 800ca7e:	4606      	mov	r6, r0
 800ca80:	ec53 2b10 	vmov	r2, r3, d0
 800ca84:	460f      	mov	r7, r1
 800ca86:	a116      	add	r1, pc, #88	; (adr r1, 800cae0 <CRI_func+0xb18>)
 800ca88:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca8c:	f7f3 fef2 	bl	8000874 <__aeabi_ddiv>
 800ca90:	4602      	mov	r2, r0
 800ca92:	460b      	mov	r3, r1
 800ca94:	4630      	mov	r0, r6
 800ca96:	4639      	mov	r1, r7
 800ca98:	f7f3 fc10 	bl	80002bc <__adddf3>
 800ca9c:	4606      	mov	r6, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800ca9e:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800caa2:	460f      	mov	r7, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800caa4:	f7f3 fd68 	bl	8000578 <__aeabi_f2d>
 800caa8:	4602      	mov	r2, r0
 800caaa:	460b      	mov	r3, r1
 800caac:	a10e      	add	r1, pc, #56	; (adr r1, 800cae8 <CRI_func+0xb20>)
 800caae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cab2:	f7f3 fedf 	bl	8000874 <__aeabi_ddiv>
 800cab6:	4602      	mov	r2, r0
 800cab8:	460b      	mov	r3, r1
 800caba:	4630      	mov	r0, r6
 800cabc:	4639      	mov	r1, r7
 800cabe:	f7f3 fbfd 	bl	80002bc <__adddf3>
 800cac2:	a30b      	add	r3, pc, #44	; (adr r3, 800caf0 <CRI_func+0xb28>)
 800cac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac8:	e6ad      	b.n	800c826 <CRI_func+0x85e>
 800caca:	bf00      	nop
 800cacc:	f3af 8000 	nop.w
 800cad0:	00000000 	.word	0x00000000
 800cad4:	40080000 	.word	0x40080000
 800cad8:	00000000 	.word	0x00000000
 800cadc:	413d04e8 	.word	0x413d04e8
 800cae0:	00000001 	.word	0x00000001
 800cae4:	c1dde5cf 	.word	0xc1dde5cf
 800cae8:	28f5c290 	.word	0x28f5c290
 800caec:	406eef5c 	.word	0x406eef5c
 800caf0:	a3ec02f3 	.word	0xa3ec02f3
 800caf4:	3fce5753 	.word	0x3fce5753
 800caf8:	2008c208 	.word	0x2008c208

0800cafc <CRI_Axes>:
#include "CRI_graph.h"
uint8_t TFT_direction = 0x00;



void CRI_Axes(uint8_t direction){
 800cafc:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800cafe:	bbb8      	cbnz	r0, 800cb70 <CRI_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800cb00:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800cb04:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800cb08:	2212      	movs	r2, #18
 800cb0a:	215f      	movs	r1, #95	; 0x5f
 800cb0c:	2010      	movs	r0, #16
 800cb0e:	9400      	str	r4, [sp, #0]
 800cb10:	f011 fc03 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800cb14:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800cb18:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800cb1c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800cb20:	2010      	movs	r0, #16
 800cb22:	9400      	str	r4, [sp, #0]
 800cb24:	f011 fbf9 	bl	801e31a <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800cb28:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cb32:	2010      	movs	r0, #16
 800cb34:	9400      	str	r4, [sp, #0]
 800cb36:	f011 fb93 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800cb3a:	f240 1301 	movw	r3, #257	; 0x101
 800cb3e:	4619      	mov	r1, r3
 800cb40:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cb44:	2010      	movs	r0, #16
 800cb46:	9400      	str	r4, [sp, #0]
 800cb48:	f011 fb8a 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800cb4c:	23b5      	movs	r3, #181	; 0xb5
 800cb4e:	4619      	mov	r1, r3
 800cb50:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cb54:	2010      	movs	r0, #16
 800cb56:	9400      	str	r4, [sp, #0]
 800cb58:	f011 fb82 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800cb5c:	2369      	movs	r3, #105	; 0x69
 800cb5e:	9400      	str	r4, [sp, #0]
 800cb60:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cb64:	4619      	mov	r1, r3
 800cb66:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800cb68:	f011 fb7a 	bl	801e260 <TFT_DrawLine>
		
	}
}
 800cb6c:	b002      	add	sp, #8
 800cb6e:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800cb70:	2801      	cmp	r0, #1
 800cb72:	d131      	bne.n	800cbd8 <CRI_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800cb74:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800cb78:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cb7c:	22ff      	movs	r2, #255	; 0xff
 800cb7e:	2146      	movs	r1, #70	; 0x46
 800cb80:	20fd      	movs	r0, #253	; 0xfd
 800cb82:	9400      	str	r4, [sp, #0]
 800cb84:	f011 fbc9 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800cb88:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cb8c:	22ff      	movs	r2, #255	; 0xff
 800cb8e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800cb92:	2028      	movs	r0, #40	; 0x28
 800cb94:	9400      	str	r4, [sp, #0]
 800cb96:	f011 fbc0 	bl	801e31a <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800cb9a:	22cc      	movs	r2, #204	; 0xcc
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cba2:	2146      	movs	r1, #70	; 0x46
 800cba4:	9400      	str	r4, [sp, #0]
 800cba6:	f011 fb5b 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800cbaa:	2297      	movs	r2, #151	; 0x97
 800cbac:	4610      	mov	r0, r2
 800cbae:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cbb2:	2146      	movs	r1, #70	; 0x46
 800cbb4:	9400      	str	r4, [sp, #0]
 800cbb6:	f011 fb53 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800cbba:	2262      	movs	r2, #98	; 0x62
 800cbbc:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cbc0:	4610      	mov	r0, r2
 800cbc2:	9400      	str	r4, [sp, #0]
 800cbc4:	2146      	movs	r1, #70	; 0x46
 800cbc6:	f011 fb4b 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800cbca:	9400      	str	r4, [sp, #0]
 800cbcc:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cbd0:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800cbd2:	2146      	movs	r1, #70	; 0x46
 800cbd4:	4610      	mov	r0, r2
 800cbd6:	e7c7      	b.n	800cb68 <CRI_Axes+0x6c>
	} else if (direction == 0x02)
 800cbd8:	2802      	cmp	r0, #2
 800cbda:	d1c7      	bne.n	800cb6c <CRI_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800cbdc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800cbe0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cbe4:	2210      	movs	r2, #16
 800cbe6:	214a      	movs	r1, #74	; 0x4a
 800cbe8:	2012      	movs	r0, #18
 800cbea:	9400      	str	r4, [sp, #0]
 800cbec:	f011 fb95 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800cbf0:	234c      	movs	r3, #76	; 0x4c
 800cbf2:	22e8      	movs	r2, #232	; 0xe8
 800cbf4:	214a      	movs	r1, #74	; 0x4a
 800cbf6:	2011      	movs	r0, #17
 800cbf8:	9400      	str	r4, [sp, #0]
 800cbfa:	f011 fb8e 	bl	801e31a <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800cbfe:	2244      	movs	r2, #68	; 0x44
 800cc00:	4610      	mov	r0, r2
 800cc02:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cc06:	2146      	movs	r1, #70	; 0x46
 800cc08:	9400      	str	r4, [sp, #0]
 800cc0a:	f011 fb29 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800cc0e:	2279      	movs	r2, #121	; 0x79
 800cc10:	4610      	mov	r0, r2
 800cc12:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cc16:	2146      	movs	r1, #70	; 0x46
 800cc18:	9400      	str	r4, [sp, #0]
 800cc1a:	f011 fb21 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800cc1e:	22ae      	movs	r2, #174	; 0xae
 800cc20:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cc24:	4610      	mov	r0, r2
 800cc26:	9400      	str	r4, [sp, #0]
 800cc28:	2146      	movs	r1, #70	; 0x46
 800cc2a:	f011 fb19 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800cc2e:	9400      	str	r4, [sp, #0]
 800cc30:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cc34:	22e3      	movs	r2, #227	; 0xe3
 800cc36:	e7cc      	b.n	800cbd2 <CRI_Axes+0xd6>

0800cc38 <CRI_Axes_Measure>:

void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800cc38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800cc3c:	ac02      	add	r4, sp, #8
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800cc3e:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800cc40:	2300      	movs	r3, #0
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800cc42:	4688      	mov	r8, r1
 800cc44:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800cc46:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d161      	bne.n	800cd12 <CRI_Axes_Measure+0xda>
	{
		TFT_SetTextColor(TFT_White);
 800cc4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cc52:	f011 fd91 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800cc56:	2063      	movs	r0, #99	; 0x63
 800cc58:	f011 fd94 	bl	801e784 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800cc5c:	4861      	ldr	r0, [pc, #388]	; (800cde4 <CRI_Axes_Measure+0x1ac>)
 800cc5e:	f011 fd85 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(17, 70, 'a');
 800cc62:	2261      	movs	r2, #97	; 0x61
 800cc64:	2146      	movs	r1, #70	; 0x46
 800cc66:	2011      	movs	r0, #17
 800cc68:	f011 fe4a 	bl	801e900 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800cc6c:	485e      	ldr	r0, [pc, #376]	; (800cde8 <CRI_Axes_Measure+0x1b0>)
 800cc6e:	f011 fd7d 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(3, 70-2, 'R');
 800cc72:	2252      	movs	r2, #82	; 0x52
 800cc74:	2144      	movs	r1, #68	; 0x44
 800cc76:	2003      	movs	r0, #3
 800cc78:	f011 fe42 	bl	801e900 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Ra);
 800cc7c:	4642      	mov	r2, r8
 800cc7e:	495b      	ldr	r1, [pc, #364]	; (800cdec <CRI_Axes_Measure+0x1b4>)
 800cc80:	4620      	mov	r0, r4
 800cc82:	f015 f88d 	bl	8021da0 <sprintf>
		TFT_DisplayString(35, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800cc86:	2303      	movs	r3, #3
 800cc88:	4622      	mov	r2, r4
 800cc8a:	2144      	movs	r1, #68	; 0x44
 800cc8c:	2023      	movs	r0, #35	; 0x23
 800cc8e:	f011 fe8f 	bl	801e9b0 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800cc92:	4854      	ldr	r0, [pc, #336]	; (800cde4 <CRI_Axes_Measure+0x1ac>)
 800cc94:	f011 fd6a 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(113, 70, 'l');
 800cc98:	226c      	movs	r2, #108	; 0x6c
 800cc9a:	2146      	movs	r1, #70	; 0x46
 800cc9c:	2071      	movs	r0, #113	; 0x71
 800cc9e:	f011 fe2f 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(122, 70, 'l');
 800cca2:	226c      	movs	r2, #108	; 0x6c
 800cca4:	2146      	movs	r1, #70	; 0x46
 800cca6:	207a      	movs	r0, #122	; 0x7a
 800cca8:	f011 fe2a 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(102, 70, 'a');
 800ccac:	2261      	movs	r2, #97	; 0x61
 800ccae:	2146      	movs	r1, #70	; 0x46
 800ccb0:	2066      	movs	r0, #102	; 0x66
 800ccb2:	f011 fe25 	bl	801e900 <TFT_DrawChar>
		
		TFT_SetFont(&Font16EN_arch_big);
 800ccb6:	484c      	ldr	r0, [pc, #304]	; (800cde8 <CRI_Axes_Measure+0x1b0>)
 800ccb8:	f011 fd58 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(86, 70-2, 'R');
 800ccbc:	2252      	movs	r2, #82	; 0x52
 800ccbe:	2144      	movs	r1, #68	; 0x44
 800ccc0:	2056      	movs	r0, #86	; 0x56
 800ccc2:	f011 fe1d 	bl	801e900 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Rall);
 800ccc6:	463a      	mov	r2, r7
 800ccc8:	4948      	ldr	r1, [pc, #288]	; (800cdec <CRI_Axes_Measure+0x1b4>)
 800ccca:	4620      	mov	r0, r4
 800cccc:	f015 f868 	bl	8021da0 <sprintf>
		TFT_DisplayString(138, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	4622      	mov	r2, r4
 800ccd4:	2144      	movs	r1, #68	; 0x44
 800ccd6:	208a      	movs	r0, #138	; 0x8a
 800ccd8:	f011 fe6a 	bl	801e9b0 <TFT_DisplayString>
		

		
		sprintf (buffer, "%d", R9);
 800ccdc:	4632      	mov	r2, r6
 800ccde:	4943      	ldr	r1, [pc, #268]	; (800cdec <CRI_Axes_Measure+0x1b4>)
 800cce0:	4620      	mov	r0, r4
 800cce2:	f015 f85d 	bl	8021da0 <sprintf>
		TFT_DisplayString(R9 < 0 ? 215 : 220, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800cce6:	2e00      	cmp	r6, #0
 800cce8:	bfb4      	ite	lt
 800ccea:	20d7      	movlt	r0, #215	; 0xd7
 800ccec:	20dc      	movge	r0, #220	; 0xdc
 800ccee:	2303      	movs	r3, #3
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	2144      	movs	r1, #68	; 0x44
 800ccf4:	f011 fe5c 	bl	801e9b0 <TFT_DisplayString>
		TFT_DrawChar(183, 70-2, 'R');
 800ccf8:	2252      	movs	r2, #82	; 0x52
 800ccfa:	2144      	movs	r1, #68	; 0x44
 800ccfc:	20b7      	movs	r0, #183	; 0xb7
 800ccfe:	f011 fdff 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(198, 70-2, '9');
 800cd02:	2239      	movs	r2, #57	; 0x39
 800cd04:	2144      	movs	r1, #68	; 0x44
 800cd06:	20c6      	movs	r0, #198	; 0xc6
 800cd08:	f011 fdfa 	bl	801e900 <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
	
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800cd0c:	b002      	add	sp, #8
 800cd0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd12:	4d37      	ldr	r5, [pc, #220]	; (800cdf0 <CRI_Axes_Measure+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800cd14:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800cd16:	bf14      	ite	ne
 800cd18:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800cd1a:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800cd1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800cd20:	bf18      	it	ne
 800cd22:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800cd24:	f011 fd28 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800cd28:	2063      	movs	r0, #99	; 0x63
 800cd2a:	f011 fd2b 	bl	801e784 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800cd2e:	482d      	ldr	r0, [pc, #180]	; (800cde4 <CRI_Axes_Measure+0x1ac>)
 800cd30:	f011 fd1c 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800cd34:	2261      	movs	r2, #97	; 0x61
 800cd36:	2110      	movs	r1, #16
 800cd38:	2064      	movs	r0, #100	; 0x64
 800cd3a:	f011 fde1 	bl	801e900 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800cd3e:	482a      	ldr	r0, [pc, #168]	; (800cde8 <CRI_Axes_Measure+0x1b0>)
 800cd40:	f011 fd14 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'R');
 800cd44:	2252      	movs	r2, #82	; 0x52
 800cd46:	210e      	movs	r1, #14
 800cd48:	2055      	movs	r0, #85	; 0x55
 800cd4a:	f011 fdd9 	bl	801e900 <TFT_DrawChar>
		sprintf (buffer, "%d", Ra);
 800cd4e:	4642      	mov	r2, r8
 800cd50:	4926      	ldr	r1, [pc, #152]	; (800cdec <CRI_Axes_Measure+0x1b4>)
 800cd52:	4620      	mov	r0, r4
 800cd54:	f015 f824 	bl	8021da0 <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cd58:	2303      	movs	r3, #3
 800cd5a:	4622      	mov	r2, r4
 800cd5c:	210e      	movs	r1, #14
 800cd5e:	207d      	movs	r0, #125	; 0x7d
 800cd60:	f011 fe26 	bl	801e9b0 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800cd64:	481f      	ldr	r0, [pc, #124]	; (800cde4 <CRI_Axes_Measure+0x1ac>)
 800cd66:	f011 fd01 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(221, 16, 'l');
 800cd6a:	226c      	movs	r2, #108	; 0x6c
 800cd6c:	2110      	movs	r1, #16
 800cd6e:	20dd      	movs	r0, #221	; 0xdd
 800cd70:	f011 fdc6 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(230, 16, 'l');
 800cd74:	226c      	movs	r2, #108	; 0x6c
 800cd76:	2110      	movs	r1, #16
 800cd78:	20e6      	movs	r0, #230	; 0xe6
 800cd7a:	f011 fdc1 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(210, 16, 'a');
 800cd7e:	2261      	movs	r2, #97	; 0x61
 800cd80:	2110      	movs	r1, #16
 800cd82:	20d2      	movs	r0, #210	; 0xd2
 800cd84:	f011 fdbc 	bl	801e900 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800cd88:	4817      	ldr	r0, [pc, #92]	; (800cde8 <CRI_Axes_Measure+0x1b0>)
 800cd8a:	f011 fcef 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(195, 16-2, 'R');
 800cd8e:	2252      	movs	r2, #82	; 0x52
 800cd90:	210e      	movs	r1, #14
 800cd92:	20c3      	movs	r0, #195	; 0xc3
 800cd94:	f011 fdb4 	bl	801e900 <TFT_DrawChar>
		sprintf (buffer, "%d", Rall);
 800cd98:	463a      	mov	r2, r7
 800cd9a:	4914      	ldr	r1, [pc, #80]	; (800cdec <CRI_Axes_Measure+0x1b4>)
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f014 ffff 	bl	8021da0 <sprintf>
		TFT_DisplayString(255, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cda2:	2303      	movs	r3, #3
 800cda4:	4622      	mov	r2, r4
 800cda6:	210e      	movs	r1, #14
 800cda8:	20ff      	movs	r0, #255	; 0xff
 800cdaa:	f011 fe01 	bl	801e9b0 <TFT_DisplayString>
		TFT_DrawChar(325, 16-2, 'R');
 800cdae:	2252      	movs	r2, #82	; 0x52
 800cdb0:	210e      	movs	r1, #14
 800cdb2:	f240 1045 	movw	r0, #325	; 0x145
 800cdb6:	f011 fda3 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(340, 16-2, '9');
 800cdba:	2239      	movs	r2, #57	; 0x39
 800cdbc:	210e      	movs	r1, #14
 800cdbe:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800cdc2:	f011 fd9d 	bl	801e900 <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
 800cdc6:	4632      	mov	r2, r6
 800cdc8:	4908      	ldr	r1, [pc, #32]	; (800cdec <CRI_Axes_Measure+0x1b4>)
 800cdca:	4620      	mov	r0, r4
 800cdcc:	f014 ffe8 	bl	8021da0 <sprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cdd0:	2303      	movs	r3, #3
 800cdd2:	4622      	mov	r2, r4
 800cdd4:	210e      	movs	r1, #14
 800cdd6:	f240 106d 	movw	r0, #365	; 0x16d
 800cdda:	f011 fde9 	bl	801e9b0 <TFT_DisplayString>
		TFT_direction = 0x00;
 800cdde:	2300      	movs	r3, #0
 800cde0:	702b      	strb	r3, [r5, #0]
}
 800cde2:	e793      	b.n	800cd0c <CRI_Axes_Measure+0xd4>
 800cde4:	200001c0 	.word	0x200001c0
 800cde8:	200001b0 	.word	0x200001b0
 800cdec:	08026a11 	.word	0x08026a11
 800cdf0:	20005218 	.word	0x20005218

0800cdf4 <CRI_Axes_Text>:

void CRI_Axes_Text(uint8_t direction){
 800cdf4:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800cdf6:	4604      	mov	r4, r0
 800cdf8:	2800      	cmp	r0, #0
 800cdfa:	f040 811f 	bne.w	800d03c <CRI_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800cdfe:	488e      	ldr	r0, [pc, #568]	; (800d038 <CRI_Axes_Text+0x244>)
 800ce00:	f011 fcb4 	bl	801e76c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800ce04:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ce08:	f011 fcb6 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800ce0c:	2063      	movs	r0, #99	; 0x63
 800ce0e:	f011 fcb9 	bl	801e784 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'R');
 800ce12:	2252      	movs	r2, #82	; 0x52
 800ce14:	f240 119f 	movw	r1, #415	; 0x19f
 800ce18:	2018      	movs	r0, #24
 800ce1a:	f011 fd71 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800ce1e:	2231      	movs	r2, #49	; 0x31
 800ce20:	f240 119f 	movw	r1, #415	; 0x19f
 800ce24:	201e      	movs	r0, #30
 800ce26:	f011 fd6b 	bl	801e900 <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'R');
 800ce2a:	2252      	movs	r2, #82	; 0x52
 800ce2c:	f240 119f 	movw	r1, #415	; 0x19f
 800ce30:	2028      	movs	r0, #40	; 0x28
 800ce32:	f011 fd65 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800ce36:	2232      	movs	r2, #50	; 0x32
 800ce38:	f240 119f 	movw	r1, #415	; 0x19f
 800ce3c:	202e      	movs	r0, #46	; 0x2e
 800ce3e:	f011 fd5f 	bl	801e900 <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'R');
 800ce42:	2252      	movs	r2, #82	; 0x52
 800ce44:	f240 119f 	movw	r1, #415	; 0x19f
 800ce48:	2038      	movs	r0, #56	; 0x38
 800ce4a:	f011 fd59 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800ce4e:	2233      	movs	r2, #51	; 0x33
 800ce50:	f240 119f 	movw	r1, #415	; 0x19f
 800ce54:	203e      	movs	r0, #62	; 0x3e
 800ce56:	f011 fd53 	bl	801e900 <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'R');
 800ce5a:	2252      	movs	r2, #82	; 0x52
 800ce5c:	f240 119f 	movw	r1, #415	; 0x19f
 800ce60:	2048      	movs	r0, #72	; 0x48
 800ce62:	f011 fd4d 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800ce66:	2234      	movs	r2, #52	; 0x34
 800ce68:	f240 119f 	movw	r1, #415	; 0x19f
 800ce6c:	204e      	movs	r0, #78	; 0x4e
 800ce6e:	f011 fd47 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'R');
 800ce72:	2252      	movs	r2, #82	; 0x52
 800ce74:	f240 119f 	movw	r1, #415	; 0x19f
 800ce78:	2058      	movs	r0, #88	; 0x58
 800ce7a:	f011 fd41 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800ce7e:	2235      	movs	r2, #53	; 0x35
 800ce80:	f240 119f 	movw	r1, #415	; 0x19f
 800ce84:	205e      	movs	r0, #94	; 0x5e
 800ce86:	f011 fd3b 	bl	801e900 <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'R');
 800ce8a:	2252      	movs	r2, #82	; 0x52
 800ce8c:	f240 119f 	movw	r1, #415	; 0x19f
 800ce90:	2068      	movs	r0, #104	; 0x68
 800ce92:	f011 fd35 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800ce96:	2236      	movs	r2, #54	; 0x36
 800ce98:	f240 119f 	movw	r1, #415	; 0x19f
 800ce9c:	206e      	movs	r0, #110	; 0x6e
 800ce9e:	f011 fd2f 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'R');
 800cea2:	2252      	movs	r2, #82	; 0x52
 800cea4:	f240 119f 	movw	r1, #415	; 0x19f
 800cea8:	2078      	movs	r0, #120	; 0x78
 800ceaa:	f011 fd29 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800ceae:	2237      	movs	r2, #55	; 0x37
 800ceb0:	f240 119f 	movw	r1, #415	; 0x19f
 800ceb4:	207e      	movs	r0, #126	; 0x7e
 800ceb6:	f011 fd23 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'R');
 800ceba:	2252      	movs	r2, #82	; 0x52
 800cebc:	f240 119f 	movw	r1, #415	; 0x19f
 800cec0:	2088      	movs	r0, #136	; 0x88
 800cec2:	f011 fd1d 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800cec6:	2238      	movs	r2, #56	; 0x38
 800cec8:	f240 119f 	movw	r1, #415	; 0x19f
 800cecc:	208e      	movs	r0, #142	; 0x8e
 800cece:	f011 fd17 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'R');
 800ced2:	2252      	movs	r2, #82	; 0x52
 800ced4:	f240 119f 	movw	r1, #415	; 0x19f
 800ced8:	2098      	movs	r0, #152	; 0x98
 800ceda:	f011 fd11 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800cede:	2239      	movs	r2, #57	; 0x39
 800cee0:	f240 119f 	movw	r1, #415	; 0x19f
 800cee4:	209e      	movs	r0, #158	; 0x9e
 800cee6:	f011 fd0b 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800ceea:	2231      	movs	r2, #49	; 0x31
 800ceec:	f240 119f 	movw	r1, #415	; 0x19f
 800cef0:	20ad      	movs	r0, #173	; 0xad
 800cef2:	f011 fd05 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'R');
 800cef6:	2252      	movs	r2, #82	; 0x52
 800cef8:	f240 119f 	movw	r1, #415	; 0x19f
 800cefc:	20a8      	movs	r0, #168	; 0xa8
 800cefe:	f011 fcff 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800cf02:	2230      	movs	r2, #48	; 0x30
 800cf04:	f240 119f 	movw	r1, #415	; 0x19f
 800cf08:	20b1      	movs	r0, #177	; 0xb1
 800cf0a:	f011 fcf9 	bl	801e900 <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800cf0e:	2231      	movs	r2, #49	; 0x31
 800cf10:	f240 119f 	movw	r1, #415	; 0x19f
 800cf14:	20bd      	movs	r0, #189	; 0xbd
 800cf16:	f011 fcf3 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'R');
 800cf1a:	2252      	movs	r2, #82	; 0x52
 800cf1c:	f240 119f 	movw	r1, #415	; 0x19f
 800cf20:	20b8      	movs	r0, #184	; 0xb8
 800cf22:	f011 fced 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800cf26:	2231      	movs	r2, #49	; 0x31
 800cf28:	f240 119f 	movw	r1, #415	; 0x19f
 800cf2c:	20c2      	movs	r0, #194	; 0xc2
 800cf2e:	f011 fce7 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800cf32:	2231      	movs	r2, #49	; 0x31
 800cf34:	f240 119f 	movw	r1, #415	; 0x19f
 800cf38:	20cd      	movs	r0, #205	; 0xcd
 800cf3a:	f011 fce1 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'R');
 800cf3e:	2252      	movs	r2, #82	; 0x52
 800cf40:	f240 119f 	movw	r1, #415	; 0x19f
 800cf44:	20c8      	movs	r0, #200	; 0xc8
 800cf46:	f011 fcdb 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800cf4a:	2232      	movs	r2, #50	; 0x32
 800cf4c:	f240 119f 	movw	r1, #415	; 0x19f
 800cf50:	20d1      	movs	r0, #209	; 0xd1
 800cf52:	f011 fcd5 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800cf56:	2231      	movs	r2, #49	; 0x31
 800cf58:	f240 119f 	movw	r1, #415	; 0x19f
 800cf5c:	20dd      	movs	r0, #221	; 0xdd
 800cf5e:	f011 fccf 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'R');
 800cf62:	2252      	movs	r2, #82	; 0x52
 800cf64:	f240 119f 	movw	r1, #415	; 0x19f
 800cf68:	20d8      	movs	r0, #216	; 0xd8
 800cf6a:	f011 fcc9 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800cf6e:	2233      	movs	r2, #51	; 0x33
 800cf70:	f240 119f 	movw	r1, #415	; 0x19f
 800cf74:	20e1      	movs	r0, #225	; 0xe1
 800cf76:	f011 fcc3 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800cf7a:	2231      	movs	r2, #49	; 0x31
 800cf7c:	f240 119f 	movw	r1, #415	; 0x19f
 800cf80:	20ed      	movs	r0, #237	; 0xed
 800cf82:	f011 fcbd 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'R');
 800cf86:	2252      	movs	r2, #82	; 0x52
 800cf88:	f240 119f 	movw	r1, #415	; 0x19f
 800cf8c:	20e8      	movs	r0, #232	; 0xe8
 800cf8e:	f011 fcb7 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800cf92:	2234      	movs	r2, #52	; 0x34
 800cf94:	f240 119f 	movw	r1, #415	; 0x19f
 800cf98:	20f1      	movs	r0, #241	; 0xf1
 800cf9a:	f011 fcb1 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800cf9e:	2231      	movs	r2, #49	; 0x31
 800cfa0:	f240 119f 	movw	r1, #415	; 0x19f
 800cfa4:	20fd      	movs	r0, #253	; 0xfd
 800cfa6:	f011 fcab 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'R');
 800cfaa:	2252      	movs	r2, #82	; 0x52
 800cfac:	f240 119f 	movw	r1, #415	; 0x19f
 800cfb0:	20f8      	movs	r0, #248	; 0xf8
 800cfb2:	f011 fca5 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800cfb6:	2235      	movs	r2, #53	; 0x35
 800cfb8:	f240 119f 	movw	r1, #415	; 0x19f
 800cfbc:	f240 1001 	movw	r0, #257	; 0x101
 800cfc0:	f011 fc9e 	bl	801e900 <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800cfc4:	2230      	movs	r2, #48	; 0x30
 800cfc6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800cfca:	2005      	movs	r0, #5
 800cfcc:	f011 fc98 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800cfd0:	2232      	movs	r2, #50	; 0x32
 800cfd2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800cfd6:	2001      	movs	r0, #1
 800cfd8:	f011 fc92 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800cfdc:	2235      	movs	r2, #53	; 0x35
 800cfde:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800cfe2:	2007      	movs	r0, #7
 800cfe4:	f011 fc8c 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800cfe8:	2235      	movs	r2, #53	; 0x35
 800cfea:	f240 1101 	movw	r1, #257	; 0x101
 800cfee:	2001      	movs	r0, #1
 800cff0:	f011 fc86 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800cff4:	2230      	movs	r2, #48	; 0x30
 800cff6:	f240 1101 	movw	r1, #257	; 0x101
 800cffa:	2007      	movs	r0, #7
 800cffc:	f011 fc80 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800d000:	2237      	movs	r2, #55	; 0x37
 800d002:	21b5      	movs	r1, #181	; 0xb5
 800d004:	2001      	movs	r0, #1
 800d006:	f011 fc7b 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800d00a:	2235      	movs	r2, #53	; 0x35
 800d00c:	21b5      	movs	r1, #181	; 0xb5
 800d00e:	2007      	movs	r0, #7
 800d010:	f011 fc76 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800d014:	4620      	mov	r0, r4
 800d016:	2231      	movs	r2, #49	; 0x31
 800d018:	2169      	movs	r1, #105	; 0x69
 800d01a:	f011 fc71 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800d01e:	2230      	movs	r2, #48	; 0x30
 800d020:	2169      	movs	r1, #105	; 0x69
 800d022:	2004      	movs	r0, #4
 800d024:	f011 fc6c 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800d028:	2230      	movs	r2, #48	; 0x30
 800d02a:	2169      	movs	r1, #105	; 0x69
 800d02c:	2009      	movs	r0, #9
		TFT_DrawChar(62, 43, '0');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 800d02e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800d032:	f011 bc65 	b.w	801e900 <TFT_DrawChar>
 800d036:	bf00      	nop
 800d038:	20000210 	.word	0x20000210
 800d03c:	4d98      	ldr	r5, [pc, #608]	; (800d2a0 <CRI_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d03e:	2801      	cmp	r0, #1
 800d040:	bf0c      	ite	eq
 800d042:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800d044:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800d046:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800d04a:	bf18      	it	ne
 800d04c:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800d04e:	f011 fb93 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d052:	2063      	movs	r0, #99	; 0x63
 800d054:	f011 fb96 	bl	801e784 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800d058:	4892      	ldr	r0, [pc, #584]	; (800d2a4 <CRI_Axes_Text+0x4b0>)
 800d05a:	f011 fb87 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(87, 258, 'R');
 800d05e:	2252      	movs	r2, #82	; 0x52
 800d060:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d064:	2057      	movs	r0, #87	; 0x57
 800d066:	f011 fc4b 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800d06a:	2231      	movs	r2, #49	; 0x31
 800d06c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d070:	205d      	movs	r0, #93	; 0x5d
 800d072:	f011 fc45 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'R');
 800d076:	2252      	movs	r2, #82	; 0x52
 800d078:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d07c:	206d      	movs	r0, #109	; 0x6d
 800d07e:	f011 fc3f 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800d082:	2232      	movs	r2, #50	; 0x32
 800d084:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d088:	2073      	movs	r0, #115	; 0x73
 800d08a:	f011 fc39 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'R');
 800d08e:	2252      	movs	r2, #82	; 0x52
 800d090:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d094:	2083      	movs	r0, #131	; 0x83
 800d096:	f011 fc33 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800d09a:	2233      	movs	r2, #51	; 0x33
 800d09c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0a0:	2089      	movs	r0, #137	; 0x89
 800d0a2:	f011 fc2d 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'R');
 800d0a6:	2252      	movs	r2, #82	; 0x52
 800d0a8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0ac:	2099      	movs	r0, #153	; 0x99
 800d0ae:	f011 fc27 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800d0b2:	2234      	movs	r2, #52	; 0x34
 800d0b4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0b8:	209f      	movs	r0, #159	; 0x9f
 800d0ba:	f011 fc21 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'R');
 800d0be:	2252      	movs	r2, #82	; 0x52
 800d0c0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0c4:	20af      	movs	r0, #175	; 0xaf
 800d0c6:	f011 fc1b 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800d0ca:	2235      	movs	r2, #53	; 0x35
 800d0cc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0d0:	20b5      	movs	r0, #181	; 0xb5
 800d0d2:	f011 fc15 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'R');
 800d0d6:	2252      	movs	r2, #82	; 0x52
 800d0d8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0dc:	20c5      	movs	r0, #197	; 0xc5
 800d0de:	f011 fc0f 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800d0e2:	2236      	movs	r2, #54	; 0x36
 800d0e4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0e8:	20cb      	movs	r0, #203	; 0xcb
 800d0ea:	f011 fc09 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'R');
 800d0ee:	2252      	movs	r2, #82	; 0x52
 800d0f0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0f4:	20db      	movs	r0, #219	; 0xdb
 800d0f6:	f011 fc03 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800d0fa:	2237      	movs	r2, #55	; 0x37
 800d0fc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d100:	20e1      	movs	r0, #225	; 0xe1
 800d102:	f011 fbfd 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'R');
 800d106:	2252      	movs	r2, #82	; 0x52
 800d108:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d10c:	20f1      	movs	r0, #241	; 0xf1
 800d10e:	f011 fbf7 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800d112:	2238      	movs	r2, #56	; 0x38
 800d114:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d118:	20f7      	movs	r0, #247	; 0xf7
 800d11a:	f011 fbf1 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'R');
 800d11e:	2252      	movs	r2, #82	; 0x52
 800d120:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d124:	f240 1007 	movw	r0, #263	; 0x107
 800d128:	f011 fbea 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800d12c:	2239      	movs	r2, #57	; 0x39
 800d12e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d132:	f240 100d 	movw	r0, #269	; 0x10d
 800d136:	f011 fbe3 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800d13a:	2231      	movs	r2, #49	; 0x31
 800d13c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d140:	f44f 7091 	mov.w	r0, #290	; 0x122
 800d144:	f011 fbdc 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'R');
 800d148:	2252      	movs	r2, #82	; 0x52
 800d14a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d14e:	f240 101d 	movw	r0, #285	; 0x11d
 800d152:	f011 fbd5 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800d156:	2230      	movs	r2, #48	; 0x30
 800d158:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d15c:	f44f 7093 	mov.w	r0, #294	; 0x126
 800d160:	f011 fbce 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800d164:	2231      	movs	r2, #49	; 0x31
 800d166:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d16a:	f44f 709c 	mov.w	r0, #312	; 0x138
 800d16e:	f011 fbc7 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'R');
 800d172:	2252      	movs	r2, #82	; 0x52
 800d174:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d178:	f240 1033 	movw	r0, #307	; 0x133
 800d17c:	f011 fbc0 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800d180:	2231      	movs	r2, #49	; 0x31
 800d182:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d186:	f240 103d 	movw	r0, #317	; 0x13d
 800d18a:	f011 fbb9 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800d18e:	2231      	movs	r2, #49	; 0x31
 800d190:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d194:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800d198:	f011 fbb2 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'R');
 800d19c:	2252      	movs	r2, #82	; 0x52
 800d19e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1a2:	f240 1049 	movw	r0, #329	; 0x149
 800d1a6:	f011 fbab 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800d1aa:	2232      	movs	r2, #50	; 0x32
 800d1ac:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1b0:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800d1b4:	f011 fba4 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800d1b8:	2231      	movs	r2, #49	; 0x31
 800d1ba:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1be:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800d1c2:	f011 fb9d 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'R');
 800d1c6:	2252      	movs	r2, #82	; 0x52
 800d1c8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1cc:	f240 105f 	movw	r0, #351	; 0x15f
 800d1d0:	f011 fb96 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800d1d4:	2233      	movs	r2, #51	; 0x33
 800d1d6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1da:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800d1de:	f011 fb8f 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800d1e2:	2231      	movs	r2, #49	; 0x31
 800d1e4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1e8:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800d1ec:	f011 fb88 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'R');
 800d1f0:	2252      	movs	r2, #82	; 0x52
 800d1f2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1f6:	f240 1075 	movw	r0, #373	; 0x175
 800d1fa:	f011 fb81 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800d1fe:	2234      	movs	r2, #52	; 0x34
 800d200:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d204:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800d208:	f011 fb7a 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800d20c:	2231      	movs	r2, #49	; 0x31
 800d20e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d212:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d216:	f011 fb73 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'R');
 800d21a:	2252      	movs	r2, #82	; 0x52
 800d21c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d220:	f240 108b 	movw	r0, #395	; 0x18b
 800d224:	f011 fb6c 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800d228:	2235      	movs	r2, #53	; 0x35
 800d22a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d22e:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d232:	f011 fb65 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800d236:	2230      	movs	r2, #48	; 0x30
 800d238:	21fa      	movs	r1, #250	; 0xfa
 800d23a:	2041      	movs	r0, #65	; 0x41
 800d23c:	f011 fb60 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800d240:	2232      	movs	r2, #50	; 0x32
 800d242:	21ca      	movs	r1, #202	; 0xca
 800d244:	203a      	movs	r0, #58	; 0x3a
 800d246:	f011 fb5b 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800d24a:	2235      	movs	r2, #53	; 0x35
 800d24c:	21ca      	movs	r1, #202	; 0xca
 800d24e:	2041      	movs	r0, #65	; 0x41
 800d250:	f011 fb56 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800d254:	2235      	movs	r2, #53	; 0x35
 800d256:	2195      	movs	r1, #149	; 0x95
 800d258:	203a      	movs	r0, #58	; 0x3a
 800d25a:	f011 fb51 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800d25e:	2230      	movs	r2, #48	; 0x30
 800d260:	2195      	movs	r1, #149	; 0x95
 800d262:	2041      	movs	r0, #65	; 0x41
 800d264:	f011 fb4c 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800d268:	2237      	movs	r2, #55	; 0x37
 800d26a:	2160      	movs	r1, #96	; 0x60
 800d26c:	203a      	movs	r0, #58	; 0x3a
 800d26e:	f011 fb47 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800d272:	2235      	movs	r2, #53	; 0x35
 800d274:	2160      	movs	r1, #96	; 0x60
 800d276:	2041      	movs	r0, #65	; 0x41
 800d278:	f011 fb42 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800d27c:	2231      	movs	r2, #49	; 0x31
 800d27e:	212b      	movs	r1, #43	; 0x2b
 800d280:	2039      	movs	r0, #57	; 0x39
 800d282:	f011 fb3d 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800d286:	2230      	movs	r2, #48	; 0x30
 800d288:	212b      	movs	r1, #43	; 0x2b
 800d28a:	203e      	movs	r0, #62	; 0x3e
 800d28c:	f011 fb38 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800d290:	2230      	movs	r2, #48	; 0x30
 800d292:	212b      	movs	r1, #43	; 0x2b
 800d294:	2043      	movs	r0, #67	; 0x43
 800d296:	f011 fb33 	bl	801e900 <TFT_DrawChar>
		TFT_direction = 0x00;
 800d29a:	2300      	movs	r3, #0
 800d29c:	702b      	strb	r3, [r5, #0]
 800d29e:	bd38      	pop	{r3, r4, r5, pc}
 800d2a0:	20005218 	.word	0x20005218
 800d2a4:	20000210 	.word	0x20000210

0800d2a8 <CRI_chart>:

void CRI_chart(uint8_t direction, int8_t *GraphData)
{
 800d2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2ac:	ed2d 8b02 	vpush	{d8}
 800d2b0:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800d2b2:	ae06      	add	r6, sp, #24
 800d2b4:	2300      	movs	r3, #0
{
 800d2b6:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800d2b8:	f826 3d04 	strh.w	r3, [r6, #-4]!
 800d2bc:	1e4d      	subs	r5, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	f040 82de 	bne.w	800d880 <CRI_chart+0x5d8>
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800d2c4:	f991 3000 	ldrsb.w	r3, [r1]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	f2c0 826f 	blt.w	800d7ac <CRI_chart+0x504>
 800d2ce:	2b64      	cmp	r3, #100	; 0x64
 800d2d0:	f300 826f 	bgt.w	800d7b2 <CRI_chart+0x50a>
 800d2d4:	ee07 3a90 	vmov	s15, r3
 800d2d8:	ed9f 7af7 	vldr	s14, [pc, #988]	; 800d6b8 <CRI_chart+0x410>
 800d2dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d2e4:	eddf 7af5 	vldr	s15, [pc, #980]	; 800d6bc <CRI_chart+0x414>
 800d2e8:	ed9f 7af5 	vldr	s14, [pc, #980]	; 800d6c0 <CRI_chart+0x418>
 800d2ec:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d2f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2f4:	edcd 7a03 	vstr	s15, [sp, #12]
 800d2f8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d2fc:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800d300:	9300      	str	r3, [sp, #0]
 800d302:	2222      	movs	r2, #34	; 0x22
 800d304:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d308:	2018      	movs	r0, #24
 800d30a:	f011 f806 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800d30e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d312:	2b00      	cmp	r3, #0
 800d314:	f2c0 8250 	blt.w	800d7b8 <CRI_chart+0x510>
 800d318:	2b64      	cmp	r3, #100	; 0x64
 800d31a:	f300 8250 	bgt.w	800d7be <CRI_chart+0x516>
 800d31e:	ee07 3a90 	vmov	s15, r3
 800d322:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 800d6b8 <CRI_chart+0x410>
 800d326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d32a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d32e:	eddf 7ae3 	vldr	s15, [pc, #908]	; 800d6bc <CRI_chart+0x414>
 800d332:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 800d6c0 <CRI_chart+0x418>
 800d336:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d33a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d33e:	edcd 7a03 	vstr	s15, [sp, #12]
 800d342:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d346:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800d34a:	9300      	str	r3, [sp, #0]
 800d34c:	2232      	movs	r2, #50	; 0x32
 800d34e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d352:	2028      	movs	r0, #40	; 0x28
 800d354:	f010 ffe1 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800d358:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	f2c0 8231 	blt.w	800d7c4 <CRI_chart+0x51c>
 800d362:	2b64      	cmp	r3, #100	; 0x64
 800d364:	f300 8231 	bgt.w	800d7ca <CRI_chart+0x522>
 800d368:	ee07 3a90 	vmov	s15, r3
 800d36c:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800d6b8 <CRI_chart+0x410>
 800d370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d374:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d378:	eddf 7ad0 	vldr	s15, [pc, #832]	; 800d6bc <CRI_chart+0x414>
 800d37c:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 800d6c0 <CRI_chart+0x418>
 800d380:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d384:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d388:	edcd 7a03 	vstr	s15, [sp, #12]
 800d38c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d390:	f64a 5388 	movw	r3, #44424	; 0xad88
 800d394:	9300      	str	r3, [sp, #0]
 800d396:	2242      	movs	r2, #66	; 0x42
 800d398:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d39c:	2038      	movs	r0, #56	; 0x38
 800d39e:	f010 ffbc 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800d3a2:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	f2c0 8212 	blt.w	800d7d0 <CRI_chart+0x528>
 800d3ac:	2b64      	cmp	r3, #100	; 0x64
 800d3ae:	f300 8212 	bgt.w	800d7d6 <CRI_chart+0x52e>
 800d3b2:	ee07 3a90 	vmov	s15, r3
 800d3b6:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800d6b8 <CRI_chart+0x410>
 800d3ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d3c2:	eddf 7abe 	vldr	s15, [pc, #760]	; 800d6bc <CRI_chart+0x414>
 800d3c6:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800d6c0 <CRI_chart+0x418>
 800d3ca:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d3ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3d2:	edcd 7a03 	vstr	s15, [sp, #12]
 800d3d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d3da:	f241 430f 	movw	r3, #5135	; 0x140f
 800d3de:	9300      	str	r3, [sp, #0]
 800d3e0:	2252      	movs	r2, #82	; 0x52
 800d3e2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d3e6:	2048      	movs	r0, #72	; 0x48
 800d3e8:	f010 ff97 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800d3ec:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f2c0 81f3 	blt.w	800d7dc <CRI_chart+0x534>
 800d3f6:	2b64      	cmp	r3, #100	; 0x64
 800d3f8:	f300 81f3 	bgt.w	800d7e2 <CRI_chart+0x53a>
 800d3fc:	ee07 3a90 	vmov	s15, r3
 800d400:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800d6b8 <CRI_chart+0x410>
 800d404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d408:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d40c:	eddf 7aab 	vldr	s15, [pc, #684]	; 800d6bc <CRI_chart+0x414>
 800d410:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800d6c0 <CRI_chart+0x418>
 800d414:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d41c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d420:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d424:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	2262      	movs	r2, #98	; 0x62
 800d42c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d430:	2058      	movs	r0, #88	; 0x58
 800d432:	f010 ff72 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800d436:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f2c0 81d4 	blt.w	800d7e8 <CRI_chart+0x540>
 800d440:	2b64      	cmp	r3, #100	; 0x64
 800d442:	f300 81d4 	bgt.w	800d7ee <CRI_chart+0x546>
 800d446:	ee07 3a90 	vmov	s15, r3
 800d44a:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800d6b8 <CRI_chart+0x410>
 800d44e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d452:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d456:	eddf 7a99 	vldr	s15, [pc, #612]	; 800d6bc <CRI_chart+0x414>
 800d45a:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800d6c0 <CRI_chart+0x418>
 800d45e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d466:	edcd 7a03 	vstr	s15, [sp, #12]
 800d46a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d46e:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	2272      	movs	r2, #114	; 0x72
 800d476:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d47a:	2068      	movs	r0, #104	; 0x68
 800d47c:	f010 ff4d 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800d480:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800d484:	2b00      	cmp	r3, #0
 800d486:	f2c0 81b5 	blt.w	800d7f4 <CRI_chart+0x54c>
 800d48a:	2b64      	cmp	r3, #100	; 0x64
 800d48c:	f300 81b5 	bgt.w	800d7fa <CRI_chart+0x552>
 800d490:	ee07 3a90 	vmov	s15, r3
 800d494:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800d6b8 <CRI_chart+0x410>
 800d498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d49c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d4a0:	eddf 7a86 	vldr	s15, [pc, #536]	; 800d6bc <CRI_chart+0x414>
 800d4a4:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800d6c0 <CRI_chart+0x418>
 800d4a8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d4ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4b0:	edcd 7a03 	vstr	s15, [sp, #12]
 800d4b4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d4b8:	f248 4357 	movw	r3, #33879	; 0x8457
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	2282      	movs	r2, #130	; 0x82
 800d4c0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d4c4:	2078      	movs	r0, #120	; 0x78
 800d4c6:	f010 ff28 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800d4ca:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	f2c0 8196 	blt.w	800d800 <CRI_chart+0x558>
 800d4d4:	2b64      	cmp	r3, #100	; 0x64
 800d4d6:	f300 8196 	bgt.w	800d806 <CRI_chart+0x55e>
 800d4da:	ee07 3a90 	vmov	s15, r3
 800d4de:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800d6b8 <CRI_chart+0x410>
 800d4e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d4ea:	eddf 7a74 	vldr	s15, [pc, #464]	; 800d6bc <CRI_chart+0x414>
 800d4ee:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800d6c0 <CRI_chart+0x418>
 800d4f2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d4f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4fa:	edcd 7a03 	vstr	s15, [sp, #12]
 800d4fe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d502:	f24a 4377 	movw	r3, #42103	; 0xa477
 800d506:	9300      	str	r3, [sp, #0]
 800d508:	2292      	movs	r2, #146	; 0x92
 800d50a:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d50e:	2088      	movs	r0, #136	; 0x88
 800d510:	f010 ff03 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800d514:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	f2c0 8177 	blt.w	800d80c <CRI_chart+0x564>
 800d51e:	2b64      	cmp	r3, #100	; 0x64
 800d520:	f300 8177 	bgt.w	800d812 <CRI_chart+0x56a>
 800d524:	ee07 3a90 	vmov	s15, r3
 800d528:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800d6b8 <CRI_chart+0x410>
 800d52c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d530:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d534:	eddf 7a61 	vldr	s15, [pc, #388]	; 800d6bc <CRI_chart+0x414>
 800d538:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800d6c0 <CRI_chart+0x418>
 800d53c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d544:	edcd 7a03 	vstr	s15, [sp, #12]
 800d548:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d54c:	f24e 1365 	movw	r3, #57701	; 0xe165
 800d550:	9300      	str	r3, [sp, #0]
 800d552:	22a2      	movs	r2, #162	; 0xa2
 800d554:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d558:	2098      	movs	r0, #152	; 0x98
 800d55a:	f010 fede 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800d55e:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800d562:	2b00      	cmp	r3, #0
 800d564:	f2c0 8158 	blt.w	800d818 <CRI_chart+0x570>
 800d568:	2b64      	cmp	r3, #100	; 0x64
 800d56a:	f300 8158 	bgt.w	800d81e <CRI_chart+0x576>
 800d56e:	ee07 3a90 	vmov	s15, r3
 800d572:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800d6b8 <CRI_chart+0x410>
 800d576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d57a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d57e:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800d6bc <CRI_chart+0x414>
 800d582:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800d6c0 <CRI_chart+0x418>
 800d586:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d58a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d58e:	edcd 7a03 	vstr	s15, [sp, #12]
 800d592:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d596:	f24e 7323 	movw	r3, #59171	; 0xe723
 800d59a:	9300      	str	r3, [sp, #0]
 800d59c:	22b2      	movs	r2, #178	; 0xb2
 800d59e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d5a2:	20a8      	movs	r0, #168	; 0xa8
 800d5a4:	f010 feb9 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800d5a8:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	f2c0 8139 	blt.w	800d824 <CRI_chart+0x57c>
 800d5b2:	2b64      	cmp	r3, #100	; 0x64
 800d5b4:	f300 8139 	bgt.w	800d82a <CRI_chart+0x582>
 800d5b8:	ee07 3a90 	vmov	s15, r3
 800d5bc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800d6b8 <CRI_chart+0x410>
 800d5c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d5c8:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800d6bc <CRI_chart+0x414>
 800d5cc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800d6c0 <CRI_chart+0x418>
 800d5d0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d5d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5d8:	edcd 7a03 	vstr	s15, [sp, #12]
 800d5dc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d5e0:	f241 4327 	movw	r3, #5159	; 0x1427
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	22c2      	movs	r2, #194	; 0xc2
 800d5e8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d5ec:	20b8      	movs	r0, #184	; 0xb8
 800d5ee:	f010 fe94 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800d5f2:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	f2c0 811a 	blt.w	800d830 <CRI_chart+0x588>
 800d5fc:	2b64      	cmp	r3, #100	; 0x64
 800d5fe:	f300 811a 	bgt.w	800d836 <CRI_chart+0x58e>
 800d602:	ee07 3a90 	vmov	s15, r3
 800d606:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800d6b8 <CRI_chart+0x410>
 800d60a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d60e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d612:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800d6bc <CRI_chart+0x414>
 800d616:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d6c0 <CRI_chart+0x418>
 800d61a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d61e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d622:	edcd 7a03 	vstr	s15, [sp, #12]
 800d626:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d62a:	f242 138d 	movw	r3, #8589	; 0x218d
 800d62e:	9300      	str	r3, [sp, #0]
 800d630:	22d2      	movs	r2, #210	; 0xd2
 800d632:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d636:	20c8      	movs	r0, #200	; 0xc8
 800d638:	f010 fe6f 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800d63c:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800d640:	2b00      	cmp	r3, #0
 800d642:	f2c0 80fb 	blt.w	800d83c <CRI_chart+0x594>
 800d646:	2b64      	cmp	r3, #100	; 0x64
 800d648:	f300 80fb 	bgt.w	800d842 <CRI_chart+0x59a>
 800d64c:	ee07 3a90 	vmov	s15, r3
 800d650:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800d6b8 <CRI_chart+0x410>
 800d654:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d658:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d65c:	eddf 7a17 	vldr	s15, [pc, #92]	; 800d6bc <CRI_chart+0x414>
 800d660:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d6c0 <CRI_chart+0x418>
 800d664:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d66c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d670:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d674:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800d678:	9300      	str	r3, [sp, #0]
 800d67a:	22e2      	movs	r2, #226	; 0xe2
 800d67c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d680:	20d8      	movs	r0, #216	; 0xd8
 800d682:	f010 fe4a 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800d686:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	f2c0 80dc 	blt.w	800d848 <CRI_chart+0x5a0>
 800d690:	2b64      	cmp	r3, #100	; 0x64
 800d692:	f300 80dc 	bgt.w	800d84e <CRI_chart+0x5a6>
 800d696:	ee07 3a90 	vmov	s15, r3
 800d69a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800d6b8 <CRI_chart+0x410>
 800d69e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d6a6:	eddf 7a05 	vldr	s15, [pc, #20]	; 800d6bc <CRI_chart+0x414>
 800d6aa:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800d6c0 <CRI_chart+0x418>
 800d6ae:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d6b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6b6:	e00b      	b.n	800d6d0 <CRI_chart+0x428>
 800d6b8:	42c80000 	.word	0x42c80000
 800d6bc:	43cd0000 	.word	0x43cd0000
 800d6c0:	43988000 	.word	0x43988000
 800d6c4:	42c80000 	.word	0x42c80000
 800d6c8:	43cd0000 	.word	0x43cd0000
 800d6cc:	43988000 	.word	0x43988000
 800d6d0:	edcd 7a03 	vstr	s15, [sp, #12]
 800d6d4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d6d8:	f641 3346 	movw	r3, #6982	; 0x1b46
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	22f2      	movs	r2, #242	; 0xf2
 800d6e0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d6e4:	20e8      	movs	r0, #232	; 0xe8
 800d6e6:	f010 fe18 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d6ea:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	f2c0 80b0 	blt.w	800d854 <CRI_chart+0x5ac>
 800d6f4:	2b64      	cmp	r3, #100	; 0x64
 800d6f6:	f300 80b0 	bgt.w	800d85a <CRI_chart+0x5b2>
 800d6fa:	ee07 3a90 	vmov	s15, r3
 800d6fe:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 800d6c4 <CRI_chart+0x41c>
 800d702:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d706:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d70a:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 800d6c8 <CRI_chart+0x420>
 800d70e:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 800d6cc <CRI_chart+0x424>
 800d712:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d71a:	edcd 7a03 	vstr	s15, [sp, #12]
 800d71e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800d722:	4f52      	ldr	r7, [pc, #328]	; (800d86c <CRI_chart+0x5c4>)
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d724:	ed9f 8a52 	vldr	s16, [pc, #328]	; 800d870 <CRI_chart+0x5c8>
 800d728:	eddf 8a52 	vldr	s17, [pc, #328]	; 800d874 <CRI_chart+0x5cc>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d72c:	f24f 6311 	movw	r3, #62993	; 0xf611
 800d730:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d734:	9300      	str	r3, [sp, #0]
 800d736:	20f8      	movs	r0, #248	; 0xf8
 800d738:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d73c:	f010 fded 	bl	801e31a <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800d740:	484d      	ldr	r0, [pc, #308]	; (800d878 <CRI_chart+0x5d0>)
 800d742:	f011 f813 	bl	801e76c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800d746:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d74a:	f011 f815 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d74e:	2063      	movs	r0, #99	; 0x63
 800d750:	f011 f818 	bl	801e784 <TFT_SetBackColor>
 800d754:	2418      	movs	r4, #24
			sprintf (buffer, "%d", GraphData[i]);
 800d756:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800d75a:	4639      	mov	r1, r7
 800d75c:	4630      	mov	r0, r6
 800d75e:	f014 fb1f 	bl	8021da0 <sprintf>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d762:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800d766:	2b00      	cmp	r3, #0
 800d768:	db7a      	blt.n	800d860 <CRI_chart+0x5b8>
 800d76a:	2b64      	cmp	r3, #100	; 0x64
 800d76c:	dc7b      	bgt.n	800d866 <CRI_chart+0x5be>
 800d76e:	ee07 3a90 	vmov	s15, r3
 800d772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d776:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800d77a:	eddf 7a40 	vldr	s15, [pc, #256]	; 800d87c <CRI_chart+0x5d4>
 800d77e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800d782:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d786:	edcd 7a03 	vstr	s15, [sp, #12]
 800d78a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d78e:	4620      	mov	r0, r4
 800d790:	3410      	adds	r4, #16
 800d792:	2303      	movs	r3, #3
 800d794:	4632      	mov	r2, r6
 800d796:	b2a4      	uxth	r4, r4
 800d798:	f011 f90a 	bl	801e9b0 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800d79c:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800d7a0:	d1d9      	bne.n	800d756 <CRI_chart+0x4ae>
					X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800d7a2:	b006      	add	sp, #24
 800d7a4:	ecbd 8b02 	vpop	{d8}
 800d7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800d7ac:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7b0:	e5a4      	b.n	800d2fc <CRI_chart+0x54>
 800d7b2:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7b6:	e5a1      	b.n	800d2fc <CRI_chart+0x54>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800d7b8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7bc:	e5c3      	b.n	800d346 <CRI_chart+0x9e>
 800d7be:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7c2:	e5c0      	b.n	800d346 <CRI_chart+0x9e>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800d7c4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7c8:	e5e2      	b.n	800d390 <CRI_chart+0xe8>
 800d7ca:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7ce:	e5df      	b.n	800d390 <CRI_chart+0xe8>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800d7d0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7d4:	e601      	b.n	800d3da <CRI_chart+0x132>
 800d7d6:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7da:	e5fe      	b.n	800d3da <CRI_chart+0x132>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800d7dc:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7e0:	e620      	b.n	800d424 <CRI_chart+0x17c>
 800d7e2:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7e6:	e61d      	b.n	800d424 <CRI_chart+0x17c>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800d7e8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7ec:	e63f      	b.n	800d46e <CRI_chart+0x1c6>
 800d7ee:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7f2:	e63c      	b.n	800d46e <CRI_chart+0x1c6>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800d7f4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7f8:	e65e      	b.n	800d4b8 <CRI_chart+0x210>
 800d7fa:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7fe:	e65b      	b.n	800d4b8 <CRI_chart+0x210>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800d800:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d804:	e67d      	b.n	800d502 <CRI_chart+0x25a>
 800d806:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d80a:	e67a      	b.n	800d502 <CRI_chart+0x25a>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800d80c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d810:	e69c      	b.n	800d54c <CRI_chart+0x2a4>
 800d812:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d816:	e699      	b.n	800d54c <CRI_chart+0x2a4>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800d818:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d81c:	e6bb      	b.n	800d596 <CRI_chart+0x2ee>
 800d81e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d822:	e6b8      	b.n	800d596 <CRI_chart+0x2ee>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800d824:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d828:	e6da      	b.n	800d5e0 <CRI_chart+0x338>
 800d82a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d82e:	e6d7      	b.n	800d5e0 <CRI_chart+0x338>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800d830:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d834:	e6f9      	b.n	800d62a <CRI_chart+0x382>
 800d836:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d83a:	e6f6      	b.n	800d62a <CRI_chart+0x382>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800d83c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d840:	e718      	b.n	800d674 <CRI_chart+0x3cc>
 800d842:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d846:	e715      	b.n	800d674 <CRI_chart+0x3cc>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800d848:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d84c:	e744      	b.n	800d6d8 <CRI_chart+0x430>
 800d84e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d852:	e741      	b.n	800d6d8 <CRI_chart+0x430>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d854:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d858:	e763      	b.n	800d722 <CRI_chart+0x47a>
 800d85a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d85e:	e760      	b.n	800d722 <CRI_chart+0x47a>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d860:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800d864:	e793      	b.n	800d78e <CRI_chart+0x4e6>
 800d866:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800d86a:	e790      	b.n	800d78e <CRI_chart+0x4e6>
 800d86c:	08026a11 	.word	0x08026a11
 800d870:	42c80000 	.word	0x42c80000
 800d874:	43988000 	.word	0x43988000
 800d878:	20000210 	.word	0x20000210
 800d87c:	43c80000 	.word	0x43c80000
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d880:	2801      	cmp	r0, #1
 800d882:	4fed      	ldr	r7, [pc, #948]	; (800dc38 <CRI_chart+0x990>)
		else {TFT_direction = 0x02;}
 800d884:	bf16      	itet	ne
 800d886:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d888:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800d88a:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800d88c:	f991 3000 	ldrsb.w	r3, [r1]
 800d890:	2b00      	cmp	r3, #0
 800d892:	f2c0 8260 	blt.w	800dd56 <CRI_chart+0xaae>
 800d896:	2b64      	cmp	r3, #100	; 0x64
 800d898:	f300 825f 	bgt.w	800dd5a <CRI_chart+0xab2>
 800d89c:	ee07 3a90 	vmov	s15, r3
 800d8a0:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 800dc3c <CRI_chart+0x994>
 800d8a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d8ac:	eddf 7ae4 	vldr	s15, [pc, #912]	; 800dc40 <CRI_chart+0x998>
 800d8b0:	ed9f 7ae4 	vldr	s14, [pc, #912]	; 800dc44 <CRI_chart+0x99c>
 800d8b4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d8b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8bc:	edcd 7a03 	vstr	s15, [sp, #12]
 800d8c0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d8c4:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800d8c8:	9300      	str	r3, [sp, #0]
 800d8ca:	2262      	movs	r2, #98	; 0x62
 800d8cc:	23fc      	movs	r3, #252	; 0xfc
 800d8ce:	2057      	movs	r0, #87	; 0x57
 800d8d0:	f010 fd23 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800d8d4:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f2c0 8240 	blt.w	800dd5e <CRI_chart+0xab6>
 800d8de:	2b64      	cmp	r3, #100	; 0x64
 800d8e0:	f300 823f 	bgt.w	800dd62 <CRI_chart+0xaba>
 800d8e4:	ee07 3a90 	vmov	s15, r3
 800d8e8:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 800dc3c <CRI_chart+0x994>
 800d8ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8f0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d8f4:	eddf 7ad2 	vldr	s15, [pc, #840]	; 800dc40 <CRI_chart+0x998>
 800d8f8:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800dc44 <CRI_chart+0x99c>
 800d8fc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d904:	edcd 7a03 	vstr	s15, [sp, #12]
 800d908:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d90c:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800d910:	9300      	str	r3, [sp, #0]
 800d912:	2278      	movs	r2, #120	; 0x78
 800d914:	23fc      	movs	r3, #252	; 0xfc
 800d916:	206d      	movs	r0, #109	; 0x6d
 800d918:	f010 fcff 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800d91c:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d920:	2b00      	cmp	r3, #0
 800d922:	f2c0 8220 	blt.w	800dd66 <CRI_chart+0xabe>
 800d926:	2b64      	cmp	r3, #100	; 0x64
 800d928:	f300 821f 	bgt.w	800dd6a <CRI_chart+0xac2>
 800d92c:	ee07 3a90 	vmov	s15, r3
 800d930:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800dc3c <CRI_chart+0x994>
 800d934:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d938:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d93c:	eddf 7ac0 	vldr	s15, [pc, #768]	; 800dc40 <CRI_chart+0x998>
 800d940:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800dc44 <CRI_chart+0x99c>
 800d944:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d94c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d950:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d954:	f64a 5388 	movw	r3, #44424	; 0xad88
 800d958:	9300      	str	r3, [sp, #0]
 800d95a:	228e      	movs	r2, #142	; 0x8e
 800d95c:	23fc      	movs	r3, #252	; 0xfc
 800d95e:	2083      	movs	r0, #131	; 0x83
 800d960:	f010 fcdb 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800d964:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800d968:	2b00      	cmp	r3, #0
 800d96a:	f2c0 8200 	blt.w	800dd6e <CRI_chart+0xac6>
 800d96e:	2b64      	cmp	r3, #100	; 0x64
 800d970:	f300 81ff 	bgt.w	800dd72 <CRI_chart+0xaca>
 800d974:	ee07 3a90 	vmov	s15, r3
 800d978:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800dc3c <CRI_chart+0x994>
 800d97c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d980:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d984:	eddf 7aae 	vldr	s15, [pc, #696]	; 800dc40 <CRI_chart+0x998>
 800d988:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800dc44 <CRI_chart+0x99c>
 800d98c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d994:	edcd 7a03 	vstr	s15, [sp, #12]
 800d998:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d99c:	f241 430f 	movw	r3, #5135	; 0x140f
 800d9a0:	9300      	str	r3, [sp, #0]
 800d9a2:	22a4      	movs	r2, #164	; 0xa4
 800d9a4:	23fc      	movs	r3, #252	; 0xfc
 800d9a6:	2099      	movs	r0, #153	; 0x99
 800d9a8:	f010 fcb7 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800d9ac:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	f2c0 81e0 	blt.w	800dd76 <CRI_chart+0xace>
 800d9b6:	2b64      	cmp	r3, #100	; 0x64
 800d9b8:	f300 81df 	bgt.w	800dd7a <CRI_chart+0xad2>
 800d9bc:	ee07 3a90 	vmov	s15, r3
 800d9c0:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800dc3c <CRI_chart+0x994>
 800d9c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d9cc:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800dc40 <CRI_chart+0x998>
 800d9d0:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800dc44 <CRI_chart+0x99c>
 800d9d4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d9d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9dc:	edcd 7a03 	vstr	s15, [sp, #12]
 800d9e0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d9e4:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800d9e8:	9300      	str	r3, [sp, #0]
 800d9ea:	22ba      	movs	r2, #186	; 0xba
 800d9ec:	23fc      	movs	r3, #252	; 0xfc
 800d9ee:	20af      	movs	r0, #175	; 0xaf
 800d9f0:	f010 fc93 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800d9f4:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	f2c0 81c0 	blt.w	800dd7e <CRI_chart+0xad6>
 800d9fe:	2b64      	cmp	r3, #100	; 0x64
 800da00:	f300 81bf 	bgt.w	800dd82 <CRI_chart+0xada>
 800da04:	ee07 3a90 	vmov	s15, r3
 800da08:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800dc3c <CRI_chart+0x994>
 800da0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da10:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da14:	eddf 7a8a 	vldr	s15, [pc, #552]	; 800dc40 <CRI_chart+0x998>
 800da18:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800dc44 <CRI_chart+0x99c>
 800da1c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da24:	edcd 7a03 	vstr	s15, [sp, #12]
 800da28:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da2c:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800da30:	9300      	str	r3, [sp, #0]
 800da32:	22d0      	movs	r2, #208	; 0xd0
 800da34:	23fc      	movs	r3, #252	; 0xfc
 800da36:	20c5      	movs	r0, #197	; 0xc5
 800da38:	f010 fc6f 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800da3c:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800da40:	2b00      	cmp	r3, #0
 800da42:	f2c0 81a0 	blt.w	800dd86 <CRI_chart+0xade>
 800da46:	2b64      	cmp	r3, #100	; 0x64
 800da48:	f300 819f 	bgt.w	800dd8a <CRI_chart+0xae2>
 800da4c:	ee07 3a90 	vmov	s15, r3
 800da50:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800dc3c <CRI_chart+0x994>
 800da54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da5c:	eddf 7a78 	vldr	s15, [pc, #480]	; 800dc40 <CRI_chart+0x998>
 800da60:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800dc44 <CRI_chart+0x99c>
 800da64:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da6c:	edcd 7a03 	vstr	s15, [sp, #12]
 800da70:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da74:	f248 4357 	movw	r3, #33879	; 0x8457
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	22e6      	movs	r2, #230	; 0xe6
 800da7c:	23fc      	movs	r3, #252	; 0xfc
 800da7e:	20db      	movs	r0, #219	; 0xdb
 800da80:	f010 fc4b 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800da84:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f2c0 8180 	blt.w	800dd8e <CRI_chart+0xae6>
 800da8e:	2b64      	cmp	r3, #100	; 0x64
 800da90:	f300 817f 	bgt.w	800dd92 <CRI_chart+0xaea>
 800da94:	ee07 3a90 	vmov	s15, r3
 800da98:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800dc3c <CRI_chart+0x994>
 800da9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800daa0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800daa4:	eddf 7a66 	vldr	s15, [pc, #408]	; 800dc40 <CRI_chart+0x998>
 800daa8:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800dc44 <CRI_chart+0x99c>
 800daac:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dab4:	edcd 7a03 	vstr	s15, [sp, #12]
 800dab8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dabc:	f24a 4377 	movw	r3, #42103	; 0xa477
 800dac0:	9300      	str	r3, [sp, #0]
 800dac2:	23fc      	movs	r3, #252	; 0xfc
 800dac4:	461a      	mov	r2, r3
 800dac6:	20f1      	movs	r0, #241	; 0xf1
 800dac8:	f010 fc27 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800dacc:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	f2c0 8160 	blt.w	800dd96 <CRI_chart+0xaee>
 800dad6:	2b64      	cmp	r3, #100	; 0x64
 800dad8:	f300 815f 	bgt.w	800dd9a <CRI_chart+0xaf2>
 800dadc:	ee07 3a90 	vmov	s15, r3
 800dae0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800dc3c <CRI_chart+0x994>
 800dae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dae8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800daec:	eddf 7a54 	vldr	s15, [pc, #336]	; 800dc40 <CRI_chart+0x998>
 800daf0:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800dc44 <CRI_chart+0x99c>
 800daf4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800daf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dafc:	edcd 7a03 	vstr	s15, [sp, #12]
 800db00:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db04:	f24e 1365 	movw	r3, #57701	; 0xe165
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	f44f 7289 	mov.w	r2, #274	; 0x112
 800db0e:	23fc      	movs	r3, #252	; 0xfc
 800db10:	f240 1007 	movw	r0, #263	; 0x107
 800db14:	f010 fc01 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800db18:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	f2c0 813e 	blt.w	800dd9e <CRI_chart+0xaf6>
 800db22:	2b64      	cmp	r3, #100	; 0x64
 800db24:	f300 813d 	bgt.w	800dda2 <CRI_chart+0xafa>
 800db28:	ee07 3a90 	vmov	s15, r3
 800db2c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800dc3c <CRI_chart+0x994>
 800db30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db38:	eddf 7a41 	vldr	s15, [pc, #260]	; 800dc40 <CRI_chart+0x998>
 800db3c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800dc44 <CRI_chart+0x99c>
 800db40:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800db44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db48:	edcd 7a03 	vstr	s15, [sp, #12]
 800db4c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db50:	f24e 7323 	movw	r3, #59171	; 0xe723
 800db54:	9300      	str	r3, [sp, #0]
 800db56:	f44f 7294 	mov.w	r2, #296	; 0x128
 800db5a:	23fc      	movs	r3, #252	; 0xfc
 800db5c:	f240 101d 	movw	r0, #285	; 0x11d
 800db60:	f010 fbdb 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800db64:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	f2c0 811c 	blt.w	800dda6 <CRI_chart+0xafe>
 800db6e:	2b64      	cmp	r3, #100	; 0x64
 800db70:	f300 811b 	bgt.w	800ddaa <CRI_chart+0xb02>
 800db74:	ee07 3a90 	vmov	s15, r3
 800db78:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800dc3c <CRI_chart+0x994>
 800db7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db80:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db84:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800dc40 <CRI_chart+0x998>
 800db88:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800dc44 <CRI_chart+0x99c>
 800db8c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800db90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db94:	edcd 7a03 	vstr	s15, [sp, #12]
 800db98:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db9c:	f241 4327 	movw	r3, #5159	; 0x1427
 800dba0:	9300      	str	r3, [sp, #0]
 800dba2:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800dba6:	23fc      	movs	r3, #252	; 0xfc
 800dba8:	f240 1033 	movw	r0, #307	; 0x133
 800dbac:	f010 fbb5 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800dbb0:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	f2c0 80fa 	blt.w	800ddae <CRI_chart+0xb06>
 800dbba:	2b64      	cmp	r3, #100	; 0x64
 800dbbc:	f300 80f9 	bgt.w	800ddb2 <CRI_chart+0xb0a>
 800dbc0:	ee07 3a90 	vmov	s15, r3
 800dbc4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800dc3c <CRI_chart+0x994>
 800dbc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbcc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dbd0:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800dc40 <CRI_chart+0x998>
 800dbd4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800dc44 <CRI_chart+0x99c>
 800dbd8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dbdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbe0:	edcd 7a03 	vstr	s15, [sp, #12]
 800dbe4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dbe8:	f242 138d 	movw	r3, #8589	; 0x218d
 800dbec:	9300      	str	r3, [sp, #0]
 800dbee:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800dbf2:	23fc      	movs	r3, #252	; 0xfc
 800dbf4:	f240 1049 	movw	r0, #329	; 0x149
 800dbf8:	f010 fb8f 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800dbfc:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f2c0 80d8 	blt.w	800ddb6 <CRI_chart+0xb0e>
 800dc06:	2b64      	cmp	r3, #100	; 0x64
 800dc08:	f300 80d7 	bgt.w	800ddba <CRI_chart+0xb12>
 800dc0c:	ee07 3a90 	vmov	s15, r3
 800dc10:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800dc3c <CRI_chart+0x994>
 800dc14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc18:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc1c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800dc40 <CRI_chart+0x998>
 800dc20:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800dc44 <CRI_chart+0x99c>
 800dc24:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dc28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc2c:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc30:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dc34:	e008      	b.n	800dc48 <CRI_chart+0x9a0>
 800dc36:	bf00      	nop
 800dc38:	20005218 	.word	0x20005218
 800dc3c:	42c80000 	.word	0x42c80000
 800dc40:	437e0000 	.word	0x437e0000
 800dc44:	43520000 	.word	0x43520000
 800dc48:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800dc4c:	9300      	str	r3, [sp, #0]
 800dc4e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800dc52:	23fc      	movs	r3, #252	; 0xfc
 800dc54:	f240 105f 	movw	r0, #351	; 0x15f
 800dc58:	f010 fb5f 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800dc5c:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	f2c0 80ac 	blt.w	800ddbe <CRI_chart+0xb16>
 800dc66:	2b64      	cmp	r3, #100	; 0x64
 800dc68:	f300 80ab 	bgt.w	800ddc2 <CRI_chart+0xb1a>
 800dc6c:	ee07 3a90 	vmov	s15, r3
 800dc70:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 800dc3c <CRI_chart+0x994>
 800dc74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc7c:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 800dc40 <CRI_chart+0x998>
 800dc80:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 800dc44 <CRI_chart+0x99c>
 800dc84:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dc88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc8c:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc90:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dc94:	f641 3346 	movw	r3, #6982	; 0x1b46
 800dc98:	9300      	str	r3, [sp, #0]
 800dc9a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800dc9e:	23fc      	movs	r3, #252	; 0xfc
 800dca0:	f240 1075 	movw	r0, #373	; 0x175
 800dca4:	f010 fb39 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800dca8:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f2c0 808a 	blt.w	800ddc6 <CRI_chart+0xb1e>
 800dcb2:	2b64      	cmp	r3, #100	; 0x64
 800dcb4:	f300 8089 	bgt.w	800ddca <CRI_chart+0xb22>
 800dcb8:	ee07 3a90 	vmov	s15, r3
 800dcbc:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 800dc3c <CRI_chart+0x994>
 800dcc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcc4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dcc8:	ed5f 7a23 	vldr	s15, [pc, #-140]	; 800dc40 <CRI_chart+0x998>
 800dccc:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 800dc44 <CRI_chart+0x99c>
 800dcd0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dcd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcd8:	edcd 7a03 	vstr	s15, [sp, #12]
 800dcdc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
					sprintf (buffer, "%d", GraphData[i]);
 800dce0:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800dde4 <CRI_chart+0xb3c>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800dce4:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 800ddd8 <CRI_chart+0xb30>
 800dce8:	eddf 8a3c 	vldr	s17, [pc, #240]	; 800dddc <CRI_chart+0xb34>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800dcec:	f24f 6311 	movw	r3, #62993	; 0xf611
 800dcf0:	9300      	str	r3, [sp, #0]
 800dcf2:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800dcf6:	23fc      	movs	r3, #252	; 0xfc
 800dcf8:	f240 108b 	movw	r0, #395	; 0x18b
 800dcfc:	f010 fb0d 	bl	801e31a <TFT_FillRectangle>
 800dd00:	2457      	movs	r4, #87	; 0x57
					sprintf (buffer, "%d", GraphData[i]);
 800dd02:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800dd06:	4641      	mov	r1, r8
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f014 f849 	bl	8021da0 <sprintf>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800dd0e:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	db5b      	blt.n	800ddce <CRI_chart+0xb26>
 800dd16:	2b64      	cmp	r3, #100	; 0x64
 800dd18:	dc5b      	bgt.n	800ddd2 <CRI_chart+0xb2a>
 800dd1a:	ee07 3a90 	vmov	s15, r3
 800dd1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd22:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800dd26:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800dde0 <CRI_chart+0xb38>
 800dd2a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800dd2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd32:	edcd 7a03 	vstr	s15, [sp, #12]
 800dd36:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dd3a:	2303      	movs	r3, #3
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	4632      	mov	r2, r6
 800dd40:	3416      	adds	r4, #22
 800dd42:	f010 fe35 	bl	801e9b0 <TFT_DisplayString>
 800dd46:	b2a4      	uxth	r4, r4
		for(uint8_t i = 0; i<=14; i++)
 800dd48:	f240 13a1 	movw	r3, #417	; 0x1a1
 800dd4c:	429c      	cmp	r4, r3
 800dd4e:	d1d8      	bne.n	800dd02 <CRI_chart+0xa5a>
		TFT_direction = 0x00;
 800dd50:	2300      	movs	r3, #0
 800dd52:	703b      	strb	r3, [r7, #0]
}
 800dd54:	e525      	b.n	800d7a2 <CRI_chart+0x4fa>
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800dd56:	21fe      	movs	r1, #254	; 0xfe
 800dd58:	e5b4      	b.n	800d8c4 <CRI_chart+0x61c>
 800dd5a:	219a      	movs	r1, #154	; 0x9a
 800dd5c:	e5b2      	b.n	800d8c4 <CRI_chart+0x61c>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800dd5e:	21fe      	movs	r1, #254	; 0xfe
 800dd60:	e5d4      	b.n	800d90c <CRI_chart+0x664>
 800dd62:	219a      	movs	r1, #154	; 0x9a
 800dd64:	e5d2      	b.n	800d90c <CRI_chart+0x664>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800dd66:	21fe      	movs	r1, #254	; 0xfe
 800dd68:	e5f4      	b.n	800d954 <CRI_chart+0x6ac>
 800dd6a:	219a      	movs	r1, #154	; 0x9a
 800dd6c:	e5f2      	b.n	800d954 <CRI_chart+0x6ac>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800dd6e:	21fe      	movs	r1, #254	; 0xfe
 800dd70:	e614      	b.n	800d99c <CRI_chart+0x6f4>
 800dd72:	219a      	movs	r1, #154	; 0x9a
 800dd74:	e612      	b.n	800d99c <CRI_chart+0x6f4>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800dd76:	21fe      	movs	r1, #254	; 0xfe
 800dd78:	e634      	b.n	800d9e4 <CRI_chart+0x73c>
 800dd7a:	219a      	movs	r1, #154	; 0x9a
 800dd7c:	e632      	b.n	800d9e4 <CRI_chart+0x73c>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800dd7e:	21fe      	movs	r1, #254	; 0xfe
 800dd80:	e654      	b.n	800da2c <CRI_chart+0x784>
 800dd82:	219a      	movs	r1, #154	; 0x9a
 800dd84:	e652      	b.n	800da2c <CRI_chart+0x784>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800dd86:	21fe      	movs	r1, #254	; 0xfe
 800dd88:	e674      	b.n	800da74 <CRI_chart+0x7cc>
 800dd8a:	219a      	movs	r1, #154	; 0x9a
 800dd8c:	e672      	b.n	800da74 <CRI_chart+0x7cc>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800dd8e:	21fe      	movs	r1, #254	; 0xfe
 800dd90:	e694      	b.n	800dabc <CRI_chart+0x814>
 800dd92:	219a      	movs	r1, #154	; 0x9a
 800dd94:	e692      	b.n	800dabc <CRI_chart+0x814>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800dd96:	21fe      	movs	r1, #254	; 0xfe
 800dd98:	e6b4      	b.n	800db04 <CRI_chart+0x85c>
 800dd9a:	219a      	movs	r1, #154	; 0x9a
 800dd9c:	e6b2      	b.n	800db04 <CRI_chart+0x85c>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800dd9e:	21fe      	movs	r1, #254	; 0xfe
 800dda0:	e6d6      	b.n	800db50 <CRI_chart+0x8a8>
 800dda2:	219a      	movs	r1, #154	; 0x9a
 800dda4:	e6d4      	b.n	800db50 <CRI_chart+0x8a8>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800dda6:	21fe      	movs	r1, #254	; 0xfe
 800dda8:	e6f8      	b.n	800db9c <CRI_chart+0x8f4>
 800ddaa:	219a      	movs	r1, #154	; 0x9a
 800ddac:	e6f6      	b.n	800db9c <CRI_chart+0x8f4>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800ddae:	21fe      	movs	r1, #254	; 0xfe
 800ddb0:	e71a      	b.n	800dbe8 <CRI_chart+0x940>
 800ddb2:	219a      	movs	r1, #154	; 0x9a
 800ddb4:	e718      	b.n	800dbe8 <CRI_chart+0x940>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800ddb6:	21fe      	movs	r1, #254	; 0xfe
 800ddb8:	e746      	b.n	800dc48 <CRI_chart+0x9a0>
 800ddba:	219a      	movs	r1, #154	; 0x9a
 800ddbc:	e744      	b.n	800dc48 <CRI_chart+0x9a0>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800ddbe:	21fe      	movs	r1, #254	; 0xfe
 800ddc0:	e768      	b.n	800dc94 <CRI_chart+0x9ec>
 800ddc2:	219a      	movs	r1, #154	; 0x9a
 800ddc4:	e766      	b.n	800dc94 <CRI_chart+0x9ec>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800ddc6:	21fe      	movs	r1, #254	; 0xfe
 800ddc8:	e78a      	b.n	800dce0 <CRI_chart+0xa38>
 800ddca:	219a      	movs	r1, #154	; 0x9a
 800ddcc:	e788      	b.n	800dce0 <CRI_chart+0xa38>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800ddce:	21f4      	movs	r1, #244	; 0xf4
 800ddd0:	e7b3      	b.n	800dd3a <CRI_chart+0xa92>
 800ddd2:	2190      	movs	r1, #144	; 0x90
 800ddd4:	e7b1      	b.n	800dd3a <CRI_chart+0xa92>
 800ddd6:	bf00      	nop
 800ddd8:	42c80000 	.word	0x42c80000
 800dddc:	43570000 	.word	0x43570000
 800dde0:	43740000 	.word	0x43740000
 800dde4:	08026a11 	.word	0x08026a11

0800dde8 <CRI_Draw>:

void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800dde8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ddec:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800ddee:	2363      	movs	r3, #99	; 0x63
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800ddf0:	4604      	mov	r4, r0
 800ddf2:	4688      	mov	r8, r1
 800ddf4:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800ddf6:	213a      	movs	r1, #58	; 0x3a
 800ddf8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	2005      	movs	r0, #5
 800de00:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800de04:	f99d 7020 	ldrsb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800de08:	f010 fa87 	bl	801e31a <TFT_FillRectangle>
	CRI_Axes(direction);
 800de0c:	4620      	mov	r0, r4
 800de0e:	f7fe fe75 	bl	800cafc <CRI_Axes>
	CRI_Axes_Text(direction);
 800de12:	4620      	mov	r0, r4
 800de14:	f7fe ffee 	bl	800cdf4 <CRI_Axes_Text>
	CRI_chart(direction, GraphData);
 800de18:	4641      	mov	r1, r8
 800de1a:	4620      	mov	r0, r4
 800de1c:	f7ff fa44 	bl	800d2a8 <CRI_chart>
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800de20:	463b      	mov	r3, r7
 800de22:	4632      	mov	r2, r6
 800de24:	4629      	mov	r1, r5
 800de26:	4620      	mov	r0, r4
 800de28:	b002      	add	sp, #8
 800de2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800de2e:	f7fe bf03 	b.w	800cc38 <CRI_Axes_Measure>
	...

0800de34 <Calculate_EL_Day>:
extern float colorimetry_xy1964[2], colorimetry_uv[2], colorimetry_uv1976[2], colorimetry_xy1931[2];
extern float calibratre_x_1931[1024], Spectral_day[1024], calibratre_z_1931[1024];
	
float Calculate_EL_Day(float R_data[], float Spectral_Day_const[])
{
	sum = 0;
 800de34:	4a0c      	ldr	r2, [pc, #48]	; (800de68 <Calculate_EL_Day+0x34>)
 800de36:	2300      	movs	r3, #0
 800de38:	6013      	str	r3, [r2, #0]
 800de3a:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800de3c:	ecb0 7a01 	vldmia	r0!, {s14}
 800de40:	ecf1 7a01 	vldmia	r1!, {s15}
 800de44:	ed92 0a00 	vldr	s0, [r2]
 800de48:	eea7 0a27 	vfma.f32	s0, s14, s15
	for ( iq = 0; iq < 1024; iq++)
 800de4c:	3301      	adds	r3, #1
 800de4e:	b29b      	uxth	r3, r3
 800de50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800de54:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800de58:	d1f0      	bne.n	800de3c <Calculate_EL_Day+0x8>
 800de5a:	4a04      	ldr	r2, [pc, #16]	; (800de6c <Calculate_EL_Day+0x38>)
	}
	return 683*sum;
}
 800de5c:	eddf 7a04 	vldr	s15, [pc, #16]	; 800de70 <Calculate_EL_Day+0x3c>
 800de60:	8013      	strh	r3, [r2, #0]
 800de62:	ee20 0a27 	vmul.f32	s0, s0, s15
 800de66:	4770      	bx	lr
 800de68:	2008c2fc 	.word	0x2008c2fc
 800de6c:	2008c2f4 	.word	0x2008c2f4
 800de70:	442ac000 	.word	0x442ac000

0800de74 <Calculate_EL_Day_Wt>:


float Calculate_EL_Day_Wt(float R_data[])
{
	sum = 0;
 800de74:	4a09      	ldr	r2, [pc, #36]	; (800de9c <Calculate_EL_Day_Wt+0x28>)
 800de76:	2300      	movs	r3, #0
 800de78:	6013      	str	r3, [r2, #0]
 800de7a:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]);
 800de7c:	ecf0 7a01 	vldmia	r0!, {s15}
 800de80:	ed92 0a00 	vldr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800de84:	3301      	adds	r3, #1
		sum = sum + (R_data[iq]);
 800de86:	ee30 0a27 	vadd.f32	s0, s0, s15
	for ( iq = 0; iq < 1024; iq++)
 800de8a:	b29b      	uxth	r3, r3
 800de8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]);
 800de90:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800de94:	d1f2      	bne.n	800de7c <Calculate_EL_Day_Wt+0x8>
 800de96:	4a02      	ldr	r2, [pc, #8]	; (800dea0 <Calculate_EL_Day_Wt+0x2c>)
 800de98:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800de9a:	4770      	bx	lr
 800de9c:	2008c2fc 	.word	0x2008c2fc
 800dea0:	2008c2f4 	.word	0x2008c2f4

0800dea4 <Calculate_EL_Night>:

float Calculate_EL_Night(float R_data[], float Spectral_Night_const[])
{
	sum = 0;
 800dea4:	4a0c      	ldr	r2, [pc, #48]	; (800ded8 <Calculate_EL_Night+0x34>)
 800dea6:	2300      	movs	r3, #0
 800dea8:	6013      	str	r3, [r2, #0]
 800deaa:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800deac:	ecb0 7a01 	vldmia	r0!, {s14}
 800deb0:	ecf1 7a01 	vldmia	r1!, {s15}
 800deb4:	ed92 0a00 	vldr	s0, [r2]
 800deb8:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800debc:	3301      	adds	r3, #1
 800debe:	b29b      	uxth	r3, r3
 800dec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800dec4:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800dec8:	d1f0      	bne.n	800deac <Calculate_EL_Night+0x8>
 800deca:	4a04      	ldr	r2, [pc, #16]	; (800dedc <Calculate_EL_Night+0x38>)
	}
	return 1700*sum;
}
 800decc:	eddf 7a04 	vldr	s15, [pc, #16]	; 800dee0 <Calculate_EL_Night+0x3c>
 800ded0:	8013      	strh	r3, [r2, #0]
 800ded2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ded6:	4770      	bx	lr
 800ded8:	2008c2fc 	.word	0x2008c2fc
 800dedc:	2008c2f4 	.word	0x2008c2f4
 800dee0:	44d48000 	.word	0x44d48000

0800dee4 <Calculate_SP>:

float Calculate_SP(float EL_day_data, float EL_Night_data)
{
	return (EL_day_data !=0) ? EL_Night_data/EL_day_data: 0;
 800dee4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800dee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deec:	bf14      	ite	ne
 800deee:	eec0 7a80 	vdivne.f32	s15, s1, s0
 800def2:	eddf 7a02 	vldreq	s15, [pc, #8]	; 800defc <Calculate_SP+0x18>
}
 800def6:	eeb0 0a67 	vmov.f32	s0, s15
 800defa:	4770      	bx	lr
 800defc:	00000000 	.word	0x00000000

0800df00 <Calculate_PPFD_PPL>:

float Calculate_PPFD_PPL(float R_data[], float Wavelenght[])
{
 800df00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sum = 0;
 800df04:	4d1a      	ldr	r5, [pc, #104]	; (800df70 <Calculate_PPFD_PPL+0x70>)
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800df06:	f20f 0960 	addw	r9, pc, #96	; 0x60
 800df0a:	e9d9 8900 	ldrd	r8, r9, [r9]
	sum = 0;
 800df0e:	2300      	movs	r3, #0
 800df10:	602b      	str	r3, [r5, #0]
 800df12:	4683      	mov	fp, r0
 800df14:	468a      	mov	sl, r1
 800df16:	2400      	movs	r4, #0
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800df18:	ecbb 7a01 	vldmia	fp!, {s14}
 800df1c:	ecfa 7a01 	vldmia	sl!, {s15}
 800df20:	ee67 7a27 	vmul.f32	s15, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800df24:	3401      	adds	r4, #1
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800df26:	ee17 0a90 	vmov	r0, s15
 800df2a:	f7f2 fb25 	bl	8000578 <__aeabi_f2d>
 800df2e:	4642      	mov	r2, r8
 800df30:	464b      	mov	r3, r9
 800df32:	f7f2 fb75 	bl	8000620 <__aeabi_dmul>
 800df36:	4606      	mov	r6, r0
 800df38:	6828      	ldr	r0, [r5, #0]
 800df3a:	460f      	mov	r7, r1
 800df3c:	f7f2 fb1c 	bl	8000578 <__aeabi_f2d>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4630      	mov	r0, r6
 800df46:	4639      	mov	r1, r7
 800df48:	f7f2 f9b8 	bl	80002bc <__adddf3>
 800df4c:	f7f2 fe60 	bl	8000c10 <__aeabi_d2f>
	for (iq = 0; iq < 1024; iq++)
 800df50:	b2a4      	uxth	r4, r4
 800df52:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800df56:	6028      	str	r0, [r5, #0]
	for (iq = 0; iq < 1024; iq++)
 800df58:	d1de      	bne.n	800df18 <Calculate_PPFD_PPL+0x18>
 800df5a:	4b06      	ldr	r3, [pc, #24]	; (800df74 <Calculate_PPFD_PPL+0x74>)
	}
	return sum;
}
 800df5c:	ee00 0a10 	vmov	s0, r0
 800df60:	801c      	strh	r4, [r3, #0]
 800df62:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df66:	bf00      	nop
 800df68:	73f2981b 	.word	0x73f2981b
 800df6c:	3f811eb6 	.word	0x3f811eb6
 800df70:	2008c2fc 	.word	0x2008c2fc
 800df74:	2008c2f4 	.word	0x2008c2f4

0800df78 <Calculate_PPFD_PPL_Range>:

float Calculate_PPFD_PPL_Range(float R_data[], float Wavelenght[], uint8_t Range)
{
 800df78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t Range_min, Range_max;
	sum = 0;
 800df7c:	4d34      	ldr	r5, [pc, #208]	; (800e050 <Calculate_PPFD_PPL_Range+0xd8>)
 800df7e:	2300      	movs	r3, #0
 800df80:	602b      	str	r3, [r5, #0]
	
	if (Range == BLUE_RANGE)
 800df82:	b1f2      	cbz	r2, 800dfc2 <Calculate_PPFD_PPL_Range+0x4a>
	{
		Range_min = 400;
		Range_max = 500;
	} else if (Range == GREEN_RANGE)
 800df84:	2a01      	cmp	r2, #1
 800df86:	d021      	beq.n	800dfcc <Calculate_PPFD_PPL_Range+0x54>
	{
		Range_min = 500;
		Range_max = 600;
	} else if (Range == RED_RANGE)
 800df88:	2a02      	cmp	r2, #2
 800df8a:	d024      	beq.n	800dfd6 <Calculate_PPFD_PPL_Range+0x5e>
		Range_min = 600;
		Range_max = 700;
	}else if (Range == FAR_RED_RANGE)
	{
		Range_min = 700;
		Range_max = 1000;
 800df8c:	2a03      	cmp	r2, #3
 800df8e:	bf0b      	itete	eq
 800df90:	f44f 7a7a 	moveq.w	sl, #1000	; 0x3e8
 800df94:	f04f 0a00 	movne.w	sl, #0
 800df98:	f44f 772f 	moveq.w	r7, #700	; 0x2bc
 800df9c:	2700      	movne	r7, #0
	}
	
	for(iq = 0; iq < 1024; iq++)
 800df9e:	4a2d      	ldr	r2, [pc, #180]	; (800e054 <Calculate_PPFD_PPL_Range+0xdc>)
 800dfa0:	9201      	str	r2, [sp, #4]
 800dfa2:	2400      	movs	r4, #0
 800dfa4:	8014      	strh	r4, [r2, #0]
 800dfa6:	4606      	mov	r6, r0
 800dfa8:	468b      	mov	fp, r1
 800dfaa:	4623      	mov	r3, r4
 800dfac:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800dfb0:	d116      	bne.n	800dfe0 <Calculate_PPFD_PPL_Range+0x68>
 800dfb2:	b10b      	cbz	r3, 800dfb8 <Calculate_PPFD_PPL_Range+0x40>
 800dfb4:	9b01      	ldr	r3, [sp, #4]
 800dfb6:	801c      	strh	r4, [r3, #0]
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
			}
		}
	}
	return sum;
}
 800dfb8:	ed95 0a00 	vldr	s0, [r5]
 800dfbc:	b003      	add	sp, #12
 800dfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Range_max = 500;
 800dfc2:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
		Range_min = 400;
 800dfc6:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800dfca:	e7e8      	b.n	800df9e <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 600;
 800dfcc:	f44f 7a16 	mov.w	sl, #600	; 0x258
		Range_min = 500;
 800dfd0:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800dfd4:	e7e3      	b.n	800df9e <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 700;
 800dfd6:	f44f 7a2f 	mov.w	sl, #700	; 0x2bc
		Range_min = 600;
 800dfda:	f44f 7716 	mov.w	r7, #600	; 0x258
 800dfde:	e7de      	b.n	800df9e <Calculate_PPFD_PPL_Range+0x26>
		if(Wavelenght[iq] > Range_min && Wavelenght[iq] < Range_max)
 800dfe0:	ee07 7a10 	vmov	s14, r7
 800dfe4:	ecfb 7a01 	vldmia	fp!, {s15}
 800dfe8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dfec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dff4:	dd23      	ble.n	800e03e <Calculate_PPFD_PPL_Range+0xc6>
 800dff6:	ee07 aa10 	vmov	s14, sl
 800dffa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e006:	d51a      	bpl.n	800e03e <Calculate_PPFD_PPL_Range+0xc6>
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e008:	ed96 7a00 	vldr	s14, [r6]
 800e00c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e010:	ee17 0a90 	vmov	r0, s15
 800e014:	f7f2 fab0 	bl	8000578 <__aeabi_f2d>
 800e018:	a30b      	add	r3, pc, #44	; (adr r3, 800e048 <Calculate_PPFD_PPL_Range+0xd0>)
 800e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01e:	f7f2 faff 	bl	8000620 <__aeabi_dmul>
 800e022:	4680      	mov	r8, r0
 800e024:	6828      	ldr	r0, [r5, #0]
 800e026:	4689      	mov	r9, r1
 800e028:	f7f2 faa6 	bl	8000578 <__aeabi_f2d>
 800e02c:	4602      	mov	r2, r0
 800e02e:	460b      	mov	r3, r1
 800e030:	4640      	mov	r0, r8
 800e032:	4649      	mov	r1, r9
 800e034:	f7f2 f942 	bl	80002bc <__adddf3>
 800e038:	f7f2 fdea 	bl	8000c10 <__aeabi_d2f>
 800e03c:	6028      	str	r0, [r5, #0]
 800e03e:	3401      	adds	r4, #1
 800e040:	b2a4      	uxth	r4, r4
 800e042:	3604      	adds	r6, #4
 800e044:	2301      	movs	r3, #1
 800e046:	e7b1      	b.n	800dfac <Calculate_PPFD_PPL_Range+0x34>
 800e048:	73f2981b 	.word	0x73f2981b
 800e04c:	3f811eb6 	.word	0x3f811eb6
 800e050:	2008c2fc 	.word	0x2008c2fc
 800e054:	2008c2f4 	.word	0x2008c2f4

0800e058 <Calculate_ELb>:
	return sum;
}

float Calculate_ELb(float R_data[], float Hazard_Blue[])
{
		sum = 0;
 800e058:	4a0a      	ldr	r2, [pc, #40]	; (800e084 <Calculate_ELb+0x2c>)
 800e05a:	2300      	movs	r3, #0
 800e05c:	6013      	str	r3, [r2, #0]
 800e05e:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e060:	ecb0 7a01 	vldmia	r0!, {s14}
 800e064:	ecf1 7a01 	vldmia	r1!, {s15}
 800e068:	ed92 0a00 	vldr	s0, [r2]
 800e06c:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800e070:	3301      	adds	r3, #1
 800e072:	b29b      	uxth	r3, r3
 800e074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e078:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800e07c:	d1f0      	bne.n	800e060 <Calculate_ELb+0x8>
 800e07e:	4a02      	ldr	r2, [pc, #8]	; (800e088 <Calculate_ELb+0x30>)
 800e080:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800e082:	4770      	bx	lr
 800e084:	2008c2fc 	.word	0x2008c2fc
 800e088:	2008c2f4 	.word	0x2008c2f4

0800e08c <Calculate_ELr>:
 800e08c:	f7ff bfe4 	b.w	800e058 <Calculate_ELb>

0800e090 <Calculate_XYZ1964>:




void Calculate_XYZ1964(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e090:	b5d0      	push	{r4, r6, r7, lr}
 800e092:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e096:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e11c <Calculate_XYZ1964+0x8c>
{
 800e09a:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e09c:	eef0 7a48 	vmov.f32	s15, s16
 800e0a0:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1964[0] = 0;
	colorimetry_XYZ1964[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e0a4:	ecb0 7a01 	vldmia	r0!, {s14}
 800e0a8:	ecf1 6a01 	vldmia	r1!, {s13}
 800e0ac:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e0b0:	3401      	adds	r4, #1
 800e0b2:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e0b4:	ecf2 6a01 	vldmia	r2!, {s13}
 800e0b8:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e0bc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e0c0:	ecf3 6a01 	vldmia	r3!, {s13}
 800e0c4:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e0c8:	d1ec      	bne.n	800e0a4 <Calculate_XYZ1964+0x14>
	}
	
	k = 100/Y_sum;
 800e0ca:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e120 <Calculate_XYZ1964+0x90>
 800e0ce:	4b15      	ldr	r3, [pc, #84]	; (800e124 <Calculate_XYZ1964+0x94>)
 800e0d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e0d4:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1964[0] = k*X_sum;
 800e0d6:	4c14      	ldr	r4, [pc, #80]	; (800e128 <Calculate_XYZ1964+0x98>)
	k = 100/Y_sum;
 800e0d8:	ee16 0a90 	vmov	r0, s13
 800e0dc:	f7f2 fa4c 	bl	8000578 <__aeabi_f2d>
 800e0e0:	4606      	mov	r6, r0
 800e0e2:	460f      	mov	r7, r1
	colorimetry_XYZ1964[0] = k*X_sum;
 800e0e4:	ee18 0a90 	vmov	r0, s17
 800e0e8:	f7f2 fa46 	bl	8000578 <__aeabi_f2d>
 800e0ec:	4632      	mov	r2, r6
 800e0ee:	463b      	mov	r3, r7
 800e0f0:	f7f2 fa96 	bl	8000620 <__aeabi_dmul>
 800e0f4:	f7f2 fd6c 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1964[1] = 100;
 800e0f8:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1964[0] = k*X_sum;
 800e0fa:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1964[1] = 100;
 800e0fc:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e0fe:	ee18 0a10 	vmov	r0, s16
 800e102:	f7f2 fa39 	bl	8000578 <__aeabi_f2d>
 800e106:	4632      	mov	r2, r6
 800e108:	463b      	mov	r3, r7
 800e10a:	f7f2 fa89 	bl	8000620 <__aeabi_dmul>
 800e10e:	f7f2 fd5f 	bl	8000bd0 <__aeabi_d2uiz>
}
 800e112:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e116:	80a0      	strh	r0, [r4, #4]
}
 800e118:	bdd0      	pop	{r4, r6, r7, pc}
 800e11a:	bf00      	nop
 800e11c:	00000000 	.word	0x00000000
 800e120:	42c80000 	.word	0x42c80000
 800e124:	2008c2f4 	.word	0x2008c2f4
 800e128:	2008adcc 	.word	0x2008adcc

0800e12c <Calculate_XYZ1931>:
void Calculate_XYZ1931(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e12c:	b5d0      	push	{r4, r6, r7, lr}
 800e12e:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e132:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e1b8 <Calculate_XYZ1931+0x8c>
{
 800e136:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e138:	eef0 7a48 	vmov.f32	s15, s16
 800e13c:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1931[0] = 0;
	colorimetry_XYZ1931[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e140:	ecb0 7a01 	vldmia	r0!, {s14}
 800e144:	ecf1 6a01 	vldmia	r1!, {s13}
 800e148:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e14c:	3401      	adds	r4, #1
 800e14e:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e150:	ecf2 6a01 	vldmia	r2!, {s13}
 800e154:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e158:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e15c:	ecf3 6a01 	vldmia	r3!, {s13}
 800e160:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e164:	d1ec      	bne.n	800e140 <Calculate_XYZ1931+0x14>
	}
	
	k = 100/Y_sum;
 800e166:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e1bc <Calculate_XYZ1931+0x90>
 800e16a:	4b15      	ldr	r3, [pc, #84]	; (800e1c0 <Calculate_XYZ1931+0x94>)
 800e16c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e170:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1931[0] = k*X_sum;
 800e172:	4c14      	ldr	r4, [pc, #80]	; (800e1c4 <Calculate_XYZ1931+0x98>)
	k = 100/Y_sum;
 800e174:	ee16 0a90 	vmov	r0, s13
 800e178:	f7f2 f9fe 	bl	8000578 <__aeabi_f2d>
 800e17c:	4606      	mov	r6, r0
 800e17e:	460f      	mov	r7, r1
	colorimetry_XYZ1931[0] = k*X_sum;
 800e180:	ee18 0a90 	vmov	r0, s17
 800e184:	f7f2 f9f8 	bl	8000578 <__aeabi_f2d>
 800e188:	4632      	mov	r2, r6
 800e18a:	463b      	mov	r3, r7
 800e18c:	f7f2 fa48 	bl	8000620 <__aeabi_dmul>
 800e190:	f7f2 fd1e 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1931[1] = 100;
 800e194:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1931[0] = k*X_sum;
 800e196:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1931[1] = 100;
 800e198:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e19a:	ee18 0a10 	vmov	r0, s16
 800e19e:	f7f2 f9eb 	bl	8000578 <__aeabi_f2d>
 800e1a2:	4632      	mov	r2, r6
 800e1a4:	463b      	mov	r3, r7
 800e1a6:	f7f2 fa3b 	bl	8000620 <__aeabi_dmul>
 800e1aa:	f7f2 fd11 	bl	8000bd0 <__aeabi_d2uiz>
}
 800e1ae:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e1b2:	80a0      	strh	r0, [r4, #4]
}
 800e1b4:	bdd0      	pop	{r4, r6, r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	00000000 	.word	0x00000000
 800e1bc:	42c80000 	.word	0x42c80000
 800e1c0:	2008c2f4 	.word	0x2008c2f4
 800e1c4:	2008adc6 	.word	0x2008adc6

0800e1c8 <Calculate_xy1964>:
void Calculate_xy1964(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e1c8:	8801      	ldrh	r1, [r0, #0]
 800e1ca:	8842      	ldrh	r2, [r0, #2]
 800e1cc:	8880      	ldrh	r0, [r0, #4]
 800e1ce:	188b      	adds	r3, r1, r2
 800e1d0:	4403      	add	r3, r0
	
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	ee07 3a90 	vmov	s15, r3
 800e1d8:	ee07 1a10 	vmov	s14, r1
 800e1dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1e0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e1e4:	4b06      	ldr	r3, [pc, #24]	; (800e200 <Calculate_xy1964+0x38>)
 800e1e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e1ea:	ee07 2a10 	vmov	s14, r2
 800e1ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e1f2:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e1f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e1fa:	edc3 6a01 	vstr	s13, [r3, #4]
 800e1fe:	4770      	bx	lr
 800e200:	2008adec 	.word	0x2008adec

0800e204 <Calculate_xy1931>:
}

void Calculate_xy1931(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e204:	8801      	ldrh	r1, [r0, #0]
 800e206:	8842      	ldrh	r2, [r0, #2]
 800e208:	8880      	ldrh	r0, [r0, #4]
 800e20a:	188b      	adds	r3, r1, r2
 800e20c:	4403      	add	r3, r0
	
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e20e:	b29b      	uxth	r3, r3
 800e210:	ee07 3a90 	vmov	s15, r3
 800e214:	ee07 1a10 	vmov	s14, r1
 800e218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e21c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e220:	4b06      	ldr	r3, [pc, #24]	; (800e23c <Calculate_xy1931+0x38>)
 800e222:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e226:	ee07 2a10 	vmov	s14, r2
 800e22a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e22e:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e232:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e236:	edc3 6a01 	vstr	s13, [r3, #4]
 800e23a:	4770      	bx	lr
 800e23c:	2008ade4 	.word	0x2008ade4

0800e240 <Calculate_uv>:
}

void Calculate_uv(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e240:	ed90 7a01 	vldr	s14, [r0, #4]
 800e244:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e248:	4b0e      	ldr	r3, [pc, #56]	; (800e284 <Calculate_uv+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e24a:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e24e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e252:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e256:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e25a:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e25e:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e262:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e266:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e26a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e26e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e272:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e276:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e27a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e27e:	edc3 6a01 	vstr	s13, [r3, #4]
 800e282:	4770      	bx	lr
 800e284:	2008add4 	.word	0x2008add4

0800e288 <Calculate_uv1976>:
}

void Calculate_uv1976(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e288:	ed90 7a01 	vldr	s14, [r0, #4]
 800e28c:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e290:	4b0e      	ldr	r3, [pc, #56]	; (800e2cc <Calculate_uv1976+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e292:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e296:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e29a:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e29e:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e2a2:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e2a6:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e2aa:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e2ae:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e2b2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e2b6:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800e2ba:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e2be:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e2c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e2c6:	edc3 6a01 	vstr	s13, [r3, #4]
 800e2ca:	4770      	bx	lr
 800e2cc:	2008addc 	.word	0x2008addc

0800e2d0 <Calculate_Tc>:
}

double up = 0, vp = 0, factor_uvp = 0, result_tc, u_dop = 0, v_dop = 0, deltaC = 0;
float Calculate_Tc(float R_data[], uint8_t CIE_Type)
{
 800e2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d4:	ed2d 8b02 	vpush	{d8}
 800e2d8:	b08b      	sub	sp, #44	; 0x2c
	
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
	uint8_t	 i_min1 = 0, i_min2 = 0;
	
	if(CIE_Type == 0x00) //check CIE 1964
 800e2da:	b921      	cbnz	r1, 800e2e6 <Calculate_Tc+0x16>
	{
		Calculate_XYZ1931(R_data, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 800e2dc:	4bb4      	ldr	r3, [pc, #720]	; (800e5b0 <Calculate_Tc+0x2e0>)
 800e2de:	4ab5      	ldr	r2, [pc, #724]	; (800e5b4 <Calculate_Tc+0x2e4>)
 800e2e0:	49b5      	ldr	r1, [pc, #724]	; (800e5b8 <Calculate_Tc+0x2e8>)
 800e2e2:	f7ff ff23 	bl	800e12c <Calculate_XYZ1931>
	}
	
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e2e6:	4bb5      	ldr	r3, [pc, #724]	; (800e5bc <Calculate_Tc+0x2ec>)
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800e2e8:	eddf 8ab5 	vldr	s17, [pc, #724]	; 800e5c0 <Calculate_Tc+0x2f0>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e2ec:	885e      	ldrh	r6, [r3, #2]
 800e2ee:	881f      	ldrh	r7, [r3, #0]
 800e2f0:	889b      	ldrh	r3, [r3, #4]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
	
	
	for(uint8_t i = 0; i < 31; i++)
	{
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800e2f2:	f8df a30c 	ldr.w	sl, [pc, #780]	; 800e600 <Calculate_Tc+0x330>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e2f6:	ebc6 1006 	rsb	r0, r6, r6, lsl #4
 800e2fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e2fe:	4438      	add	r0, r7
 800e300:	4418      	add	r0, r3
 800e302:	f7f2 f927 	bl	8000554 <__aeabi_i2d>
 800e306:	4baf      	ldr	r3, [pc, #700]	; (800e5c4 <Calculate_Tc+0x2f4>)
 800e308:	4604      	mov	r4, r0
 800e30a:	460d      	mov	r5, r1
 800e30c:	e9c3 4500 	strd	r4, r5, [r3]
	up = (4.*colorimetry_XYZ1931[0])/factor_uvp;
 800e310:	4638      	mov	r0, r7
 800e312:	f7f2 f91f 	bl	8000554 <__aeabi_i2d>
 800e316:	2200      	movs	r2, #0
 800e318:	4bab      	ldr	r3, [pc, #684]	; (800e5c8 <Calculate_Tc+0x2f8>)
 800e31a:	4fac      	ldr	r7, [pc, #688]	; (800e5cc <Calculate_Tc+0x2fc>)
 800e31c:	f7f2 f980 	bl	8000620 <__aeabi_dmul>
 800e320:	4622      	mov	r2, r4
 800e322:	462b      	mov	r3, r5
 800e324:	f7f2 faa6 	bl	8000874 <__aeabi_ddiv>
 800e328:	4ba9      	ldr	r3, [pc, #676]	; (800e5d0 <Calculate_Tc+0x300>)
 800e32a:	e9cd 0100 	strd	r0, r1, [sp]
 800e32e:	e9c3 0100 	strd	r0, r1, [r3]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
 800e332:	4630      	mov	r0, r6
 800e334:	f7f2 f90e 	bl	8000554 <__aeabi_i2d>
 800e338:	2200      	movs	r2, #0
 800e33a:	4ba6      	ldr	r3, [pc, #664]	; (800e5d4 <Calculate_Tc+0x304>)
 800e33c:	f7f2 f970 	bl	8000620 <__aeabi_dmul>
 800e340:	462b      	mov	r3, r5
 800e342:	4622      	mov	r2, r4
 800e344:	f7f2 fa96 	bl	8000874 <__aeabi_ddiv>
 800e348:	4ba3      	ldr	r3, [pc, #652]	; (800e5d8 <Calculate_Tc+0x308>)
 800e34a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e34e:	2600      	movs	r6, #0
 800e350:	e9c3 0100 	strd	r0, r1, [r3]
 800e354:	4ba1      	ldr	r3, [pc, #644]	; (800e5dc <Calculate_Tc+0x30c>)
 800e356:	9304      	str	r3, [sp, #16]
	uint8_t	 i_min1 = 0, i_min2 = 0;
 800e358:	4635      	mov	r5, r6
 800e35a:	4634      	mov	r4, r6
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800e35c:	eeb0 8a68 	vmov.f32	s16, s17
 800e360:	46d3      	mov	fp, sl
 800e362:	b2f3      	uxtb	r3, r6
 800e364:	9307      	str	r3, [sp, #28]
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800e366:	9b04      	ldr	r3, [sp, #16]
 800e368:	ecf3 7a01 	vldmia	r3!, {s15}
 800e36c:	9304      	str	r3, [sp, #16]
 800e36e:	4b9c      	ldr	r3, [pc, #624]	; (800e5e0 <Calculate_Tc+0x310>)
 800e370:	edcd 7a05 	vstr	s15, [sp, #20]
 800e374:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800e378:	ecf7 7a01 	vldmia	r7!, {s15}
 800e37c:	edcd 7a06 	vstr	s15, [sp, #24]
 800e380:	ee07 0a90 	vmov	s15, r0
 800e384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e388:	ee17 0a90 	vmov	r0, s15
 800e38c:	f7f2 f8f4 	bl	8000578 <__aeabi_f2d>
 800e390:	a381      	add	r3, pc, #516	; (adr r3, 800e598 <Calculate_Tc+0x2c8>)
 800e392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e396:	f7f2 fa6d 	bl	8000874 <__aeabi_ddiv>
 800e39a:	4602      	mov	r2, r0
 800e39c:	460b      	mov	r3, r1
 800e39e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3a2:	f7f1 ff89 	bl	80002b8 <__aeabi_dsub>
 800e3a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e3aa:	f83a 0016 	ldrh.w	r0, [sl, r6, lsl #1]
 800e3ae:	ee07 0a90 	vmov	s15, r0
 800e3b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3b6:	3601      	adds	r6, #1
 800e3b8:	ee17 0a90 	vmov	r0, s15
 800e3bc:	f7f2 f8dc 	bl	8000578 <__aeabi_f2d>
 800e3c0:	a375      	add	r3, pc, #468	; (adr r3, 800e598 <Calculate_Tc+0x2c8>)
 800e3c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c6:	f7f2 fa55 	bl	8000874 <__aeabi_ddiv>
 800e3ca:	4602      	mov	r2, r0
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3d2:	f7f1 ff71 	bl	80002b8 <__aeabi_dsub>
 800e3d6:	4680      	mov	r8, r0
 800e3d8:	9805      	ldr	r0, [sp, #20]
 800e3da:	4689      	mov	r9, r1
 800e3dc:	f7f2 f8cc 	bl	8000578 <__aeabi_f2d>
 800e3e0:	4602      	mov	r2, r0
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	4640      	mov	r0, r8
 800e3e6:	4649      	mov	r1, r9
 800e3e8:	f7f2 f91a 	bl	8000620 <__aeabi_dmul>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e3f4:	f7f1 ff60 	bl	80002b8 <__aeabi_dsub>
 800e3f8:	4680      	mov	r8, r0
 800e3fa:	9806      	ldr	r0, [sp, #24]
 800e3fc:	4689      	mov	r9, r1
 800e3fe:	f7f2 f8bb 	bl	8000578 <__aeabi_f2d>
 800e402:	4602      	mov	r2, r0
 800e404:	460b      	mov	r3, r1
 800e406:	4640      	mov	r0, r8
 800e408:	4649      	mov	r1, r9
 800e40a:	f7f2 fa33 	bl	8000874 <__aeabi_ddiv>
 800e40e:	f7f2 fbff 	bl	8000c10 <__aeabi_d2f>
 800e412:	ee07 0a10 	vmov	s14, r0
		if (fabs(dmin1) > fabs(dline)) {
 800e416:	eef0 7ac8 	vabs.f32	s15, s16
 800e41a:	eef0 6ac7 	vabs.f32	s13, s14
 800e41e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e426:	bfc1      	itttt	gt
 800e428:	4625      	movgt	r5, r4
 800e42a:	eef0 8a48 	vmovgt.f32	s17, s16
 800e42e:	9c07      	ldrgt	r4, [sp, #28]
				dmin2 = dmin1; 
				dmin1 = dline;
 800e430:	eeb0 8a47 	vmovgt.f32	s16, s14
	for(uint8_t i = 0; i < 31; i++)
 800e434:	2e1f      	cmp	r6, #31
 800e436:	d194      	bne.n	800e362 <Calculate_Tc+0x92>
				i_min2 = i_min1;
				i_min1 = i;
			}
	}
	
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800e438:	f83b 0014 	ldrh.w	r0, [fp, r4, lsl #1]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800e43c:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 800e5e0 <Calculate_Tc+0x310>
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800e440:	f7f2 f888 	bl	8000554 <__aeabi_i2d>
 800e444:	a354      	add	r3, pc, #336	; (adr r3, 800e598 <Calculate_Tc+0x2c8>)
 800e446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e44a:	f7f2 fa13 	bl	8000874 <__aeabi_ddiv>
 800e44e:	4606      	mov	r6, r0
 800e450:	f83b 0015 	ldrh.w	r0, [fp, r5, lsl #1]
 800e454:	460f      	mov	r7, r1
 800e456:	f7f2 f87d 	bl	8000554 <__aeabi_i2d>
 800e45a:	a34f      	add	r3, pc, #316	; (adr r3, 800e598 <Calculate_Tc+0x2c8>)
 800e45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e460:	f7f2 fa08 	bl	8000874 <__aeabi_ddiv>
 800e464:	4602      	mov	r2, r0
 800e466:	460b      	mov	r3, r1
 800e468:	4630      	mov	r0, r6
 800e46a:	4639      	mov	r1, r7
 800e46c:	f7f1 ff26 	bl	80002bc <__adddf3>
 800e470:	2200      	movs	r2, #0
 800e472:	4b5c      	ldr	r3, [pc, #368]	; (800e5e4 <Calculate_Tc+0x314>)
 800e474:	f7f2 f8d4 	bl	8000620 <__aeabi_dmul>
 800e478:	4b5b      	ldr	r3, [pc, #364]	; (800e5e8 <Calculate_Tc+0x318>)
 800e47a:	4680      	mov	r8, r0
 800e47c:	4689      	mov	r9, r1
 800e47e:	e9c3 8900 	strd	r8, r9, [r3]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800e482:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
 800e486:	f7f2 f865 	bl	8000554 <__aeabi_i2d>
 800e48a:	a343      	add	r3, pc, #268	; (adr r3, 800e598 <Calculate_Tc+0x2c8>)
 800e48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e490:	f7f2 f9f0 	bl	8000874 <__aeabi_ddiv>
 800e494:	4606      	mov	r6, r0
 800e496:	f83a 0015 	ldrh.w	r0, [sl, r5, lsl #1]
 800e49a:	460f      	mov	r7, r1
 800e49c:	f7f2 f85a 	bl	8000554 <__aeabi_i2d>
 800e4a0:	a33d      	add	r3, pc, #244	; (adr r3, 800e598 <Calculate_Tc+0x2c8>)
 800e4a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a6:	f7f2 f9e5 	bl	8000874 <__aeabi_ddiv>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	460b      	mov	r3, r1
 800e4ae:	4630      	mov	r0, r6
 800e4b0:	4639      	mov	r1, r7
 800e4b2:	f7f1 ff03 	bl	80002bc <__adddf3>
 800e4b6:	2200      	movs	r2, #0
 800e4b8:	4b4a      	ldr	r3, [pc, #296]	; (800e5e4 <Calculate_Tc+0x314>)
 800e4ba:	f7f2 f8b1 	bl	8000620 <__aeabi_dmul>
 800e4be:	4b4b      	ldr	r3, [pc, #300]	; (800e5ec <Calculate_Tc+0x31c>)
 800e4c0:	4606      	mov	r6, r0
 800e4c2:	460f      	mov	r7, r1
 800e4c4:	e9c3 6700 	strd	r6, r7, [r3]
	
	deltaC = sqrt((pow((u_dop - up), 2)+ pow((v_dop - vp), 2)));
 800e4c8:	4640      	mov	r0, r8
 800e4ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4ce:	4649      	mov	r1, r9
 800e4d0:	f7f1 fef2 	bl	80002b8 <__aeabi_dsub>
 800e4d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4d8:	4680      	mov	r8, r0
 800e4da:	4689      	mov	r9, r1
 800e4dc:	4630      	mov	r0, r6
 800e4de:	4639      	mov	r1, r7
 800e4e0:	f7f1 feea 	bl	80002b8 <__aeabi_dsub>
 800e4e4:	4642      	mov	r2, r8
 800e4e6:	4606      	mov	r6, r0
 800e4e8:	460f      	mov	r7, r1
 800e4ea:	464b      	mov	r3, r9
 800e4ec:	4640      	mov	r0, r8
 800e4ee:	4649      	mov	r1, r9
 800e4f0:	f7f2 f896 	bl	8000620 <__aeabi_dmul>
 800e4f4:	4632      	mov	r2, r6
 800e4f6:	4680      	mov	r8, r0
 800e4f8:	4689      	mov	r9, r1
 800e4fa:	463b      	mov	r3, r7
 800e4fc:	4630      	mov	r0, r6
 800e4fe:	4639      	mov	r1, r7
 800e500:	f7f2 f88e 	bl	8000620 <__aeabi_dmul>
 800e504:	4602      	mov	r2, r0
 800e506:	460b      	mov	r3, r1
 800e508:	4640      	mov	r0, r8
 800e50a:	4649      	mov	r1, r9
 800e50c:	f7f1 fed6 	bl	80002bc <__adddf3>
 800e510:	ec41 0b10 	vmov	d0, r0, r1
 800e514:	f016 fee8 	bl	80252e8 <sqrt>
 800e518:	4b35      	ldr	r3, [pc, #212]	; (800e5f0 <Calculate_Tc+0x320>)
 800e51a:	ec51 0b10 	vmov	r0, r1, d0
 800e51e:	ed83 0b00 	vstr	d0, [r3]
	
	if(deltaC > 0.05)
 800e522:	a31f      	add	r3, pc, #124	; (adr r3, 800e5a0 <Calculate_Tc+0x2d0>)
 800e524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e528:	f7f2 fb0a 	bl	8000b40 <__aeabi_dcmpgt>
 800e52c:	bb78      	cbnz	r0, 800e58e <Calculate_Tc+0x2be>
	{
		return 0xFFFF;
	}else
	{
		return result_tc = fabs(1000000./(Tc_tabl[i_min1]+dmin1*((Tc_tabl[i_min2]-Tc_tabl[i_min1])/(dmin1-dmin2))));
 800e52e:	4b31      	ldr	r3, [pc, #196]	; (800e5f4 <Calculate_Tc+0x324>)
 800e530:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800e534:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800e538:	ee07 2a90 	vmov	s15, r2
 800e53c:	1a9b      	subs	r3, r3, r2
 800e53e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e542:	ee07 3a90 	vmov	s15, r3
 800e546:	ee78 8a68 	vsub.f32	s17, s16, s17
 800e54a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e54e:	eec7 6aa8 	vdiv.f32	s13, s15, s17
 800e552:	eea8 7a26 	vfma.f32	s14, s16, s13
 800e556:	ee17 0a10 	vmov	r0, s14
 800e55a:	f7f2 f80d 	bl	8000578 <__aeabi_f2d>
 800e55e:	4602      	mov	r2, r0
 800e560:	460b      	mov	r3, r1
 800e562:	a111      	add	r1, pc, #68	; (adr r1, 800e5a8 <Calculate_Tc+0x2d8>)
 800e564:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e568:	f7f2 f984 	bl	8000874 <__aeabi_ddiv>
 800e56c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e570:	4921      	ldr	r1, [pc, #132]	; (800e5f8 <Calculate_Tc+0x328>)
 800e572:	4602      	mov	r2, r0
 800e574:	e9c1 2300 	strd	r2, r3, [r1]
 800e578:	4610      	mov	r0, r2
 800e57a:	4619      	mov	r1, r3
 800e57c:	f7f2 fb48 	bl	8000c10 <__aeabi_d2f>
	}
}
 800e580:	ee00 0a10 	vmov	s0, r0
 800e584:	b00b      	add	sp, #44	; 0x2c
 800e586:	ecbd 8b02 	vpop	{d8}
 800e58a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0xFFFF;
 800e58e:	481b      	ldr	r0, [pc, #108]	; (800e5fc <Calculate_Tc+0x32c>)
 800e590:	e7f6      	b.n	800e580 <Calculate_Tc+0x2b0>
 800e592:	bf00      	nop
 800e594:	f3af 8000 	nop.w
 800e598:	00000000 	.word	0x00000000
 800e59c:	40f86a00 	.word	0x40f86a00
 800e5a0:	9999999a 	.word	0x9999999a
 800e5a4:	3fa99999 	.word	0x3fa99999
 800e5a8:	00000000 	.word	0x00000000
 800e5ac:	412e8480 	.word	0x412e8480
 800e5b0:	20088db8 	.word	0x20088db8
 800e5b4:	2004e1e8 	.word	0x2004e1e8
 800e5b8:	20085db8 	.word	0x20085db8
 800e5bc:	2008adc6 	.word	0x2008adc6
 800e5c0:	447a0000 	.word	0x447a0000
 800e5c4:	20005228 	.word	0x20005228
 800e5c8:	40100000 	.word	0x40100000
 800e5cc:	08026b84 	.word	0x08026b84
 800e5d0:	20005238 	.word	0x20005238
 800e5d4:	40180000 	.word	0x40180000
 800e5d8:	20005248 	.word	0x20005248
 800e5dc:	08026b08 	.word	0x08026b08
 800e5e0:	08026c3e 	.word	0x08026c3e
 800e5e4:	3fe00000 	.word	0x3fe00000
 800e5e8:	20005230 	.word	0x20005230
 800e5ec:	20005240 	.word	0x20005240
 800e5f0:	20005220 	.word	0x20005220
 800e5f4:	08026a14 	.word	0x08026a14
 800e5f8:	2008c300 	.word	0x2008c300
 800e5fc:	477fff00 	.word	0x477fff00
 800e600:	08026c00 	.word	0x08026c00
 800e604:	00000000 	.word	0x00000000

0800e608 <Calculate_Lab>:

void Calculate_Lab(uint16_t colorimetry_XYZ_calculate[], uint8_t CIE_Type, uint8_t Source_Type)
{
 800e608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float Xref, Yref = 100, Zref;
	uint8_t i;
	double factor_x = 0, factor_y = 0, factor_z = 0, fx = 0, fy = 0, fz = 0;
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e60c:	2a01      	cmp	r2, #1
{
 800e60e:	ed2d 8b02 	vpush	{d8}
 800e612:	4606      	mov	r6, r0
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e614:	f000 80b9 	beq.w	800e78a <Calculate_Lab+0x182>
 800e618:	2a02      	cmp	r2, #2
 800e61a:	f000 80b8 	beq.w	800e78e <Calculate_Lab+0x186>
 800e61e:	2a04      	cmp	r2, #4
 800e620:	f000 80b7 	beq.w	800e792 <Calculate_Lab+0x18a>
 800e624:	2a08      	cmp	r2, #8
 800e626:	f000 80b6 	beq.w	800e796 <Calculate_Lab+0x18e>
 800e62a:	2a10      	cmp	r2, #16
 800e62c:	f000 80b5 	beq.w	800e79a <Calculate_Lab+0x192>
 800e630:	2a20      	cmp	r2, #32
 800e632:	bf14      	ite	ne
 800e634:	2400      	movne	r4, #0
 800e636:	2405      	moveq	r4, #5
	
	if (CIE_Type == 0x01) //check CIE 1931
 800e638:	2901      	cmp	r1, #1
 800e63a:	f040 80b0 	bne.w	800e79e <Calculate_Lab+0x196>
	{
		Xref = Xref_CIE1931[i]/100.0;
 800e63e:	4b82      	ldr	r3, [pc, #520]	; (800e848 <Calculate_Lab+0x240>)
 800e640:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e644:	f7f1 ff86 	bl	8000554 <__aeabi_i2d>
 800e648:	4b80      	ldr	r3, [pc, #512]	; (800e84c <Calculate_Lab+0x244>)
 800e64a:	2200      	movs	r2, #0
 800e64c:	f7f2 f912 	bl	8000874 <__aeabi_ddiv>
 800e650:	f7f2 fade 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1931[i]/100.0;
 800e654:	4b7e      	ldr	r3, [pc, #504]	; (800e850 <Calculate_Lab+0x248>)
		Xref = Xref_CIE1931[i]/100.0;
 800e656:	ee08 0a90 	vmov	s17, r0
	
	} else if(CIE_Type == 0x00) ////check CIE 1964
	{
		Xref = Xref_CIE1964[i]/100.0;
		Zref = Zref_CIE1964[i]/100.0;
 800e65a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e65e:	f7f1 ff79 	bl	8000554 <__aeabi_i2d>
 800e662:	2200      	movs	r2, #0
 800e664:	4b79      	ldr	r3, [pc, #484]	; (800e84c <Calculate_Lab+0x244>)
 800e666:	f7f2 f905 	bl	8000874 <__aeabi_ddiv>
 800e66a:	f7f2 fad1 	bl	8000c10 <__aeabi_d2f>
 800e66e:	ee08 0a10 	vmov	s16, r0
	}
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e672:	8833      	ldrh	r3, [r6, #0]
 800e674:	ee07 3a90 	vmov	s15, r3
 800e678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e67c:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800e680:	ee17 0a10 	vmov	r0, s14
 800e684:	f7f1 ff78 	bl	8000578 <__aeabi_f2d>
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e688:	8873      	ldrh	r3, [r6, #2]
 800e68a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800e854 <Calculate_Lab+0x24c>
 800e68e:	ee07 3a90 	vmov	s15, r3
 800e692:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e696:	4680      	mov	r8, r0
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e698:	eec7 6a87 	vdiv.f32	s13, s15, s14
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e69c:	4689      	mov	r9, r1
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e69e:	ee16 0a90 	vmov	r0, s13
 800e6a2:	f7f1 ff69 	bl	8000578 <__aeabi_f2d>
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e6a6:	88b3      	ldrh	r3, [r6, #4]
 800e6a8:	ee07 3a90 	vmov	s15, r3
 800e6ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e6b0:	4604      	mov	r4, r0
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e6b2:	ee87 7a88 	vdiv.f32	s14, s15, s16
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e6b6:	460d      	mov	r5, r1
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e6b8:	ee17 0a10 	vmov	r0, s14
 800e6bc:	f7f1 ff5c 	bl	8000578 <__aeabi_f2d>
	
		if(factor_x > 0.00885645)
 800e6c0:	a35b      	add	r3, pc, #364	; (adr r3, 800e830 <Calculate_Lab+0x228>)
 800e6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e6c6:	4606      	mov	r6, r0
 800e6c8:	460f      	mov	r7, r1
		if(factor_x > 0.00885645)
 800e6ca:	4640      	mov	r0, r8
 800e6cc:	4649      	mov	r1, r9
 800e6ce:	f7f2 fa37 	bl	8000b40 <__aeabi_dcmpgt>
 800e6d2:	2800      	cmp	r0, #0
 800e6d4:	d075      	beq.n	800e7c2 <Calculate_Lab+0x1ba>
	{
		fx = pow(factor_x, 1./3.);
 800e6d6:	ec49 8b10 	vmov	d0, r8, r9
 800e6da:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800e838 <Calculate_Lab+0x230>
 800e6de:	f016 fc8b 	bl	8024ff8 <pow>
 800e6e2:	ec59 8b10 	vmov	r8, r9, d0
	} else 
	{
		fx = (903.3*factor_x + 16.) / 116.;
	}
	
		if(factor_y > 0.00885645)
 800e6e6:	a352      	add	r3, pc, #328	; (adr r3, 800e830 <Calculate_Lab+0x228>)
 800e6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	4629      	mov	r1, r5
 800e6f0:	f7f2 fa26 	bl	8000b40 <__aeabi_dcmpgt>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	d076      	beq.n	800e7e6 <Calculate_Lab+0x1de>
	{
		fy = pow(factor_y, 1./3.);
 800e6f8:	ec45 4b10 	vmov	d0, r4, r5
 800e6fc:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 800e838 <Calculate_Lab+0x230>
 800e700:	f016 fc7a 	bl	8024ff8 <pow>
 800e704:	ec55 4b10 	vmov	r4, r5, d0
	} else 
	{
		fy = (903.3*factor_y + 16.) / 116.;
	}
	
		if(factor_z > 0.00885645)
 800e708:	a349      	add	r3, pc, #292	; (adr r3, 800e830 <Calculate_Lab+0x228>)
 800e70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e70e:	4630      	mov	r0, r6
 800e710:	4639      	mov	r1, r7
 800e712:	f7f2 fa15 	bl	8000b40 <__aeabi_dcmpgt>
 800e716:	2800      	cmp	r0, #0
 800e718:	d077      	beq.n	800e80a <Calculate_Lab+0x202>
	{
		fz = pow(factor_z, 1./3.);
 800e71a:	ec47 6b10 	vmov	d0, r6, r7
 800e71e:	ed9f 1b46 	vldr	d1, [pc, #280]	; 800e838 <Calculate_Lab+0x230>
 800e722:	f016 fc69 	bl	8024ff8 <pow>
 800e726:	ec57 6b10 	vmov	r6, r7, d0
	} else 
	{
		fz = (903.3*factor_z + 16.) / 116.;
	}
	
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800e72a:	2200      	movs	r2, #0
 800e72c:	4b4a      	ldr	r3, [pc, #296]	; (800e858 <Calculate_Lab+0x250>)
 800e72e:	f8df a140 	ldr.w	sl, [pc, #320]	; 800e870 <Calculate_Lab+0x268>
 800e732:	4620      	mov	r0, r4
 800e734:	4629      	mov	r1, r5
 800e736:	f7f1 ff73 	bl	8000620 <__aeabi_dmul>
 800e73a:	2200      	movs	r2, #0
 800e73c:	4b47      	ldr	r3, [pc, #284]	; (800e85c <Calculate_Lab+0x254>)
 800e73e:	f7f1 fdbb 	bl	80002b8 <__aeabi_dsub>
 800e742:	f7f2 fa1d 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e746:	4622      	mov	r2, r4
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800e748:	f8aa 0000 	strh.w	r0, [sl]
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e74c:	462b      	mov	r3, r5
 800e74e:	4640      	mov	r0, r8
 800e750:	4649      	mov	r1, r9
 800e752:	f7f1 fdb1 	bl	80002b8 <__aeabi_dsub>
 800e756:	2200      	movs	r2, #0
 800e758:	4b41      	ldr	r3, [pc, #260]	; (800e860 <Calculate_Lab+0x258>)
 800e75a:	f7f1 ff61 	bl	8000620 <__aeabi_dmul>
 800e75e:	f7f2 fa0f 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e762:	4632      	mov	r2, r6
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e764:	f8aa 0002 	strh.w	r0, [sl, #2]
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e768:	463b      	mov	r3, r7
 800e76a:	4620      	mov	r0, r4
 800e76c:	4629      	mov	r1, r5
 800e76e:	f7f1 fda3 	bl	80002b8 <__aeabi_dsub>
 800e772:	2200      	movs	r2, #0
 800e774:	4b3b      	ldr	r3, [pc, #236]	; (800e864 <Calculate_Lab+0x25c>)
 800e776:	f7f1 ff53 	bl	8000620 <__aeabi_dmul>
 800e77a:	f7f2 fa01 	bl	8000b80 <__aeabi_d2iz>
	
}
 800e77e:	ecbd 8b02 	vpop	{d8}
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e782:	f8aa 0004 	strh.w	r0, [sl, #4]
}
 800e786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e78a:	2400      	movs	r4, #0
 800e78c:	e754      	b.n	800e638 <Calculate_Lab+0x30>
 800e78e:	2401      	movs	r4, #1
 800e790:	e752      	b.n	800e638 <Calculate_Lab+0x30>
 800e792:	2402      	movs	r4, #2
 800e794:	e750      	b.n	800e638 <Calculate_Lab+0x30>
 800e796:	2403      	movs	r4, #3
 800e798:	e74e      	b.n	800e638 <Calculate_Lab+0x30>
 800e79a:	2404      	movs	r4, #4
 800e79c:	e74c      	b.n	800e638 <Calculate_Lab+0x30>
	} else if(CIE_Type == 0x00) ////check CIE 1964
 800e79e:	2900      	cmp	r1, #0
 800e7a0:	f47f af67 	bne.w	800e672 <Calculate_Lab+0x6a>
		Xref = Xref_CIE1964[i]/100.0;
 800e7a4:	4b30      	ldr	r3, [pc, #192]	; (800e868 <Calculate_Lab+0x260>)
 800e7a6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e7aa:	f7f1 fed3 	bl	8000554 <__aeabi_i2d>
 800e7ae:	4b27      	ldr	r3, [pc, #156]	; (800e84c <Calculate_Lab+0x244>)
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f7f2 f85f 	bl	8000874 <__aeabi_ddiv>
 800e7b6:	f7f2 fa2b 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1964[i]/100.0;
 800e7ba:	4b2c      	ldr	r3, [pc, #176]	; (800e86c <Calculate_Lab+0x264>)
		Xref = Xref_CIE1964[i]/100.0;
 800e7bc:	ee08 0a90 	vmov	s17, r0
 800e7c0:	e74b      	b.n	800e65a <Calculate_Lab+0x52>
		fx = (903.3*factor_x + 16.) / 116.;
 800e7c2:	a31f      	add	r3, pc, #124	; (adr r3, 800e840 <Calculate_Lab+0x238>)
 800e7c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7c8:	4640      	mov	r0, r8
 800e7ca:	4649      	mov	r1, r9
 800e7cc:	f7f1 ff28 	bl	8000620 <__aeabi_dmul>
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	4b22      	ldr	r3, [pc, #136]	; (800e85c <Calculate_Lab+0x254>)
 800e7d4:	f7f1 fd72 	bl	80002bc <__adddf3>
 800e7d8:	2200      	movs	r2, #0
 800e7da:	4b1f      	ldr	r3, [pc, #124]	; (800e858 <Calculate_Lab+0x250>)
 800e7dc:	f7f2 f84a 	bl	8000874 <__aeabi_ddiv>
 800e7e0:	4680      	mov	r8, r0
 800e7e2:	4689      	mov	r9, r1
 800e7e4:	e77f      	b.n	800e6e6 <Calculate_Lab+0xde>
		fy = (903.3*factor_y + 16.) / 116.;
 800e7e6:	a316      	add	r3, pc, #88	; (adr r3, 800e840 <Calculate_Lab+0x238>)
 800e7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	4629      	mov	r1, r5
 800e7f0:	f7f1 ff16 	bl	8000620 <__aeabi_dmul>
 800e7f4:	2200      	movs	r2, #0
 800e7f6:	4b19      	ldr	r3, [pc, #100]	; (800e85c <Calculate_Lab+0x254>)
 800e7f8:	f7f1 fd60 	bl	80002bc <__adddf3>
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	4b16      	ldr	r3, [pc, #88]	; (800e858 <Calculate_Lab+0x250>)
 800e800:	f7f2 f838 	bl	8000874 <__aeabi_ddiv>
 800e804:	4604      	mov	r4, r0
 800e806:	460d      	mov	r5, r1
 800e808:	e77e      	b.n	800e708 <Calculate_Lab+0x100>
		fz = (903.3*factor_z + 16.) / 116.;
 800e80a:	a30d      	add	r3, pc, #52	; (adr r3, 800e840 <Calculate_Lab+0x238>)
 800e80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e810:	4630      	mov	r0, r6
 800e812:	4639      	mov	r1, r7
 800e814:	f7f1 ff04 	bl	8000620 <__aeabi_dmul>
 800e818:	2200      	movs	r2, #0
 800e81a:	4b10      	ldr	r3, [pc, #64]	; (800e85c <Calculate_Lab+0x254>)
 800e81c:	f7f1 fd4e 	bl	80002bc <__adddf3>
 800e820:	2200      	movs	r2, #0
 800e822:	4b0d      	ldr	r3, [pc, #52]	; (800e858 <Calculate_Lab+0x250>)
 800e824:	f7f2 f826 	bl	8000874 <__aeabi_ddiv>
 800e828:	4606      	mov	r6, r0
 800e82a:	460f      	mov	r7, r1
 800e82c:	e77d      	b.n	800e72a <Calculate_Lab+0x122>
 800e82e:	bf00      	nop
 800e830:	98de88b7 	.word	0x98de88b7
 800e834:	3f822354 	.word	0x3f822354
 800e838:	55555555 	.word	0x55555555
 800e83c:	3fd55555 	.word	0x3fd55555
 800e840:	66666666 	.word	0x66666666
 800e844:	408c3a66 	.word	0x408c3a66
 800e848:	08026a52 	.word	0x08026a52
 800e84c:	40590000 	.word	0x40590000
 800e850:	08026a6a 	.word	0x08026a6a
 800e854:	42c80000 	.word	0x42c80000
 800e858:	405d0000 	.word	0x405d0000
 800e85c:	40300000 	.word	0x40300000
 800e860:	407f4000 	.word	0x407f4000
 800e864:	40690000 	.word	0x40690000
 800e868:	08026a5e 	.word	0x08026a5e
 800e86c:	08026a76 	.word	0x08026a76
 800e870:	2008adc0 	.word	0x2008adc0

0800e874 <Calculate_Lambda_Dominant>:
void Calculate_Lambda_Dominant(float R_data[], uint8_t CIE_Type)
{	
	float Px, Py, x1 = 0.3333, y1 = 0.3333, x2, y2, divider;
	int8_t triangle_p1, triangle_p2, triangle_p3, triangle_out, ld;
	
	x2 = colorimetry_xy1931[0];
 800e874:	4b75      	ldr	r3, [pc, #468]	; (800ea4c <Calculate_Lambda_Dominant+0x1d8>)
	y2 = colorimetry_xy1931[1];
	
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e876:	eddf 7a76 	vldr	s15, [pc, #472]	; 800ea50 <Calculate_Lambda_Dominant+0x1dc>
	y2 = colorimetry_xy1931[1];
 800e87a:	ed93 6a01 	vldr	s12, [r3, #4]
	x2 = colorimetry_xy1931[0];
 800e87e:	edd3 5a00 	vldr	s11, [r3]
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e882:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800ea54 <Calculate_Lambda_Dominant+0x1e0>
 800e886:	eddf 6a74 	vldr	s13, [pc, #464]	; 800ea58 <Calculate_Lambda_Dominant+0x1e4>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e88a:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800ea5c <Calculate_Lambda_Dominant+0x1e8>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e88e:	ee77 1ac6 	vsub.f32	s3, s15, s12
 800e892:	ee37 2ae5 	vsub.f32	s4, s15, s11
 800e896:	ee27 7a61 	vnmul.f32	s14, s14, s3
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e89a:	ee35 5a65 	vsub.f32	s10, s10, s11
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e89e:	eea2 7a26 	vfma.f32	s14, s4, s13
{	
 800e8a2:	b5f0      	push	{r4, r5, r6, r7, lr}
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e8a4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ea60 <Calculate_Lambda_Dominant+0x1ec>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e8a8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e8ac:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800e8b0:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800ea64 <Calculate_Lambda_Dominant+0x1f0>
 800e8b4:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 800e8b8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800ea68 <Calculate_Lambda_Dominant+0x1f4>
 800e8bc:	eee5 6a07 	vfma.f32	s13, s10, s14
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e8c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e8c4:	ed9f 5a69 	vldr	s10, [pc, #420]	; 800ea6c <Calculate_Lambda_Dominant+0x1f8>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e8c8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e8cc:	ee77 6a46 	vsub.f32	s13, s14, s12
 800e8d0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ea70 <Calculate_Lambda_Dominant+0x1fc>
 800e8d4:	ee35 5a65 	vsub.f32	s10, s10, s11
 800e8d8:	ee27 7a66 	vnmul.f32	s14, s14, s13
 800e8dc:	eddf 6a65 	vldr	s13, [pc, #404]	; 800ea74 <Calculate_Lambda_Dominant+0x200>
 800e8e0:	eea5 7a26 	vfma.f32	s14, s10, s13
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e8e4:	bfcc      	ite	gt
 800e8e6:	2101      	movgt	r1, #1
 800e8e8:	f04f 31ff 	movle.w	r1, #4294967295
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e8f0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e8f4:	bfcc      	ite	gt
 800e8f6:	2201      	movgt	r2, #1
 800e8f8:	f04f 32ff 	movle.w	r2, #4294967295
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e900:	bfcc      	ite	gt
 800e902:	2301      	movgt	r3, #1
 800e904:	f04f 33ff 	movle.w	r3, #4294967295
		
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800e908:	4291      	cmp	r1, r2
 800e90a:	f040 8093 	bne.w	800ea34 <Calculate_Lambda_Dominant+0x1c0>
 800e90e:	4299      	cmp	r1, r3
 800e910:	bf14      	ite	ne
 800e912:	2101      	movne	r1, #1
 800e914:	f04f 31ff 	moveq.w	r1, #4294967295
	
	for(uint8_t i = 0; i < 65; i++)
	{
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e918:	ee67 3ae5 	vnmul.f32	s7, s15, s11
 800e91c:	4856      	ldr	r0, [pc, #344]	; (800ea78 <Calculate_Lambda_Dominant+0x204>)
 800e91e:	4a57      	ldr	r2, [pc, #348]	; (800ea7c <Calculate_Lambda_Dominant+0x208>)
 800e920:	8804      	ldrh	r4, [r0, #0]
 800e922:	4e57      	ldr	r6, [pc, #348]	; (800ea80 <Calculate_Lambda_Dominant+0x20c>)
 800e924:	4d57      	ldr	r5, [pc, #348]	; (800ea84 <Calculate_Lambda_Dominant+0x210>)
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
		
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
		{
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800e926:	eddf 0a4a 	vldr	s1, [pc, #296]	; 800ea50 <Calculate_Lambda_Dominant+0x1dc>
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e92a:	eee6 3a27 	vfma.f32	s7, s12, s15
 800e92e:	f102 0782 	add.w	r7, r2, #130	; 0x82
 800e932:	2300      	movs	r3, #0
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e934:	eeb1 0a61 	vneg.f32	s0, s3
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e938:	ed95 6a00 	vldr	s12, [r5]
 800e93c:	edd6 6a00 	vldr	s13, [r6]
 800e940:	ed95 4a01 	vldr	s8, [r5, #4]
 800e944:	ed96 5a01 	vldr	s10, [r6, #4]
 800e948:	3504      	adds	r5, #4
 800e94a:	3604      	adds	r6, #4
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e94c:	ee64 2a66 	vnmul.f32	s5, s8, s13
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e950:	ee36 7a44 	vsub.f32	s14, s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e954:	eee5 2a06 	vfma.f32	s5, s10, s12
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e958:	ee27 3a61 	vnmul.f32	s6, s14, s3
 800e95c:	ee76 4ac5 	vsub.f32	s9, s13, s10
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e960:	ee22 1ac2 	vnmul.f32	s2, s5, s4
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e964:	eea2 3a24 	vfma.f32	s6, s4, s9
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e968:	eea7 1a23 	vfma.f32	s2, s14, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e96c:	eeb4 6ac4 	vcmpe.f32	s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e970:	ee81 7a03 	vdiv.f32	s14, s2, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e978:	bf54      	ite	pl
 800e97a:	eeb0 1a44 	vmovpl.f32	s2, s8
 800e97e:	eeb0 1a46 	vmovmi.f32	s2, s12
 800e982:	eeb4 1ac7 	vcmpe.f32	s2, s14
 800e986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e98a:	d54d      	bpl.n	800ea28 <Calculate_Lambda_Dominant+0x1b4>
 800e98c:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800e990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e994:	bfd8      	it	le
 800e996:	eeb0 6a44 	vmovle.f32	s12, s8
 800e99a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800e99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9a2:	dd41      	ble.n	800ea28 <Calculate_Lambda_Dominant+0x1b4>
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e9a4:	ee64 4aa3 	vmul.f32	s9, s9, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e9a8:	eef4 6ac5 	vcmpe.f32	s13, s10
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e9ac:	eee0 4a22 	vfma.f32	s9, s0, s5
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e9b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e9b4:	ee84 6a83 	vdiv.f32	s12, s9, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e9b8:	bf54      	ite	pl
 800e9ba:	eeb0 4a45 	vmovpl.f32	s8, s10
 800e9be:	eeb0 4a66 	vmovmi.f32	s8, s13
 800e9c2:	eeb4 4ac6 	vcmpe.f32	s8, s12
 800e9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ca:	d52d      	bpl.n	800ea28 <Calculate_Lambda_Dominant+0x1b4>
 800e9cc:	eef4 6ac5 	vcmpe.f32	s13, s10
 800e9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9d4:	bfd8      	it	le
 800e9d6:	eef0 6a45 	vmovle.f32	s13, s10
 800e9da:	eef4 6ac6 	vcmpe.f32	s13, s12
 800e9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9e2:	dd21      	ble.n	800ea28 <Calculate_Lambda_Dominant+0x1b4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800e9e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e9e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ec:	bf54      	ite	pl
 800e9ee:	eef0 6a60 	vmovpl.f32	s13, s1
 800e9f2:	eef0 6a47 	vmovmi.f32	s13, s14
 800e9f6:	eef4 6ae5 	vcmpe.f32	s13, s11
 800e9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9fe:	d51b      	bpl.n	800ea38 <Calculate_Lambda_Dominant+0x1c4>
 800ea00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ea04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea08:	bfd8      	it	le
 800ea0a:	eeb0 7a60 	vmovle.f32	s14, s1
 800ea0e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800ea12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea16:	bfcc      	ite	gt
 800ea18:	2301      	movgt	r3, #1
 800ea1a:	f04f 33ff 	movle.w	r3, #4294967295
			
			if((ld*triangle_out) > 0)
 800ea1e:	fb13 f301 	smulbb	r3, r3, r1
 800ea22:	2b01      	cmp	r3, #1
 800ea24:	d10b      	bne.n	800ea3e <Calculate_Lambda_Dominant+0x1ca>
			{
				lambda_d_Measure = lamda_dominant[i+1];
 800ea26:	8814      	ldrh	r4, [r2, #0]
 800ea28:	3202      	adds	r2, #2
	for(uint8_t i = 0; i < 65; i++)
 800ea2a:	4297      	cmp	r7, r2
 800ea2c:	d184      	bne.n	800e938 <Calculate_Lambda_Dominant+0xc4>
 800ea2e:	b103      	cbz	r3, 800ea32 <Calculate_Lambda_Dominant+0x1be>
 800ea30:	8004      	strh	r4, [r0, #0]
 800ea32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800ea34:	2101      	movs	r1, #1
 800ea36:	e76f      	b.n	800e918 <Calculate_Lambda_Dominant+0xa4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800ea38:	f04f 33ff 	mov.w	r3, #4294967295
 800ea3c:	e7ef      	b.n	800ea1e <Calculate_Lambda_Dominant+0x1aa>
			} else {
				lambda_d_Measure = triangle_out < 0 ? 0 : lamda_dominant[i+1];
 800ea3e:	1c4b      	adds	r3, r1, #1
 800ea40:	bf14      	ite	ne
 800ea42:	8814      	ldrhne	r4, [r2, #0]
 800ea44:	2400      	moveq	r4, #0
 800ea46:	2301      	movs	r3, #1
 800ea48:	e7ee      	b.n	800ea28 <Calculate_Lambda_Dominant+0x1b4>
 800ea4a:	bf00      	nop
 800ea4c:	2008ade4 	.word	0x2008ade4
 800ea50:	3eaaa64c 	.word	0x3eaaa64c
 800ea54:	be1fd4b2 	.word	0xbe1fd4b2
 800ea58:	beaaa64c 	.word	0xbeaaa64c
 800ea5c:	3e3577e6 	.word	0x3e3577e6
 800ea60:	00000000 	.word	0x00000000
 800ea64:	3f0eeab2 	.word	0x3f0eeab2
 800ea68:	3e876ea8 	.word	0x3e876ea8
 800ea6c:	3f3c48ac 	.word	0x3f3c48ac
 800ea70:	becdeb0c 	.word	0xbecdeb0c
 800ea74:	3d8cde90 	.word	0x3d8cde90
 800ea78:	200913e4 	.word	0x200913e4
 800ea7c:	08026a84 	.word	0x08026a84
 800ea80:	08026d84 	.word	0x08026d84
 800ea84:	08026c7c 	.word	0x08026c7c

0800ea88 <Calculate_deltaEab>:

extern int16_t colorimetry_LAB_mem[3];
float result, res1, res2, res3;

int16_t Calculate_deltaEab() {
	if((Measure_Field&CIE_Lab) == 0){
 800ea88:	4b2c      	ldr	r3, [pc, #176]	; (800eb3c <Calculate_deltaEab+0xb4>)
 800ea8a:	881b      	ldrh	r3, [r3, #0]
 800ea8c:	061b      	lsls	r3, r3, #24
int16_t Calculate_deltaEab() {
 800ea8e:	b507      	push	{r0, r1, r2, lr}
	if((Measure_Field&CIE_Lab) == 0){
 800ea90:	d40a      	bmi.n	800eaa8 <Calculate_deltaEab+0x20>
		Calculate_Lab(Measure_Color_xy == 0x00 ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 800ea92:	4b2b      	ldr	r3, [pc, #172]	; (800eb40 <Calculate_deltaEab+0xb8>)
 800ea94:	482b      	ldr	r0, [pc, #172]	; (800eb44 <Calculate_deltaEab+0xbc>)
 800ea96:	7819      	ldrb	r1, [r3, #0]
 800ea98:	4b2b      	ldr	r3, [pc, #172]	; (800eb48 <Calculate_deltaEab+0xc0>)
 800ea9a:	781a      	ldrb	r2, [r3, #0]
 800ea9c:	4b2b      	ldr	r3, [pc, #172]	; (800eb4c <Calculate_deltaEab+0xc4>)
 800ea9e:	2900      	cmp	r1, #0
 800eaa0:	bf18      	it	ne
 800eaa2:	4618      	movne	r0, r3
 800eaa4:	f7ff fdb0 	bl	800e608 <Calculate_Lab>
	}
	res1 = ((float)(colorimetry_LAB[0]) - (float)(colorimetry_LAB_mem[0]));
 800eaa8:	4a29      	ldr	r2, [pc, #164]	; (800eb50 <Calculate_deltaEab+0xc8>)
 800eaaa:	f9b2 3000 	ldrsh.w	r3, [r2]
 800eaae:	ee06 3a90 	vmov	s13, r3
 800eab2:	4b28      	ldr	r3, [pc, #160]	; (800eb54 <Calculate_deltaEab+0xcc>)
 800eab4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800eab8:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800eabc:	ee06 1a90 	vmov	s13, r1
 800eac0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800eac4:	4924      	ldr	r1, [pc, #144]	; (800eb58 <Calculate_deltaEab+0xd0>)
 800eac6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800eaca:	edc1 6a00 	vstr	s13, [r1]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800eace:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800ead2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800ead6:	ee00 1a10 	vmov	s0, r1
 800eada:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eade:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800eae2:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800eae6:	ee00 1a10 	vmov	s0, r1
 800eaea:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800eaee:	491b      	ldr	r1, [pc, #108]	; (800eb5c <Calculate_deltaEab+0xd4>)
 800eaf0:	ee37 0ac0 	vsub.f32	s0, s15, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eaf4:	ee07 2a90 	vmov	s15, r2
 800eaf8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eafc:	ee07 3a90 	vmov	s15, r3
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800eb00:	ed81 0a00 	vstr	s0, [r1]
	Calculate_deltaEab_Done = 0x01;
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800eb04:	ee20 0a00 	vmul.f32	s0, s0, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eb08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800eb0c:	eea6 0aa6 	vfma.f32	s0, s13, s13
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eb10:	4b13      	ldr	r3, [pc, #76]	; (800eb60 <Calculate_deltaEab+0xd8>)
 800eb12:	ee77 7a67 	vsub.f32	s15, s14, s15
	Calculate_deltaEab_Done = 0x01;
 800eb16:	2201      	movs	r2, #1
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eb18:	edc3 7a00 	vstr	s15, [r3]
	Calculate_deltaEab_Done = 0x01;
 800eb1c:	4b11      	ldr	r3, [pc, #68]	; (800eb64 <Calculate_deltaEab+0xdc>)
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800eb1e:	eea7 0aa7 	vfma.f32	s0, s15, s15
	Calculate_deltaEab_Done = 0x01;
 800eb22:	701a      	strb	r2, [r3, #0]
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800eb24:	f016 fc3a 	bl	802539c <sqrtf>
 800eb28:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800eb2c:	edcd 7a01 	vstr	s15, [sp, #4]
 800eb30:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800eb34:	b003      	add	sp, #12
 800eb36:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb3a:	bf00      	nop
 800eb3c:	2000527e 	.word	0x2000527e
 800eb40:	2000527c 	.word	0x2000527c
 800eb44:	2008adcc 	.word	0x2008adcc
 800eb48:	2008c319 	.word	0x2008c319
 800eb4c:	2008adc6 	.word	0x2008adc6
 800eb50:	2008adc0 	.word	0x2008adc0
 800eb54:	2008c8a8 	.word	0x2008c8a8
 800eb58:	2008c2f8 	.word	0x2008c2f8
 800eb5c:	2008c2f0 	.word	0x2008c2f0
 800eb60:	2008c308 	.word	0x2008c308
 800eb64:	20005219 	.word	0x20005219

0800eb68 <Calibration_Load_2byte>:
extern float Unit_nm[7], Spectral_Corection_Buff[1024], Scattering_Light, Exposure_Factor;
extern float Spectral_day[1024], Spectral_night[1024], Spectral_B[1024], Spectral_R[1024];
	
uint16_t buff2_array[4] = {0};
uint16_t Calibration_Load_2byte(uint32_t Address, uint8_t num)
{
 800eb68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint64_t buff = 0;

	uint16_t byte_array[4] = {0};
	uint8_t i = 0;
	
	i = num > 3 ? (num - 4*(num/4)) : num;
 800eb6a:	2903      	cmp	r1, #3
{
 800eb6c:	460c      	mov	r4, r1
 800eb6e:	bf88      	it	hi
 800eb70:	f001 0403 	andhi.w	r4, r1, #3
	buff = flash_data_read_buff(Address);
 800eb74:	f7fd f933 	bl	800bdde <flash_data_read_buff>
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800eb78:	aa04      	add	r2, sp, #16
 800eb7a:	e962 0104 	strd	r0, r1, [r2, #-16]!
 800eb7e:	ca03      	ldmia	r2!, {r0, r1}
 800eb80:	4b0a      	ldr	r3, [pc, #40]	; (800ebac <Calibration_Load_2byte+0x44>)
 800eb82:	6018      	str	r0, [r3, #0]
	
	byte_array[0] = buff2_array[1];
 800eb84:	885a      	ldrh	r2, [r3, #2]
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800eb86:	6059      	str	r1, [r3, #4]
	byte_array[0] = buff2_array[1];
 800eb88:	f8ad 2008 	strh.w	r2, [sp, #8]
	byte_array[1] = buff2_array[0];
 800eb8c:	881a      	ldrh	r2, [r3, #0]
 800eb8e:	f8ad 200a 	strh.w	r2, [sp, #10]
	byte_array[2] = buff2_array[3];
 800eb92:	88da      	ldrh	r2, [r3, #6]
	byte_array[3] = buff2_array[2];
 800eb94:	889b      	ldrh	r3, [r3, #4]
 800eb96:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	return byte_array[i];
 800eb9a:	ab04      	add	r3, sp, #16
 800eb9c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
	byte_array[2] = buff2_array[3];
 800eba0:	f8ad 200c 	strh.w	r2, [sp, #12]
}
 800eba4:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800eba8:	b004      	add	sp, #16
 800ebaa:	bd10      	pop	{r4, pc}
 800ebac:	20005258 	.word	0x20005258

0800ebb0 <Calibration_Load_1byte>:
	

	uint8_t byte1[8] = {0};
uint8_t Calibration_Load_1byte(uint32_t Address, uint8_t num)
{
 800ebb0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t buff = 0;
	uint8_t buff_array[8] = {0};

	uint8_t i = 0;
	
	i = num > 7 ? (num - 8) : num;
 800ebb2:	2907      	cmp	r1, #7
{
 800ebb4:	b085      	sub	sp, #20
 800ebb6:	460c      	mov	r4, r1
	i = num > 7 ? (num - 8) : num;
 800ebb8:	bf84      	itt	hi
 800ebba:	f1a1 0408 	subhi.w	r4, r1, #8
 800ebbe:	b2e4      	uxtbhi	r4, r4
	buff = flash_data_read_buff(Address);
 800ebc0:	f7fd f90d 	bl	800bdde <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ebc4:	e9cd 0100 	strd	r0, r1, [sp]
 800ebc8:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800ebcc:	ab04      	add	r3, sp, #16
 800ebce:	e903 0003 	stmdb	r3, {r0, r1}
	
	byte1[0] =  buff_array[3];
 800ebd2:	4b0f      	ldr	r3, [pc, #60]	; (800ec10 <Calibration_Load_1byte+0x60>)
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ebd4:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800ebd8:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800ebdc:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800ebe0:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800ebe4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ebe8:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800ebec:	f89d 500f 	ldrb.w	r5, [sp, #15]
	byte1[0] =  buff_array[3];
 800ebf0:	f89d c00b 	ldrb.w	ip, [sp, #11]
 800ebf4:	f883 c000 	strb.w	ip, [r3]
	byte1[1] =  buff_array[2];
 800ebf8:	f883 e001 	strb.w	lr, [r3, #1]
	byte1[2] =  buff_array[1];
 800ebfc:	709f      	strb	r7, [r3, #2]
	byte1[3] =  buff_array[0];
 800ebfe:	70de      	strb	r6, [r3, #3]
	byte1[4] =  buff_array[7];
 800ec00:	711d      	strb	r5, [r3, #4]
	byte1[5] =  buff_array[6];
 800ec02:	7158      	strb	r0, [r3, #5]
	byte1[6] =  buff_array[5];
 800ec04:	7199      	strb	r1, [r3, #6]
	byte1[7] =  buff_array[4];
 800ec06:	71da      	strb	r2, [r3, #7]
	
	return byte1[i];
}
 800ec08:	5d18      	ldrb	r0, [r3, r4]
 800ec0a:	b005      	add	sp, #20
 800ec0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	2000526c 	.word	0x2000526c

0800ec14 <Calibration_Load_float>:


	
float Calibration_Load_float(uint32_t Address)
{
 800ec14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buff_array[8] = {0};
	uint32_t buff_float = 0;
	float res = 0;
	uint64_t buff = 0;
	buff = flash_data_read_buff(Address);
 800ec16:	f7fd f8e2 	bl	800bdde <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ec1a:	e9cd 0100 	strd	r0, r1, [sp]
 800ec1e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800ec22:	ab04      	add	r3, sp, #16
 800ec24:	e903 0003 	stmdb	r3, {r0, r1}
	buff_float = (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
	memcpy(&res, &buff_float, sizeof(uint32_t));
	return res;
 800ec28:	9b02      	ldr	r3, [sp, #8]
 800ec2a:	ba1b      	rev	r3, r3
}
 800ec2c:	ee00 3a10 	vmov	s0, r3
 800ec30:	b005      	add	sp, #20
 800ec32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ec38 <Calibration_Load_Pack>:
	uint8_t buff_array[8] = {0};
	uint64_t buff = 0;
	uint32_t buff_float = 0;
	
void Calibration_Load_Pack(uint32_t Address, uint16_t size, float data[])
{
 800ec38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t idx = 0;
	
	for (uint16_t i = 0; i < (4*size); i+=8){
		addr = Address + i;
 800ec3c:	f8df a078 	ldr.w	sl, [pc, #120]	; 800ecb8 <Calibration_Load_Pack+0x80>
		buff = flash_data_read_buff(Address+i);
 800ec40:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800ecb0 <Calibration_Load_Pack+0x78>
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800ec44:	4c19      	ldr	r4, [pc, #100]	; (800ecac <Calibration_Load_Pack+0x74>)
{
 800ec46:	4681      	mov	r9, r0
 800ec48:	4617      	mov	r7, r2
	for (uint16_t i = 0; i < (4*size); i+=8){
 800ec4a:	ea4f 0881 	mov.w	r8, r1, lsl #2
	uint16_t idx = 0;
 800ec4e:	2500      	movs	r5, #0
 800ec50:	00ae      	lsls	r6, r5, #2
 800ec52:	b2b0      	uxth	r0, r6
	for (uint16_t i = 0; i < (4*size); i+=8){
 800ec54:	4540      	cmp	r0, r8
 800ec56:	db01      	blt.n	800ec5c <Calibration_Load_Pack+0x24>
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
		idx+=2;
	}
}
 800ec58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		addr = Address + i;
 800ec5c:	4448      	add	r0, r9
 800ec5e:	f8ca 0000 	str.w	r0, [sl]
		buff = flash_data_read_buff(Address+i);
 800ec62:	f7fd f8bc 	bl	800bdde <flash_data_read_buff>
 800ec66:	e9cb 0100 	strd	r0, r1, [fp]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800ec6a:	4b11      	ldr	r3, [pc, #68]	; (800ecb0 <Calibration_Load_Pack+0x78>)
 800ec6c:	cb03      	ldmia	r3!, {r0, r1}
 800ec6e:	6020      	str	r0, [r4, #0]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800ec70:	7863      	ldrb	r3, [r4, #1]
 800ec72:	7822      	ldrb	r2, [r4, #0]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800ec74:	6061      	str	r1, [r4, #4]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800ec76:	041b      	lsls	r3, r3, #16
 800ec78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ec7c:	78e2      	ldrb	r2, [r4, #3]
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	78a2      	ldrb	r2, [r4, #2]
 800ec82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
 800ec86:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800ec8a:	7963      	ldrb	r3, [r4, #5]
 800ec8c:	7922      	ldrb	r2, [r4, #4]
 800ec8e:	041b      	lsls	r3, r3, #16
 800ec90:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ec94:	79e2      	ldrb	r2, [r4, #7]
 800ec96:	4313      	orrs	r3, r2
 800ec98:	79a2      	ldrb	r2, [r4, #6]
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800ec9a:	443e      	add	r6, r7
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800ec9c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eca0:	4a04      	ldr	r2, [pc, #16]	; (800ecb4 <Calibration_Load_Pack+0x7c>)
		idx+=2;
 800eca2:	3502      	adds	r5, #2
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800eca4:	6013      	str	r3, [r2, #0]
		idx+=2;
 800eca6:	b2ad      	uxth	r5, r5
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800eca8:	6073      	str	r3, [r6, #4]
 800ecaa:	e7d1      	b.n	800ec50 <Calibration_Load_Pack+0x18>
 800ecac:	20005260 	.word	0x20005260
 800ecb0:	20005250 	.word	0x20005250
 800ecb4:	20005268 	.word	0x20005268
 800ecb8:	2008c310 	.word	0x2008c310

0800ecbc <Calibration_Exposure_Change>:


void Calibration_Exposure_Change(uint8_t Exp)
{
 800ecbc:	b538      	push	{r3, r4, r5, lr}
 800ecbe:	4605      	mov	r5, r0
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800ecc0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800ecc4:	f100 6001 	add.w	r0, r0, #135266304	; 0x8100000
 800ecc8:	4629      	mov	r1, r5
 800ecca:	f600 0028 	addw	r0, r0, #2088	; 0x828
 800ecce:	f7ff ff6f 	bl	800ebb0 <Calibration_Load_1byte>
 800ecd2:	ee07 0a90 	vmov	s15, r0
 800ecd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecda:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ecde:	eec6 7a87 	vdiv.f32	s15, s13, s14
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ece2:	08a8      	lsrs	r0, r5, #2
 800ece4:	f100 2001 	add.w	r0, r0, #16777472	; 0x1000100
 800ece8:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800ecec:	4b0d      	ldr	r3, [pc, #52]	; (800ed24 <Calibration_Exposure_Change+0x68>)
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ecee:	00c4      	lsls	r4, r0, #3
 800ecf0:	4629      	mov	r1, r5
 800ecf2:	4620      	mov	r0, r4
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800ecf4:	edc3 7a00 	vstr	s15, [r3]
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ecf8:	f7ff ff36 	bl	800eb68 <Calibration_Load_2byte>
 800ecfc:	4b0a      	ldr	r3, [pc, #40]	; (800ed28 <Calibration_Exposure_Change+0x6c>)
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800ecfe:	4629      	mov	r1, r5
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ed00:	8018      	strh	r0, [r3, #0]
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800ed02:	f104 0014 	add.w	r0, r4, #20
 800ed06:	f7ff ff2f 	bl	800eb68 <Calibration_Load_2byte>
 800ed0a:	ee07 0a90 	vmov	s15, r0
 800ed0e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800ed2c <Calibration_Exposure_Change+0x70>
 800ed12:	4b07      	ldr	r3, [pc, #28]	; (800ed30 <Calibration_Exposure_Change+0x74>)
 800ed14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed1c:	edc3 7a00 	vstr	s15, [r3]
 800ed20:	bd38      	pop	{r3, r4, r5, pc}
 800ed22:	bf00      	nop
 800ed24:	2004d1e4 	.word	0x2004d1e4
 800ed28:	200055ca 	.word	0x200055ca
 800ed2c:	42c80000 	.word	0x42c80000
 800ed30:	200055d4 	.word	0x200055d4
 800ed34:	00000000 	.word	0x00000000

0800ed38 <Calibration_WaveLenght_Graph>:
}

void Calibration_WaveLenght_Graph()
{
 800ed38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0; i <= 7; i++){
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ed3c:	a717      	add	r7, pc, #92	; (adr r7, 800ed9c <Calibration_WaveLenght_Graph+0x64>)
 800ed3e:	e9d7 6700 	ldrd	r6, r7, [r7]
 800ed42:	f8df a060 	ldr.w	sl, [pc, #96]	; 800eda4 <Calibration_WaveLenght_Graph+0x6c>
 800ed46:	4d14      	ldr	r5, [pc, #80]	; (800ed98 <Calibration_WaveLenght_Graph+0x60>)
 800ed48:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800eda8 <Calibration_WaveLenght_Graph+0x70>
	for (uint8_t i = 0; i <= 7; i++){
 800ed4c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800edac <Calibration_WaveLenght_Graph+0x74>
{
 800ed50:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ed54:	f04f 0800 	mov.w	r8, #0
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800ed58:	2100      	movs	r1, #0
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f7ff ff04 	bl	800eb68 <Calibration_Load_2byte>
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ed60:	ee07 0a90 	vmov	s15, r0
 800ed64:	eef8 7a67 	vcvt.f32.u32	s15, s15
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800ed68:	f82a 0f02 	strh.w	r0, [sl, #2]!
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ed6c:	ee17 0a90 	vmov	r0, s15
 800ed70:	f7f1 fc02 	bl	8000578 <__aeabi_f2d>
 800ed74:	4642      	mov	r2, r8
 800ed76:	464b      	mov	r3, r9
 800ed78:	f7f1 fd7c 	bl	8000874 <__aeabi_ddiv>
 800ed7c:	4632      	mov	r2, r6
 800ed7e:	463b      	mov	r3, r7
 800ed80:	f7f1 fa9c 	bl	80002bc <__adddf3>
 800ed84:	f7f1 ff44 	bl	8000c10 <__aeabi_d2f>
 800ed88:	f504 7492 	add.w	r4, r4, #292	; 0x124
	for (uint8_t i = 0; i <= 7; i++){
 800ed8c:	455c      	cmp	r4, fp
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ed8e:	f845 0b04 	str.w	r0, [r5], #4
	for (uint8_t i = 0; i <= 7; i++){
 800ed92:	d1e1      	bne.n	800ed58 <Calibration_WaveLenght_Graph+0x20>
	}
}
 800ed94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed98:	200055a8 	.word	0x200055a8
 800ed9c:	00000000 	.word	0x00000000
 800eda0:	4072c000 	.word	0x4072c000
 800eda4:	200511ea 	.word	0x200511ea
 800eda8:	40590000 	.word	0x40590000
 800edac:	08100920 	.word	0x08100920

0800edb0 <GUI_OptionMenuRu>:
uint8_t screen_count = 0, screen_count_old = 0, state_Measure_Elements = 0;
sImage Locus;
extern volatile uint8_t TFT_direction;

void GUI_OptionMenuRu()
{	
 800edb0:	b513      	push	{r0, r1, r4, lr}
	GUI_TextRu_Language(10, 86);
 800edb2:	2156      	movs	r1, #86	; 0x56
 800edb4:	200a      	movs	r0, #10
 800edb6:	f00b fb45 	bl	801a444 <GUI_TextRu_Language>
	GUI_TextRu_Russian(118, 86);
 800edba:	2156      	movs	r1, #86	; 0x56
 800edbc:	2076      	movs	r0, #118	; 0x76
 800edbe:	f00b fb73 	bl	801a4a8 <GUI_TextRu_Russian>
	GUI_Flag_Ru(218, 86);
 800edc2:	2156      	movs	r1, #86	; 0x56
 800edc4:	20da      	movs	r0, #218	; 0xda
 800edc6:	f006 fb4e 	bl	8015466 <GUI_Flag_Ru>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800edca:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800edce:	2378      	movs	r3, #120	; 0x78
 800edd0:	4619      	mov	r1, r3
 800edd2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800edd6:	9400      	str	r4, [sp, #0]
 800edd8:	200a      	movs	r0, #10
 800edda:	f00f fa41 	bl	801e260 <TFT_DrawLine>
	GUI_TextRu_Info(10, 145);
 800edde:	2191      	movs	r1, #145	; 0x91
 800ede0:	200a      	movs	r0, #10
 800ede2:	f00b fba9 	bl	801a538 <GUI_TextRu_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800ede6:	23b7      	movs	r3, #183	; 0xb7
 800ede8:	4619      	mov	r1, r3
 800edea:	f44f 7283 	mov.w	r2, #262	; 0x106
 800edee:	9400      	str	r4, [sp, #0]
 800edf0:	200a      	movs	r0, #10
 800edf2:	f00f fa35 	bl	801e260 <TFT_DrawLine>
	
	GUI_TextRu_Mode(10, 209);
 800edf6:	21d1      	movs	r1, #209	; 0xd1
 800edf8:	200a      	movs	r0, #10
 800edfa:	f00b fc3f 	bl	801a67c <GUI_TextRu_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800edfe:	4b21      	ldr	r3, [pc, #132]	; (800ee84 <GUI_OptionMenuRu+0xd4>)
 800ee00:	21ca      	movs	r1, #202	; 0xca
 800ee02:	781a      	ldrb	r2, [r3, #0]
 800ee04:	20b6      	movs	r0, #182	; 0xb6
 800ee06:	f006 faf5 	bl	80153f4 <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f00f fcb4 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800ee10:	2063      	movs	r0, #99	; 0x63
 800ee12:	f00f fcb7 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800ee16:	481c      	ldr	r0, [pc, #112]	; (800ee88 <GUI_OptionMenuRu+0xd8>)
 800ee18:	f00f fca8 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800ee1c:	2245      	movs	r2, #69	; 0x45
 800ee1e:	21d2      	movs	r1, #210	; 0xd2
 800ee20:	20e1      	movs	r0, #225	; 0xe1
 800ee22:	f00f fd6d 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800ee26:	224c      	movs	r2, #76	; 0x4c
 800ee28:	21d2      	movs	r1, #210	; 0xd2
 800ee2a:	209b      	movs	r0, #155	; 0x9b
 800ee2c:	f00f fd68 	bl	801e900 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800ee30:	23f8      	movs	r3, #248	; 0xf8
 800ee32:	4619      	mov	r1, r3
 800ee34:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ee38:	9400      	str	r4, [sp, #0]
 800ee3a:	200a      	movs	r0, #10
 800ee3c:	f00f fa10 	bl	801e260 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800ee40:	f240 1113 	movw	r1, #275	; 0x113
 800ee44:	200a      	movs	r0, #10
 800ee46:	f009 fdf5 	bl	8018a34 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800ee4a:	4b10      	ldr	r3, [pc, #64]	; (800ee8c <GUI_OptionMenuRu+0xdc>)
 800ee4c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800ee50:	781a      	ldrb	r2, [r3, #0]
 800ee52:	20b6      	movs	r0, #182	; 0xb6
 800ee54:	f006 fa74 	bl	8015340 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800ee58:	f240 1113 	movw	r1, #275	; 0x113
 800ee5c:	20de      	movs	r0, #222	; 0xde
 800ee5e:	f00a f929 	bl	80190b4 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800ee62:	f240 1113 	movw	r1, #275	; 0x113
 800ee66:	208c      	movs	r0, #140	; 0x8c
 800ee68:	f00a f948 	bl	80190fc <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800ee6c:	f240 1339 	movw	r3, #313	; 0x139
 800ee70:	9400      	str	r4, [sp, #0]
 800ee72:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ee76:	4619      	mov	r1, r3
 800ee78:	200a      	movs	r0, #10
 800ee7a:	f00f f9f1 	bl	801e260 <TFT_DrawLine>
}
 800ee7e:	b002      	add	sp, #8
 800ee80:	bd10      	pop	{r4, pc}
 800ee82:	bf00      	nop
 800ee84:	20000a48 	.word	0x20000a48
 800ee88:	200001b0 	.word	0x200001b0
 800ee8c:	2008c31a 	.word	0x2008c31a

0800ee90 <GUI_OptionMenuEn>:
void GUI_OptionMenuEn()
{
 800ee90:	b513      	push	{r0, r1, r4, lr}
	GUI_TextEn_Language(10, 88);
 800ee92:	2158      	movs	r1, #88	; 0x58
 800ee94:	200a      	movs	r0, #10
 800ee96:	f00a f9d1 	bl	801923c <GUI_TextEn_Language>
	GUI_TextEn_English(127, 88);
 800ee9a:	2158      	movs	r1, #88	; 0x58
 800ee9c:	207f      	movs	r0, #127	; 0x7f
 800ee9e:	f00a fa1b 	bl	80192d8 <GUI_TextEn_English>
	GUI_Flag_En(218, 86);
 800eea2:	2156      	movs	r1, #86	; 0x56
 800eea4:	20da      	movs	r0, #218	; 0xda
 800eea6:	f006 fb08 	bl	80154ba <GUI_Flag_En>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800eeaa:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800eeae:	2378      	movs	r3, #120	; 0x78
 800eeb0:	4619      	mov	r1, r3
 800eeb2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800eeb6:	9400      	str	r4, [sp, #0]
 800eeb8:	200a      	movs	r0, #10
 800eeba:	f00f f9d1 	bl	801e260 <TFT_DrawLine>
	GUI_TextEn_Info(10, 147);
 800eebe:	2193      	movs	r1, #147	; 0x93
 800eec0:	200a      	movs	r0, #10
 800eec2:	f00a fa51 	bl	8019368 <GUI_TextEn_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800eec6:	23b7      	movs	r3, #183	; 0xb7
 800eec8:	4619      	mov	r1, r3
 800eeca:	f44f 7283 	mov.w	r2, #262	; 0x106
 800eece:	9400      	str	r4, [sp, #0]
 800eed0:	200a      	movs	r0, #10
 800eed2:	f00f f9c5 	bl	801e260 <TFT_DrawLine>
	
	GUI_TextEn_Mode(10, 211);
 800eed6:	21d3      	movs	r1, #211	; 0xd3
 800eed8:	200a      	movs	r0, #10
 800eeda:	f00a fd93 	bl	8019a04 <GUI_TextEn_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800eede:	4b21      	ldr	r3, [pc, #132]	; (800ef64 <GUI_OptionMenuEn+0xd4>)
 800eee0:	21ca      	movs	r1, #202	; 0xca
 800eee2:	781a      	ldrb	r2, [r3, #0]
 800eee4:	20b6      	movs	r0, #182	; 0xb6
 800eee6:	f006 fa85 	bl	80153f4 <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800eeea:	4620      	mov	r0, r4
 800eeec:	f00f fc44 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800eef0:	2063      	movs	r0, #99	; 0x63
 800eef2:	f00f fc47 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800eef6:	481c      	ldr	r0, [pc, #112]	; (800ef68 <GUI_OptionMenuEn+0xd8>)
 800eef8:	f00f fc38 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800eefc:	2245      	movs	r2, #69	; 0x45
 800eefe:	21d2      	movs	r1, #210	; 0xd2
 800ef00:	20e1      	movs	r0, #225	; 0xe1
 800ef02:	f00f fcfd 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800ef06:	224c      	movs	r2, #76	; 0x4c
 800ef08:	21d2      	movs	r1, #210	; 0xd2
 800ef0a:	209b      	movs	r0, #155	; 0x9b
 800ef0c:	f00f fcf8 	bl	801e900 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800ef10:	23f8      	movs	r3, #248	; 0xf8
 800ef12:	4619      	mov	r1, r3
 800ef14:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ef18:	9400      	str	r4, [sp, #0]
 800ef1a:	200a      	movs	r0, #10
 800ef1c:	f00f f9a0 	bl	801e260 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800ef20:	f240 1113 	movw	r1, #275	; 0x113
 800ef24:	200a      	movs	r0, #10
 800ef26:	f009 fd85 	bl	8018a34 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800ef2a:	4b10      	ldr	r3, [pc, #64]	; (800ef6c <GUI_OptionMenuEn+0xdc>)
 800ef2c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800ef30:	781a      	ldrb	r2, [r3, #0]
 800ef32:	20b6      	movs	r0, #182	; 0xb6
 800ef34:	f006 fa04 	bl	8015340 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800ef38:	f240 1113 	movw	r1, #275	; 0x113
 800ef3c:	20de      	movs	r0, #222	; 0xde
 800ef3e:	f00a f8b9 	bl	80190b4 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800ef42:	f240 1113 	movw	r1, #275	; 0x113
 800ef46:	208c      	movs	r0, #140	; 0x8c
 800ef48:	f00a f8d8 	bl	80190fc <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800ef4c:	f240 1339 	movw	r3, #313	; 0x139
 800ef50:	9400      	str	r4, [sp, #0]
 800ef52:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ef56:	4619      	mov	r1, r3
 800ef58:	200a      	movs	r0, #10
 800ef5a:	f00f f981 	bl	801e260 <TFT_DrawLine>
}
 800ef5e:	b002      	add	sp, #8
 800ef60:	bd10      	pop	{r4, pc}
 800ef62:	bf00      	nop
 800ef64:	20000a48 	.word	0x20000a48
 800ef68:	200001b0 	.word	0x200001b0
 800ef6c:	2008c31a 	.word	0x2008c31a

0800ef70 <GUI_Title_Screen>:
void GUI_Title_Screen()
{
 800ef70:	b507      	push	{r0, r1, r2, lr}
	TFT_FillScreen_DMA(0x0084);
 800ef72:	2084      	movs	r0, #132	; 0x84
 800ef74:	f00e ffd2 	bl	801df1c <TFT_FillScreen_DMA>
	GUI_TitleString_Name(80, 330);
 800ef78:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800ef7c:	2050      	movs	r0, #80	; 0x50
 800ef7e:	f00b f9c3 	bl	801a308 <GUI_TitleString_Name>
	GUI_TitleString_Version(180, 420, VERSION);
 800ef82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ef86:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800ef8a:	20b4      	movs	r0, #180	; 0xb4
 800ef8c:	f00b fa16 	bl	801a3bc <GUI_TitleString_Version>
	sImage bmTKA_logo_Flash = {
 800ef90:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800ef94:	f8ad 3000 	strh.w	r3, [sp]
 800ef98:	23b5      	movs	r3, #181	; 0xb5
 800ef9a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ef9e:	4b08      	ldr	r3, [pc, #32]	; (800efc0 <GUI_Title_Screen+0x50>)
 800efa0:	9301      	str	r3, [sp, #4]
			TKA_LOGO_BMP_SIZEX, // xSize
			TKA_LOGO_BMP_SIZEY, // ySize
			(uint16_t *)bmp,  // Pointer to picture data
		};
	TFT_DrawBitmap(0, 100, bmTKA_logo_Flash);
 800efa2:	ab02      	add	r3, sp, #8
 800efa4:	e913 000c 	ldmdb	r3, {r2, r3}
 800efa8:	2164      	movs	r1, #100	; 0x64
 800efaa:	2000      	movs	r0, #0
 800efac:	f00f fbb7 	bl	801e71e <TFT_DrawBitmap>
	Measure_Color_xy |= CIE_xy_1931_1964;
 800efb0:	4a04      	ldr	r2, [pc, #16]	; (800efc4 <GUI_Title_Screen+0x54>)
 800efb2:	7813      	ldrb	r3, [r2, #0]
 800efb4:	f043 0301 	orr.w	r3, r3, #1
 800efb8:	7013      	strb	r3, [r2, #0]
}
 800efba:	b003      	add	sp, #12
 800efbc:	f85d fb04 	ldr.w	pc, [sp], #4
 800efc0:	200511f6 	.word	0x200511f6
 800efc4:	2000527c 	.word	0x2000527c

0800efc8 <Measure_Elements_Draw>:
		Prev_Inf_Screen = Measure_Screen;
		preGUI_screen_state = Measure_Screen;
}

void Measure_Elements_Draw(uint8_t Measure_Number)
{	
 800efc8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t Y = 70, limit = 410;
	
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
	{
		screen_count_old = screen_count;
 800efcc:	4da4      	ldr	r5, [pc, #656]	; (800f260 <Measure_Elements_Draw+0x298>)
 800efce:	4fa5      	ldr	r7, [pc, #660]	; (800f264 <Measure_Elements_Draw+0x29c>)
{	
 800efd0:	4606      	mov	r6, r0
	uint16_t Y = 70, limit = 410;
 800efd2:	2446      	movs	r4, #70	; 0x46
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800efd4:	2e0e      	cmp	r6, #14
 800efd6:	f200 8099 	bhi.w	800f10c <Measure_Elements_Draw+0x144>
		screen_count_old = screen_count;
 800efda:	782b      	ldrb	r3, [r5, #0]
 800efdc:	703b      	strb	r3, [r7, #0]
		
		switch(state_i){
 800efde:	2e0c      	cmp	r6, #12
 800efe0:	f200 808c 	bhi.w	800f0fc <Measure_Elements_Draw+0x134>
 800efe4:	e8df f016 	tbh	[pc, r6, lsl #1]
 800efe8:	0035000d 	.word	0x0035000d
 800efec:	0060004c 	.word	0x0060004c
 800eff0:	00ba0095 	.word	0x00ba0095
 800eff4:	00fc00d2 	.word	0x00fc00d2
 800eff8:	01680124 	.word	0x01680124
 800effc:	019a0183 	.word	0x019a0183
 800f000:	01ba      	.short	0x01ba
					case 0: if(Measure_Field&Illuminance){
 800f002:	4a99      	ldr	r2, [pc, #612]	; (800f268 <Measure_Elements_Draw+0x2a0>)
 800f004:	8812      	ldrh	r2, [r2, #0]
 800f006:	07d2      	lsls	r2, r2, #31
 800f008:	d578      	bpl.n	800f0fc <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f00a:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f00e:	f280 81b9 	bge.w	800f384 <Measure_Elements_Draw+0x3bc>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f012:	4b96      	ldr	r3, [pc, #600]	; (800f26c <Measure_Elements_Draw+0x2a4>)
 800f014:	4996      	ldr	r1, [pc, #600]	; (800f270 <Measure_Elements_Draw+0x2a8>)
 800f016:	781a      	ldrb	r2, [r3, #0]
 800f018:	4b96      	ldr	r3, [pc, #600]	; (800f274 <Measure_Elements_Draw+0x2ac>)
 800f01a:	4897      	ldr	r0, [pc, #604]	; (800f278 <Measure_Elements_Draw+0x2b0>)
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	b17a      	cbz	r2, 800f040 <Measure_Elements_Draw+0x78>
 800f020:	7802      	ldrb	r2, [r0, #0]
 800f022:	9200      	str	r2, [sp, #0]
 800f024:	ed91 0a00 	vldr	s0, [r1]
 800f028:	2200      	movs	r2, #0
 800f02a:	4621      	mov	r1, r4
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
									Y+=10;
							} else {screen_count++;}} break;
				case 1: if(Measure_Field&Irradiance){
					if(Y+35 <= limit){
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f02c:	2014      	movs	r0, #20
 800f02e:	f006 fb65 	bl	80156fc <GUI_Text_E_Measure>
									Y+=10;
							}else {screen_count++;}} break;
				case 12: if(Measure_Field&SP_measure){
					if(Y+35 <= limit){
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
									Y+=35;
 800f032:	f104 0323 	add.w	r3, r4, #35	; 0x23
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f036:	f64f 72ff 	movw	r2, #65535	; 0xffff
									Y+=35;
 800f03a:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f03c:	9200      	str	r2, [sp, #0]
 800f03e:	e085      	b.n	800f14c <Measure_Elements_Draw+0x184>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f040:	7800      	ldrb	r0, [r0, #0]
 800f042:	9000      	str	r0, [sp, #0]
 800f044:	ed91 0a00 	vldr	s0, [r1]
 800f048:	4621      	mov	r1, r4
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f04a:	2014      	movs	r0, #20
 800f04c:	f006 fd70 	bl	8015b30 <GUI_Text_L_Measure>
 800f050:	e7ef      	b.n	800f032 <Measure_Elements_Draw+0x6a>
				case 1: if(Measure_Field&Irradiance){
 800f052:	4a85      	ldr	r2, [pc, #532]	; (800f268 <Measure_Elements_Draw+0x2a0>)
 800f054:	8812      	ldrh	r2, [r2, #0]
 800f056:	0790      	lsls	r0, r2, #30
 800f058:	d550      	bpl.n	800f0fc <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f05a:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f05e:	f280 8191 	bge.w	800f384 <Measure_Elements_Draw+0x3bc>
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f062:	4b82      	ldr	r3, [pc, #520]	; (800f26c <Measure_Elements_Draw+0x2a4>)
 800f064:	4a84      	ldr	r2, [pc, #528]	; (800f278 <Measure_Elements_Draw+0x2b0>)
 800f066:	7818      	ldrb	r0, [r3, #0]
 800f068:	4b82      	ldr	r3, [pc, #520]	; (800f274 <Measure_Elements_Draw+0x2ac>)
 800f06a:	4984      	ldr	r1, [pc, #528]	; (800f27c <Measure_Elements_Draw+0x2b4>)
 800f06c:	7812      	ldrb	r2, [r2, #0]
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	9200      	str	r2, [sp, #0]
 800f072:	ed91 0a00 	vldr	s0, [r1]
 800f076:	2201      	movs	r2, #1
 800f078:	4621      	mov	r1, r4
 800f07a:	2800      	cmp	r0, #0
 800f07c:	d0e5      	beq.n	800f04a <Measure_Elements_Draw+0x82>
 800f07e:	e7d5      	b.n	800f02c <Measure_Elements_Draw+0x64>
				case 2: if(Measure_Field&PPFD){
 800f080:	4a79      	ldr	r2, [pc, #484]	; (800f268 <Measure_Elements_Draw+0x2a0>)
 800f082:	8812      	ldrh	r2, [r2, #0]
 800f084:	0751      	lsls	r1, r2, #29
 800f086:	d539      	bpl.n	800f0fc <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f088:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f08c:	f280 817a 	bge.w	800f384 <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPF_Measure(20, Y, PPFD_PPL_Measure, exp_start, exp_set);
 800f090:	497b      	ldr	r1, [pc, #492]	; (800f280 <Measure_Elements_Draw+0x2b8>)
 800f092:	4b79      	ldr	r3, [pc, #484]	; (800f278 <Measure_Elements_Draw+0x2b0>)
 800f094:	4a77      	ldr	r2, [pc, #476]	; (800f274 <Measure_Elements_Draw+0x2ac>)
 800f096:	ed91 0a00 	vldr	s0, [r1]
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	7812      	ldrb	r2, [r2, #0]
 800f09e:	4621      	mov	r1, r4
 800f0a0:	2014      	movs	r0, #20
 800f0a2:	f006 ff23 	bl	8015eec <GUI_Text_PPF_Measure>
 800f0a6:	e7c4      	b.n	800f032 <Measure_Elements_Draw+0x6a>
				case 3: if(Measure_Field&PPFD_BGR){
 800f0a8:	4a6f      	ldr	r2, [pc, #444]	; (800f268 <Measure_Elements_Draw+0x2a0>)
 800f0aa:	8812      	ldrh	r2, [r2, #0]
 800f0ac:	0712      	lsls	r2, r2, #28
 800f0ae:	d525      	bpl.n	800f0fc <Measure_Elements_Draw+0x134>
						if(Y+95 <= limit){
 800f0b0:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
 800f0b4:	f280 8166 	bge.w	800f384 <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPFRGB_Measure(20, Y, PPFD_PPL_Red_Measure, PPFD_PPL_Green_Measure, PPFD_PPL_Blue_Measure, PPFD_PPL_Far_Red_Measure, exp_start, exp_set);
 800f0b8:	4972      	ldr	r1, [pc, #456]	; (800f284 <Measure_Elements_Draw+0x2bc>)
 800f0ba:	4b6f      	ldr	r3, [pc, #444]	; (800f278 <Measure_Elements_Draw+0x2b0>)
 800f0bc:	edd1 1a00 	vldr	s3, [r1]
 800f0c0:	4971      	ldr	r1, [pc, #452]	; (800f288 <Measure_Elements_Draw+0x2c0>)
 800f0c2:	4a6c      	ldr	r2, [pc, #432]	; (800f274 <Measure_Elements_Draw+0x2ac>)
 800f0c4:	ed91 1a00 	vldr	s2, [r1]
 800f0c8:	4970      	ldr	r1, [pc, #448]	; (800f28c <Measure_Elements_Draw+0x2c4>)
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	edd1 0a00 	vldr	s1, [r1]
 800f0d0:	496f      	ldr	r1, [pc, #444]	; (800f290 <Measure_Elements_Draw+0x2c8>)
 800f0d2:	7812      	ldrb	r2, [r2, #0]
 800f0d4:	ed91 0a00 	vldr	s0, [r1]
 800f0d8:	2014      	movs	r0, #20
 800f0da:	4621      	mov	r1, r4
 800f0dc:	f007 f886 	bl	80161ec <GUI_Text_PPFRGB_Measure>
									Y+=95;
 800f0e0:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 800f0e4:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f0e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0ea:	9200      	str	r2, [sp, #0]
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f0f2:	200a      	movs	r0, #10
 800f0f4:	f00f f8b4 	bl	801e260 <TFT_DrawLine>
									Y+=10;
 800f0f8:	3469      	adds	r4, #105	; 0x69
									Y+=10;
 800f0fa:	b2a4      	uxth	r4, r4
							}else {screen_count++;}} break;
			default: break;
		}

		if (screen_count != screen_count_old)
 800f0fc:	782b      	ldrb	r3, [r5, #0]
 800f0fe:	783a      	ldrb	r2, [r7, #0]
 800f100:	429a      	cmp	r2, r3
 800f102:	f000 8142 	beq.w	800f38a <Measure_Elements_Draw+0x3c2>
			{
				state_Measure_Elements = state_i;
 800f106:	4a63      	ldr	r2, [pc, #396]	; (800f294 <Measure_Elements_Draw+0x2cc>)
				screen_count_old = screen_count;
 800f108:	703b      	strb	r3, [r7, #0]
				state_Measure_Elements = state_i;
 800f10a:	7016      	strb	r6, [r2, #0]
				break;
			}	
			
	}
	
}
 800f10c:	b004      	add	sp, #16
 800f10e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				case 4: if(Measure_Field&CCT){
 800f112:	4a55      	ldr	r2, [pc, #340]	; (800f268 <Measure_Elements_Draw+0x2a0>)
 800f114:	8812      	ldrh	r2, [r2, #0]
 800f116:	05d0      	lsls	r0, r2, #23
 800f118:	d5f0      	bpl.n	800f0fc <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f11a:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f11e:	f280 8131 	bge.w	800f384 <Measure_Elements_Draw+0x3bc>
							GUI_Text_CCT_Measure(20, Y,  Tc_Measure == 0xFFFF ? 0 : Tc_Measure, exp_start, exp_set); //
 800f122:	4b5d      	ldr	r3, [pc, #372]	; (800f298 <Measure_Elements_Draw+0x2d0>)
 800f124:	4954      	ldr	r1, [pc, #336]	; (800f278 <Measure_Elements_Draw+0x2b0>)
 800f126:	881a      	ldrh	r2, [r3, #0]
 800f128:	4b52      	ldr	r3, [pc, #328]	; (800f274 <Measure_Elements_Draw+0x2ac>)
 800f12a:	7809      	ldrb	r1, [r1, #0]
 800f12c:	781b      	ldrb	r3, [r3, #0]
 800f12e:	9100      	str	r1, [sp, #0]
 800f130:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800f134:	4542      	cmp	r2, r8
 800f136:	bf08      	it	eq
 800f138:	2200      	moveq	r2, #0
 800f13a:	4621      	mov	r1, r4
 800f13c:	2014      	movs	r0, #20
 800f13e:	f007 ffad 	bl	801709c <GUI_Text_CCT_Measure>
									Y+=35;
 800f142:	f104 0323 	add.w	r3, r4, #35	; 0x23
 800f146:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f148:	f8cd 8000 	str.w	r8, [sp]
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f14c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f150:	4619      	mov	r1, r3
 800f152:	200a      	movs	r0, #10
 800f154:	f00f f884 	bl	801e260 <TFT_DrawLine>
									Y+=10;
 800f158:	342d      	adds	r4, #45	; 0x2d
 800f15a:	e7ce      	b.n	800f0fa <Measure_Elements_Draw+0x132>
				case 5: if(Measure_Field&delta_E){
 800f15c:	4a42      	ldr	r2, [pc, #264]	; (800f268 <Measure_Elements_Draw+0x2a0>)
 800f15e:	8812      	ldrh	r2, [r2, #0]
 800f160:	0511      	lsls	r1, r2, #20
 800f162:	d5cb      	bpl.n	800f0fc <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f164:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f168:	f280 810c 	bge.w	800f384 <Measure_Elements_Draw+0x3bc>
									GUI_Text_deltaE_Measure(20, Y, delta_Eab_Measure, exp_start, exp_set);
 800f16c:	4b4b      	ldr	r3, [pc, #300]	; (800f29c <Measure_Elements_Draw+0x2d4>)
 800f16e:	4a41      	ldr	r2, [pc, #260]	; (800f274 <Measure_Elements_Draw+0x2ac>)
 800f170:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f174:	7812      	ldrb	r2, [r2, #0]
 800f176:	ee00 3a10 	vmov	s0, r3
 800f17a:	4b3f      	ldr	r3, [pc, #252]	; (800f278 <Measure_Elements_Draw+0x2b0>)
 800f17c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f180:	781b      	ldrb	r3, [r3, #0]
 800f182:	4621      	mov	r1, r4
 800f184:	2014      	movs	r0, #20
 800f186:	f008 f981 	bl	801748c <GUI_Text_deltaE_Measure>
 800f18a:	e752      	b.n	800f032 <Measure_Elements_Draw+0x6a>
				case 6: if(Measure_Field&CIE_XYZ){
 800f18c:	4a36      	ldr	r2, [pc, #216]	; (800f268 <Measure_Elements_Draw+0x2a0>)
 800f18e:	8812      	ldrh	r2, [r2, #0]
 800f190:	06d2      	lsls	r2, r2, #27
 800f192:	d5b3      	bpl.n	800f0fc <Measure_Elements_Draw+0x134>
						if(Y+105 <= limit){
 800f194:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f198:	f280 80f4 	bge.w	800f384 <Measure_Elements_Draw+0x3bc>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f19c:	4b40      	ldr	r3, [pc, #256]	; (800f2a0 <Measure_Elements_Draw+0x2d8>)
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	b9e3      	cbnz	r3, 800f1dc <Measure_Elements_Draw+0x214>
 800f1a2:	4940      	ldr	r1, [pc, #256]	; (800f2a4 <Measure_Elements_Draw+0x2dc>)
 800f1a4:	4834      	ldr	r0, [pc, #208]	; (800f278 <Measure_Elements_Draw+0x2b0>)
 800f1a6:	880a      	ldrh	r2, [r1, #0]
 800f1a8:	7800      	ldrb	r0, [r0, #0]
 800f1aa:	884b      	ldrh	r3, [r1, #2]
 800f1ac:	8889      	ldrh	r1, [r1, #4]
 800f1ae:	9002      	str	r0, [sp, #8]
 800f1b0:	4830      	ldr	r0, [pc, #192]	; (800f274 <Measure_Elements_Draw+0x2ac>)
 800f1b2:	7800      	ldrb	r0, [r0, #0]
 800f1b4:	9001      	str	r0, [sp, #4]
 800f1b6:	9100      	str	r1, [sp, #0]
 800f1b8:	2014      	movs	r0, #20
 800f1ba:	4621      	mov	r1, r4
 800f1bc:	f007 fc3c 	bl	8016a38 <GUI_Text_XYZ_Measure>
									Y+=105;
 800f1c0:	f104 0369 	add.w	r3, r4, #105	; 0x69
 800f1c4:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f1c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1ca:	9200      	str	r2, [sp, #0]
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f1d2:	200a      	movs	r0, #10
 800f1d4:	f00f f844 	bl	801e260 <TFT_DrawLine>
									Y+=10;
 800f1d8:	3473      	adds	r4, #115	; 0x73
 800f1da:	e78e      	b.n	800f0fa <Measure_Elements_Draw+0x132>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f1dc:	4932      	ldr	r1, [pc, #200]	; (800f2a8 <Measure_Elements_Draw+0x2e0>)
 800f1de:	e7e1      	b.n	800f1a4 <Measure_Elements_Draw+0x1dc>
				case 7: if(Measure_Field&CIE_xy){
 800f1e0:	4a21      	ldr	r2, [pc, #132]	; (800f268 <Measure_Elements_Draw+0x2a0>)
 800f1e2:	8812      	ldrh	r2, [r2, #0]
 800f1e4:	0690      	lsls	r0, r2, #26
 800f1e6:	d589      	bpl.n	800f0fc <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f1e8:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f1ec:	f300 80ca 	bgt.w	800f384 <Measure_Elements_Draw+0x3bc>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f1f0:	4b2b      	ldr	r3, [pc, #172]	; (800f2a0 <Measure_Elements_Draw+0x2d8>)
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	b9d3      	cbnz	r3, 800f22c <Measure_Elements_Draw+0x264>
 800f1f6:	4b2d      	ldr	r3, [pc, #180]	; (800f2ac <Measure_Elements_Draw+0x2e4>)
 800f1f8:	ed93 0a00 	vldr	s0, [r3]
 800f1fc:	edd3 0a01 	vldr	s1, [r3, #4]
 800f200:	4a1c      	ldr	r2, [pc, #112]	; (800f274 <Measure_Elements_Draw+0x2ac>)
 800f202:	4b1d      	ldr	r3, [pc, #116]	; (800f278 <Measure_Elements_Draw+0x2b0>)
 800f204:	7812      	ldrb	r2, [r2, #0]
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	4621      	mov	r1, r4
 800f20a:	2014      	movs	r0, #20
 800f20c:	f007 fda2 	bl	8016d54 <GUI_Text_xy_Measure>
									Y+=70;
 800f210:	f104 0346 	add.w	r3, r4, #70	; 0x46
 800f214:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f21a:	9200      	str	r2, [sp, #0]
 800f21c:	4619      	mov	r1, r3
 800f21e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f222:	200a      	movs	r0, #10
 800f224:	f00f f81c 	bl	801e260 <TFT_DrawLine>
									Y+=10;
 800f228:	3450      	adds	r4, #80	; 0x50
 800f22a:	e766      	b.n	800f0fa <Measure_Elements_Draw+0x132>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f22c:	4b20      	ldr	r3, [pc, #128]	; (800f2b0 <Measure_Elements_Draw+0x2e8>)
 800f22e:	e7e3      	b.n	800f1f8 <Measure_Elements_Draw+0x230>
				case 8: if(Measure_Field&CIE_Luv){
 800f230:	4a0d      	ldr	r2, [pc, #52]	; (800f268 <Measure_Elements_Draw+0x2a0>)
 800f232:	8812      	ldrh	r2, [r2, #0]
 800f234:	0651      	lsls	r1, r2, #25
 800f236:	f57f af61 	bpl.w	800f0fc <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f23a:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f23e:	f300 80a1 	bgt.w	800f384 <Measure_Elements_Draw+0x3bc>
									GUI_Text_uv_Measure(20, Y, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 800f242:	491c      	ldr	r1, [pc, #112]	; (800f2b4 <Measure_Elements_Draw+0x2ec>)
 800f244:	4b0c      	ldr	r3, [pc, #48]	; (800f278 <Measure_Elements_Draw+0x2b0>)
 800f246:	4a0b      	ldr	r2, [pc, #44]	; (800f274 <Measure_Elements_Draw+0x2ac>)
 800f248:	edd1 0a01 	vldr	s1, [r1, #4]
 800f24c:	ed91 0a00 	vldr	s0, [r1]
 800f250:	781b      	ldrb	r3, [r3, #0]
 800f252:	7812      	ldrb	r2, [r2, #0]
 800f254:	4621      	mov	r1, r4
 800f256:	2014      	movs	r0, #20
 800f258:	f007 fe3e 	bl	8016ed8 <GUI_Text_uv_Measure>
 800f25c:	e7d8      	b.n	800f210 <Measure_Elements_Draw+0x248>
 800f25e:	bf00      	nop
 800f260:	200052a3 	.word	0x200052a3
 800f264:	200052a4 	.word	0x200052a4
 800f268:	2000527e 	.word	0x2000527e
 800f26c:	20000a48 	.word	0x20000a48
 800f270:	2009150c 	.word	0x2009150c
 800f274:	20000a4d 	.word	0x20000a4d
 800f278:	20000a4c 	.word	0x20000a4c
 800f27c:	20090f78 	.word	0x20090f78
 800f280:	20090f80 	.word	0x20090f80
 800f284:	20090f7c 	.word	0x20090f7c
 800f288:	20091064 	.word	0x20091064
 800f28c:	200913e8 	.word	0x200913e8
 800f290:	20091324 	.word	0x20091324
 800f294:	200052a8 	.word	0x200052a8
 800f298:	200501e8 	.word	0x200501e8
 800f29c:	2008c316 	.word	0x2008c316
 800f2a0:	2000527c 	.word	0x2000527c
 800f2a4:	2008adcc 	.word	0x2008adcc
 800f2a8:	2008adc6 	.word	0x2008adc6
 800f2ac:	2008adec 	.word	0x2008adec
 800f2b0:	2008ade4 	.word	0x2008ade4
 800f2b4:	2008addc 	.word	0x2008addc
				case 9: if(Measure_Field&CIE_Lab){
 800f2b8:	4a35      	ldr	r2, [pc, #212]	; (800f390 <Measure_Elements_Draw+0x3c8>)
 800f2ba:	8812      	ldrh	r2, [r2, #0]
 800f2bc:	0612      	lsls	r2, r2, #24
 800f2be:	f57f af1d 	bpl.w	800f0fc <Measure_Elements_Draw+0x134>
					if(Y+105 <= limit){
 800f2c2:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f2c6:	da5d      	bge.n	800f384 <Measure_Elements_Draw+0x3bc>
									GUI_Text_LAB_Measure(20, Y, colorimetry_LAB[0],colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 800f2c8:	4832      	ldr	r0, [pc, #200]	; (800f394 <Measure_Elements_Draw+0x3cc>)
 800f2ca:	4933      	ldr	r1, [pc, #204]	; (800f398 <Measure_Elements_Draw+0x3d0>)
 800f2cc:	7800      	ldrb	r0, [r0, #0]
 800f2ce:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f2d2:	f9b1 2000 	ldrsh.w	r2, [r1]
 800f2d6:	9002      	str	r0, [sp, #8]
 800f2d8:	4830      	ldr	r0, [pc, #192]	; (800f39c <Measure_Elements_Draw+0x3d4>)
 800f2da:	7800      	ldrb	r0, [r0, #0]
 800f2dc:	9001      	str	r0, [sp, #4]
 800f2de:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800f2e2:	9100      	str	r1, [sp, #0]
 800f2e4:	2014      	movs	r0, #20
 800f2e6:	4621      	mov	r1, r4
 800f2e8:	f008 fdae 	bl	8017e48 <GUI_Text_LAB_Measure>
 800f2ec:	e768      	b.n	800f1c0 <Measure_Elements_Draw+0x1f8>
				case 10: if(Measure_Field&lambda_d){
 800f2ee:	4a28      	ldr	r2, [pc, #160]	; (800f390 <Measure_Elements_Draw+0x3c8>)
 800f2f0:	8812      	ldrh	r2, [r2, #0]
 800f2f2:	0590      	lsls	r0, r2, #22
 800f2f4:	f57f af02 	bpl.w	800f0fc <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f2f8:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f2fc:	da42      	bge.n	800f384 <Measure_Elements_Draw+0x3bc>
									GUI_Text_lambdaD_Measure(20, Y, lambda_d_Measure, exp_start, exp_set);
 800f2fe:	4b28      	ldr	r3, [pc, #160]	; (800f3a0 <Measure_Elements_Draw+0x3d8>)
 800f300:	4a26      	ldr	r2, [pc, #152]	; (800f39c <Measure_Elements_Draw+0x3d4>)
 800f302:	881b      	ldrh	r3, [r3, #0]
 800f304:	7812      	ldrb	r2, [r2, #0]
 800f306:	ee00 3a10 	vmov	s0, r3
 800f30a:	4b22      	ldr	r3, [pc, #136]	; (800f394 <Measure_Elements_Draw+0x3cc>)
 800f30c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800f310:	781b      	ldrb	r3, [r3, #0]
 800f312:	4621      	mov	r1, r4
 800f314:	2014      	movs	r0, #20
 800f316:	f007 ffbb 	bl	8017290 <GUI_Text_lambdaD_Measure>
 800f31a:	e68a      	b.n	800f032 <Measure_Elements_Draw+0x6a>
				case 11: if(Measure_Field&EbEr){
 800f31c:	4a1c      	ldr	r2, [pc, #112]	; (800f390 <Measure_Elements_Draw+0x3c8>)
 800f31e:	8812      	ldrh	r2, [r2, #0]
 800f320:	04d1      	lsls	r1, r2, #19
 800f322:	f57f aeeb 	bpl.w	800f0fc <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f326:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f32a:	dc2b      	bgt.n	800f384 <Measure_Elements_Draw+0x3bc>
						Mode_EL ?	 GUI_Text_EbEr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set):GUI_Text_LbLr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set); 
 800f32c:	4b1d      	ldr	r3, [pc, #116]	; (800f3a4 <Measure_Elements_Draw+0x3dc>)
 800f32e:	481e      	ldr	r0, [pc, #120]	; (800f3a8 <Measure_Elements_Draw+0x3e0>)
 800f330:	491e      	ldr	r1, [pc, #120]	; (800f3ac <Measure_Elements_Draw+0x3e4>)
 800f332:	f893 e000 	ldrb.w	lr, [r3]
 800f336:	4a19      	ldr	r2, [pc, #100]	; (800f39c <Measure_Elements_Draw+0x3d4>)
 800f338:	4b16      	ldr	r3, [pc, #88]	; (800f394 <Measure_Elements_Draw+0x3cc>)
 800f33a:	edd0 0a00 	vldr	s1, [r0]
 800f33e:	ed91 0a00 	vldr	s0, [r1]
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	7812      	ldrb	r2, [r2, #0]
 800f346:	4621      	mov	r1, r4
 800f348:	2014      	movs	r0, #20
 800f34a:	f1be 0f00 	cmp.w	lr, #0
 800f34e:	d002      	beq.n	800f356 <Measure_Elements_Draw+0x38e>
 800f350:	f008 f9a0 	bl	8017694 <GUI_Text_EbEr_Measure>
 800f354:	e75c      	b.n	800f210 <Measure_Elements_Draw+0x248>
 800f356:	f008 fb25 	bl	80179a4 <GUI_Text_LbLr_Measure>
 800f35a:	e759      	b.n	800f210 <Measure_Elements_Draw+0x248>
				case 12: if(Measure_Field&SP_measure){
 800f35c:	4a0c      	ldr	r2, [pc, #48]	; (800f390 <Measure_Elements_Draw+0x3c8>)
 800f35e:	8812      	ldrh	r2, [r2, #0]
 800f360:	0492      	lsls	r2, r2, #18
 800f362:	f57f aecb 	bpl.w	800f0fc <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f366:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f36a:	da0b      	bge.n	800f384 <Measure_Elements_Draw+0x3bc>
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
 800f36c:	4910      	ldr	r1, [pc, #64]	; (800f3b0 <Measure_Elements_Draw+0x3e8>)
 800f36e:	4b09      	ldr	r3, [pc, #36]	; (800f394 <Measure_Elements_Draw+0x3cc>)
 800f370:	4a0a      	ldr	r2, [pc, #40]	; (800f39c <Measure_Elements_Draw+0x3d4>)
 800f372:	ed91 0a00 	vldr	s0, [r1]
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	7812      	ldrb	r2, [r2, #0]
 800f37a:	4621      	mov	r1, r4
 800f37c:	2014      	movs	r0, #20
 800f37e:	f008 fc9d 	bl	8017cbc <GUI_Text_S_P_Measure>
 800f382:	e656      	b.n	800f032 <Measure_Elements_Draw+0x6a>
							}else {screen_count++;}} break;
 800f384:	3301      	adds	r3, #1
 800f386:	702b      	strb	r3, [r5, #0]
 800f388:	e6b8      	b.n	800f0fc <Measure_Elements_Draw+0x134>
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800f38a:	3601      	adds	r6, #1
 800f38c:	b2f6      	uxtb	r6, r6
 800f38e:	e621      	b.n	800efd4 <Measure_Elements_Draw+0xc>
 800f390:	2000527e 	.word	0x2000527e
 800f394:	20000a4c 	.word	0x20000a4c
 800f398:	2008adc0 	.word	0x2008adc0
 800f39c:	20000a4d 	.word	0x20000a4d
 800f3a0:	200913e4 	.word	0x200913e4
 800f3a4:	20000a48 	.word	0x20000a48
 800f3a8:	20091508 	.word	0x20091508
 800f3ac:	20091504 	.word	0x20091504
 800f3b0:	20091060 	.word	0x20091060

0800f3b4 <GUI_Information_Screen>:
	TFT_FillScreen_DMA(TFT_Red);

}

void GUI_Information_Screen()
{
 800f3b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f3b6:	4b1e      	ldr	r3, [pc, #120]	; (800f430 <GUI_Information_Screen+0x7c>)
 800f3b8:	4a1e      	ldr	r2, [pc, #120]	; (800f434 <GUI_Information_Screen+0x80>)
 800f3ba:	781b      	ldrb	r3, [r3, #0]
 800f3bc:	7812      	ldrb	r2, [r2, #0]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d034      	beq.n	800f42c <GUI_Information_Screen+0x78>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f3c2:	2063      	movs	r0, #99	; 0x63
 800f3c4:	f00e fdaa 	bl	801df1c <TFT_FillScreen_DMA>
		if(Language_status == En){
 800f3c8:	4b1b      	ldr	r3, [pc, #108]	; (800f438 <GUI_Information_Screen+0x84>)
 800f3ca:	491c      	ldr	r1, [pc, #112]	; (800f43c <GUI_Information_Screen+0x88>)
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	4a1c      	ldr	r2, [pc, #112]	; (800f440 <GUI_Information_Screen+0x8c>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f3d0:	8809      	ldrh	r1, [r1, #0]
 800f3d2:	7812      	ldrb	r2, [r2, #0]
 800f3d4:	4d1b      	ldr	r5, [pc, #108]	; (800f444 <GUI_Information_Screen+0x90>)
 800f3d6:	4c1c      	ldr	r4, [pc, #112]	; (800f448 <GUI_Information_Screen+0x94>)
		if(Language_status == En){
 800f3d8:	2b01      	cmp	r3, #1
 800f3da:	4b1c      	ldr	r3, [pc, #112]	; (800f44c <GUI_Information_Screen+0x98>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	9100      	str	r1, [sp, #0]
 800f3e0:	f04f 0100 	mov.w	r1, #0
 800f3e4:	4608      	mov	r0, r1
		if(Language_status == En){
 800f3e6:	d110      	bne.n	800f40a <GUI_Information_Screen+0x56>
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f3e8:	f00a fe22 	bl	801a030 <GUI_TextEn_Info_Callibration>
			GUI_TextEn_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800f3ec:	2100      	movs	r1, #0
 800f3ee:	4608      	mov	r0, r1
 800f3f0:	882b      	ldrh	r3, [r5, #0]
 800f3f2:	8822      	ldrh	r2, [r4, #0]
 800f3f4:	f00a fe9e 	bl	801a134 <GUI_TextEn_Info_Serial>
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f3fe:	4608      	mov	r0, r1
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
			GUI_TextRu_Info_Ver(0, 0, VERSION);
		}
	}
}
 800f400:	b003      	add	sp, #12
 800f402:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800f406:	f00a bf0b 	b.w	801a220 <GUI_TextEn_Info_Ver>
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f40a:	f00b faf7 	bl	801a9fc <GUI_TextRu_Info_Callibration>
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800f40e:	2100      	movs	r1, #0
 800f410:	4608      	mov	r0, r1
 800f412:	882b      	ldrh	r3, [r5, #0]
 800f414:	8822      	ldrh	r2, [r4, #0]
 800f416:	f00b fbaf 	bl	801ab78 <GUI_TextRu_Info_Serial>
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800f41a:	2100      	movs	r1, #0
 800f41c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f420:	4608      	mov	r0, r1
}
 800f422:	b003      	add	sp, #12
 800f424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800f428:	f00b bc20 	b.w	801ac6c <GUI_TextRu_Info_Ver>
}
 800f42c:	b003      	add	sp, #12
 800f42e:	bd30      	pop	{r4, r5, pc}
 800f430:	2000022a 	.word	0x2000022a
 800f434:	20005279 	.word	0x20005279
 800f438:	2000527b 	.word	0x2000527b
 800f43c:	20091290 	.word	0x20091290
 800f440:	20090f70 	.word	0x20090f70
 800f444:	20091338 	.word	0x20091338
 800f448:	20090f74 	.word	0x20090f74
 800f44c:	20090f84 	.word	0x20090f84

0800f450 <GUI_SD_Write_Screen>:

void GUI_SD_Write_Screen()
{
 800f450:	b537      	push	{r0, r1, r2, r4, r5, lr}
	
	if(preGUI_screen_state != GUI_screen_state){
 800f452:	4b29      	ldr	r3, [pc, #164]	; (800f4f8 <GUI_SD_Write_Screen+0xa8>)
 800f454:	4d29      	ldr	r5, [pc, #164]	; (800f4fc <GUI_SD_Write_Screen+0xac>)
 800f456:	781a      	ldrb	r2, [r3, #0]
 800f458:	7829      	ldrb	r1, [r5, #0]
 800f45a:	4291      	cmp	r1, r2
 800f45c:	d020      	beq.n	800f4a0 <GUI_SD_Write_Screen+0x50>
		pause = 1;
 800f45e:	4b28      	ldr	r3, [pc, #160]	; (800f500 <GUI_SD_Write_Screen+0xb0>)
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
		if(Language_status == En){
 800f460:	4c28      	ldr	r4, [pc, #160]	; (800f504 <GUI_SD_Write_Screen+0xb4>)
		pause = 1;
 800f462:	2201      	movs	r2, #1
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f464:	2063      	movs	r0, #99	; 0x63
		pause = 1;
 800f466:	701a      	strb	r2, [r3, #0]
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f468:	f00e fd58 	bl	801df1c <TFT_FillScreen_DMA>
		if(Language_status == En){
 800f46c:	7822      	ldrb	r2, [r4, #0]
 800f46e:	2a01      	cmp	r2, #1
			GUI_TextEn_WriteSD(80, 120);
 800f470:	f04f 0178 	mov.w	r1, #120	; 0x78
 800f474:	f04f 0050 	mov.w	r0, #80	; 0x50
		if(Language_status == En){
 800f478:	d13a      	bne.n	800f4f0 <GUI_SD_Write_Screen+0xa0>
			GUI_TextEn_WriteSD(80, 120);
 800f47a:	f00a fd9f 	bl	8019fbc <GUI_TextEn_WriteSD>
		}
		else
		{	
				 GUI_TextRu_WriteSD(80, 120);
		}
		if (SD_Detect == 0) {
 800f47e:	4b22      	ldr	r3, [pc, #136]	; (800f508 <GUI_SD_Write_Screen+0xb8>)
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	b96b      	cbnz	r3, 800f4a0 <GUI_SD_Write_Screen+0x50>
			Calculate_SD_Data(); 
 800f484:	f00c fdb4 	bl	801bff0 <Calculate_SD_Data>
			SD_Witer(sdfile_cnt, Language_status, Memory_Data_satus, Mode_EL, CRICQS_done);
 800f488:	7821      	ldrb	r1, [r4, #0]
 800f48a:	4c20      	ldr	r4, [pc, #128]	; (800f50c <GUI_SD_Write_Screen+0xbc>)
 800f48c:	4b20      	ldr	r3, [pc, #128]	; (800f510 <GUI_SD_Write_Screen+0xc0>)
 800f48e:	4a21      	ldr	r2, [pc, #132]	; (800f514 <GUI_SD_Write_Screen+0xc4>)
 800f490:	4821      	ldr	r0, [pc, #132]	; (800f518 <GUI_SD_Write_Screen+0xc8>)
 800f492:	7824      	ldrb	r4, [r4, #0]
 800f494:	781b      	ldrb	r3, [r3, #0]
 800f496:	7812      	ldrb	r2, [r2, #0]
 800f498:	8800      	ldrh	r0, [r0, #0]
 800f49a:	9400      	str	r4, [sp, #0]
 800f49c:	f00c fe9c 	bl	801c1d8 <SD_Witer>

		}
	}
	
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 800f4a0:	4c1e      	ldr	r4, [pc, #120]	; (800f51c <GUI_SD_Write_Screen+0xcc>)
 800f4a2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f4a6:	f7f1 fbb3 	bl	8000c10 <__aeabi_d2f>
 800f4aa:	f44f 718c 	mov.w	r1, #280	; 0x118
 800f4ae:	ee00 0a10 	vmov	s0, r0
 800f4b2:	2055      	movs	r0, #85	; 0x55
 800f4b4:	f006 f8f2 	bl	801569c <GUI_Bar_Measure>
	
	if(SDWr_Status_bar == 1){
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	4b19      	ldr	r3, [pc, #100]	; (800f520 <GUI_SD_Write_Screen+0xd0>)
 800f4bc:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f4c0:	f7f1 fb16 	bl	8000af0 <__aeabi_dcmpeq>
 800f4c4:	b190      	cbz	r0, 800f4ec <GUI_SD_Write_Screen+0x9c>
			if(sdfile_cnt < 999){
 800f4c6:	4b14      	ldr	r3, [pc, #80]	; (800f518 <GUI_SD_Write_Screen+0xc8>)
 800f4c8:	881a      	ldrh	r2, [r3, #0]
 800f4ca:	f240 31e6 	movw	r1, #998	; 0x3e6
 800f4ce:	428a      	cmp	r2, r1
					sdfile_cnt++;
 800f4d0:	bf94      	ite	ls
 800f4d2:	3201      	addls	r2, #1
				}else{
					sdfile_cnt = 0;
 800f4d4:	2200      	movhi	r2, #0
 800f4d6:	801a      	strh	r2, [r3, #0]
				} 
			WriteSDFLASH_t(sdfile_cnt);  
 800f4d8:	8818      	ldrh	r0, [r3, #0]
 800f4da:	2100      	movs	r1, #0
 800f4dc:	f00c fc7a 	bl	801bdd4 <WriteSDFLASH_t>
			pause = 0; 
 800f4e0:	4b07      	ldr	r3, [pc, #28]	; (800f500 <GUI_SD_Write_Screen+0xb0>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	701a      	strb	r2, [r3, #0]
			GUI_screen_state = Prev_Inf_Screen;
 800f4e6:	4b0f      	ldr	r3, [pc, #60]	; (800f524 <GUI_SD_Write_Screen+0xd4>)
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	702b      	strb	r3, [r5, #0]
	}

}
 800f4ec:	b003      	add	sp, #12
 800f4ee:	bd30      	pop	{r4, r5, pc}
				 GUI_TextRu_WriteSD(80, 120);
 800f4f0:	f00b fb02 	bl	801aaf8 <GUI_TextRu_WriteSD>
 800f4f4:	e7c3      	b.n	800f47e <GUI_SD_Write_Screen+0x2e>
 800f4f6:	bf00      	nop
 800f4f8:	2000022a 	.word	0x2000022a
 800f4fc:	20005279 	.word	0x20005279
 800f500:	200052a0 	.word	0x200052a0
 800f504:	2000527b 	.word	0x2000527b
 800f508:	200914c0 	.word	0x200914c0
 800f50c:	20005274 	.word	0x20005274
 800f510:	20000a48 	.word	0x20000a48
 800f514:	20000228 	.word	0x20000228
 800f518:	200052a6 	.word	0x200052a6
 800f51c:	200052d0 	.word	0x200052d0
 800f520:	3ff00000 	.word	0x3ff00000
 800f524:	2008c315 	.word	0x2008c315

0800f528 <GUI_Up_Panel>:


void GUI_Up_Panel()
{
	GUI_Battery_Level(0, 0, percentage_charge);
 800f528:	4b0f      	ldr	r3, [pc, #60]	; (800f568 <GUI_Up_Panel+0x40>)
{
 800f52a:	b507      	push	{r0, r1, r2, lr}
	GUI_Battery_Level(0, 0, percentage_charge);
 800f52c:	2100      	movs	r1, #0
 800f52e:	ed93 0b00 	vldr	d0, [r3]
 800f532:	4608      	mov	r0, r1
 800f534:	f008 fe84 	bl	8018240 <GUI_Battery_Level>
	if (Bluetooth == ON){
 800f538:	4b0c      	ldr	r3, [pc, #48]	; (800f56c <GUI_Up_Panel+0x44>)
 800f53a:	781b      	ldrb	r3, [r3, #0]
 800f53c:	2b01      	cmp	r3, #1
 800f53e:	d106      	bne.n	800f54e <GUI_Up_Panel+0x26>
		GUI_Bluetooth_Logo(240, 2);
 800f540:	2102      	movs	r1, #2
 800f542:	20f0      	movs	r0, #240	; 0xf0
	} else
	{
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
	}
}
 800f544:	b003      	add	sp, #12
 800f546:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Bluetooth_Logo(240, 2);
 800f54a:	f005 b915 	b.w	8014778 <GUI_Bluetooth_Logo>
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
 800f54e:	2363      	movs	r3, #99	; 0x63
 800f550:	9300      	str	r3, [sp, #0]
 800f552:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f556:	2323      	movs	r3, #35	; 0x23
 800f558:	2101      	movs	r1, #1
 800f55a:	20ef      	movs	r0, #239	; 0xef
 800f55c:	f00e fedd 	bl	801e31a <TFT_FillRectangle>
}
 800f560:	b003      	add	sp, #12
 800f562:	f85d fb04 	ldr.w	pc, [sp], #4
 800f566:	bf00      	nop
 800f568:	200913f0 	.word	0x200913f0
 800f56c:	2008c31a 	.word	0x2008c31a

0800f570 <GUI_Down_Panel>:

void GUI_Down_Panel()
{		
 800f570:	b508      	push	{r3, lr}
	GUI_Button_Settings(1, 426);
 800f572:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f576:	2001      	movs	r0, #1
 800f578:	f005 f950 	bl	801481c <GUI_Button_Settings>
	GUI_Button_SD_Card(55, 426, !SD_Detect);
 800f57c:	4b1b      	ldr	r3, [pc, #108]	; (800f5ec <GUI_Down_Panel+0x7c>)
 800f57e:	781a      	ldrb	r2, [r3, #0]
 800f580:	fab2 f282 	clz	r2, r2
 800f584:	0952      	lsrs	r2, r2, #5
 800f586:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f58a:	2037      	movs	r0, #55	; 0x37
 800f58c:	f005 fb00 	bl	8014b90 <GUI_Button_SD_Card>
	GUI_Button_Measure_Start_Pause(109, 426);
 800f590:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f594:	206d      	movs	r0, #109	; 0x6d
 800f596:	f005 fbc7 	bl	8014d28 <GUI_Button_Measure_Start_Pause>
	
	if(GUI_screen_state >= DataSet1_Screen)
 800f59a:	4b15      	ldr	r3, [pc, #84]	; (800f5f0 <GUI_Down_Panel+0x80>)
 800f59c:	781b      	ldrb	r3, [r3, #0]
 800f59e:	2b06      	cmp	r3, #6
 800f5a0:	d90b      	bls.n	800f5ba <GUI_Down_Panel+0x4a>
	{
		GUI_Button_Down(163, 426);
 800f5a2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f5a6:	20a3      	movs	r0, #163	; 0xa3
 800f5a8:	f005 f976 	bl	8014898 <GUI_Button_Down>
		GUI_Button_TFT_On_Off(217, 426);
 800f5ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f5b0:	20d9      	movs	r0, #217	; 0xd9
	else
	{
		GUI_Button_TFT_Rotate(163, 426);
		GUI_Button_Right(217, 426);
	}
}
 800f5b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_TFT_On_Off(217, 426);
 800f5b6:	f005 ba48 	b.w	8014a4a <GUI_Button_TFT_On_Off>
	}else if(GUI_screen_state <= Measure3_Screen)
 800f5ba:	2b03      	cmp	r3, #3
 800f5bc:	d810      	bhi.n	800f5e0 <GUI_Down_Panel+0x70>
		GUI_Button_Down_Active(163, 426, (screen_count > 0));
 800f5be:	4b0d      	ldr	r3, [pc, #52]	; (800f5f4 <GUI_Down_Panel+0x84>)
 800f5c0:	781a      	ldrb	r2, [r3, #0]
 800f5c2:	3200      	adds	r2, #0
 800f5c4:	bf18      	it	ne
 800f5c6:	2201      	movne	r2, #1
 800f5c8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f5cc:	20a3      	movs	r0, #163	; 0xa3
 800f5ce:	f005 f9a8 	bl	8014922 <GUI_Button_Down_Active>
		GUI_Button_Right(217, 426);
 800f5d2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f5d6:	20d9      	movs	r0, #217	; 0xd9
}
 800f5d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_Right(217, 426);
 800f5dc:	f005 b9eb 	b.w	80149b6 <GUI_Button_Right>
		GUI_Button_TFT_Rotate(163, 426);
 800f5e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f5e4:	20a3      	movs	r0, #163	; 0xa3
 800f5e6:	f005 fa5e 	bl	8014aa6 <GUI_Button_TFT_Rotate>
 800f5ea:	e7f2      	b.n	800f5d2 <GUI_Down_Panel+0x62>
 800f5ec:	200914c0 	.word	0x200914c0
 800f5f0:	20005279 	.word	0x20005279
 800f5f4:	200052a3 	.word	0x200052a3

0800f5f8 <GUI_Panels>:

void GUI_Panels()
{
 800f5f8:	b507      	push	{r0, r1, r2, lr}
	if((GUI_screen_state == Measure_Screen && (preGUI_screen_state !=Measure2_Screen 
 800f5fa:	4b1c      	ldr	r3, [pc, #112]	; (800f66c <GUI_Panels+0x74>)
 800f5fc:	781a      	ldrb	r2, [r3, #0]
 800f5fe:	2a01      	cmp	r2, #1
 800f600:	d121      	bne.n	800f646 <GUI_Panels+0x4e>
 800f602:	4b1b      	ldr	r3, [pc, #108]	; (800f670 <GUI_Panels+0x78>)
 800f604:	7819      	ldrb	r1, [r3, #0]
 800f606:	2902      	cmp	r1, #2
 800f608:	d125      	bne.n	800f656 <GUI_Panels+0x5e>
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	2b03      	cmp	r3, #3
 800f60e:	d122      	bne.n	800f656 <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
			|| (preGUI_screen_state >= DataSet1_Screen && GUI_screen_state < DataSet1_Screen)
 800f610:	4b17      	ldr	r3, [pc, #92]	; (800f670 <GUI_Panels+0x78>)
 800f612:	7819      	ldrb	r1, [r3, #0]
 800f614:	2906      	cmp	r1, #6
 800f616:	d901      	bls.n	800f61c <GUI_Panels+0x24>
 800f618:	2a06      	cmp	r2, #6
 800f61a:	d91c      	bls.n	800f656 <GUI_Panels+0x5e>
			|| (preGUI_screen_state == Information_Screen) || ((GUI_screen_state == Color_Rendition_Screen) && preGUI_screen_state < Color_Rendition_Screen))
 800f61c:	7819      	ldrb	r1, [r3, #0]
 800f61e:	2911      	cmp	r1, #17
 800f620:	d019      	beq.n	800f656 <GUI_Panels+0x5e>
 800f622:	2a06      	cmp	r2, #6
 800f624:	d102      	bne.n	800f62c <GUI_Panels+0x34>
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	2b05      	cmp	r3, #5
 800f62a:	d914      	bls.n	800f656 <GUI_Panels+0x5e>
		GUI_Up_Panel();
		GUI_Down_Panel();
	} 
	else 
	{
		TFT_FillRectangle(0, 40, 271, 425, TFT_Black_Bkgr);
 800f62c:	2363      	movs	r3, #99	; 0x63
 800f62e:	9300      	str	r3, [sp, #0]
 800f630:	f240 120f 	movw	r2, #271	; 0x10f
 800f634:	f240 13a9 	movw	r3, #425	; 0x1a9
 800f638:	2128      	movs	r1, #40	; 0x28
 800f63a:	2000      	movs	r0, #0
 800f63c:	f00e fe6d 	bl	801e31a <TFT_FillRectangle>
	}
}
 800f640:	b003      	add	sp, #12
 800f642:	f85d fb04 	ldr.w	pc, [sp], #4
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800f646:	2a04      	cmp	r2, #4
 800f648:	d005      	beq.n	800f656 <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
 800f64a:	2a06      	cmp	r2, #6
 800f64c:	d9e0      	bls.n	800f610 <GUI_Panels+0x18>
 800f64e:	4b08      	ldr	r3, [pc, #32]	; (800f670 <GUI_Panels+0x78>)
 800f650:	781b      	ldrb	r3, [r3, #0]
 800f652:	2b06      	cmp	r3, #6
 800f654:	d8dc      	bhi.n	800f610 <GUI_Panels+0x18>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f656:	2063      	movs	r0, #99	; 0x63
 800f658:	f00e fc60 	bl	801df1c <TFT_FillScreen_DMA>
		GUI_Up_Panel();
 800f65c:	f7ff ff64 	bl	800f528 <GUI_Up_Panel>
}
 800f660:	b003      	add	sp, #12
 800f662:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Down_Panel();
 800f666:	f7ff bf83 	b.w	800f570 <GUI_Down_Panel>
 800f66a:	bf00      	nop
 800f66c:	20005279 	.word	0x20005279
 800f670:	2000022a 	.word	0x2000022a

0800f674 <GUI_DataSet1_Screen>:
{
 800f674:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 800f676:	4b28      	ldr	r3, [pc, #160]	; (800f718 <GUI_DataSet1_Screen+0xa4>)
 800f678:	4c28      	ldr	r4, [pc, #160]	; (800f71c <GUI_DataSet1_Screen+0xa8>)
 800f67a:	4d29      	ldr	r5, [pc, #164]	; (800f720 <GUI_DataSet1_Screen+0xac>)
 800f67c:	2202      	movs	r2, #2
 800f67e:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Mode_EL_Old != Mode_EL || Language_status_prev != Language_status){
 800f680:	4b28      	ldr	r3, [pc, #160]	; (800f724 <GUI_DataSet1_Screen+0xb0>)
 800f682:	4a29      	ldr	r2, [pc, #164]	; (800f728 <GUI_DataSet1_Screen+0xb4>)
 800f684:	781b      	ldrb	r3, [r3, #0]
 800f686:	7812      	ldrb	r2, [r2, #0]
 800f688:	429a      	cmp	r2, r3
 800f68a:	4a28      	ldr	r2, [pc, #160]	; (800f72c <GUI_DataSet1_Screen+0xb8>)
 800f68c:	4b28      	ldr	r3, [pc, #160]	; (800f730 <GUI_DataSet1_Screen+0xbc>)
 800f68e:	d107      	bne.n	800f6a0 <GUI_DataSet1_Screen+0x2c>
 800f690:	7810      	ldrb	r0, [r2, #0]
 800f692:	7821      	ldrb	r1, [r4, #0]
 800f694:	4288      	cmp	r0, r1
 800f696:	d103      	bne.n	800f6a0 <GUI_DataSet1_Screen+0x2c>
 800f698:	7818      	ldrb	r0, [r3, #0]
 800f69a:	7829      	ldrb	r1, [r5, #0]
 800f69c:	4288      	cmp	r0, r1
 800f69e:	d027      	beq.n	800f6f0 <GUI_DataSet1_Screen+0x7c>
		Mode_EL_Old = Mode_EL;
 800f6a0:	7821      	ldrb	r1, [r4, #0]
 800f6a2:	7011      	strb	r1, [r2, #0]
		Language_status_prev = Language_status;
 800f6a4:	782a      	ldrb	r2, [r5, #0]
 800f6a6:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800f6a8:	f7ff ffa6 	bl	800f5f8 <GUI_Panels>
		Prev_Inf_Screen2 = DataSet1_Screen;
 800f6ac:	4b21      	ldr	r3, [pc, #132]	; (800f734 <GUI_DataSet1_Screen+0xc0>)
 800f6ae:	2207      	movs	r2, #7
 800f6b0:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800f6b2:	782b      	ldrb	r3, [r5, #0]
 800f6b4:	bb0b      	cbnz	r3, 800f6fa <GUI_DataSet1_Screen+0x86>
			GUI_OptionMenuRu();
 800f6b6:	f7ff fb7b 	bl	800edb0 <GUI_OptionMenuRu>
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800f6ba:	7823      	ldrb	r3, [r4, #0]
 800f6bc:	f240 1151 	movw	r1, #337	; 0x151
 800f6c0:	200a      	movs	r0, #10
 800f6c2:	b1bb      	cbz	r3, 800f6f4 <GUI_DataSet1_Screen+0x80>
 800f6c4:	f00b f814 	bl	801a6f0 <GUI_TextRu_Illuminance>
		GUI_CheckBox(200, 327, Measure_Field&Illuminance);
 800f6c8:	4b1b      	ldr	r3, [pc, #108]	; (800f738 <GUI_DataSet1_Screen+0xc4>)
 800f6ca:	881a      	ldrh	r2, [r3, #0]
 800f6cc:	f240 1147 	movw	r1, #327	; 0x147
 800f6d0:	f002 0201 	and.w	r2, r2, #1
 800f6d4:	20c8      	movs	r0, #200	; 0xc8
 800f6d6:	f005 fdc3 	bl	8015260 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800f6da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	f240 1379 	movw	r3, #377	; 0x179
 800f6e4:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f6e8:	4619      	mov	r1, r3
 800f6ea:	200a      	movs	r0, #10
 800f6ec:	f00e fdb8 	bl	801e260 <TFT_DrawLine>
}
 800f6f0:	b003      	add	sp, #12
 800f6f2:	bd30      	pop	{r4, r5, pc}
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800f6f4:	f00b fdc2 	bl	801b27c <GUI_TextRu_Luminance>
 800f6f8:	e7e6      	b.n	800f6c8 <GUI_DataSet1_Screen+0x54>
		else if (Language_status == En) {
 800f6fa:	2b01      	cmp	r3, #1
 800f6fc:	d1e4      	bne.n	800f6c8 <GUI_DataSet1_Screen+0x54>
			GUI_OptionMenuEn();
 800f6fe:	f7ff fbc7 	bl	800ee90 <GUI_OptionMenuEn>
			Mode_EL ? GUI_TextEn_Illuminance(10, 339):GUI_TextEn_Luminance(10, 339);
 800f702:	7823      	ldrb	r3, [r4, #0]
 800f704:	f240 1153 	movw	r1, #339	; 0x153
 800f708:	200a      	movs	r0, #10
 800f70a:	b113      	cbz	r3, 800f712 <GUI_DataSet1_Screen+0x9e>
 800f70c:	f00a f916 	bl	801993c <GUI_TextEn_Illuminance>
 800f710:	e7da      	b.n	800f6c8 <GUI_DataSet1_Screen+0x54>
 800f712:	f00a f8bd 	bl	8019890 <GUI_TextEn_Luminance>
 800f716:	e7d7      	b.n	800f6c8 <GUI_DataSet1_Screen+0x54>
 800f718:	20000230 	.word	0x20000230
 800f71c:	20000a48 	.word	0x20000a48
 800f720:	2000527b 	.word	0x2000527b
 800f724:	2000022a 	.word	0x2000022a
 800f728:	20005279 	.word	0x20005279
 800f72c:	2008c31b 	.word	0x2008c31b
 800f730:	2008c314 	.word	0x2008c314
 800f734:	2008c8b8 	.word	0x2008c8b8
 800f738:	2000527e 	.word	0x2000527e

0800f73c <GUI_DataSet2_Screen>:
{
 800f73c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f73e:	4b66      	ldr	r3, [pc, #408]	; (800f8d8 <GUI_DataSet2_Screen+0x19c>)
 800f740:	4a66      	ldr	r2, [pc, #408]	; (800f8dc <GUI_DataSet2_Screen+0x1a0>)
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	7812      	ldrb	r2, [r2, #0]
 800f746:	429a      	cmp	r2, r3
 800f748:	f000 80c3 	beq.w	800f8d2 <GUI_DataSet2_Screen+0x196>
			GUI_Panels();
 800f74c:	f7ff ff54 	bl	800f5f8 <GUI_Panels>
			if(Language_status == Ru){
 800f750:	4b63      	ldr	r3, [pc, #396]	; (800f8e0 <GUI_DataSet2_Screen+0x1a4>)
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d172      	bne.n	800f83e <GUI_DataSet2_Screen+0x102>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800f758:	4b62      	ldr	r3, [pc, #392]	; (800f8e4 <GUI_DataSet2_Screen+0x1a8>)
 800f75a:	781b      	ldrb	r3, [r3, #0]
 800f75c:	2152      	movs	r1, #82	; 0x52
 800f75e:	2012      	movs	r0, #18
 800f760:	2b00      	cmp	r3, #0
 800f762:	d069      	beq.n	800f838 <GUI_DataSet2_Screen+0xfc>
 800f764:	f00b fd20 	bl	801b1a8 <GUI_TextRu_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800f768:	4c5f      	ldr	r4, [pc, #380]	; (800f8e8 <GUI_DataSet2_Screen+0x1ac>)
 800f76a:	8822      	ldrh	r2, [r4, #0]
 800f76c:	2146      	movs	r1, #70	; 0x46
 800f76e:	f002 0202 	and.w	r2, r2, #2
 800f772:	20c8      	movs	r0, #200	; 0xc8
 800f774:	f005 fd74 	bl	8015260 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f778:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f77c:	2378      	movs	r3, #120	; 0x78
 800f77e:	4619      	mov	r1, r3
 800f780:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f784:	200a      	movs	r0, #10
 800f786:	9500      	str	r5, [sp, #0]
 800f788:	f00e fd6a 	bl	801e260 <TFT_DrawLine>
				GUI_TextRu_PPF(10, 145);
 800f78c:	2191      	movs	r1, #145	; 0x91
 800f78e:	200a      	movs	r0, #10
 800f790:	f00b f818 	bl	801a7c4 <GUI_TextRu_PPF>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800f794:	8822      	ldrh	r2, [r4, #0]
 800f796:	2185      	movs	r1, #133	; 0x85
 800f798:	f002 0204 	and.w	r2, r2, #4
 800f79c:	20c8      	movs	r0, #200	; 0xc8
 800f79e:	f005 fd5f 	bl	8015260 <GUI_CheckBox>
				GUI_TextRu_PPF_RGB(10, 209);
 800f7a2:	21d1      	movs	r1, #209	; 0xd1
 800f7a4:	200a      	movs	r0, #10
 800f7a6:	f00b f831 	bl	801a80c <GUI_TextRu_PPF_RGB>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800f7aa:	8822      	ldrh	r2, [r4, #0]
 800f7ac:	21c6      	movs	r1, #198	; 0xc6
 800f7ae:	f002 0208 	and.w	r2, r2, #8
 800f7b2:	20c8      	movs	r0, #200	; 0xc8
 800f7b4:	f005 fd54 	bl	8015260 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f7b8:	23f8      	movs	r3, #248	; 0xf8
 800f7ba:	4619      	mov	r1, r3
 800f7bc:	200a      	movs	r0, #10
 800f7be:	9500      	str	r5, [sp, #0]
 800f7c0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f7c4:	f00e fd4c 	bl	801e260 <TFT_DrawLine>
				GUI_TextRu_CCT(20, 275);
 800f7c8:	f240 1113 	movw	r1, #275	; 0x113
 800f7cc:	2014      	movs	r0, #20
 800f7ce:	f00b fa99 	bl	801ad04 <GUI_TextRu_CCT>
				GUI_CheckBox(200, 263, Measure_Field&CCT);
 800f7d2:	8822      	ldrh	r2, [r4, #0]
 800f7d4:	f240 1107 	movw	r1, #263	; 0x107
 800f7d8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800f7dc:	20c8      	movs	r0, #200	; 0xc8
 800f7de:	f005 fd3f 	bl	8015260 <GUI_CheckBox>
				TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f7e2:	f240 1339 	movw	r3, #313	; 0x139
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f7ec:	9500      	str	r5, [sp, #0]
 800f7ee:	200a      	movs	r0, #10
 800f7f0:	f00e fd36 	bl	801e260 <TFT_DrawLine>
				GUI_Text_deltaE(20, 337);
 800f7f4:	f240 1151 	movw	r1, #337	; 0x151
 800f7f8:	2014      	movs	r0, #20
 800f7fa:	f009 fb51 	bl	8018ea0 <GUI_Text_deltaE>
				GUI_CheckBox(200, 327, Measure_Field&delta_E);
 800f7fe:	8822      	ldrh	r2, [r4, #0]
 800f800:	f240 1147 	movw	r1, #327	; 0x147
 800f804:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f808:	20c8      	movs	r0, #200	; 0xc8
 800f80a:	f005 fd29 	bl	8015260 <GUI_CheckBox>
				TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800f80e:	f240 1379 	movw	r3, #377	; 0x179
 800f812:	4619      	mov	r1, r3
 800f814:	9500      	str	r5, [sp, #0]
 800f816:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f81a:	200a      	movs	r0, #10
 800f81c:	f00e fd20 	bl	801e260 <TFT_DrawLine>
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800f820:	8822      	ldrh	r2, [r4, #0]
 800f822:	2300      	movs	r3, #0
 800f824:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f828:	f240 1147 	movw	r1, #327	; 0x147
 800f82c:	2082      	movs	r0, #130	; 0x82
}
 800f82e:	b003      	add	sp, #12
 800f830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800f834:	f005 bbf4 	b.w	8015020 <GUI_Button_Measure_deltaE_Small>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800f838:	f00b fd68 	bl	801b30c <GUI_TextRu_Radiance>
 800f83c:	e794      	b.n	800f768 <GUI_DataSet2_Screen+0x2c>
			else if(Language_status == En){
 800f83e:	2b01      	cmp	r3, #1
 800f840:	d147      	bne.n	800f8d2 <GUI_DataSet2_Screen+0x196>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800f842:	4d28      	ldr	r5, [pc, #160]	; (800f8e4 <GUI_DataSet2_Screen+0x1a8>)
 800f844:	782a      	ldrb	r2, [r5, #0]
 800f846:	2154      	movs	r1, #84	; 0x54
 800f848:	2012      	movs	r0, #18
 800f84a:	2a00      	cmp	r2, #0
 800f84c:	d03b      	beq.n	800f8c6 <GUI_DataSet2_Screen+0x18a>
 800f84e:	f009 fe0b 	bl	8019468 <GUI_TextEn_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800f852:	4c25      	ldr	r4, [pc, #148]	; (800f8e8 <GUI_DataSet2_Screen+0x1ac>)
 800f854:	8822      	ldrh	r2, [r4, #0]
 800f856:	2146      	movs	r1, #70	; 0x46
 800f858:	f002 0202 	and.w	r2, r2, #2
 800f85c:	20c8      	movs	r0, #200	; 0xc8
 800f85e:	f005 fcff 	bl	8015260 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f866:	9300      	str	r3, [sp, #0]
 800f868:	2378      	movs	r3, #120	; 0x78
 800f86a:	4619      	mov	r1, r3
 800f86c:	200a      	movs	r0, #10
 800f86e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f872:	f00e fcf5 	bl	801e260 <TFT_DrawLine>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800f876:	782b      	ldrb	r3, [r5, #0]
 800f878:	2193      	movs	r1, #147	; 0x93
 800f87a:	200a      	movs	r0, #10
 800f87c:	b333      	cbz	r3, 800f8cc <GUI_DataSet2_Screen+0x190>
 800f87e:	f00a f8f3 	bl	8019a68 <GUI_TextEn_PPFD>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800f882:	8822      	ldrh	r2, [r4, #0]
 800f884:	2185      	movs	r1, #133	; 0x85
 800f886:	f002 0204 	and.w	r2, r2, #4
 800f88a:	20c8      	movs	r0, #200	; 0xc8
 800f88c:	f005 fce8 	bl	8015260 <GUI_CheckBox>
				GUI_TextEn_B_G_R_FR(10, 211);
 800f890:	21d3      	movs	r1, #211	; 0xd3
 800f892:	200a      	movs	r0, #10
 800f894:	f00a f9a2 	bl	8019bdc <GUI_TextEn_B_G_R_FR>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800f898:	8822      	ldrh	r2, [r4, #0]
 800f89a:	21c6      	movs	r1, #198	; 0xc6
 800f89c:	f002 0208 	and.w	r2, r2, #8
 800f8a0:	20c8      	movs	r0, #200	; 0xc8
 800f8a2:	f005 fcdd 	bl	8015260 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f8a6:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f8aa:	23f8      	movs	r3, #248	; 0xf8
 800f8ac:	4619      	mov	r1, r3
 800f8ae:	9500      	str	r5, [sp, #0]
 800f8b0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f8b4:	200a      	movs	r0, #10
 800f8b6:	f00e fcd3 	bl	801e260 <TFT_DrawLine>
				GUI_TextEn_CCT(20, 277);
 800f8ba:	f240 1115 	movw	r1, #277	; 0x115
 800f8be:	2014      	movs	r0, #20
 800f8c0:	f00a f9d4 	bl	8019c6c <GUI_TextEn_CCT>
 800f8c4:	e785      	b.n	800f7d2 <GUI_DataSet2_Screen+0x96>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800f8c6:	f009 fd81 	bl	80193cc <GUI_TextEn_Radiance>
 800f8ca:	e7c2      	b.n	800f852 <GUI_DataSet2_Screen+0x116>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800f8cc:	f00a f8f8 	bl	8019ac0 <GUI_TextEn_PPL>
 800f8d0:	e7d7      	b.n	800f882 <GUI_DataSet2_Screen+0x146>
}
 800f8d2:	b003      	add	sp, #12
 800f8d4:	bd30      	pop	{r4, r5, pc}
 800f8d6:	bf00      	nop
 800f8d8:	2000022a 	.word	0x2000022a
 800f8dc:	20005279 	.word	0x20005279
 800f8e0:	2000527b 	.word	0x2000527b
 800f8e4:	20000a48 	.word	0x20000a48
 800f8e8:	2000527e 	.word	0x2000527e

0800f8ec <GUI_DataSet3_Screen>:
{
 800f8ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f8ee:	4b35      	ldr	r3, [pc, #212]	; (800f9c4 <GUI_DataSet3_Screen+0xd8>)
 800f8f0:	4a35      	ldr	r2, [pc, #212]	; (800f9c8 <GUI_DataSet3_Screen+0xdc>)
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	7812      	ldrb	r2, [r2, #0]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d061      	beq.n	800f9be <GUI_DataSet3_Screen+0xd2>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800f8fa:	4c34      	ldr	r4, [pc, #208]	; (800f9cc <GUI_DataSet3_Screen+0xe0>)
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800f8fc:	4e34      	ldr	r6, [pc, #208]	; (800f9d0 <GUI_DataSet3_Screen+0xe4>)
		GUI_Panels();
 800f8fe:	f7ff fe7b 	bl	800f5f8 <GUI_Panels>
		GUI_Text_CIE_XYZ(20, 82);
 800f902:	2152      	movs	r1, #82	; 0x52
 800f904:	2014      	movs	r0, #20
 800f906:	f008 feff 	bl	8018708 <GUI_Text_CIE_XYZ>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800f90a:	8822      	ldrh	r2, [r4, #0]
 800f90c:	2146      	movs	r1, #70	; 0x46
 800f90e:	f002 0210 	and.w	r2, r2, #16
 800f912:	20c8      	movs	r0, #200	; 0xc8
 800f914:	f005 fca4 	bl	8015260 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f918:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f91c:	2378      	movs	r3, #120	; 0x78
 800f91e:	4619      	mov	r1, r3
 800f920:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f924:	200a      	movs	r0, #10
 800f926:	9500      	str	r5, [sp, #0]
 800f928:	f00e fc9a 	bl	801e260 <TFT_DrawLine>
		GUI_Text_CIE_xy(20, 145);
 800f92c:	2191      	movs	r1, #145	; 0x91
 800f92e:	2014      	movs	r0, #20
 800f930:	f009 f996 	bl	8018c60 <GUI_Text_CIE_xy>
		GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 800f934:	8822      	ldrh	r2, [r4, #0]
 800f936:	2185      	movs	r1, #133	; 0x85
 800f938:	f002 0220 	and.w	r2, r2, #32
 800f93c:	20c8      	movs	r0, #200	; 0xc8
 800f93e:	f005 fc8f 	bl	8015260 <GUI_CheckBox>
		GUI_Text_CIE_xy_1931(35, 209);
 800f942:	21d1      	movs	r1, #209	; 0xd1
 800f944:	2023      	movs	r0, #35	; 0x23
 800f946:	f008 ff19 	bl	801877c <GUI_Text_CIE_xy_1931>
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800f94a:	8823      	ldrh	r3, [r4, #0]
 800f94c:	7832      	ldrb	r2, [r6, #0]
 800f94e:	f003 0320 	and.w	r3, r3, #32
 800f952:	f002 0201 	and.w	r2, r2, #1
 800f956:	21c6      	movs	r1, #198	; 0xc6
 800f958:	20c8      	movs	r0, #200	; 0xc8
 800f95a:	f005 fcc2 	bl	80152e2 <GUI_RadioBox>
		GUI_Text_CIE_xy_1964(35, 275);
 800f95e:	f240 1113 	movw	r1, #275	; 0x113
 800f962:	2023      	movs	r0, #35	; 0x23
 800f964:	f008 ff6a 	bl	801883c <GUI_Text_CIE_xy_1964>
		GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 800f968:	7832      	ldrb	r2, [r6, #0]
 800f96a:	8823      	ldrh	r3, [r4, #0]
 800f96c:	43d2      	mvns	r2, r2
 800f96e:	f003 0320 	and.w	r3, r3, #32
 800f972:	f002 0201 	and.w	r2, r2, #1
 800f976:	f240 1107 	movw	r1, #263	; 0x107
 800f97a:	20c8      	movs	r0, #200	; 0xc8
 800f97c:	f005 fcb1 	bl	80152e2 <GUI_RadioBox>
		TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f980:	f240 1339 	movw	r3, #313	; 0x139
 800f984:	4619      	mov	r1, r3
 800f986:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f98a:	200a      	movs	r0, #10
 800f98c:	9500      	str	r5, [sp, #0]
 800f98e:	f00e fc67 	bl	801e260 <TFT_DrawLine>
		GUI_Text_CIE_Luv(20, 337);
 800f992:	f240 1151 	movw	r1, #337	; 0x151
 800f996:	2014      	movs	r0, #20
 800f998:	f008 ffb0 	bl	80188fc <GUI_Text_CIE_Luv>
		GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 800f99c:	8822      	ldrh	r2, [r4, #0]
 800f99e:	f240 1147 	movw	r1, #327	; 0x147
 800f9a2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800f9a6:	20c8      	movs	r0, #200	; 0xc8
 800f9a8:	f005 fc5a 	bl	8015260 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800f9ac:	f240 1379 	movw	r3, #377	; 0x179
 800f9b0:	9500      	str	r5, [sp, #0]
 800f9b2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	200a      	movs	r0, #10
 800f9ba:	f00e fc51 	bl	801e260 <TFT_DrawLine>
}
 800f9be:	b002      	add	sp, #8
 800f9c0:	bd70      	pop	{r4, r5, r6, pc}
 800f9c2:	bf00      	nop
 800f9c4:	2000022a 	.word	0x2000022a
 800f9c8:	20005279 	.word	0x20005279
 800f9cc:	2000527e 	.word	0x2000527e
 800f9d0:	2000527c 	.word	0x2000527c

0800f9d4 <GUI_DataSet4_Screen>:
{
 800f9d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f9d6:	4b4b      	ldr	r3, [pc, #300]	; (800fb04 <GUI_DataSet4_Screen+0x130>)
 800f9d8:	4a4b      	ldr	r2, [pc, #300]	; (800fb08 <GUI_DataSet4_Screen+0x134>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	7812      	ldrb	r2, [r2, #0]
 800f9de:	429a      	cmp	r2, r3
 800f9e0:	f000 808b 	beq.w	800fafa <GUI_DataSet4_Screen+0x126>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800f9e4:	4c49      	ldr	r4, [pc, #292]	; (800fb0c <GUI_DataSet4_Screen+0x138>)
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800f9e6:	4d4a      	ldr	r5, [pc, #296]	; (800fb10 <GUI_DataSet4_Screen+0x13c>)
		GUI_Panels();
 800f9e8:	f7ff fe06 	bl	800f5f8 <GUI_Panels>
		GUI_Text_CIE_Lab(20, 80);
 800f9ec:	2150      	movs	r1, #80	; 0x50
 800f9ee:	2014      	movs	r0, #20
 800f9f0:	f008 ffd2 	bl	8018998 <GUI_Text_CIE_Lab>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800f9f4:	8822      	ldrh	r2, [r4, #0]
 800f9f6:	2141      	movs	r1, #65	; 0x41
 800f9f8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800f9fc:	20c8      	movs	r0, #200	; 0xc8
 800f9fe:	f005 fc2f 	bl	8015260 <GUI_CheckBox>
		GUI_Text_A(40, 115);
 800fa02:	2173      	movs	r1, #115	; 0x73
 800fa04:	2028      	movs	r0, #40	; 0x28
 800fa06:	f009 f86f 	bl	8018ae8 <GUI_Text_A>
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800fa0a:	8823      	ldrh	r3, [r4, #0]
 800fa0c:	782a      	ldrb	r2, [r5, #0]
 800fa0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa12:	f002 0201 	and.w	r2, r2, #1
 800fa16:	216c      	movs	r1, #108	; 0x6c
 800fa18:	20c8      	movs	r0, #200	; 0xc8
 800fa1a:	f005 fc62 	bl	80152e2 <GUI_RadioBox>
		GUI_Text_D65(40, 150);
 800fa1e:	2196      	movs	r1, #150	; 0x96
 800fa20:	2028      	movs	r0, #40	; 0x28
 800fa22:	f009 f877 	bl	8018b14 <GUI_Text_D65>
		GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 800fa26:	8823      	ldrh	r3, [r4, #0]
 800fa28:	782a      	ldrb	r2, [r5, #0]
 800fa2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa2e:	f002 0202 	and.w	r2, r2, #2
 800fa32:	218f      	movs	r1, #143	; 0x8f
 800fa34:	20c8      	movs	r0, #200	; 0xc8
 800fa36:	f005 fc54 	bl	80152e2 <GUI_RadioBox>
		GUI_Text_C(40, 185);
 800fa3a:	21b9      	movs	r1, #185	; 0xb9
 800fa3c:	2028      	movs	r0, #40	; 0x28
 800fa3e:	f009 f88d 	bl	8018b5c <GUI_Text_C>
		GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 800fa42:	8823      	ldrh	r3, [r4, #0]
 800fa44:	782a      	ldrb	r2, [r5, #0]
 800fa46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa4a:	f002 0204 	and.w	r2, r2, #4
 800fa4e:	21b2      	movs	r1, #178	; 0xb2
 800fa50:	20c8      	movs	r0, #200	; 0xc8
 800fa52:	f005 fc46 	bl	80152e2 <GUI_RadioBox>
		GUI_Text_D50(40, 220);
 800fa56:	21dc      	movs	r1, #220	; 0xdc
 800fa58:	2028      	movs	r0, #40	; 0x28
 800fa5a:	f009 f895 	bl	8018b88 <GUI_Text_D50>
		GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 800fa5e:	8823      	ldrh	r3, [r4, #0]
 800fa60:	782a      	ldrb	r2, [r5, #0]
 800fa62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa66:	f002 0208 	and.w	r2, r2, #8
 800fa6a:	21d5      	movs	r1, #213	; 0xd5
 800fa6c:	20c8      	movs	r0, #200	; 0xc8
 800fa6e:	f005 fc38 	bl	80152e2 <GUI_RadioBox>
		GUI_Text_D55(40, 255);
 800fa72:	21ff      	movs	r1, #255	; 0xff
 800fa74:	2028      	movs	r0, #40	; 0x28
 800fa76:	f009 f8ab 	bl	8018bd0 <GUI_Text_D55>
		GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 800fa7a:	8823      	ldrh	r3, [r4, #0]
 800fa7c:	782a      	ldrb	r2, [r5, #0]
 800fa7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa82:	f002 0210 	and.w	r2, r2, #16
 800fa86:	21f8      	movs	r1, #248	; 0xf8
 800fa88:	20c8      	movs	r0, #200	; 0xc8
 800fa8a:	f005 fc2a 	bl	80152e2 <GUI_RadioBox>
		GUI_Text_D75(40, 290);
 800fa8e:	f44f 7191 	mov.w	r1, #290	; 0x122
 800fa92:	2028      	movs	r0, #40	; 0x28
 800fa94:	f009 f8c0 	bl	8018c18 <GUI_Text_D75>
		GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 800fa98:	8823      	ldrh	r3, [r4, #0]
 800fa9a:	782a      	ldrb	r2, [r5, #0]
 800fa9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faa0:	f002 0220 	and.w	r2, r2, #32
 800faa4:	f240 111b 	movw	r1, #283	; 0x11b
 800faa8:	20c8      	movs	r0, #200	; 0xc8
 800faaa:	f005 fc1a 	bl	80152e2 <GUI_RadioBox>
		TFT_DrawLine(10, 330, 262, 330, TFT_White);
 800faae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fab2:	9300      	str	r3, [sp, #0]
 800fab4:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800fab8:	4619      	mov	r1, r3
 800faba:	200a      	movs	r0, #10
 800fabc:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fac0:	f00e fbce 	bl	801e260 <TFT_DrawLine>
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 800fac4:	4b13      	ldr	r3, [pc, #76]	; (800fb14 <GUI_DataSet4_Screen+0x140>)
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800facc:	2014      	movs	r0, #20
 800face:	b1b3      	cbz	r3, 800fafe <GUI_DataSet4_Screen+0x12a>
 800fad0:	f009 fb40 	bl	8019154 <GUI_Text_EbEr>
		GUI_CheckBox(200, 345, Measure_Field&EbEr);
 800fad4:	8822      	ldrh	r2, [r4, #0]
 800fad6:	f240 1159 	movw	r1, #345	; 0x159
 800fada:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800fade:	20c8      	movs	r0, #200	; 0xc8
 800fae0:	f005 fbbe 	bl	8015260 <GUI_CheckBox>
		TFT_DrawLine(10, 390, 262, 390, TFT_White);
 800fae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	f44f 73c3 	mov.w	r3, #390	; 0x186
 800faee:	f44f 7283 	mov.w	r2, #262	; 0x106
 800faf2:	4619      	mov	r1, r3
 800faf4:	200a      	movs	r0, #10
 800faf6:	f00e fbb3 	bl	801e260 <TFT_DrawLine>
}
 800fafa:	b003      	add	sp, #12
 800fafc:	bd30      	pop	{r4, r5, pc}
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 800fafe:	f009 fb63 	bl	80191c8 <GUI_Text_LbLr>
 800fb02:	e7e7      	b.n	800fad4 <GUI_DataSet4_Screen+0x100>
 800fb04:	2000022a 	.word	0x2000022a
 800fb08:	20005279 	.word	0x20005279
 800fb0c:	2000527e 	.word	0x2000527e
 800fb10:	2008c319 	.word	0x2008c319
 800fb14:	20000a48 	.word	0x20000a48

0800fb18 <GUI_DataSet5_Screen>:
{
 800fb18:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fb1a:	4b19      	ldr	r3, [pc, #100]	; (800fb80 <GUI_DataSet5_Screen+0x68>)
 800fb1c:	4a19      	ldr	r2, [pc, #100]	; (800fb84 <GUI_DataSet5_Screen+0x6c>)
 800fb1e:	781b      	ldrb	r3, [r3, #0]
 800fb20:	7812      	ldrb	r2, [r2, #0]
 800fb22:	429a      	cmp	r2, r3
 800fb24:	d02a      	beq.n	800fb7c <GUI_DataSet5_Screen+0x64>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 800fb26:	4d18      	ldr	r5, [pc, #96]	; (800fb88 <GUI_DataSet5_Screen+0x70>)
		GUI_Panels();
 800fb28:	f7ff fd66 	bl	800f5f8 <GUI_Panels>
		GUI_Text_lambda_d(35, 86);
 800fb2c:	2156      	movs	r1, #86	; 0x56
 800fb2e:	2023      	movs	r0, #35	; 0x23
 800fb30:	f009 f93c 	bl	8018dac <GUI_Text_lambda_d>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 800fb34:	882a      	ldrh	r2, [r5, #0]
 800fb36:	2146      	movs	r1, #70	; 0x46
 800fb38:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800fb3c:	20c8      	movs	r0, #200	; 0xc8
 800fb3e:	f005 fb8f 	bl	8015260 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800fb42:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fb46:	2378      	movs	r3, #120	; 0x78
 800fb48:	4619      	mov	r1, r3
 800fb4a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fb4e:	200a      	movs	r0, #10
 800fb50:	9400      	str	r4, [sp, #0]
 800fb52:	f00e fb85 	bl	801e260 <TFT_DrawLine>
		GUI_Text_SP(35, 145);
 800fb56:	2191      	movs	r1, #145	; 0x91
 800fb58:	2023      	movs	r0, #35	; 0x23
 800fb5a:	f009 f903 	bl	8018d64 <GUI_Text_SP>
		GUI_CheckBox(200, 133, Measure_Field&SP_measure);
 800fb5e:	882a      	ldrh	r2, [r5, #0]
 800fb60:	2185      	movs	r1, #133	; 0x85
 800fb62:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800fb66:	20c8      	movs	r0, #200	; 0xc8
 800fb68:	f005 fb7a 	bl	8015260 <GUI_CheckBox>
		TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800fb6c:	23b7      	movs	r3, #183	; 0xb7
 800fb6e:	9400      	str	r4, [sp, #0]
 800fb70:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fb74:	4619      	mov	r1, r3
 800fb76:	200a      	movs	r0, #10
 800fb78:	f00e fb72 	bl	801e260 <TFT_DrawLine>
}
 800fb7c:	b003      	add	sp, #12
 800fb7e:	bd30      	pop	{r4, r5, pc}
 800fb80:	2000022a 	.word	0x2000022a
 800fb84:	20005279 	.word	0x20005279
 800fb88:	2000527e 	.word	0x2000527e

0800fb8c <GUI_GraphSet1_Screen>:
{
 800fb8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fb8e:	4b1d      	ldr	r3, [pc, #116]	; (800fc04 <GUI_GraphSet1_Screen+0x78>)
 800fb90:	4a1d      	ldr	r2, [pc, #116]	; (800fc08 <GUI_GraphSet1_Screen+0x7c>)
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	7812      	ldrb	r2, [r2, #0]
 800fb96:	4c1d      	ldr	r4, [pc, #116]	; (800fc0c <GUI_GraphSet1_Screen+0x80>)
 800fb98:	4d1d      	ldr	r5, [pc, #116]	; (800fc10 <GUI_GraphSet1_Screen+0x84>)
 800fb9a:	429a      	cmp	r2, r3
 800fb9c:	d103      	bne.n	800fba6 <GUI_GraphSet1_Screen+0x1a>
 800fb9e:	7822      	ldrb	r2, [r4, #0]
 800fba0:	782b      	ldrb	r3, [r5, #0]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d022      	beq.n	800fbec <GUI_GraphSet1_Screen+0x60>
		GUI_Panels();
 800fba6:	f7ff fd27 	bl	800f5f8 <GUI_Panels>
		Language_status_prev = Language_status;
 800fbaa:	782b      	ldrb	r3, [r5, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 800fbac:	4a19      	ldr	r2, [pc, #100]	; (800fc14 <GUI_GraphSet1_Screen+0x88>)
		Language_status_prev = Language_status;
 800fbae:	7023      	strb	r3, [r4, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 800fbb0:	210c      	movs	r1, #12
 800fbb2:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 800fbb4:	b9e3      	cbnz	r3, 800fbf0 <GUI_GraphSet1_Screen+0x64>
			GUI_OptionMenuRu();
 800fbb6:	f7ff f8fb 	bl	800edb0 <GUI_OptionMenuRu>
			GUI_TextRu_PPF_bands(10, 337);
 800fbba:	f240 1151 	movw	r1, #337	; 0x151
 800fbbe:	200a      	movs	r0, #10
 800fbc0:	f00a feb2 	bl	801a928 <GUI_TextRu_PPF_bands>
			GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 800fbc4:	4b14      	ldr	r3, [pc, #80]	; (800fc18 <GUI_GraphSet1_Screen+0x8c>)
 800fbc6:	781a      	ldrb	r2, [r3, #0]
 800fbc8:	f240 1147 	movw	r1, #327	; 0x147
 800fbcc:	f002 0201 	and.w	r2, r2, #1
 800fbd0:	20c8      	movs	r0, #200	; 0xc8
 800fbd2:	f005 fb45 	bl	8015260 <GUI_CheckBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fbd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbda:	9300      	str	r3, [sp, #0]
 800fbdc:	f240 1379 	movw	r3, #377	; 0x179
 800fbe0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fbe4:	4619      	mov	r1, r3
 800fbe6:	200a      	movs	r0, #10
 800fbe8:	f00e fb3a 	bl	801e260 <TFT_DrawLine>
}
 800fbec:	b003      	add	sp, #12
 800fbee:	bd30      	pop	{r4, r5, pc}
		else if(Language_status == En){
 800fbf0:	2b01      	cmp	r3, #1
 800fbf2:	d1e7      	bne.n	800fbc4 <GUI_GraphSet1_Screen+0x38>
			GUI_OptionMenuEn();
 800fbf4:	f7ff f94c 	bl	800ee90 <GUI_OptionMenuEn>
			GUI_TextEn_PARwavebands(10, 339);
 800fbf8:	f240 1153 	movw	r1, #339	; 0x153
 800fbfc:	200a      	movs	r0, #10
 800fbfe:	f009 ff83 	bl	8019b08 <GUI_TextEn_PARwavebands>
 800fc02:	e7df      	b.n	800fbc4 <GUI_GraphSet1_Screen+0x38>
 800fc04:	2000022a 	.word	0x2000022a
 800fc08:	20005279 	.word	0x20005279
 800fc0c:	2008c314 	.word	0x2008c314
 800fc10:	2000527b 	.word	0x2000527b
 800fc14:	2008c8b8 	.word	0x2008c8b8
 800fc18:	2000527a 	.word	0x2000527a

0800fc1c <GUI_GraphSet2_Screen>:
{
 800fc1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fc1e:	4b19      	ldr	r3, [pc, #100]	; (800fc84 <GUI_GraphSet2_Screen+0x68>)
 800fc20:	4a19      	ldr	r2, [pc, #100]	; (800fc88 <GUI_GraphSet2_Screen+0x6c>)
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	7812      	ldrb	r2, [r2, #0]
 800fc26:	429a      	cmp	r2, r3
 800fc28:	d02a      	beq.n	800fc80 <GUI_GraphSet2_Screen+0x64>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 800fc2a:	4d18      	ldr	r5, [pc, #96]	; (800fc8c <GUI_GraphSet2_Screen+0x70>)
		GUI_Panels();
 800fc2c:	f7ff fce4 	bl	800f5f8 <GUI_Panels>
		GUI_Text_EbEr(18, 82);
 800fc30:	2152      	movs	r1, #82	; 0x52
 800fc32:	2012      	movs	r0, #18
 800fc34:	f009 fa8e 	bl	8019154 <GUI_Text_EbEr>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 800fc38:	782a      	ldrb	r2, [r5, #0]
 800fc3a:	2146      	movs	r1, #70	; 0x46
 800fc3c:	f002 0202 	and.w	r2, r2, #2
 800fc40:	20c8      	movs	r0, #200	; 0xc8
 800fc42:	f005 fb0d 	bl	8015260 <GUI_CheckBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 800fc46:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fc4a:	237a      	movs	r3, #122	; 0x7a
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fc52:	200a      	movs	r0, #10
 800fc54:	9400      	str	r4, [sp, #0]
 800fc56:	f00e fb03 	bl	801e260 <TFT_DrawLine>
		GUI_Text_V_lambda(10, 145);
 800fc5a:	2191      	movs	r1, #145	; 0x91
 800fc5c:	200a      	movs	r0, #10
 800fc5e:	f009 f8c9 	bl	8018df4 <GUI_Text_V_lambda>
		GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 800fc62:	782a      	ldrb	r2, [r5, #0]
 800fc64:	2185      	movs	r1, #133	; 0x85
 800fc66:	f002 0204 	and.w	r2, r2, #4
 800fc6a:	20c8      	movs	r0, #200	; 0xc8
 800fc6c:	f005 faf8 	bl	8015260 <GUI_CheckBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 800fc70:	23b9      	movs	r3, #185	; 0xb9
 800fc72:	9400      	str	r4, [sp, #0]
 800fc74:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fc78:	4619      	mov	r1, r3
 800fc7a:	200a      	movs	r0, #10
 800fc7c:	f00e faf0 	bl	801e260 <TFT_DrawLine>
}
 800fc80:	b003      	add	sp, #12
 800fc82:	bd30      	pop	{r4, r5, pc}
 800fc84:	2000022a 	.word	0x2000022a
 800fc88:	20005279 	.word	0x20005279
 800fc8c:	2000527a 	.word	0x2000527a

0800fc90 <GUI_ColorSet1_Screen>:
{
 800fc90:	b513      	push	{r0, r1, r4, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fc92:	4b1b      	ldr	r3, [pc, #108]	; (800fd00 <GUI_ColorSet1_Screen+0x70>)
 800fc94:	4a1b      	ldr	r2, [pc, #108]	; (800fd04 <GUI_ColorSet1_Screen+0x74>)
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	7812      	ldrb	r2, [r2, #0]
 800fc9a:	4c1b      	ldr	r4, [pc, #108]	; (800fd08 <GUI_ColorSet1_Screen+0x78>)
 800fc9c:	429a      	cmp	r2, r3
 800fc9e:	4b1b      	ldr	r3, [pc, #108]	; (800fd0c <GUI_ColorSet1_Screen+0x7c>)
 800fca0:	d103      	bne.n	800fcaa <GUI_ColorSet1_Screen+0x1a>
 800fca2:	7819      	ldrb	r1, [r3, #0]
 800fca4:	7822      	ldrb	r2, [r4, #0]
 800fca6:	4291      	cmp	r1, r2
 800fca8:	d023      	beq.n	800fcf2 <GUI_ColorSet1_Screen+0x62>
		Language_status_prev = Language_status;
 800fcaa:	7822      	ldrb	r2, [r4, #0]
 800fcac:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800fcae:	f7ff fca3 	bl	800f5f8 <GUI_Panels>
		Prev_Inf_Screen2 = ColorSet1_Screen;
 800fcb2:	4b17      	ldr	r3, [pc, #92]	; (800fd10 <GUI_ColorSet1_Screen+0x80>)
 800fcb4:	220e      	movs	r2, #14
 800fcb6:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800fcb8:	7823      	ldrb	r3, [r4, #0]
 800fcba:	b9e3      	cbnz	r3, 800fcf6 <GUI_ColorSet1_Screen+0x66>
			GUI_OptionMenuRu();
 800fcbc:	f7ff f878 	bl	800edb0 <GUI_OptionMenuRu>
			GUI_Text_CIE_xy(10, 337);
 800fcc0:	f240 1151 	movw	r1, #337	; 0x151
 800fcc4:	200a      	movs	r0, #10
 800fcc6:	f008 ffcb 	bl	8018c60 <GUI_Text_CIE_xy>
			GUI_RadioBox(200, 327, Color_Field&Color_CIE_xy, 0x01);
 800fcca:	4b12      	ldr	r3, [pc, #72]	; (800fd14 <GUI_ColorSet1_Screen+0x84>)
 800fccc:	781a      	ldrb	r2, [r3, #0]
 800fcce:	2301      	movs	r3, #1
 800fcd0:	401a      	ands	r2, r3
 800fcd2:	f240 1147 	movw	r1, #327	; 0x147
 800fcd6:	20c8      	movs	r0, #200	; 0xc8
 800fcd8:	f005 fb03 	bl	80152e2 <GUI_RadioBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fcdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fce0:	9300      	str	r3, [sp, #0]
 800fce2:	f240 1379 	movw	r3, #377	; 0x179
 800fce6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fcea:	4619      	mov	r1, r3
 800fcec:	200a      	movs	r0, #10
 800fcee:	f00e fab7 	bl	801e260 <TFT_DrawLine>
}
 800fcf2:	b002      	add	sp, #8
 800fcf4:	bd10      	pop	{r4, pc}
		else if(Language_status == En){
 800fcf6:	2b01      	cmp	r3, #1
 800fcf8:	d1e2      	bne.n	800fcc0 <GUI_ColorSet1_Screen+0x30>
			GUI_OptionMenuEn();
 800fcfa:	f7ff f8c9 	bl	800ee90 <GUI_OptionMenuEn>
 800fcfe:	e7df      	b.n	800fcc0 <GUI_ColorSet1_Screen+0x30>
 800fd00:	2000022a 	.word	0x2000022a
 800fd04:	20005279 	.word	0x20005279
 800fd08:	2000527b 	.word	0x2000527b
 800fd0c:	2008c314 	.word	0x2008c314
 800fd10:	2008c8b8 	.word	0x2008c8b8
 800fd14:	20005277 	.word	0x20005277

0800fd18 <GUI_ColorSet2_Screen>:
{
 800fd18:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fd1a:	4b1a      	ldr	r3, [pc, #104]	; (800fd84 <GUI_ColorSet2_Screen+0x6c>)
 800fd1c:	4a1a      	ldr	r2, [pc, #104]	; (800fd88 <GUI_ColorSet2_Screen+0x70>)
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	7812      	ldrb	r2, [r2, #0]
 800fd22:	429a      	cmp	r2, r3
 800fd24:	d02c      	beq.n	800fd80 <GUI_ColorSet2_Screen+0x68>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 800fd26:	4d19      	ldr	r5, [pc, #100]	; (800fd8c <GUI_ColorSet2_Screen+0x74>)
		GUI_Panels();
 800fd28:	f7ff fc66 	bl	800f5f8 <GUI_Panels>
		GUI_Text_CIE_Luv(20, 82);
 800fd2c:	2152      	movs	r1, #82	; 0x52
 800fd2e:	2014      	movs	r0, #20
 800fd30:	f008 fde4 	bl	80188fc <GUI_Text_CIE_Luv>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 800fd34:	782a      	ldrb	r2, [r5, #0]
 800fd36:	2301      	movs	r3, #1
 800fd38:	f002 0204 	and.w	r2, r2, #4
 800fd3c:	2146      	movs	r1, #70	; 0x46
 800fd3e:	20c8      	movs	r0, #200	; 0xc8
 800fd40:	f005 facf 	bl	80152e2 <GUI_RadioBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 800fd44:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fd48:	237a      	movs	r3, #122	; 0x7a
 800fd4a:	4619      	mov	r1, r3
 800fd4c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fd50:	200a      	movs	r0, #10
 800fd52:	9400      	str	r4, [sp, #0]
 800fd54:	f00e fa84 	bl	801e260 <TFT_DrawLine>
		GUI_Text_CIE_Lab(20, 145);
 800fd58:	2191      	movs	r1, #145	; 0x91
 800fd5a:	2014      	movs	r0, #20
 800fd5c:	f008 fe1c 	bl	8018998 <GUI_Text_CIE_Lab>
		GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 800fd60:	782a      	ldrb	r2, [r5, #0]
 800fd62:	2301      	movs	r3, #1
 800fd64:	f002 0202 	and.w	r2, r2, #2
 800fd68:	2185      	movs	r1, #133	; 0x85
 800fd6a:	20c8      	movs	r0, #200	; 0xc8
 800fd6c:	f005 fab9 	bl	80152e2 <GUI_RadioBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 800fd70:	23b9      	movs	r3, #185	; 0xb9
 800fd72:	9400      	str	r4, [sp, #0]
 800fd74:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fd78:	4619      	mov	r1, r3
 800fd7a:	200a      	movs	r0, #10
 800fd7c:	f00e fa70 	bl	801e260 <TFT_DrawLine>
}
 800fd80:	b003      	add	sp, #12
 800fd82:	bd30      	pop	{r4, r5, pc}
 800fd84:	2000022a 	.word	0x2000022a
 800fd88:	20005279 	.word	0x20005279
 800fd8c:	20005277 	.word	0x20005277

0800fd90 <GUI_ColorRendSet_Screen>:
{
 800fd90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 800fd92:	4b28      	ldr	r3, [pc, #160]	; (800fe34 <GUI_ColorRendSet_Screen+0xa4>)
 800fd94:	4d28      	ldr	r5, [pc, #160]	; (800fe38 <GUI_ColorRendSet_Screen+0xa8>)
 800fd96:	4c29      	ldr	r4, [pc, #164]	; (800fe3c <GUI_ColorRendSet_Screen+0xac>)
 800fd98:	2202      	movs	r2, #2
 800fd9a:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fd9c:	4b28      	ldr	r3, [pc, #160]	; (800fe40 <GUI_ColorRendSet_Screen+0xb0>)
 800fd9e:	4a29      	ldr	r2, [pc, #164]	; (800fe44 <GUI_ColorRendSet_Screen+0xb4>)
 800fda0:	781b      	ldrb	r3, [r3, #0]
 800fda2:	7812      	ldrb	r2, [r2, #0]
 800fda4:	429a      	cmp	r2, r3
 800fda6:	d103      	bne.n	800fdb0 <GUI_ColorRendSet_Screen+0x20>
 800fda8:	782a      	ldrb	r2, [r5, #0]
 800fdaa:	7823      	ldrb	r3, [r4, #0]
 800fdac:	429a      	cmp	r2, r3
 800fdae:	d03e      	beq.n	800fe2e <GUI_ColorRendSet_Screen+0x9e>
		GUI_Panels();
 800fdb0:	f7ff fc22 	bl	800f5f8 <GUI_Panels>
		Language_status_prev = Language_status;
 800fdb4:	7823      	ldrb	r3, [r4, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 800fdb6:	4a24      	ldr	r2, [pc, #144]	; (800fe48 <GUI_ColorRendSet_Screen+0xb8>)
		Language_status_prev = Language_status;
 800fdb8:	702b      	strb	r3, [r5, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 800fdba:	2110      	movs	r1, #16
 800fdbc:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 800fdbe:	b90b      	cbnz	r3, 800fdc4 <GUI_ColorRendSet_Screen+0x34>
			GUI_OptionMenuRu();
 800fdc0:	f7fe fff6 	bl	800edb0 <GUI_OptionMenuRu>
		if(Language_status == En){
 800fdc4:	7823      	ldrb	r3, [r4, #0]
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d101      	bne.n	800fdce <GUI_ColorRendSet_Screen+0x3e>
			GUI_OptionMenuEn();
 800fdca:	f7ff f861 	bl	800ee90 <GUI_OptionMenuEn>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 800fdce:	4d1f      	ldr	r5, [pc, #124]	; (800fe4c <GUI_ColorRendSet_Screen+0xbc>)
			GUI_Text_CRI(30, 325);
 800fdd0:	f240 1145 	movw	r1, #325	; 0x145
 800fdd4:	201e      	movs	r0, #30
 800fdd6:	f008 ff7d 	bl	8018cd4 <GUI_Text_CRI>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 800fdda:	782a      	ldrb	r2, [r5, #0]
 800fddc:	2301      	movs	r3, #1
 800fdde:	401a      	ands	r2, r3
 800fde0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800fde4:	20b9      	movs	r0, #185	; 0xb9
 800fde6:	f005 fa7c 	bl	80152e2 <GUI_RadioBox>
			TFT_DrawLine(10, 355, 262, 355, TFT_White);
 800fdea:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fdee:	f240 1363 	movw	r3, #355	; 0x163
 800fdf2:	4619      	mov	r1, r3
 800fdf4:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fdf8:	200a      	movs	r0, #10
 800fdfa:	9400      	str	r4, [sp, #0]
 800fdfc:	f00e fa30 	bl	801e260 <TFT_DrawLine>
			GUI_Text_CQS(30, 369);
 800fe00:	f240 1171 	movw	r1, #369	; 0x171
 800fe04:	201e      	movs	r0, #30
 800fe06:	f008 ff89 	bl	8018d1c <GUI_Text_CQS>
			GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 800fe0a:	782a      	ldrb	r2, [r5, #0]
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	43d2      	mvns	r2, r2
 800fe10:	401a      	ands	r2, r3
 800fe12:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800fe16:	20b9      	movs	r0, #185	; 0xb9
 800fe18:	f005 fa63 	bl	80152e2 <GUI_RadioBox>
			TFT_DrawLine(10, 401, 262, 401, TFT_White);
 800fe1c:	f240 1391 	movw	r3, #401	; 0x191
 800fe20:	9400      	str	r4, [sp, #0]
 800fe22:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fe26:	4619      	mov	r1, r3
 800fe28:	200a      	movs	r0, #10
 800fe2a:	f00e fa19 	bl	801e260 <TFT_DrawLine>
}
 800fe2e:	b003      	add	sp, #12
 800fe30:	bd30      	pop	{r4, r5, pc}
 800fe32:	bf00      	nop
 800fe34:	20000230 	.word	0x20000230
 800fe38:	2008c314 	.word	0x2008c314
 800fe3c:	2000527b 	.word	0x2000527b
 800fe40:	2000022a 	.word	0x2000022a
 800fe44:	20005279 	.word	0x20005279
 800fe48:	2008c8b8 	.word	0x2008c8b8
 800fe4c:	20005278 	.word	0x20005278

0800fe50 <GUI_Graph_Screen>:
void GUI_Graph_Screen(){
 800fe50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe54:	ed2d 8b02 	vpush	{d8}
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 800fe58:	4b87      	ldr	r3, [pc, #540]	; (8010078 <GUI_Graph_Screen+0x228>)
 800fe5a:	4a88      	ldr	r2, [pc, #544]	; (801007c <GUI_Graph_Screen+0x22c>)
 800fe5c:	781b      	ldrb	r3, [r3, #0]
 800fe5e:	7812      	ldrb	r2, [r2, #0]
 800fe60:	4d87      	ldr	r5, [pc, #540]	; (8010080 <GUI_Graph_Screen+0x230>)
 800fe62:	4c88      	ldr	r4, [pc, #544]	; (8010084 <GUI_Graph_Screen+0x234>)
 800fe64:	429a      	cmp	r2, r3
void GUI_Graph_Screen(){
 800fe66:	b083      	sub	sp, #12
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 800fe68:	d104      	bne.n	800fe74 <GUI_Graph_Screen+0x24>
 800fe6a:	782a      	ldrb	r2, [r5, #0]
 800fe6c:	7823      	ldrb	r3, [r4, #0]
 800fe6e:	429a      	cmp	r2, r3
 800fe70:	f000 809d 	beq.w	800ffae <GUI_Graph_Screen+0x15e>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800fe74:	2063      	movs	r0, #99	; 0x63
 800fe76:	f00e f851 	bl	801df1c <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 800fe7a:	4a83      	ldr	r2, [pc, #524]	; (8010088 <GUI_Graph_Screen+0x238>)
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 800fe80:	4a82      	ldr	r2, [pc, #520]	; (801008c <GUI_Graph_Screen+0x23c>)
 800fe82:	7013      	strb	r3, [r2, #0]
		GUI_Panels();		
 800fe84:	f7ff fbb8 	bl	800f5f8 <GUI_Panels>
		Rotation_Screen_Spectral_Old = Rotation_Screen_Spectral;
 800fe88:	7820      	ldrb	r0, [r4, #0]
 800fe8a:	7028      	strb	r0, [r5, #0]
		if(Graph_Field&PPF_Bands)
 800fe8c:	4d80      	ldr	r5, [pc, #512]	; (8010090 <GUI_Graph_Screen+0x240>)
 800fe8e:	782b      	ldrb	r3, [r5, #0]
 800fe90:	07d9      	lsls	r1, r3, #31
 800fe92:	d501      	bpl.n	800fe98 <GUI_Graph_Screen+0x48>
			Spectral_PAR_Range(Rotation_Screen_Spectral);
 800fe94:	f00d fa78 	bl	801d388 <Spectral_PAR_Range>
		if(Graph_Field&V_lambda)
 800fe98:	782b      	ldrb	r3, [r5, #0]
 800fe9a:	075a      	lsls	r2, r3, #29
 800fe9c:	d538      	bpl.n	800ff10 <GUI_Graph_Screen+0xc0>
			if(Rotation_Screen_Spectral == 0)
 800fe9e:	7820      	ldrb	r0, [r4, #0]
 800fea0:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80100a0 <GUI_Graph_Screen+0x250>
 800fea4:	f8df c210 	ldr.w	ip, [pc, #528]	; 80100b8 <GUI_Graph_Screen+0x268>
 800fea8:	4e7a      	ldr	r6, [pc, #488]	; (8010094 <GUI_Graph_Screen+0x244>)
 800feaa:	4f7b      	ldr	r7, [pc, #492]	; (8010098 <GUI_Graph_Screen+0x248>)
 800feac:	2800      	cmp	r0, #0
 800feae:	f040 8086 	bne.w	800ffbe <GUI_Graph_Screen+0x16e>
						buf_pix = (Spectral_day[i])*307;
 800feb2:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 801009c <GUI_Graph_Screen+0x24c>
 800feb6:	4603      	mov	r3, r0
 800feb8:	0119      	lsls	r1, r3, #4
 800feba:	eb0c 0201 	add.w	r2, ip, r1
 800febe:	edd2 7a00 	vldr	s15, [r2]
 800fec2:	ee67 7a87 	vmul.f32	s15, s15, s14
						buf_pix = (Spectral_night[i])*307;
 800fec6:	4439      	add	r1, r7
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 800fec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fecc:	ee17 2a90 	vmov	r2, s15
						buf_pix = (Spectral_night[i])*307;
 800fed0:	edd1 7a00 	vldr	s15, [r1]
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 800fed4:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
						buf_pix = (Spectral_night[i])*307;
 800fed8:	ee67 7a87 	vmul.f32	s15, s15, s14
						graph_spectral_night[jj] = (uint16_t)buf_pix;
 800fedc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fee0:	ee17 2a90 	vmov	r2, s15
 800fee4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800fee8:	3301      	adds	r3, #1
				for(uint16_t i = 0; i < 1024; i+=4)
 800feea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800feee:	d1e3      	bne.n	800feb8 <GUI_Graph_Screen+0x68>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, Rotation_Screen_Spectral);
 800fef0:	2114      	movs	r1, #20
 800fef2:	9000      	str	r0, [sp, #0]
 800fef4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800fef8:	4608      	mov	r0, r1
 800fefa:	4a69      	ldr	r2, [pc, #420]	; (80100a0 <GUI_Graph_Screen+0x250>)
 800fefc:	f00d fc04 	bl	801d708 <Spectral_DrawGraph_Const>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, Rotation_Screen_Spectral);
 800ff00:	7823      	ldrb	r3, [r4, #0]
 800ff02:	9300      	str	r3, [sp, #0]
 800ff04:	2114      	movs	r1, #20
 800ff06:	231f      	movs	r3, #31
 800ff08:	4a62      	ldr	r2, [pc, #392]	; (8010094 <GUI_Graph_Screen+0x244>)
 800ff0a:	4608      	mov	r0, r1
 800ff0c:	f00d fbfc 	bl	801d708 <Spectral_DrawGraph_Const>
			if(Graph_Field&EbEr_graph)
 800ff10:	782b      	ldrb	r3, [r5, #0]
 800ff12:	079b      	lsls	r3, r3, #30
 800ff14:	d545      	bpl.n	800ffa2 <GUI_Graph_Screen+0x152>
				if(Rotation_Screen_Spectral == 0)
 800ff16:	7826      	ldrb	r6, [r4, #0]
 800ff18:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80100ac <GUI_Graph_Screen+0x25c>
 800ff1c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80100bc <GUI_Graph_Screen+0x26c>
 800ff20:	4f60      	ldr	r7, [pc, #384]	; (80100a4 <GUI_Graph_Screen+0x254>)
 800ff22:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80100c0 <GUI_Graph_Screen+0x270>
 800ff26:	2e00      	cmp	r6, #0
 800ff28:	d16c      	bne.n	8010004 <GUI_Graph_Screen+0x1b4>
							buf_pix = (Hazard_Blue[i])*307;
 800ff2a:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 801009c <GUI_Graph_Screen+0x24c>
 800ff2e:	4635      	mov	r5, r6
 800ff30:	012a      	lsls	r2, r5, #4
 800ff32:	eb0a 0302 	add.w	r3, sl, r2
 800ff36:	edd3 7a00 	vldr	s15, [r3]
 800ff3a:	ee67 7a88 	vmul.f32	s15, s15, s16
							buf_pix = (Hazard_Retina[i])/10.*307;
 800ff3e:	4442      	add	r2, r8
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 800ff40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
							buf_pix = (Hazard_Retina[i])/10.*307;
 800ff44:	6810      	ldr	r0, [r2, #0]
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 800ff46:	ee17 3a90 	vmov	r3, s15
 800ff4a:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
							buf_pix = (Hazard_Retina[i])/10.*307;
 800ff4e:	f7f0 fb13 	bl	8000578 <__aeabi_f2d>
 800ff52:	2200      	movs	r2, #0
 800ff54:	4b54      	ldr	r3, [pc, #336]	; (80100a8 <GUI_Graph_Screen+0x258>)
 800ff56:	f7f0 fc8d 	bl	8000874 <__aeabi_ddiv>
 800ff5a:	a343      	add	r3, pc, #268	; (adr r3, 8010068 <GUI_Graph_Screen+0x218>)
 800ff5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff60:	f7f0 fb5e 	bl	8000620 <__aeabi_dmul>
 800ff64:	f7f0 fe54 	bl	8000c10 <__aeabi_d2f>
							graph_spectral_Retina[jj] = (uint16_t)buf_pix;
 800ff68:	ee07 0a90 	vmov	s15, r0
 800ff6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff70:	ee17 0a90 	vmov	r0, s15
 800ff74:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 800ff78:	3501      	adds	r5, #1
					for(uint16_t i = 0; i < 1024; i+=4)
 800ff7a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800ff7e:	d1d7      	bne.n	800ff30 <GUI_Graph_Screen+0xe0>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, Rotation_Screen_Spectral);
 800ff80:	2114      	movs	r1, #20
 800ff82:	4608      	mov	r0, r1
 800ff84:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800ff88:	4a48      	ldr	r2, [pc, #288]	; (80100ac <GUI_Graph_Screen+0x25c>)
 800ff8a:	9600      	str	r6, [sp, #0]
 800ff8c:	f00d fbbc 	bl	801d708 <Spectral_DrawGraph_Const>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, Rotation_Screen_Spectral);
 800ff90:	7823      	ldrb	r3, [r4, #0]
 800ff92:	9300      	str	r3, [sp, #0]
 800ff94:	2114      	movs	r1, #20
 800ff96:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800ff9a:	4a42      	ldr	r2, [pc, #264]	; (80100a4 <GUI_Graph_Screen+0x254>)
 800ff9c:	4608      	mov	r0, r1
 800ff9e:	f00d fbb3 	bl	801d708 <Spectral_DrawGraph_Const>
		Spectral_Axes(Rotation_Screen_Spectral);
 800ffa2:	7820      	ldrb	r0, [r4, #0]
 800ffa4:	f00d f922 	bl	801d1ec <Spectral_Axes>
		Spectral_Axes_Text(Rotation_Screen_Spectral);
 800ffa8:	7820      	ldrb	r0, [r4, #0]
 800ffaa:	f00d facf 	bl	801d54c <Spectral_Axes_Text>
	Prev_Inf_Screen = Graph_Screen;	
 800ffae:	4b40      	ldr	r3, [pc, #256]	; (80100b0 <GUI_Graph_Screen+0x260>)
 800ffb0:	2204      	movs	r2, #4
 800ffb2:	701a      	strb	r2, [r3, #0]
}
 800ffb4:	b003      	add	sp, #12
 800ffb6:	ecbd 8b02 	vpop	{d8}
 800ffba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								buf_pix = (Spectral_day[i])*209;
 800ffbe:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80100b4 <GUI_Graph_Screen+0x264>
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	f04f 080c 	mov.w	r8, #12
 800ffc8:	fb08 f103 	mul.w	r1, r8, r3
 800ffcc:	eb0c 0201 	add.w	r2, ip, r1
 800ffd0:	edd2 7a00 	vldr	s15, [r2]
 800ffd4:	ee67 7a87 	vmul.f32	s15, s15, s14
								buf_pix = (Spectral_night[i])*209;
 800ffd8:	4439      	add	r1, r7
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 800ffda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffde:	ee17 2a90 	vmov	r2, s15
								buf_pix = (Spectral_night[i])*209;
 800ffe2:	edd1 7a00 	vldr	s15, [r1]
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 800ffe6:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
								buf_pix = (Spectral_night[i])*209;
 800ffea:	ee67 7a87 	vmul.f32	s15, s15, s14
								graph_spectral_night[ii] = (uint16_t)buf_pix;
 800ffee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fff2:	ee17 2a90 	vmov	r2, s15
 800fff6:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800fffa:	3301      	adds	r3, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 800fffc:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8010000:	d1e2      	bne.n	800ffc8 <GUI_Graph_Screen+0x178>
 8010002:	e775      	b.n	800fef0 <GUI_Graph_Screen+0xa0>
								buf_pix = (Hazard_Blue[i])*209;
 8010004:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 80100b4 <GUI_Graph_Screen+0x264>
 8010008:	2500      	movs	r5, #0
 801000a:	f04f 0b0c 	mov.w	fp, #12
 801000e:	fb0b f205 	mul.w	r2, fp, r5
 8010012:	eb0a 0302 	add.w	r3, sl, r2
 8010016:	edd3 7a00 	vldr	s15, [r3]
 801001a:	ee67 7a88 	vmul.f32	s15, s15, s16
								buf_pix = (Hazard_Retina[i])/10.*209;
 801001e:	4442      	add	r2, r8
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 8010020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
								buf_pix = (Hazard_Retina[i])/10.*209;
 8010024:	6810      	ldr	r0, [r2, #0]
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 8010026:	ee17 3a90 	vmov	r3, s15
 801002a:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
								buf_pix = (Hazard_Retina[i])/10.*209;
 801002e:	f7f0 faa3 	bl	8000578 <__aeabi_f2d>
 8010032:	2200      	movs	r2, #0
 8010034:	4b1c      	ldr	r3, [pc, #112]	; (80100a8 <GUI_Graph_Screen+0x258>)
 8010036:	f7f0 fc1d 	bl	8000874 <__aeabi_ddiv>
 801003a:	a30d      	add	r3, pc, #52	; (adr r3, 8010070 <GUI_Graph_Screen+0x220>)
 801003c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010040:	f7f0 faee 	bl	8000620 <__aeabi_dmul>
 8010044:	f7f0 fde4 	bl	8000c10 <__aeabi_d2f>
								graph_spectral_Retina[ii] = (uint16_t)buf_pix;
 8010048:	ee07 0a90 	vmov	s15, r0
 801004c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010050:	ee17 0a90 	vmov	r0, s15
 8010054:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 8010058:	3501      	adds	r5, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 801005a:	f5b5 7fab 	cmp.w	r5, #342	; 0x156
 801005e:	d1d6      	bne.n	801000e <GUI_Graph_Screen+0x1be>
 8010060:	e78e      	b.n	800ff80 <GUI_Graph_Screen+0x130>
 8010062:	bf00      	nop
 8010064:	f3af 8000 	nop.w
 8010068:	00000000 	.word	0x00000000
 801006c:	40733000 	.word	0x40733000
 8010070:	00000000 	.word	0x00000000
 8010074:	406a2000 	.word	0x406a2000
 8010078:	2000022a 	.word	0x2000022a
 801007c:	20005279 	.word	0x20005279
 8010080:	2008c8b9 	.word	0x2008c8b9
 8010084:	20005282 	.word	0x20005282
 8010088:	2000529f 	.word	0x2000529f
 801008c:	2000529e 	.word	0x2000529e
 8010090:	2000527a 	.word	0x2000527a
 8010094:	2008cb80 	.word	0x2008cb80
 8010098:	2004f1e8 	.word	0x2004f1e8
 801009c:	43998000 	.word	0x43998000
 80100a0:	2008c5e2 	.word	0x2008c5e2
 80100a4:	2008c31c 	.word	0x2008c31c
 80100a8:	40240000 	.word	0x40240000
 80100ac:	2008c8ba 	.word	0x2008c8ba
 80100b0:	2008c315 	.word	0x2008c315
 80100b4:	43510000 	.word	0x43510000
 80100b8:	2004e1e8 	.word	0x2004e1e8
 80100bc:	200055e0 	.word	0x200055e0
 80100c0:	200065e0 	.word	0x200065e0

080100c4 <GUI_SignalLevel>:
}



void GUI_SignalLevel()
{
 80100c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(oldHighSignal != highSignal)
 80100c6:	4f2a      	ldr	r7, [pc, #168]	; (8010170 <GUI_SignalLevel+0xac>)
 80100c8:	4e2a      	ldr	r6, [pc, #168]	; (8010174 <GUI_SignalLevel+0xb0>)
 80100ca:	783b      	ldrb	r3, [r7, #0]
 80100cc:	7832      	ldrb	r2, [r6, #0]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d00a      	beq.n	80100e8 <GUI_SignalLevel+0x24>
  {
    if(highSignal)
 80100d2:	b363      	cbz	r3, 801012e <GUI_SignalLevel+0x6a>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 80100d4:	4b28      	ldr	r3, [pc, #160]	; (8010178 <GUI_SignalLevel+0xb4>)
 80100d6:	781a      	ldrb	r2, [r3, #0]
 80100d8:	4b28      	ldr	r3, [pc, #160]	; (801017c <GUI_SignalLevel+0xb8>)
 80100da:	211e      	movs	r1, #30
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	b9f2      	cbnz	r2, 801011e <GUI_SignalLevel+0x5a>
 80100e0:	b1cb      	cbz	r3, 8010116 <GUI_SignalLevel+0x52>
 80100e2:	200f      	movs	r0, #15
 80100e4:	f00b fa7e 	bl	801b5e4 <GUI_TextMsgRu_HighIrradiance>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
  
  if(oldLowSignal != lowSignal)
 80100e8:	4d25      	ldr	r5, [pc, #148]	; (8010180 <GUI_SignalLevel+0xbc>)
 80100ea:	4c26      	ldr	r4, [pc, #152]	; (8010184 <GUI_SignalLevel+0xc0>)
 80100ec:	782b      	ldrb	r3, [r5, #0]
 80100ee:	7820      	ldrb	r0, [r4, #0]
 80100f0:	4298      	cmp	r0, r3
 80100f2:	d00a      	beq.n	801010a <GUI_SignalLevel+0x46>
  {
    if(lowSignal)
 80100f4:	b38b      	cbz	r3, 801015a <GUI_SignalLevel+0x96>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 80100f6:	4b20      	ldr	r3, [pc, #128]	; (8010178 <GUI_SignalLevel+0xb4>)
 80100f8:	781a      	ldrb	r2, [r3, #0]
 80100fa:	4b20      	ldr	r3, [pc, #128]	; (801017c <GUI_SignalLevel+0xb8>)
 80100fc:	211e      	movs	r1, #30
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	bb1a      	cbnz	r2, 801014a <GUI_SignalLevel+0x86>
 8010102:	b1f3      	cbz	r3, 8010142 <GUI_SignalLevel+0x7e>
 8010104:	2014      	movs	r0, #20
 8010106:	f00b f975 	bl	801b3f4 <GUI_TextMsgRu_LowIrradiance>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
	oldHighSignal = highSignal;
 801010a:	783b      	ldrb	r3, [r7, #0]
 801010c:	7033      	strb	r3, [r6, #0]
	oldLowSignal = lowSignal;
 801010e:	782b      	ldrb	r3, [r5, #0]
 8010110:	7023      	strb	r3, [r4, #0]
}
 8010112:	b003      	add	sp, #12
 8010114:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 8010116:	2032      	movs	r0, #50	; 0x32
 8010118:	f00b fb00 	bl	801b71c <GUI_TextMsgRu_HighRadiance>
 801011c:	e7e4      	b.n	80100e8 <GUI_SignalLevel+0x24>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
 801011e:	2037      	movs	r0, #55	; 0x37
 8010120:	b113      	cbz	r3, 8010128 <GUI_SignalLevel+0x64>
 8010122:	f009 f9fd 	bl	8019520 <GUI_TextMsgEn_HighIrradiance>
 8010126:	e7df      	b.n	80100e8 <GUI_SignalLevel+0x24>
 8010128:	f009 fa72 	bl	8019610 <GUI_TextMsgEn_HighRadiance>
 801012c:	e7dc      	b.n	80100e8 <GUI_SignalLevel+0x24>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 801012e:	2363      	movs	r3, #99	; 0x63
 8010130:	9300      	str	r3, [sp, #0]
 8010132:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8010136:	2338      	movs	r3, #56	; 0x38
 8010138:	2120      	movs	r1, #32
 801013a:	200a      	movs	r0, #10
 801013c:	f00e f8ed 	bl	801e31a <TFT_FillRectangle>
 8010140:	e7d2      	b.n	80100e8 <GUI_SignalLevel+0x24>
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 8010142:	2037      	movs	r0, #55	; 0x37
 8010144:	f00b f9e4 	bl	801b510 <GUI_TextMsgRu_LowRadiance>
 8010148:	e7df      	b.n	801010a <GUI_SignalLevel+0x46>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
 801014a:	2046      	movs	r0, #70	; 0x46
 801014c:	b113      	cbz	r3, 8010154 <GUI_SignalLevel+0x90>
 801014e:	f009 fb2d 	bl	80197ac <GUI_TextMsgEn_LowIrradiance>
 8010152:	e7da      	b.n	801010a <GUI_SignalLevel+0x46>
 8010154:	f009 fac6 	bl	80196e4 <GUI_TextMsgEn_LowRadiance>
 8010158:	e7d7      	b.n	801010a <GUI_SignalLevel+0x46>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 801015a:	2363      	movs	r3, #99	; 0x63
 801015c:	9300      	str	r3, [sp, #0]
 801015e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8010162:	2338      	movs	r3, #56	; 0x38
 8010164:	2120      	movs	r1, #32
 8010166:	200a      	movs	r0, #10
 8010168:	f00e f8d7 	bl	801e31a <TFT_FillRectangle>
 801016c:	e7cd      	b.n	801010a <GUI_SignalLevel+0x46>
 801016e:	bf00      	nop
 8010170:	2008be63 	.word	0x2008be63
 8010174:	2000529e 	.word	0x2000529e
 8010178:	2000527b 	.word	0x2000527b
 801017c:	20000a48 	.word	0x20000a48
 8010180:	2008be66 	.word	0x2008be66
 8010184:	2000529f 	.word	0x2000529f

08010188 <GUI_Measure_Screen>:
void GUI_Measure_Screen(){
 8010188:	b510      	push	{r4, lr}
	if(preGUI_screen_state != GUI_screen_state){
 801018a:	4910      	ldr	r1, [pc, #64]	; (80101cc <GUI_Measure_Screen+0x44>)
 801018c:	4c10      	ldr	r4, [pc, #64]	; (80101d0 <GUI_Measure_Screen+0x48>)
 801018e:	7809      	ldrb	r1, [r1, #0]
 8010190:	7822      	ldrb	r2, [r4, #0]
 8010192:	4291      	cmp	r1, r2
 8010194:	d014      	beq.n	80101c0 <GUI_Measure_Screen+0x38>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 8010196:	2063      	movs	r0, #99	; 0x63
 8010198:	f00d fec0 	bl	801df1c <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 801019c:	4b0d      	ldr	r3, [pc, #52]	; (80101d4 <GUI_Measure_Screen+0x4c>)
 801019e:	2000      	movs	r0, #0
 80101a0:	7018      	strb	r0, [r3, #0]
		oldHighSignal = 0;
 80101a2:	4b0d      	ldr	r3, [pc, #52]	; (80101d8 <GUI_Measure_Screen+0x50>)
 80101a4:	7018      	strb	r0, [r3, #0]
		screen_count = 0;
 80101a6:	4b0d      	ldr	r3, [pc, #52]	; (80101dc <GUI_Measure_Screen+0x54>)
 80101a8:	7018      	strb	r0, [r3, #0]
		Measure_Elements_Draw(0);
 80101aa:	f7fe ff0d 	bl	800efc8 <Measure_Elements_Draw>
		GUI_Up_Panel();
 80101ae:	f7ff f9bb 	bl	800f528 <GUI_Up_Panel>
		GUI_Down_Panel();
 80101b2:	f7ff f9dd 	bl	800f570 <GUI_Down_Panel>
		Prev_Inf_Screen = Measure_Screen;
 80101b6:	4a0a      	ldr	r2, [pc, #40]	; (80101e0 <GUI_Measure_Screen+0x58>)
 80101b8:	2301      	movs	r3, #1
 80101ba:	7013      	strb	r3, [r2, #0]
		preGUI_screen_state = Measure_Screen;
 80101bc:	7023      	strb	r3, [r4, #0]
 80101be:	bd10      	pop	{r4, pc}
		GUI_SignalLevel();
 80101c0:	f7ff ff80 	bl	80100c4 <GUI_SignalLevel>
		Measure_Elements_Draw(0);
 80101c4:	2000      	movs	r0, #0
 80101c6:	f7fe feff 	bl	800efc8 <Measure_Elements_Draw>
 80101ca:	e7f4      	b.n	80101b6 <GUI_Measure_Screen+0x2e>
 80101cc:	20005279 	.word	0x20005279
 80101d0:	2000022a 	.word	0x2000022a
 80101d4:	2000529f 	.word	0x2000529f
 80101d8:	2000529e 	.word	0x2000529e
 80101dc:	200052a3 	.word	0x200052a3
 80101e0:	2008c315 	.word	0x2008c315

080101e4 <GUI_Measure2_Screen>:
{
 80101e4:	b510      	push	{r4, lr}
 old_meas_type_L = 2;
 80101e6:	4b13      	ldr	r3, [pc, #76]	; (8010234 <GUI_Measure2_Screen+0x50>)
 80101e8:	4c13      	ldr	r4, [pc, #76]	; (8010238 <GUI_Measure2_Screen+0x54>)
 80101ea:	2202      	movs	r2, #2
 80101ec:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != Measure2_Screen){
 80101ee:	4b13      	ldr	r3, [pc, #76]	; (801023c <GUI_Measure2_Screen+0x58>)
 80101f0:	781b      	ldrb	r3, [r3, #0]
 80101f2:	4293      	cmp	r3, r2
 80101f4:	d017      	beq.n	8010226 <GUI_Measure2_Screen+0x42>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 80101f6:	2063      	movs	r0, #99	; 0x63
 80101f8:	f00d fe90 	bl	801df1c <TFT_FillScreen_DMA>
		current_state_Measure_Draw = state_Measure_Elements;
 80101fc:	4b10      	ldr	r3, [pc, #64]	; (8010240 <GUI_Measure2_Screen+0x5c>)
 80101fe:	7818      	ldrb	r0, [r3, #0]
		screen_count = 1;
 8010200:	4b10      	ldr	r3, [pc, #64]	; (8010244 <GUI_Measure2_Screen+0x60>)
		current_state_Measure_Draw = state_Measure_Elements;
 8010202:	7020      	strb	r0, [r4, #0]
		screen_count = 1;
 8010204:	2201      	movs	r2, #1
 8010206:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 8010208:	4a0f      	ldr	r2, [pc, #60]	; (8010248 <GUI_Measure2_Screen+0x64>)
 801020a:	2300      	movs	r3, #0
 801020c:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 801020e:	4a0f      	ldr	r2, [pc, #60]	; (801024c <GUI_Measure2_Screen+0x68>)
 8010210:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 8010212:	f7fe fed9 	bl	800efc8 <Measure_Elements_Draw>
		GUI_Up_Panel();
 8010216:	f7ff f987 	bl	800f528 <GUI_Up_Panel>
		GUI_Down_Panel();
 801021a:	f7ff f9a9 	bl	800f570 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 801021e:	4b0c      	ldr	r3, [pc, #48]	; (8010250 <GUI_Measure2_Screen+0x6c>)
 8010220:	2201      	movs	r2, #1
 8010222:	701a      	strb	r2, [r3, #0]
 8010224:	bd10      	pop	{r4, pc}
			GUI_SignalLevel();
 8010226:	f7ff ff4d 	bl	80100c4 <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 801022a:	7820      	ldrb	r0, [r4, #0]
 801022c:	f7fe fecc 	bl	800efc8 <Measure_Elements_Draw>
 8010230:	e7f5      	b.n	801021e <GUI_Measure2_Screen+0x3a>
 8010232:	bf00      	nop
 8010234:	20000230 	.word	0x20000230
 8010238:	2000529c 	.word	0x2000529c
 801023c:	2000022a 	.word	0x2000022a
 8010240:	200052a8 	.word	0x200052a8
 8010244:	200052a3 	.word	0x200052a3
 8010248:	2000529f 	.word	0x2000529f
 801024c:	2000529e 	.word	0x2000529e
 8010250:	2008c315 	.word	0x2008c315

08010254 <GUI_Measure3_Screen>:
{
 8010254:	b538      	push	{r3, r4, r5, lr}
 old_meas_type_L = 2;
 8010256:	4b12      	ldr	r3, [pc, #72]	; (80102a0 <GUI_Measure3_Screen+0x4c>)
 8010258:	4c12      	ldr	r4, [pc, #72]	; (80102a4 <GUI_Measure3_Screen+0x50>)
 801025a:	2502      	movs	r5, #2
 801025c:	701d      	strb	r5, [r3, #0]
	if(preGUI_screen_state != Measure3_Screen){
 801025e:	4b12      	ldr	r3, [pc, #72]	; (80102a8 <GUI_Measure3_Screen+0x54>)
 8010260:	781b      	ldrb	r3, [r3, #0]
 8010262:	2b03      	cmp	r3, #3
 8010264:	d016      	beq.n	8010294 <GUI_Measure3_Screen+0x40>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 8010266:	2063      	movs	r0, #99	; 0x63
 8010268:	f00d fe58 	bl	801df1c <TFT_FillScreen_DMA>
		current_state_Measure_Draw= state_Measure_Elements;
 801026c:	4b0f      	ldr	r3, [pc, #60]	; (80102ac <GUI_Measure3_Screen+0x58>)
		oldLowSignal = 0;
 801026e:	4a10      	ldr	r2, [pc, #64]	; (80102b0 <GUI_Measure3_Screen+0x5c>)
		current_state_Measure_Draw= state_Measure_Elements;
 8010270:	7818      	ldrb	r0, [r3, #0]
		screen_count = 2;
 8010272:	4b10      	ldr	r3, [pc, #64]	; (80102b4 <GUI_Measure3_Screen+0x60>)
		current_state_Measure_Draw= state_Measure_Elements;
 8010274:	7020      	strb	r0, [r4, #0]
		screen_count = 2;
 8010276:	701d      	strb	r5, [r3, #0]
		oldLowSignal = 0;
 8010278:	2300      	movs	r3, #0
 801027a:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 801027c:	4a0e      	ldr	r2, [pc, #56]	; (80102b8 <GUI_Measure3_Screen+0x64>)
 801027e:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 8010280:	f7fe fea2 	bl	800efc8 <Measure_Elements_Draw>
		GUI_Up_Panel();
 8010284:	f7ff f950 	bl	800f528 <GUI_Up_Panel>
		GUI_Down_Panel();
 8010288:	f7ff f972 	bl	800f570 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 801028c:	4b0b      	ldr	r3, [pc, #44]	; (80102bc <GUI_Measure3_Screen+0x68>)
 801028e:	2201      	movs	r2, #1
 8010290:	701a      	strb	r2, [r3, #0]
 8010292:	bd38      	pop	{r3, r4, r5, pc}
			GUI_SignalLevel();
 8010294:	f7ff ff16 	bl	80100c4 <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 8010298:	7820      	ldrb	r0, [r4, #0]
 801029a:	f7fe fe95 	bl	800efc8 <Measure_Elements_Draw>
 801029e:	e7f5      	b.n	801028c <GUI_Measure3_Screen+0x38>
 80102a0:	20000230 	.word	0x20000230
 80102a4:	2000529c 	.word	0x2000529c
 80102a8:	2000022a 	.word	0x2000022a
 80102ac:	200052a8 	.word	0x200052a8
 80102b0:	2000529f 	.word	0x2000529f
 80102b4:	200052a3 	.word	0x200052a3
 80102b8:	2000529e 	.word	0x2000529e
 80102bc:	2008c315 	.word	0x2008c315

080102c0 <GUI_Color_Screen>:
void GUI_Color_Screen(){
 80102c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102c4:	ed2d 8b04 	vpush	{d8-d9}
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 80102c8:	4c8f      	ldr	r4, [pc, #572]	; (8010508 <GUI_Color_Screen+0x248>)
 80102ca:	4f90      	ldr	r7, [pc, #576]	; (801050c <GUI_Color_Screen+0x24c>)
 80102cc:	7823      	ldrb	r3, [r4, #0]
 80102ce:	4d90      	ldr	r5, [pc, #576]	; (8010510 <GUI_Color_Screen+0x250>)
 80102d0:	2b04      	cmp	r3, #4
void GUI_Color_Screen(){
 80102d2:	b089      	sub	sp, #36	; 0x24
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 80102d4:	d008      	beq.n	80102e8 <GUI_Color_Screen+0x28>
 80102d6:	7823      	ldrb	r3, [r4, #0]
 80102d8:	2b0e      	cmp	r3, #14
 80102da:	d005      	beq.n	80102e8 <GUI_Color_Screen+0x28>
 80102dc:	7823      	ldrb	r3, [r4, #0]
 80102de:	2b0f      	cmp	r3, #15
 80102e0:	d002      	beq.n	80102e8 <GUI_Color_Screen+0x28>
 80102e2:	7823      	ldrb	r3, [r4, #0]
 80102e4:	2b12      	cmp	r3, #18
 80102e6:	d125      	bne.n	8010334 <GUI_Color_Screen+0x74>
		GUI_Panels();	
 80102e8:	f7ff f986 	bl	800f5f8 <GUI_Panels>
		TFT_direction = Rotation_Screen_Color;
 80102ec:	4b89      	ldr	r3, [pc, #548]	; (8010514 <GUI_Color_Screen+0x254>)
 80102ee:	781b      	ldrb	r3, [r3, #0]
 80102f0:	703b      	strb	r3, [r7, #0]
		TFT_DrawBitmap(Color_Field&Color_CIE_xy? 18:
 80102f2:	782b      	ldrb	r3, [r5, #0]
 80102f4:	f013 0f05 	tst.w	r3, #5
 80102f8:	bf0c      	ite	eq
 80102fa:	200b      	moveq	r0, #11
 80102fc:	2012      	movne	r0, #18
 80102fe:	f013 0f04 	tst.w	r3, #4
 8010302:	4b85      	ldr	r3, [pc, #532]	; (8010518 <GUI_Color_Screen+0x258>)
 8010304:	bf18      	it	ne
 8010306:	21ac      	movne	r1, #172	; 0xac
 8010308:	cb0c      	ldmia	r3, {r2, r3}
 801030a:	bf08      	it	eq
 801030c:	2196      	moveq	r1, #150	; 0x96
 801030e:	f00e fa06 	bl	801e71e <TFT_DrawBitmap>
		flag = 0;	
 8010312:	4b82      	ldr	r3, [pc, #520]	; (801051c <GUI_Color_Screen+0x25c>)
 8010314:	2200      	movs	r2, #0
 8010316:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 8010318:	4b81      	ldr	r3, [pc, #516]	; (8010520 <GUI_Color_Screen+0x260>)
 801031a:	701a      	strb	r2, [r3, #0]
		oldHighSignal = 0;
 801031c:	4b81      	ldr	r3, [pc, #516]	; (8010524 <GUI_Color_Screen+0x264>)
 801031e:	701a      	strb	r2, [r3, #0]
		if(Color_Field&Color_CIE_xy){GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);}
 8010320:	782b      	ldrb	r3, [r5, #0]
 8010322:	f013 0101 	ands.w	r1, r3, #1
 8010326:	f000 80cf 	beq.w	80104c8 <GUI_Color_Screen+0x208>
 801032a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801032e:	2012      	movs	r0, #18
 8010330:	f008 f858 	bl	80183e4 <GUI_Axes_Locus_XY>
	Prev_Inf_Screen = Color_Screen;
 8010334:	4a7c      	ldr	r2, [pc, #496]	; (8010528 <GUI_Color_Screen+0x268>)
	preGUI_screen_state = Color_Screen;
 8010336:	2305      	movs	r3, #5
 8010338:	7023      	strb	r3, [r4, #0]
	Prev_Inf_Screen = Color_Screen;
 801033a:	7013      	strb	r3, [r2, #0]
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 801033c:	4b7b      	ldr	r3, [pc, #492]	; (801052c <GUI_Color_Screen+0x26c>)
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	2b00      	cmp	r3, #0
 8010342:	f040 80d4 	bne.w	80104ee <GUI_Color_Screen+0x22e>
 8010346:	4b7a      	ldr	r3, [pc, #488]	; (8010530 <GUI_Color_Screen+0x270>)
 8010348:	edd3 8a00 	vldr	s17, [r3]
colorimetry_xy_buff[1] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[1] : colorimetry_xy1931[1];
 801034c:	ed93 8a01 	vldr	s16, [r3, #4]
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 8010350:	782b      	ldrb	r3, [r5, #0]
 8010352:	07d9      	lsls	r1, r3, #31
 8010354:	f140 8102 	bpl.w	801055c <GUI_Color_Screen+0x29c>
 8010358:	4b76      	ldr	r3, [pc, #472]	; (8010534 <GUI_Color_Screen+0x274>)
 801035a:	4a77      	ldr	r2, [pc, #476]	; (8010538 <GUI_Color_Screen+0x278>)
		 scr_refresh++;
 801035c:	4e77      	ldr	r6, [pc, #476]	; (801053c <GUI_Color_Screen+0x27c>)
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	7812      	ldrb	r2, [r2, #0]
 8010362:	eef0 0a48 	vmov.f32	s1, s16
 8010366:	eeb0 0a68 	vmov.f32	s0, s17
 801036a:	2146      	movs	r1, #70	; 0x46
 801036c:	2014      	movs	r0, #20
 801036e:	f006 fcf1 	bl	8016d54 <GUI_Text_xy_Measure>
		 scr_refresh++;
 8010372:	7833      	ldrb	r3, [r6, #0]
 8010374:	3301      	adds	r3, #1
 8010376:	b2db      	uxtb	r3, r3
   if(scr_refresh > 15 ){
 8010378:	2b0f      	cmp	r3, #15
		 scr_refresh++;
 801037a:	7033      	strb	r3, [r6, #0]
   if(scr_refresh > 15 ){
 801037c:	f240 809b 	bls.w	80104b6 <GUI_Color_Screen+0x1f6>
		 if(colorimetry_xy_buff[0] < 0.74 & colorimetry_xy_buff[1] < 0.84 ){
 8010380:	ee18 0a90 	vmov	r0, s17
 8010384:	f7f0 f8f8 	bl	8000578 <__aeabi_f2d>
 8010388:	a35b      	add	r3, pc, #364	; (adr r3, 80104f8 <GUI_Color_Screen+0x238>)
 801038a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801038e:	f04f 0401 	mov.w	r4, #1
 8010392:	f7f0 fbb7 	bl	8000b04 <__aeabi_dcmplt>
 8010396:	b900      	cbnz	r0, 801039a <GUI_Color_Screen+0xda>
 8010398:	4604      	mov	r4, r0
 801039a:	f014 0fff 	tst.w	r4, #255	; 0xff
 801039e:	f000 808a 	beq.w	80104b6 <GUI_Color_Screen+0x1f6>
 80103a2:	ee18 0a10 	vmov	r0, s16
 80103a6:	f7f0 f8e7 	bl	8000578 <__aeabi_f2d>
 80103aa:	a355      	add	r3, pc, #340	; (adr r3, 8010500 <GUI_Color_Screen+0x240>)
 80103ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103b0:	f04f 0401 	mov.w	r4, #1
 80103b4:	f7f0 fba6 	bl	8000b04 <__aeabi_dcmplt>
 80103b8:	b900      	cbnz	r0, 80103bc <GUI_Color_Screen+0xfc>
 80103ba:	4604      	mov	r4, r0
 80103bc:	f014 0fff 	tst.w	r4, #255	; 0xff
 80103c0:	d079      	beq.n	80104b6 <GUI_Color_Screen+0x1f6>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80103c2:	4b56      	ldr	r3, [pc, #344]	; (801051c <GUI_Color_Screen+0x25c>)
 80103c4:	4c5e      	ldr	r4, [pc, #376]	; (8010540 <GUI_Color_Screen+0x280>)
 80103c6:	781a      	ldrb	r2, [r3, #0]
 80103c8:	ed9f 9a5e 	vldr	s18, [pc, #376]	; 8010544 <GUI_Color_Screen+0x284>
 80103cc:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8010548 <GUI_Color_Screen+0x288>
 80103d0:	4698      	mov	r8, r3
 80103d2:	2a00      	cmp	r2, #0
 80103d4:	d03f      	beq.n	8010456 <GUI_Color_Screen+0x196>
 80103d6:	edd4 6a01 	vldr	s13, [r4, #4]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 80103da:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801054c <GUI_Color_Screen+0x28c>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80103de:	edd4 5a00 	vldr	s11, [r4]
 80103e2:	4a4d      	ldr	r2, [pc, #308]	; (8010518 <GUI_Color_Screen+0x258>)
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 80103e4:	eef1 6a66 	vneg.f32	s13, s13
 80103e8:	eea6 7a89 	vfma.f32	s14, s13, s18
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80103ec:	e892 0003 	ldmia.w	r2, {r0, r1}
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 80103f0:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80103f4:	ee37 7a46 	vsub.f32	s14, s14, s12
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80103f8:	ab01      	add	r3, sp, #4
 80103fa:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80103fe:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8010550 <GUI_Color_Screen+0x290>
 8010402:	edcd 7a04 	vstr	s15, [sp, #16]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010406:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 801040a:	eee5 7aa9 	vfma.f32	s15, s11, s19
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 801040e:	eea6 7a89 	vfma.f32	s14, s13, s18
 8010412:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010416:	ee37 7a46 	vsub.f32	s14, s14, s12
 801041a:	edcd 7a05 	vstr	s15, [sp, #20]
 801041e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010422:	edcd 7a06 	vstr	s15, [sp, #24]
 8010426:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 801042a:	eee5 7aa9 	vfma.f32	s15, s11, s19
 801042e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010436:	edcd 7a07 	vstr	s15, [sp, #28]
 801043a:	e883 0003 	stmia.w	r3, {r0, r1}
 801043e:	230f      	movs	r3, #15
 8010440:	9300      	str	r3, [sp, #0]
 8010442:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010446:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801044a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801044e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8010452:	f00e fa01 	bl	801e858 <TFT_DrawCutBMP>
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010456:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 801045a:	eee8 7aa9 	vfma.f32	s15, s17, s19
 801045e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010462:	2204      	movs	r2, #4
		colorimetry_xy_old[0] = colorimetry_xy_buff[0];
 8010464:	edc4 8a00 	vstr	s17, [r4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		colorimetry_xy_old[1] = colorimetry_xy_buff[1];
 801046c:	ed84 8a01 	vstr	s16, [r4, #4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010470:	edcd 7a04 	vstr	s15, [sp, #16]
 8010474:	eddf 7a37 	vldr	s15, [pc, #220]	; 8010554 <GUI_Color_Screen+0x294>
 8010478:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 801047c:	eee8 7a49 	vfms.f32	s15, s16, s18
 8010480:	4620      	mov	r0, r4
 8010482:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010486:	edcd 7a04 	vstr	s15, [sp, #16]
 801048a:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 801048e:	4629      	mov	r1, r5
 8010490:	f00d ff7f 	bl	801e392 <TFT_DrawFilledCircle>
		TFT_DrawFilledCircle(18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 2, TFT_Black);
 8010494:	2300      	movs	r3, #0
 8010496:	2202      	movs	r2, #2
 8010498:	4629      	mov	r1, r5
 801049a:	4620      	mov	r0, r4
 801049c:	f00d ff79 	bl	801e392 <TFT_DrawFilledCircle>
		GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);
 80104a0:	2200      	movs	r2, #0
 80104a2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80104a6:	2012      	movs	r0, #18
 80104a8:	f007 ff9c 	bl	80183e4 <GUI_Axes_Locus_XY>
		flag = 1;
 80104ac:	2301      	movs	r3, #1
 80104ae:	f888 3000 	strb.w	r3, [r8]
			scr_refresh = 0;
 80104b2:	2300      	movs	r3, #0
 80104b4:	7033      	strb	r3, [r6, #0]
	TFT_direction = 0x00;
 80104b6:	2300      	movs	r3, #0
 80104b8:	703b      	strb	r3, [r7, #0]
}         
 80104ba:	b009      	add	sp, #36	; 0x24
 80104bc:	ecbd 8b04 	vpop	{d8-d9}
 80104c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GUI_SignalLevel();
 80104c4:	f7ff bdfe 	b.w	80100c4 <GUI_SignalLevel>
		else if(Color_Field&Color_CIE_Luv){GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);}
 80104c8:	f013 0204 	ands.w	r2, r3, #4
 80104cc:	d006      	beq.n	80104dc <GUI_Color_Screen+0x21c>
 80104ce:	460a      	mov	r2, r1
 80104d0:	2012      	movs	r0, #18
 80104d2:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80104d6:	f007 ffeb 	bl	80184b0 <GUI_Axes_Locus_LUV>
 80104da:	e72b      	b.n	8010334 <GUI_Color_Screen+0x74>
		else if(Color_Field&Color_CIE_Lab) {GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);}
 80104dc:	0798      	lsls	r0, r3, #30
 80104de:	f57f af29 	bpl.w	8010334 <GUI_Color_Screen+0x74>
 80104e2:	f240 1113 	movw	r1, #275	; 0x113
 80104e6:	2088      	movs	r0, #136	; 0x88
 80104e8:	f008 f848 	bl	801857c <GUI_Axes_Locus_Lab>
 80104ec:	e722      	b.n	8010334 <GUI_Color_Screen+0x74>
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 80104ee:	4b1a      	ldr	r3, [pc, #104]	; (8010558 <GUI_Color_Screen+0x298>)
 80104f0:	e72a      	b.n	8010348 <GUI_Color_Screen+0x88>
 80104f2:	bf00      	nop
 80104f4:	f3af 8000 	nop.w
 80104f8:	7ae147ae 	.word	0x7ae147ae
 80104fc:	3fe7ae14 	.word	0x3fe7ae14
 8010500:	ae147ae1 	.word	0xae147ae1
 8010504:	3feae147 	.word	0x3feae147
 8010508:	2000022a 	.word	0x2000022a
 801050c:	20005218 	.word	0x20005218
 8010510:	20005277 	.word	0x20005277
 8010514:	20005280 	.word	0x20005280
 8010518:	2008c8b0 	.word	0x2008c8b0
 801051c:	2000529d 	.word	0x2000529d
 8010520:	2000529f 	.word	0x2000529f
 8010524:	2000529e 	.word	0x2000529e
 8010528:	2008c315 	.word	0x2008c315
 801052c:	2000527c 	.word	0x2000527c
 8010530:	2008adec 	.word	0x2008adec
 8010534:	20000a4c 	.word	0x20000a4c
 8010538:	20000a4d 	.word	0x20000a4d
 801053c:	200052a2 	.word	0x200052a2
 8010540:	20005294 	.word	0x20005294
 8010544:	43960000 	.word	0x43960000
 8010548:	43938000 	.word	0x43938000
 801054c:	43790000 	.word	0x43790000
 8010550:	43c78000 	.word	0x43c78000
 8010554:	43c80000 	.word	0x43c80000
 8010558:	2008ade4 	.word	0x2008ade4
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 801055c:	075a      	lsls	r2, r3, #29
 801055e:	f140 80fb 	bpl.w	8010758 <GUI_Color_Screen+0x498>
 8010562:	4c71      	ldr	r4, [pc, #452]	; (8010728 <GUI_Color_Screen+0x468>)
 8010564:	4b71      	ldr	r3, [pc, #452]	; (801072c <GUI_Color_Screen+0x46c>)
 8010566:	4a72      	ldr	r2, [pc, #456]	; (8010730 <GUI_Color_Screen+0x470>)
		scr_refresh++;
 8010568:	4e72      	ldr	r6, [pc, #456]	; (8010734 <GUI_Color_Screen+0x474>)
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	7812      	ldrb	r2, [r2, #0]
 801056e:	edd4 0a01 	vldr	s1, [r4, #4]
 8010572:	ed94 0a00 	vldr	s0, [r4]
 8010576:	2146      	movs	r1, #70	; 0x46
 8010578:	2014      	movs	r0, #20
 801057a:	f006 fcad 	bl	8016ed8 <GUI_Text_uv_Measure>
		scr_refresh++;
 801057e:	7833      	ldrb	r3, [r6, #0]
 8010580:	3301      	adds	r3, #1
 8010582:	b2db      	uxtb	r3, r3
		if(scr_refresh > 15 ){
 8010584:	2b0f      	cmp	r3, #15
		scr_refresh++;
 8010586:	7033      	strb	r3, [r6, #0]
		if(scr_refresh > 15 ){
 8010588:	d995      	bls.n	80104b6 <GUI_Color_Screen+0x1f6>
		if(colorimetry_uv1976[0] < 0.63 & colorimetry_uv1976[1] < 0.59 & colorimetry_uv1976[0] > 0.0 & colorimetry_uv1976[1] > 0.0){
 801058a:	edd4 7a00 	vldr	s15, [r4]
 801058e:	ed94 8a01 	vldr	s16, [r4, #4]
 8010592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801059a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801059e:	bfcc      	ite	gt
 80105a0:	2501      	movgt	r5, #1
 80105a2:	2500      	movle	r5, #0
 80105a4:	ee17 0a90 	vmov	r0, s15
 80105a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ac:	f005 0501 	and.w	r5, r5, #1
 80105b0:	bfd8      	it	le
 80105b2:	2500      	movle	r5, #0
 80105b4:	f7ef ffe0 	bl	8000578 <__aeabi_f2d>
 80105b8:	a357      	add	r3, pc, #348	; (adr r3, 8010718 <GUI_Color_Screen+0x458>)
 80105ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105be:	f04f 0801 	mov.w	r8, #1
 80105c2:	f7f0 fa9f 	bl	8000b04 <__aeabi_dcmplt>
 80105c6:	b900      	cbnz	r0, 80105ca <GUI_Color_Screen+0x30a>
 80105c8:	4680      	mov	r8, r0
 80105ca:	ea15 0f08 	tst.w	r5, r8
 80105ce:	f43f af72 	beq.w	80104b6 <GUI_Color_Screen+0x1f6>
 80105d2:	ee18 0a10 	vmov	r0, s16
 80105d6:	f7ef ffcf 	bl	8000578 <__aeabi_f2d>
 80105da:	a351      	add	r3, pc, #324	; (adr r3, 8010720 <GUI_Color_Screen+0x460>)
 80105dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e0:	f04f 0501 	mov.w	r5, #1
 80105e4:	f7f0 fa8e 	bl	8000b04 <__aeabi_dcmplt>
 80105e8:	b900      	cbnz	r0, 80105ec <GUI_Color_Screen+0x32c>
 80105ea:	4605      	mov	r5, r0
 80105ec:	f015 0fff 	tst.w	r5, #255	; 0xff
 80105f0:	f43f af61 	beq.w	80104b6 <GUI_Color_Screen+0x1f6>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 80105f4:	4d50      	ldr	r5, [pc, #320]	; (8010738 <GUI_Color_Screen+0x478>)
 80105f6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8010754 <GUI_Color_Screen+0x494>
 80105fa:	782a      	ldrb	r2, [r5, #0]
 80105fc:	eddf 9a4f 	vldr	s19, [pc, #316]	; 801073c <GUI_Color_Screen+0x47c>
 8010600:	eddf 8a4f 	vldr	s17, [pc, #316]	; 8010740 <GUI_Color_Screen+0x480>
 8010604:	2a00      	cmp	r2, #0
 8010606:	d03f      	beq.n	8010688 <GUI_Color_Screen+0x3c8>
 8010608:	edd8 6a01 	vldr	s13, [r8, #4]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 801060c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8010744 <GUI_Color_Screen+0x484>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010610:	edd8 5a00 	vldr	s11, [r8]
 8010614:	4a4c      	ldr	r2, [pc, #304]	; (8010748 <GUI_Color_Screen+0x488>)
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010616:	eef1 6a66 	vneg.f32	s13, s13
 801061a:	eea6 7aa9 	vfma.f32	s14, s13, s19
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 801061e:	e892 0003 	ldmia.w	r2, {r0, r1}
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010622:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8010626:	ee37 7a46 	vsub.f32	s14, s14, s12
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 801062a:	ab01      	add	r3, sp, #4
 801062c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010630:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801074c <GUI_Color_Screen+0x48c>
 8010634:	edcd 7a04 	vstr	s15, [sp, #16]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010638:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 801063c:	eee5 7aa8 	vfma.f32	s15, s11, s17
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010640:	eea6 7aa9 	vfma.f32	s14, s13, s19
 8010644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010648:	ee37 7a46 	vsub.f32	s14, s14, s12
 801064c:	edcd 7a05 	vstr	s15, [sp, #20]
 8010650:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010654:	edcd 7a06 	vstr	s15, [sp, #24]
 8010658:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 801065c:	eee5 7aa8 	vfma.f32	s15, s11, s17
 8010660:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010668:	edcd 7a07 	vstr	s15, [sp, #28]
 801066c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010670:	230c      	movs	r3, #12
 8010672:	9300      	str	r3, [sp, #0]
 8010674:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010678:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801067c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010680:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8010684:	f00e f8e8 	bl	801e858 <TFT_DrawCutBMP>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010688:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8010750 <GUI_Color_Screen+0x490>
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 801068c:	ed94 7a01 	vldr	s14, [r4, #4]
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 8010690:	edd4 7a00 	vldr	s15, [r4]
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 8010694:	ed88 7a01 	vstr	s14, [r8, #4]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010698:	eef0 6a49 	vmov.f32	s13, s18
 801069c:	eee7 6a69 	vfms.f32	s13, s14, s19
 80106a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80106a4:	2204      	movs	r2, #4
 80106a6:	eeb3 8a02 	vmov.f32	s16, #50	; 0x41900000  18.0
 80106aa:	eebd 7ae6 	vcvt.s32.f32	s14, s13
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 80106ae:	edc8 7a00 	vstr	s15, [r8]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 80106b2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80106b6:	eeb0 7a48 	vmov.f32	s14, s16
 80106ba:	eea7 7aa8 	vfma.f32	s14, s15, s17
 80106be:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80106c2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80106c6:	edcd 7a05 	vstr	s15, [sp, #20]
 80106ca:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 80106ce:	f00d fe60 	bl	801e392 <TFT_DrawFilledCircle>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 2, TFT_Black);
 80106d2:	edd4 7a01 	vldr	s15, [r4, #4]
 80106d6:	eea7 9ae9 	vfms.f32	s18, s15, s19
 80106da:	2300      	movs	r3, #0
 80106dc:	2202      	movs	r2, #2
 80106de:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 80106e2:	edcd 7a04 	vstr	s15, [sp, #16]
 80106e6:	edd4 7a00 	vldr	s15, [r4]
 80106ea:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80106ee:	eea7 8aa8 	vfma.f32	s16, s15, s17
 80106f2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80106f6:	edcd 7a05 	vstr	s15, [sp, #20]
 80106fa:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 80106fe:	f00d fe48 	bl	801e392 <TFT_DrawFilledCircle>
			GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);
 8010702:	2200      	movs	r2, #0
 8010704:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8010708:	2012      	movs	r0, #18
 801070a:	f007 fed1 	bl	80184b0 <GUI_Axes_Locus_LUV>
			flag = 1;
 801070e:	2301      	movs	r3, #1
 8010710:	702b      	strb	r3, [r5, #0]
 8010712:	e6ce      	b.n	80104b2 <GUI_Color_Screen+0x1f2>
 8010714:	f3af 8000 	nop.w
 8010718:	c28f5c29 	.word	0xc28f5c29
 801071c:	3fe428f5 	.word	0x3fe428f5
 8010720:	ae147ae1 	.word	0xae147ae1
 8010724:	3fe2e147 	.word	0x3fe2e147
 8010728:	2008addc 	.word	0x2008addc
 801072c:	20000a4c 	.word	0x20000a4c
 8010730:	20000a4d 	.word	0x20000a4d
 8010734:	200052a2 	.word	0x200052a2
 8010738:	2000529d 	.word	0x2000529d
 801073c:	43c60000 	.word	0x43c60000
 8010740:	43c98000 	.word	0x43c98000
 8010744:	43690000 	.word	0x43690000
 8010748:	2008c8b0 	.word	0x2008c8b0
 801074c:	43ca8000 	.word	0x43ca8000
 8010750:	43cb0000 	.word	0x43cb0000
 8010754:	2000528c 	.word	0x2000528c
	if(Color_Field&Color_CIE_Lab) {GUI_Text_LAB_Measure(20, 54, colorimetry_LAB[0], colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 8010758:	079b      	lsls	r3, r3, #30
 801075a:	f57f aeac 	bpl.w	80104b6 <GUI_Color_Screen+0x1f6>
 801075e:	4984      	ldr	r1, [pc, #528]	; (8010970 <GUI_Color_Screen+0x6b0>)
 8010760:	4c84      	ldr	r4, [pc, #528]	; (8010974 <GUI_Color_Screen+0x6b4>)
 8010762:	7809      	ldrb	r1, [r1, #0]
 8010764:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010768:	f9b4 2000 	ldrsh.w	r2, [r4]
 801076c:	9102      	str	r1, [sp, #8]
 801076e:	4982      	ldr	r1, [pc, #520]	; (8010978 <GUI_Color_Screen+0x6b8>)
 8010770:	7809      	ldrb	r1, [r1, #0]
 8010772:	9101      	str	r1, [sp, #4]
 8010774:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010778:	9100      	str	r1, [sp, #0]
 801077a:	2014      	movs	r0, #20
 801077c:	2136      	movs	r1, #54	; 0x36
 801077e:	f007 fb63 	bl	8017e48 <GUI_Text_LAB_Measure>
		if(colorimetry_LAB[1] < 128 & colorimetry_LAB[1] > -128 & colorimetry_LAB[2]<128 & colorimetry_LAB[2] > -128){
 8010782:	8863      	ldrh	r3, [r4, #2]
 8010784:	337f      	adds	r3, #127	; 0x7f
 8010786:	b29b      	uxth	r3, r3
 8010788:	2bfe      	cmp	r3, #254	; 0xfe
 801078a:	f63f ae94 	bhi.w	80104b6 <GUI_Color_Screen+0x1f6>
 801078e:	88a3      	ldrh	r3, [r4, #4]
 8010790:	337f      	adds	r3, #127	; 0x7f
 8010792:	b29b      	uxth	r3, r3
 8010794:	2bfe      	cmp	r3, #254	; 0xfe
 8010796:	f63f ae8e 	bhi.w	80104b6 <GUI_Color_Screen+0x1f6>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 801079a:	4d78      	ldr	r5, [pc, #480]	; (801097c <GUI_Color_Screen+0x6bc>)
 801079c:	4e78      	ldr	r6, [pc, #480]	; (8010980 <GUI_Color_Screen+0x6c0>)
 801079e:	782b      	ldrb	r3, [r5, #0]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d05d      	beq.n	8010860 <GUI_Color_Screen+0x5a0>
 80107a4:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80107a8:	f7ef fed4 	bl	8000554 <__aeabi_i2d>
 80107ac:	a368      	add	r3, pc, #416	; (adr r3, 8010950 <GUI_Color_Screen+0x690>)
 80107ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b2:	f7ef ff35 	bl	8000620 <__aeabi_dmul>
 80107b6:	4682      	mov	sl, r0
 80107b8:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 80107bc:	468b      	mov	fp, r1
 80107be:	f7ef fec9 	bl	8000554 <__aeabi_i2d>
 80107c2:	a363      	add	r3, pc, #396	; (adr r3, 8010950 <GUI_Color_Screen+0x690>)
 80107c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c8:	f7ef ff2a 	bl	8000620 <__aeabi_dmul>
 80107cc:	4680      	mov	r8, r0
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 80107ce:	4602      	mov	r2, r0
 80107d0:	460b      	mov	r3, r1
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 80107d2:	4689      	mov	r9, r1
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 80107d4:	2000      	movs	r0, #0
 80107d6:	496b      	ldr	r1, [pc, #428]	; (8010984 <GUI_Color_Screen+0x6c4>)
 80107d8:	f7ef fd6e 	bl	80002b8 <__aeabi_dsub>
 80107dc:	2200      	movs	r2, #0
 80107de:	4b6a      	ldr	r3, [pc, #424]	; (8010988 <GUI_Color_Screen+0x6c8>)
 80107e0:	f7ef fd6a 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 80107e4:	f7f0 f9f4 	bl	8000bd0 <__aeabi_d2uiz>
 80107e8:	b283      	uxth	r3, r0
 80107ea:	9304      	str	r3, [sp, #16]
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 80107ec:	2200      	movs	r2, #0
 80107ee:	4b67      	ldr	r3, [pc, #412]	; (801098c <GUI_Color_Screen+0x6cc>)
 80107f0:	4650      	mov	r0, sl
 80107f2:	4659      	mov	r1, fp
 80107f4:	f7ef fd62 	bl	80002bc <__adddf3>
 80107f8:	2200      	movs	r2, #0
 80107fa:	4b63      	ldr	r3, [pc, #396]	; (8010988 <GUI_Color_Screen+0x6c8>)
 80107fc:	f7ef fd5c 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010800:	f7f0 f9e6 	bl	8000bd0 <__aeabi_d2uiz>
 8010804:	b283      	uxth	r3, r0
 8010806:	4642      	mov	r2, r8
 8010808:	9305      	str	r3, [sp, #20]
 801080a:	a153      	add	r1, pc, #332	; (adr r1, 8010958 <GUI_Color_Screen+0x698>)
 801080c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010810:	464b      	mov	r3, r9
 8010812:	f7ef fd51 	bl	80002b8 <__aeabi_dsub>
 8010816:	2200      	movs	r2, #0
 8010818:	4b5b      	ldr	r3, [pc, #364]	; (8010988 <GUI_Color_Screen+0x6c8>)
 801081a:	f7ef fd4d 	bl	80002b8 <__aeabi_dsub>
 801081e:	f7f0 f9d7 	bl	8000bd0 <__aeabi_d2uiz>
 8010822:	a34f      	add	r3, pc, #316	; (adr r3, 8010960 <GUI_Color_Screen+0x6a0>)
 8010824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010828:	fa1f f880 	uxth.w	r8, r0
 801082c:	4659      	mov	r1, fp
 801082e:	4650      	mov	r0, sl
 8010830:	f7ef fd44 	bl	80002bc <__adddf3>
 8010834:	2200      	movs	r2, #0
 8010836:	4b54      	ldr	r3, [pc, #336]	; (8010988 <GUI_Color_Screen+0x6c8>)
 8010838:	f7ef fd3e 	bl	80002b8 <__aeabi_dsub>
 801083c:	f7f0 f9c8 	bl	8000bd0 <__aeabi_d2uiz>
 8010840:	4a53      	ldr	r2, [pc, #332]	; (8010990 <GUI_Color_Screen+0x6d0>)
 8010842:	fa1f fe80 	uxth.w	lr, r0
 8010846:	e892 0003 	ldmia.w	r2, {r0, r1}
 801084a:	ab01      	add	r3, sp, #4
 801084c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010850:	230c      	movs	r3, #12
 8010852:	9300      	str	r3, [sp, #0]
 8010854:	9a05      	ldr	r2, [sp, #20]
 8010856:	9b04      	ldr	r3, [sp, #16]
 8010858:	4641      	mov	r1, r8
 801085a:	4670      	mov	r0, lr
 801085c:	f00d fffc 	bl	801e858 <TFT_DrawCutBMP>
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010860:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 8010864:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010868:	80b0      	strh	r0, [r6, #4]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 801086a:	ee07 0a90 	vmov	s15, r0
 801086e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 8010872:	f8a6 8002 	strh.w	r8, [r6, #2]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 8010876:	ee17 0a90 	vmov	r0, s15
 801087a:	f7ef fe7d 	bl	8000578 <__aeabi_f2d>
 801087e:	a334      	add	r3, pc, #208	; (adr r3, 8010950 <GUI_Color_Screen+0x690>)
 8010880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010884:	f7ef fecc 	bl	8000620 <__aeabi_dmul>
 8010888:	4602      	mov	r2, r0
 801088a:	460b      	mov	r3, r1
 801088c:	a136      	add	r1, pc, #216	; (adr r1, 8010968 <GUI_Color_Screen+0x6a8>)
 801088e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010892:	f7ef fd11 	bl	80002b8 <__aeabi_dsub>
 8010896:	f7f0 f973 	bl	8000b80 <__aeabi_d2iz>
 801089a:	ee07 8a90 	vmov	s15, r8
 801089e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80108a2:	b206      	sxth	r6, r0
 80108a4:	ee17 0a90 	vmov	r0, s15
 80108a8:	f7ef fe66 	bl	8000578 <__aeabi_f2d>
 80108ac:	a328      	add	r3, pc, #160	; (adr r3, 8010950 <GUI_Color_Screen+0x690>)
 80108ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b2:	f7ef feb5 	bl	8000620 <__aeabi_dmul>
 80108b6:	2200      	movs	r2, #0
 80108b8:	4b36      	ldr	r3, [pc, #216]	; (8010994 <GUI_Color_Screen+0x6d4>)
 80108ba:	f7ef fcff 	bl	80002bc <__adddf3>
 80108be:	f7f0 f95f 	bl	8000b80 <__aeabi_d2iz>
 80108c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80108c6:	2204      	movs	r2, #4
 80108c8:	4631      	mov	r1, r6
 80108ca:	b200      	sxth	r0, r0
 80108cc:	f00d fd61 	bl	801e392 <TFT_DrawFilledCircle>
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 2, TFT_Black);
 80108d0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80108d4:	ee07 0a90 	vmov	s15, r0
 80108d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80108dc:	ee17 0a90 	vmov	r0, s15
 80108e0:	f7ef fe4a 	bl	8000578 <__aeabi_f2d>
 80108e4:	a31a      	add	r3, pc, #104	; (adr r3, 8010950 <GUI_Color_Screen+0x690>)
 80108e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ea:	f7ef fe99 	bl	8000620 <__aeabi_dmul>
 80108ee:	4602      	mov	r2, r0
 80108f0:	460b      	mov	r3, r1
 80108f2:	a11d      	add	r1, pc, #116	; (adr r1, 8010968 <GUI_Color_Screen+0x6a8>)
 80108f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108f8:	f7ef fcde 	bl	80002b8 <__aeabi_dsub>
 80108fc:	f7f0 f940 	bl	8000b80 <__aeabi_d2iz>
 8010900:	b206      	sxth	r6, r0
 8010902:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8010906:	ee07 0a90 	vmov	s15, r0
 801090a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801090e:	ee17 0a90 	vmov	r0, s15
 8010912:	f7ef fe31 	bl	8000578 <__aeabi_f2d>
 8010916:	a30e      	add	r3, pc, #56	; (adr r3, 8010950 <GUI_Color_Screen+0x690>)
 8010918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091c:	f7ef fe80 	bl	8000620 <__aeabi_dmul>
 8010920:	2200      	movs	r2, #0
 8010922:	4b1c      	ldr	r3, [pc, #112]	; (8010994 <GUI_Color_Screen+0x6d4>)
 8010924:	f7ef fcca 	bl	80002bc <__adddf3>
 8010928:	f7f0 f92a 	bl	8000b80 <__aeabi_d2iz>
 801092c:	2300      	movs	r3, #0
 801092e:	2202      	movs	r2, #2
 8010930:	4631      	mov	r1, r6
 8010932:	b200      	sxth	r0, r0
 8010934:	f00d fd2d 	bl	801e392 <TFT_DrawFilledCircle>
				GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);
 8010938:	2200      	movs	r2, #0
 801093a:	f240 1113 	movw	r1, #275	; 0x113
 801093e:	2088      	movs	r0, #136	; 0x88
 8010940:	f007 fe1c 	bl	801857c <GUI_Axes_Locus_Lab>
				flag = 1;
 8010944:	2301      	movs	r3, #1
 8010946:	702b      	strb	r3, [r5, #0]
				scr_refresh = 0;
 8010948:	4b13      	ldr	r3, [pc, #76]	; (8010998 <GUI_Color_Screen+0x6d8>)
 801094a:	2200      	movs	r2, #0
 801094c:	701a      	strb	r2, [r3, #0]
 801094e:	e5b2      	b.n	80104b6 <GUI_Color_Screen+0x1f6>
 8010950:	5a1cac08 	.word	0x5a1cac08
 8010954:	3fef3b64 	.word	0x3fef3b64
 8010958:	00000000 	.word	0x00000000
 801095c:	40712000 	.word	0x40712000
 8010960:	00000000 	.word	0x00000000
 8010964:	4060e000 	.word	0x4060e000
 8010968:	00000000 	.word	0x00000000
 801096c:	40713000 	.word	0x40713000
 8010970:	20000a4c 	.word	0x20000a4c
 8010974:	2008adc0 	.word	0x2008adc0
 8010978:	20000a4d 	.word	0x20000a4d
 801097c:	2000529d 	.word	0x2000529d
 8010980:	20005284 	.word	0x20005284
 8010984:	405f0000 	.word	0x405f0000
 8010988:	40140000 	.word	0x40140000
 801098c:	405f4000 	.word	0x405f4000
 8010990:	2008c8b0 	.word	0x2008c8b0
 8010994:	40610000 	.word	0x40610000
 8010998:	200052a2 	.word	0x200052a2

0801099c <GUI_ColorRend_Screen>:
void GUI_ColorRend_Screen(){
 801099c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 801099e:	4b39      	ldr	r3, [pc, #228]	; (8010a84 <GUI_ColorRend_Screen+0xe8>)
 80109a0:	4d39      	ldr	r5, [pc, #228]	; (8010a88 <GUI_ColorRend_Screen+0xec>)
 80109a2:	4c3a      	ldr	r4, [pc, #232]	; (8010a8c <GUI_ColorRend_Screen+0xf0>)
 80109a4:	2202      	movs	r2, #2
 80109a6:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Rotation_Screen_Rend_Old != Rotation_Screen_Rend){
 80109a8:	4b39      	ldr	r3, [pc, #228]	; (8010a90 <GUI_ColorRend_Screen+0xf4>)
 80109aa:	4a3a      	ldr	r2, [pc, #232]	; (8010a94 <GUI_ColorRend_Screen+0xf8>)
 80109ac:	781b      	ldrb	r3, [r3, #0]
 80109ae:	7812      	ldrb	r2, [r2, #0]
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d103      	bne.n	80109bc <GUI_ColorRend_Screen+0x20>
 80109b4:	782a      	ldrb	r2, [r5, #0]
 80109b6:	7823      	ldrb	r3, [r4, #0]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d02b      	beq.n	8010a14 <GUI_ColorRend_Screen+0x78>
	GUI_Panels();		
 80109bc:	f7fe fe1c 	bl	800f5f8 <GUI_Panels>
	oldLowSignal = 0;
 80109c0:	4a35      	ldr	r2, [pc, #212]	; (8010a98 <GUI_ColorRend_Screen+0xfc>)
 80109c2:	2300      	movs	r3, #0
 80109c4:	7013      	strb	r3, [r2, #0]
	oldHighSignal = 0;
 80109c6:	4a35      	ldr	r2, [pc, #212]	; (8010a9c <GUI_ColorRend_Screen+0x100>)
 80109c8:	7013      	strb	r3, [r2, #0]
	Rotation_Screen_Rend_Old = Rotation_Screen_Rend;
 80109ca:	7823      	ldrb	r3, [r4, #0]
 80109cc:	702b      	strb	r3, [r5, #0]
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 80109ce:	4d34      	ldr	r5, [pc, #208]	; (8010aa0 <GUI_ColorRend_Screen+0x104>)
 80109d0:	782a      	ldrb	r2, [r5, #0]
 80109d2:	2a00      	cmp	r2, #0
 80109d4:	d03c      	beq.n	8010a50 <GUI_ColorRend_Screen+0xb4>
 80109d6:	4b33      	ldr	r3, [pc, #204]	; (8010aa4 <GUI_ColorRend_Screen+0x108>)
 80109d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109dc:	f7f0 f918 	bl	8000c10 <__aeabi_d2f>
 80109e0:	210d      	movs	r1, #13
 80109e2:	ee00 0a10 	vmov	s0, r0
 80109e6:	2055      	movs	r0, #85	; 0x55
 80109e8:	f004 fe58 	bl	801569c <GUI_Bar_Measure>
	Prev_Inf_Screen = Color_Rendition_Screen;
 80109ec:	4b2e      	ldr	r3, [pc, #184]	; (8010aa8 <GUI_ColorRend_Screen+0x10c>)
 80109ee:	2206      	movs	r2, #6
 80109f0:	701a      	strb	r2, [r3, #0]
	if (Color_rend_Field&CRI_CQS){
 80109f2:	782b      	ldrb	r3, [r5, #0]
 80109f4:	07da      	lsls	r2, r3, #31
 80109f6:	d52d      	bpl.n	8010a54 <GUI_ColorRend_Screen+0xb8>
		CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 80109f8:	492c      	ldr	r1, [pc, #176]	; (8010aac <GUI_ColorRend_Screen+0x110>)
 80109fa:	4b2d      	ldr	r3, [pc, #180]	; (8010ab0 <GUI_ColorRend_Screen+0x114>)
 80109fc:	4a2d      	ldr	r2, [pc, #180]	; (8010ab4 <GUI_ColorRend_Screen+0x118>)
 80109fe:	f991 1000 	ldrsb.w	r1, [r1]
 8010a02:	f993 3000 	ldrsb.w	r3, [r3]
 8010a06:	f992 2000 	ldrsb.w	r2, [r2]
 8010a0a:	7820      	ldrb	r0, [r4, #0]
 8010a0c:	9100      	str	r1, [sp, #0]
 8010a0e:	492a      	ldr	r1, [pc, #168]	; (8010ab8 <GUI_ColorRend_Screen+0x11c>)
 8010a10:	f7fd f9ea 	bl	800dde8 <CRI_Draw>
	if(Calc_ColorRend != Calc_ColorRend_old){
 8010a14:	4b29      	ldr	r3, [pc, #164]	; (8010abc <GUI_ColorRend_Screen+0x120>)
 8010a16:	781a      	ldrb	r2, [r3, #0]
 8010a18:	4b29      	ldr	r3, [pc, #164]	; (8010ac0 <GUI_ColorRend_Screen+0x124>)
 8010a1a:	7819      	ldrb	r1, [r3, #0]
 8010a1c:	4291      	cmp	r1, r2
 8010a1e:	d012      	beq.n	8010a46 <GUI_ColorRend_Screen+0xaa>
		Calc_ColorRend_old = Calc_ColorRend;
 8010a20:	701a      	strb	r2, [r3, #0]
		if (Color_rend_Field&CRI_CQS){
 8010a22:	4b1f      	ldr	r3, [pc, #124]	; (8010aa0 <GUI_ColorRend_Screen+0x104>)
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	07db      	lsls	r3, r3, #31
 8010a28:	d520      	bpl.n	8010a6c <GUI_ColorRend_Screen+0xd0>
			CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 8010a2a:	4920      	ldr	r1, [pc, #128]	; (8010aac <GUI_ColorRend_Screen+0x110>)
 8010a2c:	4b20      	ldr	r3, [pc, #128]	; (8010ab0 <GUI_ColorRend_Screen+0x114>)
 8010a2e:	4a21      	ldr	r2, [pc, #132]	; (8010ab4 <GUI_ColorRend_Screen+0x118>)
 8010a30:	f991 1000 	ldrsb.w	r1, [r1]
 8010a34:	f993 3000 	ldrsb.w	r3, [r3]
 8010a38:	f992 2000 	ldrsb.w	r2, [r2]
 8010a3c:	7820      	ldrb	r0, [r4, #0]
 8010a3e:	9100      	str	r1, [sp, #0]
 8010a40:	491d      	ldr	r1, [pc, #116]	; (8010ab8 <GUI_ColorRend_Screen+0x11c>)
 8010a42:	f7fd f9d1 	bl	800dde8 <CRI_Draw>
}
 8010a46:	b003      	add	sp, #12
 8010a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GUI_SignalLevel();
 8010a4c:	f7ff bb3a 	b.w	80100c4 <GUI_SignalLevel>
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 8010a50:	4b1c      	ldr	r3, [pc, #112]	; (8010ac4 <GUI_ColorRend_Screen+0x128>)
 8010a52:	e7c1      	b.n	80109d8 <GUI_ColorRend_Screen+0x3c>
		CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 8010a54:	491c      	ldr	r1, [pc, #112]	; (8010ac8 <GUI_ColorRend_Screen+0x12c>)
 8010a56:	4b1d      	ldr	r3, [pc, #116]	; (8010acc <GUI_ColorRend_Screen+0x130>)
 8010a58:	4a1d      	ldr	r2, [pc, #116]	; (8010ad0 <GUI_ColorRend_Screen+0x134>)
 8010a5a:	7809      	ldrb	r1, [r1, #0]
 8010a5c:	781b      	ldrb	r3, [r3, #0]
 8010a5e:	7812      	ldrb	r2, [r2, #0]
 8010a60:	7820      	ldrb	r0, [r4, #0]
 8010a62:	9100      	str	r1, [sp, #0]
 8010a64:	491b      	ldr	r1, [pc, #108]	; (8010ad4 <GUI_ColorRend_Screen+0x138>)
 8010a66:	f7fb f995 	bl	800bd94 <CQS_Draw>
 8010a6a:	e7d3      	b.n	8010a14 <GUI_ColorRend_Screen+0x78>
			CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 8010a6c:	4916      	ldr	r1, [pc, #88]	; (8010ac8 <GUI_ColorRend_Screen+0x12c>)
 8010a6e:	4b17      	ldr	r3, [pc, #92]	; (8010acc <GUI_ColorRend_Screen+0x130>)
 8010a70:	4a17      	ldr	r2, [pc, #92]	; (8010ad0 <GUI_ColorRend_Screen+0x134>)
 8010a72:	7809      	ldrb	r1, [r1, #0]
 8010a74:	781b      	ldrb	r3, [r3, #0]
 8010a76:	7812      	ldrb	r2, [r2, #0]
 8010a78:	7820      	ldrb	r0, [r4, #0]
 8010a7a:	9100      	str	r1, [sp, #0]
 8010a7c:	4915      	ldr	r1, [pc, #84]	; (8010ad4 <GUI_ColorRend_Screen+0x138>)
 8010a7e:	f7fb f989 	bl	800bd94 <CQS_Draw>
 8010a82:	e7e0      	b.n	8010a46 <GUI_ColorRend_Screen+0xaa>
 8010a84:	20000230 	.word	0x20000230
 8010a88:	2008c318 	.word	0x2008c318
 8010a8c:	20005281 	.word	0x20005281
 8010a90:	2000022a 	.word	0x2000022a
 8010a94:	20005279 	.word	0x20005279
 8010a98:	2000529f 	.word	0x2000529f
 8010a9c:	2000529e 	.word	0x2000529e
 8010aa0:	20005278 	.word	0x20005278
 8010aa4:	2008c220 	.word	0x2008c220
 8010aa8:	2008c315 	.word	0x2008c315
 8010aac:	200041d0 	.word	0x200041d0
 8010ab0:	200041d2 	.word	0x200041d2
 8010ab4:	200041d1 	.word	0x200041d1
 8010ab8:	200041d3 	.word	0x200041d3
 8010abc:	20005275 	.word	0x20005275
 8010ac0:	20005276 	.word	0x20005276
 8010ac4:	2008bf50 	.word	0x2008bf50
 8010ac8:	200031ac 	.word	0x200031ac
 8010acc:	200031ad 	.word	0x200031ad
 8010ad0:	200031ab 	.word	0x200031ab
 8010ad4:	2000319c 	.word	0x2000319c

08010ad8 <GUI_Display_Refresh>:

void GUI_Display_Refresh()
{
 8010ad8:	b508      	push	{r3, lr}
	
	switch(GUI_screen_state){
 8010ada:	4b2d      	ldr	r3, [pc, #180]	; (8010b90 <GUI_Display_Refresh+0xb8>)
 8010adc:	781b      	ldrb	r3, [r3, #0]
 8010ade:	3b01      	subs	r3, #1
 8010ae0:	2b11      	cmp	r3, #17
 8010ae2:	d80f      	bhi.n	8010b04 <GUI_Display_Refresh+0x2c>
 8010ae4:	e8df f003 	tbb	[pc, r3]
 8010ae8:	17130f09 	.word	0x17130f09
 8010aec:	27231f1b 	.word	0x27231f1b
 8010af0:	37332f2b 	.word	0x37332f2b
 8010af4:	47433f3b 	.word	0x47433f3b
 8010af8:	4f4b      	.short	0x4f4b
		case Measure_Screen: GUI_Measure_Screen(); preGUI_screen_state = Measure_Screen; break;
 8010afa:	f7ff fb45 	bl	8010188 <GUI_Measure_Screen>
 8010afe:	2201      	movs	r2, #1
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
					
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 8010b00:	4b24      	ldr	r3, [pc, #144]	; (8010b94 <GUI_Display_Refresh+0xbc>)
 8010b02:	701a      	strb	r2, [r3, #0]
 8010b04:	bd08      	pop	{r3, pc}
		case Measure2_Screen: GUI_Measure2_Screen(); preGUI_screen_state = Measure2_Screen; break;
 8010b06:	f7ff fb6d 	bl	80101e4 <GUI_Measure2_Screen>
 8010b0a:	2202      	movs	r2, #2
 8010b0c:	e7f8      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case Measure3_Screen: GUI_Measure3_Screen(); preGUI_screen_state = Measure3_Screen; break;
 8010b0e:	f7ff fba1 	bl	8010254 <GUI_Measure3_Screen>
 8010b12:	2203      	movs	r2, #3
 8010b14:	e7f4      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case Graph_Screen: GUI_Graph_Screen(); preGUI_screen_state = Graph_Screen; break;
 8010b16:	f7ff f99b 	bl	800fe50 <GUI_Graph_Screen>
 8010b1a:	2204      	movs	r2, #4
 8010b1c:	e7f0      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case Color_Screen: GUI_Color_Screen(); preGUI_screen_state = Color_Screen; break; 
 8010b1e:	f7ff fbcf 	bl	80102c0 <GUI_Color_Screen>
 8010b22:	2205      	movs	r2, #5
 8010b24:	e7ec      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case Color_Rendition_Screen: GUI_ColorRend_Screen(); preGUI_screen_state = Color_Rendition_Screen; break;		
 8010b26:	f7ff ff39 	bl	801099c <GUI_ColorRend_Screen>
 8010b2a:	2206      	movs	r2, #6
 8010b2c:	e7e8      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case DataSet1_Screen: GUI_DataSet1_Screen();  preGUI_screen_state = DataSet1_Screen; break;
 8010b2e:	f7fe fda1 	bl	800f674 <GUI_DataSet1_Screen>
 8010b32:	2207      	movs	r2, #7
 8010b34:	e7e4      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case DataSet2_Screen: GUI_DataSet2_Screen();  preGUI_screen_state = DataSet2_Screen; break;
 8010b36:	f7fe fe01 	bl	800f73c <GUI_DataSet2_Screen>
 8010b3a:	2208      	movs	r2, #8
 8010b3c:	e7e0      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case DataSet3_Screen: GUI_DataSet3_Screen();  preGUI_screen_state = DataSet3_Screen; break;
 8010b3e:	f7fe fed5 	bl	800f8ec <GUI_DataSet3_Screen>
 8010b42:	2209      	movs	r2, #9
 8010b44:	e7dc      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case DataSet4_Screen: GUI_DataSet4_Screen();  preGUI_screen_state = DataSet4_Screen; break;
 8010b46:	f7fe ff45 	bl	800f9d4 <GUI_DataSet4_Screen>
 8010b4a:	220a      	movs	r2, #10
 8010b4c:	e7d8      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case DataSet5_Screen: GUI_DataSet5_Screen();  preGUI_screen_state = DataSet5_Screen; break;
 8010b4e:	f7fe ffe3 	bl	800fb18 <GUI_DataSet5_Screen>
 8010b52:	220b      	movs	r2, #11
 8010b54:	e7d4      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case GraphSet1_Screen: GUI_GraphSet1_Screen(); preGUI_screen_state = GraphSet1_Screen; break;
 8010b56:	f7ff f819 	bl	800fb8c <GUI_GraphSet1_Screen>
 8010b5a:	220c      	movs	r2, #12
 8010b5c:	e7d0      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case GraphSet2_Screen: GUI_GraphSet2_Screen(); preGUI_screen_state = GraphSet2_Screen; break;
 8010b5e:	f7ff f85d 	bl	800fc1c <GUI_GraphSet2_Screen>
 8010b62:	220d      	movs	r2, #13
 8010b64:	e7cc      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
 8010b66:	f7ff f893 	bl	800fc90 <GUI_ColorSet1_Screen>
 8010b6a:	220e      	movs	r2, #14
 8010b6c:	e7c8      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
 8010b6e:	f7ff f8d3 	bl	800fd18 <GUI_ColorSet2_Screen>
 8010b72:	220f      	movs	r2, #15
 8010b74:	e7c4      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
 8010b76:	f7ff f90b 	bl	800fd90 <GUI_ColorRendSet_Screen>
 8010b7a:	2210      	movs	r2, #16
 8010b7c:	e7c0      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
 8010b7e:	f7fe fc19 	bl	800f3b4 <GUI_Information_Screen>
 8010b82:	2211      	movs	r2, #17
 8010b84:	e7bc      	b.n	8010b00 <GUI_Display_Refresh+0x28>
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 8010b86:	f7fe fc63 	bl	800f450 <GUI_SD_Write_Screen>
 8010b8a:	2212      	movs	r2, #18
 8010b8c:	e7b8      	b.n	8010b00 <GUI_Display_Refresh+0x28>
 8010b8e:	bf00      	nop
 8010b90:	20005279 	.word	0x20005279
 8010b94:	2000022a 	.word	0x2000022a

08010b98 <GUI_Touch_Processing>:
		default: break;
	}
}

void GUI_Touch_Processing()
{
 8010b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9c:	b087      	sub	sp, #28
	uint16_t Touch_x = 0, Touch_y = 0;
 8010b9e:	aa06      	add	r2, sp, #24
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	f822 3d02 	strh.w	r3, [r2, #-2]!
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 8010ba6:	a905      	add	r1, sp, #20
 8010ba8:	2070      	movs	r0, #112	; 0x70
	uint16_t Touch_x = 0, Touch_y = 0;
 8010baa:	f8ad 3014 	strh.w	r3, [sp, #20]
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 8010bae:	f00d f8e3 	bl	801dd78 <TS_Get_XY1>
	switch(GUI_screen_state){
 8010bb2:	4a87      	ldr	r2, [pc, #540]	; (8010dd0 <GUI_Touch_Processing+0x238>)
 8010bb4:	7813      	ldrb	r3, [r2, #0]
 8010bb6:	3b01      	subs	r3, #1
 8010bb8:	4693      	mov	fp, r2
 8010bba:	2b11      	cmp	r3, #17
 8010bbc:	f203 85a4 	bhi.w	8014708 <GUI_Touch_Processing+0x3b70>
 8010bc0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010bc4:	01140012 	.word	0x01140012
 8010bc8:	02cb01dc 	.word	0x02cb01dc
 8010bcc:	04700395 	.word	0x04700395
 8010bd0:	08650607 	.word	0x08650607
 8010bd4:	0d130aed 	.word	0x0d130aed
 8010bd8:	1270111e 	.word	0x1270111e
 8010bdc:	161b14be 	.word	0x161b14be
 8010be0:	1a3c186c 	.word	0x1a3c186c
 8010be4:	00781d1d 	.word	0x00781d1d
		
		case Measure_Screen:
			preGUI_screen_state = GUI_screen_state;
 8010be8:	4b7a      	ldr	r3, [pc, #488]	; (8010dd4 <GUI_Touch_Processing+0x23c>)
		
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010bea:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 8010bee:	2401      	movs	r4, #1
 8010bf0:	701c      	strb	r4, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010bf2:	f7ef fcaf 	bl	8000554 <__aeabi_i2d>
 8010bf6:	4606      	mov	r6, r0
 8010bf8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8010bfc:	460f      	mov	r7, r1
 8010bfe:	f7ef fca9 	bl	8000554 <__aeabi_i2d>
 8010c02:	a365      	add	r3, pc, #404	; (adr r3, 8010d98 <GUI_Touch_Processing+0x200>)
 8010c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c08:	4680      	mov	r8, r0
 8010c0a:	4689      	mov	r9, r1
 8010c0c:	f7ef ff8e 	bl	8000b2c <__aeabi_dcmpge>
 8010c10:	b900      	cbnz	r0, 8010c14 <GUI_Touch_Processing+0x7c>
 8010c12:	4604      	mov	r4, r0
 8010c14:	2200      	movs	r2, #0
 8010c16:	4b70      	ldr	r3, [pc, #448]	; (8010dd8 <GUI_Touch_Processing+0x240>)
 8010c18:	4640      	mov	r0, r8
 8010c1a:	4649      	mov	r1, r9
 8010c1c:	b2e4      	uxtb	r4, r4
 8010c1e:	f04f 0501 	mov.w	r5, #1
 8010c22:	f7ef ff79 	bl	8000b18 <__aeabi_dcmple>
 8010c26:	b900      	cbnz	r0, 8010c2a <GUI_Touch_Processing+0x92>
 8010c28:	4605      	mov	r5, r0
 8010c2a:	a35d      	add	r3, pc, #372	; (adr r3, 8010da0 <GUI_Touch_Processing+0x208>)
 8010c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c30:	4630      	mov	r0, r6
 8010c32:	4639      	mov	r1, r7
 8010c34:	b2ed      	uxtb	r5, r5
 8010c36:	f04f 0801 	mov.w	r8, #1
 8010c3a:	f7ef ff77 	bl	8000b2c <__aeabi_dcmpge>
 8010c3e:	b900      	cbnz	r0, 8010c42 <GUI_Touch_Processing+0xaa>
 8010c40:	4680      	mov	r8, r0
 8010c42:	a359      	add	r3, pc, #356	; (adr r3, 8010da8 <GUI_Touch_Processing+0x210>)
 8010c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c48:	4630      	mov	r0, r6
 8010c4a:	4639      	mov	r1, r7
 8010c4c:	f04f 0901 	mov.w	r9, #1
 8010c50:	f7ef ff62 	bl	8000b18 <__aeabi_dcmple>
 8010c54:	b900      	cbnz	r0, 8010c58 <GUI_Touch_Processing+0xc0>
 8010c56:	4681      	mov	r9, r0
 8010c58:	ea08 0309 	and.w	r3, r8, r9
 8010c5c:	421c      	tst	r4, r3
 8010c5e:	d003      	beq.n	8010c68 <GUI_Touch_Processing+0xd0>
 8010c60:	b115      	cbz	r5, 8010c68 <GUI_Touch_Processing+0xd0>
				{	
					GUI_screen_state = DataSet1_Screen;
 8010c62:	2307      	movs	r3, #7
 8010c64:	f88b 3000 	strb.w	r3, [fp]
				} 
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //down
 8010c68:	a351      	add	r3, pc, #324	; (adr r3, 8010db0 <GUI_Touch_Processing+0x218>)
 8010c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6e:	4630      	mov	r0, r6
 8010c70:	4639      	mov	r1, r7
 8010c72:	402c      	ands	r4, r5
 8010c74:	f04f 0501 	mov.w	r5, #1
 8010c78:	f7ef ff58 	bl	8000b2c <__aeabi_dcmpge>
 8010c7c:	b900      	cbnz	r0, 8010c80 <GUI_Touch_Processing+0xe8>
 8010c7e:	4605      	mov	r5, r0
 8010c80:	a34d      	add	r3, pc, #308	; (adr r3, 8010db8 <GUI_Touch_Processing+0x220>)
 8010c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c86:	4630      	mov	r0, r6
 8010c88:	4639      	mov	r1, r7
 8010c8a:	f04f 0801 	mov.w	r8, #1
 8010c8e:	f7ef ff43 	bl	8000b18 <__aeabi_dcmple>
 8010c92:	b900      	cbnz	r0, 8010c96 <GUI_Touch_Processing+0xfe>
 8010c94:	4680      	mov	r8, r0
 8010c96:	ea05 0508 	and.w	r5, r5, r8
 8010c9a:	07ea      	lsls	r2, r5, #31
 8010c9c:	d50d      	bpl.n	8010cba <GUI_Touch_Processing+0x122>
 8010c9e:	b164      	cbz	r4, 8010cba <GUI_Touch_Processing+0x122>
				{	
					GUI_screen_state = (screen_count > 0) ? Measure2_Screen : Measure_Screen; 
 8010ca0:	4b4e      	ldr	r3, [pc, #312]	; (8010ddc <GUI_Touch_Processing+0x244>)
 8010ca2:	781b      	ldrb	r3, [r3, #0]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	bf0c      	ite	eq
 8010ca8:	2001      	moveq	r0, #1
 8010caa:	2002      	movne	r0, #2
 8010cac:	f88b 0000 	strb.w	r0, [fp]
					WriteFLASH_Screen(GUI_screen_state);
 8010cb0:	f00b f95e 	bl	801bf70 <WriteFLASH_Screen>

		break;
				
		default: preGUI_screen_state = Measure_Screen;
			}
 8010cb4:	b007      	add	sp, #28
 8010cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8010cba:	a33f      	add	r3, pc, #252	; (adr r3, 8010db8 <GUI_Touch_Processing+0x220>)
 8010cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc0:	4630      	mov	r0, r6
 8010cc2:	4639      	mov	r1, r7
 8010cc4:	f04f 0501 	mov.w	r5, #1
 8010cc8:	f7ef ff30 	bl	8000b2c <__aeabi_dcmpge>
 8010ccc:	b900      	cbnz	r0, 8010cd0 <GUI_Touch_Processing+0x138>
 8010cce:	4605      	mov	r5, r0
 8010cd0:	a33b      	add	r3, pc, #236	; (adr r3, 8010dc0 <GUI_Touch_Processing+0x228>)
 8010cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cd6:	4630      	mov	r0, r6
 8010cd8:	4639      	mov	r1, r7
 8010cda:	f04f 0801 	mov.w	r8, #1
 8010cde:	f7ef ff1b 	bl	8000b18 <__aeabi_dcmple>
 8010ce2:	b900      	cbnz	r0, 8010ce6 <GUI_Touch_Processing+0x14e>
 8010ce4:	4680      	mov	r8, r0
 8010ce6:	ea05 0508 	and.w	r5, r5, r8
 8010cea:	07eb      	lsls	r3, r5, #31
 8010cec:	d507      	bpl.n	8010cfe <GUI_Touch_Processing+0x166>
 8010cee:	b134      	cbz	r4, 8010cfe <GUI_Touch_Processing+0x166>
					WriteFLASH_Screen(Graph_Screen);
 8010cf0:	2004      	movs	r0, #4
 8010cf2:	f00b f93d 	bl	801bf70 <WriteFLASH_Screen>
					GUI_screen_state =  Graph_Screen;
 8010cf6:	2304      	movs	r3, #4
 8010cf8:	f88b 3000 	strb.w	r3, [fp]
 8010cfc:	e7da      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8010cfe:	a32a      	add	r3, pc, #168	; (adr r3, 8010da8 <GUI_Touch_Processing+0x210>)
 8010d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d04:	4630      	mov	r0, r6
 8010d06:	4639      	mov	r1, r7
 8010d08:	f04f 0501 	mov.w	r5, #1
 8010d0c:	f7ef ff0e 	bl	8000b2c <__aeabi_dcmpge>
 8010d10:	b900      	cbnz	r0, 8010d14 <GUI_Touch_Processing+0x17c>
 8010d12:	4605      	mov	r5, r0
 8010d14:	a32c      	add	r3, pc, #176	; (adr r3, 8010dc8 <GUI_Touch_Processing+0x230>)
 8010d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d1a:	4630      	mov	r0, r6
 8010d1c:	4639      	mov	r1, r7
 8010d1e:	f04f 0801 	mov.w	r8, #1
 8010d22:	f7ef fef9 	bl	8000b18 <__aeabi_dcmple>
 8010d26:	b900      	cbnz	r0, 8010d2a <GUI_Touch_Processing+0x192>
 8010d28:	4680      	mov	r8, r0
 8010d2a:	ea05 0508 	and.w	r5, r5, r8
 8010d2e:	07ed      	lsls	r5, r5, #31
 8010d30:	d508      	bpl.n	8010d44 <GUI_Touch_Processing+0x1ac>
 8010d32:	b13c      	cbz	r4, 8010d44 <GUI_Touch_Processing+0x1ac>
					if(!SD_Detect){if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}}
 8010d34:	4b2a      	ldr	r3, [pc, #168]	; (8010de0 <GUI_Touch_Processing+0x248>)
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d1bb      	bne.n	8010cb4 <GUI_Touch_Processing+0x11c>
 8010d3c:	4b24      	ldr	r3, [pc, #144]	; (8010dd0 <GUI_Touch_Processing+0x238>)
 8010d3e:	2212      	movs	r2, #18
 8010d40:	701a      	strb	r2, [r3, #0]
 8010d42:	e7b7      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 8010d44:	a320      	add	r3, pc, #128	; (adr r3, 8010dc8 <GUI_Touch_Processing+0x230>)
 8010d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d4a:	4630      	mov	r0, r6
 8010d4c:	4639      	mov	r1, r7
 8010d4e:	f04f 0501 	mov.w	r5, #1
 8010d52:	f7ef feeb 	bl	8000b2c <__aeabi_dcmpge>
 8010d56:	b900      	cbnz	r0, 8010d5a <GUI_Touch_Processing+0x1c2>
 8010d58:	4605      	mov	r5, r0
 8010d5a:	a315      	add	r3, pc, #84	; (adr r3, 8010db0 <GUI_Touch_Processing+0x218>)
 8010d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d60:	4630      	mov	r0, r6
 8010d62:	4639      	mov	r1, r7
 8010d64:	f04f 0801 	mov.w	r8, #1
 8010d68:	f7ef fed6 	bl	8000b18 <__aeabi_dcmple>
 8010d6c:	b900      	cbnz	r0, 8010d70 <GUI_Touch_Processing+0x1d8>
 8010d6e:	4680      	mov	r8, r0
 8010d70:	ea05 0508 	and.w	r5, r5, r8
 8010d74:	07e8      	lsls	r0, r5, #31
 8010d76:	d59d      	bpl.n	8010cb4 <GUI_Touch_Processing+0x11c>
 8010d78:	2c00      	cmp	r4, #0
 8010d7a:	d09b      	beq.n	8010cb4 <GUI_Touch_Processing+0x11c>
						pause = !pause;
 8010d7c:	4a19      	ldr	r2, [pc, #100]	; (8010de4 <GUI_Touch_Processing+0x24c>)
						GUI_Bar_Measure(85, 13, 0.0);
 8010d7e:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8010de8 <GUI_Touch_Processing+0x250>
						pause = !pause;
 8010d82:	7813      	ldrb	r3, [r2, #0]
 8010d84:	fab3 f383 	clz	r3, r3
 8010d88:	095b      	lsrs	r3, r3, #5
						GUI_Bar_Measure(85, 13, 0.0);
 8010d8a:	210d      	movs	r1, #13
 8010d8c:	2055      	movs	r0, #85	; 0x55
						pause = !pause;
 8010d8e:	7013      	strb	r3, [r2, #0]
						GUI_Bar_Measure(85, 13, 0.0);
 8010d90:	f004 fc84 	bl	801569c <GUI_Bar_Measure>
 8010d94:	e78e      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
 8010d96:	bf00      	nop
 8010d98:	99999999 	.word	0x99999999
 8010d9c:	4091a399 	.word	0x4091a399
 8010da0:	33333333 	.word	0x33333333
 8010da4:	40053333 	.word	0x40053333
 8010da8:	00000000 	.word	0x00000000
 8010dac:	40623800 	.word	0x40623800
 8010db0:	33333333 	.word	0x33333333
 8010db4:	407aff33 	.word	0x407aff33
 8010db8:	66666666 	.word	0x66666666
 8010dbc:	4081f866 	.word	0x4081f866
 8010dc0:	33333333 	.word	0x33333333
 8010dc4:	40867133 	.word	0x40867133
 8010dc8:	99999999 	.word	0x99999999
 8010dcc:	40720d99 	.word	0x40720d99
 8010dd0:	20005279 	.word	0x20005279
 8010dd4:	2000022a 	.word	0x2000022a
 8010dd8:	4093e000 	.word	0x4093e000
 8010ddc:	200052a3 	.word	0x200052a3
 8010de0:	200914c0 	.word	0x200914c0
 8010de4:	200052a0 	.word	0x200052a0
 8010de8:	00000000 	.word	0x00000000
			preGUI_screen_state = GUI_screen_state;
 8010dec:	4ba4      	ldr	r3, [pc, #656]	; (8011080 <GUI_Touch_Processing+0x4e8>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010dee:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 8010df2:	2202      	movs	r2, #2
 8010df4:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010df6:	f7ef fbad 	bl	8000554 <__aeabi_i2d>
 8010dfa:	4606      	mov	r6, r0
 8010dfc:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8010e00:	460f      	mov	r7, r1
 8010e02:	f7ef fba7 	bl	8000554 <__aeabi_i2d>
 8010e06:	a390      	add	r3, pc, #576	; (adr r3, 8011048 <GUI_Touch_Processing+0x4b0>)
 8010e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e0c:	4680      	mov	r8, r0
 8010e0e:	4689      	mov	r9, r1
 8010e10:	f04f 0501 	mov.w	r5, #1
 8010e14:	f7ef fe8a 	bl	8000b2c <__aeabi_dcmpge>
 8010e18:	b900      	cbnz	r0, 8010e1c <GUI_Touch_Processing+0x284>
 8010e1a:	4605      	mov	r5, r0
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	4b99      	ldr	r3, [pc, #612]	; (8011084 <GUI_Touch_Processing+0x4ec>)
 8010e20:	4640      	mov	r0, r8
 8010e22:	4649      	mov	r1, r9
 8010e24:	b2ed      	uxtb	r5, r5
 8010e26:	f04f 0401 	mov.w	r4, #1
 8010e2a:	f7ef fe75 	bl	8000b18 <__aeabi_dcmple>
 8010e2e:	b900      	cbnz	r0, 8010e32 <GUI_Touch_Processing+0x29a>
 8010e30:	4604      	mov	r4, r0
 8010e32:	a387      	add	r3, pc, #540	; (adr r3, 8011050 <GUI_Touch_Processing+0x4b8>)
 8010e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e38:	4630      	mov	r0, r6
 8010e3a:	4639      	mov	r1, r7
 8010e3c:	b2e4      	uxtb	r4, r4
 8010e3e:	f04f 0801 	mov.w	r8, #1
 8010e42:	f7ef fe73 	bl	8000b2c <__aeabi_dcmpge>
 8010e46:	b900      	cbnz	r0, 8010e4a <GUI_Touch_Processing+0x2b2>
 8010e48:	4680      	mov	r8, r0
 8010e4a:	a383      	add	r3, pc, #524	; (adr r3, 8011058 <GUI_Touch_Processing+0x4c0>)
 8010e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e50:	4630      	mov	r0, r6
 8010e52:	4639      	mov	r1, r7
 8010e54:	f04f 0901 	mov.w	r9, #1
 8010e58:	f7ef fe5e 	bl	8000b18 <__aeabi_dcmple>
 8010e5c:	b900      	cbnz	r0, 8010e60 <GUI_Touch_Processing+0x2c8>
 8010e5e:	4681      	mov	r9, r0
 8010e60:	ea08 0309 	and.w	r3, r8, r9
 8010e64:	421d      	tst	r5, r3
 8010e66:	d003      	beq.n	8010e70 <GUI_Touch_Processing+0x2d8>
 8010e68:	b114      	cbz	r4, 8010e70 <GUI_Touch_Processing+0x2d8>
					GUI_screen_state = DataSet1_Screen;
 8010e6a:	2307      	movs	r3, #7
 8010e6c:	f88b 3000 	strb.w	r3, [fp]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010e70:	a37b      	add	r3, pc, #492	; (adr r3, 8011060 <GUI_Touch_Processing+0x4c8>)
 8010e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e76:	4630      	mov	r0, r6
 8010e78:	4639      	mov	r1, r7
 8010e7a:	402c      	ands	r4, r5
 8010e7c:	f04f 0501 	mov.w	r5, #1
 8010e80:	f7ef fe54 	bl	8000b2c <__aeabi_dcmpge>
 8010e84:	b900      	cbnz	r0, 8010e88 <GUI_Touch_Processing+0x2f0>
 8010e86:	4605      	mov	r5, r0
 8010e88:	a377      	add	r3, pc, #476	; (adr r3, 8011068 <GUI_Touch_Processing+0x4d0>)
 8010e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8e:	4630      	mov	r0, r6
 8010e90:	4639      	mov	r1, r7
 8010e92:	f04f 0801 	mov.w	r8, #1
 8010e96:	f7ef fe3f 	bl	8000b18 <__aeabi_dcmple>
 8010e9a:	b900      	cbnz	r0, 8010e9e <GUI_Touch_Processing+0x306>
 8010e9c:	4680      	mov	r8, r0
 8010e9e:	ea05 0508 	and.w	r5, r5, r8
 8010ea2:	07e9      	lsls	r1, r5, #31
 8010ea4:	d50b      	bpl.n	8010ebe <GUI_Touch_Processing+0x326>
 8010ea6:	b154      	cbz	r4, 8010ebe <GUI_Touch_Processing+0x326>
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 8010ea8:	4b77      	ldr	r3, [pc, #476]	; (8011088 <GUI_Touch_Processing+0x4f0>)
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	2b02      	cmp	r3, #2
 8010eae:	bf34      	ite	cc
 8010eb0:	2001      	movcc	r0, #1
 8010eb2:	2003      	movcs	r0, #3
 8010eb4:	f88b 0000 	strb.w	r0, [fp]
					WriteFLASH_Screen(GUI_screen_state);
 8010eb8:	f00b f85a 	bl	801bf70 <WriteFLASH_Screen>
 8010ebc:	e6fa      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8010ebe:	a36a      	add	r3, pc, #424	; (adr r3, 8011068 <GUI_Touch_Processing+0x4d0>)
 8010ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ec4:	4630      	mov	r0, r6
 8010ec6:	4639      	mov	r1, r7
 8010ec8:	f04f 0501 	mov.w	r5, #1
 8010ecc:	f7ef fe2e 	bl	8000b2c <__aeabi_dcmpge>
 8010ed0:	b900      	cbnz	r0, 8010ed4 <GUI_Touch_Processing+0x33c>
 8010ed2:	4605      	mov	r5, r0
 8010ed4:	a366      	add	r3, pc, #408	; (adr r3, 8011070 <GUI_Touch_Processing+0x4d8>)
 8010ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eda:	4630      	mov	r0, r6
 8010edc:	4639      	mov	r1, r7
 8010ede:	f04f 0801 	mov.w	r8, #1
 8010ee2:	f7ef fe19 	bl	8000b18 <__aeabi_dcmple>
 8010ee6:	b900      	cbnz	r0, 8010eea <GUI_Touch_Processing+0x352>
 8010ee8:	4680      	mov	r8, r0
 8010eea:	ea05 0508 	and.w	r5, r5, r8
 8010eee:	07ea      	lsls	r2, r5, #31
 8010ef0:	d502      	bpl.n	8010ef8 <GUI_Touch_Processing+0x360>
 8010ef2:	2c00      	cmp	r4, #0
 8010ef4:	f47f aefc 	bne.w	8010cf0 <GUI_Touch_Processing+0x158>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8010ef8:	a357      	add	r3, pc, #348	; (adr r3, 8011058 <GUI_Touch_Processing+0x4c0>)
 8010efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efe:	4630      	mov	r0, r6
 8010f00:	4639      	mov	r1, r7
 8010f02:	f04f 0501 	mov.w	r5, #1
 8010f06:	f7ef fe11 	bl	8000b2c <__aeabi_dcmpge>
 8010f0a:	b900      	cbnz	r0, 8010f0e <GUI_Touch_Processing+0x376>
 8010f0c:	4605      	mov	r5, r0
 8010f0e:	a35a      	add	r3, pc, #360	; (adr r3, 8011078 <GUI_Touch_Processing+0x4e0>)
 8010f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f14:	4630      	mov	r0, r6
 8010f16:	4639      	mov	r1, r7
 8010f18:	f04f 0801 	mov.w	r8, #1
 8010f1c:	f7ef fdfc 	bl	8000b18 <__aeabi_dcmple>
 8010f20:	b900      	cbnz	r0, 8010f24 <GUI_Touch_Processing+0x38c>
 8010f22:	4680      	mov	r8, r0
 8010f24:	ea05 0508 	and.w	r5, r5, r8
 8010f28:	07eb      	lsls	r3, r5, #31
 8010f2a:	d502      	bpl.n	8010f32 <GUI_Touch_Processing+0x39a>
 8010f2c:	2c00      	cmp	r4, #0
 8010f2e:	f47f af01 	bne.w	8010d34 <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 8010f32:	a351      	add	r3, pc, #324	; (adr r3, 8011078 <GUI_Touch_Processing+0x4e0>)
 8010f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f38:	4630      	mov	r0, r6
 8010f3a:	4639      	mov	r1, r7
 8010f3c:	f04f 0501 	mov.w	r5, #1
 8010f40:	f7ef fdf4 	bl	8000b2c <__aeabi_dcmpge>
 8010f44:	b900      	cbnz	r0, 8010f48 <GUI_Touch_Processing+0x3b0>
 8010f46:	4605      	mov	r5, r0
 8010f48:	a345      	add	r3, pc, #276	; (adr r3, 8011060 <GUI_Touch_Processing+0x4c8>)
 8010f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f4e:	4630      	mov	r0, r6
 8010f50:	4639      	mov	r1, r7
 8010f52:	f04f 0801 	mov.w	r8, #1
 8010f56:	f7ef fddf 	bl	8000b18 <__aeabi_dcmple>
 8010f5a:	b900      	cbnz	r0, 8010f5e <GUI_Touch_Processing+0x3c6>
 8010f5c:	4680      	mov	r8, r0
 8010f5e:	ea05 0508 	and.w	r5, r5, r8
 8010f62:	07ee      	lsls	r6, r5, #31
 8010f64:	f57f aea6 	bpl.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8010f68:	2c00      	cmp	r4, #0
 8010f6a:	f43f aea3 	beq.w	8010cb4 <GUI_Touch_Processing+0x11c>
						pause = !pause;
 8010f6e:	4a47      	ldr	r2, [pc, #284]	; (801108c <GUI_Touch_Processing+0x4f4>)
 8010f70:	7813      	ldrb	r3, [r2, #0]
 8010f72:	fab3 f383 	clz	r3, r3
 8010f76:	095b      	lsrs	r3, r3, #5
 8010f78:	7013      	strb	r3, [r2, #0]
 8010f7a:	e69b      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 8010f7c:	4b40      	ldr	r3, [pc, #256]	; (8011080 <GUI_Touch_Processing+0x4e8>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010f7e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 8010f82:	2203      	movs	r2, #3
 8010f84:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010f86:	f7ef fae5 	bl	8000554 <__aeabi_i2d>
 8010f8a:	4606      	mov	r6, r0
 8010f8c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8010f90:	460f      	mov	r7, r1
 8010f92:	f7ef fadf 	bl	8000554 <__aeabi_i2d>
 8010f96:	a32c      	add	r3, pc, #176	; (adr r3, 8011048 <GUI_Touch_Processing+0x4b0>)
 8010f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f9c:	4680      	mov	r8, r0
 8010f9e:	4689      	mov	r9, r1
 8010fa0:	f04f 0501 	mov.w	r5, #1
 8010fa4:	f7ef fdc2 	bl	8000b2c <__aeabi_dcmpge>
 8010fa8:	b900      	cbnz	r0, 8010fac <GUI_Touch_Processing+0x414>
 8010faa:	4605      	mov	r5, r0
 8010fac:	2200      	movs	r2, #0
 8010fae:	4b35      	ldr	r3, [pc, #212]	; (8011084 <GUI_Touch_Processing+0x4ec>)
 8010fb0:	4640      	mov	r0, r8
 8010fb2:	4649      	mov	r1, r9
 8010fb4:	b2ed      	uxtb	r5, r5
 8010fb6:	f04f 0401 	mov.w	r4, #1
 8010fba:	f7ef fdad 	bl	8000b18 <__aeabi_dcmple>
 8010fbe:	b900      	cbnz	r0, 8010fc2 <GUI_Touch_Processing+0x42a>
 8010fc0:	4604      	mov	r4, r0
 8010fc2:	a323      	add	r3, pc, #140	; (adr r3, 8011050 <GUI_Touch_Processing+0x4b8>)
 8010fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc8:	4630      	mov	r0, r6
 8010fca:	4639      	mov	r1, r7
 8010fcc:	b2e4      	uxtb	r4, r4
 8010fce:	f04f 0801 	mov.w	r8, #1
 8010fd2:	f7ef fdab 	bl	8000b2c <__aeabi_dcmpge>
 8010fd6:	b900      	cbnz	r0, 8010fda <GUI_Touch_Processing+0x442>
 8010fd8:	4680      	mov	r8, r0
 8010fda:	a31f      	add	r3, pc, #124	; (adr r3, 8011058 <GUI_Touch_Processing+0x4c0>)
 8010fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	4639      	mov	r1, r7
 8010fe4:	f04f 0901 	mov.w	r9, #1
 8010fe8:	f7ef fd96 	bl	8000b18 <__aeabi_dcmple>
 8010fec:	b900      	cbnz	r0, 8010ff0 <GUI_Touch_Processing+0x458>
 8010fee:	4681      	mov	r9, r0
 8010ff0:	ea08 0309 	and.w	r3, r8, r9
 8010ff4:	421d      	tst	r5, r3
 8010ff6:	d003      	beq.n	8011000 <GUI_Touch_Processing+0x468>
 8010ff8:	b114      	cbz	r4, 8011000 <GUI_Touch_Processing+0x468>
					GUI_screen_state = DataSet1_Screen;
 8010ffa:	2307      	movs	r3, #7
 8010ffc:	f88b 3000 	strb.w	r3, [fp]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Down
 8011000:	a317      	add	r3, pc, #92	; (adr r3, 8011060 <GUI_Touch_Processing+0x4c8>)
 8011002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011006:	4630      	mov	r0, r6
 8011008:	4639      	mov	r1, r7
 801100a:	402c      	ands	r4, r5
 801100c:	f04f 0501 	mov.w	r5, #1
 8011010:	f7ef fd8c 	bl	8000b2c <__aeabi_dcmpge>
 8011014:	b900      	cbnz	r0, 8011018 <GUI_Touch_Processing+0x480>
 8011016:	4605      	mov	r5, r0
 8011018:	a313      	add	r3, pc, #76	; (adr r3, 8011068 <GUI_Touch_Processing+0x4d0>)
 801101a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801101e:	4630      	mov	r0, r6
 8011020:	4639      	mov	r1, r7
 8011022:	f04f 0801 	mov.w	r8, #1
 8011026:	f7ef fd77 	bl	8000b18 <__aeabi_dcmple>
 801102a:	b900      	cbnz	r0, 801102e <GUI_Touch_Processing+0x496>
 801102c:	4680      	mov	r8, r0
 801102e:	ea05 0508 	and.w	r5, r5, r8
 8011032:	07ed      	lsls	r5, r5, #31
 8011034:	d52c      	bpl.n	8011090 <GUI_Touch_Processing+0x4f8>
 8011036:	b35c      	cbz	r4, 8011090 <GUI_Touch_Processing+0x4f8>
					GUI_screen_state = Measure_Screen;
 8011038:	2001      	movs	r0, #1
 801103a:	f88b 0000 	strb.w	r0, [fp]
					WriteFLASH_Screen(GUI_screen_state);
 801103e:	f00a ff97 	bl	801bf70 <WriteFLASH_Screen>
 8011042:	e637      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
 8011044:	f3af 8000 	nop.w
 8011048:	99999999 	.word	0x99999999
 801104c:	4091a399 	.word	0x4091a399
 8011050:	33333333 	.word	0x33333333
 8011054:	40053333 	.word	0x40053333
 8011058:	00000000 	.word	0x00000000
 801105c:	40623800 	.word	0x40623800
 8011060:	33333333 	.word	0x33333333
 8011064:	407aff33 	.word	0x407aff33
 8011068:	66666666 	.word	0x66666666
 801106c:	4081f866 	.word	0x4081f866
 8011070:	33333333 	.word	0x33333333
 8011074:	40867133 	.word	0x40867133
 8011078:	99999999 	.word	0x99999999
 801107c:	40720d99 	.word	0x40720d99
 8011080:	2000022a 	.word	0x2000022a
 8011084:	4093e000 	.word	0x4093e000
 8011088:	200052a3 	.word	0x200052a3
 801108c:	200052a0 	.word	0x200052a0
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8011090:	a3d5      	add	r3, pc, #852	; (adr r3, 80113e8 <GUI_Touch_Processing+0x850>)
 8011092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011096:	4630      	mov	r0, r6
 8011098:	4639      	mov	r1, r7
 801109a:	f04f 0501 	mov.w	r5, #1
 801109e:	f7ef fd45 	bl	8000b2c <__aeabi_dcmpge>
 80110a2:	b900      	cbnz	r0, 80110a6 <GUI_Touch_Processing+0x50e>
 80110a4:	4605      	mov	r5, r0
 80110a6:	a3d2      	add	r3, pc, #840	; (adr r3, 80113f0 <GUI_Touch_Processing+0x858>)
 80110a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ac:	4630      	mov	r0, r6
 80110ae:	4639      	mov	r1, r7
 80110b0:	f04f 0801 	mov.w	r8, #1
 80110b4:	f7ef fd30 	bl	8000b18 <__aeabi_dcmple>
 80110b8:	b900      	cbnz	r0, 80110bc <GUI_Touch_Processing+0x524>
 80110ba:	4680      	mov	r8, r0
 80110bc:	ea05 0508 	and.w	r5, r5, r8
 80110c0:	07e8      	lsls	r0, r5, #31
 80110c2:	d502      	bpl.n	80110ca <GUI_Touch_Processing+0x532>
 80110c4:	2c00      	cmp	r4, #0
 80110c6:	f47f ae13 	bne.w	8010cf0 <GUI_Touch_Processing+0x158>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 80110ca:	a3c3      	add	r3, pc, #780	; (adr r3, 80113d8 <GUI_Touch_Processing+0x840>)
 80110cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d0:	4630      	mov	r0, r6
 80110d2:	4639      	mov	r1, r7
 80110d4:	f04f 0501 	mov.w	r5, #1
 80110d8:	f7ef fd28 	bl	8000b2c <__aeabi_dcmpge>
 80110dc:	b900      	cbnz	r0, 80110e0 <GUI_Touch_Processing+0x548>
 80110de:	4605      	mov	r5, r0
 80110e0:	a3c5      	add	r3, pc, #788	; (adr r3, 80113f8 <GUI_Touch_Processing+0x860>)
 80110e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110e6:	4630      	mov	r0, r6
 80110e8:	4639      	mov	r1, r7
 80110ea:	f04f 0801 	mov.w	r8, #1
 80110ee:	f7ef fd13 	bl	8000b18 <__aeabi_dcmple>
 80110f2:	b900      	cbnz	r0, 80110f6 <GUI_Touch_Processing+0x55e>
 80110f4:	4680      	mov	r8, r0
 80110f6:	ea05 0508 	and.w	r5, r5, r8
 80110fa:	07e9      	lsls	r1, r5, #31
 80110fc:	d502      	bpl.n	8011104 <GUI_Touch_Processing+0x56c>
 80110fe:	2c00      	cmp	r4, #0
 8011100:	f47f ae18 	bne.w	8010d34 <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 8011104:	a3bc      	add	r3, pc, #752	; (adr r3, 80113f8 <GUI_Touch_Processing+0x860>)
 8011106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110a:	4630      	mov	r0, r6
 801110c:	4639      	mov	r1, r7
 801110e:	f04f 0501 	mov.w	r5, #1
 8011112:	f7ef fd0b 	bl	8000b2c <__aeabi_dcmpge>
 8011116:	b900      	cbnz	r0, 801111a <GUI_Touch_Processing+0x582>
 8011118:	4605      	mov	r5, r0
 801111a:	a3b1      	add	r3, pc, #708	; (adr r3, 80113e0 <GUI_Touch_Processing+0x848>)
 801111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011120:	4630      	mov	r0, r6
 8011122:	4639      	mov	r1, r7
 8011124:	f04f 0801 	mov.w	r8, #1
 8011128:	f7ef fcf6 	bl	8000b18 <__aeabi_dcmple>
 801112c:	b900      	cbnz	r0, 8011130 <GUI_Touch_Processing+0x598>
 801112e:	4680      	mov	r8, r0
 8011130:	ea05 0508 	and.w	r5, r5, r8
 8011134:	07ea      	lsls	r2, r5, #31
 8011136:	f57f adbd 	bpl.w	8010cb4 <GUI_Touch_Processing+0x11c>
 801113a:	2c00      	cmp	r4, #0
 801113c:	f43f adba 	beq.w	8010cb4 <GUI_Touch_Processing+0x11c>
						pause = !pause;
 8011140:	4aaf      	ldr	r2, [pc, #700]	; (8011400 <GUI_Touch_Processing+0x868>)
						GUI_Bar_Measure(85, 13, 0.0);
 8011142:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8011404 <GUI_Touch_Processing+0x86c>
						pause = !pause;
 8011146:	7813      	ldrb	r3, [r2, #0]
 8011148:	fab3 f383 	clz	r3, r3
 801114c:	095b      	lsrs	r3, r3, #5
						GUI_Bar_Measure(85, 13, 0.0);
 801114e:	210d      	movs	r1, #13
 8011150:	2055      	movs	r0, #85	; 0x55
						pause = !pause;
 8011152:	7013      	strb	r3, [r2, #0]
						GUI_Bar_Measure(85, 13, 0.0);
 8011154:	f004 faa2 	bl	801569c <GUI_Bar_Measure>
 8011158:	e5ac      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 801115a:	4bab      	ldr	r3, [pc, #684]	; (8011408 <GUI_Touch_Processing+0x870>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 801115c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 8011160:	2204      	movs	r2, #4
 8011162:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8011164:	f7ef f9f6 	bl	8000554 <__aeabi_i2d>
 8011168:	4606      	mov	r6, r0
 801116a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801116e:	460f      	mov	r7, r1
 8011170:	f7ef f9f0 	bl	8000554 <__aeabi_i2d>
 8011174:	a394      	add	r3, pc, #592	; (adr r3, 80113c8 <GUI_Touch_Processing+0x830>)
 8011176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801117a:	4680      	mov	r8, r0
 801117c:	4689      	mov	r9, r1
 801117e:	f04f 0501 	mov.w	r5, #1
 8011182:	f7ef fcd3 	bl	8000b2c <__aeabi_dcmpge>
 8011186:	b900      	cbnz	r0, 801118a <GUI_Touch_Processing+0x5f2>
 8011188:	4605      	mov	r5, r0
 801118a:	2200      	movs	r2, #0
 801118c:	4b9f      	ldr	r3, [pc, #636]	; (801140c <GUI_Touch_Processing+0x874>)
 801118e:	4640      	mov	r0, r8
 8011190:	4649      	mov	r1, r9
 8011192:	b2ed      	uxtb	r5, r5
 8011194:	f04f 0401 	mov.w	r4, #1
 8011198:	f7ef fcbe 	bl	8000b18 <__aeabi_dcmple>
 801119c:	b900      	cbnz	r0, 80111a0 <GUI_Touch_Processing+0x608>
 801119e:	4604      	mov	r4, r0
 80111a0:	a38b      	add	r3, pc, #556	; (adr r3, 80113d0 <GUI_Touch_Processing+0x838>)
 80111a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a6:	4630      	mov	r0, r6
 80111a8:	4639      	mov	r1, r7
 80111aa:	b2e4      	uxtb	r4, r4
 80111ac:	f04f 0801 	mov.w	r8, #1
 80111b0:	f7ef fcbc 	bl	8000b2c <__aeabi_dcmpge>
 80111b4:	b900      	cbnz	r0, 80111b8 <GUI_Touch_Processing+0x620>
 80111b6:	4680      	mov	r8, r0
 80111b8:	a387      	add	r3, pc, #540	; (adr r3, 80113d8 <GUI_Touch_Processing+0x840>)
 80111ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111be:	4630      	mov	r0, r6
 80111c0:	4639      	mov	r1, r7
 80111c2:	f04f 0901 	mov.w	r9, #1
 80111c6:	f7ef fca7 	bl	8000b18 <__aeabi_dcmple>
 80111ca:	b900      	cbnz	r0, 80111ce <GUI_Touch_Processing+0x636>
 80111cc:	4681      	mov	r9, r0
 80111ce:	ea08 0309 	and.w	r3, r8, r9
 80111d2:	421d      	tst	r5, r3
 80111d4:	d003      	beq.n	80111de <GUI_Touch_Processing+0x646>
 80111d6:	b114      	cbz	r4, 80111de <GUI_Touch_Processing+0x646>
					GUI_screen_state = GraphSet1_Screen;
 80111d8:	230c      	movs	r3, #12
 80111da:	f88b 3000 	strb.w	r3, [fp]
			if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Rotation_Screen
 80111de:	a380      	add	r3, pc, #512	; (adr r3, 80113e0 <GUI_Touch_Processing+0x848>)
 80111e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e4:	4630      	mov	r0, r6
 80111e6:	4639      	mov	r1, r7
 80111e8:	402c      	ands	r4, r5
 80111ea:	f04f 0501 	mov.w	r5, #1
 80111ee:	f7ef fc9d 	bl	8000b2c <__aeabi_dcmpge>
 80111f2:	b900      	cbnz	r0, 80111f6 <GUI_Touch_Processing+0x65e>
 80111f4:	4605      	mov	r5, r0
 80111f6:	a37c      	add	r3, pc, #496	; (adr r3, 80113e8 <GUI_Touch_Processing+0x850>)
 80111f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111fc:	4630      	mov	r0, r6
 80111fe:	4639      	mov	r1, r7
 8011200:	f04f 0801 	mov.w	r8, #1
 8011204:	f7ef fc88 	bl	8000b18 <__aeabi_dcmple>
 8011208:	b900      	cbnz	r0, 801120c <GUI_Touch_Processing+0x674>
 801120a:	4680      	mov	r8, r0
 801120c:	ea05 0508 	and.w	r5, r5, r8
 8011210:	07eb      	lsls	r3, r5, #31
 8011212:	d508      	bpl.n	8011226 <GUI_Touch_Processing+0x68e>
 8011214:	b13c      	cbz	r4, 8011226 <GUI_Touch_Processing+0x68e>
					if(Rotation_Screen_Spectral < 0x02) {Rotation_Screen_Spectral++;} else{Rotation_Screen_Spectral= 0x00;}
 8011216:	4a7e      	ldr	r2, [pc, #504]	; (8011410 <GUI_Touch_Processing+0x878>)
 8011218:	7813      	ldrb	r3, [r2, #0]
 801121a:	2b01      	cmp	r3, #1
 801121c:	bf94      	ite	ls
 801121e:	3301      	addls	r3, #1
 8011220:	2300      	movhi	r3, #0
 8011222:	7013      	strb	r3, [r2, #0]
 8011224:	e546      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8011226:	a370      	add	r3, pc, #448	; (adr r3, 80113e8 <GUI_Touch_Processing+0x850>)
 8011228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122c:	4630      	mov	r0, r6
 801122e:	4639      	mov	r1, r7
 8011230:	f04f 0501 	mov.w	r5, #1
 8011234:	f7ef fc7a 	bl	8000b2c <__aeabi_dcmpge>
 8011238:	b900      	cbnz	r0, 801123c <GUI_Touch_Processing+0x6a4>
 801123a:	4605      	mov	r5, r0
 801123c:	a36c      	add	r3, pc, #432	; (adr r3, 80113f0 <GUI_Touch_Processing+0x858>)
 801123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011242:	4630      	mov	r0, r6
 8011244:	4639      	mov	r1, r7
 8011246:	f04f 0801 	mov.w	r8, #1
 801124a:	f7ef fc65 	bl	8000b18 <__aeabi_dcmple>
 801124e:	b900      	cbnz	r0, 8011252 <GUI_Touch_Processing+0x6ba>
 8011250:	4680      	mov	r8, r0
 8011252:	ea05 0508 	and.w	r5, r5, r8
 8011256:	07ed      	lsls	r5, r5, #31
 8011258:	d507      	bpl.n	801126a <GUI_Touch_Processing+0x6d2>
 801125a:	b134      	cbz	r4, 801126a <GUI_Touch_Processing+0x6d2>
					WriteFLASH_Screen(Color_Screen);
 801125c:	2005      	movs	r0, #5
 801125e:	f00a fe87 	bl	801bf70 <WriteFLASH_Screen>
					GUI_screen_state = Color_Screen;
 8011262:	2305      	movs	r3, #5
 8011264:	f88b 3000 	strb.w	r3, [fp]
 8011268:	e524      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 801126a:	a35b      	add	r3, pc, #364	; (adr r3, 80113d8 <GUI_Touch_Processing+0x840>)
 801126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011270:	4630      	mov	r0, r6
 8011272:	4639      	mov	r1, r7
 8011274:	f04f 0501 	mov.w	r5, #1
 8011278:	f7ef fc58 	bl	8000b2c <__aeabi_dcmpge>
 801127c:	b900      	cbnz	r0, 8011280 <GUI_Touch_Processing+0x6e8>
 801127e:	4605      	mov	r5, r0
 8011280:	a35d      	add	r3, pc, #372	; (adr r3, 80113f8 <GUI_Touch_Processing+0x860>)
 8011282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011286:	4630      	mov	r0, r6
 8011288:	4639      	mov	r1, r7
 801128a:	f04f 0801 	mov.w	r8, #1
 801128e:	f7ef fc43 	bl	8000b18 <__aeabi_dcmple>
 8011292:	b900      	cbnz	r0, 8011296 <GUI_Touch_Processing+0x6fe>
 8011294:	4680      	mov	r8, r0
 8011296:	ea05 0508 	and.w	r5, r5, r8
 801129a:	07e8      	lsls	r0, r5, #31
 801129c:	d502      	bpl.n	80112a4 <GUI_Touch_Processing+0x70c>
 801129e:	2c00      	cmp	r4, #0
 80112a0:	f47f ad48 	bne.w	8010d34 <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 80112a4:	a354      	add	r3, pc, #336	; (adr r3, 80113f8 <GUI_Touch_Processing+0x860>)
 80112a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112aa:	4630      	mov	r0, r6
 80112ac:	4639      	mov	r1, r7
 80112ae:	f04f 0501 	mov.w	r5, #1
 80112b2:	f7ef fc3b 	bl	8000b2c <__aeabi_dcmpge>
 80112b6:	b900      	cbnz	r0, 80112ba <GUI_Touch_Processing+0x722>
 80112b8:	4605      	mov	r5, r0
 80112ba:	a349      	add	r3, pc, #292	; (adr r3, 80113e0 <GUI_Touch_Processing+0x848>)
 80112bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c0:	4630      	mov	r0, r6
 80112c2:	4639      	mov	r1, r7
 80112c4:	f04f 0801 	mov.w	r8, #1
 80112c8:	f7ef fc26 	bl	8000b18 <__aeabi_dcmple>
 80112cc:	b900      	cbnz	r0, 80112d0 <GUI_Touch_Processing+0x738>
 80112ce:	4680      	mov	r8, r0
 80112d0:	ea05 0508 	and.w	r5, r5, r8
 80112d4:	07e9      	lsls	r1, r5, #31
 80112d6:	f57f aced 	bpl.w	8010cb4 <GUI_Touch_Processing+0x11c>
 80112da:	2c00      	cmp	r4, #0
 80112dc:	f43f acea 	beq.w	8010cb4 <GUI_Touch_Processing+0x11c>
					pause = !pause;
 80112e0:	4a47      	ldr	r2, [pc, #284]	; (8011400 <GUI_Touch_Processing+0x868>)
 80112e2:	7813      	ldrb	r3, [r2, #0]
 80112e4:	fab3 f383 	clz	r3, r3
 80112e8:	095b      	lsrs	r3, r3, #5
 80112ea:	7013      	strb	r3, [r2, #0]
 80112ec:	e4e2      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 80112ee:	4b46      	ldr	r3, [pc, #280]	; (8011408 <GUI_Touch_Processing+0x870>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 80112f0:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 80112f4:	2205      	movs	r2, #5
 80112f6:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 80112f8:	f7ef f92c 	bl	8000554 <__aeabi_i2d>
 80112fc:	4604      	mov	r4, r0
 80112fe:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011302:	460d      	mov	r5, r1
 8011304:	f7ef f926 	bl	8000554 <__aeabi_i2d>
 8011308:	a32f      	add	r3, pc, #188	; (adr r3, 80113c8 <GUI_Touch_Processing+0x830>)
 801130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130e:	4680      	mov	r8, r0
 8011310:	4689      	mov	r9, r1
 8011312:	f04f 0701 	mov.w	r7, #1
 8011316:	f7ef fc09 	bl	8000b2c <__aeabi_dcmpge>
 801131a:	b900      	cbnz	r0, 801131e <GUI_Touch_Processing+0x786>
 801131c:	4607      	mov	r7, r0
 801131e:	2200      	movs	r2, #0
 8011320:	4b3a      	ldr	r3, [pc, #232]	; (801140c <GUI_Touch_Processing+0x874>)
 8011322:	4640      	mov	r0, r8
 8011324:	4649      	mov	r1, r9
 8011326:	b2ff      	uxtb	r7, r7
 8011328:	f04f 0601 	mov.w	r6, #1
 801132c:	f7ef fbf4 	bl	8000b18 <__aeabi_dcmple>
 8011330:	b900      	cbnz	r0, 8011334 <GUI_Touch_Processing+0x79c>
 8011332:	4606      	mov	r6, r0
 8011334:	a326      	add	r3, pc, #152	; (adr r3, 80113d0 <GUI_Touch_Processing+0x838>)
 8011336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801133a:	4620      	mov	r0, r4
 801133c:	4629      	mov	r1, r5
 801133e:	b2f6      	uxtb	r6, r6
 8011340:	f04f 0801 	mov.w	r8, #1
 8011344:	f7ef fbf2 	bl	8000b2c <__aeabi_dcmpge>
 8011348:	b900      	cbnz	r0, 801134c <GUI_Touch_Processing+0x7b4>
 801134a:	4680      	mov	r8, r0
 801134c:	a322      	add	r3, pc, #136	; (adr r3, 80113d8 <GUI_Touch_Processing+0x840>)
 801134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011352:	4620      	mov	r0, r4
 8011354:	4629      	mov	r1, r5
 8011356:	f04f 0901 	mov.w	r9, #1
 801135a:	f7ef fbdd 	bl	8000b18 <__aeabi_dcmple>
 801135e:	b900      	cbnz	r0, 8011362 <GUI_Touch_Processing+0x7ca>
 8011360:	4681      	mov	r9, r0
 8011362:	ea08 0309 	and.w	r3, r8, r9
 8011366:	421f      	tst	r7, r3
 8011368:	d008      	beq.n	801137c <GUI_Touch_Processing+0x7e4>
 801136a:	b13e      	cbz	r6, 801137c <GUI_Touch_Processing+0x7e4>
					preColor_Field = Color_Field;
 801136c:	4b29      	ldr	r3, [pc, #164]	; (8011414 <GUI_Touch_Processing+0x87c>)
 801136e:	781a      	ldrb	r2, [r3, #0]
 8011370:	4b29      	ldr	r3, [pc, #164]	; (8011418 <GUI_Touch_Processing+0x880>)
 8011372:	701a      	strb	r2, [r3, #0]
					GUI_screen_state = ColorSet1_Screen;
 8011374:	230e      	movs	r3, #14
 8011376:	f88b 3000 	strb.w	r3, [fp]
 801137a:	e49b      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 801137c:	a31a      	add	r3, pc, #104	; (adr r3, 80113e8 <GUI_Touch_Processing+0x850>)
 801137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011382:	4620      	mov	r0, r4
 8011384:	4629      	mov	r1, r5
 8011386:	ea07 0806 	and.w	r8, r7, r6
 801138a:	f04f 0901 	mov.w	r9, #1
 801138e:	f7ef fbcd 	bl	8000b2c <__aeabi_dcmpge>
 8011392:	b900      	cbnz	r0, 8011396 <GUI_Touch_Processing+0x7fe>
 8011394:	4681      	mov	r9, r0
 8011396:	a316      	add	r3, pc, #88	; (adr r3, 80113f0 <GUI_Touch_Processing+0x858>)
 8011398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139c:	4620      	mov	r0, r4
 801139e:	4629      	mov	r1, r5
 80113a0:	f04f 0a01 	mov.w	sl, #1
 80113a4:	f7ef fbb8 	bl	8000b18 <__aeabi_dcmple>
 80113a8:	b900      	cbnz	r0, 80113ac <GUI_Touch_Processing+0x814>
 80113aa:	4682      	mov	sl, r0
 80113ac:	ea09 030a 	and.w	r3, r9, sl
 80113b0:	07da      	lsls	r2, r3, #31
 80113b2:	d533      	bpl.n	801141c <GUI_Touch_Processing+0x884>
 80113b4:	f1b8 0f00 	cmp.w	r8, #0
 80113b8:	d030      	beq.n	801141c <GUI_Touch_Processing+0x884>
					WriteFLASH_Screen(Color_Rendition_Screen);
 80113ba:	2006      	movs	r0, #6
 80113bc:	f00a fdd8 	bl	801bf70 <WriteFLASH_Screen>
					GUI_screen_state = Color_Rendition_Screen;
 80113c0:	2306      	movs	r3, #6
 80113c2:	f88b 3000 	strb.w	r3, [fp]
 80113c6:	e475      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
 80113c8:	99999999 	.word	0x99999999
 80113cc:	4091a399 	.word	0x4091a399
 80113d0:	33333333 	.word	0x33333333
 80113d4:	40053333 	.word	0x40053333
 80113d8:	00000000 	.word	0x00000000
 80113dc:	40623800 	.word	0x40623800
 80113e0:	33333333 	.word	0x33333333
 80113e4:	407aff33 	.word	0x407aff33
 80113e8:	66666666 	.word	0x66666666
 80113ec:	4081f866 	.word	0x4081f866
 80113f0:	33333333 	.word	0x33333333
 80113f4:	40867133 	.word	0x40867133
 80113f8:	99999999 	.word	0x99999999
 80113fc:	40720d99 	.word	0x40720d99
 8011400:	200052a0 	.word	0x200052a0
 8011404:	00000000 	.word	0x00000000
 8011408:	2000022a 	.word	0x2000022a
 801140c:	4093e000 	.word	0x4093e000
 8011410:	20005282 	.word	0x20005282
 8011414:	20005277 	.word	0x20005277
 8011418:	200052a1 	.word	0x200052a1
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 801141c:	a3b4      	add	r3, pc, #720	; (adr r3, 80116f0 <GUI_Touch_Processing+0xb58>)
 801141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011422:	4620      	mov	r0, r4
 8011424:	4629      	mov	r1, r5
 8011426:	f04f 0901 	mov.w	r9, #1
 801142a:	f7ef fb7f 	bl	8000b2c <__aeabi_dcmpge>
 801142e:	b900      	cbnz	r0, 8011432 <GUI_Touch_Processing+0x89a>
 8011430:	4681      	mov	r9, r0
 8011432:	a3b9      	add	r3, pc, #740	; (adr r3, 8011718 <GUI_Touch_Processing+0xb80>)
 8011434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011438:	4620      	mov	r0, r4
 801143a:	4629      	mov	r1, r5
 801143c:	f04f 0a01 	mov.w	sl, #1
 8011440:	f7ef fb6a 	bl	8000b18 <__aeabi_dcmple>
 8011444:	b900      	cbnz	r0, 8011448 <GUI_Touch_Processing+0x8b0>
 8011446:	4682      	mov	sl, r0
 8011448:	ea09 030a 	and.w	r3, r9, sl
 801144c:	07db      	lsls	r3, r3, #31
 801144e:	d509      	bpl.n	8011464 <GUI_Touch_Processing+0x8cc>
 8011450:	f1b8 0f00 	cmp.w	r8, #0
 8011454:	d006      	beq.n	8011464 <GUI_Touch_Processing+0x8cc>
					pause = !pause;
 8011456:	4ab2      	ldr	r2, [pc, #712]	; (8011720 <GUI_Touch_Processing+0xb88>)
 8011458:	7813      	ldrb	r3, [r2, #0]
 801145a:	fab3 f383 	clz	r3, r3
 801145e:	095b      	lsrs	r3, r3, #5
 8011460:	7013      	strb	r3, [r2, #0]
 8011462:	e427      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011464:	a3a0      	add	r3, pc, #640	; (adr r3, 80116e8 <GUI_Touch_Processing+0xb50>)
 8011466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801146a:	4620      	mov	r0, r4
 801146c:	4629      	mov	r1, r5
 801146e:	f04f 0801 	mov.w	r8, #1
 8011472:	f7ef fb5b 	bl	8000b2c <__aeabi_dcmpge>
 8011476:	b900      	cbnz	r0, 801147a <GUI_Touch_Processing+0x8e2>
 8011478:	4680      	mov	r8, r0
 801147a:	a39d      	add	r3, pc, #628	; (adr r3, 80116f0 <GUI_Touch_Processing+0xb58>)
 801147c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011480:	4620      	mov	r0, r4
 8011482:	4629      	mov	r1, r5
 8011484:	f04f 0901 	mov.w	r9, #1
 8011488:	f7ef fb46 	bl	8000b18 <__aeabi_dcmple>
 801148c:	b900      	cbnz	r0, 8011490 <GUI_Touch_Processing+0x8f8>
 801148e:	4681      	mov	r9, r0
 8011490:	ea08 0809 	and.w	r8, r8, r9
 8011494:	ea17 0f08 	tst.w	r7, r8
 8011498:	f43f ac0c 	beq.w	8010cb4 <GUI_Touch_Processing+0x11c>
 801149c:	2e00      	cmp	r6, #0
 801149e:	f47f ac49 	bne.w	8010d34 <GUI_Touch_Processing+0x19c>
 80114a2:	e407      	b.n	8010cb4 <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 80114a4:	4b9f      	ldr	r3, [pc, #636]	; (8011724 <GUI_Touch_Processing+0xb8c>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 80114a6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 80114aa:	2206      	movs	r2, #6
 80114ac:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 80114ae:	f7ef f851 	bl	8000554 <__aeabi_i2d>
 80114b2:	4606      	mov	r6, r0
 80114b4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80114b8:	460f      	mov	r7, r1
 80114ba:	f7ef f84b 	bl	8000554 <__aeabi_i2d>
 80114be:	a38e      	add	r3, pc, #568	; (adr r3, 80116f8 <GUI_Touch_Processing+0xb60>)
 80114c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c4:	4680      	mov	r8, r0
 80114c6:	4689      	mov	r9, r1
 80114c8:	f04f 0501 	mov.w	r5, #1
 80114cc:	f7ef fb2e 	bl	8000b2c <__aeabi_dcmpge>
 80114d0:	b900      	cbnz	r0, 80114d4 <GUI_Touch_Processing+0x93c>
 80114d2:	4605      	mov	r5, r0
 80114d4:	2200      	movs	r2, #0
 80114d6:	4b94      	ldr	r3, [pc, #592]	; (8011728 <GUI_Touch_Processing+0xb90>)
 80114d8:	4640      	mov	r0, r8
 80114da:	4649      	mov	r1, r9
 80114dc:	b2ed      	uxtb	r5, r5
 80114de:	f04f 0401 	mov.w	r4, #1
 80114e2:	f7ef fb19 	bl	8000b18 <__aeabi_dcmple>
 80114e6:	b900      	cbnz	r0, 80114ea <GUI_Touch_Processing+0x952>
 80114e8:	4604      	mov	r4, r0
 80114ea:	a385      	add	r3, pc, #532	; (adr r3, 8011700 <GUI_Touch_Processing+0xb68>)
 80114ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f0:	4630      	mov	r0, r6
 80114f2:	4639      	mov	r1, r7
 80114f4:	b2e4      	uxtb	r4, r4
 80114f6:	f04f 0801 	mov.w	r8, #1
 80114fa:	f7ef fb17 	bl	8000b2c <__aeabi_dcmpge>
 80114fe:	b900      	cbnz	r0, 8011502 <GUI_Touch_Processing+0x96a>
 8011500:	4680      	mov	r8, r0
 8011502:	a379      	add	r3, pc, #484	; (adr r3, 80116e8 <GUI_Touch_Processing+0xb50>)
 8011504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011508:	4630      	mov	r0, r6
 801150a:	4639      	mov	r1, r7
 801150c:	f04f 0901 	mov.w	r9, #1
 8011510:	f7ef fb02 	bl	8000b18 <__aeabi_dcmple>
 8011514:	b900      	cbnz	r0, 8011518 <GUI_Touch_Processing+0x980>
 8011516:	4681      	mov	r9, r0
 8011518:	ea08 0309 	and.w	r3, r8, r9
 801151c:	421d      	tst	r5, r3
 801151e:	d005      	beq.n	801152c <GUI_Touch_Processing+0x994>
 8011520:	b124      	cbz	r4, 801152c <GUI_Touch_Processing+0x994>
					GUI_screen_state = ColorRendSet_Screen;
 8011522:	2310      	movs	r3, #16
 8011524:	f88b 3000 	strb.w	r3, [fp]
 8011528:	f7ff bbc4 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 801152c:	a376      	add	r3, pc, #472	; (adr r3, 8011708 <GUI_Touch_Processing+0xb70>)
 801152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011532:	4630      	mov	r0, r6
 8011534:	4639      	mov	r1, r7
 8011536:	402c      	ands	r4, r5
 8011538:	f04f 0501 	mov.w	r5, #1
 801153c:	f7ef faf6 	bl	8000b2c <__aeabi_dcmpge>
 8011540:	b900      	cbnz	r0, 8011544 <GUI_Touch_Processing+0x9ac>
 8011542:	4605      	mov	r5, r0
 8011544:	a372      	add	r3, pc, #456	; (adr r3, 8011710 <GUI_Touch_Processing+0xb78>)
 8011546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801154a:	4630      	mov	r0, r6
 801154c:	4639      	mov	r1, r7
 801154e:	f04f 0801 	mov.w	r8, #1
 8011552:	f7ef fae1 	bl	8000b18 <__aeabi_dcmple>
 8011556:	b900      	cbnz	r0, 801155a <GUI_Touch_Processing+0x9c2>
 8011558:	4680      	mov	r8, r0
 801155a:	ea05 0508 	and.w	r5, r5, r8
 801155e:	07ed      	lsls	r5, r5, #31
 8011560:	d508      	bpl.n	8011574 <GUI_Touch_Processing+0x9dc>
 8011562:	b13c      	cbz	r4, 8011574 <GUI_Touch_Processing+0x9dc>
					WriteFLASH_Screen(Measure_Screen);
 8011564:	2001      	movs	r0, #1
 8011566:	f00a fd03 	bl	801bf70 <WriteFLASH_Screen>
					GUI_screen_state = Measure_Screen;
 801156a:	2301      	movs	r3, #1
 801156c:	f88b 3000 	strb.w	r3, [fp]
 8011570:	f7ff bba0 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Rotation_Screen
 8011574:	a368      	add	r3, pc, #416	; (adr r3, 8011718 <GUI_Touch_Processing+0xb80>)
 8011576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801157a:	4630      	mov	r0, r6
 801157c:	4639      	mov	r1, r7
 801157e:	f04f 0501 	mov.w	r5, #1
 8011582:	f7ef fad3 	bl	8000b2c <__aeabi_dcmpge>
 8011586:	b900      	cbnz	r0, 801158a <GUI_Touch_Processing+0x9f2>
 8011588:	4605      	mov	r5, r0
 801158a:	a35f      	add	r3, pc, #380	; (adr r3, 8011708 <GUI_Touch_Processing+0xb70>)
 801158c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011590:	4630      	mov	r0, r6
 8011592:	4639      	mov	r1, r7
 8011594:	f04f 0801 	mov.w	r8, #1
 8011598:	f7ef fabe 	bl	8000b18 <__aeabi_dcmple>
 801159c:	b900      	cbnz	r0, 80115a0 <GUI_Touch_Processing+0xa08>
 801159e:	4680      	mov	r8, r0
 80115a0:	ea05 0508 	and.w	r5, r5, r8
 80115a4:	07e8      	lsls	r0, r5, #31
 80115a6:	d509      	bpl.n	80115bc <GUI_Touch_Processing+0xa24>
 80115a8:	b144      	cbz	r4, 80115bc <GUI_Touch_Processing+0xa24>
					if(Rotation_Screen_Rend < 0x02) {Rotation_Screen_Rend++;} else{Rotation_Screen_Rend = 0x00;}
 80115aa:	4a60      	ldr	r2, [pc, #384]	; (801172c <GUI_Touch_Processing+0xb94>)
 80115ac:	7813      	ldrb	r3, [r2, #0]
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	bf94      	ite	ls
 80115b2:	3301      	addls	r3, #1
 80115b4:	2300      	movhi	r3, #0
 80115b6:	7013      	strb	r3, [r2, #0]
 80115b8:	f7ff bb7c 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 80115bc:	a34c      	add	r3, pc, #304	; (adr r3, 80116f0 <GUI_Touch_Processing+0xb58>)
 80115be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c2:	4630      	mov	r0, r6
 80115c4:	4639      	mov	r1, r7
 80115c6:	f04f 0501 	mov.w	r5, #1
 80115ca:	f7ef faaf 	bl	8000b2c <__aeabi_dcmpge>
 80115ce:	b900      	cbnz	r0, 80115d2 <GUI_Touch_Processing+0xa3a>
 80115d0:	4605      	mov	r5, r0
 80115d2:	a351      	add	r3, pc, #324	; (adr r3, 8011718 <GUI_Touch_Processing+0xb80>)
 80115d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115d8:	4630      	mov	r0, r6
 80115da:	4639      	mov	r1, r7
 80115dc:	f04f 0801 	mov.w	r8, #1
 80115e0:	f7ef fa9a 	bl	8000b18 <__aeabi_dcmple>
 80115e4:	b900      	cbnz	r0, 80115e8 <GUI_Touch_Processing+0xa50>
 80115e6:	4680      	mov	r8, r0
 80115e8:	ea05 0508 	and.w	r5, r5, r8
 80115ec:	07e9      	lsls	r1, r5, #31
 80115ee:	f140 80c7 	bpl.w	8011780 <GUI_Touch_Processing+0xbe8>
 80115f2:	2c00      	cmp	r4, #0
 80115f4:	f000 80c4 	beq.w	8011780 <GUI_Touch_Processing+0xbe8>
					if (Color_rend_Field & CRI_CQS){
 80115f8:	4b4d      	ldr	r3, [pc, #308]	; (8011730 <GUI_Touch_Processing+0xb98>)
 80115fa:	f8df 8180 	ldr.w	r8, [pc, #384]	; 801177c <GUI_Touch_Processing+0xbe4>
 80115fe:	781c      	ldrb	r4, [r3, #0]
 8011600:	4e4c      	ldr	r6, [pc, #304]	; (8011734 <GUI_Touch_Processing+0xb9c>)
 8011602:	4f4d      	ldr	r7, [pc, #308]	; (8011738 <GUI_Touch_Processing+0xba0>)
 8011604:	4d4d      	ldr	r5, [pc, #308]	; (801173c <GUI_Touch_Processing+0xba4>)
 8011606:	f014 0401 	ands.w	r4, r4, #1
 801160a:	d03e      	beq.n	801168a <GUI_Touch_Processing+0xaf2>
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 801160c:	484c      	ldr	r0, [pc, #304]	; (8011740 <GUI_Touch_Processing+0xba8>)
						CRICQS_done = 0x00;
 801160e:	2400      	movs	r4, #0
 8011610:	f888 4000 	strb.w	r4, [r8]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011614:	f00a fbcc 	bl	801bdb0 <Rabs_find_MAX_all>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011618:	4b4a      	ldr	r3, [pc, #296]	; (8011744 <GUI_Touch_Processing+0xbac>)
 801161a:	4a4b      	ldr	r2, [pc, #300]	; (8011748 <GUI_Touch_Processing+0xbb0>)
 801161c:	494b      	ldr	r1, [pc, #300]	; (801174c <GUI_Touch_Processing+0xbb4>)
 801161e:	4848      	ldr	r0, [pc, #288]	; (8011740 <GUI_Touch_Processing+0xba8>)
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011620:	ed86 0a00 	vstr	s0, [r6]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011624:	f7fc fd82 	bl	800e12c <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 8011628:	4849      	ldr	r0, [pc, #292]	; (8011750 <GUI_Touch_Processing+0xbb8>)
 801162a:	f7fc fdeb 	bl	800e204 <Calculate_xy1931>
						Calculate_uv(colorimetry_xy1931);
 801162e:	4849      	ldr	r0, [pc, #292]	; (8011754 <GUI_Touch_Processing+0xbbc>)
 8011630:	f7fc fe06 	bl	800e240 <Calculate_uv>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011634:	4842      	ldr	r0, [pc, #264]	; (8011740 <GUI_Touch_Processing+0xba8>)
 8011636:	7839      	ldrb	r1, [r7, #0]
 8011638:	f7fc fe4a 	bl	800e2d0 <Calculate_Tc>
 801163c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 8011640:	f64f 73ff 	movw	r3, #65535	; 0xffff
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011644:	edcd 7a00 	vstr	s15, [sp]
 8011648:	f8bd 0000 	ldrh.w	r0, [sp]
 801164c:	8028      	strh	r0, [r5, #0]
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 801164e:	4298      	cmp	r0, r3
 8011650:	d10b      	bne.n	801166a <GUI_Touch_Processing+0xad2>
 8011652:	4b41      	ldr	r3, [pc, #260]	; (8011758 <GUI_Touch_Processing+0xbc0>)
 8011654:	4841      	ldr	r0, [pc, #260]	; (801175c <GUI_Touch_Processing+0xbc4>)
 8011656:	701c      	strb	r4, [r3, #0]
 8011658:	4b41      	ldr	r3, [pc, #260]	; (8011760 <GUI_Touch_Processing+0xbc8>)
 801165a:	701c      	strb	r4, [r3, #0]
 801165c:	4b41      	ldr	r3, [pc, #260]	; (8011764 <GUI_Touch_Processing+0xbcc>)
 801165e:	220e      	movs	r2, #14
 8011660:	701c      	strb	r4, [r3, #0]
 8011662:	4621      	mov	r1, r4
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8011664:	f010 fb93 	bl	8021d8e <memset>
 8011668:	e002      	b.n	8011670 <GUI_Touch_Processing+0xad8>
						else	{CRI_func(Tc_Measure, Line_Rabs_buff);}
 801166a:	4935      	ldr	r1, [pc, #212]	; (8011740 <GUI_Touch_Processing+0xba8>)
 801166c:	f7fa fcac 	bl	800bfc8 <CRI_func>
					Calc_ColorRend = !Calc_ColorRend;
 8011670:	4a3d      	ldr	r2, [pc, #244]	; (8011768 <GUI_Touch_Processing+0xbd0>)
						CRICQS_done = 0x01;
 8011672:	2301      	movs	r3, #1
 8011674:	f888 3000 	strb.w	r3, [r8]
					Calc_ColorRend = !Calc_ColorRend;
 8011678:	7813      	ldrb	r3, [r2, #0]
 801167a:	fab3 f383 	clz	r3, r3
 801167e:	095b      	lsrs	r3, r3, #5
 8011680:	7013      	strb	r3, [r2, #0]
					GUI_Display_Refresh();
 8011682:	f7ff fa29 	bl	8010ad8 <GUI_Display_Refresh>
 8011686:	f7ff bb15 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801168a:	4b2e      	ldr	r3, [pc, #184]	; (8011744 <GUI_Touch_Processing+0xbac>)
 801168c:	4a2e      	ldr	r2, [pc, #184]	; (8011748 <GUI_Touch_Processing+0xbb0>)
 801168e:	492f      	ldr	r1, [pc, #188]	; (801174c <GUI_Touch_Processing+0xbb4>)
 8011690:	482b      	ldr	r0, [pc, #172]	; (8011740 <GUI_Touch_Processing+0xba8>)
						CRICQS_done = 0x00;
 8011692:	f888 4000 	strb.w	r4, [r8]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011696:	f7fc fd49 	bl	800e12c <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 801169a:	482d      	ldr	r0, [pc, #180]	; (8011750 <GUI_Touch_Processing+0xbb8>)
 801169c:	f7fc fdb2 	bl	800e204 <Calculate_xy1931>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 80116a0:	7839      	ldrb	r1, [r7, #0]
 80116a2:	4827      	ldr	r0, [pc, #156]	; (8011740 <GUI_Touch_Processing+0xba8>)
 80116a4:	f7fc fe14 	bl	800e2d0 <Calculate_Tc>
 80116a8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 80116ac:	4824      	ldr	r0, [pc, #144]	; (8011740 <GUI_Touch_Processing+0xba8>)
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 80116ae:	ee17 3a90 	vmov	r3, s15
 80116b2:	802b      	strh	r3, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 80116b4:	f00a fb7c 	bl	801bdb0 <Rabs_find_MAX_all>
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 80116b8:	8828      	ldrh	r0, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 80116ba:	ed86 0a00 	vstr	s0, [r6]
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 80116be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80116c2:	4298      	cmp	r0, r3
 80116c4:	d109      	bne.n	80116da <GUI_Touch_Processing+0xb42>
 80116c6:	4b29      	ldr	r3, [pc, #164]	; (801176c <GUI_Touch_Processing+0xbd4>)
 80116c8:	4829      	ldr	r0, [pc, #164]	; (8011770 <GUI_Touch_Processing+0xbd8>)
 80116ca:	701c      	strb	r4, [r3, #0]
 80116cc:	4b29      	ldr	r3, [pc, #164]	; (8011774 <GUI_Touch_Processing+0xbdc>)
 80116ce:	701c      	strb	r4, [r3, #0]
 80116d0:	4b29      	ldr	r3, [pc, #164]	; (8011778 <GUI_Touch_Processing+0xbe0>)
 80116d2:	220f      	movs	r2, #15
 80116d4:	701c      	strb	r4, [r3, #0]
 80116d6:	4621      	mov	r1, r4
 80116d8:	e7c4      	b.n	8011664 <GUI_Touch_Processing+0xacc>
						else	{cqs_func(Tc_Measure, Line_Rabs_buff);}
 80116da:	4919      	ldr	r1, [pc, #100]	; (8011740 <GUI_Touch_Processing+0xba8>)
 80116dc:	f7f8 fb08 	bl	8009cf0 <cqs_func>
 80116e0:	e7c6      	b.n	8011670 <GUI_Touch_Processing+0xad8>
 80116e2:	bf00      	nop
 80116e4:	f3af 8000 	nop.w
 80116e8:	00000000 	.word	0x00000000
 80116ec:	40623800 	.word	0x40623800
 80116f0:	99999999 	.word	0x99999999
 80116f4:	40720d99 	.word	0x40720d99
 80116f8:	99999999 	.word	0x99999999
 80116fc:	4091a399 	.word	0x4091a399
 8011700:	33333333 	.word	0x33333333
 8011704:	40053333 	.word	0x40053333
 8011708:	66666666 	.word	0x66666666
 801170c:	4081f866 	.word	0x4081f866
 8011710:	33333333 	.word	0x33333333
 8011714:	40867133 	.word	0x40867133
 8011718:	33333333 	.word	0x33333333
 801171c:	407aff33 	.word	0x407aff33
 8011720:	200052a0 	.word	0x200052a0
 8011724:	2000022a 	.word	0x2000022a
 8011728:	4093e000 	.word	0x4093e000
 801172c:	20005281 	.word	0x20005281
 8011730:	20005278 	.word	0x20005278
 8011734:	2009115c 	.word	0x2009115c
 8011738:	2000527c 	.word	0x2000527c
 801173c:	200501e8 	.word	0x200501e8
 8011740:	20007de4 	.word	0x20007de4
 8011744:	20088db8 	.word	0x20088db8
 8011748:	2004e1e8 	.word	0x2004e1e8
 801174c:	20085db8 	.word	0x20085db8
 8011750:	2008adc6 	.word	0x2008adc6
 8011754:	2008ade4 	.word	0x2008ade4
 8011758:	200041d1 	.word	0x200041d1
 801175c:	200041d3 	.word	0x200041d3
 8011760:	200041d2 	.word	0x200041d2
 8011764:	200041d0 	.word	0x200041d0
 8011768:	20005275 	.word	0x20005275
 801176c:	200031ab 	.word	0x200031ab
 8011770:	2000319c 	.word	0x2000319c
 8011774:	200031ad 	.word	0x200031ad
 8011778:	200031ac 	.word	0x200031ac
 801177c:	20005274 	.word	0x20005274
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011780:	a3be      	add	r3, pc, #760	; (adr r3, 8011a7c <GUI_Touch_Processing+0xee4>)
 8011782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011786:	4630      	mov	r0, r6
 8011788:	4639      	mov	r1, r7
 801178a:	f04f 0501 	mov.w	r5, #1
 801178e:	f7ef f9cd 	bl	8000b2c <__aeabi_dcmpge>
 8011792:	b900      	cbnz	r0, 8011796 <GUI_Touch_Processing+0xbfe>
 8011794:	4605      	mov	r5, r0
 8011796:	a3bb      	add	r3, pc, #748	; (adr r3, 8011a84 <GUI_Touch_Processing+0xeec>)
 8011798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801179c:	4630      	mov	r0, r6
 801179e:	4639      	mov	r1, r7
 80117a0:	f04f 0801 	mov.w	r8, #1
 80117a4:	f7ef f9b8 	bl	8000b18 <__aeabi_dcmple>
 80117a8:	b900      	cbnz	r0, 80117ac <GUI_Touch_Processing+0xc14>
 80117aa:	4680      	mov	r8, r0
 80117ac:	ea05 0508 	and.w	r5, r5, r8
 80117b0:	07ea      	lsls	r2, r5, #31
 80117b2:	f57f aa7f 	bpl.w	8010cb4 <GUI_Touch_Processing+0x11c>
 80117b6:	2c00      	cmp	r4, #0
 80117b8:	f43f aa7c 	beq.w	8010cb4 <GUI_Touch_Processing+0x11c>
						if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}
 80117bc:	4ba2      	ldr	r3, [pc, #648]	; (8011a48 <GUI_Touch_Processing+0xeb0>)
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	b913      	cbnz	r3, 80117c8 <GUI_Touch_Processing+0xc30>
 80117c2:	2312      	movs	r3, #18
 80117c4:	f88b 3000 	strb.w	r3, [fp]
						pause = 0;
 80117c8:	4ba0      	ldr	r3, [pc, #640]	; (8011a4c <GUI_Touch_Processing+0xeb4>)
 80117ca:	2200      	movs	r2, #0
 80117cc:	701a      	strb	r2, [r3, #0]
 80117ce:	f7ff ba71 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 80117d2:	4b9f      	ldr	r3, [pc, #636]	; (8011a50 <GUI_Touch_Processing+0xeb8>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Down
 80117d4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 80117d8:	2207      	movs	r2, #7
 80117da:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Down
 80117dc:	f7ee feba 	bl	8000554 <__aeabi_i2d>
 80117e0:	4604      	mov	r4, r0
 80117e2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80117e6:	460d      	mov	r5, r1
 80117e8:	f7ee feb4 	bl	8000554 <__aeabi_i2d>
 80117ec:	a37c      	add	r3, pc, #496	; (adr r3, 80119e0 <GUI_Touch_Processing+0xe48>)
 80117ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117f2:	e9cd 0100 	strd	r0, r1, [sp]
 80117f6:	f04f 0701 	mov.w	r7, #1
 80117fa:	f7ef f997 	bl	8000b2c <__aeabi_dcmpge>
 80117fe:	b900      	cbnz	r0, 8011802 <GUI_Touch_Processing+0xc6a>
 8011800:	4607      	mov	r7, r0
 8011802:	2200      	movs	r2, #0
 8011804:	4b93      	ldr	r3, [pc, #588]	; (8011a54 <GUI_Touch_Processing+0xebc>)
 8011806:	e9dd 0100 	ldrd	r0, r1, [sp]
 801180a:	b2ff      	uxtb	r7, r7
 801180c:	f04f 0601 	mov.w	r6, #1
 8011810:	f7ef f982 	bl	8000b18 <__aeabi_dcmple>
 8011814:	b900      	cbnz	r0, 8011818 <GUI_Touch_Processing+0xc80>
 8011816:	4606      	mov	r6, r0
 8011818:	b2f3      	uxtb	r3, r6
 801181a:	9303      	str	r3, [sp, #12]
 801181c:	4620      	mov	r0, r4
 801181e:	a372      	add	r3, pc, #456	; (adr r3, 80119e8 <GUI_Touch_Processing+0xe50>)
 8011820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011824:	4629      	mov	r1, r5
 8011826:	f04f 0601 	mov.w	r6, #1
 801182a:	f7ef f97f 	bl	8000b2c <__aeabi_dcmpge>
 801182e:	b900      	cbnz	r0, 8011832 <GUI_Touch_Processing+0xc9a>
 8011830:	4606      	mov	r6, r0
 8011832:	a36f      	add	r3, pc, #444	; (adr r3, 80119f0 <GUI_Touch_Processing+0xe58>)
 8011834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011838:	4620      	mov	r0, r4
 801183a:	4629      	mov	r1, r5
 801183c:	f04f 0801 	mov.w	r8, #1
 8011840:	f7ef f96a 	bl	8000b18 <__aeabi_dcmple>
 8011844:	b900      	cbnz	r0, 8011848 <GUI_Touch_Processing+0xcb0>
 8011846:	4680      	mov	r8, r0
 8011848:	ea06 0608 	and.w	r6, r6, r8
 801184c:	4237      	tst	r7, r6
 801184e:	d006      	beq.n	801185e <GUI_Touch_Processing+0xcc6>
 8011850:	9b03      	ldr	r3, [sp, #12]
 8011852:	b123      	cbz	r3, 801185e <GUI_Touch_Processing+0xcc6>
					GUI_screen_state = DataSet2_Screen;
 8011854:	2308      	movs	r3, #8
 8011856:	f88b 3000 	strb.w	r3, [fp]
 801185a:	f7ff ba2b 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 801185e:	a366      	add	r3, pc, #408	; (adr r3, 80119f8 <GUI_Touch_Processing+0xe60>)
 8011860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011864:	4620      	mov	r0, r4
 8011866:	4629      	mov	r1, r5
 8011868:	f04f 0601 	mov.w	r6, #1
 801186c:	f7ef f95e 	bl	8000b2c <__aeabi_dcmpge>
 8011870:	b900      	cbnz	r0, 8011874 <GUI_Touch_Processing+0xcdc>
 8011872:	4606      	mov	r6, r0
 8011874:	a362      	add	r3, pc, #392	; (adr r3, 8011a00 <GUI_Touch_Processing+0xe68>)
 8011876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801187a:	4620      	mov	r0, r4
 801187c:	4629      	mov	r1, r5
 801187e:	f04f 0801 	mov.w	r8, #1
 8011882:	f7ef f949 	bl	8000b18 <__aeabi_dcmple>
 8011886:	b900      	cbnz	r0, 801188a <GUI_Touch_Processing+0xcf2>
 8011888:	4680      	mov	r8, r0
 801188a:	ea06 0608 	and.w	r6, r6, r8
 801188e:	a35e      	add	r3, pc, #376	; (adr r3, 8011a08 <GUI_Touch_Processing+0xe70>)
 8011890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011894:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011898:	b2f6      	uxtb	r6, r6
 801189a:	f04f 0801 	mov.w	r8, #1
 801189e:	f7ef f945 	bl	8000b2c <__aeabi_dcmpge>
 80118a2:	b900      	cbnz	r0, 80118a6 <GUI_Touch_Processing+0xd0e>
 80118a4:	4680      	mov	r8, r0
 80118a6:	a35a      	add	r3, pc, #360	; (adr r3, 8011a10 <GUI_Touch_Processing+0xe78>)
 80118a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80118b0:	f04f 0901 	mov.w	r9, #1
 80118b4:	f7ef f930 	bl	8000b18 <__aeabi_dcmple>
 80118b8:	b900      	cbnz	r0, 80118bc <GUI_Touch_Processing+0xd24>
 80118ba:	4681      	mov	r9, r0
 80118bc:	ea08 0809 	and.w	r8, r8, r9
 80118c0:	f018 0f01 	tst.w	r8, #1
 80118c4:	d026      	beq.n	8011914 <GUI_Touch_Processing+0xd7c>
 80118c6:	b32e      	cbz	r6, 8011914 <GUI_Touch_Processing+0xd7c>
					Mode_EL = !Mode_EL;
 80118c8:	4c63      	ldr	r4, [pc, #396]	; (8011a58 <GUI_Touch_Processing+0xec0>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80118ca:	4b64      	ldr	r3, [pc, #400]	; (8011a5c <GUI_Touch_Processing+0xec4>)
					Mode_EL = !Mode_EL;
 80118cc:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80118ce:	4864      	ldr	r0, [pc, #400]	; (8011a60 <GUI_Touch_Processing+0xec8>)
					Mode_EL = !Mode_EL;
 80118d0:	2a00      	cmp	r2, #0
 80118d2:	bf0c      	ite	eq
 80118d4:	2201      	moveq	r2, #1
 80118d6:	2200      	movne	r2, #0
 80118d8:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80118da:	bf18      	it	ne
 80118dc:	4618      	movne	r0, r3
 80118de:	4a61      	ldr	r2, [pc, #388]	; (8011a64 <GUI_Touch_Processing+0xecc>)
 80118e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80118e4:	f7fd f9a8 	bl	800ec38 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80118e8:	7822      	ldrb	r2, [r4, #0]
 80118ea:	4b5f      	ldr	r3, [pc, #380]	; (8011a68 <GUI_Touch_Processing+0xed0>)
 80118ec:	b982      	cbnz	r2, 8011910 <GUI_Touch_Processing+0xd78>
 80118ee:	4a5f      	ldr	r2, [pc, #380]	; (8011a6c <GUI_Touch_Processing+0xed4>)
 80118f0:	edd2 0a00 	vldr	s1, [r2]
 80118f4:	ed93 0a00 	vldr	s0, [r3]
 80118f8:	f00a f9e2 	bl	801bcc0 <Rabs_calc_Factor2_Settings_change>
 80118fc:	4b5c      	ldr	r3, [pc, #368]	; (8011a70 <GUI_Touch_Processing+0xed8>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80118fe:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8011900:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8011904:	21ca      	movs	r1, #202	; 0xca
 8011906:	20b6      	movs	r0, #182	; 0xb6
 8011908:	f003 fd74 	bl	80153f4 <GUI_Switch_ButtonActive>
 801190c:	f7ff b9d2 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8011910:	4a58      	ldr	r2, [pc, #352]	; (8011a74 <GUI_Touch_Processing+0xedc>)
 8011912:	e7ed      	b.n	80118f0 <GUI_Touch_Processing+0xd58>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 8011914:	a340      	add	r3, pc, #256	; (adr r3, 8011a18 <GUI_Touch_Processing+0xe80>)
 8011916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801191e:	f04f 0801 	mov.w	r8, #1
 8011922:	f7ef f903 	bl	8000b2c <__aeabi_dcmpge>
 8011926:	b900      	cbnz	r0, 801192a <GUI_Touch_Processing+0xd92>
 8011928:	4680      	mov	r8, r0
 801192a:	a33d      	add	r3, pc, #244	; (adr r3, 8011a20 <GUI_Touch_Processing+0xe88>)
 801192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011934:	f04f 0901 	mov.w	r9, #1
 8011938:	f7ef f8ee 	bl	8000b18 <__aeabi_dcmple>
 801193c:	b900      	cbnz	r0, 8011940 <GUI_Touch_Processing+0xda8>
 801193e:	4681      	mov	r9, r0
 8011940:	ea08 0809 	and.w	r8, r8, r9
 8011944:	f018 0f01 	tst.w	r8, #1
 8011948:	d00f      	beq.n	801196a <GUI_Touch_Processing+0xdd2>
 801194a:	b176      	cbz	r6, 801196a <GUI_Touch_Processing+0xdd2>
					Bluetooth = !Bluetooth;
 801194c:	4b4a      	ldr	r3, [pc, #296]	; (8011a78 <GUI_Touch_Processing+0xee0>)
 801194e:	781a      	ldrb	r2, [r3, #0]
 8011950:	fab2 f282 	clz	r2, r2
 8011954:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 8011956:	f44f 7186 	mov.w	r1, #268	; 0x10c
 801195a:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 801195c:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 801195e:	f003 fcef 	bl	8015340 <GUI_Switch_Button>
					GUI_Up_Panel();
 8011962:	f7fd fde1 	bl	800f528 <GUI_Up_Panel>
 8011966:	f7ff b9a5 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 801196a:	a32f      	add	r3, pc, #188	; (adr r3, 8011a28 <GUI_Touch_Processing+0xe90>)
 801196c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011970:	4620      	mov	r0, r4
 8011972:	4629      	mov	r1, r5
 8011974:	f04f 0601 	mov.w	r6, #1
 8011978:	f7ef f8d8 	bl	8000b2c <__aeabi_dcmpge>
 801197c:	b900      	cbnz	r0, 8011980 <GUI_Touch_Processing+0xde8>
 801197e:	4606      	mov	r6, r0
 8011980:	a32b      	add	r3, pc, #172	; (adr r3, 8011a30 <GUI_Touch_Processing+0xe98>)
 8011982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011986:	4620      	mov	r0, r4
 8011988:	4629      	mov	r1, r5
 801198a:	f04f 0801 	mov.w	r8, #1
 801198e:	f7ef f8c3 	bl	8000b18 <__aeabi_dcmple>
 8011992:	b900      	cbnz	r0, 8011996 <GUI_Touch_Processing+0xdfe>
 8011994:	4680      	mov	r8, r0
 8011996:	ea06 0608 	and.w	r6, r6, r8
 801199a:	a327      	add	r3, pc, #156	; (adr r3, 8011a38 <GUI_Touch_Processing+0xea0>)
 801199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119a4:	b2f6      	uxtb	r6, r6
 80119a6:	f04f 0801 	mov.w	r8, #1
 80119aa:	f7ef f8bf 	bl	8000b2c <__aeabi_dcmpge>
 80119ae:	b900      	cbnz	r0, 80119b2 <GUI_Touch_Processing+0xe1a>
 80119b0:	4680      	mov	r8, r0
 80119b2:	a323      	add	r3, pc, #140	; (adr r3, 8011a40 <GUI_Touch_Processing+0xea8>)
 80119b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119bc:	f04f 0901 	mov.w	r9, #1
 80119c0:	f7ef f8aa 	bl	8000b18 <__aeabi_dcmple>
 80119c4:	b900      	cbnz	r0, 80119c8 <GUI_Touch_Processing+0xe30>
 80119c6:	4681      	mov	r9, r0
 80119c8:	ea08 0809 	and.w	r8, r8, r9
 80119cc:	f018 0f01 	tst.w	r8, #1
 80119d0:	d05c      	beq.n	8011a8c <GUI_Touch_Processing+0xef4>
 80119d2:	2e00      	cmp	r6, #0
 80119d4:	d05a      	beq.n	8011a8c <GUI_Touch_Processing+0xef4>
					GUI_screen_state = Information_Screen;
 80119d6:	2311      	movs	r3, #17
 80119d8:	f88b 3000 	strb.w	r3, [fp]
 80119dc:	f7ff b96a 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 80119e0:	99999999 	.word	0x99999999
 80119e4:	4091a399 	.word	0x4091a399
 80119e8:	33333333 	.word	0x33333333
 80119ec:	407aff33 	.word	0x407aff33
 80119f0:	66666666 	.word	0x66666666
 80119f4:	4081f866 	.word	0x4081f866
 80119f8:	cccccccd 	.word	0xcccccccd
 80119fc:	407e24cc 	.word	0x407e24cc
 8011a00:	33333333 	.word	0x33333333
 8011a04:	40838b33 	.word	0x40838b33
 8011a08:	66666666 	.word	0x66666666
 8011a0c:	4080ba66 	.word	0x4080ba66
 8011a10:	33333333 	.word	0x33333333
 8011a14:	40853333 	.word	0x40853333
 8011a18:	99999999 	.word	0x99999999
 8011a1c:	40863199 	.word	0x40863199
 8011a20:	66666666 	.word	0x66666666
 8011a24:	408aaa66 	.word	0x408aaa66
 8011a28:	33333333 	.word	0x33333333
 8011a2c:	40353333 	.word	0x40353333
 8011a30:	00000000 	.word	0x00000000
 8011a34:	4084b400 	.word	0x4084b400
 8011a38:	99999999 	.word	0x99999999
 8011a3c:	40748999 	.word	0x40748999
 8011a40:	99999999 	.word	0x99999999
 8011a44:	407cd199 	.word	0x407cd199
 8011a48:	200914c0 	.word	0x200914c0
 8011a4c:	200052a0 	.word	0x200052a0
 8011a50:	2000022a 	.word	0x2000022a
 8011a54:	4093e000 	.word	0x4093e000
 8011a58:	20000a48 	.word	0x20000a48
 8011a5c:	08101838 	.word	0x08101838
 8011a60:	08100838 	.word	0x08100838
 8011a64:	2004d1e8 	.word	0x2004d1e8
 8011a68:	200055d4 	.word	0x200055d4
 8011a6c:	200055d0 	.word	0x200055d0
 8011a70:	200055dc 	.word	0x200055dc
 8011a74:	200055cc 	.word	0x200055cc
 8011a78:	2008c31a 	.word	0x2008c31a
 8011a7c:	00000000 	.word	0x00000000
 8011a80:	40623800 	.word	0x40623800
 8011a84:	99999999 	.word	0x99999999
 8011a88:	40720d99 	.word	0x40720d99
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //Illuminance
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	4bbc      	ldr	r3, [pc, #752]	; (8011d80 <GUI_Touch_Processing+0x11e8>)
 8011a90:	4620      	mov	r0, r4
 8011a92:	4629      	mov	r1, r5
 8011a94:	f04f 0901 	mov.w	r9, #1
 8011a98:	f7ef f848 	bl	8000b2c <__aeabi_dcmpge>
 8011a9c:	b900      	cbnz	r0, 8011aa0 <GUI_Touch_Processing+0xf08>
 8011a9e:	4681      	mov	r9, r0
 8011aa0:	a3a1      	add	r3, pc, #644	; (adr r3, 8011d28 <GUI_Touch_Processing+0x1190>)
 8011aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa6:	4620      	mov	r0, r4
 8011aa8:	4629      	mov	r1, r5
 8011aaa:	f04f 0801 	mov.w	r8, #1
 8011aae:	f7ef f833 	bl	8000b18 <__aeabi_dcmple>
 8011ab2:	b900      	cbnz	r0, 8011ab6 <GUI_Touch_Processing+0xf1e>
 8011ab4:	4680      	mov	r8, r0
 8011ab6:	a39e      	add	r3, pc, #632	; (adr r3, 8011d30 <GUI_Touch_Processing+0x1198>)
 8011ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ac0:	ea09 0808 	and.w	r8, r9, r8
 8011ac4:	f04f 0901 	mov.w	r9, #1
 8011ac8:	f7ef f830 	bl	8000b2c <__aeabi_dcmpge>
 8011acc:	b900      	cbnz	r0, 8011ad0 <GUI_Touch_Processing+0xf38>
 8011ace:	4681      	mov	r9, r0
 8011ad0:	ea08 0809 	and.w	r8, r8, r9
 8011ad4:	f018 0f01 	tst.w	r8, #1
 8011ad8:	d01b      	beq.n	8011b12 <GUI_Touch_Processing+0xf7a>
 8011ada:	a397      	add	r3, pc, #604	; (adr r3, 8011d38 <GUI_Touch_Processing+0x11a0>)
 8011adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ae4:	f04f 0801 	mov.w	r8, #1
 8011ae8:	f7ef f816 	bl	8000b18 <__aeabi_dcmple>
 8011aec:	b900      	cbnz	r0, 8011af0 <GUI_Touch_Processing+0xf58>
 8011aee:	4680      	mov	r8, r0
 8011af0:	f018 0fff 	tst.w	r8, #255	; 0xff
 8011af4:	d00d      	beq.n	8011b12 <GUI_Touch_Processing+0xf7a>
					Measure_Field ^= Illuminance;
 8011af6:	4ba3      	ldr	r3, [pc, #652]	; (8011d84 <GUI_Touch_Processing+0x11ec>)
 8011af8:	881a      	ldrh	r2, [r3, #0]
 8011afa:	f082 0201 	eor.w	r2, r2, #1
 8011afe:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Measure_Field&Illuminance);
 8011b00:	f240 1147 	movw	r1, #327	; 0x147
 8011b04:	f002 0201 	and.w	r2, r2, #1
 8011b08:	20c8      	movs	r0, #200	; 0xc8
 8011b0a:	f003 fba9 	bl	8015260 <GUI_CheckBox>
 8011b0e:	f7ff b8d1 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8011b12:	9b03      	ldr	r3, [sp, #12]
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8011b14:	4620      	mov	r0, r4
 8011b16:	ea07 0903 	and.w	r9, r7, r3
 8011b1a:	4629      	mov	r1, r5
 8011b1c:	a388      	add	r3, pc, #544	; (adr r3, 8011d40 <GUI_Touch_Processing+0x11a8>)
 8011b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b22:	f04f 0801 	mov.w	r8, #1
 8011b26:	f7ef f801 	bl	8000b2c <__aeabi_dcmpge>
 8011b2a:	b900      	cbnz	r0, 8011b2e <GUI_Touch_Processing+0xf96>
 8011b2c:	4680      	mov	r8, r0
 8011b2e:	a386      	add	r3, pc, #536	; (adr r3, 8011d48 <GUI_Touch_Processing+0x11b0>)
 8011b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b34:	4620      	mov	r0, r4
 8011b36:	4629      	mov	r1, r5
 8011b38:	f04f 0a01 	mov.w	sl, #1
 8011b3c:	f7ee ffec 	bl	8000b18 <__aeabi_dcmple>
 8011b40:	b900      	cbnz	r0, 8011b44 <GUI_Touch_Processing+0xfac>
 8011b42:	4682      	mov	sl, r0
 8011b44:	ea08 080a 	and.w	r8, r8, sl
 8011b48:	f018 0f01 	tst.w	r8, #1
 8011b4c:	d029      	beq.n	8011ba2 <GUI_Touch_Processing+0x100a>
 8011b4e:	f1b9 0f00 	cmp.w	r9, #0
 8011b52:	d026      	beq.n	8011ba2 <GUI_Touch_Processing+0x100a>
					WriteSDFLASH_t(sdfile_cnt);
 8011b54:	4b8c      	ldr	r3, [pc, #560]	; (8011d88 <GUI_Touch_Processing+0x11f0>)
 8011b56:	2100      	movs	r1, #0
 8011b58:	8818      	ldrh	r0, [r3, #0]
 8011b5a:	f00a f93b 	bl	801bdd4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011b5e:	4b8b      	ldr	r3, [pc, #556]	; (8011d8c <GUI_Touch_Processing+0x11f4>)
 8011b60:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011b62:	1e5a      	subs	r2, r3, #1
 8011b64:	2a05      	cmp	r2, #5
 8011b66:	d804      	bhi.n	8011b72 <GUI_Touch_Processing+0xfda>
 8011b68:	e8df f002 	tbb	[pc, r2]
 8011b6c:	0c030307 	.word	0x0c030307
 8011b70:	1116      	.short	0x1116
					GUI_screen_state = Prev_Inf_Screen;
 8011b72:	f88b 3000 	strb.w	r3, [fp]
 8011b76:	f7ff b89d 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	f88b 3000 	strb.w	r3, [fp]
 8011b80:	f7ff b898 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011b84:	2304      	movs	r3, #4
 8011b86:	f88b 3000 	strb.w	r3, [fp]
 8011b8a:	f7ff b893 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011b8e:	2306      	movs	r3, #6
 8011b90:	f88b 3000 	strb.w	r3, [fp]
 8011b94:	f7ff b88e 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011b98:	2305      	movs	r3, #5
 8011b9a:	f88b 3000 	strb.w	r3, [fp]
 8011b9e:	f7ff b889 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 8011ba2:	2200      	movs	r2, #0
 8011ba4:	4b7a      	ldr	r3, [pc, #488]	; (8011d90 <GUI_Touch_Processing+0x11f8>)
 8011ba6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011baa:	f04f 0801 	mov.w	r8, #1
 8011bae:	f7ee ffbd 	bl	8000b2c <__aeabi_dcmpge>
 8011bb2:	b900      	cbnz	r0, 8011bb6 <GUI_Touch_Processing+0x101e>
 8011bb4:	4680      	mov	r8, r0
 8011bb6:	a366      	add	r3, pc, #408	; (adr r3, 8011d50 <GUI_Touch_Processing+0x11b8>)
 8011bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bc0:	f04f 0a01 	mov.w	sl, #1
 8011bc4:	f7ee ffa8 	bl	8000b18 <__aeabi_dcmple>
 8011bc8:	b900      	cbnz	r0, 8011bcc <GUI_Touch_Processing+0x1034>
 8011bca:	4682      	mov	sl, r0
 8011bcc:	ea08 080a 	and.w	r8, r8, sl
 8011bd0:	f018 0f01 	tst.w	r8, #1
 8011bd4:	d00e      	beq.n	8011bf4 <GUI_Touch_Processing+0x105c>
 8011bd6:	b16e      	cbz	r6, 8011bf4 <GUI_Touch_Processing+0x105c>
					if (Language_status == Ru) Language_status=En;
 8011bd8:	4b6e      	ldr	r3, [pc, #440]	; (8011d94 <GUI_Touch_Processing+0x11fc>)
 8011bda:	781a      	ldrb	r2, [r3, #0]
 8011bdc:	b91a      	cbnz	r2, 8011be6 <GUI_Touch_Processing+0x104e>
 8011bde:	2201      	movs	r2, #1
 8011be0:	701a      	strb	r2, [r3, #0]
 8011be2:	f7ff b867 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
					else if (Language_status == En) Language_status=Ru;
 8011be6:	2a01      	cmp	r2, #1
 8011be8:	f47f a864 	bne.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8011bec:	2200      	movs	r2, #0
 8011bee:	701a      	strb	r2, [r3, #0]
 8011bf0:	f7ff b860 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8011bf4:	a358      	add	r3, pc, #352	; (adr r3, 8011d58 <GUI_Touch_Processing+0x11c0>)
 8011bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bfa:	4620      	mov	r0, r4
 8011bfc:	4629      	mov	r1, r5
 8011bfe:	f04f 0601 	mov.w	r6, #1
 8011c02:	f7ee ff93 	bl	8000b2c <__aeabi_dcmpge>
 8011c06:	b900      	cbnz	r0, 8011c0a <GUI_Touch_Processing+0x1072>
 8011c08:	4606      	mov	r6, r0
 8011c0a:	a355      	add	r3, pc, #340	; (adr r3, 8011d60 <GUI_Touch_Processing+0x11c8>)
 8011c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c10:	4620      	mov	r0, r4
 8011c12:	4629      	mov	r1, r5
 8011c14:	f04f 0801 	mov.w	r8, #1
 8011c18:	f7ee ff7e 	bl	8000b18 <__aeabi_dcmple>
 8011c1c:	b900      	cbnz	r0, 8011c20 <GUI_Touch_Processing+0x1088>
 8011c1e:	4680      	mov	r8, r0
 8011c20:	ea06 0308 	and.w	r3, r6, r8
 8011c24:	07db      	lsls	r3, r3, #31
 8011c26:	d511      	bpl.n	8011c4c <GUI_Touch_Processing+0x10b4>
 8011c28:	f1b9 0f00 	cmp.w	r9, #0
 8011c2c:	d00e      	beq.n	8011c4c <GUI_Touch_Processing+0x10b4>
					TFT_ON_OFF = 0x00;
 8011c2e:	4b5a      	ldr	r3, [pc, #360]	; (8011d98 <GUI_Touch_Processing+0x1200>)
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8011c30:	485a      	ldr	r0, [pc, #360]	; (8011d9c <GUI_Touch_Processing+0x1204>)
					TFT_ON_OFF = 0x00;
 8011c32:	2400      	movs	r4, #0
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8011c34:	2104      	movs	r1, #4
					TFT_ON_OFF = 0x00;
 8011c36:	701c      	strb	r4, [r3, #0]
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8011c38:	f7f4 fc68 	bl	800650c <HAL_TIM_PWM_Stop>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 8011c3c:	4622      	mov	r2, r4
 8011c3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011c42:	4857      	ldr	r0, [pc, #348]	; (8011da0 <GUI_Touch_Processing+0x1208>)
 8011c44:	f7f0 fdbc 	bl	80027c0 <HAL_GPIO_WritePin>
 8011c48:	f7ff b834 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011c4c:	a33e      	add	r3, pc, #248	; (adr r3, 8011d48 <GUI_Touch_Processing+0x11b0>)
 8011c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c52:	4620      	mov	r0, r4
 8011c54:	4629      	mov	r1, r5
 8011c56:	f04f 0601 	mov.w	r6, #1
 8011c5a:	f7ee ff67 	bl	8000b2c <__aeabi_dcmpge>
 8011c5e:	b900      	cbnz	r0, 8011c62 <GUI_Touch_Processing+0x10ca>
 8011c60:	4606      	mov	r6, r0
 8011c62:	a341      	add	r3, pc, #260	; (adr r3, 8011d68 <GUI_Touch_Processing+0x11d0>)
 8011c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c68:	4620      	mov	r0, r4
 8011c6a:	4629      	mov	r1, r5
 8011c6c:	f04f 0801 	mov.w	r8, #1
 8011c70:	f7ee ff52 	bl	8000b18 <__aeabi_dcmple>
 8011c74:	b900      	cbnz	r0, 8011c78 <GUI_Touch_Processing+0x10e0>
 8011c76:	4680      	mov	r8, r0
 8011c78:	ea06 0608 	and.w	r6, r6, r8
 8011c7c:	4237      	tst	r7, r6
 8011c7e:	f43f a819 	beq.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8011c82:	9b03      	ldr	r3, [sp, #12]
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	f47f a855 	bne.w	8010d34 <GUI_Touch_Processing+0x19c>
 8011c8a:	f7ff b813 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				preGUI_screen_state = GUI_screen_state;
 8011c8e:	4b45      	ldr	r3, [pc, #276]	; (8011da4 <GUI_Touch_Processing+0x120c>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)////down
 8011c90:	f8bd 0014 	ldrh.w	r0, [sp, #20]
				preGUI_screen_state = GUI_screen_state;
 8011c94:	2208      	movs	r2, #8
 8011c96:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)////down
 8011c98:	f7ee fc5c 	bl	8000554 <__aeabi_i2d>
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011ca2:	460d      	mov	r5, r1
 8011ca4:	f7ee fc56 	bl	8000554 <__aeabi_i2d>
 8011ca8:	a331      	add	r3, pc, #196	; (adr r3, 8011d70 <GUI_Touch_Processing+0x11d8>)
 8011caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cae:	4606      	mov	r6, r0
 8011cb0:	460f      	mov	r7, r1
 8011cb2:	f04f 0a01 	mov.w	sl, #1
 8011cb6:	f7ee ff39 	bl	8000b2c <__aeabi_dcmpge>
 8011cba:	b900      	cbnz	r0, 8011cbe <GUI_Touch_Processing+0x1126>
 8011cbc:	4682      	mov	sl, r0
 8011cbe:	2200      	movs	r2, #0
 8011cc0:	4b39      	ldr	r3, [pc, #228]	; (8011da8 <GUI_Touch_Processing+0x1210>)
 8011cc2:	4630      	mov	r0, r6
 8011cc4:	4639      	mov	r1, r7
 8011cc6:	fa5f fa8a 	uxtb.w	sl, sl
 8011cca:	f04f 0801 	mov.w	r8, #1
 8011cce:	f7ee ff23 	bl	8000b18 <__aeabi_dcmple>
 8011cd2:	b900      	cbnz	r0, 8011cd6 <GUI_Touch_Processing+0x113e>
 8011cd4:	4680      	mov	r8, r0
 8011cd6:	fa5f f388 	uxtb.w	r3, r8
 8011cda:	9300      	str	r3, [sp, #0]
 8011cdc:	4620      	mov	r0, r4
 8011cde:	a326      	add	r3, pc, #152	; (adr r3, 8011d78 <GUI_Touch_Processing+0x11e0>)
 8011ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce4:	4629      	mov	r1, r5
 8011ce6:	f04f 0801 	mov.w	r8, #1
 8011cea:	f7ee ff1f 	bl	8000b2c <__aeabi_dcmpge>
 8011cee:	b900      	cbnz	r0, 8011cf2 <GUI_Touch_Processing+0x115a>
 8011cf0:	4680      	mov	r8, r0
 8011cf2:	a319      	add	r3, pc, #100	; (adr r3, 8011d58 <GUI_Touch_Processing+0x11c0>)
 8011cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	4629      	mov	r1, r5
 8011cfc:	f04f 0901 	mov.w	r9, #1
 8011d00:	f7ee ff0a 	bl	8000b18 <__aeabi_dcmple>
 8011d04:	b900      	cbnz	r0, 8011d08 <GUI_Touch_Processing+0x1170>
 8011d06:	4681      	mov	r9, r0
 8011d08:	ea08 0809 	and.w	r8, r8, r9
 8011d0c:	ea1a 0f08 	tst.w	sl, r8
 8011d10:	d04c      	beq.n	8011dac <GUI_Touch_Processing+0x1214>
 8011d12:	9b00      	ldr	r3, [sp, #0]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d049      	beq.n	8011dac <GUI_Touch_Processing+0x1214>
					GUI_screen_state = DataSet3_Screen;
 8011d18:	2309      	movs	r3, #9
 8011d1a:	f88b 3000 	strb.w	r3, [fp]
 8011d1e:	f7fe bfc9 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8011d22:	bf00      	nop
 8011d24:	f3af 8000 	nop.w
 8011d28:	cccccccd 	.word	0xcccccccd
 8011d2c:	408508cc 	.word	0x408508cc
 8011d30:	66666666 	.word	0x66666666
 8011d34:	408b1466 	.word	0x408b1466
 8011d38:	33333333 	.word	0x33333333
 8011d3c:	408f8d33 	.word	0x408f8d33
 8011d40:	33333333 	.word	0x33333333
 8011d44:	40053333 	.word	0x40053333
 8011d48:	00000000 	.word	0x00000000
 8011d4c:	40623800 	.word	0x40623800
 8011d50:	00000000 	.word	0x00000000
 8011d54:	4073e000 	.word	0x4073e000
 8011d58:	66666666 	.word	0x66666666
 8011d5c:	4081f866 	.word	0x4081f866
 8011d60:	33333333 	.word	0x33333333
 8011d64:	40867133 	.word	0x40867133
 8011d68:	99999999 	.word	0x99999999
 8011d6c:	40720d99 	.word	0x40720d99
 8011d70:	99999999 	.word	0x99999999
 8011d74:	4091a399 	.word	0x4091a399
 8011d78:	33333333 	.word	0x33333333
 8011d7c:	407aff33 	.word	0x407aff33
 8011d80:	40809000 	.word	0x40809000
 8011d84:	2000527e 	.word	0x2000527e
 8011d88:	200052a6 	.word	0x200052a6
 8011d8c:	2008c315 	.word	0x2008c315
 8011d90:	406a8000 	.word	0x406a8000
 8011d94:	2000527b 	.word	0x2000527b
 8011d98:	20000a4a 	.word	0x20000a4a
 8011d9c:	20091014 	.word	0x20091014
 8011da0:	48001400 	.word	0x48001400
 8011da4:	2000022a 	.word	0x2000022a
 8011da8:	4093e000 	.word	0x4093e000
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //Irradiance
 8011dac:	2200      	movs	r2, #0
 8011dae:	4bb6      	ldr	r3, [pc, #728]	; (8012088 <GUI_Touch_Processing+0x14f0>)
 8011db0:	4620      	mov	r0, r4
 8011db2:	4629      	mov	r1, r5
 8011db4:	f04f 0801 	mov.w	r8, #1
 8011db8:	f7ee feb8 	bl	8000b2c <__aeabi_dcmpge>
 8011dbc:	b900      	cbnz	r0, 8011dc0 <GUI_Touch_Processing+0x1228>
 8011dbe:	4680      	mov	r8, r0
 8011dc0:	a397      	add	r3, pc, #604	; (adr r3, 8012020 <GUI_Touch_Processing+0x1488>)
 8011dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dc6:	4620      	mov	r0, r4
 8011dc8:	4629      	mov	r1, r5
 8011dca:	f04f 0901 	mov.w	r9, #1
 8011dce:	f7ee fea3 	bl	8000b18 <__aeabi_dcmple>
 8011dd2:	b900      	cbnz	r0, 8011dd6 <GUI_Touch_Processing+0x123e>
 8011dd4:	4681      	mov	r9, r0
 8011dd6:	ea08 0809 	and.w	r8, r8, r9
 8011dda:	a393      	add	r3, pc, #588	; (adr r3, 8012028 <GUI_Touch_Processing+0x1490>)
 8011ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de0:	4630      	mov	r0, r6
 8011de2:	4639      	mov	r1, r7
 8011de4:	fa5f f888 	uxtb.w	r8, r8
 8011de8:	f04f 0901 	mov.w	r9, #1
 8011dec:	f7ee fe9e 	bl	8000b2c <__aeabi_dcmpge>
 8011df0:	b900      	cbnz	r0, 8011df4 <GUI_Touch_Processing+0x125c>
 8011df2:	4681      	mov	r9, r0
 8011df4:	a38e      	add	r3, pc, #568	; (adr r3, 8012030 <GUI_Touch_Processing+0x1498>)
 8011df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dfa:	4630      	mov	r0, r6
 8011dfc:	4639      	mov	r1, r7
 8011dfe:	f04f 0b01 	mov.w	fp, #1
 8011e02:	f7ee fe89 	bl	8000b18 <__aeabi_dcmple>
 8011e06:	b900      	cbnz	r0, 8011e0a <GUI_Touch_Processing+0x1272>
 8011e08:	4683      	mov	fp, r0
 8011e0a:	ea09 090b 	and.w	r9, r9, fp
 8011e0e:	f019 0f01 	tst.w	r9, #1
 8011e12:	d00f      	beq.n	8011e34 <GUI_Touch_Processing+0x129c>
 8011e14:	f1b8 0f00 	cmp.w	r8, #0
 8011e18:	d00c      	beq.n	8011e34 <GUI_Touch_Processing+0x129c>
					Measure_Field ^= Irradiance;
 8011e1a:	4b9c      	ldr	r3, [pc, #624]	; (801208c <GUI_Touch_Processing+0x14f4>)
 8011e1c:	881a      	ldrh	r2, [r3, #0]
 8011e1e:	f082 0202 	eor.w	r2, r2, #2
 8011e22:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 8011e24:	2146      	movs	r1, #70	; 0x46
 8011e26:	f002 0202 	and.w	r2, r2, #2
 8011e2a:	20c8      	movs	r0, #200	; 0xc8
 8011e2c:	f003 fa18 	bl	8015260 <GUI_CheckBox>
 8011e30:	f7fe bf40 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //PPFD
 8011e34:	a380      	add	r3, pc, #512	; (adr r3, 8012038 <GUI_Touch_Processing+0x14a0>)
 8011e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3a:	4630      	mov	r0, r6
 8011e3c:	4639      	mov	r1, r7
 8011e3e:	f04f 0901 	mov.w	r9, #1
 8011e42:	f7ee fe73 	bl	8000b2c <__aeabi_dcmpge>
 8011e46:	b900      	cbnz	r0, 8011e4a <GUI_Touch_Processing+0x12b2>
 8011e48:	4681      	mov	r9, r0
 8011e4a:	a37d      	add	r3, pc, #500	; (adr r3, 8012040 <GUI_Touch_Processing+0x14a8>)
 8011e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e50:	4630      	mov	r0, r6
 8011e52:	4639      	mov	r1, r7
 8011e54:	f04f 0b01 	mov.w	fp, #1
 8011e58:	f7ee fe5e 	bl	8000b18 <__aeabi_dcmple>
 8011e5c:	b900      	cbnz	r0, 8011e60 <GUI_Touch_Processing+0x12c8>
 8011e5e:	4683      	mov	fp, r0
 8011e60:	ea09 090b 	and.w	r9, r9, fp
 8011e64:	f019 0f01 	tst.w	r9, #1
 8011e68:	d00f      	beq.n	8011e8a <GUI_Touch_Processing+0x12f2>
 8011e6a:	f1b8 0f00 	cmp.w	r8, #0
 8011e6e:	d00c      	beq.n	8011e8a <GUI_Touch_Processing+0x12f2>
					Measure_Field ^= PPFD;
 8011e70:	4b86      	ldr	r3, [pc, #536]	; (801208c <GUI_Touch_Processing+0x14f4>)
 8011e72:	881a      	ldrh	r2, [r3, #0]
 8011e74:	f082 0204 	eor.w	r2, r2, #4
 8011e78:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 133, Measure_Field&PPFD);
 8011e7a:	2185      	movs	r1, #133	; 0x85
 8011e7c:	f002 0204 	and.w	r2, r2, #4
 8011e80:	20c8      	movs	r0, #200	; 0xc8
 8011e82:	f003 f9ed 	bl	8015260 <GUI_CheckBox>
 8011e86:	f7fe bf15 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=198*TS_Callib & Touch_y <=(198+54)*TS_Callib) //PPFD_BGR
 8011e8a:	a36f      	add	r3, pc, #444	; (adr r3, 8012048 <GUI_Touch_Processing+0x14b0>)
 8011e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e90:	4630      	mov	r0, r6
 8011e92:	4639      	mov	r1, r7
 8011e94:	f04f 0901 	mov.w	r9, #1
 8011e98:	f7ee fe48 	bl	8000b2c <__aeabi_dcmpge>
 8011e9c:	b900      	cbnz	r0, 8011ea0 <GUI_Touch_Processing+0x1308>
 8011e9e:	4681      	mov	r9, r0
 8011ea0:	a36b      	add	r3, pc, #428	; (adr r3, 8012050 <GUI_Touch_Processing+0x14b8>)
 8011ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea6:	4630      	mov	r0, r6
 8011ea8:	4639      	mov	r1, r7
 8011eaa:	f04f 0b01 	mov.w	fp, #1
 8011eae:	f7ee fe33 	bl	8000b18 <__aeabi_dcmple>
 8011eb2:	b900      	cbnz	r0, 8011eb6 <GUI_Touch_Processing+0x131e>
 8011eb4:	4683      	mov	fp, r0
 8011eb6:	ea09 090b 	and.w	r9, r9, fp
 8011eba:	f019 0f01 	tst.w	r9, #1
 8011ebe:	d00f      	beq.n	8011ee0 <GUI_Touch_Processing+0x1348>
 8011ec0:	f1b8 0f00 	cmp.w	r8, #0
 8011ec4:	d00c      	beq.n	8011ee0 <GUI_Touch_Processing+0x1348>
					Measure_Field ^= PPFD_BGR;
 8011ec6:	4b71      	ldr	r3, [pc, #452]	; (801208c <GUI_Touch_Processing+0x14f4>)
 8011ec8:	881a      	ldrh	r2, [r3, #0]
 8011eca:	f082 0208 	eor.w	r2, r2, #8
 8011ece:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 8011ed0:	21c6      	movs	r1, #198	; 0xc6
 8011ed2:	f002 0208 	and.w	r2, r2, #8
 8011ed6:	20c8      	movs	r0, #200	; 0xc8
 8011ed8:	f003 f9c2 	bl	8015260 <GUI_CheckBox>
 8011edc:	f7fe beea 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=263*TS_Callib & Touch_y <=(263+54)*TS_Callib) //CCT
 8011ee0:	a35d      	add	r3, pc, #372	; (adr r3, 8012058 <GUI_Touch_Processing+0x14c0>)
 8011ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee6:	4630      	mov	r0, r6
 8011ee8:	4639      	mov	r1, r7
 8011eea:	f04f 0901 	mov.w	r9, #1
 8011eee:	f7ee fe1d 	bl	8000b2c <__aeabi_dcmpge>
 8011ef2:	b900      	cbnz	r0, 8011ef6 <GUI_Touch_Processing+0x135e>
 8011ef4:	4681      	mov	r9, r0
 8011ef6:	a35a      	add	r3, pc, #360	; (adr r3, 8012060 <GUI_Touch_Processing+0x14c8>)
 8011ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011efc:	4630      	mov	r0, r6
 8011efe:	4639      	mov	r1, r7
 8011f00:	f04f 0b01 	mov.w	fp, #1
 8011f04:	f7ee fe08 	bl	8000b18 <__aeabi_dcmple>
 8011f08:	b900      	cbnz	r0, 8011f0c <GUI_Touch_Processing+0x1374>
 8011f0a:	4683      	mov	fp, r0
 8011f0c:	ea09 090b 	and.w	r9, r9, fp
 8011f10:	f019 0f01 	tst.w	r9, #1
 8011f14:	d010      	beq.n	8011f38 <GUI_Touch_Processing+0x13a0>
 8011f16:	f1b8 0f00 	cmp.w	r8, #0
 8011f1a:	d00d      	beq.n	8011f38 <GUI_Touch_Processing+0x13a0>
					Measure_Field ^= CCT;
 8011f1c:	4b5b      	ldr	r3, [pc, #364]	; (801208c <GUI_Touch_Processing+0x14f4>)
 8011f1e:	881a      	ldrh	r2, [r3, #0]
 8011f20:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8011f24:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 263, Measure_Field&CCT);
 8011f26:	f240 1107 	movw	r1, #263	; 0x107
 8011f2a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011f2e:	20c8      	movs	r0, #200	; 0xc8
 8011f30:	f003 f996 	bl	8015260 <GUI_CheckBox>
 8011f34:	f7fe bebe 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //delta_E
 8011f38:	a34b      	add	r3, pc, #300	; (adr r3, 8012068 <GUI_Touch_Processing+0x14d0>)
 8011f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3e:	4630      	mov	r0, r6
 8011f40:	4639      	mov	r1, r7
 8011f42:	f04f 0901 	mov.w	r9, #1
 8011f46:	f7ee fdf1 	bl	8000b2c <__aeabi_dcmpge>
 8011f4a:	b900      	cbnz	r0, 8011f4e <GUI_Touch_Processing+0x13b6>
 8011f4c:	4681      	mov	r9, r0
 8011f4e:	a348      	add	r3, pc, #288	; (adr r3, 8012070 <GUI_Touch_Processing+0x14d8>)
 8011f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f54:	4630      	mov	r0, r6
 8011f56:	4639      	mov	r1, r7
 8011f58:	f04f 0b01 	mov.w	fp, #1
 8011f5c:	f7ee fddc 	bl	8000b18 <__aeabi_dcmple>
 8011f60:	b900      	cbnz	r0, 8011f64 <GUI_Touch_Processing+0x13cc>
 8011f62:	4683      	mov	fp, r0
 8011f64:	ea09 090b 	and.w	r9, r9, fp
 8011f68:	fa5f f689 	uxtb.w	r6, r9
 8011f6c:	f1b8 0f00 	cmp.w	r8, #0
 8011f70:	d017      	beq.n	8011fa2 <GUI_Touch_Processing+0x140a>
 8011f72:	b1b6      	cbz	r6, 8011fa2 <GUI_Touch_Processing+0x140a>
					Measure_Field ^= delta_E;
 8011f74:	4c45      	ldr	r4, [pc, #276]	; (801208c <GUI_Touch_Processing+0x14f4>)
 8011f76:	8822      	ldrh	r2, [r4, #0]
 8011f78:	f482 6200 	eor.w	r2, r2, #2048	; 0x800
 8011f7c:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 327, Measure_Field&delta_E);
 8011f7e:	f240 1147 	movw	r1, #327	; 0x147
 8011f82:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8011f86:	20c8      	movs	r0, #200	; 0xc8
 8011f88:	f003 f96a 	bl	8015260 <GUI_CheckBox>
					GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 8011f8c:	8822      	ldrh	r2, [r4, #0]
 8011f8e:	2300      	movs	r3, #0
 8011f90:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8011f94:	f240 1147 	movw	r1, #327	; 0x147
 8011f98:	2082      	movs	r0, #130	; 0x82
 8011f9a:	f003 f841 	bl	8015020 <GUI_Button_Measure_deltaE_Small>
 8011f9e:	f7fe be89 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				else	if(Touch_x >= 130*TS_Callib & Touch_x <= (200+38)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //delta_E_measure_small
 8011fa2:	a335      	add	r3, pc, #212	; (adr r3, 8012078 <GUI_Touch_Processing+0x14e0>)
 8011fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa8:	4620      	mov	r0, r4
 8011faa:	4629      	mov	r1, r5
 8011fac:	f04f 0701 	mov.w	r7, #1
 8011fb0:	f7ee fdbc 	bl	8000b2c <__aeabi_dcmpge>
 8011fb4:	b900      	cbnz	r0, 8011fb8 <GUI_Touch_Processing+0x1420>
 8011fb6:	4607      	mov	r7, r0
 8011fb8:	a331      	add	r3, pc, #196	; (adr r3, 8012080 <GUI_Touch_Processing+0x14e8>)
 8011fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fbe:	4620      	mov	r0, r4
 8011fc0:	4629      	mov	r1, r5
 8011fc2:	f04f 0801 	mov.w	r8, #1
 8011fc6:	f7ee fda7 	bl	8000b18 <__aeabi_dcmple>
 8011fca:	b900      	cbnz	r0, 8011fce <GUI_Touch_Processing+0x1436>
 8011fcc:	4680      	mov	r8, r0
 8011fce:	ea07 0308 	and.w	r3, r7, r8
 8011fd2:	07df      	lsls	r7, r3, #31
 8011fd4:	d568      	bpl.n	80120a8 <GUI_Touch_Processing+0x1510>
 8011fd6:	2e00      	cmp	r6, #0
 8011fd8:	d066      	beq.n	80120a8 <GUI_Touch_Processing+0x1510>
					if(Measure_Field&delta_E)
 8011fda:	4c2c      	ldr	r4, [pc, #176]	; (801208c <GUI_Touch_Processing+0x14f4>)
 8011fdc:	8823      	ldrh	r3, [r4, #0]
 8011fde:	0518      	lsls	r0, r3, #20
 8011fe0:	f57e ae68 	bpl.w	8010cb4 <GUI_Touch_Processing+0x11c>
						Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 8011fe4:	4b2a      	ldr	r3, [pc, #168]	; (8012090 <GUI_Touch_Processing+0x14f8>)
 8011fe6:	482b      	ldr	r0, [pc, #172]	; (8012094 <GUI_Touch_Processing+0x14fc>)
 8011fe8:	7819      	ldrb	r1, [r3, #0]
 8011fea:	4b2b      	ldr	r3, [pc, #172]	; (8012098 <GUI_Touch_Processing+0x1500>)
 8011fec:	781a      	ldrb	r2, [r3, #0]
 8011fee:	4b2b      	ldr	r3, [pc, #172]	; (801209c <GUI_Touch_Processing+0x1504>)
 8011ff0:	2900      	cmp	r1, #0
 8011ff2:	bf08      	it	eq
 8011ff4:	4618      	moveq	r0, r3
 8011ff6:	f7fc fb07 	bl	800e608 <Calculate_Lab>
						colorimetry_LAB_mem[0] = colorimetry_LAB[0];
 8011ffa:	4a29      	ldr	r2, [pc, #164]	; (80120a0 <GUI_Touch_Processing+0x1508>)
 8011ffc:	4b29      	ldr	r3, [pc, #164]	; (80120a4 <GUI_Touch_Processing+0x150c>)
 8011ffe:	8811      	ldrh	r1, [r2, #0]
 8012000:	8019      	strh	r1, [r3, #0]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 8012002:	8851      	ldrh	r1, [r2, #2]
						colorimetry_LAB_mem[2] = colorimetry_LAB[2];
 8012004:	8892      	ldrh	r2, [r2, #4]
 8012006:	809a      	strh	r2, [r3, #4]
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8012008:	8822      	ldrh	r2, [r4, #0]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 801200a:	8059      	strh	r1, [r3, #2]
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 801200c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8012010:	2301      	movs	r3, #1
 8012012:	f240 1147 	movw	r1, #327	; 0x147
 8012016:	2082      	movs	r0, #130	; 0x82
 8012018:	f003 f802 	bl	8015020 <GUI_Button_Measure_deltaE_Small>
 801201c:	f7fe be4a 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8012020:	cccccccd 	.word	0xcccccccd
 8012024:	408508cc 	.word	0x408508cc
 8012028:	00000000 	.word	0x00000000
 801202c:	40673000 	.word	0x40673000
 8012030:	99999999 	.word	0x99999999
 8012034:	40748999 	.word	0x40748999
 8012038:	33333333 	.word	0x33333333
 801203c:	40760733 	.word	0x40760733
 8012040:	cccccccd 	.word	0xcccccccd
 8012044:	407ef8cc 	.word	0x407ef8cc
 8012048:	99999999 	.word	0x99999999
 801204c:	40806599 	.word	0x40806599
 8012050:	66666666 	.word	0x66666666
 8012054:	4084de66 	.word	0x4084de66
 8012058:	99999999 	.word	0x99999999
 801205c:	4085c799 	.word	0x4085c799
 8012060:	66666666 	.word	0x66666666
 8012064:	408a4066 	.word	0x408a4066
 8012068:	66666666 	.word	0x66666666
 801206c:	408b1466 	.word	0x408b1466
 8012070:	33333333 	.word	0x33333333
 8012074:	408f8d33 	.word	0x408f8d33
 8012078:	00000000 	.word	0x00000000
 801207c:	40758800 	.word	0x40758800
 8012080:	99999999 	.word	0x99999999
 8012084:	4083b599 	.word	0x4083b599
 8012088:	40809000 	.word	0x40809000
 801208c:	2000527e 	.word	0x2000527e
 8012090:	2000527c 	.word	0x2000527c
 8012094:	2008adc6 	.word	0x2008adc6
 8012098:	2008c319 	.word	0x2008c319
 801209c:	2008adcc 	.word	0x2008adcc
 80120a0:	2008adc0 	.word	0x2008adc0
 80120a4:	2008c8a8 	.word	0x2008c8a8
 80120a8:	9b00      	ldr	r3, [sp, #0]
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 80120aa:	4620      	mov	r0, r4
 80120ac:	ea0a 0703 	and.w	r7, sl, r3
 80120b0:	4629      	mov	r1, r5
 80120b2:	a3bd      	add	r3, pc, #756	; (adr r3, 80123a8 <GUI_Touch_Processing+0x1810>)
 80120b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b8:	f04f 0601 	mov.w	r6, #1
 80120bc:	f7ee fd36 	bl	8000b2c <__aeabi_dcmpge>
 80120c0:	b900      	cbnz	r0, 80120c4 <GUI_Touch_Processing+0x152c>
 80120c2:	4606      	mov	r6, r0
 80120c4:	a39e      	add	r3, pc, #632	; (adr r3, 8012340 <GUI_Touch_Processing+0x17a8>)
 80120c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ca:	4620      	mov	r0, r4
 80120cc:	4629      	mov	r1, r5
 80120ce:	f04f 0801 	mov.w	r8, #1
 80120d2:	f7ee fd21 	bl	8000b18 <__aeabi_dcmple>
 80120d6:	b900      	cbnz	r0, 80120da <GUI_Touch_Processing+0x1542>
 80120d8:	4680      	mov	r8, r0
 80120da:	ea06 0308 	and.w	r3, r6, r8
 80120de:	07d9      	lsls	r1, r3, #31
 80120e0:	d523      	bpl.n	801212a <GUI_Touch_Processing+0x1592>
 80120e2:	b317      	cbz	r7, 801212a <GUI_Touch_Processing+0x1592>
					WriteSDFLASH_t(sdfile_cnt);
 80120e4:	4ba8      	ldr	r3, [pc, #672]	; (8012388 <GUI_Touch_Processing+0x17f0>)
 80120e6:	2100      	movs	r1, #0
 80120e8:	8818      	ldrh	r0, [r3, #0]
 80120ea:	f009 fe73 	bl	801bdd4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80120ee:	4ba7      	ldr	r3, [pc, #668]	; (801238c <GUI_Touch_Processing+0x17f4>)
 80120f0:	781a      	ldrb	r2, [r3, #0]
 80120f2:	4ba7      	ldr	r3, [pc, #668]	; (8012390 <GUI_Touch_Processing+0x17f8>)
					switch (Prev_Inf_Screen){
 80120f4:	1e51      	subs	r1, r2, #1
 80120f6:	2905      	cmp	r1, #5
 80120f8:	d804      	bhi.n	8012104 <GUI_Touch_Processing+0x156c>
 80120fa:	e8df f001 	tbb	[pc, r1]
 80120fe:	0306      	.short	0x0306
 8012100:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8012104:	701a      	strb	r2, [r3, #0]
 8012106:	f7fe bdd5 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 801210a:	2201      	movs	r2, #1
 801210c:	701a      	strb	r2, [r3, #0]
 801210e:	f7fe bdd1 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8012112:	2204      	movs	r2, #4
 8012114:	701a      	strb	r2, [r3, #0]
 8012116:	f7fe bdcd 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 801211a:	2206      	movs	r2, #6
 801211c:	701a      	strb	r2, [r3, #0]
 801211e:	f7fe bdc9 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8012122:	2205      	movs	r2, #5
 8012124:	701a      	strb	r2, [r3, #0]
 8012126:	f7fe bdc5 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 801212a:	a381      	add	r3, pc, #516	; (adr r3, 8012330 <GUI_Touch_Processing+0x1798>)
 801212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012130:	4620      	mov	r0, r4
 8012132:	4629      	mov	r1, r5
 8012134:	f04f 0601 	mov.w	r6, #1
 8012138:	f7ee fcf8 	bl	8000b2c <__aeabi_dcmpge>
 801213c:	b900      	cbnz	r0, 8012140 <GUI_Touch_Processing+0x15a8>
 801213e:	4606      	mov	r6, r0
 8012140:	a37d      	add	r3, pc, #500	; (adr r3, 8012338 <GUI_Touch_Processing+0x17a0>)
 8012142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012146:	4620      	mov	r0, r4
 8012148:	4629      	mov	r1, r5
 801214a:	f04f 0801 	mov.w	r8, #1
 801214e:	f7ee fce3 	bl	8000b18 <__aeabi_dcmple>
 8012152:	b900      	cbnz	r0, 8012156 <GUI_Touch_Processing+0x15be>
 8012154:	4680      	mov	r8, r0
 8012156:	ea06 0308 	and.w	r3, r6, r8
 801215a:	07da      	lsls	r2, r3, #31
 801215c:	d502      	bpl.n	8012164 <GUI_Touch_Processing+0x15cc>
 801215e:	2f00      	cmp	r7, #0
 8012160:	f47f ad65 	bne.w	8011c2e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8012164:	a376      	add	r3, pc, #472	; (adr r3, 8012340 <GUI_Touch_Processing+0x17a8>)
 8012166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216a:	4620      	mov	r0, r4
 801216c:	4629      	mov	r1, r5
 801216e:	f04f 0601 	mov.w	r6, #1
 8012172:	f7ee fcdb 	bl	8000b2c <__aeabi_dcmpge>
 8012176:	b900      	cbnz	r0, 801217a <GUI_Touch_Processing+0x15e2>
 8012178:	4606      	mov	r6, r0
 801217a:	a373      	add	r3, pc, #460	; (adr r3, 8012348 <GUI_Touch_Processing+0x17b0>)
 801217c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012180:	4620      	mov	r0, r4
 8012182:	4629      	mov	r1, r5
 8012184:	f04f 0701 	mov.w	r7, #1
 8012188:	f7ee fcc6 	bl	8000b18 <__aeabi_dcmple>
 801218c:	b900      	cbnz	r0, 8012190 <GUI_Touch_Processing+0x15f8>
 801218e:	4607      	mov	r7, r0
 8012190:	403e      	ands	r6, r7
 8012192:	ea1a 0f06 	tst.w	sl, r6
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8012196:	f43e ad8d 	beq.w	8010cb4 <GUI_Touch_Processing+0x11c>
 801219a:	9b00      	ldr	r3, [sp, #0]
 801219c:	e572      	b.n	8011c84 <GUI_Touch_Processing+0x10ec>
					preGUI_screen_state = GUI_screen_state;
 801219e:	4b7d      	ldr	r3, [pc, #500]	; (8012394 <GUI_Touch_Processing+0x17fc>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)// down
 80121a0:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 80121a4:	2209      	movs	r2, #9
 80121a6:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)// down
 80121a8:	f7ee f9d4 	bl	8000554 <__aeabi_i2d>
 80121ac:	e9cd 0100 	strd	r0, r1, [sp]
 80121b0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80121b4:	f7ee f9ce 	bl	8000554 <__aeabi_i2d>
 80121b8:	a365      	add	r3, pc, #404	; (adr r3, 8012350 <GUI_Touch_Processing+0x17b8>)
 80121ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121be:	4604      	mov	r4, r0
 80121c0:	460d      	mov	r5, r1
 80121c2:	f04f 0801 	mov.w	r8, #1
 80121c6:	f7ee fcb1 	bl	8000b2c <__aeabi_dcmpge>
 80121ca:	b900      	cbnz	r0, 80121ce <GUI_Touch_Processing+0x1636>
 80121cc:	4680      	mov	r8, r0
 80121ce:	2200      	movs	r2, #0
 80121d0:	4b71      	ldr	r3, [pc, #452]	; (8012398 <GUI_Touch_Processing+0x1800>)
 80121d2:	4620      	mov	r0, r4
 80121d4:	4629      	mov	r1, r5
 80121d6:	fa5f f888 	uxtb.w	r8, r8
 80121da:	f04f 0701 	mov.w	r7, #1
 80121de:	f7ee fc9b 	bl	8000b18 <__aeabi_dcmple>
 80121e2:	b900      	cbnz	r0, 80121e6 <GUI_Touch_Processing+0x164e>
 80121e4:	4607      	mov	r7, r0
 80121e6:	a35c      	add	r3, pc, #368	; (adr r3, 8012358 <GUI_Touch_Processing+0x17c0>)
 80121e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121f0:	b2ff      	uxtb	r7, r7
 80121f2:	f04f 0601 	mov.w	r6, #1
 80121f6:	f7ee fc99 	bl	8000b2c <__aeabi_dcmpge>
 80121fa:	b900      	cbnz	r0, 80121fe <GUI_Touch_Processing+0x1666>
 80121fc:	4606      	mov	r6, r0
 80121fe:	a34c      	add	r3, pc, #304	; (adr r3, 8012330 <GUI_Touch_Processing+0x1798>)
 8012200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012204:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012208:	f04f 0901 	mov.w	r9, #1
 801220c:	f7ee fc84 	bl	8000b18 <__aeabi_dcmple>
 8012210:	b900      	cbnz	r0, 8012214 <GUI_Touch_Processing+0x167c>
 8012212:	4681      	mov	r9, r0
 8012214:	ea06 0609 	and.w	r6, r6, r9
 8012218:	ea18 0f06 	tst.w	r8, r6
 801221c:	d005      	beq.n	801222a <GUI_Touch_Processing+0x1692>
 801221e:	b127      	cbz	r7, 801222a <GUI_Touch_Processing+0x1692>
					GUI_screen_state = DataSet4_Screen;
 8012220:	230a      	movs	r3, #10
 8012222:	f88b 3000 	strb.w	r3, [fp]
 8012226:	f7fe bd45 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //CIE_XYZ
 801222a:	2200      	movs	r2, #0
 801222c:	4b5b      	ldr	r3, [pc, #364]	; (801239c <GUI_Touch_Processing+0x1804>)
 801222e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012232:	f04f 0601 	mov.w	r6, #1
 8012236:	f7ee fc79 	bl	8000b2c <__aeabi_dcmpge>
 801223a:	b900      	cbnz	r0, 801223e <GUI_Touch_Processing+0x16a6>
 801223c:	4606      	mov	r6, r0
 801223e:	a348      	add	r3, pc, #288	; (adr r3, 8012360 <GUI_Touch_Processing+0x17c8>)
 8012240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012244:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012248:	f04f 0901 	mov.w	r9, #1
 801224c:	f7ee fc64 	bl	8000b18 <__aeabi_dcmple>
 8012250:	b900      	cbnz	r0, 8012254 <GUI_Touch_Processing+0x16bc>
 8012252:	4681      	mov	r9, r0
 8012254:	ea06 0609 	and.w	r6, r6, r9
 8012258:	a343      	add	r3, pc, #268	; (adr r3, 8012368 <GUI_Touch_Processing+0x17d0>)
 801225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225e:	4620      	mov	r0, r4
 8012260:	4629      	mov	r1, r5
 8012262:	b2f6      	uxtb	r6, r6
 8012264:	f04f 0901 	mov.w	r9, #1
 8012268:	f7ee fc60 	bl	8000b2c <__aeabi_dcmpge>
 801226c:	b900      	cbnz	r0, 8012270 <GUI_Touch_Processing+0x16d8>
 801226e:	4681      	mov	r9, r0
 8012270:	a33f      	add	r3, pc, #252	; (adr r3, 8012370 <GUI_Touch_Processing+0x17d8>)
 8012272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012276:	4620      	mov	r0, r4
 8012278:	4629      	mov	r1, r5
 801227a:	f04f 0a01 	mov.w	sl, #1
 801227e:	f7ee fc4b 	bl	8000b18 <__aeabi_dcmple>
 8012282:	b900      	cbnz	r0, 8012286 <GUI_Touch_Processing+0x16ee>
 8012284:	4682      	mov	sl, r0
 8012286:	ea09 090a 	and.w	r9, r9, sl
 801228a:	f019 0f01 	tst.w	r9, #1
 801228e:	d00d      	beq.n	80122ac <GUI_Touch_Processing+0x1714>
 8012290:	b166      	cbz	r6, 80122ac <GUI_Touch_Processing+0x1714>
					Measure_Field ^= CIE_XYZ;
 8012292:	4b43      	ldr	r3, [pc, #268]	; (80123a0 <GUI_Touch_Processing+0x1808>)
 8012294:	881a      	ldrh	r2, [r3, #0]
 8012296:	f082 0210 	eor.w	r2, r2, #16
 801229a:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 801229c:	2146      	movs	r1, #70	; 0x46
 801229e:	f002 0210 	and.w	r2, r2, #16
 80122a2:	20c8      	movs	r0, #200	; 0xc8
 80122a4:	f002 ffdc 	bl	8015260 <GUI_CheckBox>
 80122a8:	f7fe bd04 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //CIE_xy
 80122ac:	a332      	add	r3, pc, #200	; (adr r3, 8012378 <GUI_Touch_Processing+0x17e0>)
 80122ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b2:	4620      	mov	r0, r4
 80122b4:	4629      	mov	r1, r5
 80122b6:	f04f 0901 	mov.w	r9, #1
 80122ba:	f7ee fc37 	bl	8000b2c <__aeabi_dcmpge>
 80122be:	b900      	cbnz	r0, 80122c2 <GUI_Touch_Processing+0x172a>
 80122c0:	4681      	mov	r9, r0
 80122c2:	a32f      	add	r3, pc, #188	; (adr r3, 8012380 <GUI_Touch_Processing+0x17e8>)
 80122c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c8:	4620      	mov	r0, r4
 80122ca:	4629      	mov	r1, r5
 80122cc:	f04f 0a01 	mov.w	sl, #1
 80122d0:	f7ee fc22 	bl	8000b18 <__aeabi_dcmple>
 80122d4:	b900      	cbnz	r0, 80122d8 <GUI_Touch_Processing+0x1740>
 80122d6:	4682      	mov	sl, r0
 80122d8:	ea09 090a 	and.w	r9, r9, sl
 80122dc:	f019 0f01 	tst.w	r9, #1
 80122e0:	d066      	beq.n	80123b0 <GUI_Touch_Processing+0x1818>
 80122e2:	2e00      	cmp	r6, #0
 80122e4:	d064      	beq.n	80123b0 <GUI_Touch_Processing+0x1818>
					Measure_Field ^= CIE_xy;
 80122e6:	4c2e      	ldr	r4, [pc, #184]	; (80123a0 <GUI_Touch_Processing+0x1808>)
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 80122e8:	4d2e      	ldr	r5, [pc, #184]	; (80123a4 <GUI_Touch_Processing+0x180c>)
					Measure_Field ^= CIE_xy;
 80122ea:	8822      	ldrh	r2, [r4, #0]
 80122ec:	f082 0220 	eor.w	r2, r2, #32
 80122f0:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 80122f2:	2185      	movs	r1, #133	; 0x85
 80122f4:	f002 0220 	and.w	r2, r2, #32
 80122f8:	20c8      	movs	r0, #200	; 0xc8
 80122fa:	f002 ffb1 	bl	8015260 <GUI_CheckBox>
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 80122fe:	8823      	ldrh	r3, [r4, #0]
 8012300:	782a      	ldrb	r2, [r5, #0]
 8012302:	f003 0320 	and.w	r3, r3, #32
 8012306:	f002 0201 	and.w	r2, r2, #1
 801230a:	21c6      	movs	r1, #198	; 0xc6
 801230c:	20c8      	movs	r0, #200	; 0xc8
 801230e:	f002 ffe8 	bl	80152e2 <GUI_RadioBox>
					GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 8012312:	782a      	ldrb	r2, [r5, #0]
 8012314:	8823      	ldrh	r3, [r4, #0]
 8012316:	43d2      	mvns	r2, r2
 8012318:	f003 0320 	and.w	r3, r3, #32
 801231c:	f002 0201 	and.w	r2, r2, #1
 8012320:	f240 1107 	movw	r1, #263	; 0x107
 8012324:	20c8      	movs	r0, #200	; 0xc8
 8012326:	f002 ffdc 	bl	80152e2 <GUI_RadioBox>
 801232a:	f7fe bcc3 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 801232e:	bf00      	nop
 8012330:	66666666 	.word	0x66666666
 8012334:	4081f866 	.word	0x4081f866
 8012338:	33333333 	.word	0x33333333
 801233c:	40867133 	.word	0x40867133
 8012340:	00000000 	.word	0x00000000
 8012344:	40623800 	.word	0x40623800
 8012348:	99999999 	.word	0x99999999
 801234c:	40720d99 	.word	0x40720d99
 8012350:	99999999 	.word	0x99999999
 8012354:	4091a399 	.word	0x4091a399
 8012358:	33333333 	.word	0x33333333
 801235c:	407aff33 	.word	0x407aff33
 8012360:	cccccccd 	.word	0xcccccccd
 8012364:	408508cc 	.word	0x408508cc
 8012368:	00000000 	.word	0x00000000
 801236c:	40673000 	.word	0x40673000
 8012370:	99999999 	.word	0x99999999
 8012374:	40748999 	.word	0x40748999
 8012378:	33333333 	.word	0x33333333
 801237c:	40760733 	.word	0x40760733
 8012380:	cccccccd 	.word	0xcccccccd
 8012384:	407ef8cc 	.word	0x407ef8cc
 8012388:	200052a6 	.word	0x200052a6
 801238c:	2008c315 	.word	0x2008c315
 8012390:	20005279 	.word	0x20005279
 8012394:	2000022a 	.word	0x2000022a
 8012398:	4093e000 	.word	0x4093e000
 801239c:	40809000 	.word	0x40809000
 80123a0:	2000527e 	.word	0x2000527e
 80123a4:	2000527c 	.word	0x2000527c
 80123a8:	33333333 	.word	0x33333333
 80123ac:	40053333 	.word	0x40053333
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //CIE_Luv
 80123b0:	a3cd      	add	r3, pc, #820	; (adr r3, 80126e8 <GUI_Touch_Processing+0x1b50>)
 80123b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123b6:	4620      	mov	r0, r4
 80123b8:	4629      	mov	r1, r5
 80123ba:	f04f 0901 	mov.w	r9, #1
 80123be:	f7ee fbb5 	bl	8000b2c <__aeabi_dcmpge>
 80123c2:	b900      	cbnz	r0, 80123c6 <GUI_Touch_Processing+0x182e>
 80123c4:	4681      	mov	r9, r0
 80123c6:	a3ca      	add	r3, pc, #808	; (adr r3, 80126f0 <GUI_Touch_Processing+0x1b58>)
 80123c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123cc:	4620      	mov	r0, r4
 80123ce:	4629      	mov	r1, r5
 80123d0:	f04f 0a01 	mov.w	sl, #1
 80123d4:	f7ee fba0 	bl	8000b18 <__aeabi_dcmple>
 80123d8:	b900      	cbnz	r0, 80123dc <GUI_Touch_Processing+0x1844>
 80123da:	4682      	mov	sl, r0
 80123dc:	ea09 090a 	and.w	r9, r9, sl
 80123e0:	f019 0f01 	tst.w	r9, #1
 80123e4:	d00e      	beq.n	8012404 <GUI_Touch_Processing+0x186c>
 80123e6:	b16e      	cbz	r6, 8012404 <GUI_Touch_Processing+0x186c>
					Measure_Field ^= CIE_Luv;
 80123e8:	4bb9      	ldr	r3, [pc, #740]	; (80126d0 <GUI_Touch_Processing+0x1b38>)
 80123ea:	881a      	ldrh	r2, [r3, #0]
 80123ec:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 80123f0:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 80123f2:	f240 1147 	movw	r1, #327	; 0x147
 80123f6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80123fa:	20c8      	movs	r0, #200	; 0xc8
 80123fc:	f002 ff30 	bl	8015260 <GUI_CheckBox>
 8012400:	f7fe bc58 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=198*TS_Callib & Touch_y <=(198+54)*TS_Callib && (Measure_Field&CIE_xy)) //CIE_xy_1931
 8012404:	a39c      	add	r3, pc, #624	; (adr r3, 8012678 <GUI_Touch_Processing+0x1ae0>)
 8012406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240a:	4620      	mov	r0, r4
 801240c:	4629      	mov	r1, r5
 801240e:	f04f 0901 	mov.w	r9, #1
 8012412:	f7ee fb8b 	bl	8000b2c <__aeabi_dcmpge>
 8012416:	b900      	cbnz	r0, 801241a <GUI_Touch_Processing+0x1882>
 8012418:	4681      	mov	r9, r0
 801241a:	ea16 0f09 	tst.w	r6, r9
 801241e:	d02a      	beq.n	8012476 <GUI_Touch_Processing+0x18de>
 8012420:	a397      	add	r3, pc, #604	; (adr r3, 8012680 <GUI_Touch_Processing+0x1ae8>)
 8012422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012426:	4620      	mov	r0, r4
 8012428:	4629      	mov	r1, r5
 801242a:	f04f 0901 	mov.w	r9, #1
 801242e:	f7ee fb73 	bl	8000b18 <__aeabi_dcmple>
 8012432:	b900      	cbnz	r0, 8012436 <GUI_Touch_Processing+0x189e>
 8012434:	4681      	mov	r9, r0
 8012436:	f019 0fff 	tst.w	r9, #255	; 0xff
 801243a:	d01c      	beq.n	8012476 <GUI_Touch_Processing+0x18de>
 801243c:	4ba4      	ldr	r3, [pc, #656]	; (80126d0 <GUI_Touch_Processing+0x1b38>)
 801243e:	881b      	ldrh	r3, [r3, #0]
 8012440:	069b      	lsls	r3, r3, #26
 8012442:	d518      	bpl.n	8012476 <GUI_Touch_Processing+0x18de>
					if(!(Measure_Color_xy&CIE_xy_1931_1964)){
 8012444:	4ca3      	ldr	r4, [pc, #652]	; (80126d4 <GUI_Touch_Processing+0x1b3c>)
 8012446:	7822      	ldrb	r2, [r4, #0]
 8012448:	07d5      	lsls	r5, r2, #31
 801244a:	f53e ac33 	bmi.w	8010cb4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 801244e:	2301      	movs	r3, #1
						Measure_Color_xy ^= CIE_xy_1931_1964;
 8012450:	f082 0201 	eor.w	r2, r2, #1
 8012454:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 8012456:	21c6      	movs	r1, #198	; 0xc6
 8012458:	401a      	ands	r2, r3
 801245a:	20c8      	movs	r0, #200	; 0xc8
 801245c:	f002 ff41 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 8012460:	7822      	ldrb	r2, [r4, #0]
 8012462:	2301      	movs	r3, #1
 8012464:	43d2      	mvns	r2, r2
 8012466:	401a      	ands	r2, r3
 8012468:	f240 1107 	movw	r1, #263	; 0x107
 801246c:	20c8      	movs	r0, #200	; 0xc8
 801246e:	f002 ff38 	bl	80152e2 <GUI_RadioBox>
 8012472:	f7fe bc1f 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=263*TS_Callib & Touch_y <=(263+54)*TS_Callib && (Measure_Field&CIE_xy)) //CIE_xy_1964
 8012476:	a384      	add	r3, pc, #528	; (adr r3, 8012688 <GUI_Touch_Processing+0x1af0>)
 8012478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801247c:	4620      	mov	r0, r4
 801247e:	4629      	mov	r1, r5
 8012480:	f04f 0901 	mov.w	r9, #1
 8012484:	f7ee fb52 	bl	8000b2c <__aeabi_dcmpge>
 8012488:	b900      	cbnz	r0, 801248c <GUI_Touch_Processing+0x18f4>
 801248a:	4681      	mov	r9, r0
 801248c:	ea16 0f09 	tst.w	r6, r9
 8012490:	d02a      	beq.n	80124e8 <GUI_Touch_Processing+0x1950>
 8012492:	a37f      	add	r3, pc, #508	; (adr r3, 8012690 <GUI_Touch_Processing+0x1af8>)
 8012494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012498:	4620      	mov	r0, r4
 801249a:	4629      	mov	r1, r5
 801249c:	f04f 0601 	mov.w	r6, #1
 80124a0:	f7ee fb3a 	bl	8000b18 <__aeabi_dcmple>
 80124a4:	b900      	cbnz	r0, 80124a8 <GUI_Touch_Processing+0x1910>
 80124a6:	4606      	mov	r6, r0
 80124a8:	f016 0fff 	tst.w	r6, #255	; 0xff
 80124ac:	d01c      	beq.n	80124e8 <GUI_Touch_Processing+0x1950>
 80124ae:	4b88      	ldr	r3, [pc, #544]	; (80126d0 <GUI_Touch_Processing+0x1b38>)
 80124b0:	881b      	ldrh	r3, [r3, #0]
 80124b2:	069c      	lsls	r4, r3, #26
 80124b4:	d518      	bpl.n	80124e8 <GUI_Touch_Processing+0x1950>
					if((Measure_Color_xy&CIE_xy_1931_1964)){
 80124b6:	4c87      	ldr	r4, [pc, #540]	; (80126d4 <GUI_Touch_Processing+0x1b3c>)
 80124b8:	7822      	ldrb	r2, [r4, #0]
 80124ba:	07d0      	lsls	r0, r2, #31
 80124bc:	f57e abfa 	bpl.w	8010cb4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 80124c0:	2301      	movs	r3, #1
						Measure_Color_xy ^= CIE_xy_1931_1964;
 80124c2:	f082 0201 	eor.w	r2, r2, #1
 80124c6:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 80124c8:	21c6      	movs	r1, #198	; 0xc6
 80124ca:	401a      	ands	r2, r3
 80124cc:	20c8      	movs	r0, #200	; 0xc8
 80124ce:	f002 ff08 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 80124d2:	7822      	ldrb	r2, [r4, #0]
 80124d4:	2301      	movs	r3, #1
 80124d6:	43d2      	mvns	r2, r2
 80124d8:	401a      	ands	r2, r3
 80124da:	f240 1107 	movw	r1, #263	; 0x107
 80124de:	20c8      	movs	r0, #200	; 0xc8
 80124e0:	f002 feff 	bl	80152e2 <GUI_RadioBox>
 80124e4:	f7fe bbe6 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 80124e8:	a36b      	add	r3, pc, #428	; (adr r3, 8012698 <GUI_Touch_Processing+0x1b00>)
 80124ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124f2:	ea08 0407 	and.w	r4, r8, r7
 80124f6:	f04f 0501 	mov.w	r5, #1
 80124fa:	f7ee fb17 	bl	8000b2c <__aeabi_dcmpge>
 80124fe:	b900      	cbnz	r0, 8012502 <GUI_Touch_Processing+0x196a>
 8012500:	4605      	mov	r5, r0
 8012502:	a367      	add	r3, pc, #412	; (adr r3, 80126a0 <GUI_Touch_Processing+0x1b08>)
 8012504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012508:	e9dd 0100 	ldrd	r0, r1, [sp]
 801250c:	f04f 0601 	mov.w	r6, #1
 8012510:	f7ee fb02 	bl	8000b18 <__aeabi_dcmple>
 8012514:	b900      	cbnz	r0, 8012518 <GUI_Touch_Processing+0x1980>
 8012516:	4606      	mov	r6, r0
 8012518:	ea05 0306 	and.w	r3, r5, r6
 801251c:	07d9      	lsls	r1, r3, #31
 801251e:	d502      	bpl.n	8012526 <GUI_Touch_Processing+0x198e>
 8012520:	2c00      	cmp	r4, #0
 8012522:	f47f ab84 	bne.w	8011c2e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8012526:	a360      	add	r3, pc, #384	; (adr r3, 80126a8 <GUI_Touch_Processing+0x1b10>)
 8012528:	e9d3 2300 	ldrd	r2, r3, [r3]
 801252c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012530:	f04f 0501 	mov.w	r5, #1
 8012534:	f7ee fafa 	bl	8000b2c <__aeabi_dcmpge>
 8012538:	b900      	cbnz	r0, 801253c <GUI_Touch_Processing+0x19a4>
 801253a:	4605      	mov	r5, r0
 801253c:	a35c      	add	r3, pc, #368	; (adr r3, 80126b0 <GUI_Touch_Processing+0x1b18>)
 801253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012542:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012546:	f04f 0601 	mov.w	r6, #1
 801254a:	f7ee fae5 	bl	8000b18 <__aeabi_dcmple>
 801254e:	b900      	cbnz	r0, 8012552 <GUI_Touch_Processing+0x19ba>
 8012550:	4606      	mov	r6, r0
 8012552:	ea05 0306 	and.w	r3, r5, r6
 8012556:	07da      	lsls	r2, r3, #31
 8012558:	d527      	bpl.n	80125aa <GUI_Touch_Processing+0x1a12>
 801255a:	b334      	cbz	r4, 80125aa <GUI_Touch_Processing+0x1a12>
					WriteSDFLASH_t(sdfile_cnt);
 801255c:	4b5e      	ldr	r3, [pc, #376]	; (80126d8 <GUI_Touch_Processing+0x1b40>)
 801255e:	2100      	movs	r1, #0
 8012560:	8818      	ldrh	r0, [r3, #0]
 8012562:	f009 fc37 	bl	801bdd4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012566:	4b5d      	ldr	r3, [pc, #372]	; (80126dc <GUI_Touch_Processing+0x1b44>)
 8012568:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801256a:	1e5a      	subs	r2, r3, #1
 801256c:	2a05      	cmp	r2, #5
 801256e:	d804      	bhi.n	801257a <GUI_Touch_Processing+0x19e2>
 8012570:	e8df f002 	tbb	[pc, r2]
 8012574:	0c030307 	.word	0x0c030307
 8012578:	1116      	.short	0x1116
					GUI_screen_state = Prev_Inf_Screen;
 801257a:	f88b 3000 	strb.w	r3, [fp]
 801257e:	f7fe bb99 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012582:	2301      	movs	r3, #1
 8012584:	f88b 3000 	strb.w	r3, [fp]
 8012588:	f7fe bb94 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801258c:	2304      	movs	r3, #4
 801258e:	f88b 3000 	strb.w	r3, [fp]
 8012592:	f7fe bb8f 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012596:	2306      	movs	r3, #6
 8012598:	f88b 3000 	strb.w	r3, [fp]
 801259c:	f7fe bb8a 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80125a0:	2305      	movs	r3, #5
 80125a2:	f88b 3000 	strb.w	r3, [fp]
 80125a6:	f7fe bb85 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 80125aa:	a341      	add	r3, pc, #260	; (adr r3, 80126b0 <GUI_Touch_Processing+0x1b18>)
 80125ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125b4:	f04f 0401 	mov.w	r4, #1
 80125b8:	f7ee fab8 	bl	8000b2c <__aeabi_dcmpge>
 80125bc:	b900      	cbnz	r0, 80125c0 <GUI_Touch_Processing+0x1a28>
 80125be:	4604      	mov	r4, r0
 80125c0:	a33d      	add	r3, pc, #244	; (adr r3, 80126b8 <GUI_Touch_Processing+0x1b20>)
 80125c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125ca:	f04f 0501 	mov.w	r5, #1
 80125ce:	f7ee faa3 	bl	8000b18 <__aeabi_dcmple>
 80125d2:	b900      	cbnz	r0, 80125d6 <GUI_Touch_Processing+0x1a3e>
 80125d4:	4605      	mov	r5, r0
 80125d6:	402c      	ands	r4, r5
 80125d8:	ea18 0f04 	tst.w	r8, r4
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 80125dc:	f43e ab6a 	beq.w	8010cb4 <GUI_Touch_Processing+0x11c>
 80125e0:	2f00      	cmp	r7, #0
 80125e2:	f47e aba7 	bne.w	8010d34 <GUI_Touch_Processing+0x19c>
 80125e6:	f7fe bb65 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 80125ea:	4b3d      	ldr	r3, [pc, #244]	; (80126e0 <GUI_Touch_Processing+0x1b48>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //down
 80125ec:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 80125f0:	220a      	movs	r2, #10
 80125f2:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //down
 80125f4:	f7ed ffae 	bl	8000554 <__aeabi_i2d>
 80125f8:	4680      	mov	r8, r0
 80125fa:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80125fe:	4689      	mov	r9, r1
 8012600:	f7ed ffa8 	bl	8000554 <__aeabi_i2d>
 8012604:	a32e      	add	r3, pc, #184	; (adr r3, 80126c0 <GUI_Touch_Processing+0x1b28>)
 8012606:	e9d3 2300 	ldrd	r2, r3, [r3]
 801260a:	4604      	mov	r4, r0
 801260c:	460d      	mov	r5, r1
 801260e:	f04f 0701 	mov.w	r7, #1
 8012612:	f7ee fa8b 	bl	8000b2c <__aeabi_dcmpge>
 8012616:	b900      	cbnz	r0, 801261a <GUI_Touch_Processing+0x1a82>
 8012618:	4607      	mov	r7, r0
 801261a:	2200      	movs	r2, #0
 801261c:	4b31      	ldr	r3, [pc, #196]	; (80126e4 <GUI_Touch_Processing+0x1b4c>)
 801261e:	4620      	mov	r0, r4
 8012620:	4629      	mov	r1, r5
 8012622:	b2ff      	uxtb	r7, r7
 8012624:	f04f 0601 	mov.w	r6, #1
 8012628:	f7ee fa76 	bl	8000b18 <__aeabi_dcmple>
 801262c:	b900      	cbnz	r0, 8012630 <GUI_Touch_Processing+0x1a98>
 801262e:	4606      	mov	r6, r0
 8012630:	b2f3      	uxtb	r3, r6
 8012632:	9300      	str	r3, [sp, #0]
 8012634:	4640      	mov	r0, r8
 8012636:	a324      	add	r3, pc, #144	; (adr r3, 80126c8 <GUI_Touch_Processing+0x1b30>)
 8012638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801263c:	4649      	mov	r1, r9
 801263e:	f04f 0601 	mov.w	r6, #1
 8012642:	f7ee fa73 	bl	8000b2c <__aeabi_dcmpge>
 8012646:	b900      	cbnz	r0, 801264a <GUI_Touch_Processing+0x1ab2>
 8012648:	4606      	mov	r6, r0
 801264a:	a313      	add	r3, pc, #76	; (adr r3, 8012698 <GUI_Touch_Processing+0x1b00>)
 801264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012650:	4640      	mov	r0, r8
 8012652:	4649      	mov	r1, r9
 8012654:	f04f 0a01 	mov.w	sl, #1
 8012658:	f7ee fa5e 	bl	8000b18 <__aeabi_dcmple>
 801265c:	b900      	cbnz	r0, 8012660 <GUI_Touch_Processing+0x1ac8>
 801265e:	4682      	mov	sl, r0
 8012660:	ea06 060a 	and.w	r6, r6, sl
 8012664:	4237      	tst	r7, r6
 8012666:	d047      	beq.n	80126f8 <GUI_Touch_Processing+0x1b60>
 8012668:	9b00      	ldr	r3, [sp, #0]
 801266a:	2b00      	cmp	r3, #0
 801266c:	d044      	beq.n	80126f8 <GUI_Touch_Processing+0x1b60>
					GUI_screen_state = DataSet5_Screen;
 801266e:	230b      	movs	r3, #11
 8012670:	f88b 3000 	strb.w	r3, [fp]
 8012674:	f7fe bb1e 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8012678:	99999999 	.word	0x99999999
 801267c:	40806599 	.word	0x40806599
 8012680:	66666666 	.word	0x66666666
 8012684:	4084de66 	.word	0x4084de66
 8012688:	99999999 	.word	0x99999999
 801268c:	4085c799 	.word	0x4085c799
 8012690:	66666666 	.word	0x66666666
 8012694:	408a4066 	.word	0x408a4066
 8012698:	66666666 	.word	0x66666666
 801269c:	4081f866 	.word	0x4081f866
 80126a0:	33333333 	.word	0x33333333
 80126a4:	40867133 	.word	0x40867133
 80126a8:	33333333 	.word	0x33333333
 80126ac:	40053333 	.word	0x40053333
 80126b0:	00000000 	.word	0x00000000
 80126b4:	40623800 	.word	0x40623800
 80126b8:	99999999 	.word	0x99999999
 80126bc:	40720d99 	.word	0x40720d99
 80126c0:	99999999 	.word	0x99999999
 80126c4:	4091a399 	.word	0x4091a399
 80126c8:	33333333 	.word	0x33333333
 80126cc:	407aff33 	.word	0x407aff33
 80126d0:	2000527e 	.word	0x2000527e
 80126d4:	2000527c 	.word	0x2000527c
 80126d8:	200052a6 	.word	0x200052a6
 80126dc:	2008c315 	.word	0x2008c315
 80126e0:	2000022a 	.word	0x2000022a
 80126e4:	4093e000 	.word	0x4093e000
 80126e8:	66666666 	.word	0x66666666
 80126ec:	408b1466 	.word	0x408b1466
 80126f0:	33333333 	.word	0x33333333
 80126f4:	408f8d33 	.word	0x408f8d33
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=65*TS_Callib & Touch_y <=(65+54)*TS_Callib) //CIE_Lab
 80126f8:	2200      	movs	r2, #0
 80126fa:	4bbf      	ldr	r3, [pc, #764]	; (80129f8 <GUI_Touch_Processing+0x1e60>)
 80126fc:	4640      	mov	r0, r8
 80126fe:	4649      	mov	r1, r9
 8012700:	f04f 0601 	mov.w	r6, #1
 8012704:	f7ee fa12 	bl	8000b2c <__aeabi_dcmpge>
 8012708:	b900      	cbnz	r0, 801270c <GUI_Touch_Processing+0x1b74>
 801270a:	4606      	mov	r6, r0
 801270c:	a3a8      	add	r3, pc, #672	; (adr r3, 80129b0 <GUI_Touch_Processing+0x1e18>)
 801270e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012712:	4640      	mov	r0, r8
 8012714:	4649      	mov	r1, r9
 8012716:	f04f 0a01 	mov.w	sl, #1
 801271a:	f7ee f9fd 	bl	8000b18 <__aeabi_dcmple>
 801271e:	b900      	cbnz	r0, 8012722 <GUI_Touch_Processing+0x1b8a>
 8012720:	4682      	mov	sl, r0
 8012722:	ea06 060a 	and.w	r6, r6, sl
 8012726:	a3a4      	add	r3, pc, #656	; (adr r3, 80129b8 <GUI_Touch_Processing+0x1e20>)
 8012728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801272c:	4620      	mov	r0, r4
 801272e:	4629      	mov	r1, r5
 8012730:	b2f6      	uxtb	r6, r6
 8012732:	f04f 0a01 	mov.w	sl, #1
 8012736:	f7ee f9f9 	bl	8000b2c <__aeabi_dcmpge>
 801273a:	b900      	cbnz	r0, 801273e <GUI_Touch_Processing+0x1ba6>
 801273c:	4682      	mov	sl, r0
 801273e:	a3a0      	add	r3, pc, #640	; (adr r3, 80129c0 <GUI_Touch_Processing+0x1e28>)
 8012740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012744:	4620      	mov	r0, r4
 8012746:	4629      	mov	r1, r5
 8012748:	f04f 0b01 	mov.w	fp, #1
 801274c:	f7ee f9e4 	bl	8000b18 <__aeabi_dcmple>
 8012750:	b900      	cbnz	r0, 8012754 <GUI_Touch_Processing+0x1bbc>
 8012752:	4683      	mov	fp, r0
 8012754:	ea0a 0a0b 	and.w	sl, sl, fp
 8012758:	f01a 0f01 	tst.w	sl, #1
 801275c:	d04c      	beq.n	80127f8 <GUI_Touch_Processing+0x1c60>
 801275e:	2e00      	cmp	r6, #0
 8012760:	d04a      	beq.n	80127f8 <GUI_Touch_Processing+0x1c60>
					Measure_Field ^= CIE_Lab;
 8012762:	4ca6      	ldr	r4, [pc, #664]	; (80129fc <GUI_Touch_Processing+0x1e64>)
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 8012764:	4da6      	ldr	r5, [pc, #664]	; (8012a00 <GUI_Touch_Processing+0x1e68>)
					Measure_Field ^= CIE_Lab;
 8012766:	8822      	ldrh	r2, [r4, #0]
 8012768:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 801276c:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 801276e:	2141      	movs	r1, #65	; 0x41
 8012770:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8012774:	20c8      	movs	r0, #200	; 0xc8
 8012776:	f002 fd73 	bl	8015260 <GUI_CheckBox>
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 801277a:	8823      	ldrh	r3, [r4, #0]
 801277c:	782a      	ldrb	r2, [r5, #0]
 801277e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012782:	f002 0201 	and.w	r2, r2, #1
 8012786:	216c      	movs	r1, #108	; 0x6c
 8012788:	20c8      	movs	r0, #200	; 0xc8
 801278a:	f002 fdaa 	bl	80152e2 <GUI_RadioBox>
					GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 801278e:	8823      	ldrh	r3, [r4, #0]
 8012790:	782a      	ldrb	r2, [r5, #0]
 8012792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012796:	f002 0202 	and.w	r2, r2, #2
 801279a:	218f      	movs	r1, #143	; 0x8f
 801279c:	20c8      	movs	r0, #200	; 0xc8
 801279e:	f002 fda0 	bl	80152e2 <GUI_RadioBox>
					GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 80127a2:	8823      	ldrh	r3, [r4, #0]
 80127a4:	782a      	ldrb	r2, [r5, #0]
 80127a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127aa:	f002 0204 	and.w	r2, r2, #4
 80127ae:	21b2      	movs	r1, #178	; 0xb2
 80127b0:	20c8      	movs	r0, #200	; 0xc8
 80127b2:	f002 fd96 	bl	80152e2 <GUI_RadioBox>
					GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 80127b6:	8823      	ldrh	r3, [r4, #0]
 80127b8:	782a      	ldrb	r2, [r5, #0]
 80127ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127be:	f002 0208 	and.w	r2, r2, #8
 80127c2:	21d5      	movs	r1, #213	; 0xd5
 80127c4:	20c8      	movs	r0, #200	; 0xc8
 80127c6:	f002 fd8c 	bl	80152e2 <GUI_RadioBox>
					GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 80127ca:	8823      	ldrh	r3, [r4, #0]
 80127cc:	782a      	ldrb	r2, [r5, #0]
 80127ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127d2:	f002 0210 	and.w	r2, r2, #16
 80127d6:	21f8      	movs	r1, #248	; 0xf8
 80127d8:	20c8      	movs	r0, #200	; 0xc8
 80127da:	f002 fd82 	bl	80152e2 <GUI_RadioBox>
					GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 80127de:	8823      	ldrh	r3, [r4, #0]
 80127e0:	782a      	ldrb	r2, [r5, #0]
 80127e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127e6:	f002 0220 	and.w	r2, r2, #32
 80127ea:	f240 111b 	movw	r1, #283	; 0x11b
 80127ee:	20c8      	movs	r0, #200	; 0xc8
 80127f0:	f002 fd77 	bl	80152e2 <GUI_RadioBox>
 80127f4:	f7fe ba5e 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=345*TS_Callib & Touch_y <=(345+54)*TS_Callib) //EbEr
 80127f8:	a373      	add	r3, pc, #460	; (adr r3, 80129c8 <GUI_Touch_Processing+0x1e30>)
 80127fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127fe:	4620      	mov	r0, r4
 8012800:	4629      	mov	r1, r5
 8012802:	f04f 0a01 	mov.w	sl, #1
 8012806:	f7ee f991 	bl	8000b2c <__aeabi_dcmpge>
 801280a:	b900      	cbnz	r0, 801280e <GUI_Touch_Processing+0x1c76>
 801280c:	4682      	mov	sl, r0
 801280e:	a370      	add	r3, pc, #448	; (adr r3, 80129d0 <GUI_Touch_Processing+0x1e38>)
 8012810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012814:	4620      	mov	r0, r4
 8012816:	4629      	mov	r1, r5
 8012818:	f04f 0b01 	mov.w	fp, #1
 801281c:	f7ee f97c 	bl	8000b18 <__aeabi_dcmple>
 8012820:	b900      	cbnz	r0, 8012824 <GUI_Touch_Processing+0x1c8c>
 8012822:	4683      	mov	fp, r0
 8012824:	ea0a 0a0b 	and.w	sl, sl, fp
 8012828:	f01a 0f01 	tst.w	sl, #1
 801282c:	d00e      	beq.n	801284c <GUI_Touch_Processing+0x1cb4>
 801282e:	b16e      	cbz	r6, 801284c <GUI_Touch_Processing+0x1cb4>
					Measure_Field ^= EbEr;
 8012830:	4b72      	ldr	r3, [pc, #456]	; (80129fc <GUI_Touch_Processing+0x1e64>)
 8012832:	881a      	ldrh	r2, [r3, #0]
 8012834:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8012838:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 345, Measure_Field&EbEr);
 801283a:	f240 1159 	movw	r1, #345	; 0x159
 801283e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8012842:	20c8      	movs	r0, #200	; 0xc8
 8012844:	f002 fd0c 	bl	8015260 <GUI_CheckBox>
 8012848:	f7fe ba34 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=108*TS_Callib & Touch_y <=(108+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_A
 801284c:	a362      	add	r3, pc, #392	; (adr r3, 80129d8 <GUI_Touch_Processing+0x1e40>)
 801284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012852:	4620      	mov	r0, r4
 8012854:	4629      	mov	r1, r5
 8012856:	f04f 0a01 	mov.w	sl, #1
 801285a:	f7ee f967 	bl	8000b2c <__aeabi_dcmpge>
 801285e:	b900      	cbnz	r0, 8012862 <GUI_Touch_Processing+0x1cca>
 8012860:	4682      	mov	sl, r0
 8012862:	ea16 0f0a 	tst.w	r6, sl
 8012866:	d049      	beq.n	80128fc <GUI_Touch_Processing+0x1d64>
 8012868:	a35d      	add	r3, pc, #372	; (adr r3, 80129e0 <GUI_Touch_Processing+0x1e48>)
 801286a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286e:	4620      	mov	r0, r4
 8012870:	4629      	mov	r1, r5
 8012872:	f04f 0a01 	mov.w	sl, #1
 8012876:	f7ee f94f 	bl	8000b18 <__aeabi_dcmple>
 801287a:	b900      	cbnz	r0, 801287e <GUI_Touch_Processing+0x1ce6>
 801287c:	4682      	mov	sl, r0
 801287e:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8012882:	d03b      	beq.n	80128fc <GUI_Touch_Processing+0x1d64>
 8012884:	4b5d      	ldr	r3, [pc, #372]	; (80129fc <GUI_Touch_Processing+0x1e64>)
 8012886:	881b      	ldrh	r3, [r3, #0]
 8012888:	061b      	lsls	r3, r3, #24
 801288a:	d537      	bpl.n	80128fc <GUI_Touch_Processing+0x1d64>
					if(!(Source_Type&Source_A))
 801288c:	4d5c      	ldr	r5, [pc, #368]	; (8012a00 <GUI_Touch_Processing+0x1e68>)
 801288e:	782b      	ldrb	r3, [r5, #0]
 8012890:	07dc      	lsls	r4, r3, #31
 8012892:	f53e aa0f 	bmi.w	8010cb4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type|=Source_A, 0x01);
 8012896:	2401      	movs	r4, #1
 8012898:	4623      	mov	r3, r4
 801289a:	4622      	mov	r2, r4
 801289c:	216c      	movs	r1, #108	; 0x6c
 801289e:	20c8      	movs	r0, #200	; 0xc8
 80128a0:	702c      	strb	r4, [r5, #0]
 80128a2:	f002 fd1e 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 80128a6:	782a      	ldrb	r2, [r5, #0]
 80128a8:	4623      	mov	r3, r4
 80128aa:	f002 0202 	and.w	r2, r2, #2
 80128ae:	218f      	movs	r1, #143	; 0x8f
 80128b0:	20c8      	movs	r0, #200	; 0xc8
 80128b2:	f002 fd16 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 80128b6:	782a      	ldrb	r2, [r5, #0]
 80128b8:	4623      	mov	r3, r4
 80128ba:	f002 0204 	and.w	r2, r2, #4
 80128be:	21b2      	movs	r1, #178	; 0xb2
 80128c0:	20c8      	movs	r0, #200	; 0xc8
 80128c2:	f002 fd0e 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 80128c6:	782a      	ldrb	r2, [r5, #0]
 80128c8:	4623      	mov	r3, r4
 80128ca:	f002 0208 	and.w	r2, r2, #8
 80128ce:	21d5      	movs	r1, #213	; 0xd5
 80128d0:	20c8      	movs	r0, #200	; 0xc8
 80128d2:	f002 fd06 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 80128d6:	782a      	ldrb	r2, [r5, #0]
 80128d8:	4623      	mov	r3, r4
 80128da:	f002 0210 	and.w	r2, r2, #16
 80128de:	21f8      	movs	r1, #248	; 0xf8
 80128e0:	20c8      	movs	r0, #200	; 0xc8
 80128e2:	f002 fcfe 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 80128e6:	782a      	ldrb	r2, [r5, #0]
 80128e8:	4623      	mov	r3, r4
 80128ea:	f002 0220 	and.w	r2, r2, #32
 80128ee:	f240 111b 	movw	r1, #283	; 0x11b
 80128f2:	20c8      	movs	r0, #200	; 0xc8
 80128f4:	f002 fcf5 	bl	80152e2 <GUI_RadioBox>
 80128f8:	f7fe b9dc 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=143*TS_Callib & Touch_y <=(143+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D65
 80128fc:	a33a      	add	r3, pc, #232	; (adr r3, 80129e8 <GUI_Touch_Processing+0x1e50>)
 80128fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012902:	4620      	mov	r0, r4
 8012904:	4629      	mov	r1, r5
 8012906:	f04f 0a01 	mov.w	sl, #1
 801290a:	f7ee f90f 	bl	8000b2c <__aeabi_dcmpge>
 801290e:	b900      	cbnz	r0, 8012912 <GUI_Touch_Processing+0x1d7a>
 8012910:	4682      	mov	sl, r0
 8012912:	ea16 0f0a 	tst.w	r6, sl
 8012916:	d075      	beq.n	8012a04 <GUI_Touch_Processing+0x1e6c>
 8012918:	a335      	add	r3, pc, #212	; (adr r3, 80129f0 <GUI_Touch_Processing+0x1e58>)
 801291a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801291e:	4620      	mov	r0, r4
 8012920:	4629      	mov	r1, r5
 8012922:	f04f 0a01 	mov.w	sl, #1
 8012926:	f7ee f8f7 	bl	8000b18 <__aeabi_dcmple>
 801292a:	b900      	cbnz	r0, 801292e <GUI_Touch_Processing+0x1d96>
 801292c:	4682      	mov	sl, r0
 801292e:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8012932:	d067      	beq.n	8012a04 <GUI_Touch_Processing+0x1e6c>
 8012934:	4b31      	ldr	r3, [pc, #196]	; (80129fc <GUI_Touch_Processing+0x1e64>)
 8012936:	881b      	ldrh	r3, [r3, #0]
 8012938:	0618      	lsls	r0, r3, #24
 801293a:	d563      	bpl.n	8012a04 <GUI_Touch_Processing+0x1e6c>
					if(!(Source_Type&Source_D65))
 801293c:	4c30      	ldr	r4, [pc, #192]	; (8012a00 <GUI_Touch_Processing+0x1e68>)
 801293e:	7822      	ldrb	r2, [r4, #0]
 8012940:	f012 0202 	ands.w	r2, r2, #2
 8012944:	f47e a9b6 	bne.w	8010cb4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012948:	2301      	movs	r3, #1
 801294a:	216c      	movs	r1, #108	; 0x6c
 801294c:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 801294e:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012950:	f002 fcc7 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type|=Source_D65, 0x01);
 8012954:	7822      	ldrb	r2, [r4, #0]
 8012956:	2301      	movs	r3, #1
 8012958:	f042 0202 	orr.w	r2, r2, #2
 801295c:	218f      	movs	r1, #143	; 0x8f
 801295e:	20c8      	movs	r0, #200	; 0xc8
 8012960:	7022      	strb	r2, [r4, #0]
 8012962:	f002 fcbe 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8012966:	7822      	ldrb	r2, [r4, #0]
 8012968:	2301      	movs	r3, #1
 801296a:	f002 0204 	and.w	r2, r2, #4
 801296e:	21b2      	movs	r1, #178	; 0xb2
 8012970:	20c8      	movs	r0, #200	; 0xc8
 8012972:	f002 fcb6 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8012976:	7822      	ldrb	r2, [r4, #0]
 8012978:	2301      	movs	r3, #1
 801297a:	f002 0208 	and.w	r2, r2, #8
 801297e:	21d5      	movs	r1, #213	; 0xd5
 8012980:	20c8      	movs	r0, #200	; 0xc8
 8012982:	f002 fcae 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8012986:	7822      	ldrb	r2, [r4, #0]
 8012988:	2301      	movs	r3, #1
 801298a:	f002 0210 	and.w	r2, r2, #16
 801298e:	21f8      	movs	r1, #248	; 0xf8
 8012990:	20c8      	movs	r0, #200	; 0xc8
 8012992:	f002 fca6 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8012996:	7822      	ldrb	r2, [r4, #0]
 8012998:	2301      	movs	r3, #1
 801299a:	f002 0220 	and.w	r2, r2, #32
 801299e:	f240 111b 	movw	r1, #283	; 0x11b
 80129a2:	20c8      	movs	r0, #200	; 0xc8
 80129a4:	f002 fc9d 	bl	80152e2 <GUI_RadioBox>
 80129a8:	f7fe b984 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 80129ac:	f3af 8000 	nop.w
 80129b0:	cccccccd 	.word	0xcccccccd
 80129b4:	408508cc 	.word	0x408508cc
 80129b8:	00000000 	.word	0x00000000
 80129bc:	40658800 	.word	0x40658800
 80129c0:	99999999 	.word	0x99999999
 80129c4:	4073b599 	.word	0x4073b599
 80129c8:	00000000 	.word	0x00000000
 80129cc:	408c9200 	.word	0x408c9200
 80129d0:	66666666 	.word	0x66666666
 80129d4:	40908566 	.word	0x40908566
 80129d8:	33333333 	.word	0x33333333
 80129dc:	4071e333 	.word	0x4071e333
 80129e0:	cccccccd 	.word	0xcccccccd
 80129e4:	407ad4cc 	.word	0x407ad4cc
 80129e8:	33333333 	.word	0x33333333
 80129ec:	4077af33 	.word	0x4077af33
 80129f0:	66666666 	.word	0x66666666
 80129f4:	40805066 	.word	0x40805066
 80129f8:	40809000 	.word	0x40809000
 80129fc:	2000527e 	.word	0x2000527e
 8012a00:	2008c319 	.word	0x2008c319
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=178*TS_Callib & Touch_y <=(178+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_C
 8012a04:	a3be      	add	r3, pc, #760	; (adr r3, 8012d00 <GUI_Touch_Processing+0x2168>)
 8012a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a0a:	4620      	mov	r0, r4
 8012a0c:	4629      	mov	r1, r5
 8012a0e:	f04f 0a01 	mov.w	sl, #1
 8012a12:	f7ee f88b 	bl	8000b2c <__aeabi_dcmpge>
 8012a16:	b900      	cbnz	r0, 8012a1a <GUI_Touch_Processing+0x1e82>
 8012a18:	4682      	mov	sl, r0
 8012a1a:	ea16 0f0a 	tst.w	r6, sl
 8012a1e:	d049      	beq.n	8012ab4 <GUI_Touch_Processing+0x1f1c>
 8012a20:	a3b9      	add	r3, pc, #740	; (adr r3, 8012d08 <GUI_Touch_Processing+0x2170>)
 8012a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a26:	4620      	mov	r0, r4
 8012a28:	4629      	mov	r1, r5
 8012a2a:	f04f 0a01 	mov.w	sl, #1
 8012a2e:	f7ee f873 	bl	8000b18 <__aeabi_dcmple>
 8012a32:	b900      	cbnz	r0, 8012a36 <GUI_Touch_Processing+0x1e9e>
 8012a34:	4682      	mov	sl, r0
 8012a36:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8012a3a:	d03b      	beq.n	8012ab4 <GUI_Touch_Processing+0x1f1c>
 8012a3c:	4bae      	ldr	r3, [pc, #696]	; (8012cf8 <GUI_Touch_Processing+0x2160>)
 8012a3e:	881b      	ldrh	r3, [r3, #0]
 8012a40:	0619      	lsls	r1, r3, #24
 8012a42:	d537      	bpl.n	8012ab4 <GUI_Touch_Processing+0x1f1c>
					if(!(Source_Type&Source_C))
 8012a44:	4cad      	ldr	r4, [pc, #692]	; (8012cfc <GUI_Touch_Processing+0x2164>)
 8012a46:	7822      	ldrb	r2, [r4, #0]
 8012a48:	f012 0204 	ands.w	r2, r2, #4
 8012a4c:	f47e a932 	bne.w	8010cb4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012a50:	2301      	movs	r3, #1
 8012a52:	216c      	movs	r1, #108	; 0x6c
 8012a54:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8012a56:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012a58:	f002 fc43 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8012a5c:	7822      	ldrb	r2, [r4, #0]
 8012a5e:	2301      	movs	r3, #1
 8012a60:	f002 0202 	and.w	r2, r2, #2
 8012a64:	218f      	movs	r1, #143	; 0x8f
 8012a66:	20c8      	movs	r0, #200	; 0xc8
 8012a68:	f002 fc3b 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 8012a6c:	7822      	ldrb	r2, [r4, #0]
 8012a6e:	2301      	movs	r3, #1
 8012a70:	f042 0204 	orr.w	r2, r2, #4
 8012a74:	21b2      	movs	r1, #178	; 0xb2
 8012a76:	20c8      	movs	r0, #200	; 0xc8
 8012a78:	7022      	strb	r2, [r4, #0]
 8012a7a:	f002 fc32 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8012a7e:	7822      	ldrb	r2, [r4, #0]
 8012a80:	2301      	movs	r3, #1
 8012a82:	f002 0208 	and.w	r2, r2, #8
 8012a86:	21d5      	movs	r1, #213	; 0xd5
 8012a88:	20c8      	movs	r0, #200	; 0xc8
 8012a8a:	f002 fc2a 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8012a8e:	7822      	ldrb	r2, [r4, #0]
 8012a90:	2301      	movs	r3, #1
 8012a92:	f002 0210 	and.w	r2, r2, #16
 8012a96:	21f8      	movs	r1, #248	; 0xf8
 8012a98:	20c8      	movs	r0, #200	; 0xc8
 8012a9a:	f002 fc22 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8012a9e:	7822      	ldrb	r2, [r4, #0]
 8012aa0:	2301      	movs	r3, #1
 8012aa2:	f002 0220 	and.w	r2, r2, #32
 8012aa6:	f240 111b 	movw	r1, #283	; 0x11b
 8012aaa:	20c8      	movs	r0, #200	; 0xc8
 8012aac:	f002 fc19 	bl	80152e2 <GUI_RadioBox>
 8012ab0:	f7fe b900 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=213*TS_Callib & Touch_y <=(213+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D50
 8012ab4:	a384      	add	r3, pc, #528	; (adr r3, 8012cc8 <GUI_Touch_Processing+0x2130>)
 8012ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aba:	4620      	mov	r0, r4
 8012abc:	4629      	mov	r1, r5
 8012abe:	f04f 0a01 	mov.w	sl, #1
 8012ac2:	f7ee f833 	bl	8000b2c <__aeabi_dcmpge>
 8012ac6:	b900      	cbnz	r0, 8012aca <GUI_Touch_Processing+0x1f32>
 8012ac8:	4682      	mov	sl, r0
 8012aca:	ea16 0f0a 	tst.w	r6, sl
 8012ace:	d049      	beq.n	8012b64 <GUI_Touch_Processing+0x1fcc>
 8012ad0:	a37f      	add	r3, pc, #508	; (adr r3, 8012cd0 <GUI_Touch_Processing+0x2138>)
 8012ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ad6:	4620      	mov	r0, r4
 8012ad8:	4629      	mov	r1, r5
 8012ada:	f04f 0a01 	mov.w	sl, #1
 8012ade:	f7ee f81b 	bl	8000b18 <__aeabi_dcmple>
 8012ae2:	b900      	cbnz	r0, 8012ae6 <GUI_Touch_Processing+0x1f4e>
 8012ae4:	4682      	mov	sl, r0
 8012ae6:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8012aea:	d03b      	beq.n	8012b64 <GUI_Touch_Processing+0x1fcc>
 8012aec:	4b82      	ldr	r3, [pc, #520]	; (8012cf8 <GUI_Touch_Processing+0x2160>)
 8012aee:	881b      	ldrh	r3, [r3, #0]
 8012af0:	061a      	lsls	r2, r3, #24
 8012af2:	d537      	bpl.n	8012b64 <GUI_Touch_Processing+0x1fcc>
					if(!(Source_Type&Source_D50))
 8012af4:	4c81      	ldr	r4, [pc, #516]	; (8012cfc <GUI_Touch_Processing+0x2164>)
 8012af6:	7822      	ldrb	r2, [r4, #0]
 8012af8:	f012 0208 	ands.w	r2, r2, #8
 8012afc:	f47e a8da 	bne.w	8010cb4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012b00:	2301      	movs	r3, #1
 8012b02:	216c      	movs	r1, #108	; 0x6c
 8012b04:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8012b06:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012b08:	f002 fbeb 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8012b0c:	7822      	ldrb	r2, [r4, #0]
 8012b0e:	2301      	movs	r3, #1
 8012b10:	f002 0202 	and.w	r2, r2, #2
 8012b14:	218f      	movs	r1, #143	; 0x8f
 8012b16:	20c8      	movs	r0, #200	; 0xc8
 8012b18:	f002 fbe3 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8012b1c:	7822      	ldrb	r2, [r4, #0]
 8012b1e:	2301      	movs	r3, #1
 8012b20:	f002 0204 	and.w	r2, r2, #4
 8012b24:	21b2      	movs	r1, #178	; 0xb2
 8012b26:	20c8      	movs	r0, #200	; 0xc8
 8012b28:	f002 fbdb 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type|=Source_D50, 0x01);
 8012b2c:	7822      	ldrb	r2, [r4, #0]
 8012b2e:	2301      	movs	r3, #1
 8012b30:	f042 0208 	orr.w	r2, r2, #8
 8012b34:	21d5      	movs	r1, #213	; 0xd5
 8012b36:	20c8      	movs	r0, #200	; 0xc8
 8012b38:	7022      	strb	r2, [r4, #0]
 8012b3a:	f002 fbd2 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8012b3e:	7822      	ldrb	r2, [r4, #0]
 8012b40:	2301      	movs	r3, #1
 8012b42:	f002 0210 	and.w	r2, r2, #16
 8012b46:	21f8      	movs	r1, #248	; 0xf8
 8012b48:	20c8      	movs	r0, #200	; 0xc8
 8012b4a:	f002 fbca 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8012b4e:	7822      	ldrb	r2, [r4, #0]
 8012b50:	2301      	movs	r3, #1
 8012b52:	f002 0220 	and.w	r2, r2, #32
 8012b56:	f240 111b 	movw	r1, #283	; 0x11b
 8012b5a:	20c8      	movs	r0, #200	; 0xc8
 8012b5c:	f002 fbc1 	bl	80152e2 <GUI_RadioBox>
 8012b60:	f7fe b8a8 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=248*TS_Callib & Touch_y <=(248+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D55
 8012b64:	a35c      	add	r3, pc, #368	; (adr r3, 8012cd8 <GUI_Touch_Processing+0x2140>)
 8012b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	4629      	mov	r1, r5
 8012b6e:	f04f 0a01 	mov.w	sl, #1
 8012b72:	f7ed ffdb 	bl	8000b2c <__aeabi_dcmpge>
 8012b76:	b900      	cbnz	r0, 8012b7a <GUI_Touch_Processing+0x1fe2>
 8012b78:	4682      	mov	sl, r0
 8012b7a:	ea16 0f0a 	tst.w	r6, sl
 8012b7e:	d049      	beq.n	8012c14 <GUI_Touch_Processing+0x207c>
 8012b80:	a357      	add	r3, pc, #348	; (adr r3, 8012ce0 <GUI_Touch_Processing+0x2148>)
 8012b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b86:	4620      	mov	r0, r4
 8012b88:	4629      	mov	r1, r5
 8012b8a:	f04f 0a01 	mov.w	sl, #1
 8012b8e:	f7ed ffc3 	bl	8000b18 <__aeabi_dcmple>
 8012b92:	b900      	cbnz	r0, 8012b96 <GUI_Touch_Processing+0x1ffe>
 8012b94:	4682      	mov	sl, r0
 8012b96:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8012b9a:	d03b      	beq.n	8012c14 <GUI_Touch_Processing+0x207c>
 8012b9c:	4b56      	ldr	r3, [pc, #344]	; (8012cf8 <GUI_Touch_Processing+0x2160>)
 8012b9e:	881b      	ldrh	r3, [r3, #0]
 8012ba0:	061b      	lsls	r3, r3, #24
 8012ba2:	d537      	bpl.n	8012c14 <GUI_Touch_Processing+0x207c>
					if(!(Source_Type&Source_D55))
 8012ba4:	4c55      	ldr	r4, [pc, #340]	; (8012cfc <GUI_Touch_Processing+0x2164>)
 8012ba6:	7822      	ldrb	r2, [r4, #0]
 8012ba8:	f012 0210 	ands.w	r2, r2, #16
 8012bac:	f47e a882 	bne.w	8010cb4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	216c      	movs	r1, #108	; 0x6c
 8012bb4:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8012bb6:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012bb8:	f002 fb93 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8012bbc:	7822      	ldrb	r2, [r4, #0]
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	f002 0202 	and.w	r2, r2, #2
 8012bc4:	218f      	movs	r1, #143	; 0x8f
 8012bc6:	20c8      	movs	r0, #200	; 0xc8
 8012bc8:	f002 fb8b 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8012bcc:	7822      	ldrb	r2, [r4, #0]
 8012bce:	2301      	movs	r3, #1
 8012bd0:	f002 0204 	and.w	r2, r2, #4
 8012bd4:	21b2      	movs	r1, #178	; 0xb2
 8012bd6:	20c8      	movs	r0, #200	; 0xc8
 8012bd8:	f002 fb83 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8012bdc:	7822      	ldrb	r2, [r4, #0]
 8012bde:	2301      	movs	r3, #1
 8012be0:	f002 0208 	and.w	r2, r2, #8
 8012be4:	21d5      	movs	r1, #213	; 0xd5
 8012be6:	20c8      	movs	r0, #200	; 0xc8
 8012be8:	f002 fb7b 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 8012bec:	7822      	ldrb	r2, [r4, #0]
 8012bee:	2301      	movs	r3, #1
 8012bf0:	f042 0210 	orr.w	r2, r2, #16
 8012bf4:	21f8      	movs	r1, #248	; 0xf8
 8012bf6:	20c8      	movs	r0, #200	; 0xc8
 8012bf8:	7022      	strb	r2, [r4, #0]
 8012bfa:	f002 fb72 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8012bfe:	7822      	ldrb	r2, [r4, #0]
 8012c00:	2301      	movs	r3, #1
 8012c02:	f002 0220 	and.w	r2, r2, #32
 8012c06:	f240 111b 	movw	r1, #283	; 0x11b
 8012c0a:	20c8      	movs	r0, #200	; 0xc8
 8012c0c:	f002 fb69 	bl	80152e2 <GUI_RadioBox>
 8012c10:	f7fe b850 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=283*TS_Callib & Touch_y <=(283+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D75
 8012c14:	a334      	add	r3, pc, #208	; (adr r3, 8012ce8 <GUI_Touch_Processing+0x2150>)
 8012c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	4629      	mov	r1, r5
 8012c1e:	f04f 0a01 	mov.w	sl, #1
 8012c22:	f7ed ff83 	bl	8000b2c <__aeabi_dcmpge>
 8012c26:	b900      	cbnz	r0, 8012c2a <GUI_Touch_Processing+0x2092>
 8012c28:	4682      	mov	sl, r0
 8012c2a:	ea16 0f0a 	tst.w	r6, sl
 8012c2e:	d06f      	beq.n	8012d10 <GUI_Touch_Processing+0x2178>
 8012c30:	a32f      	add	r3, pc, #188	; (adr r3, 8012cf0 <GUI_Touch_Processing+0x2158>)
 8012c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c36:	4620      	mov	r0, r4
 8012c38:	4629      	mov	r1, r5
 8012c3a:	f04f 0601 	mov.w	r6, #1
 8012c3e:	f7ed ff6b 	bl	8000b18 <__aeabi_dcmple>
 8012c42:	b900      	cbnz	r0, 8012c46 <GUI_Touch_Processing+0x20ae>
 8012c44:	4606      	mov	r6, r0
 8012c46:	f016 0fff 	tst.w	r6, #255	; 0xff
 8012c4a:	d061      	beq.n	8012d10 <GUI_Touch_Processing+0x2178>
 8012c4c:	4b2a      	ldr	r3, [pc, #168]	; (8012cf8 <GUI_Touch_Processing+0x2160>)
 8012c4e:	881b      	ldrh	r3, [r3, #0]
 8012c50:	0618      	lsls	r0, r3, #24
 8012c52:	d55d      	bpl.n	8012d10 <GUI_Touch_Processing+0x2178>
					if(!(Source_Type&Source_D75))
 8012c54:	4c29      	ldr	r4, [pc, #164]	; (8012cfc <GUI_Touch_Processing+0x2164>)
 8012c56:	7822      	ldrb	r2, [r4, #0]
 8012c58:	f012 0220 	ands.w	r2, r2, #32
 8012c5c:	f47e a82a 	bne.w	8010cb4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012c60:	2301      	movs	r3, #1
 8012c62:	216c      	movs	r1, #108	; 0x6c
 8012c64:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8012c66:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012c68:	f002 fb3b 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8012c6c:	7822      	ldrb	r2, [r4, #0]
 8012c6e:	2301      	movs	r3, #1
 8012c70:	f002 0202 	and.w	r2, r2, #2
 8012c74:	218f      	movs	r1, #143	; 0x8f
 8012c76:	20c8      	movs	r0, #200	; 0xc8
 8012c78:	f002 fb33 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8012c7c:	7822      	ldrb	r2, [r4, #0]
 8012c7e:	2301      	movs	r3, #1
 8012c80:	f002 0204 	and.w	r2, r2, #4
 8012c84:	21b2      	movs	r1, #178	; 0xb2
 8012c86:	20c8      	movs	r0, #200	; 0xc8
 8012c88:	f002 fb2b 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8012c8c:	7822      	ldrb	r2, [r4, #0]
 8012c8e:	2301      	movs	r3, #1
 8012c90:	f002 0208 	and.w	r2, r2, #8
 8012c94:	21d5      	movs	r1, #213	; 0xd5
 8012c96:	20c8      	movs	r0, #200	; 0xc8
 8012c98:	f002 fb23 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8012c9c:	7822      	ldrb	r2, [r4, #0]
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	f002 0210 	and.w	r2, r2, #16
 8012ca4:	21f8      	movs	r1, #248	; 0xf8
 8012ca6:	20c8      	movs	r0, #200	; 0xc8
 8012ca8:	f002 fb1b 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 8012cac:	7822      	ldrb	r2, [r4, #0]
 8012cae:	2301      	movs	r3, #1
 8012cb0:	f042 0220 	orr.w	r2, r2, #32
 8012cb4:	f240 111b 	movw	r1, #283	; 0x11b
 8012cb8:	20c8      	movs	r0, #200	; 0xc8
 8012cba:	7022      	strb	r2, [r4, #0]
 8012cbc:	f002 fb11 	bl	80152e2 <GUI_RadioBox>
 8012cc0:	f7fd bff8 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8012cc4:	f3af 8000 	nop.w
 8012cc8:	99999999 	.word	0x99999999
 8012ccc:	4081a399 	.word	0x4081a399
 8012cd0:	66666666 	.word	0x66666666
 8012cd4:	40861c66 	.word	0x40861c66
 8012cd8:	99999999 	.word	0x99999999
 8012cdc:	40848999 	.word	0x40848999
 8012ce0:	66666666 	.word	0x66666666
 8012ce4:	40890266 	.word	0x40890266
 8012ce8:	99999999 	.word	0x99999999
 8012cec:	40876f99 	.word	0x40876f99
 8012cf0:	66666666 	.word	0x66666666
 8012cf4:	408be866 	.word	0x408be866
 8012cf8:	2000527e 	.word	0x2000527e
 8012cfc:	2008c319 	.word	0x2008c319
 8012d00:	33333333 	.word	0x33333333
 8012d04:	407d7b33 	.word	0x407d7b33
 8012d08:	66666666 	.word	0x66666666
 8012d0c:	40833666 	.word	0x40833666
 8012d10:	9b00      	ldr	r3, [sp, #0]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8012d12:	4640      	mov	r0, r8
 8012d14:	ea07 0503 	and.w	r5, r7, r3
 8012d18:	4649      	mov	r1, r9
 8012d1a:	a3c1      	add	r3, pc, #772	; (adr r3, 8013020 <GUI_Touch_Processing+0x2488>)
 8012d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d20:	f04f 0401 	mov.w	r4, #1
 8012d24:	f7ed ff02 	bl	8000b2c <__aeabi_dcmpge>
 8012d28:	b900      	cbnz	r0, 8012d2c <GUI_Touch_Processing+0x2194>
 8012d2a:	4604      	mov	r4, r0
 8012d2c:	a3c8      	add	r3, pc, #800	; (adr r3, 8013050 <GUI_Touch_Processing+0x24b8>)
 8012d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d32:	4640      	mov	r0, r8
 8012d34:	4649      	mov	r1, r9
 8012d36:	f04f 0601 	mov.w	r6, #1
 8012d3a:	f7ed feed 	bl	8000b18 <__aeabi_dcmple>
 8012d3e:	b900      	cbnz	r0, 8012d42 <GUI_Touch_Processing+0x21aa>
 8012d40:	4606      	mov	r6, r0
 8012d42:	ea04 0306 	and.w	r3, r4, r6
 8012d46:	07d9      	lsls	r1, r3, #31
 8012d48:	d502      	bpl.n	8012d50 <GUI_Touch_Processing+0x21b8>
 8012d4a:	2d00      	cmp	r5, #0
 8012d4c:	f47e af6f 	bne.w	8011c2e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8012d50:	a3c1      	add	r3, pc, #772	; (adr r3, 8013058 <GUI_Touch_Processing+0x24c0>)
 8012d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d56:	4640      	mov	r0, r8
 8012d58:	4649      	mov	r1, r9
 8012d5a:	f04f 0401 	mov.w	r4, #1
 8012d5e:	f7ed fee5 	bl	8000b2c <__aeabi_dcmpge>
 8012d62:	b900      	cbnz	r0, 8012d66 <GUI_Touch_Processing+0x21ce>
 8012d64:	4604      	mov	r4, r0
 8012d66:	a3a6      	add	r3, pc, #664	; (adr r3, 8013000 <GUI_Touch_Processing+0x2468>)
 8012d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d6c:	4640      	mov	r0, r8
 8012d6e:	4649      	mov	r1, r9
 8012d70:	f04f 0601 	mov.w	r6, #1
 8012d74:	f7ed fed0 	bl	8000b18 <__aeabi_dcmple>
 8012d78:	b900      	cbnz	r0, 8012d7c <GUI_Touch_Processing+0x21e4>
 8012d7a:	4606      	mov	r6, r0
 8012d7c:	ea04 0306 	and.w	r3, r4, r6
 8012d80:	07da      	lsls	r2, r3, #31
 8012d82:	d523      	bpl.n	8012dcc <GUI_Touch_Processing+0x2234>
 8012d84:	b315      	cbz	r5, 8012dcc <GUI_Touch_Processing+0x2234>
					WriteSDFLASH_t(sdfile_cnt);
 8012d86:	4bb6      	ldr	r3, [pc, #728]	; (8013060 <GUI_Touch_Processing+0x24c8>)
 8012d88:	2100      	movs	r1, #0
 8012d8a:	8818      	ldrh	r0, [r3, #0]
 8012d8c:	f009 f822 	bl	801bdd4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012d90:	4bb4      	ldr	r3, [pc, #720]	; (8013064 <GUI_Touch_Processing+0x24cc>)
 8012d92:	781a      	ldrb	r2, [r3, #0]
 8012d94:	4bb4      	ldr	r3, [pc, #720]	; (8013068 <GUI_Touch_Processing+0x24d0>)
					switch (Prev_Inf_Screen){
 8012d96:	1e51      	subs	r1, r2, #1
 8012d98:	2905      	cmp	r1, #5
 8012d9a:	d804      	bhi.n	8012da6 <GUI_Touch_Processing+0x220e>
 8012d9c:	e8df f001 	tbb	[pc, r1]
 8012da0:	0a030306 	.word	0x0a030306
 8012da4:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 8012da6:	701a      	strb	r2, [r3, #0]
 8012da8:	f7fd bf84 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012dac:	2201      	movs	r2, #1
 8012dae:	701a      	strb	r2, [r3, #0]
 8012db0:	f7fd bf80 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8012db4:	2204      	movs	r2, #4
 8012db6:	701a      	strb	r2, [r3, #0]
 8012db8:	f7fd bf7c 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012dbc:	2206      	movs	r2, #6
 8012dbe:	701a      	strb	r2, [r3, #0]
 8012dc0:	f7fd bf78 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8012dc4:	2205      	movs	r2, #5
 8012dc6:	701a      	strb	r2, [r3, #0]
 8012dc8:	f7fd bf74 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8012dcc:	a38c      	add	r3, pc, #560	; (adr r3, 8013000 <GUI_Touch_Processing+0x2468>)
 8012dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd2:	4640      	mov	r0, r8
 8012dd4:	4649      	mov	r1, r9
 8012dd6:	f04f 0401 	mov.w	r4, #1
 8012dda:	f7ed fea7 	bl	8000b2c <__aeabi_dcmpge>
 8012dde:	b900      	cbnz	r0, 8012de2 <GUI_Touch_Processing+0x224a>
 8012de0:	4604      	mov	r4, r0
 8012de2:	a389      	add	r3, pc, #548	; (adr r3, 8013008 <GUI_Touch_Processing+0x2470>)
 8012de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de8:	4640      	mov	r0, r8
 8012dea:	4649      	mov	r1, r9
 8012dec:	f04f 0501 	mov.w	r5, #1
 8012df0:	f7ed fe92 	bl	8000b18 <__aeabi_dcmple>
 8012df4:	b900      	cbnz	r0, 8012df8 <GUI_Touch_Processing+0x2260>
 8012df6:	4605      	mov	r5, r0
 8012df8:	402c      	ands	r4, r5
 8012dfa:	4227      	tst	r7, r4
 8012dfc:	f7ff b9cb 	b.w	8012196 <GUI_Touch_Processing+0x15fe>
					preGUI_screen_state = GUI_screen_state;
 8012e00:	4b9a      	ldr	r3, [pc, #616]	; (801306c <GUI_Touch_Processing+0x24d4>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8012e02:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8012e06:	220b      	movs	r2, #11
 8012e08:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8012e0a:	f7ed fba3 	bl	8000554 <__aeabi_i2d>
 8012e0e:	4604      	mov	r4, r0
 8012e10:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8012e14:	460d      	mov	r5, r1
 8012e16:	f7ed fb9d 	bl	8000554 <__aeabi_i2d>
 8012e1a:	a37d      	add	r3, pc, #500	; (adr r3, 8013010 <GUI_Touch_Processing+0x2478>)
 8012e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e20:	e9cd 0100 	strd	r0, r1, [sp]
 8012e24:	f04f 0801 	mov.w	r8, #1
 8012e28:	f7ed fe80 	bl	8000b2c <__aeabi_dcmpge>
 8012e2c:	b900      	cbnz	r0, 8012e30 <GUI_Touch_Processing+0x2298>
 8012e2e:	4680      	mov	r8, r0
 8012e30:	2200      	movs	r2, #0
 8012e32:	4b8f      	ldr	r3, [pc, #572]	; (8013070 <GUI_Touch_Processing+0x24d8>)
 8012e34:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e38:	fa5f f888 	uxtb.w	r8, r8
 8012e3c:	f04f 0701 	mov.w	r7, #1
 8012e40:	f7ed fe6a 	bl	8000b18 <__aeabi_dcmple>
 8012e44:	b900      	cbnz	r0, 8012e48 <GUI_Touch_Processing+0x22b0>
 8012e46:	4607      	mov	r7, r0
 8012e48:	a373      	add	r3, pc, #460	; (adr r3, 8013018 <GUI_Touch_Processing+0x2480>)
 8012e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e4e:	4620      	mov	r0, r4
 8012e50:	4629      	mov	r1, r5
 8012e52:	b2ff      	uxtb	r7, r7
 8012e54:	f04f 0601 	mov.w	r6, #1
 8012e58:	f7ed fe68 	bl	8000b2c <__aeabi_dcmpge>
 8012e5c:	b900      	cbnz	r0, 8012e60 <GUI_Touch_Processing+0x22c8>
 8012e5e:	4606      	mov	r6, r0
 8012e60:	a36f      	add	r3, pc, #444	; (adr r3, 8013020 <GUI_Touch_Processing+0x2488>)
 8012e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e66:	4620      	mov	r0, r4
 8012e68:	4629      	mov	r1, r5
 8012e6a:	f04f 0901 	mov.w	r9, #1
 8012e6e:	f7ed fe53 	bl	8000b18 <__aeabi_dcmple>
 8012e72:	b900      	cbnz	r0, 8012e76 <GUI_Touch_Processing+0x22de>
 8012e74:	4681      	mov	r9, r0
 8012e76:	ea06 0609 	and.w	r6, r6, r9
 8012e7a:	ea18 0f06 	tst.w	r8, r6
 8012e7e:	d005      	beq.n	8012e8c <GUI_Touch_Processing+0x22f4>
 8012e80:	b127      	cbz	r7, 8012e8c <GUI_Touch_Processing+0x22f4>
					GUI_screen_state = DataSet1_Screen;
 8012e82:	2307      	movs	r3, #7
 8012e84:	f88b 3000 	strb.w	r3, [fp]
 8012e88:	f7fd bf14 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //EbEr
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	4b79      	ldr	r3, [pc, #484]	; (8013074 <GUI_Touch_Processing+0x24dc>)
 8012e90:	4620      	mov	r0, r4
 8012e92:	4629      	mov	r1, r5
 8012e94:	f04f 0601 	mov.w	r6, #1
 8012e98:	f7ed fe48 	bl	8000b2c <__aeabi_dcmpge>
 8012e9c:	b900      	cbnz	r0, 8012ea0 <GUI_Touch_Processing+0x2308>
 8012e9e:	4606      	mov	r6, r0
 8012ea0:	a361      	add	r3, pc, #388	; (adr r3, 8013028 <GUI_Touch_Processing+0x2490>)
 8012ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ea6:	4620      	mov	r0, r4
 8012ea8:	4629      	mov	r1, r5
 8012eaa:	f04f 0901 	mov.w	r9, #1
 8012eae:	f7ed fe33 	bl	8000b18 <__aeabi_dcmple>
 8012eb2:	b900      	cbnz	r0, 8012eb6 <GUI_Touch_Processing+0x231e>
 8012eb4:	4681      	mov	r9, r0
 8012eb6:	ea06 0609 	and.w	r6, r6, r9
 8012eba:	a35d      	add	r3, pc, #372	; (adr r3, 8013030 <GUI_Touch_Processing+0x2498>)
 8012ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ec4:	b2f6      	uxtb	r6, r6
 8012ec6:	f04f 0901 	mov.w	r9, #1
 8012eca:	f7ed fe2f 	bl	8000b2c <__aeabi_dcmpge>
 8012ece:	b900      	cbnz	r0, 8012ed2 <GUI_Touch_Processing+0x233a>
 8012ed0:	4681      	mov	r9, r0
 8012ed2:	a359      	add	r3, pc, #356	; (adr r3, 8013038 <GUI_Touch_Processing+0x24a0>)
 8012ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012edc:	f04f 0a01 	mov.w	sl, #1
 8012ee0:	f7ed fe1a 	bl	8000b18 <__aeabi_dcmple>
 8012ee4:	b900      	cbnz	r0, 8012ee8 <GUI_Touch_Processing+0x2350>
 8012ee6:	4682      	mov	sl, r0
 8012ee8:	ea09 090a 	and.w	r9, r9, sl
 8012eec:	f019 0f01 	tst.w	r9, #1
 8012ef0:	d00d      	beq.n	8012f0e <GUI_Touch_Processing+0x2376>
 8012ef2:	b166      	cbz	r6, 8012f0e <GUI_Touch_Processing+0x2376>
					Measure_Field ^= lambda_d;
 8012ef4:	4b60      	ldr	r3, [pc, #384]	; (8013078 <GUI_Touch_Processing+0x24e0>)
 8012ef6:	881a      	ldrh	r2, [r3, #0]
 8012ef8:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8012efc:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 8012efe:	2146      	movs	r1, #70	; 0x46
 8012f00:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8012f04:	20c8      	movs	r0, #200	; 0xc8
 8012f06:	f002 f9ab 	bl	8015260 <GUI_CheckBox>
 8012f0a:	f7fd bed3 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=198*TS_Callib & Touch_y <=(198+54)*TS_Callib) //EbEr
 8012f0e:	a34c      	add	r3, pc, #304	; (adr r3, 8013040 <GUI_Touch_Processing+0x24a8>)
 8012f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f18:	f04f 0901 	mov.w	r9, #1
 8012f1c:	f7ed fe06 	bl	8000b2c <__aeabi_dcmpge>
 8012f20:	b900      	cbnz	r0, 8012f24 <GUI_Touch_Processing+0x238c>
 8012f22:	4681      	mov	r9, r0
 8012f24:	a348      	add	r3, pc, #288	; (adr r3, 8013048 <GUI_Touch_Processing+0x24b0>)
 8012f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f2e:	f04f 0a01 	mov.w	sl, #1
 8012f32:	f7ed fdf1 	bl	8000b18 <__aeabi_dcmple>
 8012f36:	b900      	cbnz	r0, 8012f3a <GUI_Touch_Processing+0x23a2>
 8012f38:	4682      	mov	sl, r0
 8012f3a:	ea09 090a 	and.w	r9, r9, sl
 8012f3e:	f019 0f01 	tst.w	r9, #1
 8012f42:	d00d      	beq.n	8012f60 <GUI_Touch_Processing+0x23c8>
 8012f44:	b166      	cbz	r6, 8012f60 <GUI_Touch_Processing+0x23c8>
					Measure_Field ^= SP_measure;
 8012f46:	4b4c      	ldr	r3, [pc, #304]	; (8013078 <GUI_Touch_Processing+0x24e0>)
 8012f48:	881a      	ldrh	r2, [r3, #0]
 8012f4a:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8012f4e:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&SP_measure);
 8012f50:	21c6      	movs	r1, #198	; 0xc6
 8012f52:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8012f56:	20c8      	movs	r0, #200	; 0xc8
 8012f58:	f002 f982 	bl	8015260 <GUI_CheckBox>
 8012f5c:	f7fd beaa 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8012f60:	a32f      	add	r3, pc, #188	; (adr r3, 8013020 <GUI_Touch_Processing+0x2488>)
 8012f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f66:	4620      	mov	r0, r4
 8012f68:	4629      	mov	r1, r5
 8012f6a:	ea08 0607 	and.w	r6, r8, r7
 8012f6e:	f04f 0901 	mov.w	r9, #1
 8012f72:	f7ed fddb 	bl	8000b2c <__aeabi_dcmpge>
 8012f76:	b900      	cbnz	r0, 8012f7a <GUI_Touch_Processing+0x23e2>
 8012f78:	4681      	mov	r9, r0
 8012f7a:	a335      	add	r3, pc, #212	; (adr r3, 8013050 <GUI_Touch_Processing+0x24b8>)
 8012f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f80:	4620      	mov	r0, r4
 8012f82:	4629      	mov	r1, r5
 8012f84:	f04f 0a01 	mov.w	sl, #1
 8012f88:	f7ed fdc6 	bl	8000b18 <__aeabi_dcmple>
 8012f8c:	b900      	cbnz	r0, 8012f90 <GUI_Touch_Processing+0x23f8>
 8012f8e:	4682      	mov	sl, r0
 8012f90:	ea09 030a 	and.w	r3, r9, sl
 8012f94:	07db      	lsls	r3, r3, #31
 8012f96:	d502      	bpl.n	8012f9e <GUI_Touch_Processing+0x2406>
 8012f98:	2e00      	cmp	r6, #0
 8012f9a:	f47e ae48 	bne.w	8011c2e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8012f9e:	a32e      	add	r3, pc, #184	; (adr r3, 8013058 <GUI_Touch_Processing+0x24c0>)
 8012fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa4:	4620      	mov	r0, r4
 8012fa6:	4629      	mov	r1, r5
 8012fa8:	f04f 0901 	mov.w	r9, #1
 8012fac:	f7ed fdbe 	bl	8000b2c <__aeabi_dcmpge>
 8012fb0:	b900      	cbnz	r0, 8012fb4 <GUI_Touch_Processing+0x241c>
 8012fb2:	4681      	mov	r9, r0
 8012fb4:	a312      	add	r3, pc, #72	; (adr r3, 8013000 <GUI_Touch_Processing+0x2468>)
 8012fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fba:	4620      	mov	r0, r4
 8012fbc:	4629      	mov	r1, r5
 8012fbe:	f04f 0a01 	mov.w	sl, #1
 8012fc2:	f7ed fda9 	bl	8000b18 <__aeabi_dcmple>
 8012fc6:	b900      	cbnz	r0, 8012fca <GUI_Touch_Processing+0x2432>
 8012fc8:	4682      	mov	sl, r0
 8012fca:	ea09 030a 	and.w	r3, r9, sl
 8012fce:	07d8      	lsls	r0, r3, #31
 8012fd0:	f141 8018 	bpl.w	8014004 <GUI_Touch_Processing+0x346c>
 8012fd4:	2e00      	cmp	r6, #0
 8012fd6:	f001 8015 	beq.w	8014004 <GUI_Touch_Processing+0x346c>
					WriteSDFLASH_t(sdfile_cnt);
 8012fda:	4b21      	ldr	r3, [pc, #132]	; (8013060 <GUI_Touch_Processing+0x24c8>)
 8012fdc:	2100      	movs	r1, #0
 8012fde:	8818      	ldrh	r0, [r3, #0]
 8012fe0:	f008 fef8 	bl	801bdd4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012fe4:	4b1f      	ldr	r3, [pc, #124]	; (8013064 <GUI_Touch_Processing+0x24cc>)
 8012fe6:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8012fe8:	1e5a      	subs	r2, r3, #1
 8012fea:	2a05      	cmp	r2, #5
 8012fec:	d804      	bhi.n	8012ff8 <GUI_Touch_Processing+0x2460>
 8012fee:	e8df f002 	tbb	[pc, r2]
 8012ff2:	0345      	.short	0x0345
 8012ff4:	4f544a03 	.word	0x4f544a03
					GUI_screen_state = Prev_Inf_Screen;
 8012ff8:	f88b 3000 	strb.w	r3, [fp]
 8012ffc:	f7fd be5a 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8013000:	00000000 	.word	0x00000000
 8013004:	40623800 	.word	0x40623800
 8013008:	99999999 	.word	0x99999999
 801300c:	40720d99 	.word	0x40720d99
 8013010:	99999999 	.word	0x99999999
 8013014:	4091a399 	.word	0x4091a399
 8013018:	33333333 	.word	0x33333333
 801301c:	407aff33 	.word	0x407aff33
 8013020:	66666666 	.word	0x66666666
 8013024:	4081f866 	.word	0x4081f866
 8013028:	cccccccd 	.word	0xcccccccd
 801302c:	408508cc 	.word	0x408508cc
 8013030:	00000000 	.word	0x00000000
 8013034:	40673000 	.word	0x40673000
 8013038:	99999999 	.word	0x99999999
 801303c:	40748999 	.word	0x40748999
 8013040:	99999999 	.word	0x99999999
 8013044:	40806599 	.word	0x40806599
 8013048:	66666666 	.word	0x66666666
 801304c:	4084de66 	.word	0x4084de66
 8013050:	33333333 	.word	0x33333333
 8013054:	40867133 	.word	0x40867133
 8013058:	33333333 	.word	0x33333333
 801305c:	40053333 	.word	0x40053333
 8013060:	200052a6 	.word	0x200052a6
 8013064:	2008c315 	.word	0x2008c315
 8013068:	20005279 	.word	0x20005279
 801306c:	2000022a 	.word	0x2000022a
 8013070:	4093e000 	.word	0x4093e000
 8013074:	40809000 	.word	0x40809000
 8013078:	2000527e 	.word	0x2000527e
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 801307c:	2301      	movs	r3, #1
 801307e:	f88b 3000 	strb.w	r3, [fp]
 8013082:	f7fd be17 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8013086:	2304      	movs	r3, #4
 8013088:	f88b 3000 	strb.w	r3, [fp]
 801308c:	f7fd be12 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8013090:	2306      	movs	r3, #6
 8013092:	f88b 3000 	strb.w	r3, [fp]
 8013096:	f7fd be0d 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801309a:	2305      	movs	r3, #5
 801309c:	f88b 3000 	strb.w	r3, [fp]
 80130a0:	f7fd be08 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 80130a4:	4ba4      	ldr	r3, [pc, #656]	; (8013338 <GUI_Touch_Processing+0x27a0>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 80130a6:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 80130aa:	220c      	movs	r2, #12
 80130ac:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 80130ae:	f7ed fa51 	bl	8000554 <__aeabi_i2d>
 80130b2:	4604      	mov	r4, r0
 80130b4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80130b8:	460d      	mov	r5, r1
 80130ba:	f7ed fa4b 	bl	8000554 <__aeabi_i2d>
 80130be:	a386      	add	r3, pc, #536	; (adr r3, 80132d8 <GUI_Touch_Processing+0x2740>)
 80130c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130c4:	4606      	mov	r6, r0
 80130c6:	460f      	mov	r7, r1
 80130c8:	f04f 0801 	mov.w	r8, #1
 80130cc:	f7ed fd2e 	bl	8000b2c <__aeabi_dcmpge>
 80130d0:	b900      	cbnz	r0, 80130d4 <GUI_Touch_Processing+0x253c>
 80130d2:	4680      	mov	r8, r0
 80130d4:	fa5f f388 	uxtb.w	r3, r8
 80130d8:	9300      	str	r3, [sp, #0]
 80130da:	2200      	movs	r2, #0
 80130dc:	4b97      	ldr	r3, [pc, #604]	; (801333c <GUI_Touch_Processing+0x27a4>)
 80130de:	4630      	mov	r0, r6
 80130e0:	4639      	mov	r1, r7
 80130e2:	f04f 0801 	mov.w	r8, #1
 80130e6:	f7ed fd17 	bl	8000b18 <__aeabi_dcmple>
 80130ea:	b900      	cbnz	r0, 80130ee <GUI_Touch_Processing+0x2556>
 80130ec:	4680      	mov	r8, r0
 80130ee:	fa5f f388 	uxtb.w	r3, r8
 80130f2:	9303      	str	r3, [sp, #12]
 80130f4:	4620      	mov	r0, r4
 80130f6:	a37a      	add	r3, pc, #488	; (adr r3, 80132e0 <GUI_Touch_Processing+0x2748>)
 80130f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130fc:	4629      	mov	r1, r5
 80130fe:	f04f 0801 	mov.w	r8, #1
 8013102:	f7ed fd13 	bl	8000b2c <__aeabi_dcmpge>
 8013106:	b900      	cbnz	r0, 801310a <GUI_Touch_Processing+0x2572>
 8013108:	4680      	mov	r8, r0
 801310a:	a377      	add	r3, pc, #476	; (adr r3, 80132e8 <GUI_Touch_Processing+0x2750>)
 801310c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013110:	4620      	mov	r0, r4
 8013112:	4629      	mov	r1, r5
 8013114:	f04f 0901 	mov.w	r9, #1
 8013118:	f7ed fcfe 	bl	8000b18 <__aeabi_dcmple>
 801311c:	b900      	cbnz	r0, 8013120 <GUI_Touch_Processing+0x2588>
 801311e:	4681      	mov	r9, r0
 8013120:	9b00      	ldr	r3, [sp, #0]
 8013122:	ea08 0809 	and.w	r8, r8, r9
 8013126:	ea13 0f08 	tst.w	r3, r8
 801312a:	d006      	beq.n	801313a <GUI_Touch_Processing+0x25a2>
 801312c:	9b03      	ldr	r3, [sp, #12]
 801312e:	b123      	cbz	r3, 801313a <GUI_Touch_Processing+0x25a2>
					GUI_screen_state = GraphSet2_Screen;
 8013130:	230d      	movs	r3, #13
 8013132:	f88b 3000 	strb.w	r3, [fp]
 8013136:	f7fd bdbd 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 801313a:	a36d      	add	r3, pc, #436	; (adr r3, 80132f0 <GUI_Touch_Processing+0x2758>)
 801313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013140:	4620      	mov	r0, r4
 8013142:	4629      	mov	r1, r5
 8013144:	f04f 0801 	mov.w	r8, #1
 8013148:	f7ed fcf0 	bl	8000b2c <__aeabi_dcmpge>
 801314c:	b900      	cbnz	r0, 8013150 <GUI_Touch_Processing+0x25b8>
 801314e:	4680      	mov	r8, r0
 8013150:	a369      	add	r3, pc, #420	; (adr r3, 80132f8 <GUI_Touch_Processing+0x2760>)
 8013152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013156:	4620      	mov	r0, r4
 8013158:	4629      	mov	r1, r5
 801315a:	f04f 0901 	mov.w	r9, #1
 801315e:	f7ed fcdb 	bl	8000b18 <__aeabi_dcmple>
 8013162:	b900      	cbnz	r0, 8013166 <GUI_Touch_Processing+0x25ce>
 8013164:	4681      	mov	r9, r0
 8013166:	ea08 0809 	and.w	r8, r8, r9
 801316a:	a365      	add	r3, pc, #404	; (adr r3, 8013300 <GUI_Touch_Processing+0x2768>)
 801316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013170:	4630      	mov	r0, r6
 8013172:	4639      	mov	r1, r7
 8013174:	fa5f f888 	uxtb.w	r8, r8
 8013178:	f04f 0901 	mov.w	r9, #1
 801317c:	f7ed fcd6 	bl	8000b2c <__aeabi_dcmpge>
 8013180:	b900      	cbnz	r0, 8013184 <GUI_Touch_Processing+0x25ec>
 8013182:	4681      	mov	r9, r0
 8013184:	a360      	add	r3, pc, #384	; (adr r3, 8013308 <GUI_Touch_Processing+0x2770>)
 8013186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318a:	4630      	mov	r0, r6
 801318c:	4639      	mov	r1, r7
 801318e:	f04f 0a01 	mov.w	sl, #1
 8013192:	f7ed fcc1 	bl	8000b18 <__aeabi_dcmple>
 8013196:	b900      	cbnz	r0, 801319a <GUI_Touch_Processing+0x2602>
 8013198:	4682      	mov	sl, r0
 801319a:	ea09 090a 	and.w	r9, r9, sl
 801319e:	f019 0f01 	tst.w	r9, #1
 80131a2:	d028      	beq.n	80131f6 <GUI_Touch_Processing+0x265e>
 80131a4:	f1b8 0f00 	cmp.w	r8, #0
 80131a8:	d025      	beq.n	80131f6 <GUI_Touch_Processing+0x265e>
					Mode_EL = !Mode_EL;
 80131aa:	4c65      	ldr	r4, [pc, #404]	; (8013340 <GUI_Touch_Processing+0x27a8>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80131ac:	4b65      	ldr	r3, [pc, #404]	; (8013344 <GUI_Touch_Processing+0x27ac>)
					Mode_EL = !Mode_EL;
 80131ae:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80131b0:	4865      	ldr	r0, [pc, #404]	; (8013348 <GUI_Touch_Processing+0x27b0>)
					Mode_EL = !Mode_EL;
 80131b2:	2a00      	cmp	r2, #0
 80131b4:	bf0c      	ite	eq
 80131b6:	2201      	moveq	r2, #1
 80131b8:	2200      	movne	r2, #0
 80131ba:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80131bc:	bf18      	it	ne
 80131be:	4618      	movne	r0, r3
 80131c0:	4a62      	ldr	r2, [pc, #392]	; (801334c <GUI_Touch_Processing+0x27b4>)
 80131c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80131c6:	f7fb fd37 	bl	800ec38 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80131ca:	7822      	ldrb	r2, [r4, #0]
 80131cc:	4b60      	ldr	r3, [pc, #384]	; (8013350 <GUI_Touch_Processing+0x27b8>)
 80131ce:	b982      	cbnz	r2, 80131f2 <GUI_Touch_Processing+0x265a>
 80131d0:	4a60      	ldr	r2, [pc, #384]	; (8013354 <GUI_Touch_Processing+0x27bc>)
 80131d2:	edd2 0a00 	vldr	s1, [r2]
 80131d6:	ed93 0a00 	vldr	s0, [r3]
 80131da:	f008 fd71 	bl	801bcc0 <Rabs_calc_Factor2_Settings_change>
 80131de:	4b5e      	ldr	r3, [pc, #376]	; (8013358 <GUI_Touch_Processing+0x27c0>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80131e0:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80131e2:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80131e6:	21ca      	movs	r1, #202	; 0xca
 80131e8:	20b6      	movs	r0, #182	; 0xb6
 80131ea:	f002 f903 	bl	80153f4 <GUI_Switch_ButtonActive>
 80131ee:	f7fd bd61 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80131f2:	4a5a      	ldr	r2, [pc, #360]	; (801335c <GUI_Touch_Processing+0x27c4>)
 80131f4:	e7ed      	b.n	80131d2 <GUI_Touch_Processing+0x263a>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 80131f6:	a346      	add	r3, pc, #280	; (adr r3, 8013310 <GUI_Touch_Processing+0x2778>)
 80131f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131fc:	4630      	mov	r0, r6
 80131fe:	4639      	mov	r1, r7
 8013200:	f04f 0901 	mov.w	r9, #1
 8013204:	f7ed fc92 	bl	8000b2c <__aeabi_dcmpge>
 8013208:	b900      	cbnz	r0, 801320c <GUI_Touch_Processing+0x2674>
 801320a:	4681      	mov	r9, r0
 801320c:	a342      	add	r3, pc, #264	; (adr r3, 8013318 <GUI_Touch_Processing+0x2780>)
 801320e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013212:	4630      	mov	r0, r6
 8013214:	4639      	mov	r1, r7
 8013216:	f04f 0a01 	mov.w	sl, #1
 801321a:	f7ed fc7d 	bl	8000b18 <__aeabi_dcmple>
 801321e:	b900      	cbnz	r0, 8013222 <GUI_Touch_Processing+0x268a>
 8013220:	4682      	mov	sl, r0
 8013222:	ea09 090a 	and.w	r9, r9, sl
 8013226:	f019 0f01 	tst.w	r9, #1
 801322a:	d011      	beq.n	8013250 <GUI_Touch_Processing+0x26b8>
 801322c:	f1b8 0f00 	cmp.w	r8, #0
 8013230:	d00e      	beq.n	8013250 <GUI_Touch_Processing+0x26b8>
					Bluetooth = !Bluetooth;
 8013232:	4b4b      	ldr	r3, [pc, #300]	; (8013360 <GUI_Touch_Processing+0x27c8>)
 8013234:	781a      	ldrb	r2, [r3, #0]
 8013236:	fab2 f282 	clz	r2, r2
 801323a:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 801323c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8013240:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8013242:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8013244:	f002 f87c 	bl	8015340 <GUI_Switch_Button>
					GUI_Up_Panel();
 8013248:	f7fc f96e 	bl	800f528 <GUI_Up_Panel>
 801324c:	f7fd bd32 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //PPF_Bands
 8013250:	2200      	movs	r2, #0
 8013252:	4b44      	ldr	r3, [pc, #272]	; (8013364 <GUI_Touch_Processing+0x27cc>)
 8013254:	4620      	mov	r0, r4
 8013256:	4629      	mov	r1, r5
 8013258:	f04f 0901 	mov.w	r9, #1
 801325c:	f7ed fc66 	bl	8000b2c <__aeabi_dcmpge>
 8013260:	b900      	cbnz	r0, 8013264 <GUI_Touch_Processing+0x26cc>
 8013262:	4681      	mov	r9, r0
 8013264:	a32e      	add	r3, pc, #184	; (adr r3, 8013320 <GUI_Touch_Processing+0x2788>)
 8013266:	e9d3 2300 	ldrd	r2, r3, [r3]
 801326a:	4620      	mov	r0, r4
 801326c:	4629      	mov	r1, r5
 801326e:	f04f 0801 	mov.w	r8, #1
 8013272:	f7ed fc51 	bl	8000b18 <__aeabi_dcmple>
 8013276:	b900      	cbnz	r0, 801327a <GUI_Touch_Processing+0x26e2>
 8013278:	4680      	mov	r8, r0
 801327a:	a32b      	add	r3, pc, #172	; (adr r3, 8013328 <GUI_Touch_Processing+0x2790>)
 801327c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013280:	4630      	mov	r0, r6
 8013282:	4639      	mov	r1, r7
 8013284:	ea09 0808 	and.w	r8, r9, r8
 8013288:	f04f 0901 	mov.w	r9, #1
 801328c:	f7ed fc4e 	bl	8000b2c <__aeabi_dcmpge>
 8013290:	b900      	cbnz	r0, 8013294 <GUI_Touch_Processing+0x26fc>
 8013292:	4681      	mov	r9, r0
 8013294:	ea08 0809 	and.w	r8, r8, r9
 8013298:	f018 0f01 	tst.w	r8, #1
 801329c:	d066      	beq.n	801336c <GUI_Touch_Processing+0x27d4>
 801329e:	a324      	add	r3, pc, #144	; (adr r3, 8013330 <GUI_Touch_Processing+0x2798>)
 80132a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a4:	4630      	mov	r0, r6
 80132a6:	4639      	mov	r1, r7
 80132a8:	f04f 0801 	mov.w	r8, #1
 80132ac:	f7ed fc34 	bl	8000b18 <__aeabi_dcmple>
 80132b0:	b900      	cbnz	r0, 80132b4 <GUI_Touch_Processing+0x271c>
 80132b2:	4680      	mov	r8, r0
 80132b4:	f018 0fff 	tst.w	r8, #255	; 0xff
 80132b8:	d058      	beq.n	801336c <GUI_Touch_Processing+0x27d4>
					Graph_Field ^= PPF_Bands;
 80132ba:	4b2b      	ldr	r3, [pc, #172]	; (8013368 <GUI_Touch_Processing+0x27d0>)
 80132bc:	781a      	ldrb	r2, [r3, #0]
 80132be:	f082 0201 	eor.w	r2, r2, #1
 80132c2:	701a      	strb	r2, [r3, #0]
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 80132c4:	f240 1147 	movw	r1, #327	; 0x147
 80132c8:	f002 0201 	and.w	r2, r2, #1
 80132cc:	20c8      	movs	r0, #200	; 0xc8
 80132ce:	f001 ffc7 	bl	8015260 <GUI_CheckBox>
 80132d2:	f7fd bcef 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 80132d6:	bf00      	nop
 80132d8:	99999999 	.word	0x99999999
 80132dc:	4091a399 	.word	0x4091a399
 80132e0:	33333333 	.word	0x33333333
 80132e4:	407aff33 	.word	0x407aff33
 80132e8:	66666666 	.word	0x66666666
 80132ec:	4081f866 	.word	0x4081f866
 80132f0:	cccccccd 	.word	0xcccccccd
 80132f4:	407e24cc 	.word	0x407e24cc
 80132f8:	33333333 	.word	0x33333333
 80132fc:	40838b33 	.word	0x40838b33
 8013300:	66666666 	.word	0x66666666
 8013304:	4080ba66 	.word	0x4080ba66
 8013308:	33333333 	.word	0x33333333
 801330c:	40853333 	.word	0x40853333
 8013310:	99999999 	.word	0x99999999
 8013314:	40863199 	.word	0x40863199
 8013318:	66666666 	.word	0x66666666
 801331c:	408aaa66 	.word	0x408aaa66
 8013320:	cccccccd 	.word	0xcccccccd
 8013324:	408508cc 	.word	0x408508cc
 8013328:	66666666 	.word	0x66666666
 801332c:	408b1466 	.word	0x408b1466
 8013330:	33333333 	.word	0x33333333
 8013334:	408f8d33 	.word	0x408f8d33
 8013338:	2000022a 	.word	0x2000022a
 801333c:	4093e000 	.word	0x4093e000
 8013340:	20000a48 	.word	0x20000a48
 8013344:	08101838 	.word	0x08101838
 8013348:	08100838 	.word	0x08100838
 801334c:	2004d1e8 	.word	0x2004d1e8
 8013350:	200055d4 	.word	0x200055d4
 8013354:	200055d0 	.word	0x200055d0
 8013358:	200055dc 	.word	0x200055dc
 801335c:	200055cc 	.word	0x200055cc
 8013360:	2008c31a 	.word	0x2008c31a
 8013364:	40809000 	.word	0x40809000
 8013368:	2000527a 	.word	0x2000527a
 801336c:	9b00      	ldr	r3, [sp, #0]
 801336e:	9a03      	ldr	r2, [sp, #12]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8013370:	4620      	mov	r0, r4
 8013372:	ea03 0802 	and.w	r8, r3, r2
 8013376:	4629      	mov	r1, r5
 8013378:	a3c7      	add	r3, pc, #796	; (adr r3, 8013698 <GUI_Touch_Processing+0x2b00>)
 801337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801337e:	f04f 0901 	mov.w	r9, #1
 8013382:	f7ed fbd3 	bl	8000b2c <__aeabi_dcmpge>
 8013386:	b900      	cbnz	r0, 801338a <GUI_Touch_Processing+0x27f2>
 8013388:	4681      	mov	r9, r0
 801338a:	a3d1      	add	r3, pc, #836	; (adr r3, 80136d0 <GUI_Touch_Processing+0x2b38>)
 801338c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013390:	4620      	mov	r0, r4
 8013392:	4629      	mov	r1, r5
 8013394:	f04f 0a01 	mov.w	sl, #1
 8013398:	f7ed fbbe 	bl	8000b18 <__aeabi_dcmple>
 801339c:	b900      	cbnz	r0, 80133a0 <GUI_Touch_Processing+0x2808>
 801339e:	4682      	mov	sl, r0
 80133a0:	ea09 030a 	and.w	r3, r9, sl
 80133a4:	07d9      	lsls	r1, r3, #31
 80133a6:	d503      	bpl.n	80133b0 <GUI_Touch_Processing+0x2818>
 80133a8:	f1b8 0f00 	cmp.w	r8, #0
 80133ac:	f47e ac3f 	bne.w	8011c2e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 80133b0:	a3c9      	add	r3, pc, #804	; (adr r3, 80136d8 <GUI_Touch_Processing+0x2b40>)
 80133b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133b6:	4620      	mov	r0, r4
 80133b8:	4629      	mov	r1, r5
 80133ba:	f04f 0901 	mov.w	r9, #1
 80133be:	f7ed fbb5 	bl	8000b2c <__aeabi_dcmpge>
 80133c2:	b900      	cbnz	r0, 80133c6 <GUI_Touch_Processing+0x282e>
 80133c4:	4681      	mov	r9, r0
 80133c6:	a3a2      	add	r3, pc, #648	; (adr r3, 8013650 <GUI_Touch_Processing+0x2ab8>)
 80133c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133cc:	4620      	mov	r0, r4
 80133ce:	4629      	mov	r1, r5
 80133d0:	f04f 0a01 	mov.w	sl, #1
 80133d4:	f7ed fba0 	bl	8000b18 <__aeabi_dcmple>
 80133d8:	b900      	cbnz	r0, 80133dc <GUI_Touch_Processing+0x2844>
 80133da:	4682      	mov	sl, r0
 80133dc:	ea09 030a 	and.w	r3, r9, sl
 80133e0:	07da      	lsls	r2, r3, #31
 80133e2:	d529      	bpl.n	8013438 <GUI_Touch_Processing+0x28a0>
 80133e4:	f1b8 0f00 	cmp.w	r8, #0
 80133e8:	d026      	beq.n	8013438 <GUI_Touch_Processing+0x28a0>
					WriteSDFLASH_t(sdfile_cnt);
 80133ea:	4bb1      	ldr	r3, [pc, #708]	; (80136b0 <GUI_Touch_Processing+0x2b18>)
 80133ec:	2100      	movs	r1, #0
 80133ee:	8818      	ldrh	r0, [r3, #0]
 80133f0:	f008 fcf0 	bl	801bdd4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80133f4:	4baf      	ldr	r3, [pc, #700]	; (80136b4 <GUI_Touch_Processing+0x2b1c>)
 80133f6:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80133f8:	1e5a      	subs	r2, r3, #1
 80133fa:	2a05      	cmp	r2, #5
 80133fc:	d804      	bhi.n	8013408 <GUI_Touch_Processing+0x2870>
 80133fe:	e8df f002 	tbb	[pc, r2]
 8013402:	0307      	.short	0x0307
 8013404:	11160c03 	.word	0x11160c03
					GUI_screen_state = Prev_Inf_Screen;
 8013408:	f88b 3000 	strb.w	r3, [fp]
 801340c:	f7fd bc52 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8013410:	2301      	movs	r3, #1
 8013412:	f88b 3000 	strb.w	r3, [fp]
 8013416:	f7fd bc4d 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801341a:	2304      	movs	r3, #4
 801341c:	f88b 3000 	strb.w	r3, [fp]
 8013420:	f7fd bc48 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8013424:	2306      	movs	r3, #6
 8013426:	f88b 3000 	strb.w	r3, [fp]
 801342a:	f7fd bc43 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801342e:	2305      	movs	r3, #5
 8013430:	f88b 3000 	strb.w	r3, [fp]
 8013434:	f7fd bc3e 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8013438:	a385      	add	r3, pc, #532	; (adr r3, 8013650 <GUI_Touch_Processing+0x2ab8>)
 801343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801343e:	4620      	mov	r0, r4
 8013440:	4629      	mov	r1, r5
 8013442:	f04f 0901 	mov.w	r9, #1
 8013446:	f7ed fb71 	bl	8000b2c <__aeabi_dcmpge>
 801344a:	b900      	cbnz	r0, 801344e <GUI_Touch_Processing+0x28b6>
 801344c:	4681      	mov	r9, r0
 801344e:	a382      	add	r3, pc, #520	; (adr r3, 8013658 <GUI_Touch_Processing+0x2ac0>)
 8013450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013454:	4620      	mov	r0, r4
 8013456:	4629      	mov	r1, r5
 8013458:	f04f 0a01 	mov.w	sl, #1
 801345c:	f7ed fb5c 	bl	8000b18 <__aeabi_dcmple>
 8013460:	b900      	cbnz	r0, 8013464 <GUI_Touch_Processing+0x28cc>
 8013462:	4682      	mov	sl, r0
 8013464:	ea09 030a 	and.w	r3, r9, sl
 8013468:	07db      	lsls	r3, r3, #31
 801346a:	d503      	bpl.n	8013474 <GUI_Touch_Processing+0x28dc>
 801346c:	f1b8 0f00 	cmp.w	r8, #0
 8013470:	f47d ac60 	bne.w	8010d34 <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 8013474:	a37a      	add	r3, pc, #488	; (adr r3, 8013660 <GUI_Touch_Processing+0x2ac8>)
 8013476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801347a:	4620      	mov	r0, r4
 801347c:	4629      	mov	r1, r5
 801347e:	f04f 0801 	mov.w	r8, #1
 8013482:	f7ed fb53 	bl	8000b2c <__aeabi_dcmpge>
 8013486:	b900      	cbnz	r0, 801348a <GUI_Touch_Processing+0x28f2>
 8013488:	4680      	mov	r8, r0
 801348a:	a377      	add	r3, pc, #476	; (adr r3, 8013668 <GUI_Touch_Processing+0x2ad0>)
 801348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013490:	4620      	mov	r0, r4
 8013492:	4629      	mov	r1, r5
 8013494:	f04f 0901 	mov.w	r9, #1
 8013498:	f7ed fb3e 	bl	8000b18 <__aeabi_dcmple>
 801349c:	b900      	cbnz	r0, 80134a0 <GUI_Touch_Processing+0x2908>
 801349e:	4681      	mov	r9, r0
 80134a0:	ea08 0409 	and.w	r4, r8, r9
 80134a4:	2200      	movs	r2, #0
 80134a6:	4b84      	ldr	r3, [pc, #528]	; (80136b8 <GUI_Touch_Processing+0x2b20>)
 80134a8:	4630      	mov	r0, r6
 80134aa:	4639      	mov	r1, r7
 80134ac:	b2e4      	uxtb	r4, r4
 80134ae:	f04f 0501 	mov.w	r5, #1
 80134b2:	f7ed fb3b 	bl	8000b2c <__aeabi_dcmpge>
 80134b6:	b900      	cbnz	r0, 80134ba <GUI_Touch_Processing+0x2922>
 80134b8:	4605      	mov	r5, r0
 80134ba:	a36d      	add	r3, pc, #436	; (adr r3, 8013670 <GUI_Touch_Processing+0x2ad8>)
 80134bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c0:	4630      	mov	r0, r6
 80134c2:	4639      	mov	r1, r7
 80134c4:	f04f 0801 	mov.w	r8, #1
 80134c8:	f7ed fb26 	bl	8000b18 <__aeabi_dcmple>
 80134cc:	b900      	cbnz	r0, 80134d0 <GUI_Touch_Processing+0x2938>
 80134ce:	4680      	mov	r8, r0
 80134d0:	ea05 0508 	and.w	r5, r5, r8
 80134d4:	07e8      	lsls	r0, r5, #31
 80134d6:	d510      	bpl.n	80134fa <GUI_Touch_Processing+0x2962>
 80134d8:	b17c      	cbz	r4, 80134fa <GUI_Touch_Processing+0x2962>
					if (Language_status == Ru) Language_status=En;
 80134da:	4b78      	ldr	r3, [pc, #480]	; (80136bc <GUI_Touch_Processing+0x2b24>)
 80134dc:	781b      	ldrb	r3, [r3, #0]
 80134de:	b923      	cbnz	r3, 80134ea <GUI_Touch_Processing+0x2952>
 80134e0:	4b76      	ldr	r3, [pc, #472]	; (80136bc <GUI_Touch_Processing+0x2b24>)
 80134e2:	2201      	movs	r2, #1
 80134e4:	701a      	strb	r2, [r3, #0]
 80134e6:	f7fd bbe5 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
					else if (Language_status == En) Language_status=Ru;
 80134ea:	2b01      	cmp	r3, #1
 80134ec:	f47d abe2 	bne.w	8010cb4 <GUI_Touch_Processing+0x11c>
 80134f0:	4b72      	ldr	r3, [pc, #456]	; (80136bc <GUI_Touch_Processing+0x2b24>)
 80134f2:	2200      	movs	r2, #0
 80134f4:	701a      	strb	r2, [r3, #0]
 80134f6:	f7fd bbdd 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 80134fa:	a35f      	add	r3, pc, #380	; (adr r3, 8013678 <GUI_Touch_Processing+0x2ae0>)
 80134fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013500:	4630      	mov	r0, r6
 8013502:	4639      	mov	r1, r7
 8013504:	f04f 0501 	mov.w	r5, #1
 8013508:	f7ed fb10 	bl	8000b2c <__aeabi_dcmpge>
 801350c:	b900      	cbnz	r0, 8013510 <GUI_Touch_Processing+0x2978>
 801350e:	4605      	mov	r5, r0
 8013510:	a35b      	add	r3, pc, #364	; (adr r3, 8013680 <GUI_Touch_Processing+0x2ae8>)
 8013512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013516:	4630      	mov	r0, r6
 8013518:	4639      	mov	r1, r7
 801351a:	f04f 0801 	mov.w	r8, #1
 801351e:	f7ed fafb 	bl	8000b18 <__aeabi_dcmple>
 8013522:	b900      	cbnz	r0, 8013526 <GUI_Touch_Processing+0x298e>
 8013524:	4680      	mov	r8, r0
 8013526:	ea05 0508 	and.w	r5, r5, r8
 801352a:	07e9      	lsls	r1, r5, #31
 801352c:	f57d abc2 	bpl.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8013530:	2c00      	cmp	r4, #0
 8013532:	f43d abbf 	beq.w	8010cb4 <GUI_Touch_Processing+0x11c>
					GUI_screen_state = Information_Screen;
 8013536:	2311      	movs	r3, #17
 8013538:	f88b 3000 	strb.w	r3, [fp]
 801353c:	f7fd bbba 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 8013540:	4b5f      	ldr	r3, [pc, #380]	; (80136c0 <GUI_Touch_Processing+0x2b28>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8013542:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8013546:	220d      	movs	r2, #13
 8013548:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 801354a:	f7ed f803 	bl	8000554 <__aeabi_i2d>
 801354e:	4604      	mov	r4, r0
 8013550:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8013554:	460d      	mov	r5, r1
 8013556:	f7ec fffd 	bl	8000554 <__aeabi_i2d>
 801355a:	a34b      	add	r3, pc, #300	; (adr r3, 8013688 <GUI_Touch_Processing+0x2af0>)
 801355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013560:	e9cd 0100 	strd	r0, r1, [sp]
 8013564:	f04f 0801 	mov.w	r8, #1
 8013568:	f7ed fae0 	bl	8000b2c <__aeabi_dcmpge>
 801356c:	b900      	cbnz	r0, 8013570 <GUI_Touch_Processing+0x29d8>
 801356e:	4680      	mov	r8, r0
 8013570:	2200      	movs	r2, #0
 8013572:	4b54      	ldr	r3, [pc, #336]	; (80136c4 <GUI_Touch_Processing+0x2b2c>)
 8013574:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013578:	fa5f f888 	uxtb.w	r8, r8
 801357c:	f04f 0701 	mov.w	r7, #1
 8013580:	f7ed faca 	bl	8000b18 <__aeabi_dcmple>
 8013584:	b900      	cbnz	r0, 8013588 <GUI_Touch_Processing+0x29f0>
 8013586:	4607      	mov	r7, r0
 8013588:	a341      	add	r3, pc, #260	; (adr r3, 8013690 <GUI_Touch_Processing+0x2af8>)
 801358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358e:	4620      	mov	r0, r4
 8013590:	4629      	mov	r1, r5
 8013592:	b2ff      	uxtb	r7, r7
 8013594:	f04f 0601 	mov.w	r6, #1
 8013598:	f7ed fac8 	bl	8000b2c <__aeabi_dcmpge>
 801359c:	b900      	cbnz	r0, 80135a0 <GUI_Touch_Processing+0x2a08>
 801359e:	4606      	mov	r6, r0
 80135a0:	a33d      	add	r3, pc, #244	; (adr r3, 8013698 <GUI_Touch_Processing+0x2b00>)
 80135a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a6:	4620      	mov	r0, r4
 80135a8:	4629      	mov	r1, r5
 80135aa:	f04f 0901 	mov.w	r9, #1
 80135ae:	f7ed fab3 	bl	8000b18 <__aeabi_dcmple>
 80135b2:	b900      	cbnz	r0, 80135b6 <GUI_Touch_Processing+0x2a1e>
 80135b4:	4681      	mov	r9, r0
 80135b6:	ea06 0609 	and.w	r6, r6, r9
 80135ba:	ea18 0f06 	tst.w	r8, r6
 80135be:	d005      	beq.n	80135cc <GUI_Touch_Processing+0x2a34>
 80135c0:	b127      	cbz	r7, 80135cc <GUI_Touch_Processing+0x2a34>
					GUI_screen_state = GraphSet1_Screen;
 80135c2:	230c      	movs	r3, #12
 80135c4:	f88b 3000 	strb.w	r3, [fp]
 80135c8:	f7fd bb74 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //PPF_Bands
 80135cc:	2200      	movs	r2, #0
 80135ce:	4b3e      	ldr	r3, [pc, #248]	; (80136c8 <GUI_Touch_Processing+0x2b30>)
 80135d0:	4620      	mov	r0, r4
 80135d2:	4629      	mov	r1, r5
 80135d4:	f04f 0601 	mov.w	r6, #1
 80135d8:	f7ed faa8 	bl	8000b2c <__aeabi_dcmpge>
 80135dc:	b900      	cbnz	r0, 80135e0 <GUI_Touch_Processing+0x2a48>
 80135de:	4606      	mov	r6, r0
 80135e0:	a32f      	add	r3, pc, #188	; (adr r3, 80136a0 <GUI_Touch_Processing+0x2b08>)
 80135e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e6:	4620      	mov	r0, r4
 80135e8:	4629      	mov	r1, r5
 80135ea:	f04f 0901 	mov.w	r9, #1
 80135ee:	f7ed fa93 	bl	8000b18 <__aeabi_dcmple>
 80135f2:	b900      	cbnz	r0, 80135f6 <GUI_Touch_Processing+0x2a5e>
 80135f4:	4681      	mov	r9, r0
 80135f6:	ea06 0609 	and.w	r6, r6, r9
 80135fa:	a32b      	add	r3, pc, #172	; (adr r3, 80136a8 <GUI_Touch_Processing+0x2b10>)
 80135fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013600:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013604:	b2f6      	uxtb	r6, r6
 8013606:	f04f 0901 	mov.w	r9, #1
 801360a:	f7ed fa8f 	bl	8000b2c <__aeabi_dcmpge>
 801360e:	b900      	cbnz	r0, 8013612 <GUI_Touch_Processing+0x2a7a>
 8013610:	4681      	mov	r9, r0
 8013612:	a319      	add	r3, pc, #100	; (adr r3, 8013678 <GUI_Touch_Processing+0x2ae0>)
 8013614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013618:	e9dd 0100 	ldrd	r0, r1, [sp]
 801361c:	f04f 0a01 	mov.w	sl, #1
 8013620:	f7ed fa7a 	bl	8000b18 <__aeabi_dcmple>
 8013624:	b900      	cbnz	r0, 8013628 <GUI_Touch_Processing+0x2a90>
 8013626:	4682      	mov	sl, r0
 8013628:	ea09 090a 	and.w	r9, r9, sl
 801362c:	f019 0f01 	tst.w	r9, #1
 8013630:	d056      	beq.n	80136e0 <GUI_Touch_Processing+0x2b48>
 8013632:	2e00      	cmp	r6, #0
 8013634:	d054      	beq.n	80136e0 <GUI_Touch_Processing+0x2b48>
					Graph_Field ^= EbEr_graph;
 8013636:	4b25      	ldr	r3, [pc, #148]	; (80136cc <GUI_Touch_Processing+0x2b34>)
 8013638:	781a      	ldrb	r2, [r3, #0]
 801363a:	f082 0202 	eor.w	r2, r2, #2
 801363e:	701a      	strb	r2, [r3, #0]
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 8013640:	2146      	movs	r1, #70	; 0x46
 8013642:	f002 0202 	and.w	r2, r2, #2
 8013646:	20c8      	movs	r0, #200	; 0xc8
 8013648:	f001 fe0a 	bl	8015260 <GUI_CheckBox>
 801364c:	f7fd bb32 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8013650:	00000000 	.word	0x00000000
 8013654:	40623800 	.word	0x40623800
 8013658:	99999999 	.word	0x99999999
 801365c:	40720d99 	.word	0x40720d99
 8013660:	33333333 	.word	0x33333333
 8013664:	40353333 	.word	0x40353333
 8013668:	00000000 	.word	0x00000000
 801366c:	4084b400 	.word	0x4084b400
 8013670:	00000000 	.word	0x00000000
 8013674:	4073e000 	.word	0x4073e000
 8013678:	99999999 	.word	0x99999999
 801367c:	40748999 	.word	0x40748999
 8013680:	99999999 	.word	0x99999999
 8013684:	407cd199 	.word	0x407cd199
 8013688:	99999999 	.word	0x99999999
 801368c:	4091a399 	.word	0x4091a399
 8013690:	33333333 	.word	0x33333333
 8013694:	407aff33 	.word	0x407aff33
 8013698:	66666666 	.word	0x66666666
 801369c:	4081f866 	.word	0x4081f866
 80136a0:	cccccccd 	.word	0xcccccccd
 80136a4:	408508cc 	.word	0x408508cc
 80136a8:	00000000 	.word	0x00000000
 80136ac:	40673000 	.word	0x40673000
 80136b0:	200052a6 	.word	0x200052a6
 80136b4:	2008c315 	.word	0x2008c315
 80136b8:	406a8000 	.word	0x406a8000
 80136bc:	2000527b 	.word	0x2000527b
 80136c0:	2000022a 	.word	0x2000022a
 80136c4:	4093e000 	.word	0x4093e000
 80136c8:	40809000 	.word	0x40809000
 80136cc:	2000527a 	.word	0x2000527a
 80136d0:	33333333 	.word	0x33333333
 80136d4:	40867133 	.word	0x40867133
 80136d8:	33333333 	.word	0x33333333
 80136dc:	40053333 	.word	0x40053333
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //PPF_Bands
 80136e0:	a3d1      	add	r3, pc, #836	; (adr r3, 8013a28 <GUI_Touch_Processing+0x2e90>)
 80136e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136ea:	f04f 0901 	mov.w	r9, #1
 80136ee:	f7ed fa1d 	bl	8000b2c <__aeabi_dcmpge>
 80136f2:	b900      	cbnz	r0, 80136f6 <GUI_Touch_Processing+0x2b5e>
 80136f4:	4681      	mov	r9, r0
 80136f6:	a3ce      	add	r3, pc, #824	; (adr r3, 8013a30 <GUI_Touch_Processing+0x2e98>)
 80136f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013700:	f04f 0a01 	mov.w	sl, #1
 8013704:	f7ed fa08 	bl	8000b18 <__aeabi_dcmple>
 8013708:	b900      	cbnz	r0, 801370c <GUI_Touch_Processing+0x2b74>
 801370a:	4682      	mov	sl, r0
 801370c:	ea09 090a 	and.w	r9, r9, sl
 8013710:	f019 0f01 	tst.w	r9, #1
 8013714:	d00d      	beq.n	8013732 <GUI_Touch_Processing+0x2b9a>
 8013716:	b166      	cbz	r6, 8013732 <GUI_Touch_Processing+0x2b9a>
					Graph_Field ^= V_lambda;
 8013718:	4bb5      	ldr	r3, [pc, #724]	; (80139f0 <GUI_Touch_Processing+0x2e58>)
 801371a:	781a      	ldrb	r2, [r3, #0]
 801371c:	f082 0204 	eor.w	r2, r2, #4
 8013720:	701a      	strb	r2, [r3, #0]
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 8013722:	2185      	movs	r1, #133	; 0x85
 8013724:	f002 0204 	and.w	r2, r2, #4
 8013728:	20c8      	movs	r0, #200	; 0xc8
 801372a:	f001 fd99 	bl	8015260 <GUI_CheckBox>
 801372e:	f7fd bac1 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8013732:	a397      	add	r3, pc, #604	; (adr r3, 8013990 <GUI_Touch_Processing+0x2df8>)
 8013734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013738:	4620      	mov	r0, r4
 801373a:	4629      	mov	r1, r5
 801373c:	ea08 0607 	and.w	r6, r8, r7
 8013740:	f04f 0901 	mov.w	r9, #1
 8013744:	f7ed f9f2 	bl	8000b2c <__aeabi_dcmpge>
 8013748:	b900      	cbnz	r0, 801374c <GUI_Touch_Processing+0x2bb4>
 801374a:	4681      	mov	r9, r0
 801374c:	a392      	add	r3, pc, #584	; (adr r3, 8013998 <GUI_Touch_Processing+0x2e00>)
 801374e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013752:	4620      	mov	r0, r4
 8013754:	4629      	mov	r1, r5
 8013756:	f04f 0a01 	mov.w	sl, #1
 801375a:	f7ed f9dd 	bl	8000b18 <__aeabi_dcmple>
 801375e:	b900      	cbnz	r0, 8013762 <GUI_Touch_Processing+0x2bca>
 8013760:	4682      	mov	sl, r0
 8013762:	ea09 030a 	and.w	r3, r9, sl
 8013766:	07da      	lsls	r2, r3, #31
 8013768:	d502      	bpl.n	8013770 <GUI_Touch_Processing+0x2bd8>
 801376a:	2e00      	cmp	r6, #0
 801376c:	f47e aa5f 	bne.w	8011c2e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8013770:	a38b      	add	r3, pc, #556	; (adr r3, 80139a0 <GUI_Touch_Processing+0x2e08>)
 8013772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013776:	4620      	mov	r0, r4
 8013778:	4629      	mov	r1, r5
 801377a:	f04f 0901 	mov.w	r9, #1
 801377e:	f7ed f9d5 	bl	8000b2c <__aeabi_dcmpge>
 8013782:	b900      	cbnz	r0, 8013786 <GUI_Touch_Processing+0x2bee>
 8013784:	4681      	mov	r9, r0
 8013786:	a388      	add	r3, pc, #544	; (adr r3, 80139a8 <GUI_Touch_Processing+0x2e10>)
 8013788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801378c:	4620      	mov	r0, r4
 801378e:	4629      	mov	r1, r5
 8013790:	f04f 0a01 	mov.w	sl, #1
 8013794:	f7ed f9c0 	bl	8000b18 <__aeabi_dcmple>
 8013798:	b900      	cbnz	r0, 801379c <GUI_Touch_Processing+0x2c04>
 801379a:	4682      	mov	sl, r0
 801379c:	ea09 030a 	and.w	r3, r9, sl
 80137a0:	07db      	lsls	r3, r3, #31
 80137a2:	f140 842f 	bpl.w	8014004 <GUI_Touch_Processing+0x346c>
 80137a6:	2e00      	cmp	r6, #0
 80137a8:	f000 842c 	beq.w	8014004 <GUI_Touch_Processing+0x346c>
					WriteSDFLASH_t(sdfile_cnt);
 80137ac:	4b91      	ldr	r3, [pc, #580]	; (80139f4 <GUI_Touch_Processing+0x2e5c>)
 80137ae:	2100      	movs	r1, #0
 80137b0:	8818      	ldrh	r0, [r3, #0]
 80137b2:	f008 fb0f 	bl	801bdd4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80137b6:	4b90      	ldr	r3, [pc, #576]	; (80139f8 <GUI_Touch_Processing+0x2e60>)
 80137b8:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80137ba:	1e5a      	subs	r2, r3, #1
 80137bc:	2a05      	cmp	r2, #5
 80137be:	d804      	bhi.n	80137ca <GUI_Touch_Processing+0x2c32>
 80137c0:	e8df f002 	tbb	[pc, r2]
 80137c4:	0c030307 	.word	0x0c030307
 80137c8:	1116      	.short	0x1116
					GUI_screen_state = Prev_Inf_Screen;
 80137ca:	f88b 3000 	strb.w	r3, [fp]
 80137ce:	f7fd ba71 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80137d2:	2301      	movs	r3, #1
 80137d4:	f88b 3000 	strb.w	r3, [fp]
 80137d8:	f7fd ba6c 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80137dc:	2304      	movs	r3, #4
 80137de:	f88b 3000 	strb.w	r3, [fp]
 80137e2:	f7fd ba67 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80137e6:	2306      	movs	r3, #6
 80137e8:	f88b 3000 	strb.w	r3, [fp]
 80137ec:	f7fd ba62 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80137f0:	2305      	movs	r3, #5
 80137f2:	f88b 3000 	strb.w	r3, [fp]
 80137f6:	f7fd ba5d 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 80137fa:	4b80      	ldr	r3, [pc, #512]	; (80139fc <GUI_Touch_Processing+0x2e64>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 80137fc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8013800:	220e      	movs	r2, #14
 8013802:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8013804:	f7ec fea6 	bl	8000554 <__aeabi_i2d>
 8013808:	4604      	mov	r4, r0
 801380a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801380e:	460d      	mov	r5, r1
 8013810:	f7ec fea0 	bl	8000554 <__aeabi_i2d>
 8013814:	a366      	add	r3, pc, #408	; (adr r3, 80139b0 <GUI_Touch_Processing+0x2e18>)
 8013816:	e9d3 2300 	ldrd	r2, r3, [r3]
 801381a:	e9cd 0100 	strd	r0, r1, [sp]
 801381e:	f04f 0a01 	mov.w	sl, #1
 8013822:	f7ed f983 	bl	8000b2c <__aeabi_dcmpge>
 8013826:	b900      	cbnz	r0, 801382a <GUI_Touch_Processing+0x2c92>
 8013828:	4682      	mov	sl, r0
 801382a:	2200      	movs	r2, #0
 801382c:	4b74      	ldr	r3, [pc, #464]	; (8013a00 <GUI_Touch_Processing+0x2e68>)
 801382e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013832:	fa5f fa8a 	uxtb.w	sl, sl
 8013836:	f04f 0601 	mov.w	r6, #1
 801383a:	f7ed f96d 	bl	8000b18 <__aeabi_dcmple>
 801383e:	b900      	cbnz	r0, 8013842 <GUI_Touch_Processing+0x2caa>
 8013840:	4606      	mov	r6, r0
 8013842:	b2f3      	uxtb	r3, r6
 8013844:	9303      	str	r3, [sp, #12]
 8013846:	4620      	mov	r0, r4
 8013848:	a35b      	add	r3, pc, #364	; (adr r3, 80139b8 <GUI_Touch_Processing+0x2e20>)
 801384a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801384e:	4629      	mov	r1, r5
 8013850:	f04f 0601 	mov.w	r6, #1
 8013854:	f7ed f96a 	bl	8000b2c <__aeabi_dcmpge>
 8013858:	b900      	cbnz	r0, 801385c <GUI_Touch_Processing+0x2cc4>
 801385a:	4606      	mov	r6, r0
 801385c:	a34c      	add	r3, pc, #304	; (adr r3, 8013990 <GUI_Touch_Processing+0x2df8>)
 801385e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013862:	4620      	mov	r0, r4
 8013864:	4629      	mov	r1, r5
 8013866:	f04f 0701 	mov.w	r7, #1
 801386a:	f7ed f955 	bl	8000b18 <__aeabi_dcmple>
 801386e:	b900      	cbnz	r0, 8013872 <GUI_Touch_Processing+0x2cda>
 8013870:	4607      	mov	r7, r0
 8013872:	403e      	ands	r6, r7
 8013874:	ea1a 0f06 	tst.w	sl, r6
 8013878:	d006      	beq.n	8013888 <GUI_Touch_Processing+0x2cf0>
 801387a:	9b03      	ldr	r3, [sp, #12]
 801387c:	b123      	cbz	r3, 8013888 <GUI_Touch_Processing+0x2cf0>
					GUI_screen_state = ColorSet2_Screen;
 801387e:	230f      	movs	r3, #15
 8013880:	f88b 3000 	strb.w	r3, [fp]
 8013884:	f7fd ba16 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 8013888:	a34d      	add	r3, pc, #308	; (adr r3, 80139c0 <GUI_Touch_Processing+0x2e28>)
 801388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801388e:	4620      	mov	r0, r4
 8013890:	4629      	mov	r1, r5
 8013892:	f04f 0601 	mov.w	r6, #1
 8013896:	f7ed f949 	bl	8000b2c <__aeabi_dcmpge>
 801389a:	b900      	cbnz	r0, 801389e <GUI_Touch_Processing+0x2d06>
 801389c:	4606      	mov	r6, r0
 801389e:	a34a      	add	r3, pc, #296	; (adr r3, 80139c8 <GUI_Touch_Processing+0x2e30>)
 80138a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138a4:	4620      	mov	r0, r4
 80138a6:	4629      	mov	r1, r5
 80138a8:	f04f 0701 	mov.w	r7, #1
 80138ac:	f7ed f934 	bl	8000b18 <__aeabi_dcmple>
 80138b0:	b900      	cbnz	r0, 80138b4 <GUI_Touch_Processing+0x2d1c>
 80138b2:	4607      	mov	r7, r0
 80138b4:	403e      	ands	r6, r7
 80138b6:	a346      	add	r3, pc, #280	; (adr r3, 80139d0 <GUI_Touch_Processing+0x2e38>)
 80138b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138c0:	b2f6      	uxtb	r6, r6
 80138c2:	f04f 0701 	mov.w	r7, #1
 80138c6:	f7ed f931 	bl	8000b2c <__aeabi_dcmpge>
 80138ca:	b900      	cbnz	r0, 80138ce <GUI_Touch_Processing+0x2d36>
 80138cc:	4607      	mov	r7, r0
 80138ce:	a342      	add	r3, pc, #264	; (adr r3, 80139d8 <GUI_Touch_Processing+0x2e40>)
 80138d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138d8:	f04f 0801 	mov.w	r8, #1
 80138dc:	f7ed f91c 	bl	8000b18 <__aeabi_dcmple>
 80138e0:	b900      	cbnz	r0, 80138e4 <GUI_Touch_Processing+0x2d4c>
 80138e2:	4680      	mov	r8, r0
 80138e4:	ea07 0708 	and.w	r7, r7, r8
 80138e8:	07ff      	lsls	r7, r7, #31
 80138ea:	d526      	bpl.n	801393a <GUI_Touch_Processing+0x2da2>
 80138ec:	b32e      	cbz	r6, 801393a <GUI_Touch_Processing+0x2da2>
					Mode_EL = !Mode_EL;
 80138ee:	4c45      	ldr	r4, [pc, #276]	; (8013a04 <GUI_Touch_Processing+0x2e6c>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80138f0:	4b45      	ldr	r3, [pc, #276]	; (8013a08 <GUI_Touch_Processing+0x2e70>)
					Mode_EL = !Mode_EL;
 80138f2:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80138f4:	4845      	ldr	r0, [pc, #276]	; (8013a0c <GUI_Touch_Processing+0x2e74>)
					Mode_EL = !Mode_EL;
 80138f6:	2a00      	cmp	r2, #0
 80138f8:	bf0c      	ite	eq
 80138fa:	2201      	moveq	r2, #1
 80138fc:	2200      	movne	r2, #0
 80138fe:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8013900:	bf18      	it	ne
 8013902:	4618      	movne	r0, r3
 8013904:	4a42      	ldr	r2, [pc, #264]	; (8013a10 <GUI_Touch_Processing+0x2e78>)
 8013906:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801390a:	f7fb f995 	bl	800ec38 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 801390e:	7822      	ldrb	r2, [r4, #0]
 8013910:	4b40      	ldr	r3, [pc, #256]	; (8013a14 <GUI_Touch_Processing+0x2e7c>)
 8013912:	b982      	cbnz	r2, 8013936 <GUI_Touch_Processing+0x2d9e>
 8013914:	4a40      	ldr	r2, [pc, #256]	; (8013a18 <GUI_Touch_Processing+0x2e80>)
 8013916:	edd2 0a00 	vldr	s1, [r2]
 801391a:	ed93 0a00 	vldr	s0, [r3]
 801391e:	f008 f9cf 	bl	801bcc0 <Rabs_calc_Factor2_Settings_change>
 8013922:	4b3e      	ldr	r3, [pc, #248]	; (8013a1c <GUI_Touch_Processing+0x2e84>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8013924:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8013926:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 801392a:	21ca      	movs	r1, #202	; 0xca
 801392c:	20b6      	movs	r0, #182	; 0xb6
 801392e:	f001 fd61 	bl	80153f4 <GUI_Switch_ButtonActive>
 8013932:	f7fd b9bf 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8013936:	4a3a      	ldr	r2, [pc, #232]	; (8013a20 <GUI_Touch_Processing+0x2e88>)
 8013938:	e7ed      	b.n	8013916 <GUI_Touch_Processing+0x2d7e>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 801393a:	a329      	add	r3, pc, #164	; (adr r3, 80139e0 <GUI_Touch_Processing+0x2e48>)
 801393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013940:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013944:	f04f 0701 	mov.w	r7, #1
 8013948:	f7ed f8f0 	bl	8000b2c <__aeabi_dcmpge>
 801394c:	b900      	cbnz	r0, 8013950 <GUI_Touch_Processing+0x2db8>
 801394e:	4607      	mov	r7, r0
 8013950:	a325      	add	r3, pc, #148	; (adr r3, 80139e8 <GUI_Touch_Processing+0x2e50>)
 8013952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013956:	e9dd 0100 	ldrd	r0, r1, [sp]
 801395a:	f04f 0801 	mov.w	r8, #1
 801395e:	f7ed f8db 	bl	8000b18 <__aeabi_dcmple>
 8013962:	b900      	cbnz	r0, 8013966 <GUI_Touch_Processing+0x2dce>
 8013964:	4680      	mov	r8, r0
 8013966:	ea07 0708 	and.w	r7, r7, r8
 801396a:	07f8      	lsls	r0, r7, #31
 801396c:	d564      	bpl.n	8013a38 <GUI_Touch_Processing+0x2ea0>
 801396e:	2e00      	cmp	r6, #0
 8013970:	d062      	beq.n	8013a38 <GUI_Touch_Processing+0x2ea0>
					Bluetooth = !Bluetooth;
 8013972:	4b2c      	ldr	r3, [pc, #176]	; (8013a24 <GUI_Touch_Processing+0x2e8c>)
 8013974:	781a      	ldrb	r2, [r3, #0]
 8013976:	fab2 f282 	clz	r2, r2
 801397a:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 801397c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8013980:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8013982:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8013984:	f001 fcdc 	bl	8015340 <GUI_Switch_Button>
					GUI_Up_Panel();
 8013988:	f7fb fdce 	bl	800f528 <GUI_Up_Panel>
 801398c:	f7fd b992 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8013990:	66666666 	.word	0x66666666
 8013994:	4081f866 	.word	0x4081f866
 8013998:	33333333 	.word	0x33333333
 801399c:	40867133 	.word	0x40867133
 80139a0:	33333333 	.word	0x33333333
 80139a4:	40053333 	.word	0x40053333
 80139a8:	00000000 	.word	0x00000000
 80139ac:	40623800 	.word	0x40623800
 80139b0:	99999999 	.word	0x99999999
 80139b4:	4091a399 	.word	0x4091a399
 80139b8:	33333333 	.word	0x33333333
 80139bc:	407aff33 	.word	0x407aff33
 80139c0:	cccccccd 	.word	0xcccccccd
 80139c4:	407e24cc 	.word	0x407e24cc
 80139c8:	33333333 	.word	0x33333333
 80139cc:	40838b33 	.word	0x40838b33
 80139d0:	66666666 	.word	0x66666666
 80139d4:	4080ba66 	.word	0x4080ba66
 80139d8:	33333333 	.word	0x33333333
 80139dc:	40853333 	.word	0x40853333
 80139e0:	99999999 	.word	0x99999999
 80139e4:	40863199 	.word	0x40863199
 80139e8:	66666666 	.word	0x66666666
 80139ec:	408aaa66 	.word	0x408aaa66
 80139f0:	2000527a 	.word	0x2000527a
 80139f4:	200052a6 	.word	0x200052a6
 80139f8:	2008c315 	.word	0x2008c315
 80139fc:	2000022a 	.word	0x2000022a
 8013a00:	4093e000 	.word	0x4093e000
 8013a04:	20000a48 	.word	0x20000a48
 8013a08:	08101838 	.word	0x08101838
 8013a0c:	08100838 	.word	0x08100838
 8013a10:	2004d1e8 	.word	0x2004d1e8
 8013a14:	200055d4 	.word	0x200055d4
 8013a18:	200055d0 	.word	0x200055d0
 8013a1c:	200055dc 	.word	0x200055dc
 8013a20:	200055cc 	.word	0x200055cc
 8013a24:	2008c31a 	.word	0x2008c31a
 8013a28:	33333333 	.word	0x33333333
 8013a2c:	40760733 	.word	0x40760733
 8013a30:	cccccccd 	.word	0xcccccccd
 8013a34:	407ef8cc 	.word	0x407ef8cc
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 8013a38:	a3db      	add	r3, pc, #876	; (adr r3, 8013da8 <GUI_Touch_Processing+0x3210>)
 8013a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a3e:	4620      	mov	r0, r4
 8013a40:	4629      	mov	r1, r5
 8013a42:	f04f 0701 	mov.w	r7, #1
 8013a46:	f7ed f871 	bl	8000b2c <__aeabi_dcmpge>
 8013a4a:	b900      	cbnz	r0, 8013a4e <GUI_Touch_Processing+0x2eb6>
 8013a4c:	4607      	mov	r7, r0
 8013a4e:	a3d8      	add	r3, pc, #864	; (adr r3, 8013db0 <GUI_Touch_Processing+0x3218>)
 8013a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a54:	4620      	mov	r0, r4
 8013a56:	4629      	mov	r1, r5
 8013a58:	f04f 0801 	mov.w	r8, #1
 8013a5c:	f7ed f85c 	bl	8000b18 <__aeabi_dcmple>
 8013a60:	b900      	cbnz	r0, 8013a64 <GUI_Touch_Processing+0x2ecc>
 8013a62:	4680      	mov	r8, r0
 8013a64:	ea07 0708 	and.w	r7, r7, r8
 8013a68:	a3d3      	add	r3, pc, #844	; (adr r3, 8013db8 <GUI_Touch_Processing+0x3220>)
 8013a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a72:	b2ff      	uxtb	r7, r7
 8013a74:	f04f 0801 	mov.w	r8, #1
 8013a78:	f7ed f858 	bl	8000b2c <__aeabi_dcmpge>
 8013a7c:	b900      	cbnz	r0, 8013a80 <GUI_Touch_Processing+0x2ee8>
 8013a7e:	4680      	mov	r8, r0
 8013a80:	a3cf      	add	r3, pc, #828	; (adr r3, 8013dc0 <GUI_Touch_Processing+0x3228>)
 8013a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a8a:	f04f 0901 	mov.w	r9, #1
 8013a8e:	f7ed f843 	bl	8000b18 <__aeabi_dcmple>
 8013a92:	b900      	cbnz	r0, 8013a96 <GUI_Touch_Processing+0x2efe>
 8013a94:	4681      	mov	r9, r0
 8013a96:	ea08 0809 	and.w	r8, r8, r9
 8013a9a:	f018 0f01 	tst.w	r8, #1
 8013a9e:	d002      	beq.n	8013aa6 <GUI_Touch_Processing+0x2f0e>
 8013aa0:	2f00      	cmp	r7, #0
 8013aa2:	f47f ad48 	bne.w	8013536 <GUI_Touch_Processing+0x299e>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //Color_CIE_xy
 8013aa6:	a3c8      	add	r3, pc, #800	; (adr r3, 8013dc8 <GUI_Touch_Processing+0x3230>)
 8013aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ab0:	f04f 0801 	mov.w	r8, #1
 8013ab4:	f7ed f83a 	bl	8000b2c <__aeabi_dcmpge>
 8013ab8:	b900      	cbnz	r0, 8013abc <GUI_Touch_Processing+0x2f24>
 8013aba:	4680      	mov	r8, r0
 8013abc:	a3c4      	add	r3, pc, #784	; (adr r3, 8013dd0 <GUI_Touch_Processing+0x3238>)
 8013abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ac2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ac6:	f04f 0901 	mov.w	r9, #1
 8013aca:	f7ed f825 	bl	8000b18 <__aeabi_dcmple>
 8013ace:	b900      	cbnz	r0, 8013ad2 <GUI_Touch_Processing+0x2f3a>
 8013ad0:	4681      	mov	r9, r0
 8013ad2:	ea08 0809 	and.w	r8, r8, r9
 8013ad6:	f018 0f01 	tst.w	r8, #1
 8013ada:	d00f      	beq.n	8013afc <GUI_Touch_Processing+0x2f64>
 8013adc:	b176      	cbz	r6, 8013afc <GUI_Touch_Processing+0x2f64>
					if(!(Color_Field&Color_CIE_xy))
 8013ade:	4aa4      	ldr	r2, [pc, #656]	; (8013d70 <GUI_Touch_Processing+0x31d8>)
 8013ae0:	7813      	ldrb	r3, [r2, #0]
 8013ae2:	07d9      	lsls	r1, r3, #31
 8013ae4:	f53d a8e6 	bmi.w	8010cb4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 327, Color_Field|=Color_CIE_xy, 0x01);
 8013ae8:	2301      	movs	r3, #1
 8013aea:	7013      	strb	r3, [r2, #0]
 8013aec:	f240 1147 	movw	r1, #327	; 0x147
 8013af0:	461a      	mov	r2, r3
 8013af2:	20c8      	movs	r0, #200	; 0xc8
 8013af4:	f001 fbf5 	bl	80152e2 <GUI_RadioBox>
 8013af8:	f7fd b8dc 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8013afc:	9b03      	ldr	r3, [sp, #12]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8013afe:	4620      	mov	r0, r4
 8013b00:	ea0a 0603 	and.w	r6, sl, r3
 8013b04:	4629      	mov	r1, r5
 8013b06:	a38a      	add	r3, pc, #552	; (adr r3, 8013d30 <GUI_Touch_Processing+0x3198>)
 8013b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b0c:	f04f 0801 	mov.w	r8, #1
 8013b10:	f7ed f80c 	bl	8000b2c <__aeabi_dcmpge>
 8013b14:	b900      	cbnz	r0, 8013b18 <GUI_Touch_Processing+0x2f80>
 8013b16:	4680      	mov	r8, r0
 8013b18:	a387      	add	r3, pc, #540	; (adr r3, 8013d38 <GUI_Touch_Processing+0x31a0>)
 8013b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b1e:	4620      	mov	r0, r4
 8013b20:	4629      	mov	r1, r5
 8013b22:	f04f 0901 	mov.w	r9, #1
 8013b26:	f7ec fff7 	bl	8000b18 <__aeabi_dcmple>
 8013b2a:	b900      	cbnz	r0, 8013b2e <GUI_Touch_Processing+0x2f96>
 8013b2c:	4681      	mov	r9, r0
 8013b2e:	ea08 0309 	and.w	r3, r8, r9
 8013b32:	07da      	lsls	r2, r3, #31
 8013b34:	d502      	bpl.n	8013b3c <GUI_Touch_Processing+0x2fa4>
 8013b36:	2e00      	cmp	r6, #0
 8013b38:	f47e a879 	bne.w	8011c2e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8013b3c:	a380      	add	r3, pc, #512	; (adr r3, 8013d40 <GUI_Touch_Processing+0x31a8>)
 8013b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b42:	4620      	mov	r0, r4
 8013b44:	4629      	mov	r1, r5
 8013b46:	f04f 0801 	mov.w	r8, #1
 8013b4a:	f7ec ffef 	bl	8000b2c <__aeabi_dcmpge>
 8013b4e:	b900      	cbnz	r0, 8013b52 <GUI_Touch_Processing+0x2fba>
 8013b50:	4680      	mov	r8, r0
 8013b52:	a37d      	add	r3, pc, #500	; (adr r3, 8013d48 <GUI_Touch_Processing+0x31b0>)
 8013b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b58:	4620      	mov	r0, r4
 8013b5a:	4629      	mov	r1, r5
 8013b5c:	f04f 0901 	mov.w	r9, #1
 8013b60:	f7ec ffda 	bl	8000b18 <__aeabi_dcmple>
 8013b64:	b900      	cbnz	r0, 8013b68 <GUI_Touch_Processing+0x2fd0>
 8013b66:	4681      	mov	r9, r0
 8013b68:	ea08 0309 	and.w	r3, r8, r9
 8013b6c:	07db      	lsls	r3, r3, #31
 8013b6e:	d55a      	bpl.n	8013c26 <GUI_Touch_Processing+0x308e>
 8013b70:	2e00      	cmp	r6, #0
 8013b72:	d058      	beq.n	8013c26 <GUI_Touch_Processing+0x308e>
					if(preColor_Field != Color_Field)
 8013b74:	4c7e      	ldr	r4, [pc, #504]	; (8013d70 <GUI_Touch_Processing+0x31d8>)
 8013b76:	497f      	ldr	r1, [pc, #508]	; (8013d74 <GUI_Touch_Processing+0x31dc>)
 8013b78:	7823      	ldrb	r3, [r4, #0]
 8013b7a:	7809      	ldrb	r1, [r1, #0]
 8013b7c:	4299      	cmp	r1, r3
 8013b7e:	d01f      	beq.n	8013bc0 <GUI_Touch_Processing+0x3028>
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8013b80:	07dd      	lsls	r5, r3, #31
 8013b82:	d52d      	bpl.n	8013be0 <GUI_Touch_Processing+0x3048>
 8013b84:	4b7c      	ldr	r3, [pc, #496]	; (8013d78 <GUI_Touch_Processing+0x31e0>)
 8013b86:	487d      	ldr	r0, [pc, #500]	; (8013d7c <GUI_Touch_Processing+0x31e4>)
 8013b88:	781b      	ldrb	r3, [r3, #0]
 8013b8a:	f013 0f01 	tst.w	r3, #1
 8013b8e:	bf18      	it	ne
 8013b90:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8013b94:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8013b98:	f008 f862 	bl	801bc60 <Image_load>
						Locus.pData = (uint16_t *)bmp;
 8013b9c:	4b78      	ldr	r3, [pc, #480]	; (8013d80 <GUI_Touch_Processing+0x31e8>)
 8013b9e:	4a79      	ldr	r2, [pc, #484]	; (8013d84 <GUI_Touch_Processing+0x31ec>)
 8013ba0:	605a      	str	r2, [r3, #4]
						Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8013ba2:	7822      	ldrb	r2, [r4, #0]
 8013ba4:	f002 0101 	and.w	r1, r2, #1
 8013ba8:	2900      	cmp	r1, #0
 8013baa:	bf0c      	ite	eq
 8013bac:	21fa      	moveq	r1, #250	; 0xfa
 8013bae:	21d8      	movne	r1, #216	; 0xd8
 8013bb0:	8019      	strh	r1, [r3, #0]
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8013bb2:	d123      	bne.n	8013bfc <GUI_Touch_Processing+0x3064>
 8013bb4:	f012 0f04 	tst.w	r2, #4
 8013bb8:	bf0c      	ite	eq
 8013bba:	22fa      	moveq	r2, #250	; 0xfa
 8013bbc:	22ea      	movne	r2, #234	; 0xea
 8013bbe:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 8013bc0:	4b71      	ldr	r3, [pc, #452]	; (8013d88 <GUI_Touch_Processing+0x31f0>)
 8013bc2:	2100      	movs	r1, #0
 8013bc4:	8818      	ldrh	r0, [r3, #0]
 8013bc6:	f008 f905 	bl	801bdd4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8013bca:	4b70      	ldr	r3, [pc, #448]	; (8013d8c <GUI_Touch_Processing+0x31f4>)
 8013bcc:	781a      	ldrb	r2, [r3, #0]
 8013bce:	4b70      	ldr	r3, [pc, #448]	; (8013d90 <GUI_Touch_Processing+0x31f8>)
					switch (Prev_Inf_Screen){
 8013bd0:	1e51      	subs	r1, r2, #1
 8013bd2:	2905      	cmp	r1, #5
 8013bd4:	d814      	bhi.n	8013c00 <GUI_Touch_Processing+0x3068>
 8013bd6:	e8df f001 	tbb	[pc, r1]
 8013bda:	1316      	.short	0x1316
 8013bdc:	1e221a13 	.word	0x1e221a13
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8013be0:	f003 0304 	and.w	r3, r3, #4
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	4b6b      	ldr	r3, [pc, #428]	; (8013d94 <GUI_Touch_Processing+0x31fc>)
 8013be8:	486b      	ldr	r0, [pc, #428]	; (8013d98 <GUI_Touch_Processing+0x3200>)
 8013bea:	bf18      	it	ne
 8013bec:	4618      	movne	r0, r3
 8013bee:	f24e 4384 	movw	r3, #58500	; 0xe484
 8013bf2:	f24f 4124 	movw	r1, #62500	; 0xf424
 8013bf6:	bf18      	it	ne
 8013bf8:	4619      	movne	r1, r3
 8013bfa:	e7cd      	b.n	8013b98 <GUI_Touch_Processing+0x3000>
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8013bfc:	22fa      	movs	r2, #250	; 0xfa
 8013bfe:	e7de      	b.n	8013bbe <GUI_Touch_Processing+0x3026>
					GUI_screen_state = Prev_Inf_Screen;
 8013c00:	701a      	strb	r2, [r3, #0]
 8013c02:	f7fd b857 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8013c06:	2201      	movs	r2, #1
 8013c08:	701a      	strb	r2, [r3, #0]
 8013c0a:	f7fd b853 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8013c0e:	2204      	movs	r2, #4
 8013c10:	701a      	strb	r2, [r3, #0]
 8013c12:	f7fd b84f 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8013c16:	2206      	movs	r2, #6
 8013c18:	701a      	strb	r2, [r3, #0]
 8013c1a:	f7fd b84b 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8013c1e:	2205      	movs	r2, #5
 8013c20:	701a      	strb	r2, [r3, #0]
 8013c22:	f7fd b847 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8013c26:	a348      	add	r3, pc, #288	; (adr r3, 8013d48 <GUI_Touch_Processing+0x31b0>)
 8013c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c2c:	4620      	mov	r0, r4
 8013c2e:	4629      	mov	r1, r5
 8013c30:	f04f 0801 	mov.w	r8, #1
 8013c34:	f7ec ff7a 	bl	8000b2c <__aeabi_dcmpge>
 8013c38:	b900      	cbnz	r0, 8013c3c <GUI_Touch_Processing+0x30a4>
 8013c3a:	4680      	mov	r8, r0
 8013c3c:	a344      	add	r3, pc, #272	; (adr r3, 8013d50 <GUI_Touch_Processing+0x31b8>)
 8013c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c42:	4620      	mov	r0, r4
 8013c44:	4629      	mov	r1, r5
 8013c46:	f04f 0901 	mov.w	r9, #1
 8013c4a:	f7ec ff65 	bl	8000b18 <__aeabi_dcmple>
 8013c4e:	b900      	cbnz	r0, 8013c52 <GUI_Touch_Processing+0x30ba>
 8013c50:	4681      	mov	r9, r0
 8013c52:	ea08 0309 	and.w	r3, r8, r9
 8013c56:	07dc      	lsls	r4, r3, #31
 8013c58:	d502      	bpl.n	8013c60 <GUI_Touch_Processing+0x30c8>
 8013c5a:	2e00      	cmp	r6, #0
 8013c5c:	f47d a86a 	bne.w	8010d34 <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 8013c60:	2200      	movs	r2, #0
 8013c62:	4b4e      	ldr	r3, [pc, #312]	; (8013d9c <GUI_Touch_Processing+0x3204>)
 8013c64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c68:	f04f 0401 	mov.w	r4, #1
 8013c6c:	f7ec ff5e 	bl	8000b2c <__aeabi_dcmpge>
 8013c70:	b900      	cbnz	r0, 8013c74 <GUI_Touch_Processing+0x30dc>
 8013c72:	4604      	mov	r4, r0
 8013c74:	a338      	add	r3, pc, #224	; (adr r3, 8013d58 <GUI_Touch_Processing+0x31c0>)
 8013c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c7e:	f04f 0501 	mov.w	r5, #1
 8013c82:	f7ec ff49 	bl	8000b18 <__aeabi_dcmple>
 8013c86:	b900      	cbnz	r0, 8013c8a <GUI_Touch_Processing+0x30f2>
 8013c88:	4605      	mov	r5, r0
 8013c8a:	402c      	ands	r4, r5
 8013c8c:	07e0      	lsls	r0, r4, #31
 8013c8e:	f57d a811 	bpl.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8013c92:	2f00      	cmp	r7, #0
 8013c94:	f47f ac21 	bne.w	80134da <GUI_Touch_Processing+0x2942>
 8013c98:	f7fd b80c 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 8013c9c:	4b40      	ldr	r3, [pc, #256]	; (8013da0 <GUI_Touch_Processing+0x3208>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8013c9e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8013ca2:	220f      	movs	r2, #15
 8013ca4:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8013ca6:	f7ec fc55 	bl	8000554 <__aeabi_i2d>
 8013caa:	4604      	mov	r4, r0
 8013cac:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8013cb0:	460d      	mov	r5, r1
 8013cb2:	f7ec fc4f 	bl	8000554 <__aeabi_i2d>
 8013cb6:	a32a      	add	r3, pc, #168	; (adr r3, 8013d60 <GUI_Touch_Processing+0x31c8>)
 8013cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cbc:	e9cd 0100 	strd	r0, r1, [sp]
 8013cc0:	f04f 0801 	mov.w	r8, #1
 8013cc4:	f7ec ff32 	bl	8000b2c <__aeabi_dcmpge>
 8013cc8:	b900      	cbnz	r0, 8013ccc <GUI_Touch_Processing+0x3134>
 8013cca:	4680      	mov	r8, r0
 8013ccc:	2200      	movs	r2, #0
 8013cce:	4b35      	ldr	r3, [pc, #212]	; (8013da4 <GUI_Touch_Processing+0x320c>)
 8013cd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cd4:	fa5f f888 	uxtb.w	r8, r8
 8013cd8:	f04f 0701 	mov.w	r7, #1
 8013cdc:	f7ec ff1c 	bl	8000b18 <__aeabi_dcmple>
 8013ce0:	b900      	cbnz	r0, 8013ce4 <GUI_Touch_Processing+0x314c>
 8013ce2:	4607      	mov	r7, r0
 8013ce4:	a320      	add	r3, pc, #128	; (adr r3, 8013d68 <GUI_Touch_Processing+0x31d0>)
 8013ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cea:	4620      	mov	r0, r4
 8013cec:	4629      	mov	r1, r5
 8013cee:	b2ff      	uxtb	r7, r7
 8013cf0:	f04f 0601 	mov.w	r6, #1
 8013cf4:	f7ec ff1a 	bl	8000b2c <__aeabi_dcmpge>
 8013cf8:	b900      	cbnz	r0, 8013cfc <GUI_Touch_Processing+0x3164>
 8013cfa:	4606      	mov	r6, r0
 8013cfc:	a30c      	add	r3, pc, #48	; (adr r3, 8013d30 <GUI_Touch_Processing+0x3198>)
 8013cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d02:	4620      	mov	r0, r4
 8013d04:	4629      	mov	r1, r5
 8013d06:	f04f 0901 	mov.w	r9, #1
 8013d0a:	f7ec ff05 	bl	8000b18 <__aeabi_dcmple>
 8013d0e:	b900      	cbnz	r0, 8013d12 <GUI_Touch_Processing+0x317a>
 8013d10:	4681      	mov	r9, r0
 8013d12:	ea06 0609 	and.w	r6, r6, r9
 8013d16:	ea18 0f06 	tst.w	r8, r6
 8013d1a:	d05d      	beq.n	8013dd8 <GUI_Touch_Processing+0x3240>
 8013d1c:	2f00      	cmp	r7, #0
 8013d1e:	d05b      	beq.n	8013dd8 <GUI_Touch_Processing+0x3240>
					GUI_screen_state = ColorSet1_Screen;
 8013d20:	230e      	movs	r3, #14
 8013d22:	f88b 3000 	strb.w	r3, [fp]
 8013d26:	f7fc bfc5 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8013d2a:	bf00      	nop
 8013d2c:	f3af 8000 	nop.w
 8013d30:	66666666 	.word	0x66666666
 8013d34:	4081f866 	.word	0x4081f866
 8013d38:	33333333 	.word	0x33333333
 8013d3c:	40867133 	.word	0x40867133
 8013d40:	33333333 	.word	0x33333333
 8013d44:	40053333 	.word	0x40053333
 8013d48:	00000000 	.word	0x00000000
 8013d4c:	40623800 	.word	0x40623800
 8013d50:	99999999 	.word	0x99999999
 8013d54:	40720d99 	.word	0x40720d99
 8013d58:	00000000 	.word	0x00000000
 8013d5c:	4073e000 	.word	0x4073e000
 8013d60:	99999999 	.word	0x99999999
 8013d64:	4091a399 	.word	0x4091a399
 8013d68:	33333333 	.word	0x33333333
 8013d6c:	407aff33 	.word	0x407aff33
 8013d70:	20005277 	.word	0x20005277
 8013d74:	200052a1 	.word	0x200052a1
 8013d78:	2000527c 	.word	0x2000527c
 8013d7c:	00051d00 	.word	0x00051d00
 8013d80:	2008c8b0 	.word	0x2008c8b0
 8013d84:	200511f6 	.word	0x200511f6
 8013d88:	200052a6 	.word	0x200052a6
 8013d8c:	2008c315 	.word	0x2008c315
 8013d90:	20005279 	.word	0x20005279
 8013d94:	0006ca00 	.word	0x0006ca00
 8013d98:	00018100 	.word	0x00018100
 8013d9c:	406a8000 	.word	0x406a8000
 8013da0:	2000022a 	.word	0x2000022a
 8013da4:	4093e000 	.word	0x4093e000
 8013da8:	33333333 	.word	0x33333333
 8013dac:	40353333 	.word	0x40353333
 8013db0:	00000000 	.word	0x00000000
 8013db4:	4084b400 	.word	0x4084b400
 8013db8:	99999999 	.word	0x99999999
 8013dbc:	40748999 	.word	0x40748999
 8013dc0:	99999999 	.word	0x99999999
 8013dc4:	407cd199 	.word	0x407cd199
 8013dc8:	66666666 	.word	0x66666666
 8013dcc:	408b1466 	.word	0x408b1466
 8013dd0:	33333333 	.word	0x33333333
 8013dd4:	408f8d33 	.word	0x408f8d33
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //Color_CIE_Luv
 8013dd8:	a3d3      	add	r3, pc, #844	; (adr r3, 8014128 <GUI_Touch_Processing+0x3590>)
 8013dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dde:	4620      	mov	r0, r4
 8013de0:	4629      	mov	r1, r5
 8013de2:	f04f 0601 	mov.w	r6, #1
 8013de6:	f7ec fea1 	bl	8000b2c <__aeabi_dcmpge>
 8013dea:	b900      	cbnz	r0, 8013dee <GUI_Touch_Processing+0x3256>
 8013dec:	4606      	mov	r6, r0
 8013dee:	a3dc      	add	r3, pc, #880	; (adr r3, 8014160 <GUI_Touch_Processing+0x35c8>)
 8013df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df4:	4620      	mov	r0, r4
 8013df6:	4629      	mov	r1, r5
 8013df8:	f04f 0901 	mov.w	r9, #1
 8013dfc:	f7ec fe8c 	bl	8000b18 <__aeabi_dcmple>
 8013e00:	b900      	cbnz	r0, 8013e04 <GUI_Touch_Processing+0x326c>
 8013e02:	4681      	mov	r9, r0
 8013e04:	ea06 0609 	and.w	r6, r6, r9
 8013e08:	a3d7      	add	r3, pc, #860	; (adr r3, 8014168 <GUI_Touch_Processing+0x35d0>)
 8013e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e12:	b2f6      	uxtb	r6, r6
 8013e14:	f04f 0901 	mov.w	r9, #1
 8013e18:	f7ec fe88 	bl	8000b2c <__aeabi_dcmpge>
 8013e1c:	b900      	cbnz	r0, 8013e20 <GUI_Touch_Processing+0x3288>
 8013e1e:	4681      	mov	r9, r0
 8013e20:	a3d3      	add	r3, pc, #844	; (adr r3, 8014170 <GUI_Touch_Processing+0x35d8>)
 8013e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e2a:	f04f 0a01 	mov.w	sl, #1
 8013e2e:	f7ec fe73 	bl	8000b18 <__aeabi_dcmple>
 8013e32:	b900      	cbnz	r0, 8013e36 <GUI_Touch_Processing+0x329e>
 8013e34:	4682      	mov	sl, r0
 8013e36:	ea09 090a 	and.w	r9, r9, sl
 8013e3a:	f019 0f01 	tst.w	r9, #1
 8013e3e:	d016      	beq.n	8013e6e <GUI_Touch_Processing+0x32d6>
 8013e40:	b1ae      	cbz	r6, 8013e6e <GUI_Touch_Processing+0x32d6>
					if(!(Color_Field&Color_CIE_Luv))
 8013e42:	4cbb      	ldr	r4, [pc, #748]	; (8014130 <GUI_Touch_Processing+0x3598>)
 8013e44:	7823      	ldrb	r3, [r4, #0]
 8013e46:	0759      	lsls	r1, r3, #29
 8013e48:	f53c af34 	bmi.w	8010cb4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 70, Color_Field|=Color_CIE_Luv, 0x01);
 8013e4c:	2204      	movs	r2, #4
 8013e4e:	2301      	movs	r3, #1
 8013e50:	2146      	movs	r1, #70	; 0x46
 8013e52:	20c8      	movs	r0, #200	; 0xc8
 8013e54:	7022      	strb	r2, [r4, #0]
 8013e56:	f001 fa44 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 8013e5a:	7822      	ldrb	r2, [r4, #0]
 8013e5c:	2301      	movs	r3, #1
 8013e5e:	f002 0202 	and.w	r2, r2, #2
 8013e62:	2185      	movs	r1, #133	; 0x85
 8013e64:	20c8      	movs	r0, #200	; 0xc8
 8013e66:	f001 fa3c 	bl	80152e2 <GUI_RadioBox>
 8013e6a:	f7fc bf23 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //Color_CIE_Lab
 8013e6e:	a39c      	add	r3, pc, #624	; (adr r3, 80140e0 <GUI_Touch_Processing+0x3548>)
 8013e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e78:	f04f 0901 	mov.w	r9, #1
 8013e7c:	f7ec fe56 	bl	8000b2c <__aeabi_dcmpge>
 8013e80:	b900      	cbnz	r0, 8013e84 <GUI_Touch_Processing+0x32ec>
 8013e82:	4681      	mov	r9, r0
 8013e84:	a398      	add	r3, pc, #608	; (adr r3, 80140e8 <GUI_Touch_Processing+0x3550>)
 8013e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e8e:	f04f 0a01 	mov.w	sl, #1
 8013e92:	f7ec fe41 	bl	8000b18 <__aeabi_dcmple>
 8013e96:	b900      	cbnz	r0, 8013e9a <GUI_Touch_Processing+0x3302>
 8013e98:	4682      	mov	sl, r0
 8013e9a:	ea09 090a 	and.w	r9, r9, sl
 8013e9e:	f019 0f01 	tst.w	r9, #1
 8013ea2:	d017      	beq.n	8013ed4 <GUI_Touch_Processing+0x333c>
 8013ea4:	b1b6      	cbz	r6, 8013ed4 <GUI_Touch_Processing+0x333c>
					if(!(Color_Field&Color_CIE_Lab))
 8013ea6:	4ca2      	ldr	r4, [pc, #648]	; (8014130 <GUI_Touch_Processing+0x3598>)
 8013ea8:	7822      	ldrb	r2, [r4, #0]
 8013eaa:	f012 0202 	ands.w	r2, r2, #2
 8013eae:	f47c af01 	bne.w	8010cb4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	2146      	movs	r1, #70	; 0x46
 8013eb6:	20c8      	movs	r0, #200	; 0xc8
						Color_Field = 0;
 8013eb8:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 8013eba:	f001 fa12 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 8013ebe:	7822      	ldrb	r2, [r4, #0]
 8013ec0:	2301      	movs	r3, #1
 8013ec2:	f042 0202 	orr.w	r2, r2, #2
 8013ec6:	2185      	movs	r1, #133	; 0x85
 8013ec8:	20c8      	movs	r0, #200	; 0xc8
 8013eca:	7022      	strb	r2, [r4, #0]
 8013ecc:	f001 fa09 	bl	80152e2 <GUI_RadioBox>
 8013ed0:	f7fc bef0 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8013ed4:	a386      	add	r3, pc, #536	; (adr r3, 80140f0 <GUI_Touch_Processing+0x3558>)
 8013ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eda:	4620      	mov	r0, r4
 8013edc:	4629      	mov	r1, r5
 8013ede:	ea08 0607 	and.w	r6, r8, r7
 8013ee2:	f04f 0901 	mov.w	r9, #1
 8013ee6:	f7ec fe21 	bl	8000b2c <__aeabi_dcmpge>
 8013eea:	b900      	cbnz	r0, 8013eee <GUI_Touch_Processing+0x3356>
 8013eec:	4681      	mov	r9, r0
 8013eee:	a382      	add	r3, pc, #520	; (adr r3, 80140f8 <GUI_Touch_Processing+0x3560>)
 8013ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef4:	4620      	mov	r0, r4
 8013ef6:	4629      	mov	r1, r5
 8013ef8:	f04f 0a01 	mov.w	sl, #1
 8013efc:	f7ec fe0c 	bl	8000b18 <__aeabi_dcmple>
 8013f00:	b900      	cbnz	r0, 8013f04 <GUI_Touch_Processing+0x336c>
 8013f02:	4682      	mov	sl, r0
 8013f04:	ea09 030a 	and.w	r3, r9, sl
 8013f08:	07da      	lsls	r2, r3, #31
 8013f0a:	d502      	bpl.n	8013f12 <GUI_Touch_Processing+0x337a>
 8013f0c:	2e00      	cmp	r6, #0
 8013f0e:	f47d ae8e 	bne.w	8011c2e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8013f12:	a37b      	add	r3, pc, #492	; (adr r3, 8014100 <GUI_Touch_Processing+0x3568>)
 8013f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f18:	4620      	mov	r0, r4
 8013f1a:	4629      	mov	r1, r5
 8013f1c:	f04f 0901 	mov.w	r9, #1
 8013f20:	f7ec fe04 	bl	8000b2c <__aeabi_dcmpge>
 8013f24:	b900      	cbnz	r0, 8013f28 <GUI_Touch_Processing+0x3390>
 8013f26:	4681      	mov	r9, r0
 8013f28:	a377      	add	r3, pc, #476	; (adr r3, 8014108 <GUI_Touch_Processing+0x3570>)
 8013f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f2e:	4620      	mov	r0, r4
 8013f30:	4629      	mov	r1, r5
 8013f32:	f04f 0a01 	mov.w	sl, #1
 8013f36:	f7ec fdef 	bl	8000b18 <__aeabi_dcmple>
 8013f3a:	b900      	cbnz	r0, 8013f3e <GUI_Touch_Processing+0x33a6>
 8013f3c:	4682      	mov	sl, r0
 8013f3e:	ea09 030a 	and.w	r3, r9, sl
 8013f42:	07db      	lsls	r3, r3, #31
 8013f44:	d55e      	bpl.n	8014004 <GUI_Touch_Processing+0x346c>
 8013f46:	2e00      	cmp	r6, #0
 8013f48:	d05c      	beq.n	8014004 <GUI_Touch_Processing+0x346c>
					if(preColor_Field != Color_Field)
 8013f4a:	4c79      	ldr	r4, [pc, #484]	; (8014130 <GUI_Touch_Processing+0x3598>)
 8013f4c:	4979      	ldr	r1, [pc, #484]	; (8014134 <GUI_Touch_Processing+0x359c>)
 8013f4e:	7823      	ldrb	r3, [r4, #0]
 8013f50:	7809      	ldrb	r1, [r1, #0]
 8013f52:	4299      	cmp	r1, r3
 8013f54:	d01f      	beq.n	8013f96 <GUI_Touch_Processing+0x33fe>
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8013f56:	07dd      	lsls	r5, r3, #31
 8013f58:	d52c      	bpl.n	8013fb4 <GUI_Touch_Processing+0x341c>
 8013f5a:	4b77      	ldr	r3, [pc, #476]	; (8014138 <GUI_Touch_Processing+0x35a0>)
 8013f5c:	4877      	ldr	r0, [pc, #476]	; (801413c <GUI_Touch_Processing+0x35a4>)
 8013f5e:	781b      	ldrb	r3, [r3, #0]
 8013f60:	f013 0f01 	tst.w	r3, #1
 8013f64:	bf18      	it	ne
 8013f66:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8013f6a:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8013f6e:	f007 fe77 	bl	801bc60 <Image_load>
								Locus.pData = (uint16_t *)bmp;
 8013f72:	4b73      	ldr	r3, [pc, #460]	; (8014140 <GUI_Touch_Processing+0x35a8>)
 8013f74:	4a73      	ldr	r2, [pc, #460]	; (8014144 <GUI_Touch_Processing+0x35ac>)
 8013f76:	605a      	str	r2, [r3, #4]
								Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8013f78:	7822      	ldrb	r2, [r4, #0]
 8013f7a:	f002 0101 	and.w	r1, r2, #1
 8013f7e:	2900      	cmp	r1, #0
 8013f80:	bf0c      	ite	eq
 8013f82:	21fa      	moveq	r1, #250	; 0xfa
 8013f84:	21d8      	movne	r1, #216	; 0xd8
 8013f86:	8019      	strh	r1, [r3, #0]
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8013f88:	d122      	bne.n	8013fd0 <GUI_Touch_Processing+0x3438>
 8013f8a:	f012 0f04 	tst.w	r2, #4
 8013f8e:	bf0c      	ite	eq
 8013f90:	22fa      	moveq	r2, #250	; 0xfa
 8013f92:	22ea      	movne	r2, #234	; 0xea
 8013f94:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 8013f96:	4b6c      	ldr	r3, [pc, #432]	; (8014148 <GUI_Touch_Processing+0x35b0>)
 8013f98:	2100      	movs	r1, #0
 8013f9a:	8818      	ldrh	r0, [r3, #0]
 8013f9c:	f007 ff1a 	bl	801bdd4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8013fa0:	4b6a      	ldr	r3, [pc, #424]	; (801414c <GUI_Touch_Processing+0x35b4>)
 8013fa2:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8013fa4:	1e5a      	subs	r2, r3, #1
 8013fa6:	2a05      	cmp	r2, #5
 8013fa8:	d814      	bhi.n	8013fd4 <GUI_Touch_Processing+0x343c>
 8013faa:	e8df f002 	tbb	[pc, r2]
 8013fae:	1317      	.short	0x1317
 8013fb0:	21261c13 	.word	0x21261c13
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8013fb4:	f003 0304 	and.w	r3, r3, #4
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	4b65      	ldr	r3, [pc, #404]	; (8014150 <GUI_Touch_Processing+0x35b8>)
 8013fbc:	4865      	ldr	r0, [pc, #404]	; (8014154 <GUI_Touch_Processing+0x35bc>)
 8013fbe:	bf18      	it	ne
 8013fc0:	4618      	movne	r0, r3
 8013fc2:	f24e 4384 	movw	r3, #58500	; 0xe484
 8013fc6:	f24f 4124 	movw	r1, #62500	; 0xf424
 8013fca:	bf18      	it	ne
 8013fcc:	4619      	movne	r1, r3
 8013fce:	e7ce      	b.n	8013f6e <GUI_Touch_Processing+0x33d6>
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8013fd0:	22fa      	movs	r2, #250	; 0xfa
 8013fd2:	e7df      	b.n	8013f94 <GUI_Touch_Processing+0x33fc>
					GUI_screen_state = Prev_Inf_Screen;
 8013fd4:	f88b 3000 	strb.w	r3, [fp]
 8013fd8:	f7fc be6c 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8013fdc:	2301      	movs	r3, #1
 8013fde:	f88b 3000 	strb.w	r3, [fp]
 8013fe2:	f7fc be67 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8013fe6:	2304      	movs	r3, #4
 8013fe8:	f88b 3000 	strb.w	r3, [fp]
 8013fec:	f7fc be62 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8013ff0:	2306      	movs	r3, #6
 8013ff2:	f88b 3000 	strb.w	r3, [fp]
 8013ff6:	f7fc be5d 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8013ffa:	2305      	movs	r3, #5
 8013ffc:	f88b 3000 	strb.w	r3, [fp]
 8014000:	f7fc be58 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8014004:	a340      	add	r3, pc, #256	; (adr r3, 8014108 <GUI_Touch_Processing+0x3570>)
 8014006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801400a:	4620      	mov	r0, r4
 801400c:	4629      	mov	r1, r5
 801400e:	f04f 0601 	mov.w	r6, #1
 8014012:	f7ec fd8b 	bl	8000b2c <__aeabi_dcmpge>
 8014016:	b900      	cbnz	r0, 801401a <GUI_Touch_Processing+0x3482>
 8014018:	4606      	mov	r6, r0
 801401a:	a33d      	add	r3, pc, #244	; (adr r3, 8014110 <GUI_Touch_Processing+0x3578>)
 801401c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014020:	4620      	mov	r0, r4
 8014022:	4629      	mov	r1, r5
 8014024:	f04f 0901 	mov.w	r9, #1
 8014028:	f7ec fd76 	bl	8000b18 <__aeabi_dcmple>
 801402c:	b900      	cbnz	r0, 8014030 <GUI_Touch_Processing+0x3498>
 801402e:	4681      	mov	r9, r0
 8014030:	ea06 0609 	and.w	r6, r6, r9
 8014034:	ea18 0f06 	tst.w	r8, r6
 8014038:	f7fe bad0 	b.w	80125dc <GUI_Touch_Processing+0x1a44>
					preGUI_screen_state = GUI_screen_state;
 801403c:	4b46      	ldr	r3, [pc, #280]	; (8014158 <GUI_Touch_Processing+0x35c0>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)//next
 801403e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8014042:	2210      	movs	r2, #16
 8014044:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)//next
 8014046:	f7ec fa85 	bl	8000554 <__aeabi_i2d>
 801404a:	4604      	mov	r4, r0
 801404c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8014050:	460d      	mov	r5, r1
 8014052:	f7ec fa7f 	bl	8000554 <__aeabi_i2d>
 8014056:	a330      	add	r3, pc, #192	; (adr r3, 8014118 <GUI_Touch_Processing+0x3580>)
 8014058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801405c:	4606      	mov	r6, r0
 801405e:	460f      	mov	r7, r1
 8014060:	f04f 0801 	mov.w	r8, #1
 8014064:	f7ec fd62 	bl	8000b2c <__aeabi_dcmpge>
 8014068:	b900      	cbnz	r0, 801406c <GUI_Touch_Processing+0x34d4>
 801406a:	4680      	mov	r8, r0
 801406c:	fa5f f388 	uxtb.w	r3, r8
 8014070:	9300      	str	r3, [sp, #0]
 8014072:	2200      	movs	r2, #0
 8014074:	4b39      	ldr	r3, [pc, #228]	; (801415c <GUI_Touch_Processing+0x35c4>)
 8014076:	4630      	mov	r0, r6
 8014078:	4639      	mov	r1, r7
 801407a:	f04f 0801 	mov.w	r8, #1
 801407e:	f7ec fd4b 	bl	8000b18 <__aeabi_dcmple>
 8014082:	b900      	cbnz	r0, 8014086 <GUI_Touch_Processing+0x34ee>
 8014084:	4680      	mov	r8, r0
 8014086:	fa5f f388 	uxtb.w	r3, r8
 801408a:	9303      	str	r3, [sp, #12]
 801408c:	4620      	mov	r0, r4
 801408e:	a324      	add	r3, pc, #144	; (adr r3, 8014120 <GUI_Touch_Processing+0x3588>)
 8014090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014094:	4629      	mov	r1, r5
 8014096:	f04f 0801 	mov.w	r8, #1
 801409a:	f7ec fd47 	bl	8000b2c <__aeabi_dcmpge>
 801409e:	b900      	cbnz	r0, 80140a2 <GUI_Touch_Processing+0x350a>
 80140a0:	4680      	mov	r8, r0
 80140a2:	a313      	add	r3, pc, #76	; (adr r3, 80140f0 <GUI_Touch_Processing+0x3558>)
 80140a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140a8:	4620      	mov	r0, r4
 80140aa:	4629      	mov	r1, r5
 80140ac:	f04f 0901 	mov.w	r9, #1
 80140b0:	f7ec fd32 	bl	8000b18 <__aeabi_dcmple>
 80140b4:	b900      	cbnz	r0, 80140b8 <GUI_Touch_Processing+0x3520>
 80140b6:	4681      	mov	r9, r0
 80140b8:	9b00      	ldr	r3, [sp, #0]
 80140ba:	ea08 0809 	and.w	r8, r8, r9
 80140be:	ea13 0f08 	tst.w	r3, r8
 80140c2:	d059      	beq.n	8014178 <GUI_Touch_Processing+0x35e0>
 80140c4:	9b03      	ldr	r3, [sp, #12]
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d056      	beq.n	8014178 <GUI_Touch_Processing+0x35e0>
					WriteSDFLASH_t(sdfile_cnt);
 80140ca:	4b1f      	ldr	r3, [pc, #124]	; (8014148 <GUI_Touch_Processing+0x35b0>)
 80140cc:	2100      	movs	r1, #0
 80140ce:	8818      	ldrh	r0, [r3, #0]
 80140d0:	f007 fe80 	bl	801bdd4 <WriteSDFLASH_t>
					GUI_screen_state = Color_Rendition_Screen;
 80140d4:	2306      	movs	r3, #6
 80140d6:	f88b 3000 	strb.w	r3, [fp]
 80140da:	f7fc bdeb 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 80140de:	bf00      	nop
 80140e0:	33333333 	.word	0x33333333
 80140e4:	40760733 	.word	0x40760733
 80140e8:	cccccccd 	.word	0xcccccccd
 80140ec:	407ef8cc 	.word	0x407ef8cc
 80140f0:	66666666 	.word	0x66666666
 80140f4:	4081f866 	.word	0x4081f866
 80140f8:	33333333 	.word	0x33333333
 80140fc:	40867133 	.word	0x40867133
 8014100:	33333333 	.word	0x33333333
 8014104:	40053333 	.word	0x40053333
 8014108:	00000000 	.word	0x00000000
 801410c:	40623800 	.word	0x40623800
 8014110:	99999999 	.word	0x99999999
 8014114:	40720d99 	.word	0x40720d99
 8014118:	99999999 	.word	0x99999999
 801411c:	4091a399 	.word	0x4091a399
 8014120:	33333333 	.word	0x33333333
 8014124:	407aff33 	.word	0x407aff33
 8014128:	cccccccd 	.word	0xcccccccd
 801412c:	407e24cc 	.word	0x407e24cc
 8014130:	20005277 	.word	0x20005277
 8014134:	200052a1 	.word	0x200052a1
 8014138:	2000527c 	.word	0x2000527c
 801413c:	00051d00 	.word	0x00051d00
 8014140:	2008c8b0 	.word	0x2008c8b0
 8014144:	200511f6 	.word	0x200511f6
 8014148:	200052a6 	.word	0x200052a6
 801414c:	2008c315 	.word	0x2008c315
 8014150:	0006ca00 	.word	0x0006ca00
 8014154:	00018100 	.word	0x00018100
 8014158:	2000022a 	.word	0x2000022a
 801415c:	4093e000 	.word	0x4093e000
 8014160:	33333333 	.word	0x33333333
 8014164:	40838b33 	.word	0x40838b33
 8014168:	00000000 	.word	0x00000000
 801416c:	40673000 	.word	0x40673000
 8014170:	99999999 	.word	0x99999999
 8014174:	40748999 	.word	0x40748999
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 8014178:	a3c9      	add	r3, pc, #804	; (adr r3, 80144a0 <GUI_Touch_Processing+0x3908>)
 801417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801417e:	4620      	mov	r0, r4
 8014180:	4629      	mov	r1, r5
 8014182:	f04f 0801 	mov.w	r8, #1
 8014186:	f7ec fcd1 	bl	8000b2c <__aeabi_dcmpge>
 801418a:	b900      	cbnz	r0, 801418e <GUI_Touch_Processing+0x35f6>
 801418c:	4680      	mov	r8, r0
 801418e:	a3c6      	add	r3, pc, #792	; (adr r3, 80144a8 <GUI_Touch_Processing+0x3910>)
 8014190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014194:	4620      	mov	r0, r4
 8014196:	4629      	mov	r1, r5
 8014198:	f04f 0901 	mov.w	r9, #1
 801419c:	f7ec fcbc 	bl	8000b18 <__aeabi_dcmple>
 80141a0:	b900      	cbnz	r0, 80141a4 <GUI_Touch_Processing+0x360c>
 80141a2:	4681      	mov	r9, r0
 80141a4:	ea08 0809 	and.w	r8, r8, r9
 80141a8:	a3c1      	add	r3, pc, #772	; (adr r3, 80144b0 <GUI_Touch_Processing+0x3918>)
 80141aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ae:	4630      	mov	r0, r6
 80141b0:	4639      	mov	r1, r7
 80141b2:	fa5f f888 	uxtb.w	r8, r8
 80141b6:	f04f 0901 	mov.w	r9, #1
 80141ba:	f7ec fcb7 	bl	8000b2c <__aeabi_dcmpge>
 80141be:	b900      	cbnz	r0, 80141c2 <GUI_Touch_Processing+0x362a>
 80141c0:	4681      	mov	r9, r0
 80141c2:	a3bd      	add	r3, pc, #756	; (adr r3, 80144b8 <GUI_Touch_Processing+0x3920>)
 80141c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c8:	4630      	mov	r0, r6
 80141ca:	4639      	mov	r1, r7
 80141cc:	f04f 0a01 	mov.w	sl, #1
 80141d0:	f7ec fca2 	bl	8000b18 <__aeabi_dcmple>
 80141d4:	b900      	cbnz	r0, 80141d8 <GUI_Touch_Processing+0x3640>
 80141d6:	4682      	mov	sl, r0
 80141d8:	ea09 090a 	and.w	r9, r9, sl
 80141dc:	f019 0f01 	tst.w	r9, #1
 80141e0:	d028      	beq.n	8014234 <GUI_Touch_Processing+0x369c>
 80141e2:	f1b8 0f00 	cmp.w	r8, #0
 80141e6:	d025      	beq.n	8014234 <GUI_Touch_Processing+0x369c>
					Mode_EL = !Mode_EL;
 80141e8:	4ca3      	ldr	r4, [pc, #652]	; (8014478 <GUI_Touch_Processing+0x38e0>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80141ea:	4ba4      	ldr	r3, [pc, #656]	; (801447c <GUI_Touch_Processing+0x38e4>)
					Mode_EL = !Mode_EL;
 80141ec:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80141ee:	48a4      	ldr	r0, [pc, #656]	; (8014480 <GUI_Touch_Processing+0x38e8>)
					Mode_EL = !Mode_EL;
 80141f0:	2a00      	cmp	r2, #0
 80141f2:	bf0c      	ite	eq
 80141f4:	2201      	moveq	r2, #1
 80141f6:	2200      	movne	r2, #0
 80141f8:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80141fa:	bf18      	it	ne
 80141fc:	4618      	movne	r0, r3
 80141fe:	4aa1      	ldr	r2, [pc, #644]	; (8014484 <GUI_Touch_Processing+0x38ec>)
 8014200:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014204:	f7fa fd18 	bl	800ec38 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8014208:	7822      	ldrb	r2, [r4, #0]
 801420a:	4b9f      	ldr	r3, [pc, #636]	; (8014488 <GUI_Touch_Processing+0x38f0>)
 801420c:	b982      	cbnz	r2, 8014230 <GUI_Touch_Processing+0x3698>
 801420e:	4a9f      	ldr	r2, [pc, #636]	; (801448c <GUI_Touch_Processing+0x38f4>)
 8014210:	edd2 0a00 	vldr	s1, [r2]
 8014214:	ed93 0a00 	vldr	s0, [r3]
 8014218:	f007 fd52 	bl	801bcc0 <Rabs_calc_Factor2_Settings_change>
 801421c:	4b9c      	ldr	r3, [pc, #624]	; (8014490 <GUI_Touch_Processing+0x38f8>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 801421e:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8014220:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8014224:	21ca      	movs	r1, #202	; 0xca
 8014226:	20b6      	movs	r0, #182	; 0xb6
 8014228:	f001 f8e4 	bl	80153f4 <GUI_Switch_ButtonActive>
 801422c:	f7fc bd42 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8014230:	4a98      	ldr	r2, [pc, #608]	; (8014494 <GUI_Touch_Processing+0x38fc>)
 8014232:	e7ed      	b.n	8014210 <GUI_Touch_Processing+0x3678>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 8014234:	a378      	add	r3, pc, #480	; (adr r3, 8014418 <GUI_Touch_Processing+0x3880>)
 8014236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801423a:	4630      	mov	r0, r6
 801423c:	4639      	mov	r1, r7
 801423e:	f04f 0901 	mov.w	r9, #1
 8014242:	f7ec fc73 	bl	8000b2c <__aeabi_dcmpge>
 8014246:	b900      	cbnz	r0, 801424a <GUI_Touch_Processing+0x36b2>
 8014248:	4681      	mov	r9, r0
 801424a:	a375      	add	r3, pc, #468	; (adr r3, 8014420 <GUI_Touch_Processing+0x3888>)
 801424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014250:	4630      	mov	r0, r6
 8014252:	4639      	mov	r1, r7
 8014254:	f04f 0a01 	mov.w	sl, #1
 8014258:	f7ec fc5e 	bl	8000b18 <__aeabi_dcmple>
 801425c:	b900      	cbnz	r0, 8014260 <GUI_Touch_Processing+0x36c8>
 801425e:	4682      	mov	sl, r0
 8014260:	ea09 090a 	and.w	r9, r9, sl
 8014264:	f019 0f01 	tst.w	r9, #1
 8014268:	d011      	beq.n	801428e <GUI_Touch_Processing+0x36f6>
 801426a:	f1b8 0f00 	cmp.w	r8, #0
 801426e:	d00e      	beq.n	801428e <GUI_Touch_Processing+0x36f6>
					Bluetooth = !Bluetooth;
 8014270:	4b89      	ldr	r3, [pc, #548]	; (8014498 <GUI_Touch_Processing+0x3900>)
 8014272:	781a      	ldrb	r2, [r3, #0]
 8014274:	fab2 f282 	clz	r2, r2
 8014278:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 801427a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 801427e:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8014280:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8014282:	f001 f85d 	bl	8015340 <GUI_Switch_Button>
					GUI_Up_Panel();
 8014286:	f7fb f94f 	bl	800f528 <GUI_Up_Panel>
 801428a:	f7fc bd13 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 801428e:	a366      	add	r3, pc, #408	; (adr r3, 8014428 <GUI_Touch_Processing+0x3890>)
 8014290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014294:	4620      	mov	r0, r4
 8014296:	4629      	mov	r1, r5
 8014298:	f04f 0801 	mov.w	r8, #1
 801429c:	f7ec fc46 	bl	8000b2c <__aeabi_dcmpge>
 80142a0:	b900      	cbnz	r0, 80142a4 <GUI_Touch_Processing+0x370c>
 80142a2:	4680      	mov	r8, r0
 80142a4:	a362      	add	r3, pc, #392	; (adr r3, 8014430 <GUI_Touch_Processing+0x3898>)
 80142a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142aa:	4620      	mov	r0, r4
 80142ac:	4629      	mov	r1, r5
 80142ae:	f04f 0901 	mov.w	r9, #1
 80142b2:	f7ec fc31 	bl	8000b18 <__aeabi_dcmple>
 80142b6:	b900      	cbnz	r0, 80142ba <GUI_Touch_Processing+0x3722>
 80142b8:	4681      	mov	r9, r0
 80142ba:	ea08 0809 	and.w	r8, r8, r9
 80142be:	a35e      	add	r3, pc, #376	; (adr r3, 8014438 <GUI_Touch_Processing+0x38a0>)
 80142c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142c4:	4630      	mov	r0, r6
 80142c6:	4639      	mov	r1, r7
 80142c8:	fa5f f888 	uxtb.w	r8, r8
 80142cc:	f04f 0901 	mov.w	r9, #1
 80142d0:	f7ec fc2c 	bl	8000b2c <__aeabi_dcmpge>
 80142d4:	b900      	cbnz	r0, 80142d8 <GUI_Touch_Processing+0x3740>
 80142d6:	4681      	mov	r9, r0
 80142d8:	a359      	add	r3, pc, #356	; (adr r3, 8014440 <GUI_Touch_Processing+0x38a8>)
 80142da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142de:	4630      	mov	r0, r6
 80142e0:	4639      	mov	r1, r7
 80142e2:	f04f 0a01 	mov.w	sl, #1
 80142e6:	f7ec fc17 	bl	8000b18 <__aeabi_dcmple>
 80142ea:	b900      	cbnz	r0, 80142ee <GUI_Touch_Processing+0x3756>
 80142ec:	4682      	mov	sl, r0
 80142ee:	ea09 090a 	and.w	r9, r9, sl
 80142f2:	f019 0f01 	tst.w	r9, #1
 80142f6:	d003      	beq.n	8014300 <GUI_Touch_Processing+0x3768>
 80142f8:	f1b8 0f00 	cmp.w	r8, #0
 80142fc:	f47f a91b 	bne.w	8013536 <GUI_Touch_Processing+0x299e>
				if(Touch_x >= 185*TS_Callib & Touch_x <= (185+54)*TS_Callib & Touch_y >=318*TS_Callib & Touch_y <=(318+54)*TS_Callib) //CRI
 8014300:	a351      	add	r3, pc, #324	; (adr r3, 8014448 <GUI_Touch_Processing+0x38b0>)
 8014302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014306:	4620      	mov	r0, r4
 8014308:	4629      	mov	r1, r5
 801430a:	f04f 0901 	mov.w	r9, #1
 801430e:	f7ec fc0d 	bl	8000b2c <__aeabi_dcmpge>
 8014312:	b900      	cbnz	r0, 8014316 <GUI_Touch_Processing+0x377e>
 8014314:	4681      	mov	r9, r0
 8014316:	a34e      	add	r3, pc, #312	; (adr r3, 8014450 <GUI_Touch_Processing+0x38b8>)
 8014318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801431c:	4620      	mov	r0, r4
 801431e:	4629      	mov	r1, r5
 8014320:	f04f 0a01 	mov.w	sl, #1
 8014324:	f7ec fbf8 	bl	8000b18 <__aeabi_dcmple>
 8014328:	b900      	cbnz	r0, 801432c <GUI_Touch_Processing+0x3794>
 801432a:	4682      	mov	sl, r0
 801432c:	ea09 090a 	and.w	r9, r9, sl
 8014330:	a349      	add	r3, pc, #292	; (adr r3, 8014458 <GUI_Touch_Processing+0x38c0>)
 8014332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014336:	4630      	mov	r0, r6
 8014338:	4639      	mov	r1, r7
 801433a:	fa5f f989 	uxtb.w	r9, r9
 801433e:	f04f 0a01 	mov.w	sl, #1
 8014342:	f7ec fbf3 	bl	8000b2c <__aeabi_dcmpge>
 8014346:	b900      	cbnz	r0, 801434a <GUI_Touch_Processing+0x37b2>
 8014348:	4682      	mov	sl, r0
 801434a:	a345      	add	r3, pc, #276	; (adr r3, 8014460 <GUI_Touch_Processing+0x38c8>)
 801434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014350:	4630      	mov	r0, r6
 8014352:	4639      	mov	r1, r7
 8014354:	f04f 0b01 	mov.w	fp, #1
 8014358:	f7ec fbde 	bl	8000b18 <__aeabi_dcmple>
 801435c:	b900      	cbnz	r0, 8014360 <GUI_Touch_Processing+0x37c8>
 801435e:	4683      	mov	fp, r0
 8014360:	ea0a 0a0b 	and.w	sl, sl, fp
 8014364:	f01a 0f01 	tst.w	sl, #1
 8014368:	d01c      	beq.n	80143a4 <GUI_Touch_Processing+0x380c>
 801436a:	f1b9 0f00 	cmp.w	r9, #0
 801436e:	d019      	beq.n	80143a4 <GUI_Touch_Processing+0x380c>
					if(!(Color_rend_Field & CRI_CQS)){
 8014370:	4c4a      	ldr	r4, [pc, #296]	; (801449c <GUI_Touch_Processing+0x3904>)
 8014372:	7822      	ldrb	r2, [r4, #0]
 8014374:	07d0      	lsls	r0, r2, #31
 8014376:	f53c ac9d 	bmi.w	8010cb4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 801437a:	2301      	movs	r3, #1
						Color_rend_Field ^= CRI_CQS;
 801437c:	f082 0201 	eor.w	r2, r2, #1
 8014380:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8014382:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8014386:	401a      	ands	r2, r3
 8014388:	20b9      	movs	r0, #185	; 0xb9
 801438a:	f000 ffaa 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 801438e:	7822      	ldrb	r2, [r4, #0]
 8014390:	2301      	movs	r3, #1
 8014392:	43d2      	mvns	r2, r2
 8014394:	401a      	ands	r2, r3
 8014396:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 801439a:	20b9      	movs	r0, #185	; 0xb9
 801439c:	f000 ffa1 	bl	80152e2 <GUI_RadioBox>
 80143a0:	f7fc bc88 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 185*TS_Callib & Touch_x <= (185+54)*TS_Callib & Touch_y >=362*TS_Callib & Touch_y <=(362+54)*TS_Callib) //CQS
 80143a4:	a330      	add	r3, pc, #192	; (adr r3, 8014468 <GUI_Touch_Processing+0x38d0>)
 80143a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143aa:	4630      	mov	r0, r6
 80143ac:	4639      	mov	r1, r7
 80143ae:	f04f 0a01 	mov.w	sl, #1
 80143b2:	f7ec fbbb 	bl	8000b2c <__aeabi_dcmpge>
 80143b6:	b900      	cbnz	r0, 80143ba <GUI_Touch_Processing+0x3822>
 80143b8:	4682      	mov	sl, r0
 80143ba:	a32d      	add	r3, pc, #180	; (adr r3, 8014470 <GUI_Touch_Processing+0x38d8>)
 80143bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c0:	4630      	mov	r0, r6
 80143c2:	4639      	mov	r1, r7
 80143c4:	f04f 0b01 	mov.w	fp, #1
 80143c8:	f7ec fba6 	bl	8000b18 <__aeabi_dcmple>
 80143cc:	b900      	cbnz	r0, 80143d0 <GUI_Touch_Processing+0x3838>
 80143ce:	4683      	mov	fp, r0
 80143d0:	ea0a 0a0b 	and.w	sl, sl, fp
 80143d4:	f01a 0f01 	tst.w	sl, #1
 80143d8:	d072      	beq.n	80144c0 <GUI_Touch_Processing+0x3928>
 80143da:	f1b9 0f00 	cmp.w	r9, #0
 80143de:	d06f      	beq.n	80144c0 <GUI_Touch_Processing+0x3928>
					if((Color_rend_Field&CRI_CQS)){
 80143e0:	4c2e      	ldr	r4, [pc, #184]	; (801449c <GUI_Touch_Processing+0x3904>)
 80143e2:	7822      	ldrb	r2, [r4, #0]
 80143e4:	07d1      	lsls	r1, r2, #31
 80143e6:	f57c ac65 	bpl.w	8010cb4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 80143ea:	2301      	movs	r3, #1
						Color_rend_Field ^= CRI_CQS;
 80143ec:	f082 0201 	eor.w	r2, r2, #1
 80143f0:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 80143f2:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80143f6:	401a      	ands	r2, r3
 80143f8:	20b9      	movs	r0, #185	; 0xb9
 80143fa:	f000 ff72 	bl	80152e2 <GUI_RadioBox>
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 80143fe:	7822      	ldrb	r2, [r4, #0]
 8014400:	2301      	movs	r3, #1
 8014402:	43d2      	mvns	r2, r2
 8014404:	401a      	ands	r2, r3
 8014406:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 801440a:	20b9      	movs	r0, #185	; 0xb9
 801440c:	f000 ff69 	bl	80152e2 <GUI_RadioBox>
 8014410:	f7fc bc50 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8014414:	f3af 8000 	nop.w
 8014418:	99999999 	.word	0x99999999
 801441c:	40863199 	.word	0x40863199
 8014420:	66666666 	.word	0x66666666
 8014424:	408aaa66 	.word	0x408aaa66
 8014428:	33333333 	.word	0x33333333
 801442c:	40353333 	.word	0x40353333
 8014430:	00000000 	.word	0x00000000
 8014434:	4084b400 	.word	0x4084b400
 8014438:	99999999 	.word	0x99999999
 801443c:	40748999 	.word	0x40748999
 8014440:	99999999 	.word	0x99999999
 8014444:	407cd199 	.word	0x407cd199
 8014448:	00000000 	.word	0x00000000
 801444c:	407ea400 	.word	0x407ea400
 8014450:	cccccccd 	.word	0xcccccccd
 8014454:	4083cacc 	.word	0x4083cacc
 8014458:	99999999 	.word	0x99999999
 801445c:	408a5599 	.word	0x408a5599
 8014460:	66666666 	.word	0x66666666
 8014464:	408ece66 	.word	0x408ece66
 8014468:	66666666 	.word	0x66666666
 801446c:	408dfa66 	.word	0x408dfa66
 8014470:	99999999 	.word	0x99999999
 8014474:	40913999 	.word	0x40913999
 8014478:	20000a48 	.word	0x20000a48
 801447c:	08101838 	.word	0x08101838
 8014480:	08100838 	.word	0x08100838
 8014484:	2004d1e8 	.word	0x2004d1e8
 8014488:	200055d4 	.word	0x200055d4
 801448c:	200055d0 	.word	0x200055d0
 8014490:	200055dc 	.word	0x200055dc
 8014494:	200055cc 	.word	0x200055cc
 8014498:	2008c31a 	.word	0x2008c31a
 801449c:	20005278 	.word	0x20005278
 80144a0:	cccccccd 	.word	0xcccccccd
 80144a4:	407e24cc 	.word	0x407e24cc
 80144a8:	33333333 	.word	0x33333333
 80144ac:	40838b33 	.word	0x40838b33
 80144b0:	66666666 	.word	0x66666666
 80144b4:	4080ba66 	.word	0x4080ba66
 80144b8:	33333333 	.word	0x33333333
 80144bc:	40853333 	.word	0x40853333
 80144c0:	9b00      	ldr	r3, [sp, #0]
 80144c2:	9a03      	ldr	r2, [sp, #12]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 80144c4:	4620      	mov	r0, r4
 80144c6:	ea03 0902 	and.w	r9, r3, r2
 80144ca:	4629      	mov	r1, r5
 80144cc:	a3a4      	add	r3, pc, #656	; (adr r3, 8014760 <GUI_Touch_Processing+0x3bc8>)
 80144ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144d2:	f04f 0a01 	mov.w	sl, #1
 80144d6:	f7ec fb29 	bl	8000b2c <__aeabi_dcmpge>
 80144da:	b900      	cbnz	r0, 80144de <GUI_Touch_Processing+0x3946>
 80144dc:	4682      	mov	sl, r0
 80144de:	a3a2      	add	r3, pc, #648	; (adr r3, 8014768 <GUI_Touch_Processing+0x3bd0>)
 80144e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144e4:	4620      	mov	r0, r4
 80144e6:	4629      	mov	r1, r5
 80144e8:	f04f 0b01 	mov.w	fp, #1
 80144ec:	f7ec fb14 	bl	8000b18 <__aeabi_dcmple>
 80144f0:	b900      	cbnz	r0, 80144f4 <GUI_Touch_Processing+0x395c>
 80144f2:	4683      	mov	fp, r0
 80144f4:	ea0a 030b 	and.w	r3, sl, fp
 80144f8:	07db      	lsls	r3, r3, #31
 80144fa:	d503      	bpl.n	8014504 <GUI_Touch_Processing+0x396c>
 80144fc:	f1b9 0f00 	cmp.w	r9, #0
 8014500:	f47d ab95 	bne.w	8011c2e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8014504:	a39a      	add	r3, pc, #616	; (adr r3, 8014770 <GUI_Touch_Processing+0x3bd8>)
 8014506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801450a:	4620      	mov	r0, r4
 801450c:	4629      	mov	r1, r5
 801450e:	f04f 0a01 	mov.w	sl, #1
 8014512:	f7ec fb0b 	bl	8000b2c <__aeabi_dcmpge>
 8014516:	b900      	cbnz	r0, 801451a <GUI_Touch_Processing+0x3982>
 8014518:	4682      	mov	sl, r0
 801451a:	a37f      	add	r3, pc, #508	; (adr r3, 8014718 <GUI_Touch_Processing+0x3b80>)
 801451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014520:	4620      	mov	r0, r4
 8014522:	4629      	mov	r1, r5
 8014524:	f04f 0b01 	mov.w	fp, #1
 8014528:	f7ec faf6 	bl	8000b18 <__aeabi_dcmple>
 801452c:	b900      	cbnz	r0, 8014530 <GUI_Touch_Processing+0x3998>
 801452e:	4683      	mov	fp, r0
 8014530:	ea0a 030b 	and.w	r3, sl, fp
 8014534:	07d8      	lsls	r0, r3, #31
 8014536:	d525      	bpl.n	8014584 <GUI_Touch_Processing+0x39ec>
 8014538:	f1b9 0f00 	cmp.w	r9, #0
 801453c:	d022      	beq.n	8014584 <GUI_Touch_Processing+0x39ec>
					WriteSDFLASH_t(sdfile_cnt);
 801453e:	4b82      	ldr	r3, [pc, #520]	; (8014748 <GUI_Touch_Processing+0x3bb0>)
 8014540:	2100      	movs	r1, #0
 8014542:	8818      	ldrh	r0, [r3, #0]
 8014544:	f007 fc46 	bl	801bdd4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8014548:	4b80      	ldr	r3, [pc, #512]	; (801474c <GUI_Touch_Processing+0x3bb4>)
 801454a:	781a      	ldrb	r2, [r3, #0]
 801454c:	4b80      	ldr	r3, [pc, #512]	; (8014750 <GUI_Touch_Processing+0x3bb8>)
					switch (Prev_Inf_Screen){
 801454e:	1e51      	subs	r1, r2, #1
 8014550:	2905      	cmp	r1, #5
 8014552:	d804      	bhi.n	801455e <GUI_Touch_Processing+0x39c6>
 8014554:	e8df f001 	tbb	[pc, r1]
 8014558:	0a030306 	.word	0x0a030306
 801455c:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 801455e:	701a      	strb	r2, [r3, #0]
 8014560:	f7fc bba8 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8014564:	2201      	movs	r2, #1
 8014566:	701a      	strb	r2, [r3, #0]
 8014568:	f7fc bba4 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801456c:	2204      	movs	r2, #4
 801456e:	701a      	strb	r2, [r3, #0]
 8014570:	f7fc bba0 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8014574:	2206      	movs	r2, #6
 8014576:	701a      	strb	r2, [r3, #0]
 8014578:	f7fc bb9c 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801457c:	2205      	movs	r2, #5
 801457e:	701a      	strb	r2, [r3, #0]
 8014580:	f7fc bb98 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8014584:	a364      	add	r3, pc, #400	; (adr r3, 8014718 <GUI_Touch_Processing+0x3b80>)
 8014586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801458a:	4620      	mov	r0, r4
 801458c:	4629      	mov	r1, r5
 801458e:	f04f 0a01 	mov.w	sl, #1
 8014592:	f7ec facb 	bl	8000b2c <__aeabi_dcmpge>
 8014596:	b900      	cbnz	r0, 801459a <GUI_Touch_Processing+0x3a02>
 8014598:	4682      	mov	sl, r0
 801459a:	a361      	add	r3, pc, #388	; (adr r3, 8014720 <GUI_Touch_Processing+0x3b88>)
 801459c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145a0:	4620      	mov	r0, r4
 80145a2:	4629      	mov	r1, r5
 80145a4:	f04f 0b01 	mov.w	fp, #1
 80145a8:	f7ec fab6 	bl	8000b18 <__aeabi_dcmple>
 80145ac:	b900      	cbnz	r0, 80145b0 <GUI_Touch_Processing+0x3a18>
 80145ae:	4683      	mov	fp, r0
 80145b0:	ea0a 030b 	and.w	r3, sl, fp
 80145b4:	07d9      	lsls	r1, r3, #31
 80145b6:	d503      	bpl.n	80145c0 <GUI_Touch_Processing+0x3a28>
 80145b8:	f1b9 0f00 	cmp.w	r9, #0
 80145bc:	f47c abba 	bne.w	8010d34 <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 80145c0:	2200      	movs	r2, #0
 80145c2:	4b64      	ldr	r3, [pc, #400]	; (8014754 <GUI_Touch_Processing+0x3bbc>)
 80145c4:	4630      	mov	r0, r6
 80145c6:	4639      	mov	r1, r7
 80145c8:	f04f 0401 	mov.w	r4, #1
 80145cc:	f7ec faae 	bl	8000b2c <__aeabi_dcmpge>
 80145d0:	b900      	cbnz	r0, 80145d4 <GUI_Touch_Processing+0x3a3c>
 80145d2:	4604      	mov	r4, r0
 80145d4:	a354      	add	r3, pc, #336	; (adr r3, 8014728 <GUI_Touch_Processing+0x3b90>)
 80145d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145da:	4630      	mov	r0, r6
 80145dc:	4639      	mov	r1, r7
 80145de:	f04f 0501 	mov.w	r5, #1
 80145e2:	f7ec fa99 	bl	8000b18 <__aeabi_dcmple>
 80145e6:	b900      	cbnz	r0, 80145ea <GUI_Touch_Processing+0x3a52>
 80145e8:	4605      	mov	r5, r0
 80145ea:	402c      	ands	r4, r5
 80145ec:	07e2      	lsls	r2, r4, #31
 80145ee:	f57c ab61 	bpl.w	8010cb4 <GUI_Touch_Processing+0x11c>
 80145f2:	f1b8 0f00 	cmp.w	r8, #0
 80145f6:	f47e af70 	bne.w	80134da <GUI_Touch_Processing+0x2942>
 80145fa:	f7fc bb5b 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 8*TS_Callib & Touch_x <= (270)*TS_Callib & Touch_y >=8*TS_Callib & Touch_y <=(470)*TS_Callib) // Information
 80145fe:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8014602:	f7eb ffa7 	bl	8000554 <__aeabi_i2d>
 8014606:	4680      	mov	r8, r0
 8014608:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801460c:	4689      	mov	r9, r1
 801460e:	f7eb ffa1 	bl	8000554 <__aeabi_i2d>
 8014612:	a347      	add	r3, pc, #284	; (adr r3, 8014730 <GUI_Touch_Processing+0x3b98>)
 8014614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014618:	4606      	mov	r6, r0
 801461a:	460f      	mov	r7, r1
 801461c:	4640      	mov	r0, r8
 801461e:	4649      	mov	r1, r9
 8014620:	f04f 0401 	mov.w	r4, #1
 8014624:	f7ec fa82 	bl	8000b2c <__aeabi_dcmpge>
 8014628:	b900      	cbnz	r0, 801462c <GUI_Touch_Processing+0x3a94>
 801462a:	4604      	mov	r4, r0
 801462c:	a342      	add	r3, pc, #264	; (adr r3, 8014738 <GUI_Touch_Processing+0x3ba0>)
 801462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014632:	4640      	mov	r0, r8
 8014634:	4649      	mov	r1, r9
 8014636:	f04f 0501 	mov.w	r5, #1
 801463a:	f7ec fa6d 	bl	8000b18 <__aeabi_dcmple>
 801463e:	b900      	cbnz	r0, 8014642 <GUI_Touch_Processing+0x3aaa>
 8014640:	4605      	mov	r5, r0
 8014642:	a33b      	add	r3, pc, #236	; (adr r3, 8014730 <GUI_Touch_Processing+0x3b98>)
 8014644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014648:	4630      	mov	r0, r6
 801464a:	4639      	mov	r1, r7
 801464c:	402c      	ands	r4, r5
 801464e:	f04f 0501 	mov.w	r5, #1
 8014652:	f7ec fa6b 	bl	8000b2c <__aeabi_dcmpge>
 8014656:	b900      	cbnz	r0, 801465a <GUI_Touch_Processing+0x3ac2>
 8014658:	4605      	mov	r5, r0
 801465a:	402c      	ands	r4, r5
 801465c:	07e3      	lsls	r3, r4, #31
 801465e:	f57c ab29 	bpl.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8014662:	a337      	add	r3, pc, #220	; (adr r3, 8014740 <GUI_Touch_Processing+0x3ba8>)
 8014664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014668:	4630      	mov	r0, r6
 801466a:	4639      	mov	r1, r7
 801466c:	f04f 0401 	mov.w	r4, #1
 8014670:	f7ec fa52 	bl	8000b18 <__aeabi_dcmple>
 8014674:	b900      	cbnz	r0, 8014678 <GUI_Touch_Processing+0x3ae0>
 8014676:	4604      	mov	r4, r0
 8014678:	f014 0fff 	tst.w	r4, #255	; 0xff
 801467c:	f43c ab1a 	beq.w	8010cb4 <GUI_Touch_Processing+0x11c>
					GUI_screen_state = preGUI_screen_state;
 8014680:	4b35      	ldr	r3, [pc, #212]	; (8014758 <GUI_Touch_Processing+0x3bc0>)
 8014682:	781a      	ldrb	r2, [r3, #0]
 8014684:	f88b 2000 	strb.w	r2, [fp]
					preGUI_screen_state = Information_Screen;
 8014688:	2211      	movs	r2, #17
 801468a:	701a      	strb	r2, [r3, #0]
						switch (Prev_Inf_Screen2){
 801468c:	4b33      	ldr	r3, [pc, #204]	; (801475c <GUI_Touch_Processing+0x3bc4>)
 801468e:	781b      	ldrb	r3, [r3, #0]
 8014690:	3b07      	subs	r3, #7
 8014692:	2b09      	cmp	r3, #9
 8014694:	f63c ab0e 	bhi.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8014698:	a201      	add	r2, pc, #4	; (adr r2, 80146a0 <GUI_Touch_Processing+0x3b08>)
 801469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801469e:	bf00      	nop
 80146a0:	080146c9 	.word	0x080146c9
 80146a4:	08010cb5 	.word	0x08010cb5
 80146a8:	08010cb5 	.word	0x08010cb5
 80146ac:	08010cb5 	.word	0x08010cb5
 80146b0:	08010cb5 	.word	0x08010cb5
 80146b4:	080146d9 	.word	0x080146d9
 80146b8:	08010cb5 	.word	0x08010cb5
 80146bc:	080146e9 	.word	0x080146e9
 80146c0:	08010cb5 	.word	0x08010cb5
 80146c4:	080146f9 	.word	0x080146f9
						case DataSet1_Screen: GUI_screen_state = DataSet1_Screen; 	Prev_Inf_Screen = Measure_Screen;	break;
 80146c8:	2307      	movs	r3, #7
 80146ca:	f88b 3000 	strb.w	r3, [fp]
 80146ce:	4b1f      	ldr	r3, [pc, #124]	; (801474c <GUI_Touch_Processing+0x3bb4>)
 80146d0:	2201      	movs	r2, #1
 80146d2:	701a      	strb	r2, [r3, #0]
 80146d4:	f7fc baee 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case GraphSet1_Screen: GUI_screen_state = GraphSet1_Screen; Prev_Inf_Screen = Graph_Screen; 		break;
 80146d8:	230c      	movs	r3, #12
 80146da:	f88b 3000 	strb.w	r3, [fp]
 80146de:	4b1b      	ldr	r3, [pc, #108]	; (801474c <GUI_Touch_Processing+0x3bb4>)
 80146e0:	2204      	movs	r2, #4
 80146e2:	701a      	strb	r2, [r3, #0]
 80146e4:	f7fc bae6 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case ColorSet1_Screen: GUI_screen_state = ColorSet1_Screen; Prev_Inf_Screen = Color_Screen; break;
 80146e8:	230e      	movs	r3, #14
 80146ea:	f88b 3000 	strb.w	r3, [fp]
 80146ee:	4b17      	ldr	r3, [pc, #92]	; (801474c <GUI_Touch_Processing+0x3bb4>)
 80146f0:	2205      	movs	r2, #5
 80146f2:	701a      	strb	r2, [r3, #0]
 80146f4:	f7fc bade 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
						case ColorRendSet_Screen: GUI_screen_state = ColorRendSet_Screen; Prev_Inf_Screen = Color_Rendition_Screen; break;
 80146f8:	2310      	movs	r3, #16
 80146fa:	f88b 3000 	strb.w	r3, [fp]
 80146fe:	4b13      	ldr	r3, [pc, #76]	; (801474c <GUI_Touch_Processing+0x3bb4>)
 8014700:	2206      	movs	r2, #6
 8014702:	701a      	strb	r2, [r3, #0]
 8014704:	f7fc bad6 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
		default: preGUI_screen_state = Measure_Screen;
 8014708:	4b13      	ldr	r3, [pc, #76]	; (8014758 <GUI_Touch_Processing+0x3bc0>)
 801470a:	2201      	movs	r2, #1
 801470c:	701a      	strb	r2, [r3, #0]
 801470e:	f7fc bad1 	b.w	8010cb4 <GUI_Touch_Processing+0x11c>
 8014712:	bf00      	nop
 8014714:	f3af 8000 	nop.w
 8014718:	00000000 	.word	0x00000000
 801471c:	40623800 	.word	0x40623800
 8014720:	99999999 	.word	0x99999999
 8014724:	40720d99 	.word	0x40720d99
 8014728:	00000000 	.word	0x00000000
 801472c:	4073e000 	.word	0x4073e000
 8014730:	33333333 	.word	0x33333333
 8014734:	40353333 	.word	0x40353333
 8014738:	00000000 	.word	0x00000000
 801473c:	40865c00 	.word	0x40865c00
 8014740:	00000000 	.word	0x00000000
 8014744:	40937600 	.word	0x40937600
 8014748:	200052a6 	.word	0x200052a6
 801474c:	2008c315 	.word	0x2008c315
 8014750:	20005279 	.word	0x20005279
 8014754:	406a8000 	.word	0x406a8000
 8014758:	2000022a 	.word	0x2000022a
 801475c:	2008c8b8 	.word	0x2008c8b8
 8014760:	66666666 	.word	0x66666666
 8014764:	4081f866 	.word	0x4081f866
 8014768:	33333333 	.word	0x33333333
 801476c:	40867133 	.word	0x40867133
 8014770:	33333333 	.word	0x33333333
 8014774:	40053333 	.word	0x40053333

08014778 <GUI_Bluetooth_Logo>:

extern UART_HandleTypeDef hlpuart1;
extern uint8_t BluetoothStat;

void GUI_Bluetooth_Logo(uint16_t X, uint16_t Y)
{
 8014778:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 801477c:	f101 031e 	add.w	r3, r1, #30
{
 8014780:	460c      	mov	r4, r1
 8014782:	4605      	mov	r5, r0
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8014784:	f100 0214 	add.w	r2, r0, #20
 8014788:	2605      	movs	r6, #5
 801478a:	f241 3776 	movw	r7, #4982	; 0x1376
 801478e:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8014792:	b29b      	uxth	r3, r3
 8014794:	b292      	uxth	r2, r2
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8014796:	f105 060a 	add.w	r6, r5, #10
 801479a:	f104 0a1a 	add.w	sl, r4, #26
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 801479e:	f009 ff41 	bl	801e624 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 80147a2:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80147a6:	b2b6      	uxth	r6, r6
 80147a8:	fa1f fa8a 	uxth.w	sl, sl
 80147ac:	1d21      	adds	r1, r4, #4
 80147ae:	4653      	mov	r3, sl
 80147b0:	4632      	mov	r2, r6
 80147b2:	4630      	mov	r0, r6
 80147b4:	f8cd 8000 	str.w	r8, [sp]
 80147b8:	b289      	uxth	r1, r1
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80147ba:	f105 070f 	add.w	r7, r5, #15
 80147be:	f104 090b 	add.w	r9, r4, #11
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 80147c2:	f009 fd4d 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80147c6:	b2bf      	uxth	r7, r7
 80147c8:	fa1f f989 	uxth.w	r9, r9
 80147cc:	1d61      	adds	r1, r4, #5
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 80147ce:	3506      	adds	r5, #6
 80147d0:	3414      	adds	r4, #20
 80147d2:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80147d4:	464b      	mov	r3, r9
 80147d6:	463a      	mov	r2, r7
 80147d8:	4630      	mov	r0, r6
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 80147da:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80147dc:	f8cd 8000 	str.w	r8, [sp]
 80147e0:	b289      	uxth	r1, r1
 80147e2:	f009 fd3d 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 80147e6:	464b      	mov	r3, r9
 80147e8:	463a      	mov	r2, r7
 80147ea:	4621      	mov	r1, r4
 80147ec:	4628      	mov	r0, r5
 80147ee:	f8cd 8000 	str.w	r8, [sp]
 80147f2:	f009 fd35 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+15, Y+20, TFT_White);
 80147f6:	4623      	mov	r3, r4
 80147f8:	463a      	mov	r2, r7
 80147fa:	4649      	mov	r1, r9
 80147fc:	4628      	mov	r0, r5
 80147fe:	f8cd 8000 	str.w	r8, [sp]
 8014802:	f009 fd2d 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+26, X+15, Y+20,TFT_White);
 8014806:	f8cd 8000 	str.w	r8, [sp]
 801480a:	4623      	mov	r3, r4
 801480c:	463a      	mov	r2, r7
 801480e:	4651      	mov	r1, sl
 8014810:	4630      	mov	r0, r6
 8014812:	f009 fd25 	bl	801e260 <TFT_DrawLine>
}
 8014816:	b002      	add	sp, #8
 8014818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801481c <GUI_Button_Settings>:


void GUI_Button_Settings(uint16_t X, uint16_t Y)
{
 801481c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014820:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8014824:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014826:	f100 0236 	add.w	r2, r0, #54	; 0x36
 801482a:	f241 3676 	movw	r6, #4982	; 0x1376
{
 801482e:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014830:	9600      	str	r6, [sp, #0]
 8014832:	b29b      	uxth	r3, r3
 8014834:	b292      	uxth	r2, r2
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 8014836:	f105 0608 	add.w	r6, r5, #8
 801483a:	352f      	adds	r5, #47	; 0x2f
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801483c:	f009 fd6d 	bl	801e31a <TFT_FillRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 8014840:	b2b6      	uxth	r6, r6
 8014842:	b2ad      	uxth	r5, r5
 8014844:	2702      	movs	r7, #2
 8014846:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801484a:	f104 0313 	add.w	r3, r4, #19
 801484e:	f104 010d 	add.w	r1, r4, #13
 8014852:	462a      	mov	r2, r5
 8014854:	4630      	mov	r0, r6
 8014856:	e88d 0180 	stmia.w	sp, {r7, r8}
 801485a:	b29b      	uxth	r3, r3
 801485c:	b289      	uxth	r1, r1
 801485e:	f009 fee1 	bl	801e624 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+25, X+47, Y+31, 2, TFT_White);
 8014862:	f104 031f 	add.w	r3, r4, #31
 8014866:	f104 0119 	add.w	r1, r4, #25
 801486a:	462a      	mov	r2, r5
 801486c:	4630      	mov	r0, r6
 801486e:	e88d 0180 	stmia.w	sp, {r7, r8}
 8014872:	b29b      	uxth	r3, r3
 8014874:	b289      	uxth	r1, r1
 8014876:	f009 fed5 	bl	801e624 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+37, X+47, Y+43, 2, TFT_White);
 801487a:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 801487e:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8014882:	e88d 0180 	stmia.w	sp, {r7, r8}
 8014886:	b29b      	uxth	r3, r3
 8014888:	462a      	mov	r2, r5
 801488a:	b289      	uxth	r1, r1
 801488c:	4630      	mov	r0, r6
 801488e:	f009 fec9 	bl	801e624 <TFT_DrawFilledRoundedRectangle>
}
 8014892:	b002      	add	sp, #8
 8014894:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014898 <GUI_Button_Down>:

void GUI_Button_Down(uint16_t X, uint16_t Y)
{
 8014898:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801489c:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 80148a0:	4604      	mov	r4, r0
 80148a2:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80148a4:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80148a8:	f241 3676 	movw	r6, #4982	; 0x1376
 80148ac:	9600      	str	r6, [sp, #0]
 80148ae:	b29b      	uxth	r3, r3
 80148b0:	b292      	uxth	r2, r2
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 80148b2:	f105 0612 	add.w	r6, r5, #18
 80148b6:	f104 081c 	add.w	r8, r4, #28
 80148ba:	3528      	adds	r5, #40	; 0x28
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80148bc:	f009 fd2d 	bl	801e31a <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 80148c0:	b2b6      	uxth	r6, r6
 80148c2:	b2ad      	uxth	r5, r5
 80148c4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80148c8:	fa1f f888 	uxth.w	r8, r8
 80148cc:	f104 000c 	add.w	r0, r4, #12
 80148d0:	462b      	mov	r3, r5
 80148d2:	4642      	mov	r2, r8
 80148d4:	4631      	mov	r1, r6
 80148d6:	9700      	str	r7, [sp, #0]
 80148d8:	b280      	uxth	r0, r0
 80148da:	f009 fcc1 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 80148de:	f104 021d 	add.w	r2, r4, #29
 80148e2:	f104 000d 	add.w	r0, r4, #13
 80148e6:	462b      	mov	r3, r5
 80148e8:	4631      	mov	r1, r6
 80148ea:	9700      	str	r7, [sp, #0]
 80148ec:	b292      	uxth	r2, r2
 80148ee:	b280      	uxth	r0, r0
 80148f0:	f009 fcb6 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 80148f4:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 80148f8:	462b      	mov	r3, r5
 80148fa:	4642      	mov	r2, r8
 80148fc:	4631      	mov	r1, r6
 80148fe:	9700      	str	r7, [sp, #0]
 8014900:	b280      	uxth	r0, r0
 8014902:	f009 fcad 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 8014906:	f104 021b 	add.w	r2, r4, #27
 801490a:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801490e:	9700      	str	r7, [sp, #0]
 8014910:	462b      	mov	r3, r5
 8014912:	b292      	uxth	r2, r2
 8014914:	4631      	mov	r1, r6
 8014916:	b280      	uxth	r0, r0
 8014918:	f009 fca2 	bl	801e260 <TFT_DrawLine>
}
 801491c:	b002      	add	sp, #8
 801491e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014922 <GUI_Button_Down_Active>:

void GUI_Button_Down_Active(uint16_t X, uint16_t Y, uint8_t Active)
{
 8014922:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014926:	f101 0336 	add.w	r3, r1, #54	; 0x36
 801492a:	4604      	mov	r4, r0
 801492c:	460d      	mov	r5, r1
 801492e:	f100 0636 	add.w	r6, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8014932:	2a00      	cmp	r2, #0
 8014934:	d03c      	beq.n	80149b0 <GUI_Button_Down_Active+0x8e>
 8014936:	f241 3276 	movw	r2, #4982	; 0x1376
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 801493a:	9200      	str	r2, [sp, #0]
 801493c:	b29b      	uxth	r3, r3
 801493e:	b2b2      	uxth	r2, r6
	
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8014940:	f104 081c 	add.w	r8, r4, #28
 8014944:	f105 0612 	add.w	r6, r5, #18
 8014948:	3528      	adds	r5, #40	; 0x28
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 801494a:	f009 fce6 	bl	801e31a <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 801494e:	b2b6      	uxth	r6, r6
 8014950:	b2ad      	uxth	r5, r5
 8014952:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8014956:	fa1f f888 	uxth.w	r8, r8
 801495a:	f104 000c 	add.w	r0, r4, #12
 801495e:	462b      	mov	r3, r5
 8014960:	4642      	mov	r2, r8
 8014962:	4631      	mov	r1, r6
 8014964:	9700      	str	r7, [sp, #0]
 8014966:	b280      	uxth	r0, r0
 8014968:	f009 fc7a 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 801496c:	f104 021d 	add.w	r2, r4, #29
 8014970:	f104 000d 	add.w	r0, r4, #13
 8014974:	462b      	mov	r3, r5
 8014976:	4631      	mov	r1, r6
 8014978:	9700      	str	r7, [sp, #0]
 801497a:	b292      	uxth	r2, r2
 801497c:	b280      	uxth	r0, r0
 801497e:	f009 fc6f 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 8014982:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8014986:	462b      	mov	r3, r5
 8014988:	4642      	mov	r2, r8
 801498a:	4631      	mov	r1, r6
 801498c:	9700      	str	r7, [sp, #0]
 801498e:	b280      	uxth	r0, r0
 8014990:	f009 fc66 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 8014994:	f104 021b 	add.w	r2, r4, #27
 8014998:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801499c:	9700      	str	r7, [sp, #0]
 801499e:	462b      	mov	r3, r5
 80149a0:	b292      	uxth	r2, r2
 80149a2:	4631      	mov	r1, r6
 80149a4:	b280      	uxth	r0, r0
 80149a6:	f009 fc5b 	bl	801e260 <TFT_DrawLine>
}
 80149aa:	b002      	add	sp, #8
 80149ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80149b0:	f64d 721c 	movw	r2, #57116	; 0xdf1c
 80149b4:	e7c1      	b.n	801493a <GUI_Button_Down_Active+0x18>

080149b6 <GUI_Button_Right>:

void GUI_Button_Right(uint16_t X, uint16_t Y)
{
 80149b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149ba:	4604      	mov	r4, r0
 80149bc:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80149be:	f241 3676 	movw	r6, #4982	; 0x1376
 80149c2:	f101 0336 	add.w	r3, r1, #54	; 0x36
 80149c6:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80149ca:	9600      	str	r6, [sp, #0]
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80149cc:	f104 0a13 	add.w	sl, r4, #19
 80149d0:	f105 0b0c 	add.w	fp, r5, #12
 80149d4:	f104 0928 	add.w	r9, r4, #40	; 0x28
 80149d8:	f105 061b 	add.w	r6, r5, #27
 80149dc:	b2b6      	uxth	r6, r6
 80149de:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80149e2:	fa1f fa8a 	uxth.w	sl, sl
 80149e6:	fa1f fb8b 	uxth.w	fp, fp
 80149ea:	fa1f f989 	uxth.w	r9, r9
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80149ee:	b29b      	uxth	r3, r3
 80149f0:	b292      	uxth	r2, r2
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 80149f2:	f104 0712 	add.w	r7, r4, #18
 80149f6:	3427      	adds	r4, #39	; 0x27
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80149f8:	f009 fc8f 	bl	801e31a <TFT_FillRectangle>
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 80149fc:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80149fe:	4633      	mov	r3, r6
 8014a00:	464a      	mov	r2, r9
 8014a02:	4659      	mov	r1, fp
 8014a04:	4650      	mov	r0, sl
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8014a06:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8014a08:	f8cd 8000 	str.w	r8, [sp]
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8014a0c:	352a      	adds	r5, #42	; 0x2a
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 8014a0e:	f009 fc27 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8014a12:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8014a14:	4633      	mov	r3, r6
 8014a16:	4622      	mov	r2, r4
 8014a18:	4659      	mov	r1, fp
 8014a1a:	4638      	mov	r0, r7
 8014a1c:	f8cd 8000 	str.w	r8, [sp]
 8014a20:	f009 fc1e 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8014a24:	462b      	mov	r3, r5
 8014a26:	4652      	mov	r2, sl
 8014a28:	4631      	mov	r1, r6
 8014a2a:	4648      	mov	r0, r9
 8014a2c:	f8cd 8000 	str.w	r8, [sp]
 8014a30:	f009 fc16 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+39, Y+27, X+18, Y+42, TFT_White);
 8014a34:	f8cd 8000 	str.w	r8, [sp]
 8014a38:	462b      	mov	r3, r5
 8014a3a:	463a      	mov	r2, r7
 8014a3c:	4631      	mov	r1, r6
 8014a3e:	4620      	mov	r0, r4
 8014a40:	f009 fc0e 	bl	801e260 <TFT_DrawLine>
}
 8014a44:	b003      	add	sp, #12
 8014a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a4a <GUI_Button_TFT_On_Off>:

void GUI_Button_TFT_On_Off(uint16_t X, uint16_t Y)
{
 8014a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014a4c:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8014a50:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8014a54:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8014a58:	4604      	mov	r4, r0
 8014a5a:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014a5c:	9600      	str	r6, [sp, #0]
 8014a5e:	b29b      	uxth	r3, r3
 8014a60:	b292      	uxth	r2, r2
 8014a62:	f009 fc5a 	bl	801e31a <TFT_FillRectangle>
	TFT_DrawRectangle(X+8, Y+16, X+48, Y+39, TFT_White);
 8014a66:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8014a6a:	f105 0327 	add.w	r3, r5, #39	; 0x27
 8014a6e:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8014a72:	f105 0110 	add.w	r1, r5, #16
 8014a76:	f104 0008 	add.w	r0, r4, #8
 8014a7a:	9600      	str	r6, [sp, #0]
 8014a7c:	b29b      	uxth	r3, r3
 8014a7e:	b292      	uxth	r2, r2
 8014a80:	b289      	uxth	r1, r1
 8014a82:	b280      	uxth	r0, r0
 8014a84:	f009 fc61 	bl	801e34a <TFT_DrawRectangle>
	TFT_DrawLine(X+6, Y+5, X+51, Y+48, TFT_White);
 8014a88:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8014a8c:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8014a90:	1d69      	adds	r1, r5, #5
 8014a92:	1da0      	adds	r0, r4, #6
 8014a94:	9600      	str	r6, [sp, #0]
 8014a96:	b29b      	uxth	r3, r3
 8014a98:	b292      	uxth	r2, r2
 8014a9a:	b289      	uxth	r1, r1
 8014a9c:	b280      	uxth	r0, r0
 8014a9e:	f009 fbdf 	bl	801e260 <TFT_DrawLine>
}
 8014aa2:	b002      	add	sp, #8
 8014aa4:	bd70      	pop	{r4, r5, r6, pc}

08014aa6 <GUI_Button_TFT_Rotate>:

void GUI_Button_TFT_Rotate(uint16_t X, uint16_t Y)
{
 8014aa6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014aaa:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8014aae:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014ab0:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8014ab4:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8014ab8:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014aba:	9600      	str	r6, [sp, #0]
 8014abc:	b29b      	uxth	r3, r3
 8014abe:	b292      	uxth	r2, r2
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8014ac0:	f105 071c 	add.w	r7, r5, #28
 8014ac4:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014ac8:	f009 fc27 	bl	801e31a <TFT_FillRectangle>
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8014acc:	b2bf      	uxth	r7, r7
 8014ace:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 8014ad2:	f104 0109 	add.w	r1, r4, #9
 8014ad6:	f105 0009 	add.w	r0, r5, #9
 8014ada:	463a      	mov	r2, r7
 8014adc:	9600      	str	r6, [sp, #0]
 8014ade:	b29b      	uxth	r3, r3
 8014ae0:	b289      	uxth	r1, r1
 8014ae2:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 8014ae4:	f104 081e 	add.w	r8, r4, #30
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8014ae8:	f009 fc2f 	bl	801e34a <TFT_DrawRectangle>
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 8014aec:	fa1f f888 	uxth.w	r8, r8
 8014af0:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8014af4:	f105 0231 	add.w	r2, r5, #49	; 0x31
 8014af8:	f105 0012 	add.w	r0, r5, #18
 8014afc:	4641      	mov	r1, r8
 8014afe:	9600      	str	r6, [sp, #0]
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	b292      	uxth	r2, r2
 8014b04:	b280      	uxth	r0, r0
 8014b06:	f009 fc20 	bl	801e34a <TFT_DrawRectangle>
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
	
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8014b0a:	f105 0921 	add.w	r9, r5, #33	; 0x21
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 8014b0e:	fa0f f188 	sxth.w	r1, r8
 8014b12:	b238      	sxth	r0, r7
 8014b14:	9600      	str	r6, [sp, #0]
 8014b16:	2302      	movs	r3, #2
 8014b18:	2210      	movs	r2, #16
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8014b1a:	f105 071d 	add.w	r7, r5, #29
 8014b1e:	f104 080e 	add.w	r8, r4, #14
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 8014b22:	f009 fa53 	bl	801dfcc <TFT_DrawCircleCorner>
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8014b26:	b2bf      	uxth	r7, r7
 8014b28:	fa1f f888 	uxth.w	r8, r8
 8014b2c:	fa1f f989 	uxth.w	r9, r9
 8014b30:	f104 0313 	add.w	r3, r4, #19
 8014b34:	464a      	mov	r2, r9
 8014b36:	4641      	mov	r1, r8
 8014b38:	4638      	mov	r0, r7
 8014b3a:	9600      	str	r6, [sp, #0]
 8014b3c:	b29b      	uxth	r3, r3
 8014b3e:	f009 fb8f 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 8014b42:	f104 030b 	add.w	r3, r4, #11
 8014b46:	464a      	mov	r2, r9
 8014b48:	4641      	mov	r1, r8
 8014b4a:	4638      	mov	r0, r7
 8014b4c:	9600      	str	r6, [sp, #0]
 8014b4e:	b29b      	uxth	r3, r3
	
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 8014b50:	f105 072c 	add.w	r7, r5, #44	; 0x2c
 8014b54:	f104 081d 	add.w	r8, r4, #29
 8014b58:	3419      	adds	r4, #25
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 8014b5a:	f009 fb81 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 8014b5e:	b2bf      	uxth	r7, r7
 8014b60:	fa1f f888 	uxth.w	r8, r8
 8014b64:	b2a4      	uxth	r4, r4
 8014b66:	f105 0227 	add.w	r2, r5, #39	; 0x27
 8014b6a:	4623      	mov	r3, r4
 8014b6c:	4641      	mov	r1, r8
 8014b6e:	4638      	mov	r0, r7
 8014b70:	9600      	str	r6, [sp, #0]
 8014b72:	b292      	uxth	r2, r2
 8014b74:	f009 fb74 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+47, Y+25, TFT_White);
 8014b78:	f105 022f 	add.w	r2, r5, #47	; 0x2f
 8014b7c:	9600      	str	r6, [sp, #0]
 8014b7e:	4623      	mov	r3, r4
 8014b80:	b292      	uxth	r2, r2
 8014b82:	4641      	mov	r1, r8
 8014b84:	4638      	mov	r0, r7
 8014b86:	f009 fb6b 	bl	801e260 <TFT_DrawLine>
}
 8014b8a:	b003      	add	sp, #12
 8014b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014b90 <GUI_Button_SD_Card>:

void GUI_Button_SD_Card(uint16_t X, uint16_t Y, uint8_t Active)
{
 8014b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b94:	b085      	sub	sp, #20
 8014b96:	4604      	mov	r4, r0
	
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8014b98:	9203      	str	r2, [sp, #12]
 8014b9a:	9e03      	ldr	r6, [sp, #12]
{
 8014b9c:	460d      	mov	r5, r1
 8014b9e:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8014ba2:	f100 0236 	add.w	r2, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8014ba6:	2e00      	cmp	r6, #0
 8014ba8:	f000 80b6 	beq.w	8014d18 <GUI_Button_SD_Card+0x188>
 8014bac:	f241 3676 	movw	r6, #4982	; 0x1376
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
	
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8014bb0:	f104 0715 	add.w	r7, r4, #21
 8014bb4:	f105 0b05 	add.w	fp, r5, #5
 8014bb8:	f104 092e 	add.w	r9, r4, #46	; 0x2e
 8014bbc:	f105 0a07 	add.w	sl, r5, #7
 8014bc0:	b2bf      	uxth	r7, r7
 8014bc2:	fa1f f989 	uxth.w	r9, r9
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8014bc6:	9600      	str	r6, [sp, #0]
 8014bc8:	b29b      	uxth	r3, r3
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8014bca:	f64f 76ff 	movw	r6, #65535	; 0xffff
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8014bce:	b292      	uxth	r2, r2
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8014bd0:	fa1f fb8b 	uxth.w	fp, fp
 8014bd4:	fa1f fa8a 	uxth.w	sl, sl
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8014bd8:	f009 fb9f 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8014bdc:	f105 0832 	add.w	r8, r5, #50	; 0x32
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8014be0:	464a      	mov	r2, r9
 8014be2:	4638      	mov	r0, r7
 8014be4:	4653      	mov	r3, sl
 8014be6:	4659      	mov	r1, fp
 8014be8:	9600      	str	r6, [sp, #0]
 8014bea:	f009 fb96 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8014bee:	fa1f f888 	uxth.w	r8, r8
 8014bf2:	f105 0108 	add.w	r1, r5, #8
 8014bf6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8014bfa:	4643      	mov	r3, r8
 8014bfc:	464a      	mov	r2, r9
 8014bfe:	b289      	uxth	r1, r1
 8014c00:	b280      	uxth	r0, r0
 8014c02:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 8014c04:	f104 090a 	add.w	r9, r4, #10
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8014c08:	f009 fb87 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 8014c0c:	fa1f f989 	uxth.w	r9, r9
 8014c10:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8014c14:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8014c18:	4643      	mov	r3, r8
 8014c1a:	464a      	mov	r2, r9
 8014c1c:	b289      	uxth	r1, r1
 8014c1e:	b280      	uxth	r0, r0
 8014c20:	9600      	str	r6, [sp, #0]
 8014c22:	f009 fb7a 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X+10, Y+16, X+12, Y+47, TFT_White);
 8014c26:	f104 030c 	add.w	r3, r4, #12
 8014c2a:	b29b      	uxth	r3, r3
 8014c2c:	f105 0810 	add.w	r8, r5, #16
 8014c30:	fa1f f888 	uxth.w	r8, r8
 8014c34:	9302      	str	r3, [sp, #8]
 8014c36:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 8014c3a:	4641      	mov	r1, r8
 8014c3c:	4648      	mov	r0, r9
 8014c3e:	b29b      	uxth	r3, r3
 8014c40:	9a02      	ldr	r2, [sp, #8]
 8014c42:	9600      	str	r6, [sp, #0]
 8014c44:	f009 fb69 	bl	801e31a <TFT_FillRectangle>
	
	TFT_DrawLine(X+10, Y+16, X+21, Y+5, TFT_White);
 8014c48:	463a      	mov	r2, r7
 8014c4a:	4641      	mov	r1, r8
 8014c4c:	4648      	mov	r0, r9
 8014c4e:	465b      	mov	r3, fp
 8014c50:	9600      	str	r6, [sp, #0]
 8014c52:	f009 fb05 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+16, X+21, Y+6, TFT_White);
 8014c56:	1dab      	adds	r3, r5, #6
 8014c58:	f104 000b 	add.w	r0, r4, #11
 8014c5c:	463a      	mov	r2, r7
 8014c5e:	4641      	mov	r1, r8
 8014c60:	b29b      	uxth	r3, r3
 8014c62:	b280      	uxth	r0, r0
 8014c64:	9600      	str	r6, [sp, #0]
 8014c66:	f009 fafb 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
	
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8014c6a:	f105 0913 	add.w	r9, r5, #19
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8014c6e:	463a      	mov	r2, r7
 8014c70:	4641      	mov	r1, r8
 8014c72:	4653      	mov	r3, sl
 8014c74:	9802      	ldr	r0, [sp, #8]
 8014c76:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8014c78:	f105 080d 	add.w	r8, r5, #13
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8014c7c:	f009 faf0 	bl	801e260 <TFT_DrawLine>
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8014c80:	fa1f f888 	uxth.w	r8, r8
 8014c84:	fa1f f989 	uxth.w	r9, r9
 8014c88:	f104 0013 	add.w	r0, r4, #19
 8014c8c:	463a      	mov	r2, r7
 8014c8e:	464b      	mov	r3, r9
 8014c90:	4641      	mov	r1, r8
 8014c92:	b280      	uxth	r0, r0
 8014c94:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 8014c96:	f104 071b 	add.w	r7, r4, #27
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8014c9a:	f009 fb3e 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 8014c9e:	b2bf      	uxth	r7, r7
 8014ca0:	f104 0019 	add.w	r0, r4, #25
 8014ca4:	464b      	mov	r3, r9
 8014ca6:	463a      	mov	r2, r7
 8014ca8:	4641      	mov	r1, r8
 8014caa:	b280      	uxth	r0, r0
 8014cac:	9600      	str	r6, [sp, #0]
 8014cae:	f009 fb34 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X+31, Y+13, X+33, Y+19, TFT_White);
 8014cb2:	f104 0221 	add.w	r2, r4, #33	; 0x21
 8014cb6:	f104 001f 	add.w	r0, r4, #31
 8014cba:	464b      	mov	r3, r9
 8014cbc:	b292      	uxth	r2, r2
 8014cbe:	4641      	mov	r1, r8
 8014cc0:	b280      	uxth	r0, r0
 8014cc2:	9600      	str	r6, [sp, #0]
 8014cc4:	f009 fb29 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X+37, Y+13, X+39, Y+19, TFT_White);
 8014cc8:	f104 0227 	add.w	r2, r4, #39	; 0x27
 8014ccc:	f104 0025 	add.w	r0, r4, #37	; 0x25
 8014cd0:	464b      	mov	r3, r9
 8014cd2:	b292      	uxth	r2, r2
 8014cd4:	4641      	mov	r1, r8
 8014cd6:	b280      	uxth	r0, r0
 8014cd8:	9600      	str	r6, [sp, #0]
 8014cda:	f009 fb1e 	bl	801e31a <TFT_FillRectangle>
	
	TFT_SetFont(&Font20);
 8014cde:	4811      	ldr	r0, [pc, #68]	; (8014d24 <GUI_Button_SD_Card+0x194>)
 8014ce0:	f009 fd44 	bl	801e76c <TFT_SetFont>
	TFT_SetTextColor(TFT_White);
 8014ce4:	4630      	mov	r0, r6
 8014ce6:	f009 fd47 	bl	801e778 <TFT_SetTextColor>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8014cea:	9b03      	ldr	r3, [sp, #12]
 8014cec:	b1bb      	cbz	r3, 8014d1e <GUI_Button_SD_Card+0x18e>
 8014cee:	f241 3076 	movw	r0, #4982	; 0x1376
	TFT_DrawChar(X+16, Y+28, 'S');
 8014cf2:	351c      	adds	r5, #28
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8014cf4:	f009 fd46 	bl	801e784 <TFT_SetBackColor>
	TFT_DrawChar(X+16, Y+28, 'S');
 8014cf8:	b2ad      	uxth	r5, r5
 8014cfa:	f104 0010 	add.w	r0, r4, #16
 8014cfe:	4629      	mov	r1, r5
 8014d00:	2253      	movs	r2, #83	; 0x53
 8014d02:	b280      	uxth	r0, r0
 8014d04:	f009 fdfc 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+28, 'D');
 8014d08:	2244      	movs	r2, #68	; 0x44
 8014d0a:	4629      	mov	r1, r5
 8014d0c:	4638      	mov	r0, r7
}
 8014d0e:	b005      	add	sp, #20
 8014d10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawChar(X+27, Y+28, 'D');
 8014d14:	f009 bdf4 	b.w	801e900 <TFT_DrawChar>
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8014d18:	f64d 761c 	movw	r6, #57116	; 0xdf1c
 8014d1c:	e748      	b.n	8014bb0 <GUI_Button_SD_Card+0x20>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8014d1e:	f64d 701c 	movw	r0, #57116	; 0xdf1c
 8014d22:	e7e6      	b.n	8014cf2 <GUI_Button_SD_Card+0x162>
 8014d24:	200001e0 	.word	0x200001e0

08014d28 <GUI_Button_Measure_Start_Pause>:

void GUI_Button_Measure_Start_Pause(uint16_t X, uint16_t Y)
{
 8014d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d2c:	b085      	sub	sp, #20
 8014d2e:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014d30:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8014d34:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8014d38:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8014d3c:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014d3e:	9600      	str	r6, [sp, #0]
 8014d40:	b29b      	uxth	r3, r3
 8014d42:	b292      	uxth	r2, r2
	
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 8014d44:	f104 090b 	add.w	r9, r4, #11
 8014d48:	f104 072b 	add.w	r7, r4, #43	; 0x2b
 8014d4c:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014d50:	f009 fae3 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 8014d54:	fa1f f989 	uxth.w	r9, r9
 8014d58:	b2bf      	uxth	r7, r7
 8014d5a:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8014d5e:	f105 0023 	add.w	r0, r5, #35	; 0x23
 8014d62:	463b      	mov	r3, r7
 8014d64:	4649      	mov	r1, r9
 8014d66:	9600      	str	r6, [sp, #0]
 8014d68:	b292      	uxth	r2, r2
 8014d6a:	b280      	uxth	r0, r0
 8014d6c:	f009 fad5 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 8014d70:	f105 0232 	add.w	r2, r5, #50	; 0x32
 8014d74:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8014d78:	463b      	mov	r3, r7
 8014d7a:	4649      	mov	r1, r9
 8014d7c:	9600      	str	r6, [sp, #0]
 8014d7e:	b292      	uxth	r2, r2
 8014d80:	b280      	uxth	r0, r0
	
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8014d82:	f105 0806 	add.w	r8, r5, #6
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 8014d86:	f009 fac8 	bl	801e31a <TFT_FillRectangle>
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8014d8a:	fa1f f888 	uxth.w	r8, r8
 8014d8e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 8014d92:	f105 0a1e 	add.w	sl, r5, #30
 8014d96:	f104 0b1b 	add.w	fp, r4, #27
 8014d9a:	fa1f fa8a 	uxth.w	sl, sl
 8014d9e:	fa1f fb8b 	uxth.w	fp, fp
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8014da2:	b29b      	uxth	r3, r3
 8014da4:	4642      	mov	r2, r8
 8014da6:	4649      	mov	r1, r9
 8014da8:	4640      	mov	r0, r8
 8014daa:	9600      	str	r6, [sp, #0]
 8014dac:	9303      	str	r3, [sp, #12]
 8014dae:	f009 fa57 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 8014db2:	465b      	mov	r3, fp
 8014db4:	4652      	mov	r2, sl
 8014db6:	4649      	mov	r1, r9
 8014db8:	4640      	mov	r0, r8
 8014dba:	9600      	str	r6, [sp, #0]
 8014dbc:	f009 fa50 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+44, X+30, Y+27, TFT_White);
 8014dc0:	465b      	mov	r3, fp
 8014dc2:	4652      	mov	r2, sl
 8014dc4:	9903      	ldr	r1, [sp, #12]
 8014dc6:	9600      	str	r6, [sp, #0]
 8014dc8:	4640      	mov	r0, r8
 8014dca:	f009 fa49 	bl	801e260 <TFT_DrawLine>
	
	//paint white
	TFT_DrawLine(X+7, Y+12, X+7, Y+43, TFT_White);
 8014dce:	f104 080c 	add.w	r8, r4, #12
 8014dd2:	1dea      	adds	r2, r5, #7
 8014dd4:	b292      	uxth	r2, r2
 8014dd6:	fa1f f888 	uxth.w	r8, r8
 8014dda:	463b      	mov	r3, r7
 8014ddc:	4641      	mov	r1, r8
 8014dde:	4610      	mov	r0, r2
 8014de0:	9600      	str	r6, [sp, #0]
 8014de2:	f009 fa3d 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+8, Y+12, X+8, Y+43, TFT_White);
 8014de6:	f105 0208 	add.w	r2, r5, #8
 8014dea:	b292      	uxth	r2, r2
 8014dec:	463b      	mov	r3, r7
 8014dee:	4641      	mov	r1, r8
 8014df0:	4610      	mov	r0, r2
 8014df2:	9600      	str	r6, [sp, #0]
 8014df4:	f009 fa34 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+9, Y+13, X+9, Y+42, TFT_White);
 8014df8:	f105 0209 	add.w	r2, r5, #9
 8014dfc:	b292      	uxth	r2, r2
 8014dfe:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 8014e02:	f104 010d 	add.w	r1, r4, #13
 8014e06:	4610      	mov	r0, r2
 8014e08:	9600      	str	r6, [sp, #0]
 8014e0a:	b29b      	uxth	r3, r3
 8014e0c:	b289      	uxth	r1, r1
 8014e0e:	f009 fa27 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+14, X+10, Y+41, TFT_White);
 8014e12:	f104 080e 	add.w	r8, r4, #14
 8014e16:	f105 020a 	add.w	r2, r5, #10
 8014e1a:	b292      	uxth	r2, r2
 8014e1c:	fa1f f888 	uxth.w	r8, r8
 8014e20:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8014e24:	4641      	mov	r1, r8
 8014e26:	4610      	mov	r0, r2
 8014e28:	9600      	str	r6, [sp, #0]
 8014e2a:	b29b      	uxth	r3, r3
 8014e2c:	f009 fa18 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+14, X+11, Y+40, TFT_White);
 8014e30:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8014e34:	f105 020b 	add.w	r2, r5, #11
 8014e38:	b292      	uxth	r2, r2
 8014e3a:	b2bf      	uxth	r7, r7
 8014e3c:	463b      	mov	r3, r7
 8014e3e:	4641      	mov	r1, r8
 8014e40:	4610      	mov	r0, r2
 8014e42:	9600      	str	r6, [sp, #0]
 8014e44:	f009 fa0c 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+15, X+12, Y+40, TFT_White);
 8014e48:	f105 020c 	add.w	r2, r5, #12
 8014e4c:	b292      	uxth	r2, r2
 8014e4e:	f104 010f 	add.w	r1, r4, #15
 8014e52:	463b      	mov	r3, r7
 8014e54:	4610      	mov	r0, r2
 8014e56:	9600      	str	r6, [sp, #0]
 8014e58:	b289      	uxth	r1, r1
 8014e5a:	f009 fa01 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+16, X+13, Y+39, TFT_White);
 8014e5e:	f104 0810 	add.w	r8, r4, #16
 8014e62:	f105 020d 	add.w	r2, r5, #13
 8014e66:	b292      	uxth	r2, r2
 8014e68:	fa1f f888 	uxth.w	r8, r8
 8014e6c:	f104 0327 	add.w	r3, r4, #39	; 0x27
 8014e70:	4641      	mov	r1, r8
 8014e72:	4610      	mov	r0, r2
 8014e74:	9600      	str	r6, [sp, #0]
 8014e76:	b29b      	uxth	r3, r3
 8014e78:	f009 f9f2 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+16, X+14, Y+38, TFT_White);
 8014e7c:	f104 0726 	add.w	r7, r4, #38	; 0x26
 8014e80:	f105 020e 	add.w	r2, r5, #14
 8014e84:	b292      	uxth	r2, r2
 8014e86:	b2bf      	uxth	r7, r7
 8014e88:	463b      	mov	r3, r7
 8014e8a:	4641      	mov	r1, r8
 8014e8c:	4610      	mov	r0, r2
 8014e8e:	9600      	str	r6, [sp, #0]
 8014e90:	f009 f9e6 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+17, X+15, Y+38, TFT_White);
 8014e94:	f105 020f 	add.w	r2, r5, #15
 8014e98:	b292      	uxth	r2, r2
 8014e9a:	f104 0111 	add.w	r1, r4, #17
 8014e9e:	463b      	mov	r3, r7
 8014ea0:	4610      	mov	r0, r2
 8014ea2:	9600      	str	r6, [sp, #0]
 8014ea4:	b289      	uxth	r1, r1
 8014ea6:	f009 f9db 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+18, X+16, Y+37, TFT_White);
 8014eaa:	f104 0812 	add.w	r8, r4, #18
 8014eae:	f105 0210 	add.w	r2, r5, #16
 8014eb2:	b292      	uxth	r2, r2
 8014eb4:	fa1f f888 	uxth.w	r8, r8
 8014eb8:	f104 0325 	add.w	r3, r4, #37	; 0x25
 8014ebc:	4641      	mov	r1, r8
 8014ebe:	4610      	mov	r0, r2
 8014ec0:	9600      	str	r6, [sp, #0]
 8014ec2:	b29b      	uxth	r3, r3
 8014ec4:	f009 f9cc 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+18, X+17, Y+36, TFT_White);
 8014ec8:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8014ecc:	f105 0211 	add.w	r2, r5, #17
 8014ed0:	b292      	uxth	r2, r2
 8014ed2:	b2bf      	uxth	r7, r7
 8014ed4:	463b      	mov	r3, r7
 8014ed6:	4641      	mov	r1, r8
 8014ed8:	4610      	mov	r0, r2
 8014eda:	9600      	str	r6, [sp, #0]
 8014edc:	f009 f9c0 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+19, X+18, Y+36, TFT_White);
 8014ee0:	f105 0212 	add.w	r2, r5, #18
 8014ee4:	b292      	uxth	r2, r2
 8014ee6:	f104 0113 	add.w	r1, r4, #19
 8014eea:	463b      	mov	r3, r7
 8014eec:	4610      	mov	r0, r2
 8014eee:	9600      	str	r6, [sp, #0]
 8014ef0:	b289      	uxth	r1, r1
 8014ef2:	f009 f9b5 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+20, X+19, Y+35, TFT_White);
 8014ef6:	f104 0714 	add.w	r7, r4, #20
 8014efa:	f105 0213 	add.w	r2, r5, #19
 8014efe:	b292      	uxth	r2, r2
 8014f00:	b2bf      	uxth	r7, r7
 8014f02:	f104 0323 	add.w	r3, r4, #35	; 0x23
 8014f06:	4639      	mov	r1, r7
 8014f08:	4610      	mov	r0, r2
 8014f0a:	9600      	str	r6, [sp, #0]
 8014f0c:	b29b      	uxth	r3, r3
 8014f0e:	f009 f9a7 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+20, X+20, Y+34, TFT_White);
 8014f12:	f105 0214 	add.w	r2, r5, #20
 8014f16:	b292      	uxth	r2, r2
 8014f18:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8014f1c:	4639      	mov	r1, r7
 8014f1e:	4610      	mov	r0, r2
 8014f20:	9600      	str	r6, [sp, #0]
 8014f22:	b29b      	uxth	r3, r3
 8014f24:	f009 f99c 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+21, X+21, Y+33, TFT_White);
 8014f28:	f104 0821 	add.w	r8, r4, #33	; 0x21
 8014f2c:	f105 0215 	add.w	r2, r5, #21
 8014f30:	b292      	uxth	r2, r2
 8014f32:	fa1f f888 	uxth.w	r8, r8
 8014f36:	f104 0115 	add.w	r1, r4, #21
 8014f3a:	4643      	mov	r3, r8
 8014f3c:	4610      	mov	r0, r2
 8014f3e:	9600      	str	r6, [sp, #0]
 8014f40:	b289      	uxth	r1, r1
 8014f42:	f009 f98d 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+22, X+22, Y+33, TFT_White);
 8014f46:	f104 0716 	add.w	r7, r4, #22
 8014f4a:	f105 0216 	add.w	r2, r5, #22
 8014f4e:	b292      	uxth	r2, r2
 8014f50:	b2bf      	uxth	r7, r7
 8014f52:	4643      	mov	r3, r8
 8014f54:	4639      	mov	r1, r7
 8014f56:	4610      	mov	r0, r2
 8014f58:	9600      	str	r6, [sp, #0]
 8014f5a:	f009 f981 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+22, X+23, Y+32, TFT_White);
 8014f5e:	f105 0217 	add.w	r2, r5, #23
 8014f62:	b292      	uxth	r2, r2
 8014f64:	f104 0320 	add.w	r3, r4, #32
 8014f68:	4639      	mov	r1, r7
 8014f6a:	4610      	mov	r0, r2
 8014f6c:	9600      	str	r6, [sp, #0]
 8014f6e:	b29b      	uxth	r3, r3
 8014f70:	f009 f976 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+23, X+24, Y+31, TFT_White);
 8014f74:	f104 081f 	add.w	r8, r4, #31
 8014f78:	f105 0218 	add.w	r2, r5, #24
 8014f7c:	b292      	uxth	r2, r2
 8014f7e:	fa1f f888 	uxth.w	r8, r8
 8014f82:	f104 0117 	add.w	r1, r4, #23
 8014f86:	4643      	mov	r3, r8
 8014f88:	4610      	mov	r0, r2
 8014f8a:	9600      	str	r6, [sp, #0]
 8014f8c:	b289      	uxth	r1, r1
 8014f8e:	f009 f967 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+24, X+25, Y+31, TFT_White);
 8014f92:	f104 0718 	add.w	r7, r4, #24
 8014f96:	f105 0219 	add.w	r2, r5, #25
 8014f9a:	b292      	uxth	r2, r2
 8014f9c:	b2bf      	uxth	r7, r7
 8014f9e:	4643      	mov	r3, r8
 8014fa0:	4639      	mov	r1, r7
 8014fa2:	4610      	mov	r0, r2
 8014fa4:	9600      	str	r6, [sp, #0]
 8014fa6:	f009 f95b 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+24, X+26, Y+30, TFT_White);
 8014faa:	f105 021a 	add.w	r2, r5, #26
 8014fae:	b292      	uxth	r2, r2
 8014fb0:	f104 031e 	add.w	r3, r4, #30
 8014fb4:	4639      	mov	r1, r7
 8014fb6:	4610      	mov	r0, r2
 8014fb8:	9600      	str	r6, [sp, #0]
 8014fba:	b29b      	uxth	r3, r3
 8014fbc:	f009 f950 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+25, X+27, Y+29, TFT_White);
 8014fc0:	f104 0819 	add.w	r8, r4, #25
 8014fc4:	f105 021b 	add.w	r2, r5, #27
 8014fc8:	b292      	uxth	r2, r2
 8014fca:	fa1f f888 	uxth.w	r8, r8
 8014fce:	f104 031d 	add.w	r3, r4, #29
 8014fd2:	4641      	mov	r1, r8
 8014fd4:	4610      	mov	r0, r2
 8014fd6:	9600      	str	r6, [sp, #0]
 8014fd8:	b29b      	uxth	r3, r3
 8014fda:	f009 f941 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+28, Y+25, X+28, Y+28, TFT_White);
 8014fde:	f104 071c 	add.w	r7, r4, #28
 8014fe2:	f105 021c 	add.w	r2, r5, #28
 8014fe6:	b292      	uxth	r2, r2
 8014fe8:	b2bf      	uxth	r7, r7
 8014fea:	463b      	mov	r3, r7
 8014fec:	4641      	mov	r1, r8
 8014fee:	4610      	mov	r0, r2
 8014ff0:	9600      	str	r6, [sp, #0]
 8014ff2:	f009 f935 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+26, X+29, Y+28, TFT_White);
 8014ff6:	f105 021d 	add.w	r2, r5, #29
 8014ffa:	b292      	uxth	r2, r2
 8014ffc:	f104 011a 	add.w	r1, r4, #26
 8015000:	463b      	mov	r3, r7
 8015002:	4610      	mov	r0, r2
 8015004:	9600      	str	r6, [sp, #0]
 8015006:	b289      	uxth	r1, r1
 8015008:	f009 f92a 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+30, Y+27, X+30, Y+27, TFT_White);
 801500c:	9600      	str	r6, [sp, #0]
 801500e:	465b      	mov	r3, fp
 8015010:	4652      	mov	r2, sl
 8015012:	4659      	mov	r1, fp
 8015014:	4650      	mov	r0, sl
 8015016:	f009 f923 	bl	801e260 <TFT_DrawLine>
}
 801501a:	b005      	add	sp, #20
 801501c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015020 <GUI_Button_Measure_deltaE_Small>:

void GUI_Button_Measure_deltaE_Small(uint16_t X, uint16_t Y, uint16_t Active, uint8_t color)
{
 8015020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015024:	4605      	mov	r5, r0
 8015026:	460c      	mov	r4, r1
 8015028:	f100 0623 	add.w	r6, r0, #35	; 0x23
 801502c:	f101 0723 	add.w	r7, r1, #35	; 0x23
		if(Active){
 8015030:	2a00      	cmp	r2, #0
 8015032:	f000 8111 	beq.w	8015258 <GUI_Button_Measure_deltaE_Small+0x238>
			TFT_FillRectangle(X, Y, X+35, Y+35, color == 0 ? TFT_Blue_Off:TFT_Green);
 8015036:	2b00      	cmp	r3, #0
 8015038:	f241 3276 	movw	r2, #4982	; 0x1376
 801503c:	bf18      	it	ne
 801503e:	f44f 62fc 	movne.w	r2, #2016	; 0x7e0
 8015042:	9200      	str	r2, [sp, #0]
		}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
	
	
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8015044:	f105 080a 	add.w	r8, r5, #10
 8015048:	f104 0b07 	add.w	fp, r4, #7
 801504c:	f104 091e 	add.w	r9, r4, #30
 8015050:	fa1f f888 	uxth.w	r8, r8
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8015054:	b2bb      	uxth	r3, r7
 8015056:	b2b2      	uxth	r2, r6
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8015058:	fa1f fb8b 	uxth.w	fp, fp
 801505c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8015060:	fa1f f989 	uxth.w	r9, r9
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8015064:	f105 0a1c 	add.w	sl, r5, #28
 8015068:	f104 0712 	add.w	r7, r4, #18
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 801506c:	f009 f955 	bl	801e31a <TFT_FillRectangle>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8015070:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8015072:	464b      	mov	r3, r9
 8015074:	4642      	mov	r2, r8
 8015076:	4659      	mov	r1, fp
 8015078:	4640      	mov	r0, r8
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 801507a:	fa1f fa8a 	uxth.w	sl, sl
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 801507e:	9600      	str	r6, [sp, #0]
 8015080:	f009 f8ee 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8015084:	463b      	mov	r3, r7
 8015086:	4652      	mov	r2, sl
 8015088:	4659      	mov	r1, fp
 801508a:	4640      	mov	r0, r8
 801508c:	9600      	str	r6, [sp, #0]
 801508e:	f009 f8e7 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+30, X+28, Y+18, TFT_White);
 8015092:	463b      	mov	r3, r7
 8015094:	4652      	mov	r2, sl
 8015096:	4649      	mov	r1, r9
 8015098:	4640      	mov	r0, r8
 801509a:	9600      	str	r6, [sp, #0]
 801509c:	f009 f8e0 	bl	801e260 <TFT_DrawLine>
	
	//paint
	TFT_DrawLine(X+11, Y+8, X+11, Y+29, TFT_White);
 80150a0:	f105 020b 	add.w	r2, r5, #11
 80150a4:	b292      	uxth	r2, r2
 80150a6:	f104 031d 	add.w	r3, r4, #29
 80150aa:	f104 0108 	add.w	r1, r4, #8
 80150ae:	4610      	mov	r0, r2
 80150b0:	9600      	str	r6, [sp, #0]
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	b289      	uxth	r1, r1
 80150b6:	f009 f8d3 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+9, X+12, Y+28, TFT_White);
 80150ba:	f104 091c 	add.w	r9, r4, #28
 80150be:	f105 020c 	add.w	r2, r5, #12
 80150c2:	b292      	uxth	r2, r2
 80150c4:	fa1f f989 	uxth.w	r9, r9
 80150c8:	f104 0109 	add.w	r1, r4, #9
 80150cc:	464b      	mov	r3, r9
 80150ce:	4610      	mov	r0, r2
 80150d0:	9600      	str	r6, [sp, #0]
 80150d2:	b289      	uxth	r1, r1
 80150d4:	f009 f8c4 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+10, X+13, Y+28, TFT_White);
 80150d8:	f104 080a 	add.w	r8, r4, #10
 80150dc:	f105 020d 	add.w	r2, r5, #13
 80150e0:	b292      	uxth	r2, r2
 80150e2:	fa1f f888 	uxth.w	r8, r8
 80150e6:	464b      	mov	r3, r9
 80150e8:	4641      	mov	r1, r8
 80150ea:	4610      	mov	r0, r2
 80150ec:	9600      	str	r6, [sp, #0]
 80150ee:	f009 f8b7 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+10, X+14, Y+27, TFT_White);
 80150f2:	f105 020e 	add.w	r2, r5, #14
 80150f6:	b292      	uxth	r2, r2
 80150f8:	f104 031b 	add.w	r3, r4, #27
 80150fc:	4641      	mov	r1, r8
 80150fe:	4610      	mov	r0, r2
 8015100:	9600      	str	r6, [sp, #0]
 8015102:	b29b      	uxth	r3, r3
 8015104:	f009 f8ac 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+11, X+15, Y+26, TFT_White);
 8015108:	f104 091a 	add.w	r9, r4, #26
 801510c:	f105 020f 	add.w	r2, r5, #15
 8015110:	b292      	uxth	r2, r2
 8015112:	fa1f f989 	uxth.w	r9, r9
 8015116:	f104 010b 	add.w	r1, r4, #11
 801511a:	464b      	mov	r3, r9
 801511c:	4610      	mov	r0, r2
 801511e:	9600      	str	r6, [sp, #0]
 8015120:	b289      	uxth	r1, r1
 8015122:	f009 f89d 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+12, X+16, Y+26, TFT_White);
 8015126:	f104 080c 	add.w	r8, r4, #12
 801512a:	f105 0210 	add.w	r2, r5, #16
 801512e:	b292      	uxth	r2, r2
 8015130:	fa1f f888 	uxth.w	r8, r8
 8015134:	464b      	mov	r3, r9
 8015136:	4641      	mov	r1, r8
 8015138:	4610      	mov	r0, r2
 801513a:	9600      	str	r6, [sp, #0]
 801513c:	f009 f890 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+12, X+17, Y+25, TFT_White);
 8015140:	f105 0211 	add.w	r2, r5, #17
 8015144:	b292      	uxth	r2, r2
 8015146:	f104 0319 	add.w	r3, r4, #25
 801514a:	4641      	mov	r1, r8
 801514c:	4610      	mov	r0, r2
 801514e:	9600      	str	r6, [sp, #0]
 8015150:	b29b      	uxth	r3, r3
 8015152:	f009 f885 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+13, X+18, Y+24, TFT_White);
 8015156:	f105 0212 	add.w	r2, r5, #18
 801515a:	b292      	uxth	r2, r2
 801515c:	f104 0318 	add.w	r3, r4, #24
 8015160:	f104 010d 	add.w	r1, r4, #13
 8015164:	4610      	mov	r0, r2
 8015166:	9600      	str	r6, [sp, #0]
 8015168:	b29b      	uxth	r3, r3
 801516a:	b289      	uxth	r1, r1
 801516c:	f009 f878 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+14, X+19, Y+23, TFT_White);
 8015170:	f104 080e 	add.w	r8, r4, #14
 8015174:	f105 0213 	add.w	r2, r5, #19
 8015178:	f104 0917 	add.w	r9, r4, #23
 801517c:	b292      	uxth	r2, r2
 801517e:	fa1f f888 	uxth.w	r8, r8
 8015182:	fa1f f989 	uxth.w	r9, r9
 8015186:	464b      	mov	r3, r9
 8015188:	4641      	mov	r1, r8
 801518a:	4610      	mov	r0, r2
 801518c:	9600      	str	r6, [sp, #0]
 801518e:	f009 f867 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+14, X+20, Y+23, TFT_White);
 8015192:	f105 0214 	add.w	r2, r5, #20
 8015196:	b292      	uxth	r2, r2
 8015198:	464b      	mov	r3, r9
 801519a:	4641      	mov	r1, r8
 801519c:	4610      	mov	r0, r2
 801519e:	9600      	str	r6, [sp, #0]
 80151a0:	f009 f85e 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+15, X+21, Y+22, TFT_White);
 80151a4:	f104 080f 	add.w	r8, r4, #15
 80151a8:	f105 0215 	add.w	r2, r5, #21
 80151ac:	f104 0916 	add.w	r9, r4, #22
 80151b0:	b292      	uxth	r2, r2
 80151b2:	fa1f f888 	uxth.w	r8, r8
 80151b6:	fa1f f989 	uxth.w	r9, r9
 80151ba:	464b      	mov	r3, r9
 80151bc:	4641      	mov	r1, r8
 80151be:	4610      	mov	r0, r2
 80151c0:	9600      	str	r6, [sp, #0]
 80151c2:	f009 f84d 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+15, X+22, Y+22, TFT_White);
 80151c6:	f105 0216 	add.w	r2, r5, #22
 80151ca:	b292      	uxth	r2, r2
 80151cc:	464b      	mov	r3, r9
 80151ce:	4641      	mov	r1, r8
 80151d0:	4610      	mov	r0, r2
 80151d2:	9600      	str	r6, [sp, #0]
 80151d4:	f009 f844 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+16, X+23, Y+21, TFT_White);
 80151d8:	f104 0810 	add.w	r8, r4, #16
 80151dc:	f105 0217 	add.w	r2, r5, #23
 80151e0:	b292      	uxth	r2, r2
 80151e2:	fa1f f888 	uxth.w	r8, r8
 80151e6:	f104 0315 	add.w	r3, r4, #21
 80151ea:	4641      	mov	r1, r8
 80151ec:	4610      	mov	r0, r2
 80151ee:	9600      	str	r6, [sp, #0]
 80151f0:	b29b      	uxth	r3, r3
 80151f2:	f009 f835 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+16, X+24, Y+20, TFT_White);
 80151f6:	f104 0914 	add.w	r9, r4, #20
 80151fa:	f105 0218 	add.w	r2, r5, #24
 80151fe:	b292      	uxth	r2, r2
 8015200:	fa1f f989 	uxth.w	r9, r9
 8015204:	464b      	mov	r3, r9
 8015206:	4641      	mov	r1, r8
 8015208:	4610      	mov	r0, r2
 801520a:	9600      	str	r6, [sp, #0]
 801520c:	f009 f828 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+17, X+25, Y+20, TFT_White);
 8015210:	f104 0811 	add.w	r8, r4, #17
 8015214:	f105 0219 	add.w	r2, r5, #25
 8015218:	b292      	uxth	r2, r2
 801521a:	fa1f f888 	uxth.w	r8, r8
 801521e:	464b      	mov	r3, r9
 8015220:	4641      	mov	r1, r8
 8015222:	4610      	mov	r0, r2
 8015224:	9600      	str	r6, [sp, #0]
 8015226:	f009 f81b 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+17, X+26, Y+19, TFT_White);
 801522a:	3413      	adds	r4, #19
 801522c:	f105 021a 	add.w	r2, r5, #26
 8015230:	b292      	uxth	r2, r2
 8015232:	b2a4      	uxth	r4, r4
 8015234:	4623      	mov	r3, r4
 8015236:	4641      	mov	r1, r8
 8015238:	4610      	mov	r0, r2
 801523a:	9600      	str	r6, [sp, #0]
 801523c:	f009 f810 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+18, X+27, Y+19, TFT_White);
 8015240:	f105 021b 	add.w	r2, r5, #27
 8015244:	b292      	uxth	r2, r2
 8015246:	9600      	str	r6, [sp, #0]
 8015248:	4623      	mov	r3, r4
 801524a:	4639      	mov	r1, r7
 801524c:	4610      	mov	r0, r2
 801524e:	f009 f807 	bl	801e260 <TFT_DrawLine>
}
 8015252:	b003      	add	sp, #12
 8015254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8015258:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 801525c:	9300      	str	r3, [sp, #0]
 801525e:	e6f1      	b.n	8015044 <GUI_Button_Measure_deltaE_Small+0x24>

08015260 <GUI_CheckBox>:

void GUI_CheckBox(uint16_t X, uint16_t Y, uint16_t Check)
{
 8015260:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8015264:	f101 0323 	add.w	r3, r1, #35	; 0x23
{
 8015268:	4616      	mov	r6, r2
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 801526a:	f241 3876 	movw	r8, #4982	; 0x1376
 801526e:	f100 0223 	add.w	r2, r0, #35	; 0x23
 8015272:	f8cd 8000 	str.w	r8, [sp]
 8015276:	b29b      	uxth	r3, r3
 8015278:	b292      	uxth	r2, r2
{
 801527a:	4604      	mov	r4, r0
 801527c:	460d      	mov	r5, r1
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 801527e:	f009 f864 	bl	801e34a <TFT_DrawRectangle>
	if(Check)
 8015282:	b1fe      	cbz	r6, 80152c4 <GUI_CheckBox+0x64>
		{
			TFT_DrawLine(X+8, Y+17, X+16, Y+26, TFT_Blue_Off);
 8015284:	f104 0610 	add.w	r6, r4, #16
 8015288:	f105 071a 	add.w	r7, r5, #26
 801528c:	b2b6      	uxth	r6, r6
 801528e:	b2bf      	uxth	r7, r7
 8015290:	f105 0111 	add.w	r1, r5, #17
 8015294:	f104 0008 	add.w	r0, r4, #8
 8015298:	463b      	mov	r3, r7
 801529a:	4632      	mov	r2, r6
 801529c:	b289      	uxth	r1, r1
 801529e:	b280      	uxth	r0, r0
 80152a0:	f8cd 8000 	str.w	r8, [sp]
 80152a4:	f008 ffdc 	bl	801e260 <TFT_DrawLine>
			TFT_DrawLine(X+16, Y+26, X+29, Y+5, TFT_Blue_Off);
 80152a8:	1d6b      	adds	r3, r5, #5
 80152aa:	f104 021d 	add.w	r2, r4, #29
 80152ae:	f8cd 8000 	str.w	r8, [sp]
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	b292      	uxth	r2, r2
 80152b6:	4639      	mov	r1, r7
 80152b8:	4630      	mov	r0, r6
 80152ba:	f008 ffd1 	bl	801e260 <TFT_DrawLine>
		} else {
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
		}
}
 80152be:	b002      	add	sp, #8
 80152c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
 80152c4:	f105 0320 	add.w	r3, r5, #32
 80152c8:	f104 0220 	add.w	r2, r4, #32
 80152cc:	1ca9      	adds	r1, r5, #2
 80152ce:	1ca0      	adds	r0, r4, #2
 80152d0:	2463      	movs	r4, #99	; 0x63
 80152d2:	9400      	str	r4, [sp, #0]
 80152d4:	b29b      	uxth	r3, r3
 80152d6:	b292      	uxth	r2, r2
 80152d8:	b289      	uxth	r1, r1
 80152da:	b280      	uxth	r0, r0
 80152dc:	f009 f81d 	bl	801e31a <TFT_FillRectangle>
}
 80152e0:	e7ed      	b.n	80152be <GUI_CheckBox+0x5e>

080152e2 <GUI_RadioBox>:



void GUI_RadioBox(uint16_t X, uint16_t Y, uint16_t Check, uint16_t Active)
{
 80152e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152e6:	f100 0411 	add.w	r4, r0, #17
 80152ea:	f101 0511 	add.w	r5, r1, #17
 80152ee:	4690      	mov	r8, r2
	if(Active){
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 80152f0:	b226      	sxth	r6, r4
 80152f2:	b22f      	sxth	r7, r5
	if(Active){
 80152f4:	b173      	cbz	r3, 8015314 <GUI_RadioBox+0x32>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 80152f6:	f241 3376 	movw	r3, #4982	; 0x1376
 80152fa:	220f      	movs	r2, #15
 80152fc:	4639      	mov	r1, r7
 80152fe:	4630      	mov	r0, r6
 8015300:	f008 ff0e 	bl	801e120 <TFT_DrawCircle>
	} else
	{
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
	}
	if(Check)
 8015304:	f1b8 0f00 	cmp.w	r8, #0
 8015308:	d111      	bne.n	801532e <GUI_RadioBox+0x4c>
			if(Active)
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
		} else
		{
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 801530a:	2363      	movs	r3, #99	; 0x63
 801530c:	220a      	movs	r2, #10
 801530e:	b229      	sxth	r1, r5
 8015310:	b220      	sxth	r0, r4
 8015312:	e011      	b.n	8015338 <GUI_RadioBox+0x56>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
 8015314:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8015318:	220f      	movs	r2, #15
 801531a:	4639      	mov	r1, r7
 801531c:	4630      	mov	r0, r6
 801531e:	f008 feff 	bl	801e120 <TFT_DrawCircle>
	if(Check)
 8015322:	f1b8 0f00 	cmp.w	r8, #0
 8015326:	d0f0      	beq.n	801530a <GUI_RadioBox+0x28>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 8015328:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 801532c:	e001      	b.n	8015332 <GUI_RadioBox+0x50>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
 801532e:	f241 3376 	movw	r3, #4982	; 0x1376
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 8015332:	220a      	movs	r2, #10
 8015334:	4639      	mov	r1, r7
 8015336:	4630      	mov	r0, r6
		}
}
 8015338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 801533c:	f009 b829 	b.w	801e392 <TFT_DrawFilledCircle>

08015340 <GUI_Switch_Button>:

void GUI_Switch_Button(uint16_t X, uint16_t Y, uint8_t Check)
{
 8015340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8015344:	f101 031c 	add.w	r3, r1, #28
 8015348:	2663      	movs	r6, #99	; 0x63
{
 801534a:	4617      	mov	r7, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 801534c:	f100 0224 	add.w	r2, r0, #36	; 0x24
{
 8015350:	460d      	mov	r5, r1
 8015352:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8015354:	9600      	str	r6, [sp, #0]
 8015356:	b29b      	uxth	r3, r3
 8015358:	b292      	uxth	r2, r2
 801535a:	f008 ffde 	bl	801e31a <TFT_FillRectangle>
 801535e:	f105 0611 	add.w	r6, r5, #17
 8015362:	f105 0318 	add.w	r3, r5, #24
 8015366:	f105 010a 	add.w	r1, r5, #10
 801536a:	f104 0223 	add.w	r2, r4, #35	; 0x23
 801536e:	4d1f      	ldr	r5, [pc, #124]	; (80153ec <GUI_Switch_Button+0xac>)
	if(Check)
 8015370:	b1ef      	cbz	r7, 80153ae <GUI_Switch_Button+0x6e>
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8015372:	f242 409b 	movw	r0, #9371	; 0x249b
 8015376:	270a      	movs	r7, #10
 8015378:	9001      	str	r0, [sp, #4]
 801537a:	b29b      	uxth	r3, r3
 801537c:	b292      	uxth	r2, r2
 801537e:	b289      	uxth	r1, r1
 8015380:	4620      	mov	r0, r4
 8015382:	9700      	str	r7, [sp, #0]
 8015384:	f009 f94e 	bl	801e624 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8015388:	f104 0019 	add.w	r0, r4, #25
 801538c:	f241 3376 	movw	r3, #4982	; 0x1376
 8015390:	463a      	mov	r2, r7
 8015392:	b231      	sxth	r1, r6
 8015394:	b200      	sxth	r0, r0
 8015396:	f008 fffc 	bl	801e392 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x00){
 801539a:	782b      	ldrb	r3, [r5, #0]
 801539c:	b923      	cbnz	r3, 80153a8 <GUI_Switch_Button+0x68>
				HAL_UART_MspInit(&hlpuart1); //Enable Bluetooth
 801539e:	4814      	ldr	r0, [pc, #80]	; (80153f0 <GUI_Switch_Button+0xb0>)
 80153a0:	f00b ffd4 	bl	802134c <HAL_UART_MspInit>
				BluetoothStat = 0x01;
 80153a4:	2301      	movs	r3, #1
 80153a6:	702b      	strb	r3, [r5, #0]
			if(BluetoothStat == 0x01){
				HAL_UART_MspDeInit(&hlpuart1); //Disable Bluetooth
				BluetoothStat = 0x00;
			}
		}
}
 80153a8:	b002      	add	sp, #8
 80153aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_LightGrey);
 80153ae:	f04f 080a 	mov.w	r8, #10
 80153b2:	f24c 6018 	movw	r0, #50712	; 0xc618
 80153b6:	9001      	str	r0, [sp, #4]
 80153b8:	b29b      	uxth	r3, r3
 80153ba:	b292      	uxth	r2, r2
 80153bc:	b289      	uxth	r1, r1
 80153be:	4620      	mov	r0, r4
 80153c0:	f8cd 8000 	str.w	r8, [sp]
 80153c4:	f009 f92e 	bl	801e624 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 80153c8:	eb04 0008 	add.w	r0, r4, r8
 80153cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80153d0:	4642      	mov	r2, r8
 80153d2:	b231      	sxth	r1, r6
 80153d4:	b200      	sxth	r0, r0
 80153d6:	f008 ffdc 	bl	801e392 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x01){
 80153da:	782b      	ldrb	r3, [r5, #0]
 80153dc:	2b01      	cmp	r3, #1
 80153de:	d1e3      	bne.n	80153a8 <GUI_Switch_Button+0x68>
				HAL_UART_MspDeInit(&hlpuart1); //Disable Bluetooth
 80153e0:	4803      	ldr	r0, [pc, #12]	; (80153f0 <GUI_Switch_Button+0xb0>)
 80153e2:	f00b ffff 	bl	80213e4 <HAL_UART_MspDeInit>
				BluetoothStat = 0x00;
 80153e6:	702f      	strb	r7, [r5, #0]
}
 80153e8:	e7de      	b.n	80153a8 <GUI_Switch_Button+0x68>
 80153ea:	bf00      	nop
 80153ec:	200055c8 	.word	0x200055c8
 80153f0:	20091160 	.word	0x20091160

080153f4 <GUI_Switch_ButtonActive>:

void GUI_Switch_ButtonActive(uint16_t X, uint16_t Y, uint8_t Check)
{
 80153f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80153f6:	f101 031c 	add.w	r3, r1, #28
{
 80153fa:	4616      	mov	r6, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80153fc:	2763      	movs	r7, #99	; 0x63
 80153fe:	f100 0224 	add.w	r2, r0, #36	; 0x24
 8015402:	b29b      	uxth	r3, r3
 8015404:	b292      	uxth	r2, r2
 8015406:	9700      	str	r7, [sp, #0]
{
 8015408:	460d      	mov	r5, r1
 801540a:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 801540c:	f008 ff85 	bl	801e31a <TFT_FillRectangle>
	if(Check)
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8015410:	f242 409b 	movw	r0, #9371	; 0x249b
 8015414:	f105 0318 	add.w	r3, r5, #24
 8015418:	f105 010a 	add.w	r1, r5, #10
 801541c:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8015420:	3511      	adds	r5, #17
 8015422:	9001      	str	r0, [sp, #4]
	if(Check)
 8015424:	b19e      	cbz	r6, 801544e <GUI_Switch_ButtonActive+0x5a>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8015426:	260a      	movs	r6, #10
 8015428:	b29b      	uxth	r3, r3
 801542a:	4620      	mov	r0, r4
 801542c:	9600      	str	r6, [sp, #0]
 801542e:	b292      	uxth	r2, r2
 8015430:	b289      	uxth	r1, r1
 8015432:	f009 f8f7 	bl	801e624 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8015436:	f104 0019 	add.w	r0, r4, #25
 801543a:	f241 3376 	movw	r3, #4982	; 0x1376
		} else
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 801543e:	4632      	mov	r2, r6
 8015440:	b229      	sxth	r1, r5
 8015442:	b200      	sxth	r0, r0
		}
}
 8015444:	b003      	add	sp, #12
 8015446:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 801544a:	f008 bfa2 	b.w	801e392 <TFT_DrawFilledCircle>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 801544e:	260a      	movs	r6, #10
 8015450:	b29b      	uxth	r3, r3
 8015452:	4620      	mov	r0, r4
 8015454:	9600      	str	r6, [sp, #0]
 8015456:	b292      	uxth	r2, r2
 8015458:	b289      	uxth	r1, r1
 801545a:	f009 f8e3 	bl	801e624 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 801545e:	19a0      	adds	r0, r4, r6
 8015460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015464:	e7eb      	b.n	801543e <GUI_Switch_ButtonActive+0x4a>

08015466 <GUI_Flag_Ru>:


void GUI_Flag_Ru(uint16_t X, uint16_t Y)
{
 8015466:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 801546a:	f100 0423 	add.w	r4, r0, #35	; 0x23
 801546e:	1dcf      	adds	r7, r1, #7
{
 8015470:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8015472:	b2a4      	uxth	r4, r4
 8015474:	b2bf      	uxth	r7, r7
 8015476:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801547a:	9300      	str	r3, [sp, #0]
 801547c:	4622      	mov	r2, r4
 801547e:	463b      	mov	r3, r7
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8015480:	f105 060e 	add.w	r6, r5, #14
{
 8015484:	4680      	mov	r8, r0
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8015486:	b2b6      	uxth	r6, r6
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8015488:	f008 ff47 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 801548c:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 8015490:	9300      	str	r3, [sp, #0]
 8015492:	4622      	mov	r2, r4
 8015494:	4633      	mov	r3, r6
 8015496:	4639      	mov	r1, r7
 8015498:	4640      	mov	r0, r8
 801549a:	f008 ff3e 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+35, Y+21, TFT_RuRed);
 801549e:	f105 0315 	add.w	r3, r5, #21
 80154a2:	f64c 1243 	movw	r2, #51523	; 0xc943
 80154a6:	9200      	str	r2, [sp, #0]
 80154a8:	b29b      	uxth	r3, r3
 80154aa:	4622      	mov	r2, r4
 80154ac:	4631      	mov	r1, r6
 80154ae:	4640      	mov	r0, r8
 80154b0:	f008 ff33 	bl	801e31a <TFT_FillRectangle>
}
 80154b4:	b002      	add	sp, #8
 80154b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154ba <GUI_Flag_En>:

void GUI_Flag_En(uint16_t X, uint16_t Y)
{
 80154ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 80154be:	f100 030f 	add.w	r3, r0, #15
{
 80154c2:	b08d      	sub	sp, #52	; 0x34
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 80154c4:	b29b      	uxth	r3, r3
 80154c6:	270f      	movs	r7, #15
 80154c8:	9302      	str	r3, [sp, #8]
 80154ca:	f101 0309 	add.w	r3, r1, #9
{
 80154ce:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 80154d0:	b29b      	uxth	r3, r3
 80154d2:	9700      	str	r7, [sp, #0]
 80154d4:	9a02      	ldr	r2, [sp, #8]
 80154d6:	9303      	str	r3, [sp, #12]
{
 80154d8:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 80154da:	f008 ff1e 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y, X+34, Y+9, TFT_Navy);
 80154de:	f104 0314 	add.w	r3, r4, #20
 80154e2:	b29b      	uxth	r3, r3
 80154e4:	f104 0822 	add.w	r8, r4, #34	; 0x22
 80154e8:	fa1f f888 	uxth.w	r8, r8
 80154ec:	9304      	str	r3, [sp, #16]
 80154ee:	9700      	str	r7, [sp, #0]
 80154f0:	9b03      	ldr	r3, [sp, #12]
 80154f2:	9804      	ldr	r0, [sp, #16]
 80154f4:	4642      	mov	r2, r8
 80154f6:	4629      	mov	r1, r5
 80154f8:	f008 ff0f 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+15, Y+21, TFT_Navy);
 80154fc:	f105 030e 	add.w	r3, r5, #14
 8015500:	b29b      	uxth	r3, r3
 8015502:	f105 0615 	add.w	r6, r5, #21
 8015506:	b2b6      	uxth	r6, r6
 8015508:	9305      	str	r3, [sp, #20]
 801550a:	9700      	str	r7, [sp, #0]
 801550c:	4633      	mov	r3, r6
 801550e:	9a02      	ldr	r2, [sp, #8]
 8015510:	9905      	ldr	r1, [sp, #20]
 8015512:	4620      	mov	r0, r4
 8015514:	f008 ff01 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y+14, X+34, Y+21, TFT_Navy);
 8015518:	9700      	str	r7, [sp, #0]
 801551a:	4633      	mov	r3, r6
 801551c:	4642      	mov	r2, r8
 801551e:	9905      	ldr	r1, [sp, #20]
 8015520:	9804      	ldr	r0, [sp, #16]
 8015522:	f008 fefa 	bl	801e31a <TFT_FillRectangle>
	
	TFT_DrawLine(X, Y+2, X+29, Y+21, TFT_White);
 8015526:	1cab      	adds	r3, r5, #2
 8015528:	b29b      	uxth	r3, r3
 801552a:	f104 091d 	add.w	r9, r4, #29
 801552e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015532:	9307      	str	r3, [sp, #28]
 8015534:	fa1f f989 	uxth.w	r9, r9
 8015538:	9700      	str	r7, [sp, #0]
 801553a:	4633      	mov	r3, r6
 801553c:	464a      	mov	r2, r9
 801553e:	9907      	ldr	r1, [sp, #28]
 8015540:	4620      	mov	r0, r4
 8015542:	f008 fe8d 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X, Y+1, X+29, Y+21, TFT_White);
 8015546:	1c6b      	adds	r3, r5, #1
 8015548:	b29b      	uxth	r3, r3
 801554a:	9308      	str	r3, [sp, #32]
 801554c:	9700      	str	r7, [sp, #0]
 801554e:	4633      	mov	r3, r6
 8015550:	464a      	mov	r2, r9
 8015552:	9908      	ldr	r1, [sp, #32]
 8015554:	4620      	mov	r0, r4
 8015556:	f008 fe83 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X, Y, X+30, Y+21, TFT_White);
 801555a:	f104 021e 	add.w	r2, r4, #30
 801555e:	9700      	str	r7, [sp, #0]
 8015560:	4633      	mov	r3, r6
 8015562:	4629      	mov	r1, r5
 8015564:	4620      	mov	r0, r4
 8015566:	b292      	uxth	r2, r2
 8015568:	f008 fe7a 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y, X+31, Y+21, TFT_White);
 801556c:	1c63      	adds	r3, r4, #1
 801556e:	b29b      	uxth	r3, r3
 8015570:	f104 0a1f 	add.w	sl, r4, #31
 8015574:	9309      	str	r3, [sp, #36]	; 0x24
 8015576:	fa1f fa8a 	uxth.w	sl, sl
 801557a:	9700      	str	r7, [sp, #0]
 801557c:	4633      	mov	r3, r6
 801557e:	4652      	mov	r2, sl
 8015580:	4629      	mov	r1, r5
 8015582:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015584:	f008 fe6c 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y, X+31, Y+21, TFT_White);
 8015588:	1ca3      	adds	r3, r4, #2
 801558a:	b29b      	uxth	r3, r3
 801558c:	930a      	str	r3, [sp, #40]	; 0x28
 801558e:	9700      	str	r7, [sp, #0]
 8015590:	4633      	mov	r3, r6
 8015592:	4652      	mov	r2, sl
 8015594:	4629      	mov	r1, r5
 8015596:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015598:	f008 fe62 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y, X+32, Y+21, TFT_White);
 801559c:	1ce3      	adds	r3, r4, #3
 801559e:	b29b      	uxth	r3, r3
 80155a0:	f104 0920 	add.w	r9, r4, #32
 80155a4:	930b      	str	r3, [sp, #44]	; 0x2c
 80155a6:	fa1f f989 	uxth.w	r9, r9
 80155aa:	9700      	str	r7, [sp, #0]
 80155ac:	4633      	mov	r3, r6
 80155ae:	464a      	mov	r2, r9
 80155b0:	4629      	mov	r1, r5
 80155b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80155b4:	f008 fe54 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+33, Y+21, TFT_White);
 80155b8:	1d23      	adds	r3, r4, #4
 80155ba:	b29b      	uxth	r3, r3
 80155bc:	f104 0b21 	add.w	fp, r4, #33	; 0x21
 80155c0:	9306      	str	r3, [sp, #24]
 80155c2:	fa1f fb8b 	uxth.w	fp, fp
 80155c6:	9700      	str	r7, [sp, #0]
 80155c8:	4633      	mov	r3, r6
 80155ca:	465a      	mov	r2, fp
 80155cc:	4629      	mov	r1, r5
 80155ce:	9806      	ldr	r0, [sp, #24]
 80155d0:	f008 fe46 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+34, Y+21, TFT_White);
 80155d4:	9700      	str	r7, [sp, #0]
 80155d6:	4633      	mov	r3, r6
 80155d8:	4642      	mov	r2, r8
 80155da:	4629      	mov	r1, r5
 80155dc:	9806      	ldr	r0, [sp, #24]
 80155de:	f008 fe3f 	bl	801e260 <TFT_DrawLine>
	
	TFT_DrawLine(X, Y+21, X+31, Y, TFT_White);
 80155e2:	9700      	str	r7, [sp, #0]
 80155e4:	462b      	mov	r3, r5
 80155e6:	4652      	mov	r2, sl
 80155e8:	4631      	mov	r1, r6
 80155ea:	4620      	mov	r0, r4
 80155ec:	f008 fe38 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y+21, X+32, Y, TFT_White);
 80155f0:	9700      	str	r7, [sp, #0]
 80155f2:	462b      	mov	r3, r5
 80155f4:	464a      	mov	r2, r9
 80155f6:	4631      	mov	r1, r6
 80155f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155fa:	f008 fe31 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y+21, X+32, Y, TFT_White);
 80155fe:	9700      	str	r7, [sp, #0]
 8015600:	462b      	mov	r3, r5
 8015602:	464a      	mov	r2, r9
 8015604:	4631      	mov	r1, r6
 8015606:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015608:	f008 fe2a 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y+21, X+33, Y, TFT_White);
 801560c:	9700      	str	r7, [sp, #0]
 801560e:	462b      	mov	r3, r5
 8015610:	465a      	mov	r2, fp
 8015612:	4631      	mov	r1, r6
 8015614:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015616:	f008 fe23 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y+21, X+34, Y, TFT_White);
 801561a:	9700      	str	r7, [sp, #0]
 801561c:	462b      	mov	r3, r5
 801561e:	4642      	mov	r2, r8
 8015620:	4631      	mov	r1, r6
 8015622:	9806      	ldr	r0, [sp, #24]
 8015624:	f008 fe1c 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+5, Y+21, X+34, Y+1, TFT_White);
 8015628:	1d60      	adds	r0, r4, #5
 801562a:	9700      	str	r7, [sp, #0]
 801562c:	9b08      	ldr	r3, [sp, #32]
 801562e:	4642      	mov	r2, r8
 8015630:	4631      	mov	r1, r6
 8015632:	b280      	uxth	r0, r0
 8015634:	f008 fe14 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+21, X+34, Y+2, TFT_White);
 8015638:	1da0      	adds	r0, r4, #6
 801563a:	9700      	str	r7, [sp, #0]
 801563c:	9b07      	ldr	r3, [sp, #28]
 801563e:	4642      	mov	r2, r8
 8015640:	4631      	mov	r1, r6
 8015642:	b280      	uxth	r0, r0
 8015644:	f008 fe0c 	bl	801e260 <TFT_DrawLine>
	
	TFT_FillRectangle(X, Y+9, X+34, Y+14, TFT_White);
 8015648:	9700      	str	r7, [sp, #0]
 801564a:	9b05      	ldr	r3, [sp, #20]
 801564c:	9903      	ldr	r1, [sp, #12]
 801564e:	4642      	mov	r2, r8
 8015650:	4620      	mov	r0, r4
 8015652:	f008 fe62 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X+15, Y, X+20, Y+21, TFT_White);
 8015656:	9700      	str	r7, [sp, #0]
 8015658:	4633      	mov	r3, r6
 801565a:	9a04      	ldr	r2, [sp, #16]
 801565c:	9802      	ldr	r0, [sp, #8]
 801565e:	4629      	mov	r1, r5
 8015660:	f008 fe5b 	bl	801e31a <TFT_FillRectangle>
	
	TFT_FillRectangle(X+16, Y, X+19, Y+21, TFT_Red);
 8015664:	f44f 4778 	mov.w	r7, #63488	; 0xf800
 8015668:	f104 0213 	add.w	r2, r4, #19
 801566c:	f104 0010 	add.w	r0, r4, #16
 8015670:	4633      	mov	r3, r6
 8015672:	4629      	mov	r1, r5
 8015674:	9700      	str	r7, [sp, #0]
 8015676:	b292      	uxth	r2, r2
 8015678:	b280      	uxth	r0, r0
 801567a:	f008 fe4e 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+10, X+34, Y+13, TFT_Red);
 801567e:	f105 030d 	add.w	r3, r5, #13
 8015682:	f105 010a 	add.w	r1, r5, #10
 8015686:	9700      	str	r7, [sp, #0]
 8015688:	b29b      	uxth	r3, r3
 801568a:	4642      	mov	r2, r8
 801568c:	b289      	uxth	r1, r1
 801568e:	4620      	mov	r0, r4
 8015690:	f008 fe43 	bl	801e31a <TFT_FillRectangle>
	
}
 8015694:	b00d      	add	sp, #52	; 0x34
 8015696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801569c <GUI_Bar_Measure>:
#include "GUI_Measure_Elements.h"
#include <math.h>
extern uint8_t Language_status, Mode_EL, preGUI_screen_state, GUI_screen_state;

void GUI_Bar_Measure(uint16_t X, uint16_t Y, float Value)
{
 801569c:	b570      	push	{r4, r5, r6, lr}
 801569e:	ed2d 8b02 	vpush	{d8}
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 80156a2:	f101 040a 	add.w	r4, r1, #10
{
 80156a6:	b084      	sub	sp, #16
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 80156a8:	b2a4      	uxth	r4, r4
 80156aa:	f100 026e 	add.w	r2, r0, #110	; 0x6e
 80156ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 80156b2:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 80156b4:	9300      	str	r3, [sp, #0]
 80156b6:	b292      	uxth	r2, r2
 80156b8:	4623      	mov	r3, r4
{
 80156ba:	eeb0 8a40 	vmov.f32	s16, s0
 80156be:	460e      	mov	r6, r1
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 80156c0:	f008 fe2b 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X, Y, X+110*Value, Y+10, TFT_Blue_Off);
 80156c4:	ee07 5a90 	vmov	s15, r5
 80156c8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80156f8 <GUI_Bar_Measure+0x5c>
 80156cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80156d0:	f241 3376 	movw	r3, #4982	; 0x1376
 80156d4:	eee8 7a07 	vfma.f32	s15, s16, s14
 80156d8:	9300      	str	r3, [sp, #0]
 80156da:	4631      	mov	r1, r6
 80156dc:	4623      	mov	r3, r4
 80156de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80156e2:	4628      	mov	r0, r5
 80156e4:	edcd 7a03 	vstr	s15, [sp, #12]
 80156e8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80156ec:	f008 fe15 	bl	801e31a <TFT_FillRectangle>
}
 80156f0:	b004      	add	sp, #16
 80156f2:	ecbd 8b02 	vpop	{d8}
 80156f6:	bd70      	pop	{r4, r5, r6, pc}
 80156f8:	42dc0000 	.word	0x42dc0000

080156fc <GUI_Text_E_Measure>:


uint8_t  old_num_e = 10, old_num_n = 10, old_deg_e = 0xFF;
uint8_t old_meas_type_L = 2, old_numL_e = 10, old_numL_n = 10, old_rulx = 0, old_nan_Ee = 0, old_nan_El = 0; 
void GUI_Text_E_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 80156fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015700:	ed2d 8b02 	vpush	{d8}
 8015704:	461e      	mov	r6, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8015706:	4bba      	ldr	r3, [pc, #744]	; (80159f0 <GUI_Text_E_Measure+0x2f4>)
 8015708:	f8df a320 	ldr.w	sl, [pc, #800]	; 8015a2c <GUI_Text_E_Measure+0x330>
 801570c:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8015a30 <GUI_Text_E_Measure+0x334>
{
 8015710:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8015712:	781a      	ldrb	r2, [r3, #0]
 8015714:	4bb7      	ldr	r3, [pc, #732]	; (80159f4 <GUI_Text_E_Measure+0x2f8>)
 8015716:	781b      	ldrb	r3, [r3, #0]
 8015718:	429a      	cmp	r2, r3
{
 801571a:	b086      	sub	sp, #24
 801571c:	4604      	mov	r4, r0
 801571e:	460d      	mov	r5, r1
 8015720:	eeb0 8a40 	vmov.f32	s16, s0
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8015724:	d007      	beq.n	8015736 <GUI_Text_E_Measure+0x3a>
 8015726:	2300      	movs	r3, #0
 8015728:	f88a 3000 	strb.w	r3, [sl]
 801572c:	f889 3000 	strb.w	r3, [r9]
 8015730:	4bb1      	ldr	r3, [pc, #708]	; (80159f8 <GUI_Text_E_Measure+0x2fc>)
 8015732:	22ff      	movs	r2, #255	; 0xff
 8015734:	701a      	strb	r2, [r3, #0]
	
	char buffer[9] = {0};
 8015736:	2300      	movs	r3, #0
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 8015738:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[9] = {0};
 801573c:	9303      	str	r3, [sp, #12]
 801573e:	9304      	str	r3, [sp, #16]
 8015740:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8015744:	f009 f818 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015748:	2063      	movs	r0, #99	; 0x63
 801574a:	f009 f81b 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 801574e:	48ab      	ldr	r0, [pc, #684]	; (80159fc <GUI_Text_E_Measure+0x300>)
 8015750:	f009 f80c 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 8015754:	1ca9      	adds	r1, r5, #2
 8015756:	2224      	movs	r2, #36	; 0x24
 8015758:	b289      	uxth	r1, r1
 801575a:	4620      	mov	r0, r4
 801575c:	f009 f8d0 	bl	801e900 <TFT_DrawChar>
	

		if((Value/1000.0) >= 1.0)
 8015760:	ee18 0a10 	vmov	r0, s16
 8015764:	f7ea ff08 	bl	8000578 <__aeabi_f2d>
 8015768:	2200      	movs	r2, #0
 801576a:	4ba5      	ldr	r3, [pc, #660]	; (8015a00 <GUI_Text_E_Measure+0x304>)
 801576c:	f7eb f882 	bl	8000874 <__aeabi_ddiv>
 8015770:	2200      	movs	r2, #0
 8015772:	4ba4      	ldr	r3, [pc, #656]	; (8015a04 <GUI_Text_E_Measure+0x308>)
 8015774:	f7eb f9da 	bl	8000b2c <__aeabi_dcmpge>
 8015778:	2800      	cmp	r0, #0
 801577a:	f000 80b4 	beq.w	80158e6 <GUI_Text_E_Measure+0x1ea>
	{
		Value = Value/(1000.0);
 801577e:	eddf 7aa2 	vldr	s15, [pc, #648]	; 8015a08 <GUI_Text_E_Measure+0x30c>
 8015782:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 8015786:	2701      	movs	r7, #1
		meas_type = 1;
	}else {meas_type = 0;}
	if(nope)
 8015788:	2e00      	cmp	r6, #0
 801578a:	f000 80ae 	beq.w	80158ea <GUI_Text_E_Measure+0x1ee>
		{	
			if(energy_light & !old_nan_Ee){
 801578e:	f89a 3000 	ldrb.w	r3, [sl]
 8015792:	2b00      	cmp	r3, #0
 8015794:	bf14      	ite	ne
 8015796:	2300      	movne	r3, #0
 8015798:	f008 0301 	andeq.w	r3, r8, #1
 801579c:	b33b      	cbz	r3, 80157ee <GUI_Text_E_Measure+0xf2>
				TFT_SetTextColor(TFT_White);
 801579e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80157a2:	f008 ffe9 	bl	801e778 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80157a6:	2063      	movs	r0, #99	; 0x63
 80157a8:	f008 ffec 	bl	801e784 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 80157ac:	4897      	ldr	r0, [pc, #604]	; (8015a0c <GUI_Text_E_Measure+0x310>)
 80157ae:	f008 ffdd 	bl	801e76c <TFT_SetFont>
				TFT_FillRectangle(X+35, Y, X+195, Y+26, TFT_Black_Bkgr);
 80157b2:	2163      	movs	r1, #99	; 0x63
 80157b4:	f105 031a 	add.w	r3, r5, #26
 80157b8:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 80157bc:	f104 0023 	add.w	r0, r4, #35	; 0x23
 80157c0:	9100      	str	r1, [sp, #0]
 80157c2:	b29b      	uxth	r3, r3
 80157c4:	b292      	uxth	r2, r2
 80157c6:	4629      	mov	r1, r5
 80157c8:	b280      	uxth	r0, r0
 80157ca:	f008 fda6 	bl	801e31a <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 80157ce:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80157d0:	f104 007a 	add.w	r0, r4, #122	; 0x7a
				buffer[0] = '-';buffer[1] = '-';
 80157d4:	f88d 300c 	strb.w	r3, [sp, #12]
 80157d8:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80157dc:	aa03      	add	r2, sp, #12
 80157de:	2303      	movs	r3, #3
 80157e0:	4629      	mov	r1, r5
 80157e2:	b280      	uxth	r0, r0
 80157e4:	f009 f8e4 	bl	801e9b0 <TFT_DisplayString>
				old_nan_Ee = 1;
 80157e8:	2301      	movs	r3, #1
 80157ea:	f88a 3000 	strb.w	r3, [sl]
			}
				if(!energy_light & !old_nan_El){
 80157ee:	f899 3000 	ldrb.w	r3, [r9]
 80157f2:	bb53      	cbnz	r3, 801584a <GUI_Text_E_Measure+0x14e>
 80157f4:	f1b8 0f00 	cmp.w	r8, #0
 80157f8:	d127      	bne.n	801584a <GUI_Text_E_Measure+0x14e>
				TFT_SetTextColor(TFT_White);
 80157fa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80157fe:	f008 ffbb 	bl	801e778 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015802:	2063      	movs	r0, #99	; 0x63
 8015804:	f008 ffbe 	bl	801e784 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8015808:	4880      	ldr	r0, [pc, #512]	; (8015a0c <GUI_Text_E_Measure+0x310>)
 801580a:	f008 ffaf 	bl	801e76c <TFT_SetFont>
				TFT_FillRectangle(X+35, Y, X+195, Y+26, TFT_Black_Bkgr);
 801580e:	2163      	movs	r1, #99	; 0x63
 8015810:	f105 031a 	add.w	r3, r5, #26
 8015814:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 8015818:	f104 0023 	add.w	r0, r4, #35	; 0x23
 801581c:	9100      	str	r1, [sp, #0]
 801581e:	b29b      	uxth	r3, r3
 8015820:	b292      	uxth	r2, r2
 8015822:	4629      	mov	r1, r5
 8015824:	b280      	uxth	r0, r0
 8015826:	f008 fd78 	bl	801e31a <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 801582a:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801582c:	f104 007a 	add.w	r0, r4, #122	; 0x7a
				buffer[0] = '-';buffer[1] = '-';
 8015830:	f88d 300c 	strb.w	r3, [sp, #12]
 8015834:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015838:	aa03      	add	r2, sp, #12
 801583a:	2303      	movs	r3, #3
 801583c:	4629      	mov	r1, r5
 801583e:	b280      	uxth	r0, r0
 8015840:	f009 f8b6 	bl	801e9b0 <TFT_DisplayString>
				old_nan_El = 1;
 8015844:	2301      	movs	r3, #1
 8015846:	f889 3000 	strb.w	r3, [r9]
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}

	if (Language_status == Ru && !energy_light)
 801584a:	4b71      	ldr	r3, [pc, #452]	; (8015a10 <GUI_Text_E_Measure+0x314>)
 801584c:	781b      	ldrb	r3, [r3, #0]
 801584e:	2b00      	cmp	r3, #0
 8015850:	f040 80f0 	bne.w	8015a34 <GUI_Text_E_Measure+0x338>
 8015854:	f1b8 0f00 	cmp.w	r8, #0
 8015858:	f040 813f 	bne.w	8015ada <GUI_Text_E_Measure+0x3de>
	{
			if(deg != old_deg_e){
 801585c:	4b66      	ldr	r3, [pc, #408]	; (80159f8 <GUI_Text_E_Measure+0x2fc>)
 801585e:	781a      	ldrb	r2, [r3, #0]
 8015860:	42ba      	cmp	r2, r7
 8015862:	4698      	mov	r8, r3
 8015864:	d030      	beq.n	80158c8 <GUI_Text_E_Measure+0x1cc>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8015866:	2663      	movs	r6, #99	; 0x63
 8015868:	f105 031a 	add.w	r3, r5, #26
 801586c:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015870:	1ce9      	adds	r1, r5, #3
 8015872:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
 8015876:	b29b      	uxth	r3, r3
 8015878:	b292      	uxth	r2, r2
 801587a:	b289      	uxth	r1, r1
 801587c:	9600      	str	r6, [sp, #0]
 801587e:	b280      	uxth	r0, r0
 8015880:	f008 fd4b 	bl	801e31a <TFT_FillRectangle>
			TFT_SetTextColor(TFT_White);
 8015884:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015888:	f008 ff76 	bl	801e778 <TFT_SetTextColor>
 801588c:	1d2e      	adds	r6, r5, #4
			TFT_SetFont(&Font26RU_arch_small);
 801588e:	4861      	ldr	r0, [pc, #388]	; (8015a14 <GUI_Text_E_Measure+0x318>)
 8015890:	f008 ff6c 	bl	801e76c <TFT_SetFont>
 8015894:	f104 09d7 	add.w	r9, r4, #215	; 0xd7
 8015898:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
			if(deg){
			TFT_DrawCharRus(X+200, Y+4, 'к');
 801589c:	b2b6      	uxth	r6, r6
			if(deg){
 801589e:	2f00      	cmp	r7, #0
 80158a0:	f000 809c 	beq.w	80159dc <GUI_Text_E_Measure+0x2e0>
			TFT_DrawCharRus(X+200, Y+4, 'к');
 80158a4:	22ba      	movs	r2, #186	; 0xba
 80158a6:	4631      	mov	r1, r6
 80158a8:	b280      	uxth	r0, r0
 80158aa:	f008 ff71 	bl	801e790 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'л');
 80158ae:	22bb      	movs	r2, #187	; 0xbb
 80158b0:	4631      	mov	r1, r6
 80158b2:	fa1f f089 	uxth.w	r0, r9
 80158b6:	f008 ff6b 	bl	801e790 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+232, Y+4, 'к');} else{
 80158ba:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80158be:	22ba      	movs	r2, #186	; 0xba
 80158c0:	4631      	mov	r1, r6
 80158c2:	b280      	uxth	r0, r0
			TFT_DrawCharRus(X+200, Y+4, 'л');
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 80158c4:	f008 ff64 	bl	801e790 <TFT_DrawCharRus>
			}
			
			
			old_deg_e = deg;
 80158c8:	f888 7000 	strb.w	r7, [r8]
		if(energy_light) {
			TFT_SetTextColor(TFT_White);
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+20, Y+14, 'e');}
	else {
		TFT_SetTextColor(TFT_White);
 80158cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80158d0:	f008 ff52 	bl	801e778 <TFT_SetTextColor>
		TFT_SetFont(&Font16EN_arch_small);
 80158d4:	4850      	ldr	r0, [pc, #320]	; (8015a18 <GUI_Text_E_Measure+0x31c>)
 80158d6:	f008 ff49 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 80158da:	f105 010d 	add.w	r1, r5, #13
 80158de:	f104 0017 	add.w	r0, r4, #23
 80158e2:	227b      	movs	r2, #123	; 0x7b
 80158e4:	e109      	b.n	8015afa <GUI_Text_E_Measure+0x3fe>
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 80158e6:	4607      	mov	r7, r0
 80158e8:	e74e      	b.n	8015788 <GUI_Text_E_Measure+0x8c>
		Value = floor(Value*10)/10.0;
 80158ea:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80158ee:	ee68 7a27 	vmul.f32	s15, s16, s15
		old_nan_Ee = 0; old_nan_El = 0;
 80158f2:	f889 6000 	strb.w	r6, [r9]
		Value = floor(Value*10)/10.0;
 80158f6:	ee17 0a90 	vmov	r0, s15
		old_nan_Ee = 0; old_nan_El = 0;
 80158fa:	f88a 6000 	strb.w	r6, [sl]
		Value = floor(Value*10)/10.0;
 80158fe:	f7ea fe3b 	bl	8000578 <__aeabi_f2d>
 8015902:	ec41 0b10 	vmov	d0, r0, r1
 8015906:	f00f f9f7 	bl	8024cf8 <floor>
 801590a:	2200      	movs	r2, #0
 801590c:	ec51 0b10 	vmov	r0, r1, d0
 8015910:	4b42      	ldr	r3, [pc, #264]	; (8015a1c <GUI_Text_E_Measure+0x320>)
 8015912:	f7ea ffaf 	bl	8000874 <__aeabi_ddiv>
 8015916:	f7eb f97b 	bl	8000c10 <__aeabi_d2f>
 801591a:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801591e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8015922:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015926:	f249 42d2 	movw	r2, #38098	; 0x94d2
 801592a:	2800      	cmp	r0, #0
 801592c:	bf14      	ite	ne
 801592e:	4610      	movne	r0, r2
 8015930:	4618      	moveq	r0, r3
 8015932:	f008 ff21 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015936:	2063      	movs	r0, #99	; 0x63
 8015938:	f008 ff24 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 801593c:	4833      	ldr	r0, [pc, #204]	; (8015a0c <GUI_Text_E_Measure+0x310>)
 801593e:	f008 ff15 	bl	801e76c <TFT_SetFont>
		sprintf (buffer, "%.1f", Value);}
 8015942:	ee18 0a10 	vmov	r0, s16
		sprintf (buffer, "%.1f", Value);
 8015946:	f7ea fe17 	bl	8000578 <__aeabi_f2d>
 801594a:	4602      	mov	r2, r0
 801594c:	460b      	mov	r3, r1
 801594e:	a803      	add	r0, sp, #12
 8015950:	4933      	ldr	r1, [pc, #204]	; (8015a20 <GUI_Text_E_Measure+0x324>)
 8015952:	f00c fa25 	bl	8021da0 <sprintf>
	uint32_t dec = 10;
 8015956:	220a      	movs	r2, #10
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015958:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 801595a:	f04f 097a 	mov.w	r9, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 801595e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8015962:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8015964:	ee07 2a10 	vmov	s14, r2
 8015968:	eef8 6a47 	vcvt.f32.u32	s13, s14
 801596c:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8015970:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015978:	db06      	blt.n	8015988 <GUI_Text_E_Measure+0x28c>
			delta_pos-=23;
 801597a:	f1a9 0917 	sub.w	r9, r9, #23
			number++;
 801597e:	3601      	adds	r6, #1
			dec *= 10;
 8015980:	434a      	muls	r2, r1
			delta_pos-=23;
 8015982:	fa5f f989 	uxtb.w	r9, r9
			number++;
 8015986:	b2f6      	uxtb	r6, r6
 8015988:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 801598a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801598e:	d1e9      	bne.n	8015964 <GUI_Text_E_Measure+0x268>
	if(energy_light && number < old_num_e )
 8015990:	f1b8 0f00 	cmp.w	r8, #0
 8015994:	d020      	beq.n	80159d8 <GUI_Text_E_Measure+0x2dc>
 8015996:	4b23      	ldr	r3, [pc, #140]	; (8015a24 <GUI_Text_E_Measure+0x328>)
	else if(!energy_light && number < old_num_n)
 8015998:	781a      	ldrb	r2, [r3, #0]
 801599a:	42b2      	cmp	r2, r6
 801599c:	469a      	mov	sl, r3
 801599e:	d90d      	bls.n	80159bc <GUI_Text_E_Measure+0x2c0>
		TFT_FillRectangle(X+40, Y, X+127, Y+26, TFT_Black_Bkgr);
 80159a0:	2163      	movs	r1, #99	; 0x63
 80159a2:	f105 031a 	add.w	r3, r5, #26
 80159a6:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 80159aa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80159ae:	9100      	str	r1, [sp, #0]
 80159b0:	b29b      	uxth	r3, r3
 80159b2:	b292      	uxth	r2, r2
 80159b4:	4629      	mov	r1, r5
 80159b6:	b280      	uxth	r0, r0
 80159b8:	f008 fcaf 	bl	801e31a <TFT_FillRectangle>
	buffer[8] = 0;
 80159bc:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80159be:	eb04 0009 	add.w	r0, r4, r9
		old_num_n = number;
 80159c2:	f88a 6000 	strb.w	r6, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80159c6:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 80159c8:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80159cc:	4629      	mov	r1, r5
 80159ce:	2303      	movs	r3, #3
 80159d0:	b280      	uxth	r0, r0
 80159d2:	f008 ffed 	bl	801e9b0 <TFT_DisplayString>
 80159d6:	e738      	b.n	801584a <GUI_Text_E_Measure+0x14e>
	else if(!energy_light && number < old_num_n)
 80159d8:	4b13      	ldr	r3, [pc, #76]	; (8015a28 <GUI_Text_E_Measure+0x32c>)
 80159da:	e7dd      	b.n	8015998 <GUI_Text_E_Measure+0x29c>
			TFT_DrawCharRus(X+200, Y+4, 'л');
 80159dc:	22bb      	movs	r2, #187	; 0xbb
 80159de:	4631      	mov	r1, r6
 80159e0:	b280      	uxth	r0, r0
 80159e2:	f008 fed5 	bl	801e790 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 80159e6:	22ba      	movs	r2, #186	; 0xba
 80159e8:	4631      	mov	r1, r6
 80159ea:	fa1f f089 	uxth.w	r0, r9
 80159ee:	e769      	b.n	80158c4 <GUI_Text_E_Measure+0x1c8>
 80159f0:	2000022a 	.word	0x2000022a
 80159f4:	20005279 	.word	0x20005279
 80159f8:	2000022d 	.word	0x2000022d
 80159fc:	200001e8 	.word	0x200001e8
 8015a00:	408f4000 	.word	0x408f4000
 8015a04:	3ff00000 	.word	0x3ff00000
 8015a08:	447a0000 	.word	0x447a0000
 8015a0c:	200001f0 	.word	0x200001f0
 8015a10:	2000527b 	.word	0x2000527b
 8015a14:	20000208 	.word	0x20000208
 8015a18:	200001c0 	.word	0x200001c0
 8015a1c:	40240000 	.word	0x40240000
 8015a20:	080337ed 	.word	0x080337ed
 8015a24:	20000244 	.word	0x20000244
 8015a28:	20000245 	.word	0x20000245
 8015a2c:	200052ad 	.word	0x200052ad
 8015a30:	200052ae 	.word	0x200052ae
	} else if (Language_status == En && !energy_light)
 8015a34:	2b01      	cmp	r3, #1
 8015a36:	d16e      	bne.n	8015b16 <GUI_Text_E_Measure+0x41a>
 8015a38:	f1b8 0f00 	cmp.w	r8, #0
 8015a3c:	d166      	bne.n	8015b0c <GUI_Text_E_Measure+0x410>
		if(deg != old_deg_e){
 8015a3e:	4b38      	ldr	r3, [pc, #224]	; (8015b20 <GUI_Text_E_Measure+0x424>)
 8015a40:	781a      	ldrb	r2, [r3, #0]
 8015a42:	42ba      	cmp	r2, r7
 8015a44:	4699      	mov	r9, r3
 8015a46:	d031      	beq.n	8015aac <GUI_Text_E_Measure+0x3b0>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8015a48:	2663      	movs	r6, #99	; 0x63
 8015a4a:	f105 031a 	add.w	r3, r5, #26
 8015a4e:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015a52:	1ce9      	adds	r1, r5, #3
 8015a54:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
 8015a58:	9600      	str	r6, [sp, #0]
 8015a5a:	b280      	uxth	r0, r0
 8015a5c:	b29b      	uxth	r3, r3
 8015a5e:	b292      	uxth	r2, r2
 8015a60:	b289      	uxth	r1, r1
 8015a62:	f008 fc5a 	bl	801e31a <TFT_FillRectangle>
 8015a66:	1d2e      	adds	r6, r5, #4
 8015a68:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
			TFT_SetTextColor(TFT_White);
 8015a6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
			if (deg){
 8015a70:	b1ff      	cbz	r7, 8015ab2 <GUI_Text_E_Measure+0x3b6>
			TFT_SetTextColor(TFT_White);
 8015a72:	f008 fe81 	bl	801e778 <TFT_SetTextColor>
			TFT_SetFont(&Font26EN_arch_small);
 8015a76:	482b      	ldr	r0, [pc, #172]	; (8015b24 <GUI_Text_E_Measure+0x428>)
 8015a78:	f008 fe78 	bl	801e76c <TFT_SetFont>
			TFT_DrawChar(X+214, Y+4, 'l'-65);
 8015a7c:	b2b6      	uxth	r6, r6
 8015a7e:	f104 00d6 	add.w	r0, r4, #214	; 0xd6
 8015a82:	222b      	movs	r2, #43	; 0x2b
 8015a84:	4631      	mov	r1, r6
 8015a86:	b280      	uxth	r0, r0
 8015a88:	f008 ff3a 	bl	801e900 <TFT_DrawChar>
			TFT_DrawChar(X+200, Y+4, 'k'-65);
 8015a8c:	222a      	movs	r2, #42	; 0x2a
 8015a8e:	4631      	mov	r1, r6
 8015a90:	fa1f f08a 	uxth.w	r0, sl
 8015a94:	f008 ff34 	bl	801e900 <TFT_DrawChar>
			TFT_DrawChar(X+226, Y+4, 'x'-65);
 8015a98:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
 8015a9c:	2237      	movs	r2, #55	; 0x37
 8015a9e:	4631      	mov	r1, r6
 8015aa0:	b280      	uxth	r0, r0
 8015aa2:	f008 ff2d 	bl	801e900 <TFT_DrawChar>
			old_rulx = 0;
 8015aa6:	4b20      	ldr	r3, [pc, #128]	; (8015b28 <GUI_Text_E_Measure+0x42c>)
 8015aa8:	f883 8000 	strb.w	r8, [r3]
		old_deg_e = deg;
 8015aac:	f889 7000 	strb.w	r7, [r9]
 8015ab0:	e70c      	b.n	80158cc <GUI_Text_E_Measure+0x1d0>
			TFT_SetTextColor(TFT_White);
 8015ab2:	f008 fe61 	bl	801e778 <TFT_SetTextColor>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 8015ab6:	b2b6      	uxth	r6, r6
			TFT_SetFont(&Font26EN_arch_small);
 8015ab8:	481a      	ldr	r0, [pc, #104]	; (8015b24 <GUI_Text_E_Measure+0x428>)
 8015aba:	f008 fe57 	bl	801e76c <TFT_SetFont>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 8015abe:	4631      	mov	r1, r6
 8015ac0:	fa1f f08a 	uxth.w	r0, sl
 8015ac4:	222b      	movs	r2, #43	; 0x2b
 8015ac6:	f008 ff1b 	bl	801e900 <TFT_DrawChar>
			TFT_DrawChar(X+212, Y+4, 'x'-65);
 8015aca:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 8015ace:	2237      	movs	r2, #55	; 0x37
 8015ad0:	4631      	mov	r1, r6
 8015ad2:	b280      	uxth	r0, r0
 8015ad4:	f008 ff14 	bl	801e900 <TFT_DrawChar>
 8015ad8:	e7e8      	b.n	8015aac <GUI_Text_E_Measure+0x3b0>
		GUI_TextRu_W_m2(234, Y);
 8015ada:	4629      	mov	r1, r5
 8015adc:	20ea      	movs	r0, #234	; 0xea
 8015ade:	f005 fa51 	bl	801af84 <GUI_TextRu_W_m2>
			TFT_SetTextColor(TFT_White);
 8015ae2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015ae6:	f008 fe47 	bl	801e778 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_small);
 8015aea:	4810      	ldr	r0, [pc, #64]	; (8015b2c <GUI_Text_E_Measure+0x430>)
 8015aec:	f008 fe3e 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 8015af0:	f105 010e 	add.w	r1, r5, #14
 8015af4:	f104 0014 	add.w	r0, r4, #20
 8015af8:	2265      	movs	r2, #101	; 0x65
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8015afa:	b289      	uxth	r1, r1
 8015afc:	b280      	uxth	r0, r0
 8015afe:	f008 feff 	bl	801e900 <TFT_DrawChar>
	}

}
 8015b02:	b006      	add	sp, #24
 8015b04:	ecbd 8b02 	vpop	{d8}
 8015b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		GUI_TextEn_W_m2(234, Y);
 8015b0c:	4629      	mov	r1, r5
 8015b0e:	20ea      	movs	r0, #234	; 0xea
 8015b10:	f004 f8d0 	bl	8019cb4 <GUI_TextEn_W_m2>
 8015b14:	e7e5      	b.n	8015ae2 <GUI_Text_E_Measure+0x3e6>
		if(energy_light) {
 8015b16:	f1b8 0f00 	cmp.w	r8, #0
 8015b1a:	d1e2      	bne.n	8015ae2 <GUI_Text_E_Measure+0x3e6>
 8015b1c:	e6d6      	b.n	80158cc <GUI_Text_E_Measure+0x1d0>
 8015b1e:	bf00      	nop
 8015b20:	2000022d 	.word	0x2000022d
 8015b24:	200001f8 	.word	0x200001f8
 8015b28:	200052b9 	.word	0x200052b9
 8015b2c:	200001c0 	.word	0x200001c0

08015b30 <GUI_Text_L_Measure>:

uint8_t old_nan_Le = 0, old_nan_Ll = 0, old_deg_L = 0xFF;
void GUI_Text_L_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 8015b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b34:	ed2d 8b02 	vpush	{d8}
 8015b38:	461e      	mov	r6, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8015b3a:	4bb7      	ldr	r3, [pc, #732]	; (8015e18 <GUI_Text_L_Measure+0x2e8>)
{
 8015b3c:	4691      	mov	r9, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8015b3e:	781a      	ldrb	r2, [r3, #0]
 8015b40:	4bb6      	ldr	r3, [pc, #728]	; (8015e1c <GUI_Text_L_Measure+0x2ec>)
 8015b42:	781b      	ldrb	r3, [r3, #0]
 8015b44:	429a      	cmp	r2, r3
{
 8015b46:	b086      	sub	sp, #24
 8015b48:	4604      	mov	r4, r0
 8015b4a:	460d      	mov	r5, r1
 8015b4c:	eeb0 8a40 	vmov.f32	s16, s0
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8015b50:	d007      	beq.n	8015b62 <GUI_Text_L_Measure+0x32>
 8015b52:	4ab3      	ldr	r2, [pc, #716]	; (8015e20 <GUI_Text_L_Measure+0x2f0>)
 8015b54:	2300      	movs	r3, #0
 8015b56:	7013      	strb	r3, [r2, #0]
 8015b58:	4ab2      	ldr	r2, [pc, #712]	; (8015e24 <GUI_Text_L_Measure+0x2f4>)
 8015b5a:	7013      	strb	r3, [r2, #0]
 8015b5c:	4bb2      	ldr	r3, [pc, #712]	; (8015e28 <GUI_Text_L_Measure+0x2f8>)
 8015b5e:	22ff      	movs	r2, #255	; 0xff
 8015b60:	701a      	strb	r2, [r3, #0]
	char buffer[9] = {0};
 8015b62:	2300      	movs	r3, #0
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 8015b64:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[9] = {0};
 8015b68:	9303      	str	r3, [sp, #12]
 8015b6a:	9304      	str	r3, [sp, #16]
 8015b6c:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8015b70:	f008 fe02 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015b74:	2063      	movs	r0, #99	; 0x63
 8015b76:	f008 fe05 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8015b7a:	48ac      	ldr	r0, [pc, #688]	; (8015e2c <GUI_Text_L_Measure+0x2fc>)
 8015b7c:	f008 fdf6 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 8015b80:	1ca9      	adds	r1, r5, #2
 8015b82:	4620      	mov	r0, r4
 8015b84:	222b      	movs	r2, #43	; 0x2b
 8015b86:	b289      	uxth	r1, r1
 8015b88:	f008 feba 	bl	801e900 <TFT_DrawChar>
	
	if(energy_light) {
	TFT_SetFont(&Font16EN_arch_small);
 8015b8c:	48a8      	ldr	r0, [pc, #672]	; (8015e30 <GUI_Text_L_Measure+0x300>)
	if(energy_light) {
 8015b8e:	f1b9 0f00 	cmp.w	r9, #0
 8015b92:	f000 8097 	beq.w	8015cc4 <GUI_Text_L_Measure+0x194>
	TFT_SetFont(&Font16EN_arch_small);
 8015b96:	f008 fde9 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 8015b9a:	f105 010e 	add.w	r1, r5, #14
 8015b9e:	f104 0014 	add.w	r0, r4, #20
 8015ba2:	2265      	movs	r2, #101	; 0x65
 8015ba4:	b289      	uxth	r1, r1
 8015ba6:	b280      	uxth	r0, r0
 8015ba8:	f008 feaa 	bl	801e900 <TFT_DrawChar>
 8015bac:	4f9c      	ldr	r7, [pc, #624]	; (8015e20 <GUI_Text_L_Measure+0x2f0>)
	else {
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+23, Y+13, 'z'+1);
	}
	
	if(nope) 
 8015bae:	2e00      	cmp	r6, #0
 8015bb0:	f040 8098 	bne.w	8015ce4 <GUI_Text_L_Measure+0x1b4>
			buffer[0] = '-';buffer[1] = '-';
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
			old_nan_Ll = 1;}
		}
	else{
	if(energy_light) {old_nan_Le = 0;}
 8015bb4:	703e      	strb	r6, [r7, #0]
	if(!energy_light) {old_nan_Ll = 0;}
	Value = floor(Value*10)/10.0;
 8015bb6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015bba:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015bbe:	ee17 0a90 	vmov	r0, s15
 8015bc2:	f7ea fcd9 	bl	8000578 <__aeabi_f2d>
 8015bc6:	ec41 0b10 	vmov	d0, r0, r1
 8015bca:	f00f f895 	bl	8024cf8 <floor>
 8015bce:	2200      	movs	r2, #0
 8015bd0:	4b98      	ldr	r3, [pc, #608]	; (8015e34 <GUI_Text_L_Measure+0x304>)
 8015bd2:	ec51 0b10 	vmov	r0, r1, d0
 8015bd6:	f7ea fe4d 	bl	8000874 <__aeabi_ddiv>
 8015bda:	f7eb f819 	bl	8000c10 <__aeabi_d2f>
 8015bde:	ee08 0a10 	vmov	s16, r0
	
	if((Value/1000.0) >= 1.0)
 8015be2:	f7ea fcc9 	bl	8000578 <__aeabi_f2d>
 8015be6:	2200      	movs	r2, #0
 8015be8:	4b93      	ldr	r3, [pc, #588]	; (8015e38 <GUI_Text_L_Measure+0x308>)
 8015bea:	f7ea fe43 	bl	8000874 <__aeabi_ddiv>
 8015bee:	2200      	movs	r2, #0
 8015bf0:	4b92      	ldr	r3, [pc, #584]	; (8015e3c <GUI_Text_L_Measure+0x30c>)
 8015bf2:	f7ea ff9b 	bl	8000b2c <__aeabi_dcmpge>
 8015bf6:	2800      	cmp	r0, #0
 8015bf8:	f000 80fb 	beq.w	8015df2 <GUI_Text_L_Measure+0x2c2>
	{
		Value = Value/(1000.0);
 8015bfc:	eddf 7a90 	vldr	s15, [pc, #576]	; 8015e40 <GUI_Text_L_Measure+0x310>
 8015c00:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 8015c04:	2601      	movs	r6, #1
		meas_type = 1;
	}else {meas_type = 0;}
	
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015c06:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8015c0a:	f249 43d2 	movw	r3, #38098	; 0x94d2
 8015c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015c12:	2800      	cmp	r0, #0
 8015c14:	bf0c      	ite	eq
 8015c16:	4610      	moveq	r0, r2
 8015c18:	4618      	movne	r0, r3
 8015c1a:	f008 fdad 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015c1e:	2063      	movs	r0, #99	; 0x63
 8015c20:	f008 fdb0 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015c24:	4887      	ldr	r0, [pc, #540]	; (8015e44 <GUI_Text_L_Measure+0x314>)
 8015c26:	f008 fda1 	bl	801e76c <TFT_SetFont>
	
	sprintf (buffer, "%.1f", Value);
 8015c2a:	ee18 0a10 	vmov	r0, s16
 8015c2e:	f7ea fca3 	bl	8000578 <__aeabi_f2d>
 8015c32:	4602      	mov	r2, r0
 8015c34:	460b      	mov	r3, r1
 8015c36:	a803      	add	r0, sp, #12
 8015c38:	4983      	ldr	r1, [pc, #524]	; (8015e48 <GUI_Text_L_Measure+0x318>)
 8015c3a:	f00c f8b1 	bl	8021da0 <sprintf>
	uint32_t dec = 10;
 8015c3e:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8015c40:	2304      	movs	r3, #4
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8015c42:	2700      	movs	r7, #0
 8015c44:	f04f 0875 	mov.w	r8, #117	; 0x75


for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 8015c48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		{
			dec *= 10;
 8015c4c:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8015c4e:	ee07 2a10 	vmov	s14, r2
 8015c52:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8015c56:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8015c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c62:	db06      	blt.n	8015c72 <GUI_Text_L_Measure+0x142>
			delta_pos-=23;
 8015c64:	f1a8 0817 	sub.w	r8, r8, #23
			number++;
 8015c68:	3701      	adds	r7, #1
			dec *= 10;
 8015c6a:	434a      	muls	r2, r1
			delta_pos-=23;
 8015c6c:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8015c70:	b2ff      	uxtb	r7, r7
 8015c72:	3b01      	subs	r3, #1
for (uint8_t i = 1; i <= 4; i++)
 8015c74:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015c78:	d1e9      	bne.n	8015c4e <GUI_Text_L_Measure+0x11e>
		}
	}
	
	if(energy_light && number < old_numL_e )
 8015c7a:	f1b9 0f00 	cmp.w	r9, #0
 8015c7e:	f000 80ba 	beq.w	8015df6 <GUI_Text_L_Measure+0x2c6>
 8015c82:	4b72      	ldr	r3, [pc, #456]	; (8015e4c <GUI_Text_L_Measure+0x31c>)
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
	} 
	else if(!energy_light && number < old_numL_n)
 8015c84:	781a      	ldrb	r2, [r3, #0]
 8015c86:	42ba      	cmp	r2, r7
 8015c88:	469a      	mov	sl, r3
 8015c8a:	d90d      	bls.n	8015ca8 <GUI_Text_L_Measure+0x178>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8015c8c:	2163      	movs	r1, #99	; 0x63
 8015c8e:	f105 031a 	add.w	r3, r5, #26
 8015c92:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015c96:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015c9a:	9100      	str	r1, [sp, #0]
 8015c9c:	b29b      	uxth	r3, r3
 8015c9e:	b292      	uxth	r2, r2
 8015ca0:	4629      	mov	r1, r5
 8015ca2:	b280      	uxth	r0, r0
 8015ca4:	f008 fb39 	bl	801e31a <TFT_FillRectangle>
		old_numL_e = number;}
	else{
		old_numL_n = number;
	}
	
	buffer[8] = 0;
 8015ca8:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015caa:	eb04 0008 	add.w	r0, r4, r8
		old_numL_n = number;
 8015cae:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015cb2:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 8015cb4:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015cb8:	4629      	mov	r1, r5
 8015cba:	2303      	movs	r3, #3
 8015cbc:	b280      	uxth	r0, r0
 8015cbe:	f008 fe77 	bl	801e9b0 <TFT_DisplayString>
 8015cc2:	e06c      	b.n	8015d9e <GUI_Text_L_Measure+0x26e>
		TFT_SetFont(&Font16EN_arch_small);
 8015cc4:	f008 fd52 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8015cc8:	f105 010d 	add.w	r1, r5, #13
 8015ccc:	f104 0017 	add.w	r0, r4, #23
 8015cd0:	227b      	movs	r2, #123	; 0x7b
 8015cd2:	b289      	uxth	r1, r1
 8015cd4:	b280      	uxth	r0, r0
 8015cd6:	f008 fe13 	bl	801e900 <TFT_DrawChar>
	if(nope) 
 8015cda:	bb96      	cbnz	r6, 8015d42 <GUI_Text_L_Measure+0x212>
	if(!energy_light) {old_nan_Ll = 0;}
 8015cdc:	4b51      	ldr	r3, [pc, #324]	; (8015e24 <GUI_Text_L_Measure+0x2f4>)
 8015cde:	f883 9000 	strb.w	r9, [r3]
 8015ce2:	e768      	b.n	8015bb6 <GUI_Text_L_Measure+0x86>
			if(energy_light & !old_nan_Le){
 8015ce4:	783e      	ldrb	r6, [r7, #0]
 8015ce6:	2e00      	cmp	r6, #0
 8015ce8:	bf14      	ite	ne
 8015cea:	2600      	movne	r6, #0
 8015cec:	f009 0601 	andeq.w	r6, r9, #1
 8015cf0:	2e00      	cmp	r6, #0
 8015cf2:	d054      	beq.n	8015d9e <GUI_Text_L_Measure+0x26e>
			TFT_SetTextColor(TFT_White);
 8015cf4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015cf8:	f008 fd3e 	bl	801e778 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8015cfc:	2063      	movs	r0, #99	; 0x63
 8015cfe:	f008 fd41 	bl	801e784 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 8015d02:	4850      	ldr	r0, [pc, #320]	; (8015e44 <GUI_Text_L_Measure+0x314>)
 8015d04:	f008 fd32 	bl	801e76c <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8015d08:	2163      	movs	r1, #99	; 0x63
 8015d0a:	f105 031a 	add.w	r3, r5, #26
 8015d0e:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015d12:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015d16:	9100      	str	r1, [sp, #0]
 8015d18:	b29b      	uxth	r3, r3
 8015d1a:	b292      	uxth	r2, r2
 8015d1c:	4629      	mov	r1, r5
 8015d1e:	b280      	uxth	r0, r0
 8015d20:	f008 fafb 	bl	801e31a <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 8015d24:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015d26:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 8015d2a:	f88d 300c 	strb.w	r3, [sp, #12]
 8015d2e:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015d32:	aa03      	add	r2, sp, #12
 8015d34:	2303      	movs	r3, #3
 8015d36:	4629      	mov	r1, r5
 8015d38:	b280      	uxth	r0, r0
 8015d3a:	f008 fe39 	bl	801e9b0 <TFT_DisplayString>
			old_nan_Le = 1;}
 8015d3e:	2301      	movs	r3, #1
 8015d40:	703b      	strb	r3, [r7, #0]
			if(!energy_light & !old_nan_Ll){
 8015d42:	4e38      	ldr	r6, [pc, #224]	; (8015e24 <GUI_Text_L_Measure+0x2f4>)
 8015d44:	7833      	ldrb	r3, [r6, #0]
 8015d46:	bb4b      	cbnz	r3, 8015d9c <GUI_Text_L_Measure+0x26c>
 8015d48:	f1b9 0f00 	cmp.w	r9, #0
 8015d4c:	d126      	bne.n	8015d9c <GUI_Text_L_Measure+0x26c>
			TFT_SetTextColor(TFT_White);
 8015d4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015d52:	f008 fd11 	bl	801e778 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8015d56:	2063      	movs	r0, #99	; 0x63
 8015d58:	f008 fd14 	bl	801e784 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 8015d5c:	4839      	ldr	r0, [pc, #228]	; (8015e44 <GUI_Text_L_Measure+0x314>)
 8015d5e:	f008 fd05 	bl	801e76c <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8015d62:	2163      	movs	r1, #99	; 0x63
 8015d64:	f105 031a 	add.w	r3, r5, #26
 8015d68:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015d6c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015d70:	9100      	str	r1, [sp, #0]
 8015d72:	b29b      	uxth	r3, r3
 8015d74:	b292      	uxth	r2, r2
 8015d76:	4629      	mov	r1, r5
 8015d78:	b280      	uxth	r0, r0
 8015d7a:	f008 face 	bl	801e31a <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 8015d7e:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015d80:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 8015d84:	f88d 300c 	strb.w	r3, [sp, #12]
 8015d88:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015d8c:	aa03      	add	r2, sp, #12
 8015d8e:	2303      	movs	r3, #3
 8015d90:	4629      	mov	r1, r5
 8015d92:	b280      	uxth	r0, r0
 8015d94:	f008 fe0c 	bl	801e9b0 <TFT_DisplayString>
			old_nan_Ll = 1;}
 8015d98:	2301      	movs	r3, #1
 8015d9a:	7033      	strb	r3, [r6, #0]
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8015d9c:	2600      	movs	r6, #0
	
}
	if (Language_status == Ru && !energy_light)
 8015d9e:	4b2c      	ldr	r3, [pc, #176]	; (8015e50 <GUI_Text_L_Measure+0x320>)
 8015da0:	781f      	ldrb	r7, [r3, #0]
 8015da2:	2f00      	cmp	r7, #0
 8015da4:	d158      	bne.n	8015e58 <GUI_Text_L_Measure+0x328>
 8015da6:	f1b9 0f00 	cmp.w	r9, #0
 8015daa:	f040 808f 	bne.w	8015ecc <GUI_Text_L_Measure+0x39c>
 8015dae:	4b1e      	ldr	r3, [pc, #120]	; (8015e28 <GUI_Text_L_Measure+0x2f8>)
	{
		if (deg && old_deg_L != 1){
 8015db0:	781a      	ldrb	r2, [r3, #0]
 8015db2:	b316      	cbz	r6, 8015dfa <GUI_Text_L_Measure+0x2ca>
 8015db4:	2a01      	cmp	r2, #1
 8015db6:	d017      	beq.n	8015de8 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 1;
 8015db8:	2601      	movs	r6, #1
 8015dba:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8015dbc:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015dc0:	f105 031a 	add.w	r3, r5, #26
 8015dc4:	1ce9      	adds	r1, r5, #3
 8015dc6:	2763      	movs	r7, #99	; 0x63
 8015dc8:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8015dcc:	9700      	str	r7, [sp, #0]
 8015dce:	b29b      	uxth	r3, r3
 8015dd0:	b292      	uxth	r2, r2
 8015dd2:	b289      	uxth	r1, r1
			GUI_TextRu_Cd_m2(X+205, Y, 1);
		}else if(!deg && old_deg_L != 0){
			old_deg_L = 0;
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8015dd4:	b280      	uxth	r0, r0
 8015dd6:	f008 faa0 	bl	801e31a <TFT_FillRectangle>
			GUI_TextRu_Cd_m2(X+205, Y, 0);
 8015dda:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
 8015dde:	4632      	mov	r2, r6
 8015de0:	4629      	mov	r1, r5
 8015de2:	b280      	uxth	r0, r0
 8015de4:	f005 f972 	bl	801b0cc <GUI_TextRu_Cd_m2>
		GUI_TextRu_W_m2_sr(X+210, Y);
	}else if (Language_status == En && energy_light)
	{
		GUI_TextEn_W_m2_sr(X+210, Y);
	}
}
 8015de8:	b006      	add	sp, #24
 8015dea:	ecbd 8b02 	vpop	{d8}
 8015dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8015df2:	4606      	mov	r6, r0
 8015df4:	e707      	b.n	8015c06 <GUI_Text_L_Measure+0xd6>
	else if(!energy_light && number < old_numL_n)
 8015df6:	4b17      	ldr	r3, [pc, #92]	; (8015e54 <GUI_Text_L_Measure+0x324>)
 8015df8:	e744      	b.n	8015c84 <GUI_Text_L_Measure+0x154>
		}else if(!deg && old_deg_L != 0){
 8015dfa:	2a00      	cmp	r2, #0
 8015dfc:	d0f4      	beq.n	8015de8 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 0;
 8015dfe:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8015e00:	2163      	movs	r1, #99	; 0x63
 8015e02:	f105 031a 	add.w	r3, r5, #26
 8015e06:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8015e0a:	9100      	str	r1, [sp, #0]
 8015e0c:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
 8015e10:	b29b      	uxth	r3, r3
 8015e12:	b292      	uxth	r2, r2
 8015e14:	4629      	mov	r1, r5
 8015e16:	e7dd      	b.n	8015dd4 <GUI_Text_L_Measure+0x2a4>
 8015e18:	2000022a 	.word	0x2000022a
 8015e1c:	20005279 	.word	0x20005279
 8015e20:	200052b0 	.word	0x200052b0
 8015e24:	200052b1 	.word	0x200052b1
 8015e28:	2000022c 	.word	0x2000022c
 8015e2c:	200001e8 	.word	0x200001e8
 8015e30:	200001c0 	.word	0x200001c0
 8015e34:	40240000 	.word	0x40240000
 8015e38:	408f4000 	.word	0x408f4000
 8015e3c:	3ff00000 	.word	0x3ff00000
 8015e40:	447a0000 	.word	0x447a0000
 8015e44:	200001f0 	.word	0x200001f0
 8015e48:	080337ed 	.word	0x080337ed
 8015e4c:	20000232 	.word	0x20000232
 8015e50:	2000527b 	.word	0x2000527b
 8015e54:	20000233 	.word	0x20000233
	else if (Language_status == En && !energy_light)
 8015e58:	2f01      	cmp	r7, #1
 8015e5a:	d1c5      	bne.n	8015de8 <GUI_Text_L_Measure+0x2b8>
 8015e5c:	f1b9 0f00 	cmp.w	r9, #0
 8015e60:	d13b      	bne.n	8015eda <GUI_Text_L_Measure+0x3aa>
 8015e62:	4b21      	ldr	r3, [pc, #132]	; (8015ee8 <GUI_Text_L_Measure+0x3b8>)
		if (deg && old_deg_L != 1){
 8015e64:	781a      	ldrb	r2, [r3, #0]
 8015e66:	b1d6      	cbz	r6, 8015e9e <GUI_Text_L_Measure+0x36e>
 8015e68:	2a01      	cmp	r2, #1
 8015e6a:	d0bd      	beq.n	8015de8 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 1;
 8015e6c:	701f      	strb	r7, [r3, #0]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 8015e6e:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8015e72:	f105 031a 	add.w	r3, r5, #26
 8015e76:	1f69      	subs	r1, r5, #5
 8015e78:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8015e7c:	2663      	movs	r6, #99	; 0x63
 8015e7e:	b292      	uxth	r2, r2
 8015e80:	b289      	uxth	r1, r1
 8015e82:	b280      	uxth	r0, r0
 8015e84:	9600      	str	r6, [sp, #0]
 8015e86:	b29b      	uxth	r3, r3
 8015e88:	f008 fa47 	bl	801e31a <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+210, Y-4, 1);
 8015e8c:	1f29      	subs	r1, r5, #4
 8015e8e:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8015e92:	463a      	mov	r2, r7
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 8015e94:	b289      	uxth	r1, r1
 8015e96:	b280      	uxth	r0, r0
 8015e98:	f003 ff9e 	bl	8019dd8 <GUI_TextEn_cd_m2>
 8015e9c:	e7a4      	b.n	8015de8 <GUI_Text_L_Measure+0x2b8>
		}else if(!deg && old_deg_L != 0){
 8015e9e:	2a00      	cmp	r2, #0
 8015ea0:	d0a2      	beq.n	8015de8 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 0;
 8015ea2:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 8015ea4:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8015ea8:	f105 031a 	add.w	r3, r5, #26
 8015eac:	1f69      	subs	r1, r5, #5
 8015eae:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8015eb2:	2763      	movs	r7, #99	; 0x63
 8015eb4:	b292      	uxth	r2, r2
 8015eb6:	b289      	uxth	r1, r1
 8015eb8:	b280      	uxth	r0, r0
 8015eba:	9700      	str	r7, [sp, #0]
 8015ebc:	b29b      	uxth	r3, r3
 8015ebe:	f008 fa2c 	bl	801e31a <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 8015ec2:	1f29      	subs	r1, r5, #4
 8015ec4:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
 8015ec8:	4632      	mov	r2, r6
 8015eca:	e7e3      	b.n	8015e94 <GUI_Text_L_Measure+0x364>
		GUI_TextRu_W_m2_sr(X+210, Y);
 8015ecc:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8015ed0:	4629      	mov	r1, r5
 8015ed2:	b280      	uxth	r0, r0
 8015ed4:	f005 f898 	bl	801b008 <GUI_TextRu_W_m2_sr>
 8015ed8:	e786      	b.n	8015de8 <GUI_Text_L_Measure+0x2b8>
		GUI_TextEn_W_m2_sr(X+210, Y);
 8015eda:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8015ede:	4629      	mov	r1, r5
 8015ee0:	b280      	uxth	r0, r0
 8015ee2:	f003 ff21 	bl	8019d28 <GUI_TextEn_W_m2_sr>
}
 8015ee6:	e77f      	b.n	8015de8 <GUI_Text_L_Measure+0x2b8>
 8015ee8:	2000022c 	.word	0x2000022c

08015eec <GUI_Text_PPF_Measure>:
uint8_t old_numPPF = 10, old_nan_PPF = 0;
void GUI_Text_PPF_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8015eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ef0:	ed2d 8b02 	vpush	{d8}
 8015ef4:	4616      	mov	r6, r2
 8015ef6:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8015ef8:	4ab0      	ldr	r2, [pc, #704]	; (80161bc <GUI_Text_PPF_Measure+0x2d0>)
 8015efa:	4bb1      	ldr	r3, [pc, #708]	; (80161c0 <GUI_Text_PPF_Measure+0x2d4>)
 8015efc:	4fb1      	ldr	r7, [pc, #708]	; (80161c4 <GUI_Text_PPF_Measure+0x2d8>)
{	
 8015efe:	4604      	mov	r4, r0
 8015f00:	460d      	mov	r5, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8015f02:	7810      	ldrb	r0, [r2, #0]
 8015f04:	7819      	ldrb	r1, [r3, #0]
 8015f06:	4288      	cmp	r0, r1
{	
 8015f08:	b087      	sub	sp, #28
 8015f0a:	4698      	mov	r8, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8015f0c:	bf1c      	itt	ne
 8015f0e:	2300      	movne	r3, #0
 8015f10:	703b      	strbne	r3, [r7, #0]
	char buffer[9] = {0};
 8015f12:	2300      	movs	r3, #0
{	
 8015f14:	eeb0 8a40 	vmov.f32	s16, s0
 8015f18:	4691      	mov	r9, r2
	char buffer[9] = {0};
 8015f1a:	9303      	str	r3, [sp, #12]
 8015f1c:	9304      	str	r3, [sp, #16]
 8015f1e:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 122, deg = 0, number;
	uint32_t dec = 10;
	
		if(nope) 
 8015f22:	2e00      	cmp	r6, #0
 8015f24:	d067      	beq.n	8015ff6 <GUI_Text_PPF_Measure+0x10a>
		{	
			if(!old_nan_PPF){
 8015f26:	783e      	ldrb	r6, [r7, #0]
 8015f28:	2e00      	cmp	r6, #0
 8015f2a:	f040 80ef 	bne.w	801610c <GUI_Text_PPF_Measure+0x220>
				TFT_SetTextColor(TFT_White);
 8015f2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015f32:	f008 fc21 	bl	801e778 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015f36:	2063      	movs	r0, #99	; 0x63
 8015f38:	f008 fc24 	bl	801e784 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8015f3c:	48a2      	ldr	r0, [pc, #648]	; (80161c8 <GUI_Text_PPF_Measure+0x2dc>)
 8015f3e:	f008 fc15 	bl	801e76c <TFT_SetFont>
				TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);
 8015f42:	2163      	movs	r1, #99	; 0x63
 8015f44:	f105 031a 	add.w	r3, r5, #26
 8015f48:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015f4c:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8015f50:	9100      	str	r1, [sp, #0]
 8015f52:	b29b      	uxth	r3, r3
 8015f54:	b292      	uxth	r2, r2
 8015f56:	4629      	mov	r1, r5
 8015f58:	b280      	uxth	r0, r0
 8015f5a:	f008 f9de 	bl	801e31a <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8015f5e:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015f60:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8015f64:	f88d 300c 	strb.w	r3, [sp, #12]
 8015f68:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015f6c:	aa03      	add	r2, sp, #12
 8015f6e:	2303      	movs	r3, #3
 8015f70:	4629      	mov	r1, r5
 8015f72:	b280      	uxth	r0, r0
 8015f74:	f008 fd1c 	bl	801e9b0 <TFT_DisplayString>
				old_nan_PPF = 1;
 8015f78:	2301      	movs	r3, #1
 8015f7a:	703b      	strb	r3, [r7, #0]
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	
{
	TFT_SetTextColor(TFT_White);
 8015f7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015f80:	f008 fbfa 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015f84:	2063      	movs	r0, #99	; 0x63
 8015f86:	f008 fbfd 	bl	801e784 <TFT_SetBackColor>
	if(Language_status == Ru ){
 8015f8a:	4b90      	ldr	r3, [pc, #576]	; (80161cc <GUI_Text_PPF_Measure+0x2e0>)
 8015f8c:	f8df b258 	ldr.w	fp, [pc, #600]	; 80161e8 <GUI_Text_PPF_Measure+0x2fc>
 8015f90:	781b      	ldrb	r3, [r3, #0]
 8015f92:	1caf      	adds	r7, r5, #2
 8015f94:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	f040 80bf 	bne.w	801611c <GUI_Text_PPF_Measure+0x230>
			TFT_SetFont(&Font26RU_arch_big);
 8015f9e:	488c      	ldr	r0, [pc, #560]	; (80161d0 <GUI_Text_PPF_Measure+0x2e4>)
 8015fa0:	f008 fbe4 	bl	801e76c <TFT_SetFont>
			if(preGUI_screen_state != GUI_screen_state){
 8015fa4:	f899 2000 	ldrb.w	r2, [r9]
 8015fa8:	f898 3000 	ldrb.w	r3, [r8]
 8015fac:	429a      	cmp	r2, r3
 8015fae:	d012      	beq.n	8015fd6 <GUI_Text_PPF_Measure+0xea>
				TFT_DrawCharRus(X, Y, 'Ф'-17);
 8015fb0:	2293      	movs	r2, #147	; 0x93
 8015fb2:	4629      	mov	r1, r5
 8015fb4:	4620      	mov	r0, r4
 8015fb6:	f008 fbeb 	bl	801e790 <TFT_DrawCharRus>
				TFT_DrawCharRus(X+24, Y, 'А'-17);
 8015fba:	f104 0018 	add.w	r0, r4, #24
 8015fbe:	227f      	movs	r2, #127	; 0x7f
 8015fc0:	4629      	mov	r1, r5
 8015fc2:	b280      	uxth	r0, r0
 8015fc4:	f008 fbe4 	bl	801e790 <TFT_DrawCharRus>
				TFT_DrawCharRus(X+48, Y, 'Р'-17);}
 8015fc8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8015fcc:	228f      	movs	r2, #143	; 0x8f
 8015fce:	4629      	mov	r1, r5
 8015fd0:	b280      	uxth	r0, r0
 8015fd2:	f008 fbdd 	bl	801e790 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 8015fd6:	f89b 3000 	ldrb.w	r3, [fp]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	f000 8098 	beq.w	8016110 <GUI_Text_PPF_Measure+0x224>
 8015fe0:	4632      	mov	r2, r6
 8015fe2:	b2b9      	uxth	r1, r7
 8015fe4:	fa1f f08a 	uxth.w	r0, sl
 8015fe8:	f004 fed8 	bl	801ad9c <GUI_TextRu_umol>
				TFT_DrawChar(X+5, Y+2, 'P');
				TFT_DrawChar(X+20, Y+2, 'L');}
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
			}
		}	}
}
 8015fec:	b007      	add	sp, #28
 8015fee:	ecbd 8b02 	vpop	{d8}
 8015ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_PPF){TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);}
 8015ff6:	783b      	ldrb	r3, [r7, #0]
 8015ff8:	b16b      	cbz	r3, 8016016 <GUI_Text_PPF_Measure+0x12a>
 8015ffa:	2163      	movs	r1, #99	; 0x63
 8015ffc:	f105 031a 	add.w	r3, r5, #26
 8016000:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8016004:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8016008:	9100      	str	r1, [sp, #0]
 801600a:	b29b      	uxth	r3, r3
 801600c:	b292      	uxth	r2, r2
 801600e:	4629      	mov	r1, r5
 8016010:	b280      	uxth	r0, r0
 8016012:	f008 f982 	bl	801e31a <TFT_FillRectangle>
	Value = floor(Value*10)/10.0;
 8016016:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801601a:	ee68 7a27 	vmul.f32	s15, s16, s15
	old_nan_PPF = 0;
 801601e:	2300      	movs	r3, #0
	Value = floor(Value*10)/10.0;
 8016020:	ee17 0a90 	vmov	r0, s15
	old_nan_PPF = 0;
 8016024:	703b      	strb	r3, [r7, #0]
	Value = floor(Value*10)/10.0;
 8016026:	f7ea faa7 	bl	8000578 <__aeabi_f2d>
 801602a:	ec41 0b10 	vmov	d0, r0, r1
 801602e:	f00e fe63 	bl	8024cf8 <floor>
 8016032:	2200      	movs	r2, #0
 8016034:	ec51 0b10 	vmov	r0, r1, d0
 8016038:	4b66      	ldr	r3, [pc, #408]	; (80161d4 <GUI_Text_PPF_Measure+0x2e8>)
 801603a:	f7ea fc1b 	bl	8000874 <__aeabi_ddiv>
 801603e:	f7ea fde7 	bl	8000c10 <__aeabi_d2f>
	if((Value/1000) >= 1.0)
 8016042:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80161d8 <GUI_Text_PPF_Measure+0x2ec>
	Value = floor(Value*10)/10.0;
 8016046:	ee08 0a10 	vmov	s16, r0
	if((Value/1000) >= 1.0)
 801604a:	eec8 7a07 	vdiv.f32	s15, s16, s14
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801604e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016052:	f249 40d2 	movw	r0, #38098	; 0x94d2
	uint8_t	delta_pos = 122, deg = 0, number;
 8016056:	277a      	movs	r7, #122	; 0x7a
	if((Value/1000) >= 1.0)
 8016058:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		Value = Value/(1000);
 801605c:	eef4 7a68 	vcmp.f32	s15, s17
 8016060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016064:	bfa8      	it	ge
 8016066:	eeb0 8a67 	vmovge.f32	s16, s15
 801606a:	bfa8      	it	ge
 801606c:	2601      	movge	r6, #1
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801606e:	f1bb 0f00 	cmp.w	fp, #0
 8016072:	bf08      	it	eq
 8016074:	4618      	moveq	r0, r3
 8016076:	f008 fb7f 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801607a:	2063      	movs	r0, #99	; 0x63
 801607c:	f008 fb82 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8016080:	4851      	ldr	r0, [pc, #324]	; (80161c8 <GUI_Text_PPF_Measure+0x2dc>)
 8016082:	f008 fb73 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8016086:	ee18 0a10 	vmov	r0, s16
 801608a:	f7ea fa75 	bl	8000578 <__aeabi_f2d>
 801608e:	4602      	mov	r2, r0
 8016090:	460b      	mov	r3, r1
 8016092:	a803      	add	r0, sp, #12
 8016094:	4951      	ldr	r1, [pc, #324]	; (80161dc <GUI_Text_PPF_Measure+0x2f0>)
 8016096:	f00b fe83 	bl	8021da0 <sprintf>
	uint32_t dec = 10;
 801609a:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 801609c:	2304      	movs	r3, #4
			dec *= 10;
 801609e:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80160a0:	ee07 2a90 	vmov	s15, r2
 80160a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80160a8:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80160ac:	eef4 7ae8 	vcmpe.f32	s15, s17
 80160b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160b4:	db06      	blt.n	80160c4 <GUI_Text_PPF_Measure+0x1d8>
			delta_pos-=23;
 80160b6:	3f17      	subs	r7, #23
			number++;
 80160b8:	f10a 0a01 	add.w	sl, sl, #1
			dec *= 10;
 80160bc:	434a      	muls	r2, r1
			delta_pos-=23;
 80160be:	b2ff      	uxtb	r7, r7
			number++;
 80160c0:	fa5f fa8a 	uxtb.w	sl, sl
 80160c4:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80160c6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80160ca:	d1e9      	bne.n	80160a0 <GUI_Text_PPF_Measure+0x1b4>
	if(number < old_numPPF )
 80160cc:	4b44      	ldr	r3, [pc, #272]	; (80161e0 <GUI_Text_PPF_Measure+0x2f4>)
 80160ce:	781a      	ldrb	r2, [r3, #0]
 80160d0:	4552      	cmp	r2, sl
 80160d2:	469b      	mov	fp, r3
 80160d4:	d90d      	bls.n	80160f2 <GUI_Text_PPF_Measure+0x206>
		TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);
 80160d6:	2163      	movs	r1, #99	; 0x63
 80160d8:	f105 031a 	add.w	r3, r5, #26
 80160dc:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 80160e0:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80160e4:	9100      	str	r1, [sp, #0]
 80160e6:	b29b      	uxth	r3, r3
 80160e8:	b292      	uxth	r2, r2
 80160ea:	4629      	mov	r1, r5
 80160ec:	b280      	uxth	r0, r0
 80160ee:	f008 f914 	bl	801e31a <TFT_FillRectangle>
	buffer[8] = 0;
 80160f2:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80160f4:	19e0      	adds	r0, r4, r7
	buffer[8] = 0;
 80160f6:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80160fa:	aa03      	add	r2, sp, #12
 80160fc:	2303      	movs	r3, #3
 80160fe:	4629      	mov	r1, r5
 8016100:	b280      	uxth	r0, r0
	old_numPPF = number;
 8016102:	f88b a000 	strb.w	sl, [fp]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016106:	f008 fc53 	bl	801e9b0 <TFT_DisplayString>
 801610a:	e737      	b.n	8015f7c <GUI_Text_PPF_Measure+0x90>
	uint8_t	delta_pos = 122, deg = 0, number;
 801610c:	461e      	mov	r6, r3
 801610e:	e735      	b.n	8015f7c <GUI_Text_PPF_Measure+0x90>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 8016110:	b2b9      	uxth	r1, r7
 8016112:	fa1f f08a 	uxth.w	r0, sl
 8016116:	f004 feaf 	bl	801ae78 <GUI_TextRu_umol_sr>
 801611a:	e767      	b.n	8015fec <GUI_Text_PPF_Measure+0x100>
			TFT_SetFont(&Font16EN_arch_big);
 801611c:	4831      	ldr	r0, [pc, #196]	; (80161e4 <GUI_Text_PPF_Measure+0x2f8>)
 801611e:	f008 fb25 	bl	801e76c <TFT_SetFont>
			if(Mode_EL){
 8016122:	f89b 3000 	ldrb.w	r3, [fp]
				if(preGUI_screen_state != GUI_screen_state){
 8016126:	f899 2000 	ldrb.w	r2, [r9]
			if(Mode_EL){
 801612a:	b333      	cbz	r3, 801617a <GUI_Text_PPF_Measure+0x28e>
				if(preGUI_screen_state != GUI_screen_state){
 801612c:	f898 3000 	ldrb.w	r3, [r8]
 8016130:	429a      	cmp	r2, r3
 8016132:	d01b      	beq.n	801616c <GUI_Text_PPF_Measure+0x280>
				TFT_DrawChar(X-10, Y+2, 'P');
 8016134:	b2bd      	uxth	r5, r7
 8016136:	f1a4 000a 	sub.w	r0, r4, #10
 801613a:	2250      	movs	r2, #80	; 0x50
 801613c:	4629      	mov	r1, r5
 801613e:	b280      	uxth	r0, r0
 8016140:	f008 fbde 	bl	801e900 <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 8016144:	1d60      	adds	r0, r4, #5
 8016146:	2250      	movs	r2, #80	; 0x50
 8016148:	4629      	mov	r1, r5
 801614a:	b280      	uxth	r0, r0
 801614c:	f008 fbd8 	bl	801e900 <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'F');
 8016150:	f104 0014 	add.w	r0, r4, #20
 8016154:	2246      	movs	r2, #70	; 0x46
 8016156:	4629      	mov	r1, r5
 8016158:	b280      	uxth	r0, r0
 801615a:	f008 fbd1 	bl	801e900 <TFT_DrawChar>
				TFT_DrawChar(X+35, Y+2, 'D');}
 801615e:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8016162:	2244      	movs	r2, #68	; 0x44
 8016164:	4629      	mov	r1, r5
 8016166:	b280      	uxth	r0, r0
 8016168:	f008 fbca 	bl	801e900 <TFT_DrawChar>
				GUI_TextEn_umol(X+200, Y+2, deg);
 801616c:	4632      	mov	r2, r6
 801616e:	b2b9      	uxth	r1, r7
 8016170:	fa1f f08a 	uxth.w	r0, sl
 8016174:	f002 feb2 	bl	8018edc <GUI_TextEn_umol>
 8016178:	e738      	b.n	8015fec <GUI_Text_PPF_Measure+0x100>
				if(preGUI_screen_state != GUI_screen_state){
 801617a:	f898 3000 	ldrb.w	r3, [r8]
 801617e:	429a      	cmp	r2, r3
 8016180:	d014      	beq.n	80161ac <GUI_Text_PPF_Measure+0x2c0>
				TFT_DrawChar(X-10, Y+2, 'P');
 8016182:	b2bd      	uxth	r5, r7
 8016184:	f1a4 000a 	sub.w	r0, r4, #10
 8016188:	2250      	movs	r2, #80	; 0x50
 801618a:	4629      	mov	r1, r5
 801618c:	b280      	uxth	r0, r0
 801618e:	f008 fbb7 	bl	801e900 <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 8016192:	1d60      	adds	r0, r4, #5
 8016194:	2250      	movs	r2, #80	; 0x50
 8016196:	4629      	mov	r1, r5
 8016198:	b280      	uxth	r0, r0
 801619a:	f008 fbb1 	bl	801e900 <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'L');}
 801619e:	f104 0014 	add.w	r0, r4, #20
 80161a2:	224c      	movs	r2, #76	; 0x4c
 80161a4:	4629      	mov	r1, r5
 80161a6:	b280      	uxth	r0, r0
 80161a8:	f008 fbaa 	bl	801e900 <TFT_DrawChar>
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
 80161ac:	4632      	mov	r2, r6
 80161ae:	b2b9      	uxth	r1, r7
 80161b0:	fa1f f08a 	uxth.w	r0, sl
 80161b4:	f002 fef8 	bl	8018fa8 <GUI_TextEn_umol_sr>
}
 80161b8:	e718      	b.n	8015fec <GUI_Text_PPF_Measure+0x100>
 80161ba:	bf00      	nop
 80161bc:	2000022a 	.word	0x2000022a
 80161c0:	20005279 	.word	0x20005279
 80161c4:	200052b2 	.word	0x200052b2
 80161c8:	200001f0 	.word	0x200001f0
 80161cc:	2000527b 	.word	0x2000527b
 80161d0:	20000200 	.word	0x20000200
 80161d4:	40240000 	.word	0x40240000
 80161d8:	447a0000 	.word	0x447a0000
 80161dc:	080337ed 	.word	0x080337ed
 80161e0:	20000234 	.word	0x20000234
 80161e4:	200001b0 	.word	0x200001b0
 80161e8:	20000a48 	.word	0x20000a48

080161ec <GUI_Text_PPFRGB_Measure>:
uint8_t old_numPPFR = 10, old_numPPFG = 10, old_numPPFB = 10, old_numPPFFR = 10, test = 0, test2 = 0, delta_pos2 = 140, old_nan_PPFRGB = 0;
float ValueB2 = 10;
void GUI_Text_PPFRGB_Measure(uint16_t X, uint16_t Y, float ValueR, float ValueG, float ValueB, float ValueFR, uint8_t nope, uint8_t grey)
{
 80161ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161f0:	ed2d 8b08 	vpush	{d8-d11}
 80161f4:	4616      	mov	r6, r2
 80161f6:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 80161f8:	4aad      	ldr	r2, [pc, #692]	; (80164b0 <GUI_Text_PPFRGB_Measure+0x2c4>)
 80161fa:	4bae      	ldr	r3, [pc, #696]	; (80164b4 <GUI_Text_PPFRGB_Measure+0x2c8>)
 80161fc:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80164d0 <GUI_Text_PPFRGB_Measure+0x2e4>
{
 8016200:	4605      	mov	r5, r0
 8016202:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8016204:	7810      	ldrb	r0, [r2, #0]
 8016206:	7819      	ldrb	r1, [r3, #0]
{
 8016208:	b089      	sub	sp, #36	; 0x24
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 801620a:	4288      	cmp	r0, r1
 801620c:	9303      	str	r3, [sp, #12]
 801620e:	bf1c      	itt	ne
 8016210:	2300      	movne	r3, #0
 8016212:	f889 3000 	strbne.w	r3, [r9]
	
	char buffer[9] = {0};
 8016216:	2300      	movs	r3, #0
{
 8016218:	eeb0 ba40 	vmov.f32	s22, s0
 801621c:	eef0 9a60 	vmov.f32	s19, s1
 8016220:	eeb0 8a41 	vmov.f32	s16, s2
 8016224:	eef0 aa61 	vmov.f32	s21, s3
 8016228:	9202      	str	r2, [sp, #8]
	char buffer[9] = {0};
 801622a:	9305      	str	r3, [sp, #20]
 801622c:	9306      	str	r3, [sp, #24]
 801622e:	f88d 301c 	strb.w	r3, [sp, #28]
	uint8_t	delta_pos = 140, deg = 0, number=0;
	uint32_t dec = 10;
		if(nope) 
 8016232:	2e00      	cmp	r6, #0
 8016234:	f000 814e 	beq.w	80164d4 <GUI_Text_PPFRGB_Measure+0x2e8>
		{	
			if(!old_nan_PPFRGB){
 8016238:	f899 7000 	ldrb.w	r7, [r9]
 801623c:	2f00      	cmp	r7, #0
 801623e:	f040 8379 	bne.w	8016934 <GUI_Text_PPFRGB_Measure+0x748>
				TFT_SetTextColor(TFT_White);
 8016242:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016246:	f008 fa97 	bl	801e778 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801624a:	2063      	movs	r0, #99	; 0x63
 801624c:	f008 fa9a 	bl	801e784 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8016250:	f105 0662 	add.w	r6, r5, #98	; 0x62
				TFT_SetFont(&Font26EN_arch_digit);
 8016254:	4898      	ldr	r0, [pc, #608]	; (80164b8 <GUI_Text_PPFRGB_Measure+0x2cc>)
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8016256:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
				TFT_SetFont(&Font26EN_arch_digit);
 801625a:	f008 fa87 	bl	801e76c <TFT_SetFont>
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 801625e:	b2b6      	uxth	r6, r6
 8016260:	fa1f f888 	uxth.w	r8, r8
 8016264:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8016268:	f104 0314 	add.w	r3, r4, #20
 801626c:	4630      	mov	r0, r6
 801626e:	b29b      	uxth	r3, r3
 8016270:	4642      	mov	r2, r8
 8016272:	4621      	mov	r1, r4
 8016274:	f8cd a000 	str.w	sl, [sp]
 8016278:	f008 f84f 	bl	801e31a <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 801627c:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8016280:	f104 0115 	add.w	r1, r4, #21
 8016284:	4630      	mov	r0, r6
 8016286:	b29b      	uxth	r3, r3
 8016288:	4642      	mov	r2, r8
 801628a:	b289      	uxth	r1, r1
 801628c:	f8cd a000 	str.w	sl, [sp]
 8016290:	f008 f843 	bl	801e31a <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 8016294:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8016298:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 801629c:	4630      	mov	r0, r6
 801629e:	b29b      	uxth	r3, r3
 80162a0:	4642      	mov	r2, r8
 80162a2:	b289      	uxth	r1, r1
 80162a4:	f8cd a000 	str.w	sl, [sp]
 80162a8:	f008 f837 	bl	801e31a <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 80162ac:	f104 0357 	add.w	r3, r4, #87	; 0x57
 80162b0:	f104 0141 	add.w	r1, r4, #65	; 0x41
 80162b4:	4630      	mov	r0, r6
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	4642      	mov	r2, r8
 80162ba:	b289      	uxth	r1, r1
 80162bc:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80162c0:	f105 0675 	add.w	r6, r5, #117	; 0x75
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 80162c4:	f008 f829 	bl	801e31a <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80162c8:	b2b6      	uxth	r6, r6
				buffer[0] = '-';buffer[1] = '-';
 80162ca:	232d      	movs	r3, #45	; 0x2d
 80162cc:	f88d 3014 	strb.w	r3, [sp, #20]
 80162d0:	f88d 3015 	strb.w	r3, [sp, #21]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80162d4:	aa05      	add	r2, sp, #20
 80162d6:	2303      	movs	r3, #3
 80162d8:	4621      	mov	r1, r4
 80162da:	4630      	mov	r0, r6
 80162dc:	f008 fb68 	bl	801e9b0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+22, (uint8_t *)buffer, LEFT_MODE);
 80162e0:	f104 0116 	add.w	r1, r4, #22
 80162e4:	2303      	movs	r3, #3
 80162e6:	aa05      	add	r2, sp, #20
 80162e8:	b289      	uxth	r1, r1
 80162ea:	4630      	mov	r0, r6
 80162ec:	f008 fb60 	bl	801e9b0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+44, (uint8_t *)buffer, LEFT_MODE);
 80162f0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80162f4:	2303      	movs	r3, #3
 80162f6:	aa05      	add	r2, sp, #20
 80162f8:	b289      	uxth	r1, r1
 80162fa:	4630      	mov	r0, r6
 80162fc:	f008 fb58 	bl	801e9b0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8016300:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8016304:	2303      	movs	r3, #3
 8016306:	aa05      	add	r2, sp, #20
 8016308:	b289      	uxth	r1, r1
 801630a:	4630      	mov	r0, r6
 801630c:	f008 fb50 	bl	801e9b0 <TFT_DisplayString>
				old_nan_PPFRGB = 1;
 8016310:	2301      	movs	r3, #1
 8016312:	f889 3000 	strb.w	r3, [r9]
	number = 0;
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 8016316:	9b02      	ldr	r3, [sp, #8]
 8016318:	781a      	ldrb	r2, [r3, #0]
 801631a:	9b03      	ldr	r3, [sp, #12]
 801631c:	781b      	ldrb	r3, [r3, #0]
 801631e:	429a      	cmp	r2, r3
 8016320:	f000 80c1 	beq.w	80164a6 <GUI_Text_PPFRGB_Measure+0x2ba>
if (Language_status==Ru)
 8016324:	4e65      	ldr	r6, [pc, #404]	; (80164bc <GUI_Text_PPFRGB_Measure+0x2d0>)
 8016326:	7833      	ldrb	r3, [r6, #0]
 8016328:	2b00      	cmp	r3, #0
 801632a:	f040 830a 	bne.w	8016942 <GUI_Text_PPFRGB_Measure+0x756>
	{	TFT_SetTextColor(TFT_White);
 801632e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016332:	f008 fa21 	bl	801e778 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
 8016336:	4862      	ldr	r0, [pc, #392]	; (80164c0 <GUI_Text_PPFRGB_Measure+0x2d4>)
 8016338:	f008 fa18 	bl	801e76c <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y, 'С');
 801633c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016340:	22a1      	movs	r2, #161	; 0xa1
 8016342:	4621      	mov	r1, r4
 8016344:	b280      	uxth	r0, r0
 8016346:	f008 fa23 	bl	801e790 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+5, 'и');
 801634a:	f104 0805 	add.w	r8, r4, #5
		TFT_SetFont(&Font16RU_arch_small);
 801634e:	485d      	ldr	r0, [pc, #372]	; (80164c4 <GUI_Text_PPFRGB_Measure+0x2d8>)
 8016350:	f008 fa0c 	bl	801e76c <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+5, 'и');
 8016354:	fa1f f888 	uxth.w	r8, r8
 8016358:	f105 0036 	add.w	r0, r5, #54	; 0x36
 801635c:	22b8      	movs	r2, #184	; 0xb8
 801635e:	4641      	mov	r1, r8
 8016360:	b280      	uxth	r0, r0
 8016362:	f008 fa15 	bl	801e790 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+5, 'н');
 8016366:	f105 0042 	add.w	r0, r5, #66	; 0x42
 801636a:	b280      	uxth	r0, r0
 801636c:	22bd      	movs	r2, #189	; 0xbd
 801636e:	4641      	mov	r1, r8
 8016370:	f008 fa0e 	bl	801e790 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8016374:	4b54      	ldr	r3, [pc, #336]	; (80164c8 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8016376:	781b      	ldrb	r3, [r3, #0]
 8016378:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 801637c:	2b00      	cmp	r3, #0
 801637e:	f000 82db 	beq.w	8016938 <GUI_Text_PPFRGB_Measure+0x74c>
 8016382:	463a      	mov	r2, r7
 8016384:	4621      	mov	r1, r4
 8016386:	b280      	uxth	r0, r0
 8016388:	f004 fd08 	bl	801ad9c <GUI_TextRu_umol>
	{TFT_SetTextColor(TFT_White);
		GUI_TextEn_Blue(X+34, Y);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
	}
	
	if (Language_status==Ru)
 801638c:	7833      	ldrb	r3, [r6, #0]
 801638e:	2b00      	cmp	r3, #0
 8016390:	f040 82f7 	bne.w	8016982 <GUI_Text_PPFRGB_Measure+0x796>
	{	TFT_SetTextColor(TFT_White);
 8016394:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016398:	f008 f9ee 	bl	801e778 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+22, 'З');
 801639c:	f104 0816 	add.w	r8, r4, #22
		TFT_SetFont(&Font16RU_arch_big);
 80163a0:	4847      	ldr	r0, [pc, #284]	; (80164c0 <GUI_Text_PPFRGB_Measure+0x2d4>)
 80163a2:	f008 f9e3 	bl	801e76c <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+22, 'З');
 80163a6:	fa1f f888 	uxth.w	r8, r8
 80163aa:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80163ae:	2297      	movs	r2, #151	; 0x97
 80163b0:	4641      	mov	r1, r8
 80163b2:	b280      	uxth	r0, r0
 80163b4:	f008 f9ec 	bl	801e790 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+27, 'е');
 80163b8:	f104 091b 	add.w	r9, r4, #27
		TFT_SetFont(&Font16RU_arch_small);
 80163bc:	4841      	ldr	r0, [pc, #260]	; (80164c4 <GUI_Text_PPFRGB_Measure+0x2d8>)
 80163be:	f008 f9d5 	bl	801e76c <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+27, 'е');
 80163c2:	fa1f f989 	uxth.w	r9, r9
 80163c6:	f105 0036 	add.w	r0, r5, #54	; 0x36
 80163ca:	22b5      	movs	r2, #181	; 0xb5
 80163cc:	4649      	mov	r1, r9
 80163ce:	b280      	uxth	r0, r0
 80163d0:	f008 f9de 	bl	801e790 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+27, 'л');
 80163d4:	f105 0042 	add.w	r0, r5, #66	; 0x42
 80163d8:	b280      	uxth	r0, r0
 80163da:	22bb      	movs	r2, #187	; 0xbb
 80163dc:	4649      	mov	r1, r9
 80163de:	f008 f9d7 	bl	801e790 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 80163e2:	4b39      	ldr	r3, [pc, #228]	; (80164c8 <GUI_Text_PPFRGB_Measure+0x2dc>)
 80163e4:	781b      	ldrb	r3, [r3, #0]
 80163e6:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	f000 82c4 	beq.w	8016978 <GUI_Text_PPFRGB_Measure+0x78c>
 80163f0:	463a      	mov	r2, r7
 80163f2:	4641      	mov	r1, r8
 80163f4:	b280      	uxth	r0, r0
 80163f6:	f004 fcd1 	bl	801ad9c <GUI_TextRu_umol>
		GUI_TextEn_Green(X+17, Y+22);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
	}
	
	
	if (Language_status==Ru)
 80163fa:	7833      	ldrb	r3, [r6, #0]
 80163fc:	f105 0925 	add.w	r9, r5, #37	; 0x25
 8016400:	2b00      	cmp	r3, #0
 8016402:	f040 82e2 	bne.w	80169ca <GUI_Text_PPFRGB_Measure+0x7de>
	{	TFT_SetTextColor(TFT_White);
 8016406:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801640a:	f008 f9b5 	bl	801e778 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+44, 'К');
 801640e:	f104 082c 	add.w	r8, r4, #44	; 0x2c
		TFT_SetFont(&Font16RU_arch_big);
 8016412:	482b      	ldr	r0, [pc, #172]	; (80164c0 <GUI_Text_PPFRGB_Measure+0x2d4>)
 8016414:	f008 f9aa 	bl	801e76c <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+44, 'К');
 8016418:	fa1f f888 	uxth.w	r8, r8
 801641c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016420:	229a      	movs	r2, #154	; 0x9a
 8016422:	4641      	mov	r1, r8
 8016424:	b280      	uxth	r0, r0
 8016426:	f008 f9b3 	bl	801e790 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
 801642a:	4826      	ldr	r0, [pc, #152]	; (80164c4 <GUI_Text_PPFRGB_Measure+0x2d8>)
 801642c:	f008 f99e 	bl	801e76c <TFT_SetFont>
		TFT_DrawCharRus(X+55, Y+49, 'р');
 8016430:	f104 0131 	add.w	r1, r4, #49	; 0x31
 8016434:	f105 0037 	add.w	r0, r5, #55	; 0x37
 8016438:	b280      	uxth	r0, r0
 801643a:	2280      	movs	r2, #128	; 0x80
 801643c:	b289      	uxth	r1, r1
 801643e:	f008 f9a7 	bl	801e790 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 8016442:	4b21      	ldr	r3, [pc, #132]	; (80164c8 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8016444:	781b      	ldrb	r3, [r3, #0]
 8016446:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 801644a:	2b00      	cmp	r3, #0
 801644c:	f000 82b8 	beq.w	80169c0 <GUI_Text_PPFRGB_Measure+0x7d4>
 8016450:	463a      	mov	r2, r7
 8016452:	4641      	mov	r1, r8
 8016454:	b280      	uxth	r0, r0
 8016456:	f004 fca1 	bl	801ad9c <GUI_TextRu_umol>
	else if (Language_status==En)
	{	TFT_SetTextColor(TFT_White);
		GUI_TextEn_Red(X+37, Y+44);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
	}
	TFT_SetTextColor(TFT_White);
 801645a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+37, Y+66, 'F');
 801645e:	3442      	adds	r4, #66	; 0x42
	TFT_SetTextColor(TFT_White);
 8016460:	f008 f98a 	bl	801e778 <TFT_SetTextColor>
	TFT_DrawChar(X+37, Y+66, 'F');
 8016464:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_big);
 8016466:	4819      	ldr	r0, [pc, #100]	; (80164cc <GUI_Text_PPFRGB_Measure+0x2e0>)
 8016468:	f008 f980 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+37, Y+66, 'F');
 801646c:	2246      	movs	r2, #70	; 0x46
 801646e:	4621      	mov	r1, r4
 8016470:	fa1f f089 	uxth.w	r0, r9
 8016474:	f008 fa44 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+66, 'R');
 8016478:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801647c:	2252      	movs	r2, #82	; 0x52
 801647e:	4621      	mov	r1, r4
 8016480:	b280      	uxth	r0, r0
 8016482:	f008 fa3d 	bl	801e900 <TFT_DrawChar>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 8016486:	7833      	ldrb	r3, [r6, #0]
 8016488:	2b00      	cmp	r3, #0
 801648a:	f040 82c1 	bne.w	8016a10 <GUI_Text_PPFRGB_Measure+0x824>
 801648e:	4b0e      	ldr	r3, [pc, #56]	; (80164c8 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8016490:	781b      	ldrb	r3, [r3, #0]
 8016492:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8016496:	2b00      	cmp	r3, #0
 8016498:	f000 82b5 	beq.w	8016a06 <GUI_Text_PPFRGB_Measure+0x81a>
 801649c:	463a      	mov	r2, r7
 801649e:	4621      	mov	r1, r4
 80164a0:	b280      	uxth	r0, r0
 80164a2:	f004 fc7b 	bl	801ad9c <GUI_TextRu_umol>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
}
}
 80164a6:	b009      	add	sp, #36	; 0x24
 80164a8:	ecbd 8b08 	vpop	{d8-d11}
 80164ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164b0:	2000022a 	.word	0x2000022a
 80164b4:	20005279 	.word	0x20005279
 80164b8:	200001f0 	.word	0x200001f0
 80164bc:	2000527b 	.word	0x2000527b
 80164c0:	200001d0 	.word	0x200001d0
 80164c4:	200001d8 	.word	0x200001d8
 80164c8:	20000a48 	.word	0x20000a48
 80164cc:	200001b0 	.word	0x200001b0
 80164d0:	200052b3 	.word	0x200052b3
		if(old_nan_PPFRGB) 
 80164d4:	f899 3000 	ldrb.w	r3, [r9]
 80164d8:	b3b3      	cbz	r3, 8016548 <GUI_Text_PPFRGB_Measure+0x35c>
			TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 80164da:	f105 0762 	add.w	r7, r5, #98	; 0x62
 80164de:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
 80164e2:	b2bf      	uxth	r7, r7
 80164e4:	fa1f f888 	uxth.w	r8, r8
 80164e8:	f04f 0a63 	mov.w	sl, #99	; 0x63
 80164ec:	f104 0314 	add.w	r3, r4, #20
 80164f0:	b29b      	uxth	r3, r3
 80164f2:	4642      	mov	r2, r8
 80164f4:	4621      	mov	r1, r4
 80164f6:	4638      	mov	r0, r7
 80164f8:	f8cd a000 	str.w	sl, [sp]
 80164fc:	f007 ff0d 	bl	801e31a <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 8016500:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8016504:	f104 0115 	add.w	r1, r4, #21
 8016508:	b29b      	uxth	r3, r3
 801650a:	4642      	mov	r2, r8
 801650c:	b289      	uxth	r1, r1
 801650e:	4638      	mov	r0, r7
 8016510:	f8cd a000 	str.w	sl, [sp]
 8016514:	f007 ff01 	bl	801e31a <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 8016518:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 801651c:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8016520:	b29b      	uxth	r3, r3
 8016522:	4642      	mov	r2, r8
 8016524:	b289      	uxth	r1, r1
 8016526:	4638      	mov	r0, r7
 8016528:	f8cd a000 	str.w	sl, [sp]
 801652c:	f007 fef5 	bl	801e31a <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 8016530:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8016534:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8016538:	f8cd a000 	str.w	sl, [sp]
 801653c:	b29b      	uxth	r3, r3
 801653e:	4642      	mov	r2, r8
 8016540:	b289      	uxth	r1, r1
 8016542:	4638      	mov	r0, r7
 8016544:	f007 fee9 	bl	801e31a <TFT_FillRectangle>
	ValueB = floor(ValueB*10)/10.0;
 8016548:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
 801654c:	ee68 7a28 	vmul.f32	s15, s16, s17
	old_nan_PPFRGB = 0;
 8016550:	2700      	movs	r7, #0
	ValueB = floor(ValueB*10)/10.0;
 8016552:	ee17 0a90 	vmov	r0, s15
	old_nan_PPFRGB = 0;
 8016556:	f889 7000 	strb.w	r7, [r9]
	ValueB = floor(ValueB*10)/10.0;
 801655a:	f7ea f80d 	bl	8000578 <__aeabi_f2d>
 801655e:	ec41 0b10 	vmov	d0, r0, r1
 8016562:	f00e fbc9 	bl	8024cf8 <floor>
 8016566:	2200      	movs	r2, #0
 8016568:	ec51 0b10 	vmov	r0, r1, d0
 801656c:	4bd4      	ldr	r3, [pc, #848]	; (80168c0 <GUI_Text_PPFRGB_Measure+0x6d4>)
 801656e:	f7ea f981 	bl	8000874 <__aeabi_ddiv>
 8016572:	f7ea fb4d 	bl	8000c10 <__aeabi_d2f>
	if((ValueB/1000) > 1.0)
 8016576:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 80168c4 <GUI_Text_PPFRGB_Measure+0x6d8>
	test = ValueB/(dec);
 801657a:	4ad3      	ldr	r2, [pc, #844]	; (80168c8 <GUI_Text_PPFRGB_Measure+0x6dc>)
	ValueB = floor(ValueB*10)/10.0;
 801657c:	ee09 0a10 	vmov	s18, r0
	if((ValueB/1000) > 1.0)
 8016580:	eec9 7a07 	vdiv.f32	s15, s18, s14
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016584:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8016588:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		ValueB = ValueB/(1000);
 801658c:	eef4 7a48 	vcmp.f32	s15, s16
 8016590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016594:	bfc8      	it	gt
 8016596:	eeb0 9a67 	vmovgt.f32	s18, s15
	test = ValueB/(dec);
 801659a:	eec9 7a28 	vdiv.f32	s15, s18, s17
 801659e:	eeb0 aa47 	vmov.f32	s20, s14
 80165a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	test2 = ValueB/(dec*dec);
 80165a6:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 80168cc <GUI_Text_PPFRGB_Measure+0x6e0>
	test = ValueB/(dec);
 80165aa:	ee17 3a90 	vmov	r3, s15
	test2 = ValueB/(dec*dec);
 80165ae:	eec9 7a07 	vdiv.f32	s15, s18, s14
	test = ValueB/(dec);
 80165b2:	7013      	strb	r3, [r2, #0]
	test2 = ValueB/(dec*dec);
 80165b4:	4ac6      	ldr	r2, [pc, #792]	; (80168d0 <GUI_Text_PPFRGB_Measure+0x6e4>)
 80165b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80165ba:	ee17 3a90 	vmov	r3, s15
 80165be:	7013      	strb	r3, [r2, #0]
	delta_pos2 = 140;
 80165c0:	4bc4      	ldr	r3, [pc, #784]	; (80168d4 <GUI_Text_PPFRGB_Measure+0x6e8>)
 80165c2:	228c      	movs	r2, #140	; 0x8c
 80165c4:	701a      	strb	r2, [r3, #0]
 80165c6:	4698      	mov	r8, r3
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80165c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165cc:	45bb      	cmp	fp, r7
 80165ce:	bf08      	it	eq
 80165d0:	4618      	moveq	r0, r3
 80165d2:	f008 f8d1 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80165d6:	2063      	movs	r0, #99	; 0x63
 80165d8:	f008 f8d4 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80165dc:	48be      	ldr	r0, [pc, #760]	; (80168d8 <GUI_Text_PPFRGB_Measure+0x6ec>)
 80165de:	f008 f8c5 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueB);
 80165e2:	ee19 0a10 	vmov	r0, s18
 80165e6:	f7e9 ffc7 	bl	8000578 <__aeabi_f2d>
 80165ea:	4602      	mov	r2, r0
 80165ec:	460b      	mov	r3, r1
 80165ee:	a805      	add	r0, sp, #20
 80165f0:	49ba      	ldr	r1, [pc, #744]	; (80168dc <GUI_Text_PPFRGB_Measure+0x6f0>)
 80165f2:	f00b fbd5 	bl	8021da0 <sprintf>
	uint32_t dec = 10;
 80165f6:	210a      	movs	r1, #10
 80165f8:	f898 3000 	ldrb.w	r3, [r8]
	sprintf (buffer, "%.1f", ValueB);
 80165fc:	2204      	movs	r2, #4
 80165fe:	4638      	mov	r0, r7
			dec *= 10;
 8016600:	468e      	mov	lr, r1
		if((ValueB/((float)dec)) >= 1.0)
 8016602:	ee07 1a90 	vmov	s15, r1
 8016606:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801660a:	eec9 7a07 	vdiv.f32	s15, s18, s14
 801660e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016616:	db06      	blt.n	8016626 <GUI_Text_PPFRGB_Measure+0x43a>
			delta_pos2-=22;
 8016618:	3b16      	subs	r3, #22
			number++;
 801661a:	3701      	adds	r7, #1
			dec *= 10;
 801661c:	fb0e f101 	mul.w	r1, lr, r1
			delta_pos2-=22;
 8016620:	b2db      	uxtb	r3, r3
			number++;
 8016622:	b2ff      	uxtb	r7, r7
 8016624:	2001      	movs	r0, #1
 8016626:	3a01      	subs	r2, #1
	for (uint8_t i = 1; i <= 4; i++)
 8016628:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801662c:	d1e9      	bne.n	8016602 <GUI_Text_PPFRGB_Measure+0x416>
 801662e:	b108      	cbz	r0, 8016634 <GUI_Text_PPFRGB_Measure+0x448>
 8016630:	f888 3000 	strb.w	r3, [r8]
	if(number < old_numPPFB )
 8016634:	4baa      	ldr	r3, [pc, #680]	; (80168e0 <GUI_Text_PPFRGB_Measure+0x6f4>)
 8016636:	781a      	ldrb	r2, [r3, #0]
 8016638:	42ba      	cmp	r2, r7
 801663a:	4699      	mov	r9, r3
 801663c:	d90d      	bls.n	801665a <GUI_Text_PPFRGB_Measure+0x46e>
		TFT_FillRectangle(X+98, Y, X+195, Y+20, TFT_Black_Bkgr);
 801663e:	2163      	movs	r1, #99	; 0x63
 8016640:	f104 0314 	add.w	r3, r4, #20
 8016644:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 8016648:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801664c:	9100      	str	r1, [sp, #0]
 801664e:	b29b      	uxth	r3, r3
 8016650:	b292      	uxth	r2, r2
 8016652:	4621      	mov	r1, r4
 8016654:	b280      	uxth	r0, r0
 8016656:	f007 fe60 	bl	801e31a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos2, Y, (uint8_t *)buffer, LEFT_MODE);
 801665a:	f898 0000 	ldrb.w	r0, [r8]
	old_numPPFB = number;
 801665e:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos2, Y, (uint8_t *)buffer, LEFT_MODE);
 8016662:	4428      	add	r0, r5
 8016664:	2303      	movs	r3, #3
 8016666:	aa05      	add	r2, sp, #20
 8016668:	4621      	mov	r1, r4
 801666a:	b280      	uxth	r0, r0
	buffer[8] = 0;
 801666c:	2700      	movs	r7, #0
 801666e:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos2, Y, (uint8_t *)buffer, LEFT_MODE);
 8016672:	f008 f99d 	bl	801e9b0 <TFT_DisplayString>
	ValueR = floor(ValueR*10)/10.0;
 8016676:	ee6b 7a28 	vmul.f32	s15, s22, s17
	delta_pos = 140;
 801667a:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueR = floor(ValueR*10)/10.0;
 801667e:	ee17 0a90 	vmov	r0, s15
 8016682:	f7e9 ff79 	bl	8000578 <__aeabi_f2d>
 8016686:	ec41 0b10 	vmov	d0, r0, r1
 801668a:	f00e fb35 	bl	8024cf8 <floor>
 801668e:	2200      	movs	r2, #0
 8016690:	4b8b      	ldr	r3, [pc, #556]	; (80168c0 <GUI_Text_PPFRGB_Measure+0x6d4>)
 8016692:	ec51 0b10 	vmov	r0, r1, d0
 8016696:	f7ea f8ed 	bl	8000874 <__aeabi_ddiv>
 801669a:	f7ea fab9 	bl	8000c10 <__aeabi_d2f>
	if((ValueG/1000) > 1.0)
 801669e:	eec9 7a8a 	vdiv.f32	s15, s19, s20
	ValueR = floor(ValueR*10)/10.0;
 80166a2:	ee09 0a10 	vmov	s18, r0
		ValueG = ValueG/(1000);
 80166a6:	eef4 7a48 	vcmp.f32	s15, s16
 80166aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ae:	bfc8      	it	gt
 80166b0:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetFont(&Font16EN_arch_big);
 80166b4:	4888      	ldr	r0, [pc, #544]	; (80168d8 <GUI_Text_PPFRGB_Measure+0x6ec>)
 80166b6:	f008 f859 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueG);
 80166ba:	ee19 0a90 	vmov	r0, s19
 80166be:	f7e9 ff5b 	bl	8000578 <__aeabi_f2d>
 80166c2:	4602      	mov	r2, r0
 80166c4:	460b      	mov	r3, r1
 80166c6:	a805      	add	r0, sp, #20
 80166c8:	4984      	ldr	r1, [pc, #528]	; (80168dc <GUI_Text_PPFRGB_Measure+0x6f0>)
 80166ca:	f00b fb69 	bl	8021da0 <sprintf>
	dec = 10;
 80166ce:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueG);
 80166d0:	2304      	movs	r3, #4
			dec *= 10;
 80166d2:	4611      	mov	r1, r2
		if((ValueG/(dec)) >= 1.0)
 80166d4:	ee07 2a90 	vmov	s15, r2
 80166d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80166dc:	eec9 7a87 	vdiv.f32	s15, s19, s14
 80166e0:	eef4 7ac8 	vcmpe.f32	s15, s16
 80166e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166e8:	db06      	blt.n	80166f8 <GUI_Text_PPFRGB_Measure+0x50c>
			delta_pos-=22;
 80166ea:	f1a8 0816 	sub.w	r8, r8, #22
			number++;
 80166ee:	3701      	adds	r7, #1
			dec *= 10;
 80166f0:	434a      	muls	r2, r1
			delta_pos-=22;
 80166f2:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80166f6:	b2ff      	uxtb	r7, r7
 80166f8:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80166fa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80166fe:	d1e9      	bne.n	80166d4 <GUI_Text_PPFRGB_Measure+0x4e8>
		if(number < old_numPPFG )
 8016700:	4b78      	ldr	r3, [pc, #480]	; (80168e4 <GUI_Text_PPFRGB_Measure+0x6f8>)
 8016702:	781a      	ldrb	r2, [r3, #0]
 8016704:	42ba      	cmp	r2, r7
 8016706:	4699      	mov	r9, r3
 8016708:	d911      	bls.n	801672e <GUI_Text_PPFRGB_Measure+0x542>
		TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 801670a:	f104 0329 	add.w	r3, r4, #41	; 0x29
 801670e:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 8016712:	f104 0115 	add.w	r1, r4, #21
 8016716:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801671a:	f04f 0e63 	mov.w	lr, #99	; 0x63
 801671e:	f8cd e000 	str.w	lr, [sp]
 8016722:	b29b      	uxth	r3, r3
 8016724:	b292      	uxth	r2, r2
 8016726:	b289      	uxth	r1, r1
 8016728:	b280      	uxth	r0, r0
 801672a:	f007 fdf6 	bl	801e31a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 801672e:	eb05 0008 	add.w	r0, r5, r8
 8016732:	f104 0116 	add.w	r1, r4, #22
 8016736:	2303      	movs	r3, #3
 8016738:	aa05      	add	r2, sp, #20
	old_numPPFG = number;
 801673a:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 801673e:	b289      	uxth	r1, r1
 8016740:	b280      	uxth	r0, r0
	buffer[8] = 0;
 8016742:	2700      	movs	r7, #0
 8016744:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8016748:	f008 f932 	bl	801e9b0 <TFT_DisplayString>
	ValueR = floor(ValueR*10)/10.0;
 801674c:	ee69 7a28 	vmul.f32	s15, s18, s17
	delta_pos = 140;
 8016750:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueR = floor(ValueR*10)/10.0;
 8016754:	ee17 0a90 	vmov	r0, s15
 8016758:	f7e9 ff0e 	bl	8000578 <__aeabi_f2d>
 801675c:	ec41 0b10 	vmov	d0, r0, r1
 8016760:	f00e faca 	bl	8024cf8 <floor>
 8016764:	2200      	movs	r2, #0
 8016766:	4b56      	ldr	r3, [pc, #344]	; (80168c0 <GUI_Text_PPFRGB_Measure+0x6d4>)
 8016768:	ec51 0b10 	vmov	r0, r1, d0
 801676c:	f7ea f882 	bl	8000874 <__aeabi_ddiv>
 8016770:	f7ea fa4e 	bl	8000c10 <__aeabi_d2f>
 8016774:	ee09 0a10 	vmov	s18, r0
	if((ValueR/1000) > 1.0)
 8016778:	eec9 7a0a 	vdiv.f32	s15, s18, s20
	TFT_SetFont(&Font16EN_arch_big);
 801677c:	4856      	ldr	r0, [pc, #344]	; (80168d8 <GUI_Text_PPFRGB_Measure+0x6ec>)
		ValueR = ValueR/(1000);
 801677e:	eef4 7a48 	vcmp.f32	s15, s16
 8016782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016786:	bfc8      	it	gt
 8016788:	eeb0 9a67 	vmovgt.f32	s18, s15
	TFT_SetFont(&Font16EN_arch_big);
 801678c:	f007 ffee 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueR);
 8016790:	ee19 0a10 	vmov	r0, s18
 8016794:	f7e9 fef0 	bl	8000578 <__aeabi_f2d>
 8016798:	4602      	mov	r2, r0
 801679a:	460b      	mov	r3, r1
 801679c:	a805      	add	r0, sp, #20
 801679e:	494f      	ldr	r1, [pc, #316]	; (80168dc <GUI_Text_PPFRGB_Measure+0x6f0>)
 80167a0:	f00b fafe 	bl	8021da0 <sprintf>
	dec = 10;
 80167a4:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueR);
 80167a6:	2304      	movs	r3, #4
			dec *= 10;
 80167a8:	4611      	mov	r1, r2
		if((ValueR/(dec)) >= 1.0)
 80167aa:	ee07 2a90 	vmov	s15, r2
 80167ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80167b2:	eec9 7a07 	vdiv.f32	s15, s18, s14
 80167b6:	eef4 7ac8 	vcmpe.f32	s15, s16
 80167ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167be:	db06      	blt.n	80167ce <GUI_Text_PPFRGB_Measure+0x5e2>
			delta_pos-=22;
 80167c0:	f1a8 0816 	sub.w	r8, r8, #22
			number++;
 80167c4:	3701      	adds	r7, #1
			dec *= 10;
 80167c6:	434a      	muls	r2, r1
			delta_pos-=22;
 80167c8:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80167cc:	b2ff      	uxtb	r7, r7
 80167ce:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80167d0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80167d4:	d1e9      	bne.n	80167aa <GUI_Text_PPFRGB_Measure+0x5be>
	if(number < old_numPPFR )
 80167d6:	4b44      	ldr	r3, [pc, #272]	; (80168e8 <GUI_Text_PPFRGB_Measure+0x6fc>)
 80167d8:	781a      	ldrb	r2, [r3, #0]
 80167da:	42ba      	cmp	r2, r7
 80167dc:	4699      	mov	r9, r3
 80167de:	d911      	bls.n	8016804 <GUI_Text_PPFRGB_Measure+0x618>
		TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 80167e0:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 80167e4:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 80167e8:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 80167ec:	f105 0062 	add.w	r0, r5, #98	; 0x62
 80167f0:	f04f 0e63 	mov.w	lr, #99	; 0x63
 80167f4:	f8cd e000 	str.w	lr, [sp]
 80167f8:	b29b      	uxth	r3, r3
 80167fa:	b292      	uxth	r2, r2
 80167fc:	b289      	uxth	r1, r1
 80167fe:	b280      	uxth	r0, r0
 8016800:	f007 fd8b 	bl	801e31a <TFT_FillRectangle>
	buffer[8] = 0;
 8016804:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8016806:	eb05 0008 	add.w	r0, r5, r8
 801680a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 801680e:	aa05      	add	r2, sp, #20
	buffer[8] = 0;
 8016810:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8016814:	b289      	uxth	r1, r1
 8016816:	2303      	movs	r3, #3
 8016818:	b280      	uxth	r0, r0
	old_numPPFR = number;
 801681a:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 801681e:	f008 f8c7 	bl	801e9b0 <TFT_DisplayString>
	ValueFR = floor(ValueFR*10)/10.0;
 8016822:	ee6a 7aa8 	vmul.f32	s15, s21, s17
	delta_pos = 140;
 8016826:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueFR = floor(ValueFR*10)/10.0;
 801682a:	ee17 0a90 	vmov	r0, s15
 801682e:	f7e9 fea3 	bl	8000578 <__aeabi_f2d>
 8016832:	ec41 0b10 	vmov	d0, r0, r1
 8016836:	f00e fa5f 	bl	8024cf8 <floor>
 801683a:	2200      	movs	r2, #0
 801683c:	4b20      	ldr	r3, [pc, #128]	; (80168c0 <GUI_Text_PPFRGB_Measure+0x6d4>)
 801683e:	ec51 0b10 	vmov	r0, r1, d0
 8016842:	f7ea f817 	bl	8000874 <__aeabi_ddiv>
 8016846:	f7ea f9e3 	bl	8000c10 <__aeabi_d2f>
 801684a:	ee08 0a90 	vmov	s17, r0
	if((ValueFR/1000) > 1.0)
 801684e:	eec8 7a8a 	vdiv.f32	s15, s17, s20
	TFT_SetFont(&Font16EN_arch_big);
 8016852:	4821      	ldr	r0, [pc, #132]	; (80168d8 <GUI_Text_PPFRGB_Measure+0x6ec>)
	else deg=0;
 8016854:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801685c:	bfc8      	it	gt
 801685e:	eef0 8a67 	vmovgt.f32	s17, s15
 8016862:	bfcc      	ite	gt
 8016864:	2701      	movgt	r7, #1
 8016866:	2700      	movle	r7, #0
	TFT_SetFont(&Font16EN_arch_big);
 8016868:	f007 ff80 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueFR);
 801686c:	ee18 0a90 	vmov	r0, s17
 8016870:	f7e9 fe82 	bl	8000578 <__aeabi_f2d>
 8016874:	4602      	mov	r2, r0
 8016876:	460b      	mov	r3, r1
 8016878:	a805      	add	r0, sp, #20
 801687a:	4918      	ldr	r1, [pc, #96]	; (80168dc <GUI_Text_PPFRGB_Measure+0x6f0>)
 801687c:	f00b fa90 	bl	8021da0 <sprintf>
	dec = 10;
 8016880:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueFR);
 8016882:	2304      	movs	r3, #4
			dec *= 10;
 8016884:	4611      	mov	r1, r2
		if((ValueFR/(dec)) >= 1.0)
 8016886:	ee07 2a90 	vmov	s15, r2
 801688a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801688e:	eec8 7a87 	vdiv.f32	s15, s17, s14
 8016892:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801689a:	db06      	blt.n	80168aa <GUI_Text_PPFRGB_Measure+0x6be>
			delta_pos-=22;
 801689c:	f1a8 0816 	sub.w	r8, r8, #22
			number++;
 80168a0:	3601      	adds	r6, #1
			dec *= 10;
 80168a2:	434a      	muls	r2, r1
			delta_pos-=22;
 80168a4:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80168a8:	b2f6      	uxtb	r6, r6
 80168aa:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80168ac:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80168b0:	d1e9      	bne.n	8016886 <GUI_Text_PPFRGB_Measure+0x69a>
	if(number < old_numPPFFR )
 80168b2:	4b0e      	ldr	r3, [pc, #56]	; (80168ec <GUI_Text_PPFRGB_Measure+0x700>)
 80168b4:	781a      	ldrb	r2, [r3, #0]
 80168b6:	42b2      	cmp	r2, r6
 80168b8:	4699      	mov	r9, r3
 80168ba:	d92b      	bls.n	8016914 <GUI_Text_PPFRGB_Measure+0x728>
 80168bc:	e018      	b.n	80168f0 <GUI_Text_PPFRGB_Measure+0x704>
 80168be:	bf00      	nop
 80168c0:	40240000 	.word	0x40240000
 80168c4:	447a0000 	.word	0x447a0000
 80168c8:	200052ba 	.word	0x200052ba
 80168cc:	42c80000 	.word	0x42c80000
 80168d0:	200052bb 	.word	0x200052bb
 80168d4:	2000022b 	.word	0x2000022b
 80168d8:	200001b0 	.word	0x200001b0
 80168dc:	080337ed 	.word	0x080337ed
 80168e0:	20000235 	.word	0x20000235
 80168e4:	20000237 	.word	0x20000237
 80168e8:	20000238 	.word	0x20000238
 80168ec:	20000236 	.word	0x20000236
		TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 80168f0:	f104 0357 	add.w	r3, r4, #87	; 0x57
 80168f4:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 80168f8:	f104 0141 	add.w	r1, r4, #65	; 0x41
 80168fc:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8016900:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8016904:	f8cd e000 	str.w	lr, [sp]
 8016908:	b29b      	uxth	r3, r3
 801690a:	b292      	uxth	r2, r2
 801690c:	b289      	uxth	r1, r1
 801690e:	b280      	uxth	r0, r0
 8016910:	f007 fd03 	bl	801e31a <TFT_FillRectangle>
	buffer[8] = 0;
 8016914:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8016916:	f104 0142 	add.w	r1, r4, #66	; 0x42
 801691a:	eb05 0008 	add.w	r0, r5, r8
	buffer[8] = 0;
 801691e:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8016922:	aa05      	add	r2, sp, #20
 8016924:	2303      	movs	r3, #3
 8016926:	b289      	uxth	r1, r1
 8016928:	b280      	uxth	r0, r0
	old_numPPFFR = number;
 801692a:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 801692e:	f008 f83f 	bl	801e9b0 <TFT_DisplayString>
 8016932:	e4f0      	b.n	8016316 <GUI_Text_PPFRGB_Measure+0x12a>
	uint8_t	delta_pos = 140, deg = 0, number=0;
 8016934:	461f      	mov	r7, r3
 8016936:	e4ee      	b.n	8016316 <GUI_Text_PPFRGB_Measure+0x12a>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8016938:	4621      	mov	r1, r4
 801693a:	b280      	uxth	r0, r0
 801693c:	f004 fa9c 	bl	801ae78 <GUI_TextRu_umol_sr>
 8016940:	e524      	b.n	801638c <GUI_Text_PPFRGB_Measure+0x1a0>
	else if (Language_status==En)
 8016942:	2b01      	cmp	r3, #1
 8016944:	f47f ad22 	bne.w	801638c <GUI_Text_PPFRGB_Measure+0x1a0>
	{TFT_SetTextColor(TFT_White);
 8016948:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801694c:	f007 ff14 	bl	801e778 <TFT_SetTextColor>
		GUI_TextEn_Blue(X+34, Y);
 8016950:	f105 0022 	add.w	r0, r5, #34	; 0x22
 8016954:	4621      	mov	r1, r4
 8016956:	b280      	uxth	r0, r0
 8016958:	f003 fae0 	bl	8019f1c <GUI_TextEn_Blue>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
 801695c:	4b35      	ldr	r3, [pc, #212]	; (8016a34 <GUI_Text_PPFRGB_Measure+0x848>)
 801695e:	781b      	ldrb	r3, [r3, #0]
 8016960:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8016964:	463a      	mov	r2, r7
 8016966:	4621      	mov	r1, r4
 8016968:	b280      	uxth	r0, r0
 801696a:	b113      	cbz	r3, 8016972 <GUI_Text_PPFRGB_Measure+0x786>
 801696c:	f002 fab6 	bl	8018edc <GUI_TextEn_umol>
 8016970:	e50c      	b.n	801638c <GUI_Text_PPFRGB_Measure+0x1a0>
 8016972:	f002 fb19 	bl	8018fa8 <GUI_TextEn_umol_sr>
 8016976:	e509      	b.n	801638c <GUI_Text_PPFRGB_Measure+0x1a0>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 8016978:	4641      	mov	r1, r8
 801697a:	b280      	uxth	r0, r0
 801697c:	f004 fa7c 	bl	801ae78 <GUI_TextRu_umol_sr>
 8016980:	e53b      	b.n	80163fa <GUI_Text_PPFRGB_Measure+0x20e>
	else if (Language_status==En)
 8016982:	2b01      	cmp	r3, #1
 8016984:	f47f ad39 	bne.w	80163fa <GUI_Text_PPFRGB_Measure+0x20e>
	{	TFT_SetTextColor(TFT_White);
 8016988:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Green(X+17, Y+22);
 801698c:	f104 0816 	add.w	r8, r4, #22
	{	TFT_SetTextColor(TFT_White);
 8016990:	f007 fef2 	bl	801e778 <TFT_SetTextColor>
		GUI_TextEn_Green(X+17, Y+22);
 8016994:	fa1f f888 	uxth.w	r8, r8
 8016998:	f105 0011 	add.w	r0, r5, #17
 801699c:	4641      	mov	r1, r8
 801699e:	b280      	uxth	r0, r0
 80169a0:	f003 fa8a 	bl	8019eb8 <GUI_TextEn_Green>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
 80169a4:	4b23      	ldr	r3, [pc, #140]	; (8016a34 <GUI_Text_PPFRGB_Measure+0x848>)
 80169a6:	781b      	ldrb	r3, [r3, #0]
 80169a8:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 80169ac:	463a      	mov	r2, r7
 80169ae:	4641      	mov	r1, r8
 80169b0:	b280      	uxth	r0, r0
 80169b2:	b113      	cbz	r3, 80169ba <GUI_Text_PPFRGB_Measure+0x7ce>
 80169b4:	f002 fa92 	bl	8018edc <GUI_TextEn_umol>
 80169b8:	e51f      	b.n	80163fa <GUI_Text_PPFRGB_Measure+0x20e>
 80169ba:	f002 faf5 	bl	8018fa8 <GUI_TextEn_umol_sr>
 80169be:	e51c      	b.n	80163fa <GUI_Text_PPFRGB_Measure+0x20e>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 80169c0:	4641      	mov	r1, r8
 80169c2:	b280      	uxth	r0, r0
 80169c4:	f004 fa58 	bl	801ae78 <GUI_TextRu_umol_sr>
 80169c8:	e547      	b.n	801645a <GUI_Text_PPFRGB_Measure+0x26e>
	else if (Language_status==En)
 80169ca:	2b01      	cmp	r3, #1
 80169cc:	f47f ad45 	bne.w	801645a <GUI_Text_PPFRGB_Measure+0x26e>
		GUI_TextEn_Red(X+37, Y+44);
 80169d0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
	{	TFT_SetTextColor(TFT_White);
 80169d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Red(X+37, Y+44);
 80169d8:	fa1f f888 	uxth.w	r8, r8
	{	TFT_SetTextColor(TFT_White);
 80169dc:	f007 fecc 	bl	801e778 <TFT_SetTextColor>
		GUI_TextEn_Red(X+37, Y+44);
 80169e0:	4641      	mov	r1, r8
 80169e2:	fa1f f089 	uxth.w	r0, r9
 80169e6:	f003 fac5 	bl	8019f74 <GUI_TextEn_Red>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
 80169ea:	4b12      	ldr	r3, [pc, #72]	; (8016a34 <GUI_Text_PPFRGB_Measure+0x848>)
 80169ec:	781b      	ldrb	r3, [r3, #0]
 80169ee:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 80169f2:	463a      	mov	r2, r7
 80169f4:	4641      	mov	r1, r8
 80169f6:	b280      	uxth	r0, r0
 80169f8:	b113      	cbz	r3, 8016a00 <GUI_Text_PPFRGB_Measure+0x814>
 80169fa:	f002 fa6f 	bl	8018edc <GUI_TextEn_umol>
 80169fe:	e52c      	b.n	801645a <GUI_Text_PPFRGB_Measure+0x26e>
 8016a00:	f002 fad2 	bl	8018fa8 <GUI_TextEn_umol_sr>
 8016a04:	e529      	b.n	801645a <GUI_Text_PPFRGB_Measure+0x26e>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 8016a06:	4621      	mov	r1, r4
 8016a08:	b280      	uxth	r0, r0
 8016a0a:	f004 fa35 	bl	801ae78 <GUI_TextRu_umol_sr>
 8016a0e:	e54a      	b.n	80164a6 <GUI_Text_PPFRGB_Measure+0x2ba>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
 8016a10:	2b01      	cmp	r3, #1
 8016a12:	f47f ad48 	bne.w	80164a6 <GUI_Text_PPFRGB_Measure+0x2ba>
 8016a16:	4b07      	ldr	r3, [pc, #28]	; (8016a34 <GUI_Text_PPFRGB_Measure+0x848>)
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8016a1e:	463a      	mov	r2, r7
 8016a20:	4621      	mov	r1, r4
 8016a22:	b280      	uxth	r0, r0
 8016a24:	b113      	cbz	r3, 8016a2c <GUI_Text_PPFRGB_Measure+0x840>
 8016a26:	f002 fa59 	bl	8018edc <GUI_TextEn_umol>
 8016a2a:	e53c      	b.n	80164a6 <GUI_Text_PPFRGB_Measure+0x2ba>
 8016a2c:	f002 fabc 	bl	8018fa8 <GUI_TextEn_umol_sr>
}
 8016a30:	e539      	b.n	80164a6 <GUI_Text_PPFRGB_Measure+0x2ba>
 8016a32:	bf00      	nop
 8016a34:	20000a48 	.word	0x20000a48

08016a38 <GUI_Text_XYZ_Measure>:
uint8_t old_numX = 10, old_numY = 10, old_numZ = 10, old_nanXYZ = 0;
void GUI_Text_XYZ_Measure(uint16_t X, uint16_t Y, uint16_t ValueX, uint16_t ValueY, uint16_t ValueZ, uint8_t nope, uint8_t grey)
{
 8016a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a3c:	b087      	sub	sp, #28
 8016a3e:	4605      	mov	r5, r0
 8016a40:	9302      	str	r3, [sp, #8]
 8016a42:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016a46:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
 8016a48:	2300      	movs	r3, #0
{
 8016a4a:	460c      	mov	r4, r1
 8016a4c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
	char buffer[5] = {0};
 8016a50:	9304      	str	r3, [sp, #16]
 8016a52:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 190, number = 0;
	uint32_t dec = 10;
	
	if((ValueX ==0 && ValueY ==100 && ValueZ ==0)||nope)
 8016a56:	4693      	mov	fp, r2
 8016a58:	b922      	cbnz	r2, 8016a64 <GUI_Text_XYZ_Measure+0x2c>
 8016a5a:	9b02      	ldr	r3, [sp, #8]
 8016a5c:	2b64      	cmp	r3, #100	; 0x64
 8016a5e:	d101      	bne.n	8016a64 <GUI_Text_XYZ_Measure+0x2c>
 8016a60:	9b03      	ldr	r3, [sp, #12]
 8016a62:	b10b      	cbz	r3, 8016a68 <GUI_Text_XYZ_Measure+0x30>
 8016a64:	2e00      	cmp	r6, #0
 8016a66:	d07c      	beq.n	8016b62 <GUI_Text_XYZ_Measure+0x12a>
	{
		if(!old_nanXYZ){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 8016a68:	4bb2      	ldr	r3, [pc, #712]	; (8016d34 <GUI_Text_XYZ_Measure+0x2fc>)
 8016a6a:	781a      	ldrb	r2, [r3, #0]
 8016a6c:	469a      	mov	sl, r3
 8016a6e:	b96a      	cbnz	r2, 8016a8c <GUI_Text_XYZ_Measure+0x54>
 8016a70:	2163      	movs	r1, #99	; 0x63
 8016a72:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 8016a76:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8016a7a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016a7e:	9100      	str	r1, [sp, #0]
 8016a80:	b29b      	uxth	r3, r3
 8016a82:	b292      	uxth	r2, r2
 8016a84:	4621      	mov	r1, r4
 8016a86:	b280      	uxth	r0, r0
 8016a88:	f007 fc47 	bl	801e31a <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 8016a8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016a90:	f007 fe72 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016a94:	f105 0987 	add.w	r9, r5, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 8016a98:	2063      	movs	r0, #99	; 0x63
 8016a9a:	f007 fe73 	bl	801e784 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016a9e:	fa1f f989 	uxth.w	r9, r9
 8016aa2:	48a5      	ldr	r0, [pc, #660]	; (8016d38 <GUI_Text_XYZ_Measure+0x300>)
 8016aa4:	f105 08a0 	add.w	r8, r5, #160	; 0xa0
 8016aa8:	f007 fe60 	bl	801e76c <TFT_SetFont>
 8016aac:	fa1f f888 	uxth.w	r8, r8
 8016ab0:	222d      	movs	r2, #45	; 0x2d
 8016ab2:	4621      	mov	r1, r4
 8016ab4:	4648      	mov	r0, r9
 8016ab6:	f105 06b9 	add.w	r6, r5, #185	; 0xb9
 8016aba:	f007 ff21 	bl	801e900 <TFT_DrawChar>
 8016abe:	b2b6      	uxth	r6, r6
 8016ac0:	2220      	movs	r2, #32
 8016ac2:	4621      	mov	r1, r4
 8016ac4:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016ac6:	f104 0723 	add.w	r7, r4, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016aca:	f007 ff19 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016ace:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016ad0:	222d      	movs	r2, #45	; 0x2d
 8016ad2:	4621      	mov	r1, r4
 8016ad4:	4630      	mov	r0, r6
 8016ad6:	f007 ff13 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016ada:	4639      	mov	r1, r7
 8016adc:	222d      	movs	r2, #45	; 0x2d
 8016ade:	4648      	mov	r0, r9
 8016ae0:	f007 ff0e 	bl	801e900 <TFT_DrawChar>
 8016ae4:	4639      	mov	r1, r7
 8016ae6:	2220      	movs	r2, #32
 8016ae8:	4640      	mov	r0, r8
 8016aea:	f007 ff09 	bl	801e900 <TFT_DrawChar>
 8016aee:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8016af0:	f104 0746 	add.w	r7, r4, #70	; 0x46
 8016af4:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016af6:	222d      	movs	r2, #45	; 0x2d
 8016af8:	4630      	mov	r0, r6
 8016afa:	f007 ff01 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8016afe:	222d      	movs	r2, #45	; 0x2d
 8016b00:	4639      	mov	r1, r7
 8016b02:	4648      	mov	r0, r9
 8016b04:	f007 fefc 	bl	801e900 <TFT_DrawChar>
 8016b08:	2220      	movs	r2, #32
 8016b0a:	4639      	mov	r1, r7
 8016b0c:	4640      	mov	r0, r8
 8016b0e:	f007 fef7 	bl	801e900 <TFT_DrawChar>
 8016b12:	222d      	movs	r2, #45	; 0x2d
 8016b14:	4639      	mov	r1, r7
 8016b16:	4630      	mov	r0, r6
 8016b18:	f007 fef2 	bl	801e900 <TFT_DrawChar>
		old_nanXYZ = 1;
 8016b1c:	2301      	movs	r3, #1
 8016b1e:	f88a 3000 	strb.w	r3, [sl]
	old_numZ = number;
	number = 0;
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
	old_nanXYZ = 0;
}
			TFT_SetTextColor(TFT_White);
 8016b22:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016b26:	f007 fe27 	bl	801e778 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8016b2a:	2063      	movs	r0, #99	; 0x63
 8016b2c:	f007 fe2a 	bl	801e784 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_big);
 8016b30:	4881      	ldr	r0, [pc, #516]	; (8016d38 <GUI_Text_XYZ_Measure+0x300>)
 8016b32:	f007 fe1b 	bl	801e76c <TFT_SetFont>
			TFT_DrawChar(X, Y, 'X'-34);
 8016b36:	4621      	mov	r1, r4
 8016b38:	4628      	mov	r0, r5
 8016b3a:	2236      	movs	r2, #54	; 0x36
 8016b3c:	f007 fee0 	bl	801e900 <TFT_DrawChar>
			TFT_DrawChar(X, Y+35, 'Y'-34);
 8016b40:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8016b44:	4628      	mov	r0, r5
 8016b46:	2237      	movs	r2, #55	; 0x37
 8016b48:	b289      	uxth	r1, r1
 8016b4a:	f007 fed9 	bl	801e900 <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'Z'-34);
 8016b4e:	f104 0146 	add.w	r1, r4, #70	; 0x46
 8016b52:	2238      	movs	r2, #56	; 0x38
 8016b54:	b289      	uxth	r1, r1
 8016b56:	4628      	mov	r0, r5
 8016b58:	f007 fed2 	bl	801e900 <TFT_DrawChar>
}	
 8016b5c:	b007      	add	sp, #28
 8016b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016b62:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8016b66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b6a:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8016b6e:	2800      	cmp	r0, #0
 8016b70:	bf14      	ite	ne
 8016b72:	4610      	movne	r0, r2
 8016b74:	4618      	moveq	r0, r3
 8016b76:	f007 fdff 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016b7a:	2063      	movs	r0, #99	; 0x63
 8016b7c:	f007 fe02 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8016b80:	486e      	ldr	r0, [pc, #440]	; (8016d3c <GUI_Text_XYZ_Measure+0x304>)
 8016b82:	f007 fdf3 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%d", ValueX);
 8016b86:	465a      	mov	r2, fp
 8016b88:	496d      	ldr	r1, [pc, #436]	; (8016d40 <GUI_Text_XYZ_Measure+0x308>)
 8016b8a:	a804      	add	r0, sp, #16
 8016b8c:	f00b f908 	bl	8021da0 <sprintf>
	uint8_t	delta_pos = 190, number = 0;
 8016b90:	46b0      	mov	r8, r6
	sprintf (buffer, "%d", ValueX);
 8016b92:	f04f 0904 	mov.w	r9, #4
	uint32_t dec = 10;
 8016b96:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 190, number = 0;
 8016b9a:	27be      	movs	r7, #190	; 0xbe
		if((ValueX/(dec)) >= 1.0)
 8016b9c:	fbbb f0fa 	udiv	r0, fp, sl
 8016ba0:	f7e9 fcc8 	bl	8000534 <__aeabi_ui2d>
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	4b67      	ldr	r3, [pc, #412]	; (8016d44 <GUI_Text_XYZ_Measure+0x30c>)
 8016ba8:	f7e9 ffc0 	bl	8000b2c <__aeabi_dcmpge>
 8016bac:	b140      	cbz	r0, 8016bc0 <GUI_Text_XYZ_Measure+0x188>
			dec *= 10;
 8016bae:	230a      	movs	r3, #10
			delta_pos-=23;
 8016bb0:	3f17      	subs	r7, #23
			number++;
 8016bb2:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8016bb6:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8016bba:	b2ff      	uxtb	r7, r7
			number++;
 8016bbc:	fa5f f888 	uxtb.w	r8, r8
 8016bc0:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8016bc4:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8016bc8:	d1e8      	bne.n	8016b9c <GUI_Text_XYZ_Measure+0x164>
	if(number < old_numX || old_nanXYZ )
 8016bca:	4b5f      	ldr	r3, [pc, #380]	; (8016d48 <GUI_Text_XYZ_Measure+0x310>)
 8016bcc:	781a      	ldrb	r2, [r3, #0]
 8016bce:	4542      	cmp	r2, r8
 8016bd0:	4699      	mov	r9, r3
 8016bd2:	d802      	bhi.n	8016bda <GUI_Text_XYZ_Measure+0x1a2>
 8016bd4:	4b57      	ldr	r3, [pc, #348]	; (8016d34 <GUI_Text_XYZ_Measure+0x2fc>)
 8016bd6:	781b      	ldrb	r3, [r3, #0]
 8016bd8:	b16b      	cbz	r3, 8016bf6 <GUI_Text_XYZ_Measure+0x1be>
		TFT_FillRectangle(X+40, Y, X+197, Y+24, TFT_Black_Bkgr);
 8016bda:	2163      	movs	r1, #99	; 0x63
 8016bdc:	f104 0318 	add.w	r3, r4, #24
 8016be0:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8016be4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016be8:	9100      	str	r1, [sp, #0]
 8016bea:	b29b      	uxth	r3, r3
 8016bec:	b292      	uxth	r2, r2
 8016bee:	4621      	mov	r1, r4
 8016bf0:	b280      	uxth	r0, r0
 8016bf2:	f007 fb92 	bl	801e31a <TFT_FillRectangle>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016bf6:	19e8      	adds	r0, r5, r7
 8016bf8:	2303      	movs	r3, #3
 8016bfa:	aa04      	add	r2, sp, #16
 8016bfc:	4621      	mov	r1, r4
 8016bfe:	b280      	uxth	r0, r0
	old_numX = number;
 8016c00:	f889 8000 	strb.w	r8, [r9]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016c04:	f007 fed4 	bl	801e9b0 <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 8016c08:	484c      	ldr	r0, [pc, #304]	; (8016d3c <GUI_Text_XYZ_Measure+0x304>)
 8016c0a:	f007 fdaf 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%d", ValueY);
 8016c0e:	9a02      	ldr	r2, [sp, #8]
 8016c10:	494b      	ldr	r1, [pc, #300]	; (8016d40 <GUI_Text_XYZ_Measure+0x308>)
 8016c12:	a804      	add	r0, sp, #16
 8016c14:	f00b f8c4 	bl	8021da0 <sprintf>
	dec = 10;
 8016c18:	f04f 0a0a 	mov.w	sl, #10
	number = 0;
 8016c1c:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueY);
 8016c20:	f04f 0904 	mov.w	r9, #4
	delta_pos = 190;
 8016c24:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 8016c26:	46d3      	mov	fp, sl
		if((ValueY/(dec)) >= 1.0)
 8016c28:	9b02      	ldr	r3, [sp, #8]
 8016c2a:	fbb3 f0fa 	udiv	r0, r3, sl
 8016c2e:	f7e9 fc81 	bl	8000534 <__aeabi_ui2d>
 8016c32:	2200      	movs	r2, #0
 8016c34:	4b43      	ldr	r3, [pc, #268]	; (8016d44 <GUI_Text_XYZ_Measure+0x30c>)
 8016c36:	f7e9 ff79 	bl	8000b2c <__aeabi_dcmpge>
 8016c3a:	b138      	cbz	r0, 8016c4c <GUI_Text_XYZ_Measure+0x214>
			delta_pos-=23;
 8016c3c:	3f17      	subs	r7, #23
			number++;
 8016c3e:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8016c42:	fb0b fa0a 	mul.w	sl, fp, sl
			delta_pos-=23;
 8016c46:	b2ff      	uxtb	r7, r7
			number++;
 8016c48:	fa5f f888 	uxtb.w	r8, r8
 8016c4c:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8016c50:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8016c54:	d1e8      	bne.n	8016c28 <GUI_Text_XYZ_Measure+0x1f0>
	if(number < old_numY || old_nanXYZ)
 8016c56:	4b3d      	ldr	r3, [pc, #244]	; (8016d4c <GUI_Text_XYZ_Measure+0x314>)
 8016c58:	781a      	ldrb	r2, [r3, #0]
 8016c5a:	4542      	cmp	r2, r8
 8016c5c:	f104 0923 	add.w	r9, r4, #35	; 0x23
 8016c60:	469a      	mov	sl, r3
 8016c62:	d802      	bhi.n	8016c6a <GUI_Text_XYZ_Measure+0x232>
 8016c64:	4b33      	ldr	r3, [pc, #204]	; (8016d34 <GUI_Text_XYZ_Measure+0x2fc>)
 8016c66:	781b      	ldrb	r3, [r3, #0]
 8016c68:	b173      	cbz	r3, 8016c88 <GUI_Text_XYZ_Measure+0x250>
		TFT_FillRectangle(X+40, Y+35, X+197, Y+59, TFT_Black_Bkgr);
 8016c6a:	2163      	movs	r1, #99	; 0x63
 8016c6c:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8016c70:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8016c74:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016c78:	9100      	str	r1, [sp, #0]
 8016c7a:	b29b      	uxth	r3, r3
 8016c7c:	b292      	uxth	r2, r2
 8016c7e:	fa1f f189 	uxth.w	r1, r9
 8016c82:	b280      	uxth	r0, r0
 8016c84:	f007 fb49 	bl	801e31a <TFT_FillRectangle>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8016c88:	19e8      	adds	r0, r5, r7
 8016c8a:	fa1f f189 	uxth.w	r1, r9
 8016c8e:	2303      	movs	r3, #3
 8016c90:	aa04      	add	r2, sp, #16
 8016c92:	b280      	uxth	r0, r0
	old_numY = number;
 8016c94:	f88a 8000 	strb.w	r8, [sl]
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8016c98:	f007 fe8a 	bl	801e9b0 <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 8016c9c:	4827      	ldr	r0, [pc, #156]	; (8016d3c <GUI_Text_XYZ_Measure+0x304>)
 8016c9e:	f007 fd65 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%d", ValueZ);
 8016ca2:	9a03      	ldr	r2, [sp, #12]
 8016ca4:	4926      	ldr	r1, [pc, #152]	; (8016d40 <GUI_Text_XYZ_Measure+0x308>)
 8016ca6:	a804      	add	r0, sp, #16
 8016ca8:	f00b f87a 	bl	8021da0 <sprintf>
	 dec = 10;
 8016cac:	f04f 090a 	mov.w	r9, #10
	sprintf (buffer, "%d", ValueZ);
 8016cb0:	f04f 0804 	mov.w	r8, #4
		delta_pos = 190;
 8016cb4:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 8016cb6:	46ca      	mov	sl, r9
		if((ValueZ/(dec)) >= 1.0)
 8016cb8:	9b03      	ldr	r3, [sp, #12]
 8016cba:	fbb3 f0f9 	udiv	r0, r3, r9
 8016cbe:	f7e9 fc39 	bl	8000534 <__aeabi_ui2d>
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	4b1f      	ldr	r3, [pc, #124]	; (8016d44 <GUI_Text_XYZ_Measure+0x30c>)
 8016cc6:	f7e9 ff31 	bl	8000b2c <__aeabi_dcmpge>
 8016cca:	b128      	cbz	r0, 8016cd8 <GUI_Text_XYZ_Measure+0x2a0>
			delta_pos-=23;
 8016ccc:	3f17      	subs	r7, #23
			number++;
 8016cce:	3601      	adds	r6, #1
			dec *= 10;
 8016cd0:	fb0a f909 	mul.w	r9, sl, r9
			delta_pos-=23;
 8016cd4:	b2ff      	uxtb	r7, r7
			number++;
 8016cd6:	b2f6      	uxtb	r6, r6
 8016cd8:	f108 38ff 	add.w	r8, r8, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 8016cdc:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8016ce0:	d1ea      	bne.n	8016cb8 <GUI_Text_XYZ_Measure+0x280>
	if(number < old_numZ || old_nanXYZ)
 8016ce2:	4b1b      	ldr	r3, [pc, #108]	; (8016d50 <GUI_Text_XYZ_Measure+0x318>)
 8016ce4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8016d34 <GUI_Text_XYZ_Measure+0x2fc>
 8016ce8:	781a      	ldrb	r2, [r3, #0]
 8016cea:	42b2      	cmp	r2, r6
 8016cec:	f104 0a46 	add.w	sl, r4, #70	; 0x46
 8016cf0:	4698      	mov	r8, r3
 8016cf2:	d802      	bhi.n	8016cfa <GUI_Text_XYZ_Measure+0x2c2>
 8016cf4:	f899 3000 	ldrb.w	r3, [r9]
 8016cf8:	b173      	cbz	r3, 8016d18 <GUI_Text_XYZ_Measure+0x2e0>
		TFT_FillRectangle(X+40, Y+70, X+197, Y+94, TFT_Black_Bkgr);
 8016cfa:	2163      	movs	r1, #99	; 0x63
 8016cfc:	f104 035e 	add.w	r3, r4, #94	; 0x5e
 8016d00:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8016d04:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016d08:	9100      	str	r1, [sp, #0]
 8016d0a:	b29b      	uxth	r3, r3
 8016d0c:	b292      	uxth	r2, r2
 8016d0e:	fa1f f18a 	uxth.w	r1, sl
 8016d12:	b280      	uxth	r0, r0
 8016d14:	f007 fb01 	bl	801e31a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8016d18:	19e8      	adds	r0, r5, r7
 8016d1a:	2303      	movs	r3, #3
 8016d1c:	aa04      	add	r2, sp, #16
 8016d1e:	fa1f f18a 	uxth.w	r1, sl
 8016d22:	b280      	uxth	r0, r0
	old_numZ = number;
 8016d24:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8016d28:	f007 fe42 	bl	801e9b0 <TFT_DisplayString>
	old_nanXYZ = 0;
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	f889 3000 	strb.w	r3, [r9]
 8016d32:	e6f6      	b.n	8016b22 <GUI_Text_XYZ_Measure+0xea>
 8016d34:	200052aa 	.word	0x200052aa
 8016d38:	200001e8 	.word	0x200001e8
 8016d3c:	200001f0 	.word	0x200001f0
 8016d40:	08026a11 	.word	0x08026a11
 8016d44:	3ff00000 	.word	0x3ff00000
 8016d48:	20000239 	.word	0x20000239
 8016d4c:	2000023a 	.word	0x2000023a
 8016d50:	2000023b 	.word	0x2000023b

08016d54 <GUI_Text_xy_Measure>:
uint8_t old_nanxy = 0;
void GUI_Text_xy_Measure(uint16_t X, uint16_t Y, float Valuex, float Valuey, uint8_t nope, uint8_t grey)
{
 8016d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d58:	ed2d 8b02 	vpush	{d8}
 8016d5c:	b085      	sub	sp, #20
 8016d5e:	4604      	mov	r4, r0
 8016d60:	4691      	mov	r9, r2
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 8016d62:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8016d66:	2200      	movs	r2, #0
{
 8016d68:	460d      	mov	r5, r1
 8016d6a:	eef0 8a40 	vmov.f32	s17, s0
 8016d6e:	eeb0 8a60 	vmov.f32	s16, s1
 8016d72:	461e      	mov	r6, r3
	char buffer[5] = {0};
 8016d74:	9202      	str	r2, [sp, #8]
 8016d76:	f88d 200c 	strb.w	r2, [sp, #12]
	TFT_SetTextColor(TFT_White);
 8016d7a:	f007 fcfd 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016d7e:	2063      	movs	r0, #99	; 0x63
 8016d80:	f007 fd00 	bl	801e784 <TFT_SetBackColor>

	if((Valuex == 0 && Valuey ==1) || nope){
 8016d84:	eef5 8a40 	vcmp.f32	s17, #0.0
 8016d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d8c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8016ed4 <GUI_Text_xy_Measure+0x180>
 8016d90:	f105 0723 	add.w	r7, r5, #35	; 0x23
 8016d94:	d106      	bne.n	8016da4 <GUI_Text_xy_Measure+0x50>
 8016d96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016d9a:	eeb4 8a67 	vcmp.f32	s16, s15
 8016d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016da2:	d002      	beq.n	8016daa <GUI_Text_xy_Measure+0x56>
 8016da4:	f1b9 0f00 	cmp.w	r9, #0
 8016da8:	d05a      	beq.n	8016e60 <GUI_Text_xy_Measure+0x10c>
		if(!old_nanxy){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 8016daa:	f898 3000 	ldrb.w	r3, [r8]
 8016dae:	b96b      	cbnz	r3, 8016dcc <GUI_Text_xy_Measure+0x78>
 8016db0:	2163      	movs	r1, #99	; 0x63
 8016db2:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8016db6:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8016dba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016dbe:	9100      	str	r1, [sp, #0]
 8016dc0:	b29b      	uxth	r3, r3
 8016dc2:	b292      	uxth	r2, r2
 8016dc4:	4629      	mov	r1, r5
 8016dc6:	b280      	uxth	r0, r0
 8016dc8:	f007 faa7 	bl	801e31a <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016dcc:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 8016dd0:	483c      	ldr	r0, [pc, #240]	; (8016ec4 <GUI_Text_xy_Measure+0x170>)
 8016dd2:	fa1f fb8b 	uxth.w	fp, fp
 8016dd6:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 8016dda:	f007 fcc7 	bl	801e76c <TFT_SetFont>
 8016dde:	fa1f fa8a 	uxth.w	sl, sl
 8016de2:	222d      	movs	r2, #45	; 0x2d
 8016de4:	4629      	mov	r1, r5
 8016de6:	4658      	mov	r0, fp
 8016de8:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 8016dec:	f007 fd88 	bl	801e900 <TFT_DrawChar>
 8016df0:	fa1f f989 	uxth.w	r9, r9
 8016df4:	2220      	movs	r2, #32
 8016df6:	4629      	mov	r1, r5
 8016df8:	4650      	mov	r0, sl
 8016dfa:	f007 fd81 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016dfe:	b2be      	uxth	r6, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016e00:	222d      	movs	r2, #45	; 0x2d
 8016e02:	4629      	mov	r1, r5
 8016e04:	4648      	mov	r0, r9
 8016e06:	f007 fd7b 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016e0a:	222d      	movs	r2, #45	; 0x2d
 8016e0c:	4631      	mov	r1, r6
 8016e0e:	4658      	mov	r0, fp
 8016e10:	f007 fd76 	bl	801e900 <TFT_DrawChar>
 8016e14:	2220      	movs	r2, #32
 8016e16:	4631      	mov	r1, r6
 8016e18:	4650      	mov	r0, sl
 8016e1a:	f007 fd71 	bl	801e900 <TFT_DrawChar>
 8016e1e:	222d      	movs	r2, #45	; 0x2d
 8016e20:	4631      	mov	r1, r6
 8016e22:	4648      	mov	r0, r9
 8016e24:	f007 fd6c 	bl	801e900 <TFT_DrawChar>
		old_nanxy = 1;
 8016e28:	2301      	movs	r3, #1
 8016e2a:	f888 3000 	strb.w	r3, [r8]
		
		sprintf (buffer, "%.4f", Valuey);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanxy = 0;
	}
	TFT_SetTextColor(TFT_White);
 8016e2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016e32:	f007 fca1 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016e36:	2063      	movs	r0, #99	; 0x63
 8016e38:	f007 fca4 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_small);
 8016e3c:	4822      	ldr	r0, [pc, #136]	; (8016ec8 <GUI_Text_xy_Measure+0x174>)
 8016e3e:	f007 fc95 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'x'-65);
 8016e42:	4629      	mov	r1, r5
 8016e44:	4620      	mov	r0, r4
 8016e46:	2237      	movs	r2, #55	; 0x37
 8016e48:	f007 fd5a 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'y'-65);
 8016e4c:	2238      	movs	r2, #56	; 0x38
 8016e4e:	b2b9      	uxth	r1, r7
 8016e50:	4620      	mov	r0, r4
 8016e52:	f007 fd55 	bl	801e900 <TFT_DrawChar>
	
}	
 8016e56:	b005      	add	sp, #20
 8016e58:	ecbd 8b02 	vpop	{d8}
 8016e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e64:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8016e68:	2e00      	cmp	r6, #0
 8016e6a:	bf08      	it	eq
 8016e6c:	4610      	moveq	r0, r2
 8016e6e:	f007 fc83 	bl	801e778 <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 8016e72:	4816      	ldr	r0, [pc, #88]	; (8016ecc <GUI_Text_xy_Measure+0x178>)
 8016e74:	f007 fc7a 	bl	801e76c <TFT_SetFont>
		sprintf (buffer, "%.4f", Valuex);
 8016e78:	ee18 0a90 	vmov	r0, s17
 8016e7c:	f7e9 fb7c 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016e80:	f104 0646 	add.w	r6, r4, #70	; 0x46
		sprintf (buffer, "%.4f", Valuex);
 8016e84:	4602      	mov	r2, r0
 8016e86:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016e88:	b2b6      	uxth	r6, r6
		sprintf (buffer, "%.4f", Valuex);
 8016e8a:	4911      	ldr	r1, [pc, #68]	; (8016ed0 <GUI_Text_xy_Measure+0x17c>)
 8016e8c:	a802      	add	r0, sp, #8
 8016e8e:	f00a ff87 	bl	8021da0 <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016e92:	2303      	movs	r3, #3
 8016e94:	aa02      	add	r2, sp, #8
 8016e96:	4629      	mov	r1, r5
 8016e98:	4630      	mov	r0, r6
 8016e9a:	f007 fd89 	bl	801e9b0 <TFT_DisplayString>
		sprintf (buffer, "%.4f", Valuey);
 8016e9e:	ee18 0a10 	vmov	r0, s16
 8016ea2:	f7e9 fb69 	bl	8000578 <__aeabi_f2d>
 8016ea6:	4602      	mov	r2, r0
 8016ea8:	460b      	mov	r3, r1
 8016eaa:	a802      	add	r0, sp, #8
 8016eac:	4908      	ldr	r1, [pc, #32]	; (8016ed0 <GUI_Text_xy_Measure+0x17c>)
 8016eae:	f00a ff77 	bl	8021da0 <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8016eb2:	2303      	movs	r3, #3
 8016eb4:	aa02      	add	r2, sp, #8
 8016eb6:	b2b9      	uxth	r1, r7
 8016eb8:	4630      	mov	r0, r6
 8016eba:	f007 fd79 	bl	801e9b0 <TFT_DisplayString>
		old_nanxy = 0;
 8016ebe:	f888 9000 	strb.w	r9, [r8]
 8016ec2:	e7b4      	b.n	8016e2e <GUI_Text_xy_Measure+0xda>
 8016ec4:	200001e8 	.word	0x200001e8
 8016ec8:	200001f8 	.word	0x200001f8
 8016ecc:	200001f0 	.word	0x200001f0
 8016ed0:	080337f7 	.word	0x080337f7
 8016ed4:	200052b8 	.word	0x200052b8

08016ed8 <GUI_Text_uv_Measure>:
uint8_t old_nanuv = 0;
void GUI_Text_uv_Measure(uint16_t X, uint16_t Y, float ValueU, float ValueV, uint8_t nope, uint8_t grey)
{
 8016ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016edc:	ed2d 8b02 	vpush	{d8}
 8016ee0:	b087      	sub	sp, #28
 8016ee2:	4604      	mov	r4, r0
 8016ee4:	469a      	mov	sl, r3
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 8016ee6:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8016eea:	2300      	movs	r3, #0
{
 8016eec:	460d      	mov	r5, r1
 8016eee:	eeb0 8a40 	vmov.f32	s16, s0
 8016ef2:	ee10 9a90 	vmov	r9, s1
 8016ef6:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8016ef8:	9304      	str	r3, [sp, #16]
 8016efa:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8016efe:	f007 fc3b 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016f02:	2063      	movs	r0, #99	; 0x63
 8016f04:	f007 fc3e 	bl	801e784 <TFT_SetBackColor>
	
	if((ValueU == 0 && (ValueV >0.6 && ValueV <0.6001)) || nope){
 8016f08:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f10:	4f5d      	ldr	r7, [pc, #372]	; (8017088 <GUI_Text_uv_Measure+0x1b0>)
 8016f12:	f105 0623 	add.w	r6, r5, #35	; 0x23
 8016f16:	d112      	bne.n	8016f3e <GUI_Text_uv_Measure+0x66>
 8016f18:	4648      	mov	r0, r9
 8016f1a:	f7e9 fb2d 	bl	8000578 <__aeabi_f2d>
 8016f1e:	a356      	add	r3, pc, #344	; (adr r3, 8017078 <GUI_Text_uv_Measure+0x1a0>)
 8016f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f28:	f7e9 fe0a 	bl	8000b40 <__aeabi_dcmpgt>
 8016f2c:	b138      	cbz	r0, 8016f3e <GUI_Text_uv_Measure+0x66>
 8016f2e:	a354      	add	r3, pc, #336	; (adr r3, 8017080 <GUI_Text_uv_Measure+0x1a8>)
 8016f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016f38:	f7e9 fde4 	bl	8000b04 <__aeabi_dcmplt>
 8016f3c:	b910      	cbnz	r0, 8016f44 <GUI_Text_uv_Measure+0x6c>
 8016f3e:	f1b8 0f00 	cmp.w	r8, #0
 8016f42:	d064      	beq.n	801700e <GUI_Text_uv_Measure+0x136>
		if(!old_nanuv){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 8016f44:	783b      	ldrb	r3, [r7, #0]
 8016f46:	b96b      	cbnz	r3, 8016f64 <GUI_Text_uv_Measure+0x8c>
 8016f48:	2163      	movs	r1, #99	; 0x63
 8016f4a:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8016f4e:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8016f52:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016f56:	9100      	str	r1, [sp, #0]
 8016f58:	b29b      	uxth	r3, r3
 8016f5a:	b292      	uxth	r2, r2
 8016f5c:	4629      	mov	r1, r5
 8016f5e:	b280      	uxth	r0, r0
 8016f60:	f007 f9db 	bl	801e31a <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016f64:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 8016f68:	4848      	ldr	r0, [pc, #288]	; (801708c <GUI_Text_uv_Measure+0x1b4>)
 8016f6a:	fa1f fb8b 	uxth.w	fp, fp
 8016f6e:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 8016f72:	f007 fbfb 	bl	801e76c <TFT_SetFont>
 8016f76:	fa1f fa8a 	uxth.w	sl, sl
 8016f7a:	222d      	movs	r2, #45	; 0x2d
 8016f7c:	4629      	mov	r1, r5
 8016f7e:	4658      	mov	r0, fp
 8016f80:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 8016f84:	f007 fcbc 	bl	801e900 <TFT_DrawChar>
 8016f88:	fa1f f989 	uxth.w	r9, r9
 8016f8c:	2220      	movs	r2, #32
 8016f8e:	4629      	mov	r1, r5
 8016f90:	4650      	mov	r0, sl
 8016f92:	f007 fcb5 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016f96:	fa1f f886 	uxth.w	r8, r6
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016f9a:	222d      	movs	r2, #45	; 0x2d
 8016f9c:	4629      	mov	r1, r5
 8016f9e:	4648      	mov	r0, r9
 8016fa0:	f007 fcae 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016fa4:	222d      	movs	r2, #45	; 0x2d
 8016fa6:	4641      	mov	r1, r8
 8016fa8:	4658      	mov	r0, fp
 8016faa:	f007 fca9 	bl	801e900 <TFT_DrawChar>
 8016fae:	2220      	movs	r2, #32
 8016fb0:	4641      	mov	r1, r8
 8016fb2:	4650      	mov	r0, sl
 8016fb4:	f007 fca4 	bl	801e900 <TFT_DrawChar>
 8016fb8:	222d      	movs	r2, #45	; 0x2d
 8016fba:	4641      	mov	r1, r8
 8016fbc:	4648      	mov	r0, r9
 8016fbe:	f007 fc9f 	bl	801e900 <TFT_DrawChar>
		old_nanuv = 1;
 8016fc2:	2301      	movs	r3, #1
 8016fc4:	703b      	strb	r3, [r7, #0]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
		sprintf (buffer, "%.4f", ValueV);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanuv = 0;
	}
	TFT_SetTextColor(TFT_White);
 8016fc6:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font26EN_arch_small);
	TFT_DrawChar(X+15, Y, 'z'-64);
 8016fca:	f104 070f 	add.w	r7, r4, #15
	TFT_SetTextColor(TFT_White);
 8016fce:	f007 fbd3 	bl	801e778 <TFT_SetTextColor>
	TFT_DrawChar(X+15, Y, 'z'-64);
 8016fd2:	b2bf      	uxth	r7, r7
	TFT_SetFont(&Font26EN_arch_small);
 8016fd4:	482e      	ldr	r0, [pc, #184]	; (8017090 <GUI_Text_uv_Measure+0x1b8>)
 8016fd6:	f007 fbc9 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+15, Y, 'z'-64);
 8016fda:	4629      	mov	r1, r5
 8016fdc:	4638      	mov	r0, r7
 8016fde:	223a      	movs	r2, #58	; 0x3a
 8016fe0:	f007 fc8e 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'u'-65);
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 8016fe4:	b2b6      	uxth	r6, r6
	TFT_DrawChar(X, Y, 'u'-65);
 8016fe6:	4629      	mov	r1, r5
 8016fe8:	4620      	mov	r0, r4
 8016fea:	2234      	movs	r2, #52	; 0x34
 8016fec:	f007 fc88 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 8016ff0:	4631      	mov	r1, r6
 8016ff2:	4638      	mov	r0, r7
 8016ff4:	223a      	movs	r2, #58	; 0x3a
 8016ff6:	f007 fc83 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'v'-65);
 8016ffa:	2235      	movs	r2, #53	; 0x35
 8016ffc:	4631      	mov	r1, r6
 8016ffe:	4620      	mov	r0, r4
 8017000:	f007 fc7e 	bl	801e900 <TFT_DrawChar>
}	
 8017004:	b007      	add	sp, #28
 8017006:	ecbd 8b02 	vpop	{d8}
 801700a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801700e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017012:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8017016:	f1ba 0f00 	cmp.w	sl, #0
 801701a:	bf08      	it	eq
 801701c:	4618      	moveq	r0, r3
 801701e:	f007 fbab 	bl	801e778 <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 8017022:	481c      	ldr	r0, [pc, #112]	; (8017094 <GUI_Text_uv_Measure+0x1bc>)
 8017024:	f007 fba2 	bl	801e76c <TFT_SetFont>
		sprintf (buffer, "%.4f", ValueU);
 8017028:	ee18 0a10 	vmov	r0, s16
 801702c:	f7e9 faa4 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017030:	f104 0a46 	add.w	sl, r4, #70	; 0x46
		sprintf (buffer, "%.4f", ValueU);
 8017034:	4602      	mov	r2, r0
 8017036:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017038:	fa1f fa8a 	uxth.w	sl, sl
		sprintf (buffer, "%.4f", ValueU);
 801703c:	4916      	ldr	r1, [pc, #88]	; (8017098 <GUI_Text_uv_Measure+0x1c0>)
 801703e:	a804      	add	r0, sp, #16
 8017040:	f00a feae 	bl	8021da0 <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017044:	2303      	movs	r3, #3
 8017046:	aa04      	add	r2, sp, #16
 8017048:	4629      	mov	r1, r5
 801704a:	4650      	mov	r0, sl
 801704c:	f007 fcb0 	bl	801e9b0 <TFT_DisplayString>
		sprintf (buffer, "%.4f", ValueV);
 8017050:	4648      	mov	r0, r9
 8017052:	f7e9 fa91 	bl	8000578 <__aeabi_f2d>
 8017056:	4602      	mov	r2, r0
 8017058:	460b      	mov	r3, r1
 801705a:	a804      	add	r0, sp, #16
 801705c:	490e      	ldr	r1, [pc, #56]	; (8017098 <GUI_Text_uv_Measure+0x1c0>)
 801705e:	f00a fe9f 	bl	8021da0 <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017062:	2303      	movs	r3, #3
 8017064:	aa04      	add	r2, sp, #16
 8017066:	b2b1      	uxth	r1, r6
 8017068:	4650      	mov	r0, sl
 801706a:	f007 fca1 	bl	801e9b0 <TFT_DisplayString>
		old_nanuv = 0;
 801706e:	f887 8000 	strb.w	r8, [r7]
 8017072:	e7a8      	b.n	8016fc6 <GUI_Text_uv_Measure+0xee>
 8017074:	f3af 8000 	nop.w
 8017078:	33333333 	.word	0x33333333
 801707c:	3fe33333 	.word	0x3fe33333
 8017080:	ea4a8c15 	.word	0xea4a8c15
 8017084:	3fe33404 	.word	0x3fe33404
 8017088:	200052b7 	.word	0x200052b7
 801708c:	200001e8 	.word	0x200001e8
 8017090:	200001f8 	.word	0x200001f8
 8017094:	200001f0 	.word	0x200001f0
 8017098:	080337f7 	.word	0x080337f7

0801709c <GUI_Text_CCT_Measure>:

uint8_t old_numCCT = 10, old_nan_CCT = 0;
void GUI_Text_CCT_Measure(uint16_t X, uint16_t Y, uint16_t Value, uint8_t nope, uint8_t grey)
{	
 801709c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170a0:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80170a2:	4b71      	ldr	r3, [pc, #452]	; (8017268 <GUI_Text_CCT_Measure+0x1cc>)
{	
 80170a4:	4691      	mov	r9, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80170a6:	781a      	ldrb	r2, [r3, #0]
 80170a8:	4b70      	ldr	r3, [pc, #448]	; (801726c <GUI_Text_CCT_Measure+0x1d0>)
 80170aa:	781b      	ldrb	r3, [r3, #0]
 80170ac:	429a      	cmp	r2, r3
{	
 80170ae:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80170b0:	bf1c      	itt	ne
 80170b2:	4b6f      	ldrne	r3, [pc, #444]	; (8017270 <GUI_Text_CCT_Measure+0x1d4>)
 80170b4:	2200      	movne	r2, #0
	char buffer[9] = {0};
 80170b6:	f04f 0600 	mov.w	r6, #0
{	
 80170ba:	4605      	mov	r5, r0
	uint8_t	delta_pos = 160, number = 0;
	uint32_t dec = 10;
	
	
	TFT_SetBackColor(TFT_Black_Bkgr);
 80170bc:	f04f 0063 	mov.w	r0, #99	; 0x63
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80170c0:	bf18      	it	ne
 80170c2:	701a      	strbne	r2, [r3, #0]
{	
 80170c4:	460c      	mov	r4, r1
	char buffer[9] = {0};
 80170c6:	9603      	str	r6, [sp, #12]
 80170c8:	9604      	str	r6, [sp, #16]
 80170ca:	f88d 6014 	strb.w	r6, [sp, #20]
	TFT_SetBackColor(TFT_Black_Bkgr);
 80170ce:	f007 fb59 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80170d2:	4868      	ldr	r0, [pc, #416]	; (8017274 <GUI_Text_CCT_Measure+0x1d8>)
 80170d4:	f007 fb4a 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%d", Value);
 80170d8:	464a      	mov	r2, r9
 80170da:	4967      	ldr	r1, [pc, #412]	; (8017278 <GUI_Text_CCT_Measure+0x1dc>)
 80170dc:	a803      	add	r0, sp, #12
 80170de:	f00a fe5f 	bl	8021da0 <sprintf>
 80170e2:	f04f 0804 	mov.w	r8, #4
	uint32_t dec = 10;
 80170e6:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 160, number = 0;
 80170ea:	27a0      	movs	r7, #160	; 0xa0
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 80170ec:	fbb9 f0fa 	udiv	r0, r9, sl
 80170f0:	f7e9 fa20 	bl	8000534 <__aeabi_ui2d>
 80170f4:	2200      	movs	r2, #0
 80170f6:	4b61      	ldr	r3, [pc, #388]	; (801727c <GUI_Text_CCT_Measure+0x1e0>)
 80170f8:	f7e9 fd18 	bl	8000b2c <__aeabi_dcmpge>
 80170fc:	b130      	cbz	r0, 801710c <GUI_Text_CCT_Measure+0x70>
		{
			dec *= 10;
 80170fe:	230a      	movs	r3, #10
			delta_pos-=23;
 8017100:	3f17      	subs	r7, #23
			number++;
 8017102:	3601      	adds	r6, #1
			dec *= 10;
 8017104:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8017108:	b2ff      	uxtb	r7, r7
			number++;
 801710a:	b2f6      	uxtb	r6, r6
 801710c:	f108 38ff 	add.w	r8, r8, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8017110:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8017114:	d1ea      	bne.n	80170ec <GUI_Text_CCT_Measure+0x50>
		}
	}
	
	if((Value == 0 || nope) & !old_nan_CCT){old_nan_CCT = 1; TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);TFT_SetTextColor(TFT_White); TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+100, Y+4, 'N'-33);TFT_DrawChar(X+125, Y+4, 'A'-33);TFT_DrawChar(X+150, Y+4, 'N'-33);}
 8017116:	f1b9 0f00 	cmp.w	r9, #0
 801711a:	d063      	beq.n	80171e4 <GUI_Text_CCT_Measure+0x148>
 801711c:	f11b 0200 	adds.w	r2, fp, #0
 8017120:	bf18      	it	ne
 8017122:	2201      	movne	r2, #1
 8017124:	4b52      	ldr	r3, [pc, #328]	; (8017270 <GUI_Text_CCT_Measure+0x1d4>)
 8017126:	7819      	ldrb	r1, [r3, #0]
 8017128:	4698      	mov	r8, r3
 801712a:	2900      	cmp	r1, #0
 801712c:	d15c      	bne.n	80171e8 <GUI_Text_CCT_Measure+0x14c>
 801712e:	2a00      	cmp	r2, #0
 8017130:	d05a      	beq.n	80171e8 <GUI_Text_CCT_Measure+0x14c>
 8017132:	2201      	movs	r2, #1
 8017134:	701a      	strb	r2, [r3, #0]
 8017136:	2163      	movs	r1, #99	; 0x63
 8017138:	f104 0319 	add.w	r3, r4, #25
 801713c:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017140:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017144:	b29b      	uxth	r3, r3
 8017146:	b292      	uxth	r2, r2
 8017148:	9100      	str	r1, [sp, #0]
 801714a:	b280      	uxth	r0, r0
 801714c:	4621      	mov	r1, r4
 801714e:	f007 f8e4 	bl	801e31a <TFT_FillRectangle>
 8017152:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017156:	f007 fb0f 	bl	801e778 <TFT_SetTextColor>
 801715a:	1d26      	adds	r6, r4, #4
 801715c:	4848      	ldr	r0, [pc, #288]	; (8017280 <GUI_Text_CCT_Measure+0x1e4>)
 801715e:	f007 fb05 	bl	801e76c <TFT_SetFont>
 8017162:	b2b6      	uxth	r6, r6
 8017164:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8017168:	222d      	movs	r2, #45	; 0x2d
 801716a:	4631      	mov	r1, r6
 801716c:	b280      	uxth	r0, r0
 801716e:	f007 fbc7 	bl	801e900 <TFT_DrawChar>
 8017172:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 8017176:	2220      	movs	r2, #32
 8017178:	4631      	mov	r1, r6
 801717a:	b280      	uxth	r0, r0
 801717c:	f007 fbc0 	bl	801e900 <TFT_DrawChar>
 8017180:	f105 0096 	add.w	r0, r5, #150	; 0x96
 8017184:	222d      	movs	r2, #45	; 0x2d
 8017186:	4631      	mov	r1, r6
 8017188:	b280      	uxth	r0, r0
 801718a:	f007 fbb9 	bl	801e900 <TFT_DrawChar>
	old_numCCT = number;
		
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
	}
	
	TFT_SetTextColor(TFT_White);
 801718e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017192:	f007 faf1 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017196:	2063      	movs	r0, #99	; 0x63
 8017198:	f007 faf4 	bl	801e784 <TFT_SetBackColor>
	if(Language_status == Ru ){
 801719c:	4b39      	ldr	r3, [pc, #228]	; (8017284 <GUI_Text_CCT_Measure+0x1e8>)
 801719e:	781b      	ldrb	r3, [r3, #0]
 80171a0:	f105 06c8 	add.w	r6, r5, #200	; 0xc8
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d152      	bne.n	801724e <GUI_Text_CCT_Measure+0x1b2>
			TFT_SetFont(&Font26RU_arch_big);
 80171a8:	4837      	ldr	r0, [pc, #220]	; (8017288 <GUI_Text_CCT_Measure+0x1ec>)
 80171aa:	f007 fadf 	bl	801e76c <TFT_SetFont>
			TFT_DrawCharRus(X, Y, 'К'-17);
 80171ae:	2289      	movs	r2, #137	; 0x89
 80171b0:	4621      	mov	r1, r4
 80171b2:	4628      	mov	r0, r5
 80171b4:	f007 faec 	bl	801e790 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+24, Y, 'Ц'-17);
 80171b8:	f105 0018 	add.w	r0, r5, #24
 80171bc:	2295      	movs	r2, #149	; 0x95
 80171be:	4621      	mov	r1, r4
 80171c0:	b280      	uxth	r0, r0
 80171c2:	f007 fae5 	bl	801e790 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+45, Y, 'Т'-17);
 80171c6:	f105 002d 	add.w	r0, r5, #45	; 0x2d
 80171ca:	2291      	movs	r2, #145	; 0x91
 80171cc:	4621      	mov	r1, r4
 80171ce:	b280      	uxth	r0, r0
 80171d0:	f007 fade 	bl	801e790 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+200, Y, 'К'-17);
 80171d4:	2289      	movs	r2, #137	; 0x89
 80171d6:	4621      	mov	r1, r4
 80171d8:	b2b0      	uxth	r0, r6
 80171da:	f007 fad9 	bl	801e790 <TFT_DrawCharRus>
		{
			GUI_TextEn_CCT(X, Y+4);

			TFT_DrawChar(X+200, Y+4, 'K'-33);
		}	
}
 80171de:	b007      	add	sp, #28
 80171e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171e4:	2201      	movs	r2, #1
 80171e6:	e79d      	b.n	8017124 <GUI_Text_CCT_Measure+0x88>
	else if(!nope & Value != 0){
 80171e8:	f1bb 0f00 	cmp.w	fp, #0
 80171ec:	d1cf      	bne.n	801718e <GUI_Text_CCT_Measure+0xf2>
 80171ee:	f1b9 0f00 	cmp.w	r9, #0
 80171f2:	d0cc      	beq.n	801718e <GUI_Text_CCT_Measure+0xf2>
	if(number < old_numCCT )
 80171f4:	4b25      	ldr	r3, [pc, #148]	; (801728c <GUI_Text_CCT_Measure+0x1f0>)
 80171f6:	781a      	ldrb	r2, [r3, #0]
 80171f8:	42b2      	cmp	r2, r6
 80171fa:	4699      	mov	r9, r3
 80171fc:	d90d      	bls.n	801721a <GUI_Text_CCT_Measure+0x17e>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80171fe:	2163      	movs	r1, #99	; 0x63
 8017200:	f104 0319 	add.w	r3, r4, #25
 8017204:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017208:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801720c:	9100      	str	r1, [sp, #0]
 801720e:	b29b      	uxth	r3, r3
 8017210:	b292      	uxth	r2, r2
 8017212:	4621      	mov	r1, r4
 8017214:	b280      	uxth	r0, r0
 8017216:	f007 f880 	bl	801e31a <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801721a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801721e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017222:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8017226:	2800      	cmp	r0, #0
 8017228:	bf14      	ite	ne
 801722a:	4610      	movne	r0, r2
 801722c:	4618      	moveq	r0, r3
 801722e:	f007 faa3 	bl	801e778 <TFT_SetTextColor>
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 8017232:	1ca1      	adds	r1, r4, #2
 8017234:	19e8      	adds	r0, r5, r7
 8017236:	2303      	movs	r3, #3
 8017238:	aa03      	add	r2, sp, #12
 801723a:	b289      	uxth	r1, r1
 801723c:	b280      	uxth	r0, r0
	old_numCCT = number;
 801723e:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 8017242:	f007 fbb5 	bl	801e9b0 <TFT_DisplayString>
 8017246:	2300      	movs	r3, #0
 8017248:	f888 3000 	strb.w	r3, [r8]
 801724c:	e79f      	b.n	801718e <GUI_Text_CCT_Measure+0xf2>
			GUI_TextEn_CCT(X, Y+4);
 801724e:	3404      	adds	r4, #4
 8017250:	b2a4      	uxth	r4, r4
 8017252:	4621      	mov	r1, r4
 8017254:	4628      	mov	r0, r5
 8017256:	f002 fd09 	bl	8019c6c <GUI_TextEn_CCT>
			TFT_DrawChar(X+200, Y+4, 'K'-33);
 801725a:	222a      	movs	r2, #42	; 0x2a
 801725c:	4621      	mov	r1, r4
 801725e:	b2b0      	uxth	r0, r6
 8017260:	f007 fb4e 	bl	801e900 <TFT_DrawChar>
}
 8017264:	e7bb      	b.n	80171de <GUI_Text_CCT_Measure+0x142>
 8017266:	bf00      	nop
 8017268:	2000022a 	.word	0x2000022a
 801726c:	20005279 	.word	0x20005279
 8017270:	200052ab 	.word	0x200052ab
 8017274:	200001f0 	.word	0x200001f0
 8017278:	08026a11 	.word	0x08026a11
 801727c:	3ff00000 	.word	0x3ff00000
 8017280:	200001e8 	.word	0x200001e8
 8017284:	2000527b 	.word	0x2000527b
 8017288:	20000200 	.word	0x20000200
 801728c:	20000231 	.word	0x20000231

08017290 <GUI_Text_lambdaD_Measure>:
uint8_t old_lambdaD = 10, old_nan_lambdaD = 0;
void GUI_Text_lambdaD_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8017290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017294:	ed2d 8b02 	vpush	{d8}
 8017298:	4616      	mov	r6, r2
 801729a:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 801729c:	4a71      	ldr	r2, [pc, #452]	; (8017464 <GUI_Text_lambdaD_Measure+0x1d4>)
 801729e:	4b72      	ldr	r3, [pc, #456]	; (8017468 <GUI_Text_lambdaD_Measure+0x1d8>)
 80172a0:	4f72      	ldr	r7, [pc, #456]	; (801746c <GUI_Text_lambdaD_Measure+0x1dc>)
{	
 80172a2:	4605      	mov	r5, r0
 80172a4:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 80172a6:	7818      	ldrb	r0, [r3, #0]
 80172a8:	7811      	ldrb	r1, [r2, #0]
	Value = floor(Value*10)/10.0;
 80172aa:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 80172ae:	4288      	cmp	r0, r1
	Value = floor(Value*10)/10.0;
 80172b0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80172b4:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 80172b6:	bf18      	it	ne
 80172b8:	2300      	movne	r3, #0
{	
 80172ba:	b086      	sub	sp, #24
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 80172bc:	bf18      	it	ne
 80172be:	703b      	strbne	r3, [r7, #0]
	Value = floor(Value*10)/10.0;
 80172c0:	ee17 0a90 	vmov	r0, s15
 80172c4:	4690      	mov	r8, r2
 80172c6:	f7e9 f957 	bl	8000578 <__aeabi_f2d>
 80172ca:	ec41 0b10 	vmov	d0, r0, r1
 80172ce:	f00d fd13 	bl	8024cf8 <floor>
	char buffer[9] = {0};
 80172d2:	2200      	movs	r2, #0
	Value = floor(Value*10)/10.0;
 80172d4:	ec51 0b10 	vmov	r0, r1, d0
	char buffer[9] = {0};
 80172d8:	9203      	str	r2, [sp, #12]
 80172da:	9204      	str	r2, [sp, #16]
 80172dc:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 122, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
 80172e0:	2e00      	cmp	r6, #0
 80172e2:	d054      	beq.n	801738e <GUI_Text_lambdaD_Measure+0xfe>
		{	
			if(!old_nan_lambdaD){
 80172e4:	783b      	ldrb	r3, [r7, #0]
 80172e6:	bb33      	cbnz	r3, 8017336 <GUI_Text_lambdaD_Measure+0xa6>
				TFT_SetTextColor(TFT_White);
 80172e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80172ec:	f007 fa44 	bl	801e778 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80172f0:	2063      	movs	r0, #99	; 0x63
 80172f2:	f007 fa47 	bl	801e784 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 80172f6:	485e      	ldr	r0, [pc, #376]	; (8017470 <GUI_Text_lambdaD_Measure+0x1e0>)
 80172f8:	f007 fa38 	bl	801e76c <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 80172fc:	2163      	movs	r1, #99	; 0x63
 80172fe:	f104 031a 	add.w	r3, r4, #26
 8017302:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017306:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801730a:	9100      	str	r1, [sp, #0]
 801730c:	b29b      	uxth	r3, r3
 801730e:	b292      	uxth	r2, r2
 8017310:	4621      	mov	r1, r4
 8017312:	b280      	uxth	r0, r0
 8017314:	f007 f801 	bl	801e31a <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8017318:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801731a:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 801731e:	f88d 300c 	strb.w	r3, [sp, #12]
 8017322:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017326:	aa03      	add	r2, sp, #12
 8017328:	2303      	movs	r3, #3
 801732a:	4621      	mov	r1, r4
 801732c:	b280      	uxth	r0, r0
 801732e:	f007 fb3f 	bl	801e9b0 <TFT_DisplayString>
				old_nan_lambdaD = 1;
 8017332:	2301      	movs	r3, #1
 8017334:	703b      	strb	r3, [r7, #0]
	} 
	old_lambdaD = number;
	
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 8017336:	f899 2000 	ldrb.w	r2, [r9]
 801733a:	f898 3000 	ldrb.w	r3, [r8]
 801733e:	429a      	cmp	r2, r3
 8017340:	d020      	beq.n	8017384 <GUI_Text_lambdaD_Measure+0xf4>
	TFT_SetTextColor(TFT_White);
 8017342:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetBackColor(TFT_Black_Bkgr);
	GUI_Text_lambda_d(X, Y+5);
 8017346:	1d66      	adds	r6, r4, #5
	TFT_SetTextColor(TFT_White);
 8017348:	f007 fa16 	bl	801e778 <TFT_SetTextColor>
	GUI_Text_lambda_d(X, Y+5);
 801734c:	b2b6      	uxth	r6, r6
	TFT_SetBackColor(TFT_Black_Bkgr);
 801734e:	2063      	movs	r0, #99	; 0x63
 8017350:	f007 fa18 	bl	801e784 <TFT_SetBackColor>
	GUI_Text_lambda_d(X, Y+5);
 8017354:	4628      	mov	r0, r5
 8017356:	4631      	mov	r1, r6
 8017358:	f001 fd28 	bl	8018dac <GUI_Text_lambda_d>
	if(Language_status == Ru ){
 801735c:	4b45      	ldr	r3, [pc, #276]	; (8017474 <GUI_Text_lambdaD_Measure+0x1e4>)
 801735e:	781b      	ldrb	r3, [r3, #0]
 8017360:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
 8017364:	35d8      	adds	r5, #216	; 0xd8
 8017366:	2b00      	cmp	r3, #0
 8017368:	d16c      	bne.n	8017444 <GUI_Text_lambdaD_Measure+0x1b4>
			TFT_SetFont(&Font26RU_arch_small);
 801736a:	4843      	ldr	r0, [pc, #268]	; (8017478 <GUI_Text_lambdaD_Measure+0x1e8>)
 801736c:	f007 f9fe 	bl	801e76c <TFT_SetFont>
			TFT_DrawCharRus(X+200, Y+5, 'н');
 8017370:	22bd      	movs	r2, #189	; 0xbd
 8017372:	4631      	mov	r1, r6
 8017374:	b2b8      	uxth	r0, r7
 8017376:	f007 fa0b 	bl	801e790 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+216, Y+5, 'м');
 801737a:	22bc      	movs	r2, #188	; 0xbc
 801737c:	4631      	mov	r1, r6
 801737e:	b2a8      	uxth	r0, r5
 8017380:	f007 fa06 	bl	801e790 <TFT_DrawCharRus>
			TFT_SetFont(&Font16EN_arch_small);
			TFT_DrawChar(X+200, Y+10, 'n');
			TFT_DrawChar(X+216, Y+10, 'm');
		}	
	}
}
 8017384:	b006      	add	sp, #24
 8017386:	ecbd 8b02 	vpop	{d8}
 801738a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	old_nan_lambdaD = 0;
 801738e:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017394:	f249 47d2 	movw	r7, #38098	; 0x94d2
	Value = floor(Value*10)/10.0;
 8017398:	2200      	movs	r2, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801739a:	f1ba 0f00 	cmp.w	sl, #0
 801739e:	bf08      	it	eq
 80173a0:	461f      	moveq	r7, r3
	Value = floor(Value*10)/10.0;
 80173a2:	4b36      	ldr	r3, [pc, #216]	; (801747c <GUI_Text_lambdaD_Measure+0x1ec>)
 80173a4:	f7e9 fa66 	bl	8000874 <__aeabi_ddiv>
 80173a8:	f7e9 fc32 	bl	8000c10 <__aeabi_d2f>
 80173ac:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80173b0:	4638      	mov	r0, r7
 80173b2:	f007 f9e1 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80173b6:	2063      	movs	r0, #99	; 0x63
 80173b8:	f007 f9e4 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80173bc:	482c      	ldr	r0, [pc, #176]	; (8017470 <GUI_Text_lambdaD_Measure+0x1e0>)
 80173be:	f007 f9d5 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 80173c2:	ee18 0a10 	vmov	r0, s16
 80173c6:	f7e9 f8d7 	bl	8000578 <__aeabi_f2d>
 80173ca:	4602      	mov	r2, r0
 80173cc:	460b      	mov	r3, r1
 80173ce:	a803      	add	r0, sp, #12
 80173d0:	492b      	ldr	r1, [pc, #172]	; (8017480 <GUI_Text_lambdaD_Measure+0x1f0>)
 80173d2:	f00a fce5 	bl	8021da0 <sprintf>
	uint32_t dec = 10;
 80173d6:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 80173d8:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0;
 80173da:	277a      	movs	r7, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 80173dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 80173e0:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80173e2:	ee07 2a10 	vmov	s14, r2
 80173e6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80173ea:	ee88 7a26 	vdiv.f32	s14, s16, s13
 80173ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80173f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173f6:	db04      	blt.n	8017402 <GUI_Text_lambdaD_Measure+0x172>
			delta_pos-=23;
 80173f8:	3f17      	subs	r7, #23
			number++;
 80173fa:	3601      	adds	r6, #1
			dec *= 10;
 80173fc:	434a      	muls	r2, r1
			delta_pos-=23;
 80173fe:	b2ff      	uxtb	r7, r7
			number++;
 8017400:	b2f6      	uxtb	r6, r6
 8017402:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 8017404:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8017408:	d1eb      	bne.n	80173e2 <GUI_Text_lambdaD_Measure+0x152>
	if(number < old_lambdaD )
 801740a:	4b1e      	ldr	r3, [pc, #120]	; (8017484 <GUI_Text_lambdaD_Measure+0x1f4>)
 801740c:	781a      	ldrb	r2, [r3, #0]
 801740e:	42b2      	cmp	r2, r6
 8017410:	469a      	mov	sl, r3
 8017412:	d90d      	bls.n	8017430 <GUI_Text_lambdaD_Measure+0x1a0>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8017414:	2163      	movs	r1, #99	; 0x63
 8017416:	f104 0319 	add.w	r3, r4, #25
 801741a:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801741e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017422:	9100      	str	r1, [sp, #0]
 8017424:	b29b      	uxth	r3, r3
 8017426:	b292      	uxth	r2, r2
 8017428:	4621      	mov	r1, r4
 801742a:	b280      	uxth	r0, r0
 801742c:	f006 ff75 	bl	801e31a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017430:	19e8      	adds	r0, r5, r7
 8017432:	2303      	movs	r3, #3
 8017434:	aa03      	add	r2, sp, #12
 8017436:	4621      	mov	r1, r4
 8017438:	b280      	uxth	r0, r0
	old_lambdaD = number;
 801743a:	f88a 6000 	strb.w	r6, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801743e:	f007 fab7 	bl	801e9b0 <TFT_DisplayString>
 8017442:	e778      	b.n	8017336 <GUI_Text_lambdaD_Measure+0xa6>
			TFT_DrawChar(X+200, Y+10, 'n');
 8017444:	340a      	adds	r4, #10
 8017446:	b2a4      	uxth	r4, r4
			TFT_SetFont(&Font16EN_arch_small);
 8017448:	480f      	ldr	r0, [pc, #60]	; (8017488 <GUI_Text_lambdaD_Measure+0x1f8>)
 801744a:	f007 f98f 	bl	801e76c <TFT_SetFont>
			TFT_DrawChar(X+200, Y+10, 'n');
 801744e:	4621      	mov	r1, r4
 8017450:	b2b8      	uxth	r0, r7
 8017452:	226e      	movs	r2, #110	; 0x6e
 8017454:	f007 fa54 	bl	801e900 <TFT_DrawChar>
			TFT_DrawChar(X+216, Y+10, 'm');
 8017458:	226d      	movs	r2, #109	; 0x6d
 801745a:	4621      	mov	r1, r4
 801745c:	b2a8      	uxth	r0, r5
 801745e:	f007 fa4f 	bl	801e900 <TFT_DrawChar>
}
 8017462:	e78f      	b.n	8017384 <GUI_Text_lambdaD_Measure+0xf4>
 8017464:	20005279 	.word	0x20005279
 8017468:	2000022a 	.word	0x2000022a
 801746c:	200052b6 	.word	0x200052b6
 8017470:	200001f0 	.word	0x200001f0
 8017474:	2000527b 	.word	0x2000527b
 8017478:	20000208 	.word	0x20000208
 801747c:	40240000 	.word	0x40240000
 8017480:	080337ed 	.word	0x080337ed
 8017484:	2000022f 	.word	0x2000022f
 8017488:	200001c0 	.word	0x200001c0

0801748c <GUI_Text_deltaE_Measure>:
}


uint8_t old_deltaE = 10, old_nan_deltaE = 0;
void GUI_Text_deltaE_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 801748c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017490:	ed2d 8b02 	vpush	{d8}
 8017494:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8017496:	4b76      	ldr	r3, [pc, #472]	; (8017670 <GUI_Text_deltaE_Measure+0x1e4>)
 8017498:	4e76      	ldr	r6, [pc, #472]	; (8017674 <GUI_Text_deltaE_Measure+0x1e8>)
{	
 801749a:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 801749c:	781a      	ldrb	r2, [r3, #0]
 801749e:	4b76      	ldr	r3, [pc, #472]	; (8017678 <GUI_Text_deltaE_Measure+0x1ec>)
 80174a0:	781b      	ldrb	r3, [r3, #0]
 80174a2:	429a      	cmp	r2, r3
{	
 80174a4:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 80174a6:	bf1c      	itt	ne
 80174a8:	2300      	movne	r3, #0
 80174aa:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 80174ac:	2300      	movs	r3, #0
 80174ae:	9303      	str	r3, [sp, #12]
 80174b0:	9304      	str	r3, [sp, #16]
 80174b2:	f88d 3014 	strb.w	r3, [sp, #20]
{	
 80174b6:	4604      	mov	r4, r0
 80174b8:	460d      	mov	r5, r1
 80174ba:	eeb0 8a40 	vmov.f32	s16, s0
	uint8_t	delta_pos = 140, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_deltaE){
 80174be:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 80174c0:	2f00      	cmp	r7, #0
 80174c2:	d047      	beq.n	8017554 <GUI_Text_deltaE_Measure+0xc8>
			if(!old_nan_deltaE){
 80174c4:	bb33      	cbnz	r3, 8017514 <GUI_Text_deltaE_Measure+0x88>
				TFT_SetTextColor(TFT_White);
 80174c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80174ca:	f007 f955 	bl	801e778 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80174ce:	2063      	movs	r0, #99	; 0x63
 80174d0:	f007 f958 	bl	801e784 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 80174d4:	4869      	ldr	r0, [pc, #420]	; (801767c <GUI_Text_deltaE_Measure+0x1f0>)
 80174d6:	f007 f949 	bl	801e76c <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80174da:	2163      	movs	r1, #99	; 0x63
 80174dc:	f105 031a 	add.w	r3, r5, #26
 80174e0:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80174e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80174e8:	9100      	str	r1, [sp, #0]
 80174ea:	b29b      	uxth	r3, r3
 80174ec:	b292      	uxth	r2, r2
 80174ee:	4629      	mov	r1, r5
 80174f0:	b280      	uxth	r0, r0
 80174f2:	f006 ff12 	bl	801e31a <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 80174f6:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80174f8:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 80174fc:	f88d 300c 	strb.w	r3, [sp, #12]
 8017500:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017504:	aa03      	add	r2, sp, #12
 8017506:	2303      	movs	r3, #3
 8017508:	4629      	mov	r1, r5
 801750a:	b280      	uxth	r0, r0
 801750c:	f007 fa50 	bl	801e9b0 <TFT_DisplayString>
				old_nan_deltaE = 1;
 8017510:	2301      	movs	r3, #1
 8017512:	7033      	strb	r3, [r6, #0]
	
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8017514:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017518:	f007 f92e 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801751c:	2063      	movs	r0, #99	; 0x63
 801751e:	f007 f931 	bl	801e784 <TFT_SetBackColor>

	TFT_SetFont(&Font16EN_arch_big);
 8017522:	4857      	ldr	r0, [pc, #348]	; (8017680 <GUI_Text_deltaE_Measure+0x1f4>)
 8017524:	f007 f922 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y+6, '~'+2);
 8017528:	1da9      	adds	r1, r5, #6
 801752a:	2280      	movs	r2, #128	; 0x80
 801752c:	b289      	uxth	r1, r1
 801752e:	4620      	mov	r0, r4
 8017530:	f007 f9e6 	bl	801e900 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8017534:	4853      	ldr	r0, [pc, #332]	; (8017684 <GUI_Text_deltaE_Measure+0x1f8>)
 8017536:	f007 f919 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'E'-33);
 801753a:	1ca9      	adds	r1, r5, #2
 801753c:	f104 0012 	add.w	r0, r4, #18
 8017540:	2224      	movs	r2, #36	; 0x24
 8017542:	b289      	uxth	r1, r1
 8017544:	b280      	uxth	r0, r0
 8017546:	f007 f9db 	bl	801e900 <TFT_DrawChar>

}
 801754a:	b007      	add	sp, #28
 801754c:	ecbd 8b02 	vpop	{d8}
 8017550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(old_nan_deltaE){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);}
 8017554:	b163      	cbz	r3, 8017570 <GUI_Text_deltaE_Measure+0xe4>
 8017556:	f101 031a 	add.w	r3, r1, #26
 801755a:	f100 02fa 	add.w	r2, r0, #250	; 0xfa
 801755e:	2163      	movs	r1, #99	; 0x63
 8017560:	3028      	adds	r0, #40	; 0x28
 8017562:	9100      	str	r1, [sp, #0]
 8017564:	b29b      	uxth	r3, r3
 8017566:	b292      	uxth	r2, r2
 8017568:	4629      	mov	r1, r5
 801756a:	b280      	uxth	r0, r0
 801756c:	f006 fed5 	bl	801e31a <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017570:	f64f 73ff 	movw	r3, #65535	; 0xffff
	old_nan_deltaE = 0;
 8017574:	f04f 0800 	mov.w	r8, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017578:	f249 40d2 	movw	r0, #38098	; 0x94d2
 801757c:	45c1      	cmp	r9, r8
 801757e:	bf08      	it	eq
 8017580:	4618      	moveq	r0, r3
	old_nan_deltaE = 0;
 8017582:	f886 8000 	strb.w	r8, [r6]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017586:	f007 f8f7 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801758a:	2063      	movs	r0, #99	; 0x63
 801758c:	f007 f8fa 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017590:	483a      	ldr	r0, [pc, #232]	; (801767c <GUI_Text_deltaE_Measure+0x1f0>)
 8017592:	f007 f8eb 	bl	801e76c <TFT_SetFont>
	Value = floor(Value*10)/10.0;
 8017596:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801759a:	ee68 7a27 	vmul.f32	s15, s16, s15
	uint8_t	delta_pos = 140, sign = 0, number = 0;
 801759e:	268c      	movs	r6, #140	; 0x8c
	Value = floor(Value*10)/10.0;
 80175a0:	ee17 0a90 	vmov	r0, s15
 80175a4:	f7e8 ffe8 	bl	8000578 <__aeabi_f2d>
 80175a8:	ec41 0b10 	vmov	d0, r0, r1
 80175ac:	f00d fba4 	bl	8024cf8 <floor>
 80175b0:	2200      	movs	r2, #0
 80175b2:	4b35      	ldr	r3, [pc, #212]	; (8017688 <GUI_Text_deltaE_Measure+0x1fc>)
 80175b4:	ec51 0b10 	vmov	r0, r1, d0
 80175b8:	f7e9 f95c 	bl	8000874 <__aeabi_ddiv>
 80175bc:	f7e9 fb28 	bl	8000c10 <__aeabi_d2f>
 80175c0:	ee08 0a10 	vmov	s16, r0
	if(Value < 0){Value *= -1; sign = 1;}
 80175c4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80175c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175cc:	bf48      	it	mi
 80175ce:	eeb1 8a48 	vnegmi.f32	s16, s16
	sprintf (buffer, "%.2f", Value);
 80175d2:	ee18 0a10 	vmov	r0, s16
	if(Value < 0){Value *= -1; sign = 1;}
 80175d6:	bf48      	it	mi
 80175d8:	f04f 0801 	movmi.w	r8, #1
	sprintf (buffer, "%.2f", Value);
 80175dc:	f7e8 ffcc 	bl	8000578 <__aeabi_f2d>
 80175e0:	4602      	mov	r2, r0
 80175e2:	460b      	mov	r3, r1
 80175e4:	a803      	add	r0, sp, #12
 80175e6:	4929      	ldr	r1, [pc, #164]	; (801768c <GUI_Text_deltaE_Measure+0x200>)
 80175e8:	f00a fbda 	bl	8021da0 <sprintf>
	uint32_t dec = 10;
 80175ec:	220a      	movs	r2, #10
	sprintf (buffer, "%.2f", Value);
 80175ee:	2304      	movs	r3, #4
		if((Value/(dec)) >= 1.0)
 80175f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 80175f4:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80175f6:	ee07 2a10 	vmov	s14, r2
 80175fa:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80175fe:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8017602:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801760a:	db04      	blt.n	8017616 <GUI_Text_deltaE_Measure+0x18a>
			delta_pos-=23;
 801760c:	3e17      	subs	r6, #23
			number++;
 801760e:	3701      	adds	r7, #1
			dec *= 10;
 8017610:	434a      	muls	r2, r1
			delta_pos-=23;
 8017612:	b2f6      	uxtb	r6, r6
			number++;
 8017614:	b2ff      	uxtb	r7, r7
 8017616:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8017618:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801761c:	d1eb      	bne.n	80175f6 <GUI_Text_deltaE_Measure+0x16a>
	if(number < old_deltaE )
 801761e:	4b1c      	ldr	r3, [pc, #112]	; (8017690 <GUI_Text_deltaE_Measure+0x204>)
 8017620:	781a      	ldrb	r2, [r3, #0]
 8017622:	42ba      	cmp	r2, r7
 8017624:	4699      	mov	r9, r3
 8017626:	d90d      	bls.n	8017644 <GUI_Text_deltaE_Measure+0x1b8>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8017628:	2163      	movs	r1, #99	; 0x63
 801762a:	f105 0319 	add.w	r3, r5, #25
 801762e:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8017632:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8017636:	9100      	str	r1, [sp, #0]
 8017638:	b29b      	uxth	r3, r3
 801763a:	b292      	uxth	r2, r2
 801763c:	4629      	mov	r1, r5
 801763e:	b280      	uxth	r0, r0
 8017640:	f006 fe6b 	bl	801e31a <TFT_FillRectangle>
	old_deltaE = number;
 8017644:	f889 7000 	strb.w	r7, [r9]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}
 8017648:	f1b8 0f00 	cmp.w	r8, #0
 801764c:	d007      	beq.n	801765e <GUI_Text_deltaE_Measure+0x1d2>
 801764e:	f1a4 0012 	sub.w	r0, r4, #18
 8017652:	4430      	add	r0, r6
 8017654:	222d      	movs	r2, #45	; 0x2d
 8017656:	4629      	mov	r1, r5
 8017658:	b280      	uxth	r0, r0
 801765a:	f007 f951 	bl	801e900 <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801765e:	19a0      	adds	r0, r4, r6
 8017660:	2303      	movs	r3, #3
 8017662:	aa03      	add	r2, sp, #12
 8017664:	4629      	mov	r1, r5
 8017666:	b280      	uxth	r0, r0
 8017668:	f007 f9a2 	bl	801e9b0 <TFT_DisplayString>
 801766c:	e752      	b.n	8017514 <GUI_Text_deltaE_Measure+0x88>
 801766e:	bf00      	nop
 8017670:	2000022a 	.word	0x2000022a
 8017674:	200052b5 	.word	0x200052b5
 8017678:	20005279 	.word	0x20005279
 801767c:	200001f0 	.word	0x200001f0
 8017680:	200001b0 	.word	0x200001b0
 8017684:	200001e8 	.word	0x200001e8
 8017688:	40240000 	.word	0x40240000
 801768c:	080337f2 	.word	0x080337f2
 8017690:	2000022e 	.word	0x2000022e

08017694 <GUI_Text_EbEr_Measure>:
uint8_t old_num_EB = 10, old_num_ER = 10, old_nan_EBER = 0;
void GUI_Text_EbEr_Measure(uint16_t X, uint16_t Y, float ValueEB, float ValueER, uint8_t nope, uint8_t grey)
{
 8017694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017698:	ed2d 8b04 	vpush	{d8-d9}
 801769c:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 801769e:	4bb6      	ldr	r3, [pc, #728]	; (8017978 <GUI_Text_EbEr_Measure+0x2e4>)
 80176a0:	4eb6      	ldr	r6, [pc, #728]	; (801797c <GUI_Text_EbEr_Measure+0x2e8>)
{
 80176a2:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 80176a4:	781a      	ldrb	r2, [r3, #0]
 80176a6:	4bb6      	ldr	r3, [pc, #728]	; (8017980 <GUI_Text_EbEr_Measure+0x2ec>)
 80176a8:	781b      	ldrb	r3, [r3, #0]
 80176aa:	429a      	cmp	r2, r3
{
 80176ac:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 80176ae:	bf1c      	itt	ne
 80176b0:	2300      	movne	r3, #0
 80176b2:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 80176b4:	2300      	movs	r3, #0
 80176b6:	9303      	str	r3, [sp, #12]
 80176b8:	9304      	str	r3, [sp, #16]
 80176ba:	f88d 3014 	strb.w	r3, [sp, #20]
{
 80176be:	4605      	mov	r5, r0
 80176c0:	460c      	mov	r4, r1
 80176c2:	eef0 8a40 	vmov.f32	s17, s0
 80176c6:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_EBER){
 80176ca:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 80176cc:	f1b8 0f00 	cmp.w	r8, #0
 80176d0:	d06f      	beq.n	80177b2 <GUI_Text_EbEr_Measure+0x11e>
			if(!old_nan_EBER){
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d140      	bne.n	8017758 <GUI_Text_EbEr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 80176d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80176da:	f007 f84d 	bl	801e778 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80176de:	2063      	movs	r0, #99	; 0x63
 80176e0:	f007 f850 	bl	801e784 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80176e4:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 80176e8:	48a6      	ldr	r0, [pc, #664]	; (8017984 <GUI_Text_EbEr_Measure+0x2f0>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80176ea:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 80176ee:	f007 f83d 	bl	801e76c <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80176f2:	b2bf      	uxth	r7, r7
 80176f4:	fa1f f989 	uxth.w	r9, r9
 80176f8:	f04f 0a63 	mov.w	sl, #99	; 0x63
 80176fc:	f104 031a 	add.w	r3, r4, #26
 8017700:	4638      	mov	r0, r7
 8017702:	b29b      	uxth	r3, r3
 8017704:	464a      	mov	r2, r9
 8017706:	4621      	mov	r1, r4
 8017708:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 801770c:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017710:	f006 fe03 	bl	801e31a <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8017714:	fa1f f888 	uxth.w	r8, r8
 8017718:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 801771c:	4638      	mov	r0, r7
 801771e:	b29b      	uxth	r3, r3
 8017720:	464a      	mov	r2, r9
 8017722:	4641      	mov	r1, r8
 8017724:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017728:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 801772c:	f006 fdf5 	bl	801e31a <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017730:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 8017732:	232d      	movs	r3, #45	; 0x2d
 8017734:	f88d 300c 	strb.w	r3, [sp, #12]
 8017738:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801773c:	aa03      	add	r2, sp, #12
 801773e:	2303      	movs	r3, #3
 8017740:	4621      	mov	r1, r4
 8017742:	4638      	mov	r0, r7
 8017744:	f007 f934 	bl	801e9b0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017748:	2303      	movs	r3, #3
 801774a:	aa03      	add	r2, sp, #12
 801774c:	4641      	mov	r1, r8
 801774e:	4638      	mov	r0, r7
 8017750:	f007 f92e 	bl	801e9b0 <TFT_DisplayString>
				old_nan_EBER = 1;
 8017754:	2301      	movs	r3, #1
 8017756:	7033      	strb	r3, [r6, #0]
	old_num_ER = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8017758:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801775c:	f007 f80c 	bl	801e778 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8017760:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 8017764:	4888      	ldr	r0, [pc, #544]	; (8017988 <GUI_Text_EbEr_Measure+0x2f4>)
 8017766:	f007 f801 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 801776a:	b2b6      	uxth	r6, r6
 801776c:	f104 010c 	add.w	r1, r4, #12
 8017770:	4630      	mov	r0, r6
 8017772:	2242      	movs	r2, #66	; 0x42
 8017774:	b289      	uxth	r1, r1
 8017776:	f007 f8c3 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 801777a:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 801777e:	2252      	movs	r2, #82	; 0x52
 8017780:	b289      	uxth	r1, r1
 8017782:	4630      	mov	r0, r6
 8017784:	f007 f8bc 	bl	801e900 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8017788:	4880      	ldr	r0, [pc, #512]	; (801798c <GUI_Text_EbEr_Measure+0x2f8>)
 801778a:	f006 ffef 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 801778e:	1ca1      	adds	r1, r4, #2
 8017790:	4628      	mov	r0, r5
 8017792:	2224      	movs	r2, #36	; 0x24
 8017794:	b289      	uxth	r1, r1
 8017796:	f007 f8b3 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'E'-33);
 801779a:	f104 0125 	add.w	r1, r4, #37	; 0x25
 801779e:	2224      	movs	r2, #36	; 0x24
 80177a0:	b289      	uxth	r1, r1
 80177a2:	4628      	mov	r0, r5
 80177a4:	f007 f8ac 	bl	801e900 <TFT_DrawChar>
}
 80177a8:	b007      	add	sp, #28
 80177aa:	ecbd 8b04 	vpop	{d8-d9}
 80177ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_EBER){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80177b2:	b1eb      	cbz	r3, 80177f0 <GUI_Text_EbEr_Measure+0x15c>
 80177b4:	f100 0728 	add.w	r7, r0, #40	; 0x28
 80177b8:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 80177bc:	f101 031a 	add.w	r3, r1, #26
 80177c0:	b2bf      	uxth	r7, r7
 80177c2:	fa1f f989 	uxth.w	r9, r9
 80177c6:	f04f 0b63 	mov.w	fp, #99	; 0x63
 80177ca:	b29b      	uxth	r3, r3
 80177cc:	464a      	mov	r2, r9
 80177ce:	4638      	mov	r0, r7
 80177d0:	f8cd b000 	str.w	fp, [sp]
 80177d4:	f006 fda1 	bl	801e31a <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 80177d8:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 80177dc:	f104 0123 	add.w	r1, r4, #35	; 0x23
 80177e0:	f8cd b000 	str.w	fp, [sp]
 80177e4:	b29b      	uxth	r3, r3
 80177e6:	464a      	mov	r2, r9
 80177e8:	b289      	uxth	r1, r1
 80177ea:	4638      	mov	r0, r7
 80177ec:	f006 fd95 	bl	801e31a <TFT_FillRectangle>
	ValueEB = floor(ValueEB*100)/100.0;
 80177f0:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8017990 <GUI_Text_EbEr_Measure+0x2fc>
 80177f4:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_EBER = 0;
 80177f8:	2700      	movs	r7, #0
	ValueEB = floor(ValueEB*100)/100.0;
 80177fa:	ee17 0a90 	vmov	r0, s15
	old_nan_EBER = 0;
 80177fe:	7037      	strb	r7, [r6, #0]
	ValueEB = floor(ValueEB*100)/100.0;
 8017800:	f7e8 feba 	bl	8000578 <__aeabi_f2d>
 8017804:	ec41 0b10 	vmov	d0, r0, r1
 8017808:	f00d fa76 	bl	8024cf8 <floor>
 801780c:	2200      	movs	r2, #0
 801780e:	4b61      	ldr	r3, [pc, #388]	; (8017994 <GUI_Text_EbEr_Measure+0x300>)
 8017810:	ec51 0b10 	vmov	r0, r1, d0
 8017814:	f7e9 f82e 	bl	8000874 <__aeabi_ddiv>
 8017818:	f7e9 f9fa 	bl	8000c10 <__aeabi_d2f>
	ValueER = floor(ValueER*100)/100.0;
 801781c:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueEB = floor(ValueEB*100)/100.0;
 8017820:	ee08 0a90 	vmov	s17, r0
	ValueER = floor(ValueER*100)/100.0;
 8017824:	ee17 0a90 	vmov	r0, s15
 8017828:	f7e8 fea6 	bl	8000578 <__aeabi_f2d>
 801782c:	ec41 0b10 	vmov	d0, r0, r1
 8017830:	f00d fa62 	bl	8024cf8 <floor>
 8017834:	2200      	movs	r2, #0
 8017836:	ec51 0b10 	vmov	r0, r1, d0
 801783a:	4b56      	ldr	r3, [pc, #344]	; (8017994 <GUI_Text_EbEr_Measure+0x300>)
 801783c:	f7e9 f81a 	bl	8000874 <__aeabi_ddiv>
 8017840:	f7e9 f9e6 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017844:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueER = floor(ValueER*100)/100.0;
 8017848:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801784c:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8017850:	45ba      	cmp	sl, r7
 8017852:	bf08      	it	eq
 8017854:	4618      	moveq	r0, r3
 8017856:	f006 ff8f 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801785a:	2063      	movs	r0, #99	; 0x63
 801785c:	f006 ff92 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017860:	4848      	ldr	r0, [pc, #288]	; (8017984 <GUI_Text_EbEr_Measure+0x2f0>)
 8017862:	f006 ff83 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueEB);
 8017866:	ee18 0a90 	vmov	r0, s17
 801786a:	f7e8 fe85 	bl	8000578 <__aeabi_f2d>
 801786e:	4602      	mov	r2, r0
 8017870:	460b      	mov	r3, r1
 8017872:	a803      	add	r0, sp, #12
 8017874:	4948      	ldr	r1, [pc, #288]	; (8017998 <GUI_Text_EbEr_Measure+0x304>)
 8017876:	f00a fa93 	bl	8021da0 <sprintf>
	uint32_t dec = 10;
 801787a:	f04f 090a 	mov.w	r9, #10
		if((ValueEB/(dec)) >= 1.0)
 801787e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueEB);
 8017882:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 8017884:	2696      	movs	r6, #150	; 0x96
 8017886:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 801788a:	464a      	mov	r2, r9
		if((ValueEB/(dec)) >= 1.0)
 801788c:	ee07 9a10 	vmov	s14, r9
 8017890:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8017894:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8017898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801789c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178a0:	db05      	blt.n	80178ae <GUI_Text_EbEr_Measure+0x21a>
			delta_pos-=23;
 80178a2:	3e17      	subs	r6, #23
			number++;
 80178a4:	3701      	adds	r7, #1
			dec *= 10;
 80178a6:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 80178aa:	b2f6      	uxtb	r6, r6
			number++;
 80178ac:	b2ff      	uxtb	r7, r7
 80178ae:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80178b0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80178b4:	d1ea      	bne.n	801788c <GUI_Text_EbEr_Measure+0x1f8>
	if(number < old_num_EB )
 80178b6:	4b39      	ldr	r3, [pc, #228]	; (801799c <GUI_Text_EbEr_Measure+0x308>)
 80178b8:	781a      	ldrb	r2, [r3, #0]
 80178ba:	42ba      	cmp	r2, r7
 80178bc:	469a      	mov	sl, r3
 80178be:	d90d      	bls.n	80178dc <GUI_Text_EbEr_Measure+0x248>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80178c0:	2163      	movs	r1, #99	; 0x63
 80178c2:	f104 0319 	add.w	r3, r4, #25
 80178c6:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80178ca:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80178ce:	9100      	str	r1, [sp, #0]
 80178d0:	b29b      	uxth	r3, r3
 80178d2:	b292      	uxth	r2, r2
 80178d4:	4621      	mov	r1, r4
 80178d6:	b280      	uxth	r0, r0
 80178d8:	f006 fd1f 	bl	801e31a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80178dc:	19a8      	adds	r0, r5, r6
 80178de:	2303      	movs	r3, #3
 80178e0:	aa03      	add	r2, sp, #12
 80178e2:	4621      	mov	r1, r4
 80178e4:	b280      	uxth	r0, r0
	old_num_EB = number;
 80178e6:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80178ea:	f007 f861 	bl	801e9b0 <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueER);
 80178ee:	ee18 0a10 	vmov	r0, s16
 80178f2:	f7e8 fe41 	bl	8000578 <__aeabi_f2d>
 80178f6:	4602      	mov	r2, r0
 80178f8:	460b      	mov	r3, r1
 80178fa:	a803      	add	r0, sp, #12
 80178fc:	4926      	ldr	r1, [pc, #152]	; (8017998 <GUI_Text_EbEr_Measure+0x304>)
 80178fe:	f00a fa4f 	bl	8021da0 <sprintf>
 8017902:	2304      	movs	r3, #4
			dec *= 10;
 8017904:	220a      	movs	r2, #10
		if((ValueER/(dec)) >= 1.0)
 8017906:	ee07 9a90 	vmov	s15, r9
 801790a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801790e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8017912:	eef4 7ac9 	vcmpe.f32	s15, s18
 8017916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801791a:	db07      	blt.n	801792c <GUI_Text_EbEr_Measure+0x298>
			delta_pos-=23;
 801791c:	3e17      	subs	r6, #23
			number++;
 801791e:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8017922:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8017926:	b2f6      	uxtb	r6, r6
			number++;
 8017928:	fa5f f888 	uxtb.w	r8, r8
 801792c:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 801792e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8017932:	d1e8      	bne.n	8017906 <GUI_Text_EbEr_Measure+0x272>
	if(number < old_num_ER )
 8017934:	4f1a      	ldr	r7, [pc, #104]	; (80179a0 <GUI_Text_EbEr_Measure+0x30c>)
 8017936:	783b      	ldrb	r3, [r7, #0]
 8017938:	4543      	cmp	r3, r8
 801793a:	d911      	bls.n	8017960 <GUI_Text_EbEr_Measure+0x2cc>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 801793c:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8017940:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017944:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8017948:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801794c:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8017950:	f8cd e000 	str.w	lr, [sp]
 8017954:	b29b      	uxth	r3, r3
 8017956:	b292      	uxth	r2, r2
 8017958:	b289      	uxth	r1, r1
 801795a:	b280      	uxth	r0, r0
 801795c:	f006 fcdd 	bl	801e31a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017960:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8017964:	19a8      	adds	r0, r5, r6
 8017966:	2303      	movs	r3, #3
 8017968:	aa03      	add	r2, sp, #12
 801796a:	b289      	uxth	r1, r1
 801796c:	b280      	uxth	r0, r0
	old_num_ER = number;
 801796e:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017972:	f007 f81d 	bl	801e9b0 <TFT_DisplayString>
 8017976:	e6ef      	b.n	8017758 <GUI_Text_EbEr_Measure+0xc4>
 8017978:	2000022a 	.word	0x2000022a
 801797c:	200052ac 	.word	0x200052ac
 8017980:	20005279 	.word	0x20005279
 8017984:	200001f0 	.word	0x200001f0
 8017988:	200001b0 	.word	0x200001b0
 801798c:	200001e8 	.word	0x200001e8
 8017990:	42c80000 	.word	0x42c80000
 8017994:	40590000 	.word	0x40590000
 8017998:	080337f2 	.word	0x080337f2
 801799c:	2000023e 	.word	0x2000023e
 80179a0:	2000023f 	.word	0x2000023f

080179a4 <GUI_Text_LbLr_Measure>:
uint8_t old_num_LB = 10, old_num_LR = 10, old_nan_LBLR = 0;
void GUI_Text_LbLr_Measure(uint16_t X, uint16_t Y, float ValueLB, float ValueLR, uint8_t nope, uint8_t grey)
{
 80179a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179a8:	ed2d 8b04 	vpush	{d8-d9}
 80179ac:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80179ae:	4bb8      	ldr	r3, [pc, #736]	; (8017c90 <GUI_Text_LbLr_Measure+0x2ec>)
 80179b0:	4eb8      	ldr	r6, [pc, #736]	; (8017c94 <GUI_Text_LbLr_Measure+0x2f0>)
{
 80179b2:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80179b4:	781a      	ldrb	r2, [r3, #0]
 80179b6:	4bb8      	ldr	r3, [pc, #736]	; (8017c98 <GUI_Text_LbLr_Measure+0x2f4>)
 80179b8:	781b      	ldrb	r3, [r3, #0]
 80179ba:	429a      	cmp	r2, r3
{
 80179bc:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80179be:	bf1c      	itt	ne
 80179c0:	2300      	movne	r3, #0
 80179c2:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 80179c4:	2300      	movs	r3, #0
 80179c6:	9303      	str	r3, [sp, #12]
 80179c8:	9304      	str	r3, [sp, #16]
 80179ca:	f88d 3014 	strb.w	r3, [sp, #20]
{
 80179ce:	4605      	mov	r5, r0
 80179d0:	460c      	mov	r4, r1
 80179d2:	eef0 8a40 	vmov.f32	s17, s0
 80179d6:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	if(nope) 
		{	
			if(!old_nan_LBLR){
 80179da:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 80179dc:	f1b8 0f00 	cmp.w	r8, #0
 80179e0:	d072      	beq.n	8017ac8 <GUI_Text_LbLr_Measure+0x124>
			if(!old_nan_LBLR){
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d140      	bne.n	8017a68 <GUI_Text_LbLr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 80179e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80179ea:	f006 fec5 	bl	801e778 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80179ee:	2063      	movs	r0, #99	; 0x63
 80179f0:	f006 fec8 	bl	801e784 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80179f4:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 80179f8:	48a8      	ldr	r0, [pc, #672]	; (8017c9c <GUI_Text_LbLr_Measure+0x2f8>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80179fa:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 80179fe:	f006 feb5 	bl	801e76c <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017a02:	b2bf      	uxth	r7, r7
 8017a04:	fa1f f989 	uxth.w	r9, r9
 8017a08:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8017a0c:	f104 031a 	add.w	r3, r4, #26
 8017a10:	4638      	mov	r0, r7
 8017a12:	b29b      	uxth	r3, r3
 8017a14:	464a      	mov	r2, r9
 8017a16:	4621      	mov	r1, r4
 8017a18:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8017a1c:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017a20:	f006 fc7b 	bl	801e31a <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8017a24:	fa1f f888 	uxth.w	r8, r8
 8017a28:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8017a2c:	4638      	mov	r0, r7
 8017a2e:	b29b      	uxth	r3, r3
 8017a30:	464a      	mov	r2, r9
 8017a32:	4641      	mov	r1, r8
 8017a34:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017a38:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8017a3c:	f006 fc6d 	bl	801e31a <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017a40:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 8017a42:	232d      	movs	r3, #45	; 0x2d
 8017a44:	f88d 300c 	strb.w	r3, [sp, #12]
 8017a48:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017a4c:	aa03      	add	r2, sp, #12
 8017a4e:	2303      	movs	r3, #3
 8017a50:	4621      	mov	r1, r4
 8017a52:	4638      	mov	r0, r7
 8017a54:	f006 ffac 	bl	801e9b0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017a58:	2303      	movs	r3, #3
 8017a5a:	aa03      	add	r2, sp, #12
 8017a5c:	4641      	mov	r1, r8
 8017a5e:	4638      	mov	r0, r7
 8017a60:	f006 ffa6 	bl	801e9b0 <TFT_DisplayString>
				old_nan_LBLR = 1;
 8017a64:	2301      	movs	r3, #1
 8017a66:	7033      	strb	r3, [r6, #0]
	old_num_LR = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetFont(&Font26EN_arch_digit);
 8017a68:	488c      	ldr	r0, [pc, #560]	; (8017c9c <GUI_Text_LbLr_Measure+0x2f8>)
 8017a6a:	f006 fe7f 	bl	801e76c <TFT_SetFont>

	TFT_SetTextColor(TFT_White);
 8017a6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017a72:	f006 fe81 	bl	801e778 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8017a76:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 8017a7a:	4889      	ldr	r0, [pc, #548]	; (8017ca0 <GUI_Text_LbLr_Measure+0x2fc>)
 8017a7c:	f006 fe76 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 8017a80:	b2b6      	uxth	r6, r6
 8017a82:	f104 010c 	add.w	r1, r4, #12
 8017a86:	4630      	mov	r0, r6
 8017a88:	2242      	movs	r2, #66	; 0x42
 8017a8a:	b289      	uxth	r1, r1
 8017a8c:	f006 ff38 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 8017a90:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 8017a94:	2252      	movs	r2, #82	; 0x52
 8017a96:	b289      	uxth	r1, r1
 8017a98:	4630      	mov	r0, r6
 8017a9a:	f006 ff31 	bl	801e900 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8017a9e:	4881      	ldr	r0, [pc, #516]	; (8017ca4 <GUI_Text_LbLr_Measure+0x300>)
 8017aa0:	f006 fe64 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 8017aa4:	1ca1      	adds	r1, r4, #2
 8017aa6:	4628      	mov	r0, r5
 8017aa8:	222b      	movs	r2, #43	; 0x2b
 8017aaa:	b289      	uxth	r1, r1
 8017aac:	f006 ff28 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'L'-33);
 8017ab0:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8017ab4:	222b      	movs	r2, #43	; 0x2b
 8017ab6:	b289      	uxth	r1, r1
 8017ab8:	4628      	mov	r0, r5
 8017aba:	f006 ff21 	bl	801e900 <TFT_DrawChar>
}
 8017abe:	b007      	add	sp, #28
 8017ac0:	ecbd 8b04 	vpop	{d8-d9}
 8017ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(old_nan_LBLR){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017ac8:	b1eb      	cbz	r3, 8017b06 <GUI_Text_LbLr_Measure+0x162>
 8017aca:	f100 0728 	add.w	r7, r0, #40	; 0x28
 8017ace:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 8017ad2:	f101 031a 	add.w	r3, r1, #26
 8017ad6:	b2bf      	uxth	r7, r7
 8017ad8:	fa1f f989 	uxth.w	r9, r9
 8017adc:	f04f 0b63 	mov.w	fp, #99	; 0x63
 8017ae0:	b29b      	uxth	r3, r3
 8017ae2:	464a      	mov	r2, r9
 8017ae4:	4638      	mov	r0, r7
 8017ae6:	f8cd b000 	str.w	fp, [sp]
 8017aea:	f006 fc16 	bl	801e31a <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 8017aee:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8017af2:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8017af6:	f8cd b000 	str.w	fp, [sp]
 8017afa:	b29b      	uxth	r3, r3
 8017afc:	464a      	mov	r2, r9
 8017afe:	b289      	uxth	r1, r1
 8017b00:	4638      	mov	r0, r7
 8017b02:	f006 fc0a 	bl	801e31a <TFT_FillRectangle>
	ValueLB = floor(ValueLB*100)/100.0;
 8017b06:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8017ca8 <GUI_Text_LbLr_Measure+0x304>
 8017b0a:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_LBLR = 0;
 8017b0e:	2700      	movs	r7, #0
	ValueLB = floor(ValueLB*100)/100.0;
 8017b10:	ee17 0a90 	vmov	r0, s15
	old_nan_LBLR = 0;
 8017b14:	7037      	strb	r7, [r6, #0]
	ValueLB = floor(ValueLB*100)/100.0;
 8017b16:	f7e8 fd2f 	bl	8000578 <__aeabi_f2d>
 8017b1a:	ec41 0b10 	vmov	d0, r0, r1
 8017b1e:	f00d f8eb 	bl	8024cf8 <floor>
 8017b22:	2200      	movs	r2, #0
 8017b24:	4b61      	ldr	r3, [pc, #388]	; (8017cac <GUI_Text_LbLr_Measure+0x308>)
 8017b26:	ec51 0b10 	vmov	r0, r1, d0
 8017b2a:	f7e8 fea3 	bl	8000874 <__aeabi_ddiv>
 8017b2e:	f7e9 f86f 	bl	8000c10 <__aeabi_d2f>
	ValueLR = floor(ValueLR*100)/100.0;
 8017b32:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueLB = floor(ValueLB*100)/100.0;
 8017b36:	ee08 0a90 	vmov	s17, r0
	ValueLR = floor(ValueLR*100)/100.0;
 8017b3a:	ee17 0a90 	vmov	r0, s15
 8017b3e:	f7e8 fd1b 	bl	8000578 <__aeabi_f2d>
 8017b42:	ec41 0b10 	vmov	d0, r0, r1
 8017b46:	f00d f8d7 	bl	8024cf8 <floor>
 8017b4a:	2200      	movs	r2, #0
 8017b4c:	ec51 0b10 	vmov	r0, r1, d0
 8017b50:	4b56      	ldr	r3, [pc, #344]	; (8017cac <GUI_Text_LbLr_Measure+0x308>)
 8017b52:	f7e8 fe8f 	bl	8000874 <__aeabi_ddiv>
 8017b56:	f7e9 f85b 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017b5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueLR = floor(ValueLR*100)/100.0;
 8017b5e:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017b62:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8017b66:	45ba      	cmp	sl, r7
 8017b68:	bf08      	it	eq
 8017b6a:	4618      	moveq	r0, r3
 8017b6c:	f006 fe04 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017b70:	2063      	movs	r0, #99	; 0x63
 8017b72:	f006 fe07 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017b76:	4849      	ldr	r0, [pc, #292]	; (8017c9c <GUI_Text_LbLr_Measure+0x2f8>)
 8017b78:	f006 fdf8 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueLB);
 8017b7c:	ee18 0a90 	vmov	r0, s17
 8017b80:	f7e8 fcfa 	bl	8000578 <__aeabi_f2d>
 8017b84:	4602      	mov	r2, r0
 8017b86:	460b      	mov	r3, r1
 8017b88:	a803      	add	r0, sp, #12
 8017b8a:	4949      	ldr	r1, [pc, #292]	; (8017cb0 <GUI_Text_LbLr_Measure+0x30c>)
 8017b8c:	f00a f908 	bl	8021da0 <sprintf>
	uint32_t dec = 10;
 8017b90:	f04f 090a 	mov.w	r9, #10
		if((ValueLB/(dec)) >= 1.0)
 8017b94:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueLB);
 8017b98:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 8017b9a:	2696      	movs	r6, #150	; 0x96
 8017b9c:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 8017ba0:	464a      	mov	r2, r9
		if((ValueLB/(dec)) >= 1.0)
 8017ba2:	ee07 9a10 	vmov	s14, r9
 8017ba6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8017baa:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8017bae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bb6:	db05      	blt.n	8017bc4 <GUI_Text_LbLr_Measure+0x220>
			delta_pos-=23;
 8017bb8:	3e17      	subs	r6, #23
			number++;
 8017bba:	3701      	adds	r7, #1
			dec *= 10;
 8017bbc:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8017bc0:	b2f6      	uxtb	r6, r6
			number++;
 8017bc2:	b2ff      	uxtb	r7, r7
 8017bc4:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8017bc6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8017bca:	d1ea      	bne.n	8017ba2 <GUI_Text_LbLr_Measure+0x1fe>
	if(number < old_num_LB )
 8017bcc:	4b39      	ldr	r3, [pc, #228]	; (8017cb4 <GUI_Text_LbLr_Measure+0x310>)
 8017bce:	781a      	ldrb	r2, [r3, #0]
 8017bd0:	42ba      	cmp	r2, r7
 8017bd2:	469a      	mov	sl, r3
 8017bd4:	d90d      	bls.n	8017bf2 <GUI_Text_LbLr_Measure+0x24e>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8017bd6:	2163      	movs	r1, #99	; 0x63
 8017bd8:	f104 0319 	add.w	r3, r4, #25
 8017bdc:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017be0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017be4:	9100      	str	r1, [sp, #0]
 8017be6:	b29b      	uxth	r3, r3
 8017be8:	b292      	uxth	r2, r2
 8017bea:	4621      	mov	r1, r4
 8017bec:	b280      	uxth	r0, r0
 8017bee:	f006 fb94 	bl	801e31a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017bf2:	19a8      	adds	r0, r5, r6
 8017bf4:	2303      	movs	r3, #3
 8017bf6:	aa03      	add	r2, sp, #12
 8017bf8:	4621      	mov	r1, r4
 8017bfa:	b280      	uxth	r0, r0
	old_num_LB = number;
 8017bfc:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017c00:	f006 fed6 	bl	801e9b0 <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueLR);
 8017c04:	ee18 0a10 	vmov	r0, s16
 8017c08:	f7e8 fcb6 	bl	8000578 <__aeabi_f2d>
 8017c0c:	4602      	mov	r2, r0
 8017c0e:	460b      	mov	r3, r1
 8017c10:	a803      	add	r0, sp, #12
 8017c12:	4927      	ldr	r1, [pc, #156]	; (8017cb0 <GUI_Text_LbLr_Measure+0x30c>)
 8017c14:	f00a f8c4 	bl	8021da0 <sprintf>
 8017c18:	2304      	movs	r3, #4
			dec *= 10;
 8017c1a:	220a      	movs	r2, #10
		if((ValueLR/(dec)) >= 1.0)
 8017c1c:	ee07 9a90 	vmov	s15, r9
 8017c20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017c24:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8017c28:	eef4 7ac9 	vcmpe.f32	s15, s18
 8017c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c30:	db07      	blt.n	8017c42 <GUI_Text_LbLr_Measure+0x29e>
			delta_pos-=23;
 8017c32:	3e17      	subs	r6, #23
			number++;
 8017c34:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8017c38:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8017c3c:	b2f6      	uxtb	r6, r6
			number++;
 8017c3e:	fa5f f888 	uxtb.w	r8, r8
 8017c42:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8017c44:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8017c48:	d1e8      	bne.n	8017c1c <GUI_Text_LbLr_Measure+0x278>
	if(number < old_num_LR )
 8017c4a:	4f1b      	ldr	r7, [pc, #108]	; (8017cb8 <GUI_Text_LbLr_Measure+0x314>)
 8017c4c:	783b      	ldrb	r3, [r7, #0]
 8017c4e:	4543      	cmp	r3, r8
 8017c50:	d911      	bls.n	8017c76 <GUI_Text_LbLr_Measure+0x2d2>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 8017c52:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8017c56:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017c5a:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8017c5e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017c62:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8017c66:	f8cd e000 	str.w	lr, [sp]
 8017c6a:	b29b      	uxth	r3, r3
 8017c6c:	b292      	uxth	r2, r2
 8017c6e:	b289      	uxth	r1, r1
 8017c70:	b280      	uxth	r0, r0
 8017c72:	f006 fb52 	bl	801e31a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017c76:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8017c7a:	19a8      	adds	r0, r5, r6
 8017c7c:	2303      	movs	r3, #3
 8017c7e:	aa03      	add	r2, sp, #12
 8017c80:	b289      	uxth	r1, r1
 8017c82:	b280      	uxth	r0, r0
	old_num_LR = number;
 8017c84:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017c88:	f006 fe92 	bl	801e9b0 <TFT_DisplayString>
 8017c8c:	e6ec      	b.n	8017a68 <GUI_Text_LbLr_Measure+0xc4>
 8017c8e:	bf00      	nop
 8017c90:	2000022a 	.word	0x2000022a
 8017c94:	200052af 	.word	0x200052af
 8017c98:	20005279 	.word	0x20005279
 8017c9c:	200001f0 	.word	0x200001f0
 8017ca0:	200001b0 	.word	0x200001b0
 8017ca4:	200001e8 	.word	0x200001e8
 8017ca8:	42c80000 	.word	0x42c80000
 8017cac:	40590000 	.word	0x40590000
 8017cb0:	080337f2 	.word	0x080337f2
 8017cb4:	20000241 	.word	0x20000241
 8017cb8:	20000242 	.word	0x20000242

08017cbc <GUI_Text_S_P_Measure>:

uint8_t old_num_SP = 10, old_nan_SP = 0;
void GUI_Text_S_P_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{
 8017cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cc0:	ed2d 8b02 	vpush	{d8}
 8017cc4:	4616      	mov	r6, r2
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8017cc6:	4a59      	ldr	r2, [pc, #356]	; (8017e2c <GUI_Text_S_P_Measure+0x170>)
 8017cc8:	4f59      	ldr	r7, [pc, #356]	; (8017e30 <GUI_Text_S_P_Measure+0x174>)
{
 8017cca:	460c      	mov	r4, r1
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8017ccc:	7811      	ldrb	r1, [r2, #0]
 8017cce:	4a59      	ldr	r2, [pc, #356]	; (8017e34 <GUI_Text_S_P_Measure+0x178>)
 8017cd0:	7812      	ldrb	r2, [r2, #0]
 8017cd2:	4291      	cmp	r1, r2
{
 8017cd4:	b086      	sub	sp, #24
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8017cd6:	bf1c      	itt	ne
 8017cd8:	2200      	movne	r2, #0
 8017cda:	703a      	strbne	r2, [r7, #0]
	char buffer[9] = {0};
 8017cdc:	2200      	movs	r2, #0
{
 8017cde:	4605      	mov	r5, r0
 8017ce0:	eeb0 8a40 	vmov.f32	s16, s0
	char buffer[9] = {0};
 8017ce4:	9203      	str	r2, [sp, #12]
 8017ce6:	9204      	str	r2, [sp, #16]
 8017ce8:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 100, number = 0;
	uint32_t dec = 10;
	
		if(nope) 
 8017cec:	2e00      	cmp	r6, #0
 8017cee:	d04c      	beq.n	8017d8a <GUI_Text_S_P_Measure+0xce>
		{	
			if(!old_nan_SP){
 8017cf0:	783b      	ldrb	r3, [r7, #0]
 8017cf2:	bb33      	cbnz	r3, 8017d42 <GUI_Text_S_P_Measure+0x86>
				TFT_SetTextColor(TFT_White);
 8017cf4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017cf8:	f006 fd3e 	bl	801e778 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8017cfc:	2063      	movs	r0, #99	; 0x63
 8017cfe:	f006 fd41 	bl	801e784 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8017d02:	484d      	ldr	r0, [pc, #308]	; (8017e38 <GUI_Text_S_P_Measure+0x17c>)
 8017d04:	f006 fd32 	bl	801e76c <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017d08:	2163      	movs	r1, #99	; 0x63
 8017d0a:	f104 031a 	add.w	r3, r4, #26
 8017d0e:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8017d12:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017d16:	9100      	str	r1, [sp, #0]
 8017d18:	b29b      	uxth	r3, r3
 8017d1a:	b292      	uxth	r2, r2
 8017d1c:	4621      	mov	r1, r4
 8017d1e:	b280      	uxth	r0, r0
 8017d20:	f006 fafb 	bl	801e31a <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8017d24:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017d26:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8017d2a:	f88d 300c 	strb.w	r3, [sp, #12]
 8017d2e:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017d32:	aa03      	add	r2, sp, #12
 8017d34:	2303      	movs	r3, #3
 8017d36:	4621      	mov	r1, r4
 8017d38:	b280      	uxth	r0, r0
 8017d3a:	f006 fe39 	bl	801e9b0 <TFT_DisplayString>
				old_nan_SP = 1;
 8017d3e:	2301      	movs	r3, #1
 8017d40:	703b      	strb	r3, [r7, #0]
	} 
	old_num_SP = number;

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}	
	TFT_SetTextColor(TFT_White);
 8017d42:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017d46:	f006 fd17 	bl	801e778 <TFT_SetTextColor>
	TFT_SetFont(&Font26EN_arch_digit);
	TFT_DrawChar(X+22, Y+2, '/');
 8017d4a:	3402      	adds	r4, #2
	TFT_SetFont(&Font26EN_arch_digit);
 8017d4c:	483a      	ldr	r0, [pc, #232]	; (8017e38 <GUI_Text_S_P_Measure+0x17c>)
 8017d4e:	f006 fd0d 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+22, Y+2, '/');
 8017d52:	b2a4      	uxth	r4, r4
 8017d54:	f105 0016 	add.w	r0, r5, #22
 8017d58:	4621      	mov	r1, r4
 8017d5a:	222f      	movs	r2, #47	; 0x2f
 8017d5c:	b280      	uxth	r0, r0
 8017d5e:	f006 fdcf 	bl	801e900 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8017d62:	4836      	ldr	r0, [pc, #216]	; (8017e3c <GUI_Text_S_P_Measure+0x180>)
 8017d64:	f006 fd02 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'S'-33);
 8017d68:	4621      	mov	r1, r4
 8017d6a:	4628      	mov	r0, r5
 8017d6c:	2232      	movs	r2, #50	; 0x32
 8017d6e:	f006 fdc7 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'P'-33);
 8017d72:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8017d76:	222f      	movs	r2, #47	; 0x2f
 8017d78:	4621      	mov	r1, r4
 8017d7a:	b280      	uxth	r0, r0
 8017d7c:	f006 fdc0 	bl	801e900 <TFT_DrawChar>
}
 8017d80:	b006      	add	sp, #24
 8017d82:	ecbd 8b02 	vpop	{d8}
 8017d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017d8a:	f249 41d2 	movw	r1, #38098	; 0x94d2
 8017d8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	bf18      	it	ne
 8017d96:	4608      	movne	r0, r1
	old_nan_SP = 0;
 8017d98:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017d9a:	f006 fced 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017d9e:	2063      	movs	r0, #99	; 0x63
 8017da0:	f006 fcf0 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017da4:	4824      	ldr	r0, [pc, #144]	; (8017e38 <GUI_Text_S_P_Measure+0x17c>)
 8017da6:	f006 fce1 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%.4f", Value);
 8017daa:	ee18 0a10 	vmov	r0, s16
 8017dae:	f7e8 fbe3 	bl	8000578 <__aeabi_f2d>
 8017db2:	4602      	mov	r2, r0
 8017db4:	460b      	mov	r3, r1
 8017db6:	a803      	add	r0, sp, #12
 8017db8:	4921      	ldr	r1, [pc, #132]	; (8017e40 <GUI_Text_S_P_Measure+0x184>)
 8017dba:	f009 fff1 	bl	8021da0 <sprintf>
	uint32_t dec = 10;
 8017dbe:	220a      	movs	r2, #10
	sprintf (buffer, "%.4f", Value);
 8017dc0:	2304      	movs	r3, #4
	uint8_t	delta_pos = 100, number = 0;
 8017dc2:	2764      	movs	r7, #100	; 0x64
		if((Value/(dec)) >= 1.0)
 8017dc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8017dc8:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8017dca:	ee07 2a10 	vmov	s14, r2
 8017dce:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8017dd2:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8017dd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dde:	db04      	blt.n	8017dea <GUI_Text_S_P_Measure+0x12e>
			delta_pos-=23;
 8017de0:	3f17      	subs	r7, #23
			number++;
 8017de2:	3601      	adds	r6, #1
			dec *= 10;
 8017de4:	434a      	muls	r2, r1
			delta_pos-=23;
 8017de6:	b2ff      	uxtb	r7, r7
			number++;
 8017de8:	b2f6      	uxtb	r6, r6
 8017dea:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8017dec:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8017df0:	d1eb      	bne.n	8017dca <GUI_Text_S_P_Measure+0x10e>
	if(number < old_num_SP )
 8017df2:	4b14      	ldr	r3, [pc, #80]	; (8017e44 <GUI_Text_S_P_Measure+0x188>)
 8017df4:	781a      	ldrb	r2, [r3, #0]
 8017df6:	42b2      	cmp	r2, r6
 8017df8:	4698      	mov	r8, r3
 8017dfa:	d90d      	bls.n	8017e18 <GUI_Text_S_P_Measure+0x15c>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8017dfc:	2163      	movs	r1, #99	; 0x63
 8017dfe:	f104 0319 	add.w	r3, r4, #25
 8017e02:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017e06:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017e0a:	9100      	str	r1, [sp, #0]
 8017e0c:	b29b      	uxth	r3, r3
 8017e0e:	b292      	uxth	r2, r2
 8017e10:	4621      	mov	r1, r4
 8017e12:	b280      	uxth	r0, r0
 8017e14:	f006 fa81 	bl	801e31a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017e18:	19e8      	adds	r0, r5, r7
 8017e1a:	2303      	movs	r3, #3
 8017e1c:	aa03      	add	r2, sp, #12
 8017e1e:	4621      	mov	r1, r4
 8017e20:	b280      	uxth	r0, r0
	old_num_SP = number;
 8017e22:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017e26:	f006 fdc3 	bl	801e9b0 <TFT_DisplayString>
 8017e2a:	e78a      	b.n	8017d42 <GUI_Text_S_P_Measure+0x86>
 8017e2c:	2000022a 	.word	0x2000022a
 8017e30:	200052b4 	.word	0x200052b4
 8017e34:	20005279 	.word	0x20005279
 8017e38:	200001f0 	.word	0x200001f0
 8017e3c:	200001e8 	.word	0x200001e8
 8017e40:	080337f7 	.word	0x080337f7
 8017e44:	20000243 	.word	0x20000243

08017e48 <GUI_Text_LAB_Measure>:

uint8_t old_num_L = 10, old_num_A = 10, old_num_B = 10, old_nan = 0;
void GUI_Text_LAB_Measure(uint16_t X, uint16_t Y, int16_t ValueL, int16_t ValueA, int16_t ValueB, uint8_t nope, uint8_t grey)
{
 8017e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e4c:	b089      	sub	sp, #36	; 0x24
 8017e4e:	461f      	mov	r7, r3
 8017e50:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8017e54:	9304      	str	r3, [sp, #16]
 8017e56:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017e5a:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
	uint8_t	delta_pos = 180, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(ValueA <= -431 || nope){
 8017e5c:	f517 7fd7 	cmn.w	r7, #430	; 0x1ae
	char buffer[5] = {0};
 8017e60:	f04f 0300 	mov.w	r3, #0
{
 8017e64:	4604      	mov	r4, r0
 8017e66:	460d      	mov	r5, r1
 8017e68:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8017e6a:	9306      	str	r3, [sp, #24]
 8017e6c:	f88d 301c 	strb.w	r3, [sp, #28]
	if(ValueA <= -431 || nope){
 8017e70:	db03      	blt.n	8017e7a <GUI_Text_LAB_Measure+0x32>
 8017e72:	9b03      	ldr	r3, [sp, #12]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	f000 80a9 	beq.w	8017fcc <GUI_Text_LAB_Measure+0x184>
		if(!old_nan){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 8017e7a:	4b4e      	ldr	r3, [pc, #312]	; (8017fb4 <GUI_Text_LAB_Measure+0x16c>)
 8017e7c:	781a      	ldrb	r2, [r3, #0]
 8017e7e:	469a      	mov	sl, r3
 8017e80:	b96a      	cbnz	r2, 8017e9e <GUI_Text_LAB_Measure+0x56>
 8017e82:	2163      	movs	r1, #99	; 0x63
 8017e84:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 8017e88:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8017e8c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8017e90:	9100      	str	r1, [sp, #0]
 8017e92:	b29b      	uxth	r3, r3
 8017e94:	b292      	uxth	r2, r2
 8017e96:	4629      	mov	r1, r5
 8017e98:	b280      	uxth	r0, r0
 8017e9a:	f006 fa3e 	bl	801e31a <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 8017e9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017ea2:	f006 fc69 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8017ea6:	f104 0987 	add.w	r9, r4, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 8017eaa:	2063      	movs	r0, #99	; 0x63
 8017eac:	f006 fc6a 	bl	801e784 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8017eb0:	fa1f f989 	uxth.w	r9, r9
 8017eb4:	4840      	ldr	r0, [pc, #256]	; (8017fb8 <GUI_Text_LAB_Measure+0x170>)
 8017eb6:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
 8017eba:	f006 fc57 	bl	801e76c <TFT_SetFont>
 8017ebe:	fa1f f888 	uxth.w	r8, r8
 8017ec2:	222d      	movs	r2, #45	; 0x2d
 8017ec4:	4629      	mov	r1, r5
 8017ec6:	4648      	mov	r0, r9
 8017ec8:	f104 06b9 	add.w	r6, r4, #185	; 0xb9
 8017ecc:	f006 fd18 	bl	801e900 <TFT_DrawChar>
 8017ed0:	b2b6      	uxth	r6, r6
 8017ed2:	2220      	movs	r2, #32
 8017ed4:	4629      	mov	r1, r5
 8017ed6:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8017ed8:	f105 0723 	add.w	r7, r5, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8017edc:	f006 fd10 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8017ee0:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8017ee2:	222d      	movs	r2, #45	; 0x2d
 8017ee4:	4629      	mov	r1, r5
 8017ee6:	4630      	mov	r0, r6
 8017ee8:	f006 fd0a 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8017eec:	4639      	mov	r1, r7
 8017eee:	222d      	movs	r2, #45	; 0x2d
 8017ef0:	4648      	mov	r0, r9
 8017ef2:	f006 fd05 	bl	801e900 <TFT_DrawChar>
 8017ef6:	4639      	mov	r1, r7
 8017ef8:	2220      	movs	r2, #32
 8017efa:	4640      	mov	r0, r8
 8017efc:	f006 fd00 	bl	801e900 <TFT_DrawChar>
 8017f00:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8017f02:	f105 0746 	add.w	r7, r5, #70	; 0x46
 8017f06:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8017f08:	222d      	movs	r2, #45	; 0x2d
 8017f0a:	4630      	mov	r0, r6
 8017f0c:	f006 fcf8 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8017f10:	222d      	movs	r2, #45	; 0x2d
 8017f12:	4639      	mov	r1, r7
 8017f14:	4648      	mov	r0, r9
 8017f16:	f006 fcf3 	bl	801e900 <TFT_DrawChar>
 8017f1a:	2220      	movs	r2, #32
 8017f1c:	4639      	mov	r1, r7
 8017f1e:	4640      	mov	r0, r8
 8017f20:	f006 fcee 	bl	801e900 <TFT_DrawChar>
 8017f24:	222d      	movs	r2, #45	; 0x2d
 8017f26:	4639      	mov	r1, r7
 8017f28:	4630      	mov	r0, r6
 8017f2a:	f006 fce9 	bl	801e900 <TFT_DrawChar>
		old_nan = 1;
 8017f2e:	2301      	movs	r3, #1
 8017f30:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
		old_nan = 0;
	} 
	
	if(preGUI_screen_state != GUI_screen_state || GUI_screen_state == Color_Screen){
 8017f34:	4b21      	ldr	r3, [pc, #132]	; (8017fbc <GUI_Text_LAB_Measure+0x174>)
 8017f36:	781a      	ldrb	r2, [r3, #0]
 8017f38:	4b21      	ldr	r3, [pc, #132]	; (8017fc0 <GUI_Text_LAB_Measure+0x178>)
 8017f3a:	781b      	ldrb	r3, [r3, #0]
 8017f3c:	4293      	cmp	r3, r2
 8017f3e:	d101      	bne.n	8017f44 <GUI_Text_LAB_Measure+0xfc>
 8017f40:	2b05      	cmp	r3, #5
 8017f42:	d134      	bne.n	8017fae <GUI_Text_LAB_Measure+0x166>
			TFT_SetTextColor(TFT_White);
 8017f44:	f64f 70ff 	movw	r0, #65535	; 0xffff
			TFT_SetFont(&Font26EN_arch_digit);
			TFT_DrawChar(X+17, Y, '*');
 8017f48:	f104 0611 	add.w	r6, r4, #17
			TFT_SetTextColor(TFT_White);
 8017f4c:	f006 fc14 	bl	801e778 <TFT_SetTextColor>
			TFT_DrawChar(X+17, Y, '*');
 8017f50:	b2b6      	uxth	r6, r6
			TFT_SetFont(&Font26EN_arch_digit);
 8017f52:	481c      	ldr	r0, [pc, #112]	; (8017fc4 <GUI_Text_LAB_Measure+0x17c>)
			TFT_DrawChar(X+17, Y+35, '*');
 8017f54:	f105 0823 	add.w	r8, r5, #35	; 0x23
			TFT_SetFont(&Font26EN_arch_digit);
 8017f58:	f006 fc08 	bl	801e76c <TFT_SetFont>
			TFT_DrawChar(X+17, Y+35, '*');
 8017f5c:	fa1f f888 	uxth.w	r8, r8
			TFT_DrawChar(X+17, Y, '*');
 8017f60:	222a      	movs	r2, #42	; 0x2a
 8017f62:	4629      	mov	r1, r5
 8017f64:	4630      	mov	r0, r6
			TFT_DrawChar(X+17, Y+70, '*');
 8017f66:	f105 0746 	add.w	r7, r5, #70	; 0x46
			TFT_DrawChar(X+17, Y, '*');
 8017f6a:	f006 fcc9 	bl	801e900 <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 8017f6e:	b2bf      	uxth	r7, r7
			TFT_DrawChar(X+17, Y+35, '*');
 8017f70:	222a      	movs	r2, #42	; 0x2a
 8017f72:	4641      	mov	r1, r8
 8017f74:	4630      	mov	r0, r6
 8017f76:	f006 fcc3 	bl	801e900 <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 8017f7a:	222a      	movs	r2, #42	; 0x2a
 8017f7c:	4639      	mov	r1, r7
 8017f7e:	4630      	mov	r0, r6
 8017f80:	f006 fcbe 	bl	801e900 <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_big);
 8017f84:	480c      	ldr	r0, [pc, #48]	; (8017fb8 <GUI_Text_LAB_Measure+0x170>)
 8017f86:	f006 fbf1 	bl	801e76c <TFT_SetFont>
			TFT_DrawChar(X, Y, 'L'-33);
 8017f8a:	222b      	movs	r2, #43	; 0x2b
 8017f8c:	4629      	mov	r1, r5
 8017f8e:	4620      	mov	r0, r4
 8017f90:	f006 fcb6 	bl	801e900 <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_small);
 8017f94:	480c      	ldr	r0, [pc, #48]	; (8017fc8 <GUI_Text_LAB_Measure+0x180>)
 8017f96:	f006 fbe9 	bl	801e76c <TFT_SetFont>
			TFT_DrawChar(X, Y+35, 'a'-65);
 8017f9a:	2220      	movs	r2, #32
 8017f9c:	4641      	mov	r1, r8
 8017f9e:	4620      	mov	r0, r4
 8017fa0:	f006 fcae 	bl	801e900 <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'b'-65);}
 8017fa4:	2221      	movs	r2, #33	; 0x21
 8017fa6:	4639      	mov	r1, r7
 8017fa8:	4620      	mov	r0, r4
 8017faa:	f006 fca9 	bl	801e900 <TFT_DrawChar>
}	
 8017fae:	b009      	add	sp, #36	; 0x24
 8017fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fb4:	200052a9 	.word	0x200052a9
 8017fb8:	200001e8 	.word	0x200001e8
 8017fbc:	2000022a 	.word	0x2000022a
 8017fc0:	20005279 	.word	0x20005279
 8017fc4:	200001f0 	.word	0x200001f0
 8017fc8:	200001f8 	.word	0x200001f8
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017fcc:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8017fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017fd4:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8017fd8:	2800      	cmp	r0, #0
 8017fda:	bf14      	ite	ne
 8017fdc:	4610      	movne	r0, r2
 8017fde:	4618      	moveq	r0, r3
 8017fe0:	f006 fbca 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017fe4:	2063      	movs	r0, #99	; 0x63
 8017fe6:	f006 fbcd 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017fea:	488e      	ldr	r0, [pc, #568]	; (8018224 <GUI_Text_LAB_Measure+0x3dc>)
 8017fec:	f006 fbbe 	bl	801e76c <TFT_SetFont>
	if(ValueL < 0){ValueL *= -1; sign = 1;}
 8017ff0:	f1b8 0f00 	cmp.w	r8, #0
 8017ff4:	bfbd      	ittte	lt
 8017ff6:	f1c8 0800 	rsblt	r8, r8, #0
 8017ffa:	fa0f f888 	sxthlt.w	r8, r8
 8017ffe:	2301      	movlt	r3, #1
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8018000:	9b03      	ldrge	r3, [sp, #12]
	sprintf (buffer, "%d", ValueL);
 8018002:	4989      	ldr	r1, [pc, #548]	; (8018228 <GUI_Text_LAB_Measure+0x3e0>)
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8018004:	9305      	str	r3, [sp, #20]
	sprintf (buffer, "%d", ValueL);
 8018006:	4642      	mov	r2, r8
 8018008:	a806      	add	r0, sp, #24
 801800a:	f009 fec9 	bl	8021da0 <sprintf>
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 801800e:	f04f 0900 	mov.w	r9, #0
	sprintf (buffer, "%d", ValueL);
 8018012:	f04f 0b04 	mov.w	fp, #4
	uint32_t dec = 10;
 8018016:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 801801a:	26b4      	movs	r6, #180	; 0xb4
		if((ValueL/(dec)) >= 1.0)
 801801c:	fbb8 f0fa 	udiv	r0, r8, sl
 8018020:	f7e8 fa88 	bl	8000534 <__aeabi_ui2d>
 8018024:	2200      	movs	r2, #0
 8018026:	4b81      	ldr	r3, [pc, #516]	; (801822c <GUI_Text_LAB_Measure+0x3e4>)
 8018028:	f7e8 fd80 	bl	8000b2c <__aeabi_dcmpge>
 801802c:	b140      	cbz	r0, 8018040 <GUI_Text_LAB_Measure+0x1f8>
			dec *= 10;
 801802e:	230a      	movs	r3, #10
			delta_pos-=23;
 8018030:	3e17      	subs	r6, #23
			number++;
 8018032:	f109 0901 	add.w	r9, r9, #1
			dec *= 10;
 8018036:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 801803a:	b2f6      	uxtb	r6, r6
			number++;
 801803c:	fa5f f989 	uxtb.w	r9, r9
 8018040:	f10b 3bff 	add.w	fp, fp, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8018044:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
 8018048:	d1e8      	bne.n	801801c <GUI_Text_LAB_Measure+0x1d4>
	if(number < old_num_L || old_nan == 1 )
 801804a:	4b79      	ldr	r3, [pc, #484]	; (8018230 <GUI_Text_LAB_Measure+0x3e8>)
 801804c:	781a      	ldrb	r2, [r3, #0]
 801804e:	454a      	cmp	r2, r9
 8018050:	4698      	mov	r8, r3
 8018052:	d803      	bhi.n	801805c <GUI_Text_LAB_Measure+0x214>
 8018054:	4b77      	ldr	r3, [pc, #476]	; (8018234 <GUI_Text_LAB_Measure+0x3ec>)
 8018056:	781b      	ldrb	r3, [r3, #0]
 8018058:	2b01      	cmp	r3, #1
 801805a:	d10d      	bne.n	8018078 <GUI_Text_LAB_Measure+0x230>
		TFT_FillRectangle(X+40, Y, X+250, Y+25, TFT_Black_Bkgr);
 801805c:	2163      	movs	r1, #99	; 0x63
 801805e:	f105 0319 	add.w	r3, r5, #25
 8018062:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8018066:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801806a:	9100      	str	r1, [sp, #0]
 801806c:	b29b      	uxth	r3, r3
 801806e:	b292      	uxth	r2, r2
 8018070:	4629      	mov	r1, r5
 8018072:	b280      	uxth	r0, r0
 8018074:	f006 f951 	bl	801e31a <TFT_FillRectangle>
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 8018078:	9b05      	ldr	r3, [sp, #20]
	old_num_L = number;
 801807a:	f888 9000 	strb.w	r9, [r8]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 801807e:	b13b      	cbz	r3, 8018090 <GUI_Text_LAB_Measure+0x248>
 8018080:	f1a4 0012 	sub.w	r0, r4, #18
 8018084:	4430      	add	r0, r6
 8018086:	222d      	movs	r2, #45	; 0x2d
 8018088:	4629      	mov	r1, r5
 801808a:	b280      	uxth	r0, r0
 801808c:	f006 fc38 	bl	801e900 <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8018090:	19a0      	adds	r0, r4, r6
 8018092:	2303      	movs	r3, #3
 8018094:	aa06      	add	r2, sp, #24
 8018096:	4629      	mov	r1, r5
 8018098:	b280      	uxth	r0, r0
 801809a:	f006 fc89 	bl	801e9b0 <TFT_DisplayString>
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 801809e:	2f00      	cmp	r7, #0
 80180a0:	bfbc      	itt	lt
 80180a2:	427f      	neglt	r7, r7
 80180a4:	b23f      	sxthlt	r7, r7
	TFT_SetFont(&Font26EN_arch_digit);
 80180a6:	485f      	ldr	r0, [pc, #380]	; (8018224 <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 80180a8:	bfb4      	ite	lt
 80180aa:	f04f 0b01 	movlt.w	fp, #1
 80180ae:	f04f 0b00 	movge.w	fp, #0
	TFT_SetFont(&Font26EN_arch_digit);
 80180b2:	f006 fb5b 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%d", ValueA);
 80180b6:	463a      	mov	r2, r7
 80180b8:	495b      	ldr	r1, [pc, #364]	; (8018228 <GUI_Text_LAB_Measure+0x3e0>)
 80180ba:	a806      	add	r0, sp, #24
 80180bc:	f009 fe70 	bl	8021da0 <sprintf>
	number = 0;
 80180c0:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueA);
 80180c4:	f04f 0904 	mov.w	r9, #4
	dec = 10;
 80180c8:	f04f 0a0a 	mov.w	sl, #10
	delta_pos = 180;
 80180cc:	26b4      	movs	r6, #180	; 0xb4
		if((ValueA/(dec)) >= 1.0)
 80180ce:	fbb7 f0fa 	udiv	r0, r7, sl
 80180d2:	f7e8 fa2f 	bl	8000534 <__aeabi_ui2d>
 80180d6:	2200      	movs	r2, #0
 80180d8:	4b54      	ldr	r3, [pc, #336]	; (801822c <GUI_Text_LAB_Measure+0x3e4>)
 80180da:	f7e8 fd27 	bl	8000b2c <__aeabi_dcmpge>
 80180de:	b140      	cbz	r0, 80180f2 <GUI_Text_LAB_Measure+0x2aa>
			dec *= 10;
 80180e0:	230a      	movs	r3, #10
			delta_pos-=23;
 80180e2:	3e17      	subs	r6, #23
			number++;
 80180e4:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 80180e8:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80180ec:	b2f6      	uxtb	r6, r6
			number++;
 80180ee:	fa5f f888 	uxtb.w	r8, r8
 80180f2:	f109 39ff 	add.w	r9, r9, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 80180f6:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 80180fa:	d1e8      	bne.n	80180ce <GUI_Text_LAB_Measure+0x286>
	if(number < old_num_A || old_nan == 1 )
 80180fc:	4b4e      	ldr	r3, [pc, #312]	; (8018238 <GUI_Text_LAB_Measure+0x3f0>)
 80180fe:	781b      	ldrb	r3, [r3, #0]
 8018100:	4543      	cmp	r3, r8
 8018102:	f105 0723 	add.w	r7, r5, #35	; 0x23
 8018106:	d803      	bhi.n	8018110 <GUI_Text_LAB_Measure+0x2c8>
 8018108:	4b4a      	ldr	r3, [pc, #296]	; (8018234 <GUI_Text_LAB_Measure+0x3ec>)
 801810a:	781b      	ldrb	r3, [r3, #0]
 801810c:	2b01      	cmp	r3, #1
 801810e:	d10d      	bne.n	801812c <GUI_Text_LAB_Measure+0x2e4>
		TFT_FillRectangle(X+40, Y+35, X+250, Y+62, TFT_Black_Bkgr);
 8018110:	2163      	movs	r1, #99	; 0x63
 8018112:	f105 033e 	add.w	r3, r5, #62	; 0x3e
 8018116:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 801811a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801811e:	9100      	str	r1, [sp, #0]
 8018120:	b29b      	uxth	r3, r3
 8018122:	b292      	uxth	r2, r2
 8018124:	b2b9      	uxth	r1, r7
 8018126:	b280      	uxth	r0, r0
 8018128:	f006 f8f7 	bl	801e31a <TFT_FillRectangle>
	old_num_A = number;
 801812c:	4b42      	ldr	r3, [pc, #264]	; (8018238 <GUI_Text_LAB_Measure+0x3f0>)
 801812e:	f883 8000 	strb.w	r8, [r3]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y+35, '-'); sign = 0;}
 8018132:	f1bb 0f00 	cmp.w	fp, #0
 8018136:	d007      	beq.n	8018148 <GUI_Text_LAB_Measure+0x300>
 8018138:	f1a4 0012 	sub.w	r0, r4, #18
 801813c:	4430      	add	r0, r6
 801813e:	222d      	movs	r2, #45	; 0x2d
 8018140:	b2b9      	uxth	r1, r7
 8018142:	b280      	uxth	r0, r0
 8018144:	f006 fbdc 	bl	801e900 <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8018148:	19a0      	adds	r0, r4, r6
 801814a:	b2b9      	uxth	r1, r7
 801814c:	aa06      	add	r2, sp, #24
 801814e:	2303      	movs	r3, #3
 8018150:	b280      	uxth	r0, r0
 8018152:	f006 fc2d 	bl	801e9b0 <TFT_DisplayString>
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 8018156:	9b04      	ldr	r3, [sp, #16]
	TFT_SetFont(&Font26EN_arch_digit);
 8018158:	4832      	ldr	r0, [pc, #200]	; (8018224 <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 801815a:	2b00      	cmp	r3, #0
 801815c:	bfbf      	itttt	lt
 801815e:	425b      	neglt	r3, r3
 8018160:	b21b      	sxthlt	r3, r3
 8018162:	9304      	strlt	r3, [sp, #16]
 8018164:	f04f 0901 	movlt.w	r9, #1
 8018168:	bfa8      	it	ge
 801816a:	f04f 0900 	movge.w	r9, #0
	TFT_SetFont(&Font26EN_arch_digit);
 801816e:	f006 fafd 	bl	801e76c <TFT_SetFont>
	sprintf (buffer, "%d", ValueB);
 8018172:	9a04      	ldr	r2, [sp, #16]
 8018174:	492c      	ldr	r1, [pc, #176]	; (8018228 <GUI_Text_LAB_Measure+0x3e0>)
 8018176:	a806      	add	r0, sp, #24
 8018178:	f009 fe12 	bl	8021da0 <sprintf>
	 dec = 10;
 801817c:	f04f 080a 	mov.w	r8, #10
	sprintf (buffer, "%d", ValueB);
 8018180:	2704      	movs	r7, #4
		delta_pos = 180;
 8018182:	26b4      	movs	r6, #180	; 0xb4
			dec *= 10;
 8018184:	46c2      	mov	sl, r8
		if(abs((ValueB/(dec))) >= 1.0)
 8018186:	9b04      	ldr	r3, [sp, #16]
 8018188:	fbb3 f0f8 	udiv	r0, r3, r8
 801818c:	2800      	cmp	r0, #0
 801818e:	bfb8      	it	lt
 8018190:	4240      	neglt	r0, r0
 8018192:	f7e8 f9df 	bl	8000554 <__aeabi_i2d>
 8018196:	2200      	movs	r2, #0
 8018198:	4b24      	ldr	r3, [pc, #144]	; (801822c <GUI_Text_LAB_Measure+0x3e4>)
 801819a:	f7e8 fcc7 	bl	8000b2c <__aeabi_dcmpge>
 801819e:	b138      	cbz	r0, 80181b0 <GUI_Text_LAB_Measure+0x368>
			number++;
 80181a0:	9b03      	ldr	r3, [sp, #12]
 80181a2:	3301      	adds	r3, #1
			delta_pos-=23;
 80181a4:	3e17      	subs	r6, #23
			number++;
 80181a6:	b2db      	uxtb	r3, r3
			dec *= 10;
 80181a8:	fb0a f808 	mul.w	r8, sl, r8
			delta_pos-=23;
 80181ac:	b2f6      	uxtb	r6, r6
			number++;
 80181ae:	9303      	str	r3, [sp, #12]
 80181b0:	3f01      	subs	r7, #1
	for (uint8_t i = 1; i <= 4; i++)
 80181b2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80181b6:	d1e6      	bne.n	8018186 <GUI_Text_LAB_Measure+0x33e>
	if(number < old_num_B || old_nan == 1)
 80181b8:	4b20      	ldr	r3, [pc, #128]	; (801823c <GUI_Text_LAB_Measure+0x3f4>)
 80181ba:	9903      	ldr	r1, [sp, #12]
 80181bc:	781a      	ldrb	r2, [r3, #0]
 80181be:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8018234 <GUI_Text_LAB_Measure+0x3ec>
 80181c2:	428a      	cmp	r2, r1
 80181c4:	f105 0746 	add.w	r7, r5, #70	; 0x46
 80181c8:	469a      	mov	sl, r3
 80181ca:	d803      	bhi.n	80181d4 <GUI_Text_LAB_Measure+0x38c>
 80181cc:	f898 3000 	ldrb.w	r3, [r8]
 80181d0:	2b01      	cmp	r3, #1
 80181d2:	d10d      	bne.n	80181f0 <GUI_Text_LAB_Measure+0x3a8>
		TFT_FillRectangle(X+40, Y+70, X+250, Y+95, TFT_Black_Bkgr);
 80181d4:	2163      	movs	r1, #99	; 0x63
 80181d6:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 80181da:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80181de:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80181e2:	9100      	str	r1, [sp, #0]
 80181e4:	b29b      	uxth	r3, r3
 80181e6:	b292      	uxth	r2, r2
 80181e8:	b2b9      	uxth	r1, r7
 80181ea:	b280      	uxth	r0, r0
 80181ec:	f006 f895 	bl	801e31a <TFT_FillRectangle>
	old_num_B = number;
 80181f0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80181f4:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
 80181f8:	f1b9 0f00 	cmp.w	r9, #0
 80181fc:	d007      	beq.n	801820e <GUI_Text_LAB_Measure+0x3c6>
 80181fe:	f1a4 0012 	sub.w	r0, r4, #18
 8018202:	4430      	add	r0, r6
 8018204:	222d      	movs	r2, #45	; 0x2d
 8018206:	b2b9      	uxth	r1, r7
 8018208:	b280      	uxth	r0, r0
 801820a:	f006 fb79 	bl	801e900 <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 801820e:	19a0      	adds	r0, r4, r6
 8018210:	2303      	movs	r3, #3
 8018212:	aa06      	add	r2, sp, #24
 8018214:	b2b9      	uxth	r1, r7
 8018216:	b280      	uxth	r0, r0
 8018218:	f006 fbca 	bl	801e9b0 <TFT_DisplayString>
		old_nan = 0;
 801821c:	2300      	movs	r3, #0
 801821e:	f888 3000 	strb.w	r3, [r8]
 8018222:	e687      	b.n	8017f34 <GUI_Text_LAB_Measure+0xec>
 8018224:	200001f0 	.word	0x200001f0
 8018228:	08026a11 	.word	0x08026a11
 801822c:	3ff00000 	.word	0x3ff00000
 8018230:	20000240 	.word	0x20000240
 8018234:	200052a9 	.word	0x200052a9
 8018238:	2000023c 	.word	0x2000023c
 801823c:	2000023d 	.word	0x2000023d

08018240 <GUI_Battery_Level>:
			

			

void GUI_Battery_Level(uint16_t X, uint16_t Y, double charge)
{
 8018240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018244:	b085      	sub	sp, #20
	char buffer[5] = {0};
 8018246:	2300      	movs	r3, #0
	
	
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8018248:	f100 082d 	add.w	r8, r0, #45	; 0x2d
{
 801824c:	460c      	mov	r4, r1
 801824e:	4605      	mov	r5, r0
	char buffer[5] = {0};
 8018250:	9302      	str	r3, [sp, #8]
 8018252:	f88d 300c 	strb.w	r3, [sp, #12]
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8018256:	fa1f f888 	uxth.w	r8, r8
 801825a:	f101 031a 	add.w	r3, r1, #26
 801825e:	f241 3976 	movw	r9, #4982	; 0x1376
 8018262:	310a      	adds	r1, #10
 8018264:	300a      	adds	r0, #10
 8018266:	b29b      	uxth	r3, r3
 8018268:	4642      	mov	r2, r8
 801826a:	b289      	uxth	r1, r1
 801826c:	b280      	uxth	r0, r0
 801826e:	f8cd 9000 	str.w	r9, [sp]
{
 8018272:	ec57 6b10 	vmov	r6, r7, d0
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8018276:	f006 f850 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(X+45, Y+15, X+48, Y+20, TFT_Blue_Off); //small battery rect
 801827a:	f104 0314 	add.w	r3, r4, #20
 801827e:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8018282:	f104 010f 	add.w	r1, r4, #15
 8018286:	b29b      	uxth	r3, r3
 8018288:	b292      	uxth	r2, r2
 801828a:	b289      	uxth	r1, r1
 801828c:	4640      	mov	r0, r8
 801828e:	f8cd 9000 	str.w	r9, [sp]
 8018292:	f006 f842 	bl	801e31a <TFT_FillRectangle>

		if(charge < 12)
 8018296:	2200      	movs	r2, #0
 8018298:	4b4c      	ldr	r3, [pc, #304]	; (80183cc <GUI_Battery_Level+0x18c>)
 801829a:	4630      	mov	r0, r6
 801829c:	4639      	mov	r1, r7
 801829e:	f7e8 fc31 	bl	8000b04 <__aeabi_dcmplt>
 80182a2:	b188      	cbz	r0, 80182c8 <GUI_Battery_Level+0x88>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_Red);
 80182a4:	f104 0318 	add.w	r3, r4, #24
 80182a8:	f105 0213 	add.w	r2, r5, #19
 80182ac:	f104 010c 	add.w	r1, r4, #12
 80182b0:	f105 000f 	add.w	r0, r5, #15
 80182b4:	f44f 4e78 	mov.w	lr, #63488	; 0xf800
 80182b8:	f8cd e000 	str.w	lr, [sp]
 80182bc:	b29b      	uxth	r3, r3
 80182be:	b292      	uxth	r2, r2
 80182c0:	b289      	uxth	r1, r1
 80182c2:	b280      	uxth	r0, r0
 80182c4:	f006 f829 	bl	801e31a <TFT_FillRectangle>
		}		
		if(charge >= 12)
 80182c8:	2200      	movs	r2, #0
 80182ca:	4b40      	ldr	r3, [pc, #256]	; (80183cc <GUI_Battery_Level+0x18c>)
 80182cc:	4630      	mov	r0, r6
 80182ce:	4639      	mov	r1, r7
 80182d0:	f7e8 fc2c 	bl	8000b2c <__aeabi_dcmpge>
 80182d4:	b188      	cbz	r0, 80182fa <GUI_Battery_Level+0xba>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_White);
 80182d6:	f104 0318 	add.w	r3, r4, #24
 80182da:	f105 0213 	add.w	r2, r5, #19
 80182de:	f104 010c 	add.w	r1, r4, #12
 80182e2:	f105 000f 	add.w	r0, r5, #15
 80182e6:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80182ea:	f8cd e000 	str.w	lr, [sp]
 80182ee:	b29b      	uxth	r3, r3
 80182f0:	b292      	uxth	r2, r2
 80182f2:	b289      	uxth	r1, r1
 80182f4:	b280      	uxth	r0, r0
 80182f6:	f006 f810 	bl	801e31a <TFT_FillRectangle>
		}		
		if(charge >= 25)
 80182fa:	2200      	movs	r2, #0
 80182fc:	4b34      	ldr	r3, [pc, #208]	; (80183d0 <GUI_Battery_Level+0x190>)
 80182fe:	4630      	mov	r0, r6
 8018300:	4639      	mov	r1, r7
 8018302:	f7e8 fc13 	bl	8000b2c <__aeabi_dcmpge>
 8018306:	b188      	cbz	r0, 801832c <GUI_Battery_Level+0xec>
		{
			TFT_FillRectangle(X+22, Y+12, X+26, Y+24, TFT_White);
 8018308:	f104 0318 	add.w	r3, r4, #24
 801830c:	f105 021a 	add.w	r2, r5, #26
 8018310:	f104 010c 	add.w	r1, r4, #12
 8018314:	f105 0016 	add.w	r0, r5, #22
 8018318:	f64f 7eff 	movw	lr, #65535	; 0xffff
 801831c:	f8cd e000 	str.w	lr, [sp]
 8018320:	b29b      	uxth	r3, r3
 8018322:	b292      	uxth	r2, r2
 8018324:	b289      	uxth	r1, r1
 8018326:	b280      	uxth	r0, r0
 8018328:	f005 fff7 	bl	801e31a <TFT_FillRectangle>
		}		
		if(charge >= 50)
 801832c:	2200      	movs	r2, #0
 801832e:	4b29      	ldr	r3, [pc, #164]	; (80183d4 <GUI_Battery_Level+0x194>)
 8018330:	4630      	mov	r0, r6
 8018332:	4639      	mov	r1, r7
 8018334:	f7e8 fbfa 	bl	8000b2c <__aeabi_dcmpge>
 8018338:	b188      	cbz	r0, 801835e <GUI_Battery_Level+0x11e>
		{
			TFT_FillRectangle(X+29, Y+12, X+33, Y+24, TFT_White);
 801833a:	f104 0318 	add.w	r3, r4, #24
 801833e:	f105 0221 	add.w	r2, r5, #33	; 0x21
 8018342:	f104 010c 	add.w	r1, r4, #12
 8018346:	f105 001d 	add.w	r0, r5, #29
 801834a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 801834e:	f8cd e000 	str.w	lr, [sp]
 8018352:	b29b      	uxth	r3, r3
 8018354:	b292      	uxth	r2, r2
 8018356:	b289      	uxth	r1, r1
 8018358:	b280      	uxth	r0, r0
 801835a:	f005 ffde 	bl	801e31a <TFT_FillRectangle>
		}
		if(charge >= 85)
 801835e:	2200      	movs	r2, #0
 8018360:	4b1d      	ldr	r3, [pc, #116]	; (80183d8 <GUI_Battery_Level+0x198>)
 8018362:	4630      	mov	r0, r6
 8018364:	4639      	mov	r1, r7
 8018366:	f7e8 fbe1 	bl	8000b2c <__aeabi_dcmpge>
 801836a:	b188      	cbz	r0, 8018390 <GUI_Battery_Level+0x150>
		{
			TFT_FillRectangle(X+36, Y+12, X+40, Y+24, TFT_White);
 801836c:	f104 0318 	add.w	r3, r4, #24
 8018370:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8018374:	f104 010c 	add.w	r1, r4, #12
 8018378:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801837c:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8018380:	f8cd e000 	str.w	lr, [sp]
 8018384:	b29b      	uxth	r3, r3
 8018386:	b292      	uxth	r2, r2
 8018388:	b289      	uxth	r1, r1
 801838a:	b280      	uxth	r0, r0
 801838c:	f005 ffc5 	bl	801e31a <TFT_FillRectangle>
		}
		
		sprintf (buffer, "%.1f%%", charge);
 8018390:	4632      	mov	r2, r6
 8018392:	463b      	mov	r3, r7
 8018394:	4911      	ldr	r1, [pc, #68]	; (80183dc <GUI_Battery_Level+0x19c>)
 8018396:	a802      	add	r0, sp, #8
 8018398:	f009 fd02 	bl	8021da0 <sprintf>
		TFT_SetFont(&Font8);
 801839c:	4810      	ldr	r0, [pc, #64]	; (80183e0 <GUI_Battery_Level+0x1a0>)
 801839e:	f006 f9e5 	bl	801e76c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 80183a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80183a6:	f006 f9e7 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 80183aa:	2063      	movs	r0, #99	; 0x63
 80183ac:	f006 f9ea 	bl	801e784 <TFT_SetBackColor>
		TFT_DisplayString(X+52, Y+14, (uint8_t *)buffer, LEFT_MODE);
 80183b0:	f104 010e 	add.w	r1, r4, #14
 80183b4:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80183b8:	2303      	movs	r3, #3
 80183ba:	aa02      	add	r2, sp, #8
 80183bc:	b289      	uxth	r1, r1
 80183be:	b280      	uxth	r0, r0
 80183c0:	f006 faf6 	bl	801e9b0 <TFT_DisplayString>

}
 80183c4:	b005      	add	sp, #20
 80183c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183ca:	bf00      	nop
 80183cc:	40280000 	.word	0x40280000
 80183d0:	40390000 	.word	0x40390000
 80183d4:	40490000 	.word	0x40490000
 80183d8:	40554000 	.word	0x40554000
 80183dc:	080337e6 	.word	0x080337e6
 80183e0:	20000218 	.word	0x20000218

080183e4 <GUI_Axes_Locus_XY>:

void GUI_Axes_Locus_XY(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 80183e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80183e6:	1e86      	subs	r6, r0, #2
{
 80183e8:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80183ea:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80183ee:	b2b6      	uxth	r6, r6
 80183f0:	39fa      	subs	r1, #250	; 0xfa
{
 80183f2:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80183f4:	4623      	mov	r3, r4
 80183f6:	4602      	mov	r2, r0
 80183f8:	9700      	str	r7, [sp, #0]
 80183fa:	4630      	mov	r0, r6
 80183fc:	b289      	uxth	r1, r1
 80183fe:	f005 ff8c 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+XY2_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 8018402:	1ce3      	adds	r3, r4, #3
 8018404:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 8018408:	1c61      	adds	r1, r4, #1
 801840a:	4630      	mov	r0, r6
 801840c:	9700      	str	r7, [sp, #0]
 801840e:	b29b      	uxth	r3, r3
 8018410:	b292      	uxth	r2, r2
 8018412:	b289      	uxth	r1, r1
 8018414:	f005 ff81 	bl	801e31a <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-300/2, X_center+3, Y_center-300/2, TFT_White);
 8018418:	f1a4 0396 	sub.w	r3, r4, #150	; 0x96
 801841c:	b29b      	uxth	r3, r3
 801841e:	1cea      	adds	r2, r5, #3
 8018420:	1f68      	subs	r0, r5, #5
 8018422:	4619      	mov	r1, r3
 8018424:	9700      	str	r7, [sp, #0]
 8018426:	b292      	uxth	r2, r2
 8018428:	b280      	uxth	r0, r0
 801842a:	f005 ff19 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(X_center+295/2, Y_center-3, X_center+295/2, Y_center+6, TFT_White);
 801842e:	1da6      	adds	r6, r4, #6
 8018430:	f105 0293 	add.w	r2, r5, #147	; 0x93
 8018434:	b292      	uxth	r2, r2
 8018436:	b2b6      	uxth	r6, r6
 8018438:	1ee1      	subs	r1, r4, #3
 801843a:	4633      	mov	r3, r6
 801843c:	4610      	mov	r0, r2
 801843e:	b289      	uxth	r1, r1
 8018440:	9700      	str	r7, [sp, #0]
 8018442:	f005 ff0d 	bl	801e260 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 8018446:	4819      	ldr	r0, [pc, #100]	; (80184ac <GUI_Axes_Locus_XY+0xc8>)
 8018448:	f006 f990 	bl	801e76c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 801844c:	3c98      	subs	r4, #152	; 0x98
		TFT_SetTextColor(TFT_White);
 801844e:	4638      	mov	r0, r7
 8018450:	f006 f992 	bl	801e778 <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8018454:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 8018456:	2063      	movs	r0, #99	; 0x63
 8018458:	f006 f994 	bl	801e784 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 801845c:	4621      	mov	r1, r4
 801845e:	222e      	movs	r2, #46	; 0x2e
 8018460:	2004      	movs	r0, #4
 8018462:	f006 fa4d 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-300/2-2, '0');
 8018466:	4621      	mov	r1, r4
 8018468:	2230      	movs	r2, #48	; 0x30
 801846a:	2000      	movs	r0, #0
 801846c:	f006 fa48 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-300/2-2, '5');
 8018470:	4621      	mov	r1, r4
 8018472:	2235      	movs	r2, #53	; 0x35
 8018474:	2008      	movs	r0, #8
 8018476:	f006 fa43 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+295/2-6+4,  Y_center+6, '.');
 801847a:	f105 0091 	add.w	r0, r5, #145	; 0x91
 801847e:	4631      	mov	r1, r6
 8018480:	222e      	movs	r2, #46	; 0x2e
 8018482:	b280      	uxth	r0, r0
 8018484:	f006 fa3c 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+0,  Y_center+6, '0');
 8018488:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 801848c:	4631      	mov	r1, r6
 801848e:	2230      	movs	r2, #48	; 0x30
 8018490:	b280      	uxth	r0, r0
 8018492:	f006 fa35 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 8018496:	f105 0095 	add.w	r0, r5, #149	; 0x95
 801849a:	2235      	movs	r2, #53	; 0x35
 801849c:	4631      	mov	r1, r6
 801849e:	b280      	uxth	r0, r0
}
 80184a0:	b003      	add	sp, #12
 80184a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 80184a6:	f006 ba2b 	b.w	801e900 <TFT_DrawChar>
 80184aa:	bf00      	nop
 80184ac:	20000210 	.word	0x20000210

080184b0 <GUI_Axes_Locus_LUV>:

void GUI_Axes_Locus_LUV(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 80184b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80184b2:	1e86      	subs	r6, r0, #2
{
 80184b4:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80184b6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80184ba:	b2b6      	uxth	r6, r6
 80184bc:	39ea      	subs	r1, #234	; 0xea
{
 80184be:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80184c0:	4623      	mov	r3, r4
 80184c2:	4602      	mov	r2, r0
 80184c4:	9700      	str	r7, [sp, #0]
 80184c6:	4630      	mov	r0, r6
 80184c8:	b289      	uxth	r1, r1
 80184ca:	f005 ff26 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+LUV_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 80184ce:	1ce3      	adds	r3, r4, #3
 80184d0:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 80184d4:	1c61      	adds	r1, r4, #1
 80184d6:	4630      	mov	r0, r6
 80184d8:	9700      	str	r7, [sp, #0]
 80184da:	b29b      	uxth	r3, r3
 80184dc:	b292      	uxth	r2, r2
 80184de:	b289      	uxth	r1, r1
 80184e0:	f005 ff1b 	bl	801e31a <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-396/2, X_center+3, Y_center-396/2, TFT_White);
 80184e4:	f1a4 03c6 	sub.w	r3, r4, #198	; 0xc6
 80184e8:	b29b      	uxth	r3, r3
 80184ea:	1cea      	adds	r2, r5, #3
 80184ec:	1f68      	subs	r0, r5, #5
 80184ee:	4619      	mov	r1, r3
 80184f0:	9700      	str	r7, [sp, #0]
 80184f2:	b292      	uxth	r2, r2
 80184f4:	b280      	uxth	r0, r0
 80184f6:	f005 feb3 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(X_center+403/2, Y_center-3, X_center+403/2, Y_center+6, TFT_White);
 80184fa:	1da6      	adds	r6, r4, #6
 80184fc:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
 8018500:	b292      	uxth	r2, r2
 8018502:	b2b6      	uxth	r6, r6
 8018504:	1ee1      	subs	r1, r4, #3
 8018506:	4633      	mov	r3, r6
 8018508:	4610      	mov	r0, r2
 801850a:	b289      	uxth	r1, r1
 801850c:	9700      	str	r7, [sp, #0]
 801850e:	f005 fea7 	bl	801e260 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 8018512:	4819      	ldr	r0, [pc, #100]	; (8018578 <GUI_Axes_Locus_LUV+0xc8>)
 8018514:	f006 f92a 	bl	801e76c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8018518:	3cc8      	subs	r4, #200	; 0xc8
		TFT_SetTextColor(TFT_White);
 801851a:	4638      	mov	r0, r7
 801851c:	f006 f92c 	bl	801e778 <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8018520:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 8018522:	2063      	movs	r0, #99	; 0x63
 8018524:	f006 f92e 	bl	801e784 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8018528:	4621      	mov	r1, r4
 801852a:	222e      	movs	r2, #46	; 0x2e
 801852c:	2004      	movs	r0, #4
 801852e:	f006 f9e7 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-396/2-2, '0');
 8018532:	4621      	mov	r1, r4
 8018534:	2230      	movs	r2, #48	; 0x30
 8018536:	2000      	movs	r0, #0
 8018538:	f006 f9e2 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-396/2-2, '5');
 801853c:	4621      	mov	r1, r4
 801853e:	2235      	movs	r2, #53	; 0x35
 8018540:	2008      	movs	r0, #8
 8018542:	f006 f9dd 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+403/2-6+4,  Y_center+6, '.');
 8018546:	f105 00c7 	add.w	r0, r5, #199	; 0xc7
 801854a:	4631      	mov	r1, r6
 801854c:	222e      	movs	r2, #46	; 0x2e
 801854e:	b280      	uxth	r0, r0
 8018550:	f006 f9d6 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+0,  Y_center+6, '0');
 8018554:	f105 00c3 	add.w	r0, r5, #195	; 0xc3
 8018558:	4631      	mov	r1, r6
 801855a:	2230      	movs	r2, #48	; 0x30
 801855c:	b280      	uxth	r0, r0
 801855e:	f006 f9cf 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 8018562:	f105 00cb 	add.w	r0, r5, #203	; 0xcb
 8018566:	2235      	movs	r2, #53	; 0x35
 8018568:	4631      	mov	r1, r6
 801856a:	b280      	uxth	r0, r0
}
 801856c:	b003      	add	sp, #12
 801856e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 8018572:	f006 b9c5 	b.w	801e900 <TFT_DrawChar>
 8018576:	bf00      	nop
 8018578:	20000210 	.word	0x20000210

0801857c <GUI_Axes_Locus_Lab>:

void GUI_Axes_Locus_Lab(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 801857c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8018580:	f100 037d 	add.w	r3, r0, #125	; 0x7d
{
 8018584:	b087      	sub	sp, #28
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8018586:	b29b      	uxth	r3, r3
{
 8018588:	4604      	mov	r4, r0
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 801858a:	f64f 77ff 	movw	r7, #65535	; 0xffff
{
 801858e:	460d      	mov	r5, r1
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8018590:	9303      	str	r3, [sp, #12]
 8018592:	387f      	subs	r0, #127	; 0x7f
 8018594:	1c4b      	adds	r3, r1, #1
 8018596:	3901      	subs	r1, #1
 8018598:	9a03      	ldr	r2, [sp, #12]
 801859a:	9700      	str	r7, [sp, #0]
 801859c:	b29b      	uxth	r3, r3
 801859e:	b289      	uxth	r1, r1
 80185a0:	b280      	uxth	r0, r0
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 80185a2:	f1a5 067d 	sub.w	r6, r5, #125	; 0x7d
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 80185a6:	f005 feb8 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 80185aa:	b2b6      	uxth	r6, r6
 80185ac:	f105 037d 	add.w	r3, r5, #125	; 0x7d
 80185b0:	1ea0      	subs	r0, r4, #2
 80185b2:	b29b      	uxth	r3, r3
 80185b4:	4622      	mov	r2, r4
 80185b6:	4631      	mov	r1, r6
 80185b8:	9700      	str	r7, [sp, #0]
 80185ba:	b280      	uxth	r0, r0
 80185bc:	9304      	str	r3, [sp, #16]
 80185be:	f005 feac 	bl	801e31a <TFT_FillRectangle>
		

		TFT_SetFont(&Font6EN_arch_big);
 80185c2:	4850      	ldr	r0, [pc, #320]	; (8018704 <GUI_Axes_Locus_Lab+0x188>)
 80185c4:	f006 f8d2 	bl	801e76c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 80185c8:	4638      	mov	r0, r7
 80185ca:	f006 f8d5 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 80185ce:	2063      	movs	r0, #99	; 0x63
 80185d0:	f006 f8d8 	bl	801e784 <TFT_SetBackColor>
	
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80185d4:	f1a4 031e 	sub.w	r3, r4, #30
 80185d8:	b29b      	uxth	r3, r3
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 80185da:	f1a4 0b19 	sub.w	fp, r4, #25
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80185de:	4618      	mov	r0, r3
 80185e0:	4631      	mov	r1, r6
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 80185e2:	fa1f fb8b 	uxth.w	fp, fp
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80185e6:	222b      	movs	r2, #43	; 0x2b
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 80185e8:	f1a4 0a14 	sub.w	sl, r4, #20
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80185ec:	9305      	str	r3, [sp, #20]
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 80185ee:	fa1f fa8a 	uxth.w	sl, sl
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80185f2:	f006 f985 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 80185f6:	f1a4 090e 	sub.w	r9, r4, #14
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 80185fa:	4631      	mov	r1, r6
 80185fc:	4658      	mov	r0, fp
 80185fe:	2231      	movs	r2, #49	; 0x31
 8018600:	f006 f97e 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8018604:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 8018608:	4631      	mov	r1, r6
 801860a:	4650      	mov	r0, sl
 801860c:	2232      	movs	r2, #50	; 0x32
 801860e:	f006 f977 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8018612:	4631      	mov	r1, r6
 8018614:	4648      	mov	r0, r9
 8018616:	2238      	movs	r2, #56	; 0x38
 8018618:	f006 f972 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(X_center-35+5,  Y_center+LAB_LOCUS_SIZEY/2-8, '-');
 801861c:	f105 0875 	add.w	r8, r5, #117	; 0x75
 8018620:	9b05      	ldr	r3, [sp, #20]
 8018622:	fa1f f888 	uxth.w	r8, r8
 8018626:	4618      	mov	r0, r3
 8018628:	4641      	mov	r1, r8
 801862a:	222d      	movs	r2, #45	; 0x2d
 801862c:	f006 f968 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+10,  Y_center+LAB_LOCUS_SIZEY/2-8, '1');
 8018630:	4641      	mov	r1, r8
 8018632:	4658      	mov	r0, fp
 8018634:	2231      	movs	r2, #49	; 0x31
 8018636:	f006 f963 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+15,  Y_center+LAB_LOCUS_SIZEY/2-8, '2');
 801863a:	4641      	mov	r1, r8
 801863c:	4650      	mov	r0, sl
 801863e:	2232      	movs	r2, #50	; 0x32
 8018640:	f006 f95e 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 8018644:	4641      	mov	r1, r8
		
		TFT_DrawChar(0,  Y_center-11, '-');
 8018646:	f1a5 080b 	sub.w	r8, r5, #11
 801864a:	fa1f f888 	uxth.w	r8, r8
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 801864e:	4648      	mov	r0, r9
 8018650:	2238      	movs	r2, #56	; 0x38
 8018652:	f006 f955 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-11, '-');
 8018656:	4641      	mov	r1, r8
 8018658:	222d      	movs	r2, #45	; 0x2d
 801865a:	2000      	movs	r0, #0
 801865c:	f006 f950 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(5,  Y_center-11, '1');
 8018660:	4641      	mov	r1, r8
 8018662:	2231      	movs	r2, #49	; 0x31
 8018664:	2005      	movs	r0, #5
 8018666:	f006 f94b 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(10,  Y_center-11, '2');
 801866a:	4641      	mov	r1, r8
 801866c:	2232      	movs	r2, #50	; 0x32
 801866e:	200a      	movs	r0, #10
 8018670:	f006 f946 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(16,  Y_center-11, '8');
 8018674:	4641      	mov	r1, r8
 8018676:	2238      	movs	r2, #56	; 0x38
 8018678:	2010      	movs	r0, #16
 801867a:	f006 f941 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(260-15,  Y_center-11, '+');
 801867e:	4641      	mov	r1, r8
 8018680:	222b      	movs	r2, #43	; 0x2b
 8018682:	20f5      	movs	r0, #245	; 0xf5
 8018684:	f006 f93c 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(260-10,  Y_center-11, '1');
 8018688:	4641      	mov	r1, r8
 801868a:	2231      	movs	r2, #49	; 0x31
 801868c:	20fa      	movs	r0, #250	; 0xfa
 801868e:	f006 f937 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(260-5,  Y_center-11, '2');
 8018692:	4641      	mov	r1, r8
 8018694:	2232      	movs	r2, #50	; 0x32
 8018696:	20ff      	movs	r0, #255	; 0xff
 8018698:	f006 f932 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(260,  Y_center-11, '8');
		
		//		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/4, X_center+3, Y_center-LAB_LOCUS_SIZEY/4, TFT_White);
//		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/4, X_center+3, Y_center+LAB_LOCUS_SIZEY/4, TFT_White);
		
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 801869c:	f104 0903 	add.w	r9, r4, #3
		TFT_DrawChar(260,  Y_center-11, '8');
 80186a0:	4641      	mov	r1, r8
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 80186a2:	f1a4 0805 	sub.w	r8, r4, #5
 80186a6:	fa1f f888 	uxth.w	r8, r8
 80186aa:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(260,  Y_center-11, '8');
 80186ae:	2238      	movs	r2, #56	; 0x38
 80186b0:	f44f 7082 	mov.w	r0, #260	; 0x104
 80186b4:	f006 f924 	bl	801e900 <TFT_DrawChar>
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 80186b8:	4633      	mov	r3, r6
 80186ba:	464a      	mov	r2, r9
 80186bc:	4631      	mov	r1, r6
 80186be:	4640      	mov	r0, r8
 80186c0:	9700      	str	r7, [sp, #0]
 80186c2:	f005 fdcd 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/2, X_center+3, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);
 80186c6:	9b04      	ldr	r3, [sp, #16]
 80186c8:	9700      	str	r7, [sp, #0]
 80186ca:	464a      	mov	r2, r9
 80186cc:	4619      	mov	r1, r3
 80186ce:	4640      	mov	r0, r8
 80186d0:	f005 fdc6 	bl	801e260 <TFT_DrawLine>
	
//		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/4, Y_center-3, X_center-LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
//		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/4, Y_center-3, X_center+LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
		
		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/2+1, Y_center-3, X_center-LAB_LOCUS_SIZEX/2+1, Y_center+6, TFT_White);
 80186d4:	f1a4 027c 	sub.w	r2, r4, #124	; 0x7c
 80186d8:	1eec      	subs	r4, r5, #3
 80186da:	3506      	adds	r5, #6
 80186dc:	b292      	uxth	r2, r2
 80186de:	b2a4      	uxth	r4, r4
 80186e0:	b2ad      	uxth	r5, r5
 80186e2:	462b      	mov	r3, r5
 80186e4:	4621      	mov	r1, r4
 80186e6:	4610      	mov	r0, r2
 80186e8:	9700      	str	r7, [sp, #0]
 80186ea:	f005 fdb9 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/2, Y_center-3, X_center+LAB_LOCUS_SIZEX/2, Y_center+6, TFT_White);
 80186ee:	9a03      	ldr	r2, [sp, #12]
 80186f0:	9700      	str	r7, [sp, #0]
 80186f2:	462b      	mov	r3, r5
 80186f4:	4621      	mov	r1, r4
 80186f6:	4610      	mov	r0, r2
 80186f8:	f005 fdb2 	bl	801e260 <TFT_DrawLine>
}
 80186fc:	b007      	add	sp, #28
 80186fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018702:	bf00      	nop
 8018704:	20000210 	.word	0x20000210

08018708 <GUI_Text_CIE_XYZ>:
#include "stdio.h"
#include "GUI_Text_Elements_EN.h"


void GUI_Text_CIE_XYZ(uint16_t X, uint16_t Y)
{
 8018708:	b538      	push	{r3, r4, r5, lr}
 801870a:	4604      	mov	r4, r0
TFT_SetTextColor(TFT_White);
 801870c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018710:	460d      	mov	r5, r1
TFT_SetTextColor(TFT_White);
 8018712:	f006 f831 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018716:	2063      	movs	r0, #99	; 0x63
 8018718:	f006 f834 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801871c:	4816      	ldr	r0, [pc, #88]	; (8018778 <GUI_Text_CIE_XYZ+0x70>)
 801871e:	f006 f825 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018722:	4629      	mov	r1, r5
 8018724:	4620      	mov	r0, r4
 8018726:	2243      	movs	r2, #67	; 0x43
 8018728:	f006 f8ea 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 801872c:	f104 000d 	add.w	r0, r4, #13
 8018730:	4629      	mov	r1, r5
 8018732:	2249      	movs	r2, #73	; 0x49
 8018734:	b280      	uxth	r0, r0
 8018736:	f006 f8e3 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 801873a:	f104 001b 	add.w	r0, r4, #27
 801873e:	4629      	mov	r1, r5
 8018740:	2245      	movs	r2, #69	; 0x45
 8018742:	b280      	uxth	r0, r0
 8018744:	f006 f8dc 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'X');
 8018748:	f104 0031 	add.w	r0, r4, #49	; 0x31
 801874c:	4629      	mov	r1, r5
 801874e:	2258      	movs	r2, #88	; 0x58
 8018750:	b280      	uxth	r0, r0
 8018752:	f006 f8d5 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y, 'Y');
 8018756:	f104 0041 	add.w	r0, r4, #65	; 0x41
 801875a:	4629      	mov	r1, r5
 801875c:	2259      	movs	r2, #89	; 0x59
 801875e:	b280      	uxth	r0, r0
 8018760:	f006 f8ce 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y, 'Z');
 8018764:	f104 0051 	add.w	r0, r4, #81	; 0x51
 8018768:	4629      	mov	r1, r5
 801876a:	225a      	movs	r2, #90	; 0x5a
 801876c:	b280      	uxth	r0, r0
}
 801876e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+81, Y, 'Z');
 8018772:	f006 b8c5 	b.w	801e900 <TFT_DrawChar>
 8018776:	bf00      	nop
 8018778:	200001b0 	.word	0x200001b0

0801877c <GUI_Text_CIE_xy_1931>:
	TFT_DrawChar(X+49, Y+1, 'x');
	TFT_DrawChar(X+72, Y+1, 'y');
}

void GUI_Text_CIE_xy_1931(uint16_t X, uint16_t Y)
{
 801877c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801877e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 8018780:	4f2c      	ldr	r7, [pc, #176]	; (8018834 <GUI_Text_CIE_xy_1931+0xb8>)
	TFT_SetTextColor(TFT_White);
 8018782:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018786:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018788:	f005 fff6 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801878c:	2063      	movs	r0, #99	; 0x63
 801878e:	f005 fff9 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018792:	4638      	mov	r0, r7
 8018794:	f005 ffea 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018798:	4629      	mov	r1, r5
 801879a:	4620      	mov	r0, r4
 801879c:	2243      	movs	r2, #67	; 0x43
 801879e:	f006 f8af 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80187a2:	f104 000d 	add.w	r0, r4, #13
 80187a6:	4629      	mov	r1, r5
 80187a8:	2249      	movs	r2, #73	; 0x49
 80187aa:	b280      	uxth	r0, r0
 80187ac:	f006 f8a8 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80187b0:	f104 001b 	add.w	r0, r4, #27
 80187b4:	4629      	mov	r1, r5
 80187b6:	2245      	movs	r2, #69	; 0x45
 80187b8:	b280      	uxth	r0, r0
 80187ba:	f006 f8a1 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 80187be:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80187c2:	4629      	mov	r1, r5
 80187c4:	222c      	movs	r2, #44	; 0x2c
 80187c6:	b280      	uxth	r0, r0
 80187c8:	f006 f89a 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 80187cc:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 80187ce:	481a      	ldr	r0, [pc, #104]	; (8018838 <GUI_Text_CIE_xy_1931+0xbc>)
 80187d0:	f005 ffcc 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 80187d4:	b2b6      	uxth	r6, r6
 80187d6:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80187da:	4631      	mov	r1, r6
 80187dc:	2278      	movs	r2, #120	; 0x78
 80187de:	b280      	uxth	r0, r0
 80187e0:	f006 f88e 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 80187e4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80187e8:	4631      	mov	r1, r6
 80187ea:	2279      	movs	r2, #121	; 0x79
 80187ec:	b280      	uxth	r0, r0
 80187ee:	f006 f887 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80187f2:	4638      	mov	r0, r7
 80187f4:	f005 ffba 	bl	801e76c <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 80187f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80187fc:	4629      	mov	r1, r5
 80187fe:	2231      	movs	r2, #49	; 0x31
 8018800:	b280      	uxth	r0, r0
 8018802:	f006 f87d 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+133, Y, '1');
 8018806:	f104 0085 	add.w	r0, r4, #133	; 0x85
 801880a:	4629      	mov	r1, r5
 801880c:	2231      	movs	r2, #49	; 0x31
 801880e:	b280      	uxth	r0, r0
 8018810:	f006 f876 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 8018814:	f104 0069 	add.w	r0, r4, #105	; 0x69
 8018818:	4629      	mov	r1, r5
 801881a:	2239      	movs	r2, #57	; 0x39
 801881c:	b280      	uxth	r0, r0
 801881e:	f006 f86f 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+121, Y, '3');
 8018822:	f104 0079 	add.w	r0, r4, #121	; 0x79
 8018826:	4629      	mov	r1, r5
 8018828:	2233      	movs	r2, #51	; 0x33
 801882a:	b280      	uxth	r0, r0


}
 801882c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+121, Y, '3');
 8018830:	f006 b866 	b.w	801e900 <TFT_DrawChar>
 8018834:	200001b0 	.word	0x200001b0
 8018838:	200001c0 	.word	0x200001c0

0801883c <GUI_Text_CIE_xy_1964>:

void GUI_Text_CIE_xy_1964(uint16_t X, uint16_t Y)
{
 801883c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801883e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 8018840:	4f2c      	ldr	r7, [pc, #176]	; (80188f4 <GUI_Text_CIE_xy_1964+0xb8>)
	TFT_SetTextColor(TFT_White);
 8018842:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018846:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018848:	f005 ff96 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801884c:	2063      	movs	r0, #99	; 0x63
 801884e:	f005 ff99 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018852:	4638      	mov	r0, r7
 8018854:	f005 ff8a 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018858:	4629      	mov	r1, r5
 801885a:	4620      	mov	r0, r4
 801885c:	2243      	movs	r2, #67	; 0x43
 801885e:	f006 f84f 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8018862:	f104 000d 	add.w	r0, r4, #13
 8018866:	4629      	mov	r1, r5
 8018868:	2249      	movs	r2, #73	; 0x49
 801886a:	b280      	uxth	r0, r0
 801886c:	f006 f848 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8018870:	f104 001b 	add.w	r0, r4, #27
 8018874:	4629      	mov	r1, r5
 8018876:	2245      	movs	r2, #69	; 0x45
 8018878:	b280      	uxth	r0, r0
 801887a:	f006 f841 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 801887e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8018882:	4629      	mov	r1, r5
 8018884:	222c      	movs	r2, #44	; 0x2c
 8018886:	b280      	uxth	r0, r0
 8018888:	f006 f83a 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 801888c:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 801888e:	481a      	ldr	r0, [pc, #104]	; (80188f8 <GUI_Text_CIE_xy_1964+0xbc>)
 8018890:	f005 ff6c 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8018894:	b2b6      	uxth	r6, r6
 8018896:	f104 0031 	add.w	r0, r4, #49	; 0x31
 801889a:	4631      	mov	r1, r6
 801889c:	2278      	movs	r2, #120	; 0x78
 801889e:	b280      	uxth	r0, r0
 80188a0:	f006 f82e 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 80188a4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80188a8:	4631      	mov	r1, r6
 80188aa:	2279      	movs	r2, #121	; 0x79
 80188ac:	b280      	uxth	r0, r0
 80188ae:	f006 f827 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80188b2:	4638      	mov	r0, r7
 80188b4:	f005 ff5a 	bl	801e76c <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 80188b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80188bc:	4629      	mov	r1, r5
 80188be:	2231      	movs	r2, #49	; 0x31
 80188c0:	b280      	uxth	r0, r0
 80188c2:	f006 f81d 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 80188c6:	f104 0069 	add.w	r0, r4, #105	; 0x69
 80188ca:	4629      	mov	r1, r5
 80188cc:	2239      	movs	r2, #57	; 0x39
 80188ce:	b280      	uxth	r0, r0
 80188d0:	f006 f816 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y, '6');
 80188d4:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80188d8:	4629      	mov	r1, r5
 80188da:	2236      	movs	r2, #54	; 0x36
 80188dc:	b280      	uxth	r0, r0
 80188de:	f006 f80f 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+135, Y, '4');
 80188e2:	f104 0087 	add.w	r0, r4, #135	; 0x87
 80188e6:	4629      	mov	r1, r5
 80188e8:	2234      	movs	r2, #52	; 0x34
 80188ea:	b280      	uxth	r0, r0
}
 80188ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+135, Y, '4');
 80188f0:	f006 b806 	b.w	801e900 <TFT_DrawChar>
 80188f4:	200001b0 	.word	0x200001b0
 80188f8:	200001c0 	.word	0x200001c0

080188fc <GUI_Text_CIE_Luv>:



void GUI_Text_CIE_Luv(uint16_t X, uint16_t Y)
{
 80188fc:	b538      	push	{r3, r4, r5, lr}
 80188fe:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018900:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018904:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018906:	f005 ff37 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801890a:	2063      	movs	r0, #99	; 0x63
 801890c:	f005 ff3a 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018910:	481f      	ldr	r0, [pc, #124]	; (8018990 <GUI_Text_CIE_Luv+0x94>)
 8018912:	f005 ff2b 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018916:	4621      	mov	r1, r4
 8018918:	4628      	mov	r0, r5
 801891a:	2243      	movs	r2, #67	; 0x43
 801891c:	f005 fff0 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8018920:	f105 000d 	add.w	r0, r5, #13
 8018924:	4621      	mov	r1, r4
 8018926:	2249      	movs	r2, #73	; 0x49
 8018928:	b280      	uxth	r0, r0
 801892a:	f005 ffe9 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 801892e:	f105 001b 	add.w	r0, r5, #27
 8018932:	4621      	mov	r1, r4
 8018934:	2245      	movs	r2, #69	; 0x45
 8018936:	b280      	uxth	r0, r0
 8018938:	f005 ffe2 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 801893c:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8018940:	4621      	mov	r1, r4
 8018942:	224c      	movs	r2, #76	; 0x4c
 8018944:	b280      	uxth	r0, r0
 8018946:	f005 ffdb 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '('-1);
 801894a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 801894e:	4621      	mov	r1, r4
 8018950:	2227      	movs	r2, #39	; 0x27
 8018952:	b280      	uxth	r0, r0
 8018954:	f005 ffd4 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+106, Y, '('-1);
 8018958:	f105 006a 	add.w	r0, r5, #106	; 0x6a
 801895c:	4621      	mov	r1, r4
 801895e:	2227      	movs	r2, #39	; 0x27
 8018960:	b280      	uxth	r0, r0
 8018962:	f005 ffcd 	bl	801e900 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'u');
 8018966:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8018968:	480a      	ldr	r0, [pc, #40]	; (8018994 <GUI_Text_CIE_Luv+0x98>)
 801896a:	f005 feff 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'u');
 801896e:	b2a4      	uxth	r4, r4
 8018970:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8018974:	4621      	mov	r1, r4
 8018976:	2275      	movs	r2, #117	; 0x75
 8018978:	b280      	uxth	r0, r0
 801897a:	f005 ffc1 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'v');
 801897e:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 8018982:	4621      	mov	r1, r4
 8018984:	2276      	movs	r2, #118	; 0x76
 8018986:	b280      	uxth	r0, r0
}
 8018988:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'v');
 801898c:	f005 bfb8 	b.w	801e900 <TFT_DrawChar>
 8018990:	200001b0 	.word	0x200001b0
 8018994:	200001c0 	.word	0x200001c0

08018998 <GUI_Text_CIE_Lab>:

void GUI_Text_CIE_Lab(uint16_t X, uint16_t Y)
{
 8018998:	b538      	push	{r3, r4, r5, lr}
 801899a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801899c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80189a0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80189a2:	f005 fee9 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80189a6:	2063      	movs	r0, #99	; 0x63
 80189a8:	f005 feec 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80189ac:	481f      	ldr	r0, [pc, #124]	; (8018a2c <GUI_Text_CIE_Lab+0x94>)
 80189ae:	f005 fedd 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80189b2:	4621      	mov	r1, r4
 80189b4:	4628      	mov	r0, r5
 80189b6:	2243      	movs	r2, #67	; 0x43
 80189b8:	f005 ffa2 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80189bc:	f105 000d 	add.w	r0, r5, #13
 80189c0:	4621      	mov	r1, r4
 80189c2:	2249      	movs	r2, #73	; 0x49
 80189c4:	b280      	uxth	r0, r0
 80189c6:	f005 ff9b 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80189ca:	f105 001b 	add.w	r0, r5, #27
 80189ce:	4621      	mov	r1, r4
 80189d0:	2245      	movs	r2, #69	; 0x45
 80189d2:	b280      	uxth	r0, r0
 80189d4:	f005 ff94 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 80189d8:	f105 0031 	add.w	r0, r5, #49	; 0x31
 80189dc:	4621      	mov	r1, r4
 80189de:	224c      	movs	r2, #76	; 0x4c
 80189e0:	b280      	uxth	r0, r0
 80189e2:	f005 ff8d 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '*');
 80189e6:	f105 0050 	add.w	r0, r5, #80	; 0x50
 80189ea:	4621      	mov	r1, r4
 80189ec:	222a      	movs	r2, #42	; 0x2a
 80189ee:	b280      	uxth	r0, r0
 80189f0:	f005 ff86 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '*');
 80189f4:	f105 0069 	add.w	r0, r5, #105	; 0x69
 80189f8:	4621      	mov	r1, r4
 80189fa:	222a      	movs	r2, #42	; 0x2a
 80189fc:	b280      	uxth	r0, r0
 80189fe:	f005 ff7f 	bl	801e900 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'a');
 8018a02:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8018a04:	480a      	ldr	r0, [pc, #40]	; (8018a30 <GUI_Text_CIE_Lab+0x98>)
 8018a06:	f005 feb1 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'a');
 8018a0a:	b2a4      	uxth	r4, r4
 8018a0c:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8018a10:	4621      	mov	r1, r4
 8018a12:	2261      	movs	r2, #97	; 0x61
 8018a14:	b280      	uxth	r0, r0
 8018a16:	f005 ff73 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'b');
 8018a1a:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 8018a1e:	4621      	mov	r1, r4
 8018a20:	2262      	movs	r2, #98	; 0x62
 8018a22:	b280      	uxth	r0, r0
}
 8018a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'b');
 8018a28:	f005 bf6a 	b.w	801e900 <TFT_DrawChar>
 8018a2c:	200001b0 	.word	0x200001b0
 8018a30:	200001c0 	.word	0x200001c0

08018a34 <GUI_Text_Bluetooth>:

void GUI_Text_Bluetooth(uint16_t X, uint16_t Y)
{
 8018a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a36:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_small);
 8018a38:	4e29      	ldr	r6, [pc, #164]	; (8018ae0 <GUI_Text_Bluetooth+0xac>)
	TFT_SetTextColor(TFT_White);
 8018a3a:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018a3e:	460f      	mov	r7, r1
	TFT_SetTextColor(TFT_White);
 8018a40:	f005 fe9a 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018a44:	2063      	movs	r0, #99	; 0x63
 8018a46:	f005 fe9d 	bl	801e784 <TFT_SetBackColor>
	TFT_DrawChar(X+13, Y+2, 'l');
 8018a4a:	1cbd      	adds	r5, r7, #2
	TFT_SetFont(&Font16EN_arch_small);
 8018a4c:	4630      	mov	r0, r6
	TFT_DrawChar(X+13, Y+2, 'l');
 8018a4e:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16EN_arch_small);
 8018a50:	f005 fe8c 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'l');
 8018a54:	f104 000d 	add.w	r0, r4, #13
 8018a58:	4629      	mov	r1, r5
 8018a5a:	226c      	movs	r2, #108	; 0x6c
 8018a5c:	b280      	uxth	r0, r0
 8018a5e:	f005 ff4f 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 't');
 8018a62:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 8018a66:	4629      	mov	r1, r5
 8018a68:	2274      	movs	r2, #116	; 0x74
 8018a6a:	b280      	uxth	r0, r0
 8018a6c:	f005 ff48 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y+2, 't');
 8018a70:	f104 0051 	add.w	r0, r4, #81	; 0x51
 8018a74:	4629      	mov	r1, r5
 8018a76:	2274      	movs	r2, #116	; 0x74
 8018a78:	b280      	uxth	r0, r0
 8018a7a:	f005 ff41 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8018a7e:	4819      	ldr	r0, [pc, #100]	; (8018ae4 <GUI_Text_Bluetooth+0xb0>)
 8018a80:	f005 fe74 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'B');
 8018a84:	4639      	mov	r1, r7
 8018a86:	2242      	movs	r2, #66	; 0x42
 8018a88:	4620      	mov	r0, r4
 8018a8a:	f005 ff39 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8018a8e:	4630      	mov	r0, r6
 8018a90:	f005 fe6c 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+23, Y+2, 'u');
 8018a94:	f104 0017 	add.w	r0, r4, #23
 8018a98:	4629      	mov	r1, r5
 8018a9a:	2275      	movs	r2, #117	; 0x75
 8018a9c:	b280      	uxth	r0, r0
 8018a9e:	f005 ff2f 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+36, Y+2, 'e');
 8018aa2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8018aa6:	4629      	mov	r1, r5
 8018aa8:	2265      	movs	r2, #101	; 0x65
 8018aaa:	b280      	uxth	r0, r0
 8018aac:	f005 ff28 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'o');
 8018ab0:	f104 0039 	add.w	r0, r4, #57	; 0x39
 8018ab4:	4629      	mov	r1, r5
 8018ab6:	226f      	movs	r2, #111	; 0x6f
 8018ab8:	b280      	uxth	r0, r0
 8018aba:	f005 ff21 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'o');
 8018abe:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8018ac2:	4629      	mov	r1, r5
 8018ac4:	226f      	movs	r2, #111	; 0x6f
 8018ac6:	b280      	uxth	r0, r0
 8018ac8:	f005 ff1a 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y+2, 'h');
 8018acc:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 8018ad0:	4629      	mov	r1, r5
 8018ad2:	2268      	movs	r2, #104	; 0x68
 8018ad4:	b280      	uxth	r0, r0
}
 8018ad6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+91, Y+2, 'h');
 8018ada:	f005 bf11 	b.w	801e900 <TFT_DrawChar>
 8018ade:	bf00      	nop
 8018ae0:	200001c0 	.word	0x200001c0
 8018ae4:	200001b0 	.word	0x200001b0

08018ae8 <GUI_Text_A>:

void GUI_Text_A(uint16_t X, uint16_t Y)
{
 8018ae8:	b538      	push	{r3, r4, r5, lr}
 8018aea:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018aec:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018af0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018af2:	f005 fe41 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018af6:	2063      	movs	r0, #99	; 0x63
 8018af8:	f005 fe44 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018afc:	4804      	ldr	r0, [pc, #16]	; (8018b10 <GUI_Text_A+0x28>)
 8018afe:	f005 fe35 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'A');
 8018b02:	4629      	mov	r1, r5
 8018b04:	4620      	mov	r0, r4
 8018b06:	2241      	movs	r2, #65	; 0x41
}
 8018b08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'A');
 8018b0c:	f005 bef8 	b.w	801e900 <TFT_DrawChar>
 8018b10:	200001b0 	.word	0x200001b0

08018b14 <GUI_Text_D65>:

void GUI_Text_D65(uint16_t X, uint16_t Y)
{
 8018b14:	b538      	push	{r3, r4, r5, lr}
 8018b16:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018b18:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018b1c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018b1e:	f005 fe2b 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018b22:	2063      	movs	r0, #99	; 0x63
 8018b24:	f005 fe2e 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018b28:	480b      	ldr	r0, [pc, #44]	; (8018b58 <GUI_Text_D65+0x44>)
 8018b2a:	f005 fe1f 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8018b2e:	4629      	mov	r1, r5
 8018b30:	4620      	mov	r0, r4
 8018b32:	2244      	movs	r2, #68	; 0x44
 8018b34:	f005 fee4 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '6');
 8018b38:	f104 000f 	add.w	r0, r4, #15
 8018b3c:	4629      	mov	r1, r5
 8018b3e:	2236      	movs	r2, #54	; 0x36
 8018b40:	b280      	uxth	r0, r0
 8018b42:	f005 fedd 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, '5');
 8018b46:	f104 0020 	add.w	r0, r4, #32
 8018b4a:	4629      	mov	r1, r5
 8018b4c:	2235      	movs	r2, #53	; 0x35
 8018b4e:	b280      	uxth	r0, r0
}
 8018b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+32, Y, '5');
 8018b54:	f005 bed4 	b.w	801e900 <TFT_DrawChar>
 8018b58:	200001b0 	.word	0x200001b0

08018b5c <GUI_Text_C>:

void GUI_Text_C(uint16_t X, uint16_t Y)
{
 8018b5c:	b538      	push	{r3, r4, r5, lr}
 8018b5e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018b60:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018b64:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018b66:	f005 fe07 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018b6a:	2063      	movs	r0, #99	; 0x63
 8018b6c:	f005 fe0a 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018b70:	4804      	ldr	r0, [pc, #16]	; (8018b84 <GUI_Text_C+0x28>)
 8018b72:	f005 fdfb 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018b76:	4629      	mov	r1, r5
 8018b78:	4620      	mov	r0, r4
 8018b7a:	2243      	movs	r2, #67	; 0x43
}
 8018b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'C');
 8018b80:	f005 bebe 	b.w	801e900 <TFT_DrawChar>
 8018b84:	200001b0 	.word	0x200001b0

08018b88 <GUI_Text_D50>:

void GUI_Text_D50(uint16_t X, uint16_t Y)
{
 8018b88:	b538      	push	{r3, r4, r5, lr}
 8018b8a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018b8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018b90:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018b92:	f005 fdf1 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018b96:	2063      	movs	r0, #99	; 0x63
 8018b98:	f005 fdf4 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018b9c:	480b      	ldr	r0, [pc, #44]	; (8018bcc <GUI_Text_D50+0x44>)
 8018b9e:	f005 fde5 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8018ba2:	4629      	mov	r1, r5
 8018ba4:	4620      	mov	r0, r4
 8018ba6:	2244      	movs	r2, #68	; 0x44
 8018ba8:	f005 feaa 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 8018bac:	f104 000f 	add.w	r0, r4, #15
 8018bb0:	4629      	mov	r1, r5
 8018bb2:	2235      	movs	r2, #53	; 0x35
 8018bb4:	b280      	uxth	r0, r0
 8018bb6:	f005 fea3 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '0');
 8018bba:	f104 001f 	add.w	r0, r4, #31
 8018bbe:	4629      	mov	r1, r5
 8018bc0:	2230      	movs	r2, #48	; 0x30
 8018bc2:	b280      	uxth	r0, r0
}
 8018bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '0');
 8018bc8:	f005 be9a 	b.w	801e900 <TFT_DrawChar>
 8018bcc:	200001b0 	.word	0x200001b0

08018bd0 <GUI_Text_D55>:

void GUI_Text_D55(uint16_t X, uint16_t Y)
{
 8018bd0:	b538      	push	{r3, r4, r5, lr}
 8018bd2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018bd4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018bd8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018bda:	f005 fdcd 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018bde:	2063      	movs	r0, #99	; 0x63
 8018be0:	f005 fdd0 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018be4:	480b      	ldr	r0, [pc, #44]	; (8018c14 <GUI_Text_D55+0x44>)
 8018be6:	f005 fdc1 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8018bea:	4629      	mov	r1, r5
 8018bec:	4620      	mov	r0, r4
 8018bee:	2244      	movs	r2, #68	; 0x44
 8018bf0:	f005 fe86 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 8018bf4:	f104 000f 	add.w	r0, r4, #15
 8018bf8:	4629      	mov	r1, r5
 8018bfa:	2235      	movs	r2, #53	; 0x35
 8018bfc:	b280      	uxth	r0, r0
 8018bfe:	f005 fe7f 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8018c02:	f104 001f 	add.w	r0, r4, #31
 8018c06:	4629      	mov	r1, r5
 8018c08:	2235      	movs	r2, #53	; 0x35
 8018c0a:	b280      	uxth	r0, r0
}
 8018c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8018c10:	f005 be76 	b.w	801e900 <TFT_DrawChar>
 8018c14:	200001b0 	.word	0x200001b0

08018c18 <GUI_Text_D75>:

void GUI_Text_D75(uint16_t X, uint16_t Y)
{
 8018c18:	b538      	push	{r3, r4, r5, lr}
 8018c1a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018c1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018c20:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018c22:	f005 fda9 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018c26:	2063      	movs	r0, #99	; 0x63
 8018c28:	f005 fdac 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018c2c:	480b      	ldr	r0, [pc, #44]	; (8018c5c <GUI_Text_D75+0x44>)
 8018c2e:	f005 fd9d 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8018c32:	4629      	mov	r1, r5
 8018c34:	4620      	mov	r0, r4
 8018c36:	2244      	movs	r2, #68	; 0x44
 8018c38:	f005 fe62 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '7');
 8018c3c:	f104 000f 	add.w	r0, r4, #15
 8018c40:	4629      	mov	r1, r5
 8018c42:	2237      	movs	r2, #55	; 0x37
 8018c44:	b280      	uxth	r0, r0
 8018c46:	f005 fe5b 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8018c4a:	f104 001f 	add.w	r0, r4, #31
 8018c4e:	4629      	mov	r1, r5
 8018c50:	2235      	movs	r2, #53	; 0x35
 8018c52:	b280      	uxth	r0, r0
}
 8018c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8018c58:	f005 be52 	b.w	801e900 <TFT_DrawChar>
 8018c5c:	200001b0 	.word	0x200001b0

08018c60 <GUI_Text_CIE_xy>:


void GUI_Text_CIE_xy(uint16_t X, uint16_t Y)
{
 8018c60:	b538      	push	{r3, r4, r5, lr}
 8018c62:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018c64:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018c68:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018c6a:	f005 fd85 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018c6e:	2063      	movs	r0, #99	; 0x63
 8018c70:	f005 fd88 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018c74:	4815      	ldr	r0, [pc, #84]	; (8018ccc <GUI_Text_CIE_xy+0x6c>)
 8018c76:	f005 fd79 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018c7a:	4621      	mov	r1, r4
 8018c7c:	4628      	mov	r0, r5
 8018c7e:	2243      	movs	r2, #67	; 0x43
 8018c80:	f005 fe3e 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8018c84:	f105 000d 	add.w	r0, r5, #13
 8018c88:	4621      	mov	r1, r4
 8018c8a:	2249      	movs	r2, #73	; 0x49
 8018c8c:	b280      	uxth	r0, r0
 8018c8e:	f005 fe37 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8018c92:	f105 001b 	add.w	r0, r5, #27
 8018c96:	4621      	mov	r1, r4
 8018c98:	2245      	movs	r2, #69	; 0x45
 8018c9a:	b280      	uxth	r0, r0
 8018c9c:	f005 fe30 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 8018ca0:	3401      	adds	r4, #1
	TFT_SetFont(&Font16EN_arch_small);
 8018ca2:	480b      	ldr	r0, [pc, #44]	; (8018cd0 <GUI_Text_CIE_xy+0x70>)
 8018ca4:	f005 fd62 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8018ca8:	b2a4      	uxth	r4, r4
 8018caa:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8018cae:	4621      	mov	r1, r4
 8018cb0:	2278      	movs	r2, #120	; 0x78
 8018cb2:	b280      	uxth	r0, r0
 8018cb4:	f005 fe24 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+61, Y+1, 'y');
 8018cb8:	f105 003d 	add.w	r0, r5, #61	; 0x3d
 8018cbc:	4621      	mov	r1, r4
 8018cbe:	2279      	movs	r2, #121	; 0x79
 8018cc0:	b280      	uxth	r0, r0
}
 8018cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+61, Y+1, 'y');
 8018cc6:	f005 be1b 	b.w	801e900 <TFT_DrawChar>
 8018cca:	bf00      	nop
 8018ccc:	200001b0 	.word	0x200001b0
 8018cd0:	200001c0 	.word	0x200001c0

08018cd4 <GUI_Text_CRI>:

void GUI_Text_CRI(uint16_t X, uint16_t Y)
{
 8018cd4:	b538      	push	{r3, r4, r5, lr}
 8018cd6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018cd8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018cdc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018cde:	f005 fd4b 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018ce2:	2063      	movs	r0, #99	; 0x63
 8018ce4:	f005 fd4e 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018ce8:	480b      	ldr	r0, [pc, #44]	; (8018d18 <GUI_Text_CRI+0x44>)
 8018cea:	f005 fd3f 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+27, Y, 'I');
 8018cee:	f104 001b 	add.w	r0, r4, #27
 8018cf2:	4629      	mov	r1, r5
 8018cf4:	2249      	movs	r2, #73	; 0x49
 8018cf6:	b280      	uxth	r0, r0
 8018cf8:	f005 fe02 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'C');
 8018cfc:	4629      	mov	r1, r5
 8018cfe:	4620      	mov	r0, r4
 8018d00:	2243      	movs	r2, #67	; 0x43
 8018d02:	f005 fdfd 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'R');
 8018d06:	f104 000d 	add.w	r0, r4, #13
 8018d0a:	4629      	mov	r1, r5
 8018d0c:	2252      	movs	r2, #82	; 0x52
 8018d0e:	b280      	uxth	r0, r0
}
 8018d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+13, Y, 'R');
 8018d14:	f005 bdf4 	b.w	801e900 <TFT_DrawChar>
 8018d18:	200001b0 	.word	0x200001b0

08018d1c <GUI_Text_CQS>:

void GUI_Text_CQS(uint16_t X, uint16_t Y)
{
 8018d1c:	b538      	push	{r3, r4, r5, lr}
 8018d1e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018d20:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018d24:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018d26:	f005 fd27 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018d2a:	2063      	movs	r0, #99	; 0x63
 8018d2c:	f005 fd2a 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018d30:	480b      	ldr	r0, [pc, #44]	; (8018d60 <GUI_Text_CQS+0x44>)
 8018d32:	f005 fd1b 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018d36:	4629      	mov	r1, r5
 8018d38:	4620      	mov	r0, r4
 8018d3a:	2243      	movs	r2, #67	; 0x43
 8018d3c:	f005 fde0 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'Q');
 8018d40:	f104 000d 	add.w	r0, r4, #13
 8018d44:	4629      	mov	r1, r5
 8018d46:	2251      	movs	r2, #81	; 0x51
 8018d48:	b280      	uxth	r0, r0
 8018d4a:	f005 fdd9 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'S');
 8018d4e:	f104 001c 	add.w	r0, r4, #28
 8018d52:	4629      	mov	r1, r5
 8018d54:	2253      	movs	r2, #83	; 0x53
 8018d56:	b280      	uxth	r0, r0
}
 8018d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'S');
 8018d5c:	f005 bdd0 	b.w	801e900 <TFT_DrawChar>
 8018d60:	200001b0 	.word	0x200001b0

08018d64 <GUI_Text_SP>:



void GUI_Text_SP(uint16_t X, uint16_t Y)
{
 8018d64:	b538      	push	{r3, r4, r5, lr}
 8018d66:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018d68:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018d6c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018d6e:	f005 fd03 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018d72:	2063      	movs	r0, #99	; 0x63
 8018d74:	f005 fd06 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018d78:	480b      	ldr	r0, [pc, #44]	; (8018da8 <GUI_Text_SP+0x44>)
 8018d7a:	f005 fcf7 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+13, Y, '/');
 8018d7e:	f104 000d 	add.w	r0, r4, #13
 8018d82:	4629      	mov	r1, r5
 8018d84:	222f      	movs	r2, #47	; 0x2f
 8018d86:	b280      	uxth	r0, r0
 8018d88:	f005 fdba 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'S');
 8018d8c:	4629      	mov	r1, r5
 8018d8e:	4620      	mov	r0, r4
 8018d90:	2253      	movs	r2, #83	; 0x53
 8018d92:	f005 fdb5 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'P');
 8018d96:	f104 001c 	add.w	r0, r4, #28
 8018d9a:	4629      	mov	r1, r5
 8018d9c:	2250      	movs	r2, #80	; 0x50
 8018d9e:	b280      	uxth	r0, r0
}
 8018da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'P');
 8018da4:	f005 bdac 	b.w	801e900 <TFT_DrawChar>
 8018da8:	200001b0 	.word	0x200001b0

08018dac <GUI_Text_lambda_d>:



void GUI_Text_lambda_d(uint16_t X, uint16_t Y)
{
 8018dac:	b538      	push	{r3, r4, r5, lr}
 8018dae:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018db0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018db4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018db6:	f005 fcdf 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018dba:	2063      	movs	r0, #99	; 0x63
 8018dbc:	f005 fce2 	bl	801e784 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8018dc0:	480a      	ldr	r0, [pc, #40]	; (8018dec <GUI_Text_lambda_d+0x40>)
 8018dc2:	f005 fcd3 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, '~'+1);
 8018dc6:	4629      	mov	r1, r5
 8018dc8:	227f      	movs	r2, #127	; 0x7f
 8018dca:	4620      	mov	r0, r4
 8018dcc:	f005 fd98 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8018dd0:	4807      	ldr	r0, [pc, #28]	; (8018df0 <GUI_Text_lambda_d+0x44>)
 8018dd2:	f005 fccb 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+15, Y+7, 'd');
 8018dd6:	1de9      	adds	r1, r5, #7
 8018dd8:	f104 000f 	add.w	r0, r4, #15
 8018ddc:	2264      	movs	r2, #100	; 0x64
 8018dde:	b289      	uxth	r1, r1
 8018de0:	b280      	uxth	r0, r0
}
 8018de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+15, Y+7, 'd');
 8018de6:	f005 bd8b 	b.w	801e900 <TFT_DrawChar>
 8018dea:	bf00      	nop
 8018dec:	200001b0 	.word	0x200001b0
 8018df0:	200001c0 	.word	0x200001c0

08018df4 <GUI_Text_V_lambda>:
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+15, Y+7, 'c');
}

void GUI_Text_V_lambda(uint16_t X, uint16_t Y)
{
 8018df4:	b538      	push	{r3, r4, r5, lr}
 8018df6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018df8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018dfc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018dfe:	f005 fcbb 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018e02:	2063      	movs	r0, #99	; 0x63
 8018e04:	f005 fcbe 	bl	801e784 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8018e08:	4824      	ldr	r0, [pc, #144]	; (8018e9c <GUI_Text_V_lambda+0xa8>)
 8018e0a:	f005 fcaf 	bl	801e76c <TFT_SetFont>

	TFT_DrawChar(X+13, Y, '(');
 8018e0e:	f104 000d 	add.w	r0, r4, #13
 8018e12:	4629      	mov	r1, r5
 8018e14:	2228      	movs	r2, #40	; 0x28
 8018e16:	b280      	uxth	r0, r0
 8018e18:	f005 fd72 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y, ')');
 8018e1c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8018e20:	4629      	mov	r1, r5
 8018e22:	2229      	movs	r2, #41	; 0x29
 8018e24:	b280      	uxth	r0, r0
 8018e26:	f005 fd6b 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'V');
 8018e2a:	4629      	mov	r1, r5
 8018e2c:	4620      	mov	r0, r4
 8018e2e:	2256      	movs	r2, #86	; 0x56
 8018e30:	f005 fd66 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y, '~'+1);
 8018e34:	f104 001a 	add.w	r0, r4, #26
 8018e38:	4629      	mov	r1, r5
 8018e3a:	227f      	movs	r2, #127	; 0x7f
 8018e3c:	b280      	uxth	r0, r0
 8018e3e:	f005 fd5f 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y, '/');
 8018e42:	f104 0035 	add.w	r0, r4, #53	; 0x35
 8018e46:	4629      	mov	r1, r5
 8018e48:	222f      	movs	r2, #47	; 0x2f
 8018e4a:	b280      	uxth	r0, r0
 8018e4c:	f005 fd58 	bl	801e900 <TFT_DrawChar>
		
	TFT_DrawChar(X+80, Y, '('-1);
 8018e50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018e54:	4629      	mov	r1, r5
 8018e56:	2227      	movs	r2, #39	; 0x27
 8018e58:	b280      	uxth	r0, r0
 8018e5a:	f005 fd51 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y, '(');
 8018e5e:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8018e62:	4629      	mov	r1, r5
 8018e64:	2228      	movs	r2, #40	; 0x28
 8018e66:	b280      	uxth	r0, r0
 8018e68:	f005 fd4a 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+117, Y, ')');
 8018e6c:	f104 0075 	add.w	r0, r4, #117	; 0x75
 8018e70:	4629      	mov	r1, r5
 8018e72:	2229      	movs	r2, #41	; 0x29
 8018e74:	b280      	uxth	r0, r0
 8018e76:	f005 fd43 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+68, Y, 'V');
 8018e7a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8018e7e:	4629      	mov	r1, r5
 8018e80:	2256      	movs	r2, #86	; 0x56
 8018e82:	b280      	uxth	r0, r0
 8018e84:	f005 fd3c 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, '~'+1);
 8018e88:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8018e8c:	4629      	mov	r1, r5
 8018e8e:	227f      	movs	r2, #127	; 0x7f
 8018e90:	b280      	uxth	r0, r0
		
}
 8018e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, '~'+1);
 8018e96:	f005 bd33 	b.w	801e900 <TFT_DrawChar>
 8018e9a:	bf00      	nop
 8018e9c:	200001b0 	.word	0x200001b0

08018ea0 <GUI_Text_deltaE>:

void GUI_Text_deltaE(uint16_t X, uint16_t Y)
{
 8018ea0:	b538      	push	{r3, r4, r5, lr}
 8018ea2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018ea4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018ea8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018eaa:	f005 fc65 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018eae:	2063      	movs	r0, #99	; 0x63
 8018eb0:	f005 fc68 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018eb4:	4808      	ldr	r0, [pc, #32]	; (8018ed8 <GUI_Text_deltaE+0x38>)
 8018eb6:	f005 fc59 	bl	801e76c <TFT_SetFont>

	TFT_DrawChar(X, Y, '~'+2);
 8018eba:	4629      	mov	r1, r5
 8018ebc:	4620      	mov	r0, r4
 8018ebe:	2280      	movs	r2, #128	; 0x80
 8018ec0:	f005 fd1e 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+14, Y, 'E');
 8018ec4:	f104 000e 	add.w	r0, r4, #14
 8018ec8:	4629      	mov	r1, r5
 8018eca:	2245      	movs	r2, #69	; 0x45
 8018ecc:	b280      	uxth	r0, r0
}
 8018ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+14, Y, 'E');
 8018ed2:	f005 bd15 	b.w	801e900 <TFT_DrawChar>
 8018ed6:	bf00      	nop
 8018ed8:	200001b0 	.word	0x200001b0

08018edc <GUI_TextEn_umol>:

void GUI_TextEn_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 8018edc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018ee0:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018ee2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018ee6:	4616      	mov	r6, r2
 8018ee8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018eea:	f005 fc45 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018eee:	2063      	movs	r0, #99	; 0x63
 8018ef0:	f005 fc48 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 8018ef4:	482b      	ldr	r0, [pc, #172]	; (8018fa4 <GUI_TextEn_umol+0xc8>)
 8018ef6:	f005 fc39 	bl	801e76c <TFT_SetFont>
	
	if(deg){
 8018efa:	2e00      	cmp	r6, #0
 8018efc:	d050      	beq.n	8018fa0 <GUI_TextEn_umol+0xc4>
			TFT_DrawChar(X, Y, 'm'-65);
 8018efe:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X, Y, 'z'-64);
 8018f00:	4629      	mov	r1, r5
 8018f02:	4620      	mov	r0, r4
 8018f04:	f005 fcfc 	bl	801e900 <TFT_DrawChar>
	}
	TFT_DrawChar(X+8, Y, 'm'-65);
	TFT_DrawChar(X+16, Y, 'o'-65);
 8018f08:	f104 0710 	add.w	r7, r4, #16
	TFT_DrawChar(X+8, Y, 'm'-65);
 8018f0c:	f104 0008 	add.w	r0, r4, #8
 8018f10:	4629      	mov	r1, r5
	TFT_DrawChar(X+16, Y, 'o'-65);
 8018f12:	b2bf      	uxth	r7, r7
	TFT_DrawChar(X+8, Y, 'm'-65);
 8018f14:	222c      	movs	r2, #44	; 0x2c
 8018f16:	b280      	uxth	r0, r0
 8018f18:	f005 fcf2 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'o'-65);
 8018f1c:	4629      	mov	r1, r5
 8018f1e:	4638      	mov	r0, r7
 8018f20:	222e      	movs	r2, #46	; 0x2e
 8018f22:	f005 fced 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+22, Y, 'l'-65);
 8018f26:	f104 0016 	add.w	r0, r4, #22
 8018f2a:	4629      	mov	r1, r5
 8018f2c:	222b      	movs	r2, #43	; 0x2b
 8018f2e:	b280      	uxth	r0, r0
 8018f30:	f005 fce6 	bl	801e900 <TFT_DrawChar>
	
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8018f34:	f105 030a 	add.w	r3, r5, #10
 8018f38:	b29b      	uxth	r3, r3
 8018f3a:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8018f3e:	f104 0219 	add.w	r2, r4, #25
 8018f42:	4619      	mov	r1, r3
 8018f44:	4620      	mov	r0, r4
 8018f46:	f8cd 8000 	str.w	r8, [sp]
 8018f4a:	b292      	uxth	r2, r2
	
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8018f4c:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8018f50:	f005 f986 	bl	801e260 <TFT_DrawLine>
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8018f54:	b2b6      	uxth	r6, r6
 8018f56:	f104 000a 	add.w	r0, r4, #10
 8018f5a:	4631      	mov	r1, r6
 8018f5c:	223b      	movs	r2, #59	; 0x3b
 8018f5e:	b280      	uxth	r0, r0
 8018f60:	f005 fcce 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+2, Y+11, 'm'-65);
 8018f64:	1ca0      	adds	r0, r4, #2
 8018f66:	4631      	mov	r1, r6
 8018f68:	222c      	movs	r2, #44	; 0x2c
 8018f6a:	b280      	uxth	r0, r0
 8018f6c:	f005 fcc8 	bl	801e900 <TFT_DrawChar>
	TFT_DrawRectangle(X+16, Y+14, X+17, Y+15, TFT_White);
 8018f70:	f105 030f 	add.w	r3, r5, #15
 8018f74:	f104 0211 	add.w	r2, r4, #17
 8018f78:	f105 010e 	add.w	r1, r5, #14
 8018f7c:	4638      	mov	r0, r7
 8018f7e:	f8cd 8000 	str.w	r8, [sp]
 8018f82:	b29b      	uxth	r3, r3
 8018f84:	b292      	uxth	r2, r2
 8018f86:	b289      	uxth	r1, r1
 8018f88:	f005 f9df 	bl	801e34a <TFT_DrawRectangle>
	TFT_DrawChar(X+19, Y+11, 's'-65);
 8018f8c:	f104 0013 	add.w	r0, r4, #19
 8018f90:	2232      	movs	r2, #50	; 0x32
 8018f92:	4631      	mov	r1, r6
 8018f94:	b280      	uxth	r0, r0
}
 8018f96:	b002      	add	sp, #8
 8018f98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+19, Y+11, 's'-65);
 8018f9c:	f005 bcb0 	b.w	801e900 <TFT_DrawChar>
			TFT_DrawChar(X, Y, 'z'-64);
 8018fa0:	223a      	movs	r2, #58	; 0x3a
 8018fa2:	e7ad      	b.n	8018f00 <GUI_TextEn_umol+0x24>
 8018fa4:	20000190 	.word	0x20000190

08018fa8 <GUI_TextEn_umol_sr>:

void GUI_TextEn_umol_sr(uint16_t X, uint16_t Y, uint8_t deg)
{
 8018fa8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018fac:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018fae:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018fb2:	460d      	mov	r5, r1
 8018fb4:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 8018fb6:	f005 fbdf 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018fba:	2063      	movs	r0, #99	; 0x63
 8018fbc:	f005 fbe2 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 8018fc0:	483b      	ldr	r0, [pc, #236]	; (80190b0 <GUI_TextEn_umol_sr+0x108>)
 8018fc2:	f005 fbd3 	bl	801e76c <TFT_SetFont>
 8018fc6:	f104 0009 	add.w	r0, r4, #9
	
	if(deg){
 8018fca:	2e00      	cmp	r6, #0
 8018fcc:	d06d      	beq.n	80190aa <GUI_TextEn_umol_sr+0x102>
			TFT_DrawChar(X+9, Y, 'm'-65);
 8018fce:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X+9, Y, 'z'-64);
 8018fd0:	4629      	mov	r1, r5
 8018fd2:	b280      	uxth	r0, r0
 8018fd4:	f005 fc94 	bl	801e900 <TFT_DrawChar>
	}
	TFT_DrawChar(X+17, Y, 'm'-65);
 8018fd8:	f104 0011 	add.w	r0, r4, #17
 8018fdc:	4629      	mov	r1, r5
 8018fde:	222c      	movs	r2, #44	; 0x2c
 8018fe0:	b280      	uxth	r0, r0
 8018fe2:	f005 fc8d 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+25, Y, 'o'-65);
 8018fe6:	f104 0019 	add.w	r0, r4, #25
 8018fea:	4629      	mov	r1, r5
 8018fec:	222e      	movs	r2, #46	; 0x2e
 8018fee:	b280      	uxth	r0, r0
 8018ff0:	f005 fc86 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'l'-65);
 8018ff4:	f104 001f 	add.w	r0, r4, #31
 8018ff8:	4629      	mov	r1, r5
 8018ffa:	222b      	movs	r2, #43	; 0x2b
 8018ffc:	b280      	uxth	r0, r0
 8018ffe:	f005 fc7f 	bl	801e900 <TFT_DrawChar>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8019002:	f105 030a 	add.w	r3, r5, #10
 8019006:	b29b      	uxth	r3, r3
 8019008:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801900c:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 8019010:	1ce0      	adds	r0, r4, #3
 8019012:	4619      	mov	r1, r3
 8019014:	f8cd 8000 	str.w	r8, [sp]
 8019018:	b292      	uxth	r2, r2
 801901a:	b280      	uxth	r0, r0
	
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 801901c:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8019020:	f005 f91e 	bl	801e260 <TFT_DrawLine>
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 8019024:	b2b6      	uxth	r6, r6
 8019026:	f104 000d 	add.w	r0, r4, #13
 801902a:	4631      	mov	r1, r6
 801902c:	223b      	movs	r2, #59	; 0x3b
 801902e:	b280      	uxth	r0, r0
 8019030:	f005 fc66 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 8019034:	1d60      	adds	r0, r4, #5
 8019036:	4631      	mov	r1, r6
 8019038:	222c      	movs	r2, #44	; 0x2c
 801903a:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 801903c:	f105 070e 	add.w	r7, r5, #14
 8019040:	350f      	adds	r5, #15
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 8019042:	f005 fc5d 	bl	801e900 <TFT_DrawChar>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 8019046:	b2bf      	uxth	r7, r7
 8019048:	b2ad      	uxth	r5, r5
 801904a:	f104 0214 	add.w	r2, r4, #20
 801904e:	f104 0013 	add.w	r0, r4, #19
 8019052:	462b      	mov	r3, r5
 8019054:	4639      	mov	r1, r7
 8019056:	f8cd 8000 	str.w	r8, [sp]
 801905a:	b292      	uxth	r2, r2
 801905c:	b280      	uxth	r0, r0
 801905e:	f005 f974 	bl	801e34a <TFT_DrawRectangle>
	TFT_DrawChar(X+22, Y+11, 's'-65);
 8019062:	f104 0016 	add.w	r0, r4, #22
 8019066:	4631      	mov	r1, r6
 8019068:	2232      	movs	r2, #50	; 0x32
 801906a:	b280      	uxth	r0, r0
 801906c:	f005 fc48 	bl	801e900 <TFT_DrawChar>
	TFT_DrawRectangle(X+30, Y+14, X+36, Y+15, TFT_White);
 8019070:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8019074:	f104 001e 	add.w	r0, r4, #30
 8019078:	462b      	mov	r3, r5
 801907a:	4639      	mov	r1, r7
 801907c:	f8cd 8000 	str.w	r8, [sp]
 8019080:	b292      	uxth	r2, r2
 8019082:	b280      	uxth	r0, r0
 8019084:	f005 f961 	bl	801e34a <TFT_DrawRectangle>
	TFT_DrawChar(X+32, Y+11, 's'-65);
 8019088:	f104 0020 	add.w	r0, r4, #32
 801908c:	4631      	mov	r1, r6
 801908e:	2232      	movs	r2, #50	; 0x32
 8019090:	b280      	uxth	r0, r0
 8019092:	f005 fc35 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 8019096:	f104 0027 	add.w	r0, r4, #39	; 0x27
 801909a:	2231      	movs	r2, #49	; 0x31
 801909c:	4631      	mov	r1, r6
 801909e:	b280      	uxth	r0, r0
}
 80190a0:	b002      	add	sp, #8
 80190a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 80190a6:	f005 bc2b 	b.w	801e900 <TFT_DrawChar>
			TFT_DrawChar(X+9, Y, 'z'-64);
 80190aa:	223a      	movs	r2, #58	; 0x3a
 80190ac:	e790      	b.n	8018fd0 <GUI_TextEn_umol_sr+0x28>
 80190ae:	bf00      	nop
 80190b0:	20000190 	.word	0x20000190

080190b4 <GUI_Text_On>:


void GUI_Text_On(uint16_t X, uint16_t Y)
{
 80190b4:	b538      	push	{r3, r4, r5, lr}
 80190b6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80190b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80190bc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80190be:	f005 fb5b 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80190c2:	2063      	movs	r0, #99	; 0x63
 80190c4:	f005 fb5e 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80190c8:	480a      	ldr	r0, [pc, #40]	; (80190f4 <GUI_Text_On+0x40>)
 80190ca:	f005 fb4f 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 80190ce:	4629      	mov	r1, r5
 80190d0:	224f      	movs	r2, #79	; 0x4f
 80190d2:	4620      	mov	r0, r4
 80190d4:	f005 fc14 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 80190d8:	4807      	ldr	r0, [pc, #28]	; (80190f8 <GUI_Text_On+0x44>)
 80190da:	f005 fb47 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 80190de:	1ca9      	adds	r1, r5, #2
 80190e0:	f104 0010 	add.w	r0, r4, #16
 80190e4:	226e      	movs	r2, #110	; 0x6e
 80190e6:	b289      	uxth	r1, r1
 80190e8:	b280      	uxth	r0, r0
	
}
 80190ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+16, Y+2, 'n');
 80190ee:	f005 bc07 	b.w	801e900 <TFT_DrawChar>
 80190f2:	bf00      	nop
 80190f4:	200001b0 	.word	0x200001b0
 80190f8:	200001c0 	.word	0x200001c0

080190fc <GUI_Text_Off>:

void GUI_Text_Off(uint16_t X, uint16_t Y)
{
 80190fc:	b570      	push	{r4, r5, r6, lr}
 80190fe:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019100:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019104:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 8019106:	f005 fb37 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801910a:	2063      	movs	r0, #99	; 0x63
 801910c:	f005 fb3a 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+13, Y+2, 'f');
 8019110:	1cb4      	adds	r4, r6, #2
	TFT_SetFont(&Font16EN_arch_small);
 8019112:	480e      	ldr	r0, [pc, #56]	; (801914c <GUI_Text_Off+0x50>)
 8019114:	f005 fb2a 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'f');
 8019118:	b2a4      	uxth	r4, r4
 801911a:	f105 000d 	add.w	r0, r5, #13
 801911e:	4621      	mov	r1, r4
 8019120:	2266      	movs	r2, #102	; 0x66
 8019122:	b280      	uxth	r0, r0
 8019124:	f005 fbec 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y+2, 'f');
 8019128:	f105 0017 	add.w	r0, r5, #23
 801912c:	4621      	mov	r1, r4
 801912e:	2266      	movs	r2, #102	; 0x66
 8019130:	b280      	uxth	r0, r0
 8019132:	f005 fbe5 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8019136:	4806      	ldr	r0, [pc, #24]	; (8019150 <GUI_Text_Off+0x54>)
 8019138:	f005 fb18 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 801913c:	4631      	mov	r1, r6
 801913e:	4628      	mov	r0, r5
 8019140:	224f      	movs	r2, #79	; 0x4f
}
 8019142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TFT_DrawChar(X, Y, 'O');
 8019146:	f005 bbdb 	b.w	801e900 <TFT_DrawChar>
 801914a:	bf00      	nop
 801914c:	200001c0 	.word	0x200001c0
 8019150:	200001b0 	.word	0x200001b0

08019154 <GUI_Text_EbEr>:

void GUI_Text_EbEr(uint16_t X, uint16_t Y)
{
 8019154:	b538      	push	{r3, r4, r5, lr}
 8019156:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019158:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801915c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801915e:	f005 fb0b 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019162:	2063      	movs	r0, #99	; 0x63
 8019164:	f005 fb0e 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8019168:	4815      	ldr	r0, [pc, #84]	; (80191c0 <GUI_Text_EbEr+0x6c>)
 801916a:	f005 faff 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 801916e:	1ca1      	adds	r1, r4, #2
 8019170:	f105 0013 	add.w	r0, r5, #19
 8019174:	222c      	movs	r2, #44	; 0x2c
 8019176:	b289      	uxth	r1, r1
 8019178:	b280      	uxth	r0, r0
 801917a:	f005 fbc1 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'E');
 801917e:	4621      	mov	r1, r4
 8019180:	4628      	mov	r0, r5
 8019182:	2245      	movs	r2, #69	; 0x45
 8019184:	f005 fbbc 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, 'E');
 8019188:	f105 0020 	add.w	r0, r5, #32
 801918c:	4621      	mov	r1, r4
 801918e:	2245      	movs	r2, #69	; 0x45
 8019190:	b280      	uxth	r0, r0
 8019192:	f005 fbb5 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 8019196:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 8019198:	480a      	ldr	r0, [pc, #40]	; (80191c4 <GUI_Text_EbEr+0x70>)
 801919a:	f005 fae7 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 801919e:	b2a4      	uxth	r4, r4
 80191a0:	f105 0012 	add.w	r0, r5, #18
 80191a4:	4621      	mov	r1, r4
 80191a6:	2242      	movs	r2, #66	; 0x42
 80191a8:	b280      	uxth	r0, r0
 80191aa:	f005 fba9 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+12, 'R');
 80191ae:	f105 0032 	add.w	r0, r5, #50	; 0x32
 80191b2:	4621      	mov	r1, r4
 80191b4:	2252      	movs	r2, #82	; 0x52
 80191b6:	b280      	uxth	r0, r0
}
 80191b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+50, Y+12, 'R');
 80191bc:	f005 bba0 	b.w	801e900 <TFT_DrawChar>
 80191c0:	200001b0 	.word	0x200001b0
 80191c4:	20000218 	.word	0x20000218

080191c8 <GUI_Text_LbLr>:

void GUI_Text_LbLr(uint16_t X, uint16_t Y)
{
 80191c8:	b538      	push	{r3, r4, r5, lr}
 80191ca:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80191cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80191d0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80191d2:	f005 fad1 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80191d6:	2063      	movs	r0, #99	; 0x63
 80191d8:	f005 fad4 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80191dc:	4815      	ldr	r0, [pc, #84]	; (8019234 <GUI_Text_LbLr+0x6c>)
 80191de:	f005 fac5 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 80191e2:	1ca1      	adds	r1, r4, #2
 80191e4:	f105 0013 	add.w	r0, r5, #19
 80191e8:	222c      	movs	r2, #44	; 0x2c
 80191ea:	b289      	uxth	r1, r1
 80191ec:	b280      	uxth	r0, r0
 80191ee:	f005 fb87 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'L');
 80191f2:	4621      	mov	r1, r4
 80191f4:	4628      	mov	r0, r5
 80191f6:	224c      	movs	r2, #76	; 0x4c
 80191f8:	f005 fb82 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y, 'L');
 80191fc:	f105 001e 	add.w	r0, r5, #30
 8019200:	4621      	mov	r1, r4
 8019202:	224c      	movs	r2, #76	; 0x4c
 8019204:	b280      	uxth	r0, r0
 8019206:	f005 fb7b 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 801920a:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 801920c:	480a      	ldr	r0, [pc, #40]	; (8019238 <GUI_Text_LbLr+0x70>)
 801920e:	f005 faad 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 8019212:	b2a4      	uxth	r4, r4
 8019214:	f105 0012 	add.w	r0, r5, #18
 8019218:	4621      	mov	r1, r4
 801921a:	2242      	movs	r2, #66	; 0x42
 801921c:	b280      	uxth	r0, r0
 801921e:	f005 fb6f 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+48, Y+12, 'R');
 8019222:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8019226:	4621      	mov	r1, r4
 8019228:	2252      	movs	r2, #82	; 0x52
 801922a:	b280      	uxth	r0, r0
}
 801922c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+48, Y+12, 'R');
 8019230:	f005 bb66 	b.w	801e900 <TFT_DrawChar>
 8019234:	200001b0 	.word	0x200001b0
 8019238:	20000218 	.word	0x20000218

0801923c <GUI_TextEn_Language>:
///////////////////////////////////////////////////////////////////////
void GUI_TextEn_Language(uint16_t X, uint16_t Y)
{	/* Print word 'Language' */
 801923c:	b538      	push	{r3, r4, r5, lr}
 801923e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019240:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	/* Print word 'Language' */
 8019244:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019246:	f005 fa97 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801924a:	2063      	movs	r0, #99	; 0x63
 801924c:	f005 fa9a 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019250:	481f      	ldr	r0, [pc, #124]	; (80192d0 <GUI_TextEn_Language+0x94>)
 8019252:	f005 fa8b 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8019256:	4621      	mov	r1, r4
 8019258:	224c      	movs	r2, #76	; 0x4c
 801925a:	4628      	mov	r0, r5
 801925c:	f005 fb50 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+14, Y+2, 'a');
 8019260:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019262:	481c      	ldr	r0, [pc, #112]	; (80192d4 <GUI_TextEn_Language+0x98>)
	TFT_DrawChar(X+14, Y+2, 'a');
 8019264:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019266:	f005 fa81 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+14, Y+2, 'a');
 801926a:	f105 000e 	add.w	r0, r5, #14
 801926e:	4621      	mov	r1, r4
 8019270:	2261      	movs	r2, #97	; 0x61
 8019272:	b280      	uxth	r0, r0
 8019274:	f005 fb44 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y+2, 'n');
 8019278:	f105 001a 	add.w	r0, r5, #26
 801927c:	4621      	mov	r1, r4
 801927e:	226e      	movs	r2, #110	; 0x6e
 8019280:	b280      	uxth	r0, r0
 8019282:	f005 fb3d 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+2, 'g');
 8019286:	f105 0027 	add.w	r0, r5, #39	; 0x27
 801928a:	4621      	mov	r1, r4
 801928c:	2267      	movs	r2, #103	; 0x67
 801928e:	b280      	uxth	r0, r0
 8019290:	f005 fb36 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'a');
 8019294:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8019298:	4621      	mov	r1, r4
 801929a:	2261      	movs	r2, #97	; 0x61
 801929c:	b280      	uxth	r0, r0
 801929e:	f005 fb2f 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+52, Y+2, 'u');
 80192a2:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80192a6:	4621      	mov	r1, r4
 80192a8:	2275      	movs	r2, #117	; 0x75
 80192aa:	b280      	uxth	r0, r0
 80192ac:	f005 fb28 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+77, Y+2, 'g');
 80192b0:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 80192b4:	4621      	mov	r1, r4
 80192b6:	2267      	movs	r2, #103	; 0x67
 80192b8:	b280      	uxth	r0, r0
 80192ba:	f005 fb21 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y+2, 'e');
 80192be:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80192c2:	4621      	mov	r1, r4
 80192c4:	2265      	movs	r2, #101	; 0x65
 80192c6:	b280      	uxth	r0, r0
}
 80192c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+90, Y+2, 'e');
 80192cc:	f005 bb18 	b.w	801e900 <TFT_DrawChar>
 80192d0:	200001b8 	.word	0x200001b8
 80192d4:	200001c8 	.word	0x200001c8

080192d8 <GUI_TextEn_English>:
void GUI_TextEn_English(uint16_t X, uint16_t Y)
{
 80192d8:	b538      	push	{r3, r4, r5, lr}
 80192da:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80192dc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80192e0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80192e2:	f005 fa49 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80192e6:	2063      	movs	r0, #99	; 0x63
 80192e8:	f005 fa4c 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80192ec:	481c      	ldr	r0, [pc, #112]	; (8019360 <GUI_TextEn_English+0x88>)
 80192ee:	f005 fa3d 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'E');
 80192f2:	4621      	mov	r1, r4
 80192f4:	2245      	movs	r2, #69	; 0x45
 80192f6:	4628      	mov	r0, r5
 80192f8:	f005 fb02 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'n');
 80192fc:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80192fe:	4819      	ldr	r0, [pc, #100]	; (8019364 <GUI_TextEn_English+0x8c>)
	TFT_DrawChar(X+16, Y+2, 'n');
 8019300:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019302:	f005 fa33 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 8019306:	f105 0010 	add.w	r0, r5, #16
 801930a:	4621      	mov	r1, r4
 801930c:	226e      	movs	r2, #110	; 0x6e
 801930e:	b280      	uxth	r0, r0
 8019310:	f005 faf6 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'g');
 8019314:	f105 001d 	add.w	r0, r5, #29
 8019318:	4621      	mov	r1, r4
 801931a:	2267      	movs	r2, #103	; 0x67
 801931c:	b280      	uxth	r0, r0
 801931e:	f005 faef 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'l');
 8019322:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8019326:	4621      	mov	r1, r4
 8019328:	226c      	movs	r2, #108	; 0x6c
 801932a:	b280      	uxth	r0, r0
 801932c:	f005 fae8 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 'i');
 8019330:	f105 002f 	add.w	r0, r5, #47	; 0x2f
 8019334:	4621      	mov	r1, r4
 8019336:	2269      	movs	r2, #105	; 0x69
 8019338:	b280      	uxth	r0, r0
 801933a:	f005 fae1 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 's');
 801933e:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8019342:	4621      	mov	r1, r4
 8019344:	2273      	movs	r2, #115	; 0x73
 8019346:	b280      	uxth	r0, r0
 8019348:	f005 fada 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'h');
 801934c:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8019350:	4621      	mov	r1, r4
 8019352:	2268      	movs	r2, #104	; 0x68
 8019354:	b280      	uxth	r0, r0
	

}
 8019356:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+65, Y+2, 'h');
 801935a:	f005 bad1 	b.w	801e900 <TFT_DrawChar>
 801935e:	bf00      	nop
 8019360:	200001b8 	.word	0x200001b8
 8019364:	200001c8 	.word	0x200001c8

08019368 <GUI_TextEn_Info>:
void GUI_TextEn_Info(uint16_t X, uint16_t Y)
{
 8019368:	b538      	push	{r3, r4, r5, lr}
 801936a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801936c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019370:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019372:	f005 fa01 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019376:	2063      	movs	r0, #99	; 0x63
 8019378:	f005 fa04 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801937c:	4811      	ldr	r0, [pc, #68]	; (80193c4 <GUI_TextEn_Info+0x5c>)
 801937e:	f005 f9f5 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8019382:	4621      	mov	r1, r4
 8019384:	2249      	movs	r2, #73	; 0x49
 8019386:	4628      	mov	r0, r5
 8019388:	f005 faba 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+18, Y+2, 'f');
 801938c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801938e:	480e      	ldr	r0, [pc, #56]	; (80193c8 <GUI_TextEn_Info+0x60>)
 8019390:	f005 f9ec 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'f');
 8019394:	b2a4      	uxth	r4, r4
 8019396:	f105 0012 	add.w	r0, r5, #18
 801939a:	4621      	mov	r1, r4
 801939c:	2266      	movs	r2, #102	; 0x66
 801939e:	b280      	uxth	r0, r0
 80193a0:	f005 faae 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+8, Y+2, 'n');
 80193a4:	f105 0008 	add.w	r0, r5, #8
 80193a8:	4621      	mov	r1, r4
 80193aa:	226e      	movs	r2, #110	; 0x6e
 80193ac:	b280      	uxth	r0, r0
 80193ae:	f005 faa7 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'o');
 80193b2:	f105 001d 	add.w	r0, r5, #29
 80193b6:	4621      	mov	r1, r4
 80193b8:	226f      	movs	r2, #111	; 0x6f
 80193ba:	b280      	uxth	r0, r0
}
 80193bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+29, Y+2, 'o');
 80193c0:	f005 ba9e 	b.w	801e900 <TFT_DrawChar>
 80193c4:	200001b8 	.word	0x200001b8
 80193c8:	200001c8 	.word	0x200001c8

080193cc <GUI_TextEn_Radiance>:
void GUI_TextEn_Radiance(uint16_t X, uint16_t Y)
{
 80193cc:	b538      	push	{r3, r4, r5, lr}
 80193ce:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80193d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80193d4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80193d6:	f005 f9cf 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80193da:	2063      	movs	r0, #99	; 0x63
 80193dc:	f005 f9d2 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80193e0:	481f      	ldr	r0, [pc, #124]	; (8019460 <GUI_TextEn_Radiance+0x94>)
 80193e2:	f005 f9c3 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'R');
 80193e6:	4621      	mov	r1, r4
 80193e8:	2252      	movs	r2, #82	; 0x52
 80193ea:	4628      	mov	r0, r5
 80193ec:	f005 fa88 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'a');
 80193f0:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80193f2:	481c      	ldr	r0, [pc, #112]	; (8019464 <GUI_TextEn_Radiance+0x98>)
	TFT_DrawChar(X+16, Y+2, 'a');
 80193f4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80193f6:	f005 f9b9 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 80193fa:	f105 0010 	add.w	r0, r5, #16
 80193fe:	4621      	mov	r1, r4
 8019400:	2261      	movs	r2, #97	; 0x61
 8019402:	b280      	uxth	r0, r0
 8019404:	f005 fa7c 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'd');
 8019408:	f105 001c 	add.w	r0, r5, #28
 801940c:	4621      	mov	r1, r4
 801940e:	2264      	movs	r2, #100	; 0x64
 8019410:	b280      	uxth	r0, r0
 8019412:	f005 fa75 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 8019416:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801941a:	4621      	mov	r1, r4
 801941c:	2269      	movs	r2, #105	; 0x69
 801941e:	b280      	uxth	r0, r0
 8019420:	f005 fa6e 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'a');
 8019424:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8019428:	4621      	mov	r1, r4
 801942a:	2261      	movs	r2, #97	; 0x61
 801942c:	b280      	uxth	r0, r0
 801942e:	f005 fa67 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y+2, 'n');
 8019432:	f105 003a 	add.w	r0, r5, #58	; 0x3a
 8019436:	4621      	mov	r1, r4
 8019438:	226e      	movs	r2, #110	; 0x6e
 801943a:	b280      	uxth	r0, r0
 801943c:	f005 fa60 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'c');
 8019440:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8019444:	4621      	mov	r1, r4
 8019446:	2263      	movs	r2, #99	; 0x63
 8019448:	b280      	uxth	r0, r0
 801944a:	f005 fa59 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+83, Y+2, 'e');
 801944e:	f105 0053 	add.w	r0, r5, #83	; 0x53
 8019452:	4621      	mov	r1, r4
 8019454:	2265      	movs	r2, #101	; 0x65
 8019456:	b280      	uxth	r0, r0
}
 8019458:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+83, Y+2, 'e');
 801945c:	f005 ba50 	b.w	801e900 <TFT_DrawChar>
 8019460:	200001b8 	.word	0x200001b8
 8019464:	200001c8 	.word	0x200001c8

08019468 <GUI_TextEn_Irradiance>:
void GUI_TextEn_Irradiance(uint16_t X, uint16_t Y)
{
 8019468:	b538      	push	{r3, r4, r5, lr}
 801946a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801946c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019470:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019472:	f005 f981 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019476:	2063      	movs	r0, #99	; 0x63
 8019478:	f005 f984 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801947c:	4826      	ldr	r0, [pc, #152]	; (8019518 <GUI_TextEn_Irradiance+0xb0>)
 801947e:	f005 f975 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8019482:	4621      	mov	r1, r4
 8019484:	2249      	movs	r2, #73	; 0x49
 8019486:	4628      	mov	r0, r5
 8019488:	f005 fa3a 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+9, Y+2, 'r');
 801948c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801948e:	4823      	ldr	r0, [pc, #140]	; (801951c <GUI_TextEn_Irradiance+0xb4>)
	TFT_DrawChar(X+9, Y+2, 'r');
 8019490:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019492:	f005 f96b 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+9, Y+2, 'r');
 8019496:	f105 0009 	add.w	r0, r5, #9
 801949a:	4621      	mov	r1, r4
 801949c:	2272      	movs	r2, #114	; 0x72
 801949e:	b280      	uxth	r0, r0
 80194a0:	f005 fa2e 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+2, 'r');
 80194a4:	f105 0015 	add.w	r0, r5, #21
 80194a8:	4621      	mov	r1, r4
 80194aa:	2272      	movs	r2, #114	; 0x72
 80194ac:	b280      	uxth	r0, r0
 80194ae:	f005 fa27 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'a');
 80194b2:	f105 0020 	add.w	r0, r5, #32
 80194b6:	4621      	mov	r1, r4
 80194b8:	2261      	movs	r2, #97	; 0x61
 80194ba:	b280      	uxth	r0, r0
 80194bc:	f005 fa20 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y+2, 'd');
 80194c0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80194c4:	4621      	mov	r1, r4
 80194c6:	2264      	movs	r2, #100	; 0x64
 80194c8:	b280      	uxth	r0, r0
 80194ca:	f005 fa19 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'i');
 80194ce:	f105 0039 	add.w	r0, r5, #57	; 0x39
 80194d2:	4621      	mov	r1, r4
 80194d4:	2269      	movs	r2, #105	; 0x69
 80194d6:	b280      	uxth	r0, r0
 80194d8:	f005 fa12 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+62, Y+2, 'a');
 80194dc:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 80194e0:	4621      	mov	r1, r4
 80194e2:	2261      	movs	r2, #97	; 0x61
 80194e4:	b280      	uxth	r0, r0
 80194e6:	f005 fa0b 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y+2, 'n');
 80194ea:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 80194ee:	4621      	mov	r1, r4
 80194f0:	226e      	movs	r2, #110	; 0x6e
 80194f2:	b280      	uxth	r0, r0
 80194f4:	f005 fa04 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'c');
 80194f8:	f105 0057 	add.w	r0, r5, #87	; 0x57
 80194fc:	4621      	mov	r1, r4
 80194fe:	2263      	movs	r2, #99	; 0x63
 8019500:	b280      	uxth	r0, r0
 8019502:	f005 f9fd 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 8019506:	f105 0063 	add.w	r0, r5, #99	; 0x63
 801950a:	4621      	mov	r1, r4
 801950c:	2265      	movs	r2, #101	; 0x65
 801950e:	b280      	uxth	r0, r0
}
 8019510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+99, Y+2, 'e');
 8019514:	f005 b9f4 	b.w	801e900 <TFT_DrawChar>
 8019518:	200001b8 	.word	0x200001b8
 801951c:	200001c8 	.word	0x200001c8

08019520 <GUI_TextMsgEn_HighIrradiance>:

void GUI_TextMsgEn_HighIrradiance(uint16_t X, uint16_t Y)
{
 8019520:	b538      	push	{r3, r4, r5, lr}
 8019522:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019524:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019528:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801952a:	f005 f925 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801952e:	2063      	movs	r0, #99	; 0x63
 8019530:	f005 f928 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019534:	4834      	ldr	r0, [pc, #208]	; (8019608 <GUI_TextMsgEn_HighIrradiance+0xe8>)
 8019536:	f005 f919 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 801953a:	4621      	mov	r1, r4
 801953c:	2248      	movs	r2, #72	; 0x48
 801953e:	4628      	mov	r0, r5
 8019540:	f005 f9de 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 8019544:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019546:	4831      	ldr	r0, [pc, #196]	; (801960c <GUI_TextMsgEn_HighIrradiance+0xec>)
  TFT_DrawChar(X+16, Y+2, 'i');
 8019548:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801954a:	f005 f90f 	bl	801e76c <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 801954e:	f105 0010 	add.w	r0, r5, #16
 8019552:	4621      	mov	r1, r4
 8019554:	2269      	movs	r2, #105	; 0x69
 8019556:	b280      	uxth	r0, r0
 8019558:	f005 f9d2 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 801955c:	f105 0017 	add.w	r0, r5, #23
 8019560:	4621      	mov	r1, r4
 8019562:	2267      	movs	r2, #103	; 0x67
 8019564:	b280      	uxth	r0, r0
 8019566:	f005 f9cb 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 801956a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801956e:	4621      	mov	r1, r4
 8019570:	2268      	movs	r2, #104	; 0x68
 8019572:	b280      	uxth	r0, r0
 8019574:	f005 f9c4 	bl	801e900 <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'i');
 8019578:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 801957c:	4621      	mov	r1, r4
 801957e:	2269      	movs	r2, #105	; 0x69
 8019580:	b280      	uxth	r0, r0
 8019582:	f005 f9bd 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+67, Y+2, 'r');
 8019586:	f105 0043 	add.w	r0, r5, #67	; 0x43
 801958a:	4621      	mov	r1, r4
 801958c:	2272      	movs	r2, #114	; 0x72
 801958e:	b280      	uxth	r0, r0
 8019590:	f005 f9b6 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+79, Y+2, 'r');
 8019594:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 8019598:	4621      	mov	r1, r4
 801959a:	2272      	movs	r2, #114	; 0x72
 801959c:	b280      	uxth	r0, r0
 801959e:	f005 f9af 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'a');
 80195a2:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80195a6:	4621      	mov	r1, r4
 80195a8:	2261      	movs	r2, #97	; 0x61
 80195aa:	b280      	uxth	r0, r0
 80195ac:	f005 f9a8 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+102, Y+2, 'd');
 80195b0:	f105 0066 	add.w	r0, r5, #102	; 0x66
 80195b4:	4621      	mov	r1, r4
 80195b6:	2264      	movs	r2, #100	; 0x64
 80195b8:	b280      	uxth	r0, r0
 80195ba:	f005 f9a1 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+115, Y+2, 'i');
 80195be:	f105 0073 	add.w	r0, r5, #115	; 0x73
 80195c2:	4621      	mov	r1, r4
 80195c4:	2269      	movs	r2, #105	; 0x69
 80195c6:	b280      	uxth	r0, r0
 80195c8:	f005 f99a 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'a');
 80195cc:	f105 0078 	add.w	r0, r5, #120	; 0x78
 80195d0:	4621      	mov	r1, r4
 80195d2:	2261      	movs	r2, #97	; 0x61
 80195d4:	b280      	uxth	r0, r0
 80195d6:	f005 f993 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'n');
 80195da:	f105 0084 	add.w	r0, r5, #132	; 0x84
 80195de:	4621      	mov	r1, r4
 80195e0:	226e      	movs	r2, #110	; 0x6e
 80195e2:	b280      	uxth	r0, r0
 80195e4:	f005 f98c 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+145, Y+2, 'c');
 80195e8:	f105 0091 	add.w	r0, r5, #145	; 0x91
 80195ec:	4621      	mov	r1, r4
 80195ee:	2263      	movs	r2, #99	; 0x63
 80195f0:	b280      	uxth	r0, r0
 80195f2:	f005 f985 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+157, Y+2, 'e');
 80195f6:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 80195fa:	4621      	mov	r1, r4
 80195fc:	2265      	movs	r2, #101	; 0x65
 80195fe:	b280      	uxth	r0, r0
}
 8019600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+157, Y+2, 'e');
 8019604:	f005 b97c 	b.w	801e900 <TFT_DrawChar>
 8019608:	200001b8 	.word	0x200001b8
 801960c:	200001c8 	.word	0x200001c8

08019610 <GUI_TextMsgEn_HighRadiance>:

void GUI_TextMsgEn_HighRadiance(uint16_t X, uint16_t Y)
{
 8019610:	b538      	push	{r3, r4, r5, lr}
 8019612:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019614:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019618:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801961a:	f005 f8ad 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801961e:	2063      	movs	r0, #99	; 0x63
 8019620:	f005 f8b0 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019624:	482d      	ldr	r0, [pc, #180]	; (80196dc <GUI_TextMsgEn_HighRadiance+0xcc>)
 8019626:	f005 f8a1 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 801962a:	4621      	mov	r1, r4
 801962c:	2248      	movs	r2, #72	; 0x48
 801962e:	4628      	mov	r0, r5
 8019630:	f005 f966 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 8019634:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019636:	482a      	ldr	r0, [pc, #168]	; (80196e0 <GUI_TextMsgEn_HighRadiance+0xd0>)
  TFT_DrawChar(X+16, Y+2, 'i');
 8019638:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801963a:	f005 f897 	bl	801e76c <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 801963e:	f105 0010 	add.w	r0, r5, #16
 8019642:	4621      	mov	r1, r4
 8019644:	2269      	movs	r2, #105	; 0x69
 8019646:	b280      	uxth	r0, r0
 8019648:	f005 f95a 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 801964c:	f105 0017 	add.w	r0, r5, #23
 8019650:	4621      	mov	r1, r4
 8019652:	2267      	movs	r2, #103	; 0x67
 8019654:	b280      	uxth	r0, r0
 8019656:	f005 f953 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 801965a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801965e:	4621      	mov	r1, r4
 8019660:	2268      	movs	r2, #104	; 0x68
 8019662:	b280      	uxth	r0, r0
 8019664:	f005 f94c 	bl	801e900 <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'r');
 8019668:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 801966c:	4621      	mov	r1, r4
 801966e:	2272      	movs	r2, #114	; 0x72
 8019670:	b280      	uxth	r0, r0
 8019672:	f005 f945 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+70, Y+2, 'a');
 8019676:	f105 0046 	add.w	r0, r5, #70	; 0x46
 801967a:	4621      	mov	r1, r4
 801967c:	2261      	movs	r2, #97	; 0x61
 801967e:	b280      	uxth	r0, r0
 8019680:	f005 f93e 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+82, Y+2, 'd');
 8019684:	f105 0052 	add.w	r0, r5, #82	; 0x52
 8019688:	4621      	mov	r1, r4
 801968a:	2264      	movs	r2, #100	; 0x64
 801968c:	b280      	uxth	r0, r0
 801968e:	f005 f937 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'i');
 8019692:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 8019696:	4621      	mov	r1, r4
 8019698:	2269      	movs	r2, #105	; 0x69
 801969a:	b280      	uxth	r0, r0
 801969c:	f005 f930 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+100, Y+2, 'a');
 80196a0:	f105 0064 	add.w	r0, r5, #100	; 0x64
 80196a4:	4621      	mov	r1, r4
 80196a6:	2261      	movs	r2, #97	; 0x61
 80196a8:	b280      	uxth	r0, r0
 80196aa:	f005 f929 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+112, Y+2, 'n');
 80196ae:	f105 0070 	add.w	r0, r5, #112	; 0x70
 80196b2:	4621      	mov	r1, r4
 80196b4:	226e      	movs	r2, #110	; 0x6e
 80196b6:	b280      	uxth	r0, r0
 80196b8:	f005 f922 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+125, Y+2, 'c');
 80196bc:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 80196c0:	4621      	mov	r1, r4
 80196c2:	2263      	movs	r2, #99	; 0x63
 80196c4:	b280      	uxth	r0, r0
 80196c6:	f005 f91b 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+137, Y+2, 'e');
 80196ca:	f105 0089 	add.w	r0, r5, #137	; 0x89
 80196ce:	4621      	mov	r1, r4
 80196d0:	2265      	movs	r2, #101	; 0x65
 80196d2:	b280      	uxth	r0, r0
}
 80196d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+137, Y+2, 'e');
 80196d8:	f005 b912 	b.w	801e900 <TFT_DrawChar>
 80196dc:	200001b8 	.word	0x200001b8
 80196e0:	200001c8 	.word	0x200001c8

080196e4 <GUI_TextMsgEn_LowRadiance>:

void GUI_TextMsgEn_LowRadiance(uint16_t X, uint16_t Y)
{
 80196e4:	b538      	push	{r3, r4, r5, lr}
 80196e6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80196e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80196ec:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80196ee:	f005 f843 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80196f2:	2063      	movs	r0, #99	; 0x63
 80196f4:	f005 f846 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80196f8:	482a      	ldr	r0, [pc, #168]	; (80197a4 <GUI_TextMsgEn_LowRadiance+0xc0>)
 80196fa:	f005 f837 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 80196fe:	4621      	mov	r1, r4
 8019700:	224c      	movs	r2, #76	; 0x4c
 8019702:	4628      	mov	r0, r5
 8019704:	f005 f8fc 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 8019708:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801970a:	4827      	ldr	r0, [pc, #156]	; (80197a8 <GUI_TextMsgEn_LowRadiance+0xc4>)
  TFT_DrawChar(X+16, Y+2, 'o');
 801970c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801970e:	f005 f82d 	bl	801e76c <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 8019712:	f105 0010 	add.w	r0, r5, #16
 8019716:	4621      	mov	r1, r4
 8019718:	226f      	movs	r2, #111	; 0x6f
 801971a:	b280      	uxth	r0, r0
 801971c:	f005 f8f0 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 8019720:	f105 001d 	add.w	r0, r5, #29
 8019724:	4621      	mov	r1, r4
 8019726:	2277      	movs	r2, #119	; 0x77
 8019728:	b280      	uxth	r0, r0
 801972a:	f005 f8e9 	bl	801e900 <TFT_DrawChar>
  
  TFT_DrawChar(X+54, Y+2, 'r');
 801972e:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8019732:	4621      	mov	r1, r4
 8019734:	2272      	movs	r2, #114	; 0x72
 8019736:	b280      	uxth	r0, r0
 8019738:	f005 f8e2 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+65, Y+2, 'a');
 801973c:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8019740:	4621      	mov	r1, r4
 8019742:	2261      	movs	r2, #97	; 0x61
 8019744:	b280      	uxth	r0, r0
 8019746:	f005 f8db 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+77, Y+2, 'd');
 801974a:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 801974e:	4621      	mov	r1, r4
 8019750:	2264      	movs	r2, #100	; 0x64
 8019752:	b280      	uxth	r0, r0
 8019754:	f005 f8d4 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'i');
 8019758:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 801975c:	4621      	mov	r1, r4
 801975e:	2269      	movs	r2, #105	; 0x69
 8019760:	b280      	uxth	r0, r0
 8019762:	f005 f8cd 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'a');
 8019766:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 801976a:	4621      	mov	r1, r4
 801976c:	2261      	movs	r2, #97	; 0x61
 801976e:	b280      	uxth	r0, r0
 8019770:	f005 f8c6 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+107, Y+2, 'n');
 8019774:	f105 006b 	add.w	r0, r5, #107	; 0x6b
 8019778:	4621      	mov	r1, r4
 801977a:	226e      	movs	r2, #110	; 0x6e
 801977c:	b280      	uxth	r0, r0
 801977e:	f005 f8bf 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'c');
 8019782:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8019786:	4621      	mov	r1, r4
 8019788:	2263      	movs	r2, #99	; 0x63
 801978a:	b280      	uxth	r0, r0
 801978c:	f005 f8b8 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'e');
 8019790:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8019794:	4621      	mov	r1, r4
 8019796:	2265      	movs	r2, #101	; 0x65
 8019798:	b280      	uxth	r0, r0
}
 801979a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+132, Y+2, 'e');
 801979e:	f005 b8af 	b.w	801e900 <TFT_DrawChar>
 80197a2:	bf00      	nop
 80197a4:	200001b8 	.word	0x200001b8
 80197a8:	200001c8 	.word	0x200001c8

080197ac <GUI_TextMsgEn_LowIrradiance>:

void GUI_TextMsgEn_LowIrradiance(uint16_t X, uint16_t Y)
{
 80197ac:	b538      	push	{r3, r4, r5, lr}
 80197ae:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80197b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80197b4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80197b6:	f004 ffdf 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80197ba:	2063      	movs	r0, #99	; 0x63
 80197bc:	f004 ffe2 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80197c0:	4831      	ldr	r0, [pc, #196]	; (8019888 <GUI_TextMsgEn_LowIrradiance+0xdc>)
 80197c2:	f004 ffd3 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 80197c6:	4621      	mov	r1, r4
 80197c8:	224c      	movs	r2, #76	; 0x4c
 80197ca:	4628      	mov	r0, r5
 80197cc:	f005 f898 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 80197d0:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80197d2:	482e      	ldr	r0, [pc, #184]	; (801988c <GUI_TextMsgEn_LowIrradiance+0xe0>)
  TFT_DrawChar(X+16, Y+2, 'o');
 80197d4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80197d6:	f004 ffc9 	bl	801e76c <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 80197da:	f105 0010 	add.w	r0, r5, #16
 80197de:	4621      	mov	r1, r4
 80197e0:	226f      	movs	r2, #111	; 0x6f
 80197e2:	b280      	uxth	r0, r0
 80197e4:	f005 f88c 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 80197e8:	f105 001d 	add.w	r0, r5, #29
 80197ec:	4621      	mov	r1, r4
 80197ee:	2277      	movs	r2, #119	; 0x77
 80197f0:	b280      	uxth	r0, r0
 80197f2:	f005 f885 	bl	801e900 <TFT_DrawChar>
	
  TFT_DrawChar(X+55, Y+2, 'i');
 80197f6:	f105 0037 	add.w	r0, r5, #55	; 0x37
 80197fa:	4621      	mov	r1, r4
 80197fc:	2269      	movs	r2, #105	; 0x69
 80197fe:	b280      	uxth	r0, r0
 8019800:	f005 f87e 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+63, Y+2, 'r');
 8019804:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8019808:	4621      	mov	r1, r4
 801980a:	2272      	movs	r2, #114	; 0x72
 801980c:	b280      	uxth	r0, r0
 801980e:	f005 f877 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+75, Y+2, 'r');
 8019812:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 8019816:	4621      	mov	r1, r4
 8019818:	2272      	movs	r2, #114	; 0x72
 801981a:	b280      	uxth	r0, r0
 801981c:	f005 f870 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+86, Y+2, 'a');
 8019820:	f105 0056 	add.w	r0, r5, #86	; 0x56
 8019824:	4621      	mov	r1, r4
 8019826:	2261      	movs	r2, #97	; 0x61
 8019828:	b280      	uxth	r0, r0
 801982a:	f005 f869 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+98, Y+2, 'd');
 801982e:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8019832:	4621      	mov	r1, r4
 8019834:	2264      	movs	r2, #100	; 0x64
 8019836:	b280      	uxth	r0, r0
 8019838:	f005 f862 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+111, Y+2, 'i');
 801983c:	f105 006f 	add.w	r0, r5, #111	; 0x6f
 8019840:	4621      	mov	r1, r4
 8019842:	2269      	movs	r2, #105	; 0x69
 8019844:	b280      	uxth	r0, r0
 8019846:	f005 f85b 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+116, Y+2, 'a');
 801984a:	f105 0074 	add.w	r0, r5, #116	; 0x74
 801984e:	4621      	mov	r1, r4
 8019850:	2261      	movs	r2, #97	; 0x61
 8019852:	b280      	uxth	r0, r0
 8019854:	f005 f854 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+128, Y+2, 'n');
 8019858:	f105 0080 	add.w	r0, r5, #128	; 0x80
 801985c:	4621      	mov	r1, r4
 801985e:	226e      	movs	r2, #110	; 0x6e
 8019860:	b280      	uxth	r0, r0
 8019862:	f005 f84d 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+141, Y+2, 'c');
 8019866:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 801986a:	4621      	mov	r1, r4
 801986c:	2263      	movs	r2, #99	; 0x63
 801986e:	b280      	uxth	r0, r0
 8019870:	f005 f846 	bl	801e900 <TFT_DrawChar>
  TFT_DrawChar(X+153, Y+2, 'e');
 8019874:	f105 0099 	add.w	r0, r5, #153	; 0x99
 8019878:	4621      	mov	r1, r4
 801987a:	2265      	movs	r2, #101	; 0x65
 801987c:	b280      	uxth	r0, r0
	
	
}
 801987e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+153, Y+2, 'e');
 8019882:	f005 b83d 	b.w	801e900 <TFT_DrawChar>
 8019886:	bf00      	nop
 8019888:	200001b8 	.word	0x200001b8
 801988c:	200001c8 	.word	0x200001c8

08019890 <GUI_TextEn_Luminance>:
void GUI_TextEn_Luminance(uint16_t X, uint16_t Y)
{
 8019890:	b538      	push	{r3, r4, r5, lr}
 8019892:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019894:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019898:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801989a:	f004 ff6d 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801989e:	2063      	movs	r0, #99	; 0x63
 80198a0:	f004 ff70 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80198a4:	4823      	ldr	r0, [pc, #140]	; (8019934 <GUI_TextEn_Luminance+0xa4>)
 80198a6:	f004 ff61 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 80198aa:	4621      	mov	r1, r4
 80198ac:	224c      	movs	r2, #76	; 0x4c
 80198ae:	4628      	mov	r0, r5
 80198b0:	f005 f826 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+13, Y+2, 'u');
 80198b4:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80198b6:	4820      	ldr	r0, [pc, #128]	; (8019938 <GUI_TextEn_Luminance+0xa8>)
	TFT_DrawChar(X+13, Y+2, 'u');
 80198b8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80198ba:	f004 ff57 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'u');
 80198be:	f105 000d 	add.w	r0, r5, #13
 80198c2:	4621      	mov	r1, r4
 80198c4:	2275      	movs	r2, #117	; 0x75
 80198c6:	b280      	uxth	r0, r0
 80198c8:	f005 f81a 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'm');
 80198cc:	f105 001b 	add.w	r0, r5, #27
 80198d0:	4621      	mov	r1, r4
 80198d2:	226d      	movs	r2, #109	; 0x6d
 80198d4:	b280      	uxth	r0, r0
 80198d6:	f005 f813 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 80198da:	f105 0029 	add.w	r0, r5, #41	; 0x29
 80198de:	4621      	mov	r1, r4
 80198e0:	2269      	movs	r2, #105	; 0x69
 80198e2:	b280      	uxth	r0, r0
 80198e4:	f005 f80c 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y+2, 'a');
 80198e8:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 80198ec:	4621      	mov	r1, r4
 80198ee:	2261      	movs	r2, #97	; 0x61
 80198f0:	b280      	uxth	r0, r0
 80198f2:	f005 f805 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'n');
 80198f6:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 80198fa:	4621      	mov	r1, r4
 80198fc:	226e      	movs	r2, #110	; 0x6e
 80198fe:	b280      	uxth	r0, r0
 8019900:	f004 fffe 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'n');
 8019904:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8019908:	4621      	mov	r1, r4
 801990a:	226e      	movs	r2, #110	; 0x6e
 801990c:	b280      	uxth	r0, r0
 801990e:	f004 fff7 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+84, Y+2, 'c');
 8019912:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8019916:	4621      	mov	r1, r4
 8019918:	2263      	movs	r2, #99	; 0x63
 801991a:	b280      	uxth	r0, r0
 801991c:	f004 fff0 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+96, Y+2, 'e');
 8019920:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8019924:	4621      	mov	r1, r4
 8019926:	2265      	movs	r2, #101	; 0x65
 8019928:	b280      	uxth	r0, r0
}
 801992a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+96, Y+2, 'e');
 801992e:	f004 bfe7 	b.w	801e900 <TFT_DrawChar>
 8019932:	bf00      	nop
 8019934:	200001b8 	.word	0x200001b8
 8019938:	200001c8 	.word	0x200001c8

0801993c <GUI_TextEn_Illuminance>:

void GUI_TextEn_Illuminance(uint16_t X, uint16_t Y)
{
 801993c:	b538      	push	{r3, r4, r5, lr}
 801993e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019940:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019944:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019946:	f004 ff17 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801994a:	2063      	movs	r0, #99	; 0x63
 801994c:	f004 ff1a 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019950:	482a      	ldr	r0, [pc, #168]	; (80199fc <GUI_TextEn_Illuminance+0xc0>)
 8019952:	f004 ff0b 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8019956:	4621      	mov	r1, r4
 8019958:	2249      	movs	r2, #73	; 0x49
 801995a:	4628      	mov	r0, r5
 801995c:	f004 ffd0 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+8, Y+2, 'l');
 8019960:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019962:	4827      	ldr	r0, [pc, #156]	; (8019a00 <GUI_TextEn_Illuminance+0xc4>)
	TFT_DrawChar(X+8, Y+2, 'l');
 8019964:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019966:	f004 ff01 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+8, Y+2, 'l');
 801996a:	f105 0008 	add.w	r0, r5, #8
 801996e:	4621      	mov	r1, r4
 8019970:	226c      	movs	r2, #108	; 0x6c
 8019972:	b280      	uxth	r0, r0
 8019974:	f004 ffc4 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y+2, 'l');
 8019978:	f105 000d 	add.w	r0, r5, #13
 801997c:	4621      	mov	r1, r4
 801997e:	226c      	movs	r2, #108	; 0x6c
 8019980:	b280      	uxth	r0, r0
 8019982:	f004 ffbd 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+18, Y+2, 'u');
 8019986:	f105 0012 	add.w	r0, r5, #18
 801998a:	4621      	mov	r1, r4
 801998c:	2275      	movs	r2, #117	; 0x75
 801998e:	b280      	uxth	r0, r0
 8019990:	f004 ffb6 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'm');
 8019994:	f105 0020 	add.w	r0, r5, #32
 8019998:	4621      	mov	r1, r4
 801999a:	226d      	movs	r2, #109	; 0x6d
 801999c:	b280      	uxth	r0, r0
 801999e:	f004 ffaf 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'i');
 80199a2:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 80199a6:	4621      	mov	r1, r4
 80199a8:	2269      	movs	r2, #105	; 0x69
 80199aa:	b280      	uxth	r0, r0
 80199ac:	f004 ffa8 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+64, Y+2, 'a');
 80199b0:	f105 0040 	add.w	r0, r5, #64	; 0x40
 80199b4:	4621      	mov	r1, r4
 80199b6:	2261      	movs	r2, #97	; 0x61
 80199b8:	b280      	uxth	r0, r0
 80199ba:	f004 ffa1 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+51, Y+2, 'n');
 80199be:	f105 0033 	add.w	r0, r5, #51	; 0x33
 80199c2:	4621      	mov	r1, r4
 80199c4:	226e      	movs	r2, #110	; 0x6e
 80199c6:	b280      	uxth	r0, r0
 80199c8:	f004 ff9a 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'n');
 80199cc:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 80199d0:	4621      	mov	r1, r4
 80199d2:	226e      	movs	r2, #110	; 0x6e
 80199d4:	b280      	uxth	r0, r0
 80199d6:	f004 ff93 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'c');
 80199da:	f105 0059 	add.w	r0, r5, #89	; 0x59
 80199de:	4621      	mov	r1, r4
 80199e0:	2263      	movs	r2, #99	; 0x63
 80199e2:	b280      	uxth	r0, r0
 80199e4:	f004 ff8c 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 80199e8:	f105 0065 	add.w	r0, r5, #101	; 0x65
 80199ec:	4621      	mov	r1, r4
 80199ee:	2265      	movs	r2, #101	; 0x65
 80199f0:	b280      	uxth	r0, r0
}
 80199f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+101, Y+2, 'e');
 80199f6:	f004 bf83 	b.w	801e900 <TFT_DrawChar>
 80199fa:	bf00      	nop
 80199fc:	200001b8 	.word	0x200001b8
 8019a00:	200001c8 	.word	0x200001c8

08019a04 <GUI_TextEn_Mode>:
void GUI_TextEn_Mode(uint16_t X, uint16_t Y)
{
 8019a04:	b538      	push	{r3, r4, r5, lr}
 8019a06:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019a08:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019a0c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019a0e:	f004 feb3 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019a12:	2063      	movs	r0, #99	; 0x63
 8019a14:	f004 feb6 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019a18:	4811      	ldr	r0, [pc, #68]	; (8019a60 <GUI_TextEn_Mode+0x5c>)
 8019a1a:	f004 fea7 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'M');
 8019a1e:	4621      	mov	r1, r4
 8019a20:	224d      	movs	r2, #77	; 0x4d
 8019a22:	4628      	mov	r0, r5
 8019a24:	f004 ff6c 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+19, Y+2, 'o');
 8019a28:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019a2a:	480e      	ldr	r0, [pc, #56]	; (8019a64 <GUI_TextEn_Mode+0x60>)
 8019a2c:	f004 fe9e 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, 'o');
 8019a30:	b2a4      	uxth	r4, r4
 8019a32:	f105 0013 	add.w	r0, r5, #19
 8019a36:	4621      	mov	r1, r4
 8019a38:	226f      	movs	r2, #111	; 0x6f
 8019a3a:	b280      	uxth	r0, r0
 8019a3c:	f004 ff60 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'd');
 8019a40:	f105 001e 	add.w	r0, r5, #30
 8019a44:	4621      	mov	r1, r4
 8019a46:	2264      	movs	r2, #100	; 0x64
 8019a48:	b280      	uxth	r0, r0
 8019a4a:	f004 ff59 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+43, Y+2, 'e');
 8019a4e:	f105 002b 	add.w	r0, r5, #43	; 0x2b
 8019a52:	4621      	mov	r1, r4
 8019a54:	2265      	movs	r2, #101	; 0x65
 8019a56:	b280      	uxth	r0, r0
}
 8019a58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+43, Y+2, 'e');
 8019a5c:	f004 bf50 	b.w	801e900 <TFT_DrawChar>
 8019a60:	200001b8 	.word	0x200001b8
 8019a64:	200001c8 	.word	0x200001c8

08019a68 <GUI_TextEn_PPFD>:

void GUI_TextEn_PPFD(uint16_t X, uint16_t Y)
{
 8019a68:	b538      	push	{r3, r4, r5, lr}
 8019a6a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019a6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019a70:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019a72:	f004 fe81 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019a76:	2063      	movs	r0, #99	; 0x63
 8019a78:	f004 fe84 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019a7c:	480f      	ldr	r0, [pc, #60]	; (8019abc <GUI_TextEn_PPFD+0x54>)
 8019a7e:	f004 fe75 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+48, Y, 'D');
 8019a82:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8019a86:	4629      	mov	r1, r5
 8019a88:	2244      	movs	r2, #68	; 0x44
 8019a8a:	b280      	uxth	r0, r0
 8019a8c:	f004 ff38 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'F');
 8019a90:	f104 001f 	add.w	r0, r4, #31
 8019a94:	4629      	mov	r1, r5
 8019a96:	2246      	movs	r2, #70	; 0x46
 8019a98:	b280      	uxth	r0, r0
 8019a9a:	f004 ff31 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 8019a9e:	f104 0010 	add.w	r0, r4, #16
 8019aa2:	4629      	mov	r1, r5
 8019aa4:	2250      	movs	r2, #80	; 0x50
 8019aa6:	b280      	uxth	r0, r0
 8019aa8:	f004 ff2a 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8019aac:	4629      	mov	r1, r5
 8019aae:	4620      	mov	r0, r4
 8019ab0:	2250      	movs	r2, #80	; 0x50
}
 8019ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 8019ab6:	f004 bf23 	b.w	801e900 <TFT_DrawChar>
 8019aba:	bf00      	nop
 8019abc:	200001b8 	.word	0x200001b8

08019ac0 <GUI_TextEn_PPL>:
void GUI_TextEn_PPL(uint16_t X, uint16_t Y)
{
 8019ac0:	b538      	push	{r3, r4, r5, lr}
 8019ac2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019ac4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019ac8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019aca:	f004 fe55 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019ace:	2063      	movs	r0, #99	; 0x63
 8019ad0:	f004 fe58 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019ad4:	480b      	ldr	r0, [pc, #44]	; (8019b04 <GUI_TextEn_PPL+0x44>)
 8019ad6:	f004 fe49 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+31, Y, 'L');
 8019ada:	f104 001f 	add.w	r0, r4, #31
 8019ade:	4629      	mov	r1, r5
 8019ae0:	224c      	movs	r2, #76	; 0x4c
 8019ae2:	b280      	uxth	r0, r0
 8019ae4:	f004 ff0c 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 8019ae8:	f104 0010 	add.w	r0, r4, #16
 8019aec:	4629      	mov	r1, r5
 8019aee:	2250      	movs	r2, #80	; 0x50
 8019af0:	b280      	uxth	r0, r0
 8019af2:	f004 ff05 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8019af6:	4629      	mov	r1, r5
 8019af8:	4620      	mov	r0, r4
 8019afa:	2250      	movs	r2, #80	; 0x50
}
 8019afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 8019b00:	f004 befe 	b.w	801e900 <TFT_DrawChar>
 8019b04:	200001b8 	.word	0x200001b8

08019b08 <GUI_TextEn_PARwavebands>:
void GUI_TextEn_PARwavebands(uint16_t X, uint16_t Y)
{
 8019b08:	b538      	push	{r3, r4, r5, lr}
 8019b0a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019b0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019b10:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019b12:	f004 fe31 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019b16:	2063      	movs	r0, #99	; 0x63
 8019b18:	f004 fe34 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019b1c:	482d      	ldr	r0, [pc, #180]	; (8019bd4 <GUI_TextEn_PARwavebands+0xcc>)
 8019b1e:	f004 fe25 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+32, Y, 'R');
 8019b22:	f105 0020 	add.w	r0, r5, #32
 8019b26:	4621      	mov	r1, r4
 8019b28:	2252      	movs	r2, #82	; 0x52
 8019b2a:	b280      	uxth	r0, r0
 8019b2c:	f004 fee8 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'A');
 8019b30:	f105 0010 	add.w	r0, r5, #16
 8019b34:	4621      	mov	r1, r4
 8019b36:	2241      	movs	r2, #65	; 0x41
 8019b38:	b280      	uxth	r0, r0
 8019b3a:	f004 fee1 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8019b3e:	4621      	mov	r1, r4
 8019b40:	2250      	movs	r2, #80	; 0x50
 8019b42:	4628      	mov	r0, r5
 8019b44:	f004 fedc 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+75, Y+2, 'a');
 8019b48:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019b4a:	4823      	ldr	r0, [pc, #140]	; (8019bd8 <GUI_TextEn_PARwavebands+0xd0>)
	TFT_DrawChar(X+75, Y+2, 'a');
 8019b4c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019b4e:	f004 fe0d 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+75, Y+2, 'a');
 8019b52:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 8019b56:	4621      	mov	r1, r4
 8019b58:	2261      	movs	r2, #97	; 0x61
 8019b5a:	b280      	uxth	r0, r0
 8019b5c:	f004 fed0 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+60, Y+2, 'w');
 8019b60:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8019b64:	4621      	mov	r1, r4
 8019b66:	2277      	movs	r2, #119	; 0x77
 8019b68:	b280      	uxth	r0, r0
 8019b6a:	f004 fec9 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 8019b6e:	f105 0065 	add.w	r0, r5, #101	; 0x65
 8019b72:	4621      	mov	r1, r4
 8019b74:	2265      	movs	r2, #101	; 0x65
 8019b76:	b280      	uxth	r0, r0
 8019b78:	f004 fec2 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'v');
 8019b7c:	f105 0057 	add.w	r0, r5, #87	; 0x57
 8019b80:	4621      	mov	r1, r4
 8019b82:	2276      	movs	r2, #118	; 0x76
 8019b84:	b280      	uxth	r0, r0
 8019b86:	f004 febb 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+126, Y+2, 'a');
 8019b8a:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 8019b8e:	4621      	mov	r1, r4
 8019b90:	2261      	movs	r2, #97	; 0x61
 8019b92:	b280      	uxth	r0, r0
 8019b94:	f004 feb4 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+113, Y+2, 'b');
 8019b98:	f105 0071 	add.w	r0, r5, #113	; 0x71
 8019b9c:	4621      	mov	r1, r4
 8019b9e:	2262      	movs	r2, #98	; 0x62
 8019ba0:	b280      	uxth	r0, r0
 8019ba2:	f004 fead 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+138, Y+2, 'n');
 8019ba6:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 8019baa:	4621      	mov	r1, r4
 8019bac:	226e      	movs	r2, #110	; 0x6e
 8019bae:	b280      	uxth	r0, r0
 8019bb0:	f004 fea6 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+151, Y+2, 'd');
 8019bb4:	f105 0097 	add.w	r0, r5, #151	; 0x97
 8019bb8:	4621      	mov	r1, r4
 8019bba:	2264      	movs	r2, #100	; 0x64
 8019bbc:	b280      	uxth	r0, r0
 8019bbe:	f004 fe9f 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+165, Y+2, 's');
 8019bc2:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
 8019bc6:	4621      	mov	r1, r4
 8019bc8:	2273      	movs	r2, #115	; 0x73
 8019bca:	b280      	uxth	r0, r0
}
 8019bcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+165, Y+2, 's');
 8019bd0:	f004 be96 	b.w	801e900 <TFT_DrawChar>
 8019bd4:	200001b8 	.word	0x200001b8
 8019bd8:	200001c8 	.word	0x200001c8

08019bdc <GUI_TextEn_B_G_R_FR>:
void GUI_TextEn_B_G_R_FR(uint16_t X, uint16_t Y)
{
 8019bdc:	b538      	push	{r3, r4, r5, lr}
 8019bde:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019be0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019be4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019be6:	f004 fdc7 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019bea:	2063      	movs	r0, #99	; 0x63
 8019bec:	f004 fdca 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019bf0:	481d      	ldr	r0, [pc, #116]	; (8019c68 <GUI_TextEn_B_G_R_FR+0x8c>)
 8019bf2:	f004 fdbb 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+15, Y, '-');
 8019bf6:	f104 000f 	add.w	r0, r4, #15
 8019bfa:	4629      	mov	r1, r5
 8019bfc:	222d      	movs	r2, #45	; 0x2d
 8019bfe:	b280      	uxth	r0, r0
 8019c00:	f004 fe7e 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'B');
 8019c04:	4629      	mov	r1, r5
 8019c06:	4620      	mov	r0, r4
 8019c08:	2242      	movs	r2, #66	; 0x42
 8019c0a:	f004 fe79 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y, '-');
 8019c0e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8019c12:	4629      	mov	r1, r5
 8019c14:	222d      	movs	r2, #45	; 0x2d
 8019c16:	b280      	uxth	r0, r0
 8019c18:	f004 fe72 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y, 'G');
 8019c1c:	f104 001d 	add.w	r0, r4, #29
 8019c20:	4629      	mov	r1, r5
 8019c22:	2247      	movs	r2, #71	; 0x47
 8019c24:	b280      	uxth	r0, r0
 8019c26:	f004 fe6b 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y, '-');
 8019c2a:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 8019c2e:	4629      	mov	r1, r5
 8019c30:	222d      	movs	r2, #45	; 0x2d
 8019c32:	b280      	uxth	r0, r0
 8019c34:	f004 fe64 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y, 'R');	
 8019c38:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8019c3c:	4629      	mov	r1, r5
 8019c3e:	2252      	movs	r2, #82	; 0x52
 8019c40:	b280      	uxth	r0, r0
 8019c42:	f004 fe5d 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y, 'F');
 8019c46:	f104 0057 	add.w	r0, r4, #87	; 0x57
 8019c4a:	4629      	mov	r1, r5
 8019c4c:	2246      	movs	r2, #70	; 0x46
 8019c4e:	b280      	uxth	r0, r0
 8019c50:	f004 fe56 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, 'R');
 8019c54:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8019c58:	4629      	mov	r1, r5
 8019c5a:	2252      	movs	r2, #82	; 0x52
 8019c5c:	b280      	uxth	r0, r0
}
 8019c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, 'R');
 8019c62:	f004 be4d 	b.w	801e900 <TFT_DrawChar>
 8019c66:	bf00      	nop
 8019c68:	200001b8 	.word	0x200001b8

08019c6c <GUI_TextEn_CCT>:
	TFT_DrawChar(X, Y, 'L');
	TFT_SetFont(&Font11EN_arch_big);
	TFT_DrawChar(X+17, Y+7, 'R');
}
void GUI_TextEn_CCT(uint16_t X, uint16_t Y)
{
 8019c6c:	b538      	push	{r3, r4, r5, lr}
 8019c6e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019c70:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019c74:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019c76:	f004 fd7f 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019c7a:	2063      	movs	r0, #99	; 0x63
 8019c7c:	f004 fd82 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8019c80:	480b      	ldr	r0, [pc, #44]	; (8019cb0 <GUI_TextEn_CCT+0x44>)
 8019c82:	f004 fd73 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C'-33);
 8019c86:	4629      	mov	r1, r5
 8019c88:	4620      	mov	r0, r4
 8019c8a:	2222      	movs	r2, #34	; 0x22
 8019c8c:	f004 fe38 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y, 'C'-33);
 8019c90:	f104 0017 	add.w	r0, r4, #23
 8019c94:	4629      	mov	r1, r5
 8019c96:	2222      	movs	r2, #34	; 0x22
 8019c98:	b280      	uxth	r0, r0
 8019c9a:	f004 fe31 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y, 'T'-33);
 8019c9e:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 8019ca2:	4629      	mov	r1, r5
 8019ca4:	2233      	movs	r2, #51	; 0x33
 8019ca6:	b280      	uxth	r0, r0
}
 8019ca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+46, Y, 'T'-33);
 8019cac:	f004 be28 	b.w	801e900 <TFT_DrawChar>
 8019cb0:	200001e8 	.word	0x200001e8

08019cb4 <GUI_TextEn_W_m2>:

/* Measure dimensions */
void GUI_TextEn_W_m2(uint16_t X, uint16_t Y)
{
 8019cb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019cb6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019cb8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019cbc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019cbe:	f004 fd5b 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019cc2:	2063      	movs	r0, #99	; 0x63
 8019cc4:	f004 fd5e 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8019cc8:	4815      	ldr	r0, [pc, #84]	; (8019d20 <GUI_TextEn_W_m2+0x6c>)
 8019cca:	f004 fd4f 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+3, Y, 'W');
 8019cce:	1ce8      	adds	r0, r5, #3
 8019cd0:	4621      	mov	r1, r4
 8019cd2:	2257      	movs	r2, #87	; 0x57
 8019cd4:	b280      	uxth	r0, r0
 8019cd6:	f004 fe13 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+1, Y+17, 'm');
 8019cda:	f104 0111 	add.w	r1, r4, #17
 8019cde:	1c68      	adds	r0, r5, #1
 8019ce0:	226d      	movs	r2, #109	; 0x6d
 8019ce2:	b289      	uxth	r1, r1
 8019ce4:	b280      	uxth	r0, r0
 8019ce6:	f004 fe0b 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font6EN_arch_big);
 8019cea:	480e      	ldr	r0, [pc, #56]	; (8019d24 <GUI_TextEn_W_m2+0x70>)
 8019cec:	f004 fd3e 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+11, Y+16, '2');	
 8019cf0:	f104 0110 	add.w	r1, r4, #16
 8019cf4:	f105 000b 	add.w	r0, r5, #11
 8019cf8:	2232      	movs	r2, #50	; 0x32
 8019cfa:	b289      	uxth	r1, r1
 8019cfc:	b280      	uxth	r0, r0
 8019cfe:	f004 fdff 	bl	801e900 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+17, Y+14, TFT_White);
 8019d02:	f104 030e 	add.w	r3, r4, #14
 8019d06:	b29b      	uxth	r3, r3
 8019d08:	f105 0211 	add.w	r2, r5, #17
 8019d0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019d10:	9100      	str	r1, [sp, #0]
 8019d12:	b292      	uxth	r2, r2
 8019d14:	4619      	mov	r1, r3
 8019d16:	4628      	mov	r0, r5
 8019d18:	f004 faa2 	bl	801e260 <TFT_DrawLine>
}
 8019d1c:	b003      	add	sp, #12
 8019d1e:	bd30      	pop	{r4, r5, pc}
 8019d20:	20000220 	.word	0x20000220
 8019d24:	20000210 	.word	0x20000210

08019d28 <GUI_TextEn_W_m2_sr>:
void GUI_TextEn_W_m2_sr(uint16_t X, uint16_t Y)
{
 8019d28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019d2a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019d2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019d30:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019d32:	f004 fd21 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019d36:	2063      	movs	r0, #99	; 0x63
 8019d38:	f004 fd24 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8019d3c:	4824      	ldr	r0, [pc, #144]	; (8019dd0 <GUI_TextEn_W_m2_sr+0xa8>)
 8019d3e:	f004 fd15 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+12, Y, 'W');
 8019d42:	f105 000c 	add.w	r0, r5, #12
 8019d46:	4621      	mov	r1, r4
 8019d48:	2257      	movs	r2, #87	; 0x57
 8019d4a:	b280      	uxth	r0, r0
	TFT_DrawChar(X+20, Y+17, 'm');
 8019d4c:	f104 0611 	add.w	r6, r4, #17
	TFT_DrawChar(X+12, Y, 'W');
 8019d50:	f004 fdd6 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+20, Y+17, 'm');
 8019d54:	b2b6      	uxth	r6, r6
 8019d56:	f105 0014 	add.w	r0, r5, #20
 8019d5a:	4631      	mov	r1, r6
 8019d5c:	226d      	movs	r2, #109	; 0x6d
 8019d5e:	b280      	uxth	r0, r0
 8019d60:	f004 fdce 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X, Y+17, 's');
 8019d64:	4631      	mov	r1, r6
 8019d66:	4628      	mov	r0, r5
 8019d68:	2273      	movs	r2, #115	; 0x73
 8019d6a:	f004 fdc9 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+7, Y+17, 'r');
 8019d6e:	1de8      	adds	r0, r5, #7
 8019d70:	4631      	mov	r1, r6
 8019d72:	2272      	movs	r2, #114	; 0x72
 8019d74:	b280      	uxth	r0, r0
 8019d76:	f004 fdc3 	bl	801e900 <TFT_DrawChar>
	TFT_FillRectangle(X+17,Y+23,X+18,Y+24,TFT_White);
 8019d7a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019d7e:	f104 0318 	add.w	r3, r4, #24
 8019d82:	f105 0212 	add.w	r2, r5, #18
 8019d86:	f104 0117 	add.w	r1, r4, #23
 8019d8a:	f105 0011 	add.w	r0, r5, #17
 8019d8e:	b29b      	uxth	r3, r3
 8019d90:	b292      	uxth	r2, r2
 8019d92:	b289      	uxth	r1, r1
 8019d94:	9600      	str	r6, [sp, #0]
 8019d96:	b280      	uxth	r0, r0
 8019d98:	f004 fabf 	bl	801e31a <TFT_FillRectangle>
	TFT_SetFont(&Font6EN_arch_big);
 8019d9c:	480d      	ldr	r0, [pc, #52]	; (8019dd4 <GUI_TextEn_W_m2_sr+0xac>)
 8019d9e:	f004 fce5 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+30, Y+16, '2');	
 8019da2:	f104 0110 	add.w	r1, r4, #16
 8019da6:	f105 001e 	add.w	r0, r5, #30
 8019daa:	2232      	movs	r2, #50	; 0x32
 8019dac:	b289      	uxth	r1, r1
 8019dae:	b280      	uxth	r0, r0
 8019db0:	f004 fda6 	bl	801e900 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+36, Y+14, TFT_White);
 8019db4:	f104 030e 	add.w	r3, r4, #14
 8019db8:	b29b      	uxth	r3, r3
 8019dba:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8019dbe:	9600      	str	r6, [sp, #0]
 8019dc0:	b292      	uxth	r2, r2
 8019dc2:	4619      	mov	r1, r3
 8019dc4:	4628      	mov	r0, r5
 8019dc6:	f004 fa4b 	bl	801e260 <TFT_DrawLine>
}
 8019dca:	b002      	add	sp, #8
 8019dcc:	bd70      	pop	{r4, r5, r6, pc}
 8019dce:	bf00      	nop
 8019dd0:	20000220 	.word	0x20000220
 8019dd4:	20000210 	.word	0x20000210

08019dd8 <GUI_TextEn_cd_m2>:
void GUI_TextEn_cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 8019dd8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019ddc:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019dde:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019de2:	460d      	mov	r5, r1
 8019de4:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 8019de6:	f004 fcc7 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019dea:	2063      	movs	r0, #99	; 0x63
 8019dec:	f004 fcca 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8019df0:	482f      	ldr	r0, [pc, #188]	; (8019eb0 <GUI_TextEn_cd_m2+0xd8>)
 8019df2:	f004 fcbb 	bl	801e76c <TFT_SetFont>
	
	if (deg==1)
 8019df6:	2e01      	cmp	r6, #1
 8019df8:	f105 0911 	add.w	r9, r5, #17
 8019dfc:	f105 0810 	add.w	r8, r5, #16
 8019e00:	f105 060e 	add.w	r6, r5, #14
 8019e04:	d131      	bne.n	8019e6a <GUI_TextEn_cd_m2+0x92>
	{
		TFT_DrawChar(X, Y, 'k');
 8019e06:	226b      	movs	r2, #107	; 0x6b
 8019e08:	4629      	mov	r1, r5
 8019e0a:	4620      	mov	r0, r4
 8019e0c:	f004 fd78 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+7, Y, 'c');
 8019e10:	1de0      	adds	r0, r4, #7
 8019e12:	2263      	movs	r2, #99	; 0x63
 8019e14:	4629      	mov	r1, r5
 8019e16:	b280      	uxth	r0, r0
 8019e18:	f004 fd72 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+14, Y, 'd');
 8019e1c:	f104 000e 	add.w	r0, r4, #14
 8019e20:	2264      	movs	r2, #100	; 0x64
 8019e22:	4629      	mov	r1, r5
 8019e24:	b280      	uxth	r0, r0
 8019e26:	f004 fd6b 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(X+5, Y+17, 'm');
 8019e2a:	1d60      	adds	r0, r4, #5
 8019e2c:	226d      	movs	r2, #109	; 0x6d
 8019e2e:	fa1f f189 	uxth.w	r1, r9
 8019e32:	b280      	uxth	r0, r0
 8019e34:	f004 fd64 	bl	801e900 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 8019e38:	481e      	ldr	r0, [pc, #120]	; (8019eb4 <GUI_TextEn_cd_m2+0xdc>)
 8019e3a:	f004 fc97 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(X+15, Y+16, '2');	
 8019e3e:	f104 000f 	add.w	r0, r4, #15
 8019e42:	2232      	movs	r2, #50	; 0x32
 8019e44:	fa1f f188 	uxth.w	r1, r8
 8019e48:	b280      	uxth	r0, r0
 8019e4a:	f004 fd59 	bl	801e900 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+22, Y+14, TFT_White);
 8019e4e:	b2b3      	uxth	r3, r6
 8019e50:	f104 0216 	add.w	r2, r4, #22
		TFT_DrawChar(X+9, Y, 'd');
		
		TFT_DrawChar(X+2, Y+17, 'm');
		TFT_SetFont(&Font6EN_arch_big);
		TFT_DrawChar(X+12, Y+16, '2');	
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 8019e54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019e58:	9100      	str	r1, [sp, #0]
 8019e5a:	b292      	uxth	r2, r2
 8019e5c:	4619      	mov	r1, r3
 8019e5e:	4620      	mov	r0, r4
 8019e60:	f004 f9fe 	bl	801e260 <TFT_DrawLine>
	}
}
 8019e64:	b003      	add	sp, #12
 8019e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		TFT_DrawChar(X+2, Y, 'c');
 8019e6a:	1ca7      	adds	r7, r4, #2
 8019e6c:	b2bf      	uxth	r7, r7
 8019e6e:	2263      	movs	r2, #99	; 0x63
 8019e70:	4629      	mov	r1, r5
 8019e72:	4638      	mov	r0, r7
 8019e74:	f004 fd44 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+9, Y, 'd');
 8019e78:	f104 0009 	add.w	r0, r4, #9
 8019e7c:	2264      	movs	r2, #100	; 0x64
 8019e7e:	4629      	mov	r1, r5
 8019e80:	b280      	uxth	r0, r0
 8019e82:	f004 fd3d 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+2, Y+17, 'm');
 8019e86:	226d      	movs	r2, #109	; 0x6d
 8019e88:	fa1f f189 	uxth.w	r1, r9
 8019e8c:	4638      	mov	r0, r7
 8019e8e:	f004 fd37 	bl	801e900 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 8019e92:	4808      	ldr	r0, [pc, #32]	; (8019eb4 <GUI_TextEn_cd_m2+0xdc>)
 8019e94:	f004 fc6a 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(X+12, Y+16, '2');	
 8019e98:	f104 000c 	add.w	r0, r4, #12
 8019e9c:	2232      	movs	r2, #50	; 0x32
 8019e9e:	fa1f f188 	uxth.w	r1, r8
 8019ea2:	b280      	uxth	r0, r0
 8019ea4:	f004 fd2c 	bl	801e900 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 8019ea8:	b2b3      	uxth	r3, r6
 8019eaa:	f104 0213 	add.w	r2, r4, #19
 8019eae:	e7d1      	b.n	8019e54 <GUI_TextEn_cd_m2+0x7c>
 8019eb0:	20000220 	.word	0x20000220
 8019eb4:	20000210 	.word	0x20000210

08019eb8 <GUI_TextEn_Green>:
	TFT_DrawChar(X+23, Y+16, '2');

  TFT_DrawLine(X, Y+14, X+30, Y+14, TFT_White);	
}
void GUI_TextEn_Green(uint16_t X, uint16_t Y)
{
 8019eb8:	b538      	push	{r3, r4, r5, lr}
 8019eba:	4605      	mov	r5, r0
 8019ebc:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 8019ebe:	4815      	ldr	r0, [pc, #84]	; (8019f14 <GUI_TextEn_Green+0x5c>)
 8019ec0:	f004 fc54 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(X, Y, 'G');
 8019ec4:	4621      	mov	r1, r4
 8019ec6:	2247      	movs	r2, #71	; 0x47
 8019ec8:	4628      	mov	r0, r5
 8019eca:	f004 fd19 	bl	801e900 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+15, Y+2, 'r');
 8019ece:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 8019ed0:	4811      	ldr	r0, [pc, #68]	; (8019f18 <GUI_TextEn_Green+0x60>)
 8019ed2:	f004 fc4b 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'r');
 8019ed6:	b2a4      	uxth	r4, r4
 8019ed8:	f105 000f 	add.w	r0, r5, #15
 8019edc:	4621      	mov	r1, r4
 8019ede:	2272      	movs	r2, #114	; 0x72
 8019ee0:	b280      	uxth	r0, r0
 8019ee2:	f004 fd0d 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+26, Y+2, 'e');
 8019ee6:	f105 001a 	add.w	r0, r5, #26
 8019eea:	4621      	mov	r1, r4
 8019eec:	2265      	movs	r2, #101	; 0x65
 8019eee:	b280      	uxth	r0, r0
 8019ef0:	f004 fd06 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+38, Y+2, 'e');
 8019ef4:	f105 0026 	add.w	r0, r5, #38	; 0x26
 8019ef8:	4621      	mov	r1, r4
 8019efa:	2265      	movs	r2, #101	; 0x65
 8019efc:	b280      	uxth	r0, r0
 8019efe:	f004 fcff 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+50, Y+2, 'n');
 8019f02:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8019f06:	4621      	mov	r1, r4
 8019f08:	226e      	movs	r2, #110	; 0x6e
 8019f0a:	b280      	uxth	r0, r0
}
 8019f0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+50, Y+2, 'n');
 8019f10:	f004 bcf6 	b.w	801e900 <TFT_DrawChar>
 8019f14:	200001b0 	.word	0x200001b0
 8019f18:	200001c0 	.word	0x200001c0

08019f1c <GUI_TextEn_Blue>:
void GUI_TextEn_Blue(uint16_t X, uint16_t Y)
{
 8019f1c:	b538      	push	{r3, r4, r5, lr}
 8019f1e:	4605      	mov	r5, r0
 8019f20:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 8019f22:	4812      	ldr	r0, [pc, #72]	; (8019f6c <GUI_TextEn_Blue+0x50>)
 8019f24:	f004 fc22 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(X, Y, 'B');
 8019f28:	4621      	mov	r1, r4
 8019f2a:	2242      	movs	r2, #66	; 0x42
 8019f2c:	4628      	mov	r0, r5
 8019f2e:	f004 fce7 	bl	801e900 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small_A);
		TFT_DrawChar(X+15, Y+2, 'l');
 8019f32:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small_A);
 8019f34:	480e      	ldr	r0, [pc, #56]	; (8019f70 <GUI_TextEn_Blue+0x54>)
 8019f36:	f004 fc19 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'l');
 8019f3a:	b2a4      	uxth	r4, r4
 8019f3c:	f105 000f 	add.w	r0, r5, #15
 8019f40:	4621      	mov	r1, r4
 8019f42:	226c      	movs	r2, #108	; 0x6c
 8019f44:	b280      	uxth	r0, r0
 8019f46:	f004 fcdb 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+20, Y+2, 'u');
 8019f4a:	f105 0014 	add.w	r0, r5, #20
 8019f4e:	4621      	mov	r1, r4
 8019f50:	2275      	movs	r2, #117	; 0x75
 8019f52:	b280      	uxth	r0, r0
 8019f54:	f004 fcd4 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+33, Y+2, 'e');
 8019f58:	f105 0021 	add.w	r0, r5, #33	; 0x21
 8019f5c:	4621      	mov	r1, r4
 8019f5e:	2265      	movs	r2, #101	; 0x65
 8019f60:	b280      	uxth	r0, r0
}
 8019f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+33, Y+2, 'e');
 8019f66:	f004 bccb 	b.w	801e900 <TFT_DrawChar>
 8019f6a:	bf00      	nop
 8019f6c:	200001b0 	.word	0x200001b0
 8019f70:	200001c8 	.word	0x200001c8

08019f74 <GUI_TextEn_Red>:
void GUI_TextEn_Red(uint16_t X, uint16_t Y)
{
 8019f74:	b538      	push	{r3, r4, r5, lr}
 8019f76:	4605      	mov	r5, r0
 8019f78:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 8019f7a:	480e      	ldr	r0, [pc, #56]	; (8019fb4 <GUI_TextEn_Red+0x40>)
 8019f7c:	f004 fbf6 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(X, Y, 'R');
 8019f80:	4621      	mov	r1, r4
 8019f82:	2252      	movs	r2, #82	; 0x52
 8019f84:	4628      	mov	r0, r5
 8019f86:	f004 fcbb 	bl	801e900 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+16, Y+2, 'e');
 8019f8a:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 8019f8c:	480a      	ldr	r0, [pc, #40]	; (8019fb8 <GUI_TextEn_Red+0x44>)
 8019f8e:	f004 fbed 	bl	801e76c <TFT_SetFont>
		TFT_DrawChar(X+16, Y+2, 'e');
 8019f92:	b2a4      	uxth	r4, r4
 8019f94:	f105 0010 	add.w	r0, r5, #16
 8019f98:	4621      	mov	r1, r4
 8019f9a:	2265      	movs	r2, #101	; 0x65
 8019f9c:	b280      	uxth	r0, r0
 8019f9e:	f004 fcaf 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(X+29, Y+2, 'd');
 8019fa2:	f105 001d 	add.w	r0, r5, #29
 8019fa6:	4621      	mov	r1, r4
 8019fa8:	2264      	movs	r2, #100	; 0x64
 8019faa:	b280      	uxth	r0, r0
}
 8019fac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+29, Y+2, 'd');
 8019fb0:	f004 bca6 	b.w	801e900 <TFT_DrawChar>
 8019fb4:	200001b0 	.word	0x200001b0
 8019fb8:	200001c0 	.word	0x200001c0

08019fbc <GUI_TextEn_WriteSD>:

void GUI_TextEn_WriteSD(uint16_t X, uint16_t Y)
{
 8019fbc:	b538      	push	{r3, r4, r5, lr}
 8019fbe:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019fc0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019fc4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019fc6:	f004 fbd7 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019fca:	2063      	movs	r0, #99	; 0x63
 8019fcc:	f004 fbda 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8019fd0:	4815      	ldr	r0, [pc, #84]	; (801a028 <GUI_TextEn_WriteSD+0x6c>)
 8019fd2:	f004 fbcb 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'W');
 8019fd6:	4621      	mov	r1, r4
 8019fd8:	2257      	movs	r2, #87	; 0x57
 8019fda:	4628      	mov	r0, r5
 8019fdc:	f004 fc90 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+17, Y+2, 'r');
 8019fe0:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8019fe2:	4812      	ldr	r0, [pc, #72]	; (801a02c <GUI_TextEn_WriteSD+0x70>)
 8019fe4:	f004 fbc2 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'r');
 8019fe8:	b2a4      	uxth	r4, r4
 8019fea:	f105 0011 	add.w	r0, r5, #17
 8019fee:	4621      	mov	r1, r4
 8019ff0:	2272      	movs	r2, #114	; 0x72
 8019ff2:	b280      	uxth	r0, r0
 8019ff4:	f004 fc84 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'i');
 8019ff8:	f105 001c 	add.w	r0, r5, #28
 8019ffc:	4621      	mov	r1, r4
 8019ffe:	2269      	movs	r2, #105	; 0x69
 801a000:	b280      	uxth	r0, r0
 801a002:	f004 fc7d 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 't');
 801a006:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801a00a:	4621      	mov	r1, r4
 801a00c:	2274      	movs	r2, #116	; 0x74
 801a00e:	b280      	uxth	r0, r0
 801a010:	f004 fc76 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 'e');
 801a014:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801a018:	4621      	mov	r1, r4
 801a01a:	2265      	movs	r2, #101	; 0x65
 801a01c:	b280      	uxth	r0, r0
}
 801a01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+53, Y+2, 'e');
 801a022:	f004 bc6d 	b.w	801e900 <TFT_DrawChar>
 801a026:	bf00      	nop
 801a028:	200001b0 	.word	0x200001b0
 801a02c:	200001c0 	.word	0x200001c0

0801a030 <GUI_TextEn_Info_Callibration>:


void GUI_TextEn_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 801a030:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a032:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 801a034:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801a038:	2300      	movs	r3, #0
 801a03a:	9300      	str	r3, [sp, #0]
 801a03c:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801a040:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 801a042:	f004 fb99 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a046:	2063      	movs	r0, #99	; 0x63
 801a048:	f004 fb9c 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801a04c:	4834      	ldr	r0, [pc, #208]	; (801a120 <GUI_TextEn_Info_Callibration+0xf0>)
	TFT_DrawChar(X+89, Y+2, 't');
	TFT_DrawChar(X+97, Y+2, 'i');
	TFT_DrawChar(X+108, Y+2, 'o');
	TFT_DrawChar(X+120, Y+2, 'n');
	
	sprintf (buffer, "%02u",  date);
 801a04e:	4d35      	ldr	r5, [pc, #212]	; (801a124 <GUI_TextEn_Info_Callibration+0xf4>)
	TFT_SetFont(&Font16EN_arch_big);
 801a050:	f004 fb8c 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 801a054:	2243      	movs	r2, #67	; 0x43
 801a056:	2164      	movs	r1, #100	; 0x64
 801a058:	2046      	movs	r0, #70	; 0x46
 801a05a:	f004 fc51 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801a05e:	4832      	ldr	r0, [pc, #200]	; (801a128 <GUI_TextEn_Info_Callibration+0xf8>)
 801a060:	f004 fb84 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 801a064:	2261      	movs	r2, #97	; 0x61
 801a066:	2166      	movs	r1, #102	; 0x66
 801a068:	2056      	movs	r0, #86	; 0x56
 801a06a:	f004 fc49 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'l');
 801a06e:	226c      	movs	r2, #108	; 0x6c
 801a070:	2166      	movs	r1, #102	; 0x66
 801a072:	2063      	movs	r0, #99	; 0x63
 801a074:	f004 fc44 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+38, Y+2, 'i');
 801a078:	2269      	movs	r2, #105	; 0x69
 801a07a:	2166      	movs	r1, #102	; 0x66
 801a07c:	206c      	movs	r0, #108	; 0x6c
 801a07e:	f004 fc3f 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+2, 'b');
 801a082:	2262      	movs	r2, #98	; 0x62
 801a084:	2166      	movs	r1, #102	; 0x66
 801a086:	2078      	movs	r0, #120	; 0x78
 801a088:	f004 fc3a 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y+2, 'r');
 801a08c:	2272      	movs	r2, #114	; 0x72
 801a08e:	2166      	movs	r1, #102	; 0x66
 801a090:	2085      	movs	r0, #133	; 0x85
 801a092:	f004 fc35 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'a');
 801a096:	2261      	movs	r2, #97	; 0x61
 801a098:	2166      	movs	r1, #102	; 0x66
 801a09a:	2092      	movs	r0, #146	; 0x92
 801a09c:	f004 fc30 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 't');
 801a0a0:	2274      	movs	r2, #116	; 0x74
 801a0a2:	2166      	movs	r1, #102	; 0x66
 801a0a4:	209f      	movs	r0, #159	; 0x9f
 801a0a6:	f004 fc2b 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+97, Y+2, 'i');
 801a0aa:	2269      	movs	r2, #105	; 0x69
 801a0ac:	2166      	movs	r1, #102	; 0x66
 801a0ae:	20a7      	movs	r0, #167	; 0xa7
 801a0b0:	f004 fc26 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+108, Y+2, 'o');
 801a0b4:	226f      	movs	r2, #111	; 0x6f
 801a0b6:	2166      	movs	r1, #102	; 0x66
 801a0b8:	20b2      	movs	r0, #178	; 0xb2
 801a0ba:	f004 fc21 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y+2, 'n');
 801a0be:	226e      	movs	r2, #110	; 0x6e
 801a0c0:	2166      	movs	r1, #102	; 0x66
 801a0c2:	20be      	movs	r0, #190	; 0xbe
 801a0c4:	f004 fc1c 	bl	801e900 <TFT_DrawChar>
	sprintf (buffer, "%02u",  date);
 801a0c8:	4622      	mov	r2, r4
 801a0ca:	4629      	mov	r1, r5
 801a0cc:	4668      	mov	r0, sp
 801a0ce:	f007 fe67 	bl	8021da0 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801a0d2:	4816      	ldr	r0, [pc, #88]	; (801a12c <GUI_TextEn_Info_Callibration+0xfc>)
 801a0d4:	f004 fb4a 	bl	801e76c <TFT_SetFont>
	buffer[2] = '.';
 801a0d8:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a0da:	2303      	movs	r3, #3
 801a0dc:	466a      	mov	r2, sp
 801a0de:	2182      	movs	r1, #130	; 0x82
 801a0e0:	201e      	movs	r0, #30
	buffer[2] = '.';
 801a0e2:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a0e6:	f004 fc63 	bl	801e9b0 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 801a0ea:	4632      	mov	r2, r6
 801a0ec:	4629      	mov	r1, r5
 801a0ee:	4668      	mov	r0, sp
 801a0f0:	f007 fe56 	bl	8021da0 <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a0f4:	2303      	movs	r3, #3
 801a0f6:	466a      	mov	r2, sp
 801a0f8:	2182      	movs	r1, #130	; 0x82
 801a0fa:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 801a0fc:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a100:	f004 fc56 	bl	801e9b0 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 801a104:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801a108:	4909      	ldr	r1, [pc, #36]	; (801a130 <GUI_TextEn_Info_Callibration+0x100>)
 801a10a:	4668      	mov	r0, sp
 801a10c:	f007 fe48 	bl	8021da0 <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a110:	2303      	movs	r3, #3
 801a112:	466a      	mov	r2, sp
 801a114:	2182      	movs	r1, #130	; 0x82
 801a116:	209b      	movs	r0, #155	; 0x9b
 801a118:	f004 fc4a 	bl	801e9b0 <TFT_DisplayString>
}
 801a11c:	b002      	add	sp, #8
 801a11e:	bd70      	pop	{r4, r5, r6, pc}
 801a120:	200001b0 	.word	0x200001b0
 801a124:	080337fc 	.word	0x080337fc
 801a128:	200001c0 	.word	0x200001c0
 801a12c:	200001f0 	.word	0x200001f0
 801a130:	08033801 	.word	0x08033801

0801a134 <GUI_TextEn_Info_Serial>:

void GUI_TextEn_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 801a134:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a136:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 801a138:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801a13c:	2300      	movs	r3, #0
 801a13e:	9300      	str	r3, [sp, #0]
 801a140:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801a144:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 801a146:	f004 fb17 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a14a:	2063      	movs	r0, #99	; 0x63
 801a14c:	f004 fb1a 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801a150:	482e      	ldr	r0, [pc, #184]	; (801a20c <GUI_TextEn_Info_Serial+0xd8>)
 801a152:	f004 fb0b 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'S');
 801a156:	2253      	movs	r2, #83	; 0x53
 801a158:	21c8      	movs	r1, #200	; 0xc8
 801a15a:	203c      	movs	r0, #60	; 0x3c
 801a15c:	f004 fbd0 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801a160:	482b      	ldr	r0, [pc, #172]	; (801a210 <GUI_TextEn_Info_Serial+0xdc>)
 801a162:	f004 fb03 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'e');
 801a166:	2265      	movs	r2, #101	; 0x65
 801a168:	21ca      	movs	r1, #202	; 0xca
 801a16a:	204d      	movs	r0, #77	; 0x4d
 801a16c:	f004 fbc8 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'r');
 801a170:	2272      	movs	r2, #114	; 0x72
 801a172:	21ca      	movs	r1, #202	; 0xca
 801a174:	205a      	movs	r0, #90	; 0x5a
 801a176:	f004 fbc3 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'i');
 801a17a:	2269      	movs	r2, #105	; 0x69
 801a17c:	21ca      	movs	r1, #202	; 0xca
 801a17e:	2066      	movs	r0, #102	; 0x66
 801a180:	f004 fbbe 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+54, Y+2, 'a');
 801a184:	2261      	movs	r2, #97	; 0x61
 801a186:	21ca      	movs	r1, #202	; 0xca
 801a188:	2072      	movs	r0, #114	; 0x72
 801a18a:	f004 fbb9 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+67, Y+2, 'l');
 801a18e:	226c      	movs	r2, #108	; 0x6c
 801a190:	21ca      	movs	r1, #202	; 0xca
 801a192:	207f      	movs	r0, #127	; 0x7f
 801a194:	f004 fbb4 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'n');
 801a198:	226e      	movs	r2, #110	; 0x6e
 801a19a:	21ca      	movs	r1, #202	; 0xca
 801a19c:	2095      	movs	r0, #149	; 0x95
 801a19e:	f004 fbaf 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+102, Y+2, 'u');
 801a1a2:	2275      	movs	r2, #117	; 0x75
 801a1a4:	21ca      	movs	r1, #202	; 0xca
 801a1a6:	20a2      	movs	r0, #162	; 0xa2
 801a1a8:	f004 fbaa 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+115, Y+2, 'm');
 801a1ac:	226d      	movs	r2, #109	; 0x6d
 801a1ae:	21ca      	movs	r1, #202	; 0xca
 801a1b0:	20af      	movs	r0, #175	; 0xaf
 801a1b2:	f004 fba5 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+128, Y+2, 'b');
 801a1b6:	2262      	movs	r2, #98	; 0x62
 801a1b8:	21ca      	movs	r1, #202	; 0xca
 801a1ba:	20bc      	movs	r0, #188	; 0xbc
 801a1bc:	f004 fba0 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+141, Y+2, 'e');
 801a1c0:	2265      	movs	r2, #101	; 0x65
 801a1c2:	21ca      	movs	r1, #202	; 0xca
 801a1c4:	20c9      	movs	r0, #201	; 0xc9
 801a1c6:	f004 fb9b 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+154, Y+2, 'r');
 801a1ca:	2272      	movs	r2, #114	; 0x72
 801a1cc:	21ca      	movs	r1, #202	; 0xca
 801a1ce:	20d6      	movs	r0, #214	; 0xd6
 801a1d0:	f004 fb96 	bl	801e900 <TFT_DrawChar>

	
	sprintf (buffer, "%u",  Part);
 801a1d4:	462a      	mov	r2, r5
 801a1d6:	490f      	ldr	r1, [pc, #60]	; (801a214 <GUI_TextEn_Info_Serial+0xe0>)
 801a1d8:	4668      	mov	r0, sp
 801a1da:	f007 fde1 	bl	8021da0 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801a1de:	480e      	ldr	r0, [pc, #56]	; (801a218 <GUI_TextEn_Info_Serial+0xe4>)
 801a1e0:	f004 fac4 	bl	801e76c <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a1e4:	2303      	movs	r3, #3
 801a1e6:	466a      	mov	r2, sp
 801a1e8:	21e6      	movs	r1, #230	; 0xe6
 801a1ea:	2028      	movs	r0, #40	; 0x28
 801a1ec:	f004 fbe0 	bl	801e9b0 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 801a1f0:	4622      	mov	r2, r4
 801a1f2:	490a      	ldr	r1, [pc, #40]	; (801a21c <GUI_TextEn_Info_Serial+0xe8>)
 801a1f4:	4668      	mov	r0, sp
 801a1f6:	f007 fdd3 	bl	8021da0 <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a1fa:	2303      	movs	r3, #3
 801a1fc:	466a      	mov	r2, sp
 801a1fe:	21e6      	movs	r1, #230	; 0xe6
 801a200:	2087      	movs	r0, #135	; 0x87
 801a202:	f004 fbd5 	bl	801e9b0 <TFT_DisplayString>
}
 801a206:	b003      	add	sp, #12
 801a208:	bd30      	pop	{r4, r5, pc}
 801a20a:	bf00      	nop
 801a20c:	200001b0 	.word	0x200001b0
 801a210:	200001c0 	.word	0x200001c0
 801a214:	08033805 	.word	0x08033805
 801a218:	200001f0 	.word	0x200001f0
 801a21c:	08033808 	.word	0x08033808

0801a220 <GUI_TextEn_Info_Ver>:

void GUI_TextEn_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 801a220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 801a222:	2300      	movs	r3, #0
	
	X = 20;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 801a224:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801a228:	9302      	str	r3, [sp, #8]
 801a22a:	f88d 300c 	strb.w	r3, [sp, #12]
{
 801a22e:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 801a232:	f004 faa1 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a236:	2063      	movs	r0, #99	; 0x63
 801a238:	f004 faa4 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801a23c:	482e      	ldr	r0, [pc, #184]	; (801a2f8 <GUI_TextEn_Info_Ver+0xd8>)
	TFT_DrawChar(X+55, Y+2, 'w');
	TFT_DrawChar(X+70, Y+2, 'a');
	TFT_DrawChar(X+86, Y+2, 'r');
	TFT_DrawChar(X+99, Y+2, 'e');
	
	TFT_SetFont(&Font16);
 801a23e:	4c2f      	ldr	r4, [pc, #188]	; (801a2fc <GUI_TextEn_Info_Ver+0xdc>)
	TFT_SetFont(&Font16EN_arch_big);
 801a240:	f004 fa94 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'F');
 801a244:	2246      	movs	r2, #70	; 0x46
 801a246:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801a24a:	2014      	movs	r0, #20
 801a24c:	f004 fb58 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801a250:	482b      	ldr	r0, [pc, #172]	; (801a300 <GUI_TextEn_Info_Ver+0xe0>)
 801a252:	f004 fa8b 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'i');
 801a256:	2269      	movs	r2, #105	; 0x69
 801a258:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a25c:	2024      	movs	r0, #36	; 0x24
 801a25e:	f004 fb4f 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'r');
 801a262:	2272      	movs	r2, #114	; 0x72
 801a264:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a268:	202f      	movs	r0, #47	; 0x2f
 801a26a:	f004 fb49 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y+2, 'm');
 801a26e:	226d      	movs	r2, #109	; 0x6d
 801a270:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a274:	203c      	movs	r0, #60	; 0x3c
 801a276:	f004 fb43 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+55, Y+2, 'w');
 801a27a:	2277      	movs	r2, #119	; 0x77
 801a27c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a280:	204b      	movs	r0, #75	; 0x4b
 801a282:	f004 fb3d 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'a');
 801a286:	2261      	movs	r2, #97	; 0x61
 801a288:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a28c:	205a      	movs	r0, #90	; 0x5a
 801a28e:	f004 fb37 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+86, Y+2, 'r');
 801a292:	2272      	movs	r2, #114	; 0x72
 801a294:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a298:	206a      	movs	r0, #106	; 0x6a
 801a29a:	f004 fb31 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 801a29e:	2265      	movs	r2, #101	; 0x65
 801a2a0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a2a4:	2077      	movs	r0, #119	; 0x77
 801a2a6:	f004 fb2b 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16);
 801a2aa:	4620      	mov	r0, r4
 801a2ac:	f004 fa5e 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+152, Y, '.');
 801a2b0:	222e      	movs	r2, #46	; 0x2e
 801a2b2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801a2b6:	20ac      	movs	r0, #172	; 0xac
 801a2b8:	f004 fb22 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+142, Y, 'v');
 801a2bc:	2276      	movs	r2, #118	; 0x76
 801a2be:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801a2c2:	20a2      	movs	r0, #162	; 0xa2
 801a2c4:	f004 fb1c 	bl	801e900 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 801a2c8:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a2cc:	ee10 0a10 	vmov	r0, s0
 801a2d0:	f7e6 f952 	bl	8000578 <__aeabi_f2d>
 801a2d4:	4602      	mov	r2, r0
 801a2d6:	460b      	mov	r3, r1
 801a2d8:	a802      	add	r0, sp, #8
 801a2da:	490a      	ldr	r1, [pc, #40]	; (801a304 <GUI_TextEn_Info_Ver+0xe4>)
 801a2dc:	f007 fd60 	bl	8021da0 <sprintf>
	TFT_SetFont(&Font16);
 801a2e0:	4620      	mov	r0, r4
 801a2e2:	f004 fa43 	bl	801e76c <TFT_SetFont>
	TFT_DisplayString(X+172, Y, (uint8_t *)buffer, LEFT_MODE);
 801a2e6:	2303      	movs	r3, #3
 801a2e8:	aa02      	add	r2, sp, #8
 801a2ea:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801a2ee:	20c0      	movs	r0, #192	; 0xc0
 801a2f0:	f004 fb5e 	bl	801e9b0 <TFT_DisplayString>
 801a2f4:	b004      	add	sp, #16
 801a2f6:	bd10      	pop	{r4, pc}
 801a2f8:	200001b0 	.word	0x200001b0
 801a2fc:	200001a8 	.word	0x200001a8
 801a300:	200001c0 	.word	0x200001c0
 801a304:	080337ed 	.word	0x080337ed

0801a308 <GUI_TitleString_Name>:
#include "stdio.h"
#include "GUI_Text_Elements_RU.h"

void GUI_TitleString_Name(uint16_t X, uint16_t Y)
{
 801a308:	b538      	push	{r3, r4, r5, lr}
 801a30a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801a30c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a310:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801a312:	f004 fa31 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 801a316:	2084      	movs	r0, #132	; 0x84
 801a318:	f004 fa34 	bl	801e784 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 801a31c:	4825      	ldr	r0, [pc, #148]	; (801a3b4 <GUI_TitleString_Name+0xac>)
 801a31e:	f004 fa25 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'T');
 801a322:	4629      	mov	r1, r5
 801a324:	4620      	mov	r0, r4
 801a326:	2254      	movs	r2, #84	; 0x54
 801a328:	f004 faea 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+15, 	Y, 'K');
 801a32c:	f104 000f 	add.w	r0, r4, #15
 801a330:	4629      	mov	r1, r5
 801a332:	224b      	movs	r2, #75	; 0x4b
 801a334:	b280      	uxth	r0, r0
 801a336:	f004 fae3 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+30, 	Y, 'A');
 801a33a:	f104 001e 	add.w	r0, r4, #30
 801a33e:	4629      	mov	r1, r5
 801a340:	2241      	movs	r2, #65	; 0x41
 801a342:	b280      	uxth	r0, r0
 801a344:	f004 fadc 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+45, 	Y, '-');
 801a348:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 801a34c:	4629      	mov	r1, r5
 801a34e:	222d      	movs	r2, #45	; 0x2d
 801a350:	b280      	uxth	r0, r0
 801a352:	f004 fad5 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+60, 	Y, 'S');
 801a356:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801a35a:	4629      	mov	r1, r5
 801a35c:	2253      	movs	r2, #83	; 0x53
 801a35e:	b280      	uxth	r0, r0
 801a360:	f004 face 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801a364:	4814      	ldr	r0, [pc, #80]	; (801a3b8 <GUI_TitleString_Name+0xb0>)
 801a366:	f004 fa01 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+75, 	Y, 'p');
 801a36a:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 801a36e:	4629      	mov	r1, r5
 801a370:	2270      	movs	r2, #112	; 0x70
 801a372:	b280      	uxth	r0, r0
 801a374:	f004 fac4 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+88, 	Y, 'e');
 801a378:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a37c:	4629      	mov	r1, r5
 801a37e:	2265      	movs	r2, #101	; 0x65
 801a380:	b280      	uxth	r0, r0
 801a382:	f004 fabd 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+99, 	Y, 'c');
 801a386:	f104 0063 	add.w	r0, r4, #99	; 0x63
 801a38a:	4629      	mov	r1, r5
 801a38c:	2263      	movs	r2, #99	; 0x63
 801a38e:	b280      	uxth	r0, r0
 801a390:	f004 fab6 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+109, 	Y, 't');
 801a394:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 801a398:	4629      	mov	r1, r5
 801a39a:	2274      	movs	r2, #116	; 0x74
 801a39c:	b280      	uxth	r0, r0
 801a39e:	f004 faaf 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+120, 	Y, 'r');
 801a3a2:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801a3a6:	4629      	mov	r1, r5
 801a3a8:	2272      	movs	r2, #114	; 0x72
 801a3aa:	b280      	uxth	r0, r0
}
 801a3ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+120, 	Y, 'r');
 801a3b0:	f004 baa6 	b.w	801e900 <TFT_DrawChar>
 801a3b4:	200001b0 	.word	0x200001b0
 801a3b8:	200001c0 	.word	0x200001c0

0801a3bc <GUI_TitleString_Version>:

void GUI_TitleString_Version(uint16_t X, uint16_t Y, float Version)
{
 801a3bc:	b530      	push	{r4, r5, lr}
 801a3be:	b085      	sub	sp, #20
	char buffer[5] = {0};
 801a3c0:	2300      	movs	r3, #0
{
 801a3c2:	4604      	mov	r4, r0
	
	TFT_SetTextColor(TFT_White);
 801a3c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801a3c8:	9302      	str	r3, [sp, #8]
 801a3ca:	f88d 300c 	strb.w	r3, [sp, #12]
{
 801a3ce:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a3d2:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801a3d4:	f004 f9d0 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 801a3d8:	2084      	movs	r0, #132	; 0x84
 801a3da:	f004 f9d3 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
 801a3de:	4815      	ldr	r0, [pc, #84]	; (801a434 <GUI_TitleString_Version+0x78>)
 801a3e0:	f004 f9c4 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'v');
 801a3e4:	4629      	mov	r1, r5
 801a3e6:	2276      	movs	r2, #118	; 0x76
 801a3e8:	4620      	mov	r0, r4
 801a3ea:	f004 fa89 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 801a3ee:	4812      	ldr	r0, [pc, #72]	; (801a438 <GUI_TitleString_Version+0x7c>)
 801a3f0:	f004 f9bc 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+13, 		Y, '.');
 801a3f4:	f104 000d 	add.w	r0, r4, #13
 801a3f8:	222e      	movs	r2, #46	; 0x2e
 801a3fa:	4629      	mov	r1, r5
 801a3fc:	b280      	uxth	r0, r0
 801a3fe:	f004 fa7f 	bl	801e900 <TFT_DrawChar>
	sprintf (buffer, "%.1f",  Version);
 801a402:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a406:	ee10 0a10 	vmov	r0, s0
 801a40a:	f7e6 f8b5 	bl	8000578 <__aeabi_f2d>
 801a40e:	4602      	mov	r2, r0
 801a410:	460b      	mov	r3, r1
 801a412:	a802      	add	r0, sp, #8
 801a414:	4909      	ldr	r1, [pc, #36]	; (801a43c <GUI_TitleString_Version+0x80>)
 801a416:	f007 fcc3 	bl	8021da0 <sprintf>
	TFT_SetFont(&Font16);
 801a41a:	4809      	ldr	r0, [pc, #36]	; (801a440 <GUI_TitleString_Version+0x84>)
 801a41c:	f004 f9a6 	bl	801e76c <TFT_SetFont>
	TFT_DisplayString(X+24, Y, (uint8_t *)buffer, LEFT_MODE);
 801a420:	f104 0018 	add.w	r0, r4, #24
 801a424:	2303      	movs	r3, #3
 801a426:	aa02      	add	r2, sp, #8
 801a428:	4629      	mov	r1, r5
 801a42a:	b280      	uxth	r0, r0
 801a42c:	f004 fac0 	bl	801e9b0 <TFT_DisplayString>
}
 801a430:	b005      	add	sp, #20
 801a432:	bd30      	pop	{r4, r5, pc}
 801a434:	200001c0 	.word	0x200001c0
 801a438:	200001b0 	.word	0x200001b0
 801a43c:	080337ed 	.word	0x080337ed
 801a440:	200001a8 	.word	0x200001a8

0801a444 <GUI_TextRu_Language>:

void GUI_TextRu_Language(uint16_t X, uint16_t Y)
{
 801a444:	b538      	push	{r3, r4, r5, lr}
 801a446:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a448:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a44c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a44e:	f004 f993 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a452:	2063      	movs	r0, #99	; 0x63
 801a454:	f004 f996 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a458:	4811      	ldr	r0, [pc, #68]	; (801a4a0 <GUI_TextRu_Language+0x5c>)
 801a45a:	f004 f987 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 801a45e:	4621      	mov	r1, r4
 801a460:	22af      	movs	r2, #175	; 0xaf
 801a462:	4628      	mov	r0, r5
 801a464:	f004 f994 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'з');
 801a468:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801a46a:	480e      	ldr	r0, [pc, #56]	; (801a4a4 <GUI_TextRu_Language+0x60>)
 801a46c:	f004 f97e 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'з');
 801a470:	b2a4      	uxth	r4, r4
 801a472:	f105 000f 	add.w	r0, r5, #15
 801a476:	4621      	mov	r1, r4
 801a478:	22b7      	movs	r2, #183	; 0xb7
 801a47a:	b280      	uxth	r0, r0
 801a47c:	f004 f988 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ы');
 801a480:	f105 001c 	add.w	r0, r5, #28
 801a484:	4621      	mov	r1, r4
 801a486:	228b      	movs	r2, #139	; 0x8b
 801a488:	b280      	uxth	r0, r0
 801a48a:	f004 f981 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'к');
 801a48e:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801a492:	4621      	mov	r1, r4
 801a494:	22ba      	movs	r2, #186	; 0xba
 801a496:	b280      	uxth	r0, r0
}
 801a498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+41, Y+5, 'к');
 801a49c:	f004 b978 	b.w	801e790 <TFT_DrawCharRus>
 801a4a0:	200001d0 	.word	0x200001d0
 801a4a4:	200001d8 	.word	0x200001d8

0801a4a8 <GUI_TextRu_Russian>:

void GUI_TextRu_Russian(uint16_t X, uint16_t Y)
{
 801a4a8:	b538      	push	{r3, r4, r5, lr}
 801a4aa:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a4ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a4b0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a4b2:	f004 f961 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a4b6:	2063      	movs	r0, #99	; 0x63
 801a4b8:	f004 f964 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a4bc:	481c      	ldr	r0, [pc, #112]	; (801a530 <GUI_TextRu_Russian+0x88>)
 801a4be:	f004 f955 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 801a4c2:	4621      	mov	r1, r4
 801a4c4:	22a0      	movs	r2, #160	; 0xa0
 801a4c6:	4628      	mov	r0, r5
 801a4c8:	f004 f962 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'у');
 801a4cc:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801a4ce:	4819      	ldr	r0, [pc, #100]	; (801a534 <GUI_TextRu_Russian+0x8c>)
	TFT_DrawCharRus(X+15, Y+5, 'у');
 801a4d0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801a4d2:	f004 f94b 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'у');
 801a4d6:	f105 000f 	add.w	r0, r5, #15
 801a4da:	4621      	mov	r1, r4
 801a4dc:	2283      	movs	r2, #131	; 0x83
 801a4de:	b280      	uxth	r0, r0
 801a4e0:	f004 f956 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'с');
 801a4e4:	f105 001c 	add.w	r0, r5, #28
 801a4e8:	4621      	mov	r1, r4
 801a4ea:	2281      	movs	r2, #129	; 0x81
 801a4ec:	b280      	uxth	r0, r0
 801a4ee:	f004 f94f 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'с');
 801a4f2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801a4f6:	4621      	mov	r1, r4
 801a4f8:	2281      	movs	r2, #129	; 0x81
 801a4fa:	b280      	uxth	r0, r0
 801a4fc:	f004 f948 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'к');
 801a500:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801a504:	4621      	mov	r1, r4
 801a506:	22ba      	movs	r2, #186	; 0xba
 801a508:	b280      	uxth	r0, r0
 801a50a:	f004 f941 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+64, Y+5, 'и');
 801a50e:	f105 0040 	add.w	r0, r5, #64	; 0x40
 801a512:	4621      	mov	r1, r4
 801a514:	22b8      	movs	r2, #184	; 0xb8
 801a516:	b280      	uxth	r0, r0
 801a518:	f004 f93a 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+77, Y+5, 'й');
 801a51c:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 801a520:	4621      	mov	r1, r4
 801a522:	22b9      	movs	r2, #185	; 0xb9
 801a524:	b280      	uxth	r0, r0
}
 801a526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+77, Y+5, 'й');
 801a52a:	f004 b931 	b.w	801e790 <TFT_DrawCharRus>
 801a52e:	bf00      	nop
 801a530:	200001d0 	.word	0x200001d0
 801a534:	200001d8 	.word	0x200001d8

0801a538 <GUI_TextRu_Info>:



void GUI_TextRu_Info(uint16_t X, uint16_t Y)
{
 801a538:	b538      	push	{r3, r4, r5, lr}
 801a53a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a53c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a540:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a542:	f004 f919 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a546:	2063      	movs	r0, #99	; 0x63
 801a548:	f004 f91c 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a54c:	4849      	ldr	r0, [pc, #292]	; (801a674 <GUI_TextRu_Info+0x13c>)
 801a54e:	f004 f90d 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'И');
 801a552:	4621      	mov	r1, r4
 801a554:	2298      	movs	r2, #152	; 0x98
 801a556:	4628      	mov	r0, r5
 801a558:	f004 f91a 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'н');
 801a55c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801a55e:	4846      	ldr	r0, [pc, #280]	; (801a678 <GUI_TextRu_Info+0x140>)
	TFT_DrawCharRus(X+15, Y+5, 'н');
 801a560:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801a562:	f004 f903 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'н');
 801a566:	f105 000f 	add.w	r0, r5, #15
 801a56a:	4621      	mov	r1, r4
 801a56c:	22bd      	movs	r2, #189	; 0xbd
 801a56e:	b280      	uxth	r0, r0
 801a570:	f004 f90e 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ф');
 801a574:	f105 001c 	add.w	r0, r5, #28
 801a578:	4621      	mov	r1, r4
 801a57a:	2284      	movs	r2, #132	; 0x84
 801a57c:	b280      	uxth	r0, r0
 801a57e:	f004 f907 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'о');
 801a582:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801a586:	4621      	mov	r1, r4
 801a588:	22be      	movs	r2, #190	; 0xbe
 801a58a:	b280      	uxth	r0, r0
 801a58c:	f004 f900 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'р');
 801a590:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801a594:	4621      	mov	r1, r4
 801a596:	2280      	movs	r2, #128	; 0x80
 801a598:	b280      	uxth	r0, r0
 801a59a:	f004 f8f9 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'м');
 801a59e:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801a5a2:	4621      	mov	r1, r4
 801a5a4:	22bc      	movs	r2, #188	; 0xbc
 801a5a6:	b280      	uxth	r0, r0
 801a5a8:	f004 f8f2 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+78, Y+5, 'а');
 801a5ac:	f105 004e 	add.w	r0, r5, #78	; 0x4e
 801a5b0:	4621      	mov	r1, r4
 801a5b2:	22b0      	movs	r2, #176	; 0xb0
 801a5b4:	b280      	uxth	r0, r0
 801a5b6:	f004 f8eb 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+90, Y+5, 'ц');
 801a5ba:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 801a5be:	4621      	mov	r1, r4
 801a5c0:	2286      	movs	r2, #134	; 0x86
 801a5c2:	b280      	uxth	r0, r0
 801a5c4:	f004 f8e4 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+102, Y+5, 'и');
 801a5c8:	f105 0066 	add.w	r0, r5, #102	; 0x66
 801a5cc:	4621      	mov	r1, r4
 801a5ce:	22b8      	movs	r2, #184	; 0xb8
 801a5d0:	b280      	uxth	r0, r0
 801a5d2:	f004 f8dd 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+114, Y+5, 'я');
 801a5d6:	f105 0072 	add.w	r0, r5, #114	; 0x72
 801a5da:	4621      	mov	r1, r4
 801a5dc:	228f      	movs	r2, #143	; 0x8f
 801a5de:	b280      	uxth	r0, r0
 801a5e0:	f004 f8d6 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+126, Y+5, 0x01);
 801a5e4:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 801a5e8:	4621      	mov	r1, r4
 801a5ea:	2201      	movs	r2, #1
 801a5ec:	b280      	uxth	r0, r0
 801a5ee:	f004 f8cf 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+138, Y+5, 'о');
 801a5f2:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 801a5f6:	4621      	mov	r1, r4
 801a5f8:	22be      	movs	r2, #190	; 0xbe
 801a5fa:	b280      	uxth	r0, r0
 801a5fc:	f004 f8c8 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+150, Y+5, 0x01);
 801a600:	f105 0096 	add.w	r0, r5, #150	; 0x96
 801a604:	4621      	mov	r1, r4
 801a606:	2201      	movs	r2, #1
 801a608:	b280      	uxth	r0, r0
 801a60a:	f004 f8c1 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+5, 'п');
 801a60e:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 801a612:	4621      	mov	r1, r4
 801a614:	22bf      	movs	r2, #191	; 0xbf
 801a616:	b280      	uxth	r0, r0
 801a618:	f004 f8ba 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+174, Y+5, 'р');
 801a61c:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 801a620:	4621      	mov	r1, r4
 801a622:	2280      	movs	r2, #128	; 0x80
 801a624:	b280      	uxth	r0, r0
 801a626:	f004 f8b3 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+186, Y+5, 'и');
 801a62a:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 801a62e:	4621      	mov	r1, r4
 801a630:	22b8      	movs	r2, #184	; 0xb8
 801a632:	b280      	uxth	r0, r0
 801a634:	f004 f8ac 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+198, Y+5, 'б');
 801a638:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 801a63c:	4621      	mov	r1, r4
 801a63e:	22b1      	movs	r2, #177	; 0xb1
 801a640:	b280      	uxth	r0, r0
 801a642:	f004 f8a5 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+210, Y+5, 'о');
 801a646:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 801a64a:	4621      	mov	r1, r4
 801a64c:	22be      	movs	r2, #190	; 0xbe
 801a64e:	b280      	uxth	r0, r0
 801a650:	f004 f89e 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+222, Y+5, 'р');
 801a654:	f105 00de 	add.w	r0, r5, #222	; 0xde
 801a658:	4621      	mov	r1, r4
 801a65a:	2280      	movs	r2, #128	; 0x80
 801a65c:	b280      	uxth	r0, r0
 801a65e:	f004 f897 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+234, Y+5, 'е');
 801a662:	f105 00ea 	add.w	r0, r5, #234	; 0xea
 801a666:	4621      	mov	r1, r4
 801a668:	22b5      	movs	r2, #181	; 0xb5
 801a66a:	b280      	uxth	r0, r0
}
 801a66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+234, Y+5, 'е');
 801a670:	f004 b88e 	b.w	801e790 <TFT_DrawCharRus>
 801a674:	200001d0 	.word	0x200001d0
 801a678:	200001d8 	.word	0x200001d8

0801a67c <GUI_TextRu_Mode>:

void GUI_TextRu_Mode(uint16_t X, uint16_t Y)
{
 801a67c:	b538      	push	{r3, r4, r5, lr}
 801a67e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a680:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a684:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a686:	f004 f877 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a68a:	2063      	movs	r0, #99	; 0x63
 801a68c:	f004 f87a 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a690:	4815      	ldr	r0, [pc, #84]	; (801a6e8 <GUI_TextRu_Mode+0x6c>)
 801a692:	f004 f86b 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 801a696:	4621      	mov	r1, r4
 801a698:	22a0      	movs	r2, #160	; 0xa0
 801a69a:	4628      	mov	r0, r5
 801a69c:	f004 f878 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'е');
 801a6a0:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801a6a2:	4812      	ldr	r0, [pc, #72]	; (801a6ec <GUI_TextRu_Mode+0x70>)
 801a6a4:	f004 f862 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'е');
 801a6a8:	b2a4      	uxth	r4, r4
 801a6aa:	f105 000f 	add.w	r0, r5, #15
 801a6ae:	4621      	mov	r1, r4
 801a6b0:	22b5      	movs	r2, #181	; 0xb5
 801a6b2:	b280      	uxth	r0, r0
 801a6b4:	f004 f86c 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ж');
 801a6b8:	f105 001c 	add.w	r0, r5, #28
 801a6bc:	4621      	mov	r1, r4
 801a6be:	22b6      	movs	r2, #182	; 0xb6
 801a6c0:	b280      	uxth	r0, r0
 801a6c2:	f004 f865 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 801a6c6:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801a6ca:	4621      	mov	r1, r4
 801a6cc:	22b8      	movs	r2, #184	; 0xb8
 801a6ce:	b280      	uxth	r0, r0
 801a6d0:	f004 f85e 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+54, Y+5, 'м');
 801a6d4:	f105 0036 	add.w	r0, r5, #54	; 0x36
 801a6d8:	4621      	mov	r1, r4
 801a6da:	22bc      	movs	r2, #188	; 0xbc
 801a6dc:	b280      	uxth	r0, r0
}
 801a6de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+54, Y+5, 'м');
 801a6e2:	f004 b855 	b.w	801e790 <TFT_DrawCharRus>
 801a6e6:	bf00      	nop
 801a6e8:	200001d0 	.word	0x200001d0
 801a6ec:	200001d8 	.word	0x200001d8

0801a6f0 <GUI_TextRu_Illuminance>:

void GUI_TextRu_Illuminance(uint16_t X, uint16_t Y)
{
 801a6f0:	b538      	push	{r3, r4, r5, lr}
 801a6f2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a6f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a6f8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a6fa:	f004 f83d 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a6fe:	2063      	movs	r0, #99	; 0x63
 801a700:	f004 f840 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a704:	482d      	ldr	r0, [pc, #180]	; (801a7bc <GUI_TextRu_Illuminance+0xcc>)
 801a706:	f004 f831 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 801a70a:	4621      	mov	r1, r4
 801a70c:	229e      	movs	r2, #158	; 0x9e
 801a70e:	4628      	mov	r0, r5
 801a710:	f004 f83e 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'с');
 801a714:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801a716:	482a      	ldr	r0, [pc, #168]	; (801a7c0 <GUI_TextRu_Illuminance+0xd0>)
	TFT_DrawCharRus(X+15, Y+5, 'с');
 801a718:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801a71a:	f004 f827 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'с');
 801a71e:	f105 000f 	add.w	r0, r5, #15
 801a722:	4621      	mov	r1, r4
 801a724:	2281      	movs	r2, #129	; 0x81
 801a726:	b280      	uxth	r0, r0
 801a728:	f004 f832 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+26, Y+5, 'в');
 801a72c:	f105 001a 	add.w	r0, r5, #26
 801a730:	4621      	mov	r1, r4
 801a732:	22b2      	movs	r2, #178	; 0xb2
 801a734:	b280      	uxth	r0, r0
 801a736:	f004 f82b 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+38, Y+5, 'е');
 801a73a:	f105 0026 	add.w	r0, r5, #38	; 0x26
 801a73e:	4621      	mov	r1, r4
 801a740:	22b5      	movs	r2, #181	; 0xb5
 801a742:	b280      	uxth	r0, r0
 801a744:	f004 f824 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+50, Y+5, 'щ');
 801a748:	f105 0032 	add.w	r0, r5, #50	; 0x32
 801a74c:	4621      	mov	r1, r4
 801a74e:	2289      	movs	r2, #137	; 0x89
 801a750:	b280      	uxth	r0, r0
 801a752:	f004 f81d 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+62, Y+5, 'е');
 801a756:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 801a75a:	4621      	mov	r1, r4
 801a75c:	22b5      	movs	r2, #181	; 0xb5
 801a75e:	b280      	uxth	r0, r0
 801a760:	f004 f816 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'н');
 801a764:	f105 0049 	add.w	r0, r5, #73	; 0x49
 801a768:	4621      	mov	r1, r4
 801a76a:	22bd      	movs	r2, #189	; 0xbd
 801a76c:	b280      	uxth	r0, r0
 801a76e:	f004 f80f 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'н');
 801a772:	f105 0055 	add.w	r0, r5, #85	; 0x55
 801a776:	4621      	mov	r1, r4
 801a778:	22bd      	movs	r2, #189	; 0xbd
 801a77a:	b280      	uxth	r0, r0
 801a77c:	f004 f808 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 801a780:	f105 0061 	add.w	r0, r5, #97	; 0x61
 801a784:	4621      	mov	r1, r4
 801a786:	22be      	movs	r2, #190	; 0xbe
 801a788:	b280      	uxth	r0, r0
 801a78a:	f004 f801 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 801a78e:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 801a792:	4621      	mov	r1, r4
 801a794:	2281      	movs	r2, #129	; 0x81
 801a796:	b280      	uxth	r0, r0
 801a798:	f003 fffa 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+5, 'т');
 801a79c:	f105 0076 	add.w	r0, r5, #118	; 0x76
 801a7a0:	4621      	mov	r1, r4
 801a7a2:	2282      	movs	r2, #130	; 0x82
 801a7a4:	b280      	uxth	r0, r0
 801a7a6:	f003 fff3 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 801a7aa:	f105 0082 	add.w	r0, r5, #130	; 0x82
 801a7ae:	4621      	mov	r1, r4
 801a7b0:	228c      	movs	r2, #140	; 0x8c
 801a7b2:	b280      	uxth	r0, r0
}
 801a7b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 801a7b8:	f003 bfea 	b.w	801e790 <TFT_DrawCharRus>
 801a7bc:	200001d0 	.word	0x200001d0
 801a7c0:	200001d8 	.word	0x200001d8

0801a7c4 <GUI_TextRu_PPF>:

void GUI_TextRu_PPF(uint16_t X, uint16_t Y)
{
 801a7c4:	b538      	push	{r3, r4, r5, lr}
 801a7c6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801a7c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a7cc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801a7ce:	f003 ffd3 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a7d2:	2063      	movs	r0, #99	; 0x63
 801a7d4:	f003 ffd6 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a7d8:	480b      	ldr	r0, [pc, #44]	; (801a808 <GUI_TextRu_PPF+0x44>)
 801a7da:	f003 ffc7 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 801a7de:	4629      	mov	r1, r5
 801a7e0:	4620      	mov	r0, r4
 801a7e2:	22a4      	movs	r2, #164	; 0xa4
 801a7e4:	f003 ffd4 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 801a7e8:	f104 0011 	add.w	r0, r4, #17
 801a7ec:	4629      	mov	r1, r5
 801a7ee:	2290      	movs	r2, #144	; 0x90
 801a7f0:	b280      	uxth	r0, r0
 801a7f2:	f003 ffcd 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 801a7f6:	f104 0020 	add.w	r0, r4, #32
 801a7fa:	4629      	mov	r1, r5
 801a7fc:	22a0      	movs	r2, #160	; 0xa0
 801a7fe:	b280      	uxth	r0, r0
}
 801a800:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+32, Y, 'Р');
 801a804:	f003 bfc4 	b.w	801e790 <TFT_DrawCharRus>
 801a808:	200001d0 	.word	0x200001d0

0801a80c <GUI_TextRu_PPF_RGB>:

void GUI_TextRu_PPF_RGB(uint16_t X, uint16_t Y)
{
 801a80c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a810:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16RU_arch_big);
 801a812:	f8df 910c 	ldr.w	r9, [pc, #268]	; 801a920 <GUI_TextRu_PPF_RGB+0x114>
	TFT_DrawCharRus(X, Y, 'С');
	TFT_SetFont(&Font16RU_arch_small);
 801a816:	f8df 810c 	ldr.w	r8, [pc, #268]	; 801a924 <GUI_TextRu_PPF_RGB+0x118>
	TFT_DrawCharRus(X+15, Y+5, 'и');
	TFT_DrawCharRus(X+27, Y+5, 'н');
	TFT_SetFont(&Font16EN_arch_big);
 801a81a:	4f40      	ldr	r7, [pc, #256]	; (801a91c <GUI_TextRu_PPF_RGB+0x110>)
	TFT_SetTextColor(TFT_White);
 801a81c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a820:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801a822:	f003 ffa9 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a826:	2063      	movs	r0, #99	; 0x63
 801a828:	f003 ffac 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a82c:	4648      	mov	r0, r9
 801a82e:	f003 ff9d 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'С');
 801a832:	4629      	mov	r1, r5
 801a834:	22a1      	movs	r2, #161	; 0xa1
 801a836:	4620      	mov	r0, r4
 801a838:	f003 ffaa 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 801a83c:	1d6e      	adds	r6, r5, #5
	TFT_SetFont(&Font16RU_arch_small);
 801a83e:	4640      	mov	r0, r8
	TFT_DrawCharRus(X+15, Y+5, 'и');
 801a840:	b2b6      	uxth	r6, r6
	TFT_SetFont(&Font16RU_arch_small);
 801a842:	f003 ff93 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 801a846:	f104 000f 	add.w	r0, r4, #15
 801a84a:	4631      	mov	r1, r6
 801a84c:	22b8      	movs	r2, #184	; 0xb8
 801a84e:	b280      	uxth	r0, r0
 801a850:	f003 ff9e 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'н');
 801a854:	f104 001b 	add.w	r0, r4, #27
 801a858:	4631      	mov	r1, r6
 801a85a:	22bd      	movs	r2, #189	; 0xbd
 801a85c:	b280      	uxth	r0, r0
 801a85e:	f003 ff97 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 801a862:	4638      	mov	r0, r7
 801a864:	f003 ff82 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+40, Y, '-');
 801a868:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801a86c:	4629      	mov	r1, r5
 801a86e:	222d      	movs	r2, #45	; 0x2d
 801a870:	b280      	uxth	r0, r0
 801a872:	f004 f845 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 801a876:	4648      	mov	r0, r9
 801a878:	f003 ff78 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+55, Y, 'З');
 801a87c:	f104 0037 	add.w	r0, r4, #55	; 0x37
 801a880:	4629      	mov	r1, r5
 801a882:	2297      	movs	r2, #151	; 0x97
 801a884:	b280      	uxth	r0, r0
 801a886:	f003 ff83 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801a88a:	4640      	mov	r0, r8
 801a88c:	f003 ff6e 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+70, Y+5, 'е');
 801a890:	f104 0046 	add.w	r0, r4, #70	; 0x46
 801a894:	4631      	mov	r1, r6
 801a896:	22b5      	movs	r2, #181	; 0xb5
 801a898:	b280      	uxth	r0, r0
 801a89a:	f003 ff79 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+5, 'л');
 801a89e:	f104 0052 	add.w	r0, r4, #82	; 0x52
 801a8a2:	4631      	mov	r1, r6
 801a8a4:	22bb      	movs	r2, #187	; 0xbb
 801a8a6:	b280      	uxth	r0, r0
 801a8a8:	f003 ff72 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 801a8ac:	4638      	mov	r0, r7
 801a8ae:	f003 ff5d 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+94, Y, '-');
 801a8b2:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 801a8b6:	4629      	mov	r1, r5
 801a8b8:	222d      	movs	r2, #45	; 0x2d
 801a8ba:	b280      	uxth	r0, r0
 801a8bc:	f004 f820 	bl	801e900 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 801a8c0:	4648      	mov	r0, r9
 801a8c2:	f003 ff53 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+109, Y, 'К');
 801a8c6:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 801a8ca:	4629      	mov	r1, r5
 801a8cc:	229a      	movs	r2, #154	; 0x9a
 801a8ce:	b280      	uxth	r0, r0
 801a8d0:	f003 ff5e 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801a8d4:	4640      	mov	r0, r8
 801a8d6:	f003 ff49 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+124, Y+5, 'р');
 801a8da:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 801a8de:	4631      	mov	r1, r6
 801a8e0:	2280      	movs	r2, #128	; 0x80
 801a8e2:	b280      	uxth	r0, r0
 801a8e4:	f003 ff54 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 801a8e8:	4638      	mov	r0, r7
 801a8ea:	f003 ff3f 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+136, Y, '-');
 801a8ee:	f104 0088 	add.w	r0, r4, #136	; 0x88
 801a8f2:	4629      	mov	r1, r5
 801a8f4:	222d      	movs	r2, #45	; 0x2d
 801a8f6:	b280      	uxth	r0, r0
 801a8f8:	f004 f802 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+152, Y, 'F');
 801a8fc:	f104 0098 	add.w	r0, r4, #152	; 0x98
 801a900:	4629      	mov	r1, r5
 801a902:	2246      	movs	r2, #70	; 0x46
 801a904:	b280      	uxth	r0, r0
 801a906:	f003 fffb 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+167, Y, 'R');
 801a90a:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
 801a90e:	4629      	mov	r1, r5
 801a910:	2252      	movs	r2, #82	; 0x52
 801a912:	b280      	uxth	r0, r0
}
 801a914:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TFT_DrawChar(X+167, Y, 'R');
 801a918:	f003 bff2 	b.w	801e900 <TFT_DrawChar>
 801a91c:	200001b0 	.word	0x200001b0
 801a920:	200001d0 	.word	0x200001d0
 801a924:	200001d8 	.word	0x200001d8

0801a928 <GUI_TextRu_PPF_bands>:
void GUI_TextRu_PPF_bands(uint16_t X, uint16_t Y)
{
 801a928:	b538      	push	{r3, r4, r5, lr}
 801a92a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a92c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a930:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a932:	f003 ff21 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a936:	2063      	movs	r0, #99	; 0x63
 801a938:	f003 ff24 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a93c:	482d      	ldr	r0, [pc, #180]	; (801a9f4 <GUI_TextRu_PPF_bands+0xcc>)
 801a93e:	f003 ff15 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 801a942:	4621      	mov	r1, r4
 801a944:	4628      	mov	r0, r5
 801a946:	22a4      	movs	r2, #164	; 0xa4
 801a948:	f003 ff22 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 801a94c:	f105 0011 	add.w	r0, r5, #17
 801a950:	4621      	mov	r1, r4
 801a952:	2290      	movs	r2, #144	; 0x90
 801a954:	b280      	uxth	r0, r0
 801a956:	f003 ff1b 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 801a95a:	f105 0020 	add.w	r0, r5, #32
 801a95e:	4621      	mov	r1, r4
 801a960:	22a0      	movs	r2, #160	; 0xa0
 801a962:	b280      	uxth	r0, r0
 801a964:	f003 ff14 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+57, Y+2, 'д');
 801a968:	3402      	adds	r4, #2
	TFT_SetFont(&Font16RU_arch_small);
 801a96a:	4823      	ldr	r0, [pc, #140]	; (801a9f8 <GUI_TextRu_PPF_bands+0xd0>)
	TFT_DrawCharRus(X+57, Y+2, 'д');
 801a96c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801a96e:	f003 fefd 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+57, Y+2, 'д');
 801a972:	f105 0039 	add.w	r0, r5, #57	; 0x39
 801a976:	4621      	mov	r1, r4
 801a978:	22b4      	movs	r2, #180	; 0xb4
 801a97a:	b280      	uxth	r0, r0
 801a97c:	f003 ff08 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+70, Y+2, 'и');
 801a980:	f105 0046 	add.w	r0, r5, #70	; 0x46
 801a984:	4621      	mov	r1, r4
 801a986:	22b8      	movs	r2, #184	; 0xb8
 801a988:	b280      	uxth	r0, r0
 801a98a:	f003 ff01 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+83, Y+2, 'а');
 801a98e:	f105 0053 	add.w	r0, r5, #83	; 0x53
 801a992:	4621      	mov	r1, r4
 801a994:	22b0      	movs	r2, #176	; 0xb0
 801a996:	b280      	uxth	r0, r0
 801a998:	f003 fefa 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+96, Y+2, 'п');
 801a99c:	f105 0060 	add.w	r0, r5, #96	; 0x60
 801a9a0:	4621      	mov	r1, r4
 801a9a2:	22bf      	movs	r2, #191	; 0xbf
 801a9a4:	b280      	uxth	r0, r0
 801a9a6:	f003 fef3 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+2, 'а');
 801a9aa:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 801a9ae:	4621      	mov	r1, r4
 801a9b0:	22b0      	movs	r2, #176	; 0xb0
 801a9b2:	b280      	uxth	r0, r0
 801a9b4:	f003 feec 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+122, Y+2, 'з');
 801a9b8:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 801a9bc:	4621      	mov	r1, r4
 801a9be:	22b7      	movs	r2, #183	; 0xb7
 801a9c0:	b280      	uxth	r0, r0
 801a9c2:	f003 fee5 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+135, Y+2, 'о');
 801a9c6:	f105 0087 	add.w	r0, r5, #135	; 0x87
 801a9ca:	4621      	mov	r1, r4
 801a9cc:	22be      	movs	r2, #190	; 0xbe
 801a9ce:	b280      	uxth	r0, r0
 801a9d0:	f003 fede 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+148, Y+2, 'н');
 801a9d4:	f105 0094 	add.w	r0, r5, #148	; 0x94
 801a9d8:	4621      	mov	r1, r4
 801a9da:	22bd      	movs	r2, #189	; 0xbd
 801a9dc:	b280      	uxth	r0, r0
 801a9de:	f003 fed7 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 801a9e2:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 801a9e6:	4621      	mov	r1, r4
 801a9e8:	228b      	movs	r2, #139	; 0x8b
 801a9ea:	b280      	uxth	r0, r0
}
 801a9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 801a9f0:	f003 bece 	b.w	801e790 <TFT_DrawCharRus>
 801a9f4:	200001d0 	.word	0x200001d0
 801a9f8:	200001d8 	.word	0x200001d8

0801a9fc <GUI_TextRu_Info_Callibration>:

void GUI_TextRu_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 801a9fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a9fe:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 801aa00:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801aa04:	2300      	movs	r3, #0
 801aa06:	9300      	str	r3, [sp, #0]
 801aa08:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801aa0c:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 801aa0e:	f003 feb3 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801aa12:	2063      	movs	r0, #99	; 0x63
 801aa14:	f003 feb6 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801aa18:	4832      	ldr	r0, [pc, #200]	; (801aae4 <GUI_TextRu_Info_Callibration+0xe8>)
	TFT_DrawCharRus(X+82, Y+2, 'о');
	TFT_DrawCharRus(X+95, Y+2, 'в');
	TFT_DrawCharRus(X+108, Y+2, 'к');
	TFT_DrawCharRus(X+118, Y+2, 'а');
	
	sprintf (buffer, "%02u",  date);
 801aa1a:	4d33      	ldr	r5, [pc, #204]	; (801aae8 <GUI_TextRu_Info_Callibration+0xec>)
	TFT_SetFont(&Font16RU_arch_big);
 801aa1c:	f003 fea6 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'К');
 801aa20:	229a      	movs	r2, #154	; 0x9a
 801aa22:	2160      	movs	r1, #96	; 0x60
 801aa24:	2046      	movs	r0, #70	; 0x46
 801aa26:	f003 feb3 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801aa2a:	4830      	ldr	r0, [pc, #192]	; (801aaec <GUI_TextRu_Info_Callibration+0xf0>)
 801aa2c:	f003 fe9e 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'а');
 801aa30:	22b0      	movs	r2, #176	; 0xb0
 801aa32:	2166      	movs	r1, #102	; 0x66
 801aa34:	2057      	movs	r0, #87	; 0x57
 801aa36:	f003 feab 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'л');
 801aa3a:	22bb      	movs	r2, #187	; 0xbb
 801aa3c:	2166      	movs	r1, #102	; 0x66
 801aa3e:	2064      	movs	r0, #100	; 0x64
 801aa40:	f003 fea6 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 801aa44:	22b8      	movs	r2, #184	; 0xb8
 801aa46:	2166      	movs	r1, #102	; 0x66
 801aa48:	2071      	movs	r0, #113	; 0x71
 801aa4a:	f003 fea1 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'б');
 801aa4e:	22b1      	movs	r2, #177	; 0xb1
 801aa50:	2166      	movs	r1, #102	; 0x66
 801aa52:	207e      	movs	r0, #126	; 0x7e
 801aa54:	f003 fe9c 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'р');
 801aa58:	2280      	movs	r2, #128	; 0x80
 801aa5a:	2166      	movs	r1, #102	; 0x66
 801aa5c:	208b      	movs	r0, #139	; 0x8b
 801aa5e:	f003 fe97 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'о');
 801aa62:	22be      	movs	r2, #190	; 0xbe
 801aa64:	2166      	movs	r1, #102	; 0x66
 801aa66:	2098      	movs	r0, #152	; 0x98
 801aa68:	f003 fe92 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'в');
 801aa6c:	22b2      	movs	r2, #178	; 0xb2
 801aa6e:	2166      	movs	r1, #102	; 0x66
 801aa70:	20a5      	movs	r0, #165	; 0xa5
 801aa72:	f003 fe8d 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+108, Y+2, 'к');
 801aa76:	22ba      	movs	r2, #186	; 0xba
 801aa78:	2166      	movs	r1, #102	; 0x66
 801aa7a:	20b2      	movs	r0, #178	; 0xb2
 801aa7c:	f003 fe88 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+2, 'а');
 801aa80:	22b0      	movs	r2, #176	; 0xb0
 801aa82:	2166      	movs	r1, #102	; 0x66
 801aa84:	20bc      	movs	r0, #188	; 0xbc
 801aa86:	f003 fe83 	bl	801e790 <TFT_DrawCharRus>
	sprintf (buffer, "%02u",  date);
 801aa8a:	4622      	mov	r2, r4
 801aa8c:	4629      	mov	r1, r5
 801aa8e:	4668      	mov	r0, sp
 801aa90:	f007 f986 	bl	8021da0 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801aa94:	4816      	ldr	r0, [pc, #88]	; (801aaf0 <GUI_TextRu_Info_Callibration+0xf4>)
 801aa96:	f003 fe69 	bl	801e76c <TFT_SetFont>
	buffer[2] = '.';
 801aa9a:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801aa9c:	2303      	movs	r3, #3
 801aa9e:	466a      	mov	r2, sp
 801aaa0:	2182      	movs	r1, #130	; 0x82
 801aaa2:	201e      	movs	r0, #30
	buffer[2] = '.';
 801aaa4:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801aaa8:	f003 ff82 	bl	801e9b0 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 801aaac:	4632      	mov	r2, r6
 801aaae:	4629      	mov	r1, r5
 801aab0:	4668      	mov	r0, sp
 801aab2:	f007 f975 	bl	8021da0 <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801aab6:	2303      	movs	r3, #3
 801aab8:	466a      	mov	r2, sp
 801aaba:	2182      	movs	r1, #130	; 0x82
 801aabc:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 801aabe:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801aac2:	f003 ff75 	bl	801e9b0 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 801aac6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801aaca:	490a      	ldr	r1, [pc, #40]	; (801aaf4 <GUI_TextRu_Info_Callibration+0xf8>)
 801aacc:	4668      	mov	r0, sp
 801aace:	f007 f967 	bl	8021da0 <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801aad2:	2303      	movs	r3, #3
 801aad4:	466a      	mov	r2, sp
 801aad6:	2182      	movs	r1, #130	; 0x82
 801aad8:	209b      	movs	r0, #155	; 0x9b
 801aada:	f003 ff69 	bl	801e9b0 <TFT_DisplayString>
}
 801aade:	b002      	add	sp, #8
 801aae0:	bd70      	pop	{r4, r5, r6, pc}
 801aae2:	bf00      	nop
 801aae4:	200001d0 	.word	0x200001d0
 801aae8:	080337fc 	.word	0x080337fc
 801aaec:	200001d8 	.word	0x200001d8
 801aaf0:	200001f0 	.word	0x200001f0
 801aaf4:	08033801 	.word	0x08033801

0801aaf8 <GUI_TextRu_WriteSD>:

void GUI_TextRu_WriteSD(uint16_t X, uint16_t Y)
{
 801aaf8:	b538      	push	{r3, r4, r5, lr}
 801aafa:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801aafc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801ab00:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801ab02:	f003 fe39 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ab06:	2063      	movs	r0, #99	; 0x63
 801ab08:	f003 fe3c 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801ab0c:	4818      	ldr	r0, [pc, #96]	; (801ab70 <GUI_TextRu_WriteSD+0x78>)
 801ab0e:	f003 fe2d 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'З');
 801ab12:	4621      	mov	r1, r4
 801ab14:	2297      	movs	r2, #151	; 0x97
 801ab16:	4628      	mov	r0, r5
 801ab18:	f003 fe3a 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'а');
 801ab1c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801ab1e:	4815      	ldr	r0, [pc, #84]	; (801ab74 <GUI_TextRu_WriteSD+0x7c>)
	TFT_DrawCharRus(X+15, Y+5, 'а');
 801ab20:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801ab22:	f003 fe23 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'а');
 801ab26:	f105 000f 	add.w	r0, r5, #15
 801ab2a:	4621      	mov	r1, r4
 801ab2c:	22b0      	movs	r2, #176	; 0xb0
 801ab2e:	b280      	uxth	r0, r0
 801ab30:	f003 fe2e 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'п');
 801ab34:	f105 001c 	add.w	r0, r5, #28
 801ab38:	4621      	mov	r1, r4
 801ab3a:	22bf      	movs	r2, #191	; 0xbf
 801ab3c:	b280      	uxth	r0, r0
 801ab3e:	f003 fe27 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 801ab42:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801ab46:	4621      	mov	r1, r4
 801ab48:	22b8      	movs	r2, #184	; 0xb8
 801ab4a:	b280      	uxth	r0, r0
 801ab4c:	f003 fe20 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'с');
 801ab50:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801ab54:	4621      	mov	r1, r4
 801ab56:	2281      	movs	r2, #129	; 0x81
 801ab58:	b280      	uxth	r0, r0
 801ab5a:	f003 fe19 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 801ab5e:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801ab62:	4621      	mov	r1, r4
 801ab64:	228c      	movs	r2, #140	; 0x8c
 801ab66:	b280      	uxth	r0, r0
}
 801ab68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 801ab6c:	f003 be10 	b.w	801e790 <TFT_DrawCharRus>
 801ab70:	200001d0 	.word	0x200001d0
 801ab74:	200001d8 	.word	0x200001d8

0801ab78 <GUI_TextRu_Info_Serial>:

void GUI_TextRu_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 801ab78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ab7a:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 801ab7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801ab80:	2300      	movs	r3, #0
 801ab82:	9300      	str	r3, [sp, #0]
 801ab84:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801ab88:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 801ab8a:	f003 fdf5 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ab8e:	2063      	movs	r0, #99	; 0x63
 801ab90:	f003 fdf8 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801ab94:	4830      	ldr	r0, [pc, #192]	; (801ac58 <GUI_TextRu_Info_Serial+0xe0>)
 801ab96:	f003 fde9 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'С');
 801ab9a:	22a1      	movs	r2, #161	; 0xa1
 801ab9c:	21c4      	movs	r1, #196	; 0xc4
 801ab9e:	203c      	movs	r0, #60	; 0x3c
 801aba0:	f003 fdf6 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801aba4:	482d      	ldr	r0, [pc, #180]	; (801ac5c <GUI_TextRu_Info_Serial+0xe4>)
 801aba6:	f003 fde1 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'е');
 801abaa:	22b5      	movs	r2, #181	; 0xb5
 801abac:	21ca      	movs	r1, #202	; 0xca
 801abae:	204d      	movs	r0, #77	; 0x4d
 801abb0:	f003 fdee 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'р');
 801abb4:	2280      	movs	r2, #128	; 0x80
 801abb6:	21ca      	movs	r1, #202	; 0xca
 801abb8:	205a      	movs	r0, #90	; 0x5a
 801abba:	f003 fde9 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 801abbe:	22b8      	movs	r2, #184	; 0xb8
 801abc0:	21ca      	movs	r1, #202	; 0xca
 801abc2:	2067      	movs	r0, #103	; 0x67
 801abc4:	f003 fde4 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'й');
 801abc8:	22b9      	movs	r2, #185	; 0xb9
 801abca:	21ca      	movs	r1, #202	; 0xca
 801abcc:	2074      	movs	r0, #116	; 0x74
 801abce:	f003 fddf 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'н');
 801abd2:	22bd      	movs	r2, #189	; 0xbd
 801abd4:	21ca      	movs	r1, #202	; 0xca
 801abd6:	2081      	movs	r0, #129	; 0x81
 801abd8:	f003 fdda 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'ы');
 801abdc:	228b      	movs	r2, #139	; 0x8b
 801abde:	21ca      	movs	r1, #202	; 0xca
 801abe0:	208e      	movs	r0, #142	; 0x8e
 801abe2:	f003 fdd5 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'й');
 801abe6:	22b9      	movs	r2, #185	; 0xb9
 801abe8:	21ca      	movs	r1, #202	; 0xca
 801abea:	209b      	movs	r0, #155	; 0x9b
 801abec:	f003 fdd0 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+115, Y+2, 'н');
 801abf0:	22bd      	movs	r2, #189	; 0xbd
 801abf2:	21ca      	movs	r1, #202	; 0xca
 801abf4:	20af      	movs	r0, #175	; 0xaf
 801abf6:	f003 fdcb 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+128, Y+2, 'о');
 801abfa:	22be      	movs	r2, #190	; 0xbe
 801abfc:	21ca      	movs	r1, #202	; 0xca
 801abfe:	20bc      	movs	r0, #188	; 0xbc
 801ac00:	f003 fdc6 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+141, Y+2, 'м');
 801ac04:	22bc      	movs	r2, #188	; 0xbc
 801ac06:	21ca      	movs	r1, #202	; 0xca
 801ac08:	20c9      	movs	r0, #201	; 0xc9
 801ac0a:	f003 fdc1 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+154, Y+2, 'е');
 801ac0e:	22b5      	movs	r2, #181	; 0xb5
 801ac10:	21ca      	movs	r1, #202	; 0xca
 801ac12:	20d6      	movs	r0, #214	; 0xd6
 801ac14:	f003 fdbc 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+165, Y+2, 'р');
 801ac18:	2280      	movs	r2, #128	; 0x80
 801ac1a:	21ca      	movs	r1, #202	; 0xca
 801ac1c:	20e1      	movs	r0, #225	; 0xe1
 801ac1e:	f003 fdb7 	bl	801e790 <TFT_DrawCharRus>

	sprintf (buffer, "%u",  Part);
 801ac22:	462a      	mov	r2, r5
 801ac24:	490e      	ldr	r1, [pc, #56]	; (801ac60 <GUI_TextRu_Info_Serial+0xe8>)
 801ac26:	4668      	mov	r0, sp
 801ac28:	f007 f8ba 	bl	8021da0 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801ac2c:	480d      	ldr	r0, [pc, #52]	; (801ac64 <GUI_TextRu_Info_Serial+0xec>)
 801ac2e:	f003 fd9d 	bl	801e76c <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801ac32:	2303      	movs	r3, #3
 801ac34:	466a      	mov	r2, sp
 801ac36:	21e6      	movs	r1, #230	; 0xe6
 801ac38:	2028      	movs	r0, #40	; 0x28
 801ac3a:	f003 feb9 	bl	801e9b0 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 801ac3e:	4622      	mov	r2, r4
 801ac40:	4909      	ldr	r1, [pc, #36]	; (801ac68 <GUI_TextRu_Info_Serial+0xf0>)
 801ac42:	4668      	mov	r0, sp
 801ac44:	f007 f8ac 	bl	8021da0 <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801ac48:	2303      	movs	r3, #3
 801ac4a:	466a      	mov	r2, sp
 801ac4c:	21e6      	movs	r1, #230	; 0xe6
 801ac4e:	2087      	movs	r0, #135	; 0x87
 801ac50:	f003 feae 	bl	801e9b0 <TFT_DisplayString>
}
 801ac54:	b003      	add	sp, #12
 801ac56:	bd30      	pop	{r4, r5, pc}
 801ac58:	200001d0 	.word	0x200001d0
 801ac5c:	200001d8 	.word	0x200001d8
 801ac60:	08033805 	.word	0x08033805
 801ac64:	200001f0 	.word	0x200001f0
 801ac68:	08033808 	.word	0x08033808

0801ac6c <GUI_TextRu_Info_Ver>:

void GUI_TextRu_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 801ac6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 801ac6e:	2300      	movs	r3, #0
	
	X = 120;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 801ac70:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801ac74:	9302      	str	r3, [sp, #8]
 801ac76:	f88d 300c 	strb.w	r3, [sp, #12]
{
 801ac7a:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 801ac7e:	f003 fd7b 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ac82:	2063      	movs	r0, #99	; 0x63
 801ac84:	f003 fd7e 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801ac88:	481b      	ldr	r0, [pc, #108]	; (801acf8 <GUI_TextRu_Info_Ver+0x8c>)
	TFT_DrawCharRus(X, Y-1, 'П');
	TFT_DrawCharRus(X+18, Y-1, 'О');
	
	TFT_SetFont(&Font16);
 801ac8a:	4c1c      	ldr	r4, [pc, #112]	; (801acfc <GUI_TextRu_Info_Ver+0x90>)
	TFT_SetFont(&Font16RU_arch_big);
 801ac8c:	f003 fd6e 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y-1, 'П');
 801ac90:	229f      	movs	r2, #159	; 0x9f
 801ac92:	f240 115d 	movw	r1, #349	; 0x15d
 801ac96:	2078      	movs	r0, #120	; 0x78
 801ac98:	f003 fd7a 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+18, Y-1, 'О');
 801ac9c:	229e      	movs	r2, #158	; 0x9e
 801ac9e:	f240 115d 	movw	r1, #349	; 0x15d
 801aca2:	208a      	movs	r0, #138	; 0x8a
 801aca4:	f003 fd74 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16);
 801aca8:	4620      	mov	r0, r4
 801acaa:	f003 fd5f 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+52, Y, '.');
 801acae:	222e      	movs	r2, #46	; 0x2e
 801acb0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801acb4:	20ac      	movs	r0, #172	; 0xac
 801acb6:	f003 fe23 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y, 'v');
 801acba:	2276      	movs	r2, #118	; 0x76
 801acbc:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801acc0:	20a2      	movs	r0, #162	; 0xa2
 801acc2:	f003 fe1d 	bl	801e900 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 801acc6:	ed9d 0a01 	vldr	s0, [sp, #4]
 801acca:	ee10 0a10 	vmov	r0, s0
 801acce:	f7e5 fc53 	bl	8000578 <__aeabi_f2d>
 801acd2:	4602      	mov	r2, r0
 801acd4:	460b      	mov	r3, r1
 801acd6:	a802      	add	r0, sp, #8
 801acd8:	4909      	ldr	r1, [pc, #36]	; (801ad00 <GUI_TextRu_Info_Ver+0x94>)
 801acda:	f007 f861 	bl	8021da0 <sprintf>
	TFT_SetFont(&Font16);
 801acde:	4620      	mov	r0, r4
 801ace0:	f003 fd44 	bl	801e76c <TFT_SetFont>
	TFT_DisplayString(185, Y, (uint8_t *)buffer, LEFT_MODE);
 801ace4:	2303      	movs	r3, #3
 801ace6:	aa02      	add	r2, sp, #8
 801ace8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801acec:	20b9      	movs	r0, #185	; 0xb9
 801acee:	f003 fe5f 	bl	801e9b0 <TFT_DisplayString>
}
 801acf2:	b004      	add	sp, #16
 801acf4:	bd10      	pop	{r4, pc}
 801acf6:	bf00      	nop
 801acf8:	200001d0 	.word	0x200001d0
 801acfc:	200001a8 	.word	0x200001a8
 801ad00:	080337ed 	.word	0x080337ed

0801ad04 <GUI_TextRu_CCT>:

void GUI_TextRu_CCT(uint16_t X, uint16_t Y)
{
 801ad04:	b538      	push	{r3, r4, r5, lr}
 801ad06:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801ad08:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801ad0c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801ad0e:	f003 fd33 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ad12:	2063      	movs	r0, #99	; 0x63
 801ad14:	f003 fd36 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801ad18:	481e      	ldr	r0, [pc, #120]	; (801ad94 <GUI_TextRu_CCT+0x90>)
 801ad1a:	f003 fd27 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'К');
 801ad1e:	4629      	mov	r1, r5
 801ad20:	4620      	mov	r0, r4
 801ad22:	229a      	movs	r2, #154	; 0x9a
 801ad24:	f003 fd34 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'Ц');
 801ad28:	f104 0011 	add.w	r0, r4, #17
 801ad2c:	4629      	mov	r1, r5
 801ad2e:	22a6      	movs	r2, #166	; 0xa6
 801ad30:	b280      	uxth	r0, r0
 801ad32:	f003 fd2d 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+33, Y, 'Т');
 801ad36:	f104 0021 	add.w	r0, r4, #33	; 0x21
 801ad3a:	4629      	mov	r1, r5
 801ad3c:	22a2      	movs	r2, #162	; 0xa2
 801ad3e:	b280      	uxth	r0, r0
 801ad40:	f003 fd26 	bl	801e790 <TFT_DrawCharRus>

	TFT_SetFont(&Font16EN_arch_big);
 801ad44:	4814      	ldr	r0, [pc, #80]	; (801ad98 <GUI_TextRu_CCT+0x94>)
 801ad46:	f003 fd11 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+49, Y, '(');
 801ad4a:	f104 0031 	add.w	r0, r4, #49	; 0x31
 801ad4e:	4629      	mov	r1, r5
 801ad50:	2228      	movs	r2, #40	; 0x28
 801ad52:	b280      	uxth	r0, r0
 801ad54:	f003 fdd4 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+104, Y, ')');
 801ad58:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801ad5c:	4629      	mov	r1, r5
 801ad5e:	2229      	movs	r2, #41	; 0x29
 801ad60:	b280      	uxth	r0, r0
 801ad62:	f003 fdcd 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y, 'C');
 801ad66:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 801ad6a:	4629      	mov	r1, r5
 801ad6c:	2243      	movs	r2, #67	; 0x43
 801ad6e:	b280      	uxth	r0, r0
 801ad70:	f003 fdc6 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y, 'C');
 801ad74:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801ad78:	4629      	mov	r1, r5
 801ad7a:	2243      	movs	r2, #67	; 0x43
 801ad7c:	b280      	uxth	r0, r0
 801ad7e:	f003 fdbf 	bl	801e900 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y, 'T');
 801ad82:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 801ad86:	4629      	mov	r1, r5
 801ad88:	2254      	movs	r2, #84	; 0x54
 801ad8a:	b280      	uxth	r0, r0
}
 801ad8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+91, Y, 'T');
 801ad90:	f003 bdb6 	b.w	801e900 <TFT_DrawChar>
 801ad94:	200001d0 	.word	0x200001d0
 801ad98:	200001b0 	.word	0x200001b0

0801ad9c <GUI_TextRu_umol>:

void GUI_TextRu_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 801ad9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ada0:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801ada2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801ada6:	4616      	mov	r6, r2
 801ada8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801adaa:	f003 fce5 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801adae:	2063      	movs	r0, #99	; 0x63
 801adb0:	f003 fce8 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 801adb4:	482f      	ldr	r0, [pc, #188]	; (801ae74 <GUI_TextRu_umol+0xd8>)
 801adb6:	f003 fcd9 	bl	801e76c <TFT_SetFont>
	
	if(deg){
 801adba:	2e00      	cmp	r6, #0
 801adbc:	d057      	beq.n	801ae6e <GUI_TextRu_umol+0xd2>
		TFT_DrawCharRus(X, Y, 'м');
 801adbe:	22bc      	movs	r2, #188	; 0xbc
	} else{
		TFT_DrawCharRus(X, Y, 'я'+1);
 801adc0:	4629      	mov	r1, r5
 801adc2:	4620      	mov	r0, r4
 801adc4:	f003 fce4 	bl	801e790 <TFT_DrawCharRus>
	}

	TFT_DrawCharRus(X+8, Y, 'м');
 801adc8:	f104 0008 	add.w	r0, r4, #8
 801adcc:	4629      	mov	r1, r5
 801adce:	22bc      	movs	r2, #188	; 0xbc
 801add0:	b280      	uxth	r0, r0
 801add2:	f003 fcdd 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y, 'о');
	TFT_DrawCharRus(X+22, Y, 'л');
 801add6:	f104 0716 	add.w	r7, r4, #22
	TFT_DrawCharRus(X+16, Y, 'о');
 801adda:	f104 0010 	add.w	r0, r4, #16
 801adde:	4629      	mov	r1, r5
	TFT_DrawCharRus(X+22, Y, 'л');
 801ade0:	b2bf      	uxth	r7, r7
	TFT_DrawCharRus(X+16, Y, 'о');
 801ade2:	22be      	movs	r2, #190	; 0xbe
 801ade4:	b280      	uxth	r0, r0
 801ade6:	f003 fcd3 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+22, Y, 'л');
 801adea:	4629      	mov	r1, r5
 801adec:	4638      	mov	r0, r7
 801adee:	22bb      	movs	r2, #187	; 0xbb
 801adf0:	f003 fcce 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y, 'ь');
 801adf4:	f104 001c 	add.w	r0, r4, #28
 801adf8:	4629      	mov	r1, r5
 801adfa:	228c      	movs	r2, #140	; 0x8c
 801adfc:	b280      	uxth	r0, r0
 801adfe:	f003 fcc7 	bl	801e790 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801ae02:	f105 030a 	add.w	r3, r5, #10
 801ae06:	b29b      	uxth	r3, r3
 801ae08:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801ae0c:	f104 0223 	add.w	r2, r4, #35	; 0x23
 801ae10:	4619      	mov	r1, r3
 801ae12:	4620      	mov	r0, r4
 801ae14:	f8cd 8000 	str.w	r8, [sp]
 801ae18:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 801ae1a:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801ae1e:	f003 fa1f 	bl	801e260 <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 801ae22:	b2b6      	uxth	r6, r6
 801ae24:	f104 000d 	add.w	r0, r4, #13
 801ae28:	4631      	mov	r1, r6
 801ae2a:	2291      	movs	r2, #145	; 0x91
 801ae2c:	b280      	uxth	r0, r0
 801ae2e:	f003 fcaf 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+11, 'м');
 801ae32:	1d60      	adds	r0, r4, #5
 801ae34:	4631      	mov	r1, r6
 801ae36:	22bc      	movs	r2, #188	; 0xbc
 801ae38:	b280      	uxth	r0, r0
 801ae3a:	f003 fca9 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 801ae3e:	f105 030f 	add.w	r3, r5, #15
 801ae42:	f104 0214 	add.w	r2, r4, #20
 801ae46:	f105 010e 	add.w	r1, r5, #14
 801ae4a:	f104 0013 	add.w	r0, r4, #19
 801ae4e:	f8cd 8000 	str.w	r8, [sp]
 801ae52:	b29b      	uxth	r3, r3
 801ae54:	b292      	uxth	r2, r2
 801ae56:	b289      	uxth	r1, r1
 801ae58:	b280      	uxth	r0, r0
 801ae5a:	f003 fa76 	bl	801e34a <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+11, 'с');
 801ae5e:	2281      	movs	r2, #129	; 0x81
 801ae60:	4631      	mov	r1, r6
 801ae62:	4638      	mov	r0, r7
}
 801ae64:	b002      	add	sp, #8
 801ae66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+22, Y+11, 'с');
 801ae6a:	f003 bc91 	b.w	801e790 <TFT_DrawCharRus>
		TFT_DrawCharRus(X, Y, 'я'+1);
 801ae6e:	2290      	movs	r2, #144	; 0x90
 801ae70:	e7a6      	b.n	801adc0 <GUI_TextRu_umol+0x24>
 801ae72:	bf00      	nop
 801ae74:	200001a0 	.word	0x200001a0

0801ae78 <GUI_TextRu_umol_sr>:

void GUI_TextRu_umol_sr(uint16_t X, uint16_t Y)
{
 801ae78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ae7c:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801ae7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801ae82:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801ae84:	f003 fc78 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ae88:	2063      	movs	r0, #99	; 0x63
 801ae8a:	f003 fc7b 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 801ae8e:	483c      	ldr	r0, [pc, #240]	; (801af80 <GUI_TextRu_umol_sr+0x108>)
 801ae90:	f003 fc6c 	bl	801e76c <TFT_SetFont>
	
	TFT_DrawCharRus(X+7, Y, 'я'+1);
 801ae94:	1de0      	adds	r0, r4, #7
 801ae96:	4629      	mov	r1, r5
 801ae98:	2290      	movs	r2, #144	; 0x90
 801ae9a:	b280      	uxth	r0, r0
 801ae9c:	f003 fc78 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y, 'м');
 801aea0:	f104 000f 	add.w	r0, r4, #15
 801aea4:	4629      	mov	r1, r5
 801aea6:	22bc      	movs	r2, #188	; 0xbc
 801aea8:	b280      	uxth	r0, r0
 801aeaa:	f003 fc71 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+23, Y, 'о');
 801aeae:	f104 0017 	add.w	r0, r4, #23
 801aeb2:	4629      	mov	r1, r5
 801aeb4:	22be      	movs	r2, #190	; 0xbe
 801aeb6:	b280      	uxth	r0, r0
 801aeb8:	f003 fc6a 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y, 'л');
 801aebc:	f104 001d 	add.w	r0, r4, #29
 801aec0:	4629      	mov	r1, r5
 801aec2:	22bb      	movs	r2, #187	; 0xbb
 801aec4:	b280      	uxth	r0, r0
 801aec6:	f003 fc63 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+35, Y, 'ь');
 801aeca:	f104 0023 	add.w	r0, r4, #35	; 0x23
 801aece:	4629      	mov	r1, r5
 801aed0:	228c      	movs	r2, #140	; 0x8c
 801aed2:	b280      	uxth	r0, r0
 801aed4:	f003 fc5c 	bl	801e790 <TFT_DrawCharRus>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 801aed8:	f105 030a 	add.w	r3, r5, #10
 801aedc:	b29b      	uxth	r3, r3
 801aede:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801aee2:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 801aee6:	1ce0      	adds	r0, r4, #3
 801aee8:	4619      	mov	r1, r3
 801aeea:	f8cd 8000 	str.w	r8, [sp]
 801aeee:	b292      	uxth	r2, r2
 801aef0:	b280      	uxth	r0, r0
	
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 801aef2:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 801aef6:	f003 f9b3 	bl	801e260 <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 801aefa:	b2b6      	uxth	r6, r6
 801aefc:	f104 000d 	add.w	r0, r4, #13
 801af00:	4631      	mov	r1, r6
 801af02:	2291      	movs	r2, #145	; 0x91
 801af04:	b280      	uxth	r0, r0
 801af06:	f003 fc43 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+12, 'м');
 801af0a:	1d60      	adds	r0, r4, #5
 801af0c:	4631      	mov	r1, r6
 801af0e:	22bc      	movs	r2, #188	; 0xbc
 801af10:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 801af12:	f105 0710 	add.w	r7, r5, #16
 801af16:	350f      	adds	r5, #15
	TFT_DrawCharRus(X+5, Y+12, 'м');
 801af18:	f003 fc3a 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 801af1c:	b2bf      	uxth	r7, r7
 801af1e:	b2ad      	uxth	r5, r5
 801af20:	f104 0214 	add.w	r2, r4, #20
 801af24:	f104 0013 	add.w	r0, r4, #19
 801af28:	462b      	mov	r3, r5
 801af2a:	4639      	mov	r1, r7
 801af2c:	f8cd 8000 	str.w	r8, [sp]
 801af30:	b292      	uxth	r2, r2
 801af32:	b280      	uxth	r0, r0
 801af34:	f003 fa09 	bl	801e34a <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+12, 'с');
 801af38:	f104 0016 	add.w	r0, r4, #22
 801af3c:	4631      	mov	r1, r6
 801af3e:	2281      	movs	r2, #129	; 0x81
 801af40:	b280      	uxth	r0, r0
 801af42:	f003 fc25 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+30, Y+16, X+31, Y+15, TFT_White);
 801af46:	f104 021f 	add.w	r2, r4, #31
 801af4a:	f104 001e 	add.w	r0, r4, #30
 801af4e:	462b      	mov	r3, r5
 801af50:	4639      	mov	r1, r7
 801af52:	f8cd 8000 	str.w	r8, [sp]
 801af56:	b292      	uxth	r2, r2
 801af58:	b280      	uxth	r0, r0
 801af5a:	f003 f9f6 	bl	801e34a <TFT_DrawRectangle>
	TFT_DrawCharRus(X+32, Y+12, 'с');
 801af5e:	f104 0020 	add.w	r0, r4, #32
 801af62:	4631      	mov	r1, r6
 801af64:	2281      	movs	r2, #129	; 0x81
 801af66:	b280      	uxth	r0, r0
 801af68:	f003 fc12 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+12, 'р');
 801af6c:	f104 0027 	add.w	r0, r4, #39	; 0x27
 801af70:	2280      	movs	r2, #128	; 0x80
 801af72:	4631      	mov	r1, r6
 801af74:	b280      	uxth	r0, r0
	
}
 801af76:	b002      	add	sp, #8
 801af78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+39, Y+12, 'р');
 801af7c:	f003 bc08 	b.w	801e790 <TFT_DrawCharRus>
 801af80:	200001a0 	.word	0x200001a0

0801af84 <GUI_TextRu_W_m2>:

void GUI_TextRu_W_m2(uint16_t X, uint16_t Y)
{
 801af84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801af86:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801af88:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801af8c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801af8e:	f003 fbf3 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801af92:	2063      	movs	r0, #99	; 0x63
 801af94:	f003 fbf6 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 801af98:	4819      	ldr	r0, [pc, #100]	; (801b000 <GUI_TextRu_W_m2+0x7c>)
 801af9a:	f003 fbe7 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+3, Y, 'В'-17);
 801af9e:	1ce8      	adds	r0, r5, #3
 801afa0:	4621      	mov	r1, r4
 801afa2:	2281      	movs	r2, #129	; 0x81
 801afa4:	b280      	uxth	r0, r0
 801afa6:	f003 fbf3 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 801afaa:	4816      	ldr	r0, [pc, #88]	; (801b004 <GUI_TextRu_W_m2+0x80>)
 801afac:	f003 fbde 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+13, Y+2, 'т');
 801afb0:	1ca1      	adds	r1, r4, #2
 801afb2:	f105 000d 	add.w	r0, r5, #13
 801afb6:	2282      	movs	r2, #130	; 0x82
 801afb8:	b289      	uxth	r1, r1
 801afba:	b280      	uxth	r0, r0
 801afbc:	f003 fbe8 	bl	801e790 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 801afc0:	f104 030a 	add.w	r3, r4, #10
 801afc4:	b29b      	uxth	r3, r3
 801afc6:	f105 0214 	add.w	r2, r5, #20
 801afca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801afce:	9100      	str	r1, [sp, #0]
 801afd0:	4628      	mov	r0, r5
 801afd2:	4619      	mov	r1, r3
 801afd4:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 801afd6:	340c      	adds	r4, #12
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 801afd8:	f003 f942 	bl	801e260 <TFT_DrawLine>
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 801afdc:	b2a4      	uxth	r4, r4
 801afde:	f105 000c 	add.w	r0, r5, #12
 801afe2:	4621      	mov	r1, r4
 801afe4:	2291      	movs	r2, #145	; 0x91
 801afe6:	b280      	uxth	r0, r0
 801afe8:	f003 fbd2 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+4, Y+12, 'м');
 801afec:	1d28      	adds	r0, r5, #4
 801afee:	22bc      	movs	r2, #188	; 0xbc
 801aff0:	4621      	mov	r1, r4
 801aff2:	b280      	uxth	r0, r0
}
 801aff4:	b003      	add	sp, #12
 801aff6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	TFT_DrawCharRus(X+4, Y+12, 'м');
 801affa:	f003 bbc9 	b.w	801e790 <TFT_DrawCharRus>
 801affe:	bf00      	nop
 801b000:	20000198 	.word	0x20000198
 801b004:	200001a0 	.word	0x200001a0

0801b008 <GUI_TextRu_W_m2_sr>:

void GUI_TextRu_W_m2_sr(uint16_t X, uint16_t Y)
{
 801b008:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b00c:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801b00e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b012:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801b014:	f003 fbb0 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b018:	2063      	movs	r0, #99	; 0x63
 801b01a:	f003 fbb3 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 801b01e:	4829      	ldr	r0, [pc, #164]	; (801b0c4 <GUI_TextRu_W_m2_sr+0xbc>)
 801b020:	f003 fba4 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+8, Y, 'В'-17);
 801b024:	f104 0008 	add.w	r0, r4, #8
 801b028:	4629      	mov	r1, r5
 801b02a:	2281      	movs	r2, #129	; 0x81
 801b02c:	b280      	uxth	r0, r0
 801b02e:	f003 fbaf 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
	TFT_DrawCharRus(X+18, Y+2, 'т');
 801b032:	f104 0712 	add.w	r7, r4, #18
	TFT_SetFont(&Font12RU_arch_small);
 801b036:	4824      	ldr	r0, [pc, #144]	; (801b0c8 <GUI_TextRu_W_m2_sr+0xc0>)
 801b038:	f003 fb98 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+18, Y+2, 'т');
 801b03c:	b2bf      	uxth	r7, r7
 801b03e:	1ca9      	adds	r1, r5, #2
 801b040:	4638      	mov	r0, r7
 801b042:	2282      	movs	r2, #130	; 0x82
 801b044:	b289      	uxth	r1, r1
 801b046:	f003 fba3 	bl	801e790 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801b04a:	f105 030a 	add.w	r3, r5, #10
 801b04e:	b29b      	uxth	r3, r3
 801b050:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801b054:	f104 0223 	add.w	r2, r4, #35	; 0x23
 801b058:	4619      	mov	r1, r3
 801b05a:	4620      	mov	r0, r4
 801b05c:	f8cd 8000 	str.w	r8, [sp]
 801b060:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 801b062:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801b066:	f003 f8fb 	bl	801e260 <TFT_DrawLine>
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 801b06a:	b2b6      	uxth	r6, r6
 801b06c:	f104 000a 	add.w	r0, r4, #10
 801b070:	4631      	mov	r1, r6
 801b072:	2291      	movs	r2, #145	; 0x91
 801b074:	b280      	uxth	r0, r0
 801b076:	f003 fb8b 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+2, Y+12, 'м');
 801b07a:	1ca0      	adds	r0, r4, #2
 801b07c:	4631      	mov	r1, r6
 801b07e:	22bc      	movs	r2, #188	; 0xbc
 801b080:	b280      	uxth	r0, r0
 801b082:	f003 fb85 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+17, Y+16, X+18, Y+15, TFT_White);
 801b086:	f105 030f 	add.w	r3, r5, #15
 801b08a:	f105 0110 	add.w	r1, r5, #16
 801b08e:	f104 0011 	add.w	r0, r4, #17
 801b092:	b29b      	uxth	r3, r3
 801b094:	463a      	mov	r2, r7
 801b096:	f8cd 8000 	str.w	r8, [sp]
 801b09a:	b289      	uxth	r1, r1
 801b09c:	b280      	uxth	r0, r0
 801b09e:	f003 f954 	bl	801e34a <TFT_DrawRectangle>
	TFT_DrawCharRus(X+21, Y+12, 'с');
 801b0a2:	f104 0015 	add.w	r0, r4, #21
 801b0a6:	4631      	mov	r1, r6
 801b0a8:	2281      	movs	r2, #129	; 0x81
 801b0aa:	b280      	uxth	r0, r0
 801b0ac:	f003 fb70 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+12, 'р');
 801b0b0:	f104 001c 	add.w	r0, r4, #28
 801b0b4:	2280      	movs	r2, #128	; 0x80
 801b0b6:	4631      	mov	r1, r6
 801b0b8:	b280      	uxth	r0, r0
}
 801b0ba:	b002      	add	sp, #8
 801b0bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+28, Y+12, 'р');
 801b0c0:	f003 bb66 	b.w	801e790 <TFT_DrawCharRus>
 801b0c4:	20000198 	.word	0x20000198
 801b0c8:	200001a0 	.word	0x200001a0

0801b0cc <GUI_TextRu_Cd_m2>:

void GUI_TextRu_Cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 801b0cc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801b0d0:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801b0d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b0d6:	460e      	mov	r6, r1
 801b0d8:	4692      	mov	sl, r2
	TFT_SetTextColor(TFT_White);
 801b0da:	f003 fb4d 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b0de:	2063      	movs	r0, #99	; 0x63
 801b0e0:	f003 fb50 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 801b0e4:	482f      	ldr	r0, [pc, #188]	; (801b1a4 <GUI_TextRu_Cd_m2+0xd8>)
 801b0e6:	f003 fb41 	bl	801e76c <TFT_SetFont>
 801b0ea:	f104 0008 	add.w	r0, r4, #8
 801b0ee:	f104 0810 	add.w	r8, r4, #16
 801b0f2:	f106 070a 	add.w	r7, r6, #10
 801b0f6:	f104 0906 	add.w	r9, r4, #6
 801b0fa:	f106 050c 	add.w	r5, r6, #12
	
	if(deg){
		TFT_DrawCharRus(X+8, Y, 'к');
 801b0fe:	22ba      	movs	r2, #186	; 0xba
 801b100:	4631      	mov	r1, r6
 801b102:	b280      	uxth	r0, r0
	if(deg){
 801b104:	f1ba 0f00 	cmp.w	sl, #0
 801b108:	d02c      	beq.n	801b164 <GUI_TextRu_Cd_m2+0x98>
		TFT_DrawCharRus(X+8, Y, 'к');
 801b10a:	f003 fb41 	bl	801e790 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'к');
 801b10e:	22ba      	movs	r2, #186	; 0xba
 801b110:	4631      	mov	r1, r6
 801b112:	fa1f f088 	uxth.w	r0, r8
 801b116:	f003 fb3b 	bl	801e790 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+24, Y, 'д');
 801b11a:	f104 0018 	add.w	r0, r4, #24
 801b11e:	22b4      	movs	r2, #180	; 0xb4
 801b120:	4631      	mov	r1, r6
 801b122:	b280      	uxth	r0, r0
 801b124:	f003 fb34 	bl	801e790 <TFT_DrawCharRus>
		
		TFT_DrawLine(X+6, Y+10, X+31, Y+10, TFT_White);
 801b128:	b2bb      	uxth	r3, r7
 801b12a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b12e:	f104 021f 	add.w	r2, r4, #31
 801b132:	9100      	str	r1, [sp, #0]
 801b134:	b292      	uxth	r2, r2
 801b136:	4619      	mov	r1, r3
 801b138:	fa1f f089 	uxth.w	r0, r9
 801b13c:	f003 f890 	bl	801e260 <TFT_DrawLine>
		
		TFT_DrawCharRus(X+20, Y+12, 'я'+2);
 801b140:	b2ad      	uxth	r5, r5
 801b142:	f104 0014 	add.w	r0, r4, #20
 801b146:	b280      	uxth	r0, r0
 801b148:	2291      	movs	r2, #145	; 0x91
 801b14a:	4629      	mov	r1, r5
 801b14c:	f003 fb20 	bl	801e790 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+12, Y+12, 'м');}
 801b150:	f104 000c 	add.w	r0, r4, #12
		TFT_DrawCharRus(X+16, Y, 'д');
		
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
		
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 801b154:	22bc      	movs	r2, #188	; 0xbc
 801b156:	4629      	mov	r1, r5
 801b158:	b280      	uxth	r0, r0
		
}
 801b15a:	b002      	add	sp, #8
 801b15c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 801b160:	f003 bb16 	b.w	801e790 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+8, Y, 'к');
 801b164:	f003 fb14 	bl	801e790 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'д');
 801b168:	22b4      	movs	r2, #180	; 0xb4
 801b16a:	4631      	mov	r1, r6
 801b16c:	fa1f f088 	uxth.w	r0, r8
 801b170:	f003 fb0e 	bl	801e790 <TFT_DrawCharRus>
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
 801b174:	b2bb      	uxth	r3, r7
 801b176:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b17a:	f104 0217 	add.w	r2, r4, #23
 801b17e:	9100      	str	r1, [sp, #0]
 801b180:	b292      	uxth	r2, r2
 801b182:	4619      	mov	r1, r3
 801b184:	fa1f f089 	uxth.w	r0, r9
 801b188:	f003 f86a 	bl	801e260 <TFT_DrawLine>
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
 801b18c:	b2ad      	uxth	r5, r5
 801b18e:	f104 0011 	add.w	r0, r4, #17
 801b192:	b280      	uxth	r0, r0
 801b194:	2291      	movs	r2, #145	; 0x91
 801b196:	4629      	mov	r1, r5
 801b198:	f003 fafa 	bl	801e790 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 801b19c:	f104 0009 	add.w	r0, r4, #9
 801b1a0:	e7d8      	b.n	801b154 <GUI_TextRu_Cd_m2+0x88>
 801b1a2:	bf00      	nop
 801b1a4:	200001a0 	.word	0x200001a0

0801b1a8 <GUI_TextRu_Irradiance>:

void GUI_TextRu_Irradiance(uint16_t X, uint16_t Y)
{
 801b1a8:	b538      	push	{r3, r4, r5, lr}
 801b1aa:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b1ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b1b0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b1b2:	f003 fae1 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b1b6:	2063      	movs	r0, #99	; 0x63
 801b1b8:	f003 fae4 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801b1bc:	482d      	ldr	r0, [pc, #180]	; (801b274 <GUI_TextRu_Irradiance+0xcc>)
 801b1be:	f003 fad5 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 801b1c2:	4621      	mov	r1, r4
 801b1c4:	229e      	movs	r2, #158	; 0x9e
 801b1c6:	4628      	mov	r0, r5
 801b1c8:	f003 fae2 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'б');
 801b1cc:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b1ce:	482a      	ldr	r0, [pc, #168]	; (801b278 <GUI_TextRu_Irradiance+0xd0>)
	TFT_DrawCharRus(X+16, Y+5, 'б');
 801b1d0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b1d2:	f003 facb 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'б');
 801b1d6:	f105 0010 	add.w	r0, r5, #16
 801b1da:	4621      	mov	r1, r4
 801b1dc:	22b1      	movs	r2, #177	; 0xb1
 801b1de:	b280      	uxth	r0, r0
 801b1e0:	f003 fad6 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'л');
 801b1e4:	f105 001b 	add.w	r0, r5, #27
 801b1e8:	4621      	mov	r1, r4
 801b1ea:	22bb      	movs	r2, #187	; 0xbb
 801b1ec:	b280      	uxth	r0, r0
 801b1ee:	f003 facf 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+5, 'у');
 801b1f2:	f105 0027 	add.w	r0, r5, #39	; 0x27
 801b1f6:	4621      	mov	r1, r4
 801b1f8:	2283      	movs	r2, #131	; 0x83
 801b1fa:	b280      	uxth	r0, r0
 801b1fc:	f003 fac8 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+51, Y+5, 'ч');
 801b200:	f105 0033 	add.w	r0, r5, #51	; 0x33
 801b204:	4621      	mov	r1, r4
 801b206:	2287      	movs	r2, #135	; 0x87
 801b208:	b280      	uxth	r0, r0
 801b20a:	f003 fac1 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'е');
 801b20e:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 801b212:	4621      	mov	r1, r4
 801b214:	22b5      	movs	r2, #181	; 0xb5
 801b216:	b280      	uxth	r0, r0
 801b218:	f003 faba 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'н');
 801b21c:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 801b220:	4621      	mov	r1, r4
 801b222:	22bd      	movs	r2, #189	; 0xbd
 801b224:	b280      	uxth	r0, r0
 801b226:	f003 fab3 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+86, Y+5, 'н');
 801b22a:	f105 0056 	add.w	r0, r5, #86	; 0x56
 801b22e:	4621      	mov	r1, r4
 801b230:	22bd      	movs	r2, #189	; 0xbd
 801b232:	b280      	uxth	r0, r0
 801b234:	f003 faac 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+98, Y+5, 'о');
 801b238:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801b23c:	4621      	mov	r1, r4
 801b23e:	22be      	movs	r2, #190	; 0xbe
 801b240:	b280      	uxth	r0, r0
 801b242:	f003 faa5 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+110, Y+5, 'с');
 801b246:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 801b24a:	4621      	mov	r1, r4
 801b24c:	2281      	movs	r2, #129	; 0x81
 801b24e:	b280      	uxth	r0, r0
 801b250:	f003 fa9e 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+119, Y+5, 'т');
 801b254:	f105 0077 	add.w	r0, r5, #119	; 0x77
 801b258:	4621      	mov	r1, r4
 801b25a:	2282      	movs	r2, #130	; 0x82
 801b25c:	b280      	uxth	r0, r0
 801b25e:	f003 fa97 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801b262:	f105 0083 	add.w	r0, r5, #131	; 0x83
 801b266:	4621      	mov	r1, r4
 801b268:	228c      	movs	r2, #140	; 0x8c
 801b26a:	b280      	uxth	r0, r0
}
 801b26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801b270:	f003 ba8e 	b.w	801e790 <TFT_DrawCharRus>
 801b274:	200001d0 	.word	0x200001d0
 801b278:	200001d8 	.word	0x200001d8

0801b27c <GUI_TextRu_Luminance>:

void GUI_TextRu_Luminance(uint16_t X, uint16_t Y)
{
 801b27c:	b538      	push	{r3, r4, r5, lr}
 801b27e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b280:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b284:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b286:	f003 fa77 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b28a:	2063      	movs	r0, #99	; 0x63
 801b28c:	f003 fa7a 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801b290:	481c      	ldr	r0, [pc, #112]	; (801b304 <GUI_TextRu_Luminance+0x88>)
 801b292:	f003 fa6b 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 801b296:	4621      	mov	r1, r4
 801b298:	22af      	movs	r2, #175	; 0xaf
 801b29a:	4628      	mov	r0, r5
 801b29c:	f003 fa78 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'р');
 801b2a0:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b2a2:	4819      	ldr	r0, [pc, #100]	; (801b308 <GUI_TextRu_Luminance+0x8c>)
	TFT_DrawCharRus(X+16, Y+5, 'р');
 801b2a4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b2a6:	f003 fa61 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'р');
 801b2aa:	f105 0010 	add.w	r0, r5, #16
 801b2ae:	4621      	mov	r1, r4
 801b2b0:	2280      	movs	r2, #128	; 0x80
 801b2b2:	b280      	uxth	r0, r0
 801b2b4:	f003 fa6c 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'к');
 801b2b8:	f105 001c 	add.w	r0, r5, #28
 801b2bc:	4621      	mov	r1, r4
 801b2be:	22ba      	movs	r2, #186	; 0xba
 801b2c0:	b280      	uxth	r0, r0
 801b2c2:	f003 fa65 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'о');
 801b2c6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801b2ca:	4621      	mov	r1, r4
 801b2cc:	22be      	movs	r2, #190	; 0xbe
 801b2ce:	b280      	uxth	r0, r0
 801b2d0:	f003 fa5e 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'с');
 801b2d4:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801b2d8:	4621      	mov	r1, r4
 801b2da:	2281      	movs	r2, #129	; 0x81
 801b2dc:	b280      	uxth	r0, r0
 801b2de:	f003 fa57 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'т');
 801b2e2:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 801b2e6:	4621      	mov	r1, r4
 801b2e8:	2282      	movs	r2, #130	; 0x82
 801b2ea:	b280      	uxth	r0, r0
 801b2ec:	f003 fa50 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 801b2f0:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 801b2f4:	4621      	mov	r1, r4
 801b2f6:	228c      	movs	r2, #140	; 0x8c
 801b2f8:	b280      	uxth	r0, r0
}
 801b2fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 801b2fe:	f003 ba47 	b.w	801e790 <TFT_DrawCharRus>
 801b302:	bf00      	nop
 801b304:	200001d0 	.word	0x200001d0
 801b308:	200001d8 	.word	0x200001d8

0801b30c <GUI_TextRu_Radiance>:

void GUI_TextRu_Radiance(uint16_t X, uint16_t Y)
{
 801b30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b30e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801b310:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b314:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 801b316:	f003 fa2f 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b31a:	2063      	movs	r0, #99	; 0x63
 801b31c:	f003 fa32 	bl	801e784 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
	TFT_DrawCharRus(X, Y, 'Э');
	TFT_SetFont(&Font16RU_arch_small);
 801b320:	4f31      	ldr	r7, [pc, #196]	; (801b3e8 <GUI_TextRu_Radiance+0xdc>)
	TFT_SetFont(&Font16RU_arch_big);
 801b322:	4832      	ldr	r0, [pc, #200]	; (801b3ec <GUI_TextRu_Radiance+0xe0>)
 801b324:	f003 fa22 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Э');
 801b328:	4631      	mov	r1, r6
 801b32a:	22ad      	movs	r2, #173	; 0xad
 801b32c:	4620      	mov	r0, r4
 801b32e:	f003 fa2f 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801b332:	1d75      	adds	r5, r6, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b334:	4638      	mov	r0, r7
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801b336:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16RU_arch_small);
 801b338:	f003 fa18 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801b33c:	f104 0010 	add.w	r0, r4, #16
 801b340:	4629      	mov	r1, r5
 801b342:	22bd      	movs	r2, #189	; 0xbd
 801b344:	b280      	uxth	r0, r0
 801b346:	f003 fa23 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y+5, 'е');
 801b34a:	f104 001d 	add.w	r0, r4, #29
 801b34e:	4629      	mov	r1, r5
 801b350:	22b5      	movs	r2, #181	; 0xb5
 801b352:	b280      	uxth	r0, r0
 801b354:	f003 fa1c 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 801b358:	4825      	ldr	r0, [pc, #148]	; (801b3f0 <GUI_TextRu_Radiance+0xe4>)
 801b35a:	f003 fa07 	bl	801e76c <TFT_SetFont>
	TFT_DrawChar(X+46, 		Y, '.');
 801b35e:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 801b362:	4631      	mov	r1, r6
 801b364:	222e      	movs	r2, #46	; 0x2e
 801b366:	b280      	uxth	r0, r0
 801b368:	f003 faca 	bl	801e900 <TFT_DrawChar>

	TFT_SetFont(&Font16RU_arch_small);
 801b36c:	4638      	mov	r0, r7
 801b36e:	f003 f9fd 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X+41, Y+5, 'р');
 801b372:	f104 0029 	add.w	r0, r4, #41	; 0x29
 801b376:	4629      	mov	r1, r5
 801b378:	2280      	movs	r2, #128	; 0x80
 801b37a:	b280      	uxth	r0, r0
 801b37c:	f003 fa08 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+61, Y+5, 'я');
 801b380:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 801b384:	4629      	mov	r1, r5
 801b386:	228f      	movs	r2, #143	; 0x8f
 801b388:	b280      	uxth	r0, r0
 801b38a:	f003 fa01 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'р');
 801b38e:	f104 0049 	add.w	r0, r4, #73	; 0x49
 801b392:	4629      	mov	r1, r5
 801b394:	2280      	movs	r2, #128	; 0x80
 801b396:	b280      	uxth	r0, r0
 801b398:	f003 f9fa 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'к');
 801b39c:	f104 0055 	add.w	r0, r4, #85	; 0x55
 801b3a0:	4629      	mov	r1, r5
 801b3a2:	22ba      	movs	r2, #186	; 0xba
 801b3a4:	b280      	uxth	r0, r0
 801b3a6:	f003 f9f3 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 801b3aa:	f104 0061 	add.w	r0, r4, #97	; 0x61
 801b3ae:	4629      	mov	r1, r5
 801b3b0:	22be      	movs	r2, #190	; 0xbe
 801b3b2:	b280      	uxth	r0, r0
 801b3b4:	f003 f9ec 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 801b3b8:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 801b3bc:	4629      	mov	r1, r5
 801b3be:	2281      	movs	r2, #129	; 0x81
 801b3c0:	b280      	uxth	r0, r0
 801b3c2:	f003 f9e5 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+120, Y+5, 'т');
 801b3c6:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801b3ca:	4629      	mov	r1, r5
 801b3cc:	2282      	movs	r2, #130	; 0x82
 801b3ce:	b280      	uxth	r0, r0
 801b3d0:	f003 f9de 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801b3d4:	f104 0083 	add.w	r0, r4, #131	; 0x83
 801b3d8:	4629      	mov	r1, r5
 801b3da:	228c      	movs	r2, #140	; 0x8c
 801b3dc:	b280      	uxth	r0, r0

}
 801b3de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801b3e2:	f003 b9d5 	b.w	801e790 <TFT_DrawCharRus>
 801b3e6:	bf00      	nop
 801b3e8:	200001d8 	.word	0x200001d8
 801b3ec:	200001d0 	.word	0x200001d0
 801b3f0:	200001b0 	.word	0x200001b0

0801b3f4 <GUI_TextMsgRu_LowIrradiance>:

void GUI_TextMsgRu_LowIrradiance(uint16_t X, uint16_t Y)
{
 801b3f4:	b538      	push	{r3, r4, r5, lr}
 801b3f6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b3f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b3fc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b3fe:	f003 f9bb 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b402:	2063      	movs	r0, #99	; 0x63
 801b404:	f003 f9be 	bl	801e784 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801b408:	483f      	ldr	r0, [pc, #252]	; (801b508 <GUI_TextMsgRu_LowIrradiance+0x114>)
 801b40a:	f003 f9af 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 801b40e:	4621      	mov	r1, r4
 801b410:	229c      	movs	r2, #156	; 0x9c
 801b412:	4628      	mov	r0, r5
 801b414:	f003 f9bc 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801b418:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b41a:	483c      	ldr	r0, [pc, #240]	; (801b50c <GUI_TextMsgRu_LowIrradiance+0x118>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801b41c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b41e:	f003 f9a5 	bl	801e76c <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801b422:	f105 0010 	add.w	r0, r5, #16
 801b426:	4621      	mov	r1, r4
 801b428:	22b0      	movs	r2, #176	; 0xb0
 801b42a:	b280      	uxth	r0, r0
 801b42c:	f003 f9b0 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 801b430:	f105 001c 	add.w	r0, r5, #28
 801b434:	4621      	mov	r1, r4
 801b436:	22bb      	movs	r2, #187	; 0xbb
 801b438:	b280      	uxth	r0, r0
 801b43a:	f003 f9a9 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 801b43e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801b442:	4621      	mov	r1, r4
 801b444:	22b0      	movs	r2, #176	; 0xb0
 801b446:	b280      	uxth	r0, r0
 801b448:	f003 f9a2 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 801b44c:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801b450:	4621      	mov	r1, r4
 801b452:	228f      	movs	r2, #143	; 0x8f
 801b454:	b280      	uxth	r0, r0
 801b456:	f003 f99b 	bl	801e790 <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'о');
 801b45a:	f105 0049 	add.w	r0, r5, #73	; 0x49
 801b45e:	4621      	mov	r1, r4
 801b460:	22be      	movs	r2, #190	; 0xbe
 801b462:	b280      	uxth	r0, r0
 801b464:	f003 f994 	bl	801e790 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+87, Y+5, 'б');
 801b468:	f105 0057 	add.w	r0, r5, #87	; 0x57
 801b46c:	4621      	mov	r1, r4
 801b46e:	22b1      	movs	r2, #177	; 0xb1
 801b470:	b280      	uxth	r0, r0
 801b472:	f003 f98d 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+98, Y+5, 'л');
 801b476:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801b47a:	4621      	mov	r1, r4
 801b47c:	22bb      	movs	r2, #187	; 0xbb
 801b47e:	b280      	uxth	r0, r0
 801b480:	f003 f986 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+110, Y+5, 'у');
 801b484:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 801b488:	4621      	mov	r1, r4
 801b48a:	2283      	movs	r2, #131	; 0x83
 801b48c:	b280      	uxth	r0, r0
 801b48e:	f003 f97f 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+122, Y+5, 'ч');
 801b492:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 801b496:	4621      	mov	r1, r4
 801b498:	2287      	movs	r2, #135	; 0x87
 801b49a:	b280      	uxth	r0, r0
 801b49c:	f003 f978 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+134, Y+5, 'е');
 801b4a0:	f105 0086 	add.w	r0, r5, #134	; 0x86
 801b4a4:	4621      	mov	r1, r4
 801b4a6:	22b5      	movs	r2, #181	; 0xb5
 801b4a8:	b280      	uxth	r0, r0
 801b4aa:	f003 f971 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+145, Y+5, 'н');
 801b4ae:	f105 0091 	add.w	r0, r5, #145	; 0x91
 801b4b2:	4621      	mov	r1, r4
 801b4b4:	22bd      	movs	r2, #189	; 0xbd
 801b4b6:	b280      	uxth	r0, r0
 801b4b8:	f003 f96a 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+157, Y+5, 'н');
 801b4bc:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 801b4c0:	4621      	mov	r1, r4
 801b4c2:	22bd      	movs	r2, #189	; 0xbd
 801b4c4:	b280      	uxth	r0, r0
 801b4c6:	f003 f963 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+169, Y+5, 'о');
 801b4ca:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
 801b4ce:	4621      	mov	r1, r4
 801b4d0:	22be      	movs	r2, #190	; 0xbe
 801b4d2:	b280      	uxth	r0, r0
 801b4d4:	f003 f95c 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+181, Y+5, 'с');
 801b4d8:	f105 00b5 	add.w	r0, r5, #181	; 0xb5
 801b4dc:	4621      	mov	r1, r4
 801b4de:	2281      	movs	r2, #129	; 0x81
 801b4e0:	b280      	uxth	r0, r0
 801b4e2:	f003 f955 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+190, Y+5, 'т');
 801b4e6:	f105 00be 	add.w	r0, r5, #190	; 0xbe
 801b4ea:	4621      	mov	r1, r4
 801b4ec:	2282      	movs	r2, #130	; 0x82
 801b4ee:	b280      	uxth	r0, r0
 801b4f0:	f003 f94e 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 801b4f4:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 801b4f8:	4621      	mov	r1, r4
 801b4fa:	228c      	movs	r2, #140	; 0x8c
 801b4fc:	b280      	uxth	r0, r0
}
 801b4fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 801b502:	f003 b945 	b.w	801e790 <TFT_DrawCharRus>
 801b506:	bf00      	nop
 801b508:	200001d0 	.word	0x200001d0
 801b50c:	200001d8 	.word	0x200001d8

0801b510 <GUI_TextMsgRu_LowRadiance>:

void GUI_TextMsgRu_LowRadiance(uint16_t X, uint16_t Y)
{
 801b510:	b538      	push	{r3, r4, r5, lr}
 801b512:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b514:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b518:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b51a:	f003 f92d 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b51e:	2063      	movs	r0, #99	; 0x63
 801b520:	f003 f930 	bl	801e784 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801b524:	482d      	ldr	r0, [pc, #180]	; (801b5dc <GUI_TextMsgRu_LowRadiance+0xcc>)
 801b526:	f003 f921 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 801b52a:	4621      	mov	r1, r4
 801b52c:	229c      	movs	r2, #156	; 0x9c
 801b52e:	4628      	mov	r0, r5
 801b530:	f003 f92e 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801b534:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b536:	482a      	ldr	r0, [pc, #168]	; (801b5e0 <GUI_TextMsgRu_LowRadiance+0xd0>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801b538:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b53a:	f003 f917 	bl	801e76c <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801b53e:	f105 0010 	add.w	r0, r5, #16
 801b542:	4621      	mov	r1, r4
 801b544:	22b0      	movs	r2, #176	; 0xb0
 801b546:	b280      	uxth	r0, r0
 801b548:	f003 f922 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 801b54c:	f105 001c 	add.w	r0, r5, #28
 801b550:	4621      	mov	r1, r4
 801b552:	22bb      	movs	r2, #187	; 0xbb
 801b554:	b280      	uxth	r0, r0
 801b556:	f003 f91b 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 801b55a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801b55e:	4621      	mov	r1, r4
 801b560:	22b0      	movs	r2, #176	; 0xb0
 801b562:	b280      	uxth	r0, r0
 801b564:	f003 f914 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 801b568:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801b56c:	4621      	mov	r1, r4
 801b56e:	228f      	movs	r2, #143	; 0x8f
 801b570:	b280      	uxth	r0, r0
 801b572:	f003 f90d 	bl	801e790 <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'я');
 801b576:	f105 0049 	add.w	r0, r5, #73	; 0x49
 801b57a:	4621      	mov	r1, r4
 801b57c:	228f      	movs	r2, #143	; 0x8f
 801b57e:	b280      	uxth	r0, r0
 801b580:	f003 f906 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+85, Y+5, 'р');
 801b584:	f105 0055 	add.w	r0, r5, #85	; 0x55
 801b588:	4621      	mov	r1, r4
 801b58a:	2280      	movs	r2, #128	; 0x80
 801b58c:	b280      	uxth	r0, r0
 801b58e:	f003 f8ff 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+97, Y+5, 'к');
 801b592:	f105 0061 	add.w	r0, r5, #97	; 0x61
 801b596:	4621      	mov	r1, r4
 801b598:	22ba      	movs	r2, #186	; 0xba
 801b59a:	b280      	uxth	r0, r0
 801b59c:	f003 f8f8 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+109, Y+5, 'о');
 801b5a0:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 801b5a4:	4621      	mov	r1, r4
 801b5a6:	22be      	movs	r2, #190	; 0xbe
 801b5a8:	b280      	uxth	r0, r0
 801b5aa:	f003 f8f1 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+121, Y+5, 'с');
 801b5ae:	f105 0079 	add.w	r0, r5, #121	; 0x79
 801b5b2:	4621      	mov	r1, r4
 801b5b4:	2281      	movs	r2, #129	; 0x81
 801b5b6:	b280      	uxth	r0, r0
 801b5b8:	f003 f8ea 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+132, Y+5, 'т');
 801b5bc:	f105 0084 	add.w	r0, r5, #132	; 0x84
 801b5c0:	4621      	mov	r1, r4
 801b5c2:	2282      	movs	r2, #130	; 0x82
 801b5c4:	b280      	uxth	r0, r0
 801b5c6:	f003 f8e3 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 801b5ca:	f105 008f 	add.w	r0, r5, #143	; 0x8f
 801b5ce:	4621      	mov	r1, r4
 801b5d0:	228c      	movs	r2, #140	; 0x8c
 801b5d2:	b280      	uxth	r0, r0
}
 801b5d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 801b5d8:	f003 b8da 	b.w	801e790 <TFT_DrawCharRus>
 801b5dc:	200001d0 	.word	0x200001d0
 801b5e0:	200001d8 	.word	0x200001d8

0801b5e4 <GUI_TextMsgRu_HighIrradiance>:

void GUI_TextMsgRu_HighIrradiance(uint16_t X, uint16_t Y)
{
 801b5e4:	b538      	push	{r3, r4, r5, lr}
 801b5e6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b5e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b5ec:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b5ee:	f003 f8c3 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b5f2:	2063      	movs	r0, #99	; 0x63
 801b5f4:	f003 f8c6 	bl	801e784 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801b5f8:	4846      	ldr	r0, [pc, #280]	; (801b714 <GUI_TextMsgRu_HighIrradiance+0x130>)
 801b5fa:	f003 f8b7 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 801b5fe:	4621      	mov	r1, r4
 801b600:	2291      	movs	r2, #145	; 0x91
 801b602:	4628      	mov	r0, r5
 801b604:	f003 f8c4 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801b608:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b60a:	4843      	ldr	r0, [pc, #268]	; (801b718 <GUI_TextMsgRu_HighIrradiance+0x134>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801b60c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b60e:	f003 f8ad 	bl	801e76c <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801b612:	f105 0010 	add.w	r0, r5, #16
 801b616:	4621      	mov	r1, r4
 801b618:	22be      	movs	r2, #190	; 0xbe
 801b61a:	b280      	uxth	r0, r0
 801b61c:	f003 f8b8 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 801b620:	f105 001c 	add.w	r0, r5, #28
 801b624:	4621      	mov	r1, r4
 801b626:	22bb      	movs	r2, #187	; 0xbb
 801b628:	b280      	uxth	r0, r0
 801b62a:	f003 f8b1 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 801b62e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801b632:	4621      	mov	r1, r4
 801b634:	228c      	movs	r2, #140	; 0x8c
 801b636:	b280      	uxth	r0, r0
 801b638:	f003 f8aa 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 801b63c:	f105 0036 	add.w	r0, r5, #54	; 0x36
 801b640:	4621      	mov	r1, r4
 801b642:	2288      	movs	r2, #136	; 0x88
 801b644:	b280      	uxth	r0, r0
 801b646:	f003 f8a3 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 801b64a:	f105 0043 	add.w	r0, r5, #67	; 0x43
 801b64e:	4621      	mov	r1, r4
 801b650:	22b0      	movs	r2, #176	; 0xb0
 801b652:	b280      	uxth	r0, r0
 801b654:	f003 f89c 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 801b658:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 801b65c:	4621      	mov	r1, r4
 801b65e:	228f      	movs	r2, #143	; 0x8f
 801b660:	b280      	uxth	r0, r0
 801b662:	f003 f895 	bl	801e790 <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'о');
 801b666:	f105 0066 	add.w	r0, r5, #102	; 0x66
 801b66a:	4621      	mov	r1, r4
 801b66c:	22be      	movs	r2, #190	; 0xbe
 801b66e:	b280      	uxth	r0, r0
 801b670:	f003 f88e 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+116, Y+5, 'б');
 801b674:	f105 0074 	add.w	r0, r5, #116	; 0x74
 801b678:	4621      	mov	r1, r4
 801b67a:	22b1      	movs	r2, #177	; 0xb1
 801b67c:	b280      	uxth	r0, r0
 801b67e:	f003 f887 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+127, Y+5, 'л');
 801b682:	f105 007f 	add.w	r0, r5, #127	; 0x7f
 801b686:	4621      	mov	r1, r4
 801b688:	22bb      	movs	r2, #187	; 0xbb
 801b68a:	b280      	uxth	r0, r0
 801b68c:	f003 f880 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+139, Y+5, 'у');
 801b690:	f105 008b 	add.w	r0, r5, #139	; 0x8b
 801b694:	4621      	mov	r1, r4
 801b696:	2283      	movs	r2, #131	; 0x83
 801b698:	b280      	uxth	r0, r0
 801b69a:	f003 f879 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+151, Y+5, 'ч');
 801b69e:	f105 0097 	add.w	r0, r5, #151	; 0x97
 801b6a2:	4621      	mov	r1, r4
 801b6a4:	2287      	movs	r2, #135	; 0x87
 801b6a6:	b280      	uxth	r0, r0
 801b6a8:	f003 f872 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+163, Y+5, 'е');
 801b6ac:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
 801b6b0:	4621      	mov	r1, r4
 801b6b2:	22b5      	movs	r2, #181	; 0xb5
 801b6b4:	b280      	uxth	r0, r0
 801b6b6:	f003 f86b 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+174, Y+5, 'н');
 801b6ba:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 801b6be:	4621      	mov	r1, r4
 801b6c0:	22bd      	movs	r2, #189	; 0xbd
 801b6c2:	b280      	uxth	r0, r0
 801b6c4:	f003 f864 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+186, Y+5, 'н');
 801b6c8:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 801b6cc:	4621      	mov	r1, r4
 801b6ce:	22bd      	movs	r2, #189	; 0xbd
 801b6d0:	b280      	uxth	r0, r0
 801b6d2:	f003 f85d 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+198, Y+5, 'о');
 801b6d6:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 801b6da:	4621      	mov	r1, r4
 801b6dc:	22be      	movs	r2, #190	; 0xbe
 801b6de:	b280      	uxth	r0, r0
 801b6e0:	f003 f856 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+210, Y+5, 'с');
 801b6e4:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 801b6e8:	4621      	mov	r1, r4
 801b6ea:	2281      	movs	r2, #129	; 0x81
 801b6ec:	b280      	uxth	r0, r0
 801b6ee:	f003 f84f 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+219, Y+5, 'т');
 801b6f2:	f105 00db 	add.w	r0, r5, #219	; 0xdb
 801b6f6:	4621      	mov	r1, r4
 801b6f8:	2282      	movs	r2, #130	; 0x82
 801b6fa:	b280      	uxth	r0, r0
 801b6fc:	f003 f848 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 801b700:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
 801b704:	4621      	mov	r1, r4
 801b706:	228c      	movs	r2, #140	; 0x8c
 801b708:	b280      	uxth	r0, r0
}
 801b70a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 801b70e:	f003 b83f 	b.w	801e790 <TFT_DrawCharRus>
 801b712:	bf00      	nop
 801b714:	200001d0 	.word	0x200001d0
 801b718:	200001d8 	.word	0x200001d8

0801b71c <GUI_TextMsgRu_HighRadiance>:

void GUI_TextMsgRu_HighRadiance(uint16_t X, uint16_t Y)
{
 801b71c:	b538      	push	{r3, r4, r5, lr}
 801b71e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b720:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b724:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b726:	f003 f827 	bl	801e778 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b72a:	2063      	movs	r0, #99	; 0x63
 801b72c:	f003 f82a 	bl	801e784 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801b730:	4834      	ldr	r0, [pc, #208]	; (801b804 <GUI_TextMsgRu_HighRadiance+0xe8>)
 801b732:	f003 f81b 	bl	801e76c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 801b736:	4621      	mov	r1, r4
 801b738:	2291      	movs	r2, #145	; 0x91
 801b73a:	4628      	mov	r0, r5
 801b73c:	f003 f828 	bl	801e790 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801b740:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b742:	4831      	ldr	r0, [pc, #196]	; (801b808 <GUI_TextMsgRu_HighRadiance+0xec>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801b744:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b746:	f003 f811 	bl	801e76c <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801b74a:	f105 0010 	add.w	r0, r5, #16
 801b74e:	4621      	mov	r1, r4
 801b750:	22be      	movs	r2, #190	; 0xbe
 801b752:	b280      	uxth	r0, r0
 801b754:	f003 f81c 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 801b758:	f105 001c 	add.w	r0, r5, #28
 801b75c:	4621      	mov	r1, r4
 801b75e:	22bb      	movs	r2, #187	; 0xbb
 801b760:	b280      	uxth	r0, r0
 801b762:	f003 f815 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 801b766:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801b76a:	4621      	mov	r1, r4
 801b76c:	228c      	movs	r2, #140	; 0x8c
 801b76e:	b280      	uxth	r0, r0
 801b770:	f003 f80e 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 801b774:	f105 0036 	add.w	r0, r5, #54	; 0x36
 801b778:	4621      	mov	r1, r4
 801b77a:	2288      	movs	r2, #136	; 0x88
 801b77c:	b280      	uxth	r0, r0
 801b77e:	f003 f807 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 801b782:	f105 0043 	add.w	r0, r5, #67	; 0x43
 801b786:	4621      	mov	r1, r4
 801b788:	22b0      	movs	r2, #176	; 0xb0
 801b78a:	b280      	uxth	r0, r0
 801b78c:	f003 f800 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 801b790:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 801b794:	4621      	mov	r1, r4
 801b796:	228f      	movs	r2, #143	; 0x8f
 801b798:	b280      	uxth	r0, r0
 801b79a:	f002 fff9 	bl	801e790 <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'я');
 801b79e:	f105 0066 	add.w	r0, r5, #102	; 0x66
 801b7a2:	4621      	mov	r1, r4
 801b7a4:	228f      	movs	r2, #143	; 0x8f
 801b7a6:	b280      	uxth	r0, r0
 801b7a8:	f002 fff2 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+114, Y+5, 'р');
 801b7ac:	f105 0072 	add.w	r0, r5, #114	; 0x72
 801b7b0:	4621      	mov	r1, r4
 801b7b2:	2280      	movs	r2, #128	; 0x80
 801b7b4:	b280      	uxth	r0, r0
 801b7b6:	f002 ffeb 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+126, Y+5, 'к');
 801b7ba:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 801b7be:	4621      	mov	r1, r4
 801b7c0:	22ba      	movs	r2, #186	; 0xba
 801b7c2:	b280      	uxth	r0, r0
 801b7c4:	f002 ffe4 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+138, Y+5, 'о');
 801b7c8:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 801b7cc:	4621      	mov	r1, r4
 801b7ce:	22be      	movs	r2, #190	; 0xbe
 801b7d0:	b280      	uxth	r0, r0
 801b7d2:	f002 ffdd 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+150, Y+5, 'с');
 801b7d6:	f105 0096 	add.w	r0, r5, #150	; 0x96
 801b7da:	4621      	mov	r1, r4
 801b7dc:	2281      	movs	r2, #129	; 0x81
 801b7de:	b280      	uxth	r0, r0
 801b7e0:	f002 ffd6 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+161, Y+5, 'т');
 801b7e4:	f105 00a1 	add.w	r0, r5, #161	; 0xa1
 801b7e8:	4621      	mov	r1, r4
 801b7ea:	2282      	movs	r2, #130	; 0x82
 801b7ec:	b280      	uxth	r0, r0
 801b7ee:	f002 ffcf 	bl	801e790 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 801b7f2:	f105 00ac 	add.w	r0, r5, #172	; 0xac
 801b7f6:	4621      	mov	r1, r4
 801b7f8:	228c      	movs	r2, #140	; 0x8c
 801b7fa:	b280      	uxth	r0, r0
 801b7fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 801b800:	f002 bfc6 	b.w	801e790 <TFT_DrawCharRus>
 801b804:	200001d0 	.word	0x200001d0
 801b808:	200001d8 	.word	0x200001d8

0801b80c <Set.part.0>:
void Set(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_SET);
 801b80c:	2201      	movs	r2, #1
 801b80e:	2102      	movs	r1, #2
 801b810:	4801      	ldr	r0, [pc, #4]	; (801b818 <Set.part.0+0xc>)
 801b812:	f7e6 bfd5 	b.w	80027c0 <HAL_GPIO_WritePin>
 801b816:	bf00      	nop
 801b818:	48000400 	.word	0x48000400

0801b81c <Reset.part.1>:
void Reset(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_RESET);
 801b81c:	2200      	movs	r2, #0
 801b81e:	2102      	movs	r1, #2
 801b820:	4801      	ldr	r0, [pc, #4]	; (801b828 <Reset.part.1+0xc>)
 801b822:	f7e6 bfcd 	b.w	80027c0 <HAL_GPIO_WritePin>
 801b826:	bf00      	nop
 801b828:	48000400 	.word	0x48000400

0801b82c <GPIO_QSPI_Init>:
{
 801b82c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		__HAL_RCC_GPIOF_CLK_ENABLE();
 801b830:	4b39      	ldr	r3, [pc, #228]	; (801b918 <GPIO_QSPI_Init+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801b832:	4c3a      	ldr	r4, [pc, #232]	; (801b91c <GPIO_QSPI_Init+0xf0>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 801b834:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b836:	4f3a      	ldr	r7, [pc, #232]	; (801b920 <GPIO_QSPI_Init+0xf4>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 801b838:	f042 0220 	orr.w	r2, r2, #32
 801b83c:	64da      	str	r2, [r3, #76]	; 0x4c
 801b83e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b840:	f002 0220 	and.w	r2, r2, #32
 801b844:	9201      	str	r2, [sp, #4]
 801b846:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b848:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b84a:	f042 0201 	orr.w	r2, r2, #1
 801b84e:	64da      	str	r2, [r3, #76]	; 0x4c
 801b850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b852:	f002 0201 	and.w	r2, r2, #1
 801b856:	9202      	str	r2, [sp, #8]
 801b858:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801b85a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b85c:	f042 0202 	orr.w	r2, r2, #2
 801b860:	64da      	str	r2, [r3, #76]	; 0x4c
 801b862:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b864:	f003 0302 	and.w	r3, r3, #2
 801b868:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b86a:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b86c:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b86e:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801b872:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b874:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b876:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b878:	4621      	mov	r1, r4
 801b87a:	4638      	mov	r0, r7
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b87c:	e884 0048 	stmia.w	r4, {r3, r6}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801b880:	f04f 0904 	mov.w	r9, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b884:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b888:	f7e6 fe24 	bl	80024d4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b88c:	4621      	mov	r1, r4
 801b88e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801b892:	f8c4 9000 	str.w	r9, [r4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b896:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801b898:	60a6      	str	r6, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b89a:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b89e:	f7e6 fe19 	bl	80024d4 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 801b8a2:	4649      	mov	r1, r9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b8a4:	f8df 907c 	ldr.w	r9, [pc, #124]	; 801b924 <GPIO_QSPI_Init+0xf8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 801b8a8:	4632      	mov	r2, r6
 801b8aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b8ae:	f7e6 ff87 	bl	80027c0 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b8b2:	4621      	mov	r1, r4
 801b8b4:	4648      	mov	r0, r9
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 801b8b6:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801b8ba:	f8c4 8000 	str.w	r8, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b8be:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b8c0:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b8c2:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b8c6:	f7e6 fe05 	bl	80024d4 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b8ca:	4621      	mov	r1, r4
 801b8cc:	4638      	mov	r0, r7
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 801b8ce:	f8c4 a000 	str.w	sl, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b8d2:	6066      	str	r6, [r4, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b8d4:	60a5      	str	r5, [r4, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b8d6:	f8c4 800c 	str.w	r8, [r4, #12]
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b8da:	f7e6 fdfb 	bl	80024d4 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 801b8de:	462a      	mov	r2, r5
 801b8e0:	4631      	mov	r1, r6
 801b8e2:	4648      	mov	r0, r9
 801b8e4:	f7e6 ff6c 	bl	80027c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 801b8e8:	462a      	mov	r2, r5
 801b8ea:	4648      	mov	r0, r9
 801b8ec:	2102      	movs	r1, #2
 801b8ee:	f7e6 ff67 	bl	80027c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 801b8f2:	462a      	mov	r2, r5
 801b8f4:	4638      	mov	r0, r7
 801b8f6:	2140      	movs	r1, #64	; 0x40
 801b8f8:	f7e6 ff62 	bl	80027c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 801b8fc:	462a      	mov	r2, r5
 801b8fe:	4638      	mov	r0, r7
 801b900:	2180      	movs	r1, #128	; 0x80
 801b902:	f7e6 ff5d 	bl	80027c0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 801b906:	462a      	mov	r2, r5
 801b908:	4651      	mov	r1, sl
 801b90a:	4638      	mov	r0, r7
 801b90c:	f7e6 ff58 	bl	80027c0 <HAL_GPIO_WritePin>
}
 801b910:	b004      	add	sp, #16
 801b912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b916:	bf00      	nop
 801b918:	40021000 	.word	0x40021000
 801b91c:	200052bc 	.word	0x200052bc
 801b920:	48001400 	.word	0x48001400
 801b924:	48000400 	.word	0x48000400

0801b928 <Set>:
	switch(pin)
 801b928:	3801      	subs	r0, #1
 801b92a:	2805      	cmp	r0, #5
 801b92c:	d81b      	bhi.n	801b966 <Set+0x3e>
 801b92e:	e8df f000 	tbb	[pc, r0]
 801b932:	0503      	.short	0x0503
 801b934:	16110e0a 	.word	0x16110e0a
 801b938:	f7ff bf68 	b.w	801b80c <Set.part.0>
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_SET);
 801b93c:	2201      	movs	r2, #1
 801b93e:	480a      	ldr	r0, [pc, #40]	; (801b968 <Set+0x40>)
 801b940:	4611      	mov	r1, r2
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801b942:	f7e6 bf3d 	b.w	80027c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_SET);
 801b946:	2201      	movs	r2, #1
 801b948:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801b94a:	4808      	ldr	r0, [pc, #32]	; (801b96c <Set+0x44>)
 801b94c:	e7f9      	b.n	801b942 <Set+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_SET);
 801b94e:	2201      	movs	r2, #1
 801b950:	2140      	movs	r1, #64	; 0x40
 801b952:	e7fa      	b.n	801b94a <Set+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 801b954:	2201      	movs	r2, #1
 801b956:	2104      	movs	r1, #4
 801b958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b95c:	e7f1      	b.n	801b942 <Set+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801b95e:	2201      	movs	r2, #1
 801b960:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b964:	e7f1      	b.n	801b94a <Set+0x22>
 801b966:	4770      	bx	lr
 801b968:	48000400 	.word	0x48000400
 801b96c:	48001400 	.word	0x48001400

0801b970 <Reset>:
	switch(pin)
 801b970:	3801      	subs	r0, #1
 801b972:	2805      	cmp	r0, #5
 801b974:	d81b      	bhi.n	801b9ae <Reset+0x3e>
 801b976:	e8df f000 	tbb	[pc, r0]
 801b97a:	0503      	.short	0x0503
 801b97c:	16110e0a 	.word	0x16110e0a
 801b980:	f7ff bf4c 	b.w	801b81c <Reset.part.1>
			break;
		case io1:
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_RESET);
 801b984:	480a      	ldr	r0, [pc, #40]	; (801b9b0 <Reset+0x40>)
 801b986:	2200      	movs	r2, #0
 801b988:	2101      	movs	r1, #1
			break;
		case cs:
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
			break;
		case clk:
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801b98a:	f7e6 bf19 	b.w	80027c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_RESET);
 801b98e:	2200      	movs	r2, #0
 801b990:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801b992:	4808      	ldr	r0, [pc, #32]	; (801b9b4 <Reset+0x44>)
 801b994:	e7f9      	b.n	801b98a <Reset+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_RESET);
 801b996:	2200      	movs	r2, #0
 801b998:	2140      	movs	r1, #64	; 0x40
 801b99a:	e7fa      	b.n	801b992 <Reset+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 801b99c:	2200      	movs	r2, #0
 801b99e:	2104      	movs	r1, #4
 801b9a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b9a4:	e7f1      	b.n	801b98a <Reset+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801b9a6:	2200      	movs	r2, #0
 801b9a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b9ac:	e7f1      	b.n	801b992 <Reset+0x22>
 801b9ae:	4770      	bx	lr
 801b9b0:	48000400 	.word	0x48000400
 801b9b4:	48001400 	.word	0x48001400

0801b9b8 <QSPI_Recieve_Init>:
	}
}

/* */
void QSPI_Recieve_Init(void)
{
 801b9b8:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801b9ba:	4c09      	ldr	r4, [pc, #36]	; (801b9e0 <QSPI_Recieve_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b9bc:	4809      	ldr	r0, [pc, #36]	; (801b9e4 <QSPI_Recieve_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801b9be:	2303      	movs	r3, #3
 801b9c0:	2500      	movs	r5, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b9c2:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801b9c4:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b9c8:	f7e6 fd84 	bl	80024d4 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801b9cc:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801b9ce:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b9d2:	4621      	mov	r1, r4
 801b9d4:	4804      	ldr	r0, [pc, #16]	; (801b9e8 <QSPI_Recieve_Init+0x30>)
}
 801b9d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b9da:	f7e6 bd7b 	b.w	80024d4 <HAL_GPIO_Init>
 801b9de:	bf00      	nop
 801b9e0:	200052bc 	.word	0x200052bc
 801b9e4:	48000400 	.word	0x48000400
 801b9e8:	48001400 	.word	0x48001400

0801b9ec <QSPI_Transmit_Init>:
void QSPI_Transmit_Init(void)
{
 801b9ec:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801b9ee:	4c09      	ldr	r4, [pc, #36]	; (801ba14 <QSPI_Transmit_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b9f0:	4809      	ldr	r0, [pc, #36]	; (801ba18 <QSPI_Transmit_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b9f2:	2303      	movs	r3, #3
 801b9f4:	2501      	movs	r5, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b9f6:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b9f8:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b9fc:	f7e6 fd6a 	bl	80024d4 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801ba00:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801ba02:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801ba06:	4621      	mov	r1, r4
 801ba08:	4804      	ldr	r0, [pc, #16]	; (801ba1c <QSPI_Transmit_Init+0x30>)
}
 801ba0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801ba0e:	f7e6 bd61 	b.w	80024d4 <HAL_GPIO_Init>
 801ba12:	bf00      	nop
 801ba14:	200052bc 	.word	0x200052bc
 801ba18:	48000400 	.word	0x48000400
 801ba1c:	48001400 	.word	0x48001400

0801ba20 <Single_Mode>:
void Single_Mode(void)
{
 801ba20:	b570      	push	{r4, r5, r6, lr}
	/* PB1 (IO0) */
	GPIO_InitStruct.Pin = IO0_PIN;
 801ba22:	4c0d      	ldr	r4, [pc, #52]	; (801ba58 <Single_Mode+0x38>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 801ba24:	4e0d      	ldr	r6, [pc, #52]	; (801ba5c <Single_Mode+0x3c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801ba26:	2501      	movs	r5, #1
 801ba28:	2302      	movs	r3, #2
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 801ba2a:	4621      	mov	r1, r4
 801ba2c:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801ba2e:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 801ba32:	f7e6 fd4f 	bl	80024d4 <HAL_GPIO_Init>
	
	/* PB0 (IO1) */
	GPIO_InitStruct.Pin = IO1_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801ba36:	2300      	movs	r3, #0
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 801ba38:	4621      	mov	r1, r4
 801ba3a:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801ba3c:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pin = IO1_PIN;
 801ba3e:	6025      	str	r5, [r4, #0]
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 801ba40:	f7e6 fd48 	bl	80024d4 <HAL_GPIO_Init>
	
	/* PF7 (IO2) */
	GPIO_InitStruct.Pin = IO2_PIN;
 801ba44:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801ba46:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 801ba4a:	4621      	mov	r1, r4
 801ba4c:	4804      	ldr	r0, [pc, #16]	; (801ba60 <Single_Mode+0x40>)
}
 801ba4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 801ba52:	f7e6 bd3f 	b.w	80024d4 <HAL_GPIO_Init>
 801ba56:	bf00      	nop
 801ba58:	200052bc 	.word	0x200052bc
 801ba5c:	48000400 	.word	0x48000400
 801ba60:	48001400 	.word	0x48001400

0801ba64 <SPI_Byte_T>:

/* Single mode SPI functions */

/* Byte transmit function */
void SPI_Byte_T(uint8_t byte)
{
 801ba64:	b538      	push	{r3, r4, r5, lr}
 801ba66:	4605      	mov	r5, r0
 801ba68:	2408      	movs	r4, #8
	for(uint8_t i=0; i<8; i++)
	{
		if(0x80 & byte)
 801ba6a:	062b      	lsls	r3, r5, #24
 801ba6c:	d501      	bpl.n	801ba72 <SPI_Byte_T+0xe>
 801ba6e:	f7ff fecd 	bl	801b80c <Set.part.0>
		{
			Set(io0);
		}
		Set(clk);
 801ba72:	2006      	movs	r0, #6
 801ba74:	f7ff ff58 	bl	801b928 <Set>
 801ba78:	3c01      	subs	r4, #1
 801ba7a:	f7ff fecf 	bl	801b81c <Reset.part.1>
		Reset(io0);	
		byte=(byte<<1);
		Reset(clk);	
 801ba7e:	2006      	movs	r0, #6
		byte=(byte<<1);
 801ba80:	006d      	lsls	r5, r5, #1
		Reset(clk);	
 801ba82:	f7ff ff75 	bl	801b970 <Reset>
	for(uint8_t i=0; i<8; i++)
 801ba86:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		byte=(byte<<1);
 801ba8a:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<8; i++)
 801ba8c:	d1ed      	bne.n	801ba6a <SPI_Byte_T+0x6>
	}	
}
 801ba8e:	bd38      	pop	{r3, r4, r5, pc}

0801ba90 <SPI_Byte_R>:
	
	SPI_Check_Busy();
}
/* Byte receive function */
uint8_t SPI_Byte_R(void)
{
 801ba90:	b570      	push	{r4, r5, r6, lr}
	uint8_t byte=0;
	for(uint8_t i=0; i<8; i++)
 801ba92:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 801ba94:	4e0d      	ldr	r6, [pc, #52]	; (801bacc <SPI_Byte_R+0x3c>)
	uint8_t byte=0;
 801ba96:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 801ba98:	2101      	movs	r1, #1
 801ba9a:	4630      	mov	r0, r6
 801ba9c:	f7e6 fe8a 	bl	80027b4 <HAL_GPIO_ReadPin>
 801baa0:	b108      	cbz	r0, 801baa6 <SPI_Byte_R+0x16>
 801baa2:	f044 0401 	orr.w	r4, r4, #1
		Set(clk);
 801baa6:	2006      	movs	r0, #6
 801baa8:	f7ff ff3e 	bl	801b928 <Set>
		if (i<7) byte=(byte<<1);
 801baac:	2d07      	cmp	r5, #7
	for(uint8_t i=0; i<8; i++)
 801baae:	f105 0501 	add.w	r5, r5, #1
		if (i<7) byte=(byte<<1);
 801bab2:	bf18      	it	ne
 801bab4:	0064      	lslne	r4, r4, #1
		Reset(clk);
 801bab6:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<8; i++)
 801baba:	b2ed      	uxtb	r5, r5
		if (i<7) byte=(byte<<1);
 801babc:	bf18      	it	ne
 801babe:	b2e4      	uxtbne	r4, r4
		Reset(clk);
 801bac0:	f7ff ff56 	bl	801b970 <Reset>
	for(uint8_t i=0; i<8; i++)
 801bac4:	2d08      	cmp	r5, #8
 801bac6:	d1e7      	bne.n	801ba98 <SPI_Byte_R+0x8>
	}
	return byte;
}
 801bac8:	4620      	mov	r0, r4
 801baca:	bd70      	pop	{r4, r5, r6, pc}
 801bacc:	48000400 	.word	0x48000400

0801bad0 <SPI_Read_SR.part.2>:
	SPI_Address(address);
	Set(cs);
	SPI_Check_Busy();
}
/* Read status register */
uint8_t SPI_Read_SR(uint8_t sr)
 801bad0:	b510      	push	{r4, lr}
	uint8_t reg;
	
	switch(sr)
	{
		case 1:
			Reset(cs);
 801bad2:	2005      	movs	r0, #5
 801bad4:	f7ff ff4c 	bl	801b970 <Reset>
	SPI_Byte_T(cmd);
 801bad8:	2005      	movs	r0, #5
 801bada:	f7ff ffc3 	bl	801ba64 <SPI_Byte_T>
			SPI_Instruction(0x05);
			reg=SPI_Byte_R();
 801bade:	f7ff ffd7 	bl	801ba90 <SPI_Byte_R>
 801bae2:	4604      	mov	r4, r0
			Set(cs);
 801bae4:	2005      	movs	r0, #5
 801bae6:	f7ff ff1f 	bl	801b928 <Set>

	}
	return reg;

	SPI_Check_Busy();
}
 801baea:	4620      	mov	r0, r4
 801baec:	bd10      	pop	{r4, pc}

0801baee <SPI_Check_Busy>:
{
 801baee:	b508      	push	{r3, lr}
 801baf0:	f7ff ffee 	bl	801bad0 <SPI_Read_SR.part.2>
	while( SPI_Read_SR(1)&0x01 )
 801baf4:	07c3      	lsls	r3, r0, #31
 801baf6:	d400      	bmi.n	801bafa <SPI_Check_Busy+0xc>
}
 801baf8:	bd08      	pop	{r3, pc}
		HAL_Delay(0);
 801bafa:	2000      	movs	r0, #0
 801bafc:	f7e5 fa96 	bl	800102c <HAL_Delay>
 801bb00:	e7f6      	b.n	801baf0 <SPI_Check_Busy+0x2>
	...

0801bb04 <QSPI_16_R>:
	}
	return byte;
}
/* Recieve 16 bit in quad mode  */
uint16_t QSPI_16_R(void)
{
 801bb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t byte=0;
	for(uint8_t i=0; i<4; i++)
 801bb06:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 801bb08:	4e18      	ldr	r6, [pc, #96]	; (801bb6c <QSPI_16_R+0x68>)
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 801bb0a:	4f19      	ldr	r7, [pc, #100]	; (801bb70 <QSPI_16_R+0x6c>)
	uint16_t byte=0;
 801bb0c:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 801bb0e:	2102      	movs	r1, #2
 801bb10:	4630      	mov	r0, r6
 801bb12:	f7e6 fe4f 	bl	80027b4 <HAL_GPIO_ReadPin>
 801bb16:	b108      	cbz	r0, 801bb1c <QSPI_16_R+0x18>
 801bb18:	f044 0401 	orr.w	r4, r4, #1
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
 801bb1c:	2101      	movs	r1, #1
 801bb1e:	4630      	mov	r0, r6
 801bb20:	f7e6 fe48 	bl	80027b4 <HAL_GPIO_ReadPin>
 801bb24:	b108      	cbz	r0, 801bb2a <QSPI_16_R+0x26>
 801bb26:	f044 0402 	orr.w	r4, r4, #2
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 801bb2a:	2180      	movs	r1, #128	; 0x80
 801bb2c:	4638      	mov	r0, r7
 801bb2e:	f7e6 fe41 	bl	80027b4 <HAL_GPIO_ReadPin>
 801bb32:	b108      	cbz	r0, 801bb38 <QSPI_16_R+0x34>
 801bb34:	f044 0404 	orr.w	r4, r4, #4
		if (HAL_GPIO_ReadPin(IO3_GPIO_PORT, IO3_PIN)!=0) byte|=0x08;
 801bb38:	2140      	movs	r1, #64	; 0x40
 801bb3a:	4638      	mov	r0, r7
 801bb3c:	f7e6 fe3a 	bl	80027b4 <HAL_GPIO_ReadPin>
 801bb40:	b108      	cbz	r0, 801bb46 <QSPI_16_R+0x42>
 801bb42:	f044 0408 	orr.w	r4, r4, #8
		Set(clk);
 801bb46:	2006      	movs	r0, #6
 801bb48:	f7ff feee 	bl	801b928 <Set>
		if (i<3) byte=(byte<<4);
 801bb4c:	2d03      	cmp	r5, #3
	for(uint8_t i=0; i<4; i++)
 801bb4e:	f105 0501 	add.w	r5, r5, #1
		if (i<3) byte=(byte<<4);
 801bb52:	bf18      	it	ne
 801bb54:	0124      	lslne	r4, r4, #4
		Reset(clk);
 801bb56:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<4; i++)
 801bb5a:	b2ed      	uxtb	r5, r5
		if (i<3) byte=(byte<<4);
 801bb5c:	bf18      	it	ne
 801bb5e:	b2a4      	uxthne	r4, r4
		Reset(clk);
 801bb60:	f7ff ff06 	bl	801b970 <Reset>
	for(uint8_t i=0; i<4; i++)
 801bb64:	2d04      	cmp	r5, #4
 801bb66:	d1d2      	bne.n	801bb0e <QSPI_16_R+0xa>
	}
	return byte;
}
 801bb68:	4620      	mov	r0, r4
 801bb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb6c:	48000400 	.word	0x48000400
 801bb70:	48001400 	.word	0x48001400

0801bb74 <QSPI_Byte_T>:
	}
	return byte;
}
/* Send byte in quad mode */
void QSPI_Byte_T(uint8_t byte)
{
 801bb74:	b538      	push	{r3, r4, r5, lr}
 801bb76:	4604      	mov	r4, r0
 801bb78:	2502      	movs	r5, #2
	for(uint8_t i=0; i<2; i++)
	{
		if(0x80 & byte)	Set(io3);
 801bb7a:	0620      	lsls	r0, r4, #24
 801bb7c:	d502      	bpl.n	801bb84 <QSPI_Byte_T+0x10>
 801bb7e:	2004      	movs	r0, #4
 801bb80:	f7ff fed2 	bl	801b928 <Set>
		if(0x40 & byte)	Set(io2);
 801bb84:	0661      	lsls	r1, r4, #25
 801bb86:	d502      	bpl.n	801bb8e <QSPI_Byte_T+0x1a>
 801bb88:	2003      	movs	r0, #3
 801bb8a:	f7ff fecd 	bl	801b928 <Set>
		if(0x20 & byte)	Set(io1);
 801bb8e:	06a2      	lsls	r2, r4, #26
 801bb90:	d502      	bpl.n	801bb98 <QSPI_Byte_T+0x24>
 801bb92:	2002      	movs	r0, #2
 801bb94:	f7ff fec8 	bl	801b928 <Set>
		if(0x10 & byte)	Set(io0);
 801bb98:	06e3      	lsls	r3, r4, #27
 801bb9a:	d501      	bpl.n	801bba0 <QSPI_Byte_T+0x2c>
 801bb9c:	f7ff fe36 	bl	801b80c <Set.part.0>

		Set(clk);
 801bba0:	2006      	movs	r0, #6
 801bba2:	f7ff fec1 	bl	801b928 <Set>
		Reset(io3);	Reset(io2);	Reset(io1);	Reset(io0);	
 801bba6:	2004      	movs	r0, #4
 801bba8:	f7ff fee2 	bl	801b970 <Reset>
 801bbac:	2003      	movs	r0, #3
 801bbae:	f7ff fedf 	bl	801b970 <Reset>
 801bbb2:	2002      	movs	r0, #2
 801bbb4:	f7ff fedc 	bl	801b970 <Reset>
 801bbb8:	3d01      	subs	r5, #1
 801bbba:	f7ff fe2f 	bl	801b81c <Reset.part.1>
		byte=(byte<<4);
		Reset(clk);	
 801bbbe:	2006      	movs	r0, #6
		byte=(byte<<4);
 801bbc0:	0124      	lsls	r4, r4, #4
		Reset(clk);	
 801bbc2:	f7ff fed5 	bl	801b970 <Reset>
	for(uint8_t i=0; i<2; i++)
 801bbc6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte=(byte<<4);
 801bbca:	b2e4      	uxtb	r4, r4
	for(uint8_t i=0; i<2; i++)
 801bbcc:	d1d5      	bne.n	801bb7a <QSPI_Byte_T+0x6>
	}	
}
 801bbce:	bd38      	pop	{r3, r4, r5, pc}

0801bbd0 <QSPI_Dummy>:
		Reset(clk);	
	}	
}
/* Dummy cycles in Quad Mode */
void QSPI_Dummy(uint8_t n) 	// n - number of dummy cycles
{
 801bbd0:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i=0; i<(n*4); i++)
	{
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 801bbd2:	4e07      	ldr	r6, [pc, #28]	; (801bbf0 <QSPI_Dummy+0x20>)
	for(uint8_t i=0; i<(n*4); i++)
 801bbd4:	0085      	lsls	r5, r0, #2
 801bbd6:	2400      	movs	r4, #0
 801bbd8:	b2e3      	uxtb	r3, r4
 801bbda:	42ab      	cmp	r3, r5
 801bbdc:	f104 0401 	add.w	r4, r4, #1
 801bbe0:	db00      	blt.n	801bbe4 <QSPI_Dummy+0x14>
	}
}
 801bbe2:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 801bbe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801bbe8:	4630      	mov	r0, r6
 801bbea:	f7e6 fdee 	bl	80027ca <HAL_GPIO_TogglePin>
 801bbee:	e7f3      	b.n	801bbd8 <QSPI_Dummy+0x8>
 801bbf0:	48001400 	.word	0x48001400

0801bbf4 <QSPI_Address>:
		arr[e]=QSPI_Byte_R();
	}
}
/* Address send in quad mode  */
void QSPI_Address(uint32_t addr)	// hasn't worked yet
{
 801bbf4:	b510      	push	{r4, lr}
 801bbf6:	4604      	mov	r4, r0
	uint8_t byte=0;
	
	for(uint8_t e=0; e<3; e++)
	{
		byte=(addr >> (8 * (2-e)));
		QSPI_Byte_T(byte);
 801bbf8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801bbfc:	f7ff ffba 	bl	801bb74 <QSPI_Byte_T>
 801bc00:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801bc04:	f7ff ffb6 	bl	801bb74 <QSPI_Byte_T>
 801bc08:	b2e0      	uxtb	r0, r4
	}
}
 801bc0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		QSPI_Byte_T(byte);
 801bc0e:	f7ff bfb1 	b.w	801bb74 <QSPI_Byte_T>

0801bc12 <QSPI_Recieve_IO_16>:
	SPI_Check_Busy();
}
/* Ψ祠𳭪򨨠嬿 16 蠳2 ⩲ */
/* Read 16 bit array from memory in quad mode */
void QSPI_Recieve_IO_16(uint16_t* arr, uint32_t address, uint32_t size)		// be aware that this function reconfigurates GPIO
{
 801bc12:	b570      	push	{r4, r5, r6, lr}
 801bc14:	460c      	mov	r4, r1
 801bc16:	4615      	mov	r5, r2
 801bc18:	4606      	mov	r6, r0
	QSPI_Transmit_Init();	
 801bc1a:	f7ff fee7 	bl	801b9ec <QSPI_Transmit_Init>
	Reset(cs);
 801bc1e:	2005      	movs	r0, #5
 801bc20:	f7ff fea6 	bl	801b970 <Reset>
	SPI_Byte_T(cmd);
 801bc24:	20eb      	movs	r0, #235	; 0xeb
 801bc26:	f7ff ff1d 	bl	801ba64 <SPI_Byte_T>
	SPI_Instruction(fastread_quad_io);
	QSPI_Address(address);
 801bc2a:	4620      	mov	r0, r4
 801bc2c:	f7ff ffe2 	bl	801bbf4 <QSPI_Address>
	QSPI_Dummy(3);	
 801bc30:	2003      	movs	r0, #3
 801bc32:	f7ff ffcd 	bl	801bbd0 <QSPI_Dummy>
	
	QSPI_Recieve_Init();
 801bc36:	f7ff febf 	bl	801b9b8 <QSPI_Recieve_Init>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 801bc3a:	2400      	movs	r4, #0
 801bc3c:	42ac      	cmp	r4, r5
 801bc3e:	d108      	bne.n	801bc52 <QSPI_Recieve_IO_16+0x40>
	Set(cs);
 801bc40:	2005      	movs	r0, #5
 801bc42:	f7ff fe71 	bl	801b928 <Set>

	Single_Mode();
 801bc46:	f7ff feeb 	bl	801ba20 <Single_Mode>
	SPI_Check_Busy();
}
 801bc4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SPI_Check_Busy();
 801bc4e:	f7ff bf4e 	b.w	801baee <SPI_Check_Busy>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 801bc52:	f7ff ff57 	bl	801bb04 <QSPI_16_R>
 801bc56:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 801bc5a:	3401      	adds	r4, #1
 801bc5c:	e7ee      	b.n	801bc3c <QSPI_Recieve_IO_16+0x2a>
	...

0801bc60 <Image_load>:
void Image_load(uint32_t address, uint32_t size){
 801bc60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc64:	f5ad 6d2f 	sub.w	sp, sp, #2800	; 0xaf0
 801bc68:	4680      	mov	r8, r0
 801bc6a:	460f      	mov	r7, r1
	uint16_t buff[1400] = {0};
 801bc6c:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 801bc70:	2100      	movs	r1, #0
 801bc72:	4668      	mov	r0, sp
 801bc74:	f006 f88b 	bl	8021d8e <memset>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 801bc78:	f8df 9040 	ldr.w	r9, [pc, #64]	; 801bcbc <Image_load+0x5c>
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 801bc7c:	2400      	movs	r4, #0
 801bc7e:	f44f 66af 	mov.w	r6, #1400	; 0x578
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 801bc82:	f44f 6a30 	mov.w	sl, #2816	; 0xb00
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 801bc86:	fb06 f304 	mul.w	r3, r6, r4
 801bc8a:	429f      	cmp	r7, r3
 801bc8c:	d803      	bhi.n	801bc96 <Image_load+0x36>
}
 801bc8e:	f50d 6d2f 	add.w	sp, sp, #2800	; 0xaf0
 801bc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 801bc96:	b2a5      	uxth	r5, r4
 801bc98:	f44f 62af 	mov.w	r2, #1400	; 0x578
 801bc9c:	fb0a 8105 	mla	r1, sl, r5, r8
 801bca0:	4668      	mov	r0, sp
 801bca2:	f7ff ffb6 	bl	801bc12 <QSPI_Recieve_IO_16>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 801bca6:	fb06 f005 	mul.w	r0, r6, r5
 801bcaa:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 801bcae:	4669      	mov	r1, sp
 801bcb0:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 801bcb4:	f006 f860 	bl	8021d78 <memcpy>
 801bcb8:	3401      	adds	r4, #1
 801bcba:	e7e4      	b.n	801bc86 <Image_load+0x26>
 801bcbc:	200511f6 	.word	0x200511f6

0801bcc0 <Rabs_calc_Factor2_Settings_change>:
#include "Rabs_math.h"

float Rabs_calc_Factor2_Settings_change(float Kt, float P)
{
	return Kt * P;
}
 801bcc0:	ee20 0a20 	vmul.f32	s0, s0, s1
 801bcc4:	4770      	bx	lr
	...

0801bcc8 <Rabs_calc_Factor1>:

float Rabs_calc_Factor1(uint16_t Rdark, float Lt, uint16_t R_data[])
{
 801bcc8:	b538      	push	{r3, r4, r5, lr}
	uint32_t sum = 0;
	float Kl = 0;
	
	Kl = Lt/100.00;
 801bcca:	eddf 7a17 	vldr	s15, [pc, #92]	; 801bd28 <Rabs_calc_Factor1+0x60>
{
 801bcce:	ed2d 8b02 	vpush	{d8}
	Kl = Lt/100.00;
 801bcd2:	ee80 8a27 	vdiv.f32	s16, s0, s15
 801bcd6:	1e8a      	subs	r2, r1, #2
	uint32_t sum = 0;
 801bcd8:	2300      	movs	r3, #0
 801bcda:	f201 71fe 	addw	r1, r1, #2046	; 0x7fe
	for (uint16_t i = 0; i < 1024; i++)
	{
		sum = sum + (R_data[i] - Rdark);
 801bcde:	f832 4f02 	ldrh.w	r4, [r2, #2]!
 801bce2:	1a24      	subs	r4, r4, r0
	for (uint16_t i = 0; i < 1024; i++)
 801bce4:	4291      	cmp	r1, r2
		sum = sum + (R_data[i] - Rdark);
 801bce6:	4423      	add	r3, r4
	for (uint16_t i = 0; i < 1024; i++)
 801bce8:	d1f9      	bne.n	801bcde <Rabs_calc_Factor1+0x16>
	}
	return Kl*(((float)sum)/1024.00);
 801bcea:	ee07 3a90 	vmov	s15, r3
 801bcee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bcf2:	ee17 0a90 	vmov	r0, s15
 801bcf6:	f7e4 fc3f 	bl	8000578 <__aeabi_f2d>
 801bcfa:	2200      	movs	r2, #0
 801bcfc:	4b0b      	ldr	r3, [pc, #44]	; (801bd2c <Rabs_calc_Factor1+0x64>)
 801bcfe:	f7e4 fc8f 	bl	8000620 <__aeabi_dmul>
 801bd02:	4604      	mov	r4, r0
 801bd04:	ee18 0a10 	vmov	r0, s16
 801bd08:	460d      	mov	r5, r1
 801bd0a:	f7e4 fc35 	bl	8000578 <__aeabi_f2d>
 801bd0e:	4602      	mov	r2, r0
 801bd10:	460b      	mov	r3, r1
 801bd12:	4620      	mov	r0, r4
 801bd14:	4629      	mov	r1, r5
 801bd16:	f7e4 fc83 	bl	8000620 <__aeabi_dmul>
 801bd1a:	f7e4 ff79 	bl	8000c10 <__aeabi_d2f>
}
 801bd1e:	ecbd 8b02 	vpop	{d8}
 801bd22:	ee00 0a10 	vmov	s0, r0
 801bd26:	bd38      	pop	{r3, r4, r5, pc}
 801bd28:	42c80000 	.word	0x42c80000
 801bd2c:	3f500000 	.word	0x3f500000

0801bd30 <Rabs_calc_main>:
//		
//		r--;
//	}
//}
void Rabs_calc_main(uint16_t R_data[], uint16_t Rdark, float Factor1, float Factor2, float Sn[], float Rabs[])
{	
 801bd30:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd32:	3802      	subs	r0, #2
 801bd34:	f640 75fc 	movw	r5, #4092	; 0xffc
	
	for (uint16_t i = 0; i < 1024; i++)
	{
		if(R_data[i] - Rdark <= Factor1)
		{
			Rabs[1023-i] = 0;
 801bd38:	2700      	movs	r7, #0
		if(R_data[i] - Rdark <= Factor1)
 801bd3a:	f830 4f02 	ldrh.w	r4, [r0, #2]!
 801bd3e:	1a64      	subs	r4, r4, r1
 801bd40:	ee07 4a90 	vmov	s15, r4
 801bd44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd48:	195e      	adds	r6, r3, r5
 801bd4a:	eef4 7ac0 	vcmpe.f32	s15, s0
 801bd4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		} else
		{
			Rabs[1023-i] = (R_data[i] - Rdark)*Factor2*(Sn[r]);
 801bd52:	bf83      	ittte	hi
 801bd54:	1954      	addhi	r4, r2, r5
 801bd56:	ee67 7aa0 	vmulhi.f32	s15, s15, s1
 801bd5a:	ed94 7a00 	vldrhi	s14, [r4]
			Rabs[1023-i] = 0;
 801bd5e:	6037      	strls	r7, [r6, #0]
			Rabs[1023-i] = (R_data[i] - Rdark)*Factor2*(Sn[r]);
 801bd60:	bf88      	it	hi
 801bd62:	ee67 7a27 	vmulhi.f32	s15, s14, s15
 801bd66:	f1a5 0504 	sub.w	r5, r5, #4
 801bd6a:	bf88      	it	hi
 801bd6c:	edc6 7a00 	vstrhi	s15, [r6]
	for (uint16_t i = 0; i < 1024; i++)
 801bd70:	1d2c      	adds	r4, r5, #4
 801bd72:	d1e2      	bne.n	801bd3a <Rabs_calc_main+0xa>
//			Rabs[1023-i] = 0;
//		} 
		
		r--;
	}
}
 801bd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801bd78 <Rabs_find_MAX>:
	return Factor3*Factor2;
}

float Rabs_find_MAX(float Rabs[], uint8_t direction)
{	
	uint8_t    step = (direction == 0x00)? 4 :3;
 801bd78:	2900      	cmp	r1, #0

	float max = 0;
 801bd7a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801bdac <Rabs_find_MAX+0x34>

	for (uint16_t i = 1023; i >= step; i-=step)
 801bd7e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801bd82:	bf0c      	ite	eq
 801bd84:	2204      	moveq	r2, #4
 801bd86:	2203      	movne	r2, #3
 801bd88:	4293      	cmp	r3, r2
 801bd8a:	d200      	bcs.n	801bd8e <Rabs_find_MAX+0x16>
	{
		max = Rabs[i] > max ? Rabs[i] : max;
	}
	return max;
}
 801bd8c:	4770      	bx	lr
		max = Rabs[i] > max ? Rabs[i] : max;
 801bd8e:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801bd92:	edd1 7a00 	vldr	s15, [r1]
 801bd96:	eeb4 0a67 	vcmp.f32	s0, s15
 801bd9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd9e:	eba3 0302 	sub.w	r3, r3, r2
 801bda2:	bf48      	it	mi
 801bda4:	eeb0 0a67 	vmovmi.f32	s0, s15
 801bda8:	b29b      	uxth	r3, r3
 801bdaa:	e7ed      	b.n	801bd88 <Rabs_find_MAX+0x10>
 801bdac:	00000000 	.word	0x00000000

0801bdb0 <Rabs_find_MAX_all>:

float Rabs_find_MAX_all(float Rabs[])
{	
	float max = 0;
 801bdb0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 801bdd0 <Rabs_find_MAX_all+0x20>
 801bdb4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000

	for (uint16_t i = 0; i < 1024; i++)
	{
		max = Rabs[i] > max ? Rabs[i] : max;
 801bdb8:	ecf0 7a01 	vldmia	r0!, {s15}
 801bdbc:	eef4 7a40 	vcmp.f32	s15, s0
 801bdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdc4:	bfc8      	it	gt
 801bdc6:	eeb0 0a67 	vmovgt.f32	s0, s15
	for (uint16_t i = 0; i < 1024; i++)
 801bdca:	4298      	cmp	r0, r3
 801bdcc:	d1f4      	bne.n	801bdb8 <Rabs_find_MAX_all+0x8>
	}
	return max;
 801bdce:	4770      	bx	lr
 801bdd0:	00000000 	.word	0x00000000

0801bdd4 <WriteSDFLASH_t>:
char buffer_sd[11];

FLASH_EraseInitTypeDef EraseInitStruct3;

void WriteSDFLASH_t(uint64_t filenum)
{
 801bdd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bdd8:	4c52      	ldr	r4, [pc, #328]	; (801bf24 <WriteSDFLASH_t+0x150>)
uint32_t PAGEError = 0;
 801bdda:	f10d 0808 	add.w	r8, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bdde:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 801bde2:	f04f 0900 	mov.w	r9, #0
 801bde6:	f848 9d04 	str.w	r9, [r8, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bdea:	6125      	str	r5, [r4, #16]
{
 801bdec:	460f      	mov	r7, r1
 801bdee:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 801bdf0:	f7e6 f9e2 	bl	80021b8 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 801bdf4:	f7e6 f9e0 	bl	80021b8 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bdf8:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 801bdfa:	2064      	movs	r0, #100	; 0x64
 801bdfc:	f7e5 f916 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801be00:	4849      	ldr	r0, [pc, #292]	; (801bf28 <WriteSDFLASH_t+0x154>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 801be02:	2302      	movs	r3, #2
 801be04:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)43;
 801be06:	232b      	movs	r3, #43	; 0x2b
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801be08:	4641      	mov	r1, r8
		EraseInitStruct3.Page = (uint32_t)43;
 801be0a:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 801be0c:	2301      	movs	r3, #1
 801be0e:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801be10:	f8c0 9000 	str.w	r9, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801be14:	f7e6 faea 	bl	80023ec <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 801be18:	2032      	movs	r0, #50	; 0x32
 801be1a:	f7e5 f907 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be1e:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 801be20:	f7e6 f9dc 	bl	80021dc <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 801be24:	f7e6 f9c8 	bl	80021b8 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be28:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)FILENUMBER, filenum);
 801be2a:	4d40      	ldr	r5, [pc, #256]	; (801bf2c <WriteSDFLASH_t+0x158>)
 801be2c:	4632      	mov	r2, r6
 801be2e:	463b      	mov	r3, r7
 801be30:	4629      	mov	r1, r5
 801be32:	2000      	movs	r0, #0
 801be34:	f7e6 fa1a 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801be38:	2800      	cmp	r0, #0
 801be3a:	d1f7      	bne.n	801be2c <WriteSDFLASH_t+0x58>
					}

				flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801be40:	6123      	str	r3, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MODEEL, Mode_EL);
 801be42:	4d3b      	ldr	r5, [pc, #236]	; (801bf30 <WriteSDFLASH_t+0x15c>)
 801be44:	4c3b      	ldr	r4, [pc, #236]	; (801bf34 <WriteSDFLASH_t+0x160>)
 801be46:	782a      	ldrb	r2, [r5, #0]
 801be48:	2300      	movs	r3, #0
 801be4a:	4621      	mov	r1, r4
 801be4c:	2000      	movs	r0, #0
 801be4e:	f7e6 fa0d 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801be52:	2800      	cmp	r0, #0
 801be54:	d1f7      	bne.n	801be46 <WriteSDFLASH_t+0x72>
					}
						
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be56:	4b33      	ldr	r3, [pc, #204]	; (801bf24 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 801be58:	4d37      	ldr	r5, [pc, #220]	; (801bf38 <WriteSDFLASH_t+0x164>)
 801be5a:	4c38      	ldr	r4, [pc, #224]	; (801bf3c <WriteSDFLASH_t+0x168>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801be60:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 801be62:	882a      	ldrh	r2, [r5, #0]
 801be64:	2300      	movs	r3, #0
 801be66:	4621      	mov	r1, r4
 801be68:	2000      	movs	r0, #0
 801be6a:	f7e6 f9ff 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801be6e:	2800      	cmp	r0, #0
 801be70:	d1f7      	bne.n	801be62 <WriteSDFLASH_t+0x8e>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be72:	4b2c      	ldr	r3, [pc, #176]	; (801bf24 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 801be74:	4d32      	ldr	r5, [pc, #200]	; (801bf40 <WriteSDFLASH_t+0x16c>)
 801be76:	4c33      	ldr	r4, [pc, #204]	; (801bf44 <WriteSDFLASH_t+0x170>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801be7c:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 801be7e:	782a      	ldrb	r2, [r5, #0]
 801be80:	2300      	movs	r3, #0
 801be82:	4621      	mov	r1, r4
 801be84:	2000      	movs	r0, #0
 801be86:	f7e6 f9f1 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801be8a:	2800      	cmp	r0, #0
 801be8c:	d1f7      	bne.n	801be7e <WriteSDFLASH_t+0xaa>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be8e:	4b25      	ldr	r3, [pc, #148]	; (801bf24 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 801be90:	4d2d      	ldr	r5, [pc, #180]	; (801bf48 <WriteSDFLASH_t+0x174>)
 801be92:	4c2e      	ldr	r4, [pc, #184]	; (801bf4c <WriteSDFLASH_t+0x178>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801be98:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 801be9a:	782a      	ldrb	r2, [r5, #0]
 801be9c:	2300      	movs	r3, #0
 801be9e:	4621      	mov	r1, r4
 801bea0:	2000      	movs	r0, #0
 801bea2:	f7e6 f9e3 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801bea6:	2800      	cmp	r0, #0
 801bea8:	d1f7      	bne.n	801be9a <WriteSDFLASH_t+0xc6>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801beaa:	4b1e      	ldr	r3, [pc, #120]	; (801bf24 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 801beac:	4d28      	ldr	r5, [pc, #160]	; (801bf50 <WriteSDFLASH_t+0x17c>)
 801beae:	4c29      	ldr	r4, [pc, #164]	; (801bf54 <WriteSDFLASH_t+0x180>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801beb0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801beb4:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 801beb6:	782a      	ldrb	r2, [r5, #0]
 801beb8:	2300      	movs	r3, #0
 801beba:	4621      	mov	r1, r4
 801bebc:	2000      	movs	r0, #0
 801bebe:	f7e6 f9d5 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801bec2:	2800      	cmp	r0, #0
 801bec4:	d1f7      	bne.n	801beb6 <WriteSDFLASH_t+0xe2>
						}
						flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bec6:	4b17      	ldr	r3, [pc, #92]	; (801bf24 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 801bec8:	4d23      	ldr	r5, [pc, #140]	; (801bf58 <WriteSDFLASH_t+0x184>)
 801beca:	4c24      	ldr	r4, [pc, #144]	; (801bf5c <WriteSDFLASH_t+0x188>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801becc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801bed0:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 801bed2:	782a      	ldrb	r2, [r5, #0]
 801bed4:	2300      	movs	r3, #0
 801bed6:	4621      	mov	r1, r4
 801bed8:	2000      	movs	r0, #0
 801beda:	f7e6 f9c7 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801bede:	2800      	cmp	r0, #0
 801bee0:	d1f7      	bne.n	801bed2 <WriteSDFLASH_t+0xfe>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bee2:	4b10      	ldr	r3, [pc, #64]	; (801bf24 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 801bee4:	4d1e      	ldr	r5, [pc, #120]	; (801bf60 <WriteSDFLASH_t+0x18c>)
 801bee6:	4c1f      	ldr	r4, [pc, #124]	; (801bf64 <WriteSDFLASH_t+0x190>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bee8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801beec:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 801beee:	782a      	ldrb	r2, [r5, #0]
 801bef0:	2300      	movs	r3, #0
 801bef2:	4621      	mov	r1, r4
 801bef4:	2000      	movs	r0, #0
 801bef6:	f7e6 f9b9 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801befa:	2800      	cmp	r0, #0
 801befc:	d1f7      	bne.n	801beee <WriteSDFLASH_t+0x11a>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801befe:	4b09      	ldr	r3, [pc, #36]	; (801bf24 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 801bf00:	4d19      	ldr	r5, [pc, #100]	; (801bf68 <WriteSDFLASH_t+0x194>)
 801bf02:	4c1a      	ldr	r4, [pc, #104]	; (801bf6c <WriteSDFLASH_t+0x198>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bf04:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801bf08:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 801bf0a:	782a      	ldrb	r2, [r5, #0]
 801bf0c:	2300      	movs	r3, #0
 801bf0e:	4621      	mov	r1, r4
 801bf10:	2000      	movs	r0, #0
 801bf12:	f7e6 f9ab 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801bf16:	2800      	cmp	r0, #0
 801bf18:	d1f7      	bne.n	801bf0a <WriteSDFLASH_t+0x136>
					}
						HAL_FLASH_Lock();
 801bf1a:	f7e6 f95f 	bl	80021dc <HAL_FLASH_Lock>
}
 801bf1e:	b003      	add	sp, #12
 801bf20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf24:	40022000 	.word	0x40022000
 801bf28:	2008dea0 	.word	0x2008dea0
 801bf2c:	0812b020 	.word	0x0812b020
 801bf30:	20000a48 	.word	0x20000a48
 801bf34:	0812b030 	.word	0x0812b030
 801bf38:	2000527e 	.word	0x2000527e
 801bf3c:	0812b038 	.word	0x0812b038
 801bf40:	2000527a 	.word	0x2000527a
 801bf44:	0812b040 	.word	0x0812b040
 801bf48:	20005277 	.word	0x20005277
 801bf4c:	0812b048 	.word	0x0812b048
 801bf50:	20005278 	.word	0x20005278
 801bf54:	0812b050 	.word	0x0812b050
 801bf58:	2000527b 	.word	0x2000527b
 801bf5c:	0812b058 	.word	0x0812b058
 801bf60:	2008c319 	.word	0x2008c319
 801bf64:	0812b060 	.word	0x0812b060
 801bf68:	2008c31a 	.word	0x2008c31a
 801bf6c:	0812b068 	.word	0x0812b068

0801bf70 <WriteFLASH_Screen>:


void WriteFLASH_Screen(uint8_t Screen)
{
 801bf70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bf74:	4c1b      	ldr	r4, [pc, #108]	; (801bfe4 <WriteFLASH_Screen+0x74>)
uint32_t PAGEError = 0;
 801bf76:	af02      	add	r7, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bf78:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 801bf7c:	f04f 0800 	mov.w	r8, #0
 801bf80:	f847 8d04 	str.w	r8, [r7, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bf84:	6125      	str	r5, [r4, #16]
{
 801bf86:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 801bf88:	f7e6 f916 	bl	80021b8 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 801bf8c:	f7e6 f914 	bl	80021b8 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bf90:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 801bf92:	2064      	movs	r0, #100	; 0x64
 801bf94:	f7e5 f84a 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801bf98:	4813      	ldr	r0, [pc, #76]	; (801bfe8 <WriteFLASH_Screen+0x78>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 801bf9a:	2302      	movs	r3, #2
 801bf9c:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)44;
 801bf9e:	232c      	movs	r3, #44	; 0x2c
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801bfa0:	4639      	mov	r1, r7
		EraseInitStruct3.Page = (uint32_t)44;
 801bfa2:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 801bfa4:	2301      	movs	r3, #1
 801bfa6:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801bfa8:	f8c0 8000 	str.w	r8, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801bfac:	f7e6 fa1e 	bl	80023ec <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 801bfb0:	2032      	movs	r0, #50	; 0x32
 801bfb2:	f7e5 f83b 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bfb6:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 801bfb8:	f7e6 f910 	bl	80021dc <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 801bfbc:	f7e6 f8fc 	bl	80021b8 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bfc0:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SCREENADDR, Screen);
 801bfc2:	b2f4      	uxtb	r4, r6
 801bfc4:	4e09      	ldr	r6, [pc, #36]	; (801bfec <WriteFLASH_Screen+0x7c>)
 801bfc6:	2500      	movs	r5, #0
 801bfc8:	4622      	mov	r2, r4
 801bfca:	462b      	mov	r3, r5
 801bfcc:	4631      	mov	r1, r6
 801bfce:	2000      	movs	r0, #0
 801bfd0:	f7e6 f94c 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801bfd4:	2800      	cmp	r0, #0
 801bfd6:	d1f7      	bne.n	801bfc8 <WriteFLASH_Screen+0x58>
					}
		HAL_FLASH_Lock();
 801bfd8:	f7e6 f900 	bl	80021dc <HAL_FLASH_Lock>
}
 801bfdc:	b002      	add	sp, #8
 801bfde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfe2:	bf00      	nop
 801bfe4:	40022000 	.word	0x40022000
 801bfe8:	2008dea0 	.word	0x2008dea0
 801bfec:	0812c020 	.word	0x0812c020

0801bff0 <Calculate_SD_Data>:


void Calculate_SD_Data()
{
 801bff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	SDWr_Status_bar = 0;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801bff2:	4c5b      	ldr	r4, [pc, #364]	; (801c160 <Calculate_SD_Data+0x170>)
	SDWr_Status_bar = 0;
 801bff4:	4e5b      	ldr	r6, [pc, #364]	; (801c164 <Calculate_SD_Data+0x174>)
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801bff6:	4d5c      	ldr	r5, [pc, #368]	; (801c168 <Calculate_SD_Data+0x178>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801bff8:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 801c16c <Calculate_SD_Data+0x17c>
	Calculate_xy1931(colorimetry_XYZ1931);
 801bffc:	4f5c      	ldr	r7, [pc, #368]	; (801c170 <Calculate_SD_Data+0x180>)
	SDWr_Status_bar = 0;
 801bffe:	2200      	movs	r2, #0
 801c000:	2300      	movs	r3, #0
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c002:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c006:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0;
 801c008:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c00c:	f7f9 fb46 	bl	801569c <GUI_Bar_Measure>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801c010:	462a      	mov	r2, r5
 801c012:	4b58      	ldr	r3, [pc, #352]	; (801c174 <Calculate_SD_Data+0x184>)
 801c014:	4958      	ldr	r1, [pc, #352]	; (801c178 <Calculate_SD_Data+0x188>)
 801c016:	4620      	mov	r0, r4
 801c018:	f7f2 f888 	bl	800e12c <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801c01c:	4638      	mov	r0, r7
 801c01e:	f7f2 f8f1 	bl	800e204 <Calculate_xy1931>
	Calculate_uv1976(colorimetry_xy1931);
 801c022:	4856      	ldr	r0, [pc, #344]	; (801c17c <Calculate_SD_Data+0x18c>)
 801c024:	f7f2 f930 	bl	800e288 <Calculate_uv1976>
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801c028:	4b55      	ldr	r3, [pc, #340]	; (801c180 <Calculate_SD_Data+0x190>)
 801c02a:	781a      	ldrb	r2, [r3, #0]
 801c02c:	4b55      	ldr	r3, [pc, #340]	; (801c184 <Calculate_SD_Data+0x194>)
 801c02e:	4638      	mov	r0, r7
 801c030:	7819      	ldrb	r1, [r3, #0]
	
	SDWr_Status_bar = 0.1;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	delta_Eab_Measure = Calculate_deltaEab();
	
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c032:	4f55      	ldr	r7, [pc, #340]	; (801c188 <Calculate_SD_Data+0x198>)
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801c034:	f7f2 fae8 	bl	800e608 <Calculate_Lab>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801c038:	4620      	mov	r0, r4
 801c03a:	2101      	movs	r1, #1
 801c03c:	f7f2 f948 	bl	800e2d0 <Calculate_Tc>
 801c040:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801c044:	4b51      	ldr	r3, [pc, #324]	; (801c18c <Calculate_SD_Data+0x19c>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c046:	ed9f 0a52 	vldr	s0, [pc, #328]	; 801c190 <Calculate_SD_Data+0x1a0>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801c04a:	ee17 2a90 	vmov	r2, s15
 801c04e:	801a      	strh	r2, [r3, #0]
	SDWr_Status_bar = 0.1;
 801c050:	a33d      	add	r3, pc, #244	; (adr r3, 801c148 <Calculate_SD_Data+0x158>)
 801c052:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c056:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c05a:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.1;
 801c05c:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c060:	f7f9 fb1c 	bl	801569c <GUI_Bar_Measure>
	delta_Eab_Measure = Calculate_deltaEab();
 801c064:	f7f2 fd10 	bl	800ea88 <Calculate_deltaEab>
 801c068:	4b4a      	ldr	r3, [pc, #296]	; (801c194 <Calculate_SD_Data+0x1a4>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c06a:	4629      	mov	r1, r5
	delta_Eab_Measure = Calculate_deltaEab();
 801c06c:	8018      	strh	r0, [r3, #0]
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c06e:	4620      	mov	r0, r4
 801c070:	f7f1 fee0 	bl	800de34 <Calculate_EL_Day>
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801c074:	4620      	mov	r0, r4
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801c076:	4d48      	ldr	r5, [pc, #288]	; (801c198 <Calculate_SD_Data+0x1a8>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c078:	ed87 0a00 	vstr	s0, [r7]
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801c07c:	f7f1 fefa 	bl	800de74 <Calculate_EL_Day_Wt>
 801c080:	4b46      	ldr	r3, [pc, #280]	; (801c19c <Calculate_SD_Data+0x1ac>)
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801c082:	4629      	mov	r1, r5
 801c084:	4620      	mov	r0, r4
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801c086:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801c08a:	f7f1 ff39 	bl	800df00 <Calculate_PPFD_PPL>
 801c08e:	4b44      	ldr	r3, [pc, #272]	; (801c1a0 <Calculate_SD_Data+0x1b0>)
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801c090:	4629      	mov	r1, r5
 801c092:	4620      	mov	r0, r4
 801c094:	2200      	movs	r2, #0
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801c096:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801c09a:	f7f1 ff6d 	bl	800df78 <Calculate_PPFD_PPL_Range>
 801c09e:	4b41      	ldr	r3, [pc, #260]	; (801c1a4 <Calculate_SD_Data+0x1b4>)
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801c0a0:	4629      	mov	r1, r5
 801c0a2:	4620      	mov	r0, r4
 801c0a4:	2201      	movs	r2, #1
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801c0a6:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801c0aa:	f7f1 ff65 	bl	800df78 <Calculate_PPFD_PPL_Range>
 801c0ae:	4b3e      	ldr	r3, [pc, #248]	; (801c1a8 <Calculate_SD_Data+0x1b8>)
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801c0b0:	4629      	mov	r1, r5
 801c0b2:	4620      	mov	r0, r4
 801c0b4:	2202      	movs	r2, #2
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801c0b6:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801c0ba:	f7f1 ff5d 	bl	800df78 <Calculate_PPFD_PPL_Range>
 801c0be:	4b3b      	ldr	r3, [pc, #236]	; (801c1ac <Calculate_SD_Data+0x1bc>)
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 801c0c0:	4629      	mov	r1, r5
 801c0c2:	4620      	mov	r0, r4
 801c0c4:	2203      	movs	r2, #3
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801c0c6:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 801c0ca:	f7f1 ff55 	bl	800df78 <Calculate_PPFD_PPL_Range>
 801c0ce:	4b38      	ldr	r3, [pc, #224]	; (801c1b0 <Calculate_SD_Data+0x1c0>)
 801c0d0:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.3;
 801c0d4:	a31e      	add	r3, pc, #120	; (adr r3, 801c150 <Calculate_SD_Data+0x160>)
 801c0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c0da:	ed9f 0a36 	vldr	s0, [pc, #216]	; 801c1b4 <Calculate_SD_Data+0x1c4>
 801c0de:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c0e2:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.3;
 801c0e4:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c0e8:	f7f9 fad8 	bl	801569c <GUI_Bar_Measure>
	E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801c0ec:	4620      	mov	r0, r4
 801c0ee:	4932      	ldr	r1, [pc, #200]	; (801c1b8 <Calculate_SD_Data+0x1c8>)
 801c0f0:	f7f1 fed8 	bl	800dea4 <Calculate_EL_Night>
 801c0f4:	4b31      	ldr	r3, [pc, #196]	; (801c1bc <Calculate_SD_Data+0x1cc>)
 801c0f6:	eef0 0a40 	vmov.f32	s1, s0
 801c0fa:	ed83 0a00 	vstr	s0, [r3]
	SP_Measure = (Calculate_SP(E_day, E_Night));
 801c0fe:	ed97 0a00 	vldr	s0, [r7]
 801c102:	f7f1 feef 	bl	800dee4 <Calculate_SP>
 801c106:	4b2e      	ldr	r3, [pc, #184]	; (801c1c0 <Calculate_SD_Data+0x1d0>)
	
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801c108:	492e      	ldr	r1, [pc, #184]	; (801c1c4 <Calculate_SD_Data+0x1d4>)
	SP_Measure = (Calculate_SP(E_day, E_Night));
 801c10a:	ed83 0a00 	vstr	s0, [r3]
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801c10e:	4620      	mov	r0, r4
 801c110:	f7f1 ffbc 	bl	800e08c <Calculate_ELr>
 801c114:	4b2c      	ldr	r3, [pc, #176]	; (801c1c8 <Calculate_SD_Data+0x1d8>)
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 801c116:	492d      	ldr	r1, [pc, #180]	; (801c1cc <Calculate_SD_Data+0x1dc>)
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801c118:	ed83 0a00 	vstr	s0, [r3]
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 801c11c:	4620      	mov	r0, r4
 801c11e:	f7f1 ff9b 	bl	800e058 <Calculate_ELb>
 801c122:	4b2b      	ldr	r3, [pc, #172]	; (801c1d0 <Calculate_SD_Data+0x1e0>)
 801c124:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.4;
 801c128:	a30b      	add	r3, pc, #44	; (adr r3, 801c158 <Calculate_SD_Data+0x168>)
 801c12a:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c12e:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801c1d4 <Calculate_SD_Data+0x1e4>
	SDWr_Status_bar = 0.4;
 801c132:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c136:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c13a:	2055      	movs	r0, #85	; 0x55
}
 801c13c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c140:	f7f9 baac 	b.w	801569c <GUI_Bar_Measure>
 801c144:	f3af 8000 	nop.w
 801c148:	9999999a 	.word	0x9999999a
 801c14c:	3fb99999 	.word	0x3fb99999
 801c150:	33333333 	.word	0x33333333
 801c154:	3fd33333 	.word	0x3fd33333
 801c158:	9999999a 	.word	0x9999999a
 801c15c:	3fd99999 	.word	0x3fd99999
 801c160:	20007de4 	.word	0x20007de4
 801c164:	200052d0 	.word	0x200052d0
 801c168:	2004e1e8 	.word	0x2004e1e8
 801c16c:	00000000 	.word	0x00000000
 801c170:	2008adc6 	.word	0x2008adc6
 801c174:	20088db8 	.word	0x20088db8
 801c178:	20085db8 	.word	0x20085db8
 801c17c:	2008ade4 	.word	0x2008ade4
 801c180:	2008c319 	.word	0x2008c319
 801c184:	2000527c 	.word	0x2000527c
 801c188:	2009150c 	.word	0x2009150c
 801c18c:	200501e8 	.word	0x200501e8
 801c190:	3dcccccd 	.word	0x3dcccccd
 801c194:	2008c316 	.word	0x2008c316
 801c198:	200501ec 	.word	0x200501ec
 801c19c:	20090f78 	.word	0x20090f78
 801c1a0:	20090f80 	.word	0x20090f80
 801c1a4:	20091064 	.word	0x20091064
 801c1a8:	200913e8 	.word	0x200913e8
 801c1ac:	20091324 	.word	0x20091324
 801c1b0:	20090f7c 	.word	0x20090f7c
 801c1b4:	3e99999a 	.word	0x3e99999a
 801c1b8:	2004f1e8 	.word	0x2004f1e8
 801c1bc:	20090f6c 	.word	0x20090f6c
 801c1c0:	20091060 	.word	0x20091060
 801c1c4:	200065e0 	.word	0x200065e0
 801c1c8:	20091508 	.word	0x20091508
 801c1cc:	200055e0 	.word	0x200055e0
 801c1d0:	20091504 	.word	0x20091504
 801c1d4:	3ecccccd 	.word	0x3ecccccd

0801c1d8 <SD_Witer>:



uint8_t mount = 0;
void SD_Witer(uint16_t file_cnt, uint8_t Language_status, uint8_t Memory_Data_satus, uint8_t Mode_EL, uint8_t CRICQS_done)
{
 801c1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1dc:	461f      	mov	r7, r3
	
	char digit_buff[3];
	char source_type[4];
	char measure_buff[12];

	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801c1de:	4bb8      	ldr	r3, [pc, #736]	; (801c4c0 <SD_Witer+0x2e8>)
 801c1e0:	781b      	ldrb	r3, [r3, #0]
 801c1e2:	2b01      	cmp	r3, #1
{
 801c1e4:	b087      	sub	sp, #28
 801c1e6:	4605      	mov	r5, r0
 801c1e8:	460c      	mov	r4, r1
 801c1ea:	4690      	mov	r8, r2
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801c1ec:	f000 85fe 	beq.w	801cdec <SD_Witer+0xc14>
 801c1f0:	2b02      	cmp	r3, #2
 801c1f2:	f000 85fe 	beq.w	801cdf2 <SD_Witer+0xc1a>
 801c1f6:	2b04      	cmp	r3, #4
 801c1f8:	f000 85fe 	beq.w	801cdf8 <SD_Witer+0xc20>
 801c1fc:	2b08      	cmp	r3, #8
 801c1fe:	f000 85fe 	beq.w	801cdfe <SD_Witer+0xc26>
 801c202:	2b10      	cmp	r3, #16
 801c204:	f000 85fe 	beq.w	801ce04 <SD_Witer+0xc2c>
 801c208:	4aae      	ldr	r2, [pc, #696]	; (801c4c4 <SD_Witer+0x2ec>)
 801c20a:	49af      	ldr	r1, [pc, #700]	; (801c4c8 <SD_Witer+0x2f0>)
 801c20c:	2b20      	cmp	r3, #32
 801c20e:	bf18      	it	ne
 801c210:	4611      	movne	r1, r2
 801c212:	a802      	add	r0, sp, #8
 801c214:	f005 fdf7 	bl	8021e06 <strcpy>
	
	memset(measure_buff, 0, 12);
 801c218:	2300      	movs	r3, #0
	
		sprintf(digit_buff, "%.3d", file_cnt );
 801c21a:	462a      	mov	r2, r5
 801c21c:	49ab      	ldr	r1, [pc, #684]	; (801c4cc <SD_Witer+0x2f4>)
	memset(measure_buff, 0, 12);
 801c21e:	9303      	str	r3, [sp, #12]
		sprintf(digit_buff, "%.3d", file_cnt );
 801c220:	a801      	add	r0, sp, #4
	memset(measure_buff, 0, 12);
 801c222:	9304      	str	r3, [sp, #16]
 801c224:	9305      	str	r3, [sp, #20]
		sprintf(digit_buff, "%.3d", file_cnt );
 801c226:	f005 fdbb 	bl	8021da0 <sprintf>
		strcat(buffer_sd, digit_buff);
 801c22a:	a901      	add	r1, sp, #4
 801c22c:	48a8      	ldr	r0, [pc, #672]	; (801c4d0 <SD_Witer+0x2f8>)
		strcat(buffer_sd, ".txt");

		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 801c22e:	4da9      	ldr	r5, [pc, #676]	; (801c4d4 <SD_Witer+0x2fc>)
 801c230:	4ea7      	ldr	r6, [pc, #668]	; (801c4d0 <SD_Witer+0x2f8>)
		strcat(buffer_sd, digit_buff);
 801c232:	f005 fdd9 	bl	8021de8 <strcat>
		strcat(buffer_sd, ".txt");
 801c236:	49a8      	ldr	r1, [pc, #672]	; (801c4d8 <SD_Witer+0x300>)
 801c238:	48a5      	ldr	r0, [pc, #660]	; (801c4d0 <SD_Witer+0x2f8>)
 801c23a:	f005 fdd5 	bl	8021de8 <strcat>
		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 801c23e:	2201      	movs	r2, #1
 801c240:	49a6      	ldr	r1, [pc, #664]	; (801c4dc <SD_Witer+0x304>)
 801c242:	48a7      	ldr	r0, [pc, #668]	; (801c4e0 <SD_Witer+0x308>)
 801c244:	f7ed f9ca 	bl	80095dc <f_mount>
 801c248:	7028      	strb	r0, [r5, #0]
       if (res != FR_OK)
 801c24a:	2800      	cmp	r0, #0
 801c24c:	f040 85b1 	bne.w	801cdb2 <SD_Witer+0xbda>
        {
                //printf("Ошибка монтирования диска %d\r\n", result);
        }
			else
				{
				res = f_open(&MyFile, buffer_sd, FA_CREATE_ALWAYS | FA_WRITE);
 801c250:	220a      	movs	r2, #10
 801c252:	4631      	mov	r1, r6
 801c254:	48a3      	ldr	r0, [pc, #652]	; (801c4e4 <SD_Witer+0x30c>)
 801c256:	f7ed f9f5 	bl	8009644 <f_open>
 801c25a:	7028      	strb	r0, [r5, #0]
				if (res == FR_OK)
 801c25c:	2800      	cmp	r0, #0
 801c25e:	f040 85a8 	bne.w	801cdb2 <SD_Witer+0xbda>
					{
							
							SDWr_Status_bar = 0.5;
 801c262:	4ba1      	ldr	r3, [pc, #644]	; (801c4e8 <SD_Witer+0x310>)
 801c264:	49a1      	ldr	r1, [pc, #644]	; (801c4ec <SD_Witer+0x314>)
 801c266:	2000      	movs	r0, #0
 801c268:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c26c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801c270:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c274:	2055      	movs	r0, #85	; 0x55
 801c276:	f7f9 fa11 	bl	801569c <GUI_Bar_Measure>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801c27a:	4b9d      	ldr	r3, [pc, #628]	; (801c4f0 <SD_Witer+0x318>)
 801c27c:	2c00      	cmp	r4, #0
 801c27e:	f040 85c4 	bne.w	801ce0a <SD_Witer+0xc32>
 801c282:	499c      	ldr	r1, [pc, #624]	; (801c4f4 <SD_Witer+0x31c>)
 801c284:	2235      	movs	r2, #53	; 0x35
 801c286:	4897      	ldr	r0, [pc, #604]	; (801c4e4 <SD_Witer+0x30c>)
 801c288:	f7ed faf2 	bl	8009870 <f_write>
							sprintf(measure_buff, "%.4f", SP_Measure);
 801c28c:	4b9a      	ldr	r3, [pc, #616]	; (801c4f8 <SD_Witer+0x320>)
 801c28e:	6818      	ldr	r0, [r3, #0]
 801c290:	f7e4 f972 	bl	8000578 <__aeabi_f2d>
 801c294:	4602      	mov	r2, r0
 801c296:	460b      	mov	r3, r1
 801c298:	a803      	add	r0, sp, #12
 801c29a:	4998      	ldr	r1, [pc, #608]	; (801c4fc <SD_Witer+0x324>)
 801c29c:	f005 fd80 	bl	8021da0 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c2a0:	220c      	movs	r2, #12
 801c2a2:	4b93      	ldr	r3, [pc, #588]	; (801c4f0 <SD_Witer+0x318>)
 801c2a4:	488f      	ldr	r0, [pc, #572]	; (801c4e4 <SD_Witer+0x30c>)
 801c2a6:	eb0d 0102 	add.w	r1, sp, r2
 801c2aa:	f7ed fae1 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 801c2ae:	2300      	movs	r3, #0
 801c2b0:	9303      	str	r3, [sp, #12]
 801c2b2:	9304      	str	r3, [sp, #16]
 801c2b4:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801c2b6:	4b8e      	ldr	r3, [pc, #568]	; (801c4f0 <SD_Witer+0x318>)
 801c2b8:	2c00      	cmp	r4, #0
 801c2ba:	f040 85aa 	bne.w	801ce12 <SD_Witer+0xc3a>
 801c2be:	4990      	ldr	r1, [pc, #576]	; (801c500 <SD_Witer+0x328>)
 801c2c0:	2226      	movs	r2, #38	; 0x26
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 801c2c2:	f8df 9264 	ldr.w	r9, [pc, #612]	; 801c528 <SD_Witer+0x350>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801c2c6:	4887      	ldr	r0, [pc, #540]	; (801c4e4 <SD_Witer+0x30c>)
 801c2c8:	f7ed fad2 	bl	8009870 <f_write>
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 801c2cc:	f8b9 2000 	ldrh.w	r2, [r9]
 801c2d0:	498c      	ldr	r1, [pc, #560]	; (801c504 <SD_Witer+0x32c>)
 801c2d2:	a803      	add	r0, sp, #12
 801c2d4:	f005 fd64 	bl	8021da0 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c2d8:	220c      	movs	r2, #12
 801c2da:	4b85      	ldr	r3, [pc, #532]	; (801c4f0 <SD_Witer+0x318>)
 801c2dc:	4881      	ldr	r0, [pc, #516]	; (801c4e4 <SD_Witer+0x30c>)
 801c2de:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 801c2e2:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c2e4:	f7ed fac4 	bl	8009870 <f_write>
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801c2e8:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801c2ec:	4985      	ldr	r1, [pc, #532]	; (801c504 <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 801c2ee:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801c2f0:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801c2f2:	9504      	str	r5, [sp, #16]
 801c2f4:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801c2f6:	f005 fd53 	bl	8021da0 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c2fa:	220c      	movs	r2, #12
 801c2fc:	4b7c      	ldr	r3, [pc, #496]	; (801c4f0 <SD_Witer+0x318>)
 801c2fe:	4879      	ldr	r0, [pc, #484]	; (801c4e4 <SD_Witer+0x30c>)
 801c300:	eb0d 0102 	add.w	r1, sp, r2
 801c304:	f7ed fab4 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801c308:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801c30c:	497d      	ldr	r1, [pc, #500]	; (801c504 <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 801c30e:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801c310:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801c312:	9504      	str	r5, [sp, #16]
 801c314:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801c316:	f005 fd43 	bl	8021da0 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c31a:	220c      	movs	r2, #12
 801c31c:	4b74      	ldr	r3, [pc, #464]	; (801c4f0 <SD_Witer+0x318>)
 801c31e:	4871      	ldr	r0, [pc, #452]	; (801c4e4 <SD_Witer+0x30c>)
 801c320:	eb0d 0102 	add.w	r1, sp, r2
 801c324:	f7ed faa4 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 801c328:	9503      	str	r5, [sp, #12]
 801c32a:	9504      	str	r5, [sp, #16]
 801c32c:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801c32e:	4b70      	ldr	r3, [pc, #448]	; (801c4f0 <SD_Witer+0x318>)
 801c330:	2c00      	cmp	r4, #0
 801c332:	f040 8572 	bne.w	801ce1a <SD_Witer+0xc42>
 801c336:	4974      	ldr	r1, [pc, #464]	; (801c508 <SD_Witer+0x330>)
 801c338:	222e      	movs	r2, #46	; 0x2e
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 801c33a:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 801c52c <SD_Witer+0x354>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801c33e:	4869      	ldr	r0, [pc, #420]	; (801c4e4 <SD_Witer+0x30c>)
 801c340:	f7ed fa96 	bl	8009870 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 801c344:	f8d9 0000 	ldr.w	r0, [r9]
 801c348:	f7e4 f916 	bl	8000578 <__aeabi_f2d>
 801c34c:	4602      	mov	r2, r0
 801c34e:	460b      	mov	r3, r1
 801c350:	a803      	add	r0, sp, #12
 801c352:	496e      	ldr	r1, [pc, #440]	; (801c50c <SD_Witer+0x334>)
 801c354:	f005 fd24 	bl	8021da0 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c358:	220c      	movs	r2, #12
 801c35a:	4b65      	ldr	r3, [pc, #404]	; (801c4f0 <SD_Witer+0x318>)
 801c35c:	4861      	ldr	r0, [pc, #388]	; (801c4e4 <SD_Witer+0x30c>)
 801c35e:	eb0d 0102 	add.w	r1, sp, r2
 801c362:	f7ed fa85 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 801c366:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 801c368:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 801c36c:	9503      	str	r5, [sp, #12]
 801c36e:	9504      	str	r5, [sp, #16]
 801c370:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 801c372:	f7e4 f901 	bl	8000578 <__aeabi_f2d>
 801c376:	4602      	mov	r2, r0
 801c378:	460b      	mov	r3, r1
 801c37a:	a803      	add	r0, sp, #12
 801c37c:	495f      	ldr	r1, [pc, #380]	; (801c4fc <SD_Witer+0x324>)
 801c37e:	f005 fd0f 	bl	8021da0 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c382:	220c      	movs	r2, #12
 801c384:	4b5a      	ldr	r3, [pc, #360]	; (801c4f0 <SD_Witer+0x318>)
 801c386:	4857      	ldr	r0, [pc, #348]	; (801c4e4 <SD_Witer+0x30c>)
 801c388:	eb0d 0102 	add.w	r1, sp, r2
 801c38c:	f7ed fa70 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 801c390:	9503      	str	r5, [sp, #12]
 801c392:	9504      	str	r5, [sp, #16]
 801c394:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801c396:	4b56      	ldr	r3, [pc, #344]	; (801c4f0 <SD_Witer+0x318>)
 801c398:	2c00      	cmp	r4, #0
 801c39a:	f040 8542 	bne.w	801ce22 <SD_Witer+0xc4a>
 801c39e:	495c      	ldr	r1, [pc, #368]	; (801c510 <SD_Witer+0x338>)
 801c3a0:	2230      	movs	r2, #48	; 0x30
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 801c3a2:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801c530 <SD_Witer+0x358>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801c3a6:	484f      	ldr	r0, [pc, #316]	; (801c4e4 <SD_Witer+0x30c>)
 801c3a8:	f7ed fa62 	bl	8009870 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 801c3ac:	f8d9 0000 	ldr.w	r0, [r9]
 801c3b0:	f7e4 f8e2 	bl	8000578 <__aeabi_f2d>
 801c3b4:	4602      	mov	r2, r0
 801c3b6:	460b      	mov	r3, r1
 801c3b8:	a803      	add	r0, sp, #12
 801c3ba:	4954      	ldr	r1, [pc, #336]	; (801c50c <SD_Witer+0x334>)
 801c3bc:	f005 fcf0 	bl	8021da0 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c3c0:	220c      	movs	r2, #12
 801c3c2:	4b4b      	ldr	r3, [pc, #300]	; (801c4f0 <SD_Witer+0x318>)
 801c3c4:	4847      	ldr	r0, [pc, #284]	; (801c4e4 <SD_Witer+0x30c>)
 801c3c6:	eb0d 0102 	add.w	r1, sp, r2
 801c3ca:	f7ed fa51 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 801c3ce:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 801c3d0:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 801c3d4:	9503      	str	r5, [sp, #12]
 801c3d6:	9504      	str	r5, [sp, #16]
 801c3d8:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 801c3da:	f7e4 f8cd 	bl	8000578 <__aeabi_f2d>
 801c3de:	4602      	mov	r2, r0
 801c3e0:	460b      	mov	r3, r1
 801c3e2:	a803      	add	r0, sp, #12
 801c3e4:	4945      	ldr	r1, [pc, #276]	; (801c4fc <SD_Witer+0x324>)
 801c3e6:	f005 fcdb 	bl	8021da0 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c3ea:	220c      	movs	r2, #12
 801c3ec:	4b40      	ldr	r3, [pc, #256]	; (801c4f0 <SD_Witer+0x318>)
 801c3ee:	483d      	ldr	r0, [pc, #244]	; (801c4e4 <SD_Witer+0x30c>)
 801c3f0:	eb0d 0102 	add.w	r1, sp, r2
 801c3f4:	f7ed fa3c 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 801c3f8:	9503      	str	r5, [sp, #12]
 801c3fa:	9504      	str	r5, [sp, #16]
 801c3fc:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801c3fe:	4b3c      	ldr	r3, [pc, #240]	; (801c4f0 <SD_Witer+0x318>)
 801c400:	2c00      	cmp	r4, #0
 801c402:	f040 8512 	bne.w	801ce2a <SD_Witer+0xc52>
 801c406:	4943      	ldr	r1, [pc, #268]	; (801c514 <SD_Witer+0x33c>)
 801c408:	220e      	movs	r2, #14
 801c40a:	4836      	ldr	r0, [pc, #216]	; (801c4e4 <SD_Witer+0x30c>)
 801c40c:	f7ed fa30 	bl	8009870 <f_write>
							if(Tc_Measure == 0xFFFF){f_write(&MyFile, "NAN", 3, &byteswritten);}
 801c410:	4b41      	ldr	r3, [pc, #260]	; (801c518 <SD_Witer+0x340>)
 801c412:	881a      	ldrh	r2, [r3, #0]
 801c414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c418:	429a      	cmp	r2, r3
 801c41a:	f040 8537 	bne.w	801ce8c <SD_Witer+0xcb4>
 801c41e:	4b34      	ldr	r3, [pc, #208]	; (801c4f0 <SD_Witer+0x318>)
 801c420:	4928      	ldr	r1, [pc, #160]	; (801c4c4 <SD_Witer+0x2ec>)
 801c422:	4830      	ldr	r0, [pc, #192]	; (801c4e4 <SD_Witer+0x30c>)
 801c424:	2203      	movs	r2, #3
 801c426:	f7ed fa23 	bl	8009870 <f_write>
										sprintf(measure_buff, "%.d", Tc_Measure);
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
										memset(measure_buff, 0, 12);
								}
						
								SDWr_Status_bar = 0.7;
 801c42a:	a123      	add	r1, pc, #140	; (adr r1, 801c4b8 <SD_Witer+0x2e0>)
 801c42c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c430:	4b2d      	ldr	r3, [pc, #180]	; (801c4e8 <SD_Witer+0x310>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c432:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 801c51c <SD_Witer+0x344>
								SDWr_Status_bar = 0.7;
 801c436:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c43a:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c43e:	2055      	movs	r0, #85	; 0x55
 801c440:	f7f9 f92c 	bl	801569c <GUI_Bar_Measure>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801c444:	4b2a      	ldr	r3, [pc, #168]	; (801c4f0 <SD_Witer+0x318>)
 801c446:	2c00      	cmp	r4, #0
 801c448:	f040 8531 	bne.w	801ceae <SD_Witer+0xcd6>
 801c44c:	4934      	ldr	r1, [pc, #208]	; (801c520 <SD_Witer+0x348>)
 801c44e:	224a      	movs	r2, #74	; 0x4a
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 801c450:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 801c534 <SD_Witer+0x35c>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801c454:	4823      	ldr	r0, [pc, #140]	; (801c4e4 <SD_Witer+0x30c>)
 801c456:	f7ed fa0b 	bl	8009870 <f_write>
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 801c45a:	f9b9 2000 	ldrsh.w	r2, [r9]
 801c45e:	4931      	ldr	r1, [pc, #196]	; (801c524 <SD_Witer+0x34c>)
 801c460:	a803      	add	r0, sp, #12
 801c462:	f005 fc9d 	bl	8021da0 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c466:	220c      	movs	r2, #12
 801c468:	4b21      	ldr	r3, [pc, #132]	; (801c4f0 <SD_Witer+0x318>)
 801c46a:	481e      	ldr	r0, [pc, #120]	; (801c4e4 <SD_Witer+0x30c>)
 801c46c:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 801c470:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c472:	f7ed f9fd 	bl	8009870 <f_write>
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801c476:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
 801c47a:	492a      	ldr	r1, [pc, #168]	; (801c524 <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 801c47c:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801c47e:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801c480:	9504      	str	r5, [sp, #16]
 801c482:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801c484:	f005 fc8c 	bl	8021da0 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c488:	220c      	movs	r2, #12
 801c48a:	4b19      	ldr	r3, [pc, #100]	; (801c4f0 <SD_Witer+0x318>)
 801c48c:	4815      	ldr	r0, [pc, #84]	; (801c4e4 <SD_Witer+0x30c>)
 801c48e:	eb0d 0102 	add.w	r1, sp, r2
 801c492:	f7ed f9ed 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801c496:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801c49a:	4922      	ldr	r1, [pc, #136]	; (801c524 <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 801c49c:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801c49e:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801c4a0:	9504      	str	r5, [sp, #16]
 801c4a2:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801c4a4:	f005 fc7c 	bl	8021da0 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c4a8:	220c      	movs	r2, #12
 801c4aa:	4b11      	ldr	r3, [pc, #68]	; (801c4f0 <SD_Witer+0x318>)
 801c4ac:	480d      	ldr	r0, [pc, #52]	; (801c4e4 <SD_Witer+0x30c>)
 801c4ae:	eb0d 0102 	add.w	r1, sp, r2
 801c4b2:	f7ed f9dd 	bl	8009870 <f_write>
 801c4b6:	e03f      	b.n	801c538 <SD_Witer+0x360>
 801c4b8:	66666666 	.word	0x66666666
 801c4bc:	3fe66666 	.word	0x3fe66666
 801c4c0:	2008c319 	.word	0x2008c319
 801c4c4:	0803381b 	.word	0x0803381b
 801c4c8:	0803381f 	.word	0x0803381f
 801c4cc:	08033823 	.word	0x08033823
 801c4d0:	2008de94 	.word	0x2008de94
 801c4d4:	2008eee0 	.word	0x2008eee0
 801c4d8:	08033828 	.word	0x08033828
 801c4dc:	2008eee5 	.word	0x2008eee5
 801c4e0:	2008ce60 	.word	0x2008ce60
 801c4e4:	2008deb0 	.word	0x2008deb0
 801c4e8:	200052d0 	.word	0x200052d0
 801c4ec:	3fe00000 	.word	0x3fe00000
 801c4f0:	2008ce58 	.word	0x2008ce58
 801c4f4:	20000928 	.word	0x20000928
 801c4f8:	20091060 	.word	0x20091060
 801c4fc:	080337f7 	.word	0x080337f7
 801c500:	20000441 	.word	0x20000441
 801c504:	0803384e 	.word	0x0803384e
 801c508:	200004bd 	.word	0x200004bd
 801c50c:	0803382d 	.word	0x0803382d
 801c510:	2000047b 	.word	0x2000047b
 801c514:	2000024f 	.word	0x2000024f
 801c518:	200501e8 	.word	0x200501e8
 801c51c:	3f333333 	.word	0x3f333333
 801c520:	20000613 	.word	0x20000613
 801c524:	08033837 	.word	0x08033837
 801c528:	2008adc6 	.word	0x2008adc6
 801c52c:	2008ade4 	.word	0x2008ade4
 801c530:	2008addc 	.word	0x2008addc
 801c534:	2008adc0 	.word	0x2008adc0
							memset(measure_buff, 0, 12);
 801c538:	9503      	str	r5, [sp, #12]
 801c53a:	9504      	str	r5, [sp, #16]
 801c53c:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801c53e:	4bb4      	ldr	r3, [pc, #720]	; (801c810 <SD_Witer+0x638>)
 801c540:	2c00      	cmp	r4, #0
 801c542:	f040 84b8 	bne.w	801ceb6 <SD_Witer+0xcde>
 801c546:	49b3      	ldr	r1, [pc, #716]	; (801c814 <SD_Witer+0x63c>)
 801c548:	222a      	movs	r2, #42	; 0x2a
 801c54a:	48b3      	ldr	r0, [pc, #716]	; (801c818 <SD_Witer+0x640>)
 801c54c:	f7ed f990 	bl	8009870 <f_write>
							f_write(&MyFile, &source_type, sizeof(source_type), &byteswritten);//SourceType
 801c550:	4baf      	ldr	r3, [pc, #700]	; (801c810 <SD_Witer+0x638>)
 801c552:	48b1      	ldr	r0, [pc, #708]	; (801c818 <SD_Witer+0x640>)
 801c554:	2204      	movs	r2, #4
 801c556:	a902      	add	r1, sp, #8
 801c558:	f7ed f98a 	bl	8009870 <f_write>
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801c55c:	4bac      	ldr	r3, [pc, #688]	; (801c810 <SD_Witer+0x638>)
 801c55e:	2c00      	cmp	r4, #0
 801c560:	f040 84ad 	bne.w	801cebe <SD_Witer+0xce6>
 801c564:	49ad      	ldr	r1, [pc, #692]	; (801c81c <SD_Witer+0x644>)
 801c566:	2235      	movs	r2, #53	; 0x35
 801c568:	48ab      	ldr	r0, [pc, #684]	; (801c818 <SD_Witer+0x640>)
 801c56a:	f7ed f981 	bl	8009870 <f_write>
							sprintf(measure_buff, "%d\t", lambda_d_Measure); //Lambda D
 801c56e:	4bac      	ldr	r3, [pc, #688]	; (801c820 <SD_Witer+0x648>)
 801c570:	49ac      	ldr	r1, [pc, #688]	; (801c824 <SD_Witer+0x64c>)
 801c572:	881a      	ldrh	r2, [r3, #0]
 801c574:	a803      	add	r0, sp, #12
 801c576:	f005 fc13 	bl	8021da0 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c57a:	220c      	movs	r2, #12
 801c57c:	4ba4      	ldr	r3, [pc, #656]	; (801c810 <SD_Witer+0x638>)
 801c57e:	48a6      	ldr	r0, [pc, #664]	; (801c818 <SD_Witer+0x640>)
 801c580:	eb0d 0102 	add.w	r1, sp, r2
 801c584:	f7ed f974 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 801c588:	2300      	movs	r3, #0
 801c58a:	9303      	str	r3, [sp, #12]
 801c58c:	9304      	str	r3, [sp, #16]
 801c58e:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801c590:	4b9f      	ldr	r3, [pc, #636]	; (801c810 <SD_Witer+0x638>)
 801c592:	2c00      	cmp	r4, #0
 801c594:	f040 8497 	bne.w	801cec6 <SD_Witer+0xcee>
 801c598:	49a3      	ldr	r1, [pc, #652]	; (801c828 <SD_Witer+0x650>)
 801c59a:	223b      	movs	r2, #59	; 0x3b
 801c59c:	489e      	ldr	r0, [pc, #632]	; (801c818 <SD_Witer+0x640>)
 801c59e:	f7ed f967 	bl	8009870 <f_write>
							sprintf(measure_buff, "%d\t", lambda_c_Measure); //Lambda C
 801c5a2:	4ba2      	ldr	r3, [pc, #648]	; (801c82c <SD_Witer+0x654>)
 801c5a4:	499f      	ldr	r1, [pc, #636]	; (801c824 <SD_Witer+0x64c>)
 801c5a6:	881a      	ldrh	r2, [r3, #0]
 801c5a8:	a803      	add	r0, sp, #12
 801c5aa:	f005 fbf9 	bl	8021da0 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c5ae:	220c      	movs	r2, #12
 801c5b0:	4b97      	ldr	r3, [pc, #604]	; (801c810 <SD_Witer+0x638>)
 801c5b2:	4899      	ldr	r0, [pc, #612]	; (801c818 <SD_Witer+0x640>)
 801c5b4:	eb0d 0102 	add.w	r1, sp, r2
 801c5b8:	f7ed f95a 	bl	8009870 <f_write>
							memset(measure_buff, 0, 12);
 801c5bc:	2300      	movs	r3, #0
						
							if(Memory_Data_satus == 0x01)
 801c5be:	f1b8 0f01 	cmp.w	r8, #1
							memset(measure_buff, 0, 12);
 801c5c2:	9303      	str	r3, [sp, #12]
 801c5c4:	9304      	str	r3, [sp, #16]
 801c5c6:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801c5c8:	4b91      	ldr	r3, [pc, #580]	; (801c810 <SD_Witer+0x638>)
							if(Memory_Data_satus == 0x01)
 801c5ca:	f040 8484 	bne.w	801ced6 <SD_Witer+0xcfe>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801c5ce:	2c00      	cmp	r4, #0
 801c5d0:	f040 847d 	bne.w	801cece <SD_Witer+0xcf6>
 801c5d4:	4996      	ldr	r1, [pc, #600]	; (801c830 <SD_Witer+0x658>)
 801c5d6:	2224      	movs	r2, #36	; 0x24
 801c5d8:	488f      	ldr	r0, [pc, #572]	; (801c818 <SD_Witer+0x640>)
 801c5da:	f7ed f949 	bl	8009870 <f_write>
								sprintf(measure_buff, "%d\t", delta_Eab_Measure); //Delta E
 801c5de:	4b95      	ldr	r3, [pc, #596]	; (801c834 <SD_Witer+0x65c>)
 801c5e0:	4990      	ldr	r1, [pc, #576]	; (801c824 <SD_Witer+0x64c>)
 801c5e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c5e6:	a803      	add	r0, sp, #12
 801c5e8:	f005 fbda 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c5ec:	220c      	movs	r2, #12
 801c5ee:	4b88      	ldr	r3, [pc, #544]	; (801c810 <SD_Witer+0x638>)
 801c5f0:	4889      	ldr	r0, [pc, #548]	; (801c818 <SD_Witer+0x640>)
 801c5f2:	eb0d 0102 	add.w	r1, sp, r2
 801c5f6:	f7ed f93b 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801c5fa:	2300      	movs	r3, #0
 801c5fc:	9303      	str	r3, [sp, #12]
 801c5fe:	9304      	str	r3, [sp, #16]
 801c600:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
								f_write(&MyFile, "NAN", 3, &byteswritten);
							}
							
							SDWr_Status_bar = 0.8;
 801c602:	a181      	add	r1, pc, #516	; (adr r1, 801c808 <SD_Witer+0x630>)
 801c604:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c608:	4b8b      	ldr	r3, [pc, #556]	; (801c838 <SD_Witer+0x660>)
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c60a:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801c83c <SD_Witer+0x664>
 801c60e:	f8df 8278 	ldr.w	r8, [pc, #632]	; 801c888 <SD_Witer+0x6b0>
							SDWr_Status_bar = 0.8;
 801c612:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c616:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c61a:	2055      	movs	r0, #85	; 0x55
 801c61c:	f7f9 f83e 	bl	801569c <GUI_Bar_Measure>
							if(Mode_EL == 0x01) //E mode
 801c620:	2f01      	cmp	r7, #1
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801c622:	4b7b      	ldr	r3, [pc, #492]	; (801c810 <SD_Witer+0x638>)
							if(Mode_EL == 0x01) //E mode
 801c624:	f040 847d 	bne.w	801cf22 <SD_Witer+0xd4a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801c628:	2c00      	cmp	r4, #0
 801c62a:	f040 8465 	bne.w	801cef8 <SD_Witer+0xd20>
 801c62e:	4984      	ldr	r1, [pc, #528]	; (801c840 <SD_Witer+0x668>)
 801c630:	2263      	movs	r2, #99	; 0x63
 801c632:	4879      	ldr	r0, [pc, #484]	; (801c818 <SD_Witer+0x640>)
 801c634:	4f83      	ldr	r7, [pc, #524]	; (801c844 <SD_Witer+0x66c>)
 801c636:	f8df b254 	ldr.w	fp, [pc, #596]	; 801c88c <SD_Witer+0x6b4>
								
								for(uint16_t i=0; i < 1024; i++)
								{
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c63a:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801c810 <SD_Witer+0x638>
 801c63e:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801c818 <SD_Witer+0x640>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801c642:	f7ed f915 	bl	8009870 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
 801c646:	f857 0b04 	ldr.w	r0, [r7], #4
 801c64a:	f7e3 ff95 	bl	8000578 <__aeabi_f2d>
 801c64e:	4602      	mov	r2, r0
 801c650:	460b      	mov	r3, r1
 801c652:	a803      	add	r0, sp, #12
 801c654:	497c      	ldr	r1, [pc, #496]	; (801c848 <SD_Witer+0x670>)
 801c656:	f005 fba3 	bl	8021da0 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c65a:	220c      	movs	r2, #12
 801c65c:	4653      	mov	r3, sl
 801c65e:	eb0d 0102 	add.w	r1, sp, r2
 801c662:	4648      	mov	r0, r9
 801c664:	f7ed f904 	bl	8009870 <f_write>
									memset(measure_buff, 0, 12);
 801c668:	2500      	movs	r5, #0
									
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801c66a:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801c66e:	9503      	str	r5, [sp, #12]
 801c670:	9504      	str	r5, [sp, #16]
 801c672:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801c674:	f7e3 ff80 	bl	8000578 <__aeabi_f2d>
 801c678:	4602      	mov	r2, r0
 801c67a:	460b      	mov	r3, r1
 801c67c:	a803      	add	r0, sp, #12
 801c67e:	4973      	ldr	r1, [pc, #460]	; (801c84c <SD_Witer+0x674>)
 801c680:	f005 fb8e 	bl	8021da0 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c684:	220c      	movs	r2, #12
 801c686:	4653      	mov	r3, sl
 801c688:	eb0d 0102 	add.w	r1, sp, r2
 801c68c:	4648      	mov	r0, r9
 801c68e:	f7ed f8ef 	bl	8009870 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801c692:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801c694:	9503      	str	r5, [sp, #12]
 801c696:	9504      	str	r5, [sp, #16]
 801c698:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801c69a:	d1d4      	bne.n	801c646 <SD_Witer+0x46e>
								}
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801c69c:	4b5c      	ldr	r3, [pc, #368]	; (801c810 <SD_Witer+0x638>)
 801c69e:	2c00      	cmp	r4, #0
 801c6a0:	f040 842e 	bne.w	801cf00 <SD_Witer+0xd28>
 801c6a4:	496a      	ldr	r1, [pc, #424]	; (801c850 <SD_Witer+0x678>)
 801c6a6:	2224      	movs	r2, #36	; 0x24
 801c6a8:	485b      	ldr	r0, [pc, #364]	; (801c818 <SD_Witer+0x640>)
 801c6aa:	f7ed f8e1 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f",  E_day); //Ee
 801c6ae:	4b69      	ldr	r3, [pc, #420]	; (801c854 <SD_Witer+0x67c>)
 801c6b0:	6818      	ldr	r0, [r3, #0]
 801c6b2:	f7e3 ff61 	bl	8000578 <__aeabi_f2d>
 801c6b6:	4602      	mov	r2, r0
 801c6b8:	460b      	mov	r3, r1
 801c6ba:	a803      	add	r0, sp, #12
 801c6bc:	4966      	ldr	r1, [pc, #408]	; (801c858 <SD_Witer+0x680>)
 801c6be:	f005 fb6f 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c6c2:	220c      	movs	r2, #12
 801c6c4:	4b52      	ldr	r3, [pc, #328]	; (801c810 <SD_Witer+0x638>)
 801c6c6:	4854      	ldr	r0, [pc, #336]	; (801c818 <SD_Witer+0x640>)
 801c6c8:	eb0d 0102 	add.w	r1, sp, r2
 801c6cc:	f7ed f8d0 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801c6d0:	2300      	movs	r3, #0
 801c6d2:	9303      	str	r3, [sp, #12]
 801c6d4:	9304      	str	r3, [sp, #16]
 801c6d6:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801c6d8:	4b4d      	ldr	r3, [pc, #308]	; (801c810 <SD_Witer+0x638>)
 801c6da:	2c00      	cmp	r4, #0
 801c6dc:	f040 8414 	bne.w	801cf08 <SD_Witer+0xd30>
 801c6e0:	495e      	ldr	r1, [pc, #376]	; (801c85c <SD_Witer+0x684>)
 801c6e2:	2221      	movs	r2, #33	; 0x21
 801c6e4:	484c      	ldr	r0, [pc, #304]	; (801c818 <SD_Witer+0x640>)
 801c6e6:	f7ed f8c3 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.1f",  E_day_Wt); //Eu
 801c6ea:	4b5d      	ldr	r3, [pc, #372]	; (801c860 <SD_Witer+0x688>)
 801c6ec:	6818      	ldr	r0, [r3, #0]
 801c6ee:	f7e3 ff43 	bl	8000578 <__aeabi_f2d>
 801c6f2:	4602      	mov	r2, r0
 801c6f4:	460b      	mov	r3, r1
 801c6f6:	a803      	add	r0, sp, #12
 801c6f8:	495a      	ldr	r1, [pc, #360]	; (801c864 <SD_Witer+0x68c>)
 801c6fa:	f005 fb51 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c6fe:	220c      	movs	r2, #12
 801c700:	4b43      	ldr	r3, [pc, #268]	; (801c810 <SD_Witer+0x638>)
 801c702:	4845      	ldr	r0, [pc, #276]	; (801c818 <SD_Witer+0x640>)
 801c704:	eb0d 0102 	add.w	r1, sp, r2
 801c708:	f7ed f8b2 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801c70c:	2300      	movs	r3, #0
 801c70e:	9303      	str	r3, [sp, #12]
 801c710:	9304      	str	r3, [sp, #16]
 801c712:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801c714:	4b3e      	ldr	r3, [pc, #248]	; (801c810 <SD_Witer+0x638>)
 801c716:	2c00      	cmp	r4, #0
 801c718:	f040 83fa 	bne.w	801cf10 <SD_Witer+0xd38>
 801c71c:	4952      	ldr	r1, [pc, #328]	; (801c868 <SD_Witer+0x690>)
 801c71e:	2223      	movs	r2, #35	; 0x23
 801c720:	483d      	ldr	r0, [pc, #244]	; (801c818 <SD_Witer+0x640>)
 801c722:	f7ed f8a5 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPFD
 801c726:	4b51      	ldr	r3, [pc, #324]	; (801c86c <SD_Witer+0x694>)
 801c728:	6818      	ldr	r0, [r3, #0]
 801c72a:	f7e3 ff25 	bl	8000578 <__aeabi_f2d>
 801c72e:	4602      	mov	r2, r0
 801c730:	460b      	mov	r3, r1
 801c732:	a803      	add	r0, sp, #12
 801c734:	4948      	ldr	r1, [pc, #288]	; (801c858 <SD_Witer+0x680>)
 801c736:	f005 fb33 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c73a:	220c      	movs	r2, #12
 801c73c:	4b34      	ldr	r3, [pc, #208]	; (801c810 <SD_Witer+0x638>)
 801c73e:	4836      	ldr	r0, [pc, #216]	; (801c818 <SD_Witer+0x640>)
 801c740:	eb0d 0102 	add.w	r1, sp, r2
 801c744:	f7ed f894 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801c748:	2300      	movs	r3, #0
 801c74a:	9303      	str	r3, [sp, #12]
 801c74c:	9304      	str	r3, [sp, #16]
 801c74e:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801c750:	4b2f      	ldr	r3, [pc, #188]	; (801c810 <SD_Witer+0x638>)
 801c752:	2c00      	cmp	r4, #0
 801c754:	f040 83df 	bne.w	801cf16 <SD_Witer+0xd3e>
 801c758:	4945      	ldr	r1, [pc, #276]	; (801c870 <SD_Witer+0x698>)
 801c75a:	2239      	movs	r2, #57	; 0x39
 801c75c:	482e      	ldr	r0, [pc, #184]	; (801c818 <SD_Witer+0x640>)
 801c75e:	f7ed f887 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPFD B
 801c762:	4b44      	ldr	r3, [pc, #272]	; (801c874 <SD_Witer+0x69c>)
 801c764:	6818      	ldr	r0, [r3, #0]
 801c766:	f7e3 ff07 	bl	8000578 <__aeabi_f2d>
 801c76a:	4602      	mov	r2, r0
 801c76c:	460b      	mov	r3, r1
 801c76e:	a803      	add	r0, sp, #12
 801c770:	4941      	ldr	r1, [pc, #260]	; (801c878 <SD_Witer+0x6a0>)
 801c772:	f005 fb15 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c776:	220c      	movs	r2, #12
 801c778:	eb0d 0102 	add.w	r1, sp, r2
 801c77c:	4b24      	ldr	r3, [pc, #144]	; (801c810 <SD_Witer+0x638>)
 801c77e:	4826      	ldr	r0, [pc, #152]	; (801c818 <SD_Witer+0x640>)
 801c780:	f7ed f876 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801c784:	4b3d      	ldr	r3, [pc, #244]	; (801c87c <SD_Witer+0x6a4>)
								memset(measure_buff, 0, 12);
 801c786:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801c788:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801c78a:	9503      	str	r5, [sp, #12]
 801c78c:	9504      	str	r5, [sp, #16]
 801c78e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801c790:	f7e3 fef2 	bl	8000578 <__aeabi_f2d>
 801c794:	4602      	mov	r2, r0
 801c796:	460b      	mov	r3, r1
 801c798:	a803      	add	r0, sp, #12
 801c79a:	4937      	ldr	r1, [pc, #220]	; (801c878 <SD_Witer+0x6a0>)
 801c79c:	f005 fb00 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c7a0:	220c      	movs	r2, #12
 801c7a2:	eb0d 0102 	add.w	r1, sp, r2
 801c7a6:	4b1a      	ldr	r3, [pc, #104]	; (801c810 <SD_Witer+0x638>)
 801c7a8:	481b      	ldr	r0, [pc, #108]	; (801c818 <SD_Witer+0x640>)
 801c7aa:	f7ed f861 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801c7ae:	4b34      	ldr	r3, [pc, #208]	; (801c880 <SD_Witer+0x6a8>)
								memset(measure_buff, 0, 12);
 801c7b0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801c7b2:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801c7b4:	9504      	str	r5, [sp, #16]
 801c7b6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801c7b8:	f7e3 fede 	bl	8000578 <__aeabi_f2d>
 801c7bc:	4602      	mov	r2, r0
 801c7be:	460b      	mov	r3, r1
 801c7c0:	a803      	add	r0, sp, #12
 801c7c2:	492d      	ldr	r1, [pc, #180]	; (801c878 <SD_Witer+0x6a0>)
 801c7c4:	f005 faec 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c7c8:	220c      	movs	r2, #12
 801c7ca:	eb0d 0102 	add.w	r1, sp, r2
 801c7ce:	4b10      	ldr	r3, [pc, #64]	; (801c810 <SD_Witer+0x638>)
 801c7d0:	4811      	ldr	r0, [pc, #68]	; (801c818 <SD_Witer+0x640>)
 801c7d2:	f7ed f84d 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801c7d6:	4b2b      	ldr	r3, [pc, #172]	; (801c884 <SD_Witer+0x6ac>)
								memset(measure_buff, 0, 12);
 801c7d8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801c7da:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801c7dc:	9504      	str	r5, [sp, #16]
 801c7de:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801c7e0:	f7e3 feca 	bl	8000578 <__aeabi_f2d>
 801c7e4:	4602      	mov	r2, r0
 801c7e6:	460b      	mov	r3, r1
 801c7e8:	a803      	add	r0, sp, #12
 801c7ea:	4923      	ldr	r1, [pc, #140]	; (801c878 <SD_Witer+0x6a0>)
 801c7ec:	f005 fad8 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c7f0:	220c      	movs	r2, #12
 801c7f2:	4b07      	ldr	r3, [pc, #28]	; (801c810 <SD_Witer+0x638>)
 801c7f4:	4808      	ldr	r0, [pc, #32]	; (801c818 <SD_Witer+0x640>)
 801c7f6:	eb0d 0102 	add.w	r1, sp, r2
 801c7fa:	f7ed f839 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801c7fe:	9503      	str	r5, [sp, #12]
 801c800:	9504      	str	r5, [sp, #16]
 801c802:	9505      	str	r5, [sp, #20]
 801c804:	e044      	b.n	801c890 <SD_Witer+0x6b8>
 801c806:	bf00      	nop
 801c808:	9999999a 	.word	0x9999999a
 801c80c:	3fe99999 	.word	0x3fe99999
 801c810:	2008ce58 	.word	0x2008ce58
 801c814:	200008e0 	.word	0x200008e0
 801c818:	2008deb0 	.word	0x2008deb0
 801c81c:	20000a08 	.word	0x20000a08
 801c820:	200913e4 	.word	0x200913e4
 801c824:	0803384e 	.word	0x0803384e
 801c828:	200009b3 	.word	0x200009b3
 801c82c:	200912a4 	.word	0x200912a4
 801c830:	20000970 	.word	0x20000970
 801c834:	2008c316 	.word	0x2008c316
 801c838:	200052d0 	.word	0x200052d0
 801c83c:	3f4ccccd 	.word	0x3f4ccccd
 801c840:	20000568 	.word	0x20000568
 801c844:	20007de4 	.word	0x20007de4
 801c848:	0803383b 	.word	0x0803383b
 801c84c:	08033840 	.word	0x08033840
 801c850:	2000051f 	.word	0x2000051f
 801c854:	2009150c 	.word	0x2009150c
 801c858:	080337f2 	.word	0x080337f2
 801c85c:	200005dd 	.word	0x200005dd
 801c860:	20090f78 	.word	0x20090f78
 801c864:	080337ed 	.word	0x080337ed
 801c868:	20000811 	.word	0x20000811
 801c86c:	20090f80 	.word	0x20090f80
 801c870:	200007c5 	.word	0x200007c5
 801c874:	20091064 	.word	0x20091064
 801c878:	08033847 	.word	0x08033847
 801c87c:	200913e8 	.word	0x200913e8
 801c880:	20091324 	.word	0x20091324
 801c884:	20090f7c 	.word	0x20090f7c
 801c888:	20008de4 	.word	0x20008de4
 801c88c:	200501ec 	.word	0x200501ec
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801c890:	4baf      	ldr	r3, [pc, #700]	; (801cb50 <SD_Witer+0x978>)
 801c892:	2c00      	cmp	r4, #0
 801c894:	f040 8342 	bne.w	801cf1c <SD_Witer+0xd44>
 801c898:	49ae      	ldr	r1, [pc, #696]	; (801cb54 <SD_Witer+0x97c>)
 801c89a:	2213      	movs	r2, #19
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801c89c:	48ae      	ldr	r0, [pc, #696]	; (801cb58 <SD_Witer+0x980>)
 801c89e:	f7ec ffe7 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f\t", ELb_Measure); //Lb
 801c8a2:	4bae      	ldr	r3, [pc, #696]	; (801cb5c <SD_Witer+0x984>)
 801c8a4:	6818      	ldr	r0, [r3, #0]
 801c8a6:	f7e3 fe67 	bl	8000578 <__aeabi_f2d>
 801c8aa:	4602      	mov	r2, r0
 801c8ac:	460b      	mov	r3, r1
 801c8ae:	a803      	add	r0, sp, #12
 801c8b0:	49ab      	ldr	r1, [pc, #684]	; (801cb60 <SD_Witer+0x988>)
 801c8b2:	f005 fa75 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c8b6:	220c      	movs	r2, #12
 801c8b8:	eb0d 0102 	add.w	r1, sp, r2
 801c8bc:	4ba4      	ldr	r3, [pc, #656]	; (801cb50 <SD_Witer+0x978>)
 801c8be:	48a6      	ldr	r0, [pc, #664]	; (801cb58 <SD_Witer+0x980>)
 801c8c0:	f7ec ffd6 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);

								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801c8c4:	4ba7      	ldr	r3, [pc, #668]	; (801cb64 <SD_Witer+0x98c>)
								memset(measure_buff, 0, 12);
 801c8c6:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801c8c8:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801c8ca:	9503      	str	r5, [sp, #12]
 801c8cc:	9504      	str	r5, [sp, #16]
 801c8ce:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801c8d0:	f7e3 fe52 	bl	8000578 <__aeabi_f2d>
 801c8d4:	4602      	mov	r2, r0
 801c8d6:	460b      	mov	r3, r1
 801c8d8:	a803      	add	r0, sp, #12
 801c8da:	49a3      	ldr	r1, [pc, #652]	; (801cb68 <SD_Witer+0x990>)
 801c8dc:	f005 fa60 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c8e0:	220c      	movs	r2, #12
 801c8e2:	eb0d 0102 	add.w	r1, sp, r2
 801c8e6:	4b9a      	ldr	r3, [pc, #616]	; (801cb50 <SD_Witer+0x978>)
 801c8e8:	489b      	ldr	r0, [pc, #620]	; (801cb58 <SD_Witer+0x980>)
 801c8ea:	f7ec ffc1 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								
								SDWr_Status_bar = 0.9;
 801c8ee:	a196      	add	r1, pc, #600	; (adr r1, 801cb48 <SD_Witer+0x970>)
 801c8f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c8f4:	4b9d      	ldr	r3, [pc, #628]	; (801cb6c <SD_Witer+0x994>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c8f6:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 801cb70 <SD_Witer+0x998>
								memset(measure_buff, 0, 12);
 801c8fa:	9503      	str	r5, [sp, #12]
								SDWr_Status_bar = 0.9;
 801c8fc:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c900:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c904:	2055      	movs	r0, #85	; 0x55
								memset(measure_buff, 0, 12);
 801c906:	9504      	str	r5, [sp, #16]
 801c908:	9505      	str	r5, [sp, #20]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c90a:	f7f8 fec7 	bl	801569c <GUI_Bar_Measure>
						
							}
							if(CRICQS_done == 0x01)
 801c90e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801c912:	2b01      	cmp	r3, #1
 801c914:	f040 824d 	bne.w	801cdb2 <SD_Witer+0xbda>
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801c918:	4b8d      	ldr	r3, [pc, #564]	; (801cb50 <SD_Witer+0x978>)
 801c91a:	2c00      	cmp	r4, #0
 801c91c:	f040 8407 	bne.w	801d12e <SD_Witer+0xf56>
 801c920:	4994      	ldr	r1, [pc, #592]	; (801cb74 <SD_Witer+0x99c>)
 801c922:	227d      	movs	r2, #125	; 0x7d
 801c924:	488c      	ldr	r0, [pc, #560]	; (801cb58 <SD_Witer+0x980>)
 801c926:	f7ec ffa3 	bl	8009870 <f_write>
								sprintf(measure_buff, "%d\t", 151); //Ra
 801c92a:	2297      	movs	r2, #151	; 0x97
 801c92c:	4992      	ldr	r1, [pc, #584]	; (801cb78 <SD_Witer+0x9a0>)
 801c92e:	a803      	add	r0, sp, #12
 801c930:	f005 fa36 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c934:	220c      	movs	r2, #12
 801c936:	4b86      	ldr	r3, [pc, #536]	; (801cb50 <SD_Witer+0x978>)
 801c938:	4887      	ldr	r0, [pc, #540]	; (801cb58 <SD_Witer+0x980>)
 801c93a:	eb0d 0102 	add.w	r1, sp, r2
								memset(measure_buff, 0, 12);
 801c93e:	2500      	movs	r5, #0
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c940:	f7ec ff96 	bl	8009870 <f_write>
								
								sprintf(measure_buff, "%d", 231); //Rall
 801c944:	22e7      	movs	r2, #231	; 0xe7
 801c946:	498d      	ldr	r1, [pc, #564]	; (801cb7c <SD_Witer+0x9a4>)
								memset(measure_buff, 0, 12);
 801c948:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d", 231); //Rall
 801c94a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801c94c:	9504      	str	r5, [sp, #16]
 801c94e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d", 231); //Rall
 801c950:	f005 fa26 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c954:	220c      	movs	r2, #12
 801c956:	4b7e      	ldr	r3, [pc, #504]	; (801cb50 <SD_Witer+0x978>)
 801c958:	487f      	ldr	r0, [pc, #508]	; (801cb58 <SD_Witer+0x980>)
 801c95a:	eb0d 0102 	add.w	r1, sp, r2
 801c95e:	f7ec ff87 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801c962:	220d      	movs	r2, #13
 801c964:	4986      	ldr	r1, [pc, #536]	; (801cb80 <SD_Witer+0x9a8>)
								memset(measure_buff, 0, 12);
 801c966:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801c968:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801c96a:	9504      	str	r5, [sp, #16]
 801c96c:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801c96e:	f005 fa17 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c972:	220c      	movs	r2, #12
 801c974:	4b76      	ldr	r3, [pc, #472]	; (801cb50 <SD_Witer+0x978>)
 801c976:	4878      	ldr	r0, [pc, #480]	; (801cb58 <SD_Witer+0x980>)
 801c978:	eb0d 0102 	add.w	r1, sp, r2
 801c97c:	f7ec ff78 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 29); //R2
 801c980:	221d      	movs	r2, #29
 801c982:	497d      	ldr	r1, [pc, #500]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801c984:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 29); //R2
 801c986:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801c988:	9504      	str	r5, [sp, #16]
 801c98a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 29); //R2
 801c98c:	f005 fa08 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c990:	220c      	movs	r2, #12
 801c992:	4b6f      	ldr	r3, [pc, #444]	; (801cb50 <SD_Witer+0x978>)
 801c994:	4870      	ldr	r0, [pc, #448]	; (801cb58 <SD_Witer+0x980>)
 801c996:	eb0d 0102 	add.w	r1, sp, r2
 801c99a:	f7ec ff69 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 49); //R3
 801c99e:	2231      	movs	r2, #49	; 0x31
 801c9a0:	4975      	ldr	r1, [pc, #468]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801c9a2:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 49); //R3
 801c9a4:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801c9a6:	9504      	str	r5, [sp, #16]
 801c9a8:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 49); //R3
 801c9aa:	f005 f9f9 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c9ae:	220c      	movs	r2, #12
 801c9b0:	4b67      	ldr	r3, [pc, #412]	; (801cb50 <SD_Witer+0x978>)
 801c9b2:	4869      	ldr	r0, [pc, #420]	; (801cb58 <SD_Witer+0x980>)
 801c9b4:	eb0d 0102 	add.w	r1, sp, r2
 801c9b8:	f7ec ff5a 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 44); //R4
 801c9bc:	222c      	movs	r2, #44	; 0x2c
 801c9be:	496e      	ldr	r1, [pc, #440]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801c9c0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 44); //R4
 801c9c2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801c9c4:	9504      	str	r5, [sp, #16]
 801c9c6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 44); //R4
 801c9c8:	f005 f9ea 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c9cc:	220c      	movs	r2, #12
 801c9ce:	4b60      	ldr	r3, [pc, #384]	; (801cb50 <SD_Witer+0x978>)
 801c9d0:	4861      	ldr	r0, [pc, #388]	; (801cb58 <SD_Witer+0x980>)
 801c9d2:	eb0d 0102 	add.w	r1, sp, r2
 801c9d6:	f7ec ff4b 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 55); //R5
 801c9da:	2237      	movs	r2, #55	; 0x37
 801c9dc:	4966      	ldr	r1, [pc, #408]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801c9de:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 55); //R5
 801c9e0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801c9e2:	9504      	str	r5, [sp, #16]
 801c9e4:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 55); //R5
 801c9e6:	f005 f9db 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c9ea:	220c      	movs	r2, #12
 801c9ec:	4b58      	ldr	r3, [pc, #352]	; (801cb50 <SD_Witer+0x978>)
 801c9ee:	485a      	ldr	r0, [pc, #360]	; (801cb58 <SD_Witer+0x980>)
 801c9f0:	eb0d 0102 	add.w	r1, sp, r2
 801c9f4:	f7ec ff3c 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 68); //R6
 801c9f8:	2244      	movs	r2, #68	; 0x44
 801c9fa:	495f      	ldr	r1, [pc, #380]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801c9fc:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 68); //R6
 801c9fe:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ca00:	9504      	str	r5, [sp, #16]
 801ca02:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 68); //R6
 801ca04:	f005 f9cc 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca08:	220c      	movs	r2, #12
 801ca0a:	4b51      	ldr	r3, [pc, #324]	; (801cb50 <SD_Witer+0x978>)
 801ca0c:	4852      	ldr	r0, [pc, #328]	; (801cb58 <SD_Witer+0x980>)
 801ca0e:	eb0d 0102 	add.w	r1, sp, r2
 801ca12:	f7ec ff2d 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",79); //R7
 801ca16:	224f      	movs	r2, #79	; 0x4f
 801ca18:	4957      	ldr	r1, [pc, #348]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ca1a:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",79); //R7
 801ca1c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ca1e:	9504      	str	r5, [sp, #16]
 801ca20:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",79); //R7
 801ca22:	f005 f9bd 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca26:	220c      	movs	r2, #12
 801ca28:	4b49      	ldr	r3, [pc, #292]	; (801cb50 <SD_Witer+0x978>)
 801ca2a:	484b      	ldr	r0, [pc, #300]	; (801cb58 <SD_Witer+0x980>)
 801ca2c:	eb0d 0102 	add.w	r1, sp, r2
 801ca30:	f7ec ff1e 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",88); //R8
 801ca34:	2258      	movs	r2, #88	; 0x58
 801ca36:	4950      	ldr	r1, [pc, #320]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ca38:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",88); //R8
 801ca3a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ca3c:	9504      	str	r5, [sp, #16]
 801ca3e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",88); //R8
 801ca40:	f005 f9ae 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca44:	220c      	movs	r2, #12
 801ca46:	4b42      	ldr	r3, [pc, #264]	; (801cb50 <SD_Witer+0x978>)
 801ca48:	4843      	ldr	r0, [pc, #268]	; (801cb58 <SD_Witer+0x980>)
 801ca4a:	eb0d 0102 	add.w	r1, sp, r2
 801ca4e:	f7ec ff0f 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",98); //R9
 801ca52:	2262      	movs	r2, #98	; 0x62
 801ca54:	4948      	ldr	r1, [pc, #288]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ca56:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",98); //R9
 801ca58:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ca5a:	9504      	str	r5, [sp, #16]
 801ca5c:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",98); //R9
 801ca5e:	f005 f99f 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca62:	220c      	movs	r2, #12
 801ca64:	4b3a      	ldr	r3, [pc, #232]	; (801cb50 <SD_Witer+0x978>)
 801ca66:	483c      	ldr	r0, [pc, #240]	; (801cb58 <SD_Witer+0x980>)
 801ca68:	eb0d 0102 	add.w	r1, sp, r2
 801ca6c:	f7ec ff00 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 105); //R10
 801ca70:	2269      	movs	r2, #105	; 0x69
 801ca72:	4941      	ldr	r1, [pc, #260]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ca74:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 105); //R10
 801ca76:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ca78:	9504      	str	r5, [sp, #16]
 801ca7a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 105); //R10
 801ca7c:	f005 f990 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca80:	220c      	movs	r2, #12
 801ca82:	4b33      	ldr	r3, [pc, #204]	; (801cb50 <SD_Witer+0x978>)
 801ca84:	4834      	ldr	r0, [pc, #208]	; (801cb58 <SD_Witer+0x980>)
 801ca86:	eb0d 0102 	add.w	r1, sp, r2
 801ca8a:	f7ec fef1 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 112); //R11
 801ca8e:	2270      	movs	r2, #112	; 0x70
 801ca90:	4939      	ldr	r1, [pc, #228]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ca92:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 112); //R11
 801ca94:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ca96:	9504      	str	r5, [sp, #16]
 801ca98:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 112); //R11
 801ca9a:	f005 f981 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca9e:	220c      	movs	r2, #12
 801caa0:	4b2b      	ldr	r3, [pc, #172]	; (801cb50 <SD_Witer+0x978>)
 801caa2:	482d      	ldr	r0, [pc, #180]	; (801cb58 <SD_Witer+0x980>)
 801caa4:	eb0d 0102 	add.w	r1, sp, r2
 801caa8:	f7ec fee2 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 127); //R12
 801caac:	227f      	movs	r2, #127	; 0x7f
 801caae:	4932      	ldr	r1, [pc, #200]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801cab0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 127); //R12
 801cab2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cab4:	9504      	str	r5, [sp, #16]
 801cab6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 127); //R12
 801cab8:	f005 f972 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cabc:	220c      	movs	r2, #12
 801cabe:	4b24      	ldr	r3, [pc, #144]	; (801cb50 <SD_Witer+0x978>)
 801cac0:	4825      	ldr	r0, [pc, #148]	; (801cb58 <SD_Witer+0x980>)
 801cac2:	eb0d 0102 	add.w	r1, sp, r2
 801cac6:	f7ec fed3 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 133); //R13
 801caca:	2285      	movs	r2, #133	; 0x85
 801cacc:	492a      	ldr	r1, [pc, #168]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801cace:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 133); //R13
 801cad0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cad2:	9504      	str	r5, [sp, #16]
 801cad4:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 133); //R13
 801cad6:	f005 f963 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cada:	220c      	movs	r2, #12
 801cadc:	4b1c      	ldr	r3, [pc, #112]	; (801cb50 <SD_Witer+0x978>)
 801cade:	481e      	ldr	r0, [pc, #120]	; (801cb58 <SD_Witer+0x980>)
 801cae0:	eb0d 0102 	add.w	r1, sp, r2
 801cae4:	f7ec fec4 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 148); //R14
 801cae8:	2294      	movs	r2, #148	; 0x94
 801caea:	4923      	ldr	r1, [pc, #140]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801caec:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 148); //R14
 801caee:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801caf0:	9504      	str	r5, [sp, #16]
 801caf2:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 148); //R14
 801caf4:	f005 f954 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801caf8:	220c      	movs	r2, #12
 801cafa:	4b15      	ldr	r3, [pc, #84]	; (801cb50 <SD_Witer+0x978>)
 801cafc:	4816      	ldr	r0, [pc, #88]	; (801cb58 <SD_Witer+0x980>)
 801cafe:	eb0d 0102 	add.w	r1, sp, r2
 801cb02:	f7ec feb5 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 152); //R15
 801cb06:	2298      	movs	r2, #152	; 0x98
 801cb08:	491b      	ldr	r1, [pc, #108]	; (801cb78 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801cb0a:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 152); //R15
 801cb0c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cb0e:	9504      	str	r5, [sp, #16]
 801cb10:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 152); //R15
 801cb12:	f005 f945 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cb16:	220c      	movs	r2, #12
 801cb18:	4b0d      	ldr	r3, [pc, #52]	; (801cb50 <SD_Witer+0x978>)
 801cb1a:	480f      	ldr	r0, [pc, #60]	; (801cb58 <SD_Witer+0x980>)
 801cb1c:	eb0d 0102 	add.w	r1, sp, r2
 801cb20:	f7ec fea6 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801cb24:	9503      	str	r5, [sp, #12]
 801cb26:	9504      	str	r5, [sp, #16]
 801cb28:	9505      	str	r5, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801cb2a:	4b09      	ldr	r3, [pc, #36]	; (801cb50 <SD_Witer+0x978>)
 801cb2c:	2c00      	cmp	r4, #0
 801cb2e:	f040 8302 	bne.w	801d136 <SD_Witer+0xf5e>
 801cb32:	4914      	ldr	r1, [pc, #80]	; (801cb84 <SD_Witer+0x9ac>)
 801cb34:	227f      	movs	r2, #127	; 0x7f
 801cb36:	4808      	ldr	r0, [pc, #32]	; (801cb58 <SD_Witer+0x980>)
								
								sprintf(measure_buff, "%d", Qf); //Qf
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801cb38:	4d13      	ldr	r5, [pc, #76]	; (801cb88 <SD_Witer+0x9b0>)
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801cb3a:	f7ec fe99 	bl	8009870 <f_write>
								sprintf(measure_buff, "%d\t", Qa); //Qa
 801cb3e:	4b13      	ldr	r3, [pc, #76]	; (801cb8c <SD_Witer+0x9b4>)
 801cb40:	e026      	b.n	801cb90 <SD_Witer+0x9b8>
 801cb42:	bf00      	nop
 801cb44:	f3af 8000 	nop.w
 801cb48:	cccccccd 	.word	0xcccccccd
 801cb4c:	3feccccc 	.word	0x3feccccc
 801cb50:	2008ce58 	.word	0x2008ce58
 801cb54:	200004fa 	.word	0x200004fa
 801cb58:	2008deb0 	.word	0x2008deb0
 801cb5c:	20091504 	.word	0x20091504
 801cb60:	08033847 	.word	0x08033847
 801cb64:	20091508 	.word	0x20091508
 801cb68:	080337f2 	.word	0x080337f2
 801cb6c:	200052d0 	.word	0x200052d0
 801cb70:	3f666666 	.word	0x3f666666
 801cb74:	200003b2 	.word	0x200003b2
 801cb78:	0803384e 	.word	0x0803384e
 801cb7c:	08026a11 	.word	0x08026a11
 801cb80:	0803384d 	.word	0x0803384d
 801cb84:	200002c8 	.word	0x200002c8
 801cb88:	2000319c 	.word	0x2000319c
 801cb8c:	200031ab 	.word	0x200031ab
 801cb90:	49a8      	ldr	r1, [pc, #672]	; (801ce34 <SD_Witer+0xc5c>)
 801cb92:	781a      	ldrb	r2, [r3, #0]
 801cb94:	a803      	add	r0, sp, #12
 801cb96:	f005 f903 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cb9a:	220c      	movs	r2, #12
 801cb9c:	eb0d 0102 	add.w	r1, sp, r2
 801cba0:	4ba5      	ldr	r3, [pc, #660]	; (801ce38 <SD_Witer+0xc60>)
 801cba2:	48a6      	ldr	r0, [pc, #664]	; (801ce3c <SD_Witer+0xc64>)
 801cba4:	f7ec fe64 	bl	8009870 <f_write>
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801cba8:	4ba5      	ldr	r3, [pc, #660]	; (801ce40 <SD_Witer+0xc68>)
 801cbaa:	49a2      	ldr	r1, [pc, #648]	; (801ce34 <SD_Witer+0xc5c>)
 801cbac:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801cbae:	2400      	movs	r4, #0
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801cbb0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cbb2:	9403      	str	r4, [sp, #12]
 801cbb4:	9404      	str	r4, [sp, #16]
 801cbb6:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801cbb8:	f005 f8f2 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cbbc:	220c      	movs	r2, #12
 801cbbe:	eb0d 0102 	add.w	r1, sp, r2
 801cbc2:	4b9d      	ldr	r3, [pc, #628]	; (801ce38 <SD_Witer+0xc60>)
 801cbc4:	489d      	ldr	r0, [pc, #628]	; (801ce3c <SD_Witer+0xc64>)
 801cbc6:	f7ec fe53 	bl	8009870 <f_write>
								sprintf(measure_buff, "%d", Qf); //Qf
 801cbca:	4b9e      	ldr	r3, [pc, #632]	; (801ce44 <SD_Witer+0xc6c>)
 801cbcc:	499e      	ldr	r1, [pc, #632]	; (801ce48 <SD_Witer+0xc70>)
 801cbce:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801cbd0:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d", Qf); //Qf
 801cbd2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cbd4:	9404      	str	r4, [sp, #16]
 801cbd6:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d", Qf); //Qf
 801cbd8:	f005 f8e2 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cbdc:	220c      	movs	r2, #12
 801cbde:	4b96      	ldr	r3, [pc, #600]	; (801ce38 <SD_Witer+0xc60>)
 801cbe0:	4896      	ldr	r0, [pc, #600]	; (801ce3c <SD_Witer+0xc64>)
 801cbe2:	eb0d 0102 	add.w	r1, sp, r2
 801cbe6:	f7ec fe43 	bl	8009870 <f_write>
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801cbea:	782a      	ldrb	r2, [r5, #0]
 801cbec:	4997      	ldr	r1, [pc, #604]	; (801ce4c <SD_Witer+0xc74>)
								memset(measure_buff, 0, 12);
 801cbee:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801cbf0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cbf2:	9404      	str	r4, [sp, #16]
 801cbf4:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801cbf6:	f005 f8d3 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cbfa:	220c      	movs	r2, #12
 801cbfc:	4b8e      	ldr	r3, [pc, #568]	; (801ce38 <SD_Witer+0xc60>)
 801cbfe:	488f      	ldr	r0, [pc, #572]	; (801ce3c <SD_Witer+0xc64>)
 801cc00:	eb0d 0102 	add.w	r1, sp, r2
 801cc04:	f7ec fe34 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801cc08:	786a      	ldrb	r2, [r5, #1]
 801cc0a:	498a      	ldr	r1, [pc, #552]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cc0c:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801cc0e:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cc10:	9404      	str	r4, [sp, #16]
 801cc12:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801cc14:	f005 f8c4 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cc18:	220c      	movs	r2, #12
 801cc1a:	4b87      	ldr	r3, [pc, #540]	; (801ce38 <SD_Witer+0xc60>)
 801cc1c:	4887      	ldr	r0, [pc, #540]	; (801ce3c <SD_Witer+0xc64>)
 801cc1e:	eb0d 0102 	add.w	r1, sp, r2
 801cc22:	f7ec fe25 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801cc26:	78aa      	ldrb	r2, [r5, #2]
 801cc28:	4982      	ldr	r1, [pc, #520]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cc2a:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801cc2c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cc2e:	9404      	str	r4, [sp, #16]
 801cc30:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801cc32:	f005 f8b5 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cc36:	220c      	movs	r2, #12
 801cc38:	4b7f      	ldr	r3, [pc, #508]	; (801ce38 <SD_Witer+0xc60>)
 801cc3a:	4880      	ldr	r0, [pc, #512]	; (801ce3c <SD_Witer+0xc64>)
 801cc3c:	eb0d 0102 	add.w	r1, sp, r2
 801cc40:	f7ec fe16 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801cc44:	78ea      	ldrb	r2, [r5, #3]
 801cc46:	497b      	ldr	r1, [pc, #492]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cc48:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801cc4a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cc4c:	9404      	str	r4, [sp, #16]
 801cc4e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801cc50:	f005 f8a6 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cc54:	220c      	movs	r2, #12
 801cc56:	4b78      	ldr	r3, [pc, #480]	; (801ce38 <SD_Witer+0xc60>)
 801cc58:	4878      	ldr	r0, [pc, #480]	; (801ce3c <SD_Witer+0xc64>)
 801cc5a:	eb0d 0102 	add.w	r1, sp, r2
 801cc5e:	f7ec fe07 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801cc62:	792a      	ldrb	r2, [r5, #4]
 801cc64:	4973      	ldr	r1, [pc, #460]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cc66:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801cc68:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cc6a:	9404      	str	r4, [sp, #16]
 801cc6c:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801cc6e:	f005 f897 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cc72:	220c      	movs	r2, #12
 801cc74:	4b70      	ldr	r3, [pc, #448]	; (801ce38 <SD_Witer+0xc60>)
 801cc76:	4871      	ldr	r0, [pc, #452]	; (801ce3c <SD_Witer+0xc64>)
 801cc78:	eb0d 0102 	add.w	r1, sp, r2
 801cc7c:	f7ec fdf8 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801cc80:	796a      	ldrb	r2, [r5, #5]
 801cc82:	496c      	ldr	r1, [pc, #432]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cc84:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801cc86:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cc88:	9404      	str	r4, [sp, #16]
 801cc8a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801cc8c:	f005 f888 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cc90:	220c      	movs	r2, #12
 801cc92:	4b69      	ldr	r3, [pc, #420]	; (801ce38 <SD_Witer+0xc60>)
 801cc94:	4869      	ldr	r0, [pc, #420]	; (801ce3c <SD_Witer+0xc64>)
 801cc96:	eb0d 0102 	add.w	r1, sp, r2
 801cc9a:	f7ec fde9 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801cc9e:	79aa      	ldrb	r2, [r5, #6]
 801cca0:	4964      	ldr	r1, [pc, #400]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cca2:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801cca4:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cca6:	9404      	str	r4, [sp, #16]
 801cca8:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801ccaa:	f005 f879 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ccae:	220c      	movs	r2, #12
 801ccb0:	4b61      	ldr	r3, [pc, #388]	; (801ce38 <SD_Witer+0xc60>)
 801ccb2:	4862      	ldr	r0, [pc, #392]	; (801ce3c <SD_Witer+0xc64>)
 801ccb4:	eb0d 0102 	add.w	r1, sp, r2
 801ccb8:	f7ec fdda 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801ccbc:	79ea      	ldrb	r2, [r5, #7]
 801ccbe:	495d      	ldr	r1, [pc, #372]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ccc0:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801ccc2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ccc4:	9404      	str	r4, [sp, #16]
 801ccc6:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801ccc8:	f005 f86a 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cccc:	220c      	movs	r2, #12
 801ccce:	4b5a      	ldr	r3, [pc, #360]	; (801ce38 <SD_Witer+0xc60>)
 801ccd0:	485a      	ldr	r0, [pc, #360]	; (801ce3c <SD_Witer+0xc64>)
 801ccd2:	eb0d 0102 	add.w	r1, sp, r2
 801ccd6:	f7ec fdcb 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801ccda:	7a2a      	ldrb	r2, [r5, #8]
 801ccdc:	4955      	ldr	r1, [pc, #340]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ccde:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801cce0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cce2:	9404      	str	r4, [sp, #16]
 801cce4:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801cce6:	f005 f85b 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ccea:	220c      	movs	r2, #12
 801ccec:	4b52      	ldr	r3, [pc, #328]	; (801ce38 <SD_Witer+0xc60>)
 801ccee:	4853      	ldr	r0, [pc, #332]	; (801ce3c <SD_Witer+0xc64>)
 801ccf0:	eb0d 0102 	add.w	r1, sp, r2
 801ccf4:	f7ec fdbc 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801ccf8:	7a6a      	ldrb	r2, [r5, #9]
 801ccfa:	494e      	ldr	r1, [pc, #312]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ccfc:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801ccfe:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cd00:	9404      	str	r4, [sp, #16]
 801cd02:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801cd04:	f005 f84c 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd08:	220c      	movs	r2, #12
 801cd0a:	4b4b      	ldr	r3, [pc, #300]	; (801ce38 <SD_Witer+0xc60>)
 801cd0c:	484b      	ldr	r0, [pc, #300]	; (801ce3c <SD_Witer+0xc64>)
 801cd0e:	eb0d 0102 	add.w	r1, sp, r2
 801cd12:	f7ec fdad 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801cd16:	7aaa      	ldrb	r2, [r5, #10]
 801cd18:	4946      	ldr	r1, [pc, #280]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cd1a:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801cd1c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cd1e:	9404      	str	r4, [sp, #16]
 801cd20:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801cd22:	f005 f83d 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd26:	220c      	movs	r2, #12
 801cd28:	4b43      	ldr	r3, [pc, #268]	; (801ce38 <SD_Witer+0xc60>)
 801cd2a:	4844      	ldr	r0, [pc, #272]	; (801ce3c <SD_Witer+0xc64>)
 801cd2c:	eb0d 0102 	add.w	r1, sp, r2
 801cd30:	f7ec fd9e 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801cd34:	7aea      	ldrb	r2, [r5, #11]
 801cd36:	493f      	ldr	r1, [pc, #252]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cd38:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801cd3a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cd3c:	9404      	str	r4, [sp, #16]
 801cd3e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801cd40:	f005 f82e 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd44:	220c      	movs	r2, #12
 801cd46:	4b3c      	ldr	r3, [pc, #240]	; (801ce38 <SD_Witer+0xc60>)
 801cd48:	483c      	ldr	r0, [pc, #240]	; (801ce3c <SD_Witer+0xc64>)
 801cd4a:	eb0d 0102 	add.w	r1, sp, r2
 801cd4e:	f7ec fd8f 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801cd52:	7b2a      	ldrb	r2, [r5, #12]
 801cd54:	4937      	ldr	r1, [pc, #220]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cd56:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801cd58:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cd5a:	9404      	str	r4, [sp, #16]
 801cd5c:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801cd5e:	f005 f81f 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd62:	220c      	movs	r2, #12
 801cd64:	4b34      	ldr	r3, [pc, #208]	; (801ce38 <SD_Witer+0xc60>)
 801cd66:	4835      	ldr	r0, [pc, #212]	; (801ce3c <SD_Witer+0xc64>)
 801cd68:	eb0d 0102 	add.w	r1, sp, r2
 801cd6c:	f7ec fd80 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801cd70:	7b6a      	ldrb	r2, [r5, #13]
 801cd72:	4930      	ldr	r1, [pc, #192]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cd74:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801cd76:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cd78:	9404      	str	r4, [sp, #16]
 801cd7a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801cd7c:	f005 f810 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd80:	220c      	movs	r2, #12
 801cd82:	4b2d      	ldr	r3, [pc, #180]	; (801ce38 <SD_Witer+0xc60>)
 801cd84:	482d      	ldr	r0, [pc, #180]	; (801ce3c <SD_Witer+0xc64>)
 801cd86:	eb0d 0102 	add.w	r1, sp, r2
 801cd8a:	f7ec fd71 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801cd8e:	7baa      	ldrb	r2, [r5, #14]
 801cd90:	4928      	ldr	r1, [pc, #160]	; (801ce34 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cd92:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801cd94:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cd96:	9404      	str	r4, [sp, #16]
 801cd98:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801cd9a:	f005 f801 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd9e:	220c      	movs	r2, #12
 801cda0:	4b25      	ldr	r3, [pc, #148]	; (801ce38 <SD_Witer+0xc60>)
 801cda2:	4826      	ldr	r0, [pc, #152]	; (801ce3c <SD_Witer+0xc64>)
 801cda4:	eb0d 0102 	add.w	r1, sp, r2
 801cda8:	f7ec fd62 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801cdac:	9403      	str	r4, [sp, #12]
 801cdae:	9404      	str	r4, [sp, #16]
 801cdb0:	9405      	str	r4, [sp, #20]
							}
					}
				}
				
			
				f_close(&MyFile);
 801cdb2:	4822      	ldr	r0, [pc, #136]	; (801ce3c <SD_Witer+0xc64>)
 801cdb4:	f7ec fe7a 	bl	8009aac <f_close>
				memset(buffer_sd, 0, 11);
 801cdb8:	2200      	movs	r2, #0
				
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801cdba:	4925      	ldr	r1, [pc, #148]	; (801ce50 <SD_Witer+0xc78>)
 801cdbc:	4825      	ldr	r0, [pc, #148]	; (801ce54 <SD_Witer+0xc7c>)
				memset(buffer_sd, 0, 11);
 801cdbe:	6072      	str	r2, [r6, #4]
 801cdc0:	6032      	str	r2, [r6, #0]
 801cdc2:	f8c6 2007 	str.w	r2, [r6, #7]
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801cdc6:	f7ec fc09 	bl	80095dc <f_mount>
 801cdca:	4b23      	ldr	r3, [pc, #140]	; (801ce58 <SD_Witer+0xc80>)
				SDWr_Status_bar = 1.0;
 801cdcc:	4923      	ldr	r1, [pc, #140]	; (801ce5c <SD_Witer+0xc84>)
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801cdce:	7018      	strb	r0, [r3, #0]
				SDWr_Status_bar = 1.0;
 801cdd0:	4b23      	ldr	r3, [pc, #140]	; (801ce60 <SD_Witer+0xc88>)
 801cdd2:	2000      	movs	r0, #0
 801cdd4:	e9c3 0100 	strd	r0, r1, [r3]
				GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801cdd8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801cddc:	f44f 718c 	mov.w	r1, #280	; 0x118
 801cde0:	2055      	movs	r0, #85	; 0x55
 801cde2:	f7f8 fc5b 	bl	801569c <GUI_Bar_Measure>
	}
 801cde6:	b007      	add	sp, #28
 801cde8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801cdec:	491d      	ldr	r1, [pc, #116]	; (801ce64 <SD_Witer+0xc8c>)
 801cdee:	f7ff ba10 	b.w	801c212 <SD_Witer+0x3a>
 801cdf2:	491d      	ldr	r1, [pc, #116]	; (801ce68 <SD_Witer+0xc90>)
 801cdf4:	f7ff ba0d 	b.w	801c212 <SD_Witer+0x3a>
 801cdf8:	491c      	ldr	r1, [pc, #112]	; (801ce6c <SD_Witer+0xc94>)
 801cdfa:	f7ff ba0a 	b.w	801c212 <SD_Witer+0x3a>
 801cdfe:	491c      	ldr	r1, [pc, #112]	; (801ce70 <SD_Witer+0xc98>)
 801ce00:	f7ff ba07 	b.w	801c212 <SD_Witer+0x3a>
 801ce04:	491b      	ldr	r1, [pc, #108]	; (801ce74 <SD_Witer+0xc9c>)
 801ce06:	f7ff ba04 	b.w	801c212 <SD_Witer+0x3a>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801ce0a:	221e      	movs	r2, #30
 801ce0c:	491a      	ldr	r1, [pc, #104]	; (801ce78 <SD_Witer+0xca0>)
 801ce0e:	f7ff ba3a 	b.w	801c286 <SD_Witer+0xae>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801ce12:	2212      	movs	r2, #18
 801ce14:	4919      	ldr	r1, [pc, #100]	; (801ce7c <SD_Witer+0xca4>)
 801ce16:	f7ff ba54 	b.w	801c2c2 <SD_Witer+0xea>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801ce1a:	2212      	movs	r2, #18
 801ce1c:	4918      	ldr	r1, [pc, #96]	; (801ce80 <SD_Witer+0xca8>)
 801ce1e:	f7ff ba8c 	b.w	801c33a <SD_Witer+0x162>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801ce22:	2214      	movs	r2, #20
 801ce24:	4917      	ldr	r1, [pc, #92]	; (801ce84 <SD_Witer+0xcac>)
 801ce26:	f7ff babc 	b.w	801c3a2 <SD_Witer+0x1ca>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801ce2a:	2209      	movs	r2, #9
 801ce2c:	4916      	ldr	r1, [pc, #88]	; (801ce88 <SD_Witer+0xcb0>)
 801ce2e:	f7ff baec 	b.w	801c40a <SD_Witer+0x232>
 801ce32:	bf00      	nop
 801ce34:	0803384e 	.word	0x0803384e
 801ce38:	2008ce58 	.word	0x2008ce58
 801ce3c:	2008deb0 	.word	0x2008deb0
 801ce40:	200031ad 	.word	0x200031ad
 801ce44:	200031ac 	.word	0x200031ac
 801ce48:	08026a11 	.word	0x08026a11
 801ce4c:	0803384d 	.word	0x0803384d
 801ce50:	2008eee5 	.word	0x2008eee5
 801ce54:	2008ce60 	.word	0x2008ce60
 801ce58:	2008eee0 	.word	0x2008eee0
 801ce5c:	3ff00000 	.word	0x3ff00000
 801ce60:	200052d0 	.word	0x200052d0
 801ce64:	08033952 	.word	0x08033952
 801ce68:	0803380d 	.word	0x0803380d
 801ce6c:	08033811 	.word	0x08033811
 801ce70:	08033813 	.word	0x08033813
 801ce74:	08033817 	.word	0x08033817
 801ce78:	2000090a 	.word	0x2000090a
 801ce7c:	2000042f 	.word	0x2000042f
 801ce80:	200004ab 	.word	0x200004ab
 801ce84:	20000467 	.word	0x20000467
 801ce88:	20000246 	.word	0x20000246
										sprintf(measure_buff, "%.d", Tc_Measure);
 801ce8c:	49ab      	ldr	r1, [pc, #684]	; (801d13c <SD_Witer+0xf64>)
 801ce8e:	a803      	add	r0, sp, #12
 801ce90:	f004 ff86 	bl	8021da0 <sprintf>
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ce94:	220c      	movs	r2, #12
 801ce96:	4baa      	ldr	r3, [pc, #680]	; (801d140 <SD_Witer+0xf68>)
 801ce98:	48aa      	ldr	r0, [pc, #680]	; (801d144 <SD_Witer+0xf6c>)
 801ce9a:	eb0d 0102 	add.w	r1, sp, r2
 801ce9e:	f7ec fce7 	bl	8009870 <f_write>
										memset(measure_buff, 0, 12);
 801cea2:	2300      	movs	r3, #0
 801cea4:	9303      	str	r3, [sp, #12]
 801cea6:	9304      	str	r3, [sp, #16]
 801cea8:	9305      	str	r3, [sp, #20]
 801ceaa:	f7ff babe 	b.w	801c42a <SD_Witer+0x252>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801ceae:	2215      	movs	r2, #21
 801ceb0:	49a5      	ldr	r1, [pc, #660]	; (801d148 <SD_Witer+0xf70>)
 801ceb2:	f7ff bacd 	b.w	801c450 <SD_Witer+0x278>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801ceb6:	2213      	movs	r2, #19
 801ceb8:	49a4      	ldr	r1, [pc, #656]	; (801d14c <SD_Witer+0xf74>)
 801ceba:	f7ff bb46 	b.w	801c54a <SD_Witer+0x372>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801cebe:	221a      	movs	r2, #26
 801cec0:	49a3      	ldr	r1, [pc, #652]	; (801d150 <SD_Witer+0xf78>)
 801cec2:	f7ff bb51 	b.w	801c568 <SD_Witer+0x390>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801cec6:	221f      	movs	r2, #31
 801cec8:	49a2      	ldr	r1, [pc, #648]	; (801d154 <SD_Witer+0xf7c>)
 801ceca:	f7ff bb67 	b.w	801c59c <SD_Witer+0x3c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801cece:	2213      	movs	r2, #19
 801ced0:	49a1      	ldr	r1, [pc, #644]	; (801d158 <SD_Witer+0xf80>)
 801ced2:	f7ff bb81 	b.w	801c5d8 <SD_Witer+0x400>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801ced6:	b964      	cbnz	r4, 801cef2 <SD_Witer+0xd1a>
 801ced8:	49a0      	ldr	r1, [pc, #640]	; (801d15c <SD_Witer+0xf84>)
 801ceda:	2224      	movs	r2, #36	; 0x24
 801cedc:	4899      	ldr	r0, [pc, #612]	; (801d144 <SD_Witer+0xf6c>)
 801cede:	f7ec fcc7 	bl	8009870 <f_write>
								f_write(&MyFile, "NAN", 3, &byteswritten);
 801cee2:	4b97      	ldr	r3, [pc, #604]	; (801d140 <SD_Witer+0xf68>)
 801cee4:	499e      	ldr	r1, [pc, #632]	; (801d160 <SD_Witer+0xf88>)
 801cee6:	4897      	ldr	r0, [pc, #604]	; (801d144 <SD_Witer+0xf6c>)
 801cee8:	2203      	movs	r2, #3
 801ceea:	f7ec fcc1 	bl	8009870 <f_write>
 801ceee:	f7ff bb88 	b.w	801c602 <SD_Witer+0x42a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801cef2:	2213      	movs	r2, #19
 801cef4:	4998      	ldr	r1, [pc, #608]	; (801d158 <SD_Witer+0xf80>)
 801cef6:	e7f1      	b.n	801cedc <SD_Witer+0xd04>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801cef8:	2225      	movs	r2, #37	; 0x25
 801cefa:	499a      	ldr	r1, [pc, #616]	; (801d164 <SD_Witer+0xf8c>)
 801cefc:	f7ff bb99 	b.w	801c632 <SD_Witer+0x45a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801cf00:	2212      	movs	r2, #18
 801cf02:	4999      	ldr	r1, [pc, #612]	; (801d168 <SD_Witer+0xf90>)
 801cf04:	f7ff bbd0 	b.w	801c6a8 <SD_Witer+0x4d0>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801cf08:	2212      	movs	r2, #18
 801cf0a:	4998      	ldr	r1, [pc, #608]	; (801d16c <SD_Witer+0xf94>)
 801cf0c:	f7ff bbea 	b.w	801c6e4 <SD_Witer+0x50c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801cf10:	2213      	movs	r2, #19
 801cf12:	4997      	ldr	r1, [pc, #604]	; (801d170 <SD_Witer+0xf98>)
 801cf14:	e404      	b.n	801c720 <SD_Witer+0x548>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801cf16:	221e      	movs	r2, #30
 801cf18:	4996      	ldr	r1, [pc, #600]	; (801d174 <SD_Witer+0xf9c>)
 801cf1a:	e41f      	b.n	801c75c <SD_Witer+0x584>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801cf1c:	220f      	movs	r2, #15
 801cf1e:	4996      	ldr	r1, [pc, #600]	; (801d178 <SD_Witer+0xfa0>)
 801cf20:	e4bc      	b.n	801c89c <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801cf22:	2c00      	cmp	r4, #0
 801cf24:	f040 80f0 	bne.w	801d108 <SD_Witer+0xf30>
 801cf28:	4994      	ldr	r1, [pc, #592]	; (801d17c <SD_Witer+0xfa4>)
 801cf2a:	2276      	movs	r2, #118	; 0x76
 801cf2c:	4885      	ldr	r0, [pc, #532]	; (801d144 <SD_Witer+0xf6c>)
 801cf2e:	4f94      	ldr	r7, [pc, #592]	; (801d180 <SD_Witer+0xfa8>)
 801cf30:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 801d1e8 <SD_Witer+0x1010>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cf34:	f8df a208 	ldr.w	sl, [pc, #520]	; 801d140 <SD_Witer+0xf68>
 801cf38:	f8df 9208 	ldr.w	r9, [pc, #520]	; 801d144 <SD_Witer+0xf6c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801cf3c:	f7ec fc98 	bl	8009870 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //L(lambda)
 801cf40:	f857 0b04 	ldr.w	r0, [r7], #4
 801cf44:	f7e3 fb18 	bl	8000578 <__aeabi_f2d>
 801cf48:	4602      	mov	r2, r0
 801cf4a:	460b      	mov	r3, r1
 801cf4c:	a803      	add	r0, sp, #12
 801cf4e:	498d      	ldr	r1, [pc, #564]	; (801d184 <SD_Witer+0xfac>)
 801cf50:	f004 ff26 	bl	8021da0 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cf54:	220c      	movs	r2, #12
 801cf56:	4653      	mov	r3, sl
 801cf58:	eb0d 0102 	add.w	r1, sp, r2
 801cf5c:	4648      	mov	r0, r9
 801cf5e:	f7ec fc87 	bl	8009870 <f_write>
									memset(measure_buff, 0, 12);
 801cf62:	2500      	movs	r5, #0
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801cf64:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801cf68:	9503      	str	r5, [sp, #12]
 801cf6a:	9504      	str	r5, [sp, #16]
 801cf6c:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801cf6e:	f7e3 fb03 	bl	8000578 <__aeabi_f2d>
 801cf72:	4602      	mov	r2, r0
 801cf74:	460b      	mov	r3, r1
 801cf76:	a803      	add	r0, sp, #12
 801cf78:	4983      	ldr	r1, [pc, #524]	; (801d188 <SD_Witer+0xfb0>)
 801cf7a:	f004 ff11 	bl	8021da0 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cf7e:	220c      	movs	r2, #12
 801cf80:	4653      	mov	r3, sl
 801cf82:	eb0d 0102 	add.w	r1, sp, r2
 801cf86:	4648      	mov	r0, r9
 801cf88:	f7ec fc72 	bl	8009870 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801cf8c:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801cf8e:	9503      	str	r5, [sp, #12]
 801cf90:	9504      	str	r5, [sp, #16]
 801cf92:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801cf94:	d1d4      	bne.n	801cf40 <SD_Witer+0xd68>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801cf96:	4b6a      	ldr	r3, [pc, #424]	; (801d140 <SD_Witer+0xf68>)
 801cf98:	2c00      	cmp	r4, #0
 801cf9a:	f040 80b8 	bne.w	801d10e <SD_Witer+0xf36>
 801cf9e:	497b      	ldr	r1, [pc, #492]	; (801d18c <SD_Witer+0xfb4>)
 801cfa0:	223f      	movs	r2, #63	; 0x3f
 801cfa2:	4868      	ldr	r0, [pc, #416]	; (801d144 <SD_Witer+0xf6c>)
 801cfa4:	f7ec fc64 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f", E_day); //Le
 801cfa8:	4b79      	ldr	r3, [pc, #484]	; (801d190 <SD_Witer+0xfb8>)
 801cfaa:	6818      	ldr	r0, [r3, #0]
 801cfac:	f7e3 fae4 	bl	8000578 <__aeabi_f2d>
 801cfb0:	4602      	mov	r2, r0
 801cfb2:	460b      	mov	r3, r1
 801cfb4:	a803      	add	r0, sp, #12
 801cfb6:	4977      	ldr	r1, [pc, #476]	; (801d194 <SD_Witer+0xfbc>)
 801cfb8:	f004 fef2 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cfbc:	220c      	movs	r2, #12
 801cfbe:	4b60      	ldr	r3, [pc, #384]	; (801d140 <SD_Witer+0xf68>)
 801cfc0:	4860      	ldr	r0, [pc, #384]	; (801d144 <SD_Witer+0xf6c>)
 801cfc2:	eb0d 0102 	add.w	r1, sp, r2
 801cfc6:	f7ec fc53 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801cfca:	2300      	movs	r3, #0
 801cfcc:	9303      	str	r3, [sp, #12]
 801cfce:	9304      	str	r3, [sp, #16]
 801cfd0:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801cfd2:	4b5b      	ldr	r3, [pc, #364]	; (801d140 <SD_Witer+0xf68>)
 801cfd4:	2c00      	cmp	r4, #0
 801cfd6:	f040 809d 	bne.w	801d114 <SD_Witer+0xf3c>
 801cfda:	496f      	ldr	r1, [pc, #444]	; (801d198 <SD_Witer+0xfc0>)
 801cfdc:	221b      	movs	r2, #27
 801cfde:	4859      	ldr	r0, [pc, #356]	; (801d144 <SD_Witer+0xf6c>)
 801cfe0:	f7ec fc46 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.1f", E_day_Wt); //Lu
 801cfe4:	4b6d      	ldr	r3, [pc, #436]	; (801d19c <SD_Witer+0xfc4>)
 801cfe6:	6818      	ldr	r0, [r3, #0]
 801cfe8:	f7e3 fac6 	bl	8000578 <__aeabi_f2d>
 801cfec:	4602      	mov	r2, r0
 801cfee:	460b      	mov	r3, r1
 801cff0:	a803      	add	r0, sp, #12
 801cff2:	496b      	ldr	r1, [pc, #428]	; (801d1a0 <SD_Witer+0xfc8>)
 801cff4:	f004 fed4 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cff8:	220c      	movs	r2, #12
 801cffa:	4b51      	ldr	r3, [pc, #324]	; (801d140 <SD_Witer+0xf68>)
 801cffc:	4851      	ldr	r0, [pc, #324]	; (801d144 <SD_Witer+0xf6c>)
 801cffe:	eb0d 0102 	add.w	r1, sp, r2
 801d002:	f7ec fc35 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801d006:	2300      	movs	r3, #0
 801d008:	9303      	str	r3, [sp, #12]
 801d00a:	9304      	str	r3, [sp, #16]
 801d00c:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801d00e:	4b4c      	ldr	r3, [pc, #304]	; (801d140 <SD_Witer+0xf68>)
 801d010:	2c00      	cmp	r4, #0
 801d012:	f040 8082 	bne.w	801d11a <SD_Witer+0xf42>
 801d016:	4963      	ldr	r1, [pc, #396]	; (801d1a4 <SD_Witer+0xfcc>)
 801d018:	2227      	movs	r2, #39	; 0x27
 801d01a:	484a      	ldr	r0, [pc, #296]	; (801d144 <SD_Witer+0xf6c>)
 801d01c:	f7ec fc28 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPL
 801d020:	4b61      	ldr	r3, [pc, #388]	; (801d1a8 <SD_Witer+0xfd0>)
 801d022:	6818      	ldr	r0, [r3, #0]
 801d024:	f7e3 faa8 	bl	8000578 <__aeabi_f2d>
 801d028:	4602      	mov	r2, r0
 801d02a:	460b      	mov	r3, r1
 801d02c:	a803      	add	r0, sp, #12
 801d02e:	4959      	ldr	r1, [pc, #356]	; (801d194 <SD_Witer+0xfbc>)
 801d030:	f004 feb6 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d034:	220c      	movs	r2, #12
 801d036:	4b42      	ldr	r3, [pc, #264]	; (801d140 <SD_Witer+0xf68>)
 801d038:	4842      	ldr	r0, [pc, #264]	; (801d144 <SD_Witer+0xf6c>)
 801d03a:	eb0d 0102 	add.w	r1, sp, r2
 801d03e:	f7ec fc17 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801d042:	2300      	movs	r3, #0
 801d044:	9303      	str	r3, [sp, #12]
 801d046:	9304      	str	r3, [sp, #16]
 801d048:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801d04a:	4b3d      	ldr	r3, [pc, #244]	; (801d140 <SD_Witer+0xf68>)
 801d04c:	2c00      	cmp	r4, #0
 801d04e:	d167      	bne.n	801d120 <SD_Witer+0xf48>
 801d050:	4956      	ldr	r1, [pc, #344]	; (801d1ac <SD_Witer+0xfd4>)
 801d052:	223d      	movs	r2, #61	; 0x3d
 801d054:	483b      	ldr	r0, [pc, #236]	; (801d144 <SD_Witer+0xf6c>)
 801d056:	f7ec fc0b 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPL B
 801d05a:	4b55      	ldr	r3, [pc, #340]	; (801d1b0 <SD_Witer+0xfd8>)
 801d05c:	6818      	ldr	r0, [r3, #0]
 801d05e:	f7e3 fa8b 	bl	8000578 <__aeabi_f2d>
 801d062:	4602      	mov	r2, r0
 801d064:	460b      	mov	r3, r1
 801d066:	a803      	add	r0, sp, #12
 801d068:	4952      	ldr	r1, [pc, #328]	; (801d1b4 <SD_Witer+0xfdc>)
 801d06a:	f004 fe99 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d06e:	220c      	movs	r2, #12
 801d070:	eb0d 0102 	add.w	r1, sp, r2
 801d074:	4b32      	ldr	r3, [pc, #200]	; (801d140 <SD_Witer+0xf68>)
 801d076:	4833      	ldr	r0, [pc, #204]	; (801d144 <SD_Witer+0xf6c>)
 801d078:	f7ec fbfa 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801d07c:	4b4e      	ldr	r3, [pc, #312]	; (801d1b8 <SD_Witer+0xfe0>)
								memset(measure_buff, 0, 12);
 801d07e:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801d080:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801d082:	9503      	str	r5, [sp, #12]
 801d084:	9504      	str	r5, [sp, #16]
 801d086:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801d088:	f7e3 fa76 	bl	8000578 <__aeabi_f2d>
 801d08c:	4602      	mov	r2, r0
 801d08e:	460b      	mov	r3, r1
 801d090:	a803      	add	r0, sp, #12
 801d092:	4948      	ldr	r1, [pc, #288]	; (801d1b4 <SD_Witer+0xfdc>)
 801d094:	f004 fe84 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d098:	220c      	movs	r2, #12
 801d09a:	eb0d 0102 	add.w	r1, sp, r2
 801d09e:	4b28      	ldr	r3, [pc, #160]	; (801d140 <SD_Witer+0xf68>)
 801d0a0:	4828      	ldr	r0, [pc, #160]	; (801d144 <SD_Witer+0xf6c>)
 801d0a2:	f7ec fbe5 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801d0a6:	4b45      	ldr	r3, [pc, #276]	; (801d1bc <SD_Witer+0xfe4>)
								memset(measure_buff, 0, 12);
 801d0a8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801d0aa:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801d0ac:	9504      	str	r5, [sp, #16]
 801d0ae:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801d0b0:	f7e3 fa62 	bl	8000578 <__aeabi_f2d>
 801d0b4:	4602      	mov	r2, r0
 801d0b6:	460b      	mov	r3, r1
 801d0b8:	a803      	add	r0, sp, #12
 801d0ba:	493e      	ldr	r1, [pc, #248]	; (801d1b4 <SD_Witer+0xfdc>)
 801d0bc:	f004 fe70 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d0c0:	220c      	movs	r2, #12
 801d0c2:	eb0d 0102 	add.w	r1, sp, r2
 801d0c6:	4b1e      	ldr	r3, [pc, #120]	; (801d140 <SD_Witer+0xf68>)
 801d0c8:	481e      	ldr	r0, [pc, #120]	; (801d144 <SD_Witer+0xf6c>)
 801d0ca:	f7ec fbd1 	bl	8009870 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801d0ce:	4b3c      	ldr	r3, [pc, #240]	; (801d1c0 <SD_Witer+0xfe8>)
								memset(measure_buff, 0, 12);
 801d0d0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801d0d2:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801d0d4:	9504      	str	r5, [sp, #16]
 801d0d6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801d0d8:	f7e3 fa4e 	bl	8000578 <__aeabi_f2d>
 801d0dc:	4602      	mov	r2, r0
 801d0de:	460b      	mov	r3, r1
 801d0e0:	a803      	add	r0, sp, #12
 801d0e2:	4934      	ldr	r1, [pc, #208]	; (801d1b4 <SD_Witer+0xfdc>)
 801d0e4:	f004 fe5c 	bl	8021da0 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d0e8:	220c      	movs	r2, #12
 801d0ea:	4b15      	ldr	r3, [pc, #84]	; (801d140 <SD_Witer+0xf68>)
 801d0ec:	4815      	ldr	r0, [pc, #84]	; (801d144 <SD_Witer+0xf6c>)
 801d0ee:	eb0d 0102 	add.w	r1, sp, r2
 801d0f2:	f7ec fbbd 	bl	8009870 <f_write>
								memset(measure_buff, 0, 12);
 801d0f6:	9503      	str	r5, [sp, #12]
 801d0f8:	9504      	str	r5, [sp, #16]
 801d0fa:	9505      	str	r5, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801d0fc:	4b10      	ldr	r3, [pc, #64]	; (801d140 <SD_Witer+0xf68>)
 801d0fe:	b994      	cbnz	r4, 801d126 <SD_Witer+0xf4e>
 801d100:	221a      	movs	r2, #26
 801d102:	4930      	ldr	r1, [pc, #192]	; (801d1c4 <SD_Witer+0xfec>)
 801d104:	f7ff bbca 	b.w	801c89c <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801d108:	2223      	movs	r2, #35	; 0x23
 801d10a:	492f      	ldr	r1, [pc, #188]	; (801d1c8 <SD_Witer+0xff0>)
 801d10c:	e70e      	b.n	801cf2c <SD_Witer+0xd54>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801d10e:	2216      	movs	r2, #22
 801d110:	492e      	ldr	r1, [pc, #184]	; (801d1cc <SD_Witer+0xff4>)
 801d112:	e746      	b.n	801cfa2 <SD_Witer+0xdca>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801d114:	2213      	movs	r2, #19
 801d116:	492e      	ldr	r1, [pc, #184]	; (801d1d0 <SD_Witer+0xff8>)
 801d118:	e761      	b.n	801cfde <SD_Witer+0xe06>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801d11a:	2215      	movs	r2, #21
 801d11c:	492d      	ldr	r1, [pc, #180]	; (801d1d4 <SD_Witer+0xffc>)
 801d11e:	e77c      	b.n	801d01a <SD_Witer+0xe42>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801d120:	2220      	movs	r2, #32
 801d122:	492d      	ldr	r1, [pc, #180]	; (801d1d8 <SD_Witer+0x1000>)
 801d124:	e796      	b.n	801d054 <SD_Witer+0xe7c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801d126:	2214      	movs	r2, #20
 801d128:	492c      	ldr	r1, [pc, #176]	; (801d1dc <SD_Witer+0x1004>)
 801d12a:	f7ff bbb7 	b.w	801c89c <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801d12e:	226b      	movs	r2, #107	; 0x6b
 801d130:	492b      	ldr	r1, [pc, #172]	; (801d1e0 <SD_Witer+0x1008>)
 801d132:	f7ff bbf7 	b.w	801c924 <SD_Witer+0x74c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801d136:	226b      	movs	r2, #107	; 0x6b
 801d138:	492a      	ldr	r1, [pc, #168]	; (801d1e4 <SD_Witer+0x100c>)
 801d13a:	e4fc      	b.n	801cb36 <SD_Witer+0x95e>
 801d13c:	08033833 	.word	0x08033833
 801d140:	2008ce58 	.word	0x2008ce58
 801d144:	2008deb0 	.word	0x2008deb0
 801d148:	200005fe 	.word	0x200005fe
 801d14c:	200008cd 	.word	0x200008cd
 801d150:	200009ee 	.word	0x200009ee
 801d154:	20000994 	.word	0x20000994
 801d158:	2000095d 	.word	0x2000095d
 801d15c:	20000970 	.word	0x20000970
 801d160:	0803381b 	.word	0x0803381b
 801d164:	20000543 	.word	0x20000543
 801d168:	2000050d 	.word	0x2000050d
 801d16c:	200005cb 	.word	0x200005cb
 801d170:	200007fe 	.word	0x200007fe
 801d174:	200007a7 	.word	0x200007a7
 801d178:	200004eb 	.word	0x200004eb
 801d17c:	20000703 	.word	0x20000703
 801d180:	20007de4 	.word	0x20007de4
 801d184:	0803383b 	.word	0x0803383b
 801d188:	08033840 	.word	0x08033840
 801d18c:	200006a1 	.word	0x200006a1
 801d190:	2009150c 	.word	0x2009150c
 801d194:	080337f2 	.word	0x080337f2
 801d198:	2000078c 	.word	0x2000078c
 801d19c:	20090f78 	.word	0x20090f78
 801d1a0:	080337ed 	.word	0x080337ed
 801d1a4:	200008a6 	.word	0x200008a6
 801d1a8:	20090f80 	.word	0x20090f80
 801d1ac:	20000854 	.word	0x20000854
 801d1b0:	20091064 	.word	0x20091064
 801d1b4:	08033847 	.word	0x08033847
 801d1b8:	200913e8 	.word	0x200913e8
 801d1bc:	20091324 	.word	0x20091324
 801d1c0:	20090f7c 	.word	0x20090f7c
 801d1c4:	20000671 	.word	0x20000671
 801d1c8:	200006e0 	.word	0x200006e0
 801d1cc:	2000068b 	.word	0x2000068b
 801d1d0:	20000779 	.word	0x20000779
 801d1d4:	20000891 	.word	0x20000891
 801d1d8:	20000834 	.word	0x20000834
 801d1dc:	2000065d 	.word	0x2000065d
 801d1e0:	20000347 	.word	0x20000347
 801d1e4:	2000025d 	.word	0x2000025d
 801d1e8:	200501ec 	.word	0x200501ec

0801d1ec <Spectral_Axes>:
extern uint8_t TFT_direction;
extern uint16_t WaveLenght_Graph[4];
extern uint16_t PARGraph_B, PARGraph_G, PARGraph_R, PARGraph_IR;
extern uint8_t Graph_Field;

void Spectral_Axes(uint8_t direction){
 801d1ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (direction == 0x00)
 801d1ee:	2800      	cmp	r0, #0
 801d1f0:	d145      	bne.n	801d27e <Spectral_Axes+0x92>
	{
		TFT_FillRectangle(18, 95, 20, 412, TFT_Grey); //Yline
 801d1f2:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801d1f6:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801d1fa:	2214      	movs	r2, #20
 801d1fc:	215f      	movs	r1, #95	; 0x5f
 801d1fe:	2012      	movs	r0, #18
 801d200:	9400      	str	r4, [sp, #0]
 801d202:	f001 f88a 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(18, 412, 270, 414, TFT_Grey);//XLine
 801d206:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 801d20a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801d20e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801d212:	2012      	movs	r0, #18
 801d214:	9400      	str	r4, [sp, #0]
 801d216:	f001 f880 	bl	801e31a <TFT_FillRectangle>
		
		TFT_DrawLine(18, 334, 268, 334, TFT_Grey); //25
 801d21a:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 801d21e:	4619      	mov	r1, r3
 801d220:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801d224:	2012      	movs	r0, #18
 801d226:	9400      	str	r4, [sp, #0]
 801d228:	f001 f81a 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(18, 257, 268, 257, TFT_Grey); //50
 801d22c:	f240 1301 	movw	r3, #257	; 0x101
 801d230:	4619      	mov	r1, r3
 801d232:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801d236:	2012      	movs	r0, #18
 801d238:	9400      	str	r4, [sp, #0]
 801d23a:	f001 f811 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(18, 181, 268, 181, TFT_Grey); //75
 801d23e:	23b5      	movs	r3, #181	; 0xb5
 801d240:	4619      	mov	r1, r3
 801d242:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801d246:	2012      	movs	r0, #18
 801d248:	9400      	str	r4, [sp, #0]
 801d24a:	f001 f809 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(18, 105, 268, 105, TFT_Grey); //100
 801d24e:	2369      	movs	r3, #105	; 0x69
 801d250:	9400      	str	r4, [sp, #0]
 801d252:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801d256:	4619      	mov	r1, r3
 801d258:	2012      	movs	r0, #18
 801d25a:	f001 f801 	bl	801e260 <TFT_DrawLine>
 801d25e:	2538      	movs	r5, #56	; 0x38
		
		for(uint16_t i = 0; i < 210; i+=40){
			TFT_FillRectangle(56+i, 95, 56+i, 412, TFT_Grey); 
 801d260:	462a      	mov	r2, r5
 801d262:	4628      	mov	r0, r5
 801d264:	3528      	adds	r5, #40	; 0x28
 801d266:	9400      	str	r4, [sp, #0]
 801d268:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801d26c:	215f      	movs	r1, #95	; 0x5f
 801d26e:	b2ad      	uxth	r5, r5
 801d270:	f001 f853 	bl	801e31a <TFT_FillRectangle>
		for(uint16_t i = 0; i < 210; i+=40){
 801d274:	f5b5 7f94 	cmp.w	r5, #296	; 0x128
 801d278:	d1f2      	bne.n	801d260 <Spectral_Axes+0x74>
		
		for(uint16_t i = 0; i < 260; i+=50){
			TFT_FillRectangle(17, 374-i, 232, 374-i, TFT_Grey);
		}
	}
}
 801d27a:	b003      	add	sp, #12
 801d27c:	bd30      	pop	{r4, r5, pc}
	} else if (direction == 0x01)
 801d27e:	2801      	cmp	r0, #1
 801d280:	d140      	bne.n	801d304 <Spectral_Axes+0x118>
		TFT_FillRectangle(253, 70, 255, 406, TFT_Grey); //XLine
 801d282:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801d286:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d28a:	22ff      	movs	r2, #255	; 0xff
 801d28c:	2146      	movs	r1, #70	; 0x46
 801d28e:	20fd      	movs	r0, #253	; 0xfd
 801d290:	9400      	str	r4, [sp, #0]
 801d292:	f001 f842 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_Grey); //Yline
 801d296:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d29a:	22ff      	movs	r2, #255	; 0xff
 801d29c:	f44f 71ca 	mov.w	r1, #404	; 0x194
 801d2a0:	2028      	movs	r0, #40	; 0x28
 801d2a2:	9400      	str	r4, [sp, #0]
 801d2a4:	f001 f839 	bl	801e31a <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_Grey); //25
 801d2a8:	22cc      	movs	r2, #204	; 0xcc
 801d2aa:	4610      	mov	r0, r2
 801d2ac:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d2b0:	2146      	movs	r1, #70	; 0x46
 801d2b2:	9400      	str	r4, [sp, #0]
 801d2b4:	f000 ffd4 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_Grey); //50
 801d2b8:	2297      	movs	r2, #151	; 0x97
 801d2ba:	4610      	mov	r0, r2
 801d2bc:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d2c0:	2146      	movs	r1, #70	; 0x46
 801d2c2:	9400      	str	r4, [sp, #0]
 801d2c4:	f000 ffcc 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_Grey); //75
 801d2c8:	2262      	movs	r2, #98	; 0x62
 801d2ca:	4610      	mov	r0, r2
 801d2cc:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d2d0:	2146      	movs	r1, #70	; 0x46
 801d2d2:	9400      	str	r4, [sp, #0]
 801d2d4:	f000 ffc4 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_Grey); //100
 801d2d8:	222d      	movs	r2, #45	; 0x2d
 801d2da:	9400      	str	r4, [sp, #0]
 801d2dc:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d2e0:	2146      	movs	r1, #70	; 0x46
 801d2e2:	4610      	mov	r0, r2
 801d2e4:	f000 ffbc 	bl	801e260 <TFT_DrawLine>
 801d2e8:	f44f 75b1 	mov.w	r5, #354	; 0x162
			TFT_FillRectangle(40, 354-i, 255, 354-i, TFT_Grey);
 801d2ec:	462b      	mov	r3, r5
 801d2ee:	4629      	mov	r1, r5
 801d2f0:	3d32      	subs	r5, #50	; 0x32
 801d2f2:	9400      	str	r4, [sp, #0]
 801d2f4:	22ff      	movs	r2, #255	; 0xff
 801d2f6:	2028      	movs	r0, #40	; 0x28
 801d2f8:	b2ad      	uxth	r5, r5
 801d2fa:	f001 f80e 	bl	801e31a <TFT_FillRectangle>
		for(uint16_t i = 0; i < 260; i+=50){
 801d2fe:	2d36      	cmp	r5, #54	; 0x36
 801d300:	d1f4      	bne.n	801d2ec <Spectral_Axes+0x100>
 801d302:	e7ba      	b.n	801d27a <Spectral_Axes+0x8e>
	} else if (direction == 0x02)
 801d304:	2802      	cmp	r0, #2
 801d306:	d1b8      	bne.n	801d27a <Spectral_Axes+0x8e>
		TFT_FillRectangle(18, 74, 16, 406, TFT_Grey); //XLine
 801d308:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801d30c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d310:	2210      	movs	r2, #16
 801d312:	214a      	movs	r1, #74	; 0x4a
 801d314:	2012      	movs	r0, #18
 801d316:	9400      	str	r4, [sp, #0]
 801d318:	f000 ffff 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_Grey); //Yline
 801d31c:	234c      	movs	r3, #76	; 0x4c
 801d31e:	22e8      	movs	r2, #232	; 0xe8
 801d320:	214a      	movs	r1, #74	; 0x4a
 801d322:	2011      	movs	r0, #17
 801d324:	9400      	str	r4, [sp, #0]
 801d326:	f000 fff8 	bl	801e31a <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_Grey); //25
 801d32a:	2244      	movs	r2, #68	; 0x44
 801d32c:	4610      	mov	r0, r2
 801d32e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d332:	2146      	movs	r1, #70	; 0x46
 801d334:	9400      	str	r4, [sp, #0]
 801d336:	f000 ff93 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_Grey); //50
 801d33a:	2279      	movs	r2, #121	; 0x79
 801d33c:	4610      	mov	r0, r2
 801d33e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d342:	2146      	movs	r1, #70	; 0x46
 801d344:	9400      	str	r4, [sp, #0]
 801d346:	f000 ff8b 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_Grey); //75
 801d34a:	22ae      	movs	r2, #174	; 0xae
 801d34c:	4610      	mov	r0, r2
 801d34e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d352:	2146      	movs	r1, #70	; 0x46
 801d354:	9400      	str	r4, [sp, #0]
 801d356:	f000 ff83 	bl	801e260 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_Grey); //100
 801d35a:	22e3      	movs	r2, #227	; 0xe3
 801d35c:	9400      	str	r4, [sp, #0]
 801d35e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d362:	2146      	movs	r1, #70	; 0x46
 801d364:	4610      	mov	r0, r2
 801d366:	f000 ff7b 	bl	801e260 <TFT_DrawLine>
 801d36a:	f44f 75bb 	mov.w	r5, #374	; 0x176
			TFT_FillRectangle(17, 374-i, 232, 374-i, TFT_Grey);
 801d36e:	462b      	mov	r3, r5
 801d370:	4629      	mov	r1, r5
 801d372:	3d32      	subs	r5, #50	; 0x32
 801d374:	9400      	str	r4, [sp, #0]
 801d376:	22e8      	movs	r2, #232	; 0xe8
 801d378:	2011      	movs	r0, #17
 801d37a:	b2ad      	uxth	r5, r5
 801d37c:	f000 ffcd 	bl	801e31a <TFT_FillRectangle>
		for(uint16_t i = 0; i < 260; i+=50){
 801d380:	2d4a      	cmp	r5, #74	; 0x4a
 801d382:	d1f4      	bne.n	801d36e <Spectral_Axes+0x182>
 801d384:	e779      	b.n	801d27a <Spectral_Axes+0x8e>
	...

0801d388 <Spectral_PAR_Range>:

void Spectral_PAR_Range(uint8_t direction){
 801d388:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d38c:	4d6b      	ldr	r5, [pc, #428]	; (801d53c <Spectral_PAR_Range+0x1b4>)
 801d38e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801d548 <Spectral_PAR_Range+0x1c0>
 801d392:	4f6b      	ldr	r7, [pc, #428]	; (801d540 <Spectral_PAR_Range+0x1b8>)
 801d394:	4e6b      	ldr	r6, [pc, #428]	; (801d544 <Spectral_PAR_Range+0x1bc>)
	if (direction == 0x00)
 801d396:	2800      	cmp	r0, #0
 801d398:	d146      	bne.n	801d428 <Spectral_PAR_Range+0xa0>
	{
		TFT_FillRectangle(19, 105, 19+PARGraph_B/4, 411, TFT_Black_Bkgr);
 801d39a:	882a      	ldrh	r2, [r5, #0]
 801d39c:	2363      	movs	r3, #99	; 0x63
 801d39e:	0892      	lsrs	r2, r2, #2
 801d3a0:	9300      	str	r3, [sp, #0]
 801d3a2:	3213      	adds	r2, #19
 801d3a4:	f240 139b 	movw	r3, #411	; 0x19b
 801d3a8:	2169      	movs	r1, #105	; 0x69
 801d3aa:	2013      	movs	r0, #19
 801d3ac:	f000 ffb5 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_B/4, 105, 19+PARGraph_G/4, 411, TFT_PAR_Blue);
 801d3b0:	8828      	ldrh	r0, [r5, #0]
 801d3b2:	f8b8 2000 	ldrh.w	r2, [r8]
 801d3b6:	f242 23b2 	movw	r3, #8882	; 0x22b2
 801d3ba:	0892      	lsrs	r2, r2, #2
 801d3bc:	0880      	lsrs	r0, r0, #2
 801d3be:	9300      	str	r3, [sp, #0]
 801d3c0:	3213      	adds	r2, #19
 801d3c2:	f240 139b 	movw	r3, #411	; 0x19b
 801d3c6:	2169      	movs	r1, #105	; 0x69
 801d3c8:	3013      	adds	r0, #19
 801d3ca:	f000 ffa6 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_G/4, 105, 19+PARGraph_R/4, 411, TFT_PAR_Green);
 801d3ce:	883a      	ldrh	r2, [r7, #0]
 801d3d0:	f8b8 0000 	ldrh.w	r0, [r8]
 801d3d4:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801d3d8:	0892      	lsrs	r2, r2, #2
 801d3da:	0880      	lsrs	r0, r0, #2
 801d3dc:	9300      	str	r3, [sp, #0]
 801d3de:	3213      	adds	r2, #19
 801d3e0:	f240 139b 	movw	r3, #411	; 0x19b
 801d3e4:	2169      	movs	r1, #105	; 0x69
 801d3e6:	3013      	adds	r0, #19
 801d3e8:	f000 ff97 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_R/4, 105, 19+PARGraph_IR/4, 411, TFT_PAR_Red);
 801d3ec:	8838      	ldrh	r0, [r7, #0]
 801d3ee:	8832      	ldrh	r2, [r6, #0]
 801d3f0:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801d3f4:	0892      	lsrs	r2, r2, #2
 801d3f6:	0880      	lsrs	r0, r0, #2
 801d3f8:	9300      	str	r3, [sp, #0]
 801d3fa:	3213      	adds	r2, #19
 801d3fc:	f240 139b 	movw	r3, #411	; 0x19b
 801d400:	2169      	movs	r1, #105	; 0x69
 801d402:	3013      	adds	r0, #19
 801d404:	f000 ff89 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_IR/4, 105, 19+1000/4, 411, TFT_PAR_IRed);
 801d408:	8830      	ldrh	r0, [r6, #0]
 801d40a:	f641 3346 	movw	r3, #6982	; 0x1b46
 801d40e:	0880      	lsrs	r0, r0, #2
 801d410:	9300      	str	r3, [sp, #0]
 801d412:	f240 120d 	movw	r2, #269	; 0x10d
 801d416:	f240 139b 	movw	r3, #411	; 0x19b
 801d41a:	2169      	movs	r1, #105	; 0x69
 801d41c:	3013      	adds	r0, #19
	}else
	{
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801d41e:	f000 ff7c 	bl	801e31a <TFT_FillRectangle>
	}
}
 801d422:	b002      	add	sp, #8
 801d424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if(direction == 0x01)
 801d428:	2801      	cmp	r0, #1
 801d42a:	f04f 0403 	mov.w	r4, #3
 801d42e:	d142      	bne.n	801d4b6 <Spectral_PAR_Range+0x12e>
		TFT_FillRectangle( 45, 403-PARGraph_G/3, 253, 403-PARGraph_B/3, TFT_PAR_Blue);
 801d430:	882b      	ldrh	r3, [r5, #0]
 801d432:	f8b8 1000 	ldrh.w	r1, [r8]
 801d436:	fbb3 f3f4 	udiv	r3, r3, r4
 801d43a:	f240 1593 	movw	r5, #403	; 0x193
 801d43e:	f242 22b2 	movw	r2, #8882	; 0x22b2
 801d442:	1aeb      	subs	r3, r5, r3
 801d444:	fbb1 f1f4 	udiv	r1, r1, r4
 801d448:	1a69      	subs	r1, r5, r1
 801d44a:	9200      	str	r2, [sp, #0]
 801d44c:	b29b      	uxth	r3, r3
 801d44e:	22fd      	movs	r2, #253	; 0xfd
 801d450:	b289      	uxth	r1, r1
 801d452:	202d      	movs	r0, #45	; 0x2d
 801d454:	f000 ff61 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_R/3, 253, 403-PARGraph_G/3, TFT_PAR_Green);
 801d458:	8839      	ldrh	r1, [r7, #0]
 801d45a:	f8b8 3000 	ldrh.w	r3, [r8]
 801d45e:	fbb1 f1f4 	udiv	r1, r1, r4
 801d462:	f64c 7238 	movw	r2, #53048	; 0xcf38
 801d466:	fbb3 f3f4 	udiv	r3, r3, r4
 801d46a:	1a69      	subs	r1, r5, r1
 801d46c:	1aeb      	subs	r3, r5, r3
 801d46e:	9200      	str	r2, [sp, #0]
 801d470:	b29b      	uxth	r3, r3
 801d472:	22fd      	movs	r2, #253	; 0xfd
 801d474:	b289      	uxth	r1, r1
 801d476:	202d      	movs	r0, #45	; 0x2d
 801d478:	f000 ff4f 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_IR/3, 253, 403-PARGraph_R/3, TFT_PAR_Red);
 801d47c:	883b      	ldrh	r3, [r7, #0]
 801d47e:	8831      	ldrh	r1, [r6, #0]
 801d480:	fbb3 f3f4 	udiv	r3, r3, r4
 801d484:	f24f 52b9 	movw	r2, #62905	; 0xf5b9
 801d488:	1aeb      	subs	r3, r5, r3
 801d48a:	fbb1 f1f4 	udiv	r1, r1, r4
 801d48e:	1a69      	subs	r1, r5, r1
 801d490:	9200      	str	r2, [sp, #0]
 801d492:	b29b      	uxth	r3, r3
 801d494:	22fd      	movs	r2, #253	; 0xfd
 801d496:	b289      	uxth	r1, r1
 801d498:	202d      	movs	r0, #45	; 0x2d
 801d49a:	f000 ff3e 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-1000/3, 253, 403-PARGraph_IR/3, TFT_PAR_IRed);
 801d49e:	f641 3246 	movw	r2, #6982	; 0x1b46
 801d4a2:	8833      	ldrh	r3, [r6, #0]
 801d4a4:	fbb3 f3f4 	udiv	r3, r3, r4
 801d4a8:	1aeb      	subs	r3, r5, r3
 801d4aa:	9200      	str	r2, [sp, #0]
 801d4ac:	b29b      	uxth	r3, r3
 801d4ae:	22fd      	movs	r2, #253	; 0xfd
 801d4b0:	2146      	movs	r1, #70	; 0x46
 801d4b2:	202d      	movs	r0, #45	; 0x2d
 801d4b4:	e7b3      	b.n	801d41e <Spectral_PAR_Range+0x96>
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
 801d4b6:	8829      	ldrh	r1, [r5, #0]
 801d4b8:	f8b8 3000 	ldrh.w	r3, [r8]
 801d4bc:	fbb1 f1f4 	udiv	r1, r1, r4
 801d4c0:	f242 22b2 	movw	r2, #8882	; 0x22b2
 801d4c4:	fbb3 f3f4 	udiv	r3, r3, r4
 801d4c8:	314a      	adds	r1, #74	; 0x4a
 801d4ca:	334a      	adds	r3, #74	; 0x4a
 801d4cc:	9200      	str	r2, [sp, #0]
 801d4ce:	b29b      	uxth	r3, r3
 801d4d0:	22e3      	movs	r2, #227	; 0xe3
 801d4d2:	b289      	uxth	r1, r1
 801d4d4:	2013      	movs	r0, #19
 801d4d6:	f000 ff20 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
 801d4da:	883b      	ldrh	r3, [r7, #0]
 801d4dc:	f8b8 1000 	ldrh.w	r1, [r8]
 801d4e0:	fbb3 f3f4 	udiv	r3, r3, r4
 801d4e4:	f64c 7238 	movw	r2, #53048	; 0xcf38
 801d4e8:	334a      	adds	r3, #74	; 0x4a
 801d4ea:	fbb1 f1f4 	udiv	r1, r1, r4
 801d4ee:	314a      	adds	r1, #74	; 0x4a
 801d4f0:	9200      	str	r2, [sp, #0]
 801d4f2:	b29b      	uxth	r3, r3
 801d4f4:	22e3      	movs	r2, #227	; 0xe3
 801d4f6:	b289      	uxth	r1, r1
 801d4f8:	2013      	movs	r0, #19
 801d4fa:	f000 ff0e 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
 801d4fe:	8839      	ldrh	r1, [r7, #0]
 801d500:	8833      	ldrh	r3, [r6, #0]
 801d502:	fbb1 f1f4 	udiv	r1, r1, r4
 801d506:	f24f 52b9 	movw	r2, #62905	; 0xf5b9
 801d50a:	fbb3 f3f4 	udiv	r3, r3, r4
 801d50e:	314a      	adds	r1, #74	; 0x4a
 801d510:	334a      	adds	r3, #74	; 0x4a
 801d512:	9200      	str	r2, [sp, #0]
 801d514:	b29b      	uxth	r3, r3
 801d516:	22e3      	movs	r2, #227	; 0xe3
 801d518:	b289      	uxth	r1, r1
 801d51a:	2013      	movs	r0, #19
 801d51c:	f000 fefd 	bl	801e31a <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801d520:	f641 3346 	movw	r3, #6982	; 0x1b46
 801d524:	8831      	ldrh	r1, [r6, #0]
 801d526:	fbb1 f1f4 	udiv	r1, r1, r4
 801d52a:	314a      	adds	r1, #74	; 0x4a
 801d52c:	9300      	str	r3, [sp, #0]
 801d52e:	22e3      	movs	r2, #227	; 0xe3
 801d530:	f240 1397 	movw	r3, #407	; 0x197
 801d534:	b289      	uxth	r1, r1
 801d536:	2013      	movs	r0, #19
 801d538:	e771      	b.n	801d41e <Spectral_PAR_Range+0x96>
 801d53a:	bf00      	nop
 801d53c:	2009132a 	.word	0x2009132a
 801d540:	20091550 	.word	0x20091550
 801d544:	20091328 	.word	0x20091328
 801d548:	200913ec 	.word	0x200913ec

0801d54c <Spectral_Axes_Text>:


void Spectral_Axes_Text(uint8_t direction){
 801d54c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char buffer[4] = {0};
 801d54e:	ac02      	add	r4, sp, #8
 801d550:	2300      	movs	r3, #0
 801d552:	f844 3d04 	str.w	r3, [r4, #-4]!
	
	if (direction == 0x00)
 801d556:	4606      	mov	r6, r0
 801d558:	4d67      	ldr	r5, [pc, #412]	; (801d6f8 <Spectral_Axes_Text+0x1ac>)
 801d55a:	2800      	cmp	r0, #0
 801d55c:	d162      	bne.n	801d624 <Spectral_Axes_Text+0xd8>
	{
		TFT_SetTextColor(TFT_White);
 801d55e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801d562:	f001 f909 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801d566:	2063      	movs	r0, #99	; 0x63
 801d568:	f001 f90c 	bl	801e784 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801d56c:	4863      	ldr	r0, [pc, #396]	; (801d6fc <Spectral_Axes_Text+0x1b0>)
 801d56e:	f001 f8fd 	bl	801e76c <TFT_SetFont>

		TFT_DrawChar(5, 410, '0');
 801d572:	2230      	movs	r2, #48	; 0x30
 801d574:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801d578:	2005      	movs	r0, #5
 801d57a:	f001 f9c1 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(7, 257, '.');
 801d57e:	222e      	movs	r2, #46	; 0x2e
 801d580:	f240 1101 	movw	r1, #257	; 0x101
 801d584:	2007      	movs	r0, #7
 801d586:	f001 f9bb 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(3, 257, '0');
 801d58a:	2230      	movs	r2, #48	; 0x30
 801d58c:	f240 1101 	movw	r1, #257	; 0x101
 801d590:	2003      	movs	r0, #3
 801d592:	f001 f9b5 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(11, 257, '5');
 801d596:	2235      	movs	r2, #53	; 0x35
 801d598:	f240 1101 	movw	r1, #257	; 0x101
 801d59c:	200b      	movs	r0, #11
 801d59e:	f001 f9af 	bl	801e900 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 801d5a2:	2231      	movs	r2, #49	; 0x31
 801d5a4:	2169      	movs	r1, #105	; 0x69
 801d5a6:	4630      	mov	r0, r6
 801d5a8:	f001 f9aa 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '.');
 801d5ac:	222e      	movs	r2, #46	; 0x2e
 801d5ae:	2169      	movs	r1, #105	; 0x69
 801d5b0:	2004      	movs	r0, #4
 801d5b2:	f001 f9a5 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 801d5b6:	2230      	movs	r2, #48	; 0x30
 801d5b8:	2169      	movs	r1, #105	; 0x69
 801d5ba:	2009      	movs	r0, #9
 801d5bc:	f001 f9a0 	bl	801e900 <TFT_DrawChar>
		
		
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801d5c0:	882a      	ldrh	r2, [r5, #0]
 801d5c2:	494f      	ldr	r1, [pc, #316]	; (801d700 <Spectral_Axes_Text+0x1b4>)
 801d5c4:	4620      	mov	r0, r4
 801d5c6:	f004 fbeb 	bl	8021da0 <sprintf>
		TFT_DisplayString(11, 416, (uint8_t *)buffer, LEFT_MODE);
 801d5ca:	2303      	movs	r3, #3
 801d5cc:	4622      	mov	r2, r4
 801d5ce:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801d5d2:	200b      	movs	r0, #11
 801d5d4:	f001 f9ec 	bl	801e9b0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801d5d8:	886a      	ldrh	r2, [r5, #2]
 801d5da:	4949      	ldr	r1, [pc, #292]	; (801d700 <Spectral_Axes_Text+0x1b4>)
 801d5dc:	4620      	mov	r0, r4
 801d5de:	f004 fbdf 	bl	8021da0 <sprintf>
		TFT_DisplayString(85, 416, (uint8_t *)buffer, LEFT_MODE);
 801d5e2:	2303      	movs	r3, #3
 801d5e4:	4622      	mov	r2, r4
 801d5e6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801d5ea:	2055      	movs	r0, #85	; 0x55
 801d5ec:	f001 f9e0 	bl	801e9b0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801d5f0:	88aa      	ldrh	r2, [r5, #4]
 801d5f2:	4943      	ldr	r1, [pc, #268]	; (801d700 <Spectral_Axes_Text+0x1b4>)
 801d5f4:	4620      	mov	r0, r4
 801d5f6:	f004 fbd3 	bl	8021da0 <sprintf>
		TFT_DisplayString(165, 416, (uint8_t *)buffer, LEFT_MODE);
 801d5fa:	2303      	movs	r3, #3
 801d5fc:	4622      	mov	r2, r4
 801d5fe:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801d602:	20a5      	movs	r0, #165	; 0xa5
 801d604:	f001 f9d4 	bl	801e9b0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801d608:	88ea      	ldrh	r2, [r5, #6]
 801d60a:	493d      	ldr	r1, [pc, #244]	; (801d700 <Spectral_Axes_Text+0x1b4>)
 801d60c:	4620      	mov	r0, r4
 801d60e:	f004 fbc7 	bl	8021da0 <sprintf>
		TFT_DisplayString(245, 416, (uint8_t *)buffer, LEFT_MODE);
 801d612:	2303      	movs	r3, #3
 801d614:	4622      	mov	r2, r4
 801d616:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801d61a:	20f5      	movs	r0, #245	; 0xf5
 801d61c:	f001 f9c8 	bl	801e9b0 <TFT_DisplayString>
		TFT_DrawChar(62, 43, '.');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 801d620:	b003      	add	sp, #12
 801d622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d624:	4f37      	ldr	r7, [pc, #220]	; (801d704 <Spectral_Axes_Text+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 801d626:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 801d628:	bf14      	ite	ne
 801d62a:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 801d62c:	7038      	strbeq	r0, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801d62e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 801d632:	bf18      	it	ne
 801d634:	703b      	strbne	r3, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801d636:	f001 f89f 	bl	801e778 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801d63a:	2063      	movs	r0, #99	; 0x63
 801d63c:	f001 f8a2 	bl	801e784 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801d640:	482e      	ldr	r0, [pc, #184]	; (801d6fc <Spectral_Axes_Text+0x1b0>)
 801d642:	f001 f893 	bl	801e76c <TFT_SetFont>
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801d646:	882a      	ldrh	r2, [r5, #0]
 801d648:	492d      	ldr	r1, [pc, #180]	; (801d700 <Spectral_Axes_Text+0x1b4>)
 801d64a:	4620      	mov	r0, r4
 801d64c:	f004 fba8 	bl	8021da0 <sprintf>
		TFT_DisplayString(65, 258, (uint8_t *)buffer, LEFT_MODE);
 801d650:	2303      	movs	r3, #3
 801d652:	4622      	mov	r2, r4
 801d654:	f44f 7181 	mov.w	r1, #258	; 0x102
 801d658:	2041      	movs	r0, #65	; 0x41
 801d65a:	f001 f9a9 	bl	801e9b0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801d65e:	886a      	ldrh	r2, [r5, #2]
 801d660:	4927      	ldr	r1, [pc, #156]	; (801d700 <Spectral_Axes_Text+0x1b4>)
 801d662:	4620      	mov	r0, r4
 801d664:	f004 fb9c 	bl	8021da0 <sprintf>
		TFT_DisplayString(165, 258, (uint8_t *)buffer, LEFT_MODE);
 801d668:	2303      	movs	r3, #3
 801d66a:	4622      	mov	r2, r4
 801d66c:	f44f 7181 	mov.w	r1, #258	; 0x102
 801d670:	20a5      	movs	r0, #165	; 0xa5
 801d672:	f001 f99d 	bl	801e9b0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801d676:	88aa      	ldrh	r2, [r5, #4]
 801d678:	4921      	ldr	r1, [pc, #132]	; (801d700 <Spectral_Axes_Text+0x1b4>)
 801d67a:	4620      	mov	r0, r4
 801d67c:	f004 fb90 	bl	8021da0 <sprintf>
		TFT_DisplayString(265, 258, (uint8_t *)buffer, LEFT_MODE);
 801d680:	2303      	movs	r3, #3
 801d682:	4622      	mov	r2, r4
 801d684:	f44f 7181 	mov.w	r1, #258	; 0x102
 801d688:	f240 1009 	movw	r0, #265	; 0x109
 801d68c:	f001 f990 	bl	801e9b0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801d690:	88ea      	ldrh	r2, [r5, #6]
 801d692:	491b      	ldr	r1, [pc, #108]	; (801d700 <Spectral_Axes_Text+0x1b4>)
 801d694:	4620      	mov	r0, r4
 801d696:	f004 fb83 	bl	8021da0 <sprintf>
		TFT_DisplayString(365, 258, (uint8_t *)buffer, LEFT_MODE);
 801d69a:	2303      	movs	r3, #3
 801d69c:	4622      	mov	r2, r4
 801d69e:	f44f 7181 	mov.w	r1, #258	; 0x102
 801d6a2:	f240 106d 	movw	r0, #365	; 0x16d
 801d6a6:	f001 f983 	bl	801e9b0 <TFT_DisplayString>
		TFT_DrawChar(65, 250, '0');
 801d6aa:	2230      	movs	r2, #48	; 0x30
 801d6ac:	21fa      	movs	r1, #250	; 0xfa
 801d6ae:	2041      	movs	r0, #65	; 0x41
 801d6b0:	f001 f926 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(57, 149, '0');
 801d6b4:	2230      	movs	r2, #48	; 0x30
 801d6b6:	2195      	movs	r1, #149	; 0x95
 801d6b8:	2039      	movs	r0, #57	; 0x39
 801d6ba:	f001 f921 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(62, 149, '.');
 801d6be:	222e      	movs	r2, #46	; 0x2e
 801d6c0:	2195      	movs	r1, #149	; 0x95
 801d6c2:	203e      	movs	r0, #62	; 0x3e
 801d6c4:	f001 f91c 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(67, 149, '5');
 801d6c8:	2235      	movs	r2, #53	; 0x35
 801d6ca:	2195      	movs	r1, #149	; 0x95
 801d6cc:	2043      	movs	r0, #67	; 0x43
 801d6ce:	f001 f917 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 801d6d2:	2231      	movs	r2, #49	; 0x31
 801d6d4:	212b      	movs	r1, #43	; 0x2b
 801d6d6:	2039      	movs	r0, #57	; 0x39
 801d6d8:	f001 f912 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '.');
 801d6dc:	222e      	movs	r2, #46	; 0x2e
 801d6de:	212b      	movs	r1, #43	; 0x2b
 801d6e0:	203e      	movs	r0, #62	; 0x3e
 801d6e2:	f001 f90d 	bl	801e900 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 801d6e6:	2230      	movs	r2, #48	; 0x30
 801d6e8:	212b      	movs	r1, #43	; 0x2b
 801d6ea:	2043      	movs	r0, #67	; 0x43
 801d6ec:	f001 f908 	bl	801e900 <TFT_DrawChar>
		TFT_direction = 0x00;
 801d6f0:	2300      	movs	r3, #0
 801d6f2:	703b      	strb	r3, [r7, #0]
}
 801d6f4:	e794      	b.n	801d620 <Spectral_Axes_Text+0xd4>
 801d6f6:	bf00      	nop
 801d6f8:	200511ec 	.word	0x200511ec
 801d6fc:	20000210 	.word	0x20000210
 801d700:	08033852 	.word	0x08033852
 801d704:	20005218 	.word	0x20005218

0801d708 <Spectral_DrawGraph_Const>:
		memset(graph_data_old, 0, sizeof(graph_data_old));	
}


void Spectral_DrawGraph_Const(uint16_t ZeroX, uint16_t ZeroY, uint16_t *GraphData, uint16_t color, uint8_t direction)
{
 801d708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d70c:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
		uint16_t i, j = 0;
		uint16_t graph_data[335];
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801d710:	f1b8 0f00 	cmp.w	r8, #0
 801d714:	bf0c      	ite	eq
 801d716:	f04f 09f0 	moveq.w	r9, #240	; 0xf0
 801d71a:	f44f 79a5 	movne.w	r9, #330	; 0x14a
{
 801d71e:	4682      	mov	sl, r0
 801d720:	461f      	mov	r7, r3
 801d722:	4614      	mov	r4, r2
 801d724:	eb02 0649 	add.w	r6, r2, r9, lsl #1
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801d728:	2500      	movs	r5, #0
		uint8_t	step = (direction == 0x00)? 4 :3;
	
		for(i = 0; i < graph_lenht; i++)
	{
		if(direction == 0x00){
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801d72a:	f100 0b01 	add.w	fp, r0, #1
 801d72e:	b2a8      	uxth	r0, r5
		if(direction == 0x00){
 801d730:	f1b8 0f00 	cmp.w	r8, #0
 801d734:	d10e      	bne.n	801d754 <Spectral_DrawGraph_Const+0x4c>
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801d736:	8863      	ldrh	r3, [r4, #2]
 801d738:	8821      	ldrh	r1, [r4, #0]
 801d73a:	eb00 020b 	add.w	r2, r0, fp
 801d73e:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801d742:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801d746:	4450      	add	r0, sl
		else if(direction == 0x01)
		{
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801d748:	9700      	str	r7, [sp, #0]
 801d74a:	b29b      	uxth	r3, r3
 801d74c:	b292      	uxth	r2, r2
 801d74e:	b289      	uxth	r1, r1
 801d750:	b280      	uxth	r0, r0
 801d752:	e013      	b.n	801d77c <Spectral_DrawGraph_Const+0x74>
		else if(direction == 0x01)
 801d754:	f1b8 0f01 	cmp.w	r8, #1
 801d758:	d11d      	bne.n	801d796 <Spectral_DrawGraph_Const+0x8e>
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
 801d75a:	8872      	ldrh	r2, [r6, #2]
 801d75c:	f8b6 e000 	ldrh.w	lr, [r6]
 801d760:	9700      	str	r7, [sp, #0]
 801d762:	f100 0348 	add.w	r3, r0, #72	; 0x48
 801d766:	f100 0149 	add.w	r1, r0, #73	; 0x49
 801d76a:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801d76e:	f1ce 0efd 	rsb	lr, lr, #253	; 0xfd
 801d772:	b29b      	uxth	r3, r3
 801d774:	b292      	uxth	r2, r2
 801d776:	b289      	uxth	r1, r1
 801d778:	fa1f f08e 	uxth.w	r0, lr
 801d77c:	3501      	adds	r5, #1
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801d77e:	f000 fd6f 	bl	801e260 <TFT_DrawLine>
		for(i = 0; i < graph_lenht; i++)
 801d782:	b2ab      	uxth	r3, r5
 801d784:	4599      	cmp	r9, r3
 801d786:	f104 0402 	add.w	r4, r4, #2
 801d78a:	f1a6 0602 	sub.w	r6, r6, #2
 801d78e:	d8ce      	bhi.n	801d72e <Spectral_DrawGraph_Const+0x26>
	}
}
 801d790:	b003      	add	sp, #12
 801d792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801d796:	f100 034d 	add.w	r3, r0, #77	; 0x4d
 801d79a:	8862      	ldrh	r2, [r4, #2]
 801d79c:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 801d7a0:	8820      	ldrh	r0, [r4, #0]
 801d7a2:	3212      	adds	r2, #18
 801d7a4:	3012      	adds	r0, #18
 801d7a6:	e7cf      	b.n	801d748 <Spectral_DrawGraph_Const+0x40>

0801d7a8 <Spectral_DrawGraph_Line2>:
				flag_spectral = 0;}
					}
}

void Spectral_DrawGraph_Line2(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint16_t color, uint8_t direction)
{
 801d7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7ac:	b085      	sub	sp, #20
 801d7ae:	4699      	mov	r9, r3
 801d7b0:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
    float buf_pix;
    uint16_t i, j = 0;
    uint16_t graph_data[335];
    uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801d7b4:	2c00      	cmp	r4, #0
 801d7b6:	bf0c      	ite	eq
 801d7b8:	23f0      	moveq	r3, #240	; 0xf0
 801d7ba:	f44f 73a5 	movne.w	r3, #330	; 0x14a
 801d7be:	9302      	str	r3, [sp, #8]
    uint8_t    step = (direction == 0x00)? 4 :3;
    uint16_t  jj = 0, ii = 0;

//    screen_cnt++;
//	screen_cnt > 200 ||
    if( direction != Rotation_Screen_Spectral_Old2){
 801d7c0:	4b41      	ldr	r3, [pc, #260]	; (801d8c8 <Spectral_DrawGraph_Line2+0x120>)
{
 801d7c2:	4616      	mov	r6, r2
    if( direction != Rotation_Screen_Spectral_Old2){
 801d7c4:	781a      	ldrb	r2, [r3, #0]
 801d7c6:	42a2      	cmp	r2, r4
{
 801d7c8:	4682      	mov	sl, r0
    if( direction != Rotation_Screen_Spectral_Old2){
 801d7ca:	d01a      	beq.n	801d802 <Spectral_DrawGraph_Line2+0x5a>
			Rotation_Screen_Spectral_Old2 = direction;
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801d7cc:	2563      	movs	r5, #99	; 0x63
			Rotation_Screen_Spectral_Old2 = direction;
 801d7ce:	701c      	strb	r4, [r3, #0]
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801d7d0:	f240 120f 	movw	r2, #271	; 0x10f
 801d7d4:	f240 13a5 	movw	r3, #421	; 0x1a5
 801d7d8:	9500      	str	r5, [sp, #0]
 801d7da:	2137      	movs	r1, #55	; 0x37
 801d7dc:	2001      	movs	r0, #1
 801d7de:	f000 fd9c 	bl	801e31a <TFT_FillRectangle>
        if(Graph_Field&PPF_Bands)
 801d7e2:	4b3a      	ldr	r3, [pc, #232]	; (801d8cc <Spectral_DrawGraph_Line2+0x124>)
 801d7e4:	781b      	ldrb	r3, [r3, #0]
 801d7e6:	07db      	lsls	r3, r3, #31
 801d7e8:	d53b      	bpl.n	801d862 <Spectral_DrawGraph_Line2+0xba>
        {
            Spectral_PAR_Range(direction);
 801d7ea:	4620      	mov	r0, r4
 801d7ec:	f7ff fdcc 	bl	801d388 <Spectral_PAR_Range>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
        }

    Spectral_Axes(direction);
 801d7f0:	4620      	mov	r0, r4
 801d7f2:	f7ff fcfb 	bl	801d1ec <Spectral_Axes>
    Spectral_Axes_Text(direction);
 801d7f6:	4620      	mov	r0, r4
 801d7f8:	f7ff fea8 	bl	801d54c <Spectral_Axes_Text>
						
    screen_cnt = 0;
 801d7fc:	4b34      	ldr	r3, [pc, #208]	; (801d8d0 <Spectral_DrawGraph_Line2+0x128>)
 801d7fe:	2200      	movs	r2, #0
 801d800:	801a      	strh	r2, [r3, #0]
    }
    flag_refresh = 1;
 801d802:	4a34      	ldr	r2, [pc, #208]	; (801d8d4 <Spectral_DrawGraph_Line2+0x12c>)
        {
            flag_spectral = 1;
           DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, color);
            flag_spectral = 0;
        } else if(direction == 0x02)
				{flag_spectral = 1; 
 801d804:	4f34      	ldr	r7, [pc, #208]	; (801d8d8 <Spectral_DrawGraph_Line2+0x130>)
    flag_refresh = 1;
 801d806:	2301      	movs	r3, #1
 801d808:	7013      	strb	r3, [r2, #0]
    i_coord = 0;
 801d80a:	4a34      	ldr	r2, [pc, #208]	; (801d8dc <Spectral_DrawGraph_Line2+0x134>)
				{flag_spectral = 1; 
 801d80c:	9303      	str	r3, [sp, #12]
    i_coord = 0;
 801d80e:	2500      	movs	r5, #0
 801d810:	8015      	strh	r5, [r2, #0]
 801d812:	9a02      	ldr	r2, [sp, #8]
						DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
				flag_spectral = 0;}
 801d814:	46ab      	mov	fp, r5
 801d816:	eb06 0842 	add.w	r8, r6, r2, lsl #1
        if(direction == 0x00){
 801d81a:	bb64      	cbnz	r4, 801d876 <Spectral_DrawGraph_Line2+0xce>
            flag_spectral = 1;
 801d81c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801d820:	703b      	strb	r3, [r7, #0]
						DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);
 801d822:	8873      	ldrh	r3, [r6, #2]
 801d824:	8831      	ldrh	r1, [r6, #0]
 801d826:	f8cd 9000 	str.w	r9, [sp]
 801d82a:	b2a8      	uxth	r0, r5
 801d82c:	f10a 0201 	add.w	r2, sl, #1
 801d830:	4402      	add	r2, r0
 801d832:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801d836:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801d83a:	4450      	add	r0, sl
 801d83c:	b29b      	uxth	r3, r3
 801d83e:	b292      	uxth	r2, r2
 801d840:	b289      	uxth	r1, r1
 801d842:	b280      	uxth	r0, r0
 801d844:	f001 f8fc 	bl	801ea40 <DrawLineX>
            flag_spectral = 0;
 801d848:	703c      	strb	r4, [r7, #0]
 801d84a:	3501      	adds	r5, #1
    for(i = 0; i < graph_lenht; i++)
 801d84c:	9a02      	ldr	r2, [sp, #8]
 801d84e:	b2ab      	uxth	r3, r5
 801d850:	429a      	cmp	r2, r3
 801d852:	f106 0602 	add.w	r6, r6, #2
 801d856:	f1a8 0802 	sub.w	r8, r8, #2
 801d85a:	d8de      	bhi.n	801d81a <Spectral_DrawGraph_Line2+0x72>
					}
}
 801d85c:	b005      	add	sp, #20
 801d85e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
 801d862:	9500      	str	r5, [sp, #0]
 801d864:	f240 13a5 	movw	r3, #421	; 0x1a5
 801d868:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801d86c:	2137      	movs	r1, #55	; 0x37
 801d86e:	2005      	movs	r0, #5
 801d870:	f000 fd53 	bl	801e31a <TFT_FillRectangle>
 801d874:	e7bc      	b.n	801d7f0 <Spectral_DrawGraph_Line2+0x48>
        else if(direction == 0x01)
 801d876:	2c01      	cmp	r4, #1
 801d878:	d117      	bne.n	801d8aa <Spectral_DrawGraph_Line2+0x102>
            flag_spectral = 1;
 801d87a:	703c      	strb	r4, [r7, #0]
           DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, color);
 801d87c:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801d880:	f8b8 0000 	ldrh.w	r0, [r8]
 801d884:	b2a9      	uxth	r1, r5
 801d886:	f101 0348 	add.w	r3, r1, #72	; 0x48
 801d88a:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801d88e:	3149      	adds	r1, #73	; 0x49
 801d890:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
						DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
 801d894:	f8cd 9000 	str.w	r9, [sp]
 801d898:	b29b      	uxth	r3, r3
 801d89a:	b292      	uxth	r2, r2
 801d89c:	b289      	uxth	r1, r1
 801d89e:	b280      	uxth	r0, r0
 801d8a0:	f001 f8ce 	bl	801ea40 <DrawLineX>
				flag_spectral = 0;}
 801d8a4:	f887 b000 	strb.w	fp, [r7]
 801d8a8:	e7cf      	b.n	801d84a <Spectral_DrawGraph_Line2+0xa2>
        } else if(direction == 0x02)
 801d8aa:	2c02      	cmp	r4, #2
 801d8ac:	d1cd      	bne.n	801d84a <Spectral_DrawGraph_Line2+0xa2>
				{flag_spectral = 1; 
 801d8ae:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801d8b2:	703b      	strb	r3, [r7, #0]
						DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
 801d8b4:	8872      	ldrh	r2, [r6, #2]
 801d8b6:	8830      	ldrh	r0, [r6, #0]
 801d8b8:	b2a9      	uxth	r1, r5
 801d8ba:	f101 034d 	add.w	r3, r1, #77	; 0x4d
 801d8be:	3212      	adds	r2, #18
 801d8c0:	314c      	adds	r1, #76	; 0x4c
 801d8c2:	3012      	adds	r0, #18
 801d8c4:	e7e6      	b.n	801d894 <Spectral_DrawGraph_Line2+0xec>
 801d8c6:	bf00      	nop
 801d8c8:	2008eee1 	.word	0x2008eee1
 801d8cc:	2000527a 	.word	0x2000527a
 801d8d0:	200055a2 	.word	0x200055a2
 801d8d4:	2000559e 	.word	0x2000559e
 801d8d8:	2000559f 	.word	0x2000559f
 801d8dc:	200055a0 	.word	0x200055a0

0801d8e0 <Rabs_graph_to_display>:



uint16_t Line_Rabs_buff_graph2[355] = {0};
void Rabs_graph_to_display(uint8_t direction, float Line_Rabs_buff[])
{    
 801d8e0:	b570      	push	{r4, r5, r6, lr}
 801d8e2:	ed2d 8b02 	vpush	{d8}
	uint8_t    step = (direction == 0x00)? 4 :3;
 801d8e6:	eddf 7a23 	vldr	s15, [pc, #140]	; 801d974 <Rabs_graph_to_display+0x94>
 801d8ea:	ed9f 8a23 	vldr	s16, [pc, #140]	; 801d978 <Rabs_graph_to_display+0x98>
 801d8ee:	2800      	cmp	r0, #0
{    
 801d8f0:	b082      	sub	sp, #8
 801d8f2:	460e      	mov	r6, r1
	uint16_t  q = 0, res;
	float scale = (direction == 0x00)? 307 : 209; 
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801d8f4:	f240 22c6 	movw	r2, #710	; 0x2c6
 801d8f8:	f04f 0100 	mov.w	r1, #0
 801d8fc:	481f      	ldr	r0, [pc, #124]	; (801d97c <Rabs_graph_to_display+0x9c>)
	uint8_t    step = (direction == 0x00)? 4 :3;
 801d8fe:	bf14      	ite	ne
 801d900:	2403      	movne	r4, #3
 801d902:	2404      	moveq	r4, #4
 801d904:	bf08      	it	eq
 801d906:	eeb0 8a67 	vmoveq.f32	s16, s15
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801d90a:	f004 fa40 	bl	8021d8e <memset>

	for(uint16_t ic = 0; ic <= 1023; ic+=step){
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801d90e:	4b1c      	ldr	r3, [pc, #112]	; (801d980 <Rabs_graph_to_display+0xa0>)
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801d910:	481a      	ldr	r0, [pc, #104]	; (801d97c <Rabs_graph_to_display+0x9c>)
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801d912:	ed93 7a00 	vldr	s14, [r3]
 801d916:	2100      	movs	r1, #0
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801d918:	460b      	mov	r3, r1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801d91a:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 801d91e:	edd2 6a00 	vldr	s13, [r2]
 801d922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d926:	4423      	add	r3, r4
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801d928:	b28d      	uxth	r5, r1
 801d92a:	b29b      	uxth	r3, r3
 801d92c:	3101      	adds	r1, #1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801d92e:	ee67 7a88 	vmul.f32	s15, s15, s16
 801d932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d936:	edcd 7a01 	vstr	s15, [sp, #4]
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801d93a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801d93e:	ee07 2a90 	vmov	s15, r2
 801d942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d946:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d94e:	bf4c      	ite	mi
 801d950:	eefc 7ac8 	vcvtmi.u32.f32	s15, s16
 801d954:	eefc 7ae7 	vcvtpl.u32.f32	s15, s15
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801d958:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801d95c:	edcd 7a01 	vstr	s15, [sp, #4]
 801d960:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801d964:	f820 2015 	strh.w	r2, [r0, r5, lsl #1]
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801d968:	d3d7      	bcc.n	801d91a <Rabs_graph_to_display+0x3a>
		q++;
	}
}
 801d96a:	b002      	add	sp, #8
 801d96c:	ecbd 8b02 	vpop	{d8}
 801d970:	bd70      	pop	{r4, r5, r6, pc}
 801d972:	bf00      	nop
 801d974:	43998000 	.word	0x43998000
 801d978:	43510000 	.word	0x43510000
 801d97c:	200052d8 	.word	0x200052d8
 801d980:	20091340 	.word	0x20091340

0801d984 <Refresh_screen_Graph>:

void Refresh_screen_Graph(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint8_t direction)
{   
 801d984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d988:	b085      	sub	sp, #20
	uint16_t i = 0;
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801d98a:	461d      	mov	r5, r3
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);

        } else if(direction == 0x02)
				{
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801d98c:	f8df 8350 	ldr.w	r8, [pc, #848]	; 801dce0 <Refresh_screen_Graph+0x35c>
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801d990:	2b00      	cmp	r3, #0
 801d992:	bf0c      	ite	eq
 801d994:	23f0      	moveq	r3, #240	; 0xf0
 801d996:	f44f 73a5 	movne.w	r3, #330	; 0x14a
{   
 801d99a:	4682      	mov	sl, r0
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801d99c:	9303      	str	r3, [sp, #12]
 801d99e:	4616      	mov	r6, r2
 801d9a0:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801d9a4:	2400      	movs	r4, #0
        if(direction == 0x00){
 801d9a6:	2d00      	cmp	r5, #0
 801d9a8:	f040 80a0 	bne.w	801daec <Refresh_screen_Graph+0x168>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(68, 18+PARGraph_G/4, 375, 20+PARGraph_G/4, TFT_PAR_Green);
 801d9ac:	f898 3000 	ldrb.w	r3, [r8]
 801d9b0:	07db      	lsls	r3, r3, #31
 801d9b2:	d529      	bpl.n	801da08 <Refresh_screen_Graph+0x84>
 801d9b4:	4bc6      	ldr	r3, [pc, #792]	; (801dcd0 <Refresh_screen_Graph+0x34c>)
 801d9b6:	8819      	ldrh	r1, [r3, #0]
 801d9b8:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801d9bc:	0889      	lsrs	r1, r1, #2
 801d9be:	9300      	str	r3, [sp, #0]
 801d9c0:	f240 1277 	movw	r2, #375	; 0x177
 801d9c4:	f101 0314 	add.w	r3, r1, #20
 801d9c8:	2044      	movs	r0, #68	; 0x44
 801d9ca:	3112      	adds	r1, #18
 801d9cc:	f000 fa66 	bl	801de9c <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_R/4, 375, 20+PARGraph_R/4, TFT_PAR_Red);
 801d9d0:	4bc0      	ldr	r3, [pc, #768]	; (801dcd4 <Refresh_screen_Graph+0x350>)
 801d9d2:	8819      	ldrh	r1, [r3, #0]
 801d9d4:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801d9d8:	0889      	lsrs	r1, r1, #2
 801d9da:	9300      	str	r3, [sp, #0]
 801d9dc:	f240 1277 	movw	r2, #375	; 0x177
 801d9e0:	f101 0314 	add.w	r3, r1, #20
 801d9e4:	2044      	movs	r0, #68	; 0x44
 801d9e6:	3112      	adds	r1, #18
 801d9e8:	f000 fa58 	bl	801de9c <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_IR/4, 375, 20+PARGraph_IR/4, TFT_PAR_IRed);}
 801d9ec:	4bba      	ldr	r3, [pc, #744]	; (801dcd8 <Refresh_screen_Graph+0x354>)
 801d9ee:	8819      	ldrh	r1, [r3, #0]
 801d9f0:	f641 3346 	movw	r3, #6982	; 0x1b46
 801d9f4:	0889      	lsrs	r1, r1, #2
 801d9f6:	9300      	str	r3, [sp, #0]
 801d9f8:	f240 1277 	movw	r2, #375	; 0x177
 801d9fc:	f101 0314 	add.w	r3, r1, #20
 801da00:	2044      	movs	r0, #68	; 0x44
 801da02:	3112      	adds	r1, #18
 801da04:	f000 fa4a 	bl	801de9c <TFT_FillRectangle_DMA>
 801da08:	b2a2      	uxth	r2, r4
 801da0a:	f10a 0301 	add.w	r3, sl, #1
 801da0e:	eb02 000a 	add.w	r0, r2, sl
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801da12:	8831      	ldrh	r1, [r6, #0]
 801da14:	f898 7000 	ldrb.w	r7, [r8]
 801da18:	441a      	add	r2, r3
 801da1a:	8873      	ldrh	r3, [r6, #2]
 801da1c:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801da20:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801da24:	07ff      	lsls	r7, r7, #31
 801da26:	b280      	uxth	r0, r0
 801da28:	b289      	uxth	r1, r1
 801da2a:	b292      	uxth	r2, r2
 801da2c:	b29b      	uxth	r3, r3
 801da2e:	f140 8161 	bpl.w	801dcf4 <Refresh_screen_Graph+0x370>
 801da32:	4faa      	ldr	r7, [pc, #680]	; (801dcdc <Refresh_screen_Graph+0x358>)
 801da34:	883f      	ldrh	r7, [r7, #0]
 801da36:	08bf      	lsrs	r7, r7, #2
 801da38:	eb0a 0c04 	add.w	ip, sl, r4
 801da3c:	3712      	adds	r7, #18
 801da3e:	4567      	cmp	r7, ip
 801da40:	f280 8158 	bge.w	801dcf4 <Refresh_screen_Graph+0x370>
 801da44:	4fa2      	ldr	r7, [pc, #648]	; (801dcd0 <Refresh_screen_Graph+0x34c>)
 801da46:	883f      	ldrh	r7, [r7, #0]
 801da48:	08bf      	lsrs	r7, r7, #2
 801da4a:	3712      	adds	r7, #18
 801da4c:	4567      	cmp	r7, ip
 801da4e:	f280 8153 	bge.w	801dcf8 <Refresh_screen_Graph+0x374>
																																							(ZeroX+i < 19+PARGraph_R/4) ? TFT_PAR_Green :
 801da52:	4fa0      	ldr	r7, [pc, #640]	; (801dcd4 <Refresh_screen_Graph+0x350>)
 801da54:	883f      	ldrh	r7, [r7, #0]
 801da56:	08bf      	lsrs	r7, r7, #2
 801da58:	3712      	adds	r7, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801da5a:	4567      	cmp	r7, ip
 801da5c:	f280 814f 	bge.w	801dcfe <Refresh_screen_Graph+0x37a>
																																							(ZeroX+i < 19+PARGraph_IR/4) ? TFT_PAR_Red : TFT_PAR_IRed) : TFT_Black_Bkgr);
 801da60:	4f9d      	ldr	r7, [pc, #628]	; (801dcd8 <Refresh_screen_Graph+0x354>)
 801da62:	f8b7 e000 	ldrh.w	lr, [r7]
 801da66:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801da6a:	f10e 0e12 	add.w	lr, lr, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801da6e:	f641 3b46 	movw	fp, #6982	; 0x1b46
 801da72:	f24f 57b9 	movw	r7, #62905	; 0xf5b9
 801da76:	45e6      	cmp	lr, ip
 801da78:	bfb8      	it	lt
 801da7a:	465f      	movlt	r7, fp
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
					
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801da7c:	9700      	str	r7, [sp, #0]
 801da7e:	f000 ffdf 	bl	801ea40 <DrawLineX>
 801da82:	3401      	adds	r4, #1
	 for(i = 0; i < graph_lenht; i++)
 801da84:	9a03      	ldr	r2, [sp, #12]
 801da86:	b2a3      	uxth	r3, r4
 801da88:	429a      	cmp	r2, r3
 801da8a:	f106 0602 	add.w	r6, r6, #2
 801da8e:	f1a9 0902 	sub.w	r9, r9, #2
 801da92:	d888      	bhi.n	801d9a6 <Refresh_screen_Graph+0x22>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
           	:TFT_Black_Bkgr);
				}
			}
		Spectral_Axes(direction);
		 if(Graph_Field&V_lambda)
 801da94:	4c92      	ldr	r4, [pc, #584]	; (801dce0 <Refresh_screen_Graph+0x35c>)
		Spectral_Axes(direction);
 801da96:	4628      	mov	r0, r5
 801da98:	f7ff fba8 	bl	801d1ec <Spectral_Axes>
		 if(Graph_Field&V_lambda)
 801da9c:	7822      	ldrb	r2, [r4, #0]
 801da9e:	0752      	lsls	r2, r2, #29
 801daa0:	d50e      	bpl.n	801dac0 <Refresh_screen_Graph+0x13c>
			{
					Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, direction);
 801daa2:	2114      	movs	r1, #20
 801daa4:	4608      	mov	r0, r1
 801daa6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801daaa:	4a8e      	ldr	r2, [pc, #568]	; (801dce4 <Refresh_screen_Graph+0x360>)
 801daac:	9500      	str	r5, [sp, #0]
 801daae:	f7ff fe2b 	bl	801d708 <Spectral_DrawGraph_Const>
					Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, direction);
 801dab2:	2114      	movs	r1, #20
 801dab4:	9500      	str	r5, [sp, #0]
 801dab6:	231f      	movs	r3, #31
 801dab8:	4a8b      	ldr	r2, [pc, #556]	; (801dce8 <Refresh_screen_Graph+0x364>)
 801daba:	4608      	mov	r0, r1
 801dabc:	f7ff fe24 	bl	801d708 <Spectral_DrawGraph_Const>
					}
			
			if(Graph_Field&EbEr_graph)
 801dac0:	7823      	ldrb	r3, [r4, #0]
 801dac2:	079b      	lsls	r3, r3, #30
 801dac4:	d50f      	bpl.n	801dae6 <Refresh_screen_Graph+0x162>
					{
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, direction);
 801dac6:	2114      	movs	r1, #20
 801dac8:	4608      	mov	r0, r1
 801daca:	f240 33ef 	movw	r3, #1007	; 0x3ef
 801dace:	4a87      	ldr	r2, [pc, #540]	; (801dcec <Refresh_screen_Graph+0x368>)
 801dad0:	9500      	str	r5, [sp, #0]
 801dad2:	f7ff fe19 	bl	801d708 <Spectral_DrawGraph_Const>
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, direction);
 801dad6:	2114      	movs	r1, #20
 801dad8:	9500      	str	r5, [sp, #0]
 801dada:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801dade:	4a84      	ldr	r2, [pc, #528]	; (801dcf0 <Refresh_screen_Graph+0x36c>)
 801dae0:	4608      	mov	r0, r1
 801dae2:	f7ff fe11 	bl	801d708 <Spectral_DrawGraph_Const>
					}
 801dae6:	b005      	add	sp, #20
 801dae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(direction == 0x01)
 801daec:	2d01      	cmp	r5, #1
 801daee:	d178      	bne.n	801dbe2 <Refresh_screen_Graph+0x25e>
				if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(76+PARGraph_G/3, 45, 79+PARGraph_G/3,253, TFT_PAR_Green);
 801daf0:	f898 3000 	ldrb.w	r3, [r8]
 801daf4:	07db      	lsls	r3, r3, #31
 801daf6:	d530      	bpl.n	801db5a <Refresh_screen_Graph+0x1d6>
 801daf8:	4b75      	ldr	r3, [pc, #468]	; (801dcd0 <Refresh_screen_Graph+0x34c>)
 801dafa:	2703      	movs	r7, #3
 801dafc:	8818      	ldrh	r0, [r3, #0]
 801dafe:	fbb0 f0f7 	udiv	r0, r0, r7
 801db02:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801db06:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801db0a:	304c      	adds	r0, #76	; 0x4c
 801db0c:	9300      	str	r3, [sp, #0]
 801db0e:	b292      	uxth	r2, r2
 801db10:	23fd      	movs	r3, #253	; 0xfd
 801db12:	212d      	movs	r1, #45	; 0x2d
 801db14:	b280      	uxth	r0, r0
 801db16:	f000 f9c1 	bl	801de9c <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_R/3, 45, 79+PARGraph_R/3,253, TFT_PAR_Red);
 801db1a:	4b6e      	ldr	r3, [pc, #440]	; (801dcd4 <Refresh_screen_Graph+0x350>)
 801db1c:	8818      	ldrh	r0, [r3, #0]
 801db1e:	fbb0 f0f7 	udiv	r0, r0, r7
 801db22:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801db26:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801db2a:	304c      	adds	r0, #76	; 0x4c
 801db2c:	9300      	str	r3, [sp, #0]
 801db2e:	b292      	uxth	r2, r2
 801db30:	23fd      	movs	r3, #253	; 0xfd
 801db32:	212d      	movs	r1, #45	; 0x2d
 801db34:	b280      	uxth	r0, r0
 801db36:	f000 f9b1 	bl	801de9c <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_IR/3,45, 79+PARGraph_IR/3,253, TFT_PAR_IRed);}
 801db3a:	4b67      	ldr	r3, [pc, #412]	; (801dcd8 <Refresh_screen_Graph+0x354>)
 801db3c:	8818      	ldrh	r0, [r3, #0]
 801db3e:	fbb0 f7f7 	udiv	r7, r0, r7
 801db42:	f641 3346 	movw	r3, #6982	; 0x1b46
 801db46:	f107 024f 	add.w	r2, r7, #79	; 0x4f
 801db4a:	374c      	adds	r7, #76	; 0x4c
 801db4c:	9300      	str	r3, [sp, #0]
 801db4e:	b292      	uxth	r2, r2
 801db50:	23fd      	movs	r3, #253	; 0xfd
 801db52:	212d      	movs	r1, #45	; 0x2d
 801db54:	b2b8      	uxth	r0, r7
 801db56:	f000 f9a1 	bl	801de9c <TFT_FillRectangle_DMA>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801db5a:	f8b9 0000 	ldrh.w	r0, [r9]
 801db5e:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801db62:	f898 7000 	ldrb.w	r7, [r8]
 801db66:	b2a3      	uxth	r3, r4
 801db68:	f103 0149 	add.w	r1, r3, #73	; 0x49
 801db6c:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
 801db70:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801db74:	3348      	adds	r3, #72	; 0x48
 801db76:	07ff      	lsls	r7, r7, #31
 801db78:	b280      	uxth	r0, r0
 801db7a:	b289      	uxth	r1, r1
 801db7c:	b292      	uxth	r2, r2
 801db7e:	b29b      	uxth	r3, r3
 801db80:	f140 80b8 	bpl.w	801dcf4 <Refresh_screen_Graph+0x370>
											   72+i+1 < 403-PARGraph_IR/3 ? TFT_PAR_IRed:
 801db84:	4f54      	ldr	r7, [pc, #336]	; (801dcd8 <Refresh_screen_Graph+0x354>)
 801db86:	f8b7 c000 	ldrh.w	ip, [r7]
 801db8a:	f240 1793 	movw	r7, #403	; 0x193
 801db8e:	f104 0b49 	add.w	fp, r4, #73	; 0x49
 801db92:	f04f 0e03 	mov.w	lr, #3
 801db96:	fbbc fcfe 	udiv	ip, ip, lr
 801db9a:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801db9e:	45dc      	cmp	ip, fp
 801dba0:	dc19      	bgt.n	801dbd6 <Refresh_screen_Graph+0x252>
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
 801dba2:	f8df c130 	ldr.w	ip, [pc, #304]	; 801dcd4 <Refresh_screen_Graph+0x350>
 801dba6:	f8bc c000 	ldrh.w	ip, [ip]
 801dbaa:	fbbc fcfe 	udiv	ip, ip, lr
 801dbae:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801dbb2:	45dc      	cmp	ip, fp
 801dbb4:	dc12      	bgt.n	801dbdc <Refresh_screen_Graph+0x258>
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801dbb6:	f8df c118 	ldr.w	ip, [pc, #280]	; 801dcd0 <Refresh_screen_Graph+0x34c>
 801dbba:	f8bc c000 	ldrh.w	ip, [ip]
 801dbbe:	fbbc fefe 	udiv	lr, ip, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801dbc2:	f242 2cb2 	movw	ip, #8882	; 0x22b2
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801dbc6:	eba7 0e0e 	sub.w	lr, r7, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801dbca:	f64c 7738 	movw	r7, #53048	; 0xcf38
 801dbce:	45de      	cmp	lr, fp
 801dbd0:	bfd8      	it	le
 801dbd2:	4667      	movle	r7, ip
 801dbd4:	e752      	b.n	801da7c <Refresh_screen_Graph+0xf8>
 801dbd6:	f641 3746 	movw	r7, #6982	; 0x1b46
 801dbda:	e74f      	b.n	801da7c <Refresh_screen_Graph+0xf8>
 801dbdc:	f24f 57b9 	movw	r7, #62905	; 0xf5b9
 801dbe0:	e74c      	b.n	801da7c <Refresh_screen_Graph+0xf8>
        } else if(direction == 0x02)
 801dbe2:	2d02      	cmp	r5, #2
 801dbe4:	f47f af4d 	bne.w	801da82 <Refresh_screen_Graph+0xfe>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801dbe8:	f898 3000 	ldrb.w	r3, [r8]
 801dbec:	07db      	lsls	r3, r3, #31
 801dbee:	d535      	bpl.n	801dc5c <Refresh_screen_Graph+0x2d8>
 801dbf0:	4b37      	ldr	r3, [pc, #220]	; (801dcd0 <Refresh_screen_Graph+0x34c>)
 801dbf2:	f240 1795 	movw	r7, #405	; 0x195
 801dbf6:	8818      	ldrh	r0, [r3, #0]
 801dbf8:	f04f 0b03 	mov.w	fp, #3
 801dbfc:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801dc00:	fbb0 f0fb 	udiv	r0, r0, fp
 801dc04:	1a3a      	subs	r2, r7, r0
 801dc06:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801dc0a:	9300      	str	r3, [sp, #0]
 801dc0c:	b292      	uxth	r2, r2
 801dc0e:	23e3      	movs	r3, #227	; 0xe3
 801dc10:	2113      	movs	r1, #19
 801dc12:	b280      	uxth	r0, r0
 801dc14:	f000 f942 	bl	801de9c <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
 801dc18:	4b2e      	ldr	r3, [pc, #184]	; (801dcd4 <Refresh_screen_Graph+0x350>)
 801dc1a:	8818      	ldrh	r0, [r3, #0]
 801dc1c:	fbb0 f0fb 	udiv	r0, r0, fp
 801dc20:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801dc24:	1a3a      	subs	r2, r7, r0
 801dc26:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801dc2a:	9300      	str	r3, [sp, #0]
 801dc2c:	b292      	uxth	r2, r2
 801dc2e:	23e3      	movs	r3, #227	; 0xe3
 801dc30:	2113      	movs	r1, #19
 801dc32:	b280      	uxth	r0, r0
 801dc34:	f000 f932 	bl	801de9c <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
 801dc38:	4b27      	ldr	r3, [pc, #156]	; (801dcd8 <Refresh_screen_Graph+0x354>)
 801dc3a:	8818      	ldrh	r0, [r3, #0]
 801dc3c:	fbb0 fbfb 	udiv	fp, r0, fp
 801dc40:	f641 3346 	movw	r3, #6982	; 0x1b46
 801dc44:	eba7 020b 	sub.w	r2, r7, fp
 801dc48:	f5cb 7bcc 	rsb	fp, fp, #408	; 0x198
 801dc4c:	9300      	str	r3, [sp, #0]
 801dc4e:	b292      	uxth	r2, r2
 801dc50:	23e3      	movs	r3, #227	; 0xe3
 801dc52:	2113      	movs	r1, #19
 801dc54:	fa1f f08b 	uxth.w	r0, fp
 801dc58:	f000 f920 	bl	801de9c <TFT_FillRectangle_DMA>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801dc5c:	8830      	ldrh	r0, [r6, #0]
 801dc5e:	8872      	ldrh	r2, [r6, #2]
 801dc60:	f898 7000 	ldrb.w	r7, [r8]
 801dc64:	b2a3      	uxth	r3, r4
 801dc66:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 801dc6a:	3012      	adds	r0, #18
 801dc6c:	3212      	adds	r2, #18
 801dc6e:	334d      	adds	r3, #77	; 0x4d
 801dc70:	07ff      	lsls	r7, r7, #31
 801dc72:	b280      	uxth	r0, r0
 801dc74:	b289      	uxth	r1, r1
 801dc76:	b292      	uxth	r2, r2
 801dc78:	b29b      	uxth	r3, r3
 801dc7a:	d53b      	bpl.n	801dcf4 <Refresh_screen_Graph+0x370>
 801dc7c:	4f17      	ldr	r7, [pc, #92]	; (801dcdc <Refresh_screen_Graph+0x358>)
 801dc7e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801dc82:	f8b7 e000 	ldrh.w	lr, [r7]
 801dc86:	2703      	movs	r7, #3
 801dc88:	fbbe fef7 	udiv	lr, lr, r7
 801dc8c:	45e6      	cmp	lr, ip
 801dc8e:	dc31      	bgt.n	801dcf4 <Refresh_screen_Graph+0x370>
           	(76+i < 74+PARGraph_G/3) ? TFT_PAR_Blue : 
 801dc90:	f8df c03c 	ldr.w	ip, [pc, #60]	; 801dcd0 <Refresh_screen_Graph+0x34c>
 801dc94:	f104 0e02 	add.w	lr, r4, #2
 801dc98:	f8bc c000 	ldrh.w	ip, [ip]
 801dc9c:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801dca0:	45f4      	cmp	ip, lr
 801dca2:	dc29      	bgt.n	801dcf8 <Refresh_screen_Graph+0x374>
           	(76+i < 74+PARGraph_R/3) ? TFT_PAR_Green : 
 801dca4:	f8df c02c 	ldr.w	ip, [pc, #44]	; 801dcd4 <Refresh_screen_Graph+0x350>
 801dca8:	f8bc c000 	ldrh.w	ip, [ip]
 801dcac:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801dcb0:	45f4      	cmp	ip, lr
 801dcb2:	dc24      	bgt.n	801dcfe <Refresh_screen_Graph+0x37a>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801dcb4:	f8df c020 	ldr.w	ip, [pc, #32]	; 801dcd8 <Refresh_screen_Graph+0x354>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801dcb8:	f641 3b46 	movw	fp, #6982	; 0x1b46
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801dcbc:	f8bc c000 	ldrh.w	ip, [ip]
 801dcc0:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801dcc4:	f24f 57b9 	movw	r7, #62905	; 0xf5b9
 801dcc8:	45f4      	cmp	ip, lr
 801dcca:	bfd8      	it	le
 801dccc:	465f      	movle	r7, fp
 801dcce:	e6d5      	b.n	801da7c <Refresh_screen_Graph+0xf8>
 801dcd0:	200913ec 	.word	0x200913ec
 801dcd4:	20091550 	.word	0x20091550
 801dcd8:	20091328 	.word	0x20091328
 801dcdc:	2009132a 	.word	0x2009132a
 801dce0:	2000527a 	.word	0x2000527a
 801dce4:	2008c5e2 	.word	0x2008c5e2
 801dce8:	2008cb80 	.word	0x2008cb80
 801dcec:	2008c8ba 	.word	0x2008c8ba
 801dcf0:	2008c31c 	.word	0x2008c31c
 801dcf4:	2763      	movs	r7, #99	; 0x63
 801dcf6:	e6c1      	b.n	801da7c <Refresh_screen_Graph+0xf8>
 801dcf8:	f242 27b2 	movw	r7, #8882	; 0x22b2
 801dcfc:	e6be      	b.n	801da7c <Refresh_screen_Graph+0xf8>
 801dcfe:	f64c 7738 	movw	r7, #53048	; 0xcf38
 801dd02:	e6bb      	b.n	801da7c <Refresh_screen_Graph+0xf8>

0801dd04 <TS_IO_Read>:
{

  }

uint8_t TS_IO_Read(uint8_t DeviceAddr, uint8_t Reg)
{
 801dd04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 801dd06:	aa06      	add	r2, sp, #24
 801dd08:	2300      	movs	r3, #0
 801dd0a:	f802 3d01 	strb.w	r3, [r2, #-1]!
  HAL_I2C_Mem_Read(&hi2c1, DeviceAddr, Reg, I2C_MEMADD_SIZE_8BIT, &read_value, 1, 0x100);
 801dd0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801dd12:	9302      	str	r3, [sp, #8]
 801dd14:	2301      	movs	r3, #1
 801dd16:	e88d 000c 	stmia.w	sp, {r2, r3}
 801dd1a:	460a      	mov	r2, r1
 801dd1c:	4601      	mov	r1, r0
 801dd1e:	4804      	ldr	r0, [pc, #16]	; (801dd30 <TS_IO_Read+0x2c>)
 801dd20:	f7e4 fef0 	bl	8002b04 <HAL_I2C_Mem_Read>

  return read_value;
}
 801dd24:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801dd28:	b007      	add	sp, #28
 801dd2a:	f85d fb04 	ldr.w	pc, [sp], #4
 801dd2e:	bf00      	nop
 801dd30:	20090fc8 	.word	0x20090fc8

0801dd34 <TS_ReadID>:
  HAL_I2C_Mem_Write(&hi2c1, DeviceAddr, (uint8_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x100);
  if(status != HAL_OK) Error();
}

uint8_t TS_ReadID(uint8_t DeviceAddr)
{
 801dd34:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 801dd36:	2300      	movs	r3, #0
{
 801dd38:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 801dd3a:	f88d 3007 	strb.w	r3, [sp, #7]
 801dd3e:	2403      	movs	r4, #3
  uint8_t nbReadAttempts = 0;
  int8_t bFoundDevice = 0;

  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
  {
    ucReadId = TS_IO_Read(DeviceAddr, ID_G_CIPHER);
 801dd40:	21a3      	movs	r1, #163	; 0xa3
 801dd42:	4628      	mov	r0, r5
 801dd44:	f7ff ffde 	bl	801dd04 <TS_IO_Read>
 801dd48:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == CHIP_ID)
 801dd4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801dd50:	3c01      	subs	r4, #1
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801dd52:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    if(ucReadId == CHIP_ID)
 801dd56:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801dd58:	d001      	beq.n	801dd5e <TS_ReadID+0x2a>
 801dd5a:	2b0a      	cmp	r3, #10
 801dd5c:	d1f0      	bne.n	801dd40 <TS_ReadID+0xc>
    {
      bFoundDevice = 1;
    }
  }
  return (ucReadId);
 801dd5e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 801dd62:	b003      	add	sp, #12
 801dd64:	bd30      	pop	{r4, r5, pc}

0801dd66 <Touch_Ini>:

void Touch_Ini(void)
{
 801dd66:	b508      	push	{r3, lr}
	if(TS_ReadID(TS_I2C_ADDRESS) != CHIP_ID) Error();
 801dd68:	2070      	movs	r0, #112	; 0x70
 801dd6a:	f7ff ffe3 	bl	801dd34 <TS_ReadID>
  HAL_Delay(200);
 801dd6e:	20c8      	movs	r0, #200	; 0xc8
}
 801dd70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(200);
 801dd74:	f7e3 b95a 	b.w	800102c <HAL_Delay>

0801dd78 <TS_Get_XY1>:

void TS_Get_XY1(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801dd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t coord = 0x0000;
	uint16_t temp;
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0x0F00;
 801dd7a:	b2c5      	uxtb	r5, r0
{
 801dd7c:	460e      	mov	r6, r1
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0x0F00;
 801dd7e:	4628      	mov	r0, r5
 801dd80:	2103      	movs	r1, #3
{
 801dd82:	4617      	mov	r7, r2
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0x0F00;
 801dd84:	f7ff ffbe 	bl	801dd04 <TS_IO_Read>
 801dd88:	4c11      	ldr	r4, [pc, #68]	; (801ddd0 <TS_Get_XY1+0x58>)
 801dd8a:	0200      	lsls	r0, r0, #8
 801dd8c:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 801dd90:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801dd92:	2104      	movs	r1, #4
 801dd94:	4628      	mov	r0, r5
 801dd96:	f7ff ffb5 	bl	801dd04 <TS_IO_Read>
 801dd9a:	8823      	ldrh	r3, [r4, #0]
 801dd9c:	4318      	orrs	r0, r3
	
	if (Orientation90)
	{
		temp = coord;
		*Y = X_SIZE_Touch - coord;
 801dd9e:	4b0d      	ldr	r3, [pc, #52]	; (801ddd4 <TS_Get_XY1+0x5c>)
 801dda0:	881b      	ldrh	r3, [r3, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801dda2:	b280      	uxth	r0, r0
 801dda4:	8020      	strh	r0, [r4, #0]
		*Y = X_SIZE_Touch - coord;
 801dda6:	1a18      	subs	r0, r3, r0
 801dda8:	8038      	strh	r0, [r7, #0]
	}
	else{
		*X = coord;
	}
	
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_YH) << 8) & 0x0F00;
 801ddaa:	2105      	movs	r1, #5
 801ddac:	4628      	mov	r0, r5
 801ddae:	f7ff ffa9 	bl	801dd04 <TS_IO_Read>
 801ddb2:	0200      	lsls	r0, r0, #8
 801ddb4:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 801ddb8:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801ddba:	2106      	movs	r1, #6
 801ddbc:	4628      	mov	r0, r5
 801ddbe:	f7ff ffa1 	bl	801dd04 <TS_IO_Read>
 801ddc2:	8823      	ldrh	r3, [r4, #0]
 801ddc4:	4318      	orrs	r0, r3
 801ddc6:	b280      	uxth	r0, r0
 801ddc8:	8020      	strh	r0, [r4, #0]
	
		if (Orientation90)
	{
		*X = coord;
 801ddca:	8030      	strh	r0, [r6, #0]
 801ddcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ddce:	bf00      	nop
 801ddd0:	200055a4 	.word	0x200055a4
 801ddd4:	20000a3e 	.word	0x20000a3e

0801ddd8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 801ddd8:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 801ddda:	2301      	movs	r3, #1
 801dddc:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 801dde0:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801dde4:	2b01      	cmp	r3, #1
 801dde6:	d10e      	bne.n	801de06 <BSP_SD_Init+0x2e>
  sd_state = HAL_SD_Init(&hsd1);
 801dde8:	4808      	ldr	r0, [pc, #32]	; (801de0c <BSP_SD_Init+0x34>)
 801ddea:	f7e7 fc97 	bl	800571c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 801ddee:	b938      	cbnz	r0, 801de00 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801ddf0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801ddf4:	4805      	ldr	r0, [pc, #20]	; (801de0c <BSP_SD_Init+0x34>)
 801ddf6:	f7e7 fc0d 	bl	8005614 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 801ddfa:	3000      	adds	r0, #0
 801ddfc:	bf18      	it	ne
 801ddfe:	2001      	movne	r0, #1
}
 801de00:	b003      	add	sp, #12
 801de02:	f85d fb04 	ldr.w	pc, [sp], #4
    return MSD_ERROR_SD_NOT_PRESENT;
 801de06:	2002      	movs	r0, #2
 801de08:	e7fa      	b.n	801de00 <BSP_SD_Init+0x28>
 801de0a:	bf00      	nop
 801de0c:	20091068 	.word	0x20091068

0801de10 <BSP_SD_ReadBlocks_DMA>:
{
 801de10:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801de12:	4613      	mov	r3, r2
 801de14:	460a      	mov	r2, r1
 801de16:	4601      	mov	r1, r0
 801de18:	4803      	ldr	r0, [pc, #12]	; (801de28 <BSP_SD_ReadBlocks_DMA+0x18>)
 801de1a:	f7e7 f833 	bl	8004e84 <HAL_SD_ReadBlocks_DMA>
}
 801de1e:	3000      	adds	r0, #0
 801de20:	bf18      	it	ne
 801de22:	2001      	movne	r0, #1
 801de24:	bd08      	pop	{r3, pc}
 801de26:	bf00      	nop
 801de28:	20091068 	.word	0x20091068

0801de2c <BSP_SD_WriteBlocks_DMA>:
{
 801de2c:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801de2e:	4613      	mov	r3, r2
 801de30:	460a      	mov	r2, r1
 801de32:	4601      	mov	r1, r0
 801de34:	4803      	ldr	r0, [pc, #12]	; (801de44 <BSP_SD_WriteBlocks_DMA+0x18>)
 801de36:	f7e7 f897 	bl	8004f68 <HAL_SD_WriteBlocks_DMA>
}
 801de3a:	3000      	adds	r0, #0
 801de3c:	bf18      	it	ne
 801de3e:	2001      	movne	r0, #1
 801de40:	bd08      	pop	{r3, pc}
 801de42:	bf00      	nop
 801de44:	20091068 	.word	0x20091068

0801de48 <BSP_SD_GetCardState>:
{
 801de48:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801de4a:	4803      	ldr	r0, [pc, #12]	; (801de58 <BSP_SD_GetCardState+0x10>)
 801de4c:	f7e7 fc9f 	bl	800578e <HAL_SD_GetCardState>
}
 801de50:	3804      	subs	r0, #4
 801de52:	bf18      	it	ne
 801de54:	2001      	movne	r0, #1
 801de56:	bd08      	pop	{r3, pc}
 801de58:	20091068 	.word	0x20091068

0801de5c <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801de5c:	4601      	mov	r1, r0
 801de5e:	4801      	ldr	r0, [pc, #4]	; (801de64 <BSP_SD_GetCardInfo+0x8>)
 801de60:	f7e7 bbc6 	b.w	80055f0 <HAL_SD_GetCardInfo>
 801de64:	20091068 	.word	0x20091068

0801de68 <BSP_SD_WriteCpltCallback>:
 801de68:	4770      	bx	lr

0801de6a <HAL_SD_TxCpltCallback>:
{
 801de6a:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 801de6c:	f7ff fffc 	bl	801de68 <BSP_SD_WriteCpltCallback>
 801de70:	bd08      	pop	{r3, pc}

0801de72 <BSP_SD_ReadCpltCallback>:
{
 801de72:	4770      	bx	lr

0801de74 <HAL_SD_RxCpltCallback>:
{
 801de74:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 801de76:	f7ff fffc 	bl	801de72 <BSP_SD_ReadCpltCallback>
 801de7a:	bd08      	pop	{r3, pc}

0801de7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 801de7c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801de7e:	4903      	ldr	r1, [pc, #12]	; (801de8c <MX_FATFS_Init+0x10>)
 801de80:	4803      	ldr	r0, [pc, #12]	; (801de90 <MX_FATFS_Init+0x14>)
 801de82:	f7eb fe47 	bl	8009b14 <FATFS_LinkDriver>
 801de86:	4b03      	ldr	r3, [pc, #12]	; (801de94 <MX_FATFS_Init+0x18>)
 801de88:	7018      	strb	r0, [r3, #0]
 801de8a:	bd08      	pop	{r3, pc}
 801de8c:	2008eee5 	.word	0x2008eee5
 801de90:	0803386c 	.word	0x0803386c
 801de94:	2008eee4 	.word	0x2008eee4

0801de98 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 801de98:	2000      	movs	r0, #0
 801de9a:	4770      	bx	lr

0801de9c <TFT_FillRectangle_DMA>:
    }
}

void TFT_FillRectangle_DMA(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
  if(x1>x2) swap(x1,x2);
 801de9c:	4290      	cmp	r0, r2
{
 801de9e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dea2:	461d      	mov	r5, r3
  if(x1>x2) swap(x1,x2);
 801dea4:	bf88      	it	hi
 801dea6:	4603      	movhi	r3, r0
{
 801dea8:	4680      	mov	r8, r0
  if(x1>x2) swap(x1,x2);
 801deaa:	bf84      	itt	hi
 801deac:	4690      	movhi	r8, r2
 801deae:	461a      	movhi	r2, r3
  if(y1>y2) swap(y1,y2);
 801deb0:	42a9      	cmp	r1, r5
 801deb2:	bf88      	it	hi
 801deb4:	460b      	movhi	r3, r1
{
 801deb6:	460f      	mov	r7, r1
  if(y1>y2) swap(y1,y2);
 801deb8:	bf84      	itt	hi
 801deba:	462f      	movhi	r7, r5
 801debc:	461d      	movhi	r5, r3

  uint32_t addr = 0;
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801debe:	4b15      	ldr	r3, [pc, #84]	; (801df14 <TFT_FillRectangle_DMA+0x78>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801dec0:	4e15      	ldr	r6, [pc, #84]	; (801df18 <TFT_FillRectangle_DMA+0x7c>)
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801dec2:	f8d3 9060 	ldr.w	r9, [r3, #96]	; 0x60
 801dec6:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
{
 801deca:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_R2M;
 801dece:	f44f 3340 	mov.w	r3, #196608	; 0x30000

  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801ded2:	eba2 0408 	sub.w	r4, r2, r8
  hdma2d.Init.Mode = DMA2D_R2M;
 801ded6:	6073      	str	r3, [r6, #4]

  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801ded8:	4630      	mov	r0, r6
  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801deda:	eba9 0304 	sub.w	r3, r9, r4
 801dede:	60f3      	str	r3, [r6, #12]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801dee0:	f7e3 ffc6 	bl	8001e70 <HAL_DMA2D_Init>
 801dee4:	b990      	cbnz	r0, 801df0c <TFT_FillRectangle_DMA+0x70>
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801dee6:	fb09 8207 	mla	r2, r9, r7, r8
  {
    if (HAL_DMA2D_Start(&hdma2d, color, addr, x2-x1, y2-y1) == HAL_OK)
 801deea:	1bed      	subs	r5, r5, r7
 801deec:	9500      	str	r5, [sp, #0]
 801deee:	4623      	mov	r3, r4
 801def0:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 801def4:	4651      	mov	r1, sl
 801def6:	4630      	mov	r0, r6
 801def8:	f7e4 f804 	bl	8001f04 <HAL_DMA2D_Start>
 801defc:	b930      	cbnz	r0, 801df0c <TFT_FillRectangle_DMA+0x70>
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801defe:	210a      	movs	r1, #10
 801df00:	4630      	mov	r0, r6
    }
  }
}
 801df02:	b003      	add	sp, #12
 801df04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801df08:	f7e4 b815 	b.w	8001f36 <HAL_DMA2D_PollForTransfer>
}
 801df0c:	b003      	add	sp, #12
 801df0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df12:	bf00      	nop
 801df14:	200911e8 	.word	0x200911e8
 801df18:	200913fc 	.word	0x200913fc

0801df1c <TFT_FillScreen_DMA>:
		*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(i*2))=(uint16_t) color;
	}
}

void TFT_FillScreen_DMA(uint16_t color)
{
 801df1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  hdma2d.Init.Mode = DMA2D_R2M;
 801df1e:	4c10      	ldr	r4, [pc, #64]	; (801df60 <TFT_FillScreen_DMA+0x44>)
 801df20:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 801df24:	4606      	mov	r6, r0
  hdma2d.Init.Mode = DMA2D_R2M;
 801df26:	6063      	str	r3, [r4, #4]
  hdma2d.Init.OutputOffset = 0;
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801df28:	2502      	movs	r5, #2
  hdma2d.Init.OutputOffset = 0;
 801df2a:	2300      	movs	r3, #0
	
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801df2c:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = 0;
 801df2e:	60e3      	str	r3, [r4, #12]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801df30:	60a5      	str	r5, [r4, #8]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801df32:	f7e3 ff9d 	bl	8001e70 <HAL_DMA2D_Init>
 801df36:	b980      	cbnz	r0, 801df5a <TFT_FillScreen_DMA+0x3e>
  {
    if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 801df38:	4a0a      	ldr	r2, [pc, #40]	; (801df64 <TFT_FillScreen_DMA+0x48>)
 801df3a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801df3c:	9300      	str	r3, [sp, #0]
 801df3e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 801df40:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801df42:	4631      	mov	r1, r6
 801df44:	4620      	mov	r0, r4
 801df46:	f7e3 ffdd 	bl	8001f04 <HAL_DMA2D_Start>
 801df4a:	b930      	cbnz	r0, 801df5a <TFT_FillScreen_DMA+0x3e>
    hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801df4c:	4629      	mov	r1, r5
 801df4e:	4620      	mov	r0, r4
    }
  }
}
 801df50:	b002      	add	sp, #8
 801df52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801df56:	f7e3 bfee 	b.w	8001f36 <HAL_DMA2D_PollForTransfer>
}
 801df5a:	b002      	add	sp, #8
 801df5c:	bd70      	pop	{r4, r5, r6, pc}
 801df5e:	bf00      	nop
 801df60:	200913fc 	.word	0x200913fc
 801df64:	200911e8 	.word	0x200911e8

0801df68 <TFT_DrawPixel>:


//----------------------------------------
void TFT_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 801df68:	b510      	push	{r4, lr}
	
//	tmp = Xpos;
//	Xpos = Ypos;
//	Ypos = X_SIZE - 1 - tmp;
////////////////////////////////////////////rotate -90
	if(TFT_direction == 0x00){
 801df6a:	4b14      	ldr	r3, [pc, #80]	; (801dfbc <TFT_DrawPixel+0x54>)
 801df6c:	781c      	ldrb	r4, [r3, #0]
 801df6e:	b97c      	cbnz	r4, 801df90 <TFT_DrawPixel+0x28>

	tmp = Xpos;
	Xpos = Ypos;
	Ypos = Y_SIZE - 1 - tmp;
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801df70:	4b13      	ldr	r3, [pc, #76]	; (801dfc0 <TFT_DrawPixel+0x58>)
 801df72:	681b      	ldr	r3, [r3, #0]
 801df74:	1a5b      	subs	r3, r3, r1
	Ypos = Y_SIZE - 1 - tmp;
 801df76:	4913      	ldr	r1, [pc, #76]	; (801dfc4 <TFT_DrawPixel+0x5c>)
 801df78:	8809      	ldrh	r1, [r1, #0]
 801df7a:	3901      	subs	r1, #1
 801df7c:	1a09      	subs	r1, r1, r0
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801df7e:	4812      	ldr	r0, [pc, #72]	; (801dfc8 <TFT_DrawPixel+0x60>)
 801df80:	6e04      	ldr	r4, [r0, #96]	; 0x60
 801df82:	b289      	uxth	r1, r1
 801df84:	fb04 3111 	mls	r1, r4, r1, r3
 801df88:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	else	if (TFT_direction == 0x01){
//////////////////////////////////////////// 0 - no rotate
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
	}else	if (TFT_direction == 0x02){
////////////////////////////////////////////rotate -180
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801df8a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 801df8e:	bd10      	pop	{r4, pc}
	else	if (TFT_direction == 0x01){
 801df90:	781c      	ldrb	r4, [r3, #0]
 801df92:	2c01      	cmp	r4, #1
 801df94:	d105      	bne.n	801dfa2 <TFT_DrawPixel+0x3a>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 801df96:	4c0c      	ldr	r4, [pc, #48]	; (801dfc8 <TFT_DrawPixel+0x60>)
 801df98:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801df9a:	fb03 0101 	mla	r1, r3, r1, r0
 801df9e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801dfa0:	e7f3      	b.n	801df8a <TFT_DrawPixel+0x22>
	}else	if (TFT_direction == 0x02){
 801dfa2:	781b      	ldrb	r3, [r3, #0]
 801dfa4:	2b02      	cmp	r3, #2
 801dfa6:	d1f2      	bne.n	801df8e <TFT_DrawPixel+0x26>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801dfa8:	4b05      	ldr	r3, [pc, #20]	; (801dfc0 <TFT_DrawPixel+0x58>)
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	1a18      	subs	r0, r3, r0
 801dfae:	4b06      	ldr	r3, [pc, #24]	; (801dfc8 <TFT_DrawPixel+0x60>)
 801dfb0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801dfb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801dfb4:	fb04 0111 	mls	r1, r4, r1, r0
 801dfb8:	e7e7      	b.n	801df8a <TFT_DrawPixel+0x22>
 801dfba:	bf00      	nop
 801dfbc:	20005218 	.word	0x20005218
 801dfc0:	20000a40 	.word	0x20000a40
 801dfc4:	20000a46 	.word	0x20000a46
 801dfc8:	200911e8 	.word	0x200911e8

0801dfcc <TFT_DrawCircleCorner>:
{
 801dfcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfd0:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 801dfd2:	b293      	uxth	r3, r2
 801dfd4:	f1c3 0401 	rsb	r4, r3, #1
	int16_t ddF_y = -2 * r;
 801dfd8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801dfdc:	b085      	sub	sp, #20
	int16_t ddF_y = -2 * r;
 801dfde:	005b      	lsls	r3, r3, #1
 801dfe0:	b21b      	sxth	r3, r3
 801dfe2:	9301      	str	r3, [sp, #4]
    while (x < y) {
 801dfe4:	2300      	movs	r3, #0
 801dfe6:	9300      	str	r3, [sp, #0]
        if (corner & 0x01) {	
 801dfe8:	f00a 0301 	and.w	r3, sl, #1
{
 801dfec:	4689      	mov	r9, r1
 801dfee:	4616      	mov	r6, r2
	int16_t f = 1 - r;
 801dff0:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801dff2:	9302      	str	r3, [sp, #8]
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801dff4:	b287      	uxth	r7, r0
    while (x < y) {
 801dff6:	f9bd 3000 	ldrsh.w	r3, [sp]
 801dffa:	42b3      	cmp	r3, r6
 801dffc:	db02      	blt.n	801e004 <TFT_DrawCircleCorner+0x38>
}
 801dffe:	b005      	add	sp, #20
 801e000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801e004:	2c00      	cmp	r4, #0
 801e006:	db08      	blt.n	801e01a <TFT_DrawCircleCorner+0x4e>
            ddF_y += 2;
 801e008:	9b01      	ldr	r3, [sp, #4]
 801e00a:	3302      	adds	r3, #2
 801e00c:	b29b      	uxth	r3, r3
            y--;
 801e00e:	3e01      	subs	r6, #1
            ddF_y += 2;
 801e010:	b21a      	sxth	r2, r3
            f += ddF_y;
 801e012:	441c      	add	r4, r3
            y--;
 801e014:	b236      	sxth	r6, r6
            ddF_y += 2;
 801e016:	9201      	str	r2, [sp, #4]
            f += ddF_y;
 801e018:	b224      	sxth	r4, r4
 801e01a:	f8bd 5000 	ldrh.w	r5, [sp]
        if (corner & 0x01) {	
 801e01e:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801e020:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801e024:	3403      	adds	r4, #3
 801e026:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801e028:	b1e3      	cbz	r3, 801e064 <TFT_DrawCircleCorner+0x98>
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801e02a:	fa1f f889 	uxth.w	r8, r9
 801e02e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e032:	9303      	str	r3, [sp, #12]
 801e034:	fa1f fb86 	uxth.w	fp, r6
 801e038:	f108 3eff 	add.w	lr, r8, #4294967295
 801e03c:	ebae 0e05 	sub.w	lr, lr, r5
 801e040:	eba7 000b 	sub.w	r0, r7, fp
 801e044:	461a      	mov	r2, r3
 801e046:	fa1f f18e 	uxth.w	r1, lr
 801e04a:	b280      	uxth	r0, r0
 801e04c:	f7ff ff8c 	bl	801df68 <TFT_DrawPixel>
			TFT_DrawPixel(x0 - x, y0 - y, color);
 801e050:	1e78      	subs	r0, r7, #1
 801e052:	9b03      	ldr	r3, [sp, #12]
 801e054:	eba8 010b 	sub.w	r1, r8, fp
 801e058:	1b40      	subs	r0, r0, r5
 801e05a:	461a      	mov	r2, r3
 801e05c:	b289      	uxth	r1, r1
 801e05e:	b280      	uxth	r0, r0
 801e060:	f7ff ff82 	bl	801df68 <TFT_DrawPixel>
        if (corner & 0x02) {	
 801e064:	f01a 0f02 	tst.w	sl, #2
 801e068:	d01a      	beq.n	801e0a0 <TFT_DrawCircleCorner+0xd4>
			TFT_DrawPixel(x0 + x, y0 - y, color);
 801e06a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e06e:	9303      	str	r3, [sp, #12]
 801e070:	fa1f f889 	uxth.w	r8, r9
 801e074:	fa1f fb86 	uxth.w	fp, r6
 801e078:	1c78      	adds	r0, r7, #1
 801e07a:	eba8 010b 	sub.w	r1, r8, fp
 801e07e:	4428      	add	r0, r5
 801e080:	461a      	mov	r2, r3
 801e082:	b289      	uxth	r1, r1
 801e084:	b280      	uxth	r0, r0
 801e086:	f7ff ff6f 	bl	801df68 <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 - x, color);
 801e08a:	f108 31ff 	add.w	r1, r8, #4294967295
 801e08e:	9b03      	ldr	r3, [sp, #12]
 801e090:	1b49      	subs	r1, r1, r5
 801e092:	eb07 000b 	add.w	r0, r7, fp
 801e096:	461a      	mov	r2, r3
 801e098:	b289      	uxth	r1, r1
 801e09a:	b280      	uxth	r0, r0
 801e09c:	f7ff ff64 	bl	801df68 <TFT_DrawPixel>
		if (corner & 0x04) {	
 801e0a0:	f01a 0f04 	tst.w	sl, #4
 801e0a4:	d01a      	beq.n	801e0dc <TFT_DrawCircleCorner+0x110>
			TFT_DrawPixel(x0 + x, y0 + y, color);
 801e0a6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e0aa:	9303      	str	r3, [sp, #12]
 801e0ac:	fa1f f889 	uxth.w	r8, r9
 801e0b0:	fa1f fb86 	uxth.w	fp, r6
 801e0b4:	1c78      	adds	r0, r7, #1
 801e0b6:	eb08 010b 	add.w	r1, r8, fp
 801e0ba:	4428      	add	r0, r5
 801e0bc:	461a      	mov	r2, r3
 801e0be:	b289      	uxth	r1, r1
 801e0c0:	b280      	uxth	r0, r0
 801e0c2:	f7ff ff51 	bl	801df68 <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 + x, color);
 801e0c6:	f108 0101 	add.w	r1, r8, #1
 801e0ca:	9b03      	ldr	r3, [sp, #12]
 801e0cc:	4429      	add	r1, r5
 801e0ce:	eb07 000b 	add.w	r0, r7, fp
 801e0d2:	461a      	mov	r2, r3
 801e0d4:	b289      	uxth	r1, r1
 801e0d6:	b280      	uxth	r0, r0
 801e0d8:	f7ff ff46 	bl	801df68 <TFT_DrawPixel>
        if (corner & 0x08) {	
 801e0dc:	f01a 0f08 	tst.w	sl, #8
 801e0e0:	d01a      	beq.n	801e118 <TFT_DrawCircleCorner+0x14c>
			TFT_DrawPixel(x0 - x, y0 + y, color);
 801e0e2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e0e6:	9303      	str	r3, [sp, #12]
 801e0e8:	fa1f fb89 	uxth.w	fp, r9
 801e0ec:	fa1f f886 	uxth.w	r8, r6
 801e0f0:	1e78      	subs	r0, r7, #1
 801e0f2:	eb0b 0108 	add.w	r1, fp, r8
 801e0f6:	1b40      	subs	r0, r0, r5
 801e0f8:	461a      	mov	r2, r3
 801e0fa:	b289      	uxth	r1, r1
 801e0fc:	b280      	uxth	r0, r0
 801e0fe:	f7ff ff33 	bl	801df68 <TFT_DrawPixel>
			TFT_DrawPixel(x0 - y, y0 + x, color);
 801e102:	f10b 0101 	add.w	r1, fp, #1
 801e106:	9b03      	ldr	r3, [sp, #12]
 801e108:	4429      	add	r1, r5
 801e10a:	eba7 0008 	sub.w	r0, r7, r8
 801e10e:	461a      	mov	r2, r3
 801e110:	b289      	uxth	r1, r1
 801e112:	b280      	uxth	r0, r0
 801e114:	f7ff ff28 	bl	801df68 <TFT_DrawPixel>
 801e118:	9b00      	ldr	r3, [sp, #0]
 801e11a:	3301      	adds	r3, #1
 801e11c:	9300      	str	r3, [sp, #0]
 801e11e:	e76a      	b.n	801dff6 <TFT_DrawCircleCorner+0x2a>

0801e120 <TFT_DrawCircle>:
{
 801e120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801e124:	b295      	uxth	r5, r2
{
 801e126:	b089      	sub	sp, #36	; 0x24
 801e128:	4690      	mov	r8, r2
	int16_t f = 1 - r;
 801e12a:	f1c5 0201 	rsb	r2, r5, #1
 801e12e:	b212      	sxth	r2, r2
 801e130:	9201      	str	r2, [sp, #4]
	int16_t ddF_y = -2 * r;
 801e132:	ebc5 32c5 	rsb	r2, r5, r5, lsl #15
    TFT_DrawPixel(x0, y0 + r, color);
 801e136:	b28f      	uxth	r7, r1
	int16_t ddF_y = -2 * r;
 801e138:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801e13a:	b29c      	uxth	r4, r3
 801e13c:	b286      	uxth	r6, r0
	int16_t ddF_y = -2 * r;
 801e13e:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801e140:	19e9      	adds	r1, r5, r7
	int16_t ddF_y = -2 * r;
 801e142:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801e144:	b289      	uxth	r1, r1
 801e146:	4622      	mov	r2, r4
 801e148:	4630      	mov	r0, r6
 801e14a:	f7ff ff0d 	bl	801df68 <TFT_DrawPixel>
    TFT_DrawPixel(x0, y0 - r, color);
 801e14e:	1b79      	subs	r1, r7, r5
 801e150:	4622      	mov	r2, r4
 801e152:	b289      	uxth	r1, r1
 801e154:	4630      	mov	r0, r6
 801e156:	f7ff ff07 	bl	801df68 <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801e15a:	19a8      	adds	r0, r5, r6
 801e15c:	4622      	mov	r2, r4
 801e15e:	4639      	mov	r1, r7
 801e160:	b280      	uxth	r0, r0
 801e162:	f7ff ff01 	bl	801df68 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801e166:	1b70      	subs	r0, r6, r5
 801e168:	4622      	mov	r2, r4
 801e16a:	4639      	mov	r1, r7
 801e16c:	b280      	uxth	r0, r0
 801e16e:	f7ff fefb 	bl	801df68 <TFT_DrawPixel>
    while (x < y) {
 801e172:	2300      	movs	r3, #0
 801e174:	9302      	str	r3, [sp, #8]
 801e176:	1c73      	adds	r3, r6, #1
 801e178:	9304      	str	r3, [sp, #16]
 801e17a:	1e73      	subs	r3, r6, #1
 801e17c:	9305      	str	r3, [sp, #20]
 801e17e:	1c7b      	adds	r3, r7, #1
 801e180:	9306      	str	r3, [sp, #24]
 801e182:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801e186:	4543      	cmp	r3, r8
 801e188:	db02      	blt.n	801e190 <TFT_DrawCircle+0x70>
}
 801e18a:	b009      	add	sp, #36	; 0x24
 801e18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801e190:	9b01      	ldr	r3, [sp, #4]
 801e192:	2b00      	cmp	r3, #0
 801e194:	db0c      	blt.n	801e1b0 <TFT_DrawCircle+0x90>
            ddF_y += 2;
 801e196:	9b03      	ldr	r3, [sp, #12]
 801e198:	3302      	adds	r3, #2
 801e19a:	b29b      	uxth	r3, r3
 801e19c:	b21a      	sxth	r2, r3
 801e19e:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801e1a0:	9a01      	ldr	r2, [sp, #4]
 801e1a2:	4413      	add	r3, r2
            y--;
 801e1a4:	f108 38ff 	add.w	r8, r8, #4294967295
            f += ddF_y;
 801e1a8:	b21b      	sxth	r3, r3
            y--;
 801e1aa:	fa0f f888 	sxth.w	r8, r8
            f += ddF_y;
 801e1ae:	9301      	str	r3, [sp, #4]
 801e1b0:	f8bd 9008 	ldrh.w	r9, [sp, #8]
        f += ddF_x;
 801e1b4:	9b01      	ldr	r3, [sp, #4]
 801e1b6:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 801e1ba:	3303      	adds	r3, #3
 801e1bc:	b21b      	sxth	r3, r3
 801e1be:	9301      	str	r3, [sp, #4]
 801e1c0:	9b04      	ldr	r3, [sp, #16]
        TFT_DrawPixel(x0 + x, y0 + y, color);
 801e1c2:	fa1f f588 	uxth.w	r5, r8
 801e1c6:	444b      	add	r3, r9
 801e1c8:	eb07 0b05 	add.w	fp, r7, r5
 801e1cc:	b29b      	uxth	r3, r3
 801e1ce:	fa1f fb8b 	uxth.w	fp, fp
 801e1d2:	4659      	mov	r1, fp
 801e1d4:	4618      	mov	r0, r3
 801e1d6:	4622      	mov	r2, r4
 801e1d8:	9307      	str	r3, [sp, #28]
 801e1da:	f7ff fec5 	bl	801df68 <TFT_DrawPixel>
 801e1de:	9b05      	ldr	r3, [sp, #20]
 801e1e0:	eba3 0a09 	sub.w	sl, r3, r9
 801e1e4:	fa1f fa8a 	uxth.w	sl, sl
        TFT_DrawPixel(x0 - x, y0 + y, color);
 801e1e8:	4659      	mov	r1, fp
 801e1ea:	4650      	mov	r0, sl
 801e1ec:	4622      	mov	r2, r4
 801e1ee:	f7ff febb 	bl	801df68 <TFT_DrawPixel>
        TFT_DrawPixel(x0 + x, y0 - y, color);
 801e1f2:	eba7 0b05 	sub.w	fp, r7, r5
 801e1f6:	9b07      	ldr	r3, [sp, #28]
 801e1f8:	fa1f fb8b 	uxth.w	fp, fp
 801e1fc:	4618      	mov	r0, r3
 801e1fe:	4659      	mov	r1, fp
 801e200:	4622      	mov	r2, r4
 801e202:	f7ff feb1 	bl	801df68 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - x, y0 - y, color);
 801e206:	4659      	mov	r1, fp
 801e208:	4650      	mov	r0, sl
 801e20a:	4622      	mov	r2, r4
 801e20c:	f7ff feac 	bl	801df68 <TFT_DrawPixel>
 801e210:	9b06      	ldr	r3, [sp, #24]
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801e212:	eb06 0a05 	add.w	sl, r6, r5
 801e216:	eb09 0b03 	add.w	fp, r9, r3
 801e21a:	fa1f fa8a 	uxth.w	sl, sl
 801e21e:	fa1f fb8b 	uxth.w	fp, fp
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801e222:	1b75      	subs	r5, r6, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801e224:	4622      	mov	r2, r4
 801e226:	4659      	mov	r1, fp
 801e228:	4650      	mov	r0, sl
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801e22a:	b2ad      	uxth	r5, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801e22c:	f7ff fe9c 	bl	801df68 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801e230:	4622      	mov	r2, r4
 801e232:	4659      	mov	r1, fp
 801e234:	4628      	mov	r0, r5
 801e236:	f7ff fe97 	bl	801df68 <TFT_DrawPixel>
 801e23a:	1e7b      	subs	r3, r7, #1
 801e23c:	eba3 0909 	sub.w	r9, r3, r9
 801e240:	fa1f f989 	uxth.w	r9, r9
        TFT_DrawPixel(x0 + y, y0 - x, color);
 801e244:	4622      	mov	r2, r4
 801e246:	4649      	mov	r1, r9
 801e248:	4650      	mov	r0, sl
 801e24a:	f7ff fe8d 	bl	801df68 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 - x, color);
 801e24e:	4622      	mov	r2, r4
 801e250:	4649      	mov	r1, r9
 801e252:	4628      	mov	r0, r5
 801e254:	f7ff fe88 	bl	801df68 <TFT_DrawPixel>
 801e258:	9b02      	ldr	r3, [sp, #8]
 801e25a:	3301      	adds	r3, #1
 801e25c:	9302      	str	r3, [sp, #8]
 801e25e:	e790      	b.n	801e182 <TFT_DrawCircle+0x62>

0801e260 <TFT_DrawLine>:


int16_t prev_x=0, prev_y=0; 
//----------------------------------------
void TFT_DrawLine(uint16_t x0, uint16_t y0,	uint16_t x1, uint16_t y1, uint16_t color)
{
 801e260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e264:	b085      	sub	sp, #20
 801e266:	469a      	mov	sl, r3
	int16_t dx, dy, sx, sy, err, e2;
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e268:	4290      	cmp	r0, r2
{
 801e26a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e26e:	9301      	str	r3, [sp, #4]
 801e270:	4607      	mov	r7, r0
 801e272:	460e      	mov	r6, r1
 801e274:	4693      	mov	fp, r2
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e276:	d211      	bcs.n	801e29c <TFT_DrawLine+0x3c>
 801e278:	eba2 0800 	sub.w	r8, r2, r0
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e27c:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e27e:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e282:	d341      	bcc.n	801e308 <TFT_DrawLine+0xa8>
	sx = (x0 < x1) ? 1 : -1; 
 801e284:	455f      	cmp	r7, fp
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e286:	eba6 050a 	sub.w	r5, r6, sl
 801e28a:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801e28c:	bf2c      	ite	cs
 801e28e:	f04f 39ff 	movcs.w	r9, #4294967295
 801e292:	f04f 0901 	movcc.w	r9, #1
	sy = (y0 < y1) ? 1 : -1; 
 801e296:	f04f 33ff 	mov.w	r3, #4294967295
 801e29a:	e00b      	b.n	801e2b4 <TFT_DrawLine+0x54>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e29c:	eba0 0802 	sub.w	r8, r0, r2
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e2a0:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e2a2:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e2a6:	d2ed      	bcs.n	801e284 <TFT_DrawLine+0x24>
 801e2a8:	ebaa 0501 	sub.w	r5, sl, r1
 801e2ac:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801e2ae:	f04f 39ff 	mov.w	r9, #4294967295
	sy = (y0 < y1) ? 1 : -1; 
 801e2b2:	2301      	movs	r3, #1
	err = ((dx > dy) ? dx : -dy) / 2; 
 801e2b4:	45a8      	cmp	r8, r5
 801e2b6:	f04f 0402 	mov.w	r4, #2
 801e2ba:	dd20      	ble.n	801e2fe <TFT_DrawLine+0x9e>
 801e2bc:	fb98 f4f4 	sdiv	r4, r8, r4

		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 801e2c0:	f1c8 0200 	rsb	r2, r8, #0
 801e2c4:	9202      	str	r2, [sp, #8]
		TFT_DrawPixel(x0, y0, color); 
 801e2c6:	9a01      	ldr	r2, [sp, #4]
 801e2c8:	9303      	str	r3, [sp, #12]
 801e2ca:	4631      	mov	r1, r6
 801e2cc:	4638      	mov	r0, r7
 801e2ce:	f7ff fe4b 	bl	801df68 <TFT_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 801e2d2:	455f      	cmp	r7, fp
 801e2d4:	9b03      	ldr	r3, [sp, #12]
 801e2d6:	d101      	bne.n	801e2dc <TFT_DrawLine+0x7c>
 801e2d8:	4556      	cmp	r6, sl
 801e2da:	d01b      	beq.n	801e314 <TFT_DrawLine+0xb4>
		if (e2 > -dx) {
 801e2dc:	9a02      	ldr	r2, [sp, #8]
 801e2de:	4294      	cmp	r4, r2
			err -= dy;
 801e2e0:	bfc1      	itttt	gt
 801e2e2:	1b62      	subgt	r2, r4, r5
			x0 += sx;
 801e2e4:	444f      	addgt	r7, r9
			err -= dy;
 801e2e6:	b212      	sxthgt	r2, r2
			x0 += sx;
 801e2e8:	b2bf      	uxthgt	r7, r7
 801e2ea:	bfd8      	it	le
 801e2ec:	4622      	movle	r2, r4
		} 
		if (e2 < dy) {
 801e2ee:	42ac      	cmp	r4, r5
 801e2f0:	da03      	bge.n	801e2fa <TFT_DrawLine+0x9a>
			err += dx;
 801e2f2:	4442      	add	r2, r8
			y0 += sy;
 801e2f4:	441e      	add	r6, r3
			err += dx;
 801e2f6:	b212      	sxth	r2, r2
			y0 += sy;
 801e2f8:	b2b6      	uxth	r6, r6
	sy = (y0 < y1) ? 1 : -1; 
 801e2fa:	4614      	mov	r4, r2
 801e2fc:	e7e3      	b.n	801e2c6 <TFT_DrawLine+0x66>
	err = ((dx > dy) ? dx : -dy) / 2; 
 801e2fe:	fb95 f4f4 	sdiv	r4, r5, r4
 801e302:	4264      	negs	r4, r4
 801e304:	b224      	sxth	r4, r4
 801e306:	e7db      	b.n	801e2c0 <TFT_DrawLine+0x60>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e308:	ebaa 0501 	sub.w	r5, sl, r1
 801e30c:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801e30e:	f04f 0901 	mov.w	r9, #1
 801e312:	e7ce      	b.n	801e2b2 <TFT_DrawLine+0x52>
		} 
	}
}
 801e314:	b005      	add	sp, #20
 801e316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e31a <TFT_FillRectangle>:
{
 801e31a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801e31e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
{
 801e322:	4606      	mov	r6, r0
 801e324:	460c      	mov	r4, r1
 801e326:	4617      	mov	r7, r2
 801e328:	461d      	mov	r5, r3
	for (; y0 <= y1; y0++) {
 801e32a:	42ac      	cmp	r4, r5
 801e32c:	d902      	bls.n	801e334 <TFT_FillRectangle+0x1a>
}
 801e32e:	b002      	add	sp, #8
 801e330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801e334:	4623      	mov	r3, r4
 801e336:	4621      	mov	r1, r4
 801e338:	f8cd 8000 	str.w	r8, [sp]
 801e33c:	463a      	mov	r2, r7
 801e33e:	4630      	mov	r0, r6
	for (; y0 <= y1; y0++) {
 801e340:	3401      	adds	r4, #1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801e342:	f7ff ff8d 	bl	801e260 <TFT_DrawLine>
	for (; y0 <= y1; y0++) {
 801e346:	b2a4      	uxth	r4, r4
 801e348:	e7ef      	b.n	801e32a <TFT_FillRectangle+0x10>

0801e34a <TFT_DrawRectangle>:
{
 801e34a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801e34e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801e352:	9400      	str	r4, [sp, #0]
{
 801e354:	461f      	mov	r7, r3
 801e356:	4605      	mov	r5, r0
 801e358:	4688      	mov	r8, r1
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801e35a:	460b      	mov	r3, r1
{
 801e35c:	4616      	mov	r6, r2
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801e35e:	f7ff ff7f 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(x0, y0, x0, y1, color);	/* Left */
 801e362:	463b      	mov	r3, r7
 801e364:	462a      	mov	r2, r5
 801e366:	4641      	mov	r1, r8
 801e368:	4628      	mov	r0, r5
 801e36a:	9400      	str	r4, [sp, #0]
 801e36c:	f7ff ff78 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(x1, y0, x1, y1, color);	/* Right */
 801e370:	463b      	mov	r3, r7
 801e372:	4632      	mov	r2, r6
 801e374:	4641      	mov	r1, r8
 801e376:	4630      	mov	r0, r6
 801e378:	9400      	str	r4, [sp, #0]
 801e37a:	f7ff ff71 	bl	801e260 <TFT_DrawLine>
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801e37e:	463b      	mov	r3, r7
 801e380:	4632      	mov	r2, r6
 801e382:	4639      	mov	r1, r7
 801e384:	4628      	mov	r0, r5
 801e386:	9408      	str	r4, [sp, #32]
}
 801e388:	b002      	add	sp, #8
 801e38a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801e38e:	f7ff bf67 	b.w	801e260 <TFT_DrawLine>

0801e392 <TFT_DrawFilledCircle>:
{
 801e392:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801e396:	b297      	uxth	r7, r2
{
 801e398:	4691      	mov	r9, r2
	int16_t ddF_y = -2 * r;
 801e39a:	ebc7 32c7 	rsb	r2, r7, r7, lsl #15
{
 801e39e:	b089      	sub	sp, #36	; 0x24
    TFT_DrawPixel(x0, y0 + r, color);
 801e3a0:	b28d      	uxth	r5, r1
	int16_t ddF_y = -2 * r;
 801e3a2:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801e3a4:	b29e      	uxth	r6, r3
 801e3a6:	fa1f f880 	uxth.w	r8, r0
	int16_t ddF_y = -2 * r;
 801e3aa:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801e3ac:	1979      	adds	r1, r7, r5
	int16_t ddF_y = -2 * r;
 801e3ae:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801e3b0:	b289      	uxth	r1, r1
 801e3b2:	4632      	mov	r2, r6
 801e3b4:	4640      	mov	r0, r8
 801e3b6:	f7ff fdd7 	bl	801df68 <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801e3ba:	eb07 0a08 	add.w	sl, r7, r8
    TFT_DrawPixel(x0, y0 - r, color);
 801e3be:	1be9      	subs	r1, r5, r7
	int16_t f = 1 - r;
 801e3c0:	f1c7 0401 	rsb	r4, r7, #1
    TFT_DrawPixel(x0, y0 - r, color);
 801e3c4:	4632      	mov	r2, r6
 801e3c6:	b289      	uxth	r1, r1
 801e3c8:	4640      	mov	r0, r8
    TFT_DrawPixel(x0 + r, y0, color);
 801e3ca:	fa1f fa8a 	uxth.w	sl, sl
    TFT_DrawPixel(x0 - r, y0, color);
 801e3ce:	eba8 0707 	sub.w	r7, r8, r7
    TFT_DrawPixel(x0, y0 - r, color);
 801e3d2:	f7ff fdc9 	bl	801df68 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801e3d6:	b2bf      	uxth	r7, r7
    TFT_DrawPixel(x0 + r, y0, color);
 801e3d8:	4632      	mov	r2, r6
 801e3da:	4629      	mov	r1, r5
 801e3dc:	4650      	mov	r0, sl
 801e3de:	f7ff fdc3 	bl	801df68 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801e3e2:	4632      	mov	r2, r6
 801e3e4:	4629      	mov	r1, r5
 801e3e6:	4638      	mov	r0, r7
 801e3e8:	f7ff fdbe 	bl	801df68 <TFT_DrawPixel>
    TFT_DrawLine(x0 - r, y0, x0 + r, y0, color);
 801e3ec:	462b      	mov	r3, r5
 801e3ee:	9600      	str	r6, [sp, #0]
 801e3f0:	4652      	mov	r2, sl
 801e3f2:	4629      	mov	r1, r5
 801e3f4:	4638      	mov	r0, r7
 801e3f6:	f7ff ff33 	bl	801e260 <TFT_DrawLine>
    while (x < y) {
 801e3fa:	2300      	movs	r3, #0
 801e3fc:	9302      	str	r3, [sp, #8]
 801e3fe:	f108 33ff 	add.w	r3, r8, #4294967295
 801e402:	9305      	str	r3, [sp, #20]
 801e404:	f108 0301 	add.w	r3, r8, #1
 801e408:	9306      	str	r3, [sp, #24]
 801e40a:	1c6b      	adds	r3, r5, #1
	int16_t f = 1 - r;
 801e40c:	b224      	sxth	r4, r4
 801e40e:	9307      	str	r3, [sp, #28]
    while (x < y) {
 801e410:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801e414:	454b      	cmp	r3, r9
 801e416:	db02      	blt.n	801e41e <TFT_DrawFilledCircle+0x8c>
}
 801e418:	b009      	add	sp, #36	; 0x24
 801e41a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801e41e:	2c00      	cmp	r4, #0
 801e420:	db0a      	blt.n	801e438 <TFT_DrawFilledCircle+0xa6>
            ddF_y += 2;
 801e422:	9b03      	ldr	r3, [sp, #12]
 801e424:	3302      	adds	r3, #2
 801e426:	b29b      	uxth	r3, r3
            y--;
 801e428:	f109 39ff 	add.w	r9, r9, #4294967295
            ddF_y += 2;
 801e42c:	b21a      	sxth	r2, r3
            f += ddF_y;
 801e42e:	441c      	add	r4, r3
            y--;
 801e430:	fa0f f989 	sxth.w	r9, r9
            ddF_y += 2;
 801e434:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801e436:	b224      	sxth	r4, r4
 801e438:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e43c:	9b05      	ldr	r3, [sp, #20]
 801e43e:	9a06      	ldr	r2, [sp, #24]
        TFT_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 801e440:	9600      	str	r6, [sp, #0]
 801e442:	fa1f f789 	uxth.w	r7, r9
 801e446:	eba3 0b0a 	sub.w	fp, r3, sl
 801e44a:	19eb      	adds	r3, r5, r7
 801e44c:	fa1f fb8b 	uxth.w	fp, fp
 801e450:	b29b      	uxth	r3, r3
 801e452:	4452      	add	r2, sl
 801e454:	b292      	uxth	r2, r2
 801e456:	4619      	mov	r1, r3
 801e458:	4658      	mov	r0, fp
 801e45a:	9204      	str	r2, [sp, #16]
 801e45c:	f7ff ff00 	bl	801e260 <TFT_DrawLine>
        TFT_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 801e460:	1beb      	subs	r3, r5, r7
 801e462:	b29b      	uxth	r3, r3
 801e464:	465a      	mov	r2, fp
 801e466:	4619      	mov	r1, r3
 801e468:	9804      	ldr	r0, [sp, #16]
 801e46a:	9600      	str	r6, [sp, #0]
 801e46c:	f7ff fef8 	bl	801e260 <TFT_DrawLine>
 801e470:	9b07      	ldr	r3, [sp, #28]
        TFT_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 801e472:	9600      	str	r6, [sp, #0]
 801e474:	eb08 0b07 	add.w	fp, r8, r7
 801e478:	4453      	add	r3, sl
 801e47a:	eba8 0707 	sub.w	r7, r8, r7
 801e47e:	b29b      	uxth	r3, r3
 801e480:	fa1f fb8b 	uxth.w	fp, fp
 801e484:	b2bf      	uxth	r7, r7
 801e486:	4619      	mov	r1, r3
 801e488:	463a      	mov	r2, r7
 801e48a:	4658      	mov	r0, fp
 801e48c:	f7ff fee8 	bl	801e260 <TFT_DrawLine>
 801e490:	1e6b      	subs	r3, r5, #1
 801e492:	eba3 030a 	sub.w	r3, r3, sl
 801e496:	b29b      	uxth	r3, r3
        TFT_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 801e498:	4619      	mov	r1, r3
 801e49a:	9600      	str	r6, [sp, #0]
 801e49c:	463a      	mov	r2, r7
 801e49e:	4658      	mov	r0, fp
 801e4a0:	f7ff fede 	bl	801e260 <TFT_DrawLine>
 801e4a4:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801e4a6:	eb04 044a 	add.w	r4, r4, sl, lsl #1
 801e4aa:	3403      	adds	r4, #3
 801e4ac:	3301      	adds	r3, #1
 801e4ae:	b224      	sxth	r4, r4
 801e4b0:	9302      	str	r3, [sp, #8]
 801e4b2:	e7ad      	b.n	801e410 <TFT_DrawFilledCircle+0x7e>

0801e4b4 <TFT_DrawFilledCircleCorner>:
{
 801e4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4b8:	4699      	mov	r9, r3
	int16_t f = 1 - r;
 801e4ba:	b293      	uxth	r3, r2
 801e4bc:	f1c3 0601 	rsb	r6, r3, #1
	int16_t ddF_y = -2 * r;
 801e4c0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801e4c4:	b087      	sub	sp, #28
	int16_t ddF_y = -2 * r;
 801e4c6:	005b      	lsls	r3, r3, #1
 801e4c8:	b21b      	sxth	r3, r3
 801e4ca:	9304      	str	r3, [sp, #16]
    while (x < y) {
 801e4cc:	2300      	movs	r3, #0
 801e4ce:	9302      	str	r3, [sp, #8]
        if (corner & 0x01) {
 801e4d0:	f009 0301 	and.w	r3, r9, #1
{
 801e4d4:	9103      	str	r1, [sp, #12]
 801e4d6:	4617      	mov	r7, r2
	int16_t f = 1 - r;
 801e4d8:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801e4da:	9305      	str	r3, [sp, #20]
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801e4dc:	b284      	uxth	r4, r0
    while (x < y) {
 801e4de:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801e4e2:	42bb      	cmp	r3, r7
 801e4e4:	db02      	blt.n	801e4ec <TFT_DrawFilledCircleCorner+0x38>
}
 801e4e6:	b007      	add	sp, #28
 801e4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801e4ec:	2e00      	cmp	r6, #0
 801e4ee:	db08      	blt.n	801e502 <TFT_DrawFilledCircleCorner+0x4e>
            ddF_y += 2;
 801e4f0:	9b04      	ldr	r3, [sp, #16]
 801e4f2:	3302      	adds	r3, #2
 801e4f4:	b29b      	uxth	r3, r3
            y--;
 801e4f6:	3f01      	subs	r7, #1
            ddF_y += 2;
 801e4f8:	b21a      	sxth	r2, r3
            f += ddF_y;
 801e4fa:	441e      	add	r6, r3
            y--;
 801e4fc:	b23f      	sxth	r7, r7
            ddF_y += 2;
 801e4fe:	9204      	str	r2, [sp, #16]
            f += ddF_y;
 801e500:	b236      	sxth	r6, r6
 801e502:	f8bd 5008 	ldrh.w	r5, [sp, #8]
        if (corner & 0x01) {
 801e506:	9b05      	ldr	r3, [sp, #20]
        f += ddF_x;
 801e508:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801e50c:	3603      	adds	r6, #3
 801e50e:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801e510:	b1f3      	cbz	r3, 801e550 <TFT_DrawFilledCircleCorner+0x9c>
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801e512:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801e516:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801e51a:	f8cd b000 	str.w	fp, [sp]
 801e51e:	fa1f fa87 	uxth.w	sl, r7
 801e522:	eba8 030a 	sub.w	r3, r8, sl
 801e526:	1e62      	subs	r2, r4, #1
 801e528:	b29b      	uxth	r3, r3
 801e52a:	1b52      	subs	r2, r2, r5
 801e52c:	4619      	mov	r1, r3
 801e52e:	b292      	uxth	r2, r2
 801e530:	4620      	mov	r0, r4
 801e532:	f7ff fe95 	bl	801e260 <TFT_DrawLine>
 801e536:	f108 33ff 	add.w	r3, r8, #4294967295
 801e53a:	1b5b      	subs	r3, r3, r5
 801e53c:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 - x, x0 - y, y0 - x, color);
 801e53e:	eba4 020a 	sub.w	r2, r4, sl
 801e542:	f8cd b000 	str.w	fp, [sp]
 801e546:	b292      	uxth	r2, r2
 801e548:	4619      	mov	r1, r3
 801e54a:	4620      	mov	r0, r4
 801e54c:	f7ff fe88 	bl	801e260 <TFT_DrawLine>
        if (corner & 0x02) {	
 801e550:	f019 0f02 	tst.w	r9, #2
 801e554:	d01e      	beq.n	801e594 <TFT_DrawFilledCircleCorner+0xe0>
			TFT_DrawLine(x0 + x, y0 - y, x0, y0 - y, color);
 801e556:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801e55a:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801e55e:	f8cd b000 	str.w	fp, [sp]
 801e562:	fa1f fa87 	uxth.w	sl, r7
 801e566:	eba8 030a 	sub.w	r3, r8, sl
 801e56a:	1c60      	adds	r0, r4, #1
 801e56c:	b29b      	uxth	r3, r3
 801e56e:	4428      	add	r0, r5
 801e570:	4619      	mov	r1, r3
 801e572:	4622      	mov	r2, r4
 801e574:	b280      	uxth	r0, r0
 801e576:	f7ff fe73 	bl	801e260 <TFT_DrawLine>
 801e57a:	f108 33ff 	add.w	r3, r8, #4294967295
 801e57e:	1b5b      	subs	r3, r3, r5
 801e580:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 - x, x0, y0 - x, color);
 801e582:	eb04 000a 	add.w	r0, r4, sl
 801e586:	f8cd b000 	str.w	fp, [sp]
 801e58a:	4622      	mov	r2, r4
 801e58c:	4619      	mov	r1, r3
 801e58e:	b280      	uxth	r0, r0
 801e590:	f7ff fe66 	bl	801e260 <TFT_DrawLine>
		if (corner & 0x04) {
 801e594:	f019 0f04 	tst.w	r9, #4
 801e598:	d01e      	beq.n	801e5d8 <TFT_DrawFilledCircleCorner+0x124>
			TFT_DrawLine(x0, y0 + y, x0 + x, y0 + y, color);
 801e59a:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801e59e:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801e5a2:	f8cd b000 	str.w	fp, [sp]
 801e5a6:	fa1f fa87 	uxth.w	sl, r7
 801e5aa:	eb08 030a 	add.w	r3, r8, sl
 801e5ae:	1c62      	adds	r2, r4, #1
 801e5b0:	b29b      	uxth	r3, r3
 801e5b2:	442a      	add	r2, r5
 801e5b4:	4619      	mov	r1, r3
 801e5b6:	b292      	uxth	r2, r2
 801e5b8:	4620      	mov	r0, r4
 801e5ba:	f7ff fe51 	bl	801e260 <TFT_DrawLine>
 801e5be:	f108 0301 	add.w	r3, r8, #1
 801e5c2:	442b      	add	r3, r5
 801e5c4:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 + x, x0, y0 + x, color);
 801e5c6:	eb04 000a 	add.w	r0, r4, sl
 801e5ca:	f8cd b000 	str.w	fp, [sp]
 801e5ce:	4622      	mov	r2, r4
 801e5d0:	4619      	mov	r1, r3
 801e5d2:	b280      	uxth	r0, r0
 801e5d4:	f7ff fe44 	bl	801e260 <TFT_DrawLine>
        if (corner & 0x08) {
 801e5d8:	f019 0f08 	tst.w	r9, #8
 801e5dc:	d01e      	beq.n	801e61c <TFT_DrawFilledCircleCorner+0x168>
			TFT_DrawLine(x0 - x, y0 + y, x0, y0 + y, color);
 801e5de:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801e5e2:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801e5e6:	f8cd b000 	str.w	fp, [sp]
 801e5ea:	fa1f fa87 	uxth.w	sl, r7
 801e5ee:	eb08 030a 	add.w	r3, r8, sl
 801e5f2:	1e60      	subs	r0, r4, #1
 801e5f4:	b29b      	uxth	r3, r3
 801e5f6:	1b40      	subs	r0, r0, r5
 801e5f8:	4619      	mov	r1, r3
 801e5fa:	4622      	mov	r2, r4
 801e5fc:	b280      	uxth	r0, r0
 801e5fe:	f7ff fe2f 	bl	801e260 <TFT_DrawLine>
 801e602:	f108 0301 	add.w	r3, r8, #1
 801e606:	442b      	add	r3, r5
 801e608:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 + x, x0 - y, y0 + x, color);
 801e60a:	eba4 020a 	sub.w	r2, r4, sl
 801e60e:	f8cd b000 	str.w	fp, [sp]
 801e612:	b292      	uxth	r2, r2
 801e614:	4619      	mov	r1, r3
 801e616:	4620      	mov	r0, r4
 801e618:	f7ff fe22 	bl	801e260 <TFT_DrawLine>
 801e61c:	9b02      	ldr	r3, [sp, #8]
 801e61e:	3301      	adds	r3, #1
 801e620:	9302      	str	r3, [sp, #8]
 801e622:	e75c      	b.n	801e4de <TFT_DrawFilledCircleCorner+0x2a>

0801e624 <TFT_DrawFilledRoundedRectangle>:
{
 801e624:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (x1 == x0 || y1 == y0) {
 801e628:	4282      	cmp	r2, r0
{
 801e62a:	4683      	mov	fp, r0
 801e62c:	460d      	mov	r5, r1
 801e62e:	4692      	mov	sl, r2
 801e630:	461c      	mov	r4, r3
 801e632:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 801e636:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	if (x1 == x0 || y1 == y0) {
 801e63a:	d06d      	beq.n	801e718 <TFT_DrawFilledRoundedRectangle+0xf4>
 801e63c:	428b      	cmp	r3, r1
 801e63e:	d06b      	beq.n	801e718 <TFT_DrawFilledRoundedRectangle+0xf4>
	if (r == 0) {
 801e640:	b91e      	cbnz	r6, 801e64a <TFT_DrawFilledRoundedRectangle+0x26>
		TFT_FillRectangle(x0, y0, x1, y1, color);
 801e642:	f8cd 8000 	str.w	r8, [sp]
 801e646:	f7ff fe68 	bl	801e31a <TFT_FillRectangle>
	if (x0 > x1) {
 801e64a:	45da      	cmp	sl, fp
 801e64c:	bf3e      	ittt	cc
 801e64e:	465b      	movcc	r3, fp
 801e650:	46d3      	movcc	fp, sl
 801e652:	469a      	movcc	sl, r3
	if (y0 > y1) {
 801e654:	42ac      	cmp	r4, r5
 801e656:	bf38      	it	cc
 801e658:	462b      	movcc	r3, r5
	if (r > ((x1 - x0) / 2)) {
 801e65a:	ebaa 010b 	sub.w	r1, sl, fp
	if (y0 > y1) {
 801e65e:	bf3c      	itt	cc
 801e660:	4625      	movcc	r5, r4
 801e662:	461c      	movcc	r4, r3
	if (r > ((x1 - x0) / 2)) {
 801e664:	2302      	movs	r3, #2
 801e666:	fb91 f1f3 	sdiv	r1, r1, r3
 801e66a:	428e      	cmp	r6, r1
		r = (x1 - x0) / 2;
 801e66c:	bfc8      	it	gt
 801e66e:	b28e      	uxthgt	r6, r1
 801e670:	461a      	mov	r2, r3
	if (r > ((y1 - y0) / 2)) {
 801e672:	1b63      	subs	r3, r4, r5
 801e674:	fb93 f3f2 	sdiv	r3, r3, r2
 801e678:	429e      	cmp	r6, r3
		r = (y1 - y0) / 2;
 801e67a:	bfc8      	it	gt
 801e67c:	b29e      	uxthgt	r6, r3
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801e67e:	eb0b 0706 	add.w	r7, fp, r6
 801e682:	ebaa 0906 	sub.w	r9, sl, r6
 801e686:	b2bf      	uxth	r7, r7
 801e688:	fa1f f989 	uxth.w	r9, r9
 801e68c:	4623      	mov	r3, r4
 801e68e:	4629      	mov	r1, r5
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801e690:	1ba4      	subs	r4, r4, r6
 801e692:	4435      	add	r5, r6
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801e694:	464a      	mov	r2, r9
 801e696:	4638      	mov	r0, r7
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801e698:	b2ad      	uxth	r5, r5
 801e69a:	b2a4      	uxth	r4, r4
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801e69c:	f8cd 8000 	str.w	r8, [sp]
 801e6a0:	f7ff fe3b 	bl	801e31a <TFT_FillRectangle>
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801e6a4:	4623      	mov	r3, r4
 801e6a6:	463a      	mov	r2, r7
 801e6a8:	4629      	mov	r1, r5
 801e6aa:	4658      	mov	r0, fp
 801e6ac:	f8cd 8000 	str.w	r8, [sp]
 801e6b0:	f7ff fe33 	bl	801e31a <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801e6b4:	b236      	sxth	r6, r6
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801e6b6:	4623      	mov	r3, r4
 801e6b8:	4652      	mov	r2, sl
 801e6ba:	4629      	mov	r1, r5
 801e6bc:	4648      	mov	r0, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801e6be:	b23f      	sxth	r7, r7
 801e6c0:	b22d      	sxth	r5, r5
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801e6c2:	f8cd 8000 	str.w	r8, [sp]
 801e6c6:	f7ff fe28 	bl	801e31a <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801e6ca:	fa0f f989 	sxth.w	r9, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801e6ce:	4632      	mov	r2, r6
 801e6d0:	4629      	mov	r1, r5
 801e6d2:	4638      	mov	r0, r7
 801e6d4:	f8cd 8000 	str.w	r8, [sp]
 801e6d8:	2301      	movs	r3, #1
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801e6da:	3c01      	subs	r4, #1
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801e6dc:	f7ff feea 	bl	801e4b4 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801e6e0:	b224      	sxth	r4, r4
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801e6e2:	4632      	mov	r2, r6
 801e6e4:	4629      	mov	r1, r5
 801e6e6:	4648      	mov	r0, r9
 801e6e8:	f8cd 8000 	str.w	r8, [sp]
 801e6ec:	2302      	movs	r3, #2
 801e6ee:	f7ff fee1 	bl	801e4b4 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801e6f2:	4632      	mov	r2, r6
 801e6f4:	4621      	mov	r1, r4
 801e6f6:	4648      	mov	r0, r9
 801e6f8:	f8cd 8000 	str.w	r8, [sp]
 801e6fc:	2304      	movs	r3, #4
 801e6fe:	f7ff fed9 	bl	801e4b4 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801e702:	2308      	movs	r3, #8
 801e704:	4632      	mov	r2, r6
 801e706:	4621      	mov	r1, r4
 801e708:	4638      	mov	r0, r7
 801e70a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
}
 801e70e:	b003      	add	sp, #12
 801e710:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801e714:	f7ff bece 	b.w	801e4b4 <TFT_DrawFilledCircleCorner>
}
 801e718:	b003      	add	sp, #12
 801e71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e71e <TFT_DrawBitmap>:
	}
}


void TFT_DrawBitmap(uint16_t X1, uint16_t Y1, sImage pbmp)
{
 801e71e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e722:	4688      	mov	r8, r1
 801e724:	a902      	add	r1, sp, #8
 801e726:	e901 000c 	stmdb	r1, {r2, r3}
 801e72a:	4607      	mov	r7, r0
	uint16_t Xpos, Ypos;
	uint32_t i = 0;
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801e72c:	4645      	mov	r5, r8
	uint32_t i = 0;
 801e72e:	2400      	movs	r4, #0
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801e730:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e734:	4443      	add	r3, r8
 801e736:	429d      	cmp	r5, r3
 801e738:	da15      	bge.n	801e766 <TFT_DrawBitmap+0x48>
 801e73a:	0066      	lsls	r6, r4, #1
 801e73c:	eba7 0904 	sub.w	r9, r7, r4
 801e740:	e006      	b.n	801e750 <TFT_DrawBitmap+0x32>
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[i]);
 801e742:	9b01      	ldr	r3, [sp, #4]
 801e744:	4629      	mov	r1, r5
 801e746:	5b9a      	ldrh	r2, [r3, r6]
 801e748:	f7ff fc0e 	bl	801df68 <TFT_DrawPixel>
			i++;
 801e74c:	3401      	adds	r4, #1
 801e74e:	3602      	adds	r6, #2
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
 801e750:	f8bd 3000 	ldrh.w	r3, [sp]
 801e754:	eb09 0004 	add.w	r0, r9, r4
 801e758:	b280      	uxth	r0, r0
 801e75a:	443b      	add	r3, r7
 801e75c:	4298      	cmp	r0, r3
 801e75e:	dbf0      	blt.n	801e742 <TFT_DrawBitmap+0x24>
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801e760:	3501      	adds	r5, #1
 801e762:	b2ad      	uxth	r5, r5
 801e764:	e7e4      	b.n	801e730 <TFT_DrawBitmap+0x12>
		}
	}
}
 801e766:	b003      	add	sp, #12
 801e768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801e76c <TFT_SetFont>:

//----------------------------------------

void TFT_SetFont(sFONT *fonts)
{
  lcdprop.pFont=fonts;
 801e76c:	4b01      	ldr	r3, [pc, #4]	; (801e774 <TFT_SetFont+0x8>)
 801e76e:	6098      	str	r0, [r3, #8]
 801e770:	4770      	bx	lr
 801e772:	bf00      	nop
 801e774:	20090f54 	.word	0x20090f54

0801e778 <TFT_SetTextColor>:

//----------------------------------------

void TFT_SetTextColor(uint32_t color)
{
  lcdprop.TextColor=color;
 801e778:	4b01      	ldr	r3, [pc, #4]	; (801e780 <TFT_SetTextColor+0x8>)
 801e77a:	6018      	str	r0, [r3, #0]
 801e77c:	4770      	bx	lr
 801e77e:	bf00      	nop
 801e780:	20090f54 	.word	0x20090f54

0801e784 <TFT_SetBackColor>:

//----------------------------------------

void TFT_SetBackColor(uint32_t color)
{
  lcdprop.BackColor=color;
 801e784:	4b01      	ldr	r3, [pc, #4]	; (801e78c <TFT_SetBackColor+0x8>)
 801e786:	6058      	str	r0, [r3, #4]
 801e788:	4770      	bx	lr
 801e78a:	bf00      	nop
 801e78c:	20090f54 	.word	0x20090f54

0801e790 <TFT_DrawCharRus>:

//----------------------------------------
	//--------------------------------------------------------------

void TFT_DrawCharRus(uint16_t x, uint16_t y, const uint8_t c)
{
 801e790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e794:	b085      	sub	sp, #20
  uint32_t i = 0, j = 0;
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
	if(c == 0x01)
 801e796:	2a01      	cmp	r2, #1
{
 801e798:	9001      	str	r0, [sp, #4]
 801e79a:	9102      	str	r1, [sp, #8]
 801e79c:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801e854 <TFT_DrawCharRus+0xc4>
 801e7a0:	482b      	ldr	r0, [pc, #172]	; (801e850 <TFT_DrawCharRus+0xc0>)
	if(c == 0x01)
 801e7a2:	d11f      	bne.n	801e7e4 <TFT_DrawCharRus+0x54>
	{
		ch = &lcdprop.pFont->table[0];
 801e7a4:	6882      	ldr	r2, [r0, #8]
 801e7a6:	6812      	ldr	r2, [r2, #0]
	}
	else
	{
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801e7a8:	f8cb 2000 	str.w	r2, [fp]
	}
	
	height = lcdprop.pFont->Height;
 801e7ac:	6882      	ldr	r2, [r0, #8]
	width = lcdprop.pFont->Width;
 801e7ae:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	height = lcdprop.pFont->Height;
 801e7b2:	88d3      	ldrh	r3, [r2, #6]
 801e7b4:	9300      	str	r3, [sp, #0]
	offset = 8 *((width + 7)/8) - width ;
 801e7b6:	f10a 0507 	add.w	r5, sl, #7
 801e7ba:	10ed      	asrs	r5, r5, #3
 801e7bc:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
			break;
		}
		for (j = 0; j < width; j++)
		{
				if(line & (1 << (width- j + offset- 1)))
 801e7c0:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0; i < height; i++)
 801e7c4:	2600      	movs	r6, #0
				if(line & (1 << (width- j + offset- 1)))
 801e7c6:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0; i < height; i++)
 801e7ca:	46b0      	mov	r8, r6
				if(line & (1 << (width- j + offset- 1)))
 801e7cc:	9303      	str	r3, [sp, #12]
 801e7ce:	9b02      	ldr	r3, [sp, #8]
 801e7d0:	eb03 0908 	add.w	r9, r3, r8
	for(i = 0; i < height; i++)
 801e7d4:	9b00      	ldr	r3, [sp, #0]
 801e7d6:	4598      	cmp	r8, r3
 801e7d8:	fa1f f989 	uxth.w	r9, r9
 801e7dc:	d30e      	bcc.n	801e7fc <TFT_DrawCharRus+0x6c>
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801e7de:	b005      	add	sp, #20
 801e7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801e7e4:	6884      	ldr	r4, [r0, #8]
 801e7e6:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 801e7ea:	88e2      	ldrh	r2, [r4, #6]
 801e7ec:	434a      	muls	r2, r1
 801e7ee:	88a1      	ldrh	r1, [r4, #4]
 801e7f0:	6824      	ldr	r4, [r4, #0]
 801e7f2:	3107      	adds	r1, #7
 801e7f4:	10c9      	asrs	r1, r1, #3
 801e7f6:	fb01 4202 	mla	r2, r1, r2, r4
 801e7fa:	e7d5      	b.n	801e7a8 <TFT_DrawCharRus+0x18>
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801e7fc:	f8db 2000 	ldr.w	r2, [fp]
		switch((width + 7)/8)
 801e800:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801e802:	eb02 0106 	add.w	r1, r2, r6
 801e806:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801e808:	d00a      	beq.n	801e820 <TFT_DrawCharRus+0x90>
 801e80a:	784a      	ldrb	r2, [r1, #1]
 801e80c:	2d02      	cmp	r5, #2
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801e80e:	bf1d      	ittte	ne
 801e810:	0212      	lslne	r2, r2, #8
 801e812:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801e816:	788a      	ldrbne	r2, [r1, #2]
				line = (pchar[0]<< 8) | pchar[1];
 801e818:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801e81c:	bf18      	it	ne
 801e81e:	4314      	orrne	r4, r2
		for (j = 0; j < width; j++)
 801e820:	2700      	movs	r7, #0
 801e822:	4557      	cmp	r7, sl
 801e824:	d303      	bcc.n	801e82e <TFT_DrawCharRus+0x9e>
	for(i = 0; i < height; i++)
 801e826:	f108 0801 	add.w	r8, r8, #1
 801e82a:	442e      	add	r6, r5
 801e82c:	e7cf      	b.n	801e7ce <TFT_DrawCharRus+0x3e>
				if(line & (1 << (width- j + offset- 1)))
 801e82e:	9b03      	ldr	r3, [sp, #12]
 801e830:	1bd9      	subs	r1, r3, r7
 801e832:	9b01      	ldr	r3, [sp, #4]
 801e834:	2201      	movs	r2, #1
 801e836:	408a      	lsls	r2, r1
 801e838:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801e83a:	4b05      	ldr	r3, [pc, #20]	; (801e850 <TFT_DrawCharRus+0xc0>)
				if(line & (1 << (width- j + offset- 1)))
 801e83c:	4222      	tst	r2, r4
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801e83e:	bf14      	ite	ne
 801e840:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
 801e842:	889a      	ldrheq	r2, [r3, #4]
 801e844:	4649      	mov	r1, r9
 801e846:	b280      	uxth	r0, r0
 801e848:	f7ff fb8e 	bl	801df68 <TFT_DrawPixel>
		for (j = 0; j < width; j++)
 801e84c:	3701      	adds	r7, #1
 801e84e:	e7e8      	b.n	801e822 <TFT_DrawCharRus+0x92>
 801e850:	20090f54 	.word	0x20090f54
 801e854:	20090f64 	.word	0x20090f64

0801e858 <TFT_DrawCutBMP>:


	uint16_t Xpos, Ypos;
	uint32_t ip = 0;
void TFT_DrawCutBMP(uint16_t x_pos, uint16_t y_pos, uint16_t xs, uint16_t ys, uint16_t size, sImage pbmp)
{
 801e858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e85c:	b085      	sub	sp, #20
	uint16_t q = 1;
	ip = pbmp.Width*ys+xs-1;
 801e85e:	4d25      	ldr	r5, [pc, #148]	; (801e8f4 <TFT_DrawCutBMP+0x9c>)
 801e860:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
{
 801e864:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
	
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801e868:	4c23      	ldr	r4, [pc, #140]	; (801e8f8 <TFT_DrawCutBMP+0xa0>)
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e86a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801e8fc <TFT_DrawCutBMP+0xa4>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801e86e:	8021      	strh	r1, [r4, #0]
	ip = pbmp.Width*ys+xs-1;
 801e870:	fb09 2303 	mla	r3, r9, r3, r2
 801e874:	1e5a      	subs	r2, r3, #1
 801e876:	602a      	str	r2, [r5, #0]
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801e878:	19ca      	adds	r2, r1, r7
{
 801e87a:	4683      	mov	fp, r0
	uint16_t q = 1;
 801e87c:	2601      	movs	r6, #1
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801e87e:	9202      	str	r2, [sp, #8]
 801e880:	8822      	ldrh	r2, [r4, #0]
 801e882:	9902      	ldr	r1, [sp, #8]
 801e884:	428a      	cmp	r2, r1
 801e886:	db02      	blt.n	801e88e <TFT_DrawCutBMP+0x36>
				{ip = ip + pbmp.Width-size+1; 
					q++;}
		}
	}
	
}
 801e888:	b005      	add	sp, #20
 801e88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e88e:	eb0b 0207 	add.w	r2, fp, r7
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801e892:	eb03 0a07 	add.w	sl, r3, r7
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e896:	f8a8 b000 	strh.w	fp, [r8]
 801e89a:	9201      	str	r2, [sp, #4]
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801e89c:	f1aa 0a02 	sub.w	sl, sl, #2
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e8a0:	f8b8 0000 	ldrh.w	r0, [r8]
 801e8a4:	9a01      	ldr	r2, [sp, #4]
 801e8a6:	4290      	cmp	r0, r2
 801e8a8:	db03      	blt.n	801e8b2 <TFT_DrawCutBMP+0x5a>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801e8aa:	8822      	ldrh	r2, [r4, #0]
 801e8ac:	3201      	adds	r2, #1
 801e8ae:	8022      	strh	r2, [r4, #0]
 801e8b0:	e7e6      	b.n	801e880 <TFT_DrawCutBMP+0x28>
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[ip]);
 801e8b2:	6829      	ldr	r1, [r5, #0]
 801e8b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e8b6:	9303      	str	r3, [sp, #12]
 801e8b8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801e8bc:	8821      	ldrh	r1, [r4, #0]
 801e8be:	f7ff fb53 	bl	801df68 <TFT_DrawPixel>
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801e8c2:	682a      	ldr	r2, [r5, #0]
 801e8c4:	9b03      	ldr	r3, [sp, #12]
 801e8c6:	1e71      	subs	r1, r6, #1
 801e8c8:	fb09 a101 	mla	r1, r9, r1, sl
 801e8cc:	4291      	cmp	r1, r2
 801e8ce:	f102 0201 	add.w	r2, r2, #1
				{ip = ip + pbmp.Width-size+1; 
 801e8d2:	bf9b      	ittet	ls
 801e8d4:	444a      	addls	r2, r9
 801e8d6:	1bd2      	subls	r2, r2, r7
				{	ip++;} 
 801e8d8:	602a      	strhi	r2, [r5, #0]
				{ip = ip + pbmp.Width-size+1; 
 801e8da:	602a      	strls	r2, [r5, #0]
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e8dc:	f8b8 2000 	ldrh.w	r2, [r8]
					q++;}
 801e8e0:	bf98      	it	ls
 801e8e2:	3601      	addls	r6, #1
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e8e4:	f102 0201 	add.w	r2, r2, #1
					q++;}
 801e8e8:	bf98      	it	ls
 801e8ea:	b2b6      	uxthls	r6, r6
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e8ec:	f8a8 2000 	strh.w	r2, [r8]
 801e8f0:	e7d6      	b.n	801e8a0 <TFT_DrawCutBMP+0x48>
 801e8f2:	bf00      	nop
 801e8f4:	200055c4 	.word	0x200055c4
 801e8f8:	20090f50 	.word	0x20090f50
 801e8fc:	20090f60 	.word	0x20090f60

0801e900 <TFT_DrawChar>:
		i++;
	}
}

void TFT_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 801e900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i=0, j=0;
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line;
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801e904:	4b28      	ldr	r3, [pc, #160]	; (801e9a8 <TFT_DrawChar+0xa8>)
{
 801e906:	b085      	sub	sp, #20
 801e908:	e88d 0003 	stmia.w	sp, {r0, r1}
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801e90c:	6899      	ldr	r1, [r3, #8]
 801e90e:	4827      	ldr	r0, [pc, #156]	; (801e9ac <TFT_DrawChar+0xac>)
		((lcdprop.pFont->Width +7) / 8)];
 801e910:	f8b1 a004 	ldrh.w	sl, [r1, #4]
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801e914:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 801e918:	6809      	ldr	r1, [r1, #0]
 801e91a:	9002      	str	r0, [sp, #8]
		((lcdprop.pFont->Width +7) / 8)];
 801e91c:	f10a 0507 	add.w	r5, sl, #7
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801e920:	3a20      	subs	r2, #32
		((lcdprop.pFont->Width +7) / 8)];
 801e922:	10ed      	asrs	r5, r5, #3
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801e924:	fb0b f202 	mul.w	r2, fp, r2
 801e928:	fb05 1202 	mla	r2, r5, r2, r1
 801e92c:	6002      	str	r2, [r0, #0]
	height = lcdprop.pFont->Height;
	width = lcdprop.pFont->Width;
	offset = 8 * ((width + 7)/8) - width;
 801e92e:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
			break;
		}
		for(j = 0;j < width; j++)
		{
			if(line & (1 << (width - j + offset -1)))
 801e932:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0;i < height; i++)
 801e936:	2600      	movs	r6, #0
			if(line & (1 << (width - j + offset -1)))
 801e938:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0;i < height; i++)
 801e93c:	46b0      	mov	r8, r6
			if(line & (1 << (width - j + offset -1)))
 801e93e:	9303      	str	r3, [sp, #12]
 801e940:	9b01      	ldr	r3, [sp, #4]
	for(i = 0;i < height; i++)
 801e942:	45d8      	cmp	r8, fp
 801e944:	eb03 0908 	add.w	r9, r3, r8
 801e948:	fa1f f989 	uxth.w	r9, r9
 801e94c:	d302      	bcc.n	801e954 <TFT_DrawChar+0x54>
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801e94e:	b005      	add	sp, #20
 801e950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801e954:	9b02      	ldr	r3, [sp, #8]
 801e956:	681a      	ldr	r2, [r3, #0]
		switch((width + 7)/8)
 801e958:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801e95a:	eb02 0106 	add.w	r1, r2, r6
 801e95e:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801e960:	d00a      	beq.n	801e978 <TFT_DrawChar+0x78>
 801e962:	784a      	ldrb	r2, [r1, #1]
 801e964:	2d02      	cmp	r5, #2
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801e966:	bf1d      	ittte	ne
 801e968:	0212      	lslne	r2, r2, #8
 801e96a:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801e96e:	788a      	ldrbne	r2, [r1, #2]
			line = (pchar[0]<<8) | pchar[1];
 801e970:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801e974:	bf18      	it	ne
 801e976:	4314      	orrne	r4, r2
		for(j = 0;j < width; j++)
 801e978:	2700      	movs	r7, #0
 801e97a:	4557      	cmp	r7, sl
 801e97c:	d303      	bcc.n	801e986 <TFT_DrawChar+0x86>
	for(i = 0;i < height; i++)
 801e97e:	f108 0801 	add.w	r8, r8, #1
 801e982:	442e      	add	r6, r5
 801e984:	e7dc      	b.n	801e940 <TFT_DrawChar+0x40>
			if(line & (1 << (width - j + offset -1)))
 801e986:	9b03      	ldr	r3, [sp, #12]
 801e988:	1bd9      	subs	r1, r3, r7
 801e98a:	9b00      	ldr	r3, [sp, #0]
 801e98c:	2201      	movs	r2, #1
 801e98e:	408a      	lsls	r2, r1
 801e990:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801e992:	4b05      	ldr	r3, [pc, #20]	; (801e9a8 <TFT_DrawChar+0xa8>)
			if(line & (1 << (width - j + offset -1)))
 801e994:	4222      	tst	r2, r4
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801e996:	bf14      	ite	ne
 801e998:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
 801e99a:	889a      	ldrheq	r2, [r3, #4]
 801e99c:	4649      	mov	r1, r9
 801e99e:	b280      	uxth	r0, r0
 801e9a0:	f7ff fae2 	bl	801df68 <TFT_DrawPixel>
		for(j = 0;j < width; j++)
 801e9a4:	3701      	adds	r7, #1
 801e9a6:	e7e8      	b.n	801e97a <TFT_DrawChar+0x7a>
 801e9a8:	20090f54 	.word	0x20090f54
 801e9ac:	20090f64 	.word	0x20090f64

0801e9b0 <TFT_DisplayString>:
//----------------------------------------
void TFT_DisplayString(uint16_t Xpos, uint16_t Ypos, const uint8_t *Text,	Text_AlignModeTypdef Mode)
{
 801e9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e9b4:	460e      	mov	r6, r1
 801e9b6:	4604      	mov	r4, r0
 801e9b8:	4615      	mov	r5, r2
	uint16_t ref_column = 1, i = 0;
	uint32_t size = 0, xsize = 0;
	const uint8_t *ptr = Text;
 801e9ba:	4611      	mov	r1, r2
 801e9bc:	eba1 0e05 	sub.w	lr, r1, r5
	
	while(*ptr++) size++ ;
 801e9c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e9c4:	2a00      	cmp	r2, #0
 801e9c6:	d1f9      	bne.n	801e9bc <TFT_DisplayString+0xc>
	xsize = (X_SIZE/lcdprop.pFont->Width);
 801e9c8:	4f1b      	ldr	r7, [pc, #108]	; (801ea38 <TFT_DisplayString+0x88>)
 801e9ca:	f8df 8070 	ldr.w	r8, [pc, #112]	; 801ea3c <TFT_DisplayString+0x8c>
 801e9ce:	68ba      	ldr	r2, [r7, #8]
 801e9d0:	f8b8 1000 	ldrh.w	r1, [r8]
 801e9d4:	8890      	ldrh	r0, [r2, #4]
 801e9d6:	fbb1 f2f0 	udiv	r2, r1, r0
	switch (Mode)
 801e9da:	2b01      	cmp	r3, #1
 801e9dc:	d017      	beq.n	801ea0e <TFT_DisplayString+0x5e>
 801e9de:	2b02      	cmp	r3, #2
 801e9e0:	d01c      	beq.n	801ea1c <TFT_DisplayString+0x6c>
		{
			ref_column = Xpos;
			break;
		}
	}
	if((ref_column < 1) || (ref_column >= 0x8000))
 801e9e2:	b223      	sxth	r3, r4
	{
		ref_column = 1;
 801e9e4:	2b00      	cmp	r3, #0
 801e9e6:	bfd8      	it	le
 801e9e8:	2401      	movle	r4, #1
 801e9ea:	46a9      	mov	r9, r5
	}
	
	while ((*Text != 0) & (((X_SIZE - (i*lcdprop.pFont->Width)) & 0xFFFF) >=
 801e9ec:	68b9      	ldr	r1, [r7, #8]
 801e9ee:	f8b8 0000 	ldrh.w	r0, [r8]
 801e9f2:	8889      	ldrh	r1, [r1, #4]
 801e9f4:	eba9 0305 	sub.w	r3, r9, r5
 801e9f8:	b29b      	uxth	r3, r3
 801e9fa:	fb01 0313 	mls	r3, r1, r3, r0
 801e9fe:	b29b      	uxth	r3, r3
 801ea00:	4299      	cmp	r1, r3
 801ea02:	f819 2b01 	ldrb.w	r2, [r9], #1
 801ea06:	dc00      	bgt.n	801ea0a <TFT_DisplayString+0x5a>
 801ea08:	b96a      	cbnz	r2, 801ea26 <TFT_DisplayString+0x76>
 801ea0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width) / 2;
 801ea0e:	eba2 020e 	sub.w	r2, r2, lr
 801ea12:	4342      	muls	r2, r0
 801ea14:	eb04 0452 	add.w	r4, r4, r2, lsr #1
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801ea18:	b2a4      	uxth	r4, r4
			break;
 801ea1a:	e7e2      	b.n	801e9e2 <TFT_DisplayString+0x32>
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801ea1c:	eba2 020e 	sub.w	r2, r2, lr
 801ea20:	fb12 4400 	smlabb	r4, r2, r0, r4
 801ea24:	e7f8      	b.n	801ea18 <TFT_DisplayString+0x68>
			lcdprop.pFont->Width))
	{
		TFT_DrawChar(ref_column, Ypos, *Text);
 801ea26:	4620      	mov	r0, r4
 801ea28:	4631      	mov	r1, r6
 801ea2a:	f7ff ff69 	bl	801e900 <TFT_DrawChar>
		ref_column += lcdprop.pFont->Width;
 801ea2e:	68bb      	ldr	r3, [r7, #8]
 801ea30:	889b      	ldrh	r3, [r3, #4]
 801ea32:	441c      	add	r4, r3
 801ea34:	b2a4      	uxth	r4, r4
 801ea36:	e7d9      	b.n	801e9ec <TFT_DisplayString+0x3c>
 801ea38:	20090f54 	.word	0x20090f54
 801ea3c:	20000a44 	.word	0x20000a44

0801ea40 <DrawLineX>:
		Text++;
		i++;
	}
}

void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801ea40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801ea44:	1a5f      	subs	r7, r3, r1
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801ea46:	4616      	mov	r6, r2
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801ea48:	eba6 0800 	sub.w	r8, r6, r0
 801ea4c:	2f00      	cmp	r7, #0
 801ea4e:	bfb8      	it	lt
 801ea50:	427f      	neglt	r7, r7
 801ea52:	f1b8 0f00 	cmp.w	r8, #0
 801ea56:	bfb8      	it	lt
 801ea58:	f1c8 0800 	rsblt	r8, r8, #0
    if (steep){
 801ea5c:	4547      	cmp	r7, r8
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801ea5e:	4604      	mov	r4, r0
 801ea60:	460d      	mov	r5, r1
 801ea62:	461a      	mov	r2, r3
 801ea64:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
    if (steep){
 801ea68:	dd04      	ble.n	801ea74 <DrawLineX+0x34>
 801ea6a:	4633      	mov	r3, r6
        swap(x1, y1);
 801ea6c:	460c      	mov	r4, r1
        swap(x2, y2);
 801ea6e:	4616      	mov	r6, r2
        swap(x1, y1);
 801ea70:	4605      	mov	r5, r0
        swap(x2, y2);
 801ea72:	461a      	mov	r2, r3
    }
    if(x1>x2){
 801ea74:	42b4      	cmp	r4, r6
 801ea76:	d905      	bls.n	801ea84 <DrawLineX+0x44>
 801ea78:	462b      	mov	r3, r5
        swap(x1, x2);
        swap(y1, y2);
 801ea7a:	4615      	mov	r5, r2
 801ea7c:	461a      	mov	r2, r3
    if(x1>x2){
 801ea7e:	4623      	mov	r3, r4
 801ea80:	4634      	mov	r4, r6
 801ea82:	461e      	mov	r6, r3
    }
    int dx,dy;
    dx=x2-x1;
    dy=abs(y2-y1);
 801ea84:	eba2 0905 	sub.w	r9, r2, r5
 801ea88:	464b      	mov	r3, r9
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	bfb8      	it	lt
 801ea8e:	425b      	neglt	r3, r3
    dx=x2-x1;
 801ea90:	eba6 0a04 	sub.w	sl, r6, r4
    dy=abs(y2-y1);
 801ea94:	9301      	str	r3, [sp, #4]
    int err=dx/2;
 801ea96:	2302      	movs	r3, #2
 801ea98:	fb9a f9f3 	sdiv	r9, sl, r3
    int ystep;
    if(y1<y2) ystep = 1;
    else  ystep = -1;
 801ea9c:	4295      	cmp	r5, r2
 801ea9e:	bf34      	ite	cc
 801eaa0:	2301      	movcc	r3, #1
 801eaa2:	f04f 33ff 	movcs.w	r3, #4294967295
 801eaa6:	9300      	str	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801eaa8:	42b4      	cmp	r4, r6
 801eaaa:	d902      	bls.n	801eab2 <DrawLineX+0x72>
        if (err<0){
            y1 += ystep;
            err+=dx;
        }
    }
}
 801eaac:	b003      	add	sp, #12
 801eaae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801eab2:	4547      	cmp	r7, r8
 801eab4:	bfcb      	itete	gt
 801eab6:	4628      	movgt	r0, r5
        else {TFT_DrawPixel(x1, y1, color);
 801eab8:	4629      	movle	r1, r5
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801eaba:	4621      	movgt	r1, r4
        else {TFT_DrawPixel(x1, y1, color);
 801eabc:	4620      	movle	r0, r4
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801eabe:	465a      	mov	r2, fp
        else {TFT_DrawPixel(x1, y1, color);
 801eac0:	f7ff fa52 	bl	801df68 <TFT_DrawPixel>
        if (err<0){
 801eac4:	9b01      	ldr	r3, [sp, #4]
 801eac6:	ebb9 0903 	subs.w	r9, r9, r3
            y1 += ystep;
 801eaca:	bf48      	it	mi
 801eacc:	9b00      	ldrmi	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801eace:	f104 0401 	add.w	r4, r4, #1
            y1 += ystep;
 801ead2:	bf42      	ittt	mi
 801ead4:	18ed      	addmi	r5, r5, r3
 801ead6:	b2ad      	uxthmi	r5, r5
            err+=dx;
 801ead8:	44d1      	addmi	r9, sl
    for ( ; x1<=x2; x1++){
 801eada:	b2a4      	uxth	r4, r4
 801eadc:	e7e4      	b.n	801eaa8 <DrawLineX+0x68>
	...

0801eae0 <MX_SDMMC1_SD_Init>:

/* SDMMC1 init function */
static void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 801eae0:	4b06      	ldr	r3, [pc, #24]	; (801eafc <MX_SDMMC1_SD_Init+0x1c>)
 801eae2:	4a07      	ldr	r2, [pc, #28]	; (801eb00 <MX_SDMMC1_SD_Init+0x20>)
 801eae4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801eae6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801eaea:	2200      	movs	r2, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801eaec:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 10;
 801eaee:	210a      	movs	r1, #10
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801eaf0:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801eaf2:	609a      	str	r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801eaf4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 801eaf6:	6159      	str	r1, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 801eaf8:	619a      	str	r2, [r3, #24]
 801eafa:	4770      	bx	lr
 801eafc:	20091068 	.word	0x20091068
 801eb00:	50062400 	.word	0x50062400

0801eb04 <MX_TIM2_Init>:
{
 801eb04:	b510      	push	{r4, lr}
  htim2.Init.Period = exposure_timer_period[exp_num];
 801eb06:	4a16      	ldr	r2, [pc, #88]	; (801eb60 <MX_TIM2_Init+0x5c>)
  htim2.Instance = TIM2;
 801eb08:	4c16      	ldr	r4, [pc, #88]	; (801eb64 <MX_TIM2_Init+0x60>)
  htim2.Init.Period = exposure_timer_period[exp_num];
 801eb0a:	7811      	ldrb	r1, [r2, #0]
 801eb0c:	4a16      	ldr	r2, [pc, #88]	; (801eb68 <MX_TIM2_Init+0x64>)
  htim2.Init.Prescaler = 10000;
 801eb0e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801eb12:	f242 7310 	movw	r3, #10000	; 0x2710
 801eb16:	e884 0009 	stmia.w	r4, {r0, r3}
{
 801eb1a:	b088      	sub	sp, #32
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801eb1c:	2300      	movs	r3, #0
  htim2.Init.Period = exposure_timer_period[exp_num];
 801eb1e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801eb22:	60a3      	str	r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801eb24:	4620      	mov	r0, r4
  htim2.Init.Period = exposure_timer_period[exp_num];
 801eb26:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801eb28:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801eb2a:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801eb2c:	f7e7 faac 	bl	8006088 <HAL_TIM_Base_Init>
 801eb30:	b100      	cbz	r0, 801eb34 <MX_TIM2_Init+0x30>
 801eb32:	e7fe      	b.n	801eb32 <MX_TIM2_Init+0x2e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801eb34:	a908      	add	r1, sp, #32
 801eb36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801eb3a:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801eb3e:	4620      	mov	r0, r4
 801eb40:	f7e7 fbfe 	bl	8006340 <HAL_TIM_ConfigClockSource>
 801eb44:	b100      	cbz	r0, 801eb48 <MX_TIM2_Init+0x44>
 801eb46:	e7fe      	b.n	801eb46 <MX_TIM2_Init+0x42>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801eb48:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801eb4a:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801eb4c:	a901      	add	r1, sp, #4
 801eb4e:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801eb50:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801eb52:	f7e7 fd19 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 801eb56:	b100      	cbz	r0, 801eb5a <MX_TIM2_Init+0x56>
 801eb58:	e7fe      	b.n	801eb58 <MX_TIM2_Init+0x54>
}
 801eb5a:	b008      	add	sp, #32
 801eb5c:	bd10      	pop	{r4, pc}
 801eb5e:	bf00      	nop
 801eb60:	2008be5a 	.word	0x2008be5a
 801eb64:	200914c4 	.word	0x200914c4
 801eb68:	08033858 	.word	0x08033858

0801eb6c <DWT_Init>:
  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) 
 801eb6c:	4a07      	ldr	r2, [pc, #28]	; (801eb8c <DWT_Init+0x20>)
 801eb6e:	68d3      	ldr	r3, [r2, #12]
 801eb70:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 801eb74:	d109      	bne.n	801eb8a <DWT_Init+0x1e>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801eb76:	68d1      	ldr	r1, [r2, #12]
 801eb78:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 801eb7c:	60d1      	str	r1, [r2, #12]
    DWT->CYCCNT = 0;
 801eb7e:	4a04      	ldr	r2, [pc, #16]	; (801eb90 <DWT_Init+0x24>)
 801eb80:	6053      	str	r3, [r2, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 801eb82:	6813      	ldr	r3, [r2, #0]
 801eb84:	f043 0301 	orr.w	r3, r3, #1
 801eb88:	6013      	str	r3, [r2, #0]
 801eb8a:	4770      	bx	lr
 801eb8c:	e000edf0 	.word	0xe000edf0
 801eb90:	e0001000 	.word	0xe0001000

0801eb94 <DWT_Delay>:
  return DWT->CYCCNT;
 801eb94:	4a07      	ldr	r2, [pc, #28]	; (801ebb4 <DWT_Delay+0x20>)
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801eb96:	4b08      	ldr	r3, [pc, #32]	; (801ebb8 <DWT_Delay+0x24>)
  return DWT->CYCCNT;
 801eb98:	6851      	ldr	r1, [r2, #4]
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801eb9a:	681b      	ldr	r3, [r3, #0]
{
 801eb9c:	b510      	push	{r4, lr}
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801eb9e:	4c07      	ldr	r4, [pc, #28]	; (801ebbc <DWT_Delay+0x28>)
 801eba0:	fbb3 f3f4 	udiv	r3, r3, r4
 801eba4:	fb00 1003 	mla	r0, r0, r3, r1
  return DWT->CYCCNT;
 801eba8:	6853      	ldr	r3, [r2, #4]
  return (((int32_t)DWT_Get() - tp) < 0);
 801ebaa:	1a1b      	subs	r3, r3, r0
  while (DWT_Compare(tp));
 801ebac:	2b00      	cmp	r3, #0
 801ebae:	dbfb      	blt.n	801eba8 <DWT_Delay+0x14>
}
 801ebb0:	bd10      	pop	{r4, pc}
 801ebb2:	bf00      	nop
 801ebb4:	e0001000 	.word	0xe0001000
 801ebb8:	20000a50 	.word	0x20000a50
 801ebbc:	000f4240 	.word	0x000f4240

0801ebc0 <Calculate_Data>:
{
 801ebc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801ebc2:	4a78      	ldr	r2, [pc, #480]	; (801eda4 <Calculate_Data+0x1e4>)
 801ebc4:	4b78      	ldr	r3, [pc, #480]	; (801eda8 <Calculate_Data+0x1e8>)
 801ebc6:	4979      	ldr	r1, [pc, #484]	; (801edac <Calculate_Data+0x1ec>)
 801ebc8:	4879      	ldr	r0, [pc, #484]	; (801edb0 <Calculate_Data+0x1f0>)
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801ebca:	4d7a      	ldr	r5, [pc, #488]	; (801edb4 <Calculate_Data+0x1f4>)
	if(GUI_screen_state == Color_Screen)
 801ebcc:	4f7a      	ldr	r7, [pc, #488]	; (801edb8 <Calculate_Data+0x1f8>)
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801ebce:	f7ef fa5f 	bl	800e090 <Calculate_XYZ1964>
	Calculate_xy1964(colorimetry_XYZ1964);
 801ebd2:	487a      	ldr	r0, [pc, #488]	; (801edbc <Calculate_Data+0x1fc>)
 801ebd4:	f7ef faf8 	bl	800e1c8 <Calculate_xy1964>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801ebd8:	4b79      	ldr	r3, [pc, #484]	; (801edc0 <Calculate_Data+0x200>)
 801ebda:	4a7a      	ldr	r2, [pc, #488]	; (801edc4 <Calculate_Data+0x204>)
 801ebdc:	497a      	ldr	r1, [pc, #488]	; (801edc8 <Calculate_Data+0x208>)
 801ebde:	4874      	ldr	r0, [pc, #464]	; (801edb0 <Calculate_Data+0x1f0>)
 801ebe0:	f7ef faa4 	bl	800e12c <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801ebe4:	4879      	ldr	r0, [pc, #484]	; (801edcc <Calculate_Data+0x20c>)
 801ebe6:	f7ef fb0d 	bl	800e204 <Calculate_xy1931>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801ebea:	7829      	ldrb	r1, [r5, #0]
 801ebec:	4870      	ldr	r0, [pc, #448]	; (801edb0 <Calculate_Data+0x1f0>)
 801ebee:	f7ef fb6f 	bl	800e2d0 <Calculate_Tc>
 801ebf2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801ebf6:	4b76      	ldr	r3, [pc, #472]	; (801edd0 <Calculate_Data+0x210>)
 801ebf8:	ee17 2a90 	vmov	r2, s15
 801ebfc:	801a      	strh	r2, [r3, #0]
	if(GUI_screen_state == Color_Screen)
 801ebfe:	783a      	ldrb	r2, [r7, #0]
 801ec00:	2a05      	cmp	r2, #5
 801ec02:	d114      	bne.n	801ec2e <Calculate_Data+0x6e>
		if(Color_Field&Color_CIE_Luv) {Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);} else 
 801ec04:	4b73      	ldr	r3, [pc, #460]	; (801edd4 <Calculate_Data+0x214>)
 801ec06:	781b      	ldrb	r3, [r3, #0]
 801ec08:	075a      	lsls	r2, r3, #29
 801ec0a:	f140 80ba 	bpl.w	801ed82 <Calculate_Data+0x1c2>
 801ec0e:	7828      	ldrb	r0, [r5, #0]
 801ec10:	4e71      	ldr	r6, [pc, #452]	; (801edd8 <Calculate_Data+0x218>)
 801ec12:	4c72      	ldr	r4, [pc, #456]	; (801eddc <Calculate_Data+0x21c>)
 801ec14:	2800      	cmp	r0, #0
 801ec16:	bf0c      	ite	eq
 801ec18:	4630      	moveq	r0, r6
 801ec1a:	4620      	movne	r0, r4
 801ec1c:	f7ef fb34 	bl	800e288 <Calculate_uv1976>
 801ec20:	7828      	ldrb	r0, [r5, #0]
 801ec22:	2800      	cmp	r0, #0
 801ec24:	bf0c      	ite	eq
 801ec26:	4630      	moveq	r0, r6
 801ec28:	4620      	movne	r0, r4
 801ec2a:	f7ef fb09 	bl	800e240 <Calculate_uv>
	if(GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen|| GUI_screen_state == Measure3_Screen)
 801ec2e:	783b      	ldrb	r3, [r7, #0]
 801ec30:	3b01      	subs	r3, #1
 801ec32:	2b02      	cmp	r3, #2
 801ec34:	f200 80a4 	bhi.w	801ed80 <Calculate_Data+0x1c0>
			if(Measure_Field&Illuminance) {E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);}
 801ec38:	4c69      	ldr	r4, [pc, #420]	; (801ede0 <Calculate_Data+0x220>)
 801ec3a:	8823      	ldrh	r3, [r4, #0]
 801ec3c:	07de      	lsls	r6, r3, #31
 801ec3e:	d506      	bpl.n	801ec4e <Calculate_Data+0x8e>
 801ec40:	4960      	ldr	r1, [pc, #384]	; (801edc4 <Calculate_Data+0x204>)
 801ec42:	485b      	ldr	r0, [pc, #364]	; (801edb0 <Calculate_Data+0x1f0>)
 801ec44:	f7ef f8f6 	bl	800de34 <Calculate_EL_Day>
 801ec48:	4b66      	ldr	r3, [pc, #408]	; (801ede4 <Calculate_Data+0x224>)
 801ec4a:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&Irradiance) {E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);}
 801ec4e:	8823      	ldrh	r3, [r4, #0]
 801ec50:	0798      	lsls	r0, r3, #30
 801ec52:	d505      	bpl.n	801ec60 <Calculate_Data+0xa0>
 801ec54:	4856      	ldr	r0, [pc, #344]	; (801edb0 <Calculate_Data+0x1f0>)
 801ec56:	f7ef f90d 	bl	800de74 <Calculate_EL_Day_Wt>
 801ec5a:	4b63      	ldr	r3, [pc, #396]	; (801ede8 <Calculate_Data+0x228>)
 801ec5c:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801ec60:	8823      	ldrh	r3, [r4, #0]
 801ec62:	0499      	lsls	r1, r3, #18
 801ec64:	d519      	bpl.n	801ec9a <Calculate_Data+0xda>
 801ec66:	4961      	ldr	r1, [pc, #388]	; (801edec <Calculate_Data+0x22c>)
 801ec68:	4851      	ldr	r0, [pc, #324]	; (801edb0 <Calculate_Data+0x1f0>)
 801ec6a:	4e61      	ldr	r6, [pc, #388]	; (801edf0 <Calculate_Data+0x230>)
 801ec6c:	4f5d      	ldr	r7, [pc, #372]	; (801ede4 <Calculate_Data+0x224>)
 801ec6e:	f7ef f919 	bl	800dea4 <Calculate_EL_Night>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801ec72:	8822      	ldrh	r2, [r4, #0]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801ec74:	ed86 0a00 	vstr	s0, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801ec78:	f012 0f01 	tst.w	r2, #1
 801ec7c:	f040 808f 	bne.w	801ed9e <Calculate_Data+0x1de>
 801ec80:	4950      	ldr	r1, [pc, #320]	; (801edc4 <Calculate_Data+0x204>)
 801ec82:	484b      	ldr	r0, [pc, #300]	; (801edb0 <Calculate_Data+0x1f0>)
 801ec84:	f7ef f8d6 	bl	800de34 <Calculate_EL_Day>
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801ec88:	edd6 0a00 	vldr	s1, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801ec8c:	ed87 0a00 	vstr	s0, [r7]
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801ec90:	f7ef f928 	bl	800dee4 <Calculate_SP>
 801ec94:	4b57      	ldr	r3, [pc, #348]	; (801edf4 <Calculate_Data+0x234>)
 801ec96:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD) {PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));//*100000
 801ec9a:	8823      	ldrh	r3, [r4, #0]
 801ec9c:	075a      	lsls	r2, r3, #29
 801ec9e:	d506      	bpl.n	801ecae <Calculate_Data+0xee>
 801eca0:	4955      	ldr	r1, [pc, #340]	; (801edf8 <Calculate_Data+0x238>)
 801eca2:	4843      	ldr	r0, [pc, #268]	; (801edb0 <Calculate_Data+0x1f0>)
 801eca4:	f7ef f92c 	bl	800df00 <Calculate_PPFD_PPL>
 801eca8:	4b54      	ldr	r3, [pc, #336]	; (801edfc <Calculate_Data+0x23c>)
 801ecaa:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801ecae:	8823      	ldrh	r3, [r4, #0]
 801ecb0:	071b      	lsls	r3, r3, #28
 801ecb2:	d51f      	bpl.n	801ecf4 <Calculate_Data+0x134>
 801ecb4:	2200      	movs	r2, #0
 801ecb6:	4950      	ldr	r1, [pc, #320]	; (801edf8 <Calculate_Data+0x238>)
 801ecb8:	483d      	ldr	r0, [pc, #244]	; (801edb0 <Calculate_Data+0x1f0>)
 801ecba:	f7ef f95d 	bl	800df78 <Calculate_PPFD_PPL_Range>
 801ecbe:	4b50      	ldr	r3, [pc, #320]	; (801ee00 <Calculate_Data+0x240>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801ecc0:	494d      	ldr	r1, [pc, #308]	; (801edf8 <Calculate_Data+0x238>)
 801ecc2:	483b      	ldr	r0, [pc, #236]	; (801edb0 <Calculate_Data+0x1f0>)
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801ecc4:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801ecc8:	2201      	movs	r2, #1
 801ecca:	f7ef f955 	bl	800df78 <Calculate_PPFD_PPL_Range>
 801ecce:	4b4d      	ldr	r3, [pc, #308]	; (801ee04 <Calculate_Data+0x244>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801ecd0:	4949      	ldr	r1, [pc, #292]	; (801edf8 <Calculate_Data+0x238>)
 801ecd2:	4837      	ldr	r0, [pc, #220]	; (801edb0 <Calculate_Data+0x1f0>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801ecd4:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801ecd8:	2202      	movs	r2, #2
 801ecda:	f7ef f94d 	bl	800df78 <Calculate_PPFD_PPL_Range>
 801ecde:	4b4a      	ldr	r3, [pc, #296]	; (801ee08 <Calculate_Data+0x248>)
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801ece0:	4945      	ldr	r1, [pc, #276]	; (801edf8 <Calculate_Data+0x238>)
 801ece2:	4833      	ldr	r0, [pc, #204]	; (801edb0 <Calculate_Data+0x1f0>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801ece4:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801ece8:	2203      	movs	r2, #3
 801ecea:	f7ef f945 	bl	800df78 <Calculate_PPFD_PPL_Range>
 801ecee:	4b47      	ldr	r3, [pc, #284]	; (801ee0c <Calculate_Data+0x24c>)
 801ecf0:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&delta_E){delta_Eab_Measure = Calculate_deltaEab();}
 801ecf4:	8823      	ldrh	r3, [r4, #0]
 801ecf6:	051f      	lsls	r7, r3, #20
 801ecf8:	d503      	bpl.n	801ed02 <Calculate_Data+0x142>
 801ecfa:	f7ef fec5 	bl	800ea88 <Calculate_deltaEab>
 801ecfe:	4b44      	ldr	r3, [pc, #272]	; (801ee10 <Calculate_Data+0x250>)
 801ed00:	8018      	strh	r0, [r3, #0]
			if(Measure_Field&CIE_Luv){Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);}
 801ed02:	8823      	ldrh	r3, [r4, #0]
 801ed04:	065e      	lsls	r6, r3, #25
 801ed06:	d50f      	bpl.n	801ed28 <Calculate_Data+0x168>
 801ed08:	7828      	ldrb	r0, [r5, #0]
 801ed0a:	4f33      	ldr	r7, [pc, #204]	; (801edd8 <Calculate_Data+0x218>)
 801ed0c:	4e33      	ldr	r6, [pc, #204]	; (801eddc <Calculate_Data+0x21c>)
 801ed0e:	2800      	cmp	r0, #0
 801ed10:	bf0c      	ite	eq
 801ed12:	4638      	moveq	r0, r7
 801ed14:	4630      	movne	r0, r6
 801ed16:	f7ef fab7 	bl	800e288 <Calculate_uv1976>
 801ed1a:	7828      	ldrb	r0, [r5, #0]
 801ed1c:	2800      	cmp	r0, #0
 801ed1e:	bf0c      	ite	eq
 801ed20:	4638      	moveq	r0, r7
 801ed22:	4630      	movne	r0, r6
 801ed24:	f7ef fa8c 	bl	800e240 <Calculate_uv>
			if(Measure_Field&CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801ed28:	8823      	ldrh	r3, [r4, #0]
 801ed2a:	0618      	lsls	r0, r3, #24
 801ed2c:	d509      	bpl.n	801ed42 <Calculate_Data+0x182>
 801ed2e:	4b39      	ldr	r3, [pc, #228]	; (801ee14 <Calculate_Data+0x254>)
 801ed30:	7829      	ldrb	r1, [r5, #0]
 801ed32:	781a      	ldrb	r2, [r3, #0]
 801ed34:	4821      	ldr	r0, [pc, #132]	; (801edbc <Calculate_Data+0x1fc>)
 801ed36:	4b25      	ldr	r3, [pc, #148]	; (801edcc <Calculate_Data+0x20c>)
 801ed38:	2900      	cmp	r1, #0
 801ed3a:	bf18      	it	ne
 801ed3c:	4618      	movne	r0, r3
 801ed3e:	f7ef fc63 	bl	800e608 <Calculate_Lab>
			if(Measure_Field&lambda_d){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801ed42:	8823      	ldrh	r3, [r4, #0]
 801ed44:	0599      	lsls	r1, r3, #22
 801ed46:	d503      	bpl.n	801ed50 <Calculate_Data+0x190>
 801ed48:	7829      	ldrb	r1, [r5, #0]
 801ed4a:	4819      	ldr	r0, [pc, #100]	; (801edb0 <Calculate_Data+0x1f0>)
 801ed4c:	f7ef fd92 	bl	800e874 <Calculate_Lambda_Dominant>
			if(Measure_Field&lambda_c){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801ed50:	8823      	ldrh	r3, [r4, #0]
 801ed52:	055a      	lsls	r2, r3, #21
 801ed54:	d503      	bpl.n	801ed5e <Calculate_Data+0x19e>
 801ed56:	7829      	ldrb	r1, [r5, #0]
 801ed58:	4815      	ldr	r0, [pc, #84]	; (801edb0 <Calculate_Data+0x1f0>)
 801ed5a:	f7ef fd8b 	bl	800e874 <Calculate_Lambda_Dominant>
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801ed5e:	8823      	ldrh	r3, [r4, #0]
 801ed60:	04db      	lsls	r3, r3, #19
 801ed62:	d50d      	bpl.n	801ed80 <Calculate_Data+0x1c0>
 801ed64:	492c      	ldr	r1, [pc, #176]	; (801ee18 <Calculate_Data+0x258>)
 801ed66:	4812      	ldr	r0, [pc, #72]	; (801edb0 <Calculate_Data+0x1f0>)
 801ed68:	f7ef f990 	bl	800e08c <Calculate_ELr>
 801ed6c:	4b2b      	ldr	r3, [pc, #172]	; (801ee1c <Calculate_Data+0x25c>)
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801ed6e:	492c      	ldr	r1, [pc, #176]	; (801ee20 <Calculate_Data+0x260>)
 801ed70:	480f      	ldr	r0, [pc, #60]	; (801edb0 <Calculate_Data+0x1f0>)
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801ed72:	ed83 0a00 	vstr	s0, [r3]
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801ed76:	f7ef f96f 	bl	800e058 <Calculate_ELb>
 801ed7a:	4b2a      	ldr	r3, [pc, #168]	; (801ee24 <Calculate_Data+0x264>)
 801ed7c:	ed83 0a00 	vstr	s0, [r3]
 801ed80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(Color_Field&Color_CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801ed82:	079b      	lsls	r3, r3, #30
 801ed84:	f57f af53 	bpl.w	801ec2e <Calculate_Data+0x6e>
 801ed88:	4b22      	ldr	r3, [pc, #136]	; (801ee14 <Calculate_Data+0x254>)
 801ed8a:	7829      	ldrb	r1, [r5, #0]
 801ed8c:	781a      	ldrb	r2, [r3, #0]
 801ed8e:	480b      	ldr	r0, [pc, #44]	; (801edbc <Calculate_Data+0x1fc>)
 801ed90:	4b0e      	ldr	r3, [pc, #56]	; (801edcc <Calculate_Data+0x20c>)
 801ed92:	2900      	cmp	r1, #0
 801ed94:	bf18      	it	ne
 801ed96:	4618      	movne	r0, r3
 801ed98:	f7ef fc36 	bl	800e608 <Calculate_Lab>
 801ed9c:	e747      	b.n	801ec2e <Calculate_Data+0x6e>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801ed9e:	ed97 0a00 	vldr	s0, [r7]
 801eda2:	e771      	b.n	801ec88 <Calculate_Data+0xc8>
 801eda4:	20087db8 	.word	0x20087db8
 801eda8:	20089db8 	.word	0x20089db8
 801edac:	20086db8 	.word	0x20086db8
 801edb0:	20007de4 	.word	0x20007de4
 801edb4:	2000527c 	.word	0x2000527c
 801edb8:	20005279 	.word	0x20005279
 801edbc:	2008adcc 	.word	0x2008adcc
 801edc0:	20088db8 	.word	0x20088db8
 801edc4:	2004e1e8 	.word	0x2004e1e8
 801edc8:	20085db8 	.word	0x20085db8
 801edcc:	2008adc6 	.word	0x2008adc6
 801edd0:	200501e8 	.word	0x200501e8
 801edd4:	20005277 	.word	0x20005277
 801edd8:	2008adec 	.word	0x2008adec
 801eddc:	2008ade4 	.word	0x2008ade4
 801ede0:	2000527e 	.word	0x2000527e
 801ede4:	2009150c 	.word	0x2009150c
 801ede8:	20090f78 	.word	0x20090f78
 801edec:	2004f1e8 	.word	0x2004f1e8
 801edf0:	20090f6c 	.word	0x20090f6c
 801edf4:	20091060 	.word	0x20091060
 801edf8:	200501ec 	.word	0x200501ec
 801edfc:	20090f80 	.word	0x20090f80
 801ee00:	20091064 	.word	0x20091064
 801ee04:	200913e8 	.word	0x200913e8
 801ee08:	20091324 	.word	0x20091324
 801ee0c:	20090f7c 	.word	0x20090f7c
 801ee10:	2008c316 	.word	0x2008c316
 801ee14:	2008c319 	.word	0x2008c319
 801ee18:	200065e0 	.word	0x200065e0
 801ee1c:	20091508 	.word	0x20091508
 801ee20:	200055e0 	.word	0x200055e0
 801ee24:	20091504 	.word	0x20091504

0801ee28 <Get_Battery_Level>:
{
 801ee28:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start(&hadc1);
 801ee2a:	4c13      	ldr	r4, [pc, #76]	; (801ee78 <Get_Battery_Level+0x50>)
	adcResult = HAL_ADC_GetValue(&hadc1);
 801ee2c:	4d13      	ldr	r5, [pc, #76]	; (801ee7c <Get_Battery_Level+0x54>)
	HAL_ADC_Start(&hadc1);
 801ee2e:	4620      	mov	r0, r4
 801ee30:	f7e2 fd06 	bl	8001840 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 2);
 801ee34:	2102      	movs	r1, #2
 801ee36:	4620      	mov	r0, r4
 801ee38:	f7e2 f9fc 	bl	8001234 <HAL_ADC_PollForConversion>
	adcResult = HAL_ADC_GetValue(&hadc1);
 801ee3c:	4620      	mov	r0, r4
 801ee3e:	f7e2 fa47 	bl	80012d0 <HAL_ADC_GetValue>
 801ee42:	7028      	strb	r0, [r5, #0]
	HAL_ADC_Stop(&hadc1);
 801ee44:	4620      	mov	r0, r4
 801ee46:	f7e2 fd7a 	bl	800193e <HAL_ADC_Stop>
	return percentage_charge = 100.0*adcResult/190;
 801ee4a:	7828      	ldrb	r0, [r5, #0]
 801ee4c:	f7e1 fb82 	bl	8000554 <__aeabi_i2d>
 801ee50:	2200      	movs	r2, #0
 801ee52:	4b0b      	ldr	r3, [pc, #44]	; (801ee80 <Get_Battery_Level+0x58>)
 801ee54:	f7e1 fbe4 	bl	8000620 <__aeabi_dmul>
 801ee58:	a305      	add	r3, pc, #20	; (adr r3, 801ee70 <Get_Battery_Level+0x48>)
 801ee5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee5e:	f7e1 fd09 	bl	8000874 <__aeabi_ddiv>
 801ee62:	4b08      	ldr	r3, [pc, #32]	; (801ee84 <Get_Battery_Level+0x5c>)
}
 801ee64:	ec41 0b10 	vmov	d0, r0, r1
	return percentage_charge = 100.0*adcResult/190;
 801ee68:	e9c3 0100 	strd	r0, r1, [r3]
}
 801ee6c:	bd38      	pop	{r3, r4, r5, pc}
 801ee6e:	bf00      	nop
 801ee70:	00000000 	.word	0x00000000
 801ee74:	4067c000 	.word	0x4067c000
 801ee78:	200912b8 	.word	0x200912b8
 801ee7c:	200511f4 	.word	0x200511f4
 801ee80:	40590000 	.word	0x40590000
 801ee84:	200913f0 	.word	0x200913f0

0801ee88 <packet_generator_data_send>:
{
 801ee88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801ee8c:	4c25      	ldr	r4, [pc, #148]	; (801ef24 <packet_generator_data_send+0x9c>)
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801ee8e:	4f26      	ldr	r7, [pc, #152]	; (801ef28 <packet_generator_data_send+0xa0>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ee90:	f8df 909c 	ldr.w	r9, [pc, #156]	; 801ef30 <packet_generator_data_send+0xa8>
			memset(dataToSend, 0, sizeof(dataToSend));
 801ee94:	2100      	movs	r1, #0
 801ee96:	2240      	movs	r2, #64	; 0x40
 801ee98:	4620      	mov	r0, r4
 801ee9a:	f002 ff78 	bl	8021d8e <memset>
			dataToSend[0] = 0xAB;
 801ee9e:	23ab      	movs	r3, #171	; 0xab
 801eea0:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801eea2:	2312      	movs	r3, #18
			dataToSend[2] = 0x01;
 801eea4:	2500      	movs	r5, #0
			dataToSend[1] = 0x12;
 801eea6:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x01;
 801eea8:	2301      	movs	r3, #1
 801eeaa:	70a3      	strb	r3, [r4, #2]
			packet_number = 0;
 801eeac:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801eeae:	4629      	mov	r1, r5
			q = 5;
 801eeb0:	2305      	movs	r3, #5
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801eeb2:	46a0      	mov	r8, r4
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801eeb4:	f837 2015 	ldrh.w	r2, [r7, r5, lsl #1]
				dataToSend[q+1] = byte_low;
 801eeb8:	eb04 0e03 	add.w	lr, r4, r3
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801eebc:	0a10      	lsrs	r0, r2, #8
 801eebe:	54e0      	strb	r0, [r4, r3]
				q = q + 2;
 801eec0:	3302      	adds	r3, #2
				byte_low = Line_buff[cnt] & 0x00FF;
 801eec2:	f88e 2001 	strb.w	r2, [lr, #1]
				q = q + 2;
 801eec6:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + byte_high + byte_low;
 801eec8:	fa50 f282 	uxtab	r2, r0, r2
 801eecc:	440a      	add	r2, r1
				if(q >= 62 || cnt == 1023){
 801eece:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + byte_high + byte_low;
 801eed0:	b291      	uxth	r1, r2
				if(q >= 62 || cnt == 1023){
 801eed2:	d803      	bhi.n	801eedc <packet_generator_data_send+0x54>
 801eed4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801eed8:	4295      	cmp	r5, r2
 801eeda:	d118      	bne.n	801ef0e <packet_generator_data_send+0x86>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801eedc:	7860      	ldrb	r0, [r4, #1]
 801eede:	7822      	ldrb	r2, [r4, #0]
 801eee0:	4402      	add	r2, r0
 801eee2:	78a0      	ldrb	r0, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801eee4:	0a33      	lsrs	r3, r6, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801eee6:	4402      	add	r2, r0
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801eee8:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801eeea:	b2f3      	uxtb	r3, r6
 801eeec:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801eeee:	4413      	add	r3, r2
 801eef0:	185a      	adds	r2, r3, r1
 801eef2:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801eef6:	4641      	mov	r1, r8
 801eef8:	2240      	movs	r2, #64	; 0x40
 801eefa:	4648      	mov	r0, r9
 801eefc:	f7e9 f8ce 	bl	800809c <USBD_CUSTOM_HID_SendReport>
					packet_number = packet_number + 1;
 801ef00:	3601      	adds	r6, #1
					HAL_Delay(2);
 801ef02:	2002      	movs	r0, #2
 801ef04:	f7e2 f892 	bl	800102c <HAL_Delay>
					packet_number = packet_number + 1;
 801ef08:	b2b6      	uxth	r6, r6
					CRC_pack = 0;
 801ef0a:	2100      	movs	r1, #0
					q = 5;
 801ef0c:	2305      	movs	r3, #5
 801ef0e:	3501      	adds	r5, #1
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801ef10:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801ef14:	d1ce      	bne.n	801eeb4 <packet_generator_data_send+0x2c>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801ef16:	4b05      	ldr	r3, [pc, #20]	; (801ef2c <packet_generator_data_send+0xa4>)
 801ef18:	2200      	movs	r2, #0
 801ef1a:	601a      	str	r2, [r3, #0]
 801ef1c:	605a      	str	r2, [r3, #4]
 801ef1e:	609a      	str	r2, [r3, #8]
 801ef20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef24:	2008ae00 	.word	0x2008ae00
 801ef28:	20009de4 	.word	0x20009de4
 801ef2c:	2008adf4 	.word	0x2008adf4
 801ef30:	20091558 	.word	0x20091558

0801ef34 <packet_generator_Rabs_data_send>:
{
 801ef34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801ef38:	4c3b      	ldr	r4, [pc, #236]	; (801f028 <packet_generator_Rabs_data_send+0xf4>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801ef3a:	4d3c      	ldr	r5, [pc, #240]	; (801f02c <packet_generator_Rabs_data_send+0xf8>)
 801ef3c:	4f3c      	ldr	r7, [pc, #240]	; (801f030 <packet_generator_Rabs_data_send+0xfc>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ef3e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801f054 <packet_generator_Rabs_data_send+0x120>
			memset(dataToSend, 0, sizeof(dataToSend));
 801ef42:	2240      	movs	r2, #64	; 0x40
 801ef44:	2100      	movs	r1, #0
 801ef46:	4620      	mov	r0, r4
 801ef48:	f002 ff21 	bl	8021d8e <memset>
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801ef4c:	4b39      	ldr	r3, [pc, #228]	; (801f034 <packet_generator_Rabs_data_send+0x100>)
 801ef4e:	8828      	ldrh	r0, [r5, #0]
 801ef50:	4939      	ldr	r1, [pc, #228]	; (801f038 <packet_generator_Rabs_data_send+0x104>)
 801ef52:	ed93 0a00 	vldr	s0, [r3]
 801ef56:	f7fc feb7 	bl	801bcc8 <Rabs_calc_Factor1>
 801ef5a:	4b38      	ldr	r3, [pc, #224]	; (801f03c <packet_generator_Rabs_data_send+0x108>)
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801ef5c:	4938      	ldr	r1, [pc, #224]	; (801f040 <packet_generator_Rabs_data_send+0x10c>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801ef5e:	ed83 0a00 	vstr	s0, [r3]
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801ef62:	edd1 0a00 	vldr	s1, [r1]
 801ef66:	4b37      	ldr	r3, [pc, #220]	; (801f044 <packet_generator_Rabs_data_send+0x110>)
 801ef68:	8829      	ldrh	r1, [r5, #0]
 801ef6a:	4a37      	ldr	r2, [pc, #220]	; (801f048 <packet_generator_Rabs_data_send+0x114>)
 801ef6c:	4832      	ldr	r0, [pc, #200]	; (801f038 <packet_generator_Rabs_data_send+0x104>)
 801ef6e:	f7fc fedf 	bl	801bd30 <Rabs_calc_main>
			dataToSend[0] = 0xAB;
 801ef72:	23ab      	movs	r3, #171	; 0xab
 801ef74:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801ef76:	2312      	movs	r3, #18
 801ef78:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x03;
 801ef7a:	2303      	movs	r3, #3
 801ef7c:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801ef7e:	4b33      	ldr	r3, [pc, #204]	; (801f04c <packet_generator_Rabs_data_send+0x118>)
 801ef80:	781b      	ldrb	r3, [r3, #0]
 801ef82:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801ef84:	f04f 0500 	mov.w	r5, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801ef88:	bf18      	it	ne
 801ef8a:	2301      	movne	r3, #1
 801ef8c:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801ef8e:	71a5      	strb	r5, [r4, #6]
			packet_number = 0;
 801ef90:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801ef92:	4629      	mov	r1, r5
			q = 7;
 801ef94:	2307      	movs	r3, #7
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ef96:	46a0      	mov	r8, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801ef98:	f857 2d04 	ldr.w	r2, [r7, #-4]!
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801ef9c:	f103 0c01 	add.w	ip, r3, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801efa0:	0e10      	lsrs	r0, r2, #24
 801efa2:	54e0      	strb	r0, [r4, r3]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801efa4:	f103 0e02 	add.w	lr, r3, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801efa8:	0c10      	lsrs	r0, r2, #16
 801efaa:	f804 000c 	strb.w	r0, [r4, ip]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801efae:	0a10      	lsrs	r0, r2, #8
 801efb0:	f804 000e 	strb.w	r0, [r4, lr]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801efb4:	18e0      	adds	r0, r4, r3
 801efb6:	b2d2      	uxtb	r2, r2
 801efb8:	70c2      	strb	r2, [r0, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801efba:	5ce0      	ldrb	r0, [r4, r3]
 801efbc:	4402      	add	r2, r0
 801efbe:	f814 000c 	ldrb.w	r0, [r4, ip]
 801efc2:	4410      	add	r0, r2
 801efc4:	f814 200e 	ldrb.w	r2, [r4, lr]
				q = q + 4;
 801efc8:	3304      	adds	r3, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801efca:	4402      	add	r2, r0
				q = q + 4;
 801efcc:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801efce:	4411      	add	r1, r2
				if(q >= 62 || cnt == 1023){
 801efd0:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801efd2:	b289      	uxth	r1, r1
				if(q >= 62 || cnt == 1023){
 801efd4:	d803      	bhi.n	801efde <packet_generator_Rabs_data_send+0xaa>
 801efd6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801efda:	4295      	cmp	r5, r2
 801efdc:	d118      	bne.n	801f010 <packet_generator_Rabs_data_send+0xdc>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801efde:	7860      	ldrb	r0, [r4, #1]
 801efe0:	7822      	ldrb	r2, [r4, #0]
 801efe2:	4402      	add	r2, r0
 801efe4:	78a0      	ldrb	r0, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801efe6:	0a33      	lsrs	r3, r6, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801efe8:	4402      	add	r2, r0
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801efea:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801efec:	b2f3      	uxtb	r3, r6
 801efee:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801eff0:	4413      	add	r3, r2
 801eff2:	440b      	add	r3, r1
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801eff4:	2240      	movs	r2, #64	; 0x40
 801eff6:	4641      	mov	r1, r8
 801eff8:	4648      	mov	r0, r9
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801effa:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801effe:	3601      	adds	r6, #1
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f000:	f7e9 f84c 	bl	800809c <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(2);
 801f004:	2002      	movs	r0, #2
 801f006:	f7e2 f811 	bl	800102c <HAL_Delay>
					packet_number = packet_number + 1;
 801f00a:	b2b6      	uxth	r6, r6
					CRC_pack = 0;
 801f00c:	2100      	movs	r1, #0
					q = 7;
 801f00e:	2307      	movs	r3, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801f010:	3501      	adds	r5, #1
 801f012:	b2ad      	uxth	r5, r5
 801f014:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801f018:	d1be      	bne.n	801ef98 <packet_generator_Rabs_data_send+0x64>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801f01a:	4b0d      	ldr	r3, [pc, #52]	; (801f050 <packet_generator_Rabs_data_send+0x11c>)
 801f01c:	2200      	movs	r2, #0
 801f01e:	601a      	str	r2, [r3, #0]
 801f020:	605a      	str	r2, [r3, #4]
 801f022:	609a      	str	r2, [r3, #8]
 801f024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f028:	2008ae00 	.word	0x2008ae00
 801f02c:	200055ca 	.word	0x200055ca
 801f030:	20008de4 	.word	0x20008de4
 801f034:	2004d1e4 	.word	0x2004d1e4
 801f038:	20009de4 	.word	0x20009de4
 801f03c:	200055d8 	.word	0x200055d8
 801f040:	200055dc 	.word	0x200055dc
 801f044:	20007de4 	.word	0x20007de4
 801f048:	2004d1e8 	.word	0x2004d1e8
 801f04c:	20000a48 	.word	0x20000a48
 801f050:	2008adf4 	.word	0x2008adf4
 801f054:	20091558 	.word	0x20091558

0801f058 <packet_generator_Calculated_data_send>:
{
 801f058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801f05c:	4c88      	ldr	r4, [pc, #544]	; (801f280 <packet_generator_Calculated_data_send+0x228>)
 801f05e:	f8df 9248 	ldr.w	r9, [pc, #584]	; 801f2a8 <packet_generator_Calculated_data_send+0x250>
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f062:	f8df b23c 	ldr.w	fp, [pc, #572]	; 801f2a0 <packet_generator_Calculated_data_send+0x248>
{
 801f066:	b087      	sub	sp, #28
			memset(dataToSend, 0, sizeof(dataToSend));
 801f068:	2240      	movs	r2, #64	; 0x40
 801f06a:	2100      	movs	r1, #0
 801f06c:	4620      	mov	r0, r4
 801f06e:	f002 fe8e 	bl	8021d8e <memset>
			delta_Eab_Measure = Calculate_deltaEab();
 801f072:	f7ef fd09 	bl	800ea88 <Calculate_deltaEab>
 801f076:	4b83      	ldr	r3, [pc, #524]	; (801f284 <packet_generator_Calculated_data_send+0x22c>)
 801f078:	8018      	strh	r0, [r3, #0]
			dataToSend[0] = 0xAB;
 801f07a:	23ab      	movs	r3, #171	; 0xab
 801f07c:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801f07e:	2312      	movs	r3, #18
 801f080:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801f082:	2304      	movs	r3, #4
 801f084:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801f086:	4b80      	ldr	r3, [pc, #512]	; (801f288 <packet_generator_Calculated_data_send+0x230>)
 801f088:	781b      	ldrb	r3, [r3, #0]
 801f08a:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801f08c:	f04f 0800 	mov.w	r8, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801f090:	bf18      	it	ne
 801f092:	2301      	movne	r3, #1
 801f094:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801f096:	f884 8006 	strb.w	r8, [r4, #6]
			packet_number = 0;
 801f09a:	4645      	mov	r5, r8
			uint16_t CRC_pack = 0, packet_number = 0;
 801f09c:	4647      	mov	r7, r8
			q = 7;
 801f09e:	2607      	movs	r6, #7
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f0a0:	46a2      	mov	sl, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801f0a2:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 801f0a6:	9305      	str	r3, [sp, #20]
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801f0a8:	0e1a      	lsrs	r2, r3, #24
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f0aa:	1c70      	adds	r0, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801f0ac:	55a2      	strb	r2, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801f0ae:	1cb1      	adds	r1, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f0b0:	0c1a      	lsrs	r2, r3, #16
 801f0b2:	5422      	strb	r2, [r4, r0]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801f0b4:	0a1a      	lsrs	r2, r3, #8
 801f0b6:	5462      	strb	r2, [r4, r1]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801f0b8:	19a2      	adds	r2, r4, r6
 801f0ba:	b2db      	uxtb	r3, r3
 801f0bc:	70d3      	strb	r3, [r2, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801f0be:	5da2      	ldrb	r2, [r4, r6]
 801f0c0:	4413      	add	r3, r2
 801f0c2:	5c22      	ldrb	r2, [r4, r0]
 801f0c4:	441a      	add	r2, r3
 801f0c6:	5c63      	ldrb	r3, [r4, r1]
				q = q + 4;
 801f0c8:	3604      	adds	r6, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801f0ca:	4413      	add	r3, r2
				q = q + 4;
 801f0cc:	b2f6      	uxtb	r6, r6
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801f0ce:	441f      	add	r7, r3
				if(q >= 62 || cnt == 1023){
 801f0d0:	2e3d      	cmp	r6, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801f0d2:	b2bf      	uxth	r7, r7
				if(q >= 62 || cnt == 1023){
 801f0d4:	d803      	bhi.n	801f0de <packet_generator_Calculated_data_send+0x86>
 801f0d6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801f0da:	4598      	cmp	r8, r3
 801f0dc:	d118      	bne.n	801f110 <packet_generator_Calculated_data_send+0xb8>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f0de:	7861      	ldrb	r1, [r4, #1]
 801f0e0:	7822      	ldrb	r2, [r4, #0]
 801f0e2:	440a      	add	r2, r1
 801f0e4:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801f0e6:	0a2b      	lsrs	r3, r5, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f0e8:	440a      	add	r2, r1
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801f0ea:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801f0ec:	b2eb      	uxtb	r3, r5
 801f0ee:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f0f0:	4413      	add	r3, r2
 801f0f2:	441f      	add	r7, r3
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f0f4:	2240      	movs	r2, #64	; 0x40
 801f0f6:	4651      	mov	r1, sl
 801f0f8:	4658      	mov	r0, fp
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f0fa:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f0fe:	f7e8 ffcd 	bl	800809c <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(2);
 801f102:	2002      	movs	r0, #2
 801f104:	f7e1 ff92 	bl	800102c <HAL_Delay>
					packet_number = packet_number + 1;
 801f108:	3501      	adds	r5, #1
 801f10a:	b2ad      	uxth	r5, r5
					CRC_pack = 0;
 801f10c:	2700      	movs	r7, #0
					q = 7;
 801f10e:	2607      	movs	r6, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801f110:	f108 0801 	add.w	r8, r8, #1
 801f114:	fa1f f888 	uxth.w	r8, r8
 801f118:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 801f11c:	d1c1      	bne.n	801f0a2 <packet_generator_Calculated_data_send+0x4a>
			memset(dataToSend, 0, sizeof(dataToSend)); 
 801f11e:	2240      	movs	r2, #64	; 0x40
 801f120:	2100      	movs	r1, #0
 801f122:	4857      	ldr	r0, [pc, #348]	; (801f280 <packet_generator_Calculated_data_send+0x228>)
 801f124:	f002 fe33 	bl	8021d8e <memset>
			dataToSend[0] = 0xAB;
 801f128:	23ab      	movs	r3, #171	; 0xab
 801f12a:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801f12c:	2312      	movs	r3, #18
 801f12e:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801f130:	2304      	movs	r3, #4
 801f132:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801f134:	4b54      	ldr	r3, [pc, #336]	; (801f288 <packet_generator_Calculated_data_send+0x230>)
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801f136:	4a55      	ldr	r2, [pc, #340]	; (801f28c <packet_generator_Calculated_data_send+0x234>)
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801f138:	781b      	ldrb	r3, [r3, #0]
 801f13a:	3300      	adds	r3, #0
 801f13c:	bf18      	it	ne
 801f13e:	2301      	movne	r3, #1
 801f140:	7163      	strb	r3, [r4, #5]
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801f142:	6813      	ldr	r3, [r2, #0]
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f144:	f106 0a01 	add.w	sl, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801f148:	0e19      	lsrs	r1, r3, #24
 801f14a:	55a1      	strb	r1, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801f14c:	f106 0902 	add.w	r9, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f150:	0c19      	lsrs	r1, r3, #16
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801f152:	f106 0803 	add.w	r8, r6, #3
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f156:	f804 100a 	strb.w	r1, [r4, sl]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801f15a:	0a19      	lsrs	r1, r3, #8
 801f15c:	f804 1009 	strb.w	r1, [r4, r9]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801f160:	f804 3008 	strb.w	r3, [r4, r8]
				memcpy(&buff_float, &colorimetry_xy1964[1], sizeof(float));
 801f164:	6853      	ldr	r3, [r2, #4]
 801f166:	9305      	str	r3, [sp, #20]
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801f168:	f106 0c04 	add.w	ip, r6, #4
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801f16c:	f106 0e05 	add.w	lr, r6, #5
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801f170:	0e1a      	lsrs	r2, r3, #24
 801f172:	f804 200c 	strb.w	r2, [r4, ip]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801f176:	1db0      	adds	r0, r6, #6
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801f178:	0c1a      	lsrs	r2, r3, #16
 801f17a:	f804 200e 	strb.w	r2, [r4, lr]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801f17e:	0a1a      	lsrs	r2, r3, #8
 801f180:	5422      	strb	r2, [r4, r0]
				dataToSend[q+7] = (buff_float) & 0x000000FF;
 801f182:	1df2      	adds	r2, r6, #7
 801f184:	9203      	str	r2, [sp, #12]
 801f186:	54a3      	strb	r3, [r4, r2]
				memcpy(&buff_float, &Tc_Measure, sizeof(uint16_t));
 801f188:	4b41      	ldr	r3, [pc, #260]	; (801f290 <packet_generator_Calculated_data_send+0x238>)
 801f18a:	881b      	ldrh	r3, [r3, #0]
 801f18c:	f8ad 3014 	strh.w	r3, [sp, #20]
				dataToSend[q+8]= (buff_float >> 8) & 0x000000FF;
 801f190:	f106 0308 	add.w	r3, r6, #8
 801f194:	9300      	str	r3, [sp, #0]
 801f196:	9b05      	ldr	r3, [sp, #20]
 801f198:	9900      	ldr	r1, [sp, #0]
 801f19a:	0a1a      	lsrs	r2, r3, #8
 801f19c:	5462      	strb	r2, [r4, r1]
				dataToSend[q+9] = (buff_float) & 0x000000FF;
 801f19e:	f106 0209 	add.w	r2, r6, #9
 801f1a2:	9201      	str	r2, [sp, #4]
 801f1a4:	54a3      	strb	r3, [r4, r2]
				dataToSend[q+10]= Source_Type;
 801f1a6:	f106 030a 	add.w	r3, r6, #10
 801f1aa:	9302      	str	r3, [sp, #8]
 801f1ac:	4b39      	ldr	r3, [pc, #228]	; (801f294 <packet_generator_Calculated_data_send+0x23c>)
 801f1ae:	9a02      	ldr	r2, [sp, #8]
 801f1b0:	781b      	ldrb	r3, [r3, #0]
 801f1b2:	54a3      	strb	r3, [r4, r2]
			if(Calculate_deltaEab_Done == 0x01)
 801f1b4:	4b38      	ldr	r3, [pc, #224]	; (801f298 <packet_generator_Calculated_data_send+0x240>)
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801f1b6:	4932      	ldr	r1, [pc, #200]	; (801f280 <packet_generator_Calculated_data_send+0x228>)
			if(Calculate_deltaEab_Done == 0x01)
 801f1b8:	781b      	ldrb	r3, [r3, #0]
 801f1ba:	2b01      	cmp	r3, #1
				memcpy(&buff_float, &delta_Eab_Measure, sizeof(int16_t));
 801f1bc:	bf01      	itttt	eq
 801f1be:	4b31      	ldreq	r3, [pc, #196]	; (801f284 <packet_generator_Calculated_data_send+0x22c>)
 801f1c0:	881b      	ldrheq	r3, [r3, #0]
 801f1c2:	f8ad 3014 	strheq.w	r3, [sp, #20]
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801f1c6:	9b05      	ldreq	r3, [sp, #20]
 801f1c8:	4434      	add	r4, r6
 801f1ca:	bf0b      	itete	eq
 801f1cc:	0a1a      	lsreq	r2, r3, #8
			} else {dataToSend[q+11] = 0;
 801f1ce:	2300      	movne	r3, #0
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801f1d0:	72e2      	strbeq	r2, [r4, #11]
			} else {dataToSend[q+11] = 0;
 801f1d2:	72e3      	strbne	r3, [r4, #11]
				dataToSend[q+12] = 0;
 801f1d4:	7323      	strb	r3, [r4, #12]
				memcpy(&buff_float, &colorimetry_xy1931[0], sizeof(float));
 801f1d6:	4c31      	ldr	r4, [pc, #196]	; (801f29c <packet_generator_Calculated_data_send+0x244>)
 801f1d8:	6822      	ldr	r2, [r4, #0]
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801f1da:	198b      	adds	r3, r1, r6
 801f1dc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801f1e0:	f883 b00d 	strb.w	fp, [r3, #13]
				dataToSend[q+14] = (buff_float >> 16) & 0x000000FF;
 801f1e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801f1e8:	f883 b00e 	strb.w	fp, [r3, #14]
				dataToSend[q+16] = (buff_float) & 0x000000FF;
 801f1ec:	741a      	strb	r2, [r3, #16]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801f1ee:	ea4f 2b12 	mov.w	fp, r2, lsr #8
				memcpy(&buff_float, &colorimetry_xy1931[1], sizeof(float));
 801f1f2:	6862      	ldr	r2, [r4, #4]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801f1f4:	f883 b00f 	strb.w	fp, [r3, #15]
				dataToSend[q+17] = (buff_float >> 24) & 0x000000FF;
 801f1f8:	0e14      	lsrs	r4, r2, #24
 801f1fa:	745c      	strb	r4, [r3, #17]
				dataToSend[q+18] = (buff_float >> 16) & 0x000000FF;
 801f1fc:	0c14      	lsrs	r4, r2, #16
 801f1fe:	749c      	strb	r4, [r3, #18]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801f200:	0a14      	lsrs	r4, r2, #8
				dataToSend[q+20] = (buff_float) & 0x000000FF;
 801f202:	751a      	strb	r2, [r3, #20]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801f204:	74dc      	strb	r4, [r3, #19]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801f206:	0a2a      	lsrs	r2, r5, #8
 801f208:	70ca      	strb	r2, [r1, #3]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801f20a:	780c      	ldrb	r4, [r1, #0]
 801f20c:	784a      	ldrb	r2, [r1, #1]
 801f20e:	4422      	add	r2, r4
 801f210:	788c      	ldrb	r4, [r1, #2]
					dataToSend[4] = packet_number & 0x00FF;
 801f212:	b2ed      	uxtb	r5, r5
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801f214:	4422      	add	r2, r4
					dataToSend[4] = packet_number & 0x00FF;
 801f216:	710d      	strb	r5, [r1, #4]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801f218:	4415      	add	r5, r2
 801f21a:	19ea      	adds	r2, r5, r7
 801f21c:	5d8d      	ldrb	r5, [r1, r6]
 801f21e:	f811 4008 	ldrb.w	r4, [r1, r8]
 801f222:	5c08      	ldrb	r0, [r1, r0]
 801f224:	442a      	add	r2, r5
 801f226:	f811 500a 	ldrb.w	r5, [r1, sl]
 801f22a:	442a      	add	r2, r5
 801f22c:	f811 5009 	ldrb.w	r5, [r1, r9]
 801f230:	442a      	add	r2, r5
 801f232:	4422      	add	r2, r4
 801f234:	f811 400c 	ldrb.w	r4, [r1, ip]
 801f238:	4422      	add	r2, r4
 801f23a:	f811 400e 	ldrb.w	r4, [r1, lr]
 801f23e:	4422      	add	r2, r4
 801f240:	4402      	add	r2, r0
 801f242:	9803      	ldr	r0, [sp, #12]
 801f244:	5c08      	ldrb	r0, [r1, r0]
 801f246:	4402      	add	r2, r0
 801f248:	9800      	ldr	r0, [sp, #0]
 801f24a:	5c08      	ldrb	r0, [r1, r0]
 801f24c:	4402      	add	r2, r0
 801f24e:	9801      	ldr	r0, [sp, #4]
 801f250:	5c08      	ldrb	r0, [r1, r0]
 801f252:	4402      	add	r2, r0
 801f254:	9802      	ldr	r0, [sp, #8]
 801f256:	7adb      	ldrb	r3, [r3, #11]
 801f258:	5c08      	ldrb	r0, [r1, r0]
 801f25a:	4402      	add	r2, r0
 801f25c:	4413      	add	r3, r2
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f25e:	4810      	ldr	r0, [pc, #64]	; (801f2a0 <packet_generator_Calculated_data_send+0x248>)
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + dataToSend[q]+dataToSend[q+1]+dataToSend[q+2] + dataToSend[q+3] + dataToSend[q+4]+
 801f260:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f264:	2240      	movs	r2, #64	; 0x40
 801f266:	f7e8 ff19 	bl	800809c <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(2);
 801f26a:	2002      	movs	r0, #2
 801f26c:	f7e1 fede 	bl	800102c <HAL_Delay>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801f270:	4b0c      	ldr	r3, [pc, #48]	; (801f2a4 <packet_generator_Calculated_data_send+0x24c>)
 801f272:	2200      	movs	r2, #0
 801f274:	601a      	str	r2, [r3, #0]
 801f276:	605a      	str	r2, [r3, #4]
 801f278:	609a      	str	r2, [r3, #8]
}
 801f27a:	b007      	add	sp, #28
 801f27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f280:	2008ae00 	.word	0x2008ae00
 801f284:	2008c316 	.word	0x2008c316
 801f288:	20000a48 	.word	0x20000a48
 801f28c:	2008adec 	.word	0x2008adec
 801f290:	200501e8 	.word	0x200501e8
 801f294:	2008c319 	.word	0x2008c319
 801f298:	20005219 	.word	0x20005219
 801f29c:	2008ade4 	.word	0x2008ade4
 801f2a0:	20091558 	.word	0x20091558
 801f2a4:	2008adf4 	.word	0x2008adf4
 801f2a8:	20008de4 	.word	0x20008de4

0801f2ac <usb_receive_processing>:
{
 801f2ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if(dataToReceive[0] == 0xAB)
 801f2b0:	4ca6      	ldr	r4, [pc, #664]	; (801f54c <usb_receive_processing+0x2a0>)
 801f2b2:	f894 9000 	ldrb.w	r9, [r4]
	uint32_t PAGEError = 0;
 801f2b6:	2500      	movs	r5, #0
		if(dataToReceive[0] == 0xAB)
 801f2b8:	f1b9 0fab 	cmp.w	r9, #171	; 0xab
	uint32_t PAGEError = 0;
 801f2bc:	9501      	str	r5, [sp, #4]
 801f2be:	4626      	mov	r6, r4
		if(dataToReceive[0] == 0xAB)
 801f2c0:	d12a      	bne.n	801f318 <usb_receive_processing+0x6c>
			if(dataToReceive[1] == 0x12)
 801f2c2:	f894 8001 	ldrb.w	r8, [r4, #1]
 801f2c6:	f1b8 0f12 	cmp.w	r8, #18
 801f2ca:	d117      	bne.n	801f2fc <usb_receive_processing+0x50>
			switch(dataToReceive[2])
 801f2cc:	78a7      	ldrb	r7, [r4, #2]
 801f2ce:	2f0a      	cmp	r7, #10
 801f2d0:	f000 80dd 	beq.w	801f48e <usb_receive_processing+0x1e2>
 801f2d4:	d815      	bhi.n	801f302 <usb_receive_processing+0x56>
 801f2d6:	2f02      	cmp	r7, #2
 801f2d8:	d023      	beq.n	801f322 <usb_receive_processing+0x76>
 801f2da:	2f04      	cmp	r7, #4
 801f2dc:	f000 81a2 	beq.w	801f624 <usb_receive_processing+0x378>
 801f2e0:	2f01      	cmp	r7, #1
 801f2e2:	d119      	bne.n	801f318 <usb_receive_processing+0x6c>
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801f2e4:	78f2      	ldrb	r2, [r6, #3]
						send_usb_block = 1;
 801f2e6:	4c9a      	ldr	r4, [pc, #616]	; (801f550 <usb_receive_processing+0x2a4>)
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801f2e8:	2a01      	cmp	r2, #1
						send_usb_block = 1;
 801f2ea:	7027      	strb	r7, [r4, #0]
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801f2ec:	d116      	bne.n	801f31c <usb_receive_processing+0x70>
						packet_generator_Rabs_data_send();
 801f2ee:	f7ff fe21 	bl	801ef34 <packet_generator_Rabs_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f2f2:	2300      	movs	r3, #0
 801f2f4:	6033      	str	r3, [r6, #0]
 801f2f6:	6073      	str	r3, [r6, #4]
 801f2f8:	60b3      	str	r3, [r6, #8]
						send_usb_block = 0;
 801f2fa:	7023      	strb	r3, [r4, #0]
}
 801f2fc:	b002      	add	sp, #8
 801f2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch(dataToReceive[2])
 801f302:	2f0c      	cmp	r7, #12
 801f304:	f000 8146 	beq.w	801f594 <usb_receive_processing+0x2e8>
 801f308:	f0c0 80d8 	bcc.w	801f4bc <usb_receive_processing+0x210>
 801f30c:	2f0d      	cmp	r7, #13
 801f30e:	f000 80a7 	beq.w	801f460 <usb_receive_processing+0x1b4>
 801f312:	2f66      	cmp	r7, #102	; 0x66
 801f314:	f000 816f 	beq.w	801f5f6 <usb_receive_processing+0x34a>
			__asm("nop");
 801f318:	bf00      	nop
}
 801f31a:	e7ef      	b.n	801f2fc <usb_receive_processing+0x50>
						packet_generator_data_send();
 801f31c:	f7ff fdb4 	bl	801ee88 <packet_generator_data_send>
 801f320:	e7e7      	b.n	801f2f2 <usb_receive_processing+0x46>
						send_usb_block = 0;
 801f322:	4b8b      	ldr	r3, [pc, #556]	; (801f550 <usb_receive_processing+0x2a4>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801f324:	4c8b      	ldr	r4, [pc, #556]	; (801f554 <usb_receive_processing+0x2a8>)
						send_usb_block = 0;
 801f326:	701d      	strb	r5, [r3, #0]
						memset(dataToSend, 0, sizeof(dataToSend));
 801f328:	4629      	mov	r1, r5
						if (exp_num != dataToReceive[3]){
 801f32a:	4d8b      	ldr	r5, [pc, #556]	; (801f558 <usb_receive_processing+0x2ac>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801f32c:	2240      	movs	r2, #64	; 0x40
 801f32e:	4620      	mov	r0, r4
 801f330:	f002 fd2d 	bl	8021d8e <memset>
						if (exp_num != dataToReceive[3]){
 801f334:	78f3      	ldrb	r3, [r6, #3]
 801f336:	782a      	ldrb	r2, [r5, #0]
						dataToSend[0] = 0xAB;
 801f338:	f884 9000 	strb.w	r9, [r4]
						if (exp_num != dataToReceive[3]){
 801f33c:	4293      	cmp	r3, r2
						dataToSend[1] = 0x12;
 801f33e:	f884 8001 	strb.w	r8, [r4, #1]
						dataToSend[2] = CMD_CNFG;
 801f342:	70a7      	strb	r7, [r4, #2]
						if (exp_num != dataToReceive[3]){
 801f344:	d07a      	beq.n	801f43c <usb_receive_processing+0x190>
							exp_num = dataToReceive[3];
 801f346:	702b      	strb	r3, [r5, #0]
							htim2.Init.Period = exposure_timer_period[exp_num];
 801f348:	782a      	ldrb	r2, [r5, #0]
 801f34a:	4b84      	ldr	r3, [pc, #528]	; (801f55c <usb_receive_processing+0x2b0>)
 801f34c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f350:	4b83      	ldr	r3, [pc, #524]	; (801f560 <usb_receive_processing+0x2b4>)
 801f352:	60da      	str	r2, [r3, #12]
							MX_TIM2_Init();
 801f354:	f7ff fbd6 	bl	801eb04 <MX_TIM2_Init>
							Calibration_Exposure_Change(exp_num);
 801f358:	7828      	ldrb	r0, [r5, #0]
 801f35a:	f7ef fcaf 	bl	800ecbc <Calibration_Exposure_Change>
						if (LaserOnOff != dataToReceive[4]){
 801f35e:	4a81      	ldr	r2, [pc, #516]	; (801f564 <usb_receive_processing+0x2b8>)
 801f360:	7933      	ldrb	r3, [r6, #4]
 801f362:	7811      	ldrb	r1, [r2, #0]
 801f364:	428b      	cmp	r3, r1
 801f366:	4691      	mov	r9, r2
 801f368:	d06c      	beq.n	801f444 <usb_receive_processing+0x198>
							LaserOnOff = (dataToReceive[4] > 0) ? 1 : 0;
 801f36a:	3300      	adds	r3, #0
 801f36c:	bf18      	it	ne
 801f36e:	2301      	movne	r3, #1
 801f370:	7013      	strb	r3, [r2, #0]
							if(LaserOnOff == 0){
 801f372:	7813      	ldrb	r3, [r2, #0]
 801f374:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801f378:	2b00      	cmp	r3, #0
 801f37a:	d161      	bne.n	801f440 <usb_receive_processing+0x194>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801f37c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801f380:	4879      	ldr	r0, [pc, #484]	; (801f568 <usb_receive_processing+0x2bc>)
 801f382:	f7e3 fa1d 	bl	80027c0 <HAL_GPIO_WritePin>
						if (VGain != dataToReceive[5]){
 801f386:	4a79      	ldr	r2, [pc, #484]	; (801f56c <usb_receive_processing+0x2c0>)
 801f388:	7973      	ldrb	r3, [r6, #5]
 801f38a:	7811      	ldrb	r1, [r2, #0]
 801f38c:	428b      	cmp	r3, r1
 801f38e:	4690      	mov	r8, r2
 801f390:	d05c      	beq.n	801f44c <usb_receive_processing+0x1a0>
							VGain = (dataToReceive[5] > 0) ? 1 : 0;
 801f392:	3300      	adds	r3, #0
 801f394:	bf18      	it	ne
 801f396:	2301      	movne	r3, #1
 801f398:	7013      	strb	r3, [r2, #0]
							if(VGain == 0){
 801f39a:	7813      	ldrb	r3, [r2, #0]
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	d153      	bne.n	801f448 <usb_receive_processing+0x19c>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 801f3a0:	2201      	movs	r2, #1
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801f3a2:	2120      	movs	r1, #32
 801f3a4:	4872      	ldr	r0, [pc, #456]	; (801f570 <usb_receive_processing+0x2c4>)
 801f3a6:	f7e3 fa0b 	bl	80027c0 <HAL_GPIO_WritePin>
						if (TFT_ON_OFF != dataToReceive[6]){
 801f3aa:	4f72      	ldr	r7, [pc, #456]	; (801f574 <usb_receive_processing+0x2c8>)
 801f3ac:	79b3      	ldrb	r3, [r6, #6]
 801f3ae:	783a      	ldrb	r2, [r7, #0]
 801f3b0:	4293      	cmp	r3, r2
 801f3b2:	d051      	beq.n	801f458 <usb_receive_processing+0x1ac>
							TFT_ON_OFF = (dataToReceive[6] > 0) ? 1 : 0;
 801f3b4:	3300      	adds	r3, #0
 801f3b6:	bf18      	it	ne
 801f3b8:	2301      	movne	r3, #1
 801f3ba:	703b      	strb	r3, [r7, #0]
							if(TFT_ON_OFF == 1){
 801f3bc:	f897 a000 	ldrb.w	sl, [r7]
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801f3c0:	486d      	ldr	r0, [pc, #436]	; (801f578 <usb_receive_processing+0x2cc>)
							if(TFT_ON_OFF == 1){
 801f3c2:	fa5f fa8a 	uxtb.w	sl, sl
 801f3c6:	f1ba 0f01 	cmp.w	sl, #1
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801f3ca:	f04f 0104 	mov.w	r1, #4
							if(TFT_ON_OFF == 1){
 801f3ce:	d13f      	bne.n	801f450 <usb_receive_processing+0x1a4>
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801f3d0:	f7e7 f866 	bl	80064a0 <HAL_TIM_PWM_Start>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET); //LTDC_En on
 801f3d4:	4652      	mov	r2, sl
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801f3d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801f3da:	4865      	ldr	r0, [pc, #404]	; (801f570 <usb_receive_processing+0x2c4>)
 801f3dc:	f7e3 f9f0 	bl	80027c0 <HAL_GPIO_WritePin>
						if (Mode_EL != dataToReceive[7]){
 801f3e0:	4866      	ldr	r0, [pc, #408]	; (801f57c <usb_receive_processing+0x2d0>)
 801f3e2:	79f3      	ldrb	r3, [r6, #7]
 801f3e4:	7802      	ldrb	r2, [r0, #0]
 801f3e6:	429a      	cmp	r2, r3
 801f3e8:	d038      	beq.n	801f45c <usb_receive_processing+0x1b0>
							Mode_EL = (dataToReceive[7] > 0) ? 1 : 0; //Mode_EL=1 -Rabs_E, Mode_EL=0 -Rabs_L
 801f3ea:	3300      	adds	r3, #0
 801f3ec:	bf18      	it	ne
 801f3ee:	2301      	movne	r3, #1
 801f3f0:	7003      	strb	r3, [r0, #0]
						dataToSend[3] = exp_num;
 801f3f2:	7829      	ldrb	r1, [r5, #0]
						dataToSend[4] = LaserOnOff;
 801f3f4:	f899 5000 	ldrb.w	r5, [r9]
						dataToSend[5] = VGain;
 801f3f8:	f898 3000 	ldrb.w	r3, [r8]
						dataToSend[7] = Mode_EL;
 801f3fc:	7800      	ldrb	r0, [r0, #0]
 801f3fe:	71e0      	strb	r0, [r4, #7]
						dataToSend[5] = VGain;
 801f400:	b2da      	uxtb	r2, r3
						dataToSend[3] = exp_num;
 801f402:	b2c9      	uxtb	r1, r1
						dataToSend[4] = LaserOnOff;
 801f404:	b2ed      	uxtb	r5, r5
						dataToSend[6] = TFT_ON_OFF;
 801f406:	783b      	ldrb	r3, [r7, #0]
						dataToSend[3] = exp_num;
 801f408:	70e1      	strb	r1, [r4, #3]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801f40a:	4429      	add	r1, r5
						dataToSend[5] = VGain;
 801f40c:	7162      	strb	r2, [r4, #5]
						dataToSend[6] = TFT_ON_OFF;
 801f40e:	b2db      	uxtb	r3, r3
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801f410:	440a      	add	r2, r1
						dataToSend[6] = TFT_ON_OFF;
 801f412:	71a3      	strb	r3, [r4, #6]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801f414:	4413      	add	r3, r2
 801f416:	7822      	ldrb	r2, [r4, #0]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f418:	494e      	ldr	r1, [pc, #312]	; (801f554 <usb_receive_processing+0x2a8>)
 801f41a:	4859      	ldr	r0, [pc, #356]	; (801f580 <usb_receive_processing+0x2d4>)
						dataToSend[4] = LaserOnOff;
 801f41c:	7125      	strb	r5, [r4, #4]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801f41e:	4413      	add	r3, r2
 801f420:	7862      	ldrb	r2, [r4, #1]
 801f422:	4413      	add	r3, r2
 801f424:	78a2      	ldrb	r2, [r4, #2]
 801f426:	4413      	add	r3, r2
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f428:	2240      	movs	r2, #64	; 0x40
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801f42a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f42e:	f7e8 fe35 	bl	800809c <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f432:	2300      	movs	r3, #0
 801f434:	6033      	str	r3, [r6, #0]
 801f436:	6073      	str	r3, [r6, #4]
 801f438:	60b3      	str	r3, [r6, #8]
					break;
 801f43a:	e75f      	b.n	801f2fc <usb_receive_processing+0x50>
							__asm("nop");
 801f43c:	bf00      	nop
 801f43e:	e78e      	b.n	801f35e <usb_receive_processing+0xb2>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801f440:	2201      	movs	r2, #1
 801f442:	e79b      	b.n	801f37c <usb_receive_processing+0xd0>
							__asm("nop");
 801f444:	bf00      	nop
 801f446:	e79e      	b.n	801f386 <usb_receive_processing+0xda>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801f448:	2200      	movs	r2, #0
 801f44a:	e7aa      	b.n	801f3a2 <usb_receive_processing+0xf6>
							__asm("nop");
 801f44c:	bf00      	nop
 801f44e:	e7ac      	b.n	801f3aa <usb_receive_processing+0xfe>
								HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801f450:	f7e7 f85c 	bl	800650c <HAL_TIM_PWM_Stop>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801f454:	2200      	movs	r2, #0
 801f456:	e7be      	b.n	801f3d6 <usb_receive_processing+0x12a>
							__asm("nop");
 801f458:	bf00      	nop
 801f45a:	e7c1      	b.n	801f3e0 <usb_receive_processing+0x134>
							__asm("nop");
 801f45c:	bf00      	nop
 801f45e:	e7c8      	b.n	801f3f2 <usb_receive_processing+0x146>
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801f460:	4e48      	ldr	r6, [pc, #288]	; (801f584 <usb_receive_processing+0x2d8>)
						EraseInitStruct.NbPages = 44; 
 801f462:	232c      	movs	r3, #44	; 0x2c
 801f464:	60f3      	str	r3, [r6, #12]
						EraseInitStruct.Banks = FLASH_BANK_2; 
 801f466:	2302      	movs	r3, #2
 801f468:	6073      	str	r3, [r6, #4]
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801f46a:	6035      	str	r5, [r6, #0]
						EraseInitStruct.Page = 0;
 801f46c:	60b5      	str	r5, [r6, #8]
						HAL_FLASH_Unlock(); 
 801f46e:	f7e2 fea3 	bl	80021b8 <HAL_FLASH_Unlock>
						if(HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 801f472:	a901      	add	r1, sp, #4
 801f474:	4630      	mov	r0, r6
 801f476:	f7e2 ffb9 	bl	80023ec <HAL_FLASHEx_Erase>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801f47a:	4b43      	ldr	r3, [pc, #268]	; (801f588 <usb_receive_processing+0x2dc>)
 801f47c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801f480:	611a      	str	r2, [r3, #16]
						HAL_FLASH_Lock();
 801f482:	f7e2 feab 	bl	80021dc <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f486:	6025      	str	r5, [r4, #0]
 801f488:	6065      	str	r5, [r4, #4]
 801f48a:	60a5      	str	r5, [r4, #8]
					break;
 801f48c:	e736      	b.n	801f2fc <usb_receive_processing+0x50>
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801f48e:	7923      	ldrb	r3, [r4, #4]
 801f490:	78e2      	ldrb	r2, [r4, #3]
 801f492:	041b      	lsls	r3, r3, #16
 801f494:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801f498:	79a2      	ldrb	r2, [r4, #6]
 801f49a:	4313      	orrs	r3, r2
 801f49c:	7962      	ldrb	r2, [r4, #5]
 801f49e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801f4a2:	4a3a      	ldr	r2, [pc, #232]	; (801f58c <usb_receive_processing+0x2e0>)
 801f4a4:	6013      	str	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801f4a6:	4b2b      	ldr	r3, [pc, #172]	; (801f554 <usb_receive_processing+0x2a8>)
						dataToSend[2] = 0x1A;
 801f4a8:	221a      	movs	r2, #26
						dataToSend[0] = 0xAB;
 801f4aa:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801f4ae:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x1A;
 801f4b2:	709a      	strb	r2, [r3, #2]
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f4b4:	6025      	str	r5, [r4, #0]
 801f4b6:	6065      	str	r5, [r4, #4]
 801f4b8:	60a5      	str	r5, [r4, #8]
 801f4ba:	e043      	b.n	801f544 <usb_receive_processing+0x298>
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801f4bc:	79e0      	ldrb	r0, [r4, #7]
 801f4be:	f894 8008 	ldrb.w	r8, [r4, #8]
 801f4c2:	4e33      	ldr	r6, [pc, #204]	; (801f590 <usb_receive_processing+0x2e4>)
 801f4c4:	ea4f 4108 	mov.w	r1, r8, lsl #16
 801f4c8:	0603      	lsls	r3, r0, #24
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801f4ca:	f894 8009 	ldrb.w	r8, [r4, #9]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4ce:	79a0      	ldrb	r0, [r4, #6]
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801f4d0:	462a      	mov	r2, r5
 801f4d2:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4d4:	2100      	movs	r1, #0
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801f4d6:	432a      	orrs	r2, r5
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4d8:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801f4da:	ea4f 2108 	mov.w	r1, r8, lsl #8
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801f4de:	f894 8003 	ldrb.w	r8, [r4, #3]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4e2:	4302      	orrs	r2, r0
 801f4e4:	432a      	orrs	r2, r5
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801f4e6:	ea4f 6008 	mov.w	r0, r8, lsl #24
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4ea:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801f4ec:	f894 8004 	ldrb.w	r8, [r4, #4]
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801f4f0:	7aa1      	ldrb	r1, [r4, #10]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4f2:	432a      	orrs	r2, r5
 801f4f4:	430b      	orrs	r3, r1
 801f4f6:	4302      	orrs	r2, r0
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801f4f8:	2100      	movs	r1, #0
 801f4fa:	ea4f 4008 	mov.w	r0, r8, lsl #16
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4fe:	f894 8005 	ldrb.w	r8, [r4, #5]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801f502:	4d22      	ldr	r5, [pc, #136]	; (801f58c <usb_receive_processing+0x2e0>)
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f504:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801f506:	2100      	movs	r1, #0
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f508:	4302      	orrs	r2, r0
 801f50a:	430b      	orrs	r3, r1
 801f50c:	ea4f 2008 	mov.w	r0, r8, lsl #8
 801f510:	2100      	movs	r1, #0
 801f512:	4310      	orrs	r0, r2
 801f514:	4319      	orrs	r1, r3
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801f516:	e9c6 0100 	strd	r0, r1, [r6]
						HAL_FLASH_Unlock();
 801f51a:	f7e2 fe4d 	bl	80021b8 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801f51e:	4b1a      	ldr	r3, [pc, #104]	; (801f588 <usb_receive_processing+0x2dc>)
 801f520:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801f524:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801f526:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f52a:	6829      	ldr	r1, [r5, #0]
 801f52c:	2000      	movs	r0, #0
 801f52e:	f7e2 fe9d 	bl	800226c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801f532:	4604      	mov	r4, r0
 801f534:	2800      	cmp	r0, #0
 801f536:	d1f6      	bne.n	801f526 <usb_receive_processing+0x27a>
						HAL_FLASH_Lock();
 801f538:	f7e2 fe50 	bl	80021dc <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f53c:	4b03      	ldr	r3, [pc, #12]	; (801f54c <usb_receive_processing+0x2a0>)
 801f53e:	601c      	str	r4, [r3, #0]
 801f540:	605c      	str	r4, [r3, #4]
 801f542:	609c      	str	r4, [r3, #8]
						HAL_Delay(2);
 801f544:	2002      	movs	r0, #2
 801f546:	f7e1 fd71 	bl	800102c <HAL_Delay>
					break;
 801f54a:	e6d7      	b.n	801f2fc <usb_receive_processing+0x50>
 801f54c:	2008adf4 	.word	0x2008adf4
 801f550:	2008be6d 	.word	0x2008be6d
 801f554:	2008ae00 	.word	0x2008ae00
 801f558:	2008be5a 	.word	0x2008be5a
 801f55c:	08033858 	.word	0x08033858
 801f560:	200914c4 	.word	0x200914c4
 801f564:	200075e0 	.word	0x200075e0
 801f568:	48000800 	.word	0x48000800
 801f56c:	20000a4b 	.word	0x20000a4b
 801f570:	48001400 	.word	0x48001400
 801f574:	20000a4a 	.word	0x20000a4a
 801f578:	20091014 	.word	0x20091014
 801f57c:	20000a48 	.word	0x20000a48
 801f580:	20091558 	.word	0x20091558
 801f584:	20091294 	.word	0x20091294
 801f588:	40022000 	.word	0x40022000
 801f58c:	2009133c 	.word	0x2009133c
 801f590:	20091330 	.word	0x20091330
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801f594:	7920      	ldrb	r0, [r4, #4]
 801f596:	78e3      	ldrb	r3, [r4, #3]
 801f598:	0400      	lsls	r0, r0, #16
 801f59a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801f59e:	79a3      	ldrb	r3, [r4, #6]
 801f5a0:	4318      	orrs	r0, r3
 801f5a2:	7963      	ldrb	r3, [r4, #5]
 801f5a4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801f5a8:	4b23      	ldr	r3, [pc, #140]	; (801f638 <usb_receive_processing+0x38c>)
 801f5aa:	6018      	str	r0, [r3, #0]
						flash_data_read = flash_data_read_buff(flash_address);
 801f5ac:	f7ec fc17 	bl	800bdde <flash_data_read_buff>
 801f5b0:	4b22      	ldr	r3, [pc, #136]	; (801f63c <usb_receive_processing+0x390>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801f5b2:	4a23      	ldr	r2, [pc, #140]	; (801f640 <usb_receive_processing+0x394>)
						flash_data_read = flash_data_read_buff(flash_address);
 801f5b4:	e9c3 0100 	strd	r0, r1, [r3]
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801f5b8:	cb03      	ldmia	r3!, {r0, r1}
 801f5ba:	6051      	str	r1, [r2, #4]
						dataToSend[0] = 0xAB;
 801f5bc:	4921      	ldr	r1, [pc, #132]	; (801f644 <usb_receive_processing+0x398>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801f5be:	6010      	str	r0, [r2, #0]
						dataToSend[2] = 0x1C;
 801f5c0:	231c      	movs	r3, #28
 801f5c2:	708b      	strb	r3, [r1, #2]
						dataToSend[7] = flash_data_read_SND[7];
 801f5c4:	79d3      	ldrb	r3, [r2, #7]
 801f5c6:	71cb      	strb	r3, [r1, #7]
						dataToSend[8] = flash_data_read_SND[6];
 801f5c8:	7993      	ldrb	r3, [r2, #6]
 801f5ca:	720b      	strb	r3, [r1, #8]
						dataToSend[9] = flash_data_read_SND[5];
 801f5cc:	7953      	ldrb	r3, [r2, #5]
 801f5ce:	724b      	strb	r3, [r1, #9]
						dataToSend[10]= flash_data_read_SND[4];
 801f5d0:	7913      	ldrb	r3, [r2, #4]
 801f5d2:	728b      	strb	r3, [r1, #10]
						dataToSend[3] = flash_data_read_SND[3];
 801f5d4:	78d3      	ldrb	r3, [r2, #3]
 801f5d6:	70cb      	strb	r3, [r1, #3]
						dataToSend[4] = flash_data_read_SND[2];
 801f5d8:	7893      	ldrb	r3, [r2, #2]
 801f5da:	710b      	strb	r3, [r1, #4]
						dataToSend[5] = flash_data_read_SND[1];
 801f5dc:	7853      	ldrb	r3, [r2, #1]
 801f5de:	714b      	strb	r3, [r1, #5]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f5e0:	4819      	ldr	r0, [pc, #100]	; (801f648 <usb_receive_processing+0x39c>)
						dataToSend[6]	= flash_data_read_SND[0];
 801f5e2:	7813      	ldrb	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801f5e4:	f881 9000 	strb.w	r9, [r1]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f5e8:	2240      	movs	r2, #64	; 0x40
						dataToSend[1] = 0x12;
 801f5ea:	f881 8001 	strb.w	r8, [r1, #1]
						dataToSend[6]	= flash_data_read_SND[0];
 801f5ee:	718b      	strb	r3, [r1, #6]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f5f0:	f7e8 fd54 	bl	800809c <USBD_CUSTOM_HID_SendReport>
 801f5f4:	e75e      	b.n	801f4b4 <usb_receive_processing+0x208>
						if(CRC_STATUS == CRC_OK){
 801f5f6:	4a15      	ldr	r2, [pc, #84]	; (801f64c <usb_receive_processing+0x3a0>)
						dataToSend[0] = 0xAB;
 801f5f8:	4b12      	ldr	r3, [pc, #72]	; (801f644 <usb_receive_processing+0x398>)
						if(CRC_STATUS == CRC_OK){
 801f5fa:	7812      	ldrb	r2, [r2, #0]
						dataToSend[0] = 0xAB;
 801f5fc:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801f600:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x66;
 801f604:	709f      	strb	r7, [r3, #2]
						if(CRC_STATUS == CRC_OK){
 801f606:	b95a      	cbnz	r2, 801f620 <usb_receive_processing+0x374>
							dataToSend[3] = 0x01;
 801f608:	2201      	movs	r2, #1
 801f60a:	70da      	strb	r2, [r3, #3]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f60c:	2240      	movs	r2, #64	; 0x40
 801f60e:	490d      	ldr	r1, [pc, #52]	; (801f644 <usb_receive_processing+0x398>)
 801f610:	480d      	ldr	r0, [pc, #52]	; (801f648 <usb_receive_processing+0x39c>)
 801f612:	f7e8 fd43 	bl	800809c <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f616:	2300      	movs	r3, #0
 801f618:	6033      	str	r3, [r6, #0]
 801f61a:	6073      	str	r3, [r6, #4]
 801f61c:	60b3      	str	r3, [r6, #8]
 801f61e:	e791      	b.n	801f544 <usb_receive_processing+0x298>
							dataToSend[3] = 0x00;
 801f620:	70dd      	strb	r5, [r3, #3]
 801f622:	e7f3      	b.n	801f60c <usb_receive_processing+0x360>
						send_usb_block = 1;
 801f624:	4e0a      	ldr	r6, [pc, #40]	; (801f650 <usb_receive_processing+0x3a4>)
 801f626:	2301      	movs	r3, #1
 801f628:	7033      	strb	r3, [r6, #0]
						packet_generator_Calculated_data_send();
 801f62a:	f7ff fd15 	bl	801f058 <packet_generator_Calculated_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f62e:	6025      	str	r5, [r4, #0]
 801f630:	6065      	str	r5, [r4, #4]
 801f632:	60a5      	str	r5, [r4, #8]
						send_usb_block = 0;
 801f634:	7035      	strb	r5, [r6, #0]
					break;
 801f636:	e661      	b.n	801f2fc <usb_receive_processing+0x50>
 801f638:	2009133c 	.word	0x2009133c
 801f63c:	20091058 	.word	0x20091058
 801f640:	2008be5b 	.word	0x2008be5b
 801f644:	2008ae00 	.word	0x2008ae00
 801f648:	20091558 	.word	0x20091558
 801f64c:	20090f72 	.word	0x20090f72
 801f650:	2008be6d 	.word	0x2008be6d

0801f654 <auto_exposure>:
{ 
 801f654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f656:	4d45      	ldr	r5, [pc, #276]	; (801f76c <auto_exposure+0x118>)
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801f658:	4c45      	ldr	r4, [pc, #276]	; (801f770 <auto_exposure+0x11c>)
 801f65a:	882b      	ldrh	r3, [r5, #0]
{ 
 801f65c:	2200      	movs	r2, #0
	for (uint16_t i = 5; i<1024; i++){
 801f65e:	f240 71f6 	movw	r1, #2038	; 0x7f6
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801f662:	18a0      	adds	r0, r4, r2
 801f664:	3202      	adds	r2, #2
 801f666:	8940      	ldrh	r0, [r0, #10]
 801f668:	4283      	cmp	r3, r0
 801f66a:	bf38      	it	cc
 801f66c:	4603      	movcc	r3, r0
	for (uint16_t i = 5; i<1024; i++){
 801f66e:	428a      	cmp	r2, r1
 801f670:	d1f7      	bne.n	801f662 <auto_exposure+0xe>
	if(max_el < 20000 && exp_num != 9)
 801f672:	f644 621f 	movw	r2, #19999	; 0x4e1f
 801f676:	4293      	cmp	r3, r2
 801f678:	802b      	strh	r3, [r5, #0]
 801f67a:	4c3e      	ldr	r4, [pc, #248]	; (801f774 <auto_exposure+0x120>)
 801f67c:	d840      	bhi.n	801f700 <auto_exposure+0xac>
 801f67e:	7823      	ldrb	r3, [r4, #0]
 801f680:	2b09      	cmp	r3, #9
 801f682:	d027      	beq.n	801f6d4 <auto_exposure+0x80>
		highSignal = 0;
 801f684:	4a3c      	ldr	r2, [pc, #240]	; (801f778 <auto_exposure+0x124>)
		send_usb_block =1;
 801f686:	4f3d      	ldr	r7, [pc, #244]	; (801f77c <auto_exposure+0x128>)
		highSignal = 0;
 801f688:	2300      	movs	r3, #0
 801f68a:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801f68c:	4a3c      	ldr	r2, [pc, #240]	; (801f780 <auto_exposure+0x12c>)
 801f68e:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801f690:	2301      	movs	r3, #1
 801f692:	703b      	strb	r3, [r7, #0]
		exp_num++;
 801f694:	7823      	ldrb	r3, [r4, #0]
 801f696:	3301      	adds	r3, #1
		exp_num--;
 801f698:	b2db      	uxtb	r3, r3
 801f69a:	7023      	strb	r3, [r4, #0]
		htim2.Init.Period = exposure_timer_period[exp_num];
 801f69c:	7822      	ldrb	r2, [r4, #0]
 801f69e:	4b39      	ldr	r3, [pc, #228]	; (801f784 <auto_exposure+0x130>)
 801f6a0:	4e39      	ldr	r6, [pc, #228]	; (801f788 <auto_exposure+0x134>)
 801f6a2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f6a6:	4b39      	ldr	r3, [pc, #228]	; (801f78c <auto_exposure+0x138>)
 801f6a8:	60da      	str	r2, [r3, #12]
		MX_TIM2_Init();
 801f6aa:	f7ff fa2b 	bl	801eb04 <MX_TIM2_Init>
		Calibration_Exposure_Change(exp_num);
 801f6ae:	7820      	ldrb	r0, [r4, #0]
 801f6b0:	f7ef fb04 	bl	800ecbc <Calibration_Exposure_Change>
		if(Mode_EL == 0){
 801f6b4:	4b36      	ldr	r3, [pc, #216]	; (801f790 <auto_exposure+0x13c>)
 801f6b6:	781a      	ldrb	r2, [r3, #0]
 801f6b8:	4b36      	ldr	r3, [pc, #216]	; (801f794 <auto_exposure+0x140>)
 801f6ba:	2a00      	cmp	r2, #0
 801f6bc:	d132      	bne.n	801f724 <auto_exposure+0xd0>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801f6be:	4a36      	ldr	r2, [pc, #216]	; (801f798 <auto_exposure+0x144>)
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f6c0:	ed93 0a00 	vldr	s0, [r3]
 801f6c4:	edd2 0a00 	vldr	s1, [r2]
 801f6c8:	f7fc fafa 	bl	801bcc0 <Rabs_calc_Factor2_Settings_change>
		send_usb_block =0;
 801f6cc:	2300      	movs	r3, #0
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f6ce:	ed86 0a00 	vstr	s0, [r6]
		send_usb_block =0;
 801f6d2:	703b      	strb	r3, [r7, #0]
	if(old_exp_num!=exp_num ){exp_set = 1; }else{exp_set = 0;}
 801f6d4:	4b31      	ldr	r3, [pc, #196]	; (801f79c <auto_exposure+0x148>)
 801f6d6:	7822      	ldrb	r2, [r4, #0]
 801f6d8:	7819      	ldrb	r1, [r3, #0]
 801f6da:	4291      	cmp	r1, r2
 801f6dc:	4a30      	ldr	r2, [pc, #192]	; (801f7a0 <auto_exposure+0x14c>)
 801f6de:	bf14      	ite	ne
 801f6e0:	2101      	movne	r1, #1
 801f6e2:	2100      	moveq	r1, #0
 801f6e4:	7011      	strb	r1, [r2, #0]
	old_exp_num = exp_num;
 801f6e6:	7822      	ldrb	r2, [r4, #0]
 801f6e8:	701a      	strb	r2, [r3, #0]
	if(exp_num ==0 && max_el >=50000)
 801f6ea:	7823      	ldrb	r3, [r4, #0]
 801f6ec:	b9e3      	cbnz	r3, 801f728 <auto_exposure+0xd4>
 801f6ee:	882a      	ldrh	r2, [r5, #0]
 801f6f0:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801f6f4:	429a      	cmp	r2, r3
 801f6f6:	d917      	bls.n	801f728 <auto_exposure+0xd4>
		highSignal = 1;
 801f6f8:	2201      	movs	r2, #1
			highSignal = 0;
 801f6fa:	4b1f      	ldr	r3, [pc, #124]	; (801f778 <auto_exposure+0x124>)
			lowSignal = 0;
 801f6fc:	701a      	strb	r2, [r3, #0]
 801f6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if(max_el > 45000 && exp_num != 0)
 801f700:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 801f704:	4293      	cmp	r3, r2
 801f706:	d9e5      	bls.n	801f6d4 <auto_exposure+0x80>
 801f708:	7823      	ldrb	r3, [r4, #0]
 801f70a:	2b00      	cmp	r3, #0
 801f70c:	d0e2      	beq.n	801f6d4 <auto_exposure+0x80>
		highSignal = 0;
 801f70e:	4a1a      	ldr	r2, [pc, #104]	; (801f778 <auto_exposure+0x124>)
		send_usb_block =1;
 801f710:	4f1a      	ldr	r7, [pc, #104]	; (801f77c <auto_exposure+0x128>)
		highSignal = 0;
 801f712:	2300      	movs	r3, #0
 801f714:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801f716:	4a1a      	ldr	r2, [pc, #104]	; (801f780 <auto_exposure+0x12c>)
 801f718:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801f71a:	2301      	movs	r3, #1
 801f71c:	703b      	strb	r3, [r7, #0]
		exp_num--;
 801f71e:	7823      	ldrb	r3, [r4, #0]
 801f720:	3b01      	subs	r3, #1
 801f722:	e7b9      	b.n	801f698 <auto_exposure+0x44>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f724:	4a1f      	ldr	r2, [pc, #124]	; (801f7a4 <auto_exposure+0x150>)
 801f726:	e7cb      	b.n	801f6c0 <auto_exposure+0x6c>
	} else if((exp_num ==0 && max_el < 50000))
 801f728:	7823      	ldrb	r3, [r4, #0]
 801f72a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801f72e:	b923      	cbnz	r3, 801f73a <auto_exposure+0xe6>
 801f730:	8829      	ldrh	r1, [r5, #0]
 801f732:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801f736:	4299      	cmp	r1, r3
 801f738:	d9df      	bls.n	801f6fa <auto_exposure+0xa6>
	} else if((exp_num ==9 && max_el < DarkSignal+2000)) //20000
 801f73a:	7823      	ldrb	r3, [r4, #0]
 801f73c:	2b09      	cmp	r3, #9
 801f73e:	d109      	bne.n	801f754 <auto_exposure+0x100>
 801f740:	4b19      	ldr	r3, [pc, #100]	; (801f7a8 <auto_exposure+0x154>)
 801f742:	882a      	ldrh	r2, [r5, #0]
 801f744:	881b      	ldrh	r3, [r3, #0]
 801f746:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 801f74a:	4293      	cmp	r3, r2
 801f74c:	db02      	blt.n	801f754 <auto_exposure+0x100>
			lowSignal = 1;
 801f74e:	2201      	movs	r2, #1
			lowSignal = 0;
 801f750:	4b0b      	ldr	r3, [pc, #44]	; (801f780 <auto_exposure+0x12c>)
 801f752:	e7d3      	b.n	801f6fc <auto_exposure+0xa8>
	}else if((exp_num ==9 && max_el > DarkSignal+2000))
 801f754:	7823      	ldrb	r3, [r4, #0]
 801f756:	2b09      	cmp	r3, #9
 801f758:	d1d1      	bne.n	801f6fe <auto_exposure+0xaa>
 801f75a:	4b13      	ldr	r3, [pc, #76]	; (801f7a8 <auto_exposure+0x154>)
 801f75c:	882a      	ldrh	r2, [r5, #0]
 801f75e:	881b      	ldrh	r3, [r3, #0]
 801f760:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801f764:	429a      	cmp	r2, r3
 801f766:	ddca      	ble.n	801f6fe <auto_exposure+0xaa>
			lowSignal = 0;
 801f768:	2200      	movs	r2, #0
 801f76a:	e7f1      	b.n	801f750 <auto_exposure+0xfc>
 801f76c:	2008be68 	.word	0x2008be68
 801f770:	20009de4 	.word	0x20009de4
 801f774:	2008be5a 	.word	0x2008be5a
 801f778:	2008be63 	.word	0x2008be63
 801f77c:	2008be6d 	.word	0x2008be6d
 801f780:	2008be66 	.word	0x2008be66
 801f784:	08033858 	.word	0x08033858
 801f788:	200055dc 	.word	0x200055dc
 801f78c:	200914c4 	.word	0x200914c4
 801f790:	20000a48 	.word	0x20000a48
 801f794:	200055d4 	.word	0x200055d4
 801f798:	200055d0 	.word	0x200055d0
 801f79c:	2008be6a 	.word	0x2008be6a
 801f7a0:	20000a4c 	.word	0x20000a4c
 801f7a4:	200055cc 	.word	0x200055cc
 801f7a8:	200055ca 	.word	0x200055ca

0801f7ac <TIM2_IRQHandler>:
{
 801f7ac:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 801f7ae:	4d0d      	ldr	r5, [pc, #52]	; (801f7e4 <TIM2_IRQHandler+0x38>)
 801f7b0:	2200      	movs	r2, #0
 801f7b2:	2110      	movs	r1, #16
 801f7b4:	4628      	mov	r0, r5
 801f7b6:	f7e3 f803 	bl	80027c0 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 801f7ba:	200a      	movs	r0, #10
 801f7bc:	f7ff f9ea 	bl	801eb94 <DWT_Delay>
	i = 0;
 801f7c0:	4b09      	ldr	r3, [pc, #36]	; (801f7e8 <TIM2_IRQHandler+0x3c>)
 801f7c2:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801f7c4:	4628      	mov	r0, r5
 801f7c6:	2201      	movs	r2, #1
 801f7c8:	2110      	movs	r1, #16
	i = 0;
 801f7ca:	801c      	strh	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801f7cc:	f7e2 fff8 	bl	80027c0 <HAL_GPIO_WritePin>
  cnt_delay_bar = 0;
 801f7d0:	4b06      	ldr	r3, [pc, #24]	; (801f7ec <TIM2_IRQHandler+0x40>)
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801f7d2:	201c      	movs	r0, #28
  cnt_delay_bar = 0;
 801f7d4:	801c      	strh	r4, [r3, #0]
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801f7d6:	f7e2 f947 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim2);
 801f7da:	4805      	ldr	r0, [pc, #20]	; (801f7f0 <TIM2_IRQHandler+0x44>)
}																					//	7.812ms	15.625ms	31.25ms	62.5ms	125ms	250ms	500ms	1s			2s			4s
 801f7dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_IRQHandler(&htim2);
 801f7e0:	f7e6 bb3b 	b.w	8005e5a <HAL_TIM_IRQHandler>
 801f7e4:	48000800 	.word	0x48000800
 801f7e8:	2008be64 	.word	0x2008be64
 801f7ec:	2008adb8 	.word	0x2008adb8
 801f7f0:	200914c4 	.word	0x200914c4

0801f7f4 <TIM6_DAC_IRQHandler>:
{
 801f7f4:	b508      	push	{r3, lr}
	pause_button = 0;
 801f7f6:	4b06      	ldr	r3, [pc, #24]	; (801f810 <TIM6_DAC_IRQHandler+0x1c>)
 801f7f8:	2200      	movs	r2, #0
 801f7fa:	701a      	strb	r2, [r3, #0]
	Get_Battery_Level();
 801f7fc:	f7ff fb14 	bl	801ee28 <Get_Battery_Level>
	HAL_NVIC_ClearPendingIRQ(TIM6_DAC_IRQn);
 801f800:	2036      	movs	r0, #54	; 0x36
 801f802:	f7e2 f931 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
  HAL_TIM_IRQHandler(&htim6);
 801f806:	4803      	ldr	r0, [pc, #12]	; (801f814 <TIM6_DAC_IRQHandler+0x20>)
}
 801f808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 801f80c:	f7e6 bb25 	b.w	8005e5a <HAL_TIM_IRQHandler>
 801f810:	2008be6b 	.word	0x2008be6b
 801f814:	20091344 	.word	0x20091344

0801f818 <TIM7_IRQHandler>:
{
 801f818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801f81a:	4b48      	ldr	r3, [pc, #288]	; (801f93c <TIM7_IRQHandler+0x124>)
 801f81c:	781b      	ldrb	r3, [r3, #0]
	if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen||
 801f81e:	3b01      	subs	r3, #1
 801f820:	2b04      	cmp	r3, #4
 801f822:	d81e      	bhi.n	801f862 <TIM7_IRQHandler+0x4a>
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801f824:	4b46      	ldr	r3, [pc, #280]	; (801f940 <TIM7_IRQHandler+0x128>)
 801f826:	781b      	ldrb	r3, [r3, #0]
 801f828:	b9db      	cbnz	r3, 801f862 <TIM7_IRQHandler+0x4a>
 801f82a:	4b46      	ldr	r3, [pc, #280]	; (801f944 <TIM7_IRQHandler+0x12c>)
 801f82c:	781b      	ldrb	r3, [r3, #0]
 801f82e:	b9c3      	cbnz	r3, 801f862 <TIM7_IRQHandler+0x4a>
			cnt_delay_bar++;
 801f830:	4a45      	ldr	r2, [pc, #276]	; (801f948 <TIM7_IRQHandler+0x130>)
			if(exp_num > 4){
 801f832:	4946      	ldr	r1, [pc, #280]	; (801f94c <TIM7_IRQHandler+0x134>)
			cnt_delay_bar++;
 801f834:	8813      	ldrh	r3, [r2, #0]
 801f836:	3301      	adds	r3, #1
 801f838:	b29b      	uxth	r3, r3
 801f83a:	8013      	strh	r3, [r2, #0]
			if(exp_num > 4){
 801f83c:	780a      	ldrb	r2, [r1, #0]
 801f83e:	2a04      	cmp	r2, #4
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801f840:	780a      	ldrb	r2, [r1, #0]
			if(exp_num > 4){
 801f842:	d96b      	bls.n	801f91c <TIM7_IRQHandler+0x104>
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801f844:	4842      	ldr	r0, [pc, #264]	; (801f950 <TIM7_IRQHandler+0x138>)
 801f846:	f241 7670 	movw	r6, #6000	; 0x1770
 801f84a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801f84e:	fbb2 f2f6 	udiv	r2, r2, r6
 801f852:	4293      	cmp	r3, r2
 801f854:	d12b      	bne.n	801f8ae <TIM7_IRQHandler+0x96>
						GUI_Bar_Measure(85, 13, 0.2);
 801f856:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 801f954 <TIM7_IRQHandler+0x13c>
						GUI_Bar_Measure(85, 13, 0.6);
 801f85a:	210d      	movs	r1, #13
 801f85c:	2055      	movs	r0, #85	; 0x55
 801f85e:	f7f5 ff1d 	bl	801569c <GUI_Bar_Measure>
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801f862:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801f866:	483c      	ldr	r0, [pc, #240]	; (801f958 <TIM7_IRQHandler+0x140>)
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801f868:	4c3c      	ldr	r4, [pc, #240]	; (801f95c <TIM7_IRQHandler+0x144>)
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801f86a:	4d3d      	ldr	r5, [pc, #244]	; (801f960 <TIM7_IRQHandler+0x148>)
 801f86c:	f7e2 ffa2 	bl	80027b4 <HAL_GPIO_ReadPin>
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801f870:	7823      	ldrb	r3, [r4, #0]
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801f872:	7028      	strb	r0, [r5, #0]
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801f874:	4283      	cmp	r3, r0
 801f876:	d012      	beq.n	801f89e <TIM7_IRQHandler+0x86>
 801f878:	4b3a      	ldr	r3, [pc, #232]	; (801f964 <TIM7_IRQHandler+0x14c>)
 801f87a:	781b      	ldrb	r3, [r3, #0]
 801f87c:	b97b      	cbnz	r3, 801f89e <TIM7_IRQHandler+0x86>
		GUI_Button_SD_Card(55, 426, !SD_Detect);
 801f87e:	fab0 f280 	clz	r2, r0
 801f882:	0952      	lsrs	r2, r2, #5
 801f884:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801f888:	2037      	movs	r0, #55	; 0x37
 801f88a:	f7f5 f981 	bl	8014b90 <GUI_Button_SD_Card>
		old_sd_detect = SD_Detect;
 801f88e:	782b      	ldrb	r3, [r5, #0]
 801f890:	7023      	strb	r3, [r4, #0]
		if(SD_Detect == 0){
 801f892:	2b00      	cmp	r3, #0
 801f894:	d14b      	bne.n	801f92e <TIM7_IRQHandler+0x116>
				MX_SDMMC1_SD_Init();
 801f896:	f7ff f923 	bl	801eae0 <MX_SDMMC1_SD_Init>
				MX_FATFS_Init();
 801f89a:	f7fe faef 	bl	801de7c <MX_FATFS_Init>
	HAL_NVIC_ClearPendingIRQ(TIM7_IRQn);
 801f89e:	2037      	movs	r0, #55	; 0x37
 801f8a0:	f7e2 f8e2 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim7);
 801f8a4:	4830      	ldr	r0, [pc, #192]	; (801f968 <TIM7_IRQHandler+0x150>)
}
 801f8a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_TIM_IRQHandler(&htim7);
 801f8aa:	f7e6 bad6 	b.w	8005e5a <HAL_TIM_IRQHandler>
				else if (cnt_delay_bar == 2*(exposure_timer_period[exp_num]/12)/500)
 801f8ae:	780a      	ldrb	r2, [r1, #0]
 801f8b0:	270c      	movs	r7, #12
 801f8b2:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
 801f8b6:	fbb5 f5f7 	udiv	r5, r5, r7
 801f8ba:	22fa      	movs	r2, #250	; 0xfa
 801f8bc:	fb95 f5f2 	sdiv	r5, r5, r2
 801f8c0:	42ab      	cmp	r3, r5
 801f8c2:	d102      	bne.n	801f8ca <TIM7_IRQHandler+0xb2>
						GUI_Bar_Measure(85, 13, 0.4);
 801f8c4:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801f96c <TIM7_IRQHandler+0x154>
 801f8c8:	e7c7      	b.n	801f85a <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 3*(exposure_timer_period[exp_num]/12)/500)
 801f8ca:	780a      	ldrb	r2, [r1, #0]
 801f8cc:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 801f8d0:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801f8d4:	fbb2 f2f7 	udiv	r2, r2, r7
 801f8d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f8dc:	fb92 f2f4 	sdiv	r2, r2, r4
 801f8e0:	4293      	cmp	r3, r2
 801f8e2:	d102      	bne.n	801f8ea <TIM7_IRQHandler+0xd2>
						GUI_Bar_Measure(85, 13, 0.6);
 801f8e4:	ed9f 0a22 	vldr	s0, [pc, #136]	; 801f970 <TIM7_IRQHandler+0x158>
 801f8e8:	e7b7      	b.n	801f85a <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 4*(exposure_timer_period[exp_num]/12)/500)
 801f8ea:	780a      	ldrb	r2, [r1, #0]
 801f8ec:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 801f8f0:	fbb4 f4f7 	udiv	r4, r4, r7
 801f8f4:	227d      	movs	r2, #125	; 0x7d
 801f8f6:	fb94 f4f2 	sdiv	r4, r4, r2
 801f8fa:	42a3      	cmp	r3, r4
 801f8fc:	d102      	bne.n	801f904 <TIM7_IRQHandler+0xec>
						GUI_Bar_Measure(85, 13, 0.8);
 801f8fe:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801f974 <TIM7_IRQHandler+0x15c>
 801f902:	e7aa      	b.n	801f85a <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 5*((exposure_timer_period[exp_num]/12)/500))
 801f904:	780a      	ldrb	r2, [r1, #0]
 801f906:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801f90a:	fbb2 f2f6 	udiv	r2, r2, r6
 801f90e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801f912:	4293      	cmp	r3, r2
 801f914:	d1a5      	bne.n	801f862 <TIM7_IRQHandler+0x4a>
						GUI_Bar_Measure(85, 13, 1);
 801f916:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f91a:	e79e      	b.n	801f85a <TIM7_IRQHandler+0x42>
				} else if(exp_num > 2)
 801f91c:	2a02      	cmp	r2, #2
 801f91e:	d9fa      	bls.n	801f916 <TIM7_IRQHandler+0xfe>
							if(cnt_delay_bar == 1){
 801f920:	2b01      	cmp	r3, #1
 801f922:	d102      	bne.n	801f92a <TIM7_IRQHandler+0x112>
								GUI_Bar_Measure(85, 13, 0.5);
 801f924:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801f928:	e797      	b.n	801f85a <TIM7_IRQHandler+0x42>
							} else if(cnt_delay_bar == 2){
 801f92a:	2b02      	cmp	r3, #2
 801f92c:	e7f2      	b.n	801f914 <TIM7_IRQHandler+0xfc>
			FATFS_UnLinkDriver(SDPath);
 801f92e:	4812      	ldr	r0, [pc, #72]	; (801f978 <TIM7_IRQHandler+0x160>)
 801f930:	f7ea f90c 	bl	8009b4c <FATFS_UnLinkDriver>
				HAL_SD_DeInit(&hsd1);
 801f934:	4811      	ldr	r0, [pc, #68]	; (801f97c <TIM7_IRQHandler+0x164>)
 801f936:	f7e5 fa91 	bl	8004e5c <HAL_SD_DeInit>
 801f93a:	e7b0      	b.n	801f89e <TIM7_IRQHandler+0x86>
 801f93c:	20005279 	.word	0x20005279
 801f940:	200052a0 	.word	0x200052a0
 801f944:	2000559f 	.word	0x2000559f
 801f948:	2008adb8 	.word	0x2008adb8
 801f94c:	2008be5a 	.word	0x2008be5a
 801f950:	08033858 	.word	0x08033858
 801f954:	3e4ccccd 	.word	0x3e4ccccd
 801f958:	48000800 	.word	0x48000800
 801f95c:	20000a4e 	.word	0x20000a4e
 801f960:	200914c0 	.word	0x200914c0
 801f964:	20090f72 	.word	0x20090f72
 801f968:	20091510 	.word	0x20091510
 801f96c:	3ecccccd 	.word	0x3ecccccd
 801f970:	3f19999a 	.word	0x3f19999a
 801f974:	3f4ccccd 	.word	0x3f4ccccd
 801f978:	2008eee5 	.word	0x2008eee5
 801f97c:	20091068 	.word	0x20091068

0801f980 <EXTI9_5_IRQHandler>:
{
 801f980:	b513      	push	{r0, r1, r4, lr}
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801f982:	4c22      	ldr	r4, [pc, #136]	; (801fa0c <EXTI9_5_IRQHandler+0x8c>)
	DWT_Delay(1);
 801f984:	2001      	movs	r0, #1
 801f986:	f7ff f905 	bl	801eb94 <DWT_Delay>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801f98a:	2300      	movs	r3, #0
 801f98c:	4622      	mov	r2, r4
 801f98e:	4621      	mov	r1, r4
 801f990:	9300      	str	r3, [sp, #0]
 801f992:	481f      	ldr	r0, [pc, #124]	; (801fa10 <EXTI9_5_IRQHandler+0x90>)
 801f994:	2302      	movs	r3, #2
 801f996:	f7e5 fff0 	bl	800597a <HAL_SPI_TransmitReceive>
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801f99a:	7823      	ldrb	r3, [r4, #0]
 801f99c:	7862      	ldrb	r2, [r4, #1]
 801f99e:	4c1d      	ldr	r4, [pc, #116]	; (801fa14 <EXTI9_5_IRQHandler+0x94>)
 801f9a0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		Line[i] = Line[i-1]; 
 801f9a4:	8821      	ldrh	r1, [r4, #0]
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801f9a6:	f64c 73fe 	movw	r3, #53246	; 0xcffe
 801f9aa:	429a      	cmp	r2, r3
		Line[i] = Line[i-1]; 
 801f9ac:	b289      	uxth	r1, r1
 801f9ae:	4b1a      	ldr	r3, [pc, #104]	; (801fa18 <EXTI9_5_IRQHandler+0x98>)
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801f9b0:	dd05      	ble.n	801f9be <EXTI9_5_IRQHandler+0x3e>
		Line[i] = Line[i-1]; 
 801f9b2:	8822      	ldrh	r2, [r4, #0]
 801f9b4:	b292      	uxth	r2, r2
 801f9b6:	3a01      	subs	r2, #1
 801f9b8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f9bc:	e002      	b.n	801f9c4 <EXTI9_5_IRQHandler+0x44>
	} else if((RxBuf[0] << 8 | RxBuf[1])<=0x0EFF)
 801f9be:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 801f9c2:	dbf6      	blt.n	801f9b2 <EXTI9_5_IRQHandler+0x32>
		Line[i] = RxBuf[0] << 8 | RxBuf[1];
 801f9c4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(i >= 1023)
 801f9c8:	8823      	ldrh	r3, [r4, #0]
 801f9ca:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801f9ce:	b29b      	uxth	r3, r3
 801f9d0:	4293      	cmp	r3, r2
 801f9d2:	d916      	bls.n	801fa02 <EXTI9_5_IRQHandler+0x82>
		if(send_usb_block == 0 && (!pause))
 801f9d4:	4b11      	ldr	r3, [pc, #68]	; (801fa1c <EXTI9_5_IRQHandler+0x9c>)
 801f9d6:	781b      	ldrb	r3, [r3, #0]
 801f9d8:	b943      	cbnz	r3, 801f9ec <EXTI9_5_IRQHandler+0x6c>
 801f9da:	4b11      	ldr	r3, [pc, #68]	; (801fa20 <EXTI9_5_IRQHandler+0xa0>)
 801f9dc:	781b      	ldrb	r3, [r3, #0]
 801f9de:	b92b      	cbnz	r3, 801f9ec <EXTI9_5_IRQHandler+0x6c>
				memcpy(Line_buff, Line, sizeof(Line));
 801f9e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f9e4:	490c      	ldr	r1, [pc, #48]	; (801fa18 <EXTI9_5_IRQHandler+0x98>)
 801f9e6:	480f      	ldr	r0, [pc, #60]	; (801fa24 <EXTI9_5_IRQHandler+0xa4>)
 801f9e8:	f002 f9c6 	bl	8021d78 <memcpy>
			i = 0;
 801f9ec:	2300      	movs	r3, #0
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801f9ee:	2017      	movs	r0, #23
			i++;
 801f9f0:	8023      	strh	r3, [r4, #0]
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801f9f2:	f7e2 f839 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801f9f6:	2080      	movs	r0, #128	; 0x80
}
 801f9f8:	b002      	add	sp, #8
 801f9fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801f9fe:	f7e2 bee9 	b.w	80027d4 <HAL_GPIO_EXTI_IRQHandler>
			i++;
 801fa02:	8823      	ldrh	r3, [r4, #0]
 801fa04:	3301      	adds	r3, #1
 801fa06:	b29b      	uxth	r3, r3
 801fa08:	e7f1      	b.n	801f9ee <EXTI9_5_IRQHandler+0x6e>
 801fa0a:	bf00      	nop
 801fa0c:	200913f8 	.word	0x200913f8
 801fa10:	2009145c 	.word	0x2009145c
 801fa14:	2008be64 	.word	0x2008be64
 801fa18:	200075e2 	.word	0x200075e2
 801fa1c:	2008be6d 	.word	0x2008be6d
 801fa20:	200052a0 	.word	0x200052a0
 801fa24:	20009de4 	.word	0x20009de4

0801fa28 <EXTI3_IRQHandler>:
{	
 801fa28:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	cnt_touch_delay = cnt_touch_delay + 1;
 801fa2c:	4d4c      	ldr	r5, [pc, #304]	; (801fb60 <EXTI3_IRQHandler+0x138>)
 801fa2e:	682b      	ldr	r3, [r5, #0]
	uint16_t Touch_x = 0, Touch_y = 0;
 801fa30:	aa02      	add	r2, sp, #8
	cnt_touch_delay = cnt_touch_delay + 1;
 801fa32:	3301      	adds	r3, #1
 801fa34:	602b      	str	r3, [r5, #0]
	uint16_t Touch_x = 0, Touch_y = 0;
 801fa36:	2300      	movs	r3, #0
 801fa38:	f822 3d02 	strh.w	r3, [r2, #-2]!
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 801fa3c:	a901      	add	r1, sp, #4
 801fa3e:	2070      	movs	r0, #112	; 0x70
	uint16_t Touch_x = 0, Touch_y = 0;
 801fa40:	f8ad 3004 	strh.w	r3, [sp, #4]
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 801fa44:	f7fe f998 	bl	801dd78 <TS_Get_XY1>
	if((!TFT_ON_OFF) && (cnt_touch_delay >= 50))
 801fa48:	4b46      	ldr	r3, [pc, #280]	; (801fb64 <EXTI3_IRQHandler+0x13c>)
 801fa4a:	7819      	ldrb	r1, [r3, #0]
 801fa4c:	462c      	mov	r4, r5
 801fa4e:	461a      	mov	r2, r3
 801fa50:	b959      	cbnz	r1, 801fa6a <EXTI3_IRQHandler+0x42>
 801fa52:	6829      	ldr	r1, [r5, #0]
 801fa54:	2931      	cmp	r1, #49	; 0x31
 801fa56:	d908      	bls.n	801fa6a <EXTI3_IRQHandler+0x42>
			TFT_ON_OFF = 0x01;
 801fa58:	2201      	movs	r2, #1
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801fa5a:	2104      	movs	r1, #4
 801fa5c:	4842      	ldr	r0, [pc, #264]	; (801fb68 <EXTI3_IRQHandler+0x140>)
			TFT_ON_OFF = 0x01;
 801fa5e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801fa60:	f7e6 fd1e 	bl	80064a0 <HAL_TIM_PWM_Start>
}
 801fa64:	b002      	add	sp, #8
 801fa66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(TFT_ON_OFF && (cnt_touch_delay >= 0x0B)){
 801fa6a:	7813      	ldrb	r3, [r2, #0]
 801fa6c:	2b00      	cmp	r3, #0
 801fa6e:	d062      	beq.n	801fb36 <EXTI3_IRQHandler+0x10e>
 801fa70:	6823      	ldr	r3, [r4, #0]
 801fa72:	2b0a      	cmp	r3, #10
 801fa74:	d95f      	bls.n	801fb36 <EXTI3_IRQHandler+0x10e>
			if((Mode_EL == 0x00) && ((Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)))
 801fa76:	4b3d      	ldr	r3, [pc, #244]	; (801fb6c <EXTI3_IRQHandler+0x144>)
 801fa78:	781b      	ldrb	r3, [r3, #0]
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	d157      	bne.n	801fb2e <EXTI3_IRQHandler+0x106>
 801fa7e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 801fa82:	f7e0 fd67 	bl	8000554 <__aeabi_i2d>
 801fa86:	4680      	mov	r8, r0
 801fa88:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801fa8c:	4689      	mov	r9, r1
 801fa8e:	f7e0 fd61 	bl	8000554 <__aeabi_i2d>
 801fa92:	a32d      	add	r3, pc, #180	; (adr r3, 801fb48 <EXTI3_IRQHandler+0x120>)
 801fa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa98:	4606      	mov	r6, r0
 801fa9a:	460f      	mov	r7, r1
 801fa9c:	4640      	mov	r0, r8
 801fa9e:	4649      	mov	r1, r9
 801faa0:	f04f 0501 	mov.w	r5, #1
 801faa4:	f7e1 f842 	bl	8000b2c <__aeabi_dcmpge>
 801faa8:	b900      	cbnz	r0, 801faac <EXTI3_IRQHandler+0x84>
 801faaa:	4605      	mov	r5, r0
 801faac:	a328      	add	r3, pc, #160	; (adr r3, 801fb50 <EXTI3_IRQHandler+0x128>)
 801faae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fab2:	4640      	mov	r0, r8
 801fab4:	4649      	mov	r1, r9
 801fab6:	f04f 0a01 	mov.w	sl, #1
 801faba:	f7e1 f82d 	bl	8000b18 <__aeabi_dcmple>
 801fabe:	b900      	cbnz	r0, 801fac2 <EXTI3_IRQHandler+0x9a>
 801fac0:	4682      	mov	sl, r0
 801fac2:	a325      	add	r3, pc, #148	; (adr r3, 801fb58 <EXTI3_IRQHandler+0x130>)
 801fac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fac8:	4630      	mov	r0, r6
 801faca:	4639      	mov	r1, r7
 801facc:	ea05 050a 	and.w	r5, r5, sl
 801fad0:	f04f 0801 	mov.w	r8, #1
 801fad4:	f7e1 f82a 	bl	8000b2c <__aeabi_dcmpge>
 801fad8:	b900      	cbnz	r0, 801fadc <EXTI3_IRQHandler+0xb4>
 801fada:	4680      	mov	r8, r0
 801fadc:	ea05 0508 	and.w	r5, r5, r8
 801fae0:	07eb      	lsls	r3, r5, #31
 801fae2:	d524      	bpl.n	801fb2e <EXTI3_IRQHandler+0x106>
 801fae4:	2200      	movs	r2, #0
 801fae6:	4b22      	ldr	r3, [pc, #136]	; (801fb70 <EXTI3_IRQHandler+0x148>)
 801fae8:	4630      	mov	r0, r6
 801faea:	4639      	mov	r1, r7
 801faec:	f04f 0501 	mov.w	r5, #1
 801faf0:	f7e1 f812 	bl	8000b18 <__aeabi_dcmple>
 801faf4:	b900      	cbnz	r0, 801faf8 <EXTI3_IRQHandler+0xd0>
 801faf6:	4605      	mov	r5, r0
 801faf8:	f015 0fff 	tst.w	r5, #255	; 0xff
 801fafc:	d017      	beq.n	801fb2e <EXTI3_IRQHandler+0x106>
				pause_button++;
 801fafe:	4d1d      	ldr	r5, [pc, #116]	; (801fb74 <EXTI3_IRQHandler+0x14c>)
 801fb00:	782b      	ldrb	r3, [r5, #0]
 801fb02:	3301      	adds	r3, #1
 801fb04:	b2db      	uxtb	r3, r3
				if(pause_button > 3)
 801fb06:	2b03      	cmp	r3, #3
				pause_button++;
 801fb08:	702b      	strb	r3, [r5, #0]
				if(pause_button > 3)
 801fb0a:	d910      	bls.n	801fb2e <EXTI3_IRQHandler+0x106>
					LaserOnOff = !LaserOnOff;
 801fb0c:	4a1a      	ldr	r2, [pc, #104]	; (801fb78 <EXTI3_IRQHandler+0x150>)
 801fb0e:	7813      	ldrb	r3, [r2, #0]
 801fb10:	fab3 f383 	clz	r3, r3
 801fb14:	095b      	lsrs	r3, r3, #5
 801fb16:	7013      	strb	r3, [r2, #0]
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801fb18:	7813      	ldrb	r3, [r2, #0]
 801fb1a:	b19b      	cbz	r3, 801fb44 <EXTI3_IRQHandler+0x11c>
 801fb1c:	2200      	movs	r2, #0
 801fb1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801fb22:	4816      	ldr	r0, [pc, #88]	; (801fb7c <EXTI3_IRQHandler+0x154>)
 801fb24:	f7e2 fe4c 	bl	80027c0 <HAL_GPIO_WritePin>
					cnt_touch_delay = 0;
 801fb28:	2300      	movs	r3, #0
 801fb2a:	6023      	str	r3, [r4, #0]
					pause_button = 0;
 801fb2c:	702b      	strb	r3, [r5, #0]
				GUI_Touch_Processing();
 801fb2e:	f7f1 f833 	bl	8010b98 <GUI_Touch_Processing>
				cnt_touch_delay = 0;
 801fb32:	2300      	movs	r3, #0
 801fb34:	6023      	str	r3, [r4, #0]
		HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 801fb36:	2009      	movs	r0, #9
 801fb38:	f7e1 ff96 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 801fb3c:	2008      	movs	r0, #8
 801fb3e:	f7e2 fe49 	bl	80027d4 <HAL_GPIO_EXTI_IRQHandler>
}
 801fb42:	e78f      	b.n	801fa64 <EXTI3_IRQHandler+0x3c>
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801fb44:	2201      	movs	r2, #1
 801fb46:	e7ea      	b.n	801fb1e <EXTI3_IRQHandler+0xf6>
 801fb48:	99999999 	.word	0x99999999
 801fb4c:	40720d99 	.word	0x40720d99
 801fb50:	33333333 	.word	0x33333333
 801fb54:	407aff33 	.word	0x407aff33
 801fb58:	99999999 	.word	0x99999999
 801fb5c:	4091a399 	.word	0x4091a399
 801fb60:	2008adbc 	.word	0x2008adbc
 801fb64:	20000a4a 	.word	0x20000a4a
 801fb68:	20091014 	.word	0x20091014
 801fb6c:	20000a48 	.word	0x20000a48
 801fb70:	4093e000 	.word	0x4093e000
 801fb74:	2008be6b 	.word	0x2008be6b
 801fb78:	200075e0 	.word	0x200075e0
 801fb7c:	48000800 	.word	0x48000800

0801fb80 <SystemClock_Config>:
{
 801fb80:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801fb82:	2000      	movs	r0, #0
{
 801fb84:	b0bf      	sub	sp, #252	; 0xfc
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801fb86:	f7e4 f921 	bl	8003dcc <HAL_PWREx_ControlVoltageScaling>
 801fb8a:	b100      	cbz	r0, 801fb8e <SystemClock_Config+0xe>
 801fb8c:	e7fe      	b.n	801fb8c <SystemClock_Config+0xc>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801fb8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801fb92:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801fb94:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801fb96:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801fb98:	2503      	movs	r5, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801fb9a:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801fb9e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801fba0:	2705      	movs	r7, #5
  RCC_OscInitStruct.PLL.PLLN = 30;
 801fba2:	231e      	movs	r3, #30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801fba4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801fba6:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801fba8:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801fbaa:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801fbac:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 2;
 801fbae:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 30;
 801fbb0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801fbb2:	9714      	str	r7, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 801fbb4:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801fbb6:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801fbb8:	f7e4 f9fe 	bl	8003fb8 <HAL_RCC_OscConfig>
 801fbbc:	b100      	cbz	r0, 801fbc0 <SystemClock_Config+0x40>
 801fbbe:	e7fe      	b.n	801fbbe <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801fbc0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801fbc2:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801fbc4:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801fbc6:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801fbc8:	4639      	mov	r1, r7
 801fbca:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801fbcc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801fbce:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801fbd0:	f7e4 fc44 	bl	800445c <HAL_RCC_ClockConfig>
 801fbd4:	b100      	cbz	r0, 801fbd8 <SystemClock_Config+0x58>
 801fbd6:	e7fe      	b.n	801fbd6 <SystemClock_Config+0x56>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SDMMC1;
 801fbd8:	4b1e      	ldr	r3, [pc, #120]	; (801fc54 <SystemClock_Config+0xd4>)
 801fbda:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 801fbdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801fbe0:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801fbe2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801fbe6:	9334      	str	r3, [sp, #208]	; 0xd0
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 801fbe8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 801fbec:	9337      	str	r3, [sp, #220]	; 0xdc
	PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 801fbee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801fbf2:	9335      	str	r3, [sp, #212]	; 0xd4
  PeriphClkInit.PLLSAI2.PLLSAI2N = 9;
 801fbf4:	2309      	movs	r3, #9
 801fbf6:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 801fbf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801fbfc:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801fbfe:	230c      	movs	r3, #12
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801fc00:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801fc02:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801fc04:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801fc06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
 801fc0a:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 801fc0c:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 801fc0e:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 801fc10:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 801fc12:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 801fc14:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 801fc16:	941c      	str	r4, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801fc18:	941d      	str	r4, [sp, #116]	; 0x74
	PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 801fc1a:	963a      	str	r6, [sp, #232]	; 0xe8
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 801fc1c:	951f      	str	r5, [sp, #124]	; 0x7c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 801fc1e:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801fc20:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801fc22:	f7e4 fe4f 	bl	80048c4 <HAL_RCCEx_PeriphCLKConfig>
 801fc26:	4604      	mov	r4, r0
 801fc28:	b100      	cbz	r0, 801fc2c <SystemClock_Config+0xac>
 801fc2a:	e7fe      	b.n	801fc2a <SystemClock_Config+0xaa>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 801fc2c:	f7e4 fd10 	bl	8004650 <HAL_RCC_GetHCLKFreq>
 801fc30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801fc34:	fbb0 f0f3 	udiv	r0, r0, r3
 801fc38:	f7e1 ff00 	bl	8001a3c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 801fc3c:	2004      	movs	r0, #4
 801fc3e:	f7e1 ff21 	bl	8001a84 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801fc42:	4622      	mov	r2, r4
 801fc44:	4621      	mov	r1, r4
 801fc46:	f04f 30ff 	mov.w	r0, #4294967295
 801fc4a:	f7e1 fea9 	bl	80019a0 <HAL_NVIC_SetPriority>
}
 801fc4e:	b03f      	add	sp, #252	; 0xfc
 801fc50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc52:	bf00      	nop
 801fc54:	00486060 	.word	0x00486060

0801fc58 <main>:
{
 801fc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc5c:	ed2d 8b02 	vpush	{d8}
 801fc60:	b0a7      	sub	sp, #156	; 0x9c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801fc62:	4db2      	ldr	r5, [pc, #712]	; (801ff2c <main+0x2d4>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801fc64:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 801ff48 <main+0x2f0>
  HAL_Init();
 801fc68:	f7e1 f9c2 	bl	8000ff0 <HAL_Init>
	HAL_Delay(1);
 801fc6c:	2001      	movs	r0, #1
 801fc6e:	f7e1 f9dd 	bl	800102c <HAL_Delay>
  SystemClock_Config();
 801fc72:	f7ff ff85 	bl	801fb80 <SystemClock_Config>
	HAL_Delay(1);
 801fc76:	2001      	movs	r0, #1
 801fc78:	f7e1 f9d8 	bl	800102c <HAL_Delay>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801fc7c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fc7e:	f043 0310 	orr.w	r3, r3, #16
 801fc82:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fc84:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fc86:	f003 0310 	and.w	r3, r3, #16
 801fc8a:	9307      	str	r3, [sp, #28]
 801fc8c:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 801fc8e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fc90:	f043 0320 	orr.w	r3, r3, #32
 801fc94:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fc96:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fc98:	f003 0320 	and.w	r3, r3, #32
 801fc9c:	9308      	str	r3, [sp, #32]
 801fc9e:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801fca0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fca2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fca6:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fca8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fcae:	9309      	str	r3, [sp, #36]	; 0x24
 801fcb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801fcb2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcb4:	f043 0301 	orr.w	r3, r3, #1
 801fcb8:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fcba:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcbc:	f003 0301 	and.w	r3, r3, #1
 801fcc0:	930a      	str	r3, [sp, #40]	; 0x28
 801fcc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801fcc4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcc6:	f043 0304 	orr.w	r3, r3, #4
 801fcca:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fccc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcce:	f003 0304 	and.w	r3, r3, #4
 801fcd2:	930b      	str	r3, [sp, #44]	; 0x2c
 801fcd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801fcd6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcd8:	f043 0302 	orr.w	r3, r3, #2
 801fcdc:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fcde:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fce0:	f003 0302 	and.w	r3, r3, #2
 801fce4:	930c      	str	r3, [sp, #48]	; 0x30
 801fce6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801fce8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcea:	f043 0308 	orr.w	r3, r3, #8
 801fcee:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fcf0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcf2:	f003 0308 	and.w	r3, r3, #8
 801fcf6:	930d      	str	r3, [sp, #52]	; 0x34
 801fcf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	__HAL_RCC_GPIOG_CLK_ENABLE();
 801fcfa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fd00:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fd02:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fd04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fd08:	930e      	str	r3, [sp, #56]	; 0x38
 801fd0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	  HAL_PWREx_EnableVddIO2();
 801fd0c:	f7e4 f8c0 	bl	8003e90 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_RESET);
 801fd10:	2200      	movs	r2, #0
 801fd12:	f242 0110 	movw	r1, #8208	; 0x2010
 801fd16:	4886      	ldr	r0, [pc, #536]	; (801ff30 <main+0x2d8>)
 801fd18:	f7e2 fd52 	bl	80027c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801fd1c:	2200      	movs	r2, #0
 801fd1e:	2120      	movs	r1, #32
 801fd20:	4884      	ldr	r0, [pc, #528]	; (801ff34 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd22:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801fd24:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801fd26:	f7e2 fd4b 	bl	80027c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801fd2a:	2720      	movs	r7, #32
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fd2c:	a919      	add	r1, sp, #100	; 0x64
 801fd2e:	4881      	ldr	r0, [pc, #516]	; (801ff34 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801fd30:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801fd32:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd34:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fd36:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fd38:	f7e2 fbcc 	bl	80024d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET); //VIDEO_GAIN ON
 801fd3c:	4622      	mov	r2, r4
 801fd3e:	4639      	mov	r1, r7
 801fd40:	487c      	ldr	r0, [pc, #496]	; (801ff34 <main+0x2dc>)
 801fd42:	f7e2 fd3d 	bl	80027c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801fd46:	f242 0310 	movw	r3, #8208	; 0x2010
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fd4a:	a919      	add	r1, sp, #100	; 0x64
 801fd4c:	4878      	ldr	r0, [pc, #480]	; (801ff30 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801fd4e:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801fd50:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd52:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fd54:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fd56:	f7e2 fbbd 	bl	80024d4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//ST init HIGH
 801fd5a:	4632      	mov	r2, r6
 801fd5c:	2110      	movs	r1, #16
 801fd5e:	4874      	ldr	r0, [pc, #464]	; (801ff30 <main+0x2d8>)
 801fd60:	f7e2 fd2e 	bl	80027c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Laser init OFF
 801fd64:	4622      	mov	r2, r4
 801fd66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801fd6a:	4871      	ldr	r0, [pc, #452]	; (801ff30 <main+0x2d8>)
 801fd6c:	f7e2 fd28 	bl	80027c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801fd70:	2380      	movs	r3, #128	; 0x80
 801fd72:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fd74:	a919      	add	r1, sp, #100	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801fd76:	4b70      	ldr	r3, [pc, #448]	; (801ff38 <main+0x2e0>)
 801fd78:	931a      	str	r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fd7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd7e:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fd80:	f7e2 fba8 	bl	80024d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 801fd84:	4622      	mov	r2, r4
 801fd86:	2104      	movs	r1, #4
 801fd88:	486a      	ldr	r0, [pc, #424]	; (801ff34 <main+0x2dc>)
 801fd8a:	f7e2 fd19 	bl	80027c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801fd8e:	f04f 0a04 	mov.w	sl, #4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fd92:	a919      	add	r1, sp, #100	; 0x64
 801fd94:	4867      	ldr	r0, [pc, #412]	; (801ff34 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801fd96:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801fd9a:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd9c:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fd9e:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fda0:	f7e2 fb98 	bl	80024d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801fda4:	4632      	mov	r2, r6
 801fda6:	4651      	mov	r1, sl
 801fda8:	4862      	ldr	r0, [pc, #392]	; (801ff34 <main+0x2dc>)
 801fdaa:	f7e2 fd09 	bl	80027c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 801fdae:	4622      	mov	r2, r4
 801fdb0:	2102      	movs	r1, #2
 801fdb2:	4860      	ldr	r0, [pc, #384]	; (801ff34 <main+0x2dc>)
 801fdb4:	f7e2 fd04 	bl	80027c0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801fdb8:	2702      	movs	r7, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fdba:	a919      	add	r1, sp, #100	; 0x64
 801fdbc:	485d      	ldr	r0, [pc, #372]	; (801ff34 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801fdbe:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801fdc0:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fdc2:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fdc4:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fdc6:	f7e2 fb85 	bl	80024d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 801fdca:	4632      	mov	r2, r6
 801fdcc:	4639      	mov	r1, r7
 801fdce:	4859      	ldr	r0, [pc, #356]	; (801ff34 <main+0x2dc>)
 801fdd0:	f7e2 fcf6 	bl	80027c0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801fdd4:	f44f 6800 	mov.w	r8, #2048	; 0x800
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fdd8:	a919      	add	r1, sp, #100	; 0x64
 801fdda:	4856      	ldr	r0, [pc, #344]	; (801ff34 <main+0x2dc>)
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801fddc:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801fde0:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fde2:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fde4:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fde6:	f7e2 fb75 	bl	80024d4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 801fdea:	4632      	mov	r2, r6
 801fdec:	4641      	mov	r1, r8
 801fdee:	4851      	ldr	r0, [pc, #324]	; (801ff34 <main+0x2dc>)
 801fdf0:	f7e2 fce6 	bl	80027c0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801fdf4:	f04f 0808 	mov.w	r8, #8
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fdf8:	a919      	add	r1, sp, #100	; 0x64
 801fdfa:	484e      	ldr	r0, [pc, #312]	; (801ff34 <main+0x2dc>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801fdfc:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801fe00:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fe04:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fe06:	f7e2 fb65 	bl	80024d4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801fe0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fe0e:	a919      	add	r1, sp, #100	; 0x64
 801fe10:	4847      	ldr	r0, [pc, #284]	; (801ff30 <main+0x2d8>)
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801fe12:	9319      	str	r3, [sp, #100]	; 0x64
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801fe14:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fe18:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fe1a:	f7e2 fb5b 	bl	80024d4 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 2); //SDO IRQ
 801fe1e:	463a      	mov	r2, r7
 801fe20:	4621      	mov	r1, r4
 801fe22:	2017      	movs	r0, #23
 801fe24:	f7e1 fdbc 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0); //Touchscreen IRQ
 801fe28:	4622      	mov	r2, r4
 801fe2a:	4639      	mov	r1, r7
 801fe2c:	2009      	movs	r0, #9
 801fe2e:	f7e1 fdb7 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801fe32:	2017      	movs	r0, #23
 801fe34:	f7e1 fde8 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 801fe38:	2009      	movs	r0, #9
 801fe3a:	f7e1 fde5 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801fe3e:	4630      	mov	r0, r6
 801fe40:	f7e1 f8f4 	bl	800102c <HAL_Delay>
	DWT_Init();
 801fe44:	f7fe fe92 	bl	801eb6c <DWT_Init>
	HAL_Delay(1);
 801fe48:	4630      	mov	r0, r6
 801fe4a:	f7e1 f8ef 	bl	800102c <HAL_Delay>
	MX_TIM2_Init();
 801fe4e:	f7fe fe59 	bl	801eb04 <MX_TIM2_Init>

//PWM Timer for booster
static void MX_TIM15_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
 801fe52:	221c      	movs	r2, #28
 801fe54:	4621      	mov	r1, r4
 801fe56:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801fe58:	940f      	str	r4, [sp, #60]	; 0x3c
 801fe5a:	9410      	str	r4, [sp, #64]	; 0x40
 801fe5c:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 801fe5e:	f001 ff96 	bl	8021d8e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801fe62:	222c      	movs	r2, #44	; 0x2c
 801fe64:	4621      	mov	r1, r4
 801fe66:	a819      	add	r0, sp, #100	; 0x64
 801fe68:	f001 ff91 	bl	8021d8e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 801fe6c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 801ff4c <main+0x2f4>
  htim15.Init.Prescaler = 1200;
 801fe70:	4b32      	ldr	r3, [pc, #200]	; (801ff3c <main+0x2e4>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 801fe72:	f8c9 4008 	str.w	r4, [r9, #8]
  htim15.Init.Prescaler = 1200;
 801fe76:	f44f 6b96 	mov.w	fp, #1200	; 0x4b0
 801fe7a:	e889 0808 	stmia.w	r9, {r3, fp}
  htim15.Init.Period = 100;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim15.Init.RepetitionCounter = 0;
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801fe7e:	4648      	mov	r0, r9
  htim15.Init.Period = 100;
 801fe80:	2364      	movs	r3, #100	; 0x64
 801fe82:	f8c9 300c 	str.w	r3, [r9, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801fe86:	f8c9 4010 	str.w	r4, [r9, #16]
  htim15.Init.RepetitionCounter = 0;
 801fe8a:	f8c9 4014 	str.w	r4, [r9, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801fe8e:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801fe92:	f7e6 f92d 	bl	80060f0 <HAL_TIM_PWM_Init>
 801fe96:	b100      	cbz	r0, 801fe9a <main+0x242>
 801fe98:	e7fe      	b.n	801fe98 <main+0x240>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801fe9a:	900f      	str	r0, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801fe9c:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 801fe9e:	a90f      	add	r1, sp, #60	; 0x3c
 801fea0:	4648      	mov	r0, r9
 801fea2:	f7e6 fb71 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 801fea6:	b100      	cbz	r0, 801feaa <main+0x252>
 801fea8:	e7fe      	b.n	801fea8 <main+0x250>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801feaa:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 801feac:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801feae:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801feb0:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801feb2:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801feb4:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801feb6:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801feb8:	4652      	mov	r2, sl
 801feba:	a912      	add	r1, sp, #72	; 0x48
 801febc:	4648      	mov	r0, r9
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801febe:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801fec0:	f7e6 f9ae 	bl	8006220 <HAL_TIM_PWM_ConfigChannel>
 801fec4:	b100      	cbz	r0, 801fec8 <main+0x270>
 801fec6:	e7fe      	b.n	801fec6 <main+0x26e>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801fec8:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801feca:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801fecc:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.DeadTime = 0;
 801fece:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801fed0:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801fed2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 801fed6:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801fed8:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801feda:	a919      	add	r1, sp, #100	; 0x64
 801fedc:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801fede:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801fee0:	f7e6 fb7e 	bl	80065e0 <HAL_TIMEx_ConfigBreakDeadTime>
 801fee4:	4682      	mov	sl, r0
 801fee6:	b100      	cbz	r0, 801feea <main+0x292>
 801fee8:	e7fe      	b.n	801fee8 <main+0x290>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 801feea:	4648      	mov	r0, r9
 801feec:	f001 fb3c 	bl	8021568 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801fef0:	4630      	mov	r0, r6
 801fef2:	f7e1 f89b 	bl	800102c <HAL_Delay>
	HAL_Delay(1);
 801fef6:	4630      	mov	r0, r6
 801fef8:	f7e1 f898 	bl	800102c <HAL_Delay>
  htim5.Instance = TIM5;
 801fefc:	4c10      	ldr	r4, [pc, #64]	; (801ff40 <main+0x2e8>)
 801fefe:	4b11      	ldr	r3, [pc, #68]	; (801ff44 <main+0x2ec>)
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801ff00:	f8c4 a010 	str.w	sl, [r4, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801ff04:	e884 0488 	stmia.w	r4, {r3, r7, sl}
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801ff08:	4620      	mov	r0, r4
  htim5.Init.Period = 30;
 801ff0a:	231e      	movs	r3, #30
 801ff0c:	60e3      	str	r3, [r4, #12]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801ff0e:	f8c4 a018 	str.w	sl, [r4, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801ff12:	f7e6 f8d3 	bl	80060bc <HAL_TIM_OC_Init>
 801ff16:	b100      	cbz	r0, 801ff1a <main+0x2c2>
 801ff18:	e7fe      	b.n	801ff18 <main+0x2c0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801ff1a:	9012      	str	r0, [sp, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ff1c:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801ff1e:	a912      	add	r1, sp, #72	; 0x48
 801ff20:	4620      	mov	r0, r4
 801ff22:	f7e6 fb31 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 801ff26:	4602      	mov	r2, r0
 801ff28:	b190      	cbz	r0, 801ff50 <main+0x2f8>
 801ff2a:	e7fe      	b.n	801ff2a <main+0x2d2>
 801ff2c:	40021000 	.word	0x40021000
 801ff30:	48000800 	.word	0x48000800
 801ff34:	48001400 	.word	0x48001400
 801ff38:	10210000 	.word	0x10210000
 801ff3c:	40014000 	.word	0x40014000
 801ff40:	200910fc 	.word	0x200910fc
 801ff44:	40000c00 	.word	0x40000c00
 801ff48:	10110000 	.word	0x10110000
 801ff4c:	20091014 	.word	0x20091014
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801ff50:	2330      	movs	r3, #48	; 0x30
 801ff52:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801ff54:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 5;
 801ff56:	2305      	movs	r3, #5
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801ff58:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801ff5a:	a919      	add	r1, sp, #100	; 0x64
 801ff5c:	4620      	mov	r0, r4
  sConfigOC.Pulse = 5;
 801ff5e:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801ff60:	f7e6 f926 	bl	80061b0 <HAL_TIM_OC_ConfigChannel>
 801ff64:	4681      	mov	r9, r0
 801ff66:	b100      	cbz	r0, 801ff6a <main+0x312>
 801ff68:	e7fe      	b.n	801ff68 <main+0x310>
  HAL_TIM_MspPostInit(&htim5);
 801ff6a:	4620      	mov	r0, r4
 801ff6c:	f001 fafc 	bl	8021568 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801ff70:	4630      	mov	r0, r6
 801ff72:	f7e1 f85b 	bl	800102c <HAL_Delay>
	MX_USB_DEVICE_Init();
 801ff76:	f001 fc79 	bl	802186c <MX_USB_DEVICE_Init>
	HAL_Delay(1);
 801ff7a:	4630      	mov	r0, r6
 801ff7c:	f7e1 f856 	bl	800102c <HAL_Delay>
  hdma2d.Instance = DMA2D;
 801ff80:	4c8c      	ldr	r4, [pc, #560]	; (80201b4 <main+0x55c>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801ff82:	4b8d      	ldr	r3, [pc, #564]	; (80201b8 <main+0x560>)
	hdma2d.LayerCfg[0].InputOffset = 0;
 801ff84:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hdma2d.Init.Mode = DMA2D_R2M;
 801ff88:	f44f 3a40 	mov.w	sl, #196608	; 0x30000
 801ff8c:	e884 0408 	stmia.w	r4, {r3, sl}
  hdma2d.LayerCfg[0].InputAlpha =125;
 801ff90:	237d      	movs	r3, #125	; 0x7d
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 801ff92:	62e7      	str	r7, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801ff94:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hdma2d.LayerCfg[0].InputAlpha =125;
 801ff98:	6363      	str	r3, [r4, #52]	; 0x34
  hdma2d.LayerCfg[1].InputOffset = 0;
 801ff9a:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 801ff9e:	6467      	str	r7, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801ffa0:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 125;
 801ffa4:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801ffa6:	4620      	mov	r0, r4
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801ffa8:	60a7      	str	r7, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 801ffaa:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801ffae:	f7e1 ff5f 	bl	8001e70 <HAL_DMA2D_Init>
 801ffb2:	b100      	cbz	r0, 801ffb6 <main+0x35e>
 801ffb4:	e7fe      	b.n	801ffb4 <main+0x35c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 801ffb6:	4631      	mov	r1, r6
 801ffb8:	4620      	mov	r0, r4
 801ffba:	f7e2 f83f 	bl	800203c <HAL_DMA2D_ConfigLayer>
 801ffbe:	4681      	mov	r9, r0
 801ffc0:	b100      	cbz	r0, 801ffc4 <main+0x36c>
 801ffc2:	e7fe      	b.n	801ffc2 <main+0x36a>
	HAL_Delay(1);
 801ffc4:	4630      	mov	r0, r6
 801ffc6:	f7e1 f831 	bl	800102c <HAL_Delay>
  hspi1.Instance = SPI1;
 801ffca:	4c7c      	ldr	r4, [pc, #496]	; (80201bc <main+0x564>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801ffcc:	4b7c      	ldr	r3, [pc, #496]	; (80201c0 <main+0x568>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801ffce:	f8c4 9008 	str.w	r9, [r4, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801ffd2:	f44f 7c82 	mov.w	ip, #260	; 0x104
 801ffd6:	e884 1008 	stmia.w	r4, {r3, ip}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801ffda:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 801ffde:	60e3      	str	r3, [r4, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801ffe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ffe4:	61a3      	str	r3, [r4, #24]
  hspi1.Init.TIMode = SPI_TIMODE_ENABLE;
 801ffe6:	2310      	movs	r3, #16
 801ffe8:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801ffea:	4620      	mov	r0, r4
  hspi1.Init.CRCPolynomial = 7;
 801ffec:	2307      	movs	r3, #7
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801ffee:	6127      	str	r7, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 801fff0:	6166      	str	r6, [r4, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;//SPI_BAUDRATEPRESCALER_2
 801fff2:	f8c4 801c 	str.w	r8, [r4, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801fff6:	f8c4 9020 	str.w	r9, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801fffa:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 801fffe:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8020000:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8020004:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8020008:	f7e5 fc66 	bl	80058d8 <HAL_SPI_Init>
 802000c:	b100      	cbz	r0, 8020010 <main+0x3b8>
 802000e:	e7fe      	b.n	802000e <main+0x3b6>
	__HAL_SPI_ENABLE(&hspi1);
 8020010:	6822      	ldr	r2, [r4, #0]
  hi2c1.Instance = I2C1;
 8020012:	4c6c      	ldr	r4, [pc, #432]	; (80201c4 <main+0x56c>)
	__HAL_SPI_ENABLE(&hspi1);
 8020014:	6813      	ldr	r3, [r2, #0]
 8020016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802001a:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 802001c:	2001      	movs	r0, #1
 802001e:	f7e1 f805 	bl	800102c <HAL_Delay>
  hi2c1.Instance = I2C1;
 8020022:	4b69      	ldr	r3, [pc, #420]	; (80201c8 <main+0x570>)
 8020024:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8020026:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 802002a:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 802002e:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 8020032:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 112;
 8020034:	2370      	movs	r3, #112	; 0x70
 8020036:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020038:	2701      	movs	r7, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 802003a:	2300      	movs	r3, #0
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 802003c:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 802003e:	60e7      	str	r7, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020040:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8020042:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8020044:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8020046:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020048:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 802004a:	f7e2 fd0a 	bl	8002a62 <HAL_I2C_Init>
 802004e:	4601      	mov	r1, r0
 8020050:	b100      	cbz	r0, 8020054 <main+0x3fc>
 8020052:	e7fe      	b.n	8020052 <main+0x3fa>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8020054:	4620      	mov	r0, r4
 8020056:	f7e3 f86d 	bl	8003134 <HAL_I2CEx_ConfigAnalogFilter>
 802005a:	4601      	mov	r1, r0
 802005c:	b100      	cbz	r0, 8020060 <main+0x408>
 802005e:	e7fe      	b.n	802005e <main+0x406>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8020060:	4620      	mov	r0, r4
 8020062:	f7e3 f88d 	bl	8003180 <HAL_I2CEx_ConfigDigitalFilter>
 8020066:	4606      	mov	r6, r0
 8020068:	b100      	cbz	r0, 802006c <main+0x414>
 802006a:	e7fe      	b.n	802006a <main+0x412>
	HAL_Delay(1);
 802006c:	4638      	mov	r0, r7
 802006e:	f7e0 ffdd 	bl	800102c <HAL_Delay>

/* LPUART1 init function */
static void MX_LPUART1_UART_Init(void)
{

	hlpuart1.Instance = LPUART1;
 8020072:	4c56      	ldr	r4, [pc, #344]	; (80201cc <main+0x574>)
  hlpuart1.Init.BaudRate = 9600;
 8020074:	4b56      	ldr	r3, [pc, #344]	; (80201d0 <main+0x578>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020076:	60a6      	str	r6, [r4, #8]
  hlpuart1.Init.BaudRate = 9600;
 8020078:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 802007c:	e884 4008 	stmia.w	r4, {r3, lr}
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8020080:	4620      	mov	r0, r4
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8020082:	230c      	movs	r3, #12
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8020084:	60e6      	str	r6, [r4, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8020086:	6126      	str	r6, [r4, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8020088:	6163      	str	r3, [r4, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802008a:	61a6      	str	r6, [r4, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802008c:	6226      	str	r6, [r4, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802008e:	6266      	str	r6, [r4, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020090:	62a6      	str	r6, [r4, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8020092:	66a6      	str	r6, [r4, #104]	; 0x68
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8020094:	f7e6 ff00 	bl	8006e98 <HAL_UART_Init>
 8020098:	4601      	mov	r1, r0
 802009a:	b100      	cbz	r0, 802009e <main+0x446>
 802009c:	e7fe      	b.n	802009c <main+0x444>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802009e:	4620      	mov	r0, r4
 80200a0:	f7e6 ff73 	bl	8006f8a <HAL_UARTEx_SetTxFifoThreshold>
 80200a4:	4601      	mov	r1, r0
 80200a6:	b100      	cbz	r0, 80200aa <main+0x452>
 80200a8:	e7fe      	b.n	80200a8 <main+0x450>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80200aa:	4620      	mov	r0, r4
 80200ac:	f7e6 ff91 	bl	8006fd2 <HAL_UARTEx_SetRxFifoThreshold>
 80200b0:	4606      	mov	r6, r0
 80200b2:	b100      	cbz	r0, 80200b6 <main+0x45e>
 80200b4:	e7fe      	b.n	80200b4 <main+0x45c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }
	
	HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 3); 
 80200b6:	2203      	movs	r2, #3
 80200b8:	4639      	mov	r1, r7
 80200ba:	2046      	movs	r0, #70	; 0x46
 80200bc:	f7e1 fc70 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 80200c0:	4638      	mov	r0, r7
 80200c2:	f7e0 ffb3 	bl	800102c <HAL_Delay>
  hltdc.Instance = LTDC;
 80200c6:	4c43      	ldr	r4, [pc, #268]	; (80201d4 <main+0x57c>)
 80200c8:	4b43      	ldr	r3, [pc, #268]	; (80201d8 <main+0x580>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80200ca:	60a6      	str	r6, [r4, #8]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80200cc:	e884 0048 	stmia.w	r4, {r3, r6}
  hltdc.Init.HorizontalSync = 5;
 80200d0:	2305      	movs	r3, #5
 80200d2:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 30;
 80200d4:	231e      	movs	r3, #30
 80200d6:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 40;
 80200d8:	2328      	movs	r3, #40	; 0x28
 80200da:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 8;
 80200dc:	2308      	movs	r3, #8
 80200de:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 520;
 80200e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80200e4:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 280;
 80200e6:	f44f 738c 	mov.w	r3, #280	; 0x118
 80200ea:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 80200ec:	f240 230d 	movw	r3, #525	; 0x20d
 80200f0:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80200f2:	4620      	mov	r0, r4
  hltdc.Init.TotalHeigh = 288;
 80200f4:	f44f 7390 	mov.w	r3, #288	; 0x120
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80200f8:	60e6      	str	r6, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80200fa:	6126      	str	r6, [r4, #16]
  hltdc.Init.TotalHeigh = 288;
 80200fc:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80200fe:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8020102:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8020106:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 802010a:	f7e3 f8e5 	bl	80032d8 <HAL_LTDC_Init>
 802010e:	4602      	mov	r2, r0
 8020110:	b100      	cbz	r0, 8020114 <main+0x4bc>
 8020112:	e7fe      	b.n	8020112 <main+0x4ba>
  pLayerCfg.WindowY1 = 272;
 8020114:	f44f 7188 	mov.w	r1, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
 8020118:	9019      	str	r0, [sp, #100]	; 0x64
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 802011a:	2302      	movs	r3, #2
  pLayerCfg.WindowX1 = 480;
 802011c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8020120:	f44f 6680 	mov.w	r6, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 8020124:	901a      	str	r0, [sp, #104]	; 0x68
  pLayerCfg.WindowY1 = 272;
 8020126:	911c      	str	r1, [sp, #112]	; 0x70
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8020128:	931d      	str	r3, [sp, #116]	; 0x74
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 802012a:	9620      	str	r6, [sp, #128]	; 0x80
  pLayerCfg.Alpha = 255;
 802012c:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 802012e:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = 480;
 8020130:	9023      	str	r0, [sp, #140]	; 0x8c
  pLayerCfg.ImageHeight = 272;
 8020132:	9124      	str	r1, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8020134:	4620      	mov	r0, r4
 8020136:	a919      	add	r1, sp, #100	; 0x64
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8020138:	9621      	str	r6, [sp, #132]	; 0x84
  pLayerCfg.WindowY0 = 0;
 802013a:	921b      	str	r2, [sp, #108]	; 0x6c
  pLayerCfg.Alpha = 255;
 802013c:	931e      	str	r3, [sp, #120]	; 0x78
  pLayerCfg.Alpha0 = 0;
 802013e:	921f      	str	r2, [sp, #124]	; 0x7c
  pLayerCfg.FBStartAdress = 0;
 8020140:	9222      	str	r2, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 255;
 8020142:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
  pLayerCfg.Backcolor.Green = 255;
 8020146:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
  pLayerCfg.Backcolor.Red = 255;
 802014a:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 802014e:	f7e3 f92f 	bl	80033b0 <HAL_LTDC_ConfigLayer>
 8020152:	4606      	mov	r6, r0
 8020154:	b100      	cbz	r0, 8020158 <main+0x500>
 8020156:	e7fe      	b.n	8020156 <main+0x4fe>
	HAL_Delay(1);
 8020158:	4638      	mov	r0, r7
 802015a:	f7e0 ff67 	bl	800102c <HAL_Delay>
  hadc1.Instance = ADC1;
 802015e:	4c1f      	ldr	r4, [pc, #124]	; (80201dc <main+0x584>)
 8020160:	4b1f      	ldr	r3, [pc, #124]	; (80201e0 <main+0x588>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8020162:	60e6      	str	r6, [r4, #12]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8020164:	e884 0048 	stmia.w	r4, {r3, r6}
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020168:	f04f 0804 	mov.w	r8, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 802016c:	2310      	movs	r3, #16
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 802016e:	4620      	mov	r0, r4
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8020170:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8020172:	6126      	str	r6, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020174:	f8c4 8014 	str.w	r8, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8020178:	61a6      	str	r6, [r4, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 802017a:	61e7      	str	r7, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 802017c:	6227      	str	r7, [r4, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 802017e:	6266      	str	r6, [r4, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 8020180:	62a7      	str	r7, [r4, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8020182:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8020184:	6326      	str	r6, [r4, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8020186:	6366      	str	r6, [r4, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8020188:	63a6      	str	r6, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 802018a:	63e6      	str	r6, [r4, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 802018c:	f7e0 ff84 	bl	8001098 <HAL_ADC_Init>
 8020190:	b100      	cbz	r0, 8020194 <main+0x53c>
 8020192:	e7fe      	b.n	8020192 <main+0x53a>
  sConfig.Channel = ADC_CHANNEL_3;
 8020194:	4b13      	ldr	r3, [pc, #76]	; (80201e4 <main+0x58c>)
 8020196:	9319      	str	r3, [sp, #100]	; 0x64
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8020198:	2306      	movs	r3, #6
 802019a:	931a      	str	r3, [sp, #104]	; 0x68
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 802019c:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 802019e:	237f      	movs	r3, #127	; 0x7f
  sConfig.Offset = 0;
 80201a0:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80201a2:	a919      	add	r1, sp, #100	; 0x64
 80201a4:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80201a6:	931c      	str	r3, [sp, #112]	; 0x70
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80201a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80201ac:	f7e1 f894 	bl	80012d8 <HAL_ADC_ConfigChannel>
 80201b0:	b1d0      	cbz	r0, 80201e8 <main+0x590>
 80201b2:	e7fe      	b.n	80201b2 <main+0x55a>
 80201b4:	200913fc 	.word	0x200913fc
 80201b8:	4002b000 	.word	0x4002b000
 80201bc:	2009145c 	.word	0x2009145c
 80201c0:	40013000 	.word	0x40013000
 80201c4:	20090fc8 	.word	0x20090fc8
 80201c8:	40005400 	.word	0x40005400
 80201cc:	20091160 	.word	0x20091160
 80201d0:	40008000 	.word	0x40008000
 80201d4:	200911e8 	.word	0x200911e8
 80201d8:	40016800 	.word	0x40016800
 80201dc:	200912b8 	.word	0x200912b8
 80201e0:	50040000 	.word	0x50040000
 80201e4:	0c900008 	.word	0x0c900008
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80201e8:	6cab      	ldr	r3, [r5, #72]	; 0x48
  htim6.Instance = TIM6;
 80201ea:	4c35      	ldr	r4, [pc, #212]	; (80202c0 <main+0x668>)
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80201ec:	f043 0304 	orr.w	r3, r3, #4
 80201f0:	64ab      	str	r3, [r5, #72]	; 0x48
 80201f2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80201f4:	f003 0304 	and.w	r3, r3, #4
 80201f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80201fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 80201fc:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80201fe:	f043 0301 	orr.w	r3, r3, #1
 8020202:	64ab      	str	r3, [r5, #72]	; 0x48
 8020204:	6cab      	ldr	r3, [r5, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8020206:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8020208:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 802020c:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 802020e:	9312      	str	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8020210:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8020212:	9b12      	ldr	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8020214:	f7e1 fbc4 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8020218:	200b      	movs	r0, #11
 802021a:	f7e1 fbf5 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 802021e:	2001      	movs	r0, #1
 8020220:	f7e0 ff04 	bl	800102c <HAL_Delay>
	HAL_TIM_OC_Start(&htim5, TIM_CHANNEL_1);
 8020224:	2100      	movs	r1, #0
 8020226:	4827      	ldr	r0, [pc, #156]	; (80202c4 <main+0x66c>)
 8020228:	f7e6 f96e 	bl	8006508 <HAL_TIM_OC_Start>
	HAL_Delay(1);
 802022c:	2001      	movs	r0, #1
 802022e:	f7e0 fefd 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);  //ST Signal
 8020232:	2201      	movs	r2, #1
 8020234:	2100      	movs	r1, #0
 8020236:	201c      	movs	r0, #28
 8020238:	f7e1 fbb2 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 802023c:	2002      	movs	r0, #2
 802023e:	f7e0 fef5 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8020242:	201c      	movs	r0, #28
 8020244:	f7e1 fbe0 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 8020248:	2001      	movs	r0, #1
 802024a:	f7e0 feef 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim2);
 802024e:	481e      	ldr	r0, [pc, #120]	; (80202c8 <main+0x670>)
 8020250:	f7e5 fde6 	bl	8005e20 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1);
 8020254:	2001      	movs	r0, #1
 8020256:	f7e0 fee9 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(LTDC_IRQn, 1, 3);  //
 802025a:	2203      	movs	r2, #3
 802025c:	2101      	movs	r1, #1
 802025e:	205b      	movs	r0, #91	; 0x5b
 8020260:	f7e1 fb9e 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 8020264:	2002      	movs	r0, #2
 8020266:	f7e0 fee1 	bl	800102c <HAL_Delay>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 802026a:	2104      	movs	r1, #4
 802026c:	4817      	ldr	r0, [pc, #92]	; (80202cc <main+0x674>)
 802026e:	f7e6 f917 	bl	80064a0 <HAL_TIM_PWM_Start>
	TIM15->CCR2 = 50;
 8020272:	4b17      	ldr	r3, [pc, #92]	; (80202d0 <main+0x678>)
 8020274:	2232      	movs	r2, #50	; 0x32
 8020276:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1);
 8020278:	2001      	movs	r0, #1
 802027a:	f7e0 fed7 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 802027e:	2201      	movs	r2, #1
 8020280:	4814      	ldr	r0, [pc, #80]	; (80202d4 <main+0x67c>)
 8020282:	2104      	movs	r1, #4
 8020284:	f7e2 fa9c 	bl	80027c0 <HAL_GPIO_WritePin>
  htim6.Init.Prescaler = 48000;
 8020288:	4a13      	ldr	r2, [pc, #76]	; (80202d8 <main+0x680>)
 802028a:	f64b 3580 	movw	r5, #48000	; 0xbb80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802028e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = 48000;
 8020290:	e884 0024 	stmia.w	r4, {r2, r5}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8020294:	4620      	mov	r0, r4
  htim6.Init.Period = 3800;
 8020296:	f640 62d8 	movw	r2, #3800	; 0xed8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802029a:	9319      	str	r3, [sp, #100]	; 0x64
 802029c:	931a      	str	r3, [sp, #104]	; 0x68
 802029e:	931b      	str	r3, [sp, #108]	; 0x6c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80202a0:	60a3      	str	r3, [r4, #8]
  htim6.Init.Period = 3800;
 80202a2:	60e2      	str	r2, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80202a4:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80202a6:	f7e5 feef 	bl	8006088 <HAL_TIM_Base_Init>
 80202aa:	b100      	cbz	r0, 80202ae <main+0x656>
 80202ac:	e7fe      	b.n	80202ac <main+0x654>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80202ae:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80202b0:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80202b2:	a919      	add	r1, sp, #100	; 0x64
 80202b4:	4620      	mov	r0, r4
 80202b6:	f7e6 f967 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 80202ba:	4605      	mov	r5, r0
 80202bc:	b170      	cbz	r0, 80202dc <main+0x684>
 80202be:	e7fe      	b.n	80202be <main+0x666>
 80202c0:	20091344 	.word	0x20091344
 80202c4:	200910fc 	.word	0x200910fc
 80202c8:	200914c4 	.word	0x200914c4
 80202cc:	20091014 	.word	0x20091014
 80202d0:	40014000 	.word	0x40014000
 80202d4:	48001400 	.word	0x48001400
 80202d8:	40001000 	.word	0x40001000
	HAL_Delay(1);
 80202dc:	2001      	movs	r0, #1
 80202de:	f7e0 fea5 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80202e2:	2036      	movs	r0, #54	; 0x36
 80202e4:	f7e1 fb90 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 80202e8:	2001      	movs	r0, #1
 80202ea:	f7e0 fe9f 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 80202ee:	4620      	mov	r0, r4
 80202f0:	f7e5 fd96 	bl	8005e20 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 4);
 80202f4:	2204      	movs	r2, #4
 80202f6:	2101      	movs	r1, #1
 80202f8:	201c      	movs	r0, #28
 80202fa:	f7e1 fb51 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 80202fe:	2001      	movs	r0, #1
 8020300:	f7e0 fe94 	bl	800102c <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 8020304:	462a      	mov	r2, r5
 8020306:	49d0      	ldr	r1, [pc, #832]	; (8020648 <main+0x9f0>)
 8020308:	48d0      	ldr	r0, [pc, #832]	; (802064c <main+0x9f4>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 802030a:	4cd1      	ldr	r4, [pc, #836]	; (8020650 <main+0x9f8>)
 802030c:	4fd1      	ldr	r7, [pc, #836]	; (8020654 <main+0x9fc>)
 802030e:	4ed2      	ldr	r6, [pc, #840]	; (8020658 <main+0xa00>)
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 8020310:	f8df 9400 	ldr.w	r9, [pc, #1024]	; 8020714 <main+0xabc>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 8020314:	f7e3 f875 	bl	8003402 <HAL_LTDC_SetAddress>
	HAL_Delay(1);
 8020318:	2001      	movs	r0, #1
 802031a:	f7e0 fe87 	bl	800102c <HAL_Delay>
	Touch_Ini();
 802031e:	f7fd fd22 	bl	801dd66 <Touch_Ini>
	MX_SDMMC1_SD_Init();
 8020322:	f7fe fbdd 	bl	801eae0 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8020326:	f7fd fda9 	bl	801de7c <MX_FATFS_Init>
	GPIO_QSPI_Init();
 802032a:	f7fb fa7f 	bl	801b82c <GPIO_QSPI_Init>
	Single_Mode();	
 802032e:	f7fb fb77 	bl	801ba20 <Single_Mode>
	HAL_Delay(20);
 8020332:	2014      	movs	r0, #20
 8020334:	f7e0 fe7a 	bl	800102c <HAL_Delay>
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 8020338:	2103      	movs	r1, #3
 802033a:	48c8      	ldr	r0, [pc, #800]	; (802065c <main+0xa04>)
 802033c:	f7ee fc38 	bl	800ebb0 <Calibration_Load_1byte>
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 8020340:	4bc7      	ldr	r3, [pc, #796]	; (8020660 <main+0xa08>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 8020342:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 8020344:	28ff      	cmp	r0, #255	; 0xff
 8020346:	bf18      	it	ne
 8020348:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 802034a:	f04f 0103 	mov.w	r1, #3
 802034e:	48c5      	ldr	r0, [pc, #788]	; (8020664 <main+0xa0c>)
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 8020350:	bf08      	it	eq
 8020352:	701d      	strbeq	r5, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 8020354:	f7ee fc2c 	bl	800ebb0 <Calibration_Load_1byte>
 8020358:	4bc3      	ldr	r3, [pc, #780]	; (8020668 <main+0xa10>)
 802035a:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 802035c:	28ff      	cmp	r0, #255	; 0xff
 802035e:	bf0c      	ite	eq
 8020360:	2200      	moveq	r2, #0
 8020362:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 8020364:	f04f 0103 	mov.w	r1, #3
 8020368:	48c0      	ldr	r0, [pc, #768]	; (802066c <main+0xa14>)
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 802036a:	bf08      	it	eq
 802036c:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 802036e:	f7ee fc1f 	bl	800ebb0 <Calibration_Load_1byte>
 8020372:	4bbf      	ldr	r3, [pc, #764]	; (8020670 <main+0xa18>)
 8020374:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 8020376:	28ff      	cmp	r0, #255	; 0xff
 8020378:	bf0a      	itet	eq
 802037a:	781a      	ldrbeq	r2, [r3, #0]
 802037c:	7018      	strbne	r0, [r3, #0]
 802037e:	f042 0201 	orreq.w	r2, r2, #1
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 8020382:	f04f 0103 	mov.w	r1, #3
 8020386:	48bb      	ldr	r0, [pc, #748]	; (8020674 <main+0xa1c>)
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 8020388:	bf08      	it	eq
 802038a:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 802038c:	f7ee fc10 	bl	800ebb0 <Calibration_Load_1byte>
 8020390:	4bb9      	ldr	r3, [pc, #740]	; (8020678 <main+0xa20>)
 8020392:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 8020394:	28ff      	cmp	r0, #255	; 0xff
 8020396:	bf0c      	ite	eq
 8020398:	2200      	moveq	r2, #0
 802039a:	7018      	strbne	r0, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 802039c:	f04f 0103 	mov.w	r1, #3
 80203a0:	48b6      	ldr	r0, [pc, #728]	; (802067c <main+0xa24>)
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 80203a2:	bf08      	it	eq
 80203a4:	701a      	strbeq	r2, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 80203a6:	f7ee fc03 	bl	800ebb0 <Calibration_Load_1byte>
 80203aa:	4bb5      	ldr	r3, [pc, #724]	; (8020680 <main+0xa28>)
 80203ac:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 80203ae:	28ff      	cmp	r0, #255	; 0xff
 80203b0:	bf0c      	ite	eq
 80203b2:	2200      	moveq	r2, #0
 80203b4:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 80203b6:	f04f 0103 	mov.w	r1, #3
 80203ba:	48b2      	ldr	r0, [pc, #712]	; (8020684 <main+0xa2c>)
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 80203bc:	bf08      	it	eq
 80203be:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 80203c0:	f7ee fbf6 	bl	800ebb0 <Calibration_Load_1byte>
 80203c4:	4bb0      	ldr	r3, [pc, #704]	; (8020688 <main+0xa30>)
 80203c6:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 80203c8:	28ff      	cmp	r0, #255	; 0xff
 80203ca:	bf0a      	itet	eq
 80203cc:	781a      	ldrbeq	r2, [r3, #0]
 80203ce:	7018      	strbne	r0, [r3, #0]
 80203d0:	f042 0210 	orreq.w	r2, r2, #16
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 80203d4:	f04f 0103 	mov.w	r1, #3
 80203d8:	48ac      	ldr	r0, [pc, #688]	; (802068c <main+0xa34>)
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 80203da:	bf08      	it	eq
 80203dc:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 80203de:	f7ee fbe7 	bl	800ebb0 <Calibration_Load_1byte>
 80203e2:	4bab      	ldr	r3, [pc, #684]	; (8020690 <main+0xa38>)
 80203e4:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 80203e6:	28ff      	cmp	r0, #255	; 0xff
 80203e8:	bf0c      	ite	eq
 80203ea:	2200      	moveq	r2, #0
 80203ec:	7018      	strbne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 80203ee:	f04f 0101 	mov.w	r1, #1
 80203f2:	48a8      	ldr	r0, [pc, #672]	; (8020694 <main+0xa3c>)
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 80203f4:	bf08      	it	eq
 80203f6:	701a      	strbeq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 80203f8:	f7ee fbb6 	bl	800eb68 <Calibration_Load_2byte>
 80203fc:	4ca6      	ldr	r4, [pc, #664]	; (8020698 <main+0xa40>)
 80203fe:	4ba7      	ldr	r3, [pc, #668]	; (802069c <main+0xa44>)
 8020400:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 8020402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8020406:	4290      	cmp	r0, r2
 8020408:	bf0c      	ite	eq
 802040a:	2200      	moveq	r2, #0
 802040c:	8018      	strhne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 802040e:	f04f 0101 	mov.w	r1, #1
 8020412:	48a3      	ldr	r0, [pc, #652]	; (80206a0 <main+0xa48>)
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 8020414:	bf08      	it	eq
 8020416:	801a      	strheq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 8020418:	f7ee fba6 	bl	800eb68 <Calibration_Load_2byte>
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 802041c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020420:	4298      	cmp	r0, r3
 8020422:	4ba0      	ldr	r3, [pc, #640]	; (80206a4 <main+0xa4c>)
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 8020424:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 8020426:	bf06      	itte	eq
 8020428:	2200      	moveq	r2, #0
 802042a:	801a      	strheq	r2, [r3, #0]
 802042c:	8018      	strhne	r0, [r3, #0]
	Calibration_WaveLenght_Graph();
 802042e:	f7ee fc83 	bl	800ed38 <Calibration_WaveLenght_Graph>
	Calibration_Exposure_Change(exp_num);
 8020432:	4b9d      	ldr	r3, [pc, #628]	; (80206a8 <main+0xa50>)
 8020434:	4d9d      	ldr	r5, [pc, #628]	; (80206ac <main+0xa54>)
 8020436:	7818      	ldrb	r0, [r3, #0]
 8020438:	f7ee fc40 	bl	800ecbc <Calibration_Exposure_Change>
	Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 802043c:	4b88      	ldr	r3, [pc, #544]	; (8020660 <main+0xa08>)
 802043e:	489c      	ldr	r0, [pc, #624]	; (80206b0 <main+0xa58>)
 8020440:	781c      	ldrb	r4, [r3, #0]
 8020442:	4b9c      	ldr	r3, [pc, #624]	; (80206b4 <main+0xa5c>)
 8020444:	4a9c      	ldr	r2, [pc, #624]	; (80206b8 <main+0xa60>)
 8020446:	2c00      	cmp	r4, #0
 8020448:	bf18      	it	ne
 802044a:	4618      	movne	r0, r3
 802044c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020450:	f7ee fbf2 	bl	800ec38 <Calibration_Load_Pack>
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 8020454:	4899      	ldr	r0, [pc, #612]	; (80206bc <main+0xa64>)
 8020456:	f7ee fbdd 	bl	800ec14 <Calibration_Load_float>
 802045a:	4b99      	ldr	r3, [pc, #612]	; (80206c0 <main+0xa68>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 802045c:	4899      	ldr	r0, [pc, #612]	; (80206c4 <main+0xa6c>)
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 802045e:	ed83 0a00 	vstr	s0, [r3]
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 8020462:	f7ee fbd7 	bl	800ec14 <Calibration_Load_float>
 8020466:	4b98      	ldr	r3, [pc, #608]	; (80206c8 <main+0xa70>)
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 8020468:	4a98      	ldr	r2, [pc, #608]	; (80206cc <main+0xa74>)
 802046a:	4899      	ldr	r0, [pc, #612]	; (80206d0 <main+0xa78>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 802046c:	ed83 0a00 	vstr	s0, [r3]
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 8020470:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020474:	f7ee fbe0 	bl	800ec38 <Calibration_Load_Pack>
	Calibration_Load_Pack(SPECTRAL_NIGHT, 0x400, Spectral_night);
 8020478:	4a96      	ldr	r2, [pc, #600]	; (80206d4 <main+0xa7c>)
 802047a:	4897      	ldr	r0, [pc, #604]	; (80206d8 <main+0xa80>)
 802047c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020480:	f7ee fbda 	bl	800ec38 <Calibration_Load_Pack>
	Calibration_Load_Pack(X10_CIE1964, 0x400, calibratre_x_1964);
 8020484:	4a95      	ldr	r2, [pc, #596]	; (80206dc <main+0xa84>)
 8020486:	4896      	ldr	r0, [pc, #600]	; (80206e0 <main+0xa88>)
 8020488:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802048c:	f7ee fbd4 	bl	800ec38 <Calibration_Load_Pack>
	Calibration_Load_Pack(Y10_CIE1964, 0x400, calibratre_y_1964);
 8020490:	4a94      	ldr	r2, [pc, #592]	; (80206e4 <main+0xa8c>)
 8020492:	4895      	ldr	r0, [pc, #596]	; (80206e8 <main+0xa90>)
 8020494:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020498:	f7ee fbce 	bl	800ec38 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z10_CIE1964, 0x400, calibratre_z_1964);
 802049c:	4a93      	ldr	r2, [pc, #588]	; (80206ec <main+0xa94>)
 802049e:	4894      	ldr	r0, [pc, #592]	; (80206f0 <main+0xa98>)
 80204a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80204a4:	f7ee fbc8 	bl	800ec38 <Calibration_Load_Pack>
	Calibration_Load_Pack(X2_CIE1931, 0x400, calibratre_x_1931);
 80204a8:	4a92      	ldr	r2, [pc, #584]	; (80206f4 <main+0xa9c>)
 80204aa:	4893      	ldr	r0, [pc, #588]	; (80206f8 <main+0xaa0>)
 80204ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80204b0:	f7ee fbc2 	bl	800ec38 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z2_CIE1931, 0x400, calibratre_z_1931);
 80204b4:	4a91      	ldr	r2, [pc, #580]	; (80206fc <main+0xaa4>)
 80204b6:	4892      	ldr	r0, [pc, #584]	; (8020700 <main+0xaa8>)
 80204b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80204bc:	f7ee fbbc 	bl	800ec38 <Calibration_Load_Pack>
 80204c0:	4b90      	ldr	r3, [pc, #576]	; (8020704 <main+0xaac>)
 80204c2:	9303      	str	r3, [sp, #12]
 80204c4:	4b90      	ldr	r3, [pc, #576]	; (8020708 <main+0xab0>)
 80204c6:	9305      	str	r3, [sp, #20]
 80204c8:	4b90      	ldr	r3, [pc, #576]	; (802070c <main+0xab4>)
 80204ca:	9304      	str	r3, [sp, #16]
 80204cc:	46aa      	mov	sl, r5
 80204ce:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 80204d2:	f04f 0800 	mov.w	r8, #0
 80204d6:	2100      	movs	r1, #0
 80204d8:	4620      	mov	r0, r4
 80204da:	f7ee fb45 	bl	800eb68 <Calibration_Load_2byte>
 80204de:	ee07 0a90 	vmov	s15, r0
 80204e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80204e6:	f504 4b90 	add.w	fp, r4, #18432	; 0x4800
 80204ea:	ee17 0a90 	vmov	r0, s15
 80204ee:	f7e0 f843 	bl	8000578 <__aeabi_f2d>
 80204f2:	4642      	mov	r2, r8
 80204f4:	464b      	mov	r3, r9
 80204f6:	f7e0 f9bd 	bl	8000874 <__aeabi_ddiv>
 80204fa:	a351      	add	r3, pc, #324	; (adr r3, 8020640 <main+0x9e8>)
 80204fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020500:	f7df fedc 	bl	80002bc <__adddf3>
 8020504:	f7e0 fb84 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 8020508:	2101      	movs	r1, #1
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 802050a:	f8ca 0000 	str.w	r0, [sl]
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 802050e:	4620      	mov	r0, r4
 8020510:	f7ee fb2a 	bl	800eb68 <Calibration_Load_2byte>
 8020514:	ee07 0a90 	vmov	s15, r0
 8020518:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802051c:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8020520:	ee17 0a90 	vmov	r0, s15
 8020524:	f7e0 f828 	bl	8000578 <__aeabi_f2d>
 8020528:	4642      	mov	r2, r8
 802052a:	464b      	mov	r3, r9
 802052c:	f7e0 f9a2 	bl	8000874 <__aeabi_ddiv>
 8020530:	a343      	add	r3, pc, #268	; (adr r3, 8020640 <main+0x9e8>)
 8020532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020536:	f7df fec1 	bl	80002bc <__adddf3>
 802053a:	f7e0 fb69 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 802053e:	2102      	movs	r1, #2
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 8020540:	f8ca 0004 	str.w	r0, [sl, #4]
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 8020544:	4620      	mov	r0, r4
 8020546:	f7ee fb0f 	bl	800eb68 <Calibration_Load_2byte>
 802054a:	ee07 0a90 	vmov	s15, r0
 802054e:	eef8 7a67 	vcvt.f32.u32	s15, s15
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 8020552:	ed9f 8a6f 	vldr	s16, [pc, #444]	; 8020710 <main+0xab8>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 8020556:	ee17 0a90 	vmov	r0, s15
 802055a:	f7e0 f80d 	bl	8000578 <__aeabi_f2d>
 802055e:	4642      	mov	r2, r8
 8020560:	464b      	mov	r3, r9
 8020562:	f7e0 f987 	bl	8000874 <__aeabi_ddiv>
 8020566:	a336      	add	r3, pc, #216	; (adr r3, 8020640 <main+0x9e8>)
 8020568:	e9d3 2300 	ldrd	r2, r3, [r3]
 802056c:	f7df fea6 	bl	80002bc <__adddf3>
 8020570:	f7e0 fb4e 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 8020574:	2103      	movs	r1, #3
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 8020576:	f8ca 0008 	str.w	r0, [sl, #8]
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 802057a:	4620      	mov	r0, r4
 802057c:	f7ee faf4 	bl	800eb68 <Calibration_Load_2byte>
 8020580:	ee07 0a90 	vmov	s15, r0
 8020584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020588:	f10a 0a10 	add.w	sl, sl, #16
 802058c:	ee17 0a90 	vmov	r0, s15
 8020590:	f7df fff2 	bl	8000578 <__aeabi_f2d>
 8020594:	4642      	mov	r2, r8
 8020596:	464b      	mov	r3, r9
 8020598:	f7e0 f96c 	bl	8000874 <__aeabi_ddiv>
 802059c:	a328      	add	r3, pc, #160	; (adr r3, 8020640 <main+0x9e8>)
 802059e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80205a2:	f7df fe8b 	bl	80002bc <__adddf3>
 80205a6:	f7e0 fb33 	bl	8000c10 <__aeabi_d2f>
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 80205aa:	2100      	movs	r1, #0
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 80205ac:	f84a 0c04 	str.w	r0, [sl, #-4]
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 80205b0:	4658      	mov	r0, fp
 80205b2:	f7ee fad9 	bl	800eb68 <Calibration_Load_2byte>
 80205b6:	ee07 0a90 	vmov	s15, r0
 80205ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80205be:	9b03      	ldr	r3, [sp, #12]
 80205c0:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 80205c4:	2101      	movs	r1, #1
 80205c6:	4658      	mov	r0, fp
 80205c8:	3710      	adds	r7, #16
 80205ca:	3610      	adds	r6, #16
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 80205cc:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 80205d0:	f7ee faca 	bl	800eb68 <Calibration_Load_2byte>
 80205d4:	ee07 0a90 	vmov	s15, r0
 80205d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80205dc:	9b03      	ldr	r3, [sp, #12]
 80205de:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 80205e2:	2102      	movs	r1, #2
 80205e4:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 80205e6:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 80205ea:	f7ee fabd 	bl	800eb68 <Calibration_Load_2byte>
 80205ee:	ee07 0a90 	vmov	s15, r0
 80205f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80205f6:	9b03      	ldr	r3, [sp, #12]
 80205f8:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 80205fc:	2103      	movs	r1, #3
 80205fe:	4658      	mov	r0, fp
 8020600:	f504 4ba0 	add.w	fp, r4, #20480	; 0x5000
 8020604:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 8020608:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 802060c:	f7ee faac 	bl	800eb68 <Calibration_Load_2byte>
 8020610:	ee07 0a90 	vmov	s15, r0
 8020614:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020618:	9b03      	ldr	r3, [sp, #12]
 802061a:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 802061e:	2100      	movs	r1, #0
 8020620:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 8020622:	edc3 7a03 	vstr	s15, [r3, #12]
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 8020626:	f7ee fa9f 	bl	800eb68 <Calibration_Load_2byte>
 802062a:	ee07 0a90 	vmov	s15, r0
 802062e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020632:	9b05      	ldr	r3, [sp, #20]
 8020634:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 8020638:	2101      	movs	r1, #1
 802063a:	e06d      	b.n	8020718 <main+0xac0>
 802063c:	f3af 8000 	nop.w
 8020640:	00000000 	.word	0x00000000
 8020644:	4072c000 	.word	0x4072c000
 8020648:	2000a5e4 	.word	0x2000a5e4
 802064c:	200911e8 	.word	0x200911e8
 8020650:	20091054 	.word	0x20091054
 8020654:	2004a1e4 	.word	0x2004a1e4
 8020658:	2004b1e4 	.word	0x2004b1e4
 802065c:	0812b030 	.word	0x0812b030
 8020660:	20000a48 	.word	0x20000a48
 8020664:	0812b040 	.word	0x0812b040
 8020668:	2000527a 	.word	0x2000527a
 802066c:	0812b048 	.word	0x0812b048
 8020670:	20005277 	.word	0x20005277
 8020674:	0812b050 	.word	0x0812b050
 8020678:	20005278 	.word	0x20005278
 802067c:	0812b058 	.word	0x0812b058
 8020680:	2000527b 	.word	0x2000527b
 8020684:	0812b060 	.word	0x0812b060
 8020688:	2008c319 	.word	0x2008c319
 802068c:	0812b068 	.word	0x0812b068
 8020690:	2008c31a 	.word	0x2008c31a
 8020694:	0812b038 	.word	0x0812b038
 8020698:	200910e8 	.word	0x200910e8
 802069c:	2000527e 	.word	0x2000527e
 80206a0:	0812b020 	.word	0x0812b020
 80206a4:	200052a6 	.word	0x200052a6
 80206a8:	2008be5a 	.word	0x2008be5a
 80206ac:	200501ec 	.word	0x200501ec
 80206b0:	08101838 	.word	0x08101838
 80206b4:	08100838 	.word	0x08100838
 80206b8:	2004d1e8 	.word	0x2004d1e8
 80206bc:	08102838 	.word	0x08102838
 80206c0:	200055cc 	.word	0x200055cc
 80206c4:	0810283c 	.word	0x0810283c
 80206c8:	200055d0 	.word	0x200055d0
 80206cc:	2004e1e8 	.word	0x2004e1e8
 80206d0:	08102840 	.word	0x08102840
 80206d4:	2004f1e8 	.word	0x2004f1e8
 80206d8:	08103844 	.word	0x08103844
 80206dc:	20086db8 	.word	0x20086db8
 80206e0:	08107840 	.word	0x08107840
 80206e4:	20087db8 	.word	0x20087db8
 80206e8:	08108840 	.word	0x08108840
 80206ec:	20089db8 	.word	0x20089db8
 80206f0:	08109840 	.word	0x08109840
 80206f4:	20085db8 	.word	0x20085db8
 80206f8:	08105840 	.word	0x08105840
 80206fc:	20088db8 	.word	0x20088db8
 8020700:	08106840 	.word	0x08106840
 8020704:	200055e0 	.word	0x200055e0
 8020708:	200065e0 	.word	0x200065e0
 802070c:	2004c1e4 	.word	0x2004c1e4
 8020710:	447a0000 	.word	0x447a0000
 8020714:	40590000 	.word	0x40590000
 8020718:	4658      	mov	r0, fp
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 802071a:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 802071e:	f7ee fa23 	bl	800eb68 <Calibration_Load_2byte>
 8020722:	ee07 0a90 	vmov	s15, r0
 8020726:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802072a:	9b05      	ldr	r3, [sp, #20]
 802072c:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 8020730:	2102      	movs	r1, #2
 8020732:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 8020734:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 8020738:	f7ee fa16 	bl	800eb68 <Calibration_Load_2byte>
 802073c:	ee07 0a90 	vmov	s15, r0
 8020740:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020744:	9b05      	ldr	r3, [sp, #20]
 8020746:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 802074a:	2103      	movs	r1, #3
 802074c:	4658      	mov	r0, fp
 802074e:	f504 4b28 	add.w	fp, r4, #43008	; 0xa800
 8020752:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 8020756:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 802075a:	f7ee fa05 	bl	800eb68 <Calibration_Load_2byte>
 802075e:	ee07 0a90 	vmov	s15, r0
 8020762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020766:	9b05      	ldr	r3, [sp, #20]
 8020768:	eec7 7a08 	vdiv.f32	s15, s14, s16
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 802076c:	2100      	movs	r1, #0
 802076e:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 8020770:	edc3 7a03 	vstr	s15, [r3, #12]
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 8020774:	f7ee f9f8 	bl	800eb68 <Calibration_Load_2byte>
 8020778:	ee07 0a90 	vmov	s15, r0
 802077c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020780:	ee17 0a90 	vmov	r0, s15
 8020784:	f7df fef8 	bl	8000578 <__aeabi_f2d>
 8020788:	4642      	mov	r2, r8
 802078a:	464b      	mov	r3, r9
 802078c:	f7e0 f872 	bl	8000874 <__aeabi_ddiv>
 8020790:	2200      	movs	r2, #0
 8020792:	4bda      	ldr	r3, [pc, #872]	; (8020afc <main+0xea4>)
 8020794:	f7df fd90 	bl	80002b8 <__aeabi_dsub>
 8020798:	f7e0 fa3a 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 802079c:	2101      	movs	r1, #1
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 802079e:	f847 0c10 	str.w	r0, [r7, #-16]
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 80207a2:	4658      	mov	r0, fp
 80207a4:	f7ee f9e0 	bl	800eb68 <Calibration_Load_2byte>
 80207a8:	ee07 0a90 	vmov	s15, r0
 80207ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80207b0:	ee17 0a90 	vmov	r0, s15
 80207b4:	f7df fee0 	bl	8000578 <__aeabi_f2d>
 80207b8:	4642      	mov	r2, r8
 80207ba:	464b      	mov	r3, r9
 80207bc:	f7e0 f85a 	bl	8000874 <__aeabi_ddiv>
 80207c0:	2200      	movs	r2, #0
 80207c2:	4bce      	ldr	r3, [pc, #824]	; (8020afc <main+0xea4>)
 80207c4:	f7df fd78 	bl	80002b8 <__aeabi_dsub>
 80207c8:	f7e0 fa22 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 80207cc:	2102      	movs	r1, #2
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 80207ce:	f847 0c0c 	str.w	r0, [r7, #-12]
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 80207d2:	4658      	mov	r0, fp
 80207d4:	f7ee f9c8 	bl	800eb68 <Calibration_Load_2byte>
 80207d8:	ee07 0a90 	vmov	s15, r0
 80207dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80207e0:	ee17 0a90 	vmov	r0, s15
 80207e4:	f7df fec8 	bl	8000578 <__aeabi_f2d>
 80207e8:	4642      	mov	r2, r8
 80207ea:	464b      	mov	r3, r9
 80207ec:	f7e0 f842 	bl	8000874 <__aeabi_ddiv>
 80207f0:	2200      	movs	r2, #0
 80207f2:	4bc2      	ldr	r3, [pc, #776]	; (8020afc <main+0xea4>)
 80207f4:	f7df fd60 	bl	80002b8 <__aeabi_dsub>
 80207f8:	f7e0 fa0a 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 80207fc:	2103      	movs	r1, #3
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 80207fe:	f847 0c08 	str.w	r0, [r7, #-8]
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 8020802:	4658      	mov	r0, fp
 8020804:	f7ee f9b0 	bl	800eb68 <Calibration_Load_2byte>
 8020808:	ee07 0a90 	vmov	s15, r0
 802080c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020810:	f504 4b30 	add.w	fp, r4, #45056	; 0xb000
 8020814:	ee17 0a90 	vmov	r0, s15
 8020818:	f7df feae 	bl	8000578 <__aeabi_f2d>
 802081c:	4642      	mov	r2, r8
 802081e:	464b      	mov	r3, r9
 8020820:	f7e0 f828 	bl	8000874 <__aeabi_ddiv>
 8020824:	2200      	movs	r2, #0
 8020826:	4bb5      	ldr	r3, [pc, #724]	; (8020afc <main+0xea4>)
 8020828:	f7df fd46 	bl	80002b8 <__aeabi_dsub>
 802082c:	f7e0 f9f0 	bl	8000c10 <__aeabi_d2f>
 8020830:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8020834:	f847 0c04 	str.w	r0, [r7, #-4]
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 8020838:	2100      	movs	r1, #0
 802083a:	4658      	mov	r0, fp
 802083c:	f7ee f994 	bl	800eb68 <Calibration_Load_2byte>
 8020840:	ee07 0a90 	vmov	s15, r0
 8020844:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020848:	ee17 0a90 	vmov	r0, s15
 802084c:	f7df fe94 	bl	8000578 <__aeabi_f2d>
 8020850:	4642      	mov	r2, r8
 8020852:	464b      	mov	r3, r9
 8020854:	f7e0 f80e 	bl	8000874 <__aeabi_ddiv>
 8020858:	2200      	movs	r2, #0
 802085a:	4ba8      	ldr	r3, [pc, #672]	; (8020afc <main+0xea4>)
 802085c:	f7df fd2c 	bl	80002b8 <__aeabi_dsub>
 8020860:	f7e0 f9d6 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 8020864:	2101      	movs	r1, #1
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 8020866:	f846 0c10 	str.w	r0, [r6, #-16]
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 802086a:	4658      	mov	r0, fp
 802086c:	f7ee f97c 	bl	800eb68 <Calibration_Load_2byte>
 8020870:	ee07 0a90 	vmov	s15, r0
 8020874:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020878:	ee17 0a90 	vmov	r0, s15
 802087c:	f7df fe7c 	bl	8000578 <__aeabi_f2d>
 8020880:	4642      	mov	r2, r8
 8020882:	464b      	mov	r3, r9
 8020884:	f7df fff6 	bl	8000874 <__aeabi_ddiv>
 8020888:	2200      	movs	r2, #0
 802088a:	4b9c      	ldr	r3, [pc, #624]	; (8020afc <main+0xea4>)
 802088c:	f7df fd14 	bl	80002b8 <__aeabi_dsub>
 8020890:	f7e0 f9be 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 8020894:	2102      	movs	r1, #2
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 8020896:	f846 0c0c 	str.w	r0, [r6, #-12]
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 802089a:	4658      	mov	r0, fp
 802089c:	f7ee f964 	bl	800eb68 <Calibration_Load_2byte>
 80208a0:	ee07 0a90 	vmov	s15, r0
 80208a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80208a8:	ee17 0a90 	vmov	r0, s15
 80208ac:	f7df fe64 	bl	8000578 <__aeabi_f2d>
 80208b0:	4642      	mov	r2, r8
 80208b2:	464b      	mov	r3, r9
 80208b4:	f7df ffde 	bl	8000874 <__aeabi_ddiv>
 80208b8:	2200      	movs	r2, #0
 80208ba:	4b90      	ldr	r3, [pc, #576]	; (8020afc <main+0xea4>)
 80208bc:	f7df fcfc 	bl	80002b8 <__aeabi_dsub>
 80208c0:	f7e0 f9a6 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 80208c4:	2103      	movs	r1, #3
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 80208c6:	f846 0c08 	str.w	r0, [r6, #-8]
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 80208ca:	4658      	mov	r0, fp
 80208cc:	f7ee f94c 	bl	800eb68 <Calibration_Load_2byte>
 80208d0:	ee07 0a90 	vmov	s15, r0
 80208d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80208d8:	f504 4b38 	add.w	fp, r4, #47104	; 0xb800
 80208dc:	ee17 0a90 	vmov	r0, s15
 80208e0:	f7df fe4a 	bl	8000578 <__aeabi_f2d>
 80208e4:	4642      	mov	r2, r8
 80208e6:	464b      	mov	r3, r9
 80208e8:	f7df ffc4 	bl	8000874 <__aeabi_ddiv>
 80208ec:	2200      	movs	r2, #0
 80208ee:	4b83      	ldr	r3, [pc, #524]	; (8020afc <main+0xea4>)
 80208f0:	f7df fce2 	bl	80002b8 <__aeabi_dsub>
 80208f4:	f7e0 f98c 	bl	8000c10 <__aeabi_d2f>
 80208f8:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 80208fc:	f846 0c04 	str.w	r0, [r6, #-4]
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 8020900:	2100      	movs	r1, #0
 8020902:	4658      	mov	r0, fp
 8020904:	f7ee f930 	bl	800eb68 <Calibration_Load_2byte>
 8020908:	ee07 0a90 	vmov	s15, r0
 802090c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020910:	3408      	adds	r4, #8
 8020912:	ee17 0a90 	vmov	r0, s15
 8020916:	f7df fe2f 	bl	8000578 <__aeabi_f2d>
 802091a:	4642      	mov	r2, r8
 802091c:	464b      	mov	r3, r9
 802091e:	f7df ffa9 	bl	8000874 <__aeabi_ddiv>
 8020922:	2200      	movs	r2, #0
 8020924:	4b75      	ldr	r3, [pc, #468]	; (8020afc <main+0xea4>)
 8020926:	f7df fcc7 	bl	80002b8 <__aeabi_dsub>
 802092a:	f7e0 f971 	bl	8000c10 <__aeabi_d2f>
 802092e:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 8020930:	2101      	movs	r1, #1
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 8020932:	6018      	str	r0, [r3, #0]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 8020934:	4658      	mov	r0, fp
 8020936:	f7ee f917 	bl	800eb68 <Calibration_Load_2byte>
 802093a:	ee07 0a90 	vmov	s15, r0
 802093e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020942:	ee17 0a90 	vmov	r0, s15
 8020946:	f7df fe17 	bl	8000578 <__aeabi_f2d>
 802094a:	4642      	mov	r2, r8
 802094c:	464b      	mov	r3, r9
 802094e:	f7df ff91 	bl	8000874 <__aeabi_ddiv>
 8020952:	2200      	movs	r2, #0
 8020954:	4b69      	ldr	r3, [pc, #420]	; (8020afc <main+0xea4>)
 8020956:	f7df fcaf 	bl	80002b8 <__aeabi_dsub>
 802095a:	f7e0 f959 	bl	8000c10 <__aeabi_d2f>
 802095e:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 8020960:	2102      	movs	r1, #2
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 8020962:	6058      	str	r0, [r3, #4]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 8020964:	4658      	mov	r0, fp
 8020966:	f7ee f8ff 	bl	800eb68 <Calibration_Load_2byte>
 802096a:	ee07 0a90 	vmov	s15, r0
 802096e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020972:	ee17 0a90 	vmov	r0, s15
 8020976:	f7df fdff 	bl	8000578 <__aeabi_f2d>
 802097a:	4642      	mov	r2, r8
 802097c:	464b      	mov	r3, r9
 802097e:	f7df ff79 	bl	8000874 <__aeabi_ddiv>
 8020982:	2200      	movs	r2, #0
 8020984:	4b5d      	ldr	r3, [pc, #372]	; (8020afc <main+0xea4>)
 8020986:	f7df fc97 	bl	80002b8 <__aeabi_dsub>
 802098a:	f7e0 f941 	bl	8000c10 <__aeabi_d2f>
 802098e:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 8020990:	2103      	movs	r1, #3
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 8020992:	6098      	str	r0, [r3, #8]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 8020994:	4658      	mov	r0, fp
 8020996:	f7ee f8e7 	bl	800eb68 <Calibration_Load_2byte>
 802099a:	ee07 0a90 	vmov	s15, r0
 802099e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80209a2:	ee17 0a90 	vmov	r0, s15
 80209a6:	f7df fde7 	bl	8000578 <__aeabi_f2d>
 80209aa:	4642      	mov	r2, r8
 80209ac:	464b      	mov	r3, r9
 80209ae:	f7df ff61 	bl	8000874 <__aeabi_ddiv>
 80209b2:	4b52      	ldr	r3, [pc, #328]	; (8020afc <main+0xea4>)
 80209b4:	2200      	movs	r2, #0
 80209b6:	f7df fc7f 	bl	80002b8 <__aeabi_dsub>
 80209ba:	f7e0 f929 	bl	8000c10 <__aeabi_d2f>
 80209be:	9b04      	ldr	r3, [sp, #16]
 80209c0:	60d8      	str	r0, [r3, #12]
 80209c2:	9b03      	ldr	r3, [sp, #12]
 80209c4:	3310      	adds	r3, #16
 80209c6:	9303      	str	r3, [sp, #12]
 80209c8:	9b05      	ldr	r3, [sp, #20]
 80209ca:	3310      	adds	r3, #16
 80209cc:	9305      	str	r3, [sp, #20]
 80209ce:	9b04      	ldr	r3, [sp, #16]
 80209d0:	3310      	adds	r3, #16
 80209d2:	9304      	str	r3, [sp, #16]
	for(uint16_t i = 0; i < 2*1024; i=i+8){
 80209d4:	4b4a      	ldr	r3, [pc, #296]	; (8020b00 <main+0xea8>)
 80209d6:	429c      	cmp	r4, r3
 80209d8:	f47f ad7d 	bne.w	80204d6 <main+0x87e>
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 80209dc:	2100      	movs	r1, #0
 80209de:	4849      	ldr	r0, [pc, #292]	; (8020b04 <main+0xeac>)
 80209e0:	f7ee f8c2 	bl	800eb68 <Calibration_Load_2byte>
 80209e4:	4b48      	ldr	r3, [pc, #288]	; (8020b08 <main+0xeb0>)
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 80209e6:	2101      	movs	r1, #1
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 80209e8:	8018      	strh	r0, [r3, #0]
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 80209ea:	4846      	ldr	r0, [pc, #280]	; (8020b04 <main+0xeac>)
 80209ec:	f7ee f8bc 	bl	800eb68 <Calibration_Load_2byte>
 80209f0:	4b46      	ldr	r3, [pc, #280]	; (8020b0c <main+0xeb4>)
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 80209f2:	2100      	movs	r1, #0
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 80209f4:	8018      	strh	r0, [r3, #0]
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 80209f6:	4846      	ldr	r0, [pc, #280]	; (8020b10 <main+0xeb8>)
 80209f8:	f7ee f8b6 	bl	800eb68 <Calibration_Load_2byte>
 80209fc:	4b45      	ldr	r3, [pc, #276]	; (8020b14 <main+0xebc>)
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 80209fe:	2100      	movs	r1, #0
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 8020a00:	8018      	strh	r0, [r3, #0]
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 8020a02:	4845      	ldr	r0, [pc, #276]	; (8020b18 <main+0xec0>)
 8020a04:	f7ee f8b0 	bl	800eb68 <Calibration_Load_2byte>
 8020a08:	4b44      	ldr	r3, [pc, #272]	; (8020b1c <main+0xec4>)
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 8020a0a:	2101      	movs	r1, #1
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 8020a0c:	8018      	strh	r0, [r3, #0]
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 8020a0e:	4842      	ldr	r0, [pc, #264]	; (8020b18 <main+0xec0>)
 8020a10:	f7ee f8aa 	bl	800eb68 <Calibration_Load_2byte>
 8020a14:	4b42      	ldr	r3, [pc, #264]	; (8020b20 <main+0xec8>)
 8020a16:	4943      	ldr	r1, [pc, #268]	; (8020b24 <main+0xecc>)
 8020a18:	8018      	strh	r0, [r3, #0]
 8020a1a:	4b43      	ldr	r3, [pc, #268]	; (8020b28 <main+0xed0>)
 8020a1c:	4a43      	ldr	r2, [pc, #268]	; (8020b2c <main+0xed4>)
 8020a1e:	f8b3 e000 	ldrh.w	lr, [r3]
 8020a22:	4b43      	ldr	r3, [pc, #268]	; (8020b30 <main+0xed8>)
 8020a24:	8810      	ldrh	r0, [r2, #0]
 8020a26:	f8b3 8000 	ldrh.w	r8, [r3]
 8020a2a:	880e      	ldrh	r6, [r1, #0]
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 8020a2c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8020b34 <main+0xedc>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 8020a30:	eddf 6a41 	vldr	s13, [pc, #260]	; 8020b38 <main+0xee0>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 8020a34:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8020b3c <main+0xee4>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 8020a38:	eddf 5a41 	vldr	s11, [pc, #260]	; 8020b40 <main+0xee8>
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 8020a3c:	2300      	movs	r3, #0
 8020a3e:	461c      	mov	r4, r3
 8020a40:	461f      	mov	r7, r3
 8020a42:	469c      	mov	ip, r3
 8020a44:	4699      	mov	r9, r3
 8020a46:	468a      	mov	sl, r1
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 8020a48:	ecf5 7a01 	vldmia	r5!, {s15}
 8020a4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a54:	b299      	uxth	r1, r3
 8020a56:	d807      	bhi.n	8020a68 <main+0xe10>
 8020a58:	ed95 5a00 	vldr	s10, [r5]
 8020a5c:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8020a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a64:	f280 80f3 	bge.w	8020c4e <main+0xff6>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 8020a68:	eef4 7ae6 	vcmpe.f32	s15, s13
 8020a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a70:	d807      	bhi.n	8020a82 <main+0xe2a>
 8020a72:	ed95 5a00 	vldr	s10, [r5]
 8020a76:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8020a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a7e:	f280 80ea 	bge.w	8020c56 <main+0xffe>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 8020a82:	eef4 7ac6 	vcmpe.f32	s15, s12
 8020a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a8a:	d807      	bhi.n	8020a9c <main+0xe44>
 8020a8c:	ed95 5a00 	vldr	s10, [r5]
 8020a90:	eeb4 5ac6 	vcmpe.f32	s10, s12
 8020a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a98:	f280 80e1 	bge.w	8020c5e <main+0x1006>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 8020a9c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8020aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020aa4:	d808      	bhi.n	8020ab8 <main+0xe60>
 8020aa6:	edd5 7a00 	vldr	s15, [r5]
			PARGraph_IR = i;
 8020aaa:	eef4 7a65 	vcmp.f32	s15, s11
 8020aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ab2:	bfa4      	itt	ge
 8020ab4:	4608      	movge	r0, r1
 8020ab6:	2401      	movge	r4, #1
 8020ab8:	3301      	adds	r3, #1
	for(uint16_t i = 0; i < 1024; i++){
 8020aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020abe:	d1c3      	bne.n	8020a48 <main+0xdf0>
 8020ac0:	f1b9 0f00 	cmp.w	r9, #0
 8020ac4:	d002      	beq.n	8020acc <main+0xe74>
 8020ac6:	4b1a      	ldr	r3, [pc, #104]	; (8020b30 <main+0xed8>)
 8020ac8:	f8a3 8000 	strh.w	r8, [r3]
 8020acc:	f1bc 0f00 	cmp.w	ip, #0
 8020ad0:	d002      	beq.n	8020ad8 <main+0xe80>
 8020ad2:	4b15      	ldr	r3, [pc, #84]	; (8020b28 <main+0xed0>)
 8020ad4:	f8a3 e000 	strh.w	lr, [r3]
 8020ad8:	b10f      	cbz	r7, 8020ade <main+0xe86>
 8020ada:	f8aa 6000 	strh.w	r6, [sl]
 8020ade:	b104      	cbz	r4, 8020ae2 <main+0xe8a>
 8020ae0:	8010      	strh	r0, [r2, #0]
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 8020ae2:	4b18      	ldr	r3, [pc, #96]	; (8020b44 <main+0xeec>)
 8020ae4:	4a18      	ldr	r2, [pc, #96]	; (8020b48 <main+0xef0>)
 8020ae6:	edd3 7a00 	vldr	s15, [r3]
 8020aea:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8020b4c <main+0xef4>
 8020aee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020af2:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 8020af6:	edd3 7aff 	vldr	s15, [r3, #1020]	; 0x3fc
 8020afa:	e029      	b.n	8020b50 <main+0xef8>
 8020afc:	40490000 	.word	0x40490000
 8020b00:	08100800 	.word	0x08100800
 8020b04:	0812a048 	.word	0x0812a048
 8020b08:	20090f70 	.word	0x20090f70
 8020b0c:	20090f84 	.word	0x20090f84
 8020b10:	0812a04c 	.word	0x0812a04c
 8020b14:	20091290 	.word	0x20091290
 8020b18:	0812a040 	.word	0x0812a040
 8020b1c:	20090f74 	.word	0x20090f74
 8020b20:	20091338 	.word	0x20091338
 8020b24:	20091550 	.word	0x20091550
 8020b28:	200913ec 	.word	0x200913ec
 8020b2c:	20091328 	.word	0x20091328
 8020b30:	2009132a 	.word	0x2009132a
 8020b34:	43c80000 	.word	0x43c80000
 8020b38:	43fa0000 	.word	0x43fa0000
 8020b3c:	44160000 	.word	0x44160000
 8020b40:	442f0000 	.word	0x442f0000
 8020b44:	200501ec 	.word	0x200501ec
 8020b48:	200511ec 	.word	0x200511ec
 8020b4c:	200055dc 	.word	0x200055dc
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 8020b50:	8011      	strh	r1, [r2, #0]
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 8020b52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020b56:	ee17 1a90 	vmov	r1, s15
 8020b5a:	8051      	strh	r1, [r2, #2]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 8020b5c:	f203 71fc 	addw	r1, r3, #2044	; 0x7fc
 8020b60:	edd1 7a00 	vldr	s15, [r1]
 8020b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 8020b68:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 8020b6c:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 8020b70:	edd3 7a00 	vldr	s15, [r3]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 8020b74:	8091      	strh	r1, [r2, #4]
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 8020b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020b7a:	ee17 3a90 	vmov	r3, s15
 8020b7e:	80d3      	strh	r3, [r2, #6]
	if(Mode_EL == 0){
 8020b80:	4b67      	ldr	r3, [pc, #412]	; (8020d20 <main+0x10c8>)
 8020b82:	781a      	ldrb	r2, [r3, #0]
 8020b84:	4b67      	ldr	r3, [pc, #412]	; (8020d24 <main+0x10cc>)
 8020b86:	2a00      	cmp	r2, #0
 8020b88:	d16c      	bne.n	8020c64 <main+0x100c>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 8020b8a:	4a67      	ldr	r2, [pc, #412]	; (8020d28 <main+0x10d0>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 8020b8c:	ed93 0a00 	vldr	s0, [r3]
 8020b90:	edd2 0a00 	vldr	s1, [r2]
 8020b94:	f7fb f894 	bl	801bcc0 <Rabs_calc_Factor2_Settings_change>
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&hlpuart1);} else{HAL_UART_MspInit(&hlpuart1);}
 8020b98:	4b64      	ldr	r3, [pc, #400]	; (8020d2c <main+0x10d4>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 8020b9a:	ed89 0a00 	vstr	s0, [r9]
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&hlpuart1);} else{HAL_UART_MspInit(&hlpuart1);}
 8020b9e:	781b      	ldrb	r3, [r3, #0]
 8020ba0:	4863      	ldr	r0, [pc, #396]	; (8020d30 <main+0x10d8>)
 8020ba2:	2b00      	cmp	r3, #0
 8020ba4:	d160      	bne.n	8020c68 <main+0x1010>
 8020ba6:	f000 fc1d 	bl	80213e4 <HAL_UART_MspDeInit>
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 8020baa:	2103      	movs	r1, #3
 8020bac:	4861      	ldr	r0, [pc, #388]	; (8020d34 <main+0x10dc>)
 8020bae:	4c62      	ldr	r4, [pc, #392]	; (8020d38 <main+0x10e0>)
 8020bb0:	f7ed fffe 	bl	800ebb0 <Calibration_Load_1byte>
 8020bb4:	7020      	strb	r0, [r4, #0]
	Calculate_Data();
 8020bb6:	f7fe f803 	bl	801ebc0 <Calculate_Data>
	Get_Battery_Level();
 8020bba:	f7fe f935 	bl	801ee28 <Get_Battery_Level>
	HAL_Delay(1);
 8020bbe:	2001      	movs	r0, #1
 8020bc0:	f7e0 fa34 	bl	800102c <HAL_Delay>
	Image_load(TKA_LOGO_BMP, TKA_LOGO_BMP_SIZEX*TKA_LOGO_BMP_SIZEY);
 8020bc4:	f64b 61e6 	movw	r1, #48870	; 0xbee6
 8020bc8:	2000      	movs	r0, #0
 8020bca:	f7fb f849 	bl	801bc60 <Image_load>
	CRC_STATUS = CRC_Check(FLASH_DATA_START, FLASH_DATA_SIZE, FLASH_CRC_ADDR);
 8020bce:	4a5b      	ldr	r2, [pc, #364]	; (8020d3c <main+0x10e4>)
 8020bd0:	f245 410a 	movw	r1, #21514	; 0x540a
 8020bd4:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 8020bd8:	f7eb f904 	bl	800bde4 <CRC_Check>
 8020bdc:	4b58      	ldr	r3, [pc, #352]	; (8020d40 <main+0x10e8>)
 8020bde:	46a0      	mov	r8, r4
 8020be0:	7018      	strb	r0, [r3, #0]
	if(CRC_STATUS == CRC_OK)
 8020be2:	2800      	cmp	r0, #0
 8020be4:	d143      	bne.n	8020c6e <main+0x1016>
		GUI_Title_Screen();
 8020be6:	f7ee f9c3 	bl	800ef70 <GUI_Title_Screen>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8020bea:	4c56      	ldr	r4, [pc, #344]	; (8020d44 <main+0x10ec>)
		HAL_Delay(2000);	
 8020bec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8020bf0:	f7e0 fa1c 	bl	800102c <HAL_Delay>
		usb_receive_processing();
 8020bf4:	f7fe fb5a 	bl	801f2ac <usb_receive_processing>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8020bf8:	7823      	ldrb	r3, [r4, #0]
 8020bfa:	07d8      	lsls	r0, r3, #31
 8020bfc:	d53c      	bpl.n	8020c78 <main+0x1020>
 8020bfe:	4b52      	ldr	r3, [pc, #328]	; (8020d48 <main+0x10f0>)
 8020c00:	4852      	ldr	r0, [pc, #328]	; (8020d4c <main+0x10f4>)
 8020c02:	781b      	ldrb	r3, [r3, #0]
 8020c04:	f013 0f01 	tst.w	r3, #1
 8020c08:	bf18      	it	ne
 8020c0a:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8020c0e:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8020c12:	f7fb f825 	bl	801bc60 <Image_load>
		Locus.pData = (uint16_t *)bmp;
 8020c16:	4b4e      	ldr	r3, [pc, #312]	; (8020d50 <main+0x10f8>)
 8020c18:	4a4e      	ldr	r2, [pc, #312]	; (8020d54 <main+0x10fc>)
 8020c1a:	605a      	str	r2, [r3, #4]
		Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8020c1c:	7822      	ldrb	r2, [r4, #0]
 8020c1e:	f002 0101 	and.w	r1, r2, #1
 8020c22:	2900      	cmp	r1, #0
 8020c24:	bf14      	ite	ne
 8020c26:	21d8      	movne	r1, #216	; 0xd8
 8020c28:	21fa      	moveq	r1, #250	; 0xfa
 8020c2a:	8019      	strh	r1, [r3, #0]
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8020c2c:	d132      	bne.n	8020c94 <main+0x103c>
 8020c2e:	f012 0f04 	tst.w	r2, #4
 8020c32:	bf0c      	ite	eq
 8020c34:	22fa      	moveq	r2, #250	; 0xfa
 8020c36:	22ea      	movne	r2, #234	; 0xea
 8020c38:	805a      	strh	r2, [r3, #2]
		switch(GUI_screen_state){
 8020c3a:	f898 3000 	ldrb.w	r3, [r8]
 8020c3e:	3b01      	subs	r3, #1
 8020c40:	2b05      	cmp	r3, #5
 8020c42:	d85d      	bhi.n	8020d00 <main+0x10a8>
 8020c44:	e8df f003 	tbb	[pc, r3]
 8020c48:	4a40285f 	.word	0x4a40285f
 8020c4c:	5650      	.short	0x5650
			PARGraph_B = i;
 8020c4e:	4688      	mov	r8, r1
 8020c50:	f04f 0901 	mov.w	r9, #1
 8020c54:	e730      	b.n	8020ab8 <main+0xe60>
			PARGraph_G = i;
 8020c56:	468e      	mov	lr, r1
 8020c58:	f04f 0c01 	mov.w	ip, #1
 8020c5c:	e72c      	b.n	8020ab8 <main+0xe60>
			PARGraph_R = i;
 8020c5e:	460e      	mov	r6, r1
 8020c60:	2701      	movs	r7, #1
 8020c62:	e729      	b.n	8020ab8 <main+0xe60>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 8020c64:	4a3c      	ldr	r2, [pc, #240]	; (8020d58 <main+0x1100>)
 8020c66:	e791      	b.n	8020b8c <main+0xf34>
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&hlpuart1);} else{HAL_UART_MspInit(&hlpuart1);}
 8020c68:	f000 fb70 	bl	802134c <HAL_UART_MspInit>
 8020c6c:	e79d      	b.n	8020baa <main+0xf52>
	} else{TFT_FillScreen_DMA(TFT_Red);}
 8020c6e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8020c72:	f7fd f953 	bl	801df1c <TFT_FillScreen_DMA>
 8020c76:	e7b8      	b.n	8020bea <main+0xf92>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8020c78:	f003 0304 	and.w	r3, r3, #4
 8020c7c:	2b00      	cmp	r3, #0
 8020c7e:	4b37      	ldr	r3, [pc, #220]	; (8020d5c <main+0x1104>)
 8020c80:	4837      	ldr	r0, [pc, #220]	; (8020d60 <main+0x1108>)
 8020c82:	bf08      	it	eq
 8020c84:	4618      	moveq	r0, r3
 8020c86:	f24f 4324 	movw	r3, #62500	; 0xf424
 8020c8a:	f24e 4184 	movw	r1, #58500	; 0xe484
 8020c8e:	bf08      	it	eq
 8020c90:	4619      	moveq	r1, r3
 8020c92:	e7be      	b.n	8020c12 <main+0xfba>
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8020c94:	22fa      	movs	r2, #250	; 0xfa
 8020c96:	e7cf      	b.n	8020c38 <main+0xfe0>
		case Measure2_Screen: preGUI_screen_state = Measure_Screen; GUI_Measure2_Screen();  break;
 8020c98:	4b32      	ldr	r3, [pc, #200]	; (8020d64 <main+0x110c>)
 8020c9a:	2201      	movs	r2, #1
 8020c9c:	701a      	strb	r2, [r3, #0]
 8020c9e:	f7ef faa1 	bl	80101e4 <GUI_Measure2_Screen>
  htim7.Instance = TIM7;
 8020ca2:	4c31      	ldr	r4, [pc, #196]	; (8020d68 <main+0x1110>)
  htim7.Init.Prescaler = 60000;
 8020ca4:	4931      	ldr	r1, [pc, #196]	; (8020d6c <main+0x1114>)
 8020ca6:	f64e 2260 	movw	r2, #60000	; 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020caa:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 60000;
 8020cac:	e884 0006 	stmia.w	r4, {r1, r2}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8020cb0:	4620      	mov	r0, r4
  htim7.Init.Period = 200;
 8020cb2:	22c8      	movs	r2, #200	; 0xc8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020cb4:	9319      	str	r3, [sp, #100]	; 0x64
 8020cb6:	931a      	str	r3, [sp, #104]	; 0x68
 8020cb8:	931b      	str	r3, [sp, #108]	; 0x6c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020cba:	60a3      	str	r3, [r4, #8]
  htim7.Init.Period = 200;
 8020cbc:	60e2      	str	r2, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020cbe:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8020cc0:	f7e5 f9e2 	bl	8006088 <HAL_TIM_Base_Init>
 8020cc4:	b310      	cbz	r0, 8020d0c <main+0x10b4>
 8020cc6:	e7fe      	b.n	8020cc6 <main+0x106e>
		case Measure3_Screen: preGUI_screen_state = Measure2_Screen; GUI_Measure_Screen(); GUI_Measure2_Screen();GUI_Measure3_Screen();  break;
 8020cc8:	4b26      	ldr	r3, [pc, #152]	; (8020d64 <main+0x110c>)
 8020cca:	2202      	movs	r2, #2
 8020ccc:	701a      	strb	r2, [r3, #0]
 8020cce:	f7ef fa5b 	bl	8010188 <GUI_Measure_Screen>
 8020cd2:	f7ef fa87 	bl	80101e4 <GUI_Measure2_Screen>
 8020cd6:	f7ef fabd 	bl	8010254 <GUI_Measure3_Screen>
 8020cda:	e7e2      	b.n	8020ca2 <main+0x104a>
		case Graph_Screen: preGUI_screen_state = Measure_Screen; GUI_Graph_Screen(); break;
 8020cdc:	4b21      	ldr	r3, [pc, #132]	; (8020d64 <main+0x110c>)
 8020cde:	2201      	movs	r2, #1
 8020ce0:	701a      	strb	r2, [r3, #0]
 8020ce2:	f7ef f8b5 	bl	800fe50 <GUI_Graph_Screen>
 8020ce6:	e7dc      	b.n	8020ca2 <main+0x104a>
		case Color_Screen: preGUI_screen_state = ColorSet1_Screen; GUI_Color_Screen();  break; 
 8020ce8:	4b1e      	ldr	r3, [pc, #120]	; (8020d64 <main+0x110c>)
 8020cea:	220e      	movs	r2, #14
 8020cec:	701a      	strb	r2, [r3, #0]
 8020cee:	f7ef fae7 	bl	80102c0 <GUI_Color_Screen>
 8020cf2:	e7d6      	b.n	8020ca2 <main+0x104a>
		case Color_Rendition_Screen: preGUI_screen_state = Measure_Screen; GUI_ColorRend_Screen();break;
 8020cf4:	4b1b      	ldr	r3, [pc, #108]	; (8020d64 <main+0x110c>)
 8020cf6:	2201      	movs	r2, #1
 8020cf8:	701a      	strb	r2, [r3, #0]
 8020cfa:	f7ef fe4f 	bl	801099c <GUI_ColorRend_Screen>
 8020cfe:	e7d0      	b.n	8020ca2 <main+0x104a>
		default: GUI_screen_state =  Measure_Screen; GUI_Measure_Screen();  break;
 8020d00:	2301      	movs	r3, #1
 8020d02:	f888 3000 	strb.w	r3, [r8]
 8020d06:	f7ef fa3f 	bl	8010188 <GUI_Measure_Screen>
 8020d0a:	e7ca      	b.n	8020ca2 <main+0x104a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020d0c:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020d0e:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8020d10:	a919      	add	r1, sp, #100	; 0x64
 8020d12:	4620      	mov	r0, r4
 8020d14:	f7e5 fc38 	bl	8006588 <HAL_TIMEx_MasterConfigSynchronization>
 8020d18:	4607      	mov	r7, r0
 8020d1a:	b348      	cbz	r0, 8020d70 <main+0x1118>
 8020d1c:	e7fe      	b.n	8020d1c <main+0x10c4>
 8020d1e:	bf00      	nop
 8020d20:	20000a48 	.word	0x20000a48
 8020d24:	200055d4 	.word	0x200055d4
 8020d28:	200055d0 	.word	0x200055d0
 8020d2c:	2008c31a 	.word	0x2008c31a
 8020d30:	20091160 	.word	0x20091160
 8020d34:	0812c020 	.word	0x0812c020
 8020d38:	20005279 	.word	0x20005279
 8020d3c:	0812a050 	.word	0x0812a050
 8020d40:	20090f72 	.word	0x20090f72
 8020d44:	20005277 	.word	0x20005277
 8020d48:	2000527c 	.word	0x2000527c
 8020d4c:	00051d00 	.word	0x00051d00
 8020d50:	2008c8b0 	.word	0x2008c8b0
 8020d54:	200511f6 	.word	0x200511f6
 8020d58:	200055cc 	.word	0x200055cc
 8020d5c:	00018100 	.word	0x00018100
 8020d60:	0006ca00 	.word	0x0006ca00
 8020d64:	2000022a 	.word	0x2000022a
 8020d68:	20091510 	.word	0x20091510
 8020d6c:	40001400 	.word	0x40001400
	HAL_Delay(1);
 8020d70:	2001      	movs	r0, #1
 8020d72:	f7e0 f95b 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8020d76:	2037      	movs	r0, #55	; 0x37
 8020d78:	f7e0 fe46 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8020d7c:	2046      	movs	r0, #70	; 0x46
 8020d7e:	f7e0 fe43 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 8020d82:	2001      	movs	r0, #1
 8020d84:	f7e0 f952 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start(&htim7);
 8020d88:	4620      	mov	r0, r4
 8020d8a:	f7e5 f82f 	bl	8005dec <HAL_TIM_Base_Start>
	HAL_Delay(1);
 8020d8e:	2001      	movs	r0, #1
 8020d90:	f7e0 f94c 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim7);
 8020d94:	4620      	mov	r0, r4
 8020d96:	f7e5 f843 	bl	8005e20 <HAL_TIM_Base_Start_IT>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 8020d9a:	4c91      	ldr	r4, [pc, #580]	; (8020fe0 <main+0x1388>)
	uint8_t exp_stable = 0, start = 1;
 8020d9c:	2301      	movs	r3, #1
	uint32_t cnt_delay = 0, scr_refresh = 0;
 8020d9e:	463e      	mov	r6, r7
	uint8_t exp_stable = 0, start = 1;
 8020da0:	9303      	str	r3, [sp, #12]
 8020da2:	46bb      	mov	fp, r7
	 if(send_bluetooth) 
 8020da4:	4d8f      	ldr	r5, [pc, #572]	; (8020fe4 <main+0x138c>)
   usb_receive_processing();
 8020da6:	f7fe fa81 	bl	801f2ac <usb_receive_processing>
	 if(send_bluetooth) 
 8020daa:	782b      	ldrb	r3, [r5, #0]
 8020dac:	b13b      	cbz	r3, 8020dbe <main+0x1166>
			HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t*)&data_bluetooth_send, 4122);
 8020dae:	f241 021a 	movw	r2, #4122	; 0x101a
 8020db2:	498d      	ldr	r1, [pc, #564]	; (8020fe8 <main+0x1390>)
 8020db4:	488d      	ldr	r0, [pc, #564]	; (8020fec <main+0x1394>)
 8020db6:	f7e5 fc67 	bl	8006688 <HAL_UART_Transmit_DMA>
			send_bluetooth = 0;
 8020dba:	2300      	movs	r3, #0
 8020dbc:	702b      	strb	r3, [r5, #0]
 8020dbe:	f8df a270 	ldr.w	sl, [pc, #624]	; 8021030 <main+0x13d8>
		while(start)
 8020dc2:	9b03      	ldr	r3, [sp, #12]
 8020dc4:	1c75      	adds	r5, r6, #1
 8020dc6:	2b00      	cmp	r3, #0
 8020dc8:	d174      	bne.n	8020eb4 <main+0x125c>
		if(!exp_set){
 8020dca:	4b89      	ldr	r3, [pc, #548]	; (8020ff0 <main+0x1398>)
 8020dcc:	781b      	ldrb	r3, [r3, #0]
 8020dce:	b993      	cbnz	r3, 8020df6 <main+0x119e>
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 8020dd0:	4b88      	ldr	r3, [pc, #544]	; (8020ff4 <main+0x139c>)
 8020dd2:	4e89      	ldr	r6, [pc, #548]	; (8020ff8 <main+0x13a0>)
 8020dd4:	4989      	ldr	r1, [pc, #548]	; (8020ffc <main+0x13a4>)
 8020dd6:	ed93 0a00 	vldr	s0, [r3]
 8020dda:	8830      	ldrh	r0, [r6, #0]
 8020ddc:	f7fa ff74 	bl	801bcc8 <Rabs_calc_Factor1>
 8020de0:	4b87      	ldr	r3, [pc, #540]	; (8021000 <main+0x13a8>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 8020de2:	4a88      	ldr	r2, [pc, #544]	; (8021004 <main+0x13ac>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 8020de4:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 8020de8:	edd9 0a00 	vldr	s1, [r9]
 8020dec:	4b86      	ldr	r3, [pc, #536]	; (8021008 <main+0x13b0>)
 8020dee:	8831      	ldrh	r1, [r6, #0]
 8020df0:	4882      	ldr	r0, [pc, #520]	; (8020ffc <main+0x13a4>)
 8020df2:	f7fa ff9d 	bl	801bd30 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 8020df6:	f89a 3000 	ldrb.w	r3, [sl]
 8020dfa:	b92b      	cbnz	r3, 8020e08 <main+0x11b0>
 8020dfc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8020e00:	4981      	ldr	r1, [pc, #516]	; (8021008 <main+0x13b0>)
 8020e02:	4882      	ldr	r0, [pc, #520]	; (802100c <main+0x13b4>)
 8020e04:	f000 ffb8 	bl	8021d78 <memcpy>
			exp_start = 0;
 8020e08:	4b81      	ldr	r3, [pc, #516]	; (8021010 <main+0x13b8>)
 8020e0a:	2200      	movs	r2, #0
 8020e0c:	701a      	strb	r2, [r3, #0]
		if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen) && !pause)
 8020e0e:	f898 3000 	ldrb.w	r3, [r8]
 8020e12:	1e5a      	subs	r2, r3, #1
 8020e14:	2a02      	cmp	r2, #2
 8020e16:	f200 80a6 	bhi.w	8020f66 <main+0x130e>
 8020e1a:	4b7e      	ldr	r3, [pc, #504]	; (8021014 <main+0x13bc>)
 8020e1c:	781b      	ldrb	r3, [r3, #0]
 8020e1e:	2b00      	cmp	r3, #0
 8020e20:	f040 80c2 	bne.w	8020fa8 <main+0x1350>
			if(!pause & !exp_set){Calculate_Data();}
 8020e24:	4b72      	ldr	r3, [pc, #456]	; (8020ff0 <main+0x1398>)
 8020e26:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 8020e28:	462e      	mov	r6, r5
			if(!pause & !exp_set){Calculate_Data();}
 8020e2a:	b90b      	cbnz	r3, 8020e30 <main+0x11d8>
 8020e2c:	f7fd fec8 	bl	801ebc0 <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 8020e30:	2d28      	cmp	r5, #40	; 0x28
 8020e32:	d908      	bls.n	8020e46 <main+0x11ee>
 8020e34:	7823      	ldrb	r3, [r4, #0]
 8020e36:	2b05      	cmp	r3, #5
 8020e38:	f200 8086 	bhi.w	8020f48 <main+0x12f0>
								auto_exposure();
 8020e3c:	f7fe fc0a 	bl	801f654 <auto_exposure>
								max_el = 0;
 8020e40:	4b75      	ldr	r3, [pc, #468]	; (8021018 <main+0x13c0>)
 8020e42:	2600      	movs	r6, #0
 8020e44:	801e      	strh	r6, [r3, #0]
        if(GUI_screen_state == Graph_Screen)
 8020e46:	f898 3000 	ldrb.w	r3, [r8]
 8020e4a:	2b04      	cmp	r3, #4
 8020e4c:	f040 80c6 	bne.w	8020fdc <main+0x1384>
            scr_refresh++;
 8020e50:	3701      	adds	r7, #1
            if(scr_refresh > 40 ){
 8020e52:	2f28      	cmp	r7, #40	; 0x28
 8020e54:	d92b      	bls.n	8020eae <main+0x1256>
							block_graph = 1;
 8020e56:	2301      	movs	r3, #1
 8020e58:	f88a 3000 	strb.w	r3, [sl]
								if(preGUI_screen_state == Graph_Screen && Rotation_Screen_Spectral_Old3 == Rotation_Screen_Spectral){ Refresh_screen_Graph(20, 20, Line_Rabs_buff_graph2, Rotation_Screen_Spectral_Old3);}
 8020e5c:	4b6f      	ldr	r3, [pc, #444]	; (802101c <main+0x13c4>)
 8020e5e:	4d70      	ldr	r5, [pc, #448]	; (8021020 <main+0x13c8>)
 8020e60:	781b      	ldrb	r3, [r3, #0]
 8020e62:	4f70      	ldr	r7, [pc, #448]	; (8021024 <main+0x13cc>)
 8020e64:	2b04      	cmp	r3, #4
 8020e66:	d108      	bne.n	8020e7a <main+0x1222>
 8020e68:	782a      	ldrb	r2, [r5, #0]
 8020e6a:	783b      	ldrb	r3, [r7, #0]
 8020e6c:	4293      	cmp	r3, r2
 8020e6e:	d104      	bne.n	8020e7a <main+0x1222>
 8020e70:	2114      	movs	r1, #20
 8020e72:	4a6d      	ldr	r2, [pc, #436]	; (8021028 <main+0x13d0>)
 8020e74:	4608      	mov	r0, r1
 8020e76:	f7fc fd85 	bl	801d984 <Refresh_screen_Graph>
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 8020e7a:	7839      	ldrb	r1, [r7, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 8020e7c:	4863      	ldr	r0, [pc, #396]	; (802100c <main+0x13b4>)
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 8020e7e:	7029      	strb	r1, [r5, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 8020e80:	f7fa ff7a 	bl	801bd78 <Rabs_find_MAX>
 8020e84:	4b69      	ldr	r3, [pc, #420]	; (802102c <main+0x13d4>)
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 8020e86:	4961      	ldr	r1, [pc, #388]	; (802100c <main+0x13b4>)
 8020e88:	7828      	ldrb	r0, [r5, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 8020e8a:	ed83 0a00 	vstr	s0, [r3]
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 8020e8e:	f7fc fd27 	bl	801d8e0 <Rabs_graph_to_display>
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 8020e92:	782b      	ldrb	r3, [r5, #0]
 8020e94:	9300      	str	r3, [sp, #0]
 8020e96:	2114      	movs	r1, #20
 8020e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020e9c:	4a62      	ldr	r2, [pc, #392]	; (8021028 <main+0x13d0>)
 8020e9e:	4608      	mov	r0, r1
								block_graph = 0;
 8020ea0:	2700      	movs	r7, #0
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 8020ea2:	f7fc fc81 	bl	801d7a8 <Spectral_DrawGraph_Line2>
								block_graph = 0;
 8020ea6:	f88a 7000 	strb.w	r7, [sl]
								GUI_SignalLevel();
 8020eaa:	f7ef f90b 	bl	80100c4 <GUI_SignalLevel>
        GUI_Display_Refresh();
 8020eae:	f7ef fe13 	bl	8010ad8 <GUI_Display_Refresh>
   usb_receive_processing();
 8020eb2:	e777      	b.n	8020da4 <main+0x114c>
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 8020eb4:	4b4f      	ldr	r3, [pc, #316]	; (8020ff4 <main+0x139c>)
 8020eb6:	4e50      	ldr	r6, [pc, #320]	; (8020ff8 <main+0x13a0>)
 8020eb8:	4950      	ldr	r1, [pc, #320]	; (8020ffc <main+0x13a4>)
 8020eba:	ed93 0a00 	vldr	s0, [r3]
 8020ebe:	8830      	ldrh	r0, [r6, #0]
 8020ec0:	f7fa ff02 	bl	801bcc8 <Rabs_calc_Factor1>
 8020ec4:	4b4e      	ldr	r3, [pc, #312]	; (8021000 <main+0x13a8>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 8020ec6:	4a4f      	ldr	r2, [pc, #316]	; (8021004 <main+0x13ac>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 8020ec8:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 8020ecc:	edd9 0a00 	vldr	s1, [r9]
 8020ed0:	4b4d      	ldr	r3, [pc, #308]	; (8021008 <main+0x13b0>)
 8020ed2:	8831      	ldrh	r1, [r6, #0]
 8020ed4:	4849      	ldr	r0, [pc, #292]	; (8020ffc <main+0x13a4>)
 8020ed6:	f7fa ff2b 	bl	801bd30 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 8020eda:	f89a 3000 	ldrb.w	r3, [sl]
 8020ede:	b92b      	cbnz	r3, 8020eec <main+0x1294>
 8020ee0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8020ee4:	4948      	ldr	r1, [pc, #288]	; (8021008 <main+0x13b0>)
 8020ee6:	4849      	ldr	r0, [pc, #292]	; (802100c <main+0x13b4>)
 8020ee8:	f000 ff46 	bl	8021d78 <memcpy>
			Calculate_Data();
 8020eec:	f7fd fe68 	bl	801ebc0 <Calculate_Data>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 8020ef0:	2d14      	cmp	r5, #20
			cnt_delay++;
 8020ef2:	462e      	mov	r6, r5
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 8020ef4:	f67f af65 	bls.w	8020dc2 <main+0x116a>
 8020ef8:	7823      	ldrb	r3, [r4, #0]
 8020efa:	2b05      	cmp	r3, #5
 8020efc:	d910      	bls.n	8020f20 <main+0x12c8>
 8020efe:	2d32      	cmp	r5, #50	; 0x32
 8020f00:	f67f af5f 	bls.w	8020dc2 <main+0x116a>
 8020f04:	7823      	ldrb	r3, [r4, #0]
 8020f06:	2b05      	cmp	r3, #5
 8020f08:	d902      	bls.n	8020f10 <main+0x12b8>
 8020f0a:	7823      	ldrb	r3, [r4, #0]
 8020f0c:	2b07      	cmp	r3, #7
 8020f0e:	d907      	bls.n	8020f20 <main+0x12c8>
 8020f10:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 8020f14:	f67f af55 	bls.w	8020dc2 <main+0x116a>
 8020f18:	7823      	ldrb	r3, [r4, #0]
 8020f1a:	2b07      	cmp	r3, #7
 8020f1c:	f67f af51 	bls.w	8020dc2 <main+0x116a>
								auto_exposure();
 8020f20:	f7fe fb98 	bl	801f654 <auto_exposure>
								max_el = 0;
 8020f24:	4b3c      	ldr	r3, [pc, #240]	; (8021018 <main+0x13c0>)
 8020f26:	2600      	movs	r6, #0
 8020f28:	801e      	strh	r6, [r3, #0]
								exp_stable = exp_stable+1;
 8020f2a:	f10b 0301 	add.w	r3, fp, #1
 8020f2e:	fa5f fb83 	uxtb.w	fp, r3
								exp_start = 1;
 8020f32:	4b37      	ldr	r3, [pc, #220]	; (8021010 <main+0x13b8>)
 8020f34:	f1bb 0f0a 	cmp.w	fp, #10
 8020f38:	f04f 0201 	mov.w	r2, #1
 8020f3c:	701a      	strb	r2, [r3, #0]
 8020f3e:	bf8c      	ite	hi
 8020f40:	2300      	movhi	r3, #0
 8020f42:	2301      	movls	r3, #1
 8020f44:	9303      	str	r3, [sp, #12]
 8020f46:	e73c      	b.n	8020dc2 <main+0x116a>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 8020f48:	2d46      	cmp	r5, #70	; 0x46
 8020f4a:	f67f af7c 	bls.w	8020e46 <main+0x11ee>
 8020f4e:	7823      	ldrb	r3, [r4, #0]
 8020f50:	2b05      	cmp	r3, #5
 8020f52:	d903      	bls.n	8020f5c <main+0x1304>
 8020f54:	7823      	ldrb	r3, [r4, #0]
 8020f56:	2b07      	cmp	r3, #7
 8020f58:	f67f af70 	bls.w	8020e3c <main+0x11e4>
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 8020f5c:	7823      	ldrb	r3, [r4, #0]
 8020f5e:	2b07      	cmp	r3, #7
 8020f60:	f63f af6c 	bhi.w	8020e3c <main+0x11e4>
 8020f64:	e76f      	b.n	8020e46 <main+0x11ee>
		else	if((GUI_screen_state == Color_Screen) && !pause)
 8020f66:	2b05      	cmp	r3, #5
 8020f68:	d11e      	bne.n	8020fa8 <main+0x1350>
 8020f6a:	4b2a      	ldr	r3, [pc, #168]	; (8021014 <main+0x13bc>)
 8020f6c:	781b      	ldrb	r3, [r3, #0]
 8020f6e:	b9db      	cbnz	r3, 8020fa8 <main+0x1350>
			if(!pause & !exp_set){Calculate_Data();}
 8020f70:	4b1f      	ldr	r3, [pc, #124]	; (8020ff0 <main+0x1398>)
 8020f72:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 8020f74:	462e      	mov	r6, r5
			if(!pause & !exp_set){Calculate_Data();}
 8020f76:	bb7b      	cbnz	r3, 8020fd8 <main+0x1380>
 8020f78:	f7fd fe22 	bl	801ebc0 <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 8020f7c:	2d28      	cmp	r5, #40	; 0x28
 8020f7e:	f67f af62 	bls.w	8020e46 <main+0x11ee>
 8020f82:	7823      	ldrb	r3, [r4, #0]
 8020f84:	2b05      	cmp	r3, #5
 8020f86:	f67f af59 	bls.w	8020e3c <main+0x11e4>
 8020f8a:	2d46      	cmp	r5, #70	; 0x46
 8020f8c:	f67f af5b 	bls.w	8020e46 <main+0x11ee>
 8020f90:	7823      	ldrb	r3, [r4, #0]
 8020f92:	2b05      	cmp	r3, #5
 8020f94:	d903      	bls.n	8020f9e <main+0x1346>
 8020f96:	7823      	ldrb	r3, [r4, #0]
 8020f98:	2b07      	cmp	r3, #7
 8020f9a:	f67f af4f 	bls.w	8020e3c <main+0x11e4>
 8020f9e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 8020fa2:	f67f af50 	bls.w	8020e46 <main+0x11ee>
 8020fa6:	e7d9      	b.n	8020f5c <main+0x1304>
 8020fa8:	2dfa      	cmp	r5, #250	; 0xfa
				cnt_delay++;
 8020faa:	462e      	mov	r6, r5
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 8020fac:	f67f af4b 	bls.w	8020e46 <main+0x11ee>
 8020fb0:	7823      	ldrb	r3, [r4, #0]
 8020fb2:	2b05      	cmp	r3, #5
 8020fb4:	f67f af42 	bls.w	8020e3c <main+0x11e4>
 8020fb8:	f240 33b6 	movw	r3, #950	; 0x3b6
 8020fbc:	429d      	cmp	r5, r3
 8020fbe:	f67f af42 	bls.w	8020e46 <main+0x11ee>
 8020fc2:	7823      	ldrb	r3, [r4, #0]
 8020fc4:	2b05      	cmp	r3, #5
 8020fc6:	d903      	bls.n	8020fd0 <main+0x1378>
 8020fc8:	7823      	ldrb	r3, [r4, #0]
 8020fca:	2b07      	cmp	r3, #7
 8020fcc:	f67f af36 	bls.w	8020e3c <main+0x11e4>
 8020fd0:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8020fd4:	429d      	cmp	r5, r3
 8020fd6:	e7e4      	b.n	8020fa2 <main+0x134a>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 8020fd8:	2d28      	cmp	r5, #40	; 0x28
 8020fda:	d8d2      	bhi.n	8020f82 <main+0x132a>
        } else{__asm("nop");}
 8020fdc:	bf00      	nop
 8020fde:	e766      	b.n	8020eae <main+0x1256>
 8020fe0:	2008be5a 	.word	0x2008be5a
 8020fe4:	2008be6c 	.word	0x2008be6c
 8020fe8:	2008ae40 	.word	0x2008ae40
 8020fec:	20091160 	.word	0x20091160
 8020ff0:	20000a4c 	.word	0x20000a4c
 8020ff4:	2004d1e4 	.word	0x2004d1e4
 8020ff8:	200055ca 	.word	0x200055ca
 8020ffc:	20009de4 	.word	0x20009de4
 8021000:	200055d8 	.word	0x200055d8
 8021004:	2004d1e8 	.word	0x2004d1e8
 8021008:	20007de4 	.word	0x20007de4
 802100c:	20008de4 	.word	0x20008de4
 8021010:	20000a4d 	.word	0x20000a4d
 8021014:	200052a0 	.word	0x200052a0
 8021018:	2008be68 	.word	0x2008be68
 802101c:	2000022a 	.word	0x2000022a
 8021020:	20000a49 	.word	0x20000a49
 8021024:	20005282 	.word	0x20005282
 8021028:	200052d8 	.word	0x200052d8
 802102c:	20091340 	.word	0x20091340
 8021030:	200511f5 	.word	0x200511f5

08021034 <_Error_Handler>:
}
void _Error_Handler(char *file, int line)
{
 8021034:	e7fe      	b.n	8021034 <_Error_Handler>
	...

08021038 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8021038:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 802103a:	4c06      	ldr	r4, [pc, #24]	; (8021054 <SD_CheckStatus.isra.0+0x1c>)
 802103c:	2301      	movs	r3, #1
 802103e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8021040:	f7fc ff02 	bl	801de48 <BSP_SD_GetCardState>
 8021044:	4623      	mov	r3, r4
 8021046:	b918      	cbnz	r0, 8021050 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8021048:	7822      	ldrb	r2, [r4, #0]
 802104a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 802104e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8021050:	7818      	ldrb	r0, [r3, #0]
}
 8021052:	bd10      	pop	{r4, pc}
 8021054:	20000a4f 	.word	0x20000a4f

08021058 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8021058:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 802105a:	4c05      	ldr	r4, [pc, #20]	; (8021070 <SD_initialize+0x18>)
 802105c:	2301      	movs	r3, #1
 802105e:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8021060:	f7fc feba 	bl	801ddd8 <BSP_SD_Init>
 8021064:	b910      	cbnz	r0, 802106c <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 8021066:	f7ff ffe7 	bl	8021038 <SD_CheckStatus.isra.0>
 802106a:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 802106c:	7820      	ldrb	r0, [r4, #0]
}
 802106e:	bd10      	pop	{r4, pc}
 8021070:	20000a4f 	.word	0x20000a4f

08021074 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8021074:	f7ff bfe0 	b.w	8021038 <SD_CheckStatus.isra.0>

08021078 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8021078:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 802107a:	4c16      	ldr	r4, [pc, #88]	; (80210d4 <SD_read+0x5c>)
{
 802107c:	4608      	mov	r0, r1
 802107e:	4611      	mov	r1, r2
  ReadStatus = 0;
 8021080:	2200      	movs	r2, #0
 8021082:	6022      	str	r2, [r4, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8021084:	461a      	mov	r2, r3
 8021086:	f7fc fec3 	bl	801de10 <BSP_SD_ReadBlocks_DMA>
 802108a:	b108      	cbz	r0, 8021090 <SD_read+0x18>
  DRESULT res = RES_ERROR;
 802108c:	2001      	movs	r0, #1
 802108e:	bd70      	pop	{r4, r5, r6, pc}
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 8021090:	f7df ffc6 	bl	8001020 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8021094:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 8021098:	4606      	mov	r6, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 802109a:	6823      	ldr	r3, [r4, #0]
 802109c:	b19b      	cbz	r3, 80210c6 <SD_read+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 802109e:	6823      	ldr	r3, [r4, #0]
 80210a0:	2b00      	cmp	r3, #0
 80210a2:	d0f3      	beq.n	802108c <SD_read+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      ReadStatus = 0;
 80210a4:	2300      	movs	r3, #0
 80210a6:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 80210a8:	f7df ffba 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80210ac:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 80210b0:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80210b2:	f7df ffb5 	bl	8001020 <HAL_GetTick>
 80210b6:	1b40      	subs	r0, r0, r5
 80210b8:	42a0      	cmp	r0, r4
 80210ba:	d8e7      	bhi.n	802108c <SD_read+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80210bc:	f7fc fec4 	bl	801de48 <BSP_SD_GetCardState>
 80210c0:	2800      	cmp	r0, #0
 80210c2:	d1f6      	bne.n	80210b2 <SD_read+0x3a>
      }
    }
  }

  return res;
}
 80210c4:	bd70      	pop	{r4, r5, r6, pc}
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80210c6:	f7df ffab 	bl	8001020 <HAL_GetTick>
 80210ca:	1b80      	subs	r0, r0, r6
 80210cc:	42a8      	cmp	r0, r5
 80210ce:	d9e4      	bls.n	802109a <SD_read+0x22>
 80210d0:	e7e5      	b.n	802109e <SD_read+0x26>
 80210d2:	bf00      	nop
 80210d4:	2008be70 	.word	0x2008be70

080210d8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80210d8:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 80210da:	4c16      	ldr	r4, [pc, #88]	; (8021134 <SD_write+0x5c>)
{
 80210dc:	4608      	mov	r0, r1
 80210de:	4611      	mov	r1, r2
  WriteStatus = 0;
 80210e0:	2200      	movs	r2, #0
 80210e2:	6022      	str	r2, [r4, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80210e4:	461a      	mov	r2, r3
 80210e6:	f7fc fea1 	bl	801de2c <BSP_SD_WriteBlocks_DMA>
 80210ea:	b108      	cbz	r0, 80210f0 <SD_write+0x18>
  DRESULT res = RES_ERROR;
 80210ec:	2001      	movs	r0, #1
 80210ee:	bd70      	pop	{r4, r5, r6, pc}
                            (uint32_t) (sector),
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */

    timeout = HAL_GetTick();
 80210f0:	f7df ff96 	bl	8001020 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80210f4:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 80210f8:	4606      	mov	r6, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80210fa:	6823      	ldr	r3, [r4, #0]
 80210fc:	b19b      	cbz	r3, 8021126 <SD_write+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 80210fe:	6823      	ldr	r3, [r4, #0]
 8021100:	2b00      	cmp	r3, #0
 8021102:	d0f3      	beq.n	80210ec <SD_write+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      WriteStatus = 0;
 8021104:	2300      	movs	r3, #0
 8021106:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 8021108:	f7df ff8a 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 802110c:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 8021110:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8021112:	f7df ff85 	bl	8001020 <HAL_GetTick>
 8021116:	1b40      	subs	r0, r0, r5
 8021118:	42a0      	cmp	r0, r4
 802111a:	d8e7      	bhi.n	80210ec <SD_write+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 802111c:	f7fc fe94 	bl	801de48 <BSP_SD_GetCardState>
 8021120:	2800      	cmp	r0, #0
 8021122:	d1f6      	bne.n	8021112 <SD_write+0x3a>
      }
    }
  }

  return res;
}
 8021124:	bd70      	pop	{r4, r5, r6, pc}
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8021126:	f7df ff7b 	bl	8001020 <HAL_GetTick>
 802112a:	1b80      	subs	r0, r0, r6
 802112c:	42a8      	cmp	r0, r5
 802112e:	d9e4      	bls.n	80210fa <SD_write+0x22>
 8021130:	e7e5      	b.n	80210fe <SD_write+0x26>
 8021132:	bf00      	nop
 8021134:	2008be74 	.word	0x2008be74

08021138 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8021138:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 802113a:	4b12      	ldr	r3, [pc, #72]	; (8021184 <SD_ioctl+0x4c>)
 802113c:	781b      	ldrb	r3, [r3, #0]
 802113e:	07db      	lsls	r3, r3, #31
{
 8021140:	b08a      	sub	sp, #40	; 0x28
 8021142:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8021144:	d41b      	bmi.n	802117e <SD_ioctl+0x46>

  switch (cmd)
 8021146:	2903      	cmp	r1, #3
 8021148:	d803      	bhi.n	8021152 <SD_ioctl+0x1a>
 802114a:	e8df f001 	tbb	[pc, r1]
 802114e:	0510      	.short	0x0510
 8021150:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8021152:	2004      	movs	r0, #4
  }

  return res;
}
 8021154:	b00a      	add	sp, #40	; 0x28
 8021156:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8021158:	a801      	add	r0, sp, #4
 802115a:	f7fc fe7f 	bl	801de5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 802115e:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8021160:	6023      	str	r3, [r4, #0]
 8021162:	e004      	b.n	802116e <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8021164:	a801      	add	r0, sp, #4
 8021166:	f7fc fe79 	bl	801de5c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 802116a:	9b08      	ldr	r3, [sp, #32]
 802116c:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 802116e:	2000      	movs	r0, #0
 8021170:	e7f0      	b.n	8021154 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8021172:	a801      	add	r0, sp, #4
 8021174:	f7fc fe72 	bl	801de5c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8021178:	9b08      	ldr	r3, [sp, #32]
 802117a:	0a5b      	lsrs	r3, r3, #9
 802117c:	e7f0      	b.n	8021160 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 802117e:	2003      	movs	r0, #3
 8021180:	e7e8      	b.n	8021154 <SD_ioctl+0x1c>
 8021182:	bf00      	nop
 8021184:	20000a4f 	.word	0x20000a4f

08021188 <HAL_MspInit>:
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021188:	4b21      	ldr	r3, [pc, #132]	; (8021210 <HAL_MspInit+0x88>)
{
 802118a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802118c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 802118e:	f042 0201 	orr.w	r2, r2, #1
 8021192:	661a      	str	r2, [r3, #96]	; 0x60
 8021194:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021196:	f002 0201 	and.w	r2, r2, #1
 802119a:	9200      	str	r2, [sp, #0]
 802119c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 802119e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80211a0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80211a4:	659a      	str	r2, [r3, #88]	; 0x58
 80211a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80211a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80211ac:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80211ae:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80211b0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80211b2:	f7e0 fbe3 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80211b6:	2200      	movs	r2, #0
 80211b8:	4611      	mov	r1, r2
 80211ba:	f06f 000b 	mvn.w	r0, #11
 80211be:	f7e0 fbef 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80211c2:	2200      	movs	r2, #0
 80211c4:	4611      	mov	r1, r2
 80211c6:	f06f 000a 	mvn.w	r0, #10
 80211ca:	f7e0 fbe9 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80211ce:	2200      	movs	r2, #0
 80211d0:	4611      	mov	r1, r2
 80211d2:	f06f 0009 	mvn.w	r0, #9
 80211d6:	f7e0 fbe3 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80211da:	2200      	movs	r2, #0
 80211dc:	4611      	mov	r1, r2
 80211de:	f06f 0004 	mvn.w	r0, #4
 80211e2:	f7e0 fbdd 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80211e6:	2200      	movs	r2, #0
 80211e8:	4611      	mov	r1, r2
 80211ea:	f06f 0003 	mvn.w	r0, #3
 80211ee:	f7e0 fbd7 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80211f2:	2200      	movs	r2, #0
 80211f4:	4611      	mov	r1, r2
 80211f6:	f06f 0001 	mvn.w	r0, #1
 80211fa:	f7e0 fbd1 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80211fe:	2200      	movs	r2, #0
 8021200:	4611      	mov	r1, r2
 8021202:	f04f 30ff 	mov.w	r0, #4294967295
 8021206:	f7e0 fbcb 	bl	80019a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802120a:	b003      	add	sp, #12
 802120c:	f85d fb04 	ldr.w	pc, [sp], #4
 8021210:	40021000 	.word	0x40021000

08021214 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8021214:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8021216:	6802      	ldr	r2, [r0, #0]
 8021218:	4b31      	ldr	r3, [pc, #196]	; (80212e0 <HAL_LTDC_MspInit+0xcc>)
 802121a:	429a      	cmp	r2, r3
{
 802121c:	b08a      	sub	sp, #40	; 0x28
  if(hltdc->Instance==LTDC)
 802121e:	d15d      	bne.n	80212dc <HAL_LTDC_MspInit+0xc8>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8021220:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021224:	2400      	movs	r4, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8021226:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021228:	482e      	ldr	r0, [pc, #184]	; (80212e4 <HAL_LTDC_MspInit+0xd0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 802122a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 802122e:	661a      	str	r2, [r3, #96]	; 0x60
 8021230:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021232:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8021236:	9200      	str	r2, [sp, #0]
 8021238:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802123a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802123c:	f042 0210 	orr.w	r2, r2, #16
 8021240:	64da      	str	r2, [r3, #76]	; 0x4c
 8021242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021244:	f002 0210 	and.w	r2, r2, #16
 8021248:	9201      	str	r2, [sp, #4]
 802124a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802124c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802124e:	f042 0202 	orr.w	r2, r2, #2
 8021252:	64da      	str	r2, [r3, #76]	; 0x4c
 8021254:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021256:	f002 0202 	and.w	r2, r2, #2
 802125a:	9202      	str	r2, [sp, #8]
 802125c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 802125e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021260:	f042 0220 	orr.w	r2, r2, #32
 8021264:	64da      	str	r2, [r3, #76]	; 0x4c
 8021266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021268:	f002 0220 	and.w	r2, r2, #32
 802126c:	9203      	str	r2, [sp, #12]
 802126e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021270:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021272:	f042 0208 	orr.w	r2, r2, #8
 8021276:	64da      	str	r2, [r3, #76]	; 0x4c
 8021278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802127a:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802127c:	f003 0308 	and.w	r3, r3, #8
 8021280:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021282:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8021284:	260b      	movs	r6, #11
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021286:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021288:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 802128a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802128e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8021290:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021292:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8021294:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021296:	f7e1 f91d 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 802129a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802129c:	a905      	add	r1, sp, #20
 802129e:	4812      	ldr	r0, [pc, #72]	; (80212e8 <HAL_LTDC_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80212a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80212a2:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80212a4:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80212a6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 80212a8:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80212aa:	f7e1 f913 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80212ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80212b2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80212b4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80212b6:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80212b8:	480c      	ldr	r0, [pc, #48]	; (80212ec <HAL_LTDC_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80212ba:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80212bc:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80212be:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80212c0:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80212c2:	f7e1 f907 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80212c6:	f64d 730b 	movw	r3, #57099	; 0xdf0b
                          |GPIO_PIN_1|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80212ca:	a905      	add	r1, sp, #20
 80212cc:	4808      	ldr	r0, [pc, #32]	; (80212f0 <HAL_LTDC_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80212ce:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80212d0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80212d2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80212d4:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 80212d6:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80212d8:	f7e1 f8fc 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80212dc:	b00a      	add	sp, #40	; 0x28
 80212de:	bd70      	pop	{r4, r5, r6, pc}
 80212e0:	40016800 	.word	0x40016800
 80212e4:	48001000 	.word	0x48001000
 80212e8:	48000400 	.word	0x48000400
 80212ec:	48001400 	.word	0x48001400
 80212f0:	48000c00 	.word	0x48000c00

080212f4 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80212f4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80212f6:	6802      	ldr	r2, [r0, #0]
 80212f8:	4b13      	ldr	r3, [pc, #76]	; (8021348 <HAL_SPI_MspInit+0x54>)
 80212fa:	429a      	cmp	r2, r3
{
 80212fc:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 80212fe:	d121      	bne.n	8021344 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8021300:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021304:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8021306:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021308:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 802130c:	661a      	str	r2, [r3, #96]	; 0x60
 802130e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021310:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8021312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021316:	9300      	str	r3, [sp, #0]
 8021318:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 802131a:	2342      	movs	r3, #66	; 0x42
 802131c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802131e:	2302      	movs	r3, #2
 8021320:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021322:	2303      	movs	r3, #3
 8021324:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021326:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8021328:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802132a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802132e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021330:	f7e1 f8d0 	bl	80024d4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8021334:	2023      	movs	r0, #35	; 0x23
 8021336:	4622      	mov	r2, r4
 8021338:	4621      	mov	r1, r4
 802133a:	f7e0 fb31 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 802133e:	2023      	movs	r0, #35	; 0x23
 8021340:	f7e0 fb62 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8021344:	b006      	add	sp, #24
 8021346:	bd10      	pop	{r4, pc}
 8021348:	40013000 	.word	0x40013000

0802134c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 802134c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==LPUART1)
 802134e:	6802      	ldr	r2, [r0, #0]
 8021350:	4b1f      	ldr	r3, [pc, #124]	; (80213d0 <HAL_UART_MspInit+0x84>)
 8021352:	429a      	cmp	r2, r3
{
 8021354:	b086      	sub	sp, #24
 8021356:	4606      	mov	r6, r0
  if(huart->Instance==LPUART1)
 8021358:	d137      	bne.n	80213ca <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 802135a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802135e:	2500      	movs	r5, #0
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8021360:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021362:	481c      	ldr	r0, [pc, #112]	; (80213d4 <HAL_UART_MspInit+0x88>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8021364:	f042 0201 	orr.w	r2, r2, #1
 8021368:	65da      	str	r2, [r3, #92]	; 0x5c
 802136a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802136c:	9503      	str	r5, [sp, #12]
    __HAL_RCC_LPUART1_CLK_ENABLE();
 802136e:	f003 0301 	and.w	r3, r3, #1
 8021372:	9300      	str	r3, [sp, #0]
 8021374:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021376:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8021378:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802137a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802137c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 802137e:	2308      	movs	r3, #8
 8021380:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8021382:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021384:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021386:	f7e1 f8a5 	bl	80024d4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 3);
 802138a:	4622      	mov	r2, r4
 802138c:	2101      	movs	r1, #1
 802138e:	2046      	movs	r0, #70	; 0x46
 8021390:	f7e0 fb06 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8021394:	2046      	movs	r0, #70	; 0x46
 8021396:	f7e0 fb37 	bl	8001a08 <HAL_NVIC_EnableIRQ>
		
		  /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 802139a:	4c0f      	ldr	r4, [pc, #60]	; (80213d8 <HAL_UART_MspInit+0x8c>)
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802139c:	490f      	ldr	r1, [pc, #60]	; (80213dc <HAL_UART_MspInit+0x90>)
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802139e:	60e5      	str	r5, [r4, #12]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80213a0:	2310      	movs	r3, #16
 80213a2:	2223      	movs	r2, #35	; 0x23
 80213a4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80213a8:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80213aa:	2380      	movs	r3, #128	; 0x80
 80213ac:	6123      	str	r3, [r4, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80213ae:	6165      	str	r5, [r4, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80213b0:	61a5      	str	r5, [r4, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80213b2:	61e5      	str	r5, [r4, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80213b4:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80213b6:	f7e0 fbb5 	bl	8001b24 <HAL_DMA_Init>
 80213ba:	b120      	cbz	r0, 80213c6 <HAL_UART_MspInit+0x7a>
    {
      Error_Handler();
 80213bc:	f240 1109 	movw	r1, #265	; 0x109
 80213c0:	4807      	ldr	r0, [pc, #28]	; (80213e0 <HAL_UART_MspInit+0x94>)
 80213c2:	f7ff fe37 	bl	8021034 <_Error_Handler>
    }

		
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80213c6:	67b4      	str	r4, [r6, #120]	; 0x78
 80213c8:	62a6      	str	r6, [r4, #40]	; 0x28
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80213ca:	b006      	add	sp, #24
 80213cc:	bd70      	pop	{r4, r5, r6, pc}
 80213ce:	bf00      	nop
 80213d0:	40008000 	.word	0x40008000
 80213d4:	48000800 	.word	0x48000800
 80213d8:	20091384 	.word	0x20091384
 80213dc:	40020008 	.word	0x40020008
 80213e0:	08033880 	.word	0x08033880

080213e4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{

  if(huart->Instance==LPUART1)
 80213e4:	6802      	ldr	r2, [r0, #0]
 80213e6:	4b0b      	ldr	r3, [pc, #44]	; (8021414 <HAL_UART_MspDeInit+0x30>)
 80213e8:	429a      	cmp	r2, r3
{
 80213ea:	b510      	push	{r4, lr}
 80213ec:	4604      	mov	r4, r0
  if(huart->Instance==LPUART1)
 80213ee:	d110      	bne.n	8021412 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 80213f0:	4a09      	ldr	r2, [pc, #36]	; (8021418 <HAL_UART_MspDeInit+0x34>)
  
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 80213f2:	480a      	ldr	r0, [pc, #40]	; (802141c <HAL_UART_MspDeInit+0x38>)
    __HAL_RCC_LPUART1_CLK_DISABLE();
 80213f4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80213f6:	f023 0301 	bic.w	r3, r3, #1
 80213fa:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 80213fc:	2103      	movs	r1, #3
 80213fe:	f7e1 f941 	bl	8002684 <HAL_GPIO_DeInit>

    /* LPUART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8021402:	2046      	movs	r0, #70	; 0x46
 8021404:	f7e0 fb0c 	bl	8001a20 <HAL_NVIC_DisableIRQ>
		/* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8021408:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }

}
 802140a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(huart->hdmatx);
 802140e:	f7e0 bbf9 	b.w	8001c04 <HAL_DMA_DeInit>
 8021412:	bd10      	pop	{r4, pc}
 8021414:	40008000 	.word	0x40008000
 8021418:	40021000 	.word	0x40021000
 802141c:	48000800 	.word	0x48000800

08021420 <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8021420:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8021422:	6802      	ldr	r2, [r0, #0]
 8021424:	4b0e      	ldr	r3, [pc, #56]	; (8021460 <HAL_ADC_MspInit+0x40>)
 8021426:	429a      	cmp	r2, r3
 8021428:	d116      	bne.n	8021458 <HAL_ADC_MspInit+0x38>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 802142a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 802142e:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021432:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 8021434:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021436:	480b      	ldr	r0, [pc, #44]	; (8021464 <HAL_ADC_MspInit+0x44>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8021438:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802143c:	64da      	str	r2, [r3, #76]	; 0x4c
 802143e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8021444:	9300      	str	r3, [sp, #0]
 8021446:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021448:	2304      	movs	r3, #4
 802144a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 802144c:	230b      	movs	r3, #11
 802144e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021450:	2300      	movs	r3, #0
 8021452:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021454:	f7e1 f83e 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8021458:	b007      	add	sp, #28
 802145a:	f85d fb04 	ldr.w	pc, [sp], #4
 802145e:	bf00      	nop
 8021460:	50040000 	.word	0x50040000
 8021464:	48000800 	.word	0x48000800

08021468 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021468:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 802146a:	6803      	ldr	r3, [r0, #0]
 802146c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8021470:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM2)
 8021472:	d112      	bne.n	802149a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8021474:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8021478:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 802147a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802147c:	f042 0201 	orr.w	r2, r2, #1
 8021480:	659a      	str	r2, [r3, #88]	; 0x58
 8021482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8021484:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8021486:	f003 0301 	and.w	r3, r3, #1
 802148a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 802148c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 802148e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8021490:	f7e0 fa86 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8021494:	201c      	movs	r0, #28
 8021496:	f7e0 fab7 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
	
	if(htim_base->Instance==TIM7)
 802149a:	6822      	ldr	r2, [r4, #0]
 802149c:	4b20      	ldr	r3, [pc, #128]	; (8021520 <HAL_TIM_Base_MspInit+0xb8>)
 802149e:	429a      	cmp	r2, r3
 80214a0:	d10d      	bne.n	80214be <HAL_TIM_Base_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80214a2:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80214a6:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 80214a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80214aa:	f042 0220 	orr.w	r2, r2, #32
 80214ae:	659a      	str	r2, [r3, #88]	; 0x58
 80214b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80214b2:	f003 0320 	and.w	r3, r3, #32
 80214b6:	9301      	str	r3, [sp, #4]
 80214b8:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80214ba:	f7e0 faa5 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
	
	 if(htim_base->Instance==TIM4)
 80214be:	6822      	ldr	r2, [r4, #0]
 80214c0:	4b18      	ldr	r3, [pc, #96]	; (8021524 <HAL_TIM_Base_MspInit+0xbc>)
 80214c2:	429a      	cmp	r2, r3
 80214c4:	d112      	bne.n	80214ec <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80214c6:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80214ca:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80214cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80214ce:	f042 0204 	orr.w	r2, r2, #4
 80214d2:	659a      	str	r2, [r3, #88]	; 0x58
 80214d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80214d6:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 80214d8:	f003 0304 	and.w	r3, r3, #4
 80214dc:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80214de:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 80214e0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80214e2:	f7e0 fa5d 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80214e6:	201e      	movs	r0, #30
 80214e8:	f7e0 fa8e 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
	}
		if(htim_base->Instance==TIM6)
 80214ec:	6822      	ldr	r2, [r4, #0]
 80214ee:	4b0e      	ldr	r3, [pc, #56]	; (8021528 <HAL_TIM_Base_MspInit+0xc0>)
 80214f0:	429a      	cmp	r2, r3
 80214f2:	d112      	bne.n	802151a <HAL_TIM_Base_MspInit+0xb2>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80214f4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80214f8:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80214fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80214fc:	f042 0210 	orr.w	r2, r2, #16
 8021500:	659a      	str	r2, [r3, #88]	; 0x58
 8021502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021504:	f003 0310 	and.w	r3, r3, #16
 8021508:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 802150a:	2200      	movs	r2, #0
 802150c:	2103      	movs	r1, #3
    __HAL_RCC_TIM6_CLK_ENABLE();
 802150e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8021510:	f7e0 fa46 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021514:	2036      	movs	r0, #54	; 0x36
 8021516:	f7e0 fa77 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 802151a:	b004      	add	sp, #16
 802151c:	bd10      	pop	{r4, pc}
 802151e:	bf00      	nop
 8021520:	40001400 	.word	0x40001400
 8021524:	40000800 	.word	0x40000800
 8021528:	40001000 	.word	0x40001000

0802152c <HAL_TIM_OC_MspInit>:


void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 802152c:	b507      	push	{r0, r1, r2, lr}

  if(htim_oc->Instance==TIM5)
 802152e:	4b0d      	ldr	r3, [pc, #52]	; (8021564 <HAL_TIM_OC_MspInit+0x38>)
 8021530:	6802      	ldr	r2, [r0, #0]
 8021532:	429a      	cmp	r2, r3
 8021534:	d112      	bne.n	802155c <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8021536:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 802153a:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 802153c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802153e:	f042 0208 	orr.w	r2, r2, #8
 8021542:	659a      	str	r2, [r3, #88]	; 0x58
 8021544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8021546:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 8021548:	f003 0308 	and.w	r3, r3, #8
 802154c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 802154e:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 8021550:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8021552:	f7e0 fa25 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8021556:	2032      	movs	r0, #50	; 0x32
 8021558:	f7e0 fa56 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 802155c:	b003      	add	sp, #12
 802155e:	f85d fb04 	ldr.w	pc, [sp], #4
 8021562:	bf00      	nop
 8021564:	40000c00 	.word	0x40000c00

08021568 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8021568:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM5)
 802156a:	6802      	ldr	r2, [r0, #0]
 802156c:	4b19      	ldr	r3, [pc, #100]	; (80215d4 <HAL_TIM_MspPostInit+0x6c>)
 802156e:	429a      	cmp	r2, r3
{
 8021570:	b086      	sub	sp, #24
 8021572:	4604      	mov	r4, r0
  if(htim->Instance==TIM5)
 8021574:	d10c      	bne.n	8021590 <HAL_TIM_MspPostInit+0x28>
  /* USER CODE END TIM5_MspPostInit 0 */
  
    /**TIM5 GPIO Configuration    
    PA0     ------> TIM5_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8021576:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021578:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 802157a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802157c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802157e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021584:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021586:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021588:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 802158a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802158c:	f7e0 ffa2 	bl	80024d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

  if(htim->Instance==TIM15)
 8021590:	6822      	ldr	r2, [r4, #0]
 8021592:	4b11      	ldr	r3, [pc, #68]	; (80215d8 <HAL_TIM_MspPostInit+0x70>)
 8021594:	429a      	cmp	r2, r3
 8021596:	d11a      	bne.n	80215ce <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8021598:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 802159c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802159e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80215a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80215a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80215a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80215aa:	9300      	str	r3, [sp, #0]
 80215ac:	9b00      	ldr	r3, [sp, #0]
    HAL_PWREx_EnableVddIO2();
 80215ae:	f7e2 fc6f 	bl	8003e90 <HAL_PWREx_EnableVddIO2>
    /**TIM15 GPIO Configuration    
    PG11     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80215b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80215b6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80215b8:	2302      	movs	r3, #2
 80215ba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80215bc:	2300      	movs	r3, #0
 80215be:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80215c0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80215c2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80215c4:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80215c6:	4805      	ldr	r0, [pc, #20]	; (80215dc <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80215c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80215ca:	f7e0 ff83 	bl	80024d4 <HAL_GPIO_Init>
	}
}
 80215ce:	b006      	add	sp, #24
 80215d0:	bd10      	pop	{r4, pc}
 80215d2:	bf00      	nop
 80215d4:	40000c00 	.word	0x40000c00
 80215d8:	40014000 	.word	0x40014000
 80215dc:	48001800 	.word	0x48001800

080215e0 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80215e0:	b507      	push	{r0, r1, r2, lr}

  if(hdma2d->Instance==DMA2D)
 80215e2:	4b0d      	ldr	r3, [pc, #52]	; (8021618 <HAL_DMA2D_MspInit+0x38>)
 80215e4:	6802      	ldr	r2, [r0, #0]
 80215e6:	429a      	cmp	r2, r3
 80215e8:	d112      	bne.n	8021610 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80215ea:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80215ee:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80215f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80215f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80215f6:	649a      	str	r2, [r3, #72]	; 0x48
 80215f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80215fa:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80215fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021600:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8021602:	4611      	mov	r1, r2
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8021604:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8021606:	f7e0 f9cb 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 802160a:	205a      	movs	r0, #90	; 0x5a
 802160c:	f7e0 f9fc 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8021610:	b003      	add	sp, #12
 8021612:	f85d fb04 	ldr.w	pc, [sp], #4
 8021616:	bf00      	nop
 8021618:	4002b000 	.word	0x4002b000

0802161c <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 802161c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 802161e:	6802      	ldr	r2, [r0, #0]
 8021620:	4b17      	ldr	r3, [pc, #92]	; (8021680 <HAL_I2C_MspInit+0x64>)
 8021622:	429a      	cmp	r2, r3
 8021624:	d128      	bne.n	8021678 <HAL_I2C_MspInit+0x5c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8021626:	23c0      	movs	r3, #192	; 0xc0
 8021628:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802162a:	2312      	movs	r3, #18
 802162c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802162e:	2301      	movs	r3, #1
 8021630:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021632:	2303      	movs	r3, #3
 8021634:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8021636:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021638:	eb0d 0103 	add.w	r1, sp, r3
 802163c:	4811      	ldr	r0, [pc, #68]	; (8021684 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 802163e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021640:	f7e0 ff48 	bl	80024d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021644:	4b10      	ldr	r3, [pc, #64]	; (8021688 <HAL_I2C_MspInit+0x6c>)
 8021646:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021648:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 802164c:	659a      	str	r2, [r3, #88]	; 0x58
 802164e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8021650:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8021656:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021658:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 802165a:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 802165c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 802165e:	f7e0 f99f 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8021662:	201f      	movs	r0, #31
 8021664:	f7e0 f9d0 	bl	8001a08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8021668:	2200      	movs	r2, #0
 802166a:	2020      	movs	r0, #32
 802166c:	4611      	mov	r1, r2
 802166e:	f7e0 f997 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8021672:	2020      	movs	r0, #32
 8021674:	f7e0 f9c8 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8021678:	b007      	add	sp, #28
 802167a:	f85d fb04 	ldr.w	pc, [sp], #4
 802167e:	bf00      	nop
 8021680:	40005400 	.word	0x40005400
 8021684:	48000400 	.word	0x48000400
 8021688:	40021000 	.word	0x40021000

0802168c <HAL_SD_MspInit>:

}


void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 802168c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 802168e:	6802      	ldr	r2, [r0, #0]
 8021690:	4b18      	ldr	r3, [pc, #96]	; (80216f4 <HAL_SD_MspInit+0x68>)
 8021692:	429a      	cmp	r2, r3
{
 8021694:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 8021696:	d12b      	bne.n	80216f0 <HAL_SD_MspInit+0x64>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8021698:	4b17      	ldr	r3, [pc, #92]	; (80216f8 <HAL_SD_MspInit+0x6c>)
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802169a:	4818      	ldr	r0, [pc, #96]	; (80216fc <HAL_SD_MspInit+0x70>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 802169c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802169e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80216a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80216a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80216a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80216aa:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80216ac:	2400      	movs	r4, #0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80216ae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80216b0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80216b2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80216b6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80216b8:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80216ba:	250c      	movs	r5, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80216bc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80216be:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80216c0:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80216c2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80216c4:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80216c6:	f7e0 ff05 	bl	80024d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80216ca:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80216cc:	eb0d 0103 	add.w	r1, sp, r3
 80216d0:	480b      	ldr	r0, [pc, #44]	; (8021700 <HAL_SD_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80216d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80216d4:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80216d6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80216d8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80216da:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80216dc:	f7e0 fefa 	bl	80024d4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80216e0:	2031      	movs	r0, #49	; 0x31
 80216e2:	4622      	mov	r2, r4
 80216e4:	4621      	mov	r1, r4
 80216e6:	f7e0 f95b 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80216ea:	2031      	movs	r0, #49	; 0x31
 80216ec:	f7e0 f98c 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80216f0:	b007      	add	sp, #28
 80216f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80216f4:	50062400 	.word	0x50062400
 80216f8:	40021000 	.word	0x40021000
 80216fc:	48000800 	.word	0x48000800
 8021700:	48000c00 	.word	0x48000c00

08021704 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM15)
 8021704:	6802      	ldr	r2, [r0, #0]
 8021706:	4b08      	ldr	r3, [pc, #32]	; (8021728 <HAL_TIM_PWM_MspInit+0x24>)
 8021708:	429a      	cmp	r2, r3
{
 802170a:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM15)
 802170c:	d10a      	bne.n	8021724 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 802170e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8021712:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021714:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8021718:	661a      	str	r2, [r3, #96]	; 0x60
 802171a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802171c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021720:	9301      	str	r3, [sp, #4]
 8021722:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8021724:	b002      	add	sp, #8
 8021726:	4770      	bx	lr
 8021728:	40014000 	.word	0x40014000

0802172c <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 802172c:	b508      	push	{r3, lr}

  if(hsd->Instance==SDMMC1)
 802172e:	6802      	ldr	r2, [r0, #0]
 8021730:	4b0b      	ldr	r3, [pc, #44]	; (8021760 <HAL_SD_MspDeInit+0x34>)
 8021732:	429a      	cmp	r2, r3
 8021734:	d112      	bne.n	802175c <HAL_SD_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8021736:	4a0b      	ldr	r2, [pc, #44]	; (8021764 <HAL_SD_MspDeInit+0x38>)
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8021738:	480b      	ldr	r0, [pc, #44]	; (8021768 <HAL_SD_MspDeInit+0x3c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 802173a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 802173c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8021740:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8021742:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8021746:	f7e0 ff9d 	bl	8002684 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 802174a:	4808      	ldr	r0, [pc, #32]	; (802176c <HAL_SD_MspDeInit+0x40>)
 802174c:	2104      	movs	r1, #4
 802174e:	f7e0 ff99 	bl	8002684 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8021752:	2031      	movs	r0, #49	; 0x31
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 8021754:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8021758:	f7e0 b962 	b.w	8001a20 <HAL_NVIC_DisableIRQ>
 802175c:	bd08      	pop	{r3, pc}
 802175e:	bf00      	nop
 8021760:	50062400 	.word	0x50062400
 8021764:	40021000 	.word	0x40021000
 8021768:	48000800 	.word	0x48000800
 802176c:	48000c00 	.word	0x48000c00

08021770 <DMA1_Channel1_IRQHandler>:
*/

void DMA1_Channel1_IRQHandler(void)
{

  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8021770:	4801      	ldr	r0, [pc, #4]	; (8021778 <DMA1_Channel1_IRQHandler+0x8>)
 8021772:	f7e0 bb18 	b.w	8001da6 <HAL_DMA_IRQHandler>
 8021776:	bf00      	nop
 8021778:	20091384 	.word	0x20091384

0802177c <NMI_Handler>:
 802177c:	4770      	bx	lr

0802177e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 802177e:	e7fe      	b.n	802177e <HardFault_Handler>

08021780 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8021780:	e7fe      	b.n	8021780 <MemManage_Handler>

08021782 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8021782:	e7fe      	b.n	8021782 <BusFault_Handler>

08021784 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8021784:	e7fe      	b.n	8021784 <UsageFault_Handler>

08021786 <SVC_Handler>:
 8021786:	4770      	bx	lr

08021788 <DebugMon_Handler>:
 8021788:	4770      	bx	lr

0802178a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 802178a:	4770      	bx	lr

0802178c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 802178c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802178e:	f7df fc3f 	bl	8001010 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8021796:	f7e0 b982 	b.w	8001a9e <HAL_SYSTICK_IRQHandler>
	...

0802179c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 802179c:	4801      	ldr	r0, [pc, #4]	; (80217a4 <SPI1_IRQHandler+0x8>)
 802179e:	f7e4 b97b 	b.w	8005a98 <HAL_SPI_IRQHandler>
 80217a2:	bf00      	nop
 80217a4:	2009145c 	.word	0x2009145c

080217a8 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80217a8:	4801      	ldr	r0, [pc, #4]	; (80217b0 <TIM5_IRQHandler+0x8>)
 80217aa:	f7e4 bb56 	b.w	8005e5a <HAL_TIM_IRQHandler>
 80217ae:	bf00      	nop
 80217b0:	200910fc 	.word	0x200910fc

080217b4 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80217b4:	4801      	ldr	r0, [pc, #4]	; (80217bc <LPUART1_IRQHandler+0x8>)
 80217b6:	f7e4 bfef 	b.w	8006798 <HAL_UART_IRQHandler>
 80217ba:	bf00      	nop
 80217bc:	20091160 	.word	0x20091160

080217c0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80217c0:	4801      	ldr	r0, [pc, #4]	; (80217c8 <OTG_FS_IRQHandler+0x8>)
 80217c2:	f7e1 bed1 	b.w	8003568 <HAL_PCD_IRQHandler>
 80217c6:	bf00      	nop
 80217c8:	200917f4 	.word	0x200917f4

080217cc <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80217cc:	4801      	ldr	r0, [pc, #4]	; (80217d4 <I2C1_EV_IRQHandler+0x8>)
 80217ce:	f7e1 ba57 	b.w	8002c80 <HAL_I2C_EV_IRQHandler>
 80217d2:	bf00      	nop
 80217d4:	20090fc8 	.word	0x20090fc8

080217d8 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80217d8:	4801      	ldr	r0, [pc, #4]	; (80217e0 <I2C1_ER_IRQHandler+0x8>)
 80217da:	f7e1 bc67 	b.w	80030ac <HAL_I2C_ER_IRQHandler>
 80217de:	bf00      	nop
 80217e0:	20090fc8 	.word	0x20090fc8

080217e4 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80217e4:	4801      	ldr	r0, [pc, #4]	; (80217ec <SDMMC1_IRQHandler+0x8>)
 80217e6:	f7e3 bc35 	b.w	8005054 <HAL_SD_IRQHandler>
 80217ea:	bf00      	nop
 80217ec:	20091068 	.word	0x20091068

080217f0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80217f0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80217f2:	4b0a      	ldr	r3, [pc, #40]	; (802181c <_sbrk+0x2c>)
 80217f4:	6819      	ldr	r1, [r3, #0]
{
 80217f6:	4602      	mov	r2, r0
	if (heap_end == 0)
 80217f8:	b909      	cbnz	r1, 80217fe <_sbrk+0xe>
		heap_end = &end;
 80217fa:	4909      	ldr	r1, [pc, #36]	; (8021820 <_sbrk+0x30>)
 80217fc:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80217fe:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8021800:	4669      	mov	r1, sp
 8021802:	4402      	add	r2, r0
 8021804:	428a      	cmp	r2, r1
 8021806:	d906      	bls.n	8021816 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8021808:	f000 fa8c 	bl	8021d24 <__errno>
 802180c:	230c      	movs	r3, #12
 802180e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8021810:	f04f 30ff 	mov.w	r0, #4294967295
 8021814:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8021816:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8021818:	bd08      	pop	{r3, pc}
 802181a:	bf00      	nop
 802181c:	2008be78 	.word	0x2008be78
 8021820:	20091e0c 	.word	0x20091e0c

08021824 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021824:	490f      	ldr	r1, [pc, #60]	; (8021864 <SystemInit+0x40>)
 8021826:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 802182a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802182e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8021832:	4b0d      	ldr	r3, [pc, #52]	; (8021868 <SystemInit+0x44>)
 8021834:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8021836:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8021838:	f042 0201 	orr.w	r2, r2, #1
 802183c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 802183e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8021840:	681a      	ldr	r2, [r3, #0]
 8021842:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8021846:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 802184a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 802184c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8021850:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8021852:	681a      	ldr	r2, [r3, #0]
 8021854:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8021858:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 802185a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802185c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8021860:	608b      	str	r3, [r1, #8]
 8021862:	4770      	bx	lr
 8021864:	e000ed00 	.word	0xe000ed00
 8021868:	40021000 	.word	0x40021000

0802186c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802186c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 802186e:	2200      	movs	r2, #0
 8021870:	490a      	ldr	r1, [pc, #40]	; (802189c <MX_USB_DEVICE_Init+0x30>)
 8021872:	480b      	ldr	r0, [pc, #44]	; (80218a0 <MX_USB_DEVICE_Init+0x34>)
 8021874:	f7e6 fc2d 	bl	80080d2 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 8021878:	490a      	ldr	r1, [pc, #40]	; (80218a4 <MX_USB_DEVICE_Init+0x38>)
 802187a:	4809      	ldr	r0, [pc, #36]	; (80218a0 <MX_USB_DEVICE_Init+0x34>)
 802187c:	f7e6 fc3e 	bl	80080fc <USBD_RegisterClass>
  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 8021880:	4909      	ldr	r1, [pc, #36]	; (80218a8 <MX_USB_DEVICE_Init+0x3c>)
 8021882:	4807      	ldr	r0, [pc, #28]	; (80218a0 <MX_USB_DEVICE_Init+0x34>)
 8021884:	f7e6 fc1e 	bl	80080c4 <USBD_CUSTOM_HID_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 8021888:	4805      	ldr	r0, [pc, #20]	; (80218a0 <MX_USB_DEVICE_Init+0x34>)
 802188a:	f000 f9ac 	bl	8021be6 <USBD_LL_BatteryCharging>
 802188e:	b120      	cbz	r0, 802189a <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 8021890:	4803      	ldr	r0, [pc, #12]	; (80218a0 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8021892:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 8021896:	f7e6 bc38 	b.w	800810a <USBD_Start>
 802189a:	bd08      	pop	{r3, pc}
 802189c:	20000a88 	.word	0x20000a88
 80218a0:	20091558 	.word	0x20091558
 80218a4:	20000020 	.word	0x20000020
 80218a8:	20000a78 	.word	0x20000a78

080218ac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80218ac:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 80218ae:	6803      	ldr	r3, [r0, #0]
 80218b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80218b4:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 80218b6:	d133      	bne.n	8021920 <HAL_PCD_MspInit+0x74>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80218b8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80218bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80218be:	2302      	movs	r3, #2
 80218c0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80218c2:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80218c4:	4c19      	ldr	r4, [pc, #100]	; (802192c <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80218c6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80218c8:	2303      	movs	r3, #3
 80218ca:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80218cc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80218ce:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80218d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80218d4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80218d6:	f7e0 fdfd 	bl	80024d4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80218da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80218dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80218e0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80218e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80218e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80218e8:	9301      	str	r3, [sp, #4]
 80218ea:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80218ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80218ee:	00db      	lsls	r3, r3, #3
 80218f0:	d418      	bmi.n	8021924 <HAL_PCD_MspInit+0x78>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80218f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80218f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80218f8:	65a3      	str	r3, [r4, #88]	; 0x58
 80218fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80218fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021900:	9302      	str	r3, [sp, #8]
 8021902:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 8021904:	f7e2 fabc 	bl	8003e80 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8021908:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802190a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 802190e:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8021910:	2200      	movs	r2, #0
 8021912:	2043      	movs	r0, #67	; 0x43
 8021914:	4611      	mov	r1, r2
 8021916:	f7e0 f843 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802191a:	2043      	movs	r0, #67	; 0x43
 802191c:	f7e0 f874 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8021920:	b008      	add	sp, #32
 8021922:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8021924:	f7e2 faac 	bl	8003e80 <HAL_PWREx_EnableVddUSB>
 8021928:	e7f2      	b.n	8021910 <HAL_PCD_MspInit+0x64>
 802192a:	bf00      	nop
 802192c:	40021000 	.word	0x40021000

08021930 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8021930:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8021934:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021938:	f7e6 bbfe 	b.w	8008138 <USBD_LL_SetupStage>

0802193c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 802193c:	231c      	movs	r3, #28
 802193e:	fb03 0301 	mla	r3, r3, r1, r0
 8021942:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021946:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 802194a:	f7e6 bc22 	b.w	8008192 <USBD_LL_DataOutStage>

0802194e <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802194e:	231c      	movs	r3, #28
 8021950:	fb03 0301 	mla	r3, r3, r1, r0
 8021954:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802195a:	f7e6 bc52 	b.w	8008202 <USBD_LL_DataInStage>

0802195e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802195e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021962:	f7e6 bce3 	b.w	800832c <USBD_LL_SOF>

08021966 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8021966:	b510      	push	{r4, lr}
 8021968:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802196a:	2101      	movs	r1, #1
 802196c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021970:	f7e6 fcca 	bl	8008308 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8021974:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8021978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802197c:	f7e6 bc9d 	b.w	80082ba <USBD_LL_Reset>

08021980 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021980:	6802      	ldr	r2, [r0, #0]
 8021982:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 8021986:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021988:	f043 0301 	orr.w	r3, r3, #1
{
 802198c:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 802198e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8021992:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021996:	f7e6 fcba 	bl	800830e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802199a:	6a23      	ldr	r3, [r4, #32]
 802199c:	b123      	cbz	r3, 80219a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802199e:	4a03      	ldr	r2, [pc, #12]	; (80219ac <HAL_PCD_SuspendCallback+0x2c>)
 80219a0:	6913      	ldr	r3, [r2, #16]
 80219a2:	f043 0306 	orr.w	r3, r3, #6
 80219a6:	6113      	str	r3, [r2, #16]
 80219a8:	bd10      	pop	{r4, pc}
 80219aa:	bf00      	nop
 80219ac:	e000ed00 	.word	0xe000ed00

080219b0 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80219b0:	6802      	ldr	r2, [r0, #0]
 80219b2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80219b6:	f023 0301 	bic.w	r3, r3, #1
{
 80219ba:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80219bc:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80219c0:	6a03      	ldr	r3, [r0, #32]
{
 80219c2:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80219c4:	b133      	cbz	r3, 80219d4 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80219c6:	4a06      	ldr	r2, [pc, #24]	; (80219e0 <HAL_PCD_ResumeCallback+0x30>)
 80219c8:	6913      	ldr	r3, [r2, #16]
 80219ca:	f023 0306 	bic.w	r3, r3, #6
 80219ce:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 80219d0:	f7fe f8d6 	bl	801fb80 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80219d4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80219d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80219dc:	f7e6 bca0 	b.w	8008320 <USBD_LL_Resume>
 80219e0:	e000ed00 	.word	0xe000ed00

080219e4 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80219e4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80219e8:	f7e6 bcae 	b.w	8008348 <USBD_LL_IsoOUTIncomplete>

080219ec <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80219ec:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80219f0:	f7e6 bca8 	b.w	8008344 <USBD_LL_IsoINIncomplete>

080219f4 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80219f4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80219f8:	f7e6 bca8 	b.w	800834c <USBD_LL_DevConnected>

080219fc <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80219fc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021a00:	f7e6 bca6 	b.w	8008350 <USBD_LL_DevDisconnected>

08021a04 <USBD_LL_Init>:
{
 8021a04:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 8021a06:	7802      	ldrb	r2, [r0, #0]
 8021a08:	bb4a      	cbnz	r2, 8021a5e <USBD_LL_Init+0x5a>
  hpcd_USB_OTG_FS.pData = pdev;
 8021a0a:	4b16      	ldr	r3, [pc, #88]	; (8021a64 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8021a0c:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8021a0e:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8021a12:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8021a16:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8021a1a:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8021a1e:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8021a20:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8021a22:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8021a24:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8021a26:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8021a28:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8021a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8021a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8021a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8021a30:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8021a32:	f7e1 fd06 	bl	8003442 <HAL_PCD_Init>
 8021a36:	b120      	cbz	r0, 8021a42 <USBD_LL_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 8021a38:	f240 116b 	movw	r1, #363	; 0x16b
 8021a3c:	480a      	ldr	r0, [pc, #40]	; (8021a68 <USBD_LL_Init+0x64>)
 8021a3e:	f7ff faf9 	bl	8021034 <_Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8021a42:	2180      	movs	r1, #128	; 0x80
 8021a44:	4807      	ldr	r0, [pc, #28]	; (8021a64 <USBD_LL_Init+0x60>)
 8021a46:	f7e2 f98d 	bl	8003d64 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8021a4a:	2240      	movs	r2, #64	; 0x40
 8021a4c:	2100      	movs	r1, #0
 8021a4e:	4805      	ldr	r0, [pc, #20]	; (8021a64 <USBD_LL_Init+0x60>)
 8021a50:	f7e2 f967 	bl	8003d22 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8021a54:	2280      	movs	r2, #128	; 0x80
 8021a56:	2101      	movs	r1, #1
 8021a58:	4802      	ldr	r0, [pc, #8]	; (8021a64 <USBD_LL_Init+0x60>)
 8021a5a:	f7e2 f962 	bl	8003d22 <HAL_PCDEx_SetTxFiFo>
}
 8021a5e:	2000      	movs	r0, #0
 8021a60:	bd08      	pop	{r3, pc}
 8021a62:	bf00      	nop
 8021a64:	200917f4 	.word	0x200917f4
 8021a68:	080338e8 	.word	0x080338e8

08021a6c <USBD_LL_Start>:
{
 8021a6c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8021a6e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021a72:	f7e1 fd63 	bl	800353c <HAL_PCD_Start>
 8021a76:	2803      	cmp	r0, #3
 8021a78:	bf9a      	itte	ls
 8021a7a:	4b02      	ldrls	r3, [pc, #8]	; (8021a84 <USBD_LL_Start+0x18>)
 8021a7c:	5c18      	ldrbls	r0, [r3, r0]
 8021a7e:	2002      	movhi	r0, #2
}
 8021a80:	bd08      	pop	{r3, pc}
 8021a82:	bf00      	nop
 8021a84:	080338e4 	.word	0x080338e4

08021a88 <USBD_LL_OpenEP>:
{
 8021a88:	b510      	push	{r4, lr}
 8021a8a:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021a8c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021a90:	4613      	mov	r3, r2
 8021a92:	4622      	mov	r2, r4
 8021a94:	f7e2 f842 	bl	8003b1c <HAL_PCD_EP_Open>
 8021a98:	2803      	cmp	r0, #3
 8021a9a:	bf9a      	itte	ls
 8021a9c:	4b01      	ldrls	r3, [pc, #4]	; (8021aa4 <USBD_LL_OpenEP+0x1c>)
 8021a9e:	5c18      	ldrbls	r0, [r3, r0]
 8021aa0:	2002      	movhi	r0, #2
}
 8021aa2:	bd10      	pop	{r4, pc}
 8021aa4:	080338e4 	.word	0x080338e4

08021aa8 <USBD_LL_CloseEP>:
{
 8021aa8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8021aaa:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021aae:	f7e2 f86a 	bl	8003b86 <HAL_PCD_EP_Close>
 8021ab2:	2803      	cmp	r0, #3
 8021ab4:	bf9a      	itte	ls
 8021ab6:	4b02      	ldrls	r3, [pc, #8]	; (8021ac0 <USBD_LL_CloseEP+0x18>)
 8021ab8:	5c18      	ldrbls	r0, [r3, r0]
 8021aba:	2002      	movhi	r0, #2
}
 8021abc:	bd08      	pop	{r3, pc}
 8021abe:	bf00      	nop
 8021ac0:	080338e4 	.word	0x080338e4

08021ac4 <USBD_LL_StallEP>:
{
 8021ac4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8021ac6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021aca:	f7e2 f8bf 	bl	8003c4c <HAL_PCD_EP_SetStall>
 8021ace:	2803      	cmp	r0, #3
 8021ad0:	bf9a      	itte	ls
 8021ad2:	4b02      	ldrls	r3, [pc, #8]	; (8021adc <USBD_LL_StallEP+0x18>)
 8021ad4:	5c18      	ldrbls	r0, [r3, r0]
 8021ad6:	2002      	movhi	r0, #2
}
 8021ad8:	bd08      	pop	{r3, pc}
 8021ada:	bf00      	nop
 8021adc:	080338e4 	.word	0x080338e4

08021ae0 <USBD_LL_ClearStallEP>:
{
 8021ae0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8021ae2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021ae6:	f7e2 f8ea 	bl	8003cbe <HAL_PCD_EP_ClrStall>
 8021aea:	2803      	cmp	r0, #3
 8021aec:	bf9a      	itte	ls
 8021aee:	4b02      	ldrls	r3, [pc, #8]	; (8021af8 <USBD_LL_ClearStallEP+0x18>)
 8021af0:	5c18      	ldrbls	r0, [r3, r0]
 8021af2:	2002      	movhi	r0, #2
}
 8021af4:	bd08      	pop	{r3, pc}
 8021af6:	bf00      	nop
 8021af8:	080338e4 	.word	0x080338e4

08021afc <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8021afc:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8021b00:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8021b04:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8021b08:	bf1b      	ittet	ne
 8021b0a:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8021b0e:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8021b12:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8021b16:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8021b1a:	bf08      	it	eq
 8021b1c:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 8021b20:	4770      	bx	lr
	...

08021b24 <USBD_LL_SetUSBAddress>:
{
 8021b24:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8021b26:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021b2a:	f7e1 ffe3 	bl	8003af4 <HAL_PCD_SetAddress>
 8021b2e:	2803      	cmp	r0, #3
 8021b30:	bf9a      	itte	ls
 8021b32:	4b02      	ldrls	r3, [pc, #8]	; (8021b3c <USBD_LL_SetUSBAddress+0x18>)
 8021b34:	5c18      	ldrbls	r0, [r3, r0]
 8021b36:	2002      	movhi	r0, #2
}
 8021b38:	bd08      	pop	{r3, pc}
 8021b3a:	bf00      	nop
 8021b3c:	080338e4 	.word	0x080338e4

08021b40 <USBD_LL_Transmit>:
{
 8021b40:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8021b42:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021b46:	f7e2 f866 	bl	8003c16 <HAL_PCD_EP_Transmit>
 8021b4a:	2803      	cmp	r0, #3
 8021b4c:	bf9a      	itte	ls
 8021b4e:	4b02      	ldrls	r3, [pc, #8]	; (8021b58 <USBD_LL_Transmit+0x18>)
 8021b50:	5c18      	ldrbls	r0, [r3, r0]
 8021b52:	2002      	movhi	r0, #2
}
 8021b54:	bd08      	pop	{r3, pc}
 8021b56:	bf00      	nop
 8021b58:	080338e4 	.word	0x080338e4

08021b5c <USBD_LL_PrepareReceive>:
{
 8021b5c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021b5e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021b62:	f7e2 f83a 	bl	8003bda <HAL_PCD_EP_Receive>
 8021b66:	2803      	cmp	r0, #3
 8021b68:	bf9a      	itte	ls
 8021b6a:	4b02      	ldrls	r3, [pc, #8]	; (8021b74 <USBD_LL_PrepareReceive+0x18>)
 8021b6c:	5c18      	ldrbls	r0, [r3, r0]
 8021b6e:	2002      	movhi	r0, #2
}
 8021b70:	bd08      	pop	{r3, pc}
 8021b72:	bf00      	nop
 8021b74:	080338e4 	.word	0x080338e4

08021b78 <HAL_PCDEx_LPM_Callback>:
{
 8021b78:	b510      	push	{r4, lr}
 8021b7a:	4604      	mov	r4, r0
  switch (msg)
 8021b7c:	b111      	cbz	r1, 8021b84 <HAL_PCDEx_LPM_Callback+0xc>
 8021b7e:	2901      	cmp	r1, #1
 8021b80:	d016      	beq.n	8021bb0 <HAL_PCDEx_LPM_Callback+0x38>
 8021b82:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8021b84:	6a03      	ldr	r3, [r0, #32]
 8021b86:	b133      	cbz	r3, 8021b96 <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 8021b88:	f7fd fffa 	bl	801fb80 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021b8c:	4a12      	ldr	r2, [pc, #72]	; (8021bd8 <HAL_PCDEx_LPM_Callback+0x60>)
 8021b8e:	6913      	ldr	r3, [r2, #16]
 8021b90:	f023 0306 	bic.w	r3, r3, #6
 8021b94:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8021b96:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8021b98:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8021b9c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8021ba0:	f023 0301 	bic.w	r3, r3, #1
 8021ba4:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8021ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8021bac:	f7e6 bbb8 	b.w	8008320 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021bb0:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8021bb2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021bb6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8021bba:	f043 0301 	orr.w	r3, r3, #1
 8021bbe:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8021bc2:	f7e6 fba4 	bl	800830e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8021bc6:	6a23      	ldr	r3, [r4, #32]
 8021bc8:	b123      	cbz	r3, 8021bd4 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021bca:	4a03      	ldr	r2, [pc, #12]	; (8021bd8 <HAL_PCDEx_LPM_Callback+0x60>)
 8021bcc:	6913      	ldr	r3, [r2, #16]
 8021bce:	f043 0306 	orr.w	r3, r3, #6
 8021bd2:	6113      	str	r3, [r2, #16]
 8021bd4:	bd10      	pop	{r4, pc}
 8021bd6:	bf00      	nop
 8021bd8:	e000ed00 	.word	0xe000ed00

08021bdc <USBD_static_malloc>:
}
 8021bdc:	4800      	ldr	r0, [pc, #0]	; (8021be0 <USBD_static_malloc+0x4>)
 8021bde:	4770      	bx	lr
 8021be0:	2008be7c 	.word	0x2008be7c

08021be4 <USBD_static_free>:
{
 8021be4:	4770      	bx	lr

08021be6 <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 8021be6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8021bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021bec:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8021bee:	bf14      	ite	ne
 8021bf0:	2002      	movne	r0, #2
 8021bf2:	2000      	moveq	r0, #0
 8021bf4:	4770      	bx	lr

08021bf6 <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8021bf6:	2000      	movs	r0, #0
 8021bf8:	4770      	bx	lr
	...

08021bfc <CUSTOM_HID_OutEvent_FS>:
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 8021bfc:	4b05      	ldr	r3, [pc, #20]	; (8021c14 <CUSTOM_HID_OutEvent_FS+0x18>)
 
  for (uint8_t i = 0; i < 12; i++)
  {
    dataToReceive[i] = hhid->Report_buf[i];
 8021bfe:	4a06      	ldr	r2, [pc, #24]	; (8021c18 <CUSTOM_HID_OutEvent_FS+0x1c>)
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 8021c00:	f8d3 0290 	ldr.w	r0, [r3, #656]	; 0x290
 8021c04:	2300      	movs	r3, #0
    dataToReceive[i] = hhid->Report_buf[i];
 8021c06:	5cc1      	ldrb	r1, [r0, r3]
 8021c08:	5499      	strb	r1, [r3, r2]
 8021c0a:	3301      	adds	r3, #1
  for (uint8_t i = 0; i < 12; i++)
 8021c0c:	2b0c      	cmp	r3, #12
 8021c0e:	d1fa      	bne.n	8021c06 <CUSTOM_HID_OutEvent_FS+0xa>
  }
 
 
  return (USBD_OK);
}
 8021c10:	2000      	movs	r0, #0
 8021c12:	4770      	bx	lr
 8021c14:	20091558 	.word	0x20091558
 8021c18:	2008adf4 	.word	0x2008adf4

08021c1c <CUSTOM_HID_Init_FS>:
 8021c1c:	2000      	movs	r0, #0
 8021c1e:	4770      	bx	lr

08021c20 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8021c20:	2312      	movs	r3, #18
 8021c22:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8021c24:	4800      	ldr	r0, [pc, #0]	; (8021c28 <USBD_FS_DeviceDescriptor+0x8>)
 8021c26:	4770      	bx	lr
 8021c28:	20000ab4 	.word	0x20000ab4

08021c2c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8021c2c:	2304      	movs	r3, #4
 8021c2e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8021c30:	4800      	ldr	r0, [pc, #0]	; (8021c34 <USBD_FS_LangIDStrDescriptor+0x8>)
 8021c32:	4770      	bx	lr
 8021c34:	20000ac8 	.word	0x20000ac8

08021c38 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8021c38:	230c      	movs	r3, #12
 8021c3a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8021c3c:	4800      	ldr	r0, [pc, #0]	; (8021c40 <USBD_FS_USR_BOSDescriptor+0x8>)
 8021c3e:	4770      	bx	lr
 8021c40:	20000aa8 	.word	0x20000aa8

08021c44 <USBD_FS_ManufacturerStrDescriptor>:
{
 8021c44:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8021c46:	4c04      	ldr	r4, [pc, #16]	; (8021c58 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8021c48:	4804      	ldr	r0, [pc, #16]	; (8021c5c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8021c4a:	460a      	mov	r2, r1
 8021c4c:	4621      	mov	r1, r4
 8021c4e:	f7e6 fd8b 	bl	8008768 <USBD_GetString>
}
 8021c52:	4620      	mov	r0, r4
 8021c54:	bd10      	pop	{r4, pc}
 8021c56:	bf00      	nop
 8021c58:	20091bfc 	.word	0x20091bfc
 8021c5c:	08033922 	.word	0x08033922

08021c60 <USBD_FS_ProductStrDescriptor>:
{
 8021c60:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8021c62:	4c04      	ldr	r4, [pc, #16]	; (8021c74 <USBD_FS_ProductStrDescriptor+0x14>)
 8021c64:	4804      	ldr	r0, [pc, #16]	; (8021c78 <USBD_FS_ProductStrDescriptor+0x18>)
 8021c66:	460a      	mov	r2, r1
 8021c68:	4621      	mov	r1, r4
 8021c6a:	f7e6 fd7d 	bl	8008768 <USBD_GetString>
}
 8021c6e:	4620      	mov	r0, r4
 8021c70:	bd10      	pop	{r4, pc}
 8021c72:	bf00      	nop
 8021c74:	20091bfc 	.word	0x20091bfc
 8021c78:	08033929 	.word	0x08033929

08021c7c <USBD_FS_SerialStrDescriptor>:
{
 8021c7c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8021c7e:	4c04      	ldr	r4, [pc, #16]	; (8021c90 <USBD_FS_SerialStrDescriptor+0x14>)
 8021c80:	4804      	ldr	r0, [pc, #16]	; (8021c94 <USBD_FS_SerialStrDescriptor+0x18>)
 8021c82:	460a      	mov	r2, r1
 8021c84:	4621      	mov	r1, r4
 8021c86:	f7e6 fd6f 	bl	8008768 <USBD_GetString>
}
 8021c8a:	4620      	mov	r0, r4
 8021c8c:	bd10      	pop	{r4, pc}
 8021c8e:	bf00      	nop
 8021c90:	20091bfc 	.word	0x20091bfc
 8021c94:	08033947 	.word	0x08033947

08021c98 <USBD_FS_ConfigStrDescriptor>:
{
 8021c98:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8021c9a:	4c04      	ldr	r4, [pc, #16]	; (8021cac <USBD_FS_ConfigStrDescriptor+0x14>)
 8021c9c:	4804      	ldr	r0, [pc, #16]	; (8021cb0 <USBD_FS_ConfigStrDescriptor+0x18>)
 8021c9e:	460a      	mov	r2, r1
 8021ca0:	4621      	mov	r1, r4
 8021ca2:	f7e6 fd61 	bl	8008768 <USBD_GetString>
}
 8021ca6:	4620      	mov	r0, r4
 8021ca8:	bd10      	pop	{r4, pc}
 8021caa:	bf00      	nop
 8021cac:	20091bfc 	.word	0x20091bfc
 8021cb0:	080338fb 	.word	0x080338fb

08021cb4 <USBD_FS_InterfaceStrDescriptor>:
{
 8021cb4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8021cb6:	4c04      	ldr	r4, [pc, #16]	; (8021cc8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8021cb8:	4804      	ldr	r0, [pc, #16]	; (8021ccc <USBD_FS_InterfaceStrDescriptor+0x18>)
 8021cba:	460a      	mov	r2, r1
 8021cbc:	4621      	mov	r1, r4
 8021cbe:	f7e6 fd53 	bl	8008768 <USBD_GetString>
}
 8021cc2:	4620      	mov	r0, r4
 8021cc4:	bd10      	pop	{r4, pc}
 8021cc6:	bf00      	nop
 8021cc8:	20091bfc 	.word	0x20091bfc
 8021ccc:	0803390d 	.word	0x0803390d

08021cd0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8021cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021d08 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8021cd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8021cd6:	e003      	b.n	8021ce0 <LoopCopyDataInit>

08021cd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8021cd8:	4b0c      	ldr	r3, [pc, #48]	; (8021d0c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8021cda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8021cdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8021cde:	3104      	adds	r1, #4

08021ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8021ce0:	480b      	ldr	r0, [pc, #44]	; (8021d10 <LoopForever+0xa>)
	ldr	r3, =_edata
 8021ce2:	4b0c      	ldr	r3, [pc, #48]	; (8021d14 <LoopForever+0xe>)
	adds	r2, r0, r1
 8021ce4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8021ce6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8021ce8:	d3f6      	bcc.n	8021cd8 <CopyDataInit>
	ldr	r2, =_sbss
 8021cea:	4a0b      	ldr	r2, [pc, #44]	; (8021d18 <LoopForever+0x12>)
	b	LoopFillZerobss
 8021cec:	e002      	b.n	8021cf4 <LoopFillZerobss>

08021cee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8021cee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8021cf0:	f842 3b04 	str.w	r3, [r2], #4

08021cf4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8021cf4:	4b09      	ldr	r3, [pc, #36]	; (8021d1c <LoopForever+0x16>)
	cmp	r2, r3
 8021cf6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8021cf8:	d3f9      	bcc.n	8021cee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8021cfa:	f7ff fd93 	bl	8021824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021cfe:	f000 f817 	bl	8021d30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8021d02:	f7fd ffa9 	bl	801fc58 <main>

08021d06 <LoopForever>:

LoopForever:
    b LoopForever
 8021d06:	e7fe      	b.n	8021d06 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8021d08:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8021d0c:	08033c50 	.word	0x08033c50
	ldr	r0, =_sdata
 8021d10:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8021d14:	20001140 	.word	0x20001140
	ldr	r2, =_sbss
 8021d18:	20001140 	.word	0x20001140
	ldr	r3, = _ebss
 8021d1c:	20091e0c 	.word	0x20091e0c

08021d20 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8021d20:	e7fe      	b.n	8021d20 <ADC1_IRQHandler>
	...

08021d24 <__errno>:
 8021d24:	4b01      	ldr	r3, [pc, #4]	; (8021d2c <__errno+0x8>)
 8021d26:	6818      	ldr	r0, [r3, #0]
 8021d28:	4770      	bx	lr
 8021d2a:	bf00      	nop
 8021d2c:	20000acc 	.word	0x20000acc

08021d30 <__libc_init_array>:
 8021d30:	b570      	push	{r4, r5, r6, lr}
 8021d32:	4e0d      	ldr	r6, [pc, #52]	; (8021d68 <__libc_init_array+0x38>)
 8021d34:	4c0d      	ldr	r4, [pc, #52]	; (8021d6c <__libc_init_array+0x3c>)
 8021d36:	1ba4      	subs	r4, r4, r6
 8021d38:	10a4      	asrs	r4, r4, #2
 8021d3a:	2500      	movs	r5, #0
 8021d3c:	42a5      	cmp	r5, r4
 8021d3e:	d109      	bne.n	8021d54 <__libc_init_array+0x24>
 8021d40:	4e0b      	ldr	r6, [pc, #44]	; (8021d70 <__libc_init_array+0x40>)
 8021d42:	4c0c      	ldr	r4, [pc, #48]	; (8021d74 <__libc_init_array+0x44>)
 8021d44:	f004 fdfc 	bl	8026940 <_init>
 8021d48:	1ba4      	subs	r4, r4, r6
 8021d4a:	10a4      	asrs	r4, r4, #2
 8021d4c:	2500      	movs	r5, #0
 8021d4e:	42a5      	cmp	r5, r4
 8021d50:	d105      	bne.n	8021d5e <__libc_init_array+0x2e>
 8021d52:	bd70      	pop	{r4, r5, r6, pc}
 8021d54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021d58:	4798      	blx	r3
 8021d5a:	3501      	adds	r5, #1
 8021d5c:	e7ee      	b.n	8021d3c <__libc_init_array+0xc>
 8021d5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021d62:	4798      	blx	r3
 8021d64:	3501      	adds	r5, #1
 8021d66:	e7f2      	b.n	8021d4e <__libc_init_array+0x1e>
 8021d68:	08033c48 	.word	0x08033c48
 8021d6c:	08033c48 	.word	0x08033c48
 8021d70:	08033c48 	.word	0x08033c48
 8021d74:	08033c4c 	.word	0x08033c4c

08021d78 <memcpy>:
 8021d78:	b510      	push	{r4, lr}
 8021d7a:	1e43      	subs	r3, r0, #1
 8021d7c:	440a      	add	r2, r1
 8021d7e:	4291      	cmp	r1, r2
 8021d80:	d100      	bne.n	8021d84 <memcpy+0xc>
 8021d82:	bd10      	pop	{r4, pc}
 8021d84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021d88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021d8c:	e7f7      	b.n	8021d7e <memcpy+0x6>

08021d8e <memset>:
 8021d8e:	4402      	add	r2, r0
 8021d90:	4603      	mov	r3, r0
 8021d92:	4293      	cmp	r3, r2
 8021d94:	d100      	bne.n	8021d98 <memset+0xa>
 8021d96:	4770      	bx	lr
 8021d98:	f803 1b01 	strb.w	r1, [r3], #1
 8021d9c:	e7f9      	b.n	8021d92 <memset+0x4>
	...

08021da0 <sprintf>:
 8021da0:	b40e      	push	{r1, r2, r3}
 8021da2:	b500      	push	{lr}
 8021da4:	b09c      	sub	sp, #112	; 0x70
 8021da6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8021daa:	ab1d      	add	r3, sp, #116	; 0x74
 8021dac:	f8ad 1014 	strh.w	r1, [sp, #20]
 8021db0:	9002      	str	r0, [sp, #8]
 8021db2:	9006      	str	r0, [sp, #24]
 8021db4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021db8:	480a      	ldr	r0, [pc, #40]	; (8021de4 <sprintf+0x44>)
 8021dba:	9104      	str	r1, [sp, #16]
 8021dbc:	9107      	str	r1, [sp, #28]
 8021dbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8021dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8021dc6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8021dca:	6800      	ldr	r0, [r0, #0]
 8021dcc:	9301      	str	r3, [sp, #4]
 8021dce:	a902      	add	r1, sp, #8
 8021dd0:	f000 f822 	bl	8021e18 <_svfprintf_r>
 8021dd4:	9b02      	ldr	r3, [sp, #8]
 8021dd6:	2200      	movs	r2, #0
 8021dd8:	701a      	strb	r2, [r3, #0]
 8021dda:	b01c      	add	sp, #112	; 0x70
 8021ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8021de0:	b003      	add	sp, #12
 8021de2:	4770      	bx	lr
 8021de4:	20000acc 	.word	0x20000acc

08021de8 <strcat>:
 8021de8:	b510      	push	{r4, lr}
 8021dea:	4602      	mov	r2, r0
 8021dec:	4613      	mov	r3, r2
 8021dee:	3201      	adds	r2, #1
 8021df0:	781c      	ldrb	r4, [r3, #0]
 8021df2:	2c00      	cmp	r4, #0
 8021df4:	d1fa      	bne.n	8021dec <strcat+0x4>
 8021df6:	3b01      	subs	r3, #1
 8021df8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021dfc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021e00:	2a00      	cmp	r2, #0
 8021e02:	d1f9      	bne.n	8021df8 <strcat+0x10>
 8021e04:	bd10      	pop	{r4, pc}

08021e06 <strcpy>:
 8021e06:	4603      	mov	r3, r0
 8021e08:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021e0c:	f803 2b01 	strb.w	r2, [r3], #1
 8021e10:	2a00      	cmp	r2, #0
 8021e12:	d1f9      	bne.n	8021e08 <strcpy+0x2>
 8021e14:	4770      	bx	lr
	...

08021e18 <_svfprintf_r>:
 8021e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e1c:	b0bd      	sub	sp, #244	; 0xf4
 8021e1e:	468a      	mov	sl, r1
 8021e20:	4615      	mov	r5, r2
 8021e22:	461f      	mov	r7, r3
 8021e24:	4683      	mov	fp, r0
 8021e26:	f001 fe25 	bl	8023a74 <_localeconv_r>
 8021e2a:	6803      	ldr	r3, [r0, #0]
 8021e2c:	930d      	str	r3, [sp, #52]	; 0x34
 8021e2e:	4618      	mov	r0, r3
 8021e30:	f7de fa36 	bl	80002a0 <strlen>
 8021e34:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8021e38:	9008      	str	r0, [sp, #32]
 8021e3a:	061b      	lsls	r3, r3, #24
 8021e3c:	d518      	bpl.n	8021e70 <_svfprintf_r+0x58>
 8021e3e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8021e42:	b9ab      	cbnz	r3, 8021e70 <_svfprintf_r+0x58>
 8021e44:	2140      	movs	r1, #64	; 0x40
 8021e46:	4658      	mov	r0, fp
 8021e48:	f001 fe2a 	bl	8023aa0 <_malloc_r>
 8021e4c:	f8ca 0000 	str.w	r0, [sl]
 8021e50:	f8ca 0010 	str.w	r0, [sl, #16]
 8021e54:	b948      	cbnz	r0, 8021e6a <_svfprintf_r+0x52>
 8021e56:	230c      	movs	r3, #12
 8021e58:	f8cb 3000 	str.w	r3, [fp]
 8021e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8021e60:	9309      	str	r3, [sp, #36]	; 0x24
 8021e62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021e64:	b03d      	add	sp, #244	; 0xf4
 8021e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e6a:	2340      	movs	r3, #64	; 0x40
 8021e6c:	f8ca 3014 	str.w	r3, [sl, #20]
 8021e70:	ed9f 7b99 	vldr	d7, [pc, #612]	; 80220d8 <_svfprintf_r+0x2c0>
 8021e74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8021e78:	2300      	movs	r3, #0
 8021e7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8021e7c:	941f      	str	r4, [sp, #124]	; 0x7c
 8021e7e:	9321      	str	r3, [sp, #132]	; 0x84
 8021e80:	9320      	str	r3, [sp, #128]	; 0x80
 8021e82:	9505      	str	r5, [sp, #20]
 8021e84:	9303      	str	r3, [sp, #12]
 8021e86:	9311      	str	r3, [sp, #68]	; 0x44
 8021e88:	9310      	str	r3, [sp, #64]	; 0x40
 8021e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8021e8c:	9d05      	ldr	r5, [sp, #20]
 8021e8e:	462b      	mov	r3, r5
 8021e90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021e94:	b112      	cbz	r2, 8021e9c <_svfprintf_r+0x84>
 8021e96:	2a25      	cmp	r2, #37	; 0x25
 8021e98:	f040 8083 	bne.w	8021fa2 <_svfprintf_r+0x18a>
 8021e9c:	9b05      	ldr	r3, [sp, #20]
 8021e9e:	1aee      	subs	r6, r5, r3
 8021ea0:	d00d      	beq.n	8021ebe <_svfprintf_r+0xa6>
 8021ea2:	e884 0048 	stmia.w	r4, {r3, r6}
 8021ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021ea8:	4433      	add	r3, r6
 8021eaa:	9321      	str	r3, [sp, #132]	; 0x84
 8021eac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021eae:	3301      	adds	r3, #1
 8021eb0:	2b07      	cmp	r3, #7
 8021eb2:	9320      	str	r3, [sp, #128]	; 0x80
 8021eb4:	dc77      	bgt.n	8021fa6 <_svfprintf_r+0x18e>
 8021eb6:	3408      	adds	r4, #8
 8021eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021eba:	4433      	add	r3, r6
 8021ebc:	9309      	str	r3, [sp, #36]	; 0x24
 8021ebe:	782b      	ldrb	r3, [r5, #0]
 8021ec0:	2b00      	cmp	r3, #0
 8021ec2:	f000 8729 	beq.w	8022d18 <_svfprintf_r+0xf00>
 8021ec6:	2300      	movs	r3, #0
 8021ec8:	1c69      	adds	r1, r5, #1
 8021eca:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8021ece:	461a      	mov	r2, r3
 8021ed0:	f04f 39ff 	mov.w	r9, #4294967295
 8021ed4:	930a      	str	r3, [sp, #40]	; 0x28
 8021ed6:	461d      	mov	r5, r3
 8021ed8:	200a      	movs	r0, #10
 8021eda:	1c4e      	adds	r6, r1, #1
 8021edc:	7809      	ldrb	r1, [r1, #0]
 8021ede:	9605      	str	r6, [sp, #20]
 8021ee0:	9102      	str	r1, [sp, #8]
 8021ee2:	9902      	ldr	r1, [sp, #8]
 8021ee4:	3920      	subs	r1, #32
 8021ee6:	2958      	cmp	r1, #88	; 0x58
 8021ee8:	f200 8418 	bhi.w	802271c <_svfprintf_r+0x904>
 8021eec:	e8df f011 	tbh	[pc, r1, lsl #1]
 8021ef0:	041600a6 	.word	0x041600a6
 8021ef4:	00ab0416 	.word	0x00ab0416
 8021ef8:	04160416 	.word	0x04160416
 8021efc:	04160416 	.word	0x04160416
 8021f00:	04160416 	.word	0x04160416
 8021f04:	006500ae 	.word	0x006500ae
 8021f08:	00b70416 	.word	0x00b70416
 8021f0c:	041600ba 	.word	0x041600ba
 8021f10:	00da00d7 	.word	0x00da00d7
 8021f14:	00da00da 	.word	0x00da00da
 8021f18:	00da00da 	.word	0x00da00da
 8021f1c:	00da00da 	.word	0x00da00da
 8021f20:	00da00da 	.word	0x00da00da
 8021f24:	04160416 	.word	0x04160416
 8021f28:	04160416 	.word	0x04160416
 8021f2c:	04160416 	.word	0x04160416
 8021f30:	04160416 	.word	0x04160416
 8021f34:	04160416 	.word	0x04160416
 8021f38:	012b0115 	.word	0x012b0115
 8021f3c:	012b0416 	.word	0x012b0416
 8021f40:	04160416 	.word	0x04160416
 8021f44:	04160416 	.word	0x04160416
 8021f48:	041600ed 	.word	0x041600ed
 8021f4c:	03400416 	.word	0x03400416
 8021f50:	04160416 	.word	0x04160416
 8021f54:	04160416 	.word	0x04160416
 8021f58:	03a80416 	.word	0x03a80416
 8021f5c:	04160416 	.word	0x04160416
 8021f60:	04160086 	.word	0x04160086
 8021f64:	04160416 	.word	0x04160416
 8021f68:	04160416 	.word	0x04160416
 8021f6c:	04160416 	.word	0x04160416
 8021f70:	04160416 	.word	0x04160416
 8021f74:	01070416 	.word	0x01070416
 8021f78:	012b006b 	.word	0x012b006b
 8021f7c:	012b012b 	.word	0x012b012b
 8021f80:	006b00f0 	.word	0x006b00f0
 8021f84:	04160416 	.word	0x04160416
 8021f88:	041600fa 	.word	0x041600fa
 8021f8c:	03420322 	.word	0x03420322
 8021f90:	01010376 	.word	0x01010376
 8021f94:	03870416 	.word	0x03870416
 8021f98:	03aa0416 	.word	0x03aa0416
 8021f9c:	04160416 	.word	0x04160416
 8021fa0:	03c2      	.short	0x03c2
 8021fa2:	461d      	mov	r5, r3
 8021fa4:	e773      	b.n	8021e8e <_svfprintf_r+0x76>
 8021fa6:	aa1f      	add	r2, sp, #124	; 0x7c
 8021fa8:	4651      	mov	r1, sl
 8021faa:	4658      	mov	r0, fp
 8021fac:	f002 fa72 	bl	8024494 <__ssprint_r>
 8021fb0:	2800      	cmp	r0, #0
 8021fb2:	f040 8692 	bne.w	8022cda <_svfprintf_r+0xec2>
 8021fb6:	ac2c      	add	r4, sp, #176	; 0xb0
 8021fb8:	e77e      	b.n	8021eb8 <_svfprintf_r+0xa0>
 8021fba:	2301      	movs	r3, #1
 8021fbc:	222b      	movs	r2, #43	; 0x2b
 8021fbe:	9905      	ldr	r1, [sp, #20]
 8021fc0:	e78b      	b.n	8021eda <_svfprintf_r+0xc2>
 8021fc2:	460f      	mov	r7, r1
 8021fc4:	e7fb      	b.n	8021fbe <_svfprintf_r+0x1a6>
 8021fc6:	b10b      	cbz	r3, 8021fcc <_svfprintf_r+0x1b4>
 8021fc8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8021fcc:	06ae      	lsls	r6, r5, #26
 8021fce:	f140 80aa 	bpl.w	8022126 <_svfprintf_r+0x30e>
 8021fd2:	3707      	adds	r7, #7
 8021fd4:	f027 0707 	bic.w	r7, r7, #7
 8021fd8:	f107 0308 	add.w	r3, r7, #8
 8021fdc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8021fe0:	9304      	str	r3, [sp, #16]
 8021fe2:	2e00      	cmp	r6, #0
 8021fe4:	f177 0300 	sbcs.w	r3, r7, #0
 8021fe8:	da06      	bge.n	8021ff8 <_svfprintf_r+0x1e0>
 8021fea:	4276      	negs	r6, r6
 8021fec:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8021ff0:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8021ff4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8021ff8:	2301      	movs	r3, #1
 8021ffa:	e2ca      	b.n	8022592 <_svfprintf_r+0x77a>
 8021ffc:	b10b      	cbz	r3, 8022002 <_svfprintf_r+0x1ea>
 8021ffe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8022002:	4b37      	ldr	r3, [pc, #220]	; (80220e0 <_svfprintf_r+0x2c8>)
 8022004:	9311      	str	r3, [sp, #68]	; 0x44
 8022006:	06ab      	lsls	r3, r5, #26
 8022008:	f140 8339 	bpl.w	802267e <_svfprintf_r+0x866>
 802200c:	3707      	adds	r7, #7
 802200e:	f027 0707 	bic.w	r7, r7, #7
 8022012:	f107 0308 	add.w	r3, r7, #8
 8022016:	e9d7 6700 	ldrd	r6, r7, [r7]
 802201a:	9304      	str	r3, [sp, #16]
 802201c:	07e8      	lsls	r0, r5, #31
 802201e:	d50b      	bpl.n	8022038 <_svfprintf_r+0x220>
 8022020:	ea56 0307 	orrs.w	r3, r6, r7
 8022024:	d008      	beq.n	8022038 <_svfprintf_r+0x220>
 8022026:	2330      	movs	r3, #48	; 0x30
 8022028:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 802202c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8022030:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8022034:	f045 0502 	orr.w	r5, r5, #2
 8022038:	2302      	movs	r3, #2
 802203a:	e2a7      	b.n	802258c <_svfprintf_r+0x774>
 802203c:	2a00      	cmp	r2, #0
 802203e:	d1be      	bne.n	8021fbe <_svfprintf_r+0x1a6>
 8022040:	2301      	movs	r3, #1
 8022042:	2220      	movs	r2, #32
 8022044:	e7bb      	b.n	8021fbe <_svfprintf_r+0x1a6>
 8022046:	f045 0501 	orr.w	r5, r5, #1
 802204a:	e7b8      	b.n	8021fbe <_svfprintf_r+0x1a6>
 802204c:	683e      	ldr	r6, [r7, #0]
 802204e:	960a      	str	r6, [sp, #40]	; 0x28
 8022050:	2e00      	cmp	r6, #0
 8022052:	f107 0104 	add.w	r1, r7, #4
 8022056:	dab4      	bge.n	8021fc2 <_svfprintf_r+0x1aa>
 8022058:	4276      	negs	r6, r6
 802205a:	960a      	str	r6, [sp, #40]	; 0x28
 802205c:	460f      	mov	r7, r1
 802205e:	f045 0504 	orr.w	r5, r5, #4
 8022062:	e7ac      	b.n	8021fbe <_svfprintf_r+0x1a6>
 8022064:	9905      	ldr	r1, [sp, #20]
 8022066:	1c4e      	adds	r6, r1, #1
 8022068:	7809      	ldrb	r1, [r1, #0]
 802206a:	9102      	str	r1, [sp, #8]
 802206c:	292a      	cmp	r1, #42	; 0x2a
 802206e:	d010      	beq.n	8022092 <_svfprintf_r+0x27a>
 8022070:	f04f 0900 	mov.w	r9, #0
 8022074:	9605      	str	r6, [sp, #20]
 8022076:	9902      	ldr	r1, [sp, #8]
 8022078:	3930      	subs	r1, #48	; 0x30
 802207a:	2909      	cmp	r1, #9
 802207c:	f63f af31 	bhi.w	8021ee2 <_svfprintf_r+0xca>
 8022080:	fb00 1909 	mla	r9, r0, r9, r1
 8022084:	9905      	ldr	r1, [sp, #20]
 8022086:	460e      	mov	r6, r1
 8022088:	f816 1b01 	ldrb.w	r1, [r6], #1
 802208c:	9102      	str	r1, [sp, #8]
 802208e:	9605      	str	r6, [sp, #20]
 8022090:	e7f1      	b.n	8022076 <_svfprintf_r+0x25e>
 8022092:	6839      	ldr	r1, [r7, #0]
 8022094:	9605      	str	r6, [sp, #20]
 8022096:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 802209a:	3704      	adds	r7, #4
 802209c:	e78f      	b.n	8021fbe <_svfprintf_r+0x1a6>
 802209e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80220a2:	e78c      	b.n	8021fbe <_svfprintf_r+0x1a6>
 80220a4:	2100      	movs	r1, #0
 80220a6:	910a      	str	r1, [sp, #40]	; 0x28
 80220a8:	9902      	ldr	r1, [sp, #8]
 80220aa:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80220ac:	3930      	subs	r1, #48	; 0x30
 80220ae:	fb00 1106 	mla	r1, r0, r6, r1
 80220b2:	910a      	str	r1, [sp, #40]	; 0x28
 80220b4:	9905      	ldr	r1, [sp, #20]
 80220b6:	460e      	mov	r6, r1
 80220b8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80220bc:	9102      	str	r1, [sp, #8]
 80220be:	9902      	ldr	r1, [sp, #8]
 80220c0:	9605      	str	r6, [sp, #20]
 80220c2:	3930      	subs	r1, #48	; 0x30
 80220c4:	2909      	cmp	r1, #9
 80220c6:	d9ef      	bls.n	80220a8 <_svfprintf_r+0x290>
 80220c8:	e70b      	b.n	8021ee2 <_svfprintf_r+0xca>
 80220ca:	f045 0508 	orr.w	r5, r5, #8
 80220ce:	e776      	b.n	8021fbe <_svfprintf_r+0x1a6>
 80220d0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80220d4:	e773      	b.n	8021fbe <_svfprintf_r+0x1a6>
 80220d6:	bf00      	nop
	...
 80220e0:	08033960 	.word	0x08033960
 80220e4:	9905      	ldr	r1, [sp, #20]
 80220e6:	7809      	ldrb	r1, [r1, #0]
 80220e8:	296c      	cmp	r1, #108	; 0x6c
 80220ea:	d105      	bne.n	80220f8 <_svfprintf_r+0x2e0>
 80220ec:	9905      	ldr	r1, [sp, #20]
 80220ee:	3101      	adds	r1, #1
 80220f0:	9105      	str	r1, [sp, #20]
 80220f2:	f045 0520 	orr.w	r5, r5, #32
 80220f6:	e762      	b.n	8021fbe <_svfprintf_r+0x1a6>
 80220f8:	f045 0510 	orr.w	r5, r5, #16
 80220fc:	e75f      	b.n	8021fbe <_svfprintf_r+0x1a6>
 80220fe:	1d3b      	adds	r3, r7, #4
 8022100:	9304      	str	r3, [sp, #16]
 8022102:	2600      	movs	r6, #0
 8022104:	683b      	ldr	r3, [r7, #0]
 8022106:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 802210a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 802210e:	f04f 0901 	mov.w	r9, #1
 8022112:	4637      	mov	r7, r6
 8022114:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8022118:	e11b      	b.n	8022352 <_svfprintf_r+0x53a>
 802211a:	b10b      	cbz	r3, 8022120 <_svfprintf_r+0x308>
 802211c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8022120:	f045 0510 	orr.w	r5, r5, #16
 8022124:	e752      	b.n	8021fcc <_svfprintf_r+0x1b4>
 8022126:	f015 0f10 	tst.w	r5, #16
 802212a:	f107 0304 	add.w	r3, r7, #4
 802212e:	d003      	beq.n	8022138 <_svfprintf_r+0x320>
 8022130:	683e      	ldr	r6, [r7, #0]
 8022132:	9304      	str	r3, [sp, #16]
 8022134:	17f7      	asrs	r7, r6, #31
 8022136:	e754      	b.n	8021fe2 <_svfprintf_r+0x1ca>
 8022138:	683e      	ldr	r6, [r7, #0]
 802213a:	9304      	str	r3, [sp, #16]
 802213c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8022140:	bf18      	it	ne
 8022142:	b236      	sxthne	r6, r6
 8022144:	e7f6      	b.n	8022134 <_svfprintf_r+0x31c>
 8022146:	b10b      	cbz	r3, 802214c <_svfprintf_r+0x334>
 8022148:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 802214c:	3707      	adds	r7, #7
 802214e:	f027 0707 	bic.w	r7, r7, #7
 8022152:	f107 0308 	add.w	r3, r7, #8
 8022156:	9304      	str	r3, [sp, #16]
 8022158:	ed97 7b00 	vldr	d7, [r7]
 802215c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8022160:	9b06      	ldr	r3, [sp, #24]
 8022162:	9312      	str	r3, [sp, #72]	; 0x48
 8022164:	9b07      	ldr	r3, [sp, #28]
 8022166:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802216a:	9313      	str	r3, [sp, #76]	; 0x4c
 802216c:	f04f 32ff 	mov.w	r2, #4294967295
 8022170:	4b4a      	ldr	r3, [pc, #296]	; (802229c <_svfprintf_r+0x484>)
 8022172:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8022176:	f7de fced 	bl	8000b54 <__aeabi_dcmpun>
 802217a:	2800      	cmp	r0, #0
 802217c:	f040 85d5 	bne.w	8022d2a <_svfprintf_r+0xf12>
 8022180:	f04f 32ff 	mov.w	r2, #4294967295
 8022184:	4b45      	ldr	r3, [pc, #276]	; (802229c <_svfprintf_r+0x484>)
 8022186:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 802218a:	f7de fcc5 	bl	8000b18 <__aeabi_dcmple>
 802218e:	2800      	cmp	r0, #0
 8022190:	f040 85cb 	bne.w	8022d2a <_svfprintf_r+0xf12>
 8022194:	2200      	movs	r2, #0
 8022196:	2300      	movs	r3, #0
 8022198:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802219c:	f7de fcb2 	bl	8000b04 <__aeabi_dcmplt>
 80221a0:	b110      	cbz	r0, 80221a8 <_svfprintf_r+0x390>
 80221a2:	232d      	movs	r3, #45	; 0x2d
 80221a4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80221a8:	4b3d      	ldr	r3, [pc, #244]	; (80222a0 <_svfprintf_r+0x488>)
 80221aa:	4a3e      	ldr	r2, [pc, #248]	; (80222a4 <_svfprintf_r+0x48c>)
 80221ac:	9902      	ldr	r1, [sp, #8]
 80221ae:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80221b2:	2947      	cmp	r1, #71	; 0x47
 80221b4:	bfcc      	ite	gt
 80221b6:	4690      	movgt	r8, r2
 80221b8:	4698      	movle	r8, r3
 80221ba:	f04f 0903 	mov.w	r9, #3
 80221be:	2600      	movs	r6, #0
 80221c0:	4637      	mov	r7, r6
 80221c2:	e0c6      	b.n	8022352 <_svfprintf_r+0x53a>
 80221c4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80221c8:	d022      	beq.n	8022210 <_svfprintf_r+0x3f8>
 80221ca:	9b02      	ldr	r3, [sp, #8]
 80221cc:	f023 0320 	bic.w	r3, r3, #32
 80221d0:	2b47      	cmp	r3, #71	; 0x47
 80221d2:	d104      	bne.n	80221de <_svfprintf_r+0x3c6>
 80221d4:	f1b9 0f00 	cmp.w	r9, #0
 80221d8:	bf08      	it	eq
 80221da:	f04f 0901 	moveq.w	r9, #1
 80221de:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80221e2:	930c      	str	r3, [sp, #48]	; 0x30
 80221e4:	9b07      	ldr	r3, [sp, #28]
 80221e6:	2b00      	cmp	r3, #0
 80221e8:	da15      	bge.n	8022216 <_svfprintf_r+0x3fe>
 80221ea:	9b06      	ldr	r3, [sp, #24]
 80221ec:	930e      	str	r3, [sp, #56]	; 0x38
 80221ee:	9b07      	ldr	r3, [sp, #28]
 80221f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80221f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80221f6:	232d      	movs	r3, #45	; 0x2d
 80221f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80221fa:	9b02      	ldr	r3, [sp, #8]
 80221fc:	f023 0720 	bic.w	r7, r3, #32
 8022200:	2f46      	cmp	r7, #70	; 0x46
 8022202:	d00e      	beq.n	8022222 <_svfprintf_r+0x40a>
 8022204:	2f45      	cmp	r7, #69	; 0x45
 8022206:	d146      	bne.n	8022296 <_svfprintf_r+0x47e>
 8022208:	f109 0601 	add.w	r6, r9, #1
 802220c:	2102      	movs	r1, #2
 802220e:	e00a      	b.n	8022226 <_svfprintf_r+0x40e>
 8022210:	f04f 0906 	mov.w	r9, #6
 8022214:	e7e3      	b.n	80221de <_svfprintf_r+0x3c6>
 8022216:	ed9d 7b06 	vldr	d7, [sp, #24]
 802221a:	2300      	movs	r3, #0
 802221c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8022220:	e7ea      	b.n	80221f8 <_svfprintf_r+0x3e0>
 8022222:	464e      	mov	r6, r9
 8022224:	2103      	movs	r1, #3
 8022226:	ab1d      	add	r3, sp, #116	; 0x74
 8022228:	9301      	str	r3, [sp, #4]
 802222a:	ab1a      	add	r3, sp, #104	; 0x68
 802222c:	9300      	str	r3, [sp, #0]
 802222e:	4632      	mov	r2, r6
 8022230:	ab19      	add	r3, sp, #100	; 0x64
 8022232:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8022236:	4658      	mov	r0, fp
 8022238:	f000 fe4e 	bl	8022ed8 <_dtoa_r>
 802223c:	2f47      	cmp	r7, #71	; 0x47
 802223e:	4680      	mov	r8, r0
 8022240:	d102      	bne.n	8022248 <_svfprintf_r+0x430>
 8022242:	07e8      	lsls	r0, r5, #31
 8022244:	f140 857e 	bpl.w	8022d44 <_svfprintf_r+0xf2c>
 8022248:	eb08 0306 	add.w	r3, r8, r6
 802224c:	2f46      	cmp	r7, #70	; 0x46
 802224e:	9303      	str	r3, [sp, #12]
 8022250:	d111      	bne.n	8022276 <_svfprintf_r+0x45e>
 8022252:	f898 3000 	ldrb.w	r3, [r8]
 8022256:	2b30      	cmp	r3, #48	; 0x30
 8022258:	d109      	bne.n	802226e <_svfprintf_r+0x456>
 802225a:	2200      	movs	r2, #0
 802225c:	2300      	movs	r3, #0
 802225e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8022262:	f7de fc45 	bl	8000af0 <__aeabi_dcmpeq>
 8022266:	b910      	cbnz	r0, 802226e <_svfprintf_r+0x456>
 8022268:	f1c6 0601 	rsb	r6, r6, #1
 802226c:	9619      	str	r6, [sp, #100]	; 0x64
 802226e:	9a03      	ldr	r2, [sp, #12]
 8022270:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022272:	441a      	add	r2, r3
 8022274:	9203      	str	r2, [sp, #12]
 8022276:	2200      	movs	r2, #0
 8022278:	2300      	movs	r3, #0
 802227a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802227e:	f7de fc37 	bl	8000af0 <__aeabi_dcmpeq>
 8022282:	b988      	cbnz	r0, 80222a8 <_svfprintf_r+0x490>
 8022284:	2230      	movs	r2, #48	; 0x30
 8022286:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022288:	9903      	ldr	r1, [sp, #12]
 802228a:	4299      	cmp	r1, r3
 802228c:	d90e      	bls.n	80222ac <_svfprintf_r+0x494>
 802228e:	1c59      	adds	r1, r3, #1
 8022290:	911d      	str	r1, [sp, #116]	; 0x74
 8022292:	701a      	strb	r2, [r3, #0]
 8022294:	e7f7      	b.n	8022286 <_svfprintf_r+0x46e>
 8022296:	464e      	mov	r6, r9
 8022298:	e7b8      	b.n	802220c <_svfprintf_r+0x3f4>
 802229a:	bf00      	nop
 802229c:	7fefffff 	.word	0x7fefffff
 80222a0:	08033954 	.word	0x08033954
 80222a4:	08033958 	.word	0x08033958
 80222a8:	9b03      	ldr	r3, [sp, #12]
 80222aa:	931d      	str	r3, [sp, #116]	; 0x74
 80222ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80222ae:	2f47      	cmp	r7, #71	; 0x47
 80222b0:	eba3 0308 	sub.w	r3, r3, r8
 80222b4:	9303      	str	r3, [sp, #12]
 80222b6:	f040 80fa 	bne.w	80224ae <_svfprintf_r+0x696>
 80222ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80222bc:	1cd9      	adds	r1, r3, #3
 80222be:	db02      	blt.n	80222c6 <_svfprintf_r+0x4ae>
 80222c0:	4599      	cmp	r9, r3
 80222c2:	f280 8120 	bge.w	8022506 <_svfprintf_r+0x6ee>
 80222c6:	9b02      	ldr	r3, [sp, #8]
 80222c8:	3b02      	subs	r3, #2
 80222ca:	9302      	str	r3, [sp, #8]
 80222cc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80222ce:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80222d2:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 80222d6:	1e53      	subs	r3, r2, #1
 80222d8:	2b00      	cmp	r3, #0
 80222da:	9319      	str	r3, [sp, #100]	; 0x64
 80222dc:	bfb6      	itet	lt
 80222de:	f1c2 0301 	rsblt	r3, r2, #1
 80222e2:	222b      	movge	r2, #43	; 0x2b
 80222e4:	222d      	movlt	r2, #45	; 0x2d
 80222e6:	2b09      	cmp	r3, #9
 80222e8:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80222ec:	f340 80fb 	ble.w	80224e6 <_svfprintf_r+0x6ce>
 80222f0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80222f4:	260a      	movs	r6, #10
 80222f6:	fb93 f0f6 	sdiv	r0, r3, r6
 80222fa:	fb06 3310 	mls	r3, r6, r0, r3
 80222fe:	3330      	adds	r3, #48	; 0x30
 8022300:	2809      	cmp	r0, #9
 8022302:	f802 3c01 	strb.w	r3, [r2, #-1]
 8022306:	f102 31ff 	add.w	r1, r2, #4294967295
 802230a:	4603      	mov	r3, r0
 802230c:	f300 80e4 	bgt.w	80224d8 <_svfprintf_r+0x6c0>
 8022310:	3330      	adds	r3, #48	; 0x30
 8022312:	f801 3c01 	strb.w	r3, [r1, #-1]
 8022316:	3a02      	subs	r2, #2
 8022318:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 802231c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8022320:	4282      	cmp	r2, r0
 8022322:	4619      	mov	r1, r3
 8022324:	f0c0 80da 	bcc.w	80224dc <_svfprintf_r+0x6c4>
 8022328:	9a03      	ldr	r2, [sp, #12]
 802232a:	ab1b      	add	r3, sp, #108	; 0x6c
 802232c:	1acb      	subs	r3, r1, r3
 802232e:	2a01      	cmp	r2, #1
 8022330:	9310      	str	r3, [sp, #64]	; 0x40
 8022332:	eb03 0902 	add.w	r9, r3, r2
 8022336:	dc02      	bgt.n	802233e <_svfprintf_r+0x526>
 8022338:	f015 0701 	ands.w	r7, r5, #1
 802233c:	d002      	beq.n	8022344 <_svfprintf_r+0x52c>
 802233e:	9b08      	ldr	r3, [sp, #32]
 8022340:	2700      	movs	r7, #0
 8022342:	4499      	add	r9, r3
 8022344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022346:	b113      	cbz	r3, 802234e <_svfprintf_r+0x536>
 8022348:	232d      	movs	r3, #45	; 0x2d
 802234a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 802234e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022350:	2600      	movs	r6, #0
 8022352:	454e      	cmp	r6, r9
 8022354:	4633      	mov	r3, r6
 8022356:	bfb8      	it	lt
 8022358:	464b      	movlt	r3, r9
 802235a:	930b      	str	r3, [sp, #44]	; 0x2c
 802235c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8022360:	b113      	cbz	r3, 8022368 <_svfprintf_r+0x550>
 8022362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022364:	3301      	adds	r3, #1
 8022366:	930b      	str	r3, [sp, #44]	; 0x2c
 8022368:	f015 0302 	ands.w	r3, r5, #2
 802236c:	9314      	str	r3, [sp, #80]	; 0x50
 802236e:	bf1e      	ittt	ne
 8022370:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8022372:	3302      	addne	r3, #2
 8022374:	930b      	strne	r3, [sp, #44]	; 0x2c
 8022376:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 802237a:	9315      	str	r3, [sp, #84]	; 0x54
 802237c:	d118      	bne.n	80223b0 <_svfprintf_r+0x598>
 802237e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022380:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022382:	1a9b      	subs	r3, r3, r2
 8022384:	2b00      	cmp	r3, #0
 8022386:	930c      	str	r3, [sp, #48]	; 0x30
 8022388:	dd12      	ble.n	80223b0 <_svfprintf_r+0x598>
 802238a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802238c:	2b10      	cmp	r3, #16
 802238e:	4ba9      	ldr	r3, [pc, #676]	; (8022634 <_svfprintf_r+0x81c>)
 8022390:	6023      	str	r3, [r4, #0]
 8022392:	f300 81d5 	bgt.w	8022740 <_svfprintf_r+0x928>
 8022396:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022398:	6063      	str	r3, [r4, #4]
 802239a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802239c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802239e:	4413      	add	r3, r2
 80223a0:	9321      	str	r3, [sp, #132]	; 0x84
 80223a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80223a4:	3301      	adds	r3, #1
 80223a6:	2b07      	cmp	r3, #7
 80223a8:	9320      	str	r3, [sp, #128]	; 0x80
 80223aa:	f300 81e2 	bgt.w	8022772 <_svfprintf_r+0x95a>
 80223ae:	3408      	adds	r4, #8
 80223b0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80223b4:	b173      	cbz	r3, 80223d4 <_svfprintf_r+0x5bc>
 80223b6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80223ba:	6023      	str	r3, [r4, #0]
 80223bc:	2301      	movs	r3, #1
 80223be:	6063      	str	r3, [r4, #4]
 80223c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80223c2:	3301      	adds	r3, #1
 80223c4:	9321      	str	r3, [sp, #132]	; 0x84
 80223c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80223c8:	3301      	adds	r3, #1
 80223ca:	2b07      	cmp	r3, #7
 80223cc:	9320      	str	r3, [sp, #128]	; 0x80
 80223ce:	f300 81da 	bgt.w	8022786 <_svfprintf_r+0x96e>
 80223d2:	3408      	adds	r4, #8
 80223d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80223d6:	b16b      	cbz	r3, 80223f4 <_svfprintf_r+0x5dc>
 80223d8:	ab18      	add	r3, sp, #96	; 0x60
 80223da:	6023      	str	r3, [r4, #0]
 80223dc:	2302      	movs	r3, #2
 80223de:	6063      	str	r3, [r4, #4]
 80223e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80223e2:	3302      	adds	r3, #2
 80223e4:	9321      	str	r3, [sp, #132]	; 0x84
 80223e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80223e8:	3301      	adds	r3, #1
 80223ea:	2b07      	cmp	r3, #7
 80223ec:	9320      	str	r3, [sp, #128]	; 0x80
 80223ee:	f300 81d4 	bgt.w	802279a <_svfprintf_r+0x982>
 80223f2:	3408      	adds	r4, #8
 80223f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80223f6:	2b80      	cmp	r3, #128	; 0x80
 80223f8:	d114      	bne.n	8022424 <_svfprintf_r+0x60c>
 80223fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80223fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80223fe:	1a9b      	subs	r3, r3, r2
 8022400:	2b00      	cmp	r3, #0
 8022402:	dd0f      	ble.n	8022424 <_svfprintf_r+0x60c>
 8022404:	4a8c      	ldr	r2, [pc, #560]	; (8022638 <_svfprintf_r+0x820>)
 8022406:	6022      	str	r2, [r4, #0]
 8022408:	2b10      	cmp	r3, #16
 802240a:	f300 81d0 	bgt.w	80227ae <_svfprintf_r+0x996>
 802240e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022410:	6063      	str	r3, [r4, #4]
 8022412:	4413      	add	r3, r2
 8022414:	9321      	str	r3, [sp, #132]	; 0x84
 8022416:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022418:	3301      	adds	r3, #1
 802241a:	2b07      	cmp	r3, #7
 802241c:	9320      	str	r3, [sp, #128]	; 0x80
 802241e:	f300 81df 	bgt.w	80227e0 <_svfprintf_r+0x9c8>
 8022422:	3408      	adds	r4, #8
 8022424:	eba6 0609 	sub.w	r6, r6, r9
 8022428:	2e00      	cmp	r6, #0
 802242a:	dd0f      	ble.n	802244c <_svfprintf_r+0x634>
 802242c:	4b82      	ldr	r3, [pc, #520]	; (8022638 <_svfprintf_r+0x820>)
 802242e:	6023      	str	r3, [r4, #0]
 8022430:	2e10      	cmp	r6, #16
 8022432:	f300 81df 	bgt.w	80227f4 <_svfprintf_r+0x9dc>
 8022436:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022438:	9821      	ldr	r0, [sp, #132]	; 0x84
 802243a:	6066      	str	r6, [r4, #4]
 802243c:	3301      	adds	r3, #1
 802243e:	4406      	add	r6, r0
 8022440:	2b07      	cmp	r3, #7
 8022442:	9621      	str	r6, [sp, #132]	; 0x84
 8022444:	9320      	str	r3, [sp, #128]	; 0x80
 8022446:	f300 81ec 	bgt.w	8022822 <_svfprintf_r+0xa0a>
 802244a:	3408      	adds	r4, #8
 802244c:	05eb      	lsls	r3, r5, #23
 802244e:	f100 81f2 	bmi.w	8022836 <_svfprintf_r+0xa1e>
 8022452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022454:	e884 0300 	stmia.w	r4, {r8, r9}
 8022458:	444b      	add	r3, r9
 802245a:	9321      	str	r3, [sp, #132]	; 0x84
 802245c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802245e:	3301      	adds	r3, #1
 8022460:	2b07      	cmp	r3, #7
 8022462:	9320      	str	r3, [sp, #128]	; 0x80
 8022464:	f340 8419 	ble.w	8022c9a <_svfprintf_r+0xe82>
 8022468:	aa1f      	add	r2, sp, #124	; 0x7c
 802246a:	4651      	mov	r1, sl
 802246c:	4658      	mov	r0, fp
 802246e:	f002 f811 	bl	8024494 <__ssprint_r>
 8022472:	2800      	cmp	r0, #0
 8022474:	f040 8431 	bne.w	8022cda <_svfprintf_r+0xec2>
 8022478:	ac2c      	add	r4, sp, #176	; 0xb0
 802247a:	076b      	lsls	r3, r5, #29
 802247c:	f100 8410 	bmi.w	8022ca0 <_svfprintf_r+0xe88>
 8022480:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022482:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022484:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022486:	428a      	cmp	r2, r1
 8022488:	bfac      	ite	ge
 802248a:	189b      	addge	r3, r3, r2
 802248c:	185b      	addlt	r3, r3, r1
 802248e:	9309      	str	r3, [sp, #36]	; 0x24
 8022490:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022492:	b13b      	cbz	r3, 80224a4 <_svfprintf_r+0x68c>
 8022494:	aa1f      	add	r2, sp, #124	; 0x7c
 8022496:	4651      	mov	r1, sl
 8022498:	4658      	mov	r0, fp
 802249a:	f001 fffb 	bl	8024494 <__ssprint_r>
 802249e:	2800      	cmp	r0, #0
 80224a0:	f040 841b 	bne.w	8022cda <_svfprintf_r+0xec2>
 80224a4:	2300      	movs	r3, #0
 80224a6:	9320      	str	r3, [sp, #128]	; 0x80
 80224a8:	9f04      	ldr	r7, [sp, #16]
 80224aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80224ac:	e4ee      	b.n	8021e8c <_svfprintf_r+0x74>
 80224ae:	9b02      	ldr	r3, [sp, #8]
 80224b0:	2b65      	cmp	r3, #101	; 0x65
 80224b2:	f77f af0b 	ble.w	80222cc <_svfprintf_r+0x4b4>
 80224b6:	9b02      	ldr	r3, [sp, #8]
 80224b8:	2b66      	cmp	r3, #102	; 0x66
 80224ba:	d124      	bne.n	8022506 <_svfprintf_r+0x6ee>
 80224bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80224be:	2b00      	cmp	r3, #0
 80224c0:	dd19      	ble.n	80224f6 <_svfprintf_r+0x6de>
 80224c2:	f1b9 0f00 	cmp.w	r9, #0
 80224c6:	d101      	bne.n	80224cc <_svfprintf_r+0x6b4>
 80224c8:	07ea      	lsls	r2, r5, #31
 80224ca:	d502      	bpl.n	80224d2 <_svfprintf_r+0x6ba>
 80224cc:	9a08      	ldr	r2, [sp, #32]
 80224ce:	4413      	add	r3, r2
 80224d0:	444b      	add	r3, r9
 80224d2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80224d4:	4699      	mov	r9, r3
 80224d6:	e735      	b.n	8022344 <_svfprintf_r+0x52c>
 80224d8:	460a      	mov	r2, r1
 80224da:	e70c      	b.n	80222f6 <_svfprintf_r+0x4de>
 80224dc:	f812 1b01 	ldrb.w	r1, [r2], #1
 80224e0:	f803 1b01 	strb.w	r1, [r3], #1
 80224e4:	e71c      	b.n	8022320 <_svfprintf_r+0x508>
 80224e6:	2230      	movs	r2, #48	; 0x30
 80224e8:	4413      	add	r3, r2
 80224ea:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80224ee:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80224f2:	a91c      	add	r1, sp, #112	; 0x70
 80224f4:	e718      	b.n	8022328 <_svfprintf_r+0x510>
 80224f6:	f1b9 0f00 	cmp.w	r9, #0
 80224fa:	d101      	bne.n	8022500 <_svfprintf_r+0x6e8>
 80224fc:	07eb      	lsls	r3, r5, #31
 80224fe:	d515      	bpl.n	802252c <_svfprintf_r+0x714>
 8022500:	9b08      	ldr	r3, [sp, #32]
 8022502:	3301      	adds	r3, #1
 8022504:	e7e4      	b.n	80224d0 <_svfprintf_r+0x6b8>
 8022506:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8022508:	9b03      	ldr	r3, [sp, #12]
 802250a:	429a      	cmp	r2, r3
 802250c:	db06      	blt.n	802251c <_svfprintf_r+0x704>
 802250e:	07ef      	lsls	r7, r5, #31
 8022510:	d50e      	bpl.n	8022530 <_svfprintf_r+0x718>
 8022512:	9b08      	ldr	r3, [sp, #32]
 8022514:	4413      	add	r3, r2
 8022516:	2267      	movs	r2, #103	; 0x67
 8022518:	9202      	str	r2, [sp, #8]
 802251a:	e7da      	b.n	80224d2 <_svfprintf_r+0x6ba>
 802251c:	9b03      	ldr	r3, [sp, #12]
 802251e:	9908      	ldr	r1, [sp, #32]
 8022520:	2a00      	cmp	r2, #0
 8022522:	440b      	add	r3, r1
 8022524:	dcf7      	bgt.n	8022516 <_svfprintf_r+0x6fe>
 8022526:	f1c2 0201 	rsb	r2, r2, #1
 802252a:	e7f3      	b.n	8022514 <_svfprintf_r+0x6fc>
 802252c:	2301      	movs	r3, #1
 802252e:	e7d0      	b.n	80224d2 <_svfprintf_r+0x6ba>
 8022530:	4613      	mov	r3, r2
 8022532:	e7f0      	b.n	8022516 <_svfprintf_r+0x6fe>
 8022534:	b10b      	cbz	r3, 802253a <_svfprintf_r+0x722>
 8022536:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 802253a:	f015 0f20 	tst.w	r5, #32
 802253e:	f107 0304 	add.w	r3, r7, #4
 8022542:	d008      	beq.n	8022556 <_svfprintf_r+0x73e>
 8022544:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022546:	683a      	ldr	r2, [r7, #0]
 8022548:	17ce      	asrs	r6, r1, #31
 802254a:	4608      	mov	r0, r1
 802254c:	4631      	mov	r1, r6
 802254e:	e9c2 0100 	strd	r0, r1, [r2]
 8022552:	461f      	mov	r7, r3
 8022554:	e49a      	b.n	8021e8c <_svfprintf_r+0x74>
 8022556:	06ee      	lsls	r6, r5, #27
 8022558:	d503      	bpl.n	8022562 <_svfprintf_r+0x74a>
 802255a:	683a      	ldr	r2, [r7, #0]
 802255c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802255e:	6011      	str	r1, [r2, #0]
 8022560:	e7f7      	b.n	8022552 <_svfprintf_r+0x73a>
 8022562:	0668      	lsls	r0, r5, #25
 8022564:	d5f9      	bpl.n	802255a <_svfprintf_r+0x742>
 8022566:	683a      	ldr	r2, [r7, #0]
 8022568:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 802256c:	8011      	strh	r1, [r2, #0]
 802256e:	e7f0      	b.n	8022552 <_svfprintf_r+0x73a>
 8022570:	f045 0510 	orr.w	r5, r5, #16
 8022574:	f015 0320 	ands.w	r3, r5, #32
 8022578:	d022      	beq.n	80225c0 <_svfprintf_r+0x7a8>
 802257a:	3707      	adds	r7, #7
 802257c:	f027 0707 	bic.w	r7, r7, #7
 8022580:	f107 0308 	add.w	r3, r7, #8
 8022584:	e9d7 6700 	ldrd	r6, r7, [r7]
 8022588:	9304      	str	r3, [sp, #16]
 802258a:	2300      	movs	r3, #0
 802258c:	2200      	movs	r2, #0
 802258e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8022592:	f1b9 3fff 	cmp.w	r9, #4294967295
 8022596:	f000 83db 	beq.w	8022d50 <_svfprintf_r+0xf38>
 802259a:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 802259e:	920b      	str	r2, [sp, #44]	; 0x2c
 80225a0:	ea56 0207 	orrs.w	r2, r6, r7
 80225a4:	f040 83d9 	bne.w	8022d5a <_svfprintf_r+0xf42>
 80225a8:	f1b9 0f00 	cmp.w	r9, #0
 80225ac:	f000 80aa 	beq.w	8022704 <_svfprintf_r+0x8ec>
 80225b0:	2b01      	cmp	r3, #1
 80225b2:	d076      	beq.n	80226a2 <_svfprintf_r+0x88a>
 80225b4:	2b02      	cmp	r3, #2
 80225b6:	f000 8091 	beq.w	80226dc <_svfprintf_r+0x8c4>
 80225ba:	2600      	movs	r6, #0
 80225bc:	2700      	movs	r7, #0
 80225be:	e3d2      	b.n	8022d66 <_svfprintf_r+0xf4e>
 80225c0:	1d3a      	adds	r2, r7, #4
 80225c2:	f015 0110 	ands.w	r1, r5, #16
 80225c6:	9204      	str	r2, [sp, #16]
 80225c8:	d002      	beq.n	80225d0 <_svfprintf_r+0x7b8>
 80225ca:	683e      	ldr	r6, [r7, #0]
 80225cc:	2700      	movs	r7, #0
 80225ce:	e7dd      	b.n	802258c <_svfprintf_r+0x774>
 80225d0:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80225d4:	d0f9      	beq.n	80225ca <_svfprintf_r+0x7b2>
 80225d6:	883e      	ldrh	r6, [r7, #0]
 80225d8:	2700      	movs	r7, #0
 80225da:	e7d6      	b.n	802258a <_svfprintf_r+0x772>
 80225dc:	1d3b      	adds	r3, r7, #4
 80225de:	9304      	str	r3, [sp, #16]
 80225e0:	2330      	movs	r3, #48	; 0x30
 80225e2:	2278      	movs	r2, #120	; 0x78
 80225e4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80225e8:	4b14      	ldr	r3, [pc, #80]	; (802263c <_svfprintf_r+0x824>)
 80225ea:	683e      	ldr	r6, [r7, #0]
 80225ec:	9311      	str	r3, [sp, #68]	; 0x44
 80225ee:	2700      	movs	r7, #0
 80225f0:	f045 0502 	orr.w	r5, r5, #2
 80225f4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80225f8:	2302      	movs	r3, #2
 80225fa:	9202      	str	r2, [sp, #8]
 80225fc:	e7c6      	b.n	802258c <_svfprintf_r+0x774>
 80225fe:	1d3b      	adds	r3, r7, #4
 8022600:	2600      	movs	r6, #0
 8022602:	f1b9 3fff 	cmp.w	r9, #4294967295
 8022606:	9304      	str	r3, [sp, #16]
 8022608:	f8d7 8000 	ldr.w	r8, [r7]
 802260c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8022610:	d00a      	beq.n	8022628 <_svfprintf_r+0x810>
 8022612:	464a      	mov	r2, r9
 8022614:	4631      	mov	r1, r6
 8022616:	4640      	mov	r0, r8
 8022618:	f7dd fdf2 	bl	8000200 <memchr>
 802261c:	2800      	cmp	r0, #0
 802261e:	f000 808d 	beq.w	802273c <_svfprintf_r+0x924>
 8022622:	eba0 0908 	sub.w	r9, r0, r8
 8022626:	e5cb      	b.n	80221c0 <_svfprintf_r+0x3a8>
 8022628:	4640      	mov	r0, r8
 802262a:	f7dd fe39 	bl	80002a0 <strlen>
 802262e:	4681      	mov	r9, r0
 8022630:	e5c6      	b.n	80221c0 <_svfprintf_r+0x3a8>
 8022632:	bf00      	nop
 8022634:	08033982 	.word	0x08033982
 8022638:	08033992 	.word	0x08033992
 802263c:	08033971 	.word	0x08033971
 8022640:	f045 0510 	orr.w	r5, r5, #16
 8022644:	06a9      	lsls	r1, r5, #26
 8022646:	d509      	bpl.n	802265c <_svfprintf_r+0x844>
 8022648:	3707      	adds	r7, #7
 802264a:	f027 0707 	bic.w	r7, r7, #7
 802264e:	f107 0308 	add.w	r3, r7, #8
 8022652:	e9d7 6700 	ldrd	r6, r7, [r7]
 8022656:	9304      	str	r3, [sp, #16]
 8022658:	2301      	movs	r3, #1
 802265a:	e797      	b.n	802258c <_svfprintf_r+0x774>
 802265c:	1d3b      	adds	r3, r7, #4
 802265e:	f015 0f10 	tst.w	r5, #16
 8022662:	9304      	str	r3, [sp, #16]
 8022664:	d001      	beq.n	802266a <_svfprintf_r+0x852>
 8022666:	683e      	ldr	r6, [r7, #0]
 8022668:	e002      	b.n	8022670 <_svfprintf_r+0x858>
 802266a:	066a      	lsls	r2, r5, #25
 802266c:	d5fb      	bpl.n	8022666 <_svfprintf_r+0x84e>
 802266e:	883e      	ldrh	r6, [r7, #0]
 8022670:	2700      	movs	r7, #0
 8022672:	e7f1      	b.n	8022658 <_svfprintf_r+0x840>
 8022674:	b10b      	cbz	r3, 802267a <_svfprintf_r+0x862>
 8022676:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 802267a:	4ba3      	ldr	r3, [pc, #652]	; (8022908 <_svfprintf_r+0xaf0>)
 802267c:	e4c2      	b.n	8022004 <_svfprintf_r+0x1ec>
 802267e:	1d3b      	adds	r3, r7, #4
 8022680:	f015 0f10 	tst.w	r5, #16
 8022684:	9304      	str	r3, [sp, #16]
 8022686:	d001      	beq.n	802268c <_svfprintf_r+0x874>
 8022688:	683e      	ldr	r6, [r7, #0]
 802268a:	e002      	b.n	8022692 <_svfprintf_r+0x87a>
 802268c:	066e      	lsls	r6, r5, #25
 802268e:	d5fb      	bpl.n	8022688 <_svfprintf_r+0x870>
 8022690:	883e      	ldrh	r6, [r7, #0]
 8022692:	2700      	movs	r7, #0
 8022694:	e4c2      	b.n	802201c <_svfprintf_r+0x204>
 8022696:	4643      	mov	r3, r8
 8022698:	e366      	b.n	8022d68 <_svfprintf_r+0xf50>
 802269a:	2f00      	cmp	r7, #0
 802269c:	bf08      	it	eq
 802269e:	2e0a      	cmpeq	r6, #10
 80226a0:	d205      	bcs.n	80226ae <_svfprintf_r+0x896>
 80226a2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80226a6:	3630      	adds	r6, #48	; 0x30
 80226a8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80226ac:	e377      	b.n	8022d9e <_svfprintf_r+0xf86>
 80226ae:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80226b2:	4630      	mov	r0, r6
 80226b4:	4639      	mov	r1, r7
 80226b6:	220a      	movs	r2, #10
 80226b8:	2300      	movs	r3, #0
 80226ba:	f7de faf9 	bl	8000cb0 <__aeabi_uldivmod>
 80226be:	3230      	adds	r2, #48	; 0x30
 80226c0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80226c4:	2300      	movs	r3, #0
 80226c6:	4630      	mov	r0, r6
 80226c8:	4639      	mov	r1, r7
 80226ca:	220a      	movs	r2, #10
 80226cc:	f7de faf0 	bl	8000cb0 <__aeabi_uldivmod>
 80226d0:	4606      	mov	r6, r0
 80226d2:	460f      	mov	r7, r1
 80226d4:	ea56 0307 	orrs.w	r3, r6, r7
 80226d8:	d1eb      	bne.n	80226b2 <_svfprintf_r+0x89a>
 80226da:	e360      	b.n	8022d9e <_svfprintf_r+0xf86>
 80226dc:	2600      	movs	r6, #0
 80226de:	2700      	movs	r7, #0
 80226e0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80226e4:	f006 030f 	and.w	r3, r6, #15
 80226e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80226ea:	5cd3      	ldrb	r3, [r2, r3]
 80226ec:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80226f0:	0933      	lsrs	r3, r6, #4
 80226f2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80226f6:	093a      	lsrs	r2, r7, #4
 80226f8:	461e      	mov	r6, r3
 80226fa:	4617      	mov	r7, r2
 80226fc:	ea56 0307 	orrs.w	r3, r6, r7
 8022700:	d1f0      	bne.n	80226e4 <_svfprintf_r+0x8cc>
 8022702:	e34c      	b.n	8022d9e <_svfprintf_r+0xf86>
 8022704:	b93b      	cbnz	r3, 8022716 <_svfprintf_r+0x8fe>
 8022706:	07ea      	lsls	r2, r5, #31
 8022708:	d505      	bpl.n	8022716 <_svfprintf_r+0x8fe>
 802270a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 802270e:	2330      	movs	r3, #48	; 0x30
 8022710:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8022714:	e343      	b.n	8022d9e <_svfprintf_r+0xf86>
 8022716:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 802271a:	e340      	b.n	8022d9e <_svfprintf_r+0xf86>
 802271c:	b10b      	cbz	r3, 8022722 <_svfprintf_r+0x90a>
 802271e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8022722:	9b02      	ldr	r3, [sp, #8]
 8022724:	2b00      	cmp	r3, #0
 8022726:	f000 82f7 	beq.w	8022d18 <_svfprintf_r+0xf00>
 802272a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 802272e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8022732:	2600      	movs	r6, #0
 8022734:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8022738:	9704      	str	r7, [sp, #16]
 802273a:	e4e8      	b.n	802210e <_svfprintf_r+0x2f6>
 802273c:	4606      	mov	r6, r0
 802273e:	e53f      	b.n	80221c0 <_svfprintf_r+0x3a8>
 8022740:	2310      	movs	r3, #16
 8022742:	6063      	str	r3, [r4, #4]
 8022744:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022746:	3310      	adds	r3, #16
 8022748:	9321      	str	r3, [sp, #132]	; 0x84
 802274a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802274c:	3301      	adds	r3, #1
 802274e:	2b07      	cmp	r3, #7
 8022750:	9320      	str	r3, [sp, #128]	; 0x80
 8022752:	dc04      	bgt.n	802275e <_svfprintf_r+0x946>
 8022754:	3408      	adds	r4, #8
 8022756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022758:	3b10      	subs	r3, #16
 802275a:	930c      	str	r3, [sp, #48]	; 0x30
 802275c:	e615      	b.n	802238a <_svfprintf_r+0x572>
 802275e:	aa1f      	add	r2, sp, #124	; 0x7c
 8022760:	4651      	mov	r1, sl
 8022762:	4658      	mov	r0, fp
 8022764:	f001 fe96 	bl	8024494 <__ssprint_r>
 8022768:	2800      	cmp	r0, #0
 802276a:	f040 82b6 	bne.w	8022cda <_svfprintf_r+0xec2>
 802276e:	ac2c      	add	r4, sp, #176	; 0xb0
 8022770:	e7f1      	b.n	8022756 <_svfprintf_r+0x93e>
 8022772:	aa1f      	add	r2, sp, #124	; 0x7c
 8022774:	4651      	mov	r1, sl
 8022776:	4658      	mov	r0, fp
 8022778:	f001 fe8c 	bl	8024494 <__ssprint_r>
 802277c:	2800      	cmp	r0, #0
 802277e:	f040 82ac 	bne.w	8022cda <_svfprintf_r+0xec2>
 8022782:	ac2c      	add	r4, sp, #176	; 0xb0
 8022784:	e614      	b.n	80223b0 <_svfprintf_r+0x598>
 8022786:	aa1f      	add	r2, sp, #124	; 0x7c
 8022788:	4651      	mov	r1, sl
 802278a:	4658      	mov	r0, fp
 802278c:	f001 fe82 	bl	8024494 <__ssprint_r>
 8022790:	2800      	cmp	r0, #0
 8022792:	f040 82a2 	bne.w	8022cda <_svfprintf_r+0xec2>
 8022796:	ac2c      	add	r4, sp, #176	; 0xb0
 8022798:	e61c      	b.n	80223d4 <_svfprintf_r+0x5bc>
 802279a:	aa1f      	add	r2, sp, #124	; 0x7c
 802279c:	4651      	mov	r1, sl
 802279e:	4658      	mov	r0, fp
 80227a0:	f001 fe78 	bl	8024494 <__ssprint_r>
 80227a4:	2800      	cmp	r0, #0
 80227a6:	f040 8298 	bne.w	8022cda <_svfprintf_r+0xec2>
 80227aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80227ac:	e622      	b.n	80223f4 <_svfprintf_r+0x5dc>
 80227ae:	2210      	movs	r2, #16
 80227b0:	6062      	str	r2, [r4, #4]
 80227b2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80227b4:	3210      	adds	r2, #16
 80227b6:	9221      	str	r2, [sp, #132]	; 0x84
 80227b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80227ba:	3201      	adds	r2, #1
 80227bc:	2a07      	cmp	r2, #7
 80227be:	9220      	str	r2, [sp, #128]	; 0x80
 80227c0:	dc02      	bgt.n	80227c8 <_svfprintf_r+0x9b0>
 80227c2:	3408      	adds	r4, #8
 80227c4:	3b10      	subs	r3, #16
 80227c6:	e61d      	b.n	8022404 <_svfprintf_r+0x5ec>
 80227c8:	aa1f      	add	r2, sp, #124	; 0x7c
 80227ca:	4651      	mov	r1, sl
 80227cc:	4658      	mov	r0, fp
 80227ce:	930c      	str	r3, [sp, #48]	; 0x30
 80227d0:	f001 fe60 	bl	8024494 <__ssprint_r>
 80227d4:	2800      	cmp	r0, #0
 80227d6:	f040 8280 	bne.w	8022cda <_svfprintf_r+0xec2>
 80227da:	ac2c      	add	r4, sp, #176	; 0xb0
 80227dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80227de:	e7f1      	b.n	80227c4 <_svfprintf_r+0x9ac>
 80227e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80227e2:	4651      	mov	r1, sl
 80227e4:	4658      	mov	r0, fp
 80227e6:	f001 fe55 	bl	8024494 <__ssprint_r>
 80227ea:	2800      	cmp	r0, #0
 80227ec:	f040 8275 	bne.w	8022cda <_svfprintf_r+0xec2>
 80227f0:	ac2c      	add	r4, sp, #176	; 0xb0
 80227f2:	e617      	b.n	8022424 <_svfprintf_r+0x60c>
 80227f4:	2310      	movs	r3, #16
 80227f6:	6063      	str	r3, [r4, #4]
 80227f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80227fa:	3310      	adds	r3, #16
 80227fc:	9321      	str	r3, [sp, #132]	; 0x84
 80227fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022800:	3301      	adds	r3, #1
 8022802:	2b07      	cmp	r3, #7
 8022804:	9320      	str	r3, [sp, #128]	; 0x80
 8022806:	dc02      	bgt.n	802280e <_svfprintf_r+0x9f6>
 8022808:	3408      	adds	r4, #8
 802280a:	3e10      	subs	r6, #16
 802280c:	e60e      	b.n	802242c <_svfprintf_r+0x614>
 802280e:	aa1f      	add	r2, sp, #124	; 0x7c
 8022810:	4651      	mov	r1, sl
 8022812:	4658      	mov	r0, fp
 8022814:	f001 fe3e 	bl	8024494 <__ssprint_r>
 8022818:	2800      	cmp	r0, #0
 802281a:	f040 825e 	bne.w	8022cda <_svfprintf_r+0xec2>
 802281e:	ac2c      	add	r4, sp, #176	; 0xb0
 8022820:	e7f3      	b.n	802280a <_svfprintf_r+0x9f2>
 8022822:	aa1f      	add	r2, sp, #124	; 0x7c
 8022824:	4651      	mov	r1, sl
 8022826:	4658      	mov	r0, fp
 8022828:	f001 fe34 	bl	8024494 <__ssprint_r>
 802282c:	2800      	cmp	r0, #0
 802282e:	f040 8254 	bne.w	8022cda <_svfprintf_r+0xec2>
 8022832:	ac2c      	add	r4, sp, #176	; 0xb0
 8022834:	e60a      	b.n	802244c <_svfprintf_r+0x634>
 8022836:	9b02      	ldr	r3, [sp, #8]
 8022838:	2b65      	cmp	r3, #101	; 0x65
 802283a:	f340 81a9 	ble.w	8022b90 <_svfprintf_r+0xd78>
 802283e:	2200      	movs	r2, #0
 8022840:	2300      	movs	r3, #0
 8022842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022846:	f7de f953 	bl	8000af0 <__aeabi_dcmpeq>
 802284a:	2800      	cmp	r0, #0
 802284c:	d062      	beq.n	8022914 <_svfprintf_r+0xafc>
 802284e:	4b2f      	ldr	r3, [pc, #188]	; (802290c <_svfprintf_r+0xaf4>)
 8022850:	6023      	str	r3, [r4, #0]
 8022852:	2301      	movs	r3, #1
 8022854:	6063      	str	r3, [r4, #4]
 8022856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022858:	3301      	adds	r3, #1
 802285a:	9321      	str	r3, [sp, #132]	; 0x84
 802285c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802285e:	3301      	adds	r3, #1
 8022860:	2b07      	cmp	r3, #7
 8022862:	9320      	str	r3, [sp, #128]	; 0x80
 8022864:	dc25      	bgt.n	80228b2 <_svfprintf_r+0xa9a>
 8022866:	3408      	adds	r4, #8
 8022868:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802286a:	9a03      	ldr	r2, [sp, #12]
 802286c:	4293      	cmp	r3, r2
 802286e:	db02      	blt.n	8022876 <_svfprintf_r+0xa5e>
 8022870:	07ee      	lsls	r6, r5, #31
 8022872:	f57f ae02 	bpl.w	802247a <_svfprintf_r+0x662>
 8022876:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022878:	6023      	str	r3, [r4, #0]
 802287a:	9b08      	ldr	r3, [sp, #32]
 802287c:	6063      	str	r3, [r4, #4]
 802287e:	9a08      	ldr	r2, [sp, #32]
 8022880:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022882:	4413      	add	r3, r2
 8022884:	9321      	str	r3, [sp, #132]	; 0x84
 8022886:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022888:	3301      	adds	r3, #1
 802288a:	2b07      	cmp	r3, #7
 802288c:	9320      	str	r3, [sp, #128]	; 0x80
 802288e:	dc1a      	bgt.n	80228c6 <_svfprintf_r+0xaae>
 8022890:	3408      	adds	r4, #8
 8022892:	9b03      	ldr	r3, [sp, #12]
 8022894:	1e5e      	subs	r6, r3, #1
 8022896:	2e00      	cmp	r6, #0
 8022898:	f77f adef 	ble.w	802247a <_svfprintf_r+0x662>
 802289c:	4f1c      	ldr	r7, [pc, #112]	; (8022910 <_svfprintf_r+0xaf8>)
 802289e:	f04f 0810 	mov.w	r8, #16
 80228a2:	2e10      	cmp	r6, #16
 80228a4:	6027      	str	r7, [r4, #0]
 80228a6:	dc18      	bgt.n	80228da <_svfprintf_r+0xac2>
 80228a8:	6066      	str	r6, [r4, #4]
 80228aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80228ac:	441e      	add	r6, r3
 80228ae:	9621      	str	r6, [sp, #132]	; 0x84
 80228b0:	e5d4      	b.n	802245c <_svfprintf_r+0x644>
 80228b2:	aa1f      	add	r2, sp, #124	; 0x7c
 80228b4:	4651      	mov	r1, sl
 80228b6:	4658      	mov	r0, fp
 80228b8:	f001 fdec 	bl	8024494 <__ssprint_r>
 80228bc:	2800      	cmp	r0, #0
 80228be:	f040 820c 	bne.w	8022cda <_svfprintf_r+0xec2>
 80228c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80228c4:	e7d0      	b.n	8022868 <_svfprintf_r+0xa50>
 80228c6:	aa1f      	add	r2, sp, #124	; 0x7c
 80228c8:	4651      	mov	r1, sl
 80228ca:	4658      	mov	r0, fp
 80228cc:	f001 fde2 	bl	8024494 <__ssprint_r>
 80228d0:	2800      	cmp	r0, #0
 80228d2:	f040 8202 	bne.w	8022cda <_svfprintf_r+0xec2>
 80228d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80228d8:	e7db      	b.n	8022892 <_svfprintf_r+0xa7a>
 80228da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80228dc:	f8c4 8004 	str.w	r8, [r4, #4]
 80228e0:	3310      	adds	r3, #16
 80228e2:	9321      	str	r3, [sp, #132]	; 0x84
 80228e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80228e6:	3301      	adds	r3, #1
 80228e8:	2b07      	cmp	r3, #7
 80228ea:	9320      	str	r3, [sp, #128]	; 0x80
 80228ec:	dc02      	bgt.n	80228f4 <_svfprintf_r+0xadc>
 80228ee:	3408      	adds	r4, #8
 80228f0:	3e10      	subs	r6, #16
 80228f2:	e7d6      	b.n	80228a2 <_svfprintf_r+0xa8a>
 80228f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80228f6:	4651      	mov	r1, sl
 80228f8:	4658      	mov	r0, fp
 80228fa:	f001 fdcb 	bl	8024494 <__ssprint_r>
 80228fe:	2800      	cmp	r0, #0
 8022900:	f040 81eb 	bne.w	8022cda <_svfprintf_r+0xec2>
 8022904:	ac2c      	add	r4, sp, #176	; 0xb0
 8022906:	e7f3      	b.n	80228f0 <_svfprintf_r+0xad8>
 8022908:	08033971 	.word	0x08033971
 802290c:	08033815 	.word	0x08033815
 8022910:	08033992 	.word	0x08033992
 8022914:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022916:	2b00      	cmp	r3, #0
 8022918:	dc7a      	bgt.n	8022a10 <_svfprintf_r+0xbf8>
 802291a:	4b9b      	ldr	r3, [pc, #620]	; (8022b88 <_svfprintf_r+0xd70>)
 802291c:	6023      	str	r3, [r4, #0]
 802291e:	2301      	movs	r3, #1
 8022920:	6063      	str	r3, [r4, #4]
 8022922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022924:	3301      	adds	r3, #1
 8022926:	9321      	str	r3, [sp, #132]	; 0x84
 8022928:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802292a:	3301      	adds	r3, #1
 802292c:	2b07      	cmp	r3, #7
 802292e:	9320      	str	r3, [sp, #128]	; 0x80
 8022930:	dc44      	bgt.n	80229bc <_svfprintf_r+0xba4>
 8022932:	3408      	adds	r4, #8
 8022934:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022936:	b923      	cbnz	r3, 8022942 <_svfprintf_r+0xb2a>
 8022938:	9b03      	ldr	r3, [sp, #12]
 802293a:	b913      	cbnz	r3, 8022942 <_svfprintf_r+0xb2a>
 802293c:	07e8      	lsls	r0, r5, #31
 802293e:	f57f ad9c 	bpl.w	802247a <_svfprintf_r+0x662>
 8022942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022944:	6023      	str	r3, [r4, #0]
 8022946:	9b08      	ldr	r3, [sp, #32]
 8022948:	6063      	str	r3, [r4, #4]
 802294a:	9a08      	ldr	r2, [sp, #32]
 802294c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802294e:	4413      	add	r3, r2
 8022950:	9321      	str	r3, [sp, #132]	; 0x84
 8022952:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022954:	3301      	adds	r3, #1
 8022956:	2b07      	cmp	r3, #7
 8022958:	9320      	str	r3, [sp, #128]	; 0x80
 802295a:	dc39      	bgt.n	80229d0 <_svfprintf_r+0xbb8>
 802295c:	f104 0308 	add.w	r3, r4, #8
 8022960:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8022962:	2e00      	cmp	r6, #0
 8022964:	da19      	bge.n	802299a <_svfprintf_r+0xb82>
 8022966:	4f89      	ldr	r7, [pc, #548]	; (8022b8c <_svfprintf_r+0xd74>)
 8022968:	4276      	negs	r6, r6
 802296a:	2410      	movs	r4, #16
 802296c:	2e10      	cmp	r6, #16
 802296e:	601f      	str	r7, [r3, #0]
 8022970:	dc38      	bgt.n	80229e4 <_svfprintf_r+0xbcc>
 8022972:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022974:	605e      	str	r6, [r3, #4]
 8022976:	4416      	add	r6, r2
 8022978:	9a20      	ldr	r2, [sp, #128]	; 0x80
 802297a:	9621      	str	r6, [sp, #132]	; 0x84
 802297c:	3201      	adds	r2, #1
 802297e:	2a07      	cmp	r2, #7
 8022980:	f103 0308 	add.w	r3, r3, #8
 8022984:	9220      	str	r2, [sp, #128]	; 0x80
 8022986:	dd08      	ble.n	802299a <_svfprintf_r+0xb82>
 8022988:	aa1f      	add	r2, sp, #124	; 0x7c
 802298a:	4651      	mov	r1, sl
 802298c:	4658      	mov	r0, fp
 802298e:	f001 fd81 	bl	8024494 <__ssprint_r>
 8022992:	2800      	cmp	r0, #0
 8022994:	f040 81a1 	bne.w	8022cda <_svfprintf_r+0xec2>
 8022998:	ab2c      	add	r3, sp, #176	; 0xb0
 802299a:	9a03      	ldr	r2, [sp, #12]
 802299c:	605a      	str	r2, [r3, #4]
 802299e:	9903      	ldr	r1, [sp, #12]
 80229a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80229a2:	f8c3 8000 	str.w	r8, [r3]
 80229a6:	440a      	add	r2, r1
 80229a8:	9221      	str	r2, [sp, #132]	; 0x84
 80229aa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80229ac:	3201      	adds	r2, #1
 80229ae:	2a07      	cmp	r2, #7
 80229b0:	9220      	str	r2, [sp, #128]	; 0x80
 80229b2:	f73f ad59 	bgt.w	8022468 <_svfprintf_r+0x650>
 80229b6:	f103 0408 	add.w	r4, r3, #8
 80229ba:	e55e      	b.n	802247a <_svfprintf_r+0x662>
 80229bc:	aa1f      	add	r2, sp, #124	; 0x7c
 80229be:	4651      	mov	r1, sl
 80229c0:	4658      	mov	r0, fp
 80229c2:	f001 fd67 	bl	8024494 <__ssprint_r>
 80229c6:	2800      	cmp	r0, #0
 80229c8:	f040 8187 	bne.w	8022cda <_svfprintf_r+0xec2>
 80229cc:	ac2c      	add	r4, sp, #176	; 0xb0
 80229ce:	e7b1      	b.n	8022934 <_svfprintf_r+0xb1c>
 80229d0:	aa1f      	add	r2, sp, #124	; 0x7c
 80229d2:	4651      	mov	r1, sl
 80229d4:	4658      	mov	r0, fp
 80229d6:	f001 fd5d 	bl	8024494 <__ssprint_r>
 80229da:	2800      	cmp	r0, #0
 80229dc:	f040 817d 	bne.w	8022cda <_svfprintf_r+0xec2>
 80229e0:	ab2c      	add	r3, sp, #176	; 0xb0
 80229e2:	e7bd      	b.n	8022960 <_svfprintf_r+0xb48>
 80229e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80229e6:	605c      	str	r4, [r3, #4]
 80229e8:	3210      	adds	r2, #16
 80229ea:	9221      	str	r2, [sp, #132]	; 0x84
 80229ec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80229ee:	3201      	adds	r2, #1
 80229f0:	2a07      	cmp	r2, #7
 80229f2:	9220      	str	r2, [sp, #128]	; 0x80
 80229f4:	dc02      	bgt.n	80229fc <_svfprintf_r+0xbe4>
 80229f6:	3308      	adds	r3, #8
 80229f8:	3e10      	subs	r6, #16
 80229fa:	e7b7      	b.n	802296c <_svfprintf_r+0xb54>
 80229fc:	aa1f      	add	r2, sp, #124	; 0x7c
 80229fe:	4651      	mov	r1, sl
 8022a00:	4658      	mov	r0, fp
 8022a02:	f001 fd47 	bl	8024494 <__ssprint_r>
 8022a06:	2800      	cmp	r0, #0
 8022a08:	f040 8167 	bne.w	8022cda <_svfprintf_r+0xec2>
 8022a0c:	ab2c      	add	r3, sp, #176	; 0xb0
 8022a0e:	e7f3      	b.n	80229f8 <_svfprintf_r+0xbe0>
 8022a10:	9b03      	ldr	r3, [sp, #12]
 8022a12:	42bb      	cmp	r3, r7
 8022a14:	bfa8      	it	ge
 8022a16:	463b      	movge	r3, r7
 8022a18:	2b00      	cmp	r3, #0
 8022a1a:	461e      	mov	r6, r3
 8022a1c:	dd0b      	ble.n	8022a36 <_svfprintf_r+0xc1e>
 8022a1e:	6063      	str	r3, [r4, #4]
 8022a20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022a22:	f8c4 8000 	str.w	r8, [r4]
 8022a26:	4433      	add	r3, r6
 8022a28:	9321      	str	r3, [sp, #132]	; 0x84
 8022a2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022a2c:	3301      	adds	r3, #1
 8022a2e:	2b07      	cmp	r3, #7
 8022a30:	9320      	str	r3, [sp, #128]	; 0x80
 8022a32:	dc5f      	bgt.n	8022af4 <_svfprintf_r+0xcdc>
 8022a34:	3408      	adds	r4, #8
 8022a36:	2e00      	cmp	r6, #0
 8022a38:	bfac      	ite	ge
 8022a3a:	1bbe      	subge	r6, r7, r6
 8022a3c:	463e      	movlt	r6, r7
 8022a3e:	2e00      	cmp	r6, #0
 8022a40:	dd0f      	ble.n	8022a62 <_svfprintf_r+0xc4a>
 8022a42:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8022b8c <_svfprintf_r+0xd74>
 8022a46:	f8c4 9000 	str.w	r9, [r4]
 8022a4a:	2e10      	cmp	r6, #16
 8022a4c:	dc5c      	bgt.n	8022b08 <_svfprintf_r+0xcf0>
 8022a4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022a50:	6066      	str	r6, [r4, #4]
 8022a52:	441e      	add	r6, r3
 8022a54:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022a56:	9621      	str	r6, [sp, #132]	; 0x84
 8022a58:	3301      	adds	r3, #1
 8022a5a:	2b07      	cmp	r3, #7
 8022a5c:	9320      	str	r3, [sp, #128]	; 0x80
 8022a5e:	dc6a      	bgt.n	8022b36 <_svfprintf_r+0xd1e>
 8022a60:	3408      	adds	r4, #8
 8022a62:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022a64:	9a03      	ldr	r2, [sp, #12]
 8022a66:	4293      	cmp	r3, r2
 8022a68:	db01      	blt.n	8022a6e <_svfprintf_r+0xc56>
 8022a6a:	07e9      	lsls	r1, r5, #31
 8022a6c:	d50d      	bpl.n	8022a8a <_svfprintf_r+0xc72>
 8022a6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022a70:	6023      	str	r3, [r4, #0]
 8022a72:	9b08      	ldr	r3, [sp, #32]
 8022a74:	6063      	str	r3, [r4, #4]
 8022a76:	9a08      	ldr	r2, [sp, #32]
 8022a78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022a7a:	4413      	add	r3, r2
 8022a7c:	9321      	str	r3, [sp, #132]	; 0x84
 8022a7e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022a80:	3301      	adds	r3, #1
 8022a82:	2b07      	cmp	r3, #7
 8022a84:	9320      	str	r3, [sp, #128]	; 0x80
 8022a86:	dc60      	bgt.n	8022b4a <_svfprintf_r+0xd32>
 8022a88:	3408      	adds	r4, #8
 8022a8a:	9b03      	ldr	r3, [sp, #12]
 8022a8c:	9a03      	ldr	r2, [sp, #12]
 8022a8e:	1bde      	subs	r6, r3, r7
 8022a90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022a92:	1ad3      	subs	r3, r2, r3
 8022a94:	429e      	cmp	r6, r3
 8022a96:	bfa8      	it	ge
 8022a98:	461e      	movge	r6, r3
 8022a9a:	2e00      	cmp	r6, #0
 8022a9c:	dd0b      	ble.n	8022ab6 <_svfprintf_r+0xc9e>
 8022a9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022aa0:	6066      	str	r6, [r4, #4]
 8022aa2:	4433      	add	r3, r6
 8022aa4:	9321      	str	r3, [sp, #132]	; 0x84
 8022aa6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022aa8:	3301      	adds	r3, #1
 8022aaa:	4447      	add	r7, r8
 8022aac:	2b07      	cmp	r3, #7
 8022aae:	6027      	str	r7, [r4, #0]
 8022ab0:	9320      	str	r3, [sp, #128]	; 0x80
 8022ab2:	dc54      	bgt.n	8022b5e <_svfprintf_r+0xd46>
 8022ab4:	3408      	adds	r4, #8
 8022ab6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8022ab8:	9a03      	ldr	r2, [sp, #12]
 8022aba:	2e00      	cmp	r6, #0
 8022abc:	eba2 0303 	sub.w	r3, r2, r3
 8022ac0:	bfac      	ite	ge
 8022ac2:	1b9e      	subge	r6, r3, r6
 8022ac4:	461e      	movlt	r6, r3
 8022ac6:	2e00      	cmp	r6, #0
 8022ac8:	f77f acd7 	ble.w	802247a <_svfprintf_r+0x662>
 8022acc:	4f2f      	ldr	r7, [pc, #188]	; (8022b8c <_svfprintf_r+0xd74>)
 8022ace:	f04f 0810 	mov.w	r8, #16
 8022ad2:	2e10      	cmp	r6, #16
 8022ad4:	6027      	str	r7, [r4, #0]
 8022ad6:	f77f aee7 	ble.w	80228a8 <_svfprintf_r+0xa90>
 8022ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022adc:	f8c4 8004 	str.w	r8, [r4, #4]
 8022ae0:	3310      	adds	r3, #16
 8022ae2:	9321      	str	r3, [sp, #132]	; 0x84
 8022ae4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022ae6:	3301      	adds	r3, #1
 8022ae8:	2b07      	cmp	r3, #7
 8022aea:	9320      	str	r3, [sp, #128]	; 0x80
 8022aec:	dc41      	bgt.n	8022b72 <_svfprintf_r+0xd5a>
 8022aee:	3408      	adds	r4, #8
 8022af0:	3e10      	subs	r6, #16
 8022af2:	e7ee      	b.n	8022ad2 <_svfprintf_r+0xcba>
 8022af4:	aa1f      	add	r2, sp, #124	; 0x7c
 8022af6:	4651      	mov	r1, sl
 8022af8:	4658      	mov	r0, fp
 8022afa:	f001 fccb 	bl	8024494 <__ssprint_r>
 8022afe:	2800      	cmp	r0, #0
 8022b00:	f040 80eb 	bne.w	8022cda <_svfprintf_r+0xec2>
 8022b04:	ac2c      	add	r4, sp, #176	; 0xb0
 8022b06:	e796      	b.n	8022a36 <_svfprintf_r+0xc1e>
 8022b08:	2310      	movs	r3, #16
 8022b0a:	6063      	str	r3, [r4, #4]
 8022b0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022b0e:	3310      	adds	r3, #16
 8022b10:	9321      	str	r3, [sp, #132]	; 0x84
 8022b12:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022b14:	3301      	adds	r3, #1
 8022b16:	2b07      	cmp	r3, #7
 8022b18:	9320      	str	r3, [sp, #128]	; 0x80
 8022b1a:	dc02      	bgt.n	8022b22 <_svfprintf_r+0xd0a>
 8022b1c:	3408      	adds	r4, #8
 8022b1e:	3e10      	subs	r6, #16
 8022b20:	e791      	b.n	8022a46 <_svfprintf_r+0xc2e>
 8022b22:	aa1f      	add	r2, sp, #124	; 0x7c
 8022b24:	4651      	mov	r1, sl
 8022b26:	4658      	mov	r0, fp
 8022b28:	f001 fcb4 	bl	8024494 <__ssprint_r>
 8022b2c:	2800      	cmp	r0, #0
 8022b2e:	f040 80d4 	bne.w	8022cda <_svfprintf_r+0xec2>
 8022b32:	ac2c      	add	r4, sp, #176	; 0xb0
 8022b34:	e7f3      	b.n	8022b1e <_svfprintf_r+0xd06>
 8022b36:	aa1f      	add	r2, sp, #124	; 0x7c
 8022b38:	4651      	mov	r1, sl
 8022b3a:	4658      	mov	r0, fp
 8022b3c:	f001 fcaa 	bl	8024494 <__ssprint_r>
 8022b40:	2800      	cmp	r0, #0
 8022b42:	f040 80ca 	bne.w	8022cda <_svfprintf_r+0xec2>
 8022b46:	ac2c      	add	r4, sp, #176	; 0xb0
 8022b48:	e78b      	b.n	8022a62 <_svfprintf_r+0xc4a>
 8022b4a:	aa1f      	add	r2, sp, #124	; 0x7c
 8022b4c:	4651      	mov	r1, sl
 8022b4e:	4658      	mov	r0, fp
 8022b50:	f001 fca0 	bl	8024494 <__ssprint_r>
 8022b54:	2800      	cmp	r0, #0
 8022b56:	f040 80c0 	bne.w	8022cda <_svfprintf_r+0xec2>
 8022b5a:	ac2c      	add	r4, sp, #176	; 0xb0
 8022b5c:	e795      	b.n	8022a8a <_svfprintf_r+0xc72>
 8022b5e:	aa1f      	add	r2, sp, #124	; 0x7c
 8022b60:	4651      	mov	r1, sl
 8022b62:	4658      	mov	r0, fp
 8022b64:	f001 fc96 	bl	8024494 <__ssprint_r>
 8022b68:	2800      	cmp	r0, #0
 8022b6a:	f040 80b6 	bne.w	8022cda <_svfprintf_r+0xec2>
 8022b6e:	ac2c      	add	r4, sp, #176	; 0xb0
 8022b70:	e7a1      	b.n	8022ab6 <_svfprintf_r+0xc9e>
 8022b72:	aa1f      	add	r2, sp, #124	; 0x7c
 8022b74:	4651      	mov	r1, sl
 8022b76:	4658      	mov	r0, fp
 8022b78:	f001 fc8c 	bl	8024494 <__ssprint_r>
 8022b7c:	2800      	cmp	r0, #0
 8022b7e:	f040 80ac 	bne.w	8022cda <_svfprintf_r+0xec2>
 8022b82:	ac2c      	add	r4, sp, #176	; 0xb0
 8022b84:	e7b4      	b.n	8022af0 <_svfprintf_r+0xcd8>
 8022b86:	bf00      	nop
 8022b88:	08033815 	.word	0x08033815
 8022b8c:	08033992 	.word	0x08033992
 8022b90:	9b03      	ldr	r3, [sp, #12]
 8022b92:	2b01      	cmp	r3, #1
 8022b94:	dc01      	bgt.n	8022b9a <_svfprintf_r+0xd82>
 8022b96:	07ea      	lsls	r2, r5, #31
 8022b98:	d576      	bpl.n	8022c88 <_svfprintf_r+0xe70>
 8022b9a:	2301      	movs	r3, #1
 8022b9c:	6063      	str	r3, [r4, #4]
 8022b9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022ba0:	f8c4 8000 	str.w	r8, [r4]
 8022ba4:	3301      	adds	r3, #1
 8022ba6:	9321      	str	r3, [sp, #132]	; 0x84
 8022ba8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022baa:	3301      	adds	r3, #1
 8022bac:	2b07      	cmp	r3, #7
 8022bae:	9320      	str	r3, [sp, #128]	; 0x80
 8022bb0:	dc36      	bgt.n	8022c20 <_svfprintf_r+0xe08>
 8022bb2:	3408      	adds	r4, #8
 8022bb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022bb6:	6023      	str	r3, [r4, #0]
 8022bb8:	9b08      	ldr	r3, [sp, #32]
 8022bba:	6063      	str	r3, [r4, #4]
 8022bbc:	9a08      	ldr	r2, [sp, #32]
 8022bbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022bc0:	4413      	add	r3, r2
 8022bc2:	9321      	str	r3, [sp, #132]	; 0x84
 8022bc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022bc6:	3301      	adds	r3, #1
 8022bc8:	2b07      	cmp	r3, #7
 8022bca:	9320      	str	r3, [sp, #128]	; 0x80
 8022bcc:	dc31      	bgt.n	8022c32 <_svfprintf_r+0xe1a>
 8022bce:	3408      	adds	r4, #8
 8022bd0:	2300      	movs	r3, #0
 8022bd2:	2200      	movs	r2, #0
 8022bd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022bd8:	f7dd ff8a 	bl	8000af0 <__aeabi_dcmpeq>
 8022bdc:	9b03      	ldr	r3, [sp, #12]
 8022bde:	1e5e      	subs	r6, r3, #1
 8022be0:	2800      	cmp	r0, #0
 8022be2:	d12f      	bne.n	8022c44 <_svfprintf_r+0xe2c>
 8022be4:	f108 0301 	add.w	r3, r8, #1
 8022be8:	e884 0048 	stmia.w	r4, {r3, r6}
 8022bec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022bee:	9a03      	ldr	r2, [sp, #12]
 8022bf0:	3b01      	subs	r3, #1
 8022bf2:	4413      	add	r3, r2
 8022bf4:	9321      	str	r3, [sp, #132]	; 0x84
 8022bf6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022bf8:	3301      	adds	r3, #1
 8022bfa:	2b07      	cmp	r3, #7
 8022bfc:	9320      	str	r3, [sp, #128]	; 0x80
 8022bfe:	dd4a      	ble.n	8022c96 <_svfprintf_r+0xe7e>
 8022c00:	aa1f      	add	r2, sp, #124	; 0x7c
 8022c02:	4651      	mov	r1, sl
 8022c04:	4658      	mov	r0, fp
 8022c06:	f001 fc45 	bl	8024494 <__ssprint_r>
 8022c0a:	2800      	cmp	r0, #0
 8022c0c:	d165      	bne.n	8022cda <_svfprintf_r+0xec2>
 8022c0e:	ac2c      	add	r4, sp, #176	; 0xb0
 8022c10:	ab1b      	add	r3, sp, #108	; 0x6c
 8022c12:	6023      	str	r3, [r4, #0]
 8022c14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022c16:	6063      	str	r3, [r4, #4]
 8022c18:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8022c1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022c1c:	4413      	add	r3, r2
 8022c1e:	e41c      	b.n	802245a <_svfprintf_r+0x642>
 8022c20:	aa1f      	add	r2, sp, #124	; 0x7c
 8022c22:	4651      	mov	r1, sl
 8022c24:	4658      	mov	r0, fp
 8022c26:	f001 fc35 	bl	8024494 <__ssprint_r>
 8022c2a:	2800      	cmp	r0, #0
 8022c2c:	d155      	bne.n	8022cda <_svfprintf_r+0xec2>
 8022c2e:	ac2c      	add	r4, sp, #176	; 0xb0
 8022c30:	e7c0      	b.n	8022bb4 <_svfprintf_r+0xd9c>
 8022c32:	aa1f      	add	r2, sp, #124	; 0x7c
 8022c34:	4651      	mov	r1, sl
 8022c36:	4658      	mov	r0, fp
 8022c38:	f001 fc2c 	bl	8024494 <__ssprint_r>
 8022c3c:	2800      	cmp	r0, #0
 8022c3e:	d14c      	bne.n	8022cda <_svfprintf_r+0xec2>
 8022c40:	ac2c      	add	r4, sp, #176	; 0xb0
 8022c42:	e7c5      	b.n	8022bd0 <_svfprintf_r+0xdb8>
 8022c44:	2e00      	cmp	r6, #0
 8022c46:	dde3      	ble.n	8022c10 <_svfprintf_r+0xdf8>
 8022c48:	4f59      	ldr	r7, [pc, #356]	; (8022db0 <_svfprintf_r+0xf98>)
 8022c4a:	f04f 0810 	mov.w	r8, #16
 8022c4e:	2e10      	cmp	r6, #16
 8022c50:	6027      	str	r7, [r4, #0]
 8022c52:	dc04      	bgt.n	8022c5e <_svfprintf_r+0xe46>
 8022c54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022c56:	6066      	str	r6, [r4, #4]
 8022c58:	441e      	add	r6, r3
 8022c5a:	9621      	str	r6, [sp, #132]	; 0x84
 8022c5c:	e7cb      	b.n	8022bf6 <_svfprintf_r+0xdde>
 8022c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022c60:	f8c4 8004 	str.w	r8, [r4, #4]
 8022c64:	3310      	adds	r3, #16
 8022c66:	9321      	str	r3, [sp, #132]	; 0x84
 8022c68:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022c6a:	3301      	adds	r3, #1
 8022c6c:	2b07      	cmp	r3, #7
 8022c6e:	9320      	str	r3, [sp, #128]	; 0x80
 8022c70:	dc02      	bgt.n	8022c78 <_svfprintf_r+0xe60>
 8022c72:	3408      	adds	r4, #8
 8022c74:	3e10      	subs	r6, #16
 8022c76:	e7ea      	b.n	8022c4e <_svfprintf_r+0xe36>
 8022c78:	aa1f      	add	r2, sp, #124	; 0x7c
 8022c7a:	4651      	mov	r1, sl
 8022c7c:	4658      	mov	r0, fp
 8022c7e:	f001 fc09 	bl	8024494 <__ssprint_r>
 8022c82:	bb50      	cbnz	r0, 8022cda <_svfprintf_r+0xec2>
 8022c84:	ac2c      	add	r4, sp, #176	; 0xb0
 8022c86:	e7f5      	b.n	8022c74 <_svfprintf_r+0xe5c>
 8022c88:	2301      	movs	r3, #1
 8022c8a:	6063      	str	r3, [r4, #4]
 8022c8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022c8e:	f8c4 8000 	str.w	r8, [r4]
 8022c92:	3301      	adds	r3, #1
 8022c94:	e7ae      	b.n	8022bf4 <_svfprintf_r+0xddc>
 8022c96:	3408      	adds	r4, #8
 8022c98:	e7ba      	b.n	8022c10 <_svfprintf_r+0xdf8>
 8022c9a:	3408      	adds	r4, #8
 8022c9c:	f7ff bbed 	b.w	802247a <_svfprintf_r+0x662>
 8022ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022ca4:	1a9d      	subs	r5, r3, r2
 8022ca6:	2d00      	cmp	r5, #0
 8022ca8:	f77f abea 	ble.w	8022480 <_svfprintf_r+0x668>
 8022cac:	2610      	movs	r6, #16
 8022cae:	4b41      	ldr	r3, [pc, #260]	; (8022db4 <_svfprintf_r+0xf9c>)
 8022cb0:	6023      	str	r3, [r4, #0]
 8022cb2:	2d10      	cmp	r5, #16
 8022cb4:	dc1b      	bgt.n	8022cee <_svfprintf_r+0xed6>
 8022cb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022cb8:	6065      	str	r5, [r4, #4]
 8022cba:	441d      	add	r5, r3
 8022cbc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022cbe:	9521      	str	r5, [sp, #132]	; 0x84
 8022cc0:	3301      	adds	r3, #1
 8022cc2:	2b07      	cmp	r3, #7
 8022cc4:	9320      	str	r3, [sp, #128]	; 0x80
 8022cc6:	f77f abdb 	ble.w	8022480 <_svfprintf_r+0x668>
 8022cca:	aa1f      	add	r2, sp, #124	; 0x7c
 8022ccc:	4651      	mov	r1, sl
 8022cce:	4658      	mov	r0, fp
 8022cd0:	f001 fbe0 	bl	8024494 <__ssprint_r>
 8022cd4:	2800      	cmp	r0, #0
 8022cd6:	f43f abd3 	beq.w	8022480 <_svfprintf_r+0x668>
 8022cda:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8022cde:	f013 0f40 	tst.w	r3, #64	; 0x40
 8022ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ce4:	bf18      	it	ne
 8022ce6:	f04f 33ff 	movne.w	r3, #4294967295
 8022cea:	f7ff b8b9 	b.w	8021e60 <_svfprintf_r+0x48>
 8022cee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022cf0:	6066      	str	r6, [r4, #4]
 8022cf2:	3310      	adds	r3, #16
 8022cf4:	9321      	str	r3, [sp, #132]	; 0x84
 8022cf6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022cf8:	3301      	adds	r3, #1
 8022cfa:	2b07      	cmp	r3, #7
 8022cfc:	9320      	str	r3, [sp, #128]	; 0x80
 8022cfe:	dc02      	bgt.n	8022d06 <_svfprintf_r+0xeee>
 8022d00:	3408      	adds	r4, #8
 8022d02:	3d10      	subs	r5, #16
 8022d04:	e7d3      	b.n	8022cae <_svfprintf_r+0xe96>
 8022d06:	aa1f      	add	r2, sp, #124	; 0x7c
 8022d08:	4651      	mov	r1, sl
 8022d0a:	4658      	mov	r0, fp
 8022d0c:	f001 fbc2 	bl	8024494 <__ssprint_r>
 8022d10:	2800      	cmp	r0, #0
 8022d12:	d1e2      	bne.n	8022cda <_svfprintf_r+0xec2>
 8022d14:	ac2c      	add	r4, sp, #176	; 0xb0
 8022d16:	e7f4      	b.n	8022d02 <_svfprintf_r+0xeea>
 8022d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022d1a:	2b00      	cmp	r3, #0
 8022d1c:	d0dd      	beq.n	8022cda <_svfprintf_r+0xec2>
 8022d1e:	aa1f      	add	r2, sp, #124	; 0x7c
 8022d20:	4651      	mov	r1, sl
 8022d22:	4658      	mov	r0, fp
 8022d24:	f001 fbb6 	bl	8024494 <__ssprint_r>
 8022d28:	e7d7      	b.n	8022cda <_svfprintf_r+0xec2>
 8022d2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8022d2e:	4610      	mov	r0, r2
 8022d30:	4619      	mov	r1, r3
 8022d32:	f7dd ff0f 	bl	8000b54 <__aeabi_dcmpun>
 8022d36:	2800      	cmp	r0, #0
 8022d38:	f43f aa44 	beq.w	80221c4 <_svfprintf_r+0x3ac>
 8022d3c:	4b1e      	ldr	r3, [pc, #120]	; (8022db8 <_svfprintf_r+0xfa0>)
 8022d3e:	4a1f      	ldr	r2, [pc, #124]	; (8022dbc <_svfprintf_r+0xfa4>)
 8022d40:	f7ff ba34 	b.w	80221ac <_svfprintf_r+0x394>
 8022d44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8022d46:	eba3 0308 	sub.w	r3, r3, r8
 8022d4a:	9303      	str	r3, [sp, #12]
 8022d4c:	f7ff bab5 	b.w	80222ba <_svfprintf_r+0x4a2>
 8022d50:	ea56 0207 	orrs.w	r2, r6, r7
 8022d54:	950b      	str	r5, [sp, #44]	; 0x2c
 8022d56:	f43f ac2b 	beq.w	80225b0 <_svfprintf_r+0x798>
 8022d5a:	2b01      	cmp	r3, #1
 8022d5c:	f43f ac9d 	beq.w	802269a <_svfprintf_r+0x882>
 8022d60:	2b02      	cmp	r3, #2
 8022d62:	f43f acbd 	beq.w	80226e0 <_svfprintf_r+0x8c8>
 8022d66:	ab2c      	add	r3, sp, #176	; 0xb0
 8022d68:	08f1      	lsrs	r1, r6, #3
 8022d6a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8022d6e:	08f8      	lsrs	r0, r7, #3
 8022d70:	f006 0207 	and.w	r2, r6, #7
 8022d74:	4607      	mov	r7, r0
 8022d76:	460e      	mov	r6, r1
 8022d78:	3230      	adds	r2, #48	; 0x30
 8022d7a:	ea56 0107 	orrs.w	r1, r6, r7
 8022d7e:	f103 38ff 	add.w	r8, r3, #4294967295
 8022d82:	f803 2c01 	strb.w	r2, [r3, #-1]
 8022d86:	f47f ac86 	bne.w	8022696 <_svfprintf_r+0x87e>
 8022d8a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022d8c:	07c9      	lsls	r1, r1, #31
 8022d8e:	d506      	bpl.n	8022d9e <_svfprintf_r+0xf86>
 8022d90:	2a30      	cmp	r2, #48	; 0x30
 8022d92:	d004      	beq.n	8022d9e <_svfprintf_r+0xf86>
 8022d94:	2230      	movs	r2, #48	; 0x30
 8022d96:	f808 2c01 	strb.w	r2, [r8, #-1]
 8022d9a:	f1a3 0802 	sub.w	r8, r3, #2
 8022d9e:	464e      	mov	r6, r9
 8022da0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8022da4:	eba9 0908 	sub.w	r9, r9, r8
 8022da8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022daa:	2700      	movs	r7, #0
 8022dac:	f7ff bad1 	b.w	8022352 <_svfprintf_r+0x53a>
 8022db0:	08033992 	.word	0x08033992
 8022db4:	08033982 	.word	0x08033982
 8022db8:	0803381b 	.word	0x0803381b
 8022dbc:	0803395c 	.word	0x0803395c

08022dc0 <quorem>:
 8022dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022dc4:	6903      	ldr	r3, [r0, #16]
 8022dc6:	690c      	ldr	r4, [r1, #16]
 8022dc8:	429c      	cmp	r4, r3
 8022dca:	4680      	mov	r8, r0
 8022dcc:	f300 8082 	bgt.w	8022ed4 <quorem+0x114>
 8022dd0:	3c01      	subs	r4, #1
 8022dd2:	f101 0714 	add.w	r7, r1, #20
 8022dd6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8022dda:	f100 0614 	add.w	r6, r0, #20
 8022dde:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8022de2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8022de6:	eb06 030e 	add.w	r3, r6, lr
 8022dea:	3501      	adds	r5, #1
 8022dec:	eb07 090e 	add.w	r9, r7, lr
 8022df0:	9301      	str	r3, [sp, #4]
 8022df2:	fbb0 f5f5 	udiv	r5, r0, r5
 8022df6:	b395      	cbz	r5, 8022e5e <quorem+0x9e>
 8022df8:	f04f 0a00 	mov.w	sl, #0
 8022dfc:	4638      	mov	r0, r7
 8022dfe:	46b4      	mov	ip, r6
 8022e00:	46d3      	mov	fp, sl
 8022e02:	f850 2b04 	ldr.w	r2, [r0], #4
 8022e06:	b293      	uxth	r3, r2
 8022e08:	fb05 a303 	mla	r3, r5, r3, sl
 8022e0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8022e10:	b29b      	uxth	r3, r3
 8022e12:	ebab 0303 	sub.w	r3, fp, r3
 8022e16:	0c12      	lsrs	r2, r2, #16
 8022e18:	f8bc b000 	ldrh.w	fp, [ip]
 8022e1c:	fb05 a202 	mla	r2, r5, r2, sl
 8022e20:	fa13 f38b 	uxtah	r3, r3, fp
 8022e24:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8022e28:	fa1f fb82 	uxth.w	fp, r2
 8022e2c:	f8dc 2000 	ldr.w	r2, [ip]
 8022e30:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8022e34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022e38:	b29b      	uxth	r3, r3
 8022e3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022e3e:	4581      	cmp	r9, r0
 8022e40:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8022e44:	f84c 3b04 	str.w	r3, [ip], #4
 8022e48:	d2db      	bcs.n	8022e02 <quorem+0x42>
 8022e4a:	f856 300e 	ldr.w	r3, [r6, lr]
 8022e4e:	b933      	cbnz	r3, 8022e5e <quorem+0x9e>
 8022e50:	9b01      	ldr	r3, [sp, #4]
 8022e52:	3b04      	subs	r3, #4
 8022e54:	429e      	cmp	r6, r3
 8022e56:	461a      	mov	r2, r3
 8022e58:	d330      	bcc.n	8022ebc <quorem+0xfc>
 8022e5a:	f8c8 4010 	str.w	r4, [r8, #16]
 8022e5e:	4640      	mov	r0, r8
 8022e60:	f001 fa41 	bl	80242e6 <__mcmp>
 8022e64:	2800      	cmp	r0, #0
 8022e66:	db25      	blt.n	8022eb4 <quorem+0xf4>
 8022e68:	3501      	adds	r5, #1
 8022e6a:	4630      	mov	r0, r6
 8022e6c:	f04f 0e00 	mov.w	lr, #0
 8022e70:	f857 2b04 	ldr.w	r2, [r7], #4
 8022e74:	f8d0 c000 	ldr.w	ip, [r0]
 8022e78:	b293      	uxth	r3, r2
 8022e7a:	ebae 0303 	sub.w	r3, lr, r3
 8022e7e:	0c12      	lsrs	r2, r2, #16
 8022e80:	fa13 f38c 	uxtah	r3, r3, ip
 8022e84:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8022e88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8022e8c:	b29b      	uxth	r3, r3
 8022e8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8022e92:	45b9      	cmp	r9, r7
 8022e94:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8022e98:	f840 3b04 	str.w	r3, [r0], #4
 8022e9c:	d2e8      	bcs.n	8022e70 <quorem+0xb0>
 8022e9e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8022ea2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8022ea6:	b92a      	cbnz	r2, 8022eb4 <quorem+0xf4>
 8022ea8:	3b04      	subs	r3, #4
 8022eaa:	429e      	cmp	r6, r3
 8022eac:	461a      	mov	r2, r3
 8022eae:	d30b      	bcc.n	8022ec8 <quorem+0x108>
 8022eb0:	f8c8 4010 	str.w	r4, [r8, #16]
 8022eb4:	4628      	mov	r0, r5
 8022eb6:	b003      	add	sp, #12
 8022eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ebc:	6812      	ldr	r2, [r2, #0]
 8022ebe:	3b04      	subs	r3, #4
 8022ec0:	2a00      	cmp	r2, #0
 8022ec2:	d1ca      	bne.n	8022e5a <quorem+0x9a>
 8022ec4:	3c01      	subs	r4, #1
 8022ec6:	e7c5      	b.n	8022e54 <quorem+0x94>
 8022ec8:	6812      	ldr	r2, [r2, #0]
 8022eca:	3b04      	subs	r3, #4
 8022ecc:	2a00      	cmp	r2, #0
 8022ece:	d1ef      	bne.n	8022eb0 <quorem+0xf0>
 8022ed0:	3c01      	subs	r4, #1
 8022ed2:	e7ea      	b.n	8022eaa <quorem+0xea>
 8022ed4:	2000      	movs	r0, #0
 8022ed6:	e7ee      	b.n	8022eb6 <quorem+0xf6>

08022ed8 <_dtoa_r>:
 8022ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022edc:	ec57 6b10 	vmov	r6, r7, d0
 8022ee0:	b097      	sub	sp, #92	; 0x5c
 8022ee2:	e9cd 6700 	strd	r6, r7, [sp]
 8022ee6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022ee8:	9107      	str	r1, [sp, #28]
 8022eea:	4604      	mov	r4, r0
 8022eec:	920a      	str	r2, [sp, #40]	; 0x28
 8022eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8022ef0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8022ef2:	b93e      	cbnz	r6, 8022f04 <_dtoa_r+0x2c>
 8022ef4:	2010      	movs	r0, #16
 8022ef6:	f000 fdcb 	bl	8023a90 <malloc>
 8022efa:	6260      	str	r0, [r4, #36]	; 0x24
 8022efc:	6046      	str	r6, [r0, #4]
 8022efe:	6086      	str	r6, [r0, #8]
 8022f00:	6006      	str	r6, [r0, #0]
 8022f02:	60c6      	str	r6, [r0, #12]
 8022f04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022f06:	6819      	ldr	r1, [r3, #0]
 8022f08:	b151      	cbz	r1, 8022f20 <_dtoa_r+0x48>
 8022f0a:	685a      	ldr	r2, [r3, #4]
 8022f0c:	604a      	str	r2, [r1, #4]
 8022f0e:	2301      	movs	r3, #1
 8022f10:	4093      	lsls	r3, r2
 8022f12:	608b      	str	r3, [r1, #8]
 8022f14:	4620      	mov	r0, r4
 8022f16:	f001 f811 	bl	8023f3c <_Bfree>
 8022f1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022f1c:	2200      	movs	r2, #0
 8022f1e:	601a      	str	r2, [r3, #0]
 8022f20:	9b01      	ldr	r3, [sp, #4]
 8022f22:	2b00      	cmp	r3, #0
 8022f24:	bfbf      	itttt	lt
 8022f26:	2301      	movlt	r3, #1
 8022f28:	602b      	strlt	r3, [r5, #0]
 8022f2a:	9b01      	ldrlt	r3, [sp, #4]
 8022f2c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8022f30:	bfb2      	itee	lt
 8022f32:	9301      	strlt	r3, [sp, #4]
 8022f34:	2300      	movge	r3, #0
 8022f36:	602b      	strge	r3, [r5, #0]
 8022f38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8022f3c:	4ba8      	ldr	r3, [pc, #672]	; (80231e0 <_dtoa_r+0x308>)
 8022f3e:	ea33 0308 	bics.w	r3, r3, r8
 8022f42:	d11b      	bne.n	8022f7c <_dtoa_r+0xa4>
 8022f44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022f46:	f242 730f 	movw	r3, #9999	; 0x270f
 8022f4a:	6013      	str	r3, [r2, #0]
 8022f4c:	9b00      	ldr	r3, [sp, #0]
 8022f4e:	b923      	cbnz	r3, 8022f5a <_dtoa_r+0x82>
 8022f50:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8022f54:	2800      	cmp	r0, #0
 8022f56:	f000 8578 	beq.w	8023a4a <_dtoa_r+0xb72>
 8022f5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022f5c:	b953      	cbnz	r3, 8022f74 <_dtoa_r+0x9c>
 8022f5e:	4ba1      	ldr	r3, [pc, #644]	; (80231e4 <_dtoa_r+0x30c>)
 8022f60:	e021      	b.n	8022fa6 <_dtoa_r+0xce>
 8022f62:	4ba1      	ldr	r3, [pc, #644]	; (80231e8 <_dtoa_r+0x310>)
 8022f64:	9302      	str	r3, [sp, #8]
 8022f66:	3308      	adds	r3, #8
 8022f68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022f6a:	6013      	str	r3, [r2, #0]
 8022f6c:	9802      	ldr	r0, [sp, #8]
 8022f6e:	b017      	add	sp, #92	; 0x5c
 8022f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f74:	4b9b      	ldr	r3, [pc, #620]	; (80231e4 <_dtoa_r+0x30c>)
 8022f76:	9302      	str	r3, [sp, #8]
 8022f78:	3303      	adds	r3, #3
 8022f7a:	e7f5      	b.n	8022f68 <_dtoa_r+0x90>
 8022f7c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8022f80:	2200      	movs	r2, #0
 8022f82:	2300      	movs	r3, #0
 8022f84:	4630      	mov	r0, r6
 8022f86:	4639      	mov	r1, r7
 8022f88:	f7dd fdb2 	bl	8000af0 <__aeabi_dcmpeq>
 8022f8c:	4681      	mov	r9, r0
 8022f8e:	b160      	cbz	r0, 8022faa <_dtoa_r+0xd2>
 8022f90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8022f92:	2301      	movs	r3, #1
 8022f94:	6013      	str	r3, [r2, #0]
 8022f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8022f98:	2b00      	cmp	r3, #0
 8022f9a:	f000 8553 	beq.w	8023a44 <_dtoa_r+0xb6c>
 8022f9e:	4b93      	ldr	r3, [pc, #588]	; (80231ec <_dtoa_r+0x314>)
 8022fa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022fa2:	6013      	str	r3, [r2, #0]
 8022fa4:	3b01      	subs	r3, #1
 8022fa6:	9302      	str	r3, [sp, #8]
 8022fa8:	e7e0      	b.n	8022f6c <_dtoa_r+0x94>
 8022faa:	aa14      	add	r2, sp, #80	; 0x50
 8022fac:	a915      	add	r1, sp, #84	; 0x54
 8022fae:	ec47 6b10 	vmov	d0, r6, r7
 8022fb2:	4620      	mov	r0, r4
 8022fb4:	f001 fa0f 	bl	80243d6 <__d2b>
 8022fb8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8022fbc:	4682      	mov	sl, r0
 8022fbe:	2d00      	cmp	r5, #0
 8022fc0:	d07e      	beq.n	80230c0 <_dtoa_r+0x1e8>
 8022fc2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022fc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8022fca:	4630      	mov	r0, r6
 8022fcc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8022fd0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8022fd4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8022fd8:	2200      	movs	r2, #0
 8022fda:	4b85      	ldr	r3, [pc, #532]	; (80231f0 <_dtoa_r+0x318>)
 8022fdc:	f7dd f96c 	bl	80002b8 <__aeabi_dsub>
 8022fe0:	a379      	add	r3, pc, #484	; (adr r3, 80231c8 <_dtoa_r+0x2f0>)
 8022fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fe6:	f7dd fb1b 	bl	8000620 <__aeabi_dmul>
 8022fea:	a379      	add	r3, pc, #484	; (adr r3, 80231d0 <_dtoa_r+0x2f8>)
 8022fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ff0:	f7dd f964 	bl	80002bc <__adddf3>
 8022ff4:	4606      	mov	r6, r0
 8022ff6:	4628      	mov	r0, r5
 8022ff8:	460f      	mov	r7, r1
 8022ffa:	f7dd faab 	bl	8000554 <__aeabi_i2d>
 8022ffe:	a376      	add	r3, pc, #472	; (adr r3, 80231d8 <_dtoa_r+0x300>)
 8023000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023004:	f7dd fb0c 	bl	8000620 <__aeabi_dmul>
 8023008:	4602      	mov	r2, r0
 802300a:	460b      	mov	r3, r1
 802300c:	4630      	mov	r0, r6
 802300e:	4639      	mov	r1, r7
 8023010:	f7dd f954 	bl	80002bc <__adddf3>
 8023014:	4606      	mov	r6, r0
 8023016:	460f      	mov	r7, r1
 8023018:	f7dd fdb2 	bl	8000b80 <__aeabi_d2iz>
 802301c:	2200      	movs	r2, #0
 802301e:	4683      	mov	fp, r0
 8023020:	2300      	movs	r3, #0
 8023022:	4630      	mov	r0, r6
 8023024:	4639      	mov	r1, r7
 8023026:	f7dd fd6d 	bl	8000b04 <__aeabi_dcmplt>
 802302a:	b158      	cbz	r0, 8023044 <_dtoa_r+0x16c>
 802302c:	4658      	mov	r0, fp
 802302e:	f7dd fa91 	bl	8000554 <__aeabi_i2d>
 8023032:	4602      	mov	r2, r0
 8023034:	460b      	mov	r3, r1
 8023036:	4630      	mov	r0, r6
 8023038:	4639      	mov	r1, r7
 802303a:	f7dd fd59 	bl	8000af0 <__aeabi_dcmpeq>
 802303e:	b908      	cbnz	r0, 8023044 <_dtoa_r+0x16c>
 8023040:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023044:	f1bb 0f16 	cmp.w	fp, #22
 8023048:	d859      	bhi.n	80230fe <_dtoa_r+0x226>
 802304a:	496a      	ldr	r1, [pc, #424]	; (80231f4 <_dtoa_r+0x31c>)
 802304c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8023050:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023058:	f7dd fd72 	bl	8000b40 <__aeabi_dcmpgt>
 802305c:	2800      	cmp	r0, #0
 802305e:	d050      	beq.n	8023102 <_dtoa_r+0x22a>
 8023060:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023064:	2300      	movs	r3, #0
 8023066:	930e      	str	r3, [sp, #56]	; 0x38
 8023068:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802306a:	1b5d      	subs	r5, r3, r5
 802306c:	1e6b      	subs	r3, r5, #1
 802306e:	9306      	str	r3, [sp, #24]
 8023070:	bf45      	ittet	mi
 8023072:	f1c5 0301 	rsbmi	r3, r5, #1
 8023076:	9305      	strmi	r3, [sp, #20]
 8023078:	2300      	movpl	r3, #0
 802307a:	2300      	movmi	r3, #0
 802307c:	bf4c      	ite	mi
 802307e:	9306      	strmi	r3, [sp, #24]
 8023080:	9305      	strpl	r3, [sp, #20]
 8023082:	f1bb 0f00 	cmp.w	fp, #0
 8023086:	db3e      	blt.n	8023106 <_dtoa_r+0x22e>
 8023088:	9b06      	ldr	r3, [sp, #24]
 802308a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 802308e:	445b      	add	r3, fp
 8023090:	9306      	str	r3, [sp, #24]
 8023092:	2300      	movs	r3, #0
 8023094:	9308      	str	r3, [sp, #32]
 8023096:	9b07      	ldr	r3, [sp, #28]
 8023098:	2b09      	cmp	r3, #9
 802309a:	f200 80af 	bhi.w	80231fc <_dtoa_r+0x324>
 802309e:	2b05      	cmp	r3, #5
 80230a0:	bfc4      	itt	gt
 80230a2:	3b04      	subgt	r3, #4
 80230a4:	9307      	strgt	r3, [sp, #28]
 80230a6:	9b07      	ldr	r3, [sp, #28]
 80230a8:	f1a3 0302 	sub.w	r3, r3, #2
 80230ac:	bfcc      	ite	gt
 80230ae:	2600      	movgt	r6, #0
 80230b0:	2601      	movle	r6, #1
 80230b2:	2b03      	cmp	r3, #3
 80230b4:	f200 80ae 	bhi.w	8023214 <_dtoa_r+0x33c>
 80230b8:	e8df f003 	tbb	[pc, r3]
 80230bc:	772f8482 	.word	0x772f8482
 80230c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80230c2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80230c4:	441d      	add	r5, r3
 80230c6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80230ca:	2b20      	cmp	r3, #32
 80230cc:	dd11      	ble.n	80230f2 <_dtoa_r+0x21a>
 80230ce:	9a00      	ldr	r2, [sp, #0]
 80230d0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80230d4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80230d8:	fa22 f000 	lsr.w	r0, r2, r0
 80230dc:	fa08 f303 	lsl.w	r3, r8, r3
 80230e0:	4318      	orrs	r0, r3
 80230e2:	f7dd fa27 	bl	8000534 <__aeabi_ui2d>
 80230e6:	2301      	movs	r3, #1
 80230e8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80230ec:	3d01      	subs	r5, #1
 80230ee:	9312      	str	r3, [sp, #72]	; 0x48
 80230f0:	e772      	b.n	8022fd8 <_dtoa_r+0x100>
 80230f2:	f1c3 0020 	rsb	r0, r3, #32
 80230f6:	9b00      	ldr	r3, [sp, #0]
 80230f8:	fa03 f000 	lsl.w	r0, r3, r0
 80230fc:	e7f1      	b.n	80230e2 <_dtoa_r+0x20a>
 80230fe:	2301      	movs	r3, #1
 8023100:	e7b1      	b.n	8023066 <_dtoa_r+0x18e>
 8023102:	900e      	str	r0, [sp, #56]	; 0x38
 8023104:	e7b0      	b.n	8023068 <_dtoa_r+0x190>
 8023106:	9b05      	ldr	r3, [sp, #20]
 8023108:	eba3 030b 	sub.w	r3, r3, fp
 802310c:	9305      	str	r3, [sp, #20]
 802310e:	f1cb 0300 	rsb	r3, fp, #0
 8023112:	9308      	str	r3, [sp, #32]
 8023114:	2300      	movs	r3, #0
 8023116:	930b      	str	r3, [sp, #44]	; 0x2c
 8023118:	e7bd      	b.n	8023096 <_dtoa_r+0x1be>
 802311a:	2301      	movs	r3, #1
 802311c:	9309      	str	r3, [sp, #36]	; 0x24
 802311e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023120:	2b00      	cmp	r3, #0
 8023122:	dd7a      	ble.n	802321a <_dtoa_r+0x342>
 8023124:	9304      	str	r3, [sp, #16]
 8023126:	9303      	str	r3, [sp, #12]
 8023128:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802312a:	2200      	movs	r2, #0
 802312c:	606a      	str	r2, [r5, #4]
 802312e:	2104      	movs	r1, #4
 8023130:	f101 0214 	add.w	r2, r1, #20
 8023134:	429a      	cmp	r2, r3
 8023136:	d975      	bls.n	8023224 <_dtoa_r+0x34c>
 8023138:	6869      	ldr	r1, [r5, #4]
 802313a:	4620      	mov	r0, r4
 802313c:	f000 feca 	bl	8023ed4 <_Balloc>
 8023140:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023142:	6028      	str	r0, [r5, #0]
 8023144:	681b      	ldr	r3, [r3, #0]
 8023146:	9302      	str	r3, [sp, #8]
 8023148:	9b03      	ldr	r3, [sp, #12]
 802314a:	2b0e      	cmp	r3, #14
 802314c:	f200 80e5 	bhi.w	802331a <_dtoa_r+0x442>
 8023150:	2e00      	cmp	r6, #0
 8023152:	f000 80e2 	beq.w	802331a <_dtoa_r+0x442>
 8023156:	ed9d 7b00 	vldr	d7, [sp]
 802315a:	f1bb 0f00 	cmp.w	fp, #0
 802315e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8023162:	dd74      	ble.n	802324e <_dtoa_r+0x376>
 8023164:	4a23      	ldr	r2, [pc, #140]	; (80231f4 <_dtoa_r+0x31c>)
 8023166:	f00b 030f 	and.w	r3, fp, #15
 802316a:	ea4f 162b 	mov.w	r6, fp, asr #4
 802316e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8023172:	06f0      	lsls	r0, r6, #27
 8023174:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023178:	d559      	bpl.n	802322e <_dtoa_r+0x356>
 802317a:	4b1f      	ldr	r3, [pc, #124]	; (80231f8 <_dtoa_r+0x320>)
 802317c:	ec51 0b17 	vmov	r0, r1, d7
 8023180:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8023184:	f7dd fb76 	bl	8000874 <__aeabi_ddiv>
 8023188:	e9cd 0100 	strd	r0, r1, [sp]
 802318c:	f006 060f 	and.w	r6, r6, #15
 8023190:	2503      	movs	r5, #3
 8023192:	4f19      	ldr	r7, [pc, #100]	; (80231f8 <_dtoa_r+0x320>)
 8023194:	2e00      	cmp	r6, #0
 8023196:	d14c      	bne.n	8023232 <_dtoa_r+0x35a>
 8023198:	4642      	mov	r2, r8
 802319a:	464b      	mov	r3, r9
 802319c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80231a0:	f7dd fb68 	bl	8000874 <__aeabi_ddiv>
 80231a4:	e9cd 0100 	strd	r0, r1, [sp]
 80231a8:	e06a      	b.n	8023280 <_dtoa_r+0x3a8>
 80231aa:	2301      	movs	r3, #1
 80231ac:	9309      	str	r3, [sp, #36]	; 0x24
 80231ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80231b0:	445b      	add	r3, fp
 80231b2:	9304      	str	r3, [sp, #16]
 80231b4:	3301      	adds	r3, #1
 80231b6:	2b01      	cmp	r3, #1
 80231b8:	9303      	str	r3, [sp, #12]
 80231ba:	bfb8      	it	lt
 80231bc:	2301      	movlt	r3, #1
 80231be:	e7b3      	b.n	8023128 <_dtoa_r+0x250>
 80231c0:	2300      	movs	r3, #0
 80231c2:	e7ab      	b.n	802311c <_dtoa_r+0x244>
 80231c4:	2300      	movs	r3, #0
 80231c6:	e7f1      	b.n	80231ac <_dtoa_r+0x2d4>
 80231c8:	636f4361 	.word	0x636f4361
 80231cc:	3fd287a7 	.word	0x3fd287a7
 80231d0:	8b60c8b3 	.word	0x8b60c8b3
 80231d4:	3fc68a28 	.word	0x3fc68a28
 80231d8:	509f79fb 	.word	0x509f79fb
 80231dc:	3fd34413 	.word	0x3fd34413
 80231e0:	7ff00000 	.word	0x7ff00000
 80231e4:	080339ab 	.word	0x080339ab
 80231e8:	080339a2 	.word	0x080339a2
 80231ec:	08033816 	.word	0x08033816
 80231f0:	3ff80000 	.word	0x3ff80000
 80231f4:	080339d8 	.word	0x080339d8
 80231f8:	080339b0 	.word	0x080339b0
 80231fc:	2601      	movs	r6, #1
 80231fe:	2300      	movs	r3, #0
 8023200:	9307      	str	r3, [sp, #28]
 8023202:	9609      	str	r6, [sp, #36]	; 0x24
 8023204:	f04f 33ff 	mov.w	r3, #4294967295
 8023208:	9304      	str	r3, [sp, #16]
 802320a:	9303      	str	r3, [sp, #12]
 802320c:	2200      	movs	r2, #0
 802320e:	2312      	movs	r3, #18
 8023210:	920a      	str	r2, [sp, #40]	; 0x28
 8023212:	e789      	b.n	8023128 <_dtoa_r+0x250>
 8023214:	2301      	movs	r3, #1
 8023216:	9309      	str	r3, [sp, #36]	; 0x24
 8023218:	e7f4      	b.n	8023204 <_dtoa_r+0x32c>
 802321a:	2301      	movs	r3, #1
 802321c:	9304      	str	r3, [sp, #16]
 802321e:	9303      	str	r3, [sp, #12]
 8023220:	461a      	mov	r2, r3
 8023222:	e7f5      	b.n	8023210 <_dtoa_r+0x338>
 8023224:	686a      	ldr	r2, [r5, #4]
 8023226:	3201      	adds	r2, #1
 8023228:	606a      	str	r2, [r5, #4]
 802322a:	0049      	lsls	r1, r1, #1
 802322c:	e780      	b.n	8023130 <_dtoa_r+0x258>
 802322e:	2502      	movs	r5, #2
 8023230:	e7af      	b.n	8023192 <_dtoa_r+0x2ba>
 8023232:	07f1      	lsls	r1, r6, #31
 8023234:	d508      	bpl.n	8023248 <_dtoa_r+0x370>
 8023236:	4640      	mov	r0, r8
 8023238:	4649      	mov	r1, r9
 802323a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802323e:	f7dd f9ef 	bl	8000620 <__aeabi_dmul>
 8023242:	3501      	adds	r5, #1
 8023244:	4680      	mov	r8, r0
 8023246:	4689      	mov	r9, r1
 8023248:	1076      	asrs	r6, r6, #1
 802324a:	3708      	adds	r7, #8
 802324c:	e7a2      	b.n	8023194 <_dtoa_r+0x2bc>
 802324e:	f000 809d 	beq.w	802338c <_dtoa_r+0x4b4>
 8023252:	f1cb 0600 	rsb	r6, fp, #0
 8023256:	4b9f      	ldr	r3, [pc, #636]	; (80234d4 <_dtoa_r+0x5fc>)
 8023258:	4f9f      	ldr	r7, [pc, #636]	; (80234d8 <_dtoa_r+0x600>)
 802325a:	f006 020f 	and.w	r2, r6, #15
 802325e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8023262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023266:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802326a:	f7dd f9d9 	bl	8000620 <__aeabi_dmul>
 802326e:	e9cd 0100 	strd	r0, r1, [sp]
 8023272:	1136      	asrs	r6, r6, #4
 8023274:	2300      	movs	r3, #0
 8023276:	2502      	movs	r5, #2
 8023278:	2e00      	cmp	r6, #0
 802327a:	d17c      	bne.n	8023376 <_dtoa_r+0x49e>
 802327c:	2b00      	cmp	r3, #0
 802327e:	d191      	bne.n	80231a4 <_dtoa_r+0x2cc>
 8023280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023282:	2b00      	cmp	r3, #0
 8023284:	f000 8084 	beq.w	8023390 <_dtoa_r+0x4b8>
 8023288:	e9dd 8900 	ldrd	r8, r9, [sp]
 802328c:	2200      	movs	r2, #0
 802328e:	4b93      	ldr	r3, [pc, #588]	; (80234dc <_dtoa_r+0x604>)
 8023290:	4640      	mov	r0, r8
 8023292:	4649      	mov	r1, r9
 8023294:	f7dd fc36 	bl	8000b04 <__aeabi_dcmplt>
 8023298:	2800      	cmp	r0, #0
 802329a:	d079      	beq.n	8023390 <_dtoa_r+0x4b8>
 802329c:	9b03      	ldr	r3, [sp, #12]
 802329e:	2b00      	cmp	r3, #0
 80232a0:	d076      	beq.n	8023390 <_dtoa_r+0x4b8>
 80232a2:	9b04      	ldr	r3, [sp, #16]
 80232a4:	2b00      	cmp	r3, #0
 80232a6:	dd34      	ble.n	8023312 <_dtoa_r+0x43a>
 80232a8:	2200      	movs	r2, #0
 80232aa:	4b8d      	ldr	r3, [pc, #564]	; (80234e0 <_dtoa_r+0x608>)
 80232ac:	4640      	mov	r0, r8
 80232ae:	4649      	mov	r1, r9
 80232b0:	f7dd f9b6 	bl	8000620 <__aeabi_dmul>
 80232b4:	e9cd 0100 	strd	r0, r1, [sp]
 80232b8:	9e04      	ldr	r6, [sp, #16]
 80232ba:	f10b 37ff 	add.w	r7, fp, #4294967295
 80232be:	3501      	adds	r5, #1
 80232c0:	4628      	mov	r0, r5
 80232c2:	f7dd f947 	bl	8000554 <__aeabi_i2d>
 80232c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80232ca:	f7dd f9a9 	bl	8000620 <__aeabi_dmul>
 80232ce:	2200      	movs	r2, #0
 80232d0:	4b84      	ldr	r3, [pc, #528]	; (80234e4 <_dtoa_r+0x60c>)
 80232d2:	f7dc fff3 	bl	80002bc <__adddf3>
 80232d6:	4680      	mov	r8, r0
 80232d8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80232dc:	2e00      	cmp	r6, #0
 80232de:	d15a      	bne.n	8023396 <_dtoa_r+0x4be>
 80232e0:	2200      	movs	r2, #0
 80232e2:	4b81      	ldr	r3, [pc, #516]	; (80234e8 <_dtoa_r+0x610>)
 80232e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80232e8:	f7dc ffe6 	bl	80002b8 <__aeabi_dsub>
 80232ec:	4642      	mov	r2, r8
 80232ee:	464b      	mov	r3, r9
 80232f0:	e9cd 0100 	strd	r0, r1, [sp]
 80232f4:	f7dd fc24 	bl	8000b40 <__aeabi_dcmpgt>
 80232f8:	2800      	cmp	r0, #0
 80232fa:	f040 829b 	bne.w	8023834 <_dtoa_r+0x95c>
 80232fe:	4642      	mov	r2, r8
 8023300:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8023304:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023308:	f7dd fbfc 	bl	8000b04 <__aeabi_dcmplt>
 802330c:	2800      	cmp	r0, #0
 802330e:	f040 828f 	bne.w	8023830 <_dtoa_r+0x958>
 8023312:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8023316:	e9cd 2300 	strd	r2, r3, [sp]
 802331a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802331c:	2b00      	cmp	r3, #0
 802331e:	f2c0 8150 	blt.w	80235c2 <_dtoa_r+0x6ea>
 8023322:	f1bb 0f0e 	cmp.w	fp, #14
 8023326:	f300 814c 	bgt.w	80235c2 <_dtoa_r+0x6ea>
 802332a:	4b6a      	ldr	r3, [pc, #424]	; (80234d4 <_dtoa_r+0x5fc>)
 802332c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8023330:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023336:	2b00      	cmp	r3, #0
 8023338:	f280 80da 	bge.w	80234f0 <_dtoa_r+0x618>
 802333c:	9b03      	ldr	r3, [sp, #12]
 802333e:	2b00      	cmp	r3, #0
 8023340:	f300 80d6 	bgt.w	80234f0 <_dtoa_r+0x618>
 8023344:	f040 8273 	bne.w	802382e <_dtoa_r+0x956>
 8023348:	2200      	movs	r2, #0
 802334a:	4b67      	ldr	r3, [pc, #412]	; (80234e8 <_dtoa_r+0x610>)
 802334c:	4640      	mov	r0, r8
 802334e:	4649      	mov	r1, r9
 8023350:	f7dd f966 	bl	8000620 <__aeabi_dmul>
 8023354:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023358:	f7dd fbe8 	bl	8000b2c <__aeabi_dcmpge>
 802335c:	9e03      	ldr	r6, [sp, #12]
 802335e:	4637      	mov	r7, r6
 8023360:	2800      	cmp	r0, #0
 8023362:	f040 824a 	bne.w	80237fa <_dtoa_r+0x922>
 8023366:	9b02      	ldr	r3, [sp, #8]
 8023368:	9a02      	ldr	r2, [sp, #8]
 802336a:	1c5d      	adds	r5, r3, #1
 802336c:	2331      	movs	r3, #49	; 0x31
 802336e:	7013      	strb	r3, [r2, #0]
 8023370:	f10b 0b01 	add.w	fp, fp, #1
 8023374:	e245      	b.n	8023802 <_dtoa_r+0x92a>
 8023376:	07f2      	lsls	r2, r6, #31
 8023378:	d505      	bpl.n	8023386 <_dtoa_r+0x4ae>
 802337a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802337e:	f7dd f94f 	bl	8000620 <__aeabi_dmul>
 8023382:	3501      	adds	r5, #1
 8023384:	2301      	movs	r3, #1
 8023386:	1076      	asrs	r6, r6, #1
 8023388:	3708      	adds	r7, #8
 802338a:	e775      	b.n	8023278 <_dtoa_r+0x3a0>
 802338c:	2502      	movs	r5, #2
 802338e:	e777      	b.n	8023280 <_dtoa_r+0x3a8>
 8023390:	465f      	mov	r7, fp
 8023392:	9e03      	ldr	r6, [sp, #12]
 8023394:	e794      	b.n	80232c0 <_dtoa_r+0x3e8>
 8023396:	9a02      	ldr	r2, [sp, #8]
 8023398:	4b4e      	ldr	r3, [pc, #312]	; (80234d4 <_dtoa_r+0x5fc>)
 802339a:	4432      	add	r2, r6
 802339c:	9213      	str	r2, [sp, #76]	; 0x4c
 802339e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80233a0:	1e71      	subs	r1, r6, #1
 80233a2:	2a00      	cmp	r2, #0
 80233a4:	d048      	beq.n	8023438 <_dtoa_r+0x560>
 80233a6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80233aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233ae:	2000      	movs	r0, #0
 80233b0:	494e      	ldr	r1, [pc, #312]	; (80234ec <_dtoa_r+0x614>)
 80233b2:	f7dd fa5f 	bl	8000874 <__aeabi_ddiv>
 80233b6:	4642      	mov	r2, r8
 80233b8:	464b      	mov	r3, r9
 80233ba:	f7dc ff7d 	bl	80002b8 <__aeabi_dsub>
 80233be:	9d02      	ldr	r5, [sp, #8]
 80233c0:	4680      	mov	r8, r0
 80233c2:	4689      	mov	r9, r1
 80233c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80233c8:	f7dd fbda 	bl	8000b80 <__aeabi_d2iz>
 80233cc:	4606      	mov	r6, r0
 80233ce:	f7dd f8c1 	bl	8000554 <__aeabi_i2d>
 80233d2:	4602      	mov	r2, r0
 80233d4:	460b      	mov	r3, r1
 80233d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80233da:	f7dc ff6d 	bl	80002b8 <__aeabi_dsub>
 80233de:	3630      	adds	r6, #48	; 0x30
 80233e0:	f805 6b01 	strb.w	r6, [r5], #1
 80233e4:	4642      	mov	r2, r8
 80233e6:	464b      	mov	r3, r9
 80233e8:	e9cd 0100 	strd	r0, r1, [sp]
 80233ec:	f7dd fb8a 	bl	8000b04 <__aeabi_dcmplt>
 80233f0:	2800      	cmp	r0, #0
 80233f2:	d165      	bne.n	80234c0 <_dtoa_r+0x5e8>
 80233f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80233f8:	2000      	movs	r0, #0
 80233fa:	4938      	ldr	r1, [pc, #224]	; (80234dc <_dtoa_r+0x604>)
 80233fc:	f7dc ff5c 	bl	80002b8 <__aeabi_dsub>
 8023400:	4642      	mov	r2, r8
 8023402:	464b      	mov	r3, r9
 8023404:	f7dd fb7e 	bl	8000b04 <__aeabi_dcmplt>
 8023408:	2800      	cmp	r0, #0
 802340a:	f040 80ba 	bne.w	8023582 <_dtoa_r+0x6aa>
 802340e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023410:	429d      	cmp	r5, r3
 8023412:	f43f af7e 	beq.w	8023312 <_dtoa_r+0x43a>
 8023416:	2200      	movs	r2, #0
 8023418:	4b31      	ldr	r3, [pc, #196]	; (80234e0 <_dtoa_r+0x608>)
 802341a:	4640      	mov	r0, r8
 802341c:	4649      	mov	r1, r9
 802341e:	f7dd f8ff 	bl	8000620 <__aeabi_dmul>
 8023422:	2200      	movs	r2, #0
 8023424:	4680      	mov	r8, r0
 8023426:	4689      	mov	r9, r1
 8023428:	4b2d      	ldr	r3, [pc, #180]	; (80234e0 <_dtoa_r+0x608>)
 802342a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802342e:	f7dd f8f7 	bl	8000620 <__aeabi_dmul>
 8023432:	e9cd 0100 	strd	r0, r1, [sp]
 8023436:	e7c5      	b.n	80233c4 <_dtoa_r+0x4ec>
 8023438:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 802343c:	4642      	mov	r2, r8
 802343e:	464b      	mov	r3, r9
 8023440:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023444:	f7dd f8ec 	bl	8000620 <__aeabi_dmul>
 8023448:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 802344c:	9d02      	ldr	r5, [sp, #8]
 802344e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023452:	f7dd fb95 	bl	8000b80 <__aeabi_d2iz>
 8023456:	4606      	mov	r6, r0
 8023458:	f7dd f87c 	bl	8000554 <__aeabi_i2d>
 802345c:	3630      	adds	r6, #48	; 0x30
 802345e:	4602      	mov	r2, r0
 8023460:	460b      	mov	r3, r1
 8023462:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023466:	f7dc ff27 	bl	80002b8 <__aeabi_dsub>
 802346a:	f805 6b01 	strb.w	r6, [r5], #1
 802346e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8023470:	42ab      	cmp	r3, r5
 8023472:	4680      	mov	r8, r0
 8023474:	4689      	mov	r9, r1
 8023476:	f04f 0200 	mov.w	r2, #0
 802347a:	d125      	bne.n	80234c8 <_dtoa_r+0x5f0>
 802347c:	4b1b      	ldr	r3, [pc, #108]	; (80234ec <_dtoa_r+0x614>)
 802347e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8023482:	f7dc ff1b 	bl	80002bc <__adddf3>
 8023486:	4602      	mov	r2, r0
 8023488:	460b      	mov	r3, r1
 802348a:	4640      	mov	r0, r8
 802348c:	4649      	mov	r1, r9
 802348e:	f7dd fb57 	bl	8000b40 <__aeabi_dcmpgt>
 8023492:	2800      	cmp	r0, #0
 8023494:	d175      	bne.n	8023582 <_dtoa_r+0x6aa>
 8023496:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 802349a:	2000      	movs	r0, #0
 802349c:	4913      	ldr	r1, [pc, #76]	; (80234ec <_dtoa_r+0x614>)
 802349e:	f7dc ff0b 	bl	80002b8 <__aeabi_dsub>
 80234a2:	4602      	mov	r2, r0
 80234a4:	460b      	mov	r3, r1
 80234a6:	4640      	mov	r0, r8
 80234a8:	4649      	mov	r1, r9
 80234aa:	f7dd fb2b 	bl	8000b04 <__aeabi_dcmplt>
 80234ae:	2800      	cmp	r0, #0
 80234b0:	f43f af2f 	beq.w	8023312 <_dtoa_r+0x43a>
 80234b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80234b8:	2b30      	cmp	r3, #48	; 0x30
 80234ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80234be:	d001      	beq.n	80234c4 <_dtoa_r+0x5ec>
 80234c0:	46bb      	mov	fp, r7
 80234c2:	e04d      	b.n	8023560 <_dtoa_r+0x688>
 80234c4:	4615      	mov	r5, r2
 80234c6:	e7f5      	b.n	80234b4 <_dtoa_r+0x5dc>
 80234c8:	4b05      	ldr	r3, [pc, #20]	; (80234e0 <_dtoa_r+0x608>)
 80234ca:	f7dd f8a9 	bl	8000620 <__aeabi_dmul>
 80234ce:	e9cd 0100 	strd	r0, r1, [sp]
 80234d2:	e7bc      	b.n	802344e <_dtoa_r+0x576>
 80234d4:	080339d8 	.word	0x080339d8
 80234d8:	080339b0 	.word	0x080339b0
 80234dc:	3ff00000 	.word	0x3ff00000
 80234e0:	40240000 	.word	0x40240000
 80234e4:	401c0000 	.word	0x401c0000
 80234e8:	40140000 	.word	0x40140000
 80234ec:	3fe00000 	.word	0x3fe00000
 80234f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80234f4:	9d02      	ldr	r5, [sp, #8]
 80234f6:	4642      	mov	r2, r8
 80234f8:	464b      	mov	r3, r9
 80234fa:	4630      	mov	r0, r6
 80234fc:	4639      	mov	r1, r7
 80234fe:	f7dd f9b9 	bl	8000874 <__aeabi_ddiv>
 8023502:	f7dd fb3d 	bl	8000b80 <__aeabi_d2iz>
 8023506:	9000      	str	r0, [sp, #0]
 8023508:	f7dd f824 	bl	8000554 <__aeabi_i2d>
 802350c:	4642      	mov	r2, r8
 802350e:	464b      	mov	r3, r9
 8023510:	f7dd f886 	bl	8000620 <__aeabi_dmul>
 8023514:	4602      	mov	r2, r0
 8023516:	460b      	mov	r3, r1
 8023518:	4630      	mov	r0, r6
 802351a:	4639      	mov	r1, r7
 802351c:	f7dc fecc 	bl	80002b8 <__aeabi_dsub>
 8023520:	9e00      	ldr	r6, [sp, #0]
 8023522:	9f03      	ldr	r7, [sp, #12]
 8023524:	3630      	adds	r6, #48	; 0x30
 8023526:	f805 6b01 	strb.w	r6, [r5], #1
 802352a:	9e02      	ldr	r6, [sp, #8]
 802352c:	1bae      	subs	r6, r5, r6
 802352e:	42b7      	cmp	r7, r6
 8023530:	4602      	mov	r2, r0
 8023532:	460b      	mov	r3, r1
 8023534:	d138      	bne.n	80235a8 <_dtoa_r+0x6d0>
 8023536:	f7dc fec1 	bl	80002bc <__adddf3>
 802353a:	4606      	mov	r6, r0
 802353c:	460f      	mov	r7, r1
 802353e:	4602      	mov	r2, r0
 8023540:	460b      	mov	r3, r1
 8023542:	4640      	mov	r0, r8
 8023544:	4649      	mov	r1, r9
 8023546:	f7dd fadd 	bl	8000b04 <__aeabi_dcmplt>
 802354a:	b9c8      	cbnz	r0, 8023580 <_dtoa_r+0x6a8>
 802354c:	4632      	mov	r2, r6
 802354e:	463b      	mov	r3, r7
 8023550:	4640      	mov	r0, r8
 8023552:	4649      	mov	r1, r9
 8023554:	f7dd facc 	bl	8000af0 <__aeabi_dcmpeq>
 8023558:	b110      	cbz	r0, 8023560 <_dtoa_r+0x688>
 802355a:	9b00      	ldr	r3, [sp, #0]
 802355c:	07db      	lsls	r3, r3, #31
 802355e:	d40f      	bmi.n	8023580 <_dtoa_r+0x6a8>
 8023560:	4651      	mov	r1, sl
 8023562:	4620      	mov	r0, r4
 8023564:	f000 fcea 	bl	8023f3c <_Bfree>
 8023568:	2300      	movs	r3, #0
 802356a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802356c:	702b      	strb	r3, [r5, #0]
 802356e:	f10b 0301 	add.w	r3, fp, #1
 8023572:	6013      	str	r3, [r2, #0]
 8023574:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023576:	2b00      	cmp	r3, #0
 8023578:	f43f acf8 	beq.w	8022f6c <_dtoa_r+0x94>
 802357c:	601d      	str	r5, [r3, #0]
 802357e:	e4f5      	b.n	8022f6c <_dtoa_r+0x94>
 8023580:	465f      	mov	r7, fp
 8023582:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8023586:	2a39      	cmp	r2, #57	; 0x39
 8023588:	f105 33ff 	add.w	r3, r5, #4294967295
 802358c:	d106      	bne.n	802359c <_dtoa_r+0x6c4>
 802358e:	9a02      	ldr	r2, [sp, #8]
 8023590:	429a      	cmp	r2, r3
 8023592:	d107      	bne.n	80235a4 <_dtoa_r+0x6cc>
 8023594:	2330      	movs	r3, #48	; 0x30
 8023596:	7013      	strb	r3, [r2, #0]
 8023598:	3701      	adds	r7, #1
 802359a:	4613      	mov	r3, r2
 802359c:	781a      	ldrb	r2, [r3, #0]
 802359e:	3201      	adds	r2, #1
 80235a0:	701a      	strb	r2, [r3, #0]
 80235a2:	e78d      	b.n	80234c0 <_dtoa_r+0x5e8>
 80235a4:	461d      	mov	r5, r3
 80235a6:	e7ec      	b.n	8023582 <_dtoa_r+0x6aa>
 80235a8:	2200      	movs	r2, #0
 80235aa:	4ba4      	ldr	r3, [pc, #656]	; (802383c <_dtoa_r+0x964>)
 80235ac:	f7dd f838 	bl	8000620 <__aeabi_dmul>
 80235b0:	2200      	movs	r2, #0
 80235b2:	2300      	movs	r3, #0
 80235b4:	4606      	mov	r6, r0
 80235b6:	460f      	mov	r7, r1
 80235b8:	f7dd fa9a 	bl	8000af0 <__aeabi_dcmpeq>
 80235bc:	2800      	cmp	r0, #0
 80235be:	d09a      	beq.n	80234f6 <_dtoa_r+0x61e>
 80235c0:	e7ce      	b.n	8023560 <_dtoa_r+0x688>
 80235c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80235c4:	2a00      	cmp	r2, #0
 80235c6:	f000 80cd 	beq.w	8023764 <_dtoa_r+0x88c>
 80235ca:	9a07      	ldr	r2, [sp, #28]
 80235cc:	2a01      	cmp	r2, #1
 80235ce:	f300 80af 	bgt.w	8023730 <_dtoa_r+0x858>
 80235d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80235d4:	2a00      	cmp	r2, #0
 80235d6:	f000 80a7 	beq.w	8023728 <_dtoa_r+0x850>
 80235da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80235de:	9e08      	ldr	r6, [sp, #32]
 80235e0:	9d05      	ldr	r5, [sp, #20]
 80235e2:	9a05      	ldr	r2, [sp, #20]
 80235e4:	441a      	add	r2, r3
 80235e6:	9205      	str	r2, [sp, #20]
 80235e8:	9a06      	ldr	r2, [sp, #24]
 80235ea:	2101      	movs	r1, #1
 80235ec:	441a      	add	r2, r3
 80235ee:	4620      	mov	r0, r4
 80235f0:	9206      	str	r2, [sp, #24]
 80235f2:	f000 fd43 	bl	802407c <__i2b>
 80235f6:	4607      	mov	r7, r0
 80235f8:	2d00      	cmp	r5, #0
 80235fa:	dd0c      	ble.n	8023616 <_dtoa_r+0x73e>
 80235fc:	9b06      	ldr	r3, [sp, #24]
 80235fe:	2b00      	cmp	r3, #0
 8023600:	dd09      	ble.n	8023616 <_dtoa_r+0x73e>
 8023602:	42ab      	cmp	r3, r5
 8023604:	9a05      	ldr	r2, [sp, #20]
 8023606:	bfa8      	it	ge
 8023608:	462b      	movge	r3, r5
 802360a:	1ad2      	subs	r2, r2, r3
 802360c:	9205      	str	r2, [sp, #20]
 802360e:	9a06      	ldr	r2, [sp, #24]
 8023610:	1aed      	subs	r5, r5, r3
 8023612:	1ad3      	subs	r3, r2, r3
 8023614:	9306      	str	r3, [sp, #24]
 8023616:	9b08      	ldr	r3, [sp, #32]
 8023618:	b1f3      	cbz	r3, 8023658 <_dtoa_r+0x780>
 802361a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802361c:	2b00      	cmp	r3, #0
 802361e:	f000 80a5 	beq.w	802376c <_dtoa_r+0x894>
 8023622:	2e00      	cmp	r6, #0
 8023624:	dd10      	ble.n	8023648 <_dtoa_r+0x770>
 8023626:	4639      	mov	r1, r7
 8023628:	4632      	mov	r2, r6
 802362a:	4620      	mov	r0, r4
 802362c:	f000 fdbc 	bl	80241a8 <__pow5mult>
 8023630:	4652      	mov	r2, sl
 8023632:	4601      	mov	r1, r0
 8023634:	4607      	mov	r7, r0
 8023636:	4620      	mov	r0, r4
 8023638:	f000 fd29 	bl	802408e <__multiply>
 802363c:	4651      	mov	r1, sl
 802363e:	4680      	mov	r8, r0
 8023640:	4620      	mov	r0, r4
 8023642:	f000 fc7b 	bl	8023f3c <_Bfree>
 8023646:	46c2      	mov	sl, r8
 8023648:	9b08      	ldr	r3, [sp, #32]
 802364a:	1b9a      	subs	r2, r3, r6
 802364c:	d004      	beq.n	8023658 <_dtoa_r+0x780>
 802364e:	4651      	mov	r1, sl
 8023650:	4620      	mov	r0, r4
 8023652:	f000 fda9 	bl	80241a8 <__pow5mult>
 8023656:	4682      	mov	sl, r0
 8023658:	2101      	movs	r1, #1
 802365a:	4620      	mov	r0, r4
 802365c:	f000 fd0e 	bl	802407c <__i2b>
 8023660:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023662:	2b00      	cmp	r3, #0
 8023664:	4606      	mov	r6, r0
 8023666:	f340 8083 	ble.w	8023770 <_dtoa_r+0x898>
 802366a:	461a      	mov	r2, r3
 802366c:	4601      	mov	r1, r0
 802366e:	4620      	mov	r0, r4
 8023670:	f000 fd9a 	bl	80241a8 <__pow5mult>
 8023674:	9b07      	ldr	r3, [sp, #28]
 8023676:	2b01      	cmp	r3, #1
 8023678:	4606      	mov	r6, r0
 802367a:	dd7c      	ble.n	8023776 <_dtoa_r+0x89e>
 802367c:	f04f 0800 	mov.w	r8, #0
 8023680:	6933      	ldr	r3, [r6, #16]
 8023682:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8023686:	6918      	ldr	r0, [r3, #16]
 8023688:	f000 fcaa 	bl	8023fe0 <__hi0bits>
 802368c:	f1c0 0020 	rsb	r0, r0, #32
 8023690:	9b06      	ldr	r3, [sp, #24]
 8023692:	4418      	add	r0, r3
 8023694:	f010 001f 	ands.w	r0, r0, #31
 8023698:	f000 8096 	beq.w	80237c8 <_dtoa_r+0x8f0>
 802369c:	f1c0 0320 	rsb	r3, r0, #32
 80236a0:	2b04      	cmp	r3, #4
 80236a2:	f340 8087 	ble.w	80237b4 <_dtoa_r+0x8dc>
 80236a6:	9b05      	ldr	r3, [sp, #20]
 80236a8:	f1c0 001c 	rsb	r0, r0, #28
 80236ac:	4403      	add	r3, r0
 80236ae:	9305      	str	r3, [sp, #20]
 80236b0:	9b06      	ldr	r3, [sp, #24]
 80236b2:	4405      	add	r5, r0
 80236b4:	4403      	add	r3, r0
 80236b6:	9306      	str	r3, [sp, #24]
 80236b8:	9b05      	ldr	r3, [sp, #20]
 80236ba:	2b00      	cmp	r3, #0
 80236bc:	dd05      	ble.n	80236ca <_dtoa_r+0x7f2>
 80236be:	4651      	mov	r1, sl
 80236c0:	461a      	mov	r2, r3
 80236c2:	4620      	mov	r0, r4
 80236c4:	f000 fdbe 	bl	8024244 <__lshift>
 80236c8:	4682      	mov	sl, r0
 80236ca:	9b06      	ldr	r3, [sp, #24]
 80236cc:	2b00      	cmp	r3, #0
 80236ce:	dd05      	ble.n	80236dc <_dtoa_r+0x804>
 80236d0:	4631      	mov	r1, r6
 80236d2:	461a      	mov	r2, r3
 80236d4:	4620      	mov	r0, r4
 80236d6:	f000 fdb5 	bl	8024244 <__lshift>
 80236da:	4606      	mov	r6, r0
 80236dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80236de:	2b00      	cmp	r3, #0
 80236e0:	d074      	beq.n	80237cc <_dtoa_r+0x8f4>
 80236e2:	4631      	mov	r1, r6
 80236e4:	4650      	mov	r0, sl
 80236e6:	f000 fdfe 	bl	80242e6 <__mcmp>
 80236ea:	2800      	cmp	r0, #0
 80236ec:	da6e      	bge.n	80237cc <_dtoa_r+0x8f4>
 80236ee:	2300      	movs	r3, #0
 80236f0:	4651      	mov	r1, sl
 80236f2:	220a      	movs	r2, #10
 80236f4:	4620      	mov	r0, r4
 80236f6:	f000 fc38 	bl	8023f6a <__multadd>
 80236fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023700:	4682      	mov	sl, r0
 8023702:	2b00      	cmp	r3, #0
 8023704:	f000 81a8 	beq.w	8023a58 <_dtoa_r+0xb80>
 8023708:	2300      	movs	r3, #0
 802370a:	4639      	mov	r1, r7
 802370c:	220a      	movs	r2, #10
 802370e:	4620      	mov	r0, r4
 8023710:	f000 fc2b 	bl	8023f6a <__multadd>
 8023714:	9b04      	ldr	r3, [sp, #16]
 8023716:	2b00      	cmp	r3, #0
 8023718:	4607      	mov	r7, r0
 802371a:	f300 80c8 	bgt.w	80238ae <_dtoa_r+0x9d6>
 802371e:	9b07      	ldr	r3, [sp, #28]
 8023720:	2b02      	cmp	r3, #2
 8023722:	f340 80c4 	ble.w	80238ae <_dtoa_r+0x9d6>
 8023726:	e059      	b.n	80237dc <_dtoa_r+0x904>
 8023728:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802372a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802372e:	e756      	b.n	80235de <_dtoa_r+0x706>
 8023730:	9b03      	ldr	r3, [sp, #12]
 8023732:	1e5e      	subs	r6, r3, #1
 8023734:	9b08      	ldr	r3, [sp, #32]
 8023736:	42b3      	cmp	r3, r6
 8023738:	bfbf      	itttt	lt
 802373a:	9b08      	ldrlt	r3, [sp, #32]
 802373c:	9608      	strlt	r6, [sp, #32]
 802373e:	1af2      	sublt	r2, r6, r3
 8023740:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8023742:	bfb6      	itet	lt
 8023744:	189b      	addlt	r3, r3, r2
 8023746:	1b9e      	subge	r6, r3, r6
 8023748:	930b      	strlt	r3, [sp, #44]	; 0x2c
 802374a:	9b03      	ldr	r3, [sp, #12]
 802374c:	bfb8      	it	lt
 802374e:	2600      	movlt	r6, #0
 8023750:	2b00      	cmp	r3, #0
 8023752:	bfb9      	ittee	lt
 8023754:	9b05      	ldrlt	r3, [sp, #20]
 8023756:	9a03      	ldrlt	r2, [sp, #12]
 8023758:	9d05      	ldrge	r5, [sp, #20]
 802375a:	9b03      	ldrge	r3, [sp, #12]
 802375c:	bfbc      	itt	lt
 802375e:	1a9d      	sublt	r5, r3, r2
 8023760:	2300      	movlt	r3, #0
 8023762:	e73e      	b.n	80235e2 <_dtoa_r+0x70a>
 8023764:	9e08      	ldr	r6, [sp, #32]
 8023766:	9d05      	ldr	r5, [sp, #20]
 8023768:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802376a:	e745      	b.n	80235f8 <_dtoa_r+0x720>
 802376c:	9a08      	ldr	r2, [sp, #32]
 802376e:	e76e      	b.n	802364e <_dtoa_r+0x776>
 8023770:	9b07      	ldr	r3, [sp, #28]
 8023772:	2b01      	cmp	r3, #1
 8023774:	dc19      	bgt.n	80237aa <_dtoa_r+0x8d2>
 8023776:	9b00      	ldr	r3, [sp, #0]
 8023778:	b9bb      	cbnz	r3, 80237aa <_dtoa_r+0x8d2>
 802377a:	9b01      	ldr	r3, [sp, #4]
 802377c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023780:	b99b      	cbnz	r3, 80237aa <_dtoa_r+0x8d2>
 8023782:	9b01      	ldr	r3, [sp, #4]
 8023784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8023788:	0d1b      	lsrs	r3, r3, #20
 802378a:	051b      	lsls	r3, r3, #20
 802378c:	b183      	cbz	r3, 80237b0 <_dtoa_r+0x8d8>
 802378e:	9b05      	ldr	r3, [sp, #20]
 8023790:	3301      	adds	r3, #1
 8023792:	9305      	str	r3, [sp, #20]
 8023794:	9b06      	ldr	r3, [sp, #24]
 8023796:	3301      	adds	r3, #1
 8023798:	9306      	str	r3, [sp, #24]
 802379a:	f04f 0801 	mov.w	r8, #1
 802379e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80237a0:	2b00      	cmp	r3, #0
 80237a2:	f47f af6d 	bne.w	8023680 <_dtoa_r+0x7a8>
 80237a6:	2001      	movs	r0, #1
 80237a8:	e772      	b.n	8023690 <_dtoa_r+0x7b8>
 80237aa:	f04f 0800 	mov.w	r8, #0
 80237ae:	e7f6      	b.n	802379e <_dtoa_r+0x8c6>
 80237b0:	4698      	mov	r8, r3
 80237b2:	e7f4      	b.n	802379e <_dtoa_r+0x8c6>
 80237b4:	d080      	beq.n	80236b8 <_dtoa_r+0x7e0>
 80237b6:	9a05      	ldr	r2, [sp, #20]
 80237b8:	331c      	adds	r3, #28
 80237ba:	441a      	add	r2, r3
 80237bc:	9205      	str	r2, [sp, #20]
 80237be:	9a06      	ldr	r2, [sp, #24]
 80237c0:	441a      	add	r2, r3
 80237c2:	441d      	add	r5, r3
 80237c4:	4613      	mov	r3, r2
 80237c6:	e776      	b.n	80236b6 <_dtoa_r+0x7de>
 80237c8:	4603      	mov	r3, r0
 80237ca:	e7f4      	b.n	80237b6 <_dtoa_r+0x8de>
 80237cc:	9b03      	ldr	r3, [sp, #12]
 80237ce:	2b00      	cmp	r3, #0
 80237d0:	dc36      	bgt.n	8023840 <_dtoa_r+0x968>
 80237d2:	9b07      	ldr	r3, [sp, #28]
 80237d4:	2b02      	cmp	r3, #2
 80237d6:	dd33      	ble.n	8023840 <_dtoa_r+0x968>
 80237d8:	9b03      	ldr	r3, [sp, #12]
 80237da:	9304      	str	r3, [sp, #16]
 80237dc:	9b04      	ldr	r3, [sp, #16]
 80237de:	b963      	cbnz	r3, 80237fa <_dtoa_r+0x922>
 80237e0:	4631      	mov	r1, r6
 80237e2:	2205      	movs	r2, #5
 80237e4:	4620      	mov	r0, r4
 80237e6:	f000 fbc0 	bl	8023f6a <__multadd>
 80237ea:	4601      	mov	r1, r0
 80237ec:	4606      	mov	r6, r0
 80237ee:	4650      	mov	r0, sl
 80237f0:	f000 fd79 	bl	80242e6 <__mcmp>
 80237f4:	2800      	cmp	r0, #0
 80237f6:	f73f adb6 	bgt.w	8023366 <_dtoa_r+0x48e>
 80237fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80237fc:	9d02      	ldr	r5, [sp, #8]
 80237fe:	ea6f 0b03 	mvn.w	fp, r3
 8023802:	2300      	movs	r3, #0
 8023804:	9303      	str	r3, [sp, #12]
 8023806:	4631      	mov	r1, r6
 8023808:	4620      	mov	r0, r4
 802380a:	f000 fb97 	bl	8023f3c <_Bfree>
 802380e:	2f00      	cmp	r7, #0
 8023810:	f43f aea6 	beq.w	8023560 <_dtoa_r+0x688>
 8023814:	9b03      	ldr	r3, [sp, #12]
 8023816:	b12b      	cbz	r3, 8023824 <_dtoa_r+0x94c>
 8023818:	42bb      	cmp	r3, r7
 802381a:	d003      	beq.n	8023824 <_dtoa_r+0x94c>
 802381c:	4619      	mov	r1, r3
 802381e:	4620      	mov	r0, r4
 8023820:	f000 fb8c 	bl	8023f3c <_Bfree>
 8023824:	4639      	mov	r1, r7
 8023826:	4620      	mov	r0, r4
 8023828:	f000 fb88 	bl	8023f3c <_Bfree>
 802382c:	e698      	b.n	8023560 <_dtoa_r+0x688>
 802382e:	2600      	movs	r6, #0
 8023830:	4637      	mov	r7, r6
 8023832:	e7e2      	b.n	80237fa <_dtoa_r+0x922>
 8023834:	46bb      	mov	fp, r7
 8023836:	4637      	mov	r7, r6
 8023838:	e595      	b.n	8023366 <_dtoa_r+0x48e>
 802383a:	bf00      	nop
 802383c:	40240000 	.word	0x40240000
 8023840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023842:	bb93      	cbnz	r3, 80238aa <_dtoa_r+0x9d2>
 8023844:	9b03      	ldr	r3, [sp, #12]
 8023846:	9304      	str	r3, [sp, #16]
 8023848:	9d02      	ldr	r5, [sp, #8]
 802384a:	4631      	mov	r1, r6
 802384c:	4650      	mov	r0, sl
 802384e:	f7ff fab7 	bl	8022dc0 <quorem>
 8023852:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8023856:	f805 9b01 	strb.w	r9, [r5], #1
 802385a:	9b02      	ldr	r3, [sp, #8]
 802385c:	9a04      	ldr	r2, [sp, #16]
 802385e:	1aeb      	subs	r3, r5, r3
 8023860:	429a      	cmp	r2, r3
 8023862:	f300 80dc 	bgt.w	8023a1e <_dtoa_r+0xb46>
 8023866:	9b02      	ldr	r3, [sp, #8]
 8023868:	2a01      	cmp	r2, #1
 802386a:	bfac      	ite	ge
 802386c:	189b      	addge	r3, r3, r2
 802386e:	3301      	addlt	r3, #1
 8023870:	4698      	mov	r8, r3
 8023872:	2300      	movs	r3, #0
 8023874:	9303      	str	r3, [sp, #12]
 8023876:	4651      	mov	r1, sl
 8023878:	2201      	movs	r2, #1
 802387a:	4620      	mov	r0, r4
 802387c:	f000 fce2 	bl	8024244 <__lshift>
 8023880:	4631      	mov	r1, r6
 8023882:	4682      	mov	sl, r0
 8023884:	f000 fd2f 	bl	80242e6 <__mcmp>
 8023888:	2800      	cmp	r0, #0
 802388a:	f300 808d 	bgt.w	80239a8 <_dtoa_r+0xad0>
 802388e:	d103      	bne.n	8023898 <_dtoa_r+0x9c0>
 8023890:	f019 0f01 	tst.w	r9, #1
 8023894:	f040 8088 	bne.w	80239a8 <_dtoa_r+0xad0>
 8023898:	4645      	mov	r5, r8
 802389a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802389e:	2b30      	cmp	r3, #48	; 0x30
 80238a0:	f105 32ff 	add.w	r2, r5, #4294967295
 80238a4:	d1af      	bne.n	8023806 <_dtoa_r+0x92e>
 80238a6:	4615      	mov	r5, r2
 80238a8:	e7f7      	b.n	802389a <_dtoa_r+0x9c2>
 80238aa:	9b03      	ldr	r3, [sp, #12]
 80238ac:	9304      	str	r3, [sp, #16]
 80238ae:	2d00      	cmp	r5, #0
 80238b0:	dd05      	ble.n	80238be <_dtoa_r+0x9e6>
 80238b2:	4639      	mov	r1, r7
 80238b4:	462a      	mov	r2, r5
 80238b6:	4620      	mov	r0, r4
 80238b8:	f000 fcc4 	bl	8024244 <__lshift>
 80238bc:	4607      	mov	r7, r0
 80238be:	f1b8 0f00 	cmp.w	r8, #0
 80238c2:	d04c      	beq.n	802395e <_dtoa_r+0xa86>
 80238c4:	6879      	ldr	r1, [r7, #4]
 80238c6:	4620      	mov	r0, r4
 80238c8:	f000 fb04 	bl	8023ed4 <_Balloc>
 80238cc:	693a      	ldr	r2, [r7, #16]
 80238ce:	3202      	adds	r2, #2
 80238d0:	4605      	mov	r5, r0
 80238d2:	0092      	lsls	r2, r2, #2
 80238d4:	f107 010c 	add.w	r1, r7, #12
 80238d8:	300c      	adds	r0, #12
 80238da:	f7fe fa4d 	bl	8021d78 <memcpy>
 80238de:	2201      	movs	r2, #1
 80238e0:	4629      	mov	r1, r5
 80238e2:	4620      	mov	r0, r4
 80238e4:	f000 fcae 	bl	8024244 <__lshift>
 80238e8:	9b00      	ldr	r3, [sp, #0]
 80238ea:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80238ee:	9703      	str	r7, [sp, #12]
 80238f0:	f003 0301 	and.w	r3, r3, #1
 80238f4:	4607      	mov	r7, r0
 80238f6:	9305      	str	r3, [sp, #20]
 80238f8:	4631      	mov	r1, r6
 80238fa:	4650      	mov	r0, sl
 80238fc:	f7ff fa60 	bl	8022dc0 <quorem>
 8023900:	9903      	ldr	r1, [sp, #12]
 8023902:	4605      	mov	r5, r0
 8023904:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8023908:	4650      	mov	r0, sl
 802390a:	f000 fcec 	bl	80242e6 <__mcmp>
 802390e:	463a      	mov	r2, r7
 8023910:	9000      	str	r0, [sp, #0]
 8023912:	4631      	mov	r1, r6
 8023914:	4620      	mov	r0, r4
 8023916:	f000 fd00 	bl	802431a <__mdiff>
 802391a:	68c3      	ldr	r3, [r0, #12]
 802391c:	4602      	mov	r2, r0
 802391e:	bb03      	cbnz	r3, 8023962 <_dtoa_r+0xa8a>
 8023920:	4601      	mov	r1, r0
 8023922:	9006      	str	r0, [sp, #24]
 8023924:	4650      	mov	r0, sl
 8023926:	f000 fcde 	bl	80242e6 <__mcmp>
 802392a:	9a06      	ldr	r2, [sp, #24]
 802392c:	4603      	mov	r3, r0
 802392e:	4611      	mov	r1, r2
 8023930:	4620      	mov	r0, r4
 8023932:	9306      	str	r3, [sp, #24]
 8023934:	f000 fb02 	bl	8023f3c <_Bfree>
 8023938:	9b06      	ldr	r3, [sp, #24]
 802393a:	b9a3      	cbnz	r3, 8023966 <_dtoa_r+0xa8e>
 802393c:	9a07      	ldr	r2, [sp, #28]
 802393e:	b992      	cbnz	r2, 8023966 <_dtoa_r+0xa8e>
 8023940:	9a05      	ldr	r2, [sp, #20]
 8023942:	b982      	cbnz	r2, 8023966 <_dtoa_r+0xa8e>
 8023944:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8023948:	d029      	beq.n	802399e <_dtoa_r+0xac6>
 802394a:	9b00      	ldr	r3, [sp, #0]
 802394c:	2b00      	cmp	r3, #0
 802394e:	dd01      	ble.n	8023954 <_dtoa_r+0xa7c>
 8023950:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8023954:	f108 0501 	add.w	r5, r8, #1
 8023958:	f888 9000 	strb.w	r9, [r8]
 802395c:	e753      	b.n	8023806 <_dtoa_r+0x92e>
 802395e:	4638      	mov	r0, r7
 8023960:	e7c2      	b.n	80238e8 <_dtoa_r+0xa10>
 8023962:	2301      	movs	r3, #1
 8023964:	e7e3      	b.n	802392e <_dtoa_r+0xa56>
 8023966:	9a00      	ldr	r2, [sp, #0]
 8023968:	2a00      	cmp	r2, #0
 802396a:	db04      	blt.n	8023976 <_dtoa_r+0xa9e>
 802396c:	d125      	bne.n	80239ba <_dtoa_r+0xae2>
 802396e:	9a07      	ldr	r2, [sp, #28]
 8023970:	bb1a      	cbnz	r2, 80239ba <_dtoa_r+0xae2>
 8023972:	9a05      	ldr	r2, [sp, #20]
 8023974:	bb0a      	cbnz	r2, 80239ba <_dtoa_r+0xae2>
 8023976:	2b00      	cmp	r3, #0
 8023978:	ddec      	ble.n	8023954 <_dtoa_r+0xa7c>
 802397a:	4651      	mov	r1, sl
 802397c:	2201      	movs	r2, #1
 802397e:	4620      	mov	r0, r4
 8023980:	f000 fc60 	bl	8024244 <__lshift>
 8023984:	4631      	mov	r1, r6
 8023986:	4682      	mov	sl, r0
 8023988:	f000 fcad 	bl	80242e6 <__mcmp>
 802398c:	2800      	cmp	r0, #0
 802398e:	dc03      	bgt.n	8023998 <_dtoa_r+0xac0>
 8023990:	d1e0      	bne.n	8023954 <_dtoa_r+0xa7c>
 8023992:	f019 0f01 	tst.w	r9, #1
 8023996:	d0dd      	beq.n	8023954 <_dtoa_r+0xa7c>
 8023998:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802399c:	d1d8      	bne.n	8023950 <_dtoa_r+0xa78>
 802399e:	2339      	movs	r3, #57	; 0x39
 80239a0:	f888 3000 	strb.w	r3, [r8]
 80239a4:	f108 0801 	add.w	r8, r8, #1
 80239a8:	4645      	mov	r5, r8
 80239aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80239ae:	2b39      	cmp	r3, #57	; 0x39
 80239b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80239b4:	d03b      	beq.n	8023a2e <_dtoa_r+0xb56>
 80239b6:	3301      	adds	r3, #1
 80239b8:	e040      	b.n	8023a3c <_dtoa_r+0xb64>
 80239ba:	2b00      	cmp	r3, #0
 80239bc:	f108 0501 	add.w	r5, r8, #1
 80239c0:	dd05      	ble.n	80239ce <_dtoa_r+0xaf6>
 80239c2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80239c6:	d0ea      	beq.n	802399e <_dtoa_r+0xac6>
 80239c8:	f109 0901 	add.w	r9, r9, #1
 80239cc:	e7c4      	b.n	8023958 <_dtoa_r+0xa80>
 80239ce:	9b02      	ldr	r3, [sp, #8]
 80239d0:	9a04      	ldr	r2, [sp, #16]
 80239d2:	f805 9c01 	strb.w	r9, [r5, #-1]
 80239d6:	1aeb      	subs	r3, r5, r3
 80239d8:	4293      	cmp	r3, r2
 80239da:	46a8      	mov	r8, r5
 80239dc:	f43f af4b 	beq.w	8023876 <_dtoa_r+0x99e>
 80239e0:	4651      	mov	r1, sl
 80239e2:	2300      	movs	r3, #0
 80239e4:	220a      	movs	r2, #10
 80239e6:	4620      	mov	r0, r4
 80239e8:	f000 fabf 	bl	8023f6a <__multadd>
 80239ec:	9b03      	ldr	r3, [sp, #12]
 80239ee:	9903      	ldr	r1, [sp, #12]
 80239f0:	42bb      	cmp	r3, r7
 80239f2:	4682      	mov	sl, r0
 80239f4:	f04f 0300 	mov.w	r3, #0
 80239f8:	f04f 020a 	mov.w	r2, #10
 80239fc:	4620      	mov	r0, r4
 80239fe:	d104      	bne.n	8023a0a <_dtoa_r+0xb32>
 8023a00:	f000 fab3 	bl	8023f6a <__multadd>
 8023a04:	9003      	str	r0, [sp, #12]
 8023a06:	4607      	mov	r7, r0
 8023a08:	e776      	b.n	80238f8 <_dtoa_r+0xa20>
 8023a0a:	f000 faae 	bl	8023f6a <__multadd>
 8023a0e:	2300      	movs	r3, #0
 8023a10:	9003      	str	r0, [sp, #12]
 8023a12:	220a      	movs	r2, #10
 8023a14:	4639      	mov	r1, r7
 8023a16:	4620      	mov	r0, r4
 8023a18:	f000 faa7 	bl	8023f6a <__multadd>
 8023a1c:	e7f3      	b.n	8023a06 <_dtoa_r+0xb2e>
 8023a1e:	4651      	mov	r1, sl
 8023a20:	2300      	movs	r3, #0
 8023a22:	220a      	movs	r2, #10
 8023a24:	4620      	mov	r0, r4
 8023a26:	f000 faa0 	bl	8023f6a <__multadd>
 8023a2a:	4682      	mov	sl, r0
 8023a2c:	e70d      	b.n	802384a <_dtoa_r+0x972>
 8023a2e:	9b02      	ldr	r3, [sp, #8]
 8023a30:	4293      	cmp	r3, r2
 8023a32:	d105      	bne.n	8023a40 <_dtoa_r+0xb68>
 8023a34:	9a02      	ldr	r2, [sp, #8]
 8023a36:	f10b 0b01 	add.w	fp, fp, #1
 8023a3a:	2331      	movs	r3, #49	; 0x31
 8023a3c:	7013      	strb	r3, [r2, #0]
 8023a3e:	e6e2      	b.n	8023806 <_dtoa_r+0x92e>
 8023a40:	4615      	mov	r5, r2
 8023a42:	e7b2      	b.n	80239aa <_dtoa_r+0xad2>
 8023a44:	4b09      	ldr	r3, [pc, #36]	; (8023a6c <_dtoa_r+0xb94>)
 8023a46:	f7ff baae 	b.w	8022fa6 <_dtoa_r+0xce>
 8023a4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8023a4c:	2b00      	cmp	r3, #0
 8023a4e:	f47f aa88 	bne.w	8022f62 <_dtoa_r+0x8a>
 8023a52:	4b07      	ldr	r3, [pc, #28]	; (8023a70 <_dtoa_r+0xb98>)
 8023a54:	f7ff baa7 	b.w	8022fa6 <_dtoa_r+0xce>
 8023a58:	9b04      	ldr	r3, [sp, #16]
 8023a5a:	2b00      	cmp	r3, #0
 8023a5c:	f73f aef4 	bgt.w	8023848 <_dtoa_r+0x970>
 8023a60:	9b07      	ldr	r3, [sp, #28]
 8023a62:	2b02      	cmp	r3, #2
 8023a64:	f77f aef0 	ble.w	8023848 <_dtoa_r+0x970>
 8023a68:	e6b8      	b.n	80237dc <_dtoa_r+0x904>
 8023a6a:	bf00      	nop
 8023a6c:	08033815 	.word	0x08033815
 8023a70:	080339a2 	.word	0x080339a2

08023a74 <_localeconv_r>:
 8023a74:	4b04      	ldr	r3, [pc, #16]	; (8023a88 <_localeconv_r+0x14>)
 8023a76:	681b      	ldr	r3, [r3, #0]
 8023a78:	6a18      	ldr	r0, [r3, #32]
 8023a7a:	4b04      	ldr	r3, [pc, #16]	; (8023a8c <_localeconv_r+0x18>)
 8023a7c:	2800      	cmp	r0, #0
 8023a7e:	bf08      	it	eq
 8023a80:	4618      	moveq	r0, r3
 8023a82:	30f0      	adds	r0, #240	; 0xf0
 8023a84:	4770      	bx	lr
 8023a86:	bf00      	nop
 8023a88:	20000acc 	.word	0x20000acc
 8023a8c:	20000fd0 	.word	0x20000fd0

08023a90 <malloc>:
 8023a90:	4b02      	ldr	r3, [pc, #8]	; (8023a9c <malloc+0xc>)
 8023a92:	4601      	mov	r1, r0
 8023a94:	6818      	ldr	r0, [r3, #0]
 8023a96:	f000 b803 	b.w	8023aa0 <_malloc_r>
 8023a9a:	bf00      	nop
 8023a9c:	20000acc 	.word	0x20000acc

08023aa0 <_malloc_r>:
 8023aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023aa4:	f101 040b 	add.w	r4, r1, #11
 8023aa8:	2c16      	cmp	r4, #22
 8023aaa:	4681      	mov	r9, r0
 8023aac:	d907      	bls.n	8023abe <_malloc_r+0x1e>
 8023aae:	f034 0407 	bics.w	r4, r4, #7
 8023ab2:	d505      	bpl.n	8023ac0 <_malloc_r+0x20>
 8023ab4:	230c      	movs	r3, #12
 8023ab6:	f8c9 3000 	str.w	r3, [r9]
 8023aba:	2600      	movs	r6, #0
 8023abc:	e131      	b.n	8023d22 <_malloc_r+0x282>
 8023abe:	2410      	movs	r4, #16
 8023ac0:	428c      	cmp	r4, r1
 8023ac2:	d3f7      	bcc.n	8023ab4 <_malloc_r+0x14>
 8023ac4:	4648      	mov	r0, r9
 8023ac6:	f000 f9f9 	bl	8023ebc <__malloc_lock>
 8023aca:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8023ace:	4d9c      	ldr	r5, [pc, #624]	; (8023d40 <_malloc_r+0x2a0>)
 8023ad0:	d236      	bcs.n	8023b40 <_malloc_r+0xa0>
 8023ad2:	f104 0208 	add.w	r2, r4, #8
 8023ad6:	442a      	add	r2, r5
 8023ad8:	f1a2 0108 	sub.w	r1, r2, #8
 8023adc:	6856      	ldr	r6, [r2, #4]
 8023ade:	428e      	cmp	r6, r1
 8023ae0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8023ae4:	d102      	bne.n	8023aec <_malloc_r+0x4c>
 8023ae6:	68d6      	ldr	r6, [r2, #12]
 8023ae8:	42b2      	cmp	r2, r6
 8023aea:	d010      	beq.n	8023b0e <_malloc_r+0x6e>
 8023aec:	6873      	ldr	r3, [r6, #4]
 8023aee:	68f2      	ldr	r2, [r6, #12]
 8023af0:	68b1      	ldr	r1, [r6, #8]
 8023af2:	f023 0303 	bic.w	r3, r3, #3
 8023af6:	60ca      	str	r2, [r1, #12]
 8023af8:	4433      	add	r3, r6
 8023afa:	6091      	str	r1, [r2, #8]
 8023afc:	685a      	ldr	r2, [r3, #4]
 8023afe:	f042 0201 	orr.w	r2, r2, #1
 8023b02:	605a      	str	r2, [r3, #4]
 8023b04:	4648      	mov	r0, r9
 8023b06:	f000 f9df 	bl	8023ec8 <__malloc_unlock>
 8023b0a:	3608      	adds	r6, #8
 8023b0c:	e109      	b.n	8023d22 <_malloc_r+0x282>
 8023b0e:	3302      	adds	r3, #2
 8023b10:	4a8c      	ldr	r2, [pc, #560]	; (8023d44 <_malloc_r+0x2a4>)
 8023b12:	692e      	ldr	r6, [r5, #16]
 8023b14:	4296      	cmp	r6, r2
 8023b16:	4611      	mov	r1, r2
 8023b18:	d06d      	beq.n	8023bf6 <_malloc_r+0x156>
 8023b1a:	6870      	ldr	r0, [r6, #4]
 8023b1c:	f020 0003 	bic.w	r0, r0, #3
 8023b20:	1b07      	subs	r7, r0, r4
 8023b22:	2f0f      	cmp	r7, #15
 8023b24:	dd47      	ble.n	8023bb6 <_malloc_r+0x116>
 8023b26:	1933      	adds	r3, r6, r4
 8023b28:	f044 0401 	orr.w	r4, r4, #1
 8023b2c:	6074      	str	r4, [r6, #4]
 8023b2e:	616b      	str	r3, [r5, #20]
 8023b30:	612b      	str	r3, [r5, #16]
 8023b32:	60da      	str	r2, [r3, #12]
 8023b34:	609a      	str	r2, [r3, #8]
 8023b36:	f047 0201 	orr.w	r2, r7, #1
 8023b3a:	605a      	str	r2, [r3, #4]
 8023b3c:	5037      	str	r7, [r6, r0]
 8023b3e:	e7e1      	b.n	8023b04 <_malloc_r+0x64>
 8023b40:	0a63      	lsrs	r3, r4, #9
 8023b42:	d02a      	beq.n	8023b9a <_malloc_r+0xfa>
 8023b44:	2b04      	cmp	r3, #4
 8023b46:	d812      	bhi.n	8023b6e <_malloc_r+0xce>
 8023b48:	09a3      	lsrs	r3, r4, #6
 8023b4a:	3338      	adds	r3, #56	; 0x38
 8023b4c:	1c5a      	adds	r2, r3, #1
 8023b4e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8023b52:	f1a2 0008 	sub.w	r0, r2, #8
 8023b56:	6856      	ldr	r6, [r2, #4]
 8023b58:	4286      	cmp	r6, r0
 8023b5a:	d006      	beq.n	8023b6a <_malloc_r+0xca>
 8023b5c:	6872      	ldr	r2, [r6, #4]
 8023b5e:	f022 0203 	bic.w	r2, r2, #3
 8023b62:	1b11      	subs	r1, r2, r4
 8023b64:	290f      	cmp	r1, #15
 8023b66:	dd1c      	ble.n	8023ba2 <_malloc_r+0x102>
 8023b68:	3b01      	subs	r3, #1
 8023b6a:	3301      	adds	r3, #1
 8023b6c:	e7d0      	b.n	8023b10 <_malloc_r+0x70>
 8023b6e:	2b14      	cmp	r3, #20
 8023b70:	d801      	bhi.n	8023b76 <_malloc_r+0xd6>
 8023b72:	335b      	adds	r3, #91	; 0x5b
 8023b74:	e7ea      	b.n	8023b4c <_malloc_r+0xac>
 8023b76:	2b54      	cmp	r3, #84	; 0x54
 8023b78:	d802      	bhi.n	8023b80 <_malloc_r+0xe0>
 8023b7a:	0b23      	lsrs	r3, r4, #12
 8023b7c:	336e      	adds	r3, #110	; 0x6e
 8023b7e:	e7e5      	b.n	8023b4c <_malloc_r+0xac>
 8023b80:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8023b84:	d802      	bhi.n	8023b8c <_malloc_r+0xec>
 8023b86:	0be3      	lsrs	r3, r4, #15
 8023b88:	3377      	adds	r3, #119	; 0x77
 8023b8a:	e7df      	b.n	8023b4c <_malloc_r+0xac>
 8023b8c:	f240 5254 	movw	r2, #1364	; 0x554
 8023b90:	4293      	cmp	r3, r2
 8023b92:	d804      	bhi.n	8023b9e <_malloc_r+0xfe>
 8023b94:	0ca3      	lsrs	r3, r4, #18
 8023b96:	337c      	adds	r3, #124	; 0x7c
 8023b98:	e7d8      	b.n	8023b4c <_malloc_r+0xac>
 8023b9a:	233f      	movs	r3, #63	; 0x3f
 8023b9c:	e7d6      	b.n	8023b4c <_malloc_r+0xac>
 8023b9e:	237e      	movs	r3, #126	; 0x7e
 8023ba0:	e7d4      	b.n	8023b4c <_malloc_r+0xac>
 8023ba2:	2900      	cmp	r1, #0
 8023ba4:	68f1      	ldr	r1, [r6, #12]
 8023ba6:	db04      	blt.n	8023bb2 <_malloc_r+0x112>
 8023ba8:	68b3      	ldr	r3, [r6, #8]
 8023baa:	60d9      	str	r1, [r3, #12]
 8023bac:	608b      	str	r3, [r1, #8]
 8023bae:	18b3      	adds	r3, r6, r2
 8023bb0:	e7a4      	b.n	8023afc <_malloc_r+0x5c>
 8023bb2:	460e      	mov	r6, r1
 8023bb4:	e7d0      	b.n	8023b58 <_malloc_r+0xb8>
 8023bb6:	2f00      	cmp	r7, #0
 8023bb8:	616a      	str	r2, [r5, #20]
 8023bba:	612a      	str	r2, [r5, #16]
 8023bbc:	db05      	blt.n	8023bca <_malloc_r+0x12a>
 8023bbe:	4430      	add	r0, r6
 8023bc0:	6843      	ldr	r3, [r0, #4]
 8023bc2:	f043 0301 	orr.w	r3, r3, #1
 8023bc6:	6043      	str	r3, [r0, #4]
 8023bc8:	e79c      	b.n	8023b04 <_malloc_r+0x64>
 8023bca:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8023bce:	d244      	bcs.n	8023c5a <_malloc_r+0x1ba>
 8023bd0:	08c0      	lsrs	r0, r0, #3
 8023bd2:	1087      	asrs	r7, r0, #2
 8023bd4:	2201      	movs	r2, #1
 8023bd6:	fa02 f707 	lsl.w	r7, r2, r7
 8023bda:	686a      	ldr	r2, [r5, #4]
 8023bdc:	3001      	adds	r0, #1
 8023bde:	433a      	orrs	r2, r7
 8023be0:	606a      	str	r2, [r5, #4]
 8023be2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8023be6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8023bea:	60b7      	str	r7, [r6, #8]
 8023bec:	3a08      	subs	r2, #8
 8023bee:	60f2      	str	r2, [r6, #12]
 8023bf0:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8023bf4:	60fe      	str	r6, [r7, #12]
 8023bf6:	2001      	movs	r0, #1
 8023bf8:	109a      	asrs	r2, r3, #2
 8023bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8023bfe:	6868      	ldr	r0, [r5, #4]
 8023c00:	4282      	cmp	r2, r0
 8023c02:	f200 80a1 	bhi.w	8023d48 <_malloc_r+0x2a8>
 8023c06:	4202      	tst	r2, r0
 8023c08:	d106      	bne.n	8023c18 <_malloc_r+0x178>
 8023c0a:	f023 0303 	bic.w	r3, r3, #3
 8023c0e:	0052      	lsls	r2, r2, #1
 8023c10:	4202      	tst	r2, r0
 8023c12:	f103 0304 	add.w	r3, r3, #4
 8023c16:	d0fa      	beq.n	8023c0e <_malloc_r+0x16e>
 8023c18:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8023c1c:	46e0      	mov	r8, ip
 8023c1e:	469e      	mov	lr, r3
 8023c20:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8023c24:	4546      	cmp	r6, r8
 8023c26:	d153      	bne.n	8023cd0 <_malloc_r+0x230>
 8023c28:	f10e 0e01 	add.w	lr, lr, #1
 8023c2c:	f01e 0f03 	tst.w	lr, #3
 8023c30:	f108 0808 	add.w	r8, r8, #8
 8023c34:	d1f4      	bne.n	8023c20 <_malloc_r+0x180>
 8023c36:	0798      	lsls	r0, r3, #30
 8023c38:	d179      	bne.n	8023d2e <_malloc_r+0x28e>
 8023c3a:	686b      	ldr	r3, [r5, #4]
 8023c3c:	ea23 0302 	bic.w	r3, r3, r2
 8023c40:	606b      	str	r3, [r5, #4]
 8023c42:	6868      	ldr	r0, [r5, #4]
 8023c44:	0052      	lsls	r2, r2, #1
 8023c46:	4282      	cmp	r2, r0
 8023c48:	d87e      	bhi.n	8023d48 <_malloc_r+0x2a8>
 8023c4a:	2a00      	cmp	r2, #0
 8023c4c:	d07c      	beq.n	8023d48 <_malloc_r+0x2a8>
 8023c4e:	4673      	mov	r3, lr
 8023c50:	4202      	tst	r2, r0
 8023c52:	d1e1      	bne.n	8023c18 <_malloc_r+0x178>
 8023c54:	3304      	adds	r3, #4
 8023c56:	0052      	lsls	r2, r2, #1
 8023c58:	e7fa      	b.n	8023c50 <_malloc_r+0x1b0>
 8023c5a:	0a42      	lsrs	r2, r0, #9
 8023c5c:	2a04      	cmp	r2, #4
 8023c5e:	d815      	bhi.n	8023c8c <_malloc_r+0x1ec>
 8023c60:	0982      	lsrs	r2, r0, #6
 8023c62:	3238      	adds	r2, #56	; 0x38
 8023c64:	1c57      	adds	r7, r2, #1
 8023c66:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8023c6a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8023c6e:	45be      	cmp	lr, r7
 8023c70:	d126      	bne.n	8023cc0 <_malloc_r+0x220>
 8023c72:	2001      	movs	r0, #1
 8023c74:	1092      	asrs	r2, r2, #2
 8023c76:	fa00 f202 	lsl.w	r2, r0, r2
 8023c7a:	6868      	ldr	r0, [r5, #4]
 8023c7c:	4310      	orrs	r0, r2
 8023c7e:	6068      	str	r0, [r5, #4]
 8023c80:	f8c6 e00c 	str.w	lr, [r6, #12]
 8023c84:	60b7      	str	r7, [r6, #8]
 8023c86:	f8ce 6008 	str.w	r6, [lr, #8]
 8023c8a:	e7b3      	b.n	8023bf4 <_malloc_r+0x154>
 8023c8c:	2a14      	cmp	r2, #20
 8023c8e:	d801      	bhi.n	8023c94 <_malloc_r+0x1f4>
 8023c90:	325b      	adds	r2, #91	; 0x5b
 8023c92:	e7e7      	b.n	8023c64 <_malloc_r+0x1c4>
 8023c94:	2a54      	cmp	r2, #84	; 0x54
 8023c96:	d802      	bhi.n	8023c9e <_malloc_r+0x1fe>
 8023c98:	0b02      	lsrs	r2, r0, #12
 8023c9a:	326e      	adds	r2, #110	; 0x6e
 8023c9c:	e7e2      	b.n	8023c64 <_malloc_r+0x1c4>
 8023c9e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8023ca2:	d802      	bhi.n	8023caa <_malloc_r+0x20a>
 8023ca4:	0bc2      	lsrs	r2, r0, #15
 8023ca6:	3277      	adds	r2, #119	; 0x77
 8023ca8:	e7dc      	b.n	8023c64 <_malloc_r+0x1c4>
 8023caa:	f240 5754 	movw	r7, #1364	; 0x554
 8023cae:	42ba      	cmp	r2, r7
 8023cb0:	bf9a      	itte	ls
 8023cb2:	0c82      	lsrls	r2, r0, #18
 8023cb4:	327c      	addls	r2, #124	; 0x7c
 8023cb6:	227e      	movhi	r2, #126	; 0x7e
 8023cb8:	e7d4      	b.n	8023c64 <_malloc_r+0x1c4>
 8023cba:	68bf      	ldr	r7, [r7, #8]
 8023cbc:	45be      	cmp	lr, r7
 8023cbe:	d004      	beq.n	8023cca <_malloc_r+0x22a>
 8023cc0:	687a      	ldr	r2, [r7, #4]
 8023cc2:	f022 0203 	bic.w	r2, r2, #3
 8023cc6:	4290      	cmp	r0, r2
 8023cc8:	d3f7      	bcc.n	8023cba <_malloc_r+0x21a>
 8023cca:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8023cce:	e7d7      	b.n	8023c80 <_malloc_r+0x1e0>
 8023cd0:	6870      	ldr	r0, [r6, #4]
 8023cd2:	68f7      	ldr	r7, [r6, #12]
 8023cd4:	f020 0003 	bic.w	r0, r0, #3
 8023cd8:	eba0 0a04 	sub.w	sl, r0, r4
 8023cdc:	f1ba 0f0f 	cmp.w	sl, #15
 8023ce0:	dd10      	ble.n	8023d04 <_malloc_r+0x264>
 8023ce2:	68b2      	ldr	r2, [r6, #8]
 8023ce4:	1933      	adds	r3, r6, r4
 8023ce6:	f044 0401 	orr.w	r4, r4, #1
 8023cea:	6074      	str	r4, [r6, #4]
 8023cec:	60d7      	str	r7, [r2, #12]
 8023cee:	60ba      	str	r2, [r7, #8]
 8023cf0:	f04a 0201 	orr.w	r2, sl, #1
 8023cf4:	616b      	str	r3, [r5, #20]
 8023cf6:	612b      	str	r3, [r5, #16]
 8023cf8:	60d9      	str	r1, [r3, #12]
 8023cfa:	6099      	str	r1, [r3, #8]
 8023cfc:	605a      	str	r2, [r3, #4]
 8023cfe:	f846 a000 	str.w	sl, [r6, r0]
 8023d02:	e6ff      	b.n	8023b04 <_malloc_r+0x64>
 8023d04:	f1ba 0f00 	cmp.w	sl, #0
 8023d08:	db0f      	blt.n	8023d2a <_malloc_r+0x28a>
 8023d0a:	4430      	add	r0, r6
 8023d0c:	6843      	ldr	r3, [r0, #4]
 8023d0e:	f043 0301 	orr.w	r3, r3, #1
 8023d12:	6043      	str	r3, [r0, #4]
 8023d14:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8023d18:	4648      	mov	r0, r9
 8023d1a:	60df      	str	r7, [r3, #12]
 8023d1c:	60bb      	str	r3, [r7, #8]
 8023d1e:	f000 f8d3 	bl	8023ec8 <__malloc_unlock>
 8023d22:	4630      	mov	r0, r6
 8023d24:	b003      	add	sp, #12
 8023d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d2a:	463e      	mov	r6, r7
 8023d2c:	e77a      	b.n	8023c24 <_malloc_r+0x184>
 8023d2e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8023d32:	4584      	cmp	ip, r0
 8023d34:	f103 33ff 	add.w	r3, r3, #4294967295
 8023d38:	f43f af7d 	beq.w	8023c36 <_malloc_r+0x196>
 8023d3c:	e781      	b.n	8023c42 <_malloc_r+0x1a2>
 8023d3e:	bf00      	nop
 8023d40:	20000bc0 	.word	0x20000bc0
 8023d44:	20000bc8 	.word	0x20000bc8
 8023d48:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8023d4c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8023d50:	f026 0603 	bic.w	r6, r6, #3
 8023d54:	42b4      	cmp	r4, r6
 8023d56:	d803      	bhi.n	8023d60 <_malloc_r+0x2c0>
 8023d58:	1b33      	subs	r3, r6, r4
 8023d5a:	2b0f      	cmp	r3, #15
 8023d5c:	f300 8096 	bgt.w	8023e8c <_malloc_r+0x3ec>
 8023d60:	4a4f      	ldr	r2, [pc, #316]	; (8023ea0 <_malloc_r+0x400>)
 8023d62:	6817      	ldr	r7, [r2, #0]
 8023d64:	4a4f      	ldr	r2, [pc, #316]	; (8023ea4 <_malloc_r+0x404>)
 8023d66:	6811      	ldr	r1, [r2, #0]
 8023d68:	3710      	adds	r7, #16
 8023d6a:	3101      	adds	r1, #1
 8023d6c:	eb0b 0306 	add.w	r3, fp, r6
 8023d70:	4427      	add	r7, r4
 8023d72:	d005      	beq.n	8023d80 <_malloc_r+0x2e0>
 8023d74:	494c      	ldr	r1, [pc, #304]	; (8023ea8 <_malloc_r+0x408>)
 8023d76:	3901      	subs	r1, #1
 8023d78:	440f      	add	r7, r1
 8023d7a:	3101      	adds	r1, #1
 8023d7c:	4249      	negs	r1, r1
 8023d7e:	400f      	ands	r7, r1
 8023d80:	4639      	mov	r1, r7
 8023d82:	4648      	mov	r0, r9
 8023d84:	9201      	str	r2, [sp, #4]
 8023d86:	9300      	str	r3, [sp, #0]
 8023d88:	f000 fb74 	bl	8024474 <_sbrk_r>
 8023d8c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8023d90:	4680      	mov	r8, r0
 8023d92:	d056      	beq.n	8023e42 <_malloc_r+0x3a2>
 8023d94:	9b00      	ldr	r3, [sp, #0]
 8023d96:	9a01      	ldr	r2, [sp, #4]
 8023d98:	4283      	cmp	r3, r0
 8023d9a:	d901      	bls.n	8023da0 <_malloc_r+0x300>
 8023d9c:	45ab      	cmp	fp, r5
 8023d9e:	d150      	bne.n	8023e42 <_malloc_r+0x3a2>
 8023da0:	4842      	ldr	r0, [pc, #264]	; (8023eac <_malloc_r+0x40c>)
 8023da2:	6801      	ldr	r1, [r0, #0]
 8023da4:	4543      	cmp	r3, r8
 8023da6:	eb07 0e01 	add.w	lr, r7, r1
 8023daa:	f8c0 e000 	str.w	lr, [r0]
 8023dae:	4940      	ldr	r1, [pc, #256]	; (8023eb0 <_malloc_r+0x410>)
 8023db0:	4682      	mov	sl, r0
 8023db2:	d113      	bne.n	8023ddc <_malloc_r+0x33c>
 8023db4:	420b      	tst	r3, r1
 8023db6:	d111      	bne.n	8023ddc <_malloc_r+0x33c>
 8023db8:	68ab      	ldr	r3, [r5, #8]
 8023dba:	443e      	add	r6, r7
 8023dbc:	f046 0601 	orr.w	r6, r6, #1
 8023dc0:	605e      	str	r6, [r3, #4]
 8023dc2:	4a3c      	ldr	r2, [pc, #240]	; (8023eb4 <_malloc_r+0x414>)
 8023dc4:	f8da 3000 	ldr.w	r3, [sl]
 8023dc8:	6811      	ldr	r1, [r2, #0]
 8023dca:	428b      	cmp	r3, r1
 8023dcc:	bf88      	it	hi
 8023dce:	6013      	strhi	r3, [r2, #0]
 8023dd0:	4a39      	ldr	r2, [pc, #228]	; (8023eb8 <_malloc_r+0x418>)
 8023dd2:	6811      	ldr	r1, [r2, #0]
 8023dd4:	428b      	cmp	r3, r1
 8023dd6:	bf88      	it	hi
 8023dd8:	6013      	strhi	r3, [r2, #0]
 8023dda:	e032      	b.n	8023e42 <_malloc_r+0x3a2>
 8023ddc:	6810      	ldr	r0, [r2, #0]
 8023dde:	3001      	adds	r0, #1
 8023de0:	bf1b      	ittet	ne
 8023de2:	eba8 0303 	subne.w	r3, r8, r3
 8023de6:	4473      	addne	r3, lr
 8023de8:	f8c2 8000 	streq.w	r8, [r2]
 8023dec:	f8ca 3000 	strne.w	r3, [sl]
 8023df0:	f018 0007 	ands.w	r0, r8, #7
 8023df4:	bf1c      	itt	ne
 8023df6:	f1c0 0008 	rsbne	r0, r0, #8
 8023dfa:	4480      	addne	r8, r0
 8023dfc:	4b2a      	ldr	r3, [pc, #168]	; (8023ea8 <_malloc_r+0x408>)
 8023dfe:	4447      	add	r7, r8
 8023e00:	4418      	add	r0, r3
 8023e02:	400f      	ands	r7, r1
 8023e04:	1bc7      	subs	r7, r0, r7
 8023e06:	4639      	mov	r1, r7
 8023e08:	4648      	mov	r0, r9
 8023e0a:	f000 fb33 	bl	8024474 <_sbrk_r>
 8023e0e:	1c43      	adds	r3, r0, #1
 8023e10:	bf08      	it	eq
 8023e12:	4640      	moveq	r0, r8
 8023e14:	f8da 3000 	ldr.w	r3, [sl]
 8023e18:	f8c5 8008 	str.w	r8, [r5, #8]
 8023e1c:	bf08      	it	eq
 8023e1e:	2700      	moveq	r7, #0
 8023e20:	eba0 0008 	sub.w	r0, r0, r8
 8023e24:	443b      	add	r3, r7
 8023e26:	4407      	add	r7, r0
 8023e28:	f047 0701 	orr.w	r7, r7, #1
 8023e2c:	45ab      	cmp	fp, r5
 8023e2e:	f8ca 3000 	str.w	r3, [sl]
 8023e32:	f8c8 7004 	str.w	r7, [r8, #4]
 8023e36:	d0c4      	beq.n	8023dc2 <_malloc_r+0x322>
 8023e38:	2e0f      	cmp	r6, #15
 8023e3a:	d810      	bhi.n	8023e5e <_malloc_r+0x3be>
 8023e3c:	2301      	movs	r3, #1
 8023e3e:	f8c8 3004 	str.w	r3, [r8, #4]
 8023e42:	68ab      	ldr	r3, [r5, #8]
 8023e44:	685a      	ldr	r2, [r3, #4]
 8023e46:	f022 0203 	bic.w	r2, r2, #3
 8023e4a:	4294      	cmp	r4, r2
 8023e4c:	eba2 0304 	sub.w	r3, r2, r4
 8023e50:	d801      	bhi.n	8023e56 <_malloc_r+0x3b6>
 8023e52:	2b0f      	cmp	r3, #15
 8023e54:	dc1a      	bgt.n	8023e8c <_malloc_r+0x3ec>
 8023e56:	4648      	mov	r0, r9
 8023e58:	f000 f836 	bl	8023ec8 <__malloc_unlock>
 8023e5c:	e62d      	b.n	8023aba <_malloc_r+0x1a>
 8023e5e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8023e62:	3e0c      	subs	r6, #12
 8023e64:	f026 0607 	bic.w	r6, r6, #7
 8023e68:	f003 0301 	and.w	r3, r3, #1
 8023e6c:	4333      	orrs	r3, r6
 8023e6e:	f8cb 3004 	str.w	r3, [fp, #4]
 8023e72:	eb0b 0306 	add.w	r3, fp, r6
 8023e76:	2205      	movs	r2, #5
 8023e78:	2e0f      	cmp	r6, #15
 8023e7a:	605a      	str	r2, [r3, #4]
 8023e7c:	609a      	str	r2, [r3, #8]
 8023e7e:	d9a0      	bls.n	8023dc2 <_malloc_r+0x322>
 8023e80:	f10b 0108 	add.w	r1, fp, #8
 8023e84:	4648      	mov	r0, r9
 8023e86:	f000 fc03 	bl	8024690 <_free_r>
 8023e8a:	e79a      	b.n	8023dc2 <_malloc_r+0x322>
 8023e8c:	68ae      	ldr	r6, [r5, #8]
 8023e8e:	f044 0201 	orr.w	r2, r4, #1
 8023e92:	4434      	add	r4, r6
 8023e94:	f043 0301 	orr.w	r3, r3, #1
 8023e98:	6072      	str	r2, [r6, #4]
 8023e9a:	60ac      	str	r4, [r5, #8]
 8023e9c:	6063      	str	r3, [r4, #4]
 8023e9e:	e631      	b.n	8023b04 <_malloc_r+0x64>
 8023ea0:	2008bed0 	.word	0x2008bed0
 8023ea4:	20000fc8 	.word	0x20000fc8
 8023ea8:	00000080 	.word	0x00000080
 8023eac:	2008bea0 	.word	0x2008bea0
 8023eb0:	0000007f 	.word	0x0000007f
 8023eb4:	2008bec8 	.word	0x2008bec8
 8023eb8:	2008becc 	.word	0x2008becc

08023ebc <__malloc_lock>:
 8023ebc:	4801      	ldr	r0, [pc, #4]	; (8023ec4 <__malloc_lock+0x8>)
 8023ebe:	f000 bca3 	b.w	8024808 <__retarget_lock_acquire_recursive>
 8023ec2:	bf00      	nop
 8023ec4:	20091e00 	.word	0x20091e00

08023ec8 <__malloc_unlock>:
 8023ec8:	4801      	ldr	r0, [pc, #4]	; (8023ed0 <__malloc_unlock+0x8>)
 8023eca:	f000 bc9e 	b.w	802480a <__retarget_lock_release_recursive>
 8023ece:	bf00      	nop
 8023ed0:	20091e00 	.word	0x20091e00

08023ed4 <_Balloc>:
 8023ed4:	b570      	push	{r4, r5, r6, lr}
 8023ed6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8023ed8:	4604      	mov	r4, r0
 8023eda:	460e      	mov	r6, r1
 8023edc:	b93d      	cbnz	r5, 8023eee <_Balloc+0x1a>
 8023ede:	2010      	movs	r0, #16
 8023ee0:	f7ff fdd6 	bl	8023a90 <malloc>
 8023ee4:	6260      	str	r0, [r4, #36]	; 0x24
 8023ee6:	6045      	str	r5, [r0, #4]
 8023ee8:	6085      	str	r5, [r0, #8]
 8023eea:	6005      	str	r5, [r0, #0]
 8023eec:	60c5      	str	r5, [r0, #12]
 8023eee:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8023ef0:	68eb      	ldr	r3, [r5, #12]
 8023ef2:	b183      	cbz	r3, 8023f16 <_Balloc+0x42>
 8023ef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023ef6:	68db      	ldr	r3, [r3, #12]
 8023ef8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8023efc:	b9b8      	cbnz	r0, 8023f2e <_Balloc+0x5a>
 8023efe:	2101      	movs	r1, #1
 8023f00:	fa01 f506 	lsl.w	r5, r1, r6
 8023f04:	1d6a      	adds	r2, r5, #5
 8023f06:	0092      	lsls	r2, r2, #2
 8023f08:	4620      	mov	r0, r4
 8023f0a:	f000 fb3d 	bl	8024588 <_calloc_r>
 8023f0e:	b160      	cbz	r0, 8023f2a <_Balloc+0x56>
 8023f10:	6046      	str	r6, [r0, #4]
 8023f12:	6085      	str	r5, [r0, #8]
 8023f14:	e00e      	b.n	8023f34 <_Balloc+0x60>
 8023f16:	2221      	movs	r2, #33	; 0x21
 8023f18:	2104      	movs	r1, #4
 8023f1a:	4620      	mov	r0, r4
 8023f1c:	f000 fb34 	bl	8024588 <_calloc_r>
 8023f20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8023f22:	60e8      	str	r0, [r5, #12]
 8023f24:	68db      	ldr	r3, [r3, #12]
 8023f26:	2b00      	cmp	r3, #0
 8023f28:	d1e4      	bne.n	8023ef4 <_Balloc+0x20>
 8023f2a:	2000      	movs	r0, #0
 8023f2c:	bd70      	pop	{r4, r5, r6, pc}
 8023f2e:	6802      	ldr	r2, [r0, #0]
 8023f30:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8023f34:	2300      	movs	r3, #0
 8023f36:	6103      	str	r3, [r0, #16]
 8023f38:	60c3      	str	r3, [r0, #12]
 8023f3a:	bd70      	pop	{r4, r5, r6, pc}

08023f3c <_Bfree>:
 8023f3c:	b570      	push	{r4, r5, r6, lr}
 8023f3e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8023f40:	4606      	mov	r6, r0
 8023f42:	460d      	mov	r5, r1
 8023f44:	b93c      	cbnz	r4, 8023f56 <_Bfree+0x1a>
 8023f46:	2010      	movs	r0, #16
 8023f48:	f7ff fda2 	bl	8023a90 <malloc>
 8023f4c:	6270      	str	r0, [r6, #36]	; 0x24
 8023f4e:	6044      	str	r4, [r0, #4]
 8023f50:	6084      	str	r4, [r0, #8]
 8023f52:	6004      	str	r4, [r0, #0]
 8023f54:	60c4      	str	r4, [r0, #12]
 8023f56:	b13d      	cbz	r5, 8023f68 <_Bfree+0x2c>
 8023f58:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8023f5a:	686a      	ldr	r2, [r5, #4]
 8023f5c:	68db      	ldr	r3, [r3, #12]
 8023f5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8023f62:	6029      	str	r1, [r5, #0]
 8023f64:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8023f68:	bd70      	pop	{r4, r5, r6, pc}

08023f6a <__multadd>:
 8023f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f6e:	690d      	ldr	r5, [r1, #16]
 8023f70:	461f      	mov	r7, r3
 8023f72:	4606      	mov	r6, r0
 8023f74:	460c      	mov	r4, r1
 8023f76:	f101 0e14 	add.w	lr, r1, #20
 8023f7a:	2300      	movs	r3, #0
 8023f7c:	f8de 0000 	ldr.w	r0, [lr]
 8023f80:	b281      	uxth	r1, r0
 8023f82:	fb02 7101 	mla	r1, r2, r1, r7
 8023f86:	0c0f      	lsrs	r7, r1, #16
 8023f88:	0c00      	lsrs	r0, r0, #16
 8023f8a:	fb02 7000 	mla	r0, r2, r0, r7
 8023f8e:	b289      	uxth	r1, r1
 8023f90:	3301      	adds	r3, #1
 8023f92:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8023f96:	429d      	cmp	r5, r3
 8023f98:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8023f9c:	f84e 1b04 	str.w	r1, [lr], #4
 8023fa0:	dcec      	bgt.n	8023f7c <__multadd+0x12>
 8023fa2:	b1d7      	cbz	r7, 8023fda <__multadd+0x70>
 8023fa4:	68a3      	ldr	r3, [r4, #8]
 8023fa6:	429d      	cmp	r5, r3
 8023fa8:	db12      	blt.n	8023fd0 <__multadd+0x66>
 8023faa:	6861      	ldr	r1, [r4, #4]
 8023fac:	4630      	mov	r0, r6
 8023fae:	3101      	adds	r1, #1
 8023fb0:	f7ff ff90 	bl	8023ed4 <_Balloc>
 8023fb4:	6922      	ldr	r2, [r4, #16]
 8023fb6:	3202      	adds	r2, #2
 8023fb8:	f104 010c 	add.w	r1, r4, #12
 8023fbc:	4680      	mov	r8, r0
 8023fbe:	0092      	lsls	r2, r2, #2
 8023fc0:	300c      	adds	r0, #12
 8023fc2:	f7fd fed9 	bl	8021d78 <memcpy>
 8023fc6:	4621      	mov	r1, r4
 8023fc8:	4630      	mov	r0, r6
 8023fca:	f7ff ffb7 	bl	8023f3c <_Bfree>
 8023fce:	4644      	mov	r4, r8
 8023fd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8023fd4:	3501      	adds	r5, #1
 8023fd6:	615f      	str	r7, [r3, #20]
 8023fd8:	6125      	str	r5, [r4, #16]
 8023fda:	4620      	mov	r0, r4
 8023fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08023fe0 <__hi0bits>:
 8023fe0:	0c02      	lsrs	r2, r0, #16
 8023fe2:	0412      	lsls	r2, r2, #16
 8023fe4:	4603      	mov	r3, r0
 8023fe6:	b9b2      	cbnz	r2, 8024016 <__hi0bits+0x36>
 8023fe8:	0403      	lsls	r3, r0, #16
 8023fea:	2010      	movs	r0, #16
 8023fec:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8023ff0:	bf04      	itt	eq
 8023ff2:	021b      	lsleq	r3, r3, #8
 8023ff4:	3008      	addeq	r0, #8
 8023ff6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8023ffa:	bf04      	itt	eq
 8023ffc:	011b      	lsleq	r3, r3, #4
 8023ffe:	3004      	addeq	r0, #4
 8024000:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8024004:	bf04      	itt	eq
 8024006:	009b      	lsleq	r3, r3, #2
 8024008:	3002      	addeq	r0, #2
 802400a:	2b00      	cmp	r3, #0
 802400c:	db06      	blt.n	802401c <__hi0bits+0x3c>
 802400e:	005b      	lsls	r3, r3, #1
 8024010:	d503      	bpl.n	802401a <__hi0bits+0x3a>
 8024012:	3001      	adds	r0, #1
 8024014:	4770      	bx	lr
 8024016:	2000      	movs	r0, #0
 8024018:	e7e8      	b.n	8023fec <__hi0bits+0xc>
 802401a:	2020      	movs	r0, #32
 802401c:	4770      	bx	lr

0802401e <__lo0bits>:
 802401e:	6803      	ldr	r3, [r0, #0]
 8024020:	f013 0207 	ands.w	r2, r3, #7
 8024024:	4601      	mov	r1, r0
 8024026:	d00b      	beq.n	8024040 <__lo0bits+0x22>
 8024028:	07da      	lsls	r2, r3, #31
 802402a:	d423      	bmi.n	8024074 <__lo0bits+0x56>
 802402c:	0798      	lsls	r0, r3, #30
 802402e:	bf49      	itett	mi
 8024030:	085b      	lsrmi	r3, r3, #1
 8024032:	089b      	lsrpl	r3, r3, #2
 8024034:	2001      	movmi	r0, #1
 8024036:	600b      	strmi	r3, [r1, #0]
 8024038:	bf5c      	itt	pl
 802403a:	600b      	strpl	r3, [r1, #0]
 802403c:	2002      	movpl	r0, #2
 802403e:	4770      	bx	lr
 8024040:	b298      	uxth	r0, r3
 8024042:	b9a8      	cbnz	r0, 8024070 <__lo0bits+0x52>
 8024044:	0c1b      	lsrs	r3, r3, #16
 8024046:	2010      	movs	r0, #16
 8024048:	f013 0fff 	tst.w	r3, #255	; 0xff
 802404c:	bf04      	itt	eq
 802404e:	0a1b      	lsreq	r3, r3, #8
 8024050:	3008      	addeq	r0, #8
 8024052:	071a      	lsls	r2, r3, #28
 8024054:	bf04      	itt	eq
 8024056:	091b      	lsreq	r3, r3, #4
 8024058:	3004      	addeq	r0, #4
 802405a:	079a      	lsls	r2, r3, #30
 802405c:	bf04      	itt	eq
 802405e:	089b      	lsreq	r3, r3, #2
 8024060:	3002      	addeq	r0, #2
 8024062:	07da      	lsls	r2, r3, #31
 8024064:	d402      	bmi.n	802406c <__lo0bits+0x4e>
 8024066:	085b      	lsrs	r3, r3, #1
 8024068:	d006      	beq.n	8024078 <__lo0bits+0x5a>
 802406a:	3001      	adds	r0, #1
 802406c:	600b      	str	r3, [r1, #0]
 802406e:	4770      	bx	lr
 8024070:	4610      	mov	r0, r2
 8024072:	e7e9      	b.n	8024048 <__lo0bits+0x2a>
 8024074:	2000      	movs	r0, #0
 8024076:	4770      	bx	lr
 8024078:	2020      	movs	r0, #32
 802407a:	4770      	bx	lr

0802407c <__i2b>:
 802407c:	b510      	push	{r4, lr}
 802407e:	460c      	mov	r4, r1
 8024080:	2101      	movs	r1, #1
 8024082:	f7ff ff27 	bl	8023ed4 <_Balloc>
 8024086:	2201      	movs	r2, #1
 8024088:	6144      	str	r4, [r0, #20]
 802408a:	6102      	str	r2, [r0, #16]
 802408c:	bd10      	pop	{r4, pc}

0802408e <__multiply>:
 802408e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024092:	4614      	mov	r4, r2
 8024094:	690a      	ldr	r2, [r1, #16]
 8024096:	6923      	ldr	r3, [r4, #16]
 8024098:	429a      	cmp	r2, r3
 802409a:	bfb8      	it	lt
 802409c:	460b      	movlt	r3, r1
 802409e:	4689      	mov	r9, r1
 80240a0:	bfbc      	itt	lt
 80240a2:	46a1      	movlt	r9, r4
 80240a4:	461c      	movlt	r4, r3
 80240a6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80240aa:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80240ae:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80240b2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80240b6:	eb07 060a 	add.w	r6, r7, sl
 80240ba:	429e      	cmp	r6, r3
 80240bc:	bfc8      	it	gt
 80240be:	3101      	addgt	r1, #1
 80240c0:	f7ff ff08 	bl	8023ed4 <_Balloc>
 80240c4:	f100 0514 	add.w	r5, r0, #20
 80240c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80240cc:	462b      	mov	r3, r5
 80240ce:	2200      	movs	r2, #0
 80240d0:	4543      	cmp	r3, r8
 80240d2:	d316      	bcc.n	8024102 <__multiply+0x74>
 80240d4:	f104 0214 	add.w	r2, r4, #20
 80240d8:	f109 0114 	add.w	r1, r9, #20
 80240dc:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80240e0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80240e4:	9301      	str	r3, [sp, #4]
 80240e6:	9c01      	ldr	r4, [sp, #4]
 80240e8:	4294      	cmp	r4, r2
 80240ea:	4613      	mov	r3, r2
 80240ec:	d80c      	bhi.n	8024108 <__multiply+0x7a>
 80240ee:	2e00      	cmp	r6, #0
 80240f0:	dd03      	ble.n	80240fa <__multiply+0x6c>
 80240f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80240f6:	2b00      	cmp	r3, #0
 80240f8:	d054      	beq.n	80241a4 <__multiply+0x116>
 80240fa:	6106      	str	r6, [r0, #16]
 80240fc:	b003      	add	sp, #12
 80240fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024102:	f843 2b04 	str.w	r2, [r3], #4
 8024106:	e7e3      	b.n	80240d0 <__multiply+0x42>
 8024108:	f8b3 a000 	ldrh.w	sl, [r3]
 802410c:	3204      	adds	r2, #4
 802410e:	f1ba 0f00 	cmp.w	sl, #0
 8024112:	d020      	beq.n	8024156 <__multiply+0xc8>
 8024114:	46ae      	mov	lr, r5
 8024116:	4689      	mov	r9, r1
 8024118:	f04f 0c00 	mov.w	ip, #0
 802411c:	f859 4b04 	ldr.w	r4, [r9], #4
 8024120:	f8be b000 	ldrh.w	fp, [lr]
 8024124:	b2a3      	uxth	r3, r4
 8024126:	fb0a b303 	mla	r3, sl, r3, fp
 802412a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 802412e:	f8de 4000 	ldr.w	r4, [lr]
 8024132:	4463      	add	r3, ip
 8024134:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8024138:	fb0a c40b 	mla	r4, sl, fp, ip
 802413c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8024140:	b29b      	uxth	r3, r3
 8024142:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8024146:	454f      	cmp	r7, r9
 8024148:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 802414c:	f84e 3b04 	str.w	r3, [lr], #4
 8024150:	d8e4      	bhi.n	802411c <__multiply+0x8e>
 8024152:	f8ce c000 	str.w	ip, [lr]
 8024156:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 802415a:	f1b9 0f00 	cmp.w	r9, #0
 802415e:	d01f      	beq.n	80241a0 <__multiply+0x112>
 8024160:	682b      	ldr	r3, [r5, #0]
 8024162:	46ae      	mov	lr, r5
 8024164:	468c      	mov	ip, r1
 8024166:	f04f 0a00 	mov.w	sl, #0
 802416a:	f8bc 4000 	ldrh.w	r4, [ip]
 802416e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8024172:	fb09 b404 	mla	r4, r9, r4, fp
 8024176:	44a2      	add	sl, r4
 8024178:	b29b      	uxth	r3, r3
 802417a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 802417e:	f84e 3b04 	str.w	r3, [lr], #4
 8024182:	f85c 3b04 	ldr.w	r3, [ip], #4
 8024186:	f8be 4000 	ldrh.w	r4, [lr]
 802418a:	0c1b      	lsrs	r3, r3, #16
 802418c:	fb09 4303 	mla	r3, r9, r3, r4
 8024190:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8024194:	4567      	cmp	r7, ip
 8024196:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 802419a:	d8e6      	bhi.n	802416a <__multiply+0xdc>
 802419c:	f8ce 3000 	str.w	r3, [lr]
 80241a0:	3504      	adds	r5, #4
 80241a2:	e7a0      	b.n	80240e6 <__multiply+0x58>
 80241a4:	3e01      	subs	r6, #1
 80241a6:	e7a2      	b.n	80240ee <__multiply+0x60>

080241a8 <__pow5mult>:
 80241a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80241ac:	4615      	mov	r5, r2
 80241ae:	f012 0203 	ands.w	r2, r2, #3
 80241b2:	4606      	mov	r6, r0
 80241b4:	460f      	mov	r7, r1
 80241b6:	d007      	beq.n	80241c8 <__pow5mult+0x20>
 80241b8:	3a01      	subs	r2, #1
 80241ba:	4c21      	ldr	r4, [pc, #132]	; (8024240 <__pow5mult+0x98>)
 80241bc:	2300      	movs	r3, #0
 80241be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80241c2:	f7ff fed2 	bl	8023f6a <__multadd>
 80241c6:	4607      	mov	r7, r0
 80241c8:	10ad      	asrs	r5, r5, #2
 80241ca:	d035      	beq.n	8024238 <__pow5mult+0x90>
 80241cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80241ce:	b93c      	cbnz	r4, 80241e0 <__pow5mult+0x38>
 80241d0:	2010      	movs	r0, #16
 80241d2:	f7ff fc5d 	bl	8023a90 <malloc>
 80241d6:	6270      	str	r0, [r6, #36]	; 0x24
 80241d8:	6044      	str	r4, [r0, #4]
 80241da:	6084      	str	r4, [r0, #8]
 80241dc:	6004      	str	r4, [r0, #0]
 80241de:	60c4      	str	r4, [r0, #12]
 80241e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80241e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80241e8:	b94c      	cbnz	r4, 80241fe <__pow5mult+0x56>
 80241ea:	f240 2171 	movw	r1, #625	; 0x271
 80241ee:	4630      	mov	r0, r6
 80241f0:	f7ff ff44 	bl	802407c <__i2b>
 80241f4:	2300      	movs	r3, #0
 80241f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80241fa:	4604      	mov	r4, r0
 80241fc:	6003      	str	r3, [r0, #0]
 80241fe:	f04f 0800 	mov.w	r8, #0
 8024202:	07eb      	lsls	r3, r5, #31
 8024204:	d50a      	bpl.n	802421c <__pow5mult+0x74>
 8024206:	4639      	mov	r1, r7
 8024208:	4622      	mov	r2, r4
 802420a:	4630      	mov	r0, r6
 802420c:	f7ff ff3f 	bl	802408e <__multiply>
 8024210:	4639      	mov	r1, r7
 8024212:	4681      	mov	r9, r0
 8024214:	4630      	mov	r0, r6
 8024216:	f7ff fe91 	bl	8023f3c <_Bfree>
 802421a:	464f      	mov	r7, r9
 802421c:	106d      	asrs	r5, r5, #1
 802421e:	d00b      	beq.n	8024238 <__pow5mult+0x90>
 8024220:	6820      	ldr	r0, [r4, #0]
 8024222:	b938      	cbnz	r0, 8024234 <__pow5mult+0x8c>
 8024224:	4622      	mov	r2, r4
 8024226:	4621      	mov	r1, r4
 8024228:	4630      	mov	r0, r6
 802422a:	f7ff ff30 	bl	802408e <__multiply>
 802422e:	6020      	str	r0, [r4, #0]
 8024230:	f8c0 8000 	str.w	r8, [r0]
 8024234:	4604      	mov	r4, r0
 8024236:	e7e4      	b.n	8024202 <__pow5mult+0x5a>
 8024238:	4638      	mov	r0, r7
 802423a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802423e:	bf00      	nop
 8024240:	08033aa0 	.word	0x08033aa0

08024244 <__lshift>:
 8024244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024248:	460c      	mov	r4, r1
 802424a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802424e:	6923      	ldr	r3, [r4, #16]
 8024250:	6849      	ldr	r1, [r1, #4]
 8024252:	eb0a 0903 	add.w	r9, sl, r3
 8024256:	68a3      	ldr	r3, [r4, #8]
 8024258:	4607      	mov	r7, r0
 802425a:	4616      	mov	r6, r2
 802425c:	f109 0501 	add.w	r5, r9, #1
 8024260:	42ab      	cmp	r3, r5
 8024262:	db31      	blt.n	80242c8 <__lshift+0x84>
 8024264:	4638      	mov	r0, r7
 8024266:	f7ff fe35 	bl	8023ed4 <_Balloc>
 802426a:	2200      	movs	r2, #0
 802426c:	4680      	mov	r8, r0
 802426e:	f100 0314 	add.w	r3, r0, #20
 8024272:	4611      	mov	r1, r2
 8024274:	4552      	cmp	r2, sl
 8024276:	db2a      	blt.n	80242ce <__lshift+0x8a>
 8024278:	6920      	ldr	r0, [r4, #16]
 802427a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802427e:	f104 0114 	add.w	r1, r4, #20
 8024282:	f016 021f 	ands.w	r2, r6, #31
 8024286:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 802428a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 802428e:	d022      	beq.n	80242d6 <__lshift+0x92>
 8024290:	f1c2 0c20 	rsb	ip, r2, #32
 8024294:	2000      	movs	r0, #0
 8024296:	680e      	ldr	r6, [r1, #0]
 8024298:	4096      	lsls	r6, r2
 802429a:	4330      	orrs	r0, r6
 802429c:	f843 0b04 	str.w	r0, [r3], #4
 80242a0:	f851 0b04 	ldr.w	r0, [r1], #4
 80242a4:	458e      	cmp	lr, r1
 80242a6:	fa20 f00c 	lsr.w	r0, r0, ip
 80242aa:	d8f4      	bhi.n	8024296 <__lshift+0x52>
 80242ac:	6018      	str	r0, [r3, #0]
 80242ae:	b108      	cbz	r0, 80242b4 <__lshift+0x70>
 80242b0:	f109 0502 	add.w	r5, r9, #2
 80242b4:	3d01      	subs	r5, #1
 80242b6:	4638      	mov	r0, r7
 80242b8:	f8c8 5010 	str.w	r5, [r8, #16]
 80242bc:	4621      	mov	r1, r4
 80242be:	f7ff fe3d 	bl	8023f3c <_Bfree>
 80242c2:	4640      	mov	r0, r8
 80242c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80242c8:	3101      	adds	r1, #1
 80242ca:	005b      	lsls	r3, r3, #1
 80242cc:	e7c8      	b.n	8024260 <__lshift+0x1c>
 80242ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80242d2:	3201      	adds	r2, #1
 80242d4:	e7ce      	b.n	8024274 <__lshift+0x30>
 80242d6:	3b04      	subs	r3, #4
 80242d8:	f851 2b04 	ldr.w	r2, [r1], #4
 80242dc:	f843 2f04 	str.w	r2, [r3, #4]!
 80242e0:	458e      	cmp	lr, r1
 80242e2:	d8f9      	bhi.n	80242d8 <__lshift+0x94>
 80242e4:	e7e6      	b.n	80242b4 <__lshift+0x70>

080242e6 <__mcmp>:
 80242e6:	6903      	ldr	r3, [r0, #16]
 80242e8:	690a      	ldr	r2, [r1, #16]
 80242ea:	1a9b      	subs	r3, r3, r2
 80242ec:	b530      	push	{r4, r5, lr}
 80242ee:	d10c      	bne.n	802430a <__mcmp+0x24>
 80242f0:	0092      	lsls	r2, r2, #2
 80242f2:	3014      	adds	r0, #20
 80242f4:	3114      	adds	r1, #20
 80242f6:	1884      	adds	r4, r0, r2
 80242f8:	4411      	add	r1, r2
 80242fa:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80242fe:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8024302:	4295      	cmp	r5, r2
 8024304:	d003      	beq.n	802430e <__mcmp+0x28>
 8024306:	d305      	bcc.n	8024314 <__mcmp+0x2e>
 8024308:	2301      	movs	r3, #1
 802430a:	4618      	mov	r0, r3
 802430c:	bd30      	pop	{r4, r5, pc}
 802430e:	42a0      	cmp	r0, r4
 8024310:	d3f3      	bcc.n	80242fa <__mcmp+0x14>
 8024312:	e7fa      	b.n	802430a <__mcmp+0x24>
 8024314:	f04f 33ff 	mov.w	r3, #4294967295
 8024318:	e7f7      	b.n	802430a <__mcmp+0x24>

0802431a <__mdiff>:
 802431a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802431e:	460d      	mov	r5, r1
 8024320:	4607      	mov	r7, r0
 8024322:	4611      	mov	r1, r2
 8024324:	4628      	mov	r0, r5
 8024326:	4614      	mov	r4, r2
 8024328:	f7ff ffdd 	bl	80242e6 <__mcmp>
 802432c:	1e06      	subs	r6, r0, #0
 802432e:	d108      	bne.n	8024342 <__mdiff+0x28>
 8024330:	4631      	mov	r1, r6
 8024332:	4638      	mov	r0, r7
 8024334:	f7ff fdce 	bl	8023ed4 <_Balloc>
 8024338:	2301      	movs	r3, #1
 802433a:	6103      	str	r3, [r0, #16]
 802433c:	6146      	str	r6, [r0, #20]
 802433e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024342:	bfa4      	itt	ge
 8024344:	4623      	movge	r3, r4
 8024346:	462c      	movge	r4, r5
 8024348:	4638      	mov	r0, r7
 802434a:	6861      	ldr	r1, [r4, #4]
 802434c:	bfa6      	itte	ge
 802434e:	461d      	movge	r5, r3
 8024350:	2600      	movge	r6, #0
 8024352:	2601      	movlt	r6, #1
 8024354:	f7ff fdbe 	bl	8023ed4 <_Balloc>
 8024358:	692b      	ldr	r3, [r5, #16]
 802435a:	60c6      	str	r6, [r0, #12]
 802435c:	6926      	ldr	r6, [r4, #16]
 802435e:	f105 0914 	add.w	r9, r5, #20
 8024362:	f104 0214 	add.w	r2, r4, #20
 8024366:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 802436a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 802436e:	f100 0514 	add.w	r5, r0, #20
 8024372:	f04f 0c00 	mov.w	ip, #0
 8024376:	f852 ab04 	ldr.w	sl, [r2], #4
 802437a:	f859 4b04 	ldr.w	r4, [r9], #4
 802437e:	fa1c f18a 	uxtah	r1, ip, sl
 8024382:	b2a3      	uxth	r3, r4
 8024384:	1ac9      	subs	r1, r1, r3
 8024386:	0c23      	lsrs	r3, r4, #16
 8024388:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 802438c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8024390:	b289      	uxth	r1, r1
 8024392:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8024396:	45c8      	cmp	r8, r9
 8024398:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 802439c:	4696      	mov	lr, r2
 802439e:	f845 3b04 	str.w	r3, [r5], #4
 80243a2:	d8e8      	bhi.n	8024376 <__mdiff+0x5c>
 80243a4:	45be      	cmp	lr, r7
 80243a6:	d305      	bcc.n	80243b4 <__mdiff+0x9a>
 80243a8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80243ac:	b18b      	cbz	r3, 80243d2 <__mdiff+0xb8>
 80243ae:	6106      	str	r6, [r0, #16]
 80243b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80243b4:	f85e 1b04 	ldr.w	r1, [lr], #4
 80243b8:	fa1c f381 	uxtah	r3, ip, r1
 80243bc:	141a      	asrs	r2, r3, #16
 80243be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80243c2:	b29b      	uxth	r3, r3
 80243c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80243c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80243cc:	f845 3b04 	str.w	r3, [r5], #4
 80243d0:	e7e8      	b.n	80243a4 <__mdiff+0x8a>
 80243d2:	3e01      	subs	r6, #1
 80243d4:	e7e8      	b.n	80243a8 <__mdiff+0x8e>

080243d6 <__d2b>:
 80243d6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80243da:	460e      	mov	r6, r1
 80243dc:	2101      	movs	r1, #1
 80243de:	ec59 8b10 	vmov	r8, r9, d0
 80243e2:	4615      	mov	r5, r2
 80243e4:	f7ff fd76 	bl	8023ed4 <_Balloc>
 80243e8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80243ec:	4607      	mov	r7, r0
 80243ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80243f2:	bb34      	cbnz	r4, 8024442 <__d2b+0x6c>
 80243f4:	9301      	str	r3, [sp, #4]
 80243f6:	f1b8 0f00 	cmp.w	r8, #0
 80243fa:	d027      	beq.n	802444c <__d2b+0x76>
 80243fc:	a802      	add	r0, sp, #8
 80243fe:	f840 8d08 	str.w	r8, [r0, #-8]!
 8024402:	f7ff fe0c 	bl	802401e <__lo0bits>
 8024406:	9900      	ldr	r1, [sp, #0]
 8024408:	b1f0      	cbz	r0, 8024448 <__d2b+0x72>
 802440a:	9a01      	ldr	r2, [sp, #4]
 802440c:	f1c0 0320 	rsb	r3, r0, #32
 8024410:	fa02 f303 	lsl.w	r3, r2, r3
 8024414:	430b      	orrs	r3, r1
 8024416:	40c2      	lsrs	r2, r0
 8024418:	617b      	str	r3, [r7, #20]
 802441a:	9201      	str	r2, [sp, #4]
 802441c:	9b01      	ldr	r3, [sp, #4]
 802441e:	61bb      	str	r3, [r7, #24]
 8024420:	2b00      	cmp	r3, #0
 8024422:	bf14      	ite	ne
 8024424:	2102      	movne	r1, #2
 8024426:	2101      	moveq	r1, #1
 8024428:	6139      	str	r1, [r7, #16]
 802442a:	b1c4      	cbz	r4, 802445e <__d2b+0x88>
 802442c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8024430:	4404      	add	r4, r0
 8024432:	6034      	str	r4, [r6, #0]
 8024434:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8024438:	6028      	str	r0, [r5, #0]
 802443a:	4638      	mov	r0, r7
 802443c:	b003      	add	sp, #12
 802443e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024442:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8024446:	e7d5      	b.n	80243f4 <__d2b+0x1e>
 8024448:	6179      	str	r1, [r7, #20]
 802444a:	e7e7      	b.n	802441c <__d2b+0x46>
 802444c:	a801      	add	r0, sp, #4
 802444e:	f7ff fde6 	bl	802401e <__lo0bits>
 8024452:	9b01      	ldr	r3, [sp, #4]
 8024454:	617b      	str	r3, [r7, #20]
 8024456:	2101      	movs	r1, #1
 8024458:	6139      	str	r1, [r7, #16]
 802445a:	3020      	adds	r0, #32
 802445c:	e7e5      	b.n	802442a <__d2b+0x54>
 802445e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8024462:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8024466:	6030      	str	r0, [r6, #0]
 8024468:	6918      	ldr	r0, [r3, #16]
 802446a:	f7ff fdb9 	bl	8023fe0 <__hi0bits>
 802446e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8024472:	e7e1      	b.n	8024438 <__d2b+0x62>

08024474 <_sbrk_r>:
 8024474:	b538      	push	{r3, r4, r5, lr}
 8024476:	4c06      	ldr	r4, [pc, #24]	; (8024490 <_sbrk_r+0x1c>)
 8024478:	2300      	movs	r3, #0
 802447a:	4605      	mov	r5, r0
 802447c:	4608      	mov	r0, r1
 802447e:	6023      	str	r3, [r4, #0]
 8024480:	f7fd f9b6 	bl	80217f0 <_sbrk>
 8024484:	1c43      	adds	r3, r0, #1
 8024486:	d102      	bne.n	802448e <_sbrk_r+0x1a>
 8024488:	6823      	ldr	r3, [r4, #0]
 802448a:	b103      	cbz	r3, 802448e <_sbrk_r+0x1a>
 802448c:	602b      	str	r3, [r5, #0]
 802448e:	bd38      	pop	{r3, r4, r5, pc}
 8024490:	20091e08 	.word	0x20091e08

08024494 <__ssprint_r>:
 8024494:	6893      	ldr	r3, [r2, #8]
 8024496:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802449a:	4681      	mov	r9, r0
 802449c:	460c      	mov	r4, r1
 802449e:	4617      	mov	r7, r2
 80244a0:	2b00      	cmp	r3, #0
 80244a2:	d060      	beq.n	8024566 <__ssprint_r+0xd2>
 80244a4:	f04f 0b00 	mov.w	fp, #0
 80244a8:	f8d2 a000 	ldr.w	sl, [r2]
 80244ac:	465e      	mov	r6, fp
 80244ae:	b356      	cbz	r6, 8024506 <__ssprint_r+0x72>
 80244b0:	68a3      	ldr	r3, [r4, #8]
 80244b2:	429e      	cmp	r6, r3
 80244b4:	d344      	bcc.n	8024540 <__ssprint_r+0xac>
 80244b6:	89a2      	ldrh	r2, [r4, #12]
 80244b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80244bc:	d03e      	beq.n	802453c <__ssprint_r+0xa8>
 80244be:	6825      	ldr	r5, [r4, #0]
 80244c0:	6921      	ldr	r1, [r4, #16]
 80244c2:	eba5 0801 	sub.w	r8, r5, r1
 80244c6:	6965      	ldr	r5, [r4, #20]
 80244c8:	2302      	movs	r3, #2
 80244ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80244ce:	fb95 f5f3 	sdiv	r5, r5, r3
 80244d2:	f108 0301 	add.w	r3, r8, #1
 80244d6:	4433      	add	r3, r6
 80244d8:	429d      	cmp	r5, r3
 80244da:	bf38      	it	cc
 80244dc:	461d      	movcc	r5, r3
 80244de:	0553      	lsls	r3, r2, #21
 80244e0:	d546      	bpl.n	8024570 <__ssprint_r+0xdc>
 80244e2:	4629      	mov	r1, r5
 80244e4:	4648      	mov	r0, r9
 80244e6:	f7ff fadb 	bl	8023aa0 <_malloc_r>
 80244ea:	b998      	cbnz	r0, 8024514 <__ssprint_r+0x80>
 80244ec:	230c      	movs	r3, #12
 80244ee:	f8c9 3000 	str.w	r3, [r9]
 80244f2:	89a3      	ldrh	r3, [r4, #12]
 80244f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80244f8:	81a3      	strh	r3, [r4, #12]
 80244fa:	2300      	movs	r3, #0
 80244fc:	60bb      	str	r3, [r7, #8]
 80244fe:	607b      	str	r3, [r7, #4]
 8024500:	f04f 30ff 	mov.w	r0, #4294967295
 8024504:	e031      	b.n	802456a <__ssprint_r+0xd6>
 8024506:	f8da b000 	ldr.w	fp, [sl]
 802450a:	f8da 6004 	ldr.w	r6, [sl, #4]
 802450e:	f10a 0a08 	add.w	sl, sl, #8
 8024512:	e7cc      	b.n	80244ae <__ssprint_r+0x1a>
 8024514:	4642      	mov	r2, r8
 8024516:	6921      	ldr	r1, [r4, #16]
 8024518:	9001      	str	r0, [sp, #4]
 802451a:	f7fd fc2d 	bl	8021d78 <memcpy>
 802451e:	89a2      	ldrh	r2, [r4, #12]
 8024520:	9b01      	ldr	r3, [sp, #4]
 8024522:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8024526:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 802452a:	81a2      	strh	r2, [r4, #12]
 802452c:	6123      	str	r3, [r4, #16]
 802452e:	6165      	str	r5, [r4, #20]
 8024530:	4443      	add	r3, r8
 8024532:	eba5 0508 	sub.w	r5, r5, r8
 8024536:	6023      	str	r3, [r4, #0]
 8024538:	60a5      	str	r5, [r4, #8]
 802453a:	4633      	mov	r3, r6
 802453c:	429e      	cmp	r6, r3
 802453e:	d200      	bcs.n	8024542 <__ssprint_r+0xae>
 8024540:	4633      	mov	r3, r6
 8024542:	461a      	mov	r2, r3
 8024544:	4659      	mov	r1, fp
 8024546:	6820      	ldr	r0, [r4, #0]
 8024548:	9301      	str	r3, [sp, #4]
 802454a:	f000 f971 	bl	8024830 <memmove>
 802454e:	68a2      	ldr	r2, [r4, #8]
 8024550:	9b01      	ldr	r3, [sp, #4]
 8024552:	1ad2      	subs	r2, r2, r3
 8024554:	60a2      	str	r2, [r4, #8]
 8024556:	6822      	ldr	r2, [r4, #0]
 8024558:	4413      	add	r3, r2
 802455a:	6023      	str	r3, [r4, #0]
 802455c:	68bb      	ldr	r3, [r7, #8]
 802455e:	1b9e      	subs	r6, r3, r6
 8024560:	60be      	str	r6, [r7, #8]
 8024562:	2e00      	cmp	r6, #0
 8024564:	d1cf      	bne.n	8024506 <__ssprint_r+0x72>
 8024566:	2000      	movs	r0, #0
 8024568:	6078      	str	r0, [r7, #4]
 802456a:	b003      	add	sp, #12
 802456c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024570:	462a      	mov	r2, r5
 8024572:	4648      	mov	r0, r9
 8024574:	f000 f976 	bl	8024864 <_realloc_r>
 8024578:	4603      	mov	r3, r0
 802457a:	2800      	cmp	r0, #0
 802457c:	d1d6      	bne.n	802452c <__ssprint_r+0x98>
 802457e:	6921      	ldr	r1, [r4, #16]
 8024580:	4648      	mov	r0, r9
 8024582:	f000 f885 	bl	8024690 <_free_r>
 8024586:	e7b1      	b.n	80244ec <__ssprint_r+0x58>

08024588 <_calloc_r>:
 8024588:	b510      	push	{r4, lr}
 802458a:	4351      	muls	r1, r2
 802458c:	f7ff fa88 	bl	8023aa0 <_malloc_r>
 8024590:	4604      	mov	r4, r0
 8024592:	b198      	cbz	r0, 80245bc <_calloc_r+0x34>
 8024594:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8024598:	f022 0203 	bic.w	r2, r2, #3
 802459c:	3a04      	subs	r2, #4
 802459e:	2a24      	cmp	r2, #36	; 0x24
 80245a0:	d81b      	bhi.n	80245da <_calloc_r+0x52>
 80245a2:	2a13      	cmp	r2, #19
 80245a4:	d917      	bls.n	80245d6 <_calloc_r+0x4e>
 80245a6:	2100      	movs	r1, #0
 80245a8:	2a1b      	cmp	r2, #27
 80245aa:	6001      	str	r1, [r0, #0]
 80245ac:	6041      	str	r1, [r0, #4]
 80245ae:	d807      	bhi.n	80245c0 <_calloc_r+0x38>
 80245b0:	f100 0308 	add.w	r3, r0, #8
 80245b4:	2200      	movs	r2, #0
 80245b6:	601a      	str	r2, [r3, #0]
 80245b8:	605a      	str	r2, [r3, #4]
 80245ba:	609a      	str	r2, [r3, #8]
 80245bc:	4620      	mov	r0, r4
 80245be:	bd10      	pop	{r4, pc}
 80245c0:	2a24      	cmp	r2, #36	; 0x24
 80245c2:	6081      	str	r1, [r0, #8]
 80245c4:	60c1      	str	r1, [r0, #12]
 80245c6:	bf11      	iteee	ne
 80245c8:	f100 0310 	addne.w	r3, r0, #16
 80245cc:	6101      	streq	r1, [r0, #16]
 80245ce:	f100 0318 	addeq.w	r3, r0, #24
 80245d2:	6141      	streq	r1, [r0, #20]
 80245d4:	e7ee      	b.n	80245b4 <_calloc_r+0x2c>
 80245d6:	4603      	mov	r3, r0
 80245d8:	e7ec      	b.n	80245b4 <_calloc_r+0x2c>
 80245da:	2100      	movs	r1, #0
 80245dc:	f7fd fbd7 	bl	8021d8e <memset>
 80245e0:	e7ec      	b.n	80245bc <_calloc_r+0x34>
	...

080245e4 <_malloc_trim_r>:
 80245e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80245e8:	4f25      	ldr	r7, [pc, #148]	; (8024680 <_malloc_trim_r+0x9c>)
 80245ea:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 802468c <_malloc_trim_r+0xa8>
 80245ee:	4689      	mov	r9, r1
 80245f0:	4606      	mov	r6, r0
 80245f2:	f7ff fc63 	bl	8023ebc <__malloc_lock>
 80245f6:	68bb      	ldr	r3, [r7, #8]
 80245f8:	685d      	ldr	r5, [r3, #4]
 80245fa:	f1a8 0411 	sub.w	r4, r8, #17
 80245fe:	f025 0503 	bic.w	r5, r5, #3
 8024602:	eba4 0409 	sub.w	r4, r4, r9
 8024606:	442c      	add	r4, r5
 8024608:	fbb4 f4f8 	udiv	r4, r4, r8
 802460c:	3c01      	subs	r4, #1
 802460e:	fb08 f404 	mul.w	r4, r8, r4
 8024612:	4544      	cmp	r4, r8
 8024614:	da05      	bge.n	8024622 <_malloc_trim_r+0x3e>
 8024616:	4630      	mov	r0, r6
 8024618:	f7ff fc56 	bl	8023ec8 <__malloc_unlock>
 802461c:	2000      	movs	r0, #0
 802461e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024622:	2100      	movs	r1, #0
 8024624:	4630      	mov	r0, r6
 8024626:	f7ff ff25 	bl	8024474 <_sbrk_r>
 802462a:	68bb      	ldr	r3, [r7, #8]
 802462c:	442b      	add	r3, r5
 802462e:	4298      	cmp	r0, r3
 8024630:	d1f1      	bne.n	8024616 <_malloc_trim_r+0x32>
 8024632:	4261      	negs	r1, r4
 8024634:	4630      	mov	r0, r6
 8024636:	f7ff ff1d 	bl	8024474 <_sbrk_r>
 802463a:	3001      	adds	r0, #1
 802463c:	d110      	bne.n	8024660 <_malloc_trim_r+0x7c>
 802463e:	2100      	movs	r1, #0
 8024640:	4630      	mov	r0, r6
 8024642:	f7ff ff17 	bl	8024474 <_sbrk_r>
 8024646:	68ba      	ldr	r2, [r7, #8]
 8024648:	1a83      	subs	r3, r0, r2
 802464a:	2b0f      	cmp	r3, #15
 802464c:	dde3      	ble.n	8024616 <_malloc_trim_r+0x32>
 802464e:	490d      	ldr	r1, [pc, #52]	; (8024684 <_malloc_trim_r+0xa0>)
 8024650:	6809      	ldr	r1, [r1, #0]
 8024652:	1a40      	subs	r0, r0, r1
 8024654:	490c      	ldr	r1, [pc, #48]	; (8024688 <_malloc_trim_r+0xa4>)
 8024656:	f043 0301 	orr.w	r3, r3, #1
 802465a:	6008      	str	r0, [r1, #0]
 802465c:	6053      	str	r3, [r2, #4]
 802465e:	e7da      	b.n	8024616 <_malloc_trim_r+0x32>
 8024660:	68bb      	ldr	r3, [r7, #8]
 8024662:	4a09      	ldr	r2, [pc, #36]	; (8024688 <_malloc_trim_r+0xa4>)
 8024664:	1b2d      	subs	r5, r5, r4
 8024666:	f045 0501 	orr.w	r5, r5, #1
 802466a:	605d      	str	r5, [r3, #4]
 802466c:	6813      	ldr	r3, [r2, #0]
 802466e:	4630      	mov	r0, r6
 8024670:	1b1c      	subs	r4, r3, r4
 8024672:	6014      	str	r4, [r2, #0]
 8024674:	f7ff fc28 	bl	8023ec8 <__malloc_unlock>
 8024678:	2001      	movs	r0, #1
 802467a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802467e:	bf00      	nop
 8024680:	20000bc0 	.word	0x20000bc0
 8024684:	20000fc8 	.word	0x20000fc8
 8024688:	2008bea0 	.word	0x2008bea0
 802468c:	00000080 	.word	0x00000080

08024690 <_free_r>:
 8024690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024694:	4604      	mov	r4, r0
 8024696:	4688      	mov	r8, r1
 8024698:	2900      	cmp	r1, #0
 802469a:	f000 80ab 	beq.w	80247f4 <_free_r+0x164>
 802469e:	f7ff fc0d 	bl	8023ebc <__malloc_lock>
 80246a2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80246a6:	4d54      	ldr	r5, [pc, #336]	; (80247f8 <_free_r+0x168>)
 80246a8:	f022 0001 	bic.w	r0, r2, #1
 80246ac:	f1a8 0308 	sub.w	r3, r8, #8
 80246b0:	181f      	adds	r7, r3, r0
 80246b2:	68a9      	ldr	r1, [r5, #8]
 80246b4:	687e      	ldr	r6, [r7, #4]
 80246b6:	428f      	cmp	r7, r1
 80246b8:	f026 0603 	bic.w	r6, r6, #3
 80246bc:	f002 0201 	and.w	r2, r2, #1
 80246c0:	d11b      	bne.n	80246fa <_free_r+0x6a>
 80246c2:	4430      	add	r0, r6
 80246c4:	b93a      	cbnz	r2, 80246d6 <_free_r+0x46>
 80246c6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80246ca:	1a9b      	subs	r3, r3, r2
 80246cc:	4410      	add	r0, r2
 80246ce:	6899      	ldr	r1, [r3, #8]
 80246d0:	68da      	ldr	r2, [r3, #12]
 80246d2:	60ca      	str	r2, [r1, #12]
 80246d4:	6091      	str	r1, [r2, #8]
 80246d6:	f040 0201 	orr.w	r2, r0, #1
 80246da:	605a      	str	r2, [r3, #4]
 80246dc:	60ab      	str	r3, [r5, #8]
 80246de:	4b47      	ldr	r3, [pc, #284]	; (80247fc <_free_r+0x16c>)
 80246e0:	681b      	ldr	r3, [r3, #0]
 80246e2:	4298      	cmp	r0, r3
 80246e4:	d304      	bcc.n	80246f0 <_free_r+0x60>
 80246e6:	4b46      	ldr	r3, [pc, #280]	; (8024800 <_free_r+0x170>)
 80246e8:	4620      	mov	r0, r4
 80246ea:	6819      	ldr	r1, [r3, #0]
 80246ec:	f7ff ff7a 	bl	80245e4 <_malloc_trim_r>
 80246f0:	4620      	mov	r0, r4
 80246f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80246f6:	f7ff bbe7 	b.w	8023ec8 <__malloc_unlock>
 80246fa:	607e      	str	r6, [r7, #4]
 80246fc:	2a00      	cmp	r2, #0
 80246fe:	d139      	bne.n	8024774 <_free_r+0xe4>
 8024700:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8024704:	1a5b      	subs	r3, r3, r1
 8024706:	4408      	add	r0, r1
 8024708:	6899      	ldr	r1, [r3, #8]
 802470a:	f105 0e08 	add.w	lr, r5, #8
 802470e:	4571      	cmp	r1, lr
 8024710:	d032      	beq.n	8024778 <_free_r+0xe8>
 8024712:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8024716:	f8c1 e00c 	str.w	lr, [r1, #12]
 802471a:	f8ce 1008 	str.w	r1, [lr, #8]
 802471e:	19b9      	adds	r1, r7, r6
 8024720:	6849      	ldr	r1, [r1, #4]
 8024722:	07c9      	lsls	r1, r1, #31
 8024724:	d40a      	bmi.n	802473c <_free_r+0xac>
 8024726:	4430      	add	r0, r6
 8024728:	68b9      	ldr	r1, [r7, #8]
 802472a:	bb3a      	cbnz	r2, 802477c <_free_r+0xec>
 802472c:	4e35      	ldr	r6, [pc, #212]	; (8024804 <_free_r+0x174>)
 802472e:	42b1      	cmp	r1, r6
 8024730:	d124      	bne.n	802477c <_free_r+0xec>
 8024732:	616b      	str	r3, [r5, #20]
 8024734:	612b      	str	r3, [r5, #16]
 8024736:	2201      	movs	r2, #1
 8024738:	60d9      	str	r1, [r3, #12]
 802473a:	6099      	str	r1, [r3, #8]
 802473c:	f040 0101 	orr.w	r1, r0, #1
 8024740:	6059      	str	r1, [r3, #4]
 8024742:	5018      	str	r0, [r3, r0]
 8024744:	2a00      	cmp	r2, #0
 8024746:	d1d3      	bne.n	80246f0 <_free_r+0x60>
 8024748:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 802474c:	d21a      	bcs.n	8024784 <_free_r+0xf4>
 802474e:	08c0      	lsrs	r0, r0, #3
 8024750:	1081      	asrs	r1, r0, #2
 8024752:	2201      	movs	r2, #1
 8024754:	408a      	lsls	r2, r1
 8024756:	6869      	ldr	r1, [r5, #4]
 8024758:	3001      	adds	r0, #1
 802475a:	430a      	orrs	r2, r1
 802475c:	606a      	str	r2, [r5, #4]
 802475e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8024762:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8024766:	6099      	str	r1, [r3, #8]
 8024768:	3a08      	subs	r2, #8
 802476a:	60da      	str	r2, [r3, #12]
 802476c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8024770:	60cb      	str	r3, [r1, #12]
 8024772:	e7bd      	b.n	80246f0 <_free_r+0x60>
 8024774:	2200      	movs	r2, #0
 8024776:	e7d2      	b.n	802471e <_free_r+0x8e>
 8024778:	2201      	movs	r2, #1
 802477a:	e7d0      	b.n	802471e <_free_r+0x8e>
 802477c:	68fe      	ldr	r6, [r7, #12]
 802477e:	60ce      	str	r6, [r1, #12]
 8024780:	60b1      	str	r1, [r6, #8]
 8024782:	e7db      	b.n	802473c <_free_r+0xac>
 8024784:	0a42      	lsrs	r2, r0, #9
 8024786:	2a04      	cmp	r2, #4
 8024788:	d813      	bhi.n	80247b2 <_free_r+0x122>
 802478a:	0982      	lsrs	r2, r0, #6
 802478c:	3238      	adds	r2, #56	; 0x38
 802478e:	1c51      	adds	r1, r2, #1
 8024790:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8024794:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8024798:	428e      	cmp	r6, r1
 802479a:	d124      	bne.n	80247e6 <_free_r+0x156>
 802479c:	2001      	movs	r0, #1
 802479e:	1092      	asrs	r2, r2, #2
 80247a0:	fa00 f202 	lsl.w	r2, r0, r2
 80247a4:	6868      	ldr	r0, [r5, #4]
 80247a6:	4302      	orrs	r2, r0
 80247a8:	606a      	str	r2, [r5, #4]
 80247aa:	60de      	str	r6, [r3, #12]
 80247ac:	6099      	str	r1, [r3, #8]
 80247ae:	60b3      	str	r3, [r6, #8]
 80247b0:	e7de      	b.n	8024770 <_free_r+0xe0>
 80247b2:	2a14      	cmp	r2, #20
 80247b4:	d801      	bhi.n	80247ba <_free_r+0x12a>
 80247b6:	325b      	adds	r2, #91	; 0x5b
 80247b8:	e7e9      	b.n	802478e <_free_r+0xfe>
 80247ba:	2a54      	cmp	r2, #84	; 0x54
 80247bc:	d802      	bhi.n	80247c4 <_free_r+0x134>
 80247be:	0b02      	lsrs	r2, r0, #12
 80247c0:	326e      	adds	r2, #110	; 0x6e
 80247c2:	e7e4      	b.n	802478e <_free_r+0xfe>
 80247c4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80247c8:	d802      	bhi.n	80247d0 <_free_r+0x140>
 80247ca:	0bc2      	lsrs	r2, r0, #15
 80247cc:	3277      	adds	r2, #119	; 0x77
 80247ce:	e7de      	b.n	802478e <_free_r+0xfe>
 80247d0:	f240 5154 	movw	r1, #1364	; 0x554
 80247d4:	428a      	cmp	r2, r1
 80247d6:	bf9a      	itte	ls
 80247d8:	0c82      	lsrls	r2, r0, #18
 80247da:	327c      	addls	r2, #124	; 0x7c
 80247dc:	227e      	movhi	r2, #126	; 0x7e
 80247de:	e7d6      	b.n	802478e <_free_r+0xfe>
 80247e0:	6889      	ldr	r1, [r1, #8]
 80247e2:	428e      	cmp	r6, r1
 80247e4:	d004      	beq.n	80247f0 <_free_r+0x160>
 80247e6:	684a      	ldr	r2, [r1, #4]
 80247e8:	f022 0203 	bic.w	r2, r2, #3
 80247ec:	4290      	cmp	r0, r2
 80247ee:	d3f7      	bcc.n	80247e0 <_free_r+0x150>
 80247f0:	68ce      	ldr	r6, [r1, #12]
 80247f2:	e7da      	b.n	80247aa <_free_r+0x11a>
 80247f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80247f8:	20000bc0 	.word	0x20000bc0
 80247fc:	20000fcc 	.word	0x20000fcc
 8024800:	2008bed0 	.word	0x2008bed0
 8024804:	20000bc8 	.word	0x20000bc8

08024808 <__retarget_lock_acquire_recursive>:
 8024808:	4770      	bx	lr

0802480a <__retarget_lock_release_recursive>:
 802480a:	4770      	bx	lr

0802480c <__ascii_mbtowc>:
 802480c:	b082      	sub	sp, #8
 802480e:	b901      	cbnz	r1, 8024812 <__ascii_mbtowc+0x6>
 8024810:	a901      	add	r1, sp, #4
 8024812:	b142      	cbz	r2, 8024826 <__ascii_mbtowc+0x1a>
 8024814:	b14b      	cbz	r3, 802482a <__ascii_mbtowc+0x1e>
 8024816:	7813      	ldrb	r3, [r2, #0]
 8024818:	600b      	str	r3, [r1, #0]
 802481a:	7812      	ldrb	r2, [r2, #0]
 802481c:	1c10      	adds	r0, r2, #0
 802481e:	bf18      	it	ne
 8024820:	2001      	movne	r0, #1
 8024822:	b002      	add	sp, #8
 8024824:	4770      	bx	lr
 8024826:	4610      	mov	r0, r2
 8024828:	e7fb      	b.n	8024822 <__ascii_mbtowc+0x16>
 802482a:	f06f 0001 	mvn.w	r0, #1
 802482e:	e7f8      	b.n	8024822 <__ascii_mbtowc+0x16>

08024830 <memmove>:
 8024830:	4288      	cmp	r0, r1
 8024832:	b510      	push	{r4, lr}
 8024834:	eb01 0302 	add.w	r3, r1, r2
 8024838:	d803      	bhi.n	8024842 <memmove+0x12>
 802483a:	1e42      	subs	r2, r0, #1
 802483c:	4299      	cmp	r1, r3
 802483e:	d10c      	bne.n	802485a <memmove+0x2a>
 8024840:	bd10      	pop	{r4, pc}
 8024842:	4298      	cmp	r0, r3
 8024844:	d2f9      	bcs.n	802483a <memmove+0xa>
 8024846:	1881      	adds	r1, r0, r2
 8024848:	1ad2      	subs	r2, r2, r3
 802484a:	42d3      	cmn	r3, r2
 802484c:	d100      	bne.n	8024850 <memmove+0x20>
 802484e:	bd10      	pop	{r4, pc}
 8024850:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8024854:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8024858:	e7f7      	b.n	802484a <memmove+0x1a>
 802485a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802485e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8024862:	e7eb      	b.n	802483c <memmove+0xc>

08024864 <_realloc_r>:
 8024864:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024868:	4682      	mov	sl, r0
 802486a:	460c      	mov	r4, r1
 802486c:	b929      	cbnz	r1, 802487a <_realloc_r+0x16>
 802486e:	4611      	mov	r1, r2
 8024870:	b003      	add	sp, #12
 8024872:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024876:	f7ff b913 	b.w	8023aa0 <_malloc_r>
 802487a:	9201      	str	r2, [sp, #4]
 802487c:	f7ff fb1e 	bl	8023ebc <__malloc_lock>
 8024880:	9a01      	ldr	r2, [sp, #4]
 8024882:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8024886:	f102 080b 	add.w	r8, r2, #11
 802488a:	f1b8 0f16 	cmp.w	r8, #22
 802488e:	f1a4 0908 	sub.w	r9, r4, #8
 8024892:	f025 0603 	bic.w	r6, r5, #3
 8024896:	d90a      	bls.n	80248ae <_realloc_r+0x4a>
 8024898:	f038 0807 	bics.w	r8, r8, #7
 802489c:	d509      	bpl.n	80248b2 <_realloc_r+0x4e>
 802489e:	230c      	movs	r3, #12
 80248a0:	f8ca 3000 	str.w	r3, [sl]
 80248a4:	2700      	movs	r7, #0
 80248a6:	4638      	mov	r0, r7
 80248a8:	b003      	add	sp, #12
 80248aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248ae:	f04f 0810 	mov.w	r8, #16
 80248b2:	4590      	cmp	r8, r2
 80248b4:	d3f3      	bcc.n	802489e <_realloc_r+0x3a>
 80248b6:	45b0      	cmp	r8, r6
 80248b8:	f340 8145 	ble.w	8024b46 <_realloc_r+0x2e2>
 80248bc:	4ba8      	ldr	r3, [pc, #672]	; (8024b60 <_realloc_r+0x2fc>)
 80248be:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80248c2:	eb09 0106 	add.w	r1, r9, r6
 80248c6:	4571      	cmp	r1, lr
 80248c8:	469b      	mov	fp, r3
 80248ca:	684b      	ldr	r3, [r1, #4]
 80248cc:	d005      	beq.n	80248da <_realloc_r+0x76>
 80248ce:	f023 0001 	bic.w	r0, r3, #1
 80248d2:	4408      	add	r0, r1
 80248d4:	6840      	ldr	r0, [r0, #4]
 80248d6:	07c7      	lsls	r7, r0, #31
 80248d8:	d447      	bmi.n	802496a <_realloc_r+0x106>
 80248da:	f023 0303 	bic.w	r3, r3, #3
 80248de:	4571      	cmp	r1, lr
 80248e0:	eb06 0703 	add.w	r7, r6, r3
 80248e4:	d119      	bne.n	802491a <_realloc_r+0xb6>
 80248e6:	f108 0010 	add.w	r0, r8, #16
 80248ea:	4287      	cmp	r7, r0
 80248ec:	db3f      	blt.n	802496e <_realloc_r+0x10a>
 80248ee:	eb09 0308 	add.w	r3, r9, r8
 80248f2:	eba7 0708 	sub.w	r7, r7, r8
 80248f6:	f047 0701 	orr.w	r7, r7, #1
 80248fa:	f8cb 3008 	str.w	r3, [fp, #8]
 80248fe:	605f      	str	r7, [r3, #4]
 8024900:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8024904:	f003 0301 	and.w	r3, r3, #1
 8024908:	ea43 0308 	orr.w	r3, r3, r8
 802490c:	f844 3c04 	str.w	r3, [r4, #-4]
 8024910:	4650      	mov	r0, sl
 8024912:	f7ff fad9 	bl	8023ec8 <__malloc_unlock>
 8024916:	4627      	mov	r7, r4
 8024918:	e7c5      	b.n	80248a6 <_realloc_r+0x42>
 802491a:	45b8      	cmp	r8, r7
 802491c:	dc27      	bgt.n	802496e <_realloc_r+0x10a>
 802491e:	68cb      	ldr	r3, [r1, #12]
 8024920:	688a      	ldr	r2, [r1, #8]
 8024922:	60d3      	str	r3, [r2, #12]
 8024924:	609a      	str	r2, [r3, #8]
 8024926:	eba7 0008 	sub.w	r0, r7, r8
 802492a:	280f      	cmp	r0, #15
 802492c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8024930:	eb09 0207 	add.w	r2, r9, r7
 8024934:	f240 8109 	bls.w	8024b4a <_realloc_r+0x2e6>
 8024938:	eb09 0108 	add.w	r1, r9, r8
 802493c:	f003 0301 	and.w	r3, r3, #1
 8024940:	ea43 0308 	orr.w	r3, r3, r8
 8024944:	f040 0001 	orr.w	r0, r0, #1
 8024948:	f8c9 3004 	str.w	r3, [r9, #4]
 802494c:	6048      	str	r0, [r1, #4]
 802494e:	6853      	ldr	r3, [r2, #4]
 8024950:	f043 0301 	orr.w	r3, r3, #1
 8024954:	6053      	str	r3, [r2, #4]
 8024956:	3108      	adds	r1, #8
 8024958:	4650      	mov	r0, sl
 802495a:	f7ff fe99 	bl	8024690 <_free_r>
 802495e:	4650      	mov	r0, sl
 8024960:	f7ff fab2 	bl	8023ec8 <__malloc_unlock>
 8024964:	f109 0708 	add.w	r7, r9, #8
 8024968:	e79d      	b.n	80248a6 <_realloc_r+0x42>
 802496a:	2300      	movs	r3, #0
 802496c:	4619      	mov	r1, r3
 802496e:	07e8      	lsls	r0, r5, #31
 8024970:	f100 8084 	bmi.w	8024a7c <_realloc_r+0x218>
 8024974:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8024978:	eba9 0505 	sub.w	r5, r9, r5
 802497c:	6868      	ldr	r0, [r5, #4]
 802497e:	f020 0003 	bic.w	r0, r0, #3
 8024982:	4430      	add	r0, r6
 8024984:	2900      	cmp	r1, #0
 8024986:	d076      	beq.n	8024a76 <_realloc_r+0x212>
 8024988:	4571      	cmp	r1, lr
 802498a:	d150      	bne.n	8024a2e <_realloc_r+0x1ca>
 802498c:	4403      	add	r3, r0
 802498e:	f108 0110 	add.w	r1, r8, #16
 8024992:	428b      	cmp	r3, r1
 8024994:	db6f      	blt.n	8024a76 <_realloc_r+0x212>
 8024996:	462f      	mov	r7, r5
 8024998:	68ea      	ldr	r2, [r5, #12]
 802499a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 802499e:	60ca      	str	r2, [r1, #12]
 80249a0:	6091      	str	r1, [r2, #8]
 80249a2:	1f32      	subs	r2, r6, #4
 80249a4:	2a24      	cmp	r2, #36	; 0x24
 80249a6:	d83b      	bhi.n	8024a20 <_realloc_r+0x1bc>
 80249a8:	2a13      	cmp	r2, #19
 80249aa:	d936      	bls.n	8024a1a <_realloc_r+0x1b6>
 80249ac:	6821      	ldr	r1, [r4, #0]
 80249ae:	60a9      	str	r1, [r5, #8]
 80249b0:	6861      	ldr	r1, [r4, #4]
 80249b2:	60e9      	str	r1, [r5, #12]
 80249b4:	2a1b      	cmp	r2, #27
 80249b6:	d81c      	bhi.n	80249f2 <_realloc_r+0x18e>
 80249b8:	f105 0210 	add.w	r2, r5, #16
 80249bc:	f104 0108 	add.w	r1, r4, #8
 80249c0:	6808      	ldr	r0, [r1, #0]
 80249c2:	6010      	str	r0, [r2, #0]
 80249c4:	6848      	ldr	r0, [r1, #4]
 80249c6:	6050      	str	r0, [r2, #4]
 80249c8:	6889      	ldr	r1, [r1, #8]
 80249ca:	6091      	str	r1, [r2, #8]
 80249cc:	eb05 0208 	add.w	r2, r5, r8
 80249d0:	eba3 0308 	sub.w	r3, r3, r8
 80249d4:	f043 0301 	orr.w	r3, r3, #1
 80249d8:	f8cb 2008 	str.w	r2, [fp, #8]
 80249dc:	6053      	str	r3, [r2, #4]
 80249de:	686b      	ldr	r3, [r5, #4]
 80249e0:	f003 0301 	and.w	r3, r3, #1
 80249e4:	ea43 0308 	orr.w	r3, r3, r8
 80249e8:	606b      	str	r3, [r5, #4]
 80249ea:	4650      	mov	r0, sl
 80249ec:	f7ff fa6c 	bl	8023ec8 <__malloc_unlock>
 80249f0:	e759      	b.n	80248a6 <_realloc_r+0x42>
 80249f2:	68a1      	ldr	r1, [r4, #8]
 80249f4:	6129      	str	r1, [r5, #16]
 80249f6:	68e1      	ldr	r1, [r4, #12]
 80249f8:	6169      	str	r1, [r5, #20]
 80249fa:	2a24      	cmp	r2, #36	; 0x24
 80249fc:	bf01      	itttt	eq
 80249fe:	6922      	ldreq	r2, [r4, #16]
 8024a00:	61aa      	streq	r2, [r5, #24]
 8024a02:	6960      	ldreq	r0, [r4, #20]
 8024a04:	61e8      	streq	r0, [r5, #28]
 8024a06:	bf19      	ittee	ne
 8024a08:	f105 0218 	addne.w	r2, r5, #24
 8024a0c:	f104 0110 	addne.w	r1, r4, #16
 8024a10:	f105 0220 	addeq.w	r2, r5, #32
 8024a14:	f104 0118 	addeq.w	r1, r4, #24
 8024a18:	e7d2      	b.n	80249c0 <_realloc_r+0x15c>
 8024a1a:	463a      	mov	r2, r7
 8024a1c:	4621      	mov	r1, r4
 8024a1e:	e7cf      	b.n	80249c0 <_realloc_r+0x15c>
 8024a20:	4621      	mov	r1, r4
 8024a22:	4638      	mov	r0, r7
 8024a24:	9301      	str	r3, [sp, #4]
 8024a26:	f7ff ff03 	bl	8024830 <memmove>
 8024a2a:	9b01      	ldr	r3, [sp, #4]
 8024a2c:	e7ce      	b.n	80249cc <_realloc_r+0x168>
 8024a2e:	18c7      	adds	r7, r0, r3
 8024a30:	45b8      	cmp	r8, r7
 8024a32:	dc20      	bgt.n	8024a76 <_realloc_r+0x212>
 8024a34:	68cb      	ldr	r3, [r1, #12]
 8024a36:	688a      	ldr	r2, [r1, #8]
 8024a38:	60d3      	str	r3, [r2, #12]
 8024a3a:	609a      	str	r2, [r3, #8]
 8024a3c:	4628      	mov	r0, r5
 8024a3e:	68eb      	ldr	r3, [r5, #12]
 8024a40:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8024a44:	60d3      	str	r3, [r2, #12]
 8024a46:	609a      	str	r2, [r3, #8]
 8024a48:	1f32      	subs	r2, r6, #4
 8024a4a:	2a24      	cmp	r2, #36	; 0x24
 8024a4c:	d842      	bhi.n	8024ad4 <_realloc_r+0x270>
 8024a4e:	2a13      	cmp	r2, #19
 8024a50:	d93e      	bls.n	8024ad0 <_realloc_r+0x26c>
 8024a52:	6823      	ldr	r3, [r4, #0]
 8024a54:	60ab      	str	r3, [r5, #8]
 8024a56:	6863      	ldr	r3, [r4, #4]
 8024a58:	60eb      	str	r3, [r5, #12]
 8024a5a:	2a1b      	cmp	r2, #27
 8024a5c:	d824      	bhi.n	8024aa8 <_realloc_r+0x244>
 8024a5e:	f105 0010 	add.w	r0, r5, #16
 8024a62:	f104 0308 	add.w	r3, r4, #8
 8024a66:	681a      	ldr	r2, [r3, #0]
 8024a68:	6002      	str	r2, [r0, #0]
 8024a6a:	685a      	ldr	r2, [r3, #4]
 8024a6c:	6042      	str	r2, [r0, #4]
 8024a6e:	689b      	ldr	r3, [r3, #8]
 8024a70:	6083      	str	r3, [r0, #8]
 8024a72:	46a9      	mov	r9, r5
 8024a74:	e757      	b.n	8024926 <_realloc_r+0xc2>
 8024a76:	4580      	cmp	r8, r0
 8024a78:	4607      	mov	r7, r0
 8024a7a:	dddf      	ble.n	8024a3c <_realloc_r+0x1d8>
 8024a7c:	4611      	mov	r1, r2
 8024a7e:	4650      	mov	r0, sl
 8024a80:	f7ff f80e 	bl	8023aa0 <_malloc_r>
 8024a84:	4607      	mov	r7, r0
 8024a86:	2800      	cmp	r0, #0
 8024a88:	d0af      	beq.n	80249ea <_realloc_r+0x186>
 8024a8a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8024a8e:	f023 0301 	bic.w	r3, r3, #1
 8024a92:	f1a0 0208 	sub.w	r2, r0, #8
 8024a96:	444b      	add	r3, r9
 8024a98:	429a      	cmp	r2, r3
 8024a9a:	d11f      	bne.n	8024adc <_realloc_r+0x278>
 8024a9c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8024aa0:	f027 0703 	bic.w	r7, r7, #3
 8024aa4:	4437      	add	r7, r6
 8024aa6:	e73e      	b.n	8024926 <_realloc_r+0xc2>
 8024aa8:	68a3      	ldr	r3, [r4, #8]
 8024aaa:	612b      	str	r3, [r5, #16]
 8024aac:	68e3      	ldr	r3, [r4, #12]
 8024aae:	616b      	str	r3, [r5, #20]
 8024ab0:	2a24      	cmp	r2, #36	; 0x24
 8024ab2:	bf01      	itttt	eq
 8024ab4:	6923      	ldreq	r3, [r4, #16]
 8024ab6:	61ab      	streq	r3, [r5, #24]
 8024ab8:	6962      	ldreq	r2, [r4, #20]
 8024aba:	61ea      	streq	r2, [r5, #28]
 8024abc:	bf19      	ittee	ne
 8024abe:	f105 0018 	addne.w	r0, r5, #24
 8024ac2:	f104 0310 	addne.w	r3, r4, #16
 8024ac6:	f105 0020 	addeq.w	r0, r5, #32
 8024aca:	f104 0318 	addeq.w	r3, r4, #24
 8024ace:	e7ca      	b.n	8024a66 <_realloc_r+0x202>
 8024ad0:	4623      	mov	r3, r4
 8024ad2:	e7c8      	b.n	8024a66 <_realloc_r+0x202>
 8024ad4:	4621      	mov	r1, r4
 8024ad6:	f7ff feab 	bl	8024830 <memmove>
 8024ada:	e7ca      	b.n	8024a72 <_realloc_r+0x20e>
 8024adc:	1f32      	subs	r2, r6, #4
 8024ade:	2a24      	cmp	r2, #36	; 0x24
 8024ae0:	d82d      	bhi.n	8024b3e <_realloc_r+0x2da>
 8024ae2:	2a13      	cmp	r2, #19
 8024ae4:	d928      	bls.n	8024b38 <_realloc_r+0x2d4>
 8024ae6:	6823      	ldr	r3, [r4, #0]
 8024ae8:	6003      	str	r3, [r0, #0]
 8024aea:	6863      	ldr	r3, [r4, #4]
 8024aec:	6043      	str	r3, [r0, #4]
 8024aee:	2a1b      	cmp	r2, #27
 8024af0:	d80e      	bhi.n	8024b10 <_realloc_r+0x2ac>
 8024af2:	f100 0308 	add.w	r3, r0, #8
 8024af6:	f104 0208 	add.w	r2, r4, #8
 8024afa:	6811      	ldr	r1, [r2, #0]
 8024afc:	6019      	str	r1, [r3, #0]
 8024afe:	6851      	ldr	r1, [r2, #4]
 8024b00:	6059      	str	r1, [r3, #4]
 8024b02:	6892      	ldr	r2, [r2, #8]
 8024b04:	609a      	str	r2, [r3, #8]
 8024b06:	4621      	mov	r1, r4
 8024b08:	4650      	mov	r0, sl
 8024b0a:	f7ff fdc1 	bl	8024690 <_free_r>
 8024b0e:	e76c      	b.n	80249ea <_realloc_r+0x186>
 8024b10:	68a3      	ldr	r3, [r4, #8]
 8024b12:	6083      	str	r3, [r0, #8]
 8024b14:	68e3      	ldr	r3, [r4, #12]
 8024b16:	60c3      	str	r3, [r0, #12]
 8024b18:	2a24      	cmp	r2, #36	; 0x24
 8024b1a:	bf01      	itttt	eq
 8024b1c:	6923      	ldreq	r3, [r4, #16]
 8024b1e:	6103      	streq	r3, [r0, #16]
 8024b20:	6961      	ldreq	r1, [r4, #20]
 8024b22:	6141      	streq	r1, [r0, #20]
 8024b24:	bf19      	ittee	ne
 8024b26:	f100 0310 	addne.w	r3, r0, #16
 8024b2a:	f104 0210 	addne.w	r2, r4, #16
 8024b2e:	f100 0318 	addeq.w	r3, r0, #24
 8024b32:	f104 0218 	addeq.w	r2, r4, #24
 8024b36:	e7e0      	b.n	8024afa <_realloc_r+0x296>
 8024b38:	4603      	mov	r3, r0
 8024b3a:	4622      	mov	r2, r4
 8024b3c:	e7dd      	b.n	8024afa <_realloc_r+0x296>
 8024b3e:	4621      	mov	r1, r4
 8024b40:	f7ff fe76 	bl	8024830 <memmove>
 8024b44:	e7df      	b.n	8024b06 <_realloc_r+0x2a2>
 8024b46:	4637      	mov	r7, r6
 8024b48:	e6ed      	b.n	8024926 <_realloc_r+0xc2>
 8024b4a:	f003 0301 	and.w	r3, r3, #1
 8024b4e:	431f      	orrs	r7, r3
 8024b50:	f8c9 7004 	str.w	r7, [r9, #4]
 8024b54:	6853      	ldr	r3, [r2, #4]
 8024b56:	f043 0301 	orr.w	r3, r3, #1
 8024b5a:	6053      	str	r3, [r2, #4]
 8024b5c:	e6ff      	b.n	802495e <_realloc_r+0xfa>
 8024b5e:	bf00      	nop
 8024b60:	20000bc0 	.word	0x20000bc0

08024b64 <__ascii_wctomb>:
 8024b64:	b149      	cbz	r1, 8024b7a <__ascii_wctomb+0x16>
 8024b66:	2aff      	cmp	r2, #255	; 0xff
 8024b68:	bf85      	ittet	hi
 8024b6a:	238a      	movhi	r3, #138	; 0x8a
 8024b6c:	6003      	strhi	r3, [r0, #0]
 8024b6e:	700a      	strbls	r2, [r1, #0]
 8024b70:	f04f 30ff 	movhi.w	r0, #4294967295
 8024b74:	bf98      	it	ls
 8024b76:	2001      	movls	r0, #1
 8024b78:	4770      	bx	lr
 8024b7a:	4608      	mov	r0, r1
 8024b7c:	4770      	bx	lr
	...

08024b80 <cbrt>:
 8024b80:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8024b84:	ec51 0b10 	vmov	r0, r1, d0
 8024b88:	4a59      	ldr	r2, [pc, #356]	; (8024cf0 <cbrt+0x170>)
 8024b8a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024b8e:	4293      	cmp	r3, r2
 8024b90:	468a      	mov	sl, r1
 8024b92:	ee10 2a10 	vmov	r2, s0
 8024b96:	d907      	bls.n	8024ba8 <cbrt+0x28>
 8024b98:	460b      	mov	r3, r1
 8024b9a:	f7db fb8f 	bl	80002bc <__adddf3>
 8024b9e:	ec41 0b10 	vmov	d0, r0, r1
 8024ba2:	b002      	add	sp, #8
 8024ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024ba8:	431a      	orrs	r2, r3
 8024baa:	d0f8      	beq.n	8024b9e <cbrt+0x1e>
 8024bac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8024bb0:	4619      	mov	r1, r3
 8024bb2:	4606      	mov	r6, r0
 8024bb4:	461f      	mov	r7, r3
 8024bb6:	d27c      	bcs.n	8024cb2 <cbrt+0x132>
 8024bb8:	2200      	movs	r2, #0
 8024bba:	4b4e      	ldr	r3, [pc, #312]	; (8024cf4 <cbrt+0x174>)
 8024bbc:	f7db fd30 	bl	8000620 <__aeabi_dmul>
 8024bc0:	2203      	movs	r2, #3
 8024bc2:	fbb1 f3f2 	udiv	r3, r1, r2
 8024bc6:	f103 5525 	add.w	r5, r3, #692060160	; 0x29400000
 8024bca:	f505 157d 	add.w	r5, r5, #4145152	; 0x3f4000
 8024bce:	f505 5562 	add.w	r5, r5, #14464	; 0x3880
 8024bd2:	4604      	mov	r4, r0
 8024bd4:	3513      	adds	r5, #19
 8024bd6:	4622      	mov	r2, r4
 8024bd8:	462b      	mov	r3, r5
 8024bda:	4620      	mov	r0, r4
 8024bdc:	4629      	mov	r1, r5
 8024bde:	f7db fd1f 	bl	8000620 <__aeabi_dmul>
 8024be2:	4632      	mov	r2, r6
 8024be4:	463b      	mov	r3, r7
 8024be6:	f7db fe45 	bl	8000874 <__aeabi_ddiv>
 8024bea:	4622      	mov	r2, r4
 8024bec:	462b      	mov	r3, r5
 8024bee:	f7db fd17 	bl	8000620 <__aeabi_dmul>
 8024bf2:	a335      	add	r3, pc, #212	; (adr r3, 8024cc8 <cbrt+0x148>)
 8024bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024bf8:	f7db fb60 	bl	80002bc <__adddf3>
 8024bfc:	a334      	add	r3, pc, #208	; (adr r3, 8024cd0 <cbrt+0x150>)
 8024bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c02:	e9cd 0100 	strd	r0, r1, [sp]
 8024c06:	f7db fb59 	bl	80002bc <__adddf3>
 8024c0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024c0e:	4680      	mov	r8, r0
 8024c10:	4689      	mov	r9, r1
 8024c12:	a131      	add	r1, pc, #196	; (adr r1, 8024cd8 <cbrt+0x158>)
 8024c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024c18:	f7db fe2c 	bl	8000874 <__aeabi_ddiv>
 8024c1c:	4602      	mov	r2, r0
 8024c1e:	460b      	mov	r3, r1
 8024c20:	4640      	mov	r0, r8
 8024c22:	4649      	mov	r1, r9
 8024c24:	f7db fb4a 	bl	80002bc <__adddf3>
 8024c28:	4602      	mov	r2, r0
 8024c2a:	460b      	mov	r3, r1
 8024c2c:	a12c      	add	r1, pc, #176	; (adr r1, 8024ce0 <cbrt+0x160>)
 8024c2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024c32:	f7db fe1f 	bl	8000874 <__aeabi_ddiv>
 8024c36:	a32c      	add	r3, pc, #176	; (adr r3, 8024ce8 <cbrt+0x168>)
 8024c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c3c:	f7db fb3e 	bl	80002bc <__adddf3>
 8024c40:	4622      	mov	r2, r4
 8024c42:	462b      	mov	r3, r5
 8024c44:	f7db fcec 	bl	8000620 <__aeabi_dmul>
 8024c48:	2400      	movs	r4, #0
 8024c4a:	1c4d      	adds	r5, r1, #1
 8024c4c:	4622      	mov	r2, r4
 8024c4e:	462b      	mov	r3, r5
 8024c50:	4620      	mov	r0, r4
 8024c52:	4629      	mov	r1, r5
 8024c54:	f7db fce4 	bl	8000620 <__aeabi_dmul>
 8024c58:	4602      	mov	r2, r0
 8024c5a:	460b      	mov	r3, r1
 8024c5c:	4630      	mov	r0, r6
 8024c5e:	4639      	mov	r1, r7
 8024c60:	f7db fe08 	bl	8000874 <__aeabi_ddiv>
 8024c64:	4622      	mov	r2, r4
 8024c66:	462b      	mov	r3, r5
 8024c68:	4680      	mov	r8, r0
 8024c6a:	4689      	mov	r9, r1
 8024c6c:	f7db fb24 	bl	80002b8 <__aeabi_dsub>
 8024c70:	4622      	mov	r2, r4
 8024c72:	4606      	mov	r6, r0
 8024c74:	460f      	mov	r7, r1
 8024c76:	462b      	mov	r3, r5
 8024c78:	4620      	mov	r0, r4
 8024c7a:	4629      	mov	r1, r5
 8024c7c:	f7db fb1e 	bl	80002bc <__adddf3>
 8024c80:	4642      	mov	r2, r8
 8024c82:	464b      	mov	r3, r9
 8024c84:	f7db fb1a 	bl	80002bc <__adddf3>
 8024c88:	4602      	mov	r2, r0
 8024c8a:	460b      	mov	r3, r1
 8024c8c:	4630      	mov	r0, r6
 8024c8e:	4639      	mov	r1, r7
 8024c90:	f7db fdf0 	bl	8000874 <__aeabi_ddiv>
 8024c94:	4622      	mov	r2, r4
 8024c96:	462b      	mov	r3, r5
 8024c98:	f7db fcc2 	bl	8000620 <__aeabi_dmul>
 8024c9c:	4602      	mov	r2, r0
 8024c9e:	460b      	mov	r3, r1
 8024ca0:	4620      	mov	r0, r4
 8024ca2:	4629      	mov	r1, r5
 8024ca4:	f7db fb0a 	bl	80002bc <__adddf3>
 8024ca8:	f00a 4a00 	and.w	sl, sl, #2147483648	; 0x80000000
 8024cac:	ea4a 0101 	orr.w	r1, sl, r1
 8024cb0:	e775      	b.n	8024b9e <cbrt+0x1e>
 8024cb2:	2203      	movs	r2, #3
 8024cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8024cb8:	f103 552c 	add.w	r5, r3, #721420288	; 0x2b000000
 8024cbc:	f5a5 05c1 	sub.w	r5, r5, #6324224	; 0x608000
 8024cc0:	2400      	movs	r4, #0
 8024cc2:	f2a5 756d 	subw	r5, r5, #1901	; 0x76d
 8024cc6:	e786      	b.n	8024bd6 <cbrt+0x56>
 8024cc8:	f15f15f1 	.word	0xf15f15f1
 8024ccc:	3fe15f15 	.word	0x3fe15f15
 8024cd0:	0ea0ea0f 	.word	0x0ea0ea0f
 8024cd4:	3ff6a0ea 	.word	0x3ff6a0ea
 8024cd8:	2532c834 	.word	0x2532c834
 8024cdc:	bfe691de 	.word	0xbfe691de
 8024ce0:	6db6db6e 	.word	0x6db6db6e
 8024ce4:	3ff9b6db 	.word	0x3ff9b6db
 8024ce8:	b6db6db7 	.word	0xb6db6db7
 8024cec:	3fd6db6d 	.word	0x3fd6db6d
 8024cf0:	7fefffff 	.word	0x7fefffff
 8024cf4:	43500000 	.word	0x43500000

08024cf8 <floor>:
 8024cf8:	ec51 0b10 	vmov	r0, r1, d0
 8024cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024d00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8024d04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8024d08:	2e13      	cmp	r6, #19
 8024d0a:	ee10 8a10 	vmov	r8, s0
 8024d0e:	460c      	mov	r4, r1
 8024d10:	ee10 5a10 	vmov	r5, s0
 8024d14:	dc35      	bgt.n	8024d82 <floor+0x8a>
 8024d16:	2e00      	cmp	r6, #0
 8024d18:	da17      	bge.n	8024d4a <floor+0x52>
 8024d1a:	a335      	add	r3, pc, #212	; (adr r3, 8024df0 <floor+0xf8>)
 8024d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d20:	f7db facc 	bl	80002bc <__adddf3>
 8024d24:	2200      	movs	r2, #0
 8024d26:	2300      	movs	r3, #0
 8024d28:	f7db ff0a 	bl	8000b40 <__aeabi_dcmpgt>
 8024d2c:	b150      	cbz	r0, 8024d44 <floor+0x4c>
 8024d2e:	2c00      	cmp	r4, #0
 8024d30:	da5a      	bge.n	8024de8 <floor+0xf0>
 8024d32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8024d36:	ea53 0308 	orrs.w	r3, r3, r8
 8024d3a:	4b2f      	ldr	r3, [pc, #188]	; (8024df8 <floor+0x100>)
 8024d3c:	f04f 0500 	mov.w	r5, #0
 8024d40:	bf18      	it	ne
 8024d42:	461c      	movne	r4, r3
 8024d44:	4621      	mov	r1, r4
 8024d46:	4628      	mov	r0, r5
 8024d48:	e025      	b.n	8024d96 <floor+0x9e>
 8024d4a:	4f2c      	ldr	r7, [pc, #176]	; (8024dfc <floor+0x104>)
 8024d4c:	4137      	asrs	r7, r6
 8024d4e:	ea01 0307 	and.w	r3, r1, r7
 8024d52:	4303      	orrs	r3, r0
 8024d54:	d01f      	beq.n	8024d96 <floor+0x9e>
 8024d56:	a326      	add	r3, pc, #152	; (adr r3, 8024df0 <floor+0xf8>)
 8024d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d5c:	f7db faae 	bl	80002bc <__adddf3>
 8024d60:	2200      	movs	r2, #0
 8024d62:	2300      	movs	r3, #0
 8024d64:	f7db feec 	bl	8000b40 <__aeabi_dcmpgt>
 8024d68:	2800      	cmp	r0, #0
 8024d6a:	d0eb      	beq.n	8024d44 <floor+0x4c>
 8024d6c:	2c00      	cmp	r4, #0
 8024d6e:	bfbe      	ittt	lt
 8024d70:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8024d74:	fa43 f606 	asrlt.w	r6, r3, r6
 8024d78:	19a4      	addlt	r4, r4, r6
 8024d7a:	ea24 0407 	bic.w	r4, r4, r7
 8024d7e:	2500      	movs	r5, #0
 8024d80:	e7e0      	b.n	8024d44 <floor+0x4c>
 8024d82:	2e33      	cmp	r6, #51	; 0x33
 8024d84:	dd0b      	ble.n	8024d9e <floor+0xa6>
 8024d86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024d8a:	d104      	bne.n	8024d96 <floor+0x9e>
 8024d8c:	ee10 2a10 	vmov	r2, s0
 8024d90:	460b      	mov	r3, r1
 8024d92:	f7db fa93 	bl	80002bc <__adddf3>
 8024d96:	ec41 0b10 	vmov	d0, r0, r1
 8024d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024d9e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8024da2:	f04f 33ff 	mov.w	r3, #4294967295
 8024da6:	fa23 f707 	lsr.w	r7, r3, r7
 8024daa:	4238      	tst	r0, r7
 8024dac:	d0f3      	beq.n	8024d96 <floor+0x9e>
 8024dae:	a310      	add	r3, pc, #64	; (adr r3, 8024df0 <floor+0xf8>)
 8024db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024db4:	f7db fa82 	bl	80002bc <__adddf3>
 8024db8:	2200      	movs	r2, #0
 8024dba:	2300      	movs	r3, #0
 8024dbc:	f7db fec0 	bl	8000b40 <__aeabi_dcmpgt>
 8024dc0:	2800      	cmp	r0, #0
 8024dc2:	d0bf      	beq.n	8024d44 <floor+0x4c>
 8024dc4:	2c00      	cmp	r4, #0
 8024dc6:	da02      	bge.n	8024dce <floor+0xd6>
 8024dc8:	2e14      	cmp	r6, #20
 8024dca:	d103      	bne.n	8024dd4 <floor+0xdc>
 8024dcc:	3401      	adds	r4, #1
 8024dce:	ea25 0507 	bic.w	r5, r5, r7
 8024dd2:	e7b7      	b.n	8024d44 <floor+0x4c>
 8024dd4:	2301      	movs	r3, #1
 8024dd6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8024dda:	fa03 f606 	lsl.w	r6, r3, r6
 8024dde:	4435      	add	r5, r6
 8024de0:	45a8      	cmp	r8, r5
 8024de2:	bf88      	it	hi
 8024de4:	18e4      	addhi	r4, r4, r3
 8024de6:	e7f2      	b.n	8024dce <floor+0xd6>
 8024de8:	2500      	movs	r5, #0
 8024dea:	462c      	mov	r4, r5
 8024dec:	e7aa      	b.n	8024d44 <floor+0x4c>
 8024dee:	bf00      	nop
 8024df0:	8800759c 	.word	0x8800759c
 8024df4:	7e37e43c 	.word	0x7e37e43c
 8024df8:	bff00000 	.word	0xbff00000
 8024dfc:	000fffff 	.word	0x000fffff

08024e00 <exp>:
 8024e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024e02:	ed2d 8b02 	vpush	{d8}
 8024e06:	4e38      	ldr	r6, [pc, #224]	; (8024ee8 <exp+0xe8>)
 8024e08:	b08b      	sub	sp, #44	; 0x2c
 8024e0a:	ec55 4b10 	vmov	r4, r5, d0
 8024e0e:	f000 fb17 	bl	8025440 <__ieee754_exp>
 8024e12:	f996 3000 	ldrsb.w	r3, [r6]
 8024e16:	eeb0 8a40 	vmov.f32	s16, s0
 8024e1a:	eef0 8a60 	vmov.f32	s17, s1
 8024e1e:	3301      	adds	r3, #1
 8024e20:	d02c      	beq.n	8024e7c <exp+0x7c>
 8024e22:	ec45 4b10 	vmov	d0, r4, r5
 8024e26:	f001 fc67 	bl	80266f8 <finite>
 8024e2a:	b338      	cbz	r0, 8024e7c <exp+0x7c>
 8024e2c:	a32a      	add	r3, pc, #168	; (adr r3, 8024ed8 <exp+0xd8>)
 8024e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e32:	4620      	mov	r0, r4
 8024e34:	4629      	mov	r1, r5
 8024e36:	f7db fe83 	bl	8000b40 <__aeabi_dcmpgt>
 8024e3a:	4607      	mov	r7, r0
 8024e3c:	2800      	cmp	r0, #0
 8024e3e:	d030      	beq.n	8024ea2 <exp+0xa2>
 8024e40:	2303      	movs	r3, #3
 8024e42:	9300      	str	r3, [sp, #0]
 8024e44:	4b29      	ldr	r3, [pc, #164]	; (8024eec <exp+0xec>)
 8024e46:	9301      	str	r3, [sp, #4]
 8024e48:	2300      	movs	r3, #0
 8024e4a:	9308      	str	r3, [sp, #32]
 8024e4c:	f996 3000 	ldrsb.w	r3, [r6]
 8024e50:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8024e54:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8024e58:	b9c3      	cbnz	r3, 8024e8c <exp+0x8c>
 8024e5a:	4b25      	ldr	r3, [pc, #148]	; (8024ef0 <exp+0xf0>)
 8024e5c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8024e60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8024e64:	4668      	mov	r0, sp
 8024e66:	f001 fc4f 	bl	8026708 <matherr>
 8024e6a:	b1a8      	cbz	r0, 8024e98 <exp+0x98>
 8024e6c:	9b08      	ldr	r3, [sp, #32]
 8024e6e:	b11b      	cbz	r3, 8024e78 <exp+0x78>
 8024e70:	f7fc ff58 	bl	8021d24 <__errno>
 8024e74:	9b08      	ldr	r3, [sp, #32]
 8024e76:	6003      	str	r3, [r0, #0]
 8024e78:	ed9d 8b06 	vldr	d8, [sp, #24]
 8024e7c:	eeb0 0a48 	vmov.f32	s0, s16
 8024e80:	eef0 0a68 	vmov.f32	s1, s17
 8024e84:	b00b      	add	sp, #44	; 0x2c
 8024e86:	ecbd 8b02 	vpop	{d8}
 8024e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024e8c:	4919      	ldr	r1, [pc, #100]	; (8024ef4 <exp+0xf4>)
 8024e8e:	2000      	movs	r0, #0
 8024e90:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024e94:	2b02      	cmp	r3, #2
 8024e96:	d1e5      	bne.n	8024e64 <exp+0x64>
 8024e98:	f7fc ff44 	bl	8021d24 <__errno>
 8024e9c:	2322      	movs	r3, #34	; 0x22
 8024e9e:	6003      	str	r3, [r0, #0]
 8024ea0:	e7e4      	b.n	8024e6c <exp+0x6c>
 8024ea2:	a30f      	add	r3, pc, #60	; (adr r3, 8024ee0 <exp+0xe0>)
 8024ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ea8:	4620      	mov	r0, r4
 8024eaa:	4629      	mov	r1, r5
 8024eac:	f7db fe2a 	bl	8000b04 <__aeabi_dcmplt>
 8024eb0:	2800      	cmp	r0, #0
 8024eb2:	d0e3      	beq.n	8024e7c <exp+0x7c>
 8024eb4:	2304      	movs	r3, #4
 8024eb6:	9300      	str	r3, [sp, #0]
 8024eb8:	4b0c      	ldr	r3, [pc, #48]	; (8024eec <exp+0xec>)
 8024eba:	9301      	str	r3, [sp, #4]
 8024ebc:	2200      	movs	r2, #0
 8024ebe:	2300      	movs	r3, #0
 8024ec0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8024ec4:	9708      	str	r7, [sp, #32]
 8024ec6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8024eca:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8024ece:	f996 3000 	ldrsb.w	r3, [r6]
 8024ed2:	e7df      	b.n	8024e94 <exp+0x94>
 8024ed4:	f3af 8000 	nop.w
 8024ed8:	fefa39ef 	.word	0xfefa39ef
 8024edc:	40862e42 	.word	0x40862e42
 8024ee0:	d52d3051 	.word	0xd52d3051
 8024ee4:	c0874910 	.word	0xc0874910
 8024ee8:	2000113c 	.word	0x2000113c
 8024eec:	08033bb5 	.word	0x08033bb5
 8024ef0:	47efffff 	.word	0x47efffff
 8024ef4:	7ff00000 	.word	0x7ff00000

08024ef8 <log>:
 8024ef8:	b570      	push	{r4, r5, r6, lr}
 8024efa:	ed2d 8b02 	vpush	{d8}
 8024efe:	b08a      	sub	sp, #40	; 0x28
 8024f00:	ec55 4b10 	vmov	r4, r5, d0
 8024f04:	f000 fc10 	bl	8025728 <__ieee754_log>
 8024f08:	4b36      	ldr	r3, [pc, #216]	; (8024fe4 <log+0xec>)
 8024f0a:	eeb0 8a40 	vmov.f32	s16, s0
 8024f0e:	eef0 8a60 	vmov.f32	s17, s1
 8024f12:	f993 6000 	ldrsb.w	r6, [r3]
 8024f16:	1c73      	adds	r3, r6, #1
 8024f18:	d05b      	beq.n	8024fd2 <log+0xda>
 8024f1a:	4622      	mov	r2, r4
 8024f1c:	462b      	mov	r3, r5
 8024f1e:	4620      	mov	r0, r4
 8024f20:	4629      	mov	r1, r5
 8024f22:	f7db fe17 	bl	8000b54 <__aeabi_dcmpun>
 8024f26:	2800      	cmp	r0, #0
 8024f28:	d153      	bne.n	8024fd2 <log+0xda>
 8024f2a:	2200      	movs	r2, #0
 8024f2c:	2300      	movs	r3, #0
 8024f2e:	4620      	mov	r0, r4
 8024f30:	4629      	mov	r1, r5
 8024f32:	f7db fe05 	bl	8000b40 <__aeabi_dcmpgt>
 8024f36:	2800      	cmp	r0, #0
 8024f38:	d14b      	bne.n	8024fd2 <log+0xda>
 8024f3a:	4b2b      	ldr	r3, [pc, #172]	; (8024fe8 <log+0xf0>)
 8024f3c:	9301      	str	r3, [sp, #4]
 8024f3e:	9008      	str	r0, [sp, #32]
 8024f40:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8024f44:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8024f48:	b9a6      	cbnz	r6, 8024f74 <log+0x7c>
 8024f4a:	4b28      	ldr	r3, [pc, #160]	; (8024fec <log+0xf4>)
 8024f4c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8024f50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8024f54:	4620      	mov	r0, r4
 8024f56:	2200      	movs	r2, #0
 8024f58:	2300      	movs	r3, #0
 8024f5a:	4629      	mov	r1, r5
 8024f5c:	f7db fdc8 	bl	8000af0 <__aeabi_dcmpeq>
 8024f60:	bb40      	cbnz	r0, 8024fb4 <log+0xbc>
 8024f62:	2301      	movs	r3, #1
 8024f64:	2e02      	cmp	r6, #2
 8024f66:	9300      	str	r3, [sp, #0]
 8024f68:	d119      	bne.n	8024f9e <log+0xa6>
 8024f6a:	f7fc fedb 	bl	8021d24 <__errno>
 8024f6e:	2321      	movs	r3, #33	; 0x21
 8024f70:	6003      	str	r3, [r0, #0]
 8024f72:	e019      	b.n	8024fa8 <log+0xb0>
 8024f74:	4b1e      	ldr	r3, [pc, #120]	; (8024ff0 <log+0xf8>)
 8024f76:	2200      	movs	r2, #0
 8024f78:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8024f7c:	4620      	mov	r0, r4
 8024f7e:	2200      	movs	r2, #0
 8024f80:	2300      	movs	r3, #0
 8024f82:	4629      	mov	r1, r5
 8024f84:	f7db fdb4 	bl	8000af0 <__aeabi_dcmpeq>
 8024f88:	2800      	cmp	r0, #0
 8024f8a:	d0ea      	beq.n	8024f62 <log+0x6a>
 8024f8c:	2302      	movs	r3, #2
 8024f8e:	429e      	cmp	r6, r3
 8024f90:	9300      	str	r3, [sp, #0]
 8024f92:	d111      	bne.n	8024fb8 <log+0xc0>
 8024f94:	f7fc fec6 	bl	8021d24 <__errno>
 8024f98:	2322      	movs	r3, #34	; 0x22
 8024f9a:	6003      	str	r3, [r0, #0]
 8024f9c:	e011      	b.n	8024fc2 <log+0xca>
 8024f9e:	4668      	mov	r0, sp
 8024fa0:	f001 fbb2 	bl	8026708 <matherr>
 8024fa4:	2800      	cmp	r0, #0
 8024fa6:	d0e0      	beq.n	8024f6a <log+0x72>
 8024fa8:	4812      	ldr	r0, [pc, #72]	; (8024ff4 <log+0xfc>)
 8024faa:	f001 fbb1 	bl	8026710 <nan>
 8024fae:	ed8d 0b06 	vstr	d0, [sp, #24]
 8024fb2:	e006      	b.n	8024fc2 <log+0xca>
 8024fb4:	2302      	movs	r3, #2
 8024fb6:	9300      	str	r3, [sp, #0]
 8024fb8:	4668      	mov	r0, sp
 8024fba:	f001 fba5 	bl	8026708 <matherr>
 8024fbe:	2800      	cmp	r0, #0
 8024fc0:	d0e8      	beq.n	8024f94 <log+0x9c>
 8024fc2:	9b08      	ldr	r3, [sp, #32]
 8024fc4:	b11b      	cbz	r3, 8024fce <log+0xd6>
 8024fc6:	f7fc fead 	bl	8021d24 <__errno>
 8024fca:	9b08      	ldr	r3, [sp, #32]
 8024fcc:	6003      	str	r3, [r0, #0]
 8024fce:	ed9d 8b06 	vldr	d8, [sp, #24]
 8024fd2:	eeb0 0a48 	vmov.f32	s0, s16
 8024fd6:	eef0 0a68 	vmov.f32	s1, s17
 8024fda:	b00a      	add	sp, #40	; 0x28
 8024fdc:	ecbd 8b02 	vpop	{d8}
 8024fe0:	bd70      	pop	{r4, r5, r6, pc}
 8024fe2:	bf00      	nop
 8024fe4:	2000113c 	.word	0x2000113c
 8024fe8:	08033bb9 	.word	0x08033bb9
 8024fec:	c7efffff 	.word	0xc7efffff
 8024ff0:	fff00000 	.word	0xfff00000
 8024ff4:	08033851 	.word	0x08033851

08024ff8 <pow>:
 8024ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ffc:	ed2d 8b04 	vpush	{d8-d9}
 8025000:	b08d      	sub	sp, #52	; 0x34
 8025002:	ec57 6b10 	vmov	r6, r7, d0
 8025006:	ec55 4b11 	vmov	r4, r5, d1
 802500a:	f000 fd65 	bl	8025ad8 <__ieee754_pow>
 802500e:	4bae      	ldr	r3, [pc, #696]	; (80252c8 <pow+0x2d0>)
 8025010:	eeb0 8a40 	vmov.f32	s16, s0
 8025014:	eef0 8a60 	vmov.f32	s17, s1
 8025018:	f993 9000 	ldrsb.w	r9, [r3]
 802501c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8025020:	4698      	mov	r8, r3
 8025022:	d05f      	beq.n	80250e4 <pow+0xec>
 8025024:	4622      	mov	r2, r4
 8025026:	462b      	mov	r3, r5
 8025028:	4620      	mov	r0, r4
 802502a:	4629      	mov	r1, r5
 802502c:	f7db fd92 	bl	8000b54 <__aeabi_dcmpun>
 8025030:	4683      	mov	fp, r0
 8025032:	2800      	cmp	r0, #0
 8025034:	d156      	bne.n	80250e4 <pow+0xec>
 8025036:	4632      	mov	r2, r6
 8025038:	463b      	mov	r3, r7
 802503a:	4630      	mov	r0, r6
 802503c:	4639      	mov	r1, r7
 802503e:	f7db fd89 	bl	8000b54 <__aeabi_dcmpun>
 8025042:	9001      	str	r0, [sp, #4]
 8025044:	b1e8      	cbz	r0, 8025082 <pow+0x8a>
 8025046:	2200      	movs	r2, #0
 8025048:	2300      	movs	r3, #0
 802504a:	4620      	mov	r0, r4
 802504c:	4629      	mov	r1, r5
 802504e:	f7db fd4f 	bl	8000af0 <__aeabi_dcmpeq>
 8025052:	2800      	cmp	r0, #0
 8025054:	d046      	beq.n	80250e4 <pow+0xec>
 8025056:	2301      	movs	r3, #1
 8025058:	9302      	str	r3, [sp, #8]
 802505a:	4b9c      	ldr	r3, [pc, #624]	; (80252cc <pow+0x2d4>)
 802505c:	9303      	str	r3, [sp, #12]
 802505e:	4b9c      	ldr	r3, [pc, #624]	; (80252d0 <pow+0x2d8>)
 8025060:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8025064:	2200      	movs	r2, #0
 8025066:	f1b9 0f02 	cmp.w	r9, #2
 802506a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802506e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8025072:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025076:	d033      	beq.n	80250e0 <pow+0xe8>
 8025078:	a802      	add	r0, sp, #8
 802507a:	f001 fb45 	bl	8026708 <matherr>
 802507e:	bb48      	cbnz	r0, 80250d4 <pow+0xdc>
 8025080:	e05e      	b.n	8025140 <pow+0x148>
 8025082:	f04f 0a00 	mov.w	sl, #0
 8025086:	f04f 0b00 	mov.w	fp, #0
 802508a:	4652      	mov	r2, sl
 802508c:	465b      	mov	r3, fp
 802508e:	4630      	mov	r0, r6
 8025090:	4639      	mov	r1, r7
 8025092:	f7db fd2d 	bl	8000af0 <__aeabi_dcmpeq>
 8025096:	ec4b ab19 	vmov	d9, sl, fp
 802509a:	2800      	cmp	r0, #0
 802509c:	d055      	beq.n	802514a <pow+0x152>
 802509e:	4652      	mov	r2, sl
 80250a0:	465b      	mov	r3, fp
 80250a2:	4620      	mov	r0, r4
 80250a4:	4629      	mov	r1, r5
 80250a6:	f7db fd23 	bl	8000af0 <__aeabi_dcmpeq>
 80250aa:	4680      	mov	r8, r0
 80250ac:	b318      	cbz	r0, 80250f6 <pow+0xfe>
 80250ae:	2301      	movs	r3, #1
 80250b0:	9302      	str	r3, [sp, #8]
 80250b2:	4b86      	ldr	r3, [pc, #536]	; (80252cc <pow+0x2d4>)
 80250b4:	9303      	str	r3, [sp, #12]
 80250b6:	9b01      	ldr	r3, [sp, #4]
 80250b8:	930a      	str	r3, [sp, #40]	; 0x28
 80250ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80250be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80250c2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80250c6:	f1b9 0f00 	cmp.w	r9, #0
 80250ca:	d0d5      	beq.n	8025078 <pow+0x80>
 80250cc:	4b80      	ldr	r3, [pc, #512]	; (80252d0 <pow+0x2d8>)
 80250ce:	2200      	movs	r2, #0
 80250d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80250d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80250d6:	b11b      	cbz	r3, 80250e0 <pow+0xe8>
 80250d8:	f7fc fe24 	bl	8021d24 <__errno>
 80250dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80250de:	6003      	str	r3, [r0, #0]
 80250e0:	ed9d 8b08 	vldr	d8, [sp, #32]
 80250e4:	eeb0 0a48 	vmov.f32	s0, s16
 80250e8:	eef0 0a68 	vmov.f32	s1, s17
 80250ec:	b00d      	add	sp, #52	; 0x34
 80250ee:	ecbd 8b04 	vpop	{d8-d9}
 80250f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80250f6:	ec45 4b10 	vmov	d0, r4, r5
 80250fa:	f001 fafd 	bl	80266f8 <finite>
 80250fe:	2800      	cmp	r0, #0
 8025100:	d0f0      	beq.n	80250e4 <pow+0xec>
 8025102:	4652      	mov	r2, sl
 8025104:	465b      	mov	r3, fp
 8025106:	4620      	mov	r0, r4
 8025108:	4629      	mov	r1, r5
 802510a:	f7db fcfb 	bl	8000b04 <__aeabi_dcmplt>
 802510e:	2800      	cmp	r0, #0
 8025110:	d0e8      	beq.n	80250e4 <pow+0xec>
 8025112:	2301      	movs	r3, #1
 8025114:	9302      	str	r3, [sp, #8]
 8025116:	4b6d      	ldr	r3, [pc, #436]	; (80252cc <pow+0x2d4>)
 8025118:	9303      	str	r3, [sp, #12]
 802511a:	4b6b      	ldr	r3, [pc, #428]	; (80252c8 <pow+0x2d0>)
 802511c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8025120:	f993 3000 	ldrsb.w	r3, [r3]
 8025124:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8025128:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802512c:	b913      	cbnz	r3, 8025134 <pow+0x13c>
 802512e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8025132:	e7a1      	b.n	8025078 <pow+0x80>
 8025134:	4967      	ldr	r1, [pc, #412]	; (80252d4 <pow+0x2dc>)
 8025136:	2000      	movs	r0, #0
 8025138:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802513c:	2b02      	cmp	r3, #2
 802513e:	d19b      	bne.n	8025078 <pow+0x80>
 8025140:	f7fc fdf0 	bl	8021d24 <__errno>
 8025144:	2321      	movs	r3, #33	; 0x21
 8025146:	6003      	str	r3, [r0, #0]
 8025148:	e7c4      	b.n	80250d4 <pow+0xdc>
 802514a:	eeb0 0a48 	vmov.f32	s0, s16
 802514e:	eef0 0a68 	vmov.f32	s1, s17
 8025152:	f001 fad1 	bl	80266f8 <finite>
 8025156:	9001      	str	r0, [sp, #4]
 8025158:	2800      	cmp	r0, #0
 802515a:	f040 808a 	bne.w	8025272 <pow+0x27a>
 802515e:	ec47 6b10 	vmov	d0, r6, r7
 8025162:	f001 fac9 	bl	80266f8 <finite>
 8025166:	2800      	cmp	r0, #0
 8025168:	f000 8083 	beq.w	8025272 <pow+0x27a>
 802516c:	ec45 4b10 	vmov	d0, r4, r5
 8025170:	f001 fac2 	bl	80266f8 <finite>
 8025174:	2800      	cmp	r0, #0
 8025176:	d07c      	beq.n	8025272 <pow+0x27a>
 8025178:	ec53 2b18 	vmov	r2, r3, d8
 802517c:	ee18 0a10 	vmov	r0, s16
 8025180:	4619      	mov	r1, r3
 8025182:	f7db fce7 	bl	8000b54 <__aeabi_dcmpun>
 8025186:	f998 9000 	ldrsb.w	r9, [r8]
 802518a:	4b50      	ldr	r3, [pc, #320]	; (80252cc <pow+0x2d4>)
 802518c:	b1b0      	cbz	r0, 80251bc <pow+0x1c4>
 802518e:	2201      	movs	r2, #1
 8025190:	9303      	str	r3, [sp, #12]
 8025192:	9b01      	ldr	r3, [sp, #4]
 8025194:	9202      	str	r2, [sp, #8]
 8025196:	930a      	str	r3, [sp, #40]	; 0x28
 8025198:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802519c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80251a0:	f1b9 0f00 	cmp.w	r9, #0
 80251a4:	d0c3      	beq.n	802512e <pow+0x136>
 80251a6:	4652      	mov	r2, sl
 80251a8:	465b      	mov	r3, fp
 80251aa:	4650      	mov	r0, sl
 80251ac:	4659      	mov	r1, fp
 80251ae:	f7db fb61 	bl	8000874 <__aeabi_ddiv>
 80251b2:	f1b9 0f02 	cmp.w	r9, #2
 80251b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80251ba:	e7c0      	b.n	802513e <pow+0x146>
 80251bc:	2203      	movs	r2, #3
 80251be:	9202      	str	r2, [sp, #8]
 80251c0:	9303      	str	r3, [sp, #12]
 80251c2:	900a      	str	r0, [sp, #40]	; 0x28
 80251c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80251c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80251cc:	f1b9 0f00 	cmp.w	r9, #0
 80251d0:	d12c      	bne.n	802522c <pow+0x234>
 80251d2:	4b41      	ldr	r3, [pc, #260]	; (80252d8 <pow+0x2e0>)
 80251d4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80251d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80251dc:	4630      	mov	r0, r6
 80251de:	4652      	mov	r2, sl
 80251e0:	465b      	mov	r3, fp
 80251e2:	4639      	mov	r1, r7
 80251e4:	f7db fc8e 	bl	8000b04 <__aeabi_dcmplt>
 80251e8:	2800      	cmp	r0, #0
 80251ea:	d066      	beq.n	80252ba <pow+0x2c2>
 80251ec:	2200      	movs	r2, #0
 80251ee:	4b3b      	ldr	r3, [pc, #236]	; (80252dc <pow+0x2e4>)
 80251f0:	4620      	mov	r0, r4
 80251f2:	4629      	mov	r1, r5
 80251f4:	f7db fa14 	bl	8000620 <__aeabi_dmul>
 80251f8:	4604      	mov	r4, r0
 80251fa:	460d      	mov	r5, r1
 80251fc:	ec45 4b10 	vmov	d0, r4, r5
 8025200:	f001 fa8e 	bl	8026720 <rint>
 8025204:	4620      	mov	r0, r4
 8025206:	ec53 2b10 	vmov	r2, r3, d0
 802520a:	4629      	mov	r1, r5
 802520c:	f7db fc70 	bl	8000af0 <__aeabi_dcmpeq>
 8025210:	b920      	cbnz	r0, 802521c <pow+0x224>
 8025212:	4b33      	ldr	r3, [pc, #204]	; (80252e0 <pow+0x2e8>)
 8025214:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8025218:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802521c:	f998 3000 	ldrsb.w	r3, [r8]
 8025220:	2b02      	cmp	r3, #2
 8025222:	d14a      	bne.n	80252ba <pow+0x2c2>
 8025224:	f7fc fd7e 	bl	8021d24 <__errno>
 8025228:	2322      	movs	r3, #34	; 0x22
 802522a:	e78c      	b.n	8025146 <pow+0x14e>
 802522c:	4b2d      	ldr	r3, [pc, #180]	; (80252e4 <pow+0x2ec>)
 802522e:	2200      	movs	r2, #0
 8025230:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8025234:	4630      	mov	r0, r6
 8025236:	4652      	mov	r2, sl
 8025238:	465b      	mov	r3, fp
 802523a:	4639      	mov	r1, r7
 802523c:	f7db fc62 	bl	8000b04 <__aeabi_dcmplt>
 8025240:	2800      	cmp	r0, #0
 8025242:	d0eb      	beq.n	802521c <pow+0x224>
 8025244:	2200      	movs	r2, #0
 8025246:	4b25      	ldr	r3, [pc, #148]	; (80252dc <pow+0x2e4>)
 8025248:	4620      	mov	r0, r4
 802524a:	4629      	mov	r1, r5
 802524c:	f7db f9e8 	bl	8000620 <__aeabi_dmul>
 8025250:	4604      	mov	r4, r0
 8025252:	460d      	mov	r5, r1
 8025254:	ec45 4b10 	vmov	d0, r4, r5
 8025258:	f001 fa62 	bl	8026720 <rint>
 802525c:	4620      	mov	r0, r4
 802525e:	ec53 2b10 	vmov	r2, r3, d0
 8025262:	4629      	mov	r1, r5
 8025264:	f7db fc44 	bl	8000af0 <__aeabi_dcmpeq>
 8025268:	2800      	cmp	r0, #0
 802526a:	d1d7      	bne.n	802521c <pow+0x224>
 802526c:	2200      	movs	r2, #0
 802526e:	4b19      	ldr	r3, [pc, #100]	; (80252d4 <pow+0x2dc>)
 8025270:	e7d2      	b.n	8025218 <pow+0x220>
 8025272:	2200      	movs	r2, #0
 8025274:	2300      	movs	r3, #0
 8025276:	ec51 0b18 	vmov	r0, r1, d8
 802527a:	f7db fc39 	bl	8000af0 <__aeabi_dcmpeq>
 802527e:	2800      	cmp	r0, #0
 8025280:	f43f af30 	beq.w	80250e4 <pow+0xec>
 8025284:	ec47 6b10 	vmov	d0, r6, r7
 8025288:	f001 fa36 	bl	80266f8 <finite>
 802528c:	2800      	cmp	r0, #0
 802528e:	f43f af29 	beq.w	80250e4 <pow+0xec>
 8025292:	ec45 4b10 	vmov	d0, r4, r5
 8025296:	f001 fa2f 	bl	80266f8 <finite>
 802529a:	2800      	cmp	r0, #0
 802529c:	f43f af22 	beq.w	80250e4 <pow+0xec>
 80252a0:	2304      	movs	r3, #4
 80252a2:	9302      	str	r3, [sp, #8]
 80252a4:	4b09      	ldr	r3, [pc, #36]	; (80252cc <pow+0x2d4>)
 80252a6:	9303      	str	r3, [sp, #12]
 80252a8:	2300      	movs	r3, #0
 80252aa:	930a      	str	r3, [sp, #40]	; 0x28
 80252ac:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80252b0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80252b4:	ed8d 9b08 	vstr	d9, [sp, #32]
 80252b8:	e7b0      	b.n	802521c <pow+0x224>
 80252ba:	a802      	add	r0, sp, #8
 80252bc:	f001 fa24 	bl	8026708 <matherr>
 80252c0:	2800      	cmp	r0, #0
 80252c2:	f47f af07 	bne.w	80250d4 <pow+0xdc>
 80252c6:	e7ad      	b.n	8025224 <pow+0x22c>
 80252c8:	2000113c 	.word	0x2000113c
 80252cc:	08033bbd 	.word	0x08033bbd
 80252d0:	3ff00000 	.word	0x3ff00000
 80252d4:	fff00000 	.word	0xfff00000
 80252d8:	47efffff 	.word	0x47efffff
 80252dc:	3fe00000 	.word	0x3fe00000
 80252e0:	c7efffff 	.word	0xc7efffff
 80252e4:	7ff00000 	.word	0x7ff00000

080252e8 <sqrt>:
 80252e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80252ec:	ed2d 8b02 	vpush	{d8}
 80252f0:	b08b      	sub	sp, #44	; 0x2c
 80252f2:	ec55 4b10 	vmov	r4, r5, d0
 80252f6:	f001 f901 	bl	80264fc <__ieee754_sqrt>
 80252fa:	4b26      	ldr	r3, [pc, #152]	; (8025394 <sqrt+0xac>)
 80252fc:	eeb0 8a40 	vmov.f32	s16, s0
 8025300:	eef0 8a60 	vmov.f32	s17, s1
 8025304:	f993 6000 	ldrsb.w	r6, [r3]
 8025308:	1c73      	adds	r3, r6, #1
 802530a:	d02a      	beq.n	8025362 <sqrt+0x7a>
 802530c:	4622      	mov	r2, r4
 802530e:	462b      	mov	r3, r5
 8025310:	4620      	mov	r0, r4
 8025312:	4629      	mov	r1, r5
 8025314:	f7db fc1e 	bl	8000b54 <__aeabi_dcmpun>
 8025318:	4607      	mov	r7, r0
 802531a:	bb10      	cbnz	r0, 8025362 <sqrt+0x7a>
 802531c:	f04f 0800 	mov.w	r8, #0
 8025320:	f04f 0900 	mov.w	r9, #0
 8025324:	4642      	mov	r2, r8
 8025326:	464b      	mov	r3, r9
 8025328:	4620      	mov	r0, r4
 802532a:	4629      	mov	r1, r5
 802532c:	f7db fbea 	bl	8000b04 <__aeabi_dcmplt>
 8025330:	b1b8      	cbz	r0, 8025362 <sqrt+0x7a>
 8025332:	2301      	movs	r3, #1
 8025334:	9300      	str	r3, [sp, #0]
 8025336:	4b18      	ldr	r3, [pc, #96]	; (8025398 <sqrt+0xb0>)
 8025338:	9301      	str	r3, [sp, #4]
 802533a:	9708      	str	r7, [sp, #32]
 802533c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8025340:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8025344:	b9b6      	cbnz	r6, 8025374 <sqrt+0x8c>
 8025346:	e9cd 8906 	strd	r8, r9, [sp, #24]
 802534a:	4668      	mov	r0, sp
 802534c:	f001 f9dc 	bl	8026708 <matherr>
 8025350:	b1d0      	cbz	r0, 8025388 <sqrt+0xa0>
 8025352:	9b08      	ldr	r3, [sp, #32]
 8025354:	b11b      	cbz	r3, 802535e <sqrt+0x76>
 8025356:	f7fc fce5 	bl	8021d24 <__errno>
 802535a:	9b08      	ldr	r3, [sp, #32]
 802535c:	6003      	str	r3, [r0, #0]
 802535e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8025362:	eeb0 0a48 	vmov.f32	s0, s16
 8025366:	eef0 0a68 	vmov.f32	s1, s17
 802536a:	b00b      	add	sp, #44	; 0x2c
 802536c:	ecbd 8b02 	vpop	{d8}
 8025370:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025374:	4642      	mov	r2, r8
 8025376:	464b      	mov	r3, r9
 8025378:	4640      	mov	r0, r8
 802537a:	4649      	mov	r1, r9
 802537c:	f7db fa7a 	bl	8000874 <__aeabi_ddiv>
 8025380:	2e02      	cmp	r6, #2
 8025382:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025386:	d1e0      	bne.n	802534a <sqrt+0x62>
 8025388:	f7fc fccc 	bl	8021d24 <__errno>
 802538c:	2321      	movs	r3, #33	; 0x21
 802538e:	6003      	str	r3, [r0, #0]
 8025390:	e7df      	b.n	8025352 <sqrt+0x6a>
 8025392:	bf00      	nop
 8025394:	2000113c 	.word	0x2000113c
 8025398:	08033bc1 	.word	0x08033bc1

0802539c <sqrtf>:
 802539c:	b510      	push	{r4, lr}
 802539e:	ed2d 8b02 	vpush	{d8}
 80253a2:	b08a      	sub	sp, #40	; 0x28
 80253a4:	eeb0 8a40 	vmov.f32	s16, s0
 80253a8:	f001 f958 	bl	802665c <__ieee754_sqrtf>
 80253ac:	4b21      	ldr	r3, [pc, #132]	; (8025434 <sqrtf+0x98>)
 80253ae:	f993 4000 	ldrsb.w	r4, [r3]
 80253b2:	1c63      	adds	r3, r4, #1
 80253b4:	d02c      	beq.n	8025410 <sqrtf+0x74>
 80253b6:	eeb4 8a48 	vcmp.f32	s16, s16
 80253ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253be:	d627      	bvs.n	8025410 <sqrtf+0x74>
 80253c0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80253c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80253c8:	d522      	bpl.n	8025410 <sqrtf+0x74>
 80253ca:	2301      	movs	r3, #1
 80253cc:	9300      	str	r3, [sp, #0]
 80253ce:	4b1a      	ldr	r3, [pc, #104]	; (8025438 <sqrtf+0x9c>)
 80253d0:	9301      	str	r3, [sp, #4]
 80253d2:	ee18 0a10 	vmov	r0, s16
 80253d6:	2300      	movs	r3, #0
 80253d8:	9308      	str	r3, [sp, #32]
 80253da:	f7db f8cd 	bl	8000578 <__aeabi_f2d>
 80253de:	2200      	movs	r2, #0
 80253e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80253e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80253e8:	2300      	movs	r3, #0
 80253ea:	b9ac      	cbnz	r4, 8025418 <sqrtf+0x7c>
 80253ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80253f0:	4668      	mov	r0, sp
 80253f2:	f001 f989 	bl	8026708 <matherr>
 80253f6:	b1b8      	cbz	r0, 8025428 <sqrtf+0x8c>
 80253f8:	9b08      	ldr	r3, [sp, #32]
 80253fa:	b11b      	cbz	r3, 8025404 <sqrtf+0x68>
 80253fc:	f7fc fc92 	bl	8021d24 <__errno>
 8025400:	9b08      	ldr	r3, [sp, #32]
 8025402:	6003      	str	r3, [r0, #0]
 8025404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8025408:	f7db fc02 	bl	8000c10 <__aeabi_d2f>
 802540c:	ee00 0a10 	vmov	s0, r0
 8025410:	b00a      	add	sp, #40	; 0x28
 8025412:	ecbd 8b02 	vpop	{d8}
 8025416:	bd10      	pop	{r4, pc}
 8025418:	4610      	mov	r0, r2
 802541a:	4619      	mov	r1, r3
 802541c:	f7db fa2a 	bl	8000874 <__aeabi_ddiv>
 8025420:	2c02      	cmp	r4, #2
 8025422:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8025426:	d1e3      	bne.n	80253f0 <sqrtf+0x54>
 8025428:	f7fc fc7c 	bl	8021d24 <__errno>
 802542c:	2321      	movs	r3, #33	; 0x21
 802542e:	6003      	str	r3, [r0, #0]
 8025430:	e7e2      	b.n	80253f8 <sqrtf+0x5c>
 8025432:	bf00      	nop
 8025434:	2000113c 	.word	0x2000113c
 8025438:	08033bc6 	.word	0x08033bc6
 802543c:	00000000 	.word	0x00000000

08025440 <__ieee754_exp>:
 8025440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025444:	ec55 4b10 	vmov	r4, r5, d0
 8025448:	4aad      	ldr	r2, [pc, #692]	; (8025700 <__ieee754_exp+0x2c0>)
 802544a:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 802544e:	4297      	cmp	r7, r2
 8025450:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8025454:	f240 80af 	bls.w	80255b6 <__ieee754_exp+0x176>
 8025458:	4aaa      	ldr	r2, [pc, #680]	; (8025704 <__ieee754_exp+0x2c4>)
 802545a:	4297      	cmp	r7, r2
 802545c:	d915      	bls.n	802548a <__ieee754_exp+0x4a>
 802545e:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8025462:	4323      	orrs	r3, r4
 8025464:	d009      	beq.n	802547a <__ieee754_exp+0x3a>
 8025466:	ee10 2a10 	vmov	r2, s0
 802546a:	462b      	mov	r3, r5
 802546c:	4620      	mov	r0, r4
 802546e:	4629      	mov	r1, r5
 8025470:	f7da ff24 	bl	80002bc <__adddf3>
 8025474:	4604      	mov	r4, r0
 8025476:	460d      	mov	r5, r1
 8025478:	e002      	b.n	8025480 <__ieee754_exp+0x40>
 802547a:	b10e      	cbz	r6, 8025480 <__ieee754_exp+0x40>
 802547c:	2400      	movs	r4, #0
 802547e:	2500      	movs	r5, #0
 8025480:	ec45 4b10 	vmov	d0, r4, r5
 8025484:	b003      	add	sp, #12
 8025486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802548a:	a387      	add	r3, pc, #540	; (adr r3, 80256a8 <__ieee754_exp+0x268>)
 802548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025490:	ee10 0a10 	vmov	r0, s0
 8025494:	4629      	mov	r1, r5
 8025496:	f7db fb53 	bl	8000b40 <__aeabi_dcmpgt>
 802549a:	b138      	cbz	r0, 80254ac <__ieee754_exp+0x6c>
 802549c:	a384      	add	r3, pc, #528	; (adr r3, 80256b0 <__ieee754_exp+0x270>)
 802549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254a2:	4610      	mov	r0, r2
 80254a4:	4619      	mov	r1, r3
 80254a6:	f7db f8bb 	bl	8000620 <__aeabi_dmul>
 80254aa:	e7e3      	b.n	8025474 <__ieee754_exp+0x34>
 80254ac:	a382      	add	r3, pc, #520	; (adr r3, 80256b8 <__ieee754_exp+0x278>)
 80254ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254b2:	4620      	mov	r0, r4
 80254b4:	4629      	mov	r1, r5
 80254b6:	f7db fb25 	bl	8000b04 <__aeabi_dcmplt>
 80254ba:	2800      	cmp	r0, #0
 80254bc:	d1de      	bne.n	802547c <__ieee754_exp+0x3c>
 80254be:	4b92      	ldr	r3, [pc, #584]	; (8025708 <__ieee754_exp+0x2c8>)
 80254c0:	429f      	cmp	r7, r3
 80254c2:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 80254c6:	f200 808e 	bhi.w	80255e6 <__ieee754_exp+0x1a6>
 80254ca:	4b90      	ldr	r3, [pc, #576]	; (802570c <__ieee754_exp+0x2cc>)
 80254cc:	443b      	add	r3, r7
 80254ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80254d2:	4620      	mov	r0, r4
 80254d4:	4629      	mov	r1, r5
 80254d6:	f7da feef 	bl	80002b8 <__aeabi_dsub>
 80254da:	4b8d      	ldr	r3, [pc, #564]	; (8025710 <__ieee754_exp+0x2d0>)
 80254dc:	441f      	add	r7, r3
 80254de:	ed97 7b00 	vldr	d7, [r7]
 80254e2:	ed8d 7b00 	vstr	d7, [sp]
 80254e6:	4682      	mov	sl, r0
 80254e8:	f1c6 0001 	rsb	r0, r6, #1
 80254ec:	468b      	mov	fp, r1
 80254ee:	1b86      	subs	r6, r0, r6
 80254f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80254f4:	4650      	mov	r0, sl
 80254f6:	4659      	mov	r1, fp
 80254f8:	f7da fede 	bl	80002b8 <__aeabi_dsub>
 80254fc:	4604      	mov	r4, r0
 80254fe:	460d      	mov	r5, r1
 8025500:	4622      	mov	r2, r4
 8025502:	462b      	mov	r3, r5
 8025504:	4620      	mov	r0, r4
 8025506:	4629      	mov	r1, r5
 8025508:	f7db f88a 	bl	8000620 <__aeabi_dmul>
 802550c:	a36c      	add	r3, pc, #432	; (adr r3, 80256c0 <__ieee754_exp+0x280>)
 802550e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025512:	4680      	mov	r8, r0
 8025514:	4689      	mov	r9, r1
 8025516:	f7db f883 	bl	8000620 <__aeabi_dmul>
 802551a:	a36b      	add	r3, pc, #428	; (adr r3, 80256c8 <__ieee754_exp+0x288>)
 802551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025520:	f7da feca 	bl	80002b8 <__aeabi_dsub>
 8025524:	4642      	mov	r2, r8
 8025526:	464b      	mov	r3, r9
 8025528:	f7db f87a 	bl	8000620 <__aeabi_dmul>
 802552c:	a368      	add	r3, pc, #416	; (adr r3, 80256d0 <__ieee754_exp+0x290>)
 802552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025532:	f7da fec3 	bl	80002bc <__adddf3>
 8025536:	4642      	mov	r2, r8
 8025538:	464b      	mov	r3, r9
 802553a:	f7db f871 	bl	8000620 <__aeabi_dmul>
 802553e:	a366      	add	r3, pc, #408	; (adr r3, 80256d8 <__ieee754_exp+0x298>)
 8025540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025544:	f7da feb8 	bl	80002b8 <__aeabi_dsub>
 8025548:	4642      	mov	r2, r8
 802554a:	464b      	mov	r3, r9
 802554c:	f7db f868 	bl	8000620 <__aeabi_dmul>
 8025550:	a363      	add	r3, pc, #396	; (adr r3, 80256e0 <__ieee754_exp+0x2a0>)
 8025552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025556:	f7da feb1 	bl	80002bc <__adddf3>
 802555a:	4642      	mov	r2, r8
 802555c:	464b      	mov	r3, r9
 802555e:	f7db f85f 	bl	8000620 <__aeabi_dmul>
 8025562:	4602      	mov	r2, r0
 8025564:	460b      	mov	r3, r1
 8025566:	4620      	mov	r0, r4
 8025568:	4629      	mov	r1, r5
 802556a:	f7da fea5 	bl	80002b8 <__aeabi_dsub>
 802556e:	4680      	mov	r8, r0
 8025570:	4689      	mov	r9, r1
 8025572:	4602      	mov	r2, r0
 8025574:	460b      	mov	r3, r1
 8025576:	4620      	mov	r0, r4
 8025578:	4629      	mov	r1, r5
 802557a:	2e00      	cmp	r6, #0
 802557c:	d162      	bne.n	8025644 <__ieee754_exp+0x204>
 802557e:	f7db f84f 	bl	8000620 <__aeabi_dmul>
 8025582:	2200      	movs	r2, #0
 8025584:	4606      	mov	r6, r0
 8025586:	460f      	mov	r7, r1
 8025588:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802558c:	4640      	mov	r0, r8
 802558e:	4649      	mov	r1, r9
 8025590:	f7da fe92 	bl	80002b8 <__aeabi_dsub>
 8025594:	4602      	mov	r2, r0
 8025596:	460b      	mov	r3, r1
 8025598:	4630      	mov	r0, r6
 802559a:	4639      	mov	r1, r7
 802559c:	f7db f96a 	bl	8000874 <__aeabi_ddiv>
 80255a0:	4622      	mov	r2, r4
 80255a2:	462b      	mov	r3, r5
 80255a4:	f7da fe88 	bl	80002b8 <__aeabi_dsub>
 80255a8:	4602      	mov	r2, r0
 80255aa:	460b      	mov	r3, r1
 80255ac:	2000      	movs	r0, #0
 80255ae:	4959      	ldr	r1, [pc, #356]	; (8025714 <__ieee754_exp+0x2d4>)
 80255b0:	f7da fe82 	bl	80002b8 <__aeabi_dsub>
 80255b4:	e75e      	b.n	8025474 <__ieee754_exp+0x34>
 80255b6:	4b58      	ldr	r3, [pc, #352]	; (8025718 <__ieee754_exp+0x2d8>)
 80255b8:	429f      	cmp	r7, r3
 80255ba:	d880      	bhi.n	80254be <__ieee754_exp+0x7e>
 80255bc:	4b57      	ldr	r3, [pc, #348]	; (802571c <__ieee754_exp+0x2dc>)
 80255be:	429f      	cmp	r7, r3
 80255c0:	d83c      	bhi.n	802563c <__ieee754_exp+0x1fc>
 80255c2:	a33b      	add	r3, pc, #236	; (adr r3, 80256b0 <__ieee754_exp+0x270>)
 80255c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80255c8:	ee10 0a10 	vmov	r0, s0
 80255cc:	4629      	mov	r1, r5
 80255ce:	f7da fe75 	bl	80002bc <__adddf3>
 80255d2:	2200      	movs	r2, #0
 80255d4:	4b4f      	ldr	r3, [pc, #316]	; (8025714 <__ieee754_exp+0x2d4>)
 80255d6:	f7db fab3 	bl	8000b40 <__aeabi_dcmpgt>
 80255da:	b388      	cbz	r0, 8025640 <__ieee754_exp+0x200>
 80255dc:	2200      	movs	r2, #0
 80255de:	4b4d      	ldr	r3, [pc, #308]	; (8025714 <__ieee754_exp+0x2d4>)
 80255e0:	4620      	mov	r0, r4
 80255e2:	4629      	mov	r1, r5
 80255e4:	e744      	b.n	8025470 <__ieee754_exp+0x30>
 80255e6:	4e4e      	ldr	r6, [pc, #312]	; (8025720 <__ieee754_exp+0x2e0>)
 80255e8:	a33f      	add	r3, pc, #252	; (adr r3, 80256e8 <__ieee754_exp+0x2a8>)
 80255ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80255ee:	443e      	add	r6, r7
 80255f0:	4620      	mov	r0, r4
 80255f2:	4629      	mov	r1, r5
 80255f4:	f7db f814 	bl	8000620 <__aeabi_dmul>
 80255f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80255fc:	f7da fe5e 	bl	80002bc <__adddf3>
 8025600:	f7db fabe 	bl	8000b80 <__aeabi_d2iz>
 8025604:	4606      	mov	r6, r0
 8025606:	f7da ffa5 	bl	8000554 <__aeabi_i2d>
 802560a:	a339      	add	r3, pc, #228	; (adr r3, 80256f0 <__ieee754_exp+0x2b0>)
 802560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025610:	4680      	mov	r8, r0
 8025612:	4689      	mov	r9, r1
 8025614:	f7db f804 	bl	8000620 <__aeabi_dmul>
 8025618:	4602      	mov	r2, r0
 802561a:	460b      	mov	r3, r1
 802561c:	4620      	mov	r0, r4
 802561e:	4629      	mov	r1, r5
 8025620:	f7da fe4a 	bl	80002b8 <__aeabi_dsub>
 8025624:	a334      	add	r3, pc, #208	; (adr r3, 80256f8 <__ieee754_exp+0x2b8>)
 8025626:	e9d3 2300 	ldrd	r2, r3, [r3]
 802562a:	4682      	mov	sl, r0
 802562c:	468b      	mov	fp, r1
 802562e:	4640      	mov	r0, r8
 8025630:	4649      	mov	r1, r9
 8025632:	f7da fff5 	bl	8000620 <__aeabi_dmul>
 8025636:	e9cd 0100 	strd	r0, r1, [sp]
 802563a:	e759      	b.n	80254f0 <__ieee754_exp+0xb0>
 802563c:	2600      	movs	r6, #0
 802563e:	e75f      	b.n	8025500 <__ieee754_exp+0xc0>
 8025640:	4606      	mov	r6, r0
 8025642:	e75d      	b.n	8025500 <__ieee754_exp+0xc0>
 8025644:	f7da ffec 	bl	8000620 <__aeabi_dmul>
 8025648:	4642      	mov	r2, r8
 802564a:	4604      	mov	r4, r0
 802564c:	460d      	mov	r5, r1
 802564e:	464b      	mov	r3, r9
 8025650:	2000      	movs	r0, #0
 8025652:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8025656:	f7da fe2f 	bl	80002b8 <__aeabi_dsub>
 802565a:	4602      	mov	r2, r0
 802565c:	460b      	mov	r3, r1
 802565e:	4620      	mov	r0, r4
 8025660:	4629      	mov	r1, r5
 8025662:	f7db f907 	bl	8000874 <__aeabi_ddiv>
 8025666:	4602      	mov	r2, r0
 8025668:	460b      	mov	r3, r1
 802566a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802566e:	f7da fe23 	bl	80002b8 <__aeabi_dsub>
 8025672:	4652      	mov	r2, sl
 8025674:	465b      	mov	r3, fp
 8025676:	f7da fe1f 	bl	80002b8 <__aeabi_dsub>
 802567a:	460b      	mov	r3, r1
 802567c:	4602      	mov	r2, r0
 802567e:	4925      	ldr	r1, [pc, #148]	; (8025714 <__ieee754_exp+0x2d4>)
 8025680:	2000      	movs	r0, #0
 8025682:	f7da fe19 	bl	80002b8 <__aeabi_dsub>
 8025686:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 802568a:	429e      	cmp	r6, r3
 802568c:	db02      	blt.n	8025694 <__ieee754_exp+0x254>
 802568e:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 8025692:	e6ef      	b.n	8025474 <__ieee754_exp+0x34>
 8025694:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8025698:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 802569c:	2200      	movs	r2, #0
 802569e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80256a2:	e700      	b.n	80254a6 <__ieee754_exp+0x66>
 80256a4:	f3af 8000 	nop.w
 80256a8:	fefa39ef 	.word	0xfefa39ef
 80256ac:	40862e42 	.word	0x40862e42
 80256b0:	8800759c 	.word	0x8800759c
 80256b4:	7e37e43c 	.word	0x7e37e43c
 80256b8:	d52d3051 	.word	0xd52d3051
 80256bc:	c0874910 	.word	0xc0874910
 80256c0:	72bea4d0 	.word	0x72bea4d0
 80256c4:	3e663769 	.word	0x3e663769
 80256c8:	c5d26bf1 	.word	0xc5d26bf1
 80256cc:	3ebbbd41 	.word	0x3ebbbd41
 80256d0:	af25de2c 	.word	0xaf25de2c
 80256d4:	3f11566a 	.word	0x3f11566a
 80256d8:	16bebd93 	.word	0x16bebd93
 80256dc:	3f66c16c 	.word	0x3f66c16c
 80256e0:	5555553e 	.word	0x5555553e
 80256e4:	3fc55555 	.word	0x3fc55555
 80256e8:	652b82fe 	.word	0x652b82fe
 80256ec:	3ff71547 	.word	0x3ff71547
 80256f0:	fee00000 	.word	0xfee00000
 80256f4:	3fe62e42 	.word	0x3fe62e42
 80256f8:	35793c76 	.word	0x35793c76
 80256fc:	3dea39ef 	.word	0x3dea39ef
 8025700:	40862e41 	.word	0x40862e41
 8025704:	7fefffff 	.word	0x7fefffff
 8025708:	3ff0a2b1 	.word	0x3ff0a2b1
 802570c:	08033be0 	.word	0x08033be0
 8025710:	08033bf0 	.word	0x08033bf0
 8025714:	3ff00000 	.word	0x3ff00000
 8025718:	3fd62e42 	.word	0x3fd62e42
 802571c:	3e2fffff 	.word	0x3e2fffff
 8025720:	08033bd0 	.word	0x08033bd0
 8025724:	00000000 	.word	0x00000000

08025728 <__ieee754_log>:
 8025728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802572c:	ec51 0b10 	vmov	r0, r1, d0
 8025730:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8025734:	b087      	sub	sp, #28
 8025736:	ee10 3a10 	vmov	r3, s0
 802573a:	460d      	mov	r5, r1
 802573c:	da27      	bge.n	802578e <__ieee754_log+0x66>
 802573e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8025742:	4313      	orrs	r3, r2
 8025744:	d10a      	bne.n	802575c <__ieee754_log+0x34>
 8025746:	49cc      	ldr	r1, [pc, #816]	; (8025a78 <__ieee754_log+0x350>)
 8025748:	2200      	movs	r2, #0
 802574a:	2300      	movs	r3, #0
 802574c:	2000      	movs	r0, #0
 802574e:	f7db f891 	bl	8000874 <__aeabi_ddiv>
 8025752:	ec41 0b10 	vmov	d0, r0, r1
 8025756:	b007      	add	sp, #28
 8025758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802575c:	2900      	cmp	r1, #0
 802575e:	da07      	bge.n	8025770 <__ieee754_log+0x48>
 8025760:	ee10 2a10 	vmov	r2, s0
 8025764:	460b      	mov	r3, r1
 8025766:	f7da fda7 	bl	80002b8 <__aeabi_dsub>
 802576a:	2200      	movs	r2, #0
 802576c:	2300      	movs	r3, #0
 802576e:	e7ee      	b.n	802574e <__ieee754_log+0x26>
 8025770:	4bc2      	ldr	r3, [pc, #776]	; (8025a7c <__ieee754_log+0x354>)
 8025772:	2200      	movs	r2, #0
 8025774:	f7da ff54 	bl	8000620 <__aeabi_dmul>
 8025778:	f06f 0335 	mvn.w	r3, #53	; 0x35
 802577c:	460d      	mov	r5, r1
 802577e:	4ac0      	ldr	r2, [pc, #768]	; (8025a80 <__ieee754_log+0x358>)
 8025780:	4295      	cmp	r5, r2
 8025782:	dd06      	ble.n	8025792 <__ieee754_log+0x6a>
 8025784:	4602      	mov	r2, r0
 8025786:	460b      	mov	r3, r1
 8025788:	f7da fd98 	bl	80002bc <__adddf3>
 802578c:	e7e1      	b.n	8025752 <__ieee754_log+0x2a>
 802578e:	2300      	movs	r3, #0
 8025790:	e7f5      	b.n	802577e <__ieee754_log+0x56>
 8025792:	152c      	asrs	r4, r5, #20
 8025794:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8025798:	f3c5 0513 	ubfx	r5, r5, #0, #20
 802579c:	441c      	add	r4, r3
 802579e:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80257a2:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80257a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80257aa:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80257ae:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80257b2:	ea42 0105 	orr.w	r1, r2, r5
 80257b6:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80257ba:	2200      	movs	r2, #0
 80257bc:	4bb1      	ldr	r3, [pc, #708]	; (8025a84 <__ieee754_log+0x35c>)
 80257be:	f7da fd7b 	bl	80002b8 <__aeabi_dsub>
 80257c2:	1cab      	adds	r3, r5, #2
 80257c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80257c8:	2b02      	cmp	r3, #2
 80257ca:	4682      	mov	sl, r0
 80257cc:	468b      	mov	fp, r1
 80257ce:	f04f 0200 	mov.w	r2, #0
 80257d2:	dc5b      	bgt.n	802588c <__ieee754_log+0x164>
 80257d4:	2300      	movs	r3, #0
 80257d6:	f7db f98b 	bl	8000af0 <__aeabi_dcmpeq>
 80257da:	b1d0      	cbz	r0, 8025812 <__ieee754_log+0xea>
 80257dc:	2c00      	cmp	r4, #0
 80257de:	f000 8170 	beq.w	8025ac2 <__ieee754_log+0x39a>
 80257e2:	4620      	mov	r0, r4
 80257e4:	f7da feb6 	bl	8000554 <__aeabi_i2d>
 80257e8:	a38f      	add	r3, pc, #572	; (adr r3, 8025a28 <__ieee754_log+0x300>)
 80257ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257ee:	4606      	mov	r6, r0
 80257f0:	460f      	mov	r7, r1
 80257f2:	f7da ff15 	bl	8000620 <__aeabi_dmul>
 80257f6:	a38e      	add	r3, pc, #568	; (adr r3, 8025a30 <__ieee754_log+0x308>)
 80257f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80257fc:	4604      	mov	r4, r0
 80257fe:	460d      	mov	r5, r1
 8025800:	4630      	mov	r0, r6
 8025802:	4639      	mov	r1, r7
 8025804:	f7da ff0c 	bl	8000620 <__aeabi_dmul>
 8025808:	4602      	mov	r2, r0
 802580a:	460b      	mov	r3, r1
 802580c:	4620      	mov	r0, r4
 802580e:	4629      	mov	r1, r5
 8025810:	e7ba      	b.n	8025788 <__ieee754_log+0x60>
 8025812:	a389      	add	r3, pc, #548	; (adr r3, 8025a38 <__ieee754_log+0x310>)
 8025814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025818:	4650      	mov	r0, sl
 802581a:	4659      	mov	r1, fp
 802581c:	f7da ff00 	bl	8000620 <__aeabi_dmul>
 8025820:	4602      	mov	r2, r0
 8025822:	460b      	mov	r3, r1
 8025824:	2000      	movs	r0, #0
 8025826:	4998      	ldr	r1, [pc, #608]	; (8025a88 <__ieee754_log+0x360>)
 8025828:	f7da fd46 	bl	80002b8 <__aeabi_dsub>
 802582c:	4652      	mov	r2, sl
 802582e:	4606      	mov	r6, r0
 8025830:	460f      	mov	r7, r1
 8025832:	465b      	mov	r3, fp
 8025834:	4650      	mov	r0, sl
 8025836:	4659      	mov	r1, fp
 8025838:	f7da fef2 	bl	8000620 <__aeabi_dmul>
 802583c:	4602      	mov	r2, r0
 802583e:	460b      	mov	r3, r1
 8025840:	4630      	mov	r0, r6
 8025842:	4639      	mov	r1, r7
 8025844:	f7da feec 	bl	8000620 <__aeabi_dmul>
 8025848:	4606      	mov	r6, r0
 802584a:	460f      	mov	r7, r1
 802584c:	b934      	cbnz	r4, 802585c <__ieee754_log+0x134>
 802584e:	4602      	mov	r2, r0
 8025850:	460b      	mov	r3, r1
 8025852:	4650      	mov	r0, sl
 8025854:	4659      	mov	r1, fp
 8025856:	f7da fd2f 	bl	80002b8 <__aeabi_dsub>
 802585a:	e77a      	b.n	8025752 <__ieee754_log+0x2a>
 802585c:	4620      	mov	r0, r4
 802585e:	f7da fe79 	bl	8000554 <__aeabi_i2d>
 8025862:	a371      	add	r3, pc, #452	; (adr r3, 8025a28 <__ieee754_log+0x300>)
 8025864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025868:	4680      	mov	r8, r0
 802586a:	4689      	mov	r9, r1
 802586c:	f7da fed8 	bl	8000620 <__aeabi_dmul>
 8025870:	a36f      	add	r3, pc, #444	; (adr r3, 8025a30 <__ieee754_log+0x308>)
 8025872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025876:	4604      	mov	r4, r0
 8025878:	460d      	mov	r5, r1
 802587a:	4640      	mov	r0, r8
 802587c:	4649      	mov	r1, r9
 802587e:	f7da fecf 	bl	8000620 <__aeabi_dmul>
 8025882:	4602      	mov	r2, r0
 8025884:	460b      	mov	r3, r1
 8025886:	4630      	mov	r0, r6
 8025888:	4639      	mov	r1, r7
 802588a:	e0b2      	b.n	80259f2 <__ieee754_log+0x2ca>
 802588c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8025890:	f7da fd14 	bl	80002bc <__adddf3>
 8025894:	4602      	mov	r2, r0
 8025896:	460b      	mov	r3, r1
 8025898:	4650      	mov	r0, sl
 802589a:	4659      	mov	r1, fp
 802589c:	f7da ffea 	bl	8000874 <__aeabi_ddiv>
 80258a0:	e9cd 0100 	strd	r0, r1, [sp]
 80258a4:	4620      	mov	r0, r4
 80258a6:	f7da fe55 	bl	8000554 <__aeabi_i2d>
 80258aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80258ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80258b2:	4610      	mov	r0, r2
 80258b4:	4619      	mov	r1, r3
 80258b6:	f7da feb3 	bl	8000620 <__aeabi_dmul>
 80258ba:	4602      	mov	r2, r0
 80258bc:	460b      	mov	r3, r1
 80258be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80258c2:	f7da fead 	bl	8000620 <__aeabi_dmul>
 80258c6:	a35e      	add	r3, pc, #376	; (adr r3, 8025a40 <__ieee754_log+0x318>)
 80258c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258cc:	4606      	mov	r6, r0
 80258ce:	460f      	mov	r7, r1
 80258d0:	f7da fea6 	bl	8000620 <__aeabi_dmul>
 80258d4:	a35c      	add	r3, pc, #368	; (adr r3, 8025a48 <__ieee754_log+0x320>)
 80258d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258da:	f7da fcef 	bl	80002bc <__adddf3>
 80258de:	4632      	mov	r2, r6
 80258e0:	463b      	mov	r3, r7
 80258e2:	f7da fe9d 	bl	8000620 <__aeabi_dmul>
 80258e6:	a35a      	add	r3, pc, #360	; (adr r3, 8025a50 <__ieee754_log+0x328>)
 80258e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258ec:	f7da fce6 	bl	80002bc <__adddf3>
 80258f0:	4632      	mov	r2, r6
 80258f2:	463b      	mov	r3, r7
 80258f4:	f7da fe94 	bl	8000620 <__aeabi_dmul>
 80258f8:	a357      	add	r3, pc, #348	; (adr r3, 8025a58 <__ieee754_log+0x330>)
 80258fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80258fe:	f7da fcdd 	bl	80002bc <__adddf3>
 8025902:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8025906:	f7da fe8b 	bl	8000620 <__aeabi_dmul>
 802590a:	a355      	add	r3, pc, #340	; (adr r3, 8025a60 <__ieee754_log+0x338>)
 802590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025910:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025914:	4630      	mov	r0, r6
 8025916:	4639      	mov	r1, r7
 8025918:	f7da fe82 	bl	8000620 <__aeabi_dmul>
 802591c:	a352      	add	r3, pc, #328	; (adr r3, 8025a68 <__ieee754_log+0x340>)
 802591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025922:	f7da fccb 	bl	80002bc <__adddf3>
 8025926:	4632      	mov	r2, r6
 8025928:	463b      	mov	r3, r7
 802592a:	f7da fe79 	bl	8000620 <__aeabi_dmul>
 802592e:	a350      	add	r3, pc, #320	; (adr r3, 8025a70 <__ieee754_log+0x348>)
 8025930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025934:	f7da fcc2 	bl	80002bc <__adddf3>
 8025938:	4632      	mov	r2, r6
 802593a:	463b      	mov	r3, r7
 802593c:	f7da fe70 	bl	8000620 <__aeabi_dmul>
 8025940:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 8025944:	4602      	mov	r2, r0
 8025946:	460b      	mov	r3, r1
 8025948:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 802594c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8025950:	f7da fcb4 	bl	80002bc <__adddf3>
 8025954:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 8025958:	3551      	adds	r5, #81	; 0x51
 802595a:	ea45 0508 	orr.w	r5, r5, r8
 802595e:	2d00      	cmp	r5, #0
 8025960:	4606      	mov	r6, r0
 8025962:	460f      	mov	r7, r1
 8025964:	dd50      	ble.n	8025a08 <__ieee754_log+0x2e0>
 8025966:	2200      	movs	r2, #0
 8025968:	4b47      	ldr	r3, [pc, #284]	; (8025a88 <__ieee754_log+0x360>)
 802596a:	4650      	mov	r0, sl
 802596c:	4659      	mov	r1, fp
 802596e:	f7da fe57 	bl	8000620 <__aeabi_dmul>
 8025972:	4652      	mov	r2, sl
 8025974:	465b      	mov	r3, fp
 8025976:	f7da fe53 	bl	8000620 <__aeabi_dmul>
 802597a:	4680      	mov	r8, r0
 802597c:	4689      	mov	r9, r1
 802597e:	b994      	cbnz	r4, 80259a6 <__ieee754_log+0x27e>
 8025980:	4602      	mov	r2, r0
 8025982:	460b      	mov	r3, r1
 8025984:	4630      	mov	r0, r6
 8025986:	4639      	mov	r1, r7
 8025988:	f7da fc98 	bl	80002bc <__adddf3>
 802598c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025990:	f7da fe46 	bl	8000620 <__aeabi_dmul>
 8025994:	4602      	mov	r2, r0
 8025996:	460b      	mov	r3, r1
 8025998:	4640      	mov	r0, r8
 802599a:	4649      	mov	r1, r9
 802599c:	f7da fc8c 	bl	80002b8 <__aeabi_dsub>
 80259a0:	4602      	mov	r2, r0
 80259a2:	460b      	mov	r3, r1
 80259a4:	e755      	b.n	8025852 <__ieee754_log+0x12a>
 80259a6:	a320      	add	r3, pc, #128	; (adr r3, 8025a28 <__ieee754_log+0x300>)
 80259a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80259b0:	f7da fe36 	bl	8000620 <__aeabi_dmul>
 80259b4:	4642      	mov	r2, r8
 80259b6:	464b      	mov	r3, r9
 80259b8:	4604      	mov	r4, r0
 80259ba:	460d      	mov	r5, r1
 80259bc:	4630      	mov	r0, r6
 80259be:	4639      	mov	r1, r7
 80259c0:	f7da fc7c 	bl	80002bc <__adddf3>
 80259c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80259c8:	f7da fe2a 	bl	8000620 <__aeabi_dmul>
 80259cc:	a318      	add	r3, pc, #96	; (adr r3, 8025a30 <__ieee754_log+0x308>)
 80259ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80259d2:	4606      	mov	r6, r0
 80259d4:	460f      	mov	r7, r1
 80259d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80259da:	f7da fe21 	bl	8000620 <__aeabi_dmul>
 80259de:	4602      	mov	r2, r0
 80259e0:	460b      	mov	r3, r1
 80259e2:	4630      	mov	r0, r6
 80259e4:	4639      	mov	r1, r7
 80259e6:	f7da fc69 	bl	80002bc <__adddf3>
 80259ea:	4602      	mov	r2, r0
 80259ec:	460b      	mov	r3, r1
 80259ee:	4640      	mov	r0, r8
 80259f0:	4649      	mov	r1, r9
 80259f2:	f7da fc61 	bl	80002b8 <__aeabi_dsub>
 80259f6:	4652      	mov	r2, sl
 80259f8:	465b      	mov	r3, fp
 80259fa:	f7da fc5d 	bl	80002b8 <__aeabi_dsub>
 80259fe:	4602      	mov	r2, r0
 8025a00:	460b      	mov	r3, r1
 8025a02:	4620      	mov	r0, r4
 8025a04:	4629      	mov	r1, r5
 8025a06:	e726      	b.n	8025856 <__ieee754_log+0x12e>
 8025a08:	2c00      	cmp	r4, #0
 8025a0a:	d13f      	bne.n	8025a8c <__ieee754_log+0x364>
 8025a0c:	4602      	mov	r2, r0
 8025a0e:	460b      	mov	r3, r1
 8025a10:	4650      	mov	r0, sl
 8025a12:	4659      	mov	r1, fp
 8025a14:	f7da fc50 	bl	80002b8 <__aeabi_dsub>
 8025a18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025a1c:	f7da fe00 	bl	8000620 <__aeabi_dmul>
 8025a20:	e7be      	b.n	80259a0 <__ieee754_log+0x278>
 8025a22:	bf00      	nop
 8025a24:	f3af 8000 	nop.w
 8025a28:	fee00000 	.word	0xfee00000
 8025a2c:	3fe62e42 	.word	0x3fe62e42
 8025a30:	35793c76 	.word	0x35793c76
 8025a34:	3dea39ef 	.word	0x3dea39ef
 8025a38:	55555555 	.word	0x55555555
 8025a3c:	3fd55555 	.word	0x3fd55555
 8025a40:	df3e5244 	.word	0xdf3e5244
 8025a44:	3fc2f112 	.word	0x3fc2f112
 8025a48:	96cb03de 	.word	0x96cb03de
 8025a4c:	3fc74664 	.word	0x3fc74664
 8025a50:	94229359 	.word	0x94229359
 8025a54:	3fd24924 	.word	0x3fd24924
 8025a58:	55555593 	.word	0x55555593
 8025a5c:	3fe55555 	.word	0x3fe55555
 8025a60:	d078c69f 	.word	0xd078c69f
 8025a64:	3fc39a09 	.word	0x3fc39a09
 8025a68:	1d8e78af 	.word	0x1d8e78af
 8025a6c:	3fcc71c5 	.word	0x3fcc71c5
 8025a70:	9997fa04 	.word	0x9997fa04
 8025a74:	3fd99999 	.word	0x3fd99999
 8025a78:	c3500000 	.word	0xc3500000
 8025a7c:	43500000 	.word	0x43500000
 8025a80:	7fefffff 	.word	0x7fefffff
 8025a84:	3ff00000 	.word	0x3ff00000
 8025a88:	3fe00000 	.word	0x3fe00000
 8025a8c:	a30e      	add	r3, pc, #56	; (adr r3, 8025ac8 <__ieee754_log+0x3a0>)
 8025a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025a92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025a96:	f7da fdc3 	bl	8000620 <__aeabi_dmul>
 8025a9a:	4632      	mov	r2, r6
 8025a9c:	463b      	mov	r3, r7
 8025a9e:	4604      	mov	r4, r0
 8025aa0:	460d      	mov	r5, r1
 8025aa2:	4650      	mov	r0, sl
 8025aa4:	4659      	mov	r1, fp
 8025aa6:	f7da fc07 	bl	80002b8 <__aeabi_dsub>
 8025aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025aae:	f7da fdb7 	bl	8000620 <__aeabi_dmul>
 8025ab2:	a307      	add	r3, pc, #28	; (adr r3, 8025ad0 <__ieee754_log+0x3a8>)
 8025ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ab8:	4606      	mov	r6, r0
 8025aba:	460f      	mov	r7, r1
 8025abc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025ac0:	e6dd      	b.n	802587e <__ieee754_log+0x156>
 8025ac2:	2000      	movs	r0, #0
 8025ac4:	2100      	movs	r1, #0
 8025ac6:	e644      	b.n	8025752 <__ieee754_log+0x2a>
 8025ac8:	fee00000 	.word	0xfee00000
 8025acc:	3fe62e42 	.word	0x3fe62e42
 8025ad0:	35793c76 	.word	0x35793c76
 8025ad4:	3dea39ef 	.word	0x3dea39ef

08025ad8 <__ieee754_pow>:
 8025ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025adc:	b091      	sub	sp, #68	; 0x44
 8025ade:	ed8d 1b00 	vstr	d1, [sp]
 8025ae2:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8025ae6:	ec57 6b10 	vmov	r6, r7, d0
 8025aea:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8025aee:	ea58 0302 	orrs.w	r3, r8, r2
 8025af2:	ee10 aa10 	vmov	sl, s0
 8025af6:	463d      	mov	r5, r7
 8025af8:	f000 84bd 	beq.w	8026476 <__ieee754_pow+0x99e>
 8025afc:	4b78      	ldr	r3, [pc, #480]	; (8025ce0 <__ieee754_pow+0x208>)
 8025afe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8025b02:	429c      	cmp	r4, r3
 8025b04:	dc09      	bgt.n	8025b1a <__ieee754_pow+0x42>
 8025b06:	d103      	bne.n	8025b10 <__ieee754_pow+0x38>
 8025b08:	b93e      	cbnz	r6, 8025b1a <__ieee754_pow+0x42>
 8025b0a:	45a0      	cmp	r8, r4
 8025b0c:	dc0d      	bgt.n	8025b2a <__ieee754_pow+0x52>
 8025b0e:	e001      	b.n	8025b14 <__ieee754_pow+0x3c>
 8025b10:	4598      	cmp	r8, r3
 8025b12:	dc02      	bgt.n	8025b1a <__ieee754_pow+0x42>
 8025b14:	4598      	cmp	r8, r3
 8025b16:	d10e      	bne.n	8025b36 <__ieee754_pow+0x5e>
 8025b18:	b16a      	cbz	r2, 8025b36 <__ieee754_pow+0x5e>
 8025b1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8025b1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8025b22:	ea54 030a 	orrs.w	r3, r4, sl
 8025b26:	f000 84a6 	beq.w	8026476 <__ieee754_pow+0x99e>
 8025b2a:	486e      	ldr	r0, [pc, #440]	; (8025ce4 <__ieee754_pow+0x20c>)
 8025b2c:	b011      	add	sp, #68	; 0x44
 8025b2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025b32:	f000 bded 	b.w	8026710 <nan>
 8025b36:	2d00      	cmp	r5, #0
 8025b38:	da53      	bge.n	8025be2 <__ieee754_pow+0x10a>
 8025b3a:	4b6b      	ldr	r3, [pc, #428]	; (8025ce8 <__ieee754_pow+0x210>)
 8025b3c:	4598      	cmp	r8, r3
 8025b3e:	dc4d      	bgt.n	8025bdc <__ieee754_pow+0x104>
 8025b40:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8025b44:	4598      	cmp	r8, r3
 8025b46:	dd4c      	ble.n	8025be2 <__ieee754_pow+0x10a>
 8025b48:	ea4f 5328 	mov.w	r3, r8, asr #20
 8025b4c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8025b50:	2b14      	cmp	r3, #20
 8025b52:	dd26      	ble.n	8025ba2 <__ieee754_pow+0xca>
 8025b54:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8025b58:	fa22 f103 	lsr.w	r1, r2, r3
 8025b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8025b60:	429a      	cmp	r2, r3
 8025b62:	d13e      	bne.n	8025be2 <__ieee754_pow+0x10a>
 8025b64:	f001 0101 	and.w	r1, r1, #1
 8025b68:	f1c1 0b02 	rsb	fp, r1, #2
 8025b6c:	2a00      	cmp	r2, #0
 8025b6e:	d15b      	bne.n	8025c28 <__ieee754_pow+0x150>
 8025b70:	4b5b      	ldr	r3, [pc, #364]	; (8025ce0 <__ieee754_pow+0x208>)
 8025b72:	4598      	cmp	r8, r3
 8025b74:	d124      	bne.n	8025bc0 <__ieee754_pow+0xe8>
 8025b76:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8025b7a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8025b7e:	ea53 030a 	orrs.w	r3, r3, sl
 8025b82:	f000 8478 	beq.w	8026476 <__ieee754_pow+0x99e>
 8025b86:	4b59      	ldr	r3, [pc, #356]	; (8025cec <__ieee754_pow+0x214>)
 8025b88:	429c      	cmp	r4, r3
 8025b8a:	dd2d      	ble.n	8025be8 <__ieee754_pow+0x110>
 8025b8c:	f1b9 0f00 	cmp.w	r9, #0
 8025b90:	f280 8475 	bge.w	802647e <__ieee754_pow+0x9a6>
 8025b94:	2000      	movs	r0, #0
 8025b96:	2100      	movs	r1, #0
 8025b98:	ec41 0b10 	vmov	d0, r0, r1
 8025b9c:	b011      	add	sp, #68	; 0x44
 8025b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025ba2:	2a00      	cmp	r2, #0
 8025ba4:	d13e      	bne.n	8025c24 <__ieee754_pow+0x14c>
 8025ba6:	f1c3 0314 	rsb	r3, r3, #20
 8025baa:	fa48 f103 	asr.w	r1, r8, r3
 8025bae:	fa01 f303 	lsl.w	r3, r1, r3
 8025bb2:	4598      	cmp	r8, r3
 8025bb4:	f040 846b 	bne.w	802648e <__ieee754_pow+0x9b6>
 8025bb8:	f001 0101 	and.w	r1, r1, #1
 8025bbc:	f1c1 0b02 	rsb	fp, r1, #2
 8025bc0:	4b4b      	ldr	r3, [pc, #300]	; (8025cf0 <__ieee754_pow+0x218>)
 8025bc2:	4598      	cmp	r8, r3
 8025bc4:	d118      	bne.n	8025bf8 <__ieee754_pow+0x120>
 8025bc6:	f1b9 0f00 	cmp.w	r9, #0
 8025bca:	f280 845c 	bge.w	8026486 <__ieee754_pow+0x9ae>
 8025bce:	4948      	ldr	r1, [pc, #288]	; (8025cf0 <__ieee754_pow+0x218>)
 8025bd0:	4632      	mov	r2, r6
 8025bd2:	463b      	mov	r3, r7
 8025bd4:	2000      	movs	r0, #0
 8025bd6:	f7da fe4d 	bl	8000874 <__aeabi_ddiv>
 8025bda:	e7dd      	b.n	8025b98 <__ieee754_pow+0xc0>
 8025bdc:	f04f 0b02 	mov.w	fp, #2
 8025be0:	e7c4      	b.n	8025b6c <__ieee754_pow+0x94>
 8025be2:	f04f 0b00 	mov.w	fp, #0
 8025be6:	e7c1      	b.n	8025b6c <__ieee754_pow+0x94>
 8025be8:	f1b9 0f00 	cmp.w	r9, #0
 8025bec:	dad2      	bge.n	8025b94 <__ieee754_pow+0xbc>
 8025bee:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8025bf2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8025bf6:	e7cf      	b.n	8025b98 <__ieee754_pow+0xc0>
 8025bf8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8025bfc:	d106      	bne.n	8025c0c <__ieee754_pow+0x134>
 8025bfe:	4632      	mov	r2, r6
 8025c00:	463b      	mov	r3, r7
 8025c02:	4610      	mov	r0, r2
 8025c04:	4619      	mov	r1, r3
 8025c06:	f7da fd0b 	bl	8000620 <__aeabi_dmul>
 8025c0a:	e7c5      	b.n	8025b98 <__ieee754_pow+0xc0>
 8025c0c:	4b39      	ldr	r3, [pc, #228]	; (8025cf4 <__ieee754_pow+0x21c>)
 8025c0e:	4599      	cmp	r9, r3
 8025c10:	d10a      	bne.n	8025c28 <__ieee754_pow+0x150>
 8025c12:	2d00      	cmp	r5, #0
 8025c14:	db08      	blt.n	8025c28 <__ieee754_pow+0x150>
 8025c16:	ec47 6b10 	vmov	d0, r6, r7
 8025c1a:	b011      	add	sp, #68	; 0x44
 8025c1c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c20:	f000 bc6c 	b.w	80264fc <__ieee754_sqrt>
 8025c24:	f04f 0b00 	mov.w	fp, #0
 8025c28:	ec47 6b10 	vmov	d0, r6, r7
 8025c2c:	f000 fd5d 	bl	80266ea <fabs>
 8025c30:	ec51 0b10 	vmov	r0, r1, d0
 8025c34:	f1ba 0f00 	cmp.w	sl, #0
 8025c38:	d127      	bne.n	8025c8a <__ieee754_pow+0x1b2>
 8025c3a:	b124      	cbz	r4, 8025c46 <__ieee754_pow+0x16e>
 8025c3c:	4b2c      	ldr	r3, [pc, #176]	; (8025cf0 <__ieee754_pow+0x218>)
 8025c3e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8025c42:	429a      	cmp	r2, r3
 8025c44:	d121      	bne.n	8025c8a <__ieee754_pow+0x1b2>
 8025c46:	f1b9 0f00 	cmp.w	r9, #0
 8025c4a:	da05      	bge.n	8025c58 <__ieee754_pow+0x180>
 8025c4c:	4602      	mov	r2, r0
 8025c4e:	460b      	mov	r3, r1
 8025c50:	2000      	movs	r0, #0
 8025c52:	4927      	ldr	r1, [pc, #156]	; (8025cf0 <__ieee754_pow+0x218>)
 8025c54:	f7da fe0e 	bl	8000874 <__aeabi_ddiv>
 8025c58:	2d00      	cmp	r5, #0
 8025c5a:	da9d      	bge.n	8025b98 <__ieee754_pow+0xc0>
 8025c5c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8025c60:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8025c64:	ea54 030b 	orrs.w	r3, r4, fp
 8025c68:	d108      	bne.n	8025c7c <__ieee754_pow+0x1a4>
 8025c6a:	4602      	mov	r2, r0
 8025c6c:	460b      	mov	r3, r1
 8025c6e:	4610      	mov	r0, r2
 8025c70:	4619      	mov	r1, r3
 8025c72:	f7da fb21 	bl	80002b8 <__aeabi_dsub>
 8025c76:	4602      	mov	r2, r0
 8025c78:	460b      	mov	r3, r1
 8025c7a:	e7ac      	b.n	8025bd6 <__ieee754_pow+0xfe>
 8025c7c:	f1bb 0f01 	cmp.w	fp, #1
 8025c80:	d18a      	bne.n	8025b98 <__ieee754_pow+0xc0>
 8025c82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8025c86:	4619      	mov	r1, r3
 8025c88:	e786      	b.n	8025b98 <__ieee754_pow+0xc0>
 8025c8a:	0fed      	lsrs	r5, r5, #31
 8025c8c:	1e6b      	subs	r3, r5, #1
 8025c8e:	930d      	str	r3, [sp, #52]	; 0x34
 8025c90:	ea5b 0303 	orrs.w	r3, fp, r3
 8025c94:	d102      	bne.n	8025c9c <__ieee754_pow+0x1c4>
 8025c96:	4632      	mov	r2, r6
 8025c98:	463b      	mov	r3, r7
 8025c9a:	e7e8      	b.n	8025c6e <__ieee754_pow+0x196>
 8025c9c:	4b16      	ldr	r3, [pc, #88]	; (8025cf8 <__ieee754_pow+0x220>)
 8025c9e:	4598      	cmp	r8, r3
 8025ca0:	f340 80fe 	ble.w	8025ea0 <__ieee754_pow+0x3c8>
 8025ca4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8025ca8:	4598      	cmp	r8, r3
 8025caa:	dd0a      	ble.n	8025cc2 <__ieee754_pow+0x1ea>
 8025cac:	4b0f      	ldr	r3, [pc, #60]	; (8025cec <__ieee754_pow+0x214>)
 8025cae:	429c      	cmp	r4, r3
 8025cb0:	dc0d      	bgt.n	8025cce <__ieee754_pow+0x1f6>
 8025cb2:	f1b9 0f00 	cmp.w	r9, #0
 8025cb6:	f6bf af6d 	bge.w	8025b94 <__ieee754_pow+0xbc>
 8025cba:	a307      	add	r3, pc, #28	; (adr r3, 8025cd8 <__ieee754_pow+0x200>)
 8025cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025cc0:	e79f      	b.n	8025c02 <__ieee754_pow+0x12a>
 8025cc2:	4b0e      	ldr	r3, [pc, #56]	; (8025cfc <__ieee754_pow+0x224>)
 8025cc4:	429c      	cmp	r4, r3
 8025cc6:	ddf4      	ble.n	8025cb2 <__ieee754_pow+0x1da>
 8025cc8:	4b09      	ldr	r3, [pc, #36]	; (8025cf0 <__ieee754_pow+0x218>)
 8025cca:	429c      	cmp	r4, r3
 8025ccc:	dd18      	ble.n	8025d00 <__ieee754_pow+0x228>
 8025cce:	f1b9 0f00 	cmp.w	r9, #0
 8025cd2:	dcf2      	bgt.n	8025cba <__ieee754_pow+0x1e2>
 8025cd4:	e75e      	b.n	8025b94 <__ieee754_pow+0xbc>
 8025cd6:	bf00      	nop
 8025cd8:	8800759c 	.word	0x8800759c
 8025cdc:	7e37e43c 	.word	0x7e37e43c
 8025ce0:	7ff00000 	.word	0x7ff00000
 8025ce4:	08033851 	.word	0x08033851
 8025ce8:	433fffff 	.word	0x433fffff
 8025cec:	3fefffff 	.word	0x3fefffff
 8025cf0:	3ff00000 	.word	0x3ff00000
 8025cf4:	3fe00000 	.word	0x3fe00000
 8025cf8:	41e00000 	.word	0x41e00000
 8025cfc:	3feffffe 	.word	0x3feffffe
 8025d00:	2200      	movs	r2, #0
 8025d02:	4b63      	ldr	r3, [pc, #396]	; (8025e90 <__ieee754_pow+0x3b8>)
 8025d04:	f7da fad8 	bl	80002b8 <__aeabi_dsub>
 8025d08:	a355      	add	r3, pc, #340	; (adr r3, 8025e60 <__ieee754_pow+0x388>)
 8025d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d0e:	4604      	mov	r4, r0
 8025d10:	460d      	mov	r5, r1
 8025d12:	f7da fc85 	bl	8000620 <__aeabi_dmul>
 8025d16:	a354      	add	r3, pc, #336	; (adr r3, 8025e68 <__ieee754_pow+0x390>)
 8025d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d1c:	4606      	mov	r6, r0
 8025d1e:	460f      	mov	r7, r1
 8025d20:	4620      	mov	r0, r4
 8025d22:	4629      	mov	r1, r5
 8025d24:	f7da fc7c 	bl	8000620 <__aeabi_dmul>
 8025d28:	2200      	movs	r2, #0
 8025d2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8025d2e:	4b59      	ldr	r3, [pc, #356]	; (8025e94 <__ieee754_pow+0x3bc>)
 8025d30:	4620      	mov	r0, r4
 8025d32:	4629      	mov	r1, r5
 8025d34:	f7da fc74 	bl	8000620 <__aeabi_dmul>
 8025d38:	4602      	mov	r2, r0
 8025d3a:	460b      	mov	r3, r1
 8025d3c:	a14c      	add	r1, pc, #304	; (adr r1, 8025e70 <__ieee754_pow+0x398>)
 8025d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8025d42:	f7da fab9 	bl	80002b8 <__aeabi_dsub>
 8025d46:	4622      	mov	r2, r4
 8025d48:	462b      	mov	r3, r5
 8025d4a:	f7da fc69 	bl	8000620 <__aeabi_dmul>
 8025d4e:	4602      	mov	r2, r0
 8025d50:	460b      	mov	r3, r1
 8025d52:	2000      	movs	r0, #0
 8025d54:	4950      	ldr	r1, [pc, #320]	; (8025e98 <__ieee754_pow+0x3c0>)
 8025d56:	f7da faaf 	bl	80002b8 <__aeabi_dsub>
 8025d5a:	4622      	mov	r2, r4
 8025d5c:	462b      	mov	r3, r5
 8025d5e:	4680      	mov	r8, r0
 8025d60:	4689      	mov	r9, r1
 8025d62:	4620      	mov	r0, r4
 8025d64:	4629      	mov	r1, r5
 8025d66:	f7da fc5b 	bl	8000620 <__aeabi_dmul>
 8025d6a:	4602      	mov	r2, r0
 8025d6c:	460b      	mov	r3, r1
 8025d6e:	4640      	mov	r0, r8
 8025d70:	4649      	mov	r1, r9
 8025d72:	f7da fc55 	bl	8000620 <__aeabi_dmul>
 8025d76:	a340      	add	r3, pc, #256	; (adr r3, 8025e78 <__ieee754_pow+0x3a0>)
 8025d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025d7c:	f7da fc50 	bl	8000620 <__aeabi_dmul>
 8025d80:	4602      	mov	r2, r0
 8025d82:	460b      	mov	r3, r1
 8025d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025d88:	f7da fa96 	bl	80002b8 <__aeabi_dsub>
 8025d8c:	4602      	mov	r2, r0
 8025d8e:	460b      	mov	r3, r1
 8025d90:	4604      	mov	r4, r0
 8025d92:	460d      	mov	r5, r1
 8025d94:	4630      	mov	r0, r6
 8025d96:	4639      	mov	r1, r7
 8025d98:	f7da fa90 	bl	80002bc <__adddf3>
 8025d9c:	2000      	movs	r0, #0
 8025d9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025da2:	4632      	mov	r2, r6
 8025da4:	463b      	mov	r3, r7
 8025da6:	f7da fa87 	bl	80002b8 <__aeabi_dsub>
 8025daa:	4602      	mov	r2, r0
 8025dac:	460b      	mov	r3, r1
 8025dae:	4620      	mov	r0, r4
 8025db0:	4629      	mov	r1, r5
 8025db2:	f7da fa81 	bl	80002b8 <__aeabi_dsub>
 8025db6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8025db8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8025dbc:	4313      	orrs	r3, r2
 8025dbe:	4606      	mov	r6, r0
 8025dc0:	460f      	mov	r7, r1
 8025dc2:	f040 81eb 	bne.w	802619c <__ieee754_pow+0x6c4>
 8025dc6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8025e80 <__ieee754_pow+0x3a8>
 8025dca:	e9dd 4500 	ldrd	r4, r5, [sp]
 8025dce:	2400      	movs	r4, #0
 8025dd0:	4622      	mov	r2, r4
 8025dd2:	462b      	mov	r3, r5
 8025dd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8025dd8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8025ddc:	f7da fa6c 	bl	80002b8 <__aeabi_dsub>
 8025de0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8025de4:	f7da fc1c 	bl	8000620 <__aeabi_dmul>
 8025de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8025dec:	4680      	mov	r8, r0
 8025dee:	4689      	mov	r9, r1
 8025df0:	4630      	mov	r0, r6
 8025df2:	4639      	mov	r1, r7
 8025df4:	f7da fc14 	bl	8000620 <__aeabi_dmul>
 8025df8:	4602      	mov	r2, r0
 8025dfa:	460b      	mov	r3, r1
 8025dfc:	4640      	mov	r0, r8
 8025dfe:	4649      	mov	r1, r9
 8025e00:	f7da fa5c 	bl	80002bc <__adddf3>
 8025e04:	4622      	mov	r2, r4
 8025e06:	462b      	mov	r3, r5
 8025e08:	4680      	mov	r8, r0
 8025e0a:	4689      	mov	r9, r1
 8025e0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8025e10:	f7da fc06 	bl	8000620 <__aeabi_dmul>
 8025e14:	460b      	mov	r3, r1
 8025e16:	4604      	mov	r4, r0
 8025e18:	460d      	mov	r5, r1
 8025e1a:	4602      	mov	r2, r0
 8025e1c:	4649      	mov	r1, r9
 8025e1e:	4640      	mov	r0, r8
 8025e20:	e9cd 4500 	strd	r4, r5, [sp]
 8025e24:	f7da fa4a 	bl	80002bc <__adddf3>
 8025e28:	4b1c      	ldr	r3, [pc, #112]	; (8025e9c <__ieee754_pow+0x3c4>)
 8025e2a:	4299      	cmp	r1, r3
 8025e2c:	4606      	mov	r6, r0
 8025e2e:	460f      	mov	r7, r1
 8025e30:	468b      	mov	fp, r1
 8025e32:	f340 82f7 	ble.w	8026424 <__ieee754_pow+0x94c>
 8025e36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8025e3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8025e3e:	4303      	orrs	r3, r0
 8025e40:	f000 81ea 	beq.w	8026218 <__ieee754_pow+0x740>
 8025e44:	a310      	add	r3, pc, #64	; (adr r3, 8025e88 <__ieee754_pow+0x3b0>)
 8025e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8025e4e:	f7da fbe7 	bl	8000620 <__aeabi_dmul>
 8025e52:	a30d      	add	r3, pc, #52	; (adr r3, 8025e88 <__ieee754_pow+0x3b0>)
 8025e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025e58:	e6d5      	b.n	8025c06 <__ieee754_pow+0x12e>
 8025e5a:	bf00      	nop
 8025e5c:	f3af 8000 	nop.w
 8025e60:	60000000 	.word	0x60000000
 8025e64:	3ff71547 	.word	0x3ff71547
 8025e68:	f85ddf44 	.word	0xf85ddf44
 8025e6c:	3e54ae0b 	.word	0x3e54ae0b
 8025e70:	55555555 	.word	0x55555555
 8025e74:	3fd55555 	.word	0x3fd55555
 8025e78:	652b82fe 	.word	0x652b82fe
 8025e7c:	3ff71547 	.word	0x3ff71547
 8025e80:	00000000 	.word	0x00000000
 8025e84:	bff00000 	.word	0xbff00000
 8025e88:	8800759c 	.word	0x8800759c
 8025e8c:	7e37e43c 	.word	0x7e37e43c
 8025e90:	3ff00000 	.word	0x3ff00000
 8025e94:	3fd00000 	.word	0x3fd00000
 8025e98:	3fe00000 	.word	0x3fe00000
 8025e9c:	408fffff 	.word	0x408fffff
 8025ea0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8025ea4:	f04f 0200 	mov.w	r2, #0
 8025ea8:	da05      	bge.n	8025eb6 <__ieee754_pow+0x3de>
 8025eaa:	4bd3      	ldr	r3, [pc, #844]	; (80261f8 <__ieee754_pow+0x720>)
 8025eac:	f7da fbb8 	bl	8000620 <__aeabi_dmul>
 8025eb0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8025eb4:	460c      	mov	r4, r1
 8025eb6:	1523      	asrs	r3, r4, #20
 8025eb8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8025ebc:	4413      	add	r3, r2
 8025ebe:	9307      	str	r3, [sp, #28]
 8025ec0:	4bce      	ldr	r3, [pc, #824]	; (80261fc <__ieee754_pow+0x724>)
 8025ec2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8025ec6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8025eca:	429c      	cmp	r4, r3
 8025ecc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8025ed0:	dd08      	ble.n	8025ee4 <__ieee754_pow+0x40c>
 8025ed2:	4bcb      	ldr	r3, [pc, #812]	; (8026200 <__ieee754_pow+0x728>)
 8025ed4:	429c      	cmp	r4, r3
 8025ed6:	f340 815e 	ble.w	8026196 <__ieee754_pow+0x6be>
 8025eda:	9b07      	ldr	r3, [sp, #28]
 8025edc:	3301      	adds	r3, #1
 8025ede:	9307      	str	r3, [sp, #28]
 8025ee0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8025ee4:	f04f 0a00 	mov.w	sl, #0
 8025ee8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8025eec:	930c      	str	r3, [sp, #48]	; 0x30
 8025eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025ef0:	4bc4      	ldr	r3, [pc, #784]	; (8026204 <__ieee754_pow+0x72c>)
 8025ef2:	4413      	add	r3, r2
 8025ef4:	ed93 7b00 	vldr	d7, [r3]
 8025ef8:	4629      	mov	r1, r5
 8025efa:	ec53 2b17 	vmov	r2, r3, d7
 8025efe:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8025f02:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8025f06:	f7da f9d7 	bl	80002b8 <__aeabi_dsub>
 8025f0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8025f0e:	4606      	mov	r6, r0
 8025f10:	460f      	mov	r7, r1
 8025f12:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8025f16:	f7da f9d1 	bl	80002bc <__adddf3>
 8025f1a:	4602      	mov	r2, r0
 8025f1c:	460b      	mov	r3, r1
 8025f1e:	2000      	movs	r0, #0
 8025f20:	49b9      	ldr	r1, [pc, #740]	; (8026208 <__ieee754_pow+0x730>)
 8025f22:	f7da fca7 	bl	8000874 <__aeabi_ddiv>
 8025f26:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8025f2a:	4602      	mov	r2, r0
 8025f2c:	460b      	mov	r3, r1
 8025f2e:	4630      	mov	r0, r6
 8025f30:	4639      	mov	r1, r7
 8025f32:	f7da fb75 	bl	8000620 <__aeabi_dmul>
 8025f36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8025f3a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8025f3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8025f42:	2300      	movs	r3, #0
 8025f44:	9302      	str	r3, [sp, #8]
 8025f46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8025f4a:	106d      	asrs	r5, r5, #1
 8025f4c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8025f50:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8025f54:	2200      	movs	r2, #0
 8025f56:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8025f5a:	4640      	mov	r0, r8
 8025f5c:	4649      	mov	r1, r9
 8025f5e:	4614      	mov	r4, r2
 8025f60:	461d      	mov	r5, r3
 8025f62:	f7da fb5d 	bl	8000620 <__aeabi_dmul>
 8025f66:	4602      	mov	r2, r0
 8025f68:	460b      	mov	r3, r1
 8025f6a:	4630      	mov	r0, r6
 8025f6c:	4639      	mov	r1, r7
 8025f6e:	f7da f9a3 	bl	80002b8 <__aeabi_dsub>
 8025f72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8025f76:	4606      	mov	r6, r0
 8025f78:	460f      	mov	r7, r1
 8025f7a:	4620      	mov	r0, r4
 8025f7c:	4629      	mov	r1, r5
 8025f7e:	f7da f99b 	bl	80002b8 <__aeabi_dsub>
 8025f82:	4602      	mov	r2, r0
 8025f84:	460b      	mov	r3, r1
 8025f86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8025f8a:	f7da f995 	bl	80002b8 <__aeabi_dsub>
 8025f8e:	4642      	mov	r2, r8
 8025f90:	464b      	mov	r3, r9
 8025f92:	f7da fb45 	bl	8000620 <__aeabi_dmul>
 8025f96:	4602      	mov	r2, r0
 8025f98:	460b      	mov	r3, r1
 8025f9a:	4630      	mov	r0, r6
 8025f9c:	4639      	mov	r1, r7
 8025f9e:	f7da f98b 	bl	80002b8 <__aeabi_dsub>
 8025fa2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8025fa6:	f7da fb3b 	bl	8000620 <__aeabi_dmul>
 8025faa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8025fae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8025fb2:	4610      	mov	r0, r2
 8025fb4:	4619      	mov	r1, r3
 8025fb6:	f7da fb33 	bl	8000620 <__aeabi_dmul>
 8025fba:	a37b      	add	r3, pc, #492	; (adr r3, 80261a8 <__ieee754_pow+0x6d0>)
 8025fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fc0:	4604      	mov	r4, r0
 8025fc2:	460d      	mov	r5, r1
 8025fc4:	f7da fb2c 	bl	8000620 <__aeabi_dmul>
 8025fc8:	a379      	add	r3, pc, #484	; (adr r3, 80261b0 <__ieee754_pow+0x6d8>)
 8025fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fce:	f7da f975 	bl	80002bc <__adddf3>
 8025fd2:	4622      	mov	r2, r4
 8025fd4:	462b      	mov	r3, r5
 8025fd6:	f7da fb23 	bl	8000620 <__aeabi_dmul>
 8025fda:	a377      	add	r3, pc, #476	; (adr r3, 80261b8 <__ieee754_pow+0x6e0>)
 8025fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fe0:	f7da f96c 	bl	80002bc <__adddf3>
 8025fe4:	4622      	mov	r2, r4
 8025fe6:	462b      	mov	r3, r5
 8025fe8:	f7da fb1a 	bl	8000620 <__aeabi_dmul>
 8025fec:	a374      	add	r3, pc, #464	; (adr r3, 80261c0 <__ieee754_pow+0x6e8>)
 8025fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025ff2:	f7da f963 	bl	80002bc <__adddf3>
 8025ff6:	4622      	mov	r2, r4
 8025ff8:	462b      	mov	r3, r5
 8025ffa:	f7da fb11 	bl	8000620 <__aeabi_dmul>
 8025ffe:	a372      	add	r3, pc, #456	; (adr r3, 80261c8 <__ieee754_pow+0x6f0>)
 8026000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026004:	f7da f95a 	bl	80002bc <__adddf3>
 8026008:	4622      	mov	r2, r4
 802600a:	462b      	mov	r3, r5
 802600c:	f7da fb08 	bl	8000620 <__aeabi_dmul>
 8026010:	a36f      	add	r3, pc, #444	; (adr r3, 80261d0 <__ieee754_pow+0x6f8>)
 8026012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026016:	f7da f951 	bl	80002bc <__adddf3>
 802601a:	4622      	mov	r2, r4
 802601c:	4606      	mov	r6, r0
 802601e:	460f      	mov	r7, r1
 8026020:	462b      	mov	r3, r5
 8026022:	4620      	mov	r0, r4
 8026024:	4629      	mov	r1, r5
 8026026:	f7da fafb 	bl	8000620 <__aeabi_dmul>
 802602a:	4602      	mov	r2, r0
 802602c:	460b      	mov	r3, r1
 802602e:	4630      	mov	r0, r6
 8026030:	4639      	mov	r1, r7
 8026032:	f7da faf5 	bl	8000620 <__aeabi_dmul>
 8026036:	4642      	mov	r2, r8
 8026038:	4604      	mov	r4, r0
 802603a:	460d      	mov	r5, r1
 802603c:	464b      	mov	r3, r9
 802603e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8026042:	f7da f93b 	bl	80002bc <__adddf3>
 8026046:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802604a:	f7da fae9 	bl	8000620 <__aeabi_dmul>
 802604e:	4622      	mov	r2, r4
 8026050:	462b      	mov	r3, r5
 8026052:	f7da f933 	bl	80002bc <__adddf3>
 8026056:	4642      	mov	r2, r8
 8026058:	4606      	mov	r6, r0
 802605a:	460f      	mov	r7, r1
 802605c:	464b      	mov	r3, r9
 802605e:	4640      	mov	r0, r8
 8026060:	4649      	mov	r1, r9
 8026062:	f7da fadd 	bl	8000620 <__aeabi_dmul>
 8026066:	2200      	movs	r2, #0
 8026068:	4b68      	ldr	r3, [pc, #416]	; (802620c <__ieee754_pow+0x734>)
 802606a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 802606e:	f7da f925 	bl	80002bc <__adddf3>
 8026072:	4632      	mov	r2, r6
 8026074:	463b      	mov	r3, r7
 8026076:	f7da f921 	bl	80002bc <__adddf3>
 802607a:	9802      	ldr	r0, [sp, #8]
 802607c:	460d      	mov	r5, r1
 802607e:	4604      	mov	r4, r0
 8026080:	4602      	mov	r2, r0
 8026082:	460b      	mov	r3, r1
 8026084:	4640      	mov	r0, r8
 8026086:	4649      	mov	r1, r9
 8026088:	f7da faca 	bl	8000620 <__aeabi_dmul>
 802608c:	2200      	movs	r2, #0
 802608e:	4680      	mov	r8, r0
 8026090:	4689      	mov	r9, r1
 8026092:	4b5e      	ldr	r3, [pc, #376]	; (802620c <__ieee754_pow+0x734>)
 8026094:	4620      	mov	r0, r4
 8026096:	4629      	mov	r1, r5
 8026098:	f7da f90e 	bl	80002b8 <__aeabi_dsub>
 802609c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80260a0:	f7da f90a 	bl	80002b8 <__aeabi_dsub>
 80260a4:	4602      	mov	r2, r0
 80260a6:	460b      	mov	r3, r1
 80260a8:	4630      	mov	r0, r6
 80260aa:	4639      	mov	r1, r7
 80260ac:	f7da f904 	bl	80002b8 <__aeabi_dsub>
 80260b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80260b4:	f7da fab4 	bl	8000620 <__aeabi_dmul>
 80260b8:	4622      	mov	r2, r4
 80260ba:	4606      	mov	r6, r0
 80260bc:	460f      	mov	r7, r1
 80260be:	462b      	mov	r3, r5
 80260c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80260c4:	f7da faac 	bl	8000620 <__aeabi_dmul>
 80260c8:	4602      	mov	r2, r0
 80260ca:	460b      	mov	r3, r1
 80260cc:	4630      	mov	r0, r6
 80260ce:	4639      	mov	r1, r7
 80260d0:	f7da f8f4 	bl	80002bc <__adddf3>
 80260d4:	4606      	mov	r6, r0
 80260d6:	460f      	mov	r7, r1
 80260d8:	4602      	mov	r2, r0
 80260da:	460b      	mov	r3, r1
 80260dc:	4640      	mov	r0, r8
 80260de:	4649      	mov	r1, r9
 80260e0:	f7da f8ec 	bl	80002bc <__adddf3>
 80260e4:	9802      	ldr	r0, [sp, #8]
 80260e6:	a33c      	add	r3, pc, #240	; (adr r3, 80261d8 <__ieee754_pow+0x700>)
 80260e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80260ec:	4604      	mov	r4, r0
 80260ee:	460d      	mov	r5, r1
 80260f0:	f7da fa96 	bl	8000620 <__aeabi_dmul>
 80260f4:	4642      	mov	r2, r8
 80260f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80260fa:	464b      	mov	r3, r9
 80260fc:	4620      	mov	r0, r4
 80260fe:	4629      	mov	r1, r5
 8026100:	f7da f8da 	bl	80002b8 <__aeabi_dsub>
 8026104:	4602      	mov	r2, r0
 8026106:	460b      	mov	r3, r1
 8026108:	4630      	mov	r0, r6
 802610a:	4639      	mov	r1, r7
 802610c:	f7da f8d4 	bl	80002b8 <__aeabi_dsub>
 8026110:	a333      	add	r3, pc, #204	; (adr r3, 80261e0 <__ieee754_pow+0x708>)
 8026112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026116:	f7da fa83 	bl	8000620 <__aeabi_dmul>
 802611a:	a333      	add	r3, pc, #204	; (adr r3, 80261e8 <__ieee754_pow+0x710>)
 802611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026120:	4606      	mov	r6, r0
 8026122:	460f      	mov	r7, r1
 8026124:	4620      	mov	r0, r4
 8026126:	4629      	mov	r1, r5
 8026128:	f7da fa7a 	bl	8000620 <__aeabi_dmul>
 802612c:	4602      	mov	r2, r0
 802612e:	460b      	mov	r3, r1
 8026130:	4630      	mov	r0, r6
 8026132:	4639      	mov	r1, r7
 8026134:	f7da f8c2 	bl	80002bc <__adddf3>
 8026138:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802613a:	4b35      	ldr	r3, [pc, #212]	; (8026210 <__ieee754_pow+0x738>)
 802613c:	4413      	add	r3, r2
 802613e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026142:	f7da f8bb 	bl	80002bc <__adddf3>
 8026146:	4604      	mov	r4, r0
 8026148:	9807      	ldr	r0, [sp, #28]
 802614a:	460d      	mov	r5, r1
 802614c:	f7da fa02 	bl	8000554 <__aeabi_i2d>
 8026150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026152:	4b30      	ldr	r3, [pc, #192]	; (8026214 <__ieee754_pow+0x73c>)
 8026154:	4413      	add	r3, r2
 8026156:	e9d3 8900 	ldrd	r8, r9, [r3]
 802615a:	4606      	mov	r6, r0
 802615c:	460f      	mov	r7, r1
 802615e:	4622      	mov	r2, r4
 8026160:	462b      	mov	r3, r5
 8026162:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8026166:	f7da f8a9 	bl	80002bc <__adddf3>
 802616a:	4642      	mov	r2, r8
 802616c:	464b      	mov	r3, r9
 802616e:	f7da f8a5 	bl	80002bc <__adddf3>
 8026172:	4632      	mov	r2, r6
 8026174:	463b      	mov	r3, r7
 8026176:	f7da f8a1 	bl	80002bc <__adddf3>
 802617a:	9802      	ldr	r0, [sp, #8]
 802617c:	4632      	mov	r2, r6
 802617e:	463b      	mov	r3, r7
 8026180:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8026184:	f7da f898 	bl	80002b8 <__aeabi_dsub>
 8026188:	4642      	mov	r2, r8
 802618a:	464b      	mov	r3, r9
 802618c:	f7da f894 	bl	80002b8 <__aeabi_dsub>
 8026190:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8026194:	e607      	b.n	8025da6 <__ieee754_pow+0x2ce>
 8026196:	f04f 0a01 	mov.w	sl, #1
 802619a:	e6a5      	b.n	8025ee8 <__ieee754_pow+0x410>
 802619c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80261f0 <__ieee754_pow+0x718>
 80261a0:	e613      	b.n	8025dca <__ieee754_pow+0x2f2>
 80261a2:	bf00      	nop
 80261a4:	f3af 8000 	nop.w
 80261a8:	4a454eef 	.word	0x4a454eef
 80261ac:	3fca7e28 	.word	0x3fca7e28
 80261b0:	93c9db65 	.word	0x93c9db65
 80261b4:	3fcd864a 	.word	0x3fcd864a
 80261b8:	a91d4101 	.word	0xa91d4101
 80261bc:	3fd17460 	.word	0x3fd17460
 80261c0:	518f264d 	.word	0x518f264d
 80261c4:	3fd55555 	.word	0x3fd55555
 80261c8:	db6fabff 	.word	0xdb6fabff
 80261cc:	3fdb6db6 	.word	0x3fdb6db6
 80261d0:	33333303 	.word	0x33333303
 80261d4:	3fe33333 	.word	0x3fe33333
 80261d8:	e0000000 	.word	0xe0000000
 80261dc:	3feec709 	.word	0x3feec709
 80261e0:	dc3a03fd 	.word	0xdc3a03fd
 80261e4:	3feec709 	.word	0x3feec709
 80261e8:	145b01f5 	.word	0x145b01f5
 80261ec:	be3e2fe0 	.word	0xbe3e2fe0
 80261f0:	00000000 	.word	0x00000000
 80261f4:	3ff00000 	.word	0x3ff00000
 80261f8:	43400000 	.word	0x43400000
 80261fc:	0003988e 	.word	0x0003988e
 8026200:	000bb679 	.word	0x000bb679
 8026204:	08033c00 	.word	0x08033c00
 8026208:	3ff00000 	.word	0x3ff00000
 802620c:	40080000 	.word	0x40080000
 8026210:	08033c20 	.word	0x08033c20
 8026214:	08033c10 	.word	0x08033c10
 8026218:	a3b6      	add	r3, pc, #728	; (adr r3, 80264f4 <__ieee754_pow+0xa1c>)
 802621a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802621e:	4640      	mov	r0, r8
 8026220:	4649      	mov	r1, r9
 8026222:	f7da f84b 	bl	80002bc <__adddf3>
 8026226:	4622      	mov	r2, r4
 8026228:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802622c:	462b      	mov	r3, r5
 802622e:	4630      	mov	r0, r6
 8026230:	4639      	mov	r1, r7
 8026232:	f7da f841 	bl	80002b8 <__aeabi_dsub>
 8026236:	4602      	mov	r2, r0
 8026238:	460b      	mov	r3, r1
 802623a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802623e:	f7da fc7f 	bl	8000b40 <__aeabi_dcmpgt>
 8026242:	2800      	cmp	r0, #0
 8026244:	f47f adfe 	bne.w	8025e44 <__ieee754_pow+0x36c>
 8026248:	4aa5      	ldr	r2, [pc, #660]	; (80264e0 <__ieee754_pow+0xa08>)
 802624a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802624e:	4293      	cmp	r3, r2
 8026250:	f340 810c 	ble.w	802646c <__ieee754_pow+0x994>
 8026254:	151b      	asrs	r3, r3, #20
 8026256:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 802625a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802625e:	fa4a f303 	asr.w	r3, sl, r3
 8026262:	445b      	add	r3, fp
 8026264:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8026268:	4e9e      	ldr	r6, [pc, #632]	; (80264e4 <__ieee754_pow+0xa0c>)
 802626a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802626e:	4116      	asrs	r6, r2
 8026270:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8026274:	2000      	movs	r0, #0
 8026276:	ea23 0106 	bic.w	r1, r3, r6
 802627a:	f1c2 0214 	rsb	r2, r2, #20
 802627e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8026282:	fa4a fa02 	asr.w	sl, sl, r2
 8026286:	f1bb 0f00 	cmp.w	fp, #0
 802628a:	4602      	mov	r2, r0
 802628c:	460b      	mov	r3, r1
 802628e:	4620      	mov	r0, r4
 8026290:	4629      	mov	r1, r5
 8026292:	bfb8      	it	lt
 8026294:	f1ca 0a00 	rsblt	sl, sl, #0
 8026298:	f7da f80e 	bl	80002b8 <__aeabi_dsub>
 802629c:	e9cd 0100 	strd	r0, r1, [sp]
 80262a0:	4642      	mov	r2, r8
 80262a2:	464b      	mov	r3, r9
 80262a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80262a8:	f7da f808 	bl	80002bc <__adddf3>
 80262ac:	2000      	movs	r0, #0
 80262ae:	a37a      	add	r3, pc, #488	; (adr r3, 8026498 <__ieee754_pow+0x9c0>)
 80262b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80262b4:	4604      	mov	r4, r0
 80262b6:	460d      	mov	r5, r1
 80262b8:	f7da f9b2 	bl	8000620 <__aeabi_dmul>
 80262bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80262c0:	4606      	mov	r6, r0
 80262c2:	460f      	mov	r7, r1
 80262c4:	4620      	mov	r0, r4
 80262c6:	4629      	mov	r1, r5
 80262c8:	f7d9 fff6 	bl	80002b8 <__aeabi_dsub>
 80262cc:	4602      	mov	r2, r0
 80262ce:	460b      	mov	r3, r1
 80262d0:	4640      	mov	r0, r8
 80262d2:	4649      	mov	r1, r9
 80262d4:	f7d9 fff0 	bl	80002b8 <__aeabi_dsub>
 80262d8:	a371      	add	r3, pc, #452	; (adr r3, 80264a0 <__ieee754_pow+0x9c8>)
 80262da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80262de:	f7da f99f 	bl	8000620 <__aeabi_dmul>
 80262e2:	a371      	add	r3, pc, #452	; (adr r3, 80264a8 <__ieee754_pow+0x9d0>)
 80262e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80262e8:	4680      	mov	r8, r0
 80262ea:	4689      	mov	r9, r1
 80262ec:	4620      	mov	r0, r4
 80262ee:	4629      	mov	r1, r5
 80262f0:	f7da f996 	bl	8000620 <__aeabi_dmul>
 80262f4:	4602      	mov	r2, r0
 80262f6:	460b      	mov	r3, r1
 80262f8:	4640      	mov	r0, r8
 80262fa:	4649      	mov	r1, r9
 80262fc:	f7d9 ffde 	bl	80002bc <__adddf3>
 8026300:	4604      	mov	r4, r0
 8026302:	460d      	mov	r5, r1
 8026304:	4602      	mov	r2, r0
 8026306:	460b      	mov	r3, r1
 8026308:	4630      	mov	r0, r6
 802630a:	4639      	mov	r1, r7
 802630c:	f7d9 ffd6 	bl	80002bc <__adddf3>
 8026310:	4632      	mov	r2, r6
 8026312:	463b      	mov	r3, r7
 8026314:	4680      	mov	r8, r0
 8026316:	4689      	mov	r9, r1
 8026318:	f7d9 ffce 	bl	80002b8 <__aeabi_dsub>
 802631c:	4602      	mov	r2, r0
 802631e:	460b      	mov	r3, r1
 8026320:	4620      	mov	r0, r4
 8026322:	4629      	mov	r1, r5
 8026324:	f7d9 ffc8 	bl	80002b8 <__aeabi_dsub>
 8026328:	4642      	mov	r2, r8
 802632a:	4606      	mov	r6, r0
 802632c:	460f      	mov	r7, r1
 802632e:	464b      	mov	r3, r9
 8026330:	4640      	mov	r0, r8
 8026332:	4649      	mov	r1, r9
 8026334:	f7da f974 	bl	8000620 <__aeabi_dmul>
 8026338:	a35d      	add	r3, pc, #372	; (adr r3, 80264b0 <__ieee754_pow+0x9d8>)
 802633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802633e:	4604      	mov	r4, r0
 8026340:	460d      	mov	r5, r1
 8026342:	f7da f96d 	bl	8000620 <__aeabi_dmul>
 8026346:	a35c      	add	r3, pc, #368	; (adr r3, 80264b8 <__ieee754_pow+0x9e0>)
 8026348:	e9d3 2300 	ldrd	r2, r3, [r3]
 802634c:	f7d9 ffb4 	bl	80002b8 <__aeabi_dsub>
 8026350:	4622      	mov	r2, r4
 8026352:	462b      	mov	r3, r5
 8026354:	f7da f964 	bl	8000620 <__aeabi_dmul>
 8026358:	a359      	add	r3, pc, #356	; (adr r3, 80264c0 <__ieee754_pow+0x9e8>)
 802635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802635e:	f7d9 ffad 	bl	80002bc <__adddf3>
 8026362:	4622      	mov	r2, r4
 8026364:	462b      	mov	r3, r5
 8026366:	f7da f95b 	bl	8000620 <__aeabi_dmul>
 802636a:	a357      	add	r3, pc, #348	; (adr r3, 80264c8 <__ieee754_pow+0x9f0>)
 802636c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026370:	f7d9 ffa2 	bl	80002b8 <__aeabi_dsub>
 8026374:	4622      	mov	r2, r4
 8026376:	462b      	mov	r3, r5
 8026378:	f7da f952 	bl	8000620 <__aeabi_dmul>
 802637c:	a354      	add	r3, pc, #336	; (adr r3, 80264d0 <__ieee754_pow+0x9f8>)
 802637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026382:	f7d9 ff9b 	bl	80002bc <__adddf3>
 8026386:	4622      	mov	r2, r4
 8026388:	462b      	mov	r3, r5
 802638a:	f7da f949 	bl	8000620 <__aeabi_dmul>
 802638e:	4602      	mov	r2, r0
 8026390:	460b      	mov	r3, r1
 8026392:	4640      	mov	r0, r8
 8026394:	4649      	mov	r1, r9
 8026396:	f7d9 ff8f 	bl	80002b8 <__aeabi_dsub>
 802639a:	4604      	mov	r4, r0
 802639c:	460d      	mov	r5, r1
 802639e:	4602      	mov	r2, r0
 80263a0:	460b      	mov	r3, r1
 80263a2:	4640      	mov	r0, r8
 80263a4:	4649      	mov	r1, r9
 80263a6:	f7da f93b 	bl	8000620 <__aeabi_dmul>
 80263aa:	2200      	movs	r2, #0
 80263ac:	e9cd 0100 	strd	r0, r1, [sp]
 80263b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80263b4:	4620      	mov	r0, r4
 80263b6:	4629      	mov	r1, r5
 80263b8:	f7d9 ff7e 	bl	80002b8 <__aeabi_dsub>
 80263bc:	4602      	mov	r2, r0
 80263be:	460b      	mov	r3, r1
 80263c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80263c4:	f7da fa56 	bl	8000874 <__aeabi_ddiv>
 80263c8:	4632      	mov	r2, r6
 80263ca:	4604      	mov	r4, r0
 80263cc:	460d      	mov	r5, r1
 80263ce:	463b      	mov	r3, r7
 80263d0:	4640      	mov	r0, r8
 80263d2:	4649      	mov	r1, r9
 80263d4:	f7da f924 	bl	8000620 <__aeabi_dmul>
 80263d8:	4632      	mov	r2, r6
 80263da:	463b      	mov	r3, r7
 80263dc:	f7d9 ff6e 	bl	80002bc <__adddf3>
 80263e0:	4602      	mov	r2, r0
 80263e2:	460b      	mov	r3, r1
 80263e4:	4620      	mov	r0, r4
 80263e6:	4629      	mov	r1, r5
 80263e8:	f7d9 ff66 	bl	80002b8 <__aeabi_dsub>
 80263ec:	4642      	mov	r2, r8
 80263ee:	464b      	mov	r3, r9
 80263f0:	f7d9 ff62 	bl	80002b8 <__aeabi_dsub>
 80263f4:	4602      	mov	r2, r0
 80263f6:	460b      	mov	r3, r1
 80263f8:	2000      	movs	r0, #0
 80263fa:	493b      	ldr	r1, [pc, #236]	; (80264e8 <__ieee754_pow+0xa10>)
 80263fc:	f7d9 ff5c 	bl	80002b8 <__aeabi_dsub>
 8026400:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8026404:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8026408:	4602      	mov	r2, r0
 802640a:	460b      	mov	r3, r1
 802640c:	da31      	bge.n	8026472 <__ieee754_pow+0x99a>
 802640e:	4650      	mov	r0, sl
 8026410:	ec43 2b10 	vmov	d0, r2, r3
 8026414:	f000 fa0c 	bl	8026830 <scalbn>
 8026418:	ec51 0b10 	vmov	r0, r1, d0
 802641c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8026420:	f7ff bbf1 	b.w	8025c06 <__ieee754_pow+0x12e>
 8026424:	4b31      	ldr	r3, [pc, #196]	; (80264ec <__ieee754_pow+0xa14>)
 8026426:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802642a:	429e      	cmp	r6, r3
 802642c:	f77f af0c 	ble.w	8026248 <__ieee754_pow+0x770>
 8026430:	4b2f      	ldr	r3, [pc, #188]	; (80264f0 <__ieee754_pow+0xa18>)
 8026432:	440b      	add	r3, r1
 8026434:	4303      	orrs	r3, r0
 8026436:	d00b      	beq.n	8026450 <__ieee754_pow+0x978>
 8026438:	a327      	add	r3, pc, #156	; (adr r3, 80264d8 <__ieee754_pow+0xa00>)
 802643a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802643e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026442:	f7da f8ed 	bl	8000620 <__aeabi_dmul>
 8026446:	a324      	add	r3, pc, #144	; (adr r3, 80264d8 <__ieee754_pow+0xa00>)
 8026448:	e9d3 2300 	ldrd	r2, r3, [r3]
 802644c:	f7ff bbdb 	b.w	8025c06 <__ieee754_pow+0x12e>
 8026450:	4622      	mov	r2, r4
 8026452:	462b      	mov	r3, r5
 8026454:	f7d9 ff30 	bl	80002b8 <__aeabi_dsub>
 8026458:	4602      	mov	r2, r0
 802645a:	460b      	mov	r3, r1
 802645c:	4640      	mov	r0, r8
 802645e:	4649      	mov	r1, r9
 8026460:	f7da fb5a 	bl	8000b18 <__aeabi_dcmple>
 8026464:	2800      	cmp	r0, #0
 8026466:	f43f aeef 	beq.w	8026248 <__ieee754_pow+0x770>
 802646a:	e7e5      	b.n	8026438 <__ieee754_pow+0x960>
 802646c:	f04f 0a00 	mov.w	sl, #0
 8026470:	e716      	b.n	80262a0 <__ieee754_pow+0x7c8>
 8026472:	4621      	mov	r1, r4
 8026474:	e7d2      	b.n	802641c <__ieee754_pow+0x944>
 8026476:	2000      	movs	r0, #0
 8026478:	491b      	ldr	r1, [pc, #108]	; (80264e8 <__ieee754_pow+0xa10>)
 802647a:	f7ff bb8d 	b.w	8025b98 <__ieee754_pow+0xc0>
 802647e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026482:	f7ff bb89 	b.w	8025b98 <__ieee754_pow+0xc0>
 8026486:	4630      	mov	r0, r6
 8026488:	4639      	mov	r1, r7
 802648a:	f7ff bb85 	b.w	8025b98 <__ieee754_pow+0xc0>
 802648e:	4693      	mov	fp, r2
 8026490:	f7ff bb96 	b.w	8025bc0 <__ieee754_pow+0xe8>
 8026494:	f3af 8000 	nop.w
 8026498:	00000000 	.word	0x00000000
 802649c:	3fe62e43 	.word	0x3fe62e43
 80264a0:	fefa39ef 	.word	0xfefa39ef
 80264a4:	3fe62e42 	.word	0x3fe62e42
 80264a8:	0ca86c39 	.word	0x0ca86c39
 80264ac:	be205c61 	.word	0xbe205c61
 80264b0:	72bea4d0 	.word	0x72bea4d0
 80264b4:	3e663769 	.word	0x3e663769
 80264b8:	c5d26bf1 	.word	0xc5d26bf1
 80264bc:	3ebbbd41 	.word	0x3ebbbd41
 80264c0:	af25de2c 	.word	0xaf25de2c
 80264c4:	3f11566a 	.word	0x3f11566a
 80264c8:	16bebd93 	.word	0x16bebd93
 80264cc:	3f66c16c 	.word	0x3f66c16c
 80264d0:	5555553e 	.word	0x5555553e
 80264d4:	3fc55555 	.word	0x3fc55555
 80264d8:	c2f8f359 	.word	0xc2f8f359
 80264dc:	01a56e1f 	.word	0x01a56e1f
 80264e0:	3fe00000 	.word	0x3fe00000
 80264e4:	000fffff 	.word	0x000fffff
 80264e8:	3ff00000 	.word	0x3ff00000
 80264ec:	4090cbff 	.word	0x4090cbff
 80264f0:	3f6f3400 	.word	0x3f6f3400
 80264f4:	652b82fe 	.word	0x652b82fe
 80264f8:	3c971547 	.word	0x3c971547

080264fc <__ieee754_sqrt>:
 80264fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026500:	ec55 4b10 	vmov	r4, r5, d0
 8026504:	4e54      	ldr	r6, [pc, #336]	; (8026658 <__ieee754_sqrt+0x15c>)
 8026506:	43ae      	bics	r6, r5
 8026508:	ee10 0a10 	vmov	r0, s0
 802650c:	462b      	mov	r3, r5
 802650e:	462a      	mov	r2, r5
 8026510:	4621      	mov	r1, r4
 8026512:	d113      	bne.n	802653c <__ieee754_sqrt+0x40>
 8026514:	ee10 2a10 	vmov	r2, s0
 8026518:	462b      	mov	r3, r5
 802651a:	ee10 0a10 	vmov	r0, s0
 802651e:	4629      	mov	r1, r5
 8026520:	f7da f87e 	bl	8000620 <__aeabi_dmul>
 8026524:	4602      	mov	r2, r0
 8026526:	460b      	mov	r3, r1
 8026528:	4620      	mov	r0, r4
 802652a:	4629      	mov	r1, r5
 802652c:	f7d9 fec6 	bl	80002bc <__adddf3>
 8026530:	4604      	mov	r4, r0
 8026532:	460d      	mov	r5, r1
 8026534:	ec45 4b10 	vmov	d0, r4, r5
 8026538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802653c:	2d00      	cmp	r5, #0
 802653e:	dc10      	bgt.n	8026562 <__ieee754_sqrt+0x66>
 8026540:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8026544:	4330      	orrs	r0, r6
 8026546:	d0f5      	beq.n	8026534 <__ieee754_sqrt+0x38>
 8026548:	b15d      	cbz	r5, 8026562 <__ieee754_sqrt+0x66>
 802654a:	ee10 2a10 	vmov	r2, s0
 802654e:	462b      	mov	r3, r5
 8026550:	4620      	mov	r0, r4
 8026552:	4629      	mov	r1, r5
 8026554:	f7d9 feb0 	bl	80002b8 <__aeabi_dsub>
 8026558:	4602      	mov	r2, r0
 802655a:	460b      	mov	r3, r1
 802655c:	f7da f98a 	bl	8000874 <__aeabi_ddiv>
 8026560:	e7e6      	b.n	8026530 <__ieee754_sqrt+0x34>
 8026562:	151b      	asrs	r3, r3, #20
 8026564:	d10c      	bne.n	8026580 <__ieee754_sqrt+0x84>
 8026566:	2a00      	cmp	r2, #0
 8026568:	d06d      	beq.n	8026646 <__ieee754_sqrt+0x14a>
 802656a:	2000      	movs	r0, #0
 802656c:	02d6      	lsls	r6, r2, #11
 802656e:	d56e      	bpl.n	802664e <__ieee754_sqrt+0x152>
 8026570:	1e44      	subs	r4, r0, #1
 8026572:	1b1b      	subs	r3, r3, r4
 8026574:	f1c0 0420 	rsb	r4, r0, #32
 8026578:	fa21 f404 	lsr.w	r4, r1, r4
 802657c:	4322      	orrs	r2, r4
 802657e:	4081      	lsls	r1, r0
 8026580:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8026584:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8026588:	07dd      	lsls	r5, r3, #31
 802658a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 802658e:	bf42      	ittt	mi
 8026590:	0052      	lslmi	r2, r2, #1
 8026592:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8026596:	0049      	lslmi	r1, r1, #1
 8026598:	1058      	asrs	r0, r3, #1
 802659a:	2500      	movs	r5, #0
 802659c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 80265a0:	441a      	add	r2, r3
 80265a2:	0049      	lsls	r1, r1, #1
 80265a4:	2316      	movs	r3, #22
 80265a6:	462c      	mov	r4, r5
 80265a8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80265ac:	19a7      	adds	r7, r4, r6
 80265ae:	4297      	cmp	r7, r2
 80265b0:	bfde      	ittt	le
 80265b2:	1bd2      	suble	r2, r2, r7
 80265b4:	19bc      	addle	r4, r7, r6
 80265b6:	19ad      	addle	r5, r5, r6
 80265b8:	0052      	lsls	r2, r2, #1
 80265ba:	3b01      	subs	r3, #1
 80265bc:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80265c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80265c4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80265c8:	d1f0      	bne.n	80265ac <__ieee754_sqrt+0xb0>
 80265ca:	f04f 0e20 	mov.w	lr, #32
 80265ce:	469c      	mov	ip, r3
 80265d0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80265d4:	42a2      	cmp	r2, r4
 80265d6:	eb06 070c 	add.w	r7, r6, ip
 80265da:	dc02      	bgt.n	80265e2 <__ieee754_sqrt+0xe6>
 80265dc:	d112      	bne.n	8026604 <__ieee754_sqrt+0x108>
 80265de:	428f      	cmp	r7, r1
 80265e0:	d810      	bhi.n	8026604 <__ieee754_sqrt+0x108>
 80265e2:	2f00      	cmp	r7, #0
 80265e4:	eb07 0c06 	add.w	ip, r7, r6
 80265e8:	da34      	bge.n	8026654 <__ieee754_sqrt+0x158>
 80265ea:	f1bc 0f00 	cmp.w	ip, #0
 80265ee:	db31      	blt.n	8026654 <__ieee754_sqrt+0x158>
 80265f0:	f104 0801 	add.w	r8, r4, #1
 80265f4:	1b12      	subs	r2, r2, r4
 80265f6:	428f      	cmp	r7, r1
 80265f8:	bf88      	it	hi
 80265fa:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80265fe:	1bc9      	subs	r1, r1, r7
 8026600:	4433      	add	r3, r6
 8026602:	4644      	mov	r4, r8
 8026604:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8026608:	f1be 0e01 	subs.w	lr, lr, #1
 802660c:	443a      	add	r2, r7
 802660e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8026612:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8026616:	d1dd      	bne.n	80265d4 <__ieee754_sqrt+0xd8>
 8026618:	430a      	orrs	r2, r1
 802661a:	d006      	beq.n	802662a <__ieee754_sqrt+0x12e>
 802661c:	1c5c      	adds	r4, r3, #1
 802661e:	bf13      	iteet	ne
 8026620:	3301      	addne	r3, #1
 8026622:	3501      	addeq	r5, #1
 8026624:	4673      	moveq	r3, lr
 8026626:	f023 0301 	bicne.w	r3, r3, #1
 802662a:	106a      	asrs	r2, r5, #1
 802662c:	085b      	lsrs	r3, r3, #1
 802662e:	07e9      	lsls	r1, r5, #31
 8026630:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8026634:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8026638:	bf48      	it	mi
 802663a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 802663e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8026642:	461c      	mov	r4, r3
 8026644:	e776      	b.n	8026534 <__ieee754_sqrt+0x38>
 8026646:	0aca      	lsrs	r2, r1, #11
 8026648:	3b15      	subs	r3, #21
 802664a:	0549      	lsls	r1, r1, #21
 802664c:	e78b      	b.n	8026566 <__ieee754_sqrt+0x6a>
 802664e:	0052      	lsls	r2, r2, #1
 8026650:	3001      	adds	r0, #1
 8026652:	e78b      	b.n	802656c <__ieee754_sqrt+0x70>
 8026654:	46a0      	mov	r8, r4
 8026656:	e7cd      	b.n	80265f4 <__ieee754_sqrt+0xf8>
 8026658:	7ff00000 	.word	0x7ff00000

0802665c <__ieee754_sqrtf>:
 802665c:	ee10 2a10 	vmov	r2, s0
 8026660:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8026664:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8026668:	b570      	push	{r4, r5, r6, lr}
 802666a:	d302      	bcc.n	8026672 <__ieee754_sqrtf+0x16>
 802666c:	eea0 0a00 	vfma.f32	s0, s0, s0
 8026670:	bd70      	pop	{r4, r5, r6, pc}
 8026672:	b3b1      	cbz	r1, 80266e2 <__ieee754_sqrtf+0x86>
 8026674:	2a00      	cmp	r2, #0
 8026676:	da04      	bge.n	8026682 <__ieee754_sqrtf+0x26>
 8026678:	ee70 7a40 	vsub.f32	s15, s0, s0
 802667c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8026680:	bd70      	pop	{r4, r5, r6, pc}
 8026682:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8026686:	ea4f 53e2 	mov.w	r3, r2, asr #23
 802668a:	d204      	bcs.n	8026696 <__ieee754_sqrtf+0x3a>
 802668c:	2100      	movs	r1, #0
 802668e:	0210      	lsls	r0, r2, #8
 8026690:	d528      	bpl.n	80266e4 <__ieee754_sqrtf+0x88>
 8026692:	3901      	subs	r1, #1
 8026694:	1a5b      	subs	r3, r3, r1
 8026696:	3b7f      	subs	r3, #127	; 0x7f
 8026698:	f3c2 0216 	ubfx	r2, r2, #0, #23
 802669c:	07d9      	lsls	r1, r3, #31
 802669e:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80266a2:	bf48      	it	mi
 80266a4:	0052      	lslmi	r2, r2, #1
 80266a6:	1059      	asrs	r1, r3, #1
 80266a8:	2300      	movs	r3, #0
 80266aa:	0052      	lsls	r2, r2, #1
 80266ac:	2419      	movs	r4, #25
 80266ae:	461e      	mov	r6, r3
 80266b0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80266b4:	1835      	adds	r5, r6, r0
 80266b6:	4295      	cmp	r5, r2
 80266b8:	bfde      	ittt	le
 80266ba:	182e      	addle	r6, r5, r0
 80266bc:	1b52      	suble	r2, r2, r5
 80266be:	181b      	addle	r3, r3, r0
 80266c0:	3c01      	subs	r4, #1
 80266c2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80266c6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80266ca:	d1f3      	bne.n	80266b4 <__ieee754_sqrtf+0x58>
 80266cc:	b112      	cbz	r2, 80266d4 <__ieee754_sqrtf+0x78>
 80266ce:	3301      	adds	r3, #1
 80266d0:	f023 0301 	bic.w	r3, r3, #1
 80266d4:	105b      	asrs	r3, r3, #1
 80266d6:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 80266da:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 80266de:	ee00 3a10 	vmov	s0, r3
 80266e2:	bd70      	pop	{r4, r5, r6, pc}
 80266e4:	0052      	lsls	r2, r2, #1
 80266e6:	3101      	adds	r1, #1
 80266e8:	e7d1      	b.n	802668e <__ieee754_sqrtf+0x32>

080266ea <fabs>:
 80266ea:	ec53 2b10 	vmov	r2, r3, d0
 80266ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80266f2:	ec43 2b10 	vmov	d0, r2, r3
 80266f6:	4770      	bx	lr

080266f8 <finite>:
 80266f8:	ee10 3a90 	vmov	r3, s1
 80266fc:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8026700:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8026704:	0fc0      	lsrs	r0, r0, #31
 8026706:	4770      	bx	lr

08026708 <matherr>:
 8026708:	2000      	movs	r0, #0
 802670a:	4770      	bx	lr
 802670c:	0000      	movs	r0, r0
	...

08026710 <nan>:
 8026710:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8026718 <nan+0x8>
 8026714:	4770      	bx	lr
 8026716:	bf00      	nop
 8026718:	00000000 	.word	0x00000000
 802671c:	7ff80000 	.word	0x7ff80000

08026720 <rint>:
 8026720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8026722:	ec51 0b10 	vmov	r0, r1, d0
 8026726:	f3c1 540a 	ubfx	r4, r1, #20, #11
 802672a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 802672e:	2e13      	cmp	r6, #19
 8026730:	ee10 7a10 	vmov	r7, s0
 8026734:	460b      	mov	r3, r1
 8026736:	4602      	mov	r2, r0
 8026738:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 802673c:	dc58      	bgt.n	80267f0 <rint+0xd0>
 802673e:	2e00      	cmp	r6, #0
 8026740:	da2b      	bge.n	802679a <rint+0x7a>
 8026742:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8026746:	4302      	orrs	r2, r0
 8026748:	d023      	beq.n	8026792 <rint+0x72>
 802674a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 802674e:	4302      	orrs	r2, r0
 8026750:	4251      	negs	r1, r2
 8026752:	4311      	orrs	r1, r2
 8026754:	0b09      	lsrs	r1, r1, #12
 8026756:	0c5b      	lsrs	r3, r3, #17
 8026758:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 802675c:	045b      	lsls	r3, r3, #17
 802675e:	ea41 0703 	orr.w	r7, r1, r3
 8026762:	4b31      	ldr	r3, [pc, #196]	; (8026828 <rint+0x108>)
 8026764:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8026768:	4639      	mov	r1, r7
 802676a:	e9d3 6700 	ldrd	r6, r7, [r3]
 802676e:	ee10 0a10 	vmov	r0, s0
 8026772:	4632      	mov	r2, r6
 8026774:	463b      	mov	r3, r7
 8026776:	f7d9 fda1 	bl	80002bc <__adddf3>
 802677a:	e9cd 0100 	strd	r0, r1, [sp]
 802677e:	463b      	mov	r3, r7
 8026780:	4632      	mov	r2, r6
 8026782:	e9dd 0100 	ldrd	r0, r1, [sp]
 8026786:	f7d9 fd97 	bl	80002b8 <__aeabi_dsub>
 802678a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802678e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8026792:	ec41 0b10 	vmov	d0, r0, r1
 8026796:	b003      	add	sp, #12
 8026798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802679a:	4c24      	ldr	r4, [pc, #144]	; (802682c <rint+0x10c>)
 802679c:	4134      	asrs	r4, r6
 802679e:	ea01 0704 	and.w	r7, r1, r4
 80267a2:	4307      	orrs	r7, r0
 80267a4:	d0f5      	beq.n	8026792 <rint+0x72>
 80267a6:	0861      	lsrs	r1, r4, #1
 80267a8:	ea03 0001 	and.w	r0, r3, r1
 80267ac:	4302      	orrs	r2, r0
 80267ae:	d00b      	beq.n	80267c8 <rint+0xa8>
 80267b0:	ea23 0101 	bic.w	r1, r3, r1
 80267b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80267b8:	2e13      	cmp	r6, #19
 80267ba:	fa43 f306 	asr.w	r3, r3, r6
 80267be:	bf0c      	ite	eq
 80267c0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 80267c4:	2200      	movne	r2, #0
 80267c6:	430b      	orrs	r3, r1
 80267c8:	4619      	mov	r1, r3
 80267ca:	4b17      	ldr	r3, [pc, #92]	; (8026828 <rint+0x108>)
 80267cc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80267d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80267d4:	4610      	mov	r0, r2
 80267d6:	462b      	mov	r3, r5
 80267d8:	4622      	mov	r2, r4
 80267da:	f7d9 fd6f 	bl	80002bc <__adddf3>
 80267de:	e9cd 0100 	strd	r0, r1, [sp]
 80267e2:	4622      	mov	r2, r4
 80267e4:	462b      	mov	r3, r5
 80267e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80267ea:	f7d9 fd65 	bl	80002b8 <__aeabi_dsub>
 80267ee:	e7d0      	b.n	8026792 <rint+0x72>
 80267f0:	2e33      	cmp	r6, #51	; 0x33
 80267f2:	dd08      	ble.n	8026806 <rint+0xe6>
 80267f4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80267f8:	d1cb      	bne.n	8026792 <rint+0x72>
 80267fa:	ee10 2a10 	vmov	r2, s0
 80267fe:	460b      	mov	r3, r1
 8026800:	f7d9 fd5c 	bl	80002bc <__adddf3>
 8026804:	e7c5      	b.n	8026792 <rint+0x72>
 8026806:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 802680a:	f04f 34ff 	mov.w	r4, #4294967295
 802680e:	40f4      	lsrs	r4, r6
 8026810:	4220      	tst	r0, r4
 8026812:	d0be      	beq.n	8026792 <rint+0x72>
 8026814:	0861      	lsrs	r1, r4, #1
 8026816:	420f      	tst	r7, r1
 8026818:	bf1f      	itttt	ne
 802681a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 802681e:	ea27 0101 	bicne.w	r1, r7, r1
 8026822:	4132      	asrne	r2, r6
 8026824:	430a      	orrne	r2, r1
 8026826:	e7cf      	b.n	80267c8 <rint+0xa8>
 8026828:	08033c30 	.word	0x08033c30
 802682c:	000fffff 	.word	0x000fffff

08026830 <scalbn>:
 8026830:	b570      	push	{r4, r5, r6, lr}
 8026832:	ec55 4b10 	vmov	r4, r5, d0
 8026836:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802683a:	4606      	mov	r6, r0
 802683c:	462b      	mov	r3, r5
 802683e:	b9b2      	cbnz	r2, 802686e <scalbn+0x3e>
 8026840:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8026844:	4323      	orrs	r3, r4
 8026846:	d03c      	beq.n	80268c2 <scalbn+0x92>
 8026848:	2200      	movs	r2, #0
 802684a:	4b33      	ldr	r3, [pc, #204]	; (8026918 <scalbn+0xe8>)
 802684c:	4629      	mov	r1, r5
 802684e:	ee10 0a10 	vmov	r0, s0
 8026852:	f7d9 fee5 	bl	8000620 <__aeabi_dmul>
 8026856:	4a31      	ldr	r2, [pc, #196]	; (802691c <scalbn+0xec>)
 8026858:	4296      	cmp	r6, r2
 802685a:	4604      	mov	r4, r0
 802685c:	460d      	mov	r5, r1
 802685e:	460b      	mov	r3, r1
 8026860:	da13      	bge.n	802688a <scalbn+0x5a>
 8026862:	a329      	add	r3, pc, #164	; (adr r3, 8026908 <scalbn+0xd8>)
 8026864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026868:	f7d9 feda 	bl	8000620 <__aeabi_dmul>
 802686c:	e00a      	b.n	8026884 <scalbn+0x54>
 802686e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8026872:	428a      	cmp	r2, r1
 8026874:	d10c      	bne.n	8026890 <scalbn+0x60>
 8026876:	ee10 2a10 	vmov	r2, s0
 802687a:	462b      	mov	r3, r5
 802687c:	4620      	mov	r0, r4
 802687e:	4629      	mov	r1, r5
 8026880:	f7d9 fd1c 	bl	80002bc <__adddf3>
 8026884:	4604      	mov	r4, r0
 8026886:	460d      	mov	r5, r1
 8026888:	e01b      	b.n	80268c2 <scalbn+0x92>
 802688a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 802688e:	3a36      	subs	r2, #54	; 0x36
 8026890:	4432      	add	r2, r6
 8026892:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8026896:	428a      	cmp	r2, r1
 8026898:	dd0b      	ble.n	80268b2 <scalbn+0x82>
 802689a:	ec45 4b11 	vmov	d1, r4, r5
 802689e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8026910 <scalbn+0xe0>
 80268a2:	f000 f83f 	bl	8026924 <copysign>
 80268a6:	a31a      	add	r3, pc, #104	; (adr r3, 8026910 <scalbn+0xe0>)
 80268a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80268ac:	ec51 0b10 	vmov	r0, r1, d0
 80268b0:	e7da      	b.n	8026868 <scalbn+0x38>
 80268b2:	2a00      	cmp	r2, #0
 80268b4:	dd08      	ble.n	80268c8 <scalbn+0x98>
 80268b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80268ba:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80268be:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80268c2:	ec45 4b10 	vmov	d0, r4, r5
 80268c6:	bd70      	pop	{r4, r5, r6, pc}
 80268c8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80268cc:	da0d      	bge.n	80268ea <scalbn+0xba>
 80268ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80268d2:	429e      	cmp	r6, r3
 80268d4:	ec45 4b11 	vmov	d1, r4, r5
 80268d8:	dce1      	bgt.n	802689e <scalbn+0x6e>
 80268da:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8026908 <scalbn+0xd8>
 80268de:	f000 f821 	bl	8026924 <copysign>
 80268e2:	a309      	add	r3, pc, #36	; (adr r3, 8026908 <scalbn+0xd8>)
 80268e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80268e8:	e7e0      	b.n	80268ac <scalbn+0x7c>
 80268ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80268ee:	3236      	adds	r2, #54	; 0x36
 80268f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80268f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80268f8:	4620      	mov	r0, r4
 80268fa:	4629      	mov	r1, r5
 80268fc:	2200      	movs	r2, #0
 80268fe:	4b08      	ldr	r3, [pc, #32]	; (8026920 <scalbn+0xf0>)
 8026900:	e7b2      	b.n	8026868 <scalbn+0x38>
 8026902:	bf00      	nop
 8026904:	f3af 8000 	nop.w
 8026908:	c2f8f359 	.word	0xc2f8f359
 802690c:	01a56e1f 	.word	0x01a56e1f
 8026910:	8800759c 	.word	0x8800759c
 8026914:	7e37e43c 	.word	0x7e37e43c
 8026918:	43500000 	.word	0x43500000
 802691c:	ffff3cb0 	.word	0xffff3cb0
 8026920:	3c900000 	.word	0x3c900000

08026924 <copysign>:
 8026924:	ec53 2b10 	vmov	r2, r3, d0
 8026928:	ee11 0a90 	vmov	r0, s3
 802692c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8026930:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8026934:	ea41 0300 	orr.w	r3, r1, r0
 8026938:	ec43 2b10 	vmov	d0, r2, r3
 802693c:	4770      	bx	lr
	...

08026940 <_init>:
 8026940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026942:	bf00      	nop
 8026944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026946:	bc08      	pop	{r3}
 8026948:	469e      	mov	lr, r3
 802694a:	4770      	bx	lr

0802694c <_fini>:
 802694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802694e:	bf00      	nop
 8026950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026952:	bc08      	pop	{r3}
 8026954:	469e      	mov	lr, r3
 8026956:	4770      	bx	lr
