
Clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024ca8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d338  08024e68  08024e68  00034e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080321a0  080321a0  000421a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080321a8  080321a8  000421a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080321ac  080321ac  000421ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000015c4  20000000  080321b0  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00094fd8  200015c8  08033774  000515c8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200965a0  08033774  000565a0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000515c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0007a051  00000000  00000000  000515f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c3ec  00000000  00000000  000cb645  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002c202  00000000  00000000  000d7a31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002f80  00000000  00000000  00103c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003ff8  00000000  00000000  00106bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001f5e2  00000000  00000000  0010abb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000f377  00000000  00000000  0012a192  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00139509  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a5cc  00000000  00000000  00139588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200015c8 	.word	0x200015c8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08024e50 	.word	0x08024e50

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200015cc 	.word	0x200015cc
 80001fc:	08024e50 	.word	0x08024e50

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f092 0f00 	teq	r2, #0
 800059a:	bf14      	ite	ne
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	4770      	bxeq	lr
 80005a2:	b530      	push	{r4, r5, lr}
 80005a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b0:	e720      	b.n	80003f4 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_ul2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	e00a      	b.n	80005da <__aeabi_l2d+0x16>

080005c4 <__aeabi_l2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005d2:	d502      	bpl.n	80005da <__aeabi_l2d+0x16>
 80005d4:	4240      	negs	r0, r0
 80005d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005e6:	f43f aedc 	beq.w	80003a2 <__adddf3+0xe6>
 80005ea:	f04f 0203 	mov.w	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000602:	f1c2 0320 	rsb	r3, r2, #32
 8000606:	fa00 fc03 	lsl.w	ip, r0, r3
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000612:	ea40 000e 	orr.w	r0, r0, lr
 8000616:	fa21 f102 	lsr.w	r1, r1, r2
 800061a:	4414      	add	r4, r2
 800061c:	e6c1      	b.n	80003a2 <__adddf3+0xe6>
 800061e:	bf00      	nop

08000620 <__aeabi_dmul>:
 8000620:	b570      	push	{r4, r5, r6, lr}
 8000622:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000626:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800062a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800062e:	bf1d      	ittte	ne
 8000630:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000634:	ea94 0f0c 	teqne	r4, ip
 8000638:	ea95 0f0c 	teqne	r5, ip
 800063c:	f000 f8de 	bleq	80007fc <__aeabi_dmul+0x1dc>
 8000640:	442c      	add	r4, r5
 8000642:	ea81 0603 	eor.w	r6, r1, r3
 8000646:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800064a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800064e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000652:	bf18      	it	ne
 8000654:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800065c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000660:	d038      	beq.n	80006d4 <__aeabi_dmul+0xb4>
 8000662:	fba0 ce02 	umull	ip, lr, r0, r2
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800066e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000672:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000676:	f04f 0600 	mov.w	r6, #0
 800067a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800067e:	f09c 0f00 	teq	ip, #0
 8000682:	bf18      	it	ne
 8000684:	f04e 0e01 	orrne.w	lr, lr, #1
 8000688:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800068c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000690:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000694:	d204      	bcs.n	80006a0 <__aeabi_dmul+0x80>
 8000696:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800069a:	416d      	adcs	r5, r5
 800069c:	eb46 0606 	adc.w	r6, r6, r6
 80006a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b8:	bf88      	it	hi
 80006ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006be:	d81e      	bhi.n	80006fe <__aeabi_dmul+0xde>
 80006c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006c4:	bf08      	it	eq
 80006c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ca:	f150 0000 	adcs.w	r0, r0, #0
 80006ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d8:	ea46 0101 	orr.w	r1, r6, r1
 80006dc:	ea40 0002 	orr.w	r0, r0, r2
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e8:	bfc2      	ittt	gt
 80006ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	popgt	{r4, r5, r6, pc}
 80006f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f8:	f04f 0e00 	mov.w	lr, #0
 80006fc:	3c01      	subs	r4, #1
 80006fe:	f300 80ab 	bgt.w	8000858 <__aeabi_dmul+0x238>
 8000702:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000706:	bfde      	ittt	le
 8000708:	2000      	movle	r0, #0
 800070a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd70      	pople	{r4, r5, r6, pc}
 8000710:	f1c4 0400 	rsb	r4, r4, #0
 8000714:	3c20      	subs	r4, #32
 8000716:	da35      	bge.n	8000784 <__aeabi_dmul+0x164>
 8000718:	340c      	adds	r4, #12
 800071a:	dc1b      	bgt.n	8000754 <__aeabi_dmul+0x134>
 800071c:	f104 0414 	add.w	r4, r4, #20
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f305 	lsl.w	r3, r0, r5
 8000728:	fa20 f004 	lsr.w	r0, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000740:	fa21 f604 	lsr.w	r6, r1, r4
 8000744:	eb42 0106 	adc.w	r1, r2, r6
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 040c 	rsb	r4, r4, #12
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f304 	lsl.w	r3, r0, r4
 8000760:	fa20 f005 	lsr.w	r0, r0, r5
 8000764:	fa01 f204 	lsl.w	r2, r1, r4
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000770:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000774:	f141 0100 	adc.w	r1, r1, #0
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 0520 	rsb	r5, r4, #32
 8000788:	fa00 f205 	lsl.w	r2, r0, r5
 800078c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000790:	fa20 f304 	lsr.w	r3, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea43 0302 	orr.w	r3, r3, r2
 800079c:	fa21 f004 	lsr.w	r0, r1, r4
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	fa21 f204 	lsr.w	r2, r1, r4
 80007a8:	ea20 0002 	bic.w	r0, r0, r2
 80007ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f094 0f00 	teq	r4, #0
 80007c0:	d10f      	bne.n	80007e2 <__aeabi_dmul+0x1c2>
 80007c2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007c6:	0040      	lsls	r0, r0, #1
 80007c8:	eb41 0101 	adc.w	r1, r1, r1
 80007cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3c01      	subeq	r4, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1a6>
 80007d6:	ea41 0106 	orr.w	r1, r1, r6
 80007da:	f095 0f00 	teq	r5, #0
 80007de:	bf18      	it	ne
 80007e0:	4770      	bxne	lr
 80007e2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007e6:	0052      	lsls	r2, r2, #1
 80007e8:	eb43 0303 	adc.w	r3, r3, r3
 80007ec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3d01      	subeq	r5, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1c6>
 80007f6:	ea43 0306 	orr.w	r3, r3, r6
 80007fa:	4770      	bx	lr
 80007fc:	ea94 0f0c 	teq	r4, ip
 8000800:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000804:	bf18      	it	ne
 8000806:	ea95 0f0c 	teqne	r5, ip
 800080a:	d00c      	beq.n	8000826 <__aeabi_dmul+0x206>
 800080c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000810:	bf18      	it	ne
 8000812:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000816:	d1d1      	bne.n	80007bc <__aeabi_dmul+0x19c>
 8000818:	ea81 0103 	eor.w	r1, r1, r3
 800081c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000820:	f04f 0000 	mov.w	r0, #0
 8000824:	bd70      	pop	{r4, r5, r6, pc}
 8000826:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800082a:	bf06      	itte	eq
 800082c:	4610      	moveq	r0, r2
 800082e:	4619      	moveq	r1, r3
 8000830:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000834:	d019      	beq.n	800086a <__aeabi_dmul+0x24a>
 8000836:	ea94 0f0c 	teq	r4, ip
 800083a:	d102      	bne.n	8000842 <__aeabi_dmul+0x222>
 800083c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000840:	d113      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000842:	ea95 0f0c 	teq	r5, ip
 8000846:	d105      	bne.n	8000854 <__aeabi_dmul+0x234>
 8000848:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800084c:	bf1c      	itt	ne
 800084e:	4610      	movne	r0, r2
 8000850:	4619      	movne	r1, r3
 8000852:	d10a      	bne.n	800086a <__aeabi_dmul+0x24a>
 8000854:	ea81 0103 	eor.w	r1, r1, r3
 8000858:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800085c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000872:	bd70      	pop	{r4, r5, r6, pc}

08000874 <__aeabi_ddiv>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800087a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800087e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000882:	bf1d      	ittte	ne
 8000884:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000888:	ea94 0f0c 	teqne	r4, ip
 800088c:	ea95 0f0c 	teqne	r5, ip
 8000890:	f000 f8a7 	bleq	80009e2 <__aeabi_ddiv+0x16e>
 8000894:	eba4 0405 	sub.w	r4, r4, r5
 8000898:	ea81 0e03 	eor.w	lr, r1, r3
 800089c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008a4:	f000 8088 	beq.w	80009b8 <__aeabi_ddiv+0x144>
 80008a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008ac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008b4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008bc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008c4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf08      	it	eq
 80008d0:	4296      	cmpeq	r6, r2
 80008d2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008d6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008da:	d202      	bcs.n	80008e2 <__aeabi_ddiv+0x6e>
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	1ab6      	subs	r6, r6, r2
 80008e4:	eb65 0503 	sbc.w	r5, r5, r3
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008f2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 000c 	orrcs.w	r0, r0, ip
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000950:	ea55 0e06 	orrs.w	lr, r5, r6
 8000954:	d018      	beq.n	8000988 <__aeabi_ddiv+0x114>
 8000956:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800095a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800095e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000962:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000966:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800096a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800096e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000972:	d1c0      	bne.n	80008f6 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000978:	d10b      	bne.n	8000992 <__aeabi_ddiv+0x11e>
 800097a:	ea41 0100 	orr.w	r1, r1, r0
 800097e:	f04f 0000 	mov.w	r0, #0
 8000982:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000986:	e7b6      	b.n	80008f6 <__aeabi_ddiv+0x82>
 8000988:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800098c:	bf04      	itt	eq
 800098e:	4301      	orreq	r1, r0
 8000990:	2000      	moveq	r0, #0
 8000992:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000996:	bf88      	it	hi
 8000998:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800099c:	f63f aeaf 	bhi.w	80006fe <__aeabi_dmul+0xde>
 80009a0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009a4:	bf04      	itt	eq
 80009a6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ae:	f150 0000 	adcs.w	r0, r0, #0
 80009b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	pop	{r4, r5, r6, pc}
 80009b8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009bc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009c4:	bfc2      	ittt	gt
 80009c6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	popgt	{r4, r5, r6, pc}
 80009d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d4:	f04f 0e00 	mov.w	lr, #0
 80009d8:	3c01      	subs	r4, #1
 80009da:	e690      	b.n	80006fe <__aeabi_dmul+0xde>
 80009dc:	ea45 0e06 	orr.w	lr, r5, r6
 80009e0:	e68d      	b.n	80006fe <__aeabi_dmul+0xde>
 80009e2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009e6:	ea94 0f0c 	teq	r4, ip
 80009ea:	bf08      	it	eq
 80009ec:	ea95 0f0c 	teqeq	r5, ip
 80009f0:	f43f af3b 	beq.w	800086a <__aeabi_dmul+0x24a>
 80009f4:	ea94 0f0c 	teq	r4, ip
 80009f8:	d10a      	bne.n	8000a10 <__aeabi_ddiv+0x19c>
 80009fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009fe:	f47f af34 	bne.w	800086a <__aeabi_dmul+0x24a>
 8000a02:	ea95 0f0c 	teq	r5, ip
 8000a06:	f47f af25 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e72c      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a10:	ea95 0f0c 	teq	r5, ip
 8000a14:	d106      	bne.n	8000a24 <__aeabi_ddiv+0x1b0>
 8000a16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a1a:	f43f aefd 	beq.w	8000818 <__aeabi_dmul+0x1f8>
 8000a1e:	4610      	mov	r0, r2
 8000a20:	4619      	mov	r1, r3
 8000a22:	e722      	b.n	800086a <__aeabi_dmul+0x24a>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	f47f aec5 	bne.w	80007bc <__aeabi_dmul+0x19c>
 8000a32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a36:	f47f af0d 	bne.w	8000854 <__aeabi_dmul+0x234>
 8000a3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a3e:	f47f aeeb 	bne.w	8000818 <__aeabi_dmul+0x1f8>
 8000a42:	e712      	b.n	800086a <__aeabi_dmul+0x24a>

08000a44 <__gedf2>:
 8000a44:	f04f 3cff 	mov.w	ip, #4294967295
 8000a48:	e006      	b.n	8000a58 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__ledf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	e002      	b.n	8000a58 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__cmpdf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a6e:	d01b      	beq.n	8000aa8 <__cmpdf2+0x54>
 8000a70:	b001      	add	sp, #4
 8000a72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a76:	bf0c      	ite	eq
 8000a78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a7c:	ea91 0f03 	teqne	r1, r3
 8000a80:	bf02      	ittt	eq
 8000a82:	ea90 0f02 	teqeq	r0, r2
 8000a86:	2000      	moveq	r0, #0
 8000a88:	4770      	bxeq	lr
 8000a8a:	f110 0f00 	cmn.w	r0, #0
 8000a8e:	ea91 0f03 	teq	r1, r3
 8000a92:	bf58      	it	pl
 8000a94:	4299      	cmppl	r1, r3
 8000a96:	bf08      	it	eq
 8000a98:	4290      	cmpeq	r0, r2
 8000a9a:	bf2c      	ite	cs
 8000a9c:	17d8      	asrcs	r0, r3, #31
 8000a9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aa2:	f040 0001 	orr.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__cmpdf2+0x64>
 8000ab2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ab6:	d107      	bne.n	8000ac8 <__cmpdf2+0x74>
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d1d6      	bne.n	8000a70 <__cmpdf2+0x1c>
 8000ac2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ac6:	d0d3      	beq.n	8000a70 <__cmpdf2+0x1c>
 8000ac8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdrcmple>:
 8000ad0:	4684      	mov	ip, r0
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4662      	mov	r2, ip
 8000ad6:	468c      	mov	ip, r1
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4663      	mov	r3, ip
 8000adc:	e000      	b.n	8000ae0 <__aeabi_cdcmpeq>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdcmpeq>:
 8000ae0:	b501      	push	{r0, lr}
 8000ae2:	f7ff ffb7 	bl	8000a54 <__cmpdf2>
 8000ae6:	2800      	cmp	r0, #0
 8000ae8:	bf48      	it	mi
 8000aea:	f110 0f00 	cmnmi.w	r0, #0
 8000aee:	bd01      	pop	{r0, pc}

08000af0 <__aeabi_dcmpeq>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff fff4 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000af8:	bf0c      	ite	eq
 8000afa:	2001      	moveq	r0, #1
 8000afc:	2000      	movne	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmplt>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffea 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b0c:	bf34      	ite	cc
 8000b0e:	2001      	movcc	r0, #1
 8000b10:	2000      	movcs	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmple>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffe0 	bl	8000ae0 <__aeabi_cdcmpeq>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpge>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffce 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b34:	bf94      	ite	ls
 8000b36:	2001      	movls	r0, #1
 8000b38:	2000      	movhi	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpgt>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffc4 	bl	8000ad0 <__aeabi_cdrcmple>
 8000b48:	bf34      	ite	cc
 8000b4a:	2001      	movcc	r0, #1
 8000b4c:	2000      	movcs	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpun>:
 8000b54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x10>
 8000b5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b62:	d10a      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x20>
 8000b6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_dcmpun+0x26>
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0001 	mov.w	r0, #1
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2iz>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b88:	d215      	bcs.n	8000bb6 <__aeabi_d2iz+0x36>
 8000b8a:	d511      	bpl.n	8000bb0 <__aeabi_d2iz+0x30>
 8000b8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b94:	d912      	bls.n	8000bbc <__aeabi_d2iz+0x3c>
 8000b96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ba2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba6:	fa23 f002 	lsr.w	r0, r3, r2
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d105      	bne.n	8000bc8 <__aeabi_d2iz+0x48>
 8000bbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	bf08      	it	eq
 8000bc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_d2uiz>:
 8000bd0:	004a      	lsls	r2, r1, #1
 8000bd2:	d211      	bcs.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd8:	d211      	bcs.n	8000bfe <__aeabi_d2uiz+0x2e>
 8000bda:	d50d      	bpl.n	8000bf8 <__aeabi_d2uiz+0x28>
 8000bdc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000be4:	d40e      	bmi.n	8000c04 <__aeabi_d2uiz+0x34>
 8000be6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bf2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d102      	bne.n	8000c0a <__aeabi_d2uiz+0x3a>
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	4770      	bx	lr
 8000c0a:	f04f 0000 	mov.w	r0, #0
 8000c0e:	4770      	bx	lr

08000c10 <__aeabi_d2f>:
 8000c10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c14:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c18:	bf24      	itt	cs
 8000c1a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c1e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c22:	d90d      	bls.n	8000c40 <__aeabi_d2f+0x30>
 8000c24:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c28:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c2c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c30:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c34:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c38:	bf08      	it	eq
 8000c3a:	f020 0001 	biceq.w	r0, r0, #1
 8000c3e:	4770      	bx	lr
 8000c40:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c44:	d121      	bne.n	8000c8a <__aeabi_d2f+0x7a>
 8000c46:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c4a:	bfbc      	itt	lt
 8000c4c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	4770      	bxlt	lr
 8000c52:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c56:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c5a:	f1c2 0218 	rsb	r2, r2, #24
 8000c5e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c62:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c66:	fa20 f002 	lsr.w	r0, r0, r2
 8000c6a:	bf18      	it	ne
 8000c6c:	f040 0001 	orrne.w	r0, r0, #1
 8000c70:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c74:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c78:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c7c:	ea40 000c 	orr.w	r0, r0, ip
 8000c80:	fa23 f302 	lsr.w	r3, r3, r2
 8000c84:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c88:	e7cc      	b.n	8000c24 <__aeabi_d2f+0x14>
 8000c8a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c8e:	d107      	bne.n	8000ca0 <__aeabi_d2f+0x90>
 8000c90:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c94:	bf1e      	ittt	ne
 8000c96:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c9a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c9e:	4770      	bxne	lr
 8000ca0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ca4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <__aeabi_uldivmod>:
 8000cb0:	b953      	cbnz	r3, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb2:	b94a      	cbnz	r2, 8000cc8 <__aeabi_uldivmod+0x18>
 8000cb4:	2900      	cmp	r1, #0
 8000cb6:	bf08      	it	eq
 8000cb8:	2800      	cmpeq	r0, #0
 8000cba:	bf1c      	itt	ne
 8000cbc:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cc4:	f000 b97a 	b.w	8000fbc <__aeabi_idiv0>
 8000cc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ccc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd0:	f000 f806 	bl	8000ce0 <__udivmoddi4>
 8000cd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cdc:	b004      	add	sp, #16
 8000cde:	4770      	bx	lr

08000ce0 <__udivmoddi4>:
 8000ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce4:	468c      	mov	ip, r1
 8000ce6:	460d      	mov	r5, r1
 8000ce8:	4604      	mov	r4, r0
 8000cea:	9e08      	ldr	r6, [sp, #32]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d151      	bne.n	8000d94 <__udivmoddi4+0xb4>
 8000cf0:	428a      	cmp	r2, r1
 8000cf2:	4617      	mov	r7, r2
 8000cf4:	d96d      	bls.n	8000dd2 <__udivmoddi4+0xf2>
 8000cf6:	fab2 fe82 	clz	lr, r2
 8000cfa:	f1be 0f00 	cmp.w	lr, #0
 8000cfe:	d00b      	beq.n	8000d18 <__udivmoddi4+0x38>
 8000d00:	f1ce 0c20 	rsb	ip, lr, #32
 8000d04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000d08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d1c:	0c25      	lsrs	r5, r4, #16
 8000d1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d22:	fa1f f987 	uxth.w	r9, r7
 8000d26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d2e:	fb08 f309 	mul.w	r3, r8, r9
 8000d32:	42ab      	cmp	r3, r5
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x6c>
 8000d36:	19ed      	adds	r5, r5, r7
 8000d38:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d3c:	f080 8123 	bcs.w	8000f86 <__udivmoddi4+0x2a6>
 8000d40:	42ab      	cmp	r3, r5
 8000d42:	f240 8120 	bls.w	8000f86 <__udivmoddi4+0x2a6>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	443d      	add	r5, r7
 8000d4c:	1aed      	subs	r5, r5, r3
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d5c:	fb00 f909 	mul.w	r9, r0, r9
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x98>
 8000d64:	19e4      	adds	r4, r4, r7
 8000d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6a:	f080 810a 	bcs.w	8000f82 <__udivmoddi4+0x2a2>
 8000d6e:	45a1      	cmp	r9, r4
 8000d70:	f240 8107 	bls.w	8000f82 <__udivmoddi4+0x2a2>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 0409 	sub.w	r4, r4, r9
 8000d7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d80:	2100      	movs	r1, #0
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d061      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000d86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	6034      	str	r4, [r6, #0]
 8000d8e:	6073      	str	r3, [r6, #4]
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d907      	bls.n	8000da8 <__udivmoddi4+0xc8>
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d054      	beq.n	8000e46 <__udivmoddi4+0x166>
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000da2:	4608      	mov	r0, r1
 8000da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da8:	fab3 f183 	clz	r1, r3
 8000dac:	2900      	cmp	r1, #0
 8000dae:	f040 808e 	bne.w	8000ece <__udivmoddi4+0x1ee>
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0xdc>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80fa 	bhi.w	8000fb0 <__udivmoddi4+0x2d0>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	46ac      	mov	ip, r5
 8000dc6:	2e00      	cmp	r6, #0
 8000dc8:	d03f      	beq.n	8000e4a <__udivmoddi4+0x16a>
 8000dca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	b912      	cbnz	r2, 8000dda <__udivmoddi4+0xfa>
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dda:	fab7 fe87 	clz	lr, r7
 8000dde:	f1be 0f00 	cmp.w	lr, #0
 8000de2:	d134      	bne.n	8000e4e <__udivmoddi4+0x16e>
 8000de4:	1beb      	subs	r3, r5, r7
 8000de6:	0c3a      	lsrs	r2, r7, #16
 8000de8:	fa1f fc87 	uxth.w	ip, r7
 8000dec:	2101      	movs	r1, #1
 8000dee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000df2:	0c25      	lsrs	r5, r4, #16
 8000df4:	fb02 3318 	mls	r3, r2, r8, r3
 8000df8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dfc:	fb0c f308 	mul.w	r3, ip, r8
 8000e00:	42ab      	cmp	r3, r5
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x134>
 8000e04:	19ed      	adds	r5, r5, r7
 8000e06:	f108 30ff 	add.w	r0, r8, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x132>
 8000e0c:	42ab      	cmp	r3, r5
 8000e0e:	f200 80d1 	bhi.w	8000fb4 <__udivmoddi4+0x2d4>
 8000e12:	4680      	mov	r8, r0
 8000e14:	1aed      	subs	r5, r5, r3
 8000e16:	b2a3      	uxth	r3, r4
 8000e18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e24:	fb0c fc00 	mul.w	ip, ip, r0
 8000e28:	45a4      	cmp	ip, r4
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x15c>
 8000e2c:	19e4      	adds	r4, r4, r7
 8000e2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e32:	d202      	bcs.n	8000e3a <__udivmoddi4+0x15a>
 8000e34:	45a4      	cmp	ip, r4
 8000e36:	f200 80b8 	bhi.w	8000faa <__udivmoddi4+0x2ca>
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	eba4 040c 	sub.w	r4, r4, ip
 8000e40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e44:	e79d      	b.n	8000d82 <__udivmoddi4+0xa2>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	f1ce 0420 	rsb	r4, lr, #32
 8000e52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e5e:	0c3a      	lsrs	r2, r7, #16
 8000e60:	fa25 f404 	lsr.w	r4, r5, r4
 8000e64:	ea48 0803 	orr.w	r8, r8, r3
 8000e68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e70:	fb02 4411 	mls	r4, r2, r1, r4
 8000e74:	fa1f fc87 	uxth.w	ip, r7
 8000e78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e80:	42ab      	cmp	r3, r5
 8000e82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e86:	d909      	bls.n	8000e9c <__udivmoddi4+0x1bc>
 8000e88:	19ed      	adds	r5, r5, r7
 8000e8a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e8e:	f080 808a 	bcs.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	f240 8087 	bls.w	8000fa6 <__udivmoddi4+0x2c6>
 8000e98:	3902      	subs	r1, #2
 8000e9a:	443d      	add	r5, r7
 8000e9c:	1aeb      	subs	r3, r5, r3
 8000e9e:	fa1f f588 	uxth.w	r5, r8
 8000ea2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000ea6:	fb02 3310 	mls	r3, r2, r0, r3
 8000eaa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000eae:	fb00 f30c 	mul.w	r3, r0, ip
 8000eb2:	42ab      	cmp	r3, r5
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x1e6>
 8000eb6:	19ed      	adds	r5, r5, r7
 8000eb8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ebc:	d26f      	bcs.n	8000f9e <__udivmoddi4+0x2be>
 8000ebe:	42ab      	cmp	r3, r5
 8000ec0:	d96d      	bls.n	8000f9e <__udivmoddi4+0x2be>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	443d      	add	r5, r7
 8000ec6:	1aeb      	subs	r3, r5, r3
 8000ec8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ecc:	e78f      	b.n	8000dee <__udivmoddi4+0x10e>
 8000ece:	f1c1 0720 	rsb	r7, r1, #32
 8000ed2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ed6:	408b      	lsls	r3, r1
 8000ed8:	fa05 f401 	lsl.w	r4, r5, r1
 8000edc:	ea48 0303 	orr.w	r3, r8, r3
 8000ee0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ee4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000eee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ef2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ef6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000efa:	fa1f f883 	uxth.w	r8, r3
 8000efe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000f02:	fb09 f408 	mul.w	r4, r9, r8
 8000f06:	42ac      	cmp	r4, r5
 8000f08:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x244>
 8000f12:	18ed      	adds	r5, r5, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d243      	bcs.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	d941      	bls.n	8000fa2 <__udivmoddi4+0x2c2>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	441d      	add	r5, r3
 8000f24:	1b2d      	subs	r5, r5, r4
 8000f26:	fa1f fe8e 	uxth.w	lr, lr
 8000f2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45a0      	cmp	r8, r4
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x26e>
 8000f3e:	18e4      	adds	r4, r4, r3
 8000f40:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f44:	d229      	bcs.n	8000f9a <__udivmoddi4+0x2ba>
 8000f46:	45a0      	cmp	r8, r4
 8000f48:	d927      	bls.n	8000f9a <__udivmoddi4+0x2ba>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	441c      	add	r4, r3
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba4 0408 	sub.w	r4, r4, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454c      	cmp	r4, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	464d      	mov	r5, r9
 8000f60:	d315      	bcc.n	8000f8e <__udivmoddi4+0x2ae>
 8000f62:	d012      	beq.n	8000f8a <__udivmoddi4+0x2aa>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x29c>
 8000f66:	ebba 030e 	subs.w	r3, sl, lr
 8000f6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40cb      	lsrs	r3, r1
 8000f74:	431f      	orrs	r7, r3
 8000f76:	40cc      	lsrs	r4, r1
 8000f78:	6037      	str	r7, [r6, #0]
 8000f7a:	6074      	str	r4, [r6, #4]
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f82:	4618      	mov	r0, r3
 8000f84:	e6f8      	b.n	8000d78 <__udivmoddi4+0x98>
 8000f86:	4690      	mov	r8, r2
 8000f88:	e6e0      	b.n	8000d4c <__udivmoddi4+0x6c>
 8000f8a:	45c2      	cmp	sl, r8
 8000f8c:	d2ea      	bcs.n	8000f64 <__udivmoddi4+0x284>
 8000f8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f92:	eb69 0503 	sbc.w	r5, r9, r3
 8000f96:	3801      	subs	r0, #1
 8000f98:	e7e4      	b.n	8000f64 <__udivmoddi4+0x284>
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	e7d7      	b.n	8000f4e <__udivmoddi4+0x26e>
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	e791      	b.n	8000ec6 <__udivmoddi4+0x1e6>
 8000fa2:	4681      	mov	r9, r0
 8000fa4:	e7be      	b.n	8000f24 <__udivmoddi4+0x244>
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	e778      	b.n	8000e9c <__udivmoddi4+0x1bc>
 8000faa:	3802      	subs	r0, #2
 8000fac:	443c      	add	r4, r7
 8000fae:	e745      	b.n	8000e3c <__udivmoddi4+0x15c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xe6>
 8000fb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fb8:	443d      	add	r5, r7
 8000fba:	e72b      	b.n	8000e14 <__udivmoddi4+0x134>

08000fbc <__aeabi_idiv0>:
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc2:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_InitTick+0x2c>)
{
 8000fc4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fd0:	f000 fd34 	bl	8001a3c <HAL_SYSTICK_Config>
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	b938      	cbnz	r0, 8000fe8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4629      	mov	r1, r5
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 fcde 	bl	80019a0 <HAL_NVIC_SetPriority>
 8000fe4:	4620      	mov	r0, r4
 8000fe6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	20000ed4 	.word	0x20000ed4

08000ff0 <HAL_Init>:
{
 8000ff0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff2:	2003      	movs	r0, #3
 8000ff4:	f000 fcc2 	bl	800197c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff ffe1 	bl	8000fc0 <HAL_InitTick>
 8000ffe:	4604      	mov	r4, r0
 8001000:	b918      	cbnz	r0, 800100a <HAL_Init+0x1a>
    HAL_MspInit();
 8001002:	f01e fb29 	bl	801f658 <HAL_MspInit>
}
 8001006:	4620      	mov	r0, r4
 8001008:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800100a:	2401      	movs	r4, #1
 800100c:	e7fb      	b.n	8001006 <HAL_Init+0x16>
	...

08001010 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001010:	4a02      	ldr	r2, [pc, #8]	; (800101c <HAL_IncTick+0xc>)
 8001012:	6813      	ldr	r3, [r2, #0]
 8001014:	3301      	adds	r3, #1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20090674 	.word	0x20090674

08001020 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001020:	4b01      	ldr	r3, [pc, #4]	; (8001028 <HAL_GetTick+0x8>)
 8001022:	6818      	ldr	r0, [r3, #0]
}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20090674 	.word	0x20090674

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b538      	push	{r3, r4, r5, lr}
 800102e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff6 	bl	8001020 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001034:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001036:	4605      	mov	r5, r0
  {
    wait++;
 8001038:	bf18      	it	ne
 800103a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800103c:	f7ff fff0 	bl	8001020 <HAL_GetTick>
 8001040:	1b40      	subs	r0, r0, r5
 8001042:	4284      	cmp	r4, r0
 8001044:	d8fa      	bhi.n	800103c <HAL_Delay+0x10>
  {
  }
}
 8001046:	bd38      	pop	{r3, r4, r5, pc}

08001048 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001048:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800104e:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001052:	fab6 f386 	clz	r3, r6
 8001056:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 800105a:	40de      	lsrs	r6, r3
 800105c:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 800105e:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8001062:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001066:	fa93 f5a3 	rbit	r5, r3
 800106a:	fab5 f585 	clz	r5, r5
 800106e:	fa93 f3a3 	rbit	r3, r3
 8001072:	2407      	movs	r4, #7
 8001074:	fa21 f505 	lsr.w	r5, r1, r5
 8001078:	fa04 f505 	lsl.w	r5, r4, r5
 800107c:	fab3 f383 	clz	r3, r3
 8001080:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001084:	40d9      	lsrs	r1, r3
 8001086:	ea24 0405 	bic.w	r4, r4, r5
 800108a:	fa02 f101 	lsl.w	r1, r2, r1
 800108e:	4321      	orrs	r1, r4
 8001090:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8001094:	bd70      	pop	{r4, r5, r6, pc}
	...

08001098 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001098:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 800109a:	2300      	movs	r3, #0
 800109c:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800109e:	4604      	mov	r4, r0
 80010a0:	2800      	cmp	r0, #0
 80010a2:	f000 80b4 	beq.w	800120e <HAL_ADC_Init+0x176>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010a6:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80010a8:	b925      	cbnz	r5, 80010b4 <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010aa:	f01e fc39 	bl	801f920 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010ae:	6625      	str	r5, [r4, #96]	; 0x60
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010b0:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 80010b4:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010ba:	bf41      	itttt	mi
 80010bc:	689a      	ldrmi	r2, [r3, #8]
 80010be:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 80010c2:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 80010c6:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 80010c8:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010ca:	00d1      	lsls	r1, r2, #3
 80010cc:	d576      	bpl.n	80011bc <HAL_ADC_Init+0x124>
 80010ce:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010d0:	00d2      	lsls	r2, r2, #3
 80010d2:	f140 808a 	bpl.w	80011ea <HAL_ADC_Init+0x152>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010d6:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010da:	06d5      	lsls	r5, r2, #27
 80010dc:	f100 8093 	bmi.w	8001206 <HAL_ADC_Init+0x16e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80010e0:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010e2:	0751      	lsls	r1, r2, #29
 80010e4:	f100 808f 	bmi.w	8001206 <HAL_ADC_Init+0x16e>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010ea:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80010ee:	f042 0202 	orr.w	r2, r2, #2
 80010f2:	65e2      	str	r2, [r4, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	2a01      	cmp	r2, #1
 80010fc:	f040 8089 	bne.w	8001212 <HAL_ADC_Init+0x17a>
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	07d2      	lsls	r2, r2, #31
 8001104:	f140 8085 	bpl.w	8001212 <HAL_ADC_Init+0x17a>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 8001108:	68e5      	ldr	r5, [r4, #12]
 800110a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 800110c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 800110e:	432a      	orrs	r2, r5
 8001110:	68a5      	ldr	r5, [r4, #8]
 8001112:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8001114:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001116:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 8001118:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 800111c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001120:	bf02      	ittt	eq
 8001122:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 8001124:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001128:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800112c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800112e:	b121      	cbz	r1, 800113a <HAL_ADC_Init+0xa2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001130:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001132:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001136:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001138:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 800113a:	68dd      	ldr	r5, [r3, #12]
 800113c:	4939      	ldr	r1, [pc, #228]	; (8001224 <HAL_ADC_Init+0x18c>)
 800113e:	4029      	ands	r1, r5
 8001140:	430a      	orrs	r2, r1
 8001142:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	f012 0f0c 	tst.w	r2, #12
 800114a:	d120      	bne.n	800118e <HAL_ADC_Init+0xf6>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 800114c:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800114e:	69a5      	ldr	r5, [r4, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001150:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8001152:	0052      	lsls	r2, r2, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8001154:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8001158:	6d25      	ldr	r5, [r4, #80]	; 0x50
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800115a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 800115e:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001160:	f021 0106 	bic.w	r1, r1, #6
 8001164:	430a      	orrs	r2, r1
 8001166:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8001168:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800116a:	2a01      	cmp	r2, #1
 800116c:	d147      	bne.n	80011fe <HAL_ADC_Init+0x166>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800116e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001170:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001172:	6919      	ldr	r1, [r3, #16]
 8001174:	432a      	orrs	r2, r5
 8001176:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	432a      	orrs	r2, r5
 800117e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001180:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001184:	432a      	orrs	r2, r5
 8001186:	f021 0104 	bic.w	r1, r1, #4
 800118a:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800118c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800118e:	6922      	ldr	r2, [r4, #16]
 8001190:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001192:	bf05      	ittet	eq
 8001194:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001196:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001198:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800119a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800119e:	bf06      	itte	eq
 80011a0:	f021 010f 	biceq.w	r1, r1, #15
 80011a4:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80011a6:	f022 020f 	bicne.w	r2, r2, #15
 80011aa:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80011ac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011ae:	f023 0303 	bic.w	r3, r3, #3
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80011b8:	b003      	add	sp, #12
 80011ba:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80011bc:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80011be:	491a      	ldr	r1, [pc, #104]	; (8001228 <HAL_ADC_Init+0x190>)
 80011c0:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80011c4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80011c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_ADC_Init+0x194>)
 80011d0:	6812      	ldr	r2, [r2, #0]
 80011d2:	fbb2 f1f1 	udiv	r1, r2, r1
 80011d6:	220a      	movs	r2, #10
 80011d8:	434a      	muls	r2, r1
      wait_loop_index--;
 80011da:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80011dc:	9a01      	ldr	r2, [sp, #4]
 80011de:	2a00      	cmp	r2, #0
 80011e0:	f43f af75 	beq.w	80010ce <HAL_ADC_Init+0x36>
      wait_loop_index--;
 80011e4:	9a01      	ldr	r2, [sp, #4]
 80011e6:	3a01      	subs	r2, #1
 80011e8:	e7f7      	b.n	80011da <HAL_ADC_Init+0x142>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011ec:	f042 0210 	orr.w	r2, r2, #16
 80011f0:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011f2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80011f4:	f042 0201 	orr.w	r2, r2, #1
 80011f8:	6622      	str	r2, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	e76c      	b.n	80010d8 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011fe:	691a      	ldr	r2, [r3, #16]
 8001200:	f022 0201 	bic.w	r2, r2, #1
 8001204:	e7c2      	b.n	800118c <HAL_ADC_Init+0xf4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001206:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 800120e:	2001      	movs	r0, #1
 8001210:	e7d2      	b.n	80011b8 <HAL_ADC_Init+0x120>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001212:	4907      	ldr	r1, [pc, #28]	; (8001230 <HAL_ADC_Init+0x198>)
 8001214:	6865      	ldr	r5, [r4, #4]
 8001216:	688a      	ldr	r2, [r1, #8]
 8001218:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800121c:	432a      	orrs	r2, r5
 800121e:	608a      	str	r2, [r1, #8]
 8001220:	e772      	b.n	8001108 <HAL_ADC_Init+0x70>
 8001222:	bf00      	nop
 8001224:	fff0c007 	.word	0xfff0c007
 8001228:	001e8480 	.word	0x001e8480
 800122c:	20000ed4 	.word	0x20000ed4
 8001230:	50040300 	.word	0x50040300

08001234 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001236:	6945      	ldr	r5, [r0, #20]
 8001238:	2d08      	cmp	r5, #8
{
 800123a:	4604      	mov	r4, r0
 800123c:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800123e:	d00a      	beq.n	8001256 <HAL_ADC_PollForConversion+0x22>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Check ADC DMA mode in independant mode */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 8001240:	6803      	ldr	r3, [r0, #0]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	07dd      	lsls	r5, r3, #31
 8001246:	d505      	bpl.n	8001254 <HAL_ADC_PollForConversion+0x20>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001248:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800124a:	f043 0320 	orr.w	r3, r3, #32
 800124e:	65c3      	str	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001250:	2001      	movs	r0, #1
 8001252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001254:	2504      	movs	r5, #4
      }
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001256:	f7ff fee3 	bl	8001020 <HAL_GetTick>
 800125a:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
 800125c:	6823      	ldr	r3, [r4, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4215      	tst	r5, r2
 8001262:	d01d      	beq.n	80012a0 <HAL_ADC_PollForConversion+0x6c>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001264:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800126a:	65e2      	str	r2, [r4, #92]	; 0x5c
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001272:	d10f      	bne.n	8001294 <HAL_ADC_PollForConversion+0x60>
 8001274:	69e2      	ldr	r2, [r4, #28]
 8001276:	b96a      	cbnz	r2, 8001294 <HAL_ADC_PollForConversion+0x60>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	0711      	lsls	r1, r2, #28
 800127c:	d50a      	bpl.n	8001294 <HAL_ADC_PollForConversion+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800127e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001280:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001284:	65e2      	str	r2, [r4, #92]	; 0x5c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001286:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001288:	04d2      	lsls	r2, r2, #19
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800128a:	bf5e      	ittt	pl
 800128c:	6de2      	ldrpl	r2, [r4, #92]	; 0x5c
 800128e:	f042 0201 	orrpl.w	r2, r2, #1
 8001292:	65e2      	strpl	r2, [r4, #92]	; 0x5c
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001294:	2d08      	cmp	r5, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 8001296:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001298:	d114      	bne.n	80012c4 <HAL_ADC_PollForConversion+0x90>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 800129a:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800129c:	2000      	movs	r0, #0
}
 800129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012a0:	1c70      	adds	r0, r6, #1
 80012a2:	d0dc      	beq.n	800125e <HAL_ADC_PollForConversion+0x2a>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012a4:	b946      	cbnz	r6, 80012b8 <HAL_ADC_PollForConversion+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80012a8:	f043 0304 	orr.w	r3, r3, #4
 80012ac:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 80012ae:	2300      	movs	r3, #0
 80012b0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_TIMEOUT;
 80012b4:	2003      	movs	r0, #3
 80012b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012b8:	f7ff feb2 	bl	8001020 <HAL_GetTick>
 80012bc:	1bc0      	subs	r0, r0, r7
 80012be:	4286      	cmp	r6, r0
 80012c0:	d2cc      	bcs.n	800125c <HAL_ADC_PollForConversion+0x28>
 80012c2:	e7f0      	b.n	80012a6 <HAL_ADC_PollForConversion+0x72>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80012c4:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80012c8:	d1e8      	bne.n	800129c <HAL_ADC_PollForConversion+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012ca:	220c      	movs	r2, #12
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012d0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012d0:	6803      	ldr	r3, [r0, #0]
 80012d2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80012d4:	4770      	bx	lr
	...

080012d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012de:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80012e2:	2b01      	cmp	r3, #1
{
 80012e4:	4605      	mov	r5, r0
 80012e6:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80012e8:	f000 8168 	beq.w	80015bc <HAL_ADC_ConfigChannel+0x2e4>
 80012ec:	2301      	movs	r3, #1
 80012ee:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f2:	6800      	ldr	r0, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80012f4:	6882      	ldr	r2, [r0, #8]
 80012f6:	0757      	lsls	r7, r2, #29
 80012f8:	f100 815a 	bmi.w	80015b0 <HAL_ADC_ConfigChannel+0x2d8>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012fc:	684b      	ldr	r3, [r1, #4]
 80012fe:	2b05      	cmp	r3, #5
 8001300:	d808      	bhi.n	8001314 <HAL_ADC_ConfigChannel+0x3c>
    {
      switch (sConfig->Rank)
 8001302:	3b02      	subs	r3, #2
 8001304:	2b03      	cmp	r3, #3
 8001306:	d864      	bhi.n	80013d2 <HAL_ADC_ConfigChannel+0xfa>
 8001308:	e8df f003 	tbb	[pc, r3]
 800130c:	605e5c02 	.word	0x605e5c02
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001310:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 8001312:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001314:	6861      	ldr	r1, [r4, #4]
 8001316:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131a:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	f401 7640 	and.w	r6, r1, #768	; 0x300
 8001326:	40de      	lsrs	r6, r3
 8001328:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 800132c:	f001 011f 	and.w	r1, r1, #31
 8001330:	231f      	movs	r3, #31
 8001332:	fa03 f201 	lsl.w	r2, r3, r1
 8001336:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 800133a:	ea23 0302 	bic.w	r3, r3, r2
 800133e:	6822      	ldr	r2, [r4, #0]
 8001340:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001344:	408a      	lsls	r2, r1
 8001346:	4313      	orrs	r3, r2
 8001348:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800134c:	6882      	ldr	r2, [r0, #8]
 800134e:	f012 020c 	ands.w	r2, r2, #12
 8001352:	d126      	bne.n	80013a2 <HAL_ADC_ConfigChannel+0xca>
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001354:	68a3      	ldr	r3, [r4, #8]
 8001356:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800135a:	d13c      	bne.n	80013d6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800135c:	6821      	ldr	r1, [r4, #0]
 800135e:	f7ff fe73 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
        
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001362:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001364:	6953      	ldr	r3, [r2, #20]
 8001366:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800136a:	6153      	str	r3, [r2, #20]

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800136c:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800136e:	f8d5 e000 	ldr.w	lr, [r5]
 8001372:	6823      	ldr	r3, [r4, #0]
 8001374:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001378:	2e04      	cmp	r6, #4
 800137a:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 800137e:	d033      	beq.n	80013e8 <HAL_ADC_ConfigChannel+0x110>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001380:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8001384:	0048      	lsls	r0, r1, #1
 8001386:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8001388:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 800138c:	4081      	lsls	r1, r0
 800138e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001392:	4319      	orrs	r1, r3
 8001394:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8001398:	4bc5      	ldr	r3, [pc, #788]	; (80016b0 <HAL_ADC_ConfigChannel+0x3d8>)
 800139a:	4003      	ands	r3, r0
 800139c:	4319      	orrs	r1, r3
 800139e:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80013a2:	6828      	ldr	r0, [r5, #0]
 80013a4:	6883      	ldr	r3, [r0, #8]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	f040 8108 	bne.w	80015c0 <HAL_ADC_ConfigChannel+0x2e8>
 80013b0:	6803      	ldr	r3, [r0, #0]
 80013b2:	07de      	lsls	r6, r3, #31
 80013b4:	f140 8104 	bpl.w	80015c0 <HAL_ADC_ConfigChannel+0x2e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013b8:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ba:	2300      	movs	r3, #0
 80013bc:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
  
  /* Return function status */
  return tmp_hal_status;
}
 80013c0:	b003      	add	sp, #12
 80013c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80013c4:	2312      	movs	r3, #18
 80013c6:	e7a4      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80013c8:	2318      	movs	r3, #24
 80013ca:	e7a2      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80013cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d0:	e79f      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 80013d2:	2306      	movs	r3, #6
 80013d4:	e79d      	b.n	8001312 <HAL_ADC_ConfigChannel+0x3a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013d6:	461a      	mov	r2, r3
 80013d8:	6821      	ldr	r1, [r4, #0]
 80013da:	f7ff fe35 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013de:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013e0:	6953      	ldr	r3, [r2, #20]
 80013e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013e6:	e7c0      	b.n	800136a <HAL_ADC_ConfigChannel+0x92>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013e8:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013ec:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80013f0:	f3c1 6784 	ubfx	r7, r1, #26, #5
 80013f4:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 80013f8:	2800      	cmp	r0, #0
 80013fa:	d13a      	bne.n	8001472 <HAL_ADC_ConfigChannel+0x19a>
 80013fc:	f3c3 6084 	ubfx	r0, r3, #26, #5
 8001400:	4287      	cmp	r7, r0
 8001402:	f040 8149 	bne.w	8001698 <HAL_ADC_ConfigChannel+0x3c0>
  MODIFY_REG(*preg,
 8001406:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800140a:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800140e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001410:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 8001414:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001418:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800141c:	bb9f      	cbnz	r7, 8001486 <HAL_ADC_ConfigChannel+0x1ae>
 800141e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001422:	4283      	cmp	r3, r0
 8001424:	f040 813d 	bne.w	80016a2 <HAL_ADC_ConfigChannel+0x3ca>
  MODIFY_REG(*preg,
 8001428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800142c:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800142e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001430:	6891      	ldr	r1, [r2, #8]
 8001432:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001436:	f102 0608 	add.w	r6, r2, #8
 800143a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800143e:	bb77      	cbnz	r7, 800149e <HAL_ADC_ConfigChannel+0x1c6>
 8001440:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001444:	4283      	cmp	r3, r0
 8001446:	f040 8147 	bne.w	80016d8 <HAL_ADC_ConfigChannel+0x400>
  MODIFY_REG(*preg,
 800144a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800144e:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001450:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001452:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001456:	68d2      	ldr	r2, [r2, #12]
 8001458:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800145c:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001460:	bb4e      	cbnz	r6, 80014b6 <HAL_ADC_ConfigChannel+0x1de>
 8001462:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001466:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8001468:	bf04      	itt	eq
 800146a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800146e:	6002      	streq	r2, [r0, #0]
 8001470:	e797      	b.n	80013a2 <HAL_ADC_ConfigChannel+0xca>
 8001472:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001476:	fab0 f080 	clz	r0, r0
 800147a:	4287      	cmp	r7, r0
 800147c:	d0c3      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x12e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800147e:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001482:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	4283      	cmp	r3, r0
 8001490:	d0ca      	beq.n	8001428 <HAL_ADC_ConfigChannel+0x150>
 8001492:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001494:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001496:	f102 0608 	add.w	r6, r2, #8
 800149a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800149e:	fa93 f3a3 	rbit	r3, r3
 80014a2:	fab3 f383 	clz	r3, r3
 80014a6:	4283      	cmp	r3, r0
 80014a8:	d0cf      	beq.n	800144a <HAL_ADC_ConfigChannel+0x172>
 80014aa:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80014ae:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	fab3 f383 	clz	r3, r3
 80014be:	e7d2      	b.n	8001466 <HAL_ADC_ConfigChannel+0x18e>
 80014c0:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80014c4:	fab2 f282 	clz	r2, r2
 80014c8:	3201      	adds	r2, #1
 80014ca:	2a09      	cmp	r2, #9
 80014cc:	d90d      	bls.n	80014ea <HAL_ADC_ConfigChannel+0x212>
 80014ce:	fa93 f2a3 	rbit	r2, r3
 80014d2:	fab2 f282 	clz	r2, r2
 80014d6:	3201      	adds	r2, #1
 80014d8:	0696      	lsls	r6, r2, #26
 80014da:	fa93 f1a3 	rbit	r1, r3
 80014de:	fab1 f181 	clz	r1, r1
 80014e2:	1c4a      	adds	r2, r1, #1
 80014e4:	2101      	movs	r1, #1
 80014e6:	4091      	lsls	r1, r2
 80014e8:	e016      	b.n	8001518 <HAL_ADC_ConfigChannel+0x240>
 80014ea:	fa93 f2a3 	rbit	r2, r3
 80014ee:	fab2 f282 	clz	r2, r2
 80014f2:	3201      	adds	r2, #1
 80014f4:	0692      	lsls	r2, r2, #26
 80014f6:	fa93 f1a3 	rbit	r1, r3
 80014fa:	fab1 f181 	clz	r1, r1
 80014fe:	1c4e      	adds	r6, r1, #1
 8001500:	2101      	movs	r1, #1
 8001502:	40b1      	lsls	r1, r6
 8001504:	e07f      	b.n	8001606 <HAL_ADC_ConfigChannel+0x32e>
 8001506:	fa93 f1a3 	rbit	r1, r3
 800150a:	fab1 f181 	clz	r1, r1
 800150e:	3101      	adds	r1, #1
 8001510:	e080      	b.n	8001614 <HAL_ADC_ConfigChannel+0x33c>
 8001512:	4616      	mov	r6, r2
 8001514:	fa01 f10e 	lsl.w	r1, r1, lr
 8001518:	ea41 0206 	orr.w	r2, r1, r6
 800151c:	b94f      	cbnz	r7, 8001532 <HAL_ADC_ConfigChannel+0x25a>
 800151e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001522:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001526:	f1a3 011b 	sub.w	r1, r3, #27
 800152a:	0509      	lsls	r1, r1, #20
 800152c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001530:	e073      	b.n	800161a <HAL_ADC_ConfigChannel+0x342>
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	fab3 f383 	clz	r3, r3
 800153a:	e7f2      	b.n	8001522 <HAL_ADC_ConfigChannel+0x24a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 800153c:	4b5d      	ldr	r3, [pc, #372]	; (80016b4 <HAL_ADC_ConfigChannel+0x3dc>)
 800153e:	429a      	cmp	r2, r3
 8001540:	d104      	bne.n	800154c <HAL_ADC_ConfigChannel+0x274>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001542:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001544:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001546:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800154a:	e072      	b.n	8001632 <HAL_ADC_ConfigChannel+0x35a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 800154c:	4b5b      	ldr	r3, [pc, #364]	; (80016bc <HAL_ADC_ConfigChannel+0x3e4>)
 800154e:	429a      	cmp	r2, r3
 8001550:	f47f af32 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 8001554:	4b58      	ldr	r3, [pc, #352]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001556:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001558:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800155c:	e069      	b.n	8001632 <HAL_ADC_ConfigChannel+0x35a>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800155e:	4955      	ldr	r1, [pc, #340]	; (80016b4 <HAL_ADC_ConfigChannel+0x3dc>)
 8001560:	428a      	cmp	r2, r1
 8001562:	d111      	bne.n	8001588 <HAL_ADC_ConfigChannel+0x2b0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001564:	4a56      	ldr	r2, [pc, #344]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	f47f af26 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 800156c:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001570:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001574:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001578:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800157c:	430b      	orrs	r3, r1
 800157e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001582:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 8001586:	e717      	b.n	80013b8 <HAL_ADC_ConfigChannel+0xe0>
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001588:	494c      	ldr	r1, [pc, #304]	; (80016bc <HAL_ADC_ConfigChannel+0x3e4>)
 800158a:	428a      	cmp	r2, r1
 800158c:	f47f af14 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001590:	4a4b      	ldr	r2, [pc, #300]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001592:	4293      	cmp	r3, r2
 8001594:	f47f af10 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001598:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800159c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80015a0:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80015a4:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 80015a8:	430b      	orrs	r3, r1
 80015aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015ae:	e7e8      	b.n	8001582 <HAL_ADC_ConfigChannel+0x2aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015b2:	f042 0220 	orr.w	r2, r2, #32
 80015b6:	65ea      	str	r2, [r5, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80015b8:	4618      	mov	r0, r3
 80015ba:	e6fe      	b.n	80013ba <HAL_ADC_ConfigChannel+0xe2>
  __HAL_LOCK(hadc);
 80015bc:	2002      	movs	r0, #2
 80015be:	e6ff      	b.n	80013c0 <HAL_ADC_ConfigChannel+0xe8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80015c0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80015c2:	4a40      	ldr	r2, [pc, #256]	; (80016c4 <HAL_ADC_ConfigChannel+0x3ec>)
 80015c4:	f8d0 60b0 	ldr.w	r6, [r0, #176]	; 0xb0
 80015c8:	6823      	ldr	r3, [r4, #0]
 80015ca:	f001 0e20 	and.w	lr, r1, #32
 80015ce:	fa02 f20e 	lsl.w	r2, r2, lr
 80015d2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80015d6:	4072      	eors	r2, r6
 80015d8:	403a      	ands	r2, r7
 80015da:	4072      	eors	r2, r6
 80015dc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015e0:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <HAL_ADC_ConfigChannel+0x3f0>)
 80015e2:	4291      	cmp	r1, r2
 80015e4:	d11d      	bne.n	8001622 <HAL_ADC_ConfigChannel+0x34a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80015e6:	2f00      	cmp	r7, #0
 80015e8:	f47f af6a 	bne.w	80014c0 <HAL_ADC_ConfigChannel+0x1e8>
 80015ec:	f3c3 6184 	ubfx	r1, r3, #26, #5
 80015f0:	f101 0e01 	add.w	lr, r1, #1
 80015f4:	f1be 0f09 	cmp.w	lr, #9
 80015f8:	f04f 0101 	mov.w	r1, #1
 80015fc:	ea4f 628e 	mov.w	r2, lr, lsl #26
 8001600:	d887      	bhi.n	8001512 <HAL_ADC_ConfigChannel+0x23a>
 8001602:	fa01 f10e 	lsl.w	r1, r1, lr
 8001606:	430a      	orrs	r2, r1
 8001608:	2f00      	cmp	r7, #0
 800160a:	f47f af7c 	bne.w	8001506 <HAL_ADC_ConfigChannel+0x22e>
 800160e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001612:	1c59      	adds	r1, r3, #1
 8001614:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001618:	0509      	lsls	r1, r1, #20
 800161a:	4311      	orrs	r1, r2
 800161c:	68a2      	ldr	r2, [r4, #8]
 800161e:	f7ff fd13 	bl	8001048 <LL_ADC_SetChannelSamplingTime>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001622:	6822      	ldr	r2, [r4, #0]
 8001624:	4b29      	ldr	r3, [pc, #164]	; (80016cc <HAL_ADC_ConfigChannel+0x3f4>)
 8001626:	429a      	cmp	r2, r3
 8001628:	d188      	bne.n	800153c <HAL_ADC_ConfigChannel+0x264>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800162a:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <HAL_ADC_ConfigChannel+0x3e0>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001632:	f47f aec1 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001636:	682b      	ldr	r3, [r5, #0]
 8001638:	6898      	ldr	r0, [r3, #8]
 800163a:	f000 0003 	and.w	r0, r0, #3
 800163e:	2801      	cmp	r0, #1
 8001640:	d102      	bne.n	8001648 <HAL_ADC_ConfigChannel+0x370>
 8001642:	6819      	ldr	r1, [r3, #0]
 8001644:	07c9      	lsls	r1, r1, #31
 8001646:	d422      	bmi.n	800168e <HAL_ADC_ConfigChannel+0x3b6>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001648:	4920      	ldr	r1, [pc, #128]	; (80016cc <HAL_ADC_ConfigChannel+0x3f4>)
 800164a:	428a      	cmp	r2, r1
 800164c:	d187      	bne.n	800155e <HAL_ADC_ConfigChannel+0x286>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 800164e:	4a1c      	ldr	r2, [pc, #112]	; (80016c0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	f47f aeb1 	bne.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
 8001656:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800165a:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800165e:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001662:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001666:	430b      	orrs	r3, r1
 8001668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800166c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <HAL_ADC_ConfigChannel+0x3f8>)
 8001672:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_ADC_ConfigChannel+0x3fc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	fbb3 f2f2 	udiv	r2, r3, r2
 800167a:	2378      	movs	r3, #120	; 0x78
 800167c:	4353      	muls	r3, r2
                wait_loop_index--;
 800167e:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0)
 8001680:	9b01      	ldr	r3, [sp, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f43f ae98 	beq.w	80013b8 <HAL_ADC_ConfigChannel+0xe0>
                wait_loop_index--;
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	e7f7      	b.n	800167e <HAL_ADC_ConfigChannel+0x3a6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001696:	e690      	b.n	80013ba <HAL_ADC_ConfigChannel+0xe2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001698:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800169c:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80016a0:	e6bd      	b.n	800141e <HAL_ADC_ConfigChannel+0x146>
 80016a2:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016a4:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	f102 0608 	add.w	r6, r2, #8
 80016aa:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80016ae:	e6c7      	b.n	8001440 <HAL_ADC_ConfigChannel+0x168>
 80016b0:	03fff000 	.word	0x03fff000
 80016b4:	cb840000 	.word	0xcb840000
 80016b8:	50040300 	.word	0x50040300
 80016bc:	80000001 	.word	0x80000001
 80016c0:	50040000 	.word	0x50040000
 80016c4:	0007ffff 	.word	0x0007ffff
 80016c8:	407f0000 	.word	0x407f0000
 80016cc:	c7520000 	.word	0xc7520000
 80016d0:	20000ed4 	.word	0x20000ed4
 80016d4:	001e8480 	.word	0x001e8480
 80016d8:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016dc:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80016e4:	e6bd      	b.n	8001462 <HAL_ADC_ConfigChannel+0x18a>
 80016e6:	bf00      	nop

080016e8 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016e8:	6803      	ldr	r3, [r0, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	f012 0f0c 	tst.w	r2, #12
{
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016f4:	d101      	bne.n	80016fa <ADC_ConversionStop+0x12>
    }
    
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016f6:	2000      	movs	r0, #0
 80016f8:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	0190      	lsls	r0, r2, #6
 80016fe:	d52a      	bpl.n	8001756 <ADC_ConversionStop+0x6e>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 8001700:	69e2      	ldr	r2, [r4, #28]
 8001702:	2a01      	cmp	r2, #1
 8001704:	d127      	bne.n	8001756 <ADC_ConversionStop+0x6e>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 8001706:	69a2      	ldr	r2, [r4, #24]
 8001708:	2a01      	cmp	r2, #1
 800170a:	d124      	bne.n	8001756 <ADC_ConversionStop+0x6e>
 800170c:	4a22      	ldr	r2, [pc, #136]	; (8001798 <ADC_ConversionStop+0xb0>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800170e:	6819      	ldr	r1, [r3, #0]
 8001710:	0649      	lsls	r1, r1, #25
 8001712:	d514      	bpl.n	800173e <ADC_ConversionStop+0x56>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001714:	2240      	movs	r2, #64	; 0x40
 8001716:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8001718:	2101      	movs	r1, #1
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	0756      	lsls	r6, r2, #29
 800171e:	d50a      	bpl.n	8001736 <ADC_ConversionStop+0x4e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001720:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001722:	0795      	lsls	r5, r2, #30
 8001724:	d407      	bmi.n	8001736 <ADC_ConversionStop+0x4e>
  MODIFY_REG(ADCx->CR,
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800172c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001730:	f042 0210 	orr.w	r2, r2, #16
 8001734:	609a      	str	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001736:	2901      	cmp	r1, #1
 8001738:	d10f      	bne.n	800175a <ADC_ConversionStop+0x72>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800173a:	2504      	movs	r5, #4
        break;
 800173c:	e01e      	b.n	800177c <ADC_ConversionStop+0x94>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 800173e:	3a01      	subs	r2, #1
 8001740:	d1e5      	bne.n	800170e <ADC_ConversionStop+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001742:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001744:	f043 0310 	orr.w	r3, r3, #16
 8001748:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001752:	2001      	movs	r0, #1
 8001754:	bd70      	pop	{r4, r5, r6, pc}
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001756:	2902      	cmp	r1, #2
 8001758:	d1df      	bne.n	800171a <ADC_ConversionStop+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	0710      	lsls	r0, r2, #28
 800175e:	d506      	bpl.n	800176e <ADC_ConversionStop+0x86>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001760:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001762:	0792      	lsls	r2, r2, #30
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 8001764:	bf5e      	ittt	pl
 8001766:	689a      	ldrpl	r2, [r3, #8]
 8001768:	f042 0220 	orrpl.w	r2, r2, #32
 800176c:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 800176e:	2902      	cmp	r1, #2
 8001770:	d003      	beq.n	800177a <ADC_ConversionStop+0x92>
 8001772:	2903      	cmp	r1, #3
 8001774:	d1e1      	bne.n	800173a <ADC_ConversionStop+0x52>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001776:	250c      	movs	r5, #12
 8001778:	e000      	b.n	800177c <ADC_ConversionStop+0x94>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800177a:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 800177c:	f7ff fc50 	bl	8001020 <HAL_GetTick>
 8001780:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	421d      	tst	r5, r3
 8001788:	d0b5      	beq.n	80016f6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800178a:	f7ff fc49 	bl	8001020 <HAL_GetTick>
 800178e:	1b80      	subs	r0, r0, r6
 8001790:	2805      	cmp	r0, #5
 8001792:	d9f6      	bls.n	8001782 <ADC_ConversionStop+0x9a>
 8001794:	e7d5      	b.n	8001742 <ADC_ConversionStop+0x5a>
 8001796:	bf00      	nop
 8001798:	0a340001 	.word	0x0a340001

0800179c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800179c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 800179e:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a0:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 80017a2:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017a4:	6893      	ldr	r3, [r2, #8]
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	2b01      	cmp	r3, #1
{
 80017ac:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017ae:	d108      	bne.n	80017c2 <ADC_Enable+0x26>
 80017b0:	6813      	ldr	r3, [r2, #0]
 80017b2:	07d8      	lsls	r0, r3, #31
 80017b4:	d505      	bpl.n	80017c2 <ADC_Enable+0x26>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017b6:	2000      	movs	r0, #0
}
 80017b8:	b002      	add	sp, #8
 80017ba:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 80017bc:	9b01      	ldr	r3, [sp, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	e012      	b.n	80017e8 <ADC_Enable+0x4c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017c2:	6891      	ldr	r1, [r2, #8]
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <ADC_Enable+0x94>)
 80017c6:	4219      	tst	r1, r3
 80017c8:	d127      	bne.n	800181a <ADC_Enable+0x7e>
  MODIFY_REG(ADCx->CR,
 80017ca:	6893      	ldr	r3, [r2, #8]
 80017cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6093      	str	r3, [r2, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80017da:	4b16      	ldr	r3, [pc, #88]	; (8001834 <ADC_Enable+0x98>)
 80017dc:	4a16      	ldr	r2, [pc, #88]	; (8001838 <ADC_Enable+0x9c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	fbb3 f2f2 	udiv	r2, r3, r2
 80017e4:	230a      	movs	r3, #10
 80017e6:	4353      	muls	r3, r2
      wait_loop_index--;
 80017e8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80017ea:	9b01      	ldr	r3, [sp, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1e5      	bne.n	80017bc <ADC_Enable+0x20>
    tickstart = HAL_GetTick();
 80017f0:	f7ff fc16 	bl	8001020 <HAL_GetTick>
 80017f4:	4e11      	ldr	r6, [pc, #68]	; (800183c <ADC_Enable+0xa0>)
 80017f6:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017f8:	6822      	ldr	r2, [r4, #0]
 80017fa:	6813      	ldr	r3, [r2, #0]
 80017fc:	07db      	lsls	r3, r3, #31
 80017fe:	d4da      	bmi.n	80017b6 <ADC_Enable+0x1a>
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8001800:	6893      	ldr	r3, [r2, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 8001802:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 8001804:	bf5f      	itttt	pl
 8001806:	6893      	ldrpl	r3, [r2, #8]
 8001808:	4033      	andpl	r3, r6
 800180a:	f043 0301 	orrpl.w	r3, r3, #1
 800180e:	6093      	strpl	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001810:	f7ff fc06 	bl	8001020 <HAL_GetTick>
 8001814:	1b40      	subs	r0, r0, r5
 8001816:	2802      	cmp	r0, #2
 8001818:	d9ee      	bls.n	80017f8 <ADC_Enable+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800181a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800181c:	f043 0310 	orr.w	r3, r3, #16
 8001820:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001822:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 800182a:	2001      	movs	r0, #1
 800182c:	e7c4      	b.n	80017b8 <ADC_Enable+0x1c>
 800182e:	bf00      	nop
 8001830:	8000003f 	.word	0x8000003f
 8001834:	20000ed4 	.word	0x20000ed4
 8001838:	001e8480 	.word	0x001e8480
 800183c:	7fffffc0 	.word	0x7fffffc0

08001840 <HAL_ADC_Start>:
{
 8001840:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001842:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001844:	689d      	ldr	r5, [r3, #8]
 8001846:	f015 0504 	ands.w	r5, r5, #4
{
 800184a:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800184c:	d13a      	bne.n	80018c4 <HAL_ADC_Start+0x84>
    __HAL_LOCK(hadc);
 800184e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001852:	2b01      	cmp	r3, #1
 8001854:	d036      	beq.n	80018c4 <HAL_ADC_Start+0x84>
 8001856:	2301      	movs	r3, #1
 8001858:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 800185c:	f7ff ff9e 	bl	800179c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001860:	2800      	cmp	r0, #0
 8001862:	d12c      	bne.n	80018be <HAL_ADC_Start+0x7e>
      ADC_STATE_CLR_SET(hadc->State,
 8001864:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001866:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001872:	65e3      	str	r3, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001874:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001876:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800187a:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800187c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800187e:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001880:	bf48      	it	mi
 8001882:	6e23      	ldrmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001884:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 8001886:	bf52      	itee	pl
 8001888:	6620      	strpl	r0, [r4, #96]	; 0x60
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800188a:	f023 0306 	bicmi.w	r3, r3, #6
 800188e:	6623      	strmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001890:	231c      	movs	r3, #28
 8001892:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001894:	2300      	movs	r3, #0
 8001896:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800189a:	68d3      	ldr	r3, [r2, #12]
 800189c:	019b      	lsls	r3, r3, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800189e:	bf41      	itttt	mi
 80018a0:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
 80018a2:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 80018a6:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 80018aa:	65e3      	strmi	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 80018ac:	6893      	ldr	r3, [r2, #8]
 80018ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	6093      	str	r3, [r2, #8]
 80018bc:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80018be:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80018c2:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80018c4:	2002      	movs	r0, #2
}
 80018c6:	bd38      	pop	{r3, r4, r5, pc}

080018c8 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018c8:	6802      	ldr	r2, [r0, #0]
{
 80018ca:	b538      	push	{r3, r4, r5, lr}
 80018cc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018ce:	6890      	ldr	r0, [r2, #8]
 80018d0:	f000 0003 	and.w	r0, r0, #3
 80018d4:	2801      	cmp	r0, #1
 80018d6:	d001      	beq.n	80018dc <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018d8:	2000      	movs	r0, #0
 80018da:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	07d9      	lsls	r1, r3, #31
 80018e0:	d5fa      	bpl.n	80018d8 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018e2:	6893      	ldr	r3, [r2, #8]
 80018e4:	f003 030d 	and.w	r3, r3, #13
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d11f      	bne.n	800192c <ADC_Disable+0x64>
  MODIFY_REG(ADCx->CR,
 80018ec:	6893      	ldr	r3, [r2, #8]
 80018ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80018fc:	2303      	movs	r3, #3
 80018fe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001900:	f7ff fb8e 	bl	8001020 <HAL_GetTick>
 8001904:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001906:	6823      	ldr	r3, [r4, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	07db      	lsls	r3, r3, #31
 800190c:	d5e4      	bpl.n	80018d8 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800190e:	f7ff fb87 	bl	8001020 <HAL_GetTick>
 8001912:	1b40      	subs	r0, r0, r5
 8001914:	2802      	cmp	r0, #2
 8001916:	d9f6      	bls.n	8001906 <ADC_Disable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001918:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800191a:	f043 0310 	orr.w	r3, r3, #16
 800191e:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001920:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001928:	2001      	movs	r0, #1
 800192a:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800192e:	f043 0310 	orr.w	r3, r3, #16
 8001932:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001934:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001936:	f043 0301 	orr.w	r3, r3, #1
 800193a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 800193c:	bd38      	pop	{r3, r4, r5, pc}

0800193e <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800193e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001942:	2b01      	cmp	r3, #1
{
 8001944:	b510      	push	{r4, lr}
 8001946:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001948:	d016      	beq.n	8001978 <HAL_ADC_Stop+0x3a>
 800194a:	2301      	movs	r3, #1
 800194c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001950:	2103      	movs	r1, #3
 8001952:	f7ff fec9 	bl	80016e8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001956:	b958      	cbnz	r0, 8001970 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff ffb5 	bl	80018c8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800195e:	b938      	cbnz	r0, 8001970 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8001960:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001962:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	65e3      	str	r3, [r4, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8001970:	2300      	movs	r3, #0
 8001972:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return tmp_hal_status;
 8001976:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001978:	2002      	movs	r0, #2
}
 800197a:	bd10      	pop	{r4, pc}

0800197c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800197c:	4a07      	ldr	r2, [pc, #28]	; (800199c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800197e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001980:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001984:	041b      	lsls	r3, r3, #16
 8001986:	0c1b      	lsrs	r3, r3, #16
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800198c:	0200      	lsls	r0, r0, #8
 800198e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001992:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001996:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001998:	60d3      	str	r3, [r2, #12]
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a2:	b530      	push	{r4, r5, lr}
 80019a4:	68dc      	ldr	r4, [r3, #12]
 80019a6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019aa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	bf28      	it	cs
 80019b4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	f04f 0501 	mov.w	r5, #1
 80019bc:	fa05 f303 	lsl.w	r3, r5, r3
 80019c0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c4:	bf8c      	ite	hi
 80019c6:	3c03      	subhi	r4, #3
 80019c8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ca:	4019      	ands	r1, r3
 80019cc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ce:	fa05 f404 	lsl.w	r4, r5, r4
 80019d2:	3c01      	subs	r4, #1
 80019d4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80019d6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	ea42 0201 	orr.w	r2, r2, r1
 80019dc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	bfaf      	iteee	ge
 80019e2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	f000 000f 	andlt.w	r0, r0, #15
 80019ea:	4b06      	ldrlt	r3, [pc, #24]	; (8001a04 <HAL_NVIC_SetPriority+0x64>)
 80019ec:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ee:	bfa5      	ittet	ge
 80019f0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80019f4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80019fc:	bd30      	pop	{r4, r5, pc}
 80019fe:	bf00      	nop
 8001a00:	e000ed00 	.word	0xe000ed00
 8001a04:	e000ed14 	.word	0xe000ed14

08001a08 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a08:	0942      	lsrs	r2, r0, #5
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	f000 001f 	and.w	r0, r0, #31
 8001a10:	fa03 f000 	lsl.w	r0, r3, r0
 8001a14:	4b01      	ldr	r3, [pc, #4]	; (8001a1c <HAL_NVIC_EnableIRQ+0x14>)
 8001a16:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a20:	0943      	lsrs	r3, r0, #5
 8001a22:	2201      	movs	r2, #1
 8001a24:	f000 001f 	and.w	r0, r0, #31
 8001a28:	fa02 f000 	lsl.w	r0, r2, r0
 8001a2c:	3320      	adds	r3, #32
 8001a2e:	4a02      	ldr	r2, [pc, #8]	; (8001a38 <HAL_NVIC_DisableIRQ+0x18>)
 8001a30:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000e100 	.word	0xe000e100

08001a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	3801      	subs	r0, #1
 8001a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a42:	d20a      	bcs.n	8001a5a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a46:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a48:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	21f0      	movs	r1, #240	; 0xf0
 8001a4c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a52:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a5a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000e010 	.word	0xe000e010
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a68:	0943      	lsrs	r3, r0, #5
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f000 001f 	and.w	r0, r0, #31
 8001a70:	fa02 f000 	lsl.w	r0, r2, r0
 8001a74:	3360      	adds	r3, #96	; 0x60
 8001a76:	4a02      	ldr	r2, [pc, #8]	; (8001a80 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8001a78:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a86:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a88:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a8a:	bf0c      	ite	eq
 8001a8c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a90:	f022 0204 	bicne.w	r2, r2, #4
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	4770      	bx	lr
 8001a98:	e000e010 	.word	0xe000e010

08001a9c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a9c:	4770      	bx	lr

08001a9e <HAL_SYSTICK_IRQHandler>:
{
 8001a9e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001aa0:	f7ff fffc 	bl	8001a9c <HAL_SYSTICK_Callback>
 8001aa4:	bd08      	pop	{r3, pc}

08001aa6 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001aa6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001aaa:	2b02      	cmp	r3, #2
{
 8001aac:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001aae:	d003      	beq.n	8001ab8 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ab8:	6803      	ldr	r3, [r0, #0]
#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001aba:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	f022 020e 	bic.w	r2, r2, #14
 8001ac2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	f022 0201 	bic.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001acc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001ace:	6813      	ldr	r3, [r2, #0]
 8001ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ad4:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ad6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001ad8:	f003 021c 	and.w	r2, r3, #28
 8001adc:	2301      	movs	r3, #1
 8001ade:	4093      	lsls	r3, r2
 8001ae0:	604b      	str	r3, [r1, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ae2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001ae4:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001ae6:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001ae8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001aea:	b133      	cbz	r3, 8001afa <HAL_DMA_Abort_IT+0x54>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001af2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001af4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001af6:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001af8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b00:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001b02:	2400      	movs	r4, #0
 8001b04:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001b08:	b113      	cbz	r3, 8001b10 <HAL_DMA_Abort_IT+0x6a>
    {
      hdma->XferAbortCallback(hdma);
 8001b0a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	bd10      	pop	{r4, pc}
 8001b10:	4618      	mov	r0, r3
    }
  }
  return status;
}
 8001b12:	bd10      	pop	{r4, pc}

08001b14 <HAL_DMA_IRQHandler>:
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b14:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001b16:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001b18:	6803      	ldr	r3, [r0, #0]
{
 8001b1a:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001b1c:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b20:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001b22:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001b24:	2404      	movs	r4, #4
 8001b26:	4094      	lsls	r4, r2
 8001b28:	4226      	tst	r6, r4
 8001b2a:	d00e      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x36>
 8001b2c:	f015 0f04 	tst.w	r5, #4
 8001b30:	d00b      	beq.n	8001b4a <HAL_DMA_IRQHandler+0x36>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	0692      	lsls	r2, r2, #26
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b36:	bf5e      	ittt	pl
 8001b38:	681a      	ldrpl	r2, [r3, #0]
 8001b3a:	f022 0204 	bicpl.w	r2, r2, #4
 8001b3e:	601a      	strpl	r2, [r3, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8001b40:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001b42:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8001b44:	b373      	cbz	r3, 8001ba4 <HAL_DMA_IRQHandler+0x90>
  else
  {
    /* Nothing To Do */
  }
  return;
}
 8001b46:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001b48:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001b4a:	2402      	movs	r4, #2
 8001b4c:	4094      	lsls	r4, r2
 8001b4e:	4226      	tst	r6, r4
 8001b50:	d012      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x64>
 8001b52:	f015 0f02 	tst.w	r5, #2
 8001b56:	d00f      	beq.n	8001b78 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	0695      	lsls	r5, r2, #26
 8001b5c:	d406      	bmi.n	8001b6c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	f022 020a 	bic.w	r2, r2, #10
 8001b64:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001b66:	2301      	movs	r3, #1
 8001b68:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001b6c:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b6e:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001b70:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001b74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001b76:	e7e5      	b.n	8001b44 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001b78:	2408      	movs	r4, #8
 8001b7a:	4094      	lsls	r4, r2
 8001b7c:	4234      	tst	r4, r6
 8001b7e:	d011      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x90>
 8001b80:	072c      	lsls	r4, r5, #28
 8001b82:	d50f      	bpl.n	8001ba4 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b84:	681c      	ldr	r4, [r3, #0]
 8001b86:	f024 040e 	bic.w	r4, r4, #14
 8001b8a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	fa03 f202 	lsl.w	r2, r3, r2
 8001b92:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b94:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001b96:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001ba0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ba2:	e7cf      	b.n	8001b44 <HAL_DMA_IRQHandler+0x30>
}
 8001ba4:	bc70      	pop	{r4, r5, r6}
 8001ba6:	4770      	bx	lr

08001ba8 <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8001ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8001baa:	6805      	ldr	r5, [r0, #0]
 8001bac:	4e0a      	ldr	r6, [pc, #40]	; (8001bd8 <DMA2D_SetConfig+0x30>)
 8001bae:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001bb0:	fa96 f6a6 	rbit	r6, r6
 8001bb4:	9f05      	ldr	r7, [sp, #20]
 8001bb6:	fab6 f686 	clz	r6, r6
 8001bba:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8001bbe:	433c      	orrs	r4, r7
 8001bc0:	40b3      	lsls	r3, r6
 8001bc2:	4323      	orrs	r3, r4
 8001bc4:	646b      	str	r3, [r5, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001bc6:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001bc8:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001bca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, pdata);    
 8001bce:	bf0c      	ite	eq
 8001bd0:	63a9      	streq	r1, [r5, #56]	; 0x38
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
  WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001bd2:	60e9      	strne	r1, [r5, #12]
 8001bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	3fff0000 	.word	0x3fff0000

08001bdc <HAL_DMA2D_Init>:
{ 
 8001bdc:	b538      	push	{r3, r4, r5, lr}
  if(hdma2d == NULL)
 8001bde:	4604      	mov	r4, r0
 8001be0:	2800      	cmp	r0, #0
 8001be2:	d043      	beq.n	8001c6c <HAL_DMA2D_Init+0x90>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001be4:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001be8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bec:	b91b      	cbnz	r3, 8001bf6 <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
 8001bee:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
    HAL_DMA2D_MspInit(hdma2d);
 8001bf2:	f01d ff75 	bl	801fae0 <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001bfc:	6823      	ldr	r3, [r4, #0]
 8001bfe:	69e0      	ldr	r0, [r4, #28]
 8001c00:	6819      	ldr	r1, [r3, #0]
 8001c02:	6862      	ldr	r2, [r4, #4]
 8001c04:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8001c08:	4302      	orrs	r2, r0
 8001c0a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8001c12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c14:	68a2      	ldr	r2, [r4, #8]
 8001c16:	69a0      	ldr	r0, [r4, #24]
 8001c18:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8001c1c:	4302      	orrs	r2, r0
 8001c1e:	f021 0101 	bic.w	r1, r1, #1
 8001c22:	430a      	orrs	r2, r1
 8001c24:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c28:	68e1      	ldr	r1, [r4, #12]
 8001c2a:	0c12      	lsrs	r2, r2, #16
 8001c2c:	0412      	lsls	r2, r2, #16
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), \
 8001c32:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001c34:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001c38:	fa92 f2a2 	rbit	r2, r2
 8001c3c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001c40:	fab2 f082 	clz	r0, r2
 8001c44:	fa91 f1a1 	rbit	r1, r1
 8001c48:	6922      	ldr	r2, [r4, #16]
 8001c4a:	4082      	lsls	r2, r0
 8001c4c:	6960      	ldr	r0, [r4, #20]
 8001c4e:	fab1 f181 	clz	r1, r1
 8001c52:	fa00 f101 	lsl.w	r1, r0, r1
 8001c56:	430a      	orrs	r2, r1
 8001c58:	f425 1140 	bic.w	r1, r5, #3145728	; 0x300000
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c60:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c62:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c64:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c66:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  return HAL_OK;
 8001c6a:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001c6c:	2001      	movs	r0, #1
}
 8001c6e:	bd38      	pop	{r3, r4, r5, pc}

08001c70 <HAL_DMA2D_Start>:
{
 8001c70:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001c72:	f890 4058 	ldrb.w	r4, [r0, #88]	; 0x58
 8001c76:	2c01      	cmp	r4, #1
 8001c78:	f04f 0402 	mov.w	r4, #2
 8001c7c:	d00f      	beq.n	8001c9e <HAL_DMA2D_Start+0x2e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c7e:	f880 4059 	strb.w	r4, [r0, #89]	; 0x59
  __HAL_LOCK(hdma2d);
 8001c82:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001c84:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8001c86:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001c8a:	9400      	str	r4, [sp, #0]
 8001c8c:	f7ff ff8c 	bl	8001ba8 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001c90:	6802      	ldr	r2, [r0, #0]
 8001c92:	6813      	ldr	r3, [r2, #0]
 8001c94:	4333      	orrs	r3, r6
 8001c96:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001c98:	2000      	movs	r0, #0
}
 8001c9a:	b002      	add	sp, #8
 8001c9c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	e7fb      	b.n	8001c9a <HAL_DMA2D_Start+0x2a>

08001ca2 <HAL_DMA2D_PollForTransfer>:
{
 8001ca2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001ca8:	6803      	ldr	r3, [r0, #0]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	07db      	lsls	r3, r3, #31
{
 8001cae:	4604      	mov	r4, r0
 8001cb0:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001cb2:	d427      	bmi.n	8001d04 <HAL_DMA2D_PollForTransfer+0x62>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001cb4:	6823      	ldr	r3, [r4, #0]
 8001cb6:	69da      	ldr	r2, [r3, #28]
 8001cb8:	0696      	lsls	r6, r2, #26
 8001cba:	d55c      	bpl.n	8001d76 <HAL_DMA2D_PollForTransfer+0xd4>
    tickstart = HAL_GetTick();
 8001cbc:	f7ff f9b0 	bl	8001020 <HAL_GetTick>
 8001cc0:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	06d2      	lsls	r2, r2, #27
 8001cc8:	d458      	bmi.n	8001d7c <HAL_DMA2D_PollForTransfer+0xda>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001cce:	9a01      	ldr	r2, [sp, #4]
 8001cd0:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001cd4:	d05d      	beq.n	8001d92 <HAL_DMA2D_PollForTransfer+0xf0>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001cd6:	9a01      	ldr	r2, [sp, #4]
 8001cd8:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8001cda:	bf42      	ittt	mi
 8001cdc:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001cde:	f042 0204 	orrmi.w	r2, r2, #4
 8001ce2:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8001ce4:	9a01      	ldr	r2, [sp, #4]
 8001ce6:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001ce8:	bf42      	ittt	mi
 8001cea:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001cec:	f042 0202 	orrmi.w	r2, r2, #2
 8001cf0:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001cf2:	9a01      	ldr	r2, [sp, #4]
 8001cf4:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001cf6:	bf42      	ittt	mi
 8001cf8:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001cfa:	f042 0201 	orrmi.w	r2, r2, #1
 8001cfe:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d00:	2229      	movs	r2, #41	; 0x29
 8001d02:	e01b      	b.n	8001d3c <HAL_DMA2D_PollForTransfer+0x9a>
   tickstart = HAL_GetTick();
 8001d04:	f7ff f98c 	bl	8001020 <HAL_GetTick>
 8001d08:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001d0a:	6823      	ldr	r3, [r4, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	0792      	lsls	r2, r2, #30
 8001d10:	d4d0      	bmi.n	8001cb4 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001d12:	685a      	ldr	r2, [r3, #4]
 8001d14:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001d16:	9a01      	ldr	r2, [sp, #4]
 8001d18:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001d1c:	d017      	beq.n	8001d4e <HAL_DMA2D_PollForTransfer+0xac>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001d1e:	9a01      	ldr	r2, [sp, #4]
 8001d20:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001d22:	bf42      	ittt	mi
 8001d24:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001d26:	f042 0202 	orrmi.w	r2, r2, #2
 8001d2a:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001d2c:	9a01      	ldr	r2, [sp, #4]
 8001d2e:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001d30:	bf42      	ittt	mi
 8001d32:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001d34:	f042 0201 	orrmi.w	r2, r2, #1
 8001d38:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d3a:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001d3c:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
        __HAL_UNLOCK(hdma2d);
 8001d44:	2300      	movs	r3, #0
 8001d46:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_ERROR;      
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	e01f      	b.n	8001d8e <HAL_DMA2D_PollForTransfer+0xec>
      if(Timeout != HAL_MAX_DELAY)
 8001d4e:	1c69      	adds	r1, r5, #1
 8001d50:	d0dc      	beq.n	8001d0c <HAL_DMA2D_PollForTransfer+0x6a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d52:	b955      	cbnz	r5, 8001d6a <HAL_DMA2D_PollForTransfer+0xc8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001d54:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001d56:	f043 0320 	orr.w	r3, r3, #32
 8001d5a:	65e3      	str	r3, [r4, #92]	; 0x5c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001d5c:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8001d5e:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001d60:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
          __HAL_UNLOCK(hdma2d);
 8001d64:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
          return HAL_TIMEOUT;
 8001d68:	e011      	b.n	8001d8e <HAL_DMA2D_PollForTransfer+0xec>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d6a:	f7ff f959 	bl	8001020 <HAL_GetTick>
 8001d6e:	1b80      	subs	r0, r0, r6
 8001d70:	4285      	cmp	r5, r0
 8001d72:	d2ca      	bcs.n	8001d0a <HAL_DMA2D_PollForTransfer+0x68>
 8001d74:	e7ee      	b.n	8001d54 <HAL_DMA2D_PollForTransfer+0xb2>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8001d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001d78:	069b      	lsls	r3, r3, #26
 8001d7a:	d49f      	bmi.n	8001cbc <HAL_DMA2D_PollForTransfer+0x1a>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	2212      	movs	r2, #18
 8001d80:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8001d82:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d84:	2301      	movs	r3, #1
 8001d86:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);
 8001d8a:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
}
 8001d8e:	b002      	add	sp, #8
 8001d90:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8001d92:	1c69      	adds	r1, r5, #1
 8001d94:	d096      	beq.n	8001cc4 <HAL_DMA2D_PollForTransfer+0x22>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001d96:	2d00      	cmp	r5, #0
 8001d98:	d0dc      	beq.n	8001d54 <HAL_DMA2D_PollForTransfer+0xb2>
 8001d9a:	f7ff f941 	bl	8001020 <HAL_GetTick>
 8001d9e:	1b80      	subs	r0, r0, r6
 8001da0:	4285      	cmp	r5, r0
 8001da2:	d28e      	bcs.n	8001cc2 <HAL_DMA2D_PollForTransfer+0x20>
 8001da4:	e7d6      	b.n	8001d54 <HAL_DMA2D_PollForTransfer+0xb2>
	...

08001da8 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 8001da8:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001dac:	2b01      	cmp	r3, #1
{   
 8001dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 8001db4:	d041      	beq.n	8001e3a <HAL_DMA2D_ConfigLayer+0x92>
 8001db6:	2201      	movs	r2, #1
 8001db8:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  hdma2d->State = HAL_DMA2D_STATE_BUSY;   
 8001dbc:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 8001dc0:	6802      	ldr	r2, [r0, #0]
  if(LayerIdx == 0)
 8001dc2:	2900      	cmp	r1, #0
 8001dc4:	d14d      	bne.n	8001e62 <HAL_DMA2D_ConfigLayer+0xba>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dc6:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8001dc8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001dca:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8001dcc:	f1a6 0509 	sub.w	r5, r6, #9
 8001dd0:	2d01      	cmp	r5, #1
 8001dd2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001dd6:	d832      	bhi.n	8001e3e <HAL_DMA2D_ConfigLayer+0x96>
 8001dd8:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA));
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	f004 417f 	and.w	r1, r4, #4278190080	; 0xff000000
 8001de4:	4331      	orrs	r1, r6
 8001de6:	fa07 f303 	lsl.w	r3, r7, r3
 8001dea:	4319      	orrs	r1, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS), \
 8001dec:	f8d2 e024 	ldr.w	lr, [r2, #36]	; 0x24
 8001df0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001df4:	fa93 f3a3 	rbit	r3, r3
 8001df8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001dfc:	fab3 f783 	clz	r7, r3
 8001e00:	fa96 f6a6 	rbit	r6, r6
 8001e04:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001e06:	40bb      	lsls	r3, r7
 8001e08:	4f3c      	ldr	r7, [pc, #240]	; (8001efc <HAL_DMA2D_ConfigLayer+0x154>)
 8001e0a:	ea0e 0707 	and.w	r7, lr, r7
 8001e0e:	4339      	orrs	r1, r7
 8001e10:	430b      	orrs	r3, r1
 8001e12:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001e14:	fab6 f686 	clz	r6, r6
 8001e18:	fa01 f606 	lsl.w	r6, r1, r6
 8001e1c:	4333      	orrs	r3, r6
 8001e1e:	6253      	str	r3, [r2, #36]	; 0x24
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e20:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->BGOR, LayerCfg->InputOffset);
 8001e22:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e24:	6193      	str	r3, [r2, #24]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e26:	d802      	bhi.n	8001e2e <HAL_DMA2D_ConfigLayer+0x86>
      WRITE_REG(hdma2d->Instance->BGCOLR, LayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001e28:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8001e2c:	6294      	str	r4, [r2, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);  
 8001e34:	2300      	movs	r3, #0
 8001e36:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  __HAL_LOCK(hdma2d);
 8001e3a:	4618      	mov	r0, r3
}
 8001e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA));
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	fa91 f1a1 	rbit	r1, r1
 8001e4e:	fab1 f181 	clz	r1, r1
 8001e52:	fa04 f101 	lsl.w	r1, r4, r1
 8001e56:	fa07 f303 	lsl.w	r3, r7, r3
 8001e5a:	430b      	orrs	r3, r1
 8001e5c:	ea43 0106 	orr.w	r1, r3, r6
 8001e60:	e7c4      	b.n	8001dec <HAL_DMA2D_ConfigLayer+0x44>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e62:	2418      	movs	r4, #24
 8001e64:	fb04 0401 	mla	r4, r4, r1, r0
 8001e68:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001e6c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001e6e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001e70:	6b24      	ldr	r4, [r4, #48]	; 0x30
 8001e72:	f1a7 0509 	sub.w	r5, r7, #9
 8001e76:	2d01      	cmp	r5, #1
 8001e78:	d82f      	bhi.n	8001eda <HAL_DMA2D_ConfigLayer+0x132>
 8001e7a:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_FGPFCCR_ALPHA));
 8001e7e:	fab3 f383 	clz	r3, r3
 8001e82:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 8001e86:	4337      	orrs	r7, r6
 8001e88:	fa04 f303 	lsl.w	r3, r4, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8001e8c:	433b      	orrs	r3, r7
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_AI | DMA2D_FGPFCCR_RBS), \
 8001e8e:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8001e92:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8001e96:	fa94 f4a4 	rbit	r4, r4
 8001e9a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8001e9e:	fab4 f784 	clz	r7, r4
 8001ea2:	fa96 f6a6 	rbit	r6, r6
 8001ea6:	2418      	movs	r4, #24
 8001ea8:	fb04 0101 	mla	r1, r4, r1, r0
 8001eac:	fab6 f686 	clz	r6, r6
 8001eb0:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8001eb2:	40bc      	lsls	r4, r7
 8001eb4:	4f11      	ldr	r7, [pc, #68]	; (8001efc <HAL_DMA2D_ConfigLayer+0x154>)
 8001eb6:	ea0e 0707 	and.w	r7, lr, r7
 8001eba:	433b      	orrs	r3, r7
 8001ebc:	4323      	orrs	r3, r4
 8001ebe:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8001ec0:	fa04 f606 	lsl.w	r6, r4, r6
 8001ec4:	4333      	orrs	r3, r6
 8001ec6:	61d3      	str	r3, [r2, #28]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ec8:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->FGOR, LayerCfg->InputOffset);      
 8001eca:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8001ecc:	6113      	str	r3, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, LayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8001ece:	bf9e      	ittt	ls
 8001ed0:	6b4b      	ldrls	r3, [r1, #52]	; 0x34
 8001ed2:	f023 437f 	bicls.w	r3, r3, #4278190080	; 0xff000000
 8001ed6:	6213      	strls	r3, [r2, #32]
 8001ed8:	e7a9      	b.n	8001e2e <HAL_DMA2D_ConfigLayer+0x86>
 8001eda:	fa93 f3a3 	rbit	r3, r3
 8001ede:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	fa9e feae 	rbit	lr, lr
 8001eea:	fabe fe8e 	clz	lr, lr
 8001eee:	fa04 f303 	lsl.w	r3, r4, r3
 8001ef2:	fa06 f60e 	lsl.w	r6, r6, lr
 8001ef6:	4333      	orrs	r3, r6
 8001ef8:	e7c8      	b.n	8001e8c <HAL_DMA2D_ConfigLayer+0xe4>
 8001efa:	bf00      	nop
 8001efc:	00ccfff0 	.word	0x00ccfff0

08001f00 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001f00:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <FLASH_Program_Fast+0x20>)
 8001f02:	6953      	ldr	r3, [r2, #20]
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0a:	b672      	cpsid	i
 8001f0c:	f501 7300 	add.w	r3, r1, #512	; 0x200
 8001f10:	1a40      	subs	r0, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8001f12:	680a      	ldr	r2, [r1, #0]
 8001f14:	500a      	str	r2, [r1, r0]
    dest_addr++;
    src_addr++;
 8001f16:	3104      	adds	r1, #4
    row_index--;
  } while (row_index != 0U);
 8001f18:	4299      	cmp	r1, r3
 8001f1a:	d1fa      	bne.n	8001f12 <FLASH_Program_Fast+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 8001f1c:	b662      	cpsie	i
 8001f1e:	4770      	bx	lr
 8001f20:	40022000 	.word	0x40022000

08001f24 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_FLASH_Unlock+0x1c>)
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001f2a:	bfbf      	itttt	lt
 8001f2c:	4a05      	ldrlt	r2, [pc, #20]	; (8001f44 <HAL_FLASH_Unlock+0x20>)
 8001f2e:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001f30:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 8001f34:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001f36:	bfba      	itte	lt
 8001f38:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 8001f3a:	0fc0      	lsrlt	r0, r0, #31
 8001f3c:	2000      	movge	r0, #0
}
 8001f3e:	4770      	bx	lr
 8001f40:	40022000 	.word	0x40022000
 8001f44:	45670123 	.word	0x45670123

08001f48 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001f48:	4a03      	ldr	r2, [pc, #12]	; (8001f58 <HAL_FLASH_Lock+0x10>)
 8001f4a:	6953      	ldr	r3, [r2, #20]
 8001f4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001f50:	6153      	str	r3, [r2, #20]
}
 8001f52:	2000      	movs	r0, #0
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40022000 	.word	0x40022000

08001f5c <FLASH_WaitForLastOperation>:
{
 8001f5c:	b570      	push	{r4, r5, r6, lr}
 8001f5e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff f85e 	bl	8001020 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001f64:	4c1a      	ldr	r4, [pc, #104]	; (8001fd0 <FLASH_WaitForLastOperation+0x74>)
  uint32_t tickstart = HAL_GetTick();
 8001f66:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001f68:	6923      	ldr	r3, [r4, #16]
 8001f6a:	03db      	lsls	r3, r3, #15
 8001f6c:	d41e      	bmi.n	8001fac <FLASH_WaitForLastOperation+0x50>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001f6e:	6923      	ldr	r3, [r4, #16]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8001f70:	69a0      	ldr	r0, [r4, #24]
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001f72:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001f76:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001f7a:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8001f7e:	f023 0305 	bic.w	r3, r3, #5
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8001f82:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  if(error != 0u)
 8001f86:	4318      	orrs	r0, r3
 8001f88:	d019      	beq.n	8001fbe <FLASH_WaitForLastOperation+0x62>
    pFlash.ErrorCode |= error;
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <FLASH_WaitForLastOperation+0x78>)
 8001f8c:	6853      	ldr	r3, [r2, #4]
 8001f8e:	4303      	orrs	r3, r0
 8001f90:	6053      	str	r3, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8001f92:	f010 4340 	ands.w	r3, r0, #3221225472	; 0xc0000000
 8001f96:	bf1e      	ittt	ne
 8001f98:	69a2      	ldrne	r2, [r4, #24]
 8001f9a:	4313      	orrne	r3, r2
 8001f9c:	61a3      	strne	r3, [r4, #24]
 8001f9e:	f030 4040 	bics.w	r0, r0, #3221225472	; 0xc0000000
 8001fa2:	d001      	beq.n	8001fa8 <FLASH_WaitForLastOperation+0x4c>
 8001fa4:	4b0a      	ldr	r3, [pc, #40]	; (8001fd0 <FLASH_WaitForLastOperation+0x74>)
 8001fa6:	6118      	str	r0, [r3, #16]
    return HAL_ERROR;
 8001fa8:	2001      	movs	r0, #1
 8001faa:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001fac:	1c6a      	adds	r2, r5, #1
 8001fae:	d0db      	beq.n	8001f68 <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8001fb0:	f7ff f836 	bl	8001020 <HAL_GetTick>
 8001fb4:	1b80      	subs	r0, r0, r6
 8001fb6:	4285      	cmp	r5, r0
 8001fb8:	d8d6      	bhi.n	8001f68 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 8001fba:	2003      	movs	r0, #3
 8001fbc:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001fbe:	6923      	ldr	r3, [r4, #16]
 8001fc0:	f013 0301 	ands.w	r3, r3, #1
 8001fc4:	d002      	beq.n	8001fcc <FLASH_WaitForLastOperation+0x70>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	6123      	str	r3, [r4, #16]
 8001fca:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001fcc:	4618      	mov	r0, r3
}
 8001fce:	bd70      	pop	{r4, r5, r6, pc}
 8001fd0:	40022000 	.word	0x40022000
 8001fd4:	20000000 	.word	0x20000000

08001fd8 <HAL_FLASH_Program>:
{
 8001fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8001fdc:	4c24      	ldr	r4, [pc, #144]	; (8002070 <HAL_FLASH_Program+0x98>)
{
 8001fde:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 8001fe0:	7823      	ldrb	r3, [r4, #0]
 8001fe2:	2b01      	cmp	r3, #1
{
 8001fe4:	4607      	mov	r7, r0
 8001fe6:	4688      	mov	r8, r1
 8001fe8:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 8001fea:	d03f      	beq.n	800206c <HAL_FLASH_Program+0x94>
 8001fec:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fee:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8001ff2:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001ff4:	f7ff ffb2 	bl	8001f5c <FLASH_WaitForLastOperation>
 8001ff8:	4606      	mov	r6, r0
  if(status == HAL_OK)
 8001ffa:	bb20      	cbnz	r0, 8002046 <HAL_FLASH_Program+0x6e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ffc:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001ffe:	481d      	ldr	r0, [pc, #116]	; (8002074 <HAL_FLASH_Program+0x9c>)
 8002000:	6805      	ldr	r5, [r0, #0]
 8002002:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002006:	bf17      	itett	ne
 8002008:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800200a:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800200c:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8002010:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002012:	bf1c      	itt	ne
 8002014:	2302      	movne	r3, #2
 8002016:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8002018:	b9d7      	cbnz	r7, 8002050 <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800201a:	6945      	ldr	r5, [r0, #20]
 800201c:	f045 0501 	orr.w	r5, r5, #1
 8002020:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002022:	f8c8 9000 	str.w	r9, [r8]
      prog_bit = FLASH_CR_PG;
 8002026:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 8002028:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800202c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002030:	f7ff ff94 	bl	8001f5c <FLASH_WaitForLastOperation>
 8002034:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 8002036:	b125      	cbz	r5, 8002042 <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 8002038:	4a0e      	ldr	r2, [pc, #56]	; (8002074 <HAL_FLASH_Program+0x9c>)
 800203a:	6953      	ldr	r3, [r2, #20]
 800203c:	ea23 0505 	bic.w	r5, r3, r5
 8002040:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 8002042:	f000 f85d 	bl	8002100 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8002046:	2300      	movs	r3, #0
 8002048:	7023      	strb	r3, [r4, #0]
}
 800204a:	4630      	mov	r0, r6
 800204c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8002050:	1e7b      	subs	r3, r7, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d901      	bls.n	800205a <HAL_FLASH_Program+0x82>
  uint32_t prog_bit = 0;
 8002056:	2500      	movs	r5, #0
 8002058:	e7e8      	b.n	800202c <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800205a:	4649      	mov	r1, r9
 800205c:	4640      	mov	r0, r8
 800205e:	f7ff ff4f 	bl	8001f00 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8002062:	2f02      	cmp	r7, #2
 8002064:	d1f7      	bne.n	8002056 <HAL_FLASH_Program+0x7e>
        prog_bit = FLASH_CR_FSTPG;
 8002066:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 800206a:	e7df      	b.n	800202c <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 800206c:	2602      	movs	r6, #2
 800206e:	e7ec      	b.n	800204a <HAL_FLASH_Program+0x72>
 8002070:	20000000 	.word	0x20000000
 8002074:	40022000 	.word	0x40022000

08002078 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 8002078:	4a0f      	ldr	r2, [pc, #60]	; (80020b8 <FLASH_MassErase+0x40>)
 800207a:	6a13      	ldr	r3, [r2, #32]
 800207c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002080:	4613      	mov	r3, r2
 8002082:	d011      	beq.n	80020a8 <FLASH_MassErase+0x30>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002084:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8002086:	bf42      	ittt	mi
 8002088:	6952      	ldrmi	r2, [r2, #20]
 800208a:	f042 0204 	orrmi.w	r2, r2, #4
 800208e:	615a      	strmi	r2, [r3, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002090:	0782      	lsls	r2, r0, #30
 8002092:	d503      	bpl.n	800209c <FLASH_MassErase+0x24>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800209a:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800209c:	4a06      	ldr	r2, [pc, #24]	; (80020b8 <FLASH_MassErase+0x40>)
 800209e:	6953      	ldr	r3, [r2, #20]
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6153      	str	r3, [r2, #20]
 80020a6:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80020a8:	6953      	ldr	r3, [r2, #20]
 80020aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6153      	str	r3, [r2, #20]
 80020b4:	e7f2      	b.n	800209c <FLASH_MassErase+0x24>
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000

080020bc <FLASH_PageErase>:

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <FLASH_PageErase+0x40>)
 80020be:	6a1a      	ldr	r2, [r3, #32]
 80020c0:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80020c4:	695a      	ldr	r2, [r3, #20]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 80020c6:	d113      	bne.n	80020f0 <FLASH_PageErase+0x34>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 80020c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80020cc:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80020ce:	695a      	ldr	r2, [r3, #20]
 80020d0:	00c0      	lsls	r0, r0, #3
 80020d2:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 80020d6:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 80020da:	4310      	orrs	r0, r2
 80020dc:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80020de:	695a      	ldr	r2, [r3, #20]
 80020e0:	f042 0202 	orr.w	r2, r2, #2
 80020e4:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80020e6:	695a      	ldr	r2, [r3, #20]
 80020e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020ec:	615a      	str	r2, [r3, #20]
 80020ee:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 80020f0:	07c9      	lsls	r1, r1, #31
 80020f2:	d4e9      	bmi.n	80020c8 <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 80020f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020f8:	e7e8      	b.n	80020cc <FLASH_PageErase+0x10>
 80020fa:	bf00      	nop
 80020fc:	40022000 	.word	0x40022000

08002100 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002100:	4913      	ldr	r1, [pc, #76]	; (8002150 <FLASH_FlushCaches+0x50>)
 8002102:	7f0b      	ldrb	r3, [r1, #28]
 8002104:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 8002106:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800210a:	2a01      	cmp	r2, #1
 800210c:	d10c      	bne.n	8002128 <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800210e:	4a11      	ldr	r2, [pc, #68]	; (8002154 <FLASH_FlushCaches+0x54>)
 8002110:	6810      	ldr	r0, [r2, #0]
 8002112:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8002116:	6010      	str	r0, [r2, #0]
 8002118:	6810      	ldr	r0, [r2, #0]
 800211a:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 800211e:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002120:	6810      	ldr	r0, [r2, #0]
 8002122:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8002126:	6010      	str	r0, [r2, #0]
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 8002128:	3b02      	subs	r3, #2
 800212a:	2b01      	cmp	r3, #1
 800212c:	d80c      	bhi.n	8002148 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800212e:	4b09      	ldr	r3, [pc, #36]	; (8002154 <FLASH_FlushCaches+0x54>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800213e:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002146:	601a      	str	r2, [r3, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002148:	2300      	movs	r3, #0
 800214a:	770b      	strb	r3, [r1, #28]
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000000 	.word	0x20000000
 8002154:	40022000 	.word	0x40022000

08002158 <HAL_FLASHEx_Erase>:
{
 8002158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 800215c:	4c35      	ldr	r4, [pc, #212]	; (8002234 <HAL_FLASHEx_Erase+0xdc>)
 800215e:	7823      	ldrb	r3, [r4, #0]
 8002160:	2b01      	cmp	r3, #1
{
 8002162:	4606      	mov	r6, r0
 8002164:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8002166:	d062      	beq.n	800222e <HAL_FLASHEx_Erase+0xd6>
 8002168:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800216a:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 800216e:	7027      	strb	r7, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002170:	f7ff fef4 	bl	8001f5c <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8002174:	4605      	mov	r5, r0
 8002176:	bb40      	cbnz	r0, 80021ca <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002178:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800217a:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002182:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002184:	d026      	beq.n	80021d4 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002186:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800218a:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	0551      	lsls	r1, r2, #21
 8002190:	d506      	bpl.n	80021a0 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002198:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800219a:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800219c:	7723      	strb	r3, [r4, #28]
 800219e:	e000      	b.n	80021a2 <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80021a0:	7727      	strb	r7, [r4, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80021a2:	6833      	ldr	r3, [r6, #0]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d11f      	bne.n	80021e8 <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 80021a8:	6870      	ldr	r0, [r6, #4]
 80021aa:	f7ff ff65 	bl	8002078 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80021b2:	f7ff fed3 	bl	8001f5c <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80021b6:	4a20      	ldr	r2, [pc, #128]	; (8002238 <HAL_FLASHEx_Erase+0xe0>)
 80021b8:	6953      	ldr	r3, [r2, #20]
 80021ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80021be:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021c2:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 80021c4:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 80021c6:	f7ff ff9b 	bl	8002100 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80021ca:	2300      	movs	r3, #0
 80021cc:	7023      	strb	r3, [r4, #0]
}
 80021ce:	4628      	mov	r0, r5
 80021d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80021d4:	0552      	lsls	r2, r2, #21
 80021d6:	d505      	bpl.n	80021e4 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021de:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80021e0:	2302      	movs	r3, #2
 80021e2:	e7db      	b.n	800219c <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80021e4:	7720      	strb	r0, [r4, #28]
 80021e6:	e7dc      	b.n	80021a2 <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 80021e8:	f04f 33ff 	mov.w	r3, #4294967295
 80021ec:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80021f0:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80021f2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8002238 <HAL_FLASHEx_Erase+0xe0>
 80021f6:	f8df a044 	ldr.w	sl, [pc, #68]	; 800223c <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80021fa:	68b3      	ldr	r3, [r6, #8]
 80021fc:	68f2      	ldr	r2, [r6, #12]
 80021fe:	4413      	add	r3, r2
 8002200:	429f      	cmp	r7, r3
 8002202:	d2e0      	bcs.n	80021c6 <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002204:	6871      	ldr	r1, [r6, #4]
 8002206:	4638      	mov	r0, r7
 8002208:	f7ff ff58 	bl	80020bc <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800220c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002210:	f7ff fea4 	bl	8001f5c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002214:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8002218:	ea03 030a 	and.w	r3, r3, sl
 800221c:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 8002220:	b118      	cbz	r0, 800222a <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 8002222:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002226:	4605      	mov	r5, r0
          break;
 8002228:	e7cd      	b.n	80021c6 <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800222a:	3701      	adds	r7, #1
 800222c:	e7e5      	b.n	80021fa <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 800222e:	2502      	movs	r5, #2
 8002230:	e7cd      	b.n	80021ce <HAL_FLASHEx_Erase+0x76>
 8002232:	bf00      	nop
 8002234:	20000000 	.word	0x20000000
 8002238:	40022000 	.word	0x40022000
 800223c:	fffff805 	.word	0xfffff805

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002244:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002248:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80023ec <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800224c:	4a65      	ldr	r2, [pc, #404]	; (80023e4 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 800224e:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002250:	fa38 f403 	lsrs.w	r4, r8, r3
 8002254:	d102      	bne.n	800225c <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8002256:	b003      	add	sp, #12
 8002258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800225c:	f04f 0e01 	mov.w	lr, #1
 8002260:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 8002264:	ea18 060e 	ands.w	r6, r8, lr
 8002268:	f000 80ab 	beq.w	80023c2 <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800226c:	684c      	ldr	r4, [r1, #4]
 800226e:	f024 0710 	bic.w	r7, r4, #16
 8002272:	2f02      	cmp	r7, #2
 8002274:	d116      	bne.n	80022a4 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8002276:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800227a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800227e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002282:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002286:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800228a:	f04f 0c0f 	mov.w	ip, #15
 800228e:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002292:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002296:	690d      	ldr	r5, [r1, #16]
 8002298:	fa05 f50b 	lsl.w	r5, r5, fp
 800229c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80022a0:	f8ca 5020 	str.w	r5, [sl, #32]
 80022a4:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022a8:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80022aa:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022ae:	fa05 f50a 	lsl.w	r5, r5, sl
 80022b2:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022b4:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022b8:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022bc:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022c2:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022c6:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80022c8:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022cc:	d811      	bhi.n	80022f2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 80022ce:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022d0:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022d4:	68cf      	ldr	r7, [r1, #12]
 80022d6:	fa07 fc0a 	lsl.w	ip, r7, sl
 80022da:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80022de:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80022e0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022e2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80022e6:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80022ea:	409f      	lsls	r7, r3
 80022ec:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80022f0:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80022f2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022f4:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022f6:	688f      	ldr	r7, [r1, #8]
 80022f8:	fa07 f70a 	lsl.w	r7, r7, sl
 80022fc:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80022fe:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002300:	00e5      	lsls	r5, r4, #3
 8002302:	d55e      	bpl.n	80023c2 <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002304:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002308:	f045 0501 	orr.w	r5, r5, #1
 800230c:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8002310:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002314:	f023 0703 	bic.w	r7, r3, #3
 8002318:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800231c:	f005 0501 	and.w	r5, r5, #1
 8002320:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8002324:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002326:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800232a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800232c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002330:	f04f 0c0f 	mov.w	ip, #15
 8002334:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002338:	fa0c f50e 	lsl.w	r5, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800233c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002340:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002344:	d03f      	beq.n	80023c6 <HAL_GPIO_Init+0x186>
 8002346:	4d28      	ldr	r5, [pc, #160]	; (80023e8 <HAL_GPIO_Init+0x1a8>)
 8002348:	42a8      	cmp	r0, r5
 800234a:	d03e      	beq.n	80023ca <HAL_GPIO_Init+0x18a>
 800234c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002350:	42a8      	cmp	r0, r5
 8002352:	d03c      	beq.n	80023ce <HAL_GPIO_Init+0x18e>
 8002354:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002358:	42a8      	cmp	r0, r5
 800235a:	d03a      	beq.n	80023d2 <HAL_GPIO_Init+0x192>
 800235c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002360:	42a8      	cmp	r0, r5
 8002362:	d038      	beq.n	80023d6 <HAL_GPIO_Init+0x196>
 8002364:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002368:	42a8      	cmp	r0, r5
 800236a:	d036      	beq.n	80023da <HAL_GPIO_Init+0x19a>
 800236c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002370:	42a8      	cmp	r0, r5
 8002372:	d034      	beq.n	80023de <HAL_GPIO_Init+0x19e>
 8002374:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002378:	42a8      	cmp	r0, r5
 800237a:	bf14      	ite	ne
 800237c:	2508      	movne	r5, #8
 800237e:	2507      	moveq	r5, #7
 8002380:	fa05 f50e 	lsl.w	r5, r5, lr
 8002384:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002388:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 800238a:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 800238c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800238e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002392:	bf0c      	ite	eq
 8002394:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002396:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 8002398:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 800239a:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800239c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 80023a0:	bf0c      	ite	eq
 80023a2:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80023a4:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 80023a6:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 80023a8:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023aa:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 80023ae:	bf0c      	ite	eq
 80023b0:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80023b2:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 80023b4:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 80023b6:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023b8:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 80023ba:	bf54      	ite	pl
 80023bc:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80023be:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 80023c0:	60d5      	str	r5, [r2, #12]
    position++;
 80023c2:	3301      	adds	r3, #1
 80023c4:	e744      	b.n	8002250 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023c6:	2500      	movs	r5, #0
 80023c8:	e7da      	b.n	8002380 <HAL_GPIO_Init+0x140>
 80023ca:	2501      	movs	r5, #1
 80023cc:	e7d8      	b.n	8002380 <HAL_GPIO_Init+0x140>
 80023ce:	2502      	movs	r5, #2
 80023d0:	e7d6      	b.n	8002380 <HAL_GPIO_Init+0x140>
 80023d2:	2503      	movs	r5, #3
 80023d4:	e7d4      	b.n	8002380 <HAL_GPIO_Init+0x140>
 80023d6:	2504      	movs	r5, #4
 80023d8:	e7d2      	b.n	8002380 <HAL_GPIO_Init+0x140>
 80023da:	2505      	movs	r5, #5
 80023dc:	e7d0      	b.n	8002380 <HAL_GPIO_Init+0x140>
 80023de:	2506      	movs	r5, #6
 80023e0:	e7ce      	b.n	8002380 <HAL_GPIO_Init+0x140>
 80023e2:	bf00      	nop
 80023e4:	40010400 	.word	0x40010400
 80023e8:	48000400 	.word	0x48000400
 80023ec:	40021000 	.word	0x40021000

080023f0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80023f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80023f4:	4d46      	ldr	r5, [pc, #280]	; (8002510 <HAL_GPIO_DeInit+0x120>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80023f6:	f8df a120 	ldr.w	sl, [pc, #288]	; 8002518 <HAL_GPIO_DeInit+0x128>
 80023fa:	f8df b120 	ldr.w	fp, [pc, #288]	; 800251c <HAL_GPIO_DeInit+0x12c>
  uint32_t position = 0x00u;
 80023fe:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002400:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8002404:	fa31 f302 	lsrs.w	r3, r1, r2
 8002408:	d101      	bne.n	800240e <HAL_GPIO_DeInit+0x1e>
      }
    }

    position++;
  }
}
 800240a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800240e:	fa09 f802 	lsl.w	r8, r9, r2
    if (iocurrent != 0x00u)
 8002412:	ea11 0608 	ands.w	r6, r1, r8
 8002416:	d06b      	beq.n	80024f0 <HAL_GPIO_DeInit+0x100>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002418:	6807      	ldr	r7, [r0, #0]
 800241a:	2303      	movs	r3, #3
 800241c:	0054      	lsls	r4, r2, #1
 800241e:	fa03 f404 	lsl.w	r4, r3, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002422:	fa22 fc03 	lsr.w	ip, r2, r3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002426:	4327      	orrs	r7, r4
 8002428:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800242c:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800242e:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8002432:	f002 0e07 	and.w	lr, r2, #7
 8002436:	463b      	mov	r3, r7
 8002438:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800243c:	270f      	movs	r7, #15
 800243e:	fa07 fe0e 	lsl.w	lr, r7, lr
 8002442:	ea23 0e0e 	bic.w	lr, r3, lr
 8002446:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800244a:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800244e:	43e4      	mvns	r4, r4
 8002450:	ea0e 0e04 	and.w	lr, lr, r4
 8002454:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002458:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800245c:	ea2e 0808 	bic.w	r8, lr, r8
 8002460:	f8c0 8004 	str.w	r8, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002464:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8002468:	ea04 040e 	and.w	r4, r4, lr
 800246c:	60c4      	str	r4, [r0, #12]
 800246e:	f022 0403 	bic.w	r4, r2, #3
 8002472:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8002476:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800247a:	f002 0e03 	and.w	lr, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 800247e:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002482:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002486:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800248a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800248e:	ea0c 0c07 	and.w	ip, ip, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002492:	d02f      	beq.n	80024f4 <HAL_GPIO_DeInit+0x104>
 8002494:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_GPIO_DeInit+0x124>)
 8002496:	4298      	cmp	r0, r3
 8002498:	d02e      	beq.n	80024f8 <HAL_GPIO_DeInit+0x108>
 800249a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800249e:	4298      	cmp	r0, r3
 80024a0:	d02c      	beq.n	80024fc <HAL_GPIO_DeInit+0x10c>
 80024a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a6:	4298      	cmp	r0, r3
 80024a8:	d02a      	beq.n	8002500 <HAL_GPIO_DeInit+0x110>
 80024aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ae:	4298      	cmp	r0, r3
 80024b0:	d028      	beq.n	8002504 <HAL_GPIO_DeInit+0x114>
 80024b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b6:	4298      	cmp	r0, r3
 80024b8:	d026      	beq.n	8002508 <HAL_GPIO_DeInit+0x118>
 80024ba:	4550      	cmp	r0, sl
 80024bc:	d026      	beq.n	800250c <HAL_GPIO_DeInit+0x11c>
 80024be:	4558      	cmp	r0, fp
 80024c0:	bf0c      	ite	eq
 80024c2:	2307      	moveq	r3, #7
 80024c4:	2308      	movne	r3, #8
 80024c6:	fa03 f30e 	lsl.w	r3, r3, lr
 80024ca:	459c      	cmp	ip, r3
 80024cc:	d110      	bne.n	80024f0 <HAL_GPIO_DeInit+0x100>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80024ce:	68a3      	ldr	r3, [r4, #8]
 80024d0:	ea23 0707 	bic.w	r7, r3, r7
 80024d4:	60a7      	str	r7, [r4, #8]
        EXTI->IMR1 &= ~(iocurrent);
 80024d6:	682b      	ldr	r3, [r5, #0]
 80024d8:	43f6      	mvns	r6, r6
 80024da:	4033      	ands	r3, r6
 80024dc:	602b      	str	r3, [r5, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80024de:	686b      	ldr	r3, [r5, #4]
 80024e0:	4033      	ands	r3, r6
 80024e2:	606b      	str	r3, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80024e4:	68ab      	ldr	r3, [r5, #8]
 80024e6:	4033      	ands	r3, r6
 80024e8:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 80024ea:	68eb      	ldr	r3, [r5, #12]
 80024ec:	401e      	ands	r6, r3
 80024ee:	60ee      	str	r6, [r5, #12]
    position++;
 80024f0:	3201      	adds	r2, #1
 80024f2:	e787      	b.n	8002404 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80024f4:	2300      	movs	r3, #0
 80024f6:	e7e6      	b.n	80024c6 <HAL_GPIO_DeInit+0xd6>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e7e4      	b.n	80024c6 <HAL_GPIO_DeInit+0xd6>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e7e2      	b.n	80024c6 <HAL_GPIO_DeInit+0xd6>
 8002500:	2303      	movs	r3, #3
 8002502:	e7e0      	b.n	80024c6 <HAL_GPIO_DeInit+0xd6>
 8002504:	2304      	movs	r3, #4
 8002506:	e7de      	b.n	80024c6 <HAL_GPIO_DeInit+0xd6>
 8002508:	2305      	movs	r3, #5
 800250a:	e7dc      	b.n	80024c6 <HAL_GPIO_DeInit+0xd6>
 800250c:	2306      	movs	r3, #6
 800250e:	e7da      	b.n	80024c6 <HAL_GPIO_DeInit+0xd6>
 8002510:	40010400 	.word	0x40010400
 8002514:	48000400 	.word	0x48000400
 8002518:	48001800 	.word	0x48001800
 800251c:	48001c00 	.word	0x48001c00

08002520 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002520:	6903      	ldr	r3, [r0, #16]
 8002522:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002524:	bf14      	ite	ne
 8002526:	2001      	movne	r0, #1
 8002528:	2000      	moveq	r0, #0
 800252a:	4770      	bx	lr

0800252c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800252c:	b10a      	cbz	r2, 8002532 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800252e:	6181      	str	r1, [r0, #24]
 8002530:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002532:	6281      	str	r1, [r0, #40]	; 0x28
 8002534:	4770      	bx	lr

08002536 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002536:	6943      	ldr	r3, [r0, #20]
 8002538:	4059      	eors	r1, r3
 800253a:	6141      	str	r1, [r0, #20]
 800253c:	4770      	bx	lr

0800253e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800253e:	4770      	bx	lr

08002540 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002540:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002544:	6959      	ldr	r1, [r3, #20]
 8002546:	4201      	tst	r1, r0
 8002548:	d002      	beq.n	8002550 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800254a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800254c:	f7ff fff7 	bl	800253e <HAL_GPIO_EXTI_Callback>
 8002550:	bd08      	pop	{r3, pc}
 8002552:	bf00      	nop
 8002554:	40010400 	.word	0x40010400

08002558 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002558:	6803      	ldr	r3, [r0, #0]
 800255a:	699a      	ldr	r2, [r3, #24]
 800255c:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 800255e:	bf44      	itt	mi
 8002560:	2200      	movmi	r2, #0
 8002562:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002564:	699a      	ldr	r2, [r3, #24]
 8002566:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002568:	bf5e      	ittt	pl
 800256a:	699a      	ldrpl	r2, [r3, #24]
 800256c:	f042 0201 	orrpl.w	r2, r2, #1
 8002570:	619a      	strpl	r2, [r3, #24]
 8002572:	4770      	bx	lr

08002574 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002574:	b530      	push	{r4, r5, lr}
 8002576:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002578:	6805      	ldr	r5, [r0, #0]
 800257a:	4323      	orrs	r3, r4
 800257c:	0d64      	lsrs	r4, r4, #21
 800257e:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002582:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8002586:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800258a:	6868      	ldr	r0, [r5, #4]
 800258c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002590:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002594:	4319      	orrs	r1, r3
 8002596:	f044 0403 	orr.w	r4, r4, #3
 800259a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800259e:	ea20 0404 	bic.w	r4, r0, r4
 80025a2:	4321      	orrs	r1, r4
 80025a4:	6069      	str	r1, [r5, #4]
 80025a6:	bd30      	pop	{r4, r5, pc}

080025a8 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80025a8:	f011 0301 	ands.w	r3, r1, #1
 80025ac:	d007      	beq.n	80025be <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80025ae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80025b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025b6:	2b28      	cmp	r3, #40	; 0x28
 80025b8:	bf0c      	ite	eq
 80025ba:	2342      	moveq	r3, #66	; 0x42
 80025bc:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80025be:	078a      	lsls	r2, r1, #30
 80025c0:	d509      	bpl.n	80025d6 <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80025c2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80025c6:	f002 0228 	and.w	r2, r2, #40	; 0x28
 80025ca:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80025cc:	bf0c      	ite	eq
 80025ce:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025d2:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80025d6:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80025d8:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80025dc:	bf48      	it	mi
 80025de:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80025e2:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 80025e6:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80025e8:	bf08      	it	eq
 80025ea:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 80025ee:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80025f0:	6801      	ldr	r1, [r0, #0]
 80025f2:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 80025f4:	bf08      	it	eq
 80025f6:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80025fa:	ea22 0303 	bic.w	r3, r2, r3
 80025fe:	600b      	str	r3, [r1, #0]
 8002600:	4770      	bx	lr

08002602 <I2C_WaitOnFlagUntilTimeout>:
{
 8002602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002606:	9f06      	ldr	r7, [sp, #24]
 8002608:	4604      	mov	r4, r0
 800260a:	4688      	mov	r8, r1
 800260c:	4616      	mov	r6, r2
 800260e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002610:	6822      	ldr	r2, [r4, #0]
 8002612:	6993      	ldr	r3, [r2, #24]
 8002614:	ea38 0303 	bics.w	r3, r8, r3
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	42b3      	cmp	r3, r6
 8002620:	d002      	beq.n	8002628 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002622:	2000      	movs	r0, #0
}
 8002624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002628:	1c6b      	adds	r3, r5, #1
 800262a:	d0f2      	beq.n	8002612 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800262c:	f7fe fcf8 	bl	8001020 <HAL_GetTick>
 8002630:	1bc0      	subs	r0, r0, r7
 8002632:	4285      	cmp	r5, r0
 8002634:	d301      	bcc.n	800263a <I2C_WaitOnFlagUntilTimeout+0x38>
 8002636:	2d00      	cmp	r5, #0
 8002638:	d1ea      	bne.n	8002610 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800263a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800263c:	f043 0320 	orr.w	r3, r3, #32
 8002640:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002642:	2320      	movs	r3, #32
 8002644:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	2300      	movs	r3, #0
 800264a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800264e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002652:	2001      	movs	r0, #1
 8002654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002658 <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002658:	6803      	ldr	r3, [r0, #0]
{
 800265a:	b570      	push	{r4, r5, r6, lr}
 800265c:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800265e:	6998      	ldr	r0, [r3, #24]
 8002660:	f010 0010 	ands.w	r0, r0, #16
{
 8002664:	460d      	mov	r5, r1
 8002666:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002668:	d116      	bne.n	8002698 <I2C_IsAcknowledgeFailed+0x40>
 800266a:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 800266c:	1c69      	adds	r1, r5, #1
 800266e:	d014      	beq.n	800269a <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002670:	f7fe fcd6 	bl	8001020 <HAL_GetTick>
 8002674:	1b80      	subs	r0, r0, r6
 8002676:	4285      	cmp	r5, r0
 8002678:	d300      	bcc.n	800267c <I2C_IsAcknowledgeFailed+0x24>
 800267a:	b96d      	cbnz	r5, 8002698 <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800267c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800267e:	f043 0320 	orr.w	r3, r3, #32
 8002682:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002684:	2320      	movs	r3, #32
 8002686:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800268a:	2300      	movs	r3, #0
 800268c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002690:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002694:	2001      	movs	r0, #1
}
 8002696:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	6999      	ldr	r1, [r3, #24]
 800269c:	068a      	lsls	r2, r1, #26
 800269e:	d5e5      	bpl.n	800266c <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a0:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a2:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026a4:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80026a6:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026a8:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 80026aa:	f7ff ff55 	bl	8002558 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 80026ae:	6822      	ldr	r2, [r4, #0]
 80026b0:	6853      	ldr	r3, [r2, #4]
 80026b2:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 80026b6:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 80026ba:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80026be:	f023 0301 	bic.w	r3, r3, #1
 80026c2:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026c4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80026cc:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 80026d0:	e7db      	b.n	800268a <I2C_IsAcknowledgeFailed+0x32>

080026d2 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80026d2:	b570      	push	{r4, r5, r6, lr}
 80026d4:	4604      	mov	r4, r0
 80026d6:	460d      	mov	r5, r1
 80026d8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026da:	6823      	ldr	r3, [r4, #0]
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	079b      	lsls	r3, r3, #30
 80026e0:	d501      	bpl.n	80026e6 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80026e2:	2000      	movs	r0, #0
 80026e4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80026e6:	4632      	mov	r2, r6
 80026e8:	4629      	mov	r1, r5
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7ff ffb4 	bl	8002658 <I2C_IsAcknowledgeFailed>
 80026f0:	b9a0      	cbnz	r0, 800271c <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 80026f2:	1c6a      	adds	r2, r5, #1
 80026f4:	d0f1      	beq.n	80026da <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7fe fc93 	bl	8001020 <HAL_GetTick>
 80026fa:	1b80      	subs	r0, r0, r6
 80026fc:	4285      	cmp	r5, r0
 80026fe:	d301      	bcc.n	8002704 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002700:	2d00      	cmp	r5, #0
 8002702:	d1ea      	bne.n	80026da <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002704:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002706:	f043 0320 	orr.w	r3, r3, #32
 800270a:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800270c:	2320      	movs	r3, #32
 800270e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002712:	2300      	movs	r3, #0
 8002714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002718:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800271c:	2001      	movs	r0, #1
}
 800271e:	bd70      	pop	{r4, r5, r6, pc}

08002720 <I2C_RequestMemoryRead>:
{
 8002720:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002722:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002724:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <I2C_RequestMemoryRead+0x60>)
 8002728:	9300      	str	r3, [sp, #0]
{
 800272a:	4605      	mov	r5, r0
 800272c:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800272e:	2300      	movs	r3, #0
 8002730:	b2fa      	uxtb	r2, r7
 8002732:	f7ff ff1f 	bl	8002574 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002736:	4632      	mov	r2, r6
 8002738:	9908      	ldr	r1, [sp, #32]
 800273a:	4628      	mov	r0, r5
 800273c:	f7ff ffc9 	bl	80026d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002740:	b110      	cbz	r0, 8002748 <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 8002742:	2001      	movs	r0, #1
}
 8002744:	b003      	add	sp, #12
 8002746:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002748:	2f01      	cmp	r7, #1
 800274a:	682b      	ldr	r3, [r5, #0]
 800274c:	d10c      	bne.n	8002768 <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800274e:	b2e4      	uxtb	r4, r4
 8002750:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002752:	9b08      	ldr	r3, [sp, #32]
 8002754:	9600      	str	r6, [sp, #0]
 8002756:	2200      	movs	r2, #0
 8002758:	2140      	movs	r1, #64	; 0x40
 800275a:	4628      	mov	r0, r5
 800275c:	f7ff ff51 	bl	8002602 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 8002760:	3000      	adds	r0, #0
 8002762:	bf18      	it	ne
 8002764:	2001      	movne	r0, #1
 8002766:	e7ed      	b.n	8002744 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002768:	0a22      	lsrs	r2, r4, #8
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800276c:	9908      	ldr	r1, [sp, #32]
 800276e:	4632      	mov	r2, r6
 8002770:	4628      	mov	r0, r5
 8002772:	f7ff ffae 	bl	80026d2 <I2C_WaitOnTXISFlagUntilTimeout>
 8002776:	2800      	cmp	r0, #0
 8002778:	d1e3      	bne.n	8002742 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800277a:	682b      	ldr	r3, [r5, #0]
 800277c:	e7e7      	b.n	800274e <I2C_RequestMemoryRead+0x2e>
 800277e:	bf00      	nop
 8002780:	80002000 	.word	0x80002000

08002784 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	4604      	mov	r4, r0
 8002788:	460d      	mov	r5, r1
 800278a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	069b      	lsls	r3, r3, #26
 8002792:	d501      	bpl.n	8002798 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002794:	2000      	movs	r0, #0
 8002796:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002798:	4632      	mov	r2, r6
 800279a:	4629      	mov	r1, r5
 800279c:	4620      	mov	r0, r4
 800279e:	f7ff ff5b 	bl	8002658 <I2C_IsAcknowledgeFailed>
 80027a2:	b990      	cbnz	r0, 80027ca <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a4:	f7fe fc3c 	bl	8001020 <HAL_GetTick>
 80027a8:	1b80      	subs	r0, r0, r6
 80027aa:	4285      	cmp	r5, r0
 80027ac:	d301      	bcc.n	80027b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80027ae:	2d00      	cmp	r5, #0
 80027b0:	d1ec      	bne.n	800278c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027b4:	f043 0320 	orr.w	r3, r3, #32
 80027b8:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027ba:	2320      	movs	r3, #32
 80027bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80027c6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80027ca:	2001      	movs	r0, #1
}
 80027cc:	bd70      	pop	{r4, r5, r6, pc}

080027ce <HAL_I2C_Init>:
{
 80027ce:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80027d0:	4604      	mov	r4, r0
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d04a      	beq.n	800286c <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027d6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80027da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027de:	b91b      	cbnz	r3, 80027e8 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80027e0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80027e4:	f01d f99a 	bl	801fb1c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80027e8:	2324      	movs	r3, #36	; 0x24
 80027ea:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 80027ee:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027f0:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	f022 0201 	bic.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027fa:	6862      	ldr	r2, [r4, #4]
 80027fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002800:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002802:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002804:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002806:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800280e:	d124      	bne.n	800285a <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002810:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002814:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002816:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002818:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800281a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800281e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002822:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002824:	68da      	ldr	r2, [r3, #12]
 8002826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800282a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800282c:	6922      	ldr	r2, [r4, #16]
 800282e:	430a      	orrs	r2, r1
 8002830:	69a1      	ldr	r1, [r4, #24]
 8002832:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002836:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002838:	6a21      	ldr	r1, [r4, #32]
 800283a:	69e2      	ldr	r2, [r4, #28]
 800283c:	430a      	orrs	r2, r1
 800283e:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002848:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800284a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800284c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800284e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002852:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002854:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002858:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800285a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800285e:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002860:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002862:	bf04      	itt	eq
 8002864:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002868:	605a      	streq	r2, [r3, #4]
 800286a:	e7d4      	b.n	8002816 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 800286c:	2001      	movs	r0, #1
}
 800286e:	bd10      	pop	{r4, pc}

08002870 <HAL_I2C_Mem_Read>:
{
 8002870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002874:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002876:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800287a:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 800287c:	2b20      	cmp	r3, #32
{
 800287e:	4604      	mov	r4, r0
 8002880:	460f      	mov	r7, r1
 8002882:	9203      	str	r2, [sp, #12]
 8002884:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002888:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800288c:	f040 80a9 	bne.w	80029e2 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002892:	b113      	cbz	r3, 800289a <HAL_I2C_Mem_Read+0x2a>
 8002894:	f1ba 0f00 	cmp.w	sl, #0
 8002898:	d106      	bne.n	80028a8 <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800289a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800289e:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80028a0:	2001      	movs	r0, #1
}
 80028a2:	b005      	add	sp, #20
 80028a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80028a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	f000 8098 	beq.w	80029e2 <HAL_I2C_Mem_Read+0x172>
 80028b2:	2501      	movs	r5, #1
 80028b4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80028b8:	f7fe fbb2 	bl	8001020 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028bc:	2319      	movs	r3, #25
 80028be:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80028c0:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80028c2:	462a      	mov	r2, r5
 80028c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028c8:	4620      	mov	r0, r4
 80028ca:	f7ff fe9a 	bl	8002602 <I2C_WaitOnFlagUntilTimeout>
 80028ce:	4681      	mov	r9, r0
 80028d0:	2800      	cmp	r0, #0
 80028d2:	d1e5      	bne.n	80028a0 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028d4:	2322      	movs	r3, #34	; 0x22
 80028d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028da:	2340      	movs	r3, #64	; 0x40
 80028dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 80028e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e2:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80028e4:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80028e6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 80028e8:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ec:	9601      	str	r6, [sp, #4]
 80028ee:	f8cd 8000 	str.w	r8, [sp]
 80028f2:	465b      	mov	r3, fp
 80028f4:	9a03      	ldr	r2, [sp, #12]
 80028f6:	4639      	mov	r1, r7
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7ff ff11 	bl	8002720 <I2C_RequestMemoryRead>
 80028fe:	b110      	cbz	r0, 8002906 <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8002900:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8002904:	e7cc      	b.n	80028a0 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002906:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	2bff      	cmp	r3, #255	; 0xff
 800290c:	4b36      	ldr	r3, [pc, #216]	; (80029e8 <HAL_I2C_Mem_Read+0x178>)
 800290e:	d958      	bls.n	80029c2 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002910:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002912:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002914:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002916:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800291a:	4639      	mov	r1, r7
 800291c:	4620      	mov	r0, r4
 800291e:	f7ff fe29 	bl	8002574 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002922:	9600      	str	r6, [sp, #0]
 8002924:	4643      	mov	r3, r8
 8002926:	2200      	movs	r2, #0
 8002928:	2104      	movs	r1, #4
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff fe69 	bl	8002602 <I2C_WaitOnFlagUntilTimeout>
 8002930:	2800      	cmp	r0, #0
 8002932:	d1b5      	bne.n	80028a0 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002934:	6822      	ldr	r2, [r4, #0]
 8002936:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002938:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800293a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800293c:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800293e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002940:	3301      	adds	r3, #1
 8002942:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002944:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002946:	3b01      	subs	r3, #1
 8002948:	b29b      	uxth	r3, r3
 800294a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800294c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800294e:	3a01      	subs	r2, #1
 8002950:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002952:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002954:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002956:	b1ab      	cbz	r3, 8002984 <HAL_I2C_Mem_Read+0x114>
 8002958:	b9a2      	cbnz	r2, 8002984 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800295a:	9600      	str	r6, [sp, #0]
 800295c:	4643      	mov	r3, r8
 800295e:	2180      	movs	r1, #128	; 0x80
 8002960:	4620      	mov	r0, r4
 8002962:	f7ff fe4e 	bl	8002602 <I2C_WaitOnFlagUntilTimeout>
 8002966:	2800      	cmp	r0, #0
 8002968:	d19a      	bne.n	80028a0 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800296a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	2bff      	cmp	r3, #255	; 0xff
 8002970:	d92f      	bls.n	80029d2 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002972:	22ff      	movs	r2, #255	; 0xff
 8002974:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002976:	9000      	str	r0, [sp, #0]
 8002978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800297c:	4639      	mov	r1, r7
 800297e:	4620      	mov	r0, r4
 8002980:	f7ff fdf8 	bl	8002574 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002984:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002986:	b29b      	uxth	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ca      	bne.n	8002922 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298c:	4632      	mov	r2, r6
 800298e:	4641      	mov	r1, r8
 8002990:	4620      	mov	r0, r4
 8002992:	f7ff fef7 	bl	8002784 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002996:	2800      	cmp	r0, #0
 8002998:	d182      	bne.n	80028a0 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	2120      	movs	r1, #32
 800299e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 80029a6:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 80029aa:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 80029ae:	f022 0201 	bic.w	r2, r2, #1
 80029b2:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80029b4:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80029b8:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029bc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80029c0:	e76f      	b.n	80028a2 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 80029c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80029c4:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 80029c6:	b292      	uxth	r2, r2
 80029c8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80029ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	e7a3      	b.n	800291a <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 80029d2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029d4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80029d6:	b292      	uxth	r2, r2
 80029d8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80029da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029de:	b2d2      	uxtb	r2, r2
 80029e0:	e7cc      	b.n	800297c <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 80029e2:	2002      	movs	r0, #2
 80029e4:	e75d      	b.n	80028a2 <HAL_I2C_Mem_Read+0x32>
 80029e6:	bf00      	nop
 80029e8:	80002400 	.word	0x80002400

080029ec <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80029ec:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80029ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80029f0:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80029f2:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80029f4:	b103      	cbz	r3, 80029f8 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80029f6:	4718      	bx	r3
 80029f8:	4770      	bx	lr

080029fa <HAL_I2C_SlaveTxCpltCallback>:
 80029fa:	4770      	bx	lr

080029fc <HAL_I2C_SlaveRxCpltCallback>:
 80029fc:	4770      	bx	lr

080029fe <I2C_ITSlaveSequentialCplt>:
{
 80029fe:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a00:	2500      	movs	r5, #0
 8002a02:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002a06:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a0a:	2b29      	cmp	r3, #41	; 0x29
 8002a0c:	d10c      	bne.n	8002a28 <I2C_ITSlaveSequentialCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a0e:	2328      	movs	r3, #40	; 0x28
 8002a10:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a14:	2321      	movs	r3, #33	; 0x21
 8002a16:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a18:	2101      	movs	r1, #1
 8002a1a:	f7ff fdc5 	bl	80025a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a1e:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a22:	f7ff ffea 	bl	80029fa <HAL_I2C_SlaveTxCpltCallback>
 8002a26:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002a28:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a2e:	d10b      	bne.n	8002a48 <I2C_ITSlaveSequentialCplt+0x4a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002a30:	2328      	movs	r3, #40	; 0x28
 8002a32:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a36:	2322      	movs	r3, #34	; 0x22
 8002a38:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a3a:	2102      	movs	r1, #2
 8002a3c:	f7ff fdb4 	bl	80025a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002a40:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002a44:	f7ff ffda 	bl	80029fc <HAL_I2C_SlaveRxCpltCallback>
 8002a48:	bd38      	pop	{r3, r4, r5, pc}

08002a4a <HAL_I2C_AddrCallback>:
{
 8002a4a:	4770      	bx	lr

08002a4c <I2C_ITAddrCplt.isra.8>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a4e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a52:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a56:	2b28      	cmp	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002a58:	4604      	mov	r4, r0
 8002a5a:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a5c:	d134      	bne.n	8002ac8 <I2C_ITAddrCplt.isra.8+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 8002a5e:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a60:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a62:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002a64:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002a66:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a68:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a6a:	2902      	cmp	r1, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8002a6c:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002a70:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a74:	d120      	bne.n	8002ab8 <I2C_ITAddrCplt.isra.8+0x6c>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002a76:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002a7a:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8002a7e:	f015 0506 	ands.w	r5, r5, #6
 8002a82:	d10e      	bne.n	8002aa2 <I2C_ITAddrCplt.isra.8+0x56>
        hi2c->AddrEventCount++;
 8002a84:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002a86:	3101      	adds	r1, #1
 8002a88:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002a8a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002a8c:	2902      	cmp	r1, #2
 8002a8e:	d120      	bne.n	8002ad2 <I2C_ITAddrCplt.isra.8+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a90:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8002a92:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a94:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002a96:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a9a:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002a9c:	f7ff ffd5 	bl	8002a4a <HAL_I2C_AddrCallback>
 8002aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002aa2:	2104      	movs	r1, #4
 8002aa4:	f7ff fd80 	bl	80025a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002aae:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ab2:	4631      	mov	r1, r6
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	e7f1      	b.n	8002a9c <I2C_ITAddrCplt.isra.8+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ab8:	2104      	movs	r1, #4
 8002aba:	f7ff fd75 	bl	80025a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ac4:	462a      	mov	r2, r5
 8002ac6:	e7f4      	b.n	8002ab2 <I2C_ITAddrCplt.isra.8+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ac8:	2208      	movs	r2, #8
 8002aca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002acc:	2300      	movs	r3, #0
 8002ace:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ad4 <HAL_I2C_ListenCpltCallback>:
 8002ad4:	4770      	bx	lr
	...

08002ad8 <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <I2C_ITListenCplt+0x60>)
{
 8002ada:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8002adc:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ade:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8002ae4:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8002ae6:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aea:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002aee:	074b      	lsls	r3, r1, #29
{
 8002af0:	4604      	mov	r4, r0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002af2:	d512      	bpl.n	8002b1a <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002af4:	6802      	ldr	r2, [r0, #0]
 8002af6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002af8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002afa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002afc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002afe:	3301      	adds	r3, #1
 8002b00:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002b02:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002b04:	b14b      	cbz	r3, 8002b1a <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 8002b06:	3b01      	subs	r3, #1
 8002b08:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002b0a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b12:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002b14:	f043 0304 	orr.w	r3, r3, #4
 8002b18:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b1a:	4620      	mov	r0, r4
 8002b1c:	2107      	movs	r1, #7
 8002b1e:	f7ff fd43 	bl	80025a8 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b22:	6823      	ldr	r3, [r4, #0]
 8002b24:	2210      	movs	r2, #16
 8002b26:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7ff ffd0 	bl	8002ad4 <HAL_I2C_ListenCpltCallback>
 8002b34:	bd10      	pop	{r4, pc}
 8002b36:	bf00      	nop
 8002b38:	ffff0000 	.word	0xffff0000

08002b3c <HAL_I2C_ErrorCallback>:
 8002b3c:	4770      	bx	lr

08002b3e <HAL_I2C_AbortCpltCallback>:
{
 8002b3e:	4770      	bx	lr

08002b40 <I2C_ITError>:
{
 8002b40:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b42:	4a32      	ldr	r2, [pc, #200]	; (8002c0c <I2C_ITError+0xcc>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b44:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b48:	2500      	movs	r5, #0
 8002b4a:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002b4e:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002b50:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002b52:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002b54:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8002b56:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002b58:	2b02      	cmp	r3, #2
{
 8002b5a:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8002b5c:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002b5e:	d822      	bhi.n	8002ba6 <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b60:	2103      	movs	r1, #3
 8002b62:	f7ff fd21 	bl	80025a8 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b66:	2328      	movs	r3, #40	; 0x28
 8002b68:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002b6c:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b6e:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002b70:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002b72:	6823      	ldr	r3, [r4, #0]
 8002b74:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b76:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002b78:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8002b7c:	d020      	beq.n	8002bc0 <I2C_ITError+0x80>
    if (hi2c->hdmatx != NULL)
 8002b7e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002b80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b84:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002b86:	2800      	cmp	r0, #0
 8002b88:	d03e      	beq.n	8002c08 <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b8a:	4b22      	ldr	r3, [pc, #136]	; (8002c14 <I2C_ITError+0xd4>)
 8002b8c:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b94:	f7fe ff87 	bl	8001aa6 <HAL_DMA_Abort_IT>
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	d035      	beq.n	8002c08 <I2C_ITError+0xc8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b9c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002b9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8002ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ba4:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ba6:	2107      	movs	r1, #7
 8002ba8:	f7ff fcfe 	bl	80025a8 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002bac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002bb0:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8002bb2:	bf1c      	itt	ne
 8002bb4:	2320      	movne	r3, #32
 8002bb6:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	6303      	str	r3, [r0, #48]	; 0x30
 8002bbe:	e7d7      	b.n	8002b70 <I2C_ITError+0x30>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002bc0:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8002bc4:	d00e      	beq.n	8002be4 <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002bc6:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002bc8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bce:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002bd0:	b1d0      	cbz	r0, 8002c08 <I2C_ITError+0xc8>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002bd2:	4b10      	ldr	r3, [pc, #64]	; (8002c14 <I2C_ITError+0xd4>)
 8002bd4:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002bd6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002bda:	f7fe ff64 	bl	8001aa6 <HAL_DMA_Abort_IT>
 8002bde:	b198      	cbz	r0, 8002c08 <I2C_ITError+0xc8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002be0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002be2:	e7dc      	b.n	8002b9e <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002be4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002be8:	2b60      	cmp	r3, #96	; 0x60
 8002bea:	d108      	bne.n	8002bfe <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 8002bec:	2320      	movs	r3, #32
 8002bee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002bf2:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f7ff ffa1 	bl	8002b3e <HAL_I2C_AbortCpltCallback>
 8002bfc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hi2c);
 8002bfe:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002c02:	4620      	mov	r0, r4
 8002c04:	f7ff ff9a 	bl	8002b3c <HAL_I2C_ErrorCallback>
 8002c08:	bd70      	pop	{r4, r5, r6, pc}
 8002c0a:	bf00      	nop
 8002c0c:	ffff0000 	.word	0xffff0000
 8002c10:	08002d09 	.word	0x08002d09
 8002c14:	08002e79 	.word	0x08002e79

08002c18 <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002c18:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c1a:	2220      	movs	r2, #32
{
 8002c1c:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002c1e:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c20:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c22:	2208      	movs	r2, #8
 8002c24:	61da      	str	r2, [r3, #28]
{
 8002c26:	460d      	mov	r5, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002c28:	2107      	movs	r1, #7
{
 8002c2a:	4604      	mov	r4, r0
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002c2c:	f7ff fcbc 	bl	80025a8 <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002c30:	6803      	ldr	r3, [r0, #0]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c38:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002c40:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002c44:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8002c4e:	f7ff fc83 	bl	8002558 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c52:	0471      	lsls	r1, r6, #17
 8002c54:	d532      	bpl.n	8002cbc <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8002c56:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8002c58:	b11b      	cbz	r3, 8002c62 <I2C_ITSlaveCplt+0x4a>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002c62:	076b      	lsls	r3, r5, #29
 8002c64:	d50e      	bpl.n	8002c84 <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c66:	6822      	ldr	r2, [r4, #0]
 8002c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c6c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002c6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c70:	3301      	adds	r3, #1
 8002c72:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002c74:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002c76:	b12b      	cbz	r3, 8002c84 <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002c7c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8002c84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	b11b      	cbz	r3, 8002c92 <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c8a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c92:	2300      	movs	r3, #0
 8002c94:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002c9a:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002c9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002c9e:	b18b      	cbz	r3, 8002cc4 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ca0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	f7ff ff4c 	bl	8002b40 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002ca8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002cac:	2b28      	cmp	r3, #40	; 0x28
 8002cae:	d128      	bne.n	8002d02 <I2C_ITSlaveCplt+0xea>
      I2C_ITListenCplt(hi2c, ITFlags);
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	4620      	mov	r0, r4
}
 8002cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8002cb8:	f7ff bf0e 	b.w	8002ad8 <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002cbc:	0432      	lsls	r2, r6, #16
 8002cbe:	d5d0      	bpl.n	8002c62 <I2C_ITSlaveCplt+0x4a>
    if (hi2c->hdmarx != NULL)
 8002cc0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002cc2:	e7c9      	b.n	8002c58 <I2C_ITSlaveCplt+0x40>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002cc4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002cc6:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002cca:	d00a      	beq.n	8002ce2 <I2C_ITSlaveCplt+0xca>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ccc:	4a0d      	ldr	r2, [pc, #52]	; (8002d04 <I2C_ITSlaveCplt+0xec>)
 8002cce:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002cd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002cda:	4620      	mov	r0, r4
 8002cdc:	f7ff fefa 	bl	8002ad4 <HAL_I2C_ListenCpltCallback>
 8002ce0:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002ce2:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002ce6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cea:	2a22      	cmp	r2, #34	; 0x22
 8002cec:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002cf0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cf4:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002cf6:	d102      	bne.n	8002cfe <I2C_ITSlaveCplt+0xe6>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cf8:	f7ff fe80 	bl	80029fc <HAL_I2C_SlaveRxCpltCallback>
 8002cfc:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002cfe:	f7ff fe7c 	bl	80029fa <HAL_I2C_SlaveTxCpltCallback>
 8002d02:	bd70      	pop	{r4, r5, r6, pc}
 8002d04:	ffff0000 	.word	0xffff0000

08002d08 <I2C_Slave_ISR_IT>:
{
 8002d08:	b570      	push	{r4, r5, r6, lr}
 8002d0a:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8002d0c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8002d12:	2a01      	cmp	r2, #1
{
 8002d14:	4604      	mov	r4, r0
 8002d16:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8002d18:	d07c      	beq.n	8002e14 <I2C_Slave_ISR_IT+0x10c>
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d20:	06ca      	lsls	r2, r1, #27
 8002d22:	d539      	bpl.n	8002d98 <I2C_Slave_ISR_IT+0x90>
 8002d24:	06f2      	lsls	r2, r6, #27
 8002d26:	d537      	bpl.n	8002d98 <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 8002d28:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002d2a:	b292      	uxth	r2, r2
 8002d2c:	bb32      	cbnz	r2, 8002d7c <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002d2e:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002d32:	2a28      	cmp	r2, #40	; 0x28
 8002d34:	d110      	bne.n	8002d58 <I2C_Slave_ISR_IT+0x50>
 8002d36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002d3a:	d10d      	bne.n	8002d58 <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, ITFlags);
 8002d3c:	f7ff fecc 	bl	8002ad8 <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d40:	06aa      	lsls	r2, r5, #26
 8002d42:	d505      	bpl.n	8002d50 <I2C_Slave_ISR_IT+0x48>
 8002d44:	06b3      	lsls	r3, r6, #26
 8002d46:	d503      	bpl.n	8002d50 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002d48:	4629      	mov	r1, r5
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f7ff ff64 	bl	8002c18 <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8002d50:	2000      	movs	r0, #0
 8002d52:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002d56:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d58:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002d5c:	2a29      	cmp	r2, #41	; 0x29
 8002d5e:	6822      	ldr	r2, [r4, #0]
 8002d60:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d64:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002d66:	d1eb      	bne.n	8002d40 <I2C_Slave_ISR_IT+0x38>
 8002d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d6c:	d0e8      	beq.n	8002d40 <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f7ff fbf2 	bl	8002558 <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8002d74:	4620      	mov	r0, r4
 8002d76:	f7ff fe42 	bl	80029fe <I2C_ITSlaveSequentialCplt>
 8002d7a:	e7e1      	b.n	8002d40 <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d7c:	6802      	ldr	r2, [r0, #0]
 8002d7e:	2110      	movs	r1, #16
 8002d80:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d82:	6c42      	ldr	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002d84:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d88:	f042 0204 	orr.w	r2, r2, #4
 8002d8c:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002d8e:	d1d7      	bne.n	8002d40 <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d90:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002d92:	f7ff fed5 	bl	8002b40 <I2C_ITError>
 8002d96:	e7d3      	b.n	8002d40 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002d98:	076a      	lsls	r2, r5, #29
 8002d9a:	d51a      	bpl.n	8002dd2 <I2C_Slave_ISR_IT+0xca>
 8002d9c:	0770      	lsls	r0, r6, #29
 8002d9e:	d518      	bpl.n	8002dd2 <I2C_Slave_ISR_IT+0xca>
    if (hi2c->XferCount > 0U)
 8002da0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002da2:	b292      	uxth	r2, r2
 8002da4:	b16a      	cbz	r2, 8002dc2 <I2C_Slave_ISR_IT+0xba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002da6:	6821      	ldr	r1, [r4, #0]
 8002da8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002daa:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8002dac:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 8002dae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002db0:	3201      	adds	r2, #1
 8002db2:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002db4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8002db6:	3a01      	subs	r2, #1
 8002db8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002dba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002dbc:	3a01      	subs	r2, #1
 8002dbe:	b292      	uxth	r2, r2
 8002dc0:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8002dc2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002dc4:	b292      	uxth	r2, r2
 8002dc6:	2a00      	cmp	r2, #0
 8002dc8:	d1ba      	bne.n	8002d40 <I2C_Slave_ISR_IT+0x38>
 8002dca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dce:	d1d1      	bne.n	8002d74 <I2C_Slave_ISR_IT+0x6c>
 8002dd0:	e7b6      	b.n	8002d40 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002dd2:	0729      	lsls	r1, r5, #28
 8002dd4:	d505      	bpl.n	8002de2 <I2C_Slave_ISR_IT+0xda>
 8002dd6:	0732      	lsls	r2, r6, #28
 8002dd8:	d503      	bpl.n	8002de2 <I2C_Slave_ISR_IT+0xda>
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002dda:	4620      	mov	r0, r4
 8002ddc:	f7ff fe36 	bl	8002a4c <I2C_ITAddrCplt.isra.8>
 8002de0:	e7ae      	b.n	8002d40 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002de2:	07a8      	lsls	r0, r5, #30
 8002de4:	d5ac      	bpl.n	8002d40 <I2C_Slave_ISR_IT+0x38>
 8002de6:	07b1      	lsls	r1, r6, #30
 8002de8:	d5aa      	bpl.n	8002d40 <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 8002dea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002dec:	b292      	uxth	r2, r2
 8002dee:	b16a      	cbz	r2, 8002e0c <I2C_Slave_ISR_IT+0x104>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002df0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002df2:	6822      	ldr	r2, [r4, #0]
 8002df4:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002df8:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002dfa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002dfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002e04:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002e06:	3b01      	subs	r3, #1
 8002e08:	8523      	strh	r3, [r4, #40]	; 0x28
 8002e0a:	e799      	b.n	8002d40 <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002e0c:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8002e10:	d0b0      	beq.n	8002d74 <I2C_Slave_ISR_IT+0x6c>
 8002e12:	e795      	b.n	8002d40 <I2C_Slave_ISR_IT+0x38>
  __HAL_LOCK(hi2c);
 8002e14:	2002      	movs	r0, #2
}
 8002e16:	bd70      	pop	{r4, r5, r6, pc}

08002e18 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002e18:	6803      	ldr	r3, [r0, #0]
 8002e1a:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002e1c:	681a      	ldr	r2, [r3, #0]
{
 8002e1e:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e20:	05cc      	lsls	r4, r1, #23
 8002e22:	d508      	bpl.n	8002e36 <HAL_I2C_ER_IRQHandler+0x1e>
 8002e24:	0614      	lsls	r4, r2, #24
 8002e26:	d506      	bpl.n	8002e36 <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002e28:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002e2a:	f044 0401 	orr.w	r4, r4, #1
 8002e2e:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e30:	f44f 7480 	mov.w	r4, #256	; 0x100
 8002e34:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e36:	054c      	lsls	r4, r1, #21
 8002e38:	d508      	bpl.n	8002e4c <HAL_I2C_ER_IRQHandler+0x34>
 8002e3a:	0614      	lsls	r4, r2, #24
 8002e3c:	d506      	bpl.n	8002e4c <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002e3e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002e40:	f044 0408 	orr.w	r4, r4, #8
 8002e44:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e46:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002e4a:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002e4c:	0589      	lsls	r1, r1, #22
 8002e4e:	d508      	bpl.n	8002e62 <HAL_I2C_ER_IRQHandler+0x4a>
 8002e50:	0612      	lsls	r2, r2, #24
 8002e52:	d506      	bpl.n	8002e62 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002e54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002e56:	f042 0202 	orr.w	r2, r2, #2
 8002e5a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002e5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e60:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8002e62:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002e64:	f011 0f0b 	tst.w	r1, #11
 8002e68:	d003      	beq.n	8002e72 <HAL_I2C_ER_IRQHandler+0x5a>
}
 8002e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8002e6e:	f7ff be67 	b.w	8002b40 <I2C_ITError>
}
 8002e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002e78:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002e7a:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 8002e7c:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002e82:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002e84:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e86:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e8a:	2b60      	cmp	r3, #96	; 0x60
 8002e8c:	d105      	bne.n	8002e9a <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e8e:	2320      	movs	r3, #32
 8002e90:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e94:	f7ff fe53 	bl	8002b3e <HAL_I2C_AbortCpltCallback>
 8002e98:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 8002e9a:	f7ff fe4f 	bl	8002b3c <HAL_I2C_ErrorCallback>
 8002e9e:	bd08      	pop	{r3, pc}

08002ea0 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ea0:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	2a20      	cmp	r2, #32
{
 8002ea8:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eaa:	d11d      	bne.n	8002ee8 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eac:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d019      	beq.n	8002ee8 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb4:	2324      	movs	r3, #36	; 0x24
 8002eb6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eba:	6803      	ldr	r3, [r0, #0]
 8002ebc:	681c      	ldr	r4, [r3, #0]
 8002ebe:	f024 0401 	bic.w	r4, r4, #1
 8002ec2:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ec4:	681c      	ldr	r4, [r3, #0]
 8002ec6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8002eca:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ecc:	681c      	ldr	r4, [r3, #0]
 8002ece:	4321      	orrs	r1, r4
 8002ed0:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ed2:	6819      	ldr	r1, [r3, #0]
 8002ed4:	f041 0101 	orr.w	r1, r1, #1
 8002ed8:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eda:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002edc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002ee0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2002      	movs	r0, #2
  }
}
 8002eea:	bd10      	pop	{r4, pc}

08002eec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002eec:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eee:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8002ef2:	b2e4      	uxtb	r4, r4
 8002ef4:	2c20      	cmp	r4, #32
 8002ef6:	d11c      	bne.n	8002f32 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ef8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d018      	beq.n	8002f32 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f00:	2324      	movs	r3, #36	; 0x24
 8002f02:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f06:	6803      	ldr	r3, [r0, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	f022 0201 	bic.w	r2, r2, #1
 8002f0e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f10:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f12:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f16:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f1a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f24:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002f26:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f2a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002f2e:	4618      	mov	r0, r3
 8002f30:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8002f32:	2002      	movs	r0, #2
  }
}
 8002f34:	bd10      	pop	{r4, pc}

08002f36 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002f36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f3a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002f3c:	6804      	ldr	r4, [r0, #0]
 8002f3e:	684f      	ldr	r7, [r1, #4]
 8002f40:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002f42:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 8002f46:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f4a:	3284      	adds	r2, #132	; 0x84
 8002f4c:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002f4e:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002f52:	6858      	ldr	r0, [r3, #4]
 8002f54:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8002f58:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002f5a:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002f5c:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002f60:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 8002f64:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 8002f66:	4430      	add	r0, r6
 8002f68:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002f6c:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 8002f6e:	68e0      	ldr	r0, [r4, #12]
 8002f70:	68cd      	ldr	r5, [r1, #12]
 8002f72:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8002f76:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002f78:	6898      	ldr	r0, [r3, #8]
 8002f7a:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8002f7e:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8002f80:	68e6      	ldr	r6, [r4, #12]
 8002f82:	6888      	ldr	r0, [r1, #8]
 8002f84:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8002f88:	3001      	adds	r0, #1
 8002f8a:	4430      	add	r0, r6
 8002f8c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002f90:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002f92:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002f94:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002f96:	f020 0007 	bic.w	r0, r0, #7
 8002f9a:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002f9c:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002fa0:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002fa2:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8002fa4:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 8002fa8:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8002fac:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8002fb0:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8002fb4:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8002fb8:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8002fbc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8002fc0:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002fc2:	6958      	ldr	r0, [r3, #20]
 8002fc4:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002fc8:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002fca:	6948      	ldr	r0, [r1, #20]
 8002fcc:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002fce:	69d8      	ldr	r0, [r3, #28]
 8002fd0:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8002fd4:	f020 0007 	bic.w	r0, r0, #7
 8002fd8:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002fda:	6a08      	ldr	r0, [r1, #32]
 8002fdc:	69cd      	ldr	r5, [r1, #28]
 8002fde:	4305      	orrs	r5, r0
 8002fe0:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002fe2:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002fe4:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002fe6:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002fea:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002fec:	b31e      	cbz	r6, 8003036 <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002fee:	2e01      	cmp	r6, #1
 8002ff0:	d023      	beq.n	800303a <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002ff2:	1eb0      	subs	r0, r6, #2
 8002ff4:	2802      	cmp	r0, #2
 8002ff6:	d922      	bls.n	800303e <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002ff8:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2002      	moveq	r0, #2
 8002ffe:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003000:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003002:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8003006:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003008:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800300a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800300c:	eba7 070e 	sub.w	r7, r7, lr
 8003010:	4345      	muls	r5, r0
 8003012:	4378      	muls	r0, r7
 8003014:	3003      	adds	r0, #3
 8003016:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800301a:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800301c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800301e:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8003022:	f020 0007 	bic.w	r0, r0, #7
 8003026:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003028:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800302a:	58a3      	ldr	r3, [r4, r2]
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	50a3      	str	r3, [r4, r2]
 8003032:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 8003036:	2004      	movs	r0, #4
 8003038:	e7e2      	b.n	8003000 <LTDC_SetConfig+0xca>
    tmp = 3;
 800303a:	2003      	movs	r0, #3
 800303c:	e7e0      	b.n	8003000 <LTDC_SetConfig+0xca>
    tmp = 2;
 800303e:	2002      	movs	r0, #2
 8003040:	e7de      	b.n	8003000 <LTDC_SetConfig+0xca>
	...

08003044 <HAL_LTDC_Init>:
{
 8003044:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 8003046:	4604      	mov	r4, r0
 8003048:	2800      	cmp	r0, #0
 800304a:	d063      	beq.n	8003114 <HAL_LTDC_Init+0xd0>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 800304c:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8003050:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003054:	b91b      	cbnz	r3, 800305e <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8003056:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800305a:	f01c fb43 	bl	801f6e4 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800305e:	2302      	movs	r3, #2
 8003060:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003064:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003066:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800306e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003070:	6862      	ldr	r2, [r4, #4]
 8003072:	6999      	ldr	r1, [r3, #24]
 8003074:	4302      	orrs	r2, r0
 8003076:	68e0      	ldr	r0, [r4, #12]
 8003078:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800307a:	6920      	ldr	r0, [r4, #16]
 800307c:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800307e:	430a      	orrs	r2, r1
 8003080:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	4924      	ldr	r1, [pc, #144]	; (8003118 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16);
 8003086:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003088:	400a      	ands	r2, r1
 800308a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800308c:	689a      	ldr	r2, [r3, #8]
 800308e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003092:	69a0      	ldr	r0, [r4, #24]
 8003094:	4302      	orrs	r2, r0
 8003096:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003098:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 800309a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800309c:	400a      	ands	r2, r1
 800309e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80030a6:	6a20      	ldr	r0, [r4, #32]
 80030a8:	4302      	orrs	r2, r0
 80030aa:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80030ac:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 80030ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80030b0:	400a      	ands	r2, r1
 80030b2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80030ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80030bc:	4302      	orrs	r2, r0
 80030be:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	4011      	ands	r1, r2
 80030c4:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80030c6:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 80030c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80030ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80030ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80030d0:	430a      	orrs	r2, r1
 80030d2:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80030d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 80030d6:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 80030da:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80030de:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 80030e2:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80030e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030e6:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80030ea:	430a      	orrs	r2, r1
 80030ec:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80030f0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80030f4:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80030f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030f8:	f042 0206 	orr.w	r2, r2, #6
 80030fc:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80030fe:	699a      	ldr	r2, [r3, #24]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003106:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8003108:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800310a:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800310e:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8003112:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003114:	2001      	movs	r0, #1
}
 8003116:	bd38      	pop	{r3, r4, r5, pc}
 8003118:	f000f800 	.word	0xf000f800

0800311c <HAL_LTDC_ConfigLayer>:
{   
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 800311e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003122:	2b01      	cmp	r3, #1
{   
 8003124:	4606      	mov	r6, r0
 8003126:	468e      	mov	lr, r1
 8003128:	4694      	mov	ip, r2
 800312a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 800312e:	d01d      	beq.n	800316c <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003130:	2434      	movs	r4, #52	; 0x34
 8003132:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003134:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003138:	fb04 6402 	mla	r4, r4, r2, r6
 800313c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 800313e:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003140:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 8003142:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003146:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800314a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800314c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800314e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003150:	682b      	ldr	r3, [r5, #0]
 8003152:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003154:	4630      	mov	r0, r6
 8003156:	4662      	mov	r2, ip
 8003158:	4671      	mov	r1, lr
 800315a:	f7ff feec 	bl	8002f36 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800315e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8003160:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003162:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003164:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003168:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 800316c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800316e <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 800316e:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003172:	2b01      	cmp	r3, #1
{
 8003174:	b570      	push	{r4, r5, r6, lr}
 8003176:	f04f 0302 	mov.w	r3, #2
 800317a:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 800317c:	d015      	beq.n	80031aa <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800317e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 8003182:	2334      	movs	r3, #52	; 0x34
 8003184:	4353      	muls	r3, r2
 8003186:	18c6      	adds	r6, r0, r3
  __HAL_LOCK(hltdc);
 8003188:	2501      	movs	r5, #1
 800318a:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 800318e:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003190:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003194:	4401      	add	r1, r0
 8003196:	f7ff fece 	bl	8002f36 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800319a:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 800319c:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800319e:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80031a0:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80031a4:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 80031a8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 80031aa:	4618      	mov	r0, r3
}
 80031ac:	bd70      	pop	{r4, r5, r6, pc}

080031ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031b2:	4604      	mov	r4, r0
{
 80031b4:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 80031b6:	2800      	cmp	r0, #0
 80031b8:	d074      	beq.n	80032a4 <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031ba:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 80031be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031c2:	b91b      	cbnz	r3, 80031cc <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80031c4:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80031c8:	f01c fdea 	bl	801fda0 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80031cc:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80031ce:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 80031d0:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80031d4:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 80031d8:	f004 fa35 	bl	8007646 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 80031dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031de:	466e      	mov	r6, sp
 80031e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80031e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031ea:	e886 0003 	stmia.w	r6, {r0, r1}
 80031ee:	f104 0804 	add.w	r8, r4, #4
 80031f2:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80031f6:	6820      	ldr	r0, [r4, #0]
 80031f8:	f004 f9f0 	bl	80075dc <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80031fc:	2100      	movs	r1, #0
 80031fe:	6820      	ldr	r0, [r4, #0]
 8003200:	f004 fa27 	bl	8007652 <USB_SetCurrentMode>
 8003204:	2100      	movs	r1, #0
 8003206:	4622      	mov	r2, r4
 8003208:	4623      	mov	r3, r4
 800320a:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800320e:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003210:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8003212:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003216:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 800321a:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 800321c:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 800321e:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003222:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 8003226:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003228:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 800322a:	6518      	str	r0, [r3, #80]	; 0x50
 800322c:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 8003230:	d1ef      	bne.n	8003212 <HAL_PCD_Init+0x64>
 8003232:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003234:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 8003236:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 800323a:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 800323c:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 800323e:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003242:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003246:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800324a:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800324e:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 8003252:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 8003256:	d1ee      	bne.n	8003236 <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003258:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800325a:	466e      	mov	r6, sp
 800325c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800325e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003260:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003262:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003266:	e886 0003 	stmia.w	r6, {r0, r1}
 800326a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800326e:	6820      	ldr	r0, [r4, #0]
 8003270:	f004 fa30 	bl	80076d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8003274:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8003276:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800327a:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800327e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003280:	2b01      	cmp	r3, #1
 8003282:	d102      	bne.n	800328a <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003284:	4620      	mov	r0, r4
 8003286:	f000 fc27 	bl	8003ad8 <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 800328a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800328c:	2b01      	cmp	r3, #1
 800328e:	d102      	bne.n	8003296 <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8003290:	4620      	mov	r0, r4
 8003292:	f000 fc34 	bl	8003afe <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003296:	6820      	ldr	r0, [r4, #0]
 8003298:	f004 fcf6 	bl	8007c88 <USB_DevDisconnect>

  return HAL_OK;
 800329c:	2000      	movs	r0, #0
}
 800329e:	b00a      	add	sp, #40	; 0x28
 80032a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80032a4:	2001      	movs	r0, #1
 80032a6:	e7fa      	b.n	800329e <HAL_PCD_Init+0xf0>

080032a8 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 80032a8:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 80032ac:	2b01      	cmp	r3, #1
{
 80032ae:	b510      	push	{r4, lr}
 80032b0:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80032b2:	d00c      	beq.n	80032ce <HAL_PCD_Start+0x26>
 80032b4:	2301      	movs	r3, #1
 80032b6:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 80032ba:	6800      	ldr	r0, [r0, #0]
 80032bc:	f004 fcd8 	bl	8007c70 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80032c0:	6820      	ldr	r0, [r4, #0]
 80032c2:	f004 f9ba 	bl	800763a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80032c6:	2000      	movs	r0, #0
 80032c8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 80032cc:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80032ce:	2002      	movs	r0, #2
}
 80032d0:	bd10      	pop	{r4, pc}
	...

080032d4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80032d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d8:	f8d0 9000 	ldr.w	r9, [r0]
{
 80032dc:	b085      	sub	sp, #20
 80032de:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032e0:	4648      	mov	r0, r9
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 80032e2:	f8d9 8040 	ldr.w	r8, [r9, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80032e6:	f004 fd0a 	bl	8007cfe <USB_GetMode>
 80032ea:	9000      	str	r0, [sp, #0]
 80032ec:	2800      	cmp	r0, #0
 80032ee:	f040 8154 	bne.w	800359a <HAL_PCD_IRQHandler+0x2c6>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80032f2:	6820      	ldr	r0, [r4, #0]
 80032f4:	f004 fcd4 	bl	8007ca0 <USB_ReadInterrupts>
 80032f8:	2800      	cmp	r0, #0
 80032fa:	f000 814e 	beq.w	800359a <HAL_PCD_IRQHandler+0x2c6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80032fe:	6820      	ldr	r0, [r4, #0]
 8003300:	f004 fcce 	bl	8007ca0 <USB_ReadInterrupts>
 8003304:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003306:	bf48      	it	mi
 8003308:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800330a:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800330c:	bf42      	ittt	mi
 800330e:	6953      	ldrmi	r3, [r2, #20]
 8003310:	f003 0302 	andmi.w	r3, r3, #2
 8003314:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003316:	f004 fcc3 	bl	8007ca0 <USB_ReadInterrupts>
 800331a:	f410 2b00 	ands.w	fp, r0, #524288	; 0x80000
 800331e:	d00b      	beq.n	8003338 <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003320:	6820      	ldr	r0, [r4, #0]
 8003322:	f004 fcc1 	bl	8007ca8 <USB_ReadDevAllOutEpInterrupt>
 8003326:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 800332a:	4605      	mov	r5, r0

      while (ep_intr != 0U)
 800332c:	46b2      	mov	sl, r6
      epnum = 0U;
 800332e:	f04f 0b00 	mov.w	fp, #0
      while (ep_intr != 0U)
 8003332:	2d00      	cmp	r5, #0
 8003334:	f040 8134 	bne.w	80035a0 <HAL_PCD_IRQHandler+0x2cc>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003338:	6820      	ldr	r0, [r4, #0]
 800333a:	f004 fcb1 	bl	8007ca0 <USB_ReadInterrupts>
 800333e:	0347      	lsls	r7, r0, #13
 8003340:	d50c      	bpl.n	800335c <HAL_PCD_IRQHandler+0x88>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003342:	6820      	ldr	r0, [r4, #0]
 8003344:	f004 fcb8 	bl	8007cb8 <USB_ReadDevAllInEpInterrupt>
 8003348:	4625      	mov	r5, r4
 800334a:	9001      	str	r0, [sp, #4]
 800334c:	f509 6810 	add.w	r8, r9, #2304	; 0x900

      epnum = 0U;
 8003350:	f04f 0b00 	mov.w	fp, #0

      while (ep_intr != 0U)
 8003354:	9b01      	ldr	r3, [sp, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 8164 	bne.w	8003624 <HAL_PCD_IRQHandler+0x350>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800335c:	6820      	ldr	r0, [r4, #0]
 800335e:	f004 fc9f 	bl	8007ca0 <USB_ReadInterrupts>
 8003362:	2800      	cmp	r0, #0
 8003364:	da15      	bge.n	8003392 <HAL_PCD_IRQHandler+0xbe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003366:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 8003372:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 8003376:	2b01      	cmp	r3, #1
 8003378:	f040 81cf 	bne.w	800371a <HAL_PCD_IRQHandler+0x446>
      {
        hpcd->LPM_State = LPM_L0;
 800337c:	2100      	movs	r1, #0
 800337e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003382:	4620      	mov	r0, r4
 8003384:	f01c fe72 	bl	802006c <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003388:	6822      	ldr	r2, [r4, #0]
 800338a:	6953      	ldr	r3, [r2, #20]
 800338c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003390:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003392:	6820      	ldr	r0, [r4, #0]
 8003394:	f004 fc84 	bl	8007ca0 <USB_ReadInterrupts>
 8003398:	0505      	lsls	r5, r0, #20
 800339a:	d50b      	bpl.n	80033b4 <HAL_PCD_IRQHandler+0xe0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800339c:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 80033a0:	07d8      	lsls	r0, r3, #31
 80033a2:	d502      	bpl.n	80033aa <HAL_PCD_IRQHandler+0xd6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80033a4:	4620      	mov	r0, r4
 80033a6:	f01c fd65 	bl	801fe74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80033aa:	6822      	ldr	r2, [r4, #0]
 80033ac:	6953      	ldr	r3, [r2, #20]
 80033ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b2:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80033b4:	6820      	ldr	r0, [r4, #0]
 80033b6:	f004 fc73 	bl	8007ca0 <USB_ReadInterrupts>
 80033ba:	0101      	lsls	r1, r0, #4
 80033bc:	d514      	bpl.n	80033e8 <HAL_PCD_IRQHandler+0x114>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80033be:	6823      	ldr	r3, [r4, #0]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80033c6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80033c8:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 80033cc:	2a00      	cmp	r2, #0
 80033ce:	f040 81a8 	bne.w	8003722 <HAL_PCD_IRQHandler+0x44e>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80033d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 80033d4:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80033d6:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 80033da:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80033de:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80033e2:	4620      	mov	r0, r4
 80033e4:	f01c fe42 	bl	802006c <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80033e8:	6820      	ldr	r0, [r4, #0]
 80033ea:	f004 fc59 	bl	8007ca0 <USB_ReadInterrupts>
 80033ee:	04c2      	lsls	r2, r0, #19
 80033f0:	d534      	bpl.n	800345c <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033f2:	f509 6500 	add.w	r5, r9, #2048	; 0x800
 80033f6:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80033f8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033fa:	f023 0301 	bic.w	r3, r3, #1
 80033fe:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003400:	2110      	movs	r1, #16
 8003402:	f004 f93d 	bl	8007680 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003406:	6860      	ldr	r0, [r4, #4]
 8003408:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800340c:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003410:	9a00      	ldr	r2, [sp, #0]
 8003412:	4282      	cmp	r2, r0
 8003414:	f040 8189 	bne.w	800372a <HAL_PCD_IRQHandler+0x456>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003418:	69eb      	ldr	r3, [r5, #28]
 800341a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800341e:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003420:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 819a 	beq.w	800375c <HAL_PCD_IRQHandler+0x488>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8003428:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800342c:	f043 030b 	orr.w	r3, r3, #11
 8003430:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8003434:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003436:	f043 030b 	orr.w	r3, r3, #11
 800343a:	646b      	str	r3, [r5, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800343c:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003440:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003442:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003446:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800344a:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800344e:	f004 fc75 	bl	8007d3c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003452:	6822      	ldr	r2, [r4, #0]
 8003454:	6953      	ldr	r3, [r2, #20]
 8003456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800345a:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800345c:	6820      	ldr	r0, [r4, #0]
 800345e:	f004 fc1f 	bl	8007ca0 <USB_ReadInterrupts>
 8003462:	0483      	lsls	r3, r0, #18
 8003464:	d520      	bpl.n	80034a8 <HAL_PCD_IRQHandler+0x1d4>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003466:	6820      	ldr	r0, [r4, #0]
 8003468:	f004 fc4d 	bl	8007d06 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800346c:	6822      	ldr	r2, [r4, #0]
 800346e:	68d3      	ldr	r3, [r2, #12]
 8003470:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8003474:	60d3      	str	r3, [r2, #12]
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 8003476:	2303      	movs	r3, #3
 8003478:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 800347a:	2340      	movs	r3, #64	; 0x40
 800347c:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 800347e:	f000 ff9d 	bl	80043bc <HAL_RCC_GetHCLKFreq>

        if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003482:	4bb3      	ldr	r3, [pc, #716]	; (8003750 <HAL_PCD_IRQHandler+0x47c>)
 8003484:	4ab3      	ldr	r2, [pc, #716]	; (8003754 <HAL_PCD_IRQHandler+0x480>)
 8003486:	4403      	add	r3, r0
 8003488:	4293      	cmp	r3, r2
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	f200 816f 	bhi.w	800376e <HAL_PCD_IRQHandler+0x49a>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003496:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003498:	4620      	mov	r0, r4
 800349a:	f01c fcde 	bl	801fe5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800349e:	6822      	ldr	r2, [r4, #0]
 80034a0:	6953      	ldr	r3, [r2, #20]
 80034a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034a6:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034a8:	6820      	ldr	r0, [r4, #0]
 80034aa:	f004 fbf9 	bl	8007ca0 <USB_ReadInterrupts>
 80034ae:	06c7      	lsls	r7, r0, #27
 80034b0:	d52b      	bpl.n	800350a <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80034b2:	6822      	ldr	r2, [r4, #0]
 80034b4:	6993      	ldr	r3, [r2, #24]
 80034b6:	f023 0310 	bic.w	r3, r3, #16
 80034ba:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 80034bc:	f8d9 5020 	ldr.w	r5, [r9, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034c0:	f3c5 4343 	ubfx	r3, r5, #17, #4
 80034c4:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80034c6:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80034ca:	f040 81a0 	bne.w	800380e <HAL_PCD_IRQHandler+0x53a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80034ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80034d2:	421d      	tst	r5, r3
 80034d4:	d014      	beq.n	8003500 <HAL_PCD_IRQHandler+0x22c>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80034d6:	261c      	movs	r6, #28
 80034d8:	fb06 4607 	mla	r6, r6, r7, r4
 80034dc:	f3c5 150a 	ubfx	r5, r5, #4, #11
 80034e0:	462a      	mov	r2, r5
 80034e2:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 80034e6:	4648      	mov	r0, r9
 80034e8:	f004 fb4c 	bl	8007b84 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034ec:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 80034f0:	442b      	add	r3, r5
 80034f2:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80034f6:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 80034fa:	441d      	add	r5, r3
 80034fc:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003500:	6822      	ldr	r2, [r4, #0]
 8003502:	6993      	ldr	r3, [r2, #24]
 8003504:	f043 0310 	orr.w	r3, r3, #16
 8003508:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800350a:	6820      	ldr	r0, [r4, #0]
 800350c:	f004 fbc8 	bl	8007ca0 <USB_ReadInterrupts>
 8003510:	0706      	lsls	r6, r0, #28
 8003512:	d507      	bpl.n	8003524 <HAL_PCD_IRQHandler+0x250>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003514:	4620      	mov	r0, r4
 8003516:	f01c fc9c 	bl	801fe52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800351a:	6822      	ldr	r2, [r4, #0]
 800351c:	6953      	ldr	r3, [r2, #20]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003524:	6820      	ldr	r0, [r4, #0]
 8003526:	f004 fbbb 	bl	8007ca0 <USB_ReadInterrupts>
 800352a:	02c5      	lsls	r5, r0, #11
 800352c:	d509      	bpl.n	8003542 <HAL_PCD_IRQHandler+0x26e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800352e:	fa5f f18b 	uxtb.w	r1, fp
 8003532:	4620      	mov	r0, r4
 8003534:	f01c fcd4 	bl	801fee0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003538:	6822      	ldr	r2, [r4, #0]
 800353a:	6953      	ldr	r3, [r2, #20]
 800353c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003540:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003542:	6820      	ldr	r0, [r4, #0]
 8003544:	f004 fbac 	bl	8007ca0 <USB_ReadInterrupts>
 8003548:	0280      	lsls	r0, r0, #10
 800354a:	d509      	bpl.n	8003560 <HAL_PCD_IRQHandler+0x28c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800354c:	fa5f f18b 	uxtb.w	r1, fp
 8003550:	4620      	mov	r0, r4
 8003552:	f01c fcc1 	bl	801fed8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	6953      	ldr	r3, [r2, #20]
 800355a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800355e:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003560:	6820      	ldr	r0, [r4, #0]
 8003562:	f004 fb9d 	bl	8007ca0 <USB_ReadInterrupts>
 8003566:	0041      	lsls	r1, r0, #1
 8003568:	d507      	bpl.n	800357a <HAL_PCD_IRQHandler+0x2a6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800356a:	4620      	mov	r0, r4
 800356c:	f01c fcbc 	bl	801fee8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003570:	6822      	ldr	r2, [r4, #0]
 8003572:	6953      	ldr	r3, [r2, #20]
 8003574:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003578:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800357a:	6820      	ldr	r0, [r4, #0]
 800357c:	f004 fb90 	bl	8007ca0 <USB_ReadInterrupts>
 8003580:	0742      	lsls	r2, r0, #29
 8003582:	d50a      	bpl.n	800359a <HAL_PCD_IRQHandler+0x2c6>
    {
      temp = hpcd->Instance->GOTGINT;
 8003584:	6823      	ldr	r3, [r4, #0]
 8003586:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003588:	076b      	lsls	r3, r5, #29
 800358a:	d502      	bpl.n	8003592 <HAL_PCD_IRQHandler+0x2be>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800358c:	4620      	mov	r0, r4
 800358e:	f01c fcaf 	bl	801fef0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	4315      	orrs	r5, r2
 8003598:	605d      	str	r5, [r3, #4]
    }
  }
}
 800359a:	b005      	add	sp, #20
 800359c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 80035a0:	07e9      	lsls	r1, r5, #31
 80035a2:	d52e      	bpl.n	8003602 <HAL_PCD_IRQHandler+0x32e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035a4:	fa5f f28b 	uxtb.w	r2, fp
 80035a8:	4611      	mov	r1, r2
 80035aa:	6820      	ldr	r0, [r4, #0]
 80035ac:	9201      	str	r2, [sp, #4]
 80035ae:	f004 fb8b 	bl	8007cc8 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035b2:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80035b4:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80035b6:	d50d      	bpl.n	80035d4 <HAL_PCD_IRQHandler+0x300>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035b8:	4b67      	ldr	r3, [pc, #412]	; (8003758 <HAL_PCD_IRQHandler+0x484>)
 80035ba:	9a01      	ldr	r2, [sp, #4]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035bc:	2101      	movs	r1, #1
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035be:	4598      	cmp	r8, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80035c0:	f8ca 1008 	str.w	r1, [sl, #8]
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035c4:	d129      	bne.n	800361a <HAL_PCD_IRQHandler+0x346>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 80035c6:	68b1      	ldr	r1, [r6, #8]
 80035c8:	040b      	lsls	r3, r1, #16
 80035ca:	d520      	bpl.n	800360e <HAL_PCD_IRQHandler+0x33a>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 80035cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80035d0:	f8ca 2008 	str.w	r2, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80035d4:	0739      	lsls	r1, r7, #28
 80035d6:	d50f      	bpl.n	80035f8 <HAL_PCD_IRQHandler+0x324>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035d8:	4b5f      	ldr	r3, [pc, #380]	; (8003758 <HAL_PCD_IRQHandler+0x484>)
 80035da:	4598      	cmp	r8, r3
 80035dc:	d106      	bne.n	80035ec <HAL_PCD_IRQHandler+0x318>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 80035de:	68b2      	ldr	r2, [r6, #8]
 80035e0:	0412      	lsls	r2, r2, #16
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 80035e2:	bf44      	itt	mi
 80035e4:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 80035e8:	f8ca 2008 	strmi.w	r2, [sl, #8]
            HAL_PCD_SetupStageCallback(hpcd);
 80035ec:	4620      	mov	r0, r4
 80035ee:	f01c fc19 	bl	801fe24 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80035f2:	2308      	movs	r3, #8
 80035f4:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80035f8:	06fb      	lsls	r3, r7, #27
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80035fa:	bf44      	itt	mi
 80035fc:	2310      	movmi	r3, #16
 80035fe:	f8ca 3008 	strmi.w	r3, [sl, #8]
        epnum++;
 8003602:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 8003606:	086d      	lsrs	r5, r5, #1
 8003608:	f10a 0a20 	add.w	sl, sl, #32
 800360c:	e691      	b.n	8003332 <HAL_PCD_IRQHandler+0x5e>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 5)) != 0U)
 800360e:	68b1      	ldr	r1, [r6, #8]
 8003610:	0688      	lsls	r0, r1, #26
                  CLEAR_OUT_EP_INTR(epnum, (1U << 5));
 8003612:	bf44      	itt	mi
 8003614:	2120      	movmi	r1, #32
 8003616:	f8ca 1008 	strmi.w	r1, [sl, #8]
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800361a:	4611      	mov	r1, r2
 800361c:	4620      	mov	r0, r4
 800361e:	f01c fc07 	bl	801fe30 <HAL_PCD_DataOutStageCallback>
 8003622:	e7d7      	b.n	80035d4 <HAL_PCD_IRQHandler+0x300>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003624:	9b01      	ldr	r3, [sp, #4]
 8003626:	07de      	lsls	r6, r3, #31
 8003628:	d56e      	bpl.n	8003708 <HAL_PCD_IRQHandler+0x434>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800362a:	fa5f fa8b 	uxtb.w	sl, fp
 800362e:	4651      	mov	r1, sl
 8003630:	6820      	ldr	r0, [r4, #0]
 8003632:	f004 fb52 	bl	8007cda <USB_ReadDevInEPInterrupt>
 8003636:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003638:	07f0      	lsls	r0, r6, #31
 800363a:	d510      	bpl.n	800365e <HAL_PCD_IRQHandler+0x38a>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800363c:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 8003640:	2001      	movs	r0, #1
 8003642:	f00b 020f 	and.w	r2, fp, #15
 8003646:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800364a:	ea23 0302 	bic.w	r3, r3, r2
 800364e:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003652:	4651      	mov	r1, sl
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003654:	f8c8 0008 	str.w	r0, [r8, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003658:	4620      	mov	r0, r4
 800365a:	f01c fbf2 	bl	801fe42 <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800365e:	0731      	lsls	r1, r6, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003660:	bf44      	itt	mi
 8003662:	2308      	movmi	r3, #8
 8003664:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003668:	06f2      	lsls	r2, r6, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800366a:	bf44      	itt	mi
 800366c:	2310      	movmi	r3, #16
 800366e:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003672:	0673      	lsls	r3, r6, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003674:	bf44      	itt	mi
 8003676:	2340      	movmi	r3, #64	; 0x40
 8003678:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800367c:	07b7      	lsls	r7, r6, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800367e:	bf44      	itt	mi
 8003680:	2302      	movmi	r3, #2
 8003682:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003686:	0636      	lsls	r6, r6, #24
 8003688:	d53e      	bpl.n	8003708 <HAL_PCD_IRQHandler+0x434>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800368a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800368c:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 800368e:	42b3      	cmp	r3, r6
 8003690:	d83a      	bhi.n	8003708 <HAL_PCD_IRQHandler+0x434>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8003692:	1af6      	subs	r6, r6, r3
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8003694:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003696:	6822      	ldr	r2, [r4, #0]
 8003698:	9202      	str	r2, [sp, #8]
  len32b = (len + 3U) / 4U;
 800369a:	429e      	cmp	r6, r3
 800369c:	bf28      	it	cs
 800369e:	461e      	movcs	r6, r3

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80036a0:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 80036a4:	3603      	adds	r6, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80036a6:	eb03 134b 	add.w	r3, r3, fp, lsl #5
  len32b = (len + 3U) / 4U;
 80036aa:	08b6      	lsrs	r6, r6, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 80036ac:	9303      	str	r3, [sp, #12]
 80036ae:	9b03      	ldr	r3, [sp, #12]
 80036b0:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	42b3      	cmp	r3, r6
 80036b8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 80036ba:	d923      	bls.n	8003704 <HAL_PCD_IRQHandler+0x430>
 80036bc:	429f      	cmp	r7, r3
 80036be:	d921      	bls.n	8003704 <HAL_PCD_IRQHandler+0x430>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80036c0:	b967      	cbnz	r7, 80036dc <HAL_PCD_IRQHandler+0x408>
  }

  if (ep->xfer_len <= ep->xfer_count)
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036c2:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 80036c4:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036c6:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 80036ca:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 80036ce:	fa02 f20b 	lsl.w	r2, r2, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80036d2:	ea23 0302 	bic.w	r3, r3, r2
 80036d6:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 80036da:	e015      	b.n	8003708 <HAL_PCD_IRQHandler+0x434>
    len = ep->xfer_len - ep->xfer_count;
 80036dc:	1aff      	subs	r7, r7, r3
 80036de:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80036e0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80036e2:	9802      	ldr	r0, [sp, #8]
 80036e4:	429f      	cmp	r7, r3
 80036e6:	bf28      	it	cs
 80036e8:	461f      	movcs	r7, r3
 80036ea:	b2bb      	uxth	r3, r7
 80036ec:	4652      	mov	r2, sl
 80036ee:	f004 f973 	bl	80079d8 <USB_WritePacket>
    ep->xfer_buff  += len;
 80036f2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80036f4:	443b      	add	r3, r7
 80036f6:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 80036f8:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 80036fa:	1cfe      	adds	r6, r7, #3
    ep->xfer_count += len;
 80036fc:	441f      	add	r7, r3
    len32b = (len + 3U) / 4U;
 80036fe:	08b6      	lsrs	r6, r6, #2
    ep->xfer_count += len;
 8003700:	656f      	str	r7, [r5, #84]	; 0x54
 8003702:	e7d4      	b.n	80036ae <HAL_PCD_IRQHandler+0x3da>
  if (ep->xfer_len <= ep->xfer_count)
 8003704:	429f      	cmp	r7, r3
 8003706:	d9dc      	bls.n	80036c2 <HAL_PCD_IRQHandler+0x3ee>
        ep_intr >>= 1U;
 8003708:	9b01      	ldr	r3, [sp, #4]
 800370a:	085b      	lsrs	r3, r3, #1
        epnum++;
 800370c:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 8003710:	9301      	str	r3, [sp, #4]
 8003712:	351c      	adds	r5, #28
 8003714:	f108 0820 	add.w	r8, r8, #32
 8003718:	e61c      	b.n	8003354 <HAL_PCD_IRQHandler+0x80>
        HAL_PCD_ResumeCallback(hpcd);
 800371a:	4620      	mov	r0, r4
 800371c:	f01c fbc2 	bl	801fea4 <HAL_PCD_ResumeCallback>
 8003720:	e632      	b.n	8003388 <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 8003722:	4620      	mov	r0, r4
 8003724:	f01c fba6 	bl	801fe74 <HAL_PCD_SuspendCallback>
 8003728:	e65e      	b.n	80033e8 <HAL_PCD_IRQHandler+0x114>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800372a:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003732:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003734:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003738:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800373c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003740:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003744:	9a00      	ldr	r2, [sp, #0]
 8003746:	3201      	adds	r2, #1
 8003748:	9200      	str	r2, [sp, #0]
 800374a:	3320      	adds	r3, #32
 800374c:	e660      	b.n	8003410 <HAL_PCD_IRQHandler+0x13c>
 800374e:	bf00      	nop
 8003750:	ff275340 	.word	0xff275340
 8003754:	000c34ff 	.word	0x000c34ff
 8003758:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 800375c:	696b      	ldr	r3, [r5, #20]
 800375e:	f043 030b 	orr.w	r3, r3, #11
 8003762:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 8003764:	692b      	ldr	r3, [r5, #16]
 8003766:	f043 030b 	orr.w	r3, r3, #11
 800376a:	612b      	str	r3, [r5, #16]
 800376c:	e666      	b.n	800343c <HAL_PCD_IRQHandler+0x168>
        else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800376e:	4a2f      	ldr	r2, [pc, #188]	; (800382c <HAL_PCD_IRQHandler+0x558>)
 8003770:	492f      	ldr	r1, [pc, #188]	; (8003830 <HAL_PCD_IRQHandler+0x55c>)
 8003772:	4402      	add	r2, r0
 8003774:	428a      	cmp	r2, r1
 8003776:	d803      	bhi.n	8003780 <HAL_PCD_IRQHandler+0x4ac>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800377e:	e68a      	b.n	8003496 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003780:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8003784:	492b      	ldr	r1, [pc, #172]	; (8003834 <HAL_PCD_IRQHandler+0x560>)
 8003786:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 800378a:	428a      	cmp	r2, r1
 800378c:	d803      	bhi.n	8003796 <HAL_PCD_IRQHandler+0x4c2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8003794:	e67f      	b.n	8003496 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003796:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 800379a:	4927      	ldr	r1, [pc, #156]	; (8003838 <HAL_PCD_IRQHandler+0x564>)
 800379c:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 80037a0:	428a      	cmp	r2, r1
 80037a2:	d803      	bhi.n	80037ac <HAL_PCD_IRQHandler+0x4d8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80037aa:	e674      	b.n	8003496 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80037ac:	4a23      	ldr	r2, [pc, #140]	; (800383c <HAL_PCD_IRQHandler+0x568>)
 80037ae:	4924      	ldr	r1, [pc, #144]	; (8003840 <HAL_PCD_IRQHandler+0x56c>)
 80037b0:	4402      	add	r2, r0
 80037b2:	428a      	cmp	r2, r1
 80037b4:	d803      	bhi.n	80037be <HAL_PCD_IRQHandler+0x4ea>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 80037bc:	e66b      	b.n	8003496 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80037be:	4a21      	ldr	r2, [pc, #132]	; (8003844 <HAL_PCD_IRQHandler+0x570>)
 80037c0:	4921      	ldr	r1, [pc, #132]	; (8003848 <HAL_PCD_IRQHandler+0x574>)
 80037c2:	4402      	add	r2, r0
 80037c4:	428a      	cmp	r2, r1
 80037c6:	d803      	bhi.n	80037d0 <HAL_PCD_IRQHandler+0x4fc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80037ce:	e662      	b.n	8003496 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80037d0:	4a1e      	ldr	r2, [pc, #120]	; (800384c <HAL_PCD_IRQHandler+0x578>)
 80037d2:	491f      	ldr	r1, [pc, #124]	; (8003850 <HAL_PCD_IRQHandler+0x57c>)
 80037d4:	4402      	add	r2, r0
 80037d6:	428a      	cmp	r2, r1
 80037d8:	d803      	bhi.n	80037e2 <HAL_PCD_IRQHandler+0x50e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 80037e0:	e659      	b.n	8003496 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037e2:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 80037e6:	491b      	ldr	r1, [pc, #108]	; (8003854 <HAL_PCD_IRQHandler+0x580>)
 80037e8:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 80037ec:	428a      	cmp	r2, r1
 80037ee:	d803      	bhi.n	80037f8 <HAL_PCD_IRQHandler+0x524>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037f6:	e64e      	b.n	8003496 <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037f8:	4a17      	ldr	r2, [pc, #92]	; (8003858 <HAL_PCD_IRQHandler+0x584>)
 80037fa:	4918      	ldr	r1, [pc, #96]	; (800385c <HAL_PCD_IRQHandler+0x588>)
 80037fc:	4402      	add	r2, r0
 80037fe:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	bf94      	ite	ls
 8003804:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003808:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 800380c:	e643      	b.n	8003496 <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800380e:	2b06      	cmp	r3, #6
 8003810:	f47f ae76 	bne.w	8003500 <HAL_PCD_IRQHandler+0x22c>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003814:	2208      	movs	r2, #8
 8003816:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800381a:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800381c:	261c      	movs	r6, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800381e:	f004 f9b1 	bl	8007b84 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003822:	fb06 4607 	mla	r6, r6, r7, r4
 8003826:	f3c5 150a 	ubfx	r5, r5, #4, #11
 800382a:	e664      	b.n	80034f6 <HAL_PCD_IRQHandler+0x222>
 800382c:	ff1b1e40 	.word	0xff1b1e40
 8003830:	000f423f 	.word	0x000f423f
 8003834:	00124f7f 	.word	0x00124f7f
 8003838:	0013d61f 	.word	0x0013d61f
 800383c:	fee5b660 	.word	0xfee5b660
 8003840:	0016e35f 	.word	0x0016e35f
 8003844:	feced300 	.word	0xfeced300
 8003848:	001b773f 	.word	0x001b773f
 800384c:	feb35bc0 	.word	0xfeb35bc0
 8003850:	002191bf 	.word	0x002191bf
 8003854:	0038751f 	.word	0x0038751f
 8003858:	fe5954e0 	.word	0xfe5954e0
 800385c:	00419cdf 	.word	0x00419cdf

08003860 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003860:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003864:	2a01      	cmp	r2, #1
{
 8003866:	b510      	push	{r4, lr}
 8003868:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800386a:	d00b      	beq.n	8003884 <HAL_PCD_SetAddress+0x24>
 800386c:	2201      	movs	r2, #1
 800386e:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003872:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003876:	6800      	ldr	r0, [r0, #0]
 8003878:	f004 f9ea 	bl	8007c50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800387c:	2000      	movs	r0, #0
 800387e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003882:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003884:	2002      	movs	r0, #2
}
 8003886:	bd10      	pop	{r4, pc}

08003888 <HAL_PCD_EP_Open>:
{
 8003888:	b570      	push	{r4, r5, r6, lr}
 800388a:	4604      	mov	r4, r0
 800388c:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003890:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003894:	f04f 061c 	mov.w	r6, #28
 8003898:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 800389a:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 800389e:	bf15      	itete	ne
 80038a0:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 80038a4:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80038a8:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 80038aa:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 80038ae:	bf15      	itete	ne
 80038b0:	2601      	movne	r6, #1
    ep->is_in = 0U;
 80038b2:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 80038b4:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 80038b8:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 80038bc:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 80038be:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 80038c0:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 80038c2:	b2c0      	uxtb	r0, r0
 80038c4:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 80038c6:	b102      	cbz	r2, 80038ca <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 80038c8:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 80038ca:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 80038cc:	bf04      	itt	eq
 80038ce:	2300      	moveq	r3, #0
 80038d0:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80038d2:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d009      	beq.n	80038ee <HAL_PCD_EP_Open+0x66>
 80038da:	2301      	movs	r3, #1
 80038dc:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80038e0:	6820      	ldr	r0, [r4, #0]
 80038e2:	f003 ff93 	bl	800780c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038e6:	2000      	movs	r0, #0
 80038e8:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 80038ec:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 80038ee:	2002      	movs	r0, #2
}
 80038f0:	bd70      	pop	{r4, r5, r6, pc}

080038f2 <HAL_PCD_EP_Close>:
{
 80038f2:	f001 030f 	and.w	r3, r1, #15
 80038f6:	b2da      	uxtb	r2, r3
 80038f8:	b510      	push	{r4, lr}
 80038fa:	4604      	mov	r4, r0
 80038fc:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 80038fe:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003902:	fb00 4102 	mla	r1, r0, r2, r4
 8003906:	bf19      	ittee	ne
 8003908:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 800390a:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 800390e:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003912:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003916:	bf15      	itete	ne
 8003918:	2001      	movne	r0, #1
    ep->is_in = 0U;
 800391a:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 800391c:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8003920:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & 0xFU;
 8003924:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003926:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800392a:	2b01      	cmp	r3, #1
 800392c:	d009      	beq.n	8003942 <HAL_PCD_EP_Close+0x50>
 800392e:	2301      	movs	r3, #1
 8003930:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003934:	6820      	ldr	r0, [r4, #0]
 8003936:	f003 ffab 	bl	8007890 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800393a:	2000      	movs	r0, #0
 800393c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003940:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003942:	2002      	movs	r0, #2
}
 8003944:	bd10      	pop	{r4, pc}

08003946 <HAL_PCD_EP_Receive>:
{
 8003946:	b538      	push	{r3, r4, r5, lr}
 8003948:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 800394c:	241c      	movs	r4, #28
 800394e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003952:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003956:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800395a:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 800395e:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003960:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003964:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003968:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 800396c:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003970:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003972:	b91d      	cbnz	r5, 800397c <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003974:	f003 ffbe 	bl	80078f4 <USB_EP0StartXfer>
}
 8003978:	2000      	movs	r0, #0
 800397a:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800397c:	f004 f83c 	bl	80079f8 <USB_EPStartXfer>
 8003980:	e7fa      	b.n	8003978 <HAL_PCD_EP_Receive+0x32>

08003982 <HAL_PCD_EP_Transmit>:
{
 8003982:	b538      	push	{r3, r4, r5, lr}
 8003984:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003988:	241c      	movs	r4, #28
 800398a:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 800398e:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003992:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8003994:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800399a:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 800399c:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 800399e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & 0xFU;
 80039a2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80039a6:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 80039a8:	b91d      	cbnz	r5, 80039b2 <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80039aa:	f003 ffa3 	bl	80078f4 <USB_EP0StartXfer>
}
 80039ae:	2000      	movs	r0, #0
 80039b0:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80039b2:	f004 f821 	bl	80079f8 <USB_EPStartXfer>
 80039b6:	e7fa      	b.n	80039ae <HAL_PCD_EP_Transmit+0x2c>

080039b8 <HAL_PCD_EP_SetStall>:
{
 80039b8:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 80039ba:	6843      	ldr	r3, [r0, #4]
 80039bc:	f001 050f 	and.w	r5, r1, #15
 80039c0:	429d      	cmp	r5, r3
{
 80039c2:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 80039c4:	d82d      	bhi.n	8003a22 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 80039c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80039ca:	f04f 021c 	mov.w	r2, #28
 80039ce:	d01e      	beq.n	8003a0e <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 80039d0:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80039d4:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 80039d8:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 80039da:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 80039dc:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 80039e0:	2201      	movs	r2, #1
 80039e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 80039e4:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 80039e6:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 80039ea:	4291      	cmp	r1, r2
 80039ec:	d01b      	beq.n	8003a26 <HAL_PCD_EP_SetStall+0x6e>
 80039ee:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039f2:	4619      	mov	r1, r3
 80039f4:	6820      	ldr	r0, [r4, #0]
 80039f6:	f004 f8d3 	bl	8007ba0 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 80039fa:	b925      	cbnz	r5, 8003a06 <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80039fc:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003a00:	6820      	ldr	r0, [r4, #0]
 8003a02:	f004 f99b 	bl	8007d3c <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8003a06:	2000      	movs	r0, #0
 8003a08:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003a0c:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003a0e:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8003a12:	fb02 0101 	mla	r1, r2, r1, r0
 8003a16:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003a18:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003a1c:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8003a20:	e7de      	b.n	80039e0 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8003a22:	2001      	movs	r0, #1
 8003a24:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003a26:	2002      	movs	r0, #2
}
 8003a28:	bd38      	pop	{r3, r4, r5, pc}

08003a2a <HAL_PCD_EP_ClrStall>:
{
 8003a2a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a2c:	6843      	ldr	r3, [r0, #4]
 8003a2e:	f001 020f 	and.w	r2, r1, #15
 8003a32:	429a      	cmp	r2, r3
{
 8003a34:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a36:	d826      	bhi.n	8003a86 <HAL_PCD_EP_ClrStall+0x5c>
 8003a38:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003a3a:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003a3e:	fb03 0102 	mla	r1, r3, r2, r0
 8003a42:	bf19      	ittee	ne
 8003a44:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003a46:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003a4a:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8003a4e:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8003a52:	bf14      	ite	ne
 8003a54:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003a56:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8003a58:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003a5c:	bf14      	ite	ne
 8003a5e:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 8003a62:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003a66:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8003a68:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003a6a:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d00b      	beq.n	8003a8a <HAL_PCD_EP_ClrStall+0x60>
 8003a72:	2301      	movs	r3, #1
 8003a74:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a78:	6820      	ldr	r0, [r4, #0]
 8003a7a:	f004 f8be 	bl	8007bfa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a7e:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003a82:	4628      	mov	r0, r5
 8003a84:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003a86:	2001      	movs	r0, #1
 8003a88:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003a8a:	2002      	movs	r0, #2
}
 8003a8c:	bd38      	pop	{r3, r4, r5, pc}

08003a8e <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a8e:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a90:	6804      	ldr	r4, [r0, #0]
 8003a92:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003a94:	b921      	cbnz	r1, 8003aa0 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003a9a:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003a9c:	2000      	movs	r0, #0
 8003a9e:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003aa0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003aa2:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003aa4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003aa8:	2000      	movs	r0, #0
 8003aaa:	1c46      	adds	r6, r0, #1
 8003aac:	b2c0      	uxtb	r0, r0
 8003aae:	4285      	cmp	r5, r0
 8003ab0:	d806      	bhi.n	8003ac0 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ab2:	313f      	adds	r1, #63	; 0x3f
 8003ab4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003abc:	6063      	str	r3, [r4, #4]
 8003abe:	e7ed      	b.n	8003a9c <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ac0:	3040      	adds	r0, #64	; 0x40
 8003ac2:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003ac6:	6840      	ldr	r0, [r0, #4]
 8003ac8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003acc:	4630      	mov	r0, r6
 8003ace:	e7ec      	b.n	8003aaa <HAL_PCDEx_SetTxFiFo+0x1c>

08003ad0 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003ad0:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003ad2:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003ad4:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ad8:	6802      	ldr	r2, [r0, #0]
{
 8003ada:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8003adc:	2101      	movs	r1, #1
 8003ade:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ae8:	6993      	ldr	r3, [r2, #24]
 8003aea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003aee:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003af0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af6:	f043 0303 	orr.w	r3, r3, #3
 8003afa:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003afc:	4770      	bx	lr

08003afe <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003afe:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8003b00:	2301      	movs	r3, #1
 8003b02:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8003b06:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0c:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8003b0e:	2000      	movs	r0, #0
 8003b10:	4770      	bx	lr
	...

08003b14 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b14:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <HAL_PWREx_GetVoltageRange+0x20>)
 8003b16:	6818      	ldr	r0, [r3, #0]
 8003b18:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003b1c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003b20:	d007      	beq.n	8003b32 <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b26:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003b2a:	bf14      	ite	ne
 8003b2c:	f44f 7000 	movne.w	r0, #512	; 0x200
 8003b30:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003b32:	4770      	bx	lr
 8003b34:	40007000 	.word	0x40007000

08003b38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b38:	4b29      	ldr	r3, [pc, #164]	; (8003be0 <HAL_PWREx_ControlVoltageScaling+0xa8>)

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b3a:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b3c:	bb28      	cbnz	r0, 8003b8a <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b3e:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003b42:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b46:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003b4a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b52:	d119      	bne.n	8003b88 <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003b5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b5e:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003b60:	4a20      	ldr	r2, [pc, #128]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003b62:	6811      	ldr	r1, [r2, #0]
 8003b64:	2232      	movs	r2, #50	; 0x32
 8003b66:	434a      	muls	r2, r1
 8003b68:	491f      	ldr	r1, [pc, #124]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003b6a:	fbb2 f2f1 	udiv	r2, r2, r1
 8003b6e:	4619      	mov	r1, r3
 8003b70:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b72:	6958      	ldr	r0, [r3, #20]
 8003b74:	0540      	lsls	r0, r0, #21
 8003b76:	d500      	bpl.n	8003b7a <HAL_PWREx_ControlVoltageScaling+0x42>
 8003b78:	b922      	cbnz	r2, 8003b84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b7a:	694b      	ldr	r3, [r1, #20]
 8003b7c:	055b      	lsls	r3, r3, #21
 8003b7e:	d52d      	bpl.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 8003b80:	2003      	movs	r0, #3
 8003b82:	4770      	bx	lr
        wait_loop_index--;
 8003b84:	3a01      	subs	r2, #1
 8003b86:	e7f4      	b.n	8003b72 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003b88:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b8a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003b8e:	d120      	bne.n	8003bd2 <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b90:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003b94:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b98:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ba4:	d11a      	bne.n	8003bdc <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003bac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb0:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003bb2:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003bb4:	6811      	ldr	r1, [r2, #0]
 8003bb6:	2232      	movs	r2, #50	; 0x32
 8003bb8:	434a      	muls	r2, r1
 8003bba:	490b      	ldr	r1, [pc, #44]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003bbc:	fbb2 f2f1 	udiv	r2, r2, r1
 8003bc0:	4619      	mov	r1, r3
 8003bc2:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bc4:	6958      	ldr	r0, [r3, #20]
 8003bc6:	0540      	lsls	r0, r0, #21
 8003bc8:	d5d7      	bpl.n	8003b7a <HAL_PWREx_ControlVoltageScaling+0x42>
 8003bca:	2a00      	cmp	r2, #0
 8003bcc:	d0d5      	beq.n	8003b7a <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 8003bce:	3a01      	subs	r2, #1
 8003bd0:	e7f8      	b.n	8003bc4 <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bd2:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003bd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bda:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bdc:	2000      	movs	r0, #0
}
 8003bde:	4770      	bx	lr
 8003be0:	40007000 	.word	0x40007000
 8003be4:	20000ed4 	.word	0x20000ed4
 8003be8:	000f4240 	.word	0x000f4240

08003bec <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003bec:	4a02      	ldr	r2, [pc, #8]	; (8003bf8 <HAL_PWREx_EnableVddUSB+0xc>)
 8003bee:	6853      	ldr	r3, [r2, #4]
 8003bf0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bf4:	6053      	str	r3, [r2, #4]
 8003bf6:	4770      	bx	lr
 8003bf8:	40007000 	.word	0x40007000

08003bfc <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003bfc:	4a02      	ldr	r2, [pc, #8]	; (8003c08 <HAL_PWREx_EnableVddIO2+0xc>)
 8003bfe:	6853      	ldr	r3, [r2, #4]
 8003c00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c04:	6053      	str	r3, [r2, #4]
 8003c06:	4770      	bx	lr
 8003c08:	40007000 	.word	0x40007000

08003c0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003c0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c0e:	4d1c      	ldr	r5, [pc, #112]	; (8003c80 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8003c10:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c12:	00da      	lsls	r2, r3, #3
{
 8003c14:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c16:	d518      	bpl.n	8003c4a <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c18:	f7ff ff7c 	bl	8003b14 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c1c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003c20:	d123      	bne.n	8003c6a <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c22:	2c80      	cmp	r4, #128	; 0x80
 8003c24:	d928      	bls.n	8003c78 <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c26:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c28:	bf8c      	ite	hi
 8003c2a:	2002      	movhi	r0, #2
 8003c2c:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c2e:	4a15      	ldr	r2, [pc, #84]	; (8003c84 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8003c30:	6813      	ldr	r3, [r2, #0]
 8003c32:	f023 030f 	bic.w	r3, r3, #15
 8003c36:	4303      	orrs	r3, r0
 8003c38:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c3a:	6813      	ldr	r3, [r2, #0]
 8003c3c:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003c40:	1a18      	subs	r0, r3, r0
 8003c42:	bf18      	it	ne
 8003c44:	2001      	movne	r0, #1
 8003c46:	b003      	add	sp, #12
 8003c48:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c50:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c52:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003c5c:	f7ff ff5a 	bl	8003b14 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c60:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c66:	65ab      	str	r3, [r5, #88]	; 0x58
 8003c68:	e7d8      	b.n	8003c1c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8003c6a:	2c7f      	cmp	r4, #127	; 0x7f
 8003c6c:	d806      	bhi.n	8003c7c <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8003c6e:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003c72:	4258      	negs	r0, r3
 8003c74:	4158      	adcs	r0, r3
 8003c76:	e7da      	b.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003c78:	2000      	movs	r0, #0
 8003c7a:	e7d8      	b.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c7c:	2002      	movs	r0, #2
 8003c7e:	e7d6      	b.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003c80:	40021000 	.word	0x40021000
 8003c84:	40022000 	.word	0x40022000

08003c88 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c88:	4b23      	ldr	r3, [pc, #140]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x90>)
 8003c8a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c8c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c8e:	f012 020c 	ands.w	r2, r2, #12
 8003c92:	d005      	beq.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x18>
 8003c94:	2a0c      	cmp	r2, #12
 8003c96:	d115      	bne.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c98:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c9c:	2901      	cmp	r1, #1
 8003c9e:	d118      	bne.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ca0:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003ca2:	481e      	ldr	r0, [pc, #120]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x94>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ca4:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ca6:	bf55      	itete	pl
 8003ca8:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cac:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cae:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cb2:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003cb6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cba:	b112      	cbz	r2, 8003cc2 <HAL_RCC_GetSysClockFreq+0x3a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cbc:	2a0c      	cmp	r2, #12
 8003cbe:	d009      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x4c>
 8003cc0:	2000      	movs	r0, #0
}
 8003cc2:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cc4:	2a04      	cmp	r2, #4
 8003cc6:	d024      	beq.n	8003d12 <HAL_RCC_GetSysClockFreq+0x8a>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cc8:	2a08      	cmp	r2, #8
 8003cca:	4815      	ldr	r0, [pc, #84]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ccc:	bf18      	it	ne
 8003cce:	2000      	movne	r0, #0
 8003cd0:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003cd2:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cd4:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cd6:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cd8:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cdc:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 8003ce0:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ce2:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x6c>
 8003ce8:	2903      	cmp	r1, #3
 8003cea:	d003      	beq.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x6c>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cec:	68d9      	ldr	r1, [r3, #12]
 8003cee:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8003cf2:	e003      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cf4:	68d9      	ldr	r1, [r3, #12]
 8003cf6:	480a      	ldr	r0, [pc, #40]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003cf8:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cfc:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cfe:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d02:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003d06:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d08:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d0a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003d0c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003d10:	4770      	bx	lr
 8003d12:	4803      	ldr	r0, [pc, #12]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	08031e10 	.word	0x08031e10
 8003d20:	00f42400 	.word	0x00f42400

08003d24 <HAL_RCC_OscConfig>:
{
 8003d24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003d28:	4605      	mov	r5, r0
 8003d2a:	b908      	cbnz	r0, 8003d30 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8003d2c:	2001      	movs	r0, #1
 8003d2e:	e046      	b.n	8003dbe <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d30:	4ca8      	ldr	r4, [pc, #672]	; (8003fd4 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d32:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d34:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d36:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d38:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3a:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d3e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d42:	d572      	bpl.n	8003e2a <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d44:	b11e      	cbz	r6, 8003d4e <HAL_RCC_OscConfig+0x2a>
 8003d46:	2e0c      	cmp	r6, #12
 8003d48:	d151      	bne.n	8003dee <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003d4a:	2f01      	cmp	r7, #1
 8003d4c:	d14f      	bne.n	8003dee <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d4e:	6823      	ldr	r3, [r4, #0]
 8003d50:	0799      	lsls	r1, r3, #30
 8003d52:	d502      	bpl.n	8003d5a <HAL_RCC_OscConfig+0x36>
 8003d54:	69ab      	ldr	r3, [r5, #24]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0e8      	beq.n	8003d2c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d5a:	6823      	ldr	r3, [r4, #0]
 8003d5c:	6a28      	ldr	r0, [r5, #32]
 8003d5e:	071a      	lsls	r2, r3, #28
 8003d60:	bf56      	itet	pl
 8003d62:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003d66:	6823      	ldrmi	r3, [r4, #0]
 8003d68:	091b      	lsrpl	r3, r3, #4
 8003d6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d6e:	4283      	cmp	r3, r0
 8003d70:	d228      	bcs.n	8003dc4 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d72:	f7ff ff4b 	bl	8003c0c <RCC_SetFlashLatencyFromMSIRange>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d1d8      	bne.n	8003d2c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	f043 0308 	orr.w	r3, r3, #8
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	6a2a      	ldr	r2, [r5, #32]
 8003d86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d8e:	6863      	ldr	r3, [r4, #4]
 8003d90:	69ea      	ldr	r2, [r5, #28]
 8003d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003d9a:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d9c:	f7ff ff74 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003da0:	68a3      	ldr	r3, [r4, #8]
 8003da2:	4a8d      	ldr	r2, [pc, #564]	; (8003fd8 <HAL_RCC_OscConfig+0x2b4>)
 8003da4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003da8:	5cd3      	ldrb	r3, [r2, r3]
 8003daa:	f003 031f 	and.w	r3, r3, #31
 8003dae:	40d8      	lsrs	r0, r3
 8003db0:	4b8a      	ldr	r3, [pc, #552]	; (8003fdc <HAL_RCC_OscConfig+0x2b8>)
 8003db2:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8003db4:	2000      	movs	r0, #0
 8003db6:	f7fd f903 	bl	8000fc0 <HAL_InitTick>
        if(status != HAL_OK)
 8003dba:	2800      	cmp	r0, #0
 8003dbc:	d035      	beq.n	8003e2a <HAL_RCC_OscConfig+0x106>
}
 8003dbe:	b003      	add	sp, #12
 8003dc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	f043 0308 	orr.w	r3, r3, #8
 8003dca:	6023      	str	r3, [r4, #0]
 8003dcc:	6823      	ldr	r3, [r4, #0]
 8003dce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dd2:	4303      	orrs	r3, r0
 8003dd4:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dd6:	6863      	ldr	r3, [r4, #4]
 8003dd8:	69ea      	ldr	r2, [r5, #28]
 8003dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003de2:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003de4:	f7ff ff12 	bl	8003c0c <RCC_SetFlashLatencyFromMSIRange>
 8003de8:	2800      	cmp	r0, #0
 8003dea:	d0d7      	beq.n	8003d9c <HAL_RCC_OscConfig+0x78>
 8003dec:	e79e      	b.n	8003d2c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dee:	69ab      	ldr	r3, [r5, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d03a      	beq.n	8003e6a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003dfc:	f7fd f910 	bl	8001020 <HAL_GetTick>
 8003e00:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	079b      	lsls	r3, r3, #30
 8003e06:	d528      	bpl.n	8003e5a <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e08:	6823      	ldr	r3, [r4, #0]
 8003e0a:	f043 0308 	orr.w	r3, r3, #8
 8003e0e:	6023      	str	r3, [r4, #0]
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	6a2a      	ldr	r2, [r5, #32]
 8003e14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e1c:	6863      	ldr	r3, [r4, #4]
 8003e1e:	69ea      	ldr	r2, [r5, #28]
 8003e20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003e28:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2a:	682b      	ldr	r3, [r5, #0]
 8003e2c:	07d9      	lsls	r1, r3, #31
 8003e2e:	d42d      	bmi.n	8003e8c <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e30:	682b      	ldr	r3, [r5, #0]
 8003e32:	079a      	lsls	r2, r3, #30
 8003e34:	d46b      	bmi.n	8003f0e <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e36:	682b      	ldr	r3, [r5, #0]
 8003e38:	0719      	lsls	r1, r3, #28
 8003e3a:	f100 80a0 	bmi.w	8003f7e <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e3e:	682b      	ldr	r3, [r5, #0]
 8003e40:	075a      	lsls	r2, r3, #29
 8003e42:	f100 80cd 	bmi.w	8003fe0 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003e46:	682b      	ldr	r3, [r5, #0]
 8003e48:	069a      	lsls	r2, r3, #26
 8003e4a:	f100 8136 	bmi.w	80040ba <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f040 815c 	bne.w	800410e <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 8003e56:	2000      	movs	r0, #0
 8003e58:	e7b1      	b.n	8003dbe <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e5a:	f7fd f8e1 	bl	8001020 <HAL_GetTick>
 8003e5e:	eba0 0008 	sub.w	r0, r0, r8
 8003e62:	2802      	cmp	r0, #2
 8003e64:	d9cd      	bls.n	8003e02 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 8003e66:	2003      	movs	r0, #3
 8003e68:	e7a9      	b.n	8003dbe <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003e72:	f7fd f8d5 	bl	8001020 <HAL_GetTick>
 8003e76:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e78:	6823      	ldr	r3, [r4, #0]
 8003e7a:	0798      	lsls	r0, r3, #30
 8003e7c:	d5d5      	bpl.n	8003e2a <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e7e:	f7fd f8cf 	bl	8001020 <HAL_GetTick>
 8003e82:	eba0 0008 	sub.w	r0, r0, r8
 8003e86:	2802      	cmp	r0, #2
 8003e88:	d9f6      	bls.n	8003e78 <HAL_RCC_OscConfig+0x154>
 8003e8a:	e7ec      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e8c:	2e08      	cmp	r6, #8
 8003e8e:	d003      	beq.n	8003e98 <HAL_RCC_OscConfig+0x174>
 8003e90:	2e0c      	cmp	r6, #12
 8003e92:	d108      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8003e94:	2f03      	cmp	r7, #3
 8003e96:	d106      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	039b      	lsls	r3, r3, #14
 8003e9c:	d5c8      	bpl.n	8003e30 <HAL_RCC_OscConfig+0x10c>
 8003e9e:	686b      	ldr	r3, [r5, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1c5      	bne.n	8003e30 <HAL_RCC_OscConfig+0x10c>
 8003ea4:	e742      	b.n	8003d2c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ea6:	686b      	ldr	r3, [r5, #4]
 8003ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eac:	d110      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x1ac>
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003eb6:	f7fd f8b3 	bl	8001020 <HAL_GetTick>
 8003eba:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	0398      	lsls	r0, r3, #14
 8003ec0:	d4b6      	bmi.n	8003e30 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ec2:	f7fd f8ad 	bl	8001020 <HAL_GetTick>
 8003ec6:	eba0 0008 	sub.w	r0, r0, r8
 8003eca:	2864      	cmp	r0, #100	; 0x64
 8003ecc:	d9f6      	bls.n	8003ebc <HAL_RCC_OscConfig+0x198>
 8003ece:	e7ca      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed4:	d104      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x1bc>
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003edc:	6023      	str	r3, [r4, #0]
 8003ede:	e7e6      	b.n	8003eae <HAL_RCC_OscConfig+0x18a>
 8003ee0:	6822      	ldr	r2, [r4, #0]
 8003ee2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ee6:	6022      	str	r2, [r4, #0]
 8003ee8:	6822      	ldr	r2, [r4, #0]
 8003eea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003eee:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1e0      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8003ef4:	f7fd f894 	bl	8001020 <HAL_GetTick>
 8003ef8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003efa:	6823      	ldr	r3, [r4, #0]
 8003efc:	0399      	lsls	r1, r3, #14
 8003efe:	d597      	bpl.n	8003e30 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fd f88e 	bl	8001020 <HAL_GetTick>
 8003f04:	eba0 0008 	sub.w	r0, r0, r8
 8003f08:	2864      	cmp	r0, #100	; 0x64
 8003f0a:	d9f6      	bls.n	8003efa <HAL_RCC_OscConfig+0x1d6>
 8003f0c:	e7ab      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f0e:	2e04      	cmp	r6, #4
 8003f10:	d003      	beq.n	8003f1a <HAL_RCC_OscConfig+0x1f6>
 8003f12:	2e0c      	cmp	r6, #12
 8003f14:	d110      	bne.n	8003f38 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 8003f16:	2f02      	cmp	r7, #2
 8003f18:	d10e      	bne.n	8003f38 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	055a      	lsls	r2, r3, #21
 8003f1e:	d503      	bpl.n	8003f28 <HAL_RCC_OscConfig+0x204>
 8003f20:	68eb      	ldr	r3, [r5, #12]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f43f af02 	beq.w	8003d2c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f28:	6863      	ldr	r3, [r4, #4]
 8003f2a:	692a      	ldr	r2, [r5, #16]
 8003f2c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003f30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003f34:	6063      	str	r3, [r4, #4]
 8003f36:	e77e      	b.n	8003e36 <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f38:	68eb      	ldr	r3, [r5, #12]
 8003f3a:	b17b      	cbz	r3, 8003f5c <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8003f3c:	6823      	ldr	r3, [r4, #0]
 8003f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f42:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f44:	f7fd f86c 	bl	8001020 <HAL_GetTick>
 8003f48:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	055b      	lsls	r3, r3, #21
 8003f4e:	d4eb      	bmi.n	8003f28 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f50:	f7fd f866 	bl	8001020 <HAL_GetTick>
 8003f54:	1bc0      	subs	r0, r0, r7
 8003f56:	2802      	cmp	r0, #2
 8003f58:	d9f7      	bls.n	8003f4a <HAL_RCC_OscConfig+0x226>
 8003f5a:	e784      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f62:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003f64:	f7fd f85c 	bl	8001020 <HAL_GetTick>
 8003f68:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	0558      	lsls	r0, r3, #21
 8003f6e:	f57f af62 	bpl.w	8003e36 <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f72:	f7fd f855 	bl	8001020 <HAL_GetTick>
 8003f76:	1bc0      	subs	r0, r0, r7
 8003f78:	2802      	cmp	r0, #2
 8003f7a:	d9f6      	bls.n	8003f6a <HAL_RCC_OscConfig+0x246>
 8003f7c:	e773      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f7e:	696b      	ldr	r3, [r5, #20]
 8003f80:	b19b      	cbz	r3, 8003faa <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8003f82:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003f8e:	f7fd f847 	bl	8001020 <HAL_GetTick>
 8003f92:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f94:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f98:	079b      	lsls	r3, r3, #30
 8003f9a:	f53f af50 	bmi.w	8003e3e <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f9e:	f7fd f83f 	bl	8001020 <HAL_GetTick>
 8003fa2:	1bc0      	subs	r0, r0, r7
 8003fa4:	2802      	cmp	r0, #2
 8003fa6:	d9f5      	bls.n	8003f94 <HAL_RCC_OscConfig+0x270>
 8003fa8:	e75d      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 8003faa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003fae:	f023 0301 	bic.w	r3, r3, #1
 8003fb2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003fb6:	f7fd f833 	bl	8001020 <HAL_GetTick>
 8003fba:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fbc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003fc0:	0798      	lsls	r0, r3, #30
 8003fc2:	f57f af3c 	bpl.w	8003e3e <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fc6:	f7fd f82b 	bl	8001020 <HAL_GetTick>
 8003fca:	1bc0      	subs	r0, r0, r7
 8003fcc:	2802      	cmp	r0, #2
 8003fce:	d9f5      	bls.n	8003fbc <HAL_RCC_OscConfig+0x298>
 8003fd0:	e749      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	08031df8 	.word	0x08031df8
 8003fdc:	20000ed4 	.word	0x20000ed4
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003fe0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fe2:	00d9      	lsls	r1, r3, #3
 8003fe4:	d429      	bmi.n	800403a <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fec:	65a3      	str	r3, [r4, #88]	; 0x58
 8003fee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	9301      	str	r3, [sp, #4]
 8003ff6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003ff8:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ffc:	4f71      	ldr	r7, [pc, #452]	; (80041c4 <HAL_RCC_OscConfig+0x4a0>)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	05da      	lsls	r2, r3, #23
 8004002:	d51d      	bpl.n	8004040 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004004:	68ab      	ldr	r3, [r5, #8]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d12b      	bne.n	8004062 <HAL_RCC_OscConfig+0x33e>
 800400a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800400e:	f043 0301 	orr.w	r3, r3, #1
 8004012:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004016:	f7fd f803 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800401a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800401e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004020:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004024:	0798      	lsls	r0, r3, #30
 8004026:	d542      	bpl.n	80040ae <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 8004028:	f1b8 0f00 	cmp.w	r8, #0
 800402c:	f43f af0b 	beq.w	8003e46 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004030:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004036:	65a3      	str	r3, [r4, #88]	; 0x58
 8004038:	e705      	b.n	8003e46 <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 800403a:	f04f 0800 	mov.w	r8, #0
 800403e:	e7dd      	b.n	8003ffc <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004046:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8004048:	f7fc ffea 	bl	8001020 <HAL_GetTick>
 800404c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	05db      	lsls	r3, r3, #23
 8004052:	d4d7      	bmi.n	8004004 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004054:	f7fc ffe4 	bl	8001020 <HAL_GetTick>
 8004058:	eba0 0009 	sub.w	r0, r0, r9
 800405c:	2802      	cmp	r0, #2
 800405e:	d9f6      	bls.n	800404e <HAL_RCC_OscConfig+0x32a>
 8004060:	e701      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004062:	2b05      	cmp	r3, #5
 8004064:	d106      	bne.n	8004074 <HAL_RCC_OscConfig+0x350>
 8004066:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800406a:	f043 0304 	orr.w	r3, r3, #4
 800406e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8004072:	e7ca      	b.n	800400a <HAL_RCC_OscConfig+0x2e6>
 8004074:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004078:	f022 0201 	bic.w	r2, r2, #1
 800407c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8004080:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004084:	f022 0204 	bic.w	r2, r2, #4
 8004088:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1c2      	bne.n	8004016 <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 8004090:	f7fc ffc6 	bl	8001020 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004094:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004098:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800409a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800409e:	0799      	lsls	r1, r3, #30
 80040a0:	d5c2      	bpl.n	8004028 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a2:	f7fc ffbd 	bl	8001020 <HAL_GetTick>
 80040a6:	1bc0      	subs	r0, r0, r7
 80040a8:	4548      	cmp	r0, r9
 80040aa:	d9f6      	bls.n	800409a <HAL_RCC_OscConfig+0x376>
 80040ac:	e6db      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fc ffb7 	bl	8001020 <HAL_GetTick>
 80040b2:	1bc0      	subs	r0, r0, r7
 80040b4:	4548      	cmp	r0, r9
 80040b6:	d9b3      	bls.n	8004020 <HAL_RCC_OscConfig+0x2fc>
 80040b8:	e6d5      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80040bc:	b19b      	cbz	r3, 80040e6 <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 80040be:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80040c2:	f043 0301 	orr.w	r3, r3, #1
 80040c6:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80040ca:	f7fc ffa9 	bl	8001020 <HAL_GetTick>
 80040ce:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040d0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80040d4:	079b      	lsls	r3, r3, #30
 80040d6:	f53f aeba 	bmi.w	8003e4e <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040da:	f7fc ffa1 	bl	8001020 <HAL_GetTick>
 80040de:	1bc0      	subs	r0, r0, r7
 80040e0:	2802      	cmp	r0, #2
 80040e2:	d9f5      	bls.n	80040d0 <HAL_RCC_OscConfig+0x3ac>
 80040e4:	e6bf      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 80040e6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80040ea:	f023 0301 	bic.w	r3, r3, #1
 80040ee:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80040f2:	f7fc ff95 	bl	8001020 <HAL_GetTick>
 80040f6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040f8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80040fc:	0798      	lsls	r0, r3, #30
 80040fe:	f57f aea6 	bpl.w	8003e4e <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004102:	f7fc ff8d 	bl	8001020 <HAL_GetTick>
 8004106:	1bc0      	subs	r0, r0, r7
 8004108:	2802      	cmp	r0, #2
 800410a:	d9f5      	bls.n	80040f8 <HAL_RCC_OscConfig+0x3d4>
 800410c:	e6ab      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 800410e:	2e0c      	cmp	r6, #12
 8004110:	f43f ae0c 	beq.w	8003d2c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004114:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800411c:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800411e:	d136      	bne.n	800418e <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 8004120:	f7fc ff7e 	bl	8001020 <HAL_GetTick>
 8004124:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004126:	6823      	ldr	r3, [r4, #0]
 8004128:	0199      	lsls	r1, r3, #6
 800412a:	d42a      	bmi.n	8004182 <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800412c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800412e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004130:	06db      	lsls	r3, r3, #27
 8004132:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004136:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004138:	4313      	orrs	r3, r2
 800413a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800413c:	3a01      	subs	r2, #1
 800413e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8004142:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8004144:	0852      	lsrs	r2, r2, #1
 8004146:	3a01      	subs	r2, #1
 8004148:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800414c:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800414e:	0852      	lsrs	r2, r2, #1
 8004150:	3a01      	subs	r2, #1
 8004152:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004156:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800415e:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004160:	68e3      	ldr	r3, [r4, #12]
 8004162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004166:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8004168:	f7fc ff5a 	bl	8001020 <HAL_GetTick>
 800416c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800416e:	6823      	ldr	r3, [r4, #0]
 8004170:	019a      	lsls	r2, r3, #6
 8004172:	f53f ae70 	bmi.w	8003e56 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004176:	f7fc ff53 	bl	8001020 <HAL_GetTick>
 800417a:	1b40      	subs	r0, r0, r5
 800417c:	2802      	cmp	r0, #2
 800417e:	d9f6      	bls.n	800416e <HAL_RCC_OscConfig+0x44a>
 8004180:	e671      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004182:	f7fc ff4d 	bl	8001020 <HAL_GetTick>
 8004186:	1b80      	subs	r0, r0, r6
 8004188:	2802      	cmp	r0, #2
 800418a:	d9cc      	bls.n	8004126 <HAL_RCC_OscConfig+0x402>
 800418c:	e66b      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800418e:	6823      	ldr	r3, [r4, #0]
 8004190:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004194:	bf02      	ittt	eq
 8004196:	68e3      	ldreq	r3, [r4, #12]
 8004198:	f023 0303 	biceq.w	r3, r3, #3
 800419c:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800419e:	68e3      	ldr	r3, [r4, #12]
 80041a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80041a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041a8:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80041aa:	f7fc ff39 	bl	8001020 <HAL_GetTick>
 80041ae:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b0:	6823      	ldr	r3, [r4, #0]
 80041b2:	019b      	lsls	r3, r3, #6
 80041b4:	f57f ae4f 	bpl.w	8003e56 <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b8:	f7fc ff32 	bl	8001020 <HAL_GetTick>
 80041bc:	1b40      	subs	r0, r0, r5
 80041be:	2802      	cmp	r0, #2
 80041c0:	d9f6      	bls.n	80041b0 <HAL_RCC_OscConfig+0x48c>
 80041c2:	e650      	b.n	8003e66 <HAL_RCC_OscConfig+0x142>
 80041c4:	40007000 	.word	0x40007000

080041c8 <HAL_RCC_ClockConfig>:
{
 80041c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041cc:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80041ce:	4605      	mov	r5, r0
 80041d0:	b910      	cbnz	r0, 80041d8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80041d2:	2001      	movs	r0, #1
 80041d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041d8:	4a71      	ldr	r2, [pc, #452]	; (80043a0 <HAL_RCC_ClockConfig+0x1d8>)
 80041da:	6813      	ldr	r3, [r2, #0]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	428b      	cmp	r3, r1
 80041e2:	d334      	bcc.n	800424e <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041e4:	6829      	ldr	r1, [r5, #0]
 80041e6:	f011 0701 	ands.w	r7, r1, #1
 80041ea:	d13b      	bne.n	8004264 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041ec:	682a      	ldr	r2, [r5, #0]
 80041ee:	0791      	lsls	r1, r2, #30
 80041f0:	f140 80bb 	bpl.w	800436a <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041f4:	496b      	ldr	r1, [pc, #428]	; (80043a4 <HAL_RCC_ClockConfig+0x1dc>)
 80041f6:	68a8      	ldr	r0, [r5, #8]
 80041f8:	688b      	ldr	r3, [r1, #8]
 80041fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041fe:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004200:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004202:	4967      	ldr	r1, [pc, #412]	; (80043a0 <HAL_RCC_ClockConfig+0x1d8>)
 8004204:	680b      	ldr	r3, [r1, #0]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	429e      	cmp	r6, r3
 800420c:	f0c0 80b5 	bcc.w	800437a <HAL_RCC_ClockConfig+0x1b2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004210:	f012 0f04 	tst.w	r2, #4
 8004214:	4c63      	ldr	r4, [pc, #396]	; (80043a4 <HAL_RCC_ClockConfig+0x1dc>)
 8004216:	f040 80bc 	bne.w	8004392 <HAL_RCC_ClockConfig+0x1ca>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421a:	0713      	lsls	r3, r2, #28
 800421c:	d506      	bpl.n	800422c <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800421e:	68a3      	ldr	r3, [r4, #8]
 8004220:	692a      	ldr	r2, [r5, #16]
 8004222:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004226:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800422a:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800422c:	f7ff fd2c 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8004230:	68a3      	ldr	r3, [r4, #8]
 8004232:	4a5d      	ldr	r2, [pc, #372]	; (80043a8 <HAL_RCC_ClockConfig+0x1e0>)
 8004234:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004238:	5cd3      	ldrb	r3, [r2, r3]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	40d8      	lsrs	r0, r3
 8004240:	4b5a      	ldr	r3, [pc, #360]	; (80043ac <HAL_RCC_ClockConfig+0x1e4>)
 8004242:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 8004244:	2000      	movs	r0, #0
}
 8004246:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick (TICK_INT_PRIORITY);
 800424a:	f7fc beb9 	b.w	8000fc0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	6813      	ldr	r3, [r2, #0]
 8004250:	f023 030f 	bic.w	r3, r3, #15
 8004254:	430b      	orrs	r3, r1
 8004256:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004258:	6813      	ldr	r3, [r2, #0]
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	4299      	cmp	r1, r3
 8004260:	d1b7      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xa>
 8004262:	e7bf      	b.n	80041e4 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004264:	686b      	ldr	r3, [r5, #4]
 8004266:	4c4f      	ldr	r4, [pc, #316]	; (80043a4 <HAL_RCC_ClockConfig+0x1dc>)
 8004268:	2b03      	cmp	r3, #3
 800426a:	d168      	bne.n	800433e <HAL_RCC_ClockConfig+0x176>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	019b      	lsls	r3, r3, #6
 8004270:	d5af      	bpl.n	80041d2 <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004272:	68e3      	ldr	r3, [r4, #12]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	2b01      	cmp	r3, #1
 800427a:	d11e      	bne.n	80042ba <HAL_RCC_ClockConfig+0xf2>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800427c:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800427e:	4a4c      	ldr	r2, [pc, #304]	; (80043b0 <HAL_RCC_ClockConfig+0x1e8>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004280:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004282:	bf55      	itete	pl
 8004284:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004288:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800428a:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800428e:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 8004292:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004296:	68e7      	ldr	r7, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004298:	68e3      	ldr	r3, [r4, #12]
 800429a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800429e:	1c58      	adds	r0, r3, #1
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042a0:	f007 0303 	and.w	r3, r7, #3

  switch (pllsource)
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d00a      	beq.n	80042be <HAL_RCC_ClockConfig+0xf6>
 80042a8:	2b03      	cmp	r3, #3
 80042aa:	d008      	beq.n	80042be <HAL_RCC_ClockConfig+0xf6>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042ac:	fbb2 f3f0 	udiv	r3, r2, r0
 80042b0:	68e7      	ldr	r7, [r4, #12]
 80042b2:	f3c7 2706 	ubfx	r7, r7, #8, #7
 80042b6:	437b      	muls	r3, r7
 80042b8:	e008      	b.n	80042cc <HAL_RCC_ClockConfig+0x104>
  uint32_t msirange = 0U;
 80042ba:	2200      	movs	r2, #0
 80042bc:	e7eb      	b.n	8004296 <HAL_RCC_ClockConfig+0xce>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80042be:	68e2      	ldr	r2, [r4, #12]
 80042c0:	4b3c      	ldr	r3, [pc, #240]	; (80043b4 <HAL_RCC_ClockConfig+0x1ec>)
 80042c2:	fbb3 f3f0 	udiv	r3, r3, r0
 80042c6:	f3c2 2206 	ubfx	r2, r2, #8, #7
 80042ca:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042cc:	68e2      	ldr	r2, [r4, #12]
 80042ce:	f3c2 6241 	ubfx	r2, r2, #25, #2
 80042d2:	3201      	adds	r2, #1
 80042d4:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 80042d6:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80042da:	4a37      	ldr	r2, [pc, #220]	; (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d81c      	bhi.n	800431a <HAL_RCC_ClockConfig+0x152>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042e0:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042e2:	68a3      	ldr	r3, [r4, #8]
 80042e4:	686a      	ldr	r2, [r5, #4]
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80042ee:	f7fc fe97 	bl	8001020 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042f2:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80042f6:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042f8:	68a3      	ldr	r3, [r4, #8]
 80042fa:	686a      	ldr	r2, [r5, #4]
 80042fc:	f003 030c 	and.w	r3, r3, #12
 8004300:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004304:	f43f af72 	beq.w	80041ec <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004308:	f7fc fe8a 	bl	8001020 <HAL_GetTick>
 800430c:	eba0 0008 	sub.w	r0, r0, r8
 8004310:	4548      	cmp	r0, r9
 8004312:	d9f1      	bls.n	80042f8 <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8004314:	2003      	movs	r0, #3
}
 8004316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800431a:	68a3      	ldr	r3, [r4, #8]
 800431c:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0x16a>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004322:	68a3      	ldr	r3, [r4, #8]
 8004324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432c:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 800432e:	2780      	movs	r7, #128	; 0x80
 8004330:	e7d7      	b.n	80042e2 <HAL_RCC_ClockConfig+0x11a>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004332:	0788      	lsls	r0, r1, #30
 8004334:	d5d4      	bpl.n	80042e0 <HAL_RCC_ClockConfig+0x118>
 8004336:	68ab      	ldr	r3, [r5, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1d1      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x118>
 800433c:	e7f1      	b.n	8004322 <HAL_RCC_ClockConfig+0x15a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800433e:	2b02      	cmp	r3, #2
 8004340:	d10a      	bne.n	8004358 <HAL_RCC_ClockConfig+0x190>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004348:	f43f af43 	beq.w	80041d2 <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800434c:	f7ff fc9c 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8004350:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <HAL_RCC_ClockConfig+0x1f0>)
 8004352:	4298      	cmp	r0, r3
 8004354:	d9c4      	bls.n	80042e0 <HAL_RCC_ClockConfig+0x118>
 8004356:	e7e4      	b.n	8004322 <HAL_RCC_ClockConfig+0x15a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004358:	b91b      	cbnz	r3, 8004362 <HAL_RCC_ClockConfig+0x19a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	f013 0f02 	tst.w	r3, #2
 8004360:	e7f2      	b.n	8004348 <HAL_RCC_ClockConfig+0x180>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004362:	6823      	ldr	r3, [r4, #0]
 8004364:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004368:	e7ee      	b.n	8004348 <HAL_RCC_ClockConfig+0x180>
    if(hpre == RCC_SYSCLK_DIV2)
 800436a:	2f80      	cmp	r7, #128	; 0x80
 800436c:	f47f af49 	bne.w	8004202 <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004370:	490c      	ldr	r1, [pc, #48]	; (80043a4 <HAL_RCC_ClockConfig+0x1dc>)
 8004372:	688b      	ldr	r3, [r1, #8]
 8004374:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004378:	e742      	b.n	8004200 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800437a:	680b      	ldr	r3, [r1, #0]
 800437c:	f023 030f 	bic.w	r3, r3, #15
 8004380:	4333      	orrs	r3, r6
 8004382:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004384:	680b      	ldr	r3, [r1, #0]
 8004386:	f003 030f 	and.w	r3, r3, #15
 800438a:	429e      	cmp	r6, r3
 800438c:	f47f af21 	bne.w	80041d2 <HAL_RCC_ClockConfig+0xa>
 8004390:	e73e      	b.n	8004210 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004392:	68a3      	ldr	r3, [r4, #8]
 8004394:	68e9      	ldr	r1, [r5, #12]
 8004396:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800439a:	430b      	orrs	r3, r1
 800439c:	60a3      	str	r3, [r4, #8]
 800439e:	e73c      	b.n	800421a <HAL_RCC_ClockConfig+0x52>
 80043a0:	40022000 	.word	0x40022000
 80043a4:	40021000 	.word	0x40021000
 80043a8:	08031df8 	.word	0x08031df8
 80043ac:	20000ed4 	.word	0x20000ed4
 80043b0:	08031e10 	.word	0x08031e10
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	04c4b400 	.word	0x04c4b400

080043bc <HAL_RCC_GetHCLKFreq>:
}
 80043bc:	4b01      	ldr	r3, [pc, #4]	; (80043c4 <HAL_RCC_GetHCLKFreq+0x8>)
 80043be:	6818      	ldr	r0, [r3, #0]
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20000ed4 	.word	0x20000ed4

080043c8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80043ca:	4a06      	ldr	r2, [pc, #24]	; (80043e4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80043d2:	5cd3      	ldrb	r3, [r2, r3]
 80043d4:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d6:	6810      	ldr	r0, [r2, #0]
 80043d8:	f003 031f 	and.w	r3, r3, #31
}
 80043dc:	40d8      	lsrs	r0, r3
 80043de:	4770      	bx	lr
 80043e0:	40021000 	.word	0x40021000
 80043e4:	08031e08 	.word	0x08031e08
 80043e8:	20000ed4 	.word	0x20000ed4

080043ec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80043ec:	4b05      	ldr	r3, [pc, #20]	; (8004404 <HAL_RCC_GetPCLK2Freq+0x18>)
 80043ee:	4a06      	ldr	r2, [pc, #24]	; (8004408 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80043f6:	5cd3      	ldrb	r3, [r2, r3]
 80043f8:	4a04      	ldr	r2, [pc, #16]	; (800440c <HAL_RCC_GetPCLK2Freq+0x20>)
 80043fa:	6810      	ldr	r0, [r2, #0]
 80043fc:	f003 031f 	and.w	r3, r3, #31
}
 8004400:	40d8      	lsrs	r0, r3
 8004402:	4770      	bx	lr
 8004404:	40021000 	.word	0x40021000
 8004408:	08031e08 	.word	0x08031e08
 800440c:	20000ed4 	.word	0x20000ed4

08004410 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004412:	4b3f      	ldr	r3, [pc, #252]	; (8004510 <RCCEx_PLLSAI1_Config+0x100>)
 8004414:	68da      	ldr	r2, [r3, #12]
 8004416:	f012 0f03 	tst.w	r2, #3
{
 800441a:	4605      	mov	r5, r0
 800441c:	460e      	mov	r6, r1
 800441e:	461c      	mov	r4, r3
 8004420:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004422:	d022      	beq.n	800446a <RCCEx_PLLSAI1_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	4283      	cmp	r3, r0
 800442c:	d130      	bne.n	8004490 <RCCEx_PLLSAI1_Config+0x80>
       ||
 800442e:	b37b      	cbz	r3, 8004490 <RCCEx_PLLSAI1_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004436:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004438:	f7fc fdf2 	bl	8001020 <HAL_GetTick>
 800443c:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	011a      	lsls	r2, r3, #4
 8004442:	d42e      	bmi.n	80044a2 <RCCEx_PLLSAI1_Config+0x92>
 8004444:	68af      	ldr	r7, [r5, #8]
 8004446:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004448:	b396      	cbz	r6, 80044b0 <RCCEx_PLLSAI1_Config+0xa0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800444a:	2e01      	cmp	r6, #1
 800444c:	d14c      	bne.n	80044e8 <RCCEx_PLLSAI1_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800444e:	6922      	ldr	r2, [r4, #16]
 8004450:	4930      	ldr	r1, [pc, #192]	; (8004514 <RCCEx_PLLSAI1_Config+0x104>)
 8004452:	4011      	ands	r1, r2
 8004454:	692a      	ldr	r2, [r5, #16]
 8004456:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800445a:	3b01      	subs	r3, #1
 800445c:	0852      	lsrs	r2, r2, #1
 800445e:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 8004462:	3a01      	subs	r2, #1
 8004464:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004468:	e02d      	b.n	80044c6 <RCCEx_PLLSAI1_Config+0xb6>
    switch(PllSai1->PLLSAI1Source)
 800446a:	2802      	cmp	r0, #2
 800446c:	d00c      	beq.n	8004488 <RCCEx_PLLSAI1_Config+0x78>
 800446e:	2803      	cmp	r0, #3
 8004470:	d010      	beq.n	8004494 <RCCEx_PLLSAI1_Config+0x84>
 8004472:	2801      	cmp	r0, #1
 8004474:	d10c      	bne.n	8004490 <RCCEx_PLLSAI1_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	079f      	lsls	r7, r3, #30
 800447a:	d534      	bpl.n	80044e6 <RCCEx_PLLSAI1_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800447c:	68e3      	ldr	r3, [r4, #12]
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	4318      	orrs	r0, r3
 8004484:	60e0      	str	r0, [r4, #12]
 8004486:	e7d3      	b.n	8004430 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800448e:	d1f5      	bne.n	800447c <RCCEx_PLLSAI1_Config+0x6c>
 8004490:	2001      	movs	r0, #1
 8004492:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	0391      	lsls	r1, r2, #14
 8004498:	d4f0      	bmi.n	800447c <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80044a0:	e7f5      	b.n	800448e <RCCEx_PLLSAI1_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044a2:	f7fc fdbd 	bl	8001020 <HAL_GetTick>
 80044a6:	1bc0      	subs	r0, r0, r7
 80044a8:	2802      	cmp	r0, #2
 80044aa:	d9c8      	bls.n	800443e <RCCEx_PLLSAI1_Config+0x2e>
        status = HAL_TIMEOUT;
 80044ac:	2003      	movs	r0, #3
 80044ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044b0:	68e8      	ldr	r0, [r5, #12]
 80044b2:	6926      	ldr	r6, [r4, #16]
 80044b4:	4918      	ldr	r1, [pc, #96]	; (8004518 <RCCEx_PLLSAI1_Config+0x108>)
 80044b6:	06c2      	lsls	r2, r0, #27
 80044b8:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80044bc:	4031      	ands	r1, r6
 80044be:	430a      	orrs	r2, r1
 80044c0:	3b01      	subs	r3, #1
 80044c2:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044c6:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044c8:	6823      	ldr	r3, [r4, #0]
 80044ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ce:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d0:	f7fc fda6 	bl	8001020 <HAL_GetTick>
 80044d4:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	d513      	bpl.n	8004504 <RCCEx_PLLSAI1_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80044dc:	6923      	ldr	r3, [r4, #16]
 80044de:	69aa      	ldr	r2, [r5, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	6123      	str	r3, [r4, #16]
 80044e4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80044e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044e8:	6921      	ldr	r1, [r4, #16]
 80044ea:	4a0c      	ldr	r2, [pc, #48]	; (800451c <RCCEx_PLLSAI1_Config+0x10c>)
 80044ec:	400a      	ands	r2, r1
 80044ee:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80044f2:	3b01      	subs	r3, #1
 80044f4:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 80044f8:	696a      	ldr	r2, [r5, #20]
 80044fa:	0852      	lsrs	r2, r2, #1
 80044fc:	3a01      	subs	r2, #1
 80044fe:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004502:	e7e0      	b.n	80044c6 <RCCEx_PLLSAI1_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004504:	f7fc fd8c 	bl	8001020 <HAL_GetTick>
 8004508:	1b80      	subs	r0, r0, r6
 800450a:	2802      	cmp	r0, #2
 800450c:	d9e3      	bls.n	80044d6 <RCCEx_PLLSAI1_Config+0xc6>
 800450e:	e7cd      	b.n	80044ac <RCCEx_PLLSAI1_Config+0x9c>
 8004510:	40021000 	.word	0x40021000
 8004514:	ff9f800f 	.word	0xff9f800f
 8004518:	07ff800f 	.word	0x07ff800f
 800451c:	f9ff800f 	.word	0xf9ff800f

08004520 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004522:	4b3f      	ldr	r3, [pc, #252]	; (8004620 <RCCEx_PLLSAI2_Config+0x100>)
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	f012 0f03 	tst.w	r2, #3
{
 800452a:	4605      	mov	r5, r0
 800452c:	460e      	mov	r6, r1
 800452e:	461c      	mov	r4, r3
 8004530:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004532:	d022      	beq.n	800457a <RCCEx_PLLSAI2_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	4283      	cmp	r3, r0
 800453c:	d130      	bne.n	80045a0 <RCCEx_PLLSAI2_Config+0x80>
       ||
 800453e:	b37b      	cbz	r3, 80045a0 <RCCEx_PLLSAI2_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004546:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004548:	f7fc fd6a 	bl	8001020 <HAL_GetTick>
 800454c:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	009a      	lsls	r2, r3, #2
 8004552:	d42e      	bmi.n	80045b2 <RCCEx_PLLSAI2_Config+0x92>
 8004554:	68af      	ldr	r7, [r5, #8]
 8004556:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004558:	b396      	cbz	r6, 80045c0 <RCCEx_PLLSAI2_Config+0xa0>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800455a:	2e01      	cmp	r6, #1
 800455c:	d14c      	bne.n	80045f8 <RCCEx_PLLSAI2_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800455e:	6962      	ldr	r2, [r4, #20]
 8004560:	4930      	ldr	r1, [pc, #192]	; (8004624 <RCCEx_PLLSAI2_Config+0x104>)
 8004562:	4011      	ands	r1, r2
 8004564:	692a      	ldr	r2, [r5, #16]
 8004566:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 800456a:	3b01      	subs	r3, #1
 800456c:	0852      	lsrs	r2, r2, #1
 800456e:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 8004572:	3a01      	subs	r2, #1
 8004574:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8004578:	e02d      	b.n	80045d6 <RCCEx_PLLSAI2_Config+0xb6>
    switch(PllSai2->PLLSAI2Source)
 800457a:	2802      	cmp	r0, #2
 800457c:	d00c      	beq.n	8004598 <RCCEx_PLLSAI2_Config+0x78>
 800457e:	2803      	cmp	r0, #3
 8004580:	d010      	beq.n	80045a4 <RCCEx_PLLSAI2_Config+0x84>
 8004582:	2801      	cmp	r0, #1
 8004584:	d10c      	bne.n	80045a0 <RCCEx_PLLSAI2_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	079f      	lsls	r7, r3, #30
 800458a:	d534      	bpl.n	80045f6 <RCCEx_PLLSAI2_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800458c:	68e3      	ldr	r3, [r4, #12]
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	4318      	orrs	r0, r3
 8004594:	60e0      	str	r0, [r4, #12]
 8004596:	e7d3      	b.n	8004540 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800459e:	d1f5      	bne.n	800458c <RCCEx_PLLSAI2_Config+0x6c>
 80045a0:	2001      	movs	r0, #1
 80045a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	0391      	lsls	r1, r2, #14
 80045a8:	d4f0      	bmi.n	800458c <RCCEx_PLLSAI2_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80045b0:	e7f5      	b.n	800459e <RCCEx_PLLSAI2_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80045b2:	f7fc fd35 	bl	8001020 <HAL_GetTick>
 80045b6:	1bc0      	subs	r0, r0, r7
 80045b8:	2802      	cmp	r0, #2
 80045ba:	d9c8      	bls.n	800454e <RCCEx_PLLSAI2_Config+0x2e>
        status = HAL_TIMEOUT;
 80045bc:	2003      	movs	r0, #3
 80045be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045c0:	68e8      	ldr	r0, [r5, #12]
 80045c2:	6966      	ldr	r6, [r4, #20]
 80045c4:	4918      	ldr	r1, [pc, #96]	; (8004628 <RCCEx_PLLSAI2_Config+0x108>)
 80045c6:	06c2      	lsls	r2, r0, #27
 80045c8:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80045cc:	4031      	ands	r1, r6
 80045ce:	430a      	orrs	r2, r1
 80045d0:	3b01      	subs	r3, #1
 80045d2:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045d6:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045de:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fc fd1e 	bl	8001020 <HAL_GetTick>
 80045e4:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	d513      	bpl.n	8004614 <RCCEx_PLLSAI2_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045ec:	6963      	ldr	r3, [r4, #20]
 80045ee:	69aa      	ldr	r2, [r5, #24]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	6163      	str	r3, [r4, #20]
 80045f4:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80045f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045f8:	6961      	ldr	r1, [r4, #20]
 80045fa:	4a0c      	ldr	r2, [pc, #48]	; (800462c <RCCEx_PLLSAI2_Config+0x10c>)
 80045fc:	400a      	ands	r2, r1
 80045fe:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004602:	3b01      	subs	r3, #1
 8004604:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 8004608:	696a      	ldr	r2, [r5, #20]
 800460a:	0852      	lsrs	r2, r2, #1
 800460c:	3a01      	subs	r2, #1
 800460e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004612:	e7e0      	b.n	80045d6 <RCCEx_PLLSAI2_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004614:	f7fc fd04 	bl	8001020 <HAL_GetTick>
 8004618:	1b80      	subs	r0, r0, r6
 800461a:	2802      	cmp	r0, #2
 800461c:	d9e3      	bls.n	80045e6 <RCCEx_PLLSAI2_Config+0xc6>
 800461e:	e7cd      	b.n	80045bc <RCCEx_PLLSAI2_Config+0x9c>
 8004620:	40021000 	.word	0x40021000
 8004624:	ff9f800f 	.word	0xff9f800f
 8004628:	07ff800f 	.word	0x07ff800f
 800462c:	f9ff800f 	.word	0xf9ff800f

08004630 <HAL_RCCEx_PeriphCLKConfig>:
{
 8004630:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004634:	6805      	ldr	r5, [r0, #0]
 8004636:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 800463a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800463c:	d023      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 800463e:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 8004640:	2940      	cmp	r1, #64	; 0x40
 8004642:	d014      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x3e>
 8004644:	d804      	bhi.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8004646:	b1c1      	cbz	r1, 800467a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8004648:	2920      	cmp	r1, #32
 800464a:	d02b      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = HAL_ERROR;
 800464c:	2501      	movs	r5, #1
 800464e:	e01a      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 8004650:	2960      	cmp	r1, #96	; 0x60
 8004652:	d001      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004654:	2980      	cmp	r1, #128	; 0x80
 8004656:	d1f9      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004658:	4a4e      	ldr	r2, [pc, #312]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800465a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800465c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004660:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8004664:	430b      	orrs	r3, r1
 8004666:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800466a:	2500      	movs	r5, #0
 800466c:	e00b      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800466e:	4a49      	ldr	r2, [pc, #292]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004670:	68d3      	ldr	r3, [r2, #12]
 8004672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004676:	60d3      	str	r3, [r2, #12]
      break;
 8004678:	e7ee      	b.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x28>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800467a:	3004      	adds	r0, #4
 800467c:	f7ff fec8 	bl	8004410 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004680:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004682:	2800      	cmp	r0, #0
 8004684:	d0e8      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x28>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	04db      	lsls	r3, r3, #19
 800468a:	d509      	bpl.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai2ClockSelection)
 800468c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800468e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004692:	d014      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8004694:	d80b      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004696:	b1c1      	cbz	r1, 80046ca <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8004698:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800469c:	d071      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x152>
      ret = HAL_ERROR;
 800469e:	2501      	movs	r5, #1
 80046a0:	462e      	mov	r6, r5
 80046a2:	e021      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046a4:	2100      	movs	r1, #0
 80046a6:	3020      	adds	r0, #32
 80046a8:	f7ff ff3a 	bl	8004520 <RCCEx_PLLSAI2_Config>
 80046ac:	e7e8      	b.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch(PeriphClkInit->Sai2ClockSelection)
 80046ae:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80046b2:	d002      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80046b4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80046b8:	d1f1      	bne.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80046ba:	462e      	mov	r6, r5
 80046bc:	e009      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046be:	4a35      	ldr	r2, [pc, #212]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046c0:	68d3      	ldr	r3, [r2, #12]
 80046c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c6:	60d3      	str	r3, [r2, #12]
 80046c8:	e7f7      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ca:	1d20      	adds	r0, r4, #4
 80046cc:	f7ff fea0 	bl	8004410 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046d0:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 80046d2:	2e00      	cmp	r6, #0
 80046d4:	d15b      	bne.n	800478e <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046d6:	4a2f      	ldr	r2, [pc, #188]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046d8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80046da:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80046de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046e2:	430b      	orrs	r3, r1
 80046e4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046e8:	6823      	ldr	r3, [r4, #0]
 80046ea:	039f      	lsls	r7, r3, #14
 80046ec:	d565      	bpl.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046ee:	4f29      	ldr	r7, [pc, #164]	; (8004794 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80046f2:	00d8      	lsls	r0, r3, #3
 80046f4:	f140 81f3 	bpl.w	8004ade <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    FlagStatus       pwrclkchanged = RESET;
 80046f8:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046fc:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004798 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004700:	f8d9 3000 	ldr.w	r3, [r9]
 8004704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004708:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800470c:	f7fc fc88 	bl	8001020 <HAL_GetTick>
 8004710:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004712:	f8d9 3000 	ldr.w	r3, [r9]
 8004716:	05d9      	lsls	r1, r3, #23
 8004718:	d540      	bpl.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 800471a:	2e00      	cmp	r6, #0
 800471c:	f040 8197 	bne.w	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x41e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004720:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004724:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004728:	d015      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x126>
 800472a:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800472e:	4293      	cmp	r3, r2
 8004730:	d011      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x126>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004732:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8004736:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800473a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800473e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004742:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004746:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800474a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800474e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8004752:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004756:	07da      	lsls	r2, r3, #31
 8004758:	d509      	bpl.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x13e>
        tickstart = HAL_GetTick();
 800475a:	f7fc fc61 	bl	8001020 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800475e:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004762:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004768:	079b      	lsls	r3, r3, #30
 800476a:	f140 8168 	bpl.w	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800476e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004772:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8004776:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477a:	4313      	orrs	r3, r2
 800477c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004780:	e014      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004782:	2100      	movs	r1, #0
 8004784:	f104 0020 	add.w	r0, r4, #32
 8004788:	f7ff feca 	bl	8004520 <RCCEx_PLLSAI2_Config>
 800478c:	e7a0      	b.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800478e:	4635      	mov	r5, r6
 8004790:	e7aa      	b.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000
 8004798:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800479c:	f7fc fc40 	bl	8001020 <HAL_GetTick>
 80047a0:	eba0 000a 	sub.w	r0, r0, sl
 80047a4:	2802      	cmp	r0, #2
 80047a6:	d9b4      	bls.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 80047a8:	2503      	movs	r5, #3
 80047aa:	462e      	mov	r6, r5
    if(pwrclkchanged == SET)
 80047ac:	f1b8 0f00 	cmp.w	r8, #0
 80047b0:	d003      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b8:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	07df      	lsls	r7, r3, #31
 80047be:	d508      	bpl.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047c0:	49c0      	ldr	r1, [pc, #768]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80047c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80047c4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047c8:	f022 0203 	bic.w	r2, r2, #3
 80047cc:	4302      	orrs	r2, r0
 80047ce:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047d2:	0798      	lsls	r0, r3, #30
 80047d4:	d508      	bpl.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047d6:	49bb      	ldr	r1, [pc, #748]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80047d8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80047da:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047de:	f022 020c 	bic.w	r2, r2, #12
 80047e2:	4302      	orrs	r2, r0
 80047e4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047e8:	0759      	lsls	r1, r3, #29
 80047ea:	d508      	bpl.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047ec:	49b5      	ldr	r1, [pc, #724]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80047ee:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80047f0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80047f4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80047f8:	4302      	orrs	r2, r0
 80047fa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047fe:	071a      	lsls	r2, r3, #28
 8004800:	d508      	bpl.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004802:	49b0      	ldr	r1, [pc, #704]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004804:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004806:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800480a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800480e:	4302      	orrs	r2, r0
 8004810:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004814:	06df      	lsls	r7, r3, #27
 8004816:	d508      	bpl.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004818:	49aa      	ldr	r1, [pc, #680]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800481a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800481c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004820:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004824:	4302      	orrs	r2, r0
 8004826:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800482a:	0698      	lsls	r0, r3, #26
 800482c:	d508      	bpl.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800482e:	49a5      	ldr	r1, [pc, #660]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004830:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004832:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004836:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800483a:	4302      	orrs	r2, r0
 800483c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004840:	0599      	lsls	r1, r3, #22
 8004842:	d508      	bpl.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004844:	499f      	ldr	r1, [pc, #636]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004846:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004848:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800484c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004850:	4302      	orrs	r2, r0
 8004852:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004856:	055a      	lsls	r2, r3, #21
 8004858:	d508      	bpl.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800485a:	499a      	ldr	r1, [pc, #616]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800485c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800485e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004862:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004866:	4302      	orrs	r2, r0
 8004868:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800486c:	065f      	lsls	r7, r3, #25
 800486e:	d508      	bpl.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004870:	4994      	ldr	r1, [pc, #592]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004872:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004874:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004878:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800487c:	4302      	orrs	r2, r0
 800487e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004882:	0618      	lsls	r0, r3, #24
 8004884:	d508      	bpl.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004886:	498f      	ldr	r1, [pc, #572]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800488a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800488e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004892:	4302      	orrs	r2, r0
 8004894:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004898:	05d9      	lsls	r1, r3, #23
 800489a:	d508      	bpl.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800489c:	4989      	ldr	r1, [pc, #548]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800489e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80048a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80048a4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80048a8:	4302      	orrs	r2, r0
 80048aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048ae:	02da      	lsls	r2, r3, #11
 80048b0:	d508      	bpl.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x294>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048b2:	4984      	ldr	r1, [pc, #528]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80048b4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80048b6:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 80048ba:	f022 0203 	bic.w	r2, r2, #3
 80048be:	4302      	orrs	r2, r0
 80048c0:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048c4:	049f      	lsls	r7, r3, #18
 80048c6:	d510      	bpl.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048c8:	4a7e      	ldr	r2, [pc, #504]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80048ca:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80048cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80048d0:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80048d4:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048d6:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80048de:	f040 80b8 	bne.w	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x422>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048e2:	68d3      	ldr	r3, [r2, #12]
 80048e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048e8:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	0318      	lsls	r0, r3, #12
 80048ee:	d50f      	bpl.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048f0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80048f2:	4b74      	ldr	r3, [pc, #464]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80048f4:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80048f8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80048fc:	f040 80b6 	bne.w	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8004900:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004904:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800490e:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	0359      	lsls	r1, r3, #13
 8004914:	d510      	bpl.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004916:	4a6b      	ldr	r2, [pc, #428]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004918:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800491a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800491e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004922:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004924:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800492c:	f040 80bd 	bne.w	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x47a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004930:	68d3      	ldr	r3, [r2, #12]
 8004932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004936:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	045a      	lsls	r2, r3, #17
 800493c:	d514      	bpl.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x338>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800493e:	4961      	ldr	r1, [pc, #388]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004940:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004944:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004948:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800494c:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800494e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004956:	d107      	bne.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x338>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004958:	2102      	movs	r1, #2
 800495a:	1d20      	adds	r0, r4, #4
 800495c:	f7ff fd58 	bl	8004410 <RCCEx_PLLSAI1_Config>
 8004960:	4606      	mov	r6, r0
 8004962:	2800      	cmp	r0, #0
 8004964:	bf18      	it	ne
 8004966:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004968:	6822      	ldr	r2, [r4, #0]
 800496a:	03d3      	lsls	r3, r2, #15
 800496c:	d509      	bpl.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x352>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800496e:	4955      	ldr	r1, [pc, #340]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004970:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004974:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004978:	f023 0304 	bic.w	r3, r3, #4
 800497c:	4303      	orrs	r3, r0
 800497e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004982:	0297      	lsls	r7, r2, #10
 8004984:	d509      	bpl.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004986:	494f      	ldr	r1, [pc, #316]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004988:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800498c:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004990:	f023 0318 	bic.w	r3, r3, #24
 8004994:	4303      	orrs	r3, r0
 8004996:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800499a:	0250      	lsls	r0, r2, #9
 800499c:	d51f      	bpl.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_PLLSAI2_DISABLE();
 800499e:	4f49      	ldr	r7, [pc, #292]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049a6:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80049a8:	f7fc fb3a 	bl	8001020 <HAL_GetTick>
 80049ac:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	0099      	lsls	r1, r3, #2
 80049b2:	f100 8089 	bmi.w	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x498>
    if(ret == HAL_OK)
 80049b6:	2e00      	cmp	r6, #0
 80049b8:	f040 808f 	bne.w	8004ada <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 80049bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049c0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80049c4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80049ce:	2102      	movs	r1, #2
 80049d0:	f104 0020 	add.w	r0, r4, #32
 80049d4:	f7ff fda4 	bl	8004520 <RCCEx_PLLSAI2_Config>
 80049d8:	2800      	cmp	r0, #0
 80049da:	bf18      	it	ne
 80049dc:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	021a      	lsls	r2, r3, #8
 80049e2:	d514      	bpl.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80049e4:	4937      	ldr	r1, [pc, #220]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80049e6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80049ea:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 80049ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049f2:	4313      	orrs	r3, r2
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80049f4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80049f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80049fc:	d107      	bne.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80049fe:	2101      	movs	r1, #1
 8004a00:	f104 0020 	add.w	r0, r4, #32
 8004a04:	f7ff fd8c 	bl	8004520 <RCCEx_PLLSAI2_Config>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	bf18      	it	ne
 8004a0c:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a0e:	6823      	ldr	r3, [r4, #0]
 8004a10:	01db      	lsls	r3, r3, #7
 8004a12:	d510      	bpl.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x406>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a14:	4a2b      	ldr	r2, [pc, #172]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a16:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004a1a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004a1e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004a22:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004a24:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a28:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004a2c:	d103      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a2e:	68d3      	ldr	r3, [r2, #12]
 8004a30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a34:	60d3      	str	r3, [r2, #12]
}
 8004a36:	4628      	mov	r0, r5
 8004a38:	b002      	add	sp, #8
 8004a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3e:	f7fc faef 	bl	8001020 <HAL_GetTick>
 8004a42:	eba0 0009 	sub.w	r0, r0, r9
 8004a46:	4550      	cmp	r0, sl
 8004a48:	f67f ae8c 	bls.w	8004764 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004a4c:	e6ac      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004a4e:	4635      	mov	r5, r6
 8004a50:	e6ac      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x17c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a52:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004a56:	f47f af48 	bne.w	80048ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a5a:	2101      	movs	r1, #1
 8004a5c:	1d20      	adds	r0, r4, #4
 8004a5e:	f7ff fcd7 	bl	8004410 <RCCEx_PLLSAI1_Config>
 8004a62:	4606      	mov	r6, r0
 8004a64:	2800      	cmp	r0, #0
 8004a66:	bf18      	it	ne
 8004a68:	4605      	movne	r5, r0
 8004a6a:	e73e      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004a74:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004a78:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004a7c:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a7e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a86:	d103      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x460>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a8e:	e73e      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a90:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004a94:	f47f af3c 	bne.w	8004910 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a98:	2101      	movs	r1, #1
 8004a9a:	1d20      	adds	r0, r4, #4
 8004a9c:	f7ff fcb8 	bl	8004410 <RCCEx_PLLSAI1_Config>
 8004aa0:	4606      	mov	r6, r0
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	bf18      	it	ne
 8004aa6:	4605      	movne	r5, r0
 8004aa8:	e732      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004aaa:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004aae:	f47f af43 	bne.w	8004938 <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ab2:	2101      	movs	r1, #1
 8004ab4:	1d20      	adds	r0, r4, #4
 8004ab6:	f7ff fcab 	bl	8004410 <RCCEx_PLLSAI1_Config>
 8004aba:	4606      	mov	r6, r0
 8004abc:	2800      	cmp	r0, #0
 8004abe:	bf18      	it	ne
 8004ac0:	4605      	movne	r5, r0
 8004ac2:	e739      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004ac4:	40021000 	.word	0x40021000
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ac8:	f7fc faaa 	bl	8001020 <HAL_GetTick>
 8004acc:	eba0 0008 	sub.w	r0, r0, r8
 8004ad0:	2802      	cmp	r0, #2
 8004ad2:	f67f af6c 	bls.w	80049ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
        ret = HAL_TIMEOUT;
 8004ad6:	2503      	movs	r5, #3
 8004ad8:	e781      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004ada:	4635      	mov	r5, r6
 8004adc:	e77f      	b.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ade:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004af0:	f04f 0801 	mov.w	r8, #1
 8004af4:	e602      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004af6:	bf00      	nop

08004af8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afc:	b087      	sub	sp, #28
 8004afe:	4606      	mov	r6, r0
 8004b00:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8004b02:	f7fc fa8d 	bl	8001020 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004b06:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8004b08:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004b0a:	6830      	ldr	r0, [r6, #0]
 8004b0c:	f002 fb1c 	bl	8007148 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8004b10:	4604      	mov	r4, r0
 8004b12:	bb40      	cbnz	r0, 8004b66 <SD_FindSCR+0x6e>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004b14:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8004b16:	6830      	ldr	r0, [r6, #0]
 8004b18:	0409      	lsls	r1, r1, #16
 8004b1a:	f002 fc2f 	bl	800737c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8004b1e:	4604      	mov	r4, r0
 8004b20:	bb08      	cbnz	r0, 8004b66 <SD_FindSCR+0x6e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004b22:	2230      	movs	r2, #48	; 0x30
 8004b24:	f04f 30ff 	mov.w	r0, #4294967295
 8004b28:	2108      	movs	r1, #8
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004b30:	2301      	movs	r3, #1
  SDMMC_ConfigData(hsd->Instance, &config);
 8004b32:	4669      	mov	r1, sp
 8004b34:	6830      	ldr	r0, [r6, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004b36:	9404      	str	r4, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004b38:	9305      	str	r3, [sp, #20]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004b3a:	f002 faf3 	bl	8007124 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004b3e:	6830      	ldr	r0, [r6, #0]
 8004b40:	f002 fc4b 	bl	80073da <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8004b44:	4604      	mov	r4, r0
 8004b46:	b970      	cbnz	r0, 8004b66 <SD_FindSCR+0x6e>
 8004b48:	4605      	mov	r5, r0
 8004b4a:	4607      	mov	r7, r0
 8004b4c:	4683      	mov	fp, r0
  {
    return errorstate;
  }
  
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004b4e:	f240 592a 	movw	r9, #1322	; 0x52a
 8004b52:	6830      	ldr	r0, [r6, #0]
 8004b54:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004b56:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004b5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004b5c:	d007      	beq.n	8004b6e <SD_FindSCR+0x76>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004b5e:	0719      	lsls	r1, r3, #28
 8004b60:	d51c      	bpl.n	8004b9c <SD_FindSCR+0xa4>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004b62:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004b64:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8004b66:	4620      	mov	r0, r4
 8004b68:	b007      	add	sp, #28
 8004b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004b6e:	031b      	lsls	r3, r3, #12
 8004b70:	d40b      	bmi.n	8004b8a <SD_FindSCR+0x92>
 8004b72:	f1bb 0f00 	cmp.w	fp, #0
 8004b76:	d108      	bne.n	8004b8a <SD_FindSCR+0x92>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004b78:	f002 fa10 	bl	8006f9c <SDMMC_ReadFIFO>
 8004b7c:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004b7e:	6830      	ldr	r0, [r6, #0]
 8004b80:	f002 fa0c 	bl	8006f9c <SDMMC_ReadFIFO>
      index++;
 8004b84:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004b88:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004b8a:	f7fc fa49 	bl	8001020 <HAL_GetTick>
 8004b8e:	eba0 000a 	sub.w	r0, r0, sl
 8004b92:	3001      	adds	r0, #1
 8004b94:	d1dd      	bne.n	8004b52 <SD_FindSCR+0x5a>
      return HAL_SD_ERROR_TIMEOUT;
 8004b96:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004b9a:	e7e4      	b.n	8004b66 <SD_FindSCR+0x6e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004b9c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004b9e:	079a      	lsls	r2, r3, #30
 8004ba0:	d501      	bpl.n	8004ba6 <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004ba2:	2402      	movs	r4, #2
 8004ba4:	e7de      	b.n	8004b64 <SD_FindSCR+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004ba6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004ba8:	069b      	lsls	r3, r3, #26
 8004baa:	d501      	bpl.n	8004bb0 <SD_FindSCR+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004bac:	2420      	movs	r4, #32
 8004bae:	e7d9      	b.n	8004b64 <SD_FindSCR+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004bb0:	4b04      	ldr	r3, [pc, #16]	; (8004bc4 <SD_FindSCR+0xcc>)
 8004bb2:	6383      	str	r3, [r0, #56]	; 0x38
 8004bb4:	ba3f      	rev	r7, r7
 8004bb6:	ba2d      	rev	r5, r5
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004bb8:	f8c8 7004 	str.w	r7, [r8, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004bbc:	f8c8 5000 	str.w	r5, [r8]
  return HAL_SD_ERROR_NONE;
 8004bc0:	e7d1      	b.n	8004b66 <SD_FindSCR+0x6e>
 8004bc2:	bf00      	nop
 8004bc4:	18000f3a 	.word	0x18000f3a

08004bc8 <HAL_SD_DeInit>:
{
 8004bc8:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8004bca:	4604      	mov	r4, r0
 8004bcc:	b168      	cbz	r0, 8004bea <HAL_SD_DeInit+0x22>
  hsd->State = HAL_SD_STATE_BUSY;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  SDMMC_PowerState_OFF(hsd->Instance);
 8004bd4:	6800      	ldr	r0, [r0, #0]
 8004bd6:	f002 f9ef 	bl	8006fb8 <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f01b f826 	bl	801fc2c <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004be0:	2000      	movs	r0, #0
 8004be2:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8004be4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8004be8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004bea:	2001      	movs	r0, #1
}
 8004bec:	bd10      	pop	{r4, pc}
	...

08004bf0 <HAL_SD_ReadBlocks_DMA>:
{
 8004bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	4615      	mov	r5, r2
 8004bfa:	461e      	mov	r6, r3
  if(NULL == pData)
 8004bfc:	460f      	mov	r7, r1
 8004bfe:	b939      	cbnz	r1, 8004c10 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004c00:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c06:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004c08:	2001      	movs	r0, #1
}
 8004c0a:	b006      	add	sp, #24
 8004c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004c10:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004c14:	b2c0      	uxtb	r0, r0
 8004c16:	2801      	cmp	r0, #1
 8004c18:	d158      	bne.n	8004ccc <HAL_SD_ReadBlocks_DMA+0xdc>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c1a:	18d3      	adds	r3, r2, r3
 8004c1c:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c1e:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c20:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c22:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c24:	d904      	bls.n	8004c30 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c2c:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004c2e:	e7ec      	b.n	8004c0a <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004c30:	2303      	movs	r3, #3
 8004c32:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004c36:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004c3a:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004c3c:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004c40:	2b01      	cmp	r3, #1
    hsd->pRxBuffPtr = (uint32_t*)pData;
 8004c42:	62a7      	str	r7, [r4, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004c44:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c48:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004c4c:	bf18      	it	ne
 8004c4e:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004c50:	f002 fa7a 	bl	8007148 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c54:	b148      	cbz	r0, 8004c6a <HAL_SD_ReadBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	4a1d      	ldr	r2, [pc, #116]	; (8004cd0 <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004c5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004c5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c5e:	4318      	orrs	r0, r3
 8004c60:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004c62:	2001      	movs	r0, #1
 8004c64:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004c68:	e7cf      	b.n	8004c0a <HAL_SD_ReadBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c6a:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004c6e:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004c72:	2390      	movs	r3, #144	; 0x90
 8004c74:	9302      	str	r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004c76:	9004      	str	r0, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004c78:	2302      	movs	r3, #2
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004c7a:	9005      	str	r0, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004c7c:	4669      	mov	r1, sp
 8004c7e:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004c80:	9303      	str	r3, [sp, #12]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004c82:	f002 fa4f 	bl	8007124 <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004c86:	6820      	ldr	r0, [r4, #0]
 8004c88:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004c8a:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8004c8e:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004c90:	68c3      	ldr	r3, [r0, #12]
 8004c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c96:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004c98:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8004c9a:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004c9c:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004c9e:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8004ca0:	d90e      	bls.n	8004cc0 <HAL_SD_ReadBlocks_DMA+0xd0>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004ca2:	2382      	movs	r3, #130	; 0x82
 8004ca4:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	f002 fa80 	bl	80071ac <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cac:	2800      	cmp	r0, #0
 8004cae:	d0ac      	beq.n	8004c0a <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004cb0:	6823      	ldr	r3, [r4, #0]
 8004cb2:	4a07      	ldr	r2, [pc, #28]	; (8004cd0 <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004cb4:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb8:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004cbc:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cbe:	e7cd      	b.n	8004c5c <HAL_SD_ReadBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004cc0:	2381      	movs	r3, #129	; 0x81
 8004cc2:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	f002 fa58 	bl	800717a <SDMMC_CmdReadSingleBlock>
 8004cca:	e7ef      	b.n	8004cac <HAL_SD_ReadBlocks_DMA+0xbc>
    return HAL_BUSY;
 8004ccc:	2002      	movs	r0, #2
 8004cce:	e79c      	b.n	8004c0a <HAL_SD_ReadBlocks_DMA+0x1a>
 8004cd0:	1fe00fff 	.word	0x1fe00fff

08004cd4 <HAL_SD_WriteBlocks_DMA>:
{
 8004cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd8:	4604      	mov	r4, r0
 8004cda:	b086      	sub	sp, #24
 8004cdc:	4615      	mov	r5, r2
 8004cde:	461e      	mov	r6, r3
  if(NULL == pData)
 8004ce0:	460f      	mov	r7, r1
 8004ce2:	b939      	cbnz	r1, 8004cf4 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ce4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004ce6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cea:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004cec:	2001      	movs	r0, #1
}
 8004cee:	b006      	add	sp, #24
 8004cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004cf4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004cf8:	b2c0      	uxtb	r0, r0
 8004cfa:	2801      	cmp	r0, #1
 8004cfc:	d159      	bne.n	8004db2 <HAL_SD_WriteBlocks_DMA+0xde>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004cfe:	18d3      	adds	r3, r2, r3
 8004d00:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d02:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d04:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d06:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d08:	d904      	bls.n	8004d14 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004d0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d10:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004d12:	e7ec      	b.n	8004cee <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004d14:	2303      	movs	r3, #3
 8004d16:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004d1a:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d1c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004d1e:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004d20:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004d24:	2b01      	cmp	r3, #1
    hsd->pTxBuffPtr = (uint32_t*)pData;
 8004d26:	6227      	str	r7, [r4, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004d28:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d2c:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004d30:	bf18      	it	ne
 8004d32:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004d34:	f002 fa08 	bl	8007148 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d38:	b148      	cbz	r0, 8004d4e <HAL_SD_WriteBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	4a1e      	ldr	r2, [pc, #120]	; (8004db8 <HAL_SD_WriteBlocks_DMA+0xe4>)
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d42:	4318      	orrs	r0, r3
 8004d44:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004d46:	2001      	movs	r0, #1
 8004d48:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004d4c:	e7cf      	b.n	8004cee <HAL_SD_WriteBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004d52:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004d56:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004d58:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004d5a:	9005      	str	r0, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004d5c:	f04f 0890 	mov.w	r8, #144	; 0x90
    SDMMC_ConfigData(hsd->Instance, &config);
 8004d60:	4669      	mov	r1, sp
 8004d62:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004d64:	f8cd 8008 	str.w	r8, [sp, #8]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004d68:	f002 f9dc 	bl	8007124 <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND)); 
 8004d6c:	6820      	ldr	r0, [r4, #0]
 8004d6e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004d70:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
 8004d74:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004d76:	68c3      	ldr	r3, [r0, #12]
 8004d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d7c:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004d7e:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8004d80:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004d82:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004d84:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8004d86:	d90e      	bls.n	8004da6 <HAL_SD_WriteBlocks_DMA+0xd2>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004d88:	23a0      	movs	r3, #160	; 0xa0
 8004d8a:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f002 fa3f 	bl	8007210 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d0ab      	beq.n	8004cee <HAL_SD_WriteBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004d96:	6823      	ldr	r3, [r4, #0]
 8004d98:	4a07      	ldr	r2, [pc, #28]	; (8004db8 <HAL_SD_WriteBlocks_DMA+0xe4>)
 8004d9a:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8004d9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d9e:	f422 728d 	bic.w	r2, r2, #282	; 0x11a
 8004da2:	63da      	str	r2, [r3, #60]	; 0x3c
 8004da4:	e7cc      	b.n	8004d40 <HAL_SD_WriteBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004da6:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8004daa:	4629      	mov	r1, r5
 8004dac:	f002 fa17 	bl	80071de <SDMMC_CmdWriteSingleBlock>
 8004db0:	e7ef      	b.n	8004d92 <HAL_SD_WriteBlocks_DMA+0xbe>
    return HAL_BUSY;
 8004db2:	2002      	movs	r0, #2
 8004db4:	e79b      	b.n	8004cee <HAL_SD_WriteBlocks_DMA+0x1a>
 8004db6:	bf00      	nop
 8004db8:	1fe00fff 	.word	0x1fe00fff

08004dbc <HAL_SD_ErrorCallback>:
 8004dbc:	4770      	bx	lr
	...

08004dc0 <HAL_SD_IRQHandler>:
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8004dc0:	6803      	ldr	r3, [r0, #0]
 8004dc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{  
 8004dc4:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8004dc6:	05d5      	lsls	r5, r2, #23
{  
 8004dc8:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8004dca:	d55f      	bpl.n	8004e8c <HAL_SD_IRQHandler+0xcc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 8004dcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dd0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT   |\
 8004dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd4:	f422 4241 	bic.w	r2, r2, #49408	; 0xc100
 8004dd8:	f022 023a 	bic.w	r2, r2, #58	; 0x3a
 8004ddc:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004dde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8004de4:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8004de6:	68da      	ldr	r2, [r3, #12]
 8004de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dec:	60da      	str	r2, [r3, #12]
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004dee:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004df0:	f012 0208 	ands.w	r2, r2, #8
 8004df4:	d023      	beq.n	8004e3e <HAL_SD_IRQHandler+0x7e>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8004df6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004df8:	0790      	lsls	r0, r2, #30
 8004dfa:	d402      	bmi.n	8004e02 <HAL_SD_IRQHandler+0x42>
 8004dfc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004dfe:	0691      	lsls	r1, r2, #26
 8004e00:	d509      	bpl.n	8004e16 <HAL_SD_IRQHandler+0x56>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e02:	4618      	mov	r0, r3
 8004e04:	f002 fa1e 	bl	8007244 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004e08:	b128      	cbz	r0, 8004e16 <HAL_SD_IRQHandler+0x56>
          hsd->ErrorCode |= errorstate;
 8004e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e0c:	4318      	orrs	r0, r3
 8004e0e:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004e10:	4620      	mov	r0, r4
 8004e12:	f7ff ffd3 	bl	8004dbc <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	4a59      	ldr	r2, [pc, #356]	; (8004f80 <HAL_SD_IRQHandler+0x1c0>)
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004e22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e24:	07da      	lsls	r2, r3, #31
 8004e26:	d503      	bpl.n	8004e30 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f017 f975 	bl	801c118 <HAL_SD_RxCpltCallback>
 8004e2e:	bd70      	pop	{r4, r5, r6, pc}
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004e30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e32:	079b      	lsls	r3, r3, #30
 8004e34:	d4f8      	bmi.n	8004e28 <HAL_SD_IRQHandler+0x68>
        HAL_SD_TxCpltCallback(hsd);
 8004e36:	4620      	mov	r0, r4
 8004e38:	f017 f969 	bl	801c10e <HAL_SD_TxCpltCallback>
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004e3e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004e40:	060e      	lsls	r6, r1, #24
 8004e42:	f140 8090 	bpl.w	8004f66 <HAL_SD_IRQHandler+0x1a6>
      hsd->Instance->DLEN = 0;
 8004e46:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8004e48:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004e4a:	651a      	str	r2, [r3, #80]	; 0x50
      if((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET)
 8004e4c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004e4e:	07d5      	lsls	r5, r2, #31
 8004e50:	d409      	bmi.n	8004e66 <HAL_SD_IRQHandler+0xa6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004e52:	4618      	mov	r0, r3
 8004e54:	f002 f9f6 	bl	8007244 <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 8004e58:	b128      	cbz	r0, 8004e66 <HAL_SD_IRQHandler+0xa6>
          hsd->ErrorCode |= errorstate;
 8004e5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e5c:	4318      	orrs	r0, r3
 8004e5e:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004e60:	4620      	mov	r0, r4
 8004e62:	f7ff ffab 	bl	8004dbc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8004e66:	2301      	movs	r3, #1
 8004e68:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 8004e6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e6e:	06d8      	lsls	r0, r3, #27
 8004e70:	d402      	bmi.n	8004e78 <HAL_SD_IRQHandler+0xb8>
 8004e72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e74:	0699      	lsls	r1, r3, #26
 8004e76:	d502      	bpl.n	8004e7e <HAL_SD_IRQHandler+0xbe>
        HAL_SD_TxCpltCallback(hsd);
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f017 f948 	bl	801c10e <HAL_SD_TxCpltCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8004e7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e80:	07da      	lsls	r2, r3, #31
 8004e82:	d4d1      	bmi.n	8004e28 <HAL_SD_IRQHandler+0x68>
 8004e84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004e86:	079b      	lsls	r3, r3, #30
 8004e88:	d4ce      	bmi.n	8004e28 <HAL_SD_IRQHandler+0x68>
 8004e8a:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 8004e8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e8e:	0456      	lsls	r6, r2, #17
 8004e90:	d50d      	bpl.n	8004eae <HAL_SD_IRQHandler+0xee>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8004e92:	6a05      	ldr	r5, [r0, #32]
 8004e94:	f105 0620 	add.w	r6, r5, #32
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 8004e98:	4629      	mov	r1, r5
 8004e9a:	6820      	ldr	r0, [r4, #0]
 8004e9c:	3504      	adds	r5, #4
 8004e9e:	f002 f880 	bl	8006fa2 <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 8004ea2:	42ae      	cmp	r6, r5
 8004ea4:	d1f8      	bne.n	8004e98 <HAL_SD_IRQHandler+0xd8>
  }
  
  hsd->pTxBuffPtr += 8;
 8004ea6:	6a23      	ldr	r3, [r4, #32]
 8004ea8:	3320      	adds	r3, #32
 8004eaa:	6223      	str	r3, [r4, #32]
 8004eac:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 8004eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb0:	0415      	lsls	r5, r2, #16
 8004eb2:	d50d      	bpl.n	8004ed0 <HAL_SD_IRQHandler+0x110>
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8004eb4:	6a85      	ldr	r5, [r0, #40]	; 0x28
 8004eb6:	1f2e      	subs	r6, r5, #4
 8004eb8:	351c      	adds	r5, #28
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	f002 f86e 	bl	8006f9c <SDMMC_ReadFIFO>
 8004ec0:	f846 0f04 	str.w	r0, [r6, #4]!
  for(count = 0; count < 8; count++)
 8004ec4:	42b5      	cmp	r5, r6
 8004ec6:	d1f8      	bne.n	8004eba <HAL_SD_IRQHandler+0xfa>
  hsd->pRxBuffPtr += 8;
 8004ec8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004eca:	3320      	adds	r3, #32
 8004ecc:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ece:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8004ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ed2:	f012 0f3a 	tst.w	r2, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8004ed8:	d036      	beq.n	8004f48 <HAL_SD_IRQHandler+0x188>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8004eda:	0791      	lsls	r1, r2, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8004edc:	bf42      	ittt	mi
 8004ede:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8004ee0:	f042 0202 	orrmi.w	r2, r2, #2
 8004ee4:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8004ee6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ee8:	0712      	lsls	r2, r2, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004eea:	bf42      	ittt	mi
 8004eec:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8004eee:	f042 0208 	orrmi.w	r2, r2, #8
 8004ef2:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8004ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef6:	0696      	lsls	r6, r2, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004ef8:	bf42      	ittt	mi
 8004efa:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8004efc:	f042 0220 	orrmi.w	r2, r2, #32
 8004f00:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8004f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f04:	06d5      	lsls	r5, r2, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 8004f06:	bf42      	ittt	mi
 8004f08:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8004f0a:	f042 0210 	orrmi.w	r2, r2, #16
 8004f0e:	6382      	strmi	r2, [r0, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f10:	4a1b      	ldr	r2, [pc, #108]	; (8004f80 <HAL_SD_IRQHandler+0x1c0>)
 8004f12:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8004f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f16:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004f1a:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8004f1c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004f1e:	f012 0208 	ands.w	r2, r2, #8
 8004f22:	d006      	beq.n	8004f32 <HAL_SD_IRQHandler+0x172>
        hsd->State = HAL_SD_STATE_READY;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f7ff ff46 	bl	8004dbc <HAL_SD_ErrorCallback>
 8004f30:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 8004f32:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004f34:	0608      	lsls	r0, r1, #24
 8004f36:	d516      	bpl.n	8004f66 <HAL_SD_IRQHandler+0x1a6>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004f38:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f3a:	b1a1      	cbz	r1, 8004f66 <HAL_SD_IRQHandler+0x1a6>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8004f3c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004f3e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8004f42:	63d9      	str	r1, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8004f44:	651a      	str	r2, [r3, #80]	; 0x50
 8004f46:	e7ed      	b.n	8004f24 <HAL_SD_IRQHandler+0x164>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_IDMABTC) != RESET)
 8004f48:	00d1      	lsls	r1, r2, #3
 8004f4a:	d50c      	bpl.n	8004f66 <HAL_SD_IRQHandler+0x1a6>
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 8004f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f4e:	f013 0f04 	tst.w	r3, #4
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8004f52:	6b03      	ldr	r3, [r0, #48]	; 0x30
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 8004f54:	d10b      	bne.n	8004f6e <HAL_SD_IRQHandler+0x1ae>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8004f56:	069a      	lsls	r2, r3, #26
 8004f58:	d506      	bpl.n	8004f68 <HAL_SD_IRQHandler+0x1a8>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 8004f5a:	f000 fb72 	bl	8005642 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8004f5e:	6823      	ldr	r3, [r4, #0]
 8004f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 8004f68:	f000 fb69 	bl	800563e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
 8004f6c:	e7f7      	b.n	8004f5e <HAL_SD_IRQHandler+0x19e>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 8004f6e:	069b      	lsls	r3, r3, #26
 8004f70:	d502      	bpl.n	8004f78 <HAL_SD_IRQHandler+0x1b8>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 8004f72:	f000 fb65 	bl	8005640 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
 8004f76:	e7f2      	b.n	8004f5e <HAL_SD_IRQHandler+0x19e>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 8004f78:	f000 fb60 	bl	800563c <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
 8004f7c:	e7ef      	b.n	8004f5e <HAL_SD_IRQHandler+0x19e>
 8004f7e:	bf00      	nop
 8004f80:	18000f3a 	.word	0x18000f3a

08004f84 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8004f84:	6e03      	ldr	r3, [r0, #96]	; 0x60
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8004f86:	0f9a      	lsrs	r2, r3, #30
 8004f88:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8004f8a:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8004f8e:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8004f90:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8004f94:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 8004f96:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004f9a:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8004f9c:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004fa0:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8004fa2:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8004fa4:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8004fa6:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004fa8:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8004faa:	0112      	lsls	r2, r2, #4
 8004fac:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8004fae:	88ca      	ldrh	r2, [r1, #6]
{
 8004fb0:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8004fb2:	b292      	uxth	r2, r2
 8004fb4:	f3c3 5403 	ubfx	r4, r3, #20, #4
 8004fb8:	4322      	orrs	r2, r4
 8004fba:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8004fbc:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8004fc0:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8004fc2:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8004fc6:	09d4      	lsrs	r4, r2, #7
 8004fc8:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8004fca:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8004fce:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8004fd0:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8004fd4:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8004fd6:	f3c2 1400 	ubfx	r4, r2, #4, #1
 8004fda:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8004fdc:	2400      	movs	r4, #0
 8004fde:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8004fe0:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8004fe2:	2c00      	cmp	r4, #0
 8004fe4:	f040 8083 	bne.w	80050ee <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8004fe8:	0292      	lsls	r2, r2, #10
 8004fea:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8004fee:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 8004ff0:	690a      	ldr	r2, [r1, #16]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8004ffc:	6e82      	ldr	r2, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8004ffe:	690b      	ldr	r3, [r1, #16]
 8005000:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8005004:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8005006:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800500a:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 800500c:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8005010:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8005012:	f3c2 5342 	ubfx	r3, r2, #21, #3
 8005016:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8005018:	f3c2 4382 	ubfx	r3, r2, #18, #3
 800501c:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 800501e:	0bd3      	lsrs	r3, r2, #15
 8005020:	f003 0306 	and.w	r3, r3, #6
 8005024:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8005026:	7e0c      	ldrb	r4, [r1, #24]
 8005028:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800502c:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 8005030:	4322      	orrs	r2, r4
 8005032:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8005034:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8005036:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8005038:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800503a:	3402      	adds	r4, #2
 800503c:	40a2      	lsls	r2, r4
 800503e:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8005040:	7a0d      	ldrb	r5, [r1, #8]
 8005042:	2401      	movs	r4, #1
 8005044:	40ac      	lsls	r4, r5
 8005046:	6504      	str	r4, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8005048:	0a64      	lsrs	r4, r4, #9
 800504a:	4362      	muls	r2, r4
 800504c:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512;
 800504e:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8005052:	6582      	str	r2, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8005054:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 800505e:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8005060:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8005062:	6e83      	ldr	r3, [r0, #104]	; 0x68
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8005064:	7e8a      	ldrb	r2, [r1, #26]
 8005066:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 800506a:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800506c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8005070:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8005072:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8005074:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 8005076:	0fda      	lsrs	r2, r3, #31
 8005078:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800507a:	f3c3 7241 	ubfx	r2, r3, #29, #2
 800507e:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8005080:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8005084:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 8005086:	0d9a      	lsrs	r2, r3, #22
 8005088:	f002 020c 	and.w	r2, r2, #12
 800508c:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 800508e:	7fca      	ldrb	r2, [r1, #31]
 8005090:	f3c3 5081 	ubfx	r0, r3, #22, #2
 8005094:	4302      	orrs	r2, r0
 8005096:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 8005098:	f3c3 5240 	ubfx	r2, r3, #21, #1
 800509c:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0;
 80050a0:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80050a2:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 80050a6:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80050aa:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 80050ae:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 80050b2:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 80050b6:	f3c3 3280 	ubfx	r2, r3, #14, #1
 80050ba:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 80050be:	f3c3 3240 	ubfx	r2, r3, #13, #1
 80050c2:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 80050c6:	f3c3 3200 	ubfx	r2, r3, #12, #1
 80050ca:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 80050ce:	f3c3 2281 	ubfx	r2, r3, #10, #2
 80050d2:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 80050d6:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80050da:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 80050de:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80050e2:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 80050ec:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80050ee:	2c01      	cmp	r4, #1
 80050f0:	d11a      	bne.n	8005128 <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80050f2:	041b      	lsls	r3, r3, #16
 80050f4:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80050f8:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80050fa:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp << 8);
 80050fc:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80050fe:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 8005100:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8005104:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 8005106:	690c      	ldr	r4, [r1, #16]
 8005108:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800510c:	4322      	orrs	r2, r4
 800510e:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8005110:	690a      	ldr	r2, [r1, #16]
 8005112:	0292      	lsls	r2, r2, #10
 8005114:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005118:	64c2      	str	r2, [r0, #76]	; 0x4c
 800511a:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 800511c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005120:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8005124:	6502      	str	r2, [r0, #80]	; 0x50
 8005126:	e794      	b.n	8005052 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8005128:	6803      	ldr	r3, [r0, #0]
 800512a:	4a05      	ldr	r2, [pc, #20]	; (8005140 <HAL_SD_GetCardCSD+0x1bc>)
 800512c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800512e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005134:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005136:	2301      	movs	r3, #1
 8005138:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 800513c:	4618      	mov	r0, r3
 800513e:	bd30      	pop	{r4, r5, pc}
 8005140:	1fe00fff 	.word	0x1fe00fff

08005144 <HAL_SD_InitCard>:
{
 8005144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005146:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005148:	2300      	movs	r3, #0
 800514a:	9307      	str	r3, [sp, #28]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800514c:	9308      	str	r3, [sp, #32]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800514e:	9309      	str	r3, [sp, #36]	; 0x24
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005150:	930a      	str	r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005152:	233c      	movs	r3, #60	; 0x3c
 8005154:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005156:	6983      	ldr	r3, [r0, #24]
 8005158:	2b01      	cmp	r3, #1
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800515a:	bf01      	itttt	eq
 800515c:	6802      	ldreq	r2, [r0, #0]
 800515e:	6813      	ldreq	r3, [r2, #0]
 8005160:	f043 0304 	orreq.w	r3, r3, #4
 8005164:	6013      	streq	r3, [r2, #0]
  status = SDMMC_Init(hsd->Instance, Init);
 8005166:	ab0a      	add	r3, sp, #40	; 0x28
{
 8005168:	4604      	mov	r4, r0
  status = SDMMC_Init(hsd->Instance, Init);
 800516a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800516e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005172:	ab07      	add	r3, sp, #28
 8005174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005176:	6820      	ldr	r0, [r4, #0]
 8005178:	f001 fef6 	bl	8006f68 <SDMMC_Init>
  if(status != HAL_OK)
 800517c:	2800      	cmp	r0, #0
 800517e:	f040 80e9 	bne.w	8005354 <HAL_SD_InitCard+0x210>
  status = SDMMC_PowerState_ON(hsd->Instance);
 8005182:	6820      	ldr	r0, [r4, #0]
 8005184:	f001 ff12 	bl	8006fac <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 8005188:	4605      	mov	r5, r0
 800518a:	2800      	cmp	r0, #0
 800518c:	f040 80e2 	bne.w	8005354 <HAL_SD_InitCard+0x210>
  HAL_Delay(2U);
 8005190:	2002      	movs	r0, #2
 8005192:	f7fb ff4b 	bl	800102c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005196:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 8005198:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800519a:	f002 f887 	bl	80072ac <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 800519e:	b958      	cbnz	r0, 80051b8 <HAL_SD_InitCard+0x74>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80051a0:	6820      	ldr	r0, [r4, #0]
 80051a2:	f002 f8ad 	bl	8007300 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 80051a6:	b170      	cbz	r0, 80051c6 <HAL_SD_InitCard+0x82>
    hsd->SdCard.CardVersion = CARD_V1_X;
 80051a8:	6425      	str	r5, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80051aa:	2100      	movs	r1, #0
 80051ac:	6820      	ldr	r0, [r4, #0]
 80051ae:	f002 f8e5 	bl	800737c <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 80051b2:	b158      	cbz	r0, 80051cc <HAL_SD_InitCard+0x88>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80051b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 80051b8:	2501      	movs	r5, #1
 80051ba:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80051be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80051c0:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 80051c2:	63a0      	str	r0, [r4, #56]	; 0x38
 80051c4:	e098      	b.n	80052f8 <HAL_SD_InitCard+0x1b4>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80051c6:	2301      	movs	r3, #1
 80051c8:	6423      	str	r3, [r4, #64]	; 0x40
 80051ca:	e7ee      	b.n	80051aa <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80051cc:	4f62      	ldr	r7, [pc, #392]	; (8005358 <HAL_SD_InitCard+0x214>)
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 80051ce:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 80051d2:	9b06      	ldr	r3, [sp, #24]
 80051d4:	42b3      	cmp	r3, r6
 80051d6:	d815      	bhi.n	8005204 <HAL_SD_InitCard+0xc0>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80051d8:	2100      	movs	r1, #0
 80051da:	6820      	ldr	r0, [r4, #0]
 80051dc:	f002 f8ce 	bl	800737c <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d1e9      	bne.n	80051b8 <HAL_SD_InitCard+0x74>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80051e4:	4639      	mov	r1, r7
 80051e6:	6820      	ldr	r0, [r4, #0]
 80051e8:	f002 f8e1 	bl	80073ae <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 80051ec:	4601      	mov	r1, r0
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d1e0      	bne.n	80051b4 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80051f2:	6820      	ldr	r0, [r4, #0]
 80051f4:	f001 fefc 	bl	8006ff0 <SDMMC_GetResponse>
      count++;
 80051f8:	9b06      	ldr	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 80051fa:	2800      	cmp	r0, #0
      count++;
 80051fc:	f103 0301 	add.w	r3, r3, #1
 8005200:	9306      	str	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 8005202:	dae6      	bge.n	80051d2 <HAL_SD_InitCard+0x8e>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005204:	9a06      	ldr	r2, [sp, #24]
 8005206:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800520a:	429a      	cmp	r2, r3
 800520c:	d902      	bls.n	8005214 <HAL_SD_InitCard+0xd0>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800520e:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8005212:	e7d1      	b.n	80051b8 <HAL_SD_InitCard+0x74>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005214:	0043      	lsls	r3, r0, #1
 8005216:	d532      	bpl.n	800527e <HAL_SD_InitCard+0x13a>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005218:	2301      	movs	r3, #1
 800521a:	63e3      	str	r3, [r4, #60]	; 0x3c
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 800521c:	69a3      	ldr	r3, [r4, #24]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d12d      	bne.n	800527e <HAL_SD_InitCard+0x13a>
        if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8005222:	01c7      	lsls	r7, r0, #7
 8005224:	d52b      	bpl.n	800527e <HAL_SD_InitCard+0x13a>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005226:	6820      	ldr	r0, [r4, #0]
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800522c:	65e3      	str	r3, [r4, #92]	; 0x5c
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800522e:	6803      	ldr	r3, [r0, #0]
 8005230:	f043 0303 	orr.w	r3, r3, #3
 8005234:	6003      	str	r3, [r0, #0]
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8005236:	f002 f99f 	bl	8007578 <SDMMC_CmdVoltageSwitch>
          if(errorstate != HAL_SD_ERROR_NONE)
 800523a:	2800      	cmp	r0, #0
 800523c:	d1bc      	bne.n	80051b8 <HAL_SD_InitCard+0x74>
          while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP);
 800523e:	6823      	ldr	r3, [r4, #0]
 8005240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005242:	0156      	lsls	r6, r2, #5
 8005244:	d5fc      	bpl.n	8005240 <HAL_SD_InitCard+0xfc>
          hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8005246:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800524a:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800524c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524e:	02d8      	lsls	r0, r3, #11
 8005250:	d5b0      	bpl.n	80051b4 <HAL_SD_InitCard+0x70>
            HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8005252:	2001      	movs	r0, #1
 8005254:	f000 f965 	bl	8005522 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
            hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	f042 0202 	orr.w	r2, r2, #2
 8005260:	601a      	str	r2, [r3, #0]
            while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND);
 8005262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005264:	0191      	lsls	r1, r2, #6
 8005266:	d5fc      	bpl.n	8005262 <HAL_SD_InitCard+0x11e>
            hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8005268:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
            if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800526e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005270:	02d2      	lsls	r2, r2, #11
 8005272:	d4cc      	bmi.n	800520e <HAL_SD_InitCard+0xca>
            hsd->Instance->POWER = 0x13; 
 8005274:	2213      	movs	r2, #19
 8005276:	601a      	str	r2, [r3, #0]
            hsd->Instance->ICR = 0xFFFFFFFF;
 8005278:	f04f 32ff 	mov.w	r2, #4294967295
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1;
 800527e:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8005280:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8005282:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8005286:	f001 fe9d 	bl	8006fc4 <SDMMC_GetPowerState>
 800528a:	b910      	cbnz	r0, 8005292 <HAL_SD_InitCard+0x14e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800528c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005290:	e03c      	b.n	800530c <HAL_SD_InitCard+0x1c8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005292:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005294:	2b03      	cmp	r3, #3
 8005296:	d018      	beq.n	80052ca <HAL_SD_InitCard+0x186>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8005298:	6820      	ldr	r0, [r4, #0]
 800529a:	f002 f8b7 	bl	800740c <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 800529e:	2800      	cmp	r0, #0
 80052a0:	d134      	bne.n	800530c <HAL_SD_InitCard+0x1c8>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80052a2:	4601      	mov	r1, r0
 80052a4:	6820      	ldr	r0, [r4, #0]
 80052a6:	f001 fea3 	bl	8006ff0 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80052aa:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80052ac:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80052ae:	6820      	ldr	r0, [r4, #0]
 80052b0:	f001 fe9e 	bl	8006ff0 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80052b4:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80052b6:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80052b8:	6820      	ldr	r0, [r4, #0]
 80052ba:	f001 fe99 	bl	8006ff0 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80052be:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80052c0:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80052c2:	6820      	ldr	r0, [r4, #0]
 80052c4:	f001 fe94 	bl	8006ff0 <SDMMC_GetResponse>
 80052c8:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80052ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052cc:	2b03      	cmp	r3, #3
 80052ce:	d116      	bne.n	80052fe <HAL_SD_InitCard+0x1ba>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80052d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80052d2:	2b03      	cmp	r3, #3
 80052d4:	d120      	bne.n	8005318 <HAL_SD_InitCard+0x1d4>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80052d6:	2104      	movs	r1, #4
 80052d8:	6820      	ldr	r0, [r4, #0]
 80052da:	f001 fe89 	bl	8006ff0 <SDMMC_GetResponse>
 80052de:	0d00      	lsrs	r0, r0, #20
 80052e0:	6460      	str	r0, [r4, #68]	; 0x44
  HAL_SD_GetCardCSD(hsd, &CSD);
 80052e2:	a90d      	add	r1, sp, #52	; 0x34
 80052e4:	4620      	mov	r0, r4
 80052e6:	f7ff fe4d 	bl	8004f84 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80052ea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80052ec:	6820      	ldr	r0, [r4, #0]
 80052ee:	0412      	lsls	r2, r2, #16
 80052f0:	2300      	movs	r3, #0
 80052f2:	f001 ffc1 	bl	8007278 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 80052f6:	b948      	cbnz	r0, 800530c <HAL_SD_InitCard+0x1c8>
}
 80052f8:	4628      	mov	r0, r5
 80052fa:	b019      	add	sp, #100	; 0x64
 80052fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80052fe:	f10d 0116 	add.w	r1, sp, #22
 8005302:	6820      	ldr	r0, [r4, #0]
 8005304:	f002 f8ae 	bl	8007464 <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005308:	2800      	cmp	r0, #0
 800530a:	d0e1      	beq.n	80052d0 <HAL_SD_InitCard+0x18c>
    hsd->State = HAL_SD_STATE_READY;
 800530c:	2501      	movs	r5, #1
 800530e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005312:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005314:	4308      	orrs	r0, r1
 8005316:	e754      	b.n	80051c2 <HAL_SD_InitCard+0x7e>
    hsd->SdCard.RelCardAdd = sd_rca;
 8005318:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 800531c:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800531e:	6820      	ldr	r0, [r4, #0]
 8005320:	0409      	lsls	r1, r1, #16
 8005322:	f002 f889 	bl	8007438 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005326:	2800      	cmp	r0, #0
 8005328:	d1f0      	bne.n	800530c <HAL_SD_InitCard+0x1c8>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800532a:	4601      	mov	r1, r0
 800532c:	6820      	ldr	r0, [r4, #0]
 800532e:	f001 fe5f 	bl	8006ff0 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005332:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005334:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005336:	6820      	ldr	r0, [r4, #0]
 8005338:	f001 fe5a 	bl	8006ff0 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800533c:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800533e:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005340:	6820      	ldr	r0, [r4, #0]
 8005342:	f001 fe55 	bl	8006ff0 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005346:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005348:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800534a:	6820      	ldr	r0, [r4, #0]
 800534c:	f001 fe50 	bl	8006ff0 <SDMMC_GetResponse>
 8005350:	66e0      	str	r0, [r4, #108]	; 0x6c
 8005352:	e7c0      	b.n	80052d6 <HAL_SD_InitCard+0x192>
    return HAL_ERROR;
 8005354:	2501      	movs	r5, #1
 8005356:	e7cf      	b.n	80052f8 <HAL_SD_InitCard+0x1b4>
 8005358:	c1100000 	.word	0xc1100000

0800535c <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800535c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800535e:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005360:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005362:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005364:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005366:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005368:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800536a:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800536c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800536e:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005370:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005372:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005374:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005376:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005378:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800537a:	61cb      	str	r3, [r1, #28]
}
 800537c:	2000      	movs	r0, #0
 800537e:	4770      	bx	lr

08005380 <HAL_SD_ConfigWideBusOperation>:
{
 8005380:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8005382:	2303      	movs	r3, #3
 8005384:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005388:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800538a:	2b03      	cmp	r3, #3
{
 800538c:	b08a      	sub	sp, #40	; 0x28
 800538e:	4604      	mov	r4, r0
 8005390:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005392:	d002      	beq.n	800539a <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005394:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005398:	d103      	bne.n	80053a2 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800539a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800539c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053a0:	e056      	b.n	8005450 <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80053a2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 80053a6:	d12d      	bne.n	8005404 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2] = {0, 0};
 80053a8:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80053aa:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 80053ac:	9104      	str	r1, [sp, #16]
 80053ae:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80053b0:	f001 fe1e 	bl	8006ff0 <SDMMC_GetResponse>
 80053b4:	0180      	lsls	r0, r0, #6
 80053b6:	d41f      	bmi.n	80053f8 <HAL_SD_ConfigWideBusOperation+0x78>
  errorstate = SD_FindSCR(hsd, scr);
 80053b8:	a904      	add	r1, sp, #16
 80053ba:	4620      	mov	r0, r4
 80053bc:	f7ff fb9c 	bl	8004af8 <SD_FindSCR>
  if(errorstate != HAL_OK)
 80053c0:	b960      	cbnz	r0, 80053dc <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80053c2:	9b05      	ldr	r3, [sp, #20]
 80053c4:	0359      	lsls	r1, r3, #13
 80053c6:	d51a      	bpl.n	80053fe <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80053c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80053ca:	6820      	ldr	r0, [r4, #0]
 80053cc:	0409      	lsls	r1, r1, #16
 80053ce:	f001 ffd5 	bl	800737c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80053d2:	b918      	cbnz	r0, 80053dc <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 80053d4:	2102      	movs	r1, #2
 80053d6:	6820      	ldr	r0, [r4, #0]
 80053d8:	f002 f8cc 	bl	8007574 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80053dc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053de:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 80053e0:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80053e2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80053e4:	2d00      	cmp	r5, #0
 80053e6:	d035      	beq.n	8005454 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80053e8:	6823      	ldr	r3, [r4, #0]
 80053ea:	4a26      	ldr	r2, [pc, #152]	; (8005484 <HAL_SD_ConfigWideBusOperation+0x104>)
 80053ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053ee:	2001      	movs	r0, #1
 80053f0:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 80053f4:	b00a      	add	sp, #40	; 0x28
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80053f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80053fc:	e7ee      	b.n	80053dc <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80053fe:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005402:	e7eb      	b.n	80053dc <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005404:	bb09      	cbnz	r1, 800544a <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005406:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8005408:	9104      	str	r1, [sp, #16]
 800540a:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800540c:	f001 fdf0 	bl	8006ff0 <SDMMC_GetResponse>
 8005410:	0182      	lsls	r2, r0, #6
 8005412:	d414      	bmi.n	800543e <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 8005414:	a904      	add	r1, sp, #16
 8005416:	4620      	mov	r0, r4
 8005418:	f7ff fb6e 	bl	8004af8 <SD_FindSCR>
  if(errorstate != HAL_OK)
 800541c:	b960      	cbnz	r0, 8005438 <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800541e:	9b05      	ldr	r3, [sp, #20]
 8005420:	03db      	lsls	r3, r3, #15
 8005422:	d50f      	bpl.n	8005444 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005424:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005426:	6820      	ldr	r0, [r4, #0]
 8005428:	0409      	lsls	r1, r1, #16
 800542a:	f001 ffa7 	bl	800737c <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 800542e:	b918      	cbnz	r0, 8005438 <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 8005430:	4601      	mov	r1, r0
 8005432:	6820      	ldr	r0, [r4, #0]
 8005434:	f002 f89e 	bl	8007574 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8005438:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800543a:	4308      	orrs	r0, r1
 800543c:	e7d0      	b.n	80053e0 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800543e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005442:	e7f9      	b.n	8005438 <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005444:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005448:	e7f6      	b.n	8005438 <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800544a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800544c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005450:	63a3      	str	r3, [r4, #56]	; 0x38
 8005452:	e7c6      	b.n	80053e2 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005454:	6863      	ldr	r3, [r4, #4]
 8005456:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005458:	68a3      	ldr	r3, [r4, #8]
 800545a:	9305      	str	r3, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800545c:	6923      	ldr	r3, [r4, #16]
 800545e:	9307      	str	r3, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005460:	6963      	ldr	r3, [r4, #20]
 8005462:	9308      	str	r3, [sp, #32]
    SDMMC_Init(hsd->Instance, Init);
 8005464:	ab0a      	add	r3, sp, #40	; 0x28
 8005466:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800546a:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.BusWide             = WideMode;
 800546e:	9606      	str	r6, [sp, #24]
    SDMMC_Init(hsd->Instance, Init);
 8005470:	ab04      	add	r3, sp, #16
 8005472:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	f001 fd77 	bl	8006f68 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 800547a:	2301      	movs	r3, #1
 800547c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005480:	4628      	mov	r0, r5
 8005482:	e7b7      	b.n	80053f4 <HAL_SD_ConfigWideBusOperation+0x74>
 8005484:	1fe00fff 	.word	0x1fe00fff

08005488 <HAL_SD_Init>:
{ 
 8005488:	b538      	push	{r3, r4, r5, lr}
  if(hsd == NULL)
 800548a:	4604      	mov	r4, r0
 800548c:	b910      	cbnz	r0, 8005494 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 800548e:	2501      	movs	r5, #1
}
 8005490:	4628      	mov	r0, r5
 8005492:	bd38      	pop	{r3, r4, r5, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8005494:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 8005498:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800549c:	b913      	cbnz	r3, 80054a4 <HAL_SD_Init+0x1c>
    hsd->Lock = HAL_UNLOCKED;
 800549e:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 80054a0:	f01a fb74 	bl	801fb8c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80054a4:	2303      	movs	r3, #3
 80054a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80054aa:	4620      	mov	r0, r4
 80054ac:	f7ff fe4a 	bl	8005144 <HAL_SD_InitCard>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d1ec      	bne.n	800548e <HAL_SD_Init+0x6>
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80054b4:	68e1      	ldr	r1, [r4, #12]
 80054b6:	4620      	mov	r0, r4
 80054b8:	f7ff ff62 	bl	8005380 <HAL_SD_ConfigWideBusOperation>
 80054bc:	4605      	mov	r5, r0
 80054be:	2800      	cmp	r0, #0
 80054c0:	d1e5      	bne.n	800548e <HAL_SD_Init+0x6>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80054c2:	69a3      	ldr	r3, [r4, #24]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d006      	beq.n	80054d6 <HAL_SD_Init+0x4e>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80054c8:	2300      	movs	r3, #0
 80054ca:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 80054cc:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80054d4:	e7dc      	b.n	8005490 <HAL_SD_Init+0x8>
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 80054d6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80054d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054dc:	d002      	beq.n	80054e4 <HAL_SD_Init+0x5c>
 80054de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d1f1      	bne.n	80054c8 <HAL_SD_Init+0x40>
      hsd->Instance->CLKCR |= 0x00100000;
 80054e4:	6822      	ldr	r2, [r4, #0]
 80054e6:	6853      	ldr	r3, [r2, #4]
 80054e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ec:	6053      	str	r3, [r2, #4]
      if(HAL_SDEx_HighSpeed(hsd) != HAL_OK)
 80054ee:	4620      	mov	r0, r4
 80054f0:	f000 f818 	bl	8005524 <HAL_SDEx_HighSpeed>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d0e7      	beq.n	80054c8 <HAL_SD_Init+0x40>
 80054f8:	e7c9      	b.n	800548e <HAL_SD_Init+0x6>

080054fa <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80054fa:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 80054fc:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80054fe:	0409      	lsls	r1, r1, #16
{
 8005500:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005502:	6800      	ldr	r0, [r0, #0]
 8005504:	f002 f804 	bl	8007510 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 8005508:	4601      	mov	r1, r0
 800550a:	b928      	cbnz	r0, 8005518 <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800550c:	6820      	ldr	r0, [r4, #0]
 800550e:	f001 fd6f 	bl	8006ff0 <SDMMC_GetResponse>
  return cardstate;
 8005512:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8005516:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 8005518:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800551a:	4319      	orrs	r1, r3
 800551c:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 800551e:	2000      	movs	r0, #0
 8005520:	e7f7      	b.n	8005512 <HAL_SD_GetCardState+0x18>

08005522 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transciver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8005522:	4770      	bx	lr

08005524 <HAL_SDEx_HighSpeed>:
{
 8005524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t SD_hs[64]  = {0};
 8005528:	2640      	movs	r6, #64	; 0x40
{
 800552a:	b096      	sub	sp, #88	; 0x58
 800552c:	4605      	mov	r5, r0
  uint8_t SD_hs[64]  = {0};
 800552e:	4632      	mov	r2, r6
 8005530:	2100      	movs	r1, #0
 8005532:	a806      	add	r0, sp, #24
 8005534:	f01a fea5 	bl	8020282 <memset>
  uint32_t Timeout = HAL_GetTick();
 8005538:	f7fb fd72 	bl	8001020 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 800553c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 800553e:	4680      	mov	r8, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8005540:	2b00      	cmp	r3, #0
 8005542:	d074      	beq.n	800562e <HAL_SDEx_HighSpeed+0x10a>
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 8005544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005548:	d004      	beq.n	8005554 <HAL_SDEx_HighSpeed+0x30>
  uint32_t errorstate = HAL_OK;
 800554a:	2400      	movs	r4, #0
}
 800554c:	4620      	mov	r0, r4
 800554e:	b016      	add	sp, #88	; 0x58
 8005550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      (hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE))
 8005554:	69af      	ldr	r7, [r5, #24]
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 8005556:	2f01      	cmp	r7, #1
 8005558:	d1f7      	bne.n	800554a <HAL_SDEx_HighSpeed+0x26>
    hsd->Instance->DCTRL = 0;
 800555a:	6828      	ldr	r0, [r5, #0]
 800555c:	2300      	movs	r3, #0
 800555e:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 8005560:	4631      	mov	r1, r6
 8005562:	f001 fdf1 	bl	8007148 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_OK)
 8005566:	4604      	mov	r4, r0
 8005568:	2800      	cmp	r0, #0
 800556a:	d1ef      	bne.n	800554c <HAL_SDEx_HighSpeed+0x28>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 800556c:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataLength    = 64;
 8005570:	e88d 0048 	stmia.w	sp, {r3, r6}
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8005574:	2360      	movs	r3, #96	; 0x60
 8005576:	9302      	str	r3, [sp, #8]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005578:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800557a:	2302      	movs	r3, #2
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 800557c:	4669      	mov	r1, sp
 800557e:	6828      	ldr	r0, [r5, #0]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005580:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005582:	9705      	str	r7, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005584:	f001 fdce 	bl	8007124 <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 8005588:	492a      	ldr	r1, [pc, #168]	; (8005634 <HAL_SDEx_HighSpeed+0x110>)
 800558a:	6828      	ldr	r0, [r5, #0]
 800558c:	f001 ffd9 	bl	8007542 <SDMMC_CmdSwitch>
    if(errorstate != HAL_OK)
 8005590:	4604      	mov	r4, r0
 8005592:	2800      	cmp	r0, #0
 8005594:	d1da      	bne.n	800554c <HAL_SDEx_HighSpeed+0x28>
 8005596:	ae06      	add	r6, sp, #24
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 8005598:	f240 592a 	movw	r9, #1322	; 0x52a
 800559c:	682b      	ldr	r3, [r5, #0]
 800559e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055a0:	ea12 0f09 	tst.w	r2, r9
 80055a4:	d005      	beq.n	80055b2 <HAL_SDEx_HighSpeed+0x8e>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80055a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055a8:	0710      	lsls	r0, r2, #28
 80055aa:	d51e      	bpl.n	80055ea <HAL_SDEx_HighSpeed+0xc6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80055ac:	2208      	movs	r2, #8
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 80055b0:	e7cc      	b.n	800554c <HAL_SDEx_HighSpeed+0x28>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	041f      	lsls	r7, r3, #16
 80055b6:	d50a      	bpl.n	80055ce <HAL_SDEx_HighSpeed+0xaa>
 80055b8:	1f37      	subs	r7, r6, #4
 80055ba:	f106 0a1c 	add.w	sl, r6, #28
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 80055be:	6828      	ldr	r0, [r5, #0]
 80055c0:	f001 fcec 	bl	8006f9c <SDMMC_ReadFIFO>
 80055c4:	f847 0f04 	str.w	r0, [r7, #4]!
        for (count = 0; count < 8; count++)
 80055c8:	4557      	cmp	r7, sl
 80055ca:	d1f8      	bne.n	80055be <HAL_SDEx_HighSpeed+0x9a>
        tempbuff += 8;
 80055cc:	3620      	adds	r6, #32
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 80055ce:	f7fb fd27 	bl	8001020 <HAL_GetTick>
 80055d2:	eba0 0008 	sub.w	r0, r0, r8
 80055d6:	3001      	adds	r0, #1
 80055d8:	d1e0      	bne.n	800559c <HAL_SDEx_HighSpeed+0x78>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80055da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055de:	63ab      	str	r3, [r5, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80055e0:	2301      	movs	r3, #1
 80055e2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        return HAL_TIMEOUT;
 80055e6:	2403      	movs	r4, #3
 80055e8:	e7b0      	b.n	800554c <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80055ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ec:	0791      	lsls	r1, r2, #30
 80055ee:	d502      	bpl.n	80055f6 <HAL_SDEx_HighSpeed+0xd2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80055f0:	2402      	movs	r4, #2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80055f2:	639c      	str	r4, [r3, #56]	; 0x38
      return errorstate;
 80055f4:	e7aa      	b.n	800554c <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80055f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055f8:	0692      	lsls	r2, r2, #26
 80055fa:	d501      	bpl.n	8005600 <HAL_SDEx_HighSpeed+0xdc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80055fc:	2420      	movs	r4, #32
 80055fe:	e7f8      	b.n	80055f2 <HAL_SDEx_HighSpeed+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005600:	4a0d      	ldr	r2, [pc, #52]	; (8005638 <HAL_SDEx_HighSpeed+0x114>)
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
    if ((SD_hs[13]& 2) != 2)
 8005604:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8005608:	079b      	lsls	r3, r3, #30
 800560a:	d502      	bpl.n	8005612 <HAL_SDEx_HighSpeed+0xee>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 800560c:	2001      	movs	r0, #1
 800560e:	f7ff ff88 	bl	8005522 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005612:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005616:	6828      	ldr	r0, [r5, #0]
 8005618:	f001 fd96 	bl	8007148 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 800561c:	2800      	cmp	r0, #0
 800561e:	d094      	beq.n	800554a <HAL_SDEx_HighSpeed+0x26>
      hsd->State = HAL_SD_STATE_READY;
 8005620:	2401      	movs	r4, #1
 8005622:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
      hsd->ErrorCode |= errorstate;
 8005626:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005628:	4318      	orrs	r0, r3
 800562a:	63a8      	str	r0, [r5, #56]	; 0x38
      return HAL_ERROR;
 800562c:	e78e      	b.n	800554c <HAL_SDEx_HighSpeed+0x28>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE; 
 800562e:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 8005632:	e78b      	b.n	800554c <HAL_SDEx_HighSpeed+0x28>
 8005634:	80ffff01 	.word	0x80ffff01
 8005638:	18000f3a 	.word	0x18000f3a

0800563c <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
 800563c:	4770      	bx	lr

0800563e <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
 800563e:	4770      	bx	lr

08005640 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
 8005640:	4770      	bx	lr

08005642 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 8005642:	4770      	bx	lr

08005644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005644:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005646:	4604      	mov	r4, r0
 8005648:	2800      	cmp	r0, #0
 800564a:	d04a      	beq.n	80056e2 <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800564c:	2300      	movs	r3, #0
 800564e:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005650:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8005654:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005658:	b91b      	cbnz	r3, 8005662 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800565a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800565e:	f01a f8b1 	bl	801f7c4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005662:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005664:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8005666:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800566a:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800566c:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 800566e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005672:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8005676:	600b      	str	r3, [r1, #0]
 8005678:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800567c:	d92e      	bls.n	80056dc <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800567e:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005680:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005684:	bf18      	it	ne
 8005686:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8005688:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800568a:	b92b      	cbnz	r3, 8005698 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800568c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005690:	bf8c      	ite	hi
 8005692:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005694:	2301      	movls	r3, #1
 8005696:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8005698:	68a6      	ldr	r6, [r4, #8]
 800569a:	6863      	ldr	r3, [r4, #4]
 800569c:	69a5      	ldr	r5, [r4, #24]
 800569e:	4333      	orrs	r3, r6
 80056a0:	6926      	ldr	r6, [r4, #16]
 80056a2:	4333      	orrs	r3, r6
 80056a4:	6966      	ldr	r6, [r4, #20]
 80056a6:	4333      	orrs	r3, r6
 80056a8:	69e6      	ldr	r6, [r4, #28]
 80056aa:	4333      	orrs	r3, r6
 80056ac:	6a26      	ldr	r6, [r4, #32]
 80056ae:	4333      	orrs	r3, r6
 80056b0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056b2:	4333      	orrs	r3, r6
 80056b4:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80056b8:	4333      	orrs	r3, r6
 80056ba:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80056bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056be:	431a      	orrs	r2, r3
 80056c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80056c2:	0c2d      	lsrs	r5, r5, #16
 80056c4:	431a      	orrs	r2, r3
 80056c6:	f005 0504 	and.w	r5, r5, #4
 80056ca:	432a      	orrs	r2, r5
 80056cc:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 80056ce:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056d0:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80056d2:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80056d4:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056d6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

	
  return HAL_OK;
 80056da:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80056dc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80056e0:	e7d0      	b.n	8005684 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 80056e2:	2001      	movs	r0, #1
}
 80056e4:	bd70      	pop	{r4, r5, r6, pc}

080056e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056ea:	461d      	mov	r5, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ec:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80056f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 80056f4:	2b01      	cmp	r3, #1
{
 80056f6:	4604      	mov	r4, r0
 80056f8:	460e      	mov	r6, r1
 80056fa:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 80056fc:	d07d      	beq.n	80057fa <HAL_SPI_TransmitReceive+0x114>
 80056fe:	2301      	movs	r3, #1
 8005700:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005704:	f7fb fc8c 	bl	8001020 <HAL_GetTick>

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005708:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	hspi->TxISR       = NULL;


  /* Set the Rx Fifo threshold */
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800570c:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 800570e:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005712:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005714:	bf1c      	itt	ne
 8005716:	2305      	movne	r3, #5
 8005718:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800571c:	2300      	movs	r3, #0
 800571e:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 8005720:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8005724:	87e5      	strh	r5, [r4, #62]	; 0x3e
	hspi->TxISR       = NULL;
 8005726:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005728:	6853      	ldr	r3, [r2, #4]
	hspi->TxXferSize  = Size;
 800572a:	87a5      	strh	r5, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800572c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005730:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005732:	63a6      	str	r6, [r4, #56]	; 0x38
  tickstart = HAL_GetTick();
 8005734:	4681      	mov	r9, r0
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005736:	6053      	str	r3, [r2, #4]
  uint32_t txallowed = 1U;
 8005738:	2501      	movs	r5, #1


    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800573a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800573c:	b29b      	uxth	r3, r3
 800573e:	b95b      	cbnz	r3, 8005758 <HAL_SPI_TransmitReceive+0x72>
 8005740:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 8005744:	b280      	uxth	r0, r0
 8005746:	b938      	cbnz	r0, 8005758 <HAL_SPI_TransmitReceive+0x72>
    }
 // }


error :
  hspi->State = HAL_SPI_STATE_READY;
 8005748:	2301      	movs	r3, #1
 800574a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800574e:	2300      	movs	r3, #0
 8005750:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8005754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8005758:	b195      	cbz	r5, 8005780 <HAL_SPI_TransmitReceive+0x9a>
 800575a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800575c:	b29b      	uxth	r3, r3
 800575e:	b17b      	cbz	r3, 8005780 <HAL_SPI_TransmitReceive+0x9a>
 8005760:	6823      	ldr	r3, [r4, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	0791      	lsls	r1, r2, #30
 8005766:	d50b      	bpl.n	8005780 <HAL_SPI_TransmitReceive+0x9a>
        if (hspi->TxXferCount > 1U)
 8005768:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800576a:	b292      	uxth	r2, r2
 800576c:	2a01      	cmp	r2, #1
 800576e:	d932      	bls.n	80057d6 <HAL_SPI_TransmitReceive+0xf0>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8005770:	f836 2b02 	ldrh.w	r2, [r6], #2
 8005774:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8005776:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005778:	3b02      	subs	r3, #2
 800577a:	b29b      	uxth	r3, r3
 800577c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800577e:	2500      	movs	r5, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005780:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005784:	b29b      	uxth	r3, r3
 8005786:	b1db      	cbz	r3, 80057c0 <HAL_SPI_TransmitReceive+0xda>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	07d2      	lsls	r2, r2, #31
 800578e:	d517      	bpl.n	80057c0 <HAL_SPI_TransmitReceive+0xda>
        if (hspi->RxXferCount > 1U)
 8005790:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005794:	b292      	uxth	r2, r2
 8005796:	2a01      	cmp	r2, #1
 8005798:	d925      	bls.n	80057e6 <HAL_SPI_TransmitReceive+0x100>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	f827 2b02 	strh.w	r2, [r7], #2
          hspi->RxXferCount -= 2U;
 80057a0:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80057a4:	3a02      	subs	r2, #2
 80057a6:	b292      	uxth	r2, r2
 80057a8:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80057ac:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80057b0:	b292      	uxth	r2, r2
 80057b2:	2a01      	cmp	r2, #1
 80057b4:	d803      	bhi.n	80057be <HAL_SPI_TransmitReceive+0xd8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80057bc:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 80057be:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 80057c0:	f1b8 3fff 	cmp.w	r8, #4294967295
 80057c4:	d0b9      	beq.n	800573a <HAL_SPI_TransmitReceive+0x54>
 80057c6:	f7fb fc2b 	bl	8001020 <HAL_GetTick>
 80057ca:	eba0 0009 	sub.w	r0, r0, r9
 80057ce:	4580      	cmp	r8, r0
 80057d0:	d8b3      	bhi.n	800573a <HAL_SPI_TransmitReceive+0x54>
        errorcode = HAL_TIMEOUT;
 80057d2:	2003      	movs	r0, #3
 80057d4:	e7b8      	b.n	8005748 <HAL_SPI_TransmitReceive+0x62>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80057d6:	7832      	ldrb	r2, [r6, #0]
 80057d8:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80057da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29b      	uxth	r3, r3
 80057e0:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80057e2:	3601      	adds	r6, #1
 80057e4:	e7cb      	b.n	800577e <HAL_SPI_TransmitReceive+0x98>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057e6:	7b1b      	ldrb	r3, [r3, #12]
 80057e8:	703b      	strb	r3, [r7, #0]
          hspi->RxXferCount--;
 80057ea:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80057ee:	3b01      	subs	r3, #1
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80057f6:	3701      	adds	r7, #1
 80057f8:	e7e1      	b.n	80057be <HAL_SPI_TransmitReceive+0xd8>
  __HAL_LOCK(hspi);
 80057fa:	2002      	movs	r0, #2
  return errorcode;
}
 80057fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005800 <HAL_SPI_ErrorCallback>:
 8005800:	4770      	bx	lr
	...

08005804 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8005804:	6803      	ldr	r3, [r0, #0]
{
 8005806:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8005808:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800580a:	689a      	ldr	r2, [r3, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 800580c:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8005810:	2d01      	cmp	r5, #1
{
 8005812:	b085      	sub	sp, #20
 8005814:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8005816:	d105      	bne.n	8005824 <HAL_SPI_IRQHandler+0x20>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8005818:	064d      	lsls	r5, r1, #25
 800581a:	d503      	bpl.n	8005824 <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 800581c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 800581e:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 8005820:	b005      	add	sp, #20
 8005822:	bd30      	pop	{r4, r5, pc}
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8005824:	0795      	lsls	r5, r2, #30
 8005826:	d504      	bpl.n	8005832 <HAL_SPI_IRQHandler+0x2e>
 8005828:	0608      	lsls	r0, r1, #24
 800582a:	d502      	bpl.n	8005832 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 800582c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800582e:	4620      	mov	r0, r4
 8005830:	e7f5      	b.n	800581e <HAL_SPI_IRQHandler+0x1a>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8005832:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8005836:	d0f3      	beq.n	8005820 <HAL_SPI_IRQHandler+0x1c>
 8005838:	068d      	lsls	r5, r1, #26
 800583a:	d5f1      	bpl.n	8005820 <HAL_SPI_IRQHandler+0x1c>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 800583c:	0650      	lsls	r0, r2, #25
 800583e:	d50f      	bpl.n	8005860 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005840:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005844:	2803      	cmp	r0, #3
 8005846:	f04f 0500 	mov.w	r5, #0
 800584a:	d041      	beq.n	80058d0 <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800584c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800584e:	f040 0004 	orr.w	r0, r0, #4
 8005852:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005854:	9500      	str	r5, [sp, #0]
 8005856:	68d8      	ldr	r0, [r3, #12]
 8005858:	9000      	str	r0, [sp, #0]
 800585a:	6898      	ldr	r0, [r3, #8]
 800585c:	9000      	str	r0, [sp, #0]
 800585e:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8005860:	0695      	lsls	r5, r2, #26
 8005862:	d50c      	bpl.n	800587e <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005864:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005866:	f040 0001 	orr.w	r0, r0, #1
 800586a:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800586c:	2000      	movs	r0, #0
 800586e:	9002      	str	r0, [sp, #8]
 8005870:	6898      	ldr	r0, [r3, #8]
 8005872:	9002      	str	r0, [sp, #8]
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 800587a:	6018      	str	r0, [r3, #0]
 800587c:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 800587e:	05d0      	lsls	r0, r2, #23
 8005880:	d508      	bpl.n	8005894 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005882:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005884:	f042 0208 	orr.w	r2, r2, #8
 8005888:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800588a:	2200      	movs	r2, #0
 800588c:	9203      	str	r2, [sp, #12]
 800588e:	689a      	ldr	r2, [r3, #8]
 8005890:	9203      	str	r2, [sp, #12]
 8005892:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005894:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005896:	2a00      	cmp	r2, #0
 8005898:	d0c2      	beq.n	8005820 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058a0:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80058a2:	2201      	movs	r2, #1
 80058a4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80058a8:	078a      	lsls	r2, r1, #30
 80058aa:	d018      	beq.n	80058de <HAL_SPI_IRQHandler+0xda>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80058ac:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80058ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80058b0:	f022 0203 	bic.w	r2, r2, #3
 80058b4:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80058b6:	b118      	cbz	r0, 80058c0 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80058b8:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <HAL_SPI_IRQHandler+0xe4>)
 80058ba:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 80058bc:	f7fc f8f3 	bl	8001aa6 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 80058c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d0ac      	beq.n	8005820 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80058c6:	4b08      	ldr	r3, [pc, #32]	; (80058e8 <HAL_SPI_IRQHandler+0xe4>)
 80058c8:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmatx);
 80058ca:	f7fc f8ec 	bl	8001aa6 <HAL_DMA_Abort_IT>
 80058ce:	e7a7      	b.n	8005820 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058d0:	9501      	str	r5, [sp, #4]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	9201      	str	r2, [sp, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	9301      	str	r3, [sp, #4]
 80058da:	9b01      	ldr	r3, [sp, #4]
        return;
 80058dc:	e7a0      	b.n	8005820 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 80058de:	4620      	mov	r0, r4
 80058e0:	f7ff ff8e 	bl	8005800 <HAL_SPI_ErrorCallback>
 80058e4:	e79c      	b.n	8005820 <HAL_SPI_IRQHandler+0x1c>
 80058e6:	bf00      	nop
 80058e8:	080058ed 	.word	0x080058ed

080058ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058ec:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058ee:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80058f6:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 80058f8:	f7ff ff82 	bl	8005800 <HAL_SPI_ErrorCallback>
 80058fc:	bd08      	pop	{r3, pc}
	...

08005900 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005900:	6a03      	ldr	r3, [r0, #32]
 8005902:	f023 0301 	bic.w	r3, r3, #1
 8005906:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005908:	6a03      	ldr	r3, [r0, #32]
{
 800590a:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800590c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800590e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005910:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005912:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005916:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800591a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800591c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800591e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005922:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005924:	4d1b      	ldr	r5, [pc, #108]	; (8005994 <TIM_OC1_SetConfig+0x94>)
 8005926:	42a8      	cmp	r0, r5
 8005928:	d00f      	beq.n	800594a <TIM_OC1_SetConfig+0x4a>
 800592a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800592e:	42a8      	cmp	r0, r5
 8005930:	d00b      	beq.n	800594a <TIM_OC1_SetConfig+0x4a>
 8005932:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005936:	42a8      	cmp	r0, r5
 8005938:	d007      	beq.n	800594a <TIM_OC1_SetConfig+0x4a>
 800593a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800593e:	42a8      	cmp	r0, r5
 8005940:	d003      	beq.n	800594a <TIM_OC1_SetConfig+0x4a>
 8005942:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005946:	42a8      	cmp	r0, r5
 8005948:	d11e      	bne.n	8005988 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800594a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800594c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005950:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005952:	4d10      	ldr	r5, [pc, #64]	; (8005994 <TIM_OC1_SetConfig+0x94>)
 8005954:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005956:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595a:	d00f      	beq.n	800597c <TIM_OC1_SetConfig+0x7c>
 800595c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005960:	42a8      	cmp	r0, r5
 8005962:	d00b      	beq.n	800597c <TIM_OC1_SetConfig+0x7c>
 8005964:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005968:	42a8      	cmp	r0, r5
 800596a:	d007      	beq.n	800597c <TIM_OC1_SetConfig+0x7c>
 800596c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005970:	42a8      	cmp	r0, r5
 8005972:	d003      	beq.n	800597c <TIM_OC1_SetConfig+0x7c>
 8005974:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005978:	42a8      	cmp	r0, r5
 800597a:	d105      	bne.n	8005988 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800597c:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005980:	698e      	ldr	r6, [r1, #24]
 8005982:	694c      	ldr	r4, [r1, #20]
 8005984:	4334      	orrs	r4, r6
 8005986:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005988:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800598a:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800598c:	684a      	ldr	r2, [r1, #4]
 800598e:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005990:	6203      	str	r3, [r0, #32]
 8005992:	bd70      	pop	{r4, r5, r6, pc}
 8005994:	40012c00 	.word	0x40012c00

08005998 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005998:	6a03      	ldr	r3, [r0, #32]
 800599a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800599e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a0:	6a03      	ldr	r3, [r0, #32]
{
 80059a2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059a6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80059ae:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80059b2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059b4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80059b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059be:	4d16      	ldr	r5, [pc, #88]	; (8005a18 <TIM_OC3_SetConfig+0x80>)
 80059c0:	42a8      	cmp	r0, r5
 80059c2:	d003      	beq.n	80059cc <TIM_OC3_SetConfig+0x34>
 80059c4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80059c8:	42a8      	cmp	r0, r5
 80059ca:	d10d      	bne.n	80059e8 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059cc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059d6:	4d10      	ldr	r5, [pc, #64]	; (8005a18 <TIM_OC3_SetConfig+0x80>)
 80059d8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80059da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059de:	d00e      	beq.n	80059fe <TIM_OC3_SetConfig+0x66>
 80059e0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80059e4:	42a8      	cmp	r0, r5
 80059e6:	d00a      	beq.n	80059fe <TIM_OC3_SetConfig+0x66>
 80059e8:	4d0c      	ldr	r5, [pc, #48]	; (8005a1c <TIM_OC3_SetConfig+0x84>)
 80059ea:	42a8      	cmp	r0, r5
 80059ec:	d007      	beq.n	80059fe <TIM_OC3_SetConfig+0x66>
 80059ee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059f2:	42a8      	cmp	r0, r5
 80059f4:	d003      	beq.n	80059fe <TIM_OC3_SetConfig+0x66>
 80059f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80059fa:	42a8      	cmp	r0, r5
 80059fc:	d106      	bne.n	8005a0c <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059fe:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a02:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a04:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a06:	4334      	orrs	r4, r6
 8005a08:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a0c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a0e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a10:	684a      	ldr	r2, [r1, #4]
 8005a12:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a14:	6203      	str	r3, [r0, #32]
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	40012c00 	.word	0x40012c00
 8005a1c:	40014000 	.word	0x40014000

08005a20 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a20:	6a03      	ldr	r3, [r0, #32]
 8005a22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a26:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a28:	6a03      	ldr	r3, [r0, #32]
{
 8005a2a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a2c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a2e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a30:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a32:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005a36:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a3a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a3e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005a40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a44:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a48:	4d0e      	ldr	r5, [pc, #56]	; (8005a84 <TIM_OC4_SetConfig+0x64>)
 8005a4a:	42a8      	cmp	r0, r5
 8005a4c:	d00f      	beq.n	8005a6e <TIM_OC4_SetConfig+0x4e>
 8005a4e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005a52:	42a8      	cmp	r0, r5
 8005a54:	d00b      	beq.n	8005a6e <TIM_OC4_SetConfig+0x4e>
 8005a56:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005a5a:	42a8      	cmp	r0, r5
 8005a5c:	d007      	beq.n	8005a6e <TIM_OC4_SetConfig+0x4e>
 8005a5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005a62:	42a8      	cmp	r0, r5
 8005a64:	d003      	beq.n	8005a6e <TIM_OC4_SetConfig+0x4e>
 8005a66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005a6a:	42a8      	cmp	r0, r5
 8005a6c:	d104      	bne.n	8005a78 <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a6e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a70:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a74:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a78:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a7a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a7c:	684a      	ldr	r2, [r1, #4]
 8005a7e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a80:	6203      	str	r3, [r0, #32]
 8005a82:	bd30      	pop	{r4, r5, pc}
 8005a84:	40012c00 	.word	0x40012c00

08005a88 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005a88:	6a03      	ldr	r3, [r0, #32]
 8005a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a8e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a90:	6a03      	ldr	r3, [r0, #32]
{
 8005a92:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a94:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a96:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a98:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a9a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005a9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005aa2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005aa4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005aa6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005aaa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aae:	4d0f      	ldr	r5, [pc, #60]	; (8005aec <TIM_OC5_SetConfig+0x64>)
 8005ab0:	42a8      	cmp	r0, r5
 8005ab2:	d00f      	beq.n	8005ad4 <TIM_OC5_SetConfig+0x4c>
 8005ab4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ab8:	42a8      	cmp	r0, r5
 8005aba:	d00b      	beq.n	8005ad4 <TIM_OC5_SetConfig+0x4c>
 8005abc:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005ac0:	42a8      	cmp	r0, r5
 8005ac2:	d007      	beq.n	8005ad4 <TIM_OC5_SetConfig+0x4c>
 8005ac4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ac8:	42a8      	cmp	r0, r5
 8005aca:	d003      	beq.n	8005ad4 <TIM_OC5_SetConfig+0x4c>
 8005acc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ad0:	42a8      	cmp	r0, r5
 8005ad2:	d104      	bne.n	8005ade <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ad4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ad6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005ada:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ade:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ae0:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ae2:	684a      	ldr	r2, [r1, #4]
 8005ae4:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae6:	6203      	str	r3, [r0, #32]
 8005ae8:	bd30      	pop	{r4, r5, pc}
 8005aea:	bf00      	nop
 8005aec:	40012c00 	.word	0x40012c00

08005af0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005af0:	6a03      	ldr	r3, [r0, #32]
 8005af2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005af6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005af8:	6a03      	ldr	r3, [r0, #32]
{
 8005afa:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005afc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005afe:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b00:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b02:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005b06:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b0a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b0e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b14:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b18:	4d0e      	ldr	r5, [pc, #56]	; (8005b54 <TIM_OC6_SetConfig+0x64>)
 8005b1a:	42a8      	cmp	r0, r5
 8005b1c:	d00f      	beq.n	8005b3e <TIM_OC6_SetConfig+0x4e>
 8005b1e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005b22:	42a8      	cmp	r0, r5
 8005b24:	d00b      	beq.n	8005b3e <TIM_OC6_SetConfig+0x4e>
 8005b26:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005b2a:	42a8      	cmp	r0, r5
 8005b2c:	d007      	beq.n	8005b3e <TIM_OC6_SetConfig+0x4e>
 8005b2e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b32:	42a8      	cmp	r0, r5
 8005b34:	d003      	beq.n	8005b3e <TIM_OC6_SetConfig+0x4e>
 8005b36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005b3a:	42a8      	cmp	r0, r5
 8005b3c:	d104      	bne.n	8005b48 <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b3e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b40:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b44:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b48:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b4a:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b4c:	684a      	ldr	r2, [r1, #4]
 8005b4e:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b50:	6203      	str	r3, [r0, #32]
 8005b52:	bd30      	pop	{r4, r5, pc}
 8005b54:	40012c00 	.word	0x40012c00

08005b58 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005b58:	2302      	movs	r3, #2
{
 8005b5a:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8005b5c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005b60:	6803      	ldr	r3, [r0, #0]
 8005b62:	4c09      	ldr	r4, [pc, #36]	; (8005b88 <HAL_TIM_Base_Start+0x30>)
 8005b64:	6899      	ldr	r1, [r3, #8]
 8005b66:	4021      	ands	r1, r4
 8005b68:	2906      	cmp	r1, #6
 8005b6a:	d008      	beq.n	8005b7e <HAL_TIM_Base_Start+0x26>
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	4022      	ands	r2, r4
 8005b70:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005b74:	bf1e      	ittt	ne
 8005b76:	681a      	ldrne	r2, [r3, #0]
 8005b78:	f042 0201 	orrne.w	r2, r2, #1
 8005b7c:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005b84:	2000      	movs	r0, #0
 8005b86:	bd10      	pop	{r4, pc}
 8005b88:	00010007 	.word	0x00010007

08005b8c <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b8c:	6803      	ldr	r3, [r0, #0]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005b8e:	480a      	ldr	r0, [pc, #40]	; (8005bb8 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b90:	68da      	ldr	r2, [r3, #12]
 8005b92:	f042 0201 	orr.w	r2, r2, #1
 8005b96:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005b98:	6899      	ldr	r1, [r3, #8]
 8005b9a:	4001      	ands	r1, r0
 8005b9c:	2906      	cmp	r1, #6
 8005b9e:	d008      	beq.n	8005bb2 <HAL_TIM_Base_Start_IT+0x26>
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	4002      	ands	r2, r0
 8005ba4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005ba8:	bf1e      	ittt	ne
 8005baa:	681a      	ldrne	r2, [r3, #0]
 8005bac:	f042 0201 	orrne.w	r2, r2, #1
 8005bb0:	601a      	strne	r2, [r3, #0]
}
 8005bb2:	2000      	movs	r0, #0
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	00010007 	.word	0x00010007

08005bbc <HAL_TIM_PeriodElapsedCallback>:
 8005bbc:	4770      	bx	lr

08005bbe <HAL_TIM_OC_DelayElapsedCallback>:
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_TIM_IC_CaptureCallback>:
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_TIM_TriggerCallback>:
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bc6:	6803      	ldr	r3, [r0, #0]
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	0791      	lsls	r1, r2, #30
{
 8005bcc:	b510      	push	{r4, lr}
 8005bce:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005bd0:	d50f      	bpl.n	8005bf2 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	0792      	lsls	r2, r2, #30
 8005bd6:	d50c      	bpl.n	8005bf2 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005bd8:	f06f 0202 	mvn.w	r2, #2
 8005bdc:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bde:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005be0:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005be2:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005be4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005be6:	f000 8085 	beq.w	8005cf4 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005bea:	f7ff ffe9 	bl	8005bc0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	0752      	lsls	r2, r2, #29
 8005bf8:	d510      	bpl.n	8005c1c <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	0750      	lsls	r0, r2, #29
 8005bfe:	d50d      	bpl.n	8005c1c <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005c00:	f06f 0204 	mvn.w	r2, #4
 8005c04:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c06:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c08:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c0a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005c0e:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005c10:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c12:	d075      	beq.n	8005d00 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c14:	f7ff ffd4 	bl	8005bc0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c1c:	6823      	ldr	r3, [r4, #0]
 8005c1e:	691a      	ldr	r2, [r3, #16]
 8005c20:	0711      	lsls	r1, r2, #28
 8005c22:	d50f      	bpl.n	8005c44 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	0712      	lsls	r2, r2, #28
 8005c28:	d50c      	bpl.n	8005c44 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c2a:	f06f 0208 	mvn.w	r2, #8
 8005c2e:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c30:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c32:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c34:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c36:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005c38:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c3a:	d067      	beq.n	8005d0c <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c3c:	f7ff ffc0 	bl	8005bc0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c40:	2300      	movs	r3, #0
 8005c42:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	06d0      	lsls	r0, r2, #27
 8005c4a:	d510      	bpl.n	8005c6e <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	06d1      	lsls	r1, r2, #27
 8005c50:	d50d      	bpl.n	8005c6e <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c52:	f06f 0210 	mvn.w	r2, #16
 8005c56:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c58:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c5a:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c5c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c60:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005c62:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c64:	d058      	beq.n	8005d18 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005c66:	f7ff ffab 	bl	8005bc0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c6e:	6823      	ldr	r3, [r4, #0]
 8005c70:	691a      	ldr	r2, [r3, #16]
 8005c72:	07d2      	lsls	r2, r2, #31
 8005c74:	d508      	bpl.n	8005c88 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	07d0      	lsls	r0, r2, #31
 8005c7a:	d505      	bpl.n	8005c88 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c7c:	f06f 0201 	mvn.w	r2, #1
 8005c80:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c82:	4620      	mov	r0, r4
 8005c84:	f7ff ff9a 	bl	8005bbc <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	691a      	ldr	r2, [r3, #16]
 8005c8c:	0611      	lsls	r1, r2, #24
 8005c8e:	d508      	bpl.n	8005ca2 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	0612      	lsls	r2, r2, #24
 8005c94:	d505      	bpl.n	8005ca2 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c96:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005c9c:	4620      	mov	r0, r4
 8005c9e:	f000 fb98 	bl	80063d2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	691a      	ldr	r2, [r3, #16]
 8005ca6:	05d0      	lsls	r0, r2, #23
 8005ca8:	d508      	bpl.n	8005cbc <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005caa:	68da      	ldr	r2, [r3, #12]
 8005cac:	0611      	lsls	r1, r2, #24
 8005cae:	d505      	bpl.n	8005cbc <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005cb0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005cb4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005cb6:	4620      	mov	r0, r4
 8005cb8:	f000 fb8c 	bl	80063d4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	691a      	ldr	r2, [r3, #16]
 8005cc0:	0652      	lsls	r2, r2, #25
 8005cc2:	d508      	bpl.n	8005cd6 <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	0650      	lsls	r0, r2, #25
 8005cc8:	d505      	bpl.n	8005cd6 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f7ff ff77 	bl	8005bc4 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	691a      	ldr	r2, [r3, #16]
 8005cda:	0691      	lsls	r1, r2, #26
 8005cdc:	d522      	bpl.n	8005d24 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cde:	68da      	ldr	r2, [r3, #12]
 8005ce0:	0692      	lsls	r2, r2, #26
 8005ce2:	d51f      	bpl.n	8005d24 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ce4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8005ce8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cea:	611a      	str	r2, [r3, #16]
}
 8005cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8005cf0:	f000 bb6e 	b.w	80063d0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cf4:	f7ff ff63 	bl	8005bbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	f7ff ff62 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005cfe:	e776      	b.n	8005bee <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d00:	f7ff ff5d 	bl	8005bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d04:	4620      	mov	r0, r4
 8005d06:	f7ff ff5c 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005d0a:	e785      	b.n	8005c18 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d0c:	f7ff ff57 	bl	8005bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d10:	4620      	mov	r0, r4
 8005d12:	f7ff ff56 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005d16:	e793      	b.n	8005c40 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d18:	f7ff ff51 	bl	8005bbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f7ff ff50 	bl	8005bc2 <HAL_TIM_PWM_PulseFinishedCallback>
 8005d22:	e7a2      	b.n	8005c6a <HAL_TIM_IRQHandler+0xa4>
 8005d24:	bd10      	pop	{r4, pc}
	...

08005d28 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d28:	4a30      	ldr	r2, [pc, #192]	; (8005dec <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005d2a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d2c:	4290      	cmp	r0, r2
 8005d2e:	d012      	beq.n	8005d56 <TIM_Base_SetConfig+0x2e>
 8005d30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005d34:	d00f      	beq.n	8005d56 <TIM_Base_SetConfig+0x2e>
 8005d36:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005d3a:	4290      	cmp	r0, r2
 8005d3c:	d00b      	beq.n	8005d56 <TIM_Base_SetConfig+0x2e>
 8005d3e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d42:	4290      	cmp	r0, r2
 8005d44:	d007      	beq.n	8005d56 <TIM_Base_SetConfig+0x2e>
 8005d46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d4a:	4290      	cmp	r0, r2
 8005d4c:	d003      	beq.n	8005d56 <TIM_Base_SetConfig+0x2e>
 8005d4e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005d52:	4290      	cmp	r0, r2
 8005d54:	d119      	bne.n	8005d8a <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005d56:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005d5c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d5e:	4a23      	ldr	r2, [pc, #140]	; (8005dec <TIM_Base_SetConfig+0xc4>)
 8005d60:	4290      	cmp	r0, r2
 8005d62:	d01d      	beq.n	8005da0 <TIM_Base_SetConfig+0x78>
 8005d64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005d68:	d01a      	beq.n	8005da0 <TIM_Base_SetConfig+0x78>
 8005d6a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005d6e:	4290      	cmp	r0, r2
 8005d70:	d016      	beq.n	8005da0 <TIM_Base_SetConfig+0x78>
 8005d72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d76:	4290      	cmp	r0, r2
 8005d78:	d012      	beq.n	8005da0 <TIM_Base_SetConfig+0x78>
 8005d7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d7e:	4290      	cmp	r0, r2
 8005d80:	d00e      	beq.n	8005da0 <TIM_Base_SetConfig+0x78>
 8005d82:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005d86:	4290      	cmp	r0, r2
 8005d88:	d00a      	beq.n	8005da0 <TIM_Base_SetConfig+0x78>
 8005d8a:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <TIM_Base_SetConfig+0xc8>)
 8005d8c:	4290      	cmp	r0, r2
 8005d8e:	d007      	beq.n	8005da0 <TIM_Base_SetConfig+0x78>
 8005d90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d94:	4290      	cmp	r0, r2
 8005d96:	d003      	beq.n	8005da0 <TIM_Base_SetConfig+0x78>
 8005d98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d9c:	4290      	cmp	r0, r2
 8005d9e:	d103      	bne.n	8005da8 <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005da0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005da6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da8:	694a      	ldr	r2, [r1, #20]
 8005daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dae:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005db0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005db2:	688b      	ldr	r3, [r1, #8]
 8005db4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005db6:	680b      	ldr	r3, [r1, #0]
 8005db8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <TIM_Base_SetConfig+0xc4>)
 8005dbc:	4298      	cmp	r0, r3
 8005dbe:	d00f      	beq.n	8005de0 <TIM_Base_SetConfig+0xb8>
 8005dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc4:	4298      	cmp	r0, r3
 8005dc6:	d00b      	beq.n	8005de0 <TIM_Base_SetConfig+0xb8>
 8005dc8:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005dcc:	4298      	cmp	r0, r3
 8005dce:	d007      	beq.n	8005de0 <TIM_Base_SetConfig+0xb8>
 8005dd0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dd4:	4298      	cmp	r0, r3
 8005dd6:	d003      	beq.n	8005de0 <TIM_Base_SetConfig+0xb8>
 8005dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ddc:	4298      	cmp	r0, r3
 8005dde:	d101      	bne.n	8005de4 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8005de0:	690b      	ldr	r3, [r1, #16]
 8005de2:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005de4:	2301      	movs	r3, #1
 8005de6:	6143      	str	r3, [r0, #20]
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40012c00 	.word	0x40012c00
 8005df0:	40014000 	.word	0x40014000

08005df4 <HAL_TIM_Base_Init>:
{
 8005df4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005df6:	4604      	mov	r4, r0
 8005df8:	b1a0      	cbz	r0, 8005e24 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005dfa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005dfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e02:	b91b      	cbnz	r3, 8005e0c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005e04:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005e08:	f019 fdae 	bl	801f968 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e12:	6820      	ldr	r0, [r4, #0]
 8005e14:	1d21      	adds	r1, r4, #4
 8005e16:	f7ff ff87 	bl	8005d28 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005e20:	2000      	movs	r0, #0
 8005e22:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005e24:	2001      	movs	r0, #1
}
 8005e26:	bd10      	pop	{r4, pc}

08005e28 <HAL_TIM_OC_Init>:
{
 8005e28:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	b1a0      	cbz	r0, 8005e58 <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005e2e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005e32:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e36:	b91b      	cbnz	r3, 8005e40 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005e38:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8005e3c:	f019 fdf6 	bl	801fa2c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005e40:	2302      	movs	r3, #2
 8005e42:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005e46:	6820      	ldr	r0, [r4, #0]
 8005e48:	1d21      	adds	r1, r4, #4
 8005e4a:	f7ff ff6d 	bl	8005d28 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005e54:	2000      	movs	r0, #0
 8005e56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005e58:	2001      	movs	r0, #1
}
 8005e5a:	bd10      	pop	{r4, pc}

08005e5c <HAL_TIM_PWM_Init>:
{
 8005e5c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005e5e:	4604      	mov	r4, r0
 8005e60:	b1a0      	cbz	r0, 8005e8c <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005e62:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005e66:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e6a:	b91b      	cbnz	r3, 8005e74 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005e6c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005e70:	f019 fec8 	bl	801fc04 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005e74:	2302      	movs	r3, #2
 8005e76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e7a:	6820      	ldr	r0, [r4, #0]
 8005e7c:	1d21      	adds	r1, r4, #4
 8005e7e:	f7ff ff53 	bl	8005d28 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005e82:	2301      	movs	r3, #1
 8005e84:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005e88:	2000      	movs	r0, #0
 8005e8a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005e8c:	2001      	movs	r0, #1
}
 8005e8e:	bd10      	pop	{r4, pc}

08005e90 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e90:	6a03      	ldr	r3, [r0, #32]
 8005e92:	f023 0310 	bic.w	r3, r3, #16
 8005e96:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005e98:	6a03      	ldr	r3, [r0, #32]
{
 8005e9a:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8005e9c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005e9e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ea0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ea2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005ea6:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eaa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eae:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005eb0:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005eb4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005eb8:	4d16      	ldr	r5, [pc, #88]	; (8005f14 <TIM_OC2_SetConfig+0x84>)
 8005eba:	42a8      	cmp	r0, r5
 8005ebc:	d003      	beq.n	8005ec6 <TIM_OC2_SetConfig+0x36>
 8005ebe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ec2:	42a8      	cmp	r0, r5
 8005ec4:	d10d      	bne.n	8005ee2 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ec6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ecc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed0:	4d10      	ldr	r5, [pc, #64]	; (8005f14 <TIM_OC2_SetConfig+0x84>)
 8005ed2:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ed4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed8:	d00e      	beq.n	8005ef8 <TIM_OC2_SetConfig+0x68>
 8005eda:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005ede:	42a8      	cmp	r0, r5
 8005ee0:	d00a      	beq.n	8005ef8 <TIM_OC2_SetConfig+0x68>
 8005ee2:	4d0d      	ldr	r5, [pc, #52]	; (8005f18 <TIM_OC2_SetConfig+0x88>)
 8005ee4:	42a8      	cmp	r0, r5
 8005ee6:	d007      	beq.n	8005ef8 <TIM_OC2_SetConfig+0x68>
 8005ee8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005eec:	42a8      	cmp	r0, r5
 8005eee:	d003      	beq.n	8005ef8 <TIM_OC2_SetConfig+0x68>
 8005ef0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ef4:	42a8      	cmp	r0, r5
 8005ef6:	d106      	bne.n	8005f06 <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ef8:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005efc:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005efe:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f00:	4334      	orrs	r4, r6
 8005f02:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 8005f06:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005f08:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005f0a:	684a      	ldr	r2, [r1, #4]
 8005f0c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005f0e:	6203      	str	r3, [r0, #32]
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
 8005f12:	bf00      	nop
 8005f14:	40012c00 	.word	0x40012c00
 8005f18:	40014000 	.word	0x40014000

08005f1c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8005f1c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005f20:	2b01      	cmp	r3, #1
{
 8005f22:	b510      	push	{r4, lr}
 8005f24:	4604      	mov	r4, r0
 8005f26:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005f2a:	d010      	beq.n	8005f4e <HAL_TIM_OC_ConfigChannel+0x32>
 8005f2c:	2301      	movs	r3, #1
  switch (Channel)
 8005f2e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005f30:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8005f38:	d01c      	beq.n	8005f74 <HAL_TIM_OC_ConfigChannel+0x58>
 8005f3a:	d809      	bhi.n	8005f50 <HAL_TIM_OC_ConfigChannel+0x34>
 8005f3c:	b192      	cbz	r2, 8005f64 <HAL_TIM_OC_ConfigChannel+0x48>
 8005f3e:	2a04      	cmp	r2, #4
 8005f40:	d014      	beq.n	8005f6c <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 8005f42:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005f44:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005f46:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005f4a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005f4e:	bd10      	pop	{r4, pc}
  switch (Channel)
 8005f50:	2a10      	cmp	r2, #16
 8005f52:	d013      	beq.n	8005f7c <HAL_TIM_OC_ConfigChannel+0x60>
 8005f54:	2a14      	cmp	r2, #20
 8005f56:	d015      	beq.n	8005f84 <HAL_TIM_OC_ConfigChannel+0x68>
 8005f58:	2a0c      	cmp	r2, #12
 8005f5a:	d1f2      	bne.n	8005f42 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f5c:	6820      	ldr	r0, [r4, #0]
 8005f5e:	f7ff fd5f 	bl	8005a20 <TIM_OC4_SetConfig>
      break;
 8005f62:	e7ee      	b.n	8005f42 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f64:	6820      	ldr	r0, [r4, #0]
 8005f66:	f7ff fccb 	bl	8005900 <TIM_OC1_SetConfig>
      break;
 8005f6a:	e7ea      	b.n	8005f42 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f6c:	6820      	ldr	r0, [r4, #0]
 8005f6e:	f7ff ff8f 	bl	8005e90 <TIM_OC2_SetConfig>
      break;
 8005f72:	e7e6      	b.n	8005f42 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f74:	6820      	ldr	r0, [r4, #0]
 8005f76:	f7ff fd0f 	bl	8005998 <TIM_OC3_SetConfig>
      break;
 8005f7a:	e7e2      	b.n	8005f42 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f7c:	6820      	ldr	r0, [r4, #0]
 8005f7e:	f7ff fd83 	bl	8005a88 <TIM_OC5_SetConfig>
      break;
 8005f82:	e7de      	b.n	8005f42 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005f84:	6820      	ldr	r0, [r4, #0]
 8005f86:	f7ff fdb3 	bl	8005af0 <TIM_OC6_SetConfig>
      break;
 8005f8a:	e7da      	b.n	8005f42 <HAL_TIM_OC_ConfigChannel+0x26>

08005f8c <HAL_TIM_PWM_ConfigChannel>:
{
 8005f8c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005f8e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005f92:	2b01      	cmp	r3, #1
{
 8005f94:	4604      	mov	r4, r0
 8005f96:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005f9a:	d010      	beq.n	8005fbe <HAL_TIM_PWM_ConfigChannel+0x32>
 8005f9c:	2301      	movs	r3, #1
  switch (Channel)
 8005f9e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8005fa0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8005fa8:	d043      	beq.n	8006032 <HAL_TIM_PWM_ConfigChannel+0xa6>
 8005faa:	d809      	bhi.n	8005fc0 <HAL_TIM_PWM_ConfigChannel+0x34>
 8005fac:	b1fa      	cbz	r2, 8005fee <HAL_TIM_PWM_ConfigChannel+0x62>
 8005fae:	2a04      	cmp	r2, #4
 8005fb0:	d02e      	beq.n	8006010 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8005fb2:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005fb4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005fb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005fba:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8005fc0:	2a10      	cmp	r2, #16
 8005fc2:	d047      	beq.n	8006054 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8005fc4:	2a14      	cmp	r2, #20
 8005fc6:	d056      	beq.n	8006076 <HAL_TIM_PWM_ConfigChannel+0xea>
 8005fc8:	2a0c      	cmp	r2, #12
 8005fca:	d1f2      	bne.n	8005fb2 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fcc:	6820      	ldr	r0, [r4, #0]
 8005fce:	f7ff fd27 	bl	8005a20 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fd2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fd4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fd6:	69da      	ldr	r2, [r3, #28]
 8005fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fe6:	69da      	ldr	r2, [r3, #28]
 8005fe8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005fec:	e030      	b.n	8006050 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fee:	6820      	ldr	r0, [r4, #0]
 8005ff0:	f7ff fc86 	bl	8005900 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ff4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ff6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	f042 0208 	orr.w	r2, r2, #8
 8005ffe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	f022 0204 	bic.w	r2, r2, #4
 8006006:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800600c:	619a      	str	r2, [r3, #24]
      break;
 800600e:	e7d0      	b.n	8005fb2 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006010:	6820      	ldr	r0, [r4, #0]
 8006012:	f7ff ff3d 	bl	8005e90 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006016:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006018:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800601a:	699a      	ldr	r2, [r3, #24]
 800601c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006020:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006022:	699a      	ldr	r2, [r3, #24]
 8006024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006028:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800602a:	699a      	ldr	r2, [r3, #24]
 800602c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006030:	e7ec      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006032:	6820      	ldr	r0, [r4, #0]
 8006034:	f7ff fcb0 	bl	8005998 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006038:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800603a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800603c:	69da      	ldr	r2, [r3, #28]
 800603e:	f042 0208 	orr.w	r2, r2, #8
 8006042:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006044:	69da      	ldr	r2, [r3, #28]
 8006046:	f022 0204 	bic.w	r2, r2, #4
 800604a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800604c:	69da      	ldr	r2, [r3, #28]
 800604e:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006050:	61da      	str	r2, [r3, #28]
      break;
 8006052:	e7ae      	b.n	8005fb2 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006054:	6820      	ldr	r0, [r4, #0]
 8006056:	f7ff fd17 	bl	8005a88 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800605a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800605c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800605e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006060:	f042 0208 	orr.w	r2, r2, #8
 8006064:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006066:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006068:	f022 0204 	bic.w	r2, r2, #4
 800606c:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800606e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006070:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006072:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006074:	e79d      	b.n	8005fb2 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006076:	6820      	ldr	r0, [r4, #0]
 8006078:	f7ff fd3a 	bl	8005af0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800607c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800607e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006082:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006086:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006088:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800608a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800608e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006092:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006096:	e7ec      	b.n	8006072 <HAL_TIM_PWM_ConfigChannel+0xe6>

08006098 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006098:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800609a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800609c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800609e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060a2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80060a6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a8:	6083      	str	r3, [r0, #8]
 80060aa:	bd10      	pop	{r4, pc}

080060ac <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80060ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80060b0:	2b01      	cmp	r3, #1
{
 80060b2:	b570      	push	{r4, r5, r6, lr}
 80060b4:	4604      	mov	r4, r0
 80060b6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80060ba:	d017      	beq.n	80060ec <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80060bc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80060c0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80060c2:	2301      	movs	r3, #1
 80060c4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80060c8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060ca:	4b48      	ldr	r3, [pc, #288]	; (80061ec <HAL_TIM_ConfigClockSource+0x140>)
 80060cc:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80060ce:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80060d0:	680b      	ldr	r3, [r1, #0]
 80060d2:	2b40      	cmp	r3, #64	; 0x40
 80060d4:	d072      	beq.n	80061bc <HAL_TIM_ConfigClockSource+0x110>
 80060d6:	d815      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x58>
 80060d8:	2b10      	cmp	r3, #16
 80060da:	d00c      	beq.n	80060f6 <HAL_TIM_ConfigClockSource+0x4a>
 80060dc:	d807      	bhi.n	80060ee <HAL_TIM_ConfigClockSource+0x42>
 80060de:	b153      	cbz	r3, 80060f6 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 80060e0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80060e2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80060e4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80060e8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80060ec:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d001      	beq.n	80060f6 <HAL_TIM_ConfigClockSource+0x4a>
 80060f2:	2b30      	cmp	r3, #48	; 0x30
 80060f4:	d1f4      	bne.n	80060e0 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 80060f6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060f8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80060fc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006100:	4313      	orrs	r3, r2
 8006102:	e033      	b.n	800616c <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8006104:	2b70      	cmp	r3, #112	; 0x70
 8006106:	d033      	beq.n	8006170 <HAL_TIM_ConfigClockSource+0xc4>
 8006108:	d81b      	bhi.n	8006142 <HAL_TIM_ConfigClockSource+0x96>
 800610a:	2b50      	cmp	r3, #80	; 0x50
 800610c:	d03f      	beq.n	800618e <HAL_TIM_ConfigClockSource+0xe2>
 800610e:	2b60      	cmp	r3, #96	; 0x60
 8006110:	d1e6      	bne.n	80060e0 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006112:	684d      	ldr	r5, [r1, #4]
 8006114:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006116:	6a01      	ldr	r1, [r0, #32]
 8006118:	f021 0110 	bic.w	r1, r1, #16
 800611c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8006120:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006122:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006126:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800612a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800612e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8006132:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8006134:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006136:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800613c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8006140:	e014      	b.n	800616c <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8006142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006146:	d00c      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0xb6>
 8006148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800614c:	d1c8      	bne.n	80060e0 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 800614e:	68cb      	ldr	r3, [r1, #12]
 8006150:	684a      	ldr	r2, [r1, #4]
 8006152:	6889      	ldr	r1, [r1, #8]
 8006154:	f7ff ffa0 	bl	8006098 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006158:	6822      	ldr	r2, [r4, #0]
 800615a:	6893      	ldr	r3, [r2, #8]
 800615c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006160:	e013      	b.n	800618a <HAL_TIM_ConfigClockSource+0xde>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006162:	6883      	ldr	r3, [r0, #8]
 8006164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006168:	f023 0307 	bic.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800616c:	6083      	str	r3, [r0, #8]
 800616e:	e7b7      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8006170:	68cb      	ldr	r3, [r1, #12]
 8006172:	684a      	ldr	r2, [r1, #4]
 8006174:	6889      	ldr	r1, [r1, #8]
 8006176:	f7ff ff8f 	bl	8006098 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800617a:	6822      	ldr	r2, [r4, #0]
 800617c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800617e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006182:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006186:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800618a:	6093      	str	r3, [r2, #8]
      break;
 800618c:	e7a8      	b.n	80060e0 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800618e:	684a      	ldr	r2, [r1, #4]
 8006190:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006192:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006194:	6a05      	ldr	r5, [r0, #32]
 8006196:	f025 0501 	bic.w	r5, r5, #1
 800619a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800619c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800619e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061a6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80061aa:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80061ac:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80061ae:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80061b0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80061b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 80061ba:	e7d7      	b.n	800616c <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061bc:	684a      	ldr	r2, [r1, #4]
 80061be:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80061c0:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061c2:	6a05      	ldr	r5, [r0, #32]
 80061c4:	f025 0501 	bic.w	r5, r5, #1
 80061c8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ca:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061cc:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061d4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80061d8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80061da:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80061dc:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80061de:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80061e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061e4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80061e8:	e7c0      	b.n	800616c <HAL_TIM_ConfigClockSource+0xc0>
 80061ea:	bf00      	nop
 80061ec:	fffe0088 	.word	0xfffe0088

080061f0 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061f0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061f2:	f001 011f 	and.w	r1, r1, #31
{
 80061f6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061f8:	2401      	movs	r4, #1
 80061fa:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80061fc:	ea23 0304 	bic.w	r3, r3, r4
 8006200:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006202:	6a03      	ldr	r3, [r0, #32]
 8006204:	408a      	lsls	r2, r1
 8006206:	431a      	orrs	r2, r3
 8006208:	6202      	str	r2, [r0, #32]
 800620a:	bd10      	pop	{r4, pc}

0800620c <HAL_TIM_PWM_Start>:
{
 800620c:	b510      	push	{r4, lr}
 800620e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006210:	2201      	movs	r2, #1
 8006212:	6800      	ldr	r0, [r0, #0]
 8006214:	f7ff ffec 	bl	80061f0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	4a14      	ldr	r2, [pc, #80]	; (800626c <HAL_TIM_PWM_Start+0x60>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d01f      	beq.n	8006260 <HAL_TIM_PWM_Start+0x54>
 8006220:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006224:	4293      	cmp	r3, r2
 8006226:	d01b      	beq.n	8006260 <HAL_TIM_PWM_Start+0x54>
 8006228:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800622c:	4293      	cmp	r3, r2
 800622e:	d017      	beq.n	8006260 <HAL_TIM_PWM_Start+0x54>
 8006230:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006234:	4293      	cmp	r3, r2
 8006236:	d013      	beq.n	8006260 <HAL_TIM_PWM_Start+0x54>
 8006238:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800623c:	4293      	cmp	r3, r2
 800623e:	d00f      	beq.n	8006260 <HAL_TIM_PWM_Start+0x54>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8006240:	6899      	ldr	r1, [r3, #8]
 8006242:	480b      	ldr	r0, [pc, #44]	; (8006270 <HAL_TIM_PWM_Start+0x64>)
 8006244:	4001      	ands	r1, r0
 8006246:	2906      	cmp	r1, #6
 8006248:	d008      	beq.n	800625c <HAL_TIM_PWM_Start+0x50>
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	4002      	ands	r2, r0
 800624e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8006252:	d003      	beq.n	800625c <HAL_TIM_PWM_Start+0x50>
    __HAL_TIM_ENABLE(htim);
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	f042 0201 	orr.w	r2, r2, #1
 800625a:	601a      	str	r2, [r3, #0]
}
 800625c:	2000      	movs	r0, #0
 800625e:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 8006260:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006266:	645a      	str	r2, [r3, #68]	; 0x44
 8006268:	e7ea      	b.n	8006240 <HAL_TIM_PWM_Start+0x34>
 800626a:	bf00      	nop
 800626c:	40012c00 	.word	0x40012c00
 8006270:	00010007 	.word	0x00010007

08006274 <HAL_TIM_OC_Start>:
 8006274:	f7ff bfca 	b.w	800620c <HAL_TIM_PWM_Start>

08006278 <HAL_TIM_PWM_Stop>:
{
 8006278:	b510      	push	{r4, lr}
 800627a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800627c:	2200      	movs	r2, #0
 800627e:	6800      	ldr	r0, [r0, #0]
 8006280:	f7ff ffb6 	bl	80061f0 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	4a1a      	ldr	r2, [pc, #104]	; (80062f0 <HAL_TIM_PWM_Stop+0x78>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00f      	beq.n	80062ac <HAL_TIM_PWM_Stop+0x34>
 800628c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006290:	4293      	cmp	r3, r2
 8006292:	d00b      	beq.n	80062ac <HAL_TIM_PWM_Stop+0x34>
 8006294:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <HAL_TIM_PWM_Stop+0x34>
 800629c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <HAL_TIM_PWM_Stop+0x34>
 80062a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d10d      	bne.n	80062c8 <HAL_TIM_PWM_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 80062ac:	6a19      	ldr	r1, [r3, #32]
 80062ae:	f241 1211 	movw	r2, #4369	; 0x1111
 80062b2:	4211      	tst	r1, r2
 80062b4:	d108      	bne.n	80062c8 <HAL_TIM_PWM_Stop+0x50>
 80062b6:	6a19      	ldr	r1, [r3, #32]
 80062b8:	f240 4244 	movw	r2, #1092	; 0x444
 80062bc:	4211      	tst	r1, r2
 80062be:	bf02      	ittt	eq
 80062c0:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80062c2:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80062c6:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80062c8:	6a19      	ldr	r1, [r3, #32]
 80062ca:	f241 1211 	movw	r2, #4369	; 0x1111
 80062ce:	4211      	tst	r1, r2
 80062d0:	d108      	bne.n	80062e4 <HAL_TIM_PWM_Stop+0x6c>
 80062d2:	6a19      	ldr	r1, [r3, #32]
 80062d4:	f240 4244 	movw	r2, #1092	; 0x444
 80062d8:	4211      	tst	r1, r2
 80062da:	d103      	bne.n	80062e4 <HAL_TIM_PWM_Stop+0x6c>
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	f022 0201 	bic.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80062e4:	2301      	movs	r3, #1
 80062e6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80062ea:	2000      	movs	r0, #0
 80062ec:	bd10      	pop	{r4, pc}
 80062ee:	bf00      	nop
 80062f0:	40012c00 	.word	0x40012c00

080062f4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80062f8:	2b01      	cmp	r3, #1
{
 80062fa:	b530      	push	{r4, r5, lr}
 80062fc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8006300:	d01f      	beq.n	8006342 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006302:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006304:	4d10      	ldr	r5, [pc, #64]	; (8006348 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 8006306:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800630a:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 800630c:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800630e:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006310:	d003      	beq.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8006312:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006316:	42aa      	cmp	r2, r5
 8006318:	d103      	bne.n	8006322 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800631a:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800631c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006320:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006322:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006324:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800632a:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 800632c:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006330:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006332:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006334:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8006336:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8006338:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800633c:	2300      	movs	r3, #0
 800633e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8006342:	4618      	mov	r0, r3

  return HAL_OK;
}
 8006344:	bd30      	pop	{r4, r5, pc}
 8006346:	bf00      	nop
 8006348:	40012c00 	.word	0x40012c00

0800634c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800634c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006350:	2b01      	cmp	r3, #1
{
 8006352:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8006354:	d038      	beq.n	80063c8 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006356:	68cb      	ldr	r3, [r1, #12]
 8006358:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800635a:	4c1c      	ldr	r4, [pc, #112]	; (80063cc <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800635c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006360:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006362:	684a      	ldr	r2, [r1, #4]
 8006364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006368:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800636a:	680a      	ldr	r2, [r1, #0]
 800636c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006370:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006372:	690a      	ldr	r2, [r1, #16]
 8006374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006378:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800637a:	694a      	ldr	r2, [r1, #20]
 800637c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006380:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006382:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8006384:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006388:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800638a:	698a      	ldr	r2, [r1, #24]
 800638c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006390:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006394:	6802      	ldr	r2, [r0, #0]
 8006396:	42a2      	cmp	r2, r4
 8006398:	d003      	beq.n	80063a2 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800639a:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800639e:	42a2      	cmp	r2, r4
 80063a0:	d10c      	bne.n	80063bc <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80063a2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80063a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80063a8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063ac:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80063ae:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80063b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063b4:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80063b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80063ba:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80063bc:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80063be:	2300      	movs	r3, #0
 80063c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80063c4:	4618      	mov	r0, r3
 80063c6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80063c8:	2002      	movs	r0, #2
}
 80063ca:	bd10      	pop	{r4, pc}
 80063cc:	40012c00 	.word	0x40012c00

080063d0 <HAL_TIMEx_CommutationCallback>:
 80063d0:	4770      	bx	lr

080063d2 <HAL_TIMEx_BreakCallback>:
 80063d2:	4770      	bx	lr

080063d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063d4:	4770      	bx	lr

080063d6 <UART_RxISR_16BIT>:
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063d6:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 80063da:	2a22      	cmp	r2, #34	; 0x22
{
 80063dc:	b410      	push	{r4}
 80063de:	6802      	ldr	r2, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063e0:	d11e      	bne.n	8006420 <UART_RxISR_16BIT+0x4a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063e2:	8c94      	ldrh	r4, [r2, #36]	; 0x24
    tmp = (uint16_t*) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80063e4:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
 80063e8:	400c      	ands	r4, r1
 80063ea:	6d81      	ldr	r1, [r0, #88]	; 0x58
 80063ec:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr +=2;
 80063f0:	6581      	str	r1, [r0, #88]	; 0x58
    
    if(--huart->RxXferCount == 0)
 80063f2:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 80063f6:	3901      	subs	r1, #1
 80063f8:	b289      	uxth	r1, r1
 80063fa:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
 80063fe:	b9a1      	cbnz	r1, 800642a <UART_RxISR_16BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006400:	6814      	ldr	r4, [r2, #0]
 8006402:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 8006406:	6014      	str	r4, [r2, #0]
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
      
      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006408:	6894      	ldr	r4, [r2, #8]
 800640a:	f024 0401 	bic.w	r4, r4, #1
 800640e:	6094      	str	r4, [r2, #8]
      
      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006410:	2220      	movs	r2, #32
 8006412:	f880 2082 	strb.w	r2, [r0, #130]	; 0x82
      
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006416:	6701      	str	r1, [r0, #112]	; 0x70
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006418:	f85d 4b04 	ldr.w	r4, [sp], #4
      HAL_UART_RxCpltCallback(huart);
 800641c:	f017 bb52 	b.w	801dac4 <HAL_UART_RxCpltCallback>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006420:	8b13      	ldrh	r3, [r2, #24]
 8006422:	b29b      	uxth	r3, r3
 8006424:	f043 0308 	orr.w	r3, r3, #8
 8006428:	8313      	strh	r3, [r2, #24]
}
 800642a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800642e:	4770      	bx	lr

08006430 <UART_RxISR_8BIT_FIFOEN>:
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint8_t   nb_rx_data;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006430:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 8006434:	2b22      	cmp	r3, #34	; 0x22
{
 8006436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643a:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800643c:	d142      	bne.n	80064c4 <UART_RxISR_8BIT_FIFOEN+0x94>
  uint16_t  uhMask = huart->Mask;
 800643e:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006442:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
        
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006446:	4f23      	ldr	r7, [pc, #140]	; (80064d4 <UART_RxISR_8BIT_FIFOEN+0xa4>)
        
        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006448:	f04f 0820 	mov.w	r8, #32
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 800644c:	b9c5      	cbnz	r5, 8006480 <UART_RxISR_8BIT_FIFOEN+0x50>
    
    /* When remaining number of bytes to receive is less than the RX FIFO 
    threshold, next incoming frames are processed as if FIFO mode was 
    disabled (i.e. one interrupt per received frame).
    */
    if (((huart->RxXferCount != 0U)) && (huart->RxXferCount < huart->NbRxDataToProcess))
 800644e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d03b      	beq.n	80064d0 <UART_RxISR_8BIT_FIFOEN+0xa0>
 8006458:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800645c:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8006460:	b29b      	uxth	r3, r3
 8006462:	429a      	cmp	r2, r3
 8006464:	d934      	bls.n	80064d0 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800646e:	609a      	str	r2, [r3, #8]
      
      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006470:	4a19      	ldr	r2, [pc, #100]	; (80064d8 <UART_RxISR_8BIT_FIFOEN+0xa8>)
 8006472:	6722      	str	r2, [r4, #112]	; 0x70
      
      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	f042 0220 	orr.w	r2, r2, #32
 800647a:	601a      	str	r2, [r3, #0]
 800647c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006480:	6823      	ldr	r3, [r4, #0]
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006482:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006484:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006486:	1c51      	adds	r1, r2, #1
 8006488:	4033      	ands	r3, r6
 800648a:	65a1      	str	r1, [r4, #88]	; 0x58
 800648c:	7013      	strb	r3, [r2, #0]
      huart->RxXferCount--;
 800648e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006492:	3b01      	subs	r3, #1
 8006494:	b29b      	uxth	r3, r3
 8006496:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      if(huart->RxXferCount == 0U)
 800649a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800649e:	b29b      	uxth	r3, r3
 80064a0:	b96b      	cbnz	r3, 80064be <UART_RxISR_8BIT_FIFOEN+0x8e>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064a2:	6822      	ldr	r2, [r4, #0]
 80064a4:	6811      	ldr	r1, [r2, #0]
 80064a6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80064aa:	6011      	str	r1, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80064ac:	6891      	ldr	r1, [r2, #8]
 80064ae:	4039      	ands	r1, r7
 80064b0:	6091      	str	r1, [r2, #8]
        HAL_UART_RxCpltCallback(huart);
 80064b2:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 80064b4:	f884 8082 	strb.w	r8, [r4, #130]	; 0x82
        huart->RxISR = NULL;
 80064b8:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UART_RxCpltCallback(huart);
 80064ba:	f017 fb03 	bl	801dac4 <HAL_UART_RxCpltCallback>
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 80064be:	3d01      	subs	r5, #1
 80064c0:	b2ed      	uxtb	r5, r5
 80064c2:	e7c3      	b.n	800644c <UART_RxISR_8BIT_FIFOEN+0x1c>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064c4:	6802      	ldr	r2, [r0, #0]
 80064c6:	8b13      	ldrh	r3, [r2, #24]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f043 0308 	orr.w	r3, r3, #8
 80064ce:	8313      	strh	r3, [r2, #24]
 80064d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d4:	effffffe 	.word	0xeffffffe
 80064d8:	080064dd 	.word	0x080064dd

080064dc <UART_RxISR_8BIT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064dc:	f890 2082 	ldrb.w	r2, [r0, #130]	; 0x82
 80064e0:	2a22      	cmp	r2, #34	; 0x22
{
 80064e2:	b430      	push	{r4, r5}
 80064e4:	6802      	ldr	r2, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064e6:	d11e      	bne.n	8006526 <UART_RxISR_8BIT+0x4a>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064e8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064ea:	6d84      	ldr	r4, [r0, #88]	; 0x58
  uint16_t uhMask = huart->Mask;
 80064ec:	f8b0 1060 	ldrh.w	r1, [r0, #96]	; 0x60
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80064f0:	1c65      	adds	r5, r4, #1
 80064f2:	400a      	ands	r2, r1
 80064f4:	6585      	str	r5, [r0, #88]	; 0x58
 80064f6:	7022      	strb	r2, [r4, #0]
    if(--huart->RxXferCount == 0)
 80064f8:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80064fc:	3a01      	subs	r2, #1
 80064fe:	b292      	uxth	r2, r2
 8006500:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
 8006504:	b9a2      	cbnz	r2, 8006530 <UART_RxISR_8BIT+0x54>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006506:	6801      	ldr	r1, [r0, #0]
 8006508:	680c      	ldr	r4, [r1, #0]
 800650a:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 800650e:	600c      	str	r4, [r1, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006510:	688c      	ldr	r4, [r1, #8]
 8006512:	f024 0401 	bic.w	r4, r4, #1
 8006516:	608c      	str	r4, [r1, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8006518:	2120      	movs	r1, #32
 800651a:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
      huart->RxISR = NULL;
 800651e:	6702      	str	r2, [r0, #112]	; 0x70
}
 8006520:	bc30      	pop	{r4, r5}
      HAL_UART_RxCpltCallback(huart);
 8006522:	f017 bacf 	b.w	801dac4 <HAL_UART_RxCpltCallback>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006526:	8b13      	ldrh	r3, [r2, #24]
 8006528:	b29b      	uxth	r3, r3
 800652a:	f043 0308 	orr.w	r3, r3, #8
 800652e:	8313      	strh	r3, [r2, #24]
}
 8006530:	bc30      	pop	{r4, r5}
 8006532:	4770      	bx	lr

08006534 <UART_RxISR_16BIT_FIFOEN>:
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint8_t   nb_rx_data;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006534:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 8006538:	2b22      	cmp	r3, #34	; 0x22
{
 800653a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653e:	4604      	mov	r4, r0
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006540:	d141      	bne.n	80065c6 <UART_RxISR_16BIT_FIFOEN+0x92>
  uint16_t  uhMask = huart->Mask;
 8006542:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  {
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006546:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
        
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800654a:	4f23      	ldr	r7, [pc, #140]	; (80065d8 <UART_RxISR_16BIT_FIFOEN+0xa4>)
        
        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800654c:	f04f 0820 	mov.w	r8, #32
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 8006550:	b9c5      	cbnz	r5, 8006584 <UART_RxISR_16BIT_FIFOEN+0x50>
    
    /* When remaining number of bytes to receive is less than the RX FIFO 
    threshold, next incoming frames are processed as if FIFO mode was 
    disabled (i.e. one interrupt per received frame).
    */
    if (((huart->RxXferCount != 0U)) && (huart->RxXferCount < huart->NbRxDataToProcess))
 8006552:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d03a      	beq.n	80065d2 <UART_RxISR_16BIT_FIFOEN+0x9e>
 800655c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006560:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8006564:	b29b      	uxth	r3, r3
 8006566:	429a      	cmp	r2, r3
 8006568:	d933      	bls.n	80065d2 <UART_RxISR_16BIT_FIFOEN+0x9e>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	689a      	ldr	r2, [r3, #8]
 800656e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006572:	609a      	str	r2, [r3, #8]
      
      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006574:	4a19      	ldr	r2, [pc, #100]	; (80065dc <UART_RxISR_16BIT_FIFOEN+0xa8>)
 8006576:	6722      	str	r2, [r4, #112]	; 0x70
      
      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	f042 0220 	orr.w	r2, r2, #32
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006584:	6823      	ldr	r3, [r4, #0]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006586:	6da2      	ldr	r2, [r4, #88]	; 0x58
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006588:	8c99      	ldrh	r1, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
 800658a:	4031      	ands	r1, r6
 800658c:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr +=2;
 8006590:	65a2      	str	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8006592:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 8006596:	3a01      	subs	r2, #1
 8006598:	b292      	uxth	r2, r2
 800659a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      if(huart->RxXferCount == 0U)
 800659e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
 80065a2:	b292      	uxth	r2, r2
 80065a4:	b962      	cbnz	r2, 80065c0 <UART_RxISR_16BIT_FIFOEN+0x8c>
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065a6:	6819      	ldr	r1, [r3, #0]
 80065a8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80065ac:	6019      	str	r1, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80065ae:	6899      	ldr	r1, [r3, #8]
 80065b0:	4039      	ands	r1, r7
 80065b2:	6099      	str	r1, [r3, #8]
        HAL_UART_RxCpltCallback(huart);
 80065b4:	4620      	mov	r0, r4
        huart->RxState = HAL_UART_STATE_READY;
 80065b6:	f884 8082 	strb.w	r8, [r4, #130]	; 0x82
        huart->RxISR = NULL;
 80065ba:	6722      	str	r2, [r4, #112]	; 0x70
        HAL_UART_RxCpltCallback(huart);
 80065bc:	f017 fa82 	bl	801dac4 <HAL_UART_RxCpltCallback>
    for(nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0 ; nb_rx_data--)
 80065c0:	3d01      	subs	r5, #1
 80065c2:	b2ed      	uxtb	r5, r5
 80065c4:	e7c4      	b.n	8006550 <UART_RxISR_16BIT_FIFOEN+0x1c>
    }   
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065c6:	6802      	ldr	r2, [r0, #0]
 80065c8:	8b13      	ldrh	r3, [r2, #24]
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	f043 0308 	orr.w	r3, r3, #8
 80065d0:	8313      	strh	r3, [r2, #24]
 80065d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d6:	bf00      	nop
 80065d8:	effffffe 	.word	0xeffffffe
 80065dc:	080063d7 	.word	0x080063d7

080065e0 <HAL_UART_DeInit>:
{
 80065e0:	b538      	push	{r3, r4, r5, lr}
  if(huart == NULL)
 80065e2:	4605      	mov	r5, r0
 80065e4:	b1b8      	cbz	r0, 8006616 <HAL_UART_DeInit+0x36>
  huart->gState = HAL_UART_STATE_BUSY;
 80065e6:	2324      	movs	r3, #36	; 0x24
 80065e8:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UART_DISABLE(huart);
 80065ec:	6803      	ldr	r3, [r0, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 80065f0:	2400      	movs	r4, #0
  __HAL_UART_DISABLE(huart);
 80065f2:	f022 0201 	bic.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 80065f8:	601c      	str	r4, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80065fa:	605c      	str	r4, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80065fc:	609c      	str	r4, [r3, #8]
  HAL_UART_MspDeInit(huart);
 80065fe:	f019 f96b 	bl	801f8d8 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006602:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
  __HAL_UNLOCK(huart);
 8006606:	f885 4080 	strb.w	r4, [r5, #128]	; 0x80
  huart->gState = HAL_UART_STATE_RESET;
 800660a:	f885 4081 	strb.w	r4, [r5, #129]	; 0x81
  return HAL_OK;
 800660e:	4620      	mov	r0, r4
  huart->RxState = HAL_UART_STATE_RESET;
 8006610:	f885 4082 	strb.w	r4, [r5, #130]	; 0x82
  return HAL_OK;
 8006614:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006616:	2001      	movs	r0, #1
}
 8006618:	bd38      	pop	{r3, r4, r5, pc}
	...

0800661c <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800661c:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 8006620:	2b20      	cmp	r3, #32
{
 8006622:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8006624:	d167      	bne.n	80066f6 <HAL_UART_Receive_IT+0xda>
    if((pData == NULL ) || (Size == 0U))
 8006626:	2900      	cmp	r1, #0
 8006628:	d063      	beq.n	80066f2 <HAL_UART_Receive_IT+0xd6>
 800662a:	2a00      	cmp	r2, #0
 800662c:	d061      	beq.n	80066f2 <HAL_UART_Receive_IT+0xd6>
    __HAL_LOCK(huart);
 800662e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006632:	2b01      	cmp	r3, #1
 8006634:	d05f      	beq.n	80066f6 <HAL_UART_Receive_IT+0xda>
 8006636:	2301      	movs	r3, #1
 8006638:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->RxISR       = NULL;
 800663c:	2300      	movs	r3, #0
 800663e:	6703      	str	r3, [r0, #112]	; 0x70
    UART_MASK_COMPUTATION(huart);
 8006640:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 8006642:	6581      	str	r1, [r0, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8006644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 8006648:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->RxXferCount = Size;
 800664c:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8006650:	d12e      	bne.n	80066b0 <HAL_UART_Receive_IT+0x94>
 8006652:	6901      	ldr	r1, [r0, #16]
 8006654:	bb51      	cbnz	r1, 80066ac <HAL_UART_Receive_IT+0x90>
 8006656:	f240 11ff 	movw	r1, #511	; 0x1ff
 800665a:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665e:	2100      	movs	r1, #0
 8006660:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006664:	2122      	movs	r1, #34	; 0x22
 8006666:	f880 1082 	strb.w	r1, [r0, #130]	; 0x82
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666a:	6801      	ldr	r1, [r0, #0]
 800666c:	688c      	ldr	r4, [r1, #8]
 800666e:	f044 0401 	orr.w	r4, r4, #1
 8006672:	608c      	str	r4, [r1, #8]
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006674:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8006676:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
 800667a:	d129      	bne.n	80066d0 <HAL_UART_Receive_IT+0xb4>
 800667c:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 8006680:	4294      	cmp	r4, r2
 8006682:	d825      	bhi.n	80066d0 <HAL_UART_Receive_IT+0xb4>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006688:	d120      	bne.n	80066cc <HAL_UART_Receive_IT+0xb0>
 800668a:	6903      	ldr	r3, [r0, #16]
 800668c:	b9f3      	cbnz	r3, 80066cc <HAL_UART_Receive_IT+0xb0>
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800668e:	4b1b      	ldr	r3, [pc, #108]	; (80066fc <HAL_UART_Receive_IT+0xe0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006690:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006692:	6703      	str	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006694:	f442 7280 	orr.w	r2, r2, #256	; 0x100
      __HAL_UNLOCK(huart);
 8006698:	2300      	movs	r3, #0
 800669a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800669e:	600a      	str	r2, [r1, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80066a0:	688a      	ldr	r2, [r1, #8]
 80066a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80066a6:	608a      	str	r2, [r1, #8]
    return HAL_OK;
 80066a8:	4618      	mov	r0, r3
 80066aa:	bd10      	pop	{r4, pc}
    UART_MASK_COMPUTATION(huart);
 80066ac:	21ff      	movs	r1, #255	; 0xff
 80066ae:	e7d4      	b.n	800665a <HAL_UART_Receive_IT+0x3e>
 80066b0:	b923      	cbnz	r3, 80066bc <HAL_UART_Receive_IT+0xa0>
 80066b2:	6901      	ldr	r1, [r0, #16]
 80066b4:	2900      	cmp	r1, #0
 80066b6:	d0f9      	beq.n	80066ac <HAL_UART_Receive_IT+0x90>
 80066b8:	217f      	movs	r1, #127	; 0x7f
 80066ba:	e7ce      	b.n	800665a <HAL_UART_Receive_IT+0x3e>
 80066bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066c0:	d1cd      	bne.n	800665e <HAL_UART_Receive_IT+0x42>
 80066c2:	6901      	ldr	r1, [r0, #16]
 80066c4:	2900      	cmp	r1, #0
 80066c6:	d0f7      	beq.n	80066b8 <HAL_UART_Receive_IT+0x9c>
 80066c8:	213f      	movs	r1, #63	; 0x3f
 80066ca:	e7c6      	b.n	800665a <HAL_UART_Receive_IT+0x3e>
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80066cc:	4b0c      	ldr	r3, [pc, #48]	; (8006700 <HAL_UART_Receive_IT+0xe4>)
 80066ce:	e7df      	b.n	8006690 <HAL_UART_Receive_IT+0x74>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d4:	d10b      	bne.n	80066ee <HAL_UART_Receive_IT+0xd2>
 80066d6:	6903      	ldr	r3, [r0, #16]
 80066d8:	b94b      	cbnz	r3, 80066ee <HAL_UART_Receive_IT+0xd2>
        huart->RxISR = UART_RxISR_16BIT;
 80066da:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <HAL_UART_Receive_IT+0xe8>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80066dc:	680a      	ldr	r2, [r1, #0]
        huart->RxISR = UART_RxISR_8BIT;
 80066de:	6703      	str	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80066e0:	f442 7290 	orr.w	r2, r2, #288	; 0x120
      __HAL_UNLOCK(huart);
 80066e4:	2300      	movs	r3, #0
 80066e6:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80066ea:	600a      	str	r2, [r1, #0]
 80066ec:	e7dc      	b.n	80066a8 <HAL_UART_Receive_IT+0x8c>
        huart->RxISR = UART_RxISR_8BIT;
 80066ee:	4b06      	ldr	r3, [pc, #24]	; (8006708 <HAL_UART_Receive_IT+0xec>)
 80066f0:	e7f4      	b.n	80066dc <HAL_UART_Receive_IT+0xc0>
      return HAL_ERROR;
 80066f2:	2001      	movs	r0, #1
 80066f4:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 80066f6:	2002      	movs	r0, #2
}
 80066f8:	bd10      	pop	{r4, pc}
 80066fa:	bf00      	nop
 80066fc:	08006535 	.word	0x08006535
 8006700:	08006431 	.word	0x08006431
 8006704:	080063d7 	.word	0x080063d7
 8006708:	080064dd 	.word	0x080064dd

0800670c <UART_SetConfig>:
  if(UART_INSTANCE_LOWPOWER(huart))
 800670c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800670e:	69c1      	ldr	r1, [r0, #28]
 8006710:	6882      	ldr	r2, [r0, #8]
{
 8006712:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8006716:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006718:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800671a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800671c:	4302      	orrs	r2, r0
 800671e:	6960      	ldr	r0, [r4, #20]
 8006720:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006722:	48bd      	ldr	r0, [pc, #756]	; (8006a18 <UART_SetConfig+0x30c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006724:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006726:	4028      	ands	r0, r5
 8006728:	4302      	orrs	r2, r0
 800672a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	68e0      	ldr	r0, [r4, #12]
 8006730:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006734:	4302      	orrs	r2, r0
 8006736:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006738:	4ab8      	ldr	r2, [pc, #736]	; (8006a1c <UART_SetConfig+0x310>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800673a:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800673c:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800673e:	bf1c      	itt	ne
 8006740:	6a22      	ldrne	r2, [r4, #32]
 8006742:	4310      	orrne	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006744:	689a      	ldr	r2, [r3, #8]
 8006746:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 800674a:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800674e:	4302      	orrs	r2, r0
 8006750:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006752:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006754:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006756:	f020 000f 	bic.w	r0, r0, #15
 800675a:	4310      	orrs	r0, r2
 800675c:	62d8      	str	r0, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800675e:	48b0      	ldr	r0, [pc, #704]	; (8006a20 <UART_SetConfig+0x314>)
 8006760:	4283      	cmp	r3, r0
 8006762:	d117      	bne.n	8006794 <UART_SetConfig+0x88>
 8006764:	4baf      	ldr	r3, [pc, #700]	; (8006a24 <UART_SetConfig+0x318>)
 8006766:	48b0      	ldr	r0, [pc, #704]	; (8006a28 <UART_SetConfig+0x31c>)
 8006768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676c:	f003 0303 	and.w	r3, r3, #3
 8006770:	5cc3      	ldrb	r3, [r0, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006772:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006776:	f040 81a7 	bne.w	8006ac8 <UART_SetConfig+0x3bc>
    switch (clocksource)
 800677a:	2b08      	cmp	r3, #8
 800677c:	d849      	bhi.n	8006812 <UART_SetConfig+0x106>
 800677e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006782:	017f      	.short	0x017f
 8006784:	016800d0 	.word	0x016800d0
 8006788:	01780048 	.word	0x01780048
 800678c:	00480048 	.word	0x00480048
 8006790:	002d0048 	.word	0x002d0048
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006794:	48a5      	ldr	r0, [pc, #660]	; (8006a2c <UART_SetConfig+0x320>)
 8006796:	4283      	cmp	r3, r0
 8006798:	d106      	bne.n	80067a8 <UART_SetConfig+0x9c>
 800679a:	4ba2      	ldr	r3, [pc, #648]	; (8006a24 <UART_SetConfig+0x318>)
 800679c:	48a4      	ldr	r0, [pc, #656]	; (8006a30 <UART_SetConfig+0x324>)
 800679e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067a2:	f003 030c 	and.w	r3, r3, #12
 80067a6:	e7e3      	b.n	8006770 <UART_SetConfig+0x64>
 80067a8:	48a2      	ldr	r0, [pc, #648]	; (8006a34 <UART_SetConfig+0x328>)
 80067aa:	4283      	cmp	r3, r0
 80067ac:	d11d      	bne.n	80067ea <UART_SetConfig+0xde>
 80067ae:	4b9d      	ldr	r3, [pc, #628]	; (8006a24 <UART_SetConfig+0x318>)
 80067b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	f000 8157 	beq.w	8006a6c <UART_SetConfig+0x360>
 80067be:	d804      	bhi.n	80067ca <UART_SetConfig+0xbe>
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f000 8159 	beq.w	8006a78 <UART_SetConfig+0x36c>
 80067c6:	2310      	movs	r3, #16
 80067c8:	e7d3      	b.n	8006772 <UART_SetConfig+0x66>
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	f000 813e 	beq.w	8006a4c <UART_SetConfig+0x340>
 80067d0:	2b30      	cmp	r3, #48	; 0x30
 80067d2:	d1f8      	bne.n	80067c6 <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80067d4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80067d8:	f040 80d0 	bne.w	800697c <UART_SetConfig+0x270>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067dc:	4b96      	ldr	r3, [pc, #600]	; (8006a38 <UART_SetConfig+0x32c>)
 80067de:	6861      	ldr	r1, [r4, #4]
 80067e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80067e4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80067e8:	e138      	b.n	8006a5c <UART_SetConfig+0x350>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067ea:	4894      	ldr	r0, [pc, #592]	; (8006a3c <UART_SetConfig+0x330>)
 80067ec:	4283      	cmp	r3, r0
 80067ee:	d12d      	bne.n	800684c <UART_SetConfig+0x140>
 80067f0:	f500 30e2 	add.w	r0, r0, #115712	; 0x1c400
 80067f4:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 80067f8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 80067fc:	2840      	cmp	r0, #64	; 0x40
 80067fe:	f000 80fd 	beq.w	80069fc <UART_SetConfig+0x2f0>
 8006802:	d812      	bhi.n	800682a <UART_SetConfig+0x11e>
 8006804:	2800      	cmp	r0, #0
 8006806:	f000 80c0 	beq.w	800698a <UART_SetConfig+0x27e>
  if(UART_INSTANCE_LOWPOWER(huart))
 800680a:	4884      	ldr	r0, [pc, #528]	; (8006a1c <UART_SetConfig+0x310>)
 800680c:	4283      	cmp	r3, r0
 800680e:	f040 8156 	bne.w	8006abe <UART_SetConfig+0x3b2>
      ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
  huart->NbTxDataToProcess = 1;
 8006814:	2201      	movs	r2, #1
 8006816:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  huart->NbRxDataToProcess = 1;
 800681a:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
  huart->RxISR = NULL;
 800681e:	2200      	movs	r2, #0
 8006820:	6722      	str	r2, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8006822:	6762      	str	r2, [r4, #116]	; 0x74
}
 8006824:	4618      	mov	r0, r3
 8006826:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800682a:	2880      	cmp	r0, #128	; 0x80
 800682c:	f000 80bb 	beq.w	80069a6 <UART_SetConfig+0x29a>
 8006830:	28c0      	cmp	r0, #192	; 0xc0
 8006832:	d1ea      	bne.n	800680a <UART_SetConfig+0xfe>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006834:	4879      	ldr	r0, [pc, #484]	; (8006a1c <UART_SetConfig+0x310>)
 8006836:	4283      	cmp	r3, r0
 8006838:	d1cc      	bne.n	80067d4 <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 800683a:	4b7f      	ldr	r3, [pc, #508]	; (8006a38 <UART_SetConfig+0x32c>)
 800683c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006840:	f44f 4300 	mov.w	r3, #32768	; 0x8000
      break;
 8006844:	2208      	movs	r2, #8
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006846:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 800684a:	e0aa      	b.n	80069a2 <UART_SetConfig+0x296>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800684c:	487c      	ldr	r0, [pc, #496]	; (8006a40 <UART_SetConfig+0x334>)
 800684e:	4283      	cmp	r3, r0
 8006850:	d111      	bne.n	8006876 <UART_SetConfig+0x16a>
 8006852:	f500 30e0 	add.w	r0, r0, #114688	; 0x1c000
 8006856:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 800685a:	f400 7040 	and.w	r0, r0, #768	; 0x300
 800685e:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006862:	f000 80cb 	beq.w	80069fc <UART_SetConfig+0x2f0>
 8006866:	d9cd      	bls.n	8006804 <UART_SetConfig+0xf8>
 8006868:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800686c:	f000 809b 	beq.w	80069a6 <UART_SetConfig+0x29a>
 8006870:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8006874:	e7dd      	b.n	8006832 <UART_SetConfig+0x126>
 8006876:	4869      	ldr	r0, [pc, #420]	; (8006a1c <UART_SetConfig+0x310>)
 8006878:	4283      	cmp	r3, r0
 800687a:	d1a4      	bne.n	80067c6 <UART_SetConfig+0xba>
 800687c:	f500 30c8 	add.w	r0, r0, #102400	; 0x19000
 8006880:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006884:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
 8006888:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800688c:	f000 80b6 	beq.w	80069fc <UART_SetConfig+0x2f0>
 8006890:	d9b8      	bls.n	8006804 <UART_SetConfig+0xf8>
 8006892:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8006896:	f000 8086 	beq.w	80069a6 <UART_SetConfig+0x29a>
 800689a:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
 800689e:	e7c8      	b.n	8006832 <UART_SetConfig+0x126>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068a0:	f7fd fd92 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068a4:	4b64      	ldr	r3, [pc, #400]	; (8006a38 <UART_SetConfig+0x32c>)
 80068a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068a8:	6865      	ldr	r5, [r4, #4]
 80068aa:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80068ae:	2300      	movs	r3, #0
 80068b0:	e005      	b.n	80068be <UART_SetConfig+0x1b2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068b2:	4b61      	ldr	r3, [pc, #388]	; (8006a38 <UART_SetConfig+0x32c>)
 80068b4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068b6:	4863      	ldr	r0, [pc, #396]	; (8006a44 <UART_SetConfig+0x338>)
 80068b8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80068bc:	2300      	movs	r3, #0
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068be:	2100      	movs	r1, #0
 80068c0:	f7fa f9f6 	bl	8000cb0 <__aeabi_uldivmod>
 80068c4:	020f      	lsls	r7, r1, #8
 80068c6:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 80068ca:	0206      	lsls	r6, r0, #8
 80068cc:	0868      	lsrs	r0, r5, #1
 80068ce:	eb16 0b00 	adds.w	fp, r6, r0
 80068d2:	f147 0c00 	adc.w	ip, r7, #0
 80068d6:	462a      	mov	r2, r5
 80068d8:	2300      	movs	r3, #0
 80068da:	4658      	mov	r0, fp
 80068dc:	4661      	mov	r1, ip
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068de:	f7fa f9e7 	bl	8000cb0 <__aeabi_uldivmod>
          break;
 80068e2:	2300      	movs	r3, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068e4:	4a58      	ldr	r2, [pc, #352]	; (8006a48 <UART_SetConfig+0x33c>)
 80068e6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80068ea:	4291      	cmp	r1, r2
 80068ec:	d891      	bhi.n	8006812 <UART_SetConfig+0x106>
          huart->Instance->BRR = usartdiv;
 80068ee:	6822      	ldr	r2, [r4, #0]
 80068f0:	60d0      	str	r0, [r2, #12]
 80068f2:	e78f      	b.n	8006814 <UART_SetConfig+0x108>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068f4:	f7fd f9c8 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 80068f8:	e7d4      	b.n	80068a4 <UART_SetConfig+0x198>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80068fc:	4b4e      	ldr	r3, [pc, #312]	; (8006a38 <UART_SetConfig+0x32c>)
 80068fe:	0868      	lsrs	r0, r5, #1
 8006900:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006904:	2100      	movs	r1, #0
 8006906:	462a      	mov	r2, r5
 8006908:	f44f 7580 	mov.w	r5, #256	; 0x100
 800690c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8006910:	fbb6 f6f3 	udiv	r6, r6, r3
 8006914:	2300      	movs	r3, #0
 8006916:	fbe6 0105 	umlal	r0, r1, r6, r5
 800691a:	e7e0      	b.n	80068de <UART_SetConfig+0x1d2>
          ret = HAL_ERROR;
 800691c:	2301      	movs	r3, #1
  uint32_t usartdiv                   = 0x00000000U;
 800691e:	2000      	movs	r0, #0
 8006920:	e7e0      	b.n	80068e4 <UART_SetConfig+0x1d8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006922:	f7fd fd63 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 8006926:	e0ad      	b.n	8006a84 <UART_SetConfig+0x378>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006928:	f7fd fd4e 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800692c:	6862      	ldr	r2, [r4, #4]
 800692e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006930:	4b41      	ldr	r3, [pc, #260]	; (8006a38 <UART_SetConfig+0x32c>)
 8006932:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006936:	fbb0 f0f3 	udiv	r0, r0, r3
 800693a:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 800693e:	fbb0 f0f2 	udiv	r0, r0, r2
 8006942:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006944:	f1a0 0210 	sub.w	r2, r0, #16
 8006948:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800694c:	429a      	cmp	r2, r3
 800694e:	f63f af60 	bhi.w	8006812 <UART_SetConfig+0x106>
      huart->Instance->BRR = usartdiv;
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	60d8      	str	r0, [r3, #12]
 8006956:	e0b0      	b.n	8006aba <UART_SetConfig+0x3ae>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006958:	f7fd fd48 	bl	80043ec <HAL_RCC_GetPCLK2Freq>
 800695c:	e7e6      	b.n	800692c <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800695e:	4936      	ldr	r1, [pc, #216]	; (8006a38 <UART_SetConfig+0x32c>)
 8006960:	6863      	ldr	r3, [r4, #4]
 8006962:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006966:	4837      	ldr	r0, [pc, #220]	; (8006a44 <UART_SetConfig+0x338>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006968:	fbb0 f0f2 	udiv	r0, r0, r2
 800696c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006970:	fbb0 f0f3 	udiv	r0, r0, r3
 8006974:	e7e5      	b.n	8006942 <UART_SetConfig+0x236>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006976:	f7fd f987 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 800697a:	e7d7      	b.n	800692c <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800697c:	492e      	ldr	r1, [pc, #184]	; (8006a38 <UART_SetConfig+0x32c>)
 800697e:	6863      	ldr	r3, [r4, #4]
 8006980:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006984:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006988:	e7ee      	b.n	8006968 <UART_SetConfig+0x25c>
  if(UART_INSTANCE_LOWPOWER(huart))
 800698a:	4a24      	ldr	r2, [pc, #144]	; (8006a1c <UART_SetConfig+0x310>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d173      	bne.n	8006a78 <UART_SetConfig+0x36c>
      lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006990:	f7fd fd1a 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
 8006994:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006996:	4b28      	ldr	r3, [pc, #160]	; (8006a38 <UART_SetConfig+0x32c>)
 8006998:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800699c:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 80069a0:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 80069a2:	b953      	cbnz	r3, 80069ba <UART_SetConfig+0x2ae>
 80069a4:	e736      	b.n	8006814 <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 80069a6:	481d      	ldr	r0, [pc, #116]	; (8006a1c <UART_SetConfig+0x310>)
 80069a8:	4283      	cmp	r3, r0
 80069aa:	d14f      	bne.n	8006a4c <UART_SetConfig+0x340>
      lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 80069ac:	4b22      	ldr	r3, [pc, #136]	; (8006a38 <UART_SetConfig+0x32c>)
 80069ae:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80069b2:	4b24      	ldr	r3, [pc, #144]	; (8006a44 <UART_SetConfig+0x338>)
 80069b4:	fbb3 f3f0 	udiv	r3, r3, r0
 80069b8:	2202      	movs	r2, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 80069ba:	6865      	ldr	r5, [r4, #4]
 80069bc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80069c0:	4299      	cmp	r1, r3
 80069c2:	f63f af26 	bhi.w	8006812 <UART_SetConfig+0x106>
 80069c6:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80069ca:	f63f af22 	bhi.w	8006812 <UART_SetConfig+0x106>
        switch (clocksource)
 80069ce:	2a08      	cmp	r2, #8
 80069d0:	d8a4      	bhi.n	800691c <UART_SetConfig+0x210>
 80069d2:	a301      	add	r3, pc, #4	; (adr r3, 80069d8 <UART_SetConfig+0x2cc>)
 80069d4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80069d8:	080068a1 	.word	0x080068a1
 80069dc:	0800691d 	.word	0x0800691d
 80069e0:	080068b3 	.word	0x080068b3
 80069e4:	0800691d 	.word	0x0800691d
 80069e8:	080068f5 	.word	0x080068f5
 80069ec:	0800691d 	.word	0x0800691d
 80069f0:	0800691d 	.word	0x0800691d
 80069f4:	0800691d 	.word	0x0800691d
 80069f8:	080068fb 	.word	0x080068fb
  if(UART_INSTANCE_LOWPOWER(huart))
 80069fc:	4a07      	ldr	r2, [pc, #28]	; (8006a1c <UART_SetConfig+0x310>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d134      	bne.n	8006a6c <UART_SetConfig+0x360>
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a02:	f7fd f941 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8006a06:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006a08:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <UART_SetConfig+0x32c>)
 8006a0a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006a0e:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8006a12:	2204      	movs	r2, #4
 8006a14:	e7c5      	b.n	80069a2 <UART_SetConfig+0x296>
 8006a16:	bf00      	nop
 8006a18:	cfff69f3 	.word	0xcfff69f3
 8006a1c:	40008000 	.word	0x40008000
 8006a20:	40013800 	.word	0x40013800
 8006a24:	40021000 	.word	0x40021000
 8006a28:	08024e68 	.word	0x08024e68
 8006a2c:	40004400 	.word	0x40004400
 8006a30:	08024e6c 	.word	0x08024e6c
 8006a34:	40004800 	.word	0x40004800
 8006a38:	08024e7a 	.word	0x08024e7a
 8006a3c:	40004c00 	.word	0x40004c00
 8006a40:	40005000 	.word	0x40005000
 8006a44:	00f42400 	.word	0x00f42400
 8006a48:	000ffcff 	.word	0x000ffcff
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a4c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006a50:	d185      	bne.n	800695e <UART_SetConfig+0x252>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a52:	4b29      	ldr	r3, [pc, #164]	; (8006af8 <UART_SetConfig+0x3ec>)
 8006a54:	6861      	ldr	r1, [r4, #4]
 8006a56:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006a5a:	4828      	ldr	r0, [pc, #160]	; (8006afc <UART_SetConfig+0x3f0>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a5c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a60:	0848      	lsrs	r0, r1, #1
 8006a62:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006a66:	fbb0 f0f1 	udiv	r0, r0, r1
 8006a6a:	e017      	b.n	8006a9c <UART_SetConfig+0x390>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a6c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006a70:	d181      	bne.n	8006976 <UART_SetConfig+0x26a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a72:	f7fd f909 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8006a76:	e005      	b.n	8006a84 <UART_SetConfig+0x378>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a78:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006a7c:	f47f af54 	bne.w	8006928 <UART_SetConfig+0x21c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a80:	f7fd fca2 	bl	80043c8 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a84:	6862      	ldr	r2, [r4, #4]
 8006a86:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006a88:	4b1b      	ldr	r3, [pc, #108]	; (8006af8 <UART_SetConfig+0x3ec>)
 8006a8a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006a8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a92:	0850      	lsrs	r0, r2, #1
 8006a94:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006a98:	fbb0 f0f2 	udiv	r0, r0, r2
 8006a9c:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a9e:	f1a0 0210 	sub.w	r2, r0, #16
 8006aa2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	f63f aeb3 	bhi.w	8006812 <UART_SetConfig+0x106>
      brrtemp = usartdiv & 0xFFF0U;
 8006aac:	f020 030f 	bic.w	r3, r0, #15
      huart->Instance->BRR = brrtemp;
 8006ab0:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ab2:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8006ab6:	4318      	orrs	r0, r3
 8006ab8:	60d0      	str	r0, [r2, #12]
 8006aba:	2300      	movs	r3, #0
 8006abc:	e6aa      	b.n	8006814 <UART_SetConfig+0x108>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006abe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006ac2:	f43f aea6 	beq.w	8006812 <UART_SetConfig+0x106>
 8006ac6:	2310      	movs	r3, #16
    switch (clocksource)
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	f63f aea2 	bhi.w	8006812 <UART_SetConfig+0x106>
 8006ace:	a101      	add	r1, pc, #4	; (adr r1, 8006ad4 <UART_SetConfig+0x3c8>)
 8006ad0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ad4:	08006929 	.word	0x08006929
 8006ad8:	08006959 	.word	0x08006959
 8006adc:	0800695f 	.word	0x0800695f
 8006ae0:	08006813 	.word	0x08006813
 8006ae4:	08006977 	.word	0x08006977
 8006ae8:	08006813 	.word	0x08006813
 8006aec:	08006813 	.word	0x08006813
 8006af0:	08006813 	.word	0x08006813
 8006af4:	0800697d 	.word	0x0800697d
 8006af8:	08024e7a 	.word	0x08024e7a
 8006afc:	00f42400 	.word	0x00f42400

08006b00 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006b02:	07da      	lsls	r2, r3, #31
{
 8006b04:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b06:	d506      	bpl.n	8006b16 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b08:	6801      	ldr	r1, [r0, #0]
 8006b0a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006b0c:	684a      	ldr	r2, [r1, #4]
 8006b0e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006b12:	4322      	orrs	r2, r4
 8006b14:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b16:	079c      	lsls	r4, r3, #30
 8006b18:	d506      	bpl.n	8006b28 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b1a:	6801      	ldr	r1, [r0, #0]
 8006b1c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006b1e:	684a      	ldr	r2, [r1, #4]
 8006b20:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006b24:	4322      	orrs	r2, r4
 8006b26:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b28:	0759      	lsls	r1, r3, #29
 8006b2a:	d506      	bpl.n	8006b3a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b2c:	6801      	ldr	r1, [r0, #0]
 8006b2e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006b30:	684a      	ldr	r2, [r1, #4]
 8006b32:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006b36:	4322      	orrs	r2, r4
 8006b38:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b3a:	071a      	lsls	r2, r3, #28
 8006b3c:	d506      	bpl.n	8006b4c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b3e:	6801      	ldr	r1, [r0, #0]
 8006b40:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006b42:	684a      	ldr	r2, [r1, #4]
 8006b44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006b48:	4322      	orrs	r2, r4
 8006b4a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b4c:	06dc      	lsls	r4, r3, #27
 8006b4e:	d506      	bpl.n	8006b5e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b50:	6801      	ldr	r1, [r0, #0]
 8006b52:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006b54:	688a      	ldr	r2, [r1, #8]
 8006b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b5a:	4322      	orrs	r2, r4
 8006b5c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b5e:	0699      	lsls	r1, r3, #26
 8006b60:	d506      	bpl.n	8006b70 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b62:	6801      	ldr	r1, [r0, #0]
 8006b64:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006b66:	688a      	ldr	r2, [r1, #8]
 8006b68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b6c:	4322      	orrs	r2, r4
 8006b6e:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b70:	065a      	lsls	r2, r3, #25
 8006b72:	d50f      	bpl.n	8006b94 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b74:	6801      	ldr	r1, [r0, #0]
 8006b76:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006b78:	684a      	ldr	r2, [r1, #4]
 8006b7a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006b7e:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b80:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b84:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b86:	d105      	bne.n	8006b94 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b88:	684a      	ldr	r2, [r1, #4]
 8006b8a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006b8c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006b90:	4322      	orrs	r2, r4
 8006b92:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006b94:	061b      	lsls	r3, r3, #24
 8006b96:	d506      	bpl.n	8006ba6 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006b98:	6802      	ldr	r2, [r0, #0]
 8006b9a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006b9c:	6853      	ldr	r3, [r2, #4]
 8006b9e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006ba2:	430b      	orrs	r3, r1
 8006ba4:	6053      	str	r3, [r2, #4]
 8006ba6:	bd10      	pop	{r4, pc}

08006ba8 <UART_WaitOnFlagUntilTimeout>:
{
 8006ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bac:	9d06      	ldr	r5, [sp, #24]
 8006bae:	4604      	mov	r4, r0
 8006bb0:	460f      	mov	r7, r1
 8006bb2:	4616      	mov	r6, r2
 8006bb4:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb6:	6821      	ldr	r1, [r4, #0]
 8006bb8:	69ca      	ldr	r2, [r1, #28]
 8006bba:	ea37 0302 	bics.w	r3, r7, r2
 8006bbe:	bf0c      	ite	eq
 8006bc0:	2201      	moveq	r2, #1
 8006bc2:	2200      	movne	r2, #0
 8006bc4:	42b2      	cmp	r2, r6
 8006bc6:	d002      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8006bc8:	2000      	movs	r0, #0
}
 8006bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8006bce:	1c6b      	adds	r3, r5, #1
 8006bd0:	d0f2      	beq.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006bd2:	b99d      	cbnz	r5, 8006bfc <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006bd4:	6823      	ldr	r3, [r4, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006bdc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	f022 0201 	bic.w	r2, r2, #1
 8006be4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006be6:	2320      	movs	r3, #32
 8006be8:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        huart->RxState = HAL_UART_STATE_READY;
 8006bec:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
        __HAL_UNLOCK(huart);
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8006bf6:	2003      	movs	r0, #3
 8006bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006bfc:	f7fa fa10 	bl	8001020 <HAL_GetTick>
 8006c00:	eba0 0008 	sub.w	r0, r0, r8
 8006c04:	4285      	cmp	r5, r0
 8006c06:	d2d6      	bcs.n	8006bb6 <UART_WaitOnFlagUntilTimeout+0xe>
 8006c08:	e7e4      	b.n	8006bd4 <UART_WaitOnFlagUntilTimeout+0x2c>

08006c0a <HAL_UART_Transmit>:
{
 8006c0a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006c0e:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8006c10:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006c14:	2b20      	cmp	r3, #32
{
 8006c16:	4604      	mov	r4, r0
 8006c18:	460d      	mov	r5, r1
 8006c1a:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8006c1c:	d14b      	bne.n	8006cb6 <HAL_UART_Transmit+0xac>
    if((pData == NULL ) || (Size == 0U))
 8006c1e:	2900      	cmp	r1, #0
 8006c20:	d047      	beq.n	8006cb2 <HAL_UART_Transmit+0xa8>
 8006c22:	2a00      	cmp	r2, #0
 8006c24:	d045      	beq.n	8006cb2 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8006c26:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d043      	beq.n	8006cb6 <HAL_UART_Transmit+0xac>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c3a:	2321      	movs	r3, #33	; 0x21
 8006c3c:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
    tickstart = HAL_GetTick();
 8006c40:	f7fa f9ee 	bl	8001020 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8006c44:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    tickstart = HAL_GetTick();
 8006c48:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8006c4a:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    while(huart->TxXferCount > 0U)
 8006c4e:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c52:	9700      	str	r7, [sp, #0]
    while(huart->TxXferCount > 0U)
 8006c54:	b292      	uxth	r2, r2
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c56:	4633      	mov	r3, r6
    while(huart->TxXferCount > 0U)
 8006c58:	b952      	cbnz	r2, 8006c70 <HAL_UART_Transmit+0x66>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c5a:	2140      	movs	r1, #64	; 0x40
 8006c5c:	4620      	mov	r0, r4
 8006c5e:	f7ff ffa3 	bl	8006ba8 <UART_WaitOnFlagUntilTimeout>
 8006c62:	b958      	cbnz	r0, 8006c7c <HAL_UART_Transmit+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8006c64:	2320      	movs	r3, #32
 8006c66:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    __HAL_UNLOCK(huart);
 8006c6a:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
    return HAL_OK;
 8006c6e:	e006      	b.n	8006c7e <HAL_UART_Transmit+0x74>
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c70:	2200      	movs	r2, #0
 8006c72:	2180      	movs	r1, #128	; 0x80
 8006c74:	4620      	mov	r0, r4
 8006c76:	f7ff ff97 	bl	8006ba8 <UART_WaitOnFlagUntilTimeout>
 8006c7a:	b118      	cbz	r0, 8006c84 <HAL_UART_Transmit+0x7a>
        return HAL_TIMEOUT;
 8006c7c:	2003      	movs	r0, #3
}
 8006c7e:	b002      	add	sp, #8
 8006c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c84:	68a3      	ldr	r3, [r4, #8]
 8006c86:	6822      	ldr	r2, [r4, #0]
 8006c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c8c:	d10d      	bne.n	8006caa <HAL_UART_Transmit+0xa0>
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	b95b      	cbnz	r3, 8006caa <HAL_UART_Transmit+0xa0>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8006c92:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c9a:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8006c9c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 8006ca8:	e7d1      	b.n	8006c4e <HAL_UART_Transmit+0x44>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8006caa:	782b      	ldrb	r3, [r5, #0]
 8006cac:	8513      	strh	r3, [r2, #40]	; 0x28
 8006cae:	3501      	adds	r5, #1
 8006cb0:	e7f4      	b.n	8006c9c <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 8006cb2:	2001      	movs	r0, #1
 8006cb4:	e7e3      	b.n	8006c7e <HAL_UART_Transmit+0x74>
    return HAL_BUSY;
 8006cb6:	2002      	movs	r0, #2
 8006cb8:	e7e1      	b.n	8006c7e <HAL_UART_Transmit+0x74>

08006cba <UART_CheckIdleState>:
{
 8006cba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cbc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbe:	2600      	movs	r6, #0
 8006cc0:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8006cc4:	f7fa f9ac 	bl	8001020 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cc8:	6823      	ldr	r3, [r4, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8006cce:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cd0:	d417      	bmi.n	8006d02 <UART_CheckIdleState+0x48>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	075b      	lsls	r3, r3, #29
 8006cd8:	d50a      	bpl.n	8006cf0 <UART_CheckIdleState+0x36>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cda:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ce8:	4620      	mov	r0, r4
 8006cea:	f7ff ff5d 	bl	8006ba8 <UART_WaitOnFlagUntilTimeout>
 8006cee:	b9a0      	cbnz	r0, 8006d1a <UART_CheckIdleState+0x60>
  huart->gState= HAL_UART_STATE_READY;
 8006cf0:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006cf2:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8006cf4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006cf8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState= HAL_UART_STATE_READY;
 8006cfc:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
  return HAL_OK;
 8006d00:	e00c      	b.n	8006d1c <UART_CheckIdleState+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d06:	9300      	str	r3, [sp, #0]
 8006d08:	4632      	mov	r2, r6
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d10:	4620      	mov	r0, r4
 8006d12:	f7ff ff49 	bl	8006ba8 <UART_WaitOnFlagUntilTimeout>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d0db      	beq.n	8006cd2 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006d1a:	2003      	movs	r0, #3
}
 8006d1c:	b002      	add	sp, #8
 8006d1e:	bd70      	pop	{r4, r5, r6, pc}

08006d20 <HAL_UART_Init>:
{
 8006d20:	b510      	push	{r4, lr}
  if(huart == NULL)
 8006d22:	4604      	mov	r4, r0
 8006d24:	b360      	cbz	r0, 8006d80 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8006d26:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006d2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006d2e:	b91b      	cbnz	r3, 8006d38 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006d30:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006d34:	f018 fd72 	bl	801f81c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006d38:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006d3a:	2324      	movs	r3, #36	; 0x24
 8006d3c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UART_DISABLE(huart);
 8006d40:	6813      	ldr	r3, [r2, #0]
 8006d42:	f023 0301 	bic.w	r3, r3, #1
 8006d46:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f7ff fcdf 	bl	800670c <UART_SetConfig>
 8006d4e:	2801      	cmp	r0, #1
 8006d50:	d016      	beq.n	8006d80 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006d54:	b113      	cbz	r3, 8006d5c <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8006d56:	4620      	mov	r0, r4
 8006d58:	f7ff fed2 	bl	8006b00 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d5c:	6823      	ldr	r3, [r4, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d6c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006d74:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006d76:	601a      	str	r2, [r3, #0]
}
 8006d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8006d7c:	f7ff bf9d 	b.w	8006cba <UART_CheckIdleState>
}
 8006d80:	2001      	movs	r0, #1
 8006d82:	bd10      	pop	{r4, pc}

08006d84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006d86:	2203      	movs	r2, #3
 8006d88:	f88d 2003 	strb.w	r2, [sp, #3]
 8006d8c:	2207      	movs	r2, #7
 8006d8e:	f88d 2004 	strb.w	r2, [sp, #4]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006d92:	2208      	movs	r2, #8
 8006d94:	f88d 2008 	strb.w	r2, [sp, #8]
 8006d98:	f88d 200c 	strb.w	r2, [sp, #12]
  
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d9c:	6e82      	ldr	r2, [r0, #104]	; 0x68
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006d9e:	2301      	movs	r3, #1
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006da0:	2104      	movs	r1, #4
 8006da2:	2402      	movs	r4, #2
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006da4:	f88d 3000 	strb.w	r3, [sp]
 8006da8:	f88d 3001 	strb.w	r3, [sp, #1]
 8006dac:	f88d 3002 	strb.w	r3, [sp, #2]
 8006db0:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006db4:	f88d 1009 	strb.w	r1, [sp, #9]
 8006db8:	f88d 400a 	strb.w	r4, [sp, #10]
 8006dbc:	f88d 100b 	strb.w	r1, [sp, #11]
 8006dc0:	f88d 300d 	strb.w	r3, [sp, #13]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006dc4:	b92a      	cbnz	r2, 8006dd2 <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1;
 8006dc6:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    rx_fifo_depth = 8; /* RX Fifo size */
    tx_fifo_depth = 8; /* TX Fifo size */
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006dca:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  }
}
 8006dce:	b004      	add	sp, #16
 8006dd0:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006dd2:	6803      	ldr	r3, [r0, #0]
 8006dd4:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006dd6:	6899      	ldr	r1, [r3, #8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8006dd8:	ab04      	add	r3, sp, #16
 8006dda:	eb03 7151 	add.w	r1, r3, r1, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006dde:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8006de2:	f811 3c10 	ldrb.w	r3, [r1, #-16]
 8006de6:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8006dea:	00db      	lsls	r3, r3, #3
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	fbb3 f3f1 	udiv	r3, r3, r1
 8006df2:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006df6:	ab04      	add	r3, sp, #16
 8006df8:	441a      	add	r2, r3
 8006dfa:	f812 3c10 	ldrb.w	r3, [r2, #-16]
 8006dfe:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8006e02:	00db      	lsls	r3, r3, #3
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e0a:	e7de      	b.n	8006dca <UARTEx_SetNbDataToProcess+0x46>

08006e0c <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8006e0c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d014      	beq.n	8006e3e <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e14:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006e16:	2324      	movs	r3, #36	; 0x24
 8006e18:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e1c:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006e1e:	6813      	ldr	r3, [r2, #0]
 8006e20:	f023 0301 	bic.w	r3, r3, #1
 8006e24:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006e26:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	6683      	str	r3, [r0, #104]	; 0x68
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e2e:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e30:	2220      	movs	r2, #32
 8006e32:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006e36:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  return HAL_OK;
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006e3e:	2002      	movs	r0, #2
}
 8006e40:	4770      	bx	lr

08006e42 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006e42:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006e44:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e48:	2b01      	cmp	r3, #1
{
 8006e4a:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006e4c:	d01b      	beq.n	8006e86 <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006e54:	2324      	movs	r3, #36	; 0x24
 8006e56:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e5a:	6803      	ldr	r3, [r0, #0]
 8006e5c:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	f022 0201 	bic.w	r2, r2, #1
 8006e64:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006e6c:	4311      	orrs	r1, r2
 8006e6e:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006e70:	f7ff ff88 	bl	8006d84 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e74:	6803      	ldr	r3, [r0, #0]
 8006e76:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006e78:	2320      	movs	r3, #32
 8006e7a:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006e7e:	2000      	movs	r0, #0
 8006e80:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8006e84:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006e86:	2002      	movs	r0, #2
}
 8006e88:	bd38      	pop	{r3, r4, r5, pc}

08006e8a <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006e8a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006e8c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006e90:	2b01      	cmp	r3, #1
{
 8006e92:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006e94:	d01b      	beq.n	8006ece <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8006e96:	2301      	movs	r3, #1
 8006e98:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006e9c:	2324      	movs	r3, #36	; 0x24
 8006e9e:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ea2:	6803      	ldr	r3, [r0, #0]
 8006ea4:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	f022 0201 	bic.w	r2, r2, #1
 8006eac:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006eae:	689a      	ldr	r2, [r3, #8]
 8006eb0:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8006eb4:	4311      	orrs	r1, r2
 8006eb6:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006eb8:	f7ff ff64 	bl	8006d84 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ebc:	6803      	ldr	r3, [r0, #0]
 8006ebe:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006ec0:	2320      	movs	r3, #32
 8006ec2:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8006ecc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006ece:	2002      	movs	r0, #2
}
 8006ed0:	bd38      	pop	{r3, r4, r5, pc}
	...

08006ed4 <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006ed4:	4b11      	ldr	r3, [pc, #68]	; (8006f1c <SDMMC_GetCmdResp2+0x48>)
 8006ed6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ee0:	f241 3388 	movw	r3, #5000	; 0x1388
 8006ee4:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8006ee6:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006eea:	d313      	bcc.n	8006f14 <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006eec:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006eee:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006ef2:	d0f8      	beq.n	8006ee6 <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ef4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006ef6:	075b      	lsls	r3, r3, #29
 8006ef8:	d503      	bpl.n	8006f02 <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006efa:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006efc:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006f02:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006f04:	f013 0301 	ands.w	r3, r3, #1
 8006f08:	d001      	beq.n	8006f0e <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	e7f6      	b.n	8006efc <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f0e:	4a04      	ldr	r2, [pc, #16]	; (8006f20 <SDMMC_GetCmdResp2+0x4c>)
 8006f10:	6382      	str	r2, [r0, #56]	; 0x38
 8006f12:	e7f4      	b.n	8006efe <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8006f14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f18:	e7f1      	b.n	8006efe <SDMMC_GetCmdResp2+0x2a>
 8006f1a:	bf00      	nop
 8006f1c:	20000ed4 	.word	0x20000ed4
 8006f20:	002000c5 	.word	0x002000c5

08006f24 <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8006f24:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <SDMMC_GetCmdResp3+0x3c>)
 8006f26:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f30:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f34:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8006f36:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006f3a:	d30d      	bcc.n	8006f58 <SDMMC_GetCmdResp3+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8006f3c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8006f3e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8006f42:	d0f8      	beq.n	8006f36 <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006f44:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006f46:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006f4a:	bf15      	itete	ne
 8006f4c:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f4e:	4a05      	ldreq	r2, [pc, #20]	; (8006f64 <SDMMC_GetCmdResp3+0x40>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006f50:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006f52:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006f54:	4618      	mov	r0, r3
 8006f56:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8006f58:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	20000ed4 	.word	0x20000ed4
 8006f64:	002000c5 	.word	0x002000c5

08006f68 <SDMMC_Init>:
{
 8006f68:	b084      	sub	sp, #16
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	ac03      	add	r4, sp, #12
 8006f6e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8006f72:	9a04      	ldr	r2, [sp, #16]
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	6841      	ldr	r1, [r0, #4]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	9a05      	ldr	r2, [sp, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	9a06      	ldr	r2, [sp, #24]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	9a07      	ldr	r2, [sp, #28]
}
 8006f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	4a03      	ldr	r2, [pc, #12]	; (8006f98 <SDMMC_Init+0x30>)
 8006f8c:	400a      	ands	r2, r1
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	6043      	str	r3, [r0, #4]
}
 8006f92:	b004      	add	sp, #16
 8006f94:	2000      	movs	r0, #0
 8006f96:	4770      	bx	lr
 8006f98:	fffc2c00 	.word	0xfffc2c00

08006f9c <SDMMC_ReadFIFO>:
 8006f9c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 8006fa0:	4770      	bx	lr

08006fa2 <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 8006fa2:	680b      	ldr	r3, [r1, #0]
 8006fa4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 8006fa8:	2000      	movs	r0, #0
 8006faa:	4770      	bx	lr

08006fac <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006fac:	6803      	ldr	r3, [r0, #0]
 8006fae:	f043 0303 	orr.w	r3, r3, #3
 8006fb2:	6003      	str	r3, [r0, #0]
}
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	4770      	bx	lr

08006fb8 <SDMMC_PowerState_OFF>:
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8006fb8:	6803      	ldr	r3, [r0, #0]
 8006fba:	f023 0303 	bic.w	r3, r3, #3
 8006fbe:	6003      	str	r3, [r0, #0]
}
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	4770      	bx	lr

08006fc4 <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006fc4:	6800      	ldr	r0, [r0, #0]
}
 8006fc6:	f000 0003 	and.w	r0, r0, #3
 8006fca:	4770      	bx	lr

08006fcc <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8006fcc:	680b      	ldr	r3, [r1, #0]
 8006fce:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8006fd0:	68c2      	ldr	r2, [r0, #12]
 8006fd2:	4b06      	ldr	r3, [pc, #24]	; (8006fec <SDMMC_SendCommand+0x20>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	684a      	ldr	r2, [r1, #4]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	688a      	ldr	r2, [r1, #8]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	68ca      	ldr	r2, [r1, #12]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	690a      	ldr	r2, [r1, #16]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60c3      	str	r3, [r0, #12]
}
 8006fe8:	2000      	movs	r0, #0
 8006fea:	4770      	bx	lr
 8006fec:	fffee0c0 	.word	0xfffee0c0

08006ff0 <SDMMC_GetResponse>:
{
 8006ff0:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8006ff2:	3014      	adds	r0, #20
 8006ff4:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8006ffa:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8006ffc:	9b01      	ldr	r3, [sp, #4]
 8006ffe:	6818      	ldr	r0, [r3, #0]
}  
 8007000:	b002      	add	sp, #8
 8007002:	4770      	bx	lr

08007004 <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8007004:	4b44      	ldr	r3, [pc, #272]	; (8007118 <SDMMC_GetCmdResp1+0x114>)
{
 8007006:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 800700e:	fbb3 f3f4 	udiv	r3, r3, r4
 8007012:	435a      	muls	r2, r3
    if (count-- == 0)
 8007014:	2a00      	cmp	r2, #0
 8007016:	d049      	beq.n	80070ac <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007018:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800701a:	f013 0f45 	tst.w	r3, #69	; 0x45
 800701e:	f102 32ff 	add.w	r2, r2, #4294967295
 8007022:	d0f7      	beq.n	8007014 <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007024:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007026:	075c      	lsls	r4, r3, #29
 8007028:	d503      	bpl.n	8007032 <SDMMC_GetCmdResp1+0x2e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800702a:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800702c:	6383      	str	r3, [r0, #56]	; 0x38
}
 800702e:	4618      	mov	r0, r3
 8007030:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007032:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007034:	f013 0301 	ands.w	r3, r3, #1
 8007038:	d001      	beq.n	800703e <SDMMC_GetCmdResp1+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800703a:	2301      	movs	r3, #1
 800703c:	e7f6      	b.n	800702c <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDMMCx->RESPCMD);
 800703e:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007040:	b2d2      	uxtb	r2, r2
 8007042:	4291      	cmp	r1, r2
 8007044:	d135      	bne.n	80070b2 <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007046:	4a35      	ldr	r2, [pc, #212]	; (800711c <SDMMC_GetCmdResp1+0x118>)
 8007048:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800704a:	4619      	mov	r1, r3
 800704c:	f7ff ffd0 	bl	8006ff0 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007050:	4b33      	ldr	r3, [pc, #204]	; (8007120 <SDMMC_GetCmdResp1+0x11c>)
 8007052:	4003      	ands	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d0ea      	beq.n	800702e <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007058:	2800      	cmp	r0, #0
 800705a:	db2c      	blt.n	80070b6 <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800705c:	0042      	lsls	r2, r0, #1
 800705e:	d42d      	bmi.n	80070bc <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007060:	0084      	lsls	r4, r0, #2
 8007062:	d42d      	bmi.n	80070c0 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007064:	00c1      	lsls	r1, r0, #3
 8007066:	d42d      	bmi.n	80070c4 <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007068:	0102      	lsls	r2, r0, #4
 800706a:	d42e      	bmi.n	80070ca <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800706c:	0144      	lsls	r4, r0, #5
 800706e:	d42f      	bmi.n	80070d0 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007070:	01c1      	lsls	r1, r0, #7
 8007072:	d430      	bmi.n	80070d6 <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007074:	0202      	lsls	r2, r0, #8
 8007076:	d431      	bmi.n	80070dc <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007078:	0244      	lsls	r4, r0, #9
 800707a:	d432      	bmi.n	80070e2 <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800707c:	0281      	lsls	r1, r0, #10
 800707e:	d433      	bmi.n	80070e8 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007080:	02c2      	lsls	r2, r0, #11
 8007082:	d434      	bmi.n	80070ee <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007084:	0344      	lsls	r4, r0, #13
 8007086:	d435      	bmi.n	80070f4 <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007088:	0381      	lsls	r1, r0, #14
 800708a:	d436      	bmi.n	80070fa <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800708c:	03c2      	lsls	r2, r0, #15
 800708e:	d437      	bmi.n	8007100 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007090:	0404      	lsls	r4, r0, #16
 8007092:	d438      	bmi.n	8007106 <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007094:	0441      	lsls	r1, r0, #17
 8007096:	d439      	bmi.n	800710c <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007098:	0482      	lsls	r2, r0, #18
 800709a:	d43a      	bmi.n	8007112 <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800709c:	f010 0f08 	tst.w	r0, #8
 80070a0:	bf14      	ite	ne
 80070a2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80070a6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80070aa:	e7c0      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80070ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070b0:	e7bd      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e7bb      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80070b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070ba:	e7b8      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80070bc:	2340      	movs	r3, #64	; 0x40
 80070be:	e7b6      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80070c0:	2380      	movs	r3, #128	; 0x80
 80070c2:	e7b4      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80070c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070c8:	e7b1      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80070ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070ce:	e7ae      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80070d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070d4:	e7ab      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80070d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070da:	e7a8      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80070dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070e0:	e7a5      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80070e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070e6:	e7a2      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80070e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80070ec:	e79f      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 80070ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070f2:	e79c      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80070f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070f8:	e799      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80070fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80070fe:	e796      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007100:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007104:	e793      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007106:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800710a:	e790      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800710c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007110:	e78d      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 8007112:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007116:	e78a      	b.n	800702e <SDMMC_GetCmdResp1+0x2a>
 8007118:	20000ed4 	.word	0x20000ed4
 800711c:	002000c5 	.word	0x002000c5
 8007120:	fdffe008 	.word	0xfdffe008

08007124 <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 8007124:	680b      	ldr	r3, [r1, #0]
 8007126:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007128:	684b      	ldr	r3, [r1, #4]
 800712a:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 800712c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800712e:	688a      	ldr	r2, [r1, #8]
 8007130:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007134:	4313      	orrs	r3, r2
 8007136:	68ca      	ldr	r2, [r1, #12]
 8007138:	4313      	orrs	r3, r2
 800713a:	690a      	ldr	r2, [r1, #16]
 800713c:	4313      	orrs	r3, r2
 800713e:	694a      	ldr	r2, [r1, #20]
 8007140:	4313      	orrs	r3, r2
 8007142:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 8007144:	2000      	movs	r0, #0
 8007146:	4770      	bx	lr

08007148 <SDMMC_CmdBlockLength>:
{
 8007148:	b530      	push	{r4, r5, lr}
 800714a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800714c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007150:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007152:	2300      	movs	r3, #0
{
 8007154:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8007156:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007158:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800715a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800715c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800715e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007162:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007164:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007166:	f7ff ff31 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800716a:	f241 3288 	movw	r2, #5000	; 0x1388
 800716e:	4621      	mov	r1, r4
 8007170:	4628      	mov	r0, r5
 8007172:	f7ff ff47 	bl	8007004 <SDMMC_GetCmdResp1>
}
 8007176:	b007      	add	sp, #28
 8007178:	bd30      	pop	{r4, r5, pc}

0800717a <SDMMC_CmdReadSingleBlock>:
{
 800717a:	b530      	push	{r4, r5, lr}
 800717c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800717e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007182:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007184:	2300      	movs	r3, #0
{
 8007186:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007188:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800718a:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800718c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800718e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007190:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007194:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007196:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007198:	f7ff ff18 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800719c:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a0:	4621      	mov	r1, r4
 80071a2:	4628      	mov	r0, r5
 80071a4:	f7ff ff2e 	bl	8007004 <SDMMC_GetCmdResp1>
}
 80071a8:	b007      	add	sp, #28
 80071aa:	bd30      	pop	{r4, r5, pc}

080071ac <SDMMC_CmdReadMultiBlock>:
{
 80071ac:	b530      	push	{r4, r5, lr}
 80071ae:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071b4:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071b6:	2300      	movs	r3, #0
{
 80071b8:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80071ba:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80071bc:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071be:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071c0:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071c6:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80071c8:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071ca:	f7ff feff 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80071ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d2:	4621      	mov	r1, r4
 80071d4:	4628      	mov	r0, r5
 80071d6:	f7ff ff15 	bl	8007004 <SDMMC_GetCmdResp1>
}
 80071da:	b007      	add	sp, #28
 80071dc:	bd30      	pop	{r4, r5, pc}

080071de <SDMMC_CmdWriteSingleBlock>:
{
 80071de:	b530      	push	{r4, r5, lr}
 80071e0:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80071e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071e6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071e8:	2300      	movs	r3, #0
{
 80071ea:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80071ec:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80071ee:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80071f0:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071f2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80071f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071f8:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80071fa:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80071fc:	f7ff fee6 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007200:	f241 3288 	movw	r2, #5000	; 0x1388
 8007204:	4621      	mov	r1, r4
 8007206:	4628      	mov	r0, r5
 8007208:	f7ff fefc 	bl	8007004 <SDMMC_GetCmdResp1>
}
 800720c:	b007      	add	sp, #28
 800720e:	bd30      	pop	{r4, r5, pc}

08007210 <SDMMC_CmdWriteMultiBlock>:
{
 8007210:	b530      	push	{r4, r5, lr}
 8007212:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007218:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800721a:	2300      	movs	r3, #0
{
 800721c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800721e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007220:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007222:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007224:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007226:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800722a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800722c:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800722e:	f7ff fecd 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007232:	f241 3288 	movw	r2, #5000	; 0x1388
 8007236:	4621      	mov	r1, r4
 8007238:	4628      	mov	r0, r5
 800723a:	f7ff fee3 	bl	8007004 <SDMMC_GetCmdResp1>
}
 800723e:	b007      	add	sp, #28
 8007240:	bd30      	pop	{r4, r5, pc}
	...

08007244 <SDMMC_CmdStopTransfer>:
{
 8007244:	b530      	push	{r4, r5, lr}
 8007246:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 8007248:	2300      	movs	r3, #0
{
 800724a:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 800724c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800724e:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007250:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007254:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007256:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007258:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800725c:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800725e:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007260:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007262:	f7ff feb3 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8007266:	4a03      	ldr	r2, [pc, #12]	; (8007274 <SDMMC_CmdStopTransfer+0x30>)
 8007268:	4621      	mov	r1, r4
 800726a:	4628      	mov	r0, r5
 800726c:	f7ff feca 	bl	8007004 <SDMMC_GetCmdResp1>
}
 8007270:	b007      	add	sp, #28
 8007272:	bd30      	pop	{r4, r5, pc}
 8007274:	05f5e100 	.word	0x05f5e100

08007278 <SDMMC_CmdSelDesel>:
{
 8007278:	b530      	push	{r4, r5, lr}
 800727a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800727c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007280:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007282:	2300      	movs	r3, #0
{
 8007284:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007286:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007288:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800728a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800728c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007290:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007292:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007294:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007296:	f7ff fe99 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800729a:	f241 3288 	movw	r2, #5000	; 0x1388
 800729e:	4621      	mov	r1, r4
 80072a0:	4628      	mov	r0, r5
 80072a2:	f7ff feaf 	bl	8007004 <SDMMC_GetCmdResp1>
}
 80072a6:	b007      	add	sp, #28
 80072a8:	bd30      	pop	{r4, r5, pc}
	...

080072ac <SDMMC_CmdGoIdleState>:
{
 80072ac:	b510      	push	{r4, lr}
 80072ae:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80072b4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80072b6:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072b8:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072ba:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072c0:	9305      	str	r3, [sp, #20]
{
 80072c2:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072c4:	f7ff fe82 	bl	8006fcc <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80072c8:	4b0b      	ldr	r3, [pc, #44]	; (80072f8 <SDMMC_CmdGoIdleState+0x4c>)
 80072ca:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80072d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80072d8:	4353      	muls	r3, r2
    if (count-- == 0)
 80072da:	f113 33ff 	adds.w	r3, r3, #4294967295
 80072de:	d307      	bcc.n	80072f0 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80072e0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80072e2:	0612      	lsls	r2, r2, #24
 80072e4:	d5f9      	bpl.n	80072da <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80072e6:	4b05      	ldr	r3, [pc, #20]	; (80072fc <SDMMC_CmdGoIdleState+0x50>)
 80072e8:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 80072ea:	2000      	movs	r0, #0
}
 80072ec:	b006      	add	sp, #24
 80072ee:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 80072f0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 80072f4:	e7fa      	b.n	80072ec <SDMMC_CmdGoIdleState+0x40>
 80072f6:	bf00      	nop
 80072f8:	20000ed4 	.word	0x20000ed4
 80072fc:	002000c5 	.word	0x002000c5

08007300 <SDMMC_CmdOperCond>:
{
 8007300:	b510      	push	{r4, lr}
 8007302:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007304:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007308:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800730a:	2308      	movs	r3, #8
 800730c:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800730e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007312:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007314:	2300      	movs	r3, #0
 8007316:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007318:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800731a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800731e:	9305      	str	r3, [sp, #20]
{
 8007320:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007322:	f7ff fe53 	bl	8006fcc <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007326:	4b14      	ldr	r3, [pc, #80]	; (8007378 <SDMMC_CmdOperCond+0x78>)
 8007328:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007332:	f241 3388 	movw	r3, #5000	; 0x1388
 8007336:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8007338:	f113 33ff 	adds.w	r3, r3, #4294967295
 800733c:	d318      	bcc.n	8007370 <SDMMC_CmdOperCond+0x70>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800733e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007340:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007344:	d0f8      	beq.n	8007338 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007346:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007348:	075b      	lsls	r3, r3, #29
 800734a:	d503      	bpl.n	8007354 <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800734c:	2004      	movs	r0, #4
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800734e:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007350:	b006      	add	sp, #24
 8007352:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007354:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007356:	f012 0201 	ands.w	r2, r2, #1
 800735a:	d001      	beq.n	8007360 <SDMMC_CmdOperCond+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800735c:	2001      	movs	r0, #1
 800735e:	e7f6      	b.n	800734e <SDMMC_CmdOperCond+0x4e>
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007360:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8007362:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8007366:	d0f3      	beq.n	8007350 <SDMMC_CmdOperCond+0x50>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007368:	2340      	movs	r3, #64	; 0x40
 800736a:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800736c:	4610      	mov	r0, r2
 800736e:	e7ef      	b.n	8007350 <SDMMC_CmdOperCond+0x50>
      return SDMMC_ERROR_TIMEOUT;
 8007370:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007374:	e7ec      	b.n	8007350 <SDMMC_CmdOperCond+0x50>
 8007376:	bf00      	nop
 8007378:	20000ed4 	.word	0x20000ed4

0800737c <SDMMC_CmdAppCommand>:
{
 800737c:	b530      	push	{r4, r5, lr}
 800737e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007380:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007384:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007386:	2300      	movs	r3, #0
{
 8007388:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800738a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800738c:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800738e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007390:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007392:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007396:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007398:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800739a:	f7ff fe17 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800739e:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a2:	4621      	mov	r1, r4
 80073a4:	4628      	mov	r0, r5
 80073a6:	f7ff fe2d 	bl	8007004 <SDMMC_GetCmdResp1>
}
 80073aa:	b007      	add	sp, #28
 80073ac:	bd30      	pop	{r4, r5, pc}

080073ae <SDMMC_CmdAppOperCommand>:
{
 80073ae:	b510      	push	{r4, lr}
 80073b0:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80073b2:	2329      	movs	r3, #41	; 0x29
 80073b4:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073ba:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073bc:	2300      	movs	r3, #0
{
 80073be:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80073c0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073c2:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073c4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073ca:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073cc:	f7ff fdfe 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80073d0:	4620      	mov	r0, r4
 80073d2:	f7ff fda7 	bl	8006f24 <SDMMC_GetCmdResp3>
}
 80073d6:	b006      	add	sp, #24
 80073d8:	bd10      	pop	{r4, pc}

080073da <SDMMC_CmdSendSCR>:
{
 80073da:	b530      	push	{r4, r5, lr}
 80073dc:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 80073de:	2300      	movs	r3, #0
{
 80073e0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 80073e2:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80073e4:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073e6:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073ea:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073ec:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073f2:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073f4:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80073f6:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073f8:	f7ff fde8 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80073fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007400:	4621      	mov	r1, r4
 8007402:	4628      	mov	r0, r5
 8007404:	f7ff fdfe 	bl	8007004 <SDMMC_GetCmdResp1>
}
 8007408:	b007      	add	sp, #28
 800740a:	bd30      	pop	{r4, r5, pc}

0800740c <SDMMC_CmdSendCID>:
{
 800740c:	b510      	push	{r4, lr}
 800740e:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 8007410:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007412:	2202      	movs	r2, #2
{
 8007414:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 8007416:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007418:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800741a:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800741c:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007424:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007426:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007428:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800742a:	f7ff fdcf 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800742e:	4620      	mov	r0, r4
 8007430:	f7ff fd50 	bl	8006ed4 <SDMMC_GetCmdResp2>
}
 8007434:	b006      	add	sp, #24
 8007436:	bd10      	pop	{r4, pc}

08007438 <SDMMC_CmdSendCSD>:
{
 8007438:	b510      	push	{r4, lr}
 800743a:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800743c:	2309      	movs	r3, #9
 800743e:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007440:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007444:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007446:	2300      	movs	r3, #0
{
 8007448:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 800744a:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800744c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800744e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007454:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007456:	f7ff fdb9 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800745a:	4620      	mov	r0, r4
 800745c:	f7ff fd3a 	bl	8006ed4 <SDMMC_GetCmdResp2>
}
 8007460:	b006      	add	sp, #24
 8007462:	bd10      	pop	{r4, pc}

08007464 <SDMMC_CmdSetRelAdd>:
{
 8007464:	b530      	push	{r4, r5, lr}
 8007466:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 8007468:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800746a:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0;
 800746c:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800746e:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007470:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007472:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007476:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
 800747a:	460d      	mov	r5, r1
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800747c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800747e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007480:	9305      	str	r3, [sp, #20]
{
 8007482:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007484:	f7ff fda2 	bl	8006fcc <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007488:	4b1f      	ldr	r3, [pc, #124]	; (8007508 <SDMMC_CmdSetRelAdd+0xa4>)
 800748a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	fbb3 f2f2 	udiv	r2, r3, r2
 8007494:	f241 3388 	movw	r3, #5000	; 0x1388
 8007498:	4353      	muls	r3, r2
    if (count-- == 0)
 800749a:	f113 33ff 	adds.w	r3, r3, #4294967295
 800749e:	d32a      	bcc.n	80074f6 <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80074a0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80074a2:	f012 0f45 	tst.w	r2, #69	; 0x45
 80074a6:	d0f8      	beq.n	800749a <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80074a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074aa:	075a      	lsls	r2, r3, #29
 80074ac:	d503      	bpl.n	80074b6 <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80074ae:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80074b0:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80074b2:	b007      	add	sp, #28
 80074b4:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80074b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074b8:	f011 0101 	ands.w	r1, r1, #1
 80074bc:	d001      	beq.n	80074c2 <SDMMC_CmdSetRelAdd+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80074be:	2001      	movs	r0, #1
 80074c0:	e7f6      	b.n	80074b0 <SDMMC_CmdSetRelAdd+0x4c>
  return (uint8_t)(SDMMCx->RESPCMD);
 80074c2:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d118      	bne.n	80074fc <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80074ca:	4b10      	ldr	r3, [pc, #64]	; (800750c <SDMMC_CmdSetRelAdd+0xa8>)
 80074cc:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80074ce:	4620      	mov	r0, r4
 80074d0:	f7ff fd8e 	bl	8006ff0 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80074d4:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 80074d8:	d103      	bne.n	80074e2 <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 80074da:	0c00      	lsrs	r0, r0, #16
 80074dc:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 80074de:	4618      	mov	r0, r3
 80074e0:	e7e7      	b.n	80074b2 <SDMMC_CmdSetRelAdd+0x4e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80074e2:	0443      	lsls	r3, r0, #17
 80074e4:	d40c      	bmi.n	8007500 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80074e6:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 80074ea:	bf14      	ite	ne
 80074ec:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 80074f0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80074f4:	e7dd      	b.n	80074b2 <SDMMC_CmdSetRelAdd+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 80074f6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80074fa:	e7da      	b.n	80074b2 <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074fc:	2001      	movs	r0, #1
 80074fe:	e7d8      	b.n	80074b2 <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007500:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007504:	e7d5      	b.n	80074b2 <SDMMC_CmdSetRelAdd+0x4e>
 8007506:	bf00      	nop
 8007508:	20000ed4 	.word	0x20000ed4
 800750c:	002000c5 	.word	0x002000c5

08007510 <SDMMC_CmdSendStatus>:
{
 8007510:	b530      	push	{r4, r5, lr}
 8007512:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007518:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800751a:	2300      	movs	r3, #0
{
 800751c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 800751e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007520:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007522:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007524:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800752a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800752c:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800752e:	f7ff fd4d 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8007532:	f241 3288 	movw	r2, #5000	; 0x1388
 8007536:	4621      	mov	r1, r4
 8007538:	4628      	mov	r0, r5
 800753a:	f7ff fd63 	bl	8007004 <SDMMC_GetCmdResp1>
}
 800753e:	b007      	add	sp, #28
 8007540:	bd30      	pop	{r4, r5, pc}

08007542 <SDMMC_CmdSwitch>:
{
 8007542:	b530      	push	{r4, r5, lr}
 8007544:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800754a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800754c:	2300      	movs	r3, #0
{
 800754e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007550:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8007552:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007554:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007556:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800755c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800755e:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007560:	f7ff fd34 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 8007564:	f241 3288 	movw	r2, #5000	; 0x1388
 8007568:	4621      	mov	r1, r4
 800756a:	4628      	mov	r0, r5
 800756c:	f7ff fd4a 	bl	8007004 <SDMMC_GetCmdResp1>
}
 8007570:	b007      	add	sp, #28
 8007572:	bd30      	pop	{r4, r5, pc}

08007574 <SDMMC_CmdBusWidth>:
 8007574:	f7ff bfe5 	b.w	8007542 <SDMMC_CmdSwitch>

08007578 <SDMMC_CmdVoltageSwitch>:
{
 8007578:	b530      	push	{r4, r5, lr}
 800757a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0x00000000;
 800757c:	2300      	movs	r3, #0
{
 800757e:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 8007580:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007582:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007584:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007588:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800758a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800758c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007590:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007592:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8007594:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007596:	f7ff fd19 	bl	8006fcc <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800759a:	f241 3288 	movw	r2, #5000	; 0x1388
 800759e:	4621      	mov	r1, r4
 80075a0:	4628      	mov	r0, r5
 80075a2:	f7ff fd2f 	bl	8007004 <SDMMC_GetCmdResp1>
}
 80075a6:	b007      	add	sp, #28
 80075a8:	bd30      	pop	{r4, r5, pc}
	...

080075ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075ac:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80075ae:	3b01      	subs	r3, #1
 80075b0:	d101      	bne.n	80075b6 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80075b2:	2003      	movs	r0, #3
 80075b4:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075b6:	6902      	ldr	r2, [r0, #16]
 80075b8:	2a00      	cmp	r2, #0
 80075ba:	daf8      	bge.n	80075ae <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075bc:	6903      	ldr	r3, [r0, #16]
 80075be:	4a06      	ldr	r2, [pc, #24]	; (80075d8 <USB_CoreReset+0x2c>)
 80075c0:	f043 0301 	orr.w	r3, r3, #1
 80075c4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80075c6:	3a01      	subs	r2, #1
 80075c8:	d0f3      	beq.n	80075b2 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075ca:	6903      	ldr	r3, [r0, #16]
 80075cc:	f013 0301 	ands.w	r3, r3, #1
 80075d0:	d1f9      	bne.n	80075c6 <USB_CoreReset+0x1a>

  return HAL_OK;
 80075d2:	4618      	mov	r0, r3
}
 80075d4:	4770      	bx	lr
 80075d6:	bf00      	nop
 80075d8:	00030d41 	.word	0x00030d41

080075dc <USB_CoreInit>:
{
 80075dc:	b084      	sub	sp, #16
 80075de:	b538      	push	{r3, r4, r5, lr}
 80075e0:	ad05      	add	r5, sp, #20
 80075e2:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075e8:	2b01      	cmp	r3, #1
{
 80075ea:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075ec:	d11b      	bne.n	8007626 <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075ee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80075f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075f4:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075f6:	68c3      	ldr	r3, [r0, #12]
 80075f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80075fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007600:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007602:	68c3      	ldr	r3, [r0, #12]
 8007604:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007608:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 800760a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800760c:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800760e:	bf02      	ittt	eq
 8007610:	68c3      	ldreq	r3, [r0, #12]
 8007612:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8007616:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8007618:	f7ff ffc8 	bl	80075ac <USB_CoreReset>
}
 800761c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007620:	2000      	movs	r0, #0
 8007622:	b004      	add	sp, #16
 8007624:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007626:	68c3      	ldr	r3, [r0, #12]
 8007628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800762c:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 800762e:	f7ff ffbd 	bl	80075ac <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8007632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007636:	63a3      	str	r3, [r4, #56]	; 0x38
 8007638:	e7f0      	b.n	800761c <USB_CoreInit+0x40>

0800763a <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800763a:	6883      	ldr	r3, [r0, #8]
 800763c:	f043 0301 	orr.w	r3, r3, #1
 8007640:	6083      	str	r3, [r0, #8]
}
 8007642:	2000      	movs	r0, #0
 8007644:	4770      	bx	lr

08007646 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007646:	6883      	ldr	r3, [r0, #8]
 8007648:	f023 0301 	bic.w	r3, r3, #1
 800764c:	6083      	str	r3, [r0, #8]
}
 800764e:	2000      	movs	r0, #0
 8007650:	4770      	bx	lr

08007652 <USB_SetCurrentMode>:
{
 8007652:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007654:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007656:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007658:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800765c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800765e:	d108      	bne.n	8007672 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007660:	68c3      	ldr	r3, [r0, #12]
 8007662:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007666:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8007668:	2032      	movs	r0, #50	; 0x32
 800766a:	f7f9 fcdf 	bl	800102c <HAL_Delay>
  return HAL_OK;
 800766e:	2000      	movs	r0, #0
 8007670:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8007672:	b919      	cbnz	r1, 800767c <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007674:	68c3      	ldr	r3, [r0, #12]
 8007676:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800767a:	e7f4      	b.n	8007666 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800767c:	2001      	movs	r0, #1
}
 800767e:	bd08      	pop	{r3, pc}

08007680 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007680:	0189      	lsls	r1, r1, #6
 8007682:	f041 0120 	orr.w	r1, r1, #32
 8007686:	4a06      	ldr	r2, [pc, #24]	; (80076a0 <USB_FlushTxFifo+0x20>)
 8007688:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800768a:	3a01      	subs	r2, #1
 800768c:	d005      	beq.n	800769a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800768e:	6903      	ldr	r3, [r0, #16]
 8007690:	f013 0320 	ands.w	r3, r3, #32
 8007694:	d1f9      	bne.n	800768a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8007696:	4618      	mov	r0, r3
 8007698:	4770      	bx	lr
      return HAL_TIMEOUT;
 800769a:	2003      	movs	r0, #3
}
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	00030d41 	.word	0x00030d41

080076a4 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80076a4:	2310      	movs	r3, #16
 80076a6:	4a06      	ldr	r2, [pc, #24]	; (80076c0 <USB_FlushRxFifo+0x1c>)
 80076a8:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80076aa:	3a01      	subs	r2, #1
 80076ac:	d005      	beq.n	80076ba <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80076ae:	6903      	ldr	r3, [r0, #16]
 80076b0:	f013 0310 	ands.w	r3, r3, #16
 80076b4:	d1f9      	bne.n	80076aa <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80076b6:	4618      	mov	r0, r3
 80076b8:	4770      	bx	lr
      return HAL_TIMEOUT;
 80076ba:	2003      	movs	r0, #3
}
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	00030d41 	.word	0x00030d41

080076c4 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80076c4:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80076c8:	4319      	orrs	r1, r3
 80076ca:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80076ce:	2000      	movs	r0, #0
 80076d0:	4770      	bx	lr
	...

080076d4 <USB_DevInit>:
{
 80076d4:	b084      	sub	sp, #16
 80076d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076da:	4604      	mov	r4, r0
 80076dc:	a807      	add	r0, sp, #28
 80076de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80076e2:	2300      	movs	r3, #0
 80076e4:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80076e6:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 80076e8:	4619      	mov	r1, r3
 80076ea:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80076ee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 80076f2:	3301      	adds	r3, #1
 80076f4:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 80076f6:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 80076f8:	d1f7      	bne.n	80076ea <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80076fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80076fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007700:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8007702:	b95f      	cbnz	r7, 800771c <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007704:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007706:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800770a:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800770c:	6823      	ldr	r3, [r4, #0]
 800770e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007712:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800771a:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800771c:	2500      	movs	r5, #0
 800771e:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007722:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8007726:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800772a:	2103      	movs	r1, #3
 800772c:	4620      	mov	r0, r4
 800772e:	f7ff ffc9 	bl	80076c4 <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007732:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8007736:	2110      	movs	r1, #16
 8007738:	4620      	mov	r0, r4
 800773a:	f7ff ffa1 	bl	8007680 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800773e:	4620      	mov	r0, r4
 8007740:	f7ff ffb0 	bl	80076a4 <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 8007744:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007746:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 8007748:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 800774a:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 800774c:	61f5      	str	r5, [r6, #28]
 800774e:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007756:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800775a:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800775e:	4543      	cmp	r3, r8
 8007760:	d12f      	bne.n	80077c2 <USB_DevInit+0xee>
 8007762:	2100      	movs	r1, #0
 8007764:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007768:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800776a:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800776e:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007772:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007776:	428b      	cmp	r3, r1
 8007778:	d134      	bne.n	80077e4 <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800777a:	6933      	ldr	r3, [r6, #16]
 800777c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007780:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 8007782:	2300      	movs	r3, #0
 8007784:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007786:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 800778a:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800778c:	69a3      	ldr	r3, [r4, #24]
 800778e:	f043 0310 	orr.w	r3, r3, #16
 8007792:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007794:	69a2      	ldr	r2, [r4, #24]
 8007796:	4b1c      	ldr	r3, [pc, #112]	; (8007808 <USB_DevInit+0x134>)
 8007798:	4313      	orrs	r3, r2
 800779a:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 800779c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800779e:	b11b      	cbz	r3, 80077a8 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80077a0:	69a3      	ldr	r3, [r4, #24]
 80077a2:	f043 0308 	orr.w	r3, r3, #8
 80077a6:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80077a8:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077aa:	bf01      	itttt	eq
 80077ac:	69a3      	ldreq	r3, [r4, #24]
 80077ae:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80077b2:	f043 0304 	orreq.w	r3, r3, #4
 80077b6:	61a3      	streq	r3, [r4, #24]
}
 80077b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077bc:	2000      	movs	r0, #0
 80077be:	b004      	add	sp, #16
 80077c0:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077c2:	f8d2 c000 	ldr.w	ip, [r2]
 80077c6:	f1bc 0f00 	cmp.w	ip, #0
 80077ca:	da09      	bge.n	80077e0 <USB_DevInit+0x10c>
      if (i == 0U)
 80077cc:	b933      	cbnz	r3, 80077dc <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80077ce:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80077d0:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077d2:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80077d4:	f8c2 e008 	str.w	lr, [r2, #8]
 80077d8:	3220      	adds	r2, #32
 80077da:	e7c0      	b.n	800775e <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80077dc:	6010      	str	r0, [r2, #0]
 80077de:	e7f7      	b.n	80077d0 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 80077e0:	6011      	str	r1, [r2, #0]
 80077e2:	e7f5      	b.n	80077d0 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077e4:	f8d2 8000 	ldr.w	r8, [r2]
 80077e8:	f1b8 0f00 	cmp.w	r8, #0
 80077ec:	da0a      	bge.n	8007804 <USB_DevInit+0x130>
      if (i == 0U)
 80077ee:	b939      	cbnz	r1, 8007800 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80077f0:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80077f4:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077f6:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80077f8:	f8c2 c008 	str.w	ip, [r2, #8]
 80077fc:	3220      	adds	r2, #32
 80077fe:	e7ba      	b.n	8007776 <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007800:	6015      	str	r5, [r2, #0]
 8007802:	e7f7      	b.n	80077f4 <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007804:	6010      	str	r0, [r2, #0]
 8007806:	e7f5      	b.n	80077f4 <USB_DevInit+0x120>
 8007808:	803c3800 	.word	0x803c3800

0800780c <USB_ActivateEndpoint>:
{
 800780c:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 800780e:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007810:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007812:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8007816:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800781a:	2a01      	cmp	r2, #1
 800781c:	f004 050f 	and.w	r5, r4, #15
 8007820:	d11b      	bne.n	800785a <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007822:	40aa      	lsls	r2, r5
 8007824:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007826:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 800782a:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800782c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007830:	041a      	lsls	r2, r3, #16
 8007832:	d410      	bmi.n	8007856 <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007834:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007836:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007838:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 800783c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007848:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 800784c:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8007850:	4313      	orrs	r3, r2
 8007852:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007856:	2000      	movs	r0, #0
 8007858:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 800785a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800785e:	40aa      	lsls	r2, r5
 8007860:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007862:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8007866:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007868:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 800786c:	041b      	lsls	r3, r3, #16
 800786e:	d4f2      	bmi.n	8007856 <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007870:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 8007872:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007874:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007878:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800787c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007884:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007888:	4313      	orrs	r3, r2
 800788a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 800788e:	e7e2      	b.n	8007856 <USB_ActivateEndpoint+0x4a>

08007890 <USB_DeactivateEndpoint>:
{
 8007890:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 8007892:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007894:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 8007896:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 800789a:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 800789e:	2b01      	cmp	r3, #1
 80078a0:	f004 050f 	and.w	r5, r4, #15
 80078a4:	d110      	bne.n	80078c8 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80078a6:	40ab      	lsls	r3, r5
 80078a8:	43db      	mvns	r3, r3
 80078aa:	4019      	ands	r1, r3
 80078ac:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80078ae:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80078b0:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80078b4:	400b      	ands	r3, r1
 80078b6:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80078b8:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80078bc:	4b0b      	ldr	r3, [pc, #44]	; (80078ec <USB_DeactivateEndpoint+0x5c>)
 80078be:	4013      	ands	r3, r2
 80078c0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80078c4:	2000      	movs	r0, #0
 80078c6:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 80078c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80078cc:	40ab      	lsls	r3, r5
 80078ce:	43db      	mvns	r3, r3
 80078d0:	4019      	ands	r1, r3
 80078d2:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 80078d4:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80078d6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 80078da:	400b      	ands	r3, r1
 80078dc:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80078de:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80078e2:	4b03      	ldr	r3, [pc, #12]	; (80078f0 <USB_DeactivateEndpoint+0x60>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80078ea:	e7eb      	b.n	80078c4 <USB_DeactivateEndpoint+0x34>
 80078ec:	ec337800 	.word	0xec337800
 80078f0:	eff37800 	.word	0xeff37800

080078f4 <USB_EP0StartXfer>:
{
 80078f4:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 80078f6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80078f8:	780a      	ldrb	r2, [r1, #0]
 80078fa:	694d      	ldr	r5, [r1, #20]
 80078fc:	4e35      	ldr	r6, [pc, #212]	; (80079d4 <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 80078fe:	2b01      	cmp	r3, #1
 8007900:	f04f 0320 	mov.w	r3, #32
 8007904:	d145      	bne.n	8007992 <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007906:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 800790a:	bb45      	cbnz	r5, 800795e <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800790c:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007910:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007914:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007918:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800791c:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007920:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007924:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007928:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 800792c:	4026      	ands	r6, r4
 800792e:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    if (ep->xfer_len > 0U)
 8007932:	694b      	ldr	r3, [r1, #20]
 8007934:	b14b      	cbz	r3, 800794a <USB_EP0StartXfer+0x56>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007936:	780b      	ldrb	r3, [r1, #0]
 8007938:	f8d0 5834 	ldr.w	r5, [r0, #2100]	; 0x834
 800793c:	f003 010f 	and.w	r1, r3, #15
 8007940:	2301      	movs	r3, #1
 8007942:	408b      	lsls	r3, r1
 8007944:	432b      	orrs	r3, r5
 8007946:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800794a:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 800794e:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8007952:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8007956:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 800795a:	2000      	movs	r0, #0
 800795c:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800795e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007962:	691c      	ldr	r4, [r3, #16]
 8007964:	4026      	ands	r6, r4
 8007966:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007968:	691c      	ldr	r4, [r3, #16]
 800796a:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 800796e:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007972:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8007974:	688c      	ldr	r4, [r1, #8]
 8007976:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8007978:	bf88      	it	hi
 800797a:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800797c:	691c      	ldr	r4, [r3, #16]
 800797e:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007982:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007984:	694c      	ldr	r4, [r1, #20]
 8007986:	691d      	ldr	r5, [r3, #16]
 8007988:	f3c4 0412 	ubfx	r4, r4, #0, #19
 800798c:	432c      	orrs	r4, r5
 800798e:	611c      	str	r4, [r3, #16]
 8007990:	e7cf      	b.n	8007932 <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007992:	fb13 0002 	smlabb	r0, r3, r2, r0
 8007996:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 800799a:	691a      	ldr	r2, [r3, #16]
 800799c:	4032      	ands	r2, r6
 800799e:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80079a0:	691a      	ldr	r2, [r3, #16]
 80079a2:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 80079a6:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 80079aa:	611a      	str	r2, [r3, #16]
 80079ac:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 80079ae:	b105      	cbz	r5, 80079b2 <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 80079b0:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80079b2:	6919      	ldr	r1, [r3, #16]
 80079b4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 80079b8:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80079ba:	6919      	ldr	r1, [r3, #16]
 80079bc:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80079c0:	430a      	orrs	r2, r1
 80079c2:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079c4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80079c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079cc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80079d0:	e7c3      	b.n	800795a <USB_EP0StartXfer+0x66>
 80079d2:	bf00      	nop
 80079d4:	fff80000 	.word	0xfff80000

080079d8 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 80079d8:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 80079da:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 80079de:	f023 0303 	bic.w	r3, r3, #3
 80079e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80079e6:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 80079e8:	4299      	cmp	r1, r3
 80079ea:	d101      	bne.n	80079f0 <USB_WritePacket+0x18>
}
 80079ec:	2000      	movs	r0, #0
 80079ee:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 80079f0:	f851 0b04 	ldr.w	r0, [r1], #4
 80079f4:	6010      	str	r0, [r2, #0]
 80079f6:	e7f7      	b.n	80079e8 <USB_WritePacket+0x10>

080079f8 <USB_EPStartXfer>:
{
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 80079fa:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80079fc:	780d      	ldrb	r5, [r1, #0]
 80079fe:	4e5f      	ldr	r6, [pc, #380]	; (8007b7c <USB_EPStartXfer+0x184>)
  if (ep->is_in == 1U)
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	f04f 0220 	mov.w	r2, #32
 8007a06:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a08:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 8007a0c:	d169      	bne.n	8007ae2 <USB_EPStartXfer+0xea>
    if (ep->xfer_len == 0U)
 8007a0e:	bb83      	cbnz	r3, 8007a72 <USB_EPStartXfer+0x7a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a10:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 8007a14:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 8007a18:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007a1c:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007a20:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a22:	6922      	ldr	r2, [r4, #16]
 8007a24:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007a28:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a2a:	6922      	ldr	r2, [r4, #16]
 8007a2c:	4016      	ands	r6, r2
 8007a2e:	6126      	str	r6, [r4, #16]
    if (ep->type != EP_TYPE_ISOC)
 8007a30:	78ce      	ldrb	r6, [r1, #3]
 8007a32:	2e01      	cmp	r6, #1
 8007a34:	f000 8094 	beq.w	8007b60 <USB_EPStartXfer+0x168>
      if (ep->xfer_len > 0U)
 8007a38:	b153      	cbz	r3, 8007a50 <USB_EPStartXfer+0x58>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007a3a:	780a      	ldrb	r2, [r1, #0]
 8007a3c:	f8d0 e834 	ldr.w	lr, [r0, #2100]	; 0x834
 8007a40:	f002 040f 	and.w	r4, r2, #15
 8007a44:	2201      	movs	r2, #1
 8007a46:	40a2      	lsls	r2, r4
 8007a48:	ea42 020e 	orr.w	r2, r2, lr
 8007a4c:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a50:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    if (ep->type == EP_TYPE_ISOC)
 8007a54:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a56:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007a5a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8007a5e:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8007a62:	d104      	bne.n	8007a6e <USB_EPStartXfer+0x76>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007a64:	780a      	ldrb	r2, [r1, #0]
 8007a66:	68c9      	ldr	r1, [r1, #12]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	f7ff ffb5 	bl	80079d8 <USB_WritePacket>
}
 8007a6e:	2000      	movs	r0, #0
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a72:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007a76:	4034      	ands	r4, r6
 8007a78:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a7c:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a80:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a82:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007a86:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007a8a:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007a8e:	199c      	adds	r4, r3, r6
 8007a90:	3c01      	subs	r4, #1
 8007a92:	fbb4 f6f6 	udiv	r6, r4, r6
 8007a96:	4c3a      	ldr	r4, [pc, #232]	; (8007b80 <USB_EPStartXfer+0x188>)
 8007a98:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 8007a9c:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 8007aa0:	433c      	orrs	r4, r7
 8007aa2:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007aa6:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 8007aaa:	f3c3 0412 	ubfx	r4, r3, #0, #19
 8007aae:	4334      	orrs	r4, r6
 8007ab0:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8007ab4:	78cc      	ldrb	r4, [r1, #3]
 8007ab6:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8007abc:	d1b8      	bne.n	8007a30 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007abe:	6914      	ldr	r4, [r2, #16]
 8007ac0:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8007ac4:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007ac6:	6914      	ldr	r4, [r2, #16]
 8007ac8:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8007acc:	6114      	str	r4, [r2, #16]
 8007ace:	e7af      	b.n	8007a30 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007ad0:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007ad4:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007ad8:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007adc:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
 8007ae0:	e7b6      	b.n	8007a50 <USB_EPStartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007ae2:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8007ae6:	692c      	ldr	r4, [r5, #16]
 8007ae8:	4034      	ands	r4, r6
 8007aea:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007aec:	692c      	ldr	r4, [r5, #16]
 8007aee:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007af2:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007af6:	612c      	str	r4, [r5, #16]
 8007af8:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8007afa:	b9fb      	cbnz	r3, 8007b3c <USB_EPStartXfer+0x144>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007afc:	692b      	ldr	r3, [r5, #16]
 8007afe:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007b02:	431c      	orrs	r4, r3
 8007b04:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b06:	692b      	ldr	r3, [r5, #16]
 8007b08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b0c:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 8007b0e:	78cb      	ldrb	r3, [r1, #3]
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d10c      	bne.n	8007b2e <USB_EPStartXfer+0x136>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b14:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8007b18:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007b1c:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007b20:	bf0c      	ite	eq
 8007b22:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007b26:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8007b2a:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007b2e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007b32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b36:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  return HAL_OK;
 8007b3a:	e798      	b.n	8007a6e <USB_EPStartXfer+0x76>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b3c:	4e10      	ldr	r6, [pc, #64]	; (8007b80 <USB_EPStartXfer+0x188>)
 8007b3e:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007b40:	4423      	add	r3, r4
 8007b42:	3b01      	subs	r3, #1
 8007b44:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007b48:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8007b4c:	433e      	orrs	r6, r7
 8007b4e:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	692e      	ldr	r6, [r5, #16]
 8007b54:	435c      	muls	r4, r3
 8007b56:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007b5a:	4334      	orrs	r4, r6
 8007b5c:	612c      	str	r4, [r5, #16]
 8007b5e:	e7d6      	b.n	8007b0e <USB_EPStartXfer+0x116>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b60:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8007b64:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007b68:	f04f 0220 	mov.w	r2, #32
 8007b6c:	d0b0      	beq.n	8007ad0 <USB_EPStartXfer+0xd8>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007b6e:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007b72:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007b76:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8007b7a:	e7af      	b.n	8007adc <USB_EPStartXfer+0xe4>
 8007b7c:	fff80000 	.word	0xfff80000
 8007b80:	1ff80000 	.word	0x1ff80000

08007b84 <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007b84:	3203      	adds	r2, #3
 8007b86:	f022 0203 	bic.w	r2, r2, #3
 8007b8a:	440a      	add	r2, r1
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007b8c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8007b90:	4291      	cmp	r1, r2
 8007b92:	d101      	bne.n	8007b98 <USB_ReadPacket+0x14>
}
 8007b94:	4608      	mov	r0, r1
 8007b96:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007b98:	6803      	ldr	r3, [r0, #0]
 8007b9a:	f841 3b04 	str.w	r3, [r1], #4
 8007b9e:	e7f7      	b.n	8007b90 <USB_ReadPacket+0xc>

08007ba0 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8007ba0:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007ba2:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007baa:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007bae:	d112      	bne.n	8007bd6 <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bb0:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	db06      	blt.n	8007bc6 <USB_EPSetStall+0x26>
 8007bb8:	b12a      	cbz	r2, 8007bc6 <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007bba:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007bbe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bc2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007bc6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007bca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bce:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007bd2:	2000      	movs	r0, #0
 8007bd4:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bd6:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	db06      	blt.n	8007bec <USB_EPSetStall+0x4c>
 8007bde:	b12a      	cbz	r2, 8007bec <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007be0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007be4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007be8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007bec:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007bf0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bf4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007bf8:	e7eb      	b.n	8007bd2 <USB_EPSetStall+0x32>

08007bfa <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8007bfa:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007bfc:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c04:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007c08:	d111      	bne.n	8007c2e <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c0a:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007c0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c12:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c16:	78cb      	ldrb	r3, [r1, #3]
 8007c18:	3b02      	subs	r3, #2
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d805      	bhi.n	8007c2a <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c1e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c26:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c2e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007c32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c36:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c3a:	78cb      	ldrb	r3, [r1, #3]
 8007c3c:	3b02      	subs	r3, #2
 8007c3e:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c40:	bf9e      	ittt	ls
 8007c42:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8007c46:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8007c4a:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8007c4e:	e7ec      	b.n	8007c2a <USB_EPClearStall+0x30>

08007c50 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c50:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007c54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007c58:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007c5c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007c60:	0109      	lsls	r1, r1, #4
 8007c62:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8007c66:	4319      	orrs	r1, r3
 8007c68:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	4770      	bx	lr

08007c70 <USB_DevConnect>:
{
 8007c70:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c72:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007c76:	f023 0302 	bic.w	r3, r3, #2
 8007c7a:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8007c7e:	2003      	movs	r0, #3
 8007c80:	f7f9 f9d4 	bl	800102c <HAL_Delay>
}
 8007c84:	2000      	movs	r0, #0
 8007c86:	bd08      	pop	{r3, pc}

08007c88 <USB_DevDisconnect>:
{
 8007c88:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c8a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007c8e:	f043 0302 	orr.w	r3, r3, #2
 8007c92:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8007c96:	2003      	movs	r0, #3
 8007c98:	f7f9 f9c8 	bl	800102c <HAL_Delay>
}
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	bd08      	pop	{r3, pc}

08007ca0 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8007ca0:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007ca2:	6980      	ldr	r0, [r0, #24]
}
 8007ca4:	4010      	ands	r0, r2
 8007ca6:	4770      	bx	lr

08007ca8 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007ca8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007cac:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cb0:	69c0      	ldr	r0, [r0, #28]
 8007cb2:	4018      	ands	r0, r3
}
 8007cb4:	0c00      	lsrs	r0, r0, #16
 8007cb6:	4770      	bx	lr

08007cb8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007cb8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007cbc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cc0:	69c0      	ldr	r0, [r0, #28]
 8007cc2:	4018      	ands	r0, r3
}
 8007cc4:	b280      	uxth	r0, r0
 8007cc6:	4770      	bx	lr

08007cc8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007cc8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007ccc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007cd0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007cd4:	6940      	ldr	r0, [r0, #20]
}
 8007cd6:	4010      	ands	r0, r2
 8007cd8:	4770      	bx	lr

08007cda <USB_ReadDevInEPInterrupt>:
{
 8007cda:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8007cdc:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ce0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ce4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007ce8:	f001 010f 	and.w	r1, r1, #15
 8007cec:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007cee:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007cf2:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007cf4:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	4323      	orrs	r3, r4
}
 8007cfa:	4018      	ands	r0, r3
 8007cfc:	bd10      	pop	{r4, pc}

08007cfe <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8007cfe:	6940      	ldr	r0, [r0, #20]
}
 8007d00:	f000 0001 	and.w	r0, r0, #1
 8007d04:	4770      	bx	lr

08007d06 <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d06:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007d0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d0e:	f023 0307 	bic.w	r3, r3, #7
 8007d12:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007d16:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	f002 0206 	and.w	r2, r2, #6
 8007d20:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007d22:	bf02      	ittt	eq
 8007d24:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8007d28:	f042 0203 	orreq.w	r2, r2, #3
 8007d2c:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d36:	605a      	str	r2, [r3, #4]
}
 8007d38:	2000      	movs	r0, #0
 8007d3a:	4770      	bx	lr

08007d3c <USB_EP0_OutStart>:
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d3c:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007d40:	2000      	movs	r0, #0
 8007d42:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d44:	691a      	ldr	r2, [r3, #16]
 8007d46:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007d4a:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007d4c:	691a      	ldr	r2, [r3, #16]
 8007d4e:	f042 0218 	orr.w	r2, r2, #24
 8007d52:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007d54:	691a      	ldr	r2, [r3, #16]
 8007d56:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8007d5a:	611a      	str	r2, [r3, #16]
}
 8007d5c:	4770      	bx	lr
	...

08007d60 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8007d60:	2329      	movs	r3, #41	; 0x29
 8007d62:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8007d64:	4800      	ldr	r0, [pc, #0]	; (8007d68 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 8007d66:	4770      	bx	lr
 8007d68:	2000005c 	.word	0x2000005c

08007d6c <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8007d6c:	2329      	movs	r3, #41	; 0x29
 8007d6e:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8007d70:	4800      	ldr	r0, [pc, #0]	; (8007d74 <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 8007d72:	4770      	bx	lr
 8007d74:	20000088 	.word	0x20000088

08007d78 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007d78:	2329      	movs	r3, #41	; 0x29
 8007d7a:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 8007d7c:	4800      	ldr	r0, [pc, #0]	; (8007d80 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 8007d7e:	4770      	bx	lr
 8007d80:	200000cc 	.word	0x200000cc

08007d84 <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007d84:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8007d88:	2000      	movs	r0, #0
 8007d8a:	7718      	strb	r0, [r3, #28]

  return USBD_OK;
}
 8007d8c:	4770      	bx	lr

08007d8e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d8e:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007d90:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if (hhid->IsReportAvailable == 1U)
 8007d94:	69a3      	ldr	r3, [r4, #24]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d107      	bne.n	8007daa <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007d9a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007d9e:	7861      	ldrb	r1, [r4, #1]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	7820      	ldrb	r0, [r4, #0]
 8007da4:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	61a3      	str	r3, [r4, #24]
  }

  return USBD_OK;
}
 8007daa:	2000      	movs	r0, #0
 8007dac:	bd10      	pop	{r4, pc}
	...

08007db0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007db0:	230a      	movs	r3, #10
 8007db2:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8007db4:	4800      	ldr	r0, [pc, #0]	; (8007db8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8007db6:	4770      	bx	lr
 8007db8:	200000c0 	.word	0x200000c0

08007dbc <USBD_CUSTOM_HID_DataOut>:
{
 8007dbc:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007dbe:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007dc2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007dc6:	7869      	ldrb	r1, [r5, #1]
 8007dc8:	68db      	ldr	r3, [r3, #12]
{
 8007dca:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007dcc:	7828      	ldrb	r0, [r5, #0]
 8007dce:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	462a      	mov	r2, r5
 8007dd4:	2101      	movs	r1, #1
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f018 f93a 	bl	8020050 <USBD_LL_PrepareReceive>
}
 8007ddc:	2000      	movs	r0, #0
 8007dde:	bd38      	pop	{r3, r4, r5, pc}

08007de0 <USBD_CUSTOM_HID_Setup>:
{
 8007de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t status_info = 0U;
 8007de2:	2500      	movs	r5, #0
 8007de4:	f8ad 5006 	strh.w	r5, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007de8:	780d      	ldrb	r5, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007dea:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dee:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 8007df2:	4603      	mov	r3, r0
 8007df4:	460a      	mov	r2, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007df6:	d028      	beq.n	8007e4a <USBD_CUSTOM_HID_Setup+0x6a>
 8007df8:	2d20      	cmp	r5, #32
 8007dfa:	d161      	bne.n	8007ec0 <USBD_CUSTOM_HID_Setup+0xe0>
    switch (req->bRequest)
 8007dfc:	7849      	ldrb	r1, [r1, #1]
 8007dfe:	3902      	subs	r1, #2
 8007e00:	2909      	cmp	r1, #9
 8007e02:	d85b      	bhi.n	8007ebc <USBD_CUSTOM_HID_Setup+0xdc>
 8007e04:	e8df f001 	tbb	[pc, r1]
 8007e08:	5a5a0a15 	.word	0x5a5a0a15
 8007e0c:	195a5a5a 	.word	0x195a5a5a
 8007e10:	0511      	.short	0x0511
      hhid->Protocol = (uint8_t)(req->wValue);
 8007e12:	7893      	ldrb	r3, [r2, #2]
 8007e14:	60e3      	str	r3, [r4, #12]
  uint8_t ret = USBD_OK;
 8007e16:	2000      	movs	r0, #0
}
 8007e18:	b003      	add	sp, #12
 8007e1a:	bd30      	pop	{r4, r5, pc}
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f104 010c 	add.w	r1, r4, #12
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fc18 	bl	8008658 <USBD_CtlSendData>
 8007e28:	e7f5      	b.n	8007e16 <USBD_CUSTOM_HID_Setup+0x36>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007e2a:	8853      	ldrh	r3, [r2, #2]
 8007e2c:	0a1b      	lsrs	r3, r3, #8
 8007e2e:	6123      	str	r3, [r4, #16]
 8007e30:	e7f1      	b.n	8007e16 <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007e32:	2201      	movs	r2, #1
 8007e34:	f104 0110 	add.w	r1, r4, #16
 8007e38:	e7f3      	b.n	8007e22 <USBD_CUSTOM_HID_Setup+0x42>
      hhid->IsReportAvailable = 1U;
 8007e3a:	2101      	movs	r1, #1
 8007e3c:	61a1      	str	r1, [r4, #24]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 8007e3e:	88d2      	ldrh	r2, [r2, #6]
 8007e40:	4621      	mov	r1, r4
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fc1d 	bl	8008682 <USBD_CtlPrepareRx>
 8007e48:	e7e5      	b.n	8007e16 <USBD_CUSTOM_HID_Setup+0x36>
    switch (req->bRequest)
 8007e4a:	7849      	ldrb	r1, [r1, #1]
 8007e4c:	290b      	cmp	r1, #11
 8007e4e:	d835      	bhi.n	8007ebc <USBD_CUSTOM_HID_Setup+0xdc>
 8007e50:	e8df f001 	tbb	[pc, r1]
 8007e54:	34343406 	.word	0x34343406
 8007e58:	340e3434 	.word	0x340e3434
 8007e5c:	2d253434 	.word	0x2d253434
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e60:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007e64:	2903      	cmp	r1, #3
 8007e66:	d129      	bne.n	8007ebc <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007e68:	2202      	movs	r2, #2
 8007e6a:	f10d 0106 	add.w	r1, sp, #6
 8007e6e:	e7d8      	b.n	8007e22 <USBD_CUSTOM_HID_Setup+0x42>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8007e70:	8851      	ldrh	r1, [r2, #2]
 8007e72:	0a09      	lsrs	r1, r1, #8
 8007e74:	2922      	cmp	r1, #34	; 0x22
 8007e76:	d107      	bne.n	8007e88 <USBD_CUSTOM_HID_Setup+0xa8>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8007e78:	88d2      	ldrh	r2, [r2, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007e7a:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8007e7e:	2a21      	cmp	r2, #33	; 0x21
 8007e80:	bf28      	it	cs
 8007e82:	2221      	movcs	r2, #33	; 0x21
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007e84:	6809      	ldr	r1, [r1, #0]
 8007e86:	e7cc      	b.n	8007e22 <USBD_CUSTOM_HID_Setup+0x42>
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007e88:	2921      	cmp	r1, #33	; 0x21
 8007e8a:	d105      	bne.n	8007e98 <USBD_CUSTOM_HID_Setup+0xb8>
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8007e8c:	88d2      	ldrh	r2, [r2, #6]
          pbuf = USBD_CUSTOM_HID_Desc;
 8007e8e:	490e      	ldr	r1, [pc, #56]	; (8007ec8 <USBD_CUSTOM_HID_Setup+0xe8>)
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8007e90:	2a09      	cmp	r2, #9
 8007e92:	bf28      	it	cs
 8007e94:	2209      	movcs	r2, #9
 8007e96:	e7c4      	b.n	8007e22 <USBD_CUSTOM_HID_Setup+0x42>
  uint8_t  *pbuf = NULL;
 8007e98:	2100      	movs	r1, #0
  uint16_t len = 0U;
 8007e9a:	460a      	mov	r2, r1
 8007e9c:	e7c1      	b.n	8007e22 <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e9e:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007ea2:	2903      	cmp	r1, #3
 8007ea4:	d10a      	bne.n	8007ebc <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f104 0114 	add.w	r1, r4, #20
 8007eac:	e7b9      	b.n	8007e22 <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eae:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007eb2:	2903      	cmp	r1, #3
 8007eb4:	d102      	bne.n	8007ebc <USBD_CUSTOM_HID_Setup+0xdc>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8007eb6:	7893      	ldrb	r3, [r2, #2]
 8007eb8:	6163      	str	r3, [r4, #20]
 8007eba:	e7ac      	b.n	8007e16 <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	4618      	mov	r0, r3
    USBD_CtlError (pdev, req);
 8007ec0:	f000 fba3 	bl	800860a <USBD_CtlError>
    ret = USBD_FAIL;
 8007ec4:	2002      	movs	r0, #2
    break;
 8007ec6:	e7a7      	b.n	8007e18 <USBD_CUSTOM_HID_Setup+0x38>
 8007ec8:	200000b4 	.word	0x200000b4

08007ecc <USBD_CUSTOM_HID_DeInit>:
{
 8007ecc:	b538      	push	{r3, r4, r5, lr}
 8007ece:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007ed0:	2181      	movs	r1, #129	; 0x81
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007ed2:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8007ed4:	f018 f862 	bl	801ff9c <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007ed8:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007eda:	2101      	movs	r1, #1
 8007edc:	4620      	mov	r0, r4
 8007ede:	f018 f85d 	bl	801ff9c <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8007ee2:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8007ee6:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  if(pdev->pClassData != NULL)
 8007eea:	b14b      	cbz	r3, 8007f00 <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007eec:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007ef4:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8007ef8:	f018 f8ee 	bl	80200d8 <USBD_static_free>
    pdev->pClassData = NULL;
 8007efc:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8007f00:	2000      	movs	r0, #0
 8007f02:	bd38      	pop	{r3, r4, r5, pc}

08007f04 <USBD_CUSTOM_HID_Init>:
{
 8007f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f06:	4605      	mov	r5, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007f08:	2401      	movs	r4, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8007f0a:	2340      	movs	r3, #64	; 0x40
 8007f0c:	2203      	movs	r2, #3
 8007f0e:	2181      	movs	r1, #129	; 0x81
 8007f10:	f018 f834 	bl	801ff7c <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007f14:	230c      	movs	r3, #12
 8007f16:	2203      	movs	r2, #3
 8007f18:	4621      	mov	r1, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007f1a:	62ec      	str	r4, [r5, #44]	; 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	f018 f82d 	bl	801ff7c <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007f22:	f8c5 4158 	str.w	r4, [r5, #344]	; 0x158
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 8007f26:	2020      	movs	r0, #32
 8007f28:	f018 f8d2 	bl	80200d0 <USBD_static_malloc>
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	f8c5 0290 	str.w	r0, [r5, #656]	; 0x290
  if(pdev->pClassData == NULL)
 8007f32:	b168      	cbz	r0, 8007f50 <USBD_CUSTOM_HID_Init+0x4c>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007f34:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
    hhid->state = CUSTOM_HID_IDLE;
 8007f38:	2700      	movs	r7, #0
 8007f3a:	7707      	strb	r7, [r0, #28]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007f40:	230c      	movs	r3, #12
 8007f42:	4632      	mov	r2, r6
 8007f44:	4621      	mov	r1, r4
 8007f46:	4628      	mov	r0, r5
 8007f48:	f018 f882 	bl	8020050 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8007f4c:	4638      	mov	r0, r7
 8007f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1U;
 8007f50:	4620      	mov	r0, r4
}
 8007f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007f54 <USBD_CUSTOM_HID_SendReport>:
{
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8007f58:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8007f5c:	2a03      	cmp	r2, #3
 8007f5e:	d109      	bne.n	8007f74 <USBD_CUSTOM_HID_SendReport+0x20>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007f60:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    if(hhid->state == CUSTOM_HID_IDLE)
 8007f64:	7f35      	ldrb	r5, [r6, #28]
 8007f66:	2401      	movs	r4, #1
 8007f68:	b935      	cbnz	r5, 8007f78 <USBD_CUSTOM_HID_SendReport+0x24>
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007f6a:	460a      	mov	r2, r1
      hhid->state = CUSTOM_HID_BUSY;
 8007f6c:	7734      	strb	r4, [r6, #28]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007f6e:	2181      	movs	r1, #129	; 0x81
 8007f70:	f018 f860 	bl	8020034 <USBD_LL_Transmit>
  return USBD_OK;
 8007f74:	2000      	movs	r0, #0
 8007f76:	bd70      	pop	{r4, r5, r6, pc}
      return USBD_BUSY;
 8007f78:	4620      	mov	r0, r4
}
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}

08007f7c <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 8007f7c:	b119      	cbz	r1, 8007f86 <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8007f7e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 8007f82:	2000      	movs	r0, #0
 8007f84:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8007f86:	2002      	movs	r0, #2
  }

  return ret;
}
 8007f88:	4770      	bx	lr

08007f8a <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f8a:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007f8c:	b180      	cbz	r0, 8007fb0 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007f8e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007f92:	b113      	cbz	r3, 8007f9a <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8007f94:	2300      	movs	r3, #0
 8007f96:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007f9a:	b109      	cbz	r1, 8007fa0 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8007f9c:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 8007fa6:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007fa8:	f017 ffa6 	bl	801fef8 <USBD_LL_Init>

  return USBD_OK;
 8007fac:	2000      	movs	r0, #0
 8007fae:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 8007fb0:	2002      	movs	r0, #2
}
 8007fb2:	bd08      	pop	{r3, pc}

08007fb4 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8007fb4:	b119      	cbz	r1, 8007fbe <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007fb6:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 8007fba:	2000      	movs	r0, #0
 8007fbc:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007fbe:	2002      	movs	r0, #2
  }

  return status;
}
 8007fc0:	4770      	bx	lr

08007fc2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007fc2:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007fc4:	f017 ffcc 	bl	801ff60 <USBD_LL_Start>

  return USBD_OK;
}
 8007fc8:	2000      	movs	r0, #0
 8007fca:	bd08      	pop	{r3, pc}

08007fcc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007fcc:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8007fce:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007fd2:	b90b      	cbnz	r3, 8007fd8 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007fd4:	2002      	movs	r0, #2
 8007fd6:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4798      	blx	r3
 8007fdc:	2800      	cmp	r0, #0
 8007fde:	d1f9      	bne.n	8007fd4 <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8007fe0:	bd08      	pop	{r3, pc}

08007fe2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007fe2:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007fe4:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	4798      	blx	r3
  return USBD_OK;
}
 8007fec:	2000      	movs	r0, #0
 8007fee:	bd08      	pop	{r3, pc}

08007ff0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ff0:	b538      	push	{r3, r4, r5, lr}
 8007ff2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ff4:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f000 faf2 	bl	80085e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ffe:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8008000:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 8008004:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8008008:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 800800c:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8008010:	f001 031f 	and.w	r3, r1, #31
 8008014:	2b01      	cmp	r3, #1
 8008016:	d00e      	beq.n	8008036 <USBD_LL_SetupStage+0x46>
 8008018:	d307      	bcc.n	800802a <USBD_LL_SetupStage+0x3a>
 800801a:	2b02      	cmp	r3, #2
 800801c:	d010      	beq.n	8008040 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800801e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8008022:	4620      	mov	r0, r4
 8008024:	f017 ffc8 	bl	801ffb8 <USBD_LL_StallEP>
    break;
 8008028:	e003      	b.n	8008032 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 800802a:	4629      	mov	r1, r5
 800802c:	4620      	mov	r0, r4
 800802e:	f000 f901 	bl	8008234 <USBD_StdDevReq>
  }

  return USBD_OK;
}
 8008032:	2000      	movs	r0, #0
 8008034:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8008036:	4629      	mov	r1, r5
 8008038:	4620      	mov	r0, r4
 800803a:	f000 fa25 	bl	8008488 <USBD_StdItfReq>
    break;
 800803e:	e7f8      	b.n	8008032 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8008040:	4629      	mov	r1, r5
 8008042:	4620      	mov	r0, r4
 8008044:	f000 fa45 	bl	80084d2 <USBD_StdEPReq>
    break;
 8008048:	e7f3      	b.n	8008032 <USBD_LL_SetupStage+0x42>

0800804a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800804a:	b570      	push	{r4, r5, r6, lr}
 800804c:	4605      	mov	r5, r0
 800804e:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008050:	bb39      	cbnz	r1, 80080a2 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008052:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8008056:	2b03      	cmp	r3, #3
 8008058:	d11e      	bne.n	8008098 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 800805a:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 800805e:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 8008062:	4293      	cmp	r3, r2
 8008064:	d90b      	bls.n	800807e <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8008066:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 8008068:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800806a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 800806e:	bf8c      	ite	hi
 8008070:	b29a      	uxthhi	r2, r3
 8008072:	b292      	uxthls	r2, r2
 8008074:	4631      	mov	r1, r6
 8008076:	f000 fb13 	bl	80086a0 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800807a:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 800807c:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800807e:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008082:	691b      	ldr	r3, [r3, #16]
 8008084:	b123      	cbz	r3, 8008090 <USBD_LL_DataOutStage+0x46>
 8008086:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800808a:	2a03      	cmp	r2, #3
 800808c:	d100      	bne.n	8008090 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 800808e:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8008090:	4628      	mov	r0, r5
 8008092:	f000 fb0d 	bl	80086b0 <USBD_CtlSendStatus>
 8008096:	e7f0      	b.n	800807a <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008098:	2b05      	cmp	r3, #5
 800809a:	d1ee      	bne.n	800807a <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 800809c:	f017 ff8c 	bl	801ffb8 <USBD_LL_StallEP>
 80080a0:	e7eb      	b.n	800807a <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 80080a2:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	b12b      	cbz	r3, 80080b6 <USBD_LL_DataOutStage+0x6c>
 80080aa:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80080ae:	2a03      	cmp	r2, #3
 80080b0:	d101      	bne.n	80080b6 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 80080b2:	4798      	blx	r3
 80080b4:	e7e1      	b.n	800807a <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80080b6:	2002      	movs	r0, #2
}
 80080b8:	bd70      	pop	{r4, r5, r6, pc}

080080ba <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80080ba:	b570      	push	{r4, r5, r6, lr}
 80080bc:	4613      	mov	r3, r2
 80080be:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80080c0:	460e      	mov	r6, r1
 80080c2:	2900      	cmp	r1, #0
 80080c4:	d148      	bne.n	8008158 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80080c6:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 80080ca:	2a02      	cmp	r2, #2
 80080cc:	d13d      	bne.n	800814a <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 80080ce:	6a05      	ldr	r5, [r0, #32]
 80080d0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80080d2:	4295      	cmp	r5, r2
 80080d4:	d914      	bls.n	8008100 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80080d6:	1aaa      	subs	r2, r5, r2
 80080d8:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 80080da:	4619      	mov	r1, r3
 80080dc:	b292      	uxth	r2, r2
 80080de:	f000 fac8 	bl	8008672 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80080e2:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80080e4:	461a      	mov	r2, r3
 80080e6:	4619      	mov	r1, r3
 80080e8:	4620      	mov	r0, r4
 80080ea:	f017 ffb1 	bl	8020050 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80080ee:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 80080f2:	2b01      	cmp	r3, #1
 80080f4:	f04f 0000 	mov.w	r0, #0
 80080f8:	d13a      	bne.n	8008170 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80080fa:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 80080fe:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008100:	69c3      	ldr	r3, [r0, #28]
 8008102:	fbb3 f5f2 	udiv	r5, r3, r2
 8008106:	fb02 3515 	mls	r5, r2, r5, r3
 800810a:	b965      	cbnz	r5, 8008126 <USBD_LL_DataInStage+0x6c>
 800810c:	429a      	cmp	r2, r3
 800810e:	d80a      	bhi.n	8008126 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8008110:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8008114:	4293      	cmp	r3, r2
 8008116:	d206      	bcs.n	8008126 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008118:	462a      	mov	r2, r5
 800811a:	f000 faaa 	bl	8008672 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800811e:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008122:	462b      	mov	r3, r5
 8008124:	e7de      	b.n	80080e4 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008126:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	b12b      	cbz	r3, 800813a <USBD_LL_DataInStage+0x80>
 800812e:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 8008132:	2a03      	cmp	r2, #3
 8008134:	d101      	bne.n	800813a <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 8008136:	4620      	mov	r0, r4
 8008138:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 800813a:	2180      	movs	r1, #128	; 0x80
 800813c:	4620      	mov	r0, r4
 800813e:	f017 ff3b 	bl	801ffb8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008142:	4620      	mov	r0, r4
 8008144:	f000 fabf 	bl	80086c6 <USBD_CtlReceiveStatus>
 8008148:	e7d1      	b.n	80080ee <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800814a:	f032 0304 	bics.w	r3, r2, #4
 800814e:	d1ce      	bne.n	80080ee <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8008150:	2180      	movs	r1, #128	; 0x80
 8008152:	f017 ff31 	bl	801ffb8 <USBD_LL_StallEP>
 8008156:	e7ca      	b.n	80080ee <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008158:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	b133      	cbz	r3, 800816e <USBD_LL_DataInStage+0xb4>
 8008160:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008164:	2a03      	cmp	r2, #3
 8008166:	d102      	bne.n	800816e <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008168:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 800816a:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 800816c:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 800816e:	2002      	movs	r0, #2
}
 8008170:	bd70      	pop	{r4, r5, r6, pc}

08008172 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008172:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008174:	2200      	movs	r2, #0
{
 8008176:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008178:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800817a:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800817c:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800817e:	2340      	movs	r3, #64	; 0x40
 8008180:	f017 fefc 	bl	801ff7c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008184:	4633      	mov	r3, r6
 8008186:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008188:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800818c:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008190:	2200      	movs	r2, #0
 8008192:	4620      	mov	r0, r4
 8008194:	f017 fef2 	bl	801ff7c <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 8008198:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800819c:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 800819e:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80081a0:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081a2:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80081a6:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80081aa:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80081ac:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 80081b0:	b123      	cbz	r3, 80081bc <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081b2:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80081b6:	4620      	mov	r0, r4
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	4798      	blx	r3
  }

  return USBD_OK;
}
 80081bc:	2000      	movs	r0, #0
 80081be:	bd70      	pop	{r4, r5, r6, pc}

080081c0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80081c0:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80081c2:	2000      	movs	r0, #0
 80081c4:	4770      	bx	lr

080081c6 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80081c6:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80081ca:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80081ce:	2304      	movs	r3, #4
 80081d0:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80081d4:	2000      	movs	r0, #0
 80081d6:	4770      	bx	lr

080081d8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 80081d8:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 80081dc:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 80081e0:	2000      	movs	r0, #0
 80081e2:	4770      	bx	lr

080081e4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80081e4:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e6:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80081ea:	2a03      	cmp	r2, #3
 80081ec:	d104      	bne.n	80081f8 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 80081ee:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	b103      	cbz	r3, 80081f8 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 80081f6:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 80081f8:	2000      	movs	r0, #0
 80081fa:	bd08      	pop	{r3, pc}

080081fc <USBD_LL_IsoINIncomplete>:
 80081fc:	2000      	movs	r0, #0
 80081fe:	4770      	bx	lr

08008200 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8008200:	2000      	movs	r0, #0
 8008202:	4770      	bx	lr

08008204 <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 8008204:	2000      	movs	r0, #0
 8008206:	4770      	bx	lr

08008208 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008208:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800820a:	2201      	movs	r2, #1
 800820c:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008210:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 8008214:	7901      	ldrb	r1, [r0, #4]
 8008216:	6852      	ldr	r2, [r2, #4]
 8008218:	4790      	blx	r2

  return USBD_OK;
}
 800821a:	2000      	movs	r0, #0
 800821c:	bd08      	pop	{r3, pc}

0800821e <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800821e:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8008220:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8008222:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8008224:	f017 fec8 	bl	801ffb8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008228:	4620      	mov	r0, r4
 800822a:	2100      	movs	r1, #0
}
 800822c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8008230:	f017 bec2 	b.w	801ffb8 <USBD_LL_StallEP>

08008234 <USBD_StdDevReq>:
{
 8008234:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008236:	780b      	ldrb	r3, [r1, #0]
 8008238:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800823c:	2b20      	cmp	r3, #32
{
 800823e:	4604      	mov	r4, r0
 8008240:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008242:	d014      	beq.n	800826e <USBD_StdDevReq+0x3a>
 8008244:	2b40      	cmp	r3, #64	; 0x40
 8008246:	d012      	beq.n	800826e <USBD_StdDevReq+0x3a>
 8008248:	2b00      	cmp	r3, #0
 800824a:	f040 809c 	bne.w	8008386 <USBD_StdDevReq+0x152>
    switch (req->bRequest)
 800824e:	784b      	ldrb	r3, [r1, #1]
 8008250:	2b09      	cmp	r3, #9
 8008252:	f200 8097 	bhi.w	8008384 <USBD_StdDevReq+0x150>
 8008256:	e8df f013 	tbh	[pc, r3, lsl #1]
 800825a:	00ef      	.short	0x00ef
 800825c:	00950109 	.word	0x00950109
 8008260:	00950102 	.word	0x00950102
 8008264:	00130089 	.word	0x00130089
 8008268:	00da0095 	.word	0x00da0095
 800826c:	00a7      	.short	0x00a7
    pdev->pClass->Setup(pdev, req);
 800826e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008272:	4629      	mov	r1, r5
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	4620      	mov	r0, r4
 8008278:	4798      	blx	r3
}
 800827a:	2000      	movs	r0, #0
 800827c:	b003      	add	sp, #12
 800827e:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 8008280:	8849      	ldrh	r1, [r1, #2]
 8008282:	0a0b      	lsrs	r3, r1, #8
 8008284:	3b01      	subs	r3, #1
 8008286:	2b0e      	cmp	r3, #14
 8008288:	d87c      	bhi.n	8008384 <USBD_StdDevReq+0x150>
 800828a:	e8df f003 	tbb	[pc, r3]
 800828e:	2824      	.short	0x2824
 8008290:	5c7b7b35 	.word	0x5c7b7b35
 8008294:	7b7b7b65 	.word	0x7b7b7b65
 8008298:	7b7b7b7b 	.word	0x7b7b7b7b
 800829c:	08          	.byte	0x08
 800829d:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800829e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80082a2:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082a4:	7c20      	ldrb	r0, [r4, #16]
 80082a6:	f10d 0106 	add.w	r1, sp, #6
 80082aa:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80082ac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80082b0:	b152      	cbz	r2, 80082c8 <USBD_StdDevReq+0x94>
 80082b2:	88eb      	ldrh	r3, [r5, #6]
 80082b4:	b143      	cbz	r3, 80082c8 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 80082b6:	429a      	cmp	r2, r3
 80082b8:	bf28      	it	cs
 80082ba:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 80082bc:	4601      	mov	r1, r0
 80082be:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 80082c0:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80082c4:	f000 f9c8 	bl	8008658 <USBD_CtlSendData>
  if(req->wLength == 0U)
 80082c8:	88eb      	ldrh	r3, [r5, #6]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1d5      	bne.n	800827a <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 80082ce:	4620      	mov	r0, r4
 80082d0:	f000 f9ee 	bl	80086b0 <USBD_CtlSendStatus>
 80082d4:	e7d1      	b.n	800827a <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80082d6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	e7e2      	b.n	80082a4 <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 80082de:	7c02      	ldrb	r2, [r0, #16]
 80082e0:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80082e4:	b932      	cbnz	r2, 80082f4 <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80082e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80082e8:	f10d 0006 	add.w	r0, sp, #6
 80082ec:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80082ee:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80082f0:	7043      	strb	r3, [r0, #1]
 80082f2:	e7db      	b.n	80082ac <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f6:	e7f7      	b.n	80082e8 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 80082f8:	b2c9      	uxtb	r1, r1
 80082fa:	2905      	cmp	r1, #5
 80082fc:	d81c      	bhi.n	8008338 <USBD_StdDevReq+0x104>
 80082fe:	e8df f001 	tbb	[pc, r1]
 8008302:	0703      	.short	0x0703
 8008304:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008308:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	e7c9      	b.n	80082a4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008310:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	e7c5      	b.n	80082a4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008318:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	e7c1      	b.n	80082a4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008320:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	e7bd      	b.n	80082a4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008328:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	e7b9      	b.n	80082a4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008330:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	e7b5      	b.n	80082a4 <USBD_StdDevReq+0x70>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8008338:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800833c:	f10d 0206 	add.w	r2, sp, #6
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	4798      	blx	r3
 8008344:	e7b2      	b.n	80082ac <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008346:	7c03      	ldrb	r3, [r0, #16]
 8008348:	b9e3      	cbnz	r3, 8008384 <USBD_StdDevReq+0x150>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800834a:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800834e:	f10d 0006 	add.w	r0, sp, #6
 8008352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008354:	4798      	blx	r3
 8008356:	e7a9      	b.n	80082ac <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008358:	7c03      	ldrb	r3, [r0, #16]
 800835a:	b99b      	cbnz	r3, 8008384 <USBD_StdDevReq+0x150>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800835c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008360:	f10d 0006 	add.w	r0, sp, #6
 8008364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008366:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008368:	2307      	movs	r3, #7
 800836a:	e7c1      	b.n	80082f0 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800836c:	888b      	ldrh	r3, [r1, #4]
 800836e:	b94b      	cbnz	r3, 8008384 <USBD_StdDevReq+0x150>
 8008370:	88cb      	ldrh	r3, [r1, #6]
 8008372:	b93b      	cbnz	r3, 8008384 <USBD_StdDevReq+0x150>
 8008374:	884d      	ldrh	r5, [r1, #2]
 8008376:	2d7f      	cmp	r5, #127	; 0x7f
 8008378:	d804      	bhi.n	8008384 <USBD_StdDevReq+0x150>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800837a:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800837e:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008380:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008382:	d103      	bne.n	800838c <USBD_StdDevReq+0x158>
      USBD_CtlError(pdev, req);
 8008384:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8008386:	f7ff ff4a 	bl	800821e <USBD_CtlError.constprop.1>
    break;
 800838a:	e776      	b.n	800827a <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 800838c:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008390:	f017 fe42 	bl	8020018 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008394:	4620      	mov	r0, r4
 8008396:	f000 f98b 	bl	80086b0 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 800839a:	b11d      	cbz	r5, 80083a4 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800839c:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 800839e:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80083a2:	e76a      	b.n	800827a <USBD_StdDevReq+0x46>
 80083a4:	2301      	movs	r3, #1
 80083a6:	e7fa      	b.n	800839e <USBD_StdDevReq+0x16a>
  cfgidx = (uint8_t)(req->wValue);
 80083a8:	7889      	ldrb	r1, [r1, #2]
 80083aa:	4d36      	ldr	r5, [pc, #216]	; (8008484 <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083ac:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80083ae:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80083b0:	d8e8      	bhi.n	8008384 <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 80083b2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80083b6:	2b02      	cmp	r3, #2
 80083b8:	d008      	beq.n	80083cc <USBD_StdDevReq+0x198>
 80083ba:	2b03      	cmp	r3, #3
 80083bc:	d015      	beq.n	80083ea <USBD_StdDevReq+0x1b6>
      USBD_CtlError(pdev, req);
 80083be:	f7ff ff2e 	bl	800821e <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 80083c2:	7829      	ldrb	r1, [r5, #0]
 80083c4:	4620      	mov	r0, r4
 80083c6:	f7ff fe0c 	bl	8007fe2 <USBD_ClrClassConfig>
 80083ca:	e756      	b.n	800827a <USBD_StdDevReq+0x46>
      if (cfgidx)
 80083cc:	2900      	cmp	r1, #0
 80083ce:	f43f af7e 	beq.w	80082ce <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 80083d2:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80083d4:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 80083d6:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80083d8:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80083dc:	4620      	mov	r0, r4
 80083de:	f7ff fdf5 	bl	8007fcc <USBD_SetClassConfig>
 80083e2:	2802      	cmp	r0, #2
 80083e4:	f47f af73 	bne.w	80082ce <USBD_StdDevReq+0x9a>
 80083e8:	e7cc      	b.n	8008384 <USBD_StdDevReq+0x150>
      if (cfgidx == 0U)
 80083ea:	b931      	cbnz	r1, 80083fa <USBD_StdDevReq+0x1c6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80083ec:	2302      	movs	r3, #2
 80083ee:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80083f2:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80083f4:	f7ff fdf5 	bl	8007fe2 <USBD_ClrClassConfig>
 80083f8:	e769      	b.n	80082ce <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 80083fa:	6841      	ldr	r1, [r0, #4]
 80083fc:	2901      	cmp	r1, #1
 80083fe:	f43f af66 	beq.w	80082ce <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008402:	b2c9      	uxtb	r1, r1
 8008404:	f7ff fded 	bl	8007fe2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008408:	7829      	ldrb	r1, [r5, #0]
 800840a:	6061      	str	r1, [r4, #4]
 800840c:	e7e6      	b.n	80083dc <USBD_StdDevReq+0x1a8>
  if (req->wLength != 1U)
 800840e:	88ca      	ldrh	r2, [r1, #6]
 8008410:	2a01      	cmp	r2, #1
 8008412:	d1b7      	bne.n	8008384 <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 8008414:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008418:	2b00      	cmp	r3, #0
 800841a:	d0b3      	beq.n	8008384 <USBD_StdDevReq+0x150>
 800841c:	2b02      	cmp	r3, #2
 800841e:	d903      	bls.n	8008428 <USBD_StdDevReq+0x1f4>
 8008420:	2b03      	cmp	r3, #3
 8008422:	d1af      	bne.n	8008384 <USBD_StdDevReq+0x150>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008424:	1d01      	adds	r1, r0, #4
 8008426:	e003      	b.n	8008430 <USBD_StdDevReq+0x1fc>
      pdev->dev_default_config = 0U;
 8008428:	4601      	mov	r1, r0
 800842a:	2300      	movs	r3, #0
 800842c:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008430:	4620      	mov	r0, r4
 8008432:	f000 f911 	bl	8008658 <USBD_CtlSendData>
 8008436:	e720      	b.n	800827a <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8008438:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800843c:	3b01      	subs	r3, #1
 800843e:	2b02      	cmp	r3, #2
 8008440:	d8a0      	bhi.n	8008384 <USBD_StdDevReq+0x150>
    if(req->wLength != 0x2U)
 8008442:	88cb      	ldrh	r3, [r1, #6]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d19d      	bne.n	8008384 <USBD_StdDevReq+0x150>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008448:	2301      	movs	r3, #1
 800844a:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 800844c:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8008450:	b10b      	cbz	r3, 8008456 <USBD_StdDevReq+0x222>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008452:	2303      	movs	r3, #3
 8008454:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008456:	2202      	movs	r2, #2
 8008458:	f104 010c 	add.w	r1, r4, #12
 800845c:	e7e8      	b.n	8008430 <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800845e:	884b      	ldrh	r3, [r1, #2]
 8008460:	2b01      	cmp	r3, #1
 8008462:	f47f af0a 	bne.w	800827a <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 8008466:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 800846a:	e730      	b.n	80082ce <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 800846c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008470:	3b01      	subs	r3, #1
 8008472:	2b02      	cmp	r3, #2
 8008474:	d886      	bhi.n	8008384 <USBD_StdDevReq+0x150>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008476:	884b      	ldrh	r3, [r1, #2]
 8008478:	2b01      	cmp	r3, #1
 800847a:	f47f aefe 	bne.w	800827a <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 800847e:	2300      	movs	r3, #0
 8008480:	e7f1      	b.n	8008466 <USBD_StdDevReq+0x232>
 8008482:	bf00      	nop
 8008484:	200015e4 	.word	0x200015e4

08008488 <USBD_StdItfReq>:
{
 8008488:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800848a:	780b      	ldrb	r3, [r1, #0]
 800848c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008490:	2b20      	cmp	r3, #32
{
 8008492:	4604      	mov	r4, r0
 8008494:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008496:	d002      	beq.n	800849e <USBD_StdItfReq+0x16>
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d000      	beq.n	800849e <USBD_StdItfReq+0x16>
 800849c:	b9b3      	cbnz	r3, 80084cc <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 800849e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80084a2:	3b01      	subs	r3, #1
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d810      	bhi.n	80084ca <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80084a8:	792b      	ldrb	r3, [r5, #4]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d80d      	bhi.n	80084ca <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80084ae:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80084b2:	4629      	mov	r1, r5
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	4620      	mov	r0, r4
 80084b8:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80084ba:	88eb      	ldrh	r3, [r5, #6]
 80084bc:	b91b      	cbnz	r3, 80084c6 <USBD_StdItfReq+0x3e>
 80084be:	b910      	cbnz	r0, 80084c6 <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 80084c0:	4620      	mov	r0, r4
 80084c2:	f000 f8f5 	bl	80086b0 <USBD_CtlSendStatus>
}
 80084c6:	2000      	movs	r0, #0
 80084c8:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 80084ca:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80084cc:	f7ff fea7 	bl	800821e <USBD_CtlError.constprop.1>
    break;
 80084d0:	e7f9      	b.n	80084c6 <USBD_StdItfReq+0x3e>

080084d2 <USBD_StdEPReq>:
{
 80084d2:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084d4:	780a      	ldrb	r2, [r1, #0]
 80084d6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80084da:	2a20      	cmp	r2, #32
{
 80084dc:	4604      	mov	r4, r0
 80084de:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084e0:	d013      	beq.n	800850a <USBD_StdEPReq+0x38>
 80084e2:	2a40      	cmp	r2, #64	; 0x40
 80084e4:	d011      	beq.n	800850a <USBD_StdEPReq+0x38>
 80084e6:	b96a      	cbnz	r2, 8008504 <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 80084e8:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 80084ea:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 80084ec:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 80084ee:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 80084f0:	d01f      	beq.n	8008532 <USBD_StdEPReq+0x60>
 80084f2:	d335      	bcc.n	8008560 <USBD_StdEPReq+0x8e>
 80084f4:	2d03      	cmp	r5, #3
 80084f6:	d105      	bne.n	8008504 <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 80084f8:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80084fc:	2a02      	cmp	r2, #2
 80084fe:	d026      	beq.n	800854e <USBD_StdEPReq+0x7c>
 8008500:	2a03      	cmp	r2, #3
 8008502:	d00a      	beq.n	800851a <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 8008504:	f7ff fe8b 	bl	800821e <USBD_CtlError.constprop.1>
    break;
 8008508:	e005      	b.n	8008516 <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 800850a:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 800850e:	4619      	mov	r1, r3
 8008510:	6892      	ldr	r2, [r2, #8]
 8008512:	4620      	mov	r0, r4
 8008514:	4790      	blx	r2
}
 8008516:	2000      	movs	r0, #0
 8008518:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 800851a:	885a      	ldrh	r2, [r3, #2]
 800851c:	b92a      	cbnz	r2, 800852a <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800851e:	064a      	lsls	r2, r1, #25
 8008520:	d003      	beq.n	800852a <USBD_StdEPReq+0x58>
 8008522:	88db      	ldrh	r3, [r3, #6]
 8008524:	b90b      	cbnz	r3, 800852a <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 8008526:	f017 fd47 	bl	801ffb8 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 800852a:	4620      	mov	r0, r4
 800852c:	f000 f8c0 	bl	80086b0 <USBD_CtlSendStatus>
        break;
 8008530:	e7f1      	b.n	8008516 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8008532:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008536:	2a02      	cmp	r2, #2
 8008538:	d009      	beq.n	800854e <USBD_StdEPReq+0x7c>
 800853a:	2a03      	cmp	r2, #3
 800853c:	d1e2      	bne.n	8008504 <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 800853e:	885b      	ldrh	r3, [r3, #2]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d1e8      	bne.n	8008516 <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 8008544:	064d      	lsls	r5, r1, #25
 8008546:	d0f0      	beq.n	800852a <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008548:	f017 fd44 	bl	801ffd4 <USBD_LL_ClearStallEP>
 800854c:	e7ed      	b.n	800852a <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800854e:	064b      	lsls	r3, r1, #25
 8008550:	d017      	beq.n	8008582 <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 8008552:	f017 fd31 	bl	801ffb8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008556:	2180      	movs	r1, #128	; 0x80
 8008558:	4620      	mov	r0, r4
 800855a:	f017 fd2d 	bl	801ffb8 <USBD_LL_StallEP>
 800855e:	e7da      	b.n	8008516 <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8008560:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008564:	2b02      	cmp	r3, #2
 8008566:	d00e      	beq.n	8008586 <USBD_StdEPReq+0xb4>
 8008568:	2b03      	cmp	r3, #3
 800856a:	d1cb      	bne.n	8008504 <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 800856c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8008570:	f04f 0314 	mov.w	r3, #20
 8008574:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008578:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 800857c:	d012      	beq.n	80085a4 <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800857e:	6992      	ldr	r2, [r2, #24]
 8008580:	b9da      	cbnz	r2, 80085ba <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 8008582:	4620      	mov	r0, r4
 8008584:	e7be      	b.n	8008504 <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008586:	0649      	lsls	r1, r1, #25
 8008588:	d1fb      	bne.n	8008582 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800858a:	0613      	lsls	r3, r2, #24
 800858c:	bf4c      	ite	mi
 800858e:	f100 0114 	addmi.w	r1, r0, #20
 8008592:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 8008596:	2300      	movs	r3, #0
 8008598:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800859a:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800859c:	4620      	mov	r0, r4
 800859e:	f000 f85b 	bl	8008658 <USBD_CtlSendData>
          break;
 80085a2:	e7b8      	b.n	8008516 <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80085a4:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80085a8:	2a00      	cmp	r2, #0
 80085aa:	d0ea      	beq.n	8008582 <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80085ac:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80085b0:	fb03 0505 	mla	r5, r3, r5, r0
 80085b4:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 80085b8:	e004      	b.n	80085c4 <USBD_StdEPReq+0xf2>
 80085ba:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80085be:	fb05 3503 	mla	r5, r5, r3, r3
 80085c2:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085c4:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 80085c8:	d103      	bne.n	80085d2 <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 80085ca:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80085cc:	2202      	movs	r2, #2
 80085ce:	4629      	mov	r1, r5
 80085d0:	e7e4      	b.n	800859c <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80085d2:	4620      	mov	r0, r4
 80085d4:	f017 fd0c 	bl	801fff0 <USBD_LL_IsStallEP>
 80085d8:	b108      	cbz	r0, 80085de <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 80085da:	2301      	movs	r3, #1
 80085dc:	e7f5      	b.n	80085ca <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 80085de:	6028      	str	r0, [r5, #0]
 80085e0:	e7f4      	b.n	80085cc <USBD_StdEPReq+0xfa>

080085e2 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 80085e2:	780b      	ldrb	r3, [r1, #0]
 80085e4:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80085e6:	784b      	ldrb	r3, [r1, #1]
 80085e8:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80085ea:	78ca      	ldrb	r2, [r1, #3]
 80085ec:	788b      	ldrb	r3, [r1, #2]
 80085ee:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80085f2:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80085f4:	794a      	ldrb	r2, [r1, #5]
 80085f6:	790b      	ldrb	r3, [r1, #4]
 80085f8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80085fc:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80085fe:	79ca      	ldrb	r2, [r1, #7]
 8008600:	798b      	ldrb	r3, [r1, #6]
 8008602:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008606:	80c3      	strh	r3, [r0, #6]
 8008608:	4770      	bx	lr

0800860a <USBD_CtlError>:
{
 800860a:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 800860c:	2180      	movs	r1, #128	; 0x80
{
 800860e:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8008610:	f017 fcd2 	bl	801ffb8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008614:	4620      	mov	r0, r4
 8008616:	2100      	movs	r1, #0
}
 8008618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 800861c:	f017 bccc 	b.w	801ffb8 <USBD_LL_StallEP>

08008620 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008620:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 8008622:	b188      	cbz	r0, 8008648 <USBD_GetString+0x28>
 8008624:	4605      	mov	r5, r0
 8008626:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8008628:	f815 4b01 	ldrb.w	r4, [r5], #1
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2c00      	cmp	r4, #0
 8008630:	d1f9      	bne.n	8008626 <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008632:	3301      	adds	r3, #1
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008638:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800863a:	2303      	movs	r3, #3
 800863c:	704b      	strb	r3, [r1, #1]
 800863e:	3801      	subs	r0, #1
 8008640:	2302      	movs	r3, #2
    while (*desc != '\0')
 8008642:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008646:	b905      	cbnz	r5, 800864a <USBD_GetString+0x2a>
 8008648:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 800864a:	1c5a      	adds	r2, r3, #1
 800864c:	b2d2      	uxtb	r2, r2
 800864e:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8008650:	3302      	adds	r3, #2
 8008652:	b2db      	uxtb	r3, r3
 8008654:	548c      	strb	r4, [r1, r2]
 8008656:	e7f4      	b.n	8008642 <USBD_GetString+0x22>

08008658 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008658:	b510      	push	{r4, lr}
 800865a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800865c:	2202      	movs	r2, #2
 800865e:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008662:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008664:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8008666:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008668:	2100      	movs	r1, #0
 800866a:	f017 fce3 	bl	8020034 <USBD_LL_Transmit>

  return USBD_OK;
}
 800866e:	2000      	movs	r0, #0
 8008670:	bd10      	pop	{r4, pc}

08008672 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008672:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008674:	4613      	mov	r3, r2
 8008676:	460a      	mov	r2, r1
 8008678:	2100      	movs	r1, #0
 800867a:	f017 fcdb 	bl	8020034 <USBD_LL_Transmit>

  return USBD_OK;
}
 800867e:	2000      	movs	r0, #0
 8008680:	bd08      	pop	{r3, pc}

08008682 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008682:	b510      	push	{r4, lr}
 8008684:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008686:	2203      	movs	r2, #3
 8008688:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800868c:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008690:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 8008692:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008696:	2100      	movs	r1, #0
 8008698:	f017 fcda 	bl	8020050 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800869c:	2000      	movs	r0, #0
 800869e:	bd10      	pop	{r4, pc}

080086a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80086a0:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086a2:	4613      	mov	r3, r2
 80086a4:	460a      	mov	r2, r1
 80086a6:	2100      	movs	r1, #0
 80086a8:	f017 fcd2 	bl	8020050 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80086ac:	2000      	movs	r0, #0
 80086ae:	bd08      	pop	{r3, pc}

080086b0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80086b0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086b2:	2304      	movs	r3, #4
 80086b4:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086b8:	2300      	movs	r3, #0
 80086ba:	461a      	mov	r2, r3
 80086bc:	4619      	mov	r1, r3
 80086be:	f017 fcb9 	bl	8020034 <USBD_LL_Transmit>

  return USBD_OK;
}
 80086c2:	2000      	movs	r0, #0
 80086c4:	bd08      	pop	{r3, pc}

080086c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80086c6:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086c8:	2305      	movs	r3, #5
 80086ca:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80086ce:	2300      	movs	r3, #0
 80086d0:	461a      	mov	r2, r3
 80086d2:	4619      	mov	r1, r3
 80086d4:	f017 fcbc 	bl	8020050 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80086d8:	2000      	movs	r0, #0
 80086da:	bd08      	pop	{r3, pc}

080086dc <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80086dc:	4b03      	ldr	r3, [pc, #12]	; (80086ec <disk_status+0x10>)
 80086de:	181a      	adds	r2, r3, r0
 80086e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80086e4:	7a10      	ldrb	r0, [r2, #8]
 80086e6:	685b      	ldr	r3, [r3, #4]
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	4718      	bx	r3
 80086ec:	20001610 	.word	0x20001610

080086f0 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 80086f0:	4b06      	ldr	r3, [pc, #24]	; (800870c <disk_initialize+0x1c>)
 80086f2:	5c1a      	ldrb	r2, [r3, r0]
 80086f4:	b942      	cbnz	r2, 8008708 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 80086f6:	2201      	movs	r2, #1
 80086f8:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80086fa:	181a      	adds	r2, r3, r0
 80086fc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008700:	7a10      	ldrb	r0, [r2, #8]
 8008702:	685b      	ldr	r3, [r3, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4718      	bx	r3
  }
  return stat;
}
 8008708:	2000      	movs	r0, #0
 800870a:	4770      	bx	lr
 800870c:	20001610 	.word	0x20001610

08008710 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008710:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008712:	4c05      	ldr	r4, [pc, #20]	; (8008728 <disk_read+0x18>)
 8008714:	1825      	adds	r5, r4, r0
 8008716:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800871a:	6860      	ldr	r0, [r4, #4]
 800871c:	6884      	ldr	r4, [r0, #8]
 800871e:	7a28      	ldrb	r0, [r5, #8]
 8008720:	46a4      	mov	ip, r4
  return res;
}
 8008722:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008724:	4760      	bx	ip
 8008726:	bf00      	nop
 8008728:	20001610 	.word	0x20001610

0800872c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800872c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800872e:	4c05      	ldr	r4, [pc, #20]	; (8008744 <disk_write+0x18>)
 8008730:	1825      	adds	r5, r4, r0
 8008732:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008736:	6860      	ldr	r0, [r4, #4]
 8008738:	68c4      	ldr	r4, [r0, #12]
 800873a:	7a28      	ldrb	r0, [r5, #8]
 800873c:	46a4      	mov	ip, r4
  return res;
}
 800873e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008740:	4760      	bx	ip
 8008742:	bf00      	nop
 8008744:	20001610 	.word	0x20001610

08008748 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008748:	4b05      	ldr	r3, [pc, #20]	; (8008760 <disk_ioctl+0x18>)
{
 800874a:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800874c:	181c      	adds	r4, r3, r0
 800874e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008752:	7a20      	ldrb	r0, [r4, #8]
 8008754:	685b      	ldr	r3, [r3, #4]
  return res;
}
 8008756:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	4718      	bx	r3
 800875e:	bf00      	nop
 8008760:	20001610 	.word	0x20001610

08008764 <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 8008764:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 8008766:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 8008768:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 800876a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 800876e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8008772:	4770      	bx	lr

08008774 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8008774:	0a0b      	lsrs	r3, r1, #8
 8008776:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008778:	7043      	strb	r3, [r0, #1]
 800877a:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800877c:	0e09      	lsrs	r1, r1, #24
 800877e:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8008780:	70c1      	strb	r1, [r0, #3]
 8008782:	4770      	bx	lr

08008784 <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008784:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 8008786:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 800878a:	4290      	cmp	r0, r2
 800878c:	d1fb      	bne.n	8008786 <mem_set+0x2>
}
 800878e:	4770      	bx	lr

08008790 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008790:	4b15      	ldr	r3, [pc, #84]	; (80087e8 <chk_lock+0x58>)
 8008792:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008794:	2500      	movs	r5, #0
 8008796:	462a      	mov	r2, r5
 8008798:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 800879a:	681e      	ldr	r6, [r3, #0]
 800879c:	b1a6      	cbz	r6, 80087c8 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800879e:	6807      	ldr	r7, [r0, #0]
 80087a0:	42be      	cmp	r6, r7
 80087a2:	d112      	bne.n	80087ca <chk_lock+0x3a>
 80087a4:	685f      	ldr	r7, [r3, #4]
 80087a6:	6886      	ldr	r6, [r0, #8]
 80087a8:	42b7      	cmp	r7, r6
 80087aa:	d10e      	bne.n	80087ca <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 80087ac:	689f      	ldr	r7, [r3, #8]
 80087ae:	6946      	ldr	r6, [r0, #20]
 80087b0:	42b7      	cmp	r7, r6
 80087b2:	d10a      	bne.n	80087ca <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80087b4:	b9b1      	cbnz	r1, 80087e4 <chk_lock+0x54>
 80087b6:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80087ba:	8993      	ldrh	r3, [r2, #12]
 80087bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c0:	bf14      	ite	ne
 80087c2:	2000      	movne	r0, #0
 80087c4:	2010      	moveq	r0, #16
 80087c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 80087c8:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 80087ca:	3201      	adds	r2, #1
 80087cc:	2a02      	cmp	r2, #2
 80087ce:	f103 0310 	add.w	r3, r3, #16
 80087d2:	d1e2      	bne.n	800879a <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80087d4:	b10d      	cbz	r5, 80087da <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80087d6:	2000      	movs	r0, #0
 80087d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80087da:	2902      	cmp	r1, #2
 80087dc:	bf0c      	ite	eq
 80087de:	2000      	moveq	r0, #0
 80087e0:	2012      	movne	r0, #18
 80087e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80087e4:	2010      	movs	r0, #16
 80087e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087e8:	200015ec 	.word	0x200015ec

080087ec <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80087ec:	4a1c      	ldr	r2, [pc, #112]	; (8008860 <inc_lock+0x74>)
 80087ee:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 80087f0:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80087f2:	2300      	movs	r3, #0
 80087f4:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 80087f6:	6814      	ldr	r4, [r2, #0]
 80087f8:	42ac      	cmp	r4, r5
 80087fa:	d107      	bne.n	800880c <inc_lock+0x20>
 80087fc:	6857      	ldr	r7, [r2, #4]
 80087fe:	6884      	ldr	r4, [r0, #8]
 8008800:	42a7      	cmp	r7, r4
 8008802:	d103      	bne.n	800880c <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 8008804:	6897      	ldr	r7, [r2, #8]
 8008806:	6944      	ldr	r4, [r0, #20]
 8008808:	42a7      	cmp	r7, r4
 800880a:	d01d      	beq.n	8008848 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800880c:	3301      	adds	r3, #1
 800880e:	2b02      	cmp	r3, #2
 8008810:	f102 0210 	add.w	r2, r2, #16
 8008814:	d1ef      	bne.n	80087f6 <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008816:	6833      	ldr	r3, [r6, #0]
 8008818:	b113      	cbz	r3, 8008820 <inc_lock+0x34>
 800881a:	6933      	ldr	r3, [r6, #16]
 800881c:	b9eb      	cbnz	r3, 800885a <inc_lock+0x6e>
 800881e:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8008820:	011c      	lsls	r4, r3, #4
 8008822:	1932      	adds	r2, r6, r4
 8008824:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 8008826:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8008828:	6940      	ldr	r0, [r0, #20]
 800882a:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 800882c:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 800882e:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8008830:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008832:	b979      	cbnz	r1, 8008854 <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008834:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8008838:	8992      	ldrh	r2, [r2, #12]
 800883a:	3201      	adds	r2, #1
 800883c:	b292      	uxth	r2, r2
 800883e:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 8008842:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008844:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 8008846:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008848:	2900      	cmp	r1, #0
 800884a:	d0f3      	beq.n	8008834 <inc_lock+0x48>
 800884c:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8008850:	8992      	ldrh	r2, [r2, #12]
 8008852:	b912      	cbnz	r2, 800885a <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008854:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008858:	e7f1      	b.n	800883e <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800885a:	2000      	movs	r0, #0
 800885c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800885e:	bf00      	nop
 8008860:	200015ec 	.word	0x200015ec

08008864 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008864:	3801      	subs	r0, #1
 8008866:	2801      	cmp	r0, #1
 8008868:	d80e      	bhi.n	8008888 <dec_lock+0x24>
		n = Files[i].ctr;
 800886a:	4a09      	ldr	r2, [pc, #36]	; (8008890 <dec_lock+0x2c>)
 800886c:	0103      	lsls	r3, r0, #4
 800886e:	18d1      	adds	r1, r2, r3
 8008870:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 8008872:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 8008876:	b280      	uxth	r0, r0
 8008878:	b108      	cbz	r0, 800887e <dec_lock+0x1a>
 800887a:	1e48      	subs	r0, r1, #1
 800887c:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 800887e:	18d1      	adds	r1, r2, r3
 8008880:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008882:	b918      	cbnz	r0, 800888c <dec_lock+0x28>
 8008884:	50d0      	str	r0, [r2, r3]
 8008886:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008888:	2002      	movs	r0, #2
 800888a:	4770      	bx	lr
		res = FR_OK;
 800888c:	2000      	movs	r0, #0
	}
	return res;
}
 800888e:	4770      	bx	lr
 8008890:	200015ec 	.word	0x200015ec

08008894 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008894:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 8008896:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008898:	3b02      	subs	r3, #2
 800889a:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 800889c:	bf3d      	ittte	cc
 800889e:	8943      	ldrhcc	r3, [r0, #10]
 80088a0:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
 80088a2:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80088a6:	2000      	movcs	r0, #0
}
 80088a8:	4770      	bx	lr

080088aa <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80088aa:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 80088ac:	b510      	push	{r4, lr}
	FATFS *fs = fp->obj.fs;
 80088ae:	6804      	ldr	r4, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80088b0:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80088b2:	89a3      	ldrh	r3, [r4, #12]
 80088b4:	fbb1 f1f3 	udiv	r1, r1, r3
 80088b8:	8963      	ldrh	r3, [r4, #10]
 80088ba:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80088be:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80088c0:	b130      	cbz	r0, 80088d0 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80088c2:	4281      	cmp	r1, r0
 80088c4:	d302      	bcc.n	80088cc <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 80088c6:	1a09      	subs	r1, r1, r0
 80088c8:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80088ca:	e7f8      	b.n	80088be <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 80088cc:	6850      	ldr	r0, [r2, #4]
 80088ce:	4408      	add	r0, r1
}
 80088d0:	bd10      	pop	{r4, pc}

080088d2 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80088d2:	6802      	ldr	r2, [r0, #0]
{
 80088d4:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 80088d6:	b152      	cbz	r2, 80088ee <get_ldnumber+0x1c>
 80088d8:	4611      	mov	r1, r2
 80088da:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80088dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e0:	2c20      	cmp	r4, #32
 80088e2:	d90c      	bls.n	80088fe <get_ldnumber+0x2c>
 80088e4:	2c3a      	cmp	r4, #58	; 0x3a
 80088e6:	d1f8      	bne.n	80088da <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 80088e8:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80088ea:	428b      	cmp	r3, r1
 80088ec:	d002      	beq.n	80088f4 <get_ldnumber+0x22>
	int vol = -1;
 80088ee:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 80088f2:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80088f4:	7812      	ldrb	r2, [r2, #0]
 80088f6:	2a30      	cmp	r2, #48	; 0x30
 80088f8:	d1f9      	bne.n	80088ee <get_ldnumber+0x1c>
					*path = ++tt;
 80088fa:	3301      	adds	r3, #1
 80088fc:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 80088fe:	2000      	movs	r0, #0
 8008900:	bd10      	pop	{r4, pc}

08008902 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008902:	b538      	push	{r3, r4, r5, lr}
 8008904:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008906:	4604      	mov	r4, r0
 8008908:	b918      	cbnz	r0, 8008912 <validate+0x10>
		*fs = 0;
 800890a:	2300      	movs	r3, #0
 800890c:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 800890e:	2009      	movs	r0, #9
 8008910:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008912:	6803      	ldr	r3, [r0, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d0f8      	beq.n	800890a <validate+0x8>
 8008918:	781a      	ldrb	r2, [r3, #0]
 800891a:	2a00      	cmp	r2, #0
 800891c:	d0f5      	beq.n	800890a <validate+0x8>
 800891e:	88d9      	ldrh	r1, [r3, #6]
 8008920:	8882      	ldrh	r2, [r0, #4]
 8008922:	4291      	cmp	r1, r2
 8008924:	d1f1      	bne.n	800890a <validate+0x8>
 8008926:	7858      	ldrb	r0, [r3, #1]
 8008928:	f7ff fed8 	bl	80086dc <disk_status>
 800892c:	f010 0001 	ands.w	r0, r0, #1
 8008930:	d1eb      	bne.n	800890a <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8008936:	bd38      	pop	{r3, r4, r5, pc}

08008938 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008938:	3801      	subs	r0, #1
 800893a:	440a      	add	r2, r1
			*d++ = *s++;
 800893c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008940:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8008944:	4291      	cmp	r1, r2
 8008946:	d1f9      	bne.n	800893c <mem_cpy.part.0+0x4>
}
 8008948:	4770      	bx	lr

0800894a <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 800894a:	7eca      	ldrb	r2, [r1, #27]
 800894c:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 800894e:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8008950:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8008954:	bf01      	itttt	eq
 8008956:	7d48      	ldrbeq	r0, [r1, #21]
 8008958:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800895a:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 800895e:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8008962:	4618      	mov	r0, r3
 8008964:	4770      	bx	lr

08008966 <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8008966:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800896a:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800896c:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 800896e:	7803      	ldrb	r3, [r0, #0]
 8008970:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008972:	bf01      	itttt	eq
 8008974:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008976:	750a      	strbeq	r2, [r1, #20]
 8008978:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800897a:	754a      	strbeq	r2, [r1, #21]
 800897c:	4770      	bx	lr

0800897e <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 800897e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8008980:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008982:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008986:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008988:	2301      	movs	r3, #1
 800898a:	462a      	mov	r2, r5
 800898c:	4639      	mov	r1, r7
 800898e:	7840      	ldrb	r0, [r0, #1]
 8008990:	f7ff fecc 	bl	800872c <disk_write>
 8008994:	b9a0      	cbnz	r0, 80089c0 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008996:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008998:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 800899a:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800899c:	1aeb      	subs	r3, r5, r3
 800899e:	4293      	cmp	r3, r2
 80089a0:	d301      	bcc.n	80089a6 <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 80089a2:	2000      	movs	r0, #0
 80089a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80089a6:	78a6      	ldrb	r6, [r4, #2]
 80089a8:	2e01      	cmp	r6, #1
 80089aa:	d9fa      	bls.n	80089a2 <sync_window.part.4+0x24>
					wsect += fs->fsize;
 80089ac:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 80089ae:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80089b0:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80089b2:	462a      	mov	r2, r5
 80089b4:	2301      	movs	r3, #1
 80089b6:	4639      	mov	r1, r7
 80089b8:	f7ff feb8 	bl	800872c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80089bc:	3e01      	subs	r6, #1
 80089be:	e7f3      	b.n	80089a8 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 80089c0:	2001      	movs	r0, #1
}
 80089c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089c4 <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80089c4:	78c3      	ldrb	r3, [r0, #3]
 80089c6:	b10b      	cbz	r3, 80089cc <sync_window+0x8>
 80089c8:	f7ff bfd9 	b.w	800897e <sync_window.part.4>
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	4770      	bx	lr

080089d0 <sync_fs>:
{
 80089d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089d2:	4604      	mov	r4, r0
	res = sync_window(fs);
 80089d4:	f7ff fff6 	bl	80089c4 <sync_window>
 80089d8:	4605      	mov	r5, r0
	if (res == FR_OK) {
 80089da:	2800      	cmp	r0, #0
 80089dc:	d141      	bne.n	8008a62 <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80089de:	7823      	ldrb	r3, [r4, #0]
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d136      	bne.n	8008a52 <sync_fs+0x82>
 80089e4:	7927      	ldrb	r7, [r4, #4]
 80089e6:	2f01      	cmp	r7, #1
 80089e8:	d133      	bne.n	8008a52 <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 80089ea:	f104 0634 	add.w	r6, r4, #52	; 0x34
 80089ee:	4601      	mov	r1, r0
 80089f0:	89a2      	ldrh	r2, [r4, #12]
 80089f2:	4630      	mov	r0, r6
 80089f4:	f7ff fec6 	bl	8008784 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 80089f8:	2355      	movs	r3, #85	; 0x55
 80089fa:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 80089fe:	23aa      	movs	r3, #170	; 0xaa
 8008a00:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8008a04:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8008a06:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8008a08:	2172      	movs	r1, #114	; 0x72
 8008a0a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8008a0e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8008a12:	2361      	movs	r3, #97	; 0x61
 8008a14:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8008a18:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8008a1c:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val;
 8008a20:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 8008a24:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 8008a28:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008a2c:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008a30:	6961      	ldr	r1, [r4, #20]
 8008a32:	f7ff fe9f 	bl	8008774 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008a36:	6921      	ldr	r1, [r4, #16]
 8008a38:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008a3c:	f7ff fe9a 	bl	8008774 <st_dword>
			fs->winsect = fs->volbase + 1;
 8008a40:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008a42:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8008a44:	3201      	adds	r2, #1
 8008a46:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008a48:	463b      	mov	r3, r7
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	f7ff fe6e 	bl	800872c <disk_write>
			fs->fsi_flag = 0;
 8008a50:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008a52:	2200      	movs	r2, #0
 8008a54:	4611      	mov	r1, r2
 8008a56:	7860      	ldrb	r0, [r4, #1]
 8008a58:	f7ff fe76 	bl	8008748 <disk_ioctl>
 8008a5c:	3000      	adds	r0, #0
 8008a5e:	bf18      	it	ne
 8008a60:	2001      	movne	r0, #1
}
 8008a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a64 <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a64:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008a66:	428b      	cmp	r3, r1
{
 8008a68:	b570      	push	{r4, r5, r6, lr}
 8008a6a:	4606      	mov	r6, r0
 8008a6c:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008a6e:	d012      	beq.n	8008a96 <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8008a70:	f7ff ffa8 	bl	80089c4 <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008a74:	4604      	mov	r4, r0
 8008a76:	b960      	cbnz	r0, 8008a92 <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008a78:	462a      	mov	r2, r5
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8008a80:	7870      	ldrb	r0, [r6, #1]
 8008a82:	f7ff fe45 	bl	8008710 <disk_read>
 8008a86:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8008a88:	bf1c      	itt	ne
 8008a8a:	f04f 35ff 	movne.w	r5, #4294967295
 8008a8e:	2401      	movne	r4, #1
			fs->winsect = sector;
 8008a90:	6335      	str	r5, [r6, #48]	; 0x30
}
 8008a92:	4620      	mov	r0, r4
 8008a94:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8008a96:	2400      	movs	r4, #0
 8008a98:	e7fb      	b.n	8008a92 <move_window+0x2e>
	...

08008a9c <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008a9c:	2300      	movs	r3, #0
{
 8008a9e:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008aa0:	70c3      	strb	r3, [r0, #3]
 8008aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa6:	6303      	str	r3, [r0, #48]	; 0x30
{
 8008aa8:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008aaa:	f7ff ffdb 	bl	8008a64 <move_window>
 8008aae:	bb30      	cbnz	r0, 8008afe <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8008ab0:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8008ab4:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8008ab8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008abc:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d11e      	bne.n	8008b02 <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008ac4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008ac8:	2be9      	cmp	r3, #233	; 0xe9
 8008aca:	d005      	beq.n	8008ad8 <check_fs+0x3c>
 8008acc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ace:	4a10      	ldr	r2, [pc, #64]	; (8008b10 <check_fs+0x74>)
 8008ad0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d116      	bne.n	8008b06 <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008ad8:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8008adc:	f7ff fe42 	bl	8008764 <ld_dword>
 8008ae0:	4b0c      	ldr	r3, [pc, #48]	; (8008b14 <check_fs+0x78>)
 8008ae2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008ae6:	4298      	cmp	r0, r3
 8008ae8:	d00f      	beq.n	8008b0a <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008aea:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8008aee:	f7ff fe39 	bl	8008764 <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008af2:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <check_fs+0x7c>)
 8008af4:	4298      	cmp	r0, r3
 8008af6:	bf14      	ite	ne
 8008af8:	2002      	movne	r0, #2
 8008afa:	2000      	moveq	r0, #0
 8008afc:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008afe:	2004      	movs	r0, #4
 8008b00:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008b02:	2003      	movs	r0, #3
 8008b04:	bd10      	pop	{r4, pc}
	return 2;
 8008b06:	2002      	movs	r0, #2
 8008b08:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008b0a:	2000      	movs	r0, #0
}
 8008b0c:	bd10      	pop	{r4, pc}
 8008b0e:	bf00      	nop
 8008b10:	009000eb 	.word	0x009000eb
 8008b14:	00544146 	.word	0x00544146
 8008b18:	33544146 	.word	0x33544146

08008b1c <find_volume>:
{
 8008b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8008b20:	2300      	movs	r3, #0
{
 8008b22:	b085      	sub	sp, #20
	*rfs = 0;
 8008b24:	600b      	str	r3, [r1, #0]
{
 8008b26:	460f      	mov	r7, r1
 8008b28:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8008b2a:	f7ff fed2 	bl	80088d2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008b2e:	1e06      	subs	r6, r0, #0
 8008b30:	f2c0 815e 	blt.w	8008df0 <find_volume+0x2d4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008b34:	4bb2      	ldr	r3, [pc, #712]	; (8008e00 <find_volume+0x2e4>)
 8008b36:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008b3a:	2c00      	cmp	r4, #0
 8008b3c:	f000 815a 	beq.w	8008df4 <find_volume+0x2d8>
	*rfs = fs;							/* Return pointer to the file system object */
 8008b40:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008b42:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008b44:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008b48:	b173      	cbz	r3, 8008b68 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8008b4a:	7860      	ldrb	r0, [r4, #1]
 8008b4c:	f7ff fdc6 	bl	80086dc <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008b50:	07c1      	lsls	r1, r0, #31
 8008b52:	d409      	bmi.n	8008b68 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008b54:	2d00      	cmp	r5, #0
 8008b56:	f000 814f 	beq.w	8008df8 <find_volume+0x2dc>
 8008b5a:	f010 0004 	ands.w	r0, r0, #4
 8008b5e:	d000      	beq.n	8008b62 <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8008b60:	200a      	movs	r0, #10
}
 8008b62:	b005      	add	sp, #20
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8008b68:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008b6a:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8008b6c:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008b6e:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008b70:	f7ff fdbe 	bl	80086f0 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008b74:	07c2      	lsls	r2, r0, #31
 8008b76:	f100 8141 	bmi.w	8008dfc <find_volume+0x2e0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008b7a:	b10d      	cbz	r5, 8008b80 <find_volume+0x64>
 8008b7c:	0743      	lsls	r3, r0, #29
 8008b7e:	d4ef      	bmi.n	8008b60 <find_volume+0x44>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008b80:	f104 020c 	add.w	r2, r4, #12
 8008b84:	2102      	movs	r1, #2
 8008b86:	7860      	ldrb	r0, [r4, #1]
 8008b88:	f7ff fdde 	bl	8008748 <disk_ioctl>
 8008b8c:	b108      	cbz	r0, 8008b92 <find_volume+0x76>
 8008b8e:	2001      	movs	r0, #1
 8008b90:	e7e7      	b.n	8008b62 <find_volume+0x46>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8008b98:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8008b9c:	d8f7      	bhi.n	8008b8e <find_volume+0x72>
 8008b9e:	1e5e      	subs	r6, r3, #1
 8008ba0:	401e      	ands	r6, r3
 8008ba2:	d1f4      	bne.n	8008b8e <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008ba4:	4631      	mov	r1, r6
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f7ff ff78 	bl	8008a9c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008bac:	2802      	cmp	r0, #2
 8008bae:	f040 8101 	bne.w	8008db4 <find_volume+0x298>
 8008bb2:	f504 71fd 	add.w	r1, r4, #506	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008bb6:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8008bba:	b110      	cbz	r0, 8008bc2 <find_volume+0xa6>
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	f7ff fdd1 	bl	8008764 <ld_dword>
 8008bc2:	f84d 0026 	str.w	r0, [sp, r6, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008bc6:	3601      	adds	r6, #1
 8008bc8:	2e04      	cmp	r6, #4
 8008bca:	f101 0110 	add.w	r1, r1, #16
 8008bce:	d1f2      	bne.n	8008bb6 <find_volume+0x9a>
 8008bd0:	2500      	movs	r5, #0
			bsect = br[i];
 8008bd2:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008bd6:	2e00      	cmp	r6, #0
 8008bd8:	f000 80e4 	beq.w	8008da4 <find_volume+0x288>
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7ff ff5c 	bl	8008a9c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008be4:	2801      	cmp	r0, #1
 8008be6:	f200 80de 	bhi.w	8008da6 <find_volume+0x28a>
	rv = rv << 8 | ptr[0];
 8008bea:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008bee:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008bf2:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 8008bf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008bfa:	4598      	cmp	r8, r3
 8008bfc:	f040 80e0 	bne.w	8008dc0 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008c00:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8008c04:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008c08:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8008c0c:	d104      	bne.n	8008c18 <find_volume+0xfc>
 8008c0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008c12:	f7ff fda7 	bl	8008764 <ld_dword>
 8008c16:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008c18:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8008c1c:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008c1e:	1e7b      	subs	r3, r7, #1
 8008c20:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008c22:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008c24:	f200 80cc 	bhi.w	8008dc0 <find_volume+0x2a4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008c28:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 8008c2c:	fa1f f389 	uxth.w	r3, r9
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008c30:	434f      	muls	r7, r1
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008c32:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 80c3 	beq.w	8008dc0 <find_volume+0x2a4>
 8008c3a:	f109 33ff 	add.w	r3, r9, #4294967295
 8008c3e:	ea13 0f09 	tst.w	r3, r9
 8008c42:	f040 80bd 	bne.w	8008dc0 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008c46:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008c4a:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 8008c4e:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c52:	ea4f 1358 	mov.w	r3, r8, lsr #5
 8008c56:	fbba fbf3 	udiv	fp, sl, r3
 8008c5a:	fb03 a31b 	mls	r3, r3, fp, sl
 8008c5e:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008c60:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f040 80ab 	bne.w	8008dc0 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008c6a:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8008c6e:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008c72:	ea50 2005 	orrs.w	r0, r0, r5, lsl #8
 8008c76:	d103      	bne.n	8008c80 <find_volume+0x164>
 8008c78:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8008c7c:	f7ff fd72 	bl	8008764 <ld_dword>
	rv = rv << 8 | ptr[0];
 8008c80:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008c84:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008c88:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8008c8c:	f000 8098 	beq.w	8008dc0 <find_volume+0x2a4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008c90:	fa12 f38b 	uxtah	r3, r2, fp
 8008c94:	443b      	add	r3, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008c96:	4298      	cmp	r0, r3
 8008c98:	f0c0 8092 	bcc.w	8008dc0 <find_volume+0x2a4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008c9c:	1ac5      	subs	r5, r0, r3
 8008c9e:	fbb5 f5f9 	udiv	r5, r5, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008ca2:	2d00      	cmp	r5, #0
 8008ca4:	f000 808c 	beq.w	8008dc0 <find_volume+0x2a4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008ca8:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8008cac:	4285      	cmp	r5, r0
 8008cae:	f200 8089 	bhi.w	8008dc4 <find_volume+0x2a8>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008cb2:	f640 79f5 	movw	r9, #4085	; 0xff5
 8008cb6:	454d      	cmp	r5, r9
 8008cb8:	bf8c      	ite	hi
 8008cba:	f04f 0902 	movhi.w	r9, #2
 8008cbe:	f04f 0901 	movls.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008cc2:	3502      	adds	r5, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008cc4:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8008cc6:	4433      	add	r3, r6
		if (fmt == FS_FAT32) {
 8008cc8:	f1b9 0f03 	cmp.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008ccc:	61a5      	str	r5, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008cce:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008cd0:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008cd2:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008cd4:	d179      	bne.n	8008dca <find_volume+0x2ae>
	rv = rv << 8 | ptr[0];
 8008cd6:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 8008cda:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008cde:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8008ce2:	d16d      	bne.n	8008dc0 <find_volume+0x2a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008ce4:	f1ba 0f00 	cmp.w	sl, #0
 8008ce8:	d16a      	bne.n	8008dc0 <find_volume+0x2a4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008cea:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8008cee:	f7ff fd39 	bl	8008764 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008cf2:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008cf4:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008cf6:	f108 33ff 	add.w	r3, r8, #4294967295
 8008cfa:	441d      	add	r5, r3
 8008cfc:	fbb5 f8f8 	udiv	r8, r5, r8
 8008d00:	4541      	cmp	r1, r8
 8008d02:	d35d      	bcc.n	8008dc0 <find_volume+0x2a4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008d04:	f04f 33ff 	mov.w	r3, #4294967295
 8008d08:	6163      	str	r3, [r4, #20]
 8008d0a:	6123      	str	r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008d0c:	f1b9 0f03 	cmp.w	r9, #3
		fs->fsi_flag = 0x80;
 8008d10:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008d14:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008d16:	d12f      	bne.n	8008d78 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8008d18:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8008d1c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8008d20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d127      	bne.n	8008d78 <find_volume+0x25c>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008d28:	1c71      	adds	r1, r6, #1
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f7ff fe9a 	bl	8008a64 <move_window>
 8008d30:	bb10      	cbnz	r0, 8008d78 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8008d32:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8008d36:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 8008d3a:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8008d3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008d40:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d117      	bne.n	8008d78 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008d48:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008d4c:	f7ff fd0a 	bl	8008764 <ld_dword>
 8008d50:	4b2c      	ldr	r3, [pc, #176]	; (8008e04 <find_volume+0x2e8>)
 8008d52:	4298      	cmp	r0, r3
 8008d54:	d110      	bne.n	8008d78 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008d56:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008d5a:	f7ff fd03 	bl	8008764 <ld_dword>
 8008d5e:	4b2a      	ldr	r3, [pc, #168]	; (8008e08 <find_volume+0x2ec>)
 8008d60:	4298      	cmp	r0, r3
 8008d62:	d109      	bne.n	8008d78 <find_volume+0x25c>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008d64:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008d68:	f7ff fcfc 	bl	8008764 <ld_dword>
 8008d6c:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008d6e:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008d72:	f7ff fcf7 	bl	8008764 <ld_dword>
 8008d76:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8008d78:	4a24      	ldr	r2, [pc, #144]	; (8008e0c <find_volume+0x2f0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8008d7a:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8008d7e:	8813      	ldrh	r3, [r2, #0]
 8008d80:	3301      	adds	r3, #1
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	8013      	strh	r3, [r2, #0]
 8008d86:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008d88:	4b21      	ldr	r3, [pc, #132]	; (8008e10 <find_volume+0x2f4>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	4294      	cmp	r4, r2
 8008d8e:	bf04      	itt	eq
 8008d90:	2200      	moveq	r2, #0
 8008d92:	601a      	streq	r2, [r3, #0]
 8008d94:	691a      	ldr	r2, [r3, #16]
 8008d96:	4294      	cmp	r4, r2
 8008d98:	f04f 0000 	mov.w	r0, #0
 8008d9c:	f47f aee1 	bne.w	8008b62 <find_volume+0x46>
 8008da0:	6118      	str	r0, [r3, #16]
 8008da2:	e6de      	b.n	8008b62 <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008da4:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008da6:	3501      	adds	r5, #1
 8008da8:	2d04      	cmp	r5, #4
 8008daa:	f47f af12 	bne.w	8008bd2 <find_volume+0xb6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008dae:	2804      	cmp	r0, #4
 8008db0:	d106      	bne.n	8008dc0 <find_volume+0x2a4>
 8008db2:	e6ec      	b.n	8008b8e <find_volume+0x72>
 8008db4:	2804      	cmp	r0, #4
 8008db6:	f43f aeea 	beq.w	8008b8e <find_volume+0x72>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008dba:	2801      	cmp	r0, #1
 8008dbc:	f67f af15 	bls.w	8008bea <find_volume+0xce>
 8008dc0:	200d      	movs	r0, #13
 8008dc2:	e6ce      	b.n	8008b62 <find_volume+0x46>
		fmt = FS_FAT32;
 8008dc4:	f04f 0903 	mov.w	r9, #3
 8008dc8:	e77b      	b.n	8008cc2 <find_volume+0x1a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008dca:	f1ba 0f00 	cmp.w	sl, #0
 8008dce:	d0f7      	beq.n	8008dc0 <find_volume+0x2a4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008dd0:	f1b9 0f02 	cmp.w	r9, #2
 8008dd4:	ea4f 0045 	mov.w	r0, r5, lsl #1
 8008dd8:	bf18      	it	ne
 8008dda:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008ddc:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008dde:	bf18      	it	ne
 8008de0:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008de4:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008de6:	bf0c      	ite	eq
 8008de8:	4605      	moveq	r5, r0
 8008dea:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 8008dee:	e782      	b.n	8008cf6 <find_volume+0x1da>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008df0:	200b      	movs	r0, #11
 8008df2:	e6b6      	b.n	8008b62 <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008df4:	200c      	movs	r0, #12
 8008df6:	e6b4      	b.n	8008b62 <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8008df8:	4628      	mov	r0, r5
 8008dfa:	e6b2      	b.n	8008b62 <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008dfc:	2003      	movs	r0, #3
 8008dfe:	e6b0      	b.n	8008b62 <find_volume+0x46>
 8008e00:	200015e8 	.word	0x200015e8
 8008e04:	41615252 	.word	0x41615252
 8008e08:	61417272 	.word	0x61417272
 8008e0c:	2000160c 	.word	0x2000160c
 8008e10:	200015ec 	.word	0x200015ec

08008e14 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008e14:	2901      	cmp	r1, #1
{
 8008e16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	460d      	mov	r5, r1
 8008e1e:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008e20:	f240 808a 	bls.w	8008f38 <put_fat+0x124>
 8008e24:	6983      	ldr	r3, [r0, #24]
 8008e26:	4299      	cmp	r1, r3
 8008e28:	f080 8086 	bcs.w	8008f38 <put_fat+0x124>
		switch (fs->fs_type) {
 8008e2c:	7803      	ldrb	r3, [r0, #0]
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d049      	beq.n	8008ec6 <put_fat+0xb2>
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d060      	beq.n	8008ef8 <put_fat+0xe4>
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d17e      	bne.n	8008f38 <put_fat+0x124>
			bc = (UINT)clst; bc += bc / 2;
 8008e3a:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e3e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008e40:	8983      	ldrh	r3, [r0, #12]
 8008e42:	fbba f3f3 	udiv	r3, sl, r3
 8008e46:	4419      	add	r1, r3
 8008e48:	f7ff fe0c 	bl	8008a64 <move_window>
 8008e4c:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8008e4e:	bb78      	cbnz	r0, 8008eb0 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	fbba f2f3 	udiv	r2, sl, r3
 8008e56:	f104 0834 	add.w	r8, r4, #52	; 0x34
 8008e5a:	fb03 a212 	mls	r2, r3, r2, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008e5e:	f015 0501 	ands.w	r5, r5, #1
 8008e62:	bf1f      	itttt	ne
 8008e64:	f818 3002 	ldrbne.w	r3, [r8, r2]
 8008e68:	f003 010f 	andne.w	r1, r3, #15
 8008e6c:	013b      	lslne	r3, r7, #4
 8008e6e:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8008e72:	bf14      	ite	ne
 8008e74:	430b      	orrne	r3, r1
 8008e76:	b2fb      	uxtbeq	r3, r7
 8008e78:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	70e3      	strb	r3, [r4, #3]
			p = fs->win + bc++ % SS(fs);
 8008e82:	f10a 0901 	add.w	r9, sl, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	fbb9 f3f3 	udiv	r3, r9, r3
 8008e8c:	4620      	mov	r0, r4
 8008e8e:	4419      	add	r1, r3
 8008e90:	f7ff fde8 	bl	8008a64 <move_window>
			if (res != FR_OK) break;
 8008e94:	4606      	mov	r6, r0
 8008e96:	b958      	cbnz	r0, 8008eb0 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 8008e98:	89a3      	ldrh	r3, [r4, #12]
 8008e9a:	fbb9 f2f3 	udiv	r2, r9, r3
 8008e9e:	fb03 9212 	mls	r2, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008ea2:	b145      	cbz	r5, 8008eb6 <put_fat+0xa2>
 8008ea4:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8008ea8:	f808 7002 	strb.w	r7, [r8, r2]
			fs->wflag = 1;
 8008eac:	2301      	movs	r3, #1
 8008eae:	70e3      	strb	r3, [r4, #3]
}
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008eb6:	f818 3002 	ldrb.w	r3, [r8, r2]
 8008eba:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8008ebe:	f023 030f 	bic.w	r3, r3, #15
 8008ec2:	431f      	orrs	r7, r3
 8008ec4:	e7f0      	b.n	8008ea8 <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008ec6:	8983      	ldrh	r3, [r0, #12]
 8008ec8:	085b      	lsrs	r3, r3, #1
 8008eca:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ece:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008ed0:	4419      	add	r1, r3
 8008ed2:	f7ff fdc7 	bl	8008a64 <move_window>
			if (res != FR_OK) break;
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d1e9      	bne.n	8008eb0 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008edc:	89a1      	ldrh	r1, [r4, #12]
 8008ede:	006d      	lsls	r5, r5, #1
 8008ee0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008ee4:	fbb5 f3f1 	udiv	r3, r5, r1
 8008ee8:	fb01 5513 	mls	r5, r1, r3, r5
 8008eec:	1953      	adds	r3, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8008eee:	5557      	strb	r7, [r2, r5]
 8008ef0:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 8008ef4:	705f      	strb	r7, [r3, #1]
 8008ef6:	e7d9      	b.n	8008eac <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008ef8:	8983      	ldrh	r3, [r0, #12]
 8008efa:	089b      	lsrs	r3, r3, #2
 8008efc:	fbb1 f3f3 	udiv	r3, r1, r3
 8008f00:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008f02:	4419      	add	r1, r3
 8008f04:	f7ff fdae 	bl	8008a64 <move_window>
			if (res != FR_OK) break;
 8008f08:	4606      	mov	r6, r0
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	d1d0      	bne.n	8008eb0 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008f0e:	89a1      	ldrh	r1, [r4, #12]
 8008f10:	00ad      	lsls	r5, r5, #2
 8008f12:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8008f16:	fbb5 f2f1 	udiv	r2, r5, r1
 8008f1a:	fb01 5512 	mls	r5, r1, r2, r5
 8008f1e:	441d      	add	r5, r3
 8008f20:	4628      	mov	r0, r5
 8008f22:	f7ff fc1f 	bl	8008764 <ld_dword>
 8008f26:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8008f2a:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008f2e:	4339      	orrs	r1, r7
 8008f30:	4628      	mov	r0, r5
 8008f32:	f7ff fc1f 	bl	8008774 <st_dword>
 8008f36:	e7b9      	b.n	8008eac <put_fat+0x98>
	FRESULT res = FR_INT_ERR;
 8008f38:	2602      	movs	r6, #2
 8008f3a:	e7b9      	b.n	8008eb0 <put_fat+0x9c>

08008f3c <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008f3c:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8008f3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f40:	4604      	mov	r4, r0
 8008f42:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008f44:	d968      	bls.n	8009018 <get_fat.isra.8+0xdc>
 8008f46:	6983      	ldr	r3, [r0, #24]
 8008f48:	4299      	cmp	r1, r3
 8008f4a:	d265      	bcs.n	8009018 <get_fat.isra.8+0xdc>
		switch (fs->fs_type) {
 8008f4c:	7803      	ldrb	r3, [r0, #0]
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	d032      	beq.n	8008fb8 <get_fat.isra.8+0x7c>
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d048      	beq.n	8008fe8 <get_fat.isra.8+0xac>
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d15e      	bne.n	8009018 <get_fat.isra.8+0xdc>
			bc = (UINT)clst; bc += bc / 2;
 8008f5a:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f5e:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008f60:	8983      	ldrh	r3, [r0, #12]
 8008f62:	fbb5 f3f3 	udiv	r3, r5, r3
 8008f66:	4419      	add	r1, r3
 8008f68:	f7ff fd7c 	bl	8008a64 <move_window>
 8008f6c:	b110      	cbz	r0, 8008f74 <get_fat.isra.8+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 8008f74:	89a1      	ldrh	r1, [r4, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f76:	6a63      	ldr	r3, [r4, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 8008f78:	fbb5 f2f1 	udiv	r2, r5, r1
 8008f7c:	fb01 5212 	mls	r2, r1, r2, r5
 8008f80:	4422      	add	r2, r4
 8008f82:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f84:	4620      	mov	r0, r4
 8008f86:	fbb7 f1f1 	udiv	r1, r7, r1
 8008f8a:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];
 8008f8c:	f892 5034 	ldrb.w	r5, [r2, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008f90:	f7ff fd68 	bl	8008a64 <move_window>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d1ea      	bne.n	8008f6e <get_fat.isra.8+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 8008f98:	89a2      	ldrh	r2, [r4, #12]
 8008f9a:	fbb7 f3f2 	udiv	r3, r7, r2
 8008f9e:	fb02 7313 	mls	r3, r2, r3, r7
 8008fa2:	441c      	add	r4, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008fa4:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8008fa6:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 8008faa:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8008fae:	bf4c      	ite	mi
 8008fb0:	0900      	lsrmi	r0, r0, #4
 8008fb2:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8008fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008fb8:	8983      	ldrh	r3, [r0, #12]
 8008fba:	085b      	lsrs	r3, r3, #1
 8008fbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fc0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008fc2:	4419      	add	r1, r3
 8008fc4:	f7ff fd4e 	bl	8008a64 <move_window>
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d1d0      	bne.n	8008f6e <get_fat.isra.8+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008fcc:	89a1      	ldrh	r1, [r4, #12]
 8008fce:	0076      	lsls	r6, r6, #1
 8008fd0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008fd4:	fbb6 f3f1 	udiv	r3, r6, r1
 8008fd8:	fb01 6613 	mls	r6, r1, r3, r6
 8008fdc:	1993      	adds	r3, r2, r6
	rv = rv << 8 | ptr[0];
 8008fde:	5d90      	ldrb	r0, [r2, r6]
 8008fe0:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008fe2:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8008fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008fe8:	8983      	ldrh	r3, [r0, #12]
 8008fea:	089b      	lsrs	r3, r3, #2
 8008fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ff0:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008ff2:	4419      	add	r1, r3
 8008ff4:	f7ff fd36 	bl	8008a64 <move_window>
 8008ff8:	2800      	cmp	r0, #0
 8008ffa:	d1b8      	bne.n	8008f6e <get_fat.isra.8+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8008ffc:	89a2      	ldrh	r2, [r4, #12]
 8008ffe:	00b6      	lsls	r6, r6, #2
 8009000:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8009004:	fbb6 f3f2 	udiv	r3, r6, r2
 8009008:	fb02 6613 	mls	r6, r2, r3, r6
 800900c:	4430      	add	r0, r6
 800900e:	f7ff fba9 	bl	8008764 <ld_dword>
 8009012:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 8009016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8009018:	2001      	movs	r0, #1
}
 800901a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800901c <create_chain>:
{
 800901c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009020:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 8009022:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 8009024:	460f      	mov	r7, r1
 8009026:	b971      	cbnz	r1, 8009046 <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009028:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800902a:	b1f6      	cbz	r6, 800906a <create_chain+0x4e>
 800902c:	69ab      	ldr	r3, [r5, #24]
 800902e:	429e      	cmp	r6, r3
 8009030:	bf28      	it	cs
 8009032:	2601      	movcs	r6, #1
 8009034:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009036:	69ab      	ldr	r3, [r5, #24]
			ncl++;							/* Next cluster */
 8009038:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800903a:	429c      	cmp	r4, r3
 800903c:	d318      	bcc.n	8009070 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 800903e:	2e01      	cmp	r6, #1
 8009040:	d815      	bhi.n	800906e <create_chain+0x52>
 8009042:	2400      	movs	r4, #0
 8009044:	e009      	b.n	800905a <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009046:	4628      	mov	r0, r5
 8009048:	f7ff ff78 	bl	8008f3c <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800904c:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800904e:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009050:	d937      	bls.n	80090c2 <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009052:	1c43      	adds	r3, r0, #1
 8009054:	d104      	bne.n	8009060 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009056:	f04f 34ff 	mov.w	r4, #4294967295
}
 800905a:	4620      	mov	r0, r4
 800905c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009060:	69ab      	ldr	r3, [r5, #24]
 8009062:	4298      	cmp	r0, r3
 8009064:	d3f9      	bcc.n	800905a <create_chain+0x3e>
 8009066:	463e      	mov	r6, r7
 8009068:	e7e4      	b.n	8009034 <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800906a:	2601      	movs	r6, #1
 800906c:	e7e2      	b.n	8009034 <create_chain+0x18>
				ncl = 2;
 800906e:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009070:	4621      	mov	r1, r4
 8009072:	f8d8 0000 	ldr.w	r0, [r8]
 8009076:	f7ff ff61 	bl	8008f3c <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 800907a:	b130      	cbz	r0, 800908a <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800907c:	2801      	cmp	r0, #1
 800907e:	d020      	beq.n	80090c2 <create_chain+0xa6>
 8009080:	3001      	adds	r0, #1
 8009082:	d0e8      	beq.n	8009056 <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 8009084:	42b4      	cmp	r4, r6
 8009086:	d1d6      	bne.n	8009036 <create_chain+0x1a>
 8009088:	e7db      	b.n	8009042 <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800908a:	f04f 32ff 	mov.w	r2, #4294967295
 800908e:	4621      	mov	r1, r4
 8009090:	4628      	mov	r0, r5
 8009092:	f7ff febf 	bl	8008e14 <put_fat>
		if (res == FR_OK && clst != 0) {
 8009096:	b990      	cbnz	r0, 80090be <create_chain+0xa2>
 8009098:	b957      	cbnz	r7, 80090b0 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800909a:	69aa      	ldr	r2, [r5, #24]
 800909c:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 800909e:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80090a0:	3a02      	subs	r2, #2
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d90f      	bls.n	80090c6 <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80090a6:	792b      	ldrb	r3, [r5, #4]
 80090a8:	f043 0301 	orr.w	r3, r3, #1
 80090ac:	712b      	strb	r3, [r5, #4]
 80090ae:	e7d4      	b.n	800905a <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80090b0:	4622      	mov	r2, r4
 80090b2:	4639      	mov	r1, r7
 80090b4:	4628      	mov	r0, r5
 80090b6:	f7ff fead 	bl	8008e14 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d0ed      	beq.n	800909a <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80090be:	2801      	cmp	r0, #1
 80090c0:	d0c9      	beq.n	8009056 <create_chain+0x3a>
 80090c2:	2401      	movs	r4, #1
 80090c4:	e7c9      	b.n	800905a <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80090c6:	3b01      	subs	r3, #1
 80090c8:	616b      	str	r3, [r5, #20]
 80090ca:	e7ec      	b.n	80090a6 <create_chain+0x8a>

080090cc <remove_chain>:
{
 80090cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ce:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80090d0:	2d01      	cmp	r5, #1
{
 80090d2:	4607      	mov	r7, r0
 80090d4:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80090d6:	d801      	bhi.n	80090dc <remove_chain+0x10>
 80090d8:	2002      	movs	r0, #2
 80090da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 80090dc:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80090de:	69a3      	ldr	r3, [r4, #24]
 80090e0:	429d      	cmp	r5, r3
 80090e2:	d2f9      	bcs.n	80090d8 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80090e4:	b12a      	cbz	r2, 80090f2 <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80090e6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ea:	4620      	mov	r0, r4
 80090ec:	f7ff fe92 	bl	8008e14 <put_fat>
		if (res != FR_OK) return res;
 80090f0:	bb08      	cbnz	r0, 8009136 <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80090f2:	4629      	mov	r1, r5
 80090f4:	6838      	ldr	r0, [r7, #0]
 80090f6:	f7ff ff21 	bl	8008f3c <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 80090fa:	4606      	mov	r6, r0
 80090fc:	b908      	cbnz	r0, 8009102 <remove_chain+0x36>
	return FR_OK;
 80090fe:	2000      	movs	r0, #0
 8009100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009102:	2801      	cmp	r0, #1
 8009104:	d0e8      	beq.n	80090d8 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009106:	1c43      	adds	r3, r0, #1
 8009108:	d014      	beq.n	8009134 <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800910a:	2200      	movs	r2, #0
 800910c:	4629      	mov	r1, r5
 800910e:	4620      	mov	r0, r4
 8009110:	f7ff fe80 	bl	8008e14 <put_fat>
			if (res != FR_OK) return res;
 8009114:	b978      	cbnz	r0, 8009136 <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009116:	69a2      	ldr	r2, [r4, #24]
 8009118:	6963      	ldr	r3, [r4, #20]
 800911a:	1e91      	subs	r1, r2, #2
 800911c:	428b      	cmp	r3, r1
 800911e:	d205      	bcs.n	800912c <remove_chain+0x60>
			fs->free_clst++;
 8009120:	3301      	adds	r3, #1
 8009122:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 8009124:	7923      	ldrb	r3, [r4, #4]
 8009126:	f043 0301 	orr.w	r3, r3, #1
 800912a:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800912c:	4296      	cmp	r6, r2
 800912e:	4635      	mov	r5, r6
 8009130:	d3df      	bcc.n	80090f2 <remove_chain+0x26>
 8009132:	e7e4      	b.n	80090fe <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009134:	2001      	movs	r0, #1
}
 8009136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009138 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009138:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800913a:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 800913c:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 800913e:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8009140:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8009142:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009144:	b992      	cbnz	r2, 800916c <dir_sdi.constprop.11+0x34>
 8009146:	7823      	ldrb	r3, [r4, #0]
 8009148:	2b02      	cmp	r3, #2
 800914a:	d901      	bls.n	8009150 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 800914c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800914e:	b973      	cbnz	r3, 800916e <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009150:	8923      	ldrh	r3, [r4, #8]
 8009152:	b90b      	cbnz	r3, 8009158 <dir_sdi.constprop.11+0x20>
 8009154:	2002      	movs	r0, #2
 8009156:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8009158:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800915a:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 800915c:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 800915e:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009160:	2b00      	cmp	r3, #0
 8009162:	d0f7      	beq.n	8009154 <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009164:	3434      	adds	r4, #52	; 0x34
 8009166:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8009168:	2000      	movs	r0, #0
 800916a:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800916c:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800916e:	8961      	ldrh	r1, [r4, #10]
 8009170:	89a0      	ldrh	r0, [r4, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009172:	4348      	muls	r0, r1
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009174:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 8009176:	d10c      	bne.n	8009192 <dir_sdi.constprop.11+0x5a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009178:	4611      	mov	r1, r2
 800917a:	6828      	ldr	r0, [r5, #0]
 800917c:	f7ff fede 	bl	8008f3c <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009180:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009182:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009184:	d00b      	beq.n	800919e <dir_sdi.constprop.11+0x66>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009186:	2801      	cmp	r0, #1
 8009188:	d9e4      	bls.n	8009154 <dir_sdi.constprop.11+0x1c>
 800918a:	69a3      	ldr	r3, [r4, #24]
 800918c:	4298      	cmp	r0, r3
 800918e:	d3f3      	bcc.n	8009178 <dir_sdi.constprop.11+0x40>
 8009190:	e7e0      	b.n	8009154 <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 8009192:	4619      	mov	r1, r3
 8009194:	4620      	mov	r0, r4
 8009196:	f7ff fb7d 	bl	8008894 <clust2sect>
 800919a:	61e8      	str	r0, [r5, #28]
 800919c:	e7de      	b.n	800915c <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800919e:	2001      	movs	r0, #1
}
 80091a0:	bd38      	pop	{r3, r4, r5, pc}

080091a2 <dir_next>:
{
 80091a2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80091a6:	69c3      	ldr	r3, [r0, #28]
{
 80091a8:	4605      	mov	r5, r0
 80091aa:	4688      	mov	r8, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80091ac:	b1b3      	cbz	r3, 80091dc <dir_next+0x3a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80091ae:	6947      	ldr	r7, [r0, #20]
 80091b0:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80091b2:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 80091b6:	d211      	bcs.n	80091dc <dir_next+0x3a>
	FATFS *fs = dp->obj.fs;
 80091b8:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80091ba:	89a2      	ldrh	r2, [r4, #12]
 80091bc:	fbb7 f0f2 	udiv	r0, r7, r2
 80091c0:	fb02 7210 	mls	r2, r2, r0, r7
 80091c4:	2a00      	cmp	r2, #0
 80091c6:	d14f      	bne.n	8009268 <dir_next+0xc6>
		if (!dp->clust) {		/* Static table */
 80091c8:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 80091ca:	3301      	adds	r3, #1
 80091cc:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 80091ce:	b941      	cbnz	r1, 80091e2 <dir_next+0x40>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80091d0:	8923      	ldrh	r3, [r4, #8]
 80091d2:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 80091d6:	d847      	bhi.n	8009268 <dir_next+0xc6>
				dp->sect = 0; return FR_NO_FILE;
 80091d8:	2300      	movs	r3, #0
 80091da:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80091dc:	2004      	movs	r0, #4
 80091de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80091e2:	8963      	ldrh	r3, [r4, #10]
 80091e4:	3b01      	subs	r3, #1
 80091e6:	4203      	tst	r3, r0
 80091e8:	d13e      	bne.n	8009268 <dir_next+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80091ea:	4620      	mov	r0, r4
 80091ec:	f7ff fea6 	bl	8008f3c <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80091f0:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80091f2:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80091f4:	d802      	bhi.n	80091fc <dir_next+0x5a>
 80091f6:	2002      	movs	r0, #2
 80091f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80091fc:	1c42      	adds	r2, r0, #1
 80091fe:	d102      	bne.n	8009206 <dir_next+0x64>
 8009200:	2001      	movs	r0, #1
 8009202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009206:	69a3      	ldr	r3, [r4, #24]
 8009208:	4298      	cmp	r0, r3
 800920a:	d327      	bcc.n	800925c <dir_next+0xba>
					if (!stretch) {								/* If no stretch, report EOT */
 800920c:	f1b8 0f00 	cmp.w	r8, #0
 8009210:	d0e2      	beq.n	80091d8 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009212:	69a9      	ldr	r1, [r5, #24]
 8009214:	4628      	mov	r0, r5
 8009216:	f7ff ff01 	bl	800901c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800921a:	4606      	mov	r6, r0
 800921c:	2800      	cmp	r0, #0
 800921e:	d03d      	beq.n	800929c <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009220:	2801      	cmp	r0, #1
 8009222:	d0e8      	beq.n	80091f6 <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	d0eb      	beq.n	8009200 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009228:	4620      	mov	r0, r4
 800922a:	f7ff fbcb 	bl	80089c4 <sync_window>
 800922e:	4680      	mov	r8, r0
 8009230:	2800      	cmp	r0, #0
 8009232:	d1e5      	bne.n	8009200 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009234:	4601      	mov	r1, r0
 8009236:	89a2      	ldrh	r2, [r4, #12]
 8009238:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800923c:	f7ff faa2 	bl	8008784 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009240:	4631      	mov	r1, r6
 8009242:	4620      	mov	r0, r4
 8009244:	f7ff fb26 	bl	8008894 <clust2sect>
						fs->wflag = 1;
 8009248:	f04f 0901 	mov.w	r9, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800924c:	6320      	str	r0, [r4, #48]	; 0x30
 800924e:	8963      	ldrh	r3, [r4, #10]
 8009250:	4598      	cmp	r8, r3
 8009252:	d316      	bcc.n	8009282 <dir_next+0xe0>
					fs->winsect -= n;							/* Restore window offset */
 8009254:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009256:	eba3 0308 	sub.w	r3, r3, r8
 800925a:	6323      	str	r3, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 800925c:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 800925e:	4631      	mov	r1, r6
 8009260:	4620      	mov	r0, r4
 8009262:	f7ff fb17 	bl	8008894 <clust2sect>
 8009266:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009268:	89a1      	ldrh	r1, [r4, #12]
	dp->dptr = ofs;						/* Current entry */
 800926a:	616f      	str	r7, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800926c:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8009270:	fbb7 f2f1 	udiv	r2, r7, r1
 8009274:	fb01 7712 	mls	r7, r1, r2, r7
 8009278:	441f      	add	r7, r3
 800927a:	622f      	str	r7, [r5, #32]
	return FR_OK;
 800927c:	2000      	movs	r0, #0
 800927e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						fs->wflag = 1;
 8009282:	f884 9003 	strb.w	r9, [r4, #3]
 8009286:	4620      	mov	r0, r4
 8009288:	f7ff fb79 	bl	800897e <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800928c:	2800      	cmp	r0, #0
 800928e:	d1b7      	bne.n	8009200 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009290:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009292:	3301      	adds	r3, #1
 8009294:	f108 0801 	add.w	r8, r8, #1
 8009298:	6323      	str	r3, [r4, #48]	; 0x30
 800929a:	e7d8      	b.n	800924e <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800929c:	2007      	movs	r0, #7
}
 800929e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080092a4 <follow_path>:
{
 80092a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 80092a8:	6806      	ldr	r6, [r0, #0]
{
 80092aa:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80092ac:	780b      	ldrb	r3, [r1, #0]
 80092ae:	2b2f      	cmp	r3, #47	; 0x2f
 80092b0:	460d      	mov	r5, r1
 80092b2:	f101 0101 	add.w	r1, r1, #1
 80092b6:	d0f9      	beq.n	80092ac <follow_path+0x8>
 80092b8:	2b5c      	cmp	r3, #92	; 0x5c
 80092ba:	d0f7      	beq.n	80092ac <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 80092bc:	2300      	movs	r3, #0
 80092be:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80092c0:	782b      	ldrb	r3, [r5, #0]
 80092c2:	2b1f      	cmp	r3, #31
 80092c4:	d959      	bls.n	800937a <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80092c6:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8009428 <follow_path+0x184>
	p = *path; sfn = dp->fn;
 80092ca:	f104 0724 	add.w	r7, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 80092ce:	220b      	movs	r2, #11
 80092d0:	2120      	movs	r1, #32
 80092d2:	4638      	mov	r0, r7
 80092d4:	f7ff fa56 	bl	8008784 <mem_set>
	si = i = 0; ni = 8;
 80092d8:	2200      	movs	r2, #0
 80092da:	f105 3eff 	add.w	lr, r5, #4294967295
 80092de:	4611      	mov	r1, r2
 80092e0:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 80092e2:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 80092e6:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 80092e8:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 80092ec:	d90b      	bls.n	8009306 <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80092ee:	2b2f      	cmp	r3, #47	; 0x2f
 80092f0:	d14b      	bne.n	800938a <follow_path+0xe6>
 80092f2:	1868      	adds	r0, r5, r1
 80092f4:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80092f6:	f810 eb01 	ldrb.w	lr, [r0], #1
 80092fa:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 80092fe:	d0f9      	beq.n	80092f4 <follow_path+0x50>
 8009300:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 8009304:	d0f6      	beq.n	80092f4 <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 8009306:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009308:	2a00      	cmp	r2, #0
 800930a:	d054      	beq.n	80093b6 <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800930c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8009310:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009314:	2ae5      	cmp	r2, #229	; 0xe5
 8009316:	bf04      	itt	eq
 8009318:	2205      	moveq	r2, #5
 800931a:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800931e:	2b21      	cmp	r3, #33	; 0x21
 8009320:	bf34      	ite	cc
 8009322:	2304      	movcc	r3, #4
 8009324:	2300      	movcs	r3, #0
 8009326:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800932a:	4620      	mov	r0, r4
 800932c:	f7ff ff04 	bl	8009138 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8009330:	2800      	cmp	r0, #0
 8009332:	d145      	bne.n	80093c0 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 8009334:	69e1      	ldr	r1, [r4, #28]
 8009336:	4648      	mov	r0, r9
 8009338:	f7ff fb94 	bl	8008a64 <move_window>
		if (res != FR_OK) break;
 800933c:	2800      	cmp	r0, #0
 800933e:	d13f      	bne.n	80093c0 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 8009340:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009342:	781a      	ldrb	r2, [r3, #0]
 8009344:	2a00      	cmp	r2, #0
 8009346:	d046      	beq.n	80093d6 <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009348:	7ada      	ldrb	r2, [r3, #11]
 800934a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800934e:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009350:	7ada      	ldrb	r2, [r3, #11]
 8009352:	0711      	lsls	r1, r2, #28
 8009354:	d40c      	bmi.n	8009370 <follow_path+0xcc>
 8009356:	f103 0e0b 	add.w	lr, r3, #11
 800935a:	4639      	mov	r1, r7
		r = *d++ - *s++;
 800935c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009360:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 8009364:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 8009366:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 800936a:	d027      	beq.n	80093bc <follow_path+0x118>
 800936c:	2a00      	cmp	r2, #0
 800936e:	d0f5      	beq.n	800935c <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 8009370:	2100      	movs	r1, #0
 8009372:	4620      	mov	r0, r4
 8009374:	f7ff ff15 	bl	80091a2 <dir_next>
 8009378:	e7da      	b.n	8009330 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 800937a:	2380      	movs	r3, #128	; 0x80
 800937c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009380:	4620      	mov	r0, r4
}
 8009382:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8009386:	f7ff bed7 	b.w	8009138 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800938a:	2b5c      	cmp	r3, #92	; 0x5c
 800938c:	d0b1      	beq.n	80092f2 <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800938e:	2b2e      	cmp	r3, #46	; 0x2e
 8009390:	d039      	beq.n	8009406 <follow_path+0x162>
 8009392:	4290      	cmp	r0, r2
 8009394:	d90f      	bls.n	80093b6 <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 8009396:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800939a:	bf18      	it	ne
 800939c:	3b80      	subne	r3, #128	; 0x80
 800939e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800942c <follow_path+0x188>
 80093a2:	bf18      	it	ne
 80093a4:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 80093a8:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 80093ac:	f1bc 0f00 	cmp.w	ip, #0
 80093b0:	d02e      	beq.n	8009410 <follow_path+0x16c>
 80093b2:	4563      	cmp	r3, ip
 80093b4:	d1f8      	bne.n	80093a8 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80093b6:	2006      	movs	r0, #6
	return res;
 80093b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80093bc:	2a00      	cmp	r2, #0
 80093be:	d1d7      	bne.n	8009370 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 80093c0:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80093c4:	b148      	cbz	r0, 80093da <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80093c6:	2804      	cmp	r0, #4
 80093c8:	d12c      	bne.n	8009424 <follow_path+0x180>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80093ca:	f013 0f04 	tst.w	r3, #4
 80093ce:	bf08      	it	eq
 80093d0:	2005      	moveq	r0, #5
 80093d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80093d6:	2004      	movs	r0, #4
 80093d8:	e7f2      	b.n	80093c0 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80093da:	075a      	lsls	r2, r3, #29
 80093dc:	d422      	bmi.n	8009424 <follow_path+0x180>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80093de:	79a3      	ldrb	r3, [r4, #6]
 80093e0:	06db      	lsls	r3, r3, #27
 80093e2:	d50d      	bpl.n	8009400 <follow_path+0x15c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80093e4:	89b2      	ldrh	r2, [r6, #12]
 80093e6:	6960      	ldr	r0, [r4, #20]
 80093e8:	fbb0 f3f2 	udiv	r3, r0, r2
 80093ec:	f106 0134 	add.w	r1, r6, #52	; 0x34
 80093f0:	fb02 0313 	mls	r3, r2, r3, r0
 80093f4:	4419      	add	r1, r3
 80093f6:	7830      	ldrb	r0, [r6, #0]
 80093f8:	f7ff faa7 	bl	800894a <ld_clust.isra.1>
 80093fc:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80093fe:	e764      	b.n	80092ca <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009400:	2005      	movs	r0, #5
 8009402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009406:	280b      	cmp	r0, #11
 8009408:	d0d5      	beq.n	80093b6 <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 800940a:	2208      	movs	r2, #8
 800940c:	200b      	movs	r0, #11
 800940e:	e768      	b.n	80092e2 <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009410:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8009414:	f1bc 0f19 	cmp.w	ip, #25
 8009418:	d801      	bhi.n	800941e <follow_path+0x17a>
 800941a:	3b20      	subs	r3, #32
 800941c:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 800941e:	54bb      	strb	r3, [r7, r2]
 8009420:	3201      	adds	r2, #1
 8009422:	e75e      	b.n	80092e2 <follow_path+0x3e>
}
 8009424:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009428:	08024e92 	.word	0x08024e92
 800942c:	08024f11 	.word	0x08024f11

08009430 <dir_register>:
{
 8009430:	b570      	push	{r4, r5, r6, lr}
 8009432:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8009434:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 8009436:	f7ff fe7f 	bl	8009138 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 800943a:	4604      	mov	r4, r0
 800943c:	bb28      	cbnz	r0, 800948a <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 800943e:	69e9      	ldr	r1, [r5, #28]
 8009440:	4630      	mov	r0, r6
 8009442:	f7ff fb0f 	bl	8008a64 <move_window>
			if (res != FR_OK) break;
 8009446:	4604      	mov	r4, r0
 8009448:	b9f8      	cbnz	r0, 800948a <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800944a:	6a2b      	ldr	r3, [r5, #32]
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	2be5      	cmp	r3, #229	; 0xe5
 8009450:	d114      	bne.n	800947c <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8009452:	69e9      	ldr	r1, [r5, #28]
 8009454:	4630      	mov	r0, r6
 8009456:	f7ff fb05 	bl	8008a64 <move_window>
		if (res == FR_OK) {
 800945a:	4604      	mov	r4, r0
 800945c:	b960      	cbnz	r0, 8009478 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800945e:	4601      	mov	r1, r0
 8009460:	2220      	movs	r2, #32
 8009462:	6a28      	ldr	r0, [r5, #32]
 8009464:	f7ff f98e 	bl	8008784 <mem_set>
 8009468:	220b      	movs	r2, #11
 800946a:	f105 0124 	add.w	r1, r5, #36	; 0x24
 800946e:	6a28      	ldr	r0, [r5, #32]
 8009470:	f7ff fa62 	bl	8008938 <mem_cpy.part.0>
			fs->wflag = 1;
 8009474:	2301      	movs	r3, #1
 8009476:	70f3      	strb	r3, [r6, #3]
}
 8009478:	4620      	mov	r0, r4
 800947a:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800947c:	2b00      	cmp	r3, #0
 800947e:	d0e8      	beq.n	8009452 <dir_register+0x22>
			res = dir_next(dp, 1);
 8009480:	2101      	movs	r1, #1
 8009482:	4628      	mov	r0, r5
 8009484:	f7ff fe8d 	bl	80091a2 <dir_next>
 8009488:	e7d7      	b.n	800943a <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800948a:	2c04      	cmp	r4, #4
 800948c:	bf08      	it	eq
 800948e:	2407      	moveq	r4, #7
 8009490:	e7f2      	b.n	8009478 <dir_register+0x48>
	...

08009494 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009494:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009496:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009498:	a804      	add	r0, sp, #16
{
 800949a:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 800949c:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 80094a0:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80094a2:	f7ff fa16 	bl	80088d2 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80094a6:	1e05      	subs	r5, r0, #0
 80094a8:	db1f      	blt.n	80094ea <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80094aa:	4912      	ldr	r1, [pc, #72]	; (80094f4 <f_mount+0x60>)
 80094ac:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 80094b0:	b15c      	cbz	r4, 80094ca <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80094b2:	4b11      	ldr	r3, [pc, #68]	; (80094f8 <f_mount+0x64>)
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	4294      	cmp	r4, r2
 80094b8:	bf04      	itt	eq
 80094ba:	2200      	moveq	r2, #0
 80094bc:	601a      	streq	r2, [r3, #0]
 80094be:	691a      	ldr	r2, [r3, #16]
 80094c0:	2000      	movs	r0, #0
 80094c2:	4294      	cmp	r4, r2
 80094c4:	bf08      	it	eq
 80094c6:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80094c8:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 80094ca:	9801      	ldr	r0, [sp, #4]
 80094cc:	b108      	cbz	r0, 80094d2 <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 80094ce:	2300      	movs	r3, #0
 80094d0:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80094d2:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80094d6:	b130      	cbz	r0, 80094e6 <f_mount+0x52>
 80094d8:	2e01      	cmp	r6, #1
 80094da:	d108      	bne.n	80094ee <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80094dc:	2200      	movs	r2, #0
 80094de:	a901      	add	r1, sp, #4
 80094e0:	4668      	mov	r0, sp
 80094e2:	f7ff fb1b 	bl	8008b1c <find_volume>
	LEAVE_FF(fs, res);
}
 80094e6:	b004      	add	sp, #16
 80094e8:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80094ea:	200b      	movs	r0, #11
 80094ec:	e7fb      	b.n	80094e6 <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80094ee:	2000      	movs	r0, #0
 80094f0:	e7f9      	b.n	80094e6 <f_mount+0x52>
 80094f2:	bf00      	nop
 80094f4:	200015e8 	.word	0x200015e8
 80094f8:	200015ec 	.word	0x200015ec

080094fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80094fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009500:	b090      	sub	sp, #64	; 0x40
 8009502:	4690      	mov	r8, r2
 8009504:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009506:	4604      	mov	r4, r0
 8009508:	2800      	cmp	r0, #0
 800950a:	f000 80d1 	beq.w	80096b0 <f_open+0x1b4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800950e:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8009512:	462a      	mov	r2, r5
 8009514:	a903      	add	r1, sp, #12
 8009516:	a801      	add	r0, sp, #4
 8009518:	f7ff fb00 	bl	8008b1c <find_volume>
	if (res == FR_OK) {
 800951c:	4607      	mov	r7, r0
 800951e:	bb38      	cbnz	r0, 8009570 <f_open+0x74>
		dj.obj.fs = fs;
 8009520:	ae10      	add	r6, sp, #64	; 0x40
 8009522:	9b03      	ldr	r3, [sp, #12]
 8009524:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009528:	9901      	ldr	r1, [sp, #4]
 800952a:	4630      	mov	r0, r6
 800952c:	f7ff feba 	bl	80092a4 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009530:	b958      	cbnz	r0, 800954a <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009532:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8009536:	2b00      	cmp	r3, #0
 8009538:	db1e      	blt.n	8009578 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800953a:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 800953e:	bf14      	ite	ne
 8009540:	2101      	movne	r1, #1
 8009542:	2100      	moveq	r1, #0
 8009544:	4630      	mov	r0, r6
 8009546:	f7ff f923 	bl	8008790 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800954a:	f018 0f1c 	tst.w	r8, #28
 800954e:	d073      	beq.n	8009638 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8009550:	b1a0      	cbz	r0, 800957c <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009552:	2804      	cmp	r0, #4
 8009554:	d109      	bne.n	800956a <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009556:	4b73      	ldr	r3, [pc, #460]	; (8009724 <f_open+0x228>)
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	2a00      	cmp	r2, #0
 800955c:	f000 80de 	beq.w	800971c <f_open+0x220>
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f000 80da 	beq.w	800971c <f_open+0x220>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009568:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800956a:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800956e:	b170      	cbz	r0, 800958e <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009570:	2300      	movs	r3, #0
 8009572:	6023      	str	r3, [r4, #0]
 8009574:	4607      	mov	r7, r0
 8009576:	e095      	b.n	80096a4 <f_open+0x1a8>
				res = FR_INVALID_NAME;
 8009578:	2006      	movs	r0, #6
 800957a:	e7e6      	b.n	800954a <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800957c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009580:	f013 0f11 	tst.w	r3, #17
 8009584:	d163      	bne.n	800964e <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009586:	f018 0f04 	tst.w	r8, #4
 800958a:	f040 80c1 	bne.w	8009710 <f_open+0x214>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800958e:	0728      	lsls	r0, r5, #28
 8009590:	d53c      	bpl.n	800960c <f_open+0x110>
				dw = GET_FATTIME();
 8009592:	f012 fdd3 	bl	801c13c <get_fattime>
 8009596:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009598:	4601      	mov	r1, r0
 800959a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800959c:	300e      	adds	r0, #14
 800959e:	f7ff f8e9 	bl	8008774 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80095a2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80095a4:	4611      	mov	r1, r2
 80095a6:	3016      	adds	r0, #22
 80095a8:	f7ff f8e4 	bl	8008774 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80095ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80095ae:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80095b2:	2220      	movs	r2, #32
 80095b4:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80095b6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80095ba:	f899 0000 	ldrb.w	r0, [r9]
 80095be:	4651      	mov	r1, sl
 80095c0:	f7ff f9c3 	bl	800894a <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80095c4:	2200      	movs	r2, #0
 80095c6:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80095c8:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80095ca:	4648      	mov	r0, r9
 80095cc:	f7ff f9cb 	bl	8008966 <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 80095d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 80095d2:	2200      	movs	r2, #0
 80095d4:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 80095d6:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 80095d8:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 80095da:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 80095dc:	9b03      	ldr	r3, [sp, #12]
 80095de:	2101      	movs	r1, #1
 80095e0:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 80095e2:	f1b8 0f00 	cmp.w	r8, #0
 80095e6:	d011      	beq.n	800960c <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 80095e8:	4641      	mov	r1, r8
 80095ea:	4630      	mov	r0, r6
						dw = fs->winsect;
 80095ec:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 80095f0:	f7ff fd6c 	bl	80090cc <remove_chain>
						if (res == FR_OK) {
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d1bb      	bne.n	8009570 <f_open+0x74>
							res = move_window(fs, dw);
 80095f8:	4649      	mov	r1, r9
 80095fa:	9803      	ldr	r0, [sp, #12]
 80095fc:	f7ff fa32 	bl	8008a64 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009600:	9a03      	ldr	r2, [sp, #12]
 8009602:	f108 33ff 	add.w	r3, r8, #4294967295
 8009606:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 8009608:	2800      	cmp	r0, #0
 800960a:	d1b1      	bne.n	8009570 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800960c:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800960e:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009612:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8009614:	bf48      	it	mi
 8009616:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800961a:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 800961e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009620:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009622:	bf14      	ite	ne
 8009624:	2101      	movne	r1, #1
 8009626:	2100      	moveq	r1, #0
 8009628:	4630      	mov	r0, r6
 800962a:	f7ff f8df 	bl	80087ec <inc_lock>
 800962e:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009630:	2800      	cmp	r0, #0
 8009632:	d13f      	bne.n	80096b4 <f_open+0x1b8>
 8009634:	2002      	movs	r0, #2
 8009636:	e79b      	b.n	8009570 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8009638:	2800      	cmp	r0, #0
 800963a:	d199      	bne.n	8009570 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800963c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009640:	06da      	lsls	r2, r3, #27
 8009642:	d467      	bmi.n	8009714 <f_open+0x218>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009644:	f018 0f02 	tst.w	r8, #2
 8009648:	d0e0      	beq.n	800960c <f_open+0x110>
 800964a:	07db      	lsls	r3, r3, #31
 800964c:	d5de      	bpl.n	800960c <f_open+0x110>
					res = FR_DENIED;
 800964e:	2007      	movs	r0, #7
 8009650:	e78e      	b.n	8009570 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 8009652:	6820      	ldr	r0, [r4, #0]
 8009654:	f7ff fc72 	bl	8008f3c <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8009658:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 800965a:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 800965c:	d926      	bls.n	80096ac <f_open+0x1b0>
 800965e:	1c42      	adds	r2, r0, #1
 8009660:	4250      	negs	r0, r2
 8009662:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009664:	eba5 0508 	sub.w	r5, r5, r8
 8009668:	2800      	cmp	r0, #0
 800966a:	d04d      	beq.n	8009708 <f_open+0x20c>
				fp->clust = clst;
 800966c:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800966e:	2800      	cmp	r0, #0
 8009670:	f47f af7e 	bne.w	8009570 <f_open+0x74>
 8009674:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009678:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800967c:	fbb5 f2f3 	udiv	r2, r5, r3
 8009680:	fb03 5512 	mls	r5, r3, r2, r5
 8009684:	b175      	cbz	r5, 80096a4 <f_open+0x1a8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009686:	4640      	mov	r0, r8
 8009688:	f7ff f904 	bl	8008894 <clust2sect>
 800968c:	2800      	cmp	r0, #0
 800968e:	d0d1      	beq.n	8009634 <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009690:	4402      	add	r2, r0
 8009692:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009694:	2301      	movs	r3, #1
 8009696:	4631      	mov	r1, r6
 8009698:	f898 0001 	ldrb.w	r0, [r8, #1]
 800969c:	f7ff f838 	bl	8008710 <disk_read>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d139      	bne.n	8009718 <f_open+0x21c>

	LEAVE_FF(fs, res);
}
 80096a4:	4638      	mov	r0, r7
 80096a6:	b010      	add	sp, #64	; 0x40
 80096a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 80096ac:	2002      	movs	r0, #2
 80096ae:	e7d9      	b.n	8009664 <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 80096b0:	2709      	movs	r7, #9
 80096b2:	e7f7      	b.n	80096a4 <f_open+0x1a8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80096b4:	9e03      	ldr	r6, [sp, #12]
 80096b6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80096ba:	7830      	ldrb	r0, [r6, #0]
 80096bc:	4641      	mov	r1, r8
 80096be:	f7ff f944 	bl	800894a <ld_clust.isra.1>
 80096c2:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80096c4:	f108 001c 	add.w	r0, r8, #28
 80096c8:	f7ff f84c 	bl	8008764 <ld_dword>
			fp->obj.id = fs->id;
 80096cc:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 80096ce:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80096d0:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80096d2:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80096d6:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 80096d8:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 80096da:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 80096dc:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 80096de:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80096e0:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80096e2:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80096e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80096e8:	4630      	mov	r0, r6
 80096ea:	f7ff f84b 	bl	8008784 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80096ee:	06ab      	lsls	r3, r5, #26
 80096f0:	d5d8      	bpl.n	80096a4 <f_open+0x1a8>
 80096f2:	68e5      	ldr	r5, [r4, #12]
 80096f4:	2d00      	cmp	r5, #0
 80096f6:	d0d5      	beq.n	80096a4 <f_open+0x1a8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80096f8:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80096fa:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80096fc:	895a      	ldrh	r2, [r3, #10]
 80096fe:	f8b3 800c 	ldrh.w	r8, [r3, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009702:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009704:	fb08 f802 	mul.w	r8, r8, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009708:	45a8      	cmp	r8, r5
 800970a:	d3a2      	bcc.n	8009652 <f_open+0x156>
 800970c:	2000      	movs	r0, #0
 800970e:	e7ad      	b.n	800966c <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009710:	2008      	movs	r0, #8
 8009712:	e72d      	b.n	8009570 <f_open+0x74>
					res = FR_NO_FILE;
 8009714:	2004      	movs	r0, #4
 8009716:	e72b      	b.n	8009570 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009718:	2001      	movs	r0, #1
 800971a:	e729      	b.n	8009570 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800971c:	4630      	mov	r0, r6
 800971e:	f7ff fe87 	bl	8009430 <dir_register>
 8009722:	e722      	b.n	800956a <f_open+0x6e>
 8009724:	200015ec 	.word	0x200015ec

08009728 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	469b      	mov	fp, r3
 800972e:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8009730:	2300      	movs	r3, #0
{
 8009732:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 8009734:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009738:	a903      	add	r1, sp, #12
{
 800973a:	4604      	mov	r4, r0
 800973c:	4690      	mov	r8, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800973e:	f7ff f8e0 	bl	8008902 <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009742:	4605      	mov	r5, r0
 8009744:	2800      	cmp	r0, #0
 8009746:	d132      	bne.n	80097ae <f_write+0x86>
 8009748:	7d65      	ldrb	r5, [r4, #21]
 800974a:	bb85      	cbnz	r5, 80097ae <f_write+0x86>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800974c:	7d23      	ldrb	r3, [r4, #20]
 800974e:	079a      	lsls	r2, r3, #30
 8009750:	f140 80be 	bpl.w	80098d0 <f_write+0x1a8>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009754:	69a3      	ldr	r3, [r4, #24]
 8009756:	eb13 0f08 	cmn.w	r3, r8
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800975a:	bf28      	it	cs
 800975c:	ea6f 0803 	mvncs.w	r8, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009760:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8009764:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 8009766:	f1b8 0f00 	cmp.w	r8, #0
 800976a:	d01c      	beq.n	80097a6 <f_write+0x7e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800976c:	9803      	ldr	r0, [sp, #12]
 800976e:	69a1      	ldr	r1, [r4, #24]
 8009770:	8983      	ldrh	r3, [r0, #12]
 8009772:	fbb1 f2f3 	udiv	r2, r1, r3
 8009776:	fb03 1312 	mls	r3, r3, r2, r1
 800977a:	2b00      	cmp	r3, #0
 800977c:	f040 8091 	bne.w	80098a2 <f_write+0x17a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009780:	8943      	ldrh	r3, [r0, #10]
 8009782:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8009784:	4013      	ands	r3, r2
 8009786:	9301      	str	r3, [sp, #4]
 8009788:	d124      	bne.n	80097d4 <f_write+0xac>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800978a:	b931      	cbnz	r1, 800979a <f_write+0x72>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800978c:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800978e:	b9a0      	cbnz	r0, 80097ba <f_write+0x92>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009790:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009792:	4620      	mov	r0, r4
 8009794:	f7ff fc42 	bl	800901c <create_chain>
 8009798:	e004      	b.n	80097a4 <f_write+0x7c>
					if (fp->cltbl) {
 800979a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800979c:	b15b      	cbz	r3, 80097b6 <f_write+0x8e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800979e:	4620      	mov	r0, r4
 80097a0:	f7ff f883 	bl	80088aa <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80097a4:	b948      	cbnz	r0, 80097ba <f_write+0x92>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80097a6:	7d23      	ldrb	r3, [r4, #20]
 80097a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097ac:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 80097ae:	4628      	mov	r0, r5
 80097b0:	b005      	add	sp, #20
 80097b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80097b6:	69e1      	ldr	r1, [r4, #28]
 80097b8:	e7eb      	b.n	8009792 <f_write+0x6a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80097ba:	2801      	cmp	r0, #1
 80097bc:	d102      	bne.n	80097c4 <f_write+0x9c>
 80097be:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80097c0:	7565      	strb	r5, [r4, #21]
 80097c2:	e7f4      	b.n	80097ae <f_write+0x86>
 80097c4:	1c43      	adds	r3, r0, #1
 80097c6:	d101      	bne.n	80097cc <f_write+0xa4>
 80097c8:	2501      	movs	r5, #1
 80097ca:	e7f9      	b.n	80097c0 <f_write+0x98>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80097cc:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80097ce:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80097d0:	b903      	cbnz	r3, 80097d4 <f_write+0xac>
 80097d2:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80097d4:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	da0c      	bge.n	80097f6 <f_write+0xce>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80097dc:	9803      	ldr	r0, [sp, #12]
 80097de:	6a22      	ldr	r2, [r4, #32]
 80097e0:	9900      	ldr	r1, [sp, #0]
 80097e2:	7840      	ldrb	r0, [r0, #1]
 80097e4:	2301      	movs	r3, #1
 80097e6:	f7fe ffa1 	bl	800872c <disk_write>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d1ec      	bne.n	80097c8 <f_write+0xa0>
				fp->flag &= (BYTE)~FA_DIRTY;
 80097ee:	7d23      	ldrb	r3, [r4, #20]
 80097f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f4:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80097f6:	f8dd a00c 	ldr.w	sl, [sp, #12]
 80097fa:	69e1      	ldr	r1, [r4, #28]
 80097fc:	4650      	mov	r0, sl
 80097fe:	f7ff f849 	bl	8008894 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009802:	2800      	cmp	r0, #0
 8009804:	d0db      	beq.n	80097be <f_write+0x96>
			sect += csect;
 8009806:	9b01      	ldr	r3, [sp, #4]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009808:	f8ba 700c 	ldrh.w	r7, [sl, #12]
 800980c:	fbb8 f7f7 	udiv	r7, r8, r7
			sect += csect;
 8009810:	181e      	adds	r6, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009812:	2f00      	cmp	r7, #0
 8009814:	d034      	beq.n	8009880 <f_write+0x158>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009816:	9a01      	ldr	r2, [sp, #4]
 8009818:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800981c:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009820:	443a      	add	r2, r7
 8009822:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 8009824:	bf84      	itt	hi
 8009826:	9a01      	ldrhi	r2, [sp, #4]
 8009828:	1a9f      	subhi	r7, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800982a:	463b      	mov	r3, r7
 800982c:	4632      	mov	r2, r6
 800982e:	4649      	mov	r1, r9
 8009830:	f7fe ff7c 	bl	800872c <disk_write>
 8009834:	2800      	cmp	r0, #0
 8009836:	d1c7      	bne.n	80097c8 <f_write+0xa0>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009838:	6a21      	ldr	r1, [r4, #32]
 800983a:	1b89      	subs	r1, r1, r6
 800983c:	428f      	cmp	r7, r1
 800983e:	d90b      	bls.n	8009858 <f_write+0x130>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009840:	9b03      	ldr	r3, [sp, #12]
 8009842:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 8009844:	b122      	cbz	r2, 8009850 <f_write+0x128>
 8009846:	fb02 9101 	mla	r1, r2, r1, r9
 800984a:	9800      	ldr	r0, [sp, #0]
 800984c:	f7ff f874 	bl	8008938 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009850:	7d23      	ldrb	r3, [r4, #20]
 8009852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009856:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009858:	9b03      	ldr	r3, [sp, #12]
 800985a:	899b      	ldrh	r3, [r3, #12]
 800985c:	435f      	muls	r7, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800985e:	69a3      	ldr	r3, [r4, #24]
 8009860:	68e2      	ldr	r2, [r4, #12]
 8009862:	443b      	add	r3, r7
 8009864:	61a3      	str	r3, [r4, #24]
 8009866:	429a      	cmp	r2, r3
 8009868:	bf2c      	ite	cs
 800986a:	60e2      	strcs	r2, [r4, #12]
 800986c:	60e3      	strcc	r3, [r4, #12]
 800986e:	f8db 3000 	ldr.w	r3, [fp]
 8009872:	443b      	add	r3, r7
 8009874:	44b9      	add	r9, r7
 8009876:	f8cb 3000 	str.w	r3, [fp]
 800987a:	eba8 0807 	sub.w	r8, r8, r7
 800987e:	e772      	b.n	8009766 <f_write+0x3e>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009880:	6a23      	ldr	r3, [r4, #32]
 8009882:	429e      	cmp	r6, r3
 8009884:	d00c      	beq.n	80098a0 <f_write+0x178>
 8009886:	69a2      	ldr	r2, [r4, #24]
 8009888:	68e3      	ldr	r3, [r4, #12]
 800988a:	429a      	cmp	r2, r3
 800988c:	d208      	bcs.n	80098a0 <f_write+0x178>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800988e:	2301      	movs	r3, #1
 8009890:	4632      	mov	r2, r6
 8009892:	9900      	ldr	r1, [sp, #0]
 8009894:	f89a 0001 	ldrb.w	r0, [sl, #1]
 8009898:	f7fe ff3a 	bl	8008710 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800989c:	2800      	cmp	r0, #0
 800989e:	d193      	bne.n	80097c8 <f_write+0xa0>
			fp->sect = sect;
 80098a0:	6226      	str	r6, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80098a2:	9b03      	ldr	r3, [sp, #12]
 80098a4:	899f      	ldrh	r7, [r3, #12]
 80098a6:	69a3      	ldr	r3, [r4, #24]
 80098a8:	fbb3 f0f7 	udiv	r0, r3, r7
 80098ac:	fb07 3010 	mls	r0, r7, r0, r3
 80098b0:	1a3f      	subs	r7, r7, r0
 80098b2:	4547      	cmp	r7, r8
 80098b4:	bf28      	it	cs
 80098b6:	4647      	movcs	r7, r8
	if (cnt) {
 80098b8:	b12f      	cbz	r7, 80098c6 <f_write+0x19e>
 80098ba:	9b00      	ldr	r3, [sp, #0]
 80098bc:	463a      	mov	r2, r7
 80098be:	4649      	mov	r1, r9
 80098c0:	4418      	add	r0, r3
 80098c2:	f7ff f839 	bl	8008938 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 80098c6:	7d23      	ldrb	r3, [r4, #20]
 80098c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80098cc:	7523      	strb	r3, [r4, #20]
 80098ce:	e7c6      	b.n	800985e <f_write+0x136>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80098d0:	2507      	movs	r5, #7
 80098d2:	e76c      	b.n	80097ae <f_write+0x86>

080098d4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80098d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80098d6:	a901      	add	r1, sp, #4
{
 80098d8:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80098da:	f7ff f812 	bl	8008902 <validate>
	if (res == FR_OK) {
 80098de:	4605      	mov	r5, r0
 80098e0:	2800      	cmp	r0, #0
 80098e2:	d13a      	bne.n	800995a <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80098e4:	7d23      	ldrb	r3, [r4, #20]
 80098e6:	065a      	lsls	r2, r3, #25
 80098e8:	d537      	bpl.n	800995a <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80098ea:	061b      	lsls	r3, r3, #24
 80098ec:	d50c      	bpl.n	8009908 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80098ee:	9801      	ldr	r0, [sp, #4]
 80098f0:	6a22      	ldr	r2, [r4, #32]
 80098f2:	7840      	ldrb	r0, [r0, #1]
 80098f4:	2301      	movs	r3, #1
 80098f6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80098fa:	f7fe ff17 	bl	800872c <disk_write>
 80098fe:	bb78      	cbnz	r0, 8009960 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009900:	7d23      	ldrb	r3, [r4, #20]
 8009902:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009906:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009908:	f012 fc18 	bl	801c13c <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800990c:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800990e:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8009910:	9801      	ldr	r0, [sp, #4]
 8009912:	f7ff f8a7 	bl	8008a64 <move_window>
				if (res == FR_OK) {
 8009916:	4605      	mov	r5, r0
 8009918:	b9f8      	cbnz	r0, 800995a <f_sync+0x86>
					dir = fp->dir_ptr;
 800991a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800991c:	7af3      	ldrb	r3, [r6, #11]
 800991e:	f043 0320 	orr.w	r3, r3, #32
 8009922:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009924:	68a2      	ldr	r2, [r4, #8]
 8009926:	6820      	ldr	r0, [r4, #0]
 8009928:	4631      	mov	r1, r6
 800992a:	f7ff f81c 	bl	8008966 <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800992e:	68e1      	ldr	r1, [r4, #12]
 8009930:	f106 001c 	add.w	r0, r6, #28
 8009934:	f7fe ff1e 	bl	8008774 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009938:	4639      	mov	r1, r7
 800993a:	f106 0016 	add.w	r0, r6, #22
 800993e:	f7fe ff19 	bl	8008774 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8009942:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8009944:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8009946:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8009948:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 800994a:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800994c:	f7ff f840 	bl	80089d0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009950:	7d23      	ldrb	r3, [r4, #20]
 8009952:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8009956:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009958:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800995a:	4628      	mov	r0, r5
 800995c:	b003      	add	sp, #12
 800995e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009960:	2501      	movs	r5, #1
 8009962:	e7fa      	b.n	800995a <f_sync+0x86>

08009964 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009964:	b513      	push	{r0, r1, r4, lr}
 8009966:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009968:	f7ff ffb4 	bl	80098d4 <f_sync>
	if (res == FR_OK)
 800996c:	b948      	cbnz	r0, 8009982 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800996e:	a901      	add	r1, sp, #4
 8009970:	4620      	mov	r0, r4
 8009972:	f7fe ffc6 	bl	8008902 <validate>
		if (res == FR_OK) {
 8009976:	b920      	cbnz	r0, 8009982 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009978:	6920      	ldr	r0, [r4, #16]
 800997a:	f7fe ff73 	bl	8008864 <dec_lock>
			if (res == FR_OK)
 800997e:	b900      	cbnz	r0, 8009982 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009980:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009982:	b002      	add	sp, #8
 8009984:	bd10      	pop	{r4, pc}
	...

08009988 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009988:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800998a:	4b0f      	ldr	r3, [pc, #60]	; (80099c8 <FATFS_LinkDriverEx+0x40>)
 800998c:	7a5d      	ldrb	r5, [r3, #9]
 800998e:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8009992:	b9b5      	cbnz	r5, 80099c2 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009994:	7a5d      	ldrb	r5, [r3, #9]
 8009996:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8009998:	7a5d      	ldrb	r5, [r3, #9]
 800999a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800999e:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 80099a0:	7a58      	ldrb	r0, [r3, #9]
 80099a2:	4418      	add	r0, r3
 80099a4:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 80099a6:	7a5a      	ldrb	r2, [r3, #9]
 80099a8:	b2d2      	uxtb	r2, r2
 80099aa:	1c50      	adds	r0, r2, #1
 80099ac:	b2c0      	uxtb	r0, r0
 80099ae:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 80099b0:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 80099b2:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 80099b4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80099b6:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 80099b8:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 80099ba:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 80099bc:	70cc      	strb	r4, [r1, #3]
 80099be:	4620      	mov	r0, r4
 80099c0:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80099c2:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 80099c4:	bd30      	pop	{r4, r5, pc}
 80099c6:	bf00      	nop
 80099c8:	20001610 	.word	0x20001610

080099cc <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80099cc:	2200      	movs	r2, #0
 80099ce:	f7ff bfdb 	b.w	8009988 <FATFS_LinkDriverEx>
	...

080099d4 <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 80099d4:	4a0a      	ldr	r2, [pc, #40]	; (8009a00 <FATFS_UnLinkDriverEx+0x2c>)
 80099d6:	7a53      	ldrb	r3, [r2, #9]
 80099d8:	b17b      	cbz	r3, 80099fa <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 80099da:	7803      	ldrb	r3, [r0, #0]
 80099dc:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80099e4:	6848      	ldr	r0, [r1, #4]
 80099e6:	b140      	cbz	r0, 80099fa <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 80099e8:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 80099ea:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 80099ec:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 80099ee:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 80099f0:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 80099f2:	3b01      	subs	r3, #1
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	7253      	strb	r3, [r2, #9]
 80099f8:	4770      	bx	lr
  uint8_t ret = 1;
 80099fa:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 80099fc:	4770      	bx	lr
 80099fe:	bf00      	nop
 8009a00:	20001610 	.word	0x20001610

08009a04 <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8009a04:	2100      	movs	r1, #0
 8009a06:	f7ff bfe5 	b.w	80099d4 <FATFS_UnLinkDriverEx>
	...

08009a0c <BlueTooth_GPIO_Init>:

void BlueTooth_GPIO_Init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009a0c:	4b13      	ldr	r3, [pc, #76]	; (8009a5c <BlueTooth_GPIO_Init+0x50>)
{
 8009a0e:	b530      	push	{r4, r5, lr}
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009a10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
	/* PB8 - Res 3 (BT Vcc enable pin), PB9 - Res 4 (BT programming pin) */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a12:	4d13      	ldr	r5, [pc, #76]	; (8009a60 <BlueTooth_GPIO_Init+0x54>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009a14:	f042 0202 	orr.w	r2, r2, #2
 8009a18:	64da      	str	r2, [r3, #76]	; 0x4c
 8009a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8009a1c:	b087      	sub	sp, #28
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8009a1e:	f003 0302 	and.w	r3, r3, #2
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8009a26:	f44f 7340 	mov.w	r3, #768	; 0x300
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a2a:	2400      	movs	r4, #0
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8009a2c:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a2e:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a30:	2301      	movs	r3, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a32:	4628      	mov	r0, r5
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009a34:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a36:	9403      	str	r4, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009a38:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a3a:	f7f8 fc01 	bl	8002240 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 8009a3e:	4622      	mov	r2, r4
 8009a40:	4628      	mov	r0, r5
 8009a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009a46:	f7f8 fd71 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, BT_PROG_PIN, GPIO_PIN_RESET);
 8009a4a:	4622      	mov	r2, r4
 8009a4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a50:	4628      	mov	r0, r5
 8009a52:	f7f8 fd6b 	bl	800252c <HAL_GPIO_WritePin>
}
 8009a56:	b007      	add	sp, #28
 8009a58:	bd30      	pop	{r4, r5, pc}
 8009a5a:	bf00      	nop
 8009a5c:	40021000 	.word	0x40021000
 8009a60:	48000400 	.word	0x48000400

08009a64 <BlueTooth_On>:

void BlueTooth_On(void)
{
 8009a64:	b510      	push	{r4, lr}

	////////////////////////////////////
	HAL_UART_MspDeInit(&huart1);
 8009a66:	4c10      	ldr	r4, [pc, #64]	; (8009aa8 <BlueTooth_On+0x44>)
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f015 ff35 	bl	801f8d8 <HAL_UART_MspDeInit>
	HAL_UART_DeInit(&huart1);
 8009a6e:	4620      	mov	r0, r4
 8009a70:	f7fc fdb6 	bl	80065e0 <HAL_UART_DeInit>

	huart1.Init.BaudRate = BT_BAUD_RATE;
 8009a74:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8009a78:	4620      	mov	r0, r4
	huart1.Init.BaudRate = BT_BAUD_RATE;
 8009a7a:	6063      	str	r3, [r4, #4]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8009a7c:	f7fd f950 	bl	8006d20 <HAL_UART_Init>
 8009a80:	b118      	cbz	r0, 8009a8a <BlueTooth_On+0x26>
	{
		Error_Handler();
 8009a82:	2121      	movs	r1, #33	; 0x21
 8009a84:	4809      	ldr	r0, [pc, #36]	; (8009aac <BlueTooth_On+0x48>)
 8009a86:	f015 fd3d 	bl	801f504 <_Error_Handler>
	}

	HAL_UART_MspInit(&huart1);
 8009a8a:	4807      	ldr	r0, [pc, #28]	; (8009aa8 <BlueTooth_On+0x44>)
 8009a8c:	f015 fec6 	bl	801f81c <HAL_UART_MspInit>

	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_SET);
 8009a90:	4807      	ldr	r0, [pc, #28]	; (8009ab0 <BlueTooth_On+0x4c>)
 8009a92:	2201      	movs	r2, #1
 8009a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009a98:	f7f8 fd48 	bl	800252c <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8009a9c:	2003      	movs	r0, #3

}
 8009a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(3);
 8009aa2:	f7f7 bac3 	b.w	800102c <HAL_Delay>
 8009aa6:	bf00      	nop
 8009aa8:	20095a54 	.word	0x20095a54
 8009aac:	08024f41 	.word	0x08024f41
 8009ab0:	48000400 	.word	0x48000400

08009ab4 <BlueTooth_Off>:

void BlueTooth_Off(void)
{
 8009ab4:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
	HAL_Delay(3);
	HAL_UART_MspDeInit(&huart1);
 8009abc:	4c07      	ldr	r4, [pc, #28]	; (8009adc <BlueTooth_Off+0x28>)
	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 8009abe:	4808      	ldr	r0, [pc, #32]	; (8009ae0 <BlueTooth_Off+0x2c>)
 8009ac0:	f7f8 fd34 	bl	800252c <HAL_GPIO_WritePin>
	HAL_Delay(3);
 8009ac4:	2003      	movs	r0, #3
 8009ac6:	f7f7 fab1 	bl	800102c <HAL_Delay>
	HAL_UART_MspDeInit(&huart1);
 8009aca:	4620      	mov	r0, r4
 8009acc:	f015 ff04 	bl	801f8d8 <HAL_UART_MspDeInit>
	HAL_UART_DeInit(&huart1);
 8009ad0:	4620      	mov	r0, r4

}
 8009ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_DeInit(&huart1);
 8009ad6:	f7fc bd83 	b.w	80065e0 <HAL_UART_DeInit>
 8009ada:	bf00      	nop
 8009adc:	20095a54 	.word	0x20095a54
 8009ae0:	48000400 	.word	0x48000400

08009ae4 <BlueTooth_AT_Mode>:

void BlueTooth_AT_Mode(void)
{
 8009ae4:	b510      	push	{r4, lr}

	HAL_UART_MspDeInit(&huart1);
 8009ae6:	4c19      	ldr	r4, [pc, #100]	; (8009b4c <BlueTooth_AT_Mode+0x68>)
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f015 fef5 	bl	801f8d8 <HAL_UART_MspDeInit>
	HAL_UART_DeInit(&huart1);
 8009aee:	4620      	mov	r0, r4
 8009af0:	f7fc fd76 	bl	80065e0 <HAL_UART_DeInit>

	huart1.Init.BaudRate = 38400;
 8009af4:	f44f 4316 	mov.w	r3, #38400	; 0x9600
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8009af8:	4620      	mov	r0, r4
	huart1.Init.BaudRate = 38400;
 8009afa:	6063      	str	r3, [r4, #4]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8009afc:	f7fd f910 	bl	8006d20 <HAL_UART_Init>
 8009b00:	b118      	cbz	r0, 8009b0a <BlueTooth_AT_Mode+0x26>
	{
	_Error_Handler(__FILE__, __LINE__);
 8009b02:	213d      	movs	r1, #61	; 0x3d
 8009b04:	4812      	ldr	r0, [pc, #72]	; (8009b50 <BlueTooth_AT_Mode+0x6c>)
 8009b06:	f015 fcfd 	bl	801f504 <_Error_Handler>
	}

	HAL_UART_MspInit(&huart1);
 8009b0a:	4810      	ldr	r0, [pc, #64]	; (8009b4c <BlueTooth_AT_Mode+0x68>)
 8009b0c:	f015 fe86 	bl	801f81c <HAL_UART_MspInit>

	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 8009b10:	2200      	movs	r2, #0
 8009b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b16:	480f      	ldr	r0, [pc, #60]	; (8009b54 <BlueTooth_AT_Mode+0x70>)
 8009b18:	f7f8 fd08 	bl	800252c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8009b1c:	200a      	movs	r0, #10
 8009b1e:	f7f7 fa85 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, BT_PROG_PIN, GPIO_PIN_SET);
 8009b22:	2201      	movs	r2, #1
 8009b24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b28:	480a      	ldr	r0, [pc, #40]	; (8009b54 <BlueTooth_AT_Mode+0x70>)
 8009b2a:	f7f8 fcff 	bl	800252c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8009b2e:	200a      	movs	r0, #10
 8009b30:	f7f7 fa7c 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_SET);
 8009b34:	4807      	ldr	r0, [pc, #28]	; (8009b54 <BlueTooth_AT_Mode+0x70>)
 8009b36:	2201      	movs	r2, #1
 8009b38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b3c:	f7f8 fcf6 	bl	800252c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8009b40:	200a      	movs	r0, #10

}
 8009b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(10);
 8009b46:	f7f7 ba71 	b.w	800102c <HAL_Delay>
 8009b4a:	bf00      	nop
 8009b4c:	20095a54 	.word	0x20095a54
 8009b50:	08024f41 	.word	0x08024f41
 8009b54:	48000400 	.word	0x48000400

08009b58 <BlueTooth_Param_Init>:

void BlueTooth_Param_Init(uint32_t baud_rate, uint8_t stop_bit, uint8_t parity)
{
 8009b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b5a:	b08d      	sub	sp, #52	; 0x34
	uint8_t buf[32]={0}, *p;
 8009b5c:	ac04      	add	r4, sp, #16
{
 8009b5e:	4605      	mov	r5, r0
 8009b60:	460e      	mov	r6, r1
 8009b62:	4617      	mov	r7, r2
	uint8_t buf[32]={0}, *p;
 8009b64:	2100      	movs	r1, #0
 8009b66:	2220      	movs	r2, #32
 8009b68:	4620      	mov	r0, r4
 8009b6a:	f016 fb8a 	bl	8020282 <memset>
	char str[] = "AT+UART";
 8009b6e:	490f      	ldr	r1, [pc, #60]	; (8009bac <BlueTooth_Param_Init+0x54>)
 8009b70:	6808      	ldr	r0, [r1, #0]
 8009b72:	6849      	ldr	r1, [r1, #4]
 8009b74:	aa02      	add	r2, sp, #8
 8009b76:	c203      	stmia	r2!, {r0, r1}

	sprintf(buf, "%s=%d,%d,%d\r\n", str, baud_rate, stop_bit, parity);
 8009b78:	462b      	mov	r3, r5
 8009b7a:	aa02      	add	r2, sp, #8
 8009b7c:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8009b80:	490b      	ldr	r1, [pc, #44]	; (8009bb0 <BlueTooth_Param_Init+0x58>)
 8009b82:	4620      	mov	r0, r4
 8009b84:	f016 fb86 	bl	8020294 <sprintf>

	p = strchr(buf, '\n');
 8009b88:	210a      	movs	r1, #10
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f016 fbb5 	bl	80202fa <strchr>

	HAL_UART_Transmit(&huart1, (uint8_t *)&buf, (p - &buf[0])+1, 10);
 8009b90:	1b02      	subs	r2, r0, r4
 8009b92:	3201      	adds	r2, #1
 8009b94:	230a      	movs	r3, #10
 8009b96:	b292      	uxth	r2, r2
 8009b98:	4621      	mov	r1, r4
 8009b9a:	4806      	ldr	r0, [pc, #24]	; (8009bb4 <BlueTooth_Param_Init+0x5c>)
 8009b9c:	f7fd f835 	bl	8006c0a <HAL_UART_Transmit>
	HAL_Delay(10);
 8009ba0:	200a      	movs	r0, #10
 8009ba2:	f7f7 fa43 	bl	800102c <HAL_Delay>
//	sprintf(buf, "%s%s", str, "?");

}
 8009ba6:	b00d      	add	sp, #52	; 0x34
 8009ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009baa:	bf00      	nop
 8009bac:	08024f62 	.word	0x08024f62
 8009bb0:	08024f54 	.word	0x08024f54
 8009bb4:	20095a54 	.word	0x20095a54

08009bb8 <BlueTooth_Module_Name>:

void BlueTooth_Module_Name(char* name)
{
 8009bb8:	b530      	push	{r4, r5, lr}
 8009bba:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buf[32]={0}, *p;
 8009bbc:	ac02      	add	r4, sp, #8
{
 8009bbe:	4605      	mov	r5, r0
	uint8_t buf[32]={0}, *p;
 8009bc0:	2220      	movs	r2, #32
 8009bc2:	2100      	movs	r1, #0
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f016 fb5c 	bl	8020282 <memset>
	char str[] = "AT+NAME";
 8009bca:	490e      	ldr	r1, [pc, #56]	; (8009c04 <BlueTooth_Module_Name+0x4c>)
 8009bcc:	6808      	ldr	r0, [r1, #0]
 8009bce:	6849      	ldr	r1, [r1, #4]
 8009bd0:	466a      	mov	r2, sp
 8009bd2:	c203      	stmia	r2!, {r0, r1}

	sprintf(buf, "%s=%s\r\n", str, name);
 8009bd4:	462b      	mov	r3, r5
 8009bd6:	466a      	mov	r2, sp
 8009bd8:	490b      	ldr	r1, [pc, #44]	; (8009c08 <BlueTooth_Module_Name+0x50>)
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f016 fb5a 	bl	8020294 <sprintf>

	p = strchr(buf, '\n');
 8009be0:	210a      	movs	r1, #10
 8009be2:	4620      	mov	r0, r4
 8009be4:	f016 fb89 	bl	80202fa <strchr>

	HAL_UART_Transmit(&huart1, (uint8_t *)&buf, (p - &buf[0])+1, 10);
 8009be8:	1b02      	subs	r2, r0, r4
 8009bea:	3201      	adds	r2, #1
 8009bec:	230a      	movs	r3, #10
 8009bee:	b292      	uxth	r2, r2
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	4806      	ldr	r0, [pc, #24]	; (8009c0c <BlueTooth_Module_Name+0x54>)
 8009bf4:	f7fd f809 	bl	8006c0a <HAL_UART_Transmit>
	HAL_Delay(10);
 8009bf8:	200a      	movs	r0, #10
 8009bfa:	f7f7 fa17 	bl	800102c <HAL_Delay>
}
 8009bfe:	b00b      	add	sp, #44	; 0x2c
 8009c00:	bd30      	pop	{r4, r5, pc}
 8009c02:	bf00      	nop
 8009c04:	08024f39 	.word	0x08024f39
 8009c08:	08024f31 	.word	0x08024f31
 8009c0c:	20095a54 	.word	0x20095a54

08009c10 <BlueTooth_Set_PIN>:

void BlueTooth_Set_PIN(char* pass)
{
 8009c10:	b530      	push	{r4, r5, lr}
 8009c12:	b08d      	sub	sp, #52	; 0x34
	uint8_t buf[32]={0}, *p;
 8009c14:	ac04      	add	r4, sp, #16
{
 8009c16:	4605      	mov	r5, r0
	uint8_t buf[32]={0}, *p;
 8009c18:	2220      	movs	r2, #32
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f016 fb30 	bl	8020282 <memset>
	char str[] = "AT+PSWD";
 8009c22:	4a0f      	ldr	r2, [pc, #60]	; (8009c60 <BlueTooth_Set_PIN+0x50>)
 8009c24:	6810      	ldr	r0, [r2, #0]
 8009c26:	6851      	ldr	r1, [r2, #4]
 8009c28:	ab02      	add	r3, sp, #8
 8009c2a:	c303      	stmia	r3!, {r0, r1}

	sprintf(buf, "%s=%c%s%c\r\n", str,'"', pass,'"');
 8009c2c:	2322      	movs	r3, #34	; 0x22
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	aa02      	add	r2, sp, #8
 8009c32:	9500      	str	r5, [sp, #0]
 8009c34:	490b      	ldr	r1, [pc, #44]	; (8009c64 <BlueTooth_Set_PIN+0x54>)
 8009c36:	4620      	mov	r0, r4
 8009c38:	f016 fb2c 	bl	8020294 <sprintf>

	p = strchr(buf, '\n');
 8009c3c:	210a      	movs	r1, #10
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f016 fb5b 	bl	80202fa <strchr>

	HAL_UART_Transmit(&huart1, (uint8_t *)&buf, (p - &buf[0])+1, 10);
 8009c44:	1b02      	subs	r2, r0, r4
 8009c46:	3201      	adds	r2, #1
 8009c48:	230a      	movs	r3, #10
 8009c4a:	b292      	uxth	r2, r2
 8009c4c:	4621      	mov	r1, r4
 8009c4e:	4806      	ldr	r0, [pc, #24]	; (8009c68 <BlueTooth_Set_PIN+0x58>)
 8009c50:	f7fc ffdb 	bl	8006c0a <HAL_UART_Transmit>
	HAL_Delay(10);
 8009c54:	200a      	movs	r0, #10
 8009c56:	f7f7 f9e9 	bl	800102c <HAL_Delay>

}
 8009c5a:	b00d      	add	sp, #52	; 0x34
 8009c5c:	bd30      	pop	{r4, r5, pc}
 8009c5e:	bf00      	nop
 8009c60:	08024f76 	.word	0x08024f76
 8009c64:	08024f6a 	.word	0x08024f6a
 8009c68:	20095a54 	.word	0x20095a54

08009c6c <Bluetooth_Reset>:

void Bluetooth_Reset(void)
{
 8009c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char str[] = "AT+RESET\r\n";
 8009c6e:	4a0a      	ldr	r2, [pc, #40]	; (8009c98 <Bluetooth_Reset+0x2c>)
 8009c70:	6810      	ldr	r0, [r2, #0]
 8009c72:	6851      	ldr	r1, [r2, #4]
 8009c74:	ab01      	add	r3, sp, #4
 8009c76:	c303      	stmia	r3!, {r0, r1}
 8009c78:	8911      	ldrh	r1, [r2, #8]
 8009c7a:	7a92      	ldrb	r2, [r2, #10]
 8009c7c:	8019      	strh	r1, [r3, #0]
 8009c7e:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit(&huart1, (uint8_t *)&str, sizeof(str), 10);
 8009c80:	a901      	add	r1, sp, #4
 8009c82:	230a      	movs	r3, #10
 8009c84:	220b      	movs	r2, #11
 8009c86:	4805      	ldr	r0, [pc, #20]	; (8009c9c <Bluetooth_Reset+0x30>)
 8009c88:	f7fc ffbf 	bl	8006c0a <HAL_UART_Transmit>
	HAL_Delay(10);
 8009c8c:	200a      	movs	r0, #10
 8009c8e:	f7f7 f9cd 	bl	800102c <HAL_Delay>
}
 8009c92:	b005      	add	sp, #20
 8009c94:	f85d fb04 	ldr.w	pc, [sp], #4
 8009c98:	08024f7e 	.word	0x08024f7e
 8009c9c:	20095a54 	.word	0x20095a54

08009ca0 <BlueTooth_Module_Init>:

void BlueTooth_Module_Init(void)
{
 8009ca0:	b510      	push	{r4, lr}


	BlueTooth_GPIO_Init();
 8009ca2:	f7ff feb3 	bl	8009a0c <BlueTooth_GPIO_Init>
	BlueTooth_AT_Mode();
 8009ca6:	f7ff ff1d 	bl	8009ae4 <BlueTooth_AT_Mode>
	HAL_Delay(1000);
 8009caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009cae:	f7f7 f9bd 	bl	800102c <HAL_Delay>
	BlueTooth_Param_Init(BT_BAUD_RATE, 1, 0);
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8009cba:	f7ff ff4d 	bl	8009b58 <BlueTooth_Param_Init>
	BlueTooth_Module_Name("TKA_SPECTR");
	BlueTooth_Set_PIN("1488");
	Bluetooth_Reset();

	HAL_GPIO_WritePin(GPIOB, BT_PROG_PIN, GPIO_PIN_RESET);
 8009cbe:	4c0e      	ldr	r4, [pc, #56]	; (8009cf8 <BlueTooth_Module_Init+0x58>)
	BlueTooth_Module_Name("TKA_SPECTR");
 8009cc0:	480e      	ldr	r0, [pc, #56]	; (8009cfc <BlueTooth_Module_Init+0x5c>)
 8009cc2:	f7ff ff79 	bl	8009bb8 <BlueTooth_Module_Name>
	BlueTooth_Set_PIN("1488");
 8009cc6:	480e      	ldr	r0, [pc, #56]	; (8009d00 <BlueTooth_Module_Init+0x60>)
 8009cc8:	f7ff ffa2 	bl	8009c10 <BlueTooth_Set_PIN>
	Bluetooth_Reset();
 8009ccc:	f7ff ffce 	bl	8009c6c <Bluetooth_Reset>
	HAL_GPIO_WritePin(GPIOB, BT_PROG_PIN, GPIO_PIN_RESET);
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f7f8 fc28 	bl	800252c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009cdc:	2064      	movs	r0, #100	; 0x64
 8009cde:	f7f7 f9a5 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, BT_VCC_PIN, GPIO_PIN_RESET);
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009cea:	f7f8 fc1f 	bl	800252c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8009cee:	2064      	movs	r0, #100	; 0x64


}
 8009cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_Delay(100);
 8009cf4:	f7f7 b99a 	b.w	800102c <HAL_Delay>
 8009cf8:	48000400 	.word	0x48000400
 8009cfc:	08024f21 	.word	0x08024f21
 8009d00:	08024f2c 	.word	0x08024f2c
 8009d04:	00000000 	.word	0x00000000

08009d08 <calcNorm560>:
double M_inv[9] = { 1.07645, -0.237662, 0.161212,
					0.410964, 0.554342, 0.034694,
					-0.010954, -0.013389, 1.024343 };
					
void calcNorm560(uint16_t CCT_measure)
{
 8009d08:	b508      	push	{r3, lr}
	norm_560 = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 8009d0a:	f7f6 fc23 	bl	8000554 <__aeabi_i2d>
 8009d0e:	a316      	add	r3, pc, #88	; (adr r3, 8009d68 <calcNorm560+0x60>)
 8009d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d14:	f7f6 fc84 	bl	8000620 <__aeabi_dmul>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	a114      	add	r1, pc, #80	; (adr r1, 8009d70 <calcNorm560+0x68>)
 8009d1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d22:	f7f6 fda7 	bl	8000874 <__aeabi_ddiv>
 8009d26:	ec41 0b10 	vmov	d0, r0, r1
 8009d2a:	f019 faf1 	bl	8023310 <exp>
 8009d2e:	2200      	movs	r2, #0
 8009d30:	ec51 0b10 	vmov	r0, r1, d0
 8009d34:	4b0a      	ldr	r3, [pc, #40]	; (8009d60 <calcNorm560+0x58>)
 8009d36:	f7f6 fabf 	bl	80002b8 <__aeabi_dsub>
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	a106      	add	r1, pc, #24	; (adr r1, 8009d58 <calcNorm560+0x50>)
 8009d40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d44:	f7f6 fd96 	bl	8000874 <__aeabi_ddiv>
 8009d48:	f7f6 ff62 	bl	8000c10 <__aeabi_d2f>
 8009d4c:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <calcNorm560+0x5c>)
 8009d4e:	6018      	str	r0, [r3, #0]
 8009d50:	bd08      	pop	{r3, pc}
 8009d52:	bf00      	nop
 8009d54:	f3af 8000 	nop.w
 8009d58:	f9f35846 	.word	0xf9f35846
 8009d5c:	466ca5d1 	.word	0x466ca5d1
 8009d60:	3ff00000 	.word	0x3ff00000
 8009d64:	20090868 	.word	0x20090868
 8009d68:	05ea7ab3 	.word	0x05ea7ab3
 8009d6c:	3ea2ca5d 	.word	0x3ea2ca5d
 8009d70:	aba38759 	.word	0xaba38759
 8009d74:	3f8d7774 	.word	0x3f8d7774

08009d78 <calcSref>:
}

double ans = 0;
double calcSref(int idx, uint16_t CCT_measure)
{
 8009d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (CCT_measure < 5000)
 8009d7c:	f241 3387 	movw	r3, #4999	; 0x1387
 8009d80:	4299      	cmp	r1, r3
{
 8009d82:	460e      	mov	r6, r1
 8009d84:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8009d88:	4c3b      	ldr	r4, [pc, #236]	; (8009e78 <calcSref+0x100>)
	if (CCT_measure < 5000)
 8009d8a:	d84d      	bhi.n	8009e28 <calcSref+0xb0>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 8009d8c:	4d3b      	ldr	r5, [pc, #236]	; (8009e7c <calcSref+0x104>)
 8009d8e:	4405      	add	r5, r0
 8009d90:	6828      	ldr	r0, [r5, #0]
 8009d92:	f7f6 fbf1 	bl	8000578 <__aeabi_f2d>
 8009d96:	a332      	add	r3, pc, #200	; (adr r3, 8009e60 <calcSref+0xe8>)
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	f7f6 fc40 	bl	8000620 <__aeabi_dmul>
 8009da0:	4680      	mov	r8, r0
 8009da2:	4630      	mov	r0, r6
 8009da4:	4689      	mov	r9, r1
 8009da6:	f7f6 fbd5 	bl	8000554 <__aeabi_i2d>
 8009daa:	4602      	mov	r2, r0
 8009dac:	460b      	mov	r3, r1
 8009dae:	4640      	mov	r0, r8
 8009db0:	4649      	mov	r1, r9
 8009db2:	f7f6 fc35 	bl	8000620 <__aeabi_dmul>
 8009db6:	4602      	mov	r2, r0
 8009db8:	460b      	mov	r3, r1
 8009dba:	a12b      	add	r1, pc, #172	; (adr r1, 8009e68 <calcSref+0xf0>)
 8009dbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009dc0:	f7f6 fd58 	bl	8000874 <__aeabi_ddiv>
 8009dc4:	ec41 0b10 	vmov	d0, r0, r1
 8009dc8:	f019 faa2 	bl	8023310 <exp>
 8009dcc:	2200      	movs	r2, #0
 8009dce:	ec51 0b10 	vmov	r0, r1, d0
 8009dd2:	4b2b      	ldr	r3, [pc, #172]	; (8009e80 <calcSref+0x108>)
 8009dd4:	f7f6 fa70 	bl	80002b8 <__aeabi_dsub>
 8009dd8:	e9c4 0100 	strd	r0, r1, [r4]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009ddc:	6828      	ldr	r0, [r5, #0]
 8009dde:	f7f6 fbcb 	bl	8000578 <__aeabi_f2d>
 8009de2:	a31f      	add	r3, pc, #124	; (adr r3, 8009e60 <calcSref+0xe8>)
 8009de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de8:	f7f6 fc1a 	bl	8000620 <__aeabi_dmul>
 8009dec:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8009e70 <calcSref+0xf8>
 8009df0:	ec41 0b10 	vmov	d0, r0, r1
 8009df4:	f019 fb88 	bl	8023508 <pow>
 8009df8:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009dfc:	ec51 0b10 	vmov	r0, r1, d0
 8009e00:	f7f6 fd38 	bl	8000874 <__aeabi_ddiv>
		ans /= norm_560;
 8009e04:	4b1f      	ldr	r3, [pc, #124]	; (8009e84 <calcSref+0x10c>)
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009e06:	4606      	mov	r6, r0
		ans /= norm_560;
 8009e08:	6818      	ldr	r0, [r3, #0]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009e0a:	460f      	mov	r7, r1
		ans /= norm_560;
 8009e0c:	f7f6 fbb4 	bl	8000578 <__aeabi_f2d>
 8009e10:	4602      	mov	r2, r0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4630      	mov	r0, r6
 8009e16:	4639      	mov	r1, r7
 8009e18:	f7f6 fd2c 	bl	8000874 <__aeabi_ddiv>
	}
	else
	{
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 8009e1c:	e9c4 0100 	strd	r0, r1, [r4]
	}
	return ans;
}
 8009e20:	ed94 0b00 	vldr	d0, [r4]
 8009e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 8009e28:	4a17      	ldr	r2, [pc, #92]	; (8009e88 <calcSref+0x110>)
 8009e2a:	4b18      	ldr	r3, [pc, #96]	; (8009e8c <calcSref+0x114>)
 8009e2c:	4918      	ldr	r1, [pc, #96]	; (8009e90 <calcSref+0x118>)
 8009e2e:	4403      	add	r3, r0
 8009e30:	4401      	add	r1, r0
 8009e32:	4410      	add	r0, r2
 8009e34:	4a17      	ldr	r2, [pc, #92]	; (8009e94 <calcSref+0x11c>)
 8009e36:	edd1 6a00 	vldr	s13, [r1]
 8009e3a:	ed92 7a00 	vldr	s14, [r2]
 8009e3e:	edd0 7a00 	vldr	s15, [r0]
 8009e42:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009e46:	edd3 6a00 	vldr	s13, [r3]
 8009e4a:	4b13      	ldr	r3, [pc, #76]	; (8009e98 <calcSref+0x120>)
 8009e4c:	ed93 7a00 	vldr	s14, [r3]
 8009e50:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009e54:	ee17 0a90 	vmov	r0, s15
 8009e58:	f7f6 fb8e 	bl	8000578 <__aeabi_f2d>
 8009e5c:	e7de      	b.n	8009e1c <calcSref+0xa4>
 8009e5e:	bf00      	nop
 8009e60:	e826d695 	.word	0xe826d695
 8009e64:	3e112e0b 	.word	0x3e112e0b
 8009e68:	aba38759 	.word	0xaba38759
 8009e6c:	3f8d7774 	.word	0x3f8d7774
 8009e70:	00000000 	.word	0x00000000
 8009e74:	c0140000 	.word	0xc0140000
 8009e78:	20003638 	.word	0x20003638
 8009e7c:	20054948 	.word	0x20054948
 8009e80:	3ff00000 	.word	0x3ff00000
 8009e84:	20090868 	.word	0x20090868
 8009e88:	2004e93c 	.word	0x2004e93c
 8009e8c:	2005093c 	.word	0x2005093c
 8009e90:	2004f93c 	.word	0x2004f93c
 8009e94:	2000361c 	.word	0x2000361c
 8009e98:	20003620 	.word	0x20003620
 8009e9c:	00000000 	.word	0x00000000

08009ea0 <cqs_func>:

void cqs_func(uint16_t CCT_measure, float *Rabs)
{
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	ed2d 8b0a 	vpush	{d8-d12}
 8009ea8:	b0af      	sub	sp, #188	; 0xbc
 8009eaa:	460c      	mov	r4, r1
 8009eac:	9004      	str	r0, [sp, #16]
	double x_test = 0;	
	double y_test = 0;		
	double z_test = 0;	
	
	
	memset(CQS_S_test, 0, sizeof(CQS_S_test));
 8009eae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009eb2:	2100      	movs	r1, #0
 8009eb4:	48c4      	ldr	r0, [pc, #784]	; (800a1c8 <cqs_func+0x328>)
 8009eb6:	f016 f9e4 	bl	8020282 <memset>
	memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 8009eba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	48c2      	ldr	r0, [pc, #776]	; (800a1cc <cqs_func+0x32c>)
 8009ec2:	f016 f9de 	bl	8020282 <memset>
	
	for (uint16_t i = 0; i < 1024; i++){
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 8009ec6:	4bc2      	ldr	r3, [pc, #776]	; (800a1d0 <cqs_func+0x330>)
 8009ec8:	ed93 7a00 	vldr	s14, [r3]
 8009ecc:	4bbe      	ldr	r3, [pc, #760]	; (800a1c8 <cqs_func+0x328>)
 8009ece:	4621      	mov	r1, r4
 8009ed0:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8009ed4:	ecf1 6a01 	vldmia	r1!, {s13}
 8009ed8:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t i = 0; i < 1024; i++){
 8009edc:	428a      	cmp	r2, r1
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 8009ede:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t i = 0; i < 1024; i++){
 8009ee2:	d1f7      	bne.n	8009ed4 <cqs_func+0x34>
	}

	if (CCT_measure < 3500){
 8009ee4:	9a04      	ldr	r2, [sp, #16]
 8009ee6:	f640 53ab 	movw	r3, #3499	; 0xdab
 8009eea:	429a      	cmp	r2, r3
 8009eec:	f200 870d 	bhi.w	800ad0a <cqs_func+0xe6a>
		Mcct = (float)CCT_measure*(float)CCT_measure*(float)CCT_measure*0.000000000092672 - (float)CCT_measure*(float)CCT_measure*0.00000083959 + (float)CCT_measure*0.00255 - 1.612;
 8009ef0:	ee07 2a90 	vmov	s15, r2
 8009ef4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8009ef8:	ee68 8a08 	vmul.f32	s17, s16, s16
 8009efc:	ee68 7a28 	vmul.f32	s15, s16, s17
 8009f00:	ee17 0a90 	vmov	r0, s15
 8009f04:	f7f6 fb38 	bl	8000578 <__aeabi_f2d>
 8009f08:	a3a3      	add	r3, pc, #652	; (adr r3, 800a198 <cqs_func+0x2f8>)
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	f7f6 fb87 	bl	8000620 <__aeabi_dmul>
 8009f12:	4604      	mov	r4, r0
 8009f14:	ee18 0a90 	vmov	r0, s17
 8009f18:	460d      	mov	r5, r1
 8009f1a:	f7f6 fb2d 	bl	8000578 <__aeabi_f2d>
 8009f1e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a1a0 <cqs_func+0x300>)
 8009f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f24:	f7f6 fb7c 	bl	8000620 <__aeabi_dmul>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	460b      	mov	r3, r1
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	4629      	mov	r1, r5
 8009f30:	f7f6 f9c2 	bl	80002b8 <__aeabi_dsub>
 8009f34:	4604      	mov	r4, r0
 8009f36:	ee18 0a10 	vmov	r0, s16
 8009f3a:	460d      	mov	r5, r1
 8009f3c:	f7f6 fb1c 	bl	8000578 <__aeabi_f2d>
 8009f40:	a399      	add	r3, pc, #612	; (adr r3, 800a1a8 <cqs_func+0x308>)
 8009f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f46:	f7f6 fb6b 	bl	8000620 <__aeabi_dmul>
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4620      	mov	r0, r4
 8009f50:	4629      	mov	r1, r5
 8009f52:	f7f6 f9b3 	bl	80002bc <__adddf3>
 8009f56:	a396      	add	r3, pc, #600	; (adr r3, 800a1b0 <cqs_func+0x310>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	f7f6 f9ac 	bl	80002b8 <__aeabi_dsub>
 8009f60:	4b9c      	ldr	r3, [pc, #624]	; (800a1d4 <cqs_func+0x334>)
 8009f62:	e9c3 0100 	strd	r0, r1, [r3]
	}
	
	if (CCT_measure < 5000)
	{
		calcNorm560(CCT_measure);
 8009f66:	9804      	ldr	r0, [sp, #16]
 8009f68:	f7ff fece 	bl	8009d08 <calcNorm560>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
	}
	
	bar_CQS = 0.2;
 8009f6c:	a192      	add	r1, pc, #584	; (adr r1, 800a1b8 <cqs_func+0x318>)
 8009f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009f72:	4b99      	ldr	r3, [pc, #612]	; (800a1d8 <cqs_func+0x338>)
	GUI_Bar_Measure(85, 13, bar_CQS);
 8009f74:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800a1dc <cqs_func+0x33c>
	bar_CQS = 0.2;
 8009f78:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CQS);
 8009f7c:	210d      	movs	r1, #13
 8009f7e:	2055      	movs	r0, #85	; 0x55
 8009f80:	f009 f988 	bl	8013294 <GUI_Bar_Measure>

	memset(x_ref, 0, sizeof(x_ref));
 8009f84:	2278      	movs	r2, #120	; 0x78
 8009f86:	2100      	movs	r1, #0
 8009f88:	4895      	ldr	r0, [pc, #596]	; (800a1e0 <cqs_func+0x340>)
 8009f8a:	f016 f97a 	bl	8020282 <memset>
	memset(y_ref, 0, sizeof(y_ref));
 8009f8e:	2278      	movs	r2, #120	; 0x78
 8009f90:	2100      	movs	r1, #0
 8009f92:	4894      	ldr	r0, [pc, #592]	; (800a1e4 <cqs_func+0x344>)
 8009f94:	f016 f975 	bl	8020282 <memset>
	memset(z_ref, 0, sizeof(z_ref));
 8009f98:	2278      	movs	r2, #120	; 0x78
 8009f9a:	2100      	movs	r1, #0
 8009f9c:	4892      	ldr	r0, [pc, #584]	; (800a1e8 <cqs_func+0x348>)
 8009f9e:	f016 f970 	bl	8020282 <memset>
	double zw_test = 0;
 8009fa2:	f04f 0a00 	mov.w	sl, #0
 8009fa6:	f04f 0b00 	mov.w	fp, #0
 8009faa:	4b8d      	ldr	r3, [pc, #564]	; (800a1e0 <cqs_func+0x340>)
 8009fac:	930a      	str	r3, [sp, #40]	; 0x28
	double yw_test = 0;
 8009fae:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8009fb2:	4b8c      	ldr	r3, [pc, #560]	; (800a1e4 <cqs_func+0x344>)
 8009fb4:	9308      	str	r3, [sp, #32]
	double xw_test = 0;
 8009fb6:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
	double zw_ref = 0;
 8009fba:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
	double yw_ref = 0;
 8009fbe:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
	double xw_ref = 0;
 8009fc2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
	double k_test = 0;
 8009fc6:	e9cd ab02 	strd	sl, fp, [sp, #8]
	double k_ref = 0;
 8009fca:	e9cd ab00 	strd	sl, fp, [sp]
 8009fce:	4b86      	ldr	r3, [pc, #536]	; (800a1e8 <cqs_func+0x348>)
 8009fd0:	9306      	str	r3, [sp, #24]
		bar_CQS += 0.04;
		GUI_Bar_Measure(85, 13, bar_CQS);
		
		 x_test = 0;	
		 y_test = 0;		
		 z_test = 0;	
 8009fd2:	ec4b ab1b 	vmov	d11, sl, fp
		 y_test = 0;		
 8009fd6:	ec4b ab1a 	vmov	d10, sl, fp
	memset(z_ref, 0, sizeof(z_ref));
 8009fda:	2400      	movs	r4, #0
		bar_CQS += 0.04;
 8009fdc:	4d7e      	ldr	r5, [pc, #504]	; (800a1d8 <cqs_func+0x338>)
 8009fde:	4f83      	ldr	r7, [pc, #524]	; (800a1ec <cqs_func+0x34c>)
	
	
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 8009fe0:	4e79      	ldr	r6, [pc, #484]	; (800a1c8 <cqs_func+0x328>)
		bar_CQS += 0.04;
 8009fe2:	a377      	add	r3, pc, #476	; (adr r3, 800a1c0 <cqs_func+0x320>)
 8009fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe8:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009fec:	f7f6 f966 	bl	80002bc <__adddf3>
 8009ff0:	e9c5 0100 	strd	r0, r1, [r5]
		GUI_Bar_Measure(85, 13, bar_CQS);
 8009ff4:	f7f6 fe0c 	bl	8000c10 <__aeabi_d2f>
 8009ff8:	210d      	movs	r1, #13
 8009ffa:	ee00 0a10 	vmov	s0, r0
 8009ffe:	2055      	movs	r0, #85	; 0x55
 800a000:	f009 f948 	bl	8013294 <GUI_Bar_Measure>
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 800a004:	487a      	ldr	r0, [pc, #488]	; (800a1f0 <cqs_func+0x350>)
 800a006:	4a71      	ldr	r2, [pc, #452]	; (800a1cc <cqs_func+0x32c>)
 800a008:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a00c:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 800a010:	f004 ff1a 	bl	800ee48 <Calibration_Load_Pack>
 800a014:	4b77      	ldr	r3, [pc, #476]	; (800a1f4 <cqs_func+0x354>)
 800a016:	9320      	str	r3, [sp, #128]	; 0x80
 800a018:	4b77      	ldr	r3, [pc, #476]	; (800a1f8 <cqs_func+0x358>)
 800a01a:	931e      	str	r3, [sp, #120]	; 0x78
		 z_test = 0;	
 800a01c:	ed8d bb1a 	vstr	d11, [sp, #104]	; 0x68
 800a020:	4b76      	ldr	r3, [pc, #472]	; (800a1fc <cqs_func+0x35c>)
 800a022:	931c      	str	r3, [sp, #112]	; 0x70
		 y_test = 0;		
 800a024:	ed8d ab18 	vstr	d10, [sp, #96]	; 0x60
		 x_test = 0;	
 800a028:	ed8d ab16 	vstr	d10, [sp, #88]	; 0x58
 800a02c:	b2e3      	uxtb	r3, r4

		for (int j = 0; j < 1024; j++)
 800a02e:	2500      	movs	r5, #0
 800a030:	9326      	str	r3, [sp, #152]	; 0x98
		{
			if (i == 0)
 800a032:	2c00      	cmp	r4, #0
 800a034:	d17d      	bne.n	800a132 <cqs_func+0x292>
			{
				s_ref[j] = calcSref(j, CCT_measure);
 800a036:	9904      	ldr	r1, [sp, #16]
 800a038:	4628      	mov	r0, r5
 800a03a:	f7ff fe9d 	bl	8009d78 <calcSref>
 800a03e:	ec51 0b10 	vmov	r0, r1, d0
 800a042:	f7f6 fde5 	bl	8000c10 <__aeabi_d2f>
 800a046:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a048:	6018      	str	r0, [r3, #0]
				k_ref += s_ref[j] * Spectral_day[j];
 800a04a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
				s_ref[j] = calcSref(j, CCT_measure);
 800a04c:	ee08 0a10 	vmov	s16, r0
				k_ref += s_ref[j] * Spectral_day[j];
 800a050:	edd3 9a00 	vldr	s19, [r3]
 800a054:	ee68 7a29 	vmul.f32	s15, s16, s19
 800a058:	ee17 0a90 	vmov	r0, s15
 800a05c:	f7f6 fa8c 	bl	8000578 <__aeabi_f2d>
 800a060:	4602      	mov	r2, r0
 800a062:	4680      	mov	r8, r0
 800a064:	4689      	mov	r9, r1
 800a066:	460b      	mov	r3, r1
 800a068:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a06c:	f7f6 f926 	bl	80002bc <__adddf3>
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 800a070:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a072:	ed93 9a00 	vldr	s18, [r3]
 800a076:	ee68 7a09 	vmul.f32	s15, s16, s18
				k_ref += s_ref[j] * Spectral_day[j];
 800a07a:	e9cd 0100 	strd	r0, r1, [sp]
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 800a07e:	ee17 0a90 	vmov	r0, s15
 800a082:	f7f6 fa79 	bl	8000578 <__aeabi_f2d>
 800a086:	4602      	mov	r2, r0
 800a088:	460b      	mov	r3, r1
 800a08a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a08e:	f7f6 f915 	bl	80002bc <__adddf3>
				yw_ref += s_ref[j] * Spectral_day[j];
 800a092:	4642      	mov	r2, r8
 800a094:	464b      	mov	r3, r9
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 800a096:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
				yw_ref += s_ref[j] * Spectral_day[j];
 800a09a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a09e:	f7f6 f90d 	bl	80002bc <__adddf3>
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 800a0a2:	edd7 8a00 	vldr	s17, [r7]
 800a0a6:	ee68 7a28 	vmul.f32	s15, s16, s17
				yw_ref += s_ref[j] * Spectral_day[j];
 800a0aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 800a0ae:	ee17 0a90 	vmov	r0, s15
 800a0b2:	f7f6 fa61 	bl	8000578 <__aeabi_f2d>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a0be:	f7f6 f8fd 	bl	80002bc <__adddf3>
				k_test += CQS_S_test[j] * Spectral_day[j];
 800a0c2:	ed96 8a00 	vldr	s16, [r6]
 800a0c6:	ee69 7a88 	vmul.f32	s15, s19, s16
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 800a0ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
				k_test += CQS_S_test[j] * Spectral_day[j];
 800a0ce:	ee17 0a90 	vmov	r0, s15
 800a0d2:	f7f6 fa51 	bl	8000578 <__aeabi_f2d>
 800a0d6:	4602      	mov	r2, r0
 800a0d8:	460b      	mov	r3, r1
 800a0da:	4680      	mov	r8, r0
 800a0dc:	4689      	mov	r9, r1
 800a0de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0e2:	f7f6 f8eb 	bl	80002bc <__adddf3>
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 800a0e6:	ee69 7a08 	vmul.f32	s15, s18, s16
				k_test += CQS_S_test[j] * Spectral_day[j];
 800a0ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 800a0ee:	ee17 0a90 	vmov	r0, s15
 800a0f2:	f7f6 fa41 	bl	8000578 <__aeabi_f2d>
 800a0f6:	4602      	mov	r2, r0
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800a0fe:	f7f6 f8dd 	bl	80002bc <__adddf3>
				yw_test += CQS_S_test[j] * Spectral_day[j];
 800a102:	4642      	mov	r2, r8
 800a104:	464b      	mov	r3, r9
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 800a106:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
				yw_test += CQS_S_test[j] * Spectral_day[j];
 800a10a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800a10e:	f7f6 f8d5 	bl	80002bc <__adddf3>
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 800a112:	ee68 7a88 	vmul.f32	s15, s17, s16
				yw_test += CQS_S_test[j] * Spectral_day[j];
 800a116:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 800a11a:	ee17 0a90 	vmov	r0, s15
 800a11e:	f7f6 fa2b 	bl	8000578 <__aeabi_f2d>
 800a122:	4602      	mov	r2, r0
 800a124:	460b      	mov	r3, r1
 800a126:	4650      	mov	r0, sl
 800a128:	4659      	mov	r1, fp
 800a12a:	f7f6 f8c7 	bl	80002bc <__adddf3>
 800a12e:	4682      	mov	sl, r0
 800a130:	468b      	mov	fp, r1
			}

			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a132:	4b26      	ldr	r3, [pc, #152]	; (800a1cc <cqs_func+0x32c>)
 800a134:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800a138:	ed93 8a00 	vldr	s16, [r3]
 800a13c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a13e:	ecb3 9a01 	vldmia	r3!, {s18}
 800a142:	9320      	str	r3, [sp, #128]	; 0x80
 800a144:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a146:	ee28 9a09 	vmul.f32	s18, s16, s18
 800a14a:	ecf3 9a01 	vldmia	r3!, {s19}
 800a14e:	ee69 7a29 	vmul.f32	s15, s18, s19
 800a152:	931e      	str	r3, [sp, #120]	; 0x78
 800a154:	ee17 0a90 	vmov	r0, s15
 800a158:	f7f6 fa0e 	bl	8000578 <__aeabi_f2d>
 800a15c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	f7f6 f8ab 	bl	80002bc <__adddf3>
 800a166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a168:	e9c3 0100 	strd	r0, r1, [r3]
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a16c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800a16e:	ecf3 8a01 	vldmia	r3!, {s17}
 800a172:	ee68 8a28 	vmul.f32	s17, s16, s17
			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a176:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a17a:	ee69 7aa8 	vmul.f32	s15, s19, s17
 800a17e:	931c      	str	r3, [sp, #112]	; 0x70
 800a180:	ee17 0a90 	vmov	r0, s15
 800a184:	f7f6 f9f8 	bl	8000578 <__aeabi_f2d>
 800a188:	9b08      	ldr	r3, [sp, #32]
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	f7f6 f895 	bl	80002bc <__adddf3>
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a192:	ecf7 7a01 	vldmia	r7!, {s15}
 800a196:	e033      	b.n	800a200 <cqs_func+0x360>
 800a198:	56b31fbb 	.word	0x56b31fbb
 800a19c:	3dd97936 	.word	0x3dd97936
 800a1a0:	ef649b9b 	.word	0xef649b9b
 800a1a4:	3eac2c05 	.word	0x3eac2c05
 800a1a8:	d35a8588 	.word	0xd35a8588
 800a1ac:	3f64e3bc 	.word	0x3f64e3bc
 800a1b0:	83126e98 	.word	0x83126e98
 800a1b4:	3ff9cac0 	.word	0x3ff9cac0
 800a1b8:	9999999a 	.word	0x9999999a
 800a1bc:	3fc99999 	.word	0x3fc99999
 800a1c0:	47ae147b 	.word	0x47ae147b
 800a1c4:	3fa47ae1 	.word	0x3fa47ae1
 800a1c8:	2000261c 	.word	0x2000261c
 800a1cc:	2000161c 	.word	0x2000161c
 800a1d0:	200958fc 	.word	0x200958fc
 800a1d4:	20000188 	.word	0x20000188
 800a1d8:	200906f0 	.word	0x200906f0
 800a1dc:	3e4ccccd 	.word	0x3e4ccccd
 800a1e0:	200906f8 	.word	0x200906f8
 800a1e4:	20090888 	.word	0x20090888
 800a1e8:	200907f0 	.word	0x200907f0
 800a1ec:	2008d514 	.word	0x2008d514
 800a1f0:	0810c040 	.word	0x0810c040
 800a1f4:	2008a514 	.word	0x2008a514
 800a1f8:	20003640 	.word	0x20003640
 800a1fc:	20052940 	.word	0x20052940
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a200:	9b08      	ldr	r3, [sp, #32]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a202:	ee28 8a27 	vmul.f32	s16, s16, s15
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a206:	e9c3 0100 	strd	r0, r1, [r3]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a20a:	ee69 7a88 	vmul.f32	s15, s19, s16
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a20e:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a212:	ee17 0a90 	vmov	r0, s15
 800a216:	f7f6 f9af 	bl	8000578 <__aeabi_f2d>
 800a21a:	9b06      	ldr	r3, [sp, #24]
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f7f6 f84c 	bl	80002bc <__adddf3>
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a224:	ecf6 9a01 	vldmia	r6!, {s19}
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a228:	9b06      	ldr	r3, [sp, #24]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a22a:	ee69 7a29 	vmul.f32	s15, s18, s19
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a22e:	4680      	mov	r8, r0
 800a230:	4689      	mov	r9, r1
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a232:	ee17 0a90 	vmov	r0, s15
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a236:	e9c3 8900 	strd	r8, r9, [r3]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a23a:	f7f6 f99d 	bl	8000578 <__aeabi_f2d>
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a246:	f7f6 f839 	bl	80002bc <__adddf3>
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a24a:	ee68 7aa9 	vmul.f32	s15, s17, s19
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a24e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a252:	ee17 0a90 	vmov	r0, s15
 800a256:	f7f6 f98f 	bl	8000578 <__aeabi_f2d>
 800a25a:	4602      	mov	r2, r0
 800a25c:	460b      	mov	r3, r1
 800a25e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a262:	f7f6 f82b 	bl	80002bc <__adddf3>
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a266:	ee68 7a29 	vmul.f32	s15, s16, s19
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a26a:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a26e:	ee17 0a90 	vmov	r0, s15
 800a272:	f7f6 f981 	bl	8000578 <__aeabi_f2d>
 800a276:	4602      	mov	r2, r0
 800a278:	460b      	mov	r3, r1
 800a27a:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a27e:	f7f6 f81d 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 800a282:	3501      	adds	r5, #1
 800a284:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a288:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		for (int j = 0; j < 1024; j++)
 800a28c:	f47f aed1 	bne.w	800a032 <cqs_func+0x192>
		}
		
		memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 800a290:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a294:	2100      	movs	r1, #0
 800a296:	4874      	ldr	r0, [pc, #464]	; (800a468 <cqs_func+0x5c8>)
 800a298:	f015 fff3 	bl	8020282 <memset>
		
		if (i == 0) {
 800a29c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a29e:	b97b      	cbnz	r3, 800a2c0 <cqs_func+0x420>
			k_ref = 100 / k_ref;
 800a2a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	4971      	ldr	r1, [pc, #452]	; (800a46c <cqs_func+0x5cc>)
 800a2a8:	f7f6 fae4 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800a2ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_ref = 100 / k_ref;
 800a2b0:	e9cd 0100 	strd	r0, r1, [sp]
			k_test = 100 / k_test;
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	496d      	ldr	r1, [pc, #436]	; (800a46c <cqs_func+0x5cc>)
 800a2b8:	f7f6 fadc 	bl	8000874 <__aeabi_ddiv>
 800a2bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
		}
			
		x_ref[i] *= k_ref;
 800a2c0:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a2c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2c8:	f7f6 f9aa 	bl	8000620 <__aeabi_dmul>
 800a2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
		z_ref[i] *= k_ref;
		x_test *= k_test;
		y_test *= k_test;
		z_test *= k_test;
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a2ce:	4d68      	ldr	r5, [pc, #416]	; (800a470 <cqs_func+0x5d0>)
 800a2d0:	4f68      	ldr	r7, [pc, #416]	; (800a474 <cqs_func+0x5d4>)
		x_ref[i] *= k_ref;
 800a2d2:	e8e3 0102 	strd	r0, r1, [r3], #8
		y_ref[i] *= k_ref;
 800a2d6:	e9dd 0100 	ldrd	r0, r1, [sp]
		x_ref[i] *= k_ref;
 800a2da:	930a      	str	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
 800a2dc:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a2e0:	f7f6 f99e 	bl	8000620 <__aeabi_dmul>
 800a2e4:	9b08      	ldr	r3, [sp, #32]
 800a2e6:	e8e3 0102 	strd	r0, r1, [r3], #8
		z_ref[i] *= k_ref;
 800a2ea:	4642      	mov	r2, r8
		y_ref[i] *= k_ref;
 800a2ec:	9308      	str	r3, [sp, #32]
		z_ref[i] *= k_ref;
 800a2ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2f2:	464b      	mov	r3, r9
 800a2f4:	f7f6 f994 	bl	8000620 <__aeabi_dmul>
 800a2f8:	9b06      	ldr	r3, [sp, #24]
 800a2fa:	e8e3 0102 	strd	r0, r1, [r3], #8
		x_test *= k_test;
 800a2fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		z_ref[i] *= k_ref;
 800a302:	9306      	str	r3, [sp, #24]
		x_test *= k_test;
 800a304:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a308:	f7f6 f98a 	bl	8000620 <__aeabi_dmul>
		y_test *= k_test;
 800a30c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
		x_test *= k_test;
 800a310:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
		y_test *= k_test;
 800a314:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a318:	f7f6 f982 	bl	8000620 <__aeabi_dmul>
		z_test *= k_test;
 800a31c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
		y_test *= k_test;
 800a320:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
		z_test *= k_test;
 800a324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a328:	f7f6 f97a 	bl	8000620 <__aeabi_dmul>
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a32c:	ed95 7b00 	vldr	d7, [r5]
 800a330:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800a334:	ed95 7b02 	vldr	d7, [r5, #8]
 800a338:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800a33c:	ed95 7b04 	vldr	d7, [r5, #16]
 800a340:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
		z_test *= k_test;
 800a344:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a348:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a34c:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 800a350:	f7f6 f966 	bl	8000620 <__aeabi_dmul>
 800a354:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a358:	4680      	mov	r8, r0
 800a35a:	4689      	mov	r9, r1
 800a35c:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a360:	f7f6 f95e 	bl	8000620 <__aeabi_dmul>
 800a364:	4602      	mov	r2, r0
 800a366:	460b      	mov	r3, r1
 800a368:	4640      	mov	r0, r8
 800a36a:	4649      	mov	r1, r9
 800a36c:	f7f5 ffa6 	bl	80002bc <__adddf3>
 800a370:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a374:	4680      	mov	r8, r0
 800a376:	4689      	mov	r9, r1
 800a378:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a37c:	f7f6 f950 	bl	8000620 <__aeabi_dmul>
 800a380:	4602      	mov	r2, r0
 800a382:	460b      	mov	r3, r1
 800a384:	4640      	mov	r0, r8
 800a386:	4649      	mov	r1, r9
 800a388:	f7f5 ff98 	bl	80002bc <__adddf3>
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a38c:	ed95 7b06 	vldr	d7, [r5, #24]
 800a390:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800a394:	ed95 7b08 	vldr	d7, [r5, #32]
 800a398:	00e6      	lsls	r6, r4, #3
 800a39a:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 800a39e:	ed95 7b0a 	vldr	d7, [r5, #40]	; 0x28
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a3a2:	4437      	add	r7, r6
 800a3a4:	e9c7 0100 	strd	r0, r1, [r7]
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a3a8:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800a3ac:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a3b0:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 800a3b4:	f7f6 f934 	bl	8000620 <__aeabi_dmul>
 800a3b8:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800a3bc:	4680      	mov	r8, r0
 800a3be:	4689      	mov	r9, r1
 800a3c0:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a3c4:	f7f6 f92c 	bl	8000620 <__aeabi_dmul>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	4640      	mov	r0, r8
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	f7f5 ff74 	bl	80002bc <__adddf3>
 800a3d4:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800a3d8:	4680      	mov	r8, r0
 800a3da:	4689      	mov	r9, r1
 800a3dc:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a3e0:	f7f6 f91e 	bl	8000620 <__aeabi_dmul>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	4640      	mov	r0, r8
 800a3ea:	4649      	mov	r1, r9
 800a3ec:	f7f5 ff66 	bl	80002bc <__adddf3>
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a3f0:	ed95 7b0c 	vldr	d7, [r5, #48]	; 0x30
 800a3f4:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 800a3f8:	ed95 7b0e 	vldr	d7, [r5, #56]	; 0x38
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a3fc:	4f1e      	ldr	r7, [pc, #120]	; (800a478 <cqs_func+0x5d8>)
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a3fe:	4b1f      	ldr	r3, [pc, #124]	; (800a47c <cqs_func+0x5dc>)
 800a400:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 800a404:	ed95 7b10 	vldr	d7, [r5, #64]	; 0x40
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a408:	4437      	add	r7, r6
 800a40a:	e9c7 0100 	strd	r0, r1, [r7]
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a40e:	441e      	add	r6, r3
 800a410:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a414:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a418:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 800a41c:	f7f6 f900 	bl	8000620 <__aeabi_dmul>
 800a420:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a424:	4680      	mov	r8, r0
 800a426:	4689      	mov	r9, r1
 800a428:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a42c:	f7f6 f8f8 	bl	8000620 <__aeabi_dmul>
 800a430:	4602      	mov	r2, r0
 800a432:	460b      	mov	r3, r1
 800a434:	4640      	mov	r0, r8
 800a436:	4649      	mov	r1, r9
 800a438:	f7f5 ff40 	bl	80002bc <__adddf3>
 800a43c:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800a440:	4680      	mov	r8, r0
 800a442:	4689      	mov	r9, r1
 800a444:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a448:	f7f6 f8ea 	bl	8000620 <__aeabi_dmul>
 800a44c:	4602      	mov	r2, r0
 800a44e:	460b      	mov	r3, r1
 800a450:	4640      	mov	r0, r8
 800a452:	4649      	mov	r1, r9
 800a454:	f7f5 ff32 	bl	80002bc <__adddf3>
 800a458:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < 15; i++)
 800a45a:	2c0f      	cmp	r4, #15
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a45c:	e9c6 0100 	strd	r0, r1, [r6]
	for (uint8_t i = 0; i < 15; i++)
 800a460:	f47f adbc 	bne.w	8009fdc <cqs_func+0x13c>
 800a464:	e00e      	b.n	800a484 <cqs_func+0x5e4>
 800a466:	bf00      	nop
 800a468:	2000161c 	.word	0x2000161c
 800a46c:	40590000 	.word	0x40590000
 800a470:	200000f8 	.word	0x200000f8
 800a474:	20090778 	.word	0x20090778
 800a478:	20090900 	.word	0x20090900
 800a47c:	20090678 	.word	0x20090678
 800a480:	00000000 	.word	0x00000000
	}

	xw_ref *= k_ref;
 800a484:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a488:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a48c:	f7f6 f8c8 	bl	8000620 <__aeabi_dmul>
	yw_ref *= k_ref;
 800a490:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
	xw_ref *= k_ref;
 800a494:	e9cd 0106 	strd	r0, r1, [sp, #24]
	yw_ref *= k_ref;
 800a498:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a49c:	f7f6 f8c0 	bl	8000620 <__aeabi_dmul>
	zw_ref *= k_ref;
 800a4a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
	yw_ref *= k_ref;
 800a4a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
	zw_ref *= k_ref;
 800a4a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4ac:	f7f6 f8b8 	bl	8000620 <__aeabi_dmul>
	xw_test *= k_test;
 800a4b0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
	zw_ref *= k_ref;
 800a4b4:	e9cd 0108 	strd	r0, r1, [sp, #32]
	xw_test *= k_test;
 800a4b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4bc:	f7f6 f8b0 	bl	8000620 <__aeabi_dmul>
	yw_test *= k_test;
 800a4c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	xw_test *= k_test;
 800a4c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	yw_test *= k_test;
 800a4c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4cc:	f7f6 f8a8 	bl	8000620 <__aeabi_dmul>
	zw_test *= k_test;
 800a4d0:	4652      	mov	r2, sl
 800a4d2:	465b      	mov	r3, fp
	yw_test *= k_test;
 800a4d4:	e9cd 0100 	strd	r0, r1, [sp]
	zw_test *= k_test;
 800a4d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4dc:	f7f6 f8a0 	bl	8000620 <__aeabi_dmul>

	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a4e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	zw_test *= k_test;
 800a4e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a4e8:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a4ec:	f7f6 f898 	bl	8000620 <__aeabi_dmul>
 800a4f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	460d      	mov	r5, r1
 800a4f8:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a4fc:	f7f6 f890 	bl	8000620 <__aeabi_dmul>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	4620      	mov	r0, r4
 800a506:	4629      	mov	r1, r5
 800a508:	f7f5 fed8 	bl	80002bc <__adddf3>
 800a50c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a510:	4604      	mov	r4, r0
 800a512:	460d      	mov	r5, r1
 800a514:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a518:	f7f6 f882 	bl	8000620 <__aeabi_dmul>
 800a51c:	4602      	mov	r2, r0
 800a51e:	460b      	mov	r3, r1
 800a520:	4620      	mov	r0, r4
 800a522:	4629      	mov	r1, r5
 800a524:	f7f5 feca 	bl	80002bc <__adddf3>
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a528:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a52c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a530:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a534:	f7f6 f874 	bl	8000620 <__aeabi_dmul>
 800a538:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a53c:	4604      	mov	r4, r0
 800a53e:	460d      	mov	r5, r1
 800a540:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a544:	f7f6 f86c 	bl	8000620 <__aeabi_dmul>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4620      	mov	r0, r4
 800a54e:	4629      	mov	r1, r5
 800a550:	f7f5 feb4 	bl	80002bc <__adddf3>
 800a554:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a558:	4604      	mov	r4, r0
 800a55a:	460d      	mov	r5, r1
 800a55c:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800a560:	f7f6 f85e 	bl	8000620 <__aeabi_dmul>
 800a564:	4602      	mov	r2, r0
 800a566:	460b      	mov	r3, r1
 800a568:	4620      	mov	r0, r4
 800a56a:	4629      	mov	r1, r5
 800a56c:	f7f5 fea6 	bl	80002bc <__adddf3>
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a570:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a574:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a578:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800a57c:	f7f6 f850 	bl	8000620 <__aeabi_dmul>
 800a580:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a584:	4604      	mov	r4, r0
 800a586:	460d      	mov	r5, r1
 800a588:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800a58c:	f7f6 f848 	bl	8000620 <__aeabi_dmul>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4620      	mov	r0, r4
 800a596:	4629      	mov	r1, r5
 800a598:	f7f5 fe90 	bl	80002bc <__adddf3>
 800a59c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a5a0:	4604      	mov	r4, r0
 800a5a2:	460d      	mov	r5, r1
 800a5a4:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800a5a8:	f7f6 f83a 	bl	8000620 <__aeabi_dmul>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	f7f5 fe82 	bl	80002bc <__adddf3>
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a5b8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a5bc:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a5c0:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a5c4:	f7f6 f82c 	bl	8000620 <__aeabi_dmul>
 800a5c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5cc:	4604      	mov	r4, r0
 800a5ce:	460d      	mov	r5, r1
 800a5d0:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a5d4:	f7f6 f824 	bl	8000620 <__aeabi_dmul>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	4620      	mov	r0, r4
 800a5de:	4629      	mov	r1, r5
 800a5e0:	f7f5 fe6c 	bl	80002bc <__adddf3>
 800a5e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5e8:	4604      	mov	r4, r0
 800a5ea:	460d      	mov	r5, r1
 800a5ec:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a5f0:	f7f6 f816 	bl	8000620 <__aeabi_dmul>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	460b      	mov	r3, r1
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	f7f5 fe5e 	bl	80002bc <__adddf3>
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a600:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a604:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a608:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a60c:	f7f6 f808 	bl	8000620 <__aeabi_dmul>
 800a610:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a614:	4604      	mov	r4, r0
 800a616:	460d      	mov	r5, r1
 800a618:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a61c:	f7f6 f800 	bl	8000620 <__aeabi_dmul>
 800a620:	4602      	mov	r2, r0
 800a622:	460b      	mov	r3, r1
 800a624:	4620      	mov	r0, r4
 800a626:	4629      	mov	r1, r5
 800a628:	f7f5 fe48 	bl	80002bc <__adddf3>
 800a62c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a630:	4604      	mov	r4, r0
 800a632:	460d      	mov	r5, r1
 800a634:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800a638:	f7f5 fff2 	bl	8000620 <__aeabi_dmul>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	4620      	mov	r0, r4
 800a642:	4629      	mov	r1, r5
 800a644:	f7f5 fe3a 	bl	80002bc <__adddf3>
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a648:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a64c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a650:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800a654:	f7f5 ffe4 	bl	8000620 <__aeabi_dmul>
 800a658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a65c:	4604      	mov	r4, r0
 800a65e:	460d      	mov	r5, r1
 800a660:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800a664:	f7f5 ffdc 	bl	8000620 <__aeabi_dmul>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4620      	mov	r0, r4
 800a66e:	4629      	mov	r1, r5
 800a670:	f7f5 fe24 	bl	80002bc <__adddf3>
 800a674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a678:	4604      	mov	r4, r0
 800a67a:	460d      	mov	r5, r1
 800a67c:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800a680:	f7f5 ffce 	bl	8000620 <__aeabi_dmul>
 800a684:	4602      	mov	r2, r0
 800a686:	460b      	mov	r3, r1
 800a688:	4620      	mov	r0, r4
 800a68a:	4629      	mov	r1, r5
 800a68c:	f7f5 fe16 	bl	80002bc <__adddf3>

	float alpha = yw_test / yw_ref;
 800a690:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a694:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
	float alpha = yw_test / yw_ref;
 800a698:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a69c:	f7f6 f8ea 	bl	8000874 <__aeabi_ddiv>
 800a6a0:	f7f6 fab6 	bl	8000c10 <__aeabi_d2f>
	float delta_e_rms = 0;
	float sum_delta_e = 0;
	float sum_delta_c = 0;
 800a6a4:	ed5f 8a8a 	vldr	s17, [pc, #-552]	; 800a480 <cqs_func+0x5e0>
 800a6a8:	f8df b390 	ldr.w	fp, [pc, #912]	; 800aa3c <cqs_func+0xb9c>
	float alpha = yw_test / yw_ref;
 800a6ac:	901c      	str	r0, [sp, #112]	; 0x70
 800a6ae:	f04f 0a00 	mov.w	sl, #0
	float sum_delta_e = 0;
 800a6b2:	eef0 9a68 	vmov.f32	s19, s17
	float delta_e_rms = 0;
 800a6b6:	eeb0 aa68 	vmov.f32	s20, s17

	for (int i = 0; i < 15; i++)
	{
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a6ba:	981c      	ldr	r0, [sp, #112]	; 0x70
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;

		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a6bc:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800aa40 <cqs_func+0xba0>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];

		float y_tmp = cbrt(y_ref[i] / yw_ref);
		float L_ref = 116* y_tmp - 16;
 800a6c0:	ed9f 9ad3 	vldr	s18, [pc, #844]	; 800aa10 <cqs_func+0xb70>
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a6c4:	f7f5 ff58 	bl	8000578 <__aeabi_f2d>
 800a6c8:	4bd2      	ldr	r3, [pc, #840]	; (800aa14 <cqs_func+0xb74>)
 800a6ca:	4453      	add	r3, sl
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	460d      	mov	r5, r1
 800a6d4:	f7f5 ffa4 	bl	8000620 <__aeabi_dmul>
 800a6d8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a6dc:	f7f5 ffa0 	bl	8000620 <__aeabi_dmul>
 800a6e0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a6e4:	f7f6 f8c6 	bl	8000874 <__aeabi_ddiv>
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a6e8:	4bcb      	ldr	r3, [pc, #812]	; (800aa18 <cqs_func+0xb78>)
 800a6ea:	4453      	add	r3, sl
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	460f      	mov	r7, r1
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	4629      	mov	r1, r5
 800a6f8:	f7f5 ff92 	bl	8000620 <__aeabi_dmul>
 800a6fc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a700:	f7f5 ff8e 	bl	8000620 <__aeabi_dmul>
 800a704:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a708:	f7f6 f8b4 	bl	8000874 <__aeabi_ddiv>
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800a70c:	4bc3      	ldr	r3, [pc, #780]	; (800aa1c <cqs_func+0xb7c>)
 800a70e:	4453      	add	r3, sl
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a710:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	4620      	mov	r0, r4
 800a71a:	4629      	mov	r1, r5
 800a71c:	f7f5 ff80 	bl	8000620 <__aeabi_dmul>
 800a720:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a724:	f7f5 ff7c 	bl	8000620 <__aeabi_dmul>
 800a728:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a72c:	f7f6 f8a2 	bl	8000874 <__aeabi_ddiv>
 800a730:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800a734:	49ba      	ldr	r1, [pc, #744]	; (800aa20 <cqs_func+0xb80>)
 800a736:	4451      	add	r1, sl
 800a738:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a73c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a740:	f7f6 f898 	bl	8000874 <__aeabi_ddiv>
 800a744:	ec41 0b10 	vmov	d0, r0, r1
 800a748:	f018 fca2 	bl	8023090 <cbrt>
 800a74c:	ec51 0b10 	vmov	r0, r1, d0
 800a750:	f7f6 fa5e 	bl	8000c10 <__aeabi_d2f>
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a754:	49b3      	ldr	r1, [pc, #716]	; (800aa24 <cqs_func+0xb84>)
 800a756:	4451      	add	r1, sl
 800a758:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800a75c:	ee0a 0a90 	vmov	s21, r0
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a760:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a764:	f7f6 f886 	bl	8000874 <__aeabi_ddiv>
 800a768:	ec41 0b10 	vmov	d0, r0, r1
 800a76c:	f018 fc90 	bl	8023090 <cbrt>
 800a770:	ee1a 0a90 	vmov	r0, s21
 800a774:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800a778:	f7f5 fefe 	bl	8000578 <__aeabi_f2d>
 800a77c:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800a780:	4604      	mov	r4, r0
 800a782:	460d      	mov	r5, r1
 800a784:	4602      	mov	r2, r0
 800a786:	460b      	mov	r3, r1
 800a788:	ec51 0b10 	vmov	r0, r1, d0
 800a78c:	f7f5 fd94 	bl	80002b8 <__aeabi_dsub>
 800a790:	2200      	movs	r2, #0
 800a792:	4ba5      	ldr	r3, [pc, #660]	; (800aa28 <cqs_func+0xb88>)
 800a794:	f7f5 ff44 	bl	8000620 <__aeabi_dmul>
 800a798:	f7f6 fa3a 	bl	8000c10 <__aeabi_d2f>
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a79c:	49a3      	ldr	r1, [pc, #652]	; (800aa2c <cqs_func+0xb8c>)
 800a79e:	4451      	add	r1, sl
 800a7a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a7a4:	ee0b 0a90 	vmov	s23, r0
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a7a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7ac:	f7f6 f862 	bl	8000874 <__aeabi_ddiv>
 800a7b0:	ec41 0b10 	vmov	d0, r0, r1
 800a7b4:	f018 fc6c 	bl	8023090 <cbrt>
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	ec53 2b10 	vmov	r2, r3, d0
 800a7be:	4629      	mov	r1, r5
 800a7c0:	f7f5 fd7a 	bl	80002b8 <__aeabi_dsub>
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	4b9a      	ldr	r3, [pc, #616]	; (800aa30 <cqs_func+0xb90>)
 800a7c8:	f7f5 ff2a 	bl	8000620 <__aeabi_dmul>
 800a7cc:	f7f6 fa20 	bl	8000c10 <__aeabi_d2f>
		float L_ref = 116* y_tmp - 16;
 800a7d0:	eebb 8a00 	vmov.f32	s16, #176	; 0xc1800000 -16.0
 800a7d4:	eef0 ca48 	vmov.f32	s25, s16
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a7d8:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
		float L_ref = 116* y_tmp - 16;
 800a7dc:	eeea ca89 	vfma.f32	s25, s21, s18
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a7e0:	4639      	mov	r1, r7
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a7e2:	ee0a 0a90 	vmov	s21, r0
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f7f5 ff1a 	bl	8000620 <__aeabi_dmul>
 800a7ec:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800a7f0:	4604      	mov	r4, r0
 800a7f2:	460d      	mov	r5, r1
 800a7f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a7f8:	f7f5 ff12 	bl	8000620 <__aeabi_dmul>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4620      	mov	r0, r4
 800a802:	4629      	mov	r1, r5
 800a804:	f7f5 fd5a 	bl	80002bc <__adddf3>
 800a808:	e9d8 230a 	ldrd	r2, r3, [r8, #40]	; 0x28
 800a80c:	4604      	mov	r4, r0
 800a80e:	460d      	mov	r5, r1
 800a810:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a814:	f7f5 ff04 	bl	8000620 <__aeabi_dmul>
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	4620      	mov	r0, r4
 800a81e:	4629      	mov	r1, r5
 800a820:	f7f5 fd4c 	bl	80002bc <__adddf3>

		y_tmp = cbrt(Y_ic_test / yw_test);
 800a824:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a828:	f7f6 f824 	bl	8000874 <__aeabi_ddiv>
 800a82c:	ec41 0b10 	vmov	d0, r0, r1
 800a830:	f018 fc2e 	bl	8023090 <cbrt>
 800a834:	ec51 0b10 	vmov	r0, r1, d0
 800a838:	f7f6 f9ea 	bl	8000c10 <__aeabi_d2f>
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800a83c:	e9d8 2300 	ldrd	r2, r3, [r8]
		y_tmp = cbrt(Y_ic_test / yw_test);
 800a840:	ee0b 0a10 	vmov	s22, r0
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800a844:	4639      	mov	r1, r7
 800a846:	4630      	mov	r0, r6
 800a848:	f7f5 feea 	bl	8000620 <__aeabi_dmul>
 800a84c:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
 800a850:	4604      	mov	r4, r0
 800a852:	460d      	mov	r5, r1
 800a854:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a858:	f7f5 fee2 	bl	8000620 <__aeabi_dmul>
 800a85c:	4602      	mov	r2, r0
 800a85e:	460b      	mov	r3, r1
 800a860:	4620      	mov	r0, r4
 800a862:	4629      	mov	r1, r5
 800a864:	f7f5 fd2a 	bl	80002bc <__adddf3>
 800a868:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800a86c:	4604      	mov	r4, r0
 800a86e:	460d      	mov	r5, r1
 800a870:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a874:	f7f5 fed4 	bl	8000620 <__aeabi_dmul>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	4620      	mov	r0, r4
 800a87e:	4629      	mov	r1, r5
 800a880:	f7f5 fd1c 	bl	80002bc <__adddf3>
		float L_test = 116 * y_tmp - 16;
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800a884:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a888:	f7f5 fff4 	bl	8000874 <__aeabi_ddiv>
 800a88c:	ec41 0b10 	vmov	d0, r0, r1
 800a890:	f018 fbfe 	bl	8023090 <cbrt>
 800a894:	ee1b 0a10 	vmov	r0, s22
 800a898:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800a89c:	f7f5 fe6c 	bl	8000578 <__aeabi_f2d>
 800a8a0:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800a8a4:	4604      	mov	r4, r0
 800a8a6:	460d      	mov	r5, r1
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	ec51 0b10 	vmov	r0, r1, d0
 800a8b0:	f7f5 fd02 	bl	80002b8 <__aeabi_dsub>
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	4b5c      	ldr	r3, [pc, #368]	; (800aa28 <cqs_func+0xb88>)
 800a8b8:	f7f5 feb2 	bl	8000620 <__aeabi_dmul>
 800a8bc:	f7f6 f9a8 	bl	8000c10 <__aeabi_d2f>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800a8c0:	e9d8 230c 	ldrd	r2, r3, [r8, #48]	; 0x30
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800a8c4:	ee0c 0a10 	vmov	s24, r0
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800a8c8:	4639      	mov	r1, r7
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	f7f5 fea8 	bl	8000620 <__aeabi_dmul>
 800a8d0:	e9d8 230e 	ldrd	r2, r3, [r8, #56]	; 0x38
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	460f      	mov	r7, r1
 800a8d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a8dc:	f7f5 fea0 	bl	8000620 <__aeabi_dmul>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4630      	mov	r0, r6
 800a8e6:	4639      	mov	r1, r7
 800a8e8:	f7f5 fce8 	bl	80002bc <__adddf3>
 800a8ec:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
 800a8f0:	4606      	mov	r6, r0
 800a8f2:	460f      	mov	r7, r1
 800a8f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a8f8:	f7f5 fe92 	bl	8000620 <__aeabi_dmul>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	460b      	mov	r3, r1
 800a900:	4630      	mov	r0, r6
 800a902:	4639      	mov	r1, r7
 800a904:	f7f5 fcda 	bl	80002bc <__adddf3>
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800a908:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a90c:	f7f5 ffb2 	bl	8000874 <__aeabi_ddiv>
 800a910:	ec41 0b10 	vmov	d0, r0, r1
 800a914:	f018 fbbc 	bl	8023090 <cbrt>
 800a918:	4620      	mov	r0, r4
 800a91a:	ec53 2b10 	vmov	r2, r3, d0
 800a91e:	4629      	mov	r1, r5
 800a920:	f7f5 fcca 	bl	80002b8 <__aeabi_dsub>
 800a924:	2200      	movs	r2, #0
 800a926:	4b42      	ldr	r3, [pc, #264]	; (800aa30 <cqs_func+0xb90>)
 800a928:	f7f5 fe7a 	bl	8000620 <__aeabi_dmul>
 800a92c:	f7f6 f970 	bl	8000c10 <__aeabi_d2f>
		float L_test = 116 * y_tmp - 16;
 800a930:	eeab 8a09 	vfma.f32	s16, s22, s18
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800a934:	ee0b 0a10 	vmov	s22, r0

		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a938:	ee6b 7a0b 	vmul.f32	s15, s22, s22
		float L_test = 116 * y_tmp - 16;
 800a93c:	eeb0 9a48 	vmov.f32	s18, s16
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a940:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800a944:	ee17 0a90 	vmov	r0, s15
 800a948:	f7f5 fe16 	bl	8000578 <__aeabi_f2d>
 800a94c:	ec41 0b10 	vmov	d0, r0, r1
 800a950:	f018 ff52 	bl	80237f8 <sqrt>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a954:	ee6a 7aaa 	vmul.f32	s15, s21, s21
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a958:	ec55 4b10 	vmov	r4, r5, d0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a95c:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800a960:	ee17 0a90 	vmov	r0, s15
 800a964:	f7f5 fe08 	bl	8000578 <__aeabi_f2d>
 800a968:	ec41 0b10 	vmov	d0, r0, r1
 800a96c:	f018 ff44 	bl	80237f8 <sqrt>
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a970:	4629      	mov	r1, r5
 800a972:	4620      	mov	r0, r4
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a974:	ed8d 0b0c 	vstr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a978:	f7f6 f94a 	bl	8000c10 <__aeabi_d2f>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a97c:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a980:	ee08 0a10 	vmov	s16, r0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a984:	ec51 0b10 	vmov	r0, r1, d0
 800a988:	f7f6 f942 	bl	8000c10 <__aeabi_d2f>
		float delta_c = delta_c_test - delta_c_ref;
 800a98c:	ee07 0a90 	vmov	s15, r0

		bar_CQS = 0.9;
 800a990:	a11d      	add	r1, pc, #116	; (adr r1, 800aa08 <cqs_func+0xb68>)
 800a992:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a996:	4b27      	ldr	r3, [pc, #156]	; (800aa34 <cqs_func+0xb94>)
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a998:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800aa38 <cqs_func+0xb98>
		bar_CQS = 0.9;
 800a99c:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a9a0:	210d      	movs	r1, #13
 800a9a2:	2055      	movs	r0, #85	; 0x55
		float delta_c = delta_c_test - delta_c_ref;
 800a9a4:	ee38 8a67 	vsub.f32	s16, s16, s15
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a9a8:	f008 fc74 	bl	8013294 <GUI_Bar_Measure>
	
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800a9ac:	ee79 7a6c 	vsub.f32	s15, s18, s25
 800a9b0:	ee17 0a90 	vmov	r0, s15
 800a9b4:	f7f5 fde0 	bl	8000578 <__aeabi_f2d>
 800a9b8:	ee7c 7a6b 	vsub.f32	s15, s24, s23
 800a9bc:	4606      	mov	r6, r0
 800a9be:	ee17 0a90 	vmov	r0, s15
 800a9c2:	460f      	mov	r7, r1
 800a9c4:	f7f5 fdd8 	bl	8000578 <__aeabi_f2d>
 800a9c8:	ee7b 7a6a 	vsub.f32	s15, s22, s21
 800a9cc:	4680      	mov	r8, r0
 800a9ce:	ee17 0a90 	vmov	r0, s15
 800a9d2:	4689      	mov	r9, r1
 800a9d4:	f7f5 fdd0 	bl	8000578 <__aeabi_f2d>
 800a9d8:	4632      	mov	r2, r6
 800a9da:	4604      	mov	r4, r0
 800a9dc:	460d      	mov	r5, r1
 800a9de:	463b      	mov	r3, r7
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	4639      	mov	r1, r7
 800a9e4:	f7f5 fe1c 	bl	8000620 <__aeabi_dmul>
 800a9e8:	4642      	mov	r2, r8
 800a9ea:	4606      	mov	r6, r0
 800a9ec:	460f      	mov	r7, r1
 800a9ee:	464b      	mov	r3, r9
 800a9f0:	4640      	mov	r0, r8
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	f7f5 fe14 	bl	8000620 <__aeabi_dmul>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	460b      	mov	r3, r1
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	4639      	mov	r1, r7
 800aa00:	f7f5 fc5c 	bl	80002bc <__adddf3>
 800aa04:	e01e      	b.n	800aa44 <cqs_func+0xba4>
 800aa06:	bf00      	nop
 800aa08:	cccccccd 	.word	0xcccccccd
 800aa0c:	3feccccc 	.word	0x3feccccc
 800aa10:	42e80000 	.word	0x42e80000
 800aa14:	20090778 	.word	0x20090778
 800aa18:	20090900 	.word	0x20090900
 800aa1c:	20090678 	.word	0x20090678
 800aa20:	20090888 	.word	0x20090888
 800aa24:	200906f8 	.word	0x200906f8
 800aa28:	407f4000 	.word	0x407f4000
 800aa2c:	200907f0 	.word	0x200907f0
 800aa30:	40690000 	.word	0x40690000
 800aa34:	200906f0 	.word	0x200906f0
 800aa38:	3f666666 	.word	0x3f666666
 800aa3c:	20003623 	.word	0x20003623
 800aa40:	20000140 	.word	0x20000140
 800aa44:	4622      	mov	r2, r4
 800aa46:	4606      	mov	r6, r0
 800aa48:	460f      	mov	r7, r1
 800aa4a:	462b      	mov	r3, r5
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	4629      	mov	r1, r5
 800aa50:	f7f5 fde6 	bl	8000620 <__aeabi_dmul>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	4630      	mov	r0, r6
 800aa5a:	4639      	mov	r1, r7
 800aa5c:	f7f5 fc2e 	bl	80002bc <__adddf3>
 800aa60:	ec41 0b10 	vmov	d0, r0, r1
 800aa64:	f018 fec8 	bl	80237f8 <sqrt>
 800aa68:	ec51 0b10 	vmov	r0, r1, d0
 800aa6c:	f7f6 f8d0 	bl	8000c10 <__aeabi_d2f>
		float E_sat = delta_E_CQS;
		if (delta_c > 0)
 800aa70:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800aa74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800aa78:	ee09 0a10 	vmov	s18, r0
		if (delta_c > 0)
 800aa7c:	f340 82a4 	ble.w	800afc8 <cqs_func+0x1128>
		{
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800aa80:	ee68 7a48 	vnmul.f32	s15, s16, s16
 800aa84:	eee9 7a09 	vfma.f32	s15, s18, s18
 800aa88:	ee17 0a90 	vmov	r0, s15
 800aa8c:	f7f5 fd74 	bl	8000578 <__aeabi_f2d>
 800aa90:	ec41 0b10 	vmov	d0, r0, r1
 800aa94:	f018 feb0 	bl	80237f8 <sqrt>
 800aa98:	ec51 0b10 	vmov	r0, r1, d0
 800aa9c:	f7f6 f8b8 	bl	8000c10 <__aeabi_d2f>
			sum_delta_c += delta_c;
 800aaa0:	ee78 8a88 	vadd.f32	s17, s17, s16
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800aaa4:	ee07 0a90 	vmov	s15, r0
		}			

		delta_e_rms += (E_sat*E_sat);
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800aaa8:	ee17 0a90 	vmov	r0, s15
		delta_e_rms += (E_sat*E_sat);
 800aaac:	eea7 aaa7 	vfma.f32	s20, s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800aab0:	f7f5 fd62 	bl	8000578 <__aeabi_f2d>
 800aab4:	a3bc      	add	r3, pc, #752	; (adr r3, 800ada8 <cqs_func+0xf08>)
 800aab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaba:	f7f5 fdb1 	bl	8000620 <__aeabi_dmul>
 800aabe:	4602      	mov	r2, r0
 800aac0:	460b      	mov	r3, r1
 800aac2:	2000      	movs	r0, #0
 800aac4:	49c8      	ldr	r1, [pc, #800]	; (800ade8 <cqs_func+0xf48>)
 800aac6:	4cc9      	ldr	r4, [pc, #804]	; (800adec <cqs_func+0xf4c>)
 800aac8:	f7f5 fbf6 	bl	80002b8 <__aeabi_dsub>
 800aacc:	2200      	movs	r2, #0
 800aace:	4bc8      	ldr	r3, [pc, #800]	; (800adf0 <cqs_func+0xf50>)
 800aad0:	f7f5 fed0 	bl	8000874 <__aeabi_ddiv>
 800aad4:	ec41 0b10 	vmov	d0, r0, r1
 800aad8:	f018 fc1a 	bl	8023310 <exp>
 800aadc:	2200      	movs	r2, #0
 800aade:	4bc5      	ldr	r3, [pc, #788]	; (800adf4 <cqs_func+0xf54>)
 800aae0:	ec51 0b10 	vmov	r0, r1, d0
 800aae4:	f7f5 fbea 	bl	80002bc <__adddf3>
 800aae8:	ec41 0b10 	vmov	d0, r0, r1
 800aaec:	f018 fc8c 	bl	8023408 <log>
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	ec51 0b10 	vmov	r0, r1, d0
 800aaf6:	4bbe      	ldr	r3, [pc, #760]	; (800adf0 <cqs_func+0xf50>)
 800aaf8:	f7f5 fd92 	bl	8000620 <__aeabi_dmul>
 800aafc:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab00:	f7f5 fd8e 	bl	8000620 <__aeabi_dmul>
 800ab04:	f7f6 f884 	bl	8000c10 <__aeabi_d2f>
 800ab08:	ee07 0a90 	vmov	s15, r0
 800ab0c:	4bba      	ldr	r3, [pc, #744]	; (800adf8 <cqs_func+0xf58>)
		Q_i[i] = (uint8_t)Q_i_temp;		
 800ab0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800ab12:	6018      	str	r0, [r3, #0]
 800ab14:	f10a 0a08 	add.w	sl, sl, #8
		Q_i[i] = (uint8_t)Q_i_temp;		
 800ab18:	ee17 3a90 	vmov	r3, s15
	for (int i = 0; i < 15; i++)
 800ab1c:	f1ba 0f78 	cmp.w	sl, #120	; 0x78
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
 800ab20:	eee9 9a09 	vfma.f32	s19, s18, s18
		Q_i[i] = (uint8_t)Q_i_temp;		
 800ab24:	f80b 3f01 	strb.w	r3, [fp, #1]!
	for (int i = 0; i < 15; i++)
 800ab28:	f47f adc7 	bne.w	800a6ba <cqs_func+0x81a>
	}
	delta_e_rms /= 15;
 800ab2c:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
	delta_e_rms = sqrt(delta_e_rms);
 800ab30:	eeca 7a08 	vdiv.f32	s15, s20, s16
 800ab34:	ee17 0a90 	vmov	r0, s15
 800ab38:	f7f5 fd1e 	bl	8000578 <__aeabi_f2d>
 800ab3c:	ec41 0b10 	vmov	d0, r0, r1
 800ab40:	f018 fe5a 	bl	80237f8 <sqrt>
 800ab44:	ec51 0b10 	vmov	r0, r1, d0
 800ab48:	f7f6 f862 	bl	8000c10 <__aeabi_d2f>
	sum_delta_e /= 15;
	sum_delta_e = sqrt(sum_delta_e);
 800ab4c:	eec9 7a88 	vdiv.f32	s15, s19, s16
	delta_e_rms = sqrt(delta_e_rms);
 800ab50:	ee09 0a10 	vmov	s18, r0
	sum_delta_e = sqrt(sum_delta_e);
 800ab54:	ee17 0a90 	vmov	r0, s15
 800ab58:	f7f5 fd0e 	bl	8000578 <__aeabi_f2d>
 800ab5c:	ec41 0b10 	vmov	d0, r0, r1
 800ab60:	f018 fe4a 	bl	80237f8 <sqrt>
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800ab64:	ee19 0a10 	vmov	r0, s18
	sum_delta_e = sqrt(sum_delta_e);
 800ab68:	ec59 8b10 	vmov	r8, r9, d0
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800ab6c:	f7f5 fd04 	bl	8000578 <__aeabi_f2d>
 800ab70:	a38d      	add	r3, pc, #564	; (adr r3, 800ada8 <cqs_func+0xf08>)
 800ab72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab76:	f7f5 fd53 	bl	8000620 <__aeabi_dmul>
 800ab7a:	4602      	mov	r2, r0
 800ab7c:	460b      	mov	r3, r1
 800ab7e:	2000      	movs	r0, #0
 800ab80:	4999      	ldr	r1, [pc, #612]	; (800ade8 <cqs_func+0xf48>)
 800ab82:	f7f5 fb99 	bl	80002b8 <__aeabi_dsub>
 800ab86:	f7f6 f843 	bl	8000c10 <__aeabi_d2f>
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800ab8a:	ee06 0a90 	vmov	s13, r0
 800ab8e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800ab92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab96:	ee17 0a10 	vmov	r0, s14
 800ab9a:	f7f5 fced 	bl	8000578 <__aeabi_f2d>
 800ab9e:	ec41 0b10 	vmov	d0, r0, r1
 800aba2:	f018 fbb5 	bl	8023310 <exp>
 800aba6:	2200      	movs	r2, #0
 800aba8:	4b92      	ldr	r3, [pc, #584]	; (800adf4 <cqs_func+0xf54>)
 800abaa:	ec51 0b10 	vmov	r0, r1, d0
 800abae:	f7f5 fb85 	bl	80002bc <__adddf3>
 800abb2:	ec41 0b10 	vmov	d0, r0, r1
 800abb6:	f018 fc27 	bl	8023408 <log>

	 Qa_temp = Mcct * Qa0_100;
 800abba:	e9d4 6700 	ldrd	r6, r7, [r4]
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800abbe:	ec51 0b10 	vmov	r0, r1, d0
 800abc2:	2200      	movs	r2, #0
 800abc4:	4b8a      	ldr	r3, [pc, #552]	; (800adf0 <cqs_func+0xf50>)
 800abc6:	f7f5 fd2b 	bl	8000620 <__aeabi_dmul>
 800abca:	f7f6 f821 	bl	8000c10 <__aeabi_d2f>
	 Qa_temp = Mcct * Qa0_100;
 800abce:	f7f5 fcd3 	bl	8000578 <__aeabi_f2d>
 800abd2:	4632      	mov	r2, r6
 800abd4:	463b      	mov	r3, r7
 800abd6:	f7f5 fd23 	bl	8000620 <__aeabi_dmul>
 800abda:	f7f6 f819 	bl	8000c10 <__aeabi_d2f>
 800abde:	ee07 0a90 	vmov	s15, r0
 800abe2:	4b86      	ldr	r3, [pc, #536]	; (800adfc <cqs_func+0xf5c>)
	 Qa = (uint8_t)Qa_temp;
 800abe4:	4a86      	ldr	r2, [pc, #536]	; (800ae00 <cqs_func+0xf60>)
	 Qa_temp = Mcct * Qa0_100;
 800abe6:	6018      	str	r0, [r3, #0]
	 Qa = (uint8_t)Qa_temp;
 800abe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sum_delta_e = sqrt(sum_delta_e);
 800abec:	4649      	mov	r1, r9
	 Qa = (uint8_t)Qa_temp;
 800abee:	ee17 3a90 	vmov	r3, s15
	sum_delta_e = sqrt(sum_delta_e);
 800abf2:	4640      	mov	r0, r8
	 Qa = (uint8_t)Qa_temp;
 800abf4:	7013      	strb	r3, [r2, #0]
	sum_delta_e = sqrt(sum_delta_e);
 800abf6:	f7f6 f80b 	bl	8000c10 <__aeabi_d2f>
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800abfa:	f7f5 fcbd 	bl	8000578 <__aeabi_f2d>
 800abfe:	a36c      	add	r3, pc, #432	; (adr r3, 800adb0 <cqs_func+0xf10>)
 800ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac04:	f7f5 fd0c 	bl	8000620 <__aeabi_dmul>
 800ac08:	4602      	mov	r2, r0
 800ac0a:	460b      	mov	r3, r1
 800ac0c:	2000      	movs	r0, #0
 800ac0e:	4976      	ldr	r1, [pc, #472]	; (800ade8 <cqs_func+0xf48>)
 800ac10:	f7f5 fb52 	bl	80002b8 <__aeabi_dsub>
 800ac14:	2200      	movs	r2, #0
 800ac16:	4b76      	ldr	r3, [pc, #472]	; (800adf0 <cqs_func+0xf50>)
 800ac18:	f7f5 fe2c 	bl	8000874 <__aeabi_ddiv>
 800ac1c:	ec41 0b10 	vmov	d0, r0, r1
 800ac20:	f018 fb76 	bl	8023310 <exp>
 800ac24:	2200      	movs	r2, #0
 800ac26:	4b73      	ldr	r3, [pc, #460]	; (800adf4 <cqs_func+0xf54>)
 800ac28:	ec51 0b10 	vmov	r0, r1, d0
 800ac2c:	f7f5 fb44 	bl	80002b8 <__aeabi_dsub>
 800ac30:	ec41 0b10 	vmov	d0, r0, r1
 800ac34:	f018 fbe8 	bl	8023408 <log>
 800ac38:	2200      	movs	r2, #0
 800ac3a:	4b6d      	ldr	r3, [pc, #436]	; (800adf0 <cqs_func+0xf50>)
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	4639      	mov	r1, r7
 800ac40:	ed8d 0b00 	vstr	d0, [sp]
 800ac44:	f7f5 fcec 	bl	8000620 <__aeabi_dmul>
 800ac48:	ed9d 0b00 	vldr	d0, [sp]
 800ac4c:	ec53 2b10 	vmov	r2, r3, d0
 800ac50:	f7f5 fce6 	bl	8000620 <__aeabi_dmul>
 800ac54:	f7f5 ffdc 	bl	8000c10 <__aeabi_d2f>
 800ac58:	ee07 0a90 	vmov	s15, r0
 800ac5c:	4b69      	ldr	r3, [pc, #420]	; (800ae04 <cqs_func+0xf64>)
		Qf = (uint8_t)Qf_temp;
 800ac5e:	4a6a      	ldr	r2, [pc, #424]	; (800ae08 <cqs_func+0xf68>)
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800ac60:	6018      	str	r0, [r3, #0]
		Qf = (uint8_t)Qf_temp;
 800ac62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800ac66:	e9d4 0100 	ldrd	r0, r1, [r4]
		Qf = (uint8_t)Qf_temp;
 800ac6a:	ee17 3a90 	vmov	r3, s15
 800ac6e:	7013      	strb	r3, [r2, #0]
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800ac70:	2200      	movs	r2, #0
 800ac72:	4b5f      	ldr	r3, [pc, #380]	; (800adf0 <cqs_func+0xf50>)
 800ac74:	f7f5 fcd4 	bl	8000620 <__aeabi_dmul>
 800ac78:	eec8 7a88 	vdiv.f32	s15, s17, s16
 800ac7c:	4604      	mov	r4, r0
 800ac7e:	460d      	mov	r5, r1
 800ac80:	ee79 7a67 	vsub.f32	s15, s18, s15
 800ac84:	ee17 0a90 	vmov	r0, s15
 800ac88:	f7f5 fc76 	bl	8000578 <__aeabi_f2d>
 800ac8c:	a34a      	add	r3, pc, #296	; (adr r3, 800adb8 <cqs_func+0xf18>)
 800ac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac92:	f7f5 fcc5 	bl	8000620 <__aeabi_dmul>
 800ac96:	4602      	mov	r2, r0
 800ac98:	460b      	mov	r3, r1
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	4952      	ldr	r1, [pc, #328]	; (800ade8 <cqs_func+0xf48>)
 800ac9e:	f7f5 fb0b 	bl	80002b8 <__aeabi_dsub>
 800aca2:	2200      	movs	r2, #0
 800aca4:	4b52      	ldr	r3, [pc, #328]	; (800adf0 <cqs_func+0xf50>)
 800aca6:	f7f5 fde5 	bl	8000874 <__aeabi_ddiv>
 800acaa:	ec41 0b10 	vmov	d0, r0, r1
 800acae:	f018 fb2f 	bl	8023310 <exp>
 800acb2:	2200      	movs	r2, #0
 800acb4:	4b4f      	ldr	r3, [pc, #316]	; (800adf4 <cqs_func+0xf54>)
 800acb6:	ec51 0b10 	vmov	r0, r1, d0
 800acba:	f7f5 fafd 	bl	80002b8 <__aeabi_dsub>
 800acbe:	ec41 0b10 	vmov	d0, r0, r1
 800acc2:	f018 fba1 	bl	8023408 <log>
 800acc6:	4620      	mov	r0, r4
 800acc8:	ec53 2b10 	vmov	r2, r3, d0
 800accc:	4629      	mov	r1, r5
 800acce:	f7f5 fca7 	bl	8000620 <__aeabi_dmul>
 800acd2:	f7f5 ff9d 	bl	8000c10 <__aeabi_d2f>
 800acd6:	ee07 0a90 	vmov	s15, r0
 800acda:	4b4c      	ldr	r3, [pc, #304]	; (800ae0c <cqs_func+0xf6c>)
		Qp = (uint8_t)Qp_temp;
 800acdc:	4a4c      	ldr	r2, [pc, #304]	; (800ae10 <cqs_func+0xf70>)
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800acde:	6018      	str	r0, [r3, #0]
		Qp = (uint8_t)Qp_temp;
 800ace0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	
		bar_CQS = 1.0;
 800ace4:	4943      	ldr	r1, [pc, #268]	; (800adf4 <cqs_func+0xf54>)
		Qp = (uint8_t)Qp_temp;
 800ace6:	ee17 3a90 	vmov	r3, s15
 800acea:	7013      	strb	r3, [r2, #0]
		bar_CQS = 1.0;
 800acec:	4b49      	ldr	r3, [pc, #292]	; (800ae14 <cqs_func+0xf74>)
 800acee:	2000      	movs	r0, #0
 800acf0:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800acf4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800acf8:	210d      	movs	r1, #13
 800acfa:	2055      	movs	r0, #85	; 0x55
 800acfc:	b02f      	add	sp, #188	; 0xbc
 800acfe:	ecbd 8b0a 	vpop	{d8-d12}
 800ad02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		GUI_Bar_Measure(85, 13, bar_CQS);
 800ad06:	f008 bac5 	b.w	8013294 <GUI_Bar_Measure>
	if (CCT_measure < 5000)
 800ad0a:	9a04      	ldr	r2, [sp, #16]
 800ad0c:	f241 3387 	movw	r3, #4999	; 0x1387
 800ad10:	429a      	cmp	r2, r3
 800ad12:	f67f a928 	bls.w	8009f66 <cqs_func+0xc6>
		if (CCT_measure < 7000)
 800ad16:	9a04      	ldr	r2, [sp, #16]
 800ad18:	f641 3357 	movw	r3, #6999	; 0x1b57
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	d97b      	bls.n	800ae18 <cqs_func+0xf78>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ad20:	9804      	ldr	r0, [sp, #16]
 800ad22:	f7f5 fc07 	bl	8000534 <__aeabi_ui2d>
 800ad26:	ed9f 1b26 	vldr	d1, [pc, #152]	; 800adc0 <cqs_func+0xf20>
 800ad2a:	ec41 0b10 	vmov	d0, r0, r1
 800ad2e:	f018 fbeb 	bl	8023508 <pow>
 800ad32:	eddd 7a04 	vldr	s15, [sp, #16]
 800ad36:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800ad3a:	ed8d 0b00 	vstr	d0, [sp]
 800ad3e:	ee68 7a08 	vmul.f32	s15, s16, s16
 800ad42:	ee17 0a90 	vmov	r0, s15
 800ad46:	f7f5 fc17 	bl	8000578 <__aeabi_f2d>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	a11e      	add	r1, pc, #120	; (adr r1, 800adc8 <cqs_func+0xf28>)
 800ad50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad54:	f7f5 fd8e 	bl	8000874 <__aeabi_ddiv>
 800ad58:	ed9d 0b00 	vldr	d0, [sp]
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	ec53 2b10 	vmov	r2, r3, d0
 800ad62:	460d      	mov	r5, r1
 800ad64:	a11a      	add	r1, pc, #104	; (adr r1, 800add0 <cqs_func+0xf30>)
 800ad66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad6a:	f7f5 fd83 	bl	8000874 <__aeabi_ddiv>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4620      	mov	r0, r4
 800ad74:	4629      	mov	r1, r5
 800ad76:	f7f5 faa1 	bl	80002bc <__adddf3>
 800ad7a:	4604      	mov	r4, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800ad7c:	ee18 0a10 	vmov	r0, s16
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ad80:	460d      	mov	r5, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800ad82:	f7f5 fbf9 	bl	8000578 <__aeabi_f2d>
 800ad86:	4602      	mov	r2, r0
 800ad88:	460b      	mov	r3, r1
 800ad8a:	a113      	add	r1, pc, #76	; (adr r1, 800add8 <cqs_func+0xf38>)
 800ad8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad90:	f7f5 fd70 	bl	8000874 <__aeabi_ddiv>
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	4620      	mov	r0, r4
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	f7f5 fa8e 	bl	80002bc <__adddf3>
 800ada0:	a30f      	add	r3, pc, #60	; (adr r3, 800ade0 <cqs_func+0xf40>)
 800ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada6:	e073      	b.n	800ae90 <cqs_func+0xff0>
 800ada8:	cccccccd 	.word	0xcccccccd
 800adac:	4008cccc 	.word	0x4008cccc
 800adb0:	d70a3d71 	.word	0xd70a3d71
 800adb4:	400770a3 	.word	0x400770a3
 800adb8:	a3d70a3d 	.word	0xa3d70a3d
 800adbc:	400e3d70 	.word	0x400e3d70
 800adc0:	00000000 	.word	0x00000000
 800adc4:	40080000 	.word	0x40080000
 800adc8:	00000000 	.word	0x00000000
 800adcc:	413d04e8 	.word	0x413d04e8
 800add0:	00000001 	.word	0x00000001
 800add4:	c1dde5cf 	.word	0xc1dde5cf
 800add8:	28f5c290 	.word	0x28f5c290
 800addc:	406eef5c 	.word	0x406eef5c
 800ade0:	a3ec02f3 	.word	0xa3ec02f3
 800ade4:	3fce5753 	.word	0x3fce5753
 800ade8:	40590000 	.word	0x40590000
 800adec:	20000188 	.word	0x20000188
 800adf0:	40240000 	.word	0x40240000
 800adf4:	3ff00000 	.word	0x3ff00000
 800adf8:	20090880 	.word	0x20090880
 800adfc:	20090978 	.word	0x20090978
 800ae00:	20003633 	.word	0x20003633
 800ae04:	2009097c 	.word	0x2009097c
 800ae08:	20003634 	.word	0x20003634
 800ae0c:	20090770 	.word	0x20090770
 800ae10:	20003635 	.word	0x20003635
 800ae14:	200906f0 	.word	0x200906f0
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ae18:	eddd 7a04 	vldr	s15, [sp, #16]
 800ae1c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800ae20:	ee68 8a08 	vmul.f32	s17, s16, s16
 800ae24:	ee68 7a28 	vmul.f32	s15, s16, s17
 800ae28:	ee17 0a90 	vmov	r0, s15
 800ae2c:	f7f5 fba4 	bl	8000578 <__aeabi_f2d>
 800ae30:	4602      	mov	r2, r0
 800ae32:	460b      	mov	r3, r1
 800ae34:	a181      	add	r1, pc, #516	; (adr r1, 800b03c <cqs_func+0x119c>)
 800ae36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae3a:	f7f5 fd1b 	bl	8000874 <__aeabi_ddiv>
 800ae3e:	4604      	mov	r4, r0
 800ae40:	ee18 0a90 	vmov	r0, s17
 800ae44:	460d      	mov	r5, r1
 800ae46:	f7f5 fb97 	bl	8000578 <__aeabi_f2d>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	a17d      	add	r1, pc, #500	; (adr r1, 800b044 <cqs_func+0x11a4>)
 800ae50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae54:	f7f5 fd0e 	bl	8000874 <__aeabi_ddiv>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	460b      	mov	r3, r1
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	4629      	mov	r1, r5
 800ae60:	f7f5 fa2c 	bl	80002bc <__adddf3>
 800ae64:	4604      	mov	r4, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800ae66:	ee18 0a10 	vmov	r0, s16
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ae6a:	460d      	mov	r5, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800ae6c:	f7f5 fb84 	bl	8000578 <__aeabi_f2d>
 800ae70:	4602      	mov	r2, r0
 800ae72:	460b      	mov	r3, r1
 800ae74:	a175      	add	r1, pc, #468	; (adr r1, 800b04c <cqs_func+0x11ac>)
 800ae76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae7a:	f7f5 fcfb 	bl	8000874 <__aeabi_ddiv>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	4620      	mov	r0, r4
 800ae84:	4629      	mov	r1, r5
 800ae86:	f7f5 fa19 	bl	80002bc <__adddf3>
 800ae8a:	a372      	add	r3, pc, #456	; (adr r3, 800b054 <cqs_func+0x11b4>)
 800ae8c:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800ae90:	f7f5 fa14 	bl	80002bc <__adddf3>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ae94:	4b64      	ldr	r3, [pc, #400]	; (800b028 <cqs_func+0x1188>)
 800ae96:	e9c3 0100 	strd	r0, r1, [r3]
		yD = -3 * xD*xD + 2.87*xD - 0.275;
 800ae9a:	4b63      	ldr	r3, [pc, #396]	; (800b028 <cqs_func+0x1188>)
 800ae9c:	e9d3 4500 	ldrd	r4, r5, [r3]
 800aea0:	2200      	movs	r2, #0
 800aea2:	4b62      	ldr	r3, [pc, #392]	; (800b02c <cqs_func+0x118c>)
 800aea4:	4620      	mov	r0, r4
 800aea6:	4629      	mov	r1, r5
 800aea8:	f7f5 fbba 	bl	8000620 <__aeabi_dmul>
 800aeac:	4622      	mov	r2, r4
 800aeae:	462b      	mov	r3, r5
 800aeb0:	f7f5 fbb6 	bl	8000620 <__aeabi_dmul>
 800aeb4:	a346      	add	r3, pc, #280	; (adr r3, 800afd0 <cqs_func+0x1130>)
 800aeb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeba:	4606      	mov	r6, r0
 800aebc:	460f      	mov	r7, r1
 800aebe:	4620      	mov	r0, r4
 800aec0:	4629      	mov	r1, r5
 800aec2:	f7f5 fbad 	bl	8000620 <__aeabi_dmul>
 800aec6:	4602      	mov	r2, r0
 800aec8:	460b      	mov	r3, r1
 800aeca:	4630      	mov	r0, r6
 800aecc:	4639      	mov	r1, r7
 800aece:	f7f5 f9f5 	bl	80002bc <__adddf3>
 800aed2:	a341      	add	r3, pc, #260	; (adr r3, 800afd8 <cqs_func+0x1138>)
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f7f5 f9ee 	bl	80002b8 <__aeabi_dsub>
 800aedc:	4b54      	ldr	r3, [pc, #336]	; (800b030 <cqs_func+0x1190>)
 800aede:	4606      	mov	r6, r0
 800aee0:	460f      	mov	r7, r1
 800aee2:	e9c3 6700 	strd	r6, r7, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800aee6:	4620      	mov	r0, r4
 800aee8:	a33d      	add	r3, pc, #244	; (adr r3, 800afe0 <cqs_func+0x1140>)
 800aeea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeee:	4629      	mov	r1, r5
 800aef0:	f7f5 fb96 	bl	8000620 <__aeabi_dmul>
 800aef4:	a33c      	add	r3, pc, #240	; (adr r3, 800afe8 <cqs_func+0x1148>)
 800aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefa:	f7f5 f9df 	bl	80002bc <__adddf3>
 800aefe:	a33c      	add	r3, pc, #240	; (adr r3, 800aff0 <cqs_func+0x1150>)
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	4680      	mov	r8, r0
 800af06:	4689      	mov	r9, r1
 800af08:	4630      	mov	r0, r6
 800af0a:	4639      	mov	r1, r7
 800af0c:	f7f5 fb88 	bl	8000620 <__aeabi_dmul>
 800af10:	4602      	mov	r2, r0
 800af12:	460b      	mov	r3, r1
 800af14:	4640      	mov	r0, r8
 800af16:	4649      	mov	r1, r9
 800af18:	f7f5 f9ce 	bl	80002b8 <__aeabi_dsub>
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800af1c:	a336      	add	r3, pc, #216	; (adr r3, 800aff8 <cqs_func+0x1158>)
 800af1e:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800af22:	4680      	mov	r8, r0
 800af24:	4689      	mov	r9, r1
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800af26:	4620      	mov	r0, r4
 800af28:	4629      	mov	r1, r5
 800af2a:	f7f5 fb79 	bl	8000620 <__aeabi_dmul>
 800af2e:	4602      	mov	r2, r0
 800af30:	460b      	mov	r3, r1
 800af32:	a133      	add	r1, pc, #204	; (adr r1, 800b000 <cqs_func+0x1160>)
 800af34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af38:	f7f5 f9be 	bl	80002b8 <__aeabi_dsub>
 800af3c:	a332      	add	r3, pc, #200	; (adr r3, 800b008 <cqs_func+0x1168>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	4682      	mov	sl, r0
 800af44:	468b      	mov	fp, r1
 800af46:	4630      	mov	r0, r6
 800af48:	4639      	mov	r1, r7
 800af4a:	f7f5 fb69 	bl	8000620 <__aeabi_dmul>
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	4650      	mov	r0, sl
 800af54:	4659      	mov	r1, fp
 800af56:	f7f5 f9b1 	bl	80002bc <__adddf3>
 800af5a:	f7f5 fe59 	bl	8000c10 <__aeabi_d2f>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800af5e:	f7f5 fb0b 	bl	8000578 <__aeabi_f2d>
 800af62:	4642      	mov	r2, r8
 800af64:	464b      	mov	r3, r9
 800af66:	f7f5 fc85 	bl	8000874 <__aeabi_ddiv>
 800af6a:	f7f5 fe51 	bl	8000c10 <__aeabi_d2f>
 800af6e:	4b31      	ldr	r3, [pc, #196]	; (800b034 <cqs_func+0x1194>)
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800af70:	4629      	mov	r1, r5
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800af72:	6018      	str	r0, [r3, #0]
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800af74:	a326      	add	r3, pc, #152	; (adr r3, 800b010 <cqs_func+0x1170>)
 800af76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7a:	4620      	mov	r0, r4
 800af7c:	f7f5 fb50 	bl	8000620 <__aeabi_dmul>
 800af80:	4602      	mov	r2, r0
 800af82:	460b      	mov	r3, r1
 800af84:	a124      	add	r1, pc, #144	; (adr r1, 800b018 <cqs_func+0x1178>)
 800af86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af8a:	f7f5 f995 	bl	80002b8 <__aeabi_dsub>
 800af8e:	a324      	add	r3, pc, #144	; (adr r3, 800b020 <cqs_func+0x1180>)
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	4604      	mov	r4, r0
 800af96:	460d      	mov	r5, r1
 800af98:	4630      	mov	r0, r6
 800af9a:	4639      	mov	r1, r7
 800af9c:	f7f5 fb40 	bl	8000620 <__aeabi_dmul>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	4620      	mov	r0, r4
 800afa6:	4629      	mov	r1, r5
 800afa8:	f7f5 f988 	bl	80002bc <__adddf3>
 800afac:	f7f5 fe30 	bl	8000c10 <__aeabi_d2f>
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800afb0:	f7f5 fae2 	bl	8000578 <__aeabi_f2d>
 800afb4:	464b      	mov	r3, r9
 800afb6:	4642      	mov	r2, r8
 800afb8:	f7f5 fc5c 	bl	8000874 <__aeabi_ddiv>
 800afbc:	f7f5 fe28 	bl	8000c10 <__aeabi_d2f>
 800afc0:	4b1d      	ldr	r3, [pc, #116]	; (800b038 <cqs_func+0x1198>)
 800afc2:	6018      	str	r0, [r3, #0]
 800afc4:	f7fe bfd2 	b.w	8009f6c <cqs_func+0xcc>
		float E_sat = delta_E_CQS;
 800afc8:	ee07 0a90 	vmov	s15, r0
 800afcc:	e56c      	b.n	800aaa8 <cqs_func+0xc08>
 800afce:	bf00      	nop
 800afd0:	8f5c28f6 	.word	0x8f5c28f6
 800afd4:	4006f5c2 	.word	0x4006f5c2
 800afd8:	9999999a 	.word	0x9999999a
 800afdc:	3fd19999 	.word	0x3fd19999
 800afe0:	af4f0d84 	.word	0xaf4f0d84
 800afe4:	3fd06594 	.word	0x3fd06594
 800afe8:	9f559b3d 	.word	0x9f559b3d
 800afec:	3f98adab 	.word	0x3f98adab
 800aff0:	487fcb92 	.word	0x487fcb92
 800aff4:	3fe77dbf 	.word	0x3fe77dbf
 800aff8:	17c1bda5 	.word	0x17c1bda5
 800affc:	3ffc5326 	.word	0x3ffc5326
 800b000:	76c8b439 	.word	0x76c8b439
 800b004:	bff59fbe 	.word	0xbff59fbe
 800b008:	0aa64c30 	.word	0x0aa64c30
 800b00c:	4017a546 	.word	0x4017a546
 800b010:	205bc01a 	.word	0x205bc01a
 800b014:	403f7141 	.word	0x403f7141
 800b018:	eb851eb8 	.word	0xeb851eb8
 800b01c:	3f9eb851 	.word	0x3f9eb851
 800b020:	ee631f8a 	.word	0xee631f8a
 800b024:	403e125a 	.word	0x403e125a
 800b028:	20090878 	.word	0x20090878
 800b02c:	c0080000 	.word	0xc0080000
 800b030:	20090870 	.word	0x20090870
 800b034:	2000361c 	.word	0x2000361c
 800b038:	20003620 	.word	0x20003620
 800b03c:	dc000000 	.word	0xdc000000
 800b040:	c1f12993 	.word	0xc1f12993
 800b044:	00000000 	.word	0x00000000
 800b048:	4146a47c 	.word	0x4146a47c
 800b04c:	3d70a3d7 	.word	0x3d70a3d7
 800b050:	4058c70a 	.word	0x4058c70a
 800b054:	d594f26b 	.word	0xd594f26b
 800b058:	3fcf3d74 	.word	0x3fcf3d74

0800b05c <CQS_Axes>:
#include "CQS_graph.h"
extern uint8_t TFT_direction;


void CQS_Axes(uint8_t direction){
 800b05c:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800b05e:	bbb8      	cbnz	r0, 800b0d0 <CQS_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800b060:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b064:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800b068:	2212      	movs	r2, #18
 800b06a:	215f      	movs	r1, #95	; 0x5f
 800b06c:	2010      	movs	r0, #16
 800b06e:	9400      	str	r4, [sp, #0]
 800b070:	f011 faa5 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800b074:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800b078:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800b07c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800b080:	2010      	movs	r0, #16
 800b082:	9400      	str	r4, [sp, #0]
 800b084:	f011 fa9b 	bl	801c5be <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800b088:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800b08c:	4619      	mov	r1, r3
 800b08e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b092:	2010      	movs	r0, #16
 800b094:	9400      	str	r4, [sp, #0]
 800b096:	f011 fa35 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800b09a:	f240 1301 	movw	r3, #257	; 0x101
 800b09e:	4619      	mov	r1, r3
 800b0a0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b0a4:	2010      	movs	r0, #16
 800b0a6:	9400      	str	r4, [sp, #0]
 800b0a8:	f011 fa2c 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800b0ac:	23b5      	movs	r3, #181	; 0xb5
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b0b4:	2010      	movs	r0, #16
 800b0b6:	9400      	str	r4, [sp, #0]
 800b0b8:	f011 fa24 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800b0bc:	2369      	movs	r3, #105	; 0x69
 800b0be:	9400      	str	r4, [sp, #0]
 800b0c0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800b0c8:	f011 fa1c 	bl	801c504 <TFT_DrawLine>
		}
}
 800b0cc:	b002      	add	sp, #8
 800b0ce:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800b0d0:	2801      	cmp	r0, #1
 800b0d2:	d131      	bne.n	800b138 <CQS_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800b0d4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b0d8:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b0dc:	22ff      	movs	r2, #255	; 0xff
 800b0de:	2146      	movs	r1, #70	; 0x46
 800b0e0:	20fd      	movs	r0, #253	; 0xfd
 800b0e2:	9400      	str	r4, [sp, #0]
 800b0e4:	f011 fa6b 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800b0e8:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b0ec:	22ff      	movs	r2, #255	; 0xff
 800b0ee:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800b0f2:	2028      	movs	r0, #40	; 0x28
 800b0f4:	9400      	str	r4, [sp, #0]
 800b0f6:	f011 fa62 	bl	801c5be <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800b0fa:	22cc      	movs	r2, #204	; 0xcc
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b102:	2146      	movs	r1, #70	; 0x46
 800b104:	9400      	str	r4, [sp, #0]
 800b106:	f011 f9fd 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800b10a:	2297      	movs	r2, #151	; 0x97
 800b10c:	4610      	mov	r0, r2
 800b10e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b112:	2146      	movs	r1, #70	; 0x46
 800b114:	9400      	str	r4, [sp, #0]
 800b116:	f011 f9f5 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800b11a:	2262      	movs	r2, #98	; 0x62
 800b11c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b120:	4610      	mov	r0, r2
 800b122:	9400      	str	r4, [sp, #0]
 800b124:	2146      	movs	r1, #70	; 0x46
 800b126:	f011 f9ed 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800b12a:	9400      	str	r4, [sp, #0]
 800b12c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b130:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800b132:	2146      	movs	r1, #70	; 0x46
 800b134:	4610      	mov	r0, r2
 800b136:	e7c7      	b.n	800b0c8 <CQS_Axes+0x6c>
	}else if (direction == 0x02)
 800b138:	2802      	cmp	r0, #2
 800b13a:	d1c7      	bne.n	800b0cc <CQS_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800b13c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800b140:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b144:	2210      	movs	r2, #16
 800b146:	214a      	movs	r1, #74	; 0x4a
 800b148:	2012      	movs	r0, #18
 800b14a:	9400      	str	r4, [sp, #0]
 800b14c:	f011 fa37 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800b150:	234c      	movs	r3, #76	; 0x4c
 800b152:	22e8      	movs	r2, #232	; 0xe8
 800b154:	214a      	movs	r1, #74	; 0x4a
 800b156:	2011      	movs	r0, #17
 800b158:	9400      	str	r4, [sp, #0]
 800b15a:	f011 fa30 	bl	801c5be <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800b15e:	2244      	movs	r2, #68	; 0x44
 800b160:	4610      	mov	r0, r2
 800b162:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b166:	2146      	movs	r1, #70	; 0x46
 800b168:	9400      	str	r4, [sp, #0]
 800b16a:	f011 f9cb 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800b16e:	2279      	movs	r2, #121	; 0x79
 800b170:	4610      	mov	r0, r2
 800b172:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b176:	2146      	movs	r1, #70	; 0x46
 800b178:	9400      	str	r4, [sp, #0]
 800b17a:	f011 f9c3 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800b17e:	22ae      	movs	r2, #174	; 0xae
 800b180:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b184:	4610      	mov	r0, r2
 800b186:	9400      	str	r4, [sp, #0]
 800b188:	2146      	movs	r1, #70	; 0x46
 800b18a:	f011 f9bb 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800b18e:	9400      	str	r4, [sp, #0]
 800b190:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800b194:	22e3      	movs	r2, #227	; 0xe3
 800b196:	e7cc      	b.n	800b132 <CQS_Axes+0xd6>

0800b198 <CQS_Axes_Measure>:

void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800b198:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800b19c:	ac02      	add	r4, sp, #8
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800b19e:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800b1a0:	2300      	movs	r3, #0
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800b1a2:	4688      	mov	r8, r1
 800b1a4:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800b1a6:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d15a      	bne.n	800b264 <CQS_Axes_Measure+0xcc>
	{
		
		TFT_SetTextColor(TFT_White);
 800b1ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b1b2:	f011 fc33 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b1b6:	2063      	movs	r0, #99	; 0x63
 800b1b8:	f011 fc36 	bl	801ca28 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800b1bc:	485c      	ldr	r0, [pc, #368]	; (800b330 <CQS_Axes_Measure+0x198>)
 800b1be:	f011 fc27 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(20, 70, 'a');
 800b1c2:	2261      	movs	r2, #97	; 0x61
 800b1c4:	2146      	movs	r1, #70	; 0x46
 800b1c6:	2014      	movs	r0, #20
 800b1c8:	f011 fcec 	bl	801cba4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b1cc:	4859      	ldr	r0, [pc, #356]	; (800b334 <CQS_Axes_Measure+0x19c>)
 800b1ce:	f011 fc1f 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(5, 70-2, 'Q');
 800b1d2:	2251      	movs	r2, #81	; 0x51
 800b1d4:	2144      	movs	r1, #68	; 0x44
 800b1d6:	2005      	movs	r0, #5
 800b1d8:	f011 fce4 	bl	801cba4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qa);
 800b1dc:	4642      	mov	r2, r8
 800b1de:	4956      	ldr	r1, [pc, #344]	; (800b338 <CQS_Axes_Measure+0x1a0>)
 800b1e0:	4620      	mov	r0, r4
 800b1e2:	f015 f857 	bl	8020294 <sprintf>
		TFT_DisplayString(39, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	4622      	mov	r2, r4
 800b1ea:	2144      	movs	r1, #68	; 0x44
 800b1ec:	2027      	movs	r0, #39	; 0x27
 800b1ee:	f011 fd31 	bl	801cc54 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b1f2:	484f      	ldr	r0, [pc, #316]	; (800b330 <CQS_Axes_Measure+0x198>)
 800b1f4:	f011 fc0c 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(112, 70, 'p');
 800b1f8:	2270      	movs	r2, #112	; 0x70
 800b1fa:	4610      	mov	r0, r2
 800b1fc:	2146      	movs	r1, #70	; 0x46
 800b1fe:	f011 fcd1 	bl	801cba4 <TFT_DrawChar>

		TFT_SetFont(&Font16EN_arch_big);
 800b202:	484c      	ldr	r0, [pc, #304]	; (800b334 <CQS_Axes_Measure+0x19c>)
 800b204:	f011 fc04 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(93, 70-2, 'Q');
 800b208:	2251      	movs	r2, #81	; 0x51
 800b20a:	2144      	movs	r1, #68	; 0x44
 800b20c:	205d      	movs	r0, #93	; 0x5d
 800b20e:	f011 fcc9 	bl	801cba4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qp);
 800b212:	463a      	mov	r2, r7
 800b214:	4948      	ldr	r1, [pc, #288]	; (800b338 <CQS_Axes_Measure+0x1a0>)
 800b216:	4620      	mov	r0, r4
 800b218:	f015 f83c 	bl	8020294 <sprintf>
		TFT_DisplayString(130, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b21c:	2303      	movs	r3, #3
 800b21e:	4622      	mov	r2, r4
 800b220:	2144      	movs	r1, #68	; 0x44
 800b222:	2082      	movs	r0, #130	; 0x82
 800b224:	f011 fd16 	bl	801cc54 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b228:	4841      	ldr	r0, [pc, #260]	; (800b330 <CQS_Axes_Measure+0x198>)
 800b22a:	f011 fbf1 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(206, 70, 'f');
 800b22e:	2266      	movs	r2, #102	; 0x66
 800b230:	2146      	movs	r1, #70	; 0x46
 800b232:	20ce      	movs	r0, #206	; 0xce
 800b234:	f011 fcb6 	bl	801cba4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b238:	483e      	ldr	r0, [pc, #248]	; (800b334 <CQS_Axes_Measure+0x19c>)
 800b23a:	f011 fbe9 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(191, 70-2, 'Q');
 800b23e:	2251      	movs	r2, #81	; 0x51
 800b240:	2144      	movs	r1, #68	; 0x44
 800b242:	20bf      	movs	r0, #191	; 0xbf
 800b244:	f011 fcae 	bl	801cba4 <TFT_DrawChar>

		sprintf (buffer, "%d", Qf);
 800b248:	4632      	mov	r2, r6
 800b24a:	493b      	ldr	r1, [pc, #236]	; (800b338 <CQS_Axes_Measure+0x1a0>)
 800b24c:	4620      	mov	r0, r4
 800b24e:	f015 f821 	bl	8020294 <sprintf>
		TFT_DisplayString(230, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b252:	2303      	movs	r3, #3
 800b254:	4622      	mov	r2, r4
 800b256:	2144      	movs	r1, #68	; 0x44
 800b258:	20e6      	movs	r0, #230	; 0xe6
 800b25a:	f011 fcfb 	bl	801cc54 <TFT_DisplayString>
		
		sprintf (buffer, "%d", Qf);
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800b25e:	b002      	add	sp, #8
 800b260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b264:	4d35      	ldr	r5, [pc, #212]	; (800b33c <CQS_Axes_Measure+0x1a4>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b266:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800b268:	bf14      	ite	ne
 800b26a:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b26c:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b26e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b272:	bf18      	it	ne
 800b274:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b276:	f011 fbd1 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b27a:	2063      	movs	r0, #99	; 0x63
 800b27c:	f011 fbd4 	bl	801ca28 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800b280:	482b      	ldr	r0, [pc, #172]	; (800b330 <CQS_Axes_Measure+0x198>)
 800b282:	f011 fbc5 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800b286:	2261      	movs	r2, #97	; 0x61
 800b288:	2110      	movs	r1, #16
 800b28a:	2064      	movs	r0, #100	; 0x64
 800b28c:	f011 fc8a 	bl	801cba4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b290:	4828      	ldr	r0, [pc, #160]	; (800b334 <CQS_Axes_Measure+0x19c>)
 800b292:	f011 fbbd 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'Q');
 800b296:	2251      	movs	r2, #81	; 0x51
 800b298:	210e      	movs	r1, #14
 800b29a:	2055      	movs	r0, #85	; 0x55
 800b29c:	f011 fc82 	bl	801cba4 <TFT_DrawChar>
		sprintf (buffer, "%d", Qa);
 800b2a0:	4642      	mov	r2, r8
 800b2a2:	4925      	ldr	r1, [pc, #148]	; (800b338 <CQS_Axes_Measure+0x1a0>)
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f014 fff5 	bl	8020294 <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	4622      	mov	r2, r4
 800b2ae:	210e      	movs	r1, #14
 800b2b0:	207d      	movs	r0, #125	; 0x7d
 800b2b2:	f011 fccf 	bl	801cc54 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b2b6:	481e      	ldr	r0, [pc, #120]	; (800b330 <CQS_Axes_Measure+0x198>)
 800b2b8:	f011 fbaa 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(216, 16, 'p');
 800b2bc:	2270      	movs	r2, #112	; 0x70
 800b2be:	2110      	movs	r1, #16
 800b2c0:	20d8      	movs	r0, #216	; 0xd8
 800b2c2:	f011 fc6f 	bl	801cba4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b2c6:	481b      	ldr	r0, [pc, #108]	; (800b334 <CQS_Axes_Measure+0x19c>)
 800b2c8:	f011 fba2 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(199, 16-2, 'Q');
 800b2cc:	2251      	movs	r2, #81	; 0x51
 800b2ce:	210e      	movs	r1, #14
 800b2d0:	20c7      	movs	r0, #199	; 0xc7
 800b2d2:	f011 fc67 	bl	801cba4 <TFT_DrawChar>
		sprintf (buffer, "%d", Qp);
 800b2d6:	463a      	mov	r2, r7
 800b2d8:	4917      	ldr	r1, [pc, #92]	; (800b338 <CQS_Axes_Measure+0x1a0>)
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f014 ffda 	bl	8020294 <sprintf>
		TFT_DisplayString(252, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b2e0:	2303      	movs	r3, #3
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	210e      	movs	r1, #14
 800b2e6:	20fc      	movs	r0, #252	; 0xfc
 800b2e8:	f011 fcb4 	bl	801cc54 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b2ec:	4810      	ldr	r0, [pc, #64]	; (800b330 <CQS_Axes_Measure+0x198>)
 800b2ee:	f011 fb8f 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(340, 16-2, 'f');
 800b2f2:	2266      	movs	r2, #102	; 0x66
 800b2f4:	210e      	movs	r1, #14
 800b2f6:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800b2fa:	f011 fc53 	bl	801cba4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b2fe:	480d      	ldr	r0, [pc, #52]	; (800b334 <CQS_Axes_Measure+0x19c>)
 800b300:	f011 fb86 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(325, 16-2, 'Q');
 800b304:	2251      	movs	r2, #81	; 0x51
 800b306:	210e      	movs	r1, #14
 800b308:	f240 1045 	movw	r0, #325	; 0x145
 800b30c:	f011 fc4a 	bl	801cba4 <TFT_DrawChar>
		sprintf (buffer, "%d", Qf);
 800b310:	4632      	mov	r2, r6
 800b312:	4909      	ldr	r1, [pc, #36]	; (800b338 <CQS_Axes_Measure+0x1a0>)
 800b314:	4620      	mov	r0, r4
 800b316:	f014 ffbd 	bl	8020294 <sprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b31a:	2303      	movs	r3, #3
 800b31c:	4622      	mov	r2, r4
 800b31e:	210e      	movs	r1, #14
 800b320:	f240 106d 	movw	r0, #365	; 0x16d
 800b324:	f011 fc96 	bl	801cc54 <TFT_DisplayString>
		TFT_direction = 0x00;
 800b328:	2300      	movs	r3, #0
 800b32a:	702b      	strb	r3, [r5, #0]
}
 800b32c:	e797      	b.n	800b25e <CQS_Axes_Measure+0xc6>
 800b32e:	bf00      	nop
 800b330:	200001c0 	.word	0x200001c0
 800b334:	200001b0 	.word	0x200001b0
 800b338:	08024f89 	.word	0x08024f89
 800b33c:	200056a0 	.word	0x200056a0

0800b340 <CQS_Axes_Text>:

void CQS_Axes_Text(uint8_t direction){
 800b340:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800b342:	4604      	mov	r4, r0
 800b344:	2800      	cmp	r0, #0
 800b346:	f040 811f 	bne.w	800b588 <CQS_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800b34a:	488e      	ldr	r0, [pc, #568]	; (800b584 <CQS_Axes_Text+0x244>)
 800b34c:	f011 fb60 	bl	801ca10 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800b350:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b354:	f011 fb62 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b358:	2063      	movs	r0, #99	; 0x63
 800b35a:	f011 fb65 	bl	801ca28 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'Q');
 800b35e:	2251      	movs	r2, #81	; 0x51
 800b360:	f240 119f 	movw	r1, #415	; 0x19f
 800b364:	2018      	movs	r0, #24
 800b366:	f011 fc1d 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800b36a:	2231      	movs	r2, #49	; 0x31
 800b36c:	f240 119f 	movw	r1, #415	; 0x19f
 800b370:	201e      	movs	r0, #30
 800b372:	f011 fc17 	bl	801cba4 <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'Q');
 800b376:	2251      	movs	r2, #81	; 0x51
 800b378:	f240 119f 	movw	r1, #415	; 0x19f
 800b37c:	2028      	movs	r0, #40	; 0x28
 800b37e:	f011 fc11 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800b382:	2232      	movs	r2, #50	; 0x32
 800b384:	f240 119f 	movw	r1, #415	; 0x19f
 800b388:	202e      	movs	r0, #46	; 0x2e
 800b38a:	f011 fc0b 	bl	801cba4 <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'Q');
 800b38e:	2251      	movs	r2, #81	; 0x51
 800b390:	f240 119f 	movw	r1, #415	; 0x19f
 800b394:	2038      	movs	r0, #56	; 0x38
 800b396:	f011 fc05 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800b39a:	2233      	movs	r2, #51	; 0x33
 800b39c:	f240 119f 	movw	r1, #415	; 0x19f
 800b3a0:	203e      	movs	r0, #62	; 0x3e
 800b3a2:	f011 fbff 	bl	801cba4 <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'Q');
 800b3a6:	2251      	movs	r2, #81	; 0x51
 800b3a8:	f240 119f 	movw	r1, #415	; 0x19f
 800b3ac:	2048      	movs	r0, #72	; 0x48
 800b3ae:	f011 fbf9 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800b3b2:	2234      	movs	r2, #52	; 0x34
 800b3b4:	f240 119f 	movw	r1, #415	; 0x19f
 800b3b8:	204e      	movs	r0, #78	; 0x4e
 800b3ba:	f011 fbf3 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'Q');
 800b3be:	2251      	movs	r2, #81	; 0x51
 800b3c0:	f240 119f 	movw	r1, #415	; 0x19f
 800b3c4:	2058      	movs	r0, #88	; 0x58
 800b3c6:	f011 fbed 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800b3ca:	2235      	movs	r2, #53	; 0x35
 800b3cc:	f240 119f 	movw	r1, #415	; 0x19f
 800b3d0:	205e      	movs	r0, #94	; 0x5e
 800b3d2:	f011 fbe7 	bl	801cba4 <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'Q');
 800b3d6:	2251      	movs	r2, #81	; 0x51
 800b3d8:	f240 119f 	movw	r1, #415	; 0x19f
 800b3dc:	2068      	movs	r0, #104	; 0x68
 800b3de:	f011 fbe1 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800b3e2:	2236      	movs	r2, #54	; 0x36
 800b3e4:	f240 119f 	movw	r1, #415	; 0x19f
 800b3e8:	206e      	movs	r0, #110	; 0x6e
 800b3ea:	f011 fbdb 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'Q');
 800b3ee:	2251      	movs	r2, #81	; 0x51
 800b3f0:	f240 119f 	movw	r1, #415	; 0x19f
 800b3f4:	2078      	movs	r0, #120	; 0x78
 800b3f6:	f011 fbd5 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800b3fa:	2237      	movs	r2, #55	; 0x37
 800b3fc:	f240 119f 	movw	r1, #415	; 0x19f
 800b400:	207e      	movs	r0, #126	; 0x7e
 800b402:	f011 fbcf 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'Q');
 800b406:	2251      	movs	r2, #81	; 0x51
 800b408:	f240 119f 	movw	r1, #415	; 0x19f
 800b40c:	2088      	movs	r0, #136	; 0x88
 800b40e:	f011 fbc9 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800b412:	2238      	movs	r2, #56	; 0x38
 800b414:	f240 119f 	movw	r1, #415	; 0x19f
 800b418:	208e      	movs	r0, #142	; 0x8e
 800b41a:	f011 fbc3 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'Q');
 800b41e:	2251      	movs	r2, #81	; 0x51
 800b420:	f240 119f 	movw	r1, #415	; 0x19f
 800b424:	2098      	movs	r0, #152	; 0x98
 800b426:	f011 fbbd 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800b42a:	2239      	movs	r2, #57	; 0x39
 800b42c:	f240 119f 	movw	r1, #415	; 0x19f
 800b430:	209e      	movs	r0, #158	; 0x9e
 800b432:	f011 fbb7 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800b436:	2231      	movs	r2, #49	; 0x31
 800b438:	f240 119f 	movw	r1, #415	; 0x19f
 800b43c:	20ad      	movs	r0, #173	; 0xad
 800b43e:	f011 fbb1 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'Q');
 800b442:	2251      	movs	r2, #81	; 0x51
 800b444:	f240 119f 	movw	r1, #415	; 0x19f
 800b448:	20a8      	movs	r0, #168	; 0xa8
 800b44a:	f011 fbab 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800b44e:	2230      	movs	r2, #48	; 0x30
 800b450:	f240 119f 	movw	r1, #415	; 0x19f
 800b454:	20b1      	movs	r0, #177	; 0xb1
 800b456:	f011 fba5 	bl	801cba4 <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800b45a:	2231      	movs	r2, #49	; 0x31
 800b45c:	f240 119f 	movw	r1, #415	; 0x19f
 800b460:	20bd      	movs	r0, #189	; 0xbd
 800b462:	f011 fb9f 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'Q');
 800b466:	2251      	movs	r2, #81	; 0x51
 800b468:	f240 119f 	movw	r1, #415	; 0x19f
 800b46c:	20b8      	movs	r0, #184	; 0xb8
 800b46e:	f011 fb99 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800b472:	2231      	movs	r2, #49	; 0x31
 800b474:	f240 119f 	movw	r1, #415	; 0x19f
 800b478:	20c2      	movs	r0, #194	; 0xc2
 800b47a:	f011 fb93 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800b47e:	2231      	movs	r2, #49	; 0x31
 800b480:	f240 119f 	movw	r1, #415	; 0x19f
 800b484:	20cd      	movs	r0, #205	; 0xcd
 800b486:	f011 fb8d 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'Q');
 800b48a:	2251      	movs	r2, #81	; 0x51
 800b48c:	f240 119f 	movw	r1, #415	; 0x19f
 800b490:	20c8      	movs	r0, #200	; 0xc8
 800b492:	f011 fb87 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800b496:	2232      	movs	r2, #50	; 0x32
 800b498:	f240 119f 	movw	r1, #415	; 0x19f
 800b49c:	20d1      	movs	r0, #209	; 0xd1
 800b49e:	f011 fb81 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800b4a2:	2231      	movs	r2, #49	; 0x31
 800b4a4:	f240 119f 	movw	r1, #415	; 0x19f
 800b4a8:	20dd      	movs	r0, #221	; 0xdd
 800b4aa:	f011 fb7b 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'Q');
 800b4ae:	2251      	movs	r2, #81	; 0x51
 800b4b0:	f240 119f 	movw	r1, #415	; 0x19f
 800b4b4:	20d8      	movs	r0, #216	; 0xd8
 800b4b6:	f011 fb75 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800b4ba:	2233      	movs	r2, #51	; 0x33
 800b4bc:	f240 119f 	movw	r1, #415	; 0x19f
 800b4c0:	20e1      	movs	r0, #225	; 0xe1
 800b4c2:	f011 fb6f 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800b4c6:	2231      	movs	r2, #49	; 0x31
 800b4c8:	f240 119f 	movw	r1, #415	; 0x19f
 800b4cc:	20ed      	movs	r0, #237	; 0xed
 800b4ce:	f011 fb69 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'Q');
 800b4d2:	2251      	movs	r2, #81	; 0x51
 800b4d4:	f240 119f 	movw	r1, #415	; 0x19f
 800b4d8:	20e8      	movs	r0, #232	; 0xe8
 800b4da:	f011 fb63 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800b4de:	2234      	movs	r2, #52	; 0x34
 800b4e0:	f240 119f 	movw	r1, #415	; 0x19f
 800b4e4:	20f1      	movs	r0, #241	; 0xf1
 800b4e6:	f011 fb5d 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800b4ea:	2231      	movs	r2, #49	; 0x31
 800b4ec:	f240 119f 	movw	r1, #415	; 0x19f
 800b4f0:	20fd      	movs	r0, #253	; 0xfd
 800b4f2:	f011 fb57 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'Q');
 800b4f6:	2251      	movs	r2, #81	; 0x51
 800b4f8:	f240 119f 	movw	r1, #415	; 0x19f
 800b4fc:	20f8      	movs	r0, #248	; 0xf8
 800b4fe:	f011 fb51 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800b502:	2235      	movs	r2, #53	; 0x35
 800b504:	f240 119f 	movw	r1, #415	; 0x19f
 800b508:	f240 1001 	movw	r0, #257	; 0x101
 800b50c:	f011 fb4a 	bl	801cba4 <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800b510:	2230      	movs	r2, #48	; 0x30
 800b512:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800b516:	2005      	movs	r0, #5
 800b518:	f011 fb44 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800b51c:	2232      	movs	r2, #50	; 0x32
 800b51e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800b522:	2001      	movs	r0, #1
 800b524:	f011 fb3e 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800b528:	2235      	movs	r2, #53	; 0x35
 800b52a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800b52e:	2007      	movs	r0, #7
 800b530:	f011 fb38 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800b534:	2235      	movs	r2, #53	; 0x35
 800b536:	f240 1101 	movw	r1, #257	; 0x101
 800b53a:	2001      	movs	r0, #1
 800b53c:	f011 fb32 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800b540:	2230      	movs	r2, #48	; 0x30
 800b542:	f240 1101 	movw	r1, #257	; 0x101
 800b546:	2007      	movs	r0, #7
 800b548:	f011 fb2c 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800b54c:	2237      	movs	r2, #55	; 0x37
 800b54e:	21b5      	movs	r1, #181	; 0xb5
 800b550:	2001      	movs	r0, #1
 800b552:	f011 fb27 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800b556:	2235      	movs	r2, #53	; 0x35
 800b558:	21b5      	movs	r1, #181	; 0xb5
 800b55a:	2007      	movs	r0, #7
 800b55c:	f011 fb22 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800b560:	4620      	mov	r0, r4
 800b562:	2231      	movs	r2, #49	; 0x31
 800b564:	2169      	movs	r1, #105	; 0x69
 800b566:	f011 fb1d 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800b56a:	2230      	movs	r2, #48	; 0x30
 800b56c:	2169      	movs	r1, #105	; 0x69
 800b56e:	2004      	movs	r0, #4
 800b570:	f011 fb18 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800b574:	2230      	movs	r2, #48	; 0x30
 800b576:	2169      	movs	r1, #105	; 0x69
 800b578:	2009      	movs	r0, #9
		TFT_DrawChar(67, 43, '0');
		

		TFT_direction = 0x00;
	}
}
 800b57a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800b57e:	f011 bb11 	b.w	801cba4 <TFT_DrawChar>
 800b582:	bf00      	nop
 800b584:	20000210 	.word	0x20000210
 800b588:	4d98      	ldr	r5, [pc, #608]	; (800b7ec <CQS_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b58a:	2801      	cmp	r0, #1
 800b58c:	bf0c      	ite	eq
 800b58e:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800b590:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800b592:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b596:	bf18      	it	ne
 800b598:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b59a:	f011 fa3f 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b59e:	2063      	movs	r0, #99	; 0x63
 800b5a0:	f011 fa42 	bl	801ca28 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800b5a4:	4892      	ldr	r0, [pc, #584]	; (800b7f0 <CQS_Axes_Text+0x4b0>)
 800b5a6:	f011 fa33 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(87, 258, 'Q');
 800b5aa:	2251      	movs	r2, #81	; 0x51
 800b5ac:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5b0:	2057      	movs	r0, #87	; 0x57
 800b5b2:	f011 faf7 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800b5b6:	2231      	movs	r2, #49	; 0x31
 800b5b8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5bc:	205d      	movs	r0, #93	; 0x5d
 800b5be:	f011 faf1 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'Q');
 800b5c2:	2251      	movs	r2, #81	; 0x51
 800b5c4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5c8:	206d      	movs	r0, #109	; 0x6d
 800b5ca:	f011 faeb 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800b5ce:	2232      	movs	r2, #50	; 0x32
 800b5d0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5d4:	2073      	movs	r0, #115	; 0x73
 800b5d6:	f011 fae5 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'Q');
 800b5da:	2251      	movs	r2, #81	; 0x51
 800b5dc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5e0:	2083      	movs	r0, #131	; 0x83
 800b5e2:	f011 fadf 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800b5e6:	2233      	movs	r2, #51	; 0x33
 800b5e8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5ec:	2089      	movs	r0, #137	; 0x89
 800b5ee:	f011 fad9 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'Q');
 800b5f2:	2251      	movs	r2, #81	; 0x51
 800b5f4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5f8:	2099      	movs	r0, #153	; 0x99
 800b5fa:	f011 fad3 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800b5fe:	2234      	movs	r2, #52	; 0x34
 800b600:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b604:	209f      	movs	r0, #159	; 0x9f
 800b606:	f011 facd 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'Q');
 800b60a:	2251      	movs	r2, #81	; 0x51
 800b60c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b610:	20af      	movs	r0, #175	; 0xaf
 800b612:	f011 fac7 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800b616:	2235      	movs	r2, #53	; 0x35
 800b618:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b61c:	20b5      	movs	r0, #181	; 0xb5
 800b61e:	f011 fac1 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'Q');
 800b622:	2251      	movs	r2, #81	; 0x51
 800b624:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b628:	20c5      	movs	r0, #197	; 0xc5
 800b62a:	f011 fabb 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800b62e:	2236      	movs	r2, #54	; 0x36
 800b630:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b634:	20cb      	movs	r0, #203	; 0xcb
 800b636:	f011 fab5 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'Q');
 800b63a:	2251      	movs	r2, #81	; 0x51
 800b63c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b640:	20db      	movs	r0, #219	; 0xdb
 800b642:	f011 faaf 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800b646:	2237      	movs	r2, #55	; 0x37
 800b648:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b64c:	20e1      	movs	r0, #225	; 0xe1
 800b64e:	f011 faa9 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'Q');
 800b652:	2251      	movs	r2, #81	; 0x51
 800b654:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b658:	20f1      	movs	r0, #241	; 0xf1
 800b65a:	f011 faa3 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800b65e:	2238      	movs	r2, #56	; 0x38
 800b660:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b664:	20f7      	movs	r0, #247	; 0xf7
 800b666:	f011 fa9d 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'Q');
 800b66a:	2251      	movs	r2, #81	; 0x51
 800b66c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b670:	f240 1007 	movw	r0, #263	; 0x107
 800b674:	f011 fa96 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800b678:	2239      	movs	r2, #57	; 0x39
 800b67a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b67e:	f240 100d 	movw	r0, #269	; 0x10d
 800b682:	f011 fa8f 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800b686:	2231      	movs	r2, #49	; 0x31
 800b688:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b68c:	f44f 7091 	mov.w	r0, #290	; 0x122
 800b690:	f011 fa88 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'Q');
 800b694:	2251      	movs	r2, #81	; 0x51
 800b696:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b69a:	f240 101d 	movw	r0, #285	; 0x11d
 800b69e:	f011 fa81 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800b6a2:	2230      	movs	r2, #48	; 0x30
 800b6a4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b6a8:	f44f 7093 	mov.w	r0, #294	; 0x126
 800b6ac:	f011 fa7a 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800b6b0:	2231      	movs	r2, #49	; 0x31
 800b6b2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b6b6:	f44f 709c 	mov.w	r0, #312	; 0x138
 800b6ba:	f011 fa73 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'Q');
 800b6be:	2251      	movs	r2, #81	; 0x51
 800b6c0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b6c4:	f240 1033 	movw	r0, #307	; 0x133
 800b6c8:	f011 fa6c 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800b6cc:	2231      	movs	r2, #49	; 0x31
 800b6ce:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b6d2:	f240 103d 	movw	r0, #317	; 0x13d
 800b6d6:	f011 fa65 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800b6da:	2231      	movs	r2, #49	; 0x31
 800b6dc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b6e0:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800b6e4:	f011 fa5e 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'Q');
 800b6e8:	2251      	movs	r2, #81	; 0x51
 800b6ea:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b6ee:	f240 1049 	movw	r0, #329	; 0x149
 800b6f2:	f011 fa57 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800b6f6:	2232      	movs	r2, #50	; 0x32
 800b6f8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b6fc:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800b700:	f011 fa50 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800b704:	2231      	movs	r2, #49	; 0x31
 800b706:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b70a:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800b70e:	f011 fa49 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'Q');
 800b712:	2251      	movs	r2, #81	; 0x51
 800b714:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b718:	f240 105f 	movw	r0, #351	; 0x15f
 800b71c:	f011 fa42 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800b720:	2233      	movs	r2, #51	; 0x33
 800b722:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b726:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800b72a:	f011 fa3b 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800b72e:	2231      	movs	r2, #49	; 0x31
 800b730:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b734:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800b738:	f011 fa34 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'Q');
 800b73c:	2251      	movs	r2, #81	; 0x51
 800b73e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b742:	f240 1075 	movw	r0, #373	; 0x175
 800b746:	f011 fa2d 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800b74a:	2234      	movs	r2, #52	; 0x34
 800b74c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b750:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800b754:	f011 fa26 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800b758:	2231      	movs	r2, #49	; 0x31
 800b75a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b75e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b762:	f011 fa1f 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'Q');
 800b766:	2251      	movs	r2, #81	; 0x51
 800b768:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b76c:	f240 108b 	movw	r0, #395	; 0x18b
 800b770:	f011 fa18 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800b774:	2235      	movs	r2, #53	; 0x35
 800b776:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b77a:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800b77e:	f011 fa11 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800b782:	2230      	movs	r2, #48	; 0x30
 800b784:	21fa      	movs	r1, #250	; 0xfa
 800b786:	2041      	movs	r0, #65	; 0x41
 800b788:	f011 fa0c 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800b78c:	2232      	movs	r2, #50	; 0x32
 800b78e:	21ca      	movs	r1, #202	; 0xca
 800b790:	203a      	movs	r0, #58	; 0x3a
 800b792:	f011 fa07 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800b796:	2235      	movs	r2, #53	; 0x35
 800b798:	21ca      	movs	r1, #202	; 0xca
 800b79a:	2041      	movs	r0, #65	; 0x41
 800b79c:	f011 fa02 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800b7a0:	2235      	movs	r2, #53	; 0x35
 800b7a2:	2195      	movs	r1, #149	; 0x95
 800b7a4:	203a      	movs	r0, #58	; 0x3a
 800b7a6:	f011 f9fd 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800b7aa:	2230      	movs	r2, #48	; 0x30
 800b7ac:	2195      	movs	r1, #149	; 0x95
 800b7ae:	2041      	movs	r0, #65	; 0x41
 800b7b0:	f011 f9f8 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800b7b4:	2237      	movs	r2, #55	; 0x37
 800b7b6:	2160      	movs	r1, #96	; 0x60
 800b7b8:	203a      	movs	r0, #58	; 0x3a
 800b7ba:	f011 f9f3 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800b7be:	2235      	movs	r2, #53	; 0x35
 800b7c0:	2160      	movs	r1, #96	; 0x60
 800b7c2:	2041      	movs	r0, #65	; 0x41
 800b7c4:	f011 f9ee 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800b7c8:	2231      	movs	r2, #49	; 0x31
 800b7ca:	212b      	movs	r1, #43	; 0x2b
 800b7cc:	2039      	movs	r0, #57	; 0x39
 800b7ce:	f011 f9e9 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800b7d2:	2230      	movs	r2, #48	; 0x30
 800b7d4:	212b      	movs	r1, #43	; 0x2b
 800b7d6:	203e      	movs	r0, #62	; 0x3e
 800b7d8:	f011 f9e4 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800b7dc:	2230      	movs	r2, #48	; 0x30
 800b7de:	212b      	movs	r1, #43	; 0x2b
 800b7e0:	2043      	movs	r0, #67	; 0x43
 800b7e2:	f011 f9df 	bl	801cba4 <TFT_DrawChar>
		TFT_direction = 0x00;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	702b      	strb	r3, [r5, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	200056a0 	.word	0x200056a0
 800b7f0:	20000210 	.word	0x20000210

0800b7f4 <CQS_chart>:

void CQS_chart(uint8_t direction, uint8_t *GraphData)
{
 800b7f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f8:	ed2d 8b04 	vpush	{d8-d9}
 800b7fc:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800b7fe:	ad06      	add	r5, sp, #24
 800b800:	2300      	movs	r3, #0
{
 800b802:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800b804:	f825 3d04 	strh.w	r3, [r5, #-4]!
 800b808:	ed9f 8ae1 	vldr	s16, [pc, #900]	; 800bb90 <CQS_chart+0x39c>
 800b80c:	1e4e      	subs	r6, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800b80e:	2800      	cmp	r0, #0
 800b810:	f040 81ca 	bne.w	800bba8 <CQS_chart+0x3b4>
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800b814:	780b      	ldrb	r3, [r1, #0]
 800b816:	ed9f 9adf 	vldr	s18, [pc, #892]	; 800bb94 <CQS_chart+0x3a0>
 800b81a:	eddf 8adf 	vldr	s17, [pc, #892]	; 800bb98 <CQS_chart+0x3a4>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800b81e:	4fdf      	ldr	r7, [pc, #892]	; (800bb9c <CQS_chart+0x3a8>)
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800b820:	ee07 3a90 	vmov	s15, r3
 800b824:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b828:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800b82c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b830:	9300      	str	r3, [sp, #0]
 800b832:	2222      	movs	r2, #34	; 0x22
 800b834:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b838:	2018      	movs	r0, #24
 800b83a:	eef0 7a49 	vmov.f32	s15, s18
 800b83e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b846:	edcd 7a03 	vstr	s15, [sp, #12]
 800b84a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b84e:	f010 feb6 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(float)GraphData[1]/100*305, 50, 410, CQS_COLOR_Q2);
 800b852:	7863      	ldrb	r3, [r4, #1]
 800b854:	ee07 3a90 	vmov	s15, r3
 800b858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b85c:	f645 2392 	movw	r3, #23186	; 0x5a92
 800b860:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b864:	9300      	str	r3, [sp, #0]
 800b866:	2232      	movs	r2, #50	; 0x32
 800b868:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b86c:	2028      	movs	r0, #40	; 0x28
 800b86e:	eef0 7a49 	vmov.f32	s15, s18
 800b872:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b87a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b87e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b882:	f010 fe9c 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(float)GraphData[2]/100*305, 66, 410, CQS_COLOR_Q3);
 800b886:	78a3      	ldrb	r3, [r4, #2]
 800b888:	ee07 3a90 	vmov	s15, r3
 800b88c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b890:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800b894:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b898:	9300      	str	r3, [sp, #0]
 800b89a:	2242      	movs	r2, #66	; 0x42
 800b89c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b8a0:	2038      	movs	r0, #56	; 0x38
 800b8a2:	eef0 7a49 	vmov.f32	s15, s18
 800b8a6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b8aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8ae:	edcd 7a03 	vstr	s15, [sp, #12]
 800b8b2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b8b6:	f010 fe82 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(float)GraphData[3]/100*305, 82, 410, CQS_COLOR_Q4);
 800b8ba:	78e3      	ldrb	r3, [r4, #3]
 800b8bc:	ee07 3a90 	vmov	s15, r3
 800b8c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8c4:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800b8c8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b8cc:	9300      	str	r3, [sp, #0]
 800b8ce:	2252      	movs	r2, #82	; 0x52
 800b8d0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b8d4:	2048      	movs	r0, #72	; 0x48
 800b8d6:	eef0 7a49 	vmov.f32	s15, s18
 800b8da:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b8de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8e2:	edcd 7a03 	vstr	s15, [sp, #12]
 800b8e6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b8ea:	f010 fe68 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(float)GraphData[4]/100*305, 98, 410, CQS_COLOR_Q5);
 800b8ee:	7923      	ldrb	r3, [r4, #4]
 800b8f0:	ee07 3a90 	vmov	s15, r3
 800b8f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f8:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800b8fc:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b900:	9300      	str	r3, [sp, #0]
 800b902:	2262      	movs	r2, #98	; 0x62
 800b904:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b908:	2058      	movs	r0, #88	; 0x58
 800b90a:	eef0 7a49 	vmov.f32	s15, s18
 800b90e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b912:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b916:	edcd 7a03 	vstr	s15, [sp, #12]
 800b91a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b91e:	f010 fe4e 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(float)GraphData[5]/100*305, 114, 410, CQS_COLOR_Q6);
 800b922:	7963      	ldrb	r3, [r4, #5]
 800b924:	ee07 3a90 	vmov	s15, r3
 800b928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b92c:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800b930:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b934:	9300      	str	r3, [sp, #0]
 800b936:	2272      	movs	r2, #114	; 0x72
 800b938:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b93c:	2068      	movs	r0, #104	; 0x68
 800b93e:	eef0 7a49 	vmov.f32	s15, s18
 800b942:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b94a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b94e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b952:	f010 fe34 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(float)GraphData[6]/100*305, 130, 410, CQS_COLOR_Q7);
 800b956:	79a3      	ldrb	r3, [r4, #6]
 800b958:	ee07 3a90 	vmov	s15, r3
 800b95c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b960:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800b964:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b968:	9300      	str	r3, [sp, #0]
 800b96a:	2282      	movs	r2, #130	; 0x82
 800b96c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b970:	2078      	movs	r0, #120	; 0x78
 800b972:	eef0 7a49 	vmov.f32	s15, s18
 800b976:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b97a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b97e:	edcd 7a03 	vstr	s15, [sp, #12]
 800b982:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b986:	f010 fe1a 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(float)GraphData[7]/100*305, 146, 410, CQS_COLOR_Q8);
 800b98a:	79e3      	ldrb	r3, [r4, #7]
 800b98c:	ee07 3a90 	vmov	s15, r3
 800b990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b994:	f247 5369 	movw	r3, #30057	; 0x7569
 800b998:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b99c:	9300      	str	r3, [sp, #0]
 800b99e:	2292      	movs	r2, #146	; 0x92
 800b9a0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b9a4:	2088      	movs	r0, #136	; 0x88
 800b9a6:	eef0 7a49 	vmov.f32	s15, s18
 800b9aa:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b9ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9b2:	edcd 7a03 	vstr	s15, [sp, #12]
 800b9b6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b9ba:	f010 fe00 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(float)GraphData[8]/100*305, 162, 410, CQS_COLOR_Q9);
 800b9be:	7a23      	ldrb	r3, [r4, #8]
 800b9c0:	ee07 3a90 	vmov	s15, r3
 800b9c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9c8:	f24b 6307 	movw	r3, #46599	; 0xb607
 800b9cc:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b9d0:	9300      	str	r3, [sp, #0]
 800b9d2:	22a2      	movs	r2, #162	; 0xa2
 800b9d4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b9d8:	2098      	movs	r0, #152	; 0x98
 800b9da:	eef0 7a49 	vmov.f32	s15, s18
 800b9de:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b9e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9e6:	edcd 7a03 	vstr	s15, [sp, #12]
 800b9ea:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b9ee:	f010 fde6 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(float)GraphData[9]/100*305, 178, 410, CQS_COLOR_Q10);
 800b9f2:	7a63      	ldrb	r3, [r4, #9]
 800b9f4:	ee07 3a90 	vmov	s15, r3
 800b9f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9fc:	f64e 6325 	movw	r3, #60965	; 0xee25
 800ba00:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba04:	9300      	str	r3, [sp, #0]
 800ba06:	22b2      	movs	r2, #178	; 0xb2
 800ba08:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800ba0c:	20a8      	movs	r0, #168	; 0xa8
 800ba0e:	eef0 7a49 	vmov.f32	s15, s18
 800ba12:	eee7 7a68 	vfms.f32	s15, s14, s17
 800ba16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba1a:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba1e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ba22:	f010 fdcc 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(float)GraphData[10]/100*305, 194, 410, CQS_COLOR_Q11);
 800ba26:	7aa3      	ldrb	r3, [r4, #10]
 800ba28:	ee07 3a90 	vmov	s15, r3
 800ba2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba30:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800ba34:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	22c2      	movs	r2, #194	; 0xc2
 800ba3c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800ba40:	20b8      	movs	r0, #184	; 0xb8
 800ba42:	eef0 7a49 	vmov.f32	s15, s18
 800ba46:	eee7 7a68 	vfms.f32	s15, s14, s17
 800ba4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba4e:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba52:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ba56:	f010 fdb2 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(float)GraphData[11]/100*305, 210, 410, CQS_COLOR_Q12);
 800ba5a:	7ae3      	ldrb	r3, [r4, #11]
 800ba5c:	ee07 3a90 	vmov	s15, r3
 800ba60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba64:	f64e 4347 	movw	r3, #60487	; 0xec47
 800ba68:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba6c:	9300      	str	r3, [sp, #0]
 800ba6e:	22d2      	movs	r2, #210	; 0xd2
 800ba70:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800ba74:	20c8      	movs	r0, #200	; 0xc8
 800ba76:	eef0 7a49 	vmov.f32	s15, s18
 800ba7a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800ba7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba82:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba86:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ba8a:	f010 fd98 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(float)GraphData[12]/100*305, 226, 410, CQS_COLOR_Q13);
 800ba8e:	7b23      	ldrb	r3, [r4, #12]
 800ba90:	ee07 3a90 	vmov	s15, r3
 800ba94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba98:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800ba9c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	22e2      	movs	r2, #226	; 0xe2
 800baa4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800baa8:	20d8      	movs	r0, #216	; 0xd8
 800baaa:	eef0 7a49 	vmov.f32	s15, s18
 800baae:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bab6:	edcd 7a03 	vstr	s15, [sp, #12]
 800baba:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800babe:	f010 fd7e 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(float)GraphData[13]/100*305, 242, 410, CQS_COLOR_Q14);
 800bac2:	7b63      	ldrb	r3, [r4, #13]
 800bac4:	ee07 3a90 	vmov	s15, r3
 800bac8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bacc:	f64a 1347 	movw	r3, #43335	; 0xa947
 800bad0:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bad4:	9300      	str	r3, [sp, #0]
 800bad6:	22f2      	movs	r2, #242	; 0xf2
 800bad8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800badc:	20e8      	movs	r0, #232	; 0xe8
 800bade:	eef0 7a49 	vmov.f32	s15, s18
 800bae2:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baea:	edcd 7a03 	vstr	s15, [sp, #12]
 800baee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800baf2:	f010 fd64 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800baf6:	7ba3      	ldrb	r3, [r4, #14]
 800baf8:	ee07 3a90 	vmov	s15, r3
 800bafc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb00:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800bb04:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb08:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	20f8      	movs	r0, #248	; 0xf8
 800bb10:	f44f 73cd 	mov.w	r3, #410	; 0x19a
		TFT_SetBackColor(TFT_Black_Bkgr);
 800bb14:	2418      	movs	r4, #24
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800bb16:	eea7 9a68 	vfms.f32	s18, s14, s17
 800bb1a:	eefc 7ac9 	vcvt.u32.f32	s15, s18
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800bb1e:	ed9f 9a20 	vldr	s18, [pc, #128]	; 800bba0 <CQS_chart+0x3ac>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800bb22:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb26:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb2a:	f010 fd48 	bl	801c5be <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800bb2e:	481d      	ldr	r0, [pc, #116]	; (800bba4 <CQS_chart+0x3b0>)
 800bb30:	f010 ff6e 	bl	801ca10 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800bb34:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800bb38:	f010 ff70 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800bb3c:	2063      	movs	r0, #99	; 0x63
 800bb3e:	f010 ff73 	bl	801ca28 <TFT_SetBackColor>
			sprintf (buffer, "%d", GraphData[i]);
 800bb42:	7872      	ldrb	r2, [r6, #1]
 800bb44:	4639      	mov	r1, r7
 800bb46:	4628      	mov	r0, r5
 800bb48:	f014 fba4 	bl	8020294 <sprintf>
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800bb4c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800bb50:	ee07 3a90 	vmov	s15, r3
 800bb54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb58:	4620      	mov	r0, r4
 800bb5a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb5e:	3410      	adds	r4, #16
 800bb60:	2303      	movs	r3, #3
 800bb62:	462a      	mov	r2, r5
 800bb64:	b2a4      	uxth	r4, r4
 800bb66:	eef0 7a49 	vmov.f32	s15, s18
 800bb6a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bb6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb72:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb76:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb7a:	f011 f86b 	bl	801cc54 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800bb7e:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800bb82:	d1de      	bne.n	800bb42 <CQS_chart+0x34e>
			X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800bb84:	b006      	add	sp, #24
 800bb86:	ecbd 8b04 	vpop	{d8-d9}
 800bb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb8e:	bf00      	nop
 800bb90:	42c80000 	.word	0x42c80000
 800bb94:	43cd0000 	.word	0x43cd0000
 800bb98:	43988000 	.word	0x43988000
 800bb9c:	08024f89 	.word	0x08024f89
 800bba0:	43c80000 	.word	0x43c80000
 800bba4:	20000210 	.word	0x20000210
		if(direction == 0x01){TFT_direction = 0x01;} 
 800bba8:	2801      	cmp	r0, #1
 800bbaa:	4fdf      	ldr	r7, [pc, #892]	; (800bf28 <CQS_chart+0x734>)
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800bbac:	eddf 8adf 	vldr	s17, [pc, #892]	; 800bf2c <CQS_chart+0x738>
		if(direction == 0x01){TFT_direction = 0x01;} 
 800bbb0:	bf0e      	itee	eq
 800bbb2:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800bbb4:	2302      	movne	r3, #2
 800bbb6:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800bbb8:	780b      	ldrb	r3, [r1, #0]
 800bbba:	ed9f 9add 	vldr	s18, [pc, #884]	; 800bf30 <CQS_chart+0x73c>
			sprintf (buffer, "%d", GraphData[i]);
 800bbbe:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800bf40 <CQS_chart+0x74c>
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800bbc2:	ee07 3a90 	vmov	s15, r3
 800bbc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbca:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800bbce:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bbd2:	9300      	str	r3, [sp, #0]
 800bbd4:	2262      	movs	r2, #98	; 0x62
 800bbd6:	23fc      	movs	r3, #252	; 0xfc
 800bbd8:	2057      	movs	r0, #87	; 0x57
 800bbda:	eef0 7a68 	vmov.f32	s15, s17
 800bbde:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bbe2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbe6:	edcd 7a03 	vstr	s15, [sp, #12]
 800bbea:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bbee:	f010 fce6 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(109, 252-(float)GraphData[1]/100*210, 120, 252, CQS_COLOR_Q2);
 800bbf2:	7863      	ldrb	r3, [r4, #1]
 800bbf4:	ee07 3a90 	vmov	s15, r3
 800bbf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbfc:	f645 2392 	movw	r3, #23186	; 0x5a92
 800bc00:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	2278      	movs	r2, #120	; 0x78
 800bc08:	23fc      	movs	r3, #252	; 0xfc
 800bc0a:	206d      	movs	r0, #109	; 0x6d
 800bc0c:	eef0 7a68 	vmov.f32	s15, s17
 800bc10:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bc14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc18:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc1c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc20:	f010 fccd 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(131, 252-(float)GraphData[2]/100*210, 142, 252, CQS_COLOR_Q3);
 800bc24:	78a3      	ldrb	r3, [r4, #2]
 800bc26:	ee07 3a90 	vmov	s15, r3
 800bc2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc2e:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800bc32:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc36:	9300      	str	r3, [sp, #0]
 800bc38:	228e      	movs	r2, #142	; 0x8e
 800bc3a:	23fc      	movs	r3, #252	; 0xfc
 800bc3c:	2083      	movs	r0, #131	; 0x83
 800bc3e:	eef0 7a68 	vmov.f32	s15, s17
 800bc42:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bc46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc4a:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc4e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc52:	f010 fcb4 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(153, 252-(float)GraphData[3]/100*210, 164, 252, CQS_COLOR_Q4);
 800bc56:	78e3      	ldrb	r3, [r4, #3]
 800bc58:	ee07 3a90 	vmov	s15, r3
 800bc5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc60:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800bc64:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	22a4      	movs	r2, #164	; 0xa4
 800bc6c:	23fc      	movs	r3, #252	; 0xfc
 800bc6e:	2099      	movs	r0, #153	; 0x99
 800bc70:	eef0 7a68 	vmov.f32	s15, s17
 800bc74:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bc78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc7c:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc80:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc84:	f010 fc9b 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(175, 252-(float)GraphData[4]/100*210, 186, 252, CQS_COLOR_Q5);
 800bc88:	7923      	ldrb	r3, [r4, #4]
 800bc8a:	ee07 3a90 	vmov	s15, r3
 800bc8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc92:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800bc96:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc9a:	9300      	str	r3, [sp, #0]
 800bc9c:	22ba      	movs	r2, #186	; 0xba
 800bc9e:	23fc      	movs	r3, #252	; 0xfc
 800bca0:	20af      	movs	r0, #175	; 0xaf
 800bca2:	eef0 7a68 	vmov.f32	s15, s17
 800bca6:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bcaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcae:	edcd 7a03 	vstr	s15, [sp, #12]
 800bcb2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bcb6:	f010 fc82 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(197, 252-(float)GraphData[5]/100*210, 208, 252, CQS_COLOR_Q6);
 800bcba:	7963      	ldrb	r3, [r4, #5]
 800bcbc:	ee07 3a90 	vmov	s15, r3
 800bcc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcc4:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800bcc8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bccc:	9300      	str	r3, [sp, #0]
 800bcce:	22d0      	movs	r2, #208	; 0xd0
 800bcd0:	23fc      	movs	r3, #252	; 0xfc
 800bcd2:	20c5      	movs	r0, #197	; 0xc5
 800bcd4:	eef0 7a68 	vmov.f32	s15, s17
 800bcd8:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bcdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bce0:	edcd 7a03 	vstr	s15, [sp, #12]
 800bce4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bce8:	f010 fc69 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(219, 252-(float)GraphData[6]/100*210, 230, 252, CQS_COLOR_Q7);
 800bcec:	79a3      	ldrb	r3, [r4, #6]
 800bcee:	ee07 3a90 	vmov	s15, r3
 800bcf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf6:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800bcfa:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	22e6      	movs	r2, #230	; 0xe6
 800bd02:	23fc      	movs	r3, #252	; 0xfc
 800bd04:	20db      	movs	r0, #219	; 0xdb
 800bd06:	eef0 7a68 	vmov.f32	s15, s17
 800bd0a:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bd0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd12:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd16:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd1a:	f010 fc50 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(241, 252-(float)GraphData[7]/100*210, 252, 252, CQS_COLOR_Q8);
 800bd1e:	79e3      	ldrb	r3, [r4, #7]
 800bd20:	ee07 3a90 	vmov	s15, r3
 800bd24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd28:	f247 5369 	movw	r3, #30057	; 0x7569
 800bd2c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bd30:	9300      	str	r3, [sp, #0]
 800bd32:	23fc      	movs	r3, #252	; 0xfc
 800bd34:	461a      	mov	r2, r3
 800bd36:	20f1      	movs	r0, #241	; 0xf1
 800bd38:	eef0 7a68 	vmov.f32	s15, s17
 800bd3c:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bd40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd44:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd48:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd4c:	f010 fc37 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(263, 252-(float)GraphData[8]/100*210, 274, 252, CQS_COLOR_Q9);
 800bd50:	7a23      	ldrb	r3, [r4, #8]
 800bd52:	ee07 3a90 	vmov	s15, r3
 800bd56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd5a:	f24b 6307 	movw	r3, #46599	; 0xb607
 800bd5e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bd68:	23fc      	movs	r3, #252	; 0xfc
 800bd6a:	f240 1007 	movw	r0, #263	; 0x107
 800bd6e:	eef0 7a68 	vmov.f32	s15, s17
 800bd72:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bd76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd7a:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd7e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd82:	f010 fc1c 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(285, 252-(float)GraphData[9]/100*210, 296, 252, CQS_COLOR_Q10);
 800bd86:	7a63      	ldrb	r3, [r4, #9]
 800bd88:	ee07 3a90 	vmov	s15, r3
 800bd8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd90:	f64e 6325 	movw	r3, #60965	; 0xee25
 800bd94:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bd98:	9300      	str	r3, [sp, #0]
 800bd9a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bd9e:	23fc      	movs	r3, #252	; 0xfc
 800bda0:	f240 101d 	movw	r0, #285	; 0x11d
 800bda4:	eef0 7a68 	vmov.f32	s15, s17
 800bda8:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bdac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdb0:	edcd 7a03 	vstr	s15, [sp, #12]
 800bdb4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bdb8:	f010 fc01 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(307, 252-(float)GraphData[10]/100*210,318, 252, CQS_COLOR_Q11);
 800bdbc:	7aa3      	ldrb	r3, [r4, #10]
 800bdbe:	ee07 3a90 	vmov	s15, r3
 800bdc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdc6:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800bdca:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800bdd4:	23fc      	movs	r3, #252	; 0xfc
 800bdd6:	f240 1033 	movw	r0, #307	; 0x133
 800bdda:	eef0 7a68 	vmov.f32	s15, s17
 800bdde:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bde2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bde6:	edcd 7a03 	vstr	s15, [sp, #12]
 800bdea:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bdee:	f010 fbe6 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(329, 252-(float)GraphData[11]/100*210,340, 252, CQS_COLOR_Q12);
 800bdf2:	7ae3      	ldrb	r3, [r4, #11]
 800bdf4:	ee07 3a90 	vmov	s15, r3
 800bdf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdfc:	f64e 4347 	movw	r3, #60487	; 0xec47
 800be00:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800be04:	9300      	str	r3, [sp, #0]
 800be06:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800be0a:	23fc      	movs	r3, #252	; 0xfc
 800be0c:	f240 1049 	movw	r0, #329	; 0x149
 800be10:	eef0 7a68 	vmov.f32	s15, s17
 800be14:	eee7 7a49 	vfms.f32	s15, s14, s18
 800be18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be1c:	edcd 7a03 	vstr	s15, [sp, #12]
 800be20:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800be24:	f010 fbcb 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(351, 252-(float)GraphData[12]/100*210,362, 252, CQS_COLOR_Q13);
 800be28:	7b23      	ldrb	r3, [r4, #12]
 800be2a:	ee07 3a90 	vmov	s15, r3
 800be2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be32:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800be36:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800be3a:	9300      	str	r3, [sp, #0]
 800be3c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800be40:	23fc      	movs	r3, #252	; 0xfc
 800be42:	f240 105f 	movw	r0, #351	; 0x15f
 800be46:	eef0 7a68 	vmov.f32	s15, s17
 800be4a:	eee7 7a49 	vfms.f32	s15, s14, s18
 800be4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be52:	edcd 7a03 	vstr	s15, [sp, #12]
 800be56:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800be5a:	f010 fbb0 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(373, 252-(float)GraphData[13]/100*210,384, 252, CQS_COLOR_Q14);
 800be5e:	7b63      	ldrb	r3, [r4, #13]
 800be60:	ee07 3a90 	vmov	s15, r3
 800be64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be68:	f64a 1347 	movw	r3, #43335	; 0xa947
 800be6c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800be70:	9300      	str	r3, [sp, #0]
 800be72:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800be76:	23fc      	movs	r3, #252	; 0xfc
 800be78:	f240 1075 	movw	r0, #373	; 0x175
 800be7c:	eef0 7a68 	vmov.f32	s15, s17
 800be80:	eee7 7a49 	vfms.f32	s15, s14, s18
 800be84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be88:	edcd 7a03 	vstr	s15, [sp, #12]
 800be8c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800be90:	f010 fb95 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800be94:	7ba3      	ldrb	r3, [r4, #14]
 800be96:	ee07 3a90 	vmov	s15, r3
 800be9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be9e:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800bea2:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800beac:	23fc      	movs	r3, #252	; 0xfc
 800beae:	f240 108b 	movw	r0, #395	; 0x18b
 800beb2:	2457      	movs	r4, #87	; 0x57
 800beb4:	eee7 8a49 	vfms.f32	s17, s14, s18
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800beb8:	ed9f 9a1e 	vldr	s18, [pc, #120]	; 800bf34 <CQS_chart+0x740>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800bebc:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800bec0:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800bf38 <CQS_chart+0x744>
 800bec4:	edcd 7a03 	vstr	s15, [sp, #12]
 800bec8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800becc:	f010 fb77 	bl	801c5be <TFT_FillRectangle>
			sprintf (buffer, "%d", GraphData[i]);
 800bed0:	7872      	ldrb	r2, [r6, #1]
 800bed2:	4641      	mov	r1, r8
 800bed4:	4628      	mov	r0, r5
 800bed6:	f014 f9dd 	bl	8020294 <sprintf>
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800beda:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800bede:	ee07 3a90 	vmov	s15, r3
 800bee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bee6:	2b09      	cmp	r3, #9
 800bee8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800beec:	f04f 0303 	mov.w	r3, #3
 800bef0:	4620      	mov	r0, r4
 800bef2:	462a      	mov	r2, r5
 800bef4:	f104 0416 	add.w	r4, r4, #22
 800bef8:	b2a4      	uxth	r4, r4
 800befa:	bf94      	ite	ls
 800befc:	eddf 7a0f 	vldrls	s15, [pc, #60]	; 800bf3c <CQS_chart+0x748>
 800bf00:	eef0 7a49 	vmovhi.f32	s15, s18
 800bf04:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bf08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf0c:	edcd 7a03 	vstr	s15, [sp, #12]
 800bf10:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bf14:	f010 fe9e 	bl	801cc54 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800bf18:	f240 13a1 	movw	r3, #417	; 0x1a1
 800bf1c:	429c      	cmp	r4, r3
 800bf1e:	d1d7      	bne.n	800bed0 <CQS_chart+0x6dc>
		TFT_direction = 0x00;
 800bf20:	2300      	movs	r3, #0
 800bf22:	703b      	strb	r3, [r7, #0]
}
 800bf24:	e62e      	b.n	800bb84 <CQS_chart+0x390>
 800bf26:	bf00      	nop
 800bf28:	200056a0 	.word	0x200056a0
 800bf2c:	437c0000 	.word	0x437c0000
 800bf30:	43520000 	.word	0x43520000
 800bf34:	437a0000 	.word	0x437a0000
 800bf38:	43570000 	.word	0x43570000
 800bf3c:	43730000 	.word	0x43730000
 800bf40:	08024f89 	.word	0x08024f89

0800bf44 <CQS_Draw>:

void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bf44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bf48:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bf4a:	2363      	movs	r3, #99	; 0x63
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	4688      	mov	r8, r1
 800bf50:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bf52:	213a      	movs	r1, #58	; 0x3a
 800bf54:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	2005      	movs	r0, #5
 800bf5c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bf60:	f89d 7020 	ldrb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bf64:	f010 fb2b 	bl	801c5be <TFT_FillRectangle>
	CQS_Axes(direction);
 800bf68:	4620      	mov	r0, r4
 800bf6a:	f7ff f877 	bl	800b05c <CQS_Axes>
	CQS_Axes_Text(direction);
 800bf6e:	4620      	mov	r0, r4
 800bf70:	f7ff f9e6 	bl	800b340 <CQS_Axes_Text>
	CQS_chart(direction, GraphData);
 800bf74:	4641      	mov	r1, r8
 800bf76:	4620      	mov	r0, r4
 800bf78:	f7ff fc3c 	bl	800b7f4 <CQS_chart>
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800bf7c:	463b      	mov	r3, r7
 800bf7e:	4632      	mov	r2, r6
 800bf80:	4629      	mov	r1, r5
 800bf82:	4620      	mov	r0, r4
 800bf84:	b002      	add	sp, #8
 800bf86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800bf8a:	f7ff b905 	b.w	800b198 <CQS_Axes_Measure>

0800bf8e <flash_data_read_buff>:
#include "CRC_check.h"

uint64_t flash_data_read_buff(uint32_t flash_addr_buff) 
{ 
	return ( *(__IO uint64_t*) flash_addr_buff);
}
 800bf8e:	e9d0 0100 	ldrd	r0, r1, [r0]
 800bf92:	4770      	bx	lr

0800bf94 <CRC_Check>:
uint32_t addr_i;

CRC_Check_StatusTypeDef CRC_Check(uint32_t start_flash_addr, uint32_t flash_size, uint32_t CRC_addr)
{

	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800bf94:	4b13      	ldr	r3, [pc, #76]	; (800bfe4 <CRC_Check+0x50>)
{
 800bf96:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800bf9a:	4e13      	ldr	r6, [pc, #76]	; (800bfe8 <CRC_Check+0x54>)
	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800bf9c:	6018      	str	r0, [r3, #0]
 800bf9e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800bfa2:	2400      	movs	r4, #0
 800bfa4:	4281      	cmp	r1, r0
 800bfa6:	d811      	bhi.n	800bfcc <CRC_Check+0x38>
 800bfa8:	b104      	cbz	r4, 800bfac <CRC_Check+0x18>
 800bfaa:	6018      	str	r0, [r3, #0]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800bfac:	e9d2 0100 	ldrd	r0, r1, [r2]
	{
		CRC_buff += flash_data_read_buff(addr_i);
	}
	crcr_flash = flash_data_read_buff(CRC_addr);
 800bfb0:	4b0e      	ldr	r3, [pc, #56]	; (800bfec <CRC_Check+0x58>)
 800bfb2:	e9c3 0100 	strd	r0, r1, [r3]
	
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800bfb6:	e9d6 0100 	ldrd	r0, r1, [r6]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800bfba:	e9d2 2300 	ldrd	r2, r3, [r2]
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800bfbe:	4299      	cmp	r1, r3
 800bfc0:	bf0a      	itet	eq
 800bfc2:	4290      	cmpeq	r0, r2
		return	CRC_OK;
	} else
	{
		return	CRC_ERROR;
	}
};
 800bfc4:	2001      	movne	r0, #1
 800bfc6:	2000      	moveq	r0, #0
 800bfc8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	return ( *(__IO uint64_t*) flash_addr_buff);
 800bfcc:	e8f0 8902 	ldrd	r8, r9, [r0], #8
		CRC_buff += flash_data_read_buff(addr_i);
 800bfd0:	e9d6 4500 	ldrd	r4, r5, [r6]
 800bfd4:	eb14 0408 	adds.w	r4, r4, r8
 800bfd8:	eb45 0509 	adc.w	r5, r5, r9
 800bfdc:	e9c6 4500 	strd	r4, r5, [r6]
 800bfe0:	2401      	movs	r4, #1
 800bfe2:	e7df      	b.n	800bfa4 <CRC_Check+0x10>
 800bfe4:	20090980 	.word	0x20090980
 800bfe8:	20004640 	.word	0x20004640
 800bfec:	20004648 	.word	0x20004648

0800bff0 <calcNorm560_CRI>:
double L_i_ref ;
double u_i_ref ;
double v_i_ref ;

void calcNorm560_CRI(uint16_t CCT_measure)
{
 800bff0:	b508      	push	{r3, lr}
	norm_560_CRI = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 800bff2:	f7f4 faaf 	bl	8000554 <__aeabi_i2d>
 800bff6:	a316      	add	r3, pc, #88	; (adr r3, 800c050 <calcNorm560_CRI+0x60>)
 800bff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffc:	f7f4 fb10 	bl	8000620 <__aeabi_dmul>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	a114      	add	r1, pc, #80	; (adr r1, 800c058 <calcNorm560_CRI+0x68>)
 800c006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c00a:	f7f4 fc33 	bl	8000874 <__aeabi_ddiv>
 800c00e:	ec41 0b10 	vmov	d0, r0, r1
 800c012:	f017 f97d 	bl	8023310 <exp>
 800c016:	2200      	movs	r2, #0
 800c018:	ec51 0b10 	vmov	r0, r1, d0
 800c01c:	4b0a      	ldr	r3, [pc, #40]	; (800c048 <calcNorm560_CRI+0x58>)
 800c01e:	f7f4 f94b 	bl	80002b8 <__aeabi_dsub>
 800c022:	460b      	mov	r3, r1
 800c024:	4602      	mov	r2, r0
 800c026:	a106      	add	r1, pc, #24	; (adr r1, 800c040 <calcNorm560_CRI+0x50>)
 800c028:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c02c:	f7f4 fc22 	bl	8000874 <__aeabi_ddiv>
 800c030:	f7f4 fdee 	bl	8000c10 <__aeabi_d2f>
 800c034:	4b05      	ldr	r3, [pc, #20]	; (800c04c <calcNorm560_CRI+0x5c>)
 800c036:	6018      	str	r0, [r3, #0]
 800c038:	bd08      	pop	{r3, pc}
 800c03a:	bf00      	nop
 800c03c:	f3af 8000 	nop.w
 800c040:	f9f35846 	.word	0xf9f35846
 800c044:	466ca5d1 	.word	0x466ca5d1
 800c048:	3ff00000 	.word	0x3ff00000
 800c04c:	200909b0 	.word	0x200909b0
 800c050:	05ea7ab3 	.word	0x05ea7ab3
 800c054:	3ea2ca5d 	.word	0x3ea2ca5d
 800c058:	aba38759 	.word	0xaba38759
 800c05c:	3f8d7774 	.word	0x3f8d7774

0800c060 <calcSref_CRI>:


float calcSref_CRI(int idx, uint16_t CCT_measure)
{
	float ans;
	if (CCT_measure < 5000)
 800c060:	f241 3387 	movw	r3, #4999	; 0x1387
 800c064:	4299      	cmp	r1, r3
{
 800c066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c068:	460d      	mov	r5, r1
 800c06a:	ea4f 0080 	mov.w	r0, r0, lsl #2
	if (CCT_measure < 5000)
 800c06e:	d84e      	bhi.n	800c10e <calcSref_CRI+0xae>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c070:	4c39      	ldr	r4, [pc, #228]	; (800c158 <calcSref_CRI+0xf8>)
 800c072:	4404      	add	r4, r0
 800c074:	6820      	ldr	r0, [r4, #0]
 800c076:	f7f4 fa7f 	bl	8000578 <__aeabi_f2d>
 800c07a:	a331      	add	r3, pc, #196	; (adr r3, 800c140 <calcSref_CRI+0xe0>)
 800c07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c080:	f7f4 face 	bl	8000620 <__aeabi_dmul>
 800c084:	4606      	mov	r6, r0
 800c086:	4628      	mov	r0, r5
 800c088:	460f      	mov	r7, r1
 800c08a:	f7f4 fa63 	bl	8000554 <__aeabi_i2d>
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	4630      	mov	r0, r6
 800c094:	4639      	mov	r1, r7
 800c096:	f7f4 fac3 	bl	8000620 <__aeabi_dmul>
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	a12a      	add	r1, pc, #168	; (adr r1, 800c148 <calcSref_CRI+0xe8>)
 800c0a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0a4:	f7f4 fbe6 	bl	8000874 <__aeabi_ddiv>
 800c0a8:	ec41 0b10 	vmov	d0, r0, r1
 800c0ac:	f017 f930 	bl	8023310 <exp>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c0b0:	6820      	ldr	r0, [r4, #0]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c0b2:	ec57 6b10 	vmov	r6, r7, d0
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c0b6:	f7f4 fa5f 	bl	8000578 <__aeabi_f2d>
 800c0ba:	a321      	add	r3, pc, #132	; (adr r3, 800c140 <calcSref_CRI+0xe0>)
 800c0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c0:	f7f4 faae 	bl	8000620 <__aeabi_dmul>
 800c0c4:	ed9f 1b22 	vldr	d1, [pc, #136]	; 800c150 <calcSref_CRI+0xf0>
 800c0c8:	ec41 0b10 	vmov	d0, r0, r1
 800c0cc:	f017 fa1c 	bl	8023508 <pow>
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	4b22      	ldr	r3, [pc, #136]	; (800c15c <calcSref_CRI+0xfc>)
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	4639      	mov	r1, r7
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c0d8:	ed8d 0b00 	vstr	d0, [sp]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800c0dc:	f7f4 f8ec 	bl	80002b8 <__aeabi_dsub>
 800c0e0:	f7f4 fd96 	bl	8000c10 <__aeabi_d2f>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800c0e4:	f7f4 fa48 	bl	8000578 <__aeabi_f2d>
 800c0e8:	ed9d 0b00 	vldr	d0, [sp]
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	4602      	mov	r2, r0
 800c0f0:	ec51 0b10 	vmov	r0, r1, d0
 800c0f4:	f7f4 fbbe 	bl	8000874 <__aeabi_ddiv>
 800c0f8:	f7f4 fd8a 	bl	8000c10 <__aeabi_d2f>
		ans /= norm_560_CRI;
 800c0fc:	4b18      	ldr	r3, [pc, #96]	; (800c160 <calcSref_CRI+0x100>)
 800c0fe:	ee07 0a10 	vmov	s14, r0
 800c102:	edd3 7a00 	vldr	s15, [r3]
 800c106:	ee87 0a27 	vdiv.f32	s0, s14, s15
	else
	{
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
	}
	return ans;
}
 800c10a:	b003      	add	sp, #12
 800c10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
 800c10e:	4a15      	ldr	r2, [pc, #84]	; (800c164 <calcSref_CRI+0x104>)
 800c110:	4b15      	ldr	r3, [pc, #84]	; (800c168 <calcSref_CRI+0x108>)
 800c112:	4916      	ldr	r1, [pc, #88]	; (800c16c <calcSref_CRI+0x10c>)
 800c114:	4403      	add	r3, r0
 800c116:	4401      	add	r1, r0
 800c118:	4410      	add	r0, r2
 800c11a:	4a15      	ldr	r2, [pc, #84]	; (800c170 <calcSref_CRI+0x110>)
 800c11c:	ed91 7a00 	vldr	s14, [r1]
 800c120:	edd2 7a00 	vldr	s15, [r2]
 800c124:	ed90 0a00 	vldr	s0, [r0]
 800c128:	eea7 0a27 	vfma.f32	s0, s14, s15
 800c12c:	ed93 7a00 	vldr	s14, [r3]
 800c130:	4b10      	ldr	r3, [pc, #64]	; (800c174 <calcSref_CRI+0x114>)
 800c132:	edd3 7a00 	vldr	s15, [r3]
 800c136:	eea7 0a27 	vfma.f32	s0, s14, s15
	return ans;
 800c13a:	e7e6      	b.n	800c10a <calcSref_CRI+0xaa>
 800c13c:	f3af 8000 	nop.w
 800c140:	e826d695 	.word	0xe826d695
 800c144:	3e112e0b 	.word	0x3e112e0b
 800c148:	aba38759 	.word	0xaba38759
 800c14c:	3f8d7774 	.word	0x3f8d7774
 800c150:	00000000 	.word	0x00000000
 800c154:	c0140000 	.word	0xc0140000
 800c158:	20054948 	.word	0x20054948
 800c15c:	3ff00000 	.word	0x3ff00000
 800c160:	200909b0 	.word	0x200909b0
 800c164:	2004e93c 	.word	0x2004e93c
 800c168:	2005093c 	.word	0x2005093c
 800c16c:	2004f93c 	.word	0x2004f93c
 800c170:	20004650 	.word	0x20004650
 800c174:	20004654 	.word	0x20004654

0800c178 <CRI_func>:
		double x_i_ref = 0;
		double y_i_ref = 0;
		double z_i_ref = 0;

void CRI_func(uint16_t CCT_measure, float *Rabs)
{
 800c178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17c:	ed2d 8b08 	vpush	{d8-d11}
 800c180:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800c184:	b083      	sub	sp, #12
	int16_t Ra_temp = 0, Rall_temp = 0, R9_temp = 0;
	float s_ref_CRI[1024] = {0};
 800c186:	f44f 5280 	mov.w	r2, #4096	; 0x1000
{
 800c18a:	900c      	str	r0, [sp, #48]	; 0x30
 800c18c:	468a      	mov	sl, r1
	float s_ref_CRI[1024] = {0};
 800c18e:	a822      	add	r0, sp, #136	; 0x88
 800c190:	2100      	movs	r1, #0
 800c192:	f014 f876 	bl	8020282 <memset>
	float CRI_R_temp[1024] = {0};
 800c196:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800c19a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c19e:	2100      	movs	r1, #0
 800c1a0:	3008      	adds	r0, #8
 800c1a2:	f014 f86e 	bl	8020282 <memset>

	memset(Ri_temp, 0, sizeof(Ri_temp));
 800c1a6:	2278      	movs	r2, #120	; 0x78
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	48c1      	ldr	r0, [pc, #772]	; (800c4b0 <CRI_func+0x338>)
 800c1ac:	f014 f869 	bl	8020282 <memset>
	double y_ref = 0;
	double z_ref = 0;
	double u_ref = 0;
	double v_ref = 0;

	if (CCT_measure < 5000)
 800c1b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c1b2:	f241 3387 	movw	r3, #4999	; 0x1387
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	f200 8514 	bhi.w	800cbe4 <CRI_func+0xa6c>
	{
		calcNorm560_CRI(CCT_measure);
 800c1bc:	4610      	mov	r0, r2
 800c1be:	f7ff ff17 	bl	800bff0 <calcNorm560_CRI>
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
	}
	
	
	float u_test = colorimetry_uv[0];	
 800c1c2:	4bbc      	ldr	r3, [pc, #752]	; (800c4b4 <CRI_func+0x33c>)
	float v_test = colorimetry_uv[1];
	
	bar_CRI = 0.1;
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c1c4:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800c4b8 <CRI_func+0x340>
	float u_test = colorimetry_uv[0];	
 800c1c8:	edd3 7a00 	vldr	s15, [r3]
	bar_CRI = 0.1;
 800c1cc:	a1b2      	add	r1, pc, #712	; (adr r1, 800c498 <CRI_func+0x320>)
 800c1ce:	e9d1 0100 	ldrd	r0, r1, [r1]
	float u_test = colorimetry_uv[0];	
 800c1d2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
	float v_test = colorimetry_uv[1];
 800c1d6:	edd3 7a01 	vldr	s15, [r3, #4]
	bar_CRI = 0.1;
 800c1da:	4bb8      	ldr	r3, [pc, #736]	; (800c4bc <CRI_func+0x344>)
	float v_test = colorimetry_uv[1];
 800c1dc:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
	bar_CRI = 0.1;
 800c1e0:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c1e4:	210d      	movs	r1, #13
 800c1e6:	2055      	movs	r0, #85	; 0x55
 800c1e8:	f007 f854 	bl	8013294 <GUI_Bar_Measure>
	
	for (uint16_t y = 0; y < 1024; y++){
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c1ec:	4bb4      	ldr	r3, [pc, #720]	; (800c4c0 <CRI_func+0x348>)
 800c1ee:	ed93 7a00 	vldr	s14, [r3]
 800c1f2:	4bb4      	ldr	r3, [pc, #720]	; (800c4c4 <CRI_func+0x34c>)
 800c1f4:	f50a 5280 	add.w	r2, sl, #4096	; 0x1000
 800c1f8:	ecfa 6a01 	vldmia	sl!, {s13}
 800c1fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t y = 0; y < 1024; y++){
 800c200:	4552      	cmp	r2, sl
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c202:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t y = 0; y < 1024; y++){
 800c206:	d1f7      	bne.n	800c1f8 <CRI_func+0x80>
 800c208:	ed9f 7ba5 	vldr	d7, [pc, #660]	; 800c4a0 <CRI_func+0x328>
 800c20c:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800c210:	eeb0 8a47 	vmov.f32	s16, s14
 800c214:	eef0 8a67 	vmov.f32	s17, s15
 800c218:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800c21c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c220:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c224:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c228:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c22c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c230:	2300      	movs	r3, #0
 800c232:	9300      	str	r3, [sp, #0]
 800c234:	9310      	str	r3, [sp, #64]	; 0x40
 800c236:	9311      	str	r3, [sp, #68]	; 0x44
	}
	
	for (uint8_t i = 0; i < 15; i++)
	{
		bar_CRI += 0.05;
 800c238:	4ca0      	ldr	r4, [pc, #640]	; (800c4bc <CRI_func+0x344>)
		for (int j = 0; j < 1024; j++)
		{
			if (i == 0)
			{
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c23a:	4fa3      	ldr	r7, [pc, #652]	; (800c4c8 <CRI_func+0x350>)
 800c23c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800c4c4 <CRI_func+0x34c>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c240:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800c4f0 <CRI_func+0x378>
		bar_CRI += 0.05;
 800c244:	a398      	add	r3, pc, #608	; (adr r3, 800c4a8 <CRI_func+0x330>)
 800c246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c24e:	f7f4 f835 	bl	80002bc <__adddf3>
 800c252:	e9c4 0100 	strd	r0, r1, [r4]
		GUI_Bar_Measure(85, 13, bar_CRI);
 800c256:	f7f4 fcdb 	bl	8000c10 <__aeabi_d2f>
 800c25a:	210d      	movs	r1, #13
 800c25c:	ee00 0a10 	vmov	s0, r0
 800c260:	2055      	movs	r0, #85	; 0x55
 800c262:	f007 f817 	bl	8013294 <GUI_Bar_Measure>
		 x_i_test = 0;
 800c266:	4b99      	ldr	r3, [pc, #612]	; (800c4cc <CRI_func+0x354>)
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c268:	4899      	ldr	r0, [pc, #612]	; (800c4d0 <CRI_func+0x358>)
		 x_i_test = 0;
 800c26a:	ed83 8b00 	vstr	d8, [r3]
		 y_i_test = 0;
 800c26e:	4b99      	ldr	r3, [pc, #612]	; (800c4d4 <CRI_func+0x35c>)
 800c270:	ed83 8b00 	vstr	d8, [r3]
		 z_i_test = 0;
 800c274:	4b98      	ldr	r3, [pc, #608]	; (800c4d8 <CRI_func+0x360>)
 800c276:	ed83 8b00 	vstr	d8, [r3]
		 x_i_ref = 0;
 800c27a:	4b98      	ldr	r3, [pc, #608]	; (800c4dc <CRI_func+0x364>)
 800c27c:	ed83 8b00 	vstr	d8, [r3]
		 y_i_ref = 0;
 800c280:	4b97      	ldr	r3, [pc, #604]	; (800c4e0 <CRI_func+0x368>)
 800c282:	ed83 8b00 	vstr	d8, [r3]
		 z_i_ref = 0;
 800c286:	4b97      	ldr	r3, [pc, #604]	; (800c4e4 <CRI_func+0x36c>)
 800c288:	ed83 8b00 	vstr	d8, [r3]
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c28c:	9b00      	ldr	r3, [sp, #0]
 800c28e:	f50d 5284 	add.w	r2, sp, #4224	; 0x1080
 800c292:	3208      	adds	r2, #8
 800c294:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c298:	eb00 3003 	add.w	r0, r0, r3, lsl #12
 800c29c:	f002 fdd4 	bl	800ee48 <Calibration_Load_Pack>
 800c2a0:	2400      	movs	r4, #0
		for (int j = 0; j < 1024; j++)
 800c2a2:	4625      	mov	r5, r4
 800c2a4:	f89d 3000 	ldrb.w	r3, [sp]
 800c2a8:	930d      	str	r3, [sp, #52]	; 0x34
			if (i == 0)
 800c2aa:	9b00      	ldr	r3, [sp, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d150      	bne.n	800c352 <CRI_func+0x1da>
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c2b0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c2b2:	4628      	mov	r0, r5
 800c2b4:	f7ff fed4 	bl	800c060 <calcSref_CRI>
 800c2b8:	ab22      	add	r3, sp, #136	; 0x88
 800c2ba:	4423      	add	r3, r4
 800c2bc:	ed83 0a00 	vstr	s0, [r3]
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c2c0:	19e3      	adds	r3, r4, r7
 800c2c2:	edd3 9a00 	vldr	s19, [r3]
 800c2c6:	eb09 0304 	add.w	r3, r9, r4
 800c2ca:	edd3 7a00 	vldr	s15, [r3]
 800c2ce:	ee69 7aa7 	vmul.f32	s15, s19, s15
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c2d2:	eeb0 9a40 	vmov.f32	s18, s0
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c2d6:	ee17 0a90 	vmov	r0, s15
 800c2da:	f7f4 f94d 	bl	8000578 <__aeabi_f2d>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2e6:	f7f3 ffe9 	bl	80002bc <__adddf3>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c2ea:	eb04 0308 	add.w	r3, r4, r8
 800c2ee:	edd3 7a00 	vldr	s15, [r3]
 800c2f2:	ee69 7a27 	vmul.f32	s15, s18, s15
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c2f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c2fa:	ee17 0a90 	vmov	r0, s15
 800c2fe:	f7f4 f93b 	bl	8000578 <__aeabi_f2d>
 800c302:	4602      	mov	r2, r0
 800c304:	460b      	mov	r3, r1
 800c306:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c30a:	f7f3 ffd7 	bl	80002bc <__adddf3>
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c30e:	ee69 7a29 	vmul.f32	s15, s18, s19
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c312:	e9cd 0108 	strd	r0, r1, [sp, #32]
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c316:	ee17 0a90 	vmov	r0, s15
 800c31a:	f7f4 f92d 	bl	8000578 <__aeabi_f2d>
 800c31e:	4602      	mov	r2, r0
 800c320:	460b      	mov	r3, r1
 800c322:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c326:	f7f3 ffc9 	bl	80002bc <__adddf3>
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c32a:	4b6f      	ldr	r3, [pc, #444]	; (800c4e8 <CRI_func+0x370>)
 800c32c:	4423      	add	r3, r4
 800c32e:	edd3 7a00 	vldr	s15, [r3]
 800c332:	ee69 7a27 	vmul.f32	s15, s18, s15
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c336:	e9cd 0106 	strd	r0, r1, [sp, #24]
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c33a:	ee17 0a90 	vmov	r0, s15
 800c33e:	f7f4 f91b 	bl	8000578 <__aeabi_f2d>
 800c342:	4602      	mov	r2, r0
 800c344:	460b      	mov	r3, r1
 800c346:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c34a:	f7f3 ffb7 	bl	80002bc <__adddf3>
 800c34e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			}

			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c352:	f50d 5384 	add.w	r3, sp, #4224	; 0x1080
 800c356:	3308      	adds	r3, #8
 800c358:	4423      	add	r3, r4
 800c35a:	ed93 9a00 	vldr	s18, [r3]
 800c35e:	4e5b      	ldr	r6, [pc, #364]	; (800c4cc <CRI_func+0x354>)
 800c360:	eb09 0304 	add.w	r3, r9, r4
 800c364:	edd3 9a00 	vldr	s19, [r3]
 800c368:	eb04 0308 	add.w	r3, r4, r8
 800c36c:	ee69 9a29 	vmul.f32	s19, s18, s19
 800c370:	ed93 ba00 	vldr	s22, [r3]
 800c374:	ee69 7a8b 	vmul.f32	s15, s19, s22
		for (int j = 0; j < 1024; j++)
 800c378:	3501      	adds	r5, #1
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c37a:	ee17 0a90 	vmov	r0, s15
 800c37e:	f7f4 f8fb 	bl	8000578 <__aeabi_f2d>
 800c382:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c386:	f7f3 ff99 	bl	80002bc <__adddf3>
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c38a:	19e3      	adds	r3, r4, r7
 800c38c:	edd3 aa00 	vldr	s21, [r3]
 800c390:	ee69 7aaa 	vmul.f32	s15, s19, s21
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c394:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c398:	4e4e      	ldr	r6, [pc, #312]	; (800c4d4 <CRI_func+0x35c>)
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c39a:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c39e:	ee17 0a90 	vmov	r0, s15
 800c3a2:	f7f4 f8e9 	bl	8000578 <__aeabi_f2d>
 800c3a6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c3aa:	f7f3 ff87 	bl	80002bc <__adddf3>
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c3ae:	4b4e      	ldr	r3, [pc, #312]	; (800c4e8 <CRI_func+0x370>)
 800c3b0:	4423      	add	r3, r4
 800c3b2:	ed93 aa00 	vldr	s20, [r3]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c3b6:	4682      	mov	sl, r0
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c3b8:	ee69 7a8a 	vmul.f32	s15, s19, s20
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c3bc:	468b      	mov	fp, r1
 800c3be:	e9c6 ab00 	strd	sl, fp, [r6]
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c3c2:	4e45      	ldr	r6, [pc, #276]	; (800c4d8 <CRI_func+0x360>)
 800c3c4:	ee17 0a90 	vmov	r0, s15
 800c3c8:	f7f4 f8d6 	bl	8000578 <__aeabi_f2d>
 800c3cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c3d0:	f7f3 ff74 	bl	80002bc <__adddf3>

			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c3d4:	ab22      	add	r3, sp, #136	; 0x88
 800c3d6:	4423      	add	r3, r4
 800c3d8:	edd3 7a00 	vldr	s15, [r3]
 800c3dc:	ee29 9a27 	vmul.f32	s18, s18, s15
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c3e0:	e9c6 0100 	strd	r0, r1, [r6]
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c3e4:	ee6b 7a09 	vmul.f32	s15, s22, s18
 800c3e8:	4e3c      	ldr	r6, [pc, #240]	; (800c4dc <CRI_func+0x364>)
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c3ea:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c3ee:	ee17 0a90 	vmov	r0, s15
 800c3f2:	f7f4 f8c1 	bl	8000578 <__aeabi_f2d>
 800c3f6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c3fa:	f7f3 ff5f 	bl	80002bc <__adddf3>
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c3fe:	ee6a 7a89 	vmul.f32	s15, s21, s18
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c402:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c406:	4e36      	ldr	r6, [pc, #216]	; (800c4e0 <CRI_func+0x368>)
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c408:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c40c:	ee17 0a90 	vmov	r0, s15
 800c410:	f7f4 f8b2 	bl	8000578 <__aeabi_f2d>
 800c414:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c418:	f7f3 ff50 	bl	80002bc <__adddf3>
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c41c:	ee6a 7a09 	vmul.f32	s15, s20, s18
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c420:	e9c6 0100 	strd	r0, r1, [r6]
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c424:	4e2f      	ldr	r6, [pc, #188]	; (800c4e4 <CRI_func+0x36c>)
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c426:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c42a:	ee17 0a90 	vmov	r0, s15
 800c42e:	f7f4 f8a3 	bl	8000578 <__aeabi_f2d>
 800c432:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c436:	f7f3 ff41 	bl	80002bc <__adddf3>
		for (int j = 0; j < 1024; j++)
 800c43a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c43e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800c442:	e9c6 0100 	strd	r0, r1, [r6]
 800c446:	f104 0404 	add.w	r4, r4, #4
		for (int j = 0; j < 1024; j++)
 800c44a:	f47f af2b 	bne.w	800c2a4 <CRI_func+0x12c>
		}
		if (i == 0) 
 800c44e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c450:	2b00      	cmp	r3, #0
 800c452:	f040 8089 	bne.w	800c568 <CRI_func+0x3f0>
		{
			k_ref = 100 / y_ref;
 800c456:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c45a:	2000      	movs	r0, #0
 800c45c:	4923      	ldr	r1, [pc, #140]	; (800c4ec <CRI_func+0x374>)
 800c45e:	f7f4 fa09 	bl	8000874 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800c462:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
			k_ref = 100 / y_ref;
 800c466:	e9cd 0102 	strd	r0, r1, [sp, #8]
			k_test = 100 / k_test;
 800c46a:	2000      	movs	r0, #0
 800c46c:	491f      	ldr	r1, [pc, #124]	; (800c4ec <CRI_func+0x374>)
 800c46e:	f7f4 fa01 	bl	8000874 <__aeabi_ddiv>
			x_ref *= k_ref;
 800c472:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_test = 100 / k_test;
 800c476:	e9cd 0104 	strd	r0, r1, [sp, #16]
			x_ref *= k_ref;
 800c47a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c47e:	f7f4 f8cf 	bl	8000620 <__aeabi_dmul>
			y_ref *= k_ref;
 800c482:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			x_ref *= k_ref;
 800c486:	e9cd 0108 	strd	r0, r1, [sp, #32]
			y_ref *= k_ref;
 800c48a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c48e:	f7f4 f8c7 	bl	8000620 <__aeabi_dmul>
			z_ref *= k_ref;
 800c492:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c496:	e02d      	b.n	800c4f4 <CRI_func+0x37c>
 800c498:	9999999a 	.word	0x9999999a
 800c49c:	3fb99999 	.word	0x3fb99999
	...
 800c4a8:	9999999a 	.word	0x9999999a
 800c4ac:	3fa99999 	.word	0x3fa99999
 800c4b0:	20090a10 	.word	0x20090a10
 800c4b4:	2008f530 	.word	0x2008f530
 800c4b8:	3dcccccd 	.word	0x3dcccccd
 800c4bc:	200909c0 	.word	0x200909c0
 800c4c0:	200958fc 	.word	0x200958fc
 800c4c4:	2000466c 	.word	0x2000466c
 800c4c8:	20052940 	.word	0x20052940
 800c4cc:	20005678 	.word	0x20005678
 800c4d0:	0811b040 	.word	0x0811b040
 800c4d4:	20005688 	.word	0x20005688
 800c4d8:	20005698 	.word	0x20005698
 800c4dc:	20005670 	.word	0x20005670
 800c4e0:	20005680 	.word	0x20005680
 800c4e4:	20005690 	.word	0x20005690
 800c4e8:	2008d514 	.word	0x2008d514
 800c4ec:	40590000 	.word	0x40590000
 800c4f0:	2008a514 	.word	0x2008a514
			y_ref *= k_ref;
 800c4f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
			z_ref *= k_ref;
 800c4f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c4fc:	f7f4 f890 	bl	8000620 <__aeabi_dmul>
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c500:	2200      	movs	r2, #0
			z_ref *= k_ref;
 800c502:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c506:	4bb7      	ldr	r3, [pc, #732]	; (800c7e4 <CRI_func+0x66c>)
 800c508:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c50c:	f7f4 f888 	bl	8000620 <__aeabi_dmul>
 800c510:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c514:	f7f3 fed2 	bl	80002bc <__adddf3>
 800c518:	2200      	movs	r2, #0
 800c51a:	4604      	mov	r4, r0
 800c51c:	460d      	mov	r5, r1
 800c51e:	4bb2      	ldr	r3, [pc, #712]	; (800c7e8 <CRI_func+0x670>)
 800c520:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c524:	f7f4 f87c 	bl	8000620 <__aeabi_dmul>
 800c528:	4602      	mov	r2, r0
 800c52a:	460b      	mov	r3, r1
 800c52c:	4620      	mov	r0, r4
 800c52e:	4629      	mov	r1, r5
 800c530:	f7f3 fec4 	bl	80002bc <__adddf3>
 800c534:	2200      	movs	r2, #0
 800c536:	4604      	mov	r4, r0
 800c538:	460d      	mov	r5, r1
 800c53a:	4bac      	ldr	r3, [pc, #688]	; (800c7ec <CRI_func+0x674>)
 800c53c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c540:	f7f4 f86e 	bl	8000620 <__aeabi_dmul>
 800c544:	4622      	mov	r2, r4
 800c546:	462b      	mov	r3, r5
 800c548:	f7f4 f994 	bl	8000874 <__aeabi_ddiv>
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800c54c:	2200      	movs	r2, #0
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c54e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800c552:	4ba7      	ldr	r3, [pc, #668]	; (800c7f0 <CRI_func+0x678>)
 800c554:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c558:	f7f4 f862 	bl	8000620 <__aeabi_dmul>
 800c55c:	4622      	mov	r2, r4
 800c55e:	462b      	mov	r3, r5
 800c560:	f7f4 f988 	bl	8000874 <__aeabi_ddiv>
 800c564:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58

		}	
		x_i_test *= k_test;	
 800c568:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c56c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c570:	f7f4 f856 	bl	8000620 <__aeabi_dmul>
 800c574:	4b9f      	ldr	r3, [pc, #636]	; (800c7f4 <CRI_func+0x67c>)
 800c576:	4680      	mov	r8, r0
 800c578:	4689      	mov	r9, r1
 800c57a:	e9c3 8900 	strd	r8, r9, [r3]
		y_i_test *= k_test;
 800c57e:	4652      	mov	r2, sl
 800c580:	465b      	mov	r3, fp
 800c582:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c586:	f7f4 f84b 	bl	8000620 <__aeabi_dmul>
 800c58a:	4b9b      	ldr	r3, [pc, #620]	; (800c7f8 <CRI_func+0x680>)
 800c58c:	4682      	mov	sl, r0
 800c58e:	468b      	mov	fp, r1
 800c590:	e9c3 ab00 	strd	sl, fp, [r3]
		z_i_test *= k_test;
 800c594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c598:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c59c:	f7f4 f840 	bl	8000620 <__aeabi_dmul>
 800c5a0:	4b96      	ldr	r3, [pc, #600]	; (800c7fc <CRI_func+0x684>)
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	460d      	mov	r5, r1
 800c5a6:	e9c3 4500 	strd	r4, r5, [r3]
		
		x_i_ref *= k_ref;
 800c5aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5ae:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c5b2:	f7f4 f835 	bl	8000620 <__aeabi_dmul>
 800c5b6:	4b92      	ldr	r3, [pc, #584]	; (800c800 <CRI_func+0x688>)
 800c5b8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800c5bc:	e9c3 0100 	strd	r0, r1, [r3]
		y_i_ref *= k_ref;
 800c5c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c5c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5c8:	f7f4 f82a 	bl	8000620 <__aeabi_dmul>
 800c5cc:	4b8d      	ldr	r3, [pc, #564]	; (800c804 <CRI_func+0x68c>)
 800c5ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c5d2:	e9c3 0100 	strd	r0, r1, [r3]
		z_i_ref *= k_ref;	
 800c5d6:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800c5da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c5de:	f7f4 f81f 	bl	8000620 <__aeabi_dmul>
 800c5e2:	4b89      	ldr	r3, [pc, #548]	; (800c808 <CRI_func+0x690>)
 800c5e4:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800c5e8:	e9c3 0100 	strd	r0, r1, [r3]
	
		 u_test_s = 4 * x_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	4b7d      	ldr	r3, [pc, #500]	; (800c7e4 <CRI_func+0x66c>)
 800c5f0:	4650      	mov	r0, sl
 800c5f2:	4659      	mov	r1, fp
 800c5f4:	f7f4 f814 	bl	8000620 <__aeabi_dmul>
 800c5f8:	4642      	mov	r2, r8
 800c5fa:	464b      	mov	r3, r9
 800c5fc:	f7f3 fe5e 	bl	80002bc <__adddf3>
 800c600:	2200      	movs	r2, #0
 800c602:	4606      	mov	r6, r0
 800c604:	460f      	mov	r7, r1
 800c606:	4b78      	ldr	r3, [pc, #480]	; (800c7e8 <CRI_func+0x670>)
 800c608:	4620      	mov	r0, r4
 800c60a:	4629      	mov	r1, r5
 800c60c:	f7f4 f808 	bl	8000620 <__aeabi_dmul>
 800c610:	4602      	mov	r2, r0
 800c612:	460b      	mov	r3, r1
 800c614:	4630      	mov	r0, r6
 800c616:	4639      	mov	r1, r7
 800c618:	f7f3 fe50 	bl	80002bc <__adddf3>
 800c61c:	2200      	movs	r2, #0
 800c61e:	4604      	mov	r4, r0
 800c620:	460d      	mov	r5, r1
 800c622:	4b72      	ldr	r3, [pc, #456]	; (800c7ec <CRI_func+0x674>)
 800c624:	4640      	mov	r0, r8
 800c626:	4649      	mov	r1, r9
 800c628:	f7f3 fffa 	bl	8000620 <__aeabi_dmul>
 800c62c:	4622      	mov	r2, r4
 800c62e:	462b      	mov	r3, r5
 800c630:	f7f4 f920 	bl	8000874 <__aeabi_ddiv>
 800c634:	4b75      	ldr	r3, [pc, #468]	; (800c80c <CRI_func+0x694>)
 800c636:	4680      	mov	r8, r0
 800c638:	4689      	mov	r9, r1
 800c63a:	e9c3 8900 	strd	r8, r9, [r3]
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c63e:	2200      	movs	r2, #0
 800c640:	4b6b      	ldr	r3, [pc, #428]	; (800c7f0 <CRI_func+0x678>)
 800c642:	4650      	mov	r0, sl
 800c644:	4659      	mov	r1, fp
 800c646:	f7f3 ffeb 	bl	8000620 <__aeabi_dmul>
 800c64a:	4622      	mov	r2, r4
 800c64c:	462b      	mov	r3, r5
 800c64e:	f7f4 f911 	bl	8000874 <__aeabi_ddiv>
 800c652:	4b6f      	ldr	r3, [pc, #444]	; (800c810 <CRI_func+0x698>)
 800c654:	4606      	mov	r6, r0
 800c656:	460f      	mov	r7, r1
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c658:	ec4b ab10 	vmov	d0, sl, fp
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c65c:	e9c3 6700 	strd	r6, r7, [r3]
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c660:	f016 fd16 	bl	8023090 <cbrt>
 800c664:	2200      	movs	r2, #0
 800c666:	ec51 0b10 	vmov	r0, r1, d0
 800c66a:	4b6a      	ldr	r3, [pc, #424]	; (800c814 <CRI_func+0x69c>)
 800c66c:	f7f3 ffd8 	bl	8000620 <__aeabi_dmul>
 800c670:	2200      	movs	r2, #0
 800c672:	4b69      	ldr	r3, [pc, #420]	; (800c818 <CRI_func+0x6a0>)
 800c674:	f7f3 fe20 	bl	80002b8 <__aeabi_dsub>
 800c678:	4b68      	ldr	r3, [pc, #416]	; (800c81c <CRI_func+0x6a4>)
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c67a:	2200      	movs	r2, #0
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c67c:	e9c3 0100 	strd	r0, r1, [r3]
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c680:	4b67      	ldr	r3, [pc, #412]	; (800c820 <CRI_func+0x6a8>)
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c682:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c686:	f7f3 ffcb 	bl	8000620 <__aeabi_dmul>
 800c68a:	4604      	mov	r4, r0
 800c68c:	9820      	ldr	r0, [sp, #128]	; 0x80
 800c68e:	460d      	mov	r5, r1
 800c690:	f7f3 ff72 	bl	8000578 <__aeabi_f2d>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4640      	mov	r0, r8
 800c69a:	4649      	mov	r1, r9
 800c69c:	f7f3 fe0c 	bl	80002b8 <__aeabi_dsub>
 800c6a0:	4622      	mov	r2, r4
 800c6a2:	462b      	mov	r3, r5
 800c6a4:	f7f3 ffbc 	bl	8000620 <__aeabi_dmul>
 800c6a8:	4b5e      	ldr	r3, [pc, #376]	; (800c824 <CRI_func+0x6ac>)
 800c6aa:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800c6ae:	e9c3 0100 	strd	r0, r1, [r3]
		 v_i_test = 13 * L_i_test * (v_test_s - v_test);
 800c6b2:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c6b4:	f7f3 ff60 	bl	8000578 <__aeabi_f2d>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	4630      	mov	r0, r6
 800c6be:	4639      	mov	r1, r7
 800c6c0:	f7f3 fdfa 	bl	80002b8 <__aeabi_dsub>
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	462b      	mov	r3, r5
 800c6c8:	f7f3 ffaa 	bl	8000620 <__aeabi_dmul>
 800c6cc:	4b56      	ldr	r3, [pc, #344]	; (800c828 <CRI_func+0x6b0>)
 800c6ce:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800c6d2:	e9c3 0100 	strd	r0, r1, [r3]

		 u_ref_s = 4 * x_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	4b42      	ldr	r3, [pc, #264]	; (800c7e4 <CRI_func+0x66c>)
 800c6da:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c6de:	f7f3 ff9f 	bl	8000620 <__aeabi_dmul>
 800c6e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c6e6:	f7f3 fde9 	bl	80002bc <__adddf3>
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	4604      	mov	r4, r0
 800c6ee:	460d      	mov	r5, r1
 800c6f0:	4b3d      	ldr	r3, [pc, #244]	; (800c7e8 <CRI_func+0x670>)
 800c6f2:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800c6f6:	f7f3 ff93 	bl	8000620 <__aeabi_dmul>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	460b      	mov	r3, r1
 800c6fe:	4620      	mov	r0, r4
 800c700:	4629      	mov	r1, r5
 800c702:	f7f3 fddb 	bl	80002bc <__adddf3>
 800c706:	2200      	movs	r2, #0
 800c708:	4606      	mov	r6, r0
 800c70a:	460f      	mov	r7, r1
 800c70c:	4b37      	ldr	r3, [pc, #220]	; (800c7ec <CRI_func+0x674>)
 800c70e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800c712:	f7f3 ff85 	bl	8000620 <__aeabi_dmul>
 800c716:	4632      	mov	r2, r6
 800c718:	463b      	mov	r3, r7
 800c71a:	f7f4 f8ab 	bl	8000874 <__aeabi_ddiv>
 800c71e:	4b43      	ldr	r3, [pc, #268]	; (800c82c <CRI_func+0x6b4>)
 800c720:	4604      	mov	r4, r0
 800c722:	460d      	mov	r5, r1
 800c724:	e9c3 4500 	strd	r4, r5, [r3]
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c728:	2200      	movs	r2, #0
 800c72a:	4b31      	ldr	r3, [pc, #196]	; (800c7f0 <CRI_func+0x678>)
 800c72c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c730:	f7f3 ff76 	bl	8000620 <__aeabi_dmul>
 800c734:	4632      	mov	r2, r6
 800c736:	463b      	mov	r3, r7
 800c738:	f7f4 f89c 	bl	8000874 <__aeabi_ddiv>
 800c73c:	4b3c      	ldr	r3, [pc, #240]	; (800c830 <CRI_func+0x6b8>)
 800c73e:	4682      	mov	sl, r0
 800c740:	468b      	mov	fp, r1
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800c742:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c746:	e9c3 ab00 	strd	sl, fp, [r3]
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800c74a:	f016 fca1 	bl	8023090 <cbrt>
 800c74e:	2200      	movs	r2, #0
 800c750:	ec51 0b10 	vmov	r0, r1, d0
 800c754:	4b2f      	ldr	r3, [pc, #188]	; (800c814 <CRI_func+0x69c>)
 800c756:	f7f3 ff63 	bl	8000620 <__aeabi_dmul>
 800c75a:	2200      	movs	r2, #0
 800c75c:	4b2e      	ldr	r3, [pc, #184]	; (800c818 <CRI_func+0x6a0>)
 800c75e:	f7f3 fdab 	bl	80002b8 <__aeabi_dsub>
 800c762:	4b34      	ldr	r3, [pc, #208]	; (800c834 <CRI_func+0x6bc>)
 800c764:	4606      	mov	r6, r0
 800c766:	460f      	mov	r7, r1
 800c768:	e9c3 6700 	strd	r6, r7, [r3]
		 u_i_ref = 13 * L_i_ref * (u_ref_s - u_ref);
 800c76c:	2200      	movs	r2, #0
 800c76e:	4b2c      	ldr	r3, [pc, #176]	; (800c820 <CRI_func+0x6a8>)
 800c770:	f7f3 ff56 	bl	8000620 <__aeabi_dmul>
 800c774:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c778:	4680      	mov	r8, r0
 800c77a:	4689      	mov	r9, r1
 800c77c:	4620      	mov	r0, r4
 800c77e:	4629      	mov	r1, r5
 800c780:	f7f3 fd9a 	bl	80002b8 <__aeabi_dsub>
 800c784:	4642      	mov	r2, r8
 800c786:	464b      	mov	r3, r9
 800c788:	f7f3 ff4a 	bl	8000620 <__aeabi_dmul>
 800c78c:	4b2a      	ldr	r3, [pc, #168]	; (800c838 <CRI_func+0x6c0>)
 800c78e:	4604      	mov	r4, r0
 800c790:	460d      	mov	r5, r1
 800c792:	e9c3 4500 	strd	r4, r5, [r3]
		 v_i_ref = 13 * L_i_ref * (v_ref_s - v_ref);
 800c796:	4650      	mov	r0, sl
 800c798:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800c79c:	4659      	mov	r1, fp
 800c79e:	f7f3 fd8b 	bl	80002b8 <__aeabi_dsub>
 800c7a2:	4642      	mov	r2, r8
 800c7a4:	464b      	mov	r3, r9
 800c7a6:	f7f3 ff3b 	bl	8000620 <__aeabi_dmul>
 800c7aa:	4b24      	ldr	r3, [pc, #144]	; (800c83c <CRI_func+0x6c4>)
 800c7ac:	4680      	mov	r8, r0
 800c7ae:	4689      	mov	r9, r1
 800c7b0:	e9c3 8900 	strd	r8, r9, [r3]

		 delta_L = L_i_ref - L_i_test;
 800c7b4:	4630      	mov	r0, r6
 800c7b6:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c7ba:	4639      	mov	r1, r7
 800c7bc:	f7f3 fd7c 	bl	80002b8 <__aeabi_dsub>
 800c7c0:	4b1f      	ldr	r3, [pc, #124]	; (800c840 <CRI_func+0x6c8>)
 800c7c2:	4606      	mov	r6, r0
 800c7c4:	460f      	mov	r7, r1
 800c7c6:	e9c3 6700 	strd	r6, r7, [r3]
		 delta_u = u_i_ref - u_i_test;
 800c7ca:	4620      	mov	r0, r4
 800c7cc:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	f7f3 fd71 	bl	80002b8 <__aeabi_dsub>
 800c7d6:	4b1b      	ldr	r3, [pc, #108]	; (800c844 <CRI_func+0x6cc>)
 800c7d8:	4604      	mov	r4, r0
 800c7da:	460d      	mov	r5, r1
 800c7dc:	e9c3 4500 	strd	r4, r5, [r3]
		 delta_v = v_i_ref - v_i_test;	
 800c7e0:	4640      	mov	r0, r8
 800c7e2:	e031      	b.n	800c848 <CRI_func+0x6d0>
 800c7e4:	402e0000 	.word	0x402e0000
 800c7e8:	40080000 	.word	0x40080000
 800c7ec:	40100000 	.word	0x40100000
 800c7f0:	40180000 	.word	0x40180000
 800c7f4:	20005678 	.word	0x20005678
 800c7f8:	20005688 	.word	0x20005688
 800c7fc:	20005698 	.word	0x20005698
 800c800:	20005670 	.word	0x20005670
 800c804:	20005680 	.word	0x20005680
 800c808:	20005690 	.word	0x20005690
 800c80c:	200909e0 	.word	0x200909e0
 800c810:	20090990 	.word	0x20090990
 800c814:	40390000 	.word	0x40390000
 800c818:	40310000 	.word	0x40310000
 800c81c:	20090a08 	.word	0x20090a08
 800c820:	402a0000 	.word	0x402a0000
 800c824:	20090998 	.word	0x20090998
 800c828:	200909d8 	.word	0x200909d8
 800c82c:	20090a00 	.word	0x20090a00
 800c830:	200909a0 	.word	0x200909a0
 800c834:	200909e8 	.word	0x200909e8
 800c838:	200909b8 	.word	0x200909b8
 800c83c:	20090988 	.word	0x20090988
 800c840:	200909d0 	.word	0x200909d0
 800c844:	200909c8 	.word	0x200909c8
 800c848:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800c84c:	4649      	mov	r1, r9
 800c84e:	f7f3 fd33 	bl	80002b8 <__aeabi_dsub>
 800c852:	4bd5      	ldr	r3, [pc, #852]	; (800cba8 <CRI_func+0xa30>)
 800c854:	4680      	mov	r8, r0
 800c856:	4689      	mov	r9, r1
		
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800c858:	4632      	mov	r2, r6
		 delta_v = v_i_ref - v_i_test;	
 800c85a:	e9c3 8900 	strd	r8, r9, [r3]
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800c85e:	4630      	mov	r0, r6
 800c860:	463b      	mov	r3, r7
 800c862:	4639      	mov	r1, r7
 800c864:	f7f3 fedc 	bl	8000620 <__aeabi_dmul>
 800c868:	4622      	mov	r2, r4
 800c86a:	462b      	mov	r3, r5
 800c86c:	4606      	mov	r6, r0
 800c86e:	460f      	mov	r7, r1
 800c870:	4620      	mov	r0, r4
 800c872:	4629      	mov	r1, r5
 800c874:	f7f3 fed4 	bl	8000620 <__aeabi_dmul>
 800c878:	4602      	mov	r2, r0
 800c87a:	460b      	mov	r3, r1
 800c87c:	4630      	mov	r0, r6
 800c87e:	4639      	mov	r1, r7
 800c880:	f7f3 fd1c 	bl	80002bc <__adddf3>
 800c884:	4642      	mov	r2, r8
 800c886:	4604      	mov	r4, r0
 800c888:	460d      	mov	r5, r1
 800c88a:	464b      	mov	r3, r9
 800c88c:	4640      	mov	r0, r8
 800c88e:	4649      	mov	r1, r9
 800c890:	f7f3 fec6 	bl	8000620 <__aeabi_dmul>
 800c894:	4602      	mov	r2, r0
 800c896:	460b      	mov	r3, r1
 800c898:	4620      	mov	r0, r4
 800c89a:	4629      	mov	r1, r5
 800c89c:	f7f3 fd0e 	bl	80002bc <__adddf3>
 800c8a0:	ec41 0b10 	vmov	d0, r0, r1
 800c8a4:	f016 ffa8 	bl	80237f8 <sqrt>
 800c8a8:	4bc0      	ldr	r3, [pc, #768]	; (800cbac <CRI_func+0xa34>)
 800c8aa:	ec51 0b10 	vmov	r0, r1, d0
 800c8ae:	ed83 0b00 	vstr	d0, [r3]
		Ri_temp[i] = 100 - 4.6*delta_E_CRI;
 800c8b2:	a39b      	add	r3, pc, #620	; (adr r3, 800cb20 <CRI_func+0x9a8>)
 800c8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8b8:	f7f3 feb2 	bl	8000620 <__aeabi_dmul>
 800c8bc:	4602      	mov	r2, r0
 800c8be:	460b      	mov	r3, r1
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	49bb      	ldr	r1, [pc, #748]	; (800cbb0 <CRI_func+0xa38>)
 800c8c4:	f7f3 fcf8 	bl	80002b8 <__aeabi_dsub>
 800c8c8:	9a00      	ldr	r2, [sp, #0]
 800c8ca:	4bba      	ldr	r3, [pc, #744]	; (800cbb4 <CRI_func+0xa3c>)
 800c8cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8d0:	e9c3 0100 	strd	r0, r1, [r3]
		Ri[i] = (int8_t)Ri_temp[i];
 800c8d4:	f7f4 f954 	bl	8000b80 <__aeabi_d2iz>
 800c8d8:	4bb7      	ldr	r3, [pc, #732]	; (800cbb8 <CRI_func+0xa40>)
 800c8da:	9a00      	ldr	r2, [sp, #0]
 800c8dc:	b240      	sxtb	r0, r0
 800c8de:	54d0      	strb	r0, [r2, r3]
		
		if (i < 8)
 800c8e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8e2:	2b07      	cmp	r3, #7
 800c8e4:	f200 8111 	bhi.w	800cb0a <CRI_func+0x992>
			Ra_temp += Ri[i];
 800c8e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c8ea:	4403      	add	r3, r0
 800c8ec:	b21b      	sxth	r3, r3
 800c8ee:	9311      	str	r3, [sp, #68]	; 0x44
		if (i == 8)
			R9 = Ri[i];
		if(i < 14)
 800c8f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c8f2:	2b0e      	cmp	r3, #14
 800c8f4:	f040 810f 	bne.w	800cb16 <CRI_func+0x99e>
			Rall_temp += Ri[i];
		
		memset(CRI_R_temp, 0, sizeof(CRI_R_temp));		
 800c8f8:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800c8fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c900:	2100      	movs	r1, #0
 800c902:	3008      	adds	r0, #8
 800c904:	f013 fcbd 	bl	8020282 <memset>
 800c908:	9b00      	ldr	r3, [sp, #0]
 800c90a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 15; i++)
 800c90c:	2b0f      	cmp	r3, #15
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	f47f ac92 	bne.w	800c238 <CRI_func+0xc0>
	}
	
	bar_CRI = 0.9;
 800c914:	a384      	add	r3, pc, #528	; (adr r3, 800cb28 <CRI_func+0x9b0>)
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	4ca8      	ldr	r4, [pc, #672]	; (800cbbc <CRI_func+0xa44>)
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c91c:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 800cbc0 <CRI_func+0xa48>
 800c920:	210d      	movs	r1, #13
 800c922:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 0.9;
 800c924:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c928:	f006 fcb4 	bl	8013294 <GUI_Bar_Measure>
	
	Rall_temp /= 14;
 800c92c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	Rall = (int8_t)Rall_temp;
	
	Ra_temp /= 8;
 800c92e:	9a11      	ldr	r2, [sp, #68]	; 0x44
	Rall_temp /= 14;
 800c930:	200e      	movs	r0, #14
 800c932:	fb93 f0f0 	sdiv	r0, r3, r0
	Rall = (int8_t)Rall_temp;
 800c936:	4ba3      	ldr	r3, [pc, #652]	; (800cbc4 <CRI_func+0xa4c>)
 800c938:	7018      	strb	r0, [r3, #0]
	Ra_temp /= 8;
 800c93a:	2308      	movs	r3, #8
 800c93c:	fb92 f3f3 	sdiv	r3, r2, r3
	Ra = (int8_t)Ra_temp;
 800c940:	4aa1      	ldr	r2, [pc, #644]	; (800cbc8 <CRI_func+0xa50>)
 800c942:	7013      	strb	r3, [r2, #0]
	
	bar_CRI = 1.0;
 800c944:	4ba1      	ldr	r3, [pc, #644]	; (800cbcc <CRI_func+0xa54>)
 800c946:	2200      	movs	r2, #0
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c948:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c94c:	210d      	movs	r1, #13
 800c94e:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 1.0;
 800c950:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c954:	f006 fc9e 	bl	8013294 <GUI_Bar_Measure>
 800c958:	f50d 5d02 	add.w	sp, sp, #8320	; 0x2080
 800c95c:	b003      	add	sp, #12
 800c95e:	ecbd 8b08 	vpop	{d8-d11}
 800c962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c966:	ee68 8a08 	vmul.f32	s17, s16, s16
 800c96a:	ee68 7a28 	vmul.f32	s15, s16, s17
 800c96e:	ee17 0a90 	vmov	r0, s15
 800c972:	f7f3 fe01 	bl	8000578 <__aeabi_f2d>
 800c976:	4602      	mov	r2, r0
 800c978:	460b      	mov	r3, r1
 800c97a:	a16d      	add	r1, pc, #436	; (adr r1, 800cb30 <CRI_func+0x9b8>)
 800c97c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c980:	f7f3 ff78 	bl	8000874 <__aeabi_ddiv>
 800c984:	4606      	mov	r6, r0
 800c986:	ee18 0a90 	vmov	r0, s17
 800c98a:	460f      	mov	r7, r1
 800c98c:	f7f3 fdf4 	bl	8000578 <__aeabi_f2d>
 800c990:	4602      	mov	r2, r0
 800c992:	460b      	mov	r3, r1
 800c994:	a168      	add	r1, pc, #416	; (adr r1, 800cb38 <CRI_func+0x9c0>)
 800c996:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c99a:	f7f3 ff6b 	bl	8000874 <__aeabi_ddiv>
 800c99e:	4602      	mov	r2, r0
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4630      	mov	r0, r6
 800c9a4:	4639      	mov	r1, r7
 800c9a6:	f7f3 fc89 	bl	80002bc <__adddf3>
 800c9aa:	4606      	mov	r6, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800c9ac:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c9b0:	460f      	mov	r7, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800c9b2:	f7f3 fde1 	bl	8000578 <__aeabi_f2d>
 800c9b6:	4602      	mov	r2, r0
 800c9b8:	460b      	mov	r3, r1
 800c9ba:	a161      	add	r1, pc, #388	; (adr r1, 800cb40 <CRI_func+0x9c8>)
 800c9bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c9c0:	f7f3 ff58 	bl	8000874 <__aeabi_ddiv>
 800c9c4:	4602      	mov	r2, r0
 800c9c6:	460b      	mov	r3, r1
 800c9c8:	4630      	mov	r0, r6
 800c9ca:	4639      	mov	r1, r7
 800c9cc:	f7f3 fc76 	bl	80002bc <__adddf3>
 800c9d0:	a35d      	add	r3, pc, #372	; (adr r3, 800cb48 <CRI_func+0x9d0>)
 800c9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800c9d6:	f7f3 fc71 	bl	80002bc <__adddf3>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c9da:	e9c4 0100 	strd	r0, r1, [r4]
		yD_CRI = -3 * xD_CRI*xD_CRI + 2.87*xD_CRI - 0.275;
 800c9de:	e9d4 4500 	ldrd	r4, r5, [r4]
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	4b7a      	ldr	r3, [pc, #488]	; (800cbd0 <CRI_func+0xa58>)
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	4629      	mov	r1, r5
 800c9ea:	f7f3 fe19 	bl	8000620 <__aeabi_dmul>
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	462b      	mov	r3, r5
 800c9f2:	f7f3 fe15 	bl	8000620 <__aeabi_dmul>
 800c9f6:	a356      	add	r3, pc, #344	; (adr r3, 800cb50 <CRI_func+0x9d8>)
 800c9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fc:	4606      	mov	r6, r0
 800c9fe:	460f      	mov	r7, r1
 800ca00:	4620      	mov	r0, r4
 800ca02:	4629      	mov	r1, r5
 800ca04:	f7f3 fe0c 	bl	8000620 <__aeabi_dmul>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	4639      	mov	r1, r7
 800ca10:	f7f3 fc54 	bl	80002bc <__adddf3>
 800ca14:	a350      	add	r3, pc, #320	; (adr r3, 800cb58 <CRI_func+0x9e0>)
 800ca16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca1a:	f7f3 fc4d 	bl	80002b8 <__aeabi_dsub>
 800ca1e:	4b6d      	ldr	r3, [pc, #436]	; (800cbd4 <CRI_func+0xa5c>)
 800ca20:	4606      	mov	r6, r0
 800ca22:	460f      	mov	r7, r1
 800ca24:	e9c3 6700 	strd	r6, r7, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800ca28:	4620      	mov	r0, r4
 800ca2a:	a34d      	add	r3, pc, #308	; (adr r3, 800cb60 <CRI_func+0x9e8>)
 800ca2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca30:	4629      	mov	r1, r5
 800ca32:	f7f3 fdf5 	bl	8000620 <__aeabi_dmul>
 800ca36:	a34c      	add	r3, pc, #304	; (adr r3, 800cb68 <CRI_func+0x9f0>)
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	f7f3 fc3e 	bl	80002bc <__adddf3>
 800ca40:	a34b      	add	r3, pc, #300	; (adr r3, 800cb70 <CRI_func+0x9f8>)
 800ca42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca46:	4680      	mov	r8, r0
 800ca48:	4689      	mov	r9, r1
 800ca4a:	4630      	mov	r0, r6
 800ca4c:	4639      	mov	r1, r7
 800ca4e:	f7f3 fde7 	bl	8000620 <__aeabi_dmul>
 800ca52:	4602      	mov	r2, r0
 800ca54:	460b      	mov	r3, r1
 800ca56:	4640      	mov	r0, r8
 800ca58:	4649      	mov	r1, r9
 800ca5a:	f7f3 fc2d 	bl	80002b8 <__aeabi_dsub>
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800ca5e:	a346      	add	r3, pc, #280	; (adr r3, 800cb78 <CRI_func+0xa00>)
 800ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800ca64:	4680      	mov	r8, r0
 800ca66:	4689      	mov	r9, r1
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800ca68:	4620      	mov	r0, r4
 800ca6a:	4629      	mov	r1, r5
 800ca6c:	f7f3 fdd8 	bl	8000620 <__aeabi_dmul>
 800ca70:	4602      	mov	r2, r0
 800ca72:	460b      	mov	r3, r1
 800ca74:	a142      	add	r1, pc, #264	; (adr r1, 800cb80 <CRI_func+0xa08>)
 800ca76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca7a:	f7f3 fc1d 	bl	80002b8 <__aeabi_dsub>
 800ca7e:	a342      	add	r3, pc, #264	; (adr r3, 800cb88 <CRI_func+0xa10>)
 800ca80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca84:	e9cd 0100 	strd	r0, r1, [sp]
 800ca88:	4630      	mov	r0, r6
 800ca8a:	4639      	mov	r1, r7
 800ca8c:	f7f3 fdc8 	bl	8000620 <__aeabi_dmul>
 800ca90:	4602      	mov	r2, r0
 800ca92:	460b      	mov	r3, r1
 800ca94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca98:	f7f3 fc10 	bl	80002bc <__adddf3>
 800ca9c:	f7f4 f8b8 	bl	8000c10 <__aeabi_d2f>
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800caa0:	f7f3 fd6a 	bl	8000578 <__aeabi_f2d>
 800caa4:	4642      	mov	r2, r8
 800caa6:	464b      	mov	r3, r9
 800caa8:	f7f3 fee4 	bl	8000874 <__aeabi_ddiv>
 800caac:	f7f4 f8b0 	bl	8000c10 <__aeabi_d2f>
 800cab0:	4b49      	ldr	r3, [pc, #292]	; (800cbd8 <CRI_func+0xa60>)
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800cab2:	4629      	mov	r1, r5
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800cab4:	6018      	str	r0, [r3, #0]
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800cab6:	a336      	add	r3, pc, #216	; (adr r3, 800cb90 <CRI_func+0xa18>)
 800cab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cabc:	4620      	mov	r0, r4
 800cabe:	f7f3 fdaf 	bl	8000620 <__aeabi_dmul>
 800cac2:	4602      	mov	r2, r0
 800cac4:	460b      	mov	r3, r1
 800cac6:	a134      	add	r1, pc, #208	; (adr r1, 800cb98 <CRI_func+0xa20>)
 800cac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cacc:	f7f3 fbf4 	bl	80002b8 <__aeabi_dsub>
 800cad0:	a333      	add	r3, pc, #204	; (adr r3, 800cba0 <CRI_func+0xa28>)
 800cad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad6:	4604      	mov	r4, r0
 800cad8:	460d      	mov	r5, r1
 800cada:	4630      	mov	r0, r6
 800cadc:	4639      	mov	r1, r7
 800cade:	f7f3 fd9f 	bl	8000620 <__aeabi_dmul>
 800cae2:	4602      	mov	r2, r0
 800cae4:	460b      	mov	r3, r1
 800cae6:	4620      	mov	r0, r4
 800cae8:	4629      	mov	r1, r5
 800caea:	f7f3 fbe7 	bl	80002bc <__adddf3>
 800caee:	f7f4 f88f 	bl	8000c10 <__aeabi_d2f>
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800caf2:	f7f3 fd41 	bl	8000578 <__aeabi_f2d>
 800caf6:	464b      	mov	r3, r9
 800caf8:	4642      	mov	r2, r8
 800cafa:	f7f3 febb 	bl	8000874 <__aeabi_ddiv>
 800cafe:	f7f4 f887 	bl	8000c10 <__aeabi_d2f>
 800cb02:	4b36      	ldr	r3, [pc, #216]	; (800cbdc <CRI_func+0xa64>)
 800cb04:	6018      	str	r0, [r3, #0]
 800cb06:	f7ff bb5c 	b.w	800c1c2 <CRI_func+0x4a>
		if (i == 8)
 800cb0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb0c:	2b08      	cmp	r3, #8
 800cb0e:	f47f aeef 	bne.w	800c8f0 <CRI_func+0x778>
			R9 = Ri[i];
 800cb12:	4b33      	ldr	r3, [pc, #204]	; (800cbe0 <CRI_func+0xa68>)
 800cb14:	7018      	strb	r0, [r3, #0]
			Rall_temp += Ri[i];
 800cb16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb18:	4418      	add	r0, r3
 800cb1a:	b203      	sxth	r3, r0
 800cb1c:	9310      	str	r3, [sp, #64]	; 0x40
 800cb1e:	e6eb      	b.n	800c8f8 <CRI_func+0x780>
 800cb20:	66666666 	.word	0x66666666
 800cb24:	40126666 	.word	0x40126666
 800cb28:	cccccccd 	.word	0xcccccccd
 800cb2c:	3feccccc 	.word	0x3feccccc
 800cb30:	dc000000 	.word	0xdc000000
 800cb34:	c1f12993 	.word	0xc1f12993
 800cb38:	00000000 	.word	0x00000000
 800cb3c:	4146a47c 	.word	0x4146a47c
 800cb40:	3d70a3d7 	.word	0x3d70a3d7
 800cb44:	4058c70a 	.word	0x4058c70a
 800cb48:	d594f26b 	.word	0xd594f26b
 800cb4c:	3fcf3d74 	.word	0x3fcf3d74
 800cb50:	8f5c28f6 	.word	0x8f5c28f6
 800cb54:	4006f5c2 	.word	0x4006f5c2
 800cb58:	9999999a 	.word	0x9999999a
 800cb5c:	3fd19999 	.word	0x3fd19999
 800cb60:	af4f0d84 	.word	0xaf4f0d84
 800cb64:	3fd06594 	.word	0x3fd06594
 800cb68:	9f559b3d 	.word	0x9f559b3d
 800cb6c:	3f98adab 	.word	0x3f98adab
 800cb70:	487fcb92 	.word	0x487fcb92
 800cb74:	3fe77dbf 	.word	0x3fe77dbf
 800cb78:	17c1bda5 	.word	0x17c1bda5
 800cb7c:	3ffc5326 	.word	0x3ffc5326
 800cb80:	76c8b439 	.word	0x76c8b439
 800cb84:	bff59fbe 	.word	0xbff59fbe
 800cb88:	0aa64c30 	.word	0x0aa64c30
 800cb8c:	4017a546 	.word	0x4017a546
 800cb90:	205bc01a 	.word	0x205bc01a
 800cb94:	403f7141 	.word	0x403f7141
 800cb98:	eb851eb8 	.word	0xeb851eb8
 800cb9c:	3f9eb851 	.word	0x3f9eb851
 800cba0:	ee631f8a 	.word	0xee631f8a
 800cba4:	403e125a 	.word	0x403e125a
 800cba8:	20090a88 	.word	0x20090a88
 800cbac:	200909f8 	.word	0x200909f8
 800cbb0:	40590000 	.word	0x40590000
 800cbb4:	20090a10 	.word	0x20090a10
 800cbb8:	2000465b 	.word	0x2000465b
 800cbbc:	200909c0 	.word	0x200909c0
 800cbc0:	3f666666 	.word	0x3f666666
 800cbc4:	2000465a 	.word	0x2000465a
 800cbc8:	20004659 	.word	0x20004659
 800cbcc:	3ff00000 	.word	0x3ff00000
 800cbd0:	c0080000 	.word	0xc0080000
 800cbd4:	200909f0 	.word	0x200909f0
 800cbd8:	20004650 	.word	0x20004650
 800cbdc:	20004654 	.word	0x20004654
 800cbe0:	20004658 	.word	0x20004658
		if (CCT_measure < 7000)
 800cbe4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cbe6:	4c30      	ldr	r4, [pc, #192]	; (800cca8 <CRI_func+0xb30>)
 800cbe8:	f641 3357 	movw	r3, #6999	; 0x1b57
 800cbec:	ee07 2a90 	vmov	s15, r2
 800cbf0:	429a      	cmp	r2, r3
 800cbf2:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800cbf6:	f67f aeb6 	bls.w	800c966 <CRI_func+0x7ee>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800cbfa:	980c      	ldr	r0, [sp, #48]	; 0x30
 800cbfc:	f7f3 fc9a 	bl	8000534 <__aeabi_ui2d>
 800cc00:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800cc80 <CRI_func+0xb08>
 800cc04:	ec41 0b10 	vmov	d0, r0, r1
 800cc08:	f016 fc7e 	bl	8023508 <pow>
 800cc0c:	ee68 7a08 	vmul.f32	s15, s16, s16
 800cc10:	ed8d 0b00 	vstr	d0, [sp]
 800cc14:	ee17 0a90 	vmov	r0, s15
 800cc18:	f7f3 fcae 	bl	8000578 <__aeabi_f2d>
 800cc1c:	4602      	mov	r2, r0
 800cc1e:	460b      	mov	r3, r1
 800cc20:	a119      	add	r1, pc, #100	; (adr r1, 800cc88 <CRI_func+0xb10>)
 800cc22:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc26:	f7f3 fe25 	bl	8000874 <__aeabi_ddiv>
 800cc2a:	ed9d 0b00 	vldr	d0, [sp]
 800cc2e:	4606      	mov	r6, r0
 800cc30:	ec53 2b10 	vmov	r2, r3, d0
 800cc34:	460f      	mov	r7, r1
 800cc36:	a116      	add	r1, pc, #88	; (adr r1, 800cc90 <CRI_func+0xb18>)
 800cc38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc3c:	f7f3 fe1a 	bl	8000874 <__aeabi_ddiv>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	4630      	mov	r0, r6
 800cc46:	4639      	mov	r1, r7
 800cc48:	f7f3 fb38 	bl	80002bc <__adddf3>
 800cc4c:	4606      	mov	r6, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800cc4e:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800cc52:	460f      	mov	r7, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800cc54:	f7f3 fc90 	bl	8000578 <__aeabi_f2d>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	460b      	mov	r3, r1
 800cc5c:	a10e      	add	r1, pc, #56	; (adr r1, 800cc98 <CRI_func+0xb20>)
 800cc5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc62:	f7f3 fe07 	bl	8000874 <__aeabi_ddiv>
 800cc66:	4602      	mov	r2, r0
 800cc68:	460b      	mov	r3, r1
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	4639      	mov	r1, r7
 800cc6e:	f7f3 fb25 	bl	80002bc <__adddf3>
 800cc72:	a30b      	add	r3, pc, #44	; (adr r3, 800cca0 <CRI_func+0xb28>)
 800cc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc78:	e6ad      	b.n	800c9d6 <CRI_func+0x85e>
 800cc7a:	bf00      	nop
 800cc7c:	f3af 8000 	nop.w
 800cc80:	00000000 	.word	0x00000000
 800cc84:	40080000 	.word	0x40080000
 800cc88:	00000000 	.word	0x00000000
 800cc8c:	413d04e8 	.word	0x413d04e8
 800cc90:	00000001 	.word	0x00000001
 800cc94:	c1dde5cf 	.word	0xc1dde5cf
 800cc98:	28f5c290 	.word	0x28f5c290
 800cc9c:	406eef5c 	.word	0x406eef5c
 800cca0:	a3ec02f3 	.word	0xa3ec02f3
 800cca4:	3fce5753 	.word	0x3fce5753
 800cca8:	200909a8 	.word	0x200909a8

0800ccac <CRI_Axes>:
#include "CRI_graph.h"
uint8_t TFT_direction = 0x00;



void CRI_Axes(uint8_t direction){
 800ccac:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800ccae:	bbb8      	cbnz	r0, 800cd20 <CRI_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800ccb0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ccb4:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800ccb8:	2212      	movs	r2, #18
 800ccba:	215f      	movs	r1, #95	; 0x5f
 800ccbc:	2010      	movs	r0, #16
 800ccbe:	9400      	str	r4, [sp, #0]
 800ccc0:	f00f fc7d 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800ccc4:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800ccc8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800cccc:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800ccd0:	2010      	movs	r0, #16
 800ccd2:	9400      	str	r4, [sp, #0]
 800ccd4:	f00f fc73 	bl	801c5be <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800ccd8:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800ccdc:	4619      	mov	r1, r3
 800ccde:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cce2:	2010      	movs	r0, #16
 800cce4:	9400      	str	r4, [sp, #0]
 800cce6:	f00f fc0d 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800ccea:	f240 1301 	movw	r3, #257	; 0x101
 800ccee:	4619      	mov	r1, r3
 800ccf0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800ccf4:	2010      	movs	r0, #16
 800ccf6:	9400      	str	r4, [sp, #0]
 800ccf8:	f00f fc04 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800ccfc:	23b5      	movs	r3, #181	; 0xb5
 800ccfe:	4619      	mov	r1, r3
 800cd00:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cd04:	2010      	movs	r0, #16
 800cd06:	9400      	str	r4, [sp, #0]
 800cd08:	f00f fbfc 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800cd0c:	2369      	movs	r3, #105	; 0x69
 800cd0e:	9400      	str	r4, [sp, #0]
 800cd10:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cd14:	4619      	mov	r1, r3
 800cd16:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800cd18:	f00f fbf4 	bl	801c504 <TFT_DrawLine>
		
	}
}
 800cd1c:	b002      	add	sp, #8
 800cd1e:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800cd20:	2801      	cmp	r0, #1
 800cd22:	d131      	bne.n	800cd88 <CRI_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800cd24:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800cd28:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cd2c:	22ff      	movs	r2, #255	; 0xff
 800cd2e:	2146      	movs	r1, #70	; 0x46
 800cd30:	20fd      	movs	r0, #253	; 0xfd
 800cd32:	9400      	str	r4, [sp, #0]
 800cd34:	f00f fc43 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800cd38:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cd3c:	22ff      	movs	r2, #255	; 0xff
 800cd3e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800cd42:	2028      	movs	r0, #40	; 0x28
 800cd44:	9400      	str	r4, [sp, #0]
 800cd46:	f00f fc3a 	bl	801c5be <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800cd4a:	22cc      	movs	r2, #204	; 0xcc
 800cd4c:	4610      	mov	r0, r2
 800cd4e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cd52:	2146      	movs	r1, #70	; 0x46
 800cd54:	9400      	str	r4, [sp, #0]
 800cd56:	f00f fbd5 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800cd5a:	2297      	movs	r2, #151	; 0x97
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cd62:	2146      	movs	r1, #70	; 0x46
 800cd64:	9400      	str	r4, [sp, #0]
 800cd66:	f00f fbcd 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800cd6a:	2262      	movs	r2, #98	; 0x62
 800cd6c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cd70:	4610      	mov	r0, r2
 800cd72:	9400      	str	r4, [sp, #0]
 800cd74:	2146      	movs	r1, #70	; 0x46
 800cd76:	f00f fbc5 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800cd7a:	9400      	str	r4, [sp, #0]
 800cd7c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cd80:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800cd82:	2146      	movs	r1, #70	; 0x46
 800cd84:	4610      	mov	r0, r2
 800cd86:	e7c7      	b.n	800cd18 <CRI_Axes+0x6c>
	} else if (direction == 0x02)
 800cd88:	2802      	cmp	r0, #2
 800cd8a:	d1c7      	bne.n	800cd1c <CRI_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800cd8c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800cd90:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cd94:	2210      	movs	r2, #16
 800cd96:	214a      	movs	r1, #74	; 0x4a
 800cd98:	2012      	movs	r0, #18
 800cd9a:	9400      	str	r4, [sp, #0]
 800cd9c:	f00f fc0f 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800cda0:	234c      	movs	r3, #76	; 0x4c
 800cda2:	22e8      	movs	r2, #232	; 0xe8
 800cda4:	214a      	movs	r1, #74	; 0x4a
 800cda6:	2011      	movs	r0, #17
 800cda8:	9400      	str	r4, [sp, #0]
 800cdaa:	f00f fc08 	bl	801c5be <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800cdae:	2244      	movs	r2, #68	; 0x44
 800cdb0:	4610      	mov	r0, r2
 800cdb2:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cdb6:	2146      	movs	r1, #70	; 0x46
 800cdb8:	9400      	str	r4, [sp, #0]
 800cdba:	f00f fba3 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800cdbe:	2279      	movs	r2, #121	; 0x79
 800cdc0:	4610      	mov	r0, r2
 800cdc2:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cdc6:	2146      	movs	r1, #70	; 0x46
 800cdc8:	9400      	str	r4, [sp, #0]
 800cdca:	f00f fb9b 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800cdce:	22ae      	movs	r2, #174	; 0xae
 800cdd0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cdd4:	4610      	mov	r0, r2
 800cdd6:	9400      	str	r4, [sp, #0]
 800cdd8:	2146      	movs	r1, #70	; 0x46
 800cdda:	f00f fb93 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800cdde:	9400      	str	r4, [sp, #0]
 800cde0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cde4:	22e3      	movs	r2, #227	; 0xe3
 800cde6:	e7cc      	b.n	800cd82 <CRI_Axes+0xd6>

0800cde8 <CRI_Axes_Measure>:

void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800cde8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800cdec:	ac02      	add	r4, sp, #8
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800cdee:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800cdf0:	2300      	movs	r3, #0
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800cdf2:	4688      	mov	r8, r1
 800cdf4:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800cdf6:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	d161      	bne.n	800cec2 <CRI_Axes_Measure+0xda>
	{
		TFT_SetTextColor(TFT_White);
 800cdfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800ce02:	f00f fe0b 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800ce06:	2063      	movs	r0, #99	; 0x63
 800ce08:	f00f fe0e 	bl	801ca28 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800ce0c:	4861      	ldr	r0, [pc, #388]	; (800cf94 <CRI_Axes_Measure+0x1ac>)
 800ce0e:	f00f fdff 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(17, 70, 'a');
 800ce12:	2261      	movs	r2, #97	; 0x61
 800ce14:	2146      	movs	r1, #70	; 0x46
 800ce16:	2011      	movs	r0, #17
 800ce18:	f00f fec4 	bl	801cba4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800ce1c:	485e      	ldr	r0, [pc, #376]	; (800cf98 <CRI_Axes_Measure+0x1b0>)
 800ce1e:	f00f fdf7 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(3, 70-2, 'R');
 800ce22:	2252      	movs	r2, #82	; 0x52
 800ce24:	2144      	movs	r1, #68	; 0x44
 800ce26:	2003      	movs	r0, #3
 800ce28:	f00f febc 	bl	801cba4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Ra);
 800ce2c:	4642      	mov	r2, r8
 800ce2e:	495b      	ldr	r1, [pc, #364]	; (800cf9c <CRI_Axes_Measure+0x1b4>)
 800ce30:	4620      	mov	r0, r4
 800ce32:	f013 fa2f 	bl	8020294 <sprintf>
		TFT_DisplayString(35, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800ce36:	2303      	movs	r3, #3
 800ce38:	4622      	mov	r2, r4
 800ce3a:	2144      	movs	r1, #68	; 0x44
 800ce3c:	2023      	movs	r0, #35	; 0x23
 800ce3e:	f00f ff09 	bl	801cc54 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800ce42:	4854      	ldr	r0, [pc, #336]	; (800cf94 <CRI_Axes_Measure+0x1ac>)
 800ce44:	f00f fde4 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(113, 70, 'l');
 800ce48:	226c      	movs	r2, #108	; 0x6c
 800ce4a:	2146      	movs	r1, #70	; 0x46
 800ce4c:	2071      	movs	r0, #113	; 0x71
 800ce4e:	f00f fea9 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(122, 70, 'l');
 800ce52:	226c      	movs	r2, #108	; 0x6c
 800ce54:	2146      	movs	r1, #70	; 0x46
 800ce56:	207a      	movs	r0, #122	; 0x7a
 800ce58:	f00f fea4 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(102, 70, 'a');
 800ce5c:	2261      	movs	r2, #97	; 0x61
 800ce5e:	2146      	movs	r1, #70	; 0x46
 800ce60:	2066      	movs	r0, #102	; 0x66
 800ce62:	f00f fe9f 	bl	801cba4 <TFT_DrawChar>
		
		TFT_SetFont(&Font16EN_arch_big);
 800ce66:	484c      	ldr	r0, [pc, #304]	; (800cf98 <CRI_Axes_Measure+0x1b0>)
 800ce68:	f00f fdd2 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(86, 70-2, 'R');
 800ce6c:	2252      	movs	r2, #82	; 0x52
 800ce6e:	2144      	movs	r1, #68	; 0x44
 800ce70:	2056      	movs	r0, #86	; 0x56
 800ce72:	f00f fe97 	bl	801cba4 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Rall);
 800ce76:	463a      	mov	r2, r7
 800ce78:	4948      	ldr	r1, [pc, #288]	; (800cf9c <CRI_Axes_Measure+0x1b4>)
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f013 fa0a 	bl	8020294 <sprintf>
		TFT_DisplayString(138, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800ce80:	2303      	movs	r3, #3
 800ce82:	4622      	mov	r2, r4
 800ce84:	2144      	movs	r1, #68	; 0x44
 800ce86:	208a      	movs	r0, #138	; 0x8a
 800ce88:	f00f fee4 	bl	801cc54 <TFT_DisplayString>
		

		
		sprintf (buffer, "%d", R9);
 800ce8c:	4632      	mov	r2, r6
 800ce8e:	4943      	ldr	r1, [pc, #268]	; (800cf9c <CRI_Axes_Measure+0x1b4>)
 800ce90:	4620      	mov	r0, r4
 800ce92:	f013 f9ff 	bl	8020294 <sprintf>
		TFT_DisplayString(R9 < 0 ? 215 : 220, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800ce96:	2e00      	cmp	r6, #0
 800ce98:	bfb4      	ite	lt
 800ce9a:	20d7      	movlt	r0, #215	; 0xd7
 800ce9c:	20dc      	movge	r0, #220	; 0xdc
 800ce9e:	2303      	movs	r3, #3
 800cea0:	4622      	mov	r2, r4
 800cea2:	2144      	movs	r1, #68	; 0x44
 800cea4:	f00f fed6 	bl	801cc54 <TFT_DisplayString>
		TFT_DrawChar(183, 70-2, 'R');
 800cea8:	2252      	movs	r2, #82	; 0x52
 800ceaa:	2144      	movs	r1, #68	; 0x44
 800ceac:	20b7      	movs	r0, #183	; 0xb7
 800ceae:	f00f fe79 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(198, 70-2, '9');
 800ceb2:	2239      	movs	r2, #57	; 0x39
 800ceb4:	2144      	movs	r1, #68	; 0x44
 800ceb6:	20c6      	movs	r0, #198	; 0xc6
 800ceb8:	f00f fe74 	bl	801cba4 <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
	
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800cebc:	b002      	add	sp, #8
 800cebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec2:	4d37      	ldr	r5, [pc, #220]	; (800cfa0 <CRI_Axes_Measure+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800cec4:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800cec6:	bf14      	ite	ne
 800cec8:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800ceca:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800cecc:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800ced0:	bf18      	it	ne
 800ced2:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800ced4:	f00f fda2 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800ced8:	2063      	movs	r0, #99	; 0x63
 800ceda:	f00f fda5 	bl	801ca28 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800cede:	482d      	ldr	r0, [pc, #180]	; (800cf94 <CRI_Axes_Measure+0x1ac>)
 800cee0:	f00f fd96 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800cee4:	2261      	movs	r2, #97	; 0x61
 800cee6:	2110      	movs	r1, #16
 800cee8:	2064      	movs	r0, #100	; 0x64
 800ceea:	f00f fe5b 	bl	801cba4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800ceee:	482a      	ldr	r0, [pc, #168]	; (800cf98 <CRI_Axes_Measure+0x1b0>)
 800cef0:	f00f fd8e 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'R');
 800cef4:	2252      	movs	r2, #82	; 0x52
 800cef6:	210e      	movs	r1, #14
 800cef8:	2055      	movs	r0, #85	; 0x55
 800cefa:	f00f fe53 	bl	801cba4 <TFT_DrawChar>
		sprintf (buffer, "%d", Ra);
 800cefe:	4642      	mov	r2, r8
 800cf00:	4926      	ldr	r1, [pc, #152]	; (800cf9c <CRI_Axes_Measure+0x1b4>)
 800cf02:	4620      	mov	r0, r4
 800cf04:	f013 f9c6 	bl	8020294 <sprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cf08:	2303      	movs	r3, #3
 800cf0a:	4622      	mov	r2, r4
 800cf0c:	210e      	movs	r1, #14
 800cf0e:	207d      	movs	r0, #125	; 0x7d
 800cf10:	f00f fea0 	bl	801cc54 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800cf14:	481f      	ldr	r0, [pc, #124]	; (800cf94 <CRI_Axes_Measure+0x1ac>)
 800cf16:	f00f fd7b 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(221, 16, 'l');
 800cf1a:	226c      	movs	r2, #108	; 0x6c
 800cf1c:	2110      	movs	r1, #16
 800cf1e:	20dd      	movs	r0, #221	; 0xdd
 800cf20:	f00f fe40 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(230, 16, 'l');
 800cf24:	226c      	movs	r2, #108	; 0x6c
 800cf26:	2110      	movs	r1, #16
 800cf28:	20e6      	movs	r0, #230	; 0xe6
 800cf2a:	f00f fe3b 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(210, 16, 'a');
 800cf2e:	2261      	movs	r2, #97	; 0x61
 800cf30:	2110      	movs	r1, #16
 800cf32:	20d2      	movs	r0, #210	; 0xd2
 800cf34:	f00f fe36 	bl	801cba4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800cf38:	4817      	ldr	r0, [pc, #92]	; (800cf98 <CRI_Axes_Measure+0x1b0>)
 800cf3a:	f00f fd69 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(195, 16-2, 'R');
 800cf3e:	2252      	movs	r2, #82	; 0x52
 800cf40:	210e      	movs	r1, #14
 800cf42:	20c3      	movs	r0, #195	; 0xc3
 800cf44:	f00f fe2e 	bl	801cba4 <TFT_DrawChar>
		sprintf (buffer, "%d", Rall);
 800cf48:	463a      	mov	r2, r7
 800cf4a:	4914      	ldr	r1, [pc, #80]	; (800cf9c <CRI_Axes_Measure+0x1b4>)
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	f013 f9a1 	bl	8020294 <sprintf>
		TFT_DisplayString(255, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cf52:	2303      	movs	r3, #3
 800cf54:	4622      	mov	r2, r4
 800cf56:	210e      	movs	r1, #14
 800cf58:	20ff      	movs	r0, #255	; 0xff
 800cf5a:	f00f fe7b 	bl	801cc54 <TFT_DisplayString>
		TFT_DrawChar(325, 16-2, 'R');
 800cf5e:	2252      	movs	r2, #82	; 0x52
 800cf60:	210e      	movs	r1, #14
 800cf62:	f240 1045 	movw	r0, #325	; 0x145
 800cf66:	f00f fe1d 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(340, 16-2, '9');
 800cf6a:	2239      	movs	r2, #57	; 0x39
 800cf6c:	210e      	movs	r1, #14
 800cf6e:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800cf72:	f00f fe17 	bl	801cba4 <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
 800cf76:	4632      	mov	r2, r6
 800cf78:	4908      	ldr	r1, [pc, #32]	; (800cf9c <CRI_Axes_Measure+0x1b4>)
 800cf7a:	4620      	mov	r0, r4
 800cf7c:	f013 f98a 	bl	8020294 <sprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cf80:	2303      	movs	r3, #3
 800cf82:	4622      	mov	r2, r4
 800cf84:	210e      	movs	r1, #14
 800cf86:	f240 106d 	movw	r0, #365	; 0x16d
 800cf8a:	f00f fe63 	bl	801cc54 <TFT_DisplayString>
		TFT_direction = 0x00;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	702b      	strb	r3, [r5, #0]
}
 800cf92:	e793      	b.n	800cebc <CRI_Axes_Measure+0xd4>
 800cf94:	200001c0 	.word	0x200001c0
 800cf98:	200001b0 	.word	0x200001b0
 800cf9c:	08024f89 	.word	0x08024f89
 800cfa0:	200056a0 	.word	0x200056a0

0800cfa4 <CRI_Axes_Text>:

void CRI_Axes_Text(uint8_t direction){
 800cfa4:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800cfa6:	4604      	mov	r4, r0
 800cfa8:	2800      	cmp	r0, #0
 800cfaa:	f040 811f 	bne.w	800d1ec <CRI_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800cfae:	488e      	ldr	r0, [pc, #568]	; (800d1e8 <CRI_Axes_Text+0x244>)
 800cfb0:	f00f fd2e 	bl	801ca10 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800cfb4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cfb8:	f00f fd30 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800cfbc:	2063      	movs	r0, #99	; 0x63
 800cfbe:	f00f fd33 	bl	801ca28 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'R');
 800cfc2:	2252      	movs	r2, #82	; 0x52
 800cfc4:	f240 119f 	movw	r1, #415	; 0x19f
 800cfc8:	2018      	movs	r0, #24
 800cfca:	f00f fdeb 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800cfce:	2231      	movs	r2, #49	; 0x31
 800cfd0:	f240 119f 	movw	r1, #415	; 0x19f
 800cfd4:	201e      	movs	r0, #30
 800cfd6:	f00f fde5 	bl	801cba4 <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'R');
 800cfda:	2252      	movs	r2, #82	; 0x52
 800cfdc:	f240 119f 	movw	r1, #415	; 0x19f
 800cfe0:	2028      	movs	r0, #40	; 0x28
 800cfe2:	f00f fddf 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800cfe6:	2232      	movs	r2, #50	; 0x32
 800cfe8:	f240 119f 	movw	r1, #415	; 0x19f
 800cfec:	202e      	movs	r0, #46	; 0x2e
 800cfee:	f00f fdd9 	bl	801cba4 <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'R');
 800cff2:	2252      	movs	r2, #82	; 0x52
 800cff4:	f240 119f 	movw	r1, #415	; 0x19f
 800cff8:	2038      	movs	r0, #56	; 0x38
 800cffa:	f00f fdd3 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800cffe:	2233      	movs	r2, #51	; 0x33
 800d000:	f240 119f 	movw	r1, #415	; 0x19f
 800d004:	203e      	movs	r0, #62	; 0x3e
 800d006:	f00f fdcd 	bl	801cba4 <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'R');
 800d00a:	2252      	movs	r2, #82	; 0x52
 800d00c:	f240 119f 	movw	r1, #415	; 0x19f
 800d010:	2048      	movs	r0, #72	; 0x48
 800d012:	f00f fdc7 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800d016:	2234      	movs	r2, #52	; 0x34
 800d018:	f240 119f 	movw	r1, #415	; 0x19f
 800d01c:	204e      	movs	r0, #78	; 0x4e
 800d01e:	f00f fdc1 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'R');
 800d022:	2252      	movs	r2, #82	; 0x52
 800d024:	f240 119f 	movw	r1, #415	; 0x19f
 800d028:	2058      	movs	r0, #88	; 0x58
 800d02a:	f00f fdbb 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800d02e:	2235      	movs	r2, #53	; 0x35
 800d030:	f240 119f 	movw	r1, #415	; 0x19f
 800d034:	205e      	movs	r0, #94	; 0x5e
 800d036:	f00f fdb5 	bl	801cba4 <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'R');
 800d03a:	2252      	movs	r2, #82	; 0x52
 800d03c:	f240 119f 	movw	r1, #415	; 0x19f
 800d040:	2068      	movs	r0, #104	; 0x68
 800d042:	f00f fdaf 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800d046:	2236      	movs	r2, #54	; 0x36
 800d048:	f240 119f 	movw	r1, #415	; 0x19f
 800d04c:	206e      	movs	r0, #110	; 0x6e
 800d04e:	f00f fda9 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'R');
 800d052:	2252      	movs	r2, #82	; 0x52
 800d054:	f240 119f 	movw	r1, #415	; 0x19f
 800d058:	2078      	movs	r0, #120	; 0x78
 800d05a:	f00f fda3 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800d05e:	2237      	movs	r2, #55	; 0x37
 800d060:	f240 119f 	movw	r1, #415	; 0x19f
 800d064:	207e      	movs	r0, #126	; 0x7e
 800d066:	f00f fd9d 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'R');
 800d06a:	2252      	movs	r2, #82	; 0x52
 800d06c:	f240 119f 	movw	r1, #415	; 0x19f
 800d070:	2088      	movs	r0, #136	; 0x88
 800d072:	f00f fd97 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800d076:	2238      	movs	r2, #56	; 0x38
 800d078:	f240 119f 	movw	r1, #415	; 0x19f
 800d07c:	208e      	movs	r0, #142	; 0x8e
 800d07e:	f00f fd91 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'R');
 800d082:	2252      	movs	r2, #82	; 0x52
 800d084:	f240 119f 	movw	r1, #415	; 0x19f
 800d088:	2098      	movs	r0, #152	; 0x98
 800d08a:	f00f fd8b 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800d08e:	2239      	movs	r2, #57	; 0x39
 800d090:	f240 119f 	movw	r1, #415	; 0x19f
 800d094:	209e      	movs	r0, #158	; 0x9e
 800d096:	f00f fd85 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800d09a:	2231      	movs	r2, #49	; 0x31
 800d09c:	f240 119f 	movw	r1, #415	; 0x19f
 800d0a0:	20ad      	movs	r0, #173	; 0xad
 800d0a2:	f00f fd7f 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'R');
 800d0a6:	2252      	movs	r2, #82	; 0x52
 800d0a8:	f240 119f 	movw	r1, #415	; 0x19f
 800d0ac:	20a8      	movs	r0, #168	; 0xa8
 800d0ae:	f00f fd79 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800d0b2:	2230      	movs	r2, #48	; 0x30
 800d0b4:	f240 119f 	movw	r1, #415	; 0x19f
 800d0b8:	20b1      	movs	r0, #177	; 0xb1
 800d0ba:	f00f fd73 	bl	801cba4 <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800d0be:	2231      	movs	r2, #49	; 0x31
 800d0c0:	f240 119f 	movw	r1, #415	; 0x19f
 800d0c4:	20bd      	movs	r0, #189	; 0xbd
 800d0c6:	f00f fd6d 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'R');
 800d0ca:	2252      	movs	r2, #82	; 0x52
 800d0cc:	f240 119f 	movw	r1, #415	; 0x19f
 800d0d0:	20b8      	movs	r0, #184	; 0xb8
 800d0d2:	f00f fd67 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800d0d6:	2231      	movs	r2, #49	; 0x31
 800d0d8:	f240 119f 	movw	r1, #415	; 0x19f
 800d0dc:	20c2      	movs	r0, #194	; 0xc2
 800d0de:	f00f fd61 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800d0e2:	2231      	movs	r2, #49	; 0x31
 800d0e4:	f240 119f 	movw	r1, #415	; 0x19f
 800d0e8:	20cd      	movs	r0, #205	; 0xcd
 800d0ea:	f00f fd5b 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'R');
 800d0ee:	2252      	movs	r2, #82	; 0x52
 800d0f0:	f240 119f 	movw	r1, #415	; 0x19f
 800d0f4:	20c8      	movs	r0, #200	; 0xc8
 800d0f6:	f00f fd55 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800d0fa:	2232      	movs	r2, #50	; 0x32
 800d0fc:	f240 119f 	movw	r1, #415	; 0x19f
 800d100:	20d1      	movs	r0, #209	; 0xd1
 800d102:	f00f fd4f 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800d106:	2231      	movs	r2, #49	; 0x31
 800d108:	f240 119f 	movw	r1, #415	; 0x19f
 800d10c:	20dd      	movs	r0, #221	; 0xdd
 800d10e:	f00f fd49 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'R');
 800d112:	2252      	movs	r2, #82	; 0x52
 800d114:	f240 119f 	movw	r1, #415	; 0x19f
 800d118:	20d8      	movs	r0, #216	; 0xd8
 800d11a:	f00f fd43 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800d11e:	2233      	movs	r2, #51	; 0x33
 800d120:	f240 119f 	movw	r1, #415	; 0x19f
 800d124:	20e1      	movs	r0, #225	; 0xe1
 800d126:	f00f fd3d 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800d12a:	2231      	movs	r2, #49	; 0x31
 800d12c:	f240 119f 	movw	r1, #415	; 0x19f
 800d130:	20ed      	movs	r0, #237	; 0xed
 800d132:	f00f fd37 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'R');
 800d136:	2252      	movs	r2, #82	; 0x52
 800d138:	f240 119f 	movw	r1, #415	; 0x19f
 800d13c:	20e8      	movs	r0, #232	; 0xe8
 800d13e:	f00f fd31 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800d142:	2234      	movs	r2, #52	; 0x34
 800d144:	f240 119f 	movw	r1, #415	; 0x19f
 800d148:	20f1      	movs	r0, #241	; 0xf1
 800d14a:	f00f fd2b 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800d14e:	2231      	movs	r2, #49	; 0x31
 800d150:	f240 119f 	movw	r1, #415	; 0x19f
 800d154:	20fd      	movs	r0, #253	; 0xfd
 800d156:	f00f fd25 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'R');
 800d15a:	2252      	movs	r2, #82	; 0x52
 800d15c:	f240 119f 	movw	r1, #415	; 0x19f
 800d160:	20f8      	movs	r0, #248	; 0xf8
 800d162:	f00f fd1f 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800d166:	2235      	movs	r2, #53	; 0x35
 800d168:	f240 119f 	movw	r1, #415	; 0x19f
 800d16c:	f240 1001 	movw	r0, #257	; 0x101
 800d170:	f00f fd18 	bl	801cba4 <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800d174:	2230      	movs	r2, #48	; 0x30
 800d176:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d17a:	2005      	movs	r0, #5
 800d17c:	f00f fd12 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800d180:	2232      	movs	r2, #50	; 0x32
 800d182:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800d186:	2001      	movs	r0, #1
 800d188:	f00f fd0c 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800d18c:	2235      	movs	r2, #53	; 0x35
 800d18e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800d192:	2007      	movs	r0, #7
 800d194:	f00f fd06 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800d198:	2235      	movs	r2, #53	; 0x35
 800d19a:	f240 1101 	movw	r1, #257	; 0x101
 800d19e:	2001      	movs	r0, #1
 800d1a0:	f00f fd00 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800d1a4:	2230      	movs	r2, #48	; 0x30
 800d1a6:	f240 1101 	movw	r1, #257	; 0x101
 800d1aa:	2007      	movs	r0, #7
 800d1ac:	f00f fcfa 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800d1b0:	2237      	movs	r2, #55	; 0x37
 800d1b2:	21b5      	movs	r1, #181	; 0xb5
 800d1b4:	2001      	movs	r0, #1
 800d1b6:	f00f fcf5 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800d1ba:	2235      	movs	r2, #53	; 0x35
 800d1bc:	21b5      	movs	r1, #181	; 0xb5
 800d1be:	2007      	movs	r0, #7
 800d1c0:	f00f fcf0 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	2231      	movs	r2, #49	; 0x31
 800d1c8:	2169      	movs	r1, #105	; 0x69
 800d1ca:	f00f fceb 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800d1ce:	2230      	movs	r2, #48	; 0x30
 800d1d0:	2169      	movs	r1, #105	; 0x69
 800d1d2:	2004      	movs	r0, #4
 800d1d4:	f00f fce6 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800d1d8:	2230      	movs	r2, #48	; 0x30
 800d1da:	2169      	movs	r1, #105	; 0x69
 800d1dc:	2009      	movs	r0, #9
		TFT_DrawChar(62, 43, '0');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 800d1de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800d1e2:	f00f bcdf 	b.w	801cba4 <TFT_DrawChar>
 800d1e6:	bf00      	nop
 800d1e8:	20000210 	.word	0x20000210
 800d1ec:	4d98      	ldr	r5, [pc, #608]	; (800d450 <CRI_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d1ee:	2801      	cmp	r0, #1
 800d1f0:	bf0c      	ite	eq
 800d1f2:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800d1f4:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800d1f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800d1fa:	bf18      	it	ne
 800d1fc:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800d1fe:	f00f fc0d 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d202:	2063      	movs	r0, #99	; 0x63
 800d204:	f00f fc10 	bl	801ca28 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800d208:	4892      	ldr	r0, [pc, #584]	; (800d454 <CRI_Axes_Text+0x4b0>)
 800d20a:	f00f fc01 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(87, 258, 'R');
 800d20e:	2252      	movs	r2, #82	; 0x52
 800d210:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d214:	2057      	movs	r0, #87	; 0x57
 800d216:	f00f fcc5 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800d21a:	2231      	movs	r2, #49	; 0x31
 800d21c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d220:	205d      	movs	r0, #93	; 0x5d
 800d222:	f00f fcbf 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'R');
 800d226:	2252      	movs	r2, #82	; 0x52
 800d228:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d22c:	206d      	movs	r0, #109	; 0x6d
 800d22e:	f00f fcb9 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800d232:	2232      	movs	r2, #50	; 0x32
 800d234:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d238:	2073      	movs	r0, #115	; 0x73
 800d23a:	f00f fcb3 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'R');
 800d23e:	2252      	movs	r2, #82	; 0x52
 800d240:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d244:	2083      	movs	r0, #131	; 0x83
 800d246:	f00f fcad 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800d24a:	2233      	movs	r2, #51	; 0x33
 800d24c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d250:	2089      	movs	r0, #137	; 0x89
 800d252:	f00f fca7 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'R');
 800d256:	2252      	movs	r2, #82	; 0x52
 800d258:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d25c:	2099      	movs	r0, #153	; 0x99
 800d25e:	f00f fca1 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800d262:	2234      	movs	r2, #52	; 0x34
 800d264:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d268:	209f      	movs	r0, #159	; 0x9f
 800d26a:	f00f fc9b 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'R');
 800d26e:	2252      	movs	r2, #82	; 0x52
 800d270:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d274:	20af      	movs	r0, #175	; 0xaf
 800d276:	f00f fc95 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800d27a:	2235      	movs	r2, #53	; 0x35
 800d27c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d280:	20b5      	movs	r0, #181	; 0xb5
 800d282:	f00f fc8f 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'R');
 800d286:	2252      	movs	r2, #82	; 0x52
 800d288:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d28c:	20c5      	movs	r0, #197	; 0xc5
 800d28e:	f00f fc89 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800d292:	2236      	movs	r2, #54	; 0x36
 800d294:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d298:	20cb      	movs	r0, #203	; 0xcb
 800d29a:	f00f fc83 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'R');
 800d29e:	2252      	movs	r2, #82	; 0x52
 800d2a0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d2a4:	20db      	movs	r0, #219	; 0xdb
 800d2a6:	f00f fc7d 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800d2aa:	2237      	movs	r2, #55	; 0x37
 800d2ac:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d2b0:	20e1      	movs	r0, #225	; 0xe1
 800d2b2:	f00f fc77 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'R');
 800d2b6:	2252      	movs	r2, #82	; 0x52
 800d2b8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d2bc:	20f1      	movs	r0, #241	; 0xf1
 800d2be:	f00f fc71 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800d2c2:	2238      	movs	r2, #56	; 0x38
 800d2c4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d2c8:	20f7      	movs	r0, #247	; 0xf7
 800d2ca:	f00f fc6b 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'R');
 800d2ce:	2252      	movs	r2, #82	; 0x52
 800d2d0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d2d4:	f240 1007 	movw	r0, #263	; 0x107
 800d2d8:	f00f fc64 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800d2dc:	2239      	movs	r2, #57	; 0x39
 800d2de:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d2e2:	f240 100d 	movw	r0, #269	; 0x10d
 800d2e6:	f00f fc5d 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800d2ea:	2231      	movs	r2, #49	; 0x31
 800d2ec:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d2f0:	f44f 7091 	mov.w	r0, #290	; 0x122
 800d2f4:	f00f fc56 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'R');
 800d2f8:	2252      	movs	r2, #82	; 0x52
 800d2fa:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d2fe:	f240 101d 	movw	r0, #285	; 0x11d
 800d302:	f00f fc4f 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800d306:	2230      	movs	r2, #48	; 0x30
 800d308:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d30c:	f44f 7093 	mov.w	r0, #294	; 0x126
 800d310:	f00f fc48 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800d314:	2231      	movs	r2, #49	; 0x31
 800d316:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d31a:	f44f 709c 	mov.w	r0, #312	; 0x138
 800d31e:	f00f fc41 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'R');
 800d322:	2252      	movs	r2, #82	; 0x52
 800d324:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d328:	f240 1033 	movw	r0, #307	; 0x133
 800d32c:	f00f fc3a 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800d330:	2231      	movs	r2, #49	; 0x31
 800d332:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d336:	f240 103d 	movw	r0, #317	; 0x13d
 800d33a:	f00f fc33 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800d33e:	2231      	movs	r2, #49	; 0x31
 800d340:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d344:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800d348:	f00f fc2c 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'R');
 800d34c:	2252      	movs	r2, #82	; 0x52
 800d34e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d352:	f240 1049 	movw	r0, #329	; 0x149
 800d356:	f00f fc25 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800d35a:	2232      	movs	r2, #50	; 0x32
 800d35c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d360:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800d364:	f00f fc1e 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800d368:	2231      	movs	r2, #49	; 0x31
 800d36a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d36e:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800d372:	f00f fc17 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'R');
 800d376:	2252      	movs	r2, #82	; 0x52
 800d378:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d37c:	f240 105f 	movw	r0, #351	; 0x15f
 800d380:	f00f fc10 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800d384:	2233      	movs	r2, #51	; 0x33
 800d386:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d38a:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800d38e:	f00f fc09 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800d392:	2231      	movs	r2, #49	; 0x31
 800d394:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d398:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800d39c:	f00f fc02 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'R');
 800d3a0:	2252      	movs	r2, #82	; 0x52
 800d3a2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d3a6:	f240 1075 	movw	r0, #373	; 0x175
 800d3aa:	f00f fbfb 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800d3ae:	2234      	movs	r2, #52	; 0x34
 800d3b0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d3b4:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800d3b8:	f00f fbf4 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800d3bc:	2231      	movs	r2, #49	; 0x31
 800d3be:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d3c2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d3c6:	f00f fbed 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'R');
 800d3ca:	2252      	movs	r2, #82	; 0x52
 800d3cc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d3d0:	f240 108b 	movw	r0, #395	; 0x18b
 800d3d4:	f00f fbe6 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800d3d8:	2235      	movs	r2, #53	; 0x35
 800d3da:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d3de:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d3e2:	f00f fbdf 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800d3e6:	2230      	movs	r2, #48	; 0x30
 800d3e8:	21fa      	movs	r1, #250	; 0xfa
 800d3ea:	2041      	movs	r0, #65	; 0x41
 800d3ec:	f00f fbda 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800d3f0:	2232      	movs	r2, #50	; 0x32
 800d3f2:	21ca      	movs	r1, #202	; 0xca
 800d3f4:	203a      	movs	r0, #58	; 0x3a
 800d3f6:	f00f fbd5 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800d3fa:	2235      	movs	r2, #53	; 0x35
 800d3fc:	21ca      	movs	r1, #202	; 0xca
 800d3fe:	2041      	movs	r0, #65	; 0x41
 800d400:	f00f fbd0 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800d404:	2235      	movs	r2, #53	; 0x35
 800d406:	2195      	movs	r1, #149	; 0x95
 800d408:	203a      	movs	r0, #58	; 0x3a
 800d40a:	f00f fbcb 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800d40e:	2230      	movs	r2, #48	; 0x30
 800d410:	2195      	movs	r1, #149	; 0x95
 800d412:	2041      	movs	r0, #65	; 0x41
 800d414:	f00f fbc6 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800d418:	2237      	movs	r2, #55	; 0x37
 800d41a:	2160      	movs	r1, #96	; 0x60
 800d41c:	203a      	movs	r0, #58	; 0x3a
 800d41e:	f00f fbc1 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800d422:	2235      	movs	r2, #53	; 0x35
 800d424:	2160      	movs	r1, #96	; 0x60
 800d426:	2041      	movs	r0, #65	; 0x41
 800d428:	f00f fbbc 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800d42c:	2231      	movs	r2, #49	; 0x31
 800d42e:	212b      	movs	r1, #43	; 0x2b
 800d430:	2039      	movs	r0, #57	; 0x39
 800d432:	f00f fbb7 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800d436:	2230      	movs	r2, #48	; 0x30
 800d438:	212b      	movs	r1, #43	; 0x2b
 800d43a:	203e      	movs	r0, #62	; 0x3e
 800d43c:	f00f fbb2 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800d440:	2230      	movs	r2, #48	; 0x30
 800d442:	212b      	movs	r1, #43	; 0x2b
 800d444:	2043      	movs	r0, #67	; 0x43
 800d446:	f00f fbad 	bl	801cba4 <TFT_DrawChar>
		TFT_direction = 0x00;
 800d44a:	2300      	movs	r3, #0
 800d44c:	702b      	strb	r3, [r5, #0]
 800d44e:	bd38      	pop	{r3, r4, r5, pc}
 800d450:	200056a0 	.word	0x200056a0
 800d454:	20000210 	.word	0x20000210

0800d458 <CRI_chart>:

void CRI_chart(uint8_t direction, int8_t *GraphData)
{
 800d458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d45c:	ed2d 8b02 	vpush	{d8}
 800d460:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800d462:	ae06      	add	r6, sp, #24
 800d464:	2300      	movs	r3, #0
{
 800d466:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800d468:	f826 3d04 	strh.w	r3, [r6, #-4]!
 800d46c:	1e4d      	subs	r5, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800d46e:	2800      	cmp	r0, #0
 800d470:	f040 82de 	bne.w	800da30 <CRI_chart+0x5d8>
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800d474:	f991 3000 	ldrsb.w	r3, [r1]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f2c0 826f 	blt.w	800d95c <CRI_chart+0x504>
 800d47e:	2b64      	cmp	r3, #100	; 0x64
 800d480:	f300 826f 	bgt.w	800d962 <CRI_chart+0x50a>
 800d484:	ee07 3a90 	vmov	s15, r3
 800d488:	ed9f 7af7 	vldr	s14, [pc, #988]	; 800d868 <CRI_chart+0x410>
 800d48c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d490:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d494:	eddf 7af5 	vldr	s15, [pc, #980]	; 800d86c <CRI_chart+0x414>
 800d498:	ed9f 7af5 	vldr	s14, [pc, #980]	; 800d870 <CRI_chart+0x418>
 800d49c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d4a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4a4:	edcd 7a03 	vstr	s15, [sp, #12]
 800d4a8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d4ac:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800d4b0:	9300      	str	r3, [sp, #0]
 800d4b2:	2222      	movs	r2, #34	; 0x22
 800d4b4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d4b8:	2018      	movs	r0, #24
 800d4ba:	f00f f880 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800d4be:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	f2c0 8250 	blt.w	800d968 <CRI_chart+0x510>
 800d4c8:	2b64      	cmp	r3, #100	; 0x64
 800d4ca:	f300 8250 	bgt.w	800d96e <CRI_chart+0x516>
 800d4ce:	ee07 3a90 	vmov	s15, r3
 800d4d2:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 800d868 <CRI_chart+0x410>
 800d4d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d4de:	eddf 7ae3 	vldr	s15, [pc, #908]	; 800d86c <CRI_chart+0x414>
 800d4e2:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 800d870 <CRI_chart+0x418>
 800d4e6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d4ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ee:	edcd 7a03 	vstr	s15, [sp, #12]
 800d4f2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d4f6:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	2232      	movs	r2, #50	; 0x32
 800d4fe:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d502:	2028      	movs	r0, #40	; 0x28
 800d504:	f00f f85b 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800d508:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	f2c0 8231 	blt.w	800d974 <CRI_chart+0x51c>
 800d512:	2b64      	cmp	r3, #100	; 0x64
 800d514:	f300 8231 	bgt.w	800d97a <CRI_chart+0x522>
 800d518:	ee07 3a90 	vmov	s15, r3
 800d51c:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800d868 <CRI_chart+0x410>
 800d520:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d524:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d528:	eddf 7ad0 	vldr	s15, [pc, #832]	; 800d86c <CRI_chart+0x414>
 800d52c:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 800d870 <CRI_chart+0x418>
 800d530:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d534:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d538:	edcd 7a03 	vstr	s15, [sp, #12]
 800d53c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d540:	f64a 5388 	movw	r3, #44424	; 0xad88
 800d544:	9300      	str	r3, [sp, #0]
 800d546:	2242      	movs	r2, #66	; 0x42
 800d548:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d54c:	2038      	movs	r0, #56	; 0x38
 800d54e:	f00f f836 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800d552:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800d556:	2b00      	cmp	r3, #0
 800d558:	f2c0 8212 	blt.w	800d980 <CRI_chart+0x528>
 800d55c:	2b64      	cmp	r3, #100	; 0x64
 800d55e:	f300 8212 	bgt.w	800d986 <CRI_chart+0x52e>
 800d562:	ee07 3a90 	vmov	s15, r3
 800d566:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800d868 <CRI_chart+0x410>
 800d56a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d56e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d572:	eddf 7abe 	vldr	s15, [pc, #760]	; 800d86c <CRI_chart+0x414>
 800d576:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800d870 <CRI_chart+0x418>
 800d57a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d57e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d582:	edcd 7a03 	vstr	s15, [sp, #12]
 800d586:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d58a:	f241 430f 	movw	r3, #5135	; 0x140f
 800d58e:	9300      	str	r3, [sp, #0]
 800d590:	2252      	movs	r2, #82	; 0x52
 800d592:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d596:	2048      	movs	r0, #72	; 0x48
 800d598:	f00f f811 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800d59c:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	f2c0 81f3 	blt.w	800d98c <CRI_chart+0x534>
 800d5a6:	2b64      	cmp	r3, #100	; 0x64
 800d5a8:	f300 81f3 	bgt.w	800d992 <CRI_chart+0x53a>
 800d5ac:	ee07 3a90 	vmov	s15, r3
 800d5b0:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800d868 <CRI_chart+0x410>
 800d5b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d5bc:	eddf 7aab 	vldr	s15, [pc, #684]	; 800d86c <CRI_chart+0x414>
 800d5c0:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800d870 <CRI_chart+0x418>
 800d5c4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d5c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5cc:	edcd 7a03 	vstr	s15, [sp, #12]
 800d5d0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d5d4:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800d5d8:	9300      	str	r3, [sp, #0]
 800d5da:	2262      	movs	r2, #98	; 0x62
 800d5dc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d5e0:	2058      	movs	r0, #88	; 0x58
 800d5e2:	f00e ffec 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800d5e6:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f2c0 81d4 	blt.w	800d998 <CRI_chart+0x540>
 800d5f0:	2b64      	cmp	r3, #100	; 0x64
 800d5f2:	f300 81d4 	bgt.w	800d99e <CRI_chart+0x546>
 800d5f6:	ee07 3a90 	vmov	s15, r3
 800d5fa:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800d868 <CRI_chart+0x410>
 800d5fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d602:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d606:	eddf 7a99 	vldr	s15, [pc, #612]	; 800d86c <CRI_chart+0x414>
 800d60a:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800d870 <CRI_chart+0x418>
 800d60e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d616:	edcd 7a03 	vstr	s15, [sp, #12]
 800d61a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d61e:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	2272      	movs	r2, #114	; 0x72
 800d626:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d62a:	2068      	movs	r0, #104	; 0x68
 800d62c:	f00e ffc7 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800d630:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800d634:	2b00      	cmp	r3, #0
 800d636:	f2c0 81b5 	blt.w	800d9a4 <CRI_chart+0x54c>
 800d63a:	2b64      	cmp	r3, #100	; 0x64
 800d63c:	f300 81b5 	bgt.w	800d9aa <CRI_chart+0x552>
 800d640:	ee07 3a90 	vmov	s15, r3
 800d644:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800d868 <CRI_chart+0x410>
 800d648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d64c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d650:	eddf 7a86 	vldr	s15, [pc, #536]	; 800d86c <CRI_chart+0x414>
 800d654:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800d870 <CRI_chart+0x418>
 800d658:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d65c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d660:	edcd 7a03 	vstr	s15, [sp, #12]
 800d664:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d668:	f248 4357 	movw	r3, #33879	; 0x8457
 800d66c:	9300      	str	r3, [sp, #0]
 800d66e:	2282      	movs	r2, #130	; 0x82
 800d670:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d674:	2078      	movs	r0, #120	; 0x78
 800d676:	f00e ffa2 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800d67a:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f2c0 8196 	blt.w	800d9b0 <CRI_chart+0x558>
 800d684:	2b64      	cmp	r3, #100	; 0x64
 800d686:	f300 8196 	bgt.w	800d9b6 <CRI_chart+0x55e>
 800d68a:	ee07 3a90 	vmov	s15, r3
 800d68e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800d868 <CRI_chart+0x410>
 800d692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d696:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d69a:	eddf 7a74 	vldr	s15, [pc, #464]	; 800d86c <CRI_chart+0x414>
 800d69e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800d870 <CRI_chart+0x418>
 800d6a2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d6a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6aa:	edcd 7a03 	vstr	s15, [sp, #12]
 800d6ae:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d6b2:	f24a 4377 	movw	r3, #42103	; 0xa477
 800d6b6:	9300      	str	r3, [sp, #0]
 800d6b8:	2292      	movs	r2, #146	; 0x92
 800d6ba:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d6be:	2088      	movs	r0, #136	; 0x88
 800d6c0:	f00e ff7d 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800d6c4:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f2c0 8177 	blt.w	800d9bc <CRI_chart+0x564>
 800d6ce:	2b64      	cmp	r3, #100	; 0x64
 800d6d0:	f300 8177 	bgt.w	800d9c2 <CRI_chart+0x56a>
 800d6d4:	ee07 3a90 	vmov	s15, r3
 800d6d8:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800d868 <CRI_chart+0x410>
 800d6dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d6e4:	eddf 7a61 	vldr	s15, [pc, #388]	; 800d86c <CRI_chart+0x414>
 800d6e8:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800d870 <CRI_chart+0x418>
 800d6ec:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d6f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6f4:	edcd 7a03 	vstr	s15, [sp, #12]
 800d6f8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d6fc:	f24e 1365 	movw	r3, #57701	; 0xe165
 800d700:	9300      	str	r3, [sp, #0]
 800d702:	22a2      	movs	r2, #162	; 0xa2
 800d704:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d708:	2098      	movs	r0, #152	; 0x98
 800d70a:	f00e ff58 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800d70e:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800d712:	2b00      	cmp	r3, #0
 800d714:	f2c0 8158 	blt.w	800d9c8 <CRI_chart+0x570>
 800d718:	2b64      	cmp	r3, #100	; 0x64
 800d71a:	f300 8158 	bgt.w	800d9ce <CRI_chart+0x576>
 800d71e:	ee07 3a90 	vmov	s15, r3
 800d722:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800d868 <CRI_chart+0x410>
 800d726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d72a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d72e:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800d86c <CRI_chart+0x414>
 800d732:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800d870 <CRI_chart+0x418>
 800d736:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d73a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d73e:	edcd 7a03 	vstr	s15, [sp, #12]
 800d742:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d746:	f24e 7323 	movw	r3, #59171	; 0xe723
 800d74a:	9300      	str	r3, [sp, #0]
 800d74c:	22b2      	movs	r2, #178	; 0xb2
 800d74e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d752:	20a8      	movs	r0, #168	; 0xa8
 800d754:	f00e ff33 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800d758:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	f2c0 8139 	blt.w	800d9d4 <CRI_chart+0x57c>
 800d762:	2b64      	cmp	r3, #100	; 0x64
 800d764:	f300 8139 	bgt.w	800d9da <CRI_chart+0x582>
 800d768:	ee07 3a90 	vmov	s15, r3
 800d76c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800d868 <CRI_chart+0x410>
 800d770:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d774:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d778:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800d86c <CRI_chart+0x414>
 800d77c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800d870 <CRI_chart+0x418>
 800d780:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d788:	edcd 7a03 	vstr	s15, [sp, #12]
 800d78c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d790:	f241 4327 	movw	r3, #5159	; 0x1427
 800d794:	9300      	str	r3, [sp, #0]
 800d796:	22c2      	movs	r2, #194	; 0xc2
 800d798:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d79c:	20b8      	movs	r0, #184	; 0xb8
 800d79e:	f00e ff0e 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800d7a2:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	f2c0 811a 	blt.w	800d9e0 <CRI_chart+0x588>
 800d7ac:	2b64      	cmp	r3, #100	; 0x64
 800d7ae:	f300 811a 	bgt.w	800d9e6 <CRI_chart+0x58e>
 800d7b2:	ee07 3a90 	vmov	s15, r3
 800d7b6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800d868 <CRI_chart+0x410>
 800d7ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d7be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d7c2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800d86c <CRI_chart+0x414>
 800d7c6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d870 <CRI_chart+0x418>
 800d7ca:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d7ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7d2:	edcd 7a03 	vstr	s15, [sp, #12]
 800d7d6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d7da:	f242 138d 	movw	r3, #8589	; 0x218d
 800d7de:	9300      	str	r3, [sp, #0]
 800d7e0:	22d2      	movs	r2, #210	; 0xd2
 800d7e2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d7e6:	20c8      	movs	r0, #200	; 0xc8
 800d7e8:	f00e fee9 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800d7ec:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f2c0 80fb 	blt.w	800d9ec <CRI_chart+0x594>
 800d7f6:	2b64      	cmp	r3, #100	; 0x64
 800d7f8:	f300 80fb 	bgt.w	800d9f2 <CRI_chart+0x59a>
 800d7fc:	ee07 3a90 	vmov	s15, r3
 800d800:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800d868 <CRI_chart+0x410>
 800d804:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d808:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d80c:	eddf 7a17 	vldr	s15, [pc, #92]	; 800d86c <CRI_chart+0x414>
 800d810:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d870 <CRI_chart+0x418>
 800d814:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d81c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d820:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d824:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800d828:	9300      	str	r3, [sp, #0]
 800d82a:	22e2      	movs	r2, #226	; 0xe2
 800d82c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d830:	20d8      	movs	r0, #216	; 0xd8
 800d832:	f00e fec4 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800d836:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f2c0 80dc 	blt.w	800d9f8 <CRI_chart+0x5a0>
 800d840:	2b64      	cmp	r3, #100	; 0x64
 800d842:	f300 80dc 	bgt.w	800d9fe <CRI_chart+0x5a6>
 800d846:	ee07 3a90 	vmov	s15, r3
 800d84a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800d868 <CRI_chart+0x410>
 800d84e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d852:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d856:	eddf 7a05 	vldr	s15, [pc, #20]	; 800d86c <CRI_chart+0x414>
 800d85a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800d870 <CRI_chart+0x418>
 800d85e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d866:	e00b      	b.n	800d880 <CRI_chart+0x428>
 800d868:	42c80000 	.word	0x42c80000
 800d86c:	43cd0000 	.word	0x43cd0000
 800d870:	43988000 	.word	0x43988000
 800d874:	42c80000 	.word	0x42c80000
 800d878:	43cd0000 	.word	0x43cd0000
 800d87c:	43988000 	.word	0x43988000
 800d880:	edcd 7a03 	vstr	s15, [sp, #12]
 800d884:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d888:	f641 3346 	movw	r3, #6982	; 0x1b46
 800d88c:	9300      	str	r3, [sp, #0]
 800d88e:	22f2      	movs	r2, #242	; 0xf2
 800d890:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d894:	20e8      	movs	r0, #232	; 0xe8
 800d896:	f00e fe92 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d89a:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	f2c0 80b0 	blt.w	800da04 <CRI_chart+0x5ac>
 800d8a4:	2b64      	cmp	r3, #100	; 0x64
 800d8a6:	f300 80b0 	bgt.w	800da0a <CRI_chart+0x5b2>
 800d8aa:	ee07 3a90 	vmov	s15, r3
 800d8ae:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 800d874 <CRI_chart+0x41c>
 800d8b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d8ba:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 800d878 <CRI_chart+0x420>
 800d8be:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 800d87c <CRI_chart+0x424>
 800d8c2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d8c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8ca:	edcd 7a03 	vstr	s15, [sp, #12]
 800d8ce:	f8bd 100c 	ldrh.w	r1, [sp, #12]
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800d8d2:	4f52      	ldr	r7, [pc, #328]	; (800da1c <CRI_chart+0x5c4>)
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d8d4:	ed9f 8a52 	vldr	s16, [pc, #328]	; 800da20 <CRI_chart+0x5c8>
 800d8d8:	eddf 8a52 	vldr	s17, [pc, #328]	; 800da24 <CRI_chart+0x5cc>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d8dc:	f24f 6311 	movw	r3, #62993	; 0xf611
 800d8e0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	20f8      	movs	r0, #248	; 0xf8
 800d8e8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d8ec:	f00e fe67 	bl	801c5be <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800d8f0:	484d      	ldr	r0, [pc, #308]	; (800da28 <CRI_chart+0x5d0>)
 800d8f2:	f00f f88d 	bl	801ca10 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800d8f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d8fa:	f00f f88f 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d8fe:	2063      	movs	r0, #99	; 0x63
 800d900:	f00f f892 	bl	801ca28 <TFT_SetBackColor>
 800d904:	2418      	movs	r4, #24
			sprintf (buffer, "%d", GraphData[i]);
 800d906:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800d90a:	4639      	mov	r1, r7
 800d90c:	4630      	mov	r0, r6
 800d90e:	f012 fcc1 	bl	8020294 <sprintf>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d912:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800d916:	2b00      	cmp	r3, #0
 800d918:	db7a      	blt.n	800da10 <CRI_chart+0x5b8>
 800d91a:	2b64      	cmp	r3, #100	; 0x64
 800d91c:	dc7b      	bgt.n	800da16 <CRI_chart+0x5be>
 800d91e:	ee07 3a90 	vmov	s15, r3
 800d922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d926:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800d92a:	eddf 7a40 	vldr	s15, [pc, #256]	; 800da2c <CRI_chart+0x5d4>
 800d92e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800d932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d936:	edcd 7a03 	vstr	s15, [sp, #12]
 800d93a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d93e:	4620      	mov	r0, r4
 800d940:	3410      	adds	r4, #16
 800d942:	2303      	movs	r3, #3
 800d944:	4632      	mov	r2, r6
 800d946:	b2a4      	uxth	r4, r4
 800d948:	f00f f984 	bl	801cc54 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800d94c:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800d950:	d1d9      	bne.n	800d906 <CRI_chart+0x4ae>
					X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800d952:	b006      	add	sp, #24
 800d954:	ecbd 8b02 	vpop	{d8}
 800d958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800d95c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d960:	e5a4      	b.n	800d4ac <CRI_chart+0x54>
 800d962:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d966:	e5a1      	b.n	800d4ac <CRI_chart+0x54>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800d968:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d96c:	e5c3      	b.n	800d4f6 <CRI_chart+0x9e>
 800d96e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d972:	e5c0      	b.n	800d4f6 <CRI_chart+0x9e>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800d974:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d978:	e5e2      	b.n	800d540 <CRI_chart+0xe8>
 800d97a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d97e:	e5df      	b.n	800d540 <CRI_chart+0xe8>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800d980:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d984:	e601      	b.n	800d58a <CRI_chart+0x132>
 800d986:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d98a:	e5fe      	b.n	800d58a <CRI_chart+0x132>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800d98c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d990:	e620      	b.n	800d5d4 <CRI_chart+0x17c>
 800d992:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d996:	e61d      	b.n	800d5d4 <CRI_chart+0x17c>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800d998:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d99c:	e63f      	b.n	800d61e <CRI_chart+0x1c6>
 800d99e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d9a2:	e63c      	b.n	800d61e <CRI_chart+0x1c6>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800d9a4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d9a8:	e65e      	b.n	800d668 <CRI_chart+0x210>
 800d9aa:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d9ae:	e65b      	b.n	800d668 <CRI_chart+0x210>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800d9b0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d9b4:	e67d      	b.n	800d6b2 <CRI_chart+0x25a>
 800d9b6:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d9ba:	e67a      	b.n	800d6b2 <CRI_chart+0x25a>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800d9bc:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d9c0:	e69c      	b.n	800d6fc <CRI_chart+0x2a4>
 800d9c2:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d9c6:	e699      	b.n	800d6fc <CRI_chart+0x2a4>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800d9c8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d9cc:	e6bb      	b.n	800d746 <CRI_chart+0x2ee>
 800d9ce:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d9d2:	e6b8      	b.n	800d746 <CRI_chart+0x2ee>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800d9d4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d9d8:	e6da      	b.n	800d790 <CRI_chart+0x338>
 800d9da:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d9de:	e6d7      	b.n	800d790 <CRI_chart+0x338>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800d9e0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d9e4:	e6f9      	b.n	800d7da <CRI_chart+0x382>
 800d9e6:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d9ea:	e6f6      	b.n	800d7da <CRI_chart+0x382>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800d9ec:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d9f0:	e718      	b.n	800d824 <CRI_chart+0x3cc>
 800d9f2:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d9f6:	e715      	b.n	800d824 <CRI_chart+0x3cc>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800d9f8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d9fc:	e744      	b.n	800d888 <CRI_chart+0x430>
 800d9fe:	f44f 719b 	mov.w	r1, #310	; 0x136
 800da02:	e741      	b.n	800d888 <CRI_chart+0x430>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800da04:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800da08:	e763      	b.n	800d8d2 <CRI_chart+0x47a>
 800da0a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800da0e:	e760      	b.n	800d8d2 <CRI_chart+0x47a>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800da10:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800da14:	e793      	b.n	800d93e <CRI_chart+0x4e6>
 800da16:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800da1a:	e790      	b.n	800d93e <CRI_chart+0x4e6>
 800da1c:	08024f89 	.word	0x08024f89
 800da20:	42c80000 	.word	0x42c80000
 800da24:	43988000 	.word	0x43988000
 800da28:	20000210 	.word	0x20000210
 800da2c:	43c80000 	.word	0x43c80000
		if(direction == 0x01){TFT_direction = 0x01;} 
 800da30:	2801      	cmp	r0, #1
 800da32:	4fed      	ldr	r7, [pc, #948]	; (800dde8 <CRI_chart+0x990>)
		else {TFT_direction = 0x02;}
 800da34:	bf16      	itet	ne
 800da36:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800da38:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800da3a:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800da3c:	f991 3000 	ldrsb.w	r3, [r1]
 800da40:	2b00      	cmp	r3, #0
 800da42:	f2c0 8260 	blt.w	800df06 <CRI_chart+0xaae>
 800da46:	2b64      	cmp	r3, #100	; 0x64
 800da48:	f300 825f 	bgt.w	800df0a <CRI_chart+0xab2>
 800da4c:	ee07 3a90 	vmov	s15, r3
 800da50:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 800ddec <CRI_chart+0x994>
 800da54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da5c:	eddf 7ae4 	vldr	s15, [pc, #912]	; 800ddf0 <CRI_chart+0x998>
 800da60:	ed9f 7ae4 	vldr	s14, [pc, #912]	; 800ddf4 <CRI_chart+0x99c>
 800da64:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da6c:	edcd 7a03 	vstr	s15, [sp, #12]
 800da70:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da74:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	2262      	movs	r2, #98	; 0x62
 800da7c:	23fc      	movs	r3, #252	; 0xfc
 800da7e:	2057      	movs	r0, #87	; 0x57
 800da80:	f00e fd9d 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800da84:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f2c0 8240 	blt.w	800df0e <CRI_chart+0xab6>
 800da8e:	2b64      	cmp	r3, #100	; 0x64
 800da90:	f300 823f 	bgt.w	800df12 <CRI_chart+0xaba>
 800da94:	ee07 3a90 	vmov	s15, r3
 800da98:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 800ddec <CRI_chart+0x994>
 800da9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800daa0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800daa4:	eddf 7ad2 	vldr	s15, [pc, #840]	; 800ddf0 <CRI_chart+0x998>
 800daa8:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800ddf4 <CRI_chart+0x99c>
 800daac:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dab4:	edcd 7a03 	vstr	s15, [sp, #12]
 800dab8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dabc:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800dac0:	9300      	str	r3, [sp, #0]
 800dac2:	2278      	movs	r2, #120	; 0x78
 800dac4:	23fc      	movs	r3, #252	; 0xfc
 800dac6:	206d      	movs	r0, #109	; 0x6d
 800dac8:	f00e fd79 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800dacc:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	f2c0 8220 	blt.w	800df16 <CRI_chart+0xabe>
 800dad6:	2b64      	cmp	r3, #100	; 0x64
 800dad8:	f300 821f 	bgt.w	800df1a <CRI_chart+0xac2>
 800dadc:	ee07 3a90 	vmov	s15, r3
 800dae0:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800ddec <CRI_chart+0x994>
 800dae4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dae8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800daec:	eddf 7ac0 	vldr	s15, [pc, #768]	; 800ddf0 <CRI_chart+0x998>
 800daf0:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800ddf4 <CRI_chart+0x99c>
 800daf4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800daf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dafc:	edcd 7a03 	vstr	s15, [sp, #12]
 800db00:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db04:	f64a 5388 	movw	r3, #44424	; 0xad88
 800db08:	9300      	str	r3, [sp, #0]
 800db0a:	228e      	movs	r2, #142	; 0x8e
 800db0c:	23fc      	movs	r3, #252	; 0xfc
 800db0e:	2083      	movs	r0, #131	; 0x83
 800db10:	f00e fd55 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800db14:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	f2c0 8200 	blt.w	800df1e <CRI_chart+0xac6>
 800db1e:	2b64      	cmp	r3, #100	; 0x64
 800db20:	f300 81ff 	bgt.w	800df22 <CRI_chart+0xaca>
 800db24:	ee07 3a90 	vmov	s15, r3
 800db28:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800ddec <CRI_chart+0x994>
 800db2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db34:	eddf 7aae 	vldr	s15, [pc, #696]	; 800ddf0 <CRI_chart+0x998>
 800db38:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800ddf4 <CRI_chart+0x99c>
 800db3c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800db40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db44:	edcd 7a03 	vstr	s15, [sp, #12]
 800db48:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db4c:	f241 430f 	movw	r3, #5135	; 0x140f
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	22a4      	movs	r2, #164	; 0xa4
 800db54:	23fc      	movs	r3, #252	; 0xfc
 800db56:	2099      	movs	r0, #153	; 0x99
 800db58:	f00e fd31 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800db5c:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	f2c0 81e0 	blt.w	800df26 <CRI_chart+0xace>
 800db66:	2b64      	cmp	r3, #100	; 0x64
 800db68:	f300 81df 	bgt.w	800df2a <CRI_chart+0xad2>
 800db6c:	ee07 3a90 	vmov	s15, r3
 800db70:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800ddec <CRI_chart+0x994>
 800db74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db7c:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800ddf0 <CRI_chart+0x998>
 800db80:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800ddf4 <CRI_chart+0x99c>
 800db84:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800db88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db8c:	edcd 7a03 	vstr	s15, [sp, #12]
 800db90:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db94:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800db98:	9300      	str	r3, [sp, #0]
 800db9a:	22ba      	movs	r2, #186	; 0xba
 800db9c:	23fc      	movs	r3, #252	; 0xfc
 800db9e:	20af      	movs	r0, #175	; 0xaf
 800dba0:	f00e fd0d 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800dba4:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f2c0 81c0 	blt.w	800df2e <CRI_chart+0xad6>
 800dbae:	2b64      	cmp	r3, #100	; 0x64
 800dbb0:	f300 81bf 	bgt.w	800df32 <CRI_chart+0xada>
 800dbb4:	ee07 3a90 	vmov	s15, r3
 800dbb8:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800ddec <CRI_chart+0x994>
 800dbbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbc0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dbc4:	eddf 7a8a 	vldr	s15, [pc, #552]	; 800ddf0 <CRI_chart+0x998>
 800dbc8:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800ddf4 <CRI_chart+0x99c>
 800dbcc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dbd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbd4:	edcd 7a03 	vstr	s15, [sp, #12]
 800dbd8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dbdc:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800dbe0:	9300      	str	r3, [sp, #0]
 800dbe2:	22d0      	movs	r2, #208	; 0xd0
 800dbe4:	23fc      	movs	r3, #252	; 0xfc
 800dbe6:	20c5      	movs	r0, #197	; 0xc5
 800dbe8:	f00e fce9 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800dbec:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f2c0 81a0 	blt.w	800df36 <CRI_chart+0xade>
 800dbf6:	2b64      	cmp	r3, #100	; 0x64
 800dbf8:	f300 819f 	bgt.w	800df3a <CRI_chart+0xae2>
 800dbfc:	ee07 3a90 	vmov	s15, r3
 800dc00:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800ddec <CRI_chart+0x994>
 800dc04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc0c:	eddf 7a78 	vldr	s15, [pc, #480]	; 800ddf0 <CRI_chart+0x998>
 800dc10:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800ddf4 <CRI_chart+0x99c>
 800dc14:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dc18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc1c:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc20:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dc24:	f248 4357 	movw	r3, #33879	; 0x8457
 800dc28:	9300      	str	r3, [sp, #0]
 800dc2a:	22e6      	movs	r2, #230	; 0xe6
 800dc2c:	23fc      	movs	r3, #252	; 0xfc
 800dc2e:	20db      	movs	r0, #219	; 0xdb
 800dc30:	f00e fcc5 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800dc34:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	f2c0 8180 	blt.w	800df3e <CRI_chart+0xae6>
 800dc3e:	2b64      	cmp	r3, #100	; 0x64
 800dc40:	f300 817f 	bgt.w	800df42 <CRI_chart+0xaea>
 800dc44:	ee07 3a90 	vmov	s15, r3
 800dc48:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800ddec <CRI_chart+0x994>
 800dc4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc50:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc54:	eddf 7a66 	vldr	s15, [pc, #408]	; 800ddf0 <CRI_chart+0x998>
 800dc58:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800ddf4 <CRI_chart+0x99c>
 800dc5c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dc60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc64:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc68:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dc6c:	f24a 4377 	movw	r3, #42103	; 0xa477
 800dc70:	9300      	str	r3, [sp, #0]
 800dc72:	23fc      	movs	r3, #252	; 0xfc
 800dc74:	461a      	mov	r2, r3
 800dc76:	20f1      	movs	r0, #241	; 0xf1
 800dc78:	f00e fca1 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800dc7c:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	f2c0 8160 	blt.w	800df46 <CRI_chart+0xaee>
 800dc86:	2b64      	cmp	r3, #100	; 0x64
 800dc88:	f300 815f 	bgt.w	800df4a <CRI_chart+0xaf2>
 800dc8c:	ee07 3a90 	vmov	s15, r3
 800dc90:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800ddec <CRI_chart+0x994>
 800dc94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc9c:	eddf 7a54 	vldr	s15, [pc, #336]	; 800ddf0 <CRI_chart+0x998>
 800dca0:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800ddf4 <CRI_chart+0x99c>
 800dca4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcac:	edcd 7a03 	vstr	s15, [sp, #12]
 800dcb0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dcb4:	f24e 1365 	movw	r3, #57701	; 0xe165
 800dcb8:	9300      	str	r3, [sp, #0]
 800dcba:	f44f 7289 	mov.w	r2, #274	; 0x112
 800dcbe:	23fc      	movs	r3, #252	; 0xfc
 800dcc0:	f240 1007 	movw	r0, #263	; 0x107
 800dcc4:	f00e fc7b 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800dcc8:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	f2c0 813e 	blt.w	800df4e <CRI_chart+0xaf6>
 800dcd2:	2b64      	cmp	r3, #100	; 0x64
 800dcd4:	f300 813d 	bgt.w	800df52 <CRI_chart+0xafa>
 800dcd8:	ee07 3a90 	vmov	s15, r3
 800dcdc:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800ddec <CRI_chart+0x994>
 800dce0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dce4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dce8:	eddf 7a41 	vldr	s15, [pc, #260]	; 800ddf0 <CRI_chart+0x998>
 800dcec:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ddf4 <CRI_chart+0x99c>
 800dcf0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dcf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcf8:	edcd 7a03 	vstr	s15, [sp, #12]
 800dcfc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dd00:	f24e 7323 	movw	r3, #59171	; 0xe723
 800dd04:	9300      	str	r3, [sp, #0]
 800dd06:	f44f 7294 	mov.w	r2, #296	; 0x128
 800dd0a:	23fc      	movs	r3, #252	; 0xfc
 800dd0c:	f240 101d 	movw	r0, #285	; 0x11d
 800dd10:	f00e fc55 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800dd14:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	f2c0 811c 	blt.w	800df56 <CRI_chart+0xafe>
 800dd1e:	2b64      	cmp	r3, #100	; 0x64
 800dd20:	f300 811b 	bgt.w	800df5a <CRI_chart+0xb02>
 800dd24:	ee07 3a90 	vmov	s15, r3
 800dd28:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800ddec <CRI_chart+0x994>
 800dd2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dd34:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800ddf0 <CRI_chart+0x998>
 800dd38:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800ddf4 <CRI_chart+0x99c>
 800dd3c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dd40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd44:	edcd 7a03 	vstr	s15, [sp, #12]
 800dd48:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dd4c:	f241 4327 	movw	r3, #5159	; 0x1427
 800dd50:	9300      	str	r3, [sp, #0]
 800dd52:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800dd56:	23fc      	movs	r3, #252	; 0xfc
 800dd58:	f240 1033 	movw	r0, #307	; 0x133
 800dd5c:	f00e fc2f 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800dd60:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	f2c0 80fa 	blt.w	800df5e <CRI_chart+0xb06>
 800dd6a:	2b64      	cmp	r3, #100	; 0x64
 800dd6c:	f300 80f9 	bgt.w	800df62 <CRI_chart+0xb0a>
 800dd70:	ee07 3a90 	vmov	s15, r3
 800dd74:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800ddec <CRI_chart+0x994>
 800dd78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd7c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dd80:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800ddf0 <CRI_chart+0x998>
 800dd84:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800ddf4 <CRI_chart+0x99c>
 800dd88:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dd8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd90:	edcd 7a03 	vstr	s15, [sp, #12]
 800dd94:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dd98:	f242 138d 	movw	r3, #8589	; 0x218d
 800dd9c:	9300      	str	r3, [sp, #0]
 800dd9e:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800dda2:	23fc      	movs	r3, #252	; 0xfc
 800dda4:	f240 1049 	movw	r0, #329	; 0x149
 800dda8:	f00e fc09 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800ddac:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	f2c0 80d8 	blt.w	800df66 <CRI_chart+0xb0e>
 800ddb6:	2b64      	cmp	r3, #100	; 0x64
 800ddb8:	f300 80d7 	bgt.w	800df6a <CRI_chart+0xb12>
 800ddbc:	ee07 3a90 	vmov	s15, r3
 800ddc0:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800ddec <CRI_chart+0x994>
 800ddc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ddc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ddcc:	eddf 7a08 	vldr	s15, [pc, #32]	; 800ddf0 <CRI_chart+0x998>
 800ddd0:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800ddf4 <CRI_chart+0x99c>
 800ddd4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ddd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dddc:	edcd 7a03 	vstr	s15, [sp, #12]
 800dde0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dde4:	e008      	b.n	800ddf8 <CRI_chart+0x9a0>
 800dde6:	bf00      	nop
 800dde8:	200056a0 	.word	0x200056a0
 800ddec:	42c80000 	.word	0x42c80000
 800ddf0:	437e0000 	.word	0x437e0000
 800ddf4:	43520000 	.word	0x43520000
 800ddf8:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800ddfc:	9300      	str	r3, [sp, #0]
 800ddfe:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800de02:	23fc      	movs	r3, #252	; 0xfc
 800de04:	f240 105f 	movw	r0, #351	; 0x15f
 800de08:	f00e fbd9 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800de0c:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800de10:	2b00      	cmp	r3, #0
 800de12:	f2c0 80ac 	blt.w	800df6e <CRI_chart+0xb16>
 800de16:	2b64      	cmp	r3, #100	; 0x64
 800de18:	f300 80ab 	bgt.w	800df72 <CRI_chart+0xb1a>
 800de1c:	ee07 3a90 	vmov	s15, r3
 800de20:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 800ddec <CRI_chart+0x994>
 800de24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800de2c:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 800ddf0 <CRI_chart+0x998>
 800de30:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 800ddf4 <CRI_chart+0x99c>
 800de34:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800de38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de3c:	edcd 7a03 	vstr	s15, [sp, #12]
 800de40:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800de44:	f641 3346 	movw	r3, #6982	; 0x1b46
 800de48:	9300      	str	r3, [sp, #0]
 800de4a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800de4e:	23fc      	movs	r3, #252	; 0xfc
 800de50:	f240 1075 	movw	r0, #373	; 0x175
 800de54:	f00e fbb3 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800de58:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	f2c0 808a 	blt.w	800df76 <CRI_chart+0xb1e>
 800de62:	2b64      	cmp	r3, #100	; 0x64
 800de64:	f300 8089 	bgt.w	800df7a <CRI_chart+0xb22>
 800de68:	ee07 3a90 	vmov	s15, r3
 800de6c:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 800ddec <CRI_chart+0x994>
 800de70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de74:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800de78:	ed5f 7a23 	vldr	s15, [pc, #-140]	; 800ddf0 <CRI_chart+0x998>
 800de7c:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 800ddf4 <CRI_chart+0x99c>
 800de80:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800de84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800de88:	edcd 7a03 	vstr	s15, [sp, #12]
 800de8c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
					sprintf (buffer, "%d", GraphData[i]);
 800de90:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800df94 <CRI_chart+0xb3c>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800de94:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 800df88 <CRI_chart+0xb30>
 800de98:	eddf 8a3c 	vldr	s17, [pc, #240]	; 800df8c <CRI_chart+0xb34>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800de9c:	f24f 6311 	movw	r3, #62993	; 0xf611
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800dea6:	23fc      	movs	r3, #252	; 0xfc
 800dea8:	f240 108b 	movw	r0, #395	; 0x18b
 800deac:	f00e fb87 	bl	801c5be <TFT_FillRectangle>
 800deb0:	2457      	movs	r4, #87	; 0x57
					sprintf (buffer, "%d", GraphData[i]);
 800deb2:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800deb6:	4641      	mov	r1, r8
 800deb8:	4630      	mov	r0, r6
 800deba:	f012 f9eb 	bl	8020294 <sprintf>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800debe:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	db5b      	blt.n	800df7e <CRI_chart+0xb26>
 800dec6:	2b64      	cmp	r3, #100	; 0x64
 800dec8:	dc5b      	bgt.n	800df82 <CRI_chart+0xb2a>
 800deca:	ee07 3a90 	vmov	s15, r3
 800dece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ded2:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ded6:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800df90 <CRI_chart+0xb38>
 800deda:	eee7 7a68 	vfms.f32	s15, s14, s17
 800dede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dee2:	edcd 7a03 	vstr	s15, [sp, #12]
 800dee6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800deea:	2303      	movs	r3, #3
 800deec:	4620      	mov	r0, r4
 800deee:	4632      	mov	r2, r6
 800def0:	3416      	adds	r4, #22
 800def2:	f00e feaf 	bl	801cc54 <TFT_DisplayString>
 800def6:	b2a4      	uxth	r4, r4
		for(uint8_t i = 0; i<=14; i++)
 800def8:	f240 13a1 	movw	r3, #417	; 0x1a1
 800defc:	429c      	cmp	r4, r3
 800defe:	d1d8      	bne.n	800deb2 <CRI_chart+0xa5a>
		TFT_direction = 0x00;
 800df00:	2300      	movs	r3, #0
 800df02:	703b      	strb	r3, [r7, #0]
}
 800df04:	e525      	b.n	800d952 <CRI_chart+0x4fa>
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800df06:	21fe      	movs	r1, #254	; 0xfe
 800df08:	e5b4      	b.n	800da74 <CRI_chart+0x61c>
 800df0a:	219a      	movs	r1, #154	; 0x9a
 800df0c:	e5b2      	b.n	800da74 <CRI_chart+0x61c>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800df0e:	21fe      	movs	r1, #254	; 0xfe
 800df10:	e5d4      	b.n	800dabc <CRI_chart+0x664>
 800df12:	219a      	movs	r1, #154	; 0x9a
 800df14:	e5d2      	b.n	800dabc <CRI_chart+0x664>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800df16:	21fe      	movs	r1, #254	; 0xfe
 800df18:	e5f4      	b.n	800db04 <CRI_chart+0x6ac>
 800df1a:	219a      	movs	r1, #154	; 0x9a
 800df1c:	e5f2      	b.n	800db04 <CRI_chart+0x6ac>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800df1e:	21fe      	movs	r1, #254	; 0xfe
 800df20:	e614      	b.n	800db4c <CRI_chart+0x6f4>
 800df22:	219a      	movs	r1, #154	; 0x9a
 800df24:	e612      	b.n	800db4c <CRI_chart+0x6f4>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800df26:	21fe      	movs	r1, #254	; 0xfe
 800df28:	e634      	b.n	800db94 <CRI_chart+0x73c>
 800df2a:	219a      	movs	r1, #154	; 0x9a
 800df2c:	e632      	b.n	800db94 <CRI_chart+0x73c>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800df2e:	21fe      	movs	r1, #254	; 0xfe
 800df30:	e654      	b.n	800dbdc <CRI_chart+0x784>
 800df32:	219a      	movs	r1, #154	; 0x9a
 800df34:	e652      	b.n	800dbdc <CRI_chart+0x784>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800df36:	21fe      	movs	r1, #254	; 0xfe
 800df38:	e674      	b.n	800dc24 <CRI_chart+0x7cc>
 800df3a:	219a      	movs	r1, #154	; 0x9a
 800df3c:	e672      	b.n	800dc24 <CRI_chart+0x7cc>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800df3e:	21fe      	movs	r1, #254	; 0xfe
 800df40:	e694      	b.n	800dc6c <CRI_chart+0x814>
 800df42:	219a      	movs	r1, #154	; 0x9a
 800df44:	e692      	b.n	800dc6c <CRI_chart+0x814>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800df46:	21fe      	movs	r1, #254	; 0xfe
 800df48:	e6b4      	b.n	800dcb4 <CRI_chart+0x85c>
 800df4a:	219a      	movs	r1, #154	; 0x9a
 800df4c:	e6b2      	b.n	800dcb4 <CRI_chart+0x85c>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800df4e:	21fe      	movs	r1, #254	; 0xfe
 800df50:	e6d6      	b.n	800dd00 <CRI_chart+0x8a8>
 800df52:	219a      	movs	r1, #154	; 0x9a
 800df54:	e6d4      	b.n	800dd00 <CRI_chart+0x8a8>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800df56:	21fe      	movs	r1, #254	; 0xfe
 800df58:	e6f8      	b.n	800dd4c <CRI_chart+0x8f4>
 800df5a:	219a      	movs	r1, #154	; 0x9a
 800df5c:	e6f6      	b.n	800dd4c <CRI_chart+0x8f4>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800df5e:	21fe      	movs	r1, #254	; 0xfe
 800df60:	e71a      	b.n	800dd98 <CRI_chart+0x940>
 800df62:	219a      	movs	r1, #154	; 0x9a
 800df64:	e718      	b.n	800dd98 <CRI_chart+0x940>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800df66:	21fe      	movs	r1, #254	; 0xfe
 800df68:	e746      	b.n	800ddf8 <CRI_chart+0x9a0>
 800df6a:	219a      	movs	r1, #154	; 0x9a
 800df6c:	e744      	b.n	800ddf8 <CRI_chart+0x9a0>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800df6e:	21fe      	movs	r1, #254	; 0xfe
 800df70:	e768      	b.n	800de44 <CRI_chart+0x9ec>
 800df72:	219a      	movs	r1, #154	; 0x9a
 800df74:	e766      	b.n	800de44 <CRI_chart+0x9ec>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800df76:	21fe      	movs	r1, #254	; 0xfe
 800df78:	e78a      	b.n	800de90 <CRI_chart+0xa38>
 800df7a:	219a      	movs	r1, #154	; 0x9a
 800df7c:	e788      	b.n	800de90 <CRI_chart+0xa38>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800df7e:	21f4      	movs	r1, #244	; 0xf4
 800df80:	e7b3      	b.n	800deea <CRI_chart+0xa92>
 800df82:	2190      	movs	r1, #144	; 0x90
 800df84:	e7b1      	b.n	800deea <CRI_chart+0xa92>
 800df86:	bf00      	nop
 800df88:	42c80000 	.word	0x42c80000
 800df8c:	43570000 	.word	0x43570000
 800df90:	43740000 	.word	0x43740000
 800df94:	08024f89 	.word	0x08024f89

0800df98 <CRI_Draw>:

void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800df98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800df9c:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800df9e:	2363      	movs	r3, #99	; 0x63
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800dfa0:	4604      	mov	r4, r0
 800dfa2:	4688      	mov	r8, r1
 800dfa4:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800dfa6:	213a      	movs	r1, #58	; 0x3a
 800dfa8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	2005      	movs	r0, #5
 800dfb0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800dfb4:	f99d 7020 	ldrsb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800dfb8:	f00e fb01 	bl	801c5be <TFT_FillRectangle>
	CRI_Axes(direction);
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	f7fe fe75 	bl	800ccac <CRI_Axes>
	CRI_Axes_Text(direction);
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f7fe ffee 	bl	800cfa4 <CRI_Axes_Text>
	CRI_chart(direction, GraphData);
 800dfc8:	4641      	mov	r1, r8
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f7ff fa44 	bl	800d458 <CRI_chart>
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800dfd0:	463b      	mov	r3, r7
 800dfd2:	4632      	mov	r2, r6
 800dfd4:	4629      	mov	r1, r5
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	b002      	add	sp, #8
 800dfda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800dfde:	f7fe bf03 	b.w	800cde8 <CRI_Axes_Measure>
	...

0800dfe4 <Calculate_EL_Day>:
extern float colorimetry_xy1964[2], colorimetry_uv[2], colorimetry_uv1976[2], colorimetry_xy1931[2];
extern float calibratre_x_1931[1024], Spectral_day[1024], calibratre_z_1931[1024];
	
float Calculate_EL_Day(float R_data[], float Spectral_Day_const[])
{
	sum = 0;
 800dfe4:	4a0c      	ldr	r2, [pc, #48]	; (800e018 <Calculate_EL_Day+0x34>)
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	6013      	str	r3, [r2, #0]
 800dfea:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800dfec:	ecb0 7a01 	vldmia	r0!, {s14}
 800dff0:	ecf1 7a01 	vldmia	r1!, {s15}
 800dff4:	ed92 0a00 	vldr	s0, [r2]
 800dff8:	eea7 0a27 	vfma.f32	s0, s14, s15
	for ( iq = 0; iq < 1024; iq++)
 800dffc:	3301      	adds	r3, #1
 800dffe:	b29b      	uxth	r3, r3
 800e000:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800e004:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800e008:	d1f0      	bne.n	800dfec <Calculate_EL_Day+0x8>
 800e00a:	4a04      	ldr	r2, [pc, #16]	; (800e01c <Calculate_EL_Day+0x38>)
	}
	return 683*sum;
}
 800e00c:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e020 <Calculate_EL_Day+0x3c>
 800e010:	8013      	strh	r3, [r2, #0]
 800e012:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e016:	4770      	bx	lr
 800e018:	20090a9c 	.word	0x20090a9c
 800e01c:	20090a94 	.word	0x20090a94
 800e020:	442ac000 	.word	0x442ac000

0800e024 <Calculate_EL_Day_Wt>:


float Calculate_EL_Day_Wt(float R_data[])
{
	sum = 0;
 800e024:	4a09      	ldr	r2, [pc, #36]	; (800e04c <Calculate_EL_Day_Wt+0x28>)
 800e026:	2300      	movs	r3, #0
 800e028:	6013      	str	r3, [r2, #0]
 800e02a:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]);
 800e02c:	ecf0 7a01 	vldmia	r0!, {s15}
 800e030:	ed92 0a00 	vldr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800e034:	3301      	adds	r3, #1
		sum = sum + (R_data[iq]);
 800e036:	ee30 0a27 	vadd.f32	s0, s0, s15
	for ( iq = 0; iq < 1024; iq++)
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]);
 800e040:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800e044:	d1f2      	bne.n	800e02c <Calculate_EL_Day_Wt+0x8>
 800e046:	4a02      	ldr	r2, [pc, #8]	; (800e050 <Calculate_EL_Day_Wt+0x2c>)
 800e048:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800e04a:	4770      	bx	lr
 800e04c:	20090a9c 	.word	0x20090a9c
 800e050:	20090a94 	.word	0x20090a94

0800e054 <Calculate_EL_Night>:

float Calculate_EL_Night(float R_data[], float Spectral_Night_const[])
{
	sum = 0;
 800e054:	4a0c      	ldr	r2, [pc, #48]	; (800e088 <Calculate_EL_Night+0x34>)
 800e056:	2300      	movs	r3, #0
 800e058:	6013      	str	r3, [r2, #0]
 800e05a:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800e05c:	ecb0 7a01 	vldmia	r0!, {s14}
 800e060:	ecf1 7a01 	vldmia	r1!, {s15}
 800e064:	ed92 0a00 	vldr	s0, [r2]
 800e068:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800e06c:	3301      	adds	r3, #1
 800e06e:	b29b      	uxth	r3, r3
 800e070:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800e074:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800e078:	d1f0      	bne.n	800e05c <Calculate_EL_Night+0x8>
 800e07a:	4a04      	ldr	r2, [pc, #16]	; (800e08c <Calculate_EL_Night+0x38>)
	}
	return 1700*sum;
}
 800e07c:	eddf 7a04 	vldr	s15, [pc, #16]	; 800e090 <Calculate_EL_Night+0x3c>
 800e080:	8013      	strh	r3, [r2, #0]
 800e082:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e086:	4770      	bx	lr
 800e088:	20090a9c 	.word	0x20090a9c
 800e08c:	20090a94 	.word	0x20090a94
 800e090:	44d48000 	.word	0x44d48000

0800e094 <Calculate_SP>:

float Calculate_SP(float EL_day_data, float EL_Night_data)
{
	return (EL_day_data !=0) ? EL_Night_data/EL_day_data: 0;
 800e094:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e09c:	bf14      	ite	ne
 800e09e:	eec0 7a80 	vdivne.f32	s15, s1, s0
 800e0a2:	eddf 7a02 	vldreq	s15, [pc, #8]	; 800e0ac <Calculate_SP+0x18>
}
 800e0a6:	eeb0 0a67 	vmov.f32	s0, s15
 800e0aa:	4770      	bx	lr
 800e0ac:	00000000 	.word	0x00000000

0800e0b0 <Calculate_PPFD_PPL>:

float Calculate_PPFD_PPL(float R_data[], float Wavelenght[])
{
 800e0b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t it = 0, beg = 0, end = 1024;

	while(Wavelenght[it]<400)
 800e0b4:	eddf 7a30 	vldr	s15, [pc, #192]	; 800e178 <Calculate_PPFD_PPL+0xc8>
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	b29c      	uxth	r4, r3
 800e0bc:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 800e0c0:	ed92 7a00 	vldr	s14, [r2]
 800e0c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0cc:	f103 0301 	add.w	r3, r3, #1
 800e0d0:	d4f3      	bmi.n	800e0ba <Calculate_PPFD_PPL+0xa>
	{
		it++;
	}
	beg = it+1;
 800e0d2:	3401      	adds	r4, #1

	it = 1024;
	while(Wavelenght[it]>700)
 800e0d4:	eddf 7a29 	vldr	s15, [pc, #164]	; 800e17c <Calculate_PPFD_PPL+0xcc>
	beg = it+1;
 800e0d8:	b2a4      	uxth	r4, r4
	it = 1024;
 800e0da:	f44f 6380 	mov.w	r3, #1024	; 0x400
	while(Wavelenght[it]>700)
 800e0de:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 800e0e2:	ed92 7a00 	vldr	s14, [r2]
 800e0e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e0ea:	3b01      	subs	r3, #1
 800e0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	{
		it--;
 800e0f0:	b29b      	uxth	r3, r3
	while(Wavelenght[it]>700)
 800e0f2:	dcf4      	bgt.n	800e0de <Calculate_PPFD_PPL+0x2e>
	}
	end = it-1;


	sum = 0;
	for (iq = beg; iq < end; iq++)
 800e0f4:	4a22      	ldr	r2, [pc, #136]	; (800e180 <Calculate_PPFD_PPL+0xd0>)
	sum = 0;
 800e0f6:	4d23      	ldr	r5, [pc, #140]	; (800e184 <Calculate_PPFD_PPL+0xd4>)
	end = it-1;
 800e0f8:	9300      	str	r3, [sp, #0]
	{
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e0fa:	a71d      	add	r7, pc, #116	; (adr r7, 800e170 <Calculate_PPFD_PPL+0xc0>)
 800e0fc:	e9d7 6700 	ldrd	r6, r7, [r7]
	sum = 0;
 800e100:	2300      	movs	r3, #0
 800e102:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800e106:	602b      	str	r3, [r5, #0]
 800e108:	eb00 0b0a 	add.w	fp, r0, sl
	for (iq = beg; iq < end; iq++)
 800e10c:	8014      	strh	r4, [r2, #0]
 800e10e:	448a      	add	sl, r1
 800e110:	2300      	movs	r3, #0
 800e112:	9201      	str	r2, [sp, #4]
 800e114:	9a00      	ldr	r2, [sp, #0]
 800e116:	42a2      	cmp	r2, r4
 800e118:	d807      	bhi.n	800e12a <Calculate_PPFD_PPL+0x7a>
 800e11a:	b10b      	cbz	r3, 800e120 <Calculate_PPFD_PPL+0x70>
 800e11c:	9b01      	ldr	r3, [sp, #4]
 800e11e:	801c      	strh	r4, [r3, #0]
	}
	return sum;
}
 800e120:	ed95 0a00 	vldr	s0, [r5]
 800e124:	b003      	add	sp, #12
 800e126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e12a:	ecbb 7a01 	vldmia	fp!, {s14}
 800e12e:	ecfa 7a01 	vldmia	sl!, {s15}
 800e132:	ee67 7a27 	vmul.f32	s15, s14, s15
	for (iq = beg; iq < end; iq++)
 800e136:	3401      	adds	r4, #1
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e138:	ee17 0a90 	vmov	r0, s15
 800e13c:	f7f2 fa1c 	bl	8000578 <__aeabi_f2d>
 800e140:	4632      	mov	r2, r6
 800e142:	463b      	mov	r3, r7
 800e144:	f7f2 fa6c 	bl	8000620 <__aeabi_dmul>
 800e148:	4680      	mov	r8, r0
 800e14a:	6828      	ldr	r0, [r5, #0]
 800e14c:	4689      	mov	r9, r1
 800e14e:	f7f2 fa13 	bl	8000578 <__aeabi_f2d>
 800e152:	460b      	mov	r3, r1
 800e154:	4602      	mov	r2, r0
 800e156:	4649      	mov	r1, r9
 800e158:	4640      	mov	r0, r8
 800e15a:	f7f2 f8af 	bl	80002bc <__adddf3>
 800e15e:	f7f2 fd57 	bl	8000c10 <__aeabi_d2f>
	for (iq = beg; iq < end; iq++)
 800e162:	b2a4      	uxth	r4, r4
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e164:	6028      	str	r0, [r5, #0]
 800e166:	2301      	movs	r3, #1
 800e168:	e7d4      	b.n	800e114 <Calculate_PPFD_PPL+0x64>
 800e16a:	bf00      	nop
 800e16c:	f3af 8000 	nop.w
 800e170:	73f2981b 	.word	0x73f2981b
 800e174:	3f811eb6 	.word	0x3f811eb6
 800e178:	43c80000 	.word	0x43c80000
 800e17c:	442f0000 	.word	0x442f0000
 800e180:	20090a94 	.word	0x20090a94
 800e184:	20090a9c 	.word	0x20090a9c

0800e188 <Calculate_PPFD_PPL_Range>:

float Calculate_PPFD_PPL_Range(float R_data[], float Wavelenght[], uint8_t Range)
{
 800e188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t Range_min, Range_max;
	sum = 0;
 800e18c:	4d34      	ldr	r5, [pc, #208]	; (800e260 <Calculate_PPFD_PPL_Range+0xd8>)
 800e18e:	2300      	movs	r3, #0
 800e190:	602b      	str	r3, [r5, #0]
	
	if (Range == BLUE_RANGE)
 800e192:	b1f2      	cbz	r2, 800e1d2 <Calculate_PPFD_PPL_Range+0x4a>
	{
		Range_min = 400;
		Range_max = 500;
	} else if (Range == GREEN_RANGE)
 800e194:	2a01      	cmp	r2, #1
 800e196:	d021      	beq.n	800e1dc <Calculate_PPFD_PPL_Range+0x54>
	{
		Range_min = 500;
		Range_max = 600;
	} else if (Range == RED_RANGE)
 800e198:	2a02      	cmp	r2, #2
 800e19a:	d024      	beq.n	800e1e6 <Calculate_PPFD_PPL_Range+0x5e>
		Range_min = 600;
		Range_max = 700;
	}else if (Range == FAR_RED_RANGE)
	{
		Range_min = 700;
		Range_max = 1000;
 800e19c:	2a03      	cmp	r2, #3
 800e19e:	bf0b      	itete	eq
 800e1a0:	f44f 7a7a 	moveq.w	sl, #1000	; 0x3e8
 800e1a4:	f04f 0a00 	movne.w	sl, #0
 800e1a8:	f44f 772f 	moveq.w	r7, #700	; 0x2bc
 800e1ac:	2700      	movne	r7, #0
	}
	
	for(iq = 0; iq < 1024; iq++)
 800e1ae:	4a2d      	ldr	r2, [pc, #180]	; (800e264 <Calculate_PPFD_PPL_Range+0xdc>)
 800e1b0:	9201      	str	r2, [sp, #4]
 800e1b2:	2400      	movs	r4, #0
 800e1b4:	8014      	strh	r4, [r2, #0]
 800e1b6:	4606      	mov	r6, r0
 800e1b8:	468b      	mov	fp, r1
 800e1ba:	4623      	mov	r3, r4
 800e1bc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800e1c0:	d116      	bne.n	800e1f0 <Calculate_PPFD_PPL_Range+0x68>
 800e1c2:	b10b      	cbz	r3, 800e1c8 <Calculate_PPFD_PPL_Range+0x40>
 800e1c4:	9b01      	ldr	r3, [sp, #4]
 800e1c6:	801c      	strh	r4, [r3, #0]
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
			}
		}
	}
	return sum;
}
 800e1c8:	ed95 0a00 	vldr	s0, [r5]
 800e1cc:	b003      	add	sp, #12
 800e1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Range_max = 500;
 800e1d2:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
		Range_min = 400;
 800e1d6:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800e1da:	e7e8      	b.n	800e1ae <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 600;
 800e1dc:	f44f 7a16 	mov.w	sl, #600	; 0x258
		Range_min = 500;
 800e1e0:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800e1e4:	e7e3      	b.n	800e1ae <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 700;
 800e1e6:	f44f 7a2f 	mov.w	sl, #700	; 0x2bc
		Range_min = 600;
 800e1ea:	f44f 7716 	mov.w	r7, #600	; 0x258
 800e1ee:	e7de      	b.n	800e1ae <Calculate_PPFD_PPL_Range+0x26>
		if(Wavelenght[iq] > Range_min && Wavelenght[iq] < Range_max)
 800e1f0:	ee07 7a10 	vmov	s14, r7
 800e1f4:	ecfb 7a01 	vldmia	fp!, {s15}
 800e1f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e1fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e204:	dd23      	ble.n	800e24e <Calculate_PPFD_PPL_Range+0xc6>
 800e206:	ee07 aa10 	vmov	s14, sl
 800e20a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e20e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e216:	d51a      	bpl.n	800e24e <Calculate_PPFD_PPL_Range+0xc6>
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800e218:	ed96 7a00 	vldr	s14, [r6]
 800e21c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e220:	ee17 0a90 	vmov	r0, s15
 800e224:	f7f2 f9a8 	bl	8000578 <__aeabi_f2d>
 800e228:	a30b      	add	r3, pc, #44	; (adr r3, 800e258 <Calculate_PPFD_PPL_Range+0xd0>)
 800e22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22e:	f7f2 f9f7 	bl	8000620 <__aeabi_dmul>
 800e232:	4680      	mov	r8, r0
 800e234:	6828      	ldr	r0, [r5, #0]
 800e236:	4689      	mov	r9, r1
 800e238:	f7f2 f99e 	bl	8000578 <__aeabi_f2d>
 800e23c:	4602      	mov	r2, r0
 800e23e:	460b      	mov	r3, r1
 800e240:	4640      	mov	r0, r8
 800e242:	4649      	mov	r1, r9
 800e244:	f7f2 f83a 	bl	80002bc <__adddf3>
 800e248:	f7f2 fce2 	bl	8000c10 <__aeabi_d2f>
 800e24c:	6028      	str	r0, [r5, #0]
 800e24e:	3401      	adds	r4, #1
 800e250:	b2a4      	uxth	r4, r4
 800e252:	3604      	adds	r6, #4
 800e254:	2301      	movs	r3, #1
 800e256:	e7b1      	b.n	800e1bc <Calculate_PPFD_PPL_Range+0x34>
 800e258:	73f2981b 	.word	0x73f2981b
 800e25c:	3f811eb6 	.word	0x3f811eb6
 800e260:	20090a9c 	.word	0x20090a9c
 800e264:	20090a94 	.word	0x20090a94

0800e268 <Calculate_ELb>:
	return sum;
}

float Calculate_ELb(float R_data[], float Hazard_Blue[])
{
		sum = 0;
 800e268:	4a0a      	ldr	r2, [pc, #40]	; (800e294 <Calculate_ELb+0x2c>)
 800e26a:	2300      	movs	r3, #0
 800e26c:	6013      	str	r3, [r2, #0]
 800e26e:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e270:	ecb0 7a01 	vldmia	r0!, {s14}
 800e274:	ecf1 7a01 	vldmia	r1!, {s15}
 800e278:	ed92 0a00 	vldr	s0, [r2]
 800e27c:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800e280:	3301      	adds	r3, #1
 800e282:	b29b      	uxth	r3, r3
 800e284:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e288:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800e28c:	d1f0      	bne.n	800e270 <Calculate_ELb+0x8>
 800e28e:	4a02      	ldr	r2, [pc, #8]	; (800e298 <Calculate_ELb+0x30>)
 800e290:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800e292:	4770      	bx	lr
 800e294:	20090a9c 	.word	0x20090a9c
 800e298:	20090a94 	.word	0x20090a94

0800e29c <Calculate_ELr>:
 800e29c:	f7ff bfe4 	b.w	800e268 <Calculate_ELb>

0800e2a0 <Calculate_XYZ1964>:




void Calculate_XYZ1964(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e2a0:	b5d0      	push	{r4, r6, r7, lr}
 800e2a2:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e2a6:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e32c <Calculate_XYZ1964+0x8c>
{
 800e2aa:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e2ac:	eef0 7a48 	vmov.f32	s15, s16
 800e2b0:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1964[0] = 0;
	colorimetry_XYZ1964[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e2b4:	ecb0 7a01 	vldmia	r0!, {s14}
 800e2b8:	ecf1 6a01 	vldmia	r1!, {s13}
 800e2bc:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e2c0:	3401      	adds	r4, #1
 800e2c2:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e2c4:	ecf2 6a01 	vldmia	r2!, {s13}
 800e2c8:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e2cc:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e2d0:	ecf3 6a01 	vldmia	r3!, {s13}
 800e2d4:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e2d8:	d1ec      	bne.n	800e2b4 <Calculate_XYZ1964+0x14>
	}
	
	k = 100/Y_sum;
 800e2da:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e330 <Calculate_XYZ1964+0x90>
 800e2de:	4b15      	ldr	r3, [pc, #84]	; (800e334 <Calculate_XYZ1964+0x94>)
 800e2e0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e2e4:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1964[0] = k*X_sum;
 800e2e6:	4c14      	ldr	r4, [pc, #80]	; (800e338 <Calculate_XYZ1964+0x98>)
	k = 100/Y_sum;
 800e2e8:	ee16 0a90 	vmov	r0, s13
 800e2ec:	f7f2 f944 	bl	8000578 <__aeabi_f2d>
 800e2f0:	4606      	mov	r6, r0
 800e2f2:	460f      	mov	r7, r1
	colorimetry_XYZ1964[0] = k*X_sum;
 800e2f4:	ee18 0a90 	vmov	r0, s17
 800e2f8:	f7f2 f93e 	bl	8000578 <__aeabi_f2d>
 800e2fc:	4632      	mov	r2, r6
 800e2fe:	463b      	mov	r3, r7
 800e300:	f7f2 f98e 	bl	8000620 <__aeabi_dmul>
 800e304:	f7f2 fc64 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1964[1] = 100;
 800e308:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1964[0] = k*X_sum;
 800e30a:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1964[1] = 100;
 800e30c:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e30e:	ee18 0a10 	vmov	r0, s16
 800e312:	f7f2 f931 	bl	8000578 <__aeabi_f2d>
 800e316:	4632      	mov	r2, r6
 800e318:	463b      	mov	r3, r7
 800e31a:	f7f2 f981 	bl	8000620 <__aeabi_dmul>
 800e31e:	f7f2 fc57 	bl	8000bd0 <__aeabi_d2uiz>
}
 800e322:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e326:	80a0      	strh	r0, [r4, #4]
}
 800e328:	bdd0      	pop	{r4, r6, r7, pc}
 800e32a:	bf00      	nop
 800e32c:	00000000 	.word	0x00000000
 800e330:	42c80000 	.word	0x42c80000
 800e334:	20090a94 	.word	0x20090a94
 800e338:	2008f528 	.word	0x2008f528

0800e33c <Calculate_XYZ1931>:
void Calculate_XYZ1931(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e33c:	b5d0      	push	{r4, r6, r7, lr}
 800e33e:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e342:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e3c8 <Calculate_XYZ1931+0x8c>
{
 800e346:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e348:	eef0 7a48 	vmov.f32	s15, s16
 800e34c:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1931[0] = 0;
	colorimetry_XYZ1931[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e350:	ecb0 7a01 	vldmia	r0!, {s14}
 800e354:	ecf1 6a01 	vldmia	r1!, {s13}
 800e358:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e35c:	3401      	adds	r4, #1
 800e35e:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e360:	ecf2 6a01 	vldmia	r2!, {s13}
 800e364:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e368:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e36c:	ecf3 6a01 	vldmia	r3!, {s13}
 800e370:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e374:	d1ec      	bne.n	800e350 <Calculate_XYZ1931+0x14>
	}
	
	k = 100/Y_sum;
 800e376:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e3cc <Calculate_XYZ1931+0x90>
 800e37a:	4b15      	ldr	r3, [pc, #84]	; (800e3d0 <Calculate_XYZ1931+0x94>)
 800e37c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e380:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1931[0] = k*X_sum;
 800e382:	4c14      	ldr	r4, [pc, #80]	; (800e3d4 <Calculate_XYZ1931+0x98>)
	k = 100/Y_sum;
 800e384:	ee16 0a90 	vmov	r0, s13
 800e388:	f7f2 f8f6 	bl	8000578 <__aeabi_f2d>
 800e38c:	4606      	mov	r6, r0
 800e38e:	460f      	mov	r7, r1
	colorimetry_XYZ1931[0] = k*X_sum;
 800e390:	ee18 0a90 	vmov	r0, s17
 800e394:	f7f2 f8f0 	bl	8000578 <__aeabi_f2d>
 800e398:	4632      	mov	r2, r6
 800e39a:	463b      	mov	r3, r7
 800e39c:	f7f2 f940 	bl	8000620 <__aeabi_dmul>
 800e3a0:	f7f2 fc16 	bl	8000bd0 <__aeabi_d2uiz>
	colorimetry_XYZ1931[1] = 100;
 800e3a4:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1931[0] = k*X_sum;
 800e3a6:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1931[1] = 100;
 800e3a8:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e3aa:	ee18 0a10 	vmov	r0, s16
 800e3ae:	f7f2 f8e3 	bl	8000578 <__aeabi_f2d>
 800e3b2:	4632      	mov	r2, r6
 800e3b4:	463b      	mov	r3, r7
 800e3b6:	f7f2 f933 	bl	8000620 <__aeabi_dmul>
 800e3ba:	f7f2 fc09 	bl	8000bd0 <__aeabi_d2uiz>
}
 800e3be:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e3c2:	80a0      	strh	r0, [r4, #4]
}
 800e3c4:	bdd0      	pop	{r4, r6, r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	00000000 	.word	0x00000000
 800e3cc:	42c80000 	.word	0x42c80000
 800e3d0:	20090a94 	.word	0x20090a94
 800e3d4:	2008f522 	.word	0x2008f522

0800e3d8 <Calculate_xy1964>:
void Calculate_xy1964(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e3d8:	8801      	ldrh	r1, [r0, #0]
 800e3da:	8842      	ldrh	r2, [r0, #2]
 800e3dc:	8880      	ldrh	r0, [r0, #4]
 800e3de:	188b      	adds	r3, r1, r2
 800e3e0:	4403      	add	r3, r0
	
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e3e2:	b29b      	uxth	r3, r3
 800e3e4:	ee07 3a90 	vmov	s15, r3
 800e3e8:	ee07 1a10 	vmov	s14, r1
 800e3ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3f0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e3f4:	4b06      	ldr	r3, [pc, #24]	; (800e410 <Calculate_xy1964+0x38>)
 800e3f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e3fa:	ee07 2a10 	vmov	s14, r2
 800e3fe:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e402:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e406:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e40a:	edc3 6a01 	vstr	s13, [r3, #4]
 800e40e:	4770      	bx	lr
 800e410:	2008f548 	.word	0x2008f548

0800e414 <Calculate_xy1931>:
}

void Calculate_xy1931(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e414:	8801      	ldrh	r1, [r0, #0]
 800e416:	8842      	ldrh	r2, [r0, #2]
 800e418:	8880      	ldrh	r0, [r0, #4]
 800e41a:	188b      	adds	r3, r1, r2
 800e41c:	4403      	add	r3, r0
	
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e41e:	b29b      	uxth	r3, r3
 800e420:	ee07 3a90 	vmov	s15, r3
 800e424:	ee07 1a10 	vmov	s14, r1
 800e428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e42c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e430:	4b06      	ldr	r3, [pc, #24]	; (800e44c <Calculate_xy1931+0x38>)
 800e432:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e436:	ee07 2a10 	vmov	s14, r2
 800e43a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e43e:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e442:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e446:	edc3 6a01 	vstr	s13, [r3, #4]
 800e44a:	4770      	bx	lr
 800e44c:	2008f540 	.word	0x2008f540

0800e450 <Calculate_uv>:
}

void Calculate_uv(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e450:	ed90 7a01 	vldr	s14, [r0, #4]
 800e454:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e458:	4b0e      	ldr	r3, [pc, #56]	; (800e494 <Calculate_uv+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e45a:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e45e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e462:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e466:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e46a:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e46e:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e472:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e476:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e47a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e47e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e482:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e486:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e48a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e48e:	edc3 6a01 	vstr	s13, [r3, #4]
 800e492:	4770      	bx	lr
 800e494:	2008f530 	.word	0x2008f530

0800e498 <Calculate_uv1976>:
}

void Calculate_uv1976(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e498:	ed90 7a01 	vldr	s14, [r0, #4]
 800e49c:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e4a0:	4b0e      	ldr	r3, [pc, #56]	; (800e4dc <Calculate_uv1976+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e4a2:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e4aa:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e4ae:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e4b2:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e4b6:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e4ba:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e4be:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e4c2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e4c6:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800e4ca:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e4ce:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e4d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e4d6:	edc3 6a01 	vstr	s13, [r3, #4]
 800e4da:	4770      	bx	lr
 800e4dc:	2008f538 	.word	0x2008f538

0800e4e0 <Calculate_Tc>:
}

double up = 0, vp = 0, factor_uvp = 0, result_tc, u_dop = 0, v_dop = 0, deltaC = 0;
float Calculate_Tc(float R_data[], uint8_t CIE_Type)
{
 800e4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4e4:	ed2d 8b02 	vpush	{d8}
 800e4e8:	b08b      	sub	sp, #44	; 0x2c
	
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
	uint8_t	 i_min1 = 0, i_min2 = 0;
	
	if(CIE_Type == 0x00) //check CIE 1964
 800e4ea:	b921      	cbnz	r1, 800e4f6 <Calculate_Tc+0x16>
	{
		Calculate_XYZ1931(R_data, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 800e4ec:	4bb4      	ldr	r3, [pc, #720]	; (800e7c0 <Calculate_Tc+0x2e0>)
 800e4ee:	4ab5      	ldr	r2, [pc, #724]	; (800e7c4 <Calculate_Tc+0x2e4>)
 800e4f0:	49b5      	ldr	r1, [pc, #724]	; (800e7c8 <Calculate_Tc+0x2e8>)
 800e4f2:	f7ff ff23 	bl	800e33c <Calculate_XYZ1931>
	}
	
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e4f6:	4bb5      	ldr	r3, [pc, #724]	; (800e7cc <Calculate_Tc+0x2ec>)
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800e4f8:	eddf 8ab5 	vldr	s17, [pc, #724]	; 800e7d0 <Calculate_Tc+0x2f0>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e4fc:	885e      	ldrh	r6, [r3, #2]
 800e4fe:	881f      	ldrh	r7, [r3, #0]
 800e500:	889b      	ldrh	r3, [r3, #4]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
	
	
	for(uint8_t i = 0; i < 31; i++)
	{
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800e502:	f8df a30c 	ldr.w	sl, [pc, #780]	; 800e810 <Calculate_Tc+0x330>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e506:	ebc6 1006 	rsb	r0, r6, r6, lsl #4
 800e50a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e50e:	4438      	add	r0, r7
 800e510:	4418      	add	r0, r3
 800e512:	f7f2 f81f 	bl	8000554 <__aeabi_i2d>
 800e516:	4baf      	ldr	r3, [pc, #700]	; (800e7d4 <Calculate_Tc+0x2f4>)
 800e518:	4604      	mov	r4, r0
 800e51a:	460d      	mov	r5, r1
 800e51c:	e9c3 4500 	strd	r4, r5, [r3]
	up = (4.*colorimetry_XYZ1931[0])/factor_uvp;
 800e520:	4638      	mov	r0, r7
 800e522:	f7f2 f817 	bl	8000554 <__aeabi_i2d>
 800e526:	2200      	movs	r2, #0
 800e528:	4bab      	ldr	r3, [pc, #684]	; (800e7d8 <Calculate_Tc+0x2f8>)
 800e52a:	4fac      	ldr	r7, [pc, #688]	; (800e7dc <Calculate_Tc+0x2fc>)
 800e52c:	f7f2 f878 	bl	8000620 <__aeabi_dmul>
 800e530:	4622      	mov	r2, r4
 800e532:	462b      	mov	r3, r5
 800e534:	f7f2 f99e 	bl	8000874 <__aeabi_ddiv>
 800e538:	4ba9      	ldr	r3, [pc, #676]	; (800e7e0 <Calculate_Tc+0x300>)
 800e53a:	e9cd 0100 	strd	r0, r1, [sp]
 800e53e:	e9c3 0100 	strd	r0, r1, [r3]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
 800e542:	4630      	mov	r0, r6
 800e544:	f7f2 f806 	bl	8000554 <__aeabi_i2d>
 800e548:	2200      	movs	r2, #0
 800e54a:	4ba6      	ldr	r3, [pc, #664]	; (800e7e4 <Calculate_Tc+0x304>)
 800e54c:	f7f2 f868 	bl	8000620 <__aeabi_dmul>
 800e550:	462b      	mov	r3, r5
 800e552:	4622      	mov	r2, r4
 800e554:	f7f2 f98e 	bl	8000874 <__aeabi_ddiv>
 800e558:	4ba3      	ldr	r3, [pc, #652]	; (800e7e8 <Calculate_Tc+0x308>)
 800e55a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e55e:	2600      	movs	r6, #0
 800e560:	e9c3 0100 	strd	r0, r1, [r3]
 800e564:	4ba1      	ldr	r3, [pc, #644]	; (800e7ec <Calculate_Tc+0x30c>)
 800e566:	9304      	str	r3, [sp, #16]
	uint8_t	 i_min1 = 0, i_min2 = 0;
 800e568:	4635      	mov	r5, r6
 800e56a:	4634      	mov	r4, r6
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800e56c:	eeb0 8a68 	vmov.f32	s16, s17
 800e570:	46d3      	mov	fp, sl
 800e572:	b2f3      	uxtb	r3, r6
 800e574:	9307      	str	r3, [sp, #28]
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800e576:	9b04      	ldr	r3, [sp, #16]
 800e578:	ecf3 7a01 	vldmia	r3!, {s15}
 800e57c:	9304      	str	r3, [sp, #16]
 800e57e:	4b9c      	ldr	r3, [pc, #624]	; (800e7f0 <Calculate_Tc+0x310>)
 800e580:	edcd 7a05 	vstr	s15, [sp, #20]
 800e584:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800e588:	ecf7 7a01 	vldmia	r7!, {s15}
 800e58c:	edcd 7a06 	vstr	s15, [sp, #24]
 800e590:	ee07 0a90 	vmov	s15, r0
 800e594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e598:	ee17 0a90 	vmov	r0, s15
 800e59c:	f7f1 ffec 	bl	8000578 <__aeabi_f2d>
 800e5a0:	a381      	add	r3, pc, #516	; (adr r3, 800e7a8 <Calculate_Tc+0x2c8>)
 800e5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a6:	f7f2 f965 	bl	8000874 <__aeabi_ddiv>
 800e5aa:	4602      	mov	r2, r0
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5b2:	f7f1 fe81 	bl	80002b8 <__aeabi_dsub>
 800e5b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e5ba:	f83a 0016 	ldrh.w	r0, [sl, r6, lsl #1]
 800e5be:	ee07 0a90 	vmov	s15, r0
 800e5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5c6:	3601      	adds	r6, #1
 800e5c8:	ee17 0a90 	vmov	r0, s15
 800e5cc:	f7f1 ffd4 	bl	8000578 <__aeabi_f2d>
 800e5d0:	a375      	add	r3, pc, #468	; (adr r3, 800e7a8 <Calculate_Tc+0x2c8>)
 800e5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5d6:	f7f2 f94d 	bl	8000874 <__aeabi_ddiv>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	460b      	mov	r3, r1
 800e5de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e5e2:	f7f1 fe69 	bl	80002b8 <__aeabi_dsub>
 800e5e6:	4680      	mov	r8, r0
 800e5e8:	9805      	ldr	r0, [sp, #20]
 800e5ea:	4689      	mov	r9, r1
 800e5ec:	f7f1 ffc4 	bl	8000578 <__aeabi_f2d>
 800e5f0:	4602      	mov	r2, r0
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	4640      	mov	r0, r8
 800e5f6:	4649      	mov	r1, r9
 800e5f8:	f7f2 f812 	bl	8000620 <__aeabi_dmul>
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	460b      	mov	r3, r1
 800e600:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e604:	f7f1 fe58 	bl	80002b8 <__aeabi_dsub>
 800e608:	4680      	mov	r8, r0
 800e60a:	9806      	ldr	r0, [sp, #24]
 800e60c:	4689      	mov	r9, r1
 800e60e:	f7f1 ffb3 	bl	8000578 <__aeabi_f2d>
 800e612:	4602      	mov	r2, r0
 800e614:	460b      	mov	r3, r1
 800e616:	4640      	mov	r0, r8
 800e618:	4649      	mov	r1, r9
 800e61a:	f7f2 f92b 	bl	8000874 <__aeabi_ddiv>
 800e61e:	f7f2 faf7 	bl	8000c10 <__aeabi_d2f>
 800e622:	ee07 0a10 	vmov	s14, r0
		if (fabs(dmin1) > fabs(dline)) {
 800e626:	eef0 7ac8 	vabs.f32	s15, s16
 800e62a:	eef0 6ac7 	vabs.f32	s13, s14
 800e62e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e636:	bfc1      	itttt	gt
 800e638:	4625      	movgt	r5, r4
 800e63a:	eef0 8a48 	vmovgt.f32	s17, s16
 800e63e:	9c07      	ldrgt	r4, [sp, #28]
				dmin2 = dmin1; 
				dmin1 = dline;
 800e640:	eeb0 8a47 	vmovgt.f32	s16, s14
	for(uint8_t i = 0; i < 31; i++)
 800e644:	2e1f      	cmp	r6, #31
 800e646:	d194      	bne.n	800e572 <Calculate_Tc+0x92>
				i_min2 = i_min1;
				i_min1 = i;
			}
	}
	
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800e648:	f83b 0014 	ldrh.w	r0, [fp, r4, lsl #1]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800e64c:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 800e7f0 <Calculate_Tc+0x310>
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800e650:	f7f1 ff80 	bl	8000554 <__aeabi_i2d>
 800e654:	a354      	add	r3, pc, #336	; (adr r3, 800e7a8 <Calculate_Tc+0x2c8>)
 800e656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65a:	f7f2 f90b 	bl	8000874 <__aeabi_ddiv>
 800e65e:	4606      	mov	r6, r0
 800e660:	f83b 0015 	ldrh.w	r0, [fp, r5, lsl #1]
 800e664:	460f      	mov	r7, r1
 800e666:	f7f1 ff75 	bl	8000554 <__aeabi_i2d>
 800e66a:	a34f      	add	r3, pc, #316	; (adr r3, 800e7a8 <Calculate_Tc+0x2c8>)
 800e66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e670:	f7f2 f900 	bl	8000874 <__aeabi_ddiv>
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	4630      	mov	r0, r6
 800e67a:	4639      	mov	r1, r7
 800e67c:	f7f1 fe1e 	bl	80002bc <__adddf3>
 800e680:	2200      	movs	r2, #0
 800e682:	4b5c      	ldr	r3, [pc, #368]	; (800e7f4 <Calculate_Tc+0x314>)
 800e684:	f7f1 ffcc 	bl	8000620 <__aeabi_dmul>
 800e688:	4b5b      	ldr	r3, [pc, #364]	; (800e7f8 <Calculate_Tc+0x318>)
 800e68a:	4680      	mov	r8, r0
 800e68c:	4689      	mov	r9, r1
 800e68e:	e9c3 8900 	strd	r8, r9, [r3]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800e692:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
 800e696:	f7f1 ff5d 	bl	8000554 <__aeabi_i2d>
 800e69a:	a343      	add	r3, pc, #268	; (adr r3, 800e7a8 <Calculate_Tc+0x2c8>)
 800e69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6a0:	f7f2 f8e8 	bl	8000874 <__aeabi_ddiv>
 800e6a4:	4606      	mov	r6, r0
 800e6a6:	f83a 0015 	ldrh.w	r0, [sl, r5, lsl #1]
 800e6aa:	460f      	mov	r7, r1
 800e6ac:	f7f1 ff52 	bl	8000554 <__aeabi_i2d>
 800e6b0:	a33d      	add	r3, pc, #244	; (adr r3, 800e7a8 <Calculate_Tc+0x2c8>)
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b6:	f7f2 f8dd 	bl	8000874 <__aeabi_ddiv>
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	4630      	mov	r0, r6
 800e6c0:	4639      	mov	r1, r7
 800e6c2:	f7f1 fdfb 	bl	80002bc <__adddf3>
 800e6c6:	2200      	movs	r2, #0
 800e6c8:	4b4a      	ldr	r3, [pc, #296]	; (800e7f4 <Calculate_Tc+0x314>)
 800e6ca:	f7f1 ffa9 	bl	8000620 <__aeabi_dmul>
 800e6ce:	4b4b      	ldr	r3, [pc, #300]	; (800e7fc <Calculate_Tc+0x31c>)
 800e6d0:	4606      	mov	r6, r0
 800e6d2:	460f      	mov	r7, r1
 800e6d4:	e9c3 6700 	strd	r6, r7, [r3]
	
	deltaC = sqrt((pow((u_dop - up), 2)+ pow((v_dop - vp), 2)));
 800e6d8:	4640      	mov	r0, r8
 800e6da:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6de:	4649      	mov	r1, r9
 800e6e0:	f7f1 fdea 	bl	80002b8 <__aeabi_dsub>
 800e6e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e6e8:	4680      	mov	r8, r0
 800e6ea:	4689      	mov	r9, r1
 800e6ec:	4630      	mov	r0, r6
 800e6ee:	4639      	mov	r1, r7
 800e6f0:	f7f1 fde2 	bl	80002b8 <__aeabi_dsub>
 800e6f4:	4642      	mov	r2, r8
 800e6f6:	4606      	mov	r6, r0
 800e6f8:	460f      	mov	r7, r1
 800e6fa:	464b      	mov	r3, r9
 800e6fc:	4640      	mov	r0, r8
 800e6fe:	4649      	mov	r1, r9
 800e700:	f7f1 ff8e 	bl	8000620 <__aeabi_dmul>
 800e704:	4632      	mov	r2, r6
 800e706:	4680      	mov	r8, r0
 800e708:	4689      	mov	r9, r1
 800e70a:	463b      	mov	r3, r7
 800e70c:	4630      	mov	r0, r6
 800e70e:	4639      	mov	r1, r7
 800e710:	f7f1 ff86 	bl	8000620 <__aeabi_dmul>
 800e714:	4602      	mov	r2, r0
 800e716:	460b      	mov	r3, r1
 800e718:	4640      	mov	r0, r8
 800e71a:	4649      	mov	r1, r9
 800e71c:	f7f1 fdce 	bl	80002bc <__adddf3>
 800e720:	ec41 0b10 	vmov	d0, r0, r1
 800e724:	f015 f868 	bl	80237f8 <sqrt>
 800e728:	4b35      	ldr	r3, [pc, #212]	; (800e800 <Calculate_Tc+0x320>)
 800e72a:	ec51 0b10 	vmov	r0, r1, d0
 800e72e:	ed83 0b00 	vstr	d0, [r3]
	
	if(deltaC > 0.05)
 800e732:	a31f      	add	r3, pc, #124	; (adr r3, 800e7b0 <Calculate_Tc+0x2d0>)
 800e734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e738:	f7f2 fa02 	bl	8000b40 <__aeabi_dcmpgt>
 800e73c:	bb78      	cbnz	r0, 800e79e <Calculate_Tc+0x2be>
	{
		return 0xFFFF;
	}else
	{
		return result_tc = fabs(1000000./(Tc_tabl[i_min1]+dmin1*((Tc_tabl[i_min2]-Tc_tabl[i_min1])/(dmin1-dmin2))));
 800e73e:	4b31      	ldr	r3, [pc, #196]	; (800e804 <Calculate_Tc+0x324>)
 800e740:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800e744:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800e748:	ee07 2a90 	vmov	s15, r2
 800e74c:	1a9b      	subs	r3, r3, r2
 800e74e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e752:	ee07 3a90 	vmov	s15, r3
 800e756:	ee78 8a68 	vsub.f32	s17, s16, s17
 800e75a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e75e:	eec7 6aa8 	vdiv.f32	s13, s15, s17
 800e762:	eea8 7a26 	vfma.f32	s14, s16, s13
 800e766:	ee17 0a10 	vmov	r0, s14
 800e76a:	f7f1 ff05 	bl	8000578 <__aeabi_f2d>
 800e76e:	4602      	mov	r2, r0
 800e770:	460b      	mov	r3, r1
 800e772:	a111      	add	r1, pc, #68	; (adr r1, 800e7b8 <Calculate_Tc+0x2d8>)
 800e774:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e778:	f7f2 f87c 	bl	8000874 <__aeabi_ddiv>
 800e77c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e780:	4921      	ldr	r1, [pc, #132]	; (800e808 <Calculate_Tc+0x328>)
 800e782:	4602      	mov	r2, r0
 800e784:	e9c1 2300 	strd	r2, r3, [r1]
 800e788:	4610      	mov	r0, r2
 800e78a:	4619      	mov	r1, r3
 800e78c:	f7f2 fa40 	bl	8000c10 <__aeabi_d2f>
	}
}
 800e790:	ee00 0a10 	vmov	s0, r0
 800e794:	b00b      	add	sp, #44	; 0x2c
 800e796:	ecbd 8b02 	vpop	{d8}
 800e79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0xFFFF;
 800e79e:	481b      	ldr	r0, [pc, #108]	; (800e80c <Calculate_Tc+0x32c>)
 800e7a0:	e7f6      	b.n	800e790 <Calculate_Tc+0x2b0>
 800e7a2:	bf00      	nop
 800e7a4:	f3af 8000 	nop.w
 800e7a8:	00000000 	.word	0x00000000
 800e7ac:	40f86a00 	.word	0x40f86a00
 800e7b0:	9999999a 	.word	0x9999999a
 800e7b4:	3fa99999 	.word	0x3fa99999
 800e7b8:	00000000 	.word	0x00000000
 800e7bc:	412e8480 	.word	0x412e8480
 800e7c0:	2008d514 	.word	0x2008d514
 800e7c4:	20052940 	.word	0x20052940
 800e7c8:	2008a514 	.word	0x2008a514
 800e7cc:	2008f522 	.word	0x2008f522
 800e7d0:	447a0000 	.word	0x447a0000
 800e7d4:	200056b0 	.word	0x200056b0
 800e7d8:	40100000 	.word	0x40100000
 800e7dc:	080250fc 	.word	0x080250fc
 800e7e0:	200056c0 	.word	0x200056c0
 800e7e4:	40180000 	.word	0x40180000
 800e7e8:	200056d0 	.word	0x200056d0
 800e7ec:	08025080 	.word	0x08025080
 800e7f0:	080251b6 	.word	0x080251b6
 800e7f4:	3fe00000 	.word	0x3fe00000
 800e7f8:	200056b8 	.word	0x200056b8
 800e7fc:	200056c8 	.word	0x200056c8
 800e800:	200056a8 	.word	0x200056a8
 800e804:	08024f8c 	.word	0x08024f8c
 800e808:	20090aa0 	.word	0x20090aa0
 800e80c:	477fff00 	.word	0x477fff00
 800e810:	08025178 	.word	0x08025178
 800e814:	00000000 	.word	0x00000000

0800e818 <Calculate_Lab>:

void Calculate_Lab(uint16_t colorimetry_XYZ_calculate[], uint8_t CIE_Type, uint8_t Source_Type)
{
 800e818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float Xref, Yref = 100, Zref;
	uint8_t i;
	double factor_x = 0, factor_y = 0, factor_z = 0, fx = 0, fy = 0, fz = 0;
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e81c:	2a01      	cmp	r2, #1
{
 800e81e:	ed2d 8b02 	vpush	{d8}
 800e822:	4606      	mov	r6, r0
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e824:	f000 80b9 	beq.w	800e99a <Calculate_Lab+0x182>
 800e828:	2a02      	cmp	r2, #2
 800e82a:	f000 80b8 	beq.w	800e99e <Calculate_Lab+0x186>
 800e82e:	2a04      	cmp	r2, #4
 800e830:	f000 80b7 	beq.w	800e9a2 <Calculate_Lab+0x18a>
 800e834:	2a08      	cmp	r2, #8
 800e836:	f000 80b6 	beq.w	800e9a6 <Calculate_Lab+0x18e>
 800e83a:	2a10      	cmp	r2, #16
 800e83c:	f000 80b5 	beq.w	800e9aa <Calculate_Lab+0x192>
 800e840:	2a20      	cmp	r2, #32
 800e842:	bf14      	ite	ne
 800e844:	2400      	movne	r4, #0
 800e846:	2405      	moveq	r4, #5
	
	if (CIE_Type == 0x01) //check CIE 1931
 800e848:	2901      	cmp	r1, #1
 800e84a:	f040 80b0 	bne.w	800e9ae <Calculate_Lab+0x196>
	{
		Xref = Xref_CIE1931[i]/100.0;
 800e84e:	4b82      	ldr	r3, [pc, #520]	; (800ea58 <Calculate_Lab+0x240>)
 800e850:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e854:	f7f1 fe7e 	bl	8000554 <__aeabi_i2d>
 800e858:	4b80      	ldr	r3, [pc, #512]	; (800ea5c <Calculate_Lab+0x244>)
 800e85a:	2200      	movs	r2, #0
 800e85c:	f7f2 f80a 	bl	8000874 <__aeabi_ddiv>
 800e860:	f7f2 f9d6 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1931[i]/100.0;
 800e864:	4b7e      	ldr	r3, [pc, #504]	; (800ea60 <Calculate_Lab+0x248>)
		Xref = Xref_CIE1931[i]/100.0;
 800e866:	ee08 0a90 	vmov	s17, r0
	
	} else if(CIE_Type == 0x00) ////check CIE 1964
	{
		Xref = Xref_CIE1964[i]/100.0;
		Zref = Zref_CIE1964[i]/100.0;
 800e86a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e86e:	f7f1 fe71 	bl	8000554 <__aeabi_i2d>
 800e872:	2200      	movs	r2, #0
 800e874:	4b79      	ldr	r3, [pc, #484]	; (800ea5c <Calculate_Lab+0x244>)
 800e876:	f7f1 fffd 	bl	8000874 <__aeabi_ddiv>
 800e87a:	f7f2 f9c9 	bl	8000c10 <__aeabi_d2f>
 800e87e:	ee08 0a10 	vmov	s16, r0
	}
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e882:	8833      	ldrh	r3, [r6, #0]
 800e884:	ee07 3a90 	vmov	s15, r3
 800e888:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e88c:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800e890:	ee17 0a10 	vmov	r0, s14
 800e894:	f7f1 fe70 	bl	8000578 <__aeabi_f2d>
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e898:	8873      	ldrh	r3, [r6, #2]
 800e89a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800ea64 <Calculate_Lab+0x24c>
 800e89e:	ee07 3a90 	vmov	s15, r3
 800e8a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e8a6:	4680      	mov	r8, r0
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e8a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e8ac:	4689      	mov	r9, r1
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e8ae:	ee16 0a90 	vmov	r0, s13
 800e8b2:	f7f1 fe61 	bl	8000578 <__aeabi_f2d>
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e8b6:	88b3      	ldrh	r3, [r6, #4]
 800e8b8:	ee07 3a90 	vmov	s15, r3
 800e8bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e8c0:	4604      	mov	r4, r0
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e8c2:	ee87 7a88 	vdiv.f32	s14, s15, s16
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e8c6:	460d      	mov	r5, r1
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e8c8:	ee17 0a10 	vmov	r0, s14
 800e8cc:	f7f1 fe54 	bl	8000578 <__aeabi_f2d>
	
		if(factor_x > 0.00885645)
 800e8d0:	a35b      	add	r3, pc, #364	; (adr r3, 800ea40 <Calculate_Lab+0x228>)
 800e8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e8d6:	4606      	mov	r6, r0
 800e8d8:	460f      	mov	r7, r1
		if(factor_x > 0.00885645)
 800e8da:	4640      	mov	r0, r8
 800e8dc:	4649      	mov	r1, r9
 800e8de:	f7f2 f92f 	bl	8000b40 <__aeabi_dcmpgt>
 800e8e2:	2800      	cmp	r0, #0
 800e8e4:	d075      	beq.n	800e9d2 <Calculate_Lab+0x1ba>
	{
		fx = pow(factor_x, 1./3.);
 800e8e6:	ec49 8b10 	vmov	d0, r8, r9
 800e8ea:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800ea48 <Calculate_Lab+0x230>
 800e8ee:	f014 fe0b 	bl	8023508 <pow>
 800e8f2:	ec59 8b10 	vmov	r8, r9, d0
	} else 
	{
		fx = (903.3*factor_x + 16.) / 116.;
	}
	
		if(factor_y > 0.00885645)
 800e8f6:	a352      	add	r3, pc, #328	; (adr r3, 800ea40 <Calculate_Lab+0x228>)
 800e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fc:	4620      	mov	r0, r4
 800e8fe:	4629      	mov	r1, r5
 800e900:	f7f2 f91e 	bl	8000b40 <__aeabi_dcmpgt>
 800e904:	2800      	cmp	r0, #0
 800e906:	d076      	beq.n	800e9f6 <Calculate_Lab+0x1de>
	{
		fy = pow(factor_y, 1./3.);
 800e908:	ec45 4b10 	vmov	d0, r4, r5
 800e90c:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 800ea48 <Calculate_Lab+0x230>
 800e910:	f014 fdfa 	bl	8023508 <pow>
 800e914:	ec55 4b10 	vmov	r4, r5, d0
	} else 
	{
		fy = (903.3*factor_y + 16.) / 116.;
	}
	
		if(factor_z > 0.00885645)
 800e918:	a349      	add	r3, pc, #292	; (adr r3, 800ea40 <Calculate_Lab+0x228>)
 800e91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e91e:	4630      	mov	r0, r6
 800e920:	4639      	mov	r1, r7
 800e922:	f7f2 f90d 	bl	8000b40 <__aeabi_dcmpgt>
 800e926:	2800      	cmp	r0, #0
 800e928:	d077      	beq.n	800ea1a <Calculate_Lab+0x202>
	{
		fz = pow(factor_z, 1./3.);
 800e92a:	ec47 6b10 	vmov	d0, r6, r7
 800e92e:	ed9f 1b46 	vldr	d1, [pc, #280]	; 800ea48 <Calculate_Lab+0x230>
 800e932:	f014 fde9 	bl	8023508 <pow>
 800e936:	ec57 6b10 	vmov	r6, r7, d0
	} else 
	{
		fz = (903.3*factor_z + 16.) / 116.;
	}
	
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800e93a:	2200      	movs	r2, #0
 800e93c:	4b4a      	ldr	r3, [pc, #296]	; (800ea68 <Calculate_Lab+0x250>)
 800e93e:	f8df a140 	ldr.w	sl, [pc, #320]	; 800ea80 <Calculate_Lab+0x268>
 800e942:	4620      	mov	r0, r4
 800e944:	4629      	mov	r1, r5
 800e946:	f7f1 fe6b 	bl	8000620 <__aeabi_dmul>
 800e94a:	2200      	movs	r2, #0
 800e94c:	4b47      	ldr	r3, [pc, #284]	; (800ea6c <Calculate_Lab+0x254>)
 800e94e:	f7f1 fcb3 	bl	80002b8 <__aeabi_dsub>
 800e952:	f7f2 f915 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e956:	4622      	mov	r2, r4
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800e958:	f8aa 0000 	strh.w	r0, [sl]
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e95c:	462b      	mov	r3, r5
 800e95e:	4640      	mov	r0, r8
 800e960:	4649      	mov	r1, r9
 800e962:	f7f1 fca9 	bl	80002b8 <__aeabi_dsub>
 800e966:	2200      	movs	r2, #0
 800e968:	4b41      	ldr	r3, [pc, #260]	; (800ea70 <Calculate_Lab+0x258>)
 800e96a:	f7f1 fe59 	bl	8000620 <__aeabi_dmul>
 800e96e:	f7f2 f907 	bl	8000b80 <__aeabi_d2iz>
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e972:	4632      	mov	r2, r6
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e974:	f8aa 0002 	strh.w	r0, [sl, #2]
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e978:	463b      	mov	r3, r7
 800e97a:	4620      	mov	r0, r4
 800e97c:	4629      	mov	r1, r5
 800e97e:	f7f1 fc9b 	bl	80002b8 <__aeabi_dsub>
 800e982:	2200      	movs	r2, #0
 800e984:	4b3b      	ldr	r3, [pc, #236]	; (800ea74 <Calculate_Lab+0x25c>)
 800e986:	f7f1 fe4b 	bl	8000620 <__aeabi_dmul>
 800e98a:	f7f2 f8f9 	bl	8000b80 <__aeabi_d2iz>
	
}
 800e98e:	ecbd 8b02 	vpop	{d8}
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e992:	f8aa 0004 	strh.w	r0, [sl, #4]
}
 800e996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e99a:	2400      	movs	r4, #0
 800e99c:	e754      	b.n	800e848 <Calculate_Lab+0x30>
 800e99e:	2401      	movs	r4, #1
 800e9a0:	e752      	b.n	800e848 <Calculate_Lab+0x30>
 800e9a2:	2402      	movs	r4, #2
 800e9a4:	e750      	b.n	800e848 <Calculate_Lab+0x30>
 800e9a6:	2403      	movs	r4, #3
 800e9a8:	e74e      	b.n	800e848 <Calculate_Lab+0x30>
 800e9aa:	2404      	movs	r4, #4
 800e9ac:	e74c      	b.n	800e848 <Calculate_Lab+0x30>
	} else if(CIE_Type == 0x00) ////check CIE 1964
 800e9ae:	2900      	cmp	r1, #0
 800e9b0:	f47f af67 	bne.w	800e882 <Calculate_Lab+0x6a>
		Xref = Xref_CIE1964[i]/100.0;
 800e9b4:	4b30      	ldr	r3, [pc, #192]	; (800ea78 <Calculate_Lab+0x260>)
 800e9b6:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e9ba:	f7f1 fdcb 	bl	8000554 <__aeabi_i2d>
 800e9be:	4b27      	ldr	r3, [pc, #156]	; (800ea5c <Calculate_Lab+0x244>)
 800e9c0:	2200      	movs	r2, #0
 800e9c2:	f7f1 ff57 	bl	8000874 <__aeabi_ddiv>
 800e9c6:	f7f2 f923 	bl	8000c10 <__aeabi_d2f>
		Zref = Zref_CIE1964[i]/100.0;
 800e9ca:	4b2c      	ldr	r3, [pc, #176]	; (800ea7c <Calculate_Lab+0x264>)
		Xref = Xref_CIE1964[i]/100.0;
 800e9cc:	ee08 0a90 	vmov	s17, r0
 800e9d0:	e74b      	b.n	800e86a <Calculate_Lab+0x52>
		fx = (903.3*factor_x + 16.) / 116.;
 800e9d2:	a31f      	add	r3, pc, #124	; (adr r3, 800ea50 <Calculate_Lab+0x238>)
 800e9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d8:	4640      	mov	r0, r8
 800e9da:	4649      	mov	r1, r9
 800e9dc:	f7f1 fe20 	bl	8000620 <__aeabi_dmul>
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	4b22      	ldr	r3, [pc, #136]	; (800ea6c <Calculate_Lab+0x254>)
 800e9e4:	f7f1 fc6a 	bl	80002bc <__adddf3>
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	4b1f      	ldr	r3, [pc, #124]	; (800ea68 <Calculate_Lab+0x250>)
 800e9ec:	f7f1 ff42 	bl	8000874 <__aeabi_ddiv>
 800e9f0:	4680      	mov	r8, r0
 800e9f2:	4689      	mov	r9, r1
 800e9f4:	e77f      	b.n	800e8f6 <Calculate_Lab+0xde>
		fy = (903.3*factor_y + 16.) / 116.;
 800e9f6:	a316      	add	r3, pc, #88	; (adr r3, 800ea50 <Calculate_Lab+0x238>)
 800e9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	4629      	mov	r1, r5
 800ea00:	f7f1 fe0e 	bl	8000620 <__aeabi_dmul>
 800ea04:	2200      	movs	r2, #0
 800ea06:	4b19      	ldr	r3, [pc, #100]	; (800ea6c <Calculate_Lab+0x254>)
 800ea08:	f7f1 fc58 	bl	80002bc <__adddf3>
 800ea0c:	2200      	movs	r2, #0
 800ea0e:	4b16      	ldr	r3, [pc, #88]	; (800ea68 <Calculate_Lab+0x250>)
 800ea10:	f7f1 ff30 	bl	8000874 <__aeabi_ddiv>
 800ea14:	4604      	mov	r4, r0
 800ea16:	460d      	mov	r5, r1
 800ea18:	e77e      	b.n	800e918 <Calculate_Lab+0x100>
		fz = (903.3*factor_z + 16.) / 116.;
 800ea1a:	a30d      	add	r3, pc, #52	; (adr r3, 800ea50 <Calculate_Lab+0x238>)
 800ea1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea20:	4630      	mov	r0, r6
 800ea22:	4639      	mov	r1, r7
 800ea24:	f7f1 fdfc 	bl	8000620 <__aeabi_dmul>
 800ea28:	2200      	movs	r2, #0
 800ea2a:	4b10      	ldr	r3, [pc, #64]	; (800ea6c <Calculate_Lab+0x254>)
 800ea2c:	f7f1 fc46 	bl	80002bc <__adddf3>
 800ea30:	2200      	movs	r2, #0
 800ea32:	4b0d      	ldr	r3, [pc, #52]	; (800ea68 <Calculate_Lab+0x250>)
 800ea34:	f7f1 ff1e 	bl	8000874 <__aeabi_ddiv>
 800ea38:	4606      	mov	r6, r0
 800ea3a:	460f      	mov	r7, r1
 800ea3c:	e77d      	b.n	800e93a <Calculate_Lab+0x122>
 800ea3e:	bf00      	nop
 800ea40:	98de88b7 	.word	0x98de88b7
 800ea44:	3f822354 	.word	0x3f822354
 800ea48:	55555555 	.word	0x55555555
 800ea4c:	3fd55555 	.word	0x3fd55555
 800ea50:	66666666 	.word	0x66666666
 800ea54:	408c3a66 	.word	0x408c3a66
 800ea58:	08024fca 	.word	0x08024fca
 800ea5c:	40590000 	.word	0x40590000
 800ea60:	08024fe2 	.word	0x08024fe2
 800ea64:	42c80000 	.word	0x42c80000
 800ea68:	405d0000 	.word	0x405d0000
 800ea6c:	40300000 	.word	0x40300000
 800ea70:	407f4000 	.word	0x407f4000
 800ea74:	40690000 	.word	0x40690000
 800ea78:	08024fd6 	.word	0x08024fd6
 800ea7c:	08024fee 	.word	0x08024fee
 800ea80:	2008f51c 	.word	0x2008f51c

0800ea84 <Calculate_Lambda_Dominant>:
void Calculate_Lambda_Dominant(float R_data[], uint8_t CIE_Type)
{	
	float Px, Py, x1 = 0.3333, y1 = 0.3333, x2, y2, divider;
	int8_t triangle_p1, triangle_p2, triangle_p3, triangle_out, ld;
	
	x2 = colorimetry_xy1931[0];
 800ea84:	4b75      	ldr	r3, [pc, #468]	; (800ec5c <Calculate_Lambda_Dominant+0x1d8>)
	y2 = colorimetry_xy1931[1];
	
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800ea86:	eddf 7a76 	vldr	s15, [pc, #472]	; 800ec60 <Calculate_Lambda_Dominant+0x1dc>
	y2 = colorimetry_xy1931[1];
 800ea8a:	ed93 6a01 	vldr	s12, [r3, #4]
	x2 = colorimetry_xy1931[0];
 800ea8e:	edd3 5a00 	vldr	s11, [r3]
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800ea92:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800ec64 <Calculate_Lambda_Dominant+0x1e0>
 800ea96:	eddf 6a74 	vldr	s13, [pc, #464]	; 800ec68 <Calculate_Lambda_Dominant+0x1e4>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800ea9a:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800ec6c <Calculate_Lambda_Dominant+0x1e8>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800ea9e:	ee77 1ac6 	vsub.f32	s3, s15, s12
 800eaa2:	ee37 2ae5 	vsub.f32	s4, s15, s11
 800eaa6:	ee27 7a61 	vnmul.f32	s14, s14, s3
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800eaaa:	ee35 5a65 	vsub.f32	s10, s10, s11
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800eaae:	eea2 7a26 	vfma.f32	s14, s4, s13
{	
 800eab2:	b5f0      	push	{r4, r5, r6, r7, lr}
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800eab4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ec70 <Calculate_Lambda_Dominant+0x1ec>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800eab8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800eabc:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800eac0:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800ec74 <Calculate_Lambda_Dominant+0x1f0>
 800eac4:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 800eac8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800ec78 <Calculate_Lambda_Dominant+0x1f4>
 800eacc:	eee5 6a07 	vfma.f32	s13, s10, s14
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800ead0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800ead4:	ed9f 5a69 	vldr	s10, [pc, #420]	; 800ec7c <Calculate_Lambda_Dominant+0x1f8>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800ead8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800eadc:	ee77 6a46 	vsub.f32	s13, s14, s12
 800eae0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ec80 <Calculate_Lambda_Dominant+0x1fc>
 800eae4:	ee35 5a65 	vsub.f32	s10, s10, s11
 800eae8:	ee27 7a66 	vnmul.f32	s14, s14, s13
 800eaec:	eddf 6a65 	vldr	s13, [pc, #404]	; 800ec84 <Calculate_Lambda_Dominant+0x200>
 800eaf0:	eea5 7a26 	vfma.f32	s14, s10, s13
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800eaf4:	bfcc      	ite	gt
 800eaf6:	2101      	movgt	r1, #1
 800eaf8:	f04f 31ff 	movle.w	r1, #4294967295
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800eafc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800eb00:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800eb04:	bfcc      	ite	gt
 800eb06:	2201      	movgt	r2, #1
 800eb08:	f04f 32ff 	movle.w	r2, #4294967295
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800eb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb10:	bfcc      	ite	gt
 800eb12:	2301      	movgt	r3, #1
 800eb14:	f04f 33ff 	movle.w	r3, #4294967295
		
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800eb18:	4291      	cmp	r1, r2
 800eb1a:	f040 8093 	bne.w	800ec44 <Calculate_Lambda_Dominant+0x1c0>
 800eb1e:	4299      	cmp	r1, r3
 800eb20:	bf14      	ite	ne
 800eb22:	2101      	movne	r1, #1
 800eb24:	f04f 31ff 	moveq.w	r1, #4294967295
	
	for(uint8_t i = 0; i < 65; i++)
	{
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eb28:	ee67 3ae5 	vnmul.f32	s7, s15, s11
 800eb2c:	4856      	ldr	r0, [pc, #344]	; (800ec88 <Calculate_Lambda_Dominant+0x204>)
 800eb2e:	4a57      	ldr	r2, [pc, #348]	; (800ec8c <Calculate_Lambda_Dominant+0x208>)
 800eb30:	8804      	ldrh	r4, [r0, #0]
 800eb32:	4e57      	ldr	r6, [pc, #348]	; (800ec90 <Calculate_Lambda_Dominant+0x20c>)
 800eb34:	4d57      	ldr	r5, [pc, #348]	; (800ec94 <Calculate_Lambda_Dominant+0x210>)
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
		
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
		{
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800eb36:	eddf 0a4a 	vldr	s1, [pc, #296]	; 800ec60 <Calculate_Lambda_Dominant+0x1dc>
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eb3a:	eee6 3a27 	vfma.f32	s7, s12, s15
 800eb3e:	f102 0782 	add.w	r7, r2, #130	; 0x82
 800eb42:	2300      	movs	r3, #0
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eb44:	eeb1 0a61 	vneg.f32	s0, s3
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800eb48:	ed95 6a00 	vldr	s12, [r5]
 800eb4c:	edd6 6a00 	vldr	s13, [r6]
 800eb50:	ed95 4a01 	vldr	s8, [r5, #4]
 800eb54:	ed96 5a01 	vldr	s10, [r6, #4]
 800eb58:	3504      	adds	r5, #4
 800eb5a:	3604      	adds	r6, #4
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eb5c:	ee64 2a66 	vnmul.f32	s5, s8, s13
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800eb60:	ee36 7a44 	vsub.f32	s14, s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eb64:	eee5 2a06 	vfma.f32	s5, s10, s12
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800eb68:	ee27 3a61 	vnmul.f32	s6, s14, s3
 800eb6c:	ee76 4ac5 	vsub.f32	s9, s13, s10
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eb70:	ee22 1ac2 	vnmul.f32	s2, s5, s4
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800eb74:	eea2 3a24 	vfma.f32	s6, s4, s9
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eb78:	eea7 1a23 	vfma.f32	s2, s14, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800eb7c:	eeb4 6ac4 	vcmpe.f32	s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800eb80:	ee81 7a03 	vdiv.f32	s14, s2, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800eb84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb88:	bf54      	ite	pl
 800eb8a:	eeb0 1a44 	vmovpl.f32	s2, s8
 800eb8e:	eeb0 1a46 	vmovmi.f32	s2, s12
 800eb92:	eeb4 1ac7 	vcmpe.f32	s2, s14
 800eb96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb9a:	d54d      	bpl.n	800ec38 <Calculate_Lambda_Dominant+0x1b4>
 800eb9c:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800eba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eba4:	bfd8      	it	le
 800eba6:	eeb0 6a44 	vmovle.f32	s12, s8
 800ebaa:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800ebae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb2:	dd41      	ble.n	800ec38 <Calculate_Lambda_Dominant+0x1b4>
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800ebb4:	ee64 4aa3 	vmul.f32	s9, s9, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800ebb8:	eef4 6ac5 	vcmpe.f32	s13, s10
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800ebbc:	eee0 4a22 	vfma.f32	s9, s0, s5
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800ebc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800ebc4:	ee84 6a83 	vdiv.f32	s12, s9, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800ebc8:	bf54      	ite	pl
 800ebca:	eeb0 4a45 	vmovpl.f32	s8, s10
 800ebce:	eeb0 4a66 	vmovmi.f32	s8, s13
 800ebd2:	eeb4 4ac6 	vcmpe.f32	s8, s12
 800ebd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebda:	d52d      	bpl.n	800ec38 <Calculate_Lambda_Dominant+0x1b4>
 800ebdc:	eef4 6ac5 	vcmpe.f32	s13, s10
 800ebe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebe4:	bfd8      	it	le
 800ebe6:	eef0 6a45 	vmovle.f32	s13, s10
 800ebea:	eef4 6ac6 	vcmpe.f32	s13, s12
 800ebee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebf2:	dd21      	ble.n	800ec38 <Calculate_Lambda_Dominant+0x1b4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800ebf4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ebf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebfc:	bf54      	ite	pl
 800ebfe:	eef0 6a60 	vmovpl.f32	s13, s1
 800ec02:	eef0 6a47 	vmovmi.f32	s13, s14
 800ec06:	eef4 6ae5 	vcmpe.f32	s13, s11
 800ec0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec0e:	d51b      	bpl.n	800ec48 <Calculate_Lambda_Dominant+0x1c4>
 800ec10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec18:	bfd8      	it	le
 800ec1a:	eeb0 7a60 	vmovle.f32	s14, s1
 800ec1e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800ec22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec26:	bfcc      	ite	gt
 800ec28:	2301      	movgt	r3, #1
 800ec2a:	f04f 33ff 	movle.w	r3, #4294967295
			
			if((ld*triangle_out) > 0)
 800ec2e:	fb13 f301 	smulbb	r3, r3, r1
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d10b      	bne.n	800ec4e <Calculate_Lambda_Dominant+0x1ca>
			{
				lambda_d_Measure = lamda_dominant[i+1];
 800ec36:	8814      	ldrh	r4, [r2, #0]
 800ec38:	3202      	adds	r2, #2
	for(uint8_t i = 0; i < 65; i++)
 800ec3a:	4297      	cmp	r7, r2
 800ec3c:	d184      	bne.n	800eb48 <Calculate_Lambda_Dominant+0xc4>
 800ec3e:	b103      	cbz	r3, 800ec42 <Calculate_Lambda_Dominant+0x1be>
 800ec40:	8004      	strh	r4, [r0, #0]
 800ec42:	bdf0      	pop	{r4, r5, r6, r7, pc}
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800ec44:	2101      	movs	r1, #1
 800ec46:	e76f      	b.n	800eb28 <Calculate_Lambda_Dominant+0xa4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800ec48:	f04f 33ff 	mov.w	r3, #4294967295
 800ec4c:	e7ef      	b.n	800ec2e <Calculate_Lambda_Dominant+0x1aa>
			} else {
				lambda_d_Measure = triangle_out < 0 ? 0 : lamda_dominant[i+1];
 800ec4e:	1c4b      	adds	r3, r1, #1
 800ec50:	bf14      	ite	ne
 800ec52:	8814      	ldrhne	r4, [r2, #0]
 800ec54:	2400      	moveq	r4, #0
 800ec56:	2301      	movs	r3, #1
 800ec58:	e7ee      	b.n	800ec38 <Calculate_Lambda_Dominant+0x1b4>
 800ec5a:	bf00      	nop
 800ec5c:	2008f540 	.word	0x2008f540
 800ec60:	3eaaa64c 	.word	0x3eaaa64c
 800ec64:	be1fd4b2 	.word	0xbe1fd4b2
 800ec68:	beaaa64c 	.word	0xbeaaa64c
 800ec6c:	3e3577e6 	.word	0x3e3577e6
 800ec70:	00000000 	.word	0x00000000
 800ec74:	3f0eeab2 	.word	0x3f0eeab2
 800ec78:	3e876ea8 	.word	0x3e876ea8
 800ec7c:	3f3c48ac 	.word	0x3f3c48ac
 800ec80:	becdeb0c 	.word	0xbecdeb0c
 800ec84:	3d8cde90 	.word	0x3d8cde90
 800ec88:	20095b84 	.word	0x20095b84
 800ec8c:	08024ffc 	.word	0x08024ffc
 800ec90:	080252fc 	.word	0x080252fc
 800ec94:	080251f4 	.word	0x080251f4

0800ec98 <Calculate_deltaEab>:

extern int16_t colorimetry_LAB_mem[3];
float result, res1, res2, res3;

int16_t Calculate_deltaEab() {
	if((Measure_Field&CIE_Lab) == 0){
 800ec98:	4b2c      	ldr	r3, [pc, #176]	; (800ed4c <Calculate_deltaEab+0xb4>)
 800ec9a:	881b      	ldrh	r3, [r3, #0]
 800ec9c:	061b      	lsls	r3, r3, #24
int16_t Calculate_deltaEab() {
 800ec9e:	b507      	push	{r0, r1, r2, lr}
	if((Measure_Field&CIE_Lab) == 0){
 800eca0:	d40a      	bmi.n	800ecb8 <Calculate_deltaEab+0x20>
		Calculate_Lab(Measure_Color_xy == 0x00 ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 800eca2:	4b2b      	ldr	r3, [pc, #172]	; (800ed50 <Calculate_deltaEab+0xb8>)
 800eca4:	482b      	ldr	r0, [pc, #172]	; (800ed54 <Calculate_deltaEab+0xbc>)
 800eca6:	7819      	ldrb	r1, [r3, #0]
 800eca8:	4b2b      	ldr	r3, [pc, #172]	; (800ed58 <Calculate_deltaEab+0xc0>)
 800ecaa:	781a      	ldrb	r2, [r3, #0]
 800ecac:	4b2b      	ldr	r3, [pc, #172]	; (800ed5c <Calculate_deltaEab+0xc4>)
 800ecae:	2900      	cmp	r1, #0
 800ecb0:	bf18      	it	ne
 800ecb2:	4618      	movne	r0, r3
 800ecb4:	f7ff fdb0 	bl	800e818 <Calculate_Lab>
	}
	res1 = ((float)(colorimetry_LAB[0]) - (float)(colorimetry_LAB_mem[0]));
 800ecb8:	4a29      	ldr	r2, [pc, #164]	; (800ed60 <Calculate_deltaEab+0xc8>)
 800ecba:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ecbe:	ee06 3a90 	vmov	s13, r3
 800ecc2:	4b28      	ldr	r3, [pc, #160]	; (800ed64 <Calculate_deltaEab+0xcc>)
 800ecc4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800ecc8:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800eccc:	ee06 1a90 	vmov	s13, r1
 800ecd0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ecd4:	4924      	ldr	r1, [pc, #144]	; (800ed68 <Calculate_deltaEab+0xd0>)
 800ecd6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800ecda:	edc1 6a00 	vstr	s13, [r1]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800ecde:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800ece2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800ece6:	ee00 1a10 	vmov	s0, r1
 800ecea:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800ecee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800ecf2:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800ecf6:	ee00 1a10 	vmov	s0, r1
 800ecfa:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800ecfe:	491b      	ldr	r1, [pc, #108]	; (800ed6c <Calculate_deltaEab+0xd4>)
 800ed00:	ee37 0ac0 	vsub.f32	s0, s15, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800ed04:	ee07 2a90 	vmov	s15, r2
 800ed08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ed0c:	ee07 3a90 	vmov	s15, r3
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800ed10:	ed81 0a00 	vstr	s0, [r1]
	Calculate_deltaEab_Done = 0x01;
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800ed14:	ee20 0a00 	vmul.f32	s0, s0, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800ed18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800ed1c:	eea6 0aa6 	vfma.f32	s0, s13, s13
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800ed20:	4b13      	ldr	r3, [pc, #76]	; (800ed70 <Calculate_deltaEab+0xd8>)
 800ed22:	ee77 7a67 	vsub.f32	s15, s14, s15
	Calculate_deltaEab_Done = 0x01;
 800ed26:	2201      	movs	r2, #1
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800ed28:	edc3 7a00 	vstr	s15, [r3]
	Calculate_deltaEab_Done = 0x01;
 800ed2c:	4b11      	ldr	r3, [pc, #68]	; (800ed74 <Calculate_deltaEab+0xdc>)
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800ed2e:	eea7 0aa7 	vfma.f32	s0, s15, s15
	Calculate_deltaEab_Done = 0x01;
 800ed32:	701a      	strb	r2, [r3, #0]
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800ed34:	f014 fdba 	bl	80238ac <sqrtf>
 800ed38:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ed3c:	edcd 7a01 	vstr	s15, [sp, #4]
}
 800ed40:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800ed44:	b003      	add	sp, #12
 800ed46:	f85d fb04 	ldr.w	pc, [sp], #4
 800ed4a:	bf00      	nop
 800ed4c:	20005706 	.word	0x20005706
 800ed50:	20005704 	.word	0x20005704
 800ed54:	2008f528 	.word	0x2008f528
 800ed58:	20090ab9 	.word	0x20090ab9
 800ed5c:	2008f522 	.word	0x2008f522
 800ed60:	2008f51c 	.word	0x2008f51c
 800ed64:	20091048 	.word	0x20091048
 800ed68:	20090a98 	.word	0x20090a98
 800ed6c:	20090a90 	.word	0x20090a90
 800ed70:	20090aa8 	.word	0x20090aa8
 800ed74:	200056a1 	.word	0x200056a1

0800ed78 <Calibration_Load_2byte>:
extern float Unit_nm[7], Spectral_Corection_Buff[1024], Scattering_Light, Exposure_Factor;
extern float Spectral_day[1024], Spectral_night[1024], Spectral_B[1024], Spectral_R[1024];
	
uint16_t buff2_array[4] = {0};
uint16_t Calibration_Load_2byte(uint32_t Address, uint8_t num)
{
 800ed78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint64_t buff = 0;

	uint16_t byte_array[4] = {0};
	uint8_t i = 0;
	
	i = num > 3 ? (num - 4*(num/4)) : num;
 800ed7a:	2903      	cmp	r1, #3
{
 800ed7c:	460c      	mov	r4, r1
 800ed7e:	bf88      	it	hi
 800ed80:	f001 0403 	andhi.w	r4, r1, #3
	buff = flash_data_read_buff(Address);
 800ed84:	f7fd f903 	bl	800bf8e <flash_data_read_buff>
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800ed88:	aa04      	add	r2, sp, #16
 800ed8a:	e962 0104 	strd	r0, r1, [r2, #-16]!
 800ed8e:	ca03      	ldmia	r2!, {r0, r1}
 800ed90:	4b0a      	ldr	r3, [pc, #40]	; (800edbc <Calibration_Load_2byte+0x44>)
 800ed92:	6018      	str	r0, [r3, #0]
	
	byte_array[0] = buff2_array[1];
 800ed94:	885a      	ldrh	r2, [r3, #2]
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800ed96:	6059      	str	r1, [r3, #4]
	byte_array[0] = buff2_array[1];
 800ed98:	f8ad 2008 	strh.w	r2, [sp, #8]
	byte_array[1] = buff2_array[0];
 800ed9c:	881a      	ldrh	r2, [r3, #0]
 800ed9e:	f8ad 200a 	strh.w	r2, [sp, #10]
	byte_array[2] = buff2_array[3];
 800eda2:	88da      	ldrh	r2, [r3, #6]
	byte_array[3] = buff2_array[2];
 800eda4:	889b      	ldrh	r3, [r3, #4]
 800eda6:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	return byte_array[i];
 800edaa:	ab04      	add	r3, sp, #16
 800edac:	eb03 0444 	add.w	r4, r3, r4, lsl #1
	byte_array[2] = buff2_array[3];
 800edb0:	f8ad 200c 	strh.w	r2, [sp, #12]
}
 800edb4:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800edb8:	b004      	add	sp, #16
 800edba:	bd10      	pop	{r4, pc}
 800edbc:	200056e0 	.word	0x200056e0

0800edc0 <Calibration_Load_1byte>:
	

	uint8_t byte1[8] = {0};
uint8_t Calibration_Load_1byte(uint32_t Address, uint8_t num)
{
 800edc0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t buff = 0;
	uint8_t buff_array[8] = {0};

	uint8_t i = 0;
	
	i = num > 7 ? (num - 8) : num;
 800edc2:	2907      	cmp	r1, #7
{
 800edc4:	b085      	sub	sp, #20
 800edc6:	460c      	mov	r4, r1
	i = num > 7 ? (num - 8) : num;
 800edc8:	bf84      	itt	hi
 800edca:	f1a1 0408 	subhi.w	r4, r1, #8
 800edce:	b2e4      	uxtbhi	r4, r4
	buff = flash_data_read_buff(Address);
 800edd0:	f7fd f8dd 	bl	800bf8e <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800edd4:	e9cd 0100 	strd	r0, r1, [sp]
 800edd8:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800eddc:	ab04      	add	r3, sp, #16
 800edde:	e903 0003 	stmdb	r3, {r0, r1}
	
	byte1[0] =  buff_array[3];
 800ede2:	4b0f      	ldr	r3, [pc, #60]	; (800ee20 <Calibration_Load_1byte+0x60>)
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ede4:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800ede8:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800edec:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800edf0:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800edf4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800edf8:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800edfc:	f89d 500f 	ldrb.w	r5, [sp, #15]
	byte1[0] =  buff_array[3];
 800ee00:	f89d c00b 	ldrb.w	ip, [sp, #11]
 800ee04:	f883 c000 	strb.w	ip, [r3]
	byte1[1] =  buff_array[2];
 800ee08:	f883 e001 	strb.w	lr, [r3, #1]
	byte1[2] =  buff_array[1];
 800ee0c:	709f      	strb	r7, [r3, #2]
	byte1[3] =  buff_array[0];
 800ee0e:	70de      	strb	r6, [r3, #3]
	byte1[4] =  buff_array[7];
 800ee10:	711d      	strb	r5, [r3, #4]
	byte1[5] =  buff_array[6];
 800ee12:	7158      	strb	r0, [r3, #5]
	byte1[6] =  buff_array[5];
 800ee14:	7199      	strb	r1, [r3, #6]
	byte1[7] =  buff_array[4];
 800ee16:	71da      	strb	r2, [r3, #7]
	
	return byte1[i];
}
 800ee18:	5d18      	ldrb	r0, [r3, r4]
 800ee1a:	b005      	add	sp, #20
 800ee1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	200056f4 	.word	0x200056f4

0800ee24 <Calibration_Load_float>:


	
float Calibration_Load_float(uint32_t Address)
{
 800ee24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buff_array[8] = {0};
	uint32_t buff_float = 0;
	float res = 0;
	uint64_t buff = 0;
	buff = flash_data_read_buff(Address);
 800ee26:	f7fd f8b2 	bl	800bf8e <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ee2a:	e9cd 0100 	strd	r0, r1, [sp]
 800ee2e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800ee32:	ab04      	add	r3, sp, #16
 800ee34:	e903 0003 	stmdb	r3, {r0, r1}
	buff_float = (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
	memcpy(&res, &buff_float, sizeof(uint32_t));
	return res;
 800ee38:	9b02      	ldr	r3, [sp, #8]
 800ee3a:	ba1b      	rev	r3, r3
}
 800ee3c:	ee00 3a10 	vmov	s0, r3
 800ee40:	b005      	add	sp, #20
 800ee42:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ee48 <Calibration_Load_Pack>:
	uint8_t buff_array[8] = {0};
	uint64_t buff = 0;
	uint32_t buff_float = 0;
	
void Calibration_Load_Pack(uint32_t Address, uint16_t size, float data[])
{
 800ee48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t idx = 0;
	
	for (uint16_t i = 0; i < (4*size); i+=8){
		addr = Address + i;
 800ee4c:	f8df a078 	ldr.w	sl, [pc, #120]	; 800eec8 <Calibration_Load_Pack+0x80>
		buff = flash_data_read_buff(Address+i);
 800ee50:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800eec0 <Calibration_Load_Pack+0x78>
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800ee54:	4c19      	ldr	r4, [pc, #100]	; (800eebc <Calibration_Load_Pack+0x74>)
{
 800ee56:	4681      	mov	r9, r0
 800ee58:	4617      	mov	r7, r2
	for (uint16_t i = 0; i < (4*size); i+=8){
 800ee5a:	ea4f 0881 	mov.w	r8, r1, lsl #2
	uint16_t idx = 0;
 800ee5e:	2500      	movs	r5, #0
 800ee60:	00ae      	lsls	r6, r5, #2
 800ee62:	b2b0      	uxth	r0, r6
	for (uint16_t i = 0; i < (4*size); i+=8){
 800ee64:	4540      	cmp	r0, r8
 800ee66:	db01      	blt.n	800ee6c <Calibration_Load_Pack+0x24>
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
		idx+=2;
	}
}
 800ee68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		addr = Address + i;
 800ee6c:	4448      	add	r0, r9
 800ee6e:	f8ca 0000 	str.w	r0, [sl]
		buff = flash_data_read_buff(Address+i);
 800ee72:	f7fd f88c 	bl	800bf8e <flash_data_read_buff>
 800ee76:	e9cb 0100 	strd	r0, r1, [fp]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800ee7a:	4b11      	ldr	r3, [pc, #68]	; (800eec0 <Calibration_Load_Pack+0x78>)
 800ee7c:	cb03      	ldmia	r3!, {r0, r1}
 800ee7e:	6020      	str	r0, [r4, #0]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800ee80:	7863      	ldrb	r3, [r4, #1]
 800ee82:	7822      	ldrb	r2, [r4, #0]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800ee84:	6061      	str	r1, [r4, #4]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800ee86:	041b      	lsls	r3, r3, #16
 800ee88:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ee8c:	78e2      	ldrb	r2, [r4, #3]
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	78a2      	ldrb	r2, [r4, #2]
 800ee92:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
 800ee96:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800ee9a:	7963      	ldrb	r3, [r4, #5]
 800ee9c:	7922      	ldrb	r2, [r4, #4]
 800ee9e:	041b      	lsls	r3, r3, #16
 800eea0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800eea4:	79e2      	ldrb	r2, [r4, #7]
 800eea6:	4313      	orrs	r3, r2
 800eea8:	79a2      	ldrb	r2, [r4, #6]
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800eeaa:	443e      	add	r6, r7
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800eeac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eeb0:	4a04      	ldr	r2, [pc, #16]	; (800eec4 <Calibration_Load_Pack+0x7c>)
		idx+=2;
 800eeb2:	3502      	adds	r5, #2
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800eeb4:	6013      	str	r3, [r2, #0]
		idx+=2;
 800eeb6:	b2ad      	uxth	r5, r5
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800eeb8:	6073      	str	r3, [r6, #4]
 800eeba:	e7d1      	b.n	800ee60 <Calibration_Load_Pack+0x18>
 800eebc:	200056e8 	.word	0x200056e8
 800eec0:	200056d8 	.word	0x200056d8
 800eec4:	200056f0 	.word	0x200056f0
 800eec8:	20090ab0 	.word	0x20090ab0

0800eecc <Calibration_Exposure_Change>:


void Calibration_Exposure_Change(uint8_t Exp)
{
 800eecc:	b538      	push	{r3, r4, r5, lr}
 800eece:	4605      	mov	r5, r0
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800eed0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800eed4:	f100 6001 	add.w	r0, r0, #135266304	; 0x8100000
 800eed8:	4629      	mov	r1, r5
 800eeda:	f600 0028 	addw	r0, r0, #2088	; 0x828
 800eede:	f7ff ff6f 	bl	800edc0 <Calibration_Load_1byte>
 800eee2:	ee07 0a90 	vmov	s15, r0
 800eee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800eeea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800eeee:	eec6 7a87 	vdiv.f32	s15, s13, s14
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800eef2:	08a8      	lsrs	r0, r5, #2
 800eef4:	f100 2001 	add.w	r0, r0, #16777472	; 0x1000100
 800eef8:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800eefc:	4b0d      	ldr	r3, [pc, #52]	; (800ef34 <Calibration_Exposure_Change+0x68>)
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800eefe:	00c4      	lsls	r4, r0, #3
 800ef00:	4629      	mov	r1, r5
 800ef02:	4620      	mov	r0, r4
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800ef04:	edc3 7a00 	vstr	s15, [r3]
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ef08:	f7ff ff36 	bl	800ed78 <Calibration_Load_2byte>
 800ef0c:	4b0a      	ldr	r3, [pc, #40]	; (800ef38 <Calibration_Exposure_Change+0x6c>)
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800ef0e:	4629      	mov	r1, r5
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ef10:	8018      	strh	r0, [r3, #0]
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800ef12:	f104 0014 	add.w	r0, r4, #20
 800ef16:	f7ff ff2f 	bl	800ed78 <Calibration_Load_2byte>
 800ef1a:	ee07 0a90 	vmov	s15, r0
 800ef1e:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800ef3c <Calibration_Exposure_Change+0x70>
 800ef22:	4b07      	ldr	r3, [pc, #28]	; (800ef40 <Calibration_Exposure_Change+0x74>)
 800ef24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ef28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ef2c:	edc3 7a00 	vstr	s15, [r3]
 800ef30:	bd38      	pop	{r3, r4, r5, pc}
 800ef32:	bf00      	nop
 800ef34:	2005193c 	.word	0x2005193c
 800ef38:	20009d22 	.word	0x20009d22
 800ef3c:	42c80000 	.word	0x42c80000
 800ef40:	20009d2c 	.word	0x20009d2c
 800ef44:	00000000 	.word	0x00000000

0800ef48 <Calibration_WaveLenght_Graph>:
}

void Calibration_WaveLenght_Graph()
{
 800ef48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0; i <= 7; i++){
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ef4c:	a717      	add	r7, pc, #92	; (adr r7, 800efac <Calibration_WaveLenght_Graph+0x64>)
 800ef4e:	e9d7 6700 	ldrd	r6, r7, [r7]
 800ef52:	f8df a060 	ldr.w	sl, [pc, #96]	; 800efb4 <Calibration_WaveLenght_Graph+0x6c>
 800ef56:	4d14      	ldr	r5, [pc, #80]	; (800efa8 <Calibration_WaveLenght_Graph+0x60>)
 800ef58:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800efb8 <Calibration_WaveLenght_Graph+0x70>
	for (uint8_t i = 0; i <= 7; i++){
 800ef5c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800efbc <Calibration_WaveLenght_Graph+0x74>
{
 800ef60:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ef64:	f04f 0800 	mov.w	r8, #0
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800ef68:	2100      	movs	r1, #0
 800ef6a:	4620      	mov	r0, r4
 800ef6c:	f7ff ff04 	bl	800ed78 <Calibration_Load_2byte>
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ef70:	ee07 0a90 	vmov	s15, r0
 800ef74:	eef8 7a67 	vcvt.f32.u32	s15, s15
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800ef78:	f82a 0f02 	strh.w	r0, [sl, #2]!
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ef7c:	ee17 0a90 	vmov	r0, s15
 800ef80:	f7f1 fafa 	bl	8000578 <__aeabi_f2d>
 800ef84:	4642      	mov	r2, r8
 800ef86:	464b      	mov	r3, r9
 800ef88:	f7f1 fc74 	bl	8000874 <__aeabi_ddiv>
 800ef8c:	4632      	mov	r2, r6
 800ef8e:	463b      	mov	r3, r7
 800ef90:	f7f1 f994 	bl	80002bc <__adddf3>
 800ef94:	f7f1 fe3c 	bl	8000c10 <__aeabi_d2f>
 800ef98:	f504 7492 	add.w	r4, r4, #292	; 0x124
	for (uint8_t i = 0; i <= 7; i++){
 800ef9c:	455c      	cmp	r4, fp
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ef9e:	f845 0b04 	str.w	r0, [r5], #4
	for (uint8_t i = 0; i <= 7; i++){
 800efa2:	d1e1      	bne.n	800ef68 <Calibration_WaveLenght_Graph+0x20>
	}
}
 800efa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efa8:	20009d00 	.word	0x20009d00
 800efac:	00000000 	.word	0x00000000
 800efb0:	4072c000 	.word	0x4072c000
 800efb4:	20055946 	.word	0x20055946
 800efb8:	40590000 	.word	0x40590000
 800efbc:	08100920 	.word	0x08100920

0800efc0 <GUI_OptionMenuRu>:

extern uint16_t Touch_x, Touch_y;
uint16_t temp_x = 0, temp_y = 0;

void GUI_OptionMenuRu()
{	
 800efc0:	b513      	push	{r0, r1, r4, lr}
	GUI_TextRu_Language(10, 86);
 800efc2:	2156      	movs	r1, #86	; 0x56
 800efc4:	200a      	movs	r0, #10
 800efc6:	f009 f979 	bl	80182bc <GUI_TextRu_Language>
	GUI_TextRu_Russian(118, 86);
 800efca:	2156      	movs	r1, #86	; 0x56
 800efcc:	2076      	movs	r0, #118	; 0x76
 800efce:	f009 f9a7 	bl	8018320 <GUI_TextRu_Russian>
	GUI_Flag_Ru(218, 86);
 800efd2:	2156      	movs	r1, #86	; 0x56
 800efd4:	20da      	movs	r0, #218	; 0xda
 800efd6:	f004 f842 	bl	801305e <GUI_Flag_Ru>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800efda:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800efde:	2378      	movs	r3, #120	; 0x78
 800efe0:	4619      	mov	r1, r3
 800efe2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800efe6:	9400      	str	r4, [sp, #0]
 800efe8:	200a      	movs	r0, #10
 800efea:	f00d fa8b 	bl	801c504 <TFT_DrawLine>
	GUI_TextRu_Info(10, 145);
 800efee:	2191      	movs	r1, #145	; 0x91
 800eff0:	200a      	movs	r0, #10
 800eff2:	f009 f9dd 	bl	80183b0 <GUI_TextRu_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800eff6:	23b7      	movs	r3, #183	; 0xb7
 800eff8:	4619      	mov	r1, r3
 800effa:	f44f 7283 	mov.w	r2, #262	; 0x106
 800effe:	9400      	str	r4, [sp, #0]
 800f000:	200a      	movs	r0, #10
 800f002:	f00d fa7f 	bl	801c504 <TFT_DrawLine>
	
	GUI_TextRu_Mode(10, 209);
 800f006:	21d1      	movs	r1, #209	; 0xd1
 800f008:	200a      	movs	r0, #10
 800f00a:	f009 fa73 	bl	80184f4 <GUI_TextRu_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800f00e:	4b21      	ldr	r3, [pc, #132]	; (800f094 <GUI_OptionMenuRu+0xd4>)
 800f010:	21ca      	movs	r1, #202	; 0xca
 800f012:	781a      	ldrb	r2, [r3, #0]
 800f014:	20b6      	movs	r0, #182	; 0xb6
 800f016:	f003 ffe9 	bl	8012fec <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800f01a:	4620      	mov	r0, r4
 800f01c:	f00d fcfe 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800f020:	2063      	movs	r0, #99	; 0x63
 800f022:	f00d fd01 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800f026:	481c      	ldr	r0, [pc, #112]	; (800f098 <GUI_OptionMenuRu+0xd8>)
 800f028:	f00d fcf2 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800f02c:	2245      	movs	r2, #69	; 0x45
 800f02e:	21d2      	movs	r1, #210	; 0xd2
 800f030:	20e1      	movs	r0, #225	; 0xe1
 800f032:	f00d fdb7 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800f036:	224c      	movs	r2, #76	; 0x4c
 800f038:	21d2      	movs	r1, #210	; 0xd2
 800f03a:	209b      	movs	r0, #155	; 0x9b
 800f03c:	f00d fdb2 	bl	801cba4 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f040:	23f8      	movs	r3, #248	; 0xf8
 800f042:	4619      	mov	r1, r3
 800f044:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f048:	9400      	str	r4, [sp, #0]
 800f04a:	200a      	movs	r0, #10
 800f04c:	f00d fa5a 	bl	801c504 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800f050:	f240 1113 	movw	r1, #275	; 0x113
 800f054:	200a      	movs	r0, #10
 800f056:	f007 fb8b 	bl	8016770 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800f05a:	4b10      	ldr	r3, [pc, #64]	; (800f09c <GUI_OptionMenuRu+0xdc>)
 800f05c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800f060:	781a      	ldrb	r2, [r3, #0]
 800f062:	20b6      	movs	r0, #182	; 0xb6
 800f064:	f003 ff6c 	bl	8012f40 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800f068:	f240 1113 	movw	r1, #275	; 0x113
 800f06c:	20de      	movs	r0, #222	; 0xde
 800f06e:	f007 febf 	bl	8016df0 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800f072:	f240 1113 	movw	r1, #275	; 0x113
 800f076:	208c      	movs	r0, #140	; 0x8c
 800f078:	f007 fede 	bl	8016e38 <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f07c:	f240 1339 	movw	r3, #313	; 0x139
 800f080:	9400      	str	r4, [sp, #0]
 800f082:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f086:	4619      	mov	r1, r3
 800f088:	200a      	movs	r0, #10
 800f08a:	f00d fa3b 	bl	801c504 <TFT_DrawLine>
}
 800f08e:	b002      	add	sp, #8
 800f090:	bd10      	pop	{r4, pc}
 800f092:	bf00      	nop
 800f094:	20000ebc 	.word	0x20000ebc
 800f098:	200001b0 	.word	0x200001b0
 800f09c:	20090aba 	.word	0x20090aba

0800f0a0 <GUI_OptionMenuEn>:
void GUI_OptionMenuEn()
{
 800f0a0:	b513      	push	{r0, r1, r4, lr}
	GUI_TextEn_Language(10, 88);
 800f0a2:	2158      	movs	r1, #88	; 0x58
 800f0a4:	200a      	movs	r0, #10
 800f0a6:	f007 ff67 	bl	8016f78 <GUI_TextEn_Language>
	GUI_TextEn_English(127, 88);
 800f0aa:	2158      	movs	r1, #88	; 0x58
 800f0ac:	207f      	movs	r0, #127	; 0x7f
 800f0ae:	f007 ffb1 	bl	8017014 <GUI_TextEn_English>
	GUI_Flag_En(218, 86);
 800f0b2:	2156      	movs	r1, #86	; 0x56
 800f0b4:	20da      	movs	r0, #218	; 0xda
 800f0b6:	f003 fffc 	bl	80130b2 <GUI_Flag_En>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f0ba:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800f0be:	2378      	movs	r3, #120	; 0x78
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f0c6:	9400      	str	r4, [sp, #0]
 800f0c8:	200a      	movs	r0, #10
 800f0ca:	f00d fa1b 	bl	801c504 <TFT_DrawLine>
	GUI_TextEn_Info(10, 147);
 800f0ce:	2193      	movs	r1, #147	; 0x93
 800f0d0:	200a      	movs	r0, #10
 800f0d2:	f007 ffe7 	bl	80170a4 <GUI_TextEn_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800f0d6:	23b7      	movs	r3, #183	; 0xb7
 800f0d8:	4619      	mov	r1, r3
 800f0da:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f0de:	9400      	str	r4, [sp, #0]
 800f0e0:	200a      	movs	r0, #10
 800f0e2:	f00d fa0f 	bl	801c504 <TFT_DrawLine>
	
	GUI_TextEn_Mode(10, 211);
 800f0e6:	21d3      	movs	r1, #211	; 0xd3
 800f0e8:	200a      	movs	r0, #10
 800f0ea:	f008 fb29 	bl	8017740 <GUI_TextEn_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800f0ee:	4b21      	ldr	r3, [pc, #132]	; (800f174 <GUI_OptionMenuEn+0xd4>)
 800f0f0:	21ca      	movs	r1, #202	; 0xca
 800f0f2:	781a      	ldrb	r2, [r3, #0]
 800f0f4:	20b6      	movs	r0, #182	; 0xb6
 800f0f6:	f003 ff79 	bl	8012fec <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800f0fa:	4620      	mov	r0, r4
 800f0fc:	f00d fc8e 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800f100:	2063      	movs	r0, #99	; 0x63
 800f102:	f00d fc91 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800f106:	481c      	ldr	r0, [pc, #112]	; (800f178 <GUI_OptionMenuEn+0xd8>)
 800f108:	f00d fc82 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800f10c:	2245      	movs	r2, #69	; 0x45
 800f10e:	21d2      	movs	r1, #210	; 0xd2
 800f110:	20e1      	movs	r0, #225	; 0xe1
 800f112:	f00d fd47 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800f116:	224c      	movs	r2, #76	; 0x4c
 800f118:	21d2      	movs	r1, #210	; 0xd2
 800f11a:	209b      	movs	r0, #155	; 0x9b
 800f11c:	f00d fd42 	bl	801cba4 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f120:	23f8      	movs	r3, #248	; 0xf8
 800f122:	4619      	mov	r1, r3
 800f124:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f128:	9400      	str	r4, [sp, #0]
 800f12a:	200a      	movs	r0, #10
 800f12c:	f00d f9ea 	bl	801c504 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800f130:	f240 1113 	movw	r1, #275	; 0x113
 800f134:	200a      	movs	r0, #10
 800f136:	f007 fb1b 	bl	8016770 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800f13a:	4b10      	ldr	r3, [pc, #64]	; (800f17c <GUI_OptionMenuEn+0xdc>)
 800f13c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800f140:	781a      	ldrb	r2, [r3, #0]
 800f142:	20b6      	movs	r0, #182	; 0xb6
 800f144:	f003 fefc 	bl	8012f40 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800f148:	f240 1113 	movw	r1, #275	; 0x113
 800f14c:	20de      	movs	r0, #222	; 0xde
 800f14e:	f007 fe4f 	bl	8016df0 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800f152:	f240 1113 	movw	r1, #275	; 0x113
 800f156:	208c      	movs	r0, #140	; 0x8c
 800f158:	f007 fe6e 	bl	8016e38 <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f15c:	f240 1339 	movw	r3, #313	; 0x139
 800f160:	9400      	str	r4, [sp, #0]
 800f162:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f166:	4619      	mov	r1, r3
 800f168:	200a      	movs	r0, #10
 800f16a:	f00d f9cb 	bl	801c504 <TFT_DrawLine>
}
 800f16e:	b002      	add	sp, #8
 800f170:	bd10      	pop	{r4, pc}
 800f172:	bf00      	nop
 800f174:	20000ebc 	.word	0x20000ebc
 800f178:	200001b0 	.word	0x200001b0
 800f17c:	20090aba 	.word	0x20090aba

0800f180 <GUI_Title_Screen>:
void GUI_Title_Screen()
{
 800f180:	b507      	push	{r0, r1, r2, lr}
	TFT_FillScreen_DMA(0x0084);
 800f182:	2084      	movs	r0, #132	; 0x84
 800f184:	f00d f81c 	bl	801c1c0 <TFT_FillScreen_DMA>
	GUI_TitleString_Name(80, 330);
 800f188:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800f18c:	2050      	movs	r0, #80	; 0x50
 800f18e:	f008 fff7 	bl	8018180 <GUI_TitleString_Name>
	GUI_TitleString_Version(180, 420, VERSION);
 800f192:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f196:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800f19a:	20b4      	movs	r0, #180	; 0xb4
 800f19c:	f009 f84a 	bl	8018234 <GUI_TitleString_Version>
	sImage bmTKA_logo_Flash = {
 800f1a0:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800f1a4:	f8ad 3000 	strh.w	r3, [sp]
 800f1a8:	23b5      	movs	r3, #181	; 0xb5
 800f1aa:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f1ae:	4b08      	ldr	r3, [pc, #32]	; (800f1d0 <GUI_Title_Screen+0x50>)
 800f1b0:	9301      	str	r3, [sp, #4]
			TKA_LOGO_BMP_SIZEX, // xSize
			TKA_LOGO_BMP_SIZEY, // ySize
			(uint16_t *)bmp,  // Pointer to picture data
		};
	TFT_DrawBitmap(0, 100, bmTKA_logo_Flash);
 800f1b2:	ab02      	add	r3, sp, #8
 800f1b4:	e913 000c 	ldmdb	r3, {r2, r3}
 800f1b8:	2164      	movs	r1, #100	; 0x64
 800f1ba:	2000      	movs	r0, #0
 800f1bc:	f00d fc01 	bl	801c9c2 <TFT_DrawBitmap>
	Measure_Color_xy |= CIE_xy_1931_1964;
 800f1c0:	4a04      	ldr	r2, [pc, #16]	; (800f1d4 <GUI_Title_Screen+0x54>)
 800f1c2:	7813      	ldrb	r3, [r2, #0]
 800f1c4:	f043 0301 	orr.w	r3, r3, #1
 800f1c8:	7013      	strb	r3, [r2, #0]
}
 800f1ca:	b003      	add	sp, #12
 800f1cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f1d0:	20055954 	.word	0x20055954
 800f1d4:	20005704 	.word	0x20005704

0800f1d8 <Measure_Elements_Draw>:
		Prev_Inf_Screen = Measure_Screen;
		preGUI_screen_state = Measure_Screen;
}

void Measure_Elements_Draw(uint8_t Measure_Number)
{	
 800f1d8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t Y = 70, limit = 410;
	
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
	{
		screen_count_old = screen_count;
 800f1dc:	4da4      	ldr	r5, [pc, #656]	; (800f470 <Measure_Elements_Draw+0x298>)
 800f1de:	4fa5      	ldr	r7, [pc, #660]	; (800f474 <Measure_Elements_Draw+0x29c>)
{	
 800f1e0:	4606      	mov	r6, r0
	uint16_t Y = 70, limit = 410;
 800f1e2:	2446      	movs	r4, #70	; 0x46
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800f1e4:	2e0e      	cmp	r6, #14
 800f1e6:	f200 8099 	bhi.w	800f31c <Measure_Elements_Draw+0x144>
		screen_count_old = screen_count;
 800f1ea:	782b      	ldrb	r3, [r5, #0]
 800f1ec:	703b      	strb	r3, [r7, #0]
		
		switch(state_i){
 800f1ee:	2e0c      	cmp	r6, #12
 800f1f0:	f200 808c 	bhi.w	800f30c <Measure_Elements_Draw+0x134>
 800f1f4:	e8df f016 	tbh	[pc, r6, lsl #1]
 800f1f8:	0035000d 	.word	0x0035000d
 800f1fc:	0060004c 	.word	0x0060004c
 800f200:	00ba0095 	.word	0x00ba0095
 800f204:	00fc00d2 	.word	0x00fc00d2
 800f208:	01680124 	.word	0x01680124
 800f20c:	019a0183 	.word	0x019a0183
 800f210:	01ba      	.short	0x01ba
					case 0: if(Measure_Field&Illuminance){
 800f212:	4a99      	ldr	r2, [pc, #612]	; (800f478 <Measure_Elements_Draw+0x2a0>)
 800f214:	8812      	ldrh	r2, [r2, #0]
 800f216:	07d2      	lsls	r2, r2, #31
 800f218:	d578      	bpl.n	800f30c <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f21a:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f21e:	f280 81b9 	bge.w	800f594 <Measure_Elements_Draw+0x3bc>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f222:	4b96      	ldr	r3, [pc, #600]	; (800f47c <Measure_Elements_Draw+0x2a4>)
 800f224:	4996      	ldr	r1, [pc, #600]	; (800f480 <Measure_Elements_Draw+0x2a8>)
 800f226:	781a      	ldrb	r2, [r3, #0]
 800f228:	4b96      	ldr	r3, [pc, #600]	; (800f484 <Measure_Elements_Draw+0x2ac>)
 800f22a:	4897      	ldr	r0, [pc, #604]	; (800f488 <Measure_Elements_Draw+0x2b0>)
 800f22c:	781b      	ldrb	r3, [r3, #0]
 800f22e:	b17a      	cbz	r2, 800f250 <Measure_Elements_Draw+0x78>
 800f230:	7802      	ldrb	r2, [r0, #0]
 800f232:	9200      	str	r2, [sp, #0]
 800f234:	ed91 0a00 	vldr	s0, [r1]
 800f238:	2200      	movs	r2, #0
 800f23a:	4621      	mov	r1, r4
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
									Y+=10;
							} else {screen_count++;}} break;
				case 1: if(Measure_Field&Irradiance){
					if(Y+35 <= limit){
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f23c:	2014      	movs	r0, #20
 800f23e:	f004 f859 	bl	80132f4 <GUI_Text_E_Measure>
									Y+=10;
							}else {screen_count++;}} break;
				case 12: if(Measure_Field&SP_measure){
					if(Y+35 <= limit){
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
									Y+=35;
 800f242:	f104 0323 	add.w	r3, r4, #35	; 0x23
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f246:	f64f 72ff 	movw	r2, #65535	; 0xffff
									Y+=35;
 800f24a:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f24c:	9200      	str	r2, [sp, #0]
 800f24e:	e085      	b.n	800f35c <Measure_Elements_Draw+0x184>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f250:	7800      	ldrb	r0, [r0, #0]
 800f252:	9000      	str	r0, [sp, #0]
 800f254:	ed91 0a00 	vldr	s0, [r1]
 800f258:	4621      	mov	r1, r4
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f25a:	2014      	movs	r0, #20
 800f25c:	f004 fac8 	bl	80137f0 <GUI_Text_L_Measure>
 800f260:	e7ef      	b.n	800f242 <Measure_Elements_Draw+0x6a>
				case 1: if(Measure_Field&Irradiance){
 800f262:	4a85      	ldr	r2, [pc, #532]	; (800f478 <Measure_Elements_Draw+0x2a0>)
 800f264:	8812      	ldrh	r2, [r2, #0]
 800f266:	0790      	lsls	r0, r2, #30
 800f268:	d550      	bpl.n	800f30c <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f26a:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f26e:	f280 8191 	bge.w	800f594 <Measure_Elements_Draw+0x3bc>
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f272:	4b82      	ldr	r3, [pc, #520]	; (800f47c <Measure_Elements_Draw+0x2a4>)
 800f274:	4a84      	ldr	r2, [pc, #528]	; (800f488 <Measure_Elements_Draw+0x2b0>)
 800f276:	7818      	ldrb	r0, [r3, #0]
 800f278:	4b82      	ldr	r3, [pc, #520]	; (800f484 <Measure_Elements_Draw+0x2ac>)
 800f27a:	4984      	ldr	r1, [pc, #528]	; (800f48c <Measure_Elements_Draw+0x2b4>)
 800f27c:	7812      	ldrb	r2, [r2, #0]
 800f27e:	781b      	ldrb	r3, [r3, #0]
 800f280:	9200      	str	r2, [sp, #0]
 800f282:	ed91 0a00 	vldr	s0, [r1]
 800f286:	2201      	movs	r2, #1
 800f288:	4621      	mov	r1, r4
 800f28a:	2800      	cmp	r0, #0
 800f28c:	d0e5      	beq.n	800f25a <Measure_Elements_Draw+0x82>
 800f28e:	e7d5      	b.n	800f23c <Measure_Elements_Draw+0x64>
				case 2: if(Measure_Field&PPFD){
 800f290:	4a79      	ldr	r2, [pc, #484]	; (800f478 <Measure_Elements_Draw+0x2a0>)
 800f292:	8812      	ldrh	r2, [r2, #0]
 800f294:	0751      	lsls	r1, r2, #29
 800f296:	d539      	bpl.n	800f30c <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f298:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f29c:	f280 817a 	bge.w	800f594 <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPF_Measure(20, Y, PPFD_PPL_Measure, exp_start, exp_set);
 800f2a0:	497b      	ldr	r1, [pc, #492]	; (800f490 <Measure_Elements_Draw+0x2b8>)
 800f2a2:	4b79      	ldr	r3, [pc, #484]	; (800f488 <Measure_Elements_Draw+0x2b0>)
 800f2a4:	4a77      	ldr	r2, [pc, #476]	; (800f484 <Measure_Elements_Draw+0x2ac>)
 800f2a6:	ed91 0a00 	vldr	s0, [r1]
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	7812      	ldrb	r2, [r2, #0]
 800f2ae:	4621      	mov	r1, r4
 800f2b0:	2014      	movs	r0, #20
 800f2b2:	f004 fcdf 	bl	8013c74 <GUI_Text_PPF_Measure>
 800f2b6:	e7c4      	b.n	800f242 <Measure_Elements_Draw+0x6a>
				case 3: if(Measure_Field&PPFD_BGR){
 800f2b8:	4a6f      	ldr	r2, [pc, #444]	; (800f478 <Measure_Elements_Draw+0x2a0>)
 800f2ba:	8812      	ldrh	r2, [r2, #0]
 800f2bc:	0712      	lsls	r2, r2, #28
 800f2be:	d525      	bpl.n	800f30c <Measure_Elements_Draw+0x134>
						if(Y+95 <= limit){
 800f2c0:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
 800f2c4:	f280 8166 	bge.w	800f594 <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPFRGB_Measure(20, Y, PPFD_PPL_Red_Measure, PPFD_PPL_Green_Measure, PPFD_PPL_Blue_Measure, PPFD_PPL_Far_Red_Measure, exp_start, exp_set);
 800f2c8:	4972      	ldr	r1, [pc, #456]	; (800f494 <Measure_Elements_Draw+0x2bc>)
 800f2ca:	4b6f      	ldr	r3, [pc, #444]	; (800f488 <Measure_Elements_Draw+0x2b0>)
 800f2cc:	edd1 1a00 	vldr	s3, [r1]
 800f2d0:	4971      	ldr	r1, [pc, #452]	; (800f498 <Measure_Elements_Draw+0x2c0>)
 800f2d2:	4a6c      	ldr	r2, [pc, #432]	; (800f484 <Measure_Elements_Draw+0x2ac>)
 800f2d4:	ed91 1a00 	vldr	s2, [r1]
 800f2d8:	4970      	ldr	r1, [pc, #448]	; (800f49c <Measure_Elements_Draw+0x2c4>)
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	edd1 0a00 	vldr	s1, [r1]
 800f2e0:	496f      	ldr	r1, [pc, #444]	; (800f4a0 <Measure_Elements_Draw+0x2c8>)
 800f2e2:	7812      	ldrb	r2, [r2, #0]
 800f2e4:	ed91 0a00 	vldr	s0, [r1]
 800f2e8:	2014      	movs	r0, #20
 800f2ea:	4621      	mov	r1, r4
 800f2ec:	f004 fe44 	bl	8013f78 <GUI_Text_PPFRGB_Measure>
									Y+=95;
 800f2f0:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 800f2f4:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f2f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2fa:	9200      	str	r2, [sp, #0]
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f302:	200a      	movs	r0, #10
 800f304:	f00d f8fe 	bl	801c504 <TFT_DrawLine>
									Y+=10;
 800f308:	3469      	adds	r4, #105	; 0x69
									Y+=10;
 800f30a:	b2a4      	uxth	r4, r4
							}else {screen_count++;}} break;
			default: break;
		}

		if (screen_count != screen_count_old)
 800f30c:	782b      	ldrb	r3, [r5, #0]
 800f30e:	783a      	ldrb	r2, [r7, #0]
 800f310:	429a      	cmp	r2, r3
 800f312:	f000 8142 	beq.w	800f59a <Measure_Elements_Draw+0x3c2>
			{
				state_Measure_Elements = state_i;
 800f316:	4a63      	ldr	r2, [pc, #396]	; (800f4a4 <Measure_Elements_Draw+0x2cc>)
				screen_count_old = screen_count;
 800f318:	703b      	strb	r3, [r7, #0]
				state_Measure_Elements = state_i;
 800f31a:	7016      	strb	r6, [r2, #0]
				break;
			}	
			
	}
	
}
 800f31c:	b004      	add	sp, #16
 800f31e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				case 4: if(Measure_Field&CCT){
 800f322:	4a55      	ldr	r2, [pc, #340]	; (800f478 <Measure_Elements_Draw+0x2a0>)
 800f324:	8812      	ldrh	r2, [r2, #0]
 800f326:	05d0      	lsls	r0, r2, #23
 800f328:	d5f0      	bpl.n	800f30c <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f32a:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f32e:	f280 8131 	bge.w	800f594 <Measure_Elements_Draw+0x3bc>
							GUI_Text_CCT_Measure(20, Y,  Tc_Measure == 0xFFFF ? 0 : Tc_Measure, exp_start, exp_set); //
 800f332:	4b5d      	ldr	r3, [pc, #372]	; (800f4a8 <Measure_Elements_Draw+0x2d0>)
 800f334:	4954      	ldr	r1, [pc, #336]	; (800f488 <Measure_Elements_Draw+0x2b0>)
 800f336:	881a      	ldrh	r2, [r3, #0]
 800f338:	4b52      	ldr	r3, [pc, #328]	; (800f484 <Measure_Elements_Draw+0x2ac>)
 800f33a:	7809      	ldrb	r1, [r1, #0]
 800f33c:	781b      	ldrb	r3, [r3, #0]
 800f33e:	9100      	str	r1, [sp, #0]
 800f340:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800f344:	4542      	cmp	r2, r8
 800f346:	bf08      	it	eq
 800f348:	2200      	moveq	r2, #0
 800f34a:	4621      	mov	r1, r4
 800f34c:	2014      	movs	r0, #20
 800f34e:	f005 fd45 	bl	8014ddc <GUI_Text_CCT_Measure>
									Y+=35;
 800f352:	f104 0323 	add.w	r3, r4, #35	; 0x23
 800f356:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f358:	f8cd 8000 	str.w	r8, [sp]
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f35c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f360:	4619      	mov	r1, r3
 800f362:	200a      	movs	r0, #10
 800f364:	f00d f8ce 	bl	801c504 <TFT_DrawLine>
									Y+=10;
 800f368:	342d      	adds	r4, #45	; 0x2d
 800f36a:	e7ce      	b.n	800f30a <Measure_Elements_Draw+0x132>
				case 5: if(Measure_Field&delta_E){
 800f36c:	4a42      	ldr	r2, [pc, #264]	; (800f478 <Measure_Elements_Draw+0x2a0>)
 800f36e:	8812      	ldrh	r2, [r2, #0]
 800f370:	0511      	lsls	r1, r2, #20
 800f372:	d5cb      	bpl.n	800f30c <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f374:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f378:	f280 810c 	bge.w	800f594 <Measure_Elements_Draw+0x3bc>
									GUI_Text_deltaE_Measure(20, Y, delta_Eab_Measure, exp_start, exp_set);
 800f37c:	4b4b      	ldr	r3, [pc, #300]	; (800f4ac <Measure_Elements_Draw+0x2d4>)
 800f37e:	4a41      	ldr	r2, [pc, #260]	; (800f484 <Measure_Elements_Draw+0x2ac>)
 800f380:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f384:	7812      	ldrb	r2, [r2, #0]
 800f386:	ee00 3a10 	vmov	s0, r3
 800f38a:	4b3f      	ldr	r3, [pc, #252]	; (800f488 <Measure_Elements_Draw+0x2b0>)
 800f38c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	4621      	mov	r1, r4
 800f394:	2014      	movs	r0, #20
 800f396:	f005 ff19 	bl	80151cc <GUI_Text_deltaE_Measure>
 800f39a:	e752      	b.n	800f242 <Measure_Elements_Draw+0x6a>
				case 6: if(Measure_Field&CIE_XYZ){
 800f39c:	4a36      	ldr	r2, [pc, #216]	; (800f478 <Measure_Elements_Draw+0x2a0>)
 800f39e:	8812      	ldrh	r2, [r2, #0]
 800f3a0:	06d2      	lsls	r2, r2, #27
 800f3a2:	d5b3      	bpl.n	800f30c <Measure_Elements_Draw+0x134>
						if(Y+105 <= limit){
 800f3a4:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f3a8:	f280 80f4 	bge.w	800f594 <Measure_Elements_Draw+0x3bc>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f3ac:	4b40      	ldr	r3, [pc, #256]	; (800f4b0 <Measure_Elements_Draw+0x2d8>)
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	b9e3      	cbnz	r3, 800f3ec <Measure_Elements_Draw+0x214>
 800f3b2:	4940      	ldr	r1, [pc, #256]	; (800f4b4 <Measure_Elements_Draw+0x2dc>)
 800f3b4:	4834      	ldr	r0, [pc, #208]	; (800f488 <Measure_Elements_Draw+0x2b0>)
 800f3b6:	880a      	ldrh	r2, [r1, #0]
 800f3b8:	7800      	ldrb	r0, [r0, #0]
 800f3ba:	884b      	ldrh	r3, [r1, #2]
 800f3bc:	8889      	ldrh	r1, [r1, #4]
 800f3be:	9002      	str	r0, [sp, #8]
 800f3c0:	4830      	ldr	r0, [pc, #192]	; (800f484 <Measure_Elements_Draw+0x2ac>)
 800f3c2:	7800      	ldrb	r0, [r0, #0]
 800f3c4:	9001      	str	r0, [sp, #4]
 800f3c6:	9100      	str	r1, [sp, #0]
 800f3c8:	2014      	movs	r0, #20
 800f3ca:	4621      	mov	r1, r4
 800f3cc:	f005 f9d4 	bl	8014778 <GUI_Text_XYZ_Measure>
									Y+=105;
 800f3d0:	f104 0369 	add.w	r3, r4, #105	; 0x69
 800f3d4:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f3d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3da:	9200      	str	r2, [sp, #0]
 800f3dc:	4619      	mov	r1, r3
 800f3de:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f3e2:	200a      	movs	r0, #10
 800f3e4:	f00d f88e 	bl	801c504 <TFT_DrawLine>
									Y+=10;
 800f3e8:	3473      	adds	r4, #115	; 0x73
 800f3ea:	e78e      	b.n	800f30a <Measure_Elements_Draw+0x132>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f3ec:	4932      	ldr	r1, [pc, #200]	; (800f4b8 <Measure_Elements_Draw+0x2e0>)
 800f3ee:	e7e1      	b.n	800f3b4 <Measure_Elements_Draw+0x1dc>
				case 7: if(Measure_Field&CIE_xy){
 800f3f0:	4a21      	ldr	r2, [pc, #132]	; (800f478 <Measure_Elements_Draw+0x2a0>)
 800f3f2:	8812      	ldrh	r2, [r2, #0]
 800f3f4:	0690      	lsls	r0, r2, #26
 800f3f6:	d589      	bpl.n	800f30c <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f3f8:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f3fc:	f300 80ca 	bgt.w	800f594 <Measure_Elements_Draw+0x3bc>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f400:	4b2b      	ldr	r3, [pc, #172]	; (800f4b0 <Measure_Elements_Draw+0x2d8>)
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	b9d3      	cbnz	r3, 800f43c <Measure_Elements_Draw+0x264>
 800f406:	4b2d      	ldr	r3, [pc, #180]	; (800f4bc <Measure_Elements_Draw+0x2e4>)
 800f408:	ed93 0a00 	vldr	s0, [r3]
 800f40c:	edd3 0a01 	vldr	s1, [r3, #4]
 800f410:	4a1c      	ldr	r2, [pc, #112]	; (800f484 <Measure_Elements_Draw+0x2ac>)
 800f412:	4b1d      	ldr	r3, [pc, #116]	; (800f488 <Measure_Elements_Draw+0x2b0>)
 800f414:	7812      	ldrb	r2, [r2, #0]
 800f416:	781b      	ldrb	r3, [r3, #0]
 800f418:	4621      	mov	r1, r4
 800f41a:	2014      	movs	r0, #20
 800f41c:	f005 fb3a 	bl	8014a94 <GUI_Text_xy_Measure>
									Y+=70;
 800f420:	f104 0346 	add.w	r3, r4, #70	; 0x46
 800f424:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f42a:	9200      	str	r2, [sp, #0]
 800f42c:	4619      	mov	r1, r3
 800f42e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f432:	200a      	movs	r0, #10
 800f434:	f00d f866 	bl	801c504 <TFT_DrawLine>
									Y+=10;
 800f438:	3450      	adds	r4, #80	; 0x50
 800f43a:	e766      	b.n	800f30a <Measure_Elements_Draw+0x132>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f43c:	4b20      	ldr	r3, [pc, #128]	; (800f4c0 <Measure_Elements_Draw+0x2e8>)
 800f43e:	e7e3      	b.n	800f408 <Measure_Elements_Draw+0x230>
				case 8: if(Measure_Field&CIE_Luv){
 800f440:	4a0d      	ldr	r2, [pc, #52]	; (800f478 <Measure_Elements_Draw+0x2a0>)
 800f442:	8812      	ldrh	r2, [r2, #0]
 800f444:	0651      	lsls	r1, r2, #25
 800f446:	f57f af61 	bpl.w	800f30c <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f44a:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f44e:	f300 80a1 	bgt.w	800f594 <Measure_Elements_Draw+0x3bc>
									GUI_Text_uv_Measure(20, Y, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 800f452:	491c      	ldr	r1, [pc, #112]	; (800f4c4 <Measure_Elements_Draw+0x2ec>)
 800f454:	4b0c      	ldr	r3, [pc, #48]	; (800f488 <Measure_Elements_Draw+0x2b0>)
 800f456:	4a0b      	ldr	r2, [pc, #44]	; (800f484 <Measure_Elements_Draw+0x2ac>)
 800f458:	edd1 0a01 	vldr	s1, [r1, #4]
 800f45c:	ed91 0a00 	vldr	s0, [r1]
 800f460:	781b      	ldrb	r3, [r3, #0]
 800f462:	7812      	ldrb	r2, [r2, #0]
 800f464:	4621      	mov	r1, r4
 800f466:	2014      	movs	r0, #20
 800f468:	f005 fbd6 	bl	8014c18 <GUI_Text_uv_Measure>
 800f46c:	e7d8      	b.n	800f420 <Measure_Elements_Draw+0x248>
 800f46e:	bf00      	nop
 800f470:	2000572b 	.word	0x2000572b
 800f474:	2000572c 	.word	0x2000572c
 800f478:	20005706 	.word	0x20005706
 800f47c:	20000ebc 	.word	0x20000ebc
 800f480:	20095ca0 	.word	0x20095ca0
 800f484:	20000ec1 	.word	0x20000ec1
 800f488:	20000ec0 	.word	0x20000ec0
 800f48c:	20095718 	.word	0x20095718
 800f490:	20095720 	.word	0x20095720
 800f494:	2009571c 	.word	0x2009571c
 800f498:	20095804 	.word	0x20095804
 800f49c:	20095b88 	.word	0x20095b88
 800f4a0:	20095a3c 	.word	0x20095a3c
 800f4a4:	20005730 	.word	0x20005730
 800f4a8:	20054940 	.word	0x20054940
 800f4ac:	20090ab6 	.word	0x20090ab6
 800f4b0:	20005704 	.word	0x20005704
 800f4b4:	2008f528 	.word	0x2008f528
 800f4b8:	2008f522 	.word	0x2008f522
 800f4bc:	2008f548 	.word	0x2008f548
 800f4c0:	2008f540 	.word	0x2008f540
 800f4c4:	2008f538 	.word	0x2008f538
				case 9: if(Measure_Field&CIE_Lab){
 800f4c8:	4a35      	ldr	r2, [pc, #212]	; (800f5a0 <Measure_Elements_Draw+0x3c8>)
 800f4ca:	8812      	ldrh	r2, [r2, #0]
 800f4cc:	0612      	lsls	r2, r2, #24
 800f4ce:	f57f af1d 	bpl.w	800f30c <Measure_Elements_Draw+0x134>
					if(Y+105 <= limit){
 800f4d2:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f4d6:	da5d      	bge.n	800f594 <Measure_Elements_Draw+0x3bc>
									GUI_Text_LAB_Measure(20, Y, colorimetry_LAB[0],colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 800f4d8:	4832      	ldr	r0, [pc, #200]	; (800f5a4 <Measure_Elements_Draw+0x3cc>)
 800f4da:	4933      	ldr	r1, [pc, #204]	; (800f5a8 <Measure_Elements_Draw+0x3d0>)
 800f4dc:	7800      	ldrb	r0, [r0, #0]
 800f4de:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f4e2:	f9b1 2000 	ldrsh.w	r2, [r1]
 800f4e6:	9002      	str	r0, [sp, #8]
 800f4e8:	4830      	ldr	r0, [pc, #192]	; (800f5ac <Measure_Elements_Draw+0x3d4>)
 800f4ea:	7800      	ldrb	r0, [r0, #0]
 800f4ec:	9001      	str	r0, [sp, #4]
 800f4ee:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800f4f2:	9100      	str	r1, [sp, #0]
 800f4f4:	2014      	movs	r0, #20
 800f4f6:	4621      	mov	r1, r4
 800f4f8:	f006 fb46 	bl	8015b88 <GUI_Text_LAB_Measure>
 800f4fc:	e768      	b.n	800f3d0 <Measure_Elements_Draw+0x1f8>
				case 10: if(Measure_Field&lambda_d){
 800f4fe:	4a28      	ldr	r2, [pc, #160]	; (800f5a0 <Measure_Elements_Draw+0x3c8>)
 800f500:	8812      	ldrh	r2, [r2, #0]
 800f502:	0590      	lsls	r0, r2, #22
 800f504:	f57f af02 	bpl.w	800f30c <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f508:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f50c:	da42      	bge.n	800f594 <Measure_Elements_Draw+0x3bc>
									GUI_Text_lambdaD_Measure(20, Y, lambda_d_Measure, exp_start, exp_set);
 800f50e:	4b28      	ldr	r3, [pc, #160]	; (800f5b0 <Measure_Elements_Draw+0x3d8>)
 800f510:	4a26      	ldr	r2, [pc, #152]	; (800f5ac <Measure_Elements_Draw+0x3d4>)
 800f512:	881b      	ldrh	r3, [r3, #0]
 800f514:	7812      	ldrb	r2, [r2, #0]
 800f516:	ee00 3a10 	vmov	s0, r3
 800f51a:	4b22      	ldr	r3, [pc, #136]	; (800f5a4 <Measure_Elements_Draw+0x3cc>)
 800f51c:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	4621      	mov	r1, r4
 800f524:	2014      	movs	r0, #20
 800f526:	f005 fd53 	bl	8014fd0 <GUI_Text_lambdaD_Measure>
 800f52a:	e68a      	b.n	800f242 <Measure_Elements_Draw+0x6a>
				case 11: if(Measure_Field&EbEr){
 800f52c:	4a1c      	ldr	r2, [pc, #112]	; (800f5a0 <Measure_Elements_Draw+0x3c8>)
 800f52e:	8812      	ldrh	r2, [r2, #0]
 800f530:	04d1      	lsls	r1, r2, #19
 800f532:	f57f aeeb 	bpl.w	800f30c <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f536:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f53a:	dc2b      	bgt.n	800f594 <Measure_Elements_Draw+0x3bc>
						Mode_EL ?	 GUI_Text_EbEr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set):GUI_Text_LbLr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set); 
 800f53c:	4b1d      	ldr	r3, [pc, #116]	; (800f5b4 <Measure_Elements_Draw+0x3dc>)
 800f53e:	481e      	ldr	r0, [pc, #120]	; (800f5b8 <Measure_Elements_Draw+0x3e0>)
 800f540:	491e      	ldr	r1, [pc, #120]	; (800f5bc <Measure_Elements_Draw+0x3e4>)
 800f542:	f893 e000 	ldrb.w	lr, [r3]
 800f546:	4a19      	ldr	r2, [pc, #100]	; (800f5ac <Measure_Elements_Draw+0x3d4>)
 800f548:	4b16      	ldr	r3, [pc, #88]	; (800f5a4 <Measure_Elements_Draw+0x3cc>)
 800f54a:	edd0 0a00 	vldr	s1, [r0]
 800f54e:	ed91 0a00 	vldr	s0, [r1]
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	7812      	ldrb	r2, [r2, #0]
 800f556:	4621      	mov	r1, r4
 800f558:	2014      	movs	r0, #20
 800f55a:	f1be 0f00 	cmp.w	lr, #0
 800f55e:	d002      	beq.n	800f566 <Measure_Elements_Draw+0x38e>
 800f560:	f005 ff38 	bl	80153d4 <GUI_Text_EbEr_Measure>
 800f564:	e75c      	b.n	800f420 <Measure_Elements_Draw+0x248>
 800f566:	f006 f8bd 	bl	80156e4 <GUI_Text_LbLr_Measure>
 800f56a:	e759      	b.n	800f420 <Measure_Elements_Draw+0x248>
				case 12: if(Measure_Field&SP_measure){
 800f56c:	4a0c      	ldr	r2, [pc, #48]	; (800f5a0 <Measure_Elements_Draw+0x3c8>)
 800f56e:	8812      	ldrh	r2, [r2, #0]
 800f570:	0492      	lsls	r2, r2, #18
 800f572:	f57f aecb 	bpl.w	800f30c <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f576:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f57a:	da0b      	bge.n	800f594 <Measure_Elements_Draw+0x3bc>
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
 800f57c:	4910      	ldr	r1, [pc, #64]	; (800f5c0 <Measure_Elements_Draw+0x3e8>)
 800f57e:	4b09      	ldr	r3, [pc, #36]	; (800f5a4 <Measure_Elements_Draw+0x3cc>)
 800f580:	4a0a      	ldr	r2, [pc, #40]	; (800f5ac <Measure_Elements_Draw+0x3d4>)
 800f582:	ed91 0a00 	vldr	s0, [r1]
 800f586:	781b      	ldrb	r3, [r3, #0]
 800f588:	7812      	ldrb	r2, [r2, #0]
 800f58a:	4621      	mov	r1, r4
 800f58c:	2014      	movs	r0, #20
 800f58e:	f006 fa35 	bl	80159fc <GUI_Text_S_P_Measure>
 800f592:	e656      	b.n	800f242 <Measure_Elements_Draw+0x6a>
							}else {screen_count++;}} break;
 800f594:	3301      	adds	r3, #1
 800f596:	702b      	strb	r3, [r5, #0]
 800f598:	e6b8      	b.n	800f30c <Measure_Elements_Draw+0x134>
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800f59a:	3601      	adds	r6, #1
 800f59c:	b2f6      	uxtb	r6, r6
 800f59e:	e621      	b.n	800f1e4 <Measure_Elements_Draw+0xc>
 800f5a0:	20005706 	.word	0x20005706
 800f5a4:	20000ec0 	.word	0x20000ec0
 800f5a8:	2008f51c 	.word	0x2008f51c
 800f5ac:	20000ec1 	.word	0x20000ec1
 800f5b0:	20095b84 	.word	0x20095b84
 800f5b4:	20000ebc 	.word	0x20000ebc
 800f5b8:	20095c9c 	.word	0x20095c9c
 800f5bc:	20095c98 	.word	0x20095c98
 800f5c0:	20095800 	.word	0x20095800

0800f5c4 <GUI_Information_Screen>:
	TFT_FillScreen_DMA(TFT_Red);

}

void GUI_Information_Screen()
{
 800f5c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f5c6:	4b1e      	ldr	r3, [pc, #120]	; (800f640 <GUI_Information_Screen+0x7c>)
 800f5c8:	4a1e      	ldr	r2, [pc, #120]	; (800f644 <GUI_Information_Screen+0x80>)
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	7812      	ldrb	r2, [r2, #0]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d034      	beq.n	800f63c <GUI_Information_Screen+0x78>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f5d2:	2063      	movs	r0, #99	; 0x63
 800f5d4:	f00c fdf4 	bl	801c1c0 <TFT_FillScreen_DMA>
		if(Language_status == En){
 800f5d8:	4b1b      	ldr	r3, [pc, #108]	; (800f648 <GUI_Information_Screen+0x84>)
 800f5da:	491c      	ldr	r1, [pc, #112]	; (800f64c <GUI_Information_Screen+0x88>)
 800f5dc:	781b      	ldrb	r3, [r3, #0]
 800f5de:	4a1c      	ldr	r2, [pc, #112]	; (800f650 <GUI_Information_Screen+0x8c>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f5e0:	8809      	ldrh	r1, [r1, #0]
 800f5e2:	7812      	ldrb	r2, [r2, #0]
 800f5e4:	4d1b      	ldr	r5, [pc, #108]	; (800f654 <GUI_Information_Screen+0x90>)
 800f5e6:	4c1c      	ldr	r4, [pc, #112]	; (800f658 <GUI_Information_Screen+0x94>)
		if(Language_status == En){
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	4b1c      	ldr	r3, [pc, #112]	; (800f65c <GUI_Information_Screen+0x98>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f5ec:	781b      	ldrb	r3, [r3, #0]
 800f5ee:	9100      	str	r1, [sp, #0]
 800f5f0:	f04f 0100 	mov.w	r1, #0
 800f5f4:	4608      	mov	r0, r1
		if(Language_status == En){
 800f5f6:	d110      	bne.n	800f61a <GUI_Information_Screen+0x56>
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f5f8:	f008 fc56 	bl	8017ea8 <GUI_TextEn_Info_Callibration>
			GUI_TextEn_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	4608      	mov	r0, r1
 800f600:	882b      	ldrh	r3, [r5, #0]
 800f602:	8822      	ldrh	r2, [r4, #0]
 800f604:	f008 fcd2 	bl	8017fac <GUI_TextEn_Info_Serial>
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800f608:	2100      	movs	r1, #0
 800f60a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f60e:	4608      	mov	r0, r1
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
			GUI_TextRu_Info_Ver(0, 0, VERSION);
		}
	}
}
 800f610:	b003      	add	sp, #12
 800f612:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800f616:	f008 bd3f 	b.w	8018098 <GUI_TextEn_Info_Ver>
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f61a:	f009 f92b 	bl	8018874 <GUI_TextRu_Info_Callibration>
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800f61e:	2100      	movs	r1, #0
 800f620:	4608      	mov	r0, r1
 800f622:	882b      	ldrh	r3, [r5, #0]
 800f624:	8822      	ldrh	r2, [r4, #0]
 800f626:	f009 f9e3 	bl	80189f0 <GUI_TextRu_Info_Serial>
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800f62a:	2100      	movs	r1, #0
 800f62c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f630:	4608      	mov	r0, r1
}
 800f632:	b003      	add	sp, #12
 800f634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800f638:	f009 ba54 	b.w	8018ae4 <GUI_TextRu_Info_Ver>
}
 800f63c:	b003      	add	sp, #12
 800f63e:	bd30      	pop	{r4, r5, pc}
 800f640:	2000022a 	.word	0x2000022a
 800f644:	20005701 	.word	0x20005701
 800f648:	20005703 	.word	0x20005703
 800f64c:	200959a8 	.word	0x200959a8
 800f650:	20095710 	.word	0x20095710
 800f654:	20095a50 	.word	0x20095a50
 800f658:	20095714 	.word	0x20095714
 800f65c:	20095724 	.word	0x20095724

0800f660 <GUI_SD_Write_Screen>:

void GUI_SD_Write_Screen()
{
 800f660:	b537      	push	{r0, r1, r2, r4, r5, lr}
	
	if(preGUI_screen_state != GUI_screen_state){
 800f662:	4b29      	ldr	r3, [pc, #164]	; (800f708 <GUI_SD_Write_Screen+0xa8>)
 800f664:	4d29      	ldr	r5, [pc, #164]	; (800f70c <GUI_SD_Write_Screen+0xac>)
 800f666:	781a      	ldrb	r2, [r3, #0]
 800f668:	7829      	ldrb	r1, [r5, #0]
 800f66a:	4291      	cmp	r1, r2
 800f66c:	d020      	beq.n	800f6b0 <GUI_SD_Write_Screen+0x50>
		pause = 1;
 800f66e:	4b28      	ldr	r3, [pc, #160]	; (800f710 <GUI_SD_Write_Screen+0xb0>)
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
		if(Language_status == En){
 800f670:	4c28      	ldr	r4, [pc, #160]	; (800f714 <GUI_SD_Write_Screen+0xb4>)
		pause = 1;
 800f672:	2201      	movs	r2, #1
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f674:	2063      	movs	r0, #99	; 0x63
		pause = 1;
 800f676:	701a      	strb	r2, [r3, #0]
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f678:	f00c fda2 	bl	801c1c0 <TFT_FillScreen_DMA>
		if(Language_status == En){
 800f67c:	7822      	ldrb	r2, [r4, #0]
 800f67e:	2a01      	cmp	r2, #1
			GUI_TextEn_WriteSD(80, 120);
 800f680:	f04f 0178 	mov.w	r1, #120	; 0x78
 800f684:	f04f 0050 	mov.w	r0, #80	; 0x50
		if(Language_status == En){
 800f688:	d13a      	bne.n	800f700 <GUI_SD_Write_Screen+0xa0>
			GUI_TextEn_WriteSD(80, 120);
 800f68a:	f008 fbd3 	bl	8017e34 <GUI_TextEn_WriteSD>
		}
		else
		{	
				 GUI_TextRu_WriteSD(80, 120);
		}
		if (SD_Detect == 0) {
 800f68e:	4b22      	ldr	r3, [pc, #136]	; (800f718 <GUI_SD_Write_Screen+0xb8>)
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	b96b      	cbnz	r3, 800f6b0 <GUI_SD_Write_Screen+0x50>
			Calculate_SD_Data(); 
 800f694:	f00a fce0 	bl	801a058 <Calculate_SD_Data>
			SD_Witer(sdfile_cnt, Language_status, Memory_Data_satus, Mode_EL, CRICQS_done);
 800f698:	7821      	ldrb	r1, [r4, #0]
 800f69a:	4c20      	ldr	r4, [pc, #128]	; (800f71c <GUI_SD_Write_Screen+0xbc>)
 800f69c:	4b20      	ldr	r3, [pc, #128]	; (800f720 <GUI_SD_Write_Screen+0xc0>)
 800f69e:	4a21      	ldr	r2, [pc, #132]	; (800f724 <GUI_SD_Write_Screen+0xc4>)
 800f6a0:	4821      	ldr	r0, [pc, #132]	; (800f728 <GUI_SD_Write_Screen+0xc8>)
 800f6a2:	7824      	ldrb	r4, [r4, #0]
 800f6a4:	781b      	ldrb	r3, [r3, #0]
 800f6a6:	7812      	ldrb	r2, [r2, #0]
 800f6a8:	8800      	ldrh	r0, [r0, #0]
 800f6aa:	9400      	str	r4, [sp, #0]
 800f6ac:	f00a fdc8 	bl	801a240 <SD_Witer>

		}
	}
	
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 800f6b0:	4c1e      	ldr	r4, [pc, #120]	; (800f72c <GUI_SD_Write_Screen+0xcc>)
 800f6b2:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f6b6:	f7f1 faab 	bl	8000c10 <__aeabi_d2f>
 800f6ba:	f44f 718c 	mov.w	r1, #280	; 0x118
 800f6be:	ee00 0a10 	vmov	s0, r0
 800f6c2:	2055      	movs	r0, #85	; 0x55
 800f6c4:	f003 fde6 	bl	8013294 <GUI_Bar_Measure>
	
	if(SDWr_Status_bar == 1){
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	4b19      	ldr	r3, [pc, #100]	; (800f730 <GUI_SD_Write_Screen+0xd0>)
 800f6cc:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f6d0:	f7f1 fa0e 	bl	8000af0 <__aeabi_dcmpeq>
 800f6d4:	b190      	cbz	r0, 800f6fc <GUI_SD_Write_Screen+0x9c>
			if(sdfile_cnt < 999){
 800f6d6:	4b14      	ldr	r3, [pc, #80]	; (800f728 <GUI_SD_Write_Screen+0xc8>)
 800f6d8:	881a      	ldrh	r2, [r3, #0]
 800f6da:	f240 31e6 	movw	r1, #998	; 0x3e6
 800f6de:	428a      	cmp	r2, r1
					sdfile_cnt++;
 800f6e0:	bf94      	ite	ls
 800f6e2:	3201      	addls	r2, #1
				}else{
					sdfile_cnt = 0;
 800f6e4:	2200      	movhi	r2, #0
 800f6e6:	801a      	strh	r2, [r3, #0]
				} 
			WriteSDFLASH_t(sdfile_cnt);  
 800f6e8:	8818      	ldrh	r0, [r3, #0]
 800f6ea:	2100      	movs	r1, #0
 800f6ec:	f00a fba4 	bl	8019e38 <WriteSDFLASH_t>
			pause = 0; 
 800f6f0:	4b07      	ldr	r3, [pc, #28]	; (800f710 <GUI_SD_Write_Screen+0xb0>)
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	701a      	strb	r2, [r3, #0]
			GUI_screen_state = Prev_Inf_Screen;
 800f6f6:	4b0f      	ldr	r3, [pc, #60]	; (800f734 <GUI_SD_Write_Screen+0xd4>)
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	702b      	strb	r3, [r5, #0]
	}

}
 800f6fc:	b003      	add	sp, #12
 800f6fe:	bd30      	pop	{r4, r5, pc}
				 GUI_TextRu_WriteSD(80, 120);
 800f700:	f009 f936 	bl	8018970 <GUI_TextRu_WriteSD>
 800f704:	e7c3      	b.n	800f68e <GUI_SD_Write_Screen+0x2e>
 800f706:	bf00      	nop
 800f708:	2000022a 	.word	0x2000022a
 800f70c:	20005701 	.word	0x20005701
 800f710:	20005728 	.word	0x20005728
 800f714:	20005703 	.word	0x20005703
 800f718:	20095c54 	.word	0x20095c54
 800f71c:	200056fc 	.word	0x200056fc
 800f720:	20000ebc 	.word	0x20000ebc
 800f724:	20000228 	.word	0x20000228
 800f728:	2000572e 	.word	0x2000572e
 800f72c:	20009760 	.word	0x20009760
 800f730:	3ff00000 	.word	0x3ff00000
 800f734:	20090ab5 	.word	0x20090ab5

0800f738 <GUI_Up_Panel>:


void GUI_Up_Panel()
{
	GUI_Battery_Level(0, 0, percentage_charge);
 800f738:	4b0f      	ldr	r3, [pc, #60]	; (800f778 <GUI_Up_Panel+0x40>)
{
 800f73a:	b507      	push	{r0, r1, r2, lr}
	GUI_Battery_Level(0, 0, percentage_charge);
 800f73c:	2100      	movs	r1, #0
 800f73e:	ed93 0b00 	vldr	d0, [r3]
 800f742:	4608      	mov	r0, r1
 800f744:	f006 fc1c 	bl	8015f80 <GUI_Battery_Level>
	if (Bluetooth == ON){
 800f748:	4b0c      	ldr	r3, [pc, #48]	; (800f77c <GUI_Up_Panel+0x44>)
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d106      	bne.n	800f75e <GUI_Up_Panel+0x26>
		GUI_Bluetooth_Logo(240, 2);
 800f750:	2102      	movs	r1, #2
 800f752:	20f0      	movs	r0, #240	; 0xf0
	} else
	{
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
	}
}
 800f754:	b003      	add	sp, #12
 800f756:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Bluetooth_Logo(240, 2);
 800f75a:	f002 be03 	b.w	8012364 <GUI_Bluetooth_Logo>
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
 800f75e:	2363      	movs	r3, #99	; 0x63
 800f760:	9300      	str	r3, [sp, #0]
 800f762:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f766:	2323      	movs	r3, #35	; 0x23
 800f768:	2101      	movs	r1, #1
 800f76a:	20ef      	movs	r0, #239	; 0xef
 800f76c:	f00c ff27 	bl	801c5be <TFT_FillRectangle>
}
 800f770:	b003      	add	sp, #12
 800f772:	f85d fb04 	ldr.w	pc, [sp], #4
 800f776:	bf00      	nop
 800f778:	200905c8 	.word	0x200905c8
 800f77c:	20090aba 	.word	0x20090aba

0800f780 <GUI_Down_Panel>:

void GUI_Down_Panel()
{		
 800f780:	b508      	push	{r3, lr}
	GUI_Button_Settings(1, 426);
 800f782:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f786:	2001      	movs	r0, #1
 800f788:	f002 fe3e 	bl	8012408 <GUI_Button_Settings>
	GUI_Button_SD_Card(55, 426, !SD_Detect);
 800f78c:	4b1b      	ldr	r3, [pc, #108]	; (800f7fc <GUI_Down_Panel+0x7c>)
 800f78e:	781a      	ldrb	r2, [r3, #0]
 800f790:	fab2 f282 	clz	r2, r2
 800f794:	0952      	lsrs	r2, r2, #5
 800f796:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f79a:	2037      	movs	r0, #55	; 0x37
 800f79c:	f002 ffee 	bl	801277c <GUI_Button_SD_Card>
	GUI_Button_Measure_Start_Pause(109, 426);
 800f7a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f7a4:	206d      	movs	r0, #109	; 0x6d
 800f7a6:	f003 f8b5 	bl	8012914 <GUI_Button_Measure_Start_Pause>
	
	if(GUI_screen_state >= DataSet1_Screen)
 800f7aa:	4b15      	ldr	r3, [pc, #84]	; (800f800 <GUI_Down_Panel+0x80>)
 800f7ac:	781b      	ldrb	r3, [r3, #0]
 800f7ae:	2b06      	cmp	r3, #6
 800f7b0:	d90b      	bls.n	800f7ca <GUI_Down_Panel+0x4a>
	{
		GUI_Button_Down(163, 426);
 800f7b2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f7b6:	20a3      	movs	r0, #163	; 0xa3
 800f7b8:	f002 fe64 	bl	8012484 <GUI_Button_Down>
		GUI_Button_TFT_On_Off(217, 426);
 800f7bc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f7c0:	20d9      	movs	r0, #217	; 0xd9
	else
	{
		GUI_Button_TFT_Rotate(163, 426);
		GUI_Button_Right(217, 426);
	}
}
 800f7c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_TFT_On_Off(217, 426);
 800f7c6:	f002 bf36 	b.w	8012636 <GUI_Button_TFT_On_Off>
	}else if(GUI_screen_state <= Measure3_Screen)
 800f7ca:	2b03      	cmp	r3, #3
 800f7cc:	d810      	bhi.n	800f7f0 <GUI_Down_Panel+0x70>
		GUI_Button_Down_Active(163, 426, (screen_count > 0));
 800f7ce:	4b0d      	ldr	r3, [pc, #52]	; (800f804 <GUI_Down_Panel+0x84>)
 800f7d0:	781a      	ldrb	r2, [r3, #0]
 800f7d2:	3200      	adds	r2, #0
 800f7d4:	bf18      	it	ne
 800f7d6:	2201      	movne	r2, #1
 800f7d8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f7dc:	20a3      	movs	r0, #163	; 0xa3
 800f7de:	f002 fe96 	bl	801250e <GUI_Button_Down_Active>
		GUI_Button_Right(217, 426);
 800f7e2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f7e6:	20d9      	movs	r0, #217	; 0xd9
}
 800f7e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_Right(217, 426);
 800f7ec:	f002 bed9 	b.w	80125a2 <GUI_Button_Right>
		GUI_Button_TFT_Rotate(163, 426);
 800f7f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f7f4:	20a3      	movs	r0, #163	; 0xa3
 800f7f6:	f002 ff4c 	bl	8012692 <GUI_Button_TFT_Rotate>
 800f7fa:	e7f2      	b.n	800f7e2 <GUI_Down_Panel+0x62>
 800f7fc:	20095c54 	.word	0x20095c54
 800f800:	20005701 	.word	0x20005701
 800f804:	2000572b 	.word	0x2000572b

0800f808 <GUI_Panels>:

void GUI_Panels()
{
 800f808:	b507      	push	{r0, r1, r2, lr}
	if((GUI_screen_state == Measure_Screen && (preGUI_screen_state !=Measure2_Screen 
 800f80a:	4b1c      	ldr	r3, [pc, #112]	; (800f87c <GUI_Panels+0x74>)
 800f80c:	781a      	ldrb	r2, [r3, #0]
 800f80e:	2a01      	cmp	r2, #1
 800f810:	d121      	bne.n	800f856 <GUI_Panels+0x4e>
 800f812:	4b1b      	ldr	r3, [pc, #108]	; (800f880 <GUI_Panels+0x78>)
 800f814:	7819      	ldrb	r1, [r3, #0]
 800f816:	2902      	cmp	r1, #2
 800f818:	d125      	bne.n	800f866 <GUI_Panels+0x5e>
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	2b03      	cmp	r3, #3
 800f81e:	d122      	bne.n	800f866 <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
			|| (preGUI_screen_state >= DataSet1_Screen && GUI_screen_state < DataSet1_Screen)
 800f820:	4b17      	ldr	r3, [pc, #92]	; (800f880 <GUI_Panels+0x78>)
 800f822:	7819      	ldrb	r1, [r3, #0]
 800f824:	2906      	cmp	r1, #6
 800f826:	d901      	bls.n	800f82c <GUI_Panels+0x24>
 800f828:	2a06      	cmp	r2, #6
 800f82a:	d91c      	bls.n	800f866 <GUI_Panels+0x5e>
			|| (preGUI_screen_state == Information_Screen) || ((GUI_screen_state == Color_Rendition_Screen) && preGUI_screen_state < Color_Rendition_Screen))
 800f82c:	7819      	ldrb	r1, [r3, #0]
 800f82e:	2911      	cmp	r1, #17
 800f830:	d019      	beq.n	800f866 <GUI_Panels+0x5e>
 800f832:	2a06      	cmp	r2, #6
 800f834:	d102      	bne.n	800f83c <GUI_Panels+0x34>
 800f836:	781b      	ldrb	r3, [r3, #0]
 800f838:	2b05      	cmp	r3, #5
 800f83a:	d914      	bls.n	800f866 <GUI_Panels+0x5e>
		GUI_Up_Panel();
		GUI_Down_Panel();
	} 
	else 
	{
		TFT_FillRectangle(0, 40, 271, 425, TFT_Black_Bkgr);
 800f83c:	2363      	movs	r3, #99	; 0x63
 800f83e:	9300      	str	r3, [sp, #0]
 800f840:	f240 120f 	movw	r2, #271	; 0x10f
 800f844:	f240 13a9 	movw	r3, #425	; 0x1a9
 800f848:	2128      	movs	r1, #40	; 0x28
 800f84a:	2000      	movs	r0, #0
 800f84c:	f00c feb7 	bl	801c5be <TFT_FillRectangle>
	}
}
 800f850:	b003      	add	sp, #12
 800f852:	f85d fb04 	ldr.w	pc, [sp], #4
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800f856:	2a04      	cmp	r2, #4
 800f858:	d005      	beq.n	800f866 <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
 800f85a:	2a06      	cmp	r2, #6
 800f85c:	d9e0      	bls.n	800f820 <GUI_Panels+0x18>
 800f85e:	4b08      	ldr	r3, [pc, #32]	; (800f880 <GUI_Panels+0x78>)
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	2b06      	cmp	r3, #6
 800f864:	d8dc      	bhi.n	800f820 <GUI_Panels+0x18>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f866:	2063      	movs	r0, #99	; 0x63
 800f868:	f00c fcaa 	bl	801c1c0 <TFT_FillScreen_DMA>
		GUI_Up_Panel();
 800f86c:	f7ff ff64 	bl	800f738 <GUI_Up_Panel>
}
 800f870:	b003      	add	sp, #12
 800f872:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Down_Panel();
 800f876:	f7ff bf83 	b.w	800f780 <GUI_Down_Panel>
 800f87a:	bf00      	nop
 800f87c:	20005701 	.word	0x20005701
 800f880:	2000022a 	.word	0x2000022a

0800f884 <GUI_DataSet1_Screen>:
{
 800f884:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 800f886:	4b28      	ldr	r3, [pc, #160]	; (800f928 <GUI_DataSet1_Screen+0xa4>)
 800f888:	4c28      	ldr	r4, [pc, #160]	; (800f92c <GUI_DataSet1_Screen+0xa8>)
 800f88a:	4d29      	ldr	r5, [pc, #164]	; (800f930 <GUI_DataSet1_Screen+0xac>)
 800f88c:	2202      	movs	r2, #2
 800f88e:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Mode_EL_Old != Mode_EL || Language_status_prev != Language_status){
 800f890:	4b28      	ldr	r3, [pc, #160]	; (800f934 <GUI_DataSet1_Screen+0xb0>)
 800f892:	4a29      	ldr	r2, [pc, #164]	; (800f938 <GUI_DataSet1_Screen+0xb4>)
 800f894:	781b      	ldrb	r3, [r3, #0]
 800f896:	7812      	ldrb	r2, [r2, #0]
 800f898:	429a      	cmp	r2, r3
 800f89a:	4a28      	ldr	r2, [pc, #160]	; (800f93c <GUI_DataSet1_Screen+0xb8>)
 800f89c:	4b28      	ldr	r3, [pc, #160]	; (800f940 <GUI_DataSet1_Screen+0xbc>)
 800f89e:	d107      	bne.n	800f8b0 <GUI_DataSet1_Screen+0x2c>
 800f8a0:	7810      	ldrb	r0, [r2, #0]
 800f8a2:	7821      	ldrb	r1, [r4, #0]
 800f8a4:	4288      	cmp	r0, r1
 800f8a6:	d103      	bne.n	800f8b0 <GUI_DataSet1_Screen+0x2c>
 800f8a8:	7818      	ldrb	r0, [r3, #0]
 800f8aa:	7829      	ldrb	r1, [r5, #0]
 800f8ac:	4288      	cmp	r0, r1
 800f8ae:	d027      	beq.n	800f900 <GUI_DataSet1_Screen+0x7c>
		Mode_EL_Old = Mode_EL;
 800f8b0:	7821      	ldrb	r1, [r4, #0]
 800f8b2:	7011      	strb	r1, [r2, #0]
		Language_status_prev = Language_status;
 800f8b4:	782a      	ldrb	r2, [r5, #0]
 800f8b6:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800f8b8:	f7ff ffa6 	bl	800f808 <GUI_Panels>
		Prev_Inf_Screen2 = DataSet1_Screen;
 800f8bc:	4b21      	ldr	r3, [pc, #132]	; (800f944 <GUI_DataSet1_Screen+0xc0>)
 800f8be:	2207      	movs	r2, #7
 800f8c0:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800f8c2:	782b      	ldrb	r3, [r5, #0]
 800f8c4:	bb0b      	cbnz	r3, 800f90a <GUI_DataSet1_Screen+0x86>
			GUI_OptionMenuRu();
 800f8c6:	f7ff fb7b 	bl	800efc0 <GUI_OptionMenuRu>
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800f8ca:	7823      	ldrb	r3, [r4, #0]
 800f8cc:	f240 1151 	movw	r1, #337	; 0x151
 800f8d0:	200a      	movs	r0, #10
 800f8d2:	b1bb      	cbz	r3, 800f904 <GUI_DataSet1_Screen+0x80>
 800f8d4:	f008 fe48 	bl	8018568 <GUI_TextRu_Illuminance>
		GUI_CheckBox(200, 327, Measure_Field&Illuminance);
 800f8d8:	4b1b      	ldr	r3, [pc, #108]	; (800f948 <GUI_DataSet1_Screen+0xc4>)
 800f8da:	881a      	ldrh	r2, [r3, #0]
 800f8dc:	f240 1147 	movw	r1, #327	; 0x147
 800f8e0:	f002 0201 	and.w	r2, r2, #1
 800f8e4:	20c8      	movs	r0, #200	; 0xc8
 800f8e6:	f003 fabb 	bl	8012e60 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800f8ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f8ee:	9300      	str	r3, [sp, #0]
 800f8f0:	f240 1379 	movw	r3, #377	; 0x179
 800f8f4:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	200a      	movs	r0, #10
 800f8fc:	f00c fe02 	bl	801c504 <TFT_DrawLine>
}
 800f900:	b003      	add	sp, #12
 800f902:	bd30      	pop	{r4, r5, pc}
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800f904:	f009 fcae 	bl	8019264 <GUI_TextRu_Luminance>
 800f908:	e7e6      	b.n	800f8d8 <GUI_DataSet1_Screen+0x54>
		else if (Language_status == En) {
 800f90a:	2b01      	cmp	r3, #1
 800f90c:	d1e4      	bne.n	800f8d8 <GUI_DataSet1_Screen+0x54>
			GUI_OptionMenuEn();
 800f90e:	f7ff fbc7 	bl	800f0a0 <GUI_OptionMenuEn>
			Mode_EL ? GUI_TextEn_Illuminance(10, 339):GUI_TextEn_Luminance(10, 339);
 800f912:	7823      	ldrb	r3, [r4, #0]
 800f914:	f240 1153 	movw	r1, #339	; 0x153
 800f918:	200a      	movs	r0, #10
 800f91a:	b113      	cbz	r3, 800f922 <GUI_DataSet1_Screen+0x9e>
 800f91c:	f007 feac 	bl	8017678 <GUI_TextEn_Illuminance>
 800f920:	e7da      	b.n	800f8d8 <GUI_DataSet1_Screen+0x54>
 800f922:	f007 fe53 	bl	80175cc <GUI_TextEn_Luminance>
 800f926:	e7d7      	b.n	800f8d8 <GUI_DataSet1_Screen+0x54>
 800f928:	20000231 	.word	0x20000231
 800f92c:	20000ebc 	.word	0x20000ebc
 800f930:	20005703 	.word	0x20005703
 800f934:	2000022a 	.word	0x2000022a
 800f938:	20005701 	.word	0x20005701
 800f93c:	20090abb 	.word	0x20090abb
 800f940:	20090ab4 	.word	0x20090ab4
 800f944:	20091058 	.word	0x20091058
 800f948:	20005706 	.word	0x20005706

0800f94c <GUI_DataSet2_Screen>:
{
 800f94c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f94e:	4b66      	ldr	r3, [pc, #408]	; (800fae8 <GUI_DataSet2_Screen+0x19c>)
 800f950:	4a66      	ldr	r2, [pc, #408]	; (800faec <GUI_DataSet2_Screen+0x1a0>)
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	7812      	ldrb	r2, [r2, #0]
 800f956:	429a      	cmp	r2, r3
 800f958:	f000 80c3 	beq.w	800fae2 <GUI_DataSet2_Screen+0x196>
			GUI_Panels();
 800f95c:	f7ff ff54 	bl	800f808 <GUI_Panels>
			if(Language_status == Ru){
 800f960:	4b63      	ldr	r3, [pc, #396]	; (800faf0 <GUI_DataSet2_Screen+0x1a4>)
 800f962:	781b      	ldrb	r3, [r3, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d172      	bne.n	800fa4e <GUI_DataSet2_Screen+0x102>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800f968:	4b62      	ldr	r3, [pc, #392]	; (800faf4 <GUI_DataSet2_Screen+0x1a8>)
 800f96a:	781b      	ldrb	r3, [r3, #0]
 800f96c:	2152      	movs	r1, #82	; 0x52
 800f96e:	2012      	movs	r0, #18
 800f970:	2b00      	cmp	r3, #0
 800f972:	d069      	beq.n	800fa48 <GUI_DataSet2_Screen+0xfc>
 800f974:	f009 fc0c 	bl	8019190 <GUI_TextRu_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800f978:	4c5f      	ldr	r4, [pc, #380]	; (800faf8 <GUI_DataSet2_Screen+0x1ac>)
 800f97a:	8822      	ldrh	r2, [r4, #0]
 800f97c:	2146      	movs	r1, #70	; 0x46
 800f97e:	f002 0202 	and.w	r2, r2, #2
 800f982:	20c8      	movs	r0, #200	; 0xc8
 800f984:	f003 fa6c 	bl	8012e60 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f988:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f98c:	2378      	movs	r3, #120	; 0x78
 800f98e:	4619      	mov	r1, r3
 800f990:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f994:	200a      	movs	r0, #10
 800f996:	9500      	str	r5, [sp, #0]
 800f998:	f00c fdb4 	bl	801c504 <TFT_DrawLine>
				GUI_TextRu_PPF(10, 145);
 800f99c:	2191      	movs	r1, #145	; 0x91
 800f99e:	200a      	movs	r0, #10
 800f9a0:	f008 fe4c 	bl	801863c <GUI_TextRu_PPF>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800f9a4:	8822      	ldrh	r2, [r4, #0]
 800f9a6:	2185      	movs	r1, #133	; 0x85
 800f9a8:	f002 0204 	and.w	r2, r2, #4
 800f9ac:	20c8      	movs	r0, #200	; 0xc8
 800f9ae:	f003 fa57 	bl	8012e60 <GUI_CheckBox>
				GUI_TextRu_PPF_RGB(10, 209);
 800f9b2:	21d1      	movs	r1, #209	; 0xd1
 800f9b4:	200a      	movs	r0, #10
 800f9b6:	f008 fe65 	bl	8018684 <GUI_TextRu_PPF_RGB>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800f9ba:	8822      	ldrh	r2, [r4, #0]
 800f9bc:	21c6      	movs	r1, #198	; 0xc6
 800f9be:	f002 0208 	and.w	r2, r2, #8
 800f9c2:	20c8      	movs	r0, #200	; 0xc8
 800f9c4:	f003 fa4c 	bl	8012e60 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f9c8:	23f8      	movs	r3, #248	; 0xf8
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	200a      	movs	r0, #10
 800f9ce:	9500      	str	r5, [sp, #0]
 800f9d0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f9d4:	f00c fd96 	bl	801c504 <TFT_DrawLine>
				GUI_TextRu_CCT(20, 275);
 800f9d8:	f240 1113 	movw	r1, #275	; 0x113
 800f9dc:	2014      	movs	r0, #20
 800f9de:	f009 f8cd 	bl	8018b7c <GUI_TextRu_CCT>
				GUI_CheckBox(200, 263, Measure_Field&CCT);
 800f9e2:	8822      	ldrh	r2, [r4, #0]
 800f9e4:	f240 1107 	movw	r1, #263	; 0x107
 800f9e8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800f9ec:	20c8      	movs	r0, #200	; 0xc8
 800f9ee:	f003 fa37 	bl	8012e60 <GUI_CheckBox>
				TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f9f2:	f240 1339 	movw	r3, #313	; 0x139
 800f9f6:	4619      	mov	r1, r3
 800f9f8:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f9fc:	9500      	str	r5, [sp, #0]
 800f9fe:	200a      	movs	r0, #10
 800fa00:	f00c fd80 	bl	801c504 <TFT_DrawLine>
				GUI_Text_deltaE(20, 337);
 800fa04:	f240 1151 	movw	r1, #337	; 0x151
 800fa08:	2014      	movs	r0, #20
 800fa0a:	f007 f8e7 	bl	8016bdc <GUI_Text_deltaE>
				GUI_CheckBox(200, 327, Measure_Field&delta_E);
 800fa0e:	8822      	ldrh	r2, [r4, #0]
 800fa10:	f240 1147 	movw	r1, #327	; 0x147
 800fa14:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800fa18:	20c8      	movs	r0, #200	; 0xc8
 800fa1a:	f003 fa21 	bl	8012e60 <GUI_CheckBox>
				TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fa1e:	f240 1379 	movw	r3, #377	; 0x179
 800fa22:	4619      	mov	r1, r3
 800fa24:	9500      	str	r5, [sp, #0]
 800fa26:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fa2a:	200a      	movs	r0, #10
 800fa2c:	f00c fd6a 	bl	801c504 <TFT_DrawLine>
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800fa30:	8822      	ldrh	r2, [r4, #0]
 800fa32:	2300      	movs	r3, #0
 800fa34:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800fa38:	f240 1147 	movw	r1, #327	; 0x147
 800fa3c:	2082      	movs	r0, #130	; 0x82
}
 800fa3e:	b003      	add	sp, #12
 800fa40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800fa44:	f003 b8ec 	b.w	8012c20 <GUI_Button_Measure_deltaE_Small>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800fa48:	f009 fc54 	bl	80192f4 <GUI_TextRu_Radiance>
 800fa4c:	e794      	b.n	800f978 <GUI_DataSet2_Screen+0x2c>
			else if(Language_status == En){
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d147      	bne.n	800fae2 <GUI_DataSet2_Screen+0x196>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800fa52:	4d28      	ldr	r5, [pc, #160]	; (800faf4 <GUI_DataSet2_Screen+0x1a8>)
 800fa54:	782a      	ldrb	r2, [r5, #0]
 800fa56:	2154      	movs	r1, #84	; 0x54
 800fa58:	2012      	movs	r0, #18
 800fa5a:	2a00      	cmp	r2, #0
 800fa5c:	d03b      	beq.n	800fad6 <GUI_DataSet2_Screen+0x18a>
 800fa5e:	f007 fba1 	bl	80171a4 <GUI_TextEn_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800fa62:	4c25      	ldr	r4, [pc, #148]	; (800faf8 <GUI_DataSet2_Screen+0x1ac>)
 800fa64:	8822      	ldrh	r2, [r4, #0]
 800fa66:	2146      	movs	r1, #70	; 0x46
 800fa68:	f002 0202 	and.w	r2, r2, #2
 800fa6c:	20c8      	movs	r0, #200	; 0xc8
 800fa6e:	f003 f9f7 	bl	8012e60 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800fa72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa76:	9300      	str	r3, [sp, #0]
 800fa78:	2378      	movs	r3, #120	; 0x78
 800fa7a:	4619      	mov	r1, r3
 800fa7c:	200a      	movs	r0, #10
 800fa7e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fa82:	f00c fd3f 	bl	801c504 <TFT_DrawLine>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800fa86:	782b      	ldrb	r3, [r5, #0]
 800fa88:	2193      	movs	r1, #147	; 0x93
 800fa8a:	200a      	movs	r0, #10
 800fa8c:	b333      	cbz	r3, 800fadc <GUI_DataSet2_Screen+0x190>
 800fa8e:	f007 fe89 	bl	80177a4 <GUI_TextEn_PPFD>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800fa92:	8822      	ldrh	r2, [r4, #0]
 800fa94:	2185      	movs	r1, #133	; 0x85
 800fa96:	f002 0204 	and.w	r2, r2, #4
 800fa9a:	20c8      	movs	r0, #200	; 0xc8
 800fa9c:	f003 f9e0 	bl	8012e60 <GUI_CheckBox>
				GUI_TextEn_B_G_R_FR(10, 211);
 800faa0:	21d3      	movs	r1, #211	; 0xd3
 800faa2:	200a      	movs	r0, #10
 800faa4:	f007 ff38 	bl	8017918 <GUI_TextEn_B_G_R_FR>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800faa8:	8822      	ldrh	r2, [r4, #0]
 800faaa:	21c6      	movs	r1, #198	; 0xc6
 800faac:	f002 0208 	and.w	r2, r2, #8
 800fab0:	20c8      	movs	r0, #200	; 0xc8
 800fab2:	f003 f9d5 	bl	8012e60 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800fab6:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800faba:	23f8      	movs	r3, #248	; 0xf8
 800fabc:	4619      	mov	r1, r3
 800fabe:	9500      	str	r5, [sp, #0]
 800fac0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fac4:	200a      	movs	r0, #10
 800fac6:	f00c fd1d 	bl	801c504 <TFT_DrawLine>
				GUI_TextEn_CCT(20, 277);
 800faca:	f240 1115 	movw	r1, #277	; 0x115
 800face:	2014      	movs	r0, #20
 800fad0:	f007 ff6a 	bl	80179a8 <GUI_TextEn_CCT>
 800fad4:	e785      	b.n	800f9e2 <GUI_DataSet2_Screen+0x96>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800fad6:	f007 fb17 	bl	8017108 <GUI_TextEn_Radiance>
 800fada:	e7c2      	b.n	800fa62 <GUI_DataSet2_Screen+0x116>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800fadc:	f007 fe8e 	bl	80177fc <GUI_TextEn_PPL>
 800fae0:	e7d7      	b.n	800fa92 <GUI_DataSet2_Screen+0x146>
}
 800fae2:	b003      	add	sp, #12
 800fae4:	bd30      	pop	{r4, r5, pc}
 800fae6:	bf00      	nop
 800fae8:	2000022a 	.word	0x2000022a
 800faec:	20005701 	.word	0x20005701
 800faf0:	20005703 	.word	0x20005703
 800faf4:	20000ebc 	.word	0x20000ebc
 800faf8:	20005706 	.word	0x20005706

0800fafc <GUI_DataSet3_Screen>:
{
 800fafc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fafe:	4b35      	ldr	r3, [pc, #212]	; (800fbd4 <GUI_DataSet3_Screen+0xd8>)
 800fb00:	4a35      	ldr	r2, [pc, #212]	; (800fbd8 <GUI_DataSet3_Screen+0xdc>)
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	7812      	ldrb	r2, [r2, #0]
 800fb06:	429a      	cmp	r2, r3
 800fb08:	d061      	beq.n	800fbce <GUI_DataSet3_Screen+0xd2>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800fb0a:	4c34      	ldr	r4, [pc, #208]	; (800fbdc <GUI_DataSet3_Screen+0xe0>)
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800fb0c:	4e34      	ldr	r6, [pc, #208]	; (800fbe0 <GUI_DataSet3_Screen+0xe4>)
		GUI_Panels();
 800fb0e:	f7ff fe7b 	bl	800f808 <GUI_Panels>
		GUI_Text_CIE_XYZ(20, 82);
 800fb12:	2152      	movs	r1, #82	; 0x52
 800fb14:	2014      	movs	r0, #20
 800fb16:	f006 fc95 	bl	8016444 <GUI_Text_CIE_XYZ>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800fb1a:	8822      	ldrh	r2, [r4, #0]
 800fb1c:	2146      	movs	r1, #70	; 0x46
 800fb1e:	f002 0210 	and.w	r2, r2, #16
 800fb22:	20c8      	movs	r0, #200	; 0xc8
 800fb24:	f003 f99c 	bl	8012e60 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800fb28:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800fb2c:	2378      	movs	r3, #120	; 0x78
 800fb2e:	4619      	mov	r1, r3
 800fb30:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fb34:	200a      	movs	r0, #10
 800fb36:	9500      	str	r5, [sp, #0]
 800fb38:	f00c fce4 	bl	801c504 <TFT_DrawLine>
		GUI_Text_CIE_xy(20, 145);
 800fb3c:	2191      	movs	r1, #145	; 0x91
 800fb3e:	2014      	movs	r0, #20
 800fb40:	f006 ff2c 	bl	801699c <GUI_Text_CIE_xy>
		GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 800fb44:	8822      	ldrh	r2, [r4, #0]
 800fb46:	2185      	movs	r1, #133	; 0x85
 800fb48:	f002 0220 	and.w	r2, r2, #32
 800fb4c:	20c8      	movs	r0, #200	; 0xc8
 800fb4e:	f003 f987 	bl	8012e60 <GUI_CheckBox>
		GUI_Text_CIE_xy_1931(35, 209);
 800fb52:	21d1      	movs	r1, #209	; 0xd1
 800fb54:	2023      	movs	r0, #35	; 0x23
 800fb56:	f006 fcaf 	bl	80164b8 <GUI_Text_CIE_xy_1931>
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800fb5a:	8823      	ldrh	r3, [r4, #0]
 800fb5c:	7832      	ldrb	r2, [r6, #0]
 800fb5e:	f003 0320 	and.w	r3, r3, #32
 800fb62:	f002 0201 	and.w	r2, r2, #1
 800fb66:	21c6      	movs	r1, #198	; 0xc6
 800fb68:	20c8      	movs	r0, #200	; 0xc8
 800fb6a:	f003 f9ba 	bl	8012ee2 <GUI_RadioBox>
		GUI_Text_CIE_xy_1964(35, 275);
 800fb6e:	f240 1113 	movw	r1, #275	; 0x113
 800fb72:	2023      	movs	r0, #35	; 0x23
 800fb74:	f006 fd00 	bl	8016578 <GUI_Text_CIE_xy_1964>
		GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 800fb78:	7832      	ldrb	r2, [r6, #0]
 800fb7a:	8823      	ldrh	r3, [r4, #0]
 800fb7c:	43d2      	mvns	r2, r2
 800fb7e:	f003 0320 	and.w	r3, r3, #32
 800fb82:	f002 0201 	and.w	r2, r2, #1
 800fb86:	f240 1107 	movw	r1, #263	; 0x107
 800fb8a:	20c8      	movs	r0, #200	; 0xc8
 800fb8c:	f003 f9a9 	bl	8012ee2 <GUI_RadioBox>
		TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800fb90:	f240 1339 	movw	r3, #313	; 0x139
 800fb94:	4619      	mov	r1, r3
 800fb96:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fb9a:	200a      	movs	r0, #10
 800fb9c:	9500      	str	r5, [sp, #0]
 800fb9e:	f00c fcb1 	bl	801c504 <TFT_DrawLine>
		GUI_Text_CIE_Luv(20, 337);
 800fba2:	f240 1151 	movw	r1, #337	; 0x151
 800fba6:	2014      	movs	r0, #20
 800fba8:	f006 fd46 	bl	8016638 <GUI_Text_CIE_Luv>
		GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 800fbac:	8822      	ldrh	r2, [r4, #0]
 800fbae:	f240 1147 	movw	r1, #327	; 0x147
 800fbb2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800fbb6:	20c8      	movs	r0, #200	; 0xc8
 800fbb8:	f003 f952 	bl	8012e60 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fbbc:	f240 1379 	movw	r3, #377	; 0x179
 800fbc0:	9500      	str	r5, [sp, #0]
 800fbc2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fbc6:	4619      	mov	r1, r3
 800fbc8:	200a      	movs	r0, #10
 800fbca:	f00c fc9b 	bl	801c504 <TFT_DrawLine>
}
 800fbce:	b002      	add	sp, #8
 800fbd0:	bd70      	pop	{r4, r5, r6, pc}
 800fbd2:	bf00      	nop
 800fbd4:	2000022a 	.word	0x2000022a
 800fbd8:	20005701 	.word	0x20005701
 800fbdc:	20005706 	.word	0x20005706
 800fbe0:	20005704 	.word	0x20005704

0800fbe4 <GUI_DataSet4_Screen>:
{
 800fbe4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fbe6:	4b4b      	ldr	r3, [pc, #300]	; (800fd14 <GUI_DataSet4_Screen+0x130>)
 800fbe8:	4a4b      	ldr	r2, [pc, #300]	; (800fd18 <GUI_DataSet4_Screen+0x134>)
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	7812      	ldrb	r2, [r2, #0]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	f000 808b 	beq.w	800fd0a <GUI_DataSet4_Screen+0x126>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800fbf4:	4c49      	ldr	r4, [pc, #292]	; (800fd1c <GUI_DataSet4_Screen+0x138>)
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800fbf6:	4d4a      	ldr	r5, [pc, #296]	; (800fd20 <GUI_DataSet4_Screen+0x13c>)
		GUI_Panels();
 800fbf8:	f7ff fe06 	bl	800f808 <GUI_Panels>
		GUI_Text_CIE_Lab(20, 80);
 800fbfc:	2150      	movs	r1, #80	; 0x50
 800fbfe:	2014      	movs	r0, #20
 800fc00:	f006 fd68 	bl	80166d4 <GUI_Text_CIE_Lab>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800fc04:	8822      	ldrh	r2, [r4, #0]
 800fc06:	2141      	movs	r1, #65	; 0x41
 800fc08:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800fc0c:	20c8      	movs	r0, #200	; 0xc8
 800fc0e:	f003 f927 	bl	8012e60 <GUI_CheckBox>
		GUI_Text_A(40, 115);
 800fc12:	2173      	movs	r1, #115	; 0x73
 800fc14:	2028      	movs	r0, #40	; 0x28
 800fc16:	f006 fe05 	bl	8016824 <GUI_Text_A>
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800fc1a:	8823      	ldrh	r3, [r4, #0]
 800fc1c:	782a      	ldrb	r2, [r5, #0]
 800fc1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc22:	f002 0201 	and.w	r2, r2, #1
 800fc26:	216c      	movs	r1, #108	; 0x6c
 800fc28:	20c8      	movs	r0, #200	; 0xc8
 800fc2a:	f003 f95a 	bl	8012ee2 <GUI_RadioBox>
		GUI_Text_D65(40, 150);
 800fc2e:	2196      	movs	r1, #150	; 0x96
 800fc30:	2028      	movs	r0, #40	; 0x28
 800fc32:	f006 fe0d 	bl	8016850 <GUI_Text_D65>
		GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 800fc36:	8823      	ldrh	r3, [r4, #0]
 800fc38:	782a      	ldrb	r2, [r5, #0]
 800fc3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc3e:	f002 0202 	and.w	r2, r2, #2
 800fc42:	218f      	movs	r1, #143	; 0x8f
 800fc44:	20c8      	movs	r0, #200	; 0xc8
 800fc46:	f003 f94c 	bl	8012ee2 <GUI_RadioBox>
		GUI_Text_C(40, 185);
 800fc4a:	21b9      	movs	r1, #185	; 0xb9
 800fc4c:	2028      	movs	r0, #40	; 0x28
 800fc4e:	f006 fe23 	bl	8016898 <GUI_Text_C>
		GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 800fc52:	8823      	ldrh	r3, [r4, #0]
 800fc54:	782a      	ldrb	r2, [r5, #0]
 800fc56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc5a:	f002 0204 	and.w	r2, r2, #4
 800fc5e:	21b2      	movs	r1, #178	; 0xb2
 800fc60:	20c8      	movs	r0, #200	; 0xc8
 800fc62:	f003 f93e 	bl	8012ee2 <GUI_RadioBox>
		GUI_Text_D50(40, 220);
 800fc66:	21dc      	movs	r1, #220	; 0xdc
 800fc68:	2028      	movs	r0, #40	; 0x28
 800fc6a:	f006 fe2b 	bl	80168c4 <GUI_Text_D50>
		GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 800fc6e:	8823      	ldrh	r3, [r4, #0]
 800fc70:	782a      	ldrb	r2, [r5, #0]
 800fc72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc76:	f002 0208 	and.w	r2, r2, #8
 800fc7a:	21d5      	movs	r1, #213	; 0xd5
 800fc7c:	20c8      	movs	r0, #200	; 0xc8
 800fc7e:	f003 f930 	bl	8012ee2 <GUI_RadioBox>
		GUI_Text_D55(40, 255);
 800fc82:	21ff      	movs	r1, #255	; 0xff
 800fc84:	2028      	movs	r0, #40	; 0x28
 800fc86:	f006 fe41 	bl	801690c <GUI_Text_D55>
		GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 800fc8a:	8823      	ldrh	r3, [r4, #0]
 800fc8c:	782a      	ldrb	r2, [r5, #0]
 800fc8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc92:	f002 0210 	and.w	r2, r2, #16
 800fc96:	21f8      	movs	r1, #248	; 0xf8
 800fc98:	20c8      	movs	r0, #200	; 0xc8
 800fc9a:	f003 f922 	bl	8012ee2 <GUI_RadioBox>
		GUI_Text_D75(40, 290);
 800fc9e:	f44f 7191 	mov.w	r1, #290	; 0x122
 800fca2:	2028      	movs	r0, #40	; 0x28
 800fca4:	f006 fe56 	bl	8016954 <GUI_Text_D75>
		GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 800fca8:	8823      	ldrh	r3, [r4, #0]
 800fcaa:	782a      	ldrb	r2, [r5, #0]
 800fcac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcb0:	f002 0220 	and.w	r2, r2, #32
 800fcb4:	f240 111b 	movw	r1, #283	; 0x11b
 800fcb8:	20c8      	movs	r0, #200	; 0xc8
 800fcba:	f003 f912 	bl	8012ee2 <GUI_RadioBox>
		TFT_DrawLine(10, 330, 262, 330, TFT_White);
 800fcbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fcc2:	9300      	str	r3, [sp, #0]
 800fcc4:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800fcc8:	4619      	mov	r1, r3
 800fcca:	200a      	movs	r0, #10
 800fccc:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fcd0:	f00c fc18 	bl	801c504 <TFT_DrawLine>
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 800fcd4:	4b13      	ldr	r3, [pc, #76]	; (800fd24 <GUI_DataSet4_Screen+0x140>)
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800fcdc:	2014      	movs	r0, #20
 800fcde:	b1b3      	cbz	r3, 800fd0e <GUI_DataSet4_Screen+0x12a>
 800fce0:	f007 f8d6 	bl	8016e90 <GUI_Text_EbEr>
		GUI_CheckBox(200, 345, Measure_Field&EbEr);
 800fce4:	8822      	ldrh	r2, [r4, #0]
 800fce6:	f240 1159 	movw	r1, #345	; 0x159
 800fcea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800fcee:	20c8      	movs	r0, #200	; 0xc8
 800fcf0:	f003 f8b6 	bl	8012e60 <GUI_CheckBox>
		TFT_DrawLine(10, 390, 262, 390, TFT_White);
 800fcf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fcf8:	9300      	str	r3, [sp, #0]
 800fcfa:	f44f 73c3 	mov.w	r3, #390	; 0x186
 800fcfe:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fd02:	4619      	mov	r1, r3
 800fd04:	200a      	movs	r0, #10
 800fd06:	f00c fbfd 	bl	801c504 <TFT_DrawLine>
}
 800fd0a:	b003      	add	sp, #12
 800fd0c:	bd30      	pop	{r4, r5, pc}
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 800fd0e:	f007 f8f9 	bl	8016f04 <GUI_Text_LbLr>
 800fd12:	e7e7      	b.n	800fce4 <GUI_DataSet4_Screen+0x100>
 800fd14:	2000022a 	.word	0x2000022a
 800fd18:	20005701 	.word	0x20005701
 800fd1c:	20005706 	.word	0x20005706
 800fd20:	20090ab9 	.word	0x20090ab9
 800fd24:	20000ebc 	.word	0x20000ebc

0800fd28 <GUI_DataSet5_Screen>:
{
 800fd28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fd2a:	4b19      	ldr	r3, [pc, #100]	; (800fd90 <GUI_DataSet5_Screen+0x68>)
 800fd2c:	4a19      	ldr	r2, [pc, #100]	; (800fd94 <GUI_DataSet5_Screen+0x6c>)
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	7812      	ldrb	r2, [r2, #0]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d02a      	beq.n	800fd8c <GUI_DataSet5_Screen+0x64>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 800fd36:	4d18      	ldr	r5, [pc, #96]	; (800fd98 <GUI_DataSet5_Screen+0x70>)
		GUI_Panels();
 800fd38:	f7ff fd66 	bl	800f808 <GUI_Panels>
		GUI_Text_lambda_d(35, 86);
 800fd3c:	2156      	movs	r1, #86	; 0x56
 800fd3e:	2023      	movs	r0, #35	; 0x23
 800fd40:	f006 fed2 	bl	8016ae8 <GUI_Text_lambda_d>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 800fd44:	882a      	ldrh	r2, [r5, #0]
 800fd46:	2146      	movs	r1, #70	; 0x46
 800fd48:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800fd4c:	20c8      	movs	r0, #200	; 0xc8
 800fd4e:	f003 f887 	bl	8012e60 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800fd52:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fd56:	2378      	movs	r3, #120	; 0x78
 800fd58:	4619      	mov	r1, r3
 800fd5a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fd5e:	200a      	movs	r0, #10
 800fd60:	9400      	str	r4, [sp, #0]
 800fd62:	f00c fbcf 	bl	801c504 <TFT_DrawLine>
		GUI_Text_SP(35, 145);
 800fd66:	2191      	movs	r1, #145	; 0x91
 800fd68:	2023      	movs	r0, #35	; 0x23
 800fd6a:	f006 fe99 	bl	8016aa0 <GUI_Text_SP>
		GUI_CheckBox(200, 133, Measure_Field&SP_measure);
 800fd6e:	882a      	ldrh	r2, [r5, #0]
 800fd70:	2185      	movs	r1, #133	; 0x85
 800fd72:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800fd76:	20c8      	movs	r0, #200	; 0xc8
 800fd78:	f003 f872 	bl	8012e60 <GUI_CheckBox>
		TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800fd7c:	23b7      	movs	r3, #183	; 0xb7
 800fd7e:	9400      	str	r4, [sp, #0]
 800fd80:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fd84:	4619      	mov	r1, r3
 800fd86:	200a      	movs	r0, #10
 800fd88:	f00c fbbc 	bl	801c504 <TFT_DrawLine>
}
 800fd8c:	b003      	add	sp, #12
 800fd8e:	bd30      	pop	{r4, r5, pc}
 800fd90:	2000022a 	.word	0x2000022a
 800fd94:	20005701 	.word	0x20005701
 800fd98:	20005706 	.word	0x20005706

0800fd9c <GUI_GraphSet1_Screen>:
{
 800fd9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fd9e:	4b1d      	ldr	r3, [pc, #116]	; (800fe14 <GUI_GraphSet1_Screen+0x78>)
 800fda0:	4a1d      	ldr	r2, [pc, #116]	; (800fe18 <GUI_GraphSet1_Screen+0x7c>)
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	7812      	ldrb	r2, [r2, #0]
 800fda6:	4c1d      	ldr	r4, [pc, #116]	; (800fe1c <GUI_GraphSet1_Screen+0x80>)
 800fda8:	4d1d      	ldr	r5, [pc, #116]	; (800fe20 <GUI_GraphSet1_Screen+0x84>)
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d103      	bne.n	800fdb6 <GUI_GraphSet1_Screen+0x1a>
 800fdae:	7822      	ldrb	r2, [r4, #0]
 800fdb0:	782b      	ldrb	r3, [r5, #0]
 800fdb2:	429a      	cmp	r2, r3
 800fdb4:	d022      	beq.n	800fdfc <GUI_GraphSet1_Screen+0x60>
		GUI_Panels();
 800fdb6:	f7ff fd27 	bl	800f808 <GUI_Panels>
		Language_status_prev = Language_status;
 800fdba:	782b      	ldrb	r3, [r5, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 800fdbc:	4a19      	ldr	r2, [pc, #100]	; (800fe24 <GUI_GraphSet1_Screen+0x88>)
		Language_status_prev = Language_status;
 800fdbe:	7023      	strb	r3, [r4, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 800fdc0:	210c      	movs	r1, #12
 800fdc2:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 800fdc4:	b9e3      	cbnz	r3, 800fe00 <GUI_GraphSet1_Screen+0x64>
			GUI_OptionMenuRu();
 800fdc6:	f7ff f8fb 	bl	800efc0 <GUI_OptionMenuRu>
			GUI_TextRu_PPF_bands(10, 337);
 800fdca:	f240 1151 	movw	r1, #337	; 0x151
 800fdce:	200a      	movs	r0, #10
 800fdd0:	f008 fce6 	bl	80187a0 <GUI_TextRu_PPF_bands>
			GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 800fdd4:	4b14      	ldr	r3, [pc, #80]	; (800fe28 <GUI_GraphSet1_Screen+0x8c>)
 800fdd6:	781a      	ldrb	r2, [r3, #0]
 800fdd8:	f240 1147 	movw	r1, #327	; 0x147
 800fddc:	f002 0201 	and.w	r2, r2, #1
 800fde0:	20c8      	movs	r0, #200	; 0xc8
 800fde2:	f003 f83d 	bl	8012e60 <GUI_CheckBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fde6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdea:	9300      	str	r3, [sp, #0]
 800fdec:	f240 1379 	movw	r3, #377	; 0x179
 800fdf0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fdf4:	4619      	mov	r1, r3
 800fdf6:	200a      	movs	r0, #10
 800fdf8:	f00c fb84 	bl	801c504 <TFT_DrawLine>
}
 800fdfc:	b003      	add	sp, #12
 800fdfe:	bd30      	pop	{r4, r5, pc}
		else if(Language_status == En){
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d1e7      	bne.n	800fdd4 <GUI_GraphSet1_Screen+0x38>
			GUI_OptionMenuEn();
 800fe04:	f7ff f94c 	bl	800f0a0 <GUI_OptionMenuEn>
			GUI_TextEn_PARwavebands(10, 339);
 800fe08:	f240 1153 	movw	r1, #339	; 0x153
 800fe0c:	200a      	movs	r0, #10
 800fe0e:	f007 fd19 	bl	8017844 <GUI_TextEn_PARwavebands>
 800fe12:	e7df      	b.n	800fdd4 <GUI_GraphSet1_Screen+0x38>
 800fe14:	2000022a 	.word	0x2000022a
 800fe18:	20005701 	.word	0x20005701
 800fe1c:	20090ab4 	.word	0x20090ab4
 800fe20:	20005703 	.word	0x20005703
 800fe24:	20091058 	.word	0x20091058
 800fe28:	20005702 	.word	0x20005702

0800fe2c <GUI_GraphSet2_Screen>:
{
 800fe2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fe2e:	4b19      	ldr	r3, [pc, #100]	; (800fe94 <GUI_GraphSet2_Screen+0x68>)
 800fe30:	4a19      	ldr	r2, [pc, #100]	; (800fe98 <GUI_GraphSet2_Screen+0x6c>)
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	7812      	ldrb	r2, [r2, #0]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d02a      	beq.n	800fe90 <GUI_GraphSet2_Screen+0x64>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 800fe3a:	4d18      	ldr	r5, [pc, #96]	; (800fe9c <GUI_GraphSet2_Screen+0x70>)
		GUI_Panels();
 800fe3c:	f7ff fce4 	bl	800f808 <GUI_Panels>
		GUI_Text_EbEr(18, 82);
 800fe40:	2152      	movs	r1, #82	; 0x52
 800fe42:	2012      	movs	r0, #18
 800fe44:	f007 f824 	bl	8016e90 <GUI_Text_EbEr>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 800fe48:	782a      	ldrb	r2, [r5, #0]
 800fe4a:	2146      	movs	r1, #70	; 0x46
 800fe4c:	f002 0202 	and.w	r2, r2, #2
 800fe50:	20c8      	movs	r0, #200	; 0xc8
 800fe52:	f003 f805 	bl	8012e60 <GUI_CheckBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 800fe56:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fe5a:	237a      	movs	r3, #122	; 0x7a
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fe62:	200a      	movs	r0, #10
 800fe64:	9400      	str	r4, [sp, #0]
 800fe66:	f00c fb4d 	bl	801c504 <TFT_DrawLine>
		GUI_Text_V_lambda(10, 145);
 800fe6a:	2191      	movs	r1, #145	; 0x91
 800fe6c:	200a      	movs	r0, #10
 800fe6e:	f006 fe5f 	bl	8016b30 <GUI_Text_V_lambda>
		GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 800fe72:	782a      	ldrb	r2, [r5, #0]
 800fe74:	2185      	movs	r1, #133	; 0x85
 800fe76:	f002 0204 	and.w	r2, r2, #4
 800fe7a:	20c8      	movs	r0, #200	; 0xc8
 800fe7c:	f002 fff0 	bl	8012e60 <GUI_CheckBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 800fe80:	23b9      	movs	r3, #185	; 0xb9
 800fe82:	9400      	str	r4, [sp, #0]
 800fe84:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fe88:	4619      	mov	r1, r3
 800fe8a:	200a      	movs	r0, #10
 800fe8c:	f00c fb3a 	bl	801c504 <TFT_DrawLine>
}
 800fe90:	b003      	add	sp, #12
 800fe92:	bd30      	pop	{r4, r5, pc}
 800fe94:	2000022a 	.word	0x2000022a
 800fe98:	20005701 	.word	0x20005701
 800fe9c:	20005702 	.word	0x20005702

0800fea0 <GUI_ColorSet1_Screen>:
{
 800fea0:	b513      	push	{r0, r1, r4, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fea2:	4b1b      	ldr	r3, [pc, #108]	; (800ff10 <GUI_ColorSet1_Screen+0x70>)
 800fea4:	4a1b      	ldr	r2, [pc, #108]	; (800ff14 <GUI_ColorSet1_Screen+0x74>)
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	7812      	ldrb	r2, [r2, #0]
 800feaa:	4c1b      	ldr	r4, [pc, #108]	; (800ff18 <GUI_ColorSet1_Screen+0x78>)
 800feac:	429a      	cmp	r2, r3
 800feae:	4b1b      	ldr	r3, [pc, #108]	; (800ff1c <GUI_ColorSet1_Screen+0x7c>)
 800feb0:	d103      	bne.n	800feba <GUI_ColorSet1_Screen+0x1a>
 800feb2:	7819      	ldrb	r1, [r3, #0]
 800feb4:	7822      	ldrb	r2, [r4, #0]
 800feb6:	4291      	cmp	r1, r2
 800feb8:	d023      	beq.n	800ff02 <GUI_ColorSet1_Screen+0x62>
		Language_status_prev = Language_status;
 800feba:	7822      	ldrb	r2, [r4, #0]
 800febc:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800febe:	f7ff fca3 	bl	800f808 <GUI_Panels>
		Prev_Inf_Screen2 = ColorSet1_Screen;
 800fec2:	4b17      	ldr	r3, [pc, #92]	; (800ff20 <GUI_ColorSet1_Screen+0x80>)
 800fec4:	220e      	movs	r2, #14
 800fec6:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800fec8:	7823      	ldrb	r3, [r4, #0]
 800feca:	b9e3      	cbnz	r3, 800ff06 <GUI_ColorSet1_Screen+0x66>
			GUI_OptionMenuRu();
 800fecc:	f7ff f878 	bl	800efc0 <GUI_OptionMenuRu>
			GUI_Text_CIE_xy(10, 337);
 800fed0:	f240 1151 	movw	r1, #337	; 0x151
 800fed4:	200a      	movs	r0, #10
 800fed6:	f006 fd61 	bl	801699c <GUI_Text_CIE_xy>
			GUI_RadioBox(200, 327, Color_Field&Color_CIE_xy, 0x01);
 800feda:	4b12      	ldr	r3, [pc, #72]	; (800ff24 <GUI_ColorSet1_Screen+0x84>)
 800fedc:	781a      	ldrb	r2, [r3, #0]
 800fede:	2301      	movs	r3, #1
 800fee0:	401a      	ands	r2, r3
 800fee2:	f240 1147 	movw	r1, #327	; 0x147
 800fee6:	20c8      	movs	r0, #200	; 0xc8
 800fee8:	f002 fffb 	bl	8012ee2 <GUI_RadioBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800feec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fef0:	9300      	str	r3, [sp, #0]
 800fef2:	f240 1379 	movw	r3, #377	; 0x179
 800fef6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fefa:	4619      	mov	r1, r3
 800fefc:	200a      	movs	r0, #10
 800fefe:	f00c fb01 	bl	801c504 <TFT_DrawLine>
}
 800ff02:	b002      	add	sp, #8
 800ff04:	bd10      	pop	{r4, pc}
		else if(Language_status == En){
 800ff06:	2b01      	cmp	r3, #1
 800ff08:	d1e2      	bne.n	800fed0 <GUI_ColorSet1_Screen+0x30>
			GUI_OptionMenuEn();
 800ff0a:	f7ff f8c9 	bl	800f0a0 <GUI_OptionMenuEn>
 800ff0e:	e7df      	b.n	800fed0 <GUI_ColorSet1_Screen+0x30>
 800ff10:	2000022a 	.word	0x2000022a
 800ff14:	20005701 	.word	0x20005701
 800ff18:	20005703 	.word	0x20005703
 800ff1c:	20090ab4 	.word	0x20090ab4
 800ff20:	20091058 	.word	0x20091058
 800ff24:	200056ff 	.word	0x200056ff

0800ff28 <GUI_ColorSet2_Screen>:
{
 800ff28:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800ff2a:	4b1a      	ldr	r3, [pc, #104]	; (800ff94 <GUI_ColorSet2_Screen+0x6c>)
 800ff2c:	4a1a      	ldr	r2, [pc, #104]	; (800ff98 <GUI_ColorSet2_Screen+0x70>)
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	7812      	ldrb	r2, [r2, #0]
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d02c      	beq.n	800ff90 <GUI_ColorSet2_Screen+0x68>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 800ff36:	4d19      	ldr	r5, [pc, #100]	; (800ff9c <GUI_ColorSet2_Screen+0x74>)
		GUI_Panels();
 800ff38:	f7ff fc66 	bl	800f808 <GUI_Panels>
		GUI_Text_CIE_Luv(20, 82);
 800ff3c:	2152      	movs	r1, #82	; 0x52
 800ff3e:	2014      	movs	r0, #20
 800ff40:	f006 fb7a 	bl	8016638 <GUI_Text_CIE_Luv>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 800ff44:	782a      	ldrb	r2, [r5, #0]
 800ff46:	2301      	movs	r3, #1
 800ff48:	f002 0204 	and.w	r2, r2, #4
 800ff4c:	2146      	movs	r1, #70	; 0x46
 800ff4e:	20c8      	movs	r0, #200	; 0xc8
 800ff50:	f002 ffc7 	bl	8012ee2 <GUI_RadioBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 800ff54:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ff58:	237a      	movs	r3, #122	; 0x7a
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ff60:	200a      	movs	r0, #10
 800ff62:	9400      	str	r4, [sp, #0]
 800ff64:	f00c face 	bl	801c504 <TFT_DrawLine>
		GUI_Text_CIE_Lab(20, 145);
 800ff68:	2191      	movs	r1, #145	; 0x91
 800ff6a:	2014      	movs	r0, #20
 800ff6c:	f006 fbb2 	bl	80166d4 <GUI_Text_CIE_Lab>
		GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 800ff70:	782a      	ldrb	r2, [r5, #0]
 800ff72:	2301      	movs	r3, #1
 800ff74:	f002 0202 	and.w	r2, r2, #2
 800ff78:	2185      	movs	r1, #133	; 0x85
 800ff7a:	20c8      	movs	r0, #200	; 0xc8
 800ff7c:	f002 ffb1 	bl	8012ee2 <GUI_RadioBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 800ff80:	23b9      	movs	r3, #185	; 0xb9
 800ff82:	9400      	str	r4, [sp, #0]
 800ff84:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ff88:	4619      	mov	r1, r3
 800ff8a:	200a      	movs	r0, #10
 800ff8c:	f00c faba 	bl	801c504 <TFT_DrawLine>
}
 800ff90:	b003      	add	sp, #12
 800ff92:	bd30      	pop	{r4, r5, pc}
 800ff94:	2000022a 	.word	0x2000022a
 800ff98:	20005701 	.word	0x20005701
 800ff9c:	200056ff 	.word	0x200056ff

0800ffa0 <GUI_ColorRendSet_Screen>:
{
 800ffa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 800ffa2:	4b28      	ldr	r3, [pc, #160]	; (8010044 <GUI_ColorRendSet_Screen+0xa4>)
 800ffa4:	4d28      	ldr	r5, [pc, #160]	; (8010048 <GUI_ColorRendSet_Screen+0xa8>)
 800ffa6:	4c29      	ldr	r4, [pc, #164]	; (801004c <GUI_ColorRendSet_Screen+0xac>)
 800ffa8:	2202      	movs	r2, #2
 800ffaa:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800ffac:	4b28      	ldr	r3, [pc, #160]	; (8010050 <GUI_ColorRendSet_Screen+0xb0>)
 800ffae:	4a29      	ldr	r2, [pc, #164]	; (8010054 <GUI_ColorRendSet_Screen+0xb4>)
 800ffb0:	781b      	ldrb	r3, [r3, #0]
 800ffb2:	7812      	ldrb	r2, [r2, #0]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d103      	bne.n	800ffc0 <GUI_ColorRendSet_Screen+0x20>
 800ffb8:	782a      	ldrb	r2, [r5, #0]
 800ffba:	7823      	ldrb	r3, [r4, #0]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d03e      	beq.n	801003e <GUI_ColorRendSet_Screen+0x9e>
		GUI_Panels();
 800ffc0:	f7ff fc22 	bl	800f808 <GUI_Panels>
		Language_status_prev = Language_status;
 800ffc4:	7823      	ldrb	r3, [r4, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 800ffc6:	4a24      	ldr	r2, [pc, #144]	; (8010058 <GUI_ColorRendSet_Screen+0xb8>)
		Language_status_prev = Language_status;
 800ffc8:	702b      	strb	r3, [r5, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 800ffca:	2110      	movs	r1, #16
 800ffcc:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 800ffce:	b90b      	cbnz	r3, 800ffd4 <GUI_ColorRendSet_Screen+0x34>
			GUI_OptionMenuRu();
 800ffd0:	f7fe fff6 	bl	800efc0 <GUI_OptionMenuRu>
		if(Language_status == En){
 800ffd4:	7823      	ldrb	r3, [r4, #0]
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d101      	bne.n	800ffde <GUI_ColorRendSet_Screen+0x3e>
			GUI_OptionMenuEn();
 800ffda:	f7ff f861 	bl	800f0a0 <GUI_OptionMenuEn>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 800ffde:	4d1f      	ldr	r5, [pc, #124]	; (801005c <GUI_ColorRendSet_Screen+0xbc>)
			GUI_Text_CRI(30, 325);
 800ffe0:	f240 1145 	movw	r1, #325	; 0x145
 800ffe4:	201e      	movs	r0, #30
 800ffe6:	f006 fd13 	bl	8016a10 <GUI_Text_CRI>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 800ffea:	782a      	ldrb	r2, [r5, #0]
 800ffec:	2301      	movs	r3, #1
 800ffee:	401a      	ands	r2, r3
 800fff0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800fff4:	20b9      	movs	r0, #185	; 0xb9
 800fff6:	f002 ff74 	bl	8012ee2 <GUI_RadioBox>
			TFT_DrawLine(10, 355, 262, 355, TFT_White);
 800fffa:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fffe:	f240 1363 	movw	r3, #355	; 0x163
 8010002:	4619      	mov	r1, r3
 8010004:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010008:	200a      	movs	r0, #10
 801000a:	9400      	str	r4, [sp, #0]
 801000c:	f00c fa7a 	bl	801c504 <TFT_DrawLine>
			GUI_Text_CQS(30, 369);
 8010010:	f240 1171 	movw	r1, #369	; 0x171
 8010014:	201e      	movs	r0, #30
 8010016:	f006 fd1f 	bl	8016a58 <GUI_Text_CQS>
			GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 801001a:	782a      	ldrb	r2, [r5, #0]
 801001c:	2301      	movs	r3, #1
 801001e:	43d2      	mvns	r2, r2
 8010020:	401a      	ands	r2, r3
 8010022:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8010026:	20b9      	movs	r0, #185	; 0xb9
 8010028:	f002 ff5b 	bl	8012ee2 <GUI_RadioBox>
			TFT_DrawLine(10, 401, 262, 401, TFT_White);
 801002c:	f240 1391 	movw	r3, #401	; 0x191
 8010030:	9400      	str	r4, [sp, #0]
 8010032:	f44f 7283 	mov.w	r2, #262	; 0x106
 8010036:	4619      	mov	r1, r3
 8010038:	200a      	movs	r0, #10
 801003a:	f00c fa63 	bl	801c504 <TFT_DrawLine>
}
 801003e:	b003      	add	sp, #12
 8010040:	bd30      	pop	{r4, r5, pc}
 8010042:	bf00      	nop
 8010044:	20000231 	.word	0x20000231
 8010048:	20090ab4 	.word	0x20090ab4
 801004c:	20005703 	.word	0x20005703
 8010050:	2000022a 	.word	0x2000022a
 8010054:	20005701 	.word	0x20005701
 8010058:	20091058 	.word	0x20091058
 801005c:	20005700 	.word	0x20005700

08010060 <GUI_Graph_Screen>:
void GUI_Graph_Screen(){
 8010060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010064:	ed2d 8b02 	vpush	{d8}
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 8010068:	4b87      	ldr	r3, [pc, #540]	; (8010288 <GUI_Graph_Screen+0x228>)
 801006a:	4a88      	ldr	r2, [pc, #544]	; (801028c <GUI_Graph_Screen+0x22c>)
 801006c:	781b      	ldrb	r3, [r3, #0]
 801006e:	7812      	ldrb	r2, [r2, #0]
 8010070:	4d87      	ldr	r5, [pc, #540]	; (8010290 <GUI_Graph_Screen+0x230>)
 8010072:	4c88      	ldr	r4, [pc, #544]	; (8010294 <GUI_Graph_Screen+0x234>)
 8010074:	429a      	cmp	r2, r3
void GUI_Graph_Screen(){
 8010076:	b083      	sub	sp, #12
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 8010078:	d104      	bne.n	8010084 <GUI_Graph_Screen+0x24>
 801007a:	782a      	ldrb	r2, [r5, #0]
 801007c:	7823      	ldrb	r3, [r4, #0]
 801007e:	429a      	cmp	r2, r3
 8010080:	f000 809d 	beq.w	80101be <GUI_Graph_Screen+0x15e>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 8010084:	2063      	movs	r0, #99	; 0x63
 8010086:	f00c f89b 	bl	801c1c0 <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 801008a:	4a83      	ldr	r2, [pc, #524]	; (8010298 <GUI_Graph_Screen+0x238>)
 801008c:	2300      	movs	r3, #0
 801008e:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 8010090:	4a82      	ldr	r2, [pc, #520]	; (801029c <GUI_Graph_Screen+0x23c>)
 8010092:	7013      	strb	r3, [r2, #0]
		GUI_Panels();		
 8010094:	f7ff fbb8 	bl	800f808 <GUI_Panels>
		Rotation_Screen_Spectral_Old = Rotation_Screen_Spectral;
 8010098:	7820      	ldrb	r0, [r4, #0]
 801009a:	7028      	strb	r0, [r5, #0]
		if(Graph_Field&PPF_Bands)
 801009c:	4d80      	ldr	r5, [pc, #512]	; (80102a0 <GUI_Graph_Screen+0x240>)
 801009e:	782b      	ldrb	r3, [r5, #0]
 80100a0:	07d9      	lsls	r1, r3, #31
 80100a2:	d501      	bpl.n	80100a8 <GUI_Graph_Screen+0x48>
			Spectral_PAR_Range(Rotation_Screen_Spectral);
 80100a4:	f00b f9a4 	bl	801b3f0 <Spectral_PAR_Range>
		if(Graph_Field&V_lambda)
 80100a8:	782b      	ldrb	r3, [r5, #0]
 80100aa:	075a      	lsls	r2, r3, #29
 80100ac:	d538      	bpl.n	8010120 <GUI_Graph_Screen+0xc0>
			if(Rotation_Screen_Spectral == 0)
 80100ae:	7820      	ldrb	r0, [r4, #0]
 80100b0:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 80102b0 <GUI_Graph_Screen+0x250>
 80100b4:	f8df c210 	ldr.w	ip, [pc, #528]	; 80102c8 <GUI_Graph_Screen+0x268>
 80100b8:	4e7a      	ldr	r6, [pc, #488]	; (80102a4 <GUI_Graph_Screen+0x244>)
 80100ba:	4f7b      	ldr	r7, [pc, #492]	; (80102a8 <GUI_Graph_Screen+0x248>)
 80100bc:	2800      	cmp	r0, #0
 80100be:	f040 8086 	bne.w	80101ce <GUI_Graph_Screen+0x16e>
						buf_pix = (Spectral_day[i])*307;
 80100c2:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80102ac <GUI_Graph_Screen+0x24c>
 80100c6:	4603      	mov	r3, r0
 80100c8:	0119      	lsls	r1, r3, #4
 80100ca:	eb0c 0201 	add.w	r2, ip, r1
 80100ce:	edd2 7a00 	vldr	s15, [r2]
 80100d2:	ee67 7a87 	vmul.f32	s15, s15, s14
						buf_pix = (Spectral_night[i])*307;
 80100d6:	4439      	add	r1, r7
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 80100d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100dc:	ee17 2a90 	vmov	r2, s15
						buf_pix = (Spectral_night[i])*307;
 80100e0:	edd1 7a00 	vldr	s15, [r1]
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 80100e4:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
						buf_pix = (Spectral_night[i])*307;
 80100e8:	ee67 7a87 	vmul.f32	s15, s15, s14
						graph_spectral_night[jj] = (uint16_t)buf_pix;
 80100ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80100f0:	ee17 2a90 	vmov	r2, s15
 80100f4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 80100f8:	3301      	adds	r3, #1
				for(uint16_t i = 0; i < 1024; i+=4)
 80100fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80100fe:	d1e3      	bne.n	80100c8 <GUI_Graph_Screen+0x68>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, Rotation_Screen_Spectral);
 8010100:	2114      	movs	r1, #20
 8010102:	9000      	str	r0, [sp, #0]
 8010104:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8010108:	4608      	mov	r0, r1
 801010a:	4a69      	ldr	r2, [pc, #420]	; (80102b0 <GUI_Graph_Screen+0x250>)
 801010c:	f00b fb30 	bl	801b770 <Spectral_DrawGraph_Const>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, Rotation_Screen_Spectral);
 8010110:	7823      	ldrb	r3, [r4, #0]
 8010112:	9300      	str	r3, [sp, #0]
 8010114:	2114      	movs	r1, #20
 8010116:	231f      	movs	r3, #31
 8010118:	4a62      	ldr	r2, [pc, #392]	; (80102a4 <GUI_Graph_Screen+0x244>)
 801011a:	4608      	mov	r0, r1
 801011c:	f00b fb28 	bl	801b770 <Spectral_DrawGraph_Const>
			if(Graph_Field&EbEr_graph)
 8010120:	782b      	ldrb	r3, [r5, #0]
 8010122:	079b      	lsls	r3, r3, #30
 8010124:	d545      	bpl.n	80101b2 <GUI_Graph_Screen+0x152>
				if(Rotation_Screen_Spectral == 0)
 8010126:	7826      	ldrb	r6, [r4, #0]
 8010128:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80102bc <GUI_Graph_Screen+0x25c>
 801012c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80102cc <GUI_Graph_Screen+0x26c>
 8010130:	4f60      	ldr	r7, [pc, #384]	; (80102b4 <GUI_Graph_Screen+0x254>)
 8010132:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80102d0 <GUI_Graph_Screen+0x270>
 8010136:	2e00      	cmp	r6, #0
 8010138:	d16c      	bne.n	8010214 <GUI_Graph_Screen+0x1b4>
							buf_pix = (Hazard_Blue[i])*307;
 801013a:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 80102ac <GUI_Graph_Screen+0x24c>
 801013e:	4635      	mov	r5, r6
 8010140:	012a      	lsls	r2, r5, #4
 8010142:	eb0a 0302 	add.w	r3, sl, r2
 8010146:	edd3 7a00 	vldr	s15, [r3]
 801014a:	ee67 7a88 	vmul.f32	s15, s15, s16
							buf_pix = (Hazard_Retina[i])/10.*307;
 801014e:	4442      	add	r2, r8
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 8010150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
							buf_pix = (Hazard_Retina[i])/10.*307;
 8010154:	6810      	ldr	r0, [r2, #0]
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 8010156:	ee17 3a90 	vmov	r3, s15
 801015a:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
							buf_pix = (Hazard_Retina[i])/10.*307;
 801015e:	f7f0 fa0b 	bl	8000578 <__aeabi_f2d>
 8010162:	2200      	movs	r2, #0
 8010164:	4b54      	ldr	r3, [pc, #336]	; (80102b8 <GUI_Graph_Screen+0x258>)
 8010166:	f7f0 fb85 	bl	8000874 <__aeabi_ddiv>
 801016a:	a343      	add	r3, pc, #268	; (adr r3, 8010278 <GUI_Graph_Screen+0x218>)
 801016c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010170:	f7f0 fa56 	bl	8000620 <__aeabi_dmul>
 8010174:	f7f0 fd4c 	bl	8000c10 <__aeabi_d2f>
							graph_spectral_Retina[jj] = (uint16_t)buf_pix;
 8010178:	ee07 0a90 	vmov	s15, r0
 801017c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010180:	ee17 0a90 	vmov	r0, s15
 8010184:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 8010188:	3501      	adds	r5, #1
					for(uint16_t i = 0; i < 1024; i+=4)
 801018a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 801018e:	d1d7      	bne.n	8010140 <GUI_Graph_Screen+0xe0>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, Rotation_Screen_Spectral);
 8010190:	2114      	movs	r1, #20
 8010192:	4608      	mov	r0, r1
 8010194:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8010198:	4a48      	ldr	r2, [pc, #288]	; (80102bc <GUI_Graph_Screen+0x25c>)
 801019a:	9600      	str	r6, [sp, #0]
 801019c:	f00b fae8 	bl	801b770 <Spectral_DrawGraph_Const>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, Rotation_Screen_Spectral);
 80101a0:	7823      	ldrb	r3, [r4, #0]
 80101a2:	9300      	str	r3, [sp, #0]
 80101a4:	2114      	movs	r1, #20
 80101a6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80101aa:	4a42      	ldr	r2, [pc, #264]	; (80102b4 <GUI_Graph_Screen+0x254>)
 80101ac:	4608      	mov	r0, r1
 80101ae:	f00b fadf 	bl	801b770 <Spectral_DrawGraph_Const>
		Spectral_Axes(Rotation_Screen_Spectral);
 80101b2:	7820      	ldrb	r0, [r4, #0]
 80101b4:	f00b f84e 	bl	801b254 <Spectral_Axes>
		Spectral_Axes_Text(Rotation_Screen_Spectral);
 80101b8:	7820      	ldrb	r0, [r4, #0]
 80101ba:	f00b f9fb 	bl	801b5b4 <Spectral_Axes_Text>
	Prev_Inf_Screen = Graph_Screen;	
 80101be:	4b40      	ldr	r3, [pc, #256]	; (80102c0 <GUI_Graph_Screen+0x260>)
 80101c0:	2204      	movs	r2, #4
 80101c2:	701a      	strb	r2, [r3, #0]
}
 80101c4:	b003      	add	sp, #12
 80101c6:	ecbd 8b02 	vpop	{d8}
 80101ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								buf_pix = (Spectral_day[i])*209;
 80101ce:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80102c4 <GUI_Graph_Screen+0x264>
 80101d2:	2300      	movs	r3, #0
 80101d4:	f04f 080c 	mov.w	r8, #12
 80101d8:	fb08 f103 	mul.w	r1, r8, r3
 80101dc:	eb0c 0201 	add.w	r2, ip, r1
 80101e0:	edd2 7a00 	vldr	s15, [r2]
 80101e4:	ee67 7a87 	vmul.f32	s15, s15, s14
								buf_pix = (Spectral_night[i])*209;
 80101e8:	4439      	add	r1, r7
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 80101ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80101ee:	ee17 2a90 	vmov	r2, s15
								buf_pix = (Spectral_night[i])*209;
 80101f2:	edd1 7a00 	vldr	s15, [r1]
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 80101f6:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
								buf_pix = (Spectral_night[i])*209;
 80101fa:	ee67 7a87 	vmul.f32	s15, s15, s14
								graph_spectral_night[ii] = (uint16_t)buf_pix;
 80101fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010202:	ee17 2a90 	vmov	r2, s15
 8010206:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801020a:	3301      	adds	r3, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 801020c:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 8010210:	d1e2      	bne.n	80101d8 <GUI_Graph_Screen+0x178>
 8010212:	e775      	b.n	8010100 <GUI_Graph_Screen+0xa0>
								buf_pix = (Hazard_Blue[i])*209;
 8010214:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 80102c4 <GUI_Graph_Screen+0x264>
 8010218:	2500      	movs	r5, #0
 801021a:	f04f 0b0c 	mov.w	fp, #12
 801021e:	fb0b f205 	mul.w	r2, fp, r5
 8010222:	eb0a 0302 	add.w	r3, sl, r2
 8010226:	edd3 7a00 	vldr	s15, [r3]
 801022a:	ee67 7a88 	vmul.f32	s15, s15, s16
								buf_pix = (Hazard_Retina[i])/10.*209;
 801022e:	4442      	add	r2, r8
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 8010230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
								buf_pix = (Hazard_Retina[i])/10.*209;
 8010234:	6810      	ldr	r0, [r2, #0]
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 8010236:	ee17 3a90 	vmov	r3, s15
 801023a:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
								buf_pix = (Hazard_Retina[i])/10.*209;
 801023e:	f7f0 f99b 	bl	8000578 <__aeabi_f2d>
 8010242:	2200      	movs	r2, #0
 8010244:	4b1c      	ldr	r3, [pc, #112]	; (80102b8 <GUI_Graph_Screen+0x258>)
 8010246:	f7f0 fb15 	bl	8000874 <__aeabi_ddiv>
 801024a:	a30d      	add	r3, pc, #52	; (adr r3, 8010280 <GUI_Graph_Screen+0x220>)
 801024c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010250:	f7f0 f9e6 	bl	8000620 <__aeabi_dmul>
 8010254:	f7f0 fcdc 	bl	8000c10 <__aeabi_d2f>
								graph_spectral_Retina[ii] = (uint16_t)buf_pix;
 8010258:	ee07 0a90 	vmov	s15, r0
 801025c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010260:	ee17 0a90 	vmov	r0, s15
 8010264:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 8010268:	3501      	adds	r5, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 801026a:	f5b5 7fab 	cmp.w	r5, #342	; 0x156
 801026e:	d1d6      	bne.n	801021e <GUI_Graph_Screen+0x1be>
 8010270:	e78e      	b.n	8010190 <GUI_Graph_Screen+0x130>
 8010272:	bf00      	nop
 8010274:	f3af 8000 	nop.w
 8010278:	00000000 	.word	0x00000000
 801027c:	40733000 	.word	0x40733000
 8010280:	00000000 	.word	0x00000000
 8010284:	406a2000 	.word	0x406a2000
 8010288:	2000022a 	.word	0x2000022a
 801028c:	20005701 	.word	0x20005701
 8010290:	20091059 	.word	0x20091059
 8010294:	2000570a 	.word	0x2000570a
 8010298:	20005727 	.word	0x20005727
 801029c:	20005726 	.word	0x20005726
 80102a0:	20005702 	.word	0x20005702
 80102a4:	20091320 	.word	0x20091320
 80102a8:	20053940 	.word	0x20053940
 80102ac:	43998000 	.word	0x43998000
 80102b0:	20090d82 	.word	0x20090d82
 80102b4:	20090abc 	.word	0x20090abc
 80102b8:	40240000 	.word	0x40240000
 80102bc:	2009105a 	.word	0x2009105a
 80102c0:	20090ab5 	.word	0x20090ab5
 80102c4:	43510000 	.word	0x43510000
 80102c8:	20052940 	.word	0x20052940
 80102cc:	20009d38 	.word	0x20009d38
 80102d0:	2000ad38 	.word	0x2000ad38

080102d4 <GUI_SignalLevel>:
}



void GUI_SignalLevel()
{
 80102d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(oldHighSignal != highSignal)
 80102d6:	4f2a      	ldr	r7, [pc, #168]	; (8010380 <GUI_SignalLevel+0xac>)
 80102d8:	4e2a      	ldr	r6, [pc, #168]	; (8010384 <GUI_SignalLevel+0xb0>)
 80102da:	783b      	ldrb	r3, [r7, #0]
 80102dc:	7832      	ldrb	r2, [r6, #0]
 80102de:	429a      	cmp	r2, r3
 80102e0:	d00a      	beq.n	80102f8 <GUI_SignalLevel+0x24>
  {
    if(highSignal)
 80102e2:	b363      	cbz	r3, 801033e <GUI_SignalLevel+0x6a>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 80102e4:	4b28      	ldr	r3, [pc, #160]	; (8010388 <GUI_SignalLevel+0xb4>)
 80102e6:	781a      	ldrb	r2, [r3, #0]
 80102e8:	4b28      	ldr	r3, [pc, #160]	; (801038c <GUI_SignalLevel+0xb8>)
 80102ea:	211e      	movs	r1, #30
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	b9f2      	cbnz	r2, 801032e <GUI_SignalLevel+0x5a>
 80102f0:	b1cb      	cbz	r3, 8010326 <GUI_SignalLevel+0x52>
 80102f2:	200f      	movs	r0, #15
 80102f4:	f009 f96a 	bl	80195cc <GUI_TextMsgRu_HighIrradiance>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
  
  if(oldLowSignal != lowSignal)
 80102f8:	4d25      	ldr	r5, [pc, #148]	; (8010390 <GUI_SignalLevel+0xbc>)
 80102fa:	4c26      	ldr	r4, [pc, #152]	; (8010394 <GUI_SignalLevel+0xc0>)
 80102fc:	782b      	ldrb	r3, [r5, #0]
 80102fe:	7820      	ldrb	r0, [r4, #0]
 8010300:	4298      	cmp	r0, r3
 8010302:	d00a      	beq.n	801031a <GUI_SignalLevel+0x46>
  {
    if(lowSignal)
 8010304:	b38b      	cbz	r3, 801036a <GUI_SignalLevel+0x96>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 8010306:	4b20      	ldr	r3, [pc, #128]	; (8010388 <GUI_SignalLevel+0xb4>)
 8010308:	781a      	ldrb	r2, [r3, #0]
 801030a:	4b20      	ldr	r3, [pc, #128]	; (801038c <GUI_SignalLevel+0xb8>)
 801030c:	211e      	movs	r1, #30
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	bb1a      	cbnz	r2, 801035a <GUI_SignalLevel+0x86>
 8010312:	b1f3      	cbz	r3, 8010352 <GUI_SignalLevel+0x7e>
 8010314:	2014      	movs	r0, #20
 8010316:	f009 f861 	bl	80193dc <GUI_TextMsgRu_LowIrradiance>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
	oldHighSignal = highSignal;
 801031a:	783b      	ldrb	r3, [r7, #0]
 801031c:	7033      	strb	r3, [r6, #0]
	oldLowSignal = lowSignal;
 801031e:	782b      	ldrb	r3, [r5, #0]
 8010320:	7023      	strb	r3, [r4, #0]
}
 8010322:	b003      	add	sp, #12
 8010324:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 8010326:	2032      	movs	r0, #50	; 0x32
 8010328:	f009 f9ec 	bl	8019704 <GUI_TextMsgRu_HighRadiance>
 801032c:	e7e4      	b.n	80102f8 <GUI_SignalLevel+0x24>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
 801032e:	2037      	movs	r0, #55	; 0x37
 8010330:	b113      	cbz	r3, 8010338 <GUI_SignalLevel+0x64>
 8010332:	f006 ff93 	bl	801725c <GUI_TextMsgEn_HighIrradiance>
 8010336:	e7df      	b.n	80102f8 <GUI_SignalLevel+0x24>
 8010338:	f007 f808 	bl	801734c <GUI_TextMsgEn_HighRadiance>
 801033c:	e7dc      	b.n	80102f8 <GUI_SignalLevel+0x24>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 801033e:	2363      	movs	r3, #99	; 0x63
 8010340:	9300      	str	r3, [sp, #0]
 8010342:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8010346:	2338      	movs	r3, #56	; 0x38
 8010348:	2120      	movs	r1, #32
 801034a:	200a      	movs	r0, #10
 801034c:	f00c f937 	bl	801c5be <TFT_FillRectangle>
 8010350:	e7d2      	b.n	80102f8 <GUI_SignalLevel+0x24>
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 8010352:	2037      	movs	r0, #55	; 0x37
 8010354:	f009 f8d0 	bl	80194f8 <GUI_TextMsgRu_LowRadiance>
 8010358:	e7df      	b.n	801031a <GUI_SignalLevel+0x46>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
 801035a:	2046      	movs	r0, #70	; 0x46
 801035c:	b113      	cbz	r3, 8010364 <GUI_SignalLevel+0x90>
 801035e:	f007 f8c3 	bl	80174e8 <GUI_TextMsgEn_LowIrradiance>
 8010362:	e7da      	b.n	801031a <GUI_SignalLevel+0x46>
 8010364:	f007 f85c 	bl	8017420 <GUI_TextMsgEn_LowRadiance>
 8010368:	e7d7      	b.n	801031a <GUI_SignalLevel+0x46>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 801036a:	2363      	movs	r3, #99	; 0x63
 801036c:	9300      	str	r3, [sp, #0]
 801036e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8010372:	2338      	movs	r3, #56	; 0x38
 8010374:	2120      	movs	r1, #32
 8010376:	200a      	movs	r0, #10
 8010378:	f00c f921 	bl	801c5be <TFT_FillRectangle>
 801037c:	e7cd      	b.n	801031a <GUI_SignalLevel+0x46>
 801037e:	bf00      	nop
 8010380:	200905bf 	.word	0x200905bf
 8010384:	20005726 	.word	0x20005726
 8010388:	20005703 	.word	0x20005703
 801038c:	20000ebc 	.word	0x20000ebc
 8010390:	200905c2 	.word	0x200905c2
 8010394:	20005727 	.word	0x20005727

08010398 <GUI_Measure_Screen>:
void GUI_Measure_Screen(){
 8010398:	b510      	push	{r4, lr}
	if(preGUI_screen_state != GUI_screen_state){
 801039a:	4910      	ldr	r1, [pc, #64]	; (80103dc <GUI_Measure_Screen+0x44>)
 801039c:	4c10      	ldr	r4, [pc, #64]	; (80103e0 <GUI_Measure_Screen+0x48>)
 801039e:	7809      	ldrb	r1, [r1, #0]
 80103a0:	7822      	ldrb	r2, [r4, #0]
 80103a2:	4291      	cmp	r1, r2
 80103a4:	d014      	beq.n	80103d0 <GUI_Measure_Screen+0x38>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 80103a6:	2063      	movs	r0, #99	; 0x63
 80103a8:	f00b ff0a 	bl	801c1c0 <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 80103ac:	4b0d      	ldr	r3, [pc, #52]	; (80103e4 <GUI_Measure_Screen+0x4c>)
 80103ae:	2000      	movs	r0, #0
 80103b0:	7018      	strb	r0, [r3, #0]
		oldHighSignal = 0;
 80103b2:	4b0d      	ldr	r3, [pc, #52]	; (80103e8 <GUI_Measure_Screen+0x50>)
 80103b4:	7018      	strb	r0, [r3, #0]
		screen_count = 0;
 80103b6:	4b0d      	ldr	r3, [pc, #52]	; (80103ec <GUI_Measure_Screen+0x54>)
 80103b8:	7018      	strb	r0, [r3, #0]
		Measure_Elements_Draw(0);
 80103ba:	f7fe ff0d 	bl	800f1d8 <Measure_Elements_Draw>
		GUI_Up_Panel();
 80103be:	f7ff f9bb 	bl	800f738 <GUI_Up_Panel>
		GUI_Down_Panel();
 80103c2:	f7ff f9dd 	bl	800f780 <GUI_Down_Panel>
		Prev_Inf_Screen = Measure_Screen;
 80103c6:	4a0a      	ldr	r2, [pc, #40]	; (80103f0 <GUI_Measure_Screen+0x58>)
 80103c8:	2301      	movs	r3, #1
 80103ca:	7013      	strb	r3, [r2, #0]
		preGUI_screen_state = Measure_Screen;
 80103cc:	7023      	strb	r3, [r4, #0]
 80103ce:	bd10      	pop	{r4, pc}
		GUI_SignalLevel();
 80103d0:	f7ff ff80 	bl	80102d4 <GUI_SignalLevel>
		Measure_Elements_Draw(0);
 80103d4:	2000      	movs	r0, #0
 80103d6:	f7fe feff 	bl	800f1d8 <Measure_Elements_Draw>
 80103da:	e7f4      	b.n	80103c6 <GUI_Measure_Screen+0x2e>
 80103dc:	20005701 	.word	0x20005701
 80103e0:	2000022a 	.word	0x2000022a
 80103e4:	20005727 	.word	0x20005727
 80103e8:	20005726 	.word	0x20005726
 80103ec:	2000572b 	.word	0x2000572b
 80103f0:	20090ab5 	.word	0x20090ab5

080103f4 <GUI_Measure2_Screen>:
{
 80103f4:	b510      	push	{r4, lr}
 old_meas_type_L = 2;
 80103f6:	4b13      	ldr	r3, [pc, #76]	; (8010444 <GUI_Measure2_Screen+0x50>)
 80103f8:	4c13      	ldr	r4, [pc, #76]	; (8010448 <GUI_Measure2_Screen+0x54>)
 80103fa:	2202      	movs	r2, #2
 80103fc:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != Measure2_Screen){
 80103fe:	4b13      	ldr	r3, [pc, #76]	; (801044c <GUI_Measure2_Screen+0x58>)
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	4293      	cmp	r3, r2
 8010404:	d017      	beq.n	8010436 <GUI_Measure2_Screen+0x42>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 8010406:	2063      	movs	r0, #99	; 0x63
 8010408:	f00b feda 	bl	801c1c0 <TFT_FillScreen_DMA>
		current_state_Measure_Draw = state_Measure_Elements;
 801040c:	4b10      	ldr	r3, [pc, #64]	; (8010450 <GUI_Measure2_Screen+0x5c>)
 801040e:	7818      	ldrb	r0, [r3, #0]
		screen_count = 1;
 8010410:	4b10      	ldr	r3, [pc, #64]	; (8010454 <GUI_Measure2_Screen+0x60>)
		current_state_Measure_Draw = state_Measure_Elements;
 8010412:	7020      	strb	r0, [r4, #0]
		screen_count = 1;
 8010414:	2201      	movs	r2, #1
 8010416:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 8010418:	4a0f      	ldr	r2, [pc, #60]	; (8010458 <GUI_Measure2_Screen+0x64>)
 801041a:	2300      	movs	r3, #0
 801041c:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 801041e:	4a0f      	ldr	r2, [pc, #60]	; (801045c <GUI_Measure2_Screen+0x68>)
 8010420:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 8010422:	f7fe fed9 	bl	800f1d8 <Measure_Elements_Draw>
		GUI_Up_Panel();
 8010426:	f7ff f987 	bl	800f738 <GUI_Up_Panel>
		GUI_Down_Panel();
 801042a:	f7ff f9a9 	bl	800f780 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 801042e:	4b0c      	ldr	r3, [pc, #48]	; (8010460 <GUI_Measure2_Screen+0x6c>)
 8010430:	2201      	movs	r2, #1
 8010432:	701a      	strb	r2, [r3, #0]
 8010434:	bd10      	pop	{r4, pc}
			GUI_SignalLevel();
 8010436:	f7ff ff4d 	bl	80102d4 <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 801043a:	7820      	ldrb	r0, [r4, #0]
 801043c:	f7fe fecc 	bl	800f1d8 <Measure_Elements_Draw>
 8010440:	e7f5      	b.n	801042e <GUI_Measure2_Screen+0x3a>
 8010442:	bf00      	nop
 8010444:	20000231 	.word	0x20000231
 8010448:	20005724 	.word	0x20005724
 801044c:	2000022a 	.word	0x2000022a
 8010450:	20005730 	.word	0x20005730
 8010454:	2000572b 	.word	0x2000572b
 8010458:	20005727 	.word	0x20005727
 801045c:	20005726 	.word	0x20005726
 8010460:	20090ab5 	.word	0x20090ab5

08010464 <GUI_Measure3_Screen>:
{
 8010464:	b538      	push	{r3, r4, r5, lr}
 old_meas_type_L = 2;
 8010466:	4b12      	ldr	r3, [pc, #72]	; (80104b0 <GUI_Measure3_Screen+0x4c>)
 8010468:	4c12      	ldr	r4, [pc, #72]	; (80104b4 <GUI_Measure3_Screen+0x50>)
 801046a:	2502      	movs	r5, #2
 801046c:	701d      	strb	r5, [r3, #0]
	if(preGUI_screen_state != Measure3_Screen){
 801046e:	4b12      	ldr	r3, [pc, #72]	; (80104b8 <GUI_Measure3_Screen+0x54>)
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	2b03      	cmp	r3, #3
 8010474:	d016      	beq.n	80104a4 <GUI_Measure3_Screen+0x40>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 8010476:	2063      	movs	r0, #99	; 0x63
 8010478:	f00b fea2 	bl	801c1c0 <TFT_FillScreen_DMA>
		current_state_Measure_Draw= state_Measure_Elements;
 801047c:	4b0f      	ldr	r3, [pc, #60]	; (80104bc <GUI_Measure3_Screen+0x58>)
		oldLowSignal = 0;
 801047e:	4a10      	ldr	r2, [pc, #64]	; (80104c0 <GUI_Measure3_Screen+0x5c>)
		current_state_Measure_Draw= state_Measure_Elements;
 8010480:	7818      	ldrb	r0, [r3, #0]
		screen_count = 2;
 8010482:	4b10      	ldr	r3, [pc, #64]	; (80104c4 <GUI_Measure3_Screen+0x60>)
		current_state_Measure_Draw= state_Measure_Elements;
 8010484:	7020      	strb	r0, [r4, #0]
		screen_count = 2;
 8010486:	701d      	strb	r5, [r3, #0]
		oldLowSignal = 0;
 8010488:	2300      	movs	r3, #0
 801048a:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 801048c:	4a0e      	ldr	r2, [pc, #56]	; (80104c8 <GUI_Measure3_Screen+0x64>)
 801048e:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 8010490:	f7fe fea2 	bl	800f1d8 <Measure_Elements_Draw>
		GUI_Up_Panel();
 8010494:	f7ff f950 	bl	800f738 <GUI_Up_Panel>
		GUI_Down_Panel();
 8010498:	f7ff f972 	bl	800f780 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 801049c:	4b0b      	ldr	r3, [pc, #44]	; (80104cc <GUI_Measure3_Screen+0x68>)
 801049e:	2201      	movs	r2, #1
 80104a0:	701a      	strb	r2, [r3, #0]
 80104a2:	bd38      	pop	{r3, r4, r5, pc}
			GUI_SignalLevel();
 80104a4:	f7ff ff16 	bl	80102d4 <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 80104a8:	7820      	ldrb	r0, [r4, #0]
 80104aa:	f7fe fe95 	bl	800f1d8 <Measure_Elements_Draw>
 80104ae:	e7f5      	b.n	801049c <GUI_Measure3_Screen+0x38>
 80104b0:	20000231 	.word	0x20000231
 80104b4:	20005724 	.word	0x20005724
 80104b8:	2000022a 	.word	0x2000022a
 80104bc:	20005730 	.word	0x20005730
 80104c0:	20005727 	.word	0x20005727
 80104c4:	2000572b 	.word	0x2000572b
 80104c8:	20005726 	.word	0x20005726
 80104cc:	20090ab5 	.word	0x20090ab5

080104d0 <GUI_Color_Screen>:
void GUI_Color_Screen(){
 80104d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d4:	ed2d 8b04 	vpush	{d8-d9}
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 80104d8:	4c8f      	ldr	r4, [pc, #572]	; (8010718 <GUI_Color_Screen+0x248>)
 80104da:	4f90      	ldr	r7, [pc, #576]	; (801071c <GUI_Color_Screen+0x24c>)
 80104dc:	7823      	ldrb	r3, [r4, #0]
 80104de:	4d90      	ldr	r5, [pc, #576]	; (8010720 <GUI_Color_Screen+0x250>)
 80104e0:	2b04      	cmp	r3, #4
void GUI_Color_Screen(){
 80104e2:	b089      	sub	sp, #36	; 0x24
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 80104e4:	d008      	beq.n	80104f8 <GUI_Color_Screen+0x28>
 80104e6:	7823      	ldrb	r3, [r4, #0]
 80104e8:	2b0e      	cmp	r3, #14
 80104ea:	d005      	beq.n	80104f8 <GUI_Color_Screen+0x28>
 80104ec:	7823      	ldrb	r3, [r4, #0]
 80104ee:	2b0f      	cmp	r3, #15
 80104f0:	d002      	beq.n	80104f8 <GUI_Color_Screen+0x28>
 80104f2:	7823      	ldrb	r3, [r4, #0]
 80104f4:	2b12      	cmp	r3, #18
 80104f6:	d125      	bne.n	8010544 <GUI_Color_Screen+0x74>
		GUI_Panels();	
 80104f8:	f7ff f986 	bl	800f808 <GUI_Panels>
		TFT_direction = Rotation_Screen_Color;
 80104fc:	4b89      	ldr	r3, [pc, #548]	; (8010724 <GUI_Color_Screen+0x254>)
 80104fe:	781b      	ldrb	r3, [r3, #0]
 8010500:	703b      	strb	r3, [r7, #0]
		TFT_DrawBitmap(Color_Field&Color_CIE_xy? 18:
 8010502:	782b      	ldrb	r3, [r5, #0]
 8010504:	f013 0f05 	tst.w	r3, #5
 8010508:	bf0c      	ite	eq
 801050a:	200b      	moveq	r0, #11
 801050c:	2012      	movne	r0, #18
 801050e:	f013 0f04 	tst.w	r3, #4
 8010512:	4b85      	ldr	r3, [pc, #532]	; (8010728 <GUI_Color_Screen+0x258>)
 8010514:	bf18      	it	ne
 8010516:	21ac      	movne	r1, #172	; 0xac
 8010518:	cb0c      	ldmia	r3, {r2, r3}
 801051a:	bf08      	it	eq
 801051c:	2196      	moveq	r1, #150	; 0x96
 801051e:	f00c fa50 	bl	801c9c2 <TFT_DrawBitmap>
		flag = 0;	
 8010522:	4b82      	ldr	r3, [pc, #520]	; (801072c <GUI_Color_Screen+0x25c>)
 8010524:	2200      	movs	r2, #0
 8010526:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 8010528:	4b81      	ldr	r3, [pc, #516]	; (8010730 <GUI_Color_Screen+0x260>)
 801052a:	701a      	strb	r2, [r3, #0]
		oldHighSignal = 0;
 801052c:	4b81      	ldr	r3, [pc, #516]	; (8010734 <GUI_Color_Screen+0x264>)
 801052e:	701a      	strb	r2, [r3, #0]
		if(Color_Field&Color_CIE_xy){GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);}
 8010530:	782b      	ldrb	r3, [r5, #0]
 8010532:	f013 0101 	ands.w	r1, r3, #1
 8010536:	f000 80cf 	beq.w	80106d8 <GUI_Color_Screen+0x208>
 801053a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801053e:	2012      	movs	r0, #18
 8010540:	f005 fdee 	bl	8016120 <GUI_Axes_Locus_XY>
	Prev_Inf_Screen = Color_Screen;
 8010544:	4a7c      	ldr	r2, [pc, #496]	; (8010738 <GUI_Color_Screen+0x268>)
	preGUI_screen_state = Color_Screen;
 8010546:	2305      	movs	r3, #5
 8010548:	7023      	strb	r3, [r4, #0]
	Prev_Inf_Screen = Color_Screen;
 801054a:	7013      	strb	r3, [r2, #0]
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 801054c:	4b7b      	ldr	r3, [pc, #492]	; (801073c <GUI_Color_Screen+0x26c>)
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	2b00      	cmp	r3, #0
 8010552:	f040 80d4 	bne.w	80106fe <GUI_Color_Screen+0x22e>
 8010556:	4b7a      	ldr	r3, [pc, #488]	; (8010740 <GUI_Color_Screen+0x270>)
 8010558:	edd3 8a00 	vldr	s17, [r3]
colorimetry_xy_buff[1] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[1] : colorimetry_xy1931[1];
 801055c:	ed93 8a01 	vldr	s16, [r3, #4]
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 8010560:	782b      	ldrb	r3, [r5, #0]
 8010562:	07d9      	lsls	r1, r3, #31
 8010564:	f140 8102 	bpl.w	801076c <GUI_Color_Screen+0x29c>
 8010568:	4b76      	ldr	r3, [pc, #472]	; (8010744 <GUI_Color_Screen+0x274>)
 801056a:	4a77      	ldr	r2, [pc, #476]	; (8010748 <GUI_Color_Screen+0x278>)
		 scr_refresh++;
 801056c:	4e77      	ldr	r6, [pc, #476]	; (801074c <GUI_Color_Screen+0x27c>)
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 801056e:	781b      	ldrb	r3, [r3, #0]
 8010570:	7812      	ldrb	r2, [r2, #0]
 8010572:	eef0 0a48 	vmov.f32	s1, s16
 8010576:	eeb0 0a68 	vmov.f32	s0, s17
 801057a:	2146      	movs	r1, #70	; 0x46
 801057c:	2014      	movs	r0, #20
 801057e:	f004 fa89 	bl	8014a94 <GUI_Text_xy_Measure>
		 scr_refresh++;
 8010582:	7833      	ldrb	r3, [r6, #0]
 8010584:	3301      	adds	r3, #1
 8010586:	b2db      	uxtb	r3, r3
   if(scr_refresh > 15 ){
 8010588:	2b0f      	cmp	r3, #15
		 scr_refresh++;
 801058a:	7033      	strb	r3, [r6, #0]
   if(scr_refresh > 15 ){
 801058c:	f240 809b 	bls.w	80106c6 <GUI_Color_Screen+0x1f6>
		 if(colorimetry_xy_buff[0] < 0.74 & colorimetry_xy_buff[1] < 0.84 ){
 8010590:	ee18 0a90 	vmov	r0, s17
 8010594:	f7ef fff0 	bl	8000578 <__aeabi_f2d>
 8010598:	a35b      	add	r3, pc, #364	; (adr r3, 8010708 <GUI_Color_Screen+0x238>)
 801059a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059e:	f04f 0401 	mov.w	r4, #1
 80105a2:	f7f0 faaf 	bl	8000b04 <__aeabi_dcmplt>
 80105a6:	b900      	cbnz	r0, 80105aa <GUI_Color_Screen+0xda>
 80105a8:	4604      	mov	r4, r0
 80105aa:	f014 0fff 	tst.w	r4, #255	; 0xff
 80105ae:	f000 808a 	beq.w	80106c6 <GUI_Color_Screen+0x1f6>
 80105b2:	ee18 0a10 	vmov	r0, s16
 80105b6:	f7ef ffdf 	bl	8000578 <__aeabi_f2d>
 80105ba:	a355      	add	r3, pc, #340	; (adr r3, 8010710 <GUI_Color_Screen+0x240>)
 80105bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c0:	f04f 0401 	mov.w	r4, #1
 80105c4:	f7f0 fa9e 	bl	8000b04 <__aeabi_dcmplt>
 80105c8:	b900      	cbnz	r0, 80105cc <GUI_Color_Screen+0xfc>
 80105ca:	4604      	mov	r4, r0
 80105cc:	f014 0fff 	tst.w	r4, #255	; 0xff
 80105d0:	d079      	beq.n	80106c6 <GUI_Color_Screen+0x1f6>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80105d2:	4b56      	ldr	r3, [pc, #344]	; (801072c <GUI_Color_Screen+0x25c>)
 80105d4:	4c5e      	ldr	r4, [pc, #376]	; (8010750 <GUI_Color_Screen+0x280>)
 80105d6:	781a      	ldrb	r2, [r3, #0]
 80105d8:	ed9f 9a5e 	vldr	s18, [pc, #376]	; 8010754 <GUI_Color_Screen+0x284>
 80105dc:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8010758 <GUI_Color_Screen+0x288>
 80105e0:	4698      	mov	r8, r3
 80105e2:	2a00      	cmp	r2, #0
 80105e4:	d03f      	beq.n	8010666 <GUI_Color_Screen+0x196>
 80105e6:	edd4 6a01 	vldr	s13, [r4, #4]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 80105ea:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801075c <GUI_Color_Screen+0x28c>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80105ee:	edd4 5a00 	vldr	s11, [r4]
 80105f2:	4a4d      	ldr	r2, [pc, #308]	; (8010728 <GUI_Color_Screen+0x258>)
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 80105f4:	eef1 6a66 	vneg.f32	s13, s13
 80105f8:	eea6 7a89 	vfma.f32	s14, s13, s18
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80105fc:	e892 0003 	ldmia.w	r2, {r0, r1}
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010600:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8010604:	ee37 7a46 	vsub.f32	s14, s14, s12
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 8010608:	ab01      	add	r3, sp, #4
 801060a:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801060e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8010760 <GUI_Color_Screen+0x290>
 8010612:	edcd 7a04 	vstr	s15, [sp, #16]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 8010616:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 801061a:	eee5 7aa9 	vfma.f32	s15, s11, s19
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 801061e:	eea6 7a89 	vfma.f32	s14, s13, s18
 8010622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010626:	ee37 7a46 	vsub.f32	s14, s14, s12
 801062a:	edcd 7a05 	vstr	s15, [sp, #20]
 801062e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010632:	edcd 7a06 	vstr	s15, [sp, #24]
 8010636:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 801063a:	eee5 7aa9 	vfma.f32	s15, s11, s19
 801063e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010646:	edcd 7a07 	vstr	s15, [sp, #28]
 801064a:	e883 0003 	stmia.w	r3, {r0, r1}
 801064e:	230f      	movs	r3, #15
 8010650:	9300      	str	r3, [sp, #0]
 8010652:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010656:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801065a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801065e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8010662:	f00c fa4b 	bl	801cafc <TFT_DrawCutBMP>
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010666:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 801066a:	eee8 7aa9 	vfma.f32	s15, s17, s19
 801066e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010672:	2204      	movs	r2, #4
		colorimetry_xy_old[0] = colorimetry_xy_buff[0];
 8010674:	edc4 8a00 	vstr	s17, [r4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010678:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		colorimetry_xy_old[1] = colorimetry_xy_buff[1];
 801067c:	ed84 8a01 	vstr	s16, [r4, #4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010680:	edcd 7a04 	vstr	s15, [sp, #16]
 8010684:	eddf 7a37 	vldr	s15, [pc, #220]	; 8010764 <GUI_Color_Screen+0x294>
 8010688:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 801068c:	eee8 7a49 	vfms.f32	s15, s16, s18
 8010690:	4620      	mov	r0, r4
 8010692:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010696:	edcd 7a04 	vstr	s15, [sp, #16]
 801069a:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 801069e:	4629      	mov	r1, r5
 80106a0:	f00b ffc9 	bl	801c636 <TFT_DrawFilledCircle>
		TFT_DrawFilledCircle(18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 2, TFT_Black);
 80106a4:	2300      	movs	r3, #0
 80106a6:	2202      	movs	r2, #2
 80106a8:	4629      	mov	r1, r5
 80106aa:	4620      	mov	r0, r4
 80106ac:	f00b ffc3 	bl	801c636 <TFT_DrawFilledCircle>
		GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);
 80106b0:	2200      	movs	r2, #0
 80106b2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80106b6:	2012      	movs	r0, #18
 80106b8:	f005 fd32 	bl	8016120 <GUI_Axes_Locus_XY>
		flag = 1;
 80106bc:	2301      	movs	r3, #1
 80106be:	f888 3000 	strb.w	r3, [r8]
			scr_refresh = 0;
 80106c2:	2300      	movs	r3, #0
 80106c4:	7033      	strb	r3, [r6, #0]
	TFT_direction = 0x00;
 80106c6:	2300      	movs	r3, #0
 80106c8:	703b      	strb	r3, [r7, #0]
}         
 80106ca:	b009      	add	sp, #36	; 0x24
 80106cc:	ecbd 8b04 	vpop	{d8-d9}
 80106d0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GUI_SignalLevel();
 80106d4:	f7ff bdfe 	b.w	80102d4 <GUI_SignalLevel>
		else if(Color_Field&Color_CIE_Luv){GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);}
 80106d8:	f013 0204 	ands.w	r2, r3, #4
 80106dc:	d006      	beq.n	80106ec <GUI_Color_Screen+0x21c>
 80106de:	460a      	mov	r2, r1
 80106e0:	2012      	movs	r0, #18
 80106e2:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80106e6:	f005 fd81 	bl	80161ec <GUI_Axes_Locus_LUV>
 80106ea:	e72b      	b.n	8010544 <GUI_Color_Screen+0x74>
		else if(Color_Field&Color_CIE_Lab) {GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);}
 80106ec:	0798      	lsls	r0, r3, #30
 80106ee:	f57f af29 	bpl.w	8010544 <GUI_Color_Screen+0x74>
 80106f2:	f240 1113 	movw	r1, #275	; 0x113
 80106f6:	2088      	movs	r0, #136	; 0x88
 80106f8:	f005 fdde 	bl	80162b8 <GUI_Axes_Locus_Lab>
 80106fc:	e722      	b.n	8010544 <GUI_Color_Screen+0x74>
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 80106fe:	4b1a      	ldr	r3, [pc, #104]	; (8010768 <GUI_Color_Screen+0x298>)
 8010700:	e72a      	b.n	8010558 <GUI_Color_Screen+0x88>
 8010702:	bf00      	nop
 8010704:	f3af 8000 	nop.w
 8010708:	7ae147ae 	.word	0x7ae147ae
 801070c:	3fe7ae14 	.word	0x3fe7ae14
 8010710:	ae147ae1 	.word	0xae147ae1
 8010714:	3feae147 	.word	0x3feae147
 8010718:	2000022a 	.word	0x2000022a
 801071c:	200056a0 	.word	0x200056a0
 8010720:	200056ff 	.word	0x200056ff
 8010724:	20005708 	.word	0x20005708
 8010728:	20091050 	.word	0x20091050
 801072c:	20005725 	.word	0x20005725
 8010730:	20005727 	.word	0x20005727
 8010734:	20005726 	.word	0x20005726
 8010738:	20090ab5 	.word	0x20090ab5
 801073c:	20005704 	.word	0x20005704
 8010740:	2008f548 	.word	0x2008f548
 8010744:	20000ec0 	.word	0x20000ec0
 8010748:	20000ec1 	.word	0x20000ec1
 801074c:	2000572a 	.word	0x2000572a
 8010750:	2000571c 	.word	0x2000571c
 8010754:	43960000 	.word	0x43960000
 8010758:	43938000 	.word	0x43938000
 801075c:	43790000 	.word	0x43790000
 8010760:	43c78000 	.word	0x43c78000
 8010764:	43c80000 	.word	0x43c80000
 8010768:	2008f540 	.word	0x2008f540
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 801076c:	075a      	lsls	r2, r3, #29
 801076e:	f140 80fb 	bpl.w	8010968 <GUI_Color_Screen+0x498>
 8010772:	4c71      	ldr	r4, [pc, #452]	; (8010938 <GUI_Color_Screen+0x468>)
 8010774:	4b71      	ldr	r3, [pc, #452]	; (801093c <GUI_Color_Screen+0x46c>)
 8010776:	4a72      	ldr	r2, [pc, #456]	; (8010940 <GUI_Color_Screen+0x470>)
		scr_refresh++;
 8010778:	4e72      	ldr	r6, [pc, #456]	; (8010944 <GUI_Color_Screen+0x474>)
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 801077a:	781b      	ldrb	r3, [r3, #0]
 801077c:	7812      	ldrb	r2, [r2, #0]
 801077e:	edd4 0a01 	vldr	s1, [r4, #4]
 8010782:	ed94 0a00 	vldr	s0, [r4]
 8010786:	2146      	movs	r1, #70	; 0x46
 8010788:	2014      	movs	r0, #20
 801078a:	f004 fa45 	bl	8014c18 <GUI_Text_uv_Measure>
		scr_refresh++;
 801078e:	7833      	ldrb	r3, [r6, #0]
 8010790:	3301      	adds	r3, #1
 8010792:	b2db      	uxtb	r3, r3
		if(scr_refresh > 15 ){
 8010794:	2b0f      	cmp	r3, #15
		scr_refresh++;
 8010796:	7033      	strb	r3, [r6, #0]
		if(scr_refresh > 15 ){
 8010798:	d995      	bls.n	80106c6 <GUI_Color_Screen+0x1f6>
		if(colorimetry_uv1976[0] < 0.63 & colorimetry_uv1976[1] < 0.59 & colorimetry_uv1976[0] > 0.0 & colorimetry_uv1976[1] > 0.0){
 801079a:	edd4 7a00 	vldr	s15, [r4]
 801079e:	ed94 8a01 	vldr	s16, [r4, #4]
 80107a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80107a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107aa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80107ae:	bfcc      	ite	gt
 80107b0:	2501      	movgt	r5, #1
 80107b2:	2500      	movle	r5, #0
 80107b4:	ee17 0a90 	vmov	r0, s15
 80107b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107bc:	f005 0501 	and.w	r5, r5, #1
 80107c0:	bfd8      	it	le
 80107c2:	2500      	movle	r5, #0
 80107c4:	f7ef fed8 	bl	8000578 <__aeabi_f2d>
 80107c8:	a357      	add	r3, pc, #348	; (adr r3, 8010928 <GUI_Color_Screen+0x458>)
 80107ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ce:	f04f 0801 	mov.w	r8, #1
 80107d2:	f7f0 f997 	bl	8000b04 <__aeabi_dcmplt>
 80107d6:	b900      	cbnz	r0, 80107da <GUI_Color_Screen+0x30a>
 80107d8:	4680      	mov	r8, r0
 80107da:	ea15 0f08 	tst.w	r5, r8
 80107de:	f43f af72 	beq.w	80106c6 <GUI_Color_Screen+0x1f6>
 80107e2:	ee18 0a10 	vmov	r0, s16
 80107e6:	f7ef fec7 	bl	8000578 <__aeabi_f2d>
 80107ea:	a351      	add	r3, pc, #324	; (adr r3, 8010930 <GUI_Color_Screen+0x460>)
 80107ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f0:	f04f 0501 	mov.w	r5, #1
 80107f4:	f7f0 f986 	bl	8000b04 <__aeabi_dcmplt>
 80107f8:	b900      	cbnz	r0, 80107fc <GUI_Color_Screen+0x32c>
 80107fa:	4605      	mov	r5, r0
 80107fc:	f015 0fff 	tst.w	r5, #255	; 0xff
 8010800:	f43f af61 	beq.w	80106c6 <GUI_Color_Screen+0x1f6>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010804:	4d50      	ldr	r5, [pc, #320]	; (8010948 <GUI_Color_Screen+0x478>)
 8010806:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8010964 <GUI_Color_Screen+0x494>
 801080a:	782a      	ldrb	r2, [r5, #0]
 801080c:	eddf 9a4f 	vldr	s19, [pc, #316]	; 801094c <GUI_Color_Screen+0x47c>
 8010810:	eddf 8a4f 	vldr	s17, [pc, #316]	; 8010950 <GUI_Color_Screen+0x480>
 8010814:	2a00      	cmp	r2, #0
 8010816:	d03f      	beq.n	8010898 <GUI_Color_Screen+0x3c8>
 8010818:	edd8 6a01 	vldr	s13, [r8, #4]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 801081c:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8010954 <GUI_Color_Screen+0x484>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010820:	edd8 5a00 	vldr	s11, [r8]
 8010824:	4a4c      	ldr	r2, [pc, #304]	; (8010958 <GUI_Color_Screen+0x488>)
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010826:	eef1 6a66 	vneg.f32	s13, s13
 801082a:	eea6 7aa9 	vfma.f32	s14, s13, s19
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 801082e:	e892 0003 	ldmia.w	r2, {r0, r1}
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010832:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8010836:	ee37 7a46 	vsub.f32	s14, s14, s12
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 801083a:	ab01      	add	r3, sp, #4
 801083c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010840:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801095c <GUI_Color_Screen+0x48c>
 8010844:	edcd 7a04 	vstr	s15, [sp, #16]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010848:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 801084c:	eee5 7aa8 	vfma.f32	s15, s11, s17
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010850:	eea6 7aa9 	vfma.f32	s14, s13, s19
 8010854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010858:	ee37 7a46 	vsub.f32	s14, s14, s12
 801085c:	edcd 7a05 	vstr	s15, [sp, #20]
 8010860:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010864:	edcd 7a06 	vstr	s15, [sp, #24]
 8010868:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 801086c:	eee5 7aa8 	vfma.f32	s15, s11, s17
 8010870:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010878:	edcd 7a07 	vstr	s15, [sp, #28]
 801087c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010880:	230c      	movs	r3, #12
 8010882:	9300      	str	r3, [sp, #0]
 8010884:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010888:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801088c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010890:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8010894:	f00c f932 	bl	801cafc <TFT_DrawCutBMP>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010898:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8010960 <GUI_Color_Screen+0x490>
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 801089c:	ed94 7a01 	vldr	s14, [r4, #4]
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 80108a0:	edd4 7a00 	vldr	s15, [r4]
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 80108a4:	ed88 7a01 	vstr	s14, [r8, #4]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 80108a8:	eef0 6a49 	vmov.f32	s13, s18
 80108ac:	eee7 6a69 	vfms.f32	s13, s14, s19
 80108b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80108b4:	2204      	movs	r2, #4
 80108b6:	eeb3 8a02 	vmov.f32	s16, #50	; 0x41900000  18.0
 80108ba:	eebd 7ae6 	vcvt.s32.f32	s14, s13
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 80108be:	edc8 7a00 	vstr	s15, [r8]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 80108c2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80108c6:	eeb0 7a48 	vmov.f32	s14, s16
 80108ca:	eea7 7aa8 	vfma.f32	s14, s15, s17
 80108ce:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80108d2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80108d6:	edcd 7a05 	vstr	s15, [sp, #20]
 80108da:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 80108de:	f00b feaa 	bl	801c636 <TFT_DrawFilledCircle>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 2, TFT_Black);
 80108e2:	edd4 7a01 	vldr	s15, [r4, #4]
 80108e6:	eea7 9ae9 	vfms.f32	s18, s15, s19
 80108ea:	2300      	movs	r3, #0
 80108ec:	2202      	movs	r2, #2
 80108ee:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 80108f2:	edcd 7a04 	vstr	s15, [sp, #16]
 80108f6:	edd4 7a00 	vldr	s15, [r4]
 80108fa:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80108fe:	eea7 8aa8 	vfma.f32	s16, s15, s17
 8010902:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010906:	edcd 7a05 	vstr	s15, [sp, #20]
 801090a:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 801090e:	f00b fe92 	bl	801c636 <TFT_DrawFilledCircle>
			GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);
 8010912:	2200      	movs	r2, #0
 8010914:	f44f 71cb 	mov.w	r1, #406	; 0x196
 8010918:	2012      	movs	r0, #18
 801091a:	f005 fc67 	bl	80161ec <GUI_Axes_Locus_LUV>
			flag = 1;
 801091e:	2301      	movs	r3, #1
 8010920:	702b      	strb	r3, [r5, #0]
 8010922:	e6ce      	b.n	80106c2 <GUI_Color_Screen+0x1f2>
 8010924:	f3af 8000 	nop.w
 8010928:	c28f5c29 	.word	0xc28f5c29
 801092c:	3fe428f5 	.word	0x3fe428f5
 8010930:	ae147ae1 	.word	0xae147ae1
 8010934:	3fe2e147 	.word	0x3fe2e147
 8010938:	2008f538 	.word	0x2008f538
 801093c:	20000ec0 	.word	0x20000ec0
 8010940:	20000ec1 	.word	0x20000ec1
 8010944:	2000572a 	.word	0x2000572a
 8010948:	20005725 	.word	0x20005725
 801094c:	43c60000 	.word	0x43c60000
 8010950:	43c98000 	.word	0x43c98000
 8010954:	43690000 	.word	0x43690000
 8010958:	20091050 	.word	0x20091050
 801095c:	43ca8000 	.word	0x43ca8000
 8010960:	43cb0000 	.word	0x43cb0000
 8010964:	20005714 	.word	0x20005714
	if(Color_Field&Color_CIE_Lab) {GUI_Text_LAB_Measure(20, 54, colorimetry_LAB[0], colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 8010968:	079b      	lsls	r3, r3, #30
 801096a:	f57f aeac 	bpl.w	80106c6 <GUI_Color_Screen+0x1f6>
 801096e:	4984      	ldr	r1, [pc, #528]	; (8010b80 <GUI_Color_Screen+0x6b0>)
 8010970:	4c84      	ldr	r4, [pc, #528]	; (8010b84 <GUI_Color_Screen+0x6b4>)
 8010972:	7809      	ldrb	r1, [r1, #0]
 8010974:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010978:	f9b4 2000 	ldrsh.w	r2, [r4]
 801097c:	9102      	str	r1, [sp, #8]
 801097e:	4982      	ldr	r1, [pc, #520]	; (8010b88 <GUI_Color_Screen+0x6b8>)
 8010980:	7809      	ldrb	r1, [r1, #0]
 8010982:	9101      	str	r1, [sp, #4]
 8010984:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010988:	9100      	str	r1, [sp, #0]
 801098a:	2014      	movs	r0, #20
 801098c:	2136      	movs	r1, #54	; 0x36
 801098e:	f005 f8fb 	bl	8015b88 <GUI_Text_LAB_Measure>
		if(colorimetry_LAB[1] < 128 & colorimetry_LAB[1] > -128 & colorimetry_LAB[2]<128 & colorimetry_LAB[2] > -128){
 8010992:	8863      	ldrh	r3, [r4, #2]
 8010994:	337f      	adds	r3, #127	; 0x7f
 8010996:	b29b      	uxth	r3, r3
 8010998:	2bfe      	cmp	r3, #254	; 0xfe
 801099a:	f63f ae94 	bhi.w	80106c6 <GUI_Color_Screen+0x1f6>
 801099e:	88a3      	ldrh	r3, [r4, #4]
 80109a0:	337f      	adds	r3, #127	; 0x7f
 80109a2:	b29b      	uxth	r3, r3
 80109a4:	2bfe      	cmp	r3, #254	; 0xfe
 80109a6:	f63f ae8e 	bhi.w	80106c6 <GUI_Color_Screen+0x1f6>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 80109aa:	4d78      	ldr	r5, [pc, #480]	; (8010b8c <GUI_Color_Screen+0x6bc>)
 80109ac:	4e78      	ldr	r6, [pc, #480]	; (8010b90 <GUI_Color_Screen+0x6c0>)
 80109ae:	782b      	ldrb	r3, [r5, #0]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d05d      	beq.n	8010a70 <GUI_Color_Screen+0x5a0>
 80109b4:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 80109b8:	f7ef fdcc 	bl	8000554 <__aeabi_i2d>
 80109bc:	a368      	add	r3, pc, #416	; (adr r3, 8010b60 <GUI_Color_Screen+0x690>)
 80109be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c2:	f7ef fe2d 	bl	8000620 <__aeabi_dmul>
 80109c6:	4682      	mov	sl, r0
 80109c8:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 80109cc:	468b      	mov	fp, r1
 80109ce:	f7ef fdc1 	bl	8000554 <__aeabi_i2d>
 80109d2:	a363      	add	r3, pc, #396	; (adr r3, 8010b60 <GUI_Color_Screen+0x690>)
 80109d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109d8:	f7ef fe22 	bl	8000620 <__aeabi_dmul>
 80109dc:	4680      	mov	r8, r0
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 80109de:	4602      	mov	r2, r0
 80109e0:	460b      	mov	r3, r1
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 80109e2:	4689      	mov	r9, r1
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 80109e4:	2000      	movs	r0, #0
 80109e6:	496b      	ldr	r1, [pc, #428]	; (8010b94 <GUI_Color_Screen+0x6c4>)
 80109e8:	f7ef fc66 	bl	80002b8 <__aeabi_dsub>
 80109ec:	2200      	movs	r2, #0
 80109ee:	4b6a      	ldr	r3, [pc, #424]	; (8010b98 <GUI_Color_Screen+0x6c8>)
 80109f0:	f7ef fc62 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 80109f4:	f7f0 f8ec 	bl	8000bd0 <__aeabi_d2uiz>
 80109f8:	b283      	uxth	r3, r0
 80109fa:	9304      	str	r3, [sp, #16]
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 80109fc:	2200      	movs	r2, #0
 80109fe:	4b67      	ldr	r3, [pc, #412]	; (8010b9c <GUI_Color_Screen+0x6cc>)
 8010a00:	4650      	mov	r0, sl
 8010a02:	4659      	mov	r1, fp
 8010a04:	f7ef fc5a 	bl	80002bc <__adddf3>
 8010a08:	2200      	movs	r2, #0
 8010a0a:	4b63      	ldr	r3, [pc, #396]	; (8010b98 <GUI_Color_Screen+0x6c8>)
 8010a0c:	f7ef fc54 	bl	80002b8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 8010a10:	f7f0 f8de 	bl	8000bd0 <__aeabi_d2uiz>
 8010a14:	b283      	uxth	r3, r0
 8010a16:	4642      	mov	r2, r8
 8010a18:	9305      	str	r3, [sp, #20]
 8010a1a:	a153      	add	r1, pc, #332	; (adr r1, 8010b68 <GUI_Color_Screen+0x698>)
 8010a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a20:	464b      	mov	r3, r9
 8010a22:	f7ef fc49 	bl	80002b8 <__aeabi_dsub>
 8010a26:	2200      	movs	r2, #0
 8010a28:	4b5b      	ldr	r3, [pc, #364]	; (8010b98 <GUI_Color_Screen+0x6c8>)
 8010a2a:	f7ef fc45 	bl	80002b8 <__aeabi_dsub>
 8010a2e:	f7f0 f8cf 	bl	8000bd0 <__aeabi_d2uiz>
 8010a32:	a34f      	add	r3, pc, #316	; (adr r3, 8010b70 <GUI_Color_Screen+0x6a0>)
 8010a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a38:	fa1f f880 	uxth.w	r8, r0
 8010a3c:	4659      	mov	r1, fp
 8010a3e:	4650      	mov	r0, sl
 8010a40:	f7ef fc3c 	bl	80002bc <__adddf3>
 8010a44:	2200      	movs	r2, #0
 8010a46:	4b54      	ldr	r3, [pc, #336]	; (8010b98 <GUI_Color_Screen+0x6c8>)
 8010a48:	f7ef fc36 	bl	80002b8 <__aeabi_dsub>
 8010a4c:	f7f0 f8c0 	bl	8000bd0 <__aeabi_d2uiz>
 8010a50:	4a53      	ldr	r2, [pc, #332]	; (8010ba0 <GUI_Color_Screen+0x6d0>)
 8010a52:	fa1f fe80 	uxth.w	lr, r0
 8010a56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010a5a:	ab01      	add	r3, sp, #4
 8010a5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010a60:	230c      	movs	r3, #12
 8010a62:	9300      	str	r3, [sp, #0]
 8010a64:	9a05      	ldr	r2, [sp, #20]
 8010a66:	9b04      	ldr	r3, [sp, #16]
 8010a68:	4641      	mov	r1, r8
 8010a6a:	4670      	mov	r0, lr
 8010a6c:	f00c f846 	bl	801cafc <TFT_DrawCutBMP>
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010a70:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 8010a74:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010a78:	80b0      	strh	r0, [r6, #4]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 8010a7a:	ee07 0a90 	vmov	s15, r0
 8010a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 8010a82:	f8a6 8002 	strh.w	r8, [r6, #2]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 8010a86:	ee17 0a90 	vmov	r0, s15
 8010a8a:	f7ef fd75 	bl	8000578 <__aeabi_f2d>
 8010a8e:	a334      	add	r3, pc, #208	; (adr r3, 8010b60 <GUI_Color_Screen+0x690>)
 8010a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a94:	f7ef fdc4 	bl	8000620 <__aeabi_dmul>
 8010a98:	4602      	mov	r2, r0
 8010a9a:	460b      	mov	r3, r1
 8010a9c:	a136      	add	r1, pc, #216	; (adr r1, 8010b78 <GUI_Color_Screen+0x6a8>)
 8010a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010aa2:	f7ef fc09 	bl	80002b8 <__aeabi_dsub>
 8010aa6:	f7f0 f86b 	bl	8000b80 <__aeabi_d2iz>
 8010aaa:	ee07 8a90 	vmov	s15, r8
 8010aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010ab2:	b206      	sxth	r6, r0
 8010ab4:	ee17 0a90 	vmov	r0, s15
 8010ab8:	f7ef fd5e 	bl	8000578 <__aeabi_f2d>
 8010abc:	a328      	add	r3, pc, #160	; (adr r3, 8010b60 <GUI_Color_Screen+0x690>)
 8010abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ac2:	f7ef fdad 	bl	8000620 <__aeabi_dmul>
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	4b36      	ldr	r3, [pc, #216]	; (8010ba4 <GUI_Color_Screen+0x6d4>)
 8010aca:	f7ef fbf7 	bl	80002bc <__adddf3>
 8010ace:	f7f0 f857 	bl	8000b80 <__aeabi_d2iz>
 8010ad2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010ad6:	2204      	movs	r2, #4
 8010ad8:	4631      	mov	r1, r6
 8010ada:	b200      	sxth	r0, r0
 8010adc:	f00b fdab 	bl	801c636 <TFT_DrawFilledCircle>
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 2, TFT_Black);
 8010ae0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8010ae4:	ee07 0a90 	vmov	s15, r0
 8010ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010aec:	ee17 0a90 	vmov	r0, s15
 8010af0:	f7ef fd42 	bl	8000578 <__aeabi_f2d>
 8010af4:	a31a      	add	r3, pc, #104	; (adr r3, 8010b60 <GUI_Color_Screen+0x690>)
 8010af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010afa:	f7ef fd91 	bl	8000620 <__aeabi_dmul>
 8010afe:	4602      	mov	r2, r0
 8010b00:	460b      	mov	r3, r1
 8010b02:	a11d      	add	r1, pc, #116	; (adr r1, 8010b78 <GUI_Color_Screen+0x6a8>)
 8010b04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b08:	f7ef fbd6 	bl	80002b8 <__aeabi_dsub>
 8010b0c:	f7f0 f838 	bl	8000b80 <__aeabi_d2iz>
 8010b10:	b206      	sxth	r6, r0
 8010b12:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8010b16:	ee07 0a90 	vmov	s15, r0
 8010b1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b1e:	ee17 0a90 	vmov	r0, s15
 8010b22:	f7ef fd29 	bl	8000578 <__aeabi_f2d>
 8010b26:	a30e      	add	r3, pc, #56	; (adr r3, 8010b60 <GUI_Color_Screen+0x690>)
 8010b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b2c:	f7ef fd78 	bl	8000620 <__aeabi_dmul>
 8010b30:	2200      	movs	r2, #0
 8010b32:	4b1c      	ldr	r3, [pc, #112]	; (8010ba4 <GUI_Color_Screen+0x6d4>)
 8010b34:	f7ef fbc2 	bl	80002bc <__adddf3>
 8010b38:	f7f0 f822 	bl	8000b80 <__aeabi_d2iz>
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	2202      	movs	r2, #2
 8010b40:	4631      	mov	r1, r6
 8010b42:	b200      	sxth	r0, r0
 8010b44:	f00b fd77 	bl	801c636 <TFT_DrawFilledCircle>
				GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);
 8010b48:	2200      	movs	r2, #0
 8010b4a:	f240 1113 	movw	r1, #275	; 0x113
 8010b4e:	2088      	movs	r0, #136	; 0x88
 8010b50:	f005 fbb2 	bl	80162b8 <GUI_Axes_Locus_Lab>
				flag = 1;
 8010b54:	2301      	movs	r3, #1
 8010b56:	702b      	strb	r3, [r5, #0]
				scr_refresh = 0;
 8010b58:	4b13      	ldr	r3, [pc, #76]	; (8010ba8 <GUI_Color_Screen+0x6d8>)
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	701a      	strb	r2, [r3, #0]
 8010b5e:	e5b2      	b.n	80106c6 <GUI_Color_Screen+0x1f6>
 8010b60:	5a1cac08 	.word	0x5a1cac08
 8010b64:	3fef3b64 	.word	0x3fef3b64
 8010b68:	00000000 	.word	0x00000000
 8010b6c:	40712000 	.word	0x40712000
 8010b70:	00000000 	.word	0x00000000
 8010b74:	4060e000 	.word	0x4060e000
 8010b78:	00000000 	.word	0x00000000
 8010b7c:	40713000 	.word	0x40713000
 8010b80:	20000ec0 	.word	0x20000ec0
 8010b84:	2008f51c 	.word	0x2008f51c
 8010b88:	20000ec1 	.word	0x20000ec1
 8010b8c:	20005725 	.word	0x20005725
 8010b90:	2000570c 	.word	0x2000570c
 8010b94:	405f0000 	.word	0x405f0000
 8010b98:	40140000 	.word	0x40140000
 8010b9c:	405f4000 	.word	0x405f4000
 8010ba0:	20091050 	.word	0x20091050
 8010ba4:	40610000 	.word	0x40610000
 8010ba8:	2000572a 	.word	0x2000572a

08010bac <GUI_ColorRend_Screen>:
void GUI_ColorRend_Screen(){
 8010bac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 8010bae:	4b39      	ldr	r3, [pc, #228]	; (8010c94 <GUI_ColorRend_Screen+0xe8>)
 8010bb0:	4d39      	ldr	r5, [pc, #228]	; (8010c98 <GUI_ColorRend_Screen+0xec>)
 8010bb2:	4c3a      	ldr	r4, [pc, #232]	; (8010c9c <GUI_ColorRend_Screen+0xf0>)
 8010bb4:	2202      	movs	r2, #2
 8010bb6:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Rotation_Screen_Rend_Old != Rotation_Screen_Rend){
 8010bb8:	4b39      	ldr	r3, [pc, #228]	; (8010ca0 <GUI_ColorRend_Screen+0xf4>)
 8010bba:	4a3a      	ldr	r2, [pc, #232]	; (8010ca4 <GUI_ColorRend_Screen+0xf8>)
 8010bbc:	781b      	ldrb	r3, [r3, #0]
 8010bbe:	7812      	ldrb	r2, [r2, #0]
 8010bc0:	429a      	cmp	r2, r3
 8010bc2:	d103      	bne.n	8010bcc <GUI_ColorRend_Screen+0x20>
 8010bc4:	782a      	ldrb	r2, [r5, #0]
 8010bc6:	7823      	ldrb	r3, [r4, #0]
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d02b      	beq.n	8010c24 <GUI_ColorRend_Screen+0x78>
	GUI_Panels();		
 8010bcc:	f7fe fe1c 	bl	800f808 <GUI_Panels>
	oldLowSignal = 0;
 8010bd0:	4a35      	ldr	r2, [pc, #212]	; (8010ca8 <GUI_ColorRend_Screen+0xfc>)
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	7013      	strb	r3, [r2, #0]
	oldHighSignal = 0;
 8010bd6:	4a35      	ldr	r2, [pc, #212]	; (8010cac <GUI_ColorRend_Screen+0x100>)
 8010bd8:	7013      	strb	r3, [r2, #0]
	Rotation_Screen_Rend_Old = Rotation_Screen_Rend;
 8010bda:	7823      	ldrb	r3, [r4, #0]
 8010bdc:	702b      	strb	r3, [r5, #0]
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 8010bde:	4d34      	ldr	r5, [pc, #208]	; (8010cb0 <GUI_ColorRend_Screen+0x104>)
 8010be0:	782a      	ldrb	r2, [r5, #0]
 8010be2:	2a00      	cmp	r2, #0
 8010be4:	d03c      	beq.n	8010c60 <GUI_ColorRend_Screen+0xb4>
 8010be6:	4b33      	ldr	r3, [pc, #204]	; (8010cb4 <GUI_ColorRend_Screen+0x108>)
 8010be8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8010bec:	f7f0 f810 	bl	8000c10 <__aeabi_d2f>
 8010bf0:	210d      	movs	r1, #13
 8010bf2:	ee00 0a10 	vmov	s0, r0
 8010bf6:	2055      	movs	r0, #85	; 0x55
 8010bf8:	f002 fb4c 	bl	8013294 <GUI_Bar_Measure>
	Prev_Inf_Screen = Color_Rendition_Screen;
 8010bfc:	4b2e      	ldr	r3, [pc, #184]	; (8010cb8 <GUI_ColorRend_Screen+0x10c>)
 8010bfe:	2206      	movs	r2, #6
 8010c00:	701a      	strb	r2, [r3, #0]
	if (Color_rend_Field&CRI_CQS){
 8010c02:	782b      	ldrb	r3, [r5, #0]
 8010c04:	07da      	lsls	r2, r3, #31
 8010c06:	d52d      	bpl.n	8010c64 <GUI_ColorRend_Screen+0xb8>
		CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 8010c08:	492c      	ldr	r1, [pc, #176]	; (8010cbc <GUI_ColorRend_Screen+0x110>)
 8010c0a:	4b2d      	ldr	r3, [pc, #180]	; (8010cc0 <GUI_ColorRend_Screen+0x114>)
 8010c0c:	4a2d      	ldr	r2, [pc, #180]	; (8010cc4 <GUI_ColorRend_Screen+0x118>)
 8010c0e:	f991 1000 	ldrsb.w	r1, [r1]
 8010c12:	f993 3000 	ldrsb.w	r3, [r3]
 8010c16:	f992 2000 	ldrsb.w	r2, [r2]
 8010c1a:	7820      	ldrb	r0, [r4, #0]
 8010c1c:	9100      	str	r1, [sp, #0]
 8010c1e:	492a      	ldr	r1, [pc, #168]	; (8010cc8 <GUI_ColorRend_Screen+0x11c>)
 8010c20:	f7fd f9ba 	bl	800df98 <CRI_Draw>
	if(Calc_ColorRend != Calc_ColorRend_old){
 8010c24:	4b29      	ldr	r3, [pc, #164]	; (8010ccc <GUI_ColorRend_Screen+0x120>)
 8010c26:	781a      	ldrb	r2, [r3, #0]
 8010c28:	4b29      	ldr	r3, [pc, #164]	; (8010cd0 <GUI_ColorRend_Screen+0x124>)
 8010c2a:	7819      	ldrb	r1, [r3, #0]
 8010c2c:	4291      	cmp	r1, r2
 8010c2e:	d012      	beq.n	8010c56 <GUI_ColorRend_Screen+0xaa>
		Calc_ColorRend_old = Calc_ColorRend;
 8010c30:	701a      	strb	r2, [r3, #0]
		if (Color_rend_Field&CRI_CQS){
 8010c32:	4b1f      	ldr	r3, [pc, #124]	; (8010cb0 <GUI_ColorRend_Screen+0x104>)
 8010c34:	781b      	ldrb	r3, [r3, #0]
 8010c36:	07db      	lsls	r3, r3, #31
 8010c38:	d520      	bpl.n	8010c7c <GUI_ColorRend_Screen+0xd0>
			CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 8010c3a:	4920      	ldr	r1, [pc, #128]	; (8010cbc <GUI_ColorRend_Screen+0x110>)
 8010c3c:	4b20      	ldr	r3, [pc, #128]	; (8010cc0 <GUI_ColorRend_Screen+0x114>)
 8010c3e:	4a21      	ldr	r2, [pc, #132]	; (8010cc4 <GUI_ColorRend_Screen+0x118>)
 8010c40:	f991 1000 	ldrsb.w	r1, [r1]
 8010c44:	f993 3000 	ldrsb.w	r3, [r3]
 8010c48:	f992 2000 	ldrsb.w	r2, [r2]
 8010c4c:	7820      	ldrb	r0, [r4, #0]
 8010c4e:	9100      	str	r1, [sp, #0]
 8010c50:	491d      	ldr	r1, [pc, #116]	; (8010cc8 <GUI_ColorRend_Screen+0x11c>)
 8010c52:	f7fd f9a1 	bl	800df98 <CRI_Draw>
}
 8010c56:	b003      	add	sp, #12
 8010c58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GUI_SignalLevel();
 8010c5c:	f7ff bb3a 	b.w	80102d4 <GUI_SignalLevel>
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 8010c60:	4b1c      	ldr	r3, [pc, #112]	; (8010cd4 <GUI_ColorRend_Screen+0x128>)
 8010c62:	e7c1      	b.n	8010be8 <GUI_ColorRend_Screen+0x3c>
		CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 8010c64:	491c      	ldr	r1, [pc, #112]	; (8010cd8 <GUI_ColorRend_Screen+0x12c>)
 8010c66:	4b1d      	ldr	r3, [pc, #116]	; (8010cdc <GUI_ColorRend_Screen+0x130>)
 8010c68:	4a1d      	ldr	r2, [pc, #116]	; (8010ce0 <GUI_ColorRend_Screen+0x134>)
 8010c6a:	7809      	ldrb	r1, [r1, #0]
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	7812      	ldrb	r2, [r2, #0]
 8010c70:	7820      	ldrb	r0, [r4, #0]
 8010c72:	9100      	str	r1, [sp, #0]
 8010c74:	491b      	ldr	r1, [pc, #108]	; (8010ce4 <GUI_ColorRend_Screen+0x138>)
 8010c76:	f7fb f965 	bl	800bf44 <CQS_Draw>
 8010c7a:	e7d3      	b.n	8010c24 <GUI_ColorRend_Screen+0x78>
			CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 8010c7c:	4916      	ldr	r1, [pc, #88]	; (8010cd8 <GUI_ColorRend_Screen+0x12c>)
 8010c7e:	4b17      	ldr	r3, [pc, #92]	; (8010cdc <GUI_ColorRend_Screen+0x130>)
 8010c80:	4a17      	ldr	r2, [pc, #92]	; (8010ce0 <GUI_ColorRend_Screen+0x134>)
 8010c82:	7809      	ldrb	r1, [r1, #0]
 8010c84:	781b      	ldrb	r3, [r3, #0]
 8010c86:	7812      	ldrb	r2, [r2, #0]
 8010c88:	7820      	ldrb	r0, [r4, #0]
 8010c8a:	9100      	str	r1, [sp, #0]
 8010c8c:	4915      	ldr	r1, [pc, #84]	; (8010ce4 <GUI_ColorRend_Screen+0x138>)
 8010c8e:	f7fb f959 	bl	800bf44 <CQS_Draw>
 8010c92:	e7e0      	b.n	8010c56 <GUI_ColorRend_Screen+0xaa>
 8010c94:	20000231 	.word	0x20000231
 8010c98:	20090ab8 	.word	0x20090ab8
 8010c9c:	20005709 	.word	0x20005709
 8010ca0:	2000022a 	.word	0x2000022a
 8010ca4:	20005701 	.word	0x20005701
 8010ca8:	20005727 	.word	0x20005727
 8010cac:	20005726 	.word	0x20005726
 8010cb0:	20005700 	.word	0x20005700
 8010cb4:	200909c0 	.word	0x200909c0
 8010cb8:	20090ab5 	.word	0x20090ab5
 8010cbc:	20004658 	.word	0x20004658
 8010cc0:	2000465a 	.word	0x2000465a
 8010cc4:	20004659 	.word	0x20004659
 8010cc8:	2000465b 	.word	0x2000465b
 8010ccc:	200056fd 	.word	0x200056fd
 8010cd0:	200056fe 	.word	0x200056fe
 8010cd4:	200906f0 	.word	0x200906f0
 8010cd8:	20003634 	.word	0x20003634
 8010cdc:	20003635 	.word	0x20003635
 8010ce0:	20003633 	.word	0x20003633
 8010ce4:	20003624 	.word	0x20003624

08010ce8 <GUI_Display_Refresh>:

void GUI_Display_Refresh()
{
 8010ce8:	b508      	push	{r3, lr}
	
	switch(GUI_screen_state){
 8010cea:	4b2d      	ldr	r3, [pc, #180]	; (8010da0 <GUI_Display_Refresh+0xb8>)
 8010cec:	781b      	ldrb	r3, [r3, #0]
 8010cee:	3b01      	subs	r3, #1
 8010cf0:	2b11      	cmp	r3, #17
 8010cf2:	d80f      	bhi.n	8010d14 <GUI_Display_Refresh+0x2c>
 8010cf4:	e8df f003 	tbb	[pc, r3]
 8010cf8:	17130f09 	.word	0x17130f09
 8010cfc:	27231f1b 	.word	0x27231f1b
 8010d00:	37332f2b 	.word	0x37332f2b
 8010d04:	47433f3b 	.word	0x47433f3b
 8010d08:	4f4b      	.short	0x4f4b
		case Measure_Screen: GUI_Measure_Screen(); preGUI_screen_state = Measure_Screen; break;
 8010d0a:	f7ff fb45 	bl	8010398 <GUI_Measure_Screen>
 8010d0e:	2201      	movs	r2, #1
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
					
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 8010d10:	4b24      	ldr	r3, [pc, #144]	; (8010da4 <GUI_Display_Refresh+0xbc>)
 8010d12:	701a      	strb	r2, [r3, #0]
 8010d14:	bd08      	pop	{r3, pc}
		case Measure2_Screen: GUI_Measure2_Screen(); preGUI_screen_state = Measure2_Screen; break;
 8010d16:	f7ff fb6d 	bl	80103f4 <GUI_Measure2_Screen>
 8010d1a:	2202      	movs	r2, #2
 8010d1c:	e7f8      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case Measure3_Screen: GUI_Measure3_Screen(); preGUI_screen_state = Measure3_Screen; break;
 8010d1e:	f7ff fba1 	bl	8010464 <GUI_Measure3_Screen>
 8010d22:	2203      	movs	r2, #3
 8010d24:	e7f4      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case Graph_Screen: GUI_Graph_Screen(); preGUI_screen_state = Graph_Screen; break;
 8010d26:	f7ff f99b 	bl	8010060 <GUI_Graph_Screen>
 8010d2a:	2204      	movs	r2, #4
 8010d2c:	e7f0      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case Color_Screen: GUI_Color_Screen(); preGUI_screen_state = Color_Screen; break; 
 8010d2e:	f7ff fbcf 	bl	80104d0 <GUI_Color_Screen>
 8010d32:	2205      	movs	r2, #5
 8010d34:	e7ec      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case Color_Rendition_Screen: GUI_ColorRend_Screen(); preGUI_screen_state = Color_Rendition_Screen; break;		
 8010d36:	f7ff ff39 	bl	8010bac <GUI_ColorRend_Screen>
 8010d3a:	2206      	movs	r2, #6
 8010d3c:	e7e8      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case DataSet1_Screen: GUI_DataSet1_Screen();  preGUI_screen_state = DataSet1_Screen; break;
 8010d3e:	f7fe fda1 	bl	800f884 <GUI_DataSet1_Screen>
 8010d42:	2207      	movs	r2, #7
 8010d44:	e7e4      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case DataSet2_Screen: GUI_DataSet2_Screen();  preGUI_screen_state = DataSet2_Screen; break;
 8010d46:	f7fe fe01 	bl	800f94c <GUI_DataSet2_Screen>
 8010d4a:	2208      	movs	r2, #8
 8010d4c:	e7e0      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case DataSet3_Screen: GUI_DataSet3_Screen();  preGUI_screen_state = DataSet3_Screen; break;
 8010d4e:	f7fe fed5 	bl	800fafc <GUI_DataSet3_Screen>
 8010d52:	2209      	movs	r2, #9
 8010d54:	e7dc      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case DataSet4_Screen: GUI_DataSet4_Screen();  preGUI_screen_state = DataSet4_Screen; break;
 8010d56:	f7fe ff45 	bl	800fbe4 <GUI_DataSet4_Screen>
 8010d5a:	220a      	movs	r2, #10
 8010d5c:	e7d8      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case DataSet5_Screen: GUI_DataSet5_Screen();  preGUI_screen_state = DataSet5_Screen; break;
 8010d5e:	f7fe ffe3 	bl	800fd28 <GUI_DataSet5_Screen>
 8010d62:	220b      	movs	r2, #11
 8010d64:	e7d4      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case GraphSet1_Screen: GUI_GraphSet1_Screen(); preGUI_screen_state = GraphSet1_Screen; break;
 8010d66:	f7ff f819 	bl	800fd9c <GUI_GraphSet1_Screen>
 8010d6a:	220c      	movs	r2, #12
 8010d6c:	e7d0      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case GraphSet2_Screen: GUI_GraphSet2_Screen(); preGUI_screen_state = GraphSet2_Screen; break;
 8010d6e:	f7ff f85d 	bl	800fe2c <GUI_GraphSet2_Screen>
 8010d72:	220d      	movs	r2, #13
 8010d74:	e7cc      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
 8010d76:	f7ff f893 	bl	800fea0 <GUI_ColorSet1_Screen>
 8010d7a:	220e      	movs	r2, #14
 8010d7c:	e7c8      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
 8010d7e:	f7ff f8d3 	bl	800ff28 <GUI_ColorSet2_Screen>
 8010d82:	220f      	movs	r2, #15
 8010d84:	e7c4      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
 8010d86:	f7ff f90b 	bl	800ffa0 <GUI_ColorRendSet_Screen>
 8010d8a:	2210      	movs	r2, #16
 8010d8c:	e7c0      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
 8010d8e:	f7fe fc19 	bl	800f5c4 <GUI_Information_Screen>
 8010d92:	2211      	movs	r2, #17
 8010d94:	e7bc      	b.n	8010d10 <GUI_Display_Refresh+0x28>
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 8010d96:	f7fe fc63 	bl	800f660 <GUI_SD_Write_Screen>
 8010d9a:	2212      	movs	r2, #18
 8010d9c:	e7b8      	b.n	8010d10 <GUI_Display_Refresh+0x28>
 8010d9e:	bf00      	nop
 8010da0:	20005701 	.word	0x20005701
 8010da4:	2000022a 	.word	0x2000022a

08010da8 <GUI_Touch_Processing>:
		default: break;
	}
}

void GUI_Touch_Processing()
{
 8010da8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
//	uint16_t Touch_x = 0, Touch_y = 0;
//	TS_Get_XY1(TS_I2C_ADDRESS, &temp_x, &temp_y);
	switch(GUI_screen_state){
 8010dac:	4c9d      	ldr	r4, [pc, #628]	; (8011024 <GUI_Touch_Processing+0x27c>)
 8010dae:	7823      	ldrb	r3, [r4, #0]
 8010db0:	3b01      	subs	r3, #1
 8010db2:	2b11      	cmp	r3, #17
 8010db4:	f201 82c4 	bhi.w	8012340 <GUI_Touch_Processing+0x1598>
 8010db8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010dbc:	00390012 	.word	0x00390012
 8010dc0:	00c9007b 	.word	0x00c9007b
 8010dc4:	0158010f 	.word	0x0158010f
 8010dc8:	03210212 	.word	0x03210212
 8010dcc:	04cb03ea 	.word	0x04cb03ea
 8010dd0:	071906b3 	.word	0x071906b3
 8010dd4:	081f07bc 	.word	0x081f07bc
 8010dd8:	09ad08f6 	.word	0x09ad08f6
 8010ddc:	00a10a74 	.word	0x00a10a74
		
		case Measure_Screen:
			preGUI_screen_state = GUI_screen_state;
 8010de0:	4b91      	ldr	r3, [pc, #580]	; (8011028 <GUI_Touch_Processing+0x280>)
 8010de2:	2201      	movs	r2, #1
 8010de4:	701a      	strb	r2, [r3, #0]
		
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8010de6:	4b91      	ldr	r3, [pc, #580]	; (801102c <GUI_Touch_Processing+0x284>)
 8010de8:	881a      	ldrh	r2, [r3, #0]
 8010dea:	4b91      	ldr	r3, [pc, #580]	; (8011030 <GUI_Touch_Processing+0x288>)
 8010dec:	881b      	ldrh	r3, [r3, #0]
 8010dee:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010df2:	b29b      	uxth	r3, r3
 8010df4:	2b36      	cmp	r3, #54	; 0x36
 8010df6:	f102 31ff 	add.w	r1, r2, #4294967295
 8010dfa:	bf8c      	ite	hi
 8010dfc:	2300      	movhi	r3, #0
 8010dfe:	2301      	movls	r3, #1
 8010e00:	2936      	cmp	r1, #54	; 0x36
 8010e02:	d802      	bhi.n	8010e0a <GUI_Touch_Processing+0x62>
 8010e04:	b10b      	cbz	r3, 8010e0a <GUI_Touch_Processing+0x62>
				{	
					GUI_screen_state = DataSet1_Screen;
 8010e06:	2107      	movs	r1, #7
 8010e08:	7021      	strb	r1, [r4, #0]
				} 
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //down
 8010e0a:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010e0e:	2936      	cmp	r1, #54	; 0x36
 8010e10:	d86b      	bhi.n	8010eea <GUI_Touch_Processing+0x142>
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d069      	beq.n	8010eea <GUI_Touch_Processing+0x142>
				{	
					GUI_screen_state = (screen_count > 0) ? Measure2_Screen : Measure_Screen; 
 8010e16:	4b87      	ldr	r3, [pc, #540]	; (8011034 <GUI_Touch_Processing+0x28c>)
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	bf0c      	ite	eq
 8010e1e:	2001      	moveq	r0, #1
 8010e20:	2002      	movne	r0, #2
				{	
					GUI_screen_state = DataSet1_Screen;
				} 
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
				{	
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 8010e22:	7020      	strb	r0, [r4, #0]

		break;
				
		default: preGUI_screen_state = Measure_Screen;
			}
}
 8010e24:	b002      	add	sp, #8
 8010e26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					WriteFLASH_Screen(GUI_screen_state);
 8010e2a:	f009 b8d3 	b.w	8019fd4 <WriteFLASH_Screen>
			preGUI_screen_state = GUI_screen_state;
 8010e2e:	4b7e      	ldr	r3, [pc, #504]	; (8011028 <GUI_Touch_Processing+0x280>)
 8010e30:	2202      	movs	r2, #2
 8010e32:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8010e34:	4b7d      	ldr	r3, [pc, #500]	; (801102c <GUI_Touch_Processing+0x284>)
 8010e36:	881a      	ldrh	r2, [r3, #0]
 8010e38:	4b7d      	ldr	r3, [pc, #500]	; (8011030 <GUI_Touch_Processing+0x288>)
 8010e3a:	881b      	ldrh	r3, [r3, #0]
 8010e3c:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010e40:	b29b      	uxth	r3, r3
 8010e42:	2b36      	cmp	r3, #54	; 0x36
 8010e44:	f102 31ff 	add.w	r1, r2, #4294967295
 8010e48:	bf8c      	ite	hi
 8010e4a:	2300      	movhi	r3, #0
 8010e4c:	2301      	movls	r3, #1
 8010e4e:	2936      	cmp	r1, #54	; 0x36
 8010e50:	d802      	bhi.n	8010e58 <GUI_Touch_Processing+0xb0>
 8010e52:	b10b      	cbz	r3, 8010e58 <GUI_Touch_Processing+0xb0>
					GUI_screen_state = DataSet1_Screen;
 8010e54:	2107      	movs	r1, #7
 8010e56:	7021      	strb	r1, [r4, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8010e58:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010e5c:	2936      	cmp	r1, #54	; 0x36
 8010e5e:	d807      	bhi.n	8010e70 <GUI_Touch_Processing+0xc8>
 8010e60:	b133      	cbz	r3, 8010e70 <GUI_Touch_Processing+0xc8>
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 8010e62:	4b74      	ldr	r3, [pc, #464]	; (8011034 <GUI_Touch_Processing+0x28c>)
 8010e64:	781b      	ldrb	r3, [r3, #0]
 8010e66:	2b02      	cmp	r3, #2
 8010e68:	bf34      	ite	cc
 8010e6a:	2001      	movcc	r0, #1
 8010e6c:	2003      	movcs	r0, #3
 8010e6e:	e7d8      	b.n	8010e22 <GUI_Touch_Processing+0x7a>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 8010e70:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8010e74:	2936      	cmp	r1, #54	; 0x36
 8010e76:	d801      	bhi.n	8010e7c <GUI_Touch_Processing+0xd4>
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d13b      	bne.n	8010ef4 <GUI_Touch_Processing+0x14c>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 8010e7c:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8010e80:	2936      	cmp	r1, #54	; 0x36
 8010e82:	d801      	bhi.n	8010e88 <GUI_Touch_Processing+0xe0>
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d142      	bne.n	8010f0e <GUI_Touch_Processing+0x166>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54)) //Measure
 8010e88:	3a6d      	subs	r2, #109	; 0x6d
 8010e8a:	2a36      	cmp	r2, #54	; 0x36
 8010e8c:	d837      	bhi.n	8010efe <GUI_Touch_Processing+0x156>
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d035      	beq.n	8010efe <GUI_Touch_Processing+0x156>
						pause = !pause;
 8010e92:	4a69      	ldr	r2, [pc, #420]	; (8011038 <GUI_Touch_Processing+0x290>)
 8010e94:	7813      	ldrb	r3, [r2, #0]
 8010e96:	fab3 f383 	clz	r3, r3
 8010e9a:	095b      	lsrs	r3, r3, #5
						GUI_Button_Measure_Start_Pause(109, 426);
 8010e9c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010ea0:	206d      	movs	r0, #109	; 0x6d
						pause = !pause;
 8010ea2:	7013      	strb	r3, [r2, #0]
						GUI_Button_Measure_Start_Pause(109, 426);
 8010ea4:	f001 fd36 	bl	8012914 <GUI_Button_Measure_Start_Pause>
}
 8010ea8:	b002      	add	sp, #8
 8010eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_Down_Panel();
 8010eae:	f7fe bc67 	b.w	800f780 <GUI_Down_Panel>
			preGUI_screen_state = GUI_screen_state;
 8010eb2:	4b5d      	ldr	r3, [pc, #372]	; (8011028 <GUI_Touch_Processing+0x280>)
 8010eb4:	2203      	movs	r2, #3
 8010eb6:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54)) //Settings
 8010eb8:	4b5c      	ldr	r3, [pc, #368]	; (801102c <GUI_Touch_Processing+0x284>)
 8010eba:	881a      	ldrh	r2, [r3, #0]
 8010ebc:	4b5c      	ldr	r3, [pc, #368]	; (8011030 <GUI_Touch_Processing+0x288>)
 8010ebe:	881b      	ldrh	r3, [r3, #0]
 8010ec0:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010ec4:	b29b      	uxth	r3, r3
 8010ec6:	2b36      	cmp	r3, #54	; 0x36
 8010ec8:	f102 31ff 	add.w	r1, r2, #4294967295
 8010ecc:	bf8c      	ite	hi
 8010ece:	2300      	movhi	r3, #0
 8010ed0:	2301      	movls	r3, #1
 8010ed2:	2936      	cmp	r1, #54	; 0x36
 8010ed4:	d802      	bhi.n	8010edc <GUI_Touch_Processing+0x134>
 8010ed6:	b10b      	cbz	r3, 8010edc <GUI_Touch_Processing+0x134>
					GUI_screen_state = DataSet1_Screen;
 8010ed8:	2107      	movs	r1, #7
 8010eda:	7021      	strb	r1, [r4, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54)) //Down
 8010edc:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010ee0:	2936      	cmp	r1, #54	; 0x36
 8010ee2:	d802      	bhi.n	8010eea <GUI_Touch_Processing+0x142>
 8010ee4:	b10b      	cbz	r3, 8010eea <GUI_Touch_Processing+0x142>
					GUI_screen_state = Measure_Screen;
 8010ee6:	2001      	movs	r0, #1
 8010ee8:	e79b      	b.n	8010e22 <GUI_Touch_Processing+0x7a>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 8010eea:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8010eee:	2936      	cmp	r1, #54	; 0x36
 8010ef0:	d808      	bhi.n	8010f04 <GUI_Touch_Processing+0x15c>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54)) //Next
 8010ef2:	b13b      	cbz	r3, 8010f04 <GUI_Touch_Processing+0x15c>
					WriteFLASH_Screen(Graph_Screen);
 8010ef4:	2004      	movs	r0, #4
 8010ef6:	f009 f86d 	bl	8019fd4 <WriteFLASH_Screen>
					GUI_screen_state =  Graph_Screen;
 8010efa:	2304      	movs	r3, #4
 8010efc:	7023      	strb	r3, [r4, #0]
}
 8010efe:	b002      	add	sp, #8
 8010f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 8010f04:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8010f08:	2936      	cmp	r1, #54	; 0x36
 8010f0a:	d807      	bhi.n	8010f1c <GUI_Touch_Processing+0x174>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54)) //SD_Card
 8010f0c:	b133      	cbz	r3, 8010f1c <GUI_Touch_Processing+0x174>
					if(!SD_Detect){if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}}
 8010f0e:	4b4b      	ldr	r3, [pc, #300]	; (801103c <GUI_Touch_Processing+0x294>)
 8010f10:	781b      	ldrb	r3, [r3, #0]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d1f3      	bne.n	8010efe <GUI_Touch_Processing+0x156>
 8010f16:	2312      	movs	r3, #18
 8010f18:	7023      	strb	r3, [r4, #0]
 8010f1a:	e7f0      	b.n	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54)) //Measure
 8010f1c:	3a6d      	subs	r2, #109	; 0x6d
 8010f1e:	2a36      	cmp	r2, #54	; 0x36
 8010f20:	d8ed      	bhi.n	8010efe <GUI_Touch_Processing+0x156>
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d0eb      	beq.n	8010efe <GUI_Touch_Processing+0x156>
						pause = !pause;
 8010f26:	4a44      	ldr	r2, [pc, #272]	; (8011038 <GUI_Touch_Processing+0x290>)
 8010f28:	7813      	ldrb	r3, [r2, #0]
 8010f2a:	fab3 f383 	clz	r3, r3
 8010f2e:	095b      	lsrs	r3, r3, #5
						GUI_Button_Measure_Start_Pause(109, 426);
 8010f30:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010f34:	206d      	movs	r0, #109	; 0x6d
						pause = !pause;
 8010f36:	7013      	strb	r3, [r2, #0]
						GUI_Button_Measure_Start_Pause(109, 426);
 8010f38:	f001 fcec 	bl	8012914 <GUI_Button_Measure_Start_Pause>
						GUI_Bar_Measure(85, 13, 0.0);
 8010f3c:	ed9f 0a40 	vldr	s0, [pc, #256]	; 8011040 <GUI_Touch_Processing+0x298>
 8010f40:	210d      	movs	r1, #13
 8010f42:	2055      	movs	r0, #85	; 0x55
}
 8010f44:	b002      	add	sp, #8
 8010f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_Bar_Measure(85, 13, 0.0);
 8010f4a:	f002 b9a3 	b.w	8013294 <GUI_Bar_Measure>
			preGUI_screen_state = GUI_screen_state;
 8010f4e:	4b36      	ldr	r3, [pc, #216]	; (8011028 <GUI_Touch_Processing+0x280>)
 8010f50:	2204      	movs	r2, #4
 8010f52:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 8010f54:	4b35      	ldr	r3, [pc, #212]	; (801102c <GUI_Touch_Processing+0x284>)
 8010f56:	881a      	ldrh	r2, [r3, #0]
 8010f58:	4b35      	ldr	r3, [pc, #212]	; (8011030 <GUI_Touch_Processing+0x288>)
 8010f5a:	881b      	ldrh	r3, [r3, #0]
 8010f5c:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010f60:	b29b      	uxth	r3, r3
 8010f62:	2b36      	cmp	r3, #54	; 0x36
 8010f64:	f102 31ff 	add.w	r1, r2, #4294967295
 8010f68:	bf8c      	ite	hi
 8010f6a:	2300      	movhi	r3, #0
 8010f6c:	2301      	movls	r3, #1
 8010f6e:	2936      	cmp	r1, #54	; 0x36
 8010f70:	d802      	bhi.n	8010f78 <GUI_Touch_Processing+0x1d0>
 8010f72:	b10b      	cbz	r3, 8010f78 <GUI_Touch_Processing+0x1d0>
					GUI_screen_state = GraphSet1_Screen;
 8010f74:	210c      	movs	r1, #12
 8010f76:	7021      	strb	r1, [r4, #0]
			if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Rotation_Screen
 8010f78:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8010f7c:	2936      	cmp	r1, #54	; 0x36
 8010f7e:	d808      	bhi.n	8010f92 <GUI_Touch_Processing+0x1ea>
 8010f80:	b13b      	cbz	r3, 8010f92 <GUI_Touch_Processing+0x1ea>
					if(Rotation_Screen_Spectral < 0x02) {Rotation_Screen_Spectral++;} else{Rotation_Screen_Spectral= 0x00;}
 8010f82:	4a30      	ldr	r2, [pc, #192]	; (8011044 <GUI_Touch_Processing+0x29c>)
 8010f84:	7813      	ldrb	r3, [r2, #0]
 8010f86:	2b01      	cmp	r3, #1
 8010f88:	bf94      	ite	ls
 8010f8a:	3301      	addls	r3, #1
 8010f8c:	2300      	movhi	r3, #0
 8010f8e:	7013      	strb	r3, [r2, #0]
 8010f90:	e7b5      	b.n	8010efe <GUI_Touch_Processing+0x156>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 8010f92:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8010f96:	2936      	cmp	r1, #54	; 0x36
 8010f98:	d806      	bhi.n	8010fa8 <GUI_Touch_Processing+0x200>
 8010f9a:	b12b      	cbz	r3, 8010fa8 <GUI_Touch_Processing+0x200>
					WriteFLASH_Screen(Color_Screen);
 8010f9c:	2005      	movs	r0, #5
 8010f9e:	f009 f819 	bl	8019fd4 <WriteFLASH_Screen>
					GUI_screen_state = Color_Screen;
 8010fa2:	2305      	movs	r3, #5
 8010fa4:	7023      	strb	r3, [r4, #0]
 8010fa6:	e7aa      	b.n	8010efe <GUI_Touch_Processing+0x156>
			if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8010fa8:	f1a2 0137 	sub.w	r1, r2, #55	; 0x37
 8010fac:	2936      	cmp	r1, #54	; 0x36
 8010fae:	d801      	bhi.n	8010fb4 <GUI_Touch_Processing+0x20c>
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d1ac      	bne.n	8010f0e <GUI_Touch_Processing+0x166>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 8010fb4:	3a6d      	subs	r2, #109	; 0x6d
 8010fb6:	2a36      	cmp	r2, #54	; 0x36
 8010fb8:	d8a1      	bhi.n	8010efe <GUI_Touch_Processing+0x156>
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d09f      	beq.n	8010efe <GUI_Touch_Processing+0x156>
					pause = !pause;
 8010fbe:	4a1e      	ldr	r2, [pc, #120]	; (8011038 <GUI_Touch_Processing+0x290>)
 8010fc0:	7813      	ldrb	r3, [r2, #0]
 8010fc2:	fab3 f383 	clz	r3, r3
 8010fc6:	095b      	lsrs	r3, r3, #5
					GUI_Button_Measure_Start_Pause(109, 426);
 8010fc8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010fcc:	206d      	movs	r0, #109	; 0x6d
					pause = !pause;
 8010fce:	7013      	strb	r3, [r2, #0]
}
 8010fd0:	b002      	add	sp, #8
 8010fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Button_Measure_Start_Pause(109, 426);
 8010fd6:	f001 bc9d 	b.w	8012914 <GUI_Button_Measure_Start_Pause>
			preGUI_screen_state = GUI_screen_state;
 8010fda:	4b13      	ldr	r3, [pc, #76]	; (8011028 <GUI_Touch_Processing+0x280>)
 8010fdc:	2205      	movs	r2, #5
 8010fde:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 8010fe0:	4b12      	ldr	r3, [pc, #72]	; (801102c <GUI_Touch_Processing+0x284>)
 8010fe2:	881a      	ldrh	r2, [r3, #0]
 8010fe4:	4b12      	ldr	r3, [pc, #72]	; (8011030 <GUI_Touch_Processing+0x288>)
 8010fe6:	881b      	ldrh	r3, [r3, #0]
 8010fe8:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	2b36      	cmp	r3, #54	; 0x36
 8010ff0:	f102 31ff 	add.w	r1, r2, #4294967295
 8010ff4:	bf8c      	ite	hi
 8010ff6:	2300      	movhi	r3, #0
 8010ff8:	2301      	movls	r3, #1
 8010ffa:	2936      	cmp	r1, #54	; 0x36
 8010ffc:	d807      	bhi.n	801100e <GUI_Touch_Processing+0x266>
 8010ffe:	b133      	cbz	r3, 801100e <GUI_Touch_Processing+0x266>
					preColor_Field = Color_Field;
 8011000:	4b11      	ldr	r3, [pc, #68]	; (8011048 <GUI_Touch_Processing+0x2a0>)
 8011002:	781a      	ldrb	r2, [r3, #0]
 8011004:	4b11      	ldr	r3, [pc, #68]	; (801104c <GUI_Touch_Processing+0x2a4>)
 8011006:	701a      	strb	r2, [r3, #0]
					GUI_screen_state = ColorSet1_Screen;
 8011008:	230e      	movs	r3, #14
 801100a:	7023      	strb	r3, [r4, #0]
 801100c:	e777      	b.n	8010efe <GUI_Touch_Processing+0x156>
			if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 801100e:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8011012:	2936      	cmp	r1, #54	; 0x36
 8011014:	d81c      	bhi.n	8011050 <GUI_Touch_Processing+0x2a8>
 8011016:	b1db      	cbz	r3, 8011050 <GUI_Touch_Processing+0x2a8>
					WriteFLASH_Screen(Color_Rendition_Screen);
 8011018:	2006      	movs	r0, #6
 801101a:	f008 ffdb 	bl	8019fd4 <WriteFLASH_Screen>
					GUI_screen_state = Color_Rendition_Screen;
 801101e:	2306      	movs	r3, #6
 8011020:	7023      	strb	r3, [r4, #0]
 8011022:	e76c      	b.n	8010efe <GUI_Touch_Processing+0x156>
 8011024:	20005701 	.word	0x20005701
 8011028:	2000022a 	.word	0x2000022a
 801102c:	20054942 	.word	0x20054942
 8011030:	20054944 	.word	0x20054944
 8011034:	2000572b 	.word	0x2000572b
 8011038:	20005728 	.word	0x20005728
 801103c:	20095c54 	.word	0x20095c54
 8011040:	00000000 	.word	0x00000000
 8011044:	2000570a 	.word	0x2000570a
 8011048:	200056ff 	.word	0x200056ff
 801104c:	20005729 	.word	0x20005729
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 8011050:	f1a2 016d 	sub.w	r1, r2, #109	; 0x6d
 8011054:	2936      	cmp	r1, #54	; 0x36
 8011056:	d801      	bhi.n	801105c <GUI_Touch_Processing+0x2b4>
 8011058:	2b00      	cmp	r3, #0
 801105a:	d1b0      	bne.n	8010fbe <GUI_Touch_Processing+0x216>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 801105c:	3a37      	subs	r2, #55	; 0x37
 801105e:	2a36      	cmp	r2, #54	; 0x36
 8011060:	f63f af4d 	bhi.w	8010efe <GUI_Touch_Processing+0x156>
 8011064:	2b00      	cmp	r3, #0
 8011066:	f47f af52 	bne.w	8010f0e <GUI_Touch_Processing+0x166>
 801106a:	e748      	b.n	8010efe <GUI_Touch_Processing+0x156>
			preGUI_screen_state = GUI_screen_state;
 801106c:	4ba9      	ldr	r3, [pc, #676]	; (8011314 <GUI_Touch_Processing+0x56c>)
 801106e:	2206      	movs	r2, #6
 8011070:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Settings
 8011072:	4ba9      	ldr	r3, [pc, #676]	; (8011318 <GUI_Touch_Processing+0x570>)
 8011074:	881a      	ldrh	r2, [r3, #0]
 8011076:	4ba9      	ldr	r3, [pc, #676]	; (801131c <GUI_Touch_Processing+0x574>)
 8011078:	881b      	ldrh	r3, [r3, #0]
 801107a:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 801107e:	b29b      	uxth	r3, r3
 8011080:	2b36      	cmp	r3, #54	; 0x36
 8011082:	f102 31ff 	add.w	r1, r2, #4294967295
 8011086:	bf8c      	ite	hi
 8011088:	2300      	movhi	r3, #0
 801108a:	2301      	movls	r3, #1
 801108c:	2936      	cmp	r1, #54	; 0x36
 801108e:	d803      	bhi.n	8011098 <GUI_Touch_Processing+0x2f0>
 8011090:	b113      	cbz	r3, 8011098 <GUI_Touch_Processing+0x2f0>
					GUI_screen_state = ColorRendSet_Screen;
 8011092:	2310      	movs	r3, #16
 8011094:	7023      	strb	r3, [r4, #0]
 8011096:	e732      	b.n	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Next
 8011098:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 801109c:	2936      	cmp	r1, #54	; 0x36
 801109e:	d806      	bhi.n	80110ae <GUI_Touch_Processing+0x306>
 80110a0:	b12b      	cbz	r3, 80110ae <GUI_Touch_Processing+0x306>
					WriteFLASH_Screen(Measure_Screen);
 80110a2:	2001      	movs	r0, #1
 80110a4:	f008 ff96 	bl	8019fd4 <WriteFLASH_Screen>
					GUI_screen_state = Measure_Screen;
 80110a8:	2301      	movs	r3, #1
 80110aa:	7023      	strb	r3, [r4, #0]
 80110ac:	e727      	b.n	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Rotation_Screen
 80110ae:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 80110b2:	2936      	cmp	r1, #54	; 0x36
 80110b4:	d808      	bhi.n	80110c8 <GUI_Touch_Processing+0x320>
 80110b6:	b13b      	cbz	r3, 80110c8 <GUI_Touch_Processing+0x320>
					if(Rotation_Screen_Rend < 0x02) {Rotation_Screen_Rend++;} else{Rotation_Screen_Rend = 0x00;}
 80110b8:	4a99      	ldr	r2, [pc, #612]	; (8011320 <GUI_Touch_Processing+0x578>)
 80110ba:	7813      	ldrb	r3, [r2, #0]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	bf94      	ite	ls
 80110c0:	3301      	addls	r3, #1
 80110c2:	2300      	movhi	r3, #0
 80110c4:	7013      	strb	r3, [r2, #0]
 80110c6:	e71a      	b.n	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Measure
 80110c8:	f1a2 016d 	sub.w	r1, r2, #109	; 0x6d
 80110cc:	2936      	cmp	r1, #54	; 0x36
 80110ce:	d877      	bhi.n	80111c0 <GUI_Touch_Processing+0x418>
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d075      	beq.n	80111c0 <GUI_Touch_Processing+0x418>
					if (Color_rend_Field & CRI_CQS){
 80110d4:	4b93      	ldr	r3, [pc, #588]	; (8011324 <GUI_Touch_Processing+0x57c>)
 80110d6:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 80113a4 <GUI_Touch_Processing+0x5fc>
 80110da:	781c      	ldrb	r4, [r3, #0]
 80110dc:	4e92      	ldr	r6, [pc, #584]	; (8011328 <GUI_Touch_Processing+0x580>)
 80110de:	4f93      	ldr	r7, [pc, #588]	; (801132c <GUI_Touch_Processing+0x584>)
 80110e0:	4d93      	ldr	r5, [pc, #588]	; (8011330 <GUI_Touch_Processing+0x588>)
 80110e2:	f014 0401 	ands.w	r4, r4, #1
 80110e6:	d03f      	beq.n	8011168 <GUI_Touch_Processing+0x3c0>
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 80110e8:	4892      	ldr	r0, [pc, #584]	; (8011334 <GUI_Touch_Processing+0x58c>)
						CRICQS_done = 0x00;
 80110ea:	2400      	movs	r4, #0
 80110ec:	f888 4000 	strb.w	r4, [r8]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 80110f0:	f008 fe90 	bl	8019e14 <Rabs_find_MAX_all>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 80110f4:	4b90      	ldr	r3, [pc, #576]	; (8011338 <GUI_Touch_Processing+0x590>)
 80110f6:	4a91      	ldr	r2, [pc, #580]	; (801133c <GUI_Touch_Processing+0x594>)
 80110f8:	4991      	ldr	r1, [pc, #580]	; (8011340 <GUI_Touch_Processing+0x598>)
 80110fa:	488e      	ldr	r0, [pc, #568]	; (8011334 <GUI_Touch_Processing+0x58c>)
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 80110fc:	ed86 0a00 	vstr	s0, [r6]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011100:	f7fd f91c 	bl	800e33c <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 8011104:	488f      	ldr	r0, [pc, #572]	; (8011344 <GUI_Touch_Processing+0x59c>)
 8011106:	f7fd f985 	bl	800e414 <Calculate_xy1931>
						Calculate_uv(colorimetry_xy1931);
 801110a:	488f      	ldr	r0, [pc, #572]	; (8011348 <GUI_Touch_Processing+0x5a0>)
 801110c:	f7fd f9a0 	bl	800e450 <Calculate_uv>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011110:	4888      	ldr	r0, [pc, #544]	; (8011334 <GUI_Touch_Processing+0x58c>)
 8011112:	7839      	ldrb	r1, [r7, #0]
 8011114:	f7fd f9e4 	bl	800e4e0 <Calculate_Tc>
 8011118:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 801111c:	f64f 73ff 	movw	r3, #65535	; 0xffff
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011120:	edcd 7a01 	vstr	s15, [sp, #4]
 8011124:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8011128:	8028      	strh	r0, [r5, #0]
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 801112a:	4298      	cmp	r0, r3
 801112c:	d10b      	bne.n	8011146 <GUI_Touch_Processing+0x39e>
 801112e:	4b87      	ldr	r3, [pc, #540]	; (801134c <GUI_Touch_Processing+0x5a4>)
 8011130:	4887      	ldr	r0, [pc, #540]	; (8011350 <GUI_Touch_Processing+0x5a8>)
 8011132:	701c      	strb	r4, [r3, #0]
 8011134:	4b87      	ldr	r3, [pc, #540]	; (8011354 <GUI_Touch_Processing+0x5ac>)
 8011136:	701c      	strb	r4, [r3, #0]
 8011138:	4b87      	ldr	r3, [pc, #540]	; (8011358 <GUI_Touch_Processing+0x5b0>)
 801113a:	220e      	movs	r2, #14
 801113c:	701c      	strb	r4, [r3, #0]
 801113e:	4621      	mov	r1, r4
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8011140:	f00f f89f 	bl	8020282 <memset>
 8011144:	e002      	b.n	801114c <GUI_Touch_Processing+0x3a4>
						else	{CRI_func(Tc_Measure, Line_Rabs_buff);}
 8011146:	497b      	ldr	r1, [pc, #492]	; (8011334 <GUI_Touch_Processing+0x58c>)
 8011148:	f7fb f816 	bl	800c178 <CRI_func>
					Calc_ColorRend = !Calc_ColorRend;
 801114c:	4a83      	ldr	r2, [pc, #524]	; (801135c <GUI_Touch_Processing+0x5b4>)
						CRICQS_done = 0x01;
 801114e:	2301      	movs	r3, #1
 8011150:	f888 3000 	strb.w	r3, [r8]
					Calc_ColorRend = !Calc_ColorRend;
 8011154:	7813      	ldrb	r3, [r2, #0]
 8011156:	fab3 f383 	clz	r3, r3
 801115a:	095b      	lsrs	r3, r3, #5
 801115c:	7013      	strb	r3, [r2, #0]
}
 801115e:	b002      	add	sp, #8
 8011160:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Display_Refresh();
 8011164:	f7ff bdc0 	b.w	8010ce8 <GUI_Display_Refresh>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011168:	4b73      	ldr	r3, [pc, #460]	; (8011338 <GUI_Touch_Processing+0x590>)
 801116a:	4a74      	ldr	r2, [pc, #464]	; (801133c <GUI_Touch_Processing+0x594>)
 801116c:	4974      	ldr	r1, [pc, #464]	; (8011340 <GUI_Touch_Processing+0x598>)
 801116e:	4871      	ldr	r0, [pc, #452]	; (8011334 <GUI_Touch_Processing+0x58c>)
						CRICQS_done = 0x00;
 8011170:	f888 4000 	strb.w	r4, [r8]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011174:	f7fd f8e2 	bl	800e33c <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 8011178:	4872      	ldr	r0, [pc, #456]	; (8011344 <GUI_Touch_Processing+0x59c>)
 801117a:	f7fd f94b 	bl	800e414 <Calculate_xy1931>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801117e:	7839      	ldrb	r1, [r7, #0]
 8011180:	486c      	ldr	r0, [pc, #432]	; (8011334 <GUI_Touch_Processing+0x58c>)
 8011182:	f7fd f9ad 	bl	800e4e0 <Calculate_Tc>
 8011186:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 801118a:	486a      	ldr	r0, [pc, #424]	; (8011334 <GUI_Touch_Processing+0x58c>)
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801118c:	ee17 3a90 	vmov	r3, s15
 8011190:	802b      	strh	r3, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011192:	f008 fe3f 	bl	8019e14 <Rabs_find_MAX_all>
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8011196:	8828      	ldrh	r0, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011198:	ed86 0a00 	vstr	s0, [r6]
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 801119c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80111a0:	4298      	cmp	r0, r3
 80111a2:	d109      	bne.n	80111b8 <GUI_Touch_Processing+0x410>
 80111a4:	4b6e      	ldr	r3, [pc, #440]	; (8011360 <GUI_Touch_Processing+0x5b8>)
 80111a6:	486f      	ldr	r0, [pc, #444]	; (8011364 <GUI_Touch_Processing+0x5bc>)
 80111a8:	701c      	strb	r4, [r3, #0]
 80111aa:	4b6f      	ldr	r3, [pc, #444]	; (8011368 <GUI_Touch_Processing+0x5c0>)
 80111ac:	701c      	strb	r4, [r3, #0]
 80111ae:	4b6f      	ldr	r3, [pc, #444]	; (801136c <GUI_Touch_Processing+0x5c4>)
 80111b0:	220f      	movs	r2, #15
 80111b2:	701c      	strb	r4, [r3, #0]
 80111b4:	4621      	mov	r1, r4
 80111b6:	e7c3      	b.n	8011140 <GUI_Touch_Processing+0x398>
						else	{cqs_func(Tc_Measure, Line_Rabs_buff);}
 80111b8:	495e      	ldr	r1, [pc, #376]	; (8011334 <GUI_Touch_Processing+0x58c>)
 80111ba:	f7f8 fe71 	bl	8009ea0 <cqs_func>
 80111be:	e7c5      	b.n	801114c <GUI_Touch_Processing+0x3a4>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 80111c0:	3a37      	subs	r2, #55	; 0x37
 80111c2:	2a36      	cmp	r2, #54	; 0x36
 80111c4:	f63f ae9b 	bhi.w	8010efe <GUI_Touch_Processing+0x156>
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	f43f ae98 	beq.w	8010efe <GUI_Touch_Processing+0x156>
						if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}
 80111ce:	4b68      	ldr	r3, [pc, #416]	; (8011370 <GUI_Touch_Processing+0x5c8>)
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	b90b      	cbnz	r3, 80111d8 <GUI_Touch_Processing+0x430>
 80111d4:	2312      	movs	r3, #18
 80111d6:	7023      	strb	r3, [r4, #0]
						pause = 0;
 80111d8:	4b66      	ldr	r3, [pc, #408]	; (8011374 <GUI_Touch_Processing+0x5cc>)
 80111da:	2200      	movs	r2, #0
 80111dc:	701a      	strb	r2, [r3, #0]
 80111de:	e68e      	b.n	8010efe <GUI_Touch_Processing+0x156>
			preGUI_screen_state = GUI_screen_state;
 80111e0:	4b4c      	ldr	r3, [pc, #304]	; (8011314 <GUI_Touch_Processing+0x56c>)
 80111e2:	2207      	movs	r2, #7
 80111e4:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Down
 80111e6:	4a4d      	ldr	r2, [pc, #308]	; (801131c <GUI_Touch_Processing+0x574>)
 80111e8:	4b4b      	ldr	r3, [pc, #300]	; (8011318 <GUI_Touch_Processing+0x570>)
 80111ea:	8812      	ldrh	r2, [r2, #0]
 80111ec:	881b      	ldrh	r3, [r3, #0]
 80111ee:	f5a2 70d5 	sub.w	r0, r2, #426	; 0x1aa
 80111f2:	2836      	cmp	r0, #54	; 0x36
 80111f4:	f1a3 01a3 	sub.w	r1, r3, #163	; 0xa3
 80111f8:	bf8c      	ite	hi
 80111fa:	2000      	movhi	r0, #0
 80111fc:	2001      	movls	r0, #1
 80111fe:	2936      	cmp	r1, #54	; 0x36
 8011200:	d803      	bhi.n	801120a <GUI_Touch_Processing+0x462>
 8011202:	b110      	cbz	r0, 801120a <GUI_Touch_Processing+0x462>
					GUI_screen_state = DataSet2_Screen;
 8011204:	2308      	movs	r3, #8
 8011206:	7023      	strb	r3, [r4, #0]
 8011208:	e679      	b.n	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 182 & Touch_x <= (182+54) & Touch_y >=202 & Touch_y <=(202+54) ) //Mode_EL
 801120a:	f1a3 01b6 	sub.w	r1, r3, #182	; 0xb6
 801120e:	2936      	cmp	r1, #54	; 0x36
 8011210:	f1a2 05ca 	sub.w	r5, r2, #202	; 0xca
 8011214:	bf8c      	ite	hi
 8011216:	2100      	movhi	r1, #0
 8011218:	2101      	movls	r1, #1
 801121a:	2d36      	cmp	r5, #54	; 0x36
 801121c:	d827      	bhi.n	801126e <GUI_Touch_Processing+0x4c6>
 801121e:	b331      	cbz	r1, 801126e <GUI_Touch_Processing+0x4c6>
					Mode_EL = !Mode_EL;
 8011220:	4c55      	ldr	r4, [pc, #340]	; (8011378 <GUI_Touch_Processing+0x5d0>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8011222:	4b56      	ldr	r3, [pc, #344]	; (801137c <GUI_Touch_Processing+0x5d4>)
					Mode_EL = !Mode_EL;
 8011224:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8011226:	4856      	ldr	r0, [pc, #344]	; (8011380 <GUI_Touch_Processing+0x5d8>)
					Mode_EL = !Mode_EL;
 8011228:	2a00      	cmp	r2, #0
 801122a:	bf0c      	ite	eq
 801122c:	2201      	moveq	r2, #1
 801122e:	2200      	movne	r2, #0
 8011230:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 8011232:	bf18      	it	ne
 8011234:	4618      	movne	r0, r3
 8011236:	4a53      	ldr	r2, [pc, #332]	; (8011384 <GUI_Touch_Processing+0x5dc>)
 8011238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801123c:	f7fd fe04 	bl	800ee48 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8011240:	7822      	ldrb	r2, [r4, #0]
 8011242:	4b51      	ldr	r3, [pc, #324]	; (8011388 <GUI_Touch_Processing+0x5e0>)
 8011244:	2a00      	cmp	r2, #0
 8011246:	f040 87c5 	bne.w	80121d4 <GUI_Touch_Processing+0x142c>
 801124a:	4a50      	ldr	r2, [pc, #320]	; (801138c <GUI_Touch_Processing+0x5e4>)
 801124c:	edd2 0a00 	vldr	s1, [r2]
 8011250:	ed93 0a00 	vldr	s0, [r3]
 8011254:	f008 fd28 	bl	8019ca8 <Rabs_calc_Factor2_Settings_change>
 8011258:	4b4d      	ldr	r3, [pc, #308]	; (8011390 <GUI_Touch_Processing+0x5e8>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 801125a:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 801125c:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8011260:	21ca      	movs	r1, #202	; 0xca
 8011262:	20b6      	movs	r0, #182	; 0xb6
}
 8011264:	b002      	add	sp, #8
 8011266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 801126a:	f001 bebf 	b.w	8012fec <GUI_Switch_ButtonActive>
				if(Touch_x >= 182 & Touch_x <= (182+54) & Touch_y >=268 & Touch_y <=(268+54) ) //Bluetooth
 801126e:	f5a2 7586 	sub.w	r5, r2, #268	; 0x10c
 8011272:	2d36      	cmp	r5, #54	; 0x36
 8011274:	d810      	bhi.n	8011298 <GUI_Touch_Processing+0x4f0>
 8011276:	b179      	cbz	r1, 8011298 <GUI_Touch_Processing+0x4f0>
					Bluetooth = !Bluetooth;
 8011278:	4b46      	ldr	r3, [pc, #280]	; (8011394 <GUI_Touch_Processing+0x5ec>)
 801127a:	781a      	ldrb	r2, [r3, #0]
 801127c:	fab2 f282 	clz	r2, r2
 8011280:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 8011282:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8011286:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8011288:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 801128a:	f001 fe59 	bl	8012f40 <GUI_Switch_Button>
}
 801128e:	b002      	add	sp, #8
 8011290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_Up_Panel();
 8011294:	f7fe ba50 	b.w	800f738 <GUI_Up_Panel>
				if(Touch_x >= 8 & Touch_x <= (250) & Touch_y >=124 & Touch_y <=(174) ) // Information
 8011298:	f1a3 0108 	sub.w	r1, r3, #8
 801129c:	29f2      	cmp	r1, #242	; 0xf2
 801129e:	f1a2 057c 	sub.w	r5, r2, #124	; 0x7c
 80112a2:	bf8c      	ite	hi
 80112a4:	2100      	movhi	r1, #0
 80112a6:	2101      	movls	r1, #1
 80112a8:	2d32      	cmp	r5, #50	; 0x32
 80112aa:	d803      	bhi.n	80112b4 <GUI_Touch_Processing+0x50c>
 80112ac:	b111      	cbz	r1, 80112b4 <GUI_Touch_Processing+0x50c>
					GUI_screen_state = Information_Screen;
 80112ae:	2311      	movs	r3, #17
 80112b0:	7023      	strb	r3, [r4, #0]
 80112b2:	e624      	b.n	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //Illuminance
 80112b4:	f1a3 05c8 	sub.w	r5, r3, #200	; 0xc8
 80112b8:	2d36      	cmp	r5, #54	; 0x36
 80112ba:	d80c      	bhi.n	80112d6 <GUI_Touch_Processing+0x52e>
 80112bc:	f46f 77a3 	mvn.w	r7, #326	; 0x146
 80112c0:	19d5      	adds	r5, r2, r7
 80112c2:	2d36      	cmp	r5, #54	; 0x36
 80112c4:	d807      	bhi.n	80112d6 <GUI_Touch_Processing+0x52e>
					Measure_Field ^= Illuminance;
 80112c6:	4b34      	ldr	r3, [pc, #208]	; (8011398 <GUI_Touch_Processing+0x5f0>)
 80112c8:	881a      	ldrh	r2, [r3, #0]
 80112ca:	f082 0201 	eor.w	r2, r2, #1
 80112ce:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 80112d0:	f002 0201 	and.w	r2, r2, #1
 80112d4:	e1de      	b.n	8011694 <GUI_Touch_Processing+0x8ec>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 80112d6:	1e5d      	subs	r5, r3, #1
 80112d8:	2d36      	cmp	r5, #54	; 0x36
 80112da:	d868      	bhi.n	80113ae <GUI_Touch_Processing+0x606>
 80112dc:	2800      	cmp	r0, #0
 80112de:	d066      	beq.n	80113ae <GUI_Touch_Processing+0x606>
					WriteSDFLASH_t(sdfile_cnt);
 80112e0:	4b2e      	ldr	r3, [pc, #184]	; (801139c <GUI_Touch_Processing+0x5f4>)
 80112e2:	2100      	movs	r1, #0
 80112e4:	8818      	ldrh	r0, [r3, #0]
 80112e6:	f008 fda7 	bl	8019e38 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80112ea:	4b2d      	ldr	r3, [pc, #180]	; (80113a0 <GUI_Touch_Processing+0x5f8>)
 80112ec:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80112ee:	1e5a      	subs	r2, r3, #1
 80112f0:	2a05      	cmp	r2, #5
 80112f2:	d804      	bhi.n	80112fe <GUI_Touch_Processing+0x556>
 80112f4:	e8df f002 	tbb	[pc, r2]
 80112f8:	08030305 	.word	0x08030305
 80112fc:	0b58      	.short	0x0b58
					GUI_screen_state = Prev_Inf_Screen;
 80112fe:	7023      	strb	r3, [r4, #0]
 8011300:	e5fd      	b.n	8010efe <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011302:	2301      	movs	r3, #1
 8011304:	7023      	strb	r3, [r4, #0]
 8011306:	e5fa      	b.n	8010efe <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011308:	2304      	movs	r3, #4
 801130a:	7023      	strb	r3, [r4, #0]
 801130c:	e5f7      	b.n	8010efe <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 801130e:	2306      	movs	r3, #6
 8011310:	7023      	strb	r3, [r4, #0]
 8011312:	e5f4      	b.n	8010efe <GUI_Touch_Processing+0x156>
 8011314:	2000022a 	.word	0x2000022a
 8011318:	20054942 	.word	0x20054942
 801131c:	20054944 	.word	0x20054944
 8011320:	20005709 	.word	0x20005709
 8011324:	20005700 	.word	0x20005700
 8011328:	200958fc 	.word	0x200958fc
 801132c:	20005704 	.word	0x20005704
 8011330:	20054940 	.word	0x20054940
 8011334:	2000c53c 	.word	0x2000c53c
 8011338:	2008d514 	.word	0x2008d514
 801133c:	20052940 	.word	0x20052940
 8011340:	2008a514 	.word	0x2008a514
 8011344:	2008f522 	.word	0x2008f522
 8011348:	2008f540 	.word	0x2008f540
 801134c:	20004659 	.word	0x20004659
 8011350:	2000465b 	.word	0x2000465b
 8011354:	2000465a 	.word	0x2000465a
 8011358:	20004658 	.word	0x20004658
 801135c:	200056fd 	.word	0x200056fd
 8011360:	20003633 	.word	0x20003633
 8011364:	20003624 	.word	0x20003624
 8011368:	20003635 	.word	0x20003635
 801136c:	20003634 	.word	0x20003634
 8011370:	20095c54 	.word	0x20095c54
 8011374:	20005728 	.word	0x20005728
 8011378:	20000ebc 	.word	0x20000ebc
 801137c:	08101838 	.word	0x08101838
 8011380:	08100838 	.word	0x08100838
 8011384:	20051940 	.word	0x20051940
 8011388:	20009d2c 	.word	0x20009d2c
 801138c:	20009d28 	.word	0x20009d28
 8011390:	20009d34 	.word	0x20009d34
 8011394:	20090aba 	.word	0x20090aba
 8011398:	20005706 	.word	0x20005706
 801139c:	2000572e 	.word	0x2000572e
 80113a0:	20090ab5 	.word	0x20090ab5
 80113a4:	200056fc 	.word	0x200056fc
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80113a8:	2305      	movs	r3, #5
 80113aa:	7023      	strb	r3, [r4, #0]
 80113ac:	e5a7      	b.n	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 8 & Touch_x <= (250) & Touch_y >=80 & Touch_y <=(120) ) // Language change
 80113ae:	3a50      	subs	r2, #80	; 0x50
 80113b0:	2a28      	cmp	r2, #40	; 0x28
 80113b2:	d80c      	bhi.n	80113ce <GUI_Touch_Processing+0x626>
 80113b4:	b159      	cbz	r1, 80113ce <GUI_Touch_Processing+0x626>
					if (Language_status == Ru) Language_status=En;
 80113b6:	4ba0      	ldr	r3, [pc, #640]	; (8011638 <GUI_Touch_Processing+0x890>)
 80113b8:	781a      	ldrb	r2, [r3, #0]
 80113ba:	b912      	cbnz	r2, 80113c2 <GUI_Touch_Processing+0x61a>
 80113bc:	2201      	movs	r2, #1
 80113be:	701a      	strb	r2, [r3, #0]
 80113c0:	e59d      	b.n	8010efe <GUI_Touch_Processing+0x156>
					else if (Language_status == En) Language_status=Ru;
 80113c2:	2a01      	cmp	r2, #1
 80113c4:	f47f ad9b 	bne.w	8010efe <GUI_Touch_Processing+0x156>
 80113c8:	2200      	movs	r2, #0
 80113ca:	701a      	strb	r2, [r3, #0]
 80113cc:	e597      	b.n	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 80113ce:	f1a3 02d9 	sub.w	r2, r3, #217	; 0xd9
 80113d2:	2a36      	cmp	r2, #54	; 0x36
 80113d4:	d810      	bhi.n	80113f8 <GUI_Touch_Processing+0x650>
 80113d6:	b178      	cbz	r0, 80113f8 <GUI_Touch_Processing+0x650>
					TFT_ON_OFF = 0x00;
 80113d8:	4b98      	ldr	r3, [pc, #608]	; (801163c <GUI_Touch_Processing+0x894>)
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 80113da:	4899      	ldr	r0, [pc, #612]	; (8011640 <GUI_Touch_Processing+0x898>)
					TFT_ON_OFF = 0x00;
 80113dc:	2400      	movs	r4, #0
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 80113de:	2104      	movs	r1, #4
					TFT_ON_OFF = 0x00;
 80113e0:	701c      	strb	r4, [r3, #0]
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 80113e2:	f7f4 ff49 	bl	8006278 <HAL_TIM_PWM_Stop>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 80113e6:	4897      	ldr	r0, [pc, #604]	; (8011644 <GUI_Touch_Processing+0x89c>)
 80113e8:	4622      	mov	r2, r4
 80113ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
}
 80113ee:	b002      	add	sp, #8
 80113f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 80113f4:	f7f1 b89a 	b.w	800252c <HAL_GPIO_WritePin>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 80113f8:	3b37      	subs	r3, #55	; 0x37
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 80113fa:	2b36      	cmp	r3, #54	; 0x36
 80113fc:	e0c2      	b.n	8011584 <GUI_Touch_Processing+0x7dc>
				preGUI_screen_state = GUI_screen_state;
 80113fe:	4b92      	ldr	r3, [pc, #584]	; (8011648 <GUI_Touch_Processing+0x8a0>)
 8011400:	2208      	movs	r2, #8
 8011402:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) )////down
 8011404:	4b91      	ldr	r3, [pc, #580]	; (801164c <GUI_Touch_Processing+0x8a4>)
 8011406:	881a      	ldrh	r2, [r3, #0]
 8011408:	4b91      	ldr	r3, [pc, #580]	; (8011650 <GUI_Touch_Processing+0x8a8>)
 801140a:	881b      	ldrh	r3, [r3, #0]
 801140c:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 8011410:	2836      	cmp	r0, #54	; 0x36
 8011412:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8011416:	bf8c      	ite	hi
 8011418:	2000      	movhi	r0, #0
 801141a:	2001      	movls	r0, #1
 801141c:	2936      	cmp	r1, #54	; 0x36
 801141e:	d803      	bhi.n	8011428 <GUI_Touch_Processing+0x680>
 8011420:	b110      	cbz	r0, 8011428 <GUI_Touch_Processing+0x680>
					GUI_screen_state = DataSet3_Screen;
 8011422:	2309      	movs	r3, #9
 8011424:	7023      	strb	r3, [r4, #0]
 8011426:	e56a      	b.n	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=70 & Touch_y <=(70+54) ) //Irradiance
 8011428:	f1a2 01c8 	sub.w	r1, r2, #200	; 0xc8
 801142c:	2936      	cmp	r1, #54	; 0x36
 801142e:	f1a3 0546 	sub.w	r5, r3, #70	; 0x46
 8011432:	bf8c      	ite	hi
 8011434:	2100      	movhi	r1, #0
 8011436:	2101      	movls	r1, #1
 8011438:	2d36      	cmp	r5, #54	; 0x36
 801143a:	d808      	bhi.n	801144e <GUI_Touch_Processing+0x6a6>
 801143c:	b139      	cbz	r1, 801144e <GUI_Touch_Processing+0x6a6>
					Measure_Field ^= Irradiance;
 801143e:	4b85      	ldr	r3, [pc, #532]	; (8011654 <GUI_Touch_Processing+0x8ac>)
 8011440:	881a      	ldrh	r2, [r3, #0]
 8011442:	f082 0202 	eor.w	r2, r2, #2
 8011446:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 8011448:	f002 0202 	and.w	r2, r2, #2
 801144c:	e0c7      	b.n	80115de <GUI_Touch_Processing+0x836>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=133 & Touch_y <=(133+54) ) //PPFD
 801144e:	f1a3 0585 	sub.w	r5, r3, #133	; 0x85
 8011452:	2d36      	cmp	r5, #54	; 0x36
 8011454:	d808      	bhi.n	8011468 <GUI_Touch_Processing+0x6c0>
 8011456:	b139      	cbz	r1, 8011468 <GUI_Touch_Processing+0x6c0>
					Measure_Field ^= PPFD;
 8011458:	4b7e      	ldr	r3, [pc, #504]	; (8011654 <GUI_Touch_Processing+0x8ac>)
 801145a:	881a      	ldrh	r2, [r3, #0]
 801145c:	f082 0204 	eor.w	r2, r2, #4
 8011460:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 8011462:	f002 0204 	and.w	r2, r2, #4
 8011466:	e390      	b.n	8011b8a <GUI_Touch_Processing+0xde2>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=198 & Touch_y <=(198+54) ) //PPFD_BGR
 8011468:	f1a3 05c6 	sub.w	r5, r3, #198	; 0xc6
 801146c:	2d36      	cmp	r5, #54	; 0x36
 801146e:	d80e      	bhi.n	801148e <GUI_Touch_Processing+0x6e6>
 8011470:	b169      	cbz	r1, 801148e <GUI_Touch_Processing+0x6e6>
					Measure_Field ^= PPFD_BGR;
 8011472:	4b78      	ldr	r3, [pc, #480]	; (8011654 <GUI_Touch_Processing+0x8ac>)
 8011474:	881a      	ldrh	r2, [r3, #0]
 8011476:	f082 0208 	eor.w	r2, r2, #8
 801147a:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 801147c:	21c6      	movs	r1, #198	; 0xc6
 801147e:	f002 0208 	and.w	r2, r2, #8
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 8011482:	20c8      	movs	r0, #200	; 0xc8
}
 8011484:	b002      	add	sp, #8
 8011486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 801148a:	f001 bce9 	b.w	8012e60 <GUI_CheckBox>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=263 & Touch_y <=(263+54) ) //CCT
 801148e:	f46f 7683 	mvn.w	r6, #262	; 0x106
 8011492:	199d      	adds	r5, r3, r6
 8011494:	2d36      	cmp	r5, #54	; 0x36
 8011496:	d80a      	bhi.n	80114ae <GUI_Touch_Processing+0x706>
 8011498:	b149      	cbz	r1, 80114ae <GUI_Touch_Processing+0x706>
					Measure_Field ^= CCT;
 801149a:	4b6e      	ldr	r3, [pc, #440]	; (8011654 <GUI_Touch_Processing+0x8ac>)
 801149c:	881a      	ldrh	r2, [r3, #0]
 801149e:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 80114a2:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 263, Measure_Field&CCT);
 80114a4:	f240 1107 	movw	r1, #263	; 0x107
 80114a8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80114ac:	e7e9      	b.n	8011482 <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //delta_E
 80114ae:	f46f 75a3 	mvn.w	r5, #326	; 0x146
 80114b2:	442b      	add	r3, r5
 80114b4:	2b36      	cmp	r3, #54	; 0x36
 80114b6:	bf8c      	ite	hi
 80114b8:	2300      	movhi	r3, #0
 80114ba:	2301      	movls	r3, #1
 80114bc:	b1c1      	cbz	r1, 80114f0 <GUI_Touch_Processing+0x748>
 80114be:	b1bb      	cbz	r3, 80114f0 <GUI_Touch_Processing+0x748>
					Measure_Field ^= delta_E;
 80114c0:	4c64      	ldr	r4, [pc, #400]	; (8011654 <GUI_Touch_Processing+0x8ac>)
 80114c2:	8822      	ldrh	r2, [r4, #0]
 80114c4:	f482 6200 	eor.w	r2, r2, #2048	; 0x800
 80114c8:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 327, Measure_Field&delta_E);
 80114ca:	f240 1147 	movw	r1, #327	; 0x147
 80114ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80114d2:	20c8      	movs	r0, #200	; 0xc8
 80114d4:	f001 fcc4 	bl	8012e60 <GUI_CheckBox>
					GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 80114d8:	8822      	ldrh	r2, [r4, #0]
 80114da:	2300      	movs	r3, #0
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 80114dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80114e0:	f240 1147 	movw	r1, #327	; 0x147
 80114e4:	2082      	movs	r0, #130	; 0x82
}
 80114e6:	b002      	add	sp, #8
 80114e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 80114ec:	f001 bb98 	b.w	8012c20 <GUI_Button_Measure_deltaE_Small>
				else	if(Touch_x >= 130 & Touch_x <= (200+38) & Touch_y >=327 & Touch_y <=(327+54) ) //delta_E_measure_small
 80114f0:	f1a2 0182 	sub.w	r1, r2, #130	; 0x82
 80114f4:	296c      	cmp	r1, #108	; 0x6c
 80114f6:	d81b      	bhi.n	8011530 <GUI_Touch_Processing+0x788>
 80114f8:	b1d3      	cbz	r3, 8011530 <GUI_Touch_Processing+0x788>
					if(Measure_Field&delta_E)
 80114fa:	4c56      	ldr	r4, [pc, #344]	; (8011654 <GUI_Touch_Processing+0x8ac>)
 80114fc:	8823      	ldrh	r3, [r4, #0]
 80114fe:	051b      	lsls	r3, r3, #20
 8011500:	f57f acfd 	bpl.w	8010efe <GUI_Touch_Processing+0x156>
						Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 8011504:	4b54      	ldr	r3, [pc, #336]	; (8011658 <GUI_Touch_Processing+0x8b0>)
 8011506:	4855      	ldr	r0, [pc, #340]	; (801165c <GUI_Touch_Processing+0x8b4>)
 8011508:	7819      	ldrb	r1, [r3, #0]
 801150a:	4b55      	ldr	r3, [pc, #340]	; (8011660 <GUI_Touch_Processing+0x8b8>)
 801150c:	781a      	ldrb	r2, [r3, #0]
 801150e:	4b55      	ldr	r3, [pc, #340]	; (8011664 <GUI_Touch_Processing+0x8bc>)
 8011510:	2900      	cmp	r1, #0
 8011512:	bf08      	it	eq
 8011514:	4618      	moveq	r0, r3
 8011516:	f7fd f97f 	bl	800e818 <Calculate_Lab>
						colorimetry_LAB_mem[0] = colorimetry_LAB[0];
 801151a:	4a53      	ldr	r2, [pc, #332]	; (8011668 <GUI_Touch_Processing+0x8c0>)
 801151c:	4b53      	ldr	r3, [pc, #332]	; (801166c <GUI_Touch_Processing+0x8c4>)
 801151e:	8811      	ldrh	r1, [r2, #0]
 8011520:	8019      	strh	r1, [r3, #0]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 8011522:	8851      	ldrh	r1, [r2, #2]
						colorimetry_LAB_mem[2] = colorimetry_LAB[2];
 8011524:	8892      	ldrh	r2, [r2, #4]
 8011526:	809a      	strh	r2, [r3, #4]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 8011528:	8059      	strh	r1, [r3, #2]
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 801152a:	8822      	ldrh	r2, [r4, #0]
 801152c:	2301      	movs	r3, #1
 801152e:	e7d5      	b.n	80114dc <GUI_Touch_Processing+0x734>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 8011530:	1e53      	subs	r3, r2, #1
 8011532:	2b36      	cmp	r3, #54	; 0x36
 8011534:	d81d      	bhi.n	8011572 <GUI_Touch_Processing+0x7ca>
 8011536:	b1e0      	cbz	r0, 8011572 <GUI_Touch_Processing+0x7ca>
					WriteSDFLASH_t(sdfile_cnt);
 8011538:	4b4d      	ldr	r3, [pc, #308]	; (8011670 <GUI_Touch_Processing+0x8c8>)
 801153a:	2100      	movs	r1, #0
 801153c:	8818      	ldrh	r0, [r3, #0]
 801153e:	f008 fc7b 	bl	8019e38 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011542:	4b4c      	ldr	r3, [pc, #304]	; (8011674 <GUI_Touch_Processing+0x8cc>)
 8011544:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011546:	1e5a      	subs	r2, r3, #1
 8011548:	2a05      	cmp	r2, #5
 801154a:	d804      	bhi.n	8011556 <GUI_Touch_Processing+0x7ae>
 801154c:	e8df f002 	tbb	[pc, r2]
 8011550:	08030305 	.word	0x08030305
 8011554:	0b0e      	.short	0x0b0e
					GUI_screen_state = Prev_Inf_Screen;
 8011556:	7023      	strb	r3, [r4, #0]
 8011558:	e4d1      	b.n	8010efe <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 801155a:	2301      	movs	r3, #1
 801155c:	7023      	strb	r3, [r4, #0]
 801155e:	e4ce      	b.n	8010efe <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011560:	2304      	movs	r3, #4
 8011562:	7023      	strb	r3, [r4, #0]
 8011564:	e4cb      	b.n	8010efe <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011566:	2306      	movs	r3, #6
 8011568:	7023      	strb	r3, [r4, #0]
 801156a:	e4c8      	b.n	8010efe <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801156c:	2305      	movs	r3, #5
 801156e:	7023      	strb	r3, [r4, #0]
 8011570:	e4c5      	b.n	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 8011572:	f1a2 03d9 	sub.w	r3, r2, #217	; 0xd9
 8011576:	2b36      	cmp	r3, #54	; 0x36
 8011578:	d802      	bhi.n	8011580 <GUI_Touch_Processing+0x7d8>
 801157a:	2800      	cmp	r0, #0
 801157c:	f47f af2c 	bne.w	80113d8 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 55 & Touch_x <= (55+54) & Touch_y >=426 & Touch_y <=(426+54) ) //SD_Card
 8011580:	3a37      	subs	r2, #55	; 0x37
 8011582:	2a36      	cmp	r2, #54	; 0x36
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011584:	f63f acbb 	bhi.w	8010efe <GUI_Touch_Processing+0x156>
 8011588:	2800      	cmp	r0, #0
 801158a:	f47f acc0 	bne.w	8010f0e <GUI_Touch_Processing+0x166>
 801158e:	e4b6      	b.n	8010efe <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8011590:	4b2d      	ldr	r3, [pc, #180]	; (8011648 <GUI_Touch_Processing+0x8a0>)
 8011592:	2209      	movs	r2, #9
 8011594:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) )// down
 8011596:	4b2d      	ldr	r3, [pc, #180]	; (801164c <GUI_Touch_Processing+0x8a4>)
 8011598:	8819      	ldrh	r1, [r3, #0]
 801159a:	4b2d      	ldr	r3, [pc, #180]	; (8011650 <GUI_Touch_Processing+0x8a8>)
 801159c:	881b      	ldrh	r3, [r3, #0]
 801159e:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 80115a2:	2836      	cmp	r0, #54	; 0x36
 80115a4:	f1a1 02a3 	sub.w	r2, r1, #163	; 0xa3
 80115a8:	bf8c      	ite	hi
 80115aa:	2000      	movhi	r0, #0
 80115ac:	2001      	movls	r0, #1
 80115ae:	2a36      	cmp	r2, #54	; 0x36
 80115b0:	d803      	bhi.n	80115ba <GUI_Touch_Processing+0x812>
 80115b2:	b110      	cbz	r0, 80115ba <GUI_Touch_Processing+0x812>
					GUI_screen_state = DataSet4_Screen;
 80115b4:	230a      	movs	r3, #10
 80115b6:	7023      	strb	r3, [r4, #0]
 80115b8:	e4a1      	b.n	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=70 & Touch_y <=(70+54) ) //CIE_XYZ
 80115ba:	f1a1 02c8 	sub.w	r2, r1, #200	; 0xc8
 80115be:	2a36      	cmp	r2, #54	; 0x36
 80115c0:	f1a3 0546 	sub.w	r5, r3, #70	; 0x46
 80115c4:	bf8c      	ite	hi
 80115c6:	2200      	movhi	r2, #0
 80115c8:	2201      	movls	r2, #1
 80115ca:	2d36      	cmp	r5, #54	; 0x36
 80115cc:	d809      	bhi.n	80115e2 <GUI_Touch_Processing+0x83a>
 80115ce:	b142      	cbz	r2, 80115e2 <GUI_Touch_Processing+0x83a>
					Measure_Field ^= CIE_XYZ;
 80115d0:	4b20      	ldr	r3, [pc, #128]	; (8011654 <GUI_Touch_Processing+0x8ac>)
 80115d2:	881a      	ldrh	r2, [r3, #0]
 80115d4:	f082 0210 	eor.w	r2, r2, #16
 80115d8:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 80115da:	f002 0210 	and.w	r2, r2, #16
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 80115de:	2146      	movs	r1, #70	; 0x46
 80115e0:	e74f      	b.n	8011482 <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=133 & Touch_y <=(133+54) ) //CIE_xy
 80115e2:	f1a3 0585 	sub.w	r5, r3, #133	; 0x85
 80115e6:	2d36      	cmp	r5, #54	; 0x36
 80115e8:	d846      	bhi.n	8011678 <GUI_Touch_Processing+0x8d0>
 80115ea:	2a00      	cmp	r2, #0
 80115ec:	d044      	beq.n	8011678 <GUI_Touch_Processing+0x8d0>
					Measure_Field ^= CIE_xy;
 80115ee:	4c19      	ldr	r4, [pc, #100]	; (8011654 <GUI_Touch_Processing+0x8ac>)
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 80115f0:	4d19      	ldr	r5, [pc, #100]	; (8011658 <GUI_Touch_Processing+0x8b0>)
					Measure_Field ^= CIE_xy;
 80115f2:	8822      	ldrh	r2, [r4, #0]
 80115f4:	f082 0220 	eor.w	r2, r2, #32
 80115f8:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 80115fa:	2185      	movs	r1, #133	; 0x85
 80115fc:	f002 0220 	and.w	r2, r2, #32
 8011600:	20c8      	movs	r0, #200	; 0xc8
 8011602:	f001 fc2d 	bl	8012e60 <GUI_CheckBox>
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 8011606:	8823      	ldrh	r3, [r4, #0]
 8011608:	782a      	ldrb	r2, [r5, #0]
 801160a:	f003 0320 	and.w	r3, r3, #32
 801160e:	f002 0201 	and.w	r2, r2, #1
 8011612:	21c6      	movs	r1, #198	; 0xc6
 8011614:	20c8      	movs	r0, #200	; 0xc8
 8011616:	f001 fc64 	bl	8012ee2 <GUI_RadioBox>
					GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 801161a:	782a      	ldrb	r2, [r5, #0]
 801161c:	8823      	ldrh	r3, [r4, #0]
 801161e:	43d2      	mvns	r2, r2
 8011620:	f003 0320 	and.w	r3, r3, #32
 8011624:	f002 0201 	and.w	r2, r2, #1
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 8011628:	f240 1107 	movw	r1, #263	; 0x107
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 801162c:	20c8      	movs	r0, #200	; 0xc8
}
 801162e:	b002      	add	sp, #8
 8011630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 8011634:	f001 bc55 	b.w	8012ee2 <GUI_RadioBox>
 8011638:	20005703 	.word	0x20005703
 801163c:	20000ebe 	.word	0x20000ebe
 8011640:	200957b4 	.word	0x200957b4
 8011644:	48001400 	.word	0x48001400
 8011648:	2000022a 	.word	0x2000022a
 801164c:	20054942 	.word	0x20054942
 8011650:	20054944 	.word	0x20054944
 8011654:	20005706 	.word	0x20005706
 8011658:	20005704 	.word	0x20005704
 801165c:	2008f522 	.word	0x2008f522
 8011660:	20090ab9 	.word	0x20090ab9
 8011664:	2008f528 	.word	0x2008f528
 8011668:	2008f51c 	.word	0x2008f51c
 801166c:	20091048 	.word	0x20091048
 8011670:	2000572e 	.word	0x2000572e
 8011674:	20090ab5 	.word	0x20090ab5
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=327 & Touch_y <=(327+54) ) //CIE_Luv
 8011678:	f46f 7ca3 	mvn.w	ip, #326	; 0x146
 801167c:	eb03 050c 	add.w	r5, r3, ip
 8011680:	2d36      	cmp	r5, #54	; 0x36
 8011682:	d80a      	bhi.n	801169a <GUI_Touch_Processing+0x8f2>
 8011684:	b14a      	cbz	r2, 801169a <GUI_Touch_Processing+0x8f2>
					Measure_Field ^= CIE_Luv;
 8011686:	4ba8      	ldr	r3, [pc, #672]	; (8011928 <GUI_Touch_Processing+0xb80>)
 8011688:	881a      	ldrh	r2, [r3, #0]
 801168a:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 801168e:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 8011690:	f002 0240 	and.w	r2, r2, #64	; 0x40
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 8011694:	f240 1147 	movw	r1, #327	; 0x147
 8011698:	e6f3      	b.n	8011482 <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=198 & Touch_y <=(198+54) && (Measure_Field&CIE_xy)) //CIE_xy_1931
 801169a:	f1a3 05c6 	sub.w	r5, r3, #198	; 0xc6
 801169e:	2d36      	cmp	r5, #54	; 0x36
 80116a0:	d817      	bhi.n	80116d2 <GUI_Touch_Processing+0x92a>
 80116a2:	b1b2      	cbz	r2, 80116d2 <GUI_Touch_Processing+0x92a>
 80116a4:	4da0      	ldr	r5, [pc, #640]	; (8011928 <GUI_Touch_Processing+0xb80>)
 80116a6:	882d      	ldrh	r5, [r5, #0]
 80116a8:	06af      	lsls	r7, r5, #26
 80116aa:	d512      	bpl.n	80116d2 <GUI_Touch_Processing+0x92a>
					if(!(Measure_Color_xy&CIE_xy_1931_1964)){
 80116ac:	4c9f      	ldr	r4, [pc, #636]	; (801192c <GUI_Touch_Processing+0xb84>)
 80116ae:	7822      	ldrb	r2, [r4, #0]
 80116b0:	07d6      	lsls	r6, r2, #31
 80116b2:	f53f ac24 	bmi.w	8010efe <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 80116b6:	2301      	movs	r3, #1
						Measure_Color_xy ^= CIE_xy_1931_1964;
 80116b8:	f082 0201 	eor.w	r2, r2, #1
 80116bc:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 80116be:	21c6      	movs	r1, #198	; 0xc6
 80116c0:	401a      	ands	r2, r3
 80116c2:	20c8      	movs	r0, #200	; 0xc8
 80116c4:	f001 fc0d 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 80116c8:	7822      	ldrb	r2, [r4, #0]
 80116ca:	2301      	movs	r3, #1
 80116cc:	43d2      	mvns	r2, r2
 80116ce:	401a      	ands	r2, r3
 80116d0:	e7aa      	b.n	8011628 <GUI_Touch_Processing+0x880>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=263 & Touch_y <=(263+54) && (Measure_Field&CIE_xy)) //CIE_xy_1964
 80116d2:	f46f 7583 	mvn.w	r5, #262	; 0x106
 80116d6:	442b      	add	r3, r5
 80116d8:	2b36      	cmp	r3, #54	; 0x36
 80116da:	d80a      	bhi.n	80116f2 <GUI_Touch_Processing+0x94a>
 80116dc:	b14a      	cbz	r2, 80116f2 <GUI_Touch_Processing+0x94a>
 80116de:	4b92      	ldr	r3, [pc, #584]	; (8011928 <GUI_Touch_Processing+0xb80>)
 80116e0:	881b      	ldrh	r3, [r3, #0]
 80116e2:	069b      	lsls	r3, r3, #26
 80116e4:	d505      	bpl.n	80116f2 <GUI_Touch_Processing+0x94a>
					if((Measure_Color_xy&CIE_xy_1931_1964)){
 80116e6:	4c91      	ldr	r4, [pc, #580]	; (801192c <GUI_Touch_Processing+0xb84>)
 80116e8:	7822      	ldrb	r2, [r4, #0]
 80116ea:	07d7      	lsls	r7, r2, #31
 80116ec:	f57f ac07 	bpl.w	8010efe <GUI_Touch_Processing+0x156>
 80116f0:	e7e1      	b.n	80116b6 <GUI_Touch_Processing+0x90e>
				if(Touch_x >= 217 & Touch_x <= (217+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Display_Off
 80116f2:	f1a1 03d9 	sub.w	r3, r1, #217	; 0xd9
 80116f6:	2b36      	cmp	r3, #54	; 0x36
 80116f8:	d802      	bhi.n	8011700 <GUI_Touch_Processing+0x958>
 80116fa:	2800      	cmp	r0, #0
 80116fc:	f47f ae6c 	bne.w	80113d8 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1 & Touch_x <= (1+54) & Touch_y >=426 & Touch_y <=(426+54) ) //Back
 8011700:	1e4b      	subs	r3, r1, #1
 8011702:	2b36      	cmp	r3, #54	; 0x36
 8011704:	f200 820a 	bhi.w	8011b1c <GUI_Touch_Processing+0xd74>
 8011708:	2800      	cmp	r0, #0
 801170a:	f000 8207 	beq.w	8011b1c <GUI_Touch_Processing+0xd74>
					WriteSDFLASH_t(sdfile_cnt);
 801170e:	4b88      	ldr	r3, [pc, #544]	; (8011930 <GUI_Touch_Processing+0xb88>)
 8011710:	2100      	movs	r1, #0
 8011712:	8818      	ldrh	r0, [r3, #0]
 8011714:	f008 fb90 	bl	8019e38 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011718:	4b86      	ldr	r3, [pc, #536]	; (8011934 <GUI_Touch_Processing+0xb8c>)
 801171a:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801171c:	1e5a      	subs	r2, r3, #1
 801171e:	2a05      	cmp	r2, #5
 8011720:	d804      	bhi.n	801172c <GUI_Touch_Processing+0x984>
 8011722:	e8df f002 	tbb	[pc, r2]
 8011726:	0306      	.short	0x0306
 8011728:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 801172c:	7023      	strb	r3, [r4, #0]
 801172e:	f7ff bbe6 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011732:	2301      	movs	r3, #1
 8011734:	7023      	strb	r3, [r4, #0]
 8011736:	f7ff bbe2 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801173a:	2304      	movs	r3, #4
 801173c:	7023      	strb	r3, [r4, #0]
 801173e:	f7ff bbde 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011742:	2306      	movs	r3, #6
 8011744:	7023      	strb	r3, [r4, #0]
 8011746:	f7ff bbda 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801174a:	2305      	movs	r3, #5
 801174c:	7023      	strb	r3, [r4, #0]
 801174e:	f7ff bbd6 	b.w	8010efe <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8011752:	4b79      	ldr	r3, [pc, #484]	; (8011938 <GUI_Touch_Processing+0xb90>)
 8011754:	220a      	movs	r2, #10
 8011756:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163 & Touch_x <= (163+54) & Touch_y >=426 & Touch_y <=(426+54) ) //down
 8011758:	4b78      	ldr	r3, [pc, #480]	; (801193c <GUI_Touch_Processing+0xb94>)
 801175a:	8819      	ldrh	r1, [r3, #0]
 801175c:	4b78      	ldr	r3, [pc, #480]	; (8011940 <GUI_Touch_Processing+0xb98>)
 801175e:	881b      	ldrh	r3, [r3, #0]
 8011760:	f5a3 70d5 	sub.w	r0, r3, #426	; 0x1aa
 8011764:	2836      	cmp	r0, #54	; 0x36
 8011766:	f1a1 02a3 	sub.w	r2, r1, #163	; 0xa3
 801176a:	bf8c      	ite	hi
 801176c:	2000      	movhi	r0, #0
 801176e:	2001      	movls	r0, #1
 8011770:	2a36      	cmp	r2, #54	; 0x36
 8011772:	d804      	bhi.n	801177e <GUI_Touch_Processing+0x9d6>
 8011774:	b118      	cbz	r0, 801177e <GUI_Touch_Processing+0x9d6>
					GUI_screen_state = DataSet5_Screen;
 8011776:	230b      	movs	r3, #11
 8011778:	7023      	strb	r3, [r4, #0]
 801177a:	f7ff bbc0 	b.w	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=65 & Touch_y <=(65+54) ) //CIE_Lab
 801177e:	f1a1 02c8 	sub.w	r2, r1, #200	; 0xc8
 8011782:	2a36      	cmp	r2, #54	; 0x36
 8011784:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
 8011788:	bf8c      	ite	hi
 801178a:	2200      	movhi	r2, #0
 801178c:	2201      	movls	r2, #1
 801178e:	2d36      	cmp	r5, #54	; 0x36
 8011790:	d848      	bhi.n	8011824 <GUI_Touch_Processing+0xa7c>
 8011792:	2a00      	cmp	r2, #0
 8011794:	d046      	beq.n	8011824 <GUI_Touch_Processing+0xa7c>
					Measure_Field ^= CIE_Lab;
 8011796:	4c64      	ldr	r4, [pc, #400]	; (8011928 <GUI_Touch_Processing+0xb80>)
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 8011798:	4d6a      	ldr	r5, [pc, #424]	; (8011944 <GUI_Touch_Processing+0xb9c>)
					Measure_Field ^= CIE_Lab;
 801179a:	8822      	ldrh	r2, [r4, #0]
 801179c:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 80117a0:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 80117a2:	2141      	movs	r1, #65	; 0x41
 80117a4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80117a8:	20c8      	movs	r0, #200	; 0xc8
 80117aa:	f001 fb59 	bl	8012e60 <GUI_CheckBox>
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 80117ae:	8823      	ldrh	r3, [r4, #0]
 80117b0:	782a      	ldrb	r2, [r5, #0]
 80117b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117b6:	f002 0201 	and.w	r2, r2, #1
 80117ba:	216c      	movs	r1, #108	; 0x6c
 80117bc:	20c8      	movs	r0, #200	; 0xc8
 80117be:	f001 fb90 	bl	8012ee2 <GUI_RadioBox>
					GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 80117c2:	8823      	ldrh	r3, [r4, #0]
 80117c4:	782a      	ldrb	r2, [r5, #0]
 80117c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117ca:	f002 0202 	and.w	r2, r2, #2
 80117ce:	218f      	movs	r1, #143	; 0x8f
 80117d0:	20c8      	movs	r0, #200	; 0xc8
 80117d2:	f001 fb86 	bl	8012ee2 <GUI_RadioBox>
					GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 80117d6:	8823      	ldrh	r3, [r4, #0]
 80117d8:	782a      	ldrb	r2, [r5, #0]
 80117da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117de:	f002 0204 	and.w	r2, r2, #4
 80117e2:	21b2      	movs	r1, #178	; 0xb2
 80117e4:	20c8      	movs	r0, #200	; 0xc8
 80117e6:	f001 fb7c 	bl	8012ee2 <GUI_RadioBox>
					GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 80117ea:	8823      	ldrh	r3, [r4, #0]
 80117ec:	782a      	ldrb	r2, [r5, #0]
 80117ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80117f2:	f002 0208 	and.w	r2, r2, #8
 80117f6:	21d5      	movs	r1, #213	; 0xd5
 80117f8:	20c8      	movs	r0, #200	; 0xc8
 80117fa:	f001 fb72 	bl	8012ee2 <GUI_RadioBox>
					GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 80117fe:	8823      	ldrh	r3, [r4, #0]
 8011800:	782a      	ldrb	r2, [r5, #0]
 8011802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011806:	f002 0210 	and.w	r2, r2, #16
 801180a:	21f8      	movs	r1, #248	; 0xf8
 801180c:	20c8      	movs	r0, #200	; 0xc8
 801180e:	f001 fb68 	bl	8012ee2 <GUI_RadioBox>
					GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 8011812:	8823      	ldrh	r3, [r4, #0]
 8011814:	782a      	ldrb	r2, [r5, #0]
 8011816:	f003 0380 	and.w	r3, r3, #128	; 0x80
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 801181a:	f002 0220 	and.w	r2, r2, #32
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 801181e:	f240 111b 	movw	r1, #283	; 0x11b
 8011822:	e703      	b.n	801162c <GUI_Touch_Processing+0x884>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=345 & Touch_y <=(345+54) ) //EbEr
 8011824:	f46f 76ac 	mvn.w	r6, #344	; 0x158
 8011828:	199d      	adds	r5, r3, r6
 801182a:	2d36      	cmp	r5, #54	; 0x36
 801182c:	d80a      	bhi.n	8011844 <GUI_Touch_Processing+0xa9c>
 801182e:	b14a      	cbz	r2, 8011844 <GUI_Touch_Processing+0xa9c>
					Measure_Field ^= EbEr;
 8011830:	4b3d      	ldr	r3, [pc, #244]	; (8011928 <GUI_Touch_Processing+0xb80>)
 8011832:	881a      	ldrh	r2, [r3, #0]
 8011834:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8011838:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 345, Measure_Field&EbEr);
 801183a:	f240 1159 	movw	r1, #345	; 0x159
 801183e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8011842:	e61e      	b.n	8011482 <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 200 & Touch_x <= (200+54) & Touch_y >=108 & Touch_y <=(108+54) && (Measure_Field&CIE_Lab)) //Source_A
 8011844:	f1a3 056c 	sub.w	r5, r3, #108	; 0x6c
 8011848:	2d36      	cmp	r5, #54	; 0x36
 801184a:	d834      	bhi.n	80118b6 <GUI_Touch_Processing+0xb0e>
 801184c:	b39a      	cbz	r2, 80118b6 <GUI_Touch_Processing+0xb0e>
 801184e:	4d36      	ldr	r5, [pc, #216]	; (8011928 <GUI_Touch_Processing+0xb80>)
 8011850:	882d      	ldrh	r5, [r5, #0]
 8011852:	062d      	lsls	r5, r5, #24
 8011854:	d52f      	bpl.n	80118b6 <GUI_Touch_Processing+0xb0e>
					if(!(Source_Type&Source_A))
 8011856:	4d3b      	ldr	r5, [pc, #236]	; (8011944 <GUI_Touch_Processing+0xb9c>)
 8011858:	782b      	ldrb	r3, [r5, #0]
 801185a:	07df      	lsls	r7, r3, #31
 801185c:	f53f ab4f 	bmi.w	8010efe <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type|=Source_A, 0x01);
 8011860:	2401      	movs	r4, #1
 8011862:	4623      	mov	r3, r4
 8011864:	4622      	mov	r2, r4
 8011866:	216c      	movs	r1, #108	; 0x6c
 8011868:	20c8      	movs	r0, #200	; 0xc8
 801186a:	702c      	strb	r4, [r5, #0]
 801186c:	f001 fb39 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011870:	782a      	ldrb	r2, [r5, #0]
 8011872:	4623      	mov	r3, r4
 8011874:	f002 0202 	and.w	r2, r2, #2
 8011878:	218f      	movs	r1, #143	; 0x8f
 801187a:	20c8      	movs	r0, #200	; 0xc8
 801187c:	f001 fb31 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011880:	782a      	ldrb	r2, [r5, #0]
 8011882:	4623      	mov	r3, r4
 8011884:	f002 0204 	and.w	r2, r2, #4
 8011888:	21b2      	movs	r1, #178	; 0xb2
 801188a:	20c8      	movs	r0, #200	; 0xc8
 801188c:	f001 fb29 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011890:	782a      	ldrb	r2, [r5, #0]
 8011892:	4623      	mov	r3, r4
 8011894:	f002 0208 	and.w	r2, r2, #8
 8011898:	21d5      	movs	r1, #213	; 0xd5
 801189a:	20c8      	movs	r0, #200	; 0xc8
 801189c:	f001 fb21 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 80118a0:	782a      	ldrb	r2, [r5, #0]
 80118a2:	4623      	mov	r3, r4
 80118a4:	f002 0210 	and.w	r2, r2, #16
 80118a8:	21f8      	movs	r1, #248	; 0xf8
 80118aa:	20c8      	movs	r0, #200	; 0xc8
 80118ac:	f001 fb19 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 80118b0:	782a      	ldrb	r2, [r5, #0]
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 80118b2:	2301      	movs	r3, #1
 80118b4:	e7b1      	b.n	801181a <GUI_Touch_Processing+0xa72>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=143  & Touch_y <=(143+54)  && (Measure_Field&CIE_Lab)) //Source_D65
 80118b6:	f1a3 058f 	sub.w	r5, r3, #143	; 0x8f
 80118ba:	2d36      	cmp	r5, #54	; 0x36
 80118bc:	d844      	bhi.n	8011948 <GUI_Touch_Processing+0xba0>
 80118be:	2a00      	cmp	r2, #0
 80118c0:	d042      	beq.n	8011948 <GUI_Touch_Processing+0xba0>
 80118c2:	4d19      	ldr	r5, [pc, #100]	; (8011928 <GUI_Touch_Processing+0xb80>)
 80118c4:	882d      	ldrh	r5, [r5, #0]
 80118c6:	062e      	lsls	r6, r5, #24
 80118c8:	d53e      	bpl.n	8011948 <GUI_Touch_Processing+0xba0>
					if(!(Source_Type&Source_D65))
 80118ca:	4c1e      	ldr	r4, [pc, #120]	; (8011944 <GUI_Touch_Processing+0xb9c>)
 80118cc:	7822      	ldrb	r2, [r4, #0]
 80118ce:	f012 0202 	ands.w	r2, r2, #2
 80118d2:	f47f ab14 	bne.w	8010efe <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80118d6:	2301      	movs	r3, #1
 80118d8:	216c      	movs	r1, #108	; 0x6c
 80118da:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 80118dc:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80118de:	f001 fb00 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type|=Source_D65, 0x01);
 80118e2:	7822      	ldrb	r2, [r4, #0]
 80118e4:	2301      	movs	r3, #1
 80118e6:	f042 0202 	orr.w	r2, r2, #2
 80118ea:	218f      	movs	r1, #143	; 0x8f
 80118ec:	20c8      	movs	r0, #200	; 0xc8
 80118ee:	7022      	strb	r2, [r4, #0]
 80118f0:	f001 faf7 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 80118f4:	7822      	ldrb	r2, [r4, #0]
 80118f6:	2301      	movs	r3, #1
 80118f8:	f002 0204 	and.w	r2, r2, #4
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 80118fc:	21b2      	movs	r1, #178	; 0xb2
 80118fe:	20c8      	movs	r0, #200	; 0xc8
 8011900:	f001 faef 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011904:	7822      	ldrb	r2, [r4, #0]
 8011906:	2301      	movs	r3, #1
 8011908:	f002 0208 	and.w	r2, r2, #8
 801190c:	21d5      	movs	r1, #213	; 0xd5
 801190e:	20c8      	movs	r0, #200	; 0xc8
 8011910:	f001 fae7 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8011914:	7822      	ldrb	r2, [r4, #0]
 8011916:	2301      	movs	r3, #1
 8011918:	f002 0210 	and.w	r2, r2, #16
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 801191c:	21f8      	movs	r1, #248	; 0xf8
 801191e:	20c8      	movs	r0, #200	; 0xc8
 8011920:	f001 fadf 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8011924:	7822      	ldrb	r2, [r4, #0]
 8011926:	e7c4      	b.n	80118b2 <GUI_Touch_Processing+0xb0a>
 8011928:	20005706 	.word	0x20005706
 801192c:	20005704 	.word	0x20005704
 8011930:	2000572e 	.word	0x2000572e
 8011934:	20090ab5 	.word	0x20090ab5
 8011938:	2000022a 	.word	0x2000022a
 801193c:	20054942 	.word	0x20054942
 8011940:	20054944 	.word	0x20054944
 8011944:	20090ab9 	.word	0x20090ab9
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=178  & Touch_y <=(178+54)  && (Measure_Field&CIE_Lab)) //Source_C
 8011948:	f1a3 05b2 	sub.w	r5, r3, #178	; 0xb2
 801194c:	2d36      	cmp	r5, #54	; 0x36
 801194e:	d81e      	bhi.n	801198e <GUI_Touch_Processing+0xbe6>
 8011950:	b1ea      	cbz	r2, 801198e <GUI_Touch_Processing+0xbe6>
 8011952:	4db2      	ldr	r5, [pc, #712]	; (8011c1c <GUI_Touch_Processing+0xe74>)
 8011954:	882d      	ldrh	r5, [r5, #0]
 8011956:	062d      	lsls	r5, r5, #24
 8011958:	d519      	bpl.n	801198e <GUI_Touch_Processing+0xbe6>
					if(!(Source_Type&Source_C))
 801195a:	4cb1      	ldr	r4, [pc, #708]	; (8011c20 <GUI_Touch_Processing+0xe78>)
 801195c:	7822      	ldrb	r2, [r4, #0]
 801195e:	f012 0204 	ands.w	r2, r2, #4
 8011962:	f47f aacc 	bne.w	8010efe <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011966:	2301      	movs	r3, #1
 8011968:	216c      	movs	r1, #108	; 0x6c
 801196a:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 801196c:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 801196e:	f001 fab8 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011972:	7822      	ldrb	r2, [r4, #0]
 8011974:	2301      	movs	r3, #1
 8011976:	f002 0202 	and.w	r2, r2, #2
 801197a:	218f      	movs	r1, #143	; 0x8f
 801197c:	20c8      	movs	r0, #200	; 0xc8
 801197e:	f001 fab0 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 8011982:	7822      	ldrb	r2, [r4, #0]
 8011984:	f042 0204 	orr.w	r2, r2, #4
 8011988:	7022      	strb	r2, [r4, #0]
 801198a:	2301      	movs	r3, #1
 801198c:	e7b6      	b.n	80118fc <GUI_Touch_Processing+0xb54>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=213  & Touch_y <=(213+54)  && (Measure_Field&CIE_Lab)) //Source_D50
 801198e:	f1a3 05d5 	sub.w	r5, r3, #213	; 0xd5
 8011992:	2d36      	cmp	r5, #54	; 0x36
 8011994:	d826      	bhi.n	80119e4 <GUI_Touch_Processing+0xc3c>
 8011996:	b32a      	cbz	r2, 80119e4 <GUI_Touch_Processing+0xc3c>
 8011998:	4da0      	ldr	r5, [pc, #640]	; (8011c1c <GUI_Touch_Processing+0xe74>)
 801199a:	882d      	ldrh	r5, [r5, #0]
 801199c:	062f      	lsls	r7, r5, #24
 801199e:	d521      	bpl.n	80119e4 <GUI_Touch_Processing+0xc3c>
					if(!(Source_Type&Source_D50))
 80119a0:	4c9f      	ldr	r4, [pc, #636]	; (8011c20 <GUI_Touch_Processing+0xe78>)
 80119a2:	7822      	ldrb	r2, [r4, #0]
 80119a4:	f012 0208 	ands.w	r2, r2, #8
 80119a8:	f47f aaa9 	bne.w	8010efe <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80119ac:	2301      	movs	r3, #1
 80119ae:	216c      	movs	r1, #108	; 0x6c
 80119b0:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 80119b2:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 80119b4:	f001 fa95 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 80119b8:	7822      	ldrb	r2, [r4, #0]
 80119ba:	2301      	movs	r3, #1
 80119bc:	f002 0202 	and.w	r2, r2, #2
 80119c0:	218f      	movs	r1, #143	; 0x8f
 80119c2:	20c8      	movs	r0, #200	; 0xc8
 80119c4:	f001 fa8d 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 80119c8:	7822      	ldrb	r2, [r4, #0]
 80119ca:	2301      	movs	r3, #1
 80119cc:	f002 0204 	and.w	r2, r2, #4
 80119d0:	21b2      	movs	r1, #178	; 0xb2
 80119d2:	20c8      	movs	r0, #200	; 0xc8
 80119d4:	f001 fa85 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type|=Source_D50, 0x01);
 80119d8:	7822      	ldrb	r2, [r4, #0]
 80119da:	f042 0208 	orr.w	r2, r2, #8
 80119de:	7022      	strb	r2, [r4, #0]
 80119e0:	2301      	movs	r3, #1
 80119e2:	e793      	b.n	801190c <GUI_Touch_Processing+0xb64>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=248  & Touch_y <=(248+54)  && (Measure_Field&CIE_Lab)) //Source_D55
 80119e4:	f1a3 05f8 	sub.w	r5, r3, #248	; 0xf8
 80119e8:	2d36      	cmp	r5, #54	; 0x36
 80119ea:	d82e      	bhi.n	8011a4a <GUI_Touch_Processing+0xca2>
 80119ec:	b36a      	cbz	r2, 8011a4a <GUI_Touch_Processing+0xca2>
 80119ee:	4d8b      	ldr	r5, [pc, #556]	; (8011c1c <GUI_Touch_Processing+0xe74>)
 80119f0:	882d      	ldrh	r5, [r5, #0]
 80119f2:	062e      	lsls	r6, r5, #24
 80119f4:	d529      	bpl.n	8011a4a <GUI_Touch_Processing+0xca2>
					if(!(Source_Type&Source_D55))
 80119f6:	4c8a      	ldr	r4, [pc, #552]	; (8011c20 <GUI_Touch_Processing+0xe78>)
 80119f8:	7822      	ldrb	r2, [r4, #0]
 80119fa:	f012 0210 	ands.w	r2, r2, #16
 80119fe:	f47f aa7e 	bne.w	8010efe <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011a02:	2301      	movs	r3, #1
 8011a04:	216c      	movs	r1, #108	; 0x6c
 8011a06:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011a08:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011a0a:	f001 fa6a 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011a0e:	7822      	ldrb	r2, [r4, #0]
 8011a10:	2301      	movs	r3, #1
 8011a12:	f002 0202 	and.w	r2, r2, #2
 8011a16:	218f      	movs	r1, #143	; 0x8f
 8011a18:	20c8      	movs	r0, #200	; 0xc8
 8011a1a:	f001 fa62 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011a1e:	7822      	ldrb	r2, [r4, #0]
 8011a20:	2301      	movs	r3, #1
 8011a22:	f002 0204 	and.w	r2, r2, #4
 8011a26:	21b2      	movs	r1, #178	; 0xb2
 8011a28:	20c8      	movs	r0, #200	; 0xc8
 8011a2a:	f001 fa5a 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011a2e:	7822      	ldrb	r2, [r4, #0]
 8011a30:	2301      	movs	r3, #1
 8011a32:	f002 0208 	and.w	r2, r2, #8
 8011a36:	21d5      	movs	r1, #213	; 0xd5
 8011a38:	20c8      	movs	r0, #200	; 0xc8
 8011a3a:	f001 fa52 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 8011a3e:	7822      	ldrb	r2, [r4, #0]
 8011a40:	f042 0210 	orr.w	r2, r2, #16
 8011a44:	7022      	strb	r2, [r4, #0]
 8011a46:	2301      	movs	r3, #1
 8011a48:	e768      	b.n	801191c <GUI_Touch_Processing+0xb74>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=283  & Touch_y <=(283+54)  && (Measure_Field&CIE_Lab)) //Source_D75
 8011a4a:	f46f 758d 	mvn.w	r5, #282	; 0x11a
 8011a4e:	442b      	add	r3, r5
 8011a50:	2b36      	cmp	r3, #54	; 0x36
 8011a52:	d836      	bhi.n	8011ac2 <GUI_Touch_Processing+0xd1a>
 8011a54:	b3aa      	cbz	r2, 8011ac2 <GUI_Touch_Processing+0xd1a>
 8011a56:	4b71      	ldr	r3, [pc, #452]	; (8011c1c <GUI_Touch_Processing+0xe74>)
 8011a58:	881b      	ldrh	r3, [r3, #0]
 8011a5a:	061b      	lsls	r3, r3, #24
 8011a5c:	d531      	bpl.n	8011ac2 <GUI_Touch_Processing+0xd1a>
					if(!(Source_Type&Source_D75))
 8011a5e:	4c70      	ldr	r4, [pc, #448]	; (8011c20 <GUI_Touch_Processing+0xe78>)
 8011a60:	7822      	ldrb	r2, [r4, #0]
 8011a62:	f012 0220 	ands.w	r2, r2, #32
 8011a66:	f47f aa4a 	bne.w	8010efe <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	216c      	movs	r1, #108	; 0x6c
 8011a6e:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8011a70:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8011a72:	f001 fa36 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8011a76:	7822      	ldrb	r2, [r4, #0]
 8011a78:	2301      	movs	r3, #1
 8011a7a:	f002 0202 	and.w	r2, r2, #2
 8011a7e:	218f      	movs	r1, #143	; 0x8f
 8011a80:	20c8      	movs	r0, #200	; 0xc8
 8011a82:	f001 fa2e 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8011a86:	7822      	ldrb	r2, [r4, #0]
 8011a88:	2301      	movs	r3, #1
 8011a8a:	f002 0204 	and.w	r2, r2, #4
 8011a8e:	21b2      	movs	r1, #178	; 0xb2
 8011a90:	20c8      	movs	r0, #200	; 0xc8
 8011a92:	f001 fa26 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8011a96:	7822      	ldrb	r2, [r4, #0]
 8011a98:	2301      	movs	r3, #1
 8011a9a:	f002 0208 	and.w	r2, r2, #8
 8011a9e:	21d5      	movs	r1, #213	; 0xd5
 8011aa0:	20c8      	movs	r0, #200	; 0xc8
 8011aa2:	f001 fa1e 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8011aa6:	7822      	ldrb	r2, [r4, #0]
 8011aa8:	2301      	movs	r3, #1
 8011aaa:	f002 0210 	and.w	r2, r2, #16
 8011aae:	21f8      	movs	r1, #248	; 0xf8
 8011ab0:	20c8      	movs	r0, #200	; 0xc8
 8011ab2:	f001 fa16 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 8011ab6:	7822      	ldrb	r2, [r4, #0]
 8011ab8:	f042 0220 	orr.w	r2, r2, #32
 8011abc:	7022      	strb	r2, [r4, #0]
 8011abe:	2301      	movs	r3, #1
 8011ac0:	e6ad      	b.n	801181e <GUI_Touch_Processing+0xa76>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011ac2:	f1a1 03d9 	sub.w	r3, r1, #217	; 0xd9
 8011ac6:	2b36      	cmp	r3, #54	; 0x36
 8011ac8:	d802      	bhi.n	8011ad0 <GUI_Touch_Processing+0xd28>
 8011aca:	2800      	cmp	r0, #0
 8011acc:	f47f ac84 	bne.w	80113d8 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011ad0:	1e4b      	subs	r3, r1, #1
 8011ad2:	2b36      	cmp	r3, #54	; 0x36
 8011ad4:	d822      	bhi.n	8011b1c <GUI_Touch_Processing+0xd74>
 8011ad6:	b308      	cbz	r0, 8011b1c <GUI_Touch_Processing+0xd74>
					WriteSDFLASH_t(sdfile_cnt);
 8011ad8:	4b52      	ldr	r3, [pc, #328]	; (8011c24 <GUI_Touch_Processing+0xe7c>)
 8011ada:	2100      	movs	r1, #0
 8011adc:	8818      	ldrh	r0, [r3, #0]
 8011ade:	f008 f9ab 	bl	8019e38 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011ae2:	4b51      	ldr	r3, [pc, #324]	; (8011c28 <GUI_Touch_Processing+0xe80>)
 8011ae4:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011ae6:	1e5a      	subs	r2, r3, #1
 8011ae8:	2a05      	cmp	r2, #5
 8011aea:	d804      	bhi.n	8011af6 <GUI_Touch_Processing+0xd4e>
 8011aec:	e8df f002 	tbb	[pc, r2]
 8011af0:	0a030306 	.word	0x0a030306
 8011af4:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 8011af6:	7023      	strb	r3, [r4, #0]
 8011af8:	f7ff ba01 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011afc:	2301      	movs	r3, #1
 8011afe:	7023      	strb	r3, [r4, #0]
 8011b00:	f7ff b9fd 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011b04:	2304      	movs	r3, #4
 8011b06:	7023      	strb	r3, [r4, #0]
 8011b08:	f7ff b9f9 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011b0c:	2306      	movs	r3, #6
 8011b0e:	7023      	strb	r3, [r4, #0]
 8011b10:	f7ff b9f5 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011b14:	2305      	movs	r3, #5
 8011b16:	7023      	strb	r3, [r4, #0]
 8011b18:	f7ff b9f1 	b.w	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011b1c:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
 8011b20:	e46b      	b.n	80113fa <GUI_Touch_Processing+0x652>
					preGUI_screen_state = GUI_screen_state;
 8011b22:	4b42      	ldr	r3, [pc, #264]	; (8011c2c <GUI_Touch_Processing+0xe84>)
 8011b24:	220b      	movs	r2, #11
 8011b26:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Next
 8011b28:	4a41      	ldr	r2, [pc, #260]	; (8011c30 <GUI_Touch_Processing+0xe88>)
 8011b2a:	4b42      	ldr	r3, [pc, #264]	; (8011c34 <GUI_Touch_Processing+0xe8c>)
 8011b2c:	8811      	ldrh	r1, [r2, #0]
 8011b2e:	881b      	ldrh	r3, [r3, #0]
 8011b30:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 8011b34:	2a36      	cmp	r2, #54	; 0x36
 8011b36:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 8011b3a:	bf8c      	ite	hi
 8011b3c:	2200      	movhi	r2, #0
 8011b3e:	2201      	movls	r2, #1
 8011b40:	2836      	cmp	r0, #54	; 0x36
 8011b42:	d804      	bhi.n	8011b4e <GUI_Touch_Processing+0xda6>
 8011b44:	b11a      	cbz	r2, 8011b4e <GUI_Touch_Processing+0xda6>
					GUI_screen_state = DataSet1_Screen;
 8011b46:	2307      	movs	r3, #7
 8011b48:	7023      	strb	r3, [r4, #0]
 8011b4a:	f7ff b9d8 	b.w	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //EbEr
 8011b4e:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 8011b52:	2836      	cmp	r0, #54	; 0x36
 8011b54:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 8011b58:	bf8c      	ite	hi
 8011b5a:	2000      	movhi	r0, #0
 8011b5c:	2001      	movls	r0, #1
 8011b5e:	2d36      	cmp	r5, #54	; 0x36
 8011b60:	d808      	bhi.n	8011b74 <GUI_Touch_Processing+0xdcc>
 8011b62:	b138      	cbz	r0, 8011b74 <GUI_Touch_Processing+0xdcc>
					Measure_Field ^= lambda_d;
 8011b64:	4b2d      	ldr	r3, [pc, #180]	; (8011c1c <GUI_Touch_Processing+0xe74>)
 8011b66:	881a      	ldrh	r2, [r3, #0]
 8011b68:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8011b6c:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 8011b6e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8011b72:	e534      	b.n	80115de <GUI_Touch_Processing+0x836>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=133  & Touch_y <=(198+54) ) //EbEr
 8011b74:	3985      	subs	r1, #133	; 0x85
 8011b76:	2977      	cmp	r1, #119	; 0x77
 8011b78:	d809      	bhi.n	8011b8e <GUI_Touch_Processing+0xde6>
 8011b7a:	b140      	cbz	r0, 8011b8e <GUI_Touch_Processing+0xde6>
					Measure_Field ^= SP_measure;
 8011b7c:	4b27      	ldr	r3, [pc, #156]	; (8011c1c <GUI_Touch_Processing+0xe74>)
 8011b7e:	881a      	ldrh	r2, [r3, #0]
 8011b80:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8011b84:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 133, Measure_Field&SP_measure);
 8011b86:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 8011b8a:	2185      	movs	r1, #133	; 0x85
 8011b8c:	e479      	b.n	8011482 <GUI_Touch_Processing+0x6da>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011b8e:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 8011b92:	2936      	cmp	r1, #54	; 0x36
 8011b94:	d802      	bhi.n	8011b9c <GUI_Touch_Processing+0xdf4>
 8011b96:	2a00      	cmp	r2, #0
 8011b98:	f47f ac1e 	bne.w	80113d8 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011b9c:	1e59      	subs	r1, r3, #1
 8011b9e:	2936      	cmp	r1, #54	; 0x36
 8011ba0:	f200 82b0 	bhi.w	8012104 <GUI_Touch_Processing+0x135c>
 8011ba4:	2a00      	cmp	r2, #0
 8011ba6:	f000 82ad 	beq.w	8012104 <GUI_Touch_Processing+0x135c>
					WriteSDFLASH_t(sdfile_cnt);
 8011baa:	4b1e      	ldr	r3, [pc, #120]	; (8011c24 <GUI_Touch_Processing+0xe7c>)
 8011bac:	2100      	movs	r1, #0
 8011bae:	8818      	ldrh	r0, [r3, #0]
 8011bb0:	f008 f942 	bl	8019e38 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011bb4:	4b1c      	ldr	r3, [pc, #112]	; (8011c28 <GUI_Touch_Processing+0xe80>)
 8011bb6:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011bb8:	1e5a      	subs	r2, r3, #1
 8011bba:	2a05      	cmp	r2, #5
 8011bbc:	d804      	bhi.n	8011bc8 <GUI_Touch_Processing+0xe20>
 8011bbe:	e8df f002 	tbb	[pc, r2]
 8011bc2:	0306      	.short	0x0306
 8011bc4:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8011bc8:	7023      	strb	r3, [r4, #0]
 8011bca:	f7ff b998 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011bce:	2301      	movs	r3, #1
 8011bd0:	7023      	strb	r3, [r4, #0]
 8011bd2:	f7ff b994 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011bd6:	2304      	movs	r3, #4
 8011bd8:	7023      	strb	r3, [r4, #0]
 8011bda:	f7ff b990 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011bde:	2306      	movs	r3, #6
 8011be0:	7023      	strb	r3, [r4, #0]
 8011be2:	f7ff b98c 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011be6:	2305      	movs	r3, #5
 8011be8:	7023      	strb	r3, [r4, #0]
 8011bea:	f7ff b988 	b.w	8010efe <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8011bee:	4b0f      	ldr	r3, [pc, #60]	; (8011c2c <GUI_Touch_Processing+0xe84>)
 8011bf0:	220c      	movs	r2, #12
 8011bf2:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8011bf4:	4a0e      	ldr	r2, [pc, #56]	; (8011c30 <GUI_Touch_Processing+0xe88>)
 8011bf6:	4b0f      	ldr	r3, [pc, #60]	; (8011c34 <GUI_Touch_Processing+0xe8c>)
 8011bf8:	8812      	ldrh	r2, [r2, #0]
 8011bfa:	881b      	ldrh	r3, [r3, #0]
 8011bfc:	f5a2 71d5 	sub.w	r1, r2, #426	; 0x1aa
 8011c00:	2936      	cmp	r1, #54	; 0x36
 8011c02:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 8011c06:	bf8c      	ite	hi
 8011c08:	2100      	movhi	r1, #0
 8011c0a:	2101      	movls	r1, #1
 8011c0c:	2836      	cmp	r0, #54	; 0x36
 8011c0e:	d813      	bhi.n	8011c38 <GUI_Touch_Processing+0xe90>
 8011c10:	b191      	cbz	r1, 8011c38 <GUI_Touch_Processing+0xe90>
					GUI_screen_state = GraphSet2_Screen;
 8011c12:	230d      	movs	r3, #13
 8011c14:	7023      	strb	r3, [r4, #0]
 8011c16:	f7ff b972 	b.w	8010efe <GUI_Touch_Processing+0x156>
 8011c1a:	bf00      	nop
 8011c1c:	20005706 	.word	0x20005706
 8011c20:	20090ab9 	.word	0x20090ab9
 8011c24:	2000572e 	.word	0x2000572e
 8011c28:	20090ab5 	.word	0x20090ab5
 8011c2c:	2000022a 	.word	0x2000022a
 8011c30:	20054944 	.word	0x20054944
 8011c34:	20054942 	.word	0x20054942
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 8011c38:	f1a3 00b6 	sub.w	r0, r3, #182	; 0xb6
 8011c3c:	2836      	cmp	r0, #54	; 0x36
 8011c3e:	f1a2 05ca 	sub.w	r5, r2, #202	; 0xca
 8011c42:	bf8c      	ite	hi
 8011c44:	2000      	movhi	r0, #0
 8011c46:	2001      	movls	r0, #1
 8011c48:	2d36      	cmp	r5, #54	; 0x36
 8011c4a:	d802      	bhi.n	8011c52 <GUI_Touch_Processing+0xeaa>
 8011c4c:	2800      	cmp	r0, #0
 8011c4e:	f47f aae7 	bne.w	8011220 <GUI_Touch_Processing+0x478>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 8011c52:	f5a2 7586 	sub.w	r5, r2, #268	; 0x10c
 8011c56:	2d36      	cmp	r5, #54	; 0x36
 8011c58:	d802      	bhi.n	8011c60 <GUI_Touch_Processing+0xeb8>
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	f47f ab0c 	bne.w	8011278 <GUI_Touch_Processing+0x4d0>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=327  & Touch_y <=(327+54) ) //PPF_Bands
 8011c60:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 8011c64:	2836      	cmp	r0, #54	; 0x36
 8011c66:	d80c      	bhi.n	8011c82 <GUI_Touch_Processing+0xeda>
 8011c68:	f46f 78a3 	mvn.w	r8, #326	; 0x146
 8011c6c:	eb02 0008 	add.w	r0, r2, r8
 8011c70:	2836      	cmp	r0, #54	; 0x36
 8011c72:	d806      	bhi.n	8011c82 <GUI_Touch_Processing+0xeda>
					Graph_Field ^= PPF_Bands;
 8011c74:	4ba6      	ldr	r3, [pc, #664]	; (8011f10 <GUI_Touch_Processing+0x1168>)
 8011c76:	781a      	ldrb	r2, [r3, #0]
 8011c78:	f082 0201 	eor.w	r2, r2, #1
 8011c7c:	701a      	strb	r2, [r3, #0]
 8011c7e:	f7ff bb27 	b.w	80112d0 <GUI_Touch_Processing+0x528>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011c82:	f1a3 00d9 	sub.w	r0, r3, #217	; 0xd9
 8011c86:	2836      	cmp	r0, #54	; 0x36
 8011c88:	d802      	bhi.n	8011c90 <GUI_Touch_Processing+0xee8>
 8011c8a:	2900      	cmp	r1, #0
 8011c8c:	f47f aba4 	bne.w	80113d8 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011c90:	1e58      	subs	r0, r3, #1
 8011c92:	2836      	cmp	r0, #54	; 0x36
 8011c94:	d822      	bhi.n	8011cdc <GUI_Touch_Processing+0xf34>
 8011c96:	b309      	cbz	r1, 8011cdc <GUI_Touch_Processing+0xf34>
					WriteSDFLASH_t(sdfile_cnt);
 8011c98:	4b9e      	ldr	r3, [pc, #632]	; (8011f14 <GUI_Touch_Processing+0x116c>)
 8011c9a:	2100      	movs	r1, #0
 8011c9c:	8818      	ldrh	r0, [r3, #0]
 8011c9e:	f008 f8cb 	bl	8019e38 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011ca2:	4b9d      	ldr	r3, [pc, #628]	; (8011f18 <GUI_Touch_Processing+0x1170>)
 8011ca4:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011ca6:	1e5a      	subs	r2, r3, #1
 8011ca8:	2a05      	cmp	r2, #5
 8011caa:	d804      	bhi.n	8011cb6 <GUI_Touch_Processing+0xf0e>
 8011cac:	e8df f002 	tbb	[pc, r2]
 8011cb0:	0a030306 	.word	0x0a030306
 8011cb4:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 8011cb6:	7023      	strb	r3, [r4, #0]
 8011cb8:	f7ff b921 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	7023      	strb	r3, [r4, #0]
 8011cc0:	f7ff b91d 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011cc4:	2304      	movs	r3, #4
 8011cc6:	7023      	strb	r3, [r4, #0]
 8011cc8:	f7ff b919 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011ccc:	2306      	movs	r3, #6
 8011cce:	7023      	strb	r3, [r4, #0]
 8011cd0:	f7ff b915 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011cd4:	2305      	movs	r3, #5
 8011cd6:	7023      	strb	r3, [r4, #0]
 8011cd8:	f7ff b911 	b.w	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011cdc:	f1a3 0037 	sub.w	r0, r3, #55	; 0x37
 8011ce0:	2836      	cmp	r0, #54	; 0x36
 8011ce2:	d802      	bhi.n	8011cea <GUI_Touch_Processing+0xf42>
 8011ce4:	2900      	cmp	r1, #0
 8011ce6:	f47f a912 	bne.w	8010f0e <GUI_Touch_Processing+0x166>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 8011cea:	3b08      	subs	r3, #8
 8011cec:	2bf2      	cmp	r3, #242	; 0xf2
 8011cee:	f1a2 0150 	sub.w	r1, r2, #80	; 0x50
 8011cf2:	bf8c      	ite	hi
 8011cf4:	2300      	movhi	r3, #0
 8011cf6:	2301      	movls	r3, #1
 8011cf8:	2928      	cmp	r1, #40	; 0x28
 8011cfa:	d810      	bhi.n	8011d1e <GUI_Touch_Processing+0xf76>
 8011cfc:	b17b      	cbz	r3, 8011d1e <GUI_Touch_Processing+0xf76>
					if (Language_status == Ru) Language_status=En;
 8011cfe:	4b87      	ldr	r3, [pc, #540]	; (8011f1c <GUI_Touch_Processing+0x1174>)
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	b923      	cbnz	r3, 8011d0e <GUI_Touch_Processing+0xf66>
 8011d04:	4b85      	ldr	r3, [pc, #532]	; (8011f1c <GUI_Touch_Processing+0x1174>)
 8011d06:	2201      	movs	r2, #1
 8011d08:	701a      	strb	r2, [r3, #0]
 8011d0a:	f7ff b8f8 	b.w	8010efe <GUI_Touch_Processing+0x156>
					else if (Language_status == En) Language_status=Ru;
 8011d0e:	2b01      	cmp	r3, #1
 8011d10:	f47f a8f5 	bne.w	8010efe <GUI_Touch_Processing+0x156>
 8011d14:	4b81      	ldr	r3, [pc, #516]	; (8011f1c <GUI_Touch_Processing+0x1174>)
 8011d16:	2200      	movs	r2, #0
 8011d18:	701a      	strb	r2, [r3, #0]
 8011d1a:	f7ff b8f0 	b.w	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 8011d1e:	3a7c      	subs	r2, #124	; 0x7c
 8011d20:	2a32      	cmp	r2, #50	; 0x32
 8011d22:	f63f a8ec 	bhi.w	8010efe <GUI_Touch_Processing+0x156>
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	f43f a8e9 	beq.w	8010efe <GUI_Touch_Processing+0x156>
					GUI_screen_state = Information_Screen;
 8011d2c:	2311      	movs	r3, #17
 8011d2e:	7023      	strb	r3, [r4, #0]
 8011d30:	f7ff b8e5 	b.w	8010efe <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8011d34:	4b7a      	ldr	r3, [pc, #488]	; (8011f20 <GUI_Touch_Processing+0x1178>)
 8011d36:	220d      	movs	r2, #13
 8011d38:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8011d3a:	4a7a      	ldr	r2, [pc, #488]	; (8011f24 <GUI_Touch_Processing+0x117c>)
 8011d3c:	4b7a      	ldr	r3, [pc, #488]	; (8011f28 <GUI_Touch_Processing+0x1180>)
 8011d3e:	8811      	ldrh	r1, [r2, #0]
 8011d40:	881b      	ldrh	r3, [r3, #0]
 8011d42:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 8011d46:	2a36      	cmp	r2, #54	; 0x36
 8011d48:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 8011d4c:	bf8c      	ite	hi
 8011d4e:	2200      	movhi	r2, #0
 8011d50:	2201      	movls	r2, #1
 8011d52:	2836      	cmp	r0, #54	; 0x36
 8011d54:	d804      	bhi.n	8011d60 <GUI_Touch_Processing+0xfb8>
 8011d56:	b11a      	cbz	r2, 8011d60 <GUI_Touch_Processing+0xfb8>
					GUI_screen_state = GraphSet1_Screen;
 8011d58:	230c      	movs	r3, #12
 8011d5a:	7023      	strb	r3, [r4, #0]
 8011d5c:	f7ff b8cf 	b.w	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //PPF_Bands
 8011d60:	f1a3 00c8 	sub.w	r0, r3, #200	; 0xc8
 8011d64:	2836      	cmp	r0, #54	; 0x36
 8011d66:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 8011d6a:	bf8c      	ite	hi
 8011d6c:	2000      	movhi	r0, #0
 8011d6e:	2001      	movls	r0, #1
 8011d70:	2d36      	cmp	r5, #54	; 0x36
 8011d72:	d807      	bhi.n	8011d84 <GUI_Touch_Processing+0xfdc>
 8011d74:	b130      	cbz	r0, 8011d84 <GUI_Touch_Processing+0xfdc>
					Graph_Field ^= EbEr_graph;
 8011d76:	4b66      	ldr	r3, [pc, #408]	; (8011f10 <GUI_Touch_Processing+0x1168>)
 8011d78:	781a      	ldrb	r2, [r3, #0]
 8011d7a:	f082 0202 	eor.w	r2, r2, #2
 8011d7e:	701a      	strb	r2, [r3, #0]
 8011d80:	f7ff bb62 	b.w	8011448 <GUI_Touch_Processing+0x6a0>
				if(Touch_x >= 200  & Touch_x <= (200+54)  & Touch_y >=133  & Touch_y <=(133+54) ) //PPF_Bands
 8011d84:	3985      	subs	r1, #133	; 0x85
 8011d86:	2936      	cmp	r1, #54	; 0x36
 8011d88:	d807      	bhi.n	8011d9a <GUI_Touch_Processing+0xff2>
 8011d8a:	b130      	cbz	r0, 8011d9a <GUI_Touch_Processing+0xff2>
					Graph_Field ^= V_lambda;
 8011d8c:	4b60      	ldr	r3, [pc, #384]	; (8011f10 <GUI_Touch_Processing+0x1168>)
 8011d8e:	781a      	ldrb	r2, [r3, #0]
 8011d90:	f082 0204 	eor.w	r2, r2, #4
 8011d94:	701a      	strb	r2, [r3, #0]
 8011d96:	f7ff bb64 	b.w	8011462 <GUI_Touch_Processing+0x6ba>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011d9a:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 8011d9e:	2936      	cmp	r1, #54	; 0x36
 8011da0:	d802      	bhi.n	8011da8 <GUI_Touch_Processing+0x1000>
 8011da2:	2a00      	cmp	r2, #0
 8011da4:	f47f ab18 	bne.w	80113d8 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011da8:	1e59      	subs	r1, r3, #1
 8011daa:	2936      	cmp	r1, #54	; 0x36
 8011dac:	f200 81aa 	bhi.w	8012104 <GUI_Touch_Processing+0x135c>
 8011db0:	2a00      	cmp	r2, #0
 8011db2:	f000 81a7 	beq.w	8012104 <GUI_Touch_Processing+0x135c>
					WriteSDFLASH_t(sdfile_cnt);
 8011db6:	4b57      	ldr	r3, [pc, #348]	; (8011f14 <GUI_Touch_Processing+0x116c>)
 8011db8:	2100      	movs	r1, #0
 8011dba:	8818      	ldrh	r0, [r3, #0]
 8011dbc:	f008 f83c 	bl	8019e38 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011dc0:	4b55      	ldr	r3, [pc, #340]	; (8011f18 <GUI_Touch_Processing+0x1170>)
 8011dc2:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011dc4:	1e5a      	subs	r2, r3, #1
 8011dc6:	2a05      	cmp	r2, #5
 8011dc8:	d804      	bhi.n	8011dd4 <GUI_Touch_Processing+0x102c>
 8011dca:	e8df f002 	tbb	[pc, r2]
 8011dce:	0306      	.short	0x0306
 8011dd0:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8011dd4:	7023      	strb	r3, [r4, #0]
 8011dd6:	f7ff b892 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011dda:	2301      	movs	r3, #1
 8011ddc:	7023      	strb	r3, [r4, #0]
 8011dde:	f7ff b88e 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011de2:	2304      	movs	r3, #4
 8011de4:	7023      	strb	r3, [r4, #0]
 8011de6:	f7ff b88a 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011dea:	2306      	movs	r3, #6
 8011dec:	7023      	strb	r3, [r4, #0]
 8011dee:	f7ff b886 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011df2:	2305      	movs	r3, #5
 8011df4:	7023      	strb	r3, [r4, #0]
 8011df6:	f7ff b882 	b.w	8010efe <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8011dfa:	4b49      	ldr	r3, [pc, #292]	; (8011f20 <GUI_Touch_Processing+0x1178>)
 8011dfc:	220e      	movs	r2, #14
 8011dfe:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8011e00:	4b49      	ldr	r3, [pc, #292]	; (8011f28 <GUI_Touch_Processing+0x1180>)
 8011e02:	881a      	ldrh	r2, [r3, #0]
 8011e04:	4b47      	ldr	r3, [pc, #284]	; (8011f24 <GUI_Touch_Processing+0x117c>)
 8011e06:	881b      	ldrh	r3, [r3, #0]
 8011e08:	f5a3 75d5 	sub.w	r5, r3, #426	; 0x1aa
 8011e0c:	2d36      	cmp	r5, #54	; 0x36
 8011e0e:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 8011e12:	bf8c      	ite	hi
 8011e14:	2500      	movhi	r5, #0
 8011e16:	2501      	movls	r5, #1
 8011e18:	2936      	cmp	r1, #54	; 0x36
 8011e1a:	d804      	bhi.n	8011e26 <GUI_Touch_Processing+0x107e>
 8011e1c:	b11d      	cbz	r5, 8011e26 <GUI_Touch_Processing+0x107e>
					GUI_screen_state = ColorSet2_Screen;
 8011e1e:	230f      	movs	r3, #15
 8011e20:	7023      	strb	r3, [r4, #0]
 8011e22:	f7ff b86c 	b.w	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 8011e26:	f1a2 01b6 	sub.w	r1, r2, #182	; 0xb6
 8011e2a:	2936      	cmp	r1, #54	; 0x36
 8011e2c:	f1a3 00ca 	sub.w	r0, r3, #202	; 0xca
 8011e30:	bf8c      	ite	hi
 8011e32:	2100      	movhi	r1, #0
 8011e34:	2101      	movls	r1, #1
 8011e36:	2836      	cmp	r0, #54	; 0x36
 8011e38:	d802      	bhi.n	8011e40 <GUI_Touch_Processing+0x1098>
 8011e3a:	2900      	cmp	r1, #0
 8011e3c:	f47f a9f0 	bne.w	8011220 <GUI_Touch_Processing+0x478>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 8011e40:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 8011e44:	2836      	cmp	r0, #54	; 0x36
 8011e46:	d802      	bhi.n	8011e4e <GUI_Touch_Processing+0x10a6>
 8011e48:	2900      	cmp	r1, #0
 8011e4a:	f47f aa15 	bne.w	8011278 <GUI_Touch_Processing+0x4d0>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 8011e4e:	f1a2 0008 	sub.w	r0, r2, #8
 8011e52:	28f2      	cmp	r0, #242	; 0xf2
 8011e54:	f1a3 067c 	sub.w	r6, r3, #124	; 0x7c
 8011e58:	bf8c      	ite	hi
 8011e5a:	2000      	movhi	r0, #0
 8011e5c:	2001      	movls	r0, #1
 8011e5e:	2e32      	cmp	r6, #50	; 0x32
 8011e60:	d802      	bhi.n	8011e68 <GUI_Touch_Processing+0x10c0>
 8011e62:	2800      	cmp	r0, #0
 8011e64:	f47f af62 	bne.w	8011d2c <GUI_Touch_Processing+0xf84>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=327  & Touch_y <=(327+54) ) //Color_CIE_xy
 8011e68:	f46f 7ca3 	mvn.w	ip, #326	; 0x146
 8011e6c:	eb03 060c 	add.w	r6, r3, ip
 8011e70:	2e36      	cmp	r6, #54	; 0x36
 8011e72:	d80c      	bhi.n	8011e8e <GUI_Touch_Processing+0x10e6>
 8011e74:	b159      	cbz	r1, 8011e8e <GUI_Touch_Processing+0x10e6>
					if(!(Color_Field&Color_CIE_xy))
 8011e76:	4a2d      	ldr	r2, [pc, #180]	; (8011f2c <GUI_Touch_Processing+0x1184>)
 8011e78:	7813      	ldrb	r3, [r2, #0]
 8011e7a:	07df      	lsls	r7, r3, #31
 8011e7c:	f53f a83f 	bmi.w	8010efe <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 327, Color_Field|=Color_CIE_xy, 0x01);
 8011e80:	2301      	movs	r3, #1
 8011e82:	7013      	strb	r3, [r2, #0]
 8011e84:	f240 1147 	movw	r1, #327	; 0x147
 8011e88:	461a      	mov	r2, r3
 8011e8a:	f7ff bbcf 	b.w	801162c <GUI_Touch_Processing+0x884>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 8011e8e:	f1a2 01d9 	sub.w	r1, r2, #217	; 0xd9
 8011e92:	2936      	cmp	r1, #54	; 0x36
 8011e94:	d802      	bhi.n	8011e9c <GUI_Touch_Processing+0x10f4>
 8011e96:	2d00      	cmp	r5, #0
 8011e98:	f47f aa9e 	bne.w	80113d8 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 8011e9c:	1e51      	subs	r1, r2, #1
 8011e9e:	2936      	cmp	r1, #54	; 0x36
 8011ea0:	d873      	bhi.n	8011f8a <GUI_Touch_Processing+0x11e2>
 8011ea2:	2d00      	cmp	r5, #0
 8011ea4:	d071      	beq.n	8011f8a <GUI_Touch_Processing+0x11e2>
					if(preColor_Field != Color_Field)
 8011ea6:	4d21      	ldr	r5, [pc, #132]	; (8011f2c <GUI_Touch_Processing+0x1184>)
 8011ea8:	4921      	ldr	r1, [pc, #132]	; (8011f30 <GUI_Touch_Processing+0x1188>)
 8011eaa:	782b      	ldrb	r3, [r5, #0]
 8011eac:	7809      	ldrb	r1, [r1, #0]
 8011eae:	4299      	cmp	r1, r3
 8011eb0:	d01f      	beq.n	8011ef2 <GUI_Touch_Processing+0x114a>
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8011eb2:	07de      	lsls	r6, r3, #31
 8011eb4:	d546      	bpl.n	8011f44 <GUI_Touch_Processing+0x119c>
 8011eb6:	4b1f      	ldr	r3, [pc, #124]	; (8011f34 <GUI_Touch_Processing+0x118c>)
 8011eb8:	481f      	ldr	r0, [pc, #124]	; (8011f38 <GUI_Touch_Processing+0x1190>)
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	f013 0f01 	tst.w	r3, #1
 8011ec0:	bf18      	it	ne
 8011ec2:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8011ec6:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8011eca:	f007 febd 	bl	8019c48 <Image_load>
						Locus.pData = (uint16_t *)bmp;
 8011ece:	4b1b      	ldr	r3, [pc, #108]	; (8011f3c <GUI_Touch_Processing+0x1194>)
 8011ed0:	4a1b      	ldr	r2, [pc, #108]	; (8011f40 <GUI_Touch_Processing+0x1198>)
 8011ed2:	605a      	str	r2, [r3, #4]
						Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8011ed4:	782a      	ldrb	r2, [r5, #0]
 8011ed6:	f002 0101 	and.w	r1, r2, #1
 8011eda:	2900      	cmp	r1, #0
 8011edc:	bf0c      	ite	eq
 8011ede:	21fa      	moveq	r1, #250	; 0xfa
 8011ee0:	21d8      	movne	r1, #216	; 0xd8
 8011ee2:	8019      	strh	r1, [r3, #0]
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8011ee4:	d13c      	bne.n	8011f60 <GUI_Touch_Processing+0x11b8>
 8011ee6:	f012 0f04 	tst.w	r2, #4
 8011eea:	bf0c      	ite	eq
 8011eec:	22fa      	moveq	r2, #250	; 0xfa
 8011eee:	22ea      	movne	r2, #234	; 0xea
 8011ef0:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 8011ef2:	4b08      	ldr	r3, [pc, #32]	; (8011f14 <GUI_Touch_Processing+0x116c>)
 8011ef4:	2100      	movs	r1, #0
 8011ef6:	8818      	ldrh	r0, [r3, #0]
 8011ef8:	f007 ff9e 	bl	8019e38 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011efc:	4b06      	ldr	r3, [pc, #24]	; (8011f18 <GUI_Touch_Processing+0x1170>)
 8011efe:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011f00:	1e5a      	subs	r2, r3, #1
 8011f02:	2a05      	cmp	r2, #5
 8011f04:	d82e      	bhi.n	8011f64 <GUI_Touch_Processing+0x11bc>
 8011f06:	e8df f002 	tbb	[pc, r2]
 8011f0a:	2d30      	.short	0x2d30
 8011f0c:	383c342d 	.word	0x383c342d
 8011f10:	20005702 	.word	0x20005702
 8011f14:	2000572e 	.word	0x2000572e
 8011f18:	20090ab5 	.word	0x20090ab5
 8011f1c:	20005703 	.word	0x20005703
 8011f20:	2000022a 	.word	0x2000022a
 8011f24:	20054944 	.word	0x20054944
 8011f28:	20054942 	.word	0x20054942
 8011f2c:	200056ff 	.word	0x200056ff
 8011f30:	20005729 	.word	0x20005729
 8011f34:	20005704 	.word	0x20005704
 8011f38:	00051d00 	.word	0x00051d00
 8011f3c:	20091050 	.word	0x20091050
 8011f40:	20055954 	.word	0x20055954
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8011f44:	f003 0304 	and.w	r3, r3, #4
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	4ba9      	ldr	r3, [pc, #676]	; (80121f0 <GUI_Touch_Processing+0x1448>)
 8011f4c:	48a9      	ldr	r0, [pc, #676]	; (80121f4 <GUI_Touch_Processing+0x144c>)
 8011f4e:	bf18      	it	ne
 8011f50:	4618      	movne	r0, r3
 8011f52:	f24e 4384 	movw	r3, #58500	; 0xe484
 8011f56:	f24f 4124 	movw	r1, #62500	; 0xf424
 8011f5a:	bf18      	it	ne
 8011f5c:	4619      	movne	r1, r3
 8011f5e:	e7b4      	b.n	8011eca <GUI_Touch_Processing+0x1122>
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8011f60:	22fa      	movs	r2, #250	; 0xfa
 8011f62:	e7c5      	b.n	8011ef0 <GUI_Touch_Processing+0x1148>
					GUI_screen_state = Prev_Inf_Screen;
 8011f64:	7023      	strb	r3, [r4, #0]
 8011f66:	f7fe bfca 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	7023      	strb	r3, [r4, #0]
 8011f6e:	f7fe bfc6 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011f72:	2304      	movs	r3, #4
 8011f74:	7023      	strb	r3, [r4, #0]
 8011f76:	f7fe bfc2 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011f7a:	2306      	movs	r3, #6
 8011f7c:	7023      	strb	r3, [r4, #0]
 8011f7e:	f7fe bfbe 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011f82:	2305      	movs	r3, #5
 8011f84:	7023      	strb	r3, [r4, #0]
 8011f86:	f7fe bfba 	b.w	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8011f8a:	3a37      	subs	r2, #55	; 0x37
 8011f8c:	2a36      	cmp	r2, #54	; 0x36
 8011f8e:	d802      	bhi.n	8011f96 <GUI_Touch_Processing+0x11ee>
 8011f90:	2d00      	cmp	r5, #0
 8011f92:	f47e afbc 	bne.w	8010f0e <GUI_Touch_Processing+0x166>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 8011f96:	3b50      	subs	r3, #80	; 0x50
 8011f98:	2b28      	cmp	r3, #40	; 0x28
 8011f9a:	f63e afb0 	bhi.w	8010efe <GUI_Touch_Processing+0x156>
 8011f9e:	2800      	cmp	r0, #0
 8011fa0:	f47f aead 	bne.w	8011cfe <GUI_Touch_Processing+0xf56>
 8011fa4:	f7fe bfab 	b.w	8010efe <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8011fa8:	4b93      	ldr	r3, [pc, #588]	; (80121f8 <GUI_Touch_Processing+0x1450>)
 8011faa:	220f      	movs	r2, #15
 8011fac:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //next
 8011fae:	4a93      	ldr	r2, [pc, #588]	; (80121fc <GUI_Touch_Processing+0x1454>)
 8011fb0:	4b93      	ldr	r3, [pc, #588]	; (8012200 <GUI_Touch_Processing+0x1458>)
 8011fb2:	8811      	ldrh	r1, [r2, #0]
 8011fb4:	881b      	ldrh	r3, [r3, #0]
 8011fb6:	f5a1 72d5 	sub.w	r2, r1, #426	; 0x1aa
 8011fba:	2a36      	cmp	r2, #54	; 0x36
 8011fbc:	f1a3 00a3 	sub.w	r0, r3, #163	; 0xa3
 8011fc0:	bf8c      	ite	hi
 8011fc2:	2200      	movhi	r2, #0
 8011fc4:	2201      	movls	r2, #1
 8011fc6:	2836      	cmp	r0, #54	; 0x36
 8011fc8:	d804      	bhi.n	8011fd4 <GUI_Touch_Processing+0x122c>
 8011fca:	b11a      	cbz	r2, 8011fd4 <GUI_Touch_Processing+0x122c>
					GUI_screen_state = ColorSet1_Screen;
 8011fcc:	230e      	movs	r3, #14
 8011fce:	7023      	strb	r3, [r4, #0]
 8011fd0:	f7fe bf95 	b.w	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=70  & Touch_y <=(70+54) ) //Color_CIE_Luv
 8011fd4:	f1a3 00b6 	sub.w	r0, r3, #182	; 0xb6
 8011fd8:	2836      	cmp	r0, #54	; 0x36
 8011fda:	f1a1 0546 	sub.w	r5, r1, #70	; 0x46
 8011fde:	bf8c      	ite	hi
 8011fe0:	2000      	movhi	r0, #0
 8011fe2:	2001      	movls	r0, #1
 8011fe4:	2d36      	cmp	r5, #54	; 0x36
 8011fe6:	d813      	bhi.n	8012010 <GUI_Touch_Processing+0x1268>
 8011fe8:	b190      	cbz	r0, 8012010 <GUI_Touch_Processing+0x1268>
					if(!(Color_Field&Color_CIE_Luv))
 8011fea:	4c86      	ldr	r4, [pc, #536]	; (8012204 <GUI_Touch_Processing+0x145c>)
 8011fec:	7823      	ldrb	r3, [r4, #0]
 8011fee:	075d      	lsls	r5, r3, #29
 8011ff0:	f53e af85 	bmi.w	8010efe <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 70, Color_Field|=Color_CIE_Luv, 0x01);
 8011ff4:	2204      	movs	r2, #4
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	2146      	movs	r1, #70	; 0x46
 8011ffa:	20c8      	movs	r0, #200	; 0xc8
 8011ffc:	7022      	strb	r2, [r4, #0]
 8011ffe:	f000 ff70 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 8012002:	7822      	ldrb	r2, [r4, #0]
 8012004:	2301      	movs	r3, #1
 8012006:	f002 0202 	and.w	r2, r2, #2
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 801200a:	2185      	movs	r1, #133	; 0x85
 801200c:	f7ff bb0e 	b.w	801162c <GUI_Touch_Processing+0x884>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=133  & Touch_y <=(133+54) ) //Color_CIE_Lab
 8012010:	3985      	subs	r1, #133	; 0x85
 8012012:	2936      	cmp	r1, #54	; 0x36
 8012014:	d812      	bhi.n	801203c <GUI_Touch_Processing+0x1294>
 8012016:	b188      	cbz	r0, 801203c <GUI_Touch_Processing+0x1294>
					if(!(Color_Field&Color_CIE_Lab))
 8012018:	4c7a      	ldr	r4, [pc, #488]	; (8012204 <GUI_Touch_Processing+0x145c>)
 801201a:	7822      	ldrb	r2, [r4, #0]
 801201c:	f012 0202 	ands.w	r2, r2, #2
 8012020:	f47e af6d 	bne.w	8010efe <GUI_Touch_Processing+0x156>
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 8012024:	2301      	movs	r3, #1
 8012026:	2146      	movs	r1, #70	; 0x46
 8012028:	20c8      	movs	r0, #200	; 0xc8
						Color_Field = 0;
 801202a:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 801202c:	f000 ff59 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 8012030:	7822      	ldrb	r2, [r4, #0]
 8012032:	f042 0202 	orr.w	r2, r2, #2
 8012036:	7022      	strb	r2, [r4, #0]
 8012038:	2301      	movs	r3, #1
 801203a:	e7e6      	b.n	801200a <GUI_Touch_Processing+0x1262>
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 801203c:	f1a3 01d9 	sub.w	r1, r3, #217	; 0xd9
 8012040:	2936      	cmp	r1, #54	; 0x36
 8012042:	d802      	bhi.n	801204a <GUI_Touch_Processing+0x12a2>
 8012044:	2a00      	cmp	r2, #0
 8012046:	f47f a9c7 	bne.w	80113d8 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 801204a:	1e59      	subs	r1, r3, #1
 801204c:	2936      	cmp	r1, #54	; 0x36
 801204e:	d859      	bhi.n	8012104 <GUI_Touch_Processing+0x135c>
 8012050:	2a00      	cmp	r2, #0
 8012052:	d057      	beq.n	8012104 <GUI_Touch_Processing+0x135c>
					if(preColor_Field != Color_Field)
 8012054:	4d6b      	ldr	r5, [pc, #428]	; (8012204 <GUI_Touch_Processing+0x145c>)
 8012056:	496c      	ldr	r1, [pc, #432]	; (8012208 <GUI_Touch_Processing+0x1460>)
 8012058:	782b      	ldrb	r3, [r5, #0]
 801205a:	7809      	ldrb	r1, [r1, #0]
 801205c:	4299      	cmp	r1, r3
 801205e:	d01f      	beq.n	80120a0 <GUI_Touch_Processing+0x12f8>
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8012060:	07d8      	lsls	r0, r3, #31
 8012062:	d52c      	bpl.n	80120be <GUI_Touch_Processing+0x1316>
 8012064:	4b69      	ldr	r3, [pc, #420]	; (801220c <GUI_Touch_Processing+0x1464>)
 8012066:	486a      	ldr	r0, [pc, #424]	; (8012210 <GUI_Touch_Processing+0x1468>)
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	f013 0f01 	tst.w	r3, #1
 801206e:	bf18      	it	ne
 8012070:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8012074:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8012078:	f007 fde6 	bl	8019c48 <Image_load>
								Locus.pData = (uint16_t *)bmp;
 801207c:	4b65      	ldr	r3, [pc, #404]	; (8012214 <GUI_Touch_Processing+0x146c>)
 801207e:	4a66      	ldr	r2, [pc, #408]	; (8012218 <GUI_Touch_Processing+0x1470>)
 8012080:	605a      	str	r2, [r3, #4]
								Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8012082:	782a      	ldrb	r2, [r5, #0]
 8012084:	f002 0101 	and.w	r1, r2, #1
 8012088:	2900      	cmp	r1, #0
 801208a:	bf0c      	ite	eq
 801208c:	21fa      	moveq	r1, #250	; 0xfa
 801208e:	21d8      	movne	r1, #216	; 0xd8
 8012090:	8019      	strh	r1, [r3, #0]
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8012092:	d122      	bne.n	80120da <GUI_Touch_Processing+0x1332>
 8012094:	f012 0f04 	tst.w	r2, #4
 8012098:	bf0c      	ite	eq
 801209a:	22fa      	moveq	r2, #250	; 0xfa
 801209c:	22ea      	movne	r2, #234	; 0xea
 801209e:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 80120a0:	4b5e      	ldr	r3, [pc, #376]	; (801221c <GUI_Touch_Processing+0x1474>)
 80120a2:	2100      	movs	r1, #0
 80120a4:	8818      	ldrh	r0, [r3, #0]
 80120a6:	f007 fec7 	bl	8019e38 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80120aa:	4b5d      	ldr	r3, [pc, #372]	; (8012220 <GUI_Touch_Processing+0x1478>)
 80120ac:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80120ae:	1e5a      	subs	r2, r3, #1
 80120b0:	2a05      	cmp	r2, #5
 80120b2:	d814      	bhi.n	80120de <GUI_Touch_Processing+0x1336>
 80120b4:	e8df f002 	tbb	[pc, r2]
 80120b8:	1a131316 	.word	0x1a131316
 80120bc:	1e22      	.short	0x1e22
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 80120be:	f003 0304 	and.w	r3, r3, #4
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	4b4a      	ldr	r3, [pc, #296]	; (80121f0 <GUI_Touch_Processing+0x1448>)
 80120c6:	484b      	ldr	r0, [pc, #300]	; (80121f4 <GUI_Touch_Processing+0x144c>)
 80120c8:	bf18      	it	ne
 80120ca:	4618      	movne	r0, r3
 80120cc:	f24e 4384 	movw	r3, #58500	; 0xe484
 80120d0:	f24f 4124 	movw	r1, #62500	; 0xf424
 80120d4:	bf18      	it	ne
 80120d6:	4619      	movne	r1, r3
 80120d8:	e7ce      	b.n	8012078 <GUI_Touch_Processing+0x12d0>
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 80120da:	22fa      	movs	r2, #250	; 0xfa
 80120dc:	e7df      	b.n	801209e <GUI_Touch_Processing+0x12f6>
					GUI_screen_state = Prev_Inf_Screen;
 80120de:	7023      	strb	r3, [r4, #0]
 80120e0:	f7fe bf0d 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80120e4:	2301      	movs	r3, #1
 80120e6:	7023      	strb	r3, [r4, #0]
 80120e8:	f7fe bf09 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80120ec:	2304      	movs	r3, #4
 80120ee:	7023      	strb	r3, [r4, #0]
 80120f0:	f7fe bf05 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80120f4:	2306      	movs	r3, #6
 80120f6:	7023      	strb	r3, [r4, #0]
 80120f8:	f7fe bf01 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80120fc:	2305      	movs	r3, #5
 80120fe:	7023      	strb	r3, [r4, #0]
 8012100:	f7fe befd 	b.w	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8012104:	3b37      	subs	r3, #55	; 0x37
 8012106:	2b36      	cmp	r3, #54	; 0x36
 8012108:	f63e aef9 	bhi.w	8010efe <GUI_Touch_Processing+0x156>
 801210c:	2a00      	cmp	r2, #0
 801210e:	f47e aefe 	bne.w	8010f0e <GUI_Touch_Processing+0x166>
 8012112:	f7fe bef4 	b.w	8010efe <GUI_Touch_Processing+0x156>
					preGUI_screen_state = GUI_screen_state;
 8012116:	4b38      	ldr	r3, [pc, #224]	; (80121f8 <GUI_Touch_Processing+0x1450>)
 8012118:	2210      	movs	r2, #16
 801211a:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163  & Touch_x <= (163+54)  & Touch_y >=426  & Touch_y <=(426+54) )//next
 801211c:	4b38      	ldr	r3, [pc, #224]	; (8012200 <GUI_Touch_Processing+0x1458>)
 801211e:	881a      	ldrh	r2, [r3, #0]
 8012120:	4b36      	ldr	r3, [pc, #216]	; (80121fc <GUI_Touch_Processing+0x1454>)
 8012122:	881b      	ldrh	r3, [r3, #0]
 8012124:	f5a3 75d5 	sub.w	r5, r3, #426	; 0x1aa
 8012128:	2d36      	cmp	r5, #54	; 0x36
 801212a:	f1a2 01a3 	sub.w	r1, r2, #163	; 0xa3
 801212e:	bf8c      	ite	hi
 8012130:	2500      	movhi	r5, #0
 8012132:	2501      	movls	r5, #1
 8012134:	2936      	cmp	r1, #54	; 0x36
 8012136:	d809      	bhi.n	801214c <GUI_Touch_Processing+0x13a4>
 8012138:	b145      	cbz	r5, 801214c <GUI_Touch_Processing+0x13a4>
					WriteSDFLASH_t(sdfile_cnt);
 801213a:	4b38      	ldr	r3, [pc, #224]	; (801221c <GUI_Touch_Processing+0x1474>)
 801213c:	2100      	movs	r1, #0
 801213e:	8818      	ldrh	r0, [r3, #0]
 8012140:	f007 fe7a 	bl	8019e38 <WriteSDFLASH_t>
					GUI_screen_state = Color_Rendition_Screen;
 8012144:	2306      	movs	r3, #6
 8012146:	7023      	strb	r3, [r4, #0]
 8012148:	f7fe bed9 	b.w	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=202  & Touch_y <=(202+54) ) //Mode_EL
 801214c:	f1a2 01b6 	sub.w	r1, r2, #182	; 0xb6
 8012150:	2936      	cmp	r1, #54	; 0x36
 8012152:	f1a3 00ca 	sub.w	r0, r3, #202	; 0xca
 8012156:	bf8c      	ite	hi
 8012158:	2100      	movhi	r1, #0
 801215a:	2101      	movls	r1, #1
 801215c:	2836      	cmp	r0, #54	; 0x36
 801215e:	d802      	bhi.n	8012166 <GUI_Touch_Processing+0x13be>
 8012160:	2900      	cmp	r1, #0
 8012162:	f47f a85d 	bne.w	8011220 <GUI_Touch_Processing+0x478>
				if(Touch_x >= 182  & Touch_x <= (182+54)  & Touch_y >=268  & Touch_y <=(268+54) ) //Bluetooth
 8012166:	f5a3 7086 	sub.w	r0, r3, #268	; 0x10c
 801216a:	2836      	cmp	r0, #54	; 0x36
 801216c:	d802      	bhi.n	8012174 <GUI_Touch_Processing+0x13cc>
 801216e:	2900      	cmp	r1, #0
 8012170:	f47f a882 	bne.w	8011278 <GUI_Touch_Processing+0x4d0>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=124  & Touch_y <=(174) ) // Information
 8012174:	f1a2 0108 	sub.w	r1, r2, #8
 8012178:	29f2      	cmp	r1, #242	; 0xf2
 801217a:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 801217e:	bf8c      	ite	hi
 8012180:	2100      	movhi	r1, #0
 8012182:	2101      	movls	r1, #1
 8012184:	2832      	cmp	r0, #50	; 0x32
 8012186:	d802      	bhi.n	801218e <GUI_Touch_Processing+0x13e6>
 8012188:	2900      	cmp	r1, #0
 801218a:	f47f adcf 	bne.w	8011d2c <GUI_Touch_Processing+0xf84>
				if(Touch_x >= 185  & Touch_x <= (185+54)  & Touch_y >=318  & Touch_y <=(318+54) ) //CRI
 801218e:	f1a2 00b9 	sub.w	r0, r2, #185	; 0xb9
 8012192:	2836      	cmp	r0, #54	; 0x36
 8012194:	f5a3 769f 	sub.w	r6, r3, #318	; 0x13e
 8012198:	bf8c      	ite	hi
 801219a:	2000      	movhi	r0, #0
 801219c:	2001      	movls	r0, #1
 801219e:	2e36      	cmp	r6, #54	; 0x36
 80121a0:	d81b      	bhi.n	80121da <GUI_Touch_Processing+0x1432>
 80121a2:	b1d0      	cbz	r0, 80121da <GUI_Touch_Processing+0x1432>
					if(!(Color_rend_Field & CRI_CQS)){
 80121a4:	4c1f      	ldr	r4, [pc, #124]	; (8012224 <GUI_Touch_Processing+0x147c>)
 80121a6:	7822      	ldrb	r2, [r4, #0]
 80121a8:	07d1      	lsls	r1, r2, #31
 80121aa:	f53e aea8 	bmi.w	8010efe <GUI_Touch_Processing+0x156>
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 80121ae:	2301      	movs	r3, #1
						Color_rend_Field ^= CRI_CQS;
 80121b0:	f082 0201 	eor.w	r2, r2, #1
 80121b4:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 80121b6:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80121ba:	401a      	ands	r2, r3
 80121bc:	20b9      	movs	r0, #185	; 0xb9
 80121be:	f000 fe90 	bl	8012ee2 <GUI_RadioBox>
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 80121c2:	7822      	ldrb	r2, [r4, #0]
 80121c4:	2301      	movs	r3, #1
 80121c6:	43d2      	mvns	r2, r2
 80121c8:	401a      	ands	r2, r3
 80121ca:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80121ce:	20b9      	movs	r0, #185	; 0xb9
 80121d0:	f7ff ba2d 	b.w	801162e <GUI_Touch_Processing+0x886>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80121d4:	4a14      	ldr	r2, [pc, #80]	; (8012228 <GUI_Touch_Processing+0x1480>)
 80121d6:	f7ff b839 	b.w	801124c <GUI_Touch_Processing+0x4a4>
				if(Touch_x >= 185  & Touch_x <= (185+54)  & Touch_y >=362  & Touch_y <=(362+54) ) //CQS
 80121da:	f5a3 76b5 	sub.w	r6, r3, #362	; 0x16a
 80121de:	2e36      	cmp	r6, #54	; 0x36
 80121e0:	d824      	bhi.n	801222c <GUI_Touch_Processing+0x1484>
 80121e2:	b318      	cbz	r0, 801222c <GUI_Touch_Processing+0x1484>
					if((Color_rend_Field&CRI_CQS)){
 80121e4:	4c0f      	ldr	r4, [pc, #60]	; (8012224 <GUI_Touch_Processing+0x147c>)
 80121e6:	7822      	ldrb	r2, [r4, #0]
 80121e8:	07d3      	lsls	r3, r2, #31
 80121ea:	f57e ae88 	bpl.w	8010efe <GUI_Touch_Processing+0x156>
 80121ee:	e7de      	b.n	80121ae <GUI_Touch_Processing+0x1406>
 80121f0:	0006ca00 	.word	0x0006ca00
 80121f4:	00018100 	.word	0x00018100
 80121f8:	2000022a 	.word	0x2000022a
 80121fc:	20054944 	.word	0x20054944
 8012200:	20054942 	.word	0x20054942
 8012204:	200056ff 	.word	0x200056ff
 8012208:	20005729 	.word	0x20005729
 801220c:	20005704 	.word	0x20005704
 8012210:	00051d00 	.word	0x00051d00
 8012214:	20091050 	.word	0x20091050
 8012218:	20055954 	.word	0x20055954
 801221c:	2000572e 	.word	0x2000572e
 8012220:	20090ab5 	.word	0x20090ab5
 8012224:	20005700 	.word	0x20005700
 8012228:	20009d24 	.word	0x20009d24
				if(Touch_x >= 217  & Touch_x <= (217+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Display_Off
 801222c:	f1a2 00d9 	sub.w	r0, r2, #217	; 0xd9
 8012230:	2836      	cmp	r0, #54	; 0x36
 8012232:	d802      	bhi.n	801223a <GUI_Touch_Processing+0x1492>
 8012234:	2d00      	cmp	r5, #0
 8012236:	f47f a8cf 	bne.w	80113d8 <GUI_Touch_Processing+0x630>
				if(Touch_x >= 1  & Touch_x <= (1+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //Back
 801223a:	1e50      	subs	r0, r2, #1
 801223c:	2836      	cmp	r0, #54	; 0x36
 801223e:	d822      	bhi.n	8012286 <GUI_Touch_Processing+0x14de>
 8012240:	b30d      	cbz	r5, 8012286 <GUI_Touch_Processing+0x14de>
					WriteSDFLASH_t(sdfile_cnt);
 8012242:	4b42      	ldr	r3, [pc, #264]	; (801234c <GUI_Touch_Processing+0x15a4>)
 8012244:	2100      	movs	r1, #0
 8012246:	8818      	ldrh	r0, [r3, #0]
 8012248:	f007 fdf6 	bl	8019e38 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 801224c:	4b40      	ldr	r3, [pc, #256]	; (8012350 <GUI_Touch_Processing+0x15a8>)
 801224e:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8012250:	1e5a      	subs	r2, r3, #1
 8012252:	2a05      	cmp	r2, #5
 8012254:	d804      	bhi.n	8012260 <GUI_Touch_Processing+0x14b8>
 8012256:	e8df f002 	tbb	[pc, r2]
 801225a:	0306      	.short	0x0306
 801225c:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 8012260:	7023      	strb	r3, [r4, #0]
 8012262:	f7fe be4c 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012266:	2301      	movs	r3, #1
 8012268:	7023      	strb	r3, [r4, #0]
 801226a:	f7fe be48 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801226e:	2304      	movs	r3, #4
 8012270:	7023      	strb	r3, [r4, #0]
 8012272:	f7fe be44 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012276:	2306      	movs	r3, #6
 8012278:	7023      	strb	r3, [r4, #0]
 801227a:	f7fe be40 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801227e:	2305      	movs	r3, #5
 8012280:	7023      	strb	r3, [r4, #0]
 8012282:	f7fe be3c 	b.w	8010efe <GUI_Touch_Processing+0x156>
				if(Touch_x >= 55  & Touch_x <= (55+54)  & Touch_y >=426  & Touch_y <=(426+54) ) //SD_Card
 8012286:	3a37      	subs	r2, #55	; 0x37
 8012288:	2a36      	cmp	r2, #54	; 0x36
 801228a:	d802      	bhi.n	8012292 <GUI_Touch_Processing+0x14ea>
 801228c:	2d00      	cmp	r5, #0
 801228e:	f47e ae3e 	bne.w	8010f0e <GUI_Touch_Processing+0x166>
				if(Touch_x >= 8  & Touch_x <= (250)  & Touch_y >=80  & Touch_y <=(120) ) // Language change
 8012292:	3b50      	subs	r3, #80	; 0x50
 8012294:	2b28      	cmp	r3, #40	; 0x28
 8012296:	f63e ae32 	bhi.w	8010efe <GUI_Touch_Processing+0x156>
 801229a:	2900      	cmp	r1, #0
 801229c:	f47f ad2f 	bne.w	8011cfe <GUI_Touch_Processing+0xf56>
 80122a0:	f7fe be2d 	b.w	8010efe <GUI_Touch_Processing+0x156>
			if(Touch_x >= 8  & Touch_x <= (270)  & Touch_y >=8  & Touch_y <=(470) ) // Information
 80122a4:	4b2b      	ldr	r3, [pc, #172]	; (8012354 <GUI_Touch_Processing+0x15ac>)
 80122a6:	881b      	ldrh	r3, [r3, #0]
 80122a8:	3b08      	subs	r3, #8
 80122aa:	b29b      	uxth	r3, r3
 80122ac:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 80122b0:	f63e ae25 	bhi.w	8010efe <GUI_Touch_Processing+0x156>
 80122b4:	4b28      	ldr	r3, [pc, #160]	; (8012358 <GUI_Touch_Processing+0x15b0>)
 80122b6:	881b      	ldrh	r3, [r3, #0]
 80122b8:	3b08      	subs	r3, #8
 80122ba:	b29b      	uxth	r3, r3
 80122bc:	f5b3 7fe7 	cmp.w	r3, #462	; 0x1ce
 80122c0:	f63e ae1d 	bhi.w	8010efe <GUI_Touch_Processing+0x156>
					GUI_screen_state = preGUI_screen_state;
 80122c4:	4b25      	ldr	r3, [pc, #148]	; (801235c <GUI_Touch_Processing+0x15b4>)
 80122c6:	781a      	ldrb	r2, [r3, #0]
 80122c8:	7022      	strb	r2, [r4, #0]
					preGUI_screen_state = Information_Screen;
 80122ca:	2211      	movs	r2, #17
 80122cc:	701a      	strb	r2, [r3, #0]
						switch (Prev_Inf_Screen2){
 80122ce:	4b24      	ldr	r3, [pc, #144]	; (8012360 <GUI_Touch_Processing+0x15b8>)
 80122d0:	781b      	ldrb	r3, [r3, #0]
 80122d2:	3b07      	subs	r3, #7
 80122d4:	2b09      	cmp	r3, #9
 80122d6:	f63e ae12 	bhi.w	8010efe <GUI_Touch_Processing+0x156>
 80122da:	a201      	add	r2, pc, #4	; (adr r2, 80122e0 <GUI_Touch_Processing+0x1538>)
 80122dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80122e0:	08012309 	.word	0x08012309
 80122e4:	08010eff 	.word	0x08010eff
 80122e8:	08010eff 	.word	0x08010eff
 80122ec:	08010eff 	.word	0x08010eff
 80122f0:	08010eff 	.word	0x08010eff
 80122f4:	08012317 	.word	0x08012317
 80122f8:	08010eff 	.word	0x08010eff
 80122fc:	08012325 	.word	0x08012325
 8012300:	08010eff 	.word	0x08010eff
 8012304:	08012333 	.word	0x08012333
						case DataSet1_Screen: GUI_screen_state = DataSet1_Screen; 	Prev_Inf_Screen = Measure_Screen;	break;
 8012308:	2307      	movs	r3, #7
 801230a:	7023      	strb	r3, [r4, #0]
 801230c:	4b10      	ldr	r3, [pc, #64]	; (8012350 <GUI_Touch_Processing+0x15a8>)
 801230e:	2201      	movs	r2, #1
 8012310:	701a      	strb	r2, [r3, #0]
 8012312:	f7fe bdf4 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case GraphSet1_Screen: GUI_screen_state = GraphSet1_Screen; Prev_Inf_Screen = Graph_Screen; 		break;
 8012316:	230c      	movs	r3, #12
 8012318:	7023      	strb	r3, [r4, #0]
 801231a:	4b0d      	ldr	r3, [pc, #52]	; (8012350 <GUI_Touch_Processing+0x15a8>)
 801231c:	2204      	movs	r2, #4
 801231e:	701a      	strb	r2, [r3, #0]
 8012320:	f7fe bded 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case ColorSet1_Screen: GUI_screen_state = ColorSet1_Screen; Prev_Inf_Screen = Color_Screen; break;
 8012324:	230e      	movs	r3, #14
 8012326:	7023      	strb	r3, [r4, #0]
 8012328:	4b09      	ldr	r3, [pc, #36]	; (8012350 <GUI_Touch_Processing+0x15a8>)
 801232a:	2205      	movs	r2, #5
 801232c:	701a      	strb	r2, [r3, #0]
 801232e:	f7fe bde6 	b.w	8010efe <GUI_Touch_Processing+0x156>
						case ColorRendSet_Screen: GUI_screen_state = ColorRendSet_Screen; Prev_Inf_Screen = Color_Rendition_Screen; break;
 8012332:	2310      	movs	r3, #16
 8012334:	7023      	strb	r3, [r4, #0]
 8012336:	4b06      	ldr	r3, [pc, #24]	; (8012350 <GUI_Touch_Processing+0x15a8>)
 8012338:	2206      	movs	r2, #6
 801233a:	701a      	strb	r2, [r3, #0]
 801233c:	f7fe bddf 	b.w	8010efe <GUI_Touch_Processing+0x156>
		default: preGUI_screen_state = Measure_Screen;
 8012340:	4b06      	ldr	r3, [pc, #24]	; (801235c <GUI_Touch_Processing+0x15b4>)
 8012342:	2201      	movs	r2, #1
 8012344:	701a      	strb	r2, [r3, #0]
}
 8012346:	f7fe bdda 	b.w	8010efe <GUI_Touch_Processing+0x156>
 801234a:	bf00      	nop
 801234c:	2000572e 	.word	0x2000572e
 8012350:	20090ab5 	.word	0x20090ab5
 8012354:	20054942 	.word	0x20054942
 8012358:	20054944 	.word	0x20054944
 801235c:	2000022a 	.word	0x2000022a
 8012360:	20091058 	.word	0x20091058

08012364 <GUI_Bluetooth_Logo>:
extern UART_HandleTypeDef huart1;
extern uint8_t BluetoothStat;
extern uint8_t pause;

void GUI_Bluetooth_Logo(uint16_t X, uint16_t Y)
{
 8012364:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8012368:	f101 031e 	add.w	r3, r1, #30
{
 801236c:	460c      	mov	r4, r1
 801236e:	4605      	mov	r5, r0
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8012370:	f100 0214 	add.w	r2, r0, #20
 8012374:	2605      	movs	r6, #5
 8012376:	f241 3776 	movw	r7, #4982	; 0x1376
 801237a:	e88d 00c0 	stmia.w	sp, {r6, r7}
 801237e:	b29b      	uxth	r3, r3
 8012380:	b292      	uxth	r2, r2
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8012382:	f105 060a 	add.w	r6, r5, #10
 8012386:	f104 0a1a 	add.w	sl, r4, #26
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 801238a:	f00a fa9d 	bl	801c8c8 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 801238e:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8012392:	b2b6      	uxth	r6, r6
 8012394:	fa1f fa8a 	uxth.w	sl, sl
 8012398:	1d21      	adds	r1, r4, #4
 801239a:	4653      	mov	r3, sl
 801239c:	4632      	mov	r2, r6
 801239e:	4630      	mov	r0, r6
 80123a0:	f8cd 8000 	str.w	r8, [sp]
 80123a4:	b289      	uxth	r1, r1
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80123a6:	f105 070f 	add.w	r7, r5, #15
 80123aa:	f104 090b 	add.w	r9, r4, #11
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 80123ae:	f00a f8a9 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80123b2:	b2bf      	uxth	r7, r7
 80123b4:	fa1f f989 	uxth.w	r9, r9
 80123b8:	1d61      	adds	r1, r4, #5
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 80123ba:	3506      	adds	r5, #6
 80123bc:	3414      	adds	r4, #20
 80123be:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80123c0:	464b      	mov	r3, r9
 80123c2:	463a      	mov	r2, r7
 80123c4:	4630      	mov	r0, r6
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 80123c6:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80123c8:	f8cd 8000 	str.w	r8, [sp]
 80123cc:	b289      	uxth	r1, r1
 80123ce:	f00a f899 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 80123d2:	464b      	mov	r3, r9
 80123d4:	463a      	mov	r2, r7
 80123d6:	4621      	mov	r1, r4
 80123d8:	4628      	mov	r0, r5
 80123da:	f8cd 8000 	str.w	r8, [sp]
 80123de:	f00a f891 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+15, Y+20, TFT_White);
 80123e2:	4623      	mov	r3, r4
 80123e4:	463a      	mov	r2, r7
 80123e6:	4649      	mov	r1, r9
 80123e8:	4628      	mov	r0, r5
 80123ea:	f8cd 8000 	str.w	r8, [sp]
 80123ee:	f00a f889 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+26, X+15, Y+20,TFT_White);
 80123f2:	f8cd 8000 	str.w	r8, [sp]
 80123f6:	4623      	mov	r3, r4
 80123f8:	463a      	mov	r2, r7
 80123fa:	4651      	mov	r1, sl
 80123fc:	4630      	mov	r0, r6
 80123fe:	f00a f881 	bl	801c504 <TFT_DrawLine>
}
 8012402:	b002      	add	sp, #8
 8012404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012408 <GUI_Button_Settings>:


void GUI_Button_Settings(uint16_t X, uint16_t Y)
{
 8012408:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801240c:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8012410:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012412:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8012416:	f241 3676 	movw	r6, #4982	; 0x1376
{
 801241a:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801241c:	9600      	str	r6, [sp, #0]
 801241e:	b29b      	uxth	r3, r3
 8012420:	b292      	uxth	r2, r2
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 8012422:	f105 0608 	add.w	r6, r5, #8
 8012426:	352f      	adds	r5, #47	; 0x2f
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012428:	f00a f8c9 	bl	801c5be <TFT_FillRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 801242c:	b2b6      	uxth	r6, r6
 801242e:	b2ad      	uxth	r5, r5
 8012430:	2702      	movs	r7, #2
 8012432:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8012436:	f104 0313 	add.w	r3, r4, #19
 801243a:	f104 010d 	add.w	r1, r4, #13
 801243e:	462a      	mov	r2, r5
 8012440:	4630      	mov	r0, r6
 8012442:	e88d 0180 	stmia.w	sp, {r7, r8}
 8012446:	b29b      	uxth	r3, r3
 8012448:	b289      	uxth	r1, r1
 801244a:	f00a fa3d 	bl	801c8c8 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+25, X+47, Y+31, 2, TFT_White);
 801244e:	f104 031f 	add.w	r3, r4, #31
 8012452:	f104 0119 	add.w	r1, r4, #25
 8012456:	462a      	mov	r2, r5
 8012458:	4630      	mov	r0, r6
 801245a:	e88d 0180 	stmia.w	sp, {r7, r8}
 801245e:	b29b      	uxth	r3, r3
 8012460:	b289      	uxth	r1, r1
 8012462:	f00a fa31 	bl	801c8c8 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+37, X+47, Y+43, 2, TFT_White);
 8012466:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 801246a:	f104 0125 	add.w	r1, r4, #37	; 0x25
 801246e:	e88d 0180 	stmia.w	sp, {r7, r8}
 8012472:	b29b      	uxth	r3, r3
 8012474:	462a      	mov	r2, r5
 8012476:	b289      	uxth	r1, r1
 8012478:	4630      	mov	r0, r6
 801247a:	f00a fa25 	bl	801c8c8 <TFT_DrawFilledRoundedRectangle>
}
 801247e:	b002      	add	sp, #8
 8012480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012484 <GUI_Button_Down>:

void GUI_Button_Down(uint16_t X, uint16_t Y)
{
 8012484:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012488:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 801248c:	4604      	mov	r4, r0
 801248e:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012490:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8012494:	f241 3676 	movw	r6, #4982	; 0x1376
 8012498:	9600      	str	r6, [sp, #0]
 801249a:	b29b      	uxth	r3, r3
 801249c:	b292      	uxth	r2, r2
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 801249e:	f105 0612 	add.w	r6, r5, #18
 80124a2:	f104 081c 	add.w	r8, r4, #28
 80124a6:	3528      	adds	r5, #40	; 0x28
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80124a8:	f00a f889 	bl	801c5be <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 80124ac:	b2b6      	uxth	r6, r6
 80124ae:	b2ad      	uxth	r5, r5
 80124b0:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80124b4:	fa1f f888 	uxth.w	r8, r8
 80124b8:	f104 000c 	add.w	r0, r4, #12
 80124bc:	462b      	mov	r3, r5
 80124be:	4642      	mov	r2, r8
 80124c0:	4631      	mov	r1, r6
 80124c2:	9700      	str	r7, [sp, #0]
 80124c4:	b280      	uxth	r0, r0
 80124c6:	f00a f81d 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 80124ca:	f104 021d 	add.w	r2, r4, #29
 80124ce:	f104 000d 	add.w	r0, r4, #13
 80124d2:	462b      	mov	r3, r5
 80124d4:	4631      	mov	r1, r6
 80124d6:	9700      	str	r7, [sp, #0]
 80124d8:	b292      	uxth	r2, r2
 80124da:	b280      	uxth	r0, r0
 80124dc:	f00a f812 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 80124e0:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 80124e4:	462b      	mov	r3, r5
 80124e6:	4642      	mov	r2, r8
 80124e8:	4631      	mov	r1, r6
 80124ea:	9700      	str	r7, [sp, #0]
 80124ec:	b280      	uxth	r0, r0
 80124ee:	f00a f809 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 80124f2:	f104 021b 	add.w	r2, r4, #27
 80124f6:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80124fa:	9700      	str	r7, [sp, #0]
 80124fc:	462b      	mov	r3, r5
 80124fe:	b292      	uxth	r2, r2
 8012500:	4631      	mov	r1, r6
 8012502:	b280      	uxth	r0, r0
 8012504:	f009 fffe 	bl	801c504 <TFT_DrawLine>
}
 8012508:	b002      	add	sp, #8
 801250a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801250e <GUI_Button_Down_Active>:

void GUI_Button_Down_Active(uint16_t X, uint16_t Y, uint8_t Active)
{
 801250e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8012512:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8012516:	4604      	mov	r4, r0
 8012518:	460d      	mov	r5, r1
 801251a:	f100 0636 	add.w	r6, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 801251e:	2a00      	cmp	r2, #0
 8012520:	d03c      	beq.n	801259c <GUI_Button_Down_Active+0x8e>
 8012522:	f241 3276 	movw	r2, #4982	; 0x1376
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012526:	9200      	str	r2, [sp, #0]
 8012528:	b29b      	uxth	r3, r3
 801252a:	b2b2      	uxth	r2, r6
	
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 801252c:	f104 081c 	add.w	r8, r4, #28
 8012530:	f105 0612 	add.w	r6, r5, #18
 8012534:	3528      	adds	r5, #40	; 0x28
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012536:	f00a f842 	bl	801c5be <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 801253a:	b2b6      	uxth	r6, r6
 801253c:	b2ad      	uxth	r5, r5
 801253e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8012542:	fa1f f888 	uxth.w	r8, r8
 8012546:	f104 000c 	add.w	r0, r4, #12
 801254a:	462b      	mov	r3, r5
 801254c:	4642      	mov	r2, r8
 801254e:	4631      	mov	r1, r6
 8012550:	9700      	str	r7, [sp, #0]
 8012552:	b280      	uxth	r0, r0
 8012554:	f009 ffd6 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 8012558:	f104 021d 	add.w	r2, r4, #29
 801255c:	f104 000d 	add.w	r0, r4, #13
 8012560:	462b      	mov	r3, r5
 8012562:	4631      	mov	r1, r6
 8012564:	9700      	str	r7, [sp, #0]
 8012566:	b292      	uxth	r2, r2
 8012568:	b280      	uxth	r0, r0
 801256a:	f009 ffcb 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 801256e:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8012572:	462b      	mov	r3, r5
 8012574:	4642      	mov	r2, r8
 8012576:	4631      	mov	r1, r6
 8012578:	9700      	str	r7, [sp, #0]
 801257a:	b280      	uxth	r0, r0
 801257c:	f009 ffc2 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 8012580:	f104 021b 	add.w	r2, r4, #27
 8012584:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 8012588:	9700      	str	r7, [sp, #0]
 801258a:	462b      	mov	r3, r5
 801258c:	b292      	uxth	r2, r2
 801258e:	4631      	mov	r1, r6
 8012590:	b280      	uxth	r0, r0
 8012592:	f009 ffb7 	bl	801c504 <TFT_DrawLine>
}
 8012596:	b002      	add	sp, #8
 8012598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 801259c:	f64d 721c 	movw	r2, #57116	; 0xdf1c
 80125a0:	e7c1      	b.n	8012526 <GUI_Button_Down_Active+0x18>

080125a2 <GUI_Button_Right>:

void GUI_Button_Right(uint16_t X, uint16_t Y)
{
 80125a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a6:	4604      	mov	r4, r0
 80125a8:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80125aa:	f241 3676 	movw	r6, #4982	; 0x1376
 80125ae:	f101 0336 	add.w	r3, r1, #54	; 0x36
 80125b2:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80125b6:	9600      	str	r6, [sp, #0]
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80125b8:	f104 0a13 	add.w	sl, r4, #19
 80125bc:	f105 0b0c 	add.w	fp, r5, #12
 80125c0:	f104 0928 	add.w	r9, r4, #40	; 0x28
 80125c4:	f105 061b 	add.w	r6, r5, #27
 80125c8:	b2b6      	uxth	r6, r6
 80125ca:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80125ce:	fa1f fa8a 	uxth.w	sl, sl
 80125d2:	fa1f fb8b 	uxth.w	fp, fp
 80125d6:	fa1f f989 	uxth.w	r9, r9
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80125da:	b29b      	uxth	r3, r3
 80125dc:	b292      	uxth	r2, r2
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 80125de:	f104 0712 	add.w	r7, r4, #18
 80125e2:	3427      	adds	r4, #39	; 0x27
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80125e4:	f009 ffeb 	bl	801c5be <TFT_FillRectangle>
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 80125e8:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80125ea:	4633      	mov	r3, r6
 80125ec:	464a      	mov	r2, r9
 80125ee:	4659      	mov	r1, fp
 80125f0:	4650      	mov	r0, sl
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 80125f2:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80125f4:	f8cd 8000 	str.w	r8, [sp]
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 80125f8:	352a      	adds	r5, #42	; 0x2a
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80125fa:	f009 ff83 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 80125fe:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8012600:	4633      	mov	r3, r6
 8012602:	4622      	mov	r2, r4
 8012604:	4659      	mov	r1, fp
 8012606:	4638      	mov	r0, r7
 8012608:	f8cd 8000 	str.w	r8, [sp]
 801260c:	f009 ff7a 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8012610:	462b      	mov	r3, r5
 8012612:	4652      	mov	r2, sl
 8012614:	4631      	mov	r1, r6
 8012616:	4648      	mov	r0, r9
 8012618:	f8cd 8000 	str.w	r8, [sp]
 801261c:	f009 ff72 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+39, Y+27, X+18, Y+42, TFT_White);
 8012620:	f8cd 8000 	str.w	r8, [sp]
 8012624:	462b      	mov	r3, r5
 8012626:	463a      	mov	r2, r7
 8012628:	4631      	mov	r1, r6
 801262a:	4620      	mov	r0, r4
 801262c:	f009 ff6a 	bl	801c504 <TFT_DrawLine>
}
 8012630:	b003      	add	sp, #12
 8012632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012636 <GUI_Button_TFT_On_Off>:

void GUI_Button_TFT_On_Off(uint16_t X, uint16_t Y)
{
 8012636:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012638:	f101 0336 	add.w	r3, r1, #54	; 0x36
 801263c:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8012640:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8012644:	4604      	mov	r4, r0
 8012646:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012648:	9600      	str	r6, [sp, #0]
 801264a:	b29b      	uxth	r3, r3
 801264c:	b292      	uxth	r2, r2
 801264e:	f009 ffb6 	bl	801c5be <TFT_FillRectangle>
	TFT_DrawRectangle(X+8, Y+16, X+48, Y+39, TFT_White);
 8012652:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8012656:	f105 0327 	add.w	r3, r5, #39	; 0x27
 801265a:	f104 0230 	add.w	r2, r4, #48	; 0x30
 801265e:	f105 0110 	add.w	r1, r5, #16
 8012662:	f104 0008 	add.w	r0, r4, #8
 8012666:	9600      	str	r6, [sp, #0]
 8012668:	b29b      	uxth	r3, r3
 801266a:	b292      	uxth	r2, r2
 801266c:	b289      	uxth	r1, r1
 801266e:	b280      	uxth	r0, r0
 8012670:	f009 ffbd 	bl	801c5ee <TFT_DrawRectangle>
	TFT_DrawLine(X+6, Y+5, X+51, Y+48, TFT_White);
 8012674:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8012678:	f104 0233 	add.w	r2, r4, #51	; 0x33
 801267c:	1d69      	adds	r1, r5, #5
 801267e:	1da0      	adds	r0, r4, #6
 8012680:	9600      	str	r6, [sp, #0]
 8012682:	b29b      	uxth	r3, r3
 8012684:	b292      	uxth	r2, r2
 8012686:	b289      	uxth	r1, r1
 8012688:	b280      	uxth	r0, r0
 801268a:	f009 ff3b 	bl	801c504 <TFT_DrawLine>
}
 801268e:	b002      	add	sp, #8
 8012690:	bd70      	pop	{r4, r5, r6, pc}

08012692 <GUI_Button_TFT_Rotate>:

void GUI_Button_TFT_Rotate(uint16_t X, uint16_t Y)
{
 8012692:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012696:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 801269a:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801269c:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80126a0:	f241 3676 	movw	r6, #4982	; 0x1376
{
 80126a4:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80126a6:	9600      	str	r6, [sp, #0]
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	b292      	uxth	r2, r2
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 80126ac:	f105 071c 	add.w	r7, r5, #28
 80126b0:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80126b4:	f009 ff83 	bl	801c5be <TFT_FillRectangle>
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 80126b8:	b2bf      	uxth	r7, r7
 80126ba:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 80126be:	f104 0109 	add.w	r1, r4, #9
 80126c2:	f105 0009 	add.w	r0, r5, #9
 80126c6:	463a      	mov	r2, r7
 80126c8:	9600      	str	r6, [sp, #0]
 80126ca:	b29b      	uxth	r3, r3
 80126cc:	b289      	uxth	r1, r1
 80126ce:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 80126d0:	f104 081e 	add.w	r8, r4, #30
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 80126d4:	f009 ff8b 	bl	801c5ee <TFT_DrawRectangle>
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 80126d8:	fa1f f888 	uxth.w	r8, r8
 80126dc:	f104 0330 	add.w	r3, r4, #48	; 0x30
 80126e0:	f105 0231 	add.w	r2, r5, #49	; 0x31
 80126e4:	f105 0012 	add.w	r0, r5, #18
 80126e8:	4641      	mov	r1, r8
 80126ea:	9600      	str	r6, [sp, #0]
 80126ec:	b29b      	uxth	r3, r3
 80126ee:	b292      	uxth	r2, r2
 80126f0:	b280      	uxth	r0, r0
 80126f2:	f009 ff7c 	bl	801c5ee <TFT_DrawRectangle>
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
	
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 80126f6:	f105 0921 	add.w	r9, r5, #33	; 0x21
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 80126fa:	fa0f f188 	sxth.w	r1, r8
 80126fe:	b238      	sxth	r0, r7
 8012700:	9600      	str	r6, [sp, #0]
 8012702:	2302      	movs	r3, #2
 8012704:	2210      	movs	r2, #16
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8012706:	f105 071d 	add.w	r7, r5, #29
 801270a:	f104 080e 	add.w	r8, r4, #14
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 801270e:	f009 fdaf 	bl	801c270 <TFT_DrawCircleCorner>
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8012712:	b2bf      	uxth	r7, r7
 8012714:	fa1f f888 	uxth.w	r8, r8
 8012718:	fa1f f989 	uxth.w	r9, r9
 801271c:	f104 0313 	add.w	r3, r4, #19
 8012720:	464a      	mov	r2, r9
 8012722:	4641      	mov	r1, r8
 8012724:	4638      	mov	r0, r7
 8012726:	9600      	str	r6, [sp, #0]
 8012728:	b29b      	uxth	r3, r3
 801272a:	f009 feeb 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 801272e:	f104 030b 	add.w	r3, r4, #11
 8012732:	464a      	mov	r2, r9
 8012734:	4641      	mov	r1, r8
 8012736:	4638      	mov	r0, r7
 8012738:	9600      	str	r6, [sp, #0]
 801273a:	b29b      	uxth	r3, r3
	
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 801273c:	f105 072c 	add.w	r7, r5, #44	; 0x2c
 8012740:	f104 081d 	add.w	r8, r4, #29
 8012744:	3419      	adds	r4, #25
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 8012746:	f009 fedd 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 801274a:	b2bf      	uxth	r7, r7
 801274c:	fa1f f888 	uxth.w	r8, r8
 8012750:	b2a4      	uxth	r4, r4
 8012752:	f105 0227 	add.w	r2, r5, #39	; 0x27
 8012756:	4623      	mov	r3, r4
 8012758:	4641      	mov	r1, r8
 801275a:	4638      	mov	r0, r7
 801275c:	9600      	str	r6, [sp, #0]
 801275e:	b292      	uxth	r2, r2
 8012760:	f009 fed0 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+47, Y+25, TFT_White);
 8012764:	f105 022f 	add.w	r2, r5, #47	; 0x2f
 8012768:	9600      	str	r6, [sp, #0]
 801276a:	4623      	mov	r3, r4
 801276c:	b292      	uxth	r2, r2
 801276e:	4641      	mov	r1, r8
 8012770:	4638      	mov	r0, r7
 8012772:	f009 fec7 	bl	801c504 <TFT_DrawLine>
}
 8012776:	b003      	add	sp, #12
 8012778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801277c <GUI_Button_SD_Card>:

void GUI_Button_SD_Card(uint16_t X, uint16_t Y, uint8_t Active)
{
 801277c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012780:	b085      	sub	sp, #20
 8012782:	4604      	mov	r4, r0
	
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8012784:	9203      	str	r2, [sp, #12]
 8012786:	9e03      	ldr	r6, [sp, #12]
{
 8012788:	460d      	mov	r5, r1
 801278a:	f101 0336 	add.w	r3, r1, #54	; 0x36
 801278e:	f100 0236 	add.w	r2, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8012792:	2e00      	cmp	r6, #0
 8012794:	f000 80b6 	beq.w	8012904 <GUI_Button_SD_Card+0x188>
 8012798:	f241 3676 	movw	r6, #4982	; 0x1376
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
	
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 801279c:	f104 0715 	add.w	r7, r4, #21
 80127a0:	f105 0b05 	add.w	fp, r5, #5
 80127a4:	f104 092e 	add.w	r9, r4, #46	; 0x2e
 80127a8:	f105 0a07 	add.w	sl, r5, #7
 80127ac:	b2bf      	uxth	r7, r7
 80127ae:	fa1f f989 	uxth.w	r9, r9
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80127b2:	9600      	str	r6, [sp, #0]
 80127b4:	b29b      	uxth	r3, r3
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 80127b6:	f64f 76ff 	movw	r6, #65535	; 0xffff
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80127ba:	b292      	uxth	r2, r2
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 80127bc:	fa1f fb8b 	uxth.w	fp, fp
 80127c0:	fa1f fa8a 	uxth.w	sl, sl
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80127c4:	f009 fefb 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 80127c8:	f105 0832 	add.w	r8, r5, #50	; 0x32
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 80127cc:	464a      	mov	r2, r9
 80127ce:	4638      	mov	r0, r7
 80127d0:	4653      	mov	r3, sl
 80127d2:	4659      	mov	r1, fp
 80127d4:	9600      	str	r6, [sp, #0]
 80127d6:	f009 fef2 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 80127da:	fa1f f888 	uxth.w	r8, r8
 80127de:	f105 0108 	add.w	r1, r5, #8
 80127e2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 80127e6:	4643      	mov	r3, r8
 80127e8:	464a      	mov	r2, r9
 80127ea:	b289      	uxth	r1, r1
 80127ec:	b280      	uxth	r0, r0
 80127ee:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 80127f0:	f104 090a 	add.w	r9, r4, #10
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 80127f4:	f009 fee3 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 80127f8:	fa1f f989 	uxth.w	r9, r9
 80127fc:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8012800:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8012804:	4643      	mov	r3, r8
 8012806:	464a      	mov	r2, r9
 8012808:	b289      	uxth	r1, r1
 801280a:	b280      	uxth	r0, r0
 801280c:	9600      	str	r6, [sp, #0]
 801280e:	f009 fed6 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X+10, Y+16, X+12, Y+47, TFT_White);
 8012812:	f104 030c 	add.w	r3, r4, #12
 8012816:	b29b      	uxth	r3, r3
 8012818:	f105 0810 	add.w	r8, r5, #16
 801281c:	fa1f f888 	uxth.w	r8, r8
 8012820:	9302      	str	r3, [sp, #8]
 8012822:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 8012826:	4641      	mov	r1, r8
 8012828:	4648      	mov	r0, r9
 801282a:	b29b      	uxth	r3, r3
 801282c:	9a02      	ldr	r2, [sp, #8]
 801282e:	9600      	str	r6, [sp, #0]
 8012830:	f009 fec5 	bl	801c5be <TFT_FillRectangle>
	
	TFT_DrawLine(X+10, Y+16, X+21, Y+5, TFT_White);
 8012834:	463a      	mov	r2, r7
 8012836:	4641      	mov	r1, r8
 8012838:	4648      	mov	r0, r9
 801283a:	465b      	mov	r3, fp
 801283c:	9600      	str	r6, [sp, #0]
 801283e:	f009 fe61 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+16, X+21, Y+6, TFT_White);
 8012842:	1dab      	adds	r3, r5, #6
 8012844:	f104 000b 	add.w	r0, r4, #11
 8012848:	463a      	mov	r2, r7
 801284a:	4641      	mov	r1, r8
 801284c:	b29b      	uxth	r3, r3
 801284e:	b280      	uxth	r0, r0
 8012850:	9600      	str	r6, [sp, #0]
 8012852:	f009 fe57 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
	
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8012856:	f105 0913 	add.w	r9, r5, #19
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 801285a:	463a      	mov	r2, r7
 801285c:	4641      	mov	r1, r8
 801285e:	4653      	mov	r3, sl
 8012860:	9802      	ldr	r0, [sp, #8]
 8012862:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8012864:	f105 080d 	add.w	r8, r5, #13
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8012868:	f009 fe4c 	bl	801c504 <TFT_DrawLine>
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 801286c:	fa1f f888 	uxth.w	r8, r8
 8012870:	fa1f f989 	uxth.w	r9, r9
 8012874:	f104 0013 	add.w	r0, r4, #19
 8012878:	463a      	mov	r2, r7
 801287a:	464b      	mov	r3, r9
 801287c:	4641      	mov	r1, r8
 801287e:	b280      	uxth	r0, r0
 8012880:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 8012882:	f104 071b 	add.w	r7, r4, #27
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8012886:	f009 fe9a 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 801288a:	b2bf      	uxth	r7, r7
 801288c:	f104 0019 	add.w	r0, r4, #25
 8012890:	464b      	mov	r3, r9
 8012892:	463a      	mov	r2, r7
 8012894:	4641      	mov	r1, r8
 8012896:	b280      	uxth	r0, r0
 8012898:	9600      	str	r6, [sp, #0]
 801289a:	f009 fe90 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X+31, Y+13, X+33, Y+19, TFT_White);
 801289e:	f104 0221 	add.w	r2, r4, #33	; 0x21
 80128a2:	f104 001f 	add.w	r0, r4, #31
 80128a6:	464b      	mov	r3, r9
 80128a8:	b292      	uxth	r2, r2
 80128aa:	4641      	mov	r1, r8
 80128ac:	b280      	uxth	r0, r0
 80128ae:	9600      	str	r6, [sp, #0]
 80128b0:	f009 fe85 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X+37, Y+13, X+39, Y+19, TFT_White);
 80128b4:	f104 0227 	add.w	r2, r4, #39	; 0x27
 80128b8:	f104 0025 	add.w	r0, r4, #37	; 0x25
 80128bc:	464b      	mov	r3, r9
 80128be:	b292      	uxth	r2, r2
 80128c0:	4641      	mov	r1, r8
 80128c2:	b280      	uxth	r0, r0
 80128c4:	9600      	str	r6, [sp, #0]
 80128c6:	f009 fe7a 	bl	801c5be <TFT_FillRectangle>
	
	TFT_SetFont(&Font20);
 80128ca:	4811      	ldr	r0, [pc, #68]	; (8012910 <GUI_Button_SD_Card+0x194>)
 80128cc:	f00a f8a0 	bl	801ca10 <TFT_SetFont>
	TFT_SetTextColor(TFT_White);
 80128d0:	4630      	mov	r0, r6
 80128d2:	f00a f8a3 	bl	801ca1c <TFT_SetTextColor>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 80128d6:	9b03      	ldr	r3, [sp, #12]
 80128d8:	b1bb      	cbz	r3, 801290a <GUI_Button_SD_Card+0x18e>
 80128da:	f241 3076 	movw	r0, #4982	; 0x1376
	TFT_DrawChar(X+16, Y+28, 'S');
 80128de:	351c      	adds	r5, #28
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 80128e0:	f00a f8a2 	bl	801ca28 <TFT_SetBackColor>
	TFT_DrawChar(X+16, Y+28, 'S');
 80128e4:	b2ad      	uxth	r5, r5
 80128e6:	f104 0010 	add.w	r0, r4, #16
 80128ea:	4629      	mov	r1, r5
 80128ec:	2253      	movs	r2, #83	; 0x53
 80128ee:	b280      	uxth	r0, r0
 80128f0:	f00a f958 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+28, 'D');
 80128f4:	2244      	movs	r2, #68	; 0x44
 80128f6:	4629      	mov	r1, r5
 80128f8:	4638      	mov	r0, r7
}
 80128fa:	b005      	add	sp, #20
 80128fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawChar(X+27, Y+28, 'D');
 8012900:	f00a b950 	b.w	801cba4 <TFT_DrawChar>
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8012904:	f64d 761c 	movw	r6, #57116	; 0xdf1c
 8012908:	e748      	b.n	801279c <GUI_Button_SD_Card+0x20>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 801290a:	f64d 701c 	movw	r0, #57116	; 0xdf1c
 801290e:	e7e6      	b.n	80128de <GUI_Button_SD_Card+0x162>
 8012910:	200001e0 	.word	0x200001e0

08012914 <GUI_Button_Measure_Start_Pause>:

void GUI_Button_Measure_Start_Pause(uint16_t X, uint16_t Y)
{
 8012914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if(!pause)	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8012918:	4bc0      	ldr	r3, [pc, #768]	; (8012c1c <GUI_Button_Measure_Start_Pause+0x308>)
 801291a:	781e      	ldrb	r6, [r3, #0]
{
 801291c:	b085      	sub	sp, #20
 801291e:	4605      	mov	r5, r0
 8012920:	460c      	mov	r4, r1
 8012922:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8012926:	f100 0236 	add.w	r2, r0, #54	; 0x36
	if(!pause)	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801292a:	2e00      	cmp	r6, #0
 801292c:	f040 8173 	bne.w	8012c16 <GUI_Button_Measure_Start_Pause+0x302>
 8012930:	f241 3676 	movw	r6, #4982	; 0x1376
	else  TFT_FillRectangle(X, Y, X+54, Y+54, TFT_PAR_IRed);
 8012934:	9600      	str	r6, [sp, #0]
 8012936:	b29b      	uxth	r3, r3
 8012938:	b292      	uxth	r2, r2

	
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 801293a:	f104 090b 	add.w	r9, r4, #11
 801293e:	f104 072b 	add.w	r7, r4, #43	; 0x2b
 8012942:	f64f 76ff 	movw	r6, #65535	; 0xffff
	else  TFT_FillRectangle(X, Y, X+54, Y+54, TFT_PAR_IRed);
 8012946:	f009 fe3a 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 801294a:	fa1f f989 	uxth.w	r9, r9
 801294e:	b2bf      	uxth	r7, r7
 8012950:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8012954:	f105 0023 	add.w	r0, r5, #35	; 0x23
 8012958:	463b      	mov	r3, r7
 801295a:	4649      	mov	r1, r9
 801295c:	9600      	str	r6, [sp, #0]
 801295e:	b292      	uxth	r2, r2
 8012960:	b280      	uxth	r0, r0
 8012962:	f009 fe2c 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 8012966:	f105 0232 	add.w	r2, r5, #50	; 0x32
 801296a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 801296e:	463b      	mov	r3, r7
 8012970:	4649      	mov	r1, r9
 8012972:	9600      	str	r6, [sp, #0]
 8012974:	b292      	uxth	r2, r2
 8012976:	b280      	uxth	r0, r0
	
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8012978:	f105 0806 	add.w	r8, r5, #6
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 801297c:	f009 fe1f 	bl	801c5be <TFT_FillRectangle>
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8012980:	fa1f f888 	uxth.w	r8, r8
 8012984:	f104 032c 	add.w	r3, r4, #44	; 0x2c
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 8012988:	f105 0a1e 	add.w	sl, r5, #30
 801298c:	f104 0b1b 	add.w	fp, r4, #27
 8012990:	fa1f fa8a 	uxth.w	sl, sl
 8012994:	fa1f fb8b 	uxth.w	fp, fp
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8012998:	b29b      	uxth	r3, r3
 801299a:	4642      	mov	r2, r8
 801299c:	4649      	mov	r1, r9
 801299e:	4640      	mov	r0, r8
 80129a0:	9600      	str	r6, [sp, #0]
 80129a2:	9303      	str	r3, [sp, #12]
 80129a4:	f009 fdae 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 80129a8:	465b      	mov	r3, fp
 80129aa:	4652      	mov	r2, sl
 80129ac:	4649      	mov	r1, r9
 80129ae:	4640      	mov	r0, r8
 80129b0:	9600      	str	r6, [sp, #0]
 80129b2:	f009 fda7 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+44, X+30, Y+27, TFT_White);
 80129b6:	465b      	mov	r3, fp
 80129b8:	4652      	mov	r2, sl
 80129ba:	9903      	ldr	r1, [sp, #12]
 80129bc:	9600      	str	r6, [sp, #0]
 80129be:	4640      	mov	r0, r8
 80129c0:	f009 fda0 	bl	801c504 <TFT_DrawLine>
	
	//paint white
	TFT_DrawLine(X+7, Y+12, X+7, Y+43, TFT_White);
 80129c4:	f104 080c 	add.w	r8, r4, #12
 80129c8:	1dea      	adds	r2, r5, #7
 80129ca:	b292      	uxth	r2, r2
 80129cc:	fa1f f888 	uxth.w	r8, r8
 80129d0:	463b      	mov	r3, r7
 80129d2:	4641      	mov	r1, r8
 80129d4:	4610      	mov	r0, r2
 80129d6:	9600      	str	r6, [sp, #0]
 80129d8:	f009 fd94 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+8, Y+12, X+8, Y+43, TFT_White);
 80129dc:	f105 0208 	add.w	r2, r5, #8
 80129e0:	b292      	uxth	r2, r2
 80129e2:	463b      	mov	r3, r7
 80129e4:	4641      	mov	r1, r8
 80129e6:	4610      	mov	r0, r2
 80129e8:	9600      	str	r6, [sp, #0]
 80129ea:	f009 fd8b 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+9, Y+13, X+9, Y+42, TFT_White);
 80129ee:	f105 0209 	add.w	r2, r5, #9
 80129f2:	b292      	uxth	r2, r2
 80129f4:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 80129f8:	f104 010d 	add.w	r1, r4, #13
 80129fc:	4610      	mov	r0, r2
 80129fe:	9600      	str	r6, [sp, #0]
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	b289      	uxth	r1, r1
 8012a04:	f009 fd7e 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+14, X+10, Y+41, TFT_White);
 8012a08:	f104 080e 	add.w	r8, r4, #14
 8012a0c:	f105 020a 	add.w	r2, r5, #10
 8012a10:	b292      	uxth	r2, r2
 8012a12:	fa1f f888 	uxth.w	r8, r8
 8012a16:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8012a1a:	4641      	mov	r1, r8
 8012a1c:	4610      	mov	r0, r2
 8012a1e:	9600      	str	r6, [sp, #0]
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	f009 fd6f 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+14, X+11, Y+40, TFT_White);
 8012a26:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8012a2a:	f105 020b 	add.w	r2, r5, #11
 8012a2e:	b292      	uxth	r2, r2
 8012a30:	b2bf      	uxth	r7, r7
 8012a32:	463b      	mov	r3, r7
 8012a34:	4641      	mov	r1, r8
 8012a36:	4610      	mov	r0, r2
 8012a38:	9600      	str	r6, [sp, #0]
 8012a3a:	f009 fd63 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+15, X+12, Y+40, TFT_White);
 8012a3e:	f105 020c 	add.w	r2, r5, #12
 8012a42:	b292      	uxth	r2, r2
 8012a44:	f104 010f 	add.w	r1, r4, #15
 8012a48:	463b      	mov	r3, r7
 8012a4a:	4610      	mov	r0, r2
 8012a4c:	9600      	str	r6, [sp, #0]
 8012a4e:	b289      	uxth	r1, r1
 8012a50:	f009 fd58 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+16, X+13, Y+39, TFT_White);
 8012a54:	f104 0810 	add.w	r8, r4, #16
 8012a58:	f105 020d 	add.w	r2, r5, #13
 8012a5c:	b292      	uxth	r2, r2
 8012a5e:	fa1f f888 	uxth.w	r8, r8
 8012a62:	f104 0327 	add.w	r3, r4, #39	; 0x27
 8012a66:	4641      	mov	r1, r8
 8012a68:	4610      	mov	r0, r2
 8012a6a:	9600      	str	r6, [sp, #0]
 8012a6c:	b29b      	uxth	r3, r3
 8012a6e:	f009 fd49 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+16, X+14, Y+38, TFT_White);
 8012a72:	f104 0726 	add.w	r7, r4, #38	; 0x26
 8012a76:	f105 020e 	add.w	r2, r5, #14
 8012a7a:	b292      	uxth	r2, r2
 8012a7c:	b2bf      	uxth	r7, r7
 8012a7e:	463b      	mov	r3, r7
 8012a80:	4641      	mov	r1, r8
 8012a82:	4610      	mov	r0, r2
 8012a84:	9600      	str	r6, [sp, #0]
 8012a86:	f009 fd3d 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+17, X+15, Y+38, TFT_White);
 8012a8a:	f105 020f 	add.w	r2, r5, #15
 8012a8e:	b292      	uxth	r2, r2
 8012a90:	f104 0111 	add.w	r1, r4, #17
 8012a94:	463b      	mov	r3, r7
 8012a96:	4610      	mov	r0, r2
 8012a98:	9600      	str	r6, [sp, #0]
 8012a9a:	b289      	uxth	r1, r1
 8012a9c:	f009 fd32 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+18, X+16, Y+37, TFT_White);
 8012aa0:	f104 0812 	add.w	r8, r4, #18
 8012aa4:	f105 0210 	add.w	r2, r5, #16
 8012aa8:	b292      	uxth	r2, r2
 8012aaa:	fa1f f888 	uxth.w	r8, r8
 8012aae:	f104 0325 	add.w	r3, r4, #37	; 0x25
 8012ab2:	4641      	mov	r1, r8
 8012ab4:	4610      	mov	r0, r2
 8012ab6:	9600      	str	r6, [sp, #0]
 8012ab8:	b29b      	uxth	r3, r3
 8012aba:	f009 fd23 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+18, X+17, Y+36, TFT_White);
 8012abe:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8012ac2:	f105 0211 	add.w	r2, r5, #17
 8012ac6:	b292      	uxth	r2, r2
 8012ac8:	b2bf      	uxth	r7, r7
 8012aca:	463b      	mov	r3, r7
 8012acc:	4641      	mov	r1, r8
 8012ace:	4610      	mov	r0, r2
 8012ad0:	9600      	str	r6, [sp, #0]
 8012ad2:	f009 fd17 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+19, X+18, Y+36, TFT_White);
 8012ad6:	f105 0212 	add.w	r2, r5, #18
 8012ada:	b292      	uxth	r2, r2
 8012adc:	f104 0113 	add.w	r1, r4, #19
 8012ae0:	463b      	mov	r3, r7
 8012ae2:	4610      	mov	r0, r2
 8012ae4:	9600      	str	r6, [sp, #0]
 8012ae6:	b289      	uxth	r1, r1
 8012ae8:	f009 fd0c 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+20, X+19, Y+35, TFT_White);
 8012aec:	f104 0714 	add.w	r7, r4, #20
 8012af0:	f105 0213 	add.w	r2, r5, #19
 8012af4:	b292      	uxth	r2, r2
 8012af6:	b2bf      	uxth	r7, r7
 8012af8:	f104 0323 	add.w	r3, r4, #35	; 0x23
 8012afc:	4639      	mov	r1, r7
 8012afe:	4610      	mov	r0, r2
 8012b00:	9600      	str	r6, [sp, #0]
 8012b02:	b29b      	uxth	r3, r3
 8012b04:	f009 fcfe 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+20, X+20, Y+34, TFT_White);
 8012b08:	f105 0214 	add.w	r2, r5, #20
 8012b0c:	b292      	uxth	r2, r2
 8012b0e:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8012b12:	4639      	mov	r1, r7
 8012b14:	4610      	mov	r0, r2
 8012b16:	9600      	str	r6, [sp, #0]
 8012b18:	b29b      	uxth	r3, r3
 8012b1a:	f009 fcf3 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+21, X+21, Y+33, TFT_White);
 8012b1e:	f104 0821 	add.w	r8, r4, #33	; 0x21
 8012b22:	f105 0215 	add.w	r2, r5, #21
 8012b26:	b292      	uxth	r2, r2
 8012b28:	fa1f f888 	uxth.w	r8, r8
 8012b2c:	f104 0115 	add.w	r1, r4, #21
 8012b30:	4643      	mov	r3, r8
 8012b32:	4610      	mov	r0, r2
 8012b34:	9600      	str	r6, [sp, #0]
 8012b36:	b289      	uxth	r1, r1
 8012b38:	f009 fce4 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+22, X+22, Y+33, TFT_White);
 8012b3c:	f104 0716 	add.w	r7, r4, #22
 8012b40:	f105 0216 	add.w	r2, r5, #22
 8012b44:	b292      	uxth	r2, r2
 8012b46:	b2bf      	uxth	r7, r7
 8012b48:	4643      	mov	r3, r8
 8012b4a:	4639      	mov	r1, r7
 8012b4c:	4610      	mov	r0, r2
 8012b4e:	9600      	str	r6, [sp, #0]
 8012b50:	f009 fcd8 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+22, X+23, Y+32, TFT_White);
 8012b54:	f105 0217 	add.w	r2, r5, #23
 8012b58:	b292      	uxth	r2, r2
 8012b5a:	f104 0320 	add.w	r3, r4, #32
 8012b5e:	4639      	mov	r1, r7
 8012b60:	4610      	mov	r0, r2
 8012b62:	9600      	str	r6, [sp, #0]
 8012b64:	b29b      	uxth	r3, r3
 8012b66:	f009 fccd 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+23, X+24, Y+31, TFT_White);
 8012b6a:	f104 081f 	add.w	r8, r4, #31
 8012b6e:	f105 0218 	add.w	r2, r5, #24
 8012b72:	b292      	uxth	r2, r2
 8012b74:	fa1f f888 	uxth.w	r8, r8
 8012b78:	f104 0117 	add.w	r1, r4, #23
 8012b7c:	4643      	mov	r3, r8
 8012b7e:	4610      	mov	r0, r2
 8012b80:	9600      	str	r6, [sp, #0]
 8012b82:	b289      	uxth	r1, r1
 8012b84:	f009 fcbe 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+24, X+25, Y+31, TFT_White);
 8012b88:	f104 0718 	add.w	r7, r4, #24
 8012b8c:	f105 0219 	add.w	r2, r5, #25
 8012b90:	b292      	uxth	r2, r2
 8012b92:	b2bf      	uxth	r7, r7
 8012b94:	4643      	mov	r3, r8
 8012b96:	4639      	mov	r1, r7
 8012b98:	4610      	mov	r0, r2
 8012b9a:	9600      	str	r6, [sp, #0]
 8012b9c:	f009 fcb2 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+24, X+26, Y+30, TFT_White);
 8012ba0:	f105 021a 	add.w	r2, r5, #26
 8012ba4:	b292      	uxth	r2, r2
 8012ba6:	f104 031e 	add.w	r3, r4, #30
 8012baa:	4639      	mov	r1, r7
 8012bac:	4610      	mov	r0, r2
 8012bae:	9600      	str	r6, [sp, #0]
 8012bb0:	b29b      	uxth	r3, r3
 8012bb2:	f009 fca7 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+25, X+27, Y+29, TFT_White);
 8012bb6:	f104 0819 	add.w	r8, r4, #25
 8012bba:	f105 021b 	add.w	r2, r5, #27
 8012bbe:	b292      	uxth	r2, r2
 8012bc0:	fa1f f888 	uxth.w	r8, r8
 8012bc4:	f104 031d 	add.w	r3, r4, #29
 8012bc8:	4641      	mov	r1, r8
 8012bca:	4610      	mov	r0, r2
 8012bcc:	9600      	str	r6, [sp, #0]
 8012bce:	b29b      	uxth	r3, r3
 8012bd0:	f009 fc98 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+28, Y+25, X+28, Y+28, TFT_White);
 8012bd4:	f104 071c 	add.w	r7, r4, #28
 8012bd8:	f105 021c 	add.w	r2, r5, #28
 8012bdc:	b292      	uxth	r2, r2
 8012bde:	b2bf      	uxth	r7, r7
 8012be0:	463b      	mov	r3, r7
 8012be2:	4641      	mov	r1, r8
 8012be4:	4610      	mov	r0, r2
 8012be6:	9600      	str	r6, [sp, #0]
 8012be8:	f009 fc8c 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+26, X+29, Y+28, TFT_White);
 8012bec:	f105 021d 	add.w	r2, r5, #29
 8012bf0:	b292      	uxth	r2, r2
 8012bf2:	f104 011a 	add.w	r1, r4, #26
 8012bf6:	463b      	mov	r3, r7
 8012bf8:	4610      	mov	r0, r2
 8012bfa:	9600      	str	r6, [sp, #0]
 8012bfc:	b289      	uxth	r1, r1
 8012bfe:	f009 fc81 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+30, Y+27, X+30, Y+27, TFT_White);
 8012c02:	9600      	str	r6, [sp, #0]
 8012c04:	465b      	mov	r3, fp
 8012c06:	4652      	mov	r2, sl
 8012c08:	4659      	mov	r1, fp
 8012c0a:	4650      	mov	r0, sl
 8012c0c:	f009 fc7a 	bl	801c504 <TFT_DrawLine>
}
 8012c10:	b005      	add	sp, #20
 8012c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	else  TFT_FillRectangle(X, Y, X+54, Y+54, TFT_PAR_IRed);
 8012c16:	f646 0682 	movw	r6, #26754	; 0x6882
 8012c1a:	e68b      	b.n	8012934 <GUI_Button_Measure_Start_Pause+0x20>
 8012c1c:	20005728 	.word	0x20005728

08012c20 <GUI_Button_Measure_deltaE_Small>:

void GUI_Button_Measure_deltaE_Small(uint16_t X, uint16_t Y, uint16_t Active, uint8_t color)
{
 8012c20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c24:	4605      	mov	r5, r0
 8012c26:	460c      	mov	r4, r1
 8012c28:	f100 0623 	add.w	r6, r0, #35	; 0x23
 8012c2c:	f101 0723 	add.w	r7, r1, #35	; 0x23
		if(Active){
 8012c30:	2a00      	cmp	r2, #0
 8012c32:	f000 8111 	beq.w	8012e58 <GUI_Button_Measure_deltaE_Small+0x238>
			TFT_FillRectangle(X, Y, X+35, Y+35, color == 0 ? TFT_Blue_Off:TFT_Green);
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	f241 3276 	movw	r2, #4982	; 0x1376
 8012c3c:	bf18      	it	ne
 8012c3e:	f44f 62fc 	movne.w	r2, #2016	; 0x7e0
 8012c42:	9200      	str	r2, [sp, #0]
		}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
	
	
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8012c44:	f105 080a 	add.w	r8, r5, #10
 8012c48:	f104 0b07 	add.w	fp, r4, #7
 8012c4c:	f104 091e 	add.w	r9, r4, #30
 8012c50:	fa1f f888 	uxth.w	r8, r8
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8012c54:	b2bb      	uxth	r3, r7
 8012c56:	b2b2      	uxth	r2, r6
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8012c58:	fa1f fb8b 	uxth.w	fp, fp
 8012c5c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8012c60:	fa1f f989 	uxth.w	r9, r9
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8012c64:	f105 0a1c 	add.w	sl, r5, #28
 8012c68:	f104 0712 	add.w	r7, r4, #18
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8012c6c:	f009 fca7 	bl	801c5be <TFT_FillRectangle>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8012c70:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8012c72:	464b      	mov	r3, r9
 8012c74:	4642      	mov	r2, r8
 8012c76:	4659      	mov	r1, fp
 8012c78:	4640      	mov	r0, r8
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8012c7a:	fa1f fa8a 	uxth.w	sl, sl
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8012c7e:	9600      	str	r6, [sp, #0]
 8012c80:	f009 fc40 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8012c84:	463b      	mov	r3, r7
 8012c86:	4652      	mov	r2, sl
 8012c88:	4659      	mov	r1, fp
 8012c8a:	4640      	mov	r0, r8
 8012c8c:	9600      	str	r6, [sp, #0]
 8012c8e:	f009 fc39 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+30, X+28, Y+18, TFT_White);
 8012c92:	463b      	mov	r3, r7
 8012c94:	4652      	mov	r2, sl
 8012c96:	4649      	mov	r1, r9
 8012c98:	4640      	mov	r0, r8
 8012c9a:	9600      	str	r6, [sp, #0]
 8012c9c:	f009 fc32 	bl	801c504 <TFT_DrawLine>
	
	//paint
	TFT_DrawLine(X+11, Y+8, X+11, Y+29, TFT_White);
 8012ca0:	f105 020b 	add.w	r2, r5, #11
 8012ca4:	b292      	uxth	r2, r2
 8012ca6:	f104 031d 	add.w	r3, r4, #29
 8012caa:	f104 0108 	add.w	r1, r4, #8
 8012cae:	4610      	mov	r0, r2
 8012cb0:	9600      	str	r6, [sp, #0]
 8012cb2:	b29b      	uxth	r3, r3
 8012cb4:	b289      	uxth	r1, r1
 8012cb6:	f009 fc25 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+9, X+12, Y+28, TFT_White);
 8012cba:	f104 091c 	add.w	r9, r4, #28
 8012cbe:	f105 020c 	add.w	r2, r5, #12
 8012cc2:	b292      	uxth	r2, r2
 8012cc4:	fa1f f989 	uxth.w	r9, r9
 8012cc8:	f104 0109 	add.w	r1, r4, #9
 8012ccc:	464b      	mov	r3, r9
 8012cce:	4610      	mov	r0, r2
 8012cd0:	9600      	str	r6, [sp, #0]
 8012cd2:	b289      	uxth	r1, r1
 8012cd4:	f009 fc16 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+10, X+13, Y+28, TFT_White);
 8012cd8:	f104 080a 	add.w	r8, r4, #10
 8012cdc:	f105 020d 	add.w	r2, r5, #13
 8012ce0:	b292      	uxth	r2, r2
 8012ce2:	fa1f f888 	uxth.w	r8, r8
 8012ce6:	464b      	mov	r3, r9
 8012ce8:	4641      	mov	r1, r8
 8012cea:	4610      	mov	r0, r2
 8012cec:	9600      	str	r6, [sp, #0]
 8012cee:	f009 fc09 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+10, X+14, Y+27, TFT_White);
 8012cf2:	f105 020e 	add.w	r2, r5, #14
 8012cf6:	b292      	uxth	r2, r2
 8012cf8:	f104 031b 	add.w	r3, r4, #27
 8012cfc:	4641      	mov	r1, r8
 8012cfe:	4610      	mov	r0, r2
 8012d00:	9600      	str	r6, [sp, #0]
 8012d02:	b29b      	uxth	r3, r3
 8012d04:	f009 fbfe 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+11, X+15, Y+26, TFT_White);
 8012d08:	f104 091a 	add.w	r9, r4, #26
 8012d0c:	f105 020f 	add.w	r2, r5, #15
 8012d10:	b292      	uxth	r2, r2
 8012d12:	fa1f f989 	uxth.w	r9, r9
 8012d16:	f104 010b 	add.w	r1, r4, #11
 8012d1a:	464b      	mov	r3, r9
 8012d1c:	4610      	mov	r0, r2
 8012d1e:	9600      	str	r6, [sp, #0]
 8012d20:	b289      	uxth	r1, r1
 8012d22:	f009 fbef 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+12, X+16, Y+26, TFT_White);
 8012d26:	f104 080c 	add.w	r8, r4, #12
 8012d2a:	f105 0210 	add.w	r2, r5, #16
 8012d2e:	b292      	uxth	r2, r2
 8012d30:	fa1f f888 	uxth.w	r8, r8
 8012d34:	464b      	mov	r3, r9
 8012d36:	4641      	mov	r1, r8
 8012d38:	4610      	mov	r0, r2
 8012d3a:	9600      	str	r6, [sp, #0]
 8012d3c:	f009 fbe2 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+12, X+17, Y+25, TFT_White);
 8012d40:	f105 0211 	add.w	r2, r5, #17
 8012d44:	b292      	uxth	r2, r2
 8012d46:	f104 0319 	add.w	r3, r4, #25
 8012d4a:	4641      	mov	r1, r8
 8012d4c:	4610      	mov	r0, r2
 8012d4e:	9600      	str	r6, [sp, #0]
 8012d50:	b29b      	uxth	r3, r3
 8012d52:	f009 fbd7 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+13, X+18, Y+24, TFT_White);
 8012d56:	f105 0212 	add.w	r2, r5, #18
 8012d5a:	b292      	uxth	r2, r2
 8012d5c:	f104 0318 	add.w	r3, r4, #24
 8012d60:	f104 010d 	add.w	r1, r4, #13
 8012d64:	4610      	mov	r0, r2
 8012d66:	9600      	str	r6, [sp, #0]
 8012d68:	b29b      	uxth	r3, r3
 8012d6a:	b289      	uxth	r1, r1
 8012d6c:	f009 fbca 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+14, X+19, Y+23, TFT_White);
 8012d70:	f104 080e 	add.w	r8, r4, #14
 8012d74:	f105 0213 	add.w	r2, r5, #19
 8012d78:	f104 0917 	add.w	r9, r4, #23
 8012d7c:	b292      	uxth	r2, r2
 8012d7e:	fa1f f888 	uxth.w	r8, r8
 8012d82:	fa1f f989 	uxth.w	r9, r9
 8012d86:	464b      	mov	r3, r9
 8012d88:	4641      	mov	r1, r8
 8012d8a:	4610      	mov	r0, r2
 8012d8c:	9600      	str	r6, [sp, #0]
 8012d8e:	f009 fbb9 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+14, X+20, Y+23, TFT_White);
 8012d92:	f105 0214 	add.w	r2, r5, #20
 8012d96:	b292      	uxth	r2, r2
 8012d98:	464b      	mov	r3, r9
 8012d9a:	4641      	mov	r1, r8
 8012d9c:	4610      	mov	r0, r2
 8012d9e:	9600      	str	r6, [sp, #0]
 8012da0:	f009 fbb0 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+15, X+21, Y+22, TFT_White);
 8012da4:	f104 080f 	add.w	r8, r4, #15
 8012da8:	f105 0215 	add.w	r2, r5, #21
 8012dac:	f104 0916 	add.w	r9, r4, #22
 8012db0:	b292      	uxth	r2, r2
 8012db2:	fa1f f888 	uxth.w	r8, r8
 8012db6:	fa1f f989 	uxth.w	r9, r9
 8012dba:	464b      	mov	r3, r9
 8012dbc:	4641      	mov	r1, r8
 8012dbe:	4610      	mov	r0, r2
 8012dc0:	9600      	str	r6, [sp, #0]
 8012dc2:	f009 fb9f 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+15, X+22, Y+22, TFT_White);
 8012dc6:	f105 0216 	add.w	r2, r5, #22
 8012dca:	b292      	uxth	r2, r2
 8012dcc:	464b      	mov	r3, r9
 8012dce:	4641      	mov	r1, r8
 8012dd0:	4610      	mov	r0, r2
 8012dd2:	9600      	str	r6, [sp, #0]
 8012dd4:	f009 fb96 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+16, X+23, Y+21, TFT_White);
 8012dd8:	f104 0810 	add.w	r8, r4, #16
 8012ddc:	f105 0217 	add.w	r2, r5, #23
 8012de0:	b292      	uxth	r2, r2
 8012de2:	fa1f f888 	uxth.w	r8, r8
 8012de6:	f104 0315 	add.w	r3, r4, #21
 8012dea:	4641      	mov	r1, r8
 8012dec:	4610      	mov	r0, r2
 8012dee:	9600      	str	r6, [sp, #0]
 8012df0:	b29b      	uxth	r3, r3
 8012df2:	f009 fb87 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+16, X+24, Y+20, TFT_White);
 8012df6:	f104 0914 	add.w	r9, r4, #20
 8012dfa:	f105 0218 	add.w	r2, r5, #24
 8012dfe:	b292      	uxth	r2, r2
 8012e00:	fa1f f989 	uxth.w	r9, r9
 8012e04:	464b      	mov	r3, r9
 8012e06:	4641      	mov	r1, r8
 8012e08:	4610      	mov	r0, r2
 8012e0a:	9600      	str	r6, [sp, #0]
 8012e0c:	f009 fb7a 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+17, X+25, Y+20, TFT_White);
 8012e10:	f104 0811 	add.w	r8, r4, #17
 8012e14:	f105 0219 	add.w	r2, r5, #25
 8012e18:	b292      	uxth	r2, r2
 8012e1a:	fa1f f888 	uxth.w	r8, r8
 8012e1e:	464b      	mov	r3, r9
 8012e20:	4641      	mov	r1, r8
 8012e22:	4610      	mov	r0, r2
 8012e24:	9600      	str	r6, [sp, #0]
 8012e26:	f009 fb6d 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+17, X+26, Y+19, TFT_White);
 8012e2a:	3413      	adds	r4, #19
 8012e2c:	f105 021a 	add.w	r2, r5, #26
 8012e30:	b292      	uxth	r2, r2
 8012e32:	b2a4      	uxth	r4, r4
 8012e34:	4623      	mov	r3, r4
 8012e36:	4641      	mov	r1, r8
 8012e38:	4610      	mov	r0, r2
 8012e3a:	9600      	str	r6, [sp, #0]
 8012e3c:	f009 fb62 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+18, X+27, Y+19, TFT_White);
 8012e40:	f105 021b 	add.w	r2, r5, #27
 8012e44:	b292      	uxth	r2, r2
 8012e46:	9600      	str	r6, [sp, #0]
 8012e48:	4623      	mov	r3, r4
 8012e4a:	4639      	mov	r1, r7
 8012e4c:	4610      	mov	r0, r2
 8012e4e:	f009 fb59 	bl	801c504 <TFT_DrawLine>
}
 8012e52:	b003      	add	sp, #12
 8012e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8012e58:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8012e5c:	9300      	str	r3, [sp, #0]
 8012e5e:	e6f1      	b.n	8012c44 <GUI_Button_Measure_deltaE_Small+0x24>

08012e60 <GUI_CheckBox>:

void GUI_CheckBox(uint16_t X, uint16_t Y, uint16_t Check)
{
 8012e60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8012e64:	f101 0323 	add.w	r3, r1, #35	; 0x23
{
 8012e68:	4616      	mov	r6, r2
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8012e6a:	f241 3876 	movw	r8, #4982	; 0x1376
 8012e6e:	f100 0223 	add.w	r2, r0, #35	; 0x23
 8012e72:	f8cd 8000 	str.w	r8, [sp]
 8012e76:	b29b      	uxth	r3, r3
 8012e78:	b292      	uxth	r2, r2
{
 8012e7a:	4604      	mov	r4, r0
 8012e7c:	460d      	mov	r5, r1
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8012e7e:	f009 fbb6 	bl	801c5ee <TFT_DrawRectangle>
	if(Check)
 8012e82:	b1fe      	cbz	r6, 8012ec4 <GUI_CheckBox+0x64>
		{
			TFT_DrawLine(X+8, Y+17, X+16, Y+26, TFT_Blue_Off);
 8012e84:	f104 0610 	add.w	r6, r4, #16
 8012e88:	f105 071a 	add.w	r7, r5, #26
 8012e8c:	b2b6      	uxth	r6, r6
 8012e8e:	b2bf      	uxth	r7, r7
 8012e90:	f105 0111 	add.w	r1, r5, #17
 8012e94:	f104 0008 	add.w	r0, r4, #8
 8012e98:	463b      	mov	r3, r7
 8012e9a:	4632      	mov	r2, r6
 8012e9c:	b289      	uxth	r1, r1
 8012e9e:	b280      	uxth	r0, r0
 8012ea0:	f8cd 8000 	str.w	r8, [sp]
 8012ea4:	f009 fb2e 	bl	801c504 <TFT_DrawLine>
			TFT_DrawLine(X+16, Y+26, X+29, Y+5, TFT_Blue_Off);
 8012ea8:	1d6b      	adds	r3, r5, #5
 8012eaa:	f104 021d 	add.w	r2, r4, #29
 8012eae:	f8cd 8000 	str.w	r8, [sp]
 8012eb2:	b29b      	uxth	r3, r3
 8012eb4:	b292      	uxth	r2, r2
 8012eb6:	4639      	mov	r1, r7
 8012eb8:	4630      	mov	r0, r6
 8012eba:	f009 fb23 	bl	801c504 <TFT_DrawLine>
		} else {
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
		}
}
 8012ebe:	b002      	add	sp, #8
 8012ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
 8012ec4:	f105 0320 	add.w	r3, r5, #32
 8012ec8:	f104 0220 	add.w	r2, r4, #32
 8012ecc:	1ca9      	adds	r1, r5, #2
 8012ece:	1ca0      	adds	r0, r4, #2
 8012ed0:	2463      	movs	r4, #99	; 0x63
 8012ed2:	9400      	str	r4, [sp, #0]
 8012ed4:	b29b      	uxth	r3, r3
 8012ed6:	b292      	uxth	r2, r2
 8012ed8:	b289      	uxth	r1, r1
 8012eda:	b280      	uxth	r0, r0
 8012edc:	f009 fb6f 	bl	801c5be <TFT_FillRectangle>
}
 8012ee0:	e7ed      	b.n	8012ebe <GUI_CheckBox+0x5e>

08012ee2 <GUI_RadioBox>:



void GUI_RadioBox(uint16_t X, uint16_t Y, uint16_t Check, uint16_t Active)
{
 8012ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ee6:	f100 0411 	add.w	r4, r0, #17
 8012eea:	f101 0511 	add.w	r5, r1, #17
 8012eee:	4690      	mov	r8, r2
	if(Active){
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 8012ef0:	b226      	sxth	r6, r4
 8012ef2:	b22f      	sxth	r7, r5
	if(Active){
 8012ef4:	b173      	cbz	r3, 8012f14 <GUI_RadioBox+0x32>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 8012ef6:	f241 3376 	movw	r3, #4982	; 0x1376
 8012efa:	220f      	movs	r2, #15
 8012efc:	4639      	mov	r1, r7
 8012efe:	4630      	mov	r0, r6
 8012f00:	f009 fa60 	bl	801c3c4 <TFT_DrawCircle>
	} else
	{
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
	}
	if(Check)
 8012f04:	f1b8 0f00 	cmp.w	r8, #0
 8012f08:	d111      	bne.n	8012f2e <GUI_RadioBox+0x4c>
			if(Active)
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
		} else
		{
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 8012f0a:	2363      	movs	r3, #99	; 0x63
 8012f0c:	220a      	movs	r2, #10
 8012f0e:	b229      	sxth	r1, r5
 8012f10:	b220      	sxth	r0, r4
 8012f12:	e011      	b.n	8012f38 <GUI_RadioBox+0x56>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
 8012f14:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8012f18:	220f      	movs	r2, #15
 8012f1a:	4639      	mov	r1, r7
 8012f1c:	4630      	mov	r0, r6
 8012f1e:	f009 fa51 	bl	801c3c4 <TFT_DrawCircle>
	if(Check)
 8012f22:	f1b8 0f00 	cmp.w	r8, #0
 8012f26:	d0f0      	beq.n	8012f0a <GUI_RadioBox+0x28>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 8012f28:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8012f2c:	e001      	b.n	8012f32 <GUI_RadioBox+0x50>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
 8012f2e:	f241 3376 	movw	r3, #4982	; 0x1376
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 8012f32:	220a      	movs	r2, #10
 8012f34:	4639      	mov	r1, r7
 8012f36:	4630      	mov	r0, r6
		}
}
 8012f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 8012f3c:	f009 bb7b 	b.w	801c636 <TFT_DrawFilledCircle>

08012f40 <GUI_Switch_Button>:

void GUI_Switch_Button(uint16_t X, uint16_t Y, uint8_t Check)
{
 8012f40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012f44:	f101 031c 	add.w	r3, r1, #28
 8012f48:	2663      	movs	r6, #99	; 0x63
{
 8012f4a:	4617      	mov	r7, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012f4c:	f100 0224 	add.w	r2, r0, #36	; 0x24
{
 8012f50:	460d      	mov	r5, r1
 8012f52:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012f54:	9600      	str	r6, [sp, #0]
 8012f56:	b29b      	uxth	r3, r3
 8012f58:	b292      	uxth	r2, r2
 8012f5a:	f009 fb30 	bl	801c5be <TFT_FillRectangle>
 8012f5e:	f105 0611 	add.w	r6, r5, #17
 8012f62:	f105 0318 	add.w	r3, r5, #24
 8012f66:	f105 010a 	add.w	r1, r5, #10
 8012f6a:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8012f6e:	4d1e      	ldr	r5, [pc, #120]	; (8012fe8 <GUI_Switch_Button+0xa8>)
	if(Check)
 8012f70:	b1e7      	cbz	r7, 8012fac <GUI_Switch_Button+0x6c>
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8012f72:	f242 409b 	movw	r0, #9371	; 0x249b
 8012f76:	270a      	movs	r7, #10
 8012f78:	9001      	str	r0, [sp, #4]
 8012f7a:	b29b      	uxth	r3, r3
 8012f7c:	b292      	uxth	r2, r2
 8012f7e:	b289      	uxth	r1, r1
 8012f80:	4620      	mov	r0, r4
 8012f82:	9700      	str	r7, [sp, #0]
 8012f84:	f009 fca0 	bl	801c8c8 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8012f88:	f104 0019 	add.w	r0, r4, #25
 8012f8c:	f241 3376 	movw	r3, #4982	; 0x1376
 8012f90:	463a      	mov	r2, r7
 8012f92:	b231      	sxth	r1, r6
 8012f94:	b200      	sxth	r0, r0
 8012f96:	f009 fb4e 	bl	801c636 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x00){
 8012f9a:	782b      	ldrb	r3, [r5, #0]
 8012f9c:	b91b      	cbnz	r3, 8012fa6 <GUI_Switch_Button+0x66>
				BlueTooth_On(); //Enable Bluetooth
 8012f9e:	f7f6 fd61 	bl	8009a64 <BlueTooth_On>
				BluetoothStat = 0x01;
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	702b      	strb	r3, [r5, #0]
			if(BluetoothStat == 0x01){
				BlueTooth_Off(); //Disable Bluetooth
				BluetoothStat = 0x00;
			}
		}
}
 8012fa6:	b002      	add	sp, #8
 8012fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_LightGrey);
 8012fac:	f04f 080a 	mov.w	r8, #10
 8012fb0:	f24c 6018 	movw	r0, #50712	; 0xc618
 8012fb4:	9001      	str	r0, [sp, #4]
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	b292      	uxth	r2, r2
 8012fba:	b289      	uxth	r1, r1
 8012fbc:	4620      	mov	r0, r4
 8012fbe:	f8cd 8000 	str.w	r8, [sp]
 8012fc2:	f009 fc81 	bl	801c8c8 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8012fc6:	eb04 0008 	add.w	r0, r4, r8
 8012fca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012fce:	4642      	mov	r2, r8
 8012fd0:	b231      	sxth	r1, r6
 8012fd2:	b200      	sxth	r0, r0
 8012fd4:	f009 fb2f 	bl	801c636 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x01){
 8012fd8:	782b      	ldrb	r3, [r5, #0]
 8012fda:	2b01      	cmp	r3, #1
 8012fdc:	d1e3      	bne.n	8012fa6 <GUI_Switch_Button+0x66>
				BlueTooth_Off(); //Disable Bluetooth
 8012fde:	f7f6 fd69 	bl	8009ab4 <BlueTooth_Off>
				BluetoothStat = 0x00;
 8012fe2:	702f      	strb	r7, [r5, #0]
}
 8012fe4:	e7df      	b.n	8012fa6 <GUI_Switch_Button+0x66>
 8012fe6:	bf00      	nop
 8012fe8:	20009d20 	.word	0x20009d20

08012fec <GUI_Switch_ButtonActive>:

void GUI_Switch_ButtonActive(uint16_t X, uint16_t Y, uint8_t Check)
{
 8012fec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012fee:	f101 031c 	add.w	r3, r1, #28
{
 8012ff2:	4616      	mov	r6, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8012ff4:	2763      	movs	r7, #99	; 0x63
 8012ff6:	f100 0224 	add.w	r2, r0, #36	; 0x24
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	b292      	uxth	r2, r2
 8012ffe:	9700      	str	r7, [sp, #0]
{
 8013000:	460d      	mov	r5, r1
 8013002:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8013004:	f009 fadb 	bl	801c5be <TFT_FillRectangle>
	if(Check)
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8013008:	f242 409b 	movw	r0, #9371	; 0x249b
 801300c:	f105 0318 	add.w	r3, r5, #24
 8013010:	f105 010a 	add.w	r1, r5, #10
 8013014:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8013018:	3511      	adds	r5, #17
 801301a:	9001      	str	r0, [sp, #4]
	if(Check)
 801301c:	b19e      	cbz	r6, 8013046 <GUI_Switch_ButtonActive+0x5a>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 801301e:	260a      	movs	r6, #10
 8013020:	b29b      	uxth	r3, r3
 8013022:	4620      	mov	r0, r4
 8013024:	9600      	str	r6, [sp, #0]
 8013026:	b292      	uxth	r2, r2
 8013028:	b289      	uxth	r1, r1
 801302a:	f009 fc4d 	bl	801c8c8 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 801302e:	f104 0019 	add.w	r0, r4, #25
 8013032:	f241 3376 	movw	r3, #4982	; 0x1376
		} else
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8013036:	4632      	mov	r2, r6
 8013038:	b229      	sxth	r1, r5
 801303a:	b200      	sxth	r0, r0
		}
}
 801303c:	b003      	add	sp, #12
 801303e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8013042:	f009 baf8 	b.w	801c636 <TFT_DrawFilledCircle>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8013046:	260a      	movs	r6, #10
 8013048:	b29b      	uxth	r3, r3
 801304a:	4620      	mov	r0, r4
 801304c:	9600      	str	r6, [sp, #0]
 801304e:	b292      	uxth	r2, r2
 8013050:	b289      	uxth	r1, r1
 8013052:	f009 fc39 	bl	801c8c8 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 8013056:	19a0      	adds	r0, r4, r6
 8013058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801305c:	e7eb      	b.n	8013036 <GUI_Switch_ButtonActive+0x4a>

0801305e <GUI_Flag_Ru>:


void GUI_Flag_Ru(uint16_t X, uint16_t Y)
{
 801305e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8013062:	f100 0423 	add.w	r4, r0, #35	; 0x23
 8013066:	1dcf      	adds	r7, r1, #7
{
 8013068:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 801306a:	b2a4      	uxth	r4, r4
 801306c:	b2bf      	uxth	r7, r7
 801306e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013072:	9300      	str	r3, [sp, #0]
 8013074:	4622      	mov	r2, r4
 8013076:	463b      	mov	r3, r7
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8013078:	f105 060e 	add.w	r6, r5, #14
{
 801307c:	4680      	mov	r8, r0
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 801307e:	b2b6      	uxth	r6, r6
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8013080:	f009 fa9d 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8013084:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 8013088:	9300      	str	r3, [sp, #0]
 801308a:	4622      	mov	r2, r4
 801308c:	4633      	mov	r3, r6
 801308e:	4639      	mov	r1, r7
 8013090:	4640      	mov	r0, r8
 8013092:	f009 fa94 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+35, Y+21, TFT_RuRed);
 8013096:	f105 0315 	add.w	r3, r5, #21
 801309a:	f64c 1243 	movw	r2, #51523	; 0xc943
 801309e:	9200      	str	r2, [sp, #0]
 80130a0:	b29b      	uxth	r3, r3
 80130a2:	4622      	mov	r2, r4
 80130a4:	4631      	mov	r1, r6
 80130a6:	4640      	mov	r0, r8
 80130a8:	f009 fa89 	bl	801c5be <TFT_FillRectangle>
}
 80130ac:	b002      	add	sp, #8
 80130ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080130b2 <GUI_Flag_En>:

void GUI_Flag_En(uint16_t X, uint16_t Y)
{
 80130b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 80130b6:	f100 030f 	add.w	r3, r0, #15
{
 80130ba:	b08d      	sub	sp, #52	; 0x34
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 80130bc:	b29b      	uxth	r3, r3
 80130be:	270f      	movs	r7, #15
 80130c0:	9302      	str	r3, [sp, #8]
 80130c2:	f101 0309 	add.w	r3, r1, #9
{
 80130c6:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 80130c8:	b29b      	uxth	r3, r3
 80130ca:	9700      	str	r7, [sp, #0]
 80130cc:	9a02      	ldr	r2, [sp, #8]
 80130ce:	9303      	str	r3, [sp, #12]
{
 80130d0:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 80130d2:	f009 fa74 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y, X+34, Y+9, TFT_Navy);
 80130d6:	f104 0314 	add.w	r3, r4, #20
 80130da:	b29b      	uxth	r3, r3
 80130dc:	f104 0822 	add.w	r8, r4, #34	; 0x22
 80130e0:	fa1f f888 	uxth.w	r8, r8
 80130e4:	9304      	str	r3, [sp, #16]
 80130e6:	9700      	str	r7, [sp, #0]
 80130e8:	9b03      	ldr	r3, [sp, #12]
 80130ea:	9804      	ldr	r0, [sp, #16]
 80130ec:	4642      	mov	r2, r8
 80130ee:	4629      	mov	r1, r5
 80130f0:	f009 fa65 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+15, Y+21, TFT_Navy);
 80130f4:	f105 030e 	add.w	r3, r5, #14
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	f105 0615 	add.w	r6, r5, #21
 80130fe:	b2b6      	uxth	r6, r6
 8013100:	9305      	str	r3, [sp, #20]
 8013102:	9700      	str	r7, [sp, #0]
 8013104:	4633      	mov	r3, r6
 8013106:	9a02      	ldr	r2, [sp, #8]
 8013108:	9905      	ldr	r1, [sp, #20]
 801310a:	4620      	mov	r0, r4
 801310c:	f009 fa57 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y+14, X+34, Y+21, TFT_Navy);
 8013110:	9700      	str	r7, [sp, #0]
 8013112:	4633      	mov	r3, r6
 8013114:	4642      	mov	r2, r8
 8013116:	9905      	ldr	r1, [sp, #20]
 8013118:	9804      	ldr	r0, [sp, #16]
 801311a:	f009 fa50 	bl	801c5be <TFT_FillRectangle>
	
	TFT_DrawLine(X, Y+2, X+29, Y+21, TFT_White);
 801311e:	1cab      	adds	r3, r5, #2
 8013120:	b29b      	uxth	r3, r3
 8013122:	f104 091d 	add.w	r9, r4, #29
 8013126:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801312a:	9307      	str	r3, [sp, #28]
 801312c:	fa1f f989 	uxth.w	r9, r9
 8013130:	9700      	str	r7, [sp, #0]
 8013132:	4633      	mov	r3, r6
 8013134:	464a      	mov	r2, r9
 8013136:	9907      	ldr	r1, [sp, #28]
 8013138:	4620      	mov	r0, r4
 801313a:	f009 f9e3 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X, Y+1, X+29, Y+21, TFT_White);
 801313e:	1c6b      	adds	r3, r5, #1
 8013140:	b29b      	uxth	r3, r3
 8013142:	9308      	str	r3, [sp, #32]
 8013144:	9700      	str	r7, [sp, #0]
 8013146:	4633      	mov	r3, r6
 8013148:	464a      	mov	r2, r9
 801314a:	9908      	ldr	r1, [sp, #32]
 801314c:	4620      	mov	r0, r4
 801314e:	f009 f9d9 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X, Y, X+30, Y+21, TFT_White);
 8013152:	f104 021e 	add.w	r2, r4, #30
 8013156:	9700      	str	r7, [sp, #0]
 8013158:	4633      	mov	r3, r6
 801315a:	4629      	mov	r1, r5
 801315c:	4620      	mov	r0, r4
 801315e:	b292      	uxth	r2, r2
 8013160:	f009 f9d0 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y, X+31, Y+21, TFT_White);
 8013164:	1c63      	adds	r3, r4, #1
 8013166:	b29b      	uxth	r3, r3
 8013168:	f104 0a1f 	add.w	sl, r4, #31
 801316c:	9309      	str	r3, [sp, #36]	; 0x24
 801316e:	fa1f fa8a 	uxth.w	sl, sl
 8013172:	9700      	str	r7, [sp, #0]
 8013174:	4633      	mov	r3, r6
 8013176:	4652      	mov	r2, sl
 8013178:	4629      	mov	r1, r5
 801317a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801317c:	f009 f9c2 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y, X+31, Y+21, TFT_White);
 8013180:	1ca3      	adds	r3, r4, #2
 8013182:	b29b      	uxth	r3, r3
 8013184:	930a      	str	r3, [sp, #40]	; 0x28
 8013186:	9700      	str	r7, [sp, #0]
 8013188:	4633      	mov	r3, r6
 801318a:	4652      	mov	r2, sl
 801318c:	4629      	mov	r1, r5
 801318e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013190:	f009 f9b8 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y, X+32, Y+21, TFT_White);
 8013194:	1ce3      	adds	r3, r4, #3
 8013196:	b29b      	uxth	r3, r3
 8013198:	f104 0920 	add.w	r9, r4, #32
 801319c:	930b      	str	r3, [sp, #44]	; 0x2c
 801319e:	fa1f f989 	uxth.w	r9, r9
 80131a2:	9700      	str	r7, [sp, #0]
 80131a4:	4633      	mov	r3, r6
 80131a6:	464a      	mov	r2, r9
 80131a8:	4629      	mov	r1, r5
 80131aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80131ac:	f009 f9aa 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+33, Y+21, TFT_White);
 80131b0:	1d23      	adds	r3, r4, #4
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	f104 0b21 	add.w	fp, r4, #33	; 0x21
 80131b8:	9306      	str	r3, [sp, #24]
 80131ba:	fa1f fb8b 	uxth.w	fp, fp
 80131be:	9700      	str	r7, [sp, #0]
 80131c0:	4633      	mov	r3, r6
 80131c2:	465a      	mov	r2, fp
 80131c4:	4629      	mov	r1, r5
 80131c6:	9806      	ldr	r0, [sp, #24]
 80131c8:	f009 f99c 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+34, Y+21, TFT_White);
 80131cc:	9700      	str	r7, [sp, #0]
 80131ce:	4633      	mov	r3, r6
 80131d0:	4642      	mov	r2, r8
 80131d2:	4629      	mov	r1, r5
 80131d4:	9806      	ldr	r0, [sp, #24]
 80131d6:	f009 f995 	bl	801c504 <TFT_DrawLine>
	
	TFT_DrawLine(X, Y+21, X+31, Y, TFT_White);
 80131da:	9700      	str	r7, [sp, #0]
 80131dc:	462b      	mov	r3, r5
 80131de:	4652      	mov	r2, sl
 80131e0:	4631      	mov	r1, r6
 80131e2:	4620      	mov	r0, r4
 80131e4:	f009 f98e 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y+21, X+32, Y, TFT_White);
 80131e8:	9700      	str	r7, [sp, #0]
 80131ea:	462b      	mov	r3, r5
 80131ec:	464a      	mov	r2, r9
 80131ee:	4631      	mov	r1, r6
 80131f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80131f2:	f009 f987 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y+21, X+32, Y, TFT_White);
 80131f6:	9700      	str	r7, [sp, #0]
 80131f8:	462b      	mov	r3, r5
 80131fa:	464a      	mov	r2, r9
 80131fc:	4631      	mov	r1, r6
 80131fe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8013200:	f009 f980 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y+21, X+33, Y, TFT_White);
 8013204:	9700      	str	r7, [sp, #0]
 8013206:	462b      	mov	r3, r5
 8013208:	465a      	mov	r2, fp
 801320a:	4631      	mov	r1, r6
 801320c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801320e:	f009 f979 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y+21, X+34, Y, TFT_White);
 8013212:	9700      	str	r7, [sp, #0]
 8013214:	462b      	mov	r3, r5
 8013216:	4642      	mov	r2, r8
 8013218:	4631      	mov	r1, r6
 801321a:	9806      	ldr	r0, [sp, #24]
 801321c:	f009 f972 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+5, Y+21, X+34, Y+1, TFT_White);
 8013220:	1d60      	adds	r0, r4, #5
 8013222:	9700      	str	r7, [sp, #0]
 8013224:	9b08      	ldr	r3, [sp, #32]
 8013226:	4642      	mov	r2, r8
 8013228:	4631      	mov	r1, r6
 801322a:	b280      	uxth	r0, r0
 801322c:	f009 f96a 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+21, X+34, Y+2, TFT_White);
 8013230:	1da0      	adds	r0, r4, #6
 8013232:	9700      	str	r7, [sp, #0]
 8013234:	9b07      	ldr	r3, [sp, #28]
 8013236:	4642      	mov	r2, r8
 8013238:	4631      	mov	r1, r6
 801323a:	b280      	uxth	r0, r0
 801323c:	f009 f962 	bl	801c504 <TFT_DrawLine>
	
	TFT_FillRectangle(X, Y+9, X+34, Y+14, TFT_White);
 8013240:	9700      	str	r7, [sp, #0]
 8013242:	9b05      	ldr	r3, [sp, #20]
 8013244:	9903      	ldr	r1, [sp, #12]
 8013246:	4642      	mov	r2, r8
 8013248:	4620      	mov	r0, r4
 801324a:	f009 f9b8 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X+15, Y, X+20, Y+21, TFT_White);
 801324e:	9700      	str	r7, [sp, #0]
 8013250:	4633      	mov	r3, r6
 8013252:	9a04      	ldr	r2, [sp, #16]
 8013254:	9802      	ldr	r0, [sp, #8]
 8013256:	4629      	mov	r1, r5
 8013258:	f009 f9b1 	bl	801c5be <TFT_FillRectangle>
	
	TFT_FillRectangle(X+16, Y, X+19, Y+21, TFT_Red);
 801325c:	f44f 4778 	mov.w	r7, #63488	; 0xf800
 8013260:	f104 0213 	add.w	r2, r4, #19
 8013264:	f104 0010 	add.w	r0, r4, #16
 8013268:	4633      	mov	r3, r6
 801326a:	4629      	mov	r1, r5
 801326c:	9700      	str	r7, [sp, #0]
 801326e:	b292      	uxth	r2, r2
 8013270:	b280      	uxth	r0, r0
 8013272:	f009 f9a4 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+10, X+34, Y+13, TFT_Red);
 8013276:	f105 030d 	add.w	r3, r5, #13
 801327a:	f105 010a 	add.w	r1, r5, #10
 801327e:	9700      	str	r7, [sp, #0]
 8013280:	b29b      	uxth	r3, r3
 8013282:	4642      	mov	r2, r8
 8013284:	b289      	uxth	r1, r1
 8013286:	4620      	mov	r0, r4
 8013288:	f009 f999 	bl	801c5be <TFT_FillRectangle>
	
}
 801328c:	b00d      	add	sp, #52	; 0x34
 801328e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08013294 <GUI_Bar_Measure>:
#include "GUI_Measure_Elements.h"
#include <math.h>
extern uint8_t Language_status, Mode_EL, preGUI_screen_state, GUI_screen_state;

void GUI_Bar_Measure(uint16_t X, uint16_t Y, float Value)
{
 8013294:	b570      	push	{r4, r5, r6, lr}
 8013296:	ed2d 8b02 	vpush	{d8}
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 801329a:	f101 040a 	add.w	r4, r1, #10
{
 801329e:	b084      	sub	sp, #16
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 80132a0:	b2a4      	uxth	r4, r4
 80132a2:	f100 026e 	add.w	r2, r0, #110	; 0x6e
 80132a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 80132aa:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 80132ac:	9300      	str	r3, [sp, #0]
 80132ae:	b292      	uxth	r2, r2
 80132b0:	4623      	mov	r3, r4
{
 80132b2:	eeb0 8a40 	vmov.f32	s16, s0
 80132b6:	460e      	mov	r6, r1
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 80132b8:	f009 f981 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X, Y, X+110*Value, Y+10, TFT_Blue_Off);
 80132bc:	ee07 5a90 	vmov	s15, r5
 80132c0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80132f0 <GUI_Bar_Measure+0x5c>
 80132c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80132c8:	f241 3376 	movw	r3, #4982	; 0x1376
 80132cc:	eee8 7a07 	vfma.f32	s15, s16, s14
 80132d0:	9300      	str	r3, [sp, #0]
 80132d2:	4631      	mov	r1, r6
 80132d4:	4623      	mov	r3, r4
 80132d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80132da:	4628      	mov	r0, r5
 80132dc:	edcd 7a03 	vstr	s15, [sp, #12]
 80132e0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80132e4:	f009 f96b 	bl	801c5be <TFT_FillRectangle>
}
 80132e8:	b004      	add	sp, #16
 80132ea:	ecbd 8b02 	vpop	{d8}
 80132ee:	bd70      	pop	{r4, r5, r6, pc}
 80132f0:	42dc0000 	.word	0x42dc0000

080132f4 <GUI_Text_E_Measure>:


uint8_t  old_num_e = 10, old_num_n = 10, old_deg_e = 0xFF, old_deg_e_wt = 0xFF;
uint8_t old_meas_type_L = 2, old_numL_e = 10, old_numL_n = 10, old_rulx = 0, old_nan_Ee = 0, old_nan_El = 0; 
void GUI_Text_E_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 80132f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132f8:	ed2d 8b02 	vpush	{d8}
 80132fc:	461e      	mov	r6, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 80132fe:	4bc5      	ldr	r3, [pc, #788]	; (8013614 <GUI_Text_E_Measure+0x320>)
{
 8013300:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8013302:	781a      	ldrb	r2, [r3, #0]
 8013304:	4bc4      	ldr	r3, [pc, #784]	; (8013618 <GUI_Text_E_Measure+0x324>)
 8013306:	781b      	ldrb	r3, [r3, #0]
{
 8013308:	b086      	sub	sp, #24
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 801330a:	429a      	cmp	r2, r3
{
 801330c:	4605      	mov	r5, r0
 801330e:	460c      	mov	r4, r1
 8013310:	eeb0 8a40 	vmov.f32	s16, s0
 8013314:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8013318:	d007      	beq.n	801332a <GUI_Text_E_Measure+0x36>
 801331a:	4ac0      	ldr	r2, [pc, #768]	; (801361c <GUI_Text_E_Measure+0x328>)
 801331c:	2300      	movs	r3, #0
 801331e:	7013      	strb	r3, [r2, #0]
 8013320:	4abf      	ldr	r2, [pc, #764]	; (8013620 <GUI_Text_E_Measure+0x32c>)
 8013322:	7013      	strb	r3, [r2, #0]
 8013324:	4bbf      	ldr	r3, [pc, #764]	; (8013624 <GUI_Text_E_Measure+0x330>)
 8013326:	22ff      	movs	r2, #255	; 0xff
 8013328:	701a      	strb	r2, [r3, #0]
	
	char buffer[9] = {0};
 801332a:	2300      	movs	r3, #0
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 801332c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[9] = {0};
 8013330:	9303      	str	r3, [sp, #12]
 8013332:	9304      	str	r3, [sp, #16]
 8013334:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8013338:	f009 fb70 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801333c:	2063      	movs	r0, #99	; 0x63
 801333e:	f009 fb73 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8013342:	48b9      	ldr	r0, [pc, #740]	; (8013628 <GUI_Text_E_Measure+0x334>)
 8013344:	f009 fb64 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 8013348:	1ca1      	adds	r1, r4, #2
 801334a:	2224      	movs	r2, #36	; 0x24
 801334c:	b289      	uxth	r1, r1
 801334e:	4628      	mov	r0, r5
 8013350:	f009 fc28 	bl	801cba4 <TFT_DrawChar>
	

	if((Value/1000.0) >= 1.0)
 8013354:	ee18 0a10 	vmov	r0, s16
 8013358:	f7ed f90e 	bl	8000578 <__aeabi_f2d>
 801335c:	2200      	movs	r2, #0
 801335e:	4bb3      	ldr	r3, [pc, #716]	; (801362c <GUI_Text_E_Measure+0x338>)
 8013360:	f7ed fa88 	bl	8000874 <__aeabi_ddiv>
 8013364:	2200      	movs	r2, #0
 8013366:	4bb2      	ldr	r3, [pc, #712]	; (8013630 <GUI_Text_E_Measure+0x33c>)
 8013368:	f7ed fbe0 	bl	8000b2c <__aeabi_dcmpge>
 801336c:	b358      	cbz	r0, 80133c6 <GUI_Text_E_Measure+0xd2>
	{
		Value = Value/(1000.0);
 801336e:	eddf 7ab1 	vldr	s15, [pc, #708]	; 8013634 <GUI_Text_E_Measure+0x340>
 8013372:	ee88 8a27 	vdiv.f32	s16, s16, s15
		Value = Value * 1000.0;
		deg = 2;
		meas_type = 0;
	}

	if(nope)
 8013376:	2e00      	cmp	r6, #0
 8013378:	d16e      	bne.n	8013458 <GUI_Text_E_Measure+0x164>
		deg = 1;
 801337a:	2601      	movs	r6, #1
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
				old_nan_El = 1;
			}
		}
	else{
		old_nan_Ee = 0; old_nan_El = 0;
 801337c:	4aa7      	ldr	r2, [pc, #668]	; (801361c <GUI_Text_E_Measure+0x328>)
 801337e:	2300      	movs	r3, #0
 8013380:	7013      	strb	r3, [r2, #0]
 8013382:	4aa7      	ldr	r2, [pc, #668]	; (8013620 <GUI_Text_E_Measure+0x32c>)
 8013384:	7013      	strb	r3, [r2, #0]
		if(energy_light && deg == 2)
 8013386:	2f00      	cmp	r7, #0
 8013388:	f000 811a 	beq.w	80135c0 <GUI_Text_E_Measure+0x2cc>
			Value = floor(Value*10)/10.0;
		}
		else if (energy_light && deg != 2)
		{
			old_nan_Ee = 0;
			Value = floor(Value*100)/100.0;
 801338c:	eddf 7aaa 	vldr	s15, [pc, #680]	; 8013638 <GUI_Text_E_Measure+0x344>
 8013390:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013394:	ee17 0a90 	vmov	r0, s15
 8013398:	f7ed f8ee 	bl	8000578 <__aeabi_f2d>
 801339c:	ec41 0b10 	vmov	d0, r0, r1
 80133a0:	f00f ff32 	bl	8023208 <floor>
 80133a4:	4ba5      	ldr	r3, [pc, #660]	; (801363c <GUI_Text_E_Measure+0x348>)
 80133a6:	2200      	movs	r2, #0
		}
		if(!energy_light)
		{
			old_nan_El = 0;
			Value = floor(Value*10)/10.0;
 80133a8:	ec51 0b10 	vmov	r0, r1, d0
 80133ac:	f7ed fa62 	bl	8000874 <__aeabi_ddiv>
 80133b0:	f7ed fc2e 	bl	8000c10 <__aeabi_d2f>
 80133b4:	ee08 0a10 	vmov	s16, r0
		}



	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80133b8:	f1b8 0f00 	cmp.w	r8, #0
 80133bc:	f040 81a7 	bne.w	801370e <GUI_Text_E_Measure+0x41a>
 80133c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80133c4:	e1a5      	b.n	8013712 <GUI_Text_E_Measure+0x41e>
	else if (energy_light && Value < 1.0)
 80133c6:	2f00      	cmp	r7, #0
 80133c8:	f000 8148 	beq.w	801365c <GUI_Text_E_Measure+0x368>
 80133cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80133d0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80133d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133d8:	4b90      	ldr	r3, [pc, #576]	; (801361c <GUI_Text_E_Measure+0x328>)
 80133da:	f140 81f1 	bpl.w	80137c0 <GUI_Text_E_Measure+0x4cc>
		Value = Value * 1000.0;
 80133de:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8013634 <GUI_Text_E_Measure+0x340>
 80133e2:	ee28 8a00 	vmul.f32	s16, s16, s0
	if(nope)
 80133e6:	2e00      	cmp	r6, #0
 80133e8:	f000 80f9 	beq.w	80135de <GUI_Text_E_Measure+0x2ea>
		deg = 2;
 80133ec:	2602      	movs	r6, #2
			if(energy_light & !old_nan_Ee){
 80133ee:	f8df 822c 	ldr.w	r8, [pc, #556]	; 801361c <GUI_Text_E_Measure+0x328>
 80133f2:	f898 3000 	ldrb.w	r3, [r8]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	bf14      	ite	ne
 80133fa:	2300      	movne	r3, #0
 80133fc:	f007 0301 	andeq.w	r3, r7, #1
 8013400:	2b00      	cmp	r3, #0
 8013402:	f000 812f 	beq.w	8013664 <GUI_Text_E_Measure+0x370>
				TFT_SetTextColor(TFT_White);
 8013406:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801340a:	f009 fb07 	bl	801ca1c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801340e:	2063      	movs	r0, #99	; 0x63
 8013410:	f009 fb0a 	bl	801ca28 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8013414:	488a      	ldr	r0, [pc, #552]	; (8013640 <GUI_Text_E_Measure+0x34c>)
 8013416:	f009 fafb 	bl	801ca10 <TFT_SetFont>
				TFT_FillRectangle(X+35, Y, X+195, Y+26, TFT_Black_Bkgr);
 801341a:	2163      	movs	r1, #99	; 0x63
 801341c:	f104 031a 	add.w	r3, r4, #26
 8013420:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 8013424:	f105 0023 	add.w	r0, r5, #35	; 0x23
 8013428:	9100      	str	r1, [sp, #0]
 801342a:	b29b      	uxth	r3, r3
 801342c:	b292      	uxth	r2, r2
 801342e:	4621      	mov	r1, r4
 8013430:	b280      	uxth	r0, r0
 8013432:	f009 f8c4 	bl	801c5be <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8013436:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013438:	f105 007a 	add.w	r0, r5, #122	; 0x7a
				buffer[0] = '-';buffer[1] = '-';
 801343c:	f88d 300c 	strb.w	r3, [sp, #12]
 8013440:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013444:	aa03      	add	r2, sp, #12
 8013446:	2303      	movs	r3, #3
 8013448:	4621      	mov	r1, r4
 801344a:	b280      	uxth	r0, r0
 801344c:	f009 fc02 	bl	801cc54 <TFT_DisplayString>
				old_nan_El = 1;
 8013450:	2301      	movs	r3, #1
 8013452:	f888 3000 	strb.w	r3, [r8]
 8013456:	e10d      	b.n	8013674 <GUI_Text_E_Measure+0x380>
		deg = 1;
 8013458:	2601      	movs	r6, #1
 801345a:	e7c8      	b.n	80133ee <GUI_Text_E_Measure+0xfa>
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 801345c:	4606      	mov	r6, r0
 801345e:	e7c6      	b.n	80133ee <GUI_Text_E_Measure+0xfa>
	
	if(energy_light && number < old_num_e )
	{
		TFT_FillRectangle(X+40, Y, X+127, Y+26, TFT_Black_Bkgr);
	} 
	else if(!energy_light && number < old_num_n)
 8013460:	4b78      	ldr	r3, [pc, #480]	; (8013644 <GUI_Text_E_Measure+0x350>)
 8013462:	e18d      	b.n	8013780 <GUI_Text_E_Measure+0x48c>
			TFT_SetFont(&Font26RU_arch_small);
			if(deg){
			TFT_DrawCharRus(X+200, Y+4, 'к');
			TFT_DrawCharRus(X+215, Y+4, 'л');
			TFT_DrawCharRus(X+232, Y+4, 'к');} else{
			TFT_DrawCharRus(X+200, Y+4, 'л');
 8013464:	22bb      	movs	r2, #187	; 0xbb
 8013466:	4639      	mov	r1, r7
 8013468:	b280      	uxth	r0, r0
 801346a:	f009 fae3 	bl	801ca34 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 801346e:	22ba      	movs	r2, #186	; 0xba
 8013470:	4639      	mov	r1, r7
 8013472:	fa1f f089 	uxth.w	r0, r9
 8013476:	e139      	b.n	80136ec <GUI_Text_E_Measure+0x3f8>
			}
			
			
			old_deg_e = deg;
	} else if (Language_status == En && !energy_light)
 8013478:	2b01      	cmp	r3, #1
 801347a:	f040 809e 	bne.w	80135ba <GUI_Text_E_Measure+0x2c6>
 801347e:	2f00      	cmp	r7, #0
 8013480:	f040 8081 	bne.w	8013586 <GUI_Text_E_Measure+0x292>
	{
		if(deg != old_deg_e){
 8013484:	4b67      	ldr	r3, [pc, #412]	; (8013624 <GUI_Text_E_Measure+0x330>)
 8013486:	781a      	ldrb	r2, [r3, #0]
 8013488:	42b2      	cmp	r2, r6
 801348a:	4699      	mov	r9, r3
 801348c:	d034      	beq.n	80134f8 <GUI_Text_E_Measure+0x204>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 801348e:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8013492:	f104 031a 	add.w	r3, r4, #26
 8013496:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 801349a:	1ce1      	adds	r1, r4, #3
 801349c:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 80134a0:	b280      	uxth	r0, r0
 80134a2:	f8cd e000 	str.w	lr, [sp]
 80134a6:	b29b      	uxth	r3, r3
 80134a8:	b292      	uxth	r2, r2
 80134aa:	b289      	uxth	r1, r1
 80134ac:	f009 f887 	bl	801c5be <TFT_FillRectangle>
 80134b0:	f104 0804 	add.w	r8, r4, #4
 80134b4:	f105 0ac8 	add.w	sl, r5, #200	; 0xc8
			if (deg){
			TFT_SetTextColor(TFT_White);
 80134b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
			if (deg){
 80134bc:	b1fe      	cbz	r6, 80134fe <GUI_Text_E_Measure+0x20a>
			TFT_SetTextColor(TFT_White);
 80134be:	f009 faad 	bl	801ca1c <TFT_SetTextColor>
			TFT_SetFont(&Font26EN_arch_small);
 80134c2:	4861      	ldr	r0, [pc, #388]	; (8013648 <GUI_Text_E_Measure+0x354>)
 80134c4:	f009 faa4 	bl	801ca10 <TFT_SetFont>
			TFT_DrawChar(X+214, Y+4, 'l'-65);
 80134c8:	fa1f f888 	uxth.w	r8, r8
 80134cc:	f105 00d6 	add.w	r0, r5, #214	; 0xd6
 80134d0:	222b      	movs	r2, #43	; 0x2b
 80134d2:	4641      	mov	r1, r8
 80134d4:	b280      	uxth	r0, r0
 80134d6:	f009 fb65 	bl	801cba4 <TFT_DrawChar>
			TFT_DrawChar(X+200, Y+4, 'k'-65);
 80134da:	222a      	movs	r2, #42	; 0x2a
 80134dc:	4641      	mov	r1, r8
 80134de:	fa1f f08a 	uxth.w	r0, sl
 80134e2:	f009 fb5f 	bl	801cba4 <TFT_DrawChar>
			TFT_DrawChar(X+226, Y+4, 'x'-65);
 80134e6:	f105 00e2 	add.w	r0, r5, #226	; 0xe2
 80134ea:	2237      	movs	r2, #55	; 0x37
 80134ec:	4641      	mov	r1, r8
 80134ee:	b280      	uxth	r0, r0
 80134f0:	f009 fb58 	bl	801cba4 <TFT_DrawChar>
			old_rulx = 0;
 80134f4:	4b55      	ldr	r3, [pc, #340]	; (801364c <GUI_Text_E_Measure+0x358>)
 80134f6:	701f      	strb	r7, [r3, #0]
			TFT_DrawChar(X+212, Y+4, 'x'-65);
			
		}
			}
		
		old_deg_e = deg;
 80134f8:	f889 6000 	strb.w	r6, [r9]
 80134fc:	e0fa      	b.n	80136f4 <GUI_Text_E_Measure+0x400>
			TFT_SetTextColor(TFT_White);
 80134fe:	f009 fa8d 	bl	801ca1c <TFT_SetTextColor>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 8013502:	fa1f f888 	uxth.w	r8, r8
			TFT_SetFont(&Font26EN_arch_small);
 8013506:	4850      	ldr	r0, [pc, #320]	; (8013648 <GUI_Text_E_Measure+0x354>)
 8013508:	f009 fa82 	bl	801ca10 <TFT_SetFont>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 801350c:	4641      	mov	r1, r8
 801350e:	fa1f f08a 	uxth.w	r0, sl
 8013512:	222b      	movs	r2, #43	; 0x2b
 8013514:	f009 fb46 	bl	801cba4 <TFT_DrawChar>
			TFT_DrawChar(X+212, Y+4, 'x'-65);
 8013518:	f105 00d4 	add.w	r0, r5, #212	; 0xd4
 801351c:	2237      	movs	r2, #55	; 0x37
 801351e:	4641      	mov	r1, r8
 8013520:	b280      	uxth	r0, r0
 8013522:	f009 fb3f 	bl	801cba4 <TFT_DrawChar>
 8013526:	e7e7      	b.n	80134f8 <GUI_Text_E_Measure+0x204>
	}else if (Language_status == Ru && energy_light)
	{	
		if (deg != old_deg_e_wt)
 8013528:	4f49      	ldr	r7, [pc, #292]	; (8013650 <GUI_Text_E_Measure+0x35c>)
 801352a:	783a      	ldrb	r2, [r7, #0]
 801352c:	42b2      	cmp	r2, r6
 801352e:	d00a      	beq.n	8013546 <GUI_Text_E_Measure+0x252>
		{
			TFT_FillRectangle(230, Y, 270, Y+26, TFT_Black_Bkgr);
 8013530:	2263      	movs	r2, #99	; 0x63
 8013532:	f104 031a 	add.w	r3, r4, #26
 8013536:	9200      	str	r2, [sp, #0]
 8013538:	b29b      	uxth	r3, r3
 801353a:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801353e:	4621      	mov	r1, r4
 8013540:	20e6      	movs	r0, #230	; 0xe6
 8013542:	f009 f83c 	bl	801c5be <TFT_FillRectangle>
		}
		if (deg == 2)
 8013546:	2e02      	cmp	r6, #2
		{
			GUI_TextRu_mW_m2(234, Y);
 8013548:	4621      	mov	r1, r4
 801354a:	f04f 00ea 	mov.w	r0, #234	; 0xea
		if (deg == 2)
 801354e:	d117      	bne.n	8013580 <GUI_Text_E_Measure+0x28c>
			GUI_TextRu_mW_m2(234, Y);
 8013550:	f005 fc54 	bl	8018dfc <GUI_TextRu_mW_m2>
		}
		else
		{
			GUI_TextEn_W_m2(234, Y);
		}
		old_deg_e_wt = deg;
 8013554:	703e      	strb	r6, [r7, #0]
	}
	
		if(energy_light) {
			TFT_SetTextColor(TFT_White);
 8013556:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801355a:	f009 fa5f 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_small);
 801355e:	483d      	ldr	r0, [pc, #244]	; (8013654 <GUI_Text_E_Measure+0x360>)
 8013560:	f009 fa56 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 8013564:	f104 010e 	add.w	r1, r4, #14
 8013568:	f105 0014 	add.w	r0, r5, #20
 801356c:	2265      	movs	r2, #101	; 0x65
	else {
		TFT_SetTextColor(TFT_White);
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 801356e:	b289      	uxth	r1, r1
 8013570:	b280      	uxth	r0, r0
 8013572:	f009 fb17 	bl	801cba4 <TFT_DrawChar>
	}

}
 8013576:	b006      	add	sp, #24
 8013578:	ecbd 8b02 	vpop	{d8}
 801357c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			GUI_TextRu_W_m2(234, Y);
 8013580:	f005 fc88 	bl	8018e94 <GUI_TextRu_W_m2>
 8013584:	e7e6      	b.n	8013554 <GUI_Text_E_Measure+0x260>
		if (deg != old_deg_e_wt)
 8013586:	4f32      	ldr	r7, [pc, #200]	; (8013650 <GUI_Text_E_Measure+0x35c>)
 8013588:	783a      	ldrb	r2, [r7, #0]
 801358a:	42b2      	cmp	r2, r6
 801358c:	d00a      	beq.n	80135a4 <GUI_Text_E_Measure+0x2b0>
			TFT_FillRectangle(230, Y, 270, Y+26, TFT_Black_Bkgr);
 801358e:	2263      	movs	r2, #99	; 0x63
 8013590:	f104 031a 	add.w	r3, r4, #26
 8013594:	9200      	str	r2, [sp, #0]
 8013596:	b29b      	uxth	r3, r3
 8013598:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801359c:	4621      	mov	r1, r4
 801359e:	20e6      	movs	r0, #230	; 0xe6
 80135a0:	f009 f80d 	bl	801c5be <TFT_FillRectangle>
		if (deg == 2)
 80135a4:	2e02      	cmp	r6, #2
			GUI_TextEn_mW_m2(234, Y);
 80135a6:	4621      	mov	r1, r4
 80135a8:	f04f 00ea 	mov.w	r0, #234	; 0xea
		if (deg == 2)
 80135ac:	d102      	bne.n	80135b4 <GUI_Text_E_Measure+0x2c0>
			GUI_TextEn_mW_m2(234, Y);
 80135ae:	f004 fa59 	bl	8017a64 <GUI_TextEn_mW_m2>
 80135b2:	e7cf      	b.n	8013554 <GUI_Text_E_Measure+0x260>
			GUI_TextEn_W_m2(234, Y);
 80135b4:	f004 fa1c 	bl	80179f0 <GUI_TextEn_W_m2>
 80135b8:	e7cc      	b.n	8013554 <GUI_Text_E_Measure+0x260>
		if(energy_light) {
 80135ba:	2f00      	cmp	r7, #0
 80135bc:	d1cb      	bne.n	8013556 <GUI_Text_E_Measure+0x262>
 80135be:	e099      	b.n	80136f4 <GUI_Text_E_Measure+0x400>
			Value = floor(Value*10)/10.0;
 80135c0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80135c4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80135c8:	ee17 0a90 	vmov	r0, s15
 80135cc:	f7ec ffd4 	bl	8000578 <__aeabi_f2d>
 80135d0:	ec41 0b10 	vmov	d0, r0, r1
 80135d4:	f00f fe18 	bl	8023208 <floor>
 80135d8:	2200      	movs	r2, #0
 80135da:	4b1f      	ldr	r3, [pc, #124]	; (8013658 <GUI_Text_E_Measure+0x364>)
 80135dc:	e6e4      	b.n	80133a8 <GUI_Text_E_Measure+0xb4>
			Value = floor(Value*10)/10.0;
 80135de:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80135e2:	ee68 7a27 	vmul.f32	s15, s16, s15
		old_nan_Ee = 0; old_nan_El = 0;
 80135e6:	701e      	strb	r6, [r3, #0]
 80135e8:	4b0d      	ldr	r3, [pc, #52]	; (8013620 <GUI_Text_E_Measure+0x32c>)
			Value = floor(Value*10)/10.0;
 80135ea:	ee17 0a90 	vmov	r0, s15
		old_nan_Ee = 0; old_nan_El = 0;
 80135ee:	701e      	strb	r6, [r3, #0]
			Value = floor(Value*10)/10.0;
 80135f0:	f7ec ffc2 	bl	8000578 <__aeabi_f2d>
 80135f4:	ec41 0b10 	vmov	d0, r0, r1
 80135f8:	f00f fe06 	bl	8023208 <floor>
 80135fc:	2200      	movs	r2, #0
 80135fe:	4b16      	ldr	r3, [pc, #88]	; (8013658 <GUI_Text_E_Measure+0x364>)
 8013600:	ec51 0b10 	vmov	r0, r1, d0
 8013604:	f7ed f936 	bl	8000874 <__aeabi_ddiv>
 8013608:	f7ed fb02 	bl	8000c10 <__aeabi_d2f>
 801360c:	2602      	movs	r6, #2
 801360e:	ee08 0a10 	vmov	s16, r0
 8013612:	e6d1      	b.n	80133b8 <GUI_Text_E_Measure+0xc4>
 8013614:	2000022a 	.word	0x2000022a
 8013618:	20005701 	.word	0x20005701
 801361c:	20005735 	.word	0x20005735
 8013620:	20005736 	.word	0x20005736
 8013624:	2000022d 	.word	0x2000022d
 8013628:	200001e8 	.word	0x200001e8
 801362c:	408f4000 	.word	0x408f4000
 8013630:	3ff00000 	.word	0x3ff00000
 8013634:	447a0000 	.word	0x447a0000
 8013638:	42c80000 	.word	0x42c80000
 801363c:	40590000 	.word	0x40590000
 8013640:	200001f0 	.word	0x200001f0
 8013644:	20000246 	.word	0x20000246
 8013648:	200001f8 	.word	0x200001f8
 801364c:	20005741 	.word	0x20005741
 8013650:	2000022e 	.word	0x2000022e
 8013654:	200001c0 	.word	0x200001c0
 8013658:	40240000 	.word	0x40240000
	if(nope)
 801365c:	2e00      	cmp	r6, #0
 801365e:	f43f ae8d 	beq.w	801337c <GUI_Text_E_Measure+0x88>
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 8013662:	463e      	mov	r6, r7
			else if(!energy_light & !old_nan_El){
 8013664:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80137ec <GUI_Text_E_Measure+0x4f8>
 8013668:	f898 3000 	ldrb.w	r3, [r8]
 801366c:	b913      	cbnz	r3, 8013674 <GUI_Text_E_Measure+0x380>
 801366e:	2f00      	cmp	r7, #0
 8013670:	f43f aec9 	beq.w	8013406 <GUI_Text_E_Measure+0x112>
	if (Language_status == Ru && !energy_light)
 8013674:	4b56      	ldr	r3, [pc, #344]	; (80137d0 <GUI_Text_E_Measure+0x4dc>)
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	2b00      	cmp	r3, #0
 801367a:	f47f aefd 	bne.w	8013478 <GUI_Text_E_Measure+0x184>
 801367e:	2f00      	cmp	r7, #0
 8013680:	f47f af52 	bne.w	8013528 <GUI_Text_E_Measure+0x234>
			if(deg != old_deg_e){
 8013684:	4b53      	ldr	r3, [pc, #332]	; (80137d4 <GUI_Text_E_Measure+0x4e0>)
 8013686:	781a      	ldrb	r2, [r3, #0]
 8013688:	42b2      	cmp	r2, r6
 801368a:	4698      	mov	r8, r3
 801368c:	d030      	beq.n	80136f0 <GUI_Text_E_Measure+0x3fc>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 801368e:	2763      	movs	r7, #99	; 0x63
 8013690:	f104 031a 	add.w	r3, r4, #26
 8013694:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8013698:	1ce1      	adds	r1, r4, #3
 801369a:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 801369e:	b29b      	uxth	r3, r3
 80136a0:	b292      	uxth	r2, r2
 80136a2:	b289      	uxth	r1, r1
 80136a4:	9700      	str	r7, [sp, #0]
 80136a6:	b280      	uxth	r0, r0
 80136a8:	f008 ff89 	bl	801c5be <TFT_FillRectangle>
			TFT_SetTextColor(TFT_White);
 80136ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80136b0:	f009 f9b4 	bl	801ca1c <TFT_SetTextColor>
 80136b4:	1d27      	adds	r7, r4, #4
			TFT_SetFont(&Font26RU_arch_small);
 80136b6:	4848      	ldr	r0, [pc, #288]	; (80137d8 <GUI_Text_E_Measure+0x4e4>)
 80136b8:	f009 f9aa 	bl	801ca10 <TFT_SetFont>
 80136bc:	f105 09d7 	add.w	r9, r5, #215	; 0xd7
 80136c0:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
			TFT_DrawCharRus(X+200, Y+4, 'к');
 80136c4:	b2bf      	uxth	r7, r7
			if(deg){
 80136c6:	2e00      	cmp	r6, #0
 80136c8:	f43f aecc 	beq.w	8013464 <GUI_Text_E_Measure+0x170>
			TFT_DrawCharRus(X+200, Y+4, 'к');
 80136cc:	22ba      	movs	r2, #186	; 0xba
 80136ce:	4639      	mov	r1, r7
 80136d0:	b280      	uxth	r0, r0
 80136d2:	f009 f9af 	bl	801ca34 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'л');
 80136d6:	22bb      	movs	r2, #187	; 0xbb
 80136d8:	4639      	mov	r1, r7
 80136da:	fa1f f089 	uxth.w	r0, r9
 80136de:	f009 f9a9 	bl	801ca34 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+232, Y+4, 'к');} else{
 80136e2:	f105 00e8 	add.w	r0, r5, #232	; 0xe8
 80136e6:	22ba      	movs	r2, #186	; 0xba
 80136e8:	4639      	mov	r1, r7
 80136ea:	b280      	uxth	r0, r0
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 80136ec:	f009 f9a2 	bl	801ca34 <TFT_DrawCharRus>
			old_deg_e = deg;
 80136f0:	f888 6000 	strb.w	r6, [r8]
		TFT_SetTextColor(TFT_White);
 80136f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80136f8:	f009 f990 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetFont(&Font16EN_arch_small);
 80136fc:	4837      	ldr	r0, [pc, #220]	; (80137dc <GUI_Text_E_Measure+0x4e8>)
 80136fe:	f009 f987 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8013702:	f104 010d 	add.w	r1, r4, #13
 8013706:	f105 0017 	add.w	r0, r5, #23
 801370a:	227b      	movs	r2, #123	; 0x7b
 801370c:	e72f      	b.n	801356e <GUI_Text_E_Measure+0x27a>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801370e:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8013712:	f009 f983 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013716:	2063      	movs	r0, #99	; 0x63
 8013718:	f009 f986 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 801371c:	4830      	ldr	r0, [pc, #192]	; (80137e0 <GUI_Text_E_Measure+0x4ec>)
 801371e:	f009 f977 	bl	801ca10 <TFT_SetFont>
		sprintf (buffer, "%.1f", Value);
 8013722:	ee18 0a10 	vmov	r0, s16
 8013726:	f7ec ff27 	bl	8000578 <__aeabi_f2d>
 801372a:	4602      	mov	r2, r0
 801372c:	460b      	mov	r3, r1
 801372e:	a803      	add	r0, sp, #12
 8013730:	492c      	ldr	r1, [pc, #176]	; (80137e4 <GUI_Text_E_Measure+0x4f0>)
 8013732:	f00c fdaf 	bl	8020294 <sprintf>
	uint32_t dec = 10;
 8013736:	220a      	movs	r2, #10
		deg = 1;
 8013738:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 801373a:	f04f 0800 	mov.w	r8, #0
 801373e:	f04f 097a 	mov.w	r9, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 8013742:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8013746:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8013748:	ee07 2a10 	vmov	s14, r2
 801374c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8013750:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8013754:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801375c:	db08      	blt.n	8013770 <GUI_Text_E_Measure+0x47c>
			delta_pos-=23;
 801375e:	f1a9 0917 	sub.w	r9, r9, #23
			number++;
 8013762:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8013766:	434a      	muls	r2, r1
			delta_pos-=23;
 8013768:	fa5f f989 	uxtb.w	r9, r9
			number++;
 801376c:	fa5f f888 	uxtb.w	r8, r8
 8013770:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8013772:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8013776:	d1e7      	bne.n	8013748 <GUI_Text_E_Measure+0x454>
	if(energy_light && number < old_num_e )
 8013778:	2f00      	cmp	r7, #0
 801377a:	f43f ae71 	beq.w	8013460 <GUI_Text_E_Measure+0x16c>
 801377e:	4b1a      	ldr	r3, [pc, #104]	; (80137e8 <GUI_Text_E_Measure+0x4f4>)
	else if(!energy_light && number < old_num_n)
 8013780:	781a      	ldrb	r2, [r3, #0]
 8013782:	4542      	cmp	r2, r8
 8013784:	469a      	mov	sl, r3
 8013786:	d90d      	bls.n	80137a4 <GUI_Text_E_Measure+0x4b0>
		TFT_FillRectangle(X+40, Y, X+127, Y+26, TFT_Black_Bkgr);
 8013788:	2163      	movs	r1, #99	; 0x63
 801378a:	f104 031a 	add.w	r3, r4, #26
 801378e:	f105 027f 	add.w	r2, r5, #127	; 0x7f
 8013792:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8013796:	9100      	str	r1, [sp, #0]
 8013798:	b29b      	uxth	r3, r3
 801379a:	b292      	uxth	r2, r2
 801379c:	4621      	mov	r1, r4
 801379e:	b280      	uxth	r0, r0
 80137a0:	f008 ff0d 	bl	801c5be <TFT_FillRectangle>
	buffer[8] = 0;
 80137a4:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80137a6:	eb05 0009 	add.w	r0, r5, r9
		old_num_n = number;
 80137aa:	f88a 8000 	strb.w	r8, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80137ae:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 80137b0:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80137b4:	4621      	mov	r1, r4
 80137b6:	2303      	movs	r3, #3
 80137b8:	b280      	uxth	r0, r0
 80137ba:	f009 fa4b 	bl	801cc54 <TFT_DisplayString>
 80137be:	e759      	b.n	8013674 <GUI_Text_E_Measure+0x380>
	if(nope)
 80137c0:	2e00      	cmp	r6, #0
 80137c2:	f47f ae4b 	bne.w	801345c <GUI_Text_E_Measure+0x168>
		old_nan_Ee = 0; old_nan_El = 0;
 80137c6:	701e      	strb	r6, [r3, #0]
 80137c8:	4b08      	ldr	r3, [pc, #32]	; (80137ec <GUI_Text_E_Measure+0x4f8>)
 80137ca:	701e      	strb	r6, [r3, #0]
 80137cc:	e5de      	b.n	801338c <GUI_Text_E_Measure+0x98>
 80137ce:	bf00      	nop
 80137d0:	20005703 	.word	0x20005703
 80137d4:	2000022d 	.word	0x2000022d
 80137d8:	20000208 	.word	0x20000208
 80137dc:	200001c0 	.word	0x200001c0
 80137e0:	200001f0 	.word	0x200001f0
 80137e4:	08031d65 	.word	0x08031d65
 80137e8:	20000245 	.word	0x20000245
 80137ec:	20005736 	.word	0x20005736

080137f0 <GUI_Text_L_Measure>:

uint8_t old_nan_Le = 0, old_nan_Ll = 0, old_deg_L = 0xFF, old_deg_L_wt = 0xFF;
void GUI_Text_L_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nope, uint8_t grey)
{
 80137f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137f4:	ed2d 8b02 	vpush	{d8}
 80137f8:	4698      	mov	r8, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 80137fa:	4bc5      	ldr	r3, [pc, #788]	; (8013b10 <GUI_Text_L_Measure+0x320>)
{
 80137fc:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 80137fe:	781a      	ldrb	r2, [r3, #0]
 8013800:	4bc4      	ldr	r3, [pc, #784]	; (8013b14 <GUI_Text_L_Measure+0x324>)
 8013802:	781b      	ldrb	r3, [r3, #0]
 8013804:	429a      	cmp	r2, r3
{
 8013806:	b086      	sub	sp, #24
 8013808:	4604      	mov	r4, r0
 801380a:	460d      	mov	r5, r1
 801380c:	eeb0 8a40 	vmov.f32	s16, s0
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8013810:	d007      	beq.n	8013822 <GUI_Text_L_Measure+0x32>
 8013812:	4ac1      	ldr	r2, [pc, #772]	; (8013b18 <GUI_Text_L_Measure+0x328>)
 8013814:	2300      	movs	r3, #0
 8013816:	7013      	strb	r3, [r2, #0]
 8013818:	4ac0      	ldr	r2, [pc, #768]	; (8013b1c <GUI_Text_L_Measure+0x32c>)
 801381a:	7013      	strb	r3, [r2, #0]
 801381c:	4bc0      	ldr	r3, [pc, #768]	; (8013b20 <GUI_Text_L_Measure+0x330>)
 801381e:	22ff      	movs	r2, #255	; 0xff
 8013820:	701a      	strb	r2, [r3, #0]
	char buffer[9] = {0};
 8013822:	2300      	movs	r3, #0
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
	uint32_t dec = 10;
	
	if((Value/1000.0) >= 1.0)
 8013824:	ee18 0a10 	vmov	r0, s16
	char buffer[9] = {0};
 8013828:	9303      	str	r3, [sp, #12]
 801382a:	9304      	str	r3, [sp, #16]
 801382c:	f88d 3014 	strb.w	r3, [sp, #20]
	if((Value/1000.0) >= 1.0)
 8013830:	f7ec fea2 	bl	8000578 <__aeabi_f2d>
 8013834:	2200      	movs	r2, #0
 8013836:	4bbb      	ldr	r3, [pc, #748]	; (8013b24 <GUI_Text_L_Measure+0x334>)
 8013838:	f7ed f81c 	bl	8000874 <__aeabi_ddiv>
 801383c:	2200      	movs	r2, #0
 801383e:	4bba      	ldr	r3, [pc, #744]	; (8013b28 <GUI_Text_L_Measure+0x338>)
 8013840:	f7ed f974 	bl	8000b2c <__aeabi_dcmpge>
 8013844:	2800      	cmp	r0, #0
 8013846:	d039      	beq.n	80138bc <GUI_Text_L_Measure+0xcc>
	{
		Value = Value/(1000.0);
 8013848:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8013b2c <GUI_Text_L_Measure+0x33c>
 801384c:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 8013850:	2601      	movs	r6, #1
		Value = Value * 1000.0;
		deg = 2;
		meas_type = 0;
	}

	TFT_SetTextColor(TFT_White);
 8013852:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013856:	f009 f8e1 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801385a:	2063      	movs	r0, #99	; 0x63
 801385c:	f009 f8e4 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8013860:	48b3      	ldr	r0, [pc, #716]	; (8013b30 <GUI_Text_L_Measure+0x340>)
 8013862:	f009 f8d5 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 8013866:	1ca9      	adds	r1, r5, #2
 8013868:	4620      	mov	r0, r4
 801386a:	222b      	movs	r2, #43	; 0x2b
 801386c:	b289      	uxth	r1, r1
 801386e:	f009 f999 	bl	801cba4 <TFT_DrawChar>
	
	if(energy_light) {
	TFT_SetFont(&Font16EN_arch_small);
 8013872:	48b0      	ldr	r0, [pc, #704]	; (8013b34 <GUI_Text_L_Measure+0x344>)
	if(energy_light) {
 8013874:	b3a7      	cbz	r7, 80138e0 <GUI_Text_L_Measure+0xf0>
	TFT_SetFont(&Font16EN_arch_small);
 8013876:	f009 f8cb 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 801387a:	f105 010e 	add.w	r1, r5, #14
 801387e:	f104 0014 	add.w	r0, r4, #20
 8013882:	2265      	movs	r2, #101	; 0x65
 8013884:	b289      	uxth	r1, r1
 8013886:	b280      	uxth	r0, r0
 8013888:	f009 f98c 	bl	801cba4 <TFT_DrawChar>
	else {
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+23, Y+13, 'z'+1);
	}
	
	if(nope) 
 801388c:	f1b8 0f00 	cmp.w	r8, #0
 8013890:	d137      	bne.n	8013902 <GUI_Text_L_Measure+0x112>
 8013892:	4ba9      	ldr	r3, [pc, #676]	; (8013b38 <GUI_Text_L_Measure+0x348>)
			buffer[0] = '-';buffer[1] = '-';
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
			old_nan_Ll = 1;}
		}
	else{
	if(energy_light && deg == 2)
 8013894:	2e02      	cmp	r6, #2
	{
		old_nan_Ee = 0;
 8013896:	f883 8000 	strb.w	r8, [r3]
	if(energy_light && deg == 2)
 801389a:	f040 80c1 	bne.w	8013a20 <GUI_Text_L_Measure+0x230>
		Value = floor(Value*100)/100.0;
	}
	if(!energy_light)
	{
		old_nan_El = 0;
		Value = floor(Value*10)/10.0;
 801389e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80138a2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80138a6:	ee17 0a90 	vmov	r0, s15
 80138aa:	f7ec fe65 	bl	8000578 <__aeabi_f2d>
 80138ae:	ec41 0b10 	vmov	d0, r0, r1
 80138b2:	f00f fca9 	bl	8023208 <floor>
 80138b6:	2200      	movs	r2, #0
 80138b8:	4ba0      	ldr	r3, [pc, #640]	; (8013b3c <GUI_Text_L_Measure+0x34c>)
 80138ba:	e0bf      	b.n	8013a3c <GUI_Text_L_Measure+0x24c>
	else if (energy_light && Value < 1.0)
 80138bc:	b167      	cbz	r7, 80138d8 <GUI_Text_L_Measure+0xe8>
 80138be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80138c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80138c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138ca:	d507      	bpl.n	80138dc <GUI_Text_L_Measure+0xec>
		Value = Value * 1000.0;
 80138cc:	eddf 7a97 	vldr	s15, [pc, #604]	; 8013b2c <GUI_Text_L_Measure+0x33c>
		deg = 2;
 80138d0:	2602      	movs	r6, #2
		Value = Value * 1000.0;
 80138d2:	ee28 8a27 	vmul.f32	s16, s16, s15
 80138d6:	e7bc      	b.n	8013852 <GUI_Text_L_Measure+0x62>
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 80138d8:	463e      	mov	r6, r7
 80138da:	e7ba      	b.n	8013852 <GUI_Text_L_Measure+0x62>
 80138dc:	4606      	mov	r6, r0
 80138de:	e7b8      	b.n	8013852 <GUI_Text_L_Measure+0x62>
		TFT_SetFont(&Font16EN_arch_small);
 80138e0:	f009 f896 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 80138e4:	f105 010d 	add.w	r1, r5, #13
 80138e8:	f104 0017 	add.w	r0, r4, #23
 80138ec:	227b      	movs	r2, #123	; 0x7b
 80138ee:	b289      	uxth	r1, r1
 80138f0:	b280      	uxth	r0, r0
 80138f2:	f009 f957 	bl	801cba4 <TFT_DrawChar>
	if(nope) 
 80138f6:	f1b8 0f00 	cmp.w	r8, #0
 80138fa:	d135      	bne.n	8013968 <GUI_Text_L_Measure+0x178>
		old_nan_El = 0;
 80138fc:	4b90      	ldr	r3, [pc, #576]	; (8013b40 <GUI_Text_L_Measure+0x350>)
 80138fe:	701f      	strb	r7, [r3, #0]
 8013900:	e7cd      	b.n	801389e <GUI_Text_L_Measure+0xae>
			if(energy_light & !old_nan_Le){
 8013902:	f8df 8214 	ldr.w	r8, [pc, #532]	; 8013b18 <GUI_Text_L_Measure+0x328>
 8013906:	f898 3000 	ldrb.w	r3, [r8]
 801390a:	2b00      	cmp	r3, #0
 801390c:	bf14      	ite	ne
 801390e:	2300      	movne	r3, #0
 8013910:	f007 0301 	andeq.w	r3, r7, #1
 8013914:	2b00      	cmp	r3, #0
 8013916:	d055      	beq.n	80139c4 <GUI_Text_L_Measure+0x1d4>
			TFT_SetTextColor(TFT_White);
 8013918:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801391c:	f009 f87e 	bl	801ca1c <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8013920:	2063      	movs	r0, #99	; 0x63
 8013922:	f009 f881 	bl	801ca28 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 8013926:	4887      	ldr	r0, [pc, #540]	; (8013b44 <GUI_Text_L_Measure+0x354>)
 8013928:	f009 f872 	bl	801ca10 <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 801392c:	2163      	movs	r1, #99	; 0x63
 801392e:	f105 031a 	add.w	r3, r5, #26
 8013932:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013936:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801393a:	9100      	str	r1, [sp, #0]
 801393c:	b29b      	uxth	r3, r3
 801393e:	b292      	uxth	r2, r2
 8013940:	4629      	mov	r1, r5
 8013942:	b280      	uxth	r0, r0
 8013944:	f008 fe3b 	bl	801c5be <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 8013948:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801394a:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 801394e:	f88d 300c 	strb.w	r3, [sp, #12]
 8013952:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013956:	aa03      	add	r2, sp, #12
 8013958:	2303      	movs	r3, #3
 801395a:	4629      	mov	r1, r5
 801395c:	b280      	uxth	r0, r0
 801395e:	f009 f979 	bl	801cc54 <TFT_DisplayString>
			old_nan_Le = 1;}
 8013962:	2301      	movs	r3, #1
 8013964:	f888 3000 	strb.w	r3, [r8]
			if(!energy_light & !old_nan_Ll){
 8013968:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013b1c <GUI_Text_L_Measure+0x32c>
 801396c:	f898 3000 	ldrb.w	r3, [r8]
 8013970:	bb43      	cbnz	r3, 80139c4 <GUI_Text_L_Measure+0x1d4>
 8013972:	bb3f      	cbnz	r7, 80139c4 <GUI_Text_L_Measure+0x1d4>
			TFT_SetTextColor(TFT_White);
 8013974:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013978:	f009 f850 	bl	801ca1c <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 801397c:	2063      	movs	r0, #99	; 0x63
 801397e:	f009 f853 	bl	801ca28 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 8013982:	4870      	ldr	r0, [pc, #448]	; (8013b44 <GUI_Text_L_Measure+0x354>)
 8013984:	f009 f844 	bl	801ca10 <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8013988:	2163      	movs	r1, #99	; 0x63
 801398a:	f105 031a 	add.w	r3, r5, #26
 801398e:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013992:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013996:	9100      	str	r1, [sp, #0]
 8013998:	b29b      	uxth	r3, r3
 801399a:	b292      	uxth	r2, r2
 801399c:	4629      	mov	r1, r5
 801399e:	b280      	uxth	r0, r0
 80139a0:	f008 fe0d 	bl	801c5be <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 80139a4:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80139a6:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 80139aa:	f88d 300c 	strb.w	r3, [sp, #12]
 80139ae:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80139b2:	aa03      	add	r2, sp, #12
 80139b4:	2303      	movs	r3, #3
 80139b6:	4629      	mov	r1, r5
 80139b8:	b280      	uxth	r0, r0
 80139ba:	f009 f94b 	bl	801cc54 <TFT_DisplayString>
			old_nan_Ll = 1;}
 80139be:	2301      	movs	r3, #1
 80139c0:	f888 3000 	strb.w	r3, [r8]
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
	
}
	if (Language_status == Ru && !energy_light)
 80139c4:	4b60      	ldr	r3, [pc, #384]	; (8013b48 <GUI_Text_L_Measure+0x358>)
 80139c6:	f893 8000 	ldrb.w	r8, [r3]
 80139ca:	f1b8 0f00 	cmp.w	r8, #0
 80139ce:	f040 80d7 	bne.w	8013b80 <GUI_Text_L_Measure+0x390>
 80139d2:	2f00      	cmp	r7, #0
 80139d4:	f040 8112 	bne.w	8013bfc <GUI_Text_L_Measure+0x40c>
 80139d8:	4b51      	ldr	r3, [pc, #324]	; (8013b20 <GUI_Text_L_Measure+0x330>)
	{
		if (deg && old_deg_L != 1){
 80139da:	781a      	ldrb	r2, [r3, #0]
 80139dc:	2e00      	cmp	r6, #0
 80139de:	f000 80bf 	beq.w	8013b60 <GUI_Text_L_Measure+0x370>
 80139e2:	2a01      	cmp	r2, #1
 80139e4:	d017      	beq.n	8013a16 <GUI_Text_L_Measure+0x226>
			old_deg_L = 1;
 80139e6:	2601      	movs	r6, #1
 80139e8:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 80139ea:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80139ee:	f105 031a 	add.w	r3, r5, #26
 80139f2:	1ce9      	adds	r1, r5, #3
 80139f4:	2763      	movs	r7, #99	; 0x63
 80139f6:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 80139fa:	9700      	str	r7, [sp, #0]
 80139fc:	b29b      	uxth	r3, r3
 80139fe:	b292      	uxth	r2, r2
 8013a00:	b289      	uxth	r1, r1
			GUI_TextRu_Cd_m2(X+205, Y, 1);
		}else if(!deg && old_deg_L != 0){
			old_deg_L = 0;
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8013a02:	b280      	uxth	r0, r0
 8013a04:	f008 fddb 	bl	801c5be <TFT_FillRectangle>
			GUI_TextRu_Cd_m2(X+205, Y, 0);
 8013a08:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
 8013a0c:	4632      	mov	r2, r6
 8013a0e:	4629      	mov	r1, r5
 8013a10:	b280      	uxth	r0, r0
 8013a12:	f005 fb4f 	bl	80190b4 <GUI_TextRu_Cd_m2>
		{
			GUI_TextEn_W_m2_sr(X+210, Y);
		}
		old_deg_L_wt = deg;
	}
}
 8013a16:	b006      	add	sp, #24
 8013a18:	ecbd 8b02 	vpop	{d8}
 8013a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		Value = floor(Value*100)/100.0;
 8013a20:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8013b4c <GUI_Text_L_Measure+0x35c>
 8013a24:	ee68 7a27 	vmul.f32	s15, s16, s15
 8013a28:	ee17 0a90 	vmov	r0, s15
 8013a2c:	f7ec fda4 	bl	8000578 <__aeabi_f2d>
 8013a30:	ec41 0b10 	vmov	d0, r0, r1
 8013a34:	f00f fbe8 	bl	8023208 <floor>
 8013a38:	4b45      	ldr	r3, [pc, #276]	; (8013b50 <GUI_Text_L_Measure+0x360>)
 8013a3a:	2200      	movs	r2, #0
 8013a3c:	ec51 0b10 	vmov	r0, r1, d0
 8013a40:	f7ec ff18 	bl	8000874 <__aeabi_ddiv>
 8013a44:	f7ed f8e4 	bl	8000c10 <__aeabi_d2f>
 8013a48:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013a4c:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8013a50:	f249 43d2 	movw	r3, #38098	; 0x94d2
 8013a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013a58:	2800      	cmp	r0, #0
 8013a5a:	bf0c      	ite	eq
 8013a5c:	4610      	moveq	r0, r2
 8013a5e:	4618      	movne	r0, r3
 8013a60:	f008 ffdc 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013a64:	2063      	movs	r0, #99	; 0x63
 8013a66:	f008 ffdf 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8013a6a:	4836      	ldr	r0, [pc, #216]	; (8013b44 <GUI_Text_L_Measure+0x354>)
 8013a6c:	f008 ffd0 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8013a70:	ee18 0a10 	vmov	r0, s16
 8013a74:	f7ec fd80 	bl	8000578 <__aeabi_f2d>
 8013a78:	4602      	mov	r2, r0
 8013a7a:	460b      	mov	r3, r1
 8013a7c:	a803      	add	r0, sp, #12
 8013a7e:	4935      	ldr	r1, [pc, #212]	; (8013b54 <GUI_Text_L_Measure+0x364>)
 8013a80:	f00c fc08 	bl	8020294 <sprintf>
	uint32_t dec = 10;
 8013a84:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8013a86:	2304      	movs	r3, #4
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8013a88:	f04f 0800 	mov.w	r8, #0
 8013a8c:	f04f 0975 	mov.w	r9, #117	; 0x75
		if((Value/(dec)) >= 1.0)
 8013a90:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8013a94:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8013a96:	ee07 2a10 	vmov	s14, r2
 8013a9a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8013a9e:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8013aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013aaa:	db08      	blt.n	8013abe <GUI_Text_L_Measure+0x2ce>
			delta_pos-=23;
 8013aac:	f1a9 0917 	sub.w	r9, r9, #23
			number++;
 8013ab0:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8013ab4:	434a      	muls	r2, r1
			delta_pos-=23;
 8013ab6:	fa5f f989 	uxtb.w	r9, r9
			number++;
 8013aba:	fa5f f888 	uxtb.w	r8, r8
 8013abe:	3b01      	subs	r3, #1
for (uint8_t i = 1; i <= 4; i++)
 8013ac0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8013ac4:	d1e7      	bne.n	8013a96 <GUI_Text_L_Measure+0x2a6>
	if(energy_light && number < old_numL_e )
 8013ac6:	b307      	cbz	r7, 8013b0a <GUI_Text_L_Measure+0x31a>
 8013ac8:	4b23      	ldr	r3, [pc, #140]	; (8013b58 <GUI_Text_L_Measure+0x368>)
	else if(!energy_light && number < old_numL_n)
 8013aca:	781a      	ldrb	r2, [r3, #0]
 8013acc:	4542      	cmp	r2, r8
 8013ace:	469a      	mov	sl, r3
 8013ad0:	d90d      	bls.n	8013aee <GUI_Text_L_Measure+0x2fe>
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8013ad2:	2163      	movs	r1, #99	; 0x63
 8013ad4:	f105 031a 	add.w	r3, r5, #26
 8013ad8:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013adc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8013ae0:	9100      	str	r1, [sp, #0]
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	b292      	uxth	r2, r2
 8013ae6:	4629      	mov	r1, r5
 8013ae8:	b280      	uxth	r0, r0
 8013aea:	f008 fd68 	bl	801c5be <TFT_FillRectangle>
	buffer[8] = 0;
 8013aee:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013af0:	eb04 0009 	add.w	r0, r4, r9
		old_numL_n = number;
 8013af4:	f88a 8000 	strb.w	r8, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013af8:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 8013afa:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013afe:	4629      	mov	r1, r5
 8013b00:	2303      	movs	r3, #3
 8013b02:	b280      	uxth	r0, r0
 8013b04:	f009 f8a6 	bl	801cc54 <TFT_DisplayString>
 8013b08:	e75c      	b.n	80139c4 <GUI_Text_L_Measure+0x1d4>
	else if(!energy_light && number < old_numL_n)
 8013b0a:	4b14      	ldr	r3, [pc, #80]	; (8013b5c <GUI_Text_L_Measure+0x36c>)
 8013b0c:	e7dd      	b.n	8013aca <GUI_Text_L_Measure+0x2da>
 8013b0e:	bf00      	nop
 8013b10:	2000022a 	.word	0x2000022a
 8013b14:	20005701 	.word	0x20005701
 8013b18:	20005738 	.word	0x20005738
 8013b1c:	20005739 	.word	0x20005739
 8013b20:	2000022b 	.word	0x2000022b
 8013b24:	408f4000 	.word	0x408f4000
 8013b28:	3ff00000 	.word	0x3ff00000
 8013b2c:	447a0000 	.word	0x447a0000
 8013b30:	200001e8 	.word	0x200001e8
 8013b34:	200001c0 	.word	0x200001c0
 8013b38:	20005735 	.word	0x20005735
 8013b3c:	40240000 	.word	0x40240000
 8013b40:	20005736 	.word	0x20005736
 8013b44:	200001f0 	.word	0x200001f0
 8013b48:	20005703 	.word	0x20005703
 8013b4c:	42c80000 	.word	0x42c80000
 8013b50:	40590000 	.word	0x40590000
 8013b54:	08031d65 	.word	0x08031d65
 8013b58:	20000233 	.word	0x20000233
 8013b5c:	20000234 	.word	0x20000234
		}else if(!deg && old_deg_L != 0){
 8013b60:	2a00      	cmp	r2, #0
 8013b62:	f43f af58 	beq.w	8013a16 <GUI_Text_L_Measure+0x226>
			old_deg_L = 0;
 8013b66:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8013b68:	2163      	movs	r1, #99	; 0x63
 8013b6a:	f105 031a 	add.w	r3, r5, #26
 8013b6e:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8013b72:	9100      	str	r1, [sp, #0]
 8013b74:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
 8013b78:	b29b      	uxth	r3, r3
 8013b7a:	b292      	uxth	r2, r2
 8013b7c:	4629      	mov	r1, r5
 8013b7e:	e740      	b.n	8013a02 <GUI_Text_L_Measure+0x212>
	else if (Language_status == En && !energy_light)
 8013b80:	f1b8 0f01 	cmp.w	r8, #1
 8013b84:	f47f af47 	bne.w	8013a16 <GUI_Text_L_Measure+0x226>
 8013b88:	2f00      	cmp	r7, #0
 8013b8a:	d153      	bne.n	8013c34 <GUI_Text_L_Measure+0x444>
 8013b8c:	4b37      	ldr	r3, [pc, #220]	; (8013c6c <GUI_Text_L_Measure+0x47c>)
		if (deg && old_deg_L != 1){
 8013b8e:	781a      	ldrb	r2, [r3, #0]
 8013b90:	b1e6      	cbz	r6, 8013bcc <GUI_Text_L_Measure+0x3dc>
 8013b92:	2a01      	cmp	r2, #1
 8013b94:	f43f af3f 	beq.w	8013a16 <GUI_Text_L_Measure+0x226>
			old_deg_L = 1;
 8013b98:	f883 8000 	strb.w	r8, [r3]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 8013b9c:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8013ba0:	f105 031a 	add.w	r3, r5, #26
 8013ba4:	1f69      	subs	r1, r5, #5
 8013ba6:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8013baa:	2663      	movs	r6, #99	; 0x63
 8013bac:	b292      	uxth	r2, r2
 8013bae:	b289      	uxth	r1, r1
 8013bb0:	b280      	uxth	r0, r0
 8013bb2:	9600      	str	r6, [sp, #0]
 8013bb4:	b29b      	uxth	r3, r3
 8013bb6:	f008 fd02 	bl	801c5be <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+210, Y-4, 1);
 8013bba:	1f29      	subs	r1, r5, #4
 8013bbc:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8013bc0:	4642      	mov	r2, r8
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 8013bc2:	b289      	uxth	r1, r1
 8013bc4:	b280      	uxth	r0, r0
 8013bc6:	f004 f843 	bl	8017c50 <GUI_TextEn_cd_m2>
 8013bca:	e724      	b.n	8013a16 <GUI_Text_L_Measure+0x226>
		}else if(!deg && old_deg_L != 0){
 8013bcc:	2a00      	cmp	r2, #0
 8013bce:	f43f af22 	beq.w	8013a16 <GUI_Text_L_Measure+0x226>
			old_deg_L = 0;
 8013bd2:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 8013bd4:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8013bd8:	f105 031a 	add.w	r3, r5, #26
 8013bdc:	1f69      	subs	r1, r5, #5
 8013bde:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8013be2:	2763      	movs	r7, #99	; 0x63
 8013be4:	b292      	uxth	r2, r2
 8013be6:	b289      	uxth	r1, r1
 8013be8:	b280      	uxth	r0, r0
 8013bea:	9700      	str	r7, [sp, #0]
 8013bec:	b29b      	uxth	r3, r3
 8013bee:	f008 fce6 	bl	801c5be <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 8013bf2:	1f29      	subs	r1, r5, #4
 8013bf4:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
 8013bf8:	4632      	mov	r2, r6
 8013bfa:	e7e2      	b.n	8013bc2 <GUI_Text_L_Measure+0x3d2>
		if (deg != old_deg_L_wt)
 8013bfc:	4f1c      	ldr	r7, [pc, #112]	; (8013c70 <GUI_Text_L_Measure+0x480>)
 8013bfe:	783a      	ldrb	r2, [r7, #0]
 8013c00:	42b2      	cmp	r2, r6
 8013c02:	d00a      	beq.n	8013c1a <GUI_Text_L_Measure+0x42a>
			TFT_FillRectangle(230, Y, 270, Y+26, TFT_Black_Bkgr);
 8013c04:	2263      	movs	r2, #99	; 0x63
 8013c06:	f105 031a 	add.w	r3, r5, #26
 8013c0a:	9200      	str	r2, [sp, #0]
 8013c0c:	b29b      	uxth	r3, r3
 8013c0e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8013c12:	4629      	mov	r1, r5
 8013c14:	20e6      	movs	r0, #230	; 0xe6
 8013c16:	f008 fcd2 	bl	801c5be <TFT_FillRectangle>
 8013c1a:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
		if (deg == 2)
 8013c1e:	2e02      	cmp	r6, #2
			GUI_TextRu_mW_m2_sr(X+210, Y);
 8013c20:	4629      	mov	r1, r5
 8013c22:	b280      	uxth	r0, r0
		if (deg == 2)
 8013c24:	d103      	bne.n	8013c2e <GUI_Text_L_Measure+0x43e>
			GUI_TextRu_mW_m2_sr(X+210, Y);
 8013c26:	f005 f9d9 	bl	8018fdc <GUI_TextRu_mW_m2_sr>
		old_deg_L_wt = deg;
 8013c2a:	703e      	strb	r6, [r7, #0]
}
 8013c2c:	e6f3      	b.n	8013a16 <GUI_Text_L_Measure+0x226>
			GUI_TextRu_W_m2_sr(X+210, Y);
 8013c2e:	f005 f973 	bl	8018f18 <GUI_TextRu_W_m2_sr>
 8013c32:	e7fa      	b.n	8013c2a <GUI_Text_L_Measure+0x43a>
		if (deg != old_deg_L_wt)
 8013c34:	4f0e      	ldr	r7, [pc, #56]	; (8013c70 <GUI_Text_L_Measure+0x480>)
 8013c36:	783a      	ldrb	r2, [r7, #0]
 8013c38:	42b2      	cmp	r2, r6
 8013c3a:	d00a      	beq.n	8013c52 <GUI_Text_L_Measure+0x462>
			TFT_FillRectangle(230, Y, 270, Y+26, TFT_Black_Bkgr);
 8013c3c:	2263      	movs	r2, #99	; 0x63
 8013c3e:	f105 031a 	add.w	r3, r5, #26
 8013c42:	9200      	str	r2, [sp, #0]
 8013c44:	b29b      	uxth	r3, r3
 8013c46:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8013c4a:	4629      	mov	r1, r5
 8013c4c:	20e6      	movs	r0, #230	; 0xe6
 8013c4e:	f008 fcb6 	bl	801c5be <TFT_FillRectangle>
 8013c52:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
		if (deg == 2)
 8013c56:	2e02      	cmp	r6, #2
			GUI_TextEn_mW_m2_sr(X+210, Y);
 8013c58:	4629      	mov	r1, r5
 8013c5a:	b280      	uxth	r0, r0
		if (deg == 2)
 8013c5c:	d102      	bne.n	8013c64 <GUI_Text_L_Measure+0x474>
			GUI_TextEn_mW_m2_sr(X+210, Y);
 8013c5e:	f003 ff99 	bl	8017b94 <GUI_TextEn_mW_m2_sr>
 8013c62:	e7e2      	b.n	8013c2a <GUI_Text_L_Measure+0x43a>
			GUI_TextEn_W_m2_sr(X+210, Y);
 8013c64:	f003 ff3e 	bl	8017ae4 <GUI_TextEn_W_m2_sr>
 8013c68:	e7df      	b.n	8013c2a <GUI_Text_L_Measure+0x43a>
 8013c6a:	bf00      	nop
 8013c6c:	2000022b 	.word	0x2000022b
 8013c70:	2000022c 	.word	0x2000022c

08013c74 <GUI_Text_PPF_Measure>:

uint8_t old_numPPF = 10, old_nan_PPF = 0;
void GUI_Text_PPF_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8013c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c78:	ed2d 8b02 	vpush	{d8}
 8013c7c:	4692      	mov	sl, r2
 8013c7e:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8013c80:	4ab1      	ldr	r2, [pc, #708]	; (8013f48 <GUI_Text_PPF_Measure+0x2d4>)
 8013c82:	4bb2      	ldr	r3, [pc, #712]	; (8013f4c <GUI_Text_PPF_Measure+0x2d8>)
 8013c84:	4eb2      	ldr	r6, [pc, #712]	; (8013f50 <GUI_Text_PPF_Measure+0x2dc>)
{	
 8013c86:	4604      	mov	r4, r0
 8013c88:	460d      	mov	r5, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8013c8a:	7810      	ldrb	r0, [r2, #0]
 8013c8c:	7819      	ldrb	r1, [r3, #0]
 8013c8e:	4288      	cmp	r0, r1
{	
 8013c90:	b087      	sub	sp, #28
 8013c92:	4698      	mov	r8, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8013c94:	bf1c      	itt	ne
 8013c96:	2300      	movne	r3, #0
 8013c98:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 8013c9a:	2300      	movs	r3, #0
{	
 8013c9c:	eeb0 8a40 	vmov.f32	s16, s0
 8013ca0:	4691      	mov	r9, r2
	char buffer[9] = {0};
 8013ca2:	9303      	str	r3, [sp, #12]
 8013ca4:	9304      	str	r3, [sp, #16]
 8013ca6:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 122, deg = 0, number = 0;
	uint32_t dec = 10;
	
		if(nope) 
 8013caa:	f1ba 0f00 	cmp.w	sl, #0
 8013cae:	d067      	beq.n	8013d80 <GUI_Text_PPF_Measure+0x10c>
		{	
			if(!old_nan_PPF){
 8013cb0:	7837      	ldrb	r7, [r6, #0]
 8013cb2:	2f00      	cmp	r7, #0
 8013cb4:	f040 80f0 	bne.w	8013e98 <GUI_Text_PPF_Measure+0x224>
				TFT_SetTextColor(TFT_White);
 8013cb8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013cbc:	f008 feae 	bl	801ca1c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8013cc0:	2063      	movs	r0, #99	; 0x63
 8013cc2:	f008 feb1 	bl	801ca28 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8013cc6:	48a3      	ldr	r0, [pc, #652]	; (8013f54 <GUI_Text_PPF_Measure+0x2e0>)
 8013cc8:	f008 fea2 	bl	801ca10 <TFT_SetFont>
				TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);
 8013ccc:	2163      	movs	r1, #99	; 0x63
 8013cce:	f105 031a 	add.w	r3, r5, #26
 8013cd2:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013cd6:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8013cda:	9100      	str	r1, [sp, #0]
 8013cdc:	b29b      	uxth	r3, r3
 8013cde:	b292      	uxth	r2, r2
 8013ce0:	4629      	mov	r1, r5
 8013ce2:	b280      	uxth	r0, r0
 8013ce4:	f008 fc6b 	bl	801c5be <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8013ce8:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8013cea:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8013cee:	f88d 300c 	strb.w	r3, [sp, #12]
 8013cf2:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8013cf6:	aa03      	add	r2, sp, #12
 8013cf8:	2303      	movs	r3, #3
 8013cfa:	4629      	mov	r1, r5
 8013cfc:	b280      	uxth	r0, r0
 8013cfe:	f008 ffa9 	bl	801cc54 <TFT_DisplayString>
				old_nan_PPF = 1;
 8013d02:	2301      	movs	r3, #1
 8013d04:	7033      	strb	r3, [r6, #0]
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	
{
	TFT_SetTextColor(TFT_White);
 8013d06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013d0a:	f008 fe87 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013d0e:	2063      	movs	r0, #99	; 0x63
 8013d10:	f008 fe8a 	bl	801ca28 <TFT_SetBackColor>
	if(Language_status == Ru ){
 8013d14:	4b90      	ldr	r3, [pc, #576]	; (8013f58 <GUI_Text_PPF_Measure+0x2e4>)
 8013d16:	f8df b25c 	ldr.w	fp, [pc, #604]	; 8013f74 <GUI_Text_PPF_Measure+0x300>
 8013d1a:	781b      	ldrb	r3, [r3, #0]
 8013d1c:	1cae      	adds	r6, r5, #2
 8013d1e:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	f040 80c0 	bne.w	8013ea8 <GUI_Text_PPF_Measure+0x234>
			TFT_SetFont(&Font26RU_arch_big);
 8013d28:	488c      	ldr	r0, [pc, #560]	; (8013f5c <GUI_Text_PPF_Measure+0x2e8>)
 8013d2a:	f008 fe71 	bl	801ca10 <TFT_SetFont>
			if(preGUI_screen_state != GUI_screen_state){
 8013d2e:	f899 2000 	ldrb.w	r2, [r9]
 8013d32:	f898 3000 	ldrb.w	r3, [r8]
 8013d36:	429a      	cmp	r2, r3
 8013d38:	d012      	beq.n	8013d60 <GUI_Text_PPF_Measure+0xec>
				TFT_DrawCharRus(X, Y, 'Ф'-17);
 8013d3a:	2293      	movs	r2, #147	; 0x93
 8013d3c:	4629      	mov	r1, r5
 8013d3e:	4620      	mov	r0, r4
 8013d40:	f008 fe78 	bl	801ca34 <TFT_DrawCharRus>
				TFT_DrawCharRus(X+24, Y, 'А'-17);
 8013d44:	f104 0018 	add.w	r0, r4, #24
 8013d48:	227f      	movs	r2, #127	; 0x7f
 8013d4a:	4629      	mov	r1, r5
 8013d4c:	b280      	uxth	r0, r0
 8013d4e:	f008 fe71 	bl	801ca34 <TFT_DrawCharRus>
				TFT_DrawCharRus(X+48, Y, 'Р'-17);}
 8013d52:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8013d56:	228f      	movs	r2, #143	; 0x8f
 8013d58:	4629      	mov	r1, r5
 8013d5a:	b280      	uxth	r0, r0
 8013d5c:	f008 fe6a 	bl	801ca34 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 8013d60:	f89b 3000 	ldrb.w	r3, [fp]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	f000 8099 	beq.w	8013e9c <GUI_Text_PPF_Measure+0x228>
 8013d6a:	463a      	mov	r2, r7
 8013d6c:	b2b1      	uxth	r1, r6
 8013d6e:	fa1f f08a 	uxth.w	r0, sl
 8013d72:	f004 ff4f 	bl	8018c14 <GUI_TextRu_umol>
				TFT_DrawChar(X+5, Y+2, 'P');
				TFT_DrawChar(X+20, Y+2, 'L');}
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
			}
		}	}
}
 8013d76:	b007      	add	sp, #28
 8013d78:	ecbd 8b02 	vpop	{d8}
 8013d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_PPF){TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);}
 8013d80:	7833      	ldrb	r3, [r6, #0]
 8013d82:	b16b      	cbz	r3, 8013da0 <GUI_Text_PPF_Measure+0x12c>
 8013d84:	2163      	movs	r1, #99	; 0x63
 8013d86:	f105 031a 	add.w	r3, r5, #26
 8013d8a:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8013d8e:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8013d92:	9100      	str	r1, [sp, #0]
 8013d94:	b29b      	uxth	r3, r3
 8013d96:	b292      	uxth	r2, r2
 8013d98:	4629      	mov	r1, r5
 8013d9a:	b280      	uxth	r0, r0
 8013d9c:	f008 fc0f 	bl	801c5be <TFT_FillRectangle>
	Value = floor(Value*10)/10.0;
 8013da0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8013da4:	ee68 7a27 	vmul.f32	s15, s16, s15
	old_nan_PPF = 0;
 8013da8:	2300      	movs	r3, #0
	Value = floor(Value*10)/10.0;
 8013daa:	ee17 0a90 	vmov	r0, s15
	old_nan_PPF = 0;
 8013dae:	7033      	strb	r3, [r6, #0]
	Value = floor(Value*10)/10.0;
 8013db0:	f7ec fbe2 	bl	8000578 <__aeabi_f2d>
 8013db4:	ec41 0b10 	vmov	d0, r0, r1
 8013db8:	f00f fa26 	bl	8023208 <floor>
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	ec51 0b10 	vmov	r0, r1, d0
 8013dc2:	4b67      	ldr	r3, [pc, #412]	; (8013f60 <GUI_Text_PPF_Measure+0x2ec>)
 8013dc4:	f7ec fd56 	bl	8000874 <__aeabi_ddiv>
 8013dc8:	f7ec ff22 	bl	8000c10 <__aeabi_d2f>
	if((Value/1000) >= 1.0)
 8013dcc:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8013f64 <GUI_Text_PPF_Measure+0x2f0>
	Value = floor(Value*10)/10.0;
 8013dd0:	ee08 0a10 	vmov	s16, r0
	if((Value/1000) >= 1.0)
 8013dd4:	eec8 7a07 	vdiv.f32	s15, s16, s14
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013dd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ddc:	f249 40d2 	movw	r0, #38098	; 0x94d2
	uint8_t	delta_pos = 122, deg = 0, number = 0;
 8013de0:	267a      	movs	r6, #122	; 0x7a
	if((Value/1000) >= 1.0)
 8013de2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
	uint8_t	delta_pos = 122, deg = 0, number = 0;
 8013de6:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013dee:	bfa8      	it	ge
 8013df0:	eeb0 8a67 	vmovge.f32	s16, s15
 8013df4:	bfac      	ite	ge
 8013df6:	2701      	movge	r7, #1
 8013df8:	2700      	movlt	r7, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8013dfa:	f1bb 0f00 	cmp.w	fp, #0
 8013dfe:	bf08      	it	eq
 8013e00:	4618      	moveq	r0, r3
 8013e02:	f008 fe0b 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8013e06:	2063      	movs	r0, #99	; 0x63
 8013e08:	f008 fe0e 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8013e0c:	4851      	ldr	r0, [pc, #324]	; (8013f54 <GUI_Text_PPF_Measure+0x2e0>)
 8013e0e:	f008 fdff 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8013e12:	ee18 0a10 	vmov	r0, s16
 8013e16:	f7ec fbaf 	bl	8000578 <__aeabi_f2d>
 8013e1a:	4602      	mov	r2, r0
 8013e1c:	460b      	mov	r3, r1
 8013e1e:	a803      	add	r0, sp, #12
 8013e20:	4951      	ldr	r1, [pc, #324]	; (8013f68 <GUI_Text_PPF_Measure+0x2f4>)
 8013e22:	f00c fa37 	bl	8020294 <sprintf>
	uint32_t dec = 10;
 8013e26:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8013e28:	2304      	movs	r3, #4
			dec *= 10;
 8013e2a:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8013e2c:	ee07 2a90 	vmov	s15, r2
 8013e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8013e34:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8013e38:	eef4 7ae8 	vcmpe.f32	s15, s17
 8013e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e40:	db06      	blt.n	8013e50 <GUI_Text_PPF_Measure+0x1dc>
			delta_pos-=23;
 8013e42:	3e17      	subs	r6, #23
			number++;
 8013e44:	f10a 0a01 	add.w	sl, sl, #1
			dec *= 10;
 8013e48:	434a      	muls	r2, r1
			delta_pos-=23;
 8013e4a:	b2f6      	uxtb	r6, r6
			number++;
 8013e4c:	fa5f fa8a 	uxtb.w	sl, sl
 8013e50:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8013e52:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8013e56:	d1e9      	bne.n	8013e2c <GUI_Text_PPF_Measure+0x1b8>
	if(number < old_numPPF )
 8013e58:	4b44      	ldr	r3, [pc, #272]	; (8013f6c <GUI_Text_PPF_Measure+0x2f8>)
 8013e5a:	781a      	ldrb	r2, [r3, #0]
 8013e5c:	4552      	cmp	r2, sl
 8013e5e:	469b      	mov	fp, r3
 8013e60:	d90d      	bls.n	8013e7e <GUI_Text_PPF_Measure+0x20a>
		TFT_FillRectangle(X+70, Y, X+228, Y+26, TFT_Black_Bkgr);
 8013e62:	2163      	movs	r1, #99	; 0x63
 8013e64:	f105 031a 	add.w	r3, r5, #26
 8013e68:	f104 02e4 	add.w	r2, r4, #228	; 0xe4
 8013e6c:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8013e70:	9100      	str	r1, [sp, #0]
 8013e72:	b29b      	uxth	r3, r3
 8013e74:	b292      	uxth	r2, r2
 8013e76:	4629      	mov	r1, r5
 8013e78:	b280      	uxth	r0, r0
 8013e7a:	f008 fba0 	bl	801c5be <TFT_FillRectangle>
	buffer[8] = 0;
 8013e7e:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013e80:	19a0      	adds	r0, r4, r6
	buffer[8] = 0;
 8013e82:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013e86:	aa03      	add	r2, sp, #12
 8013e88:	2303      	movs	r3, #3
 8013e8a:	4629      	mov	r1, r5
 8013e8c:	b280      	uxth	r0, r0
	old_numPPF = number;
 8013e8e:	f88b a000 	strb.w	sl, [fp]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8013e92:	f008 fedf 	bl	801cc54 <TFT_DisplayString>
 8013e96:	e736      	b.n	8013d06 <GUI_Text_PPF_Measure+0x92>
	uint8_t	delta_pos = 122, deg = 0, number = 0;
 8013e98:	461f      	mov	r7, r3
 8013e9a:	e734      	b.n	8013d06 <GUI_Text_PPF_Measure+0x92>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 8013e9c:	b2b1      	uxth	r1, r6
 8013e9e:	fa1f f08a 	uxth.w	r0, sl
 8013ea2:	f004 ff25 	bl	8018cf0 <GUI_TextRu_umol_sr>
 8013ea6:	e766      	b.n	8013d76 <GUI_Text_PPF_Measure+0x102>
			TFT_SetFont(&Font16EN_arch_big);
 8013ea8:	4831      	ldr	r0, [pc, #196]	; (8013f70 <GUI_Text_PPF_Measure+0x2fc>)
 8013eaa:	f008 fdb1 	bl	801ca10 <TFT_SetFont>
			if(Mode_EL){
 8013eae:	f89b 3000 	ldrb.w	r3, [fp]
				if(preGUI_screen_state != GUI_screen_state){
 8013eb2:	f899 2000 	ldrb.w	r2, [r9]
			if(Mode_EL){
 8013eb6:	b333      	cbz	r3, 8013f06 <GUI_Text_PPF_Measure+0x292>
				if(preGUI_screen_state != GUI_screen_state){
 8013eb8:	f898 3000 	ldrb.w	r3, [r8]
 8013ebc:	429a      	cmp	r2, r3
 8013ebe:	d01b      	beq.n	8013ef8 <GUI_Text_PPF_Measure+0x284>
				TFT_DrawChar(X-10, Y+2, 'P');
 8013ec0:	b2b5      	uxth	r5, r6
 8013ec2:	f1a4 000a 	sub.w	r0, r4, #10
 8013ec6:	2250      	movs	r2, #80	; 0x50
 8013ec8:	4629      	mov	r1, r5
 8013eca:	b280      	uxth	r0, r0
 8013ecc:	f008 fe6a 	bl	801cba4 <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 8013ed0:	1d60      	adds	r0, r4, #5
 8013ed2:	2250      	movs	r2, #80	; 0x50
 8013ed4:	4629      	mov	r1, r5
 8013ed6:	b280      	uxth	r0, r0
 8013ed8:	f008 fe64 	bl	801cba4 <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'F');
 8013edc:	f104 0014 	add.w	r0, r4, #20
 8013ee0:	2246      	movs	r2, #70	; 0x46
 8013ee2:	4629      	mov	r1, r5
 8013ee4:	b280      	uxth	r0, r0
 8013ee6:	f008 fe5d 	bl	801cba4 <TFT_DrawChar>
				TFT_DrawChar(X+35, Y+2, 'D');}
 8013eea:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8013eee:	2244      	movs	r2, #68	; 0x44
 8013ef0:	4629      	mov	r1, r5
 8013ef2:	b280      	uxth	r0, r0
 8013ef4:	f008 fe56 	bl	801cba4 <TFT_DrawChar>
				GUI_TextEn_umol(X+200, Y+2, deg);
 8013ef8:	463a      	mov	r2, r7
 8013efa:	b2b1      	uxth	r1, r6
 8013efc:	fa1f f08a 	uxth.w	r0, sl
 8013f00:	f002 fe8a 	bl	8016c18 <GUI_TextEn_umol>
 8013f04:	e737      	b.n	8013d76 <GUI_Text_PPF_Measure+0x102>
				if(preGUI_screen_state != GUI_screen_state){
 8013f06:	f898 3000 	ldrb.w	r3, [r8]
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d014      	beq.n	8013f38 <GUI_Text_PPF_Measure+0x2c4>
				TFT_DrawChar(X-10, Y+2, 'P');
 8013f0e:	b2b5      	uxth	r5, r6
 8013f10:	f1a4 000a 	sub.w	r0, r4, #10
 8013f14:	2250      	movs	r2, #80	; 0x50
 8013f16:	4629      	mov	r1, r5
 8013f18:	b280      	uxth	r0, r0
 8013f1a:	f008 fe43 	bl	801cba4 <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 8013f1e:	1d60      	adds	r0, r4, #5
 8013f20:	2250      	movs	r2, #80	; 0x50
 8013f22:	4629      	mov	r1, r5
 8013f24:	b280      	uxth	r0, r0
 8013f26:	f008 fe3d 	bl	801cba4 <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'L');}
 8013f2a:	f104 0014 	add.w	r0, r4, #20
 8013f2e:	224c      	movs	r2, #76	; 0x4c
 8013f30:	4629      	mov	r1, r5
 8013f32:	b280      	uxth	r0, r0
 8013f34:	f008 fe36 	bl	801cba4 <TFT_DrawChar>
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
 8013f38:	463a      	mov	r2, r7
 8013f3a:	b2b1      	uxth	r1, r6
 8013f3c:	fa1f f08a 	uxth.w	r0, sl
 8013f40:	f002 fed0 	bl	8016ce4 <GUI_TextEn_umol_sr>
}
 8013f44:	e717      	b.n	8013d76 <GUI_Text_PPF_Measure+0x102>
 8013f46:	bf00      	nop
 8013f48:	2000022a 	.word	0x2000022a
 8013f4c:	20005701 	.word	0x20005701
 8013f50:	2000573a 	.word	0x2000573a
 8013f54:	200001f0 	.word	0x200001f0
 8013f58:	20005703 	.word	0x20005703
 8013f5c:	20000200 	.word	0x20000200
 8013f60:	40240000 	.word	0x40240000
 8013f64:	447a0000 	.word	0x447a0000
 8013f68:	08031d65 	.word	0x08031d65
 8013f6c:	20000235 	.word	0x20000235
 8013f70:	200001b0 	.word	0x200001b0
 8013f74:	20000ebc 	.word	0x20000ebc

08013f78 <GUI_Text_PPFRGB_Measure>:
uint8_t old_numPPFR = 10, old_numPPFG = 10, old_numPPFB = 10, old_numPPFFR = 10, test = 0, test2 = 0, delta_pos2 = 140, old_nan_PPFRGB = 0;
float ValueB2 = 10;
void GUI_Text_PPFRGB_Measure(uint16_t X, uint16_t Y, float ValueR, float ValueG, float ValueB, float ValueFR, uint8_t nope, uint8_t grey)
{
 8013f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f7c:	ed2d 8b08 	vpush	{d8-d11}
 8013f80:	4616      	mov	r6, r2
 8013f82:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8013f84:	4aad      	ldr	r2, [pc, #692]	; (801423c <GUI_Text_PPFRGB_Measure+0x2c4>)
 8013f86:	4bae      	ldr	r3, [pc, #696]	; (8014240 <GUI_Text_PPFRGB_Measure+0x2c8>)
 8013f88:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801425c <GUI_Text_PPFRGB_Measure+0x2e4>
{
 8013f8c:	4605      	mov	r5, r0
 8013f8e:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8013f90:	7810      	ldrb	r0, [r2, #0]
 8013f92:	7819      	ldrb	r1, [r3, #0]
{
 8013f94:	b089      	sub	sp, #36	; 0x24
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 8013f96:	4288      	cmp	r0, r1
 8013f98:	9303      	str	r3, [sp, #12]
 8013f9a:	bf1c      	itt	ne
 8013f9c:	2300      	movne	r3, #0
 8013f9e:	f889 3000 	strbne.w	r3, [r9]
	
	char buffer[9] = {0};
 8013fa2:	2300      	movs	r3, #0
{
 8013fa4:	eef0 aa40 	vmov.f32	s21, s0
 8013fa8:	eeb0 ba60 	vmov.f32	s22, s1
 8013fac:	eeb0 8a41 	vmov.f32	s16, s2
 8013fb0:	eeb0 aa61 	vmov.f32	s20, s3
 8013fb4:	9202      	str	r2, [sp, #8]
	char buffer[9] = {0};
 8013fb6:	9305      	str	r3, [sp, #20]
 8013fb8:	9306      	str	r3, [sp, #24]
 8013fba:	f88d 301c 	strb.w	r3, [sp, #28]
	uint8_t	delta_pos = 140, deg = 0, number=0;
	uint32_t dec = 10;

		if(nope) 
 8013fbe:	2e00      	cmp	r6, #0
 8013fc0:	f000 814e 	beq.w	8014260 <GUI_Text_PPFRGB_Measure+0x2e8>
		{	
			if(!old_nan_PPFRGB){
 8013fc4:	f899 7000 	ldrb.w	r7, [r9]
 8013fc8:	2f00      	cmp	r7, #0
 8013fca:	f040 8353 	bne.w	8014674 <GUI_Text_PPFRGB_Measure+0x6fc>
				TFT_SetTextColor(TFT_White);
 8013fce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8013fd2:	f008 fd23 	bl	801ca1c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8013fd6:	2063      	movs	r0, #99	; 0x63
 8013fd8:	f008 fd26 	bl	801ca28 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8013fdc:	f105 0662 	add.w	r6, r5, #98	; 0x62
				TFT_SetFont(&Font26EN_arch_digit);
 8013fe0:	4898      	ldr	r0, [pc, #608]	; (8014244 <GUI_Text_PPFRGB_Measure+0x2cc>)
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8013fe2:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
				TFT_SetFont(&Font26EN_arch_digit);
 8013fe6:	f008 fd13 	bl	801ca10 <TFT_SetFont>
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8013fea:	b2b6      	uxth	r6, r6
 8013fec:	fa1f f888 	uxth.w	r8, r8
 8013ff0:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8013ff4:	f104 0314 	add.w	r3, r4, #20
 8013ff8:	4630      	mov	r0, r6
 8013ffa:	b29b      	uxth	r3, r3
 8013ffc:	4642      	mov	r2, r8
 8013ffe:	4621      	mov	r1, r4
 8014000:	f8cd a000 	str.w	sl, [sp]
 8014004:	f008 fadb 	bl	801c5be <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 8014008:	f104 0329 	add.w	r3, r4, #41	; 0x29
 801400c:	f104 0115 	add.w	r1, r4, #21
 8014010:	4630      	mov	r0, r6
 8014012:	b29b      	uxth	r3, r3
 8014014:	4642      	mov	r2, r8
 8014016:	b289      	uxth	r1, r1
 8014018:	f8cd a000 	str.w	sl, [sp]
 801401c:	f008 facf 	bl	801c5be <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 8014020:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8014024:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8014028:	4630      	mov	r0, r6
 801402a:	b29b      	uxth	r3, r3
 801402c:	4642      	mov	r2, r8
 801402e:	b289      	uxth	r1, r1
 8014030:	f8cd a000 	str.w	sl, [sp]
 8014034:	f008 fac3 	bl	801c5be <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 8014038:	f104 0357 	add.w	r3, r4, #87	; 0x57
 801403c:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8014040:	4630      	mov	r0, r6
 8014042:	b29b      	uxth	r3, r3
 8014044:	4642      	mov	r2, r8
 8014046:	b289      	uxth	r1, r1
 8014048:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801404c:	f105 0675 	add.w	r6, r5, #117	; 0x75
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 8014050:	f008 fab5 	bl	801c5be <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014054:	b2b6      	uxth	r6, r6
				buffer[0] = '-';buffer[1] = '-';
 8014056:	232d      	movs	r3, #45	; 0x2d
 8014058:	f88d 3014 	strb.w	r3, [sp, #20]
 801405c:	f88d 3015 	strb.w	r3, [sp, #21]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8014060:	aa05      	add	r2, sp, #20
 8014062:	2303      	movs	r3, #3
 8014064:	4621      	mov	r1, r4
 8014066:	4630      	mov	r0, r6
 8014068:	f008 fdf4 	bl	801cc54 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+22, (uint8_t *)buffer, LEFT_MODE);
 801406c:	f104 0116 	add.w	r1, r4, #22
 8014070:	2303      	movs	r3, #3
 8014072:	aa05      	add	r2, sp, #20
 8014074:	b289      	uxth	r1, r1
 8014076:	4630      	mov	r0, r6
 8014078:	f008 fdec 	bl	801cc54 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+44, (uint8_t *)buffer, LEFT_MODE);
 801407c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8014080:	2303      	movs	r3, #3
 8014082:	aa05      	add	r2, sp, #20
 8014084:	b289      	uxth	r1, r1
 8014086:	4630      	mov	r0, r6
 8014088:	f008 fde4 	bl	801cc54 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+66, (uint8_t *)buffer, LEFT_MODE);
 801408c:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8014090:	2303      	movs	r3, #3
 8014092:	aa05      	add	r2, sp, #20
 8014094:	b289      	uxth	r1, r1
 8014096:	4630      	mov	r0, r6
 8014098:	f008 fddc 	bl	801cc54 <TFT_DisplayString>
				old_nan_PPFRGB = 1;
 801409c:	2301      	movs	r3, #1
 801409e:	f889 3000 	strb.w	r3, [r9]
	number = 0;
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 80140a2:	9b02      	ldr	r3, [sp, #8]
 80140a4:	781a      	ldrb	r2, [r3, #0]
 80140a6:	9b03      	ldr	r3, [sp, #12]
 80140a8:	781b      	ldrb	r3, [r3, #0]
 80140aa:	429a      	cmp	r2, r3
 80140ac:	f000 80c1 	beq.w	8014232 <GUI_Text_PPFRGB_Measure+0x2ba>
if (Language_status==Ru)
 80140b0:	4e65      	ldr	r6, [pc, #404]	; (8014248 <GUI_Text_PPFRGB_Measure+0x2d0>)
 80140b2:	7833      	ldrb	r3, [r6, #0]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	f040 82e4 	bne.w	8014682 <GUI_Text_PPFRGB_Measure+0x70a>
	{	TFT_SetTextColor(TFT_White);
 80140ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80140be:	f008 fcad 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
 80140c2:	4862      	ldr	r0, [pc, #392]	; (801424c <GUI_Text_PPFRGB_Measure+0x2d4>)
 80140c4:	f008 fca4 	bl	801ca10 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y, 'С');
 80140c8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80140cc:	22a1      	movs	r2, #161	; 0xa1
 80140ce:	4621      	mov	r1, r4
 80140d0:	b280      	uxth	r0, r0
 80140d2:	f008 fcaf 	bl	801ca34 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+5, 'и');
 80140d6:	f104 0805 	add.w	r8, r4, #5
		TFT_SetFont(&Font16RU_arch_small);
 80140da:	485d      	ldr	r0, [pc, #372]	; (8014250 <GUI_Text_PPFRGB_Measure+0x2d8>)
 80140dc:	f008 fc98 	bl	801ca10 <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+5, 'и');
 80140e0:	fa1f f888 	uxth.w	r8, r8
 80140e4:	f105 0036 	add.w	r0, r5, #54	; 0x36
 80140e8:	22b8      	movs	r2, #184	; 0xb8
 80140ea:	4641      	mov	r1, r8
 80140ec:	b280      	uxth	r0, r0
 80140ee:	f008 fca1 	bl	801ca34 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+5, 'н');
 80140f2:	f105 0042 	add.w	r0, r5, #66	; 0x42
 80140f6:	b280      	uxth	r0, r0
 80140f8:	22bd      	movs	r2, #189	; 0xbd
 80140fa:	4641      	mov	r1, r8
 80140fc:	f008 fc9a 	bl	801ca34 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8014100:	4b54      	ldr	r3, [pc, #336]	; (8014254 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8014108:	2b00      	cmp	r3, #0
 801410a:	f000 82b5 	beq.w	8014678 <GUI_Text_PPFRGB_Measure+0x700>
 801410e:	463a      	mov	r2, r7
 8014110:	4621      	mov	r1, r4
 8014112:	b280      	uxth	r0, r0
 8014114:	f004 fd7e 	bl	8018c14 <GUI_TextRu_umol>
	{TFT_SetTextColor(TFT_White);
		GUI_TextEn_Blue(X+34, Y);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
	}
	
	if (Language_status==Ru)
 8014118:	7833      	ldrb	r3, [r6, #0]
 801411a:	2b00      	cmp	r3, #0
 801411c:	f040 82d1 	bne.w	80146c2 <GUI_Text_PPFRGB_Measure+0x74a>
	{	TFT_SetTextColor(TFT_White);
 8014120:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014124:	f008 fc7a 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+22, 'З');
 8014128:	f104 0816 	add.w	r8, r4, #22
		TFT_SetFont(&Font16RU_arch_big);
 801412c:	4847      	ldr	r0, [pc, #284]	; (801424c <GUI_Text_PPFRGB_Measure+0x2d4>)
 801412e:	f008 fc6f 	bl	801ca10 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+22, 'З');
 8014132:	fa1f f888 	uxth.w	r8, r8
 8014136:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801413a:	2297      	movs	r2, #151	; 0x97
 801413c:	4641      	mov	r1, r8
 801413e:	b280      	uxth	r0, r0
 8014140:	f008 fc78 	bl	801ca34 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+27, 'е');
 8014144:	f104 091b 	add.w	r9, r4, #27
		TFT_SetFont(&Font16RU_arch_small);
 8014148:	4841      	ldr	r0, [pc, #260]	; (8014250 <GUI_Text_PPFRGB_Measure+0x2d8>)
 801414a:	f008 fc61 	bl	801ca10 <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+27, 'е');
 801414e:	fa1f f989 	uxth.w	r9, r9
 8014152:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8014156:	22b5      	movs	r2, #181	; 0xb5
 8014158:	4649      	mov	r1, r9
 801415a:	b280      	uxth	r0, r0
 801415c:	f008 fc6a 	bl	801ca34 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+27, 'л');
 8014160:	f105 0042 	add.w	r0, r5, #66	; 0x42
 8014164:	b280      	uxth	r0, r0
 8014166:	22bb      	movs	r2, #187	; 0xbb
 8014168:	4649      	mov	r1, r9
 801416a:	f008 fc63 	bl	801ca34 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 801416e:	4b39      	ldr	r3, [pc, #228]	; (8014254 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8014176:	2b00      	cmp	r3, #0
 8014178:	f000 829e 	beq.w	80146b8 <GUI_Text_PPFRGB_Measure+0x740>
 801417c:	463a      	mov	r2, r7
 801417e:	4641      	mov	r1, r8
 8014180:	b280      	uxth	r0, r0
 8014182:	f004 fd47 	bl	8018c14 <GUI_TextRu_umol>
		GUI_TextEn_Green(X+17, Y+22);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
	}
	
	
	if (Language_status==Ru)
 8014186:	7833      	ldrb	r3, [r6, #0]
 8014188:	f105 0925 	add.w	r9, r5, #37	; 0x25
 801418c:	2b00      	cmp	r3, #0
 801418e:	f040 82bc 	bne.w	801470a <GUI_Text_PPFRGB_Measure+0x792>
	{	TFT_SetTextColor(TFT_White);
 8014192:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014196:	f008 fc41 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+44, 'К');
 801419a:	f104 082c 	add.w	r8, r4, #44	; 0x2c
		TFT_SetFont(&Font16RU_arch_big);
 801419e:	482b      	ldr	r0, [pc, #172]	; (801424c <GUI_Text_PPFRGB_Measure+0x2d4>)
 80141a0:	f008 fc36 	bl	801ca10 <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+44, 'К');
 80141a4:	fa1f f888 	uxth.w	r8, r8
 80141a8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80141ac:	229a      	movs	r2, #154	; 0x9a
 80141ae:	4641      	mov	r1, r8
 80141b0:	b280      	uxth	r0, r0
 80141b2:	f008 fc3f 	bl	801ca34 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
 80141b6:	4826      	ldr	r0, [pc, #152]	; (8014250 <GUI_Text_PPFRGB_Measure+0x2d8>)
 80141b8:	f008 fc2a 	bl	801ca10 <TFT_SetFont>
		TFT_DrawCharRus(X+55, Y+49, 'р');
 80141bc:	f104 0131 	add.w	r1, r4, #49	; 0x31
 80141c0:	f105 0037 	add.w	r0, r5, #55	; 0x37
 80141c4:	b280      	uxth	r0, r0
 80141c6:	2280      	movs	r2, #128	; 0x80
 80141c8:	b289      	uxth	r1, r1
 80141ca:	f008 fc33 	bl	801ca34 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 80141ce:	4b21      	ldr	r3, [pc, #132]	; (8014254 <GUI_Text_PPFRGB_Measure+0x2dc>)
 80141d0:	781b      	ldrb	r3, [r3, #0]
 80141d2:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	f000 8292 	beq.w	8014700 <GUI_Text_PPFRGB_Measure+0x788>
 80141dc:	463a      	mov	r2, r7
 80141de:	4641      	mov	r1, r8
 80141e0:	b280      	uxth	r0, r0
 80141e2:	f004 fd17 	bl	8018c14 <GUI_TextRu_umol>
	else if (Language_status==En)
	{	TFT_SetTextColor(TFT_White);
		GUI_TextEn_Red(X+37, Y+44);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
	}
	TFT_SetTextColor(TFT_White);
 80141e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+37, Y+66, 'F');
 80141ea:	3442      	adds	r4, #66	; 0x42
	TFT_SetTextColor(TFT_White);
 80141ec:	f008 fc16 	bl	801ca1c <TFT_SetTextColor>
	TFT_DrawChar(X+37, Y+66, 'F');
 80141f0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_big);
 80141f2:	4819      	ldr	r0, [pc, #100]	; (8014258 <GUI_Text_PPFRGB_Measure+0x2e0>)
 80141f4:	f008 fc0c 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+37, Y+66, 'F');
 80141f8:	2246      	movs	r2, #70	; 0x46
 80141fa:	4621      	mov	r1, r4
 80141fc:	fa1f f089 	uxth.w	r0, r9
 8014200:	f008 fcd0 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+66, 'R');
 8014204:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8014208:	2252      	movs	r2, #82	; 0x52
 801420a:	4621      	mov	r1, r4
 801420c:	b280      	uxth	r0, r0
 801420e:	f008 fcc9 	bl	801cba4 <TFT_DrawChar>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 8014212:	7833      	ldrb	r3, [r6, #0]
 8014214:	2b00      	cmp	r3, #0
 8014216:	f040 829b 	bne.w	8014750 <GUI_Text_PPFRGB_Measure+0x7d8>
 801421a:	4b0e      	ldr	r3, [pc, #56]	; (8014254 <GUI_Text_PPFRGB_Measure+0x2dc>)
 801421c:	781b      	ldrb	r3, [r3, #0]
 801421e:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8014222:	2b00      	cmp	r3, #0
 8014224:	f000 828f 	beq.w	8014746 <GUI_Text_PPFRGB_Measure+0x7ce>
 8014228:	463a      	mov	r2, r7
 801422a:	4621      	mov	r1, r4
 801422c:	b280      	uxth	r0, r0
 801422e:	f004 fcf1 	bl	8018c14 <GUI_TextRu_umol>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
}
}
 8014232:	b009      	add	sp, #36	; 0x24
 8014234:	ecbd 8b08 	vpop	{d8-d11}
 8014238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801423c:	2000022a 	.word	0x2000022a
 8014240:	20005701 	.word	0x20005701
 8014244:	200001f0 	.word	0x200001f0
 8014248:	20005703 	.word	0x20005703
 801424c:	200001d0 	.word	0x200001d0
 8014250:	200001d8 	.word	0x200001d8
 8014254:	20000ebc 	.word	0x20000ebc
 8014258:	200001b0 	.word	0x200001b0
 801425c:	2000573b 	.word	0x2000573b
		if(old_nan_PPFRGB) 
 8014260:	f899 3000 	ldrb.w	r3, [r9]
 8014264:	b3b3      	cbz	r3, 80142d4 <GUI_Text_PPFRGB_Measure+0x35c>
			TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8014266:	f105 0762 	add.w	r7, r5, #98	; 0x62
 801426a:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
 801426e:	b2bf      	uxth	r7, r7
 8014270:	fa1f f888 	uxth.w	r8, r8
 8014274:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8014278:	f104 0314 	add.w	r3, r4, #20
 801427c:	b29b      	uxth	r3, r3
 801427e:	4642      	mov	r2, r8
 8014280:	4621      	mov	r1, r4
 8014282:	4638      	mov	r0, r7
 8014284:	f8cd a000 	str.w	sl, [sp]
 8014288:	f008 f999 	bl	801c5be <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 801428c:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8014290:	f104 0115 	add.w	r1, r4, #21
 8014294:	b29b      	uxth	r3, r3
 8014296:	4642      	mov	r2, r8
 8014298:	b289      	uxth	r1, r1
 801429a:	4638      	mov	r0, r7
 801429c:	f8cd a000 	str.w	sl, [sp]
 80142a0:	f008 f98d 	bl	801c5be <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 80142a4:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 80142a8:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 80142ac:	b29b      	uxth	r3, r3
 80142ae:	4642      	mov	r2, r8
 80142b0:	b289      	uxth	r1, r1
 80142b2:	4638      	mov	r0, r7
 80142b4:	f8cd a000 	str.w	sl, [sp]
 80142b8:	f008 f981 	bl	801c5be <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 80142bc:	f104 0357 	add.w	r3, r4, #87	; 0x57
 80142c0:	f104 0141 	add.w	r1, r4, #65	; 0x41
 80142c4:	f8cd a000 	str.w	sl, [sp]
 80142c8:	b29b      	uxth	r3, r3
 80142ca:	4642      	mov	r2, r8
 80142cc:	b289      	uxth	r1, r1
 80142ce:	4638      	mov	r0, r7
 80142d0:	f008 f975 	bl	801c5be <TFT_FillRectangle>
	ValueB = floor(ValueB*10)/10.0;
 80142d4:	eeb2 9a04 	vmov.f32	s18, #36	; 0x41200000  10.0
 80142d8:	ee68 7a09 	vmul.f32	s15, s16, s18
	old_nan_PPFRGB = 0;
 80142dc:	2700      	movs	r7, #0
	ValueB = floor(ValueB*10)/10.0;
 80142de:	ee17 0a90 	vmov	r0, s15
	old_nan_PPFRGB = 0;
 80142e2:	f889 7000 	strb.w	r7, [r9]
	ValueB = floor(ValueB*10)/10.0;
 80142e6:	f7ec f947 	bl	8000578 <__aeabi_f2d>
 80142ea:	ec41 0b10 	vmov	d0, r0, r1
 80142ee:	f00e ff8b 	bl	8023208 <floor>
 80142f2:	2200      	movs	r2, #0
 80142f4:	ec51 0b10 	vmov	r0, r1, d0
 80142f8:	4bd6      	ldr	r3, [pc, #856]	; (8014654 <GUI_Text_PPFRGB_Measure+0x6dc>)
	if((ValueB/1000) > 1.0)
 80142fa:	eddf 8ad7 	vldr	s17, [pc, #860]	; 8014658 <GUI_Text_PPFRGB_Measure+0x6e0>
	ValueB = floor(ValueB*10)/10.0;
 80142fe:	f7ec fab9 	bl	8000874 <__aeabi_ddiv>
 8014302:	f7ec fc85 	bl	8000c10 <__aeabi_d2f>
 8014306:	ee09 0a90 	vmov	s19, r0
	if((ValueB/1000) > 1.0)
 801430a:	eec9 7aa8 	vdiv.f32	s15, s19, s17
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801430e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014312:	f249 40d2 	movw	r0, #38098	; 0x94d2
	uint8_t	delta_pos = 140, deg = 0, number=0;
 8014316:	f04f 088c 	mov.w	r8, #140	; 0x8c
 801431a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		ValueB = ValueB/(1000);
 801431e:	eef4 7a48 	vcmp.f32	s15, s16
 8014322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014326:	bfc8      	it	gt
 8014328:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801432c:	45bb      	cmp	fp, r7
 801432e:	bf08      	it	eq
 8014330:	4618      	moveq	r0, r3
 8014332:	f008 fb73 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014336:	2063      	movs	r0, #99	; 0x63
 8014338:	f008 fb76 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801433c:	48c7      	ldr	r0, [pc, #796]	; (801465c <GUI_Text_PPFRGB_Measure+0x6e4>)
 801433e:	f008 fb67 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueB);
 8014342:	ee19 0a90 	vmov	r0, s19
 8014346:	f7ec f917 	bl	8000578 <__aeabi_f2d>
 801434a:	4602      	mov	r2, r0
 801434c:	460b      	mov	r3, r1
 801434e:	a805      	add	r0, sp, #20
 8014350:	49c3      	ldr	r1, [pc, #780]	; (8014660 <GUI_Text_PPFRGB_Measure+0x6e8>)
 8014352:	f00b ff9f 	bl	8020294 <sprintf>
	uint32_t dec = 10;
 8014356:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueB);
 8014358:	2314      	movs	r3, #20
			dec *= 10;
 801435a:	4611      	mov	r1, r2
		if((ValueB/((float)dec)) >= 1.0)
 801435c:	ee07 2a90 	vmov	s15, r2
 8014360:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014364:	eec9 7a87 	vdiv.f32	s15, s19, s14
 8014368:	eef4 7ac8 	vcmpe.f32	s15, s16
 801436c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014370:	db06      	blt.n	8014380 <GUI_Text_PPFRGB_Measure+0x408>
			delta_pos-= 22 - i*2;
 8014372:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 8014376:	3701      	adds	r7, #1
			dec *= 10;
 8014378:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 801437a:	fa5f f888 	uxtb.w	r8, r8
			number++;
 801437e:	b2ff      	uxtb	r7, r7
 8014380:	3b02      	subs	r3, #2
 8014382:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 8014384:	2b0c      	cmp	r3, #12
 8014386:	d1e9      	bne.n	801435c <GUI_Text_PPFRGB_Measure+0x3e4>
	if(number < old_numPPFB )
 8014388:	4bb6      	ldr	r3, [pc, #728]	; (8014664 <GUI_Text_PPFRGB_Measure+0x6ec>)
 801438a:	781a      	ldrb	r2, [r3, #0]
 801438c:	42ba      	cmp	r2, r7
 801438e:	4699      	mov	r9, r3
 8014390:	d90d      	bls.n	80143ae <GUI_Text_PPFRGB_Measure+0x436>
		TFT_FillRectangle(X+98, Y, X+197, Y+20, TFT_Black_Bkgr);
 8014392:	2163      	movs	r1, #99	; 0x63
 8014394:	f104 0314 	add.w	r3, r4, #20
 8014398:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801439c:	f105 0062 	add.w	r0, r5, #98	; 0x62
 80143a0:	9100      	str	r1, [sp, #0]
 80143a2:	b29b      	uxth	r3, r3
 80143a4:	b292      	uxth	r2, r2
 80143a6:	4621      	mov	r1, r4
 80143a8:	b280      	uxth	r0, r0
 80143aa:	f008 f908 	bl	801c5be <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80143ae:	eb05 0008 	add.w	r0, r5, r8
 80143b2:	2303      	movs	r3, #3
 80143b4:	aa05      	add	r2, sp, #20
	old_numPPFB = number;
 80143b6:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80143ba:	4621      	mov	r1, r4
 80143bc:	b280      	uxth	r0, r0
	buffer[8] = 0;
 80143be:	2700      	movs	r7, #0
 80143c0:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80143c4:	f008 fc46 	bl	801cc54 <TFT_DisplayString>
	ValueG = floor(ValueG*10)/10.0;
 80143c8:	ee6b 7a09 	vmul.f32	s15, s22, s18
	delta_pos = 140;
 80143cc:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueG = floor(ValueG*10)/10.0;
 80143d0:	ee17 0a90 	vmov	r0, s15
 80143d4:	f7ec f8d0 	bl	8000578 <__aeabi_f2d>
 80143d8:	ec41 0b10 	vmov	d0, r0, r1
 80143dc:	f00e ff14 	bl	8023208 <floor>
 80143e0:	2200      	movs	r2, #0
 80143e2:	4b9c      	ldr	r3, [pc, #624]	; (8014654 <GUI_Text_PPFRGB_Measure+0x6dc>)
 80143e4:	ec51 0b10 	vmov	r0, r1, d0
 80143e8:	f7ec fa44 	bl	8000874 <__aeabi_ddiv>
 80143ec:	f7ec fc10 	bl	8000c10 <__aeabi_d2f>
 80143f0:	ee09 0a90 	vmov	s19, r0
	if((ValueG/1000) > 1.0)
 80143f4:	eec9 7aa8 	vdiv.f32	s15, s19, s17
	TFT_SetFont(&Font16EN_arch_big);
 80143f8:	4898      	ldr	r0, [pc, #608]	; (801465c <GUI_Text_PPFRGB_Measure+0x6e4>)
		ValueG = ValueG/(1000);
 80143fa:	eef4 7a48 	vcmp.f32	s15, s16
 80143fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014402:	bfc8      	it	gt
 8014404:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetFont(&Font16EN_arch_big);
 8014408:	f008 fb02 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueG);
 801440c:	ee19 0a90 	vmov	r0, s19
 8014410:	f7ec f8b2 	bl	8000578 <__aeabi_f2d>
 8014414:	4602      	mov	r2, r0
 8014416:	460b      	mov	r3, r1
 8014418:	a805      	add	r0, sp, #20
 801441a:	4991      	ldr	r1, [pc, #580]	; (8014660 <GUI_Text_PPFRGB_Measure+0x6e8>)
 801441c:	f00b ff3a 	bl	8020294 <sprintf>
	dec = 10;
 8014420:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueG);
 8014422:	2314      	movs	r3, #20
			dec *= 10;
 8014424:	4611      	mov	r1, r2
		if((ValueG/(dec)) >= 1.0)
 8014426:	ee07 2a90 	vmov	s15, r2
 801442a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801442e:	eec9 7a87 	vdiv.f32	s15, s19, s14
 8014432:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801443a:	db06      	blt.n	801444a <GUI_Text_PPFRGB_Measure+0x4d2>
			delta_pos-= 22 - i*2;
 801443c:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 8014440:	3701      	adds	r7, #1
			dec *= 10;
 8014442:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 8014444:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8014448:	b2ff      	uxtb	r7, r7
 801444a:	3b02      	subs	r3, #2
 801444c:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 801444e:	2b0c      	cmp	r3, #12
 8014450:	d1e9      	bne.n	8014426 <GUI_Text_PPFRGB_Measure+0x4ae>
		if(number < old_numPPFG )
 8014452:	4b85      	ldr	r3, [pc, #532]	; (8014668 <GUI_Text_PPFRGB_Measure+0x6f0>)
 8014454:	781a      	ldrb	r2, [r3, #0]
 8014456:	42ba      	cmp	r2, r7
 8014458:	4699      	mov	r9, r3
 801445a:	d911      	bls.n	8014480 <GUI_Text_PPFRGB_Measure+0x508>
		TFT_FillRectangle(X+98, Y+21, X+197, Y+41, TFT_Black_Bkgr);
 801445c:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8014460:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014464:	f104 0115 	add.w	r1, r4, #21
 8014468:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801446c:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8014470:	f8cd e000 	str.w	lr, [sp]
 8014474:	b29b      	uxth	r3, r3
 8014476:	b292      	uxth	r2, r2
 8014478:	b289      	uxth	r1, r1
 801447a:	b280      	uxth	r0, r0
 801447c:	f008 f89f 	bl	801c5be <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8014480:	eb05 0008 	add.w	r0, r5, r8
 8014484:	f104 0116 	add.w	r1, r4, #22
 8014488:	2303      	movs	r3, #3
 801448a:	aa05      	add	r2, sp, #20
	old_numPPFG = number;
 801448c:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8014490:	b289      	uxth	r1, r1
 8014492:	b280      	uxth	r0, r0
	buffer[8] = 0;
 8014494:	2700      	movs	r7, #0
 8014496:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 801449a:	f008 fbdb 	bl	801cc54 <TFT_DisplayString>
	ValueR = floor(ValueR*10)/10.0;
 801449e:	ee6a 7a89 	vmul.f32	s15, s21, s18
	delta_pos = 140;
 80144a2:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueR = floor(ValueR*10)/10.0;
 80144a6:	ee17 0a90 	vmov	r0, s15
 80144aa:	f7ec f865 	bl	8000578 <__aeabi_f2d>
 80144ae:	ec41 0b10 	vmov	d0, r0, r1
 80144b2:	f00e fea9 	bl	8023208 <floor>
 80144b6:	2200      	movs	r2, #0
 80144b8:	4b66      	ldr	r3, [pc, #408]	; (8014654 <GUI_Text_PPFRGB_Measure+0x6dc>)
 80144ba:	ec51 0b10 	vmov	r0, r1, d0
 80144be:	f7ec f9d9 	bl	8000874 <__aeabi_ddiv>
 80144c2:	f7ec fba5 	bl	8000c10 <__aeabi_d2f>
 80144c6:	ee09 0a90 	vmov	s19, r0
	if((ValueR/1000) > 1.0)
 80144ca:	eec9 7aa8 	vdiv.f32	s15, s19, s17
	TFT_SetFont(&Font16EN_arch_big);
 80144ce:	4863      	ldr	r0, [pc, #396]	; (801465c <GUI_Text_PPFRGB_Measure+0x6e4>)
		ValueR = ValueR/(1000);
 80144d0:	eef4 7a48 	vcmp.f32	s15, s16
 80144d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144d8:	bfc8      	it	gt
 80144da:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetFont(&Font16EN_arch_big);
 80144de:	f008 fa97 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueR);
 80144e2:	ee19 0a90 	vmov	r0, s19
 80144e6:	f7ec f847 	bl	8000578 <__aeabi_f2d>
 80144ea:	4602      	mov	r2, r0
 80144ec:	460b      	mov	r3, r1
 80144ee:	a805      	add	r0, sp, #20
 80144f0:	495b      	ldr	r1, [pc, #364]	; (8014660 <GUI_Text_PPFRGB_Measure+0x6e8>)
 80144f2:	f00b fecf 	bl	8020294 <sprintf>
	dec = 10;
 80144f6:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueR);
 80144f8:	2314      	movs	r3, #20
			dec *= 10;
 80144fa:	4611      	mov	r1, r2
		if((ValueR/(dec)) >= 1.0)
 80144fc:	ee07 2a90 	vmov	s15, r2
 8014500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014504:	eec9 7a87 	vdiv.f32	s15, s19, s14
 8014508:	eef4 7ac8 	vcmpe.f32	s15, s16
 801450c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014510:	db06      	blt.n	8014520 <GUI_Text_PPFRGB_Measure+0x5a8>
			delta_pos-= 22 - i*2;
 8014512:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 8014516:	3701      	adds	r7, #1
			dec *= 10;
 8014518:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 801451a:	fa5f f888 	uxtb.w	r8, r8
			number++;
 801451e:	b2ff      	uxtb	r7, r7
 8014520:	3b02      	subs	r3, #2
 8014522:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 8014524:	2b0c      	cmp	r3, #12
 8014526:	d1e9      	bne.n	80144fc <GUI_Text_PPFRGB_Measure+0x584>
	if(number < old_numPPFR )
 8014528:	4b50      	ldr	r3, [pc, #320]	; (801466c <GUI_Text_PPFRGB_Measure+0x6f4>)
 801452a:	781a      	ldrb	r2, [r3, #0]
 801452c:	42ba      	cmp	r2, r7
 801452e:	4699      	mov	r9, r3
 8014530:	d911      	bls.n	8014556 <GUI_Text_PPFRGB_Measure+0x5de>
		TFT_FillRectangle(X+98, Y+42, X+197, Y+63, TFT_Black_Bkgr);
 8014532:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8014536:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801453a:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 801453e:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8014542:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8014546:	f8cd e000 	str.w	lr, [sp]
 801454a:	b29b      	uxth	r3, r3
 801454c:	b292      	uxth	r2, r2
 801454e:	b289      	uxth	r1, r1
 8014550:	b280      	uxth	r0, r0
 8014552:	f008 f834 	bl	801c5be <TFT_FillRectangle>
	buffer[8] = 0;
 8014556:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8014558:	eb05 0008 	add.w	r0, r5, r8
 801455c:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 8014560:	aa05      	add	r2, sp, #20
	buffer[8] = 0;
 8014562:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8014566:	b289      	uxth	r1, r1
 8014568:	2303      	movs	r3, #3
 801456a:	b280      	uxth	r0, r0
	old_numPPFR = number;
 801456c:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8014570:	f008 fb70 	bl	801cc54 <TFT_DisplayString>
	ValueFR = floor(ValueFR*10)/10.0;
 8014574:	ee6a 7a09 	vmul.f32	s15, s20, s18
	delta_pos = 140;
 8014578:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueFR = floor(ValueFR*10)/10.0;
 801457c:	ee17 0a90 	vmov	r0, s15
 8014580:	f7eb fffa 	bl	8000578 <__aeabi_f2d>
 8014584:	ec41 0b10 	vmov	d0, r0, r1
 8014588:	f00e fe3e 	bl	8023208 <floor>
 801458c:	2200      	movs	r2, #0
 801458e:	4b31      	ldr	r3, [pc, #196]	; (8014654 <GUI_Text_PPFRGB_Measure+0x6dc>)
 8014590:	ec51 0b10 	vmov	r0, r1, d0
 8014594:	f7ec f96e 	bl	8000874 <__aeabi_ddiv>
 8014598:	f7ec fb3a 	bl	8000c10 <__aeabi_d2f>
 801459c:	ee09 0a10 	vmov	s18, r0
	if((ValueFR/1000) > 1.0)
 80145a0:	eec9 7a28 	vdiv.f32	s15, s18, s17
	TFT_SetFont(&Font16EN_arch_big);
 80145a4:	482d      	ldr	r0, [pc, #180]	; (801465c <GUI_Text_PPFRGB_Measure+0x6e4>)
	else deg=0;
 80145a6:	eef4 7ac8 	vcmpe.f32	s15, s16
 80145aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ae:	bfc8      	it	gt
 80145b0:	eeb0 9a67 	vmovgt.f32	s18, s15
 80145b4:	bfcc      	ite	gt
 80145b6:	2701      	movgt	r7, #1
 80145b8:	2700      	movle	r7, #0
	TFT_SetFont(&Font16EN_arch_big);
 80145ba:	f008 fa29 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueFR);
 80145be:	ee19 0a10 	vmov	r0, s18
 80145c2:	f7eb ffd9 	bl	8000578 <__aeabi_f2d>
 80145c6:	4602      	mov	r2, r0
 80145c8:	460b      	mov	r3, r1
 80145ca:	a805      	add	r0, sp, #20
 80145cc:	4924      	ldr	r1, [pc, #144]	; (8014660 <GUI_Text_PPFRGB_Measure+0x6e8>)
 80145ce:	f00b fe61 	bl	8020294 <sprintf>
	dec = 10;
 80145d2:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueFR);
 80145d4:	2314      	movs	r3, #20
			dec *= 10;
 80145d6:	4611      	mov	r1, r2
		if((ValueFR/(dec)) >= 1.0)
 80145d8:	ee07 2a90 	vmov	s15, r2
 80145dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80145e0:	eec9 7a07 	vdiv.f32	s15, s18, s14
 80145e4:	eef4 7ac8 	vcmpe.f32	s15, s16
 80145e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145ec:	db06      	blt.n	80145fc <GUI_Text_PPFRGB_Measure+0x684>
			delta_pos-= 22 - i*2;
 80145ee:	eba8 0803 	sub.w	r8, r8, r3
			number++;
 80145f2:	3601      	adds	r6, #1
			dec *= 10;
 80145f4:	434a      	muls	r2, r1
			delta_pos-= 22 - i*2;
 80145f6:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80145fa:	b2f6      	uxtb	r6, r6
 80145fc:	3b02      	subs	r3, #2
 80145fe:	b2db      	uxtb	r3, r3
	for (uint8_t i = 1; i <= 4; i++)
 8014600:	2b0c      	cmp	r3, #12
 8014602:	d1e9      	bne.n	80145d8 <GUI_Text_PPFRGB_Measure+0x660>
	if(number < old_numPPFFR )
 8014604:	4b1a      	ldr	r3, [pc, #104]	; (8014670 <GUI_Text_PPFRGB_Measure+0x6f8>)
 8014606:	781a      	ldrb	r2, [r3, #0]
 8014608:	42b2      	cmp	r2, r6
 801460a:	4699      	mov	r9, r3
 801460c:	d911      	bls.n	8014632 <GUI_Text_PPFRGB_Measure+0x6ba>
		TFT_FillRectangle(X+98, Y+65, X+197, Y+87, TFT_Black_Bkgr);
 801460e:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8014612:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014616:	f104 0141 	add.w	r1, r4, #65	; 0x41
 801461a:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801461e:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8014622:	f8cd e000 	str.w	lr, [sp]
 8014626:	b29b      	uxth	r3, r3
 8014628:	b292      	uxth	r2, r2
 801462a:	b289      	uxth	r1, r1
 801462c:	b280      	uxth	r0, r0
 801462e:	f007 ffc6 	bl	801c5be <TFT_FillRectangle>
	buffer[8] = 0;
 8014632:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8014634:	f104 0142 	add.w	r1, r4, #66	; 0x42
 8014638:	eb05 0008 	add.w	r0, r5, r8
	buffer[8] = 0;
 801463c:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8014640:	aa05      	add	r2, sp, #20
 8014642:	2303      	movs	r3, #3
 8014644:	b289      	uxth	r1, r1
 8014646:	b280      	uxth	r0, r0
	old_numPPFFR = number;
 8014648:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 801464c:	f008 fb02 	bl	801cc54 <TFT_DisplayString>
 8014650:	e527      	b.n	80140a2 <GUI_Text_PPFRGB_Measure+0x12a>
 8014652:	bf00      	nop
 8014654:	40240000 	.word	0x40240000
 8014658:	447a0000 	.word	0x447a0000
 801465c:	200001b0 	.word	0x200001b0
 8014660:	08031d65 	.word	0x08031d65
 8014664:	20000236 	.word	0x20000236
 8014668:	20000238 	.word	0x20000238
 801466c:	20000239 	.word	0x20000239
 8014670:	20000237 	.word	0x20000237
	uint8_t	delta_pos = 140, deg = 0, number=0;
 8014674:	461f      	mov	r7, r3
 8014676:	e514      	b.n	80140a2 <GUI_Text_PPFRGB_Measure+0x12a>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8014678:	4621      	mov	r1, r4
 801467a:	b280      	uxth	r0, r0
 801467c:	f004 fb38 	bl	8018cf0 <GUI_TextRu_umol_sr>
 8014680:	e54a      	b.n	8014118 <GUI_Text_PPFRGB_Measure+0x1a0>
	else if (Language_status==En)
 8014682:	2b01      	cmp	r3, #1
 8014684:	f47f ad48 	bne.w	8014118 <GUI_Text_PPFRGB_Measure+0x1a0>
	{TFT_SetTextColor(TFT_White);
 8014688:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801468c:	f008 f9c6 	bl	801ca1c <TFT_SetTextColor>
		GUI_TextEn_Blue(X+34, Y);
 8014690:	f105 0022 	add.w	r0, r5, #34	; 0x22
 8014694:	4621      	mov	r1, r4
 8014696:	b280      	uxth	r0, r0
 8014698:	f003 fb7c 	bl	8017d94 <GUI_TextEn_Blue>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
 801469c:	4b35      	ldr	r3, [pc, #212]	; (8014774 <GUI_Text_PPFRGB_Measure+0x7fc>)
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 80146a4:	463a      	mov	r2, r7
 80146a6:	4621      	mov	r1, r4
 80146a8:	b280      	uxth	r0, r0
 80146aa:	b113      	cbz	r3, 80146b2 <GUI_Text_PPFRGB_Measure+0x73a>
 80146ac:	f002 fab4 	bl	8016c18 <GUI_TextEn_umol>
 80146b0:	e532      	b.n	8014118 <GUI_Text_PPFRGB_Measure+0x1a0>
 80146b2:	f002 fb17 	bl	8016ce4 <GUI_TextEn_umol_sr>
 80146b6:	e52f      	b.n	8014118 <GUI_Text_PPFRGB_Measure+0x1a0>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 80146b8:	4641      	mov	r1, r8
 80146ba:	b280      	uxth	r0, r0
 80146bc:	f004 fb18 	bl	8018cf0 <GUI_TextRu_umol_sr>
 80146c0:	e561      	b.n	8014186 <GUI_Text_PPFRGB_Measure+0x20e>
	else if (Language_status==En)
 80146c2:	2b01      	cmp	r3, #1
 80146c4:	f47f ad5f 	bne.w	8014186 <GUI_Text_PPFRGB_Measure+0x20e>
	{	TFT_SetTextColor(TFT_White);
 80146c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Green(X+17, Y+22);
 80146cc:	f104 0816 	add.w	r8, r4, #22
	{	TFT_SetTextColor(TFT_White);
 80146d0:	f008 f9a4 	bl	801ca1c <TFT_SetTextColor>
		GUI_TextEn_Green(X+17, Y+22);
 80146d4:	fa1f f888 	uxth.w	r8, r8
 80146d8:	f105 0011 	add.w	r0, r5, #17
 80146dc:	4641      	mov	r1, r8
 80146de:	b280      	uxth	r0, r0
 80146e0:	f003 fb26 	bl	8017d30 <GUI_TextEn_Green>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
 80146e4:	4b23      	ldr	r3, [pc, #140]	; (8014774 <GUI_Text_PPFRGB_Measure+0x7fc>)
 80146e6:	781b      	ldrb	r3, [r3, #0]
 80146e8:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 80146ec:	463a      	mov	r2, r7
 80146ee:	4641      	mov	r1, r8
 80146f0:	b280      	uxth	r0, r0
 80146f2:	b113      	cbz	r3, 80146fa <GUI_Text_PPFRGB_Measure+0x782>
 80146f4:	f002 fa90 	bl	8016c18 <GUI_TextEn_umol>
 80146f8:	e545      	b.n	8014186 <GUI_Text_PPFRGB_Measure+0x20e>
 80146fa:	f002 faf3 	bl	8016ce4 <GUI_TextEn_umol_sr>
 80146fe:	e542      	b.n	8014186 <GUI_Text_PPFRGB_Measure+0x20e>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 8014700:	4641      	mov	r1, r8
 8014702:	b280      	uxth	r0, r0
 8014704:	f004 faf4 	bl	8018cf0 <GUI_TextRu_umol_sr>
 8014708:	e56d      	b.n	80141e6 <GUI_Text_PPFRGB_Measure+0x26e>
	else if (Language_status==En)
 801470a:	2b01      	cmp	r3, #1
 801470c:	f47f ad6b 	bne.w	80141e6 <GUI_Text_PPFRGB_Measure+0x26e>
		GUI_TextEn_Red(X+37, Y+44);
 8014710:	f104 082c 	add.w	r8, r4, #44	; 0x2c
	{	TFT_SetTextColor(TFT_White);
 8014714:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Red(X+37, Y+44);
 8014718:	fa1f f888 	uxth.w	r8, r8
	{	TFT_SetTextColor(TFT_White);
 801471c:	f008 f97e 	bl	801ca1c <TFT_SetTextColor>
		GUI_TextEn_Red(X+37, Y+44);
 8014720:	4641      	mov	r1, r8
 8014722:	fa1f f089 	uxth.w	r0, r9
 8014726:	f003 fb61 	bl	8017dec <GUI_TextEn_Red>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
 801472a:	4b12      	ldr	r3, [pc, #72]	; (8014774 <GUI_Text_PPFRGB_Measure+0x7fc>)
 801472c:	781b      	ldrb	r3, [r3, #0]
 801472e:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8014732:	463a      	mov	r2, r7
 8014734:	4641      	mov	r1, r8
 8014736:	b280      	uxth	r0, r0
 8014738:	b113      	cbz	r3, 8014740 <GUI_Text_PPFRGB_Measure+0x7c8>
 801473a:	f002 fa6d 	bl	8016c18 <GUI_TextEn_umol>
 801473e:	e552      	b.n	80141e6 <GUI_Text_PPFRGB_Measure+0x26e>
 8014740:	f002 fad0 	bl	8016ce4 <GUI_TextEn_umol_sr>
 8014744:	e54f      	b.n	80141e6 <GUI_Text_PPFRGB_Measure+0x26e>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 8014746:	4621      	mov	r1, r4
 8014748:	b280      	uxth	r0, r0
 801474a:	f004 fad1 	bl	8018cf0 <GUI_TextRu_umol_sr>
 801474e:	e570      	b.n	8014232 <GUI_Text_PPFRGB_Measure+0x2ba>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
 8014750:	2b01      	cmp	r3, #1
 8014752:	f47f ad6e 	bne.w	8014232 <GUI_Text_PPFRGB_Measure+0x2ba>
 8014756:	4b07      	ldr	r3, [pc, #28]	; (8014774 <GUI_Text_PPFRGB_Measure+0x7fc>)
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 801475e:	463a      	mov	r2, r7
 8014760:	4621      	mov	r1, r4
 8014762:	b280      	uxth	r0, r0
 8014764:	b113      	cbz	r3, 801476c <GUI_Text_PPFRGB_Measure+0x7f4>
 8014766:	f002 fa57 	bl	8016c18 <GUI_TextEn_umol>
 801476a:	e562      	b.n	8014232 <GUI_Text_PPFRGB_Measure+0x2ba>
 801476c:	f002 faba 	bl	8016ce4 <GUI_TextEn_umol_sr>
}
 8014770:	e55f      	b.n	8014232 <GUI_Text_PPFRGB_Measure+0x2ba>
 8014772:	bf00      	nop
 8014774:	20000ebc 	.word	0x20000ebc

08014778 <GUI_Text_XYZ_Measure>:
uint8_t old_numX = 10, old_numY = 10, old_numZ = 10, old_nanXYZ = 0;
void GUI_Text_XYZ_Measure(uint16_t X, uint16_t Y, uint16_t ValueX, uint16_t ValueY, uint16_t ValueZ, uint8_t nope, uint8_t grey)
{
 8014778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801477c:	b087      	sub	sp, #28
 801477e:	4605      	mov	r5, r0
 8014780:	9302      	str	r3, [sp, #8]
 8014782:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8014786:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
 8014788:	2300      	movs	r3, #0
{
 801478a:	460c      	mov	r4, r1
 801478c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
	char buffer[5] = {0};
 8014790:	9304      	str	r3, [sp, #16]
 8014792:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 190, number = 0;
	uint32_t dec = 10;
	
	if((ValueX ==0 && ValueY ==100 && ValueZ ==0)||nope)
 8014796:	4693      	mov	fp, r2
 8014798:	b922      	cbnz	r2, 80147a4 <GUI_Text_XYZ_Measure+0x2c>
 801479a:	9b02      	ldr	r3, [sp, #8]
 801479c:	2b64      	cmp	r3, #100	; 0x64
 801479e:	d101      	bne.n	80147a4 <GUI_Text_XYZ_Measure+0x2c>
 80147a0:	9b03      	ldr	r3, [sp, #12]
 80147a2:	b10b      	cbz	r3, 80147a8 <GUI_Text_XYZ_Measure+0x30>
 80147a4:	2e00      	cmp	r6, #0
 80147a6:	d07c      	beq.n	80148a2 <GUI_Text_XYZ_Measure+0x12a>
	{
		if(!old_nanXYZ){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 80147a8:	4bb2      	ldr	r3, [pc, #712]	; (8014a74 <GUI_Text_XYZ_Measure+0x2fc>)
 80147aa:	781a      	ldrb	r2, [r3, #0]
 80147ac:	469a      	mov	sl, r3
 80147ae:	b96a      	cbnz	r2, 80147cc <GUI_Text_XYZ_Measure+0x54>
 80147b0:	2163      	movs	r1, #99	; 0x63
 80147b2:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 80147b6:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 80147ba:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80147be:	9100      	str	r1, [sp, #0]
 80147c0:	b29b      	uxth	r3, r3
 80147c2:	b292      	uxth	r2, r2
 80147c4:	4621      	mov	r1, r4
 80147c6:	b280      	uxth	r0, r0
 80147c8:	f007 fef9 	bl	801c5be <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 80147cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80147d0:	f008 f924 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80147d4:	f105 0987 	add.w	r9, r5, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 80147d8:	2063      	movs	r0, #99	; 0x63
 80147da:	f008 f925 	bl	801ca28 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 80147de:	fa1f f989 	uxth.w	r9, r9
 80147e2:	48a5      	ldr	r0, [pc, #660]	; (8014a78 <GUI_Text_XYZ_Measure+0x300>)
 80147e4:	f105 08a0 	add.w	r8, r5, #160	; 0xa0
 80147e8:	f008 f912 	bl	801ca10 <TFT_SetFont>
 80147ec:	fa1f f888 	uxth.w	r8, r8
 80147f0:	222d      	movs	r2, #45	; 0x2d
 80147f2:	4621      	mov	r1, r4
 80147f4:	4648      	mov	r0, r9
 80147f6:	f105 06b9 	add.w	r6, r5, #185	; 0xb9
 80147fa:	f008 f9d3 	bl	801cba4 <TFT_DrawChar>
 80147fe:	b2b6      	uxth	r6, r6
 8014800:	2220      	movs	r2, #32
 8014802:	4621      	mov	r1, r4
 8014804:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014806:	f104 0723 	add.w	r7, r4, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 801480a:	f008 f9cb 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 801480e:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014810:	222d      	movs	r2, #45	; 0x2d
 8014812:	4621      	mov	r1, r4
 8014814:	4630      	mov	r0, r6
 8014816:	f008 f9c5 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 801481a:	4639      	mov	r1, r7
 801481c:	222d      	movs	r2, #45	; 0x2d
 801481e:	4648      	mov	r0, r9
 8014820:	f008 f9c0 	bl	801cba4 <TFT_DrawChar>
 8014824:	4639      	mov	r1, r7
 8014826:	2220      	movs	r2, #32
 8014828:	4640      	mov	r0, r8
 801482a:	f008 f9bb 	bl	801cba4 <TFT_DrawChar>
 801482e:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8014830:	f104 0746 	add.w	r7, r4, #70	; 0x46
 8014834:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014836:	222d      	movs	r2, #45	; 0x2d
 8014838:	4630      	mov	r0, r6
 801483a:	f008 f9b3 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 801483e:	222d      	movs	r2, #45	; 0x2d
 8014840:	4639      	mov	r1, r7
 8014842:	4648      	mov	r0, r9
 8014844:	f008 f9ae 	bl	801cba4 <TFT_DrawChar>
 8014848:	2220      	movs	r2, #32
 801484a:	4639      	mov	r1, r7
 801484c:	4640      	mov	r0, r8
 801484e:	f008 f9a9 	bl	801cba4 <TFT_DrawChar>
 8014852:	222d      	movs	r2, #45	; 0x2d
 8014854:	4639      	mov	r1, r7
 8014856:	4630      	mov	r0, r6
 8014858:	f008 f9a4 	bl	801cba4 <TFT_DrawChar>
		old_nanXYZ = 1;
 801485c:	2301      	movs	r3, #1
 801485e:	f88a 3000 	strb.w	r3, [sl]
	old_numZ = number;
	number = 0;
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
	old_nanXYZ = 0;
}
			TFT_SetTextColor(TFT_White);
 8014862:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014866:	f008 f8d9 	bl	801ca1c <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 801486a:	2063      	movs	r0, #99	; 0x63
 801486c:	f008 f8dc 	bl	801ca28 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_big);
 8014870:	4881      	ldr	r0, [pc, #516]	; (8014a78 <GUI_Text_XYZ_Measure+0x300>)
 8014872:	f008 f8cd 	bl	801ca10 <TFT_SetFont>
			TFT_DrawChar(X, Y, 'X'-34);
 8014876:	4621      	mov	r1, r4
 8014878:	4628      	mov	r0, r5
 801487a:	2236      	movs	r2, #54	; 0x36
 801487c:	f008 f992 	bl	801cba4 <TFT_DrawChar>
			TFT_DrawChar(X, Y+35, 'Y'-34);
 8014880:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8014884:	4628      	mov	r0, r5
 8014886:	2237      	movs	r2, #55	; 0x37
 8014888:	b289      	uxth	r1, r1
 801488a:	f008 f98b 	bl	801cba4 <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'Z'-34);
 801488e:	f104 0146 	add.w	r1, r4, #70	; 0x46
 8014892:	2238      	movs	r2, #56	; 0x38
 8014894:	b289      	uxth	r1, r1
 8014896:	4628      	mov	r0, r5
 8014898:	f008 f984 	bl	801cba4 <TFT_DrawChar>
}	
 801489c:	b007      	add	sp, #28
 801489e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80148a2:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 80148a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80148aa:	f249 42d2 	movw	r2, #38098	; 0x94d2
 80148ae:	2800      	cmp	r0, #0
 80148b0:	bf14      	ite	ne
 80148b2:	4610      	movne	r0, r2
 80148b4:	4618      	moveq	r0, r3
 80148b6:	f008 f8b1 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80148ba:	2063      	movs	r0, #99	; 0x63
 80148bc:	f008 f8b4 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80148c0:	486e      	ldr	r0, [pc, #440]	; (8014a7c <GUI_Text_XYZ_Measure+0x304>)
 80148c2:	f008 f8a5 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%d", ValueX);
 80148c6:	465a      	mov	r2, fp
 80148c8:	496d      	ldr	r1, [pc, #436]	; (8014a80 <GUI_Text_XYZ_Measure+0x308>)
 80148ca:	a804      	add	r0, sp, #16
 80148cc:	f00b fce2 	bl	8020294 <sprintf>
	uint8_t	delta_pos = 190, number = 0;
 80148d0:	46b0      	mov	r8, r6
	sprintf (buffer, "%d", ValueX);
 80148d2:	f04f 0904 	mov.w	r9, #4
	uint32_t dec = 10;
 80148d6:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 190, number = 0;
 80148da:	27be      	movs	r7, #190	; 0xbe
		if((ValueX/(dec)) >= 1.0)
 80148dc:	fbbb f0fa 	udiv	r0, fp, sl
 80148e0:	f7eb fe28 	bl	8000534 <__aeabi_ui2d>
 80148e4:	2200      	movs	r2, #0
 80148e6:	4b67      	ldr	r3, [pc, #412]	; (8014a84 <GUI_Text_XYZ_Measure+0x30c>)
 80148e8:	f7ec f920 	bl	8000b2c <__aeabi_dcmpge>
 80148ec:	b140      	cbz	r0, 8014900 <GUI_Text_XYZ_Measure+0x188>
			dec *= 10;
 80148ee:	230a      	movs	r3, #10
			delta_pos-=23;
 80148f0:	3f17      	subs	r7, #23
			number++;
 80148f2:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 80148f6:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80148fa:	b2ff      	uxtb	r7, r7
			number++;
 80148fc:	fa5f f888 	uxtb.w	r8, r8
 8014900:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8014904:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8014908:	d1e8      	bne.n	80148dc <GUI_Text_XYZ_Measure+0x164>
	if(number < old_numX || old_nanXYZ )
 801490a:	4b5f      	ldr	r3, [pc, #380]	; (8014a88 <GUI_Text_XYZ_Measure+0x310>)
 801490c:	781a      	ldrb	r2, [r3, #0]
 801490e:	4542      	cmp	r2, r8
 8014910:	4699      	mov	r9, r3
 8014912:	d802      	bhi.n	801491a <GUI_Text_XYZ_Measure+0x1a2>
 8014914:	4b57      	ldr	r3, [pc, #348]	; (8014a74 <GUI_Text_XYZ_Measure+0x2fc>)
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	b16b      	cbz	r3, 8014936 <GUI_Text_XYZ_Measure+0x1be>
		TFT_FillRectangle(X+40, Y, X+197, Y+24, TFT_Black_Bkgr);
 801491a:	2163      	movs	r1, #99	; 0x63
 801491c:	f104 0318 	add.w	r3, r4, #24
 8014920:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014924:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014928:	9100      	str	r1, [sp, #0]
 801492a:	b29b      	uxth	r3, r3
 801492c:	b292      	uxth	r2, r2
 801492e:	4621      	mov	r1, r4
 8014930:	b280      	uxth	r0, r0
 8014932:	f007 fe44 	bl	801c5be <TFT_FillRectangle>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014936:	19e8      	adds	r0, r5, r7
 8014938:	2303      	movs	r3, #3
 801493a:	aa04      	add	r2, sp, #16
 801493c:	4621      	mov	r1, r4
 801493e:	b280      	uxth	r0, r0
	old_numX = number;
 8014940:	f889 8000 	strb.w	r8, [r9]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014944:	f008 f986 	bl	801cc54 <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 8014948:	484c      	ldr	r0, [pc, #304]	; (8014a7c <GUI_Text_XYZ_Measure+0x304>)
 801494a:	f008 f861 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%d", ValueY);
 801494e:	9a02      	ldr	r2, [sp, #8]
 8014950:	494b      	ldr	r1, [pc, #300]	; (8014a80 <GUI_Text_XYZ_Measure+0x308>)
 8014952:	a804      	add	r0, sp, #16
 8014954:	f00b fc9e 	bl	8020294 <sprintf>
	dec = 10;
 8014958:	f04f 0a0a 	mov.w	sl, #10
	number = 0;
 801495c:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueY);
 8014960:	f04f 0904 	mov.w	r9, #4
	delta_pos = 190;
 8014964:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 8014966:	46d3      	mov	fp, sl
		if((ValueY/(dec)) >= 1.0)
 8014968:	9b02      	ldr	r3, [sp, #8]
 801496a:	fbb3 f0fa 	udiv	r0, r3, sl
 801496e:	f7eb fde1 	bl	8000534 <__aeabi_ui2d>
 8014972:	2200      	movs	r2, #0
 8014974:	4b43      	ldr	r3, [pc, #268]	; (8014a84 <GUI_Text_XYZ_Measure+0x30c>)
 8014976:	f7ec f8d9 	bl	8000b2c <__aeabi_dcmpge>
 801497a:	b138      	cbz	r0, 801498c <GUI_Text_XYZ_Measure+0x214>
			delta_pos-=23;
 801497c:	3f17      	subs	r7, #23
			number++;
 801497e:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8014982:	fb0b fa0a 	mul.w	sl, fp, sl
			delta_pos-=23;
 8014986:	b2ff      	uxtb	r7, r7
			number++;
 8014988:	fa5f f888 	uxtb.w	r8, r8
 801498c:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8014990:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8014994:	d1e8      	bne.n	8014968 <GUI_Text_XYZ_Measure+0x1f0>
	if(number < old_numY || old_nanXYZ)
 8014996:	4b3d      	ldr	r3, [pc, #244]	; (8014a8c <GUI_Text_XYZ_Measure+0x314>)
 8014998:	781a      	ldrb	r2, [r3, #0]
 801499a:	4542      	cmp	r2, r8
 801499c:	f104 0923 	add.w	r9, r4, #35	; 0x23
 80149a0:	469a      	mov	sl, r3
 80149a2:	d802      	bhi.n	80149aa <GUI_Text_XYZ_Measure+0x232>
 80149a4:	4b33      	ldr	r3, [pc, #204]	; (8014a74 <GUI_Text_XYZ_Measure+0x2fc>)
 80149a6:	781b      	ldrb	r3, [r3, #0]
 80149a8:	b173      	cbz	r3, 80149c8 <GUI_Text_XYZ_Measure+0x250>
		TFT_FillRectangle(X+40, Y+35, X+197, Y+59, TFT_Black_Bkgr);
 80149aa:	2163      	movs	r1, #99	; 0x63
 80149ac:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 80149b0:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80149b4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80149b8:	9100      	str	r1, [sp, #0]
 80149ba:	b29b      	uxth	r3, r3
 80149bc:	b292      	uxth	r2, r2
 80149be:	fa1f f189 	uxth.w	r1, r9
 80149c2:	b280      	uxth	r0, r0
 80149c4:	f007 fdfb 	bl	801c5be <TFT_FillRectangle>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80149c8:	19e8      	adds	r0, r5, r7
 80149ca:	fa1f f189 	uxth.w	r1, r9
 80149ce:	2303      	movs	r3, #3
 80149d0:	aa04      	add	r2, sp, #16
 80149d2:	b280      	uxth	r0, r0
	old_numY = number;
 80149d4:	f88a 8000 	strb.w	r8, [sl]
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80149d8:	f008 f93c 	bl	801cc54 <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 80149dc:	4827      	ldr	r0, [pc, #156]	; (8014a7c <GUI_Text_XYZ_Measure+0x304>)
 80149de:	f008 f817 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%d", ValueZ);
 80149e2:	9a03      	ldr	r2, [sp, #12]
 80149e4:	4926      	ldr	r1, [pc, #152]	; (8014a80 <GUI_Text_XYZ_Measure+0x308>)
 80149e6:	a804      	add	r0, sp, #16
 80149e8:	f00b fc54 	bl	8020294 <sprintf>
	 dec = 10;
 80149ec:	f04f 090a 	mov.w	r9, #10
	sprintf (buffer, "%d", ValueZ);
 80149f0:	f04f 0804 	mov.w	r8, #4
		delta_pos = 190;
 80149f4:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 80149f6:	46ca      	mov	sl, r9
		if((ValueZ/(dec)) >= 1.0)
 80149f8:	9b03      	ldr	r3, [sp, #12]
 80149fa:	fbb3 f0f9 	udiv	r0, r3, r9
 80149fe:	f7eb fd99 	bl	8000534 <__aeabi_ui2d>
 8014a02:	2200      	movs	r2, #0
 8014a04:	4b1f      	ldr	r3, [pc, #124]	; (8014a84 <GUI_Text_XYZ_Measure+0x30c>)
 8014a06:	f7ec f891 	bl	8000b2c <__aeabi_dcmpge>
 8014a0a:	b128      	cbz	r0, 8014a18 <GUI_Text_XYZ_Measure+0x2a0>
			delta_pos-=23;
 8014a0c:	3f17      	subs	r7, #23
			number++;
 8014a0e:	3601      	adds	r6, #1
			dec *= 10;
 8014a10:	fb0a f909 	mul.w	r9, sl, r9
			delta_pos-=23;
 8014a14:	b2ff      	uxtb	r7, r7
			number++;
 8014a16:	b2f6      	uxtb	r6, r6
 8014a18:	f108 38ff 	add.w	r8, r8, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 8014a1c:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8014a20:	d1ea      	bne.n	80149f8 <GUI_Text_XYZ_Measure+0x280>
	if(number < old_numZ || old_nanXYZ)
 8014a22:	4b1b      	ldr	r3, [pc, #108]	; (8014a90 <GUI_Text_XYZ_Measure+0x318>)
 8014a24:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8014a74 <GUI_Text_XYZ_Measure+0x2fc>
 8014a28:	781a      	ldrb	r2, [r3, #0]
 8014a2a:	42b2      	cmp	r2, r6
 8014a2c:	f104 0a46 	add.w	sl, r4, #70	; 0x46
 8014a30:	4698      	mov	r8, r3
 8014a32:	d802      	bhi.n	8014a3a <GUI_Text_XYZ_Measure+0x2c2>
 8014a34:	f899 3000 	ldrb.w	r3, [r9]
 8014a38:	b173      	cbz	r3, 8014a58 <GUI_Text_XYZ_Measure+0x2e0>
		TFT_FillRectangle(X+40, Y+70, X+197, Y+94, TFT_Black_Bkgr);
 8014a3a:	2163      	movs	r1, #99	; 0x63
 8014a3c:	f104 035e 	add.w	r3, r4, #94	; 0x5e
 8014a40:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8014a44:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014a48:	9100      	str	r1, [sp, #0]
 8014a4a:	b29b      	uxth	r3, r3
 8014a4c:	b292      	uxth	r2, r2
 8014a4e:	fa1f f18a 	uxth.w	r1, sl
 8014a52:	b280      	uxth	r0, r0
 8014a54:	f007 fdb3 	bl	801c5be <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8014a58:	19e8      	adds	r0, r5, r7
 8014a5a:	2303      	movs	r3, #3
 8014a5c:	aa04      	add	r2, sp, #16
 8014a5e:	fa1f f18a 	uxth.w	r1, sl
 8014a62:	b280      	uxth	r0, r0
	old_numZ = number;
 8014a64:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8014a68:	f008 f8f4 	bl	801cc54 <TFT_DisplayString>
	old_nanXYZ = 0;
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	f889 3000 	strb.w	r3, [r9]
 8014a72:	e6f6      	b.n	8014862 <GUI_Text_XYZ_Measure+0xea>
 8014a74:	20005732 	.word	0x20005732
 8014a78:	200001e8 	.word	0x200001e8
 8014a7c:	200001f0 	.word	0x200001f0
 8014a80:	08024f89 	.word	0x08024f89
 8014a84:	3ff00000 	.word	0x3ff00000
 8014a88:	2000023a 	.word	0x2000023a
 8014a8c:	2000023b 	.word	0x2000023b
 8014a90:	2000023c 	.word	0x2000023c

08014a94 <GUI_Text_xy_Measure>:
uint8_t old_nanxy = 0;
void GUI_Text_xy_Measure(uint16_t X, uint16_t Y, float Valuex, float Valuey, uint8_t nope, uint8_t grey)
{
 8014a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a98:	ed2d 8b02 	vpush	{d8}
 8014a9c:	b085      	sub	sp, #20
 8014a9e:	4604      	mov	r4, r0
 8014aa0:	4691      	mov	r9, r2
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 8014aa2:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8014aa6:	2200      	movs	r2, #0
{
 8014aa8:	460d      	mov	r5, r1
 8014aaa:	eef0 8a40 	vmov.f32	s17, s0
 8014aae:	eeb0 8a60 	vmov.f32	s16, s1
 8014ab2:	461e      	mov	r6, r3
	char buffer[5] = {0};
 8014ab4:	9202      	str	r2, [sp, #8]
 8014ab6:	f88d 200c 	strb.w	r2, [sp, #12]
	TFT_SetTextColor(TFT_White);
 8014aba:	f007 ffaf 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014abe:	2063      	movs	r0, #99	; 0x63
 8014ac0:	f007 ffb2 	bl	801ca28 <TFT_SetBackColor>

	if((Valuex == 0 && Valuey ==1) || nope){
 8014ac4:	eef5 8a40 	vcmp.f32	s17, #0.0
 8014ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014acc:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8014c14 <GUI_Text_xy_Measure+0x180>
 8014ad0:	f105 0723 	add.w	r7, r5, #35	; 0x23
 8014ad4:	d106      	bne.n	8014ae4 <GUI_Text_xy_Measure+0x50>
 8014ad6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014ada:	eeb4 8a67 	vcmp.f32	s16, s15
 8014ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ae2:	d002      	beq.n	8014aea <GUI_Text_xy_Measure+0x56>
 8014ae4:	f1b9 0f00 	cmp.w	r9, #0
 8014ae8:	d05a      	beq.n	8014ba0 <GUI_Text_xy_Measure+0x10c>
		if(!old_nanxy){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 8014aea:	f898 3000 	ldrb.w	r3, [r8]
 8014aee:	b96b      	cbnz	r3, 8014b0c <GUI_Text_xy_Measure+0x78>
 8014af0:	2163      	movs	r1, #99	; 0x63
 8014af2:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8014af6:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8014afa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014afe:	9100      	str	r1, [sp, #0]
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	b292      	uxth	r2, r2
 8014b04:	4629      	mov	r1, r5
 8014b06:	b280      	uxth	r0, r0
 8014b08:	f007 fd59 	bl	801c5be <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014b0c:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 8014b10:	483c      	ldr	r0, [pc, #240]	; (8014c04 <GUI_Text_xy_Measure+0x170>)
 8014b12:	fa1f fb8b 	uxth.w	fp, fp
 8014b16:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 8014b1a:	f007 ff79 	bl	801ca10 <TFT_SetFont>
 8014b1e:	fa1f fa8a 	uxth.w	sl, sl
 8014b22:	222d      	movs	r2, #45	; 0x2d
 8014b24:	4629      	mov	r1, r5
 8014b26:	4658      	mov	r0, fp
 8014b28:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 8014b2c:	f008 f83a 	bl	801cba4 <TFT_DrawChar>
 8014b30:	fa1f f989 	uxth.w	r9, r9
 8014b34:	2220      	movs	r2, #32
 8014b36:	4629      	mov	r1, r5
 8014b38:	4650      	mov	r0, sl
 8014b3a:	f008 f833 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014b3e:	b2be      	uxth	r6, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014b40:	222d      	movs	r2, #45	; 0x2d
 8014b42:	4629      	mov	r1, r5
 8014b44:	4648      	mov	r0, r9
 8014b46:	f008 f82d 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014b4a:	222d      	movs	r2, #45	; 0x2d
 8014b4c:	4631      	mov	r1, r6
 8014b4e:	4658      	mov	r0, fp
 8014b50:	f008 f828 	bl	801cba4 <TFT_DrawChar>
 8014b54:	2220      	movs	r2, #32
 8014b56:	4631      	mov	r1, r6
 8014b58:	4650      	mov	r0, sl
 8014b5a:	f008 f823 	bl	801cba4 <TFT_DrawChar>
 8014b5e:	222d      	movs	r2, #45	; 0x2d
 8014b60:	4631      	mov	r1, r6
 8014b62:	4648      	mov	r0, r9
 8014b64:	f008 f81e 	bl	801cba4 <TFT_DrawChar>
		old_nanxy = 1;
 8014b68:	2301      	movs	r3, #1
 8014b6a:	f888 3000 	strb.w	r3, [r8]
		
		sprintf (buffer, "%.4f", Valuey);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanxy = 0;
	}
	TFT_SetTextColor(TFT_White);
 8014b6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014b72:	f007 ff53 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014b76:	2063      	movs	r0, #99	; 0x63
 8014b78:	f007 ff56 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_small);
 8014b7c:	4822      	ldr	r0, [pc, #136]	; (8014c08 <GUI_Text_xy_Measure+0x174>)
 8014b7e:	f007 ff47 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'x'-65);
 8014b82:	4629      	mov	r1, r5
 8014b84:	4620      	mov	r0, r4
 8014b86:	2237      	movs	r2, #55	; 0x37
 8014b88:	f008 f80c 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'y'-65);
 8014b8c:	2238      	movs	r2, #56	; 0x38
 8014b8e:	b2b9      	uxth	r1, r7
 8014b90:	4620      	mov	r0, r4
 8014b92:	f008 f807 	bl	801cba4 <TFT_DrawChar>
	
}	
 8014b96:	b005      	add	sp, #20
 8014b98:	ecbd 8b02 	vpop	{d8}
 8014b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ba4:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8014ba8:	2e00      	cmp	r6, #0
 8014baa:	bf08      	it	eq
 8014bac:	4610      	moveq	r0, r2
 8014bae:	f007 ff35 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 8014bb2:	4816      	ldr	r0, [pc, #88]	; (8014c0c <GUI_Text_xy_Measure+0x178>)
 8014bb4:	f007 ff2c 	bl	801ca10 <TFT_SetFont>
		sprintf (buffer, "%.4f", Valuex);
 8014bb8:	ee18 0a90 	vmov	r0, s17
 8014bbc:	f7eb fcdc 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014bc0:	f104 0646 	add.w	r6, r4, #70	; 0x46
		sprintf (buffer, "%.4f", Valuex);
 8014bc4:	4602      	mov	r2, r0
 8014bc6:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014bc8:	b2b6      	uxth	r6, r6
		sprintf (buffer, "%.4f", Valuex);
 8014bca:	4911      	ldr	r1, [pc, #68]	; (8014c10 <GUI_Text_xy_Measure+0x17c>)
 8014bcc:	a802      	add	r0, sp, #8
 8014bce:	f00b fb61 	bl	8020294 <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014bd2:	2303      	movs	r3, #3
 8014bd4:	aa02      	add	r2, sp, #8
 8014bd6:	4629      	mov	r1, r5
 8014bd8:	4630      	mov	r0, r6
 8014bda:	f008 f83b 	bl	801cc54 <TFT_DisplayString>
		sprintf (buffer, "%.4f", Valuey);
 8014bde:	ee18 0a10 	vmov	r0, s16
 8014be2:	f7eb fcc9 	bl	8000578 <__aeabi_f2d>
 8014be6:	4602      	mov	r2, r0
 8014be8:	460b      	mov	r3, r1
 8014bea:	a802      	add	r0, sp, #8
 8014bec:	4908      	ldr	r1, [pc, #32]	; (8014c10 <GUI_Text_xy_Measure+0x17c>)
 8014bee:	f00b fb51 	bl	8020294 <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8014bf2:	2303      	movs	r3, #3
 8014bf4:	aa02      	add	r2, sp, #8
 8014bf6:	b2b9      	uxth	r1, r7
 8014bf8:	4630      	mov	r0, r6
 8014bfa:	f008 f82b 	bl	801cc54 <TFT_DisplayString>
		old_nanxy = 0;
 8014bfe:	f888 9000 	strb.w	r9, [r8]
 8014c02:	e7b4      	b.n	8014b6e <GUI_Text_xy_Measure+0xda>
 8014c04:	200001e8 	.word	0x200001e8
 8014c08:	200001f8 	.word	0x200001f8
 8014c0c:	200001f0 	.word	0x200001f0
 8014c10:	08031d6f 	.word	0x08031d6f
 8014c14:	20005740 	.word	0x20005740

08014c18 <GUI_Text_uv_Measure>:
uint8_t old_nanuv = 0;
void GUI_Text_uv_Measure(uint16_t X, uint16_t Y, float ValueU, float ValueV, uint8_t nope, uint8_t grey)
{
 8014c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c1c:	ed2d 8b02 	vpush	{d8}
 8014c20:	b087      	sub	sp, #28
 8014c22:	4604      	mov	r4, r0
 8014c24:	469a      	mov	sl, r3
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 8014c26:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8014c2a:	2300      	movs	r3, #0
{
 8014c2c:	460d      	mov	r5, r1
 8014c2e:	eeb0 8a40 	vmov.f32	s16, s0
 8014c32:	ee10 9a90 	vmov	r9, s1
 8014c36:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8014c38:	9304      	str	r3, [sp, #16]
 8014c3a:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8014c3e:	f007 feed 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014c42:	2063      	movs	r0, #99	; 0x63
 8014c44:	f007 fef0 	bl	801ca28 <TFT_SetBackColor>
	
	if((ValueU == 0 && (ValueV >0.6 && ValueV <0.6001)) || nope){
 8014c48:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c50:	4f5d      	ldr	r7, [pc, #372]	; (8014dc8 <GUI_Text_uv_Measure+0x1b0>)
 8014c52:	f105 0623 	add.w	r6, r5, #35	; 0x23
 8014c56:	d112      	bne.n	8014c7e <GUI_Text_uv_Measure+0x66>
 8014c58:	4648      	mov	r0, r9
 8014c5a:	f7eb fc8d 	bl	8000578 <__aeabi_f2d>
 8014c5e:	a356      	add	r3, pc, #344	; (adr r3, 8014db8 <GUI_Text_uv_Measure+0x1a0>)
 8014c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014c68:	f7eb ff6a 	bl	8000b40 <__aeabi_dcmpgt>
 8014c6c:	b138      	cbz	r0, 8014c7e <GUI_Text_uv_Measure+0x66>
 8014c6e:	a354      	add	r3, pc, #336	; (adr r3, 8014dc0 <GUI_Text_uv_Measure+0x1a8>)
 8014c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014c78:	f7eb ff44 	bl	8000b04 <__aeabi_dcmplt>
 8014c7c:	b910      	cbnz	r0, 8014c84 <GUI_Text_uv_Measure+0x6c>
 8014c7e:	f1b8 0f00 	cmp.w	r8, #0
 8014c82:	d064      	beq.n	8014d4e <GUI_Text_uv_Measure+0x136>
		if(!old_nanuv){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 8014c84:	783b      	ldrb	r3, [r7, #0]
 8014c86:	b96b      	cbnz	r3, 8014ca4 <GUI_Text_uv_Measure+0x8c>
 8014c88:	2163      	movs	r1, #99	; 0x63
 8014c8a:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8014c8e:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8014c92:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8014c96:	9100      	str	r1, [sp, #0]
 8014c98:	b29b      	uxth	r3, r3
 8014c9a:	b292      	uxth	r2, r2
 8014c9c:	4629      	mov	r1, r5
 8014c9e:	b280      	uxth	r0, r0
 8014ca0:	f007 fc8d 	bl	801c5be <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014ca4:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 8014ca8:	4848      	ldr	r0, [pc, #288]	; (8014dcc <GUI_Text_uv_Measure+0x1b4>)
 8014caa:	fa1f fb8b 	uxth.w	fp, fp
 8014cae:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 8014cb2:	f007 fead 	bl	801ca10 <TFT_SetFont>
 8014cb6:	fa1f fa8a 	uxth.w	sl, sl
 8014cba:	222d      	movs	r2, #45	; 0x2d
 8014cbc:	4629      	mov	r1, r5
 8014cbe:	4658      	mov	r0, fp
 8014cc0:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 8014cc4:	f007 ff6e 	bl	801cba4 <TFT_DrawChar>
 8014cc8:	fa1f f989 	uxth.w	r9, r9
 8014ccc:	2220      	movs	r2, #32
 8014cce:	4629      	mov	r1, r5
 8014cd0:	4650      	mov	r0, sl
 8014cd2:	f007 ff67 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014cd6:	fa1f f886 	uxth.w	r8, r6
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8014cda:	222d      	movs	r2, #45	; 0x2d
 8014cdc:	4629      	mov	r1, r5
 8014cde:	4648      	mov	r0, r9
 8014ce0:	f007 ff60 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8014ce4:	222d      	movs	r2, #45	; 0x2d
 8014ce6:	4641      	mov	r1, r8
 8014ce8:	4658      	mov	r0, fp
 8014cea:	f007 ff5b 	bl	801cba4 <TFT_DrawChar>
 8014cee:	2220      	movs	r2, #32
 8014cf0:	4641      	mov	r1, r8
 8014cf2:	4650      	mov	r0, sl
 8014cf4:	f007 ff56 	bl	801cba4 <TFT_DrawChar>
 8014cf8:	222d      	movs	r2, #45	; 0x2d
 8014cfa:	4641      	mov	r1, r8
 8014cfc:	4648      	mov	r0, r9
 8014cfe:	f007 ff51 	bl	801cba4 <TFT_DrawChar>
		old_nanuv = 1;
 8014d02:	2301      	movs	r3, #1
 8014d04:	703b      	strb	r3, [r7, #0]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
		sprintf (buffer, "%.4f", ValueV);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanuv = 0;
	}
	TFT_SetTextColor(TFT_White);
 8014d06:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font26EN_arch_small);
	TFT_DrawChar(X+15, Y, 'z'-64);
 8014d0a:	f104 070f 	add.w	r7, r4, #15
	TFT_SetTextColor(TFT_White);
 8014d0e:	f007 fe85 	bl	801ca1c <TFT_SetTextColor>
	TFT_DrawChar(X+15, Y, 'z'-64);
 8014d12:	b2bf      	uxth	r7, r7
	TFT_SetFont(&Font26EN_arch_small);
 8014d14:	482e      	ldr	r0, [pc, #184]	; (8014dd0 <GUI_Text_uv_Measure+0x1b8>)
 8014d16:	f007 fe7b 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+15, Y, 'z'-64);
 8014d1a:	4629      	mov	r1, r5
 8014d1c:	4638      	mov	r0, r7
 8014d1e:	223a      	movs	r2, #58	; 0x3a
 8014d20:	f007 ff40 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'u'-65);
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 8014d24:	b2b6      	uxth	r6, r6
	TFT_DrawChar(X, Y, 'u'-65);
 8014d26:	4629      	mov	r1, r5
 8014d28:	4620      	mov	r0, r4
 8014d2a:	2234      	movs	r2, #52	; 0x34
 8014d2c:	f007 ff3a 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 8014d30:	4631      	mov	r1, r6
 8014d32:	4638      	mov	r0, r7
 8014d34:	223a      	movs	r2, #58	; 0x3a
 8014d36:	f007 ff35 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'v'-65);
 8014d3a:	2235      	movs	r2, #53	; 0x35
 8014d3c:	4631      	mov	r1, r6
 8014d3e:	4620      	mov	r0, r4
 8014d40:	f007 ff30 	bl	801cba4 <TFT_DrawChar>
}	
 8014d44:	b007      	add	sp, #28
 8014d46:	ecbd 8b02 	vpop	{d8}
 8014d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014d52:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8014d56:	f1ba 0f00 	cmp.w	sl, #0
 8014d5a:	bf08      	it	eq
 8014d5c:	4618      	moveq	r0, r3
 8014d5e:	f007 fe5d 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 8014d62:	481c      	ldr	r0, [pc, #112]	; (8014dd4 <GUI_Text_uv_Measure+0x1bc>)
 8014d64:	f007 fe54 	bl	801ca10 <TFT_SetFont>
		sprintf (buffer, "%.4f", ValueU);
 8014d68:	ee18 0a10 	vmov	r0, s16
 8014d6c:	f7eb fc04 	bl	8000578 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014d70:	f104 0a46 	add.w	sl, r4, #70	; 0x46
		sprintf (buffer, "%.4f", ValueU);
 8014d74:	4602      	mov	r2, r0
 8014d76:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014d78:	fa1f fa8a 	uxth.w	sl, sl
		sprintf (buffer, "%.4f", ValueU);
 8014d7c:	4916      	ldr	r1, [pc, #88]	; (8014dd8 <GUI_Text_uv_Measure+0x1c0>)
 8014d7e:	a804      	add	r0, sp, #16
 8014d80:	f00b fa88 	bl	8020294 <sprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8014d84:	2303      	movs	r3, #3
 8014d86:	aa04      	add	r2, sp, #16
 8014d88:	4629      	mov	r1, r5
 8014d8a:	4650      	mov	r0, sl
 8014d8c:	f007 ff62 	bl	801cc54 <TFT_DisplayString>
		sprintf (buffer, "%.4f", ValueV);
 8014d90:	4648      	mov	r0, r9
 8014d92:	f7eb fbf1 	bl	8000578 <__aeabi_f2d>
 8014d96:	4602      	mov	r2, r0
 8014d98:	460b      	mov	r3, r1
 8014d9a:	a804      	add	r0, sp, #16
 8014d9c:	490e      	ldr	r1, [pc, #56]	; (8014dd8 <GUI_Text_uv_Measure+0x1c0>)
 8014d9e:	f00b fa79 	bl	8020294 <sprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8014da2:	2303      	movs	r3, #3
 8014da4:	aa04      	add	r2, sp, #16
 8014da6:	b2b1      	uxth	r1, r6
 8014da8:	4650      	mov	r0, sl
 8014daa:	f007 ff53 	bl	801cc54 <TFT_DisplayString>
		old_nanuv = 0;
 8014dae:	f887 8000 	strb.w	r8, [r7]
 8014db2:	e7a8      	b.n	8014d06 <GUI_Text_uv_Measure+0xee>
 8014db4:	f3af 8000 	nop.w
 8014db8:	33333333 	.word	0x33333333
 8014dbc:	3fe33333 	.word	0x3fe33333
 8014dc0:	ea4a8c15 	.word	0xea4a8c15
 8014dc4:	3fe33404 	.word	0x3fe33404
 8014dc8:	2000573f 	.word	0x2000573f
 8014dcc:	200001e8 	.word	0x200001e8
 8014dd0:	200001f8 	.word	0x200001f8
 8014dd4:	200001f0 	.word	0x200001f0
 8014dd8:	08031d6f 	.word	0x08031d6f

08014ddc <GUI_Text_CCT_Measure>:

uint8_t old_numCCT = 10, old_nan_CCT = 0;
void GUI_Text_CCT_Measure(uint16_t X, uint16_t Y, uint16_t Value, uint8_t nope, uint8_t grey)
{	
 8014ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014de0:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8014de2:	4b71      	ldr	r3, [pc, #452]	; (8014fa8 <GUI_Text_CCT_Measure+0x1cc>)
{	
 8014de4:	4691      	mov	r9, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8014de6:	781a      	ldrb	r2, [r3, #0]
 8014de8:	4b70      	ldr	r3, [pc, #448]	; (8014fac <GUI_Text_CCT_Measure+0x1d0>)
 8014dea:	781b      	ldrb	r3, [r3, #0]
 8014dec:	429a      	cmp	r2, r3
{	
 8014dee:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8014df0:	bf1c      	itt	ne
 8014df2:	4b6f      	ldrne	r3, [pc, #444]	; (8014fb0 <GUI_Text_CCT_Measure+0x1d4>)
 8014df4:	2200      	movne	r2, #0
	char buffer[9] = {0};
 8014df6:	f04f 0600 	mov.w	r6, #0
{	
 8014dfa:	4605      	mov	r5, r0
	uint8_t	delta_pos = 180, number = 0;
	uint32_t dec = 10;
	
	
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014dfc:	f04f 0063 	mov.w	r0, #99	; 0x63
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8014e00:	bf18      	it	ne
 8014e02:	701a      	strbne	r2, [r3, #0]
{	
 8014e04:	460c      	mov	r4, r1
	char buffer[9] = {0};
 8014e06:	9603      	str	r6, [sp, #12]
 8014e08:	9604      	str	r6, [sp, #16]
 8014e0a:	f88d 6014 	strb.w	r6, [sp, #20]
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014e0e:	f007 fe0b 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8014e12:	4868      	ldr	r0, [pc, #416]	; (8014fb4 <GUI_Text_CCT_Measure+0x1d8>)
 8014e14:	f007 fdfc 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%d", Value);
 8014e18:	464a      	mov	r2, r9
 8014e1a:	4967      	ldr	r1, [pc, #412]	; (8014fb8 <GUI_Text_CCT_Measure+0x1dc>)
 8014e1c:	a803      	add	r0, sp, #12
 8014e1e:	f00b fa39 	bl	8020294 <sprintf>
 8014e22:	f04f 0804 	mov.w	r8, #4
	uint32_t dec = 10;
 8014e26:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 180, number = 0;
 8014e2a:	27b4      	movs	r7, #180	; 0xb4
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 8014e2c:	fbb9 f0fa 	udiv	r0, r9, sl
 8014e30:	f7eb fb80 	bl	8000534 <__aeabi_ui2d>
 8014e34:	2200      	movs	r2, #0
 8014e36:	4b61      	ldr	r3, [pc, #388]	; (8014fbc <GUI_Text_CCT_Measure+0x1e0>)
 8014e38:	f7eb fe78 	bl	8000b2c <__aeabi_dcmpge>
 8014e3c:	b130      	cbz	r0, 8014e4c <GUI_Text_CCT_Measure+0x70>
		{
			dec *= 10;
 8014e3e:	230a      	movs	r3, #10
			delta_pos-=23;
 8014e40:	3f17      	subs	r7, #23
			number++;
 8014e42:	3601      	adds	r6, #1
			dec *= 10;
 8014e44:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8014e48:	b2ff      	uxtb	r7, r7
			number++;
 8014e4a:	b2f6      	uxtb	r6, r6
 8014e4c:	f108 38ff 	add.w	r8, r8, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8014e50:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8014e54:	d1ea      	bne.n	8014e2c <GUI_Text_CCT_Measure+0x50>
		}
	}
	
	if((Value == 0 || nope) & !old_nan_CCT){old_nan_CCT = 1; TFT_FillRectangle(X+40, Y, X+205, Y+25, TFT_Black_Bkgr);TFT_SetTextColor(TFT_White); TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+125, Y+4, 'N'-33);TFT_DrawChar(X+150, Y+4, 'A'-33);TFT_DrawChar(X+175, Y+4, 'N'-33);}
 8014e56:	f1b9 0f00 	cmp.w	r9, #0
 8014e5a:	d063      	beq.n	8014f24 <GUI_Text_CCT_Measure+0x148>
 8014e5c:	f11b 0200 	adds.w	r2, fp, #0
 8014e60:	bf18      	it	ne
 8014e62:	2201      	movne	r2, #1
 8014e64:	4b52      	ldr	r3, [pc, #328]	; (8014fb0 <GUI_Text_CCT_Measure+0x1d4>)
 8014e66:	7819      	ldrb	r1, [r3, #0]
 8014e68:	4698      	mov	r8, r3
 8014e6a:	2900      	cmp	r1, #0
 8014e6c:	d15c      	bne.n	8014f28 <GUI_Text_CCT_Measure+0x14c>
 8014e6e:	2a00      	cmp	r2, #0
 8014e70:	d05a      	beq.n	8014f28 <GUI_Text_CCT_Measure+0x14c>
 8014e72:	2201      	movs	r2, #1
 8014e74:	701a      	strb	r2, [r3, #0]
 8014e76:	2163      	movs	r1, #99	; 0x63
 8014e78:	f104 0319 	add.w	r3, r4, #25
 8014e7c:	f105 02cd 	add.w	r2, r5, #205	; 0xcd
 8014e80:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014e84:	b29b      	uxth	r3, r3
 8014e86:	b292      	uxth	r2, r2
 8014e88:	9100      	str	r1, [sp, #0]
 8014e8a:	b280      	uxth	r0, r0
 8014e8c:	4621      	mov	r1, r4
 8014e8e:	f007 fb96 	bl	801c5be <TFT_FillRectangle>
 8014e92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014e96:	f007 fdc1 	bl	801ca1c <TFT_SetTextColor>
 8014e9a:	1d26      	adds	r6, r4, #4
 8014e9c:	4848      	ldr	r0, [pc, #288]	; (8014fc0 <GUI_Text_CCT_Measure+0x1e4>)
 8014e9e:	f007 fdb7 	bl	801ca10 <TFT_SetFont>
 8014ea2:	b2b6      	uxth	r6, r6
 8014ea4:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 8014ea8:	222d      	movs	r2, #45	; 0x2d
 8014eaa:	4631      	mov	r1, r6
 8014eac:	b280      	uxth	r0, r0
 8014eae:	f007 fe79 	bl	801cba4 <TFT_DrawChar>
 8014eb2:	f105 0096 	add.w	r0, r5, #150	; 0x96
 8014eb6:	2220      	movs	r2, #32
 8014eb8:	4631      	mov	r1, r6
 8014eba:	b280      	uxth	r0, r0
 8014ebc:	f007 fe72 	bl	801cba4 <TFT_DrawChar>
 8014ec0:	f105 00af 	add.w	r0, r5, #175	; 0xaf
 8014ec4:	222d      	movs	r2, #45	; 0x2d
 8014ec6:	4631      	mov	r1, r6
 8014ec8:	b280      	uxth	r0, r0
 8014eca:	f007 fe6b 	bl	801cba4 <TFT_DrawChar>
	old_numCCT = number;
		
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
	}
	
	TFT_SetTextColor(TFT_White);
 8014ece:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8014ed2:	f007 fda3 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8014ed6:	2063      	movs	r0, #99	; 0x63
 8014ed8:	f007 fda6 	bl	801ca28 <TFT_SetBackColor>
	if(Language_status == Ru ){
 8014edc:	4b39      	ldr	r3, [pc, #228]	; (8014fc4 <GUI_Text_CCT_Measure+0x1e8>)
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	f105 06d7 	add.w	r6, r5, #215	; 0xd7
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d152      	bne.n	8014f8e <GUI_Text_CCT_Measure+0x1b2>
			TFT_SetFont(&Font26RU_arch_big);
 8014ee8:	4837      	ldr	r0, [pc, #220]	; (8014fc8 <GUI_Text_CCT_Measure+0x1ec>)
 8014eea:	f007 fd91 	bl	801ca10 <TFT_SetFont>
			TFT_DrawCharRus(X, Y, 'К'-17);
 8014eee:	2289      	movs	r2, #137	; 0x89
 8014ef0:	4621      	mov	r1, r4
 8014ef2:	4628      	mov	r0, r5
 8014ef4:	f007 fd9e 	bl	801ca34 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+24, Y, 'Ц'-17);
 8014ef8:	f105 0018 	add.w	r0, r5, #24
 8014efc:	2295      	movs	r2, #149	; 0x95
 8014efe:	4621      	mov	r1, r4
 8014f00:	b280      	uxth	r0, r0
 8014f02:	f007 fd97 	bl	801ca34 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+45, Y, 'Т'-17);
 8014f06:	f105 002d 	add.w	r0, r5, #45	; 0x2d
 8014f0a:	2291      	movs	r2, #145	; 0x91
 8014f0c:	4621      	mov	r1, r4
 8014f0e:	b280      	uxth	r0, r0
 8014f10:	f007 fd90 	bl	801ca34 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y, 'К'-17);
 8014f14:	2289      	movs	r2, #137	; 0x89
 8014f16:	4621      	mov	r1, r4
 8014f18:	b2b0      	uxth	r0, r6
 8014f1a:	f007 fd8b 	bl	801ca34 <TFT_DrawCharRus>
		{
			GUI_TextEn_CCT(X, Y+4);

			TFT_DrawChar(X+215, Y+4, 'K'-33);
		}	
}
 8014f1e:	b007      	add	sp, #28
 8014f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f24:	2201      	movs	r2, #1
 8014f26:	e79d      	b.n	8014e64 <GUI_Text_CCT_Measure+0x88>
	else if(!nope & Value != 0){
 8014f28:	f1bb 0f00 	cmp.w	fp, #0
 8014f2c:	d1cf      	bne.n	8014ece <GUI_Text_CCT_Measure+0xf2>
 8014f2e:	f1b9 0f00 	cmp.w	r9, #0
 8014f32:	d0cc      	beq.n	8014ece <GUI_Text_CCT_Measure+0xf2>
	if(number < old_numCCT )
 8014f34:	4b25      	ldr	r3, [pc, #148]	; (8014fcc <GUI_Text_CCT_Measure+0x1f0>)
 8014f36:	781a      	ldrb	r2, [r3, #0]
 8014f38:	42b2      	cmp	r2, r6
 8014f3a:	4699      	mov	r9, r3
 8014f3c:	d90d      	bls.n	8014f5a <GUI_Text_CCT_Measure+0x17e>
		TFT_FillRectangle(X+40, Y, X+205, Y+25, TFT_Black_Bkgr);
 8014f3e:	2163      	movs	r1, #99	; 0x63
 8014f40:	f104 0319 	add.w	r3, r4, #25
 8014f44:	f105 02cd 	add.w	r2, r5, #205	; 0xcd
 8014f48:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8014f4c:	9100      	str	r1, [sp, #0]
 8014f4e:	b29b      	uxth	r3, r3
 8014f50:	b292      	uxth	r2, r2
 8014f52:	4621      	mov	r1, r4
 8014f54:	b280      	uxth	r0, r0
 8014f56:	f007 fb32 	bl	801c5be <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8014f5a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8014f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014f62:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8014f66:	2800      	cmp	r0, #0
 8014f68:	bf14      	ite	ne
 8014f6a:	4610      	movne	r0, r2
 8014f6c:	4618      	moveq	r0, r3
 8014f6e:	f007 fd55 	bl	801ca1c <TFT_SetTextColor>
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 8014f72:	1ca1      	adds	r1, r4, #2
 8014f74:	19e8      	adds	r0, r5, r7
 8014f76:	2303      	movs	r3, #3
 8014f78:	aa03      	add	r2, sp, #12
 8014f7a:	b289      	uxth	r1, r1
 8014f7c:	b280      	uxth	r0, r0
	old_numCCT = number;
 8014f7e:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 8014f82:	f007 fe67 	bl	801cc54 <TFT_DisplayString>
 8014f86:	2300      	movs	r3, #0
 8014f88:	f888 3000 	strb.w	r3, [r8]
 8014f8c:	e79f      	b.n	8014ece <GUI_Text_CCT_Measure+0xf2>
			GUI_TextEn_CCT(X, Y+4);
 8014f8e:	3404      	adds	r4, #4
 8014f90:	b2a4      	uxth	r4, r4
 8014f92:	4621      	mov	r1, r4
 8014f94:	4628      	mov	r0, r5
 8014f96:	f002 fd07 	bl	80179a8 <GUI_TextEn_CCT>
			TFT_DrawChar(X+215, Y+4, 'K'-33);
 8014f9a:	222a      	movs	r2, #42	; 0x2a
 8014f9c:	4621      	mov	r1, r4
 8014f9e:	b2b0      	uxth	r0, r6
 8014fa0:	f007 fe00 	bl	801cba4 <TFT_DrawChar>
}
 8014fa4:	e7bb      	b.n	8014f1e <GUI_Text_CCT_Measure+0x142>
 8014fa6:	bf00      	nop
 8014fa8:	2000022a 	.word	0x2000022a
 8014fac:	20005701 	.word	0x20005701
 8014fb0:	20005733 	.word	0x20005733
 8014fb4:	200001f0 	.word	0x200001f0
 8014fb8:	08024f89 	.word	0x08024f89
 8014fbc:	3ff00000 	.word	0x3ff00000
 8014fc0:	200001e8 	.word	0x200001e8
 8014fc4:	20005703 	.word	0x20005703
 8014fc8:	20000200 	.word	0x20000200
 8014fcc:	20000232 	.word	0x20000232

08014fd0 <GUI_Text_lambdaD_Measure>:
uint8_t old_lambdaD = 10, old_nan_lambdaD = 0;
void GUI_Text_lambdaD_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 8014fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fd4:	ed2d 8b02 	vpush	{d8}
 8014fd8:	4616      	mov	r6, r2
 8014fda:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014fdc:	4a71      	ldr	r2, [pc, #452]	; (80151a4 <GUI_Text_lambdaD_Measure+0x1d4>)
 8014fde:	4b72      	ldr	r3, [pc, #456]	; (80151a8 <GUI_Text_lambdaD_Measure+0x1d8>)
 8014fe0:	4f72      	ldr	r7, [pc, #456]	; (80151ac <GUI_Text_lambdaD_Measure+0x1dc>)
{	
 8014fe2:	4605      	mov	r5, r0
 8014fe4:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014fe6:	7818      	ldrb	r0, [r3, #0]
 8014fe8:	7811      	ldrb	r1, [r2, #0]
	Value = floor(Value*10)/10.0;
 8014fea:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014fee:	4288      	cmp	r0, r1
	Value = floor(Value*10)/10.0;
 8014ff0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014ff4:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014ff6:	bf18      	it	ne
 8014ff8:	2300      	movne	r3, #0
{	
 8014ffa:	b086      	sub	sp, #24
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8014ffc:	bf18      	it	ne
 8014ffe:	703b      	strbne	r3, [r7, #0]
	Value = floor(Value*10)/10.0;
 8015000:	ee17 0a90 	vmov	r0, s15
 8015004:	4690      	mov	r8, r2
 8015006:	f7eb fab7 	bl	8000578 <__aeabi_f2d>
 801500a:	ec41 0b10 	vmov	d0, r0, r1
 801500e:	f00e f8fb 	bl	8023208 <floor>
	char buffer[9] = {0};
 8015012:	2200      	movs	r2, #0
	Value = floor(Value*10)/10.0;
 8015014:	ec51 0b10 	vmov	r0, r1, d0
	char buffer[9] = {0};
 8015018:	9203      	str	r2, [sp, #12]
 801501a:	9204      	str	r2, [sp, #16]
 801501c:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 122, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
 8015020:	2e00      	cmp	r6, #0
 8015022:	d054      	beq.n	80150ce <GUI_Text_lambdaD_Measure+0xfe>
		{	
			if(!old_nan_lambdaD){
 8015024:	783b      	ldrb	r3, [r7, #0]
 8015026:	bb33      	cbnz	r3, 8015076 <GUI_Text_lambdaD_Measure+0xa6>
				TFT_SetTextColor(TFT_White);
 8015028:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801502c:	f007 fcf6 	bl	801ca1c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015030:	2063      	movs	r0, #99	; 0x63
 8015032:	f007 fcf9 	bl	801ca28 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8015036:	485e      	ldr	r0, [pc, #376]	; (80151b0 <GUI_Text_lambdaD_Measure+0x1e0>)
 8015038:	f007 fcea 	bl	801ca10 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 801503c:	2163      	movs	r1, #99	; 0x63
 801503e:	f104 031a 	add.w	r3, r4, #26
 8015042:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015046:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801504a:	9100      	str	r1, [sp, #0]
 801504c:	b29b      	uxth	r3, r3
 801504e:	b292      	uxth	r2, r2
 8015050:	4621      	mov	r1, r4
 8015052:	b280      	uxth	r0, r0
 8015054:	f007 fab3 	bl	801c5be <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8015058:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801505a:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 801505e:	f88d 300c 	strb.w	r3, [sp, #12]
 8015062:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015066:	aa03      	add	r2, sp, #12
 8015068:	2303      	movs	r3, #3
 801506a:	4621      	mov	r1, r4
 801506c:	b280      	uxth	r0, r0
 801506e:	f007 fdf1 	bl	801cc54 <TFT_DisplayString>
				old_nan_lambdaD = 1;
 8015072:	2301      	movs	r3, #1
 8015074:	703b      	strb	r3, [r7, #0]
	} 
	old_lambdaD = number;
	
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 8015076:	f899 2000 	ldrb.w	r2, [r9]
 801507a:	f898 3000 	ldrb.w	r3, [r8]
 801507e:	429a      	cmp	r2, r3
 8015080:	d020      	beq.n	80150c4 <GUI_Text_lambdaD_Measure+0xf4>
	TFT_SetTextColor(TFT_White);
 8015082:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetBackColor(TFT_Black_Bkgr);
	GUI_Text_lambda_d(X, Y+5);
 8015086:	1d66      	adds	r6, r4, #5
	TFT_SetTextColor(TFT_White);
 8015088:	f007 fcc8 	bl	801ca1c <TFT_SetTextColor>
	GUI_Text_lambda_d(X, Y+5);
 801508c:	b2b6      	uxth	r6, r6
	TFT_SetBackColor(TFT_Black_Bkgr);
 801508e:	2063      	movs	r0, #99	; 0x63
 8015090:	f007 fcca 	bl	801ca28 <TFT_SetBackColor>
	GUI_Text_lambda_d(X, Y+5);
 8015094:	4628      	mov	r0, r5
 8015096:	4631      	mov	r1, r6
 8015098:	f001 fd26 	bl	8016ae8 <GUI_Text_lambda_d>
	if(Language_status == Ru ){
 801509c:	4b45      	ldr	r3, [pc, #276]	; (80151b4 <GUI_Text_lambdaD_Measure+0x1e4>)
 801509e:	781b      	ldrb	r3, [r3, #0]
 80150a0:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
 80150a4:	35d8      	adds	r5, #216	; 0xd8
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d16c      	bne.n	8015184 <GUI_Text_lambdaD_Measure+0x1b4>
			TFT_SetFont(&Font26RU_arch_small);
 80150aa:	4843      	ldr	r0, [pc, #268]	; (80151b8 <GUI_Text_lambdaD_Measure+0x1e8>)
 80150ac:	f007 fcb0 	bl	801ca10 <TFT_SetFont>
			TFT_DrawCharRus(X+200, Y+5, 'н');
 80150b0:	22bd      	movs	r2, #189	; 0xbd
 80150b2:	4631      	mov	r1, r6
 80150b4:	b2b8      	uxth	r0, r7
 80150b6:	f007 fcbd 	bl	801ca34 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+216, Y+5, 'м');
 80150ba:	22bc      	movs	r2, #188	; 0xbc
 80150bc:	4631      	mov	r1, r6
 80150be:	b2a8      	uxth	r0, r5
 80150c0:	f007 fcb8 	bl	801ca34 <TFT_DrawCharRus>
			TFT_SetFont(&Font16EN_arch_small);
			TFT_DrawChar(X+200, Y+10, 'n');
			TFT_DrawChar(X+216, Y+10, 'm');
		}	
	}
}
 80150c4:	b006      	add	sp, #24
 80150c6:	ecbd 8b02 	vpop	{d8}
 80150ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	old_nan_lambdaD = 0;
 80150ce:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80150d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80150d4:	f249 47d2 	movw	r7, #38098	; 0x94d2
	Value = floor(Value*10)/10.0;
 80150d8:	2200      	movs	r2, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80150da:	f1ba 0f00 	cmp.w	sl, #0
 80150de:	bf08      	it	eq
 80150e0:	461f      	moveq	r7, r3
	Value = floor(Value*10)/10.0;
 80150e2:	4b36      	ldr	r3, [pc, #216]	; (80151bc <GUI_Text_lambdaD_Measure+0x1ec>)
 80150e4:	f7eb fbc6 	bl	8000874 <__aeabi_ddiv>
 80150e8:	f7eb fd92 	bl	8000c10 <__aeabi_d2f>
 80150ec:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80150f0:	4638      	mov	r0, r7
 80150f2:	f007 fc93 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80150f6:	2063      	movs	r0, #99	; 0x63
 80150f8:	f007 fc96 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80150fc:	482c      	ldr	r0, [pc, #176]	; (80151b0 <GUI_Text_lambdaD_Measure+0x1e0>)
 80150fe:	f007 fc87 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8015102:	ee18 0a10 	vmov	r0, s16
 8015106:	f7eb fa37 	bl	8000578 <__aeabi_f2d>
 801510a:	4602      	mov	r2, r0
 801510c:	460b      	mov	r3, r1
 801510e:	a803      	add	r0, sp, #12
 8015110:	492b      	ldr	r1, [pc, #172]	; (80151c0 <GUI_Text_lambdaD_Measure+0x1f0>)
 8015112:	f00b f8bf 	bl	8020294 <sprintf>
	uint32_t dec = 10;
 8015116:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8015118:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0;
 801511a:	277a      	movs	r7, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 801511c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8015120:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8015122:	ee07 2a10 	vmov	s14, r2
 8015126:	eef8 6a47 	vcvt.f32.u32	s13, s14
 801512a:	ee88 7a26 	vdiv.f32	s14, s16, s13
 801512e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015136:	db04      	blt.n	8015142 <GUI_Text_lambdaD_Measure+0x172>
			delta_pos-=23;
 8015138:	3f17      	subs	r7, #23
			number++;
 801513a:	3601      	adds	r6, #1
			dec *= 10;
 801513c:	434a      	muls	r2, r1
			delta_pos-=23;
 801513e:	b2ff      	uxtb	r7, r7
			number++;
 8015140:	b2f6      	uxtb	r6, r6
 8015142:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 8015144:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015148:	d1eb      	bne.n	8015122 <GUI_Text_lambdaD_Measure+0x152>
	if(number < old_lambdaD )
 801514a:	4b1e      	ldr	r3, [pc, #120]	; (80151c4 <GUI_Text_lambdaD_Measure+0x1f4>)
 801514c:	781a      	ldrb	r2, [r3, #0]
 801514e:	42b2      	cmp	r2, r6
 8015150:	469a      	mov	sl, r3
 8015152:	d90d      	bls.n	8015170 <GUI_Text_lambdaD_Measure+0x1a0>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015154:	2163      	movs	r1, #99	; 0x63
 8015156:	f104 0319 	add.w	r3, r4, #25
 801515a:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801515e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015162:	9100      	str	r1, [sp, #0]
 8015164:	b29b      	uxth	r3, r3
 8015166:	b292      	uxth	r2, r2
 8015168:	4621      	mov	r1, r4
 801516a:	b280      	uxth	r0, r0
 801516c:	f007 fa27 	bl	801c5be <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015170:	19e8      	adds	r0, r5, r7
 8015172:	2303      	movs	r3, #3
 8015174:	aa03      	add	r2, sp, #12
 8015176:	4621      	mov	r1, r4
 8015178:	b280      	uxth	r0, r0
	old_lambdaD = number;
 801517a:	f88a 6000 	strb.w	r6, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801517e:	f007 fd69 	bl	801cc54 <TFT_DisplayString>
 8015182:	e778      	b.n	8015076 <GUI_Text_lambdaD_Measure+0xa6>
			TFT_DrawChar(X+200, Y+10, 'n');
 8015184:	340a      	adds	r4, #10
 8015186:	b2a4      	uxth	r4, r4
			TFT_SetFont(&Font16EN_arch_small);
 8015188:	480f      	ldr	r0, [pc, #60]	; (80151c8 <GUI_Text_lambdaD_Measure+0x1f8>)
 801518a:	f007 fc41 	bl	801ca10 <TFT_SetFont>
			TFT_DrawChar(X+200, Y+10, 'n');
 801518e:	4621      	mov	r1, r4
 8015190:	b2b8      	uxth	r0, r7
 8015192:	226e      	movs	r2, #110	; 0x6e
 8015194:	f007 fd06 	bl	801cba4 <TFT_DrawChar>
			TFT_DrawChar(X+216, Y+10, 'm');
 8015198:	226d      	movs	r2, #109	; 0x6d
 801519a:	4621      	mov	r1, r4
 801519c:	b2a8      	uxth	r0, r5
 801519e:	f007 fd01 	bl	801cba4 <TFT_DrawChar>
}
 80151a2:	e78f      	b.n	80150c4 <GUI_Text_lambdaD_Measure+0xf4>
 80151a4:	20005701 	.word	0x20005701
 80151a8:	2000022a 	.word	0x2000022a
 80151ac:	2000573e 	.word	0x2000573e
 80151b0:	200001f0 	.word	0x200001f0
 80151b4:	20005703 	.word	0x20005703
 80151b8:	20000208 	.word	0x20000208
 80151bc:	40240000 	.word	0x40240000
 80151c0:	08031d65 	.word	0x08031d65
 80151c4:	20000230 	.word	0x20000230
 80151c8:	200001c0 	.word	0x200001c0

080151cc <GUI_Text_deltaE_Measure>:
}


uint8_t old_deltaE = 10, old_nan_deltaE = 0;
void GUI_Text_deltaE_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{	
 80151cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80151d0:	ed2d 8b02 	vpush	{d8}
 80151d4:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 80151d6:	4b76      	ldr	r3, [pc, #472]	; (80153b0 <GUI_Text_deltaE_Measure+0x1e4>)
 80151d8:	4e76      	ldr	r6, [pc, #472]	; (80153b4 <GUI_Text_deltaE_Measure+0x1e8>)
{	
 80151da:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 80151dc:	781a      	ldrb	r2, [r3, #0]
 80151de:	4b76      	ldr	r3, [pc, #472]	; (80153b8 <GUI_Text_deltaE_Measure+0x1ec>)
 80151e0:	781b      	ldrb	r3, [r3, #0]
 80151e2:	429a      	cmp	r2, r3
{	
 80151e4:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 80151e6:	bf1c      	itt	ne
 80151e8:	2300      	movne	r3, #0
 80151ea:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 80151ec:	2300      	movs	r3, #0
 80151ee:	9303      	str	r3, [sp, #12]
 80151f0:	9304      	str	r3, [sp, #16]
 80151f2:	f88d 3014 	strb.w	r3, [sp, #20]
{	
 80151f6:	4604      	mov	r4, r0
 80151f8:	460d      	mov	r5, r1
 80151fa:	eeb0 8a40 	vmov.f32	s16, s0
	uint8_t	delta_pos = 140, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_deltaE){
 80151fe:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 8015200:	2f00      	cmp	r7, #0
 8015202:	d047      	beq.n	8015294 <GUI_Text_deltaE_Measure+0xc8>
			if(!old_nan_deltaE){
 8015204:	bb33      	cbnz	r3, 8015254 <GUI_Text_deltaE_Measure+0x88>
				TFT_SetTextColor(TFT_White);
 8015206:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801520a:	f007 fc07 	bl	801ca1c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801520e:	2063      	movs	r0, #99	; 0x63
 8015210:	f007 fc0a 	bl	801ca28 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8015214:	4869      	ldr	r0, [pc, #420]	; (80153bc <GUI_Text_deltaE_Measure+0x1f0>)
 8015216:	f007 fbfb 	bl	801ca10 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 801521a:	2163      	movs	r1, #99	; 0x63
 801521c:	f105 031a 	add.w	r3, r5, #26
 8015220:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015224:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015228:	9100      	str	r1, [sp, #0]
 801522a:	b29b      	uxth	r3, r3
 801522c:	b292      	uxth	r2, r2
 801522e:	4629      	mov	r1, r5
 8015230:	b280      	uxth	r0, r0
 8015232:	f007 f9c4 	bl	801c5be <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8015236:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015238:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 801523c:	f88d 300c 	strb.w	r3, [sp, #12]
 8015240:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015244:	aa03      	add	r2, sp, #12
 8015246:	2303      	movs	r3, #3
 8015248:	4629      	mov	r1, r5
 801524a:	b280      	uxth	r0, r0
 801524c:	f007 fd02 	bl	801cc54 <TFT_DisplayString>
				old_nan_deltaE = 1;
 8015250:	2301      	movs	r3, #1
 8015252:	7033      	strb	r3, [r6, #0]
	
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8015254:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015258:	f007 fbe0 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801525c:	2063      	movs	r0, #99	; 0x63
 801525e:	f007 fbe3 	bl	801ca28 <TFT_SetBackColor>

	TFT_SetFont(&Font16EN_arch_big);
 8015262:	4857      	ldr	r0, [pc, #348]	; (80153c0 <GUI_Text_deltaE_Measure+0x1f4>)
 8015264:	f007 fbd4 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y+6, '~'+2);
 8015268:	1da9      	adds	r1, r5, #6
 801526a:	2280      	movs	r2, #128	; 0x80
 801526c:	b289      	uxth	r1, r1
 801526e:	4620      	mov	r0, r4
 8015270:	f007 fc98 	bl	801cba4 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8015274:	4853      	ldr	r0, [pc, #332]	; (80153c4 <GUI_Text_deltaE_Measure+0x1f8>)
 8015276:	f007 fbcb 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'E'-33);
 801527a:	1ca9      	adds	r1, r5, #2
 801527c:	f104 0012 	add.w	r0, r4, #18
 8015280:	2224      	movs	r2, #36	; 0x24
 8015282:	b289      	uxth	r1, r1
 8015284:	b280      	uxth	r0, r0
 8015286:	f007 fc8d 	bl	801cba4 <TFT_DrawChar>

}
 801528a:	b007      	add	sp, #28
 801528c:	ecbd 8b02 	vpop	{d8}
 8015290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(old_nan_deltaE){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);}
 8015294:	b163      	cbz	r3, 80152b0 <GUI_Text_deltaE_Measure+0xe4>
 8015296:	f101 031a 	add.w	r3, r1, #26
 801529a:	f100 02fa 	add.w	r2, r0, #250	; 0xfa
 801529e:	2163      	movs	r1, #99	; 0x63
 80152a0:	3028      	adds	r0, #40	; 0x28
 80152a2:	9100      	str	r1, [sp, #0]
 80152a4:	b29b      	uxth	r3, r3
 80152a6:	b292      	uxth	r2, r2
 80152a8:	4629      	mov	r1, r5
 80152aa:	b280      	uxth	r0, r0
 80152ac:	f007 f987 	bl	801c5be <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80152b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	old_nan_deltaE = 0;
 80152b4:	f04f 0800 	mov.w	r8, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80152b8:	f249 40d2 	movw	r0, #38098	; 0x94d2
 80152bc:	45c1      	cmp	r9, r8
 80152be:	bf08      	it	eq
 80152c0:	4618      	moveq	r0, r3
	old_nan_deltaE = 0;
 80152c2:	f886 8000 	strb.w	r8, [r6]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80152c6:	f007 fba9 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80152ca:	2063      	movs	r0, #99	; 0x63
 80152cc:	f007 fbac 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80152d0:	483a      	ldr	r0, [pc, #232]	; (80153bc <GUI_Text_deltaE_Measure+0x1f0>)
 80152d2:	f007 fb9d 	bl	801ca10 <TFT_SetFont>
	Value = floor(Value*10)/10.0;
 80152d6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80152da:	ee68 7a27 	vmul.f32	s15, s16, s15
	uint8_t	delta_pos = 140, sign = 0, number = 0;
 80152de:	268c      	movs	r6, #140	; 0x8c
	Value = floor(Value*10)/10.0;
 80152e0:	ee17 0a90 	vmov	r0, s15
 80152e4:	f7eb f948 	bl	8000578 <__aeabi_f2d>
 80152e8:	ec41 0b10 	vmov	d0, r0, r1
 80152ec:	f00d ff8c 	bl	8023208 <floor>
 80152f0:	2200      	movs	r2, #0
 80152f2:	4b35      	ldr	r3, [pc, #212]	; (80153c8 <GUI_Text_deltaE_Measure+0x1fc>)
 80152f4:	ec51 0b10 	vmov	r0, r1, d0
 80152f8:	f7eb fabc 	bl	8000874 <__aeabi_ddiv>
 80152fc:	f7eb fc88 	bl	8000c10 <__aeabi_d2f>
 8015300:	ee08 0a10 	vmov	s16, r0
	if(Value < 0){Value *= -1; sign = 1;}
 8015304:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8015308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801530c:	bf48      	it	mi
 801530e:	eeb1 8a48 	vnegmi.f32	s16, s16
	sprintf (buffer, "%.2f", Value);
 8015312:	ee18 0a10 	vmov	r0, s16
	if(Value < 0){Value *= -1; sign = 1;}
 8015316:	bf48      	it	mi
 8015318:	f04f 0801 	movmi.w	r8, #1
	sprintf (buffer, "%.2f", Value);
 801531c:	f7eb f92c 	bl	8000578 <__aeabi_f2d>
 8015320:	4602      	mov	r2, r0
 8015322:	460b      	mov	r3, r1
 8015324:	a803      	add	r0, sp, #12
 8015326:	4929      	ldr	r1, [pc, #164]	; (80153cc <GUI_Text_deltaE_Measure+0x200>)
 8015328:	f00a ffb4 	bl	8020294 <sprintf>
	uint32_t dec = 10;
 801532c:	220a      	movs	r2, #10
	sprintf (buffer, "%.2f", Value);
 801532e:	2304      	movs	r3, #4
		if((Value/(dec)) >= 1.0)
 8015330:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8015334:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8015336:	ee07 2a10 	vmov	s14, r2
 801533a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 801533e:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8015342:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801534a:	db04      	blt.n	8015356 <GUI_Text_deltaE_Measure+0x18a>
			delta_pos-=23;
 801534c:	3e17      	subs	r6, #23
			number++;
 801534e:	3701      	adds	r7, #1
			dec *= 10;
 8015350:	434a      	muls	r2, r1
			delta_pos-=23;
 8015352:	b2f6      	uxtb	r6, r6
			number++;
 8015354:	b2ff      	uxtb	r7, r7
 8015356:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015358:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801535c:	d1eb      	bne.n	8015336 <GUI_Text_deltaE_Measure+0x16a>
	if(number < old_deltaE )
 801535e:	4b1c      	ldr	r3, [pc, #112]	; (80153d0 <GUI_Text_deltaE_Measure+0x204>)
 8015360:	781a      	ldrb	r2, [r3, #0]
 8015362:	42ba      	cmp	r2, r7
 8015364:	4699      	mov	r9, r3
 8015366:	d90d      	bls.n	8015384 <GUI_Text_deltaE_Measure+0x1b8>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015368:	2163      	movs	r1, #99	; 0x63
 801536a:	f105 0319 	add.w	r3, r5, #25
 801536e:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015372:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015376:	9100      	str	r1, [sp, #0]
 8015378:	b29b      	uxth	r3, r3
 801537a:	b292      	uxth	r2, r2
 801537c:	4629      	mov	r1, r5
 801537e:	b280      	uxth	r0, r0
 8015380:	f007 f91d 	bl	801c5be <TFT_FillRectangle>
	old_deltaE = number;
 8015384:	f889 7000 	strb.w	r7, [r9]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}
 8015388:	f1b8 0f00 	cmp.w	r8, #0
 801538c:	d007      	beq.n	801539e <GUI_Text_deltaE_Measure+0x1d2>
 801538e:	f1a4 0012 	sub.w	r0, r4, #18
 8015392:	4430      	add	r0, r6
 8015394:	222d      	movs	r2, #45	; 0x2d
 8015396:	4629      	mov	r1, r5
 8015398:	b280      	uxth	r0, r0
 801539a:	f007 fc03 	bl	801cba4 <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801539e:	19a0      	adds	r0, r4, r6
 80153a0:	2303      	movs	r3, #3
 80153a2:	aa03      	add	r2, sp, #12
 80153a4:	4629      	mov	r1, r5
 80153a6:	b280      	uxth	r0, r0
 80153a8:	f007 fc54 	bl	801cc54 <TFT_DisplayString>
 80153ac:	e752      	b.n	8015254 <GUI_Text_deltaE_Measure+0x88>
 80153ae:	bf00      	nop
 80153b0:	2000022a 	.word	0x2000022a
 80153b4:	2000573d 	.word	0x2000573d
 80153b8:	20005701 	.word	0x20005701
 80153bc:	200001f0 	.word	0x200001f0
 80153c0:	200001b0 	.word	0x200001b0
 80153c4:	200001e8 	.word	0x200001e8
 80153c8:	40240000 	.word	0x40240000
 80153cc:	08031d6a 	.word	0x08031d6a
 80153d0:	2000022f 	.word	0x2000022f

080153d4 <GUI_Text_EbEr_Measure>:
uint8_t old_num_EB = 10, old_num_ER = 10, old_nan_EBER = 0;
void GUI_Text_EbEr_Measure(uint16_t X, uint16_t Y, float ValueEB, float ValueER, uint8_t nope, uint8_t grey)
{
 80153d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153d8:	ed2d 8b04 	vpush	{d8-d9}
 80153dc:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 80153de:	4bb6      	ldr	r3, [pc, #728]	; (80156b8 <GUI_Text_EbEr_Measure+0x2e4>)
 80153e0:	4eb6      	ldr	r6, [pc, #728]	; (80156bc <GUI_Text_EbEr_Measure+0x2e8>)
{
 80153e2:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 80153e4:	781a      	ldrb	r2, [r3, #0]
 80153e6:	4bb6      	ldr	r3, [pc, #728]	; (80156c0 <GUI_Text_EbEr_Measure+0x2ec>)
 80153e8:	781b      	ldrb	r3, [r3, #0]
 80153ea:	429a      	cmp	r2, r3
{
 80153ec:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 80153ee:	bf1c      	itt	ne
 80153f0:	2300      	movne	r3, #0
 80153f2:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 80153f4:	2300      	movs	r3, #0
 80153f6:	9303      	str	r3, [sp, #12]
 80153f8:	9304      	str	r3, [sp, #16]
 80153fa:	f88d 3014 	strb.w	r3, [sp, #20]
{
 80153fe:	4605      	mov	r5, r0
 8015400:	460c      	mov	r4, r1
 8015402:	eef0 8a40 	vmov.f32	s17, s0
 8015406:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	
	if(nope) 
		{	
			if(!old_nan_EBER){
 801540a:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 801540c:	f1b8 0f00 	cmp.w	r8, #0
 8015410:	d06f      	beq.n	80154f2 <GUI_Text_EbEr_Measure+0x11e>
			if(!old_nan_EBER){
 8015412:	2b00      	cmp	r3, #0
 8015414:	d140      	bne.n	8015498 <GUI_Text_EbEr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 8015416:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801541a:	f007 faff 	bl	801ca1c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801541e:	2063      	movs	r0, #99	; 0x63
 8015420:	f007 fb02 	bl	801ca28 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015424:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 8015428:	48a6      	ldr	r0, [pc, #664]	; (80156c4 <GUI_Text_EbEr_Measure+0x2f0>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 801542a:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 801542e:	f007 faef 	bl	801ca10 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015432:	b2bf      	uxth	r7, r7
 8015434:	fa1f f989 	uxth.w	r9, r9
 8015438:	f04f 0a63 	mov.w	sl, #99	; 0x63
 801543c:	f104 031a 	add.w	r3, r4, #26
 8015440:	4638      	mov	r0, r7
 8015442:	b29b      	uxth	r3, r3
 8015444:	464a      	mov	r2, r9
 8015446:	4621      	mov	r1, r4
 8015448:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 801544c:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015450:	f007 f8b5 	bl	801c5be <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8015454:	fa1f f888 	uxth.w	r8, r8
 8015458:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 801545c:	4638      	mov	r0, r7
 801545e:	b29b      	uxth	r3, r3
 8015460:	464a      	mov	r2, r9
 8015462:	4641      	mov	r1, r8
 8015464:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015468:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 801546c:	f007 f8a7 	bl	801c5be <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015470:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 8015472:	232d      	movs	r3, #45	; 0x2d
 8015474:	f88d 300c 	strb.w	r3, [sp, #12]
 8015478:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801547c:	aa03      	add	r2, sp, #12
 801547e:	2303      	movs	r3, #3
 8015480:	4621      	mov	r1, r4
 8015482:	4638      	mov	r0, r7
 8015484:	f007 fbe6 	bl	801cc54 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015488:	2303      	movs	r3, #3
 801548a:	aa03      	add	r2, sp, #12
 801548c:	4641      	mov	r1, r8
 801548e:	4638      	mov	r0, r7
 8015490:	f007 fbe0 	bl	801cc54 <TFT_DisplayString>
				old_nan_EBER = 1;
 8015494:	2301      	movs	r3, #1
 8015496:	7033      	strb	r3, [r6, #0]
	old_num_ER = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8015498:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801549c:	f007 fabe 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 80154a0:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 80154a4:	4888      	ldr	r0, [pc, #544]	; (80156c8 <GUI_Text_EbEr_Measure+0x2f4>)
 80154a6:	f007 fab3 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 80154aa:	b2b6      	uxth	r6, r6
 80154ac:	f104 010c 	add.w	r1, r4, #12
 80154b0:	4630      	mov	r0, r6
 80154b2:	2242      	movs	r2, #66	; 0x42
 80154b4:	b289      	uxth	r1, r1
 80154b6:	f007 fb75 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 80154ba:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 80154be:	2252      	movs	r2, #82	; 0x52
 80154c0:	b289      	uxth	r1, r1
 80154c2:	4630      	mov	r0, r6
 80154c4:	f007 fb6e 	bl	801cba4 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 80154c8:	4880      	ldr	r0, [pc, #512]	; (80156cc <GUI_Text_EbEr_Measure+0x2f8>)
 80154ca:	f007 faa1 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 80154ce:	1ca1      	adds	r1, r4, #2
 80154d0:	4628      	mov	r0, r5
 80154d2:	2224      	movs	r2, #36	; 0x24
 80154d4:	b289      	uxth	r1, r1
 80154d6:	f007 fb65 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'E'-33);
 80154da:	f104 0125 	add.w	r1, r4, #37	; 0x25
 80154de:	2224      	movs	r2, #36	; 0x24
 80154e0:	b289      	uxth	r1, r1
 80154e2:	4628      	mov	r0, r5
 80154e4:	f007 fb5e 	bl	801cba4 <TFT_DrawChar>
}
 80154e8:	b007      	add	sp, #28
 80154ea:	ecbd 8b04 	vpop	{d8-d9}
 80154ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_EBER){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80154f2:	b1eb      	cbz	r3, 8015530 <GUI_Text_EbEr_Measure+0x15c>
 80154f4:	f100 0728 	add.w	r7, r0, #40	; 0x28
 80154f8:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 80154fc:	f101 031a 	add.w	r3, r1, #26
 8015500:	b2bf      	uxth	r7, r7
 8015502:	fa1f f989 	uxth.w	r9, r9
 8015506:	f04f 0b63 	mov.w	fp, #99	; 0x63
 801550a:	b29b      	uxth	r3, r3
 801550c:	464a      	mov	r2, r9
 801550e:	4638      	mov	r0, r7
 8015510:	f8cd b000 	str.w	fp, [sp]
 8015514:	f007 f853 	bl	801c5be <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 8015518:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 801551c:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015520:	f8cd b000 	str.w	fp, [sp]
 8015524:	b29b      	uxth	r3, r3
 8015526:	464a      	mov	r2, r9
 8015528:	b289      	uxth	r1, r1
 801552a:	4638      	mov	r0, r7
 801552c:	f007 f847 	bl	801c5be <TFT_FillRectangle>
	ValueEB = floor(ValueEB*100)/100.0;
 8015530:	ed9f 8a67 	vldr	s16, [pc, #412]	; 80156d0 <GUI_Text_EbEr_Measure+0x2fc>
 8015534:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_EBER = 0;
 8015538:	2700      	movs	r7, #0
	ValueEB = floor(ValueEB*100)/100.0;
 801553a:	ee17 0a90 	vmov	r0, s15
	old_nan_EBER = 0;
 801553e:	7037      	strb	r7, [r6, #0]
	ValueEB = floor(ValueEB*100)/100.0;
 8015540:	f7eb f81a 	bl	8000578 <__aeabi_f2d>
 8015544:	ec41 0b10 	vmov	d0, r0, r1
 8015548:	f00d fe5e 	bl	8023208 <floor>
 801554c:	2200      	movs	r2, #0
 801554e:	4b61      	ldr	r3, [pc, #388]	; (80156d4 <GUI_Text_EbEr_Measure+0x300>)
 8015550:	ec51 0b10 	vmov	r0, r1, d0
 8015554:	f7eb f98e 	bl	8000874 <__aeabi_ddiv>
 8015558:	f7eb fb5a 	bl	8000c10 <__aeabi_d2f>
	ValueER = floor(ValueER*100)/100.0;
 801555c:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueEB = floor(ValueEB*100)/100.0;
 8015560:	ee08 0a90 	vmov	s17, r0
	ValueER = floor(ValueER*100)/100.0;
 8015564:	ee17 0a90 	vmov	r0, s15
 8015568:	f7eb f806 	bl	8000578 <__aeabi_f2d>
 801556c:	ec41 0b10 	vmov	d0, r0, r1
 8015570:	f00d fe4a 	bl	8023208 <floor>
 8015574:	2200      	movs	r2, #0
 8015576:	ec51 0b10 	vmov	r0, r1, d0
 801557a:	4b56      	ldr	r3, [pc, #344]	; (80156d4 <GUI_Text_EbEr_Measure+0x300>)
 801557c:	f7eb f97a 	bl	8000874 <__aeabi_ddiv>
 8015580:	f7eb fb46 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015584:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueER = floor(ValueER*100)/100.0;
 8015588:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801558c:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8015590:	45ba      	cmp	sl, r7
 8015592:	bf08      	it	eq
 8015594:	4618      	moveq	r0, r3
 8015596:	f007 fa41 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801559a:	2063      	movs	r0, #99	; 0x63
 801559c:	f007 fa44 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80155a0:	4848      	ldr	r0, [pc, #288]	; (80156c4 <GUI_Text_EbEr_Measure+0x2f0>)
 80155a2:	f007 fa35 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueEB);
 80155a6:	ee18 0a90 	vmov	r0, s17
 80155aa:	f7ea ffe5 	bl	8000578 <__aeabi_f2d>
 80155ae:	4602      	mov	r2, r0
 80155b0:	460b      	mov	r3, r1
 80155b2:	a803      	add	r0, sp, #12
 80155b4:	4948      	ldr	r1, [pc, #288]	; (80156d8 <GUI_Text_EbEr_Measure+0x304>)
 80155b6:	f00a fe6d 	bl	8020294 <sprintf>
	uint32_t dec = 10;
 80155ba:	f04f 090a 	mov.w	r9, #10
		if((ValueEB/(dec)) >= 1.0)
 80155be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueEB);
 80155c2:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 80155c4:	2696      	movs	r6, #150	; 0x96
 80155c6:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 80155ca:	464a      	mov	r2, r9
		if((ValueEB/(dec)) >= 1.0)
 80155cc:	ee07 9a10 	vmov	s14, r9
 80155d0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80155d4:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 80155d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80155dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80155e0:	db05      	blt.n	80155ee <GUI_Text_EbEr_Measure+0x21a>
			delta_pos-=23;
 80155e2:	3e17      	subs	r6, #23
			number++;
 80155e4:	3701      	adds	r7, #1
			dec *= 10;
 80155e6:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 80155ea:	b2f6      	uxtb	r6, r6
			number++;
 80155ec:	b2ff      	uxtb	r7, r7
 80155ee:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80155f0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80155f4:	d1ea      	bne.n	80155cc <GUI_Text_EbEr_Measure+0x1f8>
	if(number < old_num_EB )
 80155f6:	4b39      	ldr	r3, [pc, #228]	; (80156dc <GUI_Text_EbEr_Measure+0x308>)
 80155f8:	781a      	ldrb	r2, [r3, #0]
 80155fa:	42ba      	cmp	r2, r7
 80155fc:	469a      	mov	sl, r3
 80155fe:	d90d      	bls.n	801561c <GUI_Text_EbEr_Measure+0x248>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015600:	2163      	movs	r1, #99	; 0x63
 8015602:	f104 0319 	add.w	r3, r4, #25
 8015606:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801560a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801560e:	9100      	str	r1, [sp, #0]
 8015610:	b29b      	uxth	r3, r3
 8015612:	b292      	uxth	r2, r2
 8015614:	4621      	mov	r1, r4
 8015616:	b280      	uxth	r0, r0
 8015618:	f006 ffd1 	bl	801c5be <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801561c:	19a8      	adds	r0, r5, r6
 801561e:	2303      	movs	r3, #3
 8015620:	aa03      	add	r2, sp, #12
 8015622:	4621      	mov	r1, r4
 8015624:	b280      	uxth	r0, r0
	old_num_EB = number;
 8015626:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801562a:	f007 fb13 	bl	801cc54 <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueER);
 801562e:	ee18 0a10 	vmov	r0, s16
 8015632:	f7ea ffa1 	bl	8000578 <__aeabi_f2d>
 8015636:	4602      	mov	r2, r0
 8015638:	460b      	mov	r3, r1
 801563a:	a803      	add	r0, sp, #12
 801563c:	4926      	ldr	r1, [pc, #152]	; (80156d8 <GUI_Text_EbEr_Measure+0x304>)
 801563e:	f00a fe29 	bl	8020294 <sprintf>
 8015642:	2304      	movs	r3, #4
			dec *= 10;
 8015644:	220a      	movs	r2, #10
		if((ValueER/(dec)) >= 1.0)
 8015646:	ee07 9a90 	vmov	s15, r9
 801564a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801564e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015652:	eef4 7ac9 	vcmpe.f32	s15, s18
 8015656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801565a:	db07      	blt.n	801566c <GUI_Text_EbEr_Measure+0x298>
			delta_pos-=23;
 801565c:	3e17      	subs	r6, #23
			number++;
 801565e:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8015662:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8015666:	b2f6      	uxtb	r6, r6
			number++;
 8015668:	fa5f f888 	uxtb.w	r8, r8
 801566c:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 801566e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015672:	d1e8      	bne.n	8015646 <GUI_Text_EbEr_Measure+0x272>
	if(number < old_num_ER )
 8015674:	4f1a      	ldr	r7, [pc, #104]	; (80156e0 <GUI_Text_EbEr_Measure+0x30c>)
 8015676:	783b      	ldrb	r3, [r7, #0]
 8015678:	4543      	cmp	r3, r8
 801567a:	d911      	bls.n	80156a0 <GUI_Text_EbEr_Measure+0x2cc>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 801567c:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015680:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015684:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8015688:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801568c:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8015690:	f8cd e000 	str.w	lr, [sp]
 8015694:	b29b      	uxth	r3, r3
 8015696:	b292      	uxth	r2, r2
 8015698:	b289      	uxth	r1, r1
 801569a:	b280      	uxth	r0, r0
 801569c:	f006 ff8f 	bl	801c5be <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80156a0:	f104 0123 	add.w	r1, r4, #35	; 0x23
 80156a4:	19a8      	adds	r0, r5, r6
 80156a6:	2303      	movs	r3, #3
 80156a8:	aa03      	add	r2, sp, #12
 80156aa:	b289      	uxth	r1, r1
 80156ac:	b280      	uxth	r0, r0
	old_num_ER = number;
 80156ae:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80156b2:	f007 facf 	bl	801cc54 <TFT_DisplayString>
 80156b6:	e6ef      	b.n	8015498 <GUI_Text_EbEr_Measure+0xc4>
 80156b8:	2000022a 	.word	0x2000022a
 80156bc:	20005734 	.word	0x20005734
 80156c0:	20005701 	.word	0x20005701
 80156c4:	200001f0 	.word	0x200001f0
 80156c8:	200001b0 	.word	0x200001b0
 80156cc:	200001e8 	.word	0x200001e8
 80156d0:	42c80000 	.word	0x42c80000
 80156d4:	40590000 	.word	0x40590000
 80156d8:	08031d6a 	.word	0x08031d6a
 80156dc:	2000023f 	.word	0x2000023f
 80156e0:	20000240 	.word	0x20000240

080156e4 <GUI_Text_LbLr_Measure>:
uint8_t old_num_LB = 10, old_num_LR = 10, old_nan_LBLR = 0;
void GUI_Text_LbLr_Measure(uint16_t X, uint16_t Y, float ValueLB, float ValueLR, uint8_t nope, uint8_t grey)
{
 80156e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156e8:	ed2d 8b04 	vpush	{d8-d9}
 80156ec:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80156ee:	4bb8      	ldr	r3, [pc, #736]	; (80159d0 <GUI_Text_LbLr_Measure+0x2ec>)
 80156f0:	4eb8      	ldr	r6, [pc, #736]	; (80159d4 <GUI_Text_LbLr_Measure+0x2f0>)
{
 80156f2:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80156f4:	781a      	ldrb	r2, [r3, #0]
 80156f6:	4bb8      	ldr	r3, [pc, #736]	; (80159d8 <GUI_Text_LbLr_Measure+0x2f4>)
 80156f8:	781b      	ldrb	r3, [r3, #0]
 80156fa:	429a      	cmp	r2, r3
{
 80156fc:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80156fe:	bf1c      	itt	ne
 8015700:	2300      	movne	r3, #0
 8015702:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 8015704:	2300      	movs	r3, #0
 8015706:	9303      	str	r3, [sp, #12]
 8015708:	9304      	str	r3, [sp, #16]
 801570a:	f88d 3014 	strb.w	r3, [sp, #20]
{
 801570e:	4605      	mov	r5, r0
 8015710:	460c      	mov	r4, r1
 8015712:	eef0 8a40 	vmov.f32	s17, s0
 8015716:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	if(nope) 
		{	
			if(!old_nan_LBLR){
 801571a:	7833      	ldrb	r3, [r6, #0]
	if(nope) 
 801571c:	f1b8 0f00 	cmp.w	r8, #0
 8015720:	d072      	beq.n	8015808 <GUI_Text_LbLr_Measure+0x124>
			if(!old_nan_LBLR){
 8015722:	2b00      	cmp	r3, #0
 8015724:	d140      	bne.n	80157a8 <GUI_Text_LbLr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 8015726:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801572a:	f007 f977 	bl	801ca1c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801572e:	2063      	movs	r0, #99	; 0x63
 8015730:	f007 f97a 	bl	801ca28 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015734:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 8015738:	48a8      	ldr	r0, [pc, #672]	; (80159dc <GUI_Text_LbLr_Measure+0x2f8>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 801573a:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 801573e:	f007 f967 	bl	801ca10 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015742:	b2bf      	uxth	r7, r7
 8015744:	fa1f f989 	uxth.w	r9, r9
 8015748:	f04f 0a63 	mov.w	sl, #99	; 0x63
 801574c:	f104 031a 	add.w	r3, r4, #26
 8015750:	4638      	mov	r0, r7
 8015752:	b29b      	uxth	r3, r3
 8015754:	464a      	mov	r2, r9
 8015756:	4621      	mov	r1, r4
 8015758:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 801575c:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015760:	f006 ff2d 	bl	801c5be <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8015764:	fa1f f888 	uxth.w	r8, r8
 8015768:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 801576c:	4638      	mov	r0, r7
 801576e:	b29b      	uxth	r3, r3
 8015770:	464a      	mov	r2, r9
 8015772:	4641      	mov	r1, r8
 8015774:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015778:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 801577c:	f006 ff1f 	bl	801c5be <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015780:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 8015782:	232d      	movs	r3, #45	; 0x2d
 8015784:	f88d 300c 	strb.w	r3, [sp, #12]
 8015788:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801578c:	aa03      	add	r2, sp, #12
 801578e:	2303      	movs	r3, #3
 8015790:	4621      	mov	r1, r4
 8015792:	4638      	mov	r0, r7
 8015794:	f007 fa5e 	bl	801cc54 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015798:	2303      	movs	r3, #3
 801579a:	aa03      	add	r2, sp, #12
 801579c:	4641      	mov	r1, r8
 801579e:	4638      	mov	r0, r7
 80157a0:	f007 fa58 	bl	801cc54 <TFT_DisplayString>
				old_nan_LBLR = 1;
 80157a4:	2301      	movs	r3, #1
 80157a6:	7033      	strb	r3, [r6, #0]
	old_num_LR = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetFont(&Font26EN_arch_digit);
 80157a8:	488c      	ldr	r0, [pc, #560]	; (80159dc <GUI_Text_LbLr_Measure+0x2f8>)
 80157aa:	f007 f931 	bl	801ca10 <TFT_SetFont>

	TFT_SetTextColor(TFT_White);
 80157ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80157b2:	f007 f933 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 80157b6:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 80157ba:	4889      	ldr	r0, [pc, #548]	; (80159e0 <GUI_Text_LbLr_Measure+0x2fc>)
 80157bc:	f007 f928 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 80157c0:	b2b6      	uxth	r6, r6
 80157c2:	f104 010c 	add.w	r1, r4, #12
 80157c6:	4630      	mov	r0, r6
 80157c8:	2242      	movs	r2, #66	; 0x42
 80157ca:	b289      	uxth	r1, r1
 80157cc:	f007 f9ea 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 80157d0:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 80157d4:	2252      	movs	r2, #82	; 0x52
 80157d6:	b289      	uxth	r1, r1
 80157d8:	4630      	mov	r0, r6
 80157da:	f007 f9e3 	bl	801cba4 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 80157de:	4881      	ldr	r0, [pc, #516]	; (80159e4 <GUI_Text_LbLr_Measure+0x300>)
 80157e0:	f007 f916 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 80157e4:	1ca1      	adds	r1, r4, #2
 80157e6:	4628      	mov	r0, r5
 80157e8:	222b      	movs	r2, #43	; 0x2b
 80157ea:	b289      	uxth	r1, r1
 80157ec:	f007 f9da 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'L'-33);
 80157f0:	f104 0125 	add.w	r1, r4, #37	; 0x25
 80157f4:	222b      	movs	r2, #43	; 0x2b
 80157f6:	b289      	uxth	r1, r1
 80157f8:	4628      	mov	r0, r5
 80157fa:	f007 f9d3 	bl	801cba4 <TFT_DrawChar>
}
 80157fe:	b007      	add	sp, #28
 8015800:	ecbd 8b04 	vpop	{d8-d9}
 8015804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(old_nan_LBLR){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015808:	b1eb      	cbz	r3, 8015846 <GUI_Text_LbLr_Measure+0x162>
 801580a:	f100 0728 	add.w	r7, r0, #40	; 0x28
 801580e:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 8015812:	f101 031a 	add.w	r3, r1, #26
 8015816:	b2bf      	uxth	r7, r7
 8015818:	fa1f f989 	uxth.w	r9, r9
 801581c:	f04f 0b63 	mov.w	fp, #99	; 0x63
 8015820:	b29b      	uxth	r3, r3
 8015822:	464a      	mov	r2, r9
 8015824:	4638      	mov	r0, r7
 8015826:	f8cd b000 	str.w	fp, [sp]
 801582a:	f006 fec8 	bl	801c5be <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 801582e:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015832:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8015836:	f8cd b000 	str.w	fp, [sp]
 801583a:	b29b      	uxth	r3, r3
 801583c:	464a      	mov	r2, r9
 801583e:	b289      	uxth	r1, r1
 8015840:	4638      	mov	r0, r7
 8015842:	f006 febc 	bl	801c5be <TFT_FillRectangle>
	ValueLB = floor(ValueLB*100)/100.0;
 8015846:	ed9f 8a68 	vldr	s16, [pc, #416]	; 80159e8 <GUI_Text_LbLr_Measure+0x304>
 801584a:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_LBLR = 0;
 801584e:	2700      	movs	r7, #0
	ValueLB = floor(ValueLB*100)/100.0;
 8015850:	ee17 0a90 	vmov	r0, s15
	old_nan_LBLR = 0;
 8015854:	7037      	strb	r7, [r6, #0]
	ValueLB = floor(ValueLB*100)/100.0;
 8015856:	f7ea fe8f 	bl	8000578 <__aeabi_f2d>
 801585a:	ec41 0b10 	vmov	d0, r0, r1
 801585e:	f00d fcd3 	bl	8023208 <floor>
 8015862:	2200      	movs	r2, #0
 8015864:	4b61      	ldr	r3, [pc, #388]	; (80159ec <GUI_Text_LbLr_Measure+0x308>)
 8015866:	ec51 0b10 	vmov	r0, r1, d0
 801586a:	f7eb f803 	bl	8000874 <__aeabi_ddiv>
 801586e:	f7eb f9cf 	bl	8000c10 <__aeabi_d2f>
	ValueLR = floor(ValueLR*100)/100.0;
 8015872:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueLB = floor(ValueLB*100)/100.0;
 8015876:	ee08 0a90 	vmov	s17, r0
	ValueLR = floor(ValueLR*100)/100.0;
 801587a:	ee17 0a90 	vmov	r0, s15
 801587e:	f7ea fe7b 	bl	8000578 <__aeabi_f2d>
 8015882:	ec41 0b10 	vmov	d0, r0, r1
 8015886:	f00d fcbf 	bl	8023208 <floor>
 801588a:	2200      	movs	r2, #0
 801588c:	ec51 0b10 	vmov	r0, r1, d0
 8015890:	4b56      	ldr	r3, [pc, #344]	; (80159ec <GUI_Text_LbLr_Measure+0x308>)
 8015892:	f7ea ffef 	bl	8000874 <__aeabi_ddiv>
 8015896:	f7eb f9bb 	bl	8000c10 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801589a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueLR = floor(ValueLR*100)/100.0;
 801589e:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80158a2:	f249 40d2 	movw	r0, #38098	; 0x94d2
 80158a6:	45ba      	cmp	sl, r7
 80158a8:	bf08      	it	eq
 80158aa:	4618      	moveq	r0, r3
 80158ac:	f007 f8b6 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80158b0:	2063      	movs	r0, #99	; 0x63
 80158b2:	f007 f8b9 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80158b6:	4849      	ldr	r0, [pc, #292]	; (80159dc <GUI_Text_LbLr_Measure+0x2f8>)
 80158b8:	f007 f8aa 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueLB);
 80158bc:	ee18 0a90 	vmov	r0, s17
 80158c0:	f7ea fe5a 	bl	8000578 <__aeabi_f2d>
 80158c4:	4602      	mov	r2, r0
 80158c6:	460b      	mov	r3, r1
 80158c8:	a803      	add	r0, sp, #12
 80158ca:	4949      	ldr	r1, [pc, #292]	; (80159f0 <GUI_Text_LbLr_Measure+0x30c>)
 80158cc:	f00a fce2 	bl	8020294 <sprintf>
	uint32_t dec = 10;
 80158d0:	f04f 090a 	mov.w	r9, #10
		if((ValueLB/(dec)) >= 1.0)
 80158d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueLB);
 80158d8:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 80158da:	2696      	movs	r6, #150	; 0x96
 80158dc:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 80158e0:	464a      	mov	r2, r9
		if((ValueLB/(dec)) >= 1.0)
 80158e2:	ee07 9a10 	vmov	s14, r9
 80158e6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80158ea:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 80158ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80158f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158f6:	db05      	blt.n	8015904 <GUI_Text_LbLr_Measure+0x220>
			delta_pos-=23;
 80158f8:	3e17      	subs	r6, #23
			number++;
 80158fa:	3701      	adds	r7, #1
			dec *= 10;
 80158fc:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8015900:	b2f6      	uxtb	r6, r6
			number++;
 8015902:	b2ff      	uxtb	r7, r7
 8015904:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015906:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801590a:	d1ea      	bne.n	80158e2 <GUI_Text_LbLr_Measure+0x1fe>
	if(number < old_num_LB )
 801590c:	4b39      	ldr	r3, [pc, #228]	; (80159f4 <GUI_Text_LbLr_Measure+0x310>)
 801590e:	781a      	ldrb	r2, [r3, #0]
 8015910:	42ba      	cmp	r2, r7
 8015912:	469a      	mov	sl, r3
 8015914:	d90d      	bls.n	8015932 <GUI_Text_LbLr_Measure+0x24e>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015916:	2163      	movs	r1, #99	; 0x63
 8015918:	f104 0319 	add.w	r3, r4, #25
 801591c:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015920:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015924:	9100      	str	r1, [sp, #0]
 8015926:	b29b      	uxth	r3, r3
 8015928:	b292      	uxth	r2, r2
 801592a:	4621      	mov	r1, r4
 801592c:	b280      	uxth	r0, r0
 801592e:	f006 fe46 	bl	801c5be <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015932:	19a8      	adds	r0, r5, r6
 8015934:	2303      	movs	r3, #3
 8015936:	aa03      	add	r2, sp, #12
 8015938:	4621      	mov	r1, r4
 801593a:	b280      	uxth	r0, r0
	old_num_LB = number;
 801593c:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015940:	f007 f988 	bl	801cc54 <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueLR);
 8015944:	ee18 0a10 	vmov	r0, s16
 8015948:	f7ea fe16 	bl	8000578 <__aeabi_f2d>
 801594c:	4602      	mov	r2, r0
 801594e:	460b      	mov	r3, r1
 8015950:	a803      	add	r0, sp, #12
 8015952:	4927      	ldr	r1, [pc, #156]	; (80159f0 <GUI_Text_LbLr_Measure+0x30c>)
 8015954:	f00a fc9e 	bl	8020294 <sprintf>
 8015958:	2304      	movs	r3, #4
			dec *= 10;
 801595a:	220a      	movs	r2, #10
		if((ValueLR/(dec)) >= 1.0)
 801595c:	ee07 9a90 	vmov	s15, r9
 8015960:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015964:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8015968:	eef4 7ac9 	vcmpe.f32	s15, s18
 801596c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015970:	db07      	blt.n	8015982 <GUI_Text_LbLr_Measure+0x29e>
			delta_pos-=23;
 8015972:	3e17      	subs	r6, #23
			number++;
 8015974:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8015978:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 801597c:	b2f6      	uxtb	r6, r6
			number++;
 801597e:	fa5f f888 	uxtb.w	r8, r8
 8015982:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015984:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015988:	d1e8      	bne.n	801595c <GUI_Text_LbLr_Measure+0x278>
	if(number < old_num_LR )
 801598a:	4f1b      	ldr	r7, [pc, #108]	; (80159f8 <GUI_Text_LbLr_Measure+0x314>)
 801598c:	783b      	ldrb	r3, [r7, #0]
 801598e:	4543      	cmp	r3, r8
 8015990:	d911      	bls.n	80159b6 <GUI_Text_LbLr_Measure+0x2d2>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 8015992:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8015996:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801599a:	f104 0121 	add.w	r1, r4, #33	; 0x21
 801599e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80159a2:	f04f 0e63 	mov.w	lr, #99	; 0x63
 80159a6:	f8cd e000 	str.w	lr, [sp]
 80159aa:	b29b      	uxth	r3, r3
 80159ac:	b292      	uxth	r2, r2
 80159ae:	b289      	uxth	r1, r1
 80159b0:	b280      	uxth	r0, r0
 80159b2:	f006 fe04 	bl	801c5be <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80159b6:	f104 0123 	add.w	r1, r4, #35	; 0x23
 80159ba:	19a8      	adds	r0, r5, r6
 80159bc:	2303      	movs	r3, #3
 80159be:	aa03      	add	r2, sp, #12
 80159c0:	b289      	uxth	r1, r1
 80159c2:	b280      	uxth	r0, r0
	old_num_LR = number;
 80159c4:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 80159c8:	f007 f944 	bl	801cc54 <TFT_DisplayString>
 80159cc:	e6ec      	b.n	80157a8 <GUI_Text_LbLr_Measure+0xc4>
 80159ce:	bf00      	nop
 80159d0:	2000022a 	.word	0x2000022a
 80159d4:	20005737 	.word	0x20005737
 80159d8:	20005701 	.word	0x20005701
 80159dc:	200001f0 	.word	0x200001f0
 80159e0:	200001b0 	.word	0x200001b0
 80159e4:	200001e8 	.word	0x200001e8
 80159e8:	42c80000 	.word	0x42c80000
 80159ec:	40590000 	.word	0x40590000
 80159f0:	08031d6a 	.word	0x08031d6a
 80159f4:	20000242 	.word	0x20000242
 80159f8:	20000243 	.word	0x20000243

080159fc <GUI_Text_S_P_Measure>:

uint8_t old_num_SP = 10, old_nan_SP = 0;
void GUI_Text_S_P_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nope, uint8_t grey)
{
 80159fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015a00:	ed2d 8b02 	vpush	{d8}
 8015a04:	4616      	mov	r6, r2
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8015a06:	4a59      	ldr	r2, [pc, #356]	; (8015b6c <GUI_Text_S_P_Measure+0x170>)
 8015a08:	4f59      	ldr	r7, [pc, #356]	; (8015b70 <GUI_Text_S_P_Measure+0x174>)
{
 8015a0a:	460c      	mov	r4, r1
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8015a0c:	7811      	ldrb	r1, [r2, #0]
 8015a0e:	4a59      	ldr	r2, [pc, #356]	; (8015b74 <GUI_Text_S_P_Measure+0x178>)
 8015a10:	7812      	ldrb	r2, [r2, #0]
 8015a12:	4291      	cmp	r1, r2
{
 8015a14:	b086      	sub	sp, #24
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8015a16:	bf1c      	itt	ne
 8015a18:	2200      	movne	r2, #0
 8015a1a:	703a      	strbne	r2, [r7, #0]
	char buffer[9] = {0};
 8015a1c:	2200      	movs	r2, #0
{
 8015a1e:	4605      	mov	r5, r0
 8015a20:	eeb0 8a40 	vmov.f32	s16, s0
	char buffer[9] = {0};
 8015a24:	9203      	str	r2, [sp, #12]
 8015a26:	9204      	str	r2, [sp, #16]
 8015a28:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 100, number = 0;
	uint32_t dec = 10;
	
		if(nope) 
 8015a2c:	2e00      	cmp	r6, #0
 8015a2e:	d04c      	beq.n	8015aca <GUI_Text_S_P_Measure+0xce>
		{	
			if(!old_nan_SP){
 8015a30:	783b      	ldrb	r3, [r7, #0]
 8015a32:	bb33      	cbnz	r3, 8015a82 <GUI_Text_S_P_Measure+0x86>
				TFT_SetTextColor(TFT_White);
 8015a34:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015a38:	f006 fff0 	bl	801ca1c <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015a3c:	2063      	movs	r0, #99	; 0x63
 8015a3e:	f006 fff3 	bl	801ca28 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8015a42:	484d      	ldr	r0, [pc, #308]	; (8015b78 <GUI_Text_S_P_Measure+0x17c>)
 8015a44:	f006 ffe4 	bl	801ca10 <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8015a48:	2163      	movs	r1, #99	; 0x63
 8015a4a:	f104 031a 	add.w	r3, r4, #26
 8015a4e:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8015a52:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015a56:	9100      	str	r1, [sp, #0]
 8015a58:	b29b      	uxth	r3, r3
 8015a5a:	b292      	uxth	r2, r2
 8015a5c:	4621      	mov	r1, r4
 8015a5e:	b280      	uxth	r0, r0
 8015a60:	f006 fdad 	bl	801c5be <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8015a64:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015a66:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8015a6a:	f88d 300c 	strb.w	r3, [sp, #12]
 8015a6e:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015a72:	aa03      	add	r2, sp, #12
 8015a74:	2303      	movs	r3, #3
 8015a76:	4621      	mov	r1, r4
 8015a78:	b280      	uxth	r0, r0
 8015a7a:	f007 f8eb 	bl	801cc54 <TFT_DisplayString>
				old_nan_SP = 1;
 8015a7e:	2301      	movs	r3, #1
 8015a80:	703b      	strb	r3, [r7, #0]
	} 
	old_num_SP = number;

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}	
	TFT_SetTextColor(TFT_White);
 8015a82:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015a86:	f006 ffc9 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetFont(&Font26EN_arch_digit);
	TFT_DrawChar(X+22, Y+2, '/');
 8015a8a:	3402      	adds	r4, #2
	TFT_SetFont(&Font26EN_arch_digit);
 8015a8c:	483a      	ldr	r0, [pc, #232]	; (8015b78 <GUI_Text_S_P_Measure+0x17c>)
 8015a8e:	f006 ffbf 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+22, Y+2, '/');
 8015a92:	b2a4      	uxth	r4, r4
 8015a94:	f105 0016 	add.w	r0, r5, #22
 8015a98:	4621      	mov	r1, r4
 8015a9a:	222f      	movs	r2, #47	; 0x2f
 8015a9c:	b280      	uxth	r0, r0
 8015a9e:	f007 f881 	bl	801cba4 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8015aa2:	4836      	ldr	r0, [pc, #216]	; (8015b7c <GUI_Text_S_P_Measure+0x180>)
 8015aa4:	f006 ffb4 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'S'-33);
 8015aa8:	4621      	mov	r1, r4
 8015aaa:	4628      	mov	r0, r5
 8015aac:	2232      	movs	r2, #50	; 0x32
 8015aae:	f007 f879 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'P'-33);
 8015ab2:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8015ab6:	222f      	movs	r2, #47	; 0x2f
 8015ab8:	4621      	mov	r1, r4
 8015aba:	b280      	uxth	r0, r0
 8015abc:	f007 f872 	bl	801cba4 <TFT_DrawChar>
}
 8015ac0:	b006      	add	sp, #24
 8015ac2:	ecbd 8b02 	vpop	{d8}
 8015ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015aca:	f249 41d2 	movw	r1, #38098	; 0x94d2
 8015ace:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	bf18      	it	ne
 8015ad6:	4608      	movne	r0, r1
	old_nan_SP = 0;
 8015ad8:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015ada:	f006 ff9f 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015ade:	2063      	movs	r0, #99	; 0x63
 8015ae0:	f006 ffa2 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015ae4:	4824      	ldr	r0, [pc, #144]	; (8015b78 <GUI_Text_S_P_Measure+0x17c>)
 8015ae6:	f006 ff93 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%.4f", Value);
 8015aea:	ee18 0a10 	vmov	r0, s16
 8015aee:	f7ea fd43 	bl	8000578 <__aeabi_f2d>
 8015af2:	4602      	mov	r2, r0
 8015af4:	460b      	mov	r3, r1
 8015af6:	a803      	add	r0, sp, #12
 8015af8:	4921      	ldr	r1, [pc, #132]	; (8015b80 <GUI_Text_S_P_Measure+0x184>)
 8015afa:	f00a fbcb 	bl	8020294 <sprintf>
	uint32_t dec = 10;
 8015afe:	220a      	movs	r2, #10
	sprintf (buffer, "%.4f", Value);
 8015b00:	2304      	movs	r3, #4
	uint8_t	delta_pos = 100, number = 0;
 8015b02:	2764      	movs	r7, #100	; 0x64
		if((Value/(dec)) >= 1.0)
 8015b04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8015b08:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8015b0a:	ee07 2a10 	vmov	s14, r2
 8015b0e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8015b12:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8015b16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b1e:	db04      	blt.n	8015b2a <GUI_Text_S_P_Measure+0x12e>
			delta_pos-=23;
 8015b20:	3f17      	subs	r7, #23
			number++;
 8015b22:	3601      	adds	r6, #1
			dec *= 10;
 8015b24:	434a      	muls	r2, r1
			delta_pos-=23;
 8015b26:	b2ff      	uxtb	r7, r7
			number++;
 8015b28:	b2f6      	uxtb	r6, r6
 8015b2a:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015b2c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015b30:	d1eb      	bne.n	8015b0a <GUI_Text_S_P_Measure+0x10e>
	if(number < old_num_SP )
 8015b32:	4b14      	ldr	r3, [pc, #80]	; (8015b84 <GUI_Text_S_P_Measure+0x188>)
 8015b34:	781a      	ldrb	r2, [r3, #0]
 8015b36:	42b2      	cmp	r2, r6
 8015b38:	4698      	mov	r8, r3
 8015b3a:	d90d      	bls.n	8015b58 <GUI_Text_S_P_Measure+0x15c>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8015b3c:	2163      	movs	r1, #99	; 0x63
 8015b3e:	f104 0319 	add.w	r3, r4, #25
 8015b42:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8015b46:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8015b4a:	9100      	str	r1, [sp, #0]
 8015b4c:	b29b      	uxth	r3, r3
 8015b4e:	b292      	uxth	r2, r2
 8015b50:	4621      	mov	r1, r4
 8015b52:	b280      	uxth	r0, r0
 8015b54:	f006 fd33 	bl	801c5be <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015b58:	19e8      	adds	r0, r5, r7
 8015b5a:	2303      	movs	r3, #3
 8015b5c:	aa03      	add	r2, sp, #12
 8015b5e:	4621      	mov	r1, r4
 8015b60:	b280      	uxth	r0, r0
	old_num_SP = number;
 8015b62:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015b66:	f007 f875 	bl	801cc54 <TFT_DisplayString>
 8015b6a:	e78a      	b.n	8015a82 <GUI_Text_S_P_Measure+0x86>
 8015b6c:	2000022a 	.word	0x2000022a
 8015b70:	2000573c 	.word	0x2000573c
 8015b74:	20005701 	.word	0x20005701
 8015b78:	200001f0 	.word	0x200001f0
 8015b7c:	200001e8 	.word	0x200001e8
 8015b80:	08031d6f 	.word	0x08031d6f
 8015b84:	20000244 	.word	0x20000244

08015b88 <GUI_Text_LAB_Measure>:

uint8_t old_num_L = 10, old_num_A = 10, old_num_B = 10, old_nan = 0;
void GUI_Text_LAB_Measure(uint16_t X, uint16_t Y, int16_t ValueL, int16_t ValueA, int16_t ValueB, uint8_t nope, uint8_t grey)
{
 8015b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b8c:	b089      	sub	sp, #36	; 0x24
 8015b8e:	461f      	mov	r7, r3
 8015b90:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8015b94:	9304      	str	r3, [sp, #16]
 8015b96:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015b9a:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
	uint8_t	delta_pos = 180, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(ValueA <= -431 || nope){
 8015b9c:	f517 7fd7 	cmn.w	r7, #430	; 0x1ae
	char buffer[5] = {0};
 8015ba0:	f04f 0300 	mov.w	r3, #0
{
 8015ba4:	4604      	mov	r4, r0
 8015ba6:	460d      	mov	r5, r1
 8015ba8:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8015baa:	9306      	str	r3, [sp, #24]
 8015bac:	f88d 301c 	strb.w	r3, [sp, #28]
	if(ValueA <= -431 || nope){
 8015bb0:	db03      	blt.n	8015bba <GUI_Text_LAB_Measure+0x32>
 8015bb2:	9b03      	ldr	r3, [sp, #12]
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	f000 80a9 	beq.w	8015d0c <GUI_Text_LAB_Measure+0x184>
		if(!old_nan){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 8015bba:	4b4e      	ldr	r3, [pc, #312]	; (8015cf4 <GUI_Text_LAB_Measure+0x16c>)
 8015bbc:	781a      	ldrb	r2, [r3, #0]
 8015bbe:	469a      	mov	sl, r3
 8015bc0:	b96a      	cbnz	r2, 8015bde <GUI_Text_LAB_Measure+0x56>
 8015bc2:	2163      	movs	r1, #99	; 0x63
 8015bc4:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 8015bc8:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015bcc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015bd0:	9100      	str	r1, [sp, #0]
 8015bd2:	b29b      	uxth	r3, r3
 8015bd4:	b292      	uxth	r2, r2
 8015bd6:	4629      	mov	r1, r5
 8015bd8:	b280      	uxth	r0, r0
 8015bda:	f006 fcf0 	bl	801c5be <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 8015bde:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015be2:	f006 ff1b 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8015be6:	f104 0987 	add.w	r9, r4, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 8015bea:	2063      	movs	r0, #99	; 0x63
 8015bec:	f006 ff1c 	bl	801ca28 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8015bf0:	fa1f f989 	uxth.w	r9, r9
 8015bf4:	4840      	ldr	r0, [pc, #256]	; (8015cf8 <GUI_Text_LAB_Measure+0x170>)
 8015bf6:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
 8015bfa:	f006 ff09 	bl	801ca10 <TFT_SetFont>
 8015bfe:	fa1f f888 	uxth.w	r8, r8
 8015c02:	222d      	movs	r2, #45	; 0x2d
 8015c04:	4629      	mov	r1, r5
 8015c06:	4648      	mov	r0, r9
 8015c08:	f104 06b9 	add.w	r6, r4, #185	; 0xb9
 8015c0c:	f006 ffca 	bl	801cba4 <TFT_DrawChar>
 8015c10:	b2b6      	uxth	r6, r6
 8015c12:	2220      	movs	r2, #32
 8015c14:	4629      	mov	r1, r5
 8015c16:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015c18:	f105 0723 	add.w	r7, r5, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8015c1c:	f006 ffc2 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015c20:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8015c22:	222d      	movs	r2, #45	; 0x2d
 8015c24:	4629      	mov	r1, r5
 8015c26:	4630      	mov	r0, r6
 8015c28:	f006 ffbc 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015c2c:	4639      	mov	r1, r7
 8015c2e:	222d      	movs	r2, #45	; 0x2d
 8015c30:	4648      	mov	r0, r9
 8015c32:	f006 ffb7 	bl	801cba4 <TFT_DrawChar>
 8015c36:	4639      	mov	r1, r7
 8015c38:	2220      	movs	r2, #32
 8015c3a:	4640      	mov	r0, r8
 8015c3c:	f006 ffb2 	bl	801cba4 <TFT_DrawChar>
 8015c40:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8015c42:	f105 0746 	add.w	r7, r5, #70	; 0x46
 8015c46:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8015c48:	222d      	movs	r2, #45	; 0x2d
 8015c4a:	4630      	mov	r0, r6
 8015c4c:	f006 ffaa 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8015c50:	222d      	movs	r2, #45	; 0x2d
 8015c52:	4639      	mov	r1, r7
 8015c54:	4648      	mov	r0, r9
 8015c56:	f006 ffa5 	bl	801cba4 <TFT_DrawChar>
 8015c5a:	2220      	movs	r2, #32
 8015c5c:	4639      	mov	r1, r7
 8015c5e:	4640      	mov	r0, r8
 8015c60:	f006 ffa0 	bl	801cba4 <TFT_DrawChar>
 8015c64:	222d      	movs	r2, #45	; 0x2d
 8015c66:	4639      	mov	r1, r7
 8015c68:	4630      	mov	r0, r6
 8015c6a:	f006 ff9b 	bl	801cba4 <TFT_DrawChar>
		old_nan = 1;
 8015c6e:	2301      	movs	r3, #1
 8015c70:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
		old_nan = 0;
	} 
	
	if(preGUI_screen_state != GUI_screen_state || GUI_screen_state == Color_Screen){
 8015c74:	4b21      	ldr	r3, [pc, #132]	; (8015cfc <GUI_Text_LAB_Measure+0x174>)
 8015c76:	781a      	ldrb	r2, [r3, #0]
 8015c78:	4b21      	ldr	r3, [pc, #132]	; (8015d00 <GUI_Text_LAB_Measure+0x178>)
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	4293      	cmp	r3, r2
 8015c7e:	d101      	bne.n	8015c84 <GUI_Text_LAB_Measure+0xfc>
 8015c80:	2b05      	cmp	r3, #5
 8015c82:	d134      	bne.n	8015cee <GUI_Text_LAB_Measure+0x166>
			TFT_SetTextColor(TFT_White);
 8015c84:	f64f 70ff 	movw	r0, #65535	; 0xffff
			TFT_SetFont(&Font26EN_arch_digit);
			TFT_DrawChar(X+17, Y, '*');
 8015c88:	f104 0611 	add.w	r6, r4, #17
			TFT_SetTextColor(TFT_White);
 8015c8c:	f006 fec6 	bl	801ca1c <TFT_SetTextColor>
			TFT_DrawChar(X+17, Y, '*');
 8015c90:	b2b6      	uxth	r6, r6
			TFT_SetFont(&Font26EN_arch_digit);
 8015c92:	481c      	ldr	r0, [pc, #112]	; (8015d04 <GUI_Text_LAB_Measure+0x17c>)
			TFT_DrawChar(X+17, Y+35, '*');
 8015c94:	f105 0823 	add.w	r8, r5, #35	; 0x23
			TFT_SetFont(&Font26EN_arch_digit);
 8015c98:	f006 feba 	bl	801ca10 <TFT_SetFont>
			TFT_DrawChar(X+17, Y+35, '*');
 8015c9c:	fa1f f888 	uxth.w	r8, r8
			TFT_DrawChar(X+17, Y, '*');
 8015ca0:	222a      	movs	r2, #42	; 0x2a
 8015ca2:	4629      	mov	r1, r5
 8015ca4:	4630      	mov	r0, r6
			TFT_DrawChar(X+17, Y+70, '*');
 8015ca6:	f105 0746 	add.w	r7, r5, #70	; 0x46
			TFT_DrawChar(X+17, Y, '*');
 8015caa:	f006 ff7b 	bl	801cba4 <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 8015cae:	b2bf      	uxth	r7, r7
			TFT_DrawChar(X+17, Y+35, '*');
 8015cb0:	222a      	movs	r2, #42	; 0x2a
 8015cb2:	4641      	mov	r1, r8
 8015cb4:	4630      	mov	r0, r6
 8015cb6:	f006 ff75 	bl	801cba4 <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 8015cba:	222a      	movs	r2, #42	; 0x2a
 8015cbc:	4639      	mov	r1, r7
 8015cbe:	4630      	mov	r0, r6
 8015cc0:	f006 ff70 	bl	801cba4 <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_big);
 8015cc4:	480c      	ldr	r0, [pc, #48]	; (8015cf8 <GUI_Text_LAB_Measure+0x170>)
 8015cc6:	f006 fea3 	bl	801ca10 <TFT_SetFont>
			TFT_DrawChar(X, Y, 'L'-33);
 8015cca:	222b      	movs	r2, #43	; 0x2b
 8015ccc:	4629      	mov	r1, r5
 8015cce:	4620      	mov	r0, r4
 8015cd0:	f006 ff68 	bl	801cba4 <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_small);
 8015cd4:	480c      	ldr	r0, [pc, #48]	; (8015d08 <GUI_Text_LAB_Measure+0x180>)
 8015cd6:	f006 fe9b 	bl	801ca10 <TFT_SetFont>
			TFT_DrawChar(X, Y+35, 'a'-65);
 8015cda:	2220      	movs	r2, #32
 8015cdc:	4641      	mov	r1, r8
 8015cde:	4620      	mov	r0, r4
 8015ce0:	f006 ff60 	bl	801cba4 <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'b'-65);}
 8015ce4:	2221      	movs	r2, #33	; 0x21
 8015ce6:	4639      	mov	r1, r7
 8015ce8:	4620      	mov	r0, r4
 8015cea:	f006 ff5b 	bl	801cba4 <TFT_DrawChar>
}	
 8015cee:	b009      	add	sp, #36	; 0x24
 8015cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015cf4:	20005731 	.word	0x20005731
 8015cf8:	200001e8 	.word	0x200001e8
 8015cfc:	2000022a 	.word	0x2000022a
 8015d00:	20005701 	.word	0x20005701
 8015d04:	200001f0 	.word	0x200001f0
 8015d08:	200001f8 	.word	0x200001f8
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015d0c:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8015d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d14:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8015d18:	2800      	cmp	r0, #0
 8015d1a:	bf14      	ite	ne
 8015d1c:	4610      	movne	r0, r2
 8015d1e:	4618      	moveq	r0, r3
 8015d20:	f006 fe7c 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015d24:	2063      	movs	r0, #99	; 0x63
 8015d26:	f006 fe7f 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015d2a:	488e      	ldr	r0, [pc, #568]	; (8015f64 <GUI_Text_LAB_Measure+0x3dc>)
 8015d2c:	f006 fe70 	bl	801ca10 <TFT_SetFont>
	if(ValueL < 0){ValueL *= -1; sign = 1;}
 8015d30:	f1b8 0f00 	cmp.w	r8, #0
 8015d34:	bfbd      	ittte	lt
 8015d36:	f1c8 0800 	rsblt	r8, r8, #0
 8015d3a:	fa0f f888 	sxthlt.w	r8, r8
 8015d3e:	2301      	movlt	r3, #1
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8015d40:	9b03      	ldrge	r3, [sp, #12]
	sprintf (buffer, "%d", ValueL);
 8015d42:	4989      	ldr	r1, [pc, #548]	; (8015f68 <GUI_Text_LAB_Measure+0x3e0>)
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8015d44:	9305      	str	r3, [sp, #20]
	sprintf (buffer, "%d", ValueL);
 8015d46:	4642      	mov	r2, r8
 8015d48:	a806      	add	r0, sp, #24
 8015d4a:	f00a faa3 	bl	8020294 <sprintf>
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8015d4e:	f04f 0900 	mov.w	r9, #0
	sprintf (buffer, "%d", ValueL);
 8015d52:	f04f 0b04 	mov.w	fp, #4
	uint32_t dec = 10;
 8015d56:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8015d5a:	26b4      	movs	r6, #180	; 0xb4
		if((ValueL/(dec)) >= 1.0)
 8015d5c:	fbb8 f0fa 	udiv	r0, r8, sl
 8015d60:	f7ea fbe8 	bl	8000534 <__aeabi_ui2d>
 8015d64:	2200      	movs	r2, #0
 8015d66:	4b81      	ldr	r3, [pc, #516]	; (8015f6c <GUI_Text_LAB_Measure+0x3e4>)
 8015d68:	f7ea fee0 	bl	8000b2c <__aeabi_dcmpge>
 8015d6c:	b140      	cbz	r0, 8015d80 <GUI_Text_LAB_Measure+0x1f8>
			dec *= 10;
 8015d6e:	230a      	movs	r3, #10
			delta_pos-=23;
 8015d70:	3e17      	subs	r6, #23
			number++;
 8015d72:	f109 0901 	add.w	r9, r9, #1
			dec *= 10;
 8015d76:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8015d7a:	b2f6      	uxtb	r6, r6
			number++;
 8015d7c:	fa5f f989 	uxtb.w	r9, r9
 8015d80:	f10b 3bff 	add.w	fp, fp, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8015d84:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
 8015d88:	d1e8      	bne.n	8015d5c <GUI_Text_LAB_Measure+0x1d4>
	if(number < old_num_L || old_nan == 1 )
 8015d8a:	4b79      	ldr	r3, [pc, #484]	; (8015f70 <GUI_Text_LAB_Measure+0x3e8>)
 8015d8c:	781a      	ldrb	r2, [r3, #0]
 8015d8e:	454a      	cmp	r2, r9
 8015d90:	4698      	mov	r8, r3
 8015d92:	d803      	bhi.n	8015d9c <GUI_Text_LAB_Measure+0x214>
 8015d94:	4b77      	ldr	r3, [pc, #476]	; (8015f74 <GUI_Text_LAB_Measure+0x3ec>)
 8015d96:	781b      	ldrb	r3, [r3, #0]
 8015d98:	2b01      	cmp	r3, #1
 8015d9a:	d10d      	bne.n	8015db8 <GUI_Text_LAB_Measure+0x230>
		TFT_FillRectangle(X+40, Y, X+250, Y+25, TFT_Black_Bkgr);
 8015d9c:	2163      	movs	r1, #99	; 0x63
 8015d9e:	f105 0319 	add.w	r3, r5, #25
 8015da2:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015da6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015daa:	9100      	str	r1, [sp, #0]
 8015dac:	b29b      	uxth	r3, r3
 8015dae:	b292      	uxth	r2, r2
 8015db0:	4629      	mov	r1, r5
 8015db2:	b280      	uxth	r0, r0
 8015db4:	f006 fc03 	bl	801c5be <TFT_FillRectangle>
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 8015db8:	9b05      	ldr	r3, [sp, #20]
	old_num_L = number;
 8015dba:	f888 9000 	strb.w	r9, [r8]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 8015dbe:	b13b      	cbz	r3, 8015dd0 <GUI_Text_LAB_Measure+0x248>
 8015dc0:	f1a4 0012 	sub.w	r0, r4, #18
 8015dc4:	4430      	add	r0, r6
 8015dc6:	222d      	movs	r2, #45	; 0x2d
 8015dc8:	4629      	mov	r1, r5
 8015dca:	b280      	uxth	r0, r0
 8015dcc:	f006 feea 	bl	801cba4 <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015dd0:	19a0      	adds	r0, r4, r6
 8015dd2:	2303      	movs	r3, #3
 8015dd4:	aa06      	add	r2, sp, #24
 8015dd6:	4629      	mov	r1, r5
 8015dd8:	b280      	uxth	r0, r0
 8015dda:	f006 ff3b 	bl	801cc54 <TFT_DisplayString>
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 8015dde:	2f00      	cmp	r7, #0
 8015de0:	bfbc      	itt	lt
 8015de2:	427f      	neglt	r7, r7
 8015de4:	b23f      	sxthlt	r7, r7
	TFT_SetFont(&Font26EN_arch_digit);
 8015de6:	485f      	ldr	r0, [pc, #380]	; (8015f64 <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 8015de8:	bfb4      	ite	lt
 8015dea:	f04f 0b01 	movlt.w	fp, #1
 8015dee:	f04f 0b00 	movge.w	fp, #0
	TFT_SetFont(&Font26EN_arch_digit);
 8015df2:	f006 fe0d 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%d", ValueA);
 8015df6:	463a      	mov	r2, r7
 8015df8:	495b      	ldr	r1, [pc, #364]	; (8015f68 <GUI_Text_LAB_Measure+0x3e0>)
 8015dfa:	a806      	add	r0, sp, #24
 8015dfc:	f00a fa4a 	bl	8020294 <sprintf>
	number = 0;
 8015e00:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueA);
 8015e04:	f04f 0904 	mov.w	r9, #4
	dec = 10;
 8015e08:	f04f 0a0a 	mov.w	sl, #10
	delta_pos = 180;
 8015e0c:	26b4      	movs	r6, #180	; 0xb4
		if((ValueA/(dec)) >= 1.0)
 8015e0e:	fbb7 f0fa 	udiv	r0, r7, sl
 8015e12:	f7ea fb8f 	bl	8000534 <__aeabi_ui2d>
 8015e16:	2200      	movs	r2, #0
 8015e18:	4b54      	ldr	r3, [pc, #336]	; (8015f6c <GUI_Text_LAB_Measure+0x3e4>)
 8015e1a:	f7ea fe87 	bl	8000b2c <__aeabi_dcmpge>
 8015e1e:	b140      	cbz	r0, 8015e32 <GUI_Text_LAB_Measure+0x2aa>
			dec *= 10;
 8015e20:	230a      	movs	r3, #10
			delta_pos-=23;
 8015e22:	3e17      	subs	r6, #23
			number++;
 8015e24:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8015e28:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8015e2c:	b2f6      	uxtb	r6, r6
			number++;
 8015e2e:	fa5f f888 	uxtb.w	r8, r8
 8015e32:	f109 39ff 	add.w	r9, r9, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 8015e36:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8015e3a:	d1e8      	bne.n	8015e0e <GUI_Text_LAB_Measure+0x286>
	if(number < old_num_A || old_nan == 1 )
 8015e3c:	4b4e      	ldr	r3, [pc, #312]	; (8015f78 <GUI_Text_LAB_Measure+0x3f0>)
 8015e3e:	781b      	ldrb	r3, [r3, #0]
 8015e40:	4543      	cmp	r3, r8
 8015e42:	f105 0723 	add.w	r7, r5, #35	; 0x23
 8015e46:	d803      	bhi.n	8015e50 <GUI_Text_LAB_Measure+0x2c8>
 8015e48:	4b4a      	ldr	r3, [pc, #296]	; (8015f74 <GUI_Text_LAB_Measure+0x3ec>)
 8015e4a:	781b      	ldrb	r3, [r3, #0]
 8015e4c:	2b01      	cmp	r3, #1
 8015e4e:	d10d      	bne.n	8015e6c <GUI_Text_LAB_Measure+0x2e4>
		TFT_FillRectangle(X+40, Y+35, X+250, Y+62, TFT_Black_Bkgr);
 8015e50:	2163      	movs	r1, #99	; 0x63
 8015e52:	f105 033e 	add.w	r3, r5, #62	; 0x3e
 8015e56:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015e5a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015e5e:	9100      	str	r1, [sp, #0]
 8015e60:	b29b      	uxth	r3, r3
 8015e62:	b292      	uxth	r2, r2
 8015e64:	b2b9      	uxth	r1, r7
 8015e66:	b280      	uxth	r0, r0
 8015e68:	f006 fba9 	bl	801c5be <TFT_FillRectangle>
	old_num_A = number;
 8015e6c:	4b42      	ldr	r3, [pc, #264]	; (8015f78 <GUI_Text_LAB_Measure+0x3f0>)
 8015e6e:	f883 8000 	strb.w	r8, [r3]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y+35, '-'); sign = 0;}
 8015e72:	f1bb 0f00 	cmp.w	fp, #0
 8015e76:	d007      	beq.n	8015e88 <GUI_Text_LAB_Measure+0x300>
 8015e78:	f1a4 0012 	sub.w	r0, r4, #18
 8015e7c:	4430      	add	r0, r6
 8015e7e:	222d      	movs	r2, #45	; 0x2d
 8015e80:	b2b9      	uxth	r1, r7
 8015e82:	b280      	uxth	r0, r0
 8015e84:	f006 fe8e 	bl	801cba4 <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8015e88:	19a0      	adds	r0, r4, r6
 8015e8a:	b2b9      	uxth	r1, r7
 8015e8c:	aa06      	add	r2, sp, #24
 8015e8e:	2303      	movs	r3, #3
 8015e90:	b280      	uxth	r0, r0
 8015e92:	f006 fedf 	bl	801cc54 <TFT_DisplayString>
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 8015e96:	9b04      	ldr	r3, [sp, #16]
	TFT_SetFont(&Font26EN_arch_digit);
 8015e98:	4832      	ldr	r0, [pc, #200]	; (8015f64 <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	bfbf      	itttt	lt
 8015e9e:	425b      	neglt	r3, r3
 8015ea0:	b21b      	sxthlt	r3, r3
 8015ea2:	9304      	strlt	r3, [sp, #16]
 8015ea4:	f04f 0901 	movlt.w	r9, #1
 8015ea8:	bfa8      	it	ge
 8015eaa:	f04f 0900 	movge.w	r9, #0
	TFT_SetFont(&Font26EN_arch_digit);
 8015eae:	f006 fdaf 	bl	801ca10 <TFT_SetFont>
	sprintf (buffer, "%d", ValueB);
 8015eb2:	9a04      	ldr	r2, [sp, #16]
 8015eb4:	492c      	ldr	r1, [pc, #176]	; (8015f68 <GUI_Text_LAB_Measure+0x3e0>)
 8015eb6:	a806      	add	r0, sp, #24
 8015eb8:	f00a f9ec 	bl	8020294 <sprintf>
	 dec = 10;
 8015ebc:	f04f 080a 	mov.w	r8, #10
	sprintf (buffer, "%d", ValueB);
 8015ec0:	2704      	movs	r7, #4
		delta_pos = 180;
 8015ec2:	26b4      	movs	r6, #180	; 0xb4
			dec *= 10;
 8015ec4:	46c2      	mov	sl, r8
		if(abs((ValueB/(dec))) >= 1.0)
 8015ec6:	9b04      	ldr	r3, [sp, #16]
 8015ec8:	fbb3 f0f8 	udiv	r0, r3, r8
 8015ecc:	2800      	cmp	r0, #0
 8015ece:	bfb8      	it	lt
 8015ed0:	4240      	neglt	r0, r0
 8015ed2:	f7ea fb3f 	bl	8000554 <__aeabi_i2d>
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	4b24      	ldr	r3, [pc, #144]	; (8015f6c <GUI_Text_LAB_Measure+0x3e4>)
 8015eda:	f7ea fe27 	bl	8000b2c <__aeabi_dcmpge>
 8015ede:	b138      	cbz	r0, 8015ef0 <GUI_Text_LAB_Measure+0x368>
			number++;
 8015ee0:	9b03      	ldr	r3, [sp, #12]
 8015ee2:	3301      	adds	r3, #1
			delta_pos-=23;
 8015ee4:	3e17      	subs	r6, #23
			number++;
 8015ee6:	b2db      	uxtb	r3, r3
			dec *= 10;
 8015ee8:	fb0a f808 	mul.w	r8, sl, r8
			delta_pos-=23;
 8015eec:	b2f6      	uxtb	r6, r6
			number++;
 8015eee:	9303      	str	r3, [sp, #12]
 8015ef0:	3f01      	subs	r7, #1
	for (uint8_t i = 1; i <= 4; i++)
 8015ef2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 8015ef6:	d1e6      	bne.n	8015ec6 <GUI_Text_LAB_Measure+0x33e>
	if(number < old_num_B || old_nan == 1)
 8015ef8:	4b20      	ldr	r3, [pc, #128]	; (8015f7c <GUI_Text_LAB_Measure+0x3f4>)
 8015efa:	9903      	ldr	r1, [sp, #12]
 8015efc:	781a      	ldrb	r2, [r3, #0]
 8015efe:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8015f74 <GUI_Text_LAB_Measure+0x3ec>
 8015f02:	428a      	cmp	r2, r1
 8015f04:	f105 0746 	add.w	r7, r5, #70	; 0x46
 8015f08:	469a      	mov	sl, r3
 8015f0a:	d803      	bhi.n	8015f14 <GUI_Text_LAB_Measure+0x38c>
 8015f0c:	f898 3000 	ldrb.w	r3, [r8]
 8015f10:	2b01      	cmp	r3, #1
 8015f12:	d10d      	bne.n	8015f30 <GUI_Text_LAB_Measure+0x3a8>
		TFT_FillRectangle(X+40, Y+70, X+250, Y+95, TFT_Black_Bkgr);
 8015f14:	2163      	movs	r1, #99	; 0x63
 8015f16:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 8015f1a:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015f1e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015f22:	9100      	str	r1, [sp, #0]
 8015f24:	b29b      	uxth	r3, r3
 8015f26:	b292      	uxth	r2, r2
 8015f28:	b2b9      	uxth	r1, r7
 8015f2a:	b280      	uxth	r0, r0
 8015f2c:	f006 fb47 	bl	801c5be <TFT_FillRectangle>
	old_num_B = number;
 8015f30:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8015f34:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
 8015f38:	f1b9 0f00 	cmp.w	r9, #0
 8015f3c:	d007      	beq.n	8015f4e <GUI_Text_LAB_Measure+0x3c6>
 8015f3e:	f1a4 0012 	sub.w	r0, r4, #18
 8015f42:	4430      	add	r0, r6
 8015f44:	222d      	movs	r2, #45	; 0x2d
 8015f46:	b2b9      	uxth	r1, r7
 8015f48:	b280      	uxth	r0, r0
 8015f4a:	f006 fe2b 	bl	801cba4 <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8015f4e:	19a0      	adds	r0, r4, r6
 8015f50:	2303      	movs	r3, #3
 8015f52:	aa06      	add	r2, sp, #24
 8015f54:	b2b9      	uxth	r1, r7
 8015f56:	b280      	uxth	r0, r0
 8015f58:	f006 fe7c 	bl	801cc54 <TFT_DisplayString>
		old_nan = 0;
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	f888 3000 	strb.w	r3, [r8]
 8015f62:	e687      	b.n	8015c74 <GUI_Text_LAB_Measure+0xec>
 8015f64:	200001f0 	.word	0x200001f0
 8015f68:	08024f89 	.word	0x08024f89
 8015f6c:	3ff00000 	.word	0x3ff00000
 8015f70:	20000241 	.word	0x20000241
 8015f74:	20005731 	.word	0x20005731
 8015f78:	2000023d 	.word	0x2000023d
 8015f7c:	2000023e 	.word	0x2000023e

08015f80 <GUI_Battery_Level>:
			

			

void GUI_Battery_Level(uint16_t X, uint16_t Y, double charge)
{
 8015f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	char buffer[5] = {0};
 8015f84:	2300      	movs	r3, #0
	
	
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8015f86:	f101 070a 	add.w	r7, r1, #10
 8015f8a:	f100 062d 	add.w	r6, r0, #45	; 0x2d
 8015f8e:	b2b6      	uxth	r6, r6
{
 8015f90:	4604      	mov	r4, r0
	char buffer[5] = {0};
 8015f92:	9302      	str	r3, [sp, #8]
 8015f94:	f88d 300c 	strb.w	r3, [sp, #12]
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8015f98:	f241 3a76 	movw	sl, #4982	; 0x1376
 8015f9c:	f101 031a 	add.w	r3, r1, #26
 8015fa0:	b2bf      	uxth	r7, r7
 8015fa2:	300a      	adds	r0, #10
{
 8015fa4:	460d      	mov	r5, r1
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8015fa6:	4632      	mov	r2, r6
 8015fa8:	b29b      	uxth	r3, r3
 8015faa:	4639      	mov	r1, r7
 8015fac:	b280      	uxth	r0, r0
 8015fae:	f8cd a000 	str.w	sl, [sp]
{
 8015fb2:	ec59 8b10 	vmov	r8, r9, d0
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8015fb6:	f006 fb02 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(X+45, Y+15, X+48, Y+20, TFT_Blue_Off); //small battery rect
 8015fba:	f105 0314 	add.w	r3, r5, #20
 8015fbe:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8015fc2:	f105 010f 	add.w	r1, r5, #15
 8015fc6:	4630      	mov	r0, r6
 8015fc8:	b29b      	uxth	r3, r3
 8015fca:	b292      	uxth	r2, r2
 8015fcc:	b289      	uxth	r1, r1
 8015fce:	f8cd a000 	str.w	sl, [sp]
 8015fd2:	f006 faf4 	bl	801c5be <TFT_FillRectangle>

		if(charge < 12)
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	4b4b      	ldr	r3, [pc, #300]	; (8016108 <GUI_Battery_Level+0x188>)
 8015fda:	4640      	mov	r0, r8
 8015fdc:	4649      	mov	r1, r9
 8015fde:	f7ea fd91 	bl	8000b04 <__aeabi_dcmplt>
 8015fe2:	f105 0618 	add.w	r6, r5, #24
 8015fe6:	b170      	cbz	r0, 8016006 <GUI_Battery_Level+0x86>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_Red);
 8015fe8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8015fec:	f104 0213 	add.w	r2, r4, #19
 8015ff0:	f105 010c 	add.w	r1, r5, #12
 8015ff4:	f104 000f 	add.w	r0, r4, #15
 8015ff8:	9300      	str	r3, [sp, #0]
 8015ffa:	b292      	uxth	r2, r2
 8015ffc:	b2b3      	uxth	r3, r6
 8015ffe:	b289      	uxth	r1, r1
 8016000:	b280      	uxth	r0, r0
 8016002:	f006 fadc 	bl	801c5be <TFT_FillRectangle>
		}		
		if(charge >= 12)
 8016006:	2200      	movs	r2, #0
 8016008:	4b3f      	ldr	r3, [pc, #252]	; (8016108 <GUI_Battery_Level+0x188>)
 801600a:	4640      	mov	r0, r8
 801600c:	4649      	mov	r1, r9
 801600e:	f7ea fd8d 	bl	8000b2c <__aeabi_dcmpge>
 8016012:	b170      	cbz	r0, 8016032 <GUI_Battery_Level+0xb2>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_White);
 8016014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016018:	f104 0213 	add.w	r2, r4, #19
 801601c:	f105 010c 	add.w	r1, r5, #12
 8016020:	f104 000f 	add.w	r0, r4, #15
 8016024:	9300      	str	r3, [sp, #0]
 8016026:	b292      	uxth	r2, r2
 8016028:	b2b3      	uxth	r3, r6
 801602a:	b289      	uxth	r1, r1
 801602c:	b280      	uxth	r0, r0
 801602e:	f006 fac6 	bl	801c5be <TFT_FillRectangle>
		}		
		if(charge >= 25)
 8016032:	2200      	movs	r2, #0
 8016034:	4b35      	ldr	r3, [pc, #212]	; (801610c <GUI_Battery_Level+0x18c>)
 8016036:	4640      	mov	r0, r8
 8016038:	4649      	mov	r1, r9
 801603a:	f7ea fd77 	bl	8000b2c <__aeabi_dcmpge>
 801603e:	b170      	cbz	r0, 801605e <GUI_Battery_Level+0xde>
		{
			TFT_FillRectangle(X+22, Y+12, X+26, Y+24, TFT_White);
 8016040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016044:	f104 021a 	add.w	r2, r4, #26
 8016048:	f105 010c 	add.w	r1, r5, #12
 801604c:	f104 0016 	add.w	r0, r4, #22
 8016050:	9300      	str	r3, [sp, #0]
 8016052:	b292      	uxth	r2, r2
 8016054:	b2b3      	uxth	r3, r6
 8016056:	b289      	uxth	r1, r1
 8016058:	b280      	uxth	r0, r0
 801605a:	f006 fab0 	bl	801c5be <TFT_FillRectangle>
		}		
		if(charge >= 50)
 801605e:	2200      	movs	r2, #0
 8016060:	4b2b      	ldr	r3, [pc, #172]	; (8016110 <GUI_Battery_Level+0x190>)
 8016062:	4640      	mov	r0, r8
 8016064:	4649      	mov	r1, r9
 8016066:	f7ea fd61 	bl	8000b2c <__aeabi_dcmpge>
 801606a:	b170      	cbz	r0, 801608a <GUI_Battery_Level+0x10a>
		{
			TFT_FillRectangle(X+29, Y+12, X+33, Y+24, TFT_White);
 801606c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016070:	f104 0221 	add.w	r2, r4, #33	; 0x21
 8016074:	f105 010c 	add.w	r1, r5, #12
 8016078:	f104 001d 	add.w	r0, r4, #29
 801607c:	9300      	str	r3, [sp, #0]
 801607e:	b292      	uxth	r2, r2
 8016080:	b2b3      	uxth	r3, r6
 8016082:	b289      	uxth	r1, r1
 8016084:	b280      	uxth	r0, r0
 8016086:	f006 fa9a 	bl	801c5be <TFT_FillRectangle>
		}
		if(charge >= 85)
 801608a:	2200      	movs	r2, #0
 801608c:	4b21      	ldr	r3, [pc, #132]	; (8016114 <GUI_Battery_Level+0x194>)
 801608e:	4640      	mov	r0, r8
 8016090:	4649      	mov	r1, r9
 8016092:	f7ea fd4b 	bl	8000b2c <__aeabi_dcmpge>
 8016096:	b170      	cbz	r0, 80160b6 <GUI_Battery_Level+0x136>
		{
			TFT_FillRectangle(X+36, Y+12, X+40, Y+24, TFT_White);
 8016098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801609c:	f104 0228 	add.w	r2, r4, #40	; 0x28
 80160a0:	f105 010c 	add.w	r1, r5, #12
 80160a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80160a8:	9300      	str	r3, [sp, #0]
 80160aa:	b292      	uxth	r2, r2
 80160ac:	b2b3      	uxth	r3, r6
 80160ae:	b289      	uxth	r1, r1
 80160b0:	b280      	uxth	r0, r0
 80160b2:	f006 fa84 	bl	801c5be <TFT_FillRectangle>
		}
		
		sprintf (buffer, "%.1f%%", charge);
 80160b6:	4642      	mov	r2, r8
 80160b8:	464b      	mov	r3, r9
 80160ba:	4917      	ldr	r1, [pc, #92]	; (8016118 <GUI_Battery_Level+0x198>)
 80160bc:	a802      	add	r0, sp, #8
 80160be:	f00a f8e9 	bl	8020294 <sprintf>
		TFT_SetFont(&Font8);
 80160c2:	4816      	ldr	r0, [pc, #88]	; (801611c <GUI_Battery_Level+0x19c>)
 80160c4:	f006 fca4 	bl	801ca10 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 80160c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80160cc:	f006 fca6 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 80160d0:	2063      	movs	r0, #99	; 0x63
 80160d2:	f006 fca9 	bl	801ca28 <TFT_SetBackColor>
		TFT_FillRectangle(X+50, Y+10, X+80, Y+24, TFT_Black_Bkgr);
 80160d6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80160da:	f104 0032 	add.w	r0, r4, #50	; 0x32
 80160de:	2363      	movs	r3, #99	; 0x63
 80160e0:	9300      	str	r3, [sp, #0]
 80160e2:	4639      	mov	r1, r7
 80160e4:	b2b3      	uxth	r3, r6
 80160e6:	b292      	uxth	r2, r2
 80160e8:	b280      	uxth	r0, r0
 80160ea:	f006 fa68 	bl	801c5be <TFT_FillRectangle>
		TFT_DisplayString(X+52, Y+14, (uint8_t *)buffer, LEFT_MODE);
 80160ee:	f105 010e 	add.w	r1, r5, #14
 80160f2:	f104 0034 	add.w	r0, r4, #52	; 0x34
 80160f6:	2303      	movs	r3, #3
 80160f8:	aa02      	add	r2, sp, #8
 80160fa:	b289      	uxth	r1, r1
 80160fc:	b280      	uxth	r0, r0
 80160fe:	f006 fda9 	bl	801cc54 <TFT_DisplayString>

}
 8016102:	b004      	add	sp, #16
 8016104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016108:	40280000 	.word	0x40280000
 801610c:	40390000 	.word	0x40390000
 8016110:	40490000 	.word	0x40490000
 8016114:	40554000 	.word	0x40554000
 8016118:	08031d5e 	.word	0x08031d5e
 801611c:	20000218 	.word	0x20000218

08016120 <GUI_Axes_Locus_XY>:

void GUI_Axes_Locus_XY(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 8016120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8016122:	1e86      	subs	r6, r0, #2
{
 8016124:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8016126:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801612a:	b2b6      	uxth	r6, r6
 801612c:	39fa      	subs	r1, #250	; 0xfa
{
 801612e:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 8016130:	4623      	mov	r3, r4
 8016132:	4602      	mov	r2, r0
 8016134:	9700      	str	r7, [sp, #0]
 8016136:	4630      	mov	r0, r6
 8016138:	b289      	uxth	r1, r1
 801613a:	f006 fa40 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+XY2_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 801613e:	1ce3      	adds	r3, r4, #3
 8016140:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 8016144:	1c61      	adds	r1, r4, #1
 8016146:	4630      	mov	r0, r6
 8016148:	9700      	str	r7, [sp, #0]
 801614a:	b29b      	uxth	r3, r3
 801614c:	b292      	uxth	r2, r2
 801614e:	b289      	uxth	r1, r1
 8016150:	f006 fa35 	bl	801c5be <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-300/2, X_center+3, Y_center-300/2, TFT_White);
 8016154:	f1a4 0396 	sub.w	r3, r4, #150	; 0x96
 8016158:	b29b      	uxth	r3, r3
 801615a:	1cea      	adds	r2, r5, #3
 801615c:	1f68      	subs	r0, r5, #5
 801615e:	4619      	mov	r1, r3
 8016160:	9700      	str	r7, [sp, #0]
 8016162:	b292      	uxth	r2, r2
 8016164:	b280      	uxth	r0, r0
 8016166:	f006 f9cd 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(X_center+295/2, Y_center-3, X_center+295/2, Y_center+6, TFT_White);
 801616a:	1da6      	adds	r6, r4, #6
 801616c:	f105 0293 	add.w	r2, r5, #147	; 0x93
 8016170:	b292      	uxth	r2, r2
 8016172:	b2b6      	uxth	r6, r6
 8016174:	1ee1      	subs	r1, r4, #3
 8016176:	4633      	mov	r3, r6
 8016178:	4610      	mov	r0, r2
 801617a:	b289      	uxth	r1, r1
 801617c:	9700      	str	r7, [sp, #0]
 801617e:	f006 f9c1 	bl	801c504 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 8016182:	4819      	ldr	r0, [pc, #100]	; (80161e8 <GUI_Axes_Locus_XY+0xc8>)
 8016184:	f006 fc44 	bl	801ca10 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8016188:	3c98      	subs	r4, #152	; 0x98
		TFT_SetTextColor(TFT_White);
 801618a:	4638      	mov	r0, r7
 801618c:	f006 fc46 	bl	801ca1c <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8016190:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 8016192:	2063      	movs	r0, #99	; 0x63
 8016194:	f006 fc48 	bl	801ca28 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8016198:	4621      	mov	r1, r4
 801619a:	222e      	movs	r2, #46	; 0x2e
 801619c:	2004      	movs	r0, #4
 801619e:	f006 fd01 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-300/2-2, '0');
 80161a2:	4621      	mov	r1, r4
 80161a4:	2230      	movs	r2, #48	; 0x30
 80161a6:	2000      	movs	r0, #0
 80161a8:	f006 fcfc 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-300/2-2, '5');
 80161ac:	4621      	mov	r1, r4
 80161ae:	2235      	movs	r2, #53	; 0x35
 80161b0:	2008      	movs	r0, #8
 80161b2:	f006 fcf7 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+295/2-6+4,  Y_center+6, '.');
 80161b6:	f105 0091 	add.w	r0, r5, #145	; 0x91
 80161ba:	4631      	mov	r1, r6
 80161bc:	222e      	movs	r2, #46	; 0x2e
 80161be:	b280      	uxth	r0, r0
 80161c0:	f006 fcf0 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+0,  Y_center+6, '0');
 80161c4:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 80161c8:	4631      	mov	r1, r6
 80161ca:	2230      	movs	r2, #48	; 0x30
 80161cc:	b280      	uxth	r0, r0
 80161ce:	f006 fce9 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 80161d2:	f105 0095 	add.w	r0, r5, #149	; 0x95
 80161d6:	2235      	movs	r2, #53	; 0x35
 80161d8:	4631      	mov	r1, r6
 80161da:	b280      	uxth	r0, r0
}
 80161dc:	b003      	add	sp, #12
 80161de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 80161e2:	f006 bcdf 	b.w	801cba4 <TFT_DrawChar>
 80161e6:	bf00      	nop
 80161e8:	20000210 	.word	0x20000210

080161ec <GUI_Axes_Locus_LUV>:

void GUI_Axes_Locus_LUV(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 80161ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80161ee:	1e86      	subs	r6, r0, #2
{
 80161f0:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80161f2:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80161f6:	b2b6      	uxth	r6, r6
 80161f8:	39ea      	subs	r1, #234	; 0xea
{
 80161fa:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80161fc:	4623      	mov	r3, r4
 80161fe:	4602      	mov	r2, r0
 8016200:	9700      	str	r7, [sp, #0]
 8016202:	4630      	mov	r0, r6
 8016204:	b289      	uxth	r1, r1
 8016206:	f006 f9da 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+LUV_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 801620a:	1ce3      	adds	r3, r4, #3
 801620c:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8016210:	1c61      	adds	r1, r4, #1
 8016212:	4630      	mov	r0, r6
 8016214:	9700      	str	r7, [sp, #0]
 8016216:	b29b      	uxth	r3, r3
 8016218:	b292      	uxth	r2, r2
 801621a:	b289      	uxth	r1, r1
 801621c:	f006 f9cf 	bl	801c5be <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-396/2, X_center+3, Y_center-396/2, TFT_White);
 8016220:	f1a4 03c6 	sub.w	r3, r4, #198	; 0xc6
 8016224:	b29b      	uxth	r3, r3
 8016226:	1cea      	adds	r2, r5, #3
 8016228:	1f68      	subs	r0, r5, #5
 801622a:	4619      	mov	r1, r3
 801622c:	9700      	str	r7, [sp, #0]
 801622e:	b292      	uxth	r2, r2
 8016230:	b280      	uxth	r0, r0
 8016232:	f006 f967 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(X_center+403/2, Y_center-3, X_center+403/2, Y_center+6, TFT_White);
 8016236:	1da6      	adds	r6, r4, #6
 8016238:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
 801623c:	b292      	uxth	r2, r2
 801623e:	b2b6      	uxth	r6, r6
 8016240:	1ee1      	subs	r1, r4, #3
 8016242:	4633      	mov	r3, r6
 8016244:	4610      	mov	r0, r2
 8016246:	b289      	uxth	r1, r1
 8016248:	9700      	str	r7, [sp, #0]
 801624a:	f006 f95b 	bl	801c504 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 801624e:	4819      	ldr	r0, [pc, #100]	; (80162b4 <GUI_Axes_Locus_LUV+0xc8>)
 8016250:	f006 fbde 	bl	801ca10 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8016254:	3cc8      	subs	r4, #200	; 0xc8
		TFT_SetTextColor(TFT_White);
 8016256:	4638      	mov	r0, r7
 8016258:	f006 fbe0 	bl	801ca1c <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 801625c:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 801625e:	2063      	movs	r0, #99	; 0x63
 8016260:	f006 fbe2 	bl	801ca28 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8016264:	4621      	mov	r1, r4
 8016266:	222e      	movs	r2, #46	; 0x2e
 8016268:	2004      	movs	r0, #4
 801626a:	f006 fc9b 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-396/2-2, '0');
 801626e:	4621      	mov	r1, r4
 8016270:	2230      	movs	r2, #48	; 0x30
 8016272:	2000      	movs	r0, #0
 8016274:	f006 fc96 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-396/2-2, '5');
 8016278:	4621      	mov	r1, r4
 801627a:	2235      	movs	r2, #53	; 0x35
 801627c:	2008      	movs	r0, #8
 801627e:	f006 fc91 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+403/2-6+4,  Y_center+6, '.');
 8016282:	f105 00c7 	add.w	r0, r5, #199	; 0xc7
 8016286:	4631      	mov	r1, r6
 8016288:	222e      	movs	r2, #46	; 0x2e
 801628a:	b280      	uxth	r0, r0
 801628c:	f006 fc8a 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+0,  Y_center+6, '0');
 8016290:	f105 00c3 	add.w	r0, r5, #195	; 0xc3
 8016294:	4631      	mov	r1, r6
 8016296:	2230      	movs	r2, #48	; 0x30
 8016298:	b280      	uxth	r0, r0
 801629a:	f006 fc83 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 801629e:	f105 00cb 	add.w	r0, r5, #203	; 0xcb
 80162a2:	2235      	movs	r2, #53	; 0x35
 80162a4:	4631      	mov	r1, r6
 80162a6:	b280      	uxth	r0, r0
}
 80162a8:	b003      	add	sp, #12
 80162aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 80162ae:	f006 bc79 	b.w	801cba4 <TFT_DrawChar>
 80162b2:	bf00      	nop
 80162b4:	20000210 	.word	0x20000210

080162b8 <GUI_Axes_Locus_Lab>:

void GUI_Axes_Locus_Lab(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 80162b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 80162bc:	f100 037d 	add.w	r3, r0, #125	; 0x7d
{
 80162c0:	b087      	sub	sp, #28
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 80162c2:	b29b      	uxth	r3, r3
{
 80162c4:	4604      	mov	r4, r0
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 80162c6:	f64f 77ff 	movw	r7, #65535	; 0xffff
{
 80162ca:	460d      	mov	r5, r1
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 80162cc:	9303      	str	r3, [sp, #12]
 80162ce:	387f      	subs	r0, #127	; 0x7f
 80162d0:	1c4b      	adds	r3, r1, #1
 80162d2:	3901      	subs	r1, #1
 80162d4:	9a03      	ldr	r2, [sp, #12]
 80162d6:	9700      	str	r7, [sp, #0]
 80162d8:	b29b      	uxth	r3, r3
 80162da:	b289      	uxth	r1, r1
 80162dc:	b280      	uxth	r0, r0
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 80162de:	f1a5 067d 	sub.w	r6, r5, #125	; 0x7d
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 80162e2:	f006 f96c 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 80162e6:	b2b6      	uxth	r6, r6
 80162e8:	f105 037d 	add.w	r3, r5, #125	; 0x7d
 80162ec:	1ea0      	subs	r0, r4, #2
 80162ee:	b29b      	uxth	r3, r3
 80162f0:	4622      	mov	r2, r4
 80162f2:	4631      	mov	r1, r6
 80162f4:	9700      	str	r7, [sp, #0]
 80162f6:	b280      	uxth	r0, r0
 80162f8:	9304      	str	r3, [sp, #16]
 80162fa:	f006 f960 	bl	801c5be <TFT_FillRectangle>
		

		TFT_SetFont(&Font6EN_arch_big);
 80162fe:	4850      	ldr	r0, [pc, #320]	; (8016440 <GUI_Axes_Locus_Lab+0x188>)
 8016300:	f006 fb86 	bl	801ca10 <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 8016304:	4638      	mov	r0, r7
 8016306:	f006 fb89 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801630a:	2063      	movs	r0, #99	; 0x63
 801630c:	f006 fb8c 	bl	801ca28 <TFT_SetBackColor>
	
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8016310:	f1a4 031e 	sub.w	r3, r4, #30
 8016314:	b29b      	uxth	r3, r3
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 8016316:	f1a4 0b19 	sub.w	fp, r4, #25
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 801631a:	4618      	mov	r0, r3
 801631c:	4631      	mov	r1, r6
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 801631e:	fa1f fb8b 	uxth.w	fp, fp
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8016322:	222b      	movs	r2, #43	; 0x2b
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 8016324:	f1a4 0a14 	sub.w	sl, r4, #20
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 8016328:	9305      	str	r3, [sp, #20]
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 801632a:	fa1f fa8a 	uxth.w	sl, sl
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 801632e:	f006 fc39 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8016332:	f1a4 090e 	sub.w	r9, r4, #14
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 8016336:	4631      	mov	r1, r6
 8016338:	4658      	mov	r0, fp
 801633a:	2231      	movs	r2, #49	; 0x31
 801633c:	f006 fc32 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8016340:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 8016344:	4631      	mov	r1, r6
 8016346:	4650      	mov	r0, sl
 8016348:	2232      	movs	r2, #50	; 0x32
 801634a:	f006 fc2b 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 801634e:	4631      	mov	r1, r6
 8016350:	4648      	mov	r0, r9
 8016352:	2238      	movs	r2, #56	; 0x38
 8016354:	f006 fc26 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(X_center-35+5,  Y_center+LAB_LOCUS_SIZEY/2-8, '-');
 8016358:	f105 0875 	add.w	r8, r5, #117	; 0x75
 801635c:	9b05      	ldr	r3, [sp, #20]
 801635e:	fa1f f888 	uxth.w	r8, r8
 8016362:	4618      	mov	r0, r3
 8016364:	4641      	mov	r1, r8
 8016366:	222d      	movs	r2, #45	; 0x2d
 8016368:	f006 fc1c 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+10,  Y_center+LAB_LOCUS_SIZEY/2-8, '1');
 801636c:	4641      	mov	r1, r8
 801636e:	4658      	mov	r0, fp
 8016370:	2231      	movs	r2, #49	; 0x31
 8016372:	f006 fc17 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+15,  Y_center+LAB_LOCUS_SIZEY/2-8, '2');
 8016376:	4641      	mov	r1, r8
 8016378:	4650      	mov	r0, sl
 801637a:	2232      	movs	r2, #50	; 0x32
 801637c:	f006 fc12 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 8016380:	4641      	mov	r1, r8
		
		TFT_DrawChar(0,  Y_center-11, '-');
 8016382:	f1a5 080b 	sub.w	r8, r5, #11
 8016386:	fa1f f888 	uxth.w	r8, r8
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 801638a:	4648      	mov	r0, r9
 801638c:	2238      	movs	r2, #56	; 0x38
 801638e:	f006 fc09 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-11, '-');
 8016392:	4641      	mov	r1, r8
 8016394:	222d      	movs	r2, #45	; 0x2d
 8016396:	2000      	movs	r0, #0
 8016398:	f006 fc04 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(5,  Y_center-11, '1');
 801639c:	4641      	mov	r1, r8
 801639e:	2231      	movs	r2, #49	; 0x31
 80163a0:	2005      	movs	r0, #5
 80163a2:	f006 fbff 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(10,  Y_center-11, '2');
 80163a6:	4641      	mov	r1, r8
 80163a8:	2232      	movs	r2, #50	; 0x32
 80163aa:	200a      	movs	r0, #10
 80163ac:	f006 fbfa 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(16,  Y_center-11, '8');
 80163b0:	4641      	mov	r1, r8
 80163b2:	2238      	movs	r2, #56	; 0x38
 80163b4:	2010      	movs	r0, #16
 80163b6:	f006 fbf5 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(260-15,  Y_center-11, '+');
 80163ba:	4641      	mov	r1, r8
 80163bc:	222b      	movs	r2, #43	; 0x2b
 80163be:	20f5      	movs	r0, #245	; 0xf5
 80163c0:	f006 fbf0 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(260-10,  Y_center-11, '1');
 80163c4:	4641      	mov	r1, r8
 80163c6:	2231      	movs	r2, #49	; 0x31
 80163c8:	20fa      	movs	r0, #250	; 0xfa
 80163ca:	f006 fbeb 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(260-5,  Y_center-11, '2');
 80163ce:	4641      	mov	r1, r8
 80163d0:	2232      	movs	r2, #50	; 0x32
 80163d2:	20ff      	movs	r0, #255	; 0xff
 80163d4:	f006 fbe6 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(260,  Y_center-11, '8');
		
		//		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/4, X_center+3, Y_center-LAB_LOCUS_SIZEY/4, TFT_White);
//		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/4, X_center+3, Y_center+LAB_LOCUS_SIZEY/4, TFT_White);
		
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 80163d8:	f104 0903 	add.w	r9, r4, #3
		TFT_DrawChar(260,  Y_center-11, '8');
 80163dc:	4641      	mov	r1, r8
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 80163de:	f1a4 0805 	sub.w	r8, r4, #5
 80163e2:	fa1f f888 	uxth.w	r8, r8
 80163e6:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(260,  Y_center-11, '8');
 80163ea:	2238      	movs	r2, #56	; 0x38
 80163ec:	f44f 7082 	mov.w	r0, #260	; 0x104
 80163f0:	f006 fbd8 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 80163f4:	4633      	mov	r3, r6
 80163f6:	464a      	mov	r2, r9
 80163f8:	4631      	mov	r1, r6
 80163fa:	4640      	mov	r0, r8
 80163fc:	9700      	str	r7, [sp, #0]
 80163fe:	f006 f881 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/2, X_center+3, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);
 8016402:	9b04      	ldr	r3, [sp, #16]
 8016404:	9700      	str	r7, [sp, #0]
 8016406:	464a      	mov	r2, r9
 8016408:	4619      	mov	r1, r3
 801640a:	4640      	mov	r0, r8
 801640c:	f006 f87a 	bl	801c504 <TFT_DrawLine>
	
//		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/4, Y_center-3, X_center-LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
//		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/4, Y_center-3, X_center+LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
		
		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/2+1, Y_center-3, X_center-LAB_LOCUS_SIZEX/2+1, Y_center+6, TFT_White);
 8016410:	f1a4 027c 	sub.w	r2, r4, #124	; 0x7c
 8016414:	1eec      	subs	r4, r5, #3
 8016416:	3506      	adds	r5, #6
 8016418:	b292      	uxth	r2, r2
 801641a:	b2a4      	uxth	r4, r4
 801641c:	b2ad      	uxth	r5, r5
 801641e:	462b      	mov	r3, r5
 8016420:	4621      	mov	r1, r4
 8016422:	4610      	mov	r0, r2
 8016424:	9700      	str	r7, [sp, #0]
 8016426:	f006 f86d 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/2, Y_center-3, X_center+LAB_LOCUS_SIZEX/2, Y_center+6, TFT_White);
 801642a:	9a03      	ldr	r2, [sp, #12]
 801642c:	9700      	str	r7, [sp, #0]
 801642e:	462b      	mov	r3, r5
 8016430:	4621      	mov	r1, r4
 8016432:	4610      	mov	r0, r2
 8016434:	f006 f866 	bl	801c504 <TFT_DrawLine>
}
 8016438:	b007      	add	sp, #28
 801643a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801643e:	bf00      	nop
 8016440:	20000210 	.word	0x20000210

08016444 <GUI_Text_CIE_XYZ>:
#include "stdio.h"
#include "GUI_Text_Elements_EN.h"


void GUI_Text_CIE_XYZ(uint16_t X, uint16_t Y)
{
 8016444:	b538      	push	{r3, r4, r5, lr}
 8016446:	4604      	mov	r4, r0
TFT_SetTextColor(TFT_White);
 8016448:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801644c:	460d      	mov	r5, r1
TFT_SetTextColor(TFT_White);
 801644e:	f006 fae5 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016452:	2063      	movs	r0, #99	; 0x63
 8016454:	f006 fae8 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016458:	4816      	ldr	r0, [pc, #88]	; (80164b4 <GUI_Text_CIE_XYZ+0x70>)
 801645a:	f006 fad9 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 801645e:	4629      	mov	r1, r5
 8016460:	4620      	mov	r0, r4
 8016462:	2243      	movs	r2, #67	; 0x43
 8016464:	f006 fb9e 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8016468:	f104 000d 	add.w	r0, r4, #13
 801646c:	4629      	mov	r1, r5
 801646e:	2249      	movs	r2, #73	; 0x49
 8016470:	b280      	uxth	r0, r0
 8016472:	f006 fb97 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016476:	f104 001b 	add.w	r0, r4, #27
 801647a:	4629      	mov	r1, r5
 801647c:	2245      	movs	r2, #69	; 0x45
 801647e:	b280      	uxth	r0, r0
 8016480:	f006 fb90 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'X');
 8016484:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8016488:	4629      	mov	r1, r5
 801648a:	2258      	movs	r2, #88	; 0x58
 801648c:	b280      	uxth	r0, r0
 801648e:	f006 fb89 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y, 'Y');
 8016492:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8016496:	4629      	mov	r1, r5
 8016498:	2259      	movs	r2, #89	; 0x59
 801649a:	b280      	uxth	r0, r0
 801649c:	f006 fb82 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y, 'Z');
 80164a0:	f104 0051 	add.w	r0, r4, #81	; 0x51
 80164a4:	4629      	mov	r1, r5
 80164a6:	225a      	movs	r2, #90	; 0x5a
 80164a8:	b280      	uxth	r0, r0
}
 80164aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+81, Y, 'Z');
 80164ae:	f006 bb79 	b.w	801cba4 <TFT_DrawChar>
 80164b2:	bf00      	nop
 80164b4:	200001b0 	.word	0x200001b0

080164b8 <GUI_Text_CIE_xy_1931>:
	TFT_DrawChar(X+49, Y+1, 'x');
	TFT_DrawChar(X+72, Y+1, 'y');
}

void GUI_Text_CIE_xy_1931(uint16_t X, uint16_t Y)
{
 80164b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164ba:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 80164bc:	4f2c      	ldr	r7, [pc, #176]	; (8016570 <GUI_Text_CIE_xy_1931+0xb8>)
	TFT_SetTextColor(TFT_White);
 80164be:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80164c2:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80164c4:	f006 faaa 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80164c8:	2063      	movs	r0, #99	; 0x63
 80164ca:	f006 faad 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80164ce:	4638      	mov	r0, r7
 80164d0:	f006 fa9e 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80164d4:	4629      	mov	r1, r5
 80164d6:	4620      	mov	r0, r4
 80164d8:	2243      	movs	r2, #67	; 0x43
 80164da:	f006 fb63 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80164de:	f104 000d 	add.w	r0, r4, #13
 80164e2:	4629      	mov	r1, r5
 80164e4:	2249      	movs	r2, #73	; 0x49
 80164e6:	b280      	uxth	r0, r0
 80164e8:	f006 fb5c 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80164ec:	f104 001b 	add.w	r0, r4, #27
 80164f0:	4629      	mov	r1, r5
 80164f2:	2245      	movs	r2, #69	; 0x45
 80164f4:	b280      	uxth	r0, r0
 80164f6:	f006 fb55 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 80164fa:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80164fe:	4629      	mov	r1, r5
 8016500:	222c      	movs	r2, #44	; 0x2c
 8016502:	b280      	uxth	r0, r0
 8016504:	f006 fb4e 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 8016508:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 801650a:	481a      	ldr	r0, [pc, #104]	; (8016574 <GUI_Text_CIE_xy_1931+0xbc>)
 801650c:	f006 fa80 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8016510:	b2b6      	uxth	r6, r6
 8016512:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8016516:	4631      	mov	r1, r6
 8016518:	2278      	movs	r2, #120	; 0x78
 801651a:	b280      	uxth	r0, r0
 801651c:	f006 fb42 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 8016520:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8016524:	4631      	mov	r1, r6
 8016526:	2279      	movs	r2, #121	; 0x79
 8016528:	b280      	uxth	r0, r0
 801652a:	f006 fb3b 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 801652e:	4638      	mov	r0, r7
 8016530:	f006 fa6e 	bl	801ca10 <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 8016534:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016538:	4629      	mov	r1, r5
 801653a:	2231      	movs	r2, #49	; 0x31
 801653c:	b280      	uxth	r0, r0
 801653e:	f006 fb31 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+133, Y, '1');
 8016542:	f104 0085 	add.w	r0, r4, #133	; 0x85
 8016546:	4629      	mov	r1, r5
 8016548:	2231      	movs	r2, #49	; 0x31
 801654a:	b280      	uxth	r0, r0
 801654c:	f006 fb2a 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 8016550:	f104 0069 	add.w	r0, r4, #105	; 0x69
 8016554:	4629      	mov	r1, r5
 8016556:	2239      	movs	r2, #57	; 0x39
 8016558:	b280      	uxth	r0, r0
 801655a:	f006 fb23 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+121, Y, '3');
 801655e:	f104 0079 	add.w	r0, r4, #121	; 0x79
 8016562:	4629      	mov	r1, r5
 8016564:	2233      	movs	r2, #51	; 0x33
 8016566:	b280      	uxth	r0, r0


}
 8016568:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+121, Y, '3');
 801656c:	f006 bb1a 	b.w	801cba4 <TFT_DrawChar>
 8016570:	200001b0 	.word	0x200001b0
 8016574:	200001c0 	.word	0x200001c0

08016578 <GUI_Text_CIE_xy_1964>:

void GUI_Text_CIE_xy_1964(uint16_t X, uint16_t Y)
{
 8016578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801657a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 801657c:	4f2c      	ldr	r7, [pc, #176]	; (8016630 <GUI_Text_CIE_xy_1964+0xb8>)
	TFT_SetTextColor(TFT_White);
 801657e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016582:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016584:	f006 fa4a 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016588:	2063      	movs	r0, #99	; 0x63
 801658a:	f006 fa4d 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801658e:	4638      	mov	r0, r7
 8016590:	f006 fa3e 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016594:	4629      	mov	r1, r5
 8016596:	4620      	mov	r0, r4
 8016598:	2243      	movs	r2, #67	; 0x43
 801659a:	f006 fb03 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 801659e:	f104 000d 	add.w	r0, r4, #13
 80165a2:	4629      	mov	r1, r5
 80165a4:	2249      	movs	r2, #73	; 0x49
 80165a6:	b280      	uxth	r0, r0
 80165a8:	f006 fafc 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80165ac:	f104 001b 	add.w	r0, r4, #27
 80165b0:	4629      	mov	r1, r5
 80165b2:	2245      	movs	r2, #69	; 0x45
 80165b4:	b280      	uxth	r0, r0
 80165b6:	f006 faf5 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 80165ba:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80165be:	4629      	mov	r1, r5
 80165c0:	222c      	movs	r2, #44	; 0x2c
 80165c2:	b280      	uxth	r0, r0
 80165c4:	f006 faee 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 80165c8:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 80165ca:	481a      	ldr	r0, [pc, #104]	; (8016634 <GUI_Text_CIE_xy_1964+0xbc>)
 80165cc:	f006 fa20 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 80165d0:	b2b6      	uxth	r6, r6
 80165d2:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80165d6:	4631      	mov	r1, r6
 80165d8:	2278      	movs	r2, #120	; 0x78
 80165da:	b280      	uxth	r0, r0
 80165dc:	f006 fae2 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 80165e0:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80165e4:	4631      	mov	r1, r6
 80165e6:	2279      	movs	r2, #121	; 0x79
 80165e8:	b280      	uxth	r0, r0
 80165ea:	f006 fadb 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80165ee:	4638      	mov	r0, r7
 80165f0:	f006 fa0e 	bl	801ca10 <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 80165f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80165f8:	4629      	mov	r1, r5
 80165fa:	2231      	movs	r2, #49	; 0x31
 80165fc:	b280      	uxth	r0, r0
 80165fe:	f006 fad1 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 8016602:	f104 0069 	add.w	r0, r4, #105	; 0x69
 8016606:	4629      	mov	r1, r5
 8016608:	2239      	movs	r2, #57	; 0x39
 801660a:	b280      	uxth	r0, r0
 801660c:	f006 faca 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y, '6');
 8016610:	f104 0078 	add.w	r0, r4, #120	; 0x78
 8016614:	4629      	mov	r1, r5
 8016616:	2236      	movs	r2, #54	; 0x36
 8016618:	b280      	uxth	r0, r0
 801661a:	f006 fac3 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+135, Y, '4');
 801661e:	f104 0087 	add.w	r0, r4, #135	; 0x87
 8016622:	4629      	mov	r1, r5
 8016624:	2234      	movs	r2, #52	; 0x34
 8016626:	b280      	uxth	r0, r0
}
 8016628:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+135, Y, '4');
 801662c:	f006 baba 	b.w	801cba4 <TFT_DrawChar>
 8016630:	200001b0 	.word	0x200001b0
 8016634:	200001c0 	.word	0x200001c0

08016638 <GUI_Text_CIE_Luv>:



void GUI_Text_CIE_Luv(uint16_t X, uint16_t Y)
{
 8016638:	b538      	push	{r3, r4, r5, lr}
 801663a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801663c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016640:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016642:	f006 f9eb 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016646:	2063      	movs	r0, #99	; 0x63
 8016648:	f006 f9ee 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801664c:	481f      	ldr	r0, [pc, #124]	; (80166cc <GUI_Text_CIE_Luv+0x94>)
 801664e:	f006 f9df 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016652:	4621      	mov	r1, r4
 8016654:	4628      	mov	r0, r5
 8016656:	2243      	movs	r2, #67	; 0x43
 8016658:	f006 faa4 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 801665c:	f105 000d 	add.w	r0, r5, #13
 8016660:	4621      	mov	r1, r4
 8016662:	2249      	movs	r2, #73	; 0x49
 8016664:	b280      	uxth	r0, r0
 8016666:	f006 fa9d 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 801666a:	f105 001b 	add.w	r0, r5, #27
 801666e:	4621      	mov	r1, r4
 8016670:	2245      	movs	r2, #69	; 0x45
 8016672:	b280      	uxth	r0, r0
 8016674:	f006 fa96 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 8016678:	f105 0031 	add.w	r0, r5, #49	; 0x31
 801667c:	4621      	mov	r1, r4
 801667e:	224c      	movs	r2, #76	; 0x4c
 8016680:	b280      	uxth	r0, r0
 8016682:	f006 fa8f 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '('-1);
 8016686:	f105 0050 	add.w	r0, r5, #80	; 0x50
 801668a:	4621      	mov	r1, r4
 801668c:	2227      	movs	r2, #39	; 0x27
 801668e:	b280      	uxth	r0, r0
 8016690:	f006 fa88 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+106, Y, '('-1);
 8016694:	f105 006a 	add.w	r0, r5, #106	; 0x6a
 8016698:	4621      	mov	r1, r4
 801669a:	2227      	movs	r2, #39	; 0x27
 801669c:	b280      	uxth	r0, r0
 801669e:	f006 fa81 	bl	801cba4 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'u');
 80166a2:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 80166a4:	480a      	ldr	r0, [pc, #40]	; (80166d0 <GUI_Text_CIE_Luv+0x98>)
 80166a6:	f006 f9b3 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'u');
 80166aa:	b2a4      	uxth	r4, r4
 80166ac:	f105 0044 	add.w	r0, r5, #68	; 0x44
 80166b0:	4621      	mov	r1, r4
 80166b2:	2275      	movs	r2, #117	; 0x75
 80166b4:	b280      	uxth	r0, r0
 80166b6:	f006 fa75 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'v');
 80166ba:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 80166be:	4621      	mov	r1, r4
 80166c0:	2276      	movs	r2, #118	; 0x76
 80166c2:	b280      	uxth	r0, r0
}
 80166c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'v');
 80166c8:	f006 ba6c 	b.w	801cba4 <TFT_DrawChar>
 80166cc:	200001b0 	.word	0x200001b0
 80166d0:	200001c0 	.word	0x200001c0

080166d4 <GUI_Text_CIE_Lab>:

void GUI_Text_CIE_Lab(uint16_t X, uint16_t Y)
{
 80166d4:	b538      	push	{r3, r4, r5, lr}
 80166d6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80166d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80166dc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80166de:	f006 f99d 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80166e2:	2063      	movs	r0, #99	; 0x63
 80166e4:	f006 f9a0 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80166e8:	481f      	ldr	r0, [pc, #124]	; (8016768 <GUI_Text_CIE_Lab+0x94>)
 80166ea:	f006 f991 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80166ee:	4621      	mov	r1, r4
 80166f0:	4628      	mov	r0, r5
 80166f2:	2243      	movs	r2, #67	; 0x43
 80166f4:	f006 fa56 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80166f8:	f105 000d 	add.w	r0, r5, #13
 80166fc:	4621      	mov	r1, r4
 80166fe:	2249      	movs	r2, #73	; 0x49
 8016700:	b280      	uxth	r0, r0
 8016702:	f006 fa4f 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8016706:	f105 001b 	add.w	r0, r5, #27
 801670a:	4621      	mov	r1, r4
 801670c:	2245      	movs	r2, #69	; 0x45
 801670e:	b280      	uxth	r0, r0
 8016710:	f006 fa48 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 8016714:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8016718:	4621      	mov	r1, r4
 801671a:	224c      	movs	r2, #76	; 0x4c
 801671c:	b280      	uxth	r0, r0
 801671e:	f006 fa41 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '*');
 8016722:	f105 0050 	add.w	r0, r5, #80	; 0x50
 8016726:	4621      	mov	r1, r4
 8016728:	222a      	movs	r2, #42	; 0x2a
 801672a:	b280      	uxth	r0, r0
 801672c:	f006 fa3a 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '*');
 8016730:	f105 0069 	add.w	r0, r5, #105	; 0x69
 8016734:	4621      	mov	r1, r4
 8016736:	222a      	movs	r2, #42	; 0x2a
 8016738:	b280      	uxth	r0, r0
 801673a:	f006 fa33 	bl	801cba4 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'a');
 801673e:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016740:	480a      	ldr	r0, [pc, #40]	; (801676c <GUI_Text_CIE_Lab+0x98>)
 8016742:	f006 f965 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'a');
 8016746:	b2a4      	uxth	r4, r4
 8016748:	f105 0044 	add.w	r0, r5, #68	; 0x44
 801674c:	4621      	mov	r1, r4
 801674e:	2261      	movs	r2, #97	; 0x61
 8016750:	b280      	uxth	r0, r0
 8016752:	f006 fa27 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'b');
 8016756:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 801675a:	4621      	mov	r1, r4
 801675c:	2262      	movs	r2, #98	; 0x62
 801675e:	b280      	uxth	r0, r0
}
 8016760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'b');
 8016764:	f006 ba1e 	b.w	801cba4 <TFT_DrawChar>
 8016768:	200001b0 	.word	0x200001b0
 801676c:	200001c0 	.word	0x200001c0

08016770 <GUI_Text_Bluetooth>:

void GUI_Text_Bluetooth(uint16_t X, uint16_t Y)
{
 8016770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016772:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_small);
 8016774:	4e29      	ldr	r6, [pc, #164]	; (801681c <GUI_Text_Bluetooth+0xac>)
	TFT_SetTextColor(TFT_White);
 8016776:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801677a:	460f      	mov	r7, r1
	TFT_SetTextColor(TFT_White);
 801677c:	f006 f94e 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016780:	2063      	movs	r0, #99	; 0x63
 8016782:	f006 f951 	bl	801ca28 <TFT_SetBackColor>
	TFT_DrawChar(X+13, Y+2, 'l');
 8016786:	1cbd      	adds	r5, r7, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016788:	4630      	mov	r0, r6
	TFT_DrawChar(X+13, Y+2, 'l');
 801678a:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16EN_arch_small);
 801678c:	f006 f940 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'l');
 8016790:	f104 000d 	add.w	r0, r4, #13
 8016794:	4629      	mov	r1, r5
 8016796:	226c      	movs	r2, #108	; 0x6c
 8016798:	b280      	uxth	r0, r0
 801679a:	f006 fa03 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 't');
 801679e:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 80167a2:	4629      	mov	r1, r5
 80167a4:	2274      	movs	r2, #116	; 0x74
 80167a6:	b280      	uxth	r0, r0
 80167a8:	f006 f9fc 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y+2, 't');
 80167ac:	f104 0051 	add.w	r0, r4, #81	; 0x51
 80167b0:	4629      	mov	r1, r5
 80167b2:	2274      	movs	r2, #116	; 0x74
 80167b4:	b280      	uxth	r0, r0
 80167b6:	f006 f9f5 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80167ba:	4819      	ldr	r0, [pc, #100]	; (8016820 <GUI_Text_Bluetooth+0xb0>)
 80167bc:	f006 f928 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'B');
 80167c0:	4639      	mov	r1, r7
 80167c2:	2242      	movs	r2, #66	; 0x42
 80167c4:	4620      	mov	r0, r4
 80167c6:	f006 f9ed 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 80167ca:	4630      	mov	r0, r6
 80167cc:	f006 f920 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+23, Y+2, 'u');
 80167d0:	f104 0017 	add.w	r0, r4, #23
 80167d4:	4629      	mov	r1, r5
 80167d6:	2275      	movs	r2, #117	; 0x75
 80167d8:	b280      	uxth	r0, r0
 80167da:	f006 f9e3 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+36, Y+2, 'e');
 80167de:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80167e2:	4629      	mov	r1, r5
 80167e4:	2265      	movs	r2, #101	; 0x65
 80167e6:	b280      	uxth	r0, r0
 80167e8:	f006 f9dc 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'o');
 80167ec:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80167f0:	4629      	mov	r1, r5
 80167f2:	226f      	movs	r2, #111	; 0x6f
 80167f4:	b280      	uxth	r0, r0
 80167f6:	f006 f9d5 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'o');
 80167fa:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80167fe:	4629      	mov	r1, r5
 8016800:	226f      	movs	r2, #111	; 0x6f
 8016802:	b280      	uxth	r0, r0
 8016804:	f006 f9ce 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y+2, 'h');
 8016808:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 801680c:	4629      	mov	r1, r5
 801680e:	2268      	movs	r2, #104	; 0x68
 8016810:	b280      	uxth	r0, r0
}
 8016812:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+91, Y+2, 'h');
 8016816:	f006 b9c5 	b.w	801cba4 <TFT_DrawChar>
 801681a:	bf00      	nop
 801681c:	200001c0 	.word	0x200001c0
 8016820:	200001b0 	.word	0x200001b0

08016824 <GUI_Text_A>:

void GUI_Text_A(uint16_t X, uint16_t Y)
{
 8016824:	b538      	push	{r3, r4, r5, lr}
 8016826:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016828:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801682c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801682e:	f006 f8f5 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016832:	2063      	movs	r0, #99	; 0x63
 8016834:	f006 f8f8 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016838:	4804      	ldr	r0, [pc, #16]	; (801684c <GUI_Text_A+0x28>)
 801683a:	f006 f8e9 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'A');
 801683e:	4629      	mov	r1, r5
 8016840:	4620      	mov	r0, r4
 8016842:	2241      	movs	r2, #65	; 0x41
}
 8016844:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'A');
 8016848:	f006 b9ac 	b.w	801cba4 <TFT_DrawChar>
 801684c:	200001b0 	.word	0x200001b0

08016850 <GUI_Text_D65>:

void GUI_Text_D65(uint16_t X, uint16_t Y)
{
 8016850:	b538      	push	{r3, r4, r5, lr}
 8016852:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016854:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016858:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801685a:	f006 f8df 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801685e:	2063      	movs	r0, #99	; 0x63
 8016860:	f006 f8e2 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016864:	480b      	ldr	r0, [pc, #44]	; (8016894 <GUI_Text_D65+0x44>)
 8016866:	f006 f8d3 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 801686a:	4629      	mov	r1, r5
 801686c:	4620      	mov	r0, r4
 801686e:	2244      	movs	r2, #68	; 0x44
 8016870:	f006 f998 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '6');
 8016874:	f104 000f 	add.w	r0, r4, #15
 8016878:	4629      	mov	r1, r5
 801687a:	2236      	movs	r2, #54	; 0x36
 801687c:	b280      	uxth	r0, r0
 801687e:	f006 f991 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, '5');
 8016882:	f104 0020 	add.w	r0, r4, #32
 8016886:	4629      	mov	r1, r5
 8016888:	2235      	movs	r2, #53	; 0x35
 801688a:	b280      	uxth	r0, r0
}
 801688c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+32, Y, '5');
 8016890:	f006 b988 	b.w	801cba4 <TFT_DrawChar>
 8016894:	200001b0 	.word	0x200001b0

08016898 <GUI_Text_C>:

void GUI_Text_C(uint16_t X, uint16_t Y)
{
 8016898:	b538      	push	{r3, r4, r5, lr}
 801689a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801689c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80168a0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80168a2:	f006 f8bb 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80168a6:	2063      	movs	r0, #99	; 0x63
 80168a8:	f006 f8be 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80168ac:	4804      	ldr	r0, [pc, #16]	; (80168c0 <GUI_Text_C+0x28>)
 80168ae:	f006 f8af 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80168b2:	4629      	mov	r1, r5
 80168b4:	4620      	mov	r0, r4
 80168b6:	2243      	movs	r2, #67	; 0x43
}
 80168b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'C');
 80168bc:	f006 b972 	b.w	801cba4 <TFT_DrawChar>
 80168c0:	200001b0 	.word	0x200001b0

080168c4 <GUI_Text_D50>:

void GUI_Text_D50(uint16_t X, uint16_t Y)
{
 80168c4:	b538      	push	{r3, r4, r5, lr}
 80168c6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80168c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80168cc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80168ce:	f006 f8a5 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80168d2:	2063      	movs	r0, #99	; 0x63
 80168d4:	f006 f8a8 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80168d8:	480b      	ldr	r0, [pc, #44]	; (8016908 <GUI_Text_D50+0x44>)
 80168da:	f006 f899 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 80168de:	4629      	mov	r1, r5
 80168e0:	4620      	mov	r0, r4
 80168e2:	2244      	movs	r2, #68	; 0x44
 80168e4:	f006 f95e 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 80168e8:	f104 000f 	add.w	r0, r4, #15
 80168ec:	4629      	mov	r1, r5
 80168ee:	2235      	movs	r2, #53	; 0x35
 80168f0:	b280      	uxth	r0, r0
 80168f2:	f006 f957 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '0');
 80168f6:	f104 001f 	add.w	r0, r4, #31
 80168fa:	4629      	mov	r1, r5
 80168fc:	2230      	movs	r2, #48	; 0x30
 80168fe:	b280      	uxth	r0, r0
}
 8016900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '0');
 8016904:	f006 b94e 	b.w	801cba4 <TFT_DrawChar>
 8016908:	200001b0 	.word	0x200001b0

0801690c <GUI_Text_D55>:

void GUI_Text_D55(uint16_t X, uint16_t Y)
{
 801690c:	b538      	push	{r3, r4, r5, lr}
 801690e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016910:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016914:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016916:	f006 f881 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801691a:	2063      	movs	r0, #99	; 0x63
 801691c:	f006 f884 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016920:	480b      	ldr	r0, [pc, #44]	; (8016950 <GUI_Text_D55+0x44>)
 8016922:	f006 f875 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8016926:	4629      	mov	r1, r5
 8016928:	4620      	mov	r0, r4
 801692a:	2244      	movs	r2, #68	; 0x44
 801692c:	f006 f93a 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 8016930:	f104 000f 	add.w	r0, r4, #15
 8016934:	4629      	mov	r1, r5
 8016936:	2235      	movs	r2, #53	; 0x35
 8016938:	b280      	uxth	r0, r0
 801693a:	f006 f933 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 801693e:	f104 001f 	add.w	r0, r4, #31
 8016942:	4629      	mov	r1, r5
 8016944:	2235      	movs	r2, #53	; 0x35
 8016946:	b280      	uxth	r0, r0
}
 8016948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 801694c:	f006 b92a 	b.w	801cba4 <TFT_DrawChar>
 8016950:	200001b0 	.word	0x200001b0

08016954 <GUI_Text_D75>:

void GUI_Text_D75(uint16_t X, uint16_t Y)
{
 8016954:	b538      	push	{r3, r4, r5, lr}
 8016956:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016958:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801695c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801695e:	f006 f85d 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016962:	2063      	movs	r0, #99	; 0x63
 8016964:	f006 f860 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016968:	480b      	ldr	r0, [pc, #44]	; (8016998 <GUI_Text_D75+0x44>)
 801696a:	f006 f851 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 801696e:	4629      	mov	r1, r5
 8016970:	4620      	mov	r0, r4
 8016972:	2244      	movs	r2, #68	; 0x44
 8016974:	f006 f916 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '7');
 8016978:	f104 000f 	add.w	r0, r4, #15
 801697c:	4629      	mov	r1, r5
 801697e:	2237      	movs	r2, #55	; 0x37
 8016980:	b280      	uxth	r0, r0
 8016982:	f006 f90f 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8016986:	f104 001f 	add.w	r0, r4, #31
 801698a:	4629      	mov	r1, r5
 801698c:	2235      	movs	r2, #53	; 0x35
 801698e:	b280      	uxth	r0, r0
}
 8016990:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8016994:	f006 b906 	b.w	801cba4 <TFT_DrawChar>
 8016998:	200001b0 	.word	0x200001b0

0801699c <GUI_Text_CIE_xy>:


void GUI_Text_CIE_xy(uint16_t X, uint16_t Y)
{
 801699c:	b538      	push	{r3, r4, r5, lr}
 801699e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80169a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80169a4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80169a6:	f006 f839 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80169aa:	2063      	movs	r0, #99	; 0x63
 80169ac:	f006 f83c 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80169b0:	4815      	ldr	r0, [pc, #84]	; (8016a08 <GUI_Text_CIE_xy+0x6c>)
 80169b2:	f006 f82d 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80169b6:	4621      	mov	r1, r4
 80169b8:	4628      	mov	r0, r5
 80169ba:	2243      	movs	r2, #67	; 0x43
 80169bc:	f006 f8f2 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80169c0:	f105 000d 	add.w	r0, r5, #13
 80169c4:	4621      	mov	r1, r4
 80169c6:	2249      	movs	r2, #73	; 0x49
 80169c8:	b280      	uxth	r0, r0
 80169ca:	f006 f8eb 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80169ce:	f105 001b 	add.w	r0, r5, #27
 80169d2:	4621      	mov	r1, r4
 80169d4:	2245      	movs	r2, #69	; 0x45
 80169d6:	b280      	uxth	r0, r0
 80169d8:	f006 f8e4 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 80169dc:	3401      	adds	r4, #1
	TFT_SetFont(&Font16EN_arch_small);
 80169de:	480b      	ldr	r0, [pc, #44]	; (8016a0c <GUI_Text_CIE_xy+0x70>)
 80169e0:	f006 f816 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 80169e4:	b2a4      	uxth	r4, r4
 80169e6:	f105 0031 	add.w	r0, r5, #49	; 0x31
 80169ea:	4621      	mov	r1, r4
 80169ec:	2278      	movs	r2, #120	; 0x78
 80169ee:	b280      	uxth	r0, r0
 80169f0:	f006 f8d8 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+61, Y+1, 'y');
 80169f4:	f105 003d 	add.w	r0, r5, #61	; 0x3d
 80169f8:	4621      	mov	r1, r4
 80169fa:	2279      	movs	r2, #121	; 0x79
 80169fc:	b280      	uxth	r0, r0
}
 80169fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+61, Y+1, 'y');
 8016a02:	f006 b8cf 	b.w	801cba4 <TFT_DrawChar>
 8016a06:	bf00      	nop
 8016a08:	200001b0 	.word	0x200001b0
 8016a0c:	200001c0 	.word	0x200001c0

08016a10 <GUI_Text_CRI>:

void GUI_Text_CRI(uint16_t X, uint16_t Y)
{
 8016a10:	b538      	push	{r3, r4, r5, lr}
 8016a12:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016a14:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016a18:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016a1a:	f005 ffff 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016a1e:	2063      	movs	r0, #99	; 0x63
 8016a20:	f006 f802 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016a24:	480b      	ldr	r0, [pc, #44]	; (8016a54 <GUI_Text_CRI+0x44>)
 8016a26:	f005 fff3 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+27, Y, 'I');
 8016a2a:	f104 001b 	add.w	r0, r4, #27
 8016a2e:	4629      	mov	r1, r5
 8016a30:	2249      	movs	r2, #73	; 0x49
 8016a32:	b280      	uxth	r0, r0
 8016a34:	f006 f8b6 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'C');
 8016a38:	4629      	mov	r1, r5
 8016a3a:	4620      	mov	r0, r4
 8016a3c:	2243      	movs	r2, #67	; 0x43
 8016a3e:	f006 f8b1 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'R');
 8016a42:	f104 000d 	add.w	r0, r4, #13
 8016a46:	4629      	mov	r1, r5
 8016a48:	2252      	movs	r2, #82	; 0x52
 8016a4a:	b280      	uxth	r0, r0
}
 8016a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+13, Y, 'R');
 8016a50:	f006 b8a8 	b.w	801cba4 <TFT_DrawChar>
 8016a54:	200001b0 	.word	0x200001b0

08016a58 <GUI_Text_CQS>:

void GUI_Text_CQS(uint16_t X, uint16_t Y)
{
 8016a58:	b538      	push	{r3, r4, r5, lr}
 8016a5a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016a5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016a60:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016a62:	f005 ffdb 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016a66:	2063      	movs	r0, #99	; 0x63
 8016a68:	f005 ffde 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016a6c:	480b      	ldr	r0, [pc, #44]	; (8016a9c <GUI_Text_CQS+0x44>)
 8016a6e:	f005 ffcf 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8016a72:	4629      	mov	r1, r5
 8016a74:	4620      	mov	r0, r4
 8016a76:	2243      	movs	r2, #67	; 0x43
 8016a78:	f006 f894 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'Q');
 8016a7c:	f104 000d 	add.w	r0, r4, #13
 8016a80:	4629      	mov	r1, r5
 8016a82:	2251      	movs	r2, #81	; 0x51
 8016a84:	b280      	uxth	r0, r0
 8016a86:	f006 f88d 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'S');
 8016a8a:	f104 001c 	add.w	r0, r4, #28
 8016a8e:	4629      	mov	r1, r5
 8016a90:	2253      	movs	r2, #83	; 0x53
 8016a92:	b280      	uxth	r0, r0
}
 8016a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'S');
 8016a98:	f006 b884 	b.w	801cba4 <TFT_DrawChar>
 8016a9c:	200001b0 	.word	0x200001b0

08016aa0 <GUI_Text_SP>:



void GUI_Text_SP(uint16_t X, uint16_t Y)
{
 8016aa0:	b538      	push	{r3, r4, r5, lr}
 8016aa2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016aa4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016aa8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016aaa:	f005 ffb7 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016aae:	2063      	movs	r0, #99	; 0x63
 8016ab0:	f005 ffba 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016ab4:	480b      	ldr	r0, [pc, #44]	; (8016ae4 <GUI_Text_SP+0x44>)
 8016ab6:	f005 ffab 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+13, Y, '/');
 8016aba:	f104 000d 	add.w	r0, r4, #13
 8016abe:	4629      	mov	r1, r5
 8016ac0:	222f      	movs	r2, #47	; 0x2f
 8016ac2:	b280      	uxth	r0, r0
 8016ac4:	f006 f86e 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'S');
 8016ac8:	4629      	mov	r1, r5
 8016aca:	4620      	mov	r0, r4
 8016acc:	2253      	movs	r2, #83	; 0x53
 8016ace:	f006 f869 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'P');
 8016ad2:	f104 001c 	add.w	r0, r4, #28
 8016ad6:	4629      	mov	r1, r5
 8016ad8:	2250      	movs	r2, #80	; 0x50
 8016ada:	b280      	uxth	r0, r0
}
 8016adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'P');
 8016ae0:	f006 b860 	b.w	801cba4 <TFT_DrawChar>
 8016ae4:	200001b0 	.word	0x200001b0

08016ae8 <GUI_Text_lambda_d>:



void GUI_Text_lambda_d(uint16_t X, uint16_t Y)
{
 8016ae8:	b538      	push	{r3, r4, r5, lr}
 8016aea:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016aec:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016af0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016af2:	f005 ff93 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016af6:	2063      	movs	r0, #99	; 0x63
 8016af8:	f005 ff96 	bl	801ca28 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8016afc:	480a      	ldr	r0, [pc, #40]	; (8016b28 <GUI_Text_lambda_d+0x40>)
 8016afe:	f005 ff87 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, '~'+1);
 8016b02:	4629      	mov	r1, r5
 8016b04:	227f      	movs	r2, #127	; 0x7f
 8016b06:	4620      	mov	r0, r4
 8016b08:	f006 f84c 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8016b0c:	4807      	ldr	r0, [pc, #28]	; (8016b2c <GUI_Text_lambda_d+0x44>)
 8016b0e:	f005 ff7f 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+15, Y+7, 'd');
 8016b12:	1de9      	adds	r1, r5, #7
 8016b14:	f104 000f 	add.w	r0, r4, #15
 8016b18:	2264      	movs	r2, #100	; 0x64
 8016b1a:	b289      	uxth	r1, r1
 8016b1c:	b280      	uxth	r0, r0
}
 8016b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+15, Y+7, 'd');
 8016b22:	f006 b83f 	b.w	801cba4 <TFT_DrawChar>
 8016b26:	bf00      	nop
 8016b28:	200001b0 	.word	0x200001b0
 8016b2c:	200001c0 	.word	0x200001c0

08016b30 <GUI_Text_V_lambda>:
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+15, Y+7, 'c');
}

void GUI_Text_V_lambda(uint16_t X, uint16_t Y)
{
 8016b30:	b538      	push	{r3, r4, r5, lr}
 8016b32:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016b34:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016b38:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016b3a:	f005 ff6f 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016b3e:	2063      	movs	r0, #99	; 0x63
 8016b40:	f005 ff72 	bl	801ca28 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8016b44:	4824      	ldr	r0, [pc, #144]	; (8016bd8 <GUI_Text_V_lambda+0xa8>)
 8016b46:	f005 ff63 	bl	801ca10 <TFT_SetFont>

	TFT_DrawChar(X+13, Y, '(');
 8016b4a:	f104 000d 	add.w	r0, r4, #13
 8016b4e:	4629      	mov	r1, r5
 8016b50:	2228      	movs	r2, #40	; 0x28
 8016b52:	b280      	uxth	r0, r0
 8016b54:	f006 f826 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y, ')');
 8016b58:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016b5c:	4629      	mov	r1, r5
 8016b5e:	2229      	movs	r2, #41	; 0x29
 8016b60:	b280      	uxth	r0, r0
 8016b62:	f006 f81f 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'V');
 8016b66:	4629      	mov	r1, r5
 8016b68:	4620      	mov	r0, r4
 8016b6a:	2256      	movs	r2, #86	; 0x56
 8016b6c:	f006 f81a 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y, '~'+1);
 8016b70:	f104 001a 	add.w	r0, r4, #26
 8016b74:	4629      	mov	r1, r5
 8016b76:	227f      	movs	r2, #127	; 0x7f
 8016b78:	b280      	uxth	r0, r0
 8016b7a:	f006 f813 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y, '/');
 8016b7e:	f104 0035 	add.w	r0, r4, #53	; 0x35
 8016b82:	4629      	mov	r1, r5
 8016b84:	222f      	movs	r2, #47	; 0x2f
 8016b86:	b280      	uxth	r0, r0
 8016b88:	f006 f80c 	bl	801cba4 <TFT_DrawChar>
		
	TFT_DrawChar(X+80, Y, '('-1);
 8016b8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016b90:	4629      	mov	r1, r5
 8016b92:	2227      	movs	r2, #39	; 0x27
 8016b94:	b280      	uxth	r0, r0
 8016b96:	f006 f805 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y, '(');
 8016b9a:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8016b9e:	4629      	mov	r1, r5
 8016ba0:	2228      	movs	r2, #40	; 0x28
 8016ba2:	b280      	uxth	r0, r0
 8016ba4:	f005 fffe 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+117, Y, ')');
 8016ba8:	f104 0075 	add.w	r0, r4, #117	; 0x75
 8016bac:	4629      	mov	r1, r5
 8016bae:	2229      	movs	r2, #41	; 0x29
 8016bb0:	b280      	uxth	r0, r0
 8016bb2:	f005 fff7 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+68, Y, 'V');
 8016bb6:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8016bba:	4629      	mov	r1, r5
 8016bbc:	2256      	movs	r2, #86	; 0x56
 8016bbe:	b280      	uxth	r0, r0
 8016bc0:	f005 fff0 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, '~'+1);
 8016bc4:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8016bc8:	4629      	mov	r1, r5
 8016bca:	227f      	movs	r2, #127	; 0x7f
 8016bcc:	b280      	uxth	r0, r0
		
}
 8016bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, '~'+1);
 8016bd2:	f005 bfe7 	b.w	801cba4 <TFT_DrawChar>
 8016bd6:	bf00      	nop
 8016bd8:	200001b0 	.word	0x200001b0

08016bdc <GUI_Text_deltaE>:

void GUI_Text_deltaE(uint16_t X, uint16_t Y)
{
 8016bdc:	b538      	push	{r3, r4, r5, lr}
 8016bde:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016be0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016be4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016be6:	f005 ff19 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016bea:	2063      	movs	r0, #99	; 0x63
 8016bec:	f005 ff1c 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016bf0:	4808      	ldr	r0, [pc, #32]	; (8016c14 <GUI_Text_deltaE+0x38>)
 8016bf2:	f005 ff0d 	bl	801ca10 <TFT_SetFont>

	TFT_DrawChar(X, Y, '~'+2);
 8016bf6:	4629      	mov	r1, r5
 8016bf8:	4620      	mov	r0, r4
 8016bfa:	2280      	movs	r2, #128	; 0x80
 8016bfc:	f005 ffd2 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+14, Y, 'E');
 8016c00:	f104 000e 	add.w	r0, r4, #14
 8016c04:	4629      	mov	r1, r5
 8016c06:	2245      	movs	r2, #69	; 0x45
 8016c08:	b280      	uxth	r0, r0
}
 8016c0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+14, Y, 'E');
 8016c0e:	f005 bfc9 	b.w	801cba4 <TFT_DrawChar>
 8016c12:	bf00      	nop
 8016c14:	200001b0 	.word	0x200001b0

08016c18 <GUI_TextEn_umol>:

void GUI_TextEn_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 8016c18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016c1c:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016c1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016c22:	4616      	mov	r6, r2
 8016c24:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016c26:	f005 fef9 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016c2a:	2063      	movs	r0, #99	; 0x63
 8016c2c:	f005 fefc 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 8016c30:	482b      	ldr	r0, [pc, #172]	; (8016ce0 <GUI_TextEn_umol+0xc8>)
 8016c32:	f005 feed 	bl	801ca10 <TFT_SetFont>
	
	if(deg){
 8016c36:	2e00      	cmp	r6, #0
 8016c38:	d050      	beq.n	8016cdc <GUI_TextEn_umol+0xc4>
			TFT_DrawChar(X, Y, 'm'-65);
 8016c3a:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X, Y, 'z'-64);
 8016c3c:	4629      	mov	r1, r5
 8016c3e:	4620      	mov	r0, r4
 8016c40:	f005 ffb0 	bl	801cba4 <TFT_DrawChar>
	}
	TFT_DrawChar(X+8, Y, 'm'-65);
	TFT_DrawChar(X+16, Y, 'o'-65);
 8016c44:	f104 0710 	add.w	r7, r4, #16
	TFT_DrawChar(X+8, Y, 'm'-65);
 8016c48:	f104 0008 	add.w	r0, r4, #8
 8016c4c:	4629      	mov	r1, r5
	TFT_DrawChar(X+16, Y, 'o'-65);
 8016c4e:	b2bf      	uxth	r7, r7
	TFT_DrawChar(X+8, Y, 'm'-65);
 8016c50:	222c      	movs	r2, #44	; 0x2c
 8016c52:	b280      	uxth	r0, r0
 8016c54:	f005 ffa6 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'o'-65);
 8016c58:	4629      	mov	r1, r5
 8016c5a:	4638      	mov	r0, r7
 8016c5c:	222e      	movs	r2, #46	; 0x2e
 8016c5e:	f005 ffa1 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+22, Y, 'l'-65);
 8016c62:	f104 0016 	add.w	r0, r4, #22
 8016c66:	4629      	mov	r1, r5
 8016c68:	222b      	movs	r2, #43	; 0x2b
 8016c6a:	b280      	uxth	r0, r0
 8016c6c:	f005 ff9a 	bl	801cba4 <TFT_DrawChar>
	
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8016c70:	f105 030a 	add.w	r3, r5, #10
 8016c74:	b29b      	uxth	r3, r3
 8016c76:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8016c7a:	f104 0219 	add.w	r2, r4, #25
 8016c7e:	4619      	mov	r1, r3
 8016c80:	4620      	mov	r0, r4
 8016c82:	f8cd 8000 	str.w	r8, [sp]
 8016c86:	b292      	uxth	r2, r2
	
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8016c88:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8016c8c:	f005 fc3a 	bl	801c504 <TFT_DrawLine>
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8016c90:	b2b6      	uxth	r6, r6
 8016c92:	f104 000a 	add.w	r0, r4, #10
 8016c96:	4631      	mov	r1, r6
 8016c98:	223b      	movs	r2, #59	; 0x3b
 8016c9a:	b280      	uxth	r0, r0
 8016c9c:	f005 ff82 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+2, Y+11, 'm'-65);
 8016ca0:	1ca0      	adds	r0, r4, #2
 8016ca2:	4631      	mov	r1, r6
 8016ca4:	222c      	movs	r2, #44	; 0x2c
 8016ca6:	b280      	uxth	r0, r0
 8016ca8:	f005 ff7c 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawRectangle(X+16, Y+14, X+17, Y+15, TFT_White);
 8016cac:	f105 030f 	add.w	r3, r5, #15
 8016cb0:	f104 0211 	add.w	r2, r4, #17
 8016cb4:	f105 010e 	add.w	r1, r5, #14
 8016cb8:	4638      	mov	r0, r7
 8016cba:	f8cd 8000 	str.w	r8, [sp]
 8016cbe:	b29b      	uxth	r3, r3
 8016cc0:	b292      	uxth	r2, r2
 8016cc2:	b289      	uxth	r1, r1
 8016cc4:	f005 fc93 	bl	801c5ee <TFT_DrawRectangle>
	TFT_DrawChar(X+19, Y+11, 's'-65);
 8016cc8:	f104 0013 	add.w	r0, r4, #19
 8016ccc:	2232      	movs	r2, #50	; 0x32
 8016cce:	4631      	mov	r1, r6
 8016cd0:	b280      	uxth	r0, r0
}
 8016cd2:	b002      	add	sp, #8
 8016cd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+19, Y+11, 's'-65);
 8016cd8:	f005 bf64 	b.w	801cba4 <TFT_DrawChar>
			TFT_DrawChar(X, Y, 'z'-64);
 8016cdc:	223a      	movs	r2, #58	; 0x3a
 8016cde:	e7ad      	b.n	8016c3c <GUI_TextEn_umol+0x24>
 8016ce0:	20000190 	.word	0x20000190

08016ce4 <GUI_TextEn_umol_sr>:

void GUI_TextEn_umol_sr(uint16_t X, uint16_t Y, uint8_t deg)
{
 8016ce4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016ce8:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016cea:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016cee:	460d      	mov	r5, r1
 8016cf0:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 8016cf2:	f005 fe93 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016cf6:	2063      	movs	r0, #99	; 0x63
 8016cf8:	f005 fe96 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 8016cfc:	483b      	ldr	r0, [pc, #236]	; (8016dec <GUI_TextEn_umol_sr+0x108>)
 8016cfe:	f005 fe87 	bl	801ca10 <TFT_SetFont>
 8016d02:	f104 0009 	add.w	r0, r4, #9
	
	if(deg){
 8016d06:	2e00      	cmp	r6, #0
 8016d08:	d06d      	beq.n	8016de6 <GUI_TextEn_umol_sr+0x102>
			TFT_DrawChar(X+9, Y, 'm'-65);
 8016d0a:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X+9, Y, 'z'-64);
 8016d0c:	4629      	mov	r1, r5
 8016d0e:	b280      	uxth	r0, r0
 8016d10:	f005 ff48 	bl	801cba4 <TFT_DrawChar>
	}
	TFT_DrawChar(X+17, Y, 'm'-65);
 8016d14:	f104 0011 	add.w	r0, r4, #17
 8016d18:	4629      	mov	r1, r5
 8016d1a:	222c      	movs	r2, #44	; 0x2c
 8016d1c:	b280      	uxth	r0, r0
 8016d1e:	f005 ff41 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+25, Y, 'o'-65);
 8016d22:	f104 0019 	add.w	r0, r4, #25
 8016d26:	4629      	mov	r1, r5
 8016d28:	222e      	movs	r2, #46	; 0x2e
 8016d2a:	b280      	uxth	r0, r0
 8016d2c:	f005 ff3a 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'l'-65);
 8016d30:	f104 001f 	add.w	r0, r4, #31
 8016d34:	4629      	mov	r1, r5
 8016d36:	222b      	movs	r2, #43	; 0x2b
 8016d38:	b280      	uxth	r0, r0
 8016d3a:	f005 ff33 	bl	801cba4 <TFT_DrawChar>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8016d3e:	f105 030a 	add.w	r3, r5, #10
 8016d42:	b29b      	uxth	r3, r3
 8016d44:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8016d48:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 8016d4c:	1ce0      	adds	r0, r4, #3
 8016d4e:	4619      	mov	r1, r3
 8016d50:	f8cd 8000 	str.w	r8, [sp]
 8016d54:	b292      	uxth	r2, r2
 8016d56:	b280      	uxth	r0, r0
	
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 8016d58:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8016d5c:	f005 fbd2 	bl	801c504 <TFT_DrawLine>
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 8016d60:	b2b6      	uxth	r6, r6
 8016d62:	f104 000d 	add.w	r0, r4, #13
 8016d66:	4631      	mov	r1, r6
 8016d68:	223b      	movs	r2, #59	; 0x3b
 8016d6a:	b280      	uxth	r0, r0
 8016d6c:	f005 ff1a 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 8016d70:	1d60      	adds	r0, r4, #5
 8016d72:	4631      	mov	r1, r6
 8016d74:	222c      	movs	r2, #44	; 0x2c
 8016d76:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 8016d78:	f105 070e 	add.w	r7, r5, #14
 8016d7c:	350f      	adds	r5, #15
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 8016d7e:	f005 ff11 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 8016d82:	b2bf      	uxth	r7, r7
 8016d84:	b2ad      	uxth	r5, r5
 8016d86:	f104 0214 	add.w	r2, r4, #20
 8016d8a:	f104 0013 	add.w	r0, r4, #19
 8016d8e:	462b      	mov	r3, r5
 8016d90:	4639      	mov	r1, r7
 8016d92:	f8cd 8000 	str.w	r8, [sp]
 8016d96:	b292      	uxth	r2, r2
 8016d98:	b280      	uxth	r0, r0
 8016d9a:	f005 fc28 	bl	801c5ee <TFT_DrawRectangle>
	TFT_DrawChar(X+22, Y+11, 's'-65);
 8016d9e:	f104 0016 	add.w	r0, r4, #22
 8016da2:	4631      	mov	r1, r6
 8016da4:	2232      	movs	r2, #50	; 0x32
 8016da6:	b280      	uxth	r0, r0
 8016da8:	f005 fefc 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawRectangle(X+30, Y+14, X+36, Y+15, TFT_White);
 8016dac:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8016db0:	f104 001e 	add.w	r0, r4, #30
 8016db4:	462b      	mov	r3, r5
 8016db6:	4639      	mov	r1, r7
 8016db8:	f8cd 8000 	str.w	r8, [sp]
 8016dbc:	b292      	uxth	r2, r2
 8016dbe:	b280      	uxth	r0, r0
 8016dc0:	f005 fc15 	bl	801c5ee <TFT_DrawRectangle>
	TFT_DrawChar(X+32, Y+11, 's'-65);
 8016dc4:	f104 0020 	add.w	r0, r4, #32
 8016dc8:	4631      	mov	r1, r6
 8016dca:	2232      	movs	r2, #50	; 0x32
 8016dcc:	b280      	uxth	r0, r0
 8016dce:	f005 fee9 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 8016dd2:	f104 0027 	add.w	r0, r4, #39	; 0x27
 8016dd6:	2231      	movs	r2, #49	; 0x31
 8016dd8:	4631      	mov	r1, r6
 8016dda:	b280      	uxth	r0, r0
}
 8016ddc:	b002      	add	sp, #8
 8016dde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 8016de2:	f005 bedf 	b.w	801cba4 <TFT_DrawChar>
			TFT_DrawChar(X+9, Y, 'z'-64);
 8016de6:	223a      	movs	r2, #58	; 0x3a
 8016de8:	e790      	b.n	8016d0c <GUI_TextEn_umol_sr+0x28>
 8016dea:	bf00      	nop
 8016dec:	20000190 	.word	0x20000190

08016df0 <GUI_Text_On>:


void GUI_Text_On(uint16_t X, uint16_t Y)
{
 8016df0:	b538      	push	{r3, r4, r5, lr}
 8016df2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8016df4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016df8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8016dfa:	f005 fe0f 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016dfe:	2063      	movs	r0, #99	; 0x63
 8016e00:	f005 fe12 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016e04:	480a      	ldr	r0, [pc, #40]	; (8016e30 <GUI_Text_On+0x40>)
 8016e06:	f005 fe03 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 8016e0a:	4629      	mov	r1, r5
 8016e0c:	224f      	movs	r2, #79	; 0x4f
 8016e0e:	4620      	mov	r0, r4
 8016e10:	f005 fec8 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8016e14:	4807      	ldr	r0, [pc, #28]	; (8016e34 <GUI_Text_On+0x44>)
 8016e16:	f005 fdfb 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 8016e1a:	1ca9      	adds	r1, r5, #2
 8016e1c:	f104 0010 	add.w	r0, r4, #16
 8016e20:	226e      	movs	r2, #110	; 0x6e
 8016e22:	b289      	uxth	r1, r1
 8016e24:	b280      	uxth	r0, r0
	
}
 8016e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+16, Y+2, 'n');
 8016e2a:	f005 bebb 	b.w	801cba4 <TFT_DrawChar>
 8016e2e:	bf00      	nop
 8016e30:	200001b0 	.word	0x200001b0
 8016e34:	200001c0 	.word	0x200001c0

08016e38 <GUI_Text_Off>:

void GUI_Text_Off(uint16_t X, uint16_t Y)
{
 8016e38:	b570      	push	{r4, r5, r6, lr}
 8016e3a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016e3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016e40:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 8016e42:	f005 fdeb 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016e46:	2063      	movs	r0, #99	; 0x63
 8016e48:	f005 fdee 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+13, Y+2, 'f');
 8016e4c:	1cb4      	adds	r4, r6, #2
	TFT_SetFont(&Font16EN_arch_small);
 8016e4e:	480e      	ldr	r0, [pc, #56]	; (8016e88 <GUI_Text_Off+0x50>)
 8016e50:	f005 fdde 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'f');
 8016e54:	b2a4      	uxth	r4, r4
 8016e56:	f105 000d 	add.w	r0, r5, #13
 8016e5a:	4621      	mov	r1, r4
 8016e5c:	2266      	movs	r2, #102	; 0x66
 8016e5e:	b280      	uxth	r0, r0
 8016e60:	f005 fea0 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y+2, 'f');
 8016e64:	f105 0017 	add.w	r0, r5, #23
 8016e68:	4621      	mov	r1, r4
 8016e6a:	2266      	movs	r2, #102	; 0x66
 8016e6c:	b280      	uxth	r0, r0
 8016e6e:	f005 fe99 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8016e72:	4806      	ldr	r0, [pc, #24]	; (8016e8c <GUI_Text_Off+0x54>)
 8016e74:	f005 fdcc 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 8016e78:	4631      	mov	r1, r6
 8016e7a:	4628      	mov	r0, r5
 8016e7c:	224f      	movs	r2, #79	; 0x4f
}
 8016e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TFT_DrawChar(X, Y, 'O');
 8016e82:	f005 be8f 	b.w	801cba4 <TFT_DrawChar>
 8016e86:	bf00      	nop
 8016e88:	200001c0 	.word	0x200001c0
 8016e8c:	200001b0 	.word	0x200001b0

08016e90 <GUI_Text_EbEr>:

void GUI_Text_EbEr(uint16_t X, uint16_t Y)
{
 8016e90:	b538      	push	{r3, r4, r5, lr}
 8016e92:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016e94:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016e98:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016e9a:	f005 fdbf 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016e9e:	2063      	movs	r0, #99	; 0x63
 8016ea0:	f005 fdc2 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016ea4:	4815      	ldr	r0, [pc, #84]	; (8016efc <GUI_Text_EbEr+0x6c>)
 8016ea6:	f005 fdb3 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 8016eaa:	1ca1      	adds	r1, r4, #2
 8016eac:	f105 0013 	add.w	r0, r5, #19
 8016eb0:	222c      	movs	r2, #44	; 0x2c
 8016eb2:	b289      	uxth	r1, r1
 8016eb4:	b280      	uxth	r0, r0
 8016eb6:	f005 fe75 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'E');
 8016eba:	4621      	mov	r1, r4
 8016ebc:	4628      	mov	r0, r5
 8016ebe:	2245      	movs	r2, #69	; 0x45
 8016ec0:	f005 fe70 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, 'E');
 8016ec4:	f105 0020 	add.w	r0, r5, #32
 8016ec8:	4621      	mov	r1, r4
 8016eca:	2245      	movs	r2, #69	; 0x45
 8016ecc:	b280      	uxth	r0, r0
 8016ece:	f005 fe69 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 8016ed2:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 8016ed4:	480a      	ldr	r0, [pc, #40]	; (8016f00 <GUI_Text_EbEr+0x70>)
 8016ed6:	f005 fd9b 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 8016eda:	b2a4      	uxth	r4, r4
 8016edc:	f105 0012 	add.w	r0, r5, #18
 8016ee0:	4621      	mov	r1, r4
 8016ee2:	2242      	movs	r2, #66	; 0x42
 8016ee4:	b280      	uxth	r0, r0
 8016ee6:	f005 fe5d 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+12, 'R');
 8016eea:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8016eee:	4621      	mov	r1, r4
 8016ef0:	2252      	movs	r2, #82	; 0x52
 8016ef2:	b280      	uxth	r0, r0
}
 8016ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+50, Y+12, 'R');
 8016ef8:	f005 be54 	b.w	801cba4 <TFT_DrawChar>
 8016efc:	200001b0 	.word	0x200001b0
 8016f00:	20000218 	.word	0x20000218

08016f04 <GUI_Text_LbLr>:

void GUI_Text_LbLr(uint16_t X, uint16_t Y)
{
 8016f04:	b538      	push	{r3, r4, r5, lr}
 8016f06:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016f08:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8016f0c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016f0e:	f005 fd85 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016f12:	2063      	movs	r0, #99	; 0x63
 8016f14:	f005 fd88 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8016f18:	4815      	ldr	r0, [pc, #84]	; (8016f70 <GUI_Text_LbLr+0x6c>)
 8016f1a:	f005 fd79 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 8016f1e:	1ca1      	adds	r1, r4, #2
 8016f20:	f105 0013 	add.w	r0, r5, #19
 8016f24:	222c      	movs	r2, #44	; 0x2c
 8016f26:	b289      	uxth	r1, r1
 8016f28:	b280      	uxth	r0, r0
 8016f2a:	f005 fe3b 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'L');
 8016f2e:	4621      	mov	r1, r4
 8016f30:	4628      	mov	r0, r5
 8016f32:	224c      	movs	r2, #76	; 0x4c
 8016f34:	f005 fe36 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y, 'L');
 8016f38:	f105 001e 	add.w	r0, r5, #30
 8016f3c:	4621      	mov	r1, r4
 8016f3e:	224c      	movs	r2, #76	; 0x4c
 8016f40:	b280      	uxth	r0, r0
 8016f42:	f005 fe2f 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 8016f46:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 8016f48:	480a      	ldr	r0, [pc, #40]	; (8016f74 <GUI_Text_LbLr+0x70>)
 8016f4a:	f005 fd61 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 8016f4e:	b2a4      	uxth	r4, r4
 8016f50:	f105 0012 	add.w	r0, r5, #18
 8016f54:	4621      	mov	r1, r4
 8016f56:	2242      	movs	r2, #66	; 0x42
 8016f58:	b280      	uxth	r0, r0
 8016f5a:	f005 fe23 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+48, Y+12, 'R');
 8016f5e:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8016f62:	4621      	mov	r1, r4
 8016f64:	2252      	movs	r2, #82	; 0x52
 8016f66:	b280      	uxth	r0, r0
}
 8016f68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+48, Y+12, 'R');
 8016f6c:	f005 be1a 	b.w	801cba4 <TFT_DrawChar>
 8016f70:	200001b0 	.word	0x200001b0
 8016f74:	20000218 	.word	0x20000218

08016f78 <GUI_TextEn_Language>:
///////////////////////////////////////////////////////////////////////
void GUI_TextEn_Language(uint16_t X, uint16_t Y)
{	/* Print word 'Language' */
 8016f78:	b538      	push	{r3, r4, r5, lr}
 8016f7a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8016f7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	/* Print word 'Language' */
 8016f80:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8016f82:	f005 fd4b 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016f86:	2063      	movs	r0, #99	; 0x63
 8016f88:	f005 fd4e 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8016f8c:	481f      	ldr	r0, [pc, #124]	; (801700c <GUI_TextEn_Language+0x94>)
 8016f8e:	f005 fd3f 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8016f92:	4621      	mov	r1, r4
 8016f94:	224c      	movs	r2, #76	; 0x4c
 8016f96:	4628      	mov	r0, r5
 8016f98:	f005 fe04 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+14, Y+2, 'a');
 8016f9c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8016f9e:	481c      	ldr	r0, [pc, #112]	; (8017010 <GUI_TextEn_Language+0x98>)
	TFT_DrawChar(X+14, Y+2, 'a');
 8016fa0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8016fa2:	f005 fd35 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+14, Y+2, 'a');
 8016fa6:	f105 000e 	add.w	r0, r5, #14
 8016faa:	4621      	mov	r1, r4
 8016fac:	2261      	movs	r2, #97	; 0x61
 8016fae:	b280      	uxth	r0, r0
 8016fb0:	f005 fdf8 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y+2, 'n');
 8016fb4:	f105 001a 	add.w	r0, r5, #26
 8016fb8:	4621      	mov	r1, r4
 8016fba:	226e      	movs	r2, #110	; 0x6e
 8016fbc:	b280      	uxth	r0, r0
 8016fbe:	f005 fdf1 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+2, 'g');
 8016fc2:	f105 0027 	add.w	r0, r5, #39	; 0x27
 8016fc6:	4621      	mov	r1, r4
 8016fc8:	2267      	movs	r2, #103	; 0x67
 8016fca:	b280      	uxth	r0, r0
 8016fcc:	f005 fdea 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'a');
 8016fd0:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8016fd4:	4621      	mov	r1, r4
 8016fd6:	2261      	movs	r2, #97	; 0x61
 8016fd8:	b280      	uxth	r0, r0
 8016fda:	f005 fde3 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+52, Y+2, 'u');
 8016fde:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8016fe2:	4621      	mov	r1, r4
 8016fe4:	2275      	movs	r2, #117	; 0x75
 8016fe6:	b280      	uxth	r0, r0
 8016fe8:	f005 fddc 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+77, Y+2, 'g');
 8016fec:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8016ff0:	4621      	mov	r1, r4
 8016ff2:	2267      	movs	r2, #103	; 0x67
 8016ff4:	b280      	uxth	r0, r0
 8016ff6:	f005 fdd5 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y+2, 'e');
 8016ffa:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8016ffe:	4621      	mov	r1, r4
 8017000:	2265      	movs	r2, #101	; 0x65
 8017002:	b280      	uxth	r0, r0
}
 8017004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+90, Y+2, 'e');
 8017008:	f005 bdcc 	b.w	801cba4 <TFT_DrawChar>
 801700c:	200001b8 	.word	0x200001b8
 8017010:	200001c8 	.word	0x200001c8

08017014 <GUI_TextEn_English>:
void GUI_TextEn_English(uint16_t X, uint16_t Y)
{
 8017014:	b538      	push	{r3, r4, r5, lr}
 8017016:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017018:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801701c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801701e:	f005 fcfd 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017022:	2063      	movs	r0, #99	; 0x63
 8017024:	f005 fd00 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017028:	481c      	ldr	r0, [pc, #112]	; (801709c <GUI_TextEn_English+0x88>)
 801702a:	f005 fcf1 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'E');
 801702e:	4621      	mov	r1, r4
 8017030:	2245      	movs	r2, #69	; 0x45
 8017032:	4628      	mov	r0, r5
 8017034:	f005 fdb6 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'n');
 8017038:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801703a:	4819      	ldr	r0, [pc, #100]	; (80170a0 <GUI_TextEn_English+0x8c>)
	TFT_DrawChar(X+16, Y+2, 'n');
 801703c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801703e:	f005 fce7 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 8017042:	f105 0010 	add.w	r0, r5, #16
 8017046:	4621      	mov	r1, r4
 8017048:	226e      	movs	r2, #110	; 0x6e
 801704a:	b280      	uxth	r0, r0
 801704c:	f005 fdaa 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'g');
 8017050:	f105 001d 	add.w	r0, r5, #29
 8017054:	4621      	mov	r1, r4
 8017056:	2267      	movs	r2, #103	; 0x67
 8017058:	b280      	uxth	r0, r0
 801705a:	f005 fda3 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'l');
 801705e:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8017062:	4621      	mov	r1, r4
 8017064:	226c      	movs	r2, #108	; 0x6c
 8017066:	b280      	uxth	r0, r0
 8017068:	f005 fd9c 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 'i');
 801706c:	f105 002f 	add.w	r0, r5, #47	; 0x2f
 8017070:	4621      	mov	r1, r4
 8017072:	2269      	movs	r2, #105	; 0x69
 8017074:	b280      	uxth	r0, r0
 8017076:	f005 fd95 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 's');
 801707a:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801707e:	4621      	mov	r1, r4
 8017080:	2273      	movs	r2, #115	; 0x73
 8017082:	b280      	uxth	r0, r0
 8017084:	f005 fd8e 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'h');
 8017088:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801708c:	4621      	mov	r1, r4
 801708e:	2268      	movs	r2, #104	; 0x68
 8017090:	b280      	uxth	r0, r0
	

}
 8017092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+65, Y+2, 'h');
 8017096:	f005 bd85 	b.w	801cba4 <TFT_DrawChar>
 801709a:	bf00      	nop
 801709c:	200001b8 	.word	0x200001b8
 80170a0:	200001c8 	.word	0x200001c8

080170a4 <GUI_TextEn_Info>:
void GUI_TextEn_Info(uint16_t X, uint16_t Y)
{
 80170a4:	b538      	push	{r3, r4, r5, lr}
 80170a6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80170a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80170ac:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80170ae:	f005 fcb5 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80170b2:	2063      	movs	r0, #99	; 0x63
 80170b4:	f005 fcb8 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80170b8:	4811      	ldr	r0, [pc, #68]	; (8017100 <GUI_TextEn_Info+0x5c>)
 80170ba:	f005 fca9 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 80170be:	4621      	mov	r1, r4
 80170c0:	2249      	movs	r2, #73	; 0x49
 80170c2:	4628      	mov	r0, r5
 80170c4:	f005 fd6e 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+18, Y+2, 'f');
 80170c8:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80170ca:	480e      	ldr	r0, [pc, #56]	; (8017104 <GUI_TextEn_Info+0x60>)
 80170cc:	f005 fca0 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'f');
 80170d0:	b2a4      	uxth	r4, r4
 80170d2:	f105 0012 	add.w	r0, r5, #18
 80170d6:	4621      	mov	r1, r4
 80170d8:	2266      	movs	r2, #102	; 0x66
 80170da:	b280      	uxth	r0, r0
 80170dc:	f005 fd62 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+8, Y+2, 'n');
 80170e0:	f105 0008 	add.w	r0, r5, #8
 80170e4:	4621      	mov	r1, r4
 80170e6:	226e      	movs	r2, #110	; 0x6e
 80170e8:	b280      	uxth	r0, r0
 80170ea:	f005 fd5b 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'o');
 80170ee:	f105 001d 	add.w	r0, r5, #29
 80170f2:	4621      	mov	r1, r4
 80170f4:	226f      	movs	r2, #111	; 0x6f
 80170f6:	b280      	uxth	r0, r0
}
 80170f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+29, Y+2, 'o');
 80170fc:	f005 bd52 	b.w	801cba4 <TFT_DrawChar>
 8017100:	200001b8 	.word	0x200001b8
 8017104:	200001c8 	.word	0x200001c8

08017108 <GUI_TextEn_Radiance>:
void GUI_TextEn_Radiance(uint16_t X, uint16_t Y)
{
 8017108:	b538      	push	{r3, r4, r5, lr}
 801710a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801710c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017110:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017112:	f005 fc83 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017116:	2063      	movs	r0, #99	; 0x63
 8017118:	f005 fc86 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801711c:	481f      	ldr	r0, [pc, #124]	; (801719c <GUI_TextEn_Radiance+0x94>)
 801711e:	f005 fc77 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'R');
 8017122:	4621      	mov	r1, r4
 8017124:	2252      	movs	r2, #82	; 0x52
 8017126:	4628      	mov	r0, r5
 8017128:	f005 fd3c 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'a');
 801712c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801712e:	481c      	ldr	r0, [pc, #112]	; (80171a0 <GUI_TextEn_Radiance+0x98>)
	TFT_DrawChar(X+16, Y+2, 'a');
 8017130:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017132:	f005 fc6d 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 8017136:	f105 0010 	add.w	r0, r5, #16
 801713a:	4621      	mov	r1, r4
 801713c:	2261      	movs	r2, #97	; 0x61
 801713e:	b280      	uxth	r0, r0
 8017140:	f005 fd30 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'd');
 8017144:	f105 001c 	add.w	r0, r5, #28
 8017148:	4621      	mov	r1, r4
 801714a:	2264      	movs	r2, #100	; 0x64
 801714c:	b280      	uxth	r0, r0
 801714e:	f005 fd29 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 8017152:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017156:	4621      	mov	r1, r4
 8017158:	2269      	movs	r2, #105	; 0x69
 801715a:	b280      	uxth	r0, r0
 801715c:	f005 fd22 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'a');
 8017160:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8017164:	4621      	mov	r1, r4
 8017166:	2261      	movs	r2, #97	; 0x61
 8017168:	b280      	uxth	r0, r0
 801716a:	f005 fd1b 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y+2, 'n');
 801716e:	f105 003a 	add.w	r0, r5, #58	; 0x3a
 8017172:	4621      	mov	r1, r4
 8017174:	226e      	movs	r2, #110	; 0x6e
 8017176:	b280      	uxth	r0, r0
 8017178:	f005 fd14 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'c');
 801717c:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8017180:	4621      	mov	r1, r4
 8017182:	2263      	movs	r2, #99	; 0x63
 8017184:	b280      	uxth	r0, r0
 8017186:	f005 fd0d 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+83, Y+2, 'e');
 801718a:	f105 0053 	add.w	r0, r5, #83	; 0x53
 801718e:	4621      	mov	r1, r4
 8017190:	2265      	movs	r2, #101	; 0x65
 8017192:	b280      	uxth	r0, r0
}
 8017194:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+83, Y+2, 'e');
 8017198:	f005 bd04 	b.w	801cba4 <TFT_DrawChar>
 801719c:	200001b8 	.word	0x200001b8
 80171a0:	200001c8 	.word	0x200001c8

080171a4 <GUI_TextEn_Irradiance>:
void GUI_TextEn_Irradiance(uint16_t X, uint16_t Y)
{
 80171a4:	b538      	push	{r3, r4, r5, lr}
 80171a6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80171a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80171ac:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80171ae:	f005 fc35 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80171b2:	2063      	movs	r0, #99	; 0x63
 80171b4:	f005 fc38 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80171b8:	4826      	ldr	r0, [pc, #152]	; (8017254 <GUI_TextEn_Irradiance+0xb0>)
 80171ba:	f005 fc29 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 80171be:	4621      	mov	r1, r4
 80171c0:	2249      	movs	r2, #73	; 0x49
 80171c2:	4628      	mov	r0, r5
 80171c4:	f005 fcee 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+9, Y+2, 'r');
 80171c8:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80171ca:	4823      	ldr	r0, [pc, #140]	; (8017258 <GUI_TextEn_Irradiance+0xb4>)
	TFT_DrawChar(X+9, Y+2, 'r');
 80171cc:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80171ce:	f005 fc1f 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+9, Y+2, 'r');
 80171d2:	f105 0009 	add.w	r0, r5, #9
 80171d6:	4621      	mov	r1, r4
 80171d8:	2272      	movs	r2, #114	; 0x72
 80171da:	b280      	uxth	r0, r0
 80171dc:	f005 fce2 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+2, 'r');
 80171e0:	f105 0015 	add.w	r0, r5, #21
 80171e4:	4621      	mov	r1, r4
 80171e6:	2272      	movs	r2, #114	; 0x72
 80171e8:	b280      	uxth	r0, r0
 80171ea:	f005 fcdb 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'a');
 80171ee:	f105 0020 	add.w	r0, r5, #32
 80171f2:	4621      	mov	r1, r4
 80171f4:	2261      	movs	r2, #97	; 0x61
 80171f6:	b280      	uxth	r0, r0
 80171f8:	f005 fcd4 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y+2, 'd');
 80171fc:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 8017200:	4621      	mov	r1, r4
 8017202:	2264      	movs	r2, #100	; 0x64
 8017204:	b280      	uxth	r0, r0
 8017206:	f005 fccd 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'i');
 801720a:	f105 0039 	add.w	r0, r5, #57	; 0x39
 801720e:	4621      	mov	r1, r4
 8017210:	2269      	movs	r2, #105	; 0x69
 8017212:	b280      	uxth	r0, r0
 8017214:	f005 fcc6 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+62, Y+2, 'a');
 8017218:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 801721c:	4621      	mov	r1, r4
 801721e:	2261      	movs	r2, #97	; 0x61
 8017220:	b280      	uxth	r0, r0
 8017222:	f005 fcbf 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y+2, 'n');
 8017226:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 801722a:	4621      	mov	r1, r4
 801722c:	226e      	movs	r2, #110	; 0x6e
 801722e:	b280      	uxth	r0, r0
 8017230:	f005 fcb8 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'c');
 8017234:	f105 0057 	add.w	r0, r5, #87	; 0x57
 8017238:	4621      	mov	r1, r4
 801723a:	2263      	movs	r2, #99	; 0x63
 801723c:	b280      	uxth	r0, r0
 801723e:	f005 fcb1 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 8017242:	f105 0063 	add.w	r0, r5, #99	; 0x63
 8017246:	4621      	mov	r1, r4
 8017248:	2265      	movs	r2, #101	; 0x65
 801724a:	b280      	uxth	r0, r0
}
 801724c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+99, Y+2, 'e');
 8017250:	f005 bca8 	b.w	801cba4 <TFT_DrawChar>
 8017254:	200001b8 	.word	0x200001b8
 8017258:	200001c8 	.word	0x200001c8

0801725c <GUI_TextMsgEn_HighIrradiance>:

void GUI_TextMsgEn_HighIrradiance(uint16_t X, uint16_t Y)
{
 801725c:	b538      	push	{r3, r4, r5, lr}
 801725e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017260:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017264:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017266:	f005 fbd9 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801726a:	2063      	movs	r0, #99	; 0x63
 801726c:	f005 fbdc 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017270:	4834      	ldr	r0, [pc, #208]	; (8017344 <GUI_TextMsgEn_HighIrradiance+0xe8>)
 8017272:	f005 fbcd 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 8017276:	4621      	mov	r1, r4
 8017278:	2248      	movs	r2, #72	; 0x48
 801727a:	4628      	mov	r0, r5
 801727c:	f005 fc92 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 8017280:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017282:	4831      	ldr	r0, [pc, #196]	; (8017348 <GUI_TextMsgEn_HighIrradiance+0xec>)
  TFT_DrawChar(X+16, Y+2, 'i');
 8017284:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017286:	f005 fbc3 	bl	801ca10 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 801728a:	f105 0010 	add.w	r0, r5, #16
 801728e:	4621      	mov	r1, r4
 8017290:	2269      	movs	r2, #105	; 0x69
 8017292:	b280      	uxth	r0, r0
 8017294:	f005 fc86 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 8017298:	f105 0017 	add.w	r0, r5, #23
 801729c:	4621      	mov	r1, r4
 801729e:	2267      	movs	r2, #103	; 0x67
 80172a0:	b280      	uxth	r0, r0
 80172a2:	f005 fc7f 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 80172a6:	f105 0024 	add.w	r0, r5, #36	; 0x24
 80172aa:	4621      	mov	r1, r4
 80172ac:	2268      	movs	r2, #104	; 0x68
 80172ae:	b280      	uxth	r0, r0
 80172b0:	f005 fc78 	bl	801cba4 <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'i');
 80172b4:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 80172b8:	4621      	mov	r1, r4
 80172ba:	2269      	movs	r2, #105	; 0x69
 80172bc:	b280      	uxth	r0, r0
 80172be:	f005 fc71 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+67, Y+2, 'r');
 80172c2:	f105 0043 	add.w	r0, r5, #67	; 0x43
 80172c6:	4621      	mov	r1, r4
 80172c8:	2272      	movs	r2, #114	; 0x72
 80172ca:	b280      	uxth	r0, r0
 80172cc:	f005 fc6a 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+79, Y+2, 'r');
 80172d0:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 80172d4:	4621      	mov	r1, r4
 80172d6:	2272      	movs	r2, #114	; 0x72
 80172d8:	b280      	uxth	r0, r0
 80172da:	f005 fc63 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'a');
 80172de:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80172e2:	4621      	mov	r1, r4
 80172e4:	2261      	movs	r2, #97	; 0x61
 80172e6:	b280      	uxth	r0, r0
 80172e8:	f005 fc5c 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+102, Y+2, 'd');
 80172ec:	f105 0066 	add.w	r0, r5, #102	; 0x66
 80172f0:	4621      	mov	r1, r4
 80172f2:	2264      	movs	r2, #100	; 0x64
 80172f4:	b280      	uxth	r0, r0
 80172f6:	f005 fc55 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+115, Y+2, 'i');
 80172fa:	f105 0073 	add.w	r0, r5, #115	; 0x73
 80172fe:	4621      	mov	r1, r4
 8017300:	2269      	movs	r2, #105	; 0x69
 8017302:	b280      	uxth	r0, r0
 8017304:	f005 fc4e 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'a');
 8017308:	f105 0078 	add.w	r0, r5, #120	; 0x78
 801730c:	4621      	mov	r1, r4
 801730e:	2261      	movs	r2, #97	; 0x61
 8017310:	b280      	uxth	r0, r0
 8017312:	f005 fc47 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'n');
 8017316:	f105 0084 	add.w	r0, r5, #132	; 0x84
 801731a:	4621      	mov	r1, r4
 801731c:	226e      	movs	r2, #110	; 0x6e
 801731e:	b280      	uxth	r0, r0
 8017320:	f005 fc40 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+145, Y+2, 'c');
 8017324:	f105 0091 	add.w	r0, r5, #145	; 0x91
 8017328:	4621      	mov	r1, r4
 801732a:	2263      	movs	r2, #99	; 0x63
 801732c:	b280      	uxth	r0, r0
 801732e:	f005 fc39 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+157, Y+2, 'e');
 8017332:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 8017336:	4621      	mov	r1, r4
 8017338:	2265      	movs	r2, #101	; 0x65
 801733a:	b280      	uxth	r0, r0
}
 801733c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+157, Y+2, 'e');
 8017340:	f005 bc30 	b.w	801cba4 <TFT_DrawChar>
 8017344:	200001b8 	.word	0x200001b8
 8017348:	200001c8 	.word	0x200001c8

0801734c <GUI_TextMsgEn_HighRadiance>:

void GUI_TextMsgEn_HighRadiance(uint16_t X, uint16_t Y)
{
 801734c:	b538      	push	{r3, r4, r5, lr}
 801734e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017350:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017354:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017356:	f005 fb61 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801735a:	2063      	movs	r0, #99	; 0x63
 801735c:	f005 fb64 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017360:	482d      	ldr	r0, [pc, #180]	; (8017418 <GUI_TextMsgEn_HighRadiance+0xcc>)
 8017362:	f005 fb55 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 8017366:	4621      	mov	r1, r4
 8017368:	2248      	movs	r2, #72	; 0x48
 801736a:	4628      	mov	r0, r5
 801736c:	f005 fc1a 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 8017370:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017372:	482a      	ldr	r0, [pc, #168]	; (801741c <GUI_TextMsgEn_HighRadiance+0xd0>)
  TFT_DrawChar(X+16, Y+2, 'i');
 8017374:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017376:	f005 fb4b 	bl	801ca10 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 801737a:	f105 0010 	add.w	r0, r5, #16
 801737e:	4621      	mov	r1, r4
 8017380:	2269      	movs	r2, #105	; 0x69
 8017382:	b280      	uxth	r0, r0
 8017384:	f005 fc0e 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 8017388:	f105 0017 	add.w	r0, r5, #23
 801738c:	4621      	mov	r1, r4
 801738e:	2267      	movs	r2, #103	; 0x67
 8017390:	b280      	uxth	r0, r0
 8017392:	f005 fc07 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 8017396:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801739a:	4621      	mov	r1, r4
 801739c:	2268      	movs	r2, #104	; 0x68
 801739e:	b280      	uxth	r0, r0
 80173a0:	f005 fc00 	bl	801cba4 <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'r');
 80173a4:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 80173a8:	4621      	mov	r1, r4
 80173aa:	2272      	movs	r2, #114	; 0x72
 80173ac:	b280      	uxth	r0, r0
 80173ae:	f005 fbf9 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+70, Y+2, 'a');
 80173b2:	f105 0046 	add.w	r0, r5, #70	; 0x46
 80173b6:	4621      	mov	r1, r4
 80173b8:	2261      	movs	r2, #97	; 0x61
 80173ba:	b280      	uxth	r0, r0
 80173bc:	f005 fbf2 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+82, Y+2, 'd');
 80173c0:	f105 0052 	add.w	r0, r5, #82	; 0x52
 80173c4:	4621      	mov	r1, r4
 80173c6:	2264      	movs	r2, #100	; 0x64
 80173c8:	b280      	uxth	r0, r0
 80173ca:	f005 fbeb 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'i');
 80173ce:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 80173d2:	4621      	mov	r1, r4
 80173d4:	2269      	movs	r2, #105	; 0x69
 80173d6:	b280      	uxth	r0, r0
 80173d8:	f005 fbe4 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+100, Y+2, 'a');
 80173dc:	f105 0064 	add.w	r0, r5, #100	; 0x64
 80173e0:	4621      	mov	r1, r4
 80173e2:	2261      	movs	r2, #97	; 0x61
 80173e4:	b280      	uxth	r0, r0
 80173e6:	f005 fbdd 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+112, Y+2, 'n');
 80173ea:	f105 0070 	add.w	r0, r5, #112	; 0x70
 80173ee:	4621      	mov	r1, r4
 80173f0:	226e      	movs	r2, #110	; 0x6e
 80173f2:	b280      	uxth	r0, r0
 80173f4:	f005 fbd6 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+125, Y+2, 'c');
 80173f8:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 80173fc:	4621      	mov	r1, r4
 80173fe:	2263      	movs	r2, #99	; 0x63
 8017400:	b280      	uxth	r0, r0
 8017402:	f005 fbcf 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+137, Y+2, 'e');
 8017406:	f105 0089 	add.w	r0, r5, #137	; 0x89
 801740a:	4621      	mov	r1, r4
 801740c:	2265      	movs	r2, #101	; 0x65
 801740e:	b280      	uxth	r0, r0
}
 8017410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+137, Y+2, 'e');
 8017414:	f005 bbc6 	b.w	801cba4 <TFT_DrawChar>
 8017418:	200001b8 	.word	0x200001b8
 801741c:	200001c8 	.word	0x200001c8

08017420 <GUI_TextMsgEn_LowRadiance>:

void GUI_TextMsgEn_LowRadiance(uint16_t X, uint16_t Y)
{
 8017420:	b538      	push	{r3, r4, r5, lr}
 8017422:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017424:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017428:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801742a:	f005 faf7 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801742e:	2063      	movs	r0, #99	; 0x63
 8017430:	f005 fafa 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017434:	482a      	ldr	r0, [pc, #168]	; (80174e0 <GUI_TextMsgEn_LowRadiance+0xc0>)
 8017436:	f005 faeb 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 801743a:	4621      	mov	r1, r4
 801743c:	224c      	movs	r2, #76	; 0x4c
 801743e:	4628      	mov	r0, r5
 8017440:	f005 fbb0 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 8017444:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017446:	4827      	ldr	r0, [pc, #156]	; (80174e4 <GUI_TextMsgEn_LowRadiance+0xc4>)
  TFT_DrawChar(X+16, Y+2, 'o');
 8017448:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801744a:	f005 fae1 	bl	801ca10 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 801744e:	f105 0010 	add.w	r0, r5, #16
 8017452:	4621      	mov	r1, r4
 8017454:	226f      	movs	r2, #111	; 0x6f
 8017456:	b280      	uxth	r0, r0
 8017458:	f005 fba4 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 801745c:	f105 001d 	add.w	r0, r5, #29
 8017460:	4621      	mov	r1, r4
 8017462:	2277      	movs	r2, #119	; 0x77
 8017464:	b280      	uxth	r0, r0
 8017466:	f005 fb9d 	bl	801cba4 <TFT_DrawChar>
  
  TFT_DrawChar(X+54, Y+2, 'r');
 801746a:	f105 0036 	add.w	r0, r5, #54	; 0x36
 801746e:	4621      	mov	r1, r4
 8017470:	2272      	movs	r2, #114	; 0x72
 8017472:	b280      	uxth	r0, r0
 8017474:	f005 fb96 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+65, Y+2, 'a');
 8017478:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801747c:	4621      	mov	r1, r4
 801747e:	2261      	movs	r2, #97	; 0x61
 8017480:	b280      	uxth	r0, r0
 8017482:	f005 fb8f 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+77, Y+2, 'd');
 8017486:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 801748a:	4621      	mov	r1, r4
 801748c:	2264      	movs	r2, #100	; 0x64
 801748e:	b280      	uxth	r0, r0
 8017490:	f005 fb88 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'i');
 8017494:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8017498:	4621      	mov	r1, r4
 801749a:	2269      	movs	r2, #105	; 0x69
 801749c:	b280      	uxth	r0, r0
 801749e:	f005 fb81 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'a');
 80174a2:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 80174a6:	4621      	mov	r1, r4
 80174a8:	2261      	movs	r2, #97	; 0x61
 80174aa:	b280      	uxth	r0, r0
 80174ac:	f005 fb7a 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+107, Y+2, 'n');
 80174b0:	f105 006b 	add.w	r0, r5, #107	; 0x6b
 80174b4:	4621      	mov	r1, r4
 80174b6:	226e      	movs	r2, #110	; 0x6e
 80174b8:	b280      	uxth	r0, r0
 80174ba:	f005 fb73 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'c');
 80174be:	f105 0078 	add.w	r0, r5, #120	; 0x78
 80174c2:	4621      	mov	r1, r4
 80174c4:	2263      	movs	r2, #99	; 0x63
 80174c6:	b280      	uxth	r0, r0
 80174c8:	f005 fb6c 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'e');
 80174cc:	f105 0084 	add.w	r0, r5, #132	; 0x84
 80174d0:	4621      	mov	r1, r4
 80174d2:	2265      	movs	r2, #101	; 0x65
 80174d4:	b280      	uxth	r0, r0
}
 80174d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+132, Y+2, 'e');
 80174da:	f005 bb63 	b.w	801cba4 <TFT_DrawChar>
 80174de:	bf00      	nop
 80174e0:	200001b8 	.word	0x200001b8
 80174e4:	200001c8 	.word	0x200001c8

080174e8 <GUI_TextMsgEn_LowIrradiance>:

void GUI_TextMsgEn_LowIrradiance(uint16_t X, uint16_t Y)
{
 80174e8:	b538      	push	{r3, r4, r5, lr}
 80174ea:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80174ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80174f0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80174f2:	f005 fa93 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80174f6:	2063      	movs	r0, #99	; 0x63
 80174f8:	f005 fa96 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80174fc:	4831      	ldr	r0, [pc, #196]	; (80175c4 <GUI_TextMsgEn_LowIrradiance+0xdc>)
 80174fe:	f005 fa87 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8017502:	4621      	mov	r1, r4
 8017504:	224c      	movs	r2, #76	; 0x4c
 8017506:	4628      	mov	r0, r5
 8017508:	f005 fb4c 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 801750c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801750e:	482e      	ldr	r0, [pc, #184]	; (80175c8 <GUI_TextMsgEn_LowIrradiance+0xe0>)
  TFT_DrawChar(X+16, Y+2, 'o');
 8017510:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8017512:	f005 fa7d 	bl	801ca10 <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 8017516:	f105 0010 	add.w	r0, r5, #16
 801751a:	4621      	mov	r1, r4
 801751c:	226f      	movs	r2, #111	; 0x6f
 801751e:	b280      	uxth	r0, r0
 8017520:	f005 fb40 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 8017524:	f105 001d 	add.w	r0, r5, #29
 8017528:	4621      	mov	r1, r4
 801752a:	2277      	movs	r2, #119	; 0x77
 801752c:	b280      	uxth	r0, r0
 801752e:	f005 fb39 	bl	801cba4 <TFT_DrawChar>
	
  TFT_DrawChar(X+55, Y+2, 'i');
 8017532:	f105 0037 	add.w	r0, r5, #55	; 0x37
 8017536:	4621      	mov	r1, r4
 8017538:	2269      	movs	r2, #105	; 0x69
 801753a:	b280      	uxth	r0, r0
 801753c:	f005 fb32 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+63, Y+2, 'r');
 8017540:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 8017544:	4621      	mov	r1, r4
 8017546:	2272      	movs	r2, #114	; 0x72
 8017548:	b280      	uxth	r0, r0
 801754a:	f005 fb2b 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+75, Y+2, 'r');
 801754e:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 8017552:	4621      	mov	r1, r4
 8017554:	2272      	movs	r2, #114	; 0x72
 8017556:	b280      	uxth	r0, r0
 8017558:	f005 fb24 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+86, Y+2, 'a');
 801755c:	f105 0056 	add.w	r0, r5, #86	; 0x56
 8017560:	4621      	mov	r1, r4
 8017562:	2261      	movs	r2, #97	; 0x61
 8017564:	b280      	uxth	r0, r0
 8017566:	f005 fb1d 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+98, Y+2, 'd');
 801756a:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801756e:	4621      	mov	r1, r4
 8017570:	2264      	movs	r2, #100	; 0x64
 8017572:	b280      	uxth	r0, r0
 8017574:	f005 fb16 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+111, Y+2, 'i');
 8017578:	f105 006f 	add.w	r0, r5, #111	; 0x6f
 801757c:	4621      	mov	r1, r4
 801757e:	2269      	movs	r2, #105	; 0x69
 8017580:	b280      	uxth	r0, r0
 8017582:	f005 fb0f 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+116, Y+2, 'a');
 8017586:	f105 0074 	add.w	r0, r5, #116	; 0x74
 801758a:	4621      	mov	r1, r4
 801758c:	2261      	movs	r2, #97	; 0x61
 801758e:	b280      	uxth	r0, r0
 8017590:	f005 fb08 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+128, Y+2, 'n');
 8017594:	f105 0080 	add.w	r0, r5, #128	; 0x80
 8017598:	4621      	mov	r1, r4
 801759a:	226e      	movs	r2, #110	; 0x6e
 801759c:	b280      	uxth	r0, r0
 801759e:	f005 fb01 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+141, Y+2, 'c');
 80175a2:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 80175a6:	4621      	mov	r1, r4
 80175a8:	2263      	movs	r2, #99	; 0x63
 80175aa:	b280      	uxth	r0, r0
 80175ac:	f005 fafa 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawChar(X+153, Y+2, 'e');
 80175b0:	f105 0099 	add.w	r0, r5, #153	; 0x99
 80175b4:	4621      	mov	r1, r4
 80175b6:	2265      	movs	r2, #101	; 0x65
 80175b8:	b280      	uxth	r0, r0
	
	
}
 80175ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+153, Y+2, 'e');
 80175be:	f005 baf1 	b.w	801cba4 <TFT_DrawChar>
 80175c2:	bf00      	nop
 80175c4:	200001b8 	.word	0x200001b8
 80175c8:	200001c8 	.word	0x200001c8

080175cc <GUI_TextEn_Luminance>:
void GUI_TextEn_Luminance(uint16_t X, uint16_t Y)
{
 80175cc:	b538      	push	{r3, r4, r5, lr}
 80175ce:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80175d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80175d4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80175d6:	f005 fa21 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80175da:	2063      	movs	r0, #99	; 0x63
 80175dc:	f005 fa24 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80175e0:	4823      	ldr	r0, [pc, #140]	; (8017670 <GUI_TextEn_Luminance+0xa4>)
 80175e2:	f005 fa15 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 80175e6:	4621      	mov	r1, r4
 80175e8:	224c      	movs	r2, #76	; 0x4c
 80175ea:	4628      	mov	r0, r5
 80175ec:	f005 fada 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+13, Y+2, 'u');
 80175f0:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80175f2:	4820      	ldr	r0, [pc, #128]	; (8017674 <GUI_TextEn_Luminance+0xa8>)
	TFT_DrawChar(X+13, Y+2, 'u');
 80175f4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80175f6:	f005 fa0b 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'u');
 80175fa:	f105 000d 	add.w	r0, r5, #13
 80175fe:	4621      	mov	r1, r4
 8017600:	2275      	movs	r2, #117	; 0x75
 8017602:	b280      	uxth	r0, r0
 8017604:	f005 face 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'm');
 8017608:	f105 001b 	add.w	r0, r5, #27
 801760c:	4621      	mov	r1, r4
 801760e:	226d      	movs	r2, #109	; 0x6d
 8017610:	b280      	uxth	r0, r0
 8017612:	f005 fac7 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 8017616:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801761a:	4621      	mov	r1, r4
 801761c:	2269      	movs	r2, #105	; 0x69
 801761e:	b280      	uxth	r0, r0
 8017620:	f005 fac0 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y+2, 'a');
 8017624:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 8017628:	4621      	mov	r1, r4
 801762a:	2261      	movs	r2, #97	; 0x61
 801762c:	b280      	uxth	r0, r0
 801762e:	f005 fab9 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'n');
 8017632:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8017636:	4621      	mov	r1, r4
 8017638:	226e      	movs	r2, #110	; 0x6e
 801763a:	b280      	uxth	r0, r0
 801763c:	f005 fab2 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'n');
 8017640:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8017644:	4621      	mov	r1, r4
 8017646:	226e      	movs	r2, #110	; 0x6e
 8017648:	b280      	uxth	r0, r0
 801764a:	f005 faab 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+84, Y+2, 'c');
 801764e:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8017652:	4621      	mov	r1, r4
 8017654:	2263      	movs	r2, #99	; 0x63
 8017656:	b280      	uxth	r0, r0
 8017658:	f005 faa4 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+96, Y+2, 'e');
 801765c:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8017660:	4621      	mov	r1, r4
 8017662:	2265      	movs	r2, #101	; 0x65
 8017664:	b280      	uxth	r0, r0
}
 8017666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+96, Y+2, 'e');
 801766a:	f005 ba9b 	b.w	801cba4 <TFT_DrawChar>
 801766e:	bf00      	nop
 8017670:	200001b8 	.word	0x200001b8
 8017674:	200001c8 	.word	0x200001c8

08017678 <GUI_TextEn_Illuminance>:

void GUI_TextEn_Illuminance(uint16_t X, uint16_t Y)
{
 8017678:	b538      	push	{r3, r4, r5, lr}
 801767a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801767c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017680:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017682:	f005 f9cb 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017686:	2063      	movs	r0, #99	; 0x63
 8017688:	f005 f9ce 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801768c:	482a      	ldr	r0, [pc, #168]	; (8017738 <GUI_TextEn_Illuminance+0xc0>)
 801768e:	f005 f9bf 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8017692:	4621      	mov	r1, r4
 8017694:	2249      	movs	r2, #73	; 0x49
 8017696:	4628      	mov	r0, r5
 8017698:	f005 fa84 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+8, Y+2, 'l');
 801769c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801769e:	4827      	ldr	r0, [pc, #156]	; (801773c <GUI_TextEn_Illuminance+0xc4>)
	TFT_DrawChar(X+8, Y+2, 'l');
 80176a0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80176a2:	f005 f9b5 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+8, Y+2, 'l');
 80176a6:	f105 0008 	add.w	r0, r5, #8
 80176aa:	4621      	mov	r1, r4
 80176ac:	226c      	movs	r2, #108	; 0x6c
 80176ae:	b280      	uxth	r0, r0
 80176b0:	f005 fa78 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y+2, 'l');
 80176b4:	f105 000d 	add.w	r0, r5, #13
 80176b8:	4621      	mov	r1, r4
 80176ba:	226c      	movs	r2, #108	; 0x6c
 80176bc:	b280      	uxth	r0, r0
 80176be:	f005 fa71 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+18, Y+2, 'u');
 80176c2:	f105 0012 	add.w	r0, r5, #18
 80176c6:	4621      	mov	r1, r4
 80176c8:	2275      	movs	r2, #117	; 0x75
 80176ca:	b280      	uxth	r0, r0
 80176cc:	f005 fa6a 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'm');
 80176d0:	f105 0020 	add.w	r0, r5, #32
 80176d4:	4621      	mov	r1, r4
 80176d6:	226d      	movs	r2, #109	; 0x6d
 80176d8:	b280      	uxth	r0, r0
 80176da:	f005 fa63 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'i');
 80176de:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 80176e2:	4621      	mov	r1, r4
 80176e4:	2269      	movs	r2, #105	; 0x69
 80176e6:	b280      	uxth	r0, r0
 80176e8:	f005 fa5c 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+64, Y+2, 'a');
 80176ec:	f105 0040 	add.w	r0, r5, #64	; 0x40
 80176f0:	4621      	mov	r1, r4
 80176f2:	2261      	movs	r2, #97	; 0x61
 80176f4:	b280      	uxth	r0, r0
 80176f6:	f005 fa55 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+51, Y+2, 'n');
 80176fa:	f105 0033 	add.w	r0, r5, #51	; 0x33
 80176fe:	4621      	mov	r1, r4
 8017700:	226e      	movs	r2, #110	; 0x6e
 8017702:	b280      	uxth	r0, r0
 8017704:	f005 fa4e 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'n');
 8017708:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 801770c:	4621      	mov	r1, r4
 801770e:	226e      	movs	r2, #110	; 0x6e
 8017710:	b280      	uxth	r0, r0
 8017712:	f005 fa47 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'c');
 8017716:	f105 0059 	add.w	r0, r5, #89	; 0x59
 801771a:	4621      	mov	r1, r4
 801771c:	2263      	movs	r2, #99	; 0x63
 801771e:	b280      	uxth	r0, r0
 8017720:	f005 fa40 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 8017724:	f105 0065 	add.w	r0, r5, #101	; 0x65
 8017728:	4621      	mov	r1, r4
 801772a:	2265      	movs	r2, #101	; 0x65
 801772c:	b280      	uxth	r0, r0
}
 801772e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+101, Y+2, 'e');
 8017732:	f005 ba37 	b.w	801cba4 <TFT_DrawChar>
 8017736:	bf00      	nop
 8017738:	200001b8 	.word	0x200001b8
 801773c:	200001c8 	.word	0x200001c8

08017740 <GUI_TextEn_Mode>:
void GUI_TextEn_Mode(uint16_t X, uint16_t Y)
{
 8017740:	b538      	push	{r3, r4, r5, lr}
 8017742:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017744:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017748:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801774a:	f005 f967 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801774e:	2063      	movs	r0, #99	; 0x63
 8017750:	f005 f96a 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017754:	4811      	ldr	r0, [pc, #68]	; (801779c <GUI_TextEn_Mode+0x5c>)
 8017756:	f005 f95b 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'M');
 801775a:	4621      	mov	r1, r4
 801775c:	224d      	movs	r2, #77	; 0x4d
 801775e:	4628      	mov	r0, r5
 8017760:	f005 fa20 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+19, Y+2, 'o');
 8017764:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017766:	480e      	ldr	r0, [pc, #56]	; (80177a0 <GUI_TextEn_Mode+0x60>)
 8017768:	f005 f952 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, 'o');
 801776c:	b2a4      	uxth	r4, r4
 801776e:	f105 0013 	add.w	r0, r5, #19
 8017772:	4621      	mov	r1, r4
 8017774:	226f      	movs	r2, #111	; 0x6f
 8017776:	b280      	uxth	r0, r0
 8017778:	f005 fa14 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'd');
 801777c:	f105 001e 	add.w	r0, r5, #30
 8017780:	4621      	mov	r1, r4
 8017782:	2264      	movs	r2, #100	; 0x64
 8017784:	b280      	uxth	r0, r0
 8017786:	f005 fa0d 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+43, Y+2, 'e');
 801778a:	f105 002b 	add.w	r0, r5, #43	; 0x2b
 801778e:	4621      	mov	r1, r4
 8017790:	2265      	movs	r2, #101	; 0x65
 8017792:	b280      	uxth	r0, r0
}
 8017794:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+43, Y+2, 'e');
 8017798:	f005 ba04 	b.w	801cba4 <TFT_DrawChar>
 801779c:	200001b8 	.word	0x200001b8
 80177a0:	200001c8 	.word	0x200001c8

080177a4 <GUI_TextEn_PPFD>:

void GUI_TextEn_PPFD(uint16_t X, uint16_t Y)
{
 80177a4:	b538      	push	{r3, r4, r5, lr}
 80177a6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80177a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80177ac:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80177ae:	f005 f935 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80177b2:	2063      	movs	r0, #99	; 0x63
 80177b4:	f005 f938 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80177b8:	480f      	ldr	r0, [pc, #60]	; (80177f8 <GUI_TextEn_PPFD+0x54>)
 80177ba:	f005 f929 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+48, Y, 'D');
 80177be:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80177c2:	4629      	mov	r1, r5
 80177c4:	2244      	movs	r2, #68	; 0x44
 80177c6:	b280      	uxth	r0, r0
 80177c8:	f005 f9ec 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'F');
 80177cc:	f104 001f 	add.w	r0, r4, #31
 80177d0:	4629      	mov	r1, r5
 80177d2:	2246      	movs	r2, #70	; 0x46
 80177d4:	b280      	uxth	r0, r0
 80177d6:	f005 f9e5 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 80177da:	f104 0010 	add.w	r0, r4, #16
 80177de:	4629      	mov	r1, r5
 80177e0:	2250      	movs	r2, #80	; 0x50
 80177e2:	b280      	uxth	r0, r0
 80177e4:	f005 f9de 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 80177e8:	4629      	mov	r1, r5
 80177ea:	4620      	mov	r0, r4
 80177ec:	2250      	movs	r2, #80	; 0x50
}
 80177ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 80177f2:	f005 b9d7 	b.w	801cba4 <TFT_DrawChar>
 80177f6:	bf00      	nop
 80177f8:	200001b8 	.word	0x200001b8

080177fc <GUI_TextEn_PPL>:
void GUI_TextEn_PPL(uint16_t X, uint16_t Y)
{
 80177fc:	b538      	push	{r3, r4, r5, lr}
 80177fe:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017800:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017804:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017806:	f005 f909 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801780a:	2063      	movs	r0, #99	; 0x63
 801780c:	f005 f90c 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017810:	480b      	ldr	r0, [pc, #44]	; (8017840 <GUI_TextEn_PPL+0x44>)
 8017812:	f005 f8fd 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+31, Y, 'L');
 8017816:	f104 001f 	add.w	r0, r4, #31
 801781a:	4629      	mov	r1, r5
 801781c:	224c      	movs	r2, #76	; 0x4c
 801781e:	b280      	uxth	r0, r0
 8017820:	f005 f9c0 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 8017824:	f104 0010 	add.w	r0, r4, #16
 8017828:	4629      	mov	r1, r5
 801782a:	2250      	movs	r2, #80	; 0x50
 801782c:	b280      	uxth	r0, r0
 801782e:	f005 f9b9 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8017832:	4629      	mov	r1, r5
 8017834:	4620      	mov	r0, r4
 8017836:	2250      	movs	r2, #80	; 0x50
}
 8017838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 801783c:	f005 b9b2 	b.w	801cba4 <TFT_DrawChar>
 8017840:	200001b8 	.word	0x200001b8

08017844 <GUI_TextEn_PARwavebands>:
void GUI_TextEn_PARwavebands(uint16_t X, uint16_t Y)
{
 8017844:	b538      	push	{r3, r4, r5, lr}
 8017846:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017848:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801784c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801784e:	f005 f8e5 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017852:	2063      	movs	r0, #99	; 0x63
 8017854:	f005 f8e8 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8017858:	482d      	ldr	r0, [pc, #180]	; (8017910 <GUI_TextEn_PARwavebands+0xcc>)
 801785a:	f005 f8d9 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+32, Y, 'R');
 801785e:	f105 0020 	add.w	r0, r5, #32
 8017862:	4621      	mov	r1, r4
 8017864:	2252      	movs	r2, #82	; 0x52
 8017866:	b280      	uxth	r0, r0
 8017868:	f005 f99c 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'A');
 801786c:	f105 0010 	add.w	r0, r5, #16
 8017870:	4621      	mov	r1, r4
 8017872:	2241      	movs	r2, #65	; 0x41
 8017874:	b280      	uxth	r0, r0
 8017876:	f005 f995 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 801787a:	4621      	mov	r1, r4
 801787c:	2250      	movs	r2, #80	; 0x50
 801787e:	4628      	mov	r0, r5
 8017880:	f005 f990 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+75, Y+2, 'a');
 8017884:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8017886:	4823      	ldr	r0, [pc, #140]	; (8017914 <GUI_TextEn_PARwavebands+0xd0>)
	TFT_DrawChar(X+75, Y+2, 'a');
 8017888:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801788a:	f005 f8c1 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+75, Y+2, 'a');
 801788e:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 8017892:	4621      	mov	r1, r4
 8017894:	2261      	movs	r2, #97	; 0x61
 8017896:	b280      	uxth	r0, r0
 8017898:	f005 f984 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+60, Y+2, 'w');
 801789c:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 80178a0:	4621      	mov	r1, r4
 80178a2:	2277      	movs	r2, #119	; 0x77
 80178a4:	b280      	uxth	r0, r0
 80178a6:	f005 f97d 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 80178aa:	f105 0065 	add.w	r0, r5, #101	; 0x65
 80178ae:	4621      	mov	r1, r4
 80178b0:	2265      	movs	r2, #101	; 0x65
 80178b2:	b280      	uxth	r0, r0
 80178b4:	f005 f976 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'v');
 80178b8:	f105 0057 	add.w	r0, r5, #87	; 0x57
 80178bc:	4621      	mov	r1, r4
 80178be:	2276      	movs	r2, #118	; 0x76
 80178c0:	b280      	uxth	r0, r0
 80178c2:	f005 f96f 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+126, Y+2, 'a');
 80178c6:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 80178ca:	4621      	mov	r1, r4
 80178cc:	2261      	movs	r2, #97	; 0x61
 80178ce:	b280      	uxth	r0, r0
 80178d0:	f005 f968 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+113, Y+2, 'b');
 80178d4:	f105 0071 	add.w	r0, r5, #113	; 0x71
 80178d8:	4621      	mov	r1, r4
 80178da:	2262      	movs	r2, #98	; 0x62
 80178dc:	b280      	uxth	r0, r0
 80178de:	f005 f961 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+138, Y+2, 'n');
 80178e2:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 80178e6:	4621      	mov	r1, r4
 80178e8:	226e      	movs	r2, #110	; 0x6e
 80178ea:	b280      	uxth	r0, r0
 80178ec:	f005 f95a 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+151, Y+2, 'd');
 80178f0:	f105 0097 	add.w	r0, r5, #151	; 0x97
 80178f4:	4621      	mov	r1, r4
 80178f6:	2264      	movs	r2, #100	; 0x64
 80178f8:	b280      	uxth	r0, r0
 80178fa:	f005 f953 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+165, Y+2, 's');
 80178fe:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
 8017902:	4621      	mov	r1, r4
 8017904:	2273      	movs	r2, #115	; 0x73
 8017906:	b280      	uxth	r0, r0
}
 8017908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+165, Y+2, 's');
 801790c:	f005 b94a 	b.w	801cba4 <TFT_DrawChar>
 8017910:	200001b8 	.word	0x200001b8
 8017914:	200001c8 	.word	0x200001c8

08017918 <GUI_TextEn_B_G_R_FR>:
void GUI_TextEn_B_G_R_FR(uint16_t X, uint16_t Y)
{
 8017918:	b538      	push	{r3, r4, r5, lr}
 801791a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801791c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017920:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8017922:	f005 f87b 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017926:	2063      	movs	r0, #99	; 0x63
 8017928:	f005 f87e 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801792c:	481d      	ldr	r0, [pc, #116]	; (80179a4 <GUI_TextEn_B_G_R_FR+0x8c>)
 801792e:	f005 f86f 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+15, Y, '-');
 8017932:	f104 000f 	add.w	r0, r4, #15
 8017936:	4629      	mov	r1, r5
 8017938:	222d      	movs	r2, #45	; 0x2d
 801793a:	b280      	uxth	r0, r0
 801793c:	f005 f932 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'B');
 8017940:	4629      	mov	r1, r5
 8017942:	4620      	mov	r0, r4
 8017944:	2242      	movs	r2, #66	; 0x42
 8017946:	f005 f92d 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y, '-');
 801794a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 801794e:	4629      	mov	r1, r5
 8017950:	222d      	movs	r2, #45	; 0x2d
 8017952:	b280      	uxth	r0, r0
 8017954:	f005 f926 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y, 'G');
 8017958:	f104 001d 	add.w	r0, r4, #29
 801795c:	4629      	mov	r1, r5
 801795e:	2247      	movs	r2, #71	; 0x47
 8017960:	b280      	uxth	r0, r0
 8017962:	f005 f91f 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y, '-');
 8017966:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 801796a:	4629      	mov	r1, r5
 801796c:	222d      	movs	r2, #45	; 0x2d
 801796e:	b280      	uxth	r0, r0
 8017970:	f005 f918 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y, 'R');	
 8017974:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8017978:	4629      	mov	r1, r5
 801797a:	2252      	movs	r2, #82	; 0x52
 801797c:	b280      	uxth	r0, r0
 801797e:	f005 f911 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y, 'F');
 8017982:	f104 0057 	add.w	r0, r4, #87	; 0x57
 8017986:	4629      	mov	r1, r5
 8017988:	2246      	movs	r2, #70	; 0x46
 801798a:	b280      	uxth	r0, r0
 801798c:	f005 f90a 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, 'R');
 8017990:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8017994:	4629      	mov	r1, r5
 8017996:	2252      	movs	r2, #82	; 0x52
 8017998:	b280      	uxth	r0, r0
}
 801799a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, 'R');
 801799e:	f005 b901 	b.w	801cba4 <TFT_DrawChar>
 80179a2:	bf00      	nop
 80179a4:	200001b8 	.word	0x200001b8

080179a8 <GUI_TextEn_CCT>:
	TFT_DrawChar(X, Y, 'L');
	TFT_SetFont(&Font11EN_arch_big);
	TFT_DrawChar(X+17, Y+7, 'R');
}
void GUI_TextEn_CCT(uint16_t X, uint16_t Y)
{
 80179a8:	b538      	push	{r3, r4, r5, lr}
 80179aa:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80179ac:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80179b0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80179b2:	f005 f833 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80179b6:	2063      	movs	r0, #99	; 0x63
 80179b8:	f005 f836 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 80179bc:	480b      	ldr	r0, [pc, #44]	; (80179ec <GUI_TextEn_CCT+0x44>)
 80179be:	f005 f827 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C'-33);
 80179c2:	4629      	mov	r1, r5
 80179c4:	4620      	mov	r0, r4
 80179c6:	2222      	movs	r2, #34	; 0x22
 80179c8:	f005 f8ec 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y, 'C'-33);
 80179cc:	f104 0017 	add.w	r0, r4, #23
 80179d0:	4629      	mov	r1, r5
 80179d2:	2222      	movs	r2, #34	; 0x22
 80179d4:	b280      	uxth	r0, r0
 80179d6:	f005 f8e5 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y, 'T'-33);
 80179da:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 80179de:	4629      	mov	r1, r5
 80179e0:	2233      	movs	r2, #51	; 0x33
 80179e2:	b280      	uxth	r0, r0
}
 80179e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+46, Y, 'T'-33);
 80179e8:	f005 b8dc 	b.w	801cba4 <TFT_DrawChar>
 80179ec:	200001e8 	.word	0x200001e8

080179f0 <GUI_TextEn_W_m2>:

/* Measure dimensions */
void GUI_TextEn_W_m2(uint16_t X, uint16_t Y)
{
 80179f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80179f2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80179f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80179f8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80179fa:	f005 f80f 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80179fe:	2063      	movs	r0, #99	; 0x63
 8017a00:	f005 f812 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017a04:	4815      	ldr	r0, [pc, #84]	; (8017a5c <GUI_TextEn_W_m2+0x6c>)
 8017a06:	f005 f803 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+3, Y, 'W');
 8017a0a:	1ce8      	adds	r0, r5, #3
 8017a0c:	4621      	mov	r1, r4
 8017a0e:	2257      	movs	r2, #87	; 0x57
 8017a10:	b280      	uxth	r0, r0
 8017a12:	f005 f8c7 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+1, Y+17, 'm');
 8017a16:	f104 0111 	add.w	r1, r4, #17
 8017a1a:	1c68      	adds	r0, r5, #1
 8017a1c:	226d      	movs	r2, #109	; 0x6d
 8017a1e:	b289      	uxth	r1, r1
 8017a20:	b280      	uxth	r0, r0
 8017a22:	f005 f8bf 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font6EN_arch_big);
 8017a26:	480e      	ldr	r0, [pc, #56]	; (8017a60 <GUI_TextEn_W_m2+0x70>)
 8017a28:	f004 fff2 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+11, Y+16, '2');	
 8017a2c:	f104 0110 	add.w	r1, r4, #16
 8017a30:	f105 000b 	add.w	r0, r5, #11
 8017a34:	2232      	movs	r2, #50	; 0x32
 8017a36:	b289      	uxth	r1, r1
 8017a38:	b280      	uxth	r0, r0
 8017a3a:	f005 f8b3 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+17, Y+14, TFT_White);
 8017a3e:	f104 030e 	add.w	r3, r4, #14
 8017a42:	b29b      	uxth	r3, r3
 8017a44:	f105 0211 	add.w	r2, r5, #17
 8017a48:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017a4c:	9100      	str	r1, [sp, #0]
 8017a4e:	b292      	uxth	r2, r2
 8017a50:	4619      	mov	r1, r3
 8017a52:	4628      	mov	r0, r5
 8017a54:	f004 fd56 	bl	801c504 <TFT_DrawLine>
}
 8017a58:	b003      	add	sp, #12
 8017a5a:	bd30      	pop	{r4, r5, pc}
 8017a5c:	20000220 	.word	0x20000220
 8017a60:	20000210 	.word	0x20000210

08017a64 <GUI_TextEn_mW_m2>:

void GUI_TextEn_mW_m2(uint16_t X, uint16_t Y)
{
 8017a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a66:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017a68:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017a6c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017a6e:	f004 ffd5 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017a72:	2063      	movs	r0, #99	; 0x63
 8017a74:	f004 ffd8 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017a78:	4818      	ldr	r0, [pc, #96]	; (8017adc <GUI_TextEn_mW_m2+0x78>)
 8017a7a:	f004 ffc9 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X-3, Y, 'm');
 8017a7e:	1ee8      	subs	r0, r5, #3
 8017a80:	4621      	mov	r1, r4
 8017a82:	226d      	movs	r2, #109	; 0x6d
 8017a84:	b280      	uxth	r0, r0
 8017a86:	f005 f88d 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+7, Y, 'W');
 8017a8a:	1de8      	adds	r0, r5, #7
 8017a8c:	4621      	mov	r1, r4
 8017a8e:	2257      	movs	r2, #87	; 0x57
 8017a90:	b280      	uxth	r0, r0
 8017a92:	f005 f887 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+1, Y+17, 'm');
 8017a96:	f104 0111 	add.w	r1, r4, #17
 8017a9a:	1c68      	adds	r0, r5, #1
 8017a9c:	226d      	movs	r2, #109	; 0x6d
 8017a9e:	b289      	uxth	r1, r1
 8017aa0:	b280      	uxth	r0, r0
 8017aa2:	f005 f87f 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font6EN_arch_big);
 8017aa6:	480e      	ldr	r0, [pc, #56]	; (8017ae0 <GUI_TextEn_mW_m2+0x7c>)
 8017aa8:	f004 ffb2 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+11, Y+16, '2');
 8017aac:	f104 0110 	add.w	r1, r4, #16
 8017ab0:	f105 000b 	add.w	r0, r5, #11
 8017ab4:	2232      	movs	r2, #50	; 0x32
 8017ab6:	b289      	uxth	r1, r1
 8017ab8:	b280      	uxth	r0, r0
 8017aba:	f005 f873 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+17, Y+14, TFT_White);
 8017abe:	f104 030e 	add.w	r3, r4, #14
 8017ac2:	b29b      	uxth	r3, r3
 8017ac4:	f105 0211 	add.w	r2, r5, #17
 8017ac8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017acc:	9100      	str	r1, [sp, #0]
 8017ace:	b292      	uxth	r2, r2
 8017ad0:	4619      	mov	r1, r3
 8017ad2:	4628      	mov	r0, r5
 8017ad4:	f004 fd16 	bl	801c504 <TFT_DrawLine>
}
 8017ad8:	b003      	add	sp, #12
 8017ada:	bd30      	pop	{r4, r5, pc}
 8017adc:	20000220 	.word	0x20000220
 8017ae0:	20000210 	.word	0x20000210

08017ae4 <GUI_TextEn_W_m2_sr>:

void GUI_TextEn_W_m2_sr(uint16_t X, uint16_t Y)
{
 8017ae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017ae6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017ae8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017aec:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017aee:	f004 ff95 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017af2:	2063      	movs	r0, #99	; 0x63
 8017af4:	f004 ff98 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017af8:	4824      	ldr	r0, [pc, #144]	; (8017b8c <GUI_TextEn_W_m2_sr+0xa8>)
 8017afa:	f004 ff89 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+12, Y, 'W');
 8017afe:	f105 000c 	add.w	r0, r5, #12
 8017b02:	4621      	mov	r1, r4
 8017b04:	2257      	movs	r2, #87	; 0x57
 8017b06:	b280      	uxth	r0, r0
	TFT_DrawChar(X+20, Y+17, 'm');
 8017b08:	f104 0611 	add.w	r6, r4, #17
	TFT_DrawChar(X+12, Y, 'W');
 8017b0c:	f005 f84a 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+20, Y+17, 'm');
 8017b10:	b2b6      	uxth	r6, r6
 8017b12:	f105 0014 	add.w	r0, r5, #20
 8017b16:	4631      	mov	r1, r6
 8017b18:	226d      	movs	r2, #109	; 0x6d
 8017b1a:	b280      	uxth	r0, r0
 8017b1c:	f005 f842 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+17, 's');
 8017b20:	4631      	mov	r1, r6
 8017b22:	4628      	mov	r0, r5
 8017b24:	2273      	movs	r2, #115	; 0x73
 8017b26:	f005 f83d 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+7, Y+17, 'r');
 8017b2a:	1de8      	adds	r0, r5, #7
 8017b2c:	4631      	mov	r1, r6
 8017b2e:	2272      	movs	r2, #114	; 0x72
 8017b30:	b280      	uxth	r0, r0
 8017b32:	f005 f837 	bl	801cba4 <TFT_DrawChar>
	TFT_FillRectangle(X+17,Y+23,X+18,Y+24,TFT_White);
 8017b36:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8017b3a:	f104 0318 	add.w	r3, r4, #24
 8017b3e:	f105 0212 	add.w	r2, r5, #18
 8017b42:	f104 0117 	add.w	r1, r4, #23
 8017b46:	f105 0011 	add.w	r0, r5, #17
 8017b4a:	b29b      	uxth	r3, r3
 8017b4c:	b292      	uxth	r2, r2
 8017b4e:	b289      	uxth	r1, r1
 8017b50:	9600      	str	r6, [sp, #0]
 8017b52:	b280      	uxth	r0, r0
 8017b54:	f004 fd33 	bl	801c5be <TFT_FillRectangle>
	TFT_SetFont(&Font6EN_arch_big);
 8017b58:	480d      	ldr	r0, [pc, #52]	; (8017b90 <GUI_TextEn_W_m2_sr+0xac>)
 8017b5a:	f004 ff59 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+30, Y+16, '2');	
 8017b5e:	f104 0110 	add.w	r1, r4, #16
 8017b62:	f105 001e 	add.w	r0, r5, #30
 8017b66:	2232      	movs	r2, #50	; 0x32
 8017b68:	b289      	uxth	r1, r1
 8017b6a:	b280      	uxth	r0, r0
 8017b6c:	f005 f81a 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+36, Y+14, TFT_White);
 8017b70:	f104 030e 	add.w	r3, r4, #14
 8017b74:	b29b      	uxth	r3, r3
 8017b76:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8017b7a:	9600      	str	r6, [sp, #0]
 8017b7c:	b292      	uxth	r2, r2
 8017b7e:	4619      	mov	r1, r3
 8017b80:	4628      	mov	r0, r5
 8017b82:	f004 fcbf 	bl	801c504 <TFT_DrawLine>
}
 8017b86:	b002      	add	sp, #8
 8017b88:	bd70      	pop	{r4, r5, r6, pc}
 8017b8a:	bf00      	nop
 8017b8c:	20000220 	.word	0x20000220
 8017b90:	20000210 	.word	0x20000210

08017b94 <GUI_TextEn_mW_m2_sr>:

void GUI_TextEn_mW_m2_sr(uint16_t X, uint16_t Y)
{
 8017b94:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017b96:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017b98:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017b9c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017b9e:	f004 ff3d 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017ba2:	2063      	movs	r0, #99	; 0x63
 8017ba4:	f004 ff40 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017ba8:	4827      	ldr	r0, [pc, #156]	; (8017c48 <GUI_TextEn_mW_m2_sr+0xb4>)
 8017baa:	f004 ff31 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+6, Y, 'm');
 8017bae:	1da8      	adds	r0, r5, #6
 8017bb0:	4621      	mov	r1, r4
 8017bb2:	226d      	movs	r2, #109	; 0x6d
 8017bb4:	b280      	uxth	r0, r0
 8017bb6:	f004 fff5 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'W');
 8017bba:	f105 0010 	add.w	r0, r5, #16
 8017bbe:	4621      	mov	r1, r4
 8017bc0:	2257      	movs	r2, #87	; 0x57
 8017bc2:	b280      	uxth	r0, r0
	TFT_DrawChar(X+20, Y+17, 'm');
 8017bc4:	f104 0611 	add.w	r6, r4, #17
	TFT_DrawChar(X+16, Y, 'W');
 8017bc8:	f004 ffec 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+20, Y+17, 'm');
 8017bcc:	b2b6      	uxth	r6, r6
 8017bce:	f105 0014 	add.w	r0, r5, #20
 8017bd2:	4631      	mov	r1, r6
 8017bd4:	226d      	movs	r2, #109	; 0x6d
 8017bd6:	b280      	uxth	r0, r0
 8017bd8:	f004 ffe4 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X, Y+17, 's');
 8017bdc:	4631      	mov	r1, r6
 8017bde:	4628      	mov	r0, r5
 8017be0:	2273      	movs	r2, #115	; 0x73
 8017be2:	f004 ffdf 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+7, Y+17, 'r');
 8017be6:	1de8      	adds	r0, r5, #7
 8017be8:	4631      	mov	r1, r6
 8017bea:	2272      	movs	r2, #114	; 0x72
 8017bec:	b280      	uxth	r0, r0
 8017bee:	f004 ffd9 	bl	801cba4 <TFT_DrawChar>
	TFT_FillRectangle(X+17,Y+23,X+18,Y+24,TFT_White);
 8017bf2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8017bf6:	f104 0318 	add.w	r3, r4, #24
 8017bfa:	f105 0212 	add.w	r2, r5, #18
 8017bfe:	f104 0117 	add.w	r1, r4, #23
 8017c02:	f105 0011 	add.w	r0, r5, #17
 8017c06:	b29b      	uxth	r3, r3
 8017c08:	b292      	uxth	r2, r2
 8017c0a:	b289      	uxth	r1, r1
 8017c0c:	9600      	str	r6, [sp, #0]
 8017c0e:	b280      	uxth	r0, r0
 8017c10:	f004 fcd5 	bl	801c5be <TFT_FillRectangle>
	TFT_SetFont(&Font6EN_arch_big);
 8017c14:	480d      	ldr	r0, [pc, #52]	; (8017c4c <GUI_TextEn_mW_m2_sr+0xb8>)
 8017c16:	f004 fefb 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+30, Y+16, '2');
 8017c1a:	f104 0110 	add.w	r1, r4, #16
 8017c1e:	f105 001e 	add.w	r0, r5, #30
 8017c22:	2232      	movs	r2, #50	; 0x32
 8017c24:	b289      	uxth	r1, r1
 8017c26:	b280      	uxth	r0, r0
 8017c28:	f004 ffbc 	bl	801cba4 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+36, Y+14, TFT_White);
 8017c2c:	f104 030e 	add.w	r3, r4, #14
 8017c30:	b29b      	uxth	r3, r3
 8017c32:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8017c36:	9600      	str	r6, [sp, #0]
 8017c38:	b292      	uxth	r2, r2
 8017c3a:	4619      	mov	r1, r3
 8017c3c:	4628      	mov	r0, r5
 8017c3e:	f004 fc61 	bl	801c504 <TFT_DrawLine>
}
 8017c42:	b002      	add	sp, #8
 8017c44:	bd70      	pop	{r4, r5, r6, pc}
 8017c46:	bf00      	nop
 8017c48:	20000220 	.word	0x20000220
 8017c4c:	20000210 	.word	0x20000210

08017c50 <GUI_TextEn_cd_m2>:
void GUI_TextEn_cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 8017c50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017c54:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8017c56:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017c5a:	460d      	mov	r5, r1
 8017c5c:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 8017c5e:	f004 fedd 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017c62:	2063      	movs	r0, #99	; 0x63
 8017c64:	f004 fee0 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8017c68:	482f      	ldr	r0, [pc, #188]	; (8017d28 <GUI_TextEn_cd_m2+0xd8>)
 8017c6a:	f004 fed1 	bl	801ca10 <TFT_SetFont>
	
	if (deg==1)
 8017c6e:	2e01      	cmp	r6, #1
 8017c70:	f105 0911 	add.w	r9, r5, #17
 8017c74:	f105 0810 	add.w	r8, r5, #16
 8017c78:	f105 060e 	add.w	r6, r5, #14
 8017c7c:	d131      	bne.n	8017ce2 <GUI_TextEn_cd_m2+0x92>
	{
		TFT_DrawChar(X, Y, 'k');
 8017c7e:	226b      	movs	r2, #107	; 0x6b
 8017c80:	4629      	mov	r1, r5
 8017c82:	4620      	mov	r0, r4
 8017c84:	f004 ff8e 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+7, Y, 'c');
 8017c88:	1de0      	adds	r0, r4, #7
 8017c8a:	2263      	movs	r2, #99	; 0x63
 8017c8c:	4629      	mov	r1, r5
 8017c8e:	b280      	uxth	r0, r0
 8017c90:	f004 ff88 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+14, Y, 'd');
 8017c94:	f104 000e 	add.w	r0, r4, #14
 8017c98:	2264      	movs	r2, #100	; 0x64
 8017c9a:	4629      	mov	r1, r5
 8017c9c:	b280      	uxth	r0, r0
 8017c9e:	f004 ff81 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(X+5, Y+17, 'm');
 8017ca2:	1d60      	adds	r0, r4, #5
 8017ca4:	226d      	movs	r2, #109	; 0x6d
 8017ca6:	fa1f f189 	uxth.w	r1, r9
 8017caa:	b280      	uxth	r0, r0
 8017cac:	f004 ff7a 	bl	801cba4 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 8017cb0:	481e      	ldr	r0, [pc, #120]	; (8017d2c <GUI_TextEn_cd_m2+0xdc>)
 8017cb2:	f004 fead 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+16, '2');	
 8017cb6:	f104 000f 	add.w	r0, r4, #15
 8017cba:	2232      	movs	r2, #50	; 0x32
 8017cbc:	fa1f f188 	uxth.w	r1, r8
 8017cc0:	b280      	uxth	r0, r0
 8017cc2:	f004 ff6f 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+22, Y+14, TFT_White);
 8017cc6:	b2b3      	uxth	r3, r6
 8017cc8:	f104 0216 	add.w	r2, r4, #22
		TFT_DrawChar(X+9, Y, 'd');
		
		TFT_DrawChar(X+2, Y+17, 'm');
		TFT_SetFont(&Font6EN_arch_big);
		TFT_DrawChar(X+12, Y+16, '2');	
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 8017ccc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017cd0:	9100      	str	r1, [sp, #0]
 8017cd2:	b292      	uxth	r2, r2
 8017cd4:	4619      	mov	r1, r3
 8017cd6:	4620      	mov	r0, r4
 8017cd8:	f004 fc14 	bl	801c504 <TFT_DrawLine>
	}
}
 8017cdc:	b003      	add	sp, #12
 8017cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		TFT_DrawChar(X+2, Y, 'c');
 8017ce2:	1ca7      	adds	r7, r4, #2
 8017ce4:	b2bf      	uxth	r7, r7
 8017ce6:	2263      	movs	r2, #99	; 0x63
 8017ce8:	4629      	mov	r1, r5
 8017cea:	4638      	mov	r0, r7
 8017cec:	f004 ff5a 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+9, Y, 'd');
 8017cf0:	f104 0009 	add.w	r0, r4, #9
 8017cf4:	2264      	movs	r2, #100	; 0x64
 8017cf6:	4629      	mov	r1, r5
 8017cf8:	b280      	uxth	r0, r0
 8017cfa:	f004 ff53 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+2, Y+17, 'm');
 8017cfe:	226d      	movs	r2, #109	; 0x6d
 8017d00:	fa1f f189 	uxth.w	r1, r9
 8017d04:	4638      	mov	r0, r7
 8017d06:	f004 ff4d 	bl	801cba4 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 8017d0a:	4808      	ldr	r0, [pc, #32]	; (8017d2c <GUI_TextEn_cd_m2+0xdc>)
 8017d0c:	f004 fe80 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(X+12, Y+16, '2');	
 8017d10:	f104 000c 	add.w	r0, r4, #12
 8017d14:	2232      	movs	r2, #50	; 0x32
 8017d16:	fa1f f188 	uxth.w	r1, r8
 8017d1a:	b280      	uxth	r0, r0
 8017d1c:	f004 ff42 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 8017d20:	b2b3      	uxth	r3, r6
 8017d22:	f104 0213 	add.w	r2, r4, #19
 8017d26:	e7d1      	b.n	8017ccc <GUI_TextEn_cd_m2+0x7c>
 8017d28:	20000220 	.word	0x20000220
 8017d2c:	20000210 	.word	0x20000210

08017d30 <GUI_TextEn_Green>:
	TFT_DrawChar(X+23, Y+16, '2');

  TFT_DrawLine(X, Y+14, X+30, Y+14, TFT_White);	
}
void GUI_TextEn_Green(uint16_t X, uint16_t Y)
{
 8017d30:	b538      	push	{r3, r4, r5, lr}
 8017d32:	4605      	mov	r5, r0
 8017d34:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 8017d36:	4815      	ldr	r0, [pc, #84]	; (8017d8c <GUI_TextEn_Green+0x5c>)
 8017d38:	f004 fe6a 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'G');
 8017d3c:	4621      	mov	r1, r4
 8017d3e:	2247      	movs	r2, #71	; 0x47
 8017d40:	4628      	mov	r0, r5
 8017d42:	f004 ff2f 	bl	801cba4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+15, Y+2, 'r');
 8017d46:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 8017d48:	4811      	ldr	r0, [pc, #68]	; (8017d90 <GUI_TextEn_Green+0x60>)
 8017d4a:	f004 fe61 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'r');
 8017d4e:	b2a4      	uxth	r4, r4
 8017d50:	f105 000f 	add.w	r0, r5, #15
 8017d54:	4621      	mov	r1, r4
 8017d56:	2272      	movs	r2, #114	; 0x72
 8017d58:	b280      	uxth	r0, r0
 8017d5a:	f004 ff23 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+26, Y+2, 'e');
 8017d5e:	f105 001a 	add.w	r0, r5, #26
 8017d62:	4621      	mov	r1, r4
 8017d64:	2265      	movs	r2, #101	; 0x65
 8017d66:	b280      	uxth	r0, r0
 8017d68:	f004 ff1c 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+38, Y+2, 'e');
 8017d6c:	f105 0026 	add.w	r0, r5, #38	; 0x26
 8017d70:	4621      	mov	r1, r4
 8017d72:	2265      	movs	r2, #101	; 0x65
 8017d74:	b280      	uxth	r0, r0
 8017d76:	f004 ff15 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+50, Y+2, 'n');
 8017d7a:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8017d7e:	4621      	mov	r1, r4
 8017d80:	226e      	movs	r2, #110	; 0x6e
 8017d82:	b280      	uxth	r0, r0
}
 8017d84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+50, Y+2, 'n');
 8017d88:	f004 bf0c 	b.w	801cba4 <TFT_DrawChar>
 8017d8c:	200001b0 	.word	0x200001b0
 8017d90:	200001c0 	.word	0x200001c0

08017d94 <GUI_TextEn_Blue>:
void GUI_TextEn_Blue(uint16_t X, uint16_t Y)
{
 8017d94:	b538      	push	{r3, r4, r5, lr}
 8017d96:	4605      	mov	r5, r0
 8017d98:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 8017d9a:	4812      	ldr	r0, [pc, #72]	; (8017de4 <GUI_TextEn_Blue+0x50>)
 8017d9c:	f004 fe38 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'B');
 8017da0:	4621      	mov	r1, r4
 8017da2:	2242      	movs	r2, #66	; 0x42
 8017da4:	4628      	mov	r0, r5
 8017da6:	f004 fefd 	bl	801cba4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small_A);
		TFT_DrawChar(X+15, Y+2, 'l');
 8017daa:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small_A);
 8017dac:	480e      	ldr	r0, [pc, #56]	; (8017de8 <GUI_TextEn_Blue+0x54>)
 8017dae:	f004 fe2f 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'l');
 8017db2:	b2a4      	uxth	r4, r4
 8017db4:	f105 000f 	add.w	r0, r5, #15
 8017db8:	4621      	mov	r1, r4
 8017dba:	226c      	movs	r2, #108	; 0x6c
 8017dbc:	b280      	uxth	r0, r0
 8017dbe:	f004 fef1 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+20, Y+2, 'u');
 8017dc2:	f105 0014 	add.w	r0, r5, #20
 8017dc6:	4621      	mov	r1, r4
 8017dc8:	2275      	movs	r2, #117	; 0x75
 8017dca:	b280      	uxth	r0, r0
 8017dcc:	f004 feea 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+33, Y+2, 'e');
 8017dd0:	f105 0021 	add.w	r0, r5, #33	; 0x21
 8017dd4:	4621      	mov	r1, r4
 8017dd6:	2265      	movs	r2, #101	; 0x65
 8017dd8:	b280      	uxth	r0, r0
}
 8017dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+33, Y+2, 'e');
 8017dde:	f004 bee1 	b.w	801cba4 <TFT_DrawChar>
 8017de2:	bf00      	nop
 8017de4:	200001b0 	.word	0x200001b0
 8017de8:	200001c8 	.word	0x200001c8

08017dec <GUI_TextEn_Red>:
void GUI_TextEn_Red(uint16_t X, uint16_t Y)
{
 8017dec:	b538      	push	{r3, r4, r5, lr}
 8017dee:	4605      	mov	r5, r0
 8017df0:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 8017df2:	480e      	ldr	r0, [pc, #56]	; (8017e2c <GUI_TextEn_Red+0x40>)
 8017df4:	f004 fe0c 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(X, Y, 'R');
 8017df8:	4621      	mov	r1, r4
 8017dfa:	2252      	movs	r2, #82	; 0x52
 8017dfc:	4628      	mov	r0, r5
 8017dfe:	f004 fed1 	bl	801cba4 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+16, Y+2, 'e');
 8017e02:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 8017e04:	480a      	ldr	r0, [pc, #40]	; (8017e30 <GUI_TextEn_Red+0x44>)
 8017e06:	f004 fe03 	bl	801ca10 <TFT_SetFont>
		TFT_DrawChar(X+16, Y+2, 'e');
 8017e0a:	b2a4      	uxth	r4, r4
 8017e0c:	f105 0010 	add.w	r0, r5, #16
 8017e10:	4621      	mov	r1, r4
 8017e12:	2265      	movs	r2, #101	; 0x65
 8017e14:	b280      	uxth	r0, r0
 8017e16:	f004 fec5 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(X+29, Y+2, 'd');
 8017e1a:	f105 001d 	add.w	r0, r5, #29
 8017e1e:	4621      	mov	r1, r4
 8017e20:	2264      	movs	r2, #100	; 0x64
 8017e22:	b280      	uxth	r0, r0
}
 8017e24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+29, Y+2, 'd');
 8017e28:	f004 bebc 	b.w	801cba4 <TFT_DrawChar>
 8017e2c:	200001b0 	.word	0x200001b0
 8017e30:	200001c0 	.word	0x200001c0

08017e34 <GUI_TextEn_WriteSD>:

void GUI_TextEn_WriteSD(uint16_t X, uint16_t Y)
{
 8017e34:	b538      	push	{r3, r4, r5, lr}
 8017e36:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8017e38:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8017e3c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8017e3e:	f004 fded 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017e42:	2063      	movs	r0, #99	; 0x63
 8017e44:	f004 fdf0 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017e48:	4815      	ldr	r0, [pc, #84]	; (8017ea0 <GUI_TextEn_WriteSD+0x6c>)
 8017e4a:	f004 fde1 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'W');
 8017e4e:	4621      	mov	r1, r4
 8017e50:	2257      	movs	r2, #87	; 0x57
 8017e52:	4628      	mov	r0, r5
 8017e54:	f004 fea6 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+17, Y+2, 'r');
 8017e58:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8017e5a:	4812      	ldr	r0, [pc, #72]	; (8017ea4 <GUI_TextEn_WriteSD+0x70>)
 8017e5c:	f004 fdd8 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'r');
 8017e60:	b2a4      	uxth	r4, r4
 8017e62:	f105 0011 	add.w	r0, r5, #17
 8017e66:	4621      	mov	r1, r4
 8017e68:	2272      	movs	r2, #114	; 0x72
 8017e6a:	b280      	uxth	r0, r0
 8017e6c:	f004 fe9a 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'i');
 8017e70:	f105 001c 	add.w	r0, r5, #28
 8017e74:	4621      	mov	r1, r4
 8017e76:	2269      	movs	r2, #105	; 0x69
 8017e78:	b280      	uxth	r0, r0
 8017e7a:	f004 fe93 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 't');
 8017e7e:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8017e82:	4621      	mov	r1, r4
 8017e84:	2274      	movs	r2, #116	; 0x74
 8017e86:	b280      	uxth	r0, r0
 8017e88:	f004 fe8c 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 'e');
 8017e8c:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8017e90:	4621      	mov	r1, r4
 8017e92:	2265      	movs	r2, #101	; 0x65
 8017e94:	b280      	uxth	r0, r0
}
 8017e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+53, Y+2, 'e');
 8017e9a:	f004 be83 	b.w	801cba4 <TFT_DrawChar>
 8017e9e:	bf00      	nop
 8017ea0:	200001b0 	.word	0x200001b0
 8017ea4:	200001c0 	.word	0x200001c0

08017ea8 <GUI_TextEn_Info_Callibration>:


void GUI_TextEn_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 8017ea8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017eaa:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 8017eac:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8017eb0:	2300      	movs	r3, #0
 8017eb2:	9300      	str	r3, [sp, #0]
 8017eb4:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8017eb8:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 8017eba:	f004 fdaf 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017ebe:	2063      	movs	r0, #99	; 0x63
 8017ec0:	f004 fdb2 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017ec4:	4834      	ldr	r0, [pc, #208]	; (8017f98 <GUI_TextEn_Info_Callibration+0xf0>)
	TFT_DrawChar(X+89, Y+2, 't');
	TFT_DrawChar(X+97, Y+2, 'i');
	TFT_DrawChar(X+108, Y+2, 'o');
	TFT_DrawChar(X+120, Y+2, 'n');
	
	sprintf (buffer, "%02u",  date);
 8017ec6:	4d35      	ldr	r5, [pc, #212]	; (8017f9c <GUI_TextEn_Info_Callibration+0xf4>)
	TFT_SetFont(&Font16EN_arch_big);
 8017ec8:	f004 fda2 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8017ecc:	2243      	movs	r2, #67	; 0x43
 8017ece:	2164      	movs	r1, #100	; 0x64
 8017ed0:	2046      	movs	r0, #70	; 0x46
 8017ed2:	f004 fe67 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017ed6:	4832      	ldr	r0, [pc, #200]	; (8017fa0 <GUI_TextEn_Info_Callibration+0xf8>)
 8017ed8:	f004 fd9a 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 8017edc:	2261      	movs	r2, #97	; 0x61
 8017ede:	2166      	movs	r1, #102	; 0x66
 8017ee0:	2056      	movs	r0, #86	; 0x56
 8017ee2:	f004 fe5f 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'l');
 8017ee6:	226c      	movs	r2, #108	; 0x6c
 8017ee8:	2166      	movs	r1, #102	; 0x66
 8017eea:	2063      	movs	r0, #99	; 0x63
 8017eec:	f004 fe5a 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+38, Y+2, 'i');
 8017ef0:	2269      	movs	r2, #105	; 0x69
 8017ef2:	2166      	movs	r1, #102	; 0x66
 8017ef4:	206c      	movs	r0, #108	; 0x6c
 8017ef6:	f004 fe55 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+2, 'b');
 8017efa:	2262      	movs	r2, #98	; 0x62
 8017efc:	2166      	movs	r1, #102	; 0x66
 8017efe:	2078      	movs	r0, #120	; 0x78
 8017f00:	f004 fe50 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y+2, 'r');
 8017f04:	2272      	movs	r2, #114	; 0x72
 8017f06:	2166      	movs	r1, #102	; 0x66
 8017f08:	2085      	movs	r0, #133	; 0x85
 8017f0a:	f004 fe4b 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'a');
 8017f0e:	2261      	movs	r2, #97	; 0x61
 8017f10:	2166      	movs	r1, #102	; 0x66
 8017f12:	2092      	movs	r0, #146	; 0x92
 8017f14:	f004 fe46 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 't');
 8017f18:	2274      	movs	r2, #116	; 0x74
 8017f1a:	2166      	movs	r1, #102	; 0x66
 8017f1c:	209f      	movs	r0, #159	; 0x9f
 8017f1e:	f004 fe41 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+97, Y+2, 'i');
 8017f22:	2269      	movs	r2, #105	; 0x69
 8017f24:	2166      	movs	r1, #102	; 0x66
 8017f26:	20a7      	movs	r0, #167	; 0xa7
 8017f28:	f004 fe3c 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+108, Y+2, 'o');
 8017f2c:	226f      	movs	r2, #111	; 0x6f
 8017f2e:	2166      	movs	r1, #102	; 0x66
 8017f30:	20b2      	movs	r0, #178	; 0xb2
 8017f32:	f004 fe37 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y+2, 'n');
 8017f36:	226e      	movs	r2, #110	; 0x6e
 8017f38:	2166      	movs	r1, #102	; 0x66
 8017f3a:	20be      	movs	r0, #190	; 0xbe
 8017f3c:	f004 fe32 	bl	801cba4 <TFT_DrawChar>
	sprintf (buffer, "%02u",  date);
 8017f40:	4622      	mov	r2, r4
 8017f42:	4629      	mov	r1, r5
 8017f44:	4668      	mov	r0, sp
 8017f46:	f008 f9a5 	bl	8020294 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 8017f4a:	4816      	ldr	r0, [pc, #88]	; (8017fa4 <GUI_TextEn_Info_Callibration+0xfc>)
 8017f4c:	f004 fd60 	bl	801ca10 <TFT_SetFont>
	buffer[2] = '.';
 8017f50:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017f52:	2303      	movs	r3, #3
 8017f54:	466a      	mov	r2, sp
 8017f56:	2182      	movs	r1, #130	; 0x82
 8017f58:	201e      	movs	r0, #30
	buffer[2] = '.';
 8017f5a:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017f5e:	f004 fe79 	bl	801cc54 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 8017f62:	4632      	mov	r2, r6
 8017f64:	4629      	mov	r1, r5
 8017f66:	4668      	mov	r0, sp
 8017f68:	f008 f994 	bl	8020294 <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017f6c:	2303      	movs	r3, #3
 8017f6e:	466a      	mov	r2, sp
 8017f70:	2182      	movs	r1, #130	; 0x82
 8017f72:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 8017f74:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017f78:	f004 fe6c 	bl	801cc54 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 8017f7c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8017f80:	4909      	ldr	r1, [pc, #36]	; (8017fa8 <GUI_TextEn_Info_Callibration+0x100>)
 8017f82:	4668      	mov	r0, sp
 8017f84:	f008 f986 	bl	8020294 <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8017f88:	2303      	movs	r3, #3
 8017f8a:	466a      	mov	r2, sp
 8017f8c:	2182      	movs	r1, #130	; 0x82
 8017f8e:	209b      	movs	r0, #155	; 0x9b
 8017f90:	f004 fe60 	bl	801cc54 <TFT_DisplayString>
}
 8017f94:	b002      	add	sp, #8
 8017f96:	bd70      	pop	{r4, r5, r6, pc}
 8017f98:	200001b0 	.word	0x200001b0
 8017f9c:	08031d74 	.word	0x08031d74
 8017fa0:	200001c0 	.word	0x200001c0
 8017fa4:	200001f0 	.word	0x200001f0
 8017fa8:	08031d79 	.word	0x08031d79

08017fac <GUI_TextEn_Info_Serial>:

void GUI_TextEn_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 8017fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017fae:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 8017fb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8017fb4:	2300      	movs	r3, #0
 8017fb6:	9300      	str	r3, [sp, #0]
 8017fb8:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8017fbc:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 8017fbe:	f004 fd2d 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017fc2:	2063      	movs	r0, #99	; 0x63
 8017fc4:	f004 fd30 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8017fc8:	482e      	ldr	r0, [pc, #184]	; (8018084 <GUI_TextEn_Info_Serial+0xd8>)
 8017fca:	f004 fd21 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'S');
 8017fce:	2253      	movs	r2, #83	; 0x53
 8017fd0:	21c8      	movs	r1, #200	; 0xc8
 8017fd2:	203c      	movs	r0, #60	; 0x3c
 8017fd4:	f004 fde6 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8017fd8:	482b      	ldr	r0, [pc, #172]	; (8018088 <GUI_TextEn_Info_Serial+0xdc>)
 8017fda:	f004 fd19 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'e');
 8017fde:	2265      	movs	r2, #101	; 0x65
 8017fe0:	21ca      	movs	r1, #202	; 0xca
 8017fe2:	204d      	movs	r0, #77	; 0x4d
 8017fe4:	f004 fdde 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'r');
 8017fe8:	2272      	movs	r2, #114	; 0x72
 8017fea:	21ca      	movs	r1, #202	; 0xca
 8017fec:	205a      	movs	r0, #90	; 0x5a
 8017fee:	f004 fdd9 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'i');
 8017ff2:	2269      	movs	r2, #105	; 0x69
 8017ff4:	21ca      	movs	r1, #202	; 0xca
 8017ff6:	2066      	movs	r0, #102	; 0x66
 8017ff8:	f004 fdd4 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+54, Y+2, 'a');
 8017ffc:	2261      	movs	r2, #97	; 0x61
 8017ffe:	21ca      	movs	r1, #202	; 0xca
 8018000:	2072      	movs	r0, #114	; 0x72
 8018002:	f004 fdcf 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+67, Y+2, 'l');
 8018006:	226c      	movs	r2, #108	; 0x6c
 8018008:	21ca      	movs	r1, #202	; 0xca
 801800a:	207f      	movs	r0, #127	; 0x7f
 801800c:	f004 fdca 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'n');
 8018010:	226e      	movs	r2, #110	; 0x6e
 8018012:	21ca      	movs	r1, #202	; 0xca
 8018014:	2095      	movs	r0, #149	; 0x95
 8018016:	f004 fdc5 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+102, Y+2, 'u');
 801801a:	2275      	movs	r2, #117	; 0x75
 801801c:	21ca      	movs	r1, #202	; 0xca
 801801e:	20a2      	movs	r0, #162	; 0xa2
 8018020:	f004 fdc0 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+115, Y+2, 'm');
 8018024:	226d      	movs	r2, #109	; 0x6d
 8018026:	21ca      	movs	r1, #202	; 0xca
 8018028:	20af      	movs	r0, #175	; 0xaf
 801802a:	f004 fdbb 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+128, Y+2, 'b');
 801802e:	2262      	movs	r2, #98	; 0x62
 8018030:	21ca      	movs	r1, #202	; 0xca
 8018032:	20bc      	movs	r0, #188	; 0xbc
 8018034:	f004 fdb6 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+141, Y+2, 'e');
 8018038:	2265      	movs	r2, #101	; 0x65
 801803a:	21ca      	movs	r1, #202	; 0xca
 801803c:	20c9      	movs	r0, #201	; 0xc9
 801803e:	f004 fdb1 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+154, Y+2, 'r');
 8018042:	2272      	movs	r2, #114	; 0x72
 8018044:	21ca      	movs	r1, #202	; 0xca
 8018046:	20d6      	movs	r0, #214	; 0xd6
 8018048:	f004 fdac 	bl	801cba4 <TFT_DrawChar>

	
	sprintf (buffer, "%u",  Part);
 801804c:	462a      	mov	r2, r5
 801804e:	490f      	ldr	r1, [pc, #60]	; (801808c <GUI_TextEn_Info_Serial+0xe0>)
 8018050:	4668      	mov	r0, sp
 8018052:	f008 f91f 	bl	8020294 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 8018056:	480e      	ldr	r0, [pc, #56]	; (8018090 <GUI_TextEn_Info_Serial+0xe4>)
 8018058:	f004 fcda 	bl	801ca10 <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801805c:	2303      	movs	r3, #3
 801805e:	466a      	mov	r2, sp
 8018060:	21e6      	movs	r1, #230	; 0xe6
 8018062:	2028      	movs	r0, #40	; 0x28
 8018064:	f004 fdf6 	bl	801cc54 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 8018068:	4622      	mov	r2, r4
 801806a:	490a      	ldr	r1, [pc, #40]	; (8018094 <GUI_TextEn_Info_Serial+0xe8>)
 801806c:	4668      	mov	r0, sp
 801806e:	f008 f911 	bl	8020294 <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018072:	2303      	movs	r3, #3
 8018074:	466a      	mov	r2, sp
 8018076:	21e6      	movs	r1, #230	; 0xe6
 8018078:	2087      	movs	r0, #135	; 0x87
 801807a:	f004 fdeb 	bl	801cc54 <TFT_DisplayString>
}
 801807e:	b003      	add	sp, #12
 8018080:	bd30      	pop	{r4, r5, pc}
 8018082:	bf00      	nop
 8018084:	200001b0 	.word	0x200001b0
 8018088:	200001c0 	.word	0x200001c0
 801808c:	08031d7d 	.word	0x08031d7d
 8018090:	200001f0 	.word	0x200001f0
 8018094:	08031d80 	.word	0x08031d80

08018098 <GUI_TextEn_Info_Ver>:

void GUI_TextEn_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 8018098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 801809a:	2300      	movs	r3, #0
	
	X = 20;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 801809c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 80180a0:	9302      	str	r3, [sp, #8]
 80180a2:	f88d 300c 	strb.w	r3, [sp, #12]
{
 80180a6:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 80180aa:	f004 fcb7 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80180ae:	2063      	movs	r0, #99	; 0x63
 80180b0:	f004 fcba 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80180b4:	482e      	ldr	r0, [pc, #184]	; (8018170 <GUI_TextEn_Info_Ver+0xd8>)
	TFT_DrawChar(X+55, Y+2, 'w');
	TFT_DrawChar(X+70, Y+2, 'a');
	TFT_DrawChar(X+86, Y+2, 'r');
	TFT_DrawChar(X+99, Y+2, 'e');
	
	TFT_SetFont(&Font16);
 80180b6:	4c2f      	ldr	r4, [pc, #188]	; (8018174 <GUI_TextEn_Info_Ver+0xdc>)
	TFT_SetFont(&Font16EN_arch_big);
 80180b8:	f004 fcaa 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, Y, 'F');
 80180bc:	2246      	movs	r2, #70	; 0x46
 80180be:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80180c2:	2014      	movs	r0, #20
 80180c4:	f004 fd6e 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 80180c8:	482b      	ldr	r0, [pc, #172]	; (8018178 <GUI_TextEn_Info_Ver+0xe0>)
 80180ca:	f004 fca1 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'i');
 80180ce:	2269      	movs	r2, #105	; 0x69
 80180d0:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80180d4:	2024      	movs	r0, #36	; 0x24
 80180d6:	f004 fd65 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'r');
 80180da:	2272      	movs	r2, #114	; 0x72
 80180dc:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80180e0:	202f      	movs	r0, #47	; 0x2f
 80180e2:	f004 fd5f 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y+2, 'm');
 80180e6:	226d      	movs	r2, #109	; 0x6d
 80180e8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80180ec:	203c      	movs	r0, #60	; 0x3c
 80180ee:	f004 fd59 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+55, Y+2, 'w');
 80180f2:	2277      	movs	r2, #119	; 0x77
 80180f4:	f44f 71b0 	mov.w	r1, #352	; 0x160
 80180f8:	204b      	movs	r0, #75	; 0x4b
 80180fa:	f004 fd53 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'a');
 80180fe:	2261      	movs	r2, #97	; 0x61
 8018100:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8018104:	205a      	movs	r0, #90	; 0x5a
 8018106:	f004 fd4d 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+86, Y+2, 'r');
 801810a:	2272      	movs	r2, #114	; 0x72
 801810c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8018110:	206a      	movs	r0, #106	; 0x6a
 8018112:	f004 fd47 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 8018116:	2265      	movs	r2, #101	; 0x65
 8018118:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801811c:	2077      	movs	r0, #119	; 0x77
 801811e:	f004 fd41 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16);
 8018122:	4620      	mov	r0, r4
 8018124:	f004 fc74 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+152, Y, '.');
 8018128:	222e      	movs	r2, #46	; 0x2e
 801812a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801812e:	20ac      	movs	r0, #172	; 0xac
 8018130:	f004 fd38 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+142, Y, 'v');
 8018134:	2276      	movs	r2, #118	; 0x76
 8018136:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801813a:	20a2      	movs	r0, #162	; 0xa2
 801813c:	f004 fd32 	bl	801cba4 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 8018140:	ed9d 0a01 	vldr	s0, [sp, #4]
 8018144:	ee10 0a10 	vmov	r0, s0
 8018148:	f7e8 fa16 	bl	8000578 <__aeabi_f2d>
 801814c:	4602      	mov	r2, r0
 801814e:	460b      	mov	r3, r1
 8018150:	a802      	add	r0, sp, #8
 8018152:	490a      	ldr	r1, [pc, #40]	; (801817c <GUI_TextEn_Info_Ver+0xe4>)
 8018154:	f008 f89e 	bl	8020294 <sprintf>
	TFT_SetFont(&Font16);
 8018158:	4620      	mov	r0, r4
 801815a:	f004 fc59 	bl	801ca10 <TFT_SetFont>
	TFT_DisplayString(X+172, Y, (uint8_t *)buffer, LEFT_MODE);
 801815e:	2303      	movs	r3, #3
 8018160:	aa02      	add	r2, sp, #8
 8018162:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8018166:	20c0      	movs	r0, #192	; 0xc0
 8018168:	f004 fd74 	bl	801cc54 <TFT_DisplayString>
}
 801816c:	b004      	add	sp, #16
 801816e:	bd10      	pop	{r4, pc}
 8018170:	200001b0 	.word	0x200001b0
 8018174:	200001a8 	.word	0x200001a8
 8018178:	200001c0 	.word	0x200001c0
 801817c:	08031d65 	.word	0x08031d65

08018180 <GUI_TitleString_Name>:
#include "stdio.h"
#include "GUI_Text_Elements_RU.h"

void GUI_TitleString_Name(uint16_t X, uint16_t Y)
{
 8018180:	b538      	push	{r3, r4, r5, lr}
 8018182:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018184:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018188:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801818a:	f004 fc47 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 801818e:	2084      	movs	r0, #132	; 0x84
 8018190:	f004 fc4a 	bl	801ca28 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8018194:	4825      	ldr	r0, [pc, #148]	; (801822c <GUI_TitleString_Name+0xac>)
 8018196:	f004 fc3b 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'T');
 801819a:	4629      	mov	r1, r5
 801819c:	4620      	mov	r0, r4
 801819e:	2254      	movs	r2, #84	; 0x54
 80181a0:	f004 fd00 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+15, 	Y, 'K');
 80181a4:	f104 000f 	add.w	r0, r4, #15
 80181a8:	4629      	mov	r1, r5
 80181aa:	224b      	movs	r2, #75	; 0x4b
 80181ac:	b280      	uxth	r0, r0
 80181ae:	f004 fcf9 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+30, 	Y, 'A');
 80181b2:	f104 001e 	add.w	r0, r4, #30
 80181b6:	4629      	mov	r1, r5
 80181b8:	2241      	movs	r2, #65	; 0x41
 80181ba:	b280      	uxth	r0, r0
 80181bc:	f004 fcf2 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+45, 	Y, '-');
 80181c0:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 80181c4:	4629      	mov	r1, r5
 80181c6:	222d      	movs	r2, #45	; 0x2d
 80181c8:	b280      	uxth	r0, r0
 80181ca:	f004 fceb 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+60, 	Y, 'S');
 80181ce:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80181d2:	4629      	mov	r1, r5
 80181d4:	2253      	movs	r2, #83	; 0x53
 80181d6:	b280      	uxth	r0, r0
 80181d8:	f004 fce4 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 80181dc:	4814      	ldr	r0, [pc, #80]	; (8018230 <GUI_TitleString_Name+0xb0>)
 80181de:	f004 fc17 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+75, 	Y, 'p');
 80181e2:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 80181e6:	4629      	mov	r1, r5
 80181e8:	2270      	movs	r2, #112	; 0x70
 80181ea:	b280      	uxth	r0, r0
 80181ec:	f004 fcda 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+88, 	Y, 'e');
 80181f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80181f4:	4629      	mov	r1, r5
 80181f6:	2265      	movs	r2, #101	; 0x65
 80181f8:	b280      	uxth	r0, r0
 80181fa:	f004 fcd3 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+99, 	Y, 'c');
 80181fe:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8018202:	4629      	mov	r1, r5
 8018204:	2263      	movs	r2, #99	; 0x63
 8018206:	b280      	uxth	r0, r0
 8018208:	f004 fccc 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+109, 	Y, 't');
 801820c:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8018210:	4629      	mov	r1, r5
 8018212:	2274      	movs	r2, #116	; 0x74
 8018214:	b280      	uxth	r0, r0
 8018216:	f004 fcc5 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+120, 	Y, 'r');
 801821a:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801821e:	4629      	mov	r1, r5
 8018220:	2272      	movs	r2, #114	; 0x72
 8018222:	b280      	uxth	r0, r0
}
 8018224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+120, 	Y, 'r');
 8018228:	f004 bcbc 	b.w	801cba4 <TFT_DrawChar>
 801822c:	200001b0 	.word	0x200001b0
 8018230:	200001c0 	.word	0x200001c0

08018234 <GUI_TitleString_Version>:

void GUI_TitleString_Version(uint16_t X, uint16_t Y, float Version)
{
 8018234:	b530      	push	{r4, r5, lr}
 8018236:	b085      	sub	sp, #20
	char buffer[5] = {0};
 8018238:	2300      	movs	r3, #0
{
 801823a:	4604      	mov	r4, r0
	
	TFT_SetTextColor(TFT_White);
 801823c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018240:	9302      	str	r3, [sp, #8]
 8018242:	f88d 300c 	strb.w	r3, [sp, #12]
{
 8018246:	ed8d 0a01 	vstr	s0, [sp, #4]
 801824a:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801824c:	f004 fbe6 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 8018250:	2084      	movs	r0, #132	; 0x84
 8018252:	f004 fbe9 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
 8018256:	4815      	ldr	r0, [pc, #84]	; (80182ac <GUI_TitleString_Version+0x78>)
 8018258:	f004 fbda 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'v');
 801825c:	4629      	mov	r1, r5
 801825e:	2276      	movs	r2, #118	; 0x76
 8018260:	4620      	mov	r0, r4
 8018262:	f004 fc9f 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8018266:	4812      	ldr	r0, [pc, #72]	; (80182b0 <GUI_TitleString_Version+0x7c>)
 8018268:	f004 fbd2 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+13, 		Y, '.');
 801826c:	f104 000d 	add.w	r0, r4, #13
 8018270:	222e      	movs	r2, #46	; 0x2e
 8018272:	4629      	mov	r1, r5
 8018274:	b280      	uxth	r0, r0
 8018276:	f004 fc95 	bl	801cba4 <TFT_DrawChar>
	sprintf (buffer, "%.1f",  Version);
 801827a:	ed9d 0a01 	vldr	s0, [sp, #4]
 801827e:	ee10 0a10 	vmov	r0, s0
 8018282:	f7e8 f979 	bl	8000578 <__aeabi_f2d>
 8018286:	4602      	mov	r2, r0
 8018288:	460b      	mov	r3, r1
 801828a:	a802      	add	r0, sp, #8
 801828c:	4909      	ldr	r1, [pc, #36]	; (80182b4 <GUI_TitleString_Version+0x80>)
 801828e:	f008 f801 	bl	8020294 <sprintf>
	TFT_SetFont(&Font16);
 8018292:	4809      	ldr	r0, [pc, #36]	; (80182b8 <GUI_TitleString_Version+0x84>)
 8018294:	f004 fbbc 	bl	801ca10 <TFT_SetFont>
	TFT_DisplayString(X+24, Y, (uint8_t *)buffer, LEFT_MODE);
 8018298:	f104 0018 	add.w	r0, r4, #24
 801829c:	2303      	movs	r3, #3
 801829e:	aa02      	add	r2, sp, #8
 80182a0:	4629      	mov	r1, r5
 80182a2:	b280      	uxth	r0, r0
 80182a4:	f004 fcd6 	bl	801cc54 <TFT_DisplayString>
}
 80182a8:	b005      	add	sp, #20
 80182aa:	bd30      	pop	{r4, r5, pc}
 80182ac:	200001c0 	.word	0x200001c0
 80182b0:	200001b0 	.word	0x200001b0
 80182b4:	08031d65 	.word	0x08031d65
 80182b8:	200001a8 	.word	0x200001a8

080182bc <GUI_TextRu_Language>:

void GUI_TextRu_Language(uint16_t X, uint16_t Y)
{
 80182bc:	b538      	push	{r3, r4, r5, lr}
 80182be:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80182c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80182c4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80182c6:	f004 fba9 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80182ca:	2063      	movs	r0, #99	; 0x63
 80182cc:	f004 fbac 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80182d0:	4811      	ldr	r0, [pc, #68]	; (8018318 <GUI_TextRu_Language+0x5c>)
 80182d2:	f004 fb9d 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 80182d6:	4621      	mov	r1, r4
 80182d8:	22af      	movs	r2, #175	; 0xaf
 80182da:	4628      	mov	r0, r5
 80182dc:	f004 fbaa 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'з');
 80182e0:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 80182e2:	480e      	ldr	r0, [pc, #56]	; (801831c <GUI_TextRu_Language+0x60>)
 80182e4:	f004 fb94 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'з');
 80182e8:	b2a4      	uxth	r4, r4
 80182ea:	f105 000f 	add.w	r0, r5, #15
 80182ee:	4621      	mov	r1, r4
 80182f0:	22b7      	movs	r2, #183	; 0xb7
 80182f2:	b280      	uxth	r0, r0
 80182f4:	f004 fb9e 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ы');
 80182f8:	f105 001c 	add.w	r0, r5, #28
 80182fc:	4621      	mov	r1, r4
 80182fe:	228b      	movs	r2, #139	; 0x8b
 8018300:	b280      	uxth	r0, r0
 8018302:	f004 fb97 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'к');
 8018306:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801830a:	4621      	mov	r1, r4
 801830c:	22ba      	movs	r2, #186	; 0xba
 801830e:	b280      	uxth	r0, r0
}
 8018310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+41, Y+5, 'к');
 8018314:	f004 bb8e 	b.w	801ca34 <TFT_DrawCharRus>
 8018318:	200001d0 	.word	0x200001d0
 801831c:	200001d8 	.word	0x200001d8

08018320 <GUI_TextRu_Russian>:

void GUI_TextRu_Russian(uint16_t X, uint16_t Y)
{
 8018320:	b538      	push	{r3, r4, r5, lr}
 8018322:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018324:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018328:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801832a:	f004 fb77 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801832e:	2063      	movs	r0, #99	; 0x63
 8018330:	f004 fb7a 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018334:	481c      	ldr	r0, [pc, #112]	; (80183a8 <GUI_TextRu_Russian+0x88>)
 8018336:	f004 fb6b 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 801833a:	4621      	mov	r1, r4
 801833c:	22a0      	movs	r2, #160	; 0xa0
 801833e:	4628      	mov	r0, r5
 8018340:	f004 fb78 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'у');
 8018344:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018346:	4819      	ldr	r0, [pc, #100]	; (80183ac <GUI_TextRu_Russian+0x8c>)
	TFT_DrawCharRus(X+15, Y+5, 'у');
 8018348:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801834a:	f004 fb61 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'у');
 801834e:	f105 000f 	add.w	r0, r5, #15
 8018352:	4621      	mov	r1, r4
 8018354:	2283      	movs	r2, #131	; 0x83
 8018356:	b280      	uxth	r0, r0
 8018358:	f004 fb6c 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'с');
 801835c:	f105 001c 	add.w	r0, r5, #28
 8018360:	4621      	mov	r1, r4
 8018362:	2281      	movs	r2, #129	; 0x81
 8018364:	b280      	uxth	r0, r0
 8018366:	f004 fb65 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'с');
 801836a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801836e:	4621      	mov	r1, r4
 8018370:	2281      	movs	r2, #129	; 0x81
 8018372:	b280      	uxth	r0, r0
 8018374:	f004 fb5e 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'к');
 8018378:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801837c:	4621      	mov	r1, r4
 801837e:	22ba      	movs	r2, #186	; 0xba
 8018380:	b280      	uxth	r0, r0
 8018382:	f004 fb57 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+64, Y+5, 'и');
 8018386:	f105 0040 	add.w	r0, r5, #64	; 0x40
 801838a:	4621      	mov	r1, r4
 801838c:	22b8      	movs	r2, #184	; 0xb8
 801838e:	b280      	uxth	r0, r0
 8018390:	f004 fb50 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+77, Y+5, 'й');
 8018394:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 8018398:	4621      	mov	r1, r4
 801839a:	22b9      	movs	r2, #185	; 0xb9
 801839c:	b280      	uxth	r0, r0
}
 801839e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+77, Y+5, 'й');
 80183a2:	f004 bb47 	b.w	801ca34 <TFT_DrawCharRus>
 80183a6:	bf00      	nop
 80183a8:	200001d0 	.word	0x200001d0
 80183ac:	200001d8 	.word	0x200001d8

080183b0 <GUI_TextRu_Info>:



void GUI_TextRu_Info(uint16_t X, uint16_t Y)
{
 80183b0:	b538      	push	{r3, r4, r5, lr}
 80183b2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80183b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80183b8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80183ba:	f004 fb2f 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80183be:	2063      	movs	r0, #99	; 0x63
 80183c0:	f004 fb32 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80183c4:	4849      	ldr	r0, [pc, #292]	; (80184ec <GUI_TextRu_Info+0x13c>)
 80183c6:	f004 fb23 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'И');
 80183ca:	4621      	mov	r1, r4
 80183cc:	2298      	movs	r2, #152	; 0x98
 80183ce:	4628      	mov	r0, r5
 80183d0:	f004 fb30 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'н');
 80183d4:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 80183d6:	4846      	ldr	r0, [pc, #280]	; (80184f0 <GUI_TextRu_Info+0x140>)
	TFT_DrawCharRus(X+15, Y+5, 'н');
 80183d8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 80183da:	f004 fb19 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'н');
 80183de:	f105 000f 	add.w	r0, r5, #15
 80183e2:	4621      	mov	r1, r4
 80183e4:	22bd      	movs	r2, #189	; 0xbd
 80183e6:	b280      	uxth	r0, r0
 80183e8:	f004 fb24 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ф');
 80183ec:	f105 001c 	add.w	r0, r5, #28
 80183f0:	4621      	mov	r1, r4
 80183f2:	2284      	movs	r2, #132	; 0x84
 80183f4:	b280      	uxth	r0, r0
 80183f6:	f004 fb1d 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'о');
 80183fa:	f105 0029 	add.w	r0, r5, #41	; 0x29
 80183fe:	4621      	mov	r1, r4
 8018400:	22be      	movs	r2, #190	; 0xbe
 8018402:	b280      	uxth	r0, r0
 8018404:	f004 fb16 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'р');
 8018408:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801840c:	4621      	mov	r1, r4
 801840e:	2280      	movs	r2, #128	; 0x80
 8018410:	b280      	uxth	r0, r0
 8018412:	f004 fb0f 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'м');
 8018416:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801841a:	4621      	mov	r1, r4
 801841c:	22bc      	movs	r2, #188	; 0xbc
 801841e:	b280      	uxth	r0, r0
 8018420:	f004 fb08 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+78, Y+5, 'а');
 8018424:	f105 004e 	add.w	r0, r5, #78	; 0x4e
 8018428:	4621      	mov	r1, r4
 801842a:	22b0      	movs	r2, #176	; 0xb0
 801842c:	b280      	uxth	r0, r0
 801842e:	f004 fb01 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+90, Y+5, 'ц');
 8018432:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8018436:	4621      	mov	r1, r4
 8018438:	2286      	movs	r2, #134	; 0x86
 801843a:	b280      	uxth	r0, r0
 801843c:	f004 fafa 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+102, Y+5, 'и');
 8018440:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8018444:	4621      	mov	r1, r4
 8018446:	22b8      	movs	r2, #184	; 0xb8
 8018448:	b280      	uxth	r0, r0
 801844a:	f004 faf3 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+114, Y+5, 'я');
 801844e:	f105 0072 	add.w	r0, r5, #114	; 0x72
 8018452:	4621      	mov	r1, r4
 8018454:	228f      	movs	r2, #143	; 0x8f
 8018456:	b280      	uxth	r0, r0
 8018458:	f004 faec 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+126, Y+5, 0x01);
 801845c:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 8018460:	4621      	mov	r1, r4
 8018462:	2201      	movs	r2, #1
 8018464:	b280      	uxth	r0, r0
 8018466:	f004 fae5 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+138, Y+5, 'о');
 801846a:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 801846e:	4621      	mov	r1, r4
 8018470:	22be      	movs	r2, #190	; 0xbe
 8018472:	b280      	uxth	r0, r0
 8018474:	f004 fade 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+150, Y+5, 0x01);
 8018478:	f105 0096 	add.w	r0, r5, #150	; 0x96
 801847c:	4621      	mov	r1, r4
 801847e:	2201      	movs	r2, #1
 8018480:	b280      	uxth	r0, r0
 8018482:	f004 fad7 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+5, 'п');
 8018486:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 801848a:	4621      	mov	r1, r4
 801848c:	22bf      	movs	r2, #191	; 0xbf
 801848e:	b280      	uxth	r0, r0
 8018490:	f004 fad0 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+174, Y+5, 'р');
 8018494:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 8018498:	4621      	mov	r1, r4
 801849a:	2280      	movs	r2, #128	; 0x80
 801849c:	b280      	uxth	r0, r0
 801849e:	f004 fac9 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+186, Y+5, 'и');
 80184a2:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 80184a6:	4621      	mov	r1, r4
 80184a8:	22b8      	movs	r2, #184	; 0xb8
 80184aa:	b280      	uxth	r0, r0
 80184ac:	f004 fac2 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+198, Y+5, 'б');
 80184b0:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 80184b4:	4621      	mov	r1, r4
 80184b6:	22b1      	movs	r2, #177	; 0xb1
 80184b8:	b280      	uxth	r0, r0
 80184ba:	f004 fabb 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+210, Y+5, 'о');
 80184be:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 80184c2:	4621      	mov	r1, r4
 80184c4:	22be      	movs	r2, #190	; 0xbe
 80184c6:	b280      	uxth	r0, r0
 80184c8:	f004 fab4 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+222, Y+5, 'р');
 80184cc:	f105 00de 	add.w	r0, r5, #222	; 0xde
 80184d0:	4621      	mov	r1, r4
 80184d2:	2280      	movs	r2, #128	; 0x80
 80184d4:	b280      	uxth	r0, r0
 80184d6:	f004 faad 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+234, Y+5, 'е');
 80184da:	f105 00ea 	add.w	r0, r5, #234	; 0xea
 80184de:	4621      	mov	r1, r4
 80184e0:	22b5      	movs	r2, #181	; 0xb5
 80184e2:	b280      	uxth	r0, r0
}
 80184e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+234, Y+5, 'е');
 80184e8:	f004 baa4 	b.w	801ca34 <TFT_DrawCharRus>
 80184ec:	200001d0 	.word	0x200001d0
 80184f0:	200001d8 	.word	0x200001d8

080184f4 <GUI_TextRu_Mode>:

void GUI_TextRu_Mode(uint16_t X, uint16_t Y)
{
 80184f4:	b538      	push	{r3, r4, r5, lr}
 80184f6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80184f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80184fc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80184fe:	f004 fa8d 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018502:	2063      	movs	r0, #99	; 0x63
 8018504:	f004 fa90 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018508:	4815      	ldr	r0, [pc, #84]	; (8018560 <GUI_TextRu_Mode+0x6c>)
 801850a:	f004 fa81 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 801850e:	4621      	mov	r1, r4
 8018510:	22a0      	movs	r2, #160	; 0xa0
 8018512:	4628      	mov	r0, r5
 8018514:	f004 fa8e 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'е');
 8018518:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801851a:	4812      	ldr	r0, [pc, #72]	; (8018564 <GUI_TextRu_Mode+0x70>)
 801851c:	f004 fa78 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'е');
 8018520:	b2a4      	uxth	r4, r4
 8018522:	f105 000f 	add.w	r0, r5, #15
 8018526:	4621      	mov	r1, r4
 8018528:	22b5      	movs	r2, #181	; 0xb5
 801852a:	b280      	uxth	r0, r0
 801852c:	f004 fa82 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ж');
 8018530:	f105 001c 	add.w	r0, r5, #28
 8018534:	4621      	mov	r1, r4
 8018536:	22b6      	movs	r2, #182	; 0xb6
 8018538:	b280      	uxth	r0, r0
 801853a:	f004 fa7b 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 801853e:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8018542:	4621      	mov	r1, r4
 8018544:	22b8      	movs	r2, #184	; 0xb8
 8018546:	b280      	uxth	r0, r0
 8018548:	f004 fa74 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+54, Y+5, 'м');
 801854c:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8018550:	4621      	mov	r1, r4
 8018552:	22bc      	movs	r2, #188	; 0xbc
 8018554:	b280      	uxth	r0, r0
}
 8018556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+54, Y+5, 'м');
 801855a:	f004 ba6b 	b.w	801ca34 <TFT_DrawCharRus>
 801855e:	bf00      	nop
 8018560:	200001d0 	.word	0x200001d0
 8018564:	200001d8 	.word	0x200001d8

08018568 <GUI_TextRu_Illuminance>:

void GUI_TextRu_Illuminance(uint16_t X, uint16_t Y)
{
 8018568:	b538      	push	{r3, r4, r5, lr}
 801856a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801856c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018570:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018572:	f004 fa53 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018576:	2063      	movs	r0, #99	; 0x63
 8018578:	f004 fa56 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801857c:	482d      	ldr	r0, [pc, #180]	; (8018634 <GUI_TextRu_Illuminance+0xcc>)
 801857e:	f004 fa47 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 8018582:	4621      	mov	r1, r4
 8018584:	229e      	movs	r2, #158	; 0x9e
 8018586:	4628      	mov	r0, r5
 8018588:	f004 fa54 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'с');
 801858c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801858e:	482a      	ldr	r0, [pc, #168]	; (8018638 <GUI_TextRu_Illuminance+0xd0>)
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8018590:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8018592:	f004 fa3d 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'с');
 8018596:	f105 000f 	add.w	r0, r5, #15
 801859a:	4621      	mov	r1, r4
 801859c:	2281      	movs	r2, #129	; 0x81
 801859e:	b280      	uxth	r0, r0
 80185a0:	f004 fa48 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+26, Y+5, 'в');
 80185a4:	f105 001a 	add.w	r0, r5, #26
 80185a8:	4621      	mov	r1, r4
 80185aa:	22b2      	movs	r2, #178	; 0xb2
 80185ac:	b280      	uxth	r0, r0
 80185ae:	f004 fa41 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+38, Y+5, 'е');
 80185b2:	f105 0026 	add.w	r0, r5, #38	; 0x26
 80185b6:	4621      	mov	r1, r4
 80185b8:	22b5      	movs	r2, #181	; 0xb5
 80185ba:	b280      	uxth	r0, r0
 80185bc:	f004 fa3a 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+50, Y+5, 'щ');
 80185c0:	f105 0032 	add.w	r0, r5, #50	; 0x32
 80185c4:	4621      	mov	r1, r4
 80185c6:	2289      	movs	r2, #137	; 0x89
 80185c8:	b280      	uxth	r0, r0
 80185ca:	f004 fa33 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+62, Y+5, 'е');
 80185ce:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 80185d2:	4621      	mov	r1, r4
 80185d4:	22b5      	movs	r2, #181	; 0xb5
 80185d6:	b280      	uxth	r0, r0
 80185d8:	f004 fa2c 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'н');
 80185dc:	f105 0049 	add.w	r0, r5, #73	; 0x49
 80185e0:	4621      	mov	r1, r4
 80185e2:	22bd      	movs	r2, #189	; 0xbd
 80185e4:	b280      	uxth	r0, r0
 80185e6:	f004 fa25 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'н');
 80185ea:	f105 0055 	add.w	r0, r5, #85	; 0x55
 80185ee:	4621      	mov	r1, r4
 80185f0:	22bd      	movs	r2, #189	; 0xbd
 80185f2:	b280      	uxth	r0, r0
 80185f4:	f004 fa1e 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 80185f8:	f105 0061 	add.w	r0, r5, #97	; 0x61
 80185fc:	4621      	mov	r1, r4
 80185fe:	22be      	movs	r2, #190	; 0xbe
 8018600:	b280      	uxth	r0, r0
 8018602:	f004 fa17 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 8018606:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 801860a:	4621      	mov	r1, r4
 801860c:	2281      	movs	r2, #129	; 0x81
 801860e:	b280      	uxth	r0, r0
 8018610:	f004 fa10 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+5, 'т');
 8018614:	f105 0076 	add.w	r0, r5, #118	; 0x76
 8018618:	4621      	mov	r1, r4
 801861a:	2282      	movs	r2, #130	; 0x82
 801861c:	b280      	uxth	r0, r0
 801861e:	f004 fa09 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 8018622:	f105 0082 	add.w	r0, r5, #130	; 0x82
 8018626:	4621      	mov	r1, r4
 8018628:	228c      	movs	r2, #140	; 0x8c
 801862a:	b280      	uxth	r0, r0
}
 801862c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 8018630:	f004 ba00 	b.w	801ca34 <TFT_DrawCharRus>
 8018634:	200001d0 	.word	0x200001d0
 8018638:	200001d8 	.word	0x200001d8

0801863c <GUI_TextRu_PPF>:

void GUI_TextRu_PPF(uint16_t X, uint16_t Y)
{
 801863c:	b538      	push	{r3, r4, r5, lr}
 801863e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018640:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018644:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018646:	f004 f9e9 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801864a:	2063      	movs	r0, #99	; 0x63
 801864c:	f004 f9ec 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018650:	480b      	ldr	r0, [pc, #44]	; (8018680 <GUI_TextRu_PPF+0x44>)
 8018652:	f004 f9dd 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 8018656:	4629      	mov	r1, r5
 8018658:	4620      	mov	r0, r4
 801865a:	22a4      	movs	r2, #164	; 0xa4
 801865c:	f004 f9ea 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 8018660:	f104 0011 	add.w	r0, r4, #17
 8018664:	4629      	mov	r1, r5
 8018666:	2290      	movs	r2, #144	; 0x90
 8018668:	b280      	uxth	r0, r0
 801866a:	f004 f9e3 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 801866e:	f104 0020 	add.w	r0, r4, #32
 8018672:	4629      	mov	r1, r5
 8018674:	22a0      	movs	r2, #160	; 0xa0
 8018676:	b280      	uxth	r0, r0
}
 8018678:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+32, Y, 'Р');
 801867c:	f004 b9da 	b.w	801ca34 <TFT_DrawCharRus>
 8018680:	200001d0 	.word	0x200001d0

08018684 <GUI_TextRu_PPF_RGB>:

void GUI_TextRu_PPF_RGB(uint16_t X, uint16_t Y)
{
 8018684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018688:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16RU_arch_big);
 801868a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8018798 <GUI_TextRu_PPF_RGB+0x114>
	TFT_DrawCharRus(X, Y, 'С');
	TFT_SetFont(&Font16RU_arch_small);
 801868e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 801879c <GUI_TextRu_PPF_RGB+0x118>
	TFT_DrawCharRus(X+15, Y+5, 'и');
	TFT_DrawCharRus(X+27, Y+5, 'н');
	TFT_SetFont(&Font16EN_arch_big);
 8018692:	4f40      	ldr	r7, [pc, #256]	; (8018794 <GUI_TextRu_PPF_RGB+0x110>)
	TFT_SetTextColor(TFT_White);
 8018694:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018698:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801869a:	f004 f9bf 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801869e:	2063      	movs	r0, #99	; 0x63
 80186a0:	f004 f9c2 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80186a4:	4648      	mov	r0, r9
 80186a6:	f004 f9b3 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'С');
 80186aa:	4629      	mov	r1, r5
 80186ac:	22a1      	movs	r2, #161	; 0xa1
 80186ae:	4620      	mov	r0, r4
 80186b0:	f004 f9c0 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 80186b4:	1d6e      	adds	r6, r5, #5
	TFT_SetFont(&Font16RU_arch_small);
 80186b6:	4640      	mov	r0, r8
	TFT_DrawCharRus(X+15, Y+5, 'и');
 80186b8:	b2b6      	uxth	r6, r6
	TFT_SetFont(&Font16RU_arch_small);
 80186ba:	f004 f9a9 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 80186be:	f104 000f 	add.w	r0, r4, #15
 80186c2:	4631      	mov	r1, r6
 80186c4:	22b8      	movs	r2, #184	; 0xb8
 80186c6:	b280      	uxth	r0, r0
 80186c8:	f004 f9b4 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'н');
 80186cc:	f104 001b 	add.w	r0, r4, #27
 80186d0:	4631      	mov	r1, r6
 80186d2:	22bd      	movs	r2, #189	; 0xbd
 80186d4:	b280      	uxth	r0, r0
 80186d6:	f004 f9ad 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 80186da:	4638      	mov	r0, r7
 80186dc:	f004 f998 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+40, Y, '-');
 80186e0:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80186e4:	4629      	mov	r1, r5
 80186e6:	222d      	movs	r2, #45	; 0x2d
 80186e8:	b280      	uxth	r0, r0
 80186ea:	f004 fa5b 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 80186ee:	4648      	mov	r0, r9
 80186f0:	f004 f98e 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+55, Y, 'З');
 80186f4:	f104 0037 	add.w	r0, r4, #55	; 0x37
 80186f8:	4629      	mov	r1, r5
 80186fa:	2297      	movs	r2, #151	; 0x97
 80186fc:	b280      	uxth	r0, r0
 80186fe:	f004 f999 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 8018702:	4640      	mov	r0, r8
 8018704:	f004 f984 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+70, Y+5, 'е');
 8018708:	f104 0046 	add.w	r0, r4, #70	; 0x46
 801870c:	4631      	mov	r1, r6
 801870e:	22b5      	movs	r2, #181	; 0xb5
 8018710:	b280      	uxth	r0, r0
 8018712:	f004 f98f 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+5, 'л');
 8018716:	f104 0052 	add.w	r0, r4, #82	; 0x52
 801871a:	4631      	mov	r1, r6
 801871c:	22bb      	movs	r2, #187	; 0xbb
 801871e:	b280      	uxth	r0, r0
 8018720:	f004 f988 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018724:	4638      	mov	r0, r7
 8018726:	f004 f973 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+94, Y, '-');
 801872a:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 801872e:	4629      	mov	r1, r5
 8018730:	222d      	movs	r2, #45	; 0x2d
 8018732:	b280      	uxth	r0, r0
 8018734:	f004 fa36 	bl	801cba4 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 8018738:	4648      	mov	r0, r9
 801873a:	f004 f969 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+109, Y, 'К');
 801873e:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 8018742:	4629      	mov	r1, r5
 8018744:	229a      	movs	r2, #154	; 0x9a
 8018746:	b280      	uxth	r0, r0
 8018748:	f004 f974 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801874c:	4640      	mov	r0, r8
 801874e:	f004 f95f 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+124, Y+5, 'р');
 8018752:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8018756:	4631      	mov	r1, r6
 8018758:	2280      	movs	r2, #128	; 0x80
 801875a:	b280      	uxth	r0, r0
 801875c:	f004 f96a 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8018760:	4638      	mov	r0, r7
 8018762:	f004 f955 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+136, Y, '-');
 8018766:	f104 0088 	add.w	r0, r4, #136	; 0x88
 801876a:	4629      	mov	r1, r5
 801876c:	222d      	movs	r2, #45	; 0x2d
 801876e:	b280      	uxth	r0, r0
 8018770:	f004 fa18 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+152, Y, 'F');
 8018774:	f104 0098 	add.w	r0, r4, #152	; 0x98
 8018778:	4629      	mov	r1, r5
 801877a:	2246      	movs	r2, #70	; 0x46
 801877c:	b280      	uxth	r0, r0
 801877e:	f004 fa11 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+167, Y, 'R');
 8018782:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
 8018786:	4629      	mov	r1, r5
 8018788:	2252      	movs	r2, #82	; 0x52
 801878a:	b280      	uxth	r0, r0
}
 801878c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TFT_DrawChar(X+167, Y, 'R');
 8018790:	f004 ba08 	b.w	801cba4 <TFT_DrawChar>
 8018794:	200001b0 	.word	0x200001b0
 8018798:	200001d0 	.word	0x200001d0
 801879c:	200001d8 	.word	0x200001d8

080187a0 <GUI_TextRu_PPF_bands>:
void GUI_TextRu_PPF_bands(uint16_t X, uint16_t Y)
{
 80187a0:	b538      	push	{r3, r4, r5, lr}
 80187a2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80187a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80187a8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80187aa:	f004 f937 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80187ae:	2063      	movs	r0, #99	; 0x63
 80187b0:	f004 f93a 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80187b4:	482d      	ldr	r0, [pc, #180]	; (801886c <GUI_TextRu_PPF_bands+0xcc>)
 80187b6:	f004 f92b 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 80187ba:	4621      	mov	r1, r4
 80187bc:	4628      	mov	r0, r5
 80187be:	22a4      	movs	r2, #164	; 0xa4
 80187c0:	f004 f938 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 80187c4:	f105 0011 	add.w	r0, r5, #17
 80187c8:	4621      	mov	r1, r4
 80187ca:	2290      	movs	r2, #144	; 0x90
 80187cc:	b280      	uxth	r0, r0
 80187ce:	f004 f931 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 80187d2:	f105 0020 	add.w	r0, r5, #32
 80187d6:	4621      	mov	r1, r4
 80187d8:	22a0      	movs	r2, #160	; 0xa0
 80187da:	b280      	uxth	r0, r0
 80187dc:	f004 f92a 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+57, Y+2, 'д');
 80187e0:	3402      	adds	r4, #2
	TFT_SetFont(&Font16RU_arch_small);
 80187e2:	4823      	ldr	r0, [pc, #140]	; (8018870 <GUI_TextRu_PPF_bands+0xd0>)
	TFT_DrawCharRus(X+57, Y+2, 'д');
 80187e4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 80187e6:	f004 f913 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+57, Y+2, 'д');
 80187ea:	f105 0039 	add.w	r0, r5, #57	; 0x39
 80187ee:	4621      	mov	r1, r4
 80187f0:	22b4      	movs	r2, #180	; 0xb4
 80187f2:	b280      	uxth	r0, r0
 80187f4:	f004 f91e 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+70, Y+2, 'и');
 80187f8:	f105 0046 	add.w	r0, r5, #70	; 0x46
 80187fc:	4621      	mov	r1, r4
 80187fe:	22b8      	movs	r2, #184	; 0xb8
 8018800:	b280      	uxth	r0, r0
 8018802:	f004 f917 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+83, Y+2, 'а');
 8018806:	f105 0053 	add.w	r0, r5, #83	; 0x53
 801880a:	4621      	mov	r1, r4
 801880c:	22b0      	movs	r2, #176	; 0xb0
 801880e:	b280      	uxth	r0, r0
 8018810:	f004 f910 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+96, Y+2, 'п');
 8018814:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8018818:	4621      	mov	r1, r4
 801881a:	22bf      	movs	r2, #191	; 0xbf
 801881c:	b280      	uxth	r0, r0
 801881e:	f004 f909 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+2, 'а');
 8018822:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 8018826:	4621      	mov	r1, r4
 8018828:	22b0      	movs	r2, #176	; 0xb0
 801882a:	b280      	uxth	r0, r0
 801882c:	f004 f902 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+122, Y+2, 'з');
 8018830:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 8018834:	4621      	mov	r1, r4
 8018836:	22b7      	movs	r2, #183	; 0xb7
 8018838:	b280      	uxth	r0, r0
 801883a:	f004 f8fb 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+135, Y+2, 'о');
 801883e:	f105 0087 	add.w	r0, r5, #135	; 0x87
 8018842:	4621      	mov	r1, r4
 8018844:	22be      	movs	r2, #190	; 0xbe
 8018846:	b280      	uxth	r0, r0
 8018848:	f004 f8f4 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+148, Y+2, 'н');
 801884c:	f105 0094 	add.w	r0, r5, #148	; 0x94
 8018850:	4621      	mov	r1, r4
 8018852:	22bd      	movs	r2, #189	; 0xbd
 8018854:	b280      	uxth	r0, r0
 8018856:	f004 f8ed 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 801885a:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 801885e:	4621      	mov	r1, r4
 8018860:	228b      	movs	r2, #139	; 0x8b
 8018862:	b280      	uxth	r0, r0
}
 8018864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 8018868:	f004 b8e4 	b.w	801ca34 <TFT_DrawCharRus>
 801886c:	200001d0 	.word	0x200001d0
 8018870:	200001d8 	.word	0x200001d8

08018874 <GUI_TextRu_Info_Callibration>:

void GUI_TextRu_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 8018874:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018876:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 8018878:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801887c:	2300      	movs	r3, #0
 801887e:	9300      	str	r3, [sp, #0]
 8018880:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8018884:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 8018886:	f004 f8c9 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801888a:	2063      	movs	r0, #99	; 0x63
 801888c:	f004 f8cc 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018890:	4832      	ldr	r0, [pc, #200]	; (801895c <GUI_TextRu_Info_Callibration+0xe8>)
	TFT_DrawCharRus(X+82, Y+2, 'о');
	TFT_DrawCharRus(X+95, Y+2, 'в');
	TFT_DrawCharRus(X+108, Y+2, 'к');
	TFT_DrawCharRus(X+118, Y+2, 'а');
	
	sprintf (buffer, "%02u",  date);
 8018892:	4d33      	ldr	r5, [pc, #204]	; (8018960 <GUI_TextRu_Info_Callibration+0xec>)
	TFT_SetFont(&Font16RU_arch_big);
 8018894:	f004 f8bc 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'К');
 8018898:	229a      	movs	r2, #154	; 0x9a
 801889a:	2160      	movs	r1, #96	; 0x60
 801889c:	2046      	movs	r0, #70	; 0x46
 801889e:	f004 f8c9 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 80188a2:	4830      	ldr	r0, [pc, #192]	; (8018964 <GUI_TextRu_Info_Callibration+0xf0>)
 80188a4:	f004 f8b4 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'а');
 80188a8:	22b0      	movs	r2, #176	; 0xb0
 80188aa:	2166      	movs	r1, #102	; 0x66
 80188ac:	2057      	movs	r0, #87	; 0x57
 80188ae:	f004 f8c1 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'л');
 80188b2:	22bb      	movs	r2, #187	; 0xbb
 80188b4:	2166      	movs	r1, #102	; 0x66
 80188b6:	2064      	movs	r0, #100	; 0x64
 80188b8:	f004 f8bc 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 80188bc:	22b8      	movs	r2, #184	; 0xb8
 80188be:	2166      	movs	r1, #102	; 0x66
 80188c0:	2071      	movs	r0, #113	; 0x71
 80188c2:	f004 f8b7 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'б');
 80188c6:	22b1      	movs	r2, #177	; 0xb1
 80188c8:	2166      	movs	r1, #102	; 0x66
 80188ca:	207e      	movs	r0, #126	; 0x7e
 80188cc:	f004 f8b2 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'р');
 80188d0:	2280      	movs	r2, #128	; 0x80
 80188d2:	2166      	movs	r1, #102	; 0x66
 80188d4:	208b      	movs	r0, #139	; 0x8b
 80188d6:	f004 f8ad 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'о');
 80188da:	22be      	movs	r2, #190	; 0xbe
 80188dc:	2166      	movs	r1, #102	; 0x66
 80188de:	2098      	movs	r0, #152	; 0x98
 80188e0:	f004 f8a8 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'в');
 80188e4:	22b2      	movs	r2, #178	; 0xb2
 80188e6:	2166      	movs	r1, #102	; 0x66
 80188e8:	20a5      	movs	r0, #165	; 0xa5
 80188ea:	f004 f8a3 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+108, Y+2, 'к');
 80188ee:	22ba      	movs	r2, #186	; 0xba
 80188f0:	2166      	movs	r1, #102	; 0x66
 80188f2:	20b2      	movs	r0, #178	; 0xb2
 80188f4:	f004 f89e 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+2, 'а');
 80188f8:	22b0      	movs	r2, #176	; 0xb0
 80188fa:	2166      	movs	r1, #102	; 0x66
 80188fc:	20bc      	movs	r0, #188	; 0xbc
 80188fe:	f004 f899 	bl	801ca34 <TFT_DrawCharRus>
	sprintf (buffer, "%02u",  date);
 8018902:	4622      	mov	r2, r4
 8018904:	4629      	mov	r1, r5
 8018906:	4668      	mov	r0, sp
 8018908:	f007 fcc4 	bl	8020294 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801890c:	4816      	ldr	r0, [pc, #88]	; (8018968 <GUI_TextRu_Info_Callibration+0xf4>)
 801890e:	f004 f87f 	bl	801ca10 <TFT_SetFont>
	buffer[2] = '.';
 8018912:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018914:	2303      	movs	r3, #3
 8018916:	466a      	mov	r2, sp
 8018918:	2182      	movs	r1, #130	; 0x82
 801891a:	201e      	movs	r0, #30
	buffer[2] = '.';
 801891c:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018920:	f004 f998 	bl	801cc54 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 8018924:	4632      	mov	r2, r6
 8018926:	4629      	mov	r1, r5
 8018928:	4668      	mov	r0, sp
 801892a:	f007 fcb3 	bl	8020294 <sprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801892e:	2303      	movs	r3, #3
 8018930:	466a      	mov	r2, sp
 8018932:	2182      	movs	r1, #130	; 0x82
 8018934:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 8018936:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801893a:	f004 f98b 	bl	801cc54 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 801893e:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 8018942:	490a      	ldr	r1, [pc, #40]	; (801896c <GUI_TextRu_Info_Callibration+0xf8>)
 8018944:	4668      	mov	r0, sp
 8018946:	f007 fca5 	bl	8020294 <sprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801894a:	2303      	movs	r3, #3
 801894c:	466a      	mov	r2, sp
 801894e:	2182      	movs	r1, #130	; 0x82
 8018950:	209b      	movs	r0, #155	; 0x9b
 8018952:	f004 f97f 	bl	801cc54 <TFT_DisplayString>
}
 8018956:	b002      	add	sp, #8
 8018958:	bd70      	pop	{r4, r5, r6, pc}
 801895a:	bf00      	nop
 801895c:	200001d0 	.word	0x200001d0
 8018960:	08031d74 	.word	0x08031d74
 8018964:	200001d8 	.word	0x200001d8
 8018968:	200001f0 	.word	0x200001f0
 801896c:	08031d79 	.word	0x08031d79

08018970 <GUI_TextRu_WriteSD>:

void GUI_TextRu_WriteSD(uint16_t X, uint16_t Y)
{
 8018970:	b538      	push	{r3, r4, r5, lr}
 8018972:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018974:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018978:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801897a:	f004 f84f 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801897e:	2063      	movs	r0, #99	; 0x63
 8018980:	f004 f852 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018984:	4818      	ldr	r0, [pc, #96]	; (80189e8 <GUI_TextRu_WriteSD+0x78>)
 8018986:	f004 f843 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'З');
 801898a:	4621      	mov	r1, r4
 801898c:	2297      	movs	r2, #151	; 0x97
 801898e:	4628      	mov	r0, r5
 8018990:	f004 f850 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018994:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8018996:	4815      	ldr	r0, [pc, #84]	; (80189ec <GUI_TextRu_WriteSD+0x7c>)
	TFT_DrawCharRus(X+15, Y+5, 'а');
 8018998:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801899a:	f004 f839 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'а');
 801899e:	f105 000f 	add.w	r0, r5, #15
 80189a2:	4621      	mov	r1, r4
 80189a4:	22b0      	movs	r2, #176	; 0xb0
 80189a6:	b280      	uxth	r0, r0
 80189a8:	f004 f844 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'п');
 80189ac:	f105 001c 	add.w	r0, r5, #28
 80189b0:	4621      	mov	r1, r4
 80189b2:	22bf      	movs	r2, #191	; 0xbf
 80189b4:	b280      	uxth	r0, r0
 80189b6:	f004 f83d 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 80189ba:	f105 0029 	add.w	r0, r5, #41	; 0x29
 80189be:	4621      	mov	r1, r4
 80189c0:	22b8      	movs	r2, #184	; 0xb8
 80189c2:	b280      	uxth	r0, r0
 80189c4:	f004 f836 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'с');
 80189c8:	f105 0035 	add.w	r0, r5, #53	; 0x35
 80189cc:	4621      	mov	r1, r4
 80189ce:	2281      	movs	r2, #129	; 0x81
 80189d0:	b280      	uxth	r0, r0
 80189d2:	f004 f82f 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 80189d6:	f105 0041 	add.w	r0, r5, #65	; 0x41
 80189da:	4621      	mov	r1, r4
 80189dc:	228c      	movs	r2, #140	; 0x8c
 80189de:	b280      	uxth	r0, r0
}
 80189e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 80189e4:	f004 b826 	b.w	801ca34 <TFT_DrawCharRus>
 80189e8:	200001d0 	.word	0x200001d0
 80189ec:	200001d8 	.word	0x200001d8

080189f0 <GUI_TextRu_Info_Serial>:

void GUI_TextRu_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 80189f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80189f2:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 80189f4:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 80189f8:	2300      	movs	r3, #0
 80189fa:	9300      	str	r3, [sp, #0]
 80189fc:	f88d 3004 	strb.w	r3, [sp, #4]
{
 8018a00:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 8018a02:	f004 f80b 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018a06:	2063      	movs	r0, #99	; 0x63
 8018a08:	f004 f80e 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018a0c:	4830      	ldr	r0, [pc, #192]	; (8018ad0 <GUI_TextRu_Info_Serial+0xe0>)
 8018a0e:	f003 ffff 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'С');
 8018a12:	22a1      	movs	r2, #161	; 0xa1
 8018a14:	21c4      	movs	r1, #196	; 0xc4
 8018a16:	203c      	movs	r0, #60	; 0x3c
 8018a18:	f004 f80c 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 8018a1c:	482d      	ldr	r0, [pc, #180]	; (8018ad4 <GUI_TextRu_Info_Serial+0xe4>)
 8018a1e:	f003 fff7 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'е');
 8018a22:	22b5      	movs	r2, #181	; 0xb5
 8018a24:	21ca      	movs	r1, #202	; 0xca
 8018a26:	204d      	movs	r0, #77	; 0x4d
 8018a28:	f004 f804 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'р');
 8018a2c:	2280      	movs	r2, #128	; 0x80
 8018a2e:	21ca      	movs	r1, #202	; 0xca
 8018a30:	205a      	movs	r0, #90	; 0x5a
 8018a32:	f003 ffff 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 8018a36:	22b8      	movs	r2, #184	; 0xb8
 8018a38:	21ca      	movs	r1, #202	; 0xca
 8018a3a:	2067      	movs	r0, #103	; 0x67
 8018a3c:	f003 fffa 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'й');
 8018a40:	22b9      	movs	r2, #185	; 0xb9
 8018a42:	21ca      	movs	r1, #202	; 0xca
 8018a44:	2074      	movs	r0, #116	; 0x74
 8018a46:	f003 fff5 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'н');
 8018a4a:	22bd      	movs	r2, #189	; 0xbd
 8018a4c:	21ca      	movs	r1, #202	; 0xca
 8018a4e:	2081      	movs	r0, #129	; 0x81
 8018a50:	f003 fff0 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'ы');
 8018a54:	228b      	movs	r2, #139	; 0x8b
 8018a56:	21ca      	movs	r1, #202	; 0xca
 8018a58:	208e      	movs	r0, #142	; 0x8e
 8018a5a:	f003 ffeb 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'й');
 8018a5e:	22b9      	movs	r2, #185	; 0xb9
 8018a60:	21ca      	movs	r1, #202	; 0xca
 8018a62:	209b      	movs	r0, #155	; 0x9b
 8018a64:	f003 ffe6 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+115, Y+2, 'н');
 8018a68:	22bd      	movs	r2, #189	; 0xbd
 8018a6a:	21ca      	movs	r1, #202	; 0xca
 8018a6c:	20af      	movs	r0, #175	; 0xaf
 8018a6e:	f003 ffe1 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+128, Y+2, 'о');
 8018a72:	22be      	movs	r2, #190	; 0xbe
 8018a74:	21ca      	movs	r1, #202	; 0xca
 8018a76:	20bc      	movs	r0, #188	; 0xbc
 8018a78:	f003 ffdc 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+141, Y+2, 'м');
 8018a7c:	22bc      	movs	r2, #188	; 0xbc
 8018a7e:	21ca      	movs	r1, #202	; 0xca
 8018a80:	20c9      	movs	r0, #201	; 0xc9
 8018a82:	f003 ffd7 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+154, Y+2, 'е');
 8018a86:	22b5      	movs	r2, #181	; 0xb5
 8018a88:	21ca      	movs	r1, #202	; 0xca
 8018a8a:	20d6      	movs	r0, #214	; 0xd6
 8018a8c:	f003 ffd2 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+165, Y+2, 'р');
 8018a90:	2280      	movs	r2, #128	; 0x80
 8018a92:	21ca      	movs	r1, #202	; 0xca
 8018a94:	20e1      	movs	r0, #225	; 0xe1
 8018a96:	f003 ffcd 	bl	801ca34 <TFT_DrawCharRus>

	sprintf (buffer, "%u",  Part);
 8018a9a:	462a      	mov	r2, r5
 8018a9c:	490e      	ldr	r1, [pc, #56]	; (8018ad8 <GUI_TextRu_Info_Serial+0xe8>)
 8018a9e:	4668      	mov	r0, sp
 8018aa0:	f007 fbf8 	bl	8020294 <sprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 8018aa4:	480d      	ldr	r0, [pc, #52]	; (8018adc <GUI_TextRu_Info_Serial+0xec>)
 8018aa6:	f003 ffb3 	bl	801ca10 <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018aaa:	2303      	movs	r3, #3
 8018aac:	466a      	mov	r2, sp
 8018aae:	21e6      	movs	r1, #230	; 0xe6
 8018ab0:	2028      	movs	r0, #40	; 0x28
 8018ab2:	f004 f8cf 	bl	801cc54 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 8018ab6:	4622      	mov	r2, r4
 8018ab8:	4909      	ldr	r1, [pc, #36]	; (8018ae0 <GUI_TextRu_Info_Serial+0xf0>)
 8018aba:	4668      	mov	r0, sp
 8018abc:	f007 fbea 	bl	8020294 <sprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 8018ac0:	2303      	movs	r3, #3
 8018ac2:	466a      	mov	r2, sp
 8018ac4:	21e6      	movs	r1, #230	; 0xe6
 8018ac6:	2087      	movs	r0, #135	; 0x87
 8018ac8:	f004 f8c4 	bl	801cc54 <TFT_DisplayString>
}
 8018acc:	b003      	add	sp, #12
 8018ace:	bd30      	pop	{r4, r5, pc}
 8018ad0:	200001d0 	.word	0x200001d0
 8018ad4:	200001d8 	.word	0x200001d8
 8018ad8:	08031d7d 	.word	0x08031d7d
 8018adc:	200001f0 	.word	0x200001f0
 8018ae0:	08031d80 	.word	0x08031d80

08018ae4 <GUI_TextRu_Info_Ver>:

void GUI_TextRu_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 8018ae4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 8018ae6:	2300      	movs	r3, #0
	
	X = 120;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 8018ae8:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8018aec:	9302      	str	r3, [sp, #8]
 8018aee:	f88d 300c 	strb.w	r3, [sp, #12]
{
 8018af2:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 8018af6:	f003 ff91 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018afa:	2063      	movs	r0, #99	; 0x63
 8018afc:	f003 ff94 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018b00:	481b      	ldr	r0, [pc, #108]	; (8018b70 <GUI_TextRu_Info_Ver+0x8c>)
	TFT_DrawCharRus(X, Y-1, 'П');
	TFT_DrawCharRus(X+18, Y-1, 'О');
	
	TFT_SetFont(&Font16);
 8018b02:	4c1c      	ldr	r4, [pc, #112]	; (8018b74 <GUI_TextRu_Info_Ver+0x90>)
	TFT_SetFont(&Font16RU_arch_big);
 8018b04:	f003 ff84 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y-1, 'П');
 8018b08:	229f      	movs	r2, #159	; 0x9f
 8018b0a:	f240 115d 	movw	r1, #349	; 0x15d
 8018b0e:	2078      	movs	r0, #120	; 0x78
 8018b10:	f003 ff90 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+18, Y-1, 'О');
 8018b14:	229e      	movs	r2, #158	; 0x9e
 8018b16:	f240 115d 	movw	r1, #349	; 0x15d
 8018b1a:	208a      	movs	r0, #138	; 0x8a
 8018b1c:	f003 ff8a 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16);
 8018b20:	4620      	mov	r0, r4
 8018b22:	f003 ff75 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+52, Y, '.');
 8018b26:	222e      	movs	r2, #46	; 0x2e
 8018b28:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8018b2c:	20ac      	movs	r0, #172	; 0xac
 8018b2e:	f004 f839 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y, 'v');
 8018b32:	2276      	movs	r2, #118	; 0x76
 8018b34:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8018b38:	20a2      	movs	r0, #162	; 0xa2
 8018b3a:	f004 f833 	bl	801cba4 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 8018b3e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8018b42:	ee10 0a10 	vmov	r0, s0
 8018b46:	f7e7 fd17 	bl	8000578 <__aeabi_f2d>
 8018b4a:	4602      	mov	r2, r0
 8018b4c:	460b      	mov	r3, r1
 8018b4e:	a802      	add	r0, sp, #8
 8018b50:	4909      	ldr	r1, [pc, #36]	; (8018b78 <GUI_TextRu_Info_Ver+0x94>)
 8018b52:	f007 fb9f 	bl	8020294 <sprintf>
	TFT_SetFont(&Font16);
 8018b56:	4620      	mov	r0, r4
 8018b58:	f003 ff5a 	bl	801ca10 <TFT_SetFont>
	TFT_DisplayString(185, Y, (uint8_t *)buffer, LEFT_MODE);
 8018b5c:	2303      	movs	r3, #3
 8018b5e:	aa02      	add	r2, sp, #8
 8018b60:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8018b64:	20b9      	movs	r0, #185	; 0xb9
 8018b66:	f004 f875 	bl	801cc54 <TFT_DisplayString>
}
 8018b6a:	b004      	add	sp, #16
 8018b6c:	bd10      	pop	{r4, pc}
 8018b6e:	bf00      	nop
 8018b70:	200001d0 	.word	0x200001d0
 8018b74:	200001a8 	.word	0x200001a8
 8018b78:	08031d65 	.word	0x08031d65

08018b7c <GUI_TextRu_CCT>:

void GUI_TextRu_CCT(uint16_t X, uint16_t Y)
{
 8018b7c:	b538      	push	{r3, r4, r5, lr}
 8018b7e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018b80:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018b84:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018b86:	f003 ff49 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018b8a:	2063      	movs	r0, #99	; 0x63
 8018b8c:	f003 ff4c 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8018b90:	481e      	ldr	r0, [pc, #120]	; (8018c0c <GUI_TextRu_CCT+0x90>)
 8018b92:	f003 ff3d 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'К');
 8018b96:	4629      	mov	r1, r5
 8018b98:	4620      	mov	r0, r4
 8018b9a:	229a      	movs	r2, #154	; 0x9a
 8018b9c:	f003 ff4a 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'Ц');
 8018ba0:	f104 0011 	add.w	r0, r4, #17
 8018ba4:	4629      	mov	r1, r5
 8018ba6:	22a6      	movs	r2, #166	; 0xa6
 8018ba8:	b280      	uxth	r0, r0
 8018baa:	f003 ff43 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+33, Y, 'Т');
 8018bae:	f104 0021 	add.w	r0, r4, #33	; 0x21
 8018bb2:	4629      	mov	r1, r5
 8018bb4:	22a2      	movs	r2, #162	; 0xa2
 8018bb6:	b280      	uxth	r0, r0
 8018bb8:	f003 ff3c 	bl	801ca34 <TFT_DrawCharRus>

	TFT_SetFont(&Font16EN_arch_big);
 8018bbc:	4814      	ldr	r0, [pc, #80]	; (8018c10 <GUI_TextRu_CCT+0x94>)
 8018bbe:	f003 ff27 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+49, Y, '(');
 8018bc2:	f104 0031 	add.w	r0, r4, #49	; 0x31
 8018bc6:	4629      	mov	r1, r5
 8018bc8:	2228      	movs	r2, #40	; 0x28
 8018bca:	b280      	uxth	r0, r0
 8018bcc:	f003 ffea 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+104, Y, ')');
 8018bd0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018bd4:	4629      	mov	r1, r5
 8018bd6:	2229      	movs	r2, #41	; 0x29
 8018bd8:	b280      	uxth	r0, r0
 8018bda:	f003 ffe3 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y, 'C');
 8018bde:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 8018be2:	4629      	mov	r1, r5
 8018be4:	2243      	movs	r2, #67	; 0x43
 8018be6:	b280      	uxth	r0, r0
 8018be8:	f003 ffdc 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y, 'C');
 8018bec:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8018bf0:	4629      	mov	r1, r5
 8018bf2:	2243      	movs	r2, #67	; 0x43
 8018bf4:	b280      	uxth	r0, r0
 8018bf6:	f003 ffd5 	bl	801cba4 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y, 'T');
 8018bfa:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 8018bfe:	4629      	mov	r1, r5
 8018c00:	2254      	movs	r2, #84	; 0x54
 8018c02:	b280      	uxth	r0, r0
}
 8018c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+91, Y, 'T');
 8018c08:	f003 bfcc 	b.w	801cba4 <TFT_DrawChar>
 8018c0c:	200001d0 	.word	0x200001d0
 8018c10:	200001b0 	.word	0x200001b0

08018c14 <GUI_TextRu_umol>:

void GUI_TextRu_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 8018c14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018c18:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018c1a:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018c1e:	4616      	mov	r6, r2
 8018c20:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018c22:	f003 fefb 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018c26:	2063      	movs	r0, #99	; 0x63
 8018c28:	f003 fefe 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 8018c2c:	482f      	ldr	r0, [pc, #188]	; (8018cec <GUI_TextRu_umol+0xd8>)
 8018c2e:	f003 feef 	bl	801ca10 <TFT_SetFont>
	
	if(deg){
 8018c32:	2e00      	cmp	r6, #0
 8018c34:	d057      	beq.n	8018ce6 <GUI_TextRu_umol+0xd2>
		TFT_DrawCharRus(X, Y, 'м');
 8018c36:	22bc      	movs	r2, #188	; 0xbc
	} else{
		TFT_DrawCharRus(X, Y, 'я'+1);
 8018c38:	4629      	mov	r1, r5
 8018c3a:	4620      	mov	r0, r4
 8018c3c:	f003 fefa 	bl	801ca34 <TFT_DrawCharRus>
	}

	TFT_DrawCharRus(X+8, Y, 'м');
 8018c40:	f104 0008 	add.w	r0, r4, #8
 8018c44:	4629      	mov	r1, r5
 8018c46:	22bc      	movs	r2, #188	; 0xbc
 8018c48:	b280      	uxth	r0, r0
 8018c4a:	f003 fef3 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y, 'о');
	TFT_DrawCharRus(X+22, Y, 'л');
 8018c4e:	f104 0716 	add.w	r7, r4, #22
	TFT_DrawCharRus(X+16, Y, 'о');
 8018c52:	f104 0010 	add.w	r0, r4, #16
 8018c56:	4629      	mov	r1, r5
	TFT_DrawCharRus(X+22, Y, 'л');
 8018c58:	b2bf      	uxth	r7, r7
	TFT_DrawCharRus(X+16, Y, 'о');
 8018c5a:	22be      	movs	r2, #190	; 0xbe
 8018c5c:	b280      	uxth	r0, r0
 8018c5e:	f003 fee9 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+22, Y, 'л');
 8018c62:	4629      	mov	r1, r5
 8018c64:	4638      	mov	r0, r7
 8018c66:	22bb      	movs	r2, #187	; 0xbb
 8018c68:	f003 fee4 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y, 'ь');
 8018c6c:	f104 001c 	add.w	r0, r4, #28
 8018c70:	4629      	mov	r1, r5
 8018c72:	228c      	movs	r2, #140	; 0x8c
 8018c74:	b280      	uxth	r0, r0
 8018c76:	f003 fedd 	bl	801ca34 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 8018c7a:	f105 030a 	add.w	r3, r5, #10
 8018c7e:	b29b      	uxth	r3, r3
 8018c80:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8018c84:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8018c88:	4619      	mov	r1, r3
 8018c8a:	4620      	mov	r0, r4
 8018c8c:	f8cd 8000 	str.w	r8, [sp]
 8018c90:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 8018c92:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 8018c96:	f003 fc35 	bl	801c504 <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 8018c9a:	b2b6      	uxth	r6, r6
 8018c9c:	f104 000d 	add.w	r0, r4, #13
 8018ca0:	4631      	mov	r1, r6
 8018ca2:	2291      	movs	r2, #145	; 0x91
 8018ca4:	b280      	uxth	r0, r0
 8018ca6:	f003 fec5 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+11, 'м');
 8018caa:	1d60      	adds	r0, r4, #5
 8018cac:	4631      	mov	r1, r6
 8018cae:	22bc      	movs	r2, #188	; 0xbc
 8018cb0:	b280      	uxth	r0, r0
 8018cb2:	f003 febf 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 8018cb6:	f105 030f 	add.w	r3, r5, #15
 8018cba:	f104 0214 	add.w	r2, r4, #20
 8018cbe:	f105 010e 	add.w	r1, r5, #14
 8018cc2:	f104 0013 	add.w	r0, r4, #19
 8018cc6:	f8cd 8000 	str.w	r8, [sp]
 8018cca:	b29b      	uxth	r3, r3
 8018ccc:	b292      	uxth	r2, r2
 8018cce:	b289      	uxth	r1, r1
 8018cd0:	b280      	uxth	r0, r0
 8018cd2:	f003 fc8c 	bl	801c5ee <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+11, 'с');
 8018cd6:	2281      	movs	r2, #129	; 0x81
 8018cd8:	4631      	mov	r1, r6
 8018cda:	4638      	mov	r0, r7
}
 8018cdc:	b002      	add	sp, #8
 8018cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+22, Y+11, 'с');
 8018ce2:	f003 bea7 	b.w	801ca34 <TFT_DrawCharRus>
		TFT_DrawCharRus(X, Y, 'я'+1);
 8018ce6:	2290      	movs	r2, #144	; 0x90
 8018ce8:	e7a6      	b.n	8018c38 <GUI_TextRu_umol+0x24>
 8018cea:	bf00      	nop
 8018cec:	200001a0 	.word	0x200001a0

08018cf0 <GUI_TextRu_umol_sr>:

void GUI_TextRu_umol_sr(uint16_t X, uint16_t Y)
{
 8018cf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018cf4:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018cf6:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018cfa:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018cfc:	f003 fe8e 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018d00:	2063      	movs	r0, #99	; 0x63
 8018d02:	f003 fe91 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 8018d06:	483c      	ldr	r0, [pc, #240]	; (8018df8 <GUI_TextRu_umol_sr+0x108>)
 8018d08:	f003 fe82 	bl	801ca10 <TFT_SetFont>
	
	TFT_DrawCharRus(X+7, Y, 'я'+1);
 8018d0c:	1de0      	adds	r0, r4, #7
 8018d0e:	4629      	mov	r1, r5
 8018d10:	2290      	movs	r2, #144	; 0x90
 8018d12:	b280      	uxth	r0, r0
 8018d14:	f003 fe8e 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y, 'м');
 8018d18:	f104 000f 	add.w	r0, r4, #15
 8018d1c:	4629      	mov	r1, r5
 8018d1e:	22bc      	movs	r2, #188	; 0xbc
 8018d20:	b280      	uxth	r0, r0
 8018d22:	f003 fe87 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+23, Y, 'о');
 8018d26:	f104 0017 	add.w	r0, r4, #23
 8018d2a:	4629      	mov	r1, r5
 8018d2c:	22be      	movs	r2, #190	; 0xbe
 8018d2e:	b280      	uxth	r0, r0
 8018d30:	f003 fe80 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y, 'л');
 8018d34:	f104 001d 	add.w	r0, r4, #29
 8018d38:	4629      	mov	r1, r5
 8018d3a:	22bb      	movs	r2, #187	; 0xbb
 8018d3c:	b280      	uxth	r0, r0
 8018d3e:	f003 fe79 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+35, Y, 'ь');
 8018d42:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8018d46:	4629      	mov	r1, r5
 8018d48:	228c      	movs	r2, #140	; 0x8c
 8018d4a:	b280      	uxth	r0, r0
 8018d4c:	f003 fe72 	bl	801ca34 <TFT_DrawCharRus>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8018d50:	f105 030a 	add.w	r3, r5, #10
 8018d54:	b29b      	uxth	r3, r3
 8018d56:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8018d5a:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 8018d5e:	1ce0      	adds	r0, r4, #3
 8018d60:	4619      	mov	r1, r3
 8018d62:	f8cd 8000 	str.w	r8, [sp]
 8018d66:	b292      	uxth	r2, r2
 8018d68:	b280      	uxth	r0, r0
	
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 8018d6a:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8018d6e:	f003 fbc9 	bl	801c504 <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 8018d72:	b2b6      	uxth	r6, r6
 8018d74:	f104 000d 	add.w	r0, r4, #13
 8018d78:	4631      	mov	r1, r6
 8018d7a:	2291      	movs	r2, #145	; 0x91
 8018d7c:	b280      	uxth	r0, r0
 8018d7e:	f003 fe59 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+12, 'м');
 8018d82:	1d60      	adds	r0, r4, #5
 8018d84:	4631      	mov	r1, r6
 8018d86:	22bc      	movs	r2, #188	; 0xbc
 8018d88:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 8018d8a:	f105 0710 	add.w	r7, r5, #16
 8018d8e:	350f      	adds	r5, #15
	TFT_DrawCharRus(X+5, Y+12, 'м');
 8018d90:	f003 fe50 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 8018d94:	b2bf      	uxth	r7, r7
 8018d96:	b2ad      	uxth	r5, r5
 8018d98:	f104 0214 	add.w	r2, r4, #20
 8018d9c:	f104 0013 	add.w	r0, r4, #19
 8018da0:	462b      	mov	r3, r5
 8018da2:	4639      	mov	r1, r7
 8018da4:	f8cd 8000 	str.w	r8, [sp]
 8018da8:	b292      	uxth	r2, r2
 8018daa:	b280      	uxth	r0, r0
 8018dac:	f003 fc1f 	bl	801c5ee <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+12, 'с');
 8018db0:	f104 0016 	add.w	r0, r4, #22
 8018db4:	4631      	mov	r1, r6
 8018db6:	2281      	movs	r2, #129	; 0x81
 8018db8:	b280      	uxth	r0, r0
 8018dba:	f003 fe3b 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+30, Y+16, X+31, Y+15, TFT_White);
 8018dbe:	f104 021f 	add.w	r2, r4, #31
 8018dc2:	f104 001e 	add.w	r0, r4, #30
 8018dc6:	462b      	mov	r3, r5
 8018dc8:	4639      	mov	r1, r7
 8018dca:	f8cd 8000 	str.w	r8, [sp]
 8018dce:	b292      	uxth	r2, r2
 8018dd0:	b280      	uxth	r0, r0
 8018dd2:	f003 fc0c 	bl	801c5ee <TFT_DrawRectangle>
	TFT_DrawCharRus(X+32, Y+12, 'с');
 8018dd6:	f104 0020 	add.w	r0, r4, #32
 8018dda:	4631      	mov	r1, r6
 8018ddc:	2281      	movs	r2, #129	; 0x81
 8018dde:	b280      	uxth	r0, r0
 8018de0:	f003 fe28 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+12, 'р');
 8018de4:	f104 0027 	add.w	r0, r4, #39	; 0x27
 8018de8:	2280      	movs	r2, #128	; 0x80
 8018dea:	4631      	mov	r1, r6
 8018dec:	b280      	uxth	r0, r0

}
 8018dee:	b002      	add	sp, #8
 8018df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+39, Y+12, 'р');
 8018df4:	f003 be1e 	b.w	801ca34 <TFT_DrawCharRus>
 8018df8:	200001a0 	.word	0x200001a0

08018dfc <GUI_TextRu_mW_m2>:

void GUI_TextRu_mW_m2(uint16_t X, uint16_t Y)
{
 8018dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018dfe:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);

	TFT_SetFont(&Font12RU_arch_small);
 8018e00:	4f22      	ldr	r7, [pc, #136]	; (8018e8c <GUI_TextRu_mW_m2+0x90>)
	TFT_SetTextColor(TFT_White);
 8018e02:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018e06:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018e08:	f003 fe08 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018e0c:	2063      	movs	r0, #99	; 0x63
 8018e0e:	f003 fe0b 	bl	801ca28 <TFT_SetBackColor>
	TFT_DrawCharRus(X-1, Y+2, 'м');
 8018e12:	1cae      	adds	r6, r5, #2
	TFT_SetFont(&Font12RU_arch_small);
 8018e14:	4638      	mov	r0, r7
 8018e16:	f003 fdfb 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X-1, Y+2, 'м');
 8018e1a:	b2b6      	uxth	r6, r6
 8018e1c:	1e60      	subs	r0, r4, #1
 8018e1e:	4631      	mov	r1, r6
 8018e20:	22bc      	movs	r2, #188	; 0xbc
 8018e22:	b280      	uxth	r0, r0
 8018e24:	f003 fe06 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_big);
 8018e28:	4819      	ldr	r0, [pc, #100]	; (8018e90 <GUI_TextRu_mW_m2+0x94>)
 8018e2a:	f003 fdf1 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+6, Y, 'В'-17);
 8018e2e:	1da0      	adds	r0, r4, #6
 8018e30:	4629      	mov	r1, r5
 8018e32:	2281      	movs	r2, #129	; 0x81
 8018e34:	b280      	uxth	r0, r0
 8018e36:	f003 fdfd 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 8018e3a:	4638      	mov	r0, r7
 8018e3c:	f003 fde8 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+2, 'т');
 8018e40:	f104 0010 	add.w	r0, r4, #16
 8018e44:	4631      	mov	r1, r6
 8018e46:	2282      	movs	r2, #130	; 0x82
 8018e48:	b280      	uxth	r0, r0
 8018e4a:	f003 fdf3 	bl	801ca34 <TFT_DrawCharRus>

	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 8018e4e:	f105 030a 	add.w	r3, r5, #10
 8018e52:	b29b      	uxth	r3, r3
 8018e54:	f104 0214 	add.w	r2, r4, #20
 8018e58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018e5c:	9100      	str	r1, [sp, #0]
 8018e5e:	4620      	mov	r0, r4
 8018e60:	4619      	mov	r1, r3
 8018e62:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 8018e64:	350c      	adds	r5, #12
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 8018e66:	f003 fb4d 	bl	801c504 <TFT_DrawLine>
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 8018e6a:	b2ad      	uxth	r5, r5
 8018e6c:	f104 000c 	add.w	r0, r4, #12
 8018e70:	4629      	mov	r1, r5
 8018e72:	2291      	movs	r2, #145	; 0x91
 8018e74:	b280      	uxth	r0, r0
 8018e76:	f003 fddd 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+4, Y+12, 'м');
 8018e7a:	1d20      	adds	r0, r4, #4
 8018e7c:	22bc      	movs	r2, #188	; 0xbc
 8018e7e:	4629      	mov	r1, r5
 8018e80:	b280      	uxth	r0, r0
}
 8018e82:	b003      	add	sp, #12
 8018e84:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+4, Y+12, 'м');
 8018e88:	f003 bdd4 	b.w	801ca34 <TFT_DrawCharRus>
 8018e8c:	200001a0 	.word	0x200001a0
 8018e90:	20000198 	.word	0x20000198

08018e94 <GUI_TextRu_W_m2>:

void GUI_TextRu_W_m2(uint16_t X, uint16_t Y)
{
 8018e94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018e96:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018e98:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018e9c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018e9e:	f003 fdbd 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018ea2:	2063      	movs	r0, #99	; 0x63
 8018ea4:	f003 fdc0 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 8018ea8:	4819      	ldr	r0, [pc, #100]	; (8018f10 <GUI_TextRu_W_m2+0x7c>)
 8018eaa:	f003 fdb1 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+1, Y, 'В'-17);
 8018eae:	1c68      	adds	r0, r5, #1
 8018eb0:	4621      	mov	r1, r4
 8018eb2:	2281      	movs	r2, #129	; 0x81
 8018eb4:	b280      	uxth	r0, r0
 8018eb6:	f003 fdbd 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 8018eba:	4816      	ldr	r0, [pc, #88]	; (8018f14 <GUI_TextRu_W_m2+0x80>)
 8018ebc:	f003 fda8 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+11, Y+2, 'т');
 8018ec0:	1ca1      	adds	r1, r4, #2
 8018ec2:	f105 000b 	add.w	r0, r5, #11
 8018ec6:	2282      	movs	r2, #130	; 0x82
 8018ec8:	b289      	uxth	r1, r1
 8018eca:	b280      	uxth	r0, r0
 8018ecc:	f003 fdb2 	bl	801ca34 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 8018ed0:	f104 030a 	add.w	r3, r4, #10
 8018ed4:	b29b      	uxth	r3, r3
 8018ed6:	f105 0214 	add.w	r2, r5, #20
 8018eda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8018ede:	9100      	str	r1, [sp, #0]
 8018ee0:	4628      	mov	r0, r5
 8018ee2:	4619      	mov	r1, r3
 8018ee4:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 8018ee6:	340c      	adds	r4, #12
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 8018ee8:	f003 fb0c 	bl	801c504 <TFT_DrawLine>
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 8018eec:	b2a4      	uxth	r4, r4
 8018eee:	f105 000c 	add.w	r0, r5, #12
 8018ef2:	4621      	mov	r1, r4
 8018ef4:	2291      	movs	r2, #145	; 0x91
 8018ef6:	b280      	uxth	r0, r0
 8018ef8:	f003 fd9c 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+4, Y+12, 'м');
 8018efc:	1d28      	adds	r0, r5, #4
 8018efe:	22bc      	movs	r2, #188	; 0xbc
 8018f00:	4621      	mov	r1, r4
 8018f02:	b280      	uxth	r0, r0
}
 8018f04:	b003      	add	sp, #12
 8018f06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	TFT_DrawCharRus(X+4, Y+12, 'м');
 8018f0a:	f003 bd93 	b.w	801ca34 <TFT_DrawCharRus>
 8018f0e:	bf00      	nop
 8018f10:	20000198 	.word	0x20000198
 8018f14:	200001a0 	.word	0x200001a0

08018f18 <GUI_TextRu_W_m2_sr>:

void GUI_TextRu_W_m2_sr(uint16_t X, uint16_t Y)
{
 8018f18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018f1c:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018f1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018f22:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018f24:	f003 fd7a 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018f28:	2063      	movs	r0, #99	; 0x63
 8018f2a:	f003 fd7d 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 8018f2e:	4829      	ldr	r0, [pc, #164]	; (8018fd4 <GUI_TextRu_W_m2_sr+0xbc>)
 8018f30:	f003 fd6e 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+8, Y, 'В'-17);
 8018f34:	f104 0008 	add.w	r0, r4, #8
 8018f38:	4629      	mov	r1, r5
 8018f3a:	2281      	movs	r2, #129	; 0x81
 8018f3c:	b280      	uxth	r0, r0
 8018f3e:	f003 fd79 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
	TFT_DrawCharRus(X+18, Y+2, 'т');
 8018f42:	f104 0712 	add.w	r7, r4, #18
	TFT_SetFont(&Font12RU_arch_small);
 8018f46:	4824      	ldr	r0, [pc, #144]	; (8018fd8 <GUI_TextRu_W_m2_sr+0xc0>)
 8018f48:	f003 fd62 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+18, Y+2, 'т');
 8018f4c:	b2bf      	uxth	r7, r7
 8018f4e:	1ca9      	adds	r1, r5, #2
 8018f50:	4638      	mov	r0, r7
 8018f52:	2282      	movs	r2, #130	; 0x82
 8018f54:	b289      	uxth	r1, r1
 8018f56:	f003 fd6d 	bl	801ca34 <TFT_DrawCharRus>

	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 8018f5a:	f105 030a 	add.w	r3, r5, #10
 8018f5e:	b29b      	uxth	r3, r3
 8018f60:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8018f64:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8018f68:	4619      	mov	r1, r3
 8018f6a:	4620      	mov	r0, r4
 8018f6c:	f8cd 8000 	str.w	r8, [sp]
 8018f70:	b292      	uxth	r2, r2

	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 8018f72:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 8018f76:	f003 fac5 	bl	801c504 <TFT_DrawLine>
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 8018f7a:	b2b6      	uxth	r6, r6
 8018f7c:	f104 000a 	add.w	r0, r4, #10
 8018f80:	4631      	mov	r1, r6
 8018f82:	2291      	movs	r2, #145	; 0x91
 8018f84:	b280      	uxth	r0, r0
 8018f86:	f003 fd55 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+2, Y+12, 'м');
 8018f8a:	1ca0      	adds	r0, r4, #2
 8018f8c:	4631      	mov	r1, r6
 8018f8e:	22bc      	movs	r2, #188	; 0xbc
 8018f90:	b280      	uxth	r0, r0
 8018f92:	f003 fd4f 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+17, Y+16, X+18, Y+15, TFT_White);
 8018f96:	f105 030f 	add.w	r3, r5, #15
 8018f9a:	f105 0110 	add.w	r1, r5, #16
 8018f9e:	f104 0011 	add.w	r0, r4, #17
 8018fa2:	b29b      	uxth	r3, r3
 8018fa4:	463a      	mov	r2, r7
 8018fa6:	f8cd 8000 	str.w	r8, [sp]
 8018faa:	b289      	uxth	r1, r1
 8018fac:	b280      	uxth	r0, r0
 8018fae:	f003 fb1e 	bl	801c5ee <TFT_DrawRectangle>
	TFT_DrawCharRus(X+21, Y+12, 'с');
 8018fb2:	f104 0015 	add.w	r0, r4, #21
 8018fb6:	4631      	mov	r1, r6
 8018fb8:	2281      	movs	r2, #129	; 0x81
 8018fba:	b280      	uxth	r0, r0
 8018fbc:	f003 fd3a 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+12, 'р');
 8018fc0:	f104 001c 	add.w	r0, r4, #28
 8018fc4:	2280      	movs	r2, #128	; 0x80
 8018fc6:	4631      	mov	r1, r6
 8018fc8:	b280      	uxth	r0, r0
}
 8018fca:	b002      	add	sp, #8
 8018fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+28, Y+12, 'р');
 8018fd0:	f003 bd30 	b.w	801ca34 <TFT_DrawCharRus>
 8018fd4:	20000198 	.word	0x20000198
 8018fd8:	200001a0 	.word	0x200001a0

08018fdc <GUI_TextRu_mW_m2_sr>:

void GUI_TextRu_mW_m2_sr(uint16_t X, uint16_t Y)
{
 8018fdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018fde:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font12RU_arch_small);
 8018fe0:	4f32      	ldr	r7, [pc, #200]	; (80190ac <GUI_TextRu_mW_m2_sr+0xd0>)
	TFT_SetTextColor(TFT_White);
 8018fe2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018fe6:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018fe8:	f003 fd18 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018fec:	2063      	movs	r0, #99	; 0x63
 8018fee:	f003 fd1b 	bl	801ca28 <TFT_SetBackColor>
	TFT_DrawCharRus(X+5, Y+2, 'м');
 8018ff2:	1cae      	adds	r6, r5, #2
	TFT_SetFont(&Font12RU_arch_small);
 8018ff4:	4638      	mov	r0, r7
 8018ff6:	f003 fd0b 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+5, Y+2, 'м');
 8018ffa:	b2b6      	uxth	r6, r6
 8018ffc:	1d60      	adds	r0, r4, #5
 8018ffe:	4631      	mov	r1, r6
 8019000:	22bc      	movs	r2, #188	; 0xbc
 8019002:	b280      	uxth	r0, r0
 8019004:	f003 fd16 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_big);
 8019008:	4829      	ldr	r0, [pc, #164]	; (80190b0 <GUI_TextRu_mW_m2_sr+0xd4>)
 801900a:	f003 fd01 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+12, Y, 'В'-17);
 801900e:	f104 000c 	add.w	r0, r4, #12
 8019012:	4629      	mov	r1, r5
 8019014:	2281      	movs	r2, #129	; 0x81
 8019016:	b280      	uxth	r0, r0
 8019018:	f003 fd0c 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 801901c:	4638      	mov	r0, r7
 801901e:	f003 fcf7 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+22, Y+2, 'т');
 8019022:	f104 0016 	add.w	r0, r4, #22
 8019026:	4631      	mov	r1, r6
 8019028:	2282      	movs	r2, #130	; 0x82
 801902a:	b280      	uxth	r0, r0
 801902c:	f003 fd02 	bl	801ca34 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 8019030:	f105 030a 	add.w	r3, r5, #10
 8019034:	b29b      	uxth	r3, r3
 8019036:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801903a:	f104 0223 	add.w	r2, r4, #35	; 0x23
 801903e:	4619      	mov	r1, r3
 8019040:	4620      	mov	r0, r4
 8019042:	9700      	str	r7, [sp, #0]
 8019044:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 8019046:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801904a:	f003 fa5b 	bl	801c504 <TFT_DrawLine>
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 801904e:	b2b6      	uxth	r6, r6
 8019050:	f104 000a 	add.w	r0, r4, #10
 8019054:	4631      	mov	r1, r6
 8019056:	2291      	movs	r2, #145	; 0x91
 8019058:	b280      	uxth	r0, r0
 801905a:	f003 fceb 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+2, Y+12, 'м');
 801905e:	1ca0      	adds	r0, r4, #2
 8019060:	4631      	mov	r1, r6
 8019062:	22bc      	movs	r2, #188	; 0xbc
 8019064:	b280      	uxth	r0, r0
 8019066:	f003 fce5 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+17, Y+16, X+18, Y+15, TFT_White);
 801906a:	f105 030f 	add.w	r3, r5, #15
 801906e:	f104 0212 	add.w	r2, r4, #18
 8019072:	f105 0110 	add.w	r1, r5, #16
 8019076:	f104 0011 	add.w	r0, r4, #17
 801907a:	b29b      	uxth	r3, r3
 801907c:	9700      	str	r7, [sp, #0]
 801907e:	b292      	uxth	r2, r2
 8019080:	b289      	uxth	r1, r1
 8019082:	b280      	uxth	r0, r0
 8019084:	f003 fab3 	bl	801c5ee <TFT_DrawRectangle>
	TFT_DrawCharRus(X+21, Y+12, 'с');
 8019088:	f104 0015 	add.w	r0, r4, #21
 801908c:	4631      	mov	r1, r6
 801908e:	2281      	movs	r2, #129	; 0x81
 8019090:	b280      	uxth	r0, r0
 8019092:	f003 fccf 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+12, 'р');
 8019096:	f104 001c 	add.w	r0, r4, #28
 801909a:	2280      	movs	r2, #128	; 0x80
 801909c:	4631      	mov	r1, r6
 801909e:	b280      	uxth	r0, r0
}
 80190a0:	b003      	add	sp, #12
 80190a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+28, Y+12, 'р');
 80190a6:	f003 bcc5 	b.w	801ca34 <TFT_DrawCharRus>
 80190aa:	bf00      	nop
 80190ac:	200001a0 	.word	0x200001a0
 80190b0:	20000198 	.word	0x20000198

080190b4 <GUI_TextRu_Cd_m2>:

void GUI_TextRu_Cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 80190b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80190b8:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80190ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80190be:	460e      	mov	r6, r1
 80190c0:	4692      	mov	sl, r2
	TFT_SetTextColor(TFT_White);
 80190c2:	f003 fcab 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80190c6:	2063      	movs	r0, #99	; 0x63
 80190c8:	f003 fcae 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 80190cc:	482f      	ldr	r0, [pc, #188]	; (801918c <GUI_TextRu_Cd_m2+0xd8>)
 80190ce:	f003 fc9f 	bl	801ca10 <TFT_SetFont>
 80190d2:	f104 0008 	add.w	r0, r4, #8
 80190d6:	f104 0810 	add.w	r8, r4, #16
 80190da:	f106 070a 	add.w	r7, r6, #10
 80190de:	f104 0906 	add.w	r9, r4, #6
 80190e2:	f106 050c 	add.w	r5, r6, #12
	
	if(deg){
		TFT_DrawCharRus(X+8, Y, 'к');
 80190e6:	22ba      	movs	r2, #186	; 0xba
 80190e8:	4631      	mov	r1, r6
 80190ea:	b280      	uxth	r0, r0
	if(deg){
 80190ec:	f1ba 0f00 	cmp.w	sl, #0
 80190f0:	d02c      	beq.n	801914c <GUI_TextRu_Cd_m2+0x98>
		TFT_DrawCharRus(X+8, Y, 'к');
 80190f2:	f003 fc9f 	bl	801ca34 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'к');
 80190f6:	22ba      	movs	r2, #186	; 0xba
 80190f8:	4631      	mov	r1, r6
 80190fa:	fa1f f088 	uxth.w	r0, r8
 80190fe:	f003 fc99 	bl	801ca34 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+24, Y, 'д');
 8019102:	f104 0018 	add.w	r0, r4, #24
 8019106:	22b4      	movs	r2, #180	; 0xb4
 8019108:	4631      	mov	r1, r6
 801910a:	b280      	uxth	r0, r0
 801910c:	f003 fc92 	bl	801ca34 <TFT_DrawCharRus>
		
		TFT_DrawLine(X+6, Y+10, X+31, Y+10, TFT_White);
 8019110:	b2bb      	uxth	r3, r7
 8019112:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019116:	f104 021f 	add.w	r2, r4, #31
 801911a:	9100      	str	r1, [sp, #0]
 801911c:	b292      	uxth	r2, r2
 801911e:	4619      	mov	r1, r3
 8019120:	fa1f f089 	uxth.w	r0, r9
 8019124:	f003 f9ee 	bl	801c504 <TFT_DrawLine>
		
		TFT_DrawCharRus(X+20, Y+12, 'я'+2);
 8019128:	b2ad      	uxth	r5, r5
 801912a:	f104 0014 	add.w	r0, r4, #20
 801912e:	b280      	uxth	r0, r0
 8019130:	2291      	movs	r2, #145	; 0x91
 8019132:	4629      	mov	r1, r5
 8019134:	f003 fc7e 	bl	801ca34 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+12, Y+12, 'м');}
 8019138:	f104 000c 	add.w	r0, r4, #12
		TFT_DrawCharRus(X+16, Y, 'д');
		
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
		
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 801913c:	22bc      	movs	r2, #188	; 0xbc
 801913e:	4629      	mov	r1, r5
 8019140:	b280      	uxth	r0, r0
		
}
 8019142:	b002      	add	sp, #8
 8019144:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 8019148:	f003 bc74 	b.w	801ca34 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+8, Y, 'к');
 801914c:	f003 fc72 	bl	801ca34 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'д');
 8019150:	22b4      	movs	r2, #180	; 0xb4
 8019152:	4631      	mov	r1, r6
 8019154:	fa1f f088 	uxth.w	r0, r8
 8019158:	f003 fc6c 	bl	801ca34 <TFT_DrawCharRus>
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
 801915c:	b2bb      	uxth	r3, r7
 801915e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019162:	f104 0217 	add.w	r2, r4, #23
 8019166:	9100      	str	r1, [sp, #0]
 8019168:	b292      	uxth	r2, r2
 801916a:	4619      	mov	r1, r3
 801916c:	fa1f f089 	uxth.w	r0, r9
 8019170:	f003 f9c8 	bl	801c504 <TFT_DrawLine>
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
 8019174:	b2ad      	uxth	r5, r5
 8019176:	f104 0011 	add.w	r0, r4, #17
 801917a:	b280      	uxth	r0, r0
 801917c:	2291      	movs	r2, #145	; 0x91
 801917e:	4629      	mov	r1, r5
 8019180:	f003 fc58 	bl	801ca34 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 8019184:	f104 0009 	add.w	r0, r4, #9
 8019188:	e7d8      	b.n	801913c <GUI_TextRu_Cd_m2+0x88>
 801918a:	bf00      	nop
 801918c:	200001a0 	.word	0x200001a0

08019190 <GUI_TextRu_Irradiance>:

void GUI_TextRu_Irradiance(uint16_t X, uint16_t Y)
{
 8019190:	b538      	push	{r3, r4, r5, lr}
 8019192:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019194:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019198:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801919a:	f003 fc3f 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801919e:	2063      	movs	r0, #99	; 0x63
 80191a0:	f003 fc42 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 80191a4:	482d      	ldr	r0, [pc, #180]	; (801925c <GUI_TextRu_Irradiance+0xcc>)
 80191a6:	f003 fc33 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 80191aa:	4621      	mov	r1, r4
 80191ac:	229e      	movs	r2, #158	; 0x9e
 80191ae:	4628      	mov	r0, r5
 80191b0:	f003 fc40 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'б');
 80191b4:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 80191b6:	482a      	ldr	r0, [pc, #168]	; (8019260 <GUI_TextRu_Irradiance+0xd0>)
	TFT_DrawCharRus(X+16, Y+5, 'б');
 80191b8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 80191ba:	f003 fc29 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'б');
 80191be:	f105 0010 	add.w	r0, r5, #16
 80191c2:	4621      	mov	r1, r4
 80191c4:	22b1      	movs	r2, #177	; 0xb1
 80191c6:	b280      	uxth	r0, r0
 80191c8:	f003 fc34 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'л');
 80191cc:	f105 001b 	add.w	r0, r5, #27
 80191d0:	4621      	mov	r1, r4
 80191d2:	22bb      	movs	r2, #187	; 0xbb
 80191d4:	b280      	uxth	r0, r0
 80191d6:	f003 fc2d 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+5, 'у');
 80191da:	f105 0027 	add.w	r0, r5, #39	; 0x27
 80191de:	4621      	mov	r1, r4
 80191e0:	2283      	movs	r2, #131	; 0x83
 80191e2:	b280      	uxth	r0, r0
 80191e4:	f003 fc26 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+51, Y+5, 'ч');
 80191e8:	f105 0033 	add.w	r0, r5, #51	; 0x33
 80191ec:	4621      	mov	r1, r4
 80191ee:	2287      	movs	r2, #135	; 0x87
 80191f0:	b280      	uxth	r0, r0
 80191f2:	f003 fc1f 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'е');
 80191f6:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 80191fa:	4621      	mov	r1, r4
 80191fc:	22b5      	movs	r2, #181	; 0xb5
 80191fe:	b280      	uxth	r0, r0
 8019200:	f003 fc18 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'н');
 8019204:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 8019208:	4621      	mov	r1, r4
 801920a:	22bd      	movs	r2, #189	; 0xbd
 801920c:	b280      	uxth	r0, r0
 801920e:	f003 fc11 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+86, Y+5, 'н');
 8019212:	f105 0056 	add.w	r0, r5, #86	; 0x56
 8019216:	4621      	mov	r1, r4
 8019218:	22bd      	movs	r2, #189	; 0xbd
 801921a:	b280      	uxth	r0, r0
 801921c:	f003 fc0a 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+98, Y+5, 'о');
 8019220:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8019224:	4621      	mov	r1, r4
 8019226:	22be      	movs	r2, #190	; 0xbe
 8019228:	b280      	uxth	r0, r0
 801922a:	f003 fc03 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+110, Y+5, 'с');
 801922e:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 8019232:	4621      	mov	r1, r4
 8019234:	2281      	movs	r2, #129	; 0x81
 8019236:	b280      	uxth	r0, r0
 8019238:	f003 fbfc 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+119, Y+5, 'т');
 801923c:	f105 0077 	add.w	r0, r5, #119	; 0x77
 8019240:	4621      	mov	r1, r4
 8019242:	2282      	movs	r2, #130	; 0x82
 8019244:	b280      	uxth	r0, r0
 8019246:	f003 fbf5 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801924a:	f105 0083 	add.w	r0, r5, #131	; 0x83
 801924e:	4621      	mov	r1, r4
 8019250:	228c      	movs	r2, #140	; 0x8c
 8019252:	b280      	uxth	r0, r0
}
 8019254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 8019258:	f003 bbec 	b.w	801ca34 <TFT_DrawCharRus>
 801925c:	200001d0 	.word	0x200001d0
 8019260:	200001d8 	.word	0x200001d8

08019264 <GUI_TextRu_Luminance>:

void GUI_TextRu_Luminance(uint16_t X, uint16_t Y)
{
 8019264:	b538      	push	{r3, r4, r5, lr}
 8019266:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019268:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801926c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801926e:	f003 fbd5 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019272:	2063      	movs	r0, #99	; 0x63
 8019274:	f003 fbd8 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 8019278:	481c      	ldr	r0, [pc, #112]	; (80192ec <GUI_TextRu_Luminance+0x88>)
 801927a:	f003 fbc9 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 801927e:	4621      	mov	r1, r4
 8019280:	22af      	movs	r2, #175	; 0xaf
 8019282:	4628      	mov	r0, r5
 8019284:	f003 fbd6 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8019288:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801928a:	4819      	ldr	r0, [pc, #100]	; (80192f0 <GUI_TextRu_Luminance+0x8c>)
	TFT_DrawCharRus(X+16, Y+5, 'р');
 801928c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801928e:	f003 fbbf 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'р');
 8019292:	f105 0010 	add.w	r0, r5, #16
 8019296:	4621      	mov	r1, r4
 8019298:	2280      	movs	r2, #128	; 0x80
 801929a:	b280      	uxth	r0, r0
 801929c:	f003 fbca 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'к');
 80192a0:	f105 001c 	add.w	r0, r5, #28
 80192a4:	4621      	mov	r1, r4
 80192a6:	22ba      	movs	r2, #186	; 0xba
 80192a8:	b280      	uxth	r0, r0
 80192aa:	f003 fbc3 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'о');
 80192ae:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80192b2:	4621      	mov	r1, r4
 80192b4:	22be      	movs	r2, #190	; 0xbe
 80192b6:	b280      	uxth	r0, r0
 80192b8:	f003 fbbc 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'с');
 80192bc:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80192c0:	4621      	mov	r1, r4
 80192c2:	2281      	movs	r2, #129	; 0x81
 80192c4:	b280      	uxth	r0, r0
 80192c6:	f003 fbb5 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'т');
 80192ca:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 80192ce:	4621      	mov	r1, r4
 80192d0:	2282      	movs	r2, #130	; 0x82
 80192d2:	b280      	uxth	r0, r0
 80192d4:	f003 fbae 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 80192d8:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 80192dc:	4621      	mov	r1, r4
 80192de:	228c      	movs	r2, #140	; 0x8c
 80192e0:	b280      	uxth	r0, r0
}
 80192e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 80192e6:	f003 bba5 	b.w	801ca34 <TFT_DrawCharRus>
 80192ea:	bf00      	nop
 80192ec:	200001d0 	.word	0x200001d0
 80192f0:	200001d8 	.word	0x200001d8

080192f4 <GUI_TextRu_Radiance>:

void GUI_TextRu_Radiance(uint16_t X, uint16_t Y)
{
 80192f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192f6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80192f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80192fc:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 80192fe:	f003 fb8d 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019302:	2063      	movs	r0, #99	; 0x63
 8019304:	f003 fb90 	bl	801ca28 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
	TFT_DrawCharRus(X, Y, 'Э');
	TFT_SetFont(&Font16RU_arch_small);
 8019308:	4f31      	ldr	r7, [pc, #196]	; (80193d0 <GUI_TextRu_Radiance+0xdc>)
	TFT_SetFont(&Font16RU_arch_big);
 801930a:	4832      	ldr	r0, [pc, #200]	; (80193d4 <GUI_TextRu_Radiance+0xe0>)
 801930c:	f003 fb80 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Э');
 8019310:	4631      	mov	r1, r6
 8019312:	22ad      	movs	r2, #173	; 0xad
 8019314:	4620      	mov	r0, r4
 8019316:	f003 fb8d 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801931a:	1d75      	adds	r5, r6, #5
	TFT_SetFont(&Font16RU_arch_small);
 801931c:	4638      	mov	r0, r7
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801931e:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16RU_arch_small);
 8019320:	f003 fb76 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 8019324:	f104 0010 	add.w	r0, r4, #16
 8019328:	4629      	mov	r1, r5
 801932a:	22bd      	movs	r2, #189	; 0xbd
 801932c:	b280      	uxth	r0, r0
 801932e:	f003 fb81 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y+5, 'е');
 8019332:	f104 001d 	add.w	r0, r4, #29
 8019336:	4629      	mov	r1, r5
 8019338:	22b5      	movs	r2, #181	; 0xb5
 801933a:	b280      	uxth	r0, r0
 801933c:	f003 fb7a 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 8019340:	4825      	ldr	r0, [pc, #148]	; (80193d8 <GUI_TextRu_Radiance+0xe4>)
 8019342:	f003 fb65 	bl	801ca10 <TFT_SetFont>
	TFT_DrawChar(X+46, 		Y, '.');
 8019346:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 801934a:	4631      	mov	r1, r6
 801934c:	222e      	movs	r2, #46	; 0x2e
 801934e:	b280      	uxth	r0, r0
 8019350:	f003 fc28 	bl	801cba4 <TFT_DrawChar>

	TFT_SetFont(&Font16RU_arch_small);
 8019354:	4638      	mov	r0, r7
 8019356:	f003 fb5b 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X+41, Y+5, 'р');
 801935a:	f104 0029 	add.w	r0, r4, #41	; 0x29
 801935e:	4629      	mov	r1, r5
 8019360:	2280      	movs	r2, #128	; 0x80
 8019362:	b280      	uxth	r0, r0
 8019364:	f003 fb66 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+61, Y+5, 'я');
 8019368:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 801936c:	4629      	mov	r1, r5
 801936e:	228f      	movs	r2, #143	; 0x8f
 8019370:	b280      	uxth	r0, r0
 8019372:	f003 fb5f 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'р');
 8019376:	f104 0049 	add.w	r0, r4, #73	; 0x49
 801937a:	4629      	mov	r1, r5
 801937c:	2280      	movs	r2, #128	; 0x80
 801937e:	b280      	uxth	r0, r0
 8019380:	f003 fb58 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'к');
 8019384:	f104 0055 	add.w	r0, r4, #85	; 0x55
 8019388:	4629      	mov	r1, r5
 801938a:	22ba      	movs	r2, #186	; 0xba
 801938c:	b280      	uxth	r0, r0
 801938e:	f003 fb51 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 8019392:	f104 0061 	add.w	r0, r4, #97	; 0x61
 8019396:	4629      	mov	r1, r5
 8019398:	22be      	movs	r2, #190	; 0xbe
 801939a:	b280      	uxth	r0, r0
 801939c:	f003 fb4a 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 80193a0:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 80193a4:	4629      	mov	r1, r5
 80193a6:	2281      	movs	r2, #129	; 0x81
 80193a8:	b280      	uxth	r0, r0
 80193aa:	f003 fb43 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+120, Y+5, 'т');
 80193ae:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80193b2:	4629      	mov	r1, r5
 80193b4:	2282      	movs	r2, #130	; 0x82
 80193b6:	b280      	uxth	r0, r0
 80193b8:	f003 fb3c 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 80193bc:	f104 0083 	add.w	r0, r4, #131	; 0x83
 80193c0:	4629      	mov	r1, r5
 80193c2:	228c      	movs	r2, #140	; 0x8c
 80193c4:	b280      	uxth	r0, r0

}
 80193c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 80193ca:	f003 bb33 	b.w	801ca34 <TFT_DrawCharRus>
 80193ce:	bf00      	nop
 80193d0:	200001d8 	.word	0x200001d8
 80193d4:	200001d0 	.word	0x200001d0
 80193d8:	200001b0 	.word	0x200001b0

080193dc <GUI_TextMsgRu_LowIrradiance>:

void GUI_TextMsgRu_LowIrradiance(uint16_t X, uint16_t Y)
{
 80193dc:	b538      	push	{r3, r4, r5, lr}
 80193de:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80193e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80193e4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80193e6:	f003 fb19 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80193ea:	2063      	movs	r0, #99	; 0x63
 80193ec:	f003 fb1c 	bl	801ca28 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 80193f0:	483f      	ldr	r0, [pc, #252]	; (80194f0 <GUI_TextMsgRu_LowIrradiance+0x114>)
 80193f2:	f003 fb0d 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 80193f6:	4621      	mov	r1, r4
 80193f8:	229c      	movs	r2, #156	; 0x9c
 80193fa:	4628      	mov	r0, r5
 80193fc:	f003 fb1a 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8019400:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 8019402:	483c      	ldr	r0, [pc, #240]	; (80194f4 <GUI_TextMsgRu_LowIrradiance+0x118>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8019404:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8019406:	f003 fb03 	bl	801ca10 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801940a:	f105 0010 	add.w	r0, r5, #16
 801940e:	4621      	mov	r1, r4
 8019410:	22b0      	movs	r2, #176	; 0xb0
 8019412:	b280      	uxth	r0, r0
 8019414:	f003 fb0e 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8019418:	f105 001c 	add.w	r0, r5, #28
 801941c:	4621      	mov	r1, r4
 801941e:	22bb      	movs	r2, #187	; 0xbb
 8019420:	b280      	uxth	r0, r0
 8019422:	f003 fb07 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 8019426:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801942a:	4621      	mov	r1, r4
 801942c:	22b0      	movs	r2, #176	; 0xb0
 801942e:	b280      	uxth	r0, r0
 8019430:	f003 fb00 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 8019434:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8019438:	4621      	mov	r1, r4
 801943a:	228f      	movs	r2, #143	; 0x8f
 801943c:	b280      	uxth	r0, r0
 801943e:	f003 faf9 	bl	801ca34 <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'о');
 8019442:	f105 0049 	add.w	r0, r5, #73	; 0x49
 8019446:	4621      	mov	r1, r4
 8019448:	22be      	movs	r2, #190	; 0xbe
 801944a:	b280      	uxth	r0, r0
 801944c:	f003 faf2 	bl	801ca34 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+87, Y+5, 'б');
 8019450:	f105 0057 	add.w	r0, r5, #87	; 0x57
 8019454:	4621      	mov	r1, r4
 8019456:	22b1      	movs	r2, #177	; 0xb1
 8019458:	b280      	uxth	r0, r0
 801945a:	f003 faeb 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+98, Y+5, 'л');
 801945e:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8019462:	4621      	mov	r1, r4
 8019464:	22bb      	movs	r2, #187	; 0xbb
 8019466:	b280      	uxth	r0, r0
 8019468:	f003 fae4 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+110, Y+5, 'у');
 801946c:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 8019470:	4621      	mov	r1, r4
 8019472:	2283      	movs	r2, #131	; 0x83
 8019474:	b280      	uxth	r0, r0
 8019476:	f003 fadd 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+122, Y+5, 'ч');
 801947a:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 801947e:	4621      	mov	r1, r4
 8019480:	2287      	movs	r2, #135	; 0x87
 8019482:	b280      	uxth	r0, r0
 8019484:	f003 fad6 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+134, Y+5, 'е');
 8019488:	f105 0086 	add.w	r0, r5, #134	; 0x86
 801948c:	4621      	mov	r1, r4
 801948e:	22b5      	movs	r2, #181	; 0xb5
 8019490:	b280      	uxth	r0, r0
 8019492:	f003 facf 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+145, Y+5, 'н');
 8019496:	f105 0091 	add.w	r0, r5, #145	; 0x91
 801949a:	4621      	mov	r1, r4
 801949c:	22bd      	movs	r2, #189	; 0xbd
 801949e:	b280      	uxth	r0, r0
 80194a0:	f003 fac8 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+157, Y+5, 'н');
 80194a4:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 80194a8:	4621      	mov	r1, r4
 80194aa:	22bd      	movs	r2, #189	; 0xbd
 80194ac:	b280      	uxth	r0, r0
 80194ae:	f003 fac1 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+169, Y+5, 'о');
 80194b2:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
 80194b6:	4621      	mov	r1, r4
 80194b8:	22be      	movs	r2, #190	; 0xbe
 80194ba:	b280      	uxth	r0, r0
 80194bc:	f003 faba 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+181, Y+5, 'с');
 80194c0:	f105 00b5 	add.w	r0, r5, #181	; 0xb5
 80194c4:	4621      	mov	r1, r4
 80194c6:	2281      	movs	r2, #129	; 0x81
 80194c8:	b280      	uxth	r0, r0
 80194ca:	f003 fab3 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+190, Y+5, 'т');
 80194ce:	f105 00be 	add.w	r0, r5, #190	; 0xbe
 80194d2:	4621      	mov	r1, r4
 80194d4:	2282      	movs	r2, #130	; 0x82
 80194d6:	b280      	uxth	r0, r0
 80194d8:	f003 faac 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 80194dc:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 80194e0:	4621      	mov	r1, r4
 80194e2:	228c      	movs	r2, #140	; 0x8c
 80194e4:	b280      	uxth	r0, r0
}
 80194e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 80194ea:	f003 baa3 	b.w	801ca34 <TFT_DrawCharRus>
 80194ee:	bf00      	nop
 80194f0:	200001d0 	.word	0x200001d0
 80194f4:	200001d8 	.word	0x200001d8

080194f8 <GUI_TextMsgRu_LowRadiance>:

void GUI_TextMsgRu_LowRadiance(uint16_t X, uint16_t Y)
{
 80194f8:	b538      	push	{r3, r4, r5, lr}
 80194fa:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80194fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019500:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019502:	f003 fa8b 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019506:	2063      	movs	r0, #99	; 0x63
 8019508:	f003 fa8e 	bl	801ca28 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801950c:	482d      	ldr	r0, [pc, #180]	; (80195c4 <GUI_TextMsgRu_LowRadiance+0xcc>)
 801950e:	f003 fa7f 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 8019512:	4621      	mov	r1, r4
 8019514:	229c      	movs	r2, #156	; 0x9c
 8019516:	4628      	mov	r0, r5
 8019518:	f003 fa8c 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801951c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801951e:	482a      	ldr	r0, [pc, #168]	; (80195c8 <GUI_TextMsgRu_LowRadiance+0xd0>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8019520:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 8019522:	f003 fa75 	bl	801ca10 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 8019526:	f105 0010 	add.w	r0, r5, #16
 801952a:	4621      	mov	r1, r4
 801952c:	22b0      	movs	r2, #176	; 0xb0
 801952e:	b280      	uxth	r0, r0
 8019530:	f003 fa80 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8019534:	f105 001c 	add.w	r0, r5, #28
 8019538:	4621      	mov	r1, r4
 801953a:	22bb      	movs	r2, #187	; 0xbb
 801953c:	b280      	uxth	r0, r0
 801953e:	f003 fa79 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 8019542:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8019546:	4621      	mov	r1, r4
 8019548:	22b0      	movs	r2, #176	; 0xb0
 801954a:	b280      	uxth	r0, r0
 801954c:	f003 fa72 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 8019550:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8019554:	4621      	mov	r1, r4
 8019556:	228f      	movs	r2, #143	; 0x8f
 8019558:	b280      	uxth	r0, r0
 801955a:	f003 fa6b 	bl	801ca34 <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'я');
 801955e:	f105 0049 	add.w	r0, r5, #73	; 0x49
 8019562:	4621      	mov	r1, r4
 8019564:	228f      	movs	r2, #143	; 0x8f
 8019566:	b280      	uxth	r0, r0
 8019568:	f003 fa64 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+85, Y+5, 'р');
 801956c:	f105 0055 	add.w	r0, r5, #85	; 0x55
 8019570:	4621      	mov	r1, r4
 8019572:	2280      	movs	r2, #128	; 0x80
 8019574:	b280      	uxth	r0, r0
 8019576:	f003 fa5d 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+97, Y+5, 'к');
 801957a:	f105 0061 	add.w	r0, r5, #97	; 0x61
 801957e:	4621      	mov	r1, r4
 8019580:	22ba      	movs	r2, #186	; 0xba
 8019582:	b280      	uxth	r0, r0
 8019584:	f003 fa56 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+109, Y+5, 'о');
 8019588:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 801958c:	4621      	mov	r1, r4
 801958e:	22be      	movs	r2, #190	; 0xbe
 8019590:	b280      	uxth	r0, r0
 8019592:	f003 fa4f 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+121, Y+5, 'с');
 8019596:	f105 0079 	add.w	r0, r5, #121	; 0x79
 801959a:	4621      	mov	r1, r4
 801959c:	2281      	movs	r2, #129	; 0x81
 801959e:	b280      	uxth	r0, r0
 80195a0:	f003 fa48 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+132, Y+5, 'т');
 80195a4:	f105 0084 	add.w	r0, r5, #132	; 0x84
 80195a8:	4621      	mov	r1, r4
 80195aa:	2282      	movs	r2, #130	; 0x82
 80195ac:	b280      	uxth	r0, r0
 80195ae:	f003 fa41 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 80195b2:	f105 008f 	add.w	r0, r5, #143	; 0x8f
 80195b6:	4621      	mov	r1, r4
 80195b8:	228c      	movs	r2, #140	; 0x8c
 80195ba:	b280      	uxth	r0, r0
}
 80195bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 80195c0:	f003 ba38 	b.w	801ca34 <TFT_DrawCharRus>
 80195c4:	200001d0 	.word	0x200001d0
 80195c8:	200001d8 	.word	0x200001d8

080195cc <GUI_TextMsgRu_HighIrradiance>:

void GUI_TextMsgRu_HighIrradiance(uint16_t X, uint16_t Y)
{
 80195cc:	b538      	push	{r3, r4, r5, lr}
 80195ce:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80195d0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80195d4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80195d6:	f003 fa21 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80195da:	2063      	movs	r0, #99	; 0x63
 80195dc:	f003 fa24 	bl	801ca28 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 80195e0:	4846      	ldr	r0, [pc, #280]	; (80196fc <GUI_TextMsgRu_HighIrradiance+0x130>)
 80195e2:	f003 fa15 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 80195e6:	4621      	mov	r1, r4
 80195e8:	2291      	movs	r2, #145	; 0x91
 80195ea:	4628      	mov	r0, r5
 80195ec:	f003 fa22 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 80195f0:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 80195f2:	4843      	ldr	r0, [pc, #268]	; (8019700 <GUI_TextMsgRu_HighIrradiance+0x134>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 80195f4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 80195f6:	f003 fa0b 	bl	801ca10 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 80195fa:	f105 0010 	add.w	r0, r5, #16
 80195fe:	4621      	mov	r1, r4
 8019600:	22be      	movs	r2, #190	; 0xbe
 8019602:	b280      	uxth	r0, r0
 8019604:	f003 fa16 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8019608:	f105 001c 	add.w	r0, r5, #28
 801960c:	4621      	mov	r1, r4
 801960e:	22bb      	movs	r2, #187	; 0xbb
 8019610:	b280      	uxth	r0, r0
 8019612:	f003 fa0f 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 8019616:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801961a:	4621      	mov	r1, r4
 801961c:	228c      	movs	r2, #140	; 0x8c
 801961e:	b280      	uxth	r0, r0
 8019620:	f003 fa08 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 8019624:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8019628:	4621      	mov	r1, r4
 801962a:	2288      	movs	r2, #136	; 0x88
 801962c:	b280      	uxth	r0, r0
 801962e:	f003 fa01 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 8019632:	f105 0043 	add.w	r0, r5, #67	; 0x43
 8019636:	4621      	mov	r1, r4
 8019638:	22b0      	movs	r2, #176	; 0xb0
 801963a:	b280      	uxth	r0, r0
 801963c:	f003 f9fa 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 8019640:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 8019644:	4621      	mov	r1, r4
 8019646:	228f      	movs	r2, #143	; 0x8f
 8019648:	b280      	uxth	r0, r0
 801964a:	f003 f9f3 	bl	801ca34 <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'о');
 801964e:	f105 0066 	add.w	r0, r5, #102	; 0x66
 8019652:	4621      	mov	r1, r4
 8019654:	22be      	movs	r2, #190	; 0xbe
 8019656:	b280      	uxth	r0, r0
 8019658:	f003 f9ec 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+116, Y+5, 'б');
 801965c:	f105 0074 	add.w	r0, r5, #116	; 0x74
 8019660:	4621      	mov	r1, r4
 8019662:	22b1      	movs	r2, #177	; 0xb1
 8019664:	b280      	uxth	r0, r0
 8019666:	f003 f9e5 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+127, Y+5, 'л');
 801966a:	f105 007f 	add.w	r0, r5, #127	; 0x7f
 801966e:	4621      	mov	r1, r4
 8019670:	22bb      	movs	r2, #187	; 0xbb
 8019672:	b280      	uxth	r0, r0
 8019674:	f003 f9de 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+139, Y+5, 'у');
 8019678:	f105 008b 	add.w	r0, r5, #139	; 0x8b
 801967c:	4621      	mov	r1, r4
 801967e:	2283      	movs	r2, #131	; 0x83
 8019680:	b280      	uxth	r0, r0
 8019682:	f003 f9d7 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+151, Y+5, 'ч');
 8019686:	f105 0097 	add.w	r0, r5, #151	; 0x97
 801968a:	4621      	mov	r1, r4
 801968c:	2287      	movs	r2, #135	; 0x87
 801968e:	b280      	uxth	r0, r0
 8019690:	f003 f9d0 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+163, Y+5, 'е');
 8019694:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
 8019698:	4621      	mov	r1, r4
 801969a:	22b5      	movs	r2, #181	; 0xb5
 801969c:	b280      	uxth	r0, r0
 801969e:	f003 f9c9 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+174, Y+5, 'н');
 80196a2:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 80196a6:	4621      	mov	r1, r4
 80196a8:	22bd      	movs	r2, #189	; 0xbd
 80196aa:	b280      	uxth	r0, r0
 80196ac:	f003 f9c2 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+186, Y+5, 'н');
 80196b0:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 80196b4:	4621      	mov	r1, r4
 80196b6:	22bd      	movs	r2, #189	; 0xbd
 80196b8:	b280      	uxth	r0, r0
 80196ba:	f003 f9bb 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+198, Y+5, 'о');
 80196be:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 80196c2:	4621      	mov	r1, r4
 80196c4:	22be      	movs	r2, #190	; 0xbe
 80196c6:	b280      	uxth	r0, r0
 80196c8:	f003 f9b4 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+210, Y+5, 'с');
 80196cc:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 80196d0:	4621      	mov	r1, r4
 80196d2:	2281      	movs	r2, #129	; 0x81
 80196d4:	b280      	uxth	r0, r0
 80196d6:	f003 f9ad 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+219, Y+5, 'т');
 80196da:	f105 00db 	add.w	r0, r5, #219	; 0xdb
 80196de:	4621      	mov	r1, r4
 80196e0:	2282      	movs	r2, #130	; 0x82
 80196e2:	b280      	uxth	r0, r0
 80196e4:	f003 f9a6 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 80196e8:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
 80196ec:	4621      	mov	r1, r4
 80196ee:	228c      	movs	r2, #140	; 0x8c
 80196f0:	b280      	uxth	r0, r0
}
 80196f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 80196f6:	f003 b99d 	b.w	801ca34 <TFT_DrawCharRus>
 80196fa:	bf00      	nop
 80196fc:	200001d0 	.word	0x200001d0
 8019700:	200001d8 	.word	0x200001d8

08019704 <GUI_TextMsgRu_HighRadiance>:

void GUI_TextMsgRu_HighRadiance(uint16_t X, uint16_t Y)
{
 8019704:	b538      	push	{r3, r4, r5, lr}
 8019706:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019708:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801970c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801970e:	f003 f985 	bl	801ca1c <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019712:	2063      	movs	r0, #99	; 0x63
 8019714:	f003 f988 	bl	801ca28 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 8019718:	4834      	ldr	r0, [pc, #208]	; (80197ec <GUI_TextMsgRu_HighRadiance+0xe8>)
 801971a:	f003 f979 	bl	801ca10 <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 801971e:	4621      	mov	r1, r4
 8019720:	2291      	movs	r2, #145	; 0x91
 8019722:	4628      	mov	r0, r5
 8019724:	f003 f986 	bl	801ca34 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019728:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801972a:	4831      	ldr	r0, [pc, #196]	; (80197f0 <GUI_TextMsgRu_HighRadiance+0xec>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801972c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801972e:	f003 f96f 	bl	801ca10 <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 8019732:	f105 0010 	add.w	r0, r5, #16
 8019736:	4621      	mov	r1, r4
 8019738:	22be      	movs	r2, #190	; 0xbe
 801973a:	b280      	uxth	r0, r0
 801973c:	f003 f97a 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 8019740:	f105 001c 	add.w	r0, r5, #28
 8019744:	4621      	mov	r1, r4
 8019746:	22bb      	movs	r2, #187	; 0xbb
 8019748:	b280      	uxth	r0, r0
 801974a:	f003 f973 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 801974e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8019752:	4621      	mov	r1, r4
 8019754:	228c      	movs	r2, #140	; 0x8c
 8019756:	b280      	uxth	r0, r0
 8019758:	f003 f96c 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 801975c:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8019760:	4621      	mov	r1, r4
 8019762:	2288      	movs	r2, #136	; 0x88
 8019764:	b280      	uxth	r0, r0
 8019766:	f003 f965 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 801976a:	f105 0043 	add.w	r0, r5, #67	; 0x43
 801976e:	4621      	mov	r1, r4
 8019770:	22b0      	movs	r2, #176	; 0xb0
 8019772:	b280      	uxth	r0, r0
 8019774:	f003 f95e 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 8019778:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 801977c:	4621      	mov	r1, r4
 801977e:	228f      	movs	r2, #143	; 0x8f
 8019780:	b280      	uxth	r0, r0
 8019782:	f003 f957 	bl	801ca34 <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'я');
 8019786:	f105 0066 	add.w	r0, r5, #102	; 0x66
 801978a:	4621      	mov	r1, r4
 801978c:	228f      	movs	r2, #143	; 0x8f
 801978e:	b280      	uxth	r0, r0
 8019790:	f003 f950 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+114, Y+5, 'р');
 8019794:	f105 0072 	add.w	r0, r5, #114	; 0x72
 8019798:	4621      	mov	r1, r4
 801979a:	2280      	movs	r2, #128	; 0x80
 801979c:	b280      	uxth	r0, r0
 801979e:	f003 f949 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+126, Y+5, 'к');
 80197a2:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 80197a6:	4621      	mov	r1, r4
 80197a8:	22ba      	movs	r2, #186	; 0xba
 80197aa:	b280      	uxth	r0, r0
 80197ac:	f003 f942 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+138, Y+5, 'о');
 80197b0:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 80197b4:	4621      	mov	r1, r4
 80197b6:	22be      	movs	r2, #190	; 0xbe
 80197b8:	b280      	uxth	r0, r0
 80197ba:	f003 f93b 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+150, Y+5, 'с');
 80197be:	f105 0096 	add.w	r0, r5, #150	; 0x96
 80197c2:	4621      	mov	r1, r4
 80197c4:	2281      	movs	r2, #129	; 0x81
 80197c6:	b280      	uxth	r0, r0
 80197c8:	f003 f934 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+161, Y+5, 'т');
 80197cc:	f105 00a1 	add.w	r0, r5, #161	; 0xa1
 80197d0:	4621      	mov	r1, r4
 80197d2:	2282      	movs	r2, #130	; 0x82
 80197d4:	b280      	uxth	r0, r0
 80197d6:	f003 f92d 	bl	801ca34 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 80197da:	f105 00ac 	add.w	r0, r5, #172	; 0xac
 80197de:	4621      	mov	r1, r4
 80197e0:	228c      	movs	r2, #140	; 0x8c
 80197e2:	b280      	uxth	r0, r0
}
 80197e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 80197e8:	f003 b924 	b.w	801ca34 <TFT_DrawCharRus>
 80197ec:	200001d0 	.word	0x200001d0
 80197f0:	200001d8 	.word	0x200001d8

080197f4 <Set.part.0>:
void Set(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_SET);
 80197f4:	2201      	movs	r2, #1
 80197f6:	2102      	movs	r1, #2
 80197f8:	4801      	ldr	r0, [pc, #4]	; (8019800 <Set.part.0+0xc>)
 80197fa:	f7e8 be97 	b.w	800252c <HAL_GPIO_WritePin>
 80197fe:	bf00      	nop
 8019800:	48000400 	.word	0x48000400

08019804 <Reset.part.1>:
void Reset(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_RESET);
 8019804:	2200      	movs	r2, #0
 8019806:	2102      	movs	r1, #2
 8019808:	4801      	ldr	r0, [pc, #4]	; (8019810 <Reset.part.1+0xc>)
 801980a:	f7e8 be8f 	b.w	800252c <HAL_GPIO_WritePin>
 801980e:	bf00      	nop
 8019810:	48000400 	.word	0x48000400

08019814 <GPIO_QSPI_Init>:
{
 8019814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8019818:	4b39      	ldr	r3, [pc, #228]	; (8019900 <GPIO_QSPI_Init+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801981a:	4c3a      	ldr	r4, [pc, #232]	; (8019904 <GPIO_QSPI_Init+0xf0>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 801981c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801981e:	4f3a      	ldr	r7, [pc, #232]	; (8019908 <GPIO_QSPI_Init+0xf4>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8019820:	f042 0220 	orr.w	r2, r2, #32
 8019824:	64da      	str	r2, [r3, #76]	; 0x4c
 8019826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019828:	f002 0220 	and.w	r2, r2, #32
 801982c:	9201      	str	r2, [sp, #4]
 801982e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019830:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019832:	f042 0201 	orr.w	r2, r2, #1
 8019836:	64da      	str	r2, [r3, #76]	; 0x4c
 8019838:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801983a:	f002 0201 	and.w	r2, r2, #1
 801983e:	9202      	str	r2, [sp, #8]
 8019840:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019842:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8019844:	f042 0202 	orr.w	r2, r2, #2
 8019848:	64da      	str	r2, [r3, #76]	; 0x4c
 801984a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801984c:	f003 0302 	and.w	r3, r3, #2
 8019850:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019852:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019854:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019856:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801985a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801985c:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801985e:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019860:	4621      	mov	r1, r4
 8019862:	4638      	mov	r0, r7
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019864:	e884 0048 	stmia.w	r4, {r3, r6}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8019868:	f04f 0904 	mov.w	r9, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801986c:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8019870:	f7e8 fce6 	bl	8002240 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019874:	4621      	mov	r1, r4
 8019876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801987a:	f8c4 9000 	str.w	r9, [r4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801987e:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8019880:	60a6      	str	r6, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019882:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019886:	f7e8 fcdb 	bl	8002240 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 801988a:	4649      	mov	r1, r9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801988c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 801990c <GPIO_QSPI_Init+0xf8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8019890:	4632      	mov	r2, r6
 8019892:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019896:	f7e8 fe49 	bl	800252c <HAL_GPIO_WritePin>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801989a:	4621      	mov	r1, r4
 801989c:	4648      	mov	r0, r9
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 801989e:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80198a2:	f8c4 8000 	str.w	r8, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80198a6:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80198a8:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80198aa:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80198ae:	f7e8 fcc7 	bl	8002240 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80198b2:	4621      	mov	r1, r4
 80198b4:	4638      	mov	r0, r7
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 80198b6:	f8c4 a000 	str.w	sl, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80198ba:	6066      	str	r6, [r4, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80198bc:	60a5      	str	r5, [r4, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80198be:	f8c4 800c 	str.w	r8, [r4, #12]
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80198c2:	f7e8 fcbd 	bl	8002240 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80198c6:	462a      	mov	r2, r5
 80198c8:	4631      	mov	r1, r6
 80198ca:	4648      	mov	r0, r9
 80198cc:	f7e8 fe2e 	bl	800252c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80198d0:	462a      	mov	r2, r5
 80198d2:	4648      	mov	r0, r9
 80198d4:	2102      	movs	r1, #2
 80198d6:	f7e8 fe29 	bl	800252c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 80198da:	462a      	mov	r2, r5
 80198dc:	4638      	mov	r0, r7
 80198de:	2140      	movs	r1, #64	; 0x40
 80198e0:	f7e8 fe24 	bl	800252c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 80198e4:	462a      	mov	r2, r5
 80198e6:	4638      	mov	r0, r7
 80198e8:	2180      	movs	r1, #128	; 0x80
 80198ea:	f7e8 fe1f 	bl	800252c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 80198ee:	462a      	mov	r2, r5
 80198f0:	4651      	mov	r1, sl
 80198f2:	4638      	mov	r0, r7
 80198f4:	f7e8 fe1a 	bl	800252c <HAL_GPIO_WritePin>
}
 80198f8:	b004      	add	sp, #16
 80198fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198fe:	bf00      	nop
 8019900:	40021000 	.word	0x40021000
 8019904:	20005744 	.word	0x20005744
 8019908:	48001400 	.word	0x48001400
 801990c:	48000400 	.word	0x48000400

08019910 <Set>:
	switch(pin)
 8019910:	3801      	subs	r0, #1
 8019912:	2805      	cmp	r0, #5
 8019914:	d81b      	bhi.n	801994e <Set+0x3e>
 8019916:	e8df f000 	tbb	[pc, r0]
 801991a:	0503      	.short	0x0503
 801991c:	16110e0a 	.word	0x16110e0a
 8019920:	f7ff bf68 	b.w	80197f4 <Set.part.0>
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_SET);
 8019924:	2201      	movs	r2, #1
 8019926:	480a      	ldr	r0, [pc, #40]	; (8019950 <Set+0x40>)
 8019928:	4611      	mov	r1, r2
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801992a:	f7e8 bdff 	b.w	800252c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_SET);
 801992e:	2201      	movs	r2, #1
 8019930:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8019932:	4808      	ldr	r0, [pc, #32]	; (8019954 <Set+0x44>)
 8019934:	e7f9      	b.n	801992a <Set+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_SET);
 8019936:	2201      	movs	r2, #1
 8019938:	2140      	movs	r1, #64	; 0x40
 801993a:	e7fa      	b.n	8019932 <Set+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 801993c:	2201      	movs	r2, #1
 801993e:	2104      	movs	r1, #4
 8019940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019944:	e7f1      	b.n	801992a <Set+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 8019946:	2201      	movs	r2, #1
 8019948:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801994c:	e7f1      	b.n	8019932 <Set+0x22>
 801994e:	4770      	bx	lr
 8019950:	48000400 	.word	0x48000400
 8019954:	48001400 	.word	0x48001400

08019958 <Reset>:
	switch(pin)
 8019958:	3801      	subs	r0, #1
 801995a:	2805      	cmp	r0, #5
 801995c:	d81b      	bhi.n	8019996 <Reset+0x3e>
 801995e:	e8df f000 	tbb	[pc, r0]
 8019962:	0503      	.short	0x0503
 8019964:	16110e0a 	.word	0x16110e0a
 8019968:	f7ff bf4c 	b.w	8019804 <Reset.part.1>
			break;
		case io1:
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_RESET);
 801996c:	480a      	ldr	r0, [pc, #40]	; (8019998 <Reset+0x40>)
 801996e:	2200      	movs	r2, #0
 8019970:	2101      	movs	r1, #1
			break;
		case cs:
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
			break;
		case clk:
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 8019972:	f7e8 bddb 	b.w	800252c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_RESET);
 8019976:	2200      	movs	r2, #0
 8019978:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801997a:	4808      	ldr	r0, [pc, #32]	; (801999c <Reset+0x44>)
 801997c:	e7f9      	b.n	8019972 <Reset+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_RESET);
 801997e:	2200      	movs	r2, #0
 8019980:	2140      	movs	r1, #64	; 0x40
 8019982:	e7fa      	b.n	801997a <Reset+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 8019984:	2200      	movs	r2, #0
 8019986:	2104      	movs	r1, #4
 8019988:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801998c:	e7f1      	b.n	8019972 <Reset+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801998e:	2200      	movs	r2, #0
 8019990:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019994:	e7f1      	b.n	801997a <Reset+0x22>
 8019996:	4770      	bx	lr
 8019998:	48000400 	.word	0x48000400
 801999c:	48001400 	.word	0x48001400

080199a0 <QSPI_Recieve_Init>:
	}
}

/* */
void QSPI_Recieve_Init(void)
{
 80199a0:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80199a2:	4c09      	ldr	r4, [pc, #36]	; (80199c8 <QSPI_Recieve_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80199a4:	4809      	ldr	r0, [pc, #36]	; (80199cc <QSPI_Recieve_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80199a6:	2303      	movs	r3, #3
 80199a8:	2500      	movs	r5, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80199aa:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80199ac:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80199b0:	f7e8 fc46 	bl	8002240 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80199b4:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80199b6:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80199ba:	4621      	mov	r1, r4
 80199bc:	4804      	ldr	r0, [pc, #16]	; (80199d0 <QSPI_Recieve_Init+0x30>)
}
 80199be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80199c2:	f7e8 bc3d 	b.w	8002240 <HAL_GPIO_Init>
 80199c6:	bf00      	nop
 80199c8:	20005744 	.word	0x20005744
 80199cc:	48000400 	.word	0x48000400
 80199d0:	48001400 	.word	0x48001400

080199d4 <QSPI_Transmit_Init>:
void QSPI_Transmit_Init(void)
{
 80199d4:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80199d6:	4c09      	ldr	r4, [pc, #36]	; (80199fc <QSPI_Transmit_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80199d8:	4809      	ldr	r0, [pc, #36]	; (8019a00 <QSPI_Transmit_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80199da:	2303      	movs	r3, #3
 80199dc:	2501      	movs	r5, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80199de:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80199e0:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80199e4:	f7e8 fc2c 	bl	8002240 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80199e8:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80199ea:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80199ee:	4621      	mov	r1, r4
 80199f0:	4804      	ldr	r0, [pc, #16]	; (8019a04 <QSPI_Transmit_Init+0x30>)
}
 80199f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80199f6:	f7e8 bc23 	b.w	8002240 <HAL_GPIO_Init>
 80199fa:	bf00      	nop
 80199fc:	20005744 	.word	0x20005744
 8019a00:	48000400 	.word	0x48000400
 8019a04:	48001400 	.word	0x48001400

08019a08 <Single_Mode>:
void Single_Mode(void)
{
 8019a08:	b570      	push	{r4, r5, r6, lr}
	/* PB1 (IO0) */
	GPIO_InitStruct.Pin = IO0_PIN;
 8019a0a:	4c0d      	ldr	r4, [pc, #52]	; (8019a40 <Single_Mode+0x38>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8019a0c:	4e0d      	ldr	r6, [pc, #52]	; (8019a44 <Single_Mode+0x3c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019a0e:	2501      	movs	r5, #1
 8019a10:	2302      	movs	r3, #2
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8019a12:	4621      	mov	r1, r4
 8019a14:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019a16:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 8019a1a:	f7e8 fc11 	bl	8002240 <HAL_GPIO_Init>
	
	/* PB0 (IO1) */
	GPIO_InitStruct.Pin = IO1_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019a1e:	2300      	movs	r3, #0
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 8019a20:	4621      	mov	r1, r4
 8019a22:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8019a24:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pin = IO1_PIN;
 8019a26:	6025      	str	r5, [r4, #0]
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 8019a28:	f7e8 fc0a 	bl	8002240 <HAL_GPIO_Init>
	
	/* PF7 (IO2) */
	GPIO_InitStruct.Pin = IO2_PIN;
 8019a2c:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8019a2e:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 8019a32:	4621      	mov	r1, r4
 8019a34:	4804      	ldr	r0, [pc, #16]	; (8019a48 <Single_Mode+0x40>)
}
 8019a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 8019a3a:	f7e8 bc01 	b.w	8002240 <HAL_GPIO_Init>
 8019a3e:	bf00      	nop
 8019a40:	20005744 	.word	0x20005744
 8019a44:	48000400 	.word	0x48000400
 8019a48:	48001400 	.word	0x48001400

08019a4c <SPI_Byte_T>:

/* Single mode SPI functions */

/* Byte transmit function */
void SPI_Byte_T(uint8_t byte)
{
 8019a4c:	b538      	push	{r3, r4, r5, lr}
 8019a4e:	4605      	mov	r5, r0
 8019a50:	2408      	movs	r4, #8
	for(uint8_t i=0; i<8; i++)
	{
		if(0x80 & byte)
 8019a52:	062b      	lsls	r3, r5, #24
 8019a54:	d501      	bpl.n	8019a5a <SPI_Byte_T+0xe>
 8019a56:	f7ff fecd 	bl	80197f4 <Set.part.0>
		{
			Set(io0);
		}
		Set(clk);
 8019a5a:	2006      	movs	r0, #6
 8019a5c:	f7ff ff58 	bl	8019910 <Set>
 8019a60:	3c01      	subs	r4, #1
 8019a62:	f7ff fecf 	bl	8019804 <Reset.part.1>
		Reset(io0);	
		byte=(byte<<1);
		Reset(clk);	
 8019a66:	2006      	movs	r0, #6
		byte=(byte<<1);
 8019a68:	006d      	lsls	r5, r5, #1
		Reset(clk);	
 8019a6a:	f7ff ff75 	bl	8019958 <Reset>
	for(uint8_t i=0; i<8; i++)
 8019a6e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		byte=(byte<<1);
 8019a72:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<8; i++)
 8019a74:	d1ed      	bne.n	8019a52 <SPI_Byte_T+0x6>
	}	
}
 8019a76:	bd38      	pop	{r3, r4, r5, pc}

08019a78 <SPI_Byte_R>:
	
	SPI_Check_Busy();
}
/* Byte receive function */
uint8_t SPI_Byte_R(void)
{
 8019a78:	b570      	push	{r4, r5, r6, lr}
	uint8_t byte=0;
	for(uint8_t i=0; i<8; i++)
 8019a7a:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 8019a7c:	4e0d      	ldr	r6, [pc, #52]	; (8019ab4 <SPI_Byte_R+0x3c>)
	uint8_t byte=0;
 8019a7e:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 8019a80:	2101      	movs	r1, #1
 8019a82:	4630      	mov	r0, r6
 8019a84:	f7e8 fd4c 	bl	8002520 <HAL_GPIO_ReadPin>
 8019a88:	b108      	cbz	r0, 8019a8e <SPI_Byte_R+0x16>
 8019a8a:	f044 0401 	orr.w	r4, r4, #1
		Set(clk);
 8019a8e:	2006      	movs	r0, #6
 8019a90:	f7ff ff3e 	bl	8019910 <Set>
		if (i<7) byte=(byte<<1);
 8019a94:	2d07      	cmp	r5, #7
	for(uint8_t i=0; i<8; i++)
 8019a96:	f105 0501 	add.w	r5, r5, #1
		if (i<7) byte=(byte<<1);
 8019a9a:	bf18      	it	ne
 8019a9c:	0064      	lslne	r4, r4, #1
		Reset(clk);
 8019a9e:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<8; i++)
 8019aa2:	b2ed      	uxtb	r5, r5
		if (i<7) byte=(byte<<1);
 8019aa4:	bf18      	it	ne
 8019aa6:	b2e4      	uxtbne	r4, r4
		Reset(clk);
 8019aa8:	f7ff ff56 	bl	8019958 <Reset>
	for(uint8_t i=0; i<8; i++)
 8019aac:	2d08      	cmp	r5, #8
 8019aae:	d1e7      	bne.n	8019a80 <SPI_Byte_R+0x8>
	}
	return byte;
}
 8019ab0:	4620      	mov	r0, r4
 8019ab2:	bd70      	pop	{r4, r5, r6, pc}
 8019ab4:	48000400 	.word	0x48000400

08019ab8 <SPI_Read_SR.part.2>:
	SPI_Address(address);
	Set(cs);
	SPI_Check_Busy();
}
/* Read status register */
uint8_t SPI_Read_SR(uint8_t sr)
 8019ab8:	b510      	push	{r4, lr}
	uint8_t reg;
	
	switch(sr)
	{
		case 1:
			Reset(cs);
 8019aba:	2005      	movs	r0, #5
 8019abc:	f7ff ff4c 	bl	8019958 <Reset>
	SPI_Byte_T(cmd);
 8019ac0:	2005      	movs	r0, #5
 8019ac2:	f7ff ffc3 	bl	8019a4c <SPI_Byte_T>
			SPI_Instruction(0x05);
			reg=SPI_Byte_R();
 8019ac6:	f7ff ffd7 	bl	8019a78 <SPI_Byte_R>
 8019aca:	4604      	mov	r4, r0
			Set(cs);
 8019acc:	2005      	movs	r0, #5
 8019ace:	f7ff ff1f 	bl	8019910 <Set>

	}
	return reg;

	SPI_Check_Busy();
}
 8019ad2:	4620      	mov	r0, r4
 8019ad4:	bd10      	pop	{r4, pc}

08019ad6 <SPI_Check_Busy>:
{
 8019ad6:	b508      	push	{r3, lr}
 8019ad8:	f7ff ffee 	bl	8019ab8 <SPI_Read_SR.part.2>
	while( SPI_Read_SR(1)&0x01 )
 8019adc:	07c3      	lsls	r3, r0, #31
 8019ade:	d400      	bmi.n	8019ae2 <SPI_Check_Busy+0xc>
}
 8019ae0:	bd08      	pop	{r3, pc}
		HAL_Delay(0);
 8019ae2:	2000      	movs	r0, #0
 8019ae4:	f7e7 faa2 	bl	800102c <HAL_Delay>
 8019ae8:	e7f6      	b.n	8019ad8 <SPI_Check_Busy+0x2>
	...

08019aec <QSPI_16_R>:
	}
	return byte;
}
/* Recieve 16 bit in quad mode  */
uint16_t QSPI_16_R(void)
{
 8019aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t byte=0;
	for(uint8_t i=0; i<4; i++)
 8019aee:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 8019af0:	4e18      	ldr	r6, [pc, #96]	; (8019b54 <QSPI_16_R+0x68>)
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 8019af2:	4f19      	ldr	r7, [pc, #100]	; (8019b58 <QSPI_16_R+0x6c>)
	uint16_t byte=0;
 8019af4:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 8019af6:	2102      	movs	r1, #2
 8019af8:	4630      	mov	r0, r6
 8019afa:	f7e8 fd11 	bl	8002520 <HAL_GPIO_ReadPin>
 8019afe:	b108      	cbz	r0, 8019b04 <QSPI_16_R+0x18>
 8019b00:	f044 0401 	orr.w	r4, r4, #1
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
 8019b04:	2101      	movs	r1, #1
 8019b06:	4630      	mov	r0, r6
 8019b08:	f7e8 fd0a 	bl	8002520 <HAL_GPIO_ReadPin>
 8019b0c:	b108      	cbz	r0, 8019b12 <QSPI_16_R+0x26>
 8019b0e:	f044 0402 	orr.w	r4, r4, #2
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 8019b12:	2180      	movs	r1, #128	; 0x80
 8019b14:	4638      	mov	r0, r7
 8019b16:	f7e8 fd03 	bl	8002520 <HAL_GPIO_ReadPin>
 8019b1a:	b108      	cbz	r0, 8019b20 <QSPI_16_R+0x34>
 8019b1c:	f044 0404 	orr.w	r4, r4, #4
		if (HAL_GPIO_ReadPin(IO3_GPIO_PORT, IO3_PIN)!=0) byte|=0x08;
 8019b20:	2140      	movs	r1, #64	; 0x40
 8019b22:	4638      	mov	r0, r7
 8019b24:	f7e8 fcfc 	bl	8002520 <HAL_GPIO_ReadPin>
 8019b28:	b108      	cbz	r0, 8019b2e <QSPI_16_R+0x42>
 8019b2a:	f044 0408 	orr.w	r4, r4, #8
		Set(clk);
 8019b2e:	2006      	movs	r0, #6
 8019b30:	f7ff feee 	bl	8019910 <Set>
		if (i<3) byte=(byte<<4);
 8019b34:	2d03      	cmp	r5, #3
	for(uint8_t i=0; i<4; i++)
 8019b36:	f105 0501 	add.w	r5, r5, #1
		if (i<3) byte=(byte<<4);
 8019b3a:	bf18      	it	ne
 8019b3c:	0124      	lslne	r4, r4, #4
		Reset(clk);
 8019b3e:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<4; i++)
 8019b42:	b2ed      	uxtb	r5, r5
		if (i<3) byte=(byte<<4);
 8019b44:	bf18      	it	ne
 8019b46:	b2a4      	uxthne	r4, r4
		Reset(clk);
 8019b48:	f7ff ff06 	bl	8019958 <Reset>
	for(uint8_t i=0; i<4; i++)
 8019b4c:	2d04      	cmp	r5, #4
 8019b4e:	d1d2      	bne.n	8019af6 <QSPI_16_R+0xa>
	}
	return byte;
}
 8019b50:	4620      	mov	r0, r4
 8019b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b54:	48000400 	.word	0x48000400
 8019b58:	48001400 	.word	0x48001400

08019b5c <QSPI_Byte_T>:
	}
	return byte;
}
/* Send byte in quad mode */
void QSPI_Byte_T(uint8_t byte)
{
 8019b5c:	b538      	push	{r3, r4, r5, lr}
 8019b5e:	4604      	mov	r4, r0
 8019b60:	2502      	movs	r5, #2
	for(uint8_t i=0; i<2; i++)
	{
		if(0x80 & byte)	Set(io3);
 8019b62:	0620      	lsls	r0, r4, #24
 8019b64:	d502      	bpl.n	8019b6c <QSPI_Byte_T+0x10>
 8019b66:	2004      	movs	r0, #4
 8019b68:	f7ff fed2 	bl	8019910 <Set>
		if(0x40 & byte)	Set(io2);
 8019b6c:	0661      	lsls	r1, r4, #25
 8019b6e:	d502      	bpl.n	8019b76 <QSPI_Byte_T+0x1a>
 8019b70:	2003      	movs	r0, #3
 8019b72:	f7ff fecd 	bl	8019910 <Set>
		if(0x20 & byte)	Set(io1);
 8019b76:	06a2      	lsls	r2, r4, #26
 8019b78:	d502      	bpl.n	8019b80 <QSPI_Byte_T+0x24>
 8019b7a:	2002      	movs	r0, #2
 8019b7c:	f7ff fec8 	bl	8019910 <Set>
		if(0x10 & byte)	Set(io0);
 8019b80:	06e3      	lsls	r3, r4, #27
 8019b82:	d501      	bpl.n	8019b88 <QSPI_Byte_T+0x2c>
 8019b84:	f7ff fe36 	bl	80197f4 <Set.part.0>

		Set(clk);
 8019b88:	2006      	movs	r0, #6
 8019b8a:	f7ff fec1 	bl	8019910 <Set>
		Reset(io3);	Reset(io2);	Reset(io1);	Reset(io0);	
 8019b8e:	2004      	movs	r0, #4
 8019b90:	f7ff fee2 	bl	8019958 <Reset>
 8019b94:	2003      	movs	r0, #3
 8019b96:	f7ff fedf 	bl	8019958 <Reset>
 8019b9a:	2002      	movs	r0, #2
 8019b9c:	f7ff fedc 	bl	8019958 <Reset>
 8019ba0:	3d01      	subs	r5, #1
 8019ba2:	f7ff fe2f 	bl	8019804 <Reset.part.1>
		byte=(byte<<4);
		Reset(clk);	
 8019ba6:	2006      	movs	r0, #6
		byte=(byte<<4);
 8019ba8:	0124      	lsls	r4, r4, #4
		Reset(clk);	
 8019baa:	f7ff fed5 	bl	8019958 <Reset>
	for(uint8_t i=0; i<2; i++)
 8019bae:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte=(byte<<4);
 8019bb2:	b2e4      	uxtb	r4, r4
	for(uint8_t i=0; i<2; i++)
 8019bb4:	d1d5      	bne.n	8019b62 <QSPI_Byte_T+0x6>
	}	
}
 8019bb6:	bd38      	pop	{r3, r4, r5, pc}

08019bb8 <QSPI_Dummy>:
		Reset(clk);	
	}	
}
/* Dummy cycles in Quad Mode */
void QSPI_Dummy(uint8_t n) 	// n - number of dummy cycles
{
 8019bb8:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i=0; i<(n*4); i++)
	{
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 8019bba:	4e07      	ldr	r6, [pc, #28]	; (8019bd8 <QSPI_Dummy+0x20>)
	for(uint8_t i=0; i<(n*4); i++)
 8019bbc:	0085      	lsls	r5, r0, #2
 8019bbe:	2400      	movs	r4, #0
 8019bc0:	b2e3      	uxtb	r3, r4
 8019bc2:	42ab      	cmp	r3, r5
 8019bc4:	f104 0401 	add.w	r4, r4, #1
 8019bc8:	db00      	blt.n	8019bcc <QSPI_Dummy+0x14>
	}
}
 8019bca:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 8019bcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8019bd0:	4630      	mov	r0, r6
 8019bd2:	f7e8 fcb0 	bl	8002536 <HAL_GPIO_TogglePin>
 8019bd6:	e7f3      	b.n	8019bc0 <QSPI_Dummy+0x8>
 8019bd8:	48001400 	.word	0x48001400

08019bdc <QSPI_Address>:
		arr[e]=QSPI_Byte_R();
	}
}
/* Address send in quad mode  */
void QSPI_Address(uint32_t addr)	// hasn't worked yet
{
 8019bdc:	b510      	push	{r4, lr}
 8019bde:	4604      	mov	r4, r0
	uint8_t byte=0;
	
	for(uint8_t e=0; e<3; e++)
	{
		byte=(addr >> (8 * (2-e)));
		QSPI_Byte_T(byte);
 8019be0:	f3c0 4007 	ubfx	r0, r0, #16, #8
 8019be4:	f7ff ffba 	bl	8019b5c <QSPI_Byte_T>
 8019be8:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8019bec:	f7ff ffb6 	bl	8019b5c <QSPI_Byte_T>
 8019bf0:	b2e0      	uxtb	r0, r4
	}
}
 8019bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		QSPI_Byte_T(byte);
 8019bf6:	f7ff bfb1 	b.w	8019b5c <QSPI_Byte_T>

08019bfa <QSPI_Recieve_IO_16>:
	SPI_Check_Busy();
}
/* Ψ祠𳭪򨨠嬿 16 蠳2 ⩲ */
/* Read 16 bit array from memory in quad mode */
void QSPI_Recieve_IO_16(uint16_t* arr, uint32_t address, uint32_t size)		// be aware that this function reconfigurates GPIO
{
 8019bfa:	b570      	push	{r4, r5, r6, lr}
 8019bfc:	460c      	mov	r4, r1
 8019bfe:	4615      	mov	r5, r2
 8019c00:	4606      	mov	r6, r0
	QSPI_Transmit_Init();	
 8019c02:	f7ff fee7 	bl	80199d4 <QSPI_Transmit_Init>
	Reset(cs);
 8019c06:	2005      	movs	r0, #5
 8019c08:	f7ff fea6 	bl	8019958 <Reset>
	SPI_Byte_T(cmd);
 8019c0c:	20eb      	movs	r0, #235	; 0xeb
 8019c0e:	f7ff ff1d 	bl	8019a4c <SPI_Byte_T>
	SPI_Instruction(fastread_quad_io);
	QSPI_Address(address);
 8019c12:	4620      	mov	r0, r4
 8019c14:	f7ff ffe2 	bl	8019bdc <QSPI_Address>
	QSPI_Dummy(3);	
 8019c18:	2003      	movs	r0, #3
 8019c1a:	f7ff ffcd 	bl	8019bb8 <QSPI_Dummy>
	
	QSPI_Recieve_Init();
 8019c1e:	f7ff febf 	bl	80199a0 <QSPI_Recieve_Init>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 8019c22:	2400      	movs	r4, #0
 8019c24:	42ac      	cmp	r4, r5
 8019c26:	d108      	bne.n	8019c3a <QSPI_Recieve_IO_16+0x40>
	Set(cs);
 8019c28:	2005      	movs	r0, #5
 8019c2a:	f7ff fe71 	bl	8019910 <Set>

	Single_Mode();
 8019c2e:	f7ff feeb 	bl	8019a08 <Single_Mode>
	SPI_Check_Busy();
}
 8019c32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SPI_Check_Busy();
 8019c36:	f7ff bf4e 	b.w	8019ad6 <SPI_Check_Busy>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 8019c3a:	f7ff ff57 	bl	8019aec <QSPI_16_R>
 8019c3e:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 8019c42:	3401      	adds	r4, #1
 8019c44:	e7ee      	b.n	8019c24 <QSPI_Recieve_IO_16+0x2a>
	...

08019c48 <Image_load>:
void Image_load(uint32_t address, uint32_t size){
 8019c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c4c:	f5ad 6d2f 	sub.w	sp, sp, #2800	; 0xaf0
 8019c50:	4680      	mov	r8, r0
 8019c52:	460f      	mov	r7, r1
	uint16_t buff[1400] = {0};
 8019c54:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8019c58:	2100      	movs	r1, #0
 8019c5a:	4668      	mov	r0, sp
 8019c5c:	f006 fb11 	bl	8020282 <memset>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 8019c60:	f8df 9040 	ldr.w	r9, [pc, #64]	; 8019ca4 <Image_load+0x5c>
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 8019c64:	2400      	movs	r4, #0
 8019c66:	f44f 66af 	mov.w	r6, #1400	; 0x578
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 8019c6a:	f44f 6a30 	mov.w	sl, #2816	; 0xb00
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 8019c6e:	fb06 f304 	mul.w	r3, r6, r4
 8019c72:	429f      	cmp	r7, r3
 8019c74:	d803      	bhi.n	8019c7e <Image_load+0x36>
}
 8019c76:	f50d 6d2f 	add.w	sp, sp, #2800	; 0xaf0
 8019c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 8019c7e:	b2a5      	uxth	r5, r4
 8019c80:	f44f 62af 	mov.w	r2, #1400	; 0x578
 8019c84:	fb0a 8105 	mla	r1, sl, r5, r8
 8019c88:	4668      	mov	r0, sp
 8019c8a:	f7ff ffb6 	bl	8019bfa <QSPI_Recieve_IO_16>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 8019c8e:	fb06 f005 	mul.w	r0, r6, r5
 8019c92:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 8019c96:	4669      	mov	r1, sp
 8019c98:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 8019c9c:	f006 fae6 	bl	802026c <memcpy>
 8019ca0:	3401      	adds	r4, #1
 8019ca2:	e7e4      	b.n	8019c6e <Image_load+0x26>
 8019ca4:	20055954 	.word	0x20055954

08019ca8 <Rabs_calc_Factor2_Settings_change>:
#include "Rabs_math.h"

float Rabs_calc_Factor2_Settings_change(float Kt, float P)
{
	return Kt * P;
}
 8019ca8:	ee20 0a20 	vmul.f32	s0, s0, s1
 8019cac:	4770      	bx	lr
	...

08019cb0 <Rabs_calc_Factor1>:

float Rabs_calc_Factor1(uint16_t Rdark, float Lt, uint16_t R_data[])
{
 8019cb0:	b538      	push	{r3, r4, r5, lr}
	uint32_t sum = 0;
	float Kl = 0;
	
	Kl = Lt/100.00;
 8019cb2:	eddf 7a17 	vldr	s15, [pc, #92]	; 8019d10 <Rabs_calc_Factor1+0x60>
{
 8019cb6:	ed2d 8b02 	vpush	{d8}
	Kl = Lt/100.00;
 8019cba:	ee80 8a27 	vdiv.f32	s16, s0, s15
 8019cbe:	1e8a      	subs	r2, r1, #2
	uint32_t sum = 0;
 8019cc0:	2300      	movs	r3, #0
 8019cc2:	f201 71fe 	addw	r1, r1, #2046	; 0x7fe
	for (uint16_t i = 0; i < 1024; i++)
	{
		sum = sum + (R_data[i] - Rdark);
 8019cc6:	f832 4f02 	ldrh.w	r4, [r2, #2]!
 8019cca:	1a24      	subs	r4, r4, r0
	for (uint16_t i = 0; i < 1024; i++)
 8019ccc:	4291      	cmp	r1, r2
		sum = sum + (R_data[i] - Rdark);
 8019cce:	4423      	add	r3, r4
	for (uint16_t i = 0; i < 1024; i++)
 8019cd0:	d1f9      	bne.n	8019cc6 <Rabs_calc_Factor1+0x16>
	}
	return Kl*(((float)sum)/1024.00);
 8019cd2:	ee07 3a90 	vmov	s15, r3
 8019cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019cda:	ee17 0a90 	vmov	r0, s15
 8019cde:	f7e6 fc4b 	bl	8000578 <__aeabi_f2d>
 8019ce2:	2200      	movs	r2, #0
 8019ce4:	4b0b      	ldr	r3, [pc, #44]	; (8019d14 <Rabs_calc_Factor1+0x64>)
 8019ce6:	f7e6 fc9b 	bl	8000620 <__aeabi_dmul>
 8019cea:	4604      	mov	r4, r0
 8019cec:	ee18 0a10 	vmov	r0, s16
 8019cf0:	460d      	mov	r5, r1
 8019cf2:	f7e6 fc41 	bl	8000578 <__aeabi_f2d>
 8019cf6:	4602      	mov	r2, r0
 8019cf8:	460b      	mov	r3, r1
 8019cfa:	4620      	mov	r0, r4
 8019cfc:	4629      	mov	r1, r5
 8019cfe:	f7e6 fc8f 	bl	8000620 <__aeabi_dmul>
 8019d02:	f7e6 ff85 	bl	8000c10 <__aeabi_d2f>
}
 8019d06:	ecbd 8b02 	vpop	{d8}
 8019d0a:	ee00 0a10 	vmov	s0, r0
 8019d0e:	bd38      	pop	{r3, r4, r5, pc}
 8019d10:	42c80000 	.word	0x42c80000
 8019d14:	3f500000 	.word	0x3f500000

08019d18 <Rabs_calc_main>:
//
//		r--;
//	}
//}
void Rabs_calc_main(uint16_t R_data[], uint16_t Rdark, float Factor1, float Factor2, float Sn[], float Rabs[])
{
 8019d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
//			Rabs[1023-i] = (Rabs[1023-i] + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
			Factor3 = Factor3*Factor2*(Sn[r]);
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
		}

		Rabs_prev[1023-i][n] = Factor3;
 8019d1c:	4f2c      	ldr	r7, [pc, #176]	; (8019dd0 <Rabs_calc_main+0xb8>)
 8019d1e:	4d2d      	ldr	r5, [pc, #180]	; (8019dd4 <Rabs_calc_main+0xbc>)
 8019d20:	783e      	ldrb	r6, [r7, #0]
 8019d22:	f1a0 0c02 	sub.w	ip, r0, #2
		Factor3 = R_data[i] - Rdark - Factor1;
 8019d26:	482c      	ldr	r0, [pc, #176]	; (8019dd8 <Rabs_calc_main+0xc0>)
 8019d28:	ea4f 0986 	mov.w	r9, r6, lsl #2
		Rabs_prev[1023-i][n] = Factor3;
 8019d2c:	f640 7efc 	movw	lr, #4092	; 0xffc
		if(Factor3 <= 0)
 8019d30:	f04f 0b00 	mov.w	fp, #0
 8019d34:	4680      	mov	r8, r0
 8019d36:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
		Factor3 = R_data[i] - Rdark - Factor1;
 8019d3a:	f83c 4f02 	ldrh.w	r4, [ip, #2]!
 8019d3e:	1a64      	subs	r4, r4, r1
 8019d40:	ee07 4a90 	vmov	s15, r4
 8019d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d48:	eb03 0a0e 	add.w	sl, r3, lr
 8019d4c:	ee77 7ac0 	vsub.f32	s15, s15, s0
		if(Factor3 <= 0)
 8019d50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Factor3 = R_data[i] - Rdark - Factor1;
 8019d58:	edc0 7a00 	vstr	s15, [r0]
		if(Factor3 <= 0)
 8019d5c:	d829      	bhi.n	8019db2 <Rabs_calc_main+0x9a>
			Rabs[1023-i] = (Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3]) / 5;
 8019d5e:	edd5 7a00 	vldr	s15, [r5]
			Factor3 = 0;
 8019d62:	f8c0 b000 	str.w	fp, [r0]
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 8019d66:	edd5 6a01 	vldr	s13, [r5, #4]
 8019d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d6e:	edd5 6a02 	vldr	s13, [r5, #8]
 8019d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019d76:	edd5 6a03 	vldr	s13, [r5, #12]
 8019d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
		Rabs_prev[1023-i][n] = Factor3;
 8019d7e:	eb05 0409 	add.w	r4, r5, r9
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 8019d82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8019d86:	f1ae 0e04 	sub.w	lr, lr, #4
	for (uint16_t i = 0; i < 1024; i++)
 8019d8a:	f11e 0f04 	cmn.w	lr, #4
 8019d8e:	f1a5 0510 	sub.w	r5, r5, #16
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 8019d92:	edca 6a00 	vstr	s13, [sl]
		Rabs_prev[1023-i][n] = Factor3;
 8019d96:	f8d8 a000 	ldr.w	sl, [r8]
 8019d9a:	f8c4 a000 	str.w	sl, [r4]
	for (uint16_t i = 0; i < 1024; i++)
 8019d9e:	d1cc      	bne.n	8019d3a <Rabs_calc_main+0x22>

		r--;
	}
	n++;
 8019da0:	3601      	adds	r6, #1
 8019da2:	b2f6      	uxtb	r6, r6
	if (n>3) n = 0;
 8019da4:	2e03      	cmp	r6, #3
 8019da6:	bf8a      	itet	hi
 8019da8:	2300      	movhi	r3, #0
	n++;
 8019daa:	703e      	strbls	r6, [r7, #0]
	if (n>3) n = 0;
 8019dac:	703b      	strbhi	r3, [r7, #0]
 8019dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			Factor3 = Factor3*Factor2*(Sn[r]);
 8019db2:	eb02 040e 	add.w	r4, r2, lr
 8019db6:	edd4 6a00 	vldr	s13, [r4]
 8019dba:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8019dbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 8019dc2:	edd5 6a00 	vldr	s13, [r5]
			Factor3 = Factor3*Factor2*(Sn[r]);
 8019dc6:	edc0 7a00 	vstr	s15, [r0]
			Rabs[1023-i] = (Factor3 + Rabs_prev[1023-i][0] + Rabs_prev[1023-i][1] + Rabs_prev[1023-i][2] + Rabs_prev[1023-i][3])/5;
 8019dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019dce:	e7ca      	b.n	8019d66 <Rabs_calc_main+0x4e>
 8019dd0:	2000975c 	.word	0x2000975c
 8019dd4:	2000974c 	.word	0x2000974c
 8019dd8:	20005758 	.word	0x20005758

08019ddc <Rabs_find_MAX>:
	return Factor3*Factor2;
}

float Rabs_find_MAX(float Rabs[], uint8_t direction)
{	
	uint8_t    step = (direction == 0x00)? 4 :3;
 8019ddc:	2900      	cmp	r1, #0

	float max = 0;
 8019dde:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8019e10 <Rabs_find_MAX+0x34>

	for (uint16_t i = 1023; i >= step; i-=step)
 8019de2:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8019de6:	bf0c      	ite	eq
 8019de8:	2204      	moveq	r2, #4
 8019dea:	2203      	movne	r2, #3
 8019dec:	4293      	cmp	r3, r2
 8019dee:	d200      	bcs.n	8019df2 <Rabs_find_MAX+0x16>
	{
		max = Rabs[i] > max ? Rabs[i] : max;
	}
	return max;
}
 8019df0:	4770      	bx	lr
		max = Rabs[i] > max ? Rabs[i] : max;
 8019df2:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8019df6:	edd1 7a00 	vldr	s15, [r1]
 8019dfa:	eeb4 0a67 	vcmp.f32	s0, s15
 8019dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e02:	eba3 0302 	sub.w	r3, r3, r2
 8019e06:	bf48      	it	mi
 8019e08:	eeb0 0a67 	vmovmi.f32	s0, s15
 8019e0c:	b29b      	uxth	r3, r3
 8019e0e:	e7ed      	b.n	8019dec <Rabs_find_MAX+0x10>
 8019e10:	00000000 	.word	0x00000000

08019e14 <Rabs_find_MAX_all>:

float Rabs_find_MAX_all(float Rabs[])
{	
	float max = 0;
 8019e14:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8019e34 <Rabs_find_MAX_all+0x20>
 8019e18:	f500 5380 	add.w	r3, r0, #4096	; 0x1000

	for (uint16_t i = 0; i < 1024; i++)
	{
		max = Rabs[i] > max ? Rabs[i] : max;
 8019e1c:	ecf0 7a01 	vldmia	r0!, {s15}
 8019e20:	eef4 7a40 	vcmp.f32	s15, s0
 8019e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e28:	bfc8      	it	gt
 8019e2a:	eeb0 0a67 	vmovgt.f32	s0, s15
	for (uint16_t i = 0; i < 1024; i++)
 8019e2e:	4298      	cmp	r0, r3
 8019e30:	d1f4      	bne.n	8019e1c <Rabs_find_MAX_all+0x8>
	}
	return max;
}
 8019e32:	4770      	bx	lr
 8019e34:	00000000 	.word	0x00000000

08019e38 <WriteSDFLASH_t>:
char buffer_sd[11];

FLASH_EraseInitTypeDef EraseInitStruct3;

void WriteSDFLASH_t(uint64_t filenum)
{
 8019e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019e3c:	4c52      	ldr	r4, [pc, #328]	; (8019f88 <WriteSDFLASH_t+0x150>)
uint32_t PAGEError = 0;
 8019e3e:	f10d 0808 	add.w	r8, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019e42:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 8019e46:	f04f 0900 	mov.w	r9, #0
 8019e4a:	f848 9d04 	str.w	r9, [r8, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019e4e:	6125      	str	r5, [r4, #16]
{
 8019e50:	460f      	mov	r7, r1
 8019e52:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 8019e54:	f7e8 f866 	bl	8001f24 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 8019e58:	f7e8 f864 	bl	8001f24 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019e5c:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 8019e5e:	2064      	movs	r0, #100	; 0x64
 8019e60:	f7e7 f8e4 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 8019e64:	4849      	ldr	r0, [pc, #292]	; (8019f8c <WriteSDFLASH_t+0x154>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 8019e66:	2302      	movs	r3, #2
 8019e68:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)43;
 8019e6a:	232b      	movs	r3, #43	; 0x2b
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 8019e6c:	4641      	mov	r1, r8
		EraseInitStruct3.Page = (uint32_t)43;
 8019e6e:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 8019e70:	2301      	movs	r3, #1
 8019e72:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 8019e74:	f8c0 9000 	str.w	r9, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 8019e78:	f7e8 f96e 	bl	8002158 <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 8019e7c:	2032      	movs	r0, #50	; 0x32
 8019e7e:	f7e7 f8d5 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019e82:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 8019e84:	f7e8 f860 	bl	8001f48 <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 8019e88:	f7e8 f84c 	bl	8001f24 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019e8c:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)FILENUMBER, filenum);
 8019e8e:	4d40      	ldr	r5, [pc, #256]	; (8019f90 <WriteSDFLASH_t+0x158>)
 8019e90:	4632      	mov	r2, r6
 8019e92:	463b      	mov	r3, r7
 8019e94:	4629      	mov	r1, r5
 8019e96:	2000      	movs	r0, #0
 8019e98:	f7e8 f89e 	bl	8001fd8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019e9c:	2800      	cmp	r0, #0
 8019e9e:	d1f7      	bne.n	8019e90 <WriteSDFLASH_t+0x58>
					}

				flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019ea4:	6123      	str	r3, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MODEEL, Mode_EL);
 8019ea6:	4d3b      	ldr	r5, [pc, #236]	; (8019f94 <WriteSDFLASH_t+0x15c>)
 8019ea8:	4c3b      	ldr	r4, [pc, #236]	; (8019f98 <WriteSDFLASH_t+0x160>)
 8019eaa:	782a      	ldrb	r2, [r5, #0]
 8019eac:	2300      	movs	r3, #0
 8019eae:	4621      	mov	r1, r4
 8019eb0:	2000      	movs	r0, #0
 8019eb2:	f7e8 f891 	bl	8001fd8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019eb6:	2800      	cmp	r0, #0
 8019eb8:	d1f7      	bne.n	8019eaa <WriteSDFLASH_t+0x72>
					}
						
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019eba:	4b33      	ldr	r3, [pc, #204]	; (8019f88 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 8019ebc:	4d37      	ldr	r5, [pc, #220]	; (8019f9c <WriteSDFLASH_t+0x164>)
 8019ebe:	4c38      	ldr	r4, [pc, #224]	; (8019fa0 <WriteSDFLASH_t+0x168>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019ec0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019ec4:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 8019ec6:	882a      	ldrh	r2, [r5, #0]
 8019ec8:	2300      	movs	r3, #0
 8019eca:	4621      	mov	r1, r4
 8019ecc:	2000      	movs	r0, #0
 8019ece:	f7e8 f883 	bl	8001fd8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019ed2:	2800      	cmp	r0, #0
 8019ed4:	d1f7      	bne.n	8019ec6 <WriteSDFLASH_t+0x8e>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019ed6:	4b2c      	ldr	r3, [pc, #176]	; (8019f88 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 8019ed8:	4d32      	ldr	r5, [pc, #200]	; (8019fa4 <WriteSDFLASH_t+0x16c>)
 8019eda:	4c33      	ldr	r4, [pc, #204]	; (8019fa8 <WriteSDFLASH_t+0x170>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019edc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019ee0:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 8019ee2:	782a      	ldrb	r2, [r5, #0]
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	4621      	mov	r1, r4
 8019ee8:	2000      	movs	r0, #0
 8019eea:	f7e8 f875 	bl	8001fd8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019eee:	2800      	cmp	r0, #0
 8019ef0:	d1f7      	bne.n	8019ee2 <WriteSDFLASH_t+0xaa>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019ef2:	4b25      	ldr	r3, [pc, #148]	; (8019f88 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 8019ef4:	4d2d      	ldr	r5, [pc, #180]	; (8019fac <WriteSDFLASH_t+0x174>)
 8019ef6:	4c2e      	ldr	r4, [pc, #184]	; (8019fb0 <WriteSDFLASH_t+0x178>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019ef8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019efc:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 8019efe:	782a      	ldrb	r2, [r5, #0]
 8019f00:	2300      	movs	r3, #0
 8019f02:	4621      	mov	r1, r4
 8019f04:	2000      	movs	r0, #0
 8019f06:	f7e8 f867 	bl	8001fd8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019f0a:	2800      	cmp	r0, #0
 8019f0c:	d1f7      	bne.n	8019efe <WriteSDFLASH_t+0xc6>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019f0e:	4b1e      	ldr	r3, [pc, #120]	; (8019f88 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 8019f10:	4d28      	ldr	r5, [pc, #160]	; (8019fb4 <WriteSDFLASH_t+0x17c>)
 8019f12:	4c29      	ldr	r4, [pc, #164]	; (8019fb8 <WriteSDFLASH_t+0x180>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019f14:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019f18:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 8019f1a:	782a      	ldrb	r2, [r5, #0]
 8019f1c:	2300      	movs	r3, #0
 8019f1e:	4621      	mov	r1, r4
 8019f20:	2000      	movs	r0, #0
 8019f22:	f7e8 f859 	bl	8001fd8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019f26:	2800      	cmp	r0, #0
 8019f28:	d1f7      	bne.n	8019f1a <WriteSDFLASH_t+0xe2>
						}
						flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019f2a:	4b17      	ldr	r3, [pc, #92]	; (8019f88 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 8019f2c:	4d23      	ldr	r5, [pc, #140]	; (8019fbc <WriteSDFLASH_t+0x184>)
 8019f2e:	4c24      	ldr	r4, [pc, #144]	; (8019fc0 <WriteSDFLASH_t+0x188>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019f30:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019f34:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 8019f36:	782a      	ldrb	r2, [r5, #0]
 8019f38:	2300      	movs	r3, #0
 8019f3a:	4621      	mov	r1, r4
 8019f3c:	2000      	movs	r0, #0
 8019f3e:	f7e8 f84b 	bl	8001fd8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019f42:	2800      	cmp	r0, #0
 8019f44:	d1f7      	bne.n	8019f36 <WriteSDFLASH_t+0xfe>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019f46:	4b10      	ldr	r3, [pc, #64]	; (8019f88 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 8019f48:	4d1e      	ldr	r5, [pc, #120]	; (8019fc4 <WriteSDFLASH_t+0x18c>)
 8019f4a:	4c1f      	ldr	r4, [pc, #124]	; (8019fc8 <WriteSDFLASH_t+0x190>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019f4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019f50:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 8019f52:	782a      	ldrb	r2, [r5, #0]
 8019f54:	2300      	movs	r3, #0
 8019f56:	4621      	mov	r1, r4
 8019f58:	2000      	movs	r0, #0
 8019f5a:	f7e8 f83d 	bl	8001fd8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019f5e:	2800      	cmp	r0, #0
 8019f60:	d1f7      	bne.n	8019f52 <WriteSDFLASH_t+0x11a>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019f62:	4b09      	ldr	r3, [pc, #36]	; (8019f88 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 8019f64:	4d19      	ldr	r5, [pc, #100]	; (8019fcc <WriteSDFLASH_t+0x194>)
 8019f66:	4c1a      	ldr	r4, [pc, #104]	; (8019fd0 <WriteSDFLASH_t+0x198>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019f68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8019f6c:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 8019f6e:	782a      	ldrb	r2, [r5, #0]
 8019f70:	2300      	movs	r3, #0
 8019f72:	4621      	mov	r1, r4
 8019f74:	2000      	movs	r0, #0
 8019f76:	f7e8 f82f 	bl	8001fd8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 8019f7a:	2800      	cmp	r0, #0
 8019f7c:	d1f7      	bne.n	8019f6e <WriteSDFLASH_t+0x136>
					}
						HAL_FLASH_Lock();
 8019f7e:	f7e7 ffe3 	bl	8001f48 <HAL_FLASH_Lock>
}
 8019f82:	b003      	add	sp, #12
 8019f84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019f88:	40022000 	.word	0x40022000
 8019f8c:	20092640 	.word	0x20092640
 8019f90:	0812b020 	.word	0x0812b020
 8019f94:	20000ebc 	.word	0x20000ebc
 8019f98:	0812b030 	.word	0x0812b030
 8019f9c:	20005706 	.word	0x20005706
 8019fa0:	0812b038 	.word	0x0812b038
 8019fa4:	20005702 	.word	0x20005702
 8019fa8:	0812b040 	.word	0x0812b040
 8019fac:	200056ff 	.word	0x200056ff
 8019fb0:	0812b048 	.word	0x0812b048
 8019fb4:	20005700 	.word	0x20005700
 8019fb8:	0812b050 	.word	0x0812b050
 8019fbc:	20005703 	.word	0x20005703
 8019fc0:	0812b058 	.word	0x0812b058
 8019fc4:	20090ab9 	.word	0x20090ab9
 8019fc8:	0812b060 	.word	0x0812b060
 8019fcc:	20090aba 	.word	0x20090aba
 8019fd0:	0812b068 	.word	0x0812b068

08019fd4 <WriteFLASH_Screen>:


void WriteFLASH_Screen(uint8_t Screen)
{
 8019fd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019fd8:	4c1b      	ldr	r4, [pc, #108]	; (801a048 <WriteFLASH_Screen+0x74>)
uint32_t PAGEError = 0;
 8019fda:	af02      	add	r7, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019fdc:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 8019fe0:	f04f 0800 	mov.w	r8, #0
 8019fe4:	f847 8d04 	str.w	r8, [r7, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019fe8:	6125      	str	r5, [r4, #16]
{
 8019fea:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 8019fec:	f7e7 ff9a 	bl	8001f24 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 8019ff0:	f7e7 ff98 	bl	8001f24 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 8019ff4:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 8019ff6:	2064      	movs	r0, #100	; 0x64
 8019ff8:	f7e7 f818 	bl	800102c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 8019ffc:	4813      	ldr	r0, [pc, #76]	; (801a04c <WriteFLASH_Screen+0x78>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 8019ffe:	2302      	movs	r3, #2
 801a000:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)44;
 801a002:	232c      	movs	r3, #44	; 0x2c
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801a004:	4639      	mov	r1, r7
		EraseInitStruct3.Page = (uint32_t)44;
 801a006:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 801a008:	2301      	movs	r3, #1
 801a00a:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801a00c:	f8c0 8000 	str.w	r8, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801a010:	f7e8 f8a2 	bl	8002158 <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 801a014:	2032      	movs	r0, #50	; 0x32
 801a016:	f7e7 f809 	bl	800102c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a01a:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 801a01c:	f7e7 ff94 	bl	8001f48 <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 801a020:	f7e7 ff80 	bl	8001f24 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801a024:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SCREENADDR, Screen);
 801a026:	b2f4      	uxtb	r4, r6
 801a028:	4e09      	ldr	r6, [pc, #36]	; (801a050 <WriteFLASH_Screen+0x7c>)
 801a02a:	2500      	movs	r5, #0
 801a02c:	4622      	mov	r2, r4
 801a02e:	462b      	mov	r3, r5
 801a030:	4631      	mov	r1, r6
 801a032:	2000      	movs	r0, #0
 801a034:	f7e7 ffd0 	bl	8001fd8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801a038:	2800      	cmp	r0, #0
 801a03a:	d1f7      	bne.n	801a02c <WriteFLASH_Screen+0x58>
					}
		HAL_FLASH_Lock();
 801a03c:	f7e7 ff84 	bl	8001f48 <HAL_FLASH_Lock>
}
 801a040:	b002      	add	sp, #8
 801a042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a046:	bf00      	nop
 801a048:	40022000 	.word	0x40022000
 801a04c:	20092640 	.word	0x20092640
 801a050:	0812c020 	.word	0x0812c020
 801a054:	00000000 	.word	0x00000000

0801a058 <Calculate_SD_Data>:


void Calculate_SD_Data()
{
 801a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	SDWr_Status_bar = 0;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801a05a:	4c5b      	ldr	r4, [pc, #364]	; (801a1c8 <Calculate_SD_Data+0x170>)
	SDWr_Status_bar = 0;
 801a05c:	4e5b      	ldr	r6, [pc, #364]	; (801a1cc <Calculate_SD_Data+0x174>)
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801a05e:	4d5c      	ldr	r5, [pc, #368]	; (801a1d0 <Calculate_SD_Data+0x178>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a060:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 801a1d4 <Calculate_SD_Data+0x17c>
	Calculate_xy1931(colorimetry_XYZ1931);
 801a064:	4f5c      	ldr	r7, [pc, #368]	; (801a1d8 <Calculate_SD_Data+0x180>)
	SDWr_Status_bar = 0;
 801a066:	2200      	movs	r2, #0
 801a068:	2300      	movs	r3, #0
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a06a:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a06e:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0;
 801a070:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a074:	f7f9 f90e 	bl	8013294 <GUI_Bar_Measure>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801a078:	462a      	mov	r2, r5
 801a07a:	4b58      	ldr	r3, [pc, #352]	; (801a1dc <Calculate_SD_Data+0x184>)
 801a07c:	4958      	ldr	r1, [pc, #352]	; (801a1e0 <Calculate_SD_Data+0x188>)
 801a07e:	4620      	mov	r0, r4
 801a080:	f7f4 f95c 	bl	800e33c <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801a084:	4638      	mov	r0, r7
 801a086:	f7f4 f9c5 	bl	800e414 <Calculate_xy1931>
	Calculate_uv1976(colorimetry_xy1931);
 801a08a:	4856      	ldr	r0, [pc, #344]	; (801a1e4 <Calculate_SD_Data+0x18c>)
 801a08c:	f7f4 fa04 	bl	800e498 <Calculate_uv1976>
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801a090:	4b55      	ldr	r3, [pc, #340]	; (801a1e8 <Calculate_SD_Data+0x190>)
 801a092:	781a      	ldrb	r2, [r3, #0]
 801a094:	4b55      	ldr	r3, [pc, #340]	; (801a1ec <Calculate_SD_Data+0x194>)
 801a096:	4638      	mov	r0, r7
 801a098:	7819      	ldrb	r1, [r3, #0]
	
	SDWr_Status_bar = 0.1;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	delta_Eab_Measure = Calculate_deltaEab();
	
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801a09a:	4f55      	ldr	r7, [pc, #340]	; (801a1f0 <Calculate_SD_Data+0x198>)
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801a09c:	f7f4 fbbc 	bl	800e818 <Calculate_Lab>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801a0a0:	4620      	mov	r0, r4
 801a0a2:	2101      	movs	r1, #1
 801a0a4:	f7f4 fa1c 	bl	800e4e0 <Calculate_Tc>
 801a0a8:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801a0ac:	4b51      	ldr	r3, [pc, #324]	; (801a1f4 <Calculate_SD_Data+0x19c>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a0ae:	ed9f 0a52 	vldr	s0, [pc, #328]	; 801a1f8 <Calculate_SD_Data+0x1a0>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801a0b2:	ee17 2a90 	vmov	r2, s15
 801a0b6:	801a      	strh	r2, [r3, #0]
	SDWr_Status_bar = 0.1;
 801a0b8:	a33d      	add	r3, pc, #244	; (adr r3, 801a1b0 <Calculate_SD_Data+0x158>)
 801a0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a0be:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a0c2:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.1;
 801a0c4:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a0c8:	f7f9 f8e4 	bl	8013294 <GUI_Bar_Measure>
	delta_Eab_Measure = Calculate_deltaEab();
 801a0cc:	f7f4 fde4 	bl	800ec98 <Calculate_deltaEab>
 801a0d0:	4b4a      	ldr	r3, [pc, #296]	; (801a1fc <Calculate_SD_Data+0x1a4>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801a0d2:	4629      	mov	r1, r5
	delta_Eab_Measure = Calculate_deltaEab();
 801a0d4:	8018      	strh	r0, [r3, #0]
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801a0d6:	4620      	mov	r0, r4
 801a0d8:	f7f3 ff84 	bl	800dfe4 <Calculate_EL_Day>
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801a0dc:	4620      	mov	r0, r4
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801a0de:	4d48      	ldr	r5, [pc, #288]	; (801a200 <Calculate_SD_Data+0x1a8>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801a0e0:	ed87 0a00 	vstr	s0, [r7]
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801a0e4:	f7f3 ff9e 	bl	800e024 <Calculate_EL_Day_Wt>
 801a0e8:	4b46      	ldr	r3, [pc, #280]	; (801a204 <Calculate_SD_Data+0x1ac>)
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801a0ea:	4629      	mov	r1, r5
 801a0ec:	4620      	mov	r0, r4
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801a0ee:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801a0f2:	f7f3 ffdd 	bl	800e0b0 <Calculate_PPFD_PPL>
 801a0f6:	4b44      	ldr	r3, [pc, #272]	; (801a208 <Calculate_SD_Data+0x1b0>)
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801a0f8:	4629      	mov	r1, r5
 801a0fa:	4620      	mov	r0, r4
 801a0fc:	2200      	movs	r2, #0
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801a0fe:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801a102:	f7f4 f841 	bl	800e188 <Calculate_PPFD_PPL_Range>
 801a106:	4b41      	ldr	r3, [pc, #260]	; (801a20c <Calculate_SD_Data+0x1b4>)
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801a108:	4629      	mov	r1, r5
 801a10a:	4620      	mov	r0, r4
 801a10c:	2201      	movs	r2, #1
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801a10e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801a112:	f7f4 f839 	bl	800e188 <Calculate_PPFD_PPL_Range>
 801a116:	4b3e      	ldr	r3, [pc, #248]	; (801a210 <Calculate_SD_Data+0x1b8>)
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801a118:	4629      	mov	r1, r5
 801a11a:	4620      	mov	r0, r4
 801a11c:	2202      	movs	r2, #2
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801a11e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801a122:	f7f4 f831 	bl	800e188 <Calculate_PPFD_PPL_Range>
 801a126:	4b3b      	ldr	r3, [pc, #236]	; (801a214 <Calculate_SD_Data+0x1bc>)
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 801a128:	4629      	mov	r1, r5
 801a12a:	4620      	mov	r0, r4
 801a12c:	2203      	movs	r2, #3
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801a12e:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 801a132:	f7f4 f829 	bl	800e188 <Calculate_PPFD_PPL_Range>
 801a136:	4b38      	ldr	r3, [pc, #224]	; (801a218 <Calculate_SD_Data+0x1c0>)
 801a138:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.3;
 801a13c:	a31e      	add	r3, pc, #120	; (adr r3, 801a1b8 <Calculate_SD_Data+0x160>)
 801a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a142:	ed9f 0a36 	vldr	s0, [pc, #216]	; 801a21c <Calculate_SD_Data+0x1c4>
 801a146:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a14a:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.3;
 801a14c:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a150:	f7f9 f8a0 	bl	8013294 <GUI_Bar_Measure>
	E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801a154:	4620      	mov	r0, r4
 801a156:	4932      	ldr	r1, [pc, #200]	; (801a220 <Calculate_SD_Data+0x1c8>)
 801a158:	f7f3 ff7c 	bl	800e054 <Calculate_EL_Night>
 801a15c:	4b31      	ldr	r3, [pc, #196]	; (801a224 <Calculate_SD_Data+0x1cc>)
 801a15e:	eef0 0a40 	vmov.f32	s1, s0
 801a162:	ed83 0a00 	vstr	s0, [r3]
	SP_Measure = (Calculate_SP(E_day, E_Night));
 801a166:	ed97 0a00 	vldr	s0, [r7]
 801a16a:	f7f3 ff93 	bl	800e094 <Calculate_SP>
 801a16e:	4b2e      	ldr	r3, [pc, #184]	; (801a228 <Calculate_SD_Data+0x1d0>)
	
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801a170:	492e      	ldr	r1, [pc, #184]	; (801a22c <Calculate_SD_Data+0x1d4>)
	SP_Measure = (Calculate_SP(E_day, E_Night));
 801a172:	ed83 0a00 	vstr	s0, [r3]
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801a176:	4620      	mov	r0, r4
 801a178:	f7f4 f890 	bl	800e29c <Calculate_ELr>
 801a17c:	4b2c      	ldr	r3, [pc, #176]	; (801a230 <Calculate_SD_Data+0x1d8>)
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 801a17e:	492d      	ldr	r1, [pc, #180]	; (801a234 <Calculate_SD_Data+0x1dc>)
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801a180:	ed83 0a00 	vstr	s0, [r3]
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 801a184:	4620      	mov	r0, r4
 801a186:	f7f4 f86f 	bl	800e268 <Calculate_ELb>
 801a18a:	4b2b      	ldr	r3, [pc, #172]	; (801a238 <Calculate_SD_Data+0x1e0>)
 801a18c:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.4;
 801a190:	a30b      	add	r3, pc, #44	; (adr r3, 801a1c0 <Calculate_SD_Data+0x168>)
 801a192:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a196:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801a23c <Calculate_SD_Data+0x1e4>
	SDWr_Status_bar = 0.4;
 801a19a:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a19e:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a1a2:	2055      	movs	r0, #85	; 0x55
}
 801a1a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a1a8:	f7f9 b874 	b.w	8013294 <GUI_Bar_Measure>
 801a1ac:	f3af 8000 	nop.w
 801a1b0:	9999999a 	.word	0x9999999a
 801a1b4:	3fb99999 	.word	0x3fb99999
 801a1b8:	33333333 	.word	0x33333333
 801a1bc:	3fd33333 	.word	0x3fd33333
 801a1c0:	9999999a 	.word	0x9999999a
 801a1c4:	3fd99999 	.word	0x3fd99999
 801a1c8:	2000c53c 	.word	0x2000c53c
 801a1cc:	20009760 	.word	0x20009760
 801a1d0:	20052940 	.word	0x20052940
 801a1d4:	00000000 	.word	0x00000000
 801a1d8:	2008f522 	.word	0x2008f522
 801a1dc:	2008d514 	.word	0x2008d514
 801a1e0:	2008a514 	.word	0x2008a514
 801a1e4:	2008f540 	.word	0x2008f540
 801a1e8:	20090ab9 	.word	0x20090ab9
 801a1ec:	20005704 	.word	0x20005704
 801a1f0:	20095ca0 	.word	0x20095ca0
 801a1f4:	20054940 	.word	0x20054940
 801a1f8:	3dcccccd 	.word	0x3dcccccd
 801a1fc:	20090ab6 	.word	0x20090ab6
 801a200:	20054948 	.word	0x20054948
 801a204:	20095718 	.word	0x20095718
 801a208:	20095720 	.word	0x20095720
 801a20c:	20095804 	.word	0x20095804
 801a210:	20095b88 	.word	0x20095b88
 801a214:	20095a3c 	.word	0x20095a3c
 801a218:	2009571c 	.word	0x2009571c
 801a21c:	3e99999a 	.word	0x3e99999a
 801a220:	20053940 	.word	0x20053940
 801a224:	2009570c 	.word	0x2009570c
 801a228:	20095800 	.word	0x20095800
 801a22c:	2000ad38 	.word	0x2000ad38
 801a230:	20095c9c 	.word	0x20095c9c
 801a234:	20009d38 	.word	0x20009d38
 801a238:	20095c98 	.word	0x20095c98
 801a23c:	3ecccccd 	.word	0x3ecccccd

0801a240 <SD_Witer>:



uint8_t mount = 0;
void SD_Witer(uint16_t file_cnt, uint8_t Language_status, uint8_t Memory_Data_satus, uint8_t Mode_EL, uint8_t CRICQS_done)
{
 801a240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a244:	461f      	mov	r7, r3
	
	char digit_buff[3];
	char source_type[4];
	char measure_buff[12];

	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801a246:	4bb8      	ldr	r3, [pc, #736]	; (801a528 <SD_Witer+0x2e8>)
 801a248:	781b      	ldrb	r3, [r3, #0]
 801a24a:	2b01      	cmp	r3, #1
{
 801a24c:	b087      	sub	sp, #28
 801a24e:	4605      	mov	r5, r0
 801a250:	460c      	mov	r4, r1
 801a252:	4690      	mov	r8, r2
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801a254:	f000 85fe 	beq.w	801ae54 <SD_Witer+0xc14>
 801a258:	2b02      	cmp	r3, #2
 801a25a:	f000 85fe 	beq.w	801ae5a <SD_Witer+0xc1a>
 801a25e:	2b04      	cmp	r3, #4
 801a260:	f000 85fe 	beq.w	801ae60 <SD_Witer+0xc20>
 801a264:	2b08      	cmp	r3, #8
 801a266:	f000 85fe 	beq.w	801ae66 <SD_Witer+0xc26>
 801a26a:	2b10      	cmp	r3, #16
 801a26c:	f000 85fe 	beq.w	801ae6c <SD_Witer+0xc2c>
 801a270:	4aae      	ldr	r2, [pc, #696]	; (801a52c <SD_Witer+0x2ec>)
 801a272:	49af      	ldr	r1, [pc, #700]	; (801a530 <SD_Witer+0x2f0>)
 801a274:	2b20      	cmp	r3, #32
 801a276:	bf18      	it	ne
 801a278:	4611      	movne	r1, r2
 801a27a:	a802      	add	r0, sp, #8
 801a27c:	f006 f84b 	bl	8020316 <strcpy>
	
	memset(measure_buff, 0, 12);
 801a280:	2300      	movs	r3, #0
	
		sprintf(digit_buff, "%.3d", file_cnt );
 801a282:	462a      	mov	r2, r5
 801a284:	49ab      	ldr	r1, [pc, #684]	; (801a534 <SD_Witer+0x2f4>)
	memset(measure_buff, 0, 12);
 801a286:	9303      	str	r3, [sp, #12]
		sprintf(digit_buff, "%.3d", file_cnt );
 801a288:	a801      	add	r0, sp, #4
	memset(measure_buff, 0, 12);
 801a28a:	9304      	str	r3, [sp, #16]
 801a28c:	9305      	str	r3, [sp, #20]
		sprintf(digit_buff, "%.3d", file_cnt );
 801a28e:	f006 f801 	bl	8020294 <sprintf>
		strcat(buffer_sd, digit_buff);
 801a292:	a901      	add	r1, sp, #4
 801a294:	48a8      	ldr	r0, [pc, #672]	; (801a538 <SD_Witer+0x2f8>)
		strcat(buffer_sd, ".txt");

		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 801a296:	4da9      	ldr	r5, [pc, #676]	; (801a53c <SD_Witer+0x2fc>)
 801a298:	4ea7      	ldr	r6, [pc, #668]	; (801a538 <SD_Witer+0x2f8>)
		strcat(buffer_sd, digit_buff);
 801a29a:	f006 f81f 	bl	80202dc <strcat>
		strcat(buffer_sd, ".txt");
 801a29e:	49a8      	ldr	r1, [pc, #672]	; (801a540 <SD_Witer+0x300>)
 801a2a0:	48a5      	ldr	r0, [pc, #660]	; (801a538 <SD_Witer+0x2f8>)
 801a2a2:	f006 f81b 	bl	80202dc <strcat>
		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 801a2a6:	2201      	movs	r2, #1
 801a2a8:	49a6      	ldr	r1, [pc, #664]	; (801a544 <SD_Witer+0x304>)
 801a2aa:	48a7      	ldr	r0, [pc, #668]	; (801a548 <SD_Witer+0x308>)
 801a2ac:	f7ef f8f2 	bl	8009494 <f_mount>
 801a2b0:	7028      	strb	r0, [r5, #0]
       if (res != FR_OK)
 801a2b2:	2800      	cmp	r0, #0
 801a2b4:	f040 85b1 	bne.w	801ae1a <SD_Witer+0xbda>
        {
                //printf("Ошибка монтирования диска %d\r\n", result);
        }
			else
				{
				res = f_open(&MyFile, buffer_sd, FA_CREATE_ALWAYS | FA_WRITE);
 801a2b8:	220a      	movs	r2, #10
 801a2ba:	4631      	mov	r1, r6
 801a2bc:	48a3      	ldr	r0, [pc, #652]	; (801a54c <SD_Witer+0x30c>)
 801a2be:	f7ef f91d 	bl	80094fc <f_open>
 801a2c2:	7028      	strb	r0, [r5, #0]
				if (res == FR_OK)
 801a2c4:	2800      	cmp	r0, #0
 801a2c6:	f040 85a8 	bne.w	801ae1a <SD_Witer+0xbda>
					{
							
							SDWr_Status_bar = 0.5;
 801a2ca:	4ba1      	ldr	r3, [pc, #644]	; (801a550 <SD_Witer+0x310>)
 801a2cc:	49a1      	ldr	r1, [pc, #644]	; (801a554 <SD_Witer+0x314>)
 801a2ce:	2000      	movs	r0, #0
 801a2d0:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a2d4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801a2d8:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a2dc:	2055      	movs	r0, #85	; 0x55
 801a2de:	f7f8 ffd9 	bl	8013294 <GUI_Bar_Measure>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801a2e2:	4b9d      	ldr	r3, [pc, #628]	; (801a558 <SD_Witer+0x318>)
 801a2e4:	2c00      	cmp	r4, #0
 801a2e6:	f040 85c4 	bne.w	801ae72 <SD_Witer+0xc32>
 801a2ea:	499c      	ldr	r1, [pc, #624]	; (801a55c <SD_Witer+0x31c>)
 801a2ec:	2235      	movs	r2, #53	; 0x35
 801a2ee:	4897      	ldr	r0, [pc, #604]	; (801a54c <SD_Witer+0x30c>)
 801a2f0:	f7ef fa1a 	bl	8009728 <f_write>
							sprintf(measure_buff, "%.4f", SP_Measure);
 801a2f4:	4b9a      	ldr	r3, [pc, #616]	; (801a560 <SD_Witer+0x320>)
 801a2f6:	6818      	ldr	r0, [r3, #0]
 801a2f8:	f7e6 f93e 	bl	8000578 <__aeabi_f2d>
 801a2fc:	4602      	mov	r2, r0
 801a2fe:	460b      	mov	r3, r1
 801a300:	a803      	add	r0, sp, #12
 801a302:	4998      	ldr	r1, [pc, #608]	; (801a564 <SD_Witer+0x324>)
 801a304:	f005 ffc6 	bl	8020294 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a308:	220c      	movs	r2, #12
 801a30a:	4b93      	ldr	r3, [pc, #588]	; (801a558 <SD_Witer+0x318>)
 801a30c:	488f      	ldr	r0, [pc, #572]	; (801a54c <SD_Witer+0x30c>)
 801a30e:	eb0d 0102 	add.w	r1, sp, r2
 801a312:	f7ef fa09 	bl	8009728 <f_write>
							memset(measure_buff, 0, 12);
 801a316:	2300      	movs	r3, #0
 801a318:	9303      	str	r3, [sp, #12]
 801a31a:	9304      	str	r3, [sp, #16]
 801a31c:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801a31e:	4b8e      	ldr	r3, [pc, #568]	; (801a558 <SD_Witer+0x318>)
 801a320:	2c00      	cmp	r4, #0
 801a322:	f040 85aa 	bne.w	801ae7a <SD_Witer+0xc3a>
 801a326:	4990      	ldr	r1, [pc, #576]	; (801a568 <SD_Witer+0x328>)
 801a328:	2226      	movs	r2, #38	; 0x26
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 801a32a:	f8df 9264 	ldr.w	r9, [pc, #612]	; 801a590 <SD_Witer+0x350>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801a32e:	4887      	ldr	r0, [pc, #540]	; (801a54c <SD_Witer+0x30c>)
 801a330:	f7ef f9fa 	bl	8009728 <f_write>
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 801a334:	f8b9 2000 	ldrh.w	r2, [r9]
 801a338:	498c      	ldr	r1, [pc, #560]	; (801a56c <SD_Witer+0x32c>)
 801a33a:	a803      	add	r0, sp, #12
 801a33c:	f005 ffaa 	bl	8020294 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a340:	220c      	movs	r2, #12
 801a342:	4b85      	ldr	r3, [pc, #532]	; (801a558 <SD_Witer+0x318>)
 801a344:	4881      	ldr	r0, [pc, #516]	; (801a54c <SD_Witer+0x30c>)
 801a346:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 801a34a:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a34c:	f7ef f9ec 	bl	8009728 <f_write>
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801a350:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801a354:	4985      	ldr	r1, [pc, #532]	; (801a56c <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 801a356:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801a358:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801a35a:	9504      	str	r5, [sp, #16]
 801a35c:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801a35e:	f005 ff99 	bl	8020294 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a362:	220c      	movs	r2, #12
 801a364:	4b7c      	ldr	r3, [pc, #496]	; (801a558 <SD_Witer+0x318>)
 801a366:	4879      	ldr	r0, [pc, #484]	; (801a54c <SD_Witer+0x30c>)
 801a368:	eb0d 0102 	add.w	r1, sp, r2
 801a36c:	f7ef f9dc 	bl	8009728 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801a370:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801a374:	497d      	ldr	r1, [pc, #500]	; (801a56c <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 801a376:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801a378:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801a37a:	9504      	str	r5, [sp, #16]
 801a37c:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801a37e:	f005 ff89 	bl	8020294 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a382:	220c      	movs	r2, #12
 801a384:	4b74      	ldr	r3, [pc, #464]	; (801a558 <SD_Witer+0x318>)
 801a386:	4871      	ldr	r0, [pc, #452]	; (801a54c <SD_Witer+0x30c>)
 801a388:	eb0d 0102 	add.w	r1, sp, r2
 801a38c:	f7ef f9cc 	bl	8009728 <f_write>
							memset(measure_buff, 0, 12);
 801a390:	9503      	str	r5, [sp, #12]
 801a392:	9504      	str	r5, [sp, #16]
 801a394:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801a396:	4b70      	ldr	r3, [pc, #448]	; (801a558 <SD_Witer+0x318>)
 801a398:	2c00      	cmp	r4, #0
 801a39a:	f040 8572 	bne.w	801ae82 <SD_Witer+0xc42>
 801a39e:	4974      	ldr	r1, [pc, #464]	; (801a570 <SD_Witer+0x330>)
 801a3a0:	222e      	movs	r2, #46	; 0x2e
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 801a3a2:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 801a594 <SD_Witer+0x354>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801a3a6:	4869      	ldr	r0, [pc, #420]	; (801a54c <SD_Witer+0x30c>)
 801a3a8:	f7ef f9be 	bl	8009728 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 801a3ac:	f8d9 0000 	ldr.w	r0, [r9]
 801a3b0:	f7e6 f8e2 	bl	8000578 <__aeabi_f2d>
 801a3b4:	4602      	mov	r2, r0
 801a3b6:	460b      	mov	r3, r1
 801a3b8:	a803      	add	r0, sp, #12
 801a3ba:	496e      	ldr	r1, [pc, #440]	; (801a574 <SD_Witer+0x334>)
 801a3bc:	f005 ff6a 	bl	8020294 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a3c0:	220c      	movs	r2, #12
 801a3c2:	4b65      	ldr	r3, [pc, #404]	; (801a558 <SD_Witer+0x318>)
 801a3c4:	4861      	ldr	r0, [pc, #388]	; (801a54c <SD_Witer+0x30c>)
 801a3c6:	eb0d 0102 	add.w	r1, sp, r2
 801a3ca:	f7ef f9ad 	bl	8009728 <f_write>
							memset(measure_buff, 0, 12);
 801a3ce:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 801a3d0:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 801a3d4:	9503      	str	r5, [sp, #12]
 801a3d6:	9504      	str	r5, [sp, #16]
 801a3d8:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 801a3da:	f7e6 f8cd 	bl	8000578 <__aeabi_f2d>
 801a3de:	4602      	mov	r2, r0
 801a3e0:	460b      	mov	r3, r1
 801a3e2:	a803      	add	r0, sp, #12
 801a3e4:	495f      	ldr	r1, [pc, #380]	; (801a564 <SD_Witer+0x324>)
 801a3e6:	f005 ff55 	bl	8020294 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a3ea:	220c      	movs	r2, #12
 801a3ec:	4b5a      	ldr	r3, [pc, #360]	; (801a558 <SD_Witer+0x318>)
 801a3ee:	4857      	ldr	r0, [pc, #348]	; (801a54c <SD_Witer+0x30c>)
 801a3f0:	eb0d 0102 	add.w	r1, sp, r2
 801a3f4:	f7ef f998 	bl	8009728 <f_write>
							memset(measure_buff, 0, 12);
 801a3f8:	9503      	str	r5, [sp, #12]
 801a3fa:	9504      	str	r5, [sp, #16]
 801a3fc:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801a3fe:	4b56      	ldr	r3, [pc, #344]	; (801a558 <SD_Witer+0x318>)
 801a400:	2c00      	cmp	r4, #0
 801a402:	f040 8542 	bne.w	801ae8a <SD_Witer+0xc4a>
 801a406:	495c      	ldr	r1, [pc, #368]	; (801a578 <SD_Witer+0x338>)
 801a408:	2230      	movs	r2, #48	; 0x30
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 801a40a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801a598 <SD_Witer+0x358>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801a40e:	484f      	ldr	r0, [pc, #316]	; (801a54c <SD_Witer+0x30c>)
 801a410:	f7ef f98a 	bl	8009728 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 801a414:	f8d9 0000 	ldr.w	r0, [r9]
 801a418:	f7e6 f8ae 	bl	8000578 <__aeabi_f2d>
 801a41c:	4602      	mov	r2, r0
 801a41e:	460b      	mov	r3, r1
 801a420:	a803      	add	r0, sp, #12
 801a422:	4954      	ldr	r1, [pc, #336]	; (801a574 <SD_Witer+0x334>)
 801a424:	f005 ff36 	bl	8020294 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a428:	220c      	movs	r2, #12
 801a42a:	4b4b      	ldr	r3, [pc, #300]	; (801a558 <SD_Witer+0x318>)
 801a42c:	4847      	ldr	r0, [pc, #284]	; (801a54c <SD_Witer+0x30c>)
 801a42e:	eb0d 0102 	add.w	r1, sp, r2
 801a432:	f7ef f979 	bl	8009728 <f_write>
							memset(measure_buff, 0, 12);
 801a436:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 801a438:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 801a43c:	9503      	str	r5, [sp, #12]
 801a43e:	9504      	str	r5, [sp, #16]
 801a440:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 801a442:	f7e6 f899 	bl	8000578 <__aeabi_f2d>
 801a446:	4602      	mov	r2, r0
 801a448:	460b      	mov	r3, r1
 801a44a:	a803      	add	r0, sp, #12
 801a44c:	4945      	ldr	r1, [pc, #276]	; (801a564 <SD_Witer+0x324>)
 801a44e:	f005 ff21 	bl	8020294 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a452:	220c      	movs	r2, #12
 801a454:	4b40      	ldr	r3, [pc, #256]	; (801a558 <SD_Witer+0x318>)
 801a456:	483d      	ldr	r0, [pc, #244]	; (801a54c <SD_Witer+0x30c>)
 801a458:	eb0d 0102 	add.w	r1, sp, r2
 801a45c:	f7ef f964 	bl	8009728 <f_write>
							memset(measure_buff, 0, 12);
 801a460:	9503      	str	r5, [sp, #12]
 801a462:	9504      	str	r5, [sp, #16]
 801a464:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801a466:	4b3c      	ldr	r3, [pc, #240]	; (801a558 <SD_Witer+0x318>)
 801a468:	2c00      	cmp	r4, #0
 801a46a:	f040 8512 	bne.w	801ae92 <SD_Witer+0xc52>
 801a46e:	4943      	ldr	r1, [pc, #268]	; (801a57c <SD_Witer+0x33c>)
 801a470:	220e      	movs	r2, #14
 801a472:	4836      	ldr	r0, [pc, #216]	; (801a54c <SD_Witer+0x30c>)
 801a474:	f7ef f958 	bl	8009728 <f_write>
							if(Tc_Measure == 0xFFFF){f_write(&MyFile, "NAN", 3, &byteswritten);}
 801a478:	4b41      	ldr	r3, [pc, #260]	; (801a580 <SD_Witer+0x340>)
 801a47a:	881a      	ldrh	r2, [r3, #0]
 801a47c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a480:	429a      	cmp	r2, r3
 801a482:	f040 8537 	bne.w	801aef4 <SD_Witer+0xcb4>
 801a486:	4b34      	ldr	r3, [pc, #208]	; (801a558 <SD_Witer+0x318>)
 801a488:	4928      	ldr	r1, [pc, #160]	; (801a52c <SD_Witer+0x2ec>)
 801a48a:	4830      	ldr	r0, [pc, #192]	; (801a54c <SD_Witer+0x30c>)
 801a48c:	2203      	movs	r2, #3
 801a48e:	f7ef f94b 	bl	8009728 <f_write>
										sprintf(measure_buff, "%.d", Tc_Measure);
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
										memset(measure_buff, 0, 12);
								}
						
								SDWr_Status_bar = 0.7;
 801a492:	a123      	add	r1, pc, #140	; (adr r1, 801a520 <SD_Witer+0x2e0>)
 801a494:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a498:	4b2d      	ldr	r3, [pc, #180]	; (801a550 <SD_Witer+0x310>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a49a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 801a584 <SD_Witer+0x344>
								SDWr_Status_bar = 0.7;
 801a49e:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a4a2:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a4a6:	2055      	movs	r0, #85	; 0x55
 801a4a8:	f7f8 fef4 	bl	8013294 <GUI_Bar_Measure>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801a4ac:	4b2a      	ldr	r3, [pc, #168]	; (801a558 <SD_Witer+0x318>)
 801a4ae:	2c00      	cmp	r4, #0
 801a4b0:	f040 8531 	bne.w	801af16 <SD_Witer+0xcd6>
 801a4b4:	4934      	ldr	r1, [pc, #208]	; (801a588 <SD_Witer+0x348>)
 801a4b6:	224a      	movs	r2, #74	; 0x4a
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 801a4b8:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 801a59c <SD_Witer+0x35c>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801a4bc:	4823      	ldr	r0, [pc, #140]	; (801a54c <SD_Witer+0x30c>)
 801a4be:	f7ef f933 	bl	8009728 <f_write>
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 801a4c2:	f9b9 2000 	ldrsh.w	r2, [r9]
 801a4c6:	4931      	ldr	r1, [pc, #196]	; (801a58c <SD_Witer+0x34c>)
 801a4c8:	a803      	add	r0, sp, #12
 801a4ca:	f005 fee3 	bl	8020294 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a4ce:	220c      	movs	r2, #12
 801a4d0:	4b21      	ldr	r3, [pc, #132]	; (801a558 <SD_Witer+0x318>)
 801a4d2:	481e      	ldr	r0, [pc, #120]	; (801a54c <SD_Witer+0x30c>)
 801a4d4:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 801a4d8:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a4da:	f7ef f925 	bl	8009728 <f_write>
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801a4de:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
 801a4e2:	492a      	ldr	r1, [pc, #168]	; (801a58c <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 801a4e4:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801a4e6:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801a4e8:	9504      	str	r5, [sp, #16]
 801a4ea:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801a4ec:	f005 fed2 	bl	8020294 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a4f0:	220c      	movs	r2, #12
 801a4f2:	4b19      	ldr	r3, [pc, #100]	; (801a558 <SD_Witer+0x318>)
 801a4f4:	4815      	ldr	r0, [pc, #84]	; (801a54c <SD_Witer+0x30c>)
 801a4f6:	eb0d 0102 	add.w	r1, sp, r2
 801a4fa:	f7ef f915 	bl	8009728 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801a4fe:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801a502:	4922      	ldr	r1, [pc, #136]	; (801a58c <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 801a504:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801a506:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801a508:	9504      	str	r5, [sp, #16]
 801a50a:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801a50c:	f005 fec2 	bl	8020294 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a510:	220c      	movs	r2, #12
 801a512:	4b11      	ldr	r3, [pc, #68]	; (801a558 <SD_Witer+0x318>)
 801a514:	480d      	ldr	r0, [pc, #52]	; (801a54c <SD_Witer+0x30c>)
 801a516:	eb0d 0102 	add.w	r1, sp, r2
 801a51a:	f7ef f905 	bl	8009728 <f_write>
 801a51e:	e03f      	b.n	801a5a0 <SD_Witer+0x360>
 801a520:	66666666 	.word	0x66666666
 801a524:	3fe66666 	.word	0x3fe66666
 801a528:	20090ab9 	.word	0x20090ab9
 801a52c:	08031d93 	.word	0x08031d93
 801a530:	08031d97 	.word	0x08031d97
 801a534:	08031d9b 	.word	0x08031d9b
 801a538:	20092634 	.word	0x20092634
 801a53c:	20093680 	.word	0x20093680
 801a540:	08031da0 	.word	0x08031da0
 801a544:	20093685 	.word	0x20093685
 801a548:	20091600 	.word	0x20091600
 801a54c:	20092650 	.word	0x20092650
 801a550:	20009760 	.word	0x20009760
 801a554:	3fe00000 	.word	0x3fe00000
 801a558:	200915f8 	.word	0x200915f8
 801a55c:	20000929 	.word	0x20000929
 801a560:	20095800 	.word	0x20095800
 801a564:	08031d6f 	.word	0x08031d6f
 801a568:	20000442 	.word	0x20000442
 801a56c:	08031dc6 	.word	0x08031dc6
 801a570:	200004be 	.word	0x200004be
 801a574:	08031da5 	.word	0x08031da5
 801a578:	2000047c 	.word	0x2000047c
 801a57c:	20000250 	.word	0x20000250
 801a580:	20054940 	.word	0x20054940
 801a584:	3f333333 	.word	0x3f333333
 801a588:	20000614 	.word	0x20000614
 801a58c:	08031daf 	.word	0x08031daf
 801a590:	2008f522 	.word	0x2008f522
 801a594:	2008f540 	.word	0x2008f540
 801a598:	2008f538 	.word	0x2008f538
 801a59c:	2008f51c 	.word	0x2008f51c
							memset(measure_buff, 0, 12);
 801a5a0:	9503      	str	r5, [sp, #12]
 801a5a2:	9504      	str	r5, [sp, #16]
 801a5a4:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801a5a6:	4bb4      	ldr	r3, [pc, #720]	; (801a878 <SD_Witer+0x638>)
 801a5a8:	2c00      	cmp	r4, #0
 801a5aa:	f040 84b8 	bne.w	801af1e <SD_Witer+0xcde>
 801a5ae:	49b3      	ldr	r1, [pc, #716]	; (801a87c <SD_Witer+0x63c>)
 801a5b0:	222a      	movs	r2, #42	; 0x2a
 801a5b2:	48b3      	ldr	r0, [pc, #716]	; (801a880 <SD_Witer+0x640>)
 801a5b4:	f7ef f8b8 	bl	8009728 <f_write>
							f_write(&MyFile, &source_type, sizeof(source_type), &byteswritten);//SourceType
 801a5b8:	4baf      	ldr	r3, [pc, #700]	; (801a878 <SD_Witer+0x638>)
 801a5ba:	48b1      	ldr	r0, [pc, #708]	; (801a880 <SD_Witer+0x640>)
 801a5bc:	2204      	movs	r2, #4
 801a5be:	a902      	add	r1, sp, #8
 801a5c0:	f7ef f8b2 	bl	8009728 <f_write>
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801a5c4:	4bac      	ldr	r3, [pc, #688]	; (801a878 <SD_Witer+0x638>)
 801a5c6:	2c00      	cmp	r4, #0
 801a5c8:	f040 84ad 	bne.w	801af26 <SD_Witer+0xce6>
 801a5cc:	49ad      	ldr	r1, [pc, #692]	; (801a884 <SD_Witer+0x644>)
 801a5ce:	2235      	movs	r2, #53	; 0x35
 801a5d0:	48ab      	ldr	r0, [pc, #684]	; (801a880 <SD_Witer+0x640>)
 801a5d2:	f7ef f8a9 	bl	8009728 <f_write>
							sprintf(measure_buff, "%d\t", lambda_d_Measure); //Lambda D
 801a5d6:	4bac      	ldr	r3, [pc, #688]	; (801a888 <SD_Witer+0x648>)
 801a5d8:	49ac      	ldr	r1, [pc, #688]	; (801a88c <SD_Witer+0x64c>)
 801a5da:	881a      	ldrh	r2, [r3, #0]
 801a5dc:	a803      	add	r0, sp, #12
 801a5de:	f005 fe59 	bl	8020294 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a5e2:	220c      	movs	r2, #12
 801a5e4:	4ba4      	ldr	r3, [pc, #656]	; (801a878 <SD_Witer+0x638>)
 801a5e6:	48a6      	ldr	r0, [pc, #664]	; (801a880 <SD_Witer+0x640>)
 801a5e8:	eb0d 0102 	add.w	r1, sp, r2
 801a5ec:	f7ef f89c 	bl	8009728 <f_write>
							memset(measure_buff, 0, 12);
 801a5f0:	2300      	movs	r3, #0
 801a5f2:	9303      	str	r3, [sp, #12]
 801a5f4:	9304      	str	r3, [sp, #16]
 801a5f6:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801a5f8:	4b9f      	ldr	r3, [pc, #636]	; (801a878 <SD_Witer+0x638>)
 801a5fa:	2c00      	cmp	r4, #0
 801a5fc:	f040 8497 	bne.w	801af2e <SD_Witer+0xcee>
 801a600:	49a3      	ldr	r1, [pc, #652]	; (801a890 <SD_Witer+0x650>)
 801a602:	223b      	movs	r2, #59	; 0x3b
 801a604:	489e      	ldr	r0, [pc, #632]	; (801a880 <SD_Witer+0x640>)
 801a606:	f7ef f88f 	bl	8009728 <f_write>
							sprintf(measure_buff, "%d\t", lambda_c_Measure); //Lambda C
 801a60a:	4ba2      	ldr	r3, [pc, #648]	; (801a894 <SD_Witer+0x654>)
 801a60c:	499f      	ldr	r1, [pc, #636]	; (801a88c <SD_Witer+0x64c>)
 801a60e:	881a      	ldrh	r2, [r3, #0]
 801a610:	a803      	add	r0, sp, #12
 801a612:	f005 fe3f 	bl	8020294 <sprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a616:	220c      	movs	r2, #12
 801a618:	4b97      	ldr	r3, [pc, #604]	; (801a878 <SD_Witer+0x638>)
 801a61a:	4899      	ldr	r0, [pc, #612]	; (801a880 <SD_Witer+0x640>)
 801a61c:	eb0d 0102 	add.w	r1, sp, r2
 801a620:	f7ef f882 	bl	8009728 <f_write>
							memset(measure_buff, 0, 12);
 801a624:	2300      	movs	r3, #0
						
							if(Memory_Data_satus == 0x01)
 801a626:	f1b8 0f01 	cmp.w	r8, #1
							memset(measure_buff, 0, 12);
 801a62a:	9303      	str	r3, [sp, #12]
 801a62c:	9304      	str	r3, [sp, #16]
 801a62e:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a630:	4b91      	ldr	r3, [pc, #580]	; (801a878 <SD_Witer+0x638>)
							if(Memory_Data_satus == 0x01)
 801a632:	f040 8484 	bne.w	801af3e <SD_Witer+0xcfe>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801a636:	2c00      	cmp	r4, #0
 801a638:	f040 847d 	bne.w	801af36 <SD_Witer+0xcf6>
 801a63c:	4996      	ldr	r1, [pc, #600]	; (801a898 <SD_Witer+0x658>)
 801a63e:	2224      	movs	r2, #36	; 0x24
 801a640:	488f      	ldr	r0, [pc, #572]	; (801a880 <SD_Witer+0x640>)
 801a642:	f7ef f871 	bl	8009728 <f_write>
								sprintf(measure_buff, "%d\t", delta_Eab_Measure); //Delta E
 801a646:	4b95      	ldr	r3, [pc, #596]	; (801a89c <SD_Witer+0x65c>)
 801a648:	4990      	ldr	r1, [pc, #576]	; (801a88c <SD_Witer+0x64c>)
 801a64a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a64e:	a803      	add	r0, sp, #12
 801a650:	f005 fe20 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a654:	220c      	movs	r2, #12
 801a656:	4b88      	ldr	r3, [pc, #544]	; (801a878 <SD_Witer+0x638>)
 801a658:	4889      	ldr	r0, [pc, #548]	; (801a880 <SD_Witer+0x640>)
 801a65a:	eb0d 0102 	add.w	r1, sp, r2
 801a65e:	f7ef f863 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
 801a662:	2300      	movs	r3, #0
 801a664:	9303      	str	r3, [sp, #12]
 801a666:	9304      	str	r3, [sp, #16]
 801a668:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
								f_write(&MyFile, "NAN", 3, &byteswritten);
							}
							
							SDWr_Status_bar = 0.8;
 801a66a:	a181      	add	r1, pc, #516	; (adr r1, 801a870 <SD_Witer+0x630>)
 801a66c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a670:	4b8b      	ldr	r3, [pc, #556]	; (801a8a0 <SD_Witer+0x660>)
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a672:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801a8a4 <SD_Witer+0x664>
 801a676:	f8df 8278 	ldr.w	r8, [pc, #632]	; 801a8f0 <SD_Witer+0x6b0>
							SDWr_Status_bar = 0.8;
 801a67a:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a67e:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a682:	2055      	movs	r0, #85	; 0x55
 801a684:	f7f8 fe06 	bl	8013294 <GUI_Bar_Measure>
							if(Mode_EL == 0x01) //E mode
 801a688:	2f01      	cmp	r7, #1
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801a68a:	4b7b      	ldr	r3, [pc, #492]	; (801a878 <SD_Witer+0x638>)
							if(Mode_EL == 0x01) //E mode
 801a68c:	f040 847d 	bne.w	801af8a <SD_Witer+0xd4a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801a690:	2c00      	cmp	r4, #0
 801a692:	f040 8465 	bne.w	801af60 <SD_Witer+0xd20>
 801a696:	4984      	ldr	r1, [pc, #528]	; (801a8a8 <SD_Witer+0x668>)
 801a698:	2263      	movs	r2, #99	; 0x63
 801a69a:	4879      	ldr	r0, [pc, #484]	; (801a880 <SD_Witer+0x640>)
 801a69c:	4f83      	ldr	r7, [pc, #524]	; (801a8ac <SD_Witer+0x66c>)
 801a69e:	f8df b254 	ldr.w	fp, [pc, #596]	; 801a8f4 <SD_Witer+0x6b4>
								
								for(uint16_t i=0; i < 1024; i++)
								{
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a6a2:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801a878 <SD_Witer+0x638>
 801a6a6:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801a880 <SD_Witer+0x640>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801a6aa:	f7ef f83d 	bl	8009728 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
 801a6ae:	f857 0b04 	ldr.w	r0, [r7], #4
 801a6b2:	f7e5 ff61 	bl	8000578 <__aeabi_f2d>
 801a6b6:	4602      	mov	r2, r0
 801a6b8:	460b      	mov	r3, r1
 801a6ba:	a803      	add	r0, sp, #12
 801a6bc:	497c      	ldr	r1, [pc, #496]	; (801a8b0 <SD_Witer+0x670>)
 801a6be:	f005 fde9 	bl	8020294 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a6c2:	220c      	movs	r2, #12
 801a6c4:	4653      	mov	r3, sl
 801a6c6:	eb0d 0102 	add.w	r1, sp, r2
 801a6ca:	4648      	mov	r0, r9
 801a6cc:	f7ef f82c 	bl	8009728 <f_write>
									memset(measure_buff, 0, 12);
 801a6d0:	2500      	movs	r5, #0
									
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801a6d2:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801a6d6:	9503      	str	r5, [sp, #12]
 801a6d8:	9504      	str	r5, [sp, #16]
 801a6da:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801a6dc:	f7e5 ff4c 	bl	8000578 <__aeabi_f2d>
 801a6e0:	4602      	mov	r2, r0
 801a6e2:	460b      	mov	r3, r1
 801a6e4:	a803      	add	r0, sp, #12
 801a6e6:	4973      	ldr	r1, [pc, #460]	; (801a8b4 <SD_Witer+0x674>)
 801a6e8:	f005 fdd4 	bl	8020294 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a6ec:	220c      	movs	r2, #12
 801a6ee:	4653      	mov	r3, sl
 801a6f0:	eb0d 0102 	add.w	r1, sp, r2
 801a6f4:	4648      	mov	r0, r9
 801a6f6:	f7ef f817 	bl	8009728 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801a6fa:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801a6fc:	9503      	str	r5, [sp, #12]
 801a6fe:	9504      	str	r5, [sp, #16]
 801a700:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801a702:	d1d4      	bne.n	801a6ae <SD_Witer+0x46e>
								}
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801a704:	4b5c      	ldr	r3, [pc, #368]	; (801a878 <SD_Witer+0x638>)
 801a706:	2c00      	cmp	r4, #0
 801a708:	f040 842e 	bne.w	801af68 <SD_Witer+0xd28>
 801a70c:	496a      	ldr	r1, [pc, #424]	; (801a8b8 <SD_Witer+0x678>)
 801a70e:	2224      	movs	r2, #36	; 0x24
 801a710:	485b      	ldr	r0, [pc, #364]	; (801a880 <SD_Witer+0x640>)
 801a712:	f7ef f809 	bl	8009728 <f_write>
								sprintf(measure_buff, "%.2f",  E_day); //Ee
 801a716:	4b69      	ldr	r3, [pc, #420]	; (801a8bc <SD_Witer+0x67c>)
 801a718:	6818      	ldr	r0, [r3, #0]
 801a71a:	f7e5 ff2d 	bl	8000578 <__aeabi_f2d>
 801a71e:	4602      	mov	r2, r0
 801a720:	460b      	mov	r3, r1
 801a722:	a803      	add	r0, sp, #12
 801a724:	4966      	ldr	r1, [pc, #408]	; (801a8c0 <SD_Witer+0x680>)
 801a726:	f005 fdb5 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a72a:	220c      	movs	r2, #12
 801a72c:	4b52      	ldr	r3, [pc, #328]	; (801a878 <SD_Witer+0x638>)
 801a72e:	4854      	ldr	r0, [pc, #336]	; (801a880 <SD_Witer+0x640>)
 801a730:	eb0d 0102 	add.w	r1, sp, r2
 801a734:	f7ee fff8 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
 801a738:	2300      	movs	r3, #0
 801a73a:	9303      	str	r3, [sp, #12]
 801a73c:	9304      	str	r3, [sp, #16]
 801a73e:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801a740:	4b4d      	ldr	r3, [pc, #308]	; (801a878 <SD_Witer+0x638>)
 801a742:	2c00      	cmp	r4, #0
 801a744:	f040 8414 	bne.w	801af70 <SD_Witer+0xd30>
 801a748:	495e      	ldr	r1, [pc, #376]	; (801a8c4 <SD_Witer+0x684>)
 801a74a:	2221      	movs	r2, #33	; 0x21
 801a74c:	484c      	ldr	r0, [pc, #304]	; (801a880 <SD_Witer+0x640>)
 801a74e:	f7ee ffeb 	bl	8009728 <f_write>
								sprintf(measure_buff, "%.1f",  E_day_Wt); //Eu
 801a752:	4b5d      	ldr	r3, [pc, #372]	; (801a8c8 <SD_Witer+0x688>)
 801a754:	6818      	ldr	r0, [r3, #0]
 801a756:	f7e5 ff0f 	bl	8000578 <__aeabi_f2d>
 801a75a:	4602      	mov	r2, r0
 801a75c:	460b      	mov	r3, r1
 801a75e:	a803      	add	r0, sp, #12
 801a760:	495a      	ldr	r1, [pc, #360]	; (801a8cc <SD_Witer+0x68c>)
 801a762:	f005 fd97 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a766:	220c      	movs	r2, #12
 801a768:	4b43      	ldr	r3, [pc, #268]	; (801a878 <SD_Witer+0x638>)
 801a76a:	4845      	ldr	r0, [pc, #276]	; (801a880 <SD_Witer+0x640>)
 801a76c:	eb0d 0102 	add.w	r1, sp, r2
 801a770:	f7ee ffda 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
 801a774:	2300      	movs	r3, #0
 801a776:	9303      	str	r3, [sp, #12]
 801a778:	9304      	str	r3, [sp, #16]
 801a77a:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801a77c:	4b3e      	ldr	r3, [pc, #248]	; (801a878 <SD_Witer+0x638>)
 801a77e:	2c00      	cmp	r4, #0
 801a780:	f040 83fa 	bne.w	801af78 <SD_Witer+0xd38>
 801a784:	4952      	ldr	r1, [pc, #328]	; (801a8d0 <SD_Witer+0x690>)
 801a786:	2223      	movs	r2, #35	; 0x23
 801a788:	483d      	ldr	r0, [pc, #244]	; (801a880 <SD_Witer+0x640>)
 801a78a:	f7ee ffcd 	bl	8009728 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPFD
 801a78e:	4b51      	ldr	r3, [pc, #324]	; (801a8d4 <SD_Witer+0x694>)
 801a790:	6818      	ldr	r0, [r3, #0]
 801a792:	f7e5 fef1 	bl	8000578 <__aeabi_f2d>
 801a796:	4602      	mov	r2, r0
 801a798:	460b      	mov	r3, r1
 801a79a:	a803      	add	r0, sp, #12
 801a79c:	4948      	ldr	r1, [pc, #288]	; (801a8c0 <SD_Witer+0x680>)
 801a79e:	f005 fd79 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a7a2:	220c      	movs	r2, #12
 801a7a4:	4b34      	ldr	r3, [pc, #208]	; (801a878 <SD_Witer+0x638>)
 801a7a6:	4836      	ldr	r0, [pc, #216]	; (801a880 <SD_Witer+0x640>)
 801a7a8:	eb0d 0102 	add.w	r1, sp, r2
 801a7ac:	f7ee ffbc 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	9303      	str	r3, [sp, #12]
 801a7b4:	9304      	str	r3, [sp, #16]
 801a7b6:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801a7b8:	4b2f      	ldr	r3, [pc, #188]	; (801a878 <SD_Witer+0x638>)
 801a7ba:	2c00      	cmp	r4, #0
 801a7bc:	f040 83df 	bne.w	801af7e <SD_Witer+0xd3e>
 801a7c0:	4945      	ldr	r1, [pc, #276]	; (801a8d8 <SD_Witer+0x698>)
 801a7c2:	2239      	movs	r2, #57	; 0x39
 801a7c4:	482e      	ldr	r0, [pc, #184]	; (801a880 <SD_Witer+0x640>)
 801a7c6:	f7ee ffaf 	bl	8009728 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPFD B
 801a7ca:	4b44      	ldr	r3, [pc, #272]	; (801a8dc <SD_Witer+0x69c>)
 801a7cc:	6818      	ldr	r0, [r3, #0]
 801a7ce:	f7e5 fed3 	bl	8000578 <__aeabi_f2d>
 801a7d2:	4602      	mov	r2, r0
 801a7d4:	460b      	mov	r3, r1
 801a7d6:	a803      	add	r0, sp, #12
 801a7d8:	4941      	ldr	r1, [pc, #260]	; (801a8e0 <SD_Witer+0x6a0>)
 801a7da:	f005 fd5b 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a7de:	220c      	movs	r2, #12
 801a7e0:	eb0d 0102 	add.w	r1, sp, r2
 801a7e4:	4b24      	ldr	r3, [pc, #144]	; (801a878 <SD_Witer+0x638>)
 801a7e6:	4826      	ldr	r0, [pc, #152]	; (801a880 <SD_Witer+0x640>)
 801a7e8:	f7ee ff9e 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801a7ec:	4b3d      	ldr	r3, [pc, #244]	; (801a8e4 <SD_Witer+0x6a4>)
								memset(measure_buff, 0, 12);
 801a7ee:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801a7f0:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a7f2:	9503      	str	r5, [sp, #12]
 801a7f4:	9504      	str	r5, [sp, #16]
 801a7f6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801a7f8:	f7e5 febe 	bl	8000578 <__aeabi_f2d>
 801a7fc:	4602      	mov	r2, r0
 801a7fe:	460b      	mov	r3, r1
 801a800:	a803      	add	r0, sp, #12
 801a802:	4937      	ldr	r1, [pc, #220]	; (801a8e0 <SD_Witer+0x6a0>)
 801a804:	f005 fd46 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a808:	220c      	movs	r2, #12
 801a80a:	eb0d 0102 	add.w	r1, sp, r2
 801a80e:	4b1a      	ldr	r3, [pc, #104]	; (801a878 <SD_Witer+0x638>)
 801a810:	481b      	ldr	r0, [pc, #108]	; (801a880 <SD_Witer+0x640>)
 801a812:	f7ee ff89 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801a816:	4b34      	ldr	r3, [pc, #208]	; (801a8e8 <SD_Witer+0x6a8>)
								memset(measure_buff, 0, 12);
 801a818:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801a81a:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a81c:	9504      	str	r5, [sp, #16]
 801a81e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801a820:	f7e5 feaa 	bl	8000578 <__aeabi_f2d>
 801a824:	4602      	mov	r2, r0
 801a826:	460b      	mov	r3, r1
 801a828:	a803      	add	r0, sp, #12
 801a82a:	492d      	ldr	r1, [pc, #180]	; (801a8e0 <SD_Witer+0x6a0>)
 801a82c:	f005 fd32 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a830:	220c      	movs	r2, #12
 801a832:	eb0d 0102 	add.w	r1, sp, r2
 801a836:	4b10      	ldr	r3, [pc, #64]	; (801a878 <SD_Witer+0x638>)
 801a838:	4811      	ldr	r0, [pc, #68]	; (801a880 <SD_Witer+0x640>)
 801a83a:	f7ee ff75 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801a83e:	4b2b      	ldr	r3, [pc, #172]	; (801a8ec <SD_Witer+0x6ac>)
								memset(measure_buff, 0, 12);
 801a840:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801a842:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a844:	9504      	str	r5, [sp, #16]
 801a846:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801a848:	f7e5 fe96 	bl	8000578 <__aeabi_f2d>
 801a84c:	4602      	mov	r2, r0
 801a84e:	460b      	mov	r3, r1
 801a850:	a803      	add	r0, sp, #12
 801a852:	4923      	ldr	r1, [pc, #140]	; (801a8e0 <SD_Witer+0x6a0>)
 801a854:	f005 fd1e 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a858:	220c      	movs	r2, #12
 801a85a:	4b07      	ldr	r3, [pc, #28]	; (801a878 <SD_Witer+0x638>)
 801a85c:	4808      	ldr	r0, [pc, #32]	; (801a880 <SD_Witer+0x640>)
 801a85e:	eb0d 0102 	add.w	r1, sp, r2
 801a862:	f7ee ff61 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
 801a866:	9503      	str	r5, [sp, #12]
 801a868:	9504      	str	r5, [sp, #16]
 801a86a:	9505      	str	r5, [sp, #20]
 801a86c:	e044      	b.n	801a8f8 <SD_Witer+0x6b8>
 801a86e:	bf00      	nop
 801a870:	9999999a 	.word	0x9999999a
 801a874:	3fe99999 	.word	0x3fe99999
 801a878:	200915f8 	.word	0x200915f8
 801a87c:	200008e1 	.word	0x200008e1
 801a880:	20092650 	.word	0x20092650
 801a884:	20000a09 	.word	0x20000a09
 801a888:	20095b84 	.word	0x20095b84
 801a88c:	08031dc6 	.word	0x08031dc6
 801a890:	200009b4 	.word	0x200009b4
 801a894:	200959bc 	.word	0x200959bc
 801a898:	20000971 	.word	0x20000971
 801a89c:	20090ab6 	.word	0x20090ab6
 801a8a0:	20009760 	.word	0x20009760
 801a8a4:	3f4ccccd 	.word	0x3f4ccccd
 801a8a8:	20000569 	.word	0x20000569
 801a8ac:	2000c53c 	.word	0x2000c53c
 801a8b0:	08031db3 	.word	0x08031db3
 801a8b4:	08031db8 	.word	0x08031db8
 801a8b8:	20000520 	.word	0x20000520
 801a8bc:	20095ca0 	.word	0x20095ca0
 801a8c0:	08031d6a 	.word	0x08031d6a
 801a8c4:	200005de 	.word	0x200005de
 801a8c8:	20095718 	.word	0x20095718
 801a8cc:	08031d65 	.word	0x08031d65
 801a8d0:	20000812 	.word	0x20000812
 801a8d4:	20095720 	.word	0x20095720
 801a8d8:	200007c6 	.word	0x200007c6
 801a8dc:	20095804 	.word	0x20095804
 801a8e0:	08031dbf 	.word	0x08031dbf
 801a8e4:	20095b88 	.word	0x20095b88
 801a8e8:	20095a3c 	.word	0x20095a3c
 801a8ec:	2009571c 	.word	0x2009571c
 801a8f0:	2000d53c 	.word	0x2000d53c
 801a8f4:	20054948 	.word	0x20054948
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801a8f8:	4baf      	ldr	r3, [pc, #700]	; (801abb8 <SD_Witer+0x978>)
 801a8fa:	2c00      	cmp	r4, #0
 801a8fc:	f040 8342 	bne.w	801af84 <SD_Witer+0xd44>
 801a900:	49ae      	ldr	r1, [pc, #696]	; (801abbc <SD_Witer+0x97c>)
 801a902:	2213      	movs	r2, #19
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801a904:	48ae      	ldr	r0, [pc, #696]	; (801abc0 <SD_Witer+0x980>)
 801a906:	f7ee ff0f 	bl	8009728 <f_write>
								sprintf(measure_buff, "%.2f\t", ELb_Measure); //Lb
 801a90a:	4bae      	ldr	r3, [pc, #696]	; (801abc4 <SD_Witer+0x984>)
 801a90c:	6818      	ldr	r0, [r3, #0]
 801a90e:	f7e5 fe33 	bl	8000578 <__aeabi_f2d>
 801a912:	4602      	mov	r2, r0
 801a914:	460b      	mov	r3, r1
 801a916:	a803      	add	r0, sp, #12
 801a918:	49ab      	ldr	r1, [pc, #684]	; (801abc8 <SD_Witer+0x988>)
 801a91a:	f005 fcbb 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a91e:	220c      	movs	r2, #12
 801a920:	eb0d 0102 	add.w	r1, sp, r2
 801a924:	4ba4      	ldr	r3, [pc, #656]	; (801abb8 <SD_Witer+0x978>)
 801a926:	48a6      	ldr	r0, [pc, #664]	; (801abc0 <SD_Witer+0x980>)
 801a928:	f7ee fefe 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);

								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801a92c:	4ba7      	ldr	r3, [pc, #668]	; (801abcc <SD_Witer+0x98c>)
								memset(measure_buff, 0, 12);
 801a92e:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801a930:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801a932:	9503      	str	r5, [sp, #12]
 801a934:	9504      	str	r5, [sp, #16]
 801a936:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801a938:	f7e5 fe1e 	bl	8000578 <__aeabi_f2d>
 801a93c:	4602      	mov	r2, r0
 801a93e:	460b      	mov	r3, r1
 801a940:	a803      	add	r0, sp, #12
 801a942:	49a3      	ldr	r1, [pc, #652]	; (801abd0 <SD_Witer+0x990>)
 801a944:	f005 fca6 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a948:	220c      	movs	r2, #12
 801a94a:	eb0d 0102 	add.w	r1, sp, r2
 801a94e:	4b9a      	ldr	r3, [pc, #616]	; (801abb8 <SD_Witer+0x978>)
 801a950:	489b      	ldr	r0, [pc, #620]	; (801abc0 <SD_Witer+0x980>)
 801a952:	f7ee fee9 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								
								SDWr_Status_bar = 0.9;
 801a956:	a196      	add	r1, pc, #600	; (adr r1, 801abb0 <SD_Witer+0x970>)
 801a958:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a95c:	4b9d      	ldr	r3, [pc, #628]	; (801abd4 <SD_Witer+0x994>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a95e:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 801abd8 <SD_Witer+0x998>
								memset(measure_buff, 0, 12);
 801a962:	9503      	str	r5, [sp, #12]
								SDWr_Status_bar = 0.9;
 801a964:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a968:	f44f 718c 	mov.w	r1, #280	; 0x118
 801a96c:	2055      	movs	r0, #85	; 0x55
								memset(measure_buff, 0, 12);
 801a96e:	9504      	str	r5, [sp, #16]
 801a970:	9505      	str	r5, [sp, #20]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801a972:	f7f8 fc8f 	bl	8013294 <GUI_Bar_Measure>
						
							}
							if(CRICQS_done == 0x01)
 801a976:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801a97a:	2b01      	cmp	r3, #1
 801a97c:	f040 824d 	bne.w	801ae1a <SD_Witer+0xbda>
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801a980:	4b8d      	ldr	r3, [pc, #564]	; (801abb8 <SD_Witer+0x978>)
 801a982:	2c00      	cmp	r4, #0
 801a984:	f040 8407 	bne.w	801b196 <SD_Witer+0xf56>
 801a988:	4994      	ldr	r1, [pc, #592]	; (801abdc <SD_Witer+0x99c>)
 801a98a:	227d      	movs	r2, #125	; 0x7d
 801a98c:	488c      	ldr	r0, [pc, #560]	; (801abc0 <SD_Witer+0x980>)
 801a98e:	f7ee fecb 	bl	8009728 <f_write>
								sprintf(measure_buff, "%d\t", 151); //Ra
 801a992:	2297      	movs	r2, #151	; 0x97
 801a994:	4992      	ldr	r1, [pc, #584]	; (801abe0 <SD_Witer+0x9a0>)
 801a996:	a803      	add	r0, sp, #12
 801a998:	f005 fc7c 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a99c:	220c      	movs	r2, #12
 801a99e:	4b86      	ldr	r3, [pc, #536]	; (801abb8 <SD_Witer+0x978>)
 801a9a0:	4887      	ldr	r0, [pc, #540]	; (801abc0 <SD_Witer+0x980>)
 801a9a2:	eb0d 0102 	add.w	r1, sp, r2
								memset(measure_buff, 0, 12);
 801a9a6:	2500      	movs	r5, #0
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a9a8:	f7ee febe 	bl	8009728 <f_write>
								
								sprintf(measure_buff, "%d", 231); //Rall
 801a9ac:	22e7      	movs	r2, #231	; 0xe7
 801a9ae:	498d      	ldr	r1, [pc, #564]	; (801abe4 <SD_Witer+0x9a4>)
								memset(measure_buff, 0, 12);
 801a9b0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d", 231); //Rall
 801a9b2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a9b4:	9504      	str	r5, [sp, #16]
 801a9b6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d", 231); //Rall
 801a9b8:	f005 fc6c 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a9bc:	220c      	movs	r2, #12
 801a9be:	4b7e      	ldr	r3, [pc, #504]	; (801abb8 <SD_Witer+0x978>)
 801a9c0:	487f      	ldr	r0, [pc, #508]	; (801abc0 <SD_Witer+0x980>)
 801a9c2:	eb0d 0102 	add.w	r1, sp, r2
 801a9c6:	f7ee feaf 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801a9ca:	220d      	movs	r2, #13
 801a9cc:	4986      	ldr	r1, [pc, #536]	; (801abe8 <SD_Witer+0x9a8>)
								memset(measure_buff, 0, 12);
 801a9ce:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801a9d0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a9d2:	9504      	str	r5, [sp, #16]
 801a9d4:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801a9d6:	f005 fc5d 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a9da:	220c      	movs	r2, #12
 801a9dc:	4b76      	ldr	r3, [pc, #472]	; (801abb8 <SD_Witer+0x978>)
 801a9de:	4878      	ldr	r0, [pc, #480]	; (801abc0 <SD_Witer+0x980>)
 801a9e0:	eb0d 0102 	add.w	r1, sp, r2
 801a9e4:	f7ee fea0 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 29); //R2
 801a9e8:	221d      	movs	r2, #29
 801a9ea:	497d      	ldr	r1, [pc, #500]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801a9ec:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 29); //R2
 801a9ee:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801a9f0:	9504      	str	r5, [sp, #16]
 801a9f2:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 29); //R2
 801a9f4:	f005 fc4e 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801a9f8:	220c      	movs	r2, #12
 801a9fa:	4b6f      	ldr	r3, [pc, #444]	; (801abb8 <SD_Witer+0x978>)
 801a9fc:	4870      	ldr	r0, [pc, #448]	; (801abc0 <SD_Witer+0x980>)
 801a9fe:	eb0d 0102 	add.w	r1, sp, r2
 801aa02:	f7ee fe91 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 49); //R3
 801aa06:	2231      	movs	r2, #49	; 0x31
 801aa08:	4975      	ldr	r1, [pc, #468]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801aa0a:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 49); //R3
 801aa0c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801aa0e:	9504      	str	r5, [sp, #16]
 801aa10:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 49); //R3
 801aa12:	f005 fc3f 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa16:	220c      	movs	r2, #12
 801aa18:	4b67      	ldr	r3, [pc, #412]	; (801abb8 <SD_Witer+0x978>)
 801aa1a:	4869      	ldr	r0, [pc, #420]	; (801abc0 <SD_Witer+0x980>)
 801aa1c:	eb0d 0102 	add.w	r1, sp, r2
 801aa20:	f7ee fe82 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 44); //R4
 801aa24:	222c      	movs	r2, #44	; 0x2c
 801aa26:	496e      	ldr	r1, [pc, #440]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801aa28:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 44); //R4
 801aa2a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801aa2c:	9504      	str	r5, [sp, #16]
 801aa2e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 44); //R4
 801aa30:	f005 fc30 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa34:	220c      	movs	r2, #12
 801aa36:	4b60      	ldr	r3, [pc, #384]	; (801abb8 <SD_Witer+0x978>)
 801aa38:	4861      	ldr	r0, [pc, #388]	; (801abc0 <SD_Witer+0x980>)
 801aa3a:	eb0d 0102 	add.w	r1, sp, r2
 801aa3e:	f7ee fe73 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 55); //R5
 801aa42:	2237      	movs	r2, #55	; 0x37
 801aa44:	4966      	ldr	r1, [pc, #408]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801aa46:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 55); //R5
 801aa48:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801aa4a:	9504      	str	r5, [sp, #16]
 801aa4c:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 55); //R5
 801aa4e:	f005 fc21 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa52:	220c      	movs	r2, #12
 801aa54:	4b58      	ldr	r3, [pc, #352]	; (801abb8 <SD_Witer+0x978>)
 801aa56:	485a      	ldr	r0, [pc, #360]	; (801abc0 <SD_Witer+0x980>)
 801aa58:	eb0d 0102 	add.w	r1, sp, r2
 801aa5c:	f7ee fe64 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 68); //R6
 801aa60:	2244      	movs	r2, #68	; 0x44
 801aa62:	495f      	ldr	r1, [pc, #380]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801aa64:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 68); //R6
 801aa66:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801aa68:	9504      	str	r5, [sp, #16]
 801aa6a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 68); //R6
 801aa6c:	f005 fc12 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa70:	220c      	movs	r2, #12
 801aa72:	4b51      	ldr	r3, [pc, #324]	; (801abb8 <SD_Witer+0x978>)
 801aa74:	4852      	ldr	r0, [pc, #328]	; (801abc0 <SD_Witer+0x980>)
 801aa76:	eb0d 0102 	add.w	r1, sp, r2
 801aa7a:	f7ee fe55 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",79); //R7
 801aa7e:	224f      	movs	r2, #79	; 0x4f
 801aa80:	4957      	ldr	r1, [pc, #348]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801aa82:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",79); //R7
 801aa84:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801aa86:	9504      	str	r5, [sp, #16]
 801aa88:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",79); //R7
 801aa8a:	f005 fc03 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aa8e:	220c      	movs	r2, #12
 801aa90:	4b49      	ldr	r3, [pc, #292]	; (801abb8 <SD_Witer+0x978>)
 801aa92:	484b      	ldr	r0, [pc, #300]	; (801abc0 <SD_Witer+0x980>)
 801aa94:	eb0d 0102 	add.w	r1, sp, r2
 801aa98:	f7ee fe46 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",88); //R8
 801aa9c:	2258      	movs	r2, #88	; 0x58
 801aa9e:	4950      	ldr	r1, [pc, #320]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801aaa0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",88); //R8
 801aaa2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801aaa4:	9504      	str	r5, [sp, #16]
 801aaa6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",88); //R8
 801aaa8:	f005 fbf4 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aaac:	220c      	movs	r2, #12
 801aaae:	4b42      	ldr	r3, [pc, #264]	; (801abb8 <SD_Witer+0x978>)
 801aab0:	4843      	ldr	r0, [pc, #268]	; (801abc0 <SD_Witer+0x980>)
 801aab2:	eb0d 0102 	add.w	r1, sp, r2
 801aab6:	f7ee fe37 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",98); //R9
 801aaba:	2262      	movs	r2, #98	; 0x62
 801aabc:	4948      	ldr	r1, [pc, #288]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801aabe:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",98); //R9
 801aac0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801aac2:	9504      	str	r5, [sp, #16]
 801aac4:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",98); //R9
 801aac6:	f005 fbe5 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aaca:	220c      	movs	r2, #12
 801aacc:	4b3a      	ldr	r3, [pc, #232]	; (801abb8 <SD_Witer+0x978>)
 801aace:	483c      	ldr	r0, [pc, #240]	; (801abc0 <SD_Witer+0x980>)
 801aad0:	eb0d 0102 	add.w	r1, sp, r2
 801aad4:	f7ee fe28 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 105); //R10
 801aad8:	2269      	movs	r2, #105	; 0x69
 801aada:	4941      	ldr	r1, [pc, #260]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801aadc:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 105); //R10
 801aade:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801aae0:	9504      	str	r5, [sp, #16]
 801aae2:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 105); //R10
 801aae4:	f005 fbd6 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aae8:	220c      	movs	r2, #12
 801aaea:	4b33      	ldr	r3, [pc, #204]	; (801abb8 <SD_Witer+0x978>)
 801aaec:	4834      	ldr	r0, [pc, #208]	; (801abc0 <SD_Witer+0x980>)
 801aaee:	eb0d 0102 	add.w	r1, sp, r2
 801aaf2:	f7ee fe19 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 112); //R11
 801aaf6:	2270      	movs	r2, #112	; 0x70
 801aaf8:	4939      	ldr	r1, [pc, #228]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801aafa:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 112); //R11
 801aafc:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801aafe:	9504      	str	r5, [sp, #16]
 801ab00:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 112); //R11
 801ab02:	f005 fbc7 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab06:	220c      	movs	r2, #12
 801ab08:	4b2b      	ldr	r3, [pc, #172]	; (801abb8 <SD_Witer+0x978>)
 801ab0a:	482d      	ldr	r0, [pc, #180]	; (801abc0 <SD_Witer+0x980>)
 801ab0c:	eb0d 0102 	add.w	r1, sp, r2
 801ab10:	f7ee fe0a 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 127); //R12
 801ab14:	227f      	movs	r2, #127	; 0x7f
 801ab16:	4932      	ldr	r1, [pc, #200]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ab18:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 127); //R12
 801ab1a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ab1c:	9504      	str	r5, [sp, #16]
 801ab1e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 127); //R12
 801ab20:	f005 fbb8 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab24:	220c      	movs	r2, #12
 801ab26:	4b24      	ldr	r3, [pc, #144]	; (801abb8 <SD_Witer+0x978>)
 801ab28:	4825      	ldr	r0, [pc, #148]	; (801abc0 <SD_Witer+0x980>)
 801ab2a:	eb0d 0102 	add.w	r1, sp, r2
 801ab2e:	f7ee fdfb 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 133); //R13
 801ab32:	2285      	movs	r2, #133	; 0x85
 801ab34:	492a      	ldr	r1, [pc, #168]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ab36:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 133); //R13
 801ab38:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ab3a:	9504      	str	r5, [sp, #16]
 801ab3c:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 133); //R13
 801ab3e:	f005 fba9 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab42:	220c      	movs	r2, #12
 801ab44:	4b1c      	ldr	r3, [pc, #112]	; (801abb8 <SD_Witer+0x978>)
 801ab46:	481e      	ldr	r0, [pc, #120]	; (801abc0 <SD_Witer+0x980>)
 801ab48:	eb0d 0102 	add.w	r1, sp, r2
 801ab4c:	f7ee fdec 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 148); //R14
 801ab50:	2294      	movs	r2, #148	; 0x94
 801ab52:	4923      	ldr	r1, [pc, #140]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ab54:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 148); //R14
 801ab56:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ab58:	9504      	str	r5, [sp, #16]
 801ab5a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 148); //R14
 801ab5c:	f005 fb9a 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab60:	220c      	movs	r2, #12
 801ab62:	4b15      	ldr	r3, [pc, #84]	; (801abb8 <SD_Witer+0x978>)
 801ab64:	4816      	ldr	r0, [pc, #88]	; (801abc0 <SD_Witer+0x980>)
 801ab66:	eb0d 0102 	add.w	r1, sp, r2
 801ab6a:	f7ee fddd 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 152); //R15
 801ab6e:	2298      	movs	r2, #152	; 0x98
 801ab70:	491b      	ldr	r1, [pc, #108]	; (801abe0 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ab72:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 152); //R15
 801ab74:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ab76:	9504      	str	r5, [sp, #16]
 801ab78:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 152); //R15
 801ab7a:	f005 fb8b 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ab7e:	220c      	movs	r2, #12
 801ab80:	4b0d      	ldr	r3, [pc, #52]	; (801abb8 <SD_Witer+0x978>)
 801ab82:	480f      	ldr	r0, [pc, #60]	; (801abc0 <SD_Witer+0x980>)
 801ab84:	eb0d 0102 	add.w	r1, sp, r2
 801ab88:	f7ee fdce 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
 801ab8c:	9503      	str	r5, [sp, #12]
 801ab8e:	9504      	str	r5, [sp, #16]
 801ab90:	9505      	str	r5, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801ab92:	4b09      	ldr	r3, [pc, #36]	; (801abb8 <SD_Witer+0x978>)
 801ab94:	2c00      	cmp	r4, #0
 801ab96:	f040 8302 	bne.w	801b19e <SD_Witer+0xf5e>
 801ab9a:	4914      	ldr	r1, [pc, #80]	; (801abec <SD_Witer+0x9ac>)
 801ab9c:	227f      	movs	r2, #127	; 0x7f
 801ab9e:	4808      	ldr	r0, [pc, #32]	; (801abc0 <SD_Witer+0x980>)
								
								sprintf(measure_buff, "%d", Qf); //Qf
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801aba0:	4d13      	ldr	r5, [pc, #76]	; (801abf0 <SD_Witer+0x9b0>)
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801aba2:	f7ee fdc1 	bl	8009728 <f_write>
								sprintf(measure_buff, "%d\t", Qa); //Qa
 801aba6:	4b13      	ldr	r3, [pc, #76]	; (801abf4 <SD_Witer+0x9b4>)
 801aba8:	e026      	b.n	801abf8 <SD_Witer+0x9b8>
 801abaa:	bf00      	nop
 801abac:	f3af 8000 	nop.w
 801abb0:	cccccccd 	.word	0xcccccccd
 801abb4:	3feccccc 	.word	0x3feccccc
 801abb8:	200915f8 	.word	0x200915f8
 801abbc:	200004fb 	.word	0x200004fb
 801abc0:	20092650 	.word	0x20092650
 801abc4:	20095c98 	.word	0x20095c98
 801abc8:	08031dbf 	.word	0x08031dbf
 801abcc:	20095c9c 	.word	0x20095c9c
 801abd0:	08031d6a 	.word	0x08031d6a
 801abd4:	20009760 	.word	0x20009760
 801abd8:	3f666666 	.word	0x3f666666
 801abdc:	200003b3 	.word	0x200003b3
 801abe0:	08031dc6 	.word	0x08031dc6
 801abe4:	08024f89 	.word	0x08024f89
 801abe8:	08031dc5 	.word	0x08031dc5
 801abec:	200002c9 	.word	0x200002c9
 801abf0:	20003624 	.word	0x20003624
 801abf4:	20003633 	.word	0x20003633
 801abf8:	49a8      	ldr	r1, [pc, #672]	; (801ae9c <SD_Witer+0xc5c>)
 801abfa:	781a      	ldrb	r2, [r3, #0]
 801abfc:	a803      	add	r0, sp, #12
 801abfe:	f005 fb49 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ac02:	220c      	movs	r2, #12
 801ac04:	eb0d 0102 	add.w	r1, sp, r2
 801ac08:	4ba5      	ldr	r3, [pc, #660]	; (801aea0 <SD_Witer+0xc60>)
 801ac0a:	48a6      	ldr	r0, [pc, #664]	; (801aea4 <SD_Witer+0xc64>)
 801ac0c:	f7ee fd8c 	bl	8009728 <f_write>
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801ac10:	4ba5      	ldr	r3, [pc, #660]	; (801aea8 <SD_Witer+0xc68>)
 801ac12:	49a2      	ldr	r1, [pc, #648]	; (801ae9c <SD_Witer+0xc5c>)
 801ac14:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801ac16:	2400      	movs	r4, #0
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801ac18:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ac1a:	9403      	str	r4, [sp, #12]
 801ac1c:	9404      	str	r4, [sp, #16]
 801ac1e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801ac20:	f005 fb38 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ac24:	220c      	movs	r2, #12
 801ac26:	eb0d 0102 	add.w	r1, sp, r2
 801ac2a:	4b9d      	ldr	r3, [pc, #628]	; (801aea0 <SD_Witer+0xc60>)
 801ac2c:	489d      	ldr	r0, [pc, #628]	; (801aea4 <SD_Witer+0xc64>)
 801ac2e:	f7ee fd7b 	bl	8009728 <f_write>
								sprintf(measure_buff, "%d", Qf); //Qf
 801ac32:	4b9e      	ldr	r3, [pc, #632]	; (801aeac <SD_Witer+0xc6c>)
 801ac34:	499e      	ldr	r1, [pc, #632]	; (801aeb0 <SD_Witer+0xc70>)
 801ac36:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801ac38:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d", Qf); //Qf
 801ac3a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ac3c:	9404      	str	r4, [sp, #16]
 801ac3e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d", Qf); //Qf
 801ac40:	f005 fb28 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ac44:	220c      	movs	r2, #12
 801ac46:	4b96      	ldr	r3, [pc, #600]	; (801aea0 <SD_Witer+0xc60>)
 801ac48:	4896      	ldr	r0, [pc, #600]	; (801aea4 <SD_Witer+0xc64>)
 801ac4a:	eb0d 0102 	add.w	r1, sp, r2
 801ac4e:	f7ee fd6b 	bl	8009728 <f_write>
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801ac52:	782a      	ldrb	r2, [r5, #0]
 801ac54:	4997      	ldr	r1, [pc, #604]	; (801aeb4 <SD_Witer+0xc74>)
								memset(measure_buff, 0, 12);
 801ac56:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801ac58:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ac5a:	9404      	str	r4, [sp, #16]
 801ac5c:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801ac5e:	f005 fb19 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ac62:	220c      	movs	r2, #12
 801ac64:	4b8e      	ldr	r3, [pc, #568]	; (801aea0 <SD_Witer+0xc60>)
 801ac66:	488f      	ldr	r0, [pc, #572]	; (801aea4 <SD_Witer+0xc64>)
 801ac68:	eb0d 0102 	add.w	r1, sp, r2
 801ac6c:	f7ee fd5c 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801ac70:	786a      	ldrb	r2, [r5, #1]
 801ac72:	498a      	ldr	r1, [pc, #552]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ac74:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801ac76:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ac78:	9404      	str	r4, [sp, #16]
 801ac7a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801ac7c:	f005 fb0a 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ac80:	220c      	movs	r2, #12
 801ac82:	4b87      	ldr	r3, [pc, #540]	; (801aea0 <SD_Witer+0xc60>)
 801ac84:	4887      	ldr	r0, [pc, #540]	; (801aea4 <SD_Witer+0xc64>)
 801ac86:	eb0d 0102 	add.w	r1, sp, r2
 801ac8a:	f7ee fd4d 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801ac8e:	78aa      	ldrb	r2, [r5, #2]
 801ac90:	4982      	ldr	r1, [pc, #520]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ac92:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801ac94:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ac96:	9404      	str	r4, [sp, #16]
 801ac98:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801ac9a:	f005 fafb 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ac9e:	220c      	movs	r2, #12
 801aca0:	4b7f      	ldr	r3, [pc, #508]	; (801aea0 <SD_Witer+0xc60>)
 801aca2:	4880      	ldr	r0, [pc, #512]	; (801aea4 <SD_Witer+0xc64>)
 801aca4:	eb0d 0102 	add.w	r1, sp, r2
 801aca8:	f7ee fd3e 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801acac:	78ea      	ldrb	r2, [r5, #3]
 801acae:	497b      	ldr	r1, [pc, #492]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801acb0:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801acb2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801acb4:	9404      	str	r4, [sp, #16]
 801acb6:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801acb8:	f005 faec 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801acbc:	220c      	movs	r2, #12
 801acbe:	4b78      	ldr	r3, [pc, #480]	; (801aea0 <SD_Witer+0xc60>)
 801acc0:	4878      	ldr	r0, [pc, #480]	; (801aea4 <SD_Witer+0xc64>)
 801acc2:	eb0d 0102 	add.w	r1, sp, r2
 801acc6:	f7ee fd2f 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801acca:	792a      	ldrb	r2, [r5, #4]
 801accc:	4973      	ldr	r1, [pc, #460]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801acce:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801acd0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801acd2:	9404      	str	r4, [sp, #16]
 801acd4:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801acd6:	f005 fadd 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801acda:	220c      	movs	r2, #12
 801acdc:	4b70      	ldr	r3, [pc, #448]	; (801aea0 <SD_Witer+0xc60>)
 801acde:	4871      	ldr	r0, [pc, #452]	; (801aea4 <SD_Witer+0xc64>)
 801ace0:	eb0d 0102 	add.w	r1, sp, r2
 801ace4:	f7ee fd20 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801ace8:	796a      	ldrb	r2, [r5, #5]
 801acea:	496c      	ldr	r1, [pc, #432]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801acec:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801acee:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801acf0:	9404      	str	r4, [sp, #16]
 801acf2:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801acf4:	f005 face 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801acf8:	220c      	movs	r2, #12
 801acfa:	4b69      	ldr	r3, [pc, #420]	; (801aea0 <SD_Witer+0xc60>)
 801acfc:	4869      	ldr	r0, [pc, #420]	; (801aea4 <SD_Witer+0xc64>)
 801acfe:	eb0d 0102 	add.w	r1, sp, r2
 801ad02:	f7ee fd11 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801ad06:	79aa      	ldrb	r2, [r5, #6]
 801ad08:	4964      	ldr	r1, [pc, #400]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ad0a:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801ad0c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ad0e:	9404      	str	r4, [sp, #16]
 801ad10:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801ad12:	f005 fabf 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad16:	220c      	movs	r2, #12
 801ad18:	4b61      	ldr	r3, [pc, #388]	; (801aea0 <SD_Witer+0xc60>)
 801ad1a:	4862      	ldr	r0, [pc, #392]	; (801aea4 <SD_Witer+0xc64>)
 801ad1c:	eb0d 0102 	add.w	r1, sp, r2
 801ad20:	f7ee fd02 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801ad24:	79ea      	ldrb	r2, [r5, #7]
 801ad26:	495d      	ldr	r1, [pc, #372]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ad28:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801ad2a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ad2c:	9404      	str	r4, [sp, #16]
 801ad2e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801ad30:	f005 fab0 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad34:	220c      	movs	r2, #12
 801ad36:	4b5a      	ldr	r3, [pc, #360]	; (801aea0 <SD_Witer+0xc60>)
 801ad38:	485a      	ldr	r0, [pc, #360]	; (801aea4 <SD_Witer+0xc64>)
 801ad3a:	eb0d 0102 	add.w	r1, sp, r2
 801ad3e:	f7ee fcf3 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801ad42:	7a2a      	ldrb	r2, [r5, #8]
 801ad44:	4955      	ldr	r1, [pc, #340]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ad46:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801ad48:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ad4a:	9404      	str	r4, [sp, #16]
 801ad4c:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801ad4e:	f005 faa1 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad52:	220c      	movs	r2, #12
 801ad54:	4b52      	ldr	r3, [pc, #328]	; (801aea0 <SD_Witer+0xc60>)
 801ad56:	4853      	ldr	r0, [pc, #332]	; (801aea4 <SD_Witer+0xc64>)
 801ad58:	eb0d 0102 	add.w	r1, sp, r2
 801ad5c:	f7ee fce4 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801ad60:	7a6a      	ldrb	r2, [r5, #9]
 801ad62:	494e      	ldr	r1, [pc, #312]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ad64:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801ad66:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ad68:	9404      	str	r4, [sp, #16]
 801ad6a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801ad6c:	f005 fa92 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad70:	220c      	movs	r2, #12
 801ad72:	4b4b      	ldr	r3, [pc, #300]	; (801aea0 <SD_Witer+0xc60>)
 801ad74:	484b      	ldr	r0, [pc, #300]	; (801aea4 <SD_Witer+0xc64>)
 801ad76:	eb0d 0102 	add.w	r1, sp, r2
 801ad7a:	f7ee fcd5 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801ad7e:	7aaa      	ldrb	r2, [r5, #10]
 801ad80:	4946      	ldr	r1, [pc, #280]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ad82:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801ad84:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ad86:	9404      	str	r4, [sp, #16]
 801ad88:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801ad8a:	f005 fa83 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ad8e:	220c      	movs	r2, #12
 801ad90:	4b43      	ldr	r3, [pc, #268]	; (801aea0 <SD_Witer+0xc60>)
 801ad92:	4844      	ldr	r0, [pc, #272]	; (801aea4 <SD_Witer+0xc64>)
 801ad94:	eb0d 0102 	add.w	r1, sp, r2
 801ad98:	f7ee fcc6 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801ad9c:	7aea      	ldrb	r2, [r5, #11]
 801ad9e:	493f      	ldr	r1, [pc, #252]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ada0:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801ada2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ada4:	9404      	str	r4, [sp, #16]
 801ada6:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801ada8:	f005 fa74 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801adac:	220c      	movs	r2, #12
 801adae:	4b3c      	ldr	r3, [pc, #240]	; (801aea0 <SD_Witer+0xc60>)
 801adb0:	483c      	ldr	r0, [pc, #240]	; (801aea4 <SD_Witer+0xc64>)
 801adb2:	eb0d 0102 	add.w	r1, sp, r2
 801adb6:	f7ee fcb7 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801adba:	7b2a      	ldrb	r2, [r5, #12]
 801adbc:	4937      	ldr	r1, [pc, #220]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801adbe:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801adc0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801adc2:	9404      	str	r4, [sp, #16]
 801adc4:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801adc6:	f005 fa65 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801adca:	220c      	movs	r2, #12
 801adcc:	4b34      	ldr	r3, [pc, #208]	; (801aea0 <SD_Witer+0xc60>)
 801adce:	4835      	ldr	r0, [pc, #212]	; (801aea4 <SD_Witer+0xc64>)
 801add0:	eb0d 0102 	add.w	r1, sp, r2
 801add4:	f7ee fca8 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801add8:	7b6a      	ldrb	r2, [r5, #13]
 801adda:	4930      	ldr	r1, [pc, #192]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801addc:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801adde:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ade0:	9404      	str	r4, [sp, #16]
 801ade2:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801ade4:	f005 fa56 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ade8:	220c      	movs	r2, #12
 801adea:	4b2d      	ldr	r3, [pc, #180]	; (801aea0 <SD_Witer+0xc60>)
 801adec:	482d      	ldr	r0, [pc, #180]	; (801aea4 <SD_Witer+0xc64>)
 801adee:	eb0d 0102 	add.w	r1, sp, r2
 801adf2:	f7ee fc99 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801adf6:	7baa      	ldrb	r2, [r5, #14]
 801adf8:	4928      	ldr	r1, [pc, #160]	; (801ae9c <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801adfa:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801adfc:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801adfe:	9404      	str	r4, [sp, #16]
 801ae00:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801ae02:	f005 fa47 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ae06:	220c      	movs	r2, #12
 801ae08:	4b25      	ldr	r3, [pc, #148]	; (801aea0 <SD_Witer+0xc60>)
 801ae0a:	4826      	ldr	r0, [pc, #152]	; (801aea4 <SD_Witer+0xc64>)
 801ae0c:	eb0d 0102 	add.w	r1, sp, r2
 801ae10:	f7ee fc8a 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
 801ae14:	9403      	str	r4, [sp, #12]
 801ae16:	9404      	str	r4, [sp, #16]
 801ae18:	9405      	str	r4, [sp, #20]
							}
					}
				}
				
			
				f_close(&MyFile);
 801ae1a:	4822      	ldr	r0, [pc, #136]	; (801aea4 <SD_Witer+0xc64>)
 801ae1c:	f7ee fda2 	bl	8009964 <f_close>
				memset(buffer_sd, 0, 11);
 801ae20:	2200      	movs	r2, #0
				
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801ae22:	4925      	ldr	r1, [pc, #148]	; (801aeb8 <SD_Witer+0xc78>)
 801ae24:	4825      	ldr	r0, [pc, #148]	; (801aebc <SD_Witer+0xc7c>)
				memset(buffer_sd, 0, 11);
 801ae26:	6072      	str	r2, [r6, #4]
 801ae28:	6032      	str	r2, [r6, #0]
 801ae2a:	f8c6 2007 	str.w	r2, [r6, #7]
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801ae2e:	f7ee fb31 	bl	8009494 <f_mount>
 801ae32:	4b23      	ldr	r3, [pc, #140]	; (801aec0 <SD_Witer+0xc80>)
				SDWr_Status_bar = 1.0;
 801ae34:	4923      	ldr	r1, [pc, #140]	; (801aec4 <SD_Witer+0xc84>)
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801ae36:	7018      	strb	r0, [r3, #0]
				SDWr_Status_bar = 1.0;
 801ae38:	4b23      	ldr	r3, [pc, #140]	; (801aec8 <SD_Witer+0xc88>)
 801ae3a:	2000      	movs	r0, #0
 801ae3c:	e9c3 0100 	strd	r0, r1, [r3]
				GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801ae40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ae44:	f44f 718c 	mov.w	r1, #280	; 0x118
 801ae48:	2055      	movs	r0, #85	; 0x55
 801ae4a:	f7f8 fa23 	bl	8013294 <GUI_Bar_Measure>
	}
 801ae4e:	b007      	add	sp, #28
 801ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801ae54:	491d      	ldr	r1, [pc, #116]	; (801aecc <SD_Witer+0xc8c>)
 801ae56:	f7ff ba10 	b.w	801a27a <SD_Witer+0x3a>
 801ae5a:	491d      	ldr	r1, [pc, #116]	; (801aed0 <SD_Witer+0xc90>)
 801ae5c:	f7ff ba0d 	b.w	801a27a <SD_Witer+0x3a>
 801ae60:	491c      	ldr	r1, [pc, #112]	; (801aed4 <SD_Witer+0xc94>)
 801ae62:	f7ff ba0a 	b.w	801a27a <SD_Witer+0x3a>
 801ae66:	491c      	ldr	r1, [pc, #112]	; (801aed8 <SD_Witer+0xc98>)
 801ae68:	f7ff ba07 	b.w	801a27a <SD_Witer+0x3a>
 801ae6c:	491b      	ldr	r1, [pc, #108]	; (801aedc <SD_Witer+0xc9c>)
 801ae6e:	f7ff ba04 	b.w	801a27a <SD_Witer+0x3a>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801ae72:	221e      	movs	r2, #30
 801ae74:	491a      	ldr	r1, [pc, #104]	; (801aee0 <SD_Witer+0xca0>)
 801ae76:	f7ff ba3a 	b.w	801a2ee <SD_Witer+0xae>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801ae7a:	2212      	movs	r2, #18
 801ae7c:	4919      	ldr	r1, [pc, #100]	; (801aee4 <SD_Witer+0xca4>)
 801ae7e:	f7ff ba54 	b.w	801a32a <SD_Witer+0xea>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801ae82:	2212      	movs	r2, #18
 801ae84:	4918      	ldr	r1, [pc, #96]	; (801aee8 <SD_Witer+0xca8>)
 801ae86:	f7ff ba8c 	b.w	801a3a2 <SD_Witer+0x162>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801ae8a:	2214      	movs	r2, #20
 801ae8c:	4917      	ldr	r1, [pc, #92]	; (801aeec <SD_Witer+0xcac>)
 801ae8e:	f7ff babc 	b.w	801a40a <SD_Witer+0x1ca>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801ae92:	2209      	movs	r2, #9
 801ae94:	4916      	ldr	r1, [pc, #88]	; (801aef0 <SD_Witer+0xcb0>)
 801ae96:	f7ff baec 	b.w	801a472 <SD_Witer+0x232>
 801ae9a:	bf00      	nop
 801ae9c:	08031dc6 	.word	0x08031dc6
 801aea0:	200915f8 	.word	0x200915f8
 801aea4:	20092650 	.word	0x20092650
 801aea8:	20003635 	.word	0x20003635
 801aeac:	20003634 	.word	0x20003634
 801aeb0:	08024f89 	.word	0x08024f89
 801aeb4:	08031dc5 	.word	0x08031dc5
 801aeb8:	20093685 	.word	0x20093685
 801aebc:	20091600 	.word	0x20091600
 801aec0:	20093680 	.word	0x20093680
 801aec4:	3ff00000 	.word	0x3ff00000
 801aec8:	20009760 	.word	0x20009760
 801aecc:	08031eae 	.word	0x08031eae
 801aed0:	08031d85 	.word	0x08031d85
 801aed4:	08031d89 	.word	0x08031d89
 801aed8:	08031d8b 	.word	0x08031d8b
 801aedc:	08031d8f 	.word	0x08031d8f
 801aee0:	2000090b 	.word	0x2000090b
 801aee4:	20000430 	.word	0x20000430
 801aee8:	200004ac 	.word	0x200004ac
 801aeec:	20000468 	.word	0x20000468
 801aef0:	20000247 	.word	0x20000247
										sprintf(measure_buff, "%.d", Tc_Measure);
 801aef4:	49ab      	ldr	r1, [pc, #684]	; (801b1a4 <SD_Witer+0xf64>)
 801aef6:	a803      	add	r0, sp, #12
 801aef8:	f005 f9cc 	bl	8020294 <sprintf>
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801aefc:	220c      	movs	r2, #12
 801aefe:	4baa      	ldr	r3, [pc, #680]	; (801b1a8 <SD_Witer+0xf68>)
 801af00:	48aa      	ldr	r0, [pc, #680]	; (801b1ac <SD_Witer+0xf6c>)
 801af02:	eb0d 0102 	add.w	r1, sp, r2
 801af06:	f7ee fc0f 	bl	8009728 <f_write>
										memset(measure_buff, 0, 12);
 801af0a:	2300      	movs	r3, #0
 801af0c:	9303      	str	r3, [sp, #12]
 801af0e:	9304      	str	r3, [sp, #16]
 801af10:	9305      	str	r3, [sp, #20]
 801af12:	f7ff babe 	b.w	801a492 <SD_Witer+0x252>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801af16:	2215      	movs	r2, #21
 801af18:	49a5      	ldr	r1, [pc, #660]	; (801b1b0 <SD_Witer+0xf70>)
 801af1a:	f7ff bacd 	b.w	801a4b8 <SD_Witer+0x278>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801af1e:	2213      	movs	r2, #19
 801af20:	49a4      	ldr	r1, [pc, #656]	; (801b1b4 <SD_Witer+0xf74>)
 801af22:	f7ff bb46 	b.w	801a5b2 <SD_Witer+0x372>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801af26:	221a      	movs	r2, #26
 801af28:	49a3      	ldr	r1, [pc, #652]	; (801b1b8 <SD_Witer+0xf78>)
 801af2a:	f7ff bb51 	b.w	801a5d0 <SD_Witer+0x390>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801af2e:	221f      	movs	r2, #31
 801af30:	49a2      	ldr	r1, [pc, #648]	; (801b1bc <SD_Witer+0xf7c>)
 801af32:	f7ff bb67 	b.w	801a604 <SD_Witer+0x3c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801af36:	2213      	movs	r2, #19
 801af38:	49a1      	ldr	r1, [pc, #644]	; (801b1c0 <SD_Witer+0xf80>)
 801af3a:	f7ff bb81 	b.w	801a640 <SD_Witer+0x400>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801af3e:	b964      	cbnz	r4, 801af5a <SD_Witer+0xd1a>
 801af40:	49a0      	ldr	r1, [pc, #640]	; (801b1c4 <SD_Witer+0xf84>)
 801af42:	2224      	movs	r2, #36	; 0x24
 801af44:	4899      	ldr	r0, [pc, #612]	; (801b1ac <SD_Witer+0xf6c>)
 801af46:	f7ee fbef 	bl	8009728 <f_write>
								f_write(&MyFile, "NAN", 3, &byteswritten);
 801af4a:	4b97      	ldr	r3, [pc, #604]	; (801b1a8 <SD_Witer+0xf68>)
 801af4c:	499e      	ldr	r1, [pc, #632]	; (801b1c8 <SD_Witer+0xf88>)
 801af4e:	4897      	ldr	r0, [pc, #604]	; (801b1ac <SD_Witer+0xf6c>)
 801af50:	2203      	movs	r2, #3
 801af52:	f7ee fbe9 	bl	8009728 <f_write>
 801af56:	f7ff bb88 	b.w	801a66a <SD_Witer+0x42a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801af5a:	2213      	movs	r2, #19
 801af5c:	4998      	ldr	r1, [pc, #608]	; (801b1c0 <SD_Witer+0xf80>)
 801af5e:	e7f1      	b.n	801af44 <SD_Witer+0xd04>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801af60:	2225      	movs	r2, #37	; 0x25
 801af62:	499a      	ldr	r1, [pc, #616]	; (801b1cc <SD_Witer+0xf8c>)
 801af64:	f7ff bb99 	b.w	801a69a <SD_Witer+0x45a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801af68:	2212      	movs	r2, #18
 801af6a:	4999      	ldr	r1, [pc, #612]	; (801b1d0 <SD_Witer+0xf90>)
 801af6c:	f7ff bbd0 	b.w	801a710 <SD_Witer+0x4d0>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801af70:	2212      	movs	r2, #18
 801af72:	4998      	ldr	r1, [pc, #608]	; (801b1d4 <SD_Witer+0xf94>)
 801af74:	f7ff bbea 	b.w	801a74c <SD_Witer+0x50c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801af78:	2213      	movs	r2, #19
 801af7a:	4997      	ldr	r1, [pc, #604]	; (801b1d8 <SD_Witer+0xf98>)
 801af7c:	e404      	b.n	801a788 <SD_Witer+0x548>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801af7e:	221e      	movs	r2, #30
 801af80:	4996      	ldr	r1, [pc, #600]	; (801b1dc <SD_Witer+0xf9c>)
 801af82:	e41f      	b.n	801a7c4 <SD_Witer+0x584>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801af84:	220f      	movs	r2, #15
 801af86:	4996      	ldr	r1, [pc, #600]	; (801b1e0 <SD_Witer+0xfa0>)
 801af88:	e4bc      	b.n	801a904 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801af8a:	2c00      	cmp	r4, #0
 801af8c:	f040 80f0 	bne.w	801b170 <SD_Witer+0xf30>
 801af90:	4994      	ldr	r1, [pc, #592]	; (801b1e4 <SD_Witer+0xfa4>)
 801af92:	2276      	movs	r2, #118	; 0x76
 801af94:	4885      	ldr	r0, [pc, #532]	; (801b1ac <SD_Witer+0xf6c>)
 801af96:	4f94      	ldr	r7, [pc, #592]	; (801b1e8 <SD_Witer+0xfa8>)
 801af98:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 801b250 <SD_Witer+0x1010>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801af9c:	f8df a208 	ldr.w	sl, [pc, #520]	; 801b1a8 <SD_Witer+0xf68>
 801afa0:	f8df 9208 	ldr.w	r9, [pc, #520]	; 801b1ac <SD_Witer+0xf6c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801afa4:	f7ee fbc0 	bl	8009728 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //L(lambda)
 801afa8:	f857 0b04 	ldr.w	r0, [r7], #4
 801afac:	f7e5 fae4 	bl	8000578 <__aeabi_f2d>
 801afb0:	4602      	mov	r2, r0
 801afb2:	460b      	mov	r3, r1
 801afb4:	a803      	add	r0, sp, #12
 801afb6:	498d      	ldr	r1, [pc, #564]	; (801b1ec <SD_Witer+0xfac>)
 801afb8:	f005 f96c 	bl	8020294 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801afbc:	220c      	movs	r2, #12
 801afbe:	4653      	mov	r3, sl
 801afc0:	eb0d 0102 	add.w	r1, sp, r2
 801afc4:	4648      	mov	r0, r9
 801afc6:	f7ee fbaf 	bl	8009728 <f_write>
									memset(measure_buff, 0, 12);
 801afca:	2500      	movs	r5, #0
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801afcc:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801afd0:	9503      	str	r5, [sp, #12]
 801afd2:	9504      	str	r5, [sp, #16]
 801afd4:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801afd6:	f7e5 facf 	bl	8000578 <__aeabi_f2d>
 801afda:	4602      	mov	r2, r0
 801afdc:	460b      	mov	r3, r1
 801afde:	a803      	add	r0, sp, #12
 801afe0:	4983      	ldr	r1, [pc, #524]	; (801b1f0 <SD_Witer+0xfb0>)
 801afe2:	f005 f957 	bl	8020294 <sprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801afe6:	220c      	movs	r2, #12
 801afe8:	4653      	mov	r3, sl
 801afea:	eb0d 0102 	add.w	r1, sp, r2
 801afee:	4648      	mov	r0, r9
 801aff0:	f7ee fb9a 	bl	8009728 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801aff4:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801aff6:	9503      	str	r5, [sp, #12]
 801aff8:	9504      	str	r5, [sp, #16]
 801affa:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801affc:	d1d4      	bne.n	801afa8 <SD_Witer+0xd68>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801affe:	4b6a      	ldr	r3, [pc, #424]	; (801b1a8 <SD_Witer+0xf68>)
 801b000:	2c00      	cmp	r4, #0
 801b002:	f040 80b8 	bne.w	801b176 <SD_Witer+0xf36>
 801b006:	497b      	ldr	r1, [pc, #492]	; (801b1f4 <SD_Witer+0xfb4>)
 801b008:	223f      	movs	r2, #63	; 0x3f
 801b00a:	4868      	ldr	r0, [pc, #416]	; (801b1ac <SD_Witer+0xf6c>)
 801b00c:	f7ee fb8c 	bl	8009728 <f_write>
								sprintf(measure_buff, "%.2f", E_day); //Le
 801b010:	4b79      	ldr	r3, [pc, #484]	; (801b1f8 <SD_Witer+0xfb8>)
 801b012:	6818      	ldr	r0, [r3, #0]
 801b014:	f7e5 fab0 	bl	8000578 <__aeabi_f2d>
 801b018:	4602      	mov	r2, r0
 801b01a:	460b      	mov	r3, r1
 801b01c:	a803      	add	r0, sp, #12
 801b01e:	4977      	ldr	r1, [pc, #476]	; (801b1fc <SD_Witer+0xfbc>)
 801b020:	f005 f938 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b024:	220c      	movs	r2, #12
 801b026:	4b60      	ldr	r3, [pc, #384]	; (801b1a8 <SD_Witer+0xf68>)
 801b028:	4860      	ldr	r0, [pc, #384]	; (801b1ac <SD_Witer+0xf6c>)
 801b02a:	eb0d 0102 	add.w	r1, sp, r2
 801b02e:	f7ee fb7b 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
 801b032:	2300      	movs	r3, #0
 801b034:	9303      	str	r3, [sp, #12]
 801b036:	9304      	str	r3, [sp, #16]
 801b038:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801b03a:	4b5b      	ldr	r3, [pc, #364]	; (801b1a8 <SD_Witer+0xf68>)
 801b03c:	2c00      	cmp	r4, #0
 801b03e:	f040 809d 	bne.w	801b17c <SD_Witer+0xf3c>
 801b042:	496f      	ldr	r1, [pc, #444]	; (801b200 <SD_Witer+0xfc0>)
 801b044:	221b      	movs	r2, #27
 801b046:	4859      	ldr	r0, [pc, #356]	; (801b1ac <SD_Witer+0xf6c>)
 801b048:	f7ee fb6e 	bl	8009728 <f_write>
								sprintf(measure_buff, "%.1f", E_day_Wt); //Lu
 801b04c:	4b6d      	ldr	r3, [pc, #436]	; (801b204 <SD_Witer+0xfc4>)
 801b04e:	6818      	ldr	r0, [r3, #0]
 801b050:	f7e5 fa92 	bl	8000578 <__aeabi_f2d>
 801b054:	4602      	mov	r2, r0
 801b056:	460b      	mov	r3, r1
 801b058:	a803      	add	r0, sp, #12
 801b05a:	496b      	ldr	r1, [pc, #428]	; (801b208 <SD_Witer+0xfc8>)
 801b05c:	f005 f91a 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b060:	220c      	movs	r2, #12
 801b062:	4b51      	ldr	r3, [pc, #324]	; (801b1a8 <SD_Witer+0xf68>)
 801b064:	4851      	ldr	r0, [pc, #324]	; (801b1ac <SD_Witer+0xf6c>)
 801b066:	eb0d 0102 	add.w	r1, sp, r2
 801b06a:	f7ee fb5d 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
 801b06e:	2300      	movs	r3, #0
 801b070:	9303      	str	r3, [sp, #12]
 801b072:	9304      	str	r3, [sp, #16]
 801b074:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801b076:	4b4c      	ldr	r3, [pc, #304]	; (801b1a8 <SD_Witer+0xf68>)
 801b078:	2c00      	cmp	r4, #0
 801b07a:	f040 8082 	bne.w	801b182 <SD_Witer+0xf42>
 801b07e:	4963      	ldr	r1, [pc, #396]	; (801b20c <SD_Witer+0xfcc>)
 801b080:	2227      	movs	r2, #39	; 0x27
 801b082:	484a      	ldr	r0, [pc, #296]	; (801b1ac <SD_Witer+0xf6c>)
 801b084:	f7ee fb50 	bl	8009728 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPL
 801b088:	4b61      	ldr	r3, [pc, #388]	; (801b210 <SD_Witer+0xfd0>)
 801b08a:	6818      	ldr	r0, [r3, #0]
 801b08c:	f7e5 fa74 	bl	8000578 <__aeabi_f2d>
 801b090:	4602      	mov	r2, r0
 801b092:	460b      	mov	r3, r1
 801b094:	a803      	add	r0, sp, #12
 801b096:	4959      	ldr	r1, [pc, #356]	; (801b1fc <SD_Witer+0xfbc>)
 801b098:	f005 f8fc 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b09c:	220c      	movs	r2, #12
 801b09e:	4b42      	ldr	r3, [pc, #264]	; (801b1a8 <SD_Witer+0xf68>)
 801b0a0:	4842      	ldr	r0, [pc, #264]	; (801b1ac <SD_Witer+0xf6c>)
 801b0a2:	eb0d 0102 	add.w	r1, sp, r2
 801b0a6:	f7ee fb3f 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
 801b0aa:	2300      	movs	r3, #0
 801b0ac:	9303      	str	r3, [sp, #12]
 801b0ae:	9304      	str	r3, [sp, #16]
 801b0b0:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801b0b2:	4b3d      	ldr	r3, [pc, #244]	; (801b1a8 <SD_Witer+0xf68>)
 801b0b4:	2c00      	cmp	r4, #0
 801b0b6:	d167      	bne.n	801b188 <SD_Witer+0xf48>
 801b0b8:	4956      	ldr	r1, [pc, #344]	; (801b214 <SD_Witer+0xfd4>)
 801b0ba:	223d      	movs	r2, #61	; 0x3d
 801b0bc:	483b      	ldr	r0, [pc, #236]	; (801b1ac <SD_Witer+0xf6c>)
 801b0be:	f7ee fb33 	bl	8009728 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPL B
 801b0c2:	4b55      	ldr	r3, [pc, #340]	; (801b218 <SD_Witer+0xfd8>)
 801b0c4:	6818      	ldr	r0, [r3, #0]
 801b0c6:	f7e5 fa57 	bl	8000578 <__aeabi_f2d>
 801b0ca:	4602      	mov	r2, r0
 801b0cc:	460b      	mov	r3, r1
 801b0ce:	a803      	add	r0, sp, #12
 801b0d0:	4952      	ldr	r1, [pc, #328]	; (801b21c <SD_Witer+0xfdc>)
 801b0d2:	f005 f8df 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b0d6:	220c      	movs	r2, #12
 801b0d8:	eb0d 0102 	add.w	r1, sp, r2
 801b0dc:	4b32      	ldr	r3, [pc, #200]	; (801b1a8 <SD_Witer+0xf68>)
 801b0de:	4833      	ldr	r0, [pc, #204]	; (801b1ac <SD_Witer+0xf6c>)
 801b0e0:	f7ee fb22 	bl	8009728 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801b0e4:	4b4e      	ldr	r3, [pc, #312]	; (801b220 <SD_Witer+0xfe0>)
								memset(measure_buff, 0, 12);
 801b0e6:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801b0e8:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801b0ea:	9503      	str	r5, [sp, #12]
 801b0ec:	9504      	str	r5, [sp, #16]
 801b0ee:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801b0f0:	f7e5 fa42 	bl	8000578 <__aeabi_f2d>
 801b0f4:	4602      	mov	r2, r0
 801b0f6:	460b      	mov	r3, r1
 801b0f8:	a803      	add	r0, sp, #12
 801b0fa:	4948      	ldr	r1, [pc, #288]	; (801b21c <SD_Witer+0xfdc>)
 801b0fc:	f005 f8ca 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b100:	220c      	movs	r2, #12
 801b102:	eb0d 0102 	add.w	r1, sp, r2
 801b106:	4b28      	ldr	r3, [pc, #160]	; (801b1a8 <SD_Witer+0xf68>)
 801b108:	4828      	ldr	r0, [pc, #160]	; (801b1ac <SD_Witer+0xf6c>)
 801b10a:	f7ee fb0d 	bl	8009728 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801b10e:	4b45      	ldr	r3, [pc, #276]	; (801b224 <SD_Witer+0xfe4>)
								memset(measure_buff, 0, 12);
 801b110:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801b112:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801b114:	9504      	str	r5, [sp, #16]
 801b116:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801b118:	f7e5 fa2e 	bl	8000578 <__aeabi_f2d>
 801b11c:	4602      	mov	r2, r0
 801b11e:	460b      	mov	r3, r1
 801b120:	a803      	add	r0, sp, #12
 801b122:	493e      	ldr	r1, [pc, #248]	; (801b21c <SD_Witer+0xfdc>)
 801b124:	f005 f8b6 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b128:	220c      	movs	r2, #12
 801b12a:	eb0d 0102 	add.w	r1, sp, r2
 801b12e:	4b1e      	ldr	r3, [pc, #120]	; (801b1a8 <SD_Witer+0xf68>)
 801b130:	481e      	ldr	r0, [pc, #120]	; (801b1ac <SD_Witer+0xf6c>)
 801b132:	f7ee faf9 	bl	8009728 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801b136:	4b3c      	ldr	r3, [pc, #240]	; (801b228 <SD_Witer+0xfe8>)
								memset(measure_buff, 0, 12);
 801b138:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801b13a:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801b13c:	9504      	str	r5, [sp, #16]
 801b13e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801b140:	f7e5 fa1a 	bl	8000578 <__aeabi_f2d>
 801b144:	4602      	mov	r2, r0
 801b146:	460b      	mov	r3, r1
 801b148:	a803      	add	r0, sp, #12
 801b14a:	4934      	ldr	r1, [pc, #208]	; (801b21c <SD_Witer+0xfdc>)
 801b14c:	f005 f8a2 	bl	8020294 <sprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801b150:	220c      	movs	r2, #12
 801b152:	4b15      	ldr	r3, [pc, #84]	; (801b1a8 <SD_Witer+0xf68>)
 801b154:	4815      	ldr	r0, [pc, #84]	; (801b1ac <SD_Witer+0xf6c>)
 801b156:	eb0d 0102 	add.w	r1, sp, r2
 801b15a:	f7ee fae5 	bl	8009728 <f_write>
								memset(measure_buff, 0, 12);
 801b15e:	9503      	str	r5, [sp, #12]
 801b160:	9504      	str	r5, [sp, #16]
 801b162:	9505      	str	r5, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801b164:	4b10      	ldr	r3, [pc, #64]	; (801b1a8 <SD_Witer+0xf68>)
 801b166:	b994      	cbnz	r4, 801b18e <SD_Witer+0xf4e>
 801b168:	221a      	movs	r2, #26
 801b16a:	4930      	ldr	r1, [pc, #192]	; (801b22c <SD_Witer+0xfec>)
 801b16c:	f7ff bbca 	b.w	801a904 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801b170:	2223      	movs	r2, #35	; 0x23
 801b172:	492f      	ldr	r1, [pc, #188]	; (801b230 <SD_Witer+0xff0>)
 801b174:	e70e      	b.n	801af94 <SD_Witer+0xd54>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801b176:	2216      	movs	r2, #22
 801b178:	492e      	ldr	r1, [pc, #184]	; (801b234 <SD_Witer+0xff4>)
 801b17a:	e746      	b.n	801b00a <SD_Witer+0xdca>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801b17c:	2213      	movs	r2, #19
 801b17e:	492e      	ldr	r1, [pc, #184]	; (801b238 <SD_Witer+0xff8>)
 801b180:	e761      	b.n	801b046 <SD_Witer+0xe06>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801b182:	2215      	movs	r2, #21
 801b184:	492d      	ldr	r1, [pc, #180]	; (801b23c <SD_Witer+0xffc>)
 801b186:	e77c      	b.n	801b082 <SD_Witer+0xe42>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801b188:	2220      	movs	r2, #32
 801b18a:	492d      	ldr	r1, [pc, #180]	; (801b240 <SD_Witer+0x1000>)
 801b18c:	e796      	b.n	801b0bc <SD_Witer+0xe7c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801b18e:	2214      	movs	r2, #20
 801b190:	492c      	ldr	r1, [pc, #176]	; (801b244 <SD_Witer+0x1004>)
 801b192:	f7ff bbb7 	b.w	801a904 <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801b196:	226b      	movs	r2, #107	; 0x6b
 801b198:	492b      	ldr	r1, [pc, #172]	; (801b248 <SD_Witer+0x1008>)
 801b19a:	f7ff bbf7 	b.w	801a98c <SD_Witer+0x74c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801b19e:	226b      	movs	r2, #107	; 0x6b
 801b1a0:	492a      	ldr	r1, [pc, #168]	; (801b24c <SD_Witer+0x100c>)
 801b1a2:	e4fc      	b.n	801ab9e <SD_Witer+0x95e>
 801b1a4:	08031dab 	.word	0x08031dab
 801b1a8:	200915f8 	.word	0x200915f8
 801b1ac:	20092650 	.word	0x20092650
 801b1b0:	200005ff 	.word	0x200005ff
 801b1b4:	200008ce 	.word	0x200008ce
 801b1b8:	200009ef 	.word	0x200009ef
 801b1bc:	20000995 	.word	0x20000995
 801b1c0:	2000095e 	.word	0x2000095e
 801b1c4:	20000971 	.word	0x20000971
 801b1c8:	08031d93 	.word	0x08031d93
 801b1cc:	20000544 	.word	0x20000544
 801b1d0:	2000050e 	.word	0x2000050e
 801b1d4:	200005cc 	.word	0x200005cc
 801b1d8:	200007ff 	.word	0x200007ff
 801b1dc:	200007a8 	.word	0x200007a8
 801b1e0:	200004ec 	.word	0x200004ec
 801b1e4:	20000704 	.word	0x20000704
 801b1e8:	2000c53c 	.word	0x2000c53c
 801b1ec:	08031db3 	.word	0x08031db3
 801b1f0:	08031db8 	.word	0x08031db8
 801b1f4:	200006a2 	.word	0x200006a2
 801b1f8:	20095ca0 	.word	0x20095ca0
 801b1fc:	08031d6a 	.word	0x08031d6a
 801b200:	2000078d 	.word	0x2000078d
 801b204:	20095718 	.word	0x20095718
 801b208:	08031d65 	.word	0x08031d65
 801b20c:	200008a7 	.word	0x200008a7
 801b210:	20095720 	.word	0x20095720
 801b214:	20000855 	.word	0x20000855
 801b218:	20095804 	.word	0x20095804
 801b21c:	08031dbf 	.word	0x08031dbf
 801b220:	20095b88 	.word	0x20095b88
 801b224:	20095a3c 	.word	0x20095a3c
 801b228:	2009571c 	.word	0x2009571c
 801b22c:	20000672 	.word	0x20000672
 801b230:	200006e1 	.word	0x200006e1
 801b234:	2000068c 	.word	0x2000068c
 801b238:	2000077a 	.word	0x2000077a
 801b23c:	20000892 	.word	0x20000892
 801b240:	20000835 	.word	0x20000835
 801b244:	2000065e 	.word	0x2000065e
 801b248:	20000348 	.word	0x20000348
 801b24c:	2000025e 	.word	0x2000025e
 801b250:	20054948 	.word	0x20054948

0801b254 <Spectral_Axes>:
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,
0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,	0xf800,		};


void Spectral_Axes(uint8_t direction){
 801b254:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (direction == 0x00)
 801b256:	2800      	cmp	r0, #0
 801b258:	d145      	bne.n	801b2e6 <Spectral_Axes+0x92>
	{
//		TFT_FillRectangle(20, 95, 270, 412, TFT_Black_Bkgr);

		TFT_FillRectangle(18, 95, 20, 412, TFT_Grey); //Yline
 801b25a:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801b25e:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801b262:	2214      	movs	r2, #20
 801b264:	215f      	movs	r1, #95	; 0x5f
 801b266:	2012      	movs	r0, #18
 801b268:	9400      	str	r4, [sp, #0]
 801b26a:	f001 f9a8 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(18, 412, 270, 414, TFT_Grey);//XLine
 801b26e:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 801b272:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801b276:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801b27a:	2012      	movs	r0, #18
 801b27c:	9400      	str	r4, [sp, #0]
 801b27e:	f001 f99e 	bl	801c5be <TFT_FillRectangle>
		
		TFT_DrawLine(18, 334, 268, 334, TFT_Grey); //25
 801b282:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 801b286:	4619      	mov	r1, r3
 801b288:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801b28c:	2012      	movs	r0, #18
 801b28e:	9400      	str	r4, [sp, #0]
 801b290:	f001 f938 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(18, 257, 268, 257, TFT_Grey); //50
 801b294:	f240 1301 	movw	r3, #257	; 0x101
 801b298:	4619      	mov	r1, r3
 801b29a:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801b29e:	2012      	movs	r0, #18
 801b2a0:	9400      	str	r4, [sp, #0]
 801b2a2:	f001 f92f 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(18, 181, 268, 181, TFT_Grey); //75
 801b2a6:	23b5      	movs	r3, #181	; 0xb5
 801b2a8:	4619      	mov	r1, r3
 801b2aa:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801b2ae:	2012      	movs	r0, #18
 801b2b0:	9400      	str	r4, [sp, #0]
 801b2b2:	f001 f927 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(18, 105, 268, 105, TFT_Grey); //100
 801b2b6:	2369      	movs	r3, #105	; 0x69
 801b2b8:	9400      	str	r4, [sp, #0]
 801b2ba:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801b2be:	4619      	mov	r1, r3
 801b2c0:	2012      	movs	r0, #18
 801b2c2:	f001 f91f 	bl	801c504 <TFT_DrawLine>
 801b2c6:	2538      	movs	r5, #56	; 0x38
		
		for(uint16_t i = 0; i < 210; i+=40){
			TFT_DrawLine(56+i, 95, 56+i, 412, TFT_Grey);
 801b2c8:	462a      	mov	r2, r5
 801b2ca:	4628      	mov	r0, r5
 801b2cc:	3528      	adds	r5, #40	; 0x28
 801b2ce:	9400      	str	r4, [sp, #0]
 801b2d0:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801b2d4:	215f      	movs	r1, #95	; 0x5f
 801b2d6:	b2ad      	uxth	r5, r5
 801b2d8:	f001 f914 	bl	801c504 <TFT_DrawLine>
		for(uint16_t i = 0; i < 210; i+=40){
 801b2dc:	f5b5 7f94 	cmp.w	r5, #296	; 0x128
 801b2e0:	d1f2      	bne.n	801b2c8 <Spectral_Axes+0x74>
		
		for(uint16_t i = 0; i < 260; i+=50){
			TFT_DrawLine(17, 374-i, 232, 374-i, TFT_Grey);
		}
	}
}
 801b2e2:	b003      	add	sp, #12
 801b2e4:	bd30      	pop	{r4, r5, pc}
	} else if (direction == 0x01)
 801b2e6:	2801      	cmp	r0, #1
 801b2e8:	d140      	bne.n	801b36c <Spectral_Axes+0x118>
		TFT_FillRectangle(253, 70, 255, 406, TFT_Grey); //XLine
 801b2ea:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801b2ee:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b2f2:	22ff      	movs	r2, #255	; 0xff
 801b2f4:	2146      	movs	r1, #70	; 0x46
 801b2f6:	20fd      	movs	r0, #253	; 0xfd
 801b2f8:	9400      	str	r4, [sp, #0]
 801b2fa:	f001 f960 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_Grey); //Yline
 801b2fe:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b302:	22ff      	movs	r2, #255	; 0xff
 801b304:	f44f 71ca 	mov.w	r1, #404	; 0x194
 801b308:	2028      	movs	r0, #40	; 0x28
 801b30a:	9400      	str	r4, [sp, #0]
 801b30c:	f001 f957 	bl	801c5be <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_Grey); //25
 801b310:	22cc      	movs	r2, #204	; 0xcc
 801b312:	4610      	mov	r0, r2
 801b314:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b318:	2146      	movs	r1, #70	; 0x46
 801b31a:	9400      	str	r4, [sp, #0]
 801b31c:	f001 f8f2 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_Grey); //50
 801b320:	2297      	movs	r2, #151	; 0x97
 801b322:	4610      	mov	r0, r2
 801b324:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b328:	2146      	movs	r1, #70	; 0x46
 801b32a:	9400      	str	r4, [sp, #0]
 801b32c:	f001 f8ea 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_Grey); //75
 801b330:	2262      	movs	r2, #98	; 0x62
 801b332:	4610      	mov	r0, r2
 801b334:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b338:	2146      	movs	r1, #70	; 0x46
 801b33a:	9400      	str	r4, [sp, #0]
 801b33c:	f001 f8e2 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_Grey); //100
 801b340:	222d      	movs	r2, #45	; 0x2d
 801b342:	9400      	str	r4, [sp, #0]
 801b344:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b348:	2146      	movs	r1, #70	; 0x46
 801b34a:	4610      	mov	r0, r2
 801b34c:	f001 f8da 	bl	801c504 <TFT_DrawLine>
 801b350:	f44f 75b1 	mov.w	r5, #354	; 0x162
			TFT_DrawLine(40, 354-i, 255, 354-i, TFT_Grey);
 801b354:	462b      	mov	r3, r5
 801b356:	4629      	mov	r1, r5
 801b358:	3d32      	subs	r5, #50	; 0x32
 801b35a:	9400      	str	r4, [sp, #0]
 801b35c:	22ff      	movs	r2, #255	; 0xff
 801b35e:	2028      	movs	r0, #40	; 0x28
 801b360:	b2ad      	uxth	r5, r5
 801b362:	f001 f8cf 	bl	801c504 <TFT_DrawLine>
		for(uint16_t i = 0; i < 260; i+=50){
 801b366:	2d36      	cmp	r5, #54	; 0x36
 801b368:	d1f4      	bne.n	801b354 <Spectral_Axes+0x100>
 801b36a:	e7ba      	b.n	801b2e2 <Spectral_Axes+0x8e>
	} else if (direction == 0x02)
 801b36c:	2802      	cmp	r0, #2
 801b36e:	d1b8      	bne.n	801b2e2 <Spectral_Axes+0x8e>
		TFT_FillRectangle(18, 74, 16, 406, TFT_Grey); //XLine
 801b370:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801b374:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b378:	2210      	movs	r2, #16
 801b37a:	214a      	movs	r1, #74	; 0x4a
 801b37c:	2012      	movs	r0, #18
 801b37e:	9400      	str	r4, [sp, #0]
 801b380:	f001 f91d 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_Grey); //Yline
 801b384:	234c      	movs	r3, #76	; 0x4c
 801b386:	22e8      	movs	r2, #232	; 0xe8
 801b388:	214a      	movs	r1, #74	; 0x4a
 801b38a:	2011      	movs	r0, #17
 801b38c:	9400      	str	r4, [sp, #0]
 801b38e:	f001 f916 	bl	801c5be <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_Grey); //25
 801b392:	2244      	movs	r2, #68	; 0x44
 801b394:	4610      	mov	r0, r2
 801b396:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b39a:	2146      	movs	r1, #70	; 0x46
 801b39c:	9400      	str	r4, [sp, #0]
 801b39e:	f001 f8b1 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_Grey); //50
 801b3a2:	2279      	movs	r2, #121	; 0x79
 801b3a4:	4610      	mov	r0, r2
 801b3a6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b3aa:	2146      	movs	r1, #70	; 0x46
 801b3ac:	9400      	str	r4, [sp, #0]
 801b3ae:	f001 f8a9 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_Grey); //75
 801b3b2:	22ae      	movs	r2, #174	; 0xae
 801b3b4:	4610      	mov	r0, r2
 801b3b6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b3ba:	2146      	movs	r1, #70	; 0x46
 801b3bc:	9400      	str	r4, [sp, #0]
 801b3be:	f001 f8a1 	bl	801c504 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_Grey); //100
 801b3c2:	22e3      	movs	r2, #227	; 0xe3
 801b3c4:	9400      	str	r4, [sp, #0]
 801b3c6:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801b3ca:	2146      	movs	r1, #70	; 0x46
 801b3cc:	4610      	mov	r0, r2
 801b3ce:	f001 f899 	bl	801c504 <TFT_DrawLine>
 801b3d2:	f44f 75bb 	mov.w	r5, #374	; 0x176
			TFT_DrawLine(17, 374-i, 232, 374-i, TFT_Grey);
 801b3d6:	462b      	mov	r3, r5
 801b3d8:	4629      	mov	r1, r5
 801b3da:	3d32      	subs	r5, #50	; 0x32
 801b3dc:	9400      	str	r4, [sp, #0]
 801b3de:	22e8      	movs	r2, #232	; 0xe8
 801b3e0:	2011      	movs	r0, #17
 801b3e2:	b2ad      	uxth	r5, r5
 801b3e4:	f001 f88e 	bl	801c504 <TFT_DrawLine>
		for(uint16_t i = 0; i < 260; i+=50){
 801b3e8:	2d4a      	cmp	r5, #74	; 0x4a
 801b3ea:	d1f4      	bne.n	801b3d6 <Spectral_Axes+0x182>
 801b3ec:	e779      	b.n	801b2e2 <Spectral_Axes+0x8e>
	...

0801b3f0 <Spectral_PAR_Range>:

void Spectral_PAR_Range(uint8_t direction){
 801b3f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801b3f4:	4d6b      	ldr	r5, [pc, #428]	; (801b5a4 <Spectral_PAR_Range+0x1b4>)
 801b3f6:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801b5b0 <Spectral_PAR_Range+0x1c0>
 801b3fa:	4f6b      	ldr	r7, [pc, #428]	; (801b5a8 <Spectral_PAR_Range+0x1b8>)
 801b3fc:	4e6b      	ldr	r6, [pc, #428]	; (801b5ac <Spectral_PAR_Range+0x1bc>)
	if (direction == 0x00)
 801b3fe:	2800      	cmp	r0, #0
 801b400:	d146      	bne.n	801b490 <Spectral_PAR_Range+0xa0>
	{
		TFT_FillRectangle(19, 105, 19+PARGraph_B/4, 411, TFT_Black_Bkgr);
 801b402:	882a      	ldrh	r2, [r5, #0]
 801b404:	2363      	movs	r3, #99	; 0x63
 801b406:	0892      	lsrs	r2, r2, #2
 801b408:	9300      	str	r3, [sp, #0]
 801b40a:	3213      	adds	r2, #19
 801b40c:	f240 139b 	movw	r3, #411	; 0x19b
 801b410:	2169      	movs	r1, #105	; 0x69
 801b412:	2013      	movs	r0, #19
 801b414:	f001 f8d3 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_B/4, 105, 19+PARGraph_G/4, 411, TFT_PAR_Blue);
 801b418:	8828      	ldrh	r0, [r5, #0]
 801b41a:	f8b8 2000 	ldrh.w	r2, [r8]
 801b41e:	f644 33d4 	movw	r3, #19412	; 0x4bd4
 801b422:	0892      	lsrs	r2, r2, #2
 801b424:	0880      	lsrs	r0, r0, #2
 801b426:	9300      	str	r3, [sp, #0]
 801b428:	3213      	adds	r2, #19
 801b42a:	f240 139b 	movw	r3, #411	; 0x19b
 801b42e:	2169      	movs	r1, #105	; 0x69
 801b430:	3013      	adds	r0, #19
 801b432:	f001 f8c4 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_G/4, 105, 19+PARGraph_R/4, 411, TFT_PAR_Green);
 801b436:	883a      	ldrh	r2, [r7, #0]
 801b438:	f8b8 0000 	ldrh.w	r0, [r8]
 801b43c:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801b440:	0892      	lsrs	r2, r2, #2
 801b442:	0880      	lsrs	r0, r0, #2
 801b444:	9300      	str	r3, [sp, #0]
 801b446:	3213      	adds	r2, #19
 801b448:	f240 139b 	movw	r3, #411	; 0x19b
 801b44c:	2169      	movs	r1, #105	; 0x69
 801b44e:	3013      	adds	r0, #19
 801b450:	f001 f8b5 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_R/4, 105, 19+PARGraph_IR/4, 411, TFT_PAR_Red);
 801b454:	8838      	ldrh	r0, [r7, #0]
 801b456:	8832      	ldrh	r2, [r6, #0]
 801b458:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801b45c:	0892      	lsrs	r2, r2, #2
 801b45e:	0880      	lsrs	r0, r0, #2
 801b460:	9300      	str	r3, [sp, #0]
 801b462:	3213      	adds	r2, #19
 801b464:	f240 139b 	movw	r3, #411	; 0x19b
 801b468:	2169      	movs	r1, #105	; 0x69
 801b46a:	3013      	adds	r0, #19
 801b46c:	f001 f8a7 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_IR/4, 105, 19+1000/4, 411, TFT_PAR_IRed);
 801b470:	8830      	ldrh	r0, [r6, #0]
 801b472:	f646 0382 	movw	r3, #26754	; 0x6882
 801b476:	0880      	lsrs	r0, r0, #2
 801b478:	9300      	str	r3, [sp, #0]
 801b47a:	f240 120d 	movw	r2, #269	; 0x10d
 801b47e:	f240 139b 	movw	r3, #411	; 0x19b
 801b482:	2169      	movs	r1, #105	; 0x69
 801b484:	3013      	adds	r0, #19
	}else
	{
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801b486:	f001 f89a 	bl	801c5be <TFT_FillRectangle>
	}
}
 801b48a:	b002      	add	sp, #8
 801b48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if(direction == 0x01)
 801b490:	2801      	cmp	r0, #1
 801b492:	f04f 0403 	mov.w	r4, #3
 801b496:	d142      	bne.n	801b51e <Spectral_PAR_Range+0x12e>
		TFT_FillRectangle( 45, 403-PARGraph_G/3, 253, 403-PARGraph_B/3, TFT_PAR_Blue);
 801b498:	882b      	ldrh	r3, [r5, #0]
 801b49a:	f8b8 1000 	ldrh.w	r1, [r8]
 801b49e:	fbb3 f3f4 	udiv	r3, r3, r4
 801b4a2:	f240 1593 	movw	r5, #403	; 0x193
 801b4a6:	f644 32d4 	movw	r2, #19412	; 0x4bd4
 801b4aa:	1aeb      	subs	r3, r5, r3
 801b4ac:	fbb1 f1f4 	udiv	r1, r1, r4
 801b4b0:	1a69      	subs	r1, r5, r1
 801b4b2:	9200      	str	r2, [sp, #0]
 801b4b4:	b29b      	uxth	r3, r3
 801b4b6:	22fd      	movs	r2, #253	; 0xfd
 801b4b8:	b289      	uxth	r1, r1
 801b4ba:	202d      	movs	r0, #45	; 0x2d
 801b4bc:	f001 f87f 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_R/3, 253, 403-PARGraph_G/3, TFT_PAR_Green);
 801b4c0:	8839      	ldrh	r1, [r7, #0]
 801b4c2:	f8b8 3000 	ldrh.w	r3, [r8]
 801b4c6:	fbb1 f1f4 	udiv	r1, r1, r4
 801b4ca:	f645 42cc 	movw	r2, #23756	; 0x5ccc
 801b4ce:	fbb3 f3f4 	udiv	r3, r3, r4
 801b4d2:	1a69      	subs	r1, r5, r1
 801b4d4:	1aeb      	subs	r3, r5, r3
 801b4d6:	9200      	str	r2, [sp, #0]
 801b4d8:	b29b      	uxth	r3, r3
 801b4da:	22fd      	movs	r2, #253	; 0xfd
 801b4dc:	b289      	uxth	r1, r1
 801b4de:	202d      	movs	r0, #45	; 0x2d
 801b4e0:	f001 f86d 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_IR/3, 253, 403-PARGraph_R/3, TFT_PAR_Red);
 801b4e4:	883b      	ldrh	r3, [r7, #0]
 801b4e6:	8831      	ldrh	r1, [r6, #0]
 801b4e8:	fbb3 f3f4 	udiv	r3, r3, r4
 801b4ec:	f649 228a 	movw	r2, #39562	; 0x9a8a
 801b4f0:	1aeb      	subs	r3, r5, r3
 801b4f2:	fbb1 f1f4 	udiv	r1, r1, r4
 801b4f6:	1a69      	subs	r1, r5, r1
 801b4f8:	9200      	str	r2, [sp, #0]
 801b4fa:	b29b      	uxth	r3, r3
 801b4fc:	22fd      	movs	r2, #253	; 0xfd
 801b4fe:	b289      	uxth	r1, r1
 801b500:	202d      	movs	r0, #45	; 0x2d
 801b502:	f001 f85c 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-1000/3, 253, 403-PARGraph_IR/3, TFT_PAR_IRed);
 801b506:	f646 0282 	movw	r2, #26754	; 0x6882
 801b50a:	8833      	ldrh	r3, [r6, #0]
 801b50c:	fbb3 f3f4 	udiv	r3, r3, r4
 801b510:	1aeb      	subs	r3, r5, r3
 801b512:	9200      	str	r2, [sp, #0]
 801b514:	b29b      	uxth	r3, r3
 801b516:	22fd      	movs	r2, #253	; 0xfd
 801b518:	2146      	movs	r1, #70	; 0x46
 801b51a:	202d      	movs	r0, #45	; 0x2d
 801b51c:	e7b3      	b.n	801b486 <Spectral_PAR_Range+0x96>
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
 801b51e:	8829      	ldrh	r1, [r5, #0]
 801b520:	f8b8 3000 	ldrh.w	r3, [r8]
 801b524:	fbb1 f1f4 	udiv	r1, r1, r4
 801b528:	f644 32d4 	movw	r2, #19412	; 0x4bd4
 801b52c:	fbb3 f3f4 	udiv	r3, r3, r4
 801b530:	314a      	adds	r1, #74	; 0x4a
 801b532:	334a      	adds	r3, #74	; 0x4a
 801b534:	9200      	str	r2, [sp, #0]
 801b536:	b29b      	uxth	r3, r3
 801b538:	22e3      	movs	r2, #227	; 0xe3
 801b53a:	b289      	uxth	r1, r1
 801b53c:	2013      	movs	r0, #19
 801b53e:	f001 f83e 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
 801b542:	883b      	ldrh	r3, [r7, #0]
 801b544:	f8b8 1000 	ldrh.w	r1, [r8]
 801b548:	fbb3 f3f4 	udiv	r3, r3, r4
 801b54c:	f645 42cc 	movw	r2, #23756	; 0x5ccc
 801b550:	334a      	adds	r3, #74	; 0x4a
 801b552:	fbb1 f1f4 	udiv	r1, r1, r4
 801b556:	314a      	adds	r1, #74	; 0x4a
 801b558:	9200      	str	r2, [sp, #0]
 801b55a:	b29b      	uxth	r3, r3
 801b55c:	22e3      	movs	r2, #227	; 0xe3
 801b55e:	b289      	uxth	r1, r1
 801b560:	2013      	movs	r0, #19
 801b562:	f001 f82c 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
 801b566:	8839      	ldrh	r1, [r7, #0]
 801b568:	8833      	ldrh	r3, [r6, #0]
 801b56a:	fbb1 f1f4 	udiv	r1, r1, r4
 801b56e:	f649 228a 	movw	r2, #39562	; 0x9a8a
 801b572:	fbb3 f3f4 	udiv	r3, r3, r4
 801b576:	314a      	adds	r1, #74	; 0x4a
 801b578:	334a      	adds	r3, #74	; 0x4a
 801b57a:	9200      	str	r2, [sp, #0]
 801b57c:	b29b      	uxth	r3, r3
 801b57e:	22e3      	movs	r2, #227	; 0xe3
 801b580:	b289      	uxth	r1, r1
 801b582:	2013      	movs	r0, #19
 801b584:	f001 f81b 	bl	801c5be <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801b588:	f646 0382 	movw	r3, #26754	; 0x6882
 801b58c:	8831      	ldrh	r1, [r6, #0]
 801b58e:	fbb1 f1f4 	udiv	r1, r1, r4
 801b592:	314a      	adds	r1, #74	; 0x4a
 801b594:	9300      	str	r3, [sp, #0]
 801b596:	22e3      	movs	r2, #227	; 0xe3
 801b598:	f240 1397 	movw	r3, #407	; 0x197
 801b59c:	b289      	uxth	r1, r1
 801b59e:	2013      	movs	r0, #19
 801b5a0:	e771      	b.n	801b486 <Spectral_PAR_Range+0x96>
 801b5a2:	bf00      	nop
 801b5a4:	20095a42 	.word	0x20095a42
 801b5a8:	20095ce4 	.word	0x20095ce4
 801b5ac:	20095a40 	.word	0x20095a40
 801b5b0:	20095b8c 	.word	0x20095b8c

0801b5b4 <Spectral_Axes_Text>:


void Spectral_Axes_Text(uint8_t direction){
 801b5b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char buffer[4] = {0};
 801b5b6:	ac02      	add	r4, sp, #8
 801b5b8:	2300      	movs	r3, #0
 801b5ba:	f844 3d04 	str.w	r3, [r4, #-4]!
	
	if (direction == 0x00)
 801b5be:	4606      	mov	r6, r0
 801b5c0:	4d67      	ldr	r5, [pc, #412]	; (801b760 <Spectral_Axes_Text+0x1ac>)
 801b5c2:	2800      	cmp	r0, #0
 801b5c4:	d162      	bne.n	801b68c <Spectral_Axes_Text+0xd8>
	{
		TFT_SetTextColor(TFT_White);
 801b5c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801b5ca:	f001 fa27 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801b5ce:	2063      	movs	r0, #99	; 0x63
 801b5d0:	f001 fa2a 	bl	801ca28 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801b5d4:	4863      	ldr	r0, [pc, #396]	; (801b764 <Spectral_Axes_Text+0x1b0>)
 801b5d6:	f001 fa1b 	bl	801ca10 <TFT_SetFont>

		TFT_DrawChar(5, 410, '0');
 801b5da:	2230      	movs	r2, #48	; 0x30
 801b5dc:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801b5e0:	2005      	movs	r0, #5
 801b5e2:	f001 fadf 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(7, 257, '.');
 801b5e6:	222e      	movs	r2, #46	; 0x2e
 801b5e8:	f240 1101 	movw	r1, #257	; 0x101
 801b5ec:	2007      	movs	r0, #7
 801b5ee:	f001 fad9 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(3, 257, '0');
 801b5f2:	2230      	movs	r2, #48	; 0x30
 801b5f4:	f240 1101 	movw	r1, #257	; 0x101
 801b5f8:	2003      	movs	r0, #3
 801b5fa:	f001 fad3 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(11, 257, '5');
 801b5fe:	2235      	movs	r2, #53	; 0x35
 801b600:	f240 1101 	movw	r1, #257	; 0x101
 801b604:	200b      	movs	r0, #11
 801b606:	f001 facd 	bl	801cba4 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 801b60a:	2231      	movs	r2, #49	; 0x31
 801b60c:	2169      	movs	r1, #105	; 0x69
 801b60e:	4630      	mov	r0, r6
 801b610:	f001 fac8 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '.');
 801b614:	222e      	movs	r2, #46	; 0x2e
 801b616:	2169      	movs	r1, #105	; 0x69
 801b618:	2004      	movs	r0, #4
 801b61a:	f001 fac3 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 801b61e:	2230      	movs	r2, #48	; 0x30
 801b620:	2169      	movs	r1, #105	; 0x69
 801b622:	2009      	movs	r0, #9
 801b624:	f001 fabe 	bl	801cba4 <TFT_DrawChar>
		
		
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801b628:	882a      	ldrh	r2, [r5, #0]
 801b62a:	494f      	ldr	r1, [pc, #316]	; (801b768 <Spectral_Axes_Text+0x1b4>)
 801b62c:	4620      	mov	r0, r4
 801b62e:	f004 fe31 	bl	8020294 <sprintf>
		TFT_DisplayString(11, 416, (uint8_t *)buffer, LEFT_MODE);
 801b632:	2303      	movs	r3, #3
 801b634:	4622      	mov	r2, r4
 801b636:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801b63a:	200b      	movs	r0, #11
 801b63c:	f001 fb0a 	bl	801cc54 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801b640:	886a      	ldrh	r2, [r5, #2]
 801b642:	4949      	ldr	r1, [pc, #292]	; (801b768 <Spectral_Axes_Text+0x1b4>)
 801b644:	4620      	mov	r0, r4
 801b646:	f004 fe25 	bl	8020294 <sprintf>
		TFT_DisplayString(85, 416, (uint8_t *)buffer, LEFT_MODE);
 801b64a:	2303      	movs	r3, #3
 801b64c:	4622      	mov	r2, r4
 801b64e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801b652:	2055      	movs	r0, #85	; 0x55
 801b654:	f001 fafe 	bl	801cc54 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801b658:	88aa      	ldrh	r2, [r5, #4]
 801b65a:	4943      	ldr	r1, [pc, #268]	; (801b768 <Spectral_Axes_Text+0x1b4>)
 801b65c:	4620      	mov	r0, r4
 801b65e:	f004 fe19 	bl	8020294 <sprintf>
		TFT_DisplayString(165, 416, (uint8_t *)buffer, LEFT_MODE);
 801b662:	2303      	movs	r3, #3
 801b664:	4622      	mov	r2, r4
 801b666:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801b66a:	20a5      	movs	r0, #165	; 0xa5
 801b66c:	f001 faf2 	bl	801cc54 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801b670:	88ea      	ldrh	r2, [r5, #6]
 801b672:	493d      	ldr	r1, [pc, #244]	; (801b768 <Spectral_Axes_Text+0x1b4>)
 801b674:	4620      	mov	r0, r4
 801b676:	f004 fe0d 	bl	8020294 <sprintf>
		TFT_DisplayString(245, 416, (uint8_t *)buffer, LEFT_MODE);
 801b67a:	2303      	movs	r3, #3
 801b67c:	4622      	mov	r2, r4
 801b67e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801b682:	20f5      	movs	r0, #245	; 0xf5
 801b684:	f001 fae6 	bl	801cc54 <TFT_DisplayString>
		TFT_DrawChar(62, 43, '.');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 801b688:	b003      	add	sp, #12
 801b68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b68c:	4f37      	ldr	r7, [pc, #220]	; (801b76c <Spectral_Axes_Text+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 801b68e:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 801b690:	bf14      	ite	ne
 801b692:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 801b694:	7038      	strbeq	r0, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801b696:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 801b69a:	bf18      	it	ne
 801b69c:	703b      	strbne	r3, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801b69e:	f001 f9bd 	bl	801ca1c <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801b6a2:	2063      	movs	r0, #99	; 0x63
 801b6a4:	f001 f9c0 	bl	801ca28 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801b6a8:	482e      	ldr	r0, [pc, #184]	; (801b764 <Spectral_Axes_Text+0x1b0>)
 801b6aa:	f001 f9b1 	bl	801ca10 <TFT_SetFont>
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801b6ae:	882a      	ldrh	r2, [r5, #0]
 801b6b0:	492d      	ldr	r1, [pc, #180]	; (801b768 <Spectral_Axes_Text+0x1b4>)
 801b6b2:	4620      	mov	r0, r4
 801b6b4:	f004 fdee 	bl	8020294 <sprintf>
		TFT_DisplayString(65, 258, (uint8_t *)buffer, LEFT_MODE);
 801b6b8:	2303      	movs	r3, #3
 801b6ba:	4622      	mov	r2, r4
 801b6bc:	f44f 7181 	mov.w	r1, #258	; 0x102
 801b6c0:	2041      	movs	r0, #65	; 0x41
 801b6c2:	f001 fac7 	bl	801cc54 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801b6c6:	886a      	ldrh	r2, [r5, #2]
 801b6c8:	4927      	ldr	r1, [pc, #156]	; (801b768 <Spectral_Axes_Text+0x1b4>)
 801b6ca:	4620      	mov	r0, r4
 801b6cc:	f004 fde2 	bl	8020294 <sprintf>
		TFT_DisplayString(165, 258, (uint8_t *)buffer, LEFT_MODE);
 801b6d0:	2303      	movs	r3, #3
 801b6d2:	4622      	mov	r2, r4
 801b6d4:	f44f 7181 	mov.w	r1, #258	; 0x102
 801b6d8:	20a5      	movs	r0, #165	; 0xa5
 801b6da:	f001 fabb 	bl	801cc54 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801b6de:	88aa      	ldrh	r2, [r5, #4]
 801b6e0:	4921      	ldr	r1, [pc, #132]	; (801b768 <Spectral_Axes_Text+0x1b4>)
 801b6e2:	4620      	mov	r0, r4
 801b6e4:	f004 fdd6 	bl	8020294 <sprintf>
		TFT_DisplayString(265, 258, (uint8_t *)buffer, LEFT_MODE);
 801b6e8:	2303      	movs	r3, #3
 801b6ea:	4622      	mov	r2, r4
 801b6ec:	f44f 7181 	mov.w	r1, #258	; 0x102
 801b6f0:	f240 1009 	movw	r0, #265	; 0x109
 801b6f4:	f001 faae 	bl	801cc54 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801b6f8:	88ea      	ldrh	r2, [r5, #6]
 801b6fa:	491b      	ldr	r1, [pc, #108]	; (801b768 <Spectral_Axes_Text+0x1b4>)
 801b6fc:	4620      	mov	r0, r4
 801b6fe:	f004 fdc9 	bl	8020294 <sprintf>
		TFT_DisplayString(365, 258, (uint8_t *)buffer, LEFT_MODE);
 801b702:	2303      	movs	r3, #3
 801b704:	4622      	mov	r2, r4
 801b706:	f44f 7181 	mov.w	r1, #258	; 0x102
 801b70a:	f240 106d 	movw	r0, #365	; 0x16d
 801b70e:	f001 faa1 	bl	801cc54 <TFT_DisplayString>
		TFT_DrawChar(65, 250, '0');
 801b712:	2230      	movs	r2, #48	; 0x30
 801b714:	21fa      	movs	r1, #250	; 0xfa
 801b716:	2041      	movs	r0, #65	; 0x41
 801b718:	f001 fa44 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(57, 149, '0');
 801b71c:	2230      	movs	r2, #48	; 0x30
 801b71e:	2195      	movs	r1, #149	; 0x95
 801b720:	2039      	movs	r0, #57	; 0x39
 801b722:	f001 fa3f 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(62, 149, '.');
 801b726:	222e      	movs	r2, #46	; 0x2e
 801b728:	2195      	movs	r1, #149	; 0x95
 801b72a:	203e      	movs	r0, #62	; 0x3e
 801b72c:	f001 fa3a 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(67, 149, '5');
 801b730:	2235      	movs	r2, #53	; 0x35
 801b732:	2195      	movs	r1, #149	; 0x95
 801b734:	2043      	movs	r0, #67	; 0x43
 801b736:	f001 fa35 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 801b73a:	2231      	movs	r2, #49	; 0x31
 801b73c:	212b      	movs	r1, #43	; 0x2b
 801b73e:	2039      	movs	r0, #57	; 0x39
 801b740:	f001 fa30 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '.');
 801b744:	222e      	movs	r2, #46	; 0x2e
 801b746:	212b      	movs	r1, #43	; 0x2b
 801b748:	203e      	movs	r0, #62	; 0x3e
 801b74a:	f001 fa2b 	bl	801cba4 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 801b74e:	2230      	movs	r2, #48	; 0x30
 801b750:	212b      	movs	r1, #43	; 0x2b
 801b752:	2043      	movs	r0, #67	; 0x43
 801b754:	f001 fa26 	bl	801cba4 <TFT_DrawChar>
		TFT_direction = 0x00;
 801b758:	2300      	movs	r3, #0
 801b75a:	703b      	strb	r3, [r7, #0]
}
 801b75c:	e794      	b.n	801b688 <Spectral_Axes_Text+0xd4>
 801b75e:	bf00      	nop
 801b760:	20055948 	.word	0x20055948
 801b764:	20000210 	.word	0x20000210
 801b768:	08031dca 	.word	0x08031dca
 801b76c:	200056a0 	.word	0x200056a0

0801b770 <Spectral_DrawGraph_Const>:
		memset(graph_data_old, 0, sizeof(graph_data_old));	
}


void Spectral_DrawGraph_Const(uint16_t ZeroX, uint16_t ZeroY, uint16_t *GraphData, uint16_t color, uint8_t direction)
{
 801b770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b774:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
		uint16_t i, j = 0;
		uint16_t graph_data[335];
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801b778:	f1b8 0f00 	cmp.w	r8, #0
 801b77c:	bf0c      	ite	eq
 801b77e:	f04f 09f0 	moveq.w	r9, #240	; 0xf0
 801b782:	f44f 79a5 	movne.w	r9, #330	; 0x14a
{
 801b786:	4682      	mov	sl, r0
 801b788:	461f      	mov	r7, r3
 801b78a:	4614      	mov	r4, r2
 801b78c:	eb02 0649 	add.w	r6, r2, r9, lsl #1
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801b790:	2500      	movs	r5, #0
		uint8_t	step = (direction == 0x00)? 4 :3;
	
		for(i = 0; i < graph_lenht; i++)
	{
		if(direction == 0x00){
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801b792:	f100 0b01 	add.w	fp, r0, #1
 801b796:	b2a8      	uxth	r0, r5
		if(direction == 0x00){
 801b798:	f1b8 0f00 	cmp.w	r8, #0
 801b79c:	d10e      	bne.n	801b7bc <Spectral_DrawGraph_Const+0x4c>
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801b79e:	8863      	ldrh	r3, [r4, #2]
 801b7a0:	8821      	ldrh	r1, [r4, #0]
 801b7a2:	eb00 020b 	add.w	r2, r0, fp
 801b7a6:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801b7aa:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801b7ae:	4450      	add	r0, sl
		else if(direction == 0x01)
		{
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801b7b0:	9700      	str	r7, [sp, #0]
 801b7b2:	b29b      	uxth	r3, r3
 801b7b4:	b292      	uxth	r2, r2
 801b7b6:	b289      	uxth	r1, r1
 801b7b8:	b280      	uxth	r0, r0
 801b7ba:	e013      	b.n	801b7e4 <Spectral_DrawGraph_Const+0x74>
		else if(direction == 0x01)
 801b7bc:	f1b8 0f01 	cmp.w	r8, #1
 801b7c0:	d11d      	bne.n	801b7fe <Spectral_DrawGraph_Const+0x8e>
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
 801b7c2:	8872      	ldrh	r2, [r6, #2]
 801b7c4:	f8b6 e000 	ldrh.w	lr, [r6]
 801b7c8:	9700      	str	r7, [sp, #0]
 801b7ca:	f100 0348 	add.w	r3, r0, #72	; 0x48
 801b7ce:	f100 0149 	add.w	r1, r0, #73	; 0x49
 801b7d2:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801b7d6:	f1ce 0efd 	rsb	lr, lr, #253	; 0xfd
 801b7da:	b29b      	uxth	r3, r3
 801b7dc:	b292      	uxth	r2, r2
 801b7de:	b289      	uxth	r1, r1
 801b7e0:	fa1f f08e 	uxth.w	r0, lr
 801b7e4:	3501      	adds	r5, #1
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801b7e6:	f000 fe8d 	bl	801c504 <TFT_DrawLine>
		for(i = 0; i < graph_lenht; i++)
 801b7ea:	b2ab      	uxth	r3, r5
 801b7ec:	4599      	cmp	r9, r3
 801b7ee:	f104 0402 	add.w	r4, r4, #2
 801b7f2:	f1a6 0602 	sub.w	r6, r6, #2
 801b7f6:	d8ce      	bhi.n	801b796 <Spectral_DrawGraph_Const+0x26>
	}
}
 801b7f8:	b003      	add	sp, #12
 801b7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801b7fe:	f100 034d 	add.w	r3, r0, #77	; 0x4d
 801b802:	8862      	ldrh	r2, [r4, #2]
 801b804:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 801b808:	8820      	ldrh	r0, [r4, #0]
 801b80a:	3212      	adds	r2, #18
 801b80c:	3012      	adds	r0, #18
 801b80e:	e7cf      	b.n	801b7b0 <Spectral_DrawGraph_Const+0x40>

0801b810 <Spectral_DrawGraph_Line2>:
				flag_spectral = 0;}
					}
}

void Spectral_DrawGraph_Line2(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint16_t color, uint8_t direction)
{
 801b810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b814:	b087      	sub	sp, #28
 801b816:	4691      	mov	r9, r2
 801b818:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801b81c:	9004      	str	r0, [sp, #16]
    float buf_pix;
//    static uint16_t
    uint16_t i, j = 0;
    static uint16_t GraphData_Prev[355];
    uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801b81e:	2e00      	cmp	r6, #0
 801b820:	bf0c      	ite	eq
 801b822:	23f0      	moveq	r3, #240	; 0xf0
 801b824:	f44f 73a5 	movne.w	r3, #330	; 0x14a
 801b828:	9303      	str	r3, [sp, #12]
    uint8_t    step = (direction == 0x00)? 4 :3;
    uint16_t  jj = 0, ii = 0;

//    screen_cnt++;
//	screen_cnt > 200 ||
    if( direction != Rotation_Screen_Spectral_Old2){
 801b82a:	4bc9      	ldr	r3, [pc, #804]	; (801bb50 <Spectral_DrawGraph_Line2+0x340>)
 801b82c:	781a      	ldrb	r2, [r3, #0]
 801b82e:	42b2      	cmp	r2, r6
 801b830:	d01b      	beq.n	801b86a <Spectral_DrawGraph_Line2+0x5a>
			Rotation_Screen_Spectral_Old2 = direction;
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801b832:	2463      	movs	r4, #99	; 0x63
			Rotation_Screen_Spectral_Old2 = direction;
 801b834:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801b836:	f240 120f 	movw	r2, #271	; 0x10f
 801b83a:	f240 13a5 	movw	r3, #421	; 0x1a5
 801b83e:	9400      	str	r4, [sp, #0]
 801b840:	2137      	movs	r1, #55	; 0x37
 801b842:	2001      	movs	r0, #1
 801b844:	f000 febb 	bl	801c5be <TFT_FillRectangle>

        if(Graph_Field&PPF_Bands)
 801b848:	4bc2      	ldr	r3, [pc, #776]	; (801bb54 <Spectral_DrawGraph_Line2+0x344>)
 801b84a:	781b      	ldrb	r3, [r3, #0]
 801b84c:	07db      	lsls	r3, r3, #31
 801b84e:	f140 8087 	bpl.w	801b960 <Spectral_DrawGraph_Line2+0x150>
        {
            Spectral_PAR_Range(direction);
 801b852:	4630      	mov	r0, r6
 801b854:	f7ff fdcc 	bl	801b3f0 <Spectral_PAR_Range>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
        }

//    Spectral_Axes(direction);
//    Spectral_Axes_Text(direction);
	memset(GraphData_Prev, 0, sizeof(GraphData_Prev));
 801b858:	f240 22c6 	movw	r2, #710	; 0x2c6
 801b85c:	2100      	movs	r1, #0
 801b85e:	48be      	ldr	r0, [pc, #760]	; (801bb58 <Spectral_DrawGraph_Line2+0x348>)
 801b860:	f004 fd0f 	bl	8020282 <memset>
    screen_cnt = 0;
 801b864:	4bbd      	ldr	r3, [pc, #756]	; (801bb5c <Spectral_DrawGraph_Line2+0x34c>)
 801b866:	2200      	movs	r2, #0
 801b868:	801a      	strh	r2, [r3, #0]
    }
    flag_refresh = 1;
 801b86a:	4bbd      	ldr	r3, [pc, #756]	; (801bb60 <Spectral_DrawGraph_Line2+0x350>)
            if(GraphData_Prev[graph_lenht-i] > GraphData[graph_lenht-i])	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 253 - GraphData_Prev[graph_lenht-i], 72+i, TFT_Black_Bkgr);

//          DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, color);
            flag_spectral = 0;
        } else if(direction == 0x02)
				{flag_spectral = 1; 
 801b86c:	f8df b300 	ldr.w	fp, [pc, #768]	; 801bb70 <Spectral_DrawGraph_Line2+0x360>
 801b870:	4dbc      	ldr	r5, [pc, #752]	; (801bb64 <Spectral_DrawGraph_Line2+0x354>)
    flag_refresh = 1;
 801b872:	2401      	movs	r4, #1
 801b874:	701c      	strb	r4, [r3, #0]
    i_coord = 0;
 801b876:	4bbc      	ldr	r3, [pc, #752]	; (801bb68 <Spectral_DrawGraph_Line2+0x358>)
 801b878:	2200      	movs	r2, #0
 801b87a:	801a      	strh	r2, [r3, #0]
 801b87c:	1c63      	adds	r3, r4, #1
        if(direction == 0x00){
 801b87e:	2e00      	cmp	r6, #0
 801b880:	f040 8098 	bne.w	801b9b4 <Spectral_DrawGraph_Line2+0x1a4>
            flag_spectral = 1;
 801b884:	2201      	movs	r2, #1
            			if((i+4)%40 == 0) i++;
 801b886:	1d20      	adds	r0, r4, #4
 801b888:	2128      	movs	r1, #40	; 0x28
            flag_spectral = 1;
 801b88a:	f88b 2000 	strb.w	r2, [fp]
            			if((i+4)%40 == 0) i++;
 801b88e:	fb90 f2f1 	sdiv	r2, r0, r1
 801b892:	fb01 0212 	mls	r2, r1, r2, r0
 801b896:	b902      	cbnz	r2, 801b89a <Spectral_DrawGraph_Line2+0x8a>
 801b898:	b29c      	uxth	r4, r3
            			if(412-GraphData[i] < 181)
 801b89a:	0063      	lsls	r3, r4, #1
 801b89c:	9305      	str	r3, [sp, #20]
 801b89e:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
 801b8a2:	9a04      	ldr	r2, [sp, #16]
 801b8a4:	4fb1      	ldr	r7, [pc, #708]	; (801bb6c <Spectral_DrawGraph_Line2+0x35c>)
 801b8a6:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801b8aa:	2bb4      	cmp	r3, #180	; 0xb4
 801b8ac:	eb04 0a02 	add.w	sl, r4, r2
 801b8b0:	b299      	uxth	r1, r3
 801b8b2:	dc5f      	bgt.n	801b974 <Spectral_DrawGraph_Line2+0x164>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 180, Vertical_color_dara[i]);
 801b8b4:	fa1f f88a 	uxth.w	r8, sl
 801b8b8:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b8bc:	9300      	str	r3, [sp, #0]
 801b8be:	4642      	mov	r2, r8
 801b8c0:	23b4      	movs	r3, #180	; 0xb4
 801b8c2:	4640      	mov	r0, r8
 801b8c4:	f001 fa0e 	bl	801cce4 <DrawLineX>
            				DrawLineX(ZeroX+i, 182, ZeroX+i, 256, Vertical_color_dara[i]);
 801b8c8:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b8cc:	9300      	str	r3, [sp, #0]
 801b8ce:	4642      	mov	r2, r8
 801b8d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b8d4:	21b6      	movs	r1, #182	; 0xb6
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 256, Vertical_color_dara[i]);
 801b8d6:	4640      	mov	r0, r8
 801b8d8:	f001 fa04 	bl	801cce4 <DrawLineX>
							DrawLineX(ZeroX+i, 258, ZeroX+i, 333, Vertical_color_dara[i]);
 801b8dc:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b8e0:	9300      	str	r3, [sp, #0]
 801b8e2:	4642      	mov	r2, r8
 801b8e4:	f240 134d 	movw	r3, #333	; 0x14d
 801b8e8:	f44f 7181 	mov.w	r1, #258	; 0x102
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 333, Vertical_color_dara[i]);
 801b8ec:	4640      	mov	r0, r8
 801b8ee:	f001 f9f9 	bl	801cce4 <DrawLineX>
							DrawLineX(ZeroX+i, 335, ZeroX+i, 411, Vertical_color_dara[i]);
 801b8f2:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b8f6:	9300      	str	r3, [sp, #0]
 801b8f8:	4642      	mov	r2, r8
 801b8fa:	f240 139b 	movw	r3, #411	; 0x19b
 801b8fe:	f240 114f 	movw	r1, #335	; 0x14f
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 411, Vertical_color_dara[i]);
 801b902:	4610      	mov	r0, r2
 801b904:	f001 f9ee 	bl	801cce4 <DrawLineX>
						if(GraphData_Prev[i]>GraphData[i])	DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 412 - GraphData_Prev[i], TFT_Black_Bkgr);
 801b908:	4b93      	ldr	r3, [pc, #588]	; (801bb58 <Spectral_DrawGraph_Line2+0x348>)
 801b90a:	0062      	lsls	r2, r4, #1
 801b90c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801b910:	f839 1002 	ldrh.w	r1, [r9, r2]
 801b914:	428b      	cmp	r3, r1
 801b916:	d90c      	bls.n	801b932 <Spectral_DrawGraph_Line2+0x122>
 801b918:	2063      	movs	r0, #99	; 0x63
 801b91a:	fa1f f28a 	uxth.w	r2, sl
 801b91e:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801b922:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801b926:	9000      	str	r0, [sp, #0]
 801b928:	b29b      	uxth	r3, r3
 801b92a:	b289      	uxth	r1, r1
 801b92c:	4610      	mov	r0, r2
				}

//				DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);


				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801b92e:	f001 f9d9 	bl	801cce4 <DrawLineX>

//				DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
				flag_spectral = 0;}
 801b932:	2300      	movs	r3, #0
 801b934:	f88b 3000 	strb.w	r3, [fp]
    for(i = 1; i < graph_lenht; i++)
 801b938:	3401      	adds	r4, #1
 801b93a:	9b03      	ldr	r3, [sp, #12]
 801b93c:	b2a4      	uxth	r4, r4
 801b93e:	42a3      	cmp	r3, r4
 801b940:	d89c      	bhi.n	801b87c <Spectral_DrawGraph_Line2+0x6c>
					}
    memcpy(GraphData_Prev, GraphData, sizeof(GraphData_Prev));
 801b942:	f240 22c6 	movw	r2, #710	; 0x2c6
 801b946:	4649      	mov	r1, r9
 801b948:	4883      	ldr	r0, [pc, #524]	; (801bb58 <Spectral_DrawGraph_Line2+0x348>)
 801b94a:	f004 fc8f 	bl	802026c <memcpy>
    Spectral_Axes(direction);
 801b94e:	4630      	mov	r0, r6
 801b950:	f7ff fc80 	bl	801b254 <Spectral_Axes>
	Spectral_Axes_Text(direction);
 801b954:	4630      	mov	r0, r6
}
 801b956:	b007      	add	sp, #28
 801b958:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Spectral_Axes_Text(direction);
 801b95c:	f7ff be2a 	b.w	801b5b4 <Spectral_Axes_Text>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
 801b960:	9400      	str	r4, [sp, #0]
 801b962:	f240 13a5 	movw	r3, #421	; 0x1a5
 801b966:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801b96a:	2137      	movs	r1, #55	; 0x37
 801b96c:	2005      	movs	r0, #5
 801b96e:	f000 fe26 	bl	801c5be <TFT_FillRectangle>
 801b972:	e771      	b.n	801b858 <Spectral_DrawGraph_Line2+0x48>
            			else if(412-GraphData[i] < 257)
 801b974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b978:	dc08      	bgt.n	801b98c <Spectral_DrawGraph_Line2+0x17c>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 256, Vertical_color_dara[i]);
 801b97a:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b97e:	9300      	str	r3, [sp, #0]
 801b980:	fa1f f88a 	uxth.w	r8, sl
 801b984:	f44f 7380 	mov.w	r3, #256	; 0x100
 801b988:	4642      	mov	r2, r8
 801b98a:	e7a4      	b.n	801b8d6 <Spectral_DrawGraph_Line2+0xc6>
            			else if(412-GraphData[i] < 334)
 801b98c:	f5b3 7fa7 	cmp.w	r3, #334	; 0x14e
 801b990:	da08      	bge.n	801b9a4 <Spectral_DrawGraph_Line2+0x194>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 333, Vertical_color_dara[i]);
 801b992:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b996:	9300      	str	r3, [sp, #0]
 801b998:	fa1f f88a 	uxth.w	r8, sl
 801b99c:	f240 134d 	movw	r3, #333	; 0x14d
 801b9a0:	4642      	mov	r2, r8
 801b9a2:	e7a3      	b.n	801b8ec <Spectral_DrawGraph_Line2+0xdc>
            				DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i, 411, Vertical_color_dara[i]);
 801b9a4:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 801b9a8:	9300      	str	r3, [sp, #0]
 801b9aa:	fa1f f28a 	uxth.w	r2, sl
 801b9ae:	f240 139b 	movw	r3, #411	; 0x19b
 801b9b2:	e7a6      	b.n	801b902 <Spectral_DrawGraph_Line2+0xf2>
        else if(direction == 0x01)
 801b9b4:	2e01      	cmp	r6, #1
 801b9b6:	d16a      	bne.n	801ba8e <Spectral_DrawGraph_Line2+0x27e>
            if((i+18)%50 == 0) i++;
 801b9b8:	f104 0012 	add.w	r0, r4, #18
 801b9bc:	2132      	movs	r1, #50	; 0x32
 801b9be:	fb90 f2f1 	sdiv	r2, r0, r1
 801b9c2:	fb01 0212 	mls	r2, r1, r2, r0
            flag_spectral = 1;
 801b9c6:	f88b 6000 	strb.w	r6, [fp]
            if((i+18)%50 == 0) i++;
 801b9ca:	b902      	cbnz	r2, 801b9ce <Spectral_DrawGraph_Line2+0x1be>
 801b9cc:	b29c      	uxth	r4, r3
            if(253 - GraphData[graph_lenht-i] < 98)
 801b9ce:	9b03      	ldr	r3, [sp, #12]
 801b9d0:	eba3 0804 	sub.w	r8, r3, r4
 801b9d4:	f104 0748 	add.w	r7, r4, #72	; 0x48
 801b9d8:	f839 3018 	ldrh.w	r3, [r9, r8, lsl #1]
 801b9dc:	f1c3 03fd 	rsb	r3, r3, #253	; 0xfd
 801b9e0:	2b61      	cmp	r3, #97	; 0x61
 801b9e2:	b298      	uxth	r0, r3
 801b9e4:	dc38      	bgt.n	801ba58 <Spectral_DrawGraph_Line2+0x248>
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 97, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b9e6:	b2bf      	uxth	r7, r7
 801b9e8:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b9ec:	9300      	str	r3, [sp, #0]
 801b9ee:	2261      	movs	r2, #97	; 0x61
 801b9f0:	463b      	mov	r3, r7
 801b9f2:	4639      	mov	r1, r7
 801b9f4:	f001 f976 	bl	801cce4 <DrawLineX>
            	DrawLineX(99, 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801b9f8:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801b9fc:	9300      	str	r3, [sp, #0]
 801b9fe:	2296      	movs	r2, #150	; 0x96
 801ba00:	463b      	mov	r3, r7
 801ba02:	4639      	mov	r1, r7
 801ba04:	2063      	movs	r0, #99	; 0x63
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801ba06:	f001 f96d 	bl	801cce4 <DrawLineX>
				DrawLineX(152, 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801ba0a:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801ba0e:	9300      	str	r3, [sp, #0]
 801ba10:	22cb      	movs	r2, #203	; 0xcb
 801ba12:	463b      	mov	r3, r7
 801ba14:	4639      	mov	r1, r7
 801ba16:	2098      	movs	r0, #152	; 0x98
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801ba18:	f001 f964 	bl	801cce4 <DrawLineX>
				DrawLineX(205, 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801ba1c:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801ba20:	9300      	str	r3, [sp, #0]
 801ba22:	22fc      	movs	r2, #252	; 0xfc
 801ba24:	463b      	mov	r3, r7
 801ba26:	4639      	mov	r1, r7
 801ba28:	20cd      	movs	r0, #205	; 0xcd
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801ba2a:	f001 f95b 	bl	801cce4 <DrawLineX>
            if(GraphData_Prev[graph_lenht-i] > GraphData[graph_lenht-i])	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 253 - GraphData_Prev[graph_lenht-i], 72+i, TFT_Black_Bkgr);
 801ba2e:	4b4a      	ldr	r3, [pc, #296]	; (801bb58 <Spectral_DrawGraph_Line2+0x348>)
 801ba30:	f839 0018 	ldrh.w	r0, [r9, r8, lsl #1]
 801ba34:	f833 2018 	ldrh.w	r2, [r3, r8, lsl #1]
 801ba38:	4282      	cmp	r2, r0
 801ba3a:	f67f af7a 	bls.w	801b932 <Spectral_DrawGraph_Line2+0x122>
 801ba3e:	f104 0348 	add.w	r3, r4, #72	; 0x48
 801ba42:	b29b      	uxth	r3, r3
 801ba44:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801ba48:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801ba4c:	2163      	movs	r1, #99	; 0x63
 801ba4e:	9100      	str	r1, [sp, #0]
 801ba50:	b292      	uxth	r2, r2
 801ba52:	4619      	mov	r1, r3
 801ba54:	b280      	uxth	r0, r0
 801ba56:	e76a      	b.n	801b92e <Spectral_DrawGraph_Line2+0x11e>
            else if(253 - GraphData[graph_lenht-i] < 151)
 801ba58:	2b96      	cmp	r3, #150	; 0x96
 801ba5a:	dc07      	bgt.n	801ba6c <Spectral_DrawGraph_Line2+0x25c>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 150, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801ba5c:	b2bf      	uxth	r7, r7
 801ba5e:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801ba62:	9300      	str	r3, [sp, #0]
 801ba64:	2296      	movs	r2, #150	; 0x96
 801ba66:	463b      	mov	r3, r7
 801ba68:	4639      	mov	r1, r7
 801ba6a:	e7cc      	b.n	801ba06 <Spectral_DrawGraph_Line2+0x1f6>
            else if(253 - GraphData[graph_lenht-i] < 204)
 801ba6c:	2bcb      	cmp	r3, #203	; 0xcb
 801ba6e:	dc07      	bgt.n	801ba80 <Spectral_DrawGraph_Line2+0x270>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 203, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801ba70:	b2bf      	uxth	r7, r7
 801ba72:	f835 3018 	ldrh.w	r3, [r5, r8, lsl #1]
 801ba76:	9300      	str	r3, [sp, #0]
 801ba78:	22cb      	movs	r2, #203	; 0xcb
 801ba7a:	463b      	mov	r3, r7
 801ba7c:	4639      	mov	r1, r7
 801ba7e:	e7cb      	b.n	801ba18 <Spectral_DrawGraph_Line2+0x208>
            	DrawLineX(253 - GraphData[graph_lenht-i], 72+i, 252, 72+i, Horizontal_color_dara[graph_lenht - i]);
 801ba80:	f835 2018 	ldrh.w	r2, [r5, r8, lsl #1]
 801ba84:	9200      	str	r2, [sp, #0]
 801ba86:	b2bb      	uxth	r3, r7
 801ba88:	22fc      	movs	r2, #252	; 0xfc
 801ba8a:	4619      	mov	r1, r3
 801ba8c:	e7cd      	b.n	801ba2a <Spectral_DrawGraph_Line2+0x21a>
        } else if(direction == 0x02)
 801ba8e:	2e02      	cmp	r6, #2
 801ba90:	f47f af52 	bne.w	801b938 <Spectral_DrawGraph_Line2+0x128>
				{flag_spectral = 1; 
 801ba94:	2201      	movs	r2, #1
				if((i+2)%50 == 0) i++;
 801ba96:	1ca0      	adds	r0, r4, #2
 801ba98:	2132      	movs	r1, #50	; 0x32
				{flag_spectral = 1; 
 801ba9a:	f88b 2000 	strb.w	r2, [fp]
				if((i+2)%50 == 0) i++;
 801ba9e:	fb90 f2f1 	sdiv	r2, r0, r1
 801baa2:	fb01 0212 	mls	r2, r1, r2, r0
 801baa6:	b902      	cbnz	r2, 801baaa <Spectral_DrawGraph_Line2+0x29a>
 801baa8:	b29c      	uxth	r4, r3
				if(GraphData[i]+18 > 174)
 801baaa:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
 801baae:	2b9c      	cmp	r3, #156	; 0x9c
 801bab0:	ea4f 0844 	mov.w	r8, r4, lsl #1
 801bab4:	f104 074c 	add.w	r7, r4, #76	; 0x4c
 801bab8:	f103 0012 	add.w	r0, r3, #18
 801babc:	dd32      	ble.n	801bb24 <Spectral_DrawGraph_Line2+0x314>
					DrawLineX(GraphData[i]+18, 76+i, 175, 76+i, Horizontal_color_dara[i]);
 801babe:	b2bf      	uxth	r7, r7
 801bac0:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801bac4:	9300      	str	r3, [sp, #0]
 801bac6:	22af      	movs	r2, #175	; 0xaf
 801bac8:	463b      	mov	r3, r7
 801baca:	4639      	mov	r1, r7
 801bacc:	b280      	uxth	r0, r0
 801bace:	f001 f909 	bl	801cce4 <DrawLineX>
					DrawLineX(173, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801bad2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801bad6:	9300      	str	r3, [sp, #0]
 801bad8:	227a      	movs	r2, #122	; 0x7a
 801bada:	463b      	mov	r3, r7
 801badc:	4639      	mov	r1, r7
 801bade:	20ad      	movs	r0, #173	; 0xad
					DrawLineX(GraphData[i]+18, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801bae0:	f001 f900 	bl	801cce4 <DrawLineX>
					DrawLineX(120, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801bae4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801bae8:	9300      	str	r3, [sp, #0]
 801baea:	2245      	movs	r2, #69	; 0x45
 801baec:	463b      	mov	r3, r7
 801baee:	4639      	mov	r1, r7
 801baf0:	2078      	movs	r0, #120	; 0x78
					DrawLineX(GraphData[i]+18, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801baf2:	f001 f8f7 	bl	801cce4 <DrawLineX>
					DrawLineX(67, 76+i, 19, 76+i, Horizontal_color_dara[i]);
 801baf6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801bafa:	9300      	str	r3, [sp, #0]
 801bafc:	2213      	movs	r2, #19
 801bafe:	463b      	mov	r3, r7
 801bb00:	4639      	mov	r1, r7
 801bb02:	2043      	movs	r0, #67	; 0x43
					DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);
 801bb04:	f001 f8ee 	bl	801cce4 <DrawLineX>
				if(GraphData_Prev[i]>GraphData[i])	DrawLineX(GraphData[i]+18, 76+i, GraphData_Prev[i]+18, 76+i, TFT_Black_Bkgr);
 801bb08:	4b13      	ldr	r3, [pc, #76]	; (801bb58 <Spectral_DrawGraph_Line2+0x348>)
 801bb0a:	f839 0008 	ldrh.w	r0, [r9, r8]
 801bb0e:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 801bb12:	4282      	cmp	r2, r0
 801bb14:	f67f af0d 	bls.w	801b932 <Spectral_DrawGraph_Line2+0x122>
 801bb18:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 801bb1c:	b29b      	uxth	r3, r3
 801bb1e:	3212      	adds	r2, #18
 801bb20:	3012      	adds	r0, #18
 801bb22:	e793      	b.n	801ba4c <Spectral_DrawGraph_Line2+0x23c>
				else if(GraphData[i]+18 > 121)
 801bb24:	2b67      	cmp	r3, #103	; 0x67
 801bb26:	dd08      	ble.n	801bb3a <Spectral_DrawGraph_Line2+0x32a>
					DrawLineX(GraphData[i]+18, 76+i, 122, 76+i, Horizontal_color_dara[i]);
 801bb28:	b2bf      	uxth	r7, r7
 801bb2a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801bb2e:	9300      	str	r3, [sp, #0]
 801bb30:	227a      	movs	r2, #122	; 0x7a
 801bb32:	463b      	mov	r3, r7
 801bb34:	4639      	mov	r1, r7
 801bb36:	b280      	uxth	r0, r0
 801bb38:	e7d2      	b.n	801bae0 <Spectral_DrawGraph_Line2+0x2d0>
				else if(GraphData[i]+18 > 68)
 801bb3a:	2b32      	cmp	r3, #50	; 0x32
 801bb3c:	dd1a      	ble.n	801bb74 <Spectral_DrawGraph_Line2+0x364>
					DrawLineX(GraphData[i]+18, 76+i, 69, 76+i, Horizontal_color_dara[i]);
 801bb3e:	b2bf      	uxth	r7, r7
 801bb40:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
 801bb44:	9300      	str	r3, [sp, #0]
 801bb46:	2245      	movs	r2, #69	; 0x45
 801bb48:	463b      	mov	r3, r7
 801bb4a:	4639      	mov	r1, r7
 801bb4c:	b280      	uxth	r0, r0
 801bb4e:	e7d0      	b.n	801baf2 <Spectral_DrawGraph_Line2+0x2e2>
 801bb50:	20093681 	.word	0x20093681
 801bb54:	20005702 	.word	0x20005702
 801bb58:	20009768 	.word	0x20009768
 801bb5c:	20009cf8 	.word	0x20009cf8
 801bb60:	20009cf4 	.word	0x20009cf4
 801bb64:	20000a3e 	.word	0x20000a3e
 801bb68:	20009cf6 	.word	0x20009cf6
 801bb6c:	20000cd2 	.word	0x20000cd2
 801bb70:	20009cf5 	.word	0x20009cf5
					DrawLineX(GraphData[i]+18, 76+i, 18, 76+i, Horizontal_color_dara[i]);
 801bb74:	f835 2014 	ldrh.w	r2, [r5, r4, lsl #1]
 801bb78:	9200      	str	r2, [sp, #0]
 801bb7a:	b2bb      	uxth	r3, r7
 801bb7c:	2212      	movs	r2, #18
 801bb7e:	4619      	mov	r1, r3
 801bb80:	b280      	uxth	r0, r0
 801bb82:	e7bf      	b.n	801bb04 <Spectral_DrawGraph_Line2+0x2f4>

0801bb84 <Rabs_graph_to_display>:



uint16_t Line_Rabs_buff_graph2[355] = {0};
void Rabs_graph_to_display(uint8_t direction, float Line_Rabs_buff[])
{    
 801bb84:	b570      	push	{r4, r5, r6, lr}
 801bb86:	ed2d 8b02 	vpush	{d8}
	uint8_t    step = (direction == 0x00)? 4 :3;
 801bb8a:	eddf 7a23 	vldr	s15, [pc, #140]	; 801bc18 <Rabs_graph_to_display+0x94>
 801bb8e:	ed9f 8a23 	vldr	s16, [pc, #140]	; 801bc1c <Rabs_graph_to_display+0x98>
 801bb92:	2800      	cmp	r0, #0
{    
 801bb94:	b082      	sub	sp, #8
 801bb96:	460e      	mov	r6, r1
	uint16_t  q = 0, res;
	float scale = (direction == 0x00)? 307 : 209; 
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801bb98:	f240 22c6 	movw	r2, #710	; 0x2c6
 801bb9c:	f04f 0100 	mov.w	r1, #0
 801bba0:	481f      	ldr	r0, [pc, #124]	; (801bc20 <Rabs_graph_to_display+0x9c>)
	uint8_t    step = (direction == 0x00)? 4 :3;
 801bba2:	bf14      	ite	ne
 801bba4:	2403      	movne	r4, #3
 801bba6:	2404      	moveq	r4, #4
 801bba8:	bf08      	it	eq
 801bbaa:	eeb0 8a67 	vmoveq.f32	s16, s15
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801bbae:	f004 fb68 	bl	8020282 <memset>

	for(uint16_t ic = 0; ic <= 1023; ic+=step){
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801bbb2:	4b1c      	ldr	r3, [pc, #112]	; (801bc24 <Rabs_graph_to_display+0xa0>)
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801bbb4:	481a      	ldr	r0, [pc, #104]	; (801bc20 <Rabs_graph_to_display+0x9c>)
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801bbb6:	ed93 7a00 	vldr	s14, [r3]
 801bbba:	2100      	movs	r1, #0
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801bbbc:	460b      	mov	r3, r1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801bbbe:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 801bbc2:	edd2 6a00 	vldr	s13, [r2]
 801bbc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bbca:	4423      	add	r3, r4
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801bbcc:	b28d      	uxth	r5, r1
 801bbce:	b29b      	uxth	r3, r3
 801bbd0:	3101      	adds	r1, #1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801bbd2:	ee67 7a88 	vmul.f32	s15, s15, s16
 801bbd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bbda:	edcd 7a01 	vstr	s15, [sp, #4]
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801bbde:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801bbe2:	ee07 2a90 	vmov	s15, r2
 801bbe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bbea:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801bbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbf2:	bf4c      	ite	mi
 801bbf4:	eefc 7ac8 	vcvtmi.u32.f32	s15, s16
 801bbf8:	eefc 7ae7 	vcvtpl.u32.f32	s15, s15
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801bbfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801bc00:	edcd 7a01 	vstr	s15, [sp, #4]
 801bc04:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801bc08:	f820 2015 	strh.w	r2, [r0, r5, lsl #1]
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801bc0c:	d3d7      	bcc.n	801bbbe <Rabs_graph_to_display+0x3a>
		q++;
	}
}
 801bc0e:	b002      	add	sp, #8
 801bc10:	ecbd 8b02 	vpop	{d8}
 801bc14:	bd70      	pop	{r4, r5, r6, pc}
 801bc16:	bf00      	nop
 801bc18:	43998000 	.word	0x43998000
 801bc1c:	43510000 	.word	0x43510000
 801bc20:	20009a2e 	.word	0x20009a2e
 801bc24:	20095ae0 	.word	0x20095ae0

0801bc28 <Refresh_screen_Graph>:

void Refresh_screen_Graph(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint8_t direction)
{   
 801bc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc2c:	b085      	sub	sp, #20
	uint16_t i = 0;
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801bc2e:	461d      	mov	r5, r3
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);

        } else if(direction == 0x02)
				{
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801bc30:	f8df 8350 	ldr.w	r8, [pc, #848]	; 801bf84 <Refresh_screen_Graph+0x35c>
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	bf0c      	ite	eq
 801bc38:	23f0      	moveq	r3, #240	; 0xf0
 801bc3a:	f44f 73a5 	movne.w	r3, #330	; 0x14a
{   
 801bc3e:	4682      	mov	sl, r0
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801bc40:	9303      	str	r3, [sp, #12]
 801bc42:	4616      	mov	r6, r2
 801bc44:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801bc48:	2400      	movs	r4, #0
        if(direction == 0x00){
 801bc4a:	2d00      	cmp	r5, #0
 801bc4c:	f040 80a0 	bne.w	801bd90 <Refresh_screen_Graph+0x168>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(68, 18+PARGraph_G/4, 375, 20+PARGraph_G/4, TFT_PAR_Green);
 801bc50:	f898 3000 	ldrb.w	r3, [r8]
 801bc54:	07db      	lsls	r3, r3, #31
 801bc56:	d529      	bpl.n	801bcac <Refresh_screen_Graph+0x84>
 801bc58:	4bc6      	ldr	r3, [pc, #792]	; (801bf74 <Refresh_screen_Graph+0x34c>)
 801bc5a:	8819      	ldrh	r1, [r3, #0]
 801bc5c:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801bc60:	0889      	lsrs	r1, r1, #2
 801bc62:	9300      	str	r3, [sp, #0]
 801bc64:	f240 1277 	movw	r2, #375	; 0x177
 801bc68:	f101 0314 	add.w	r3, r1, #20
 801bc6c:	2044      	movs	r0, #68	; 0x44
 801bc6e:	3112      	adds	r1, #18
 801bc70:	f000 fa66 	bl	801c140 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_R/4, 375, 20+PARGraph_R/4, TFT_PAR_Red);
 801bc74:	4bc0      	ldr	r3, [pc, #768]	; (801bf78 <Refresh_screen_Graph+0x350>)
 801bc76:	8819      	ldrh	r1, [r3, #0]
 801bc78:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801bc7c:	0889      	lsrs	r1, r1, #2
 801bc7e:	9300      	str	r3, [sp, #0]
 801bc80:	f240 1277 	movw	r2, #375	; 0x177
 801bc84:	f101 0314 	add.w	r3, r1, #20
 801bc88:	2044      	movs	r0, #68	; 0x44
 801bc8a:	3112      	adds	r1, #18
 801bc8c:	f000 fa58 	bl	801c140 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_IR/4, 375, 20+PARGraph_IR/4, TFT_PAR_IRed);}
 801bc90:	4bba      	ldr	r3, [pc, #744]	; (801bf7c <Refresh_screen_Graph+0x354>)
 801bc92:	8819      	ldrh	r1, [r3, #0]
 801bc94:	f646 0382 	movw	r3, #26754	; 0x6882
 801bc98:	0889      	lsrs	r1, r1, #2
 801bc9a:	9300      	str	r3, [sp, #0]
 801bc9c:	f240 1277 	movw	r2, #375	; 0x177
 801bca0:	f101 0314 	add.w	r3, r1, #20
 801bca4:	2044      	movs	r0, #68	; 0x44
 801bca6:	3112      	adds	r1, #18
 801bca8:	f000 fa4a 	bl	801c140 <TFT_FillRectangle_DMA>
 801bcac:	b2a2      	uxth	r2, r4
 801bcae:	f10a 0301 	add.w	r3, sl, #1
 801bcb2:	eb02 000a 	add.w	r0, r2, sl
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801bcb6:	8831      	ldrh	r1, [r6, #0]
 801bcb8:	f898 7000 	ldrb.w	r7, [r8]
 801bcbc:	441a      	add	r2, r3
 801bcbe:	8873      	ldrh	r3, [r6, #2]
 801bcc0:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801bcc4:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801bcc8:	07ff      	lsls	r7, r7, #31
 801bcca:	b280      	uxth	r0, r0
 801bccc:	b289      	uxth	r1, r1
 801bcce:	b292      	uxth	r2, r2
 801bcd0:	b29b      	uxth	r3, r3
 801bcd2:	f140 8161 	bpl.w	801bf98 <Refresh_screen_Graph+0x370>
 801bcd6:	4faa      	ldr	r7, [pc, #680]	; (801bf80 <Refresh_screen_Graph+0x358>)
 801bcd8:	883f      	ldrh	r7, [r7, #0]
 801bcda:	08bf      	lsrs	r7, r7, #2
 801bcdc:	eb0a 0c04 	add.w	ip, sl, r4
 801bce0:	3712      	adds	r7, #18
 801bce2:	4567      	cmp	r7, ip
 801bce4:	f280 8158 	bge.w	801bf98 <Refresh_screen_Graph+0x370>
 801bce8:	4fa2      	ldr	r7, [pc, #648]	; (801bf74 <Refresh_screen_Graph+0x34c>)
 801bcea:	883f      	ldrh	r7, [r7, #0]
 801bcec:	08bf      	lsrs	r7, r7, #2
 801bcee:	3712      	adds	r7, #18
 801bcf0:	4567      	cmp	r7, ip
 801bcf2:	f280 8153 	bge.w	801bf9c <Refresh_screen_Graph+0x374>
																																							(ZeroX+i < 19+PARGraph_R/4) ? TFT_PAR_Green :
 801bcf6:	4fa0      	ldr	r7, [pc, #640]	; (801bf78 <Refresh_screen_Graph+0x350>)
 801bcf8:	883f      	ldrh	r7, [r7, #0]
 801bcfa:	08bf      	lsrs	r7, r7, #2
 801bcfc:	3712      	adds	r7, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801bcfe:	4567      	cmp	r7, ip
 801bd00:	f280 814f 	bge.w	801bfa2 <Refresh_screen_Graph+0x37a>
																																							(ZeroX+i < 19+PARGraph_IR/4) ? TFT_PAR_Red : TFT_PAR_IRed) : TFT_Black_Bkgr);
 801bd04:	4f9d      	ldr	r7, [pc, #628]	; (801bf7c <Refresh_screen_Graph+0x354>)
 801bd06:	f8b7 e000 	ldrh.w	lr, [r7]
 801bd0a:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801bd0e:	f10e 0e12 	add.w	lr, lr, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801bd12:	f646 0b82 	movw	fp, #26754	; 0x6882
 801bd16:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801bd1a:	45e6      	cmp	lr, ip
 801bd1c:	bfb8      	it	lt
 801bd1e:	465f      	movlt	r7, fp
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
					
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801bd20:	9700      	str	r7, [sp, #0]
 801bd22:	f000 ffdf 	bl	801cce4 <DrawLineX>
 801bd26:	3401      	adds	r4, #1
	 for(i = 0; i < graph_lenht; i++)
 801bd28:	9a03      	ldr	r2, [sp, #12]
 801bd2a:	b2a3      	uxth	r3, r4
 801bd2c:	429a      	cmp	r2, r3
 801bd2e:	f106 0602 	add.w	r6, r6, #2
 801bd32:	f1a9 0902 	sub.w	r9, r9, #2
 801bd36:	d888      	bhi.n	801bc4a <Refresh_screen_Graph+0x22>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
           	:TFT_Black_Bkgr);
				}
			}
		Spectral_Axes(direction);
		 if(Graph_Field&V_lambda)
 801bd38:	4c92      	ldr	r4, [pc, #584]	; (801bf84 <Refresh_screen_Graph+0x35c>)
		Spectral_Axes(direction);
 801bd3a:	4628      	mov	r0, r5
 801bd3c:	f7ff fa8a 	bl	801b254 <Spectral_Axes>
		 if(Graph_Field&V_lambda)
 801bd40:	7822      	ldrb	r2, [r4, #0]
 801bd42:	0752      	lsls	r2, r2, #29
 801bd44:	d50e      	bpl.n	801bd64 <Refresh_screen_Graph+0x13c>
			{
					Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, direction);
 801bd46:	2114      	movs	r1, #20
 801bd48:	4608      	mov	r0, r1
 801bd4a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801bd4e:	4a8e      	ldr	r2, [pc, #568]	; (801bf88 <Refresh_screen_Graph+0x360>)
 801bd50:	9500      	str	r5, [sp, #0]
 801bd52:	f7ff fd0d 	bl	801b770 <Spectral_DrawGraph_Const>
					Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, direction);
 801bd56:	2114      	movs	r1, #20
 801bd58:	9500      	str	r5, [sp, #0]
 801bd5a:	231f      	movs	r3, #31
 801bd5c:	4a8b      	ldr	r2, [pc, #556]	; (801bf8c <Refresh_screen_Graph+0x364>)
 801bd5e:	4608      	mov	r0, r1
 801bd60:	f7ff fd06 	bl	801b770 <Spectral_DrawGraph_Const>
					}
			
			if(Graph_Field&EbEr_graph)
 801bd64:	7823      	ldrb	r3, [r4, #0]
 801bd66:	079b      	lsls	r3, r3, #30
 801bd68:	d50f      	bpl.n	801bd8a <Refresh_screen_Graph+0x162>
					{
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, direction);
 801bd6a:	2114      	movs	r1, #20
 801bd6c:	4608      	mov	r0, r1
 801bd6e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 801bd72:	4a87      	ldr	r2, [pc, #540]	; (801bf90 <Refresh_screen_Graph+0x368>)
 801bd74:	9500      	str	r5, [sp, #0]
 801bd76:	f7ff fcfb 	bl	801b770 <Spectral_DrawGraph_Const>
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, direction);
 801bd7a:	2114      	movs	r1, #20
 801bd7c:	9500      	str	r5, [sp, #0]
 801bd7e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801bd82:	4a84      	ldr	r2, [pc, #528]	; (801bf94 <Refresh_screen_Graph+0x36c>)
 801bd84:	4608      	mov	r0, r1
 801bd86:	f7ff fcf3 	bl	801b770 <Spectral_DrawGraph_Const>
					}
}
 801bd8a:	b005      	add	sp, #20
 801bd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(direction == 0x01)
 801bd90:	2d01      	cmp	r5, #1
 801bd92:	d178      	bne.n	801be86 <Refresh_screen_Graph+0x25e>
				if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(76+PARGraph_G/3, 45, 79+PARGraph_G/3,253, TFT_PAR_Green);
 801bd94:	f898 3000 	ldrb.w	r3, [r8]
 801bd98:	07db      	lsls	r3, r3, #31
 801bd9a:	d530      	bpl.n	801bdfe <Refresh_screen_Graph+0x1d6>
 801bd9c:	4b75      	ldr	r3, [pc, #468]	; (801bf74 <Refresh_screen_Graph+0x34c>)
 801bd9e:	2703      	movs	r7, #3
 801bda0:	8818      	ldrh	r0, [r3, #0]
 801bda2:	fbb0 f0f7 	udiv	r0, r0, r7
 801bda6:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801bdaa:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801bdae:	304c      	adds	r0, #76	; 0x4c
 801bdb0:	9300      	str	r3, [sp, #0]
 801bdb2:	b292      	uxth	r2, r2
 801bdb4:	23fd      	movs	r3, #253	; 0xfd
 801bdb6:	212d      	movs	r1, #45	; 0x2d
 801bdb8:	b280      	uxth	r0, r0
 801bdba:	f000 f9c1 	bl	801c140 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_R/3, 45, 79+PARGraph_R/3,253, TFT_PAR_Red);
 801bdbe:	4b6e      	ldr	r3, [pc, #440]	; (801bf78 <Refresh_screen_Graph+0x350>)
 801bdc0:	8818      	ldrh	r0, [r3, #0]
 801bdc2:	fbb0 f0f7 	udiv	r0, r0, r7
 801bdc6:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801bdca:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801bdce:	304c      	adds	r0, #76	; 0x4c
 801bdd0:	9300      	str	r3, [sp, #0]
 801bdd2:	b292      	uxth	r2, r2
 801bdd4:	23fd      	movs	r3, #253	; 0xfd
 801bdd6:	212d      	movs	r1, #45	; 0x2d
 801bdd8:	b280      	uxth	r0, r0
 801bdda:	f000 f9b1 	bl	801c140 <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_IR/3,45, 79+PARGraph_IR/3,253, TFT_PAR_IRed);}
 801bdde:	4b67      	ldr	r3, [pc, #412]	; (801bf7c <Refresh_screen_Graph+0x354>)
 801bde0:	8818      	ldrh	r0, [r3, #0]
 801bde2:	fbb0 f7f7 	udiv	r7, r0, r7
 801bde6:	f646 0382 	movw	r3, #26754	; 0x6882
 801bdea:	f107 024f 	add.w	r2, r7, #79	; 0x4f
 801bdee:	374c      	adds	r7, #76	; 0x4c
 801bdf0:	9300      	str	r3, [sp, #0]
 801bdf2:	b292      	uxth	r2, r2
 801bdf4:	23fd      	movs	r3, #253	; 0xfd
 801bdf6:	212d      	movs	r1, #45	; 0x2d
 801bdf8:	b2b8      	uxth	r0, r7
 801bdfa:	f000 f9a1 	bl	801c140 <TFT_FillRectangle_DMA>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801bdfe:	f8b9 0000 	ldrh.w	r0, [r9]
 801be02:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801be06:	f898 7000 	ldrb.w	r7, [r8]
 801be0a:	b2a3      	uxth	r3, r4
 801be0c:	f103 0149 	add.w	r1, r3, #73	; 0x49
 801be10:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
 801be14:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801be18:	3348      	adds	r3, #72	; 0x48
 801be1a:	07ff      	lsls	r7, r7, #31
 801be1c:	b280      	uxth	r0, r0
 801be1e:	b289      	uxth	r1, r1
 801be20:	b292      	uxth	r2, r2
 801be22:	b29b      	uxth	r3, r3
 801be24:	f140 80b8 	bpl.w	801bf98 <Refresh_screen_Graph+0x370>
											   72+i+1 < 403-PARGraph_IR/3 ? TFT_PAR_IRed:
 801be28:	4f54      	ldr	r7, [pc, #336]	; (801bf7c <Refresh_screen_Graph+0x354>)
 801be2a:	f8b7 c000 	ldrh.w	ip, [r7]
 801be2e:	f240 1793 	movw	r7, #403	; 0x193
 801be32:	f104 0b49 	add.w	fp, r4, #73	; 0x49
 801be36:	f04f 0e03 	mov.w	lr, #3
 801be3a:	fbbc fcfe 	udiv	ip, ip, lr
 801be3e:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801be42:	45dc      	cmp	ip, fp
 801be44:	dc19      	bgt.n	801be7a <Refresh_screen_Graph+0x252>
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
 801be46:	f8df c130 	ldr.w	ip, [pc, #304]	; 801bf78 <Refresh_screen_Graph+0x350>
 801be4a:	f8bc c000 	ldrh.w	ip, [ip]
 801be4e:	fbbc fcfe 	udiv	ip, ip, lr
 801be52:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801be56:	45dc      	cmp	ip, fp
 801be58:	dc12      	bgt.n	801be80 <Refresh_screen_Graph+0x258>
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801be5a:	f8df c118 	ldr.w	ip, [pc, #280]	; 801bf74 <Refresh_screen_Graph+0x34c>
 801be5e:	f8bc c000 	ldrh.w	ip, [ip]
 801be62:	fbbc fefe 	udiv	lr, ip, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801be66:	f644 3cd4 	movw	ip, #19412	; 0x4bd4
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801be6a:	eba7 0e0e 	sub.w	lr, r7, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i,
 801be6e:	f645 47cc 	movw	r7, #23756	; 0x5ccc
 801be72:	45de      	cmp	lr, fp
 801be74:	bfd8      	it	le
 801be76:	4667      	movle	r7, ip
 801be78:	e752      	b.n	801bd20 <Refresh_screen_Graph+0xf8>
 801be7a:	f646 0782 	movw	r7, #26754	; 0x6882
 801be7e:	e74f      	b.n	801bd20 <Refresh_screen_Graph+0xf8>
 801be80:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801be84:	e74c      	b.n	801bd20 <Refresh_screen_Graph+0xf8>
        } else if(direction == 0x02)
 801be86:	2d02      	cmp	r5, #2
 801be88:	f47f af4d 	bne.w	801bd26 <Refresh_screen_Graph+0xfe>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801be8c:	f898 3000 	ldrb.w	r3, [r8]
 801be90:	07db      	lsls	r3, r3, #31
 801be92:	d535      	bpl.n	801bf00 <Refresh_screen_Graph+0x2d8>
 801be94:	4b37      	ldr	r3, [pc, #220]	; (801bf74 <Refresh_screen_Graph+0x34c>)
 801be96:	f240 1795 	movw	r7, #405	; 0x195
 801be9a:	8818      	ldrh	r0, [r3, #0]
 801be9c:	f04f 0b03 	mov.w	fp, #3
 801bea0:	f645 43cc 	movw	r3, #23756	; 0x5ccc
 801bea4:	fbb0 f0fb 	udiv	r0, r0, fp
 801bea8:	1a3a      	subs	r2, r7, r0
 801beaa:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801beae:	9300      	str	r3, [sp, #0]
 801beb0:	b292      	uxth	r2, r2
 801beb2:	23e3      	movs	r3, #227	; 0xe3
 801beb4:	2113      	movs	r1, #19
 801beb6:	b280      	uxth	r0, r0
 801beb8:	f000 f942 	bl	801c140 <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
 801bebc:	4b2e      	ldr	r3, [pc, #184]	; (801bf78 <Refresh_screen_Graph+0x350>)
 801bebe:	8818      	ldrh	r0, [r3, #0]
 801bec0:	fbb0 f0fb 	udiv	r0, r0, fp
 801bec4:	f649 238a 	movw	r3, #39562	; 0x9a8a
 801bec8:	1a3a      	subs	r2, r7, r0
 801beca:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801bece:	9300      	str	r3, [sp, #0]
 801bed0:	b292      	uxth	r2, r2
 801bed2:	23e3      	movs	r3, #227	; 0xe3
 801bed4:	2113      	movs	r1, #19
 801bed6:	b280      	uxth	r0, r0
 801bed8:	f000 f932 	bl	801c140 <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
 801bedc:	4b27      	ldr	r3, [pc, #156]	; (801bf7c <Refresh_screen_Graph+0x354>)
 801bede:	8818      	ldrh	r0, [r3, #0]
 801bee0:	fbb0 fbfb 	udiv	fp, r0, fp
 801bee4:	f646 0382 	movw	r3, #26754	; 0x6882
 801bee8:	eba7 020b 	sub.w	r2, r7, fp
 801beec:	f5cb 7bcc 	rsb	fp, fp, #408	; 0x198
 801bef0:	9300      	str	r3, [sp, #0]
 801bef2:	b292      	uxth	r2, r2
 801bef4:	23e3      	movs	r3, #227	; 0xe3
 801bef6:	2113      	movs	r1, #19
 801bef8:	fa1f f08b 	uxth.w	r0, fp
 801befc:	f000 f920 	bl	801c140 <TFT_FillRectangle_DMA>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801bf00:	8830      	ldrh	r0, [r6, #0]
 801bf02:	8872      	ldrh	r2, [r6, #2]
 801bf04:	f898 7000 	ldrb.w	r7, [r8]
 801bf08:	b2a3      	uxth	r3, r4
 801bf0a:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 801bf0e:	3012      	adds	r0, #18
 801bf10:	3212      	adds	r2, #18
 801bf12:	334d      	adds	r3, #77	; 0x4d
 801bf14:	07ff      	lsls	r7, r7, #31
 801bf16:	b280      	uxth	r0, r0
 801bf18:	b289      	uxth	r1, r1
 801bf1a:	b292      	uxth	r2, r2
 801bf1c:	b29b      	uxth	r3, r3
 801bf1e:	d53b      	bpl.n	801bf98 <Refresh_screen_Graph+0x370>
 801bf20:	4f17      	ldr	r7, [pc, #92]	; (801bf80 <Refresh_screen_Graph+0x358>)
 801bf22:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801bf26:	f8b7 e000 	ldrh.w	lr, [r7]
 801bf2a:	2703      	movs	r7, #3
 801bf2c:	fbbe fef7 	udiv	lr, lr, r7
 801bf30:	45e6      	cmp	lr, ip
 801bf32:	dc31      	bgt.n	801bf98 <Refresh_screen_Graph+0x370>
           	(76+i < 74+PARGraph_G/3) ? TFT_PAR_Blue :
 801bf34:	f8df c03c 	ldr.w	ip, [pc, #60]	; 801bf74 <Refresh_screen_Graph+0x34c>
 801bf38:	f104 0e02 	add.w	lr, r4, #2
 801bf3c:	f8bc c000 	ldrh.w	ip, [ip]
 801bf40:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801bf44:	45f4      	cmp	ip, lr
 801bf46:	dc29      	bgt.n	801bf9c <Refresh_screen_Graph+0x374>
           	(76+i < 74+PARGraph_R/3) ? TFT_PAR_Green :
 801bf48:	f8df c02c 	ldr.w	ip, [pc, #44]	; 801bf78 <Refresh_screen_Graph+0x350>
 801bf4c:	f8bc c000 	ldrh.w	ip, [ip]
 801bf50:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801bf54:	45f4      	cmp	ip, lr
 801bf56:	dc24      	bgt.n	801bfa2 <Refresh_screen_Graph+0x37a>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801bf58:	f8df c020 	ldr.w	ip, [pc, #32]	; 801bf7c <Refresh_screen_Graph+0x354>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801bf5c:	f646 0b82 	movw	fp, #26754	; 0x6882
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801bf60:	f8bc c000 	ldrh.w	ip, [ip]
 801bf64:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801bf68:	f649 278a 	movw	r7, #39562	; 0x9a8a
 801bf6c:	45f4      	cmp	ip, lr
 801bf6e:	bfd8      	it	le
 801bf70:	465f      	movle	r7, fp
 801bf72:	e6d5      	b.n	801bd20 <Refresh_screen_Graph+0xf8>
 801bf74:	20095b8c 	.word	0x20095b8c
 801bf78:	20095ce4 	.word	0x20095ce4
 801bf7c:	20095a40 	.word	0x20095a40
 801bf80:	20095a42 	.word	0x20095a42
 801bf84:	20005702 	.word	0x20005702
 801bf88:	20090d82 	.word	0x20090d82
 801bf8c:	20091320 	.word	0x20091320
 801bf90:	2009105a 	.word	0x2009105a
 801bf94:	20090abc 	.word	0x20090abc
 801bf98:	2763      	movs	r7, #99	; 0x63
 801bf9a:	e6c1      	b.n	801bd20 <Refresh_screen_Graph+0xf8>
 801bf9c:	f644 37d4 	movw	r7, #19412	; 0x4bd4
 801bfa0:	e6be      	b.n	801bd20 <Refresh_screen_Graph+0xf8>
 801bfa2:	f645 47cc 	movw	r7, #23756	; 0x5ccc
 801bfa6:	e6bb      	b.n	801bd20 <Refresh_screen_Graph+0xf8>

0801bfa8 <TS_IO_Read>:
{

  }

uint8_t TS_IO_Read(uint8_t DeviceAddr, uint8_t Reg)
{
 801bfa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 801bfaa:	aa06      	add	r2, sp, #24
 801bfac:	2300      	movs	r3, #0
 801bfae:	f802 3d01 	strb.w	r3, [r2, #-1]!
  HAL_I2C_Mem_Read(&hi2c1, DeviceAddr, Reg, I2C_MEMADD_SIZE_8BIT, &read_value, 1, 0x100);
 801bfb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 801bfb6:	9302      	str	r3, [sp, #8]
 801bfb8:	2301      	movs	r3, #1
 801bfba:	e88d 000c 	stmia.w	sp, {r2, r3}
 801bfbe:	460a      	mov	r2, r1
 801bfc0:	4601      	mov	r1, r0
 801bfc2:	4804      	ldr	r0, [pc, #16]	; (801bfd4 <TS_IO_Read+0x2c>)
 801bfc4:	f7e6 fc54 	bl	8002870 <HAL_I2C_Mem_Read>

  return read_value;
}
 801bfc8:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801bfcc:	b007      	add	sp, #28
 801bfce:	f85d fb04 	ldr.w	pc, [sp], #4
 801bfd2:	bf00      	nop
 801bfd4:	20095768 	.word	0x20095768

0801bfd8 <TS_ReadID>:
  HAL_I2C_Mem_Write(&hi2c1, DeviceAddr, (uint8_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x100);
  if(status != HAL_OK) Error();
}

uint8_t TS_ReadID(uint8_t DeviceAddr)
{
 801bfd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 801bfda:	2300      	movs	r3, #0
{
 801bfdc:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 801bfde:	f88d 3007 	strb.w	r3, [sp, #7]
 801bfe2:	2403      	movs	r4, #3
  uint8_t nbReadAttempts = 0;
  int8_t bFoundDevice = 0;

  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
  {
    ucReadId = TS_IO_Read(DeviceAddr, ID_G_CIPHER);
 801bfe4:	21a3      	movs	r1, #163	; 0xa3
 801bfe6:	4628      	mov	r0, r5
 801bfe8:	f7ff ffde 	bl	801bfa8 <TS_IO_Read>
 801bfec:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == CHIP_ID)
 801bff0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801bff4:	3c01      	subs	r4, #1
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801bff6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    if(ucReadId == CHIP_ID)
 801bffa:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801bffc:	d001      	beq.n	801c002 <TS_ReadID+0x2a>
 801bffe:	2b0a      	cmp	r3, #10
 801c000:	d1f0      	bne.n	801bfe4 <TS_ReadID+0xc>
    {
      bFoundDevice = 1;
    }
  }
  return (ucReadId);
 801c002:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 801c006:	b003      	add	sp, #12
 801c008:	bd30      	pop	{r4, r5, pc}

0801c00a <Touch_Ini>:

void Touch_Ini(void)
{
 801c00a:	b508      	push	{r3, lr}
	if(TS_ReadID(TS_I2C_ADDRESS) != CHIP_ID) Error();
 801c00c:	2070      	movs	r0, #112	; 0x70
 801c00e:	f7ff ffe3 	bl	801bfd8 <TS_ReadID>
  HAL_Delay(200);
 801c012:	20c8      	movs	r0, #200	; 0xc8
}
 801c014:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(200);
 801c018:	f7e5 b808 	b.w	800102c <HAL_Delay>

0801c01c <TS_Get_XY1>:

void TS_Get_XY1(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t coord = 0x0000;

	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801c01e:	b2c5      	uxtb	r5, r0
{
 801c020:	460e      	mov	r6, r1
	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801c022:	4628      	mov	r0, r5
 801c024:	2103      	movs	r1, #3
{
 801c026:	4617      	mov	r7, r2
	coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0xFF00;
 801c028:	f7ff ffbe 	bl	801bfa8 <TS_IO_Read>
 801c02c:	4c10      	ldr	r4, [pc, #64]	; (801c070 <TS_Get_XY1+0x54>)
 801c02e:	0200      	lsls	r0, r0, #8
 801c030:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801c032:	2104      	movs	r1, #4
 801c034:	4628      	mov	r0, r5
 801c036:	f7ff ffb7 	bl	801bfa8 <TS_IO_Read>
 801c03a:	8823      	ldrh	r3, [r4, #0]
 801c03c:	4318      	orrs	r0, r3
	
	if (Orientation90)
	{
//		*Y = (uint16_t)((X_SIZE_Touch - coord) * TS_Callib_x);
		*Y = (X_SIZE_Touch - coord) * TS_Callib_x;
 801c03e:	4b0d      	ldr	r3, [pc, #52]	; (801c074 <TS_Get_XY1+0x58>)
 801c040:	881b      	ldrh	r3, [r3, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801c042:	b280      	uxth	r0, r0
 801c044:	8020      	strh	r0, [r4, #0]
		*Y = (X_SIZE_Touch - coord) * TS_Callib_x;
 801c046:	1a18      	subs	r0, r3, r0
 801c048:	8038      	strh	r0, [r7, #0]
	else{
//		*X = (uint16_t)(coord * TS_Callib_x);
		*X = coord * TS_Callib_x;
	}
	
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_YH) << 8) & 0xFF00;
 801c04a:	2105      	movs	r1, #5
 801c04c:	4628      	mov	r0, r5
 801c04e:	f7ff ffab 	bl	801bfa8 <TS_IO_Read>
 801c052:	0200      	lsls	r0, r0, #8
 801c054:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801c056:	2106      	movs	r1, #6
 801c058:	4628      	mov	r0, r5
 801c05a:	f7ff ffa5 	bl	801bfa8 <TS_IO_Read>
 801c05e:	8823      	ldrh	r3, [r4, #0]
 801c060:	4318      	orrs	r0, r3
	
		if (Orientation90)
	{
//		*X = (uint16_t)(coord * TS_Callib_y);
		*X = coord * TS_Callib_y;
		temporary_x = coord;
 801c062:	4b05      	ldr	r3, [pc, #20]	; (801c078 <TS_Get_XY1+0x5c>)
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801c064:	b280      	uxth	r0, r0
		*X = coord * TS_Callib_y;
 801c066:	8030      	strh	r0, [r6, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801c068:	8020      	strh	r0, [r4, #0]
		temporary_x = coord;
 801c06a:	8018      	strh	r0, [r3, #0]
 801c06c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c06e:	bf00      	nop
 801c070:	20009cfa 	.word	0x20009cfa
 801c074:	20000eb2 	.word	0x20000eb2
 801c078:	20009cfc 	.word	0x20009cfc

0801c07c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 801c07c:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 801c07e:	2301      	movs	r3, #1
 801c080:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 801c084:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801c088:	2b01      	cmp	r3, #1
 801c08a:	d10e      	bne.n	801c0aa <BSP_SD_Init+0x2e>
  sd_state = HAL_SD_Init(&hsd1);
 801c08c:	4808      	ldr	r0, [pc, #32]	; (801c0b0 <BSP_SD_Init+0x34>)
 801c08e:	f7e9 f9fb 	bl	8005488 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 801c092:	b938      	cbnz	r0, 801c0a4 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801c094:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801c098:	4805      	ldr	r0, [pc, #20]	; (801c0b0 <BSP_SD_Init+0x34>)
 801c09a:	f7e9 f971 	bl	8005380 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 801c09e:	3000      	adds	r0, #0
 801c0a0:	bf18      	it	ne
 801c0a2:	2001      	movne	r0, #1
}
 801c0a4:	b003      	add	sp, #12
 801c0a6:	f85d fb04 	ldr.w	pc, [sp], #4
    return MSD_ERROR_SD_NOT_PRESENT;
 801c0aa:	2002      	movs	r0, #2
 801c0ac:	e7fa      	b.n	801c0a4 <BSP_SD_Init+0x28>
 801c0ae:	bf00      	nop
 801c0b0:	20095808 	.word	0x20095808

0801c0b4 <BSP_SD_ReadBlocks_DMA>:
{
 801c0b4:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801c0b6:	4613      	mov	r3, r2
 801c0b8:	460a      	mov	r2, r1
 801c0ba:	4601      	mov	r1, r0
 801c0bc:	4803      	ldr	r0, [pc, #12]	; (801c0cc <BSP_SD_ReadBlocks_DMA+0x18>)
 801c0be:	f7e8 fd97 	bl	8004bf0 <HAL_SD_ReadBlocks_DMA>
}
 801c0c2:	3000      	adds	r0, #0
 801c0c4:	bf18      	it	ne
 801c0c6:	2001      	movne	r0, #1
 801c0c8:	bd08      	pop	{r3, pc}
 801c0ca:	bf00      	nop
 801c0cc:	20095808 	.word	0x20095808

0801c0d0 <BSP_SD_WriteBlocks_DMA>:
{
 801c0d0:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801c0d2:	4613      	mov	r3, r2
 801c0d4:	460a      	mov	r2, r1
 801c0d6:	4601      	mov	r1, r0
 801c0d8:	4803      	ldr	r0, [pc, #12]	; (801c0e8 <BSP_SD_WriteBlocks_DMA+0x18>)
 801c0da:	f7e8 fdfb 	bl	8004cd4 <HAL_SD_WriteBlocks_DMA>
}
 801c0de:	3000      	adds	r0, #0
 801c0e0:	bf18      	it	ne
 801c0e2:	2001      	movne	r0, #1
 801c0e4:	bd08      	pop	{r3, pc}
 801c0e6:	bf00      	nop
 801c0e8:	20095808 	.word	0x20095808

0801c0ec <BSP_SD_GetCardState>:
{
 801c0ec:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801c0ee:	4803      	ldr	r0, [pc, #12]	; (801c0fc <BSP_SD_GetCardState+0x10>)
 801c0f0:	f7e9 fa03 	bl	80054fa <HAL_SD_GetCardState>
}
 801c0f4:	3804      	subs	r0, #4
 801c0f6:	bf18      	it	ne
 801c0f8:	2001      	movne	r0, #1
 801c0fa:	bd08      	pop	{r3, pc}
 801c0fc:	20095808 	.word	0x20095808

0801c100 <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801c100:	4601      	mov	r1, r0
 801c102:	4801      	ldr	r0, [pc, #4]	; (801c108 <BSP_SD_GetCardInfo+0x8>)
 801c104:	f7e9 b92a 	b.w	800535c <HAL_SD_GetCardInfo>
 801c108:	20095808 	.word	0x20095808

0801c10c <BSP_SD_WriteCpltCallback>:
 801c10c:	4770      	bx	lr

0801c10e <HAL_SD_TxCpltCallback>:
{
 801c10e:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 801c110:	f7ff fffc 	bl	801c10c <BSP_SD_WriteCpltCallback>
 801c114:	bd08      	pop	{r3, pc}

0801c116 <BSP_SD_ReadCpltCallback>:
{
 801c116:	4770      	bx	lr

0801c118 <HAL_SD_RxCpltCallback>:
{
 801c118:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 801c11a:	f7ff fffc 	bl	801c116 <BSP_SD_ReadCpltCallback>
 801c11e:	bd08      	pop	{r3, pc}

0801c120 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 801c120:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801c122:	4903      	ldr	r1, [pc, #12]	; (801c130 <MX_FATFS_Init+0x10>)
 801c124:	4803      	ldr	r0, [pc, #12]	; (801c134 <MX_FATFS_Init+0x14>)
 801c126:	f7ed fc51 	bl	80099cc <FATFS_LinkDriver>
 801c12a:	4b03      	ldr	r3, [pc, #12]	; (801c138 <MX_FATFS_Init+0x18>)
 801c12c:	7018      	strb	r0, [r3, #0]
 801c12e:	bd08      	pop	{r3, pc}
 801c130:	20093685 	.word	0x20093685
 801c134:	08031de4 	.word	0x08031de4
 801c138:	20093684 	.word	0x20093684

0801c13c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 801c13c:	2000      	movs	r0, #0
 801c13e:	4770      	bx	lr

0801c140 <TFT_FillRectangle_DMA>:
    }
}

void TFT_FillRectangle_DMA(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
  if(x1>x2) swap(x1,x2);
 801c140:	4290      	cmp	r0, r2
{
 801c142:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c146:	461d      	mov	r5, r3
  if(x1>x2) swap(x1,x2);
 801c148:	bf88      	it	hi
 801c14a:	4603      	movhi	r3, r0
{
 801c14c:	4680      	mov	r8, r0
  if(x1>x2) swap(x1,x2);
 801c14e:	bf84      	itt	hi
 801c150:	4690      	movhi	r8, r2
 801c152:	461a      	movhi	r2, r3
  if(y1>y2) swap(y1,y2);
 801c154:	42a9      	cmp	r1, r5
 801c156:	bf88      	it	hi
 801c158:	460b      	movhi	r3, r1
{
 801c15a:	460f      	mov	r7, r1
  if(y1>y2) swap(y1,y2);
 801c15c:	bf84      	itt	hi
 801c15e:	462f      	movhi	r7, r5
 801c160:	461d      	movhi	r5, r3

  uint32_t addr = 0;
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801c162:	4b15      	ldr	r3, [pc, #84]	; (801c1b8 <TFT_FillRectangle_DMA+0x78>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801c164:	4e15      	ldr	r6, [pc, #84]	; (801c1bc <TFT_FillRectangle_DMA+0x7c>)
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801c166:	f8d3 9060 	ldr.w	r9, [r3, #96]	; 0x60
 801c16a:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
{
 801c16e:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_R2M;
 801c172:	f44f 3340 	mov.w	r3, #196608	; 0x30000

  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801c176:	eba2 0408 	sub.w	r4, r2, r8
  hdma2d.Init.Mode = DMA2D_R2M;
 801c17a:	6073      	str	r3, [r6, #4]

  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801c17c:	4630      	mov	r0, r6
  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801c17e:	eba9 0304 	sub.w	r3, r9, r4
 801c182:	60f3      	str	r3, [r6, #12]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801c184:	f7e5 fd2a 	bl	8001bdc <HAL_DMA2D_Init>
 801c188:	b990      	cbnz	r0, 801c1b0 <TFT_FillRectangle_DMA+0x70>
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801c18a:	fb09 8207 	mla	r2, r9, r7, r8
  {
    if (HAL_DMA2D_Start(&hdma2d, color, addr, x2-x1, y2-y1) == HAL_OK)
 801c18e:	1bed      	subs	r5, r5, r7
 801c190:	9500      	str	r5, [sp, #0]
 801c192:	4623      	mov	r3, r4
 801c194:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 801c198:	4651      	mov	r1, sl
 801c19a:	4630      	mov	r0, r6
 801c19c:	f7e5 fd68 	bl	8001c70 <HAL_DMA2D_Start>
 801c1a0:	b930      	cbnz	r0, 801c1b0 <TFT_FillRectangle_DMA+0x70>
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801c1a2:	210a      	movs	r1, #10
 801c1a4:	4630      	mov	r0, r6
    }
  }
}
 801c1a6:	b003      	add	sp, #12
 801c1a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801c1ac:	f7e5 bd79 	b.w	8001ca2 <HAL_DMA2D_PollForTransfer>
}
 801c1b0:	b003      	add	sp, #12
 801c1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1b6:	bf00      	nop
 801c1b8:	20095900 	.word	0x20095900
 801c1bc:	20095b90 	.word	0x20095b90

0801c1c0 <TFT_FillScreen_DMA>:
		*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(i*2))=(uint16_t) color;
	}
}

void TFT_FillScreen_DMA(uint16_t color)
{
 801c1c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  hdma2d.Init.Mode = DMA2D_R2M;
 801c1c2:	4c10      	ldr	r4, [pc, #64]	; (801c204 <TFT_FillScreen_DMA+0x44>)
 801c1c4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 801c1c8:	4606      	mov	r6, r0
  hdma2d.Init.Mode = DMA2D_R2M;
 801c1ca:	6063      	str	r3, [r4, #4]
  hdma2d.Init.OutputOffset = 0;
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801c1cc:	2502      	movs	r5, #2
  hdma2d.Init.OutputOffset = 0;
 801c1ce:	2300      	movs	r3, #0
	
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801c1d0:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = 0;
 801c1d2:	60e3      	str	r3, [r4, #12]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801c1d4:	60a5      	str	r5, [r4, #8]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801c1d6:	f7e5 fd01 	bl	8001bdc <HAL_DMA2D_Init>
 801c1da:	b980      	cbnz	r0, 801c1fe <TFT_FillScreen_DMA+0x3e>
  {
    if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 801c1dc:	4a0a      	ldr	r2, [pc, #40]	; (801c208 <TFT_FillScreen_DMA+0x48>)
 801c1de:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801c1e0:	9300      	str	r3, [sp, #0]
 801c1e2:	6e13      	ldr	r3, [r2, #96]	; 0x60
 801c1e4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801c1e6:	4631      	mov	r1, r6
 801c1e8:	4620      	mov	r0, r4
 801c1ea:	f7e5 fd41 	bl	8001c70 <HAL_DMA2D_Start>
 801c1ee:	b930      	cbnz	r0, 801c1fe <TFT_FillScreen_DMA+0x3e>
    hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801c1f0:	4629      	mov	r1, r5
 801c1f2:	4620      	mov	r0, r4
    }
  }
}
 801c1f4:	b002      	add	sp, #8
 801c1f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801c1fa:	f7e5 bd52 	b.w	8001ca2 <HAL_DMA2D_PollForTransfer>
}
 801c1fe:	b002      	add	sp, #8
 801c200:	bd70      	pop	{r4, r5, r6, pc}
 801c202:	bf00      	nop
 801c204:	20095b90 	.word	0x20095b90
 801c208:	20095900 	.word	0x20095900

0801c20c <TFT_DrawPixel>:


//----------------------------------------
void TFT_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 801c20c:	b510      	push	{r4, lr}
	
//	tmp = Xpos;
//	Xpos = Ypos;
//	Ypos = X_SIZE - 1 - tmp;
////////////////////////////////////////////rotate -90
	if(TFT_direction == 0x00){
 801c20e:	4b14      	ldr	r3, [pc, #80]	; (801c260 <TFT_DrawPixel+0x54>)
 801c210:	781c      	ldrb	r4, [r3, #0]
 801c212:	b97c      	cbnz	r4, 801c234 <TFT_DrawPixel+0x28>

	tmp = Xpos;
	Xpos = Ypos;
	Ypos = Y_SIZE - 1 - tmp;
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801c214:	4b13      	ldr	r3, [pc, #76]	; (801c264 <TFT_DrawPixel+0x58>)
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	1a5b      	subs	r3, r3, r1
	Ypos = Y_SIZE - 1 - tmp;
 801c21a:	4913      	ldr	r1, [pc, #76]	; (801c268 <TFT_DrawPixel+0x5c>)
 801c21c:	8809      	ldrh	r1, [r1, #0]
 801c21e:	3901      	subs	r1, #1
 801c220:	1a09      	subs	r1, r1, r0
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801c222:	4812      	ldr	r0, [pc, #72]	; (801c26c <TFT_DrawPixel+0x60>)
 801c224:	6e04      	ldr	r4, [r0, #96]	; 0x60
 801c226:	b289      	uxth	r1, r1
 801c228:	fb04 3111 	mls	r1, r4, r1, r3
 801c22c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	else	if (TFT_direction == 0x01){
//////////////////////////////////////////// 0 - no rotate
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
	}else	if (TFT_direction == 0x02){
////////////////////////////////////////////rotate -180
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801c22e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 801c232:	bd10      	pop	{r4, pc}
	else	if (TFT_direction == 0x01){
 801c234:	781c      	ldrb	r4, [r3, #0]
 801c236:	2c01      	cmp	r4, #1
 801c238:	d105      	bne.n	801c246 <TFT_DrawPixel+0x3a>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 801c23a:	4c0c      	ldr	r4, [pc, #48]	; (801c26c <TFT_DrawPixel+0x60>)
 801c23c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801c23e:	fb03 0101 	mla	r1, r3, r1, r0
 801c242:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801c244:	e7f3      	b.n	801c22e <TFT_DrawPixel+0x22>
	}else	if (TFT_direction == 0x02){
 801c246:	781b      	ldrb	r3, [r3, #0]
 801c248:	2b02      	cmp	r3, #2
 801c24a:	d1f2      	bne.n	801c232 <TFT_DrawPixel+0x26>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801c24c:	4b05      	ldr	r3, [pc, #20]	; (801c264 <TFT_DrawPixel+0x58>)
 801c24e:	681b      	ldr	r3, [r3, #0]
 801c250:	1a18      	subs	r0, r3, r0
 801c252:	4b06      	ldr	r3, [pc, #24]	; (801c26c <TFT_DrawPixel+0x60>)
 801c254:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801c256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c258:	fb04 0111 	mls	r1, r4, r1, r0
 801c25c:	e7e7      	b.n	801c22e <TFT_DrawPixel+0x22>
 801c25e:	bf00      	nop
 801c260:	200056a0 	.word	0x200056a0
 801c264:	20000eb4 	.word	0x20000eb4
 801c268:	20000eba 	.word	0x20000eba
 801c26c:	20095900 	.word	0x20095900

0801c270 <TFT_DrawCircleCorner>:
{
 801c270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c274:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 801c276:	b293      	uxth	r3, r2
 801c278:	f1c3 0401 	rsb	r4, r3, #1
	int16_t ddF_y = -2 * r;
 801c27c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801c280:	b085      	sub	sp, #20
	int16_t ddF_y = -2 * r;
 801c282:	005b      	lsls	r3, r3, #1
 801c284:	b21b      	sxth	r3, r3
 801c286:	9301      	str	r3, [sp, #4]
    while (x < y) {
 801c288:	2300      	movs	r3, #0
 801c28a:	9300      	str	r3, [sp, #0]
        if (corner & 0x01) {	
 801c28c:	f00a 0301 	and.w	r3, sl, #1
{
 801c290:	4689      	mov	r9, r1
 801c292:	4616      	mov	r6, r2
	int16_t f = 1 - r;
 801c294:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801c296:	9302      	str	r3, [sp, #8]
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801c298:	b287      	uxth	r7, r0
    while (x < y) {
 801c29a:	f9bd 3000 	ldrsh.w	r3, [sp]
 801c29e:	42b3      	cmp	r3, r6
 801c2a0:	db02      	blt.n	801c2a8 <TFT_DrawCircleCorner+0x38>
}
 801c2a2:	b005      	add	sp, #20
 801c2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801c2a8:	2c00      	cmp	r4, #0
 801c2aa:	db08      	blt.n	801c2be <TFT_DrawCircleCorner+0x4e>
            ddF_y += 2;
 801c2ac:	9b01      	ldr	r3, [sp, #4]
 801c2ae:	3302      	adds	r3, #2
 801c2b0:	b29b      	uxth	r3, r3
            y--;
 801c2b2:	3e01      	subs	r6, #1
            ddF_y += 2;
 801c2b4:	b21a      	sxth	r2, r3
            f += ddF_y;
 801c2b6:	441c      	add	r4, r3
            y--;
 801c2b8:	b236      	sxth	r6, r6
            ddF_y += 2;
 801c2ba:	9201      	str	r2, [sp, #4]
            f += ddF_y;
 801c2bc:	b224      	sxth	r4, r4
 801c2be:	f8bd 5000 	ldrh.w	r5, [sp]
        if (corner & 0x01) {	
 801c2c2:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801c2c4:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801c2c8:	3403      	adds	r4, #3
 801c2ca:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801c2cc:	b1e3      	cbz	r3, 801c308 <TFT_DrawCircleCorner+0x98>
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801c2ce:	fa1f f889 	uxth.w	r8, r9
 801c2d2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c2d6:	9303      	str	r3, [sp, #12]
 801c2d8:	fa1f fb86 	uxth.w	fp, r6
 801c2dc:	f108 3eff 	add.w	lr, r8, #4294967295
 801c2e0:	ebae 0e05 	sub.w	lr, lr, r5
 801c2e4:	eba7 000b 	sub.w	r0, r7, fp
 801c2e8:	461a      	mov	r2, r3
 801c2ea:	fa1f f18e 	uxth.w	r1, lr
 801c2ee:	b280      	uxth	r0, r0
 801c2f0:	f7ff ff8c 	bl	801c20c <TFT_DrawPixel>
			TFT_DrawPixel(x0 - x, y0 - y, color);
 801c2f4:	1e78      	subs	r0, r7, #1
 801c2f6:	9b03      	ldr	r3, [sp, #12]
 801c2f8:	eba8 010b 	sub.w	r1, r8, fp
 801c2fc:	1b40      	subs	r0, r0, r5
 801c2fe:	461a      	mov	r2, r3
 801c300:	b289      	uxth	r1, r1
 801c302:	b280      	uxth	r0, r0
 801c304:	f7ff ff82 	bl	801c20c <TFT_DrawPixel>
        if (corner & 0x02) {	
 801c308:	f01a 0f02 	tst.w	sl, #2
 801c30c:	d01a      	beq.n	801c344 <TFT_DrawCircleCorner+0xd4>
			TFT_DrawPixel(x0 + x, y0 - y, color);
 801c30e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c312:	9303      	str	r3, [sp, #12]
 801c314:	fa1f f889 	uxth.w	r8, r9
 801c318:	fa1f fb86 	uxth.w	fp, r6
 801c31c:	1c78      	adds	r0, r7, #1
 801c31e:	eba8 010b 	sub.w	r1, r8, fp
 801c322:	4428      	add	r0, r5
 801c324:	461a      	mov	r2, r3
 801c326:	b289      	uxth	r1, r1
 801c328:	b280      	uxth	r0, r0
 801c32a:	f7ff ff6f 	bl	801c20c <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 - x, color);
 801c32e:	f108 31ff 	add.w	r1, r8, #4294967295
 801c332:	9b03      	ldr	r3, [sp, #12]
 801c334:	1b49      	subs	r1, r1, r5
 801c336:	eb07 000b 	add.w	r0, r7, fp
 801c33a:	461a      	mov	r2, r3
 801c33c:	b289      	uxth	r1, r1
 801c33e:	b280      	uxth	r0, r0
 801c340:	f7ff ff64 	bl	801c20c <TFT_DrawPixel>
		if (corner & 0x04) {	
 801c344:	f01a 0f04 	tst.w	sl, #4
 801c348:	d01a      	beq.n	801c380 <TFT_DrawCircleCorner+0x110>
			TFT_DrawPixel(x0 + x, y0 + y, color);
 801c34a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c34e:	9303      	str	r3, [sp, #12]
 801c350:	fa1f f889 	uxth.w	r8, r9
 801c354:	fa1f fb86 	uxth.w	fp, r6
 801c358:	1c78      	adds	r0, r7, #1
 801c35a:	eb08 010b 	add.w	r1, r8, fp
 801c35e:	4428      	add	r0, r5
 801c360:	461a      	mov	r2, r3
 801c362:	b289      	uxth	r1, r1
 801c364:	b280      	uxth	r0, r0
 801c366:	f7ff ff51 	bl	801c20c <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 + x, color);
 801c36a:	f108 0101 	add.w	r1, r8, #1
 801c36e:	9b03      	ldr	r3, [sp, #12]
 801c370:	4429      	add	r1, r5
 801c372:	eb07 000b 	add.w	r0, r7, fp
 801c376:	461a      	mov	r2, r3
 801c378:	b289      	uxth	r1, r1
 801c37a:	b280      	uxth	r0, r0
 801c37c:	f7ff ff46 	bl	801c20c <TFT_DrawPixel>
        if (corner & 0x08) {	
 801c380:	f01a 0f08 	tst.w	sl, #8
 801c384:	d01a      	beq.n	801c3bc <TFT_DrawCircleCorner+0x14c>
			TFT_DrawPixel(x0 - x, y0 + y, color);
 801c386:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c38a:	9303      	str	r3, [sp, #12]
 801c38c:	fa1f fb89 	uxth.w	fp, r9
 801c390:	fa1f f886 	uxth.w	r8, r6
 801c394:	1e78      	subs	r0, r7, #1
 801c396:	eb0b 0108 	add.w	r1, fp, r8
 801c39a:	1b40      	subs	r0, r0, r5
 801c39c:	461a      	mov	r2, r3
 801c39e:	b289      	uxth	r1, r1
 801c3a0:	b280      	uxth	r0, r0
 801c3a2:	f7ff ff33 	bl	801c20c <TFT_DrawPixel>
			TFT_DrawPixel(x0 - y, y0 + x, color);
 801c3a6:	f10b 0101 	add.w	r1, fp, #1
 801c3aa:	9b03      	ldr	r3, [sp, #12]
 801c3ac:	4429      	add	r1, r5
 801c3ae:	eba7 0008 	sub.w	r0, r7, r8
 801c3b2:	461a      	mov	r2, r3
 801c3b4:	b289      	uxth	r1, r1
 801c3b6:	b280      	uxth	r0, r0
 801c3b8:	f7ff ff28 	bl	801c20c <TFT_DrawPixel>
 801c3bc:	9b00      	ldr	r3, [sp, #0]
 801c3be:	3301      	adds	r3, #1
 801c3c0:	9300      	str	r3, [sp, #0]
 801c3c2:	e76a      	b.n	801c29a <TFT_DrawCircleCorner+0x2a>

0801c3c4 <TFT_DrawCircle>:
{
 801c3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801c3c8:	b295      	uxth	r5, r2
{
 801c3ca:	b089      	sub	sp, #36	; 0x24
 801c3cc:	4690      	mov	r8, r2
	int16_t f = 1 - r;
 801c3ce:	f1c5 0201 	rsb	r2, r5, #1
 801c3d2:	b212      	sxth	r2, r2
 801c3d4:	9201      	str	r2, [sp, #4]
	int16_t ddF_y = -2 * r;
 801c3d6:	ebc5 32c5 	rsb	r2, r5, r5, lsl #15
    TFT_DrawPixel(x0, y0 + r, color);
 801c3da:	b28f      	uxth	r7, r1
	int16_t ddF_y = -2 * r;
 801c3dc:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801c3de:	b29c      	uxth	r4, r3
 801c3e0:	b286      	uxth	r6, r0
	int16_t ddF_y = -2 * r;
 801c3e2:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801c3e4:	19e9      	adds	r1, r5, r7
	int16_t ddF_y = -2 * r;
 801c3e6:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801c3e8:	b289      	uxth	r1, r1
 801c3ea:	4622      	mov	r2, r4
 801c3ec:	4630      	mov	r0, r6
 801c3ee:	f7ff ff0d 	bl	801c20c <TFT_DrawPixel>
    TFT_DrawPixel(x0, y0 - r, color);
 801c3f2:	1b79      	subs	r1, r7, r5
 801c3f4:	4622      	mov	r2, r4
 801c3f6:	b289      	uxth	r1, r1
 801c3f8:	4630      	mov	r0, r6
 801c3fa:	f7ff ff07 	bl	801c20c <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801c3fe:	19a8      	adds	r0, r5, r6
 801c400:	4622      	mov	r2, r4
 801c402:	4639      	mov	r1, r7
 801c404:	b280      	uxth	r0, r0
 801c406:	f7ff ff01 	bl	801c20c <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801c40a:	1b70      	subs	r0, r6, r5
 801c40c:	4622      	mov	r2, r4
 801c40e:	4639      	mov	r1, r7
 801c410:	b280      	uxth	r0, r0
 801c412:	f7ff fefb 	bl	801c20c <TFT_DrawPixel>
    while (x < y) {
 801c416:	2300      	movs	r3, #0
 801c418:	9302      	str	r3, [sp, #8]
 801c41a:	1c73      	adds	r3, r6, #1
 801c41c:	9304      	str	r3, [sp, #16]
 801c41e:	1e73      	subs	r3, r6, #1
 801c420:	9305      	str	r3, [sp, #20]
 801c422:	1c7b      	adds	r3, r7, #1
 801c424:	9306      	str	r3, [sp, #24]
 801c426:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c42a:	4543      	cmp	r3, r8
 801c42c:	db02      	blt.n	801c434 <TFT_DrawCircle+0x70>
}
 801c42e:	b009      	add	sp, #36	; 0x24
 801c430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801c434:	9b01      	ldr	r3, [sp, #4]
 801c436:	2b00      	cmp	r3, #0
 801c438:	db0c      	blt.n	801c454 <TFT_DrawCircle+0x90>
            ddF_y += 2;
 801c43a:	9b03      	ldr	r3, [sp, #12]
 801c43c:	3302      	adds	r3, #2
 801c43e:	b29b      	uxth	r3, r3
 801c440:	b21a      	sxth	r2, r3
 801c442:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801c444:	9a01      	ldr	r2, [sp, #4]
 801c446:	4413      	add	r3, r2
            y--;
 801c448:	f108 38ff 	add.w	r8, r8, #4294967295
            f += ddF_y;
 801c44c:	b21b      	sxth	r3, r3
            y--;
 801c44e:	fa0f f888 	sxth.w	r8, r8
            f += ddF_y;
 801c452:	9301      	str	r3, [sp, #4]
 801c454:	f8bd 9008 	ldrh.w	r9, [sp, #8]
        f += ddF_x;
 801c458:	9b01      	ldr	r3, [sp, #4]
 801c45a:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 801c45e:	3303      	adds	r3, #3
 801c460:	b21b      	sxth	r3, r3
 801c462:	9301      	str	r3, [sp, #4]
 801c464:	9b04      	ldr	r3, [sp, #16]
        TFT_DrawPixel(x0 + x, y0 + y, color);
 801c466:	fa1f f588 	uxth.w	r5, r8
 801c46a:	444b      	add	r3, r9
 801c46c:	eb07 0b05 	add.w	fp, r7, r5
 801c470:	b29b      	uxth	r3, r3
 801c472:	fa1f fb8b 	uxth.w	fp, fp
 801c476:	4659      	mov	r1, fp
 801c478:	4618      	mov	r0, r3
 801c47a:	4622      	mov	r2, r4
 801c47c:	9307      	str	r3, [sp, #28]
 801c47e:	f7ff fec5 	bl	801c20c <TFT_DrawPixel>
 801c482:	9b05      	ldr	r3, [sp, #20]
 801c484:	eba3 0a09 	sub.w	sl, r3, r9
 801c488:	fa1f fa8a 	uxth.w	sl, sl
        TFT_DrawPixel(x0 - x, y0 + y, color);
 801c48c:	4659      	mov	r1, fp
 801c48e:	4650      	mov	r0, sl
 801c490:	4622      	mov	r2, r4
 801c492:	f7ff febb 	bl	801c20c <TFT_DrawPixel>
        TFT_DrawPixel(x0 + x, y0 - y, color);
 801c496:	eba7 0b05 	sub.w	fp, r7, r5
 801c49a:	9b07      	ldr	r3, [sp, #28]
 801c49c:	fa1f fb8b 	uxth.w	fp, fp
 801c4a0:	4618      	mov	r0, r3
 801c4a2:	4659      	mov	r1, fp
 801c4a4:	4622      	mov	r2, r4
 801c4a6:	f7ff feb1 	bl	801c20c <TFT_DrawPixel>
        TFT_DrawPixel(x0 - x, y0 - y, color);
 801c4aa:	4659      	mov	r1, fp
 801c4ac:	4650      	mov	r0, sl
 801c4ae:	4622      	mov	r2, r4
 801c4b0:	f7ff feac 	bl	801c20c <TFT_DrawPixel>
 801c4b4:	9b06      	ldr	r3, [sp, #24]
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801c4b6:	eb06 0a05 	add.w	sl, r6, r5
 801c4ba:	eb09 0b03 	add.w	fp, r9, r3
 801c4be:	fa1f fa8a 	uxth.w	sl, sl
 801c4c2:	fa1f fb8b 	uxth.w	fp, fp
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801c4c6:	1b75      	subs	r5, r6, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801c4c8:	4622      	mov	r2, r4
 801c4ca:	4659      	mov	r1, fp
 801c4cc:	4650      	mov	r0, sl
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801c4ce:	b2ad      	uxth	r5, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801c4d0:	f7ff fe9c 	bl	801c20c <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801c4d4:	4622      	mov	r2, r4
 801c4d6:	4659      	mov	r1, fp
 801c4d8:	4628      	mov	r0, r5
 801c4da:	f7ff fe97 	bl	801c20c <TFT_DrawPixel>
 801c4de:	1e7b      	subs	r3, r7, #1
 801c4e0:	eba3 0909 	sub.w	r9, r3, r9
 801c4e4:	fa1f f989 	uxth.w	r9, r9
        TFT_DrawPixel(x0 + y, y0 - x, color);
 801c4e8:	4622      	mov	r2, r4
 801c4ea:	4649      	mov	r1, r9
 801c4ec:	4650      	mov	r0, sl
 801c4ee:	f7ff fe8d 	bl	801c20c <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 - x, color);
 801c4f2:	4622      	mov	r2, r4
 801c4f4:	4649      	mov	r1, r9
 801c4f6:	4628      	mov	r0, r5
 801c4f8:	f7ff fe88 	bl	801c20c <TFT_DrawPixel>
 801c4fc:	9b02      	ldr	r3, [sp, #8]
 801c4fe:	3301      	adds	r3, #1
 801c500:	9302      	str	r3, [sp, #8]
 801c502:	e790      	b.n	801c426 <TFT_DrawCircle+0x62>

0801c504 <TFT_DrawLine>:


int16_t prev_x=0, prev_y=0; 
//----------------------------------------
void TFT_DrawLine(uint16_t x0, uint16_t y0,	uint16_t x1, uint16_t y1, uint16_t color)
{
 801c504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c508:	b085      	sub	sp, #20
 801c50a:	469a      	mov	sl, r3
	int16_t dx, dy, sx, sy, err, e2;
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801c50c:	4290      	cmp	r0, r2
{
 801c50e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801c512:	9301      	str	r3, [sp, #4]
 801c514:	4607      	mov	r7, r0
 801c516:	460e      	mov	r6, r1
 801c518:	4693      	mov	fp, r2
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801c51a:	d211      	bcs.n	801c540 <TFT_DrawLine+0x3c>
 801c51c:	eba2 0800 	sub.w	r8, r2, r0
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801c520:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801c522:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801c526:	d341      	bcc.n	801c5ac <TFT_DrawLine+0xa8>
	sx = (x0 < x1) ? 1 : -1; 
 801c528:	455f      	cmp	r7, fp
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801c52a:	eba6 050a 	sub.w	r5, r6, sl
 801c52e:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801c530:	bf2c      	ite	cs
 801c532:	f04f 39ff 	movcs.w	r9, #4294967295
 801c536:	f04f 0901 	movcc.w	r9, #1
	sy = (y0 < y1) ? 1 : -1; 
 801c53a:	f04f 33ff 	mov.w	r3, #4294967295
 801c53e:	e00b      	b.n	801c558 <TFT_DrawLine+0x54>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801c540:	eba0 0802 	sub.w	r8, r0, r2
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801c544:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801c546:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801c54a:	d2ed      	bcs.n	801c528 <TFT_DrawLine+0x24>
 801c54c:	ebaa 0501 	sub.w	r5, sl, r1
 801c550:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801c552:	f04f 39ff 	mov.w	r9, #4294967295
	sy = (y0 < y1) ? 1 : -1; 
 801c556:	2301      	movs	r3, #1
	err = ((dx > dy) ? dx : -dy) / 2; 
 801c558:	45a8      	cmp	r8, r5
 801c55a:	f04f 0402 	mov.w	r4, #2
 801c55e:	dd20      	ble.n	801c5a2 <TFT_DrawLine+0x9e>
 801c560:	fb98 f4f4 	sdiv	r4, r8, r4

		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 801c564:	f1c8 0200 	rsb	r2, r8, #0
 801c568:	9202      	str	r2, [sp, #8]
		TFT_DrawPixel(x0, y0, color); 
 801c56a:	9a01      	ldr	r2, [sp, #4]
 801c56c:	9303      	str	r3, [sp, #12]
 801c56e:	4631      	mov	r1, r6
 801c570:	4638      	mov	r0, r7
 801c572:	f7ff fe4b 	bl	801c20c <TFT_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 801c576:	455f      	cmp	r7, fp
 801c578:	9b03      	ldr	r3, [sp, #12]
 801c57a:	d101      	bne.n	801c580 <TFT_DrawLine+0x7c>
 801c57c:	4556      	cmp	r6, sl
 801c57e:	d01b      	beq.n	801c5b8 <TFT_DrawLine+0xb4>
		if (e2 > -dx) {
 801c580:	9a02      	ldr	r2, [sp, #8]
 801c582:	4294      	cmp	r4, r2
			err -= dy;
 801c584:	bfc1      	itttt	gt
 801c586:	1b62      	subgt	r2, r4, r5
			x0 += sx;
 801c588:	444f      	addgt	r7, r9
			err -= dy;
 801c58a:	b212      	sxthgt	r2, r2
			x0 += sx;
 801c58c:	b2bf      	uxthgt	r7, r7
 801c58e:	bfd8      	it	le
 801c590:	4622      	movle	r2, r4
		} 
		if (e2 < dy) {
 801c592:	42ac      	cmp	r4, r5
 801c594:	da03      	bge.n	801c59e <TFT_DrawLine+0x9a>
			err += dx;
 801c596:	4442      	add	r2, r8
			y0 += sy;
 801c598:	441e      	add	r6, r3
			err += dx;
 801c59a:	b212      	sxth	r2, r2
			y0 += sy;
 801c59c:	b2b6      	uxth	r6, r6
	sy = (y0 < y1) ? 1 : -1; 
 801c59e:	4614      	mov	r4, r2
 801c5a0:	e7e3      	b.n	801c56a <TFT_DrawLine+0x66>
	err = ((dx > dy) ? dx : -dy) / 2; 
 801c5a2:	fb95 f4f4 	sdiv	r4, r5, r4
 801c5a6:	4264      	negs	r4, r4
 801c5a8:	b224      	sxth	r4, r4
 801c5aa:	e7db      	b.n	801c564 <TFT_DrawLine+0x60>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801c5ac:	ebaa 0501 	sub.w	r5, sl, r1
 801c5b0:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801c5b2:	f04f 0901 	mov.w	r9, #1
 801c5b6:	e7ce      	b.n	801c556 <TFT_DrawLine+0x52>
		} 
	}
}
 801c5b8:	b005      	add	sp, #20
 801c5ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c5be <TFT_FillRectangle>:
{
 801c5be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801c5c2:	f8bd 8020 	ldrh.w	r8, [sp, #32]
{
 801c5c6:	4606      	mov	r6, r0
 801c5c8:	460c      	mov	r4, r1
 801c5ca:	4617      	mov	r7, r2
 801c5cc:	461d      	mov	r5, r3
	for (; y0 <= y1; y0++) {
 801c5ce:	42ac      	cmp	r4, r5
 801c5d0:	d902      	bls.n	801c5d8 <TFT_FillRectangle+0x1a>
}
 801c5d2:	b002      	add	sp, #8
 801c5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801c5d8:	4623      	mov	r3, r4
 801c5da:	4621      	mov	r1, r4
 801c5dc:	f8cd 8000 	str.w	r8, [sp]
 801c5e0:	463a      	mov	r2, r7
 801c5e2:	4630      	mov	r0, r6
	for (; y0 <= y1; y0++) {
 801c5e4:	3401      	adds	r4, #1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801c5e6:	f7ff ff8d 	bl	801c504 <TFT_DrawLine>
	for (; y0 <= y1; y0++) {
 801c5ea:	b2a4      	uxth	r4, r4
 801c5ec:	e7ef      	b.n	801c5ce <TFT_FillRectangle+0x10>

0801c5ee <TFT_DrawRectangle>:
{
 801c5ee:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801c5f2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801c5f6:	9400      	str	r4, [sp, #0]
{
 801c5f8:	461f      	mov	r7, r3
 801c5fa:	4605      	mov	r5, r0
 801c5fc:	4688      	mov	r8, r1
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801c5fe:	460b      	mov	r3, r1
{
 801c600:	4616      	mov	r6, r2
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801c602:	f7ff ff7f 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(x0, y0, x0, y1, color);	/* Left */
 801c606:	463b      	mov	r3, r7
 801c608:	462a      	mov	r2, r5
 801c60a:	4641      	mov	r1, r8
 801c60c:	4628      	mov	r0, r5
 801c60e:	9400      	str	r4, [sp, #0]
 801c610:	f7ff ff78 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(x1, y0, x1, y1, color);	/* Right */
 801c614:	463b      	mov	r3, r7
 801c616:	4632      	mov	r2, r6
 801c618:	4641      	mov	r1, r8
 801c61a:	4630      	mov	r0, r6
 801c61c:	9400      	str	r4, [sp, #0]
 801c61e:	f7ff ff71 	bl	801c504 <TFT_DrawLine>
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801c622:	463b      	mov	r3, r7
 801c624:	4632      	mov	r2, r6
 801c626:	4639      	mov	r1, r7
 801c628:	4628      	mov	r0, r5
 801c62a:	9408      	str	r4, [sp, #32]
}
 801c62c:	b002      	add	sp, #8
 801c62e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801c632:	f7ff bf67 	b.w	801c504 <TFT_DrawLine>

0801c636 <TFT_DrawFilledCircle>:
{
 801c636:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801c63a:	b297      	uxth	r7, r2
{
 801c63c:	4691      	mov	r9, r2
	int16_t ddF_y = -2 * r;
 801c63e:	ebc7 32c7 	rsb	r2, r7, r7, lsl #15
{
 801c642:	b089      	sub	sp, #36	; 0x24
    TFT_DrawPixel(x0, y0 + r, color);
 801c644:	b28d      	uxth	r5, r1
	int16_t ddF_y = -2 * r;
 801c646:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801c648:	b29e      	uxth	r6, r3
 801c64a:	fa1f f880 	uxth.w	r8, r0
	int16_t ddF_y = -2 * r;
 801c64e:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801c650:	1979      	adds	r1, r7, r5
	int16_t ddF_y = -2 * r;
 801c652:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801c654:	b289      	uxth	r1, r1
 801c656:	4632      	mov	r2, r6
 801c658:	4640      	mov	r0, r8
 801c65a:	f7ff fdd7 	bl	801c20c <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801c65e:	eb07 0a08 	add.w	sl, r7, r8
    TFT_DrawPixel(x0, y0 - r, color);
 801c662:	1be9      	subs	r1, r5, r7
	int16_t f = 1 - r;
 801c664:	f1c7 0401 	rsb	r4, r7, #1
    TFT_DrawPixel(x0, y0 - r, color);
 801c668:	4632      	mov	r2, r6
 801c66a:	b289      	uxth	r1, r1
 801c66c:	4640      	mov	r0, r8
    TFT_DrawPixel(x0 + r, y0, color);
 801c66e:	fa1f fa8a 	uxth.w	sl, sl
    TFT_DrawPixel(x0 - r, y0, color);
 801c672:	eba8 0707 	sub.w	r7, r8, r7
    TFT_DrawPixel(x0, y0 - r, color);
 801c676:	f7ff fdc9 	bl	801c20c <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801c67a:	b2bf      	uxth	r7, r7
    TFT_DrawPixel(x0 + r, y0, color);
 801c67c:	4632      	mov	r2, r6
 801c67e:	4629      	mov	r1, r5
 801c680:	4650      	mov	r0, sl
 801c682:	f7ff fdc3 	bl	801c20c <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801c686:	4632      	mov	r2, r6
 801c688:	4629      	mov	r1, r5
 801c68a:	4638      	mov	r0, r7
 801c68c:	f7ff fdbe 	bl	801c20c <TFT_DrawPixel>
    TFT_DrawLine(x0 - r, y0, x0 + r, y0, color);
 801c690:	462b      	mov	r3, r5
 801c692:	9600      	str	r6, [sp, #0]
 801c694:	4652      	mov	r2, sl
 801c696:	4629      	mov	r1, r5
 801c698:	4638      	mov	r0, r7
 801c69a:	f7ff ff33 	bl	801c504 <TFT_DrawLine>
    while (x < y) {
 801c69e:	2300      	movs	r3, #0
 801c6a0:	9302      	str	r3, [sp, #8]
 801c6a2:	f108 33ff 	add.w	r3, r8, #4294967295
 801c6a6:	9305      	str	r3, [sp, #20]
 801c6a8:	f108 0301 	add.w	r3, r8, #1
 801c6ac:	9306      	str	r3, [sp, #24]
 801c6ae:	1c6b      	adds	r3, r5, #1
	int16_t f = 1 - r;
 801c6b0:	b224      	sxth	r4, r4
 801c6b2:	9307      	str	r3, [sp, #28]
    while (x < y) {
 801c6b4:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c6b8:	454b      	cmp	r3, r9
 801c6ba:	db02      	blt.n	801c6c2 <TFT_DrawFilledCircle+0x8c>
}
 801c6bc:	b009      	add	sp, #36	; 0x24
 801c6be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801c6c2:	2c00      	cmp	r4, #0
 801c6c4:	db0a      	blt.n	801c6dc <TFT_DrawFilledCircle+0xa6>
            ddF_y += 2;
 801c6c6:	9b03      	ldr	r3, [sp, #12]
 801c6c8:	3302      	adds	r3, #2
 801c6ca:	b29b      	uxth	r3, r3
            y--;
 801c6cc:	f109 39ff 	add.w	r9, r9, #4294967295
            ddF_y += 2;
 801c6d0:	b21a      	sxth	r2, r3
            f += ddF_y;
 801c6d2:	441c      	add	r4, r3
            y--;
 801c6d4:	fa0f f989 	sxth.w	r9, r9
            ddF_y += 2;
 801c6d8:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801c6da:	b224      	sxth	r4, r4
 801c6dc:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801c6e0:	9b05      	ldr	r3, [sp, #20]
 801c6e2:	9a06      	ldr	r2, [sp, #24]
        TFT_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 801c6e4:	9600      	str	r6, [sp, #0]
 801c6e6:	fa1f f789 	uxth.w	r7, r9
 801c6ea:	eba3 0b0a 	sub.w	fp, r3, sl
 801c6ee:	19eb      	adds	r3, r5, r7
 801c6f0:	fa1f fb8b 	uxth.w	fp, fp
 801c6f4:	b29b      	uxth	r3, r3
 801c6f6:	4452      	add	r2, sl
 801c6f8:	b292      	uxth	r2, r2
 801c6fa:	4619      	mov	r1, r3
 801c6fc:	4658      	mov	r0, fp
 801c6fe:	9204      	str	r2, [sp, #16]
 801c700:	f7ff ff00 	bl	801c504 <TFT_DrawLine>
        TFT_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 801c704:	1beb      	subs	r3, r5, r7
 801c706:	b29b      	uxth	r3, r3
 801c708:	465a      	mov	r2, fp
 801c70a:	4619      	mov	r1, r3
 801c70c:	9804      	ldr	r0, [sp, #16]
 801c70e:	9600      	str	r6, [sp, #0]
 801c710:	f7ff fef8 	bl	801c504 <TFT_DrawLine>
 801c714:	9b07      	ldr	r3, [sp, #28]
        TFT_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 801c716:	9600      	str	r6, [sp, #0]
 801c718:	eb08 0b07 	add.w	fp, r8, r7
 801c71c:	4453      	add	r3, sl
 801c71e:	eba8 0707 	sub.w	r7, r8, r7
 801c722:	b29b      	uxth	r3, r3
 801c724:	fa1f fb8b 	uxth.w	fp, fp
 801c728:	b2bf      	uxth	r7, r7
 801c72a:	4619      	mov	r1, r3
 801c72c:	463a      	mov	r2, r7
 801c72e:	4658      	mov	r0, fp
 801c730:	f7ff fee8 	bl	801c504 <TFT_DrawLine>
 801c734:	1e6b      	subs	r3, r5, #1
 801c736:	eba3 030a 	sub.w	r3, r3, sl
 801c73a:	b29b      	uxth	r3, r3
        TFT_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 801c73c:	4619      	mov	r1, r3
 801c73e:	9600      	str	r6, [sp, #0]
 801c740:	463a      	mov	r2, r7
 801c742:	4658      	mov	r0, fp
 801c744:	f7ff fede 	bl	801c504 <TFT_DrawLine>
 801c748:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801c74a:	eb04 044a 	add.w	r4, r4, sl, lsl #1
 801c74e:	3403      	adds	r4, #3
 801c750:	3301      	adds	r3, #1
 801c752:	b224      	sxth	r4, r4
 801c754:	9302      	str	r3, [sp, #8]
 801c756:	e7ad      	b.n	801c6b4 <TFT_DrawFilledCircle+0x7e>

0801c758 <TFT_DrawFilledCircleCorner>:
{
 801c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c75c:	4699      	mov	r9, r3
	int16_t f = 1 - r;
 801c75e:	b293      	uxth	r3, r2
 801c760:	f1c3 0601 	rsb	r6, r3, #1
	int16_t ddF_y = -2 * r;
 801c764:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801c768:	b087      	sub	sp, #28
	int16_t ddF_y = -2 * r;
 801c76a:	005b      	lsls	r3, r3, #1
 801c76c:	b21b      	sxth	r3, r3
 801c76e:	9304      	str	r3, [sp, #16]
    while (x < y) {
 801c770:	2300      	movs	r3, #0
 801c772:	9302      	str	r3, [sp, #8]
        if (corner & 0x01) {
 801c774:	f009 0301 	and.w	r3, r9, #1
{
 801c778:	9103      	str	r1, [sp, #12]
 801c77a:	4617      	mov	r7, r2
	int16_t f = 1 - r;
 801c77c:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801c77e:	9305      	str	r3, [sp, #20]
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801c780:	b284      	uxth	r4, r0
    while (x < y) {
 801c782:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c786:	42bb      	cmp	r3, r7
 801c788:	db02      	blt.n	801c790 <TFT_DrawFilledCircleCorner+0x38>
}
 801c78a:	b007      	add	sp, #28
 801c78c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801c790:	2e00      	cmp	r6, #0
 801c792:	db08      	blt.n	801c7a6 <TFT_DrawFilledCircleCorner+0x4e>
            ddF_y += 2;
 801c794:	9b04      	ldr	r3, [sp, #16]
 801c796:	3302      	adds	r3, #2
 801c798:	b29b      	uxth	r3, r3
            y--;
 801c79a:	3f01      	subs	r7, #1
            ddF_y += 2;
 801c79c:	b21a      	sxth	r2, r3
            f += ddF_y;
 801c79e:	441e      	add	r6, r3
            y--;
 801c7a0:	b23f      	sxth	r7, r7
            ddF_y += 2;
 801c7a2:	9204      	str	r2, [sp, #16]
            f += ddF_y;
 801c7a4:	b236      	sxth	r6, r6
 801c7a6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
        if (corner & 0x01) {
 801c7aa:	9b05      	ldr	r3, [sp, #20]
        f += ddF_x;
 801c7ac:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801c7b0:	3603      	adds	r6, #3
 801c7b2:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801c7b4:	b1f3      	cbz	r3, 801c7f4 <TFT_DrawFilledCircleCorner+0x9c>
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801c7b6:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801c7ba:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801c7be:	f8cd b000 	str.w	fp, [sp]
 801c7c2:	fa1f fa87 	uxth.w	sl, r7
 801c7c6:	eba8 030a 	sub.w	r3, r8, sl
 801c7ca:	1e62      	subs	r2, r4, #1
 801c7cc:	b29b      	uxth	r3, r3
 801c7ce:	1b52      	subs	r2, r2, r5
 801c7d0:	4619      	mov	r1, r3
 801c7d2:	b292      	uxth	r2, r2
 801c7d4:	4620      	mov	r0, r4
 801c7d6:	f7ff fe95 	bl	801c504 <TFT_DrawLine>
 801c7da:	f108 33ff 	add.w	r3, r8, #4294967295
 801c7de:	1b5b      	subs	r3, r3, r5
 801c7e0:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 - x, x0 - y, y0 - x, color);
 801c7e2:	eba4 020a 	sub.w	r2, r4, sl
 801c7e6:	f8cd b000 	str.w	fp, [sp]
 801c7ea:	b292      	uxth	r2, r2
 801c7ec:	4619      	mov	r1, r3
 801c7ee:	4620      	mov	r0, r4
 801c7f0:	f7ff fe88 	bl	801c504 <TFT_DrawLine>
        if (corner & 0x02) {	
 801c7f4:	f019 0f02 	tst.w	r9, #2
 801c7f8:	d01e      	beq.n	801c838 <TFT_DrawFilledCircleCorner+0xe0>
			TFT_DrawLine(x0 + x, y0 - y, x0, y0 - y, color);
 801c7fa:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801c7fe:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801c802:	f8cd b000 	str.w	fp, [sp]
 801c806:	fa1f fa87 	uxth.w	sl, r7
 801c80a:	eba8 030a 	sub.w	r3, r8, sl
 801c80e:	1c60      	adds	r0, r4, #1
 801c810:	b29b      	uxth	r3, r3
 801c812:	4428      	add	r0, r5
 801c814:	4619      	mov	r1, r3
 801c816:	4622      	mov	r2, r4
 801c818:	b280      	uxth	r0, r0
 801c81a:	f7ff fe73 	bl	801c504 <TFT_DrawLine>
 801c81e:	f108 33ff 	add.w	r3, r8, #4294967295
 801c822:	1b5b      	subs	r3, r3, r5
 801c824:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 - x, x0, y0 - x, color);
 801c826:	eb04 000a 	add.w	r0, r4, sl
 801c82a:	f8cd b000 	str.w	fp, [sp]
 801c82e:	4622      	mov	r2, r4
 801c830:	4619      	mov	r1, r3
 801c832:	b280      	uxth	r0, r0
 801c834:	f7ff fe66 	bl	801c504 <TFT_DrawLine>
		if (corner & 0x04) {
 801c838:	f019 0f04 	tst.w	r9, #4
 801c83c:	d01e      	beq.n	801c87c <TFT_DrawFilledCircleCorner+0x124>
			TFT_DrawLine(x0, y0 + y, x0 + x, y0 + y, color);
 801c83e:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801c842:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801c846:	f8cd b000 	str.w	fp, [sp]
 801c84a:	fa1f fa87 	uxth.w	sl, r7
 801c84e:	eb08 030a 	add.w	r3, r8, sl
 801c852:	1c62      	adds	r2, r4, #1
 801c854:	b29b      	uxth	r3, r3
 801c856:	442a      	add	r2, r5
 801c858:	4619      	mov	r1, r3
 801c85a:	b292      	uxth	r2, r2
 801c85c:	4620      	mov	r0, r4
 801c85e:	f7ff fe51 	bl	801c504 <TFT_DrawLine>
 801c862:	f108 0301 	add.w	r3, r8, #1
 801c866:	442b      	add	r3, r5
 801c868:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 + x, x0, y0 + x, color);
 801c86a:	eb04 000a 	add.w	r0, r4, sl
 801c86e:	f8cd b000 	str.w	fp, [sp]
 801c872:	4622      	mov	r2, r4
 801c874:	4619      	mov	r1, r3
 801c876:	b280      	uxth	r0, r0
 801c878:	f7ff fe44 	bl	801c504 <TFT_DrawLine>
        if (corner & 0x08) {
 801c87c:	f019 0f08 	tst.w	r9, #8
 801c880:	d01e      	beq.n	801c8c0 <TFT_DrawFilledCircleCorner+0x168>
			TFT_DrawLine(x0 - x, y0 + y, x0, y0 + y, color);
 801c882:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801c886:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801c88a:	f8cd b000 	str.w	fp, [sp]
 801c88e:	fa1f fa87 	uxth.w	sl, r7
 801c892:	eb08 030a 	add.w	r3, r8, sl
 801c896:	1e60      	subs	r0, r4, #1
 801c898:	b29b      	uxth	r3, r3
 801c89a:	1b40      	subs	r0, r0, r5
 801c89c:	4619      	mov	r1, r3
 801c89e:	4622      	mov	r2, r4
 801c8a0:	b280      	uxth	r0, r0
 801c8a2:	f7ff fe2f 	bl	801c504 <TFT_DrawLine>
 801c8a6:	f108 0301 	add.w	r3, r8, #1
 801c8aa:	442b      	add	r3, r5
 801c8ac:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 + x, x0 - y, y0 + x, color);
 801c8ae:	eba4 020a 	sub.w	r2, r4, sl
 801c8b2:	f8cd b000 	str.w	fp, [sp]
 801c8b6:	b292      	uxth	r2, r2
 801c8b8:	4619      	mov	r1, r3
 801c8ba:	4620      	mov	r0, r4
 801c8bc:	f7ff fe22 	bl	801c504 <TFT_DrawLine>
 801c8c0:	9b02      	ldr	r3, [sp, #8]
 801c8c2:	3301      	adds	r3, #1
 801c8c4:	9302      	str	r3, [sp, #8]
 801c8c6:	e75c      	b.n	801c782 <TFT_DrawFilledCircleCorner+0x2a>

0801c8c8 <TFT_DrawFilledRoundedRectangle>:
{
 801c8c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (x1 == x0 || y1 == y0) {
 801c8cc:	4282      	cmp	r2, r0
{
 801c8ce:	4683      	mov	fp, r0
 801c8d0:	460d      	mov	r5, r1
 801c8d2:	4692      	mov	sl, r2
 801c8d4:	461c      	mov	r4, r3
 801c8d6:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 801c8da:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	if (x1 == x0 || y1 == y0) {
 801c8de:	d06d      	beq.n	801c9bc <TFT_DrawFilledRoundedRectangle+0xf4>
 801c8e0:	428b      	cmp	r3, r1
 801c8e2:	d06b      	beq.n	801c9bc <TFT_DrawFilledRoundedRectangle+0xf4>
	if (r == 0) {
 801c8e4:	b91e      	cbnz	r6, 801c8ee <TFT_DrawFilledRoundedRectangle+0x26>
		TFT_FillRectangle(x0, y0, x1, y1, color);
 801c8e6:	f8cd 8000 	str.w	r8, [sp]
 801c8ea:	f7ff fe68 	bl	801c5be <TFT_FillRectangle>
	if (x0 > x1) {
 801c8ee:	45da      	cmp	sl, fp
 801c8f0:	bf3e      	ittt	cc
 801c8f2:	465b      	movcc	r3, fp
 801c8f4:	46d3      	movcc	fp, sl
 801c8f6:	469a      	movcc	sl, r3
	if (y0 > y1) {
 801c8f8:	42ac      	cmp	r4, r5
 801c8fa:	bf38      	it	cc
 801c8fc:	462b      	movcc	r3, r5
	if (r > ((x1 - x0) / 2)) {
 801c8fe:	ebaa 010b 	sub.w	r1, sl, fp
	if (y0 > y1) {
 801c902:	bf3c      	itt	cc
 801c904:	4625      	movcc	r5, r4
 801c906:	461c      	movcc	r4, r3
	if (r > ((x1 - x0) / 2)) {
 801c908:	2302      	movs	r3, #2
 801c90a:	fb91 f1f3 	sdiv	r1, r1, r3
 801c90e:	428e      	cmp	r6, r1
		r = (x1 - x0) / 2;
 801c910:	bfc8      	it	gt
 801c912:	b28e      	uxthgt	r6, r1
 801c914:	461a      	mov	r2, r3
	if (r > ((y1 - y0) / 2)) {
 801c916:	1b63      	subs	r3, r4, r5
 801c918:	fb93 f3f2 	sdiv	r3, r3, r2
 801c91c:	429e      	cmp	r6, r3
		r = (y1 - y0) / 2;
 801c91e:	bfc8      	it	gt
 801c920:	b29e      	uxthgt	r6, r3
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801c922:	eb0b 0706 	add.w	r7, fp, r6
 801c926:	ebaa 0906 	sub.w	r9, sl, r6
 801c92a:	b2bf      	uxth	r7, r7
 801c92c:	fa1f f989 	uxth.w	r9, r9
 801c930:	4623      	mov	r3, r4
 801c932:	4629      	mov	r1, r5
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801c934:	1ba4      	subs	r4, r4, r6
 801c936:	4435      	add	r5, r6
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801c938:	464a      	mov	r2, r9
 801c93a:	4638      	mov	r0, r7
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801c93c:	b2ad      	uxth	r5, r5
 801c93e:	b2a4      	uxth	r4, r4
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801c940:	f8cd 8000 	str.w	r8, [sp]
 801c944:	f7ff fe3b 	bl	801c5be <TFT_FillRectangle>
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801c948:	4623      	mov	r3, r4
 801c94a:	463a      	mov	r2, r7
 801c94c:	4629      	mov	r1, r5
 801c94e:	4658      	mov	r0, fp
 801c950:	f8cd 8000 	str.w	r8, [sp]
 801c954:	f7ff fe33 	bl	801c5be <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801c958:	b236      	sxth	r6, r6
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801c95a:	4623      	mov	r3, r4
 801c95c:	4652      	mov	r2, sl
 801c95e:	4629      	mov	r1, r5
 801c960:	4648      	mov	r0, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801c962:	b23f      	sxth	r7, r7
 801c964:	b22d      	sxth	r5, r5
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801c966:	f8cd 8000 	str.w	r8, [sp]
 801c96a:	f7ff fe28 	bl	801c5be <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801c96e:	fa0f f989 	sxth.w	r9, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801c972:	4632      	mov	r2, r6
 801c974:	4629      	mov	r1, r5
 801c976:	4638      	mov	r0, r7
 801c978:	f8cd 8000 	str.w	r8, [sp]
 801c97c:	2301      	movs	r3, #1
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801c97e:	3c01      	subs	r4, #1
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801c980:	f7ff feea 	bl	801c758 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801c984:	b224      	sxth	r4, r4
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801c986:	4632      	mov	r2, r6
 801c988:	4629      	mov	r1, r5
 801c98a:	4648      	mov	r0, r9
 801c98c:	f8cd 8000 	str.w	r8, [sp]
 801c990:	2302      	movs	r3, #2
 801c992:	f7ff fee1 	bl	801c758 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801c996:	4632      	mov	r2, r6
 801c998:	4621      	mov	r1, r4
 801c99a:	4648      	mov	r0, r9
 801c99c:	f8cd 8000 	str.w	r8, [sp]
 801c9a0:	2304      	movs	r3, #4
 801c9a2:	f7ff fed9 	bl	801c758 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801c9a6:	2308      	movs	r3, #8
 801c9a8:	4632      	mov	r2, r6
 801c9aa:	4621      	mov	r1, r4
 801c9ac:	4638      	mov	r0, r7
 801c9ae:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
}
 801c9b2:	b003      	add	sp, #12
 801c9b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801c9b8:	f7ff bece 	b.w	801c758 <TFT_DrawFilledCircleCorner>
}
 801c9bc:	b003      	add	sp, #12
 801c9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c9c2 <TFT_DrawBitmap>:
	}
}


void TFT_DrawBitmap(uint16_t X1, uint16_t Y1, sImage pbmp)
{
 801c9c2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c9c6:	4688      	mov	r8, r1
 801c9c8:	a902      	add	r1, sp, #8
 801c9ca:	e901 000c 	stmdb	r1, {r2, r3}
 801c9ce:	4607      	mov	r7, r0
	uint16_t Xpos, Ypos;
	uint32_t i = 0;
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801c9d0:	4645      	mov	r5, r8
	uint32_t i = 0;
 801c9d2:	2400      	movs	r4, #0
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801c9d4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c9d8:	4443      	add	r3, r8
 801c9da:	429d      	cmp	r5, r3
 801c9dc:	da15      	bge.n	801ca0a <TFT_DrawBitmap+0x48>
 801c9de:	0066      	lsls	r6, r4, #1
 801c9e0:	eba7 0904 	sub.w	r9, r7, r4
 801c9e4:	e006      	b.n	801c9f4 <TFT_DrawBitmap+0x32>
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[i]);
 801c9e6:	9b01      	ldr	r3, [sp, #4]
 801c9e8:	4629      	mov	r1, r5
 801c9ea:	5b9a      	ldrh	r2, [r3, r6]
 801c9ec:	f7ff fc0e 	bl	801c20c <TFT_DrawPixel>
			i++;
 801c9f0:	3401      	adds	r4, #1
 801c9f2:	3602      	adds	r6, #2
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
 801c9f4:	f8bd 3000 	ldrh.w	r3, [sp]
 801c9f8:	eb09 0004 	add.w	r0, r9, r4
 801c9fc:	b280      	uxth	r0, r0
 801c9fe:	443b      	add	r3, r7
 801ca00:	4298      	cmp	r0, r3
 801ca02:	dbf0      	blt.n	801c9e6 <TFT_DrawBitmap+0x24>
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801ca04:	3501      	adds	r5, #1
 801ca06:	b2ad      	uxth	r5, r5
 801ca08:	e7e4      	b.n	801c9d4 <TFT_DrawBitmap+0x12>
		}
	}
}
 801ca0a:	b003      	add	sp, #12
 801ca0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801ca10 <TFT_SetFont>:

//----------------------------------------

void TFT_SetFont(sFONT *fonts)
{
  lcdprop.pFont=fonts;
 801ca10:	4b01      	ldr	r3, [pc, #4]	; (801ca18 <TFT_SetFont+0x8>)
 801ca12:	6098      	str	r0, [r3, #8]
 801ca14:	4770      	bx	lr
 801ca16:	bf00      	nop
 801ca18:	200956f4 	.word	0x200956f4

0801ca1c <TFT_SetTextColor>:

//----------------------------------------

void TFT_SetTextColor(uint32_t color)
{
  lcdprop.TextColor=color;
 801ca1c:	4b01      	ldr	r3, [pc, #4]	; (801ca24 <TFT_SetTextColor+0x8>)
 801ca1e:	6018      	str	r0, [r3, #0]
 801ca20:	4770      	bx	lr
 801ca22:	bf00      	nop
 801ca24:	200956f4 	.word	0x200956f4

0801ca28 <TFT_SetBackColor>:

//----------------------------------------

void TFT_SetBackColor(uint32_t color)
{
  lcdprop.BackColor=color;
 801ca28:	4b01      	ldr	r3, [pc, #4]	; (801ca30 <TFT_SetBackColor+0x8>)
 801ca2a:	6058      	str	r0, [r3, #4]
 801ca2c:	4770      	bx	lr
 801ca2e:	bf00      	nop
 801ca30:	200956f4 	.word	0x200956f4

0801ca34 <TFT_DrawCharRus>:

//----------------------------------------
	//--------------------------------------------------------------

void TFT_DrawCharRus(uint16_t x, uint16_t y, const uint8_t c)
{
 801ca34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca38:	b085      	sub	sp, #20
  uint32_t i = 0, j = 0;
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
	if(c == 0x01)
 801ca3a:	2a01      	cmp	r2, #1
{
 801ca3c:	9001      	str	r0, [sp, #4]
 801ca3e:	9102      	str	r1, [sp, #8]
 801ca40:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801caf8 <TFT_DrawCharRus+0xc4>
 801ca44:	482b      	ldr	r0, [pc, #172]	; (801caf4 <TFT_DrawCharRus+0xc0>)
	if(c == 0x01)
 801ca46:	d11f      	bne.n	801ca88 <TFT_DrawCharRus+0x54>
	{
		ch = &lcdprop.pFont->table[0];
 801ca48:	6882      	ldr	r2, [r0, #8]
 801ca4a:	6812      	ldr	r2, [r2, #0]
	}
	else
	{
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801ca4c:	f8cb 2000 	str.w	r2, [fp]
	}
	
	height = lcdprop.pFont->Height;
 801ca50:	6882      	ldr	r2, [r0, #8]
	width = lcdprop.pFont->Width;
 801ca52:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	height = lcdprop.pFont->Height;
 801ca56:	88d3      	ldrh	r3, [r2, #6]
 801ca58:	9300      	str	r3, [sp, #0]
	offset = 8 *((width + 7)/8) - width ;
 801ca5a:	f10a 0507 	add.w	r5, sl, #7
 801ca5e:	10ed      	asrs	r5, r5, #3
 801ca60:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
			break;
		}
		for (j = 0; j < width; j++)
		{
				if(line & (1 << (width- j + offset- 1)))
 801ca64:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0; i < height; i++)
 801ca68:	2600      	movs	r6, #0
				if(line & (1 << (width- j + offset- 1)))
 801ca6a:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0; i < height; i++)
 801ca6e:	46b0      	mov	r8, r6
				if(line & (1 << (width- j + offset- 1)))
 801ca70:	9303      	str	r3, [sp, #12]
 801ca72:	9b02      	ldr	r3, [sp, #8]
 801ca74:	eb03 0908 	add.w	r9, r3, r8
	for(i = 0; i < height; i++)
 801ca78:	9b00      	ldr	r3, [sp, #0]
 801ca7a:	4598      	cmp	r8, r3
 801ca7c:	fa1f f989 	uxth.w	r9, r9
 801ca80:	d30e      	bcc.n	801caa0 <TFT_DrawCharRus+0x6c>
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801ca82:	b005      	add	sp, #20
 801ca84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801ca88:	6884      	ldr	r4, [r0, #8]
 801ca8a:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 801ca8e:	88e2      	ldrh	r2, [r4, #6]
 801ca90:	434a      	muls	r2, r1
 801ca92:	88a1      	ldrh	r1, [r4, #4]
 801ca94:	6824      	ldr	r4, [r4, #0]
 801ca96:	3107      	adds	r1, #7
 801ca98:	10c9      	asrs	r1, r1, #3
 801ca9a:	fb01 4202 	mla	r2, r1, r2, r4
 801ca9e:	e7d5      	b.n	801ca4c <TFT_DrawCharRus+0x18>
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801caa0:	f8db 2000 	ldr.w	r2, [fp]
		switch((width + 7)/8)
 801caa4:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801caa6:	eb02 0106 	add.w	r1, r2, r6
 801caaa:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801caac:	d00a      	beq.n	801cac4 <TFT_DrawCharRus+0x90>
 801caae:	784a      	ldrb	r2, [r1, #1]
 801cab0:	2d02      	cmp	r5, #2
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801cab2:	bf1d      	ittte	ne
 801cab4:	0212      	lslne	r2, r2, #8
 801cab6:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801caba:	788a      	ldrbne	r2, [r1, #2]
				line = (pchar[0]<< 8) | pchar[1];
 801cabc:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801cac0:	bf18      	it	ne
 801cac2:	4314      	orrne	r4, r2
		for (j = 0; j < width; j++)
 801cac4:	2700      	movs	r7, #0
 801cac6:	4557      	cmp	r7, sl
 801cac8:	d303      	bcc.n	801cad2 <TFT_DrawCharRus+0x9e>
	for(i = 0; i < height; i++)
 801caca:	f108 0801 	add.w	r8, r8, #1
 801cace:	442e      	add	r6, r5
 801cad0:	e7cf      	b.n	801ca72 <TFT_DrawCharRus+0x3e>
				if(line & (1 << (width- j + offset- 1)))
 801cad2:	9b03      	ldr	r3, [sp, #12]
 801cad4:	1bd9      	subs	r1, r3, r7
 801cad6:	9b01      	ldr	r3, [sp, #4]
 801cad8:	2201      	movs	r2, #1
 801cada:	408a      	lsls	r2, r1
 801cadc:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801cade:	4b05      	ldr	r3, [pc, #20]	; (801caf4 <TFT_DrawCharRus+0xc0>)
				if(line & (1 << (width- j + offset- 1)))
 801cae0:	4222      	tst	r2, r4
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801cae2:	bf14      	ite	ne
 801cae4:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
 801cae6:	889a      	ldrheq	r2, [r3, #4]
 801cae8:	4649      	mov	r1, r9
 801caea:	b280      	uxth	r0, r0
 801caec:	f7ff fb8e 	bl	801c20c <TFT_DrawPixel>
		for (j = 0; j < width; j++)
 801caf0:	3701      	adds	r7, #1
 801caf2:	e7e8      	b.n	801cac6 <TFT_DrawCharRus+0x92>
 801caf4:	200956f4 	.word	0x200956f4
 801caf8:	20095704 	.word	0x20095704

0801cafc <TFT_DrawCutBMP>:


	uint16_t Xpos, Ypos;
	uint32_t ip = 0;
void TFT_DrawCutBMP(uint16_t x_pos, uint16_t y_pos, uint16_t xs, uint16_t ys, uint16_t size, sImage pbmp)
{
 801cafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb00:	b085      	sub	sp, #20
	uint16_t q = 1;
	ip = pbmp.Width*ys+xs-1;
 801cb02:	4d25      	ldr	r5, [pc, #148]	; (801cb98 <TFT_DrawCutBMP+0x9c>)
 801cb04:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
{
 801cb08:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
	
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801cb0c:	4c23      	ldr	r4, [pc, #140]	; (801cb9c <TFT_DrawCutBMP+0xa0>)
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801cb0e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801cba0 <TFT_DrawCutBMP+0xa4>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801cb12:	8021      	strh	r1, [r4, #0]
	ip = pbmp.Width*ys+xs-1;
 801cb14:	fb09 2303 	mla	r3, r9, r3, r2
 801cb18:	1e5a      	subs	r2, r3, #1
 801cb1a:	602a      	str	r2, [r5, #0]
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801cb1c:	19ca      	adds	r2, r1, r7
{
 801cb1e:	4683      	mov	fp, r0
	uint16_t q = 1;
 801cb20:	2601      	movs	r6, #1
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801cb22:	9202      	str	r2, [sp, #8]
 801cb24:	8822      	ldrh	r2, [r4, #0]
 801cb26:	9902      	ldr	r1, [sp, #8]
 801cb28:	428a      	cmp	r2, r1
 801cb2a:	db02      	blt.n	801cb32 <TFT_DrawCutBMP+0x36>
				{ip = ip + pbmp.Width-size+1; 
					q++;}
		}
	}
	
}
 801cb2c:	b005      	add	sp, #20
 801cb2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801cb32:	eb0b 0207 	add.w	r2, fp, r7
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801cb36:	eb03 0a07 	add.w	sl, r3, r7
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801cb3a:	f8a8 b000 	strh.w	fp, [r8]
 801cb3e:	9201      	str	r2, [sp, #4]
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801cb40:	f1aa 0a02 	sub.w	sl, sl, #2
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801cb44:	f8b8 0000 	ldrh.w	r0, [r8]
 801cb48:	9a01      	ldr	r2, [sp, #4]
 801cb4a:	4290      	cmp	r0, r2
 801cb4c:	db03      	blt.n	801cb56 <TFT_DrawCutBMP+0x5a>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801cb4e:	8822      	ldrh	r2, [r4, #0]
 801cb50:	3201      	adds	r2, #1
 801cb52:	8022      	strh	r2, [r4, #0]
 801cb54:	e7e6      	b.n	801cb24 <TFT_DrawCutBMP+0x28>
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[ip]);
 801cb56:	6829      	ldr	r1, [r5, #0]
 801cb58:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801cb5a:	9303      	str	r3, [sp, #12]
 801cb5c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801cb60:	8821      	ldrh	r1, [r4, #0]
 801cb62:	f7ff fb53 	bl	801c20c <TFT_DrawPixel>
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801cb66:	682a      	ldr	r2, [r5, #0]
 801cb68:	9b03      	ldr	r3, [sp, #12]
 801cb6a:	1e71      	subs	r1, r6, #1
 801cb6c:	fb09 a101 	mla	r1, r9, r1, sl
 801cb70:	4291      	cmp	r1, r2
 801cb72:	f102 0201 	add.w	r2, r2, #1
				{ip = ip + pbmp.Width-size+1; 
 801cb76:	bf9b      	ittet	ls
 801cb78:	444a      	addls	r2, r9
 801cb7a:	1bd2      	subls	r2, r2, r7
				{	ip++;} 
 801cb7c:	602a      	strhi	r2, [r5, #0]
				{ip = ip + pbmp.Width-size+1; 
 801cb7e:	602a      	strls	r2, [r5, #0]
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801cb80:	f8b8 2000 	ldrh.w	r2, [r8]
					q++;}
 801cb84:	bf98      	it	ls
 801cb86:	3601      	addls	r6, #1
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801cb88:	f102 0201 	add.w	r2, r2, #1
					q++;}
 801cb8c:	bf98      	it	ls
 801cb8e:	b2b6      	uxthls	r6, r6
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801cb90:	f8a8 2000 	strh.w	r2, [r8]
 801cb94:	e7d6      	b.n	801cb44 <TFT_DrawCutBMP+0x48>
 801cb96:	bf00      	nop
 801cb98:	20009d1c 	.word	0x20009d1c
 801cb9c:	200956f0 	.word	0x200956f0
 801cba0:	20095700 	.word	0x20095700

0801cba4 <TFT_DrawChar>:
		i++;
	}
}

void TFT_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 801cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i=0, j=0;
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line;
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801cba8:	4b28      	ldr	r3, [pc, #160]	; (801cc4c <TFT_DrawChar+0xa8>)
{
 801cbaa:	b085      	sub	sp, #20
 801cbac:	e88d 0003 	stmia.w	sp, {r0, r1}
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801cbb0:	6899      	ldr	r1, [r3, #8]
 801cbb2:	4827      	ldr	r0, [pc, #156]	; (801cc50 <TFT_DrawChar+0xac>)
		((lcdprop.pFont->Width +7) / 8)];
 801cbb4:	f8b1 a004 	ldrh.w	sl, [r1, #4]
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801cbb8:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 801cbbc:	6809      	ldr	r1, [r1, #0]
 801cbbe:	9002      	str	r0, [sp, #8]
		((lcdprop.pFont->Width +7) / 8)];
 801cbc0:	f10a 0507 	add.w	r5, sl, #7
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801cbc4:	3a20      	subs	r2, #32
		((lcdprop.pFont->Width +7) / 8)];
 801cbc6:	10ed      	asrs	r5, r5, #3
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801cbc8:	fb0b f202 	mul.w	r2, fp, r2
 801cbcc:	fb05 1202 	mla	r2, r5, r2, r1
 801cbd0:	6002      	str	r2, [r0, #0]
	height = lcdprop.pFont->Height;
	width = lcdprop.pFont->Width;
	offset = 8 * ((width + 7)/8) - width;
 801cbd2:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
			break;
		}
		for(j = 0;j < width; j++)
		{
			if(line & (1 << (width - j + offset -1)))
 801cbd6:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0;i < height; i++)
 801cbda:	2600      	movs	r6, #0
			if(line & (1 << (width - j + offset -1)))
 801cbdc:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0;i < height; i++)
 801cbe0:	46b0      	mov	r8, r6
			if(line & (1 << (width - j + offset -1)))
 801cbe2:	9303      	str	r3, [sp, #12]
 801cbe4:	9b01      	ldr	r3, [sp, #4]
	for(i = 0;i < height; i++)
 801cbe6:	45d8      	cmp	r8, fp
 801cbe8:	eb03 0908 	add.w	r9, r3, r8
 801cbec:	fa1f f989 	uxth.w	r9, r9
 801cbf0:	d302      	bcc.n	801cbf8 <TFT_DrawChar+0x54>
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801cbf2:	b005      	add	sp, #20
 801cbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801cbf8:	9b02      	ldr	r3, [sp, #8]
 801cbfa:	681a      	ldr	r2, [r3, #0]
		switch((width + 7)/8)
 801cbfc:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801cbfe:	eb02 0106 	add.w	r1, r2, r6
 801cc02:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801cc04:	d00a      	beq.n	801cc1c <TFT_DrawChar+0x78>
 801cc06:	784a      	ldrb	r2, [r1, #1]
 801cc08:	2d02      	cmp	r5, #2
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801cc0a:	bf1d      	ittte	ne
 801cc0c:	0212      	lslne	r2, r2, #8
 801cc0e:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801cc12:	788a      	ldrbne	r2, [r1, #2]
			line = (pchar[0]<<8) | pchar[1];
 801cc14:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801cc18:	bf18      	it	ne
 801cc1a:	4314      	orrne	r4, r2
		for(j = 0;j < width; j++)
 801cc1c:	2700      	movs	r7, #0
 801cc1e:	4557      	cmp	r7, sl
 801cc20:	d303      	bcc.n	801cc2a <TFT_DrawChar+0x86>
	for(i = 0;i < height; i++)
 801cc22:	f108 0801 	add.w	r8, r8, #1
 801cc26:	442e      	add	r6, r5
 801cc28:	e7dc      	b.n	801cbe4 <TFT_DrawChar+0x40>
			if(line & (1 << (width - j + offset -1)))
 801cc2a:	9b03      	ldr	r3, [sp, #12]
 801cc2c:	1bd9      	subs	r1, r3, r7
 801cc2e:	9b00      	ldr	r3, [sp, #0]
 801cc30:	2201      	movs	r2, #1
 801cc32:	408a      	lsls	r2, r1
 801cc34:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801cc36:	4b05      	ldr	r3, [pc, #20]	; (801cc4c <TFT_DrawChar+0xa8>)
			if(line & (1 << (width - j + offset -1)))
 801cc38:	4222      	tst	r2, r4
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801cc3a:	bf14      	ite	ne
 801cc3c:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
 801cc3e:	889a      	ldrheq	r2, [r3, #4]
 801cc40:	4649      	mov	r1, r9
 801cc42:	b280      	uxth	r0, r0
 801cc44:	f7ff fae2 	bl	801c20c <TFT_DrawPixel>
		for(j = 0;j < width; j++)
 801cc48:	3701      	adds	r7, #1
 801cc4a:	e7e8      	b.n	801cc1e <TFT_DrawChar+0x7a>
 801cc4c:	200956f4 	.word	0x200956f4
 801cc50:	20095704 	.word	0x20095704

0801cc54 <TFT_DisplayString>:
//----------------------------------------
void TFT_DisplayString(uint16_t Xpos, uint16_t Ypos, const uint8_t *Text,	Text_AlignModeTypdef Mode)
{
 801cc54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc58:	460e      	mov	r6, r1
 801cc5a:	4604      	mov	r4, r0
 801cc5c:	4615      	mov	r5, r2
	uint16_t ref_column = 1, i = 0;
	uint32_t size = 0, xsize = 0;
	const uint8_t *ptr = Text;
 801cc5e:	4611      	mov	r1, r2
 801cc60:	eba1 0e05 	sub.w	lr, r1, r5
	
	while(*ptr++) size++ ;
 801cc64:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cc68:	2a00      	cmp	r2, #0
 801cc6a:	d1f9      	bne.n	801cc60 <TFT_DisplayString+0xc>
	xsize = (X_SIZE/lcdprop.pFont->Width);
 801cc6c:	4f1b      	ldr	r7, [pc, #108]	; (801ccdc <TFT_DisplayString+0x88>)
 801cc6e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 801cce0 <TFT_DisplayString+0x8c>
 801cc72:	68ba      	ldr	r2, [r7, #8]
 801cc74:	f8b8 1000 	ldrh.w	r1, [r8]
 801cc78:	8890      	ldrh	r0, [r2, #4]
 801cc7a:	fbb1 f2f0 	udiv	r2, r1, r0
	switch (Mode)
 801cc7e:	2b01      	cmp	r3, #1
 801cc80:	d017      	beq.n	801ccb2 <TFT_DisplayString+0x5e>
 801cc82:	2b02      	cmp	r3, #2
 801cc84:	d01c      	beq.n	801ccc0 <TFT_DisplayString+0x6c>
		{
			ref_column = Xpos;
			break;
		}
	}
	if((ref_column < 1) || (ref_column >= 0x8000))
 801cc86:	b223      	sxth	r3, r4
	{
		ref_column = 1;
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	bfd8      	it	le
 801cc8c:	2401      	movle	r4, #1
 801cc8e:	46a9      	mov	r9, r5
	}
	
	while ((*Text != 0) & (((X_SIZE - (i*lcdprop.pFont->Width)) & 0xFFFF) >=
 801cc90:	68b9      	ldr	r1, [r7, #8]
 801cc92:	f8b8 0000 	ldrh.w	r0, [r8]
 801cc96:	8889      	ldrh	r1, [r1, #4]
 801cc98:	eba9 0305 	sub.w	r3, r9, r5
 801cc9c:	b29b      	uxth	r3, r3
 801cc9e:	fb01 0313 	mls	r3, r1, r3, r0
 801cca2:	b29b      	uxth	r3, r3
 801cca4:	4299      	cmp	r1, r3
 801cca6:	f819 2b01 	ldrb.w	r2, [r9], #1
 801ccaa:	dc00      	bgt.n	801ccae <TFT_DisplayString+0x5a>
 801ccac:	b96a      	cbnz	r2, 801ccca <TFT_DisplayString+0x76>
 801ccae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width) / 2;
 801ccb2:	eba2 020e 	sub.w	r2, r2, lr
 801ccb6:	4342      	muls	r2, r0
 801ccb8:	eb04 0452 	add.w	r4, r4, r2, lsr #1
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801ccbc:	b2a4      	uxth	r4, r4
			break;
 801ccbe:	e7e2      	b.n	801cc86 <TFT_DisplayString+0x32>
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801ccc0:	eba2 020e 	sub.w	r2, r2, lr
 801ccc4:	fb12 4400 	smlabb	r4, r2, r0, r4
 801ccc8:	e7f8      	b.n	801ccbc <TFT_DisplayString+0x68>
			lcdprop.pFont->Width))
	{
		TFT_DrawChar(ref_column, Ypos, *Text);
 801ccca:	4620      	mov	r0, r4
 801cccc:	4631      	mov	r1, r6
 801ccce:	f7ff ff69 	bl	801cba4 <TFT_DrawChar>
		ref_column += lcdprop.pFont->Width;
 801ccd2:	68bb      	ldr	r3, [r7, #8]
 801ccd4:	889b      	ldrh	r3, [r3, #4]
 801ccd6:	441c      	add	r4, r3
 801ccd8:	b2a4      	uxth	r4, r4
 801ccda:	e7d9      	b.n	801cc90 <TFT_DisplayString+0x3c>
 801ccdc:	200956f4 	.word	0x200956f4
 801cce0:	20000eb8 	.word	0x20000eb8

0801cce4 <DrawLineX>:
		Text++;
		i++;
	}
}

void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801cce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801cce8:	1a5f      	subs	r7, r3, r1
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801ccea:	4616      	mov	r6, r2
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801ccec:	eba6 0800 	sub.w	r8, r6, r0
 801ccf0:	2f00      	cmp	r7, #0
 801ccf2:	bfb8      	it	lt
 801ccf4:	427f      	neglt	r7, r7
 801ccf6:	f1b8 0f00 	cmp.w	r8, #0
 801ccfa:	bfb8      	it	lt
 801ccfc:	f1c8 0800 	rsblt	r8, r8, #0
    if (steep){
 801cd00:	4547      	cmp	r7, r8
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801cd02:	4604      	mov	r4, r0
 801cd04:	460d      	mov	r5, r1
 801cd06:	461a      	mov	r2, r3
 801cd08:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
    if (steep){
 801cd0c:	dd04      	ble.n	801cd18 <DrawLineX+0x34>
 801cd0e:	4633      	mov	r3, r6
        swap(x1, y1);
 801cd10:	460c      	mov	r4, r1
        swap(x2, y2);
 801cd12:	4616      	mov	r6, r2
        swap(x1, y1);
 801cd14:	4605      	mov	r5, r0
        swap(x2, y2);
 801cd16:	461a      	mov	r2, r3
    }
    if(x1>x2){
 801cd18:	42b4      	cmp	r4, r6
 801cd1a:	d905      	bls.n	801cd28 <DrawLineX+0x44>
 801cd1c:	462b      	mov	r3, r5
        swap(x1, x2);
        swap(y1, y2);
 801cd1e:	4615      	mov	r5, r2
 801cd20:	461a      	mov	r2, r3
    if(x1>x2){
 801cd22:	4623      	mov	r3, r4
 801cd24:	4634      	mov	r4, r6
 801cd26:	461e      	mov	r6, r3
    }
    int dx,dy;
    dx=x2-x1;
    dy=abs(y2-y1);
 801cd28:	eba2 0905 	sub.w	r9, r2, r5
 801cd2c:	464b      	mov	r3, r9
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	bfb8      	it	lt
 801cd32:	425b      	neglt	r3, r3
    dx=x2-x1;
 801cd34:	eba6 0a04 	sub.w	sl, r6, r4
    dy=abs(y2-y1);
 801cd38:	9301      	str	r3, [sp, #4]
    int err=dx/2;
 801cd3a:	2302      	movs	r3, #2
 801cd3c:	fb9a f9f3 	sdiv	r9, sl, r3
    int ystep;
    if(y1<y2) ystep = 1;
    else  ystep = -1;
 801cd40:	4295      	cmp	r5, r2
 801cd42:	bf34      	ite	cc
 801cd44:	2301      	movcc	r3, #1
 801cd46:	f04f 33ff 	movcs.w	r3, #4294967295
 801cd4a:	9300      	str	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801cd4c:	42b4      	cmp	r4, r6
 801cd4e:	d902      	bls.n	801cd56 <DrawLineX+0x72>
        if (err<0){
            y1 += ystep;
            err+=dx;
        }
    }
}
 801cd50:	b003      	add	sp, #12
 801cd52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801cd56:	4547      	cmp	r7, r8
 801cd58:	bfcb      	itete	gt
 801cd5a:	4628      	movgt	r0, r5
        else {TFT_DrawPixel(x1, y1, color);
 801cd5c:	4629      	movle	r1, r5
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801cd5e:	4621      	movgt	r1, r4
        else {TFT_DrawPixel(x1, y1, color);
 801cd60:	4620      	movle	r0, r4
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801cd62:	465a      	mov	r2, fp
        else {TFT_DrawPixel(x1, y1, color);
 801cd64:	f7ff fa52 	bl	801c20c <TFT_DrawPixel>
        if (err<0){
 801cd68:	9b01      	ldr	r3, [sp, #4]
 801cd6a:	ebb9 0903 	subs.w	r9, r9, r3
            y1 += ystep;
 801cd6e:	bf48      	it	mi
 801cd70:	9b00      	ldrmi	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801cd72:	f104 0401 	add.w	r4, r4, #1
            y1 += ystep;
 801cd76:	bf42      	ittt	mi
 801cd78:	18ed      	addmi	r5, r5, r3
 801cd7a:	b2ad      	uxthmi	r5, r5
            err+=dx;
 801cd7c:	44d1      	addmi	r9, sl
    for ( ; x1<=x2; x1++){
 801cd7e:	b2a4      	uxth	r4, r4
 801cd80:	e7e4      	b.n	801cd4c <DrawLineX+0x68>
	...

0801cd84 <MX_SDMMC1_SD_Init>:

/* SDMMC1 init function */
static void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 801cd84:	4b06      	ldr	r3, [pc, #24]	; (801cda0 <MX_SDMMC1_SD_Init+0x1c>)
 801cd86:	4a07      	ldr	r2, [pc, #28]	; (801cda4 <MX_SDMMC1_SD_Init+0x20>)
 801cd88:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801cd8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801cd8e:	2200      	movs	r2, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801cd90:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 10;
 801cd92:	210a      	movs	r1, #10
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801cd94:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801cd96:	609a      	str	r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801cd98:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 801cd9a:	6159      	str	r1, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 801cd9c:	619a      	str	r2, [r3, #24]
 801cd9e:	4770      	bx	lr
 801cda0:	20095808 	.word	0x20095808
 801cda4:	50062400 	.word	0x50062400

0801cda8 <MX_TIM2_Init>:
{
 801cda8:	b510      	push	{r4, lr}
  htim2.Init.Period = exposure_timer_period[exp_num];
 801cdaa:	4a16      	ldr	r2, [pc, #88]	; (801ce04 <MX_TIM2_Init+0x5c>)
  htim2.Instance = TIM2;
 801cdac:	4c16      	ldr	r4, [pc, #88]	; (801ce08 <MX_TIM2_Init+0x60>)
  htim2.Init.Period = exposure_timer_period[exp_num];
 801cdae:	7811      	ldrb	r1, [r2, #0]
 801cdb0:	4a16      	ldr	r2, [pc, #88]	; (801ce0c <MX_TIM2_Init+0x64>)
  htim2.Init.Prescaler = 10000;
 801cdb2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801cdb6:	f242 7310 	movw	r3, #10000	; 0x2710
 801cdba:	e884 0009 	stmia.w	r4, {r0, r3}
{
 801cdbe:	b088      	sub	sp, #32
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801cdc0:	2300      	movs	r3, #0
  htim2.Init.Period = exposure_timer_period[exp_num];
 801cdc2:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801cdc6:	60a3      	str	r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801cdc8:	4620      	mov	r0, r4
  htim2.Init.Period = exposure_timer_period[exp_num];
 801cdca:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801cdcc:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801cdce:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801cdd0:	f7e9 f810 	bl	8005df4 <HAL_TIM_Base_Init>
 801cdd4:	b100      	cbz	r0, 801cdd8 <MX_TIM2_Init+0x30>
 801cdd6:	e7fe      	b.n	801cdd6 <MX_TIM2_Init+0x2e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801cdd8:	a908      	add	r1, sp, #32
 801cdda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801cdde:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801cde2:	4620      	mov	r0, r4
 801cde4:	f7e9 f962 	bl	80060ac <HAL_TIM_ConfigClockSource>
 801cde8:	b100      	cbz	r0, 801cdec <MX_TIM2_Init+0x44>
 801cdea:	e7fe      	b.n	801cdea <MX_TIM2_Init+0x42>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801cdec:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801cdee:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801cdf0:	a901      	add	r1, sp, #4
 801cdf2:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801cdf4:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801cdf6:	f7e9 fa7d 	bl	80062f4 <HAL_TIMEx_MasterConfigSynchronization>
 801cdfa:	b100      	cbz	r0, 801cdfe <MX_TIM2_Init+0x56>
 801cdfc:	e7fe      	b.n	801cdfc <MX_TIM2_Init+0x54>
}
 801cdfe:	b008      	add	sp, #32
 801ce00:	bd10      	pop	{r4, pc}
 801ce02:	bf00      	nop
 801ce04:	200905b6 	.word	0x200905b6
 801ce08:	20095c58 	.word	0x20095c58
 801ce0c:	08031dd0 	.word	0x08031dd0

0801ce10 <DWT_Init>:
  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) 
 801ce10:	4a07      	ldr	r2, [pc, #28]	; (801ce30 <DWT_Init+0x20>)
 801ce12:	68d3      	ldr	r3, [r2, #12]
 801ce14:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 801ce18:	d109      	bne.n	801ce2e <DWT_Init+0x1e>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801ce1a:	68d1      	ldr	r1, [r2, #12]
 801ce1c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 801ce20:	60d1      	str	r1, [r2, #12]
    DWT->CYCCNT = 0;
 801ce22:	4a04      	ldr	r2, [pc, #16]	; (801ce34 <DWT_Init+0x24>)
 801ce24:	6053      	str	r3, [r2, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 801ce26:	6813      	ldr	r3, [r2, #0]
 801ce28:	f043 0301 	orr.w	r3, r3, #1
 801ce2c:	6013      	str	r3, [r2, #0]
 801ce2e:	4770      	bx	lr
 801ce30:	e000edf0 	.word	0xe000edf0
 801ce34:	e0001000 	.word	0xe0001000

0801ce38 <DWT_Delay>:
  return DWT->CYCCNT;
 801ce38:	4a07      	ldr	r2, [pc, #28]	; (801ce58 <DWT_Delay+0x20>)
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801ce3a:	4b08      	ldr	r3, [pc, #32]	; (801ce5c <DWT_Delay+0x24>)
  return DWT->CYCCNT;
 801ce3c:	6851      	ldr	r1, [r2, #4]
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801ce3e:	681b      	ldr	r3, [r3, #0]
{
 801ce40:	b510      	push	{r4, lr}
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801ce42:	4c07      	ldr	r4, [pc, #28]	; (801ce60 <DWT_Delay+0x28>)
 801ce44:	fbb3 f3f4 	udiv	r3, r3, r4
 801ce48:	fb00 1003 	mla	r0, r0, r3, r1
  return DWT->CYCCNT;
 801ce4c:	6853      	ldr	r3, [r2, #4]
  return (((int32_t)DWT_Get() - tp) < 0);
 801ce4e:	1a1b      	subs	r3, r3, r0
  while (DWT_Compare(tp));
 801ce50:	2b00      	cmp	r3, #0
 801ce52:	dbfb      	blt.n	801ce4c <DWT_Delay+0x14>
}
 801ce54:	bd10      	pop	{r4, pc}
 801ce56:	bf00      	nop
 801ce58:	e0001000 	.word	0xe0001000
 801ce5c:	20000ed4 	.word	0x20000ed4
 801ce60:	000f4240 	.word	0x000f4240

0801ce64 <Calculate_Data>:
{
 801ce64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801ce66:	4a78      	ldr	r2, [pc, #480]	; (801d048 <Calculate_Data+0x1e4>)
 801ce68:	4b78      	ldr	r3, [pc, #480]	; (801d04c <Calculate_Data+0x1e8>)
 801ce6a:	4979      	ldr	r1, [pc, #484]	; (801d050 <Calculate_Data+0x1ec>)
 801ce6c:	4879      	ldr	r0, [pc, #484]	; (801d054 <Calculate_Data+0x1f0>)
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801ce6e:	4d7a      	ldr	r5, [pc, #488]	; (801d058 <Calculate_Data+0x1f4>)
	if(GUI_screen_state == Color_Screen)
 801ce70:	4f7a      	ldr	r7, [pc, #488]	; (801d05c <Calculate_Data+0x1f8>)
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801ce72:	f7f1 fa15 	bl	800e2a0 <Calculate_XYZ1964>
	Calculate_xy1964(colorimetry_XYZ1964);
 801ce76:	487a      	ldr	r0, [pc, #488]	; (801d060 <Calculate_Data+0x1fc>)
 801ce78:	f7f1 faae 	bl	800e3d8 <Calculate_xy1964>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801ce7c:	4b79      	ldr	r3, [pc, #484]	; (801d064 <Calculate_Data+0x200>)
 801ce7e:	4a7a      	ldr	r2, [pc, #488]	; (801d068 <Calculate_Data+0x204>)
 801ce80:	497a      	ldr	r1, [pc, #488]	; (801d06c <Calculate_Data+0x208>)
 801ce82:	4874      	ldr	r0, [pc, #464]	; (801d054 <Calculate_Data+0x1f0>)
 801ce84:	f7f1 fa5a 	bl	800e33c <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801ce88:	4879      	ldr	r0, [pc, #484]	; (801d070 <Calculate_Data+0x20c>)
 801ce8a:	f7f1 fac3 	bl	800e414 <Calculate_xy1931>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801ce8e:	7829      	ldrb	r1, [r5, #0]
 801ce90:	4870      	ldr	r0, [pc, #448]	; (801d054 <Calculate_Data+0x1f0>)
 801ce92:	f7f1 fb25 	bl	800e4e0 <Calculate_Tc>
 801ce96:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801ce9a:	4b76      	ldr	r3, [pc, #472]	; (801d074 <Calculate_Data+0x210>)
 801ce9c:	ee17 2a90 	vmov	r2, s15
 801cea0:	801a      	strh	r2, [r3, #0]
	if(GUI_screen_state == Color_Screen)
 801cea2:	783a      	ldrb	r2, [r7, #0]
 801cea4:	2a05      	cmp	r2, #5
 801cea6:	d114      	bne.n	801ced2 <Calculate_Data+0x6e>
		if(Color_Field&Color_CIE_Luv) {Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);} else 
 801cea8:	4b73      	ldr	r3, [pc, #460]	; (801d078 <Calculate_Data+0x214>)
 801ceaa:	781b      	ldrb	r3, [r3, #0]
 801ceac:	075a      	lsls	r2, r3, #29
 801ceae:	f140 80ba 	bpl.w	801d026 <Calculate_Data+0x1c2>
 801ceb2:	7828      	ldrb	r0, [r5, #0]
 801ceb4:	4e71      	ldr	r6, [pc, #452]	; (801d07c <Calculate_Data+0x218>)
 801ceb6:	4c72      	ldr	r4, [pc, #456]	; (801d080 <Calculate_Data+0x21c>)
 801ceb8:	2800      	cmp	r0, #0
 801ceba:	bf0c      	ite	eq
 801cebc:	4630      	moveq	r0, r6
 801cebe:	4620      	movne	r0, r4
 801cec0:	f7f1 faea 	bl	800e498 <Calculate_uv1976>
 801cec4:	7828      	ldrb	r0, [r5, #0]
 801cec6:	2800      	cmp	r0, #0
 801cec8:	bf0c      	ite	eq
 801ceca:	4630      	moveq	r0, r6
 801cecc:	4620      	movne	r0, r4
 801cece:	f7f1 fabf 	bl	800e450 <Calculate_uv>
	if(GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen|| GUI_screen_state == Measure3_Screen)
 801ced2:	783b      	ldrb	r3, [r7, #0]
 801ced4:	3b01      	subs	r3, #1
 801ced6:	2b02      	cmp	r3, #2
 801ced8:	f200 80a4 	bhi.w	801d024 <Calculate_Data+0x1c0>
			if(Measure_Field&Illuminance) {E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);}
 801cedc:	4c69      	ldr	r4, [pc, #420]	; (801d084 <Calculate_Data+0x220>)
 801cede:	8823      	ldrh	r3, [r4, #0]
 801cee0:	07de      	lsls	r6, r3, #31
 801cee2:	d506      	bpl.n	801cef2 <Calculate_Data+0x8e>
 801cee4:	4960      	ldr	r1, [pc, #384]	; (801d068 <Calculate_Data+0x204>)
 801cee6:	485b      	ldr	r0, [pc, #364]	; (801d054 <Calculate_Data+0x1f0>)
 801cee8:	f7f1 f87c 	bl	800dfe4 <Calculate_EL_Day>
 801ceec:	4b66      	ldr	r3, [pc, #408]	; (801d088 <Calculate_Data+0x224>)
 801ceee:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&Irradiance) {E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);}
 801cef2:	8823      	ldrh	r3, [r4, #0]
 801cef4:	0798      	lsls	r0, r3, #30
 801cef6:	d505      	bpl.n	801cf04 <Calculate_Data+0xa0>
 801cef8:	4856      	ldr	r0, [pc, #344]	; (801d054 <Calculate_Data+0x1f0>)
 801cefa:	f7f1 f893 	bl	800e024 <Calculate_EL_Day_Wt>
 801cefe:	4b63      	ldr	r3, [pc, #396]	; (801d08c <Calculate_Data+0x228>)
 801cf00:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801cf04:	8823      	ldrh	r3, [r4, #0]
 801cf06:	0499      	lsls	r1, r3, #18
 801cf08:	d519      	bpl.n	801cf3e <Calculate_Data+0xda>
 801cf0a:	4961      	ldr	r1, [pc, #388]	; (801d090 <Calculate_Data+0x22c>)
 801cf0c:	4851      	ldr	r0, [pc, #324]	; (801d054 <Calculate_Data+0x1f0>)
 801cf0e:	4e61      	ldr	r6, [pc, #388]	; (801d094 <Calculate_Data+0x230>)
 801cf10:	4f5d      	ldr	r7, [pc, #372]	; (801d088 <Calculate_Data+0x224>)
 801cf12:	f7f1 f89f 	bl	800e054 <Calculate_EL_Night>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801cf16:	8822      	ldrh	r2, [r4, #0]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801cf18:	ed86 0a00 	vstr	s0, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801cf1c:	f012 0f01 	tst.w	r2, #1
 801cf20:	f040 808f 	bne.w	801d042 <Calculate_Data+0x1de>
 801cf24:	4950      	ldr	r1, [pc, #320]	; (801d068 <Calculate_Data+0x204>)
 801cf26:	484b      	ldr	r0, [pc, #300]	; (801d054 <Calculate_Data+0x1f0>)
 801cf28:	f7f1 f85c 	bl	800dfe4 <Calculate_EL_Day>
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801cf2c:	edd6 0a00 	vldr	s1, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801cf30:	ed87 0a00 	vstr	s0, [r7]
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801cf34:	f7f1 f8ae 	bl	800e094 <Calculate_SP>
 801cf38:	4b57      	ldr	r3, [pc, #348]	; (801d098 <Calculate_Data+0x234>)
 801cf3a:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD) {PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));//*100000
 801cf3e:	8823      	ldrh	r3, [r4, #0]
 801cf40:	075a      	lsls	r2, r3, #29
 801cf42:	d506      	bpl.n	801cf52 <Calculate_Data+0xee>
 801cf44:	4955      	ldr	r1, [pc, #340]	; (801d09c <Calculate_Data+0x238>)
 801cf46:	4843      	ldr	r0, [pc, #268]	; (801d054 <Calculate_Data+0x1f0>)
 801cf48:	f7f1 f8b2 	bl	800e0b0 <Calculate_PPFD_PPL>
 801cf4c:	4b54      	ldr	r3, [pc, #336]	; (801d0a0 <Calculate_Data+0x23c>)
 801cf4e:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801cf52:	8823      	ldrh	r3, [r4, #0]
 801cf54:	071b      	lsls	r3, r3, #28
 801cf56:	d51f      	bpl.n	801cf98 <Calculate_Data+0x134>
 801cf58:	2200      	movs	r2, #0
 801cf5a:	4950      	ldr	r1, [pc, #320]	; (801d09c <Calculate_Data+0x238>)
 801cf5c:	483d      	ldr	r0, [pc, #244]	; (801d054 <Calculate_Data+0x1f0>)
 801cf5e:	f7f1 f913 	bl	800e188 <Calculate_PPFD_PPL_Range>
 801cf62:	4b50      	ldr	r3, [pc, #320]	; (801d0a4 <Calculate_Data+0x240>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801cf64:	494d      	ldr	r1, [pc, #308]	; (801d09c <Calculate_Data+0x238>)
 801cf66:	483b      	ldr	r0, [pc, #236]	; (801d054 <Calculate_Data+0x1f0>)
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801cf68:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801cf6c:	2201      	movs	r2, #1
 801cf6e:	f7f1 f90b 	bl	800e188 <Calculate_PPFD_PPL_Range>
 801cf72:	4b4d      	ldr	r3, [pc, #308]	; (801d0a8 <Calculate_Data+0x244>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801cf74:	4949      	ldr	r1, [pc, #292]	; (801d09c <Calculate_Data+0x238>)
 801cf76:	4837      	ldr	r0, [pc, #220]	; (801d054 <Calculate_Data+0x1f0>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801cf78:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801cf7c:	2202      	movs	r2, #2
 801cf7e:	f7f1 f903 	bl	800e188 <Calculate_PPFD_PPL_Range>
 801cf82:	4b4a      	ldr	r3, [pc, #296]	; (801d0ac <Calculate_Data+0x248>)
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801cf84:	4945      	ldr	r1, [pc, #276]	; (801d09c <Calculate_Data+0x238>)
 801cf86:	4833      	ldr	r0, [pc, #204]	; (801d054 <Calculate_Data+0x1f0>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801cf88:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801cf8c:	2203      	movs	r2, #3
 801cf8e:	f7f1 f8fb 	bl	800e188 <Calculate_PPFD_PPL_Range>
 801cf92:	4b47      	ldr	r3, [pc, #284]	; (801d0b0 <Calculate_Data+0x24c>)
 801cf94:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&delta_E){delta_Eab_Measure = Calculate_deltaEab();}
 801cf98:	8823      	ldrh	r3, [r4, #0]
 801cf9a:	051f      	lsls	r7, r3, #20
 801cf9c:	d503      	bpl.n	801cfa6 <Calculate_Data+0x142>
 801cf9e:	f7f1 fe7b 	bl	800ec98 <Calculate_deltaEab>
 801cfa2:	4b44      	ldr	r3, [pc, #272]	; (801d0b4 <Calculate_Data+0x250>)
 801cfa4:	8018      	strh	r0, [r3, #0]
			if(Measure_Field&CIE_Luv){Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);}
 801cfa6:	8823      	ldrh	r3, [r4, #0]
 801cfa8:	065e      	lsls	r6, r3, #25
 801cfaa:	d50f      	bpl.n	801cfcc <Calculate_Data+0x168>
 801cfac:	7828      	ldrb	r0, [r5, #0]
 801cfae:	4f33      	ldr	r7, [pc, #204]	; (801d07c <Calculate_Data+0x218>)
 801cfb0:	4e33      	ldr	r6, [pc, #204]	; (801d080 <Calculate_Data+0x21c>)
 801cfb2:	2800      	cmp	r0, #0
 801cfb4:	bf0c      	ite	eq
 801cfb6:	4638      	moveq	r0, r7
 801cfb8:	4630      	movne	r0, r6
 801cfba:	f7f1 fa6d 	bl	800e498 <Calculate_uv1976>
 801cfbe:	7828      	ldrb	r0, [r5, #0]
 801cfc0:	2800      	cmp	r0, #0
 801cfc2:	bf0c      	ite	eq
 801cfc4:	4638      	moveq	r0, r7
 801cfc6:	4630      	movne	r0, r6
 801cfc8:	f7f1 fa42 	bl	800e450 <Calculate_uv>
			if(Measure_Field&CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801cfcc:	8823      	ldrh	r3, [r4, #0]
 801cfce:	0618      	lsls	r0, r3, #24
 801cfd0:	d509      	bpl.n	801cfe6 <Calculate_Data+0x182>
 801cfd2:	4b39      	ldr	r3, [pc, #228]	; (801d0b8 <Calculate_Data+0x254>)
 801cfd4:	7829      	ldrb	r1, [r5, #0]
 801cfd6:	781a      	ldrb	r2, [r3, #0]
 801cfd8:	4821      	ldr	r0, [pc, #132]	; (801d060 <Calculate_Data+0x1fc>)
 801cfda:	4b25      	ldr	r3, [pc, #148]	; (801d070 <Calculate_Data+0x20c>)
 801cfdc:	2900      	cmp	r1, #0
 801cfde:	bf18      	it	ne
 801cfe0:	4618      	movne	r0, r3
 801cfe2:	f7f1 fc19 	bl	800e818 <Calculate_Lab>
			if(Measure_Field&lambda_d){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801cfe6:	8823      	ldrh	r3, [r4, #0]
 801cfe8:	0599      	lsls	r1, r3, #22
 801cfea:	d503      	bpl.n	801cff4 <Calculate_Data+0x190>
 801cfec:	7829      	ldrb	r1, [r5, #0]
 801cfee:	4819      	ldr	r0, [pc, #100]	; (801d054 <Calculate_Data+0x1f0>)
 801cff0:	f7f1 fd48 	bl	800ea84 <Calculate_Lambda_Dominant>
			if(Measure_Field&lambda_c){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801cff4:	8823      	ldrh	r3, [r4, #0]
 801cff6:	055a      	lsls	r2, r3, #21
 801cff8:	d503      	bpl.n	801d002 <Calculate_Data+0x19e>
 801cffa:	7829      	ldrb	r1, [r5, #0]
 801cffc:	4815      	ldr	r0, [pc, #84]	; (801d054 <Calculate_Data+0x1f0>)
 801cffe:	f7f1 fd41 	bl	800ea84 <Calculate_Lambda_Dominant>
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801d002:	8823      	ldrh	r3, [r4, #0]
 801d004:	04db      	lsls	r3, r3, #19
 801d006:	d50d      	bpl.n	801d024 <Calculate_Data+0x1c0>
 801d008:	492c      	ldr	r1, [pc, #176]	; (801d0bc <Calculate_Data+0x258>)
 801d00a:	4812      	ldr	r0, [pc, #72]	; (801d054 <Calculate_Data+0x1f0>)
 801d00c:	f7f1 f946 	bl	800e29c <Calculate_ELr>
 801d010:	4b2b      	ldr	r3, [pc, #172]	; (801d0c0 <Calculate_Data+0x25c>)
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801d012:	492c      	ldr	r1, [pc, #176]	; (801d0c4 <Calculate_Data+0x260>)
 801d014:	480f      	ldr	r0, [pc, #60]	; (801d054 <Calculate_Data+0x1f0>)
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801d016:	ed83 0a00 	vstr	s0, [r3]
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801d01a:	f7f1 f925 	bl	800e268 <Calculate_ELb>
 801d01e:	4b2a      	ldr	r3, [pc, #168]	; (801d0c8 <Calculate_Data+0x264>)
 801d020:	ed83 0a00 	vstr	s0, [r3]
 801d024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(Color_Field&Color_CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801d026:	079b      	lsls	r3, r3, #30
 801d028:	f57f af53 	bpl.w	801ced2 <Calculate_Data+0x6e>
 801d02c:	4b22      	ldr	r3, [pc, #136]	; (801d0b8 <Calculate_Data+0x254>)
 801d02e:	7829      	ldrb	r1, [r5, #0]
 801d030:	781a      	ldrb	r2, [r3, #0]
 801d032:	480b      	ldr	r0, [pc, #44]	; (801d060 <Calculate_Data+0x1fc>)
 801d034:	4b0e      	ldr	r3, [pc, #56]	; (801d070 <Calculate_Data+0x20c>)
 801d036:	2900      	cmp	r1, #0
 801d038:	bf18      	it	ne
 801d03a:	4618      	movne	r0, r3
 801d03c:	f7f1 fbec 	bl	800e818 <Calculate_Lab>
 801d040:	e747      	b.n	801ced2 <Calculate_Data+0x6e>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801d042:	ed97 0a00 	vldr	s0, [r7]
 801d046:	e771      	b.n	801cf2c <Calculate_Data+0xc8>
 801d048:	2008c514 	.word	0x2008c514
 801d04c:	2008e514 	.word	0x2008e514
 801d050:	2008b514 	.word	0x2008b514
 801d054:	2000c53c 	.word	0x2000c53c
 801d058:	20005704 	.word	0x20005704
 801d05c:	20005701 	.word	0x20005701
 801d060:	2008f528 	.word	0x2008f528
 801d064:	2008d514 	.word	0x2008d514
 801d068:	20052940 	.word	0x20052940
 801d06c:	2008a514 	.word	0x2008a514
 801d070:	2008f522 	.word	0x2008f522
 801d074:	20054940 	.word	0x20054940
 801d078:	200056ff 	.word	0x200056ff
 801d07c:	2008f548 	.word	0x2008f548
 801d080:	2008f540 	.word	0x2008f540
 801d084:	20005706 	.word	0x20005706
 801d088:	20095ca0 	.word	0x20095ca0
 801d08c:	20095718 	.word	0x20095718
 801d090:	20053940 	.word	0x20053940
 801d094:	2009570c 	.word	0x2009570c
 801d098:	20095800 	.word	0x20095800
 801d09c:	20054948 	.word	0x20054948
 801d0a0:	20095720 	.word	0x20095720
 801d0a4:	20095804 	.word	0x20095804
 801d0a8:	20095b88 	.word	0x20095b88
 801d0ac:	20095a3c 	.word	0x20095a3c
 801d0b0:	2009571c 	.word	0x2009571c
 801d0b4:	20090ab6 	.word	0x20090ab6
 801d0b8:	20090ab9 	.word	0x20090ab9
 801d0bc:	2000ad38 	.word	0x2000ad38
 801d0c0:	20095c9c 	.word	0x20095c9c
 801d0c4:	20009d38 	.word	0x20009d38
 801d0c8:	20095c98 	.word	0x20095c98

0801d0cc <Get_Battery_Level>:
{
 801d0cc:	b510      	push	{r4, lr}
	HAL_ADC_Start(&hadc1);
 801d0ce:	4818      	ldr	r0, [pc, #96]	; (801d130 <Get_Battery_Level+0x64>)
	adcResult = HAL_ADC_GetValue(&hadc1);
 801d0d0:	4c18      	ldr	r4, [pc, #96]	; (801d134 <Get_Battery_Level+0x68>)
	HAL_ADC_Start(&hadc1);
 801d0d2:	f7e4 fbb5 	bl	8001840 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 2);
 801d0d6:	2102      	movs	r1, #2
 801d0d8:	4815      	ldr	r0, [pc, #84]	; (801d130 <Get_Battery_Level+0x64>)
 801d0da:	f7e4 f8ab 	bl	8001234 <HAL_ADC_PollForConversion>
	adcResult = HAL_ADC_GetValue(&hadc1);
 801d0de:	4814      	ldr	r0, [pc, #80]	; (801d130 <Get_Battery_Level+0x64>)
 801d0e0:	f7e4 f8f6 	bl	80012d0 <HAL_ADC_GetValue>
 801d0e4:	8020      	strh	r0, [r4, #0]
	HAL_ADC_Stop(&hadc1);
 801d0e6:	4812      	ldr	r0, [pc, #72]	; (801d130 <Get_Battery_Level+0x64>)
 801d0e8:	f7e4 fc29 	bl	800193e <HAL_ADC_Stop>
	if (adcResult > 3455) adcResult = 3455;
 801d0ec:	8823      	ldrh	r3, [r4, #0]
 801d0ee:	f5b3 6f58 	cmp.w	r3, #3456	; 0xd80
 801d0f2:	bf24      	itt	cs
 801d0f4:	f640 527f 	movwcs	r2, #3455	; 0xd7f
 801d0f8:	8022      	strhcs	r2, [r4, #0]
	if (adcResult < 2750) adcResult = 2750;
 801d0fa:	8821      	ldrh	r1, [r4, #0]
 801d0fc:	f640 22bd 	movw	r2, #2749	; 0xabd
 801d100:	4291      	cmp	r1, r2
 801d102:	bf9c      	itt	ls
 801d104:	f640 22be 	movwls	r2, #2750	; 0xabe
 801d108:	8022      	strhls	r2, [r4, #0]
	return percentage_charge = (adcResult - 2750)*100.0 / 705;
 801d10a:	8820      	ldrh	r0, [r4, #0]
 801d10c:	f6a0 20be 	subw	r0, r0, #2750	; 0xabe
 801d110:	f7e3 fa20 	bl	8000554 <__aeabi_i2d>
 801d114:	2200      	movs	r2, #0
 801d116:	4b08      	ldr	r3, [pc, #32]	; (801d138 <Get_Battery_Level+0x6c>)
 801d118:	f7e3 fa82 	bl	8000620 <__aeabi_dmul>
 801d11c:	2200      	movs	r2, #0
 801d11e:	4b07      	ldr	r3, [pc, #28]	; (801d13c <Get_Battery_Level+0x70>)
 801d120:	f7e3 fba8 	bl	8000874 <__aeabi_ddiv>
 801d124:	4b06      	ldr	r3, [pc, #24]	; (801d140 <Get_Battery_Level+0x74>)
}
 801d126:	ec41 0b10 	vmov	d0, r0, r1
	return percentage_charge = (adcResult - 2750)*100.0 / 705;
 801d12a:	e9c3 0100 	strd	r0, r1, [r3]
}
 801d12e:	bd10      	pop	{r4, pc}
 801d130:	200959d0 	.word	0x200959d0
 801d134:	20055950 	.word	0x20055950
 801d138:	40590000 	.word	0x40590000
 801d13c:	40860800 	.word	0x40860800
 801d140:	200905c8 	.word	0x200905c8

0801d144 <packet_generator_data_send>:
{
 801d144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801d148:	4c25      	ldr	r4, [pc, #148]	; (801d1e0 <packet_generator_data_send+0x9c>)
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801d14a:	4f26      	ldr	r7, [pc, #152]	; (801d1e4 <packet_generator_data_send+0xa0>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d14c:	f8df 909c 	ldr.w	r9, [pc, #156]	; 801d1ec <packet_generator_data_send+0xa8>
			memset(dataToSend, 0, sizeof(dataToSend));
 801d150:	2100      	movs	r1, #0
 801d152:	2240      	movs	r2, #64	; 0x40
 801d154:	4620      	mov	r0, r4
 801d156:	f003 f894 	bl	8020282 <memset>
			dataToSend[0] = 0xAB;
 801d15a:	23ab      	movs	r3, #171	; 0xab
 801d15c:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801d15e:	2312      	movs	r3, #18
			dataToSend[2] = 0x01;
 801d160:	2500      	movs	r5, #0
			dataToSend[1] = 0x12;
 801d162:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x01;
 801d164:	2301      	movs	r3, #1
 801d166:	70a3      	strb	r3, [r4, #2]
			packet_number = 0;
 801d168:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801d16a:	4629      	mov	r1, r5
			q = 5;
 801d16c:	2305      	movs	r3, #5
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d16e:	46a0      	mov	r8, r4
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801d170:	f837 2015 	ldrh.w	r2, [r7, r5, lsl #1]
				dataToSend[q+1] = byte_low;
 801d174:	eb04 0e03 	add.w	lr, r4, r3
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801d178:	0a10      	lsrs	r0, r2, #8
 801d17a:	54e0      	strb	r0, [r4, r3]
				q = q + 2;
 801d17c:	3302      	adds	r3, #2
				byte_low = Line_buff[cnt] & 0x00FF;
 801d17e:	f88e 2001 	strb.w	r2, [lr, #1]
				q = q + 2;
 801d182:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + byte_high + byte_low;
 801d184:	fa50 f282 	uxtab	r2, r0, r2
 801d188:	440a      	add	r2, r1
				if(q >= 62 || cnt == 1023){
 801d18a:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + byte_high + byte_low;
 801d18c:	b291      	uxth	r1, r2
				if(q >= 62 || cnt == 1023){
 801d18e:	d803      	bhi.n	801d198 <packet_generator_data_send+0x54>
 801d190:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801d194:	4295      	cmp	r5, r2
 801d196:	d118      	bne.n	801d1ca <packet_generator_data_send+0x86>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d198:	7860      	ldrb	r0, [r4, #1]
 801d19a:	7822      	ldrb	r2, [r4, #0]
 801d19c:	4402      	add	r2, r0
 801d19e:	78a0      	ldrb	r0, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d1a0:	0a33      	lsrs	r3, r6, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d1a2:	4402      	add	r2, r0
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d1a4:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801d1a6:	b2f3      	uxtb	r3, r6
 801d1a8:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d1aa:	4413      	add	r3, r2
 801d1ac:	185a      	adds	r2, r3, r1
 801d1ae:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d1b2:	4641      	mov	r1, r8
 801d1b4:	2240      	movs	r2, #64	; 0x40
 801d1b6:	4648      	mov	r0, r9
 801d1b8:	f7ea fecc 	bl	8007f54 <USBD_CUSTOM_HID_SendReport>
					packet_number = packet_number + 1;
 801d1bc:	3601      	adds	r6, #1
					HAL_Delay(3);
 801d1be:	2003      	movs	r0, #3
 801d1c0:	f7e3 ff34 	bl	800102c <HAL_Delay>
					packet_number = packet_number + 1;
 801d1c4:	b2b6      	uxth	r6, r6
					CRC_pack = 0;
 801d1c6:	2100      	movs	r1, #0
					q = 5;
 801d1c8:	2305      	movs	r3, #5
 801d1ca:	3501      	adds	r5, #1
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801d1cc:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801d1d0:	d1ce      	bne.n	801d170 <packet_generator_data_send+0x2c>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801d1d2:	4b05      	ldr	r3, [pc, #20]	; (801d1e8 <packet_generator_data_send+0xa4>)
 801d1d4:	2200      	movs	r2, #0
 801d1d6:	601a      	str	r2, [r3, #0]
 801d1d8:	605a      	str	r2, [r3, #4]
 801d1da:	609a      	str	r2, [r3, #8]
 801d1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d1e0:	2008f55c 	.word	0x2008f55c
 801d1e4:	2000e53c 	.word	0x2000e53c
 801d1e8:	2008f550 	.word	0x2008f550
 801d1ec:	20095cec 	.word	0x20095cec

0801d1f0 <packet_generator_Rabs_data_send>:
{
 801d1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801d1f4:	4c3b      	ldr	r4, [pc, #236]	; (801d2e4 <packet_generator_Rabs_data_send+0xf4>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801d1f6:	4d3c      	ldr	r5, [pc, #240]	; (801d2e8 <packet_generator_Rabs_data_send+0xf8>)
 801d1f8:	4f3c      	ldr	r7, [pc, #240]	; (801d2ec <packet_generator_Rabs_data_send+0xfc>)
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d1fa:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801d310 <packet_generator_Rabs_data_send+0x120>
			memset(dataToSend, 0, sizeof(dataToSend));
 801d1fe:	2240      	movs	r2, #64	; 0x40
 801d200:	2100      	movs	r1, #0
 801d202:	4620      	mov	r0, r4
 801d204:	f003 f83d 	bl	8020282 <memset>
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801d208:	4b39      	ldr	r3, [pc, #228]	; (801d2f0 <packet_generator_Rabs_data_send+0x100>)
 801d20a:	8828      	ldrh	r0, [r5, #0]
 801d20c:	4939      	ldr	r1, [pc, #228]	; (801d2f4 <packet_generator_Rabs_data_send+0x104>)
 801d20e:	ed93 0a00 	vldr	s0, [r3]
 801d212:	f7fc fd4d 	bl	8019cb0 <Rabs_calc_Factor1>
 801d216:	4b38      	ldr	r3, [pc, #224]	; (801d2f8 <packet_generator_Rabs_data_send+0x108>)
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801d218:	4938      	ldr	r1, [pc, #224]	; (801d2fc <packet_generator_Rabs_data_send+0x10c>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801d21a:	ed83 0a00 	vstr	s0, [r3]
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801d21e:	edd1 0a00 	vldr	s1, [r1]
 801d222:	4b37      	ldr	r3, [pc, #220]	; (801d300 <packet_generator_Rabs_data_send+0x110>)
 801d224:	8829      	ldrh	r1, [r5, #0]
 801d226:	4833      	ldr	r0, [pc, #204]	; (801d2f4 <packet_generator_Rabs_data_send+0x104>)
 801d228:	4a36      	ldr	r2, [pc, #216]	; (801d304 <packet_generator_Rabs_data_send+0x114>)
 801d22a:	f7fc fd75 	bl	8019d18 <Rabs_calc_main>
			dataToSend[0] = 0xAB;
 801d22e:	23ab      	movs	r3, #171	; 0xab
 801d230:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801d232:	2312      	movs	r3, #18
 801d234:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x03;
 801d236:	2303      	movs	r3, #3
 801d238:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d23a:	4b33      	ldr	r3, [pc, #204]	; (801d308 <packet_generator_Rabs_data_send+0x118>)
 801d23c:	781b      	ldrb	r3, [r3, #0]
 801d23e:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801d240:	f04f 0500 	mov.w	r5, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d244:	bf18      	it	ne
 801d246:	2301      	movne	r3, #1
 801d248:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801d24a:	71a5      	strb	r5, [r4, #6]
			packet_number = 0;
 801d24c:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801d24e:	4628      	mov	r0, r5
			q = 7;
 801d250:	2307      	movs	r3, #7
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d252:	46a0      	mov	r8, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801d254:	f857 2d04 	ldr.w	r2, [r7, #-4]!
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d258:	f103 0c01 	add.w	ip, r3, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801d25c:	0e11      	lsrs	r1, r2, #24
 801d25e:	54e1      	strb	r1, [r4, r3]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d260:	f103 0e02 	add.w	lr, r3, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d264:	0c11      	lsrs	r1, r2, #16
 801d266:	f804 100c 	strb.w	r1, [r4, ip]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d26a:	0a11      	lsrs	r1, r2, #8
 801d26c:	f804 100e 	strb.w	r1, [r4, lr]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801d270:	18e1      	adds	r1, r4, r3
 801d272:	b2d2      	uxtb	r2, r2
 801d274:	70ca      	strb	r2, [r1, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d276:	5ce1      	ldrb	r1, [r4, r3]
 801d278:	4401      	add	r1, r0
 801d27a:	f814 000c 	ldrb.w	r0, [r4, ip]
 801d27e:	4401      	add	r1, r0
 801d280:	f814 000e 	ldrb.w	r0, [r4, lr]
				q = q + 4;
 801d284:	3304      	adds	r3, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d286:	4408      	add	r0, r1
				q = q + 4;
 801d288:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d28a:	fa12 f080 	uxtah	r0, r2, r0
				if(q >= 62 || cnt == 1023){
 801d28e:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d290:	b280      	uxth	r0, r0
				if(q >= 62 || cnt == 1023){
 801d292:	d803      	bhi.n	801d29c <packet_generator_Rabs_data_send+0xac>
 801d294:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801d298:	4295      	cmp	r5, r2
 801d29a:	d116      	bne.n	801d2ca <packet_generator_Rabs_data_send+0xda>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d29c:	7861      	ldrb	r1, [r4, #1]
 801d29e:	7822      	ldrb	r2, [r4, #0]
 801d2a0:	440a      	add	r2, r1
 801d2a2:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d2a4:	0a33      	lsrs	r3, r6, #8
 801d2a6:	70e3      	strb	r3, [r4, #3]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d2a8:	440a      	add	r2, r1
					dataToSend[4] = packet_number & 0x00FF;
 801d2aa:	b2f3      	uxtb	r3, r6
 801d2ac:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d2ae:	4413      	add	r3, r2
 801d2b0:	4418      	add	r0, r3
					packet_number = packet_number + 1;
 801d2b2:	3601      	adds	r6, #1
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d2b4:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801d2b8:	b2b6      	uxth	r6, r6
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d2ba:	2240      	movs	r2, #64	; 0x40
 801d2bc:	4641      	mov	r1, r8
 801d2be:	4648      	mov	r0, r9
 801d2c0:	f7ea fe48 	bl	8007f54 <USBD_CUSTOM_HID_SendReport>
					while(usb_status!=USBD_OK)
 801d2c4:	2800      	cmp	r0, #0
 801d2c6:	d1f8      	bne.n	801d2ba <packet_generator_Rabs_data_send+0xca>
					q = 7;
 801d2c8:	2307      	movs	r3, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801d2ca:	3501      	adds	r5, #1
 801d2cc:	b2ad      	uxth	r5, r5
 801d2ce:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801d2d2:	d1bf      	bne.n	801d254 <packet_generator_Rabs_data_send+0x64>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801d2d4:	4b0d      	ldr	r3, [pc, #52]	; (801d30c <packet_generator_Rabs_data_send+0x11c>)
 801d2d6:	2200      	movs	r2, #0
 801d2d8:	601a      	str	r2, [r3, #0]
 801d2da:	605a      	str	r2, [r3, #4]
 801d2dc:	609a      	str	r2, [r3, #8]
 801d2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d2e2:	bf00      	nop
 801d2e4:	2008f55c 	.word	0x2008f55c
 801d2e8:	20009d22 	.word	0x20009d22
 801d2ec:	2000d53c 	.word	0x2000d53c
 801d2f0:	2005193c 	.word	0x2005193c
 801d2f4:	2000e53c 	.word	0x2000e53c
 801d2f8:	20009d30 	.word	0x20009d30
 801d2fc:	20009d34 	.word	0x20009d34
 801d300:	2000c53c 	.word	0x2000c53c
 801d304:	20051940 	.word	0x20051940
 801d308:	20000ebc 	.word	0x20000ebc
 801d30c:	2008f550 	.word	0x2008f550
 801d310:	20095cec 	.word	0x20095cec

0801d314 <packet_generator_Calculated_data_send>:
{
 801d314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801d318:	4c8a      	ldr	r4, [pc, #552]	; (801d544 <packet_generator_Calculated_data_send+0x230>)
 801d31a:	f8df 9250 	ldr.w	r9, [pc, #592]	; 801d56c <packet_generator_Calculated_data_send+0x258>
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d31e:	f8df b244 	ldr.w	fp, [pc, #580]	; 801d564 <packet_generator_Calculated_data_send+0x250>
{
 801d322:	b087      	sub	sp, #28
			memset(dataToSend, 0, sizeof(dataToSend));
 801d324:	2240      	movs	r2, #64	; 0x40
 801d326:	2100      	movs	r1, #0
 801d328:	4620      	mov	r0, r4
 801d32a:	f002 ffaa 	bl	8020282 <memset>
			delta_Eab_Measure = Calculate_deltaEab();
 801d32e:	f7f1 fcb3 	bl	800ec98 <Calculate_deltaEab>
 801d332:	4b85      	ldr	r3, [pc, #532]	; (801d548 <packet_generator_Calculated_data_send+0x234>)
 801d334:	8018      	strh	r0, [r3, #0]
			dataToSend[0] = 0xAB;
 801d336:	23ab      	movs	r3, #171	; 0xab
 801d338:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801d33a:	2312      	movs	r3, #18
 801d33c:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801d33e:	2304      	movs	r3, #4
 801d340:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d342:	4b82      	ldr	r3, [pc, #520]	; (801d54c <packet_generator_Calculated_data_send+0x238>)
 801d344:	781b      	ldrb	r3, [r3, #0]
 801d346:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801d348:	f04f 0800 	mov.w	r8, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d34c:	bf18      	it	ne
 801d34e:	2301      	movne	r3, #1
 801d350:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801d352:	f884 8006 	strb.w	r8, [r4, #6]
			uint16_t CRC_pack = 0, packet_number = 0;
 801d356:	4645      	mov	r5, r8
 801d358:	4647      	mov	r7, r8
			q = 7;
 801d35a:	2607      	movs	r6, #7
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d35c:	46a2      	mov	sl, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801d35e:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 801d362:	9305      	str	r3, [sp, #20]
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801d364:	0e1a      	lsrs	r2, r3, #24
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d366:	1c70      	adds	r0, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801d368:	55a2      	strb	r2, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d36a:	1cb1      	adds	r1, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d36c:	0c1a      	lsrs	r2, r3, #16
 801d36e:	5422      	strb	r2, [r4, r0]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d370:	0a1a      	lsrs	r2, r3, #8
 801d372:	5462      	strb	r2, [r4, r1]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801d374:	19a2      	adds	r2, r4, r6
 801d376:	b2db      	uxtb	r3, r3
 801d378:	70d3      	strb	r3, [r2, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d37a:	5da2      	ldrb	r2, [r4, r6]
 801d37c:	443a      	add	r2, r7
 801d37e:	5c27      	ldrb	r7, [r4, r0]
 801d380:	443a      	add	r2, r7
 801d382:	5c67      	ldrb	r7, [r4, r1]
				q = q + 4;
 801d384:	3604      	adds	r6, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d386:	4417      	add	r7, r2
				q = q + 4;
 801d388:	b2f6      	uxtb	r6, r6
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d38a:	fa13 f787 	uxtah	r7, r3, r7
				if(q >= 62 || cnt == 1023){
 801d38e:	2e3d      	cmp	r6, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801d390:	b2bf      	uxth	r7, r7
				if(q >= 62 || cnt == 1023){
 801d392:	d803      	bhi.n	801d39c <packet_generator_Calculated_data_send+0x88>
 801d394:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801d398:	4598      	cmp	r8, r3
 801d39a:	d11a      	bne.n	801d3d2 <packet_generator_Calculated_data_send+0xbe>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d39c:	7861      	ldrb	r1, [r4, #1]
 801d39e:	7822      	ldrb	r2, [r4, #0]
 801d3a0:	440a      	add	r2, r1
 801d3a2:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d3a4:	0a2b      	lsrs	r3, r5, #8
 801d3a6:	70e3      	strb	r3, [r4, #3]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d3a8:	440a      	add	r2, r1
					dataToSend[4] = packet_number & 0x00FF;
 801d3aa:	b2eb      	uxtb	r3, r5
 801d3ac:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d3ae:	4413      	add	r3, r2
 801d3b0:	441f      	add	r7, r3
					packet_number = packet_number + 1;
 801d3b2:	3501      	adds	r5, #1
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801d3b4:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801d3b8:	b2ad      	uxth	r5, r5
						usb_status = USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d3ba:	2240      	movs	r2, #64	; 0x40
 801d3bc:	4651      	mov	r1, sl
 801d3be:	4658      	mov	r0, fp
 801d3c0:	f7ea fdc8 	bl	8007f54 <USBD_CUSTOM_HID_SendReport>
					while(usb_status!=USBD_OK)
 801d3c4:	4607      	mov	r7, r0
 801d3c6:	2800      	cmp	r0, #0
 801d3c8:	d1f7      	bne.n	801d3ba <packet_generator_Calculated_data_send+0xa6>
					HAL_Delay(3);
 801d3ca:	2003      	movs	r0, #3
 801d3cc:	f7e3 fe2e 	bl	800102c <HAL_Delay>
					q = 7;
 801d3d0:	2607      	movs	r6, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801d3d2:	f108 0801 	add.w	r8, r8, #1
 801d3d6:	fa1f f888 	uxth.w	r8, r8
 801d3da:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 801d3de:	d1be      	bne.n	801d35e <packet_generator_Calculated_data_send+0x4a>
			memset(dataToSend, 0, sizeof(dataToSend));
 801d3e0:	2240      	movs	r2, #64	; 0x40
 801d3e2:	2100      	movs	r1, #0
 801d3e4:	4857      	ldr	r0, [pc, #348]	; (801d544 <packet_generator_Calculated_data_send+0x230>)
 801d3e6:	f002 ff4c 	bl	8020282 <memset>
			dataToSend[0] = 0xAB;
 801d3ea:	23ab      	movs	r3, #171	; 0xab
 801d3ec:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801d3ee:	2312      	movs	r3, #18
 801d3f0:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801d3f2:	2304      	movs	r3, #4
 801d3f4:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d3f6:	4b55      	ldr	r3, [pc, #340]	; (801d54c <packet_generator_Calculated_data_send+0x238>)
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801d3f8:	4a55      	ldr	r2, [pc, #340]	; (801d550 <packet_generator_Calculated_data_send+0x23c>)
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801d3fa:	781b      	ldrb	r3, [r3, #0]
 801d3fc:	3300      	adds	r3, #0
 801d3fe:	bf18      	it	ne
 801d400:	2301      	movne	r3, #1
 801d402:	7163      	strb	r3, [r4, #5]
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801d404:	6813      	ldr	r3, [r2, #0]
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d406:	f106 0a01 	add.w	sl, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801d40a:	0e19      	lsrs	r1, r3, #24
 801d40c:	55a1      	strb	r1, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d40e:	f106 0902 	add.w	r9, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d412:	0c19      	lsrs	r1, r3, #16
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801d414:	f106 0803 	add.w	r8, r6, #3
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801d418:	f804 100a 	strb.w	r1, [r4, sl]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801d41c:	0a19      	lsrs	r1, r3, #8
 801d41e:	f804 1009 	strb.w	r1, [r4, r9]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801d422:	f804 3008 	strb.w	r3, [r4, r8]
				memcpy(&buff_float, &colorimetry_xy1964[1], sizeof(float));
 801d426:	6853      	ldr	r3, [r2, #4]
 801d428:	9305      	str	r3, [sp, #20]
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801d42a:	f106 0c04 	add.w	ip, r6, #4
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801d42e:	f106 0e05 	add.w	lr, r6, #5
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801d432:	0e1a      	lsrs	r2, r3, #24
 801d434:	f804 200c 	strb.w	r2, [r4, ip]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801d438:	1db0      	adds	r0, r6, #6
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801d43a:	0c1a      	lsrs	r2, r3, #16
 801d43c:	f804 200e 	strb.w	r2, [r4, lr]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801d440:	0a1a      	lsrs	r2, r3, #8
 801d442:	5422      	strb	r2, [r4, r0]
				dataToSend[q+7] = (buff_float) & 0x000000FF;
 801d444:	1df2      	adds	r2, r6, #7
 801d446:	9203      	str	r2, [sp, #12]
 801d448:	54a3      	strb	r3, [r4, r2]
				memcpy(&buff_float, &Tc_Measure, sizeof(uint16_t));
 801d44a:	4b42      	ldr	r3, [pc, #264]	; (801d554 <packet_generator_Calculated_data_send+0x240>)
 801d44c:	881b      	ldrh	r3, [r3, #0]
 801d44e:	f8ad 3014 	strh.w	r3, [sp, #20]
				dataToSend[q+8]= (buff_float >> 8) & 0x000000FF;
 801d452:	f106 0308 	add.w	r3, r6, #8
 801d456:	9300      	str	r3, [sp, #0]
 801d458:	9b05      	ldr	r3, [sp, #20]
 801d45a:	9900      	ldr	r1, [sp, #0]
 801d45c:	0a1a      	lsrs	r2, r3, #8
 801d45e:	5462      	strb	r2, [r4, r1]
				dataToSend[q+9] = (buff_float) & 0x000000FF;
 801d460:	f106 0209 	add.w	r2, r6, #9
 801d464:	9201      	str	r2, [sp, #4]
 801d466:	54a3      	strb	r3, [r4, r2]
				dataToSend[q+10]= Source_Type;
 801d468:	f106 030a 	add.w	r3, r6, #10
 801d46c:	9302      	str	r3, [sp, #8]
 801d46e:	4b3a      	ldr	r3, [pc, #232]	; (801d558 <packet_generator_Calculated_data_send+0x244>)
 801d470:	9a02      	ldr	r2, [sp, #8]
 801d472:	781b      	ldrb	r3, [r3, #0]
 801d474:	54a3      	strb	r3, [r4, r2]
			if(Calculate_deltaEab_Done == 0x01)
 801d476:	4b39      	ldr	r3, [pc, #228]	; (801d55c <packet_generator_Calculated_data_send+0x248>)
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801d478:	4932      	ldr	r1, [pc, #200]	; (801d544 <packet_generator_Calculated_data_send+0x230>)
			if(Calculate_deltaEab_Done == 0x01)
 801d47a:	781b      	ldrb	r3, [r3, #0]
 801d47c:	2b01      	cmp	r3, #1
				memcpy(&buff_float, &delta_Eab_Measure, sizeof(int16_t));
 801d47e:	bf01      	itttt	eq
 801d480:	4b31      	ldreq	r3, [pc, #196]	; (801d548 <packet_generator_Calculated_data_send+0x234>)
 801d482:	881b      	ldrheq	r3, [r3, #0]
 801d484:	f8ad 3014 	strheq.w	r3, [sp, #20]
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801d488:	9b05      	ldreq	r3, [sp, #20]
 801d48a:	4434      	add	r4, r6
 801d48c:	bf0b      	itete	eq
 801d48e:	0a1a      	lsreq	r2, r3, #8
			} else {dataToSend[q+11] = 0;
 801d490:	2300      	movne	r3, #0
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801d492:	72e2      	strbeq	r2, [r4, #11]
			} else {dataToSend[q+11] = 0;
 801d494:	72e3      	strbne	r3, [r4, #11]
				dataToSend[q+12] = 0;
 801d496:	7323      	strb	r3, [r4, #12]
				memcpy(&buff_float, &colorimetry_xy1931[0], sizeof(float));
 801d498:	4c31      	ldr	r4, [pc, #196]	; (801d560 <packet_generator_Calculated_data_send+0x24c>)
 801d49a:	6822      	ldr	r2, [r4, #0]
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801d49c:	198b      	adds	r3, r1, r6
 801d49e:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801d4a2:	f883 b00d 	strb.w	fp, [r3, #13]
				dataToSend[q+14] = (buff_float >> 16) & 0x000000FF;
 801d4a6:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801d4aa:	f883 b00e 	strb.w	fp, [r3, #14]
				dataToSend[q+16] = (buff_float) & 0x000000FF;
 801d4ae:	741a      	strb	r2, [r3, #16]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801d4b0:	ea4f 2b12 	mov.w	fp, r2, lsr #8
				memcpy(&buff_float, &colorimetry_xy1931[1], sizeof(float));
 801d4b4:	6862      	ldr	r2, [r4, #4]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801d4b6:	f883 b00f 	strb.w	fp, [r3, #15]
				dataToSend[q+17] = (buff_float >> 24) & 0x000000FF;
 801d4ba:	0e14      	lsrs	r4, r2, #24
 801d4bc:	745c      	strb	r4, [r3, #17]
				dataToSend[q+18] = (buff_float >> 16) & 0x000000FF;
 801d4be:	0c14      	lsrs	r4, r2, #16
 801d4c0:	749c      	strb	r4, [r3, #18]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801d4c2:	0a14      	lsrs	r4, r2, #8
				dataToSend[q+20] = (buff_float) & 0x000000FF;
 801d4c4:	751a      	strb	r2, [r3, #20]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801d4c6:	74dc      	strb	r4, [r3, #19]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801d4c8:	0a2a      	lsrs	r2, r5, #8
 801d4ca:	70ca      	strb	r2, [r1, #3]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801d4cc:	780c      	ldrb	r4, [r1, #0]
 801d4ce:	784a      	ldrb	r2, [r1, #1]
 801d4d0:	4422      	add	r2, r4
 801d4d2:	788c      	ldrb	r4, [r1, #2]
					dataToSend[4] = packet_number & 0x00FF;
 801d4d4:	b2ed      	uxtb	r5, r5
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801d4d6:	4422      	add	r2, r4
					dataToSend[4] = packet_number & 0x00FF;
 801d4d8:	710d      	strb	r5, [r1, #4]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801d4da:	4415      	add	r5, r2
 801d4dc:	19ea      	adds	r2, r5, r7
 801d4de:	5d8d      	ldrb	r5, [r1, r6]
 801d4e0:	f811 4008 	ldrb.w	r4, [r1, r8]
 801d4e4:	5c08      	ldrb	r0, [r1, r0]
 801d4e6:	442a      	add	r2, r5
 801d4e8:	f811 500a 	ldrb.w	r5, [r1, sl]
 801d4ec:	442a      	add	r2, r5
 801d4ee:	f811 5009 	ldrb.w	r5, [r1, r9]
 801d4f2:	442a      	add	r2, r5
 801d4f4:	4422      	add	r2, r4
 801d4f6:	f811 400c 	ldrb.w	r4, [r1, ip]
 801d4fa:	4422      	add	r2, r4
 801d4fc:	f811 400e 	ldrb.w	r4, [r1, lr]
 801d500:	4422      	add	r2, r4
 801d502:	4402      	add	r2, r0
 801d504:	9803      	ldr	r0, [sp, #12]
 801d506:	5c08      	ldrb	r0, [r1, r0]
 801d508:	4402      	add	r2, r0
 801d50a:	9800      	ldr	r0, [sp, #0]
 801d50c:	5c08      	ldrb	r0, [r1, r0]
 801d50e:	4402      	add	r2, r0
 801d510:	9801      	ldr	r0, [sp, #4]
 801d512:	5c08      	ldrb	r0, [r1, r0]
 801d514:	4402      	add	r2, r0
 801d516:	9802      	ldr	r0, [sp, #8]
 801d518:	7adb      	ldrb	r3, [r3, #11]
 801d51a:	5c08      	ldrb	r0, [r1, r0]
 801d51c:	4402      	add	r2, r0
 801d51e:	4413      	add	r3, r2
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d520:	4810      	ldr	r0, [pc, #64]	; (801d564 <packet_generator_Calculated_data_send+0x250>)
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + dataToSend[q]+dataToSend[q+1]+dataToSend[q+2] + dataToSend[q+3] + dataToSend[q+4]+
 801d522:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d526:	2240      	movs	r2, #64	; 0x40
 801d528:	f7ea fd14 	bl	8007f54 <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(3);
 801d52c:	2003      	movs	r0, #3
 801d52e:	f7e3 fd7d 	bl	800102c <HAL_Delay>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801d532:	4b0d      	ldr	r3, [pc, #52]	; (801d568 <packet_generator_Calculated_data_send+0x254>)
 801d534:	2200      	movs	r2, #0
 801d536:	601a      	str	r2, [r3, #0]
 801d538:	605a      	str	r2, [r3, #4]
 801d53a:	609a      	str	r2, [r3, #8]
}
 801d53c:	b007      	add	sp, #28
 801d53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d542:	bf00      	nop
 801d544:	2008f55c 	.word	0x2008f55c
 801d548:	20090ab6 	.word	0x20090ab6
 801d54c:	20000ebc 	.word	0x20000ebc
 801d550:	2008f548 	.word	0x2008f548
 801d554:	20054940 	.word	0x20054940
 801d558:	20090ab9 	.word	0x20090ab9
 801d55c:	200056a1 	.word	0x200056a1
 801d560:	2008f540 	.word	0x2008f540
 801d564:	20095cec 	.word	0x20095cec
 801d568:	2008f550 	.word	0x2008f550
 801d56c:	2000d53c 	.word	0x2000d53c

0801d570 <usb_receive_processing>:
{
 801d570:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if(dataToReceive[0] == 0xAB)
 801d574:	4ca6      	ldr	r4, [pc, #664]	; (801d810 <usb_receive_processing+0x2a0>)
 801d576:	f894 9000 	ldrb.w	r9, [r4]
	uint32_t PAGEError = 0;
 801d57a:	2500      	movs	r5, #0
		if(dataToReceive[0] == 0xAB)
 801d57c:	f1b9 0fab 	cmp.w	r9, #171	; 0xab
	uint32_t PAGEError = 0;
 801d580:	9501      	str	r5, [sp, #4]
 801d582:	4626      	mov	r6, r4
		if(dataToReceive[0] == 0xAB)
 801d584:	d12a      	bne.n	801d5dc <usb_receive_processing+0x6c>
			if(dataToReceive[1] == 0x12)
 801d586:	f894 8001 	ldrb.w	r8, [r4, #1]
 801d58a:	f1b8 0f12 	cmp.w	r8, #18
 801d58e:	d117      	bne.n	801d5c0 <usb_receive_processing+0x50>
			switch(dataToReceive[2])
 801d590:	78a7      	ldrb	r7, [r4, #2]
 801d592:	2f0a      	cmp	r7, #10
 801d594:	f000 80dd 	beq.w	801d752 <usb_receive_processing+0x1e2>
 801d598:	d815      	bhi.n	801d5c6 <usb_receive_processing+0x56>
 801d59a:	2f02      	cmp	r7, #2
 801d59c:	d023      	beq.n	801d5e6 <usb_receive_processing+0x76>
 801d59e:	2f04      	cmp	r7, #4
 801d5a0:	f000 81a2 	beq.w	801d8e8 <usb_receive_processing+0x378>
 801d5a4:	2f01      	cmp	r7, #1
 801d5a6:	d119      	bne.n	801d5dc <usb_receive_processing+0x6c>
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801d5a8:	78f2      	ldrb	r2, [r6, #3]
						send_usb_block = 1;
 801d5aa:	4c9a      	ldr	r4, [pc, #616]	; (801d814 <usb_receive_processing+0x2a4>)
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801d5ac:	2a01      	cmp	r2, #1
						send_usb_block = 1;
 801d5ae:	7027      	strb	r7, [r4, #0]
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801d5b0:	d116      	bne.n	801d5e0 <usb_receive_processing+0x70>
						packet_generator_Rabs_data_send();
 801d5b2:	f7ff fe1d 	bl	801d1f0 <packet_generator_Rabs_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d5b6:	2300      	movs	r3, #0
 801d5b8:	6033      	str	r3, [r6, #0]
 801d5ba:	6073      	str	r3, [r6, #4]
 801d5bc:	60b3      	str	r3, [r6, #8]
						send_usb_block = 0;
 801d5be:	7023      	strb	r3, [r4, #0]
}
 801d5c0:	b002      	add	sp, #8
 801d5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch(dataToReceive[2])
 801d5c6:	2f0c      	cmp	r7, #12
 801d5c8:	f000 8146 	beq.w	801d858 <usb_receive_processing+0x2e8>
 801d5cc:	f0c0 80d8 	bcc.w	801d780 <usb_receive_processing+0x210>
 801d5d0:	2f0d      	cmp	r7, #13
 801d5d2:	f000 80a7 	beq.w	801d724 <usb_receive_processing+0x1b4>
 801d5d6:	2f66      	cmp	r7, #102	; 0x66
 801d5d8:	f000 816f 	beq.w	801d8ba <usb_receive_processing+0x34a>
			__asm("nop");
 801d5dc:	bf00      	nop
}
 801d5de:	e7ef      	b.n	801d5c0 <usb_receive_processing+0x50>
						packet_generator_data_send();
 801d5e0:	f7ff fdb0 	bl	801d144 <packet_generator_data_send>
 801d5e4:	e7e7      	b.n	801d5b6 <usb_receive_processing+0x46>
						send_usb_block = 0;
 801d5e6:	4b8b      	ldr	r3, [pc, #556]	; (801d814 <usb_receive_processing+0x2a4>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801d5e8:	4c8b      	ldr	r4, [pc, #556]	; (801d818 <usb_receive_processing+0x2a8>)
						send_usb_block = 0;
 801d5ea:	701d      	strb	r5, [r3, #0]
						memset(dataToSend, 0, sizeof(dataToSend));
 801d5ec:	4629      	mov	r1, r5
						if (exp_num != dataToReceive[3]){
 801d5ee:	4d8b      	ldr	r5, [pc, #556]	; (801d81c <usb_receive_processing+0x2ac>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801d5f0:	2240      	movs	r2, #64	; 0x40
 801d5f2:	4620      	mov	r0, r4
 801d5f4:	f002 fe45 	bl	8020282 <memset>
						if (exp_num != dataToReceive[3]){
 801d5f8:	78f3      	ldrb	r3, [r6, #3]
 801d5fa:	782a      	ldrb	r2, [r5, #0]
						dataToSend[0] = 0xAB;
 801d5fc:	f884 9000 	strb.w	r9, [r4]
						if (exp_num != dataToReceive[3]){
 801d600:	4293      	cmp	r3, r2
						dataToSend[1] = 0x12;
 801d602:	f884 8001 	strb.w	r8, [r4, #1]
						dataToSend[2] = CMD_CNFG;
 801d606:	70a7      	strb	r7, [r4, #2]
						if (exp_num != dataToReceive[3]){
 801d608:	d07a      	beq.n	801d700 <usb_receive_processing+0x190>
							exp_num = dataToReceive[3];
 801d60a:	702b      	strb	r3, [r5, #0]
							htim2.Init.Period = exposure_timer_period[exp_num];
 801d60c:	782a      	ldrb	r2, [r5, #0]
 801d60e:	4b84      	ldr	r3, [pc, #528]	; (801d820 <usb_receive_processing+0x2b0>)
 801d610:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801d614:	4b83      	ldr	r3, [pc, #524]	; (801d824 <usb_receive_processing+0x2b4>)
 801d616:	60da      	str	r2, [r3, #12]
							MX_TIM2_Init();
 801d618:	f7ff fbc6 	bl	801cda8 <MX_TIM2_Init>
							Calibration_Exposure_Change(exp_num);
 801d61c:	7828      	ldrb	r0, [r5, #0]
 801d61e:	f7f1 fc55 	bl	800eecc <Calibration_Exposure_Change>
						if (LaserOnOff != dataToReceive[4]){
 801d622:	4a81      	ldr	r2, [pc, #516]	; (801d828 <usb_receive_processing+0x2b8>)
 801d624:	7933      	ldrb	r3, [r6, #4]
 801d626:	7811      	ldrb	r1, [r2, #0]
 801d628:	428b      	cmp	r3, r1
 801d62a:	4691      	mov	r9, r2
 801d62c:	d06c      	beq.n	801d708 <usb_receive_processing+0x198>
							LaserOnOff = (dataToReceive[4] > 0) ? 1 : 0;
 801d62e:	3300      	adds	r3, #0
 801d630:	bf18      	it	ne
 801d632:	2301      	movne	r3, #1
 801d634:	7013      	strb	r3, [r2, #0]
							if(LaserOnOff == 0){
 801d636:	7813      	ldrb	r3, [r2, #0]
 801d638:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801d63c:	2b00      	cmp	r3, #0
 801d63e:	d161      	bne.n	801d704 <usb_receive_processing+0x194>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801d640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801d644:	4879      	ldr	r0, [pc, #484]	; (801d82c <usb_receive_processing+0x2bc>)
 801d646:	f7e4 ff71 	bl	800252c <HAL_GPIO_WritePin>
						if (VGain != dataToReceive[5]){
 801d64a:	4a79      	ldr	r2, [pc, #484]	; (801d830 <usb_receive_processing+0x2c0>)
 801d64c:	7973      	ldrb	r3, [r6, #5]
 801d64e:	7811      	ldrb	r1, [r2, #0]
 801d650:	428b      	cmp	r3, r1
 801d652:	4690      	mov	r8, r2
 801d654:	d05c      	beq.n	801d710 <usb_receive_processing+0x1a0>
							VGain = (dataToReceive[5] > 0) ? 1 : 0;
 801d656:	3300      	adds	r3, #0
 801d658:	bf18      	it	ne
 801d65a:	2301      	movne	r3, #1
 801d65c:	7013      	strb	r3, [r2, #0]
							if(VGain == 0){
 801d65e:	7813      	ldrb	r3, [r2, #0]
 801d660:	2b00      	cmp	r3, #0
 801d662:	d153      	bne.n	801d70c <usb_receive_processing+0x19c>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 801d664:	2201      	movs	r2, #1
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801d666:	2120      	movs	r1, #32
 801d668:	4872      	ldr	r0, [pc, #456]	; (801d834 <usb_receive_processing+0x2c4>)
 801d66a:	f7e4 ff5f 	bl	800252c <HAL_GPIO_WritePin>
						if (TFT_ON_OFF != dataToReceive[6]){
 801d66e:	4f72      	ldr	r7, [pc, #456]	; (801d838 <usb_receive_processing+0x2c8>)
 801d670:	79b3      	ldrb	r3, [r6, #6]
 801d672:	783a      	ldrb	r2, [r7, #0]
 801d674:	4293      	cmp	r3, r2
 801d676:	d051      	beq.n	801d71c <usb_receive_processing+0x1ac>
							TFT_ON_OFF = (dataToReceive[6] > 0) ? 1 : 0;
 801d678:	3300      	adds	r3, #0
 801d67a:	bf18      	it	ne
 801d67c:	2301      	movne	r3, #1
 801d67e:	703b      	strb	r3, [r7, #0]
							if(TFT_ON_OFF == 1){
 801d680:	f897 a000 	ldrb.w	sl, [r7]
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801d684:	486d      	ldr	r0, [pc, #436]	; (801d83c <usb_receive_processing+0x2cc>)
							if(TFT_ON_OFF == 1){
 801d686:	fa5f fa8a 	uxtb.w	sl, sl
 801d68a:	f1ba 0f01 	cmp.w	sl, #1
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801d68e:	f04f 0104 	mov.w	r1, #4
							if(TFT_ON_OFF == 1){
 801d692:	d13f      	bne.n	801d714 <usb_receive_processing+0x1a4>
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801d694:	f7e8 fdba 	bl	800620c <HAL_TIM_PWM_Start>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET); //LTDC_En on
 801d698:	4652      	mov	r2, sl
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801d69a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801d69e:	4865      	ldr	r0, [pc, #404]	; (801d834 <usb_receive_processing+0x2c4>)
 801d6a0:	f7e4 ff44 	bl	800252c <HAL_GPIO_WritePin>
						if (Mode_EL != dataToReceive[7]){
 801d6a4:	4866      	ldr	r0, [pc, #408]	; (801d840 <usb_receive_processing+0x2d0>)
 801d6a6:	79f3      	ldrb	r3, [r6, #7]
 801d6a8:	7802      	ldrb	r2, [r0, #0]
 801d6aa:	429a      	cmp	r2, r3
 801d6ac:	d038      	beq.n	801d720 <usb_receive_processing+0x1b0>
							Mode_EL = (dataToReceive[7] > 0) ? 1 : 0; //Mode_EL=1 -Rabs_E, Mode_EL=0 -Rabs_L
 801d6ae:	3300      	adds	r3, #0
 801d6b0:	bf18      	it	ne
 801d6b2:	2301      	movne	r3, #1
 801d6b4:	7003      	strb	r3, [r0, #0]
						dataToSend[3] = exp_num;
 801d6b6:	7829      	ldrb	r1, [r5, #0]
						dataToSend[4] = LaserOnOff;
 801d6b8:	f899 5000 	ldrb.w	r5, [r9]
						dataToSend[5] = VGain;
 801d6bc:	f898 3000 	ldrb.w	r3, [r8]
						dataToSend[7] = Mode_EL;
 801d6c0:	7800      	ldrb	r0, [r0, #0]
 801d6c2:	71e0      	strb	r0, [r4, #7]
						dataToSend[5] = VGain;
 801d6c4:	b2da      	uxtb	r2, r3
						dataToSend[3] = exp_num;
 801d6c6:	b2c9      	uxtb	r1, r1
						dataToSend[4] = LaserOnOff;
 801d6c8:	b2ed      	uxtb	r5, r5
						dataToSend[6] = TFT_ON_OFF;
 801d6ca:	783b      	ldrb	r3, [r7, #0]
						dataToSend[3] = exp_num;
 801d6cc:	70e1      	strb	r1, [r4, #3]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801d6ce:	4429      	add	r1, r5
						dataToSend[5] = VGain;
 801d6d0:	7162      	strb	r2, [r4, #5]
						dataToSend[6] = TFT_ON_OFF;
 801d6d2:	b2db      	uxtb	r3, r3
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801d6d4:	440a      	add	r2, r1
						dataToSend[6] = TFT_ON_OFF;
 801d6d6:	71a3      	strb	r3, [r4, #6]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801d6d8:	4413      	add	r3, r2
 801d6da:	7822      	ldrb	r2, [r4, #0]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d6dc:	494e      	ldr	r1, [pc, #312]	; (801d818 <usb_receive_processing+0x2a8>)
 801d6de:	4859      	ldr	r0, [pc, #356]	; (801d844 <usb_receive_processing+0x2d4>)
						dataToSend[4] = LaserOnOff;
 801d6e0:	7125      	strb	r5, [r4, #4]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801d6e2:	4413      	add	r3, r2
 801d6e4:	7862      	ldrb	r2, [r4, #1]
 801d6e6:	4413      	add	r3, r2
 801d6e8:	78a2      	ldrb	r2, [r4, #2]
 801d6ea:	4413      	add	r3, r2
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d6ec:	2240      	movs	r2, #64	; 0x40
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801d6ee:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d6f2:	f7ea fc2f 	bl	8007f54 <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d6f6:	2300      	movs	r3, #0
 801d6f8:	6033      	str	r3, [r6, #0]
 801d6fa:	6073      	str	r3, [r6, #4]
 801d6fc:	60b3      	str	r3, [r6, #8]
					break;
 801d6fe:	e75f      	b.n	801d5c0 <usb_receive_processing+0x50>
							__asm("nop");
 801d700:	bf00      	nop
 801d702:	e78e      	b.n	801d622 <usb_receive_processing+0xb2>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801d704:	2201      	movs	r2, #1
 801d706:	e79b      	b.n	801d640 <usb_receive_processing+0xd0>
							__asm("nop");
 801d708:	bf00      	nop
 801d70a:	e79e      	b.n	801d64a <usb_receive_processing+0xda>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801d70c:	2200      	movs	r2, #0
 801d70e:	e7aa      	b.n	801d666 <usb_receive_processing+0xf6>
							__asm("nop");
 801d710:	bf00      	nop
 801d712:	e7ac      	b.n	801d66e <usb_receive_processing+0xfe>
								HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801d714:	f7e8 fdb0 	bl	8006278 <HAL_TIM_PWM_Stop>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801d718:	2200      	movs	r2, #0
 801d71a:	e7be      	b.n	801d69a <usb_receive_processing+0x12a>
							__asm("nop");
 801d71c:	bf00      	nop
 801d71e:	e7c1      	b.n	801d6a4 <usb_receive_processing+0x134>
							__asm("nop");
 801d720:	bf00      	nop
 801d722:	e7c8      	b.n	801d6b6 <usb_receive_processing+0x146>
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801d724:	4e48      	ldr	r6, [pc, #288]	; (801d848 <usb_receive_processing+0x2d8>)
						EraseInitStruct.NbPages = 44; 
 801d726:	232c      	movs	r3, #44	; 0x2c
 801d728:	60f3      	str	r3, [r6, #12]
						EraseInitStruct.Banks = FLASH_BANK_2; 
 801d72a:	2302      	movs	r3, #2
 801d72c:	6073      	str	r3, [r6, #4]
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801d72e:	6035      	str	r5, [r6, #0]
						EraseInitStruct.Page = 0;
 801d730:	60b5      	str	r5, [r6, #8]
						HAL_FLASH_Unlock(); 
 801d732:	f7e4 fbf7 	bl	8001f24 <HAL_FLASH_Unlock>
						if(HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 801d736:	a901      	add	r1, sp, #4
 801d738:	4630      	mov	r0, r6
 801d73a:	f7e4 fd0d 	bl	8002158 <HAL_FLASHEx_Erase>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801d73e:	4b43      	ldr	r3, [pc, #268]	; (801d84c <usb_receive_processing+0x2dc>)
 801d740:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801d744:	611a      	str	r2, [r3, #16]
						HAL_FLASH_Lock();
 801d746:	f7e4 fbff 	bl	8001f48 <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d74a:	6025      	str	r5, [r4, #0]
 801d74c:	6065      	str	r5, [r4, #4]
 801d74e:	60a5      	str	r5, [r4, #8]
					break;
 801d750:	e736      	b.n	801d5c0 <usb_receive_processing+0x50>
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801d752:	7923      	ldrb	r3, [r4, #4]
 801d754:	78e2      	ldrb	r2, [r4, #3]
 801d756:	041b      	lsls	r3, r3, #16
 801d758:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801d75c:	79a2      	ldrb	r2, [r4, #6]
 801d75e:	4313      	orrs	r3, r2
 801d760:	7962      	ldrb	r2, [r4, #5]
 801d762:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801d766:	4a3a      	ldr	r2, [pc, #232]	; (801d850 <usb_receive_processing+0x2e0>)
 801d768:	6013      	str	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801d76a:	4b2b      	ldr	r3, [pc, #172]	; (801d818 <usb_receive_processing+0x2a8>)
						dataToSend[2] = 0x1A;
 801d76c:	221a      	movs	r2, #26
						dataToSend[0] = 0xAB;
 801d76e:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801d772:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x1A;
 801d776:	709a      	strb	r2, [r3, #2]
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d778:	6025      	str	r5, [r4, #0]
 801d77a:	6065      	str	r5, [r4, #4]
 801d77c:	60a5      	str	r5, [r4, #8]
 801d77e:	e043      	b.n	801d808 <usb_receive_processing+0x298>
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801d780:	79e0      	ldrb	r0, [r4, #7]
 801d782:	f894 8008 	ldrb.w	r8, [r4, #8]
 801d786:	4e33      	ldr	r6, [pc, #204]	; (801d854 <usb_receive_processing+0x2e4>)
 801d788:	ea4f 4108 	mov.w	r1, r8, lsl #16
 801d78c:	0603      	lsls	r3, r0, #24
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801d78e:	f894 8009 	ldrb.w	r8, [r4, #9]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d792:	79a0      	ldrb	r0, [r4, #6]
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801d794:	462a      	mov	r2, r5
 801d796:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d798:	2100      	movs	r1, #0
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801d79a:	432a      	orrs	r2, r5
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d79c:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801d79e:	ea4f 2108 	mov.w	r1, r8, lsl #8
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801d7a2:	f894 8003 	ldrb.w	r8, [r4, #3]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d7a6:	4302      	orrs	r2, r0
 801d7a8:	432a      	orrs	r2, r5
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801d7aa:	ea4f 6008 	mov.w	r0, r8, lsl #24
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d7ae:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801d7b0:	f894 8004 	ldrb.w	r8, [r4, #4]
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801d7b4:	7aa1      	ldrb	r1, [r4, #10]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d7b6:	432a      	orrs	r2, r5
 801d7b8:	430b      	orrs	r3, r1
 801d7ba:	4302      	orrs	r2, r0
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801d7bc:	2100      	movs	r1, #0
 801d7be:	ea4f 4008 	mov.w	r0, r8, lsl #16
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d7c2:	f894 8005 	ldrb.w	r8, [r4, #5]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801d7c6:	4d22      	ldr	r5, [pc, #136]	; (801d850 <usb_receive_processing+0x2e0>)
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d7c8:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801d7ca:	2100      	movs	r1, #0
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801d7cc:	4302      	orrs	r2, r0
 801d7ce:	430b      	orrs	r3, r1
 801d7d0:	ea4f 2008 	mov.w	r0, r8, lsl #8
 801d7d4:	2100      	movs	r1, #0
 801d7d6:	4310      	orrs	r0, r2
 801d7d8:	4319      	orrs	r1, r3
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801d7da:	e9c6 0100 	strd	r0, r1, [r6]
						HAL_FLASH_Unlock();
 801d7de:	f7e4 fba1 	bl	8001f24 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801d7e2:	4b1a      	ldr	r3, [pc, #104]	; (801d84c <usb_receive_processing+0x2dc>)
 801d7e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801d7e8:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801d7ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d7ee:	6829      	ldr	r1, [r5, #0]
 801d7f0:	2000      	movs	r0, #0
 801d7f2:	f7e4 fbf1 	bl	8001fd8 <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801d7f6:	4604      	mov	r4, r0
 801d7f8:	2800      	cmp	r0, #0
 801d7fa:	d1f6      	bne.n	801d7ea <usb_receive_processing+0x27a>
						HAL_FLASH_Lock();
 801d7fc:	f7e4 fba4 	bl	8001f48 <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d800:	4b03      	ldr	r3, [pc, #12]	; (801d810 <usb_receive_processing+0x2a0>)
 801d802:	601c      	str	r4, [r3, #0]
 801d804:	605c      	str	r4, [r3, #4]
 801d806:	609c      	str	r4, [r3, #8]
						HAL_Delay(3);
 801d808:	2003      	movs	r0, #3
 801d80a:	f7e3 fc0f 	bl	800102c <HAL_Delay>
					break;
 801d80e:	e6d7      	b.n	801d5c0 <usb_receive_processing+0x50>
 801d810:	2008f550 	.word	0x2008f550
 801d814:	200905d1 	.word	0x200905d1
 801d818:	2008f55c 	.word	0x2008f55c
 801d81c:	200905b6 	.word	0x200905b6
 801d820:	08031dd0 	.word	0x08031dd0
 801d824:	20095c58 	.word	0x20095c58
 801d828:	2000bd38 	.word	0x2000bd38
 801d82c:	48000800 	.word	0x48000800
 801d830:	20000ebf 	.word	0x20000ebf
 801d834:	48001400 	.word	0x48001400
 801d838:	20000ebe 	.word	0x20000ebe
 801d83c:	200957b4 	.word	0x200957b4
 801d840:	20000ebc 	.word	0x20000ebc
 801d844:	20095cec 	.word	0x20095cec
 801d848:	200959ac 	.word	0x200959ac
 801d84c:	40022000 	.word	0x40022000
 801d850:	20095adc 	.word	0x20095adc
 801d854:	20095a48 	.word	0x20095a48
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801d858:	7920      	ldrb	r0, [r4, #4]
 801d85a:	78e3      	ldrb	r3, [r4, #3]
 801d85c:	0400      	lsls	r0, r0, #16
 801d85e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801d862:	79a3      	ldrb	r3, [r4, #6]
 801d864:	4318      	orrs	r0, r3
 801d866:	7963      	ldrb	r3, [r4, #5]
 801d868:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801d86c:	4b23      	ldr	r3, [pc, #140]	; (801d8fc <usb_receive_processing+0x38c>)
 801d86e:	6018      	str	r0, [r3, #0]
						flash_data_read = flash_data_read_buff(flash_address);
 801d870:	f7ee fb8d 	bl	800bf8e <flash_data_read_buff>
 801d874:	4b22      	ldr	r3, [pc, #136]	; (801d900 <usb_receive_processing+0x390>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801d876:	4a23      	ldr	r2, [pc, #140]	; (801d904 <usb_receive_processing+0x394>)
						flash_data_read = flash_data_read_buff(flash_address);
 801d878:	e9c3 0100 	strd	r0, r1, [r3]
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801d87c:	cb03      	ldmia	r3!, {r0, r1}
 801d87e:	6051      	str	r1, [r2, #4]
						dataToSend[0] = 0xAB;
 801d880:	4921      	ldr	r1, [pc, #132]	; (801d908 <usb_receive_processing+0x398>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801d882:	6010      	str	r0, [r2, #0]
						dataToSend[2] = 0x1C;
 801d884:	231c      	movs	r3, #28
 801d886:	708b      	strb	r3, [r1, #2]
						dataToSend[7] = flash_data_read_SND[7];
 801d888:	79d3      	ldrb	r3, [r2, #7]
 801d88a:	71cb      	strb	r3, [r1, #7]
						dataToSend[8] = flash_data_read_SND[6];
 801d88c:	7993      	ldrb	r3, [r2, #6]
 801d88e:	720b      	strb	r3, [r1, #8]
						dataToSend[9] = flash_data_read_SND[5];
 801d890:	7953      	ldrb	r3, [r2, #5]
 801d892:	724b      	strb	r3, [r1, #9]
						dataToSend[10]= flash_data_read_SND[4];
 801d894:	7913      	ldrb	r3, [r2, #4]
 801d896:	728b      	strb	r3, [r1, #10]
						dataToSend[3] = flash_data_read_SND[3];
 801d898:	78d3      	ldrb	r3, [r2, #3]
 801d89a:	70cb      	strb	r3, [r1, #3]
						dataToSend[4] = flash_data_read_SND[2];
 801d89c:	7893      	ldrb	r3, [r2, #2]
 801d89e:	710b      	strb	r3, [r1, #4]
						dataToSend[5] = flash_data_read_SND[1];
 801d8a0:	7853      	ldrb	r3, [r2, #1]
 801d8a2:	714b      	strb	r3, [r1, #5]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d8a4:	4819      	ldr	r0, [pc, #100]	; (801d90c <usb_receive_processing+0x39c>)
						dataToSend[6]	= flash_data_read_SND[0];
 801d8a6:	7813      	ldrb	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801d8a8:	f881 9000 	strb.w	r9, [r1]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d8ac:	2240      	movs	r2, #64	; 0x40
						dataToSend[1] = 0x12;
 801d8ae:	f881 8001 	strb.w	r8, [r1, #1]
						dataToSend[6]	= flash_data_read_SND[0];
 801d8b2:	718b      	strb	r3, [r1, #6]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d8b4:	f7ea fb4e 	bl	8007f54 <USBD_CUSTOM_HID_SendReport>
 801d8b8:	e75e      	b.n	801d778 <usb_receive_processing+0x208>
						if(CRC_STATUS == CRC_OK){
 801d8ba:	4a15      	ldr	r2, [pc, #84]	; (801d910 <usb_receive_processing+0x3a0>)
						dataToSend[0] = 0xAB;
 801d8bc:	4b12      	ldr	r3, [pc, #72]	; (801d908 <usb_receive_processing+0x398>)
						if(CRC_STATUS == CRC_OK){
 801d8be:	7812      	ldrb	r2, [r2, #0]
						dataToSend[0] = 0xAB;
 801d8c0:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801d8c4:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x66;
 801d8c8:	709f      	strb	r7, [r3, #2]
						if(CRC_STATUS == CRC_OK){
 801d8ca:	b95a      	cbnz	r2, 801d8e4 <usb_receive_processing+0x374>
							dataToSend[3] = 0x01;
 801d8cc:	2201      	movs	r2, #1
 801d8ce:	70da      	strb	r2, [r3, #3]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801d8d0:	2240      	movs	r2, #64	; 0x40
 801d8d2:	490d      	ldr	r1, [pc, #52]	; (801d908 <usb_receive_processing+0x398>)
 801d8d4:	480d      	ldr	r0, [pc, #52]	; (801d90c <usb_receive_processing+0x39c>)
 801d8d6:	f7ea fb3d 	bl	8007f54 <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d8da:	2300      	movs	r3, #0
 801d8dc:	6033      	str	r3, [r6, #0]
 801d8de:	6073      	str	r3, [r6, #4]
 801d8e0:	60b3      	str	r3, [r6, #8]
 801d8e2:	e791      	b.n	801d808 <usb_receive_processing+0x298>
							dataToSend[3] = 0x00;
 801d8e4:	70dd      	strb	r5, [r3, #3]
 801d8e6:	e7f3      	b.n	801d8d0 <usb_receive_processing+0x360>
						send_usb_block = 1;
 801d8e8:	4e0a      	ldr	r6, [pc, #40]	; (801d914 <usb_receive_processing+0x3a4>)
 801d8ea:	2301      	movs	r3, #1
 801d8ec:	7033      	strb	r3, [r6, #0]
						packet_generator_Calculated_data_send();
 801d8ee:	f7ff fd11 	bl	801d314 <packet_generator_Calculated_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801d8f2:	6025      	str	r5, [r4, #0]
 801d8f4:	6065      	str	r5, [r4, #4]
 801d8f6:	60a5      	str	r5, [r4, #8]
						send_usb_block = 0;
 801d8f8:	7035      	strb	r5, [r6, #0]
					break;
 801d8fa:	e661      	b.n	801d5c0 <usb_receive_processing+0x50>
 801d8fc:	20095adc 	.word	0x20095adc
 801d900:	200957f8 	.word	0x200957f8
 801d904:	200905b7 	.word	0x200905b7
 801d908:	2008f55c 	.word	0x2008f55c
 801d90c:	20095cec 	.word	0x20095cec
 801d910:	20095712 	.word	0x20095712
 801d914:	200905d1 	.word	0x200905d1

0801d918 <string_parse>:
{			
 801d918:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(buf_str[0] == 0xAB)
 801d91a:	7801      	ldrb	r1, [r0, #0]
 801d91c:	29ab      	cmp	r1, #171	; 0xab
 801d91e:	f040 8095 	bne.w	801da4c <string_parse+0x134>
		if(buf_str[1] == 0x12)
 801d922:	7843      	ldrb	r3, [r0, #1]
 801d924:	2b12      	cmp	r3, #18
 801d926:	f040 808a 	bne.w	801da3e <string_parse+0x126>
			if(buf_str[2] == 0x02)
 801d92a:	7882      	ldrb	r2, [r0, #2]
 801d92c:	2a02      	cmp	r2, #2
 801d92e:	f040 8086 	bne.w	801da3e <string_parse+0x126>
							data_bluetooth_send[0] = 0xAB;
 801d932:	4a47      	ldr	r2, [pc, #284]	; (801da50 <string_parse+0x138>)
							data_bluetooth_send[1] = 0x12;
 801d934:	7053      	strb	r3, [r2, #1]
							data_bluetooth_send[2] = 0x04;
 801d936:	2304      	movs	r3, #4
 801d938:	7093      	strb	r3, [r2, #2]
							data_bluetooth_send[3] = (Mode_EL == 0)? 0 : 1;
 801d93a:	4b46      	ldr	r3, [pc, #280]	; (801da54 <string_parse+0x13c>)
							data_bluetooth_send[0] = 0xAB;
 801d93c:	7011      	strb	r1, [r2, #0]
							data_bluetooth_send[3] = (Mode_EL == 0)? 0 : 1;
 801d93e:	781b      	ldrb	r3, [r3, #0]
 801d940:	4945      	ldr	r1, [pc, #276]	; (801da58 <string_parse+0x140>)
 801d942:	3300      	adds	r3, #0
 801d944:	bf18      	it	ne
 801d946:	2301      	movne	r3, #1
 801d948:	70d3      	strb	r3, [r2, #3]
							data_bluetooth_send[4] = 0;
 801d94a:	2300      	movs	r3, #0
 801d94c:	7113      	strb	r3, [r2, #4]
 801d94e:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 801d952:	4613      	mov	r3, r2
								memcpy(&buff_float, &Line_Rabs_buff[1023-i], sizeof(float));
 801d954:	f851 0904 	ldr.w	r0, [r1], #-4
								data_bluetooth_send[qz+3] = (buff_float) & 0x000000FF;
 801d958:	7210      	strb	r0, [r2, #8]
								data_bluetooth_send[qz+0] =  (buff_float >> 24) & 0x000000FF;
 801d95a:	0e05      	lsrs	r5, r0, #24
 801d95c:	7155      	strb	r5, [r2, #5]
								data_bluetooth_send[qz+1] =  (buff_float >> 16) & 0x000000FF;
 801d95e:	0c05      	lsrs	r5, r0, #16
 801d960:	7195      	strb	r5, [r2, #6]
							for(uint16_t i = 0; i < 1024; i++){
 801d962:	428c      	cmp	r4, r1
								data_bluetooth_send[qz+2] =  (buff_float >> 8) & 0x000000FF;
 801d964:	ea4f 2510 	mov.w	r5, r0, lsr #8
 801d968:	71d5      	strb	r5, [r2, #7]
 801d96a:	f102 0204 	add.w	r2, r2, #4
							for(uint16_t i = 0; i < 1024; i++){
 801d96e:	d1f1      	bne.n	801d954 <string_parse+0x3c>
						memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801d970:	493a      	ldr	r1, [pc, #232]	; (801da5c <string_parse+0x144>)
 801d972:	680a      	ldr	r2, [r1, #0]
						data_bluetooth_send[qz] =  (buff_float >> 24) & 0x000000FF;
 801d974:	f241 0005 	movw	r0, #4101	; 0x1005
 801d978:	0e14      	lsrs	r4, r2, #24
 801d97a:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+1] = (buff_float >> 16) & 0x000000FF;
 801d97c:	f241 0006 	movw	r0, #4102	; 0x1006
 801d980:	0c14      	lsrs	r4, r2, #16
 801d982:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+2] = (buff_float >> 8) & 0x000000FF;
 801d984:	f241 0007 	movw	r0, #4103	; 0x1007
 801d988:	0a14      	lsrs	r4, r2, #8
 801d98a:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+3] = (buff_float) & 0x000000FF;
 801d98c:	f241 0008 	movw	r0, #4104	; 0x1008
 801d990:	541a      	strb	r2, [r3, r0]
						memcpy(&buff_float, &colorimetry_xy1964[1], sizeof(float));
 801d992:	684a      	ldr	r2, [r1, #4]
 801d994:	9201      	str	r2, [sp, #4]
						data_bluetooth_send[qz+4] = (buff_float >> 24) & 0x000000FF;
 801d996:	f241 0109 	movw	r1, #4105	; 0x1009
 801d99a:	0e10      	lsrs	r0, r2, #24
 801d99c:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+5] = (buff_float >> 16) & 0x000000FF;
 801d99e:	f241 010a 	movw	r1, #4106	; 0x100a
 801d9a2:	0c10      	lsrs	r0, r2, #16
 801d9a4:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+6] = (buff_float >> 8) & 0x000000FF;
 801d9a6:	f241 010b 	movw	r1, #4107	; 0x100b
 801d9aa:	0a10      	lsrs	r0, r2, #8
 801d9ac:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+7] = (buff_float) & 0x000000FF;
 801d9ae:	f241 010c 	movw	r1, #4108	; 0x100c
 801d9b2:	545a      	strb	r2, [r3, r1]
						memcpy(&buff_float, &Tc_Measure, sizeof(uint16_t));
 801d9b4:	4a2a      	ldr	r2, [pc, #168]	; (801da60 <string_parse+0x148>)
 801d9b6:	8812      	ldrh	r2, [r2, #0]
 801d9b8:	f8ad 2004 	strh.w	r2, [sp, #4]
						data_bluetooth_send[qz+8]= (buff_float >> 8) & 0x000000FF;
 801d9bc:	9a01      	ldr	r2, [sp, #4]
 801d9be:	f241 010d 	movw	r1, #4109	; 0x100d
 801d9c2:	0a10      	lsrs	r0, r2, #8
 801d9c4:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+9] = (buff_float) & 0x000000FF;
 801d9c6:	f241 010e 	movw	r1, #4110	; 0x100e
 801d9ca:	545a      	strb	r2, [r3, r1]
						data_bluetooth_send[qz+10]= Source_Type;
 801d9cc:	4a25      	ldr	r2, [pc, #148]	; (801da64 <string_parse+0x14c>)
 801d9ce:	7811      	ldrb	r1, [r2, #0]
 801d9d0:	f241 020f 	movw	r2, #4111	; 0x100f
 801d9d4:	5499      	strb	r1, [r3, r2]
						if(Calculate_deltaEab_Done == 0x01)
 801d9d6:	4a24      	ldr	r2, [pc, #144]	; (801da68 <string_parse+0x150>)
 801d9d8:	7812      	ldrb	r2, [r2, #0]
 801d9da:	2a01      	cmp	r2, #1
 801d9dc:	d131      	bne.n	801da42 <string_parse+0x12a>
							memcpy(&buff_float, &delta_Eab_Measure, sizeof(int16_t));
 801d9de:	4a23      	ldr	r2, [pc, #140]	; (801da6c <string_parse+0x154>)
 801d9e0:	8812      	ldrh	r2, [r2, #0]
 801d9e2:	f8ad 2004 	strh.w	r2, [sp, #4]
							data_bluetooth_send[qz+11] = (buff_float >> 8) & 0x000000FF;
 801d9e6:	9a01      	ldr	r2, [sp, #4]
 801d9e8:	f241 0110 	movw	r1, #4112	; 0x1010
 801d9ec:	0a10      	lsrs	r0, r2, #8
 801d9ee:	5458      	strb	r0, [r3, r1]
							data_bluetooth_send[qz+12] = 0x00;
 801d9f0:	f241 0111 	movw	r1, #4113	; 0x1011
						data_bluetooth_send[qz+13] = (buff_float >> 24) & 0x000000FF;
 801d9f4:	f241 0012 	movw	r0, #4114	; 0x1012
							data_bluetooth_send[qz+12] = 0x00;
 801d9f8:	545a      	strb	r2, [r3, r1]
						memcpy(&buff_float, &colorimetry_xy1931[0], sizeof(float));
 801d9fa:	491d      	ldr	r1, [pc, #116]	; (801da70 <string_parse+0x158>)
 801d9fc:	680a      	ldr	r2, [r1, #0]
						data_bluetooth_send[qz+13] = (buff_float >> 24) & 0x000000FF;
 801d9fe:	0e14      	lsrs	r4, r2, #24
 801da00:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+14] = (buff_float >> 16) & 0x000000FF;
 801da02:	f241 0013 	movw	r0, #4115	; 0x1013
 801da06:	0c14      	lsrs	r4, r2, #16
 801da08:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+15]= (buff_float >> 8) & 0x000000FF;
 801da0a:	f241 0014 	movw	r0, #4116	; 0x1014
 801da0e:	0a14      	lsrs	r4, r2, #8
 801da10:	541c      	strb	r4, [r3, r0]
						data_bluetooth_send[qz+16] = (buff_float) & 0x000000FF;
 801da12:	f241 0015 	movw	r0, #4117	; 0x1015
 801da16:	541a      	strb	r2, [r3, r0]
						memcpy(&buff_float, &colorimetry_xy1931[1], sizeof(float));
 801da18:	684a      	ldr	r2, [r1, #4]
						data_bluetooth_send[qz+17] = (buff_float >> 24) & 0x000000FF;
 801da1a:	f241 0116 	movw	r1, #4118	; 0x1016
 801da1e:	0e10      	lsrs	r0, r2, #24
 801da20:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+18] = (buff_float >> 16) & 0x000000FF;
 801da22:	f241 0117 	movw	r1, #4119	; 0x1017
 801da26:	0c10      	lsrs	r0, r2, #16
 801da28:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+19] = (buff_float >> 8) & 0x000000FF;
 801da2a:	f241 0118 	movw	r1, #4120	; 0x1018
 801da2e:	0a10      	lsrs	r0, r2, #8
 801da30:	5458      	strb	r0, [r3, r1]
						data_bluetooth_send[qz+20] = (buff_float) & 0x000000FF;
 801da32:	f241 0119 	movw	r1, #4121	; 0x1019
 801da36:	545a      	strb	r2, [r3, r1]
						send_bluetooth = 1;		
 801da38:	4b0e      	ldr	r3, [pc, #56]	; (801da74 <string_parse+0x15c>)
 801da3a:	2201      	movs	r2, #1
 801da3c:	701a      	strb	r2, [r3, #0]
}
 801da3e:	b003      	add	sp, #12
 801da40:	bd30      	pop	{r4, r5, pc}
						} else {data_bluetooth_send[qz+11] = 0x00;
 801da42:	f241 0110 	movw	r1, #4112	; 0x1010
 801da46:	2200      	movs	r2, #0
 801da48:	545a      	strb	r2, [r3, r1]
 801da4a:	e7d1      	b.n	801d9f0 <string_parse+0xd8>
		__asm("nop");
 801da4c:	bf00      	nop
}
 801da4e:	e7f6      	b.n	801da3e <string_parse+0x126>
 801da50:	2008f59c 	.word	0x2008f59c
 801da54:	20000ebc 	.word	0x20000ebc
 801da58:	2000d538 	.word	0x2000d538
 801da5c:	2008f548 	.word	0x2008f548
 801da60:	20054940 	.word	0x20054940
 801da64:	20090ab9 	.word	0x20090ab9
 801da68:	200056a1 	.word	0x200056a1
 801da6c:	20090ab6 	.word	0x20090ab6
 801da70:	2008f540 	.word	0x2008f540
 801da74:	200905d0 	.word	0x200905d0

0801da78 <UART2_RxCpltCallback>:
{
 801da78:	b570      	push	{r4, r5, r6, lr}
 if (usartprop.usart_cnt>12)
 801da7a:	4c0f      	ldr	r4, [pc, #60]	; (801dab8 <UART2_RxCpltCallback+0x40>)
 801da7c:	7b63      	ldrb	r3, [r4, #13]
 801da7e:	2b0c      	cmp	r3, #12
 801da80:	d908      	bls.n	801da94 <UART2_RxCpltCallback+0x1c>
    usartprop.usart_cnt = 0;
 801da82:	2300      	movs	r3, #0
    HAL_UART_Receive_IT(&huart1,(uint8_t*)str1,1);
 801da84:	490d      	ldr	r1, [pc, #52]	; (801dabc <UART2_RxCpltCallback+0x44>)
    usartprop.usart_cnt = 0;
 801da86:	7363      	strb	r3, [r4, #13]
    HAL_UART_Receive_IT(&huart1,(uint8_t*)str1,1);
 801da88:	2201      	movs	r2, #1
  HAL_UART_Receive_IT(&huart1,(uint8_t*)str1,1);
 801da8a:	480d      	ldr	r0, [pc, #52]	; (801dac0 <UART2_RxCpltCallback+0x48>)
}
 801da8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  HAL_UART_Receive_IT(&huart1,(uint8_t*)str1,1);
 801da90:	f7e8 bdc4 	b.w	800661c <HAL_UART_Receive_IT>
  b = str1[0];
 801da94:	4d09      	ldr	r5, [pc, #36]	; (801dabc <UART2_RxCpltCallback+0x44>)
 801da96:	782a      	ldrb	r2, [r5, #0]
  usartprop.usart_buf[usartprop.usart_cnt] = b;
 801da98:	54e2      	strb	r2, [r4, r3]
  if(b==0x0A)
 801da9a:	2a0a      	cmp	r2, #10
 801da9c:	d109      	bne.n	801dab2 <UART2_RxCpltCallback+0x3a>
    usartprop.usart_buf[usartprop.usart_cnt+1]=0;
 801da9e:	4423      	add	r3, r4
 801daa0:	2600      	movs	r6, #0
    string_parse((uint8_t*)usartprop.usart_buf);
 801daa2:	4620      	mov	r0, r4
    usartprop.usart_buf[usartprop.usart_cnt+1]=0;
 801daa4:	705e      	strb	r6, [r3, #1]
    string_parse((uint8_t*)usartprop.usart_buf);
 801daa6:	f7ff ff37 	bl	801d918 <string_parse>
    usartprop.usart_cnt=0;
 801daaa:	7366      	strb	r6, [r4, #13]
  HAL_UART_Receive_IT(&huart1,(uint8_t*)str1,1);
 801daac:	2201      	movs	r2, #1
 801daae:	4629      	mov	r1, r5
 801dab0:	e7eb      	b.n	801da8a <UART2_RxCpltCallback+0x12>
  usartprop.usart_cnt++;
 801dab2:	3301      	adds	r3, #1
 801dab4:	7363      	strb	r3, [r4, #13]
 801dab6:	e7f9      	b.n	801daac <UART2_RxCpltCallback+0x34>
 801dab8:	200959be 	.word	0x200959be
 801dabc:	200905d2 	.word	0x200905d2
 801dac0:	20095a54 	.word	0x20095a54

0801dac4 <HAL_UART_RxCpltCallback>:
  if(huart==&huart1)
 801dac4:	4b02      	ldr	r3, [pc, #8]	; (801dad0 <HAL_UART_RxCpltCallback+0xc>)
 801dac6:	4283      	cmp	r3, r0
 801dac8:	d101      	bne.n	801dace <HAL_UART_RxCpltCallback+0xa>
    UART2_RxCpltCallback();
 801daca:	f7ff bfd5 	b.w	801da78 <UART2_RxCpltCallback>
 801dace:	4770      	bx	lr
 801dad0:	20095a54 	.word	0x20095a54

0801dad4 <auto_exposure>:
{ 
 801dad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dad6:	4d45      	ldr	r5, [pc, #276]	; (801dbec <auto_exposure+0x118>)
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801dad8:	4c45      	ldr	r4, [pc, #276]	; (801dbf0 <auto_exposure+0x11c>)
 801dada:	882b      	ldrh	r3, [r5, #0]
{ 
 801dadc:	2200      	movs	r2, #0
	for (uint16_t i = 5; i<1024; i++){
 801dade:	f240 71f6 	movw	r1, #2038	; 0x7f6
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801dae2:	18a0      	adds	r0, r4, r2
 801dae4:	3202      	adds	r2, #2
 801dae6:	8940      	ldrh	r0, [r0, #10]
 801dae8:	4283      	cmp	r3, r0
 801daea:	bf38      	it	cc
 801daec:	4603      	movcc	r3, r0
	for (uint16_t i = 5; i<1024; i++){
 801daee:	428a      	cmp	r2, r1
 801daf0:	d1f7      	bne.n	801dae2 <auto_exposure+0xe>
	if(max_el < 20000 && exp_num != 9)
 801daf2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 801daf6:	4293      	cmp	r3, r2
 801daf8:	802b      	strh	r3, [r5, #0]
 801dafa:	4c3e      	ldr	r4, [pc, #248]	; (801dbf4 <auto_exposure+0x120>)
 801dafc:	d840      	bhi.n	801db80 <auto_exposure+0xac>
 801dafe:	7823      	ldrb	r3, [r4, #0]
 801db00:	2b09      	cmp	r3, #9
 801db02:	d027      	beq.n	801db54 <auto_exposure+0x80>
		highSignal = 0;
 801db04:	4a3c      	ldr	r2, [pc, #240]	; (801dbf8 <auto_exposure+0x124>)
		send_usb_block =1;
 801db06:	4f3d      	ldr	r7, [pc, #244]	; (801dbfc <auto_exposure+0x128>)
		highSignal = 0;
 801db08:	2300      	movs	r3, #0
 801db0a:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801db0c:	4a3c      	ldr	r2, [pc, #240]	; (801dc00 <auto_exposure+0x12c>)
 801db0e:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801db10:	2301      	movs	r3, #1
 801db12:	703b      	strb	r3, [r7, #0]
		exp_num++;
 801db14:	7823      	ldrb	r3, [r4, #0]
 801db16:	3301      	adds	r3, #1
		exp_num--;
 801db18:	b2db      	uxtb	r3, r3
 801db1a:	7023      	strb	r3, [r4, #0]
		htim2.Init.Period = exposure_timer_period[exp_num];
 801db1c:	7822      	ldrb	r2, [r4, #0]
 801db1e:	4b39      	ldr	r3, [pc, #228]	; (801dc04 <auto_exposure+0x130>)
 801db20:	4e39      	ldr	r6, [pc, #228]	; (801dc08 <auto_exposure+0x134>)
 801db22:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801db26:	4b39      	ldr	r3, [pc, #228]	; (801dc0c <auto_exposure+0x138>)
 801db28:	60da      	str	r2, [r3, #12]
		MX_TIM2_Init();
 801db2a:	f7ff f93d 	bl	801cda8 <MX_TIM2_Init>
		Calibration_Exposure_Change(exp_num);
 801db2e:	7820      	ldrb	r0, [r4, #0]
 801db30:	f7f1 f9cc 	bl	800eecc <Calibration_Exposure_Change>
		if(Mode_EL == 0){
 801db34:	4b36      	ldr	r3, [pc, #216]	; (801dc10 <auto_exposure+0x13c>)
 801db36:	781a      	ldrb	r2, [r3, #0]
 801db38:	4b36      	ldr	r3, [pc, #216]	; (801dc14 <auto_exposure+0x140>)
 801db3a:	2a00      	cmp	r2, #0
 801db3c:	d132      	bne.n	801dba4 <auto_exposure+0xd0>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801db3e:	4a36      	ldr	r2, [pc, #216]	; (801dc18 <auto_exposure+0x144>)
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801db40:	ed93 0a00 	vldr	s0, [r3]
 801db44:	edd2 0a00 	vldr	s1, [r2]
 801db48:	f7fc f8ae 	bl	8019ca8 <Rabs_calc_Factor2_Settings_change>
		send_usb_block =0;
 801db4c:	2300      	movs	r3, #0
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801db4e:	ed86 0a00 	vstr	s0, [r6]
		send_usb_block =0;
 801db52:	703b      	strb	r3, [r7, #0]
	if(old_exp_num!=exp_num ){exp_set = 1; }else{exp_set = 0;}
 801db54:	4b31      	ldr	r3, [pc, #196]	; (801dc1c <auto_exposure+0x148>)
 801db56:	7822      	ldrb	r2, [r4, #0]
 801db58:	7819      	ldrb	r1, [r3, #0]
 801db5a:	4291      	cmp	r1, r2
 801db5c:	4a30      	ldr	r2, [pc, #192]	; (801dc20 <auto_exposure+0x14c>)
 801db5e:	bf14      	ite	ne
 801db60:	2101      	movne	r1, #1
 801db62:	2100      	moveq	r1, #0
 801db64:	7011      	strb	r1, [r2, #0]
	old_exp_num = exp_num;
 801db66:	7822      	ldrb	r2, [r4, #0]
 801db68:	701a      	strb	r2, [r3, #0]
	if(exp_num ==0 && max_el >=50000)
 801db6a:	7823      	ldrb	r3, [r4, #0]
 801db6c:	b9e3      	cbnz	r3, 801dba8 <auto_exposure+0xd4>
 801db6e:	882a      	ldrh	r2, [r5, #0]
 801db70:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801db74:	429a      	cmp	r2, r3
 801db76:	d917      	bls.n	801dba8 <auto_exposure+0xd4>
		highSignal = 1;
 801db78:	2201      	movs	r2, #1
			highSignal = 0;
 801db7a:	4b1f      	ldr	r3, [pc, #124]	; (801dbf8 <auto_exposure+0x124>)
			lowSignal = 0;
 801db7c:	701a      	strb	r2, [r3, #0]
 801db7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if(max_el > 45000 && exp_num != 0)
 801db80:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 801db84:	4293      	cmp	r3, r2
 801db86:	d9e5      	bls.n	801db54 <auto_exposure+0x80>
 801db88:	7823      	ldrb	r3, [r4, #0]
 801db8a:	2b00      	cmp	r3, #0
 801db8c:	d0e2      	beq.n	801db54 <auto_exposure+0x80>
		highSignal = 0;
 801db8e:	4a1a      	ldr	r2, [pc, #104]	; (801dbf8 <auto_exposure+0x124>)
		send_usb_block =1;
 801db90:	4f1a      	ldr	r7, [pc, #104]	; (801dbfc <auto_exposure+0x128>)
		highSignal = 0;
 801db92:	2300      	movs	r3, #0
 801db94:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801db96:	4a1a      	ldr	r2, [pc, #104]	; (801dc00 <auto_exposure+0x12c>)
 801db98:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801db9a:	2301      	movs	r3, #1
 801db9c:	703b      	strb	r3, [r7, #0]
		exp_num--;
 801db9e:	7823      	ldrb	r3, [r4, #0]
 801dba0:	3b01      	subs	r3, #1
 801dba2:	e7b9      	b.n	801db18 <auto_exposure+0x44>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801dba4:	4a1f      	ldr	r2, [pc, #124]	; (801dc24 <auto_exposure+0x150>)
 801dba6:	e7cb      	b.n	801db40 <auto_exposure+0x6c>
	} else if((exp_num ==0 && max_el < 50000))
 801dba8:	7823      	ldrb	r3, [r4, #0]
 801dbaa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801dbae:	b923      	cbnz	r3, 801dbba <auto_exposure+0xe6>
 801dbb0:	8829      	ldrh	r1, [r5, #0]
 801dbb2:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801dbb6:	4299      	cmp	r1, r3
 801dbb8:	d9df      	bls.n	801db7a <auto_exposure+0xa6>
	} else if((exp_num ==9 && max_el < DarkSignal+2000)) //20000
 801dbba:	7823      	ldrb	r3, [r4, #0]
 801dbbc:	2b09      	cmp	r3, #9
 801dbbe:	d109      	bne.n	801dbd4 <auto_exposure+0x100>
 801dbc0:	4b19      	ldr	r3, [pc, #100]	; (801dc28 <auto_exposure+0x154>)
 801dbc2:	882a      	ldrh	r2, [r5, #0]
 801dbc4:	881b      	ldrh	r3, [r3, #0]
 801dbc6:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 801dbca:	4293      	cmp	r3, r2
 801dbcc:	db02      	blt.n	801dbd4 <auto_exposure+0x100>
			lowSignal = 1;
 801dbce:	2201      	movs	r2, #1
			lowSignal = 0;
 801dbd0:	4b0b      	ldr	r3, [pc, #44]	; (801dc00 <auto_exposure+0x12c>)
 801dbd2:	e7d3      	b.n	801db7c <auto_exposure+0xa8>
	}else if((exp_num ==9 && max_el > DarkSignal+2000))
 801dbd4:	7823      	ldrb	r3, [r4, #0]
 801dbd6:	2b09      	cmp	r3, #9
 801dbd8:	d1d1      	bne.n	801db7e <auto_exposure+0xaa>
 801dbda:	4b13      	ldr	r3, [pc, #76]	; (801dc28 <auto_exposure+0x154>)
 801dbdc:	882a      	ldrh	r2, [r5, #0]
 801dbde:	881b      	ldrh	r3, [r3, #0]
 801dbe0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801dbe4:	429a      	cmp	r2, r3
 801dbe6:	ddca      	ble.n	801db7e <auto_exposure+0xaa>
			lowSignal = 0;
 801dbe8:	2200      	movs	r2, #0
 801dbea:	e7f1      	b.n	801dbd0 <auto_exposure+0xfc>
 801dbec:	200905c4 	.word	0x200905c4
 801dbf0:	2000e53c 	.word	0x2000e53c
 801dbf4:	200905b6 	.word	0x200905b6
 801dbf8:	200905bf 	.word	0x200905bf
 801dbfc:	200905d1 	.word	0x200905d1
 801dc00:	200905c2 	.word	0x200905c2
 801dc04:	08031dd0 	.word	0x08031dd0
 801dc08:	20009d34 	.word	0x20009d34
 801dc0c:	20095c58 	.word	0x20095c58
 801dc10:	20000ebc 	.word	0x20000ebc
 801dc14:	20009d2c 	.word	0x20009d2c
 801dc18:	20009d28 	.word	0x20009d28
 801dc1c:	200905c6 	.word	0x200905c6
 801dc20:	20000ec0 	.word	0x20000ec0
 801dc24:	20009d24 	.word	0x20009d24
 801dc28:	20009d22 	.word	0x20009d22

0801dc2c <TIM2_IRQHandler>:
{
 801dc2c:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 801dc2e:	4d0d      	ldr	r5, [pc, #52]	; (801dc64 <TIM2_IRQHandler+0x38>)
 801dc30:	2200      	movs	r2, #0
 801dc32:	2110      	movs	r1, #16
 801dc34:	4628      	mov	r0, r5
 801dc36:	f7e4 fc79 	bl	800252c <HAL_GPIO_WritePin>
	DWT_Delay(10);
 801dc3a:	200a      	movs	r0, #10
 801dc3c:	f7ff f8fc 	bl	801ce38 <DWT_Delay>
	i = 0;
 801dc40:	4b09      	ldr	r3, [pc, #36]	; (801dc68 <TIM2_IRQHandler+0x3c>)
 801dc42:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801dc44:	4628      	mov	r0, r5
 801dc46:	2201      	movs	r2, #1
 801dc48:	2110      	movs	r1, #16
	i = 0;
 801dc4a:	801c      	strh	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801dc4c:	f7e4 fc6e 	bl	800252c <HAL_GPIO_WritePin>
  cnt_delay_bar = 0;
 801dc50:	4b06      	ldr	r3, [pc, #24]	; (801dc6c <TIM2_IRQHandler+0x40>)
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801dc52:	201c      	movs	r0, #28
  cnt_delay_bar = 0;
 801dc54:	801c      	strh	r4, [r3, #0]
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801dc56:	f7e3 ff07 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim2);
 801dc5a:	4805      	ldr	r0, [pc, #20]	; (801dc70 <TIM2_IRQHandler+0x44>)
}																					//	7.812ms	15.625ms	31.25ms	62.5ms	125ms	250ms	500ms	1s			2s			4s
 801dc5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_IRQHandler(&htim2);
 801dc60:	f7e7 bfb1 	b.w	8005bc6 <HAL_TIM_IRQHandler>
 801dc64:	48000800 	.word	0x48000800
 801dc68:	200905c0 	.word	0x200905c0
 801dc6c:	2008f514 	.word	0x2008f514
 801dc70:	20095c58 	.word	0x20095c58

0801dc74 <TIM6_DAC_IRQHandler>:
{
 801dc74:	b508      	push	{r3, lr}
	pause_button = 0;
 801dc76:	4b06      	ldr	r3, [pc, #24]	; (801dc90 <TIM6_DAC_IRQHandler+0x1c>)
 801dc78:	2200      	movs	r2, #0
 801dc7a:	701a      	strb	r2, [r3, #0]
	Get_Battery_Level();
 801dc7c:	f7ff fa26 	bl	801d0cc <Get_Battery_Level>
	HAL_NVIC_ClearPendingIRQ(TIM6_DAC_IRQn);
 801dc80:	2036      	movs	r0, #54	; 0x36
 801dc82:	f7e3 fef1 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
  HAL_TIM_IRQHandler(&htim6);
 801dc86:	4803      	ldr	r0, [pc, #12]	; (801dc94 <TIM6_DAC_IRQHandler+0x20>)
}
 801dc88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 801dc8c:	f7e7 bf9b 	b.w	8005bc6 <HAL_TIM_IRQHandler>
 801dc90:	200905c7 	.word	0x200905c7
 801dc94:	20095ae4 	.word	0x20095ae4

0801dc98 <TIM7_IRQHandler>:
{
 801dc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801dc9a:	4b48      	ldr	r3, [pc, #288]	; (801ddbc <TIM7_IRQHandler+0x124>)
 801dc9c:	781b      	ldrb	r3, [r3, #0]
	if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen||
 801dc9e:	3b01      	subs	r3, #1
 801dca0:	2b04      	cmp	r3, #4
 801dca2:	d81e      	bhi.n	801dce2 <TIM7_IRQHandler+0x4a>
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801dca4:	4b46      	ldr	r3, [pc, #280]	; (801ddc0 <TIM7_IRQHandler+0x128>)
 801dca6:	781b      	ldrb	r3, [r3, #0]
 801dca8:	b9db      	cbnz	r3, 801dce2 <TIM7_IRQHandler+0x4a>
 801dcaa:	4b46      	ldr	r3, [pc, #280]	; (801ddc4 <TIM7_IRQHandler+0x12c>)
 801dcac:	781b      	ldrb	r3, [r3, #0]
 801dcae:	b9c3      	cbnz	r3, 801dce2 <TIM7_IRQHandler+0x4a>
			cnt_delay_bar++;
 801dcb0:	4a45      	ldr	r2, [pc, #276]	; (801ddc8 <TIM7_IRQHandler+0x130>)
			if(exp_num > 4){
 801dcb2:	4946      	ldr	r1, [pc, #280]	; (801ddcc <TIM7_IRQHandler+0x134>)
			cnt_delay_bar++;
 801dcb4:	8813      	ldrh	r3, [r2, #0]
 801dcb6:	3301      	adds	r3, #1
 801dcb8:	b29b      	uxth	r3, r3
 801dcba:	8013      	strh	r3, [r2, #0]
			if(exp_num > 4){
 801dcbc:	780a      	ldrb	r2, [r1, #0]
 801dcbe:	2a04      	cmp	r2, #4
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801dcc0:	780a      	ldrb	r2, [r1, #0]
			if(exp_num > 4){
 801dcc2:	d96b      	bls.n	801dd9c <TIM7_IRQHandler+0x104>
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801dcc4:	4842      	ldr	r0, [pc, #264]	; (801ddd0 <TIM7_IRQHandler+0x138>)
 801dcc6:	f241 7670 	movw	r6, #6000	; 0x1770
 801dcca:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801dcce:	fbb2 f2f6 	udiv	r2, r2, r6
 801dcd2:	4293      	cmp	r3, r2
 801dcd4:	d12b      	bne.n	801dd2e <TIM7_IRQHandler+0x96>
						GUI_Bar_Measure(85, 13, 0.2);
 801dcd6:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 801ddd4 <TIM7_IRQHandler+0x13c>
						GUI_Bar_Measure(85, 13, 0.6);
 801dcda:	210d      	movs	r1, #13
 801dcdc:	2055      	movs	r0, #85	; 0x55
 801dcde:	f7f5 fad9 	bl	8013294 <GUI_Bar_Measure>
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801dce2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801dce6:	483c      	ldr	r0, [pc, #240]	; (801ddd8 <TIM7_IRQHandler+0x140>)
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801dce8:	4c3c      	ldr	r4, [pc, #240]	; (801dddc <TIM7_IRQHandler+0x144>)
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801dcea:	4d3d      	ldr	r5, [pc, #244]	; (801dde0 <TIM7_IRQHandler+0x148>)
 801dcec:	f7e4 fc18 	bl	8002520 <HAL_GPIO_ReadPin>
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801dcf0:	7823      	ldrb	r3, [r4, #0]
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801dcf2:	7028      	strb	r0, [r5, #0]
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801dcf4:	4283      	cmp	r3, r0
 801dcf6:	d012      	beq.n	801dd1e <TIM7_IRQHandler+0x86>
 801dcf8:	4b3a      	ldr	r3, [pc, #232]	; (801dde4 <TIM7_IRQHandler+0x14c>)
 801dcfa:	781b      	ldrb	r3, [r3, #0]
 801dcfc:	b97b      	cbnz	r3, 801dd1e <TIM7_IRQHandler+0x86>
		GUI_Button_SD_Card(55, 426, !SD_Detect);
 801dcfe:	fab0 f280 	clz	r2, r0
 801dd02:	0952      	lsrs	r2, r2, #5
 801dd04:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801dd08:	2037      	movs	r0, #55	; 0x37
 801dd0a:	f7f4 fd37 	bl	801277c <GUI_Button_SD_Card>
		old_sd_detect = SD_Detect;
 801dd0e:	782b      	ldrb	r3, [r5, #0]
 801dd10:	7023      	strb	r3, [r4, #0]
		if(SD_Detect == 0){
 801dd12:	2b00      	cmp	r3, #0
 801dd14:	d14b      	bne.n	801ddae <TIM7_IRQHandler+0x116>
				MX_SDMMC1_SD_Init();
 801dd16:	f7ff f835 	bl	801cd84 <MX_SDMMC1_SD_Init>
				MX_FATFS_Init();
 801dd1a:	f7fe fa01 	bl	801c120 <MX_FATFS_Init>
	HAL_NVIC_ClearPendingIRQ(TIM7_IRQn);
 801dd1e:	2037      	movs	r0, #55	; 0x37
 801dd20:	f7e3 fea2 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim7);
 801dd24:	4830      	ldr	r0, [pc, #192]	; (801dde8 <TIM7_IRQHandler+0x150>)
}
 801dd26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_TIM_IRQHandler(&htim7);
 801dd2a:	f7e7 bf4c 	b.w	8005bc6 <HAL_TIM_IRQHandler>
				else if (cnt_delay_bar == 2*(exposure_timer_period[exp_num]/12)/500)
 801dd2e:	780a      	ldrb	r2, [r1, #0]
 801dd30:	270c      	movs	r7, #12
 801dd32:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
 801dd36:	fbb5 f5f7 	udiv	r5, r5, r7
 801dd3a:	22fa      	movs	r2, #250	; 0xfa
 801dd3c:	fb95 f5f2 	sdiv	r5, r5, r2
 801dd40:	42ab      	cmp	r3, r5
 801dd42:	d102      	bne.n	801dd4a <TIM7_IRQHandler+0xb2>
						GUI_Bar_Measure(85, 13, 0.4);
 801dd44:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801ddec <TIM7_IRQHandler+0x154>
 801dd48:	e7c7      	b.n	801dcda <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 3*(exposure_timer_period[exp_num]/12)/500)
 801dd4a:	780a      	ldrb	r2, [r1, #0]
 801dd4c:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 801dd50:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801dd54:	fbb2 f2f7 	udiv	r2, r2, r7
 801dd58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801dd5c:	fb92 f2f4 	sdiv	r2, r2, r4
 801dd60:	4293      	cmp	r3, r2
 801dd62:	d102      	bne.n	801dd6a <TIM7_IRQHandler+0xd2>
						GUI_Bar_Measure(85, 13, 0.6);
 801dd64:	ed9f 0a22 	vldr	s0, [pc, #136]	; 801ddf0 <TIM7_IRQHandler+0x158>
 801dd68:	e7b7      	b.n	801dcda <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 4*(exposure_timer_period[exp_num]/12)/500)
 801dd6a:	780a      	ldrb	r2, [r1, #0]
 801dd6c:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 801dd70:	fbb4 f4f7 	udiv	r4, r4, r7
 801dd74:	227d      	movs	r2, #125	; 0x7d
 801dd76:	fb94 f4f2 	sdiv	r4, r4, r2
 801dd7a:	42a3      	cmp	r3, r4
 801dd7c:	d102      	bne.n	801dd84 <TIM7_IRQHandler+0xec>
						GUI_Bar_Measure(85, 13, 0.8);
 801dd7e:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801ddf4 <TIM7_IRQHandler+0x15c>
 801dd82:	e7aa      	b.n	801dcda <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 5*((exposure_timer_period[exp_num]/12)/500))
 801dd84:	780a      	ldrb	r2, [r1, #0]
 801dd86:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801dd8a:	fbb2 f2f6 	udiv	r2, r2, r6
 801dd8e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801dd92:	4293      	cmp	r3, r2
 801dd94:	d1a5      	bne.n	801dce2 <TIM7_IRQHandler+0x4a>
						GUI_Bar_Measure(85, 13, 1);
 801dd96:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801dd9a:	e79e      	b.n	801dcda <TIM7_IRQHandler+0x42>
				} else if(exp_num > 2)
 801dd9c:	2a02      	cmp	r2, #2
 801dd9e:	d9fa      	bls.n	801dd96 <TIM7_IRQHandler+0xfe>
							if(cnt_delay_bar == 1){
 801dda0:	2b01      	cmp	r3, #1
 801dda2:	d102      	bne.n	801ddaa <TIM7_IRQHandler+0x112>
								GUI_Bar_Measure(85, 13, 0.5);
 801dda4:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801dda8:	e797      	b.n	801dcda <TIM7_IRQHandler+0x42>
							} else if(cnt_delay_bar == 2){
 801ddaa:	2b02      	cmp	r3, #2
 801ddac:	e7f2      	b.n	801dd94 <TIM7_IRQHandler+0xfc>
			FATFS_UnLinkDriver(SDPath);
 801ddae:	4812      	ldr	r0, [pc, #72]	; (801ddf8 <TIM7_IRQHandler+0x160>)
 801ddb0:	f7eb fe28 	bl	8009a04 <FATFS_UnLinkDriver>
				HAL_SD_DeInit(&hsd1);
 801ddb4:	4811      	ldr	r0, [pc, #68]	; (801ddfc <TIM7_IRQHandler+0x164>)
 801ddb6:	f7e6 ff07 	bl	8004bc8 <HAL_SD_DeInit>
 801ddba:	e7b0      	b.n	801dd1e <TIM7_IRQHandler+0x86>
 801ddbc:	20005701 	.word	0x20005701
 801ddc0:	20005728 	.word	0x20005728
 801ddc4:	20009cf5 	.word	0x20009cf5
 801ddc8:	2008f514 	.word	0x2008f514
 801ddcc:	200905b6 	.word	0x200905b6
 801ddd0:	08031dd0 	.word	0x08031dd0
 801ddd4:	3e4ccccd 	.word	0x3e4ccccd
 801ddd8:	48000800 	.word	0x48000800
 801dddc:	20000ec2 	.word	0x20000ec2
 801dde0:	20095c54 	.word	0x20095c54
 801dde4:	20095712 	.word	0x20095712
 801dde8:	20095ca4 	.word	0x20095ca4
 801ddec:	3ecccccd 	.word	0x3ecccccd
 801ddf0:	3f19999a 	.word	0x3f19999a
 801ddf4:	3f4ccccd 	.word	0x3f4ccccd
 801ddf8:	20093685 	.word	0x20093685
 801ddfc:	20095808 	.word	0x20095808

0801de00 <EXTI9_5_IRQHandler>:
{
 801de00:	b513      	push	{r0, r1, r4, lr}
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801de02:	4c22      	ldr	r4, [pc, #136]	; (801de8c <EXTI9_5_IRQHandler+0x8c>)
	DWT_Delay(1);
 801de04:	2001      	movs	r0, #1
 801de06:	f7ff f817 	bl	801ce38 <DWT_Delay>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801de0a:	2300      	movs	r3, #0
 801de0c:	4622      	mov	r2, r4
 801de0e:	4621      	mov	r1, r4
 801de10:	9300      	str	r3, [sp, #0]
 801de12:	481f      	ldr	r0, [pc, #124]	; (801de90 <EXTI9_5_IRQHandler+0x90>)
 801de14:	2302      	movs	r3, #2
 801de16:	f7e7 fc66 	bl	80056e6 <HAL_SPI_TransmitReceive>
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801de1a:	7823      	ldrb	r3, [r4, #0]
 801de1c:	7862      	ldrb	r2, [r4, #1]
 801de1e:	4c1d      	ldr	r4, [pc, #116]	; (801de94 <EXTI9_5_IRQHandler+0x94>)
 801de20:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		Line[i] = Line[i-1]; 
 801de24:	8821      	ldrh	r1, [r4, #0]
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801de26:	f64c 73fe 	movw	r3, #53246	; 0xcffe
 801de2a:	429a      	cmp	r2, r3
		Line[i] = Line[i-1]; 
 801de2c:	b289      	uxth	r1, r1
 801de2e:	4b1a      	ldr	r3, [pc, #104]	; (801de98 <EXTI9_5_IRQHandler+0x98>)
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801de30:	dd05      	ble.n	801de3e <EXTI9_5_IRQHandler+0x3e>
		Line[i] = Line[i-1]; 
 801de32:	8822      	ldrh	r2, [r4, #0]
 801de34:	b292      	uxth	r2, r2
 801de36:	3a01      	subs	r2, #1
 801de38:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801de3c:	e002      	b.n	801de44 <EXTI9_5_IRQHandler+0x44>
	} else if((RxBuf[0] << 8 | RxBuf[1])<=0x0EFF)
 801de3e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 801de42:	dbf6      	blt.n	801de32 <EXTI9_5_IRQHandler+0x32>
		Line[i] = RxBuf[0] << 8 | RxBuf[1];
 801de44:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(i >= 1023)
 801de48:	8823      	ldrh	r3, [r4, #0]
 801de4a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801de4e:	b29b      	uxth	r3, r3
 801de50:	4293      	cmp	r3, r2
 801de52:	d916      	bls.n	801de82 <EXTI9_5_IRQHandler+0x82>
		if(send_usb_block == 0 && (!pause))
 801de54:	4b11      	ldr	r3, [pc, #68]	; (801de9c <EXTI9_5_IRQHandler+0x9c>)
 801de56:	781b      	ldrb	r3, [r3, #0]
 801de58:	b943      	cbnz	r3, 801de6c <EXTI9_5_IRQHandler+0x6c>
 801de5a:	4b11      	ldr	r3, [pc, #68]	; (801dea0 <EXTI9_5_IRQHandler+0xa0>)
 801de5c:	781b      	ldrb	r3, [r3, #0]
 801de5e:	b92b      	cbnz	r3, 801de6c <EXTI9_5_IRQHandler+0x6c>
				memcpy(Line_buff, Line, sizeof(Line));
 801de60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801de64:	490c      	ldr	r1, [pc, #48]	; (801de98 <EXTI9_5_IRQHandler+0x98>)
 801de66:	480f      	ldr	r0, [pc, #60]	; (801dea4 <EXTI9_5_IRQHandler+0xa4>)
 801de68:	f002 fa00 	bl	802026c <memcpy>
			i = 0;
 801de6c:	2300      	movs	r3, #0
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801de6e:	2017      	movs	r0, #23
			i++;
 801de70:	8023      	strh	r3, [r4, #0]
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801de72:	f7e3 fdf9 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801de76:	2080      	movs	r0, #128	; 0x80
}
 801de78:	b002      	add	sp, #8
 801de7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801de7e:	f7e4 bb5f 	b.w	8002540 <HAL_GPIO_EXTI_IRQHandler>
			i++;
 801de82:	8823      	ldrh	r3, [r4, #0]
 801de84:	3301      	adds	r3, #1
 801de86:	b29b      	uxth	r3, r3
 801de88:	e7f1      	b.n	801de6e <EXTI9_5_IRQHandler+0x6e>
 801de8a:	bf00      	nop
 801de8c:	20095b8e 	.word	0x20095b8e
 801de90:	20095bf0 	.word	0x20095bf0
 801de94:	200905c0 	.word	0x200905c0
 801de98:	2000bd3a 	.word	0x2000bd3a
 801de9c:	200905d1 	.word	0x200905d1
 801dea0:	20005728 	.word	0x20005728
 801dea4:	2000e53c 	.word	0x2000e53c

0801dea8 <EXTI3_IRQHandler>:
{	
 801dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	cnt_touch_delay = cnt_touch_delay + 1;
 801deaa:	4b29      	ldr	r3, [pc, #164]	; (801df50 <EXTI3_IRQHandler+0xa8>)
	Touch_x = 0, Touch_y = 0;
 801deac:	4e29      	ldr	r6, [pc, #164]	; (801df54 <EXTI3_IRQHandler+0xac>)
	cnt_touch_delay = cnt_touch_delay + 1;
 801deae:	681a      	ldr	r2, [r3, #0]
	Touch_x = 0, Touch_y = 0;
 801deb0:	4c29      	ldr	r4, [pc, #164]	; (801df58 <EXTI3_IRQHandler+0xb0>)
	cnt_touch_delay = cnt_touch_delay + 1;
 801deb2:	3201      	adds	r2, #1
 801deb4:	601a      	str	r2, [r3, #0]
	Touch_x = 0, Touch_y = 0;
 801deb6:	2200      	movs	r2, #0
 801deb8:	8032      	strh	r2, [r6, #0]
 801deba:	8022      	strh	r2, [r4, #0]
	if((!TFT_ON_OFF) && (cnt_touch_delay >= 50))
 801debc:	4a27      	ldr	r2, [pc, #156]	; (801df5c <EXTI3_IRQHandler+0xb4>)
 801debe:	7817      	ldrb	r7, [r2, #0]
 801dec0:	461d      	mov	r5, r3
 801dec2:	4611      	mov	r1, r2
 801dec4:	b957      	cbnz	r7, 801dedc <EXTI3_IRQHandler+0x34>
 801dec6:	681b      	ldr	r3, [r3, #0]
 801dec8:	2b31      	cmp	r3, #49	; 0x31
 801deca:	d907      	bls.n	801dedc <EXTI3_IRQHandler+0x34>
			TFT_ON_OFF = 0x01;
 801decc:	2301      	movs	r3, #1
 801dece:	7013      	strb	r3, [r2, #0]
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801ded0:	2104      	movs	r1, #4
 801ded2:	4823      	ldr	r0, [pc, #140]	; (801df60 <EXTI3_IRQHandler+0xb8>)
}
 801ded4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801ded8:	f7e8 b998 	b.w	800620c <HAL_TIM_PWM_Start>
		if(TFT_ON_OFF){
 801dedc:	780b      	ldrb	r3, [r1, #0]
 801dede:	b36b      	cbz	r3, 801df3c <EXTI3_IRQHandler+0x94>
			TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 801dee0:	4a1d      	ldr	r2, [pc, #116]	; (801df58 <EXTI3_IRQHandler+0xb0>)
 801dee2:	491c      	ldr	r1, [pc, #112]	; (801df54 <EXTI3_IRQHandler+0xac>)
 801dee4:	2070      	movs	r0, #112	; 0x70
 801dee6:	f7fe f899 	bl	801c01c <TS_Get_XY1>
			if((Mode_EL == 0x00) && ((Touch_x >= 109 & Touch_x <= (109+54) & Touch_y >=426 & Touch_y <=(426+54) )))
 801deea:	4b1e      	ldr	r3, [pc, #120]	; (801df64 <EXTI3_IRQHandler+0xbc>)
 801deec:	781a      	ldrb	r2, [r3, #0]
 801deee:	bb0a      	cbnz	r2, 801df34 <EXTI3_IRQHandler+0x8c>
 801def0:	8833      	ldrh	r3, [r6, #0]
 801def2:	3b6d      	subs	r3, #109	; 0x6d
 801def4:	b29b      	uxth	r3, r3
 801def6:	2b36      	cmp	r3, #54	; 0x36
 801def8:	d81c      	bhi.n	801df34 <EXTI3_IRQHandler+0x8c>
 801defa:	8823      	ldrh	r3, [r4, #0]
 801defc:	f5a3 73d5 	sub.w	r3, r3, #426	; 0x1aa
 801df00:	b29b      	uxth	r3, r3
 801df02:	2b36      	cmp	r3, #54	; 0x36
 801df04:	d816      	bhi.n	801df34 <EXTI3_IRQHandler+0x8c>
				pause_button++;
 801df06:	4c18      	ldr	r4, [pc, #96]	; (801df68 <EXTI3_IRQHandler+0xc0>)
 801df08:	7823      	ldrb	r3, [r4, #0]
 801df0a:	3301      	adds	r3, #1
 801df0c:	b2db      	uxtb	r3, r3
				if(pause_button > 3)
 801df0e:	2b03      	cmp	r3, #3
				pause_button++;
 801df10:	7023      	strb	r3, [r4, #0]
				if(pause_button > 3)
 801df12:	d90f      	bls.n	801df34 <EXTI3_IRQHandler+0x8c>
					LaserOnOff = !LaserOnOff;
 801df14:	4915      	ldr	r1, [pc, #84]	; (801df6c <EXTI3_IRQHandler+0xc4>)
 801df16:	780b      	ldrb	r3, [r1, #0]
 801df18:	fab3 f383 	clz	r3, r3
 801df1c:	095b      	lsrs	r3, r3, #5
 801df1e:	700b      	strb	r3, [r1, #0]
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801df20:	780b      	ldrb	r3, [r1, #0]
 801df22:	b19b      	cbz	r3, 801df4c <EXTI3_IRQHandler+0xa4>
 801df24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801df28:	4811      	ldr	r0, [pc, #68]	; (801df70 <EXTI3_IRQHandler+0xc8>)
 801df2a:	f7e4 faff 	bl	800252c <HAL_GPIO_WritePin>
					cnt_touch_delay = 0;
 801df2e:	2300      	movs	r3, #0
 801df30:	602b      	str	r3, [r5, #0]
					pause_button = 0;
 801df32:	7023      	strb	r3, [r4, #0]
				GUI_Touch_Processing();
 801df34:	f7f2 ff38 	bl	8010da8 <GUI_Touch_Processing>
				cnt_touch_delay = 0;
 801df38:	2300      	movs	r3, #0
 801df3a:	602b      	str	r3, [r5, #0]
		HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 801df3c:	2009      	movs	r0, #9
 801df3e:	f7e3 fd93 	bl	8001a68 <HAL_NVIC_ClearPendingIRQ>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 801df42:	2008      	movs	r0, #8
}
 801df44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 801df48:	f7e4 bafa 	b.w	8002540 <HAL_GPIO_EXTI_IRQHandler>
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801df4c:	2201      	movs	r2, #1
 801df4e:	e7e9      	b.n	801df24 <EXTI3_IRQHandler+0x7c>
 801df50:	2008f518 	.word	0x2008f518
 801df54:	20054942 	.word	0x20054942
 801df58:	20054944 	.word	0x20054944
 801df5c:	20000ebe 	.word	0x20000ebe
 801df60:	200957b4 	.word	0x200957b4
 801df64:	20000ebc 	.word	0x20000ebc
 801df68:	200905c7 	.word	0x200905c7
 801df6c:	2000bd38 	.word	0x2000bd38
 801df70:	48000800 	.word	0x48000800

0801df74 <SystemClock_Config>:
{
 801df74:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801df76:	2000      	movs	r0, #0
{
 801df78:	b0bf      	sub	sp, #252	; 0xfc
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801df7a:	f7e5 fddd 	bl	8003b38 <HAL_PWREx_ControlVoltageScaling>
 801df7e:	b100      	cbz	r0, 801df82 <SystemClock_Config+0xe>
 801df80:	e7fe      	b.n	801df80 <SystemClock_Config+0xc>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801df82:	f44f 7380 	mov.w	r3, #256	; 0x100
 801df86:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801df88:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801df8a:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801df8c:	2503      	movs	r5, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801df8e:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801df92:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801df94:	2705      	movs	r7, #5
  RCC_OscInitStruct.PLL.PLLN = 30;
 801df96:	231e      	movs	r3, #30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801df98:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801df9a:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801df9c:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801df9e:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801dfa0:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 2;
 801dfa2:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 30;
 801dfa4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801dfa6:	9714      	str	r7, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 801dfa8:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801dfaa:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801dfac:	f7e5 feba 	bl	8003d24 <HAL_RCC_OscConfig>
 801dfb0:	b100      	cbz	r0, 801dfb4 <SystemClock_Config+0x40>
 801dfb2:	e7fe      	b.n	801dfb2 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801dfb4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801dfb6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801dfb8:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801dfba:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801dfbc:	4639      	mov	r1, r7
 801dfbe:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801dfc0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801dfc2:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801dfc4:	f7e6 f900 	bl	80041c8 <HAL_RCC_ClockConfig>
 801dfc8:	b100      	cbz	r0, 801dfcc <SystemClock_Config+0x58>
 801dfca:	e7fe      	b.n	801dfca <SystemClock_Config+0x56>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SDMMC1;
 801dfcc:	4b1e      	ldr	r3, [pc, #120]	; (801e048 <SystemClock_Config+0xd4>)
 801dfce:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 801dfd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801dfd4:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801dfd6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801dfda:	9334      	str	r3, [sp, #208]	; 0xd0
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 801dfdc:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 801dfe0:	9337      	str	r3, [sp, #220]	; 0xdc
	PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 801dfe2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801dfe6:	9335      	str	r3, [sp, #212]	; 0xd4
  PeriphClkInit.PLLSAI2.PLLSAI2N = 9;
 801dfe8:	2309      	movs	r3, #9
 801dfea:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 801dfec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801dff0:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801dff2:	230c      	movs	r3, #12
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801dff4:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801dff6:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801dff8:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801dffa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
 801dffe:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 801e000:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 801e002:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 801e004:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 801e006:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 801e008:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 801e00a:	941c      	str	r4, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801e00c:	941d      	str	r4, [sp, #116]	; 0x74
	PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 801e00e:	963a      	str	r6, [sp, #232]	; 0xe8
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 801e010:	951f      	str	r5, [sp, #124]	; 0x7c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 801e012:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801e014:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801e016:	f7e6 fb0b 	bl	8004630 <HAL_RCCEx_PeriphCLKConfig>
 801e01a:	4604      	mov	r4, r0
 801e01c:	b100      	cbz	r0, 801e020 <SystemClock_Config+0xac>
 801e01e:	e7fe      	b.n	801e01e <SystemClock_Config+0xaa>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 801e020:	f7e6 f9cc 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 801e024:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801e028:	fbb0 f0f3 	udiv	r0, r0, r3
 801e02c:	f7e3 fd06 	bl	8001a3c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 801e030:	2004      	movs	r0, #4
 801e032:	f7e3 fd27 	bl	8001a84 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801e036:	4622      	mov	r2, r4
 801e038:	4621      	mov	r1, r4
 801e03a:	f04f 30ff 	mov.w	r0, #4294967295
 801e03e:	f7e3 fcaf 	bl	80019a0 <HAL_NVIC_SetPriority>
}
 801e042:	b03f      	add	sp, #252	; 0xfc
 801e044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e046:	bf00      	nop
 801e048:	00486060 	.word	0x00486060
 801e04c:	00000000 	.word	0x00000000

0801e050 <main>:
{
 801e050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e054:	ed2d 8b02 	vpush	{d8}
 801e058:	b0a7      	sub	sp, #156	; 0x9c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801e05a:	4db2      	ldr	r5, [pc, #712]	; (801e324 <main+0x2d4>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801e05c:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 801e340 <main+0x2f0>
  HAL_Init();
 801e060:	f7e2 ffc6 	bl	8000ff0 <HAL_Init>
	HAL_Delay(1);
 801e064:	2001      	movs	r0, #1
 801e066:	f7e2 ffe1 	bl	800102c <HAL_Delay>
  SystemClock_Config();
 801e06a:	f7ff ff83 	bl	801df74 <SystemClock_Config>
	HAL_Delay(1);
 801e06e:	2001      	movs	r0, #1
 801e070:	f7e2 ffdc 	bl	800102c <HAL_Delay>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801e074:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e076:	f043 0310 	orr.w	r3, r3, #16
 801e07a:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e07c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e07e:	f003 0310 	and.w	r3, r3, #16
 801e082:	9307      	str	r3, [sp, #28]
 801e084:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 801e086:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e088:	f043 0320 	orr.w	r3, r3, #32
 801e08c:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e08e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e090:	f003 0320 	and.w	r3, r3, #32
 801e094:	9308      	str	r3, [sp, #32]
 801e096:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801e098:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e09a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e09e:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e0a0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e0a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e0a6:	9309      	str	r3, [sp, #36]	; 0x24
 801e0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801e0aa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e0ac:	f043 0301 	orr.w	r3, r3, #1
 801e0b0:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e0b2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e0b4:	f003 0301 	and.w	r3, r3, #1
 801e0b8:	930a      	str	r3, [sp, #40]	; 0x28
 801e0ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801e0bc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e0be:	f043 0304 	orr.w	r3, r3, #4
 801e0c2:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e0c4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e0c6:	f003 0304 	and.w	r3, r3, #4
 801e0ca:	930b      	str	r3, [sp, #44]	; 0x2c
 801e0cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801e0ce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e0d0:	f043 0302 	orr.w	r3, r3, #2
 801e0d4:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e0d6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e0d8:	f003 0302 	and.w	r3, r3, #2
 801e0dc:	930c      	str	r3, [sp, #48]	; 0x30
 801e0de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801e0e0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e0e2:	f043 0308 	orr.w	r3, r3, #8
 801e0e6:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e0e8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e0ea:	f003 0308 	and.w	r3, r3, #8
 801e0ee:	930d      	str	r3, [sp, #52]	; 0x34
 801e0f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	__HAL_RCC_GPIOG_CLK_ENABLE();
 801e0f2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e0f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e0f8:	64eb      	str	r3, [r5, #76]	; 0x4c
 801e0fa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801e0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e100:	930e      	str	r3, [sp, #56]	; 0x38
 801e102:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	  HAL_PWREx_EnableVddIO2();
 801e104:	f7e5 fd7a 	bl	8003bfc <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_RESET);
 801e108:	2200      	movs	r2, #0
 801e10a:	f242 0110 	movw	r1, #8208	; 0x2010
 801e10e:	4886      	ldr	r0, [pc, #536]	; (801e328 <main+0x2d8>)
 801e110:	f7e4 fa0c 	bl	800252c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801e114:	2200      	movs	r2, #0
 801e116:	2120      	movs	r1, #32
 801e118:	4884      	ldr	r0, [pc, #528]	; (801e32c <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e11a:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e11c:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801e11e:	f7e4 fa05 	bl	800252c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801e122:	2720      	movs	r7, #32
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e124:	a919      	add	r1, sp, #100	; 0x64
 801e126:	4881      	ldr	r0, [pc, #516]	; (801e32c <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801e128:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e12a:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e12c:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e12e:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e130:	f7e4 f886 	bl	8002240 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET); //VIDEO_GAIN ON
 801e134:	4622      	mov	r2, r4
 801e136:	4639      	mov	r1, r7
 801e138:	487c      	ldr	r0, [pc, #496]	; (801e32c <main+0x2dc>)
 801e13a:	f7e4 f9f7 	bl	800252c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801e13e:	f242 0310 	movw	r3, #8208	; 0x2010
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e142:	a919      	add	r1, sp, #100	; 0x64
 801e144:	4878      	ldr	r0, [pc, #480]	; (801e328 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801e146:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e148:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e14a:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e14c:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e14e:	f7e4 f877 	bl	8002240 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//ST init HIGH
 801e152:	4632      	mov	r2, r6
 801e154:	2110      	movs	r1, #16
 801e156:	4874      	ldr	r0, [pc, #464]	; (801e328 <main+0x2d8>)
 801e158:	f7e4 f9e8 	bl	800252c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Laser init OFF
 801e15c:	4622      	mov	r2, r4
 801e15e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801e162:	4871      	ldr	r0, [pc, #452]	; (801e328 <main+0x2d8>)
 801e164:	f7e4 f9e2 	bl	800252c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801e168:	2380      	movs	r3, #128	; 0x80
 801e16a:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e16c:	a919      	add	r1, sp, #100	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801e16e:	4b70      	ldr	r3, [pc, #448]	; (801e330 <main+0x2e0>)
 801e170:	931a      	str	r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e176:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e178:	f7e4 f862 	bl	8002240 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 801e17c:	4622      	mov	r2, r4
 801e17e:	2104      	movs	r1, #4
 801e180:	486a      	ldr	r0, [pc, #424]	; (801e32c <main+0x2dc>)
 801e182:	f7e4 f9d3 	bl	800252c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801e186:	f04f 0a04 	mov.w	sl, #4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e18a:	a919      	add	r1, sp, #100	; 0x64
 801e18c:	4867      	ldr	r0, [pc, #412]	; (801e32c <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801e18e:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e192:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e194:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e196:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e198:	f7e4 f852 	bl	8002240 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801e19c:	4632      	mov	r2, r6
 801e19e:	4651      	mov	r1, sl
 801e1a0:	4862      	ldr	r0, [pc, #392]	; (801e32c <main+0x2dc>)
 801e1a2:	f7e4 f9c3 	bl	800252c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 801e1a6:	4622      	mov	r2, r4
 801e1a8:	2102      	movs	r1, #2
 801e1aa:	4860      	ldr	r0, [pc, #384]	; (801e32c <main+0x2dc>)
 801e1ac:	f7e4 f9be 	bl	800252c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801e1b0:	2702      	movs	r7, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e1b2:	a919      	add	r1, sp, #100	; 0x64
 801e1b4:	485d      	ldr	r0, [pc, #372]	; (801e32c <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801e1b6:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e1b8:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e1ba:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e1bc:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e1be:	f7e4 f83f 	bl	8002240 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 801e1c2:	4632      	mov	r2, r6
 801e1c4:	4639      	mov	r1, r7
 801e1c6:	4859      	ldr	r0, [pc, #356]	; (801e32c <main+0x2dc>)
 801e1c8:	f7e4 f9b0 	bl	800252c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801e1cc:	f44f 6800 	mov.w	r8, #2048	; 0x800
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e1d0:	a919      	add	r1, sp, #100	; 0x64
 801e1d2:	4856      	ldr	r0, [pc, #344]	; (801e32c <main+0x2dc>)
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801e1d4:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801e1d8:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e1da:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e1dc:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e1de:	f7e4 f82f 	bl	8002240 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 801e1e2:	4632      	mov	r2, r6
 801e1e4:	4641      	mov	r1, r8
 801e1e6:	4851      	ldr	r0, [pc, #324]	; (801e32c <main+0x2dc>)
 801e1e8:	f7e4 f9a0 	bl	800252c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801e1ec:	f04f 0808 	mov.w	r8, #8
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e1f0:	a919      	add	r1, sp, #100	; 0x64
 801e1f2:	484e      	ldr	r0, [pc, #312]	; (801e32c <main+0x2dc>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801e1f4:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801e1f8:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e1fc:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801e1fe:	f7e4 f81f 	bl	8002240 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801e202:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e206:	a919      	add	r1, sp, #100	; 0x64
 801e208:	4847      	ldr	r0, [pc, #284]	; (801e328 <main+0x2d8>)
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801e20a:	9319      	str	r3, [sp, #100]	; 0x64
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801e20c:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e210:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801e212:	f7e4 f815 	bl	8002240 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 2); //SDO IRQ
 801e216:	463a      	mov	r2, r7
 801e218:	4621      	mov	r1, r4
 801e21a:	2017      	movs	r0, #23
 801e21c:	f7e3 fbc0 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0); //Touchscreen IRQ
 801e220:	4622      	mov	r2, r4
 801e222:	4639      	mov	r1, r7
 801e224:	2009      	movs	r0, #9
 801e226:	f7e3 fbbb 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801e22a:	2017      	movs	r0, #23
 801e22c:	f7e3 fbec 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 801e230:	2009      	movs	r0, #9
 801e232:	f7e3 fbe9 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801e236:	4630      	mov	r0, r6
 801e238:	f7e2 fef8 	bl	800102c <HAL_Delay>
	DWT_Init();
 801e23c:	f7fe fde8 	bl	801ce10 <DWT_Init>
	HAL_Delay(1);
 801e240:	4630      	mov	r0, r6
 801e242:	f7e2 fef3 	bl	800102c <HAL_Delay>
	MX_TIM2_Init();
 801e246:	f7fe fdaf 	bl	801cda8 <MX_TIM2_Init>
	HAL_Delay(1);
 801e24a:	4630      	mov	r0, r6
 801e24c:	f7e2 feee 	bl	800102c <HAL_Delay>

//PWM Timer for booster
static void MX_TIM15_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
 801e250:	221c      	movs	r2, #28
 801e252:	4621      	mov	r1, r4
 801e254:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801e256:	940f      	str	r4, [sp, #60]	; 0x3c
 801e258:	9410      	str	r4, [sp, #64]	; 0x40
 801e25a:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 801e25c:	f002 f811 	bl	8020282 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801e260:	222c      	movs	r2, #44	; 0x2c
 801e262:	4621      	mov	r1, r4
 801e264:	a819      	add	r0, sp, #100	; 0x64
 801e266:	f002 f80c 	bl	8020282 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 801e26a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 801e344 <main+0x2f4>
  htim15.Init.Prescaler = 1200;
 801e26e:	4b31      	ldr	r3, [pc, #196]	; (801e334 <main+0x2e4>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 801e270:	f8c9 4008 	str.w	r4, [r9, #8]
  htim15.Init.Prescaler = 1200;
 801e274:	f44f 6b96 	mov.w	fp, #1200	; 0x4b0
 801e278:	e889 0808 	stmia.w	r9, {r3, fp}
  htim15.Init.Period = 100;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim15.Init.RepetitionCounter = 0;
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801e27c:	4648      	mov	r0, r9
  htim15.Init.Period = 100;
 801e27e:	2364      	movs	r3, #100	; 0x64
 801e280:	f8c9 300c 	str.w	r3, [r9, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801e284:	f8c9 4010 	str.w	r4, [r9, #16]
  htim15.Init.RepetitionCounter = 0;
 801e288:	f8c9 4014 	str.w	r4, [r9, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801e28c:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801e290:	f7e7 fde4 	bl	8005e5c <HAL_TIM_PWM_Init>
 801e294:	b100      	cbz	r0, 801e298 <main+0x248>
 801e296:	e7fe      	b.n	801e296 <main+0x246>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801e298:	900f      	str	r0, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801e29a:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 801e29c:	a90f      	add	r1, sp, #60	; 0x3c
 801e29e:	4648      	mov	r0, r9
 801e2a0:	f7e8 f828 	bl	80062f4 <HAL_TIMEx_MasterConfigSynchronization>
 801e2a4:	b100      	cbz	r0, 801e2a8 <main+0x258>
 801e2a6:	e7fe      	b.n	801e2a6 <main+0x256>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801e2a8:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 801e2aa:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801e2ac:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801e2ae:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801e2b0:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801e2b2:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801e2b4:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801e2b6:	4652      	mov	r2, sl
 801e2b8:	a912      	add	r1, sp, #72	; 0x48
 801e2ba:	4648      	mov	r0, r9
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801e2bc:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801e2be:	f7e7 fe65 	bl	8005f8c <HAL_TIM_PWM_ConfigChannel>
 801e2c2:	b100      	cbz	r0, 801e2c6 <main+0x276>
 801e2c4:	e7fe      	b.n	801e2c4 <main+0x274>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801e2c6:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801e2c8:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801e2ca:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.DeadTime = 0;
 801e2cc:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801e2ce:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801e2d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 801e2d4:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801e2d6:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801e2d8:	a919      	add	r1, sp, #100	; 0x64
 801e2da:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801e2dc:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801e2de:	f7e8 f835 	bl	800634c <HAL_TIMEx_ConfigBreakDeadTime>
 801e2e2:	4682      	mov	sl, r0
 801e2e4:	b100      	cbz	r0, 801e2e8 <main+0x298>
 801e2e6:	e7fe      	b.n	801e2e6 <main+0x296>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 801e2e8:	4648      	mov	r0, r9
 801e2ea:	f001 fbbd 	bl	801fa68 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801e2ee:	4630      	mov	r0, r6
 801e2f0:	f7e2 fe9c 	bl	800102c <HAL_Delay>
  htim5.Instance = TIM5;
 801e2f4:	4c10      	ldr	r4, [pc, #64]	; (801e338 <main+0x2e8>)
 801e2f6:	4b11      	ldr	r3, [pc, #68]	; (801e33c <main+0x2ec>)
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801e2f8:	f8c4 a010 	str.w	sl, [r4, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801e2fc:	e884 0488 	stmia.w	r4, {r3, r7, sl}
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801e300:	4620      	mov	r0, r4
  htim5.Init.Period = 30;
 801e302:	231e      	movs	r3, #30
 801e304:	60e3      	str	r3, [r4, #12]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801e306:	f8c4 a018 	str.w	sl, [r4, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801e30a:	f7e7 fd8d 	bl	8005e28 <HAL_TIM_OC_Init>
 801e30e:	b100      	cbz	r0, 801e312 <main+0x2c2>
 801e310:	e7fe      	b.n	801e310 <main+0x2c0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801e312:	9012      	str	r0, [sp, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801e314:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801e316:	a912      	add	r1, sp, #72	; 0x48
 801e318:	4620      	mov	r0, r4
 801e31a:	f7e7 ffeb 	bl	80062f4 <HAL_TIMEx_MasterConfigSynchronization>
 801e31e:	4602      	mov	r2, r0
 801e320:	b190      	cbz	r0, 801e348 <main+0x2f8>
 801e322:	e7fe      	b.n	801e322 <main+0x2d2>
 801e324:	40021000 	.word	0x40021000
 801e328:	48000800 	.word	0x48000800
 801e32c:	48001400 	.word	0x48001400
 801e330:	10210000 	.word	0x10210000
 801e334:	40014000 	.word	0x40014000
 801e338:	2009589c 	.word	0x2009589c
 801e33c:	40000c00 	.word	0x40000c00
 801e340:	10110000 	.word	0x10110000
 801e344:	200957b4 	.word	0x200957b4
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801e348:	2330      	movs	r3, #48	; 0x30
 801e34a:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801e34c:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 5;
 801e34e:	2305      	movs	r3, #5
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801e350:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801e352:	a919      	add	r1, sp, #100	; 0x64
 801e354:	4620      	mov	r0, r4
  sConfigOC.Pulse = 5;
 801e356:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801e358:	f7e7 fde0 	bl	8005f1c <HAL_TIM_OC_ConfigChannel>
 801e35c:	4681      	mov	r9, r0
 801e35e:	b100      	cbz	r0, 801e362 <main+0x312>
 801e360:	e7fe      	b.n	801e360 <main+0x310>
  HAL_TIM_MspPostInit(&htim5);
 801e362:	4620      	mov	r0, r4
 801e364:	f001 fb80 	bl	801fa68 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801e368:	4630      	mov	r0, r6
 801e36a:	f7e2 fe5f 	bl	800102c <HAL_Delay>
	MX_USB_DEVICE_Init();
 801e36e:	f001 fcf7 	bl	801fd60 <MX_USB_DEVICE_Init>
	HAL_Delay(1);
 801e372:	4630      	mov	r0, r6
 801e374:	f7e2 fe5a 	bl	800102c <HAL_Delay>
  hdma2d.Instance = DMA2D;
 801e378:	4c8e      	ldr	r4, [pc, #568]	; (801e5b4 <main+0x564>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801e37a:	4b8f      	ldr	r3, [pc, #572]	; (801e5b8 <main+0x568>)
	hdma2d.LayerCfg[0].InputOffset = 0;
 801e37c:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hdma2d.Init.Mode = DMA2D_R2M;
 801e380:	f44f 3a40 	mov.w	sl, #196608	; 0x30000
 801e384:	e884 0408 	stmia.w	r4, {r3, sl}
  hdma2d.LayerCfg[0].InputAlpha =125;
 801e388:	237d      	movs	r3, #125	; 0x7d
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 801e38a:	62e7      	str	r7, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801e38c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hdma2d.LayerCfg[0].InputAlpha =125;
 801e390:	6363      	str	r3, [r4, #52]	; 0x34
  hdma2d.LayerCfg[1].InputOffset = 0;
 801e392:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 801e396:	6467      	str	r7, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801e398:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 125;
 801e39c:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801e39e:	4620      	mov	r0, r4
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801e3a0:	60a7      	str	r7, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 801e3a2:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801e3a6:	f7e3 fc19 	bl	8001bdc <HAL_DMA2D_Init>
 801e3aa:	b100      	cbz	r0, 801e3ae <main+0x35e>
 801e3ac:	e7fe      	b.n	801e3ac <main+0x35c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 801e3ae:	4631      	mov	r1, r6
 801e3b0:	4620      	mov	r0, r4
 801e3b2:	f7e3 fcf9 	bl	8001da8 <HAL_DMA2D_ConfigLayer>
 801e3b6:	4681      	mov	r9, r0
 801e3b8:	b100      	cbz	r0, 801e3bc <main+0x36c>
 801e3ba:	e7fe      	b.n	801e3ba <main+0x36a>
	HAL_Delay(1);
 801e3bc:	4630      	mov	r0, r6
 801e3be:	f7e2 fe35 	bl	800102c <HAL_Delay>
  hspi1.Instance = SPI1;
 801e3c2:	4c7e      	ldr	r4, [pc, #504]	; (801e5bc <main+0x56c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801e3c4:	4b7e      	ldr	r3, [pc, #504]	; (801e5c0 <main+0x570>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801e3c6:	f8c4 9008 	str.w	r9, [r4, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801e3ca:	f44f 7c82 	mov.w	ip, #260	; 0x104
 801e3ce:	e884 1008 	stmia.w	r4, {r3, ip}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801e3d2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 801e3d6:	60e3      	str	r3, [r4, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801e3d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 801e3dc:	61a3      	str	r3, [r4, #24]
  hspi1.Init.TIMode = SPI_TIMODE_ENABLE;
 801e3de:	2310      	movs	r3, #16
 801e3e0:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801e3e2:	4620      	mov	r0, r4
  hspi1.Init.CRCPolynomial = 7;
 801e3e4:	2307      	movs	r3, #7
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801e3e6:	6127      	str	r7, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 801e3e8:	6166      	str	r6, [r4, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;//SPI_BAUDRATEPRESCALER_2
 801e3ea:	f8c4 801c 	str.w	r8, [r4, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801e3ee:	f8c4 9020 	str.w	r9, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801e3f2:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 801e3f6:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801e3f8:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801e3fc:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801e400:	f7e7 f920 	bl	8005644 <HAL_SPI_Init>
 801e404:	b100      	cbz	r0, 801e408 <main+0x3b8>
 801e406:	e7fe      	b.n	801e406 <main+0x3b6>
	__HAL_SPI_ENABLE(&hspi1);
 801e408:	6822      	ldr	r2, [r4, #0]
  hi2c1.Instance = I2C1;
 801e40a:	4c6e      	ldr	r4, [pc, #440]	; (801e5c4 <main+0x574>)
	__HAL_SPI_ENABLE(&hspi1);
 801e40c:	6813      	ldr	r3, [r2, #0]
 801e40e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e412:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 801e414:	2001      	movs	r0, #1
 801e416:	f7e2 fe09 	bl	800102c <HAL_Delay>
  hi2c1.Instance = I2C1;
 801e41a:	4b6b      	ldr	r3, [pc, #428]	; (801e5c8 <main+0x578>)
 801e41c:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x307075B1;
 801e41e:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 801e422:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 801e426:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 801e42a:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 112;
 801e42c:	2370      	movs	r3, #112	; 0x70
 801e42e:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801e430:	2701      	movs	r7, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801e432:	2300      	movs	r3, #0
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801e434:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801e436:	60e7      	str	r7, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801e438:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801e43a:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801e43c:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801e43e:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801e440:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801e442:	f7e4 f9c4 	bl	80027ce <HAL_I2C_Init>
 801e446:	4601      	mov	r1, r0
 801e448:	b100      	cbz	r0, 801e44c <main+0x3fc>
 801e44a:	e7fe      	b.n	801e44a <main+0x3fa>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801e44c:	4620      	mov	r0, r4
 801e44e:	f7e4 fd27 	bl	8002ea0 <HAL_I2CEx_ConfigAnalogFilter>
 801e452:	4601      	mov	r1, r0
 801e454:	b100      	cbz	r0, 801e458 <main+0x408>
 801e456:	e7fe      	b.n	801e456 <main+0x406>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801e458:	4620      	mov	r0, r4
 801e45a:	f7e4 fd47 	bl	8002eec <HAL_I2CEx_ConfigDigitalFilter>
 801e45e:	4606      	mov	r6, r0
 801e460:	b100      	cbz	r0, 801e464 <main+0x414>
 801e462:	e7fe      	b.n	801e462 <main+0x412>
	HAL_Delay(1);
 801e464:	4638      	mov	r0, r7
 801e466:	f7e2 fde1 	bl	800102c <HAL_Delay>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801e46a:	4c58      	ldr	r4, [pc, #352]	; (801e5cc <main+0x57c>)
  huart1.Init.BaudRate = 115200;
 801e46c:	4b58      	ldr	r3, [pc, #352]	; (801e5d0 <main+0x580>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801e46e:	60a6      	str	r6, [r4, #8]
  huart1.Init.BaudRate = 115200;
 801e470:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 801e474:	e884 4008 	stmia.w	r4, {r3, lr}
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801e478:	4620      	mov	r0, r4
  huart1.Init.Mode = UART_MODE_TX_RX;
 801e47a:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 801e47c:	60e6      	str	r6, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801e47e:	6126      	str	r6, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801e480:	6163      	str	r3, [r4, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801e482:	61a6      	str	r6, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801e484:	61e6      	str	r6, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801e486:	6226      	str	r6, [r4, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801e488:	6266      	str	r6, [r4, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801e48a:	62a6      	str	r6, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801e48c:	f7e8 fc48 	bl	8006d20 <HAL_UART_Init>
 801e490:	4601      	mov	r1, r0
 801e492:	b100      	cbz	r0, 801e496 <main+0x446>
 801e494:	e7fe      	b.n	801e494 <main+0x444>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801e496:	4620      	mov	r0, r4
 801e498:	f7e8 fcd3 	bl	8006e42 <HAL_UARTEx_SetTxFifoThreshold>
 801e49c:	4601      	mov	r1, r0
 801e49e:	b100      	cbz	r0, 801e4a2 <main+0x452>
 801e4a0:	e7fe      	b.n	801e4a0 <main+0x450>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801e4a2:	4620      	mov	r0, r4
 801e4a4:	f7e8 fcf1 	bl	8006e8a <HAL_UARTEx_SetRxFifoThreshold>
 801e4a8:	b100      	cbz	r0, 801e4ac <main+0x45c>
 801e4aa:	e7fe      	b.n	801e4aa <main+0x45a>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 801e4ac:	4620      	mov	r0, r4
 801e4ae:	f7e8 fcad 	bl	8006e0c <HAL_UARTEx_DisableFifoMode>
 801e4b2:	4606      	mov	r6, r0
 801e4b4:	b100      	cbz	r0, 801e4b8 <main+0x468>
 801e4b6:	e7fe      	b.n	801e4b6 <main+0x466>
  {
    Error_Handler();
  }

  HAL_NVIC_SetPriority(USART1_IRQn, 1, 3);
 801e4b8:	2203      	movs	r2, #3
 801e4ba:	4639      	mov	r1, r7
 801e4bc:	2025      	movs	r0, #37	; 0x25
 801e4be:	f7e3 fa6f 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 801e4c2:	4638      	mov	r0, r7
 801e4c4:	f7e2 fdb2 	bl	800102c <HAL_Delay>
  hltdc.Instance = LTDC;
 801e4c8:	4c42      	ldr	r4, [pc, #264]	; (801e5d4 <main+0x584>)
 801e4ca:	4b43      	ldr	r3, [pc, #268]	; (801e5d8 <main+0x588>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 801e4cc:	60a6      	str	r6, [r4, #8]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801e4ce:	e884 0048 	stmia.w	r4, {r3, r6}
  hltdc.Init.HorizontalSync = 5;
 801e4d2:	2305      	movs	r3, #5
 801e4d4:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 30;
 801e4d6:	231e      	movs	r3, #30
 801e4d8:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 40;
 801e4da:	2328      	movs	r3, #40	; 0x28
 801e4dc:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 8;
 801e4de:	2308      	movs	r3, #8
 801e4e0:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 520;
 801e4e2:	f44f 7302 	mov.w	r3, #520	; 0x208
 801e4e6:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 280;
 801e4e8:	f44f 738c 	mov.w	r3, #280	; 0x118
 801e4ec:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 801e4ee:	f240 230d 	movw	r3, #525	; 0x20d
 801e4f2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801e4f4:	4620      	mov	r0, r4
  hltdc.Init.TotalHeigh = 288;
 801e4f6:	f44f 7390 	mov.w	r3, #288	; 0x120
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801e4fa:	60e6      	str	r6, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801e4fc:	6126      	str	r6, [r4, #16]
  hltdc.Init.TotalHeigh = 288;
 801e4fe:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 801e500:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801e504:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 801e508:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801e50c:	f7e4 fd9a 	bl	8003044 <HAL_LTDC_Init>
 801e510:	4602      	mov	r2, r0
 801e512:	b100      	cbz	r0, 801e516 <main+0x4c6>
 801e514:	e7fe      	b.n	801e514 <main+0x4c4>
  pLayerCfg.WindowY1 = 272;
 801e516:	f44f 7188 	mov.w	r1, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
 801e51a:	9019      	str	r0, [sp, #100]	; 0x64
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801e51c:	2302      	movs	r3, #2
  pLayerCfg.WindowX1 = 480;
 801e51e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801e522:	f44f 6680 	mov.w	r6, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 801e526:	901a      	str	r0, [sp, #104]	; 0x68
  pLayerCfg.WindowY1 = 272;
 801e528:	911c      	str	r1, [sp, #112]	; 0x70
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 801e52a:	931d      	str	r3, [sp, #116]	; 0x74
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 801e52c:	9620      	str	r6, [sp, #128]	; 0x80
  pLayerCfg.Alpha = 255;
 801e52e:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.ImageWidth = 480;
 801e530:	9023      	str	r0, [sp, #140]	; 0x8c
  pLayerCfg.ImageHeight = 272;
 801e532:	9124      	str	r1, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801e534:	4620      	mov	r0, r4
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801e536:	2607      	movs	r6, #7
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801e538:	a919      	add	r1, sp, #100	; 0x64
  pLayerCfg.WindowY0 = 0;
 801e53a:	921b      	str	r2, [sp, #108]	; 0x6c
  pLayerCfg.Alpha = 255;
 801e53c:	931e      	str	r3, [sp, #120]	; 0x78
  pLayerCfg.Alpha0 = 0;
 801e53e:	921f      	str	r2, [sp, #124]	; 0x7c
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 801e540:	9621      	str	r6, [sp, #132]	; 0x84
  pLayerCfg.FBStartAdress = 0;
 801e542:	9222      	str	r2, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 255;
 801e544:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
  pLayerCfg.Backcolor.Green = 255;
 801e548:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
  pLayerCfg.Backcolor.Red = 255;
 801e54c:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 801e550:	f7e4 fde4 	bl	800311c <HAL_LTDC_ConfigLayer>
 801e554:	4604      	mov	r4, r0
 801e556:	b100      	cbz	r0, 801e55a <main+0x50a>
 801e558:	e7fe      	b.n	801e558 <main+0x508>
	HAL_Delay(1);
 801e55a:	4638      	mov	r0, r7
 801e55c:	f7e2 fd66 	bl	800102c <HAL_Delay>
  hadc1.Instance = ADC1;
 801e560:	481e      	ldr	r0, [pc, #120]	; (801e5dc <main+0x58c>)
 801e562:	4b1f      	ldr	r3, [pc, #124]	; (801e5e0 <main+0x590>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 801e564:	6084      	str	r4, [r0, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 801e566:	e880 0018 	stmia.w	r0, {r3, r4}
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801e56a:	2304      	movs	r3, #4
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801e56c:	60c4      	str	r4, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 801e56e:	6104      	str	r4, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 801e570:	6143      	str	r3, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 801e572:	6184      	str	r4, [r0, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 801e574:	61c7      	str	r7, [r0, #28]
  hadc1.Init.NbrOfConversion = 1;
 801e576:	6207      	str	r7, [r0, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 801e578:	6244      	str	r4, [r0, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 801e57a:	6287      	str	r7, [r0, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 801e57c:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 801e57e:	6304      	str	r4, [r0, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 801e580:	6344      	str	r4, [r0, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 801e582:	6384      	str	r4, [r0, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 801e584:	63c4      	str	r4, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 801e586:	f7e2 fd87 	bl	8001098 <HAL_ADC_Init>
 801e58a:	b100      	cbz	r0, 801e58e <main+0x53e>
 801e58c:	e7fe      	b.n	801e58c <main+0x53c>
  sConfig.Channel = ADC_CHANNEL_3;
 801e58e:	4b15      	ldr	r3, [pc, #84]	; (801e5e4 <main+0x594>)
 801e590:	9319      	str	r3, [sp, #100]	; 0x64
  sConfig.Rank = ADC_REGULAR_RANK_1;
 801e592:	2306      	movs	r3, #6
 801e594:	931a      	str	r3, [sp, #104]	; 0x68
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 801e596:	2307      	movs	r3, #7
 801e598:	931b      	str	r3, [sp, #108]	; 0x6c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 801e59a:	237f      	movs	r3, #127	; 0x7f
 801e59c:	931c      	str	r3, [sp, #112]	; 0x70
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801e59e:	2604      	movs	r6, #4
  sConfig.Offset = 0;
 801e5a0:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801e5a2:	a919      	add	r1, sp, #100	; 0x64
 801e5a4:	480d      	ldr	r0, [pc, #52]	; (801e5dc <main+0x58c>)
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 801e5a6:	961d      	str	r6, [sp, #116]	; 0x74
  sConfig.Offset = 0;
 801e5a8:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 801e5aa:	f7e2 fe95 	bl	80012d8 <HAL_ADC_ConfigChannel>
 801e5ae:	4604      	mov	r4, r0
 801e5b0:	b1d0      	cbz	r0, 801e5e8 <main+0x598>
 801e5b2:	e7fe      	b.n	801e5b2 <main+0x562>
 801e5b4:	20095b90 	.word	0x20095b90
 801e5b8:	4002b000 	.word	0x4002b000
 801e5bc:	20095bf0 	.word	0x20095bf0
 801e5c0:	40013000 	.word	0x40013000
 801e5c4:	20095768 	.word	0x20095768
 801e5c8:	40005400 	.word	0x40005400
 801e5cc:	20095a54 	.word	0x20095a54
 801e5d0:	40013800 	.word	0x40013800
 801e5d4:	20095900 	.word	0x20095900
 801e5d8:	40016800 	.word	0x40016800
 801e5dc:	200959d0 	.word	0x200959d0
 801e5e0:	50040000 	.word	0x50040000
 801e5e4:	0c900008 	.word	0x0c900008
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 801e5e8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801e5ea:	f043 0304 	orr.w	r3, r3, #4
 801e5ee:	64ab      	str	r3, [r5, #72]	; 0x48
 801e5f0:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801e5f2:	f003 0304 	and.w	r3, r3, #4
 801e5f6:	930f      	str	r3, [sp, #60]	; 0x3c
 801e5f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 801e5fa:	6cab      	ldr	r3, [r5, #72]	; 0x48
 801e5fc:	f043 0301 	orr.w	r3, r3, #1
 801e600:	64ab      	str	r3, [r5, #72]	; 0x48
 801e602:	6cab      	ldr	r3, [r5, #72]	; 0x48
  htim6.Instance = TIM6;
 801e604:	4d32      	ldr	r5, [pc, #200]	; (801e6d0 <main+0x680>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 801e606:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801e60a:	4602      	mov	r2, r0
 801e60c:	4601      	mov	r1, r0
  __HAL_RCC_DMA1_CLK_ENABLE();
 801e60e:	9312      	str	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801e610:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 801e612:	9b12      	ldr	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801e614:	f7e3 f9c4 	bl	80019a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 801e618:	200b      	movs	r0, #11
 801e61a:	f7e3 f9f5 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801e61e:	2001      	movs	r0, #1
 801e620:	f7e2 fd04 	bl	800102c <HAL_Delay>
	HAL_TIM_OC_Start(&htim5, TIM_CHANNEL_1);
 801e624:	4621      	mov	r1, r4
 801e626:	482b      	ldr	r0, [pc, #172]	; (801e6d4 <main+0x684>)
 801e628:	f7e7 fe24 	bl	8006274 <HAL_TIM_OC_Start>
	HAL_Delay(1);
 801e62c:	2001      	movs	r0, #1
 801e62e:	f7e2 fcfd 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);  //ST Signal
 801e632:	2201      	movs	r2, #1
 801e634:	4621      	mov	r1, r4
 801e636:	201c      	movs	r0, #28
 801e638:	f7e3 f9b2 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 801e63c:	2002      	movs	r0, #2
 801e63e:	f7e2 fcf5 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801e642:	201c      	movs	r0, #28
 801e644:	f7e3 f9e0 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801e648:	2001      	movs	r0, #1
 801e64a:	f7e2 fcef 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim2);
 801e64e:	4822      	ldr	r0, [pc, #136]	; (801e6d8 <main+0x688>)
 801e650:	f7e7 fa9c 	bl	8005b8c <HAL_TIM_Base_Start_IT>
	HAL_Delay(1);
 801e654:	2001      	movs	r0, #1
 801e656:	f7e2 fce9 	bl	800102c <HAL_Delay>
	HAL_NVIC_SetPriority(LTDC_IRQn, 1, 3);  //
 801e65a:	2203      	movs	r2, #3
 801e65c:	2101      	movs	r1, #1
 801e65e:	205b      	movs	r0, #91	; 0x5b
 801e660:	f7e3 f99e 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 801e664:	2002      	movs	r0, #2
 801e666:	f7e2 fce1 	bl	800102c <HAL_Delay>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801e66a:	4631      	mov	r1, r6
 801e66c:	481b      	ldr	r0, [pc, #108]	; (801e6dc <main+0x68c>)
 801e66e:	f7e7 fdcd 	bl	800620c <HAL_TIM_PWM_Start>
	TIM15->CCR2 = 50;
 801e672:	4b1b      	ldr	r3, [pc, #108]	; (801e6e0 <main+0x690>)
 801e674:	2232      	movs	r2, #50	; 0x32
 801e676:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1);
 801e678:	2001      	movs	r0, #1
 801e67a:	f7e2 fcd7 	bl	800102c <HAL_Delay>
	HAL_UART_Receive_IT(&huart1,(uint8_t*)str1,1);
 801e67e:	2201      	movs	r2, #1
 801e680:	4918      	ldr	r1, [pc, #96]	; (801e6e4 <main+0x694>)
 801e682:	4819      	ldr	r0, [pc, #100]	; (801e6e8 <main+0x698>)
 801e684:	f7e7 ffca 	bl	800661c <HAL_UART_Receive_IT>
	HAL_Delay(1);
 801e688:	2001      	movs	r0, #1
 801e68a:	f7e2 fccf 	bl	800102c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801e68e:	4817      	ldr	r0, [pc, #92]	; (801e6ec <main+0x69c>)
 801e690:	2201      	movs	r2, #1
 801e692:	4631      	mov	r1, r6
 801e694:	f7e3 ff4a 	bl	800252c <HAL_GPIO_WritePin>
  htim6.Init.Prescaler = 48000;
 801e698:	4b15      	ldr	r3, [pc, #84]	; (801e6f0 <main+0x6a0>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801e69a:	9419      	str	r4, [sp, #100]	; 0x64
  htim6.Init.Prescaler = 48000;
 801e69c:	f64b 3780 	movw	r7, #48000	; 0xbb80
 801e6a0:	e885 0088 	stmia.w	r5, {r3, r7}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801e6a4:	4628      	mov	r0, r5
  htim6.Init.Period = 3800;
 801e6a6:	f640 63d8 	movw	r3, #3800	; 0xed8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801e6aa:	941a      	str	r4, [sp, #104]	; 0x68
 801e6ac:	941b      	str	r4, [sp, #108]	; 0x6c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 801e6ae:	60ac      	str	r4, [r5, #8]
  htim6.Init.Period = 3800;
 801e6b0:	60eb      	str	r3, [r5, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801e6b2:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 801e6b4:	f7e7 fb9e 	bl	8005df4 <HAL_TIM_Base_Init>
 801e6b8:	b100      	cbz	r0, 801e6bc <main+0x66c>
 801e6ba:	e7fe      	b.n	801e6ba <main+0x66a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801e6bc:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801e6be:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 801e6c0:	a919      	add	r1, sp, #100	; 0x64
 801e6c2:	4628      	mov	r0, r5
 801e6c4:	f7e7 fe16 	bl	80062f4 <HAL_TIMEx_MasterConfigSynchronization>
 801e6c8:	4607      	mov	r7, r0
 801e6ca:	b198      	cbz	r0, 801e6f4 <main+0x6a4>
 801e6cc:	e7fe      	b.n	801e6cc <main+0x67c>
 801e6ce:	bf00      	nop
 801e6d0:	20095ae4 	.word	0x20095ae4
 801e6d4:	2009589c 	.word	0x2009589c
 801e6d8:	20095c58 	.word	0x20095c58
 801e6dc:	200957b4 	.word	0x200957b4
 801e6e0:	40014000 	.word	0x40014000
 801e6e4:	200905d2 	.word	0x200905d2
 801e6e8:	20095a54 	.word	0x20095a54
 801e6ec:	48001400 	.word	0x48001400
 801e6f0:	40001000 	.word	0x40001000
	HAL_Delay(1);
 801e6f4:	2001      	movs	r0, #1
 801e6f6:	f7e2 fc99 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801e6fa:	2036      	movs	r0, #54	; 0x36
 801e6fc:	f7e3 f984 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801e700:	2001      	movs	r0, #1
 801e702:	f7e2 fc93 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 801e706:	4628      	mov	r0, r5
 801e708:	f7e7 fa40 	bl	8005b8c <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 4);
 801e70c:	4632      	mov	r2, r6
 801e70e:	2101      	movs	r1, #1
 801e710:	201c      	movs	r0, #28
 801e712:	f7e3 f945 	bl	80019a0 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 801e716:	2001      	movs	r0, #1
 801e718:	f7e2 fc88 	bl	800102c <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 801e71c:	463a      	mov	r2, r7
 801e71e:	49d0      	ldr	r1, [pc, #832]	; (801ea60 <main+0xa10>)
 801e720:	48d0      	ldr	r0, [pc, #832]	; (801ea64 <main+0xa14>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801e722:	4cd1      	ldr	r4, [pc, #836]	; (801ea68 <main+0xa18>)
 801e724:	4dd1      	ldr	r5, [pc, #836]	; (801ea6c <main+0xa1c>)
 801e726:	4ed2      	ldr	r6, [pc, #840]	; (801ea70 <main+0xa20>)
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801e728:	f8df 9400 	ldr.w	r9, [pc, #1024]	; 801eb2c <main+0xadc>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 801e72c:	f7e4 fd1f 	bl	800316e <HAL_LTDC_SetAddress>
	HAL_Delay(1);
 801e730:	2001      	movs	r0, #1
 801e732:	f7e2 fc7b 	bl	800102c <HAL_Delay>
	Touch_Ini();
 801e736:	f7fd fc68 	bl	801c00a <Touch_Ini>
	MX_SDMMC1_SD_Init();
 801e73a:	f7fe fb23 	bl	801cd84 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 801e73e:	f7fd fcef 	bl	801c120 <MX_FATFS_Init>
	GPIO_QSPI_Init();
 801e742:	f7fb f867 	bl	8019814 <GPIO_QSPI_Init>
	Single_Mode();	
 801e746:	f7fb f95f 	bl	8019a08 <Single_Mode>
	HAL_Delay(20);
 801e74a:	2014      	movs	r0, #20
 801e74c:	f7e2 fc6e 	bl	800102c <HAL_Delay>
	BlueTooth_GPIO_Init();
 801e750:	f7eb f95c 	bl	8009a0c <BlueTooth_GPIO_Init>
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801e754:	2103      	movs	r1, #3
 801e756:	48c7      	ldr	r0, [pc, #796]	; (801ea74 <main+0xa24>)
 801e758:	f7f0 fb32 	bl	800edc0 <Calibration_Load_1byte>
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801e75c:	4bc6      	ldr	r3, [pc, #792]	; (801ea78 <main+0xa28>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 801e75e:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801e760:	28ff      	cmp	r0, #255	; 0xff
 801e762:	bf18      	it	ne
 801e764:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 801e766:	f04f 0103 	mov.w	r1, #3
 801e76a:	48c4      	ldr	r0, [pc, #784]	; (801ea7c <main+0xa2c>)
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 801e76c:	bf08      	it	eq
 801e76e:	701f      	strbeq	r7, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 801e770:	f7f0 fb26 	bl	800edc0 <Calibration_Load_1byte>
 801e774:	4bc2      	ldr	r3, [pc, #776]	; (801ea80 <main+0xa30>)
 801e776:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 801e778:	28ff      	cmp	r0, #255	; 0xff
 801e77a:	bf0c      	ite	eq
 801e77c:	2200      	moveq	r2, #0
 801e77e:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 801e780:	f04f 0103 	mov.w	r1, #3
 801e784:	48bf      	ldr	r0, [pc, #764]	; (801ea84 <main+0xa34>)
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 801e786:	bf08      	it	eq
 801e788:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 801e78a:	f7f0 fb19 	bl	800edc0 <Calibration_Load_1byte>
 801e78e:	4bbe      	ldr	r3, [pc, #760]	; (801ea88 <main+0xa38>)
 801e790:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 801e792:	28ff      	cmp	r0, #255	; 0xff
 801e794:	bf0a      	itet	eq
 801e796:	781a      	ldrbeq	r2, [r3, #0]
 801e798:	7018      	strbne	r0, [r3, #0]
 801e79a:	f042 0201 	orreq.w	r2, r2, #1
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 801e79e:	f04f 0103 	mov.w	r1, #3
 801e7a2:	48ba      	ldr	r0, [pc, #744]	; (801ea8c <main+0xa3c>)
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 801e7a4:	bf08      	it	eq
 801e7a6:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 801e7a8:	f7f0 fb0a 	bl	800edc0 <Calibration_Load_1byte>
 801e7ac:	4bb8      	ldr	r3, [pc, #736]	; (801ea90 <main+0xa40>)
 801e7ae:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 801e7b0:	28ff      	cmp	r0, #255	; 0xff
 801e7b2:	bf0c      	ite	eq
 801e7b4:	2200      	moveq	r2, #0
 801e7b6:	7018      	strbne	r0, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 801e7b8:	f04f 0103 	mov.w	r1, #3
 801e7bc:	48b5      	ldr	r0, [pc, #724]	; (801ea94 <main+0xa44>)
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 801e7be:	bf08      	it	eq
 801e7c0:	701a      	strbeq	r2, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 801e7c2:	f7f0 fafd 	bl	800edc0 <Calibration_Load_1byte>
 801e7c6:	4bb4      	ldr	r3, [pc, #720]	; (801ea98 <main+0xa48>)
 801e7c8:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 801e7ca:	28ff      	cmp	r0, #255	; 0xff
 801e7cc:	bf0c      	ite	eq
 801e7ce:	2200      	moveq	r2, #0
 801e7d0:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 801e7d2:	f04f 0103 	mov.w	r1, #3
 801e7d6:	48b1      	ldr	r0, [pc, #708]	; (801ea9c <main+0xa4c>)
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 801e7d8:	bf08      	it	eq
 801e7da:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 801e7dc:	f7f0 faf0 	bl	800edc0 <Calibration_Load_1byte>
 801e7e0:	4baf      	ldr	r3, [pc, #700]	; (801eaa0 <main+0xa50>)
 801e7e2:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 801e7e4:	28ff      	cmp	r0, #255	; 0xff
 801e7e6:	bf0a      	itet	eq
 801e7e8:	781a      	ldrbeq	r2, [r3, #0]
 801e7ea:	7018      	strbne	r0, [r3, #0]
 801e7ec:	f042 0210 	orreq.w	r2, r2, #16
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 801e7f0:	f04f 0103 	mov.w	r1, #3
 801e7f4:	48ab      	ldr	r0, [pc, #684]	; (801eaa4 <main+0xa54>)
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 801e7f6:	bf08      	it	eq
 801e7f8:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 801e7fa:	f7f0 fae1 	bl	800edc0 <Calibration_Load_1byte>
 801e7fe:	4baa      	ldr	r3, [pc, #680]	; (801eaa8 <main+0xa58>)
 801e800:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 801e802:	28ff      	cmp	r0, #255	; 0xff
 801e804:	bf0c      	ite	eq
 801e806:	2200      	moveq	r2, #0
 801e808:	7018      	strbne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 801e80a:	f04f 0101 	mov.w	r1, #1
 801e80e:	48a7      	ldr	r0, [pc, #668]	; (801eaac <main+0xa5c>)
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 801e810:	bf08      	it	eq
 801e812:	701a      	strbeq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 801e814:	f7f0 fab0 	bl	800ed78 <Calibration_Load_2byte>
 801e818:	4ca5      	ldr	r4, [pc, #660]	; (801eab0 <main+0xa60>)
 801e81a:	4ba6      	ldr	r3, [pc, #664]	; (801eab4 <main+0xa64>)
 801e81c:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 801e81e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e822:	4290      	cmp	r0, r2
 801e824:	bf0c      	ite	eq
 801e826:	2200      	moveq	r2, #0
 801e828:	8018      	strhne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801e82a:	f04f 0101 	mov.w	r1, #1
 801e82e:	48a2      	ldr	r0, [pc, #648]	; (801eab8 <main+0xa68>)
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 801e830:	bf08      	it	eq
 801e832:	801a      	strheq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801e834:	f7f0 faa0 	bl	800ed78 <Calibration_Load_2byte>
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 801e838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e83c:	4298      	cmp	r0, r3
 801e83e:	4b9f      	ldr	r3, [pc, #636]	; (801eabc <main+0xa6c>)
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 801e840:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 801e842:	bf06      	itte	eq
 801e844:	2200      	moveq	r2, #0
 801e846:	801a      	strheq	r2, [r3, #0]
 801e848:	8018      	strhne	r0, [r3, #0]
	Calibration_WaveLenght_Graph();
 801e84a:	f7f0 fb7d 	bl	800ef48 <Calibration_WaveLenght_Graph>
	Calibration_Exposure_Change(exp_num);
 801e84e:	4b9c      	ldr	r3, [pc, #624]	; (801eac0 <main+0xa70>)
 801e850:	4f9c      	ldr	r7, [pc, #624]	; (801eac4 <main+0xa74>)
 801e852:	7818      	ldrb	r0, [r3, #0]
 801e854:	f7f0 fb3a 	bl	800eecc <Calibration_Exposure_Change>
	Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 801e858:	4b87      	ldr	r3, [pc, #540]	; (801ea78 <main+0xa28>)
 801e85a:	489b      	ldr	r0, [pc, #620]	; (801eac8 <main+0xa78>)
 801e85c:	781c      	ldrb	r4, [r3, #0]
 801e85e:	4b9b      	ldr	r3, [pc, #620]	; (801eacc <main+0xa7c>)
 801e860:	4a9b      	ldr	r2, [pc, #620]	; (801ead0 <main+0xa80>)
 801e862:	2c00      	cmp	r4, #0
 801e864:	bf18      	it	ne
 801e866:	4618      	movne	r0, r3
 801e868:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e86c:	f7f0 faec 	bl	800ee48 <Calibration_Load_Pack>
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 801e870:	4898      	ldr	r0, [pc, #608]	; (801ead4 <main+0xa84>)
 801e872:	f7f0 fad7 	bl	800ee24 <Calibration_Load_float>
 801e876:	4b98      	ldr	r3, [pc, #608]	; (801ead8 <main+0xa88>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801e878:	4898      	ldr	r0, [pc, #608]	; (801eadc <main+0xa8c>)
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 801e87a:	ed83 0a00 	vstr	s0, [r3]
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801e87e:	f7f0 fad1 	bl	800ee24 <Calibration_Load_float>
 801e882:	4b97      	ldr	r3, [pc, #604]	; (801eae0 <main+0xa90>)
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 801e884:	4a97      	ldr	r2, [pc, #604]	; (801eae4 <main+0xa94>)
 801e886:	4898      	ldr	r0, [pc, #608]	; (801eae8 <main+0xa98>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 801e888:	ed83 0a00 	vstr	s0, [r3]
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 801e88c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e890:	f7f0 fada 	bl	800ee48 <Calibration_Load_Pack>
	Calibration_Load_Pack(SPECTRAL_NIGHT, 0x400, Spectral_night);
 801e894:	4a95      	ldr	r2, [pc, #596]	; (801eaec <main+0xa9c>)
 801e896:	4896      	ldr	r0, [pc, #600]	; (801eaf0 <main+0xaa0>)
 801e898:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e89c:	f7f0 fad4 	bl	800ee48 <Calibration_Load_Pack>
	Calibration_Load_Pack(X10_CIE1964, 0x400, calibratre_x_1964);
 801e8a0:	4a94      	ldr	r2, [pc, #592]	; (801eaf4 <main+0xaa4>)
 801e8a2:	4895      	ldr	r0, [pc, #596]	; (801eaf8 <main+0xaa8>)
 801e8a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e8a8:	f7f0 face 	bl	800ee48 <Calibration_Load_Pack>
	Calibration_Load_Pack(Y10_CIE1964, 0x400, calibratre_y_1964);
 801e8ac:	4a93      	ldr	r2, [pc, #588]	; (801eafc <main+0xaac>)
 801e8ae:	4894      	ldr	r0, [pc, #592]	; (801eb00 <main+0xab0>)
 801e8b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e8b4:	f7f0 fac8 	bl	800ee48 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z10_CIE1964, 0x400, calibratre_z_1964);
 801e8b8:	4a92      	ldr	r2, [pc, #584]	; (801eb04 <main+0xab4>)
 801e8ba:	4893      	ldr	r0, [pc, #588]	; (801eb08 <main+0xab8>)
 801e8bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e8c0:	f7f0 fac2 	bl	800ee48 <Calibration_Load_Pack>
	Calibration_Load_Pack(X2_CIE1931, 0x400, calibratre_x_1931);
 801e8c4:	4a91      	ldr	r2, [pc, #580]	; (801eb0c <main+0xabc>)
 801e8c6:	4892      	ldr	r0, [pc, #584]	; (801eb10 <main+0xac0>)
 801e8c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e8cc:	f7f0 fabc 	bl	800ee48 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z2_CIE1931, 0x400, calibratre_z_1931);
 801e8d0:	4a90      	ldr	r2, [pc, #576]	; (801eb14 <main+0xac4>)
 801e8d2:	4891      	ldr	r0, [pc, #580]	; (801eb18 <main+0xac8>)
 801e8d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801e8d8:	f7f0 fab6 	bl	800ee48 <Calibration_Load_Pack>
 801e8dc:	4b8f      	ldr	r3, [pc, #572]	; (801eb1c <main+0xacc>)
 801e8de:	9302      	str	r3, [sp, #8]
 801e8e0:	4b8f      	ldr	r3, [pc, #572]	; (801eb20 <main+0xad0>)
 801e8e2:	9304      	str	r3, [sp, #16]
 801e8e4:	4b8f      	ldr	r3, [pc, #572]	; (801eb24 <main+0xad4>)
 801e8e6:	9303      	str	r3, [sp, #12]
 801e8e8:	46aa      	mov	sl, r5
 801e8ea:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801e8ee:	f04f 0800 	mov.w	r8, #0
 801e8f2:	2100      	movs	r1, #0
 801e8f4:	4620      	mov	r0, r4
 801e8f6:	f7f0 fa3f 	bl	800ed78 <Calibration_Load_2byte>
 801e8fa:	ee07 0a90 	vmov	s15, r0
 801e8fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e902:	f504 4b90 	add.w	fp, r4, #18432	; 0x4800
 801e906:	ee17 0a90 	vmov	r0, s15
 801e90a:	f7e1 fe35 	bl	8000578 <__aeabi_f2d>
 801e90e:	4642      	mov	r2, r8
 801e910:	464b      	mov	r3, r9
 801e912:	f7e1 ffaf 	bl	8000874 <__aeabi_ddiv>
 801e916:	a350      	add	r3, pc, #320	; (adr r3, 801ea58 <main+0xa08>)
 801e918:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e91c:	f7e1 fcce 	bl	80002bc <__adddf3>
 801e920:	f7e2 f976 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801e924:	2101      	movs	r1, #1
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 801e926:	f8ca 0000 	str.w	r0, [sl]
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801e92a:	4620      	mov	r0, r4
 801e92c:	f7f0 fa24 	bl	800ed78 <Calibration_Load_2byte>
 801e930:	ee07 0a90 	vmov	s15, r0
 801e934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e938:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801e93c:	ee17 0a90 	vmov	r0, s15
 801e940:	f7e1 fe1a 	bl	8000578 <__aeabi_f2d>
 801e944:	4642      	mov	r2, r8
 801e946:	464b      	mov	r3, r9
 801e948:	f7e1 ff94 	bl	8000874 <__aeabi_ddiv>
 801e94c:	a342      	add	r3, pc, #264	; (adr r3, 801ea58 <main+0xa08>)
 801e94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e952:	f7e1 fcb3 	bl	80002bc <__adddf3>
 801e956:	f7e2 f95b 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801e95a:	2102      	movs	r1, #2
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 801e95c:	f8ca 0004 	str.w	r0, [sl, #4]
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801e960:	4620      	mov	r0, r4
 801e962:	f7f0 fa09 	bl	800ed78 <Calibration_Load_2byte>
 801e966:	ee07 0a90 	vmov	s15, r0
 801e96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801e96e:	ed9f 8a6e 	vldr	s16, [pc, #440]	; 801eb28 <main+0xad8>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801e972:	ee17 0a90 	vmov	r0, s15
 801e976:	f7e1 fdff 	bl	8000578 <__aeabi_f2d>
 801e97a:	4642      	mov	r2, r8
 801e97c:	464b      	mov	r3, r9
 801e97e:	f7e1 ff79 	bl	8000874 <__aeabi_ddiv>
 801e982:	a335      	add	r3, pc, #212	; (adr r3, 801ea58 <main+0xa08>)
 801e984:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e988:	f7e1 fc98 	bl	80002bc <__adddf3>
 801e98c:	f7e2 f940 	bl	8000c10 <__aeabi_d2f>
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801e990:	2103      	movs	r1, #3
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 801e992:	f8ca 0008 	str.w	r0, [sl, #8]
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801e996:	4620      	mov	r0, r4
 801e998:	f7f0 f9ee 	bl	800ed78 <Calibration_Load_2byte>
 801e99c:	ee07 0a90 	vmov	s15, r0
 801e9a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e9a4:	f10a 0a10 	add.w	sl, sl, #16
 801e9a8:	ee17 0a90 	vmov	r0, s15
 801e9ac:	f7e1 fde4 	bl	8000578 <__aeabi_f2d>
 801e9b0:	4642      	mov	r2, r8
 801e9b2:	464b      	mov	r3, r9
 801e9b4:	f7e1 ff5e 	bl	8000874 <__aeabi_ddiv>
 801e9b8:	a327      	add	r3, pc, #156	; (adr r3, 801ea58 <main+0xa08>)
 801e9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9be:	f7e1 fc7d 	bl	80002bc <__adddf3>
 801e9c2:	f7e2 f925 	bl	8000c10 <__aeabi_d2f>
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801e9c6:	2100      	movs	r1, #0
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 801e9c8:	f84a 0c04 	str.w	r0, [sl, #-4]
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801e9cc:	4658      	mov	r0, fp
 801e9ce:	f7f0 f9d3 	bl	800ed78 <Calibration_Load_2byte>
 801e9d2:	ee07 0a90 	vmov	s15, r0
 801e9d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e9da:	9b02      	ldr	r3, [sp, #8]
 801e9dc:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801e9e0:	2101      	movs	r1, #1
 801e9e2:	4658      	mov	r0, fp
 801e9e4:	3710      	adds	r7, #16
 801e9e6:	3610      	adds	r6, #16
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 801e9e8:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801e9ec:	f7f0 f9c4 	bl	800ed78 <Calibration_Load_2byte>
 801e9f0:	ee07 0a90 	vmov	s15, r0
 801e9f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801e9f8:	9b02      	ldr	r3, [sp, #8]
 801e9fa:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801e9fe:	2102      	movs	r1, #2
 801ea00:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 801ea02:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801ea06:	f7f0 f9b7 	bl	800ed78 <Calibration_Load_2byte>
 801ea0a:	ee07 0a90 	vmov	s15, r0
 801ea0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ea12:	9b02      	ldr	r3, [sp, #8]
 801ea14:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801ea18:	2103      	movs	r1, #3
 801ea1a:	4658      	mov	r0, fp
 801ea1c:	f504 4ba0 	add.w	fp, r4, #20480	; 0x5000
 801ea20:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 801ea24:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801ea28:	f7f0 f9a6 	bl	800ed78 <Calibration_Load_2byte>
 801ea2c:	ee07 0a90 	vmov	s15, r0
 801ea30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ea34:	9b02      	ldr	r3, [sp, #8]
 801ea36:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801ea3a:	2100      	movs	r1, #0
 801ea3c:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 801ea3e:	edc3 7a03 	vstr	s15, [r3, #12]
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801ea42:	f7f0 f999 	bl	800ed78 <Calibration_Load_2byte>
 801ea46:	ee07 0a90 	vmov	s15, r0
 801ea4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801ea4e:	9b04      	ldr	r3, [sp, #16]
 801ea50:	e06e      	b.n	801eb30 <main+0xae0>
 801ea52:	bf00      	nop
 801ea54:	f3af 8000 	nop.w
 801ea58:	00000000 	.word	0x00000000
 801ea5c:	4072c000 	.word	0x4072c000
 801ea60:	2000ed3c 	.word	0x2000ed3c
 801ea64:	20095900 	.word	0x20095900
 801ea68:	200957f4 	.word	0x200957f4
 801ea6c:	20054948 	.word	0x20054948
 801ea70:	2004f93c 	.word	0x2004f93c
 801ea74:	0812b030 	.word	0x0812b030
 801ea78:	20000ebc 	.word	0x20000ebc
 801ea7c:	0812b040 	.word	0x0812b040
 801ea80:	20005702 	.word	0x20005702
 801ea84:	0812b048 	.word	0x0812b048
 801ea88:	200056ff 	.word	0x200056ff
 801ea8c:	0812b050 	.word	0x0812b050
 801ea90:	20005700 	.word	0x20005700
 801ea94:	0812b058 	.word	0x0812b058
 801ea98:	20005703 	.word	0x20005703
 801ea9c:	0812b060 	.word	0x0812b060
 801eaa0:	20090ab9 	.word	0x20090ab9
 801eaa4:	0812b068 	.word	0x0812b068
 801eaa8:	20090aba 	.word	0x20090aba
 801eaac:	0812b038 	.word	0x0812b038
 801eab0:	20095888 	.word	0x20095888
 801eab4:	20005706 	.word	0x20005706
 801eab8:	0812b020 	.word	0x0812b020
 801eabc:	2000572e 	.word	0x2000572e
 801eac0:	200905b6 	.word	0x200905b6
 801eac4:	2004e93c 	.word	0x2004e93c
 801eac8:	08101838 	.word	0x08101838
 801eacc:	08100838 	.word	0x08100838
 801ead0:	20051940 	.word	0x20051940
 801ead4:	08102838 	.word	0x08102838
 801ead8:	20009d24 	.word	0x20009d24
 801eadc:	0810283c 	.word	0x0810283c
 801eae0:	20009d28 	.word	0x20009d28
 801eae4:	20052940 	.word	0x20052940
 801eae8:	08102840 	.word	0x08102840
 801eaec:	20053940 	.word	0x20053940
 801eaf0:	08103844 	.word	0x08103844
 801eaf4:	2008b514 	.word	0x2008b514
 801eaf8:	08107840 	.word	0x08107840
 801eafc:	2008c514 	.word	0x2008c514
 801eb00:	08108840 	.word	0x08108840
 801eb04:	2008e514 	.word	0x2008e514
 801eb08:	08109840 	.word	0x08109840
 801eb0c:	2008a514 	.word	0x2008a514
 801eb10:	08105840 	.word	0x08105840
 801eb14:	2008d514 	.word	0x2008d514
 801eb18:	08106840 	.word	0x08106840
 801eb1c:	20009d38 	.word	0x20009d38
 801eb20:	2000ad38 	.word	0x2000ad38
 801eb24:	2005093c 	.word	0x2005093c
 801eb28:	447a0000 	.word	0x447a0000
 801eb2c:	40590000 	.word	0x40590000
 801eb30:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801eb34:	2101      	movs	r1, #1
 801eb36:	4658      	mov	r0, fp
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 801eb38:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801eb3c:	f7f0 f91c 	bl	800ed78 <Calibration_Load_2byte>
 801eb40:	ee07 0a90 	vmov	s15, r0
 801eb44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801eb48:	9b04      	ldr	r3, [sp, #16]
 801eb4a:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801eb4e:	2102      	movs	r1, #2
 801eb50:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 801eb52:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801eb56:	f7f0 f90f 	bl	800ed78 <Calibration_Load_2byte>
 801eb5a:	ee07 0a90 	vmov	s15, r0
 801eb5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801eb62:	9b04      	ldr	r3, [sp, #16]
 801eb64:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801eb68:	2103      	movs	r1, #3
 801eb6a:	4658      	mov	r0, fp
 801eb6c:	f504 4b28 	add.w	fp, r4, #43008	; 0xa800
 801eb70:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 801eb74:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801eb78:	f7f0 f8fe 	bl	800ed78 <Calibration_Load_2byte>
 801eb7c:	ee07 0a90 	vmov	s15, r0
 801eb80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801eb84:	9b04      	ldr	r3, [sp, #16]
 801eb86:	eec7 7a08 	vdiv.f32	s15, s14, s16
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801eb8a:	2100      	movs	r1, #0
 801eb8c:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 801eb8e:	edc3 7a03 	vstr	s15, [r3, #12]
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801eb92:	f7f0 f8f1 	bl	800ed78 <Calibration_Load_2byte>
 801eb96:	ee07 0a90 	vmov	s15, r0
 801eb9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb9e:	ee17 0a90 	vmov	r0, s15
 801eba2:	f7e1 fce9 	bl	8000578 <__aeabi_f2d>
 801eba6:	4642      	mov	r2, r8
 801eba8:	464b      	mov	r3, r9
 801ebaa:	f7e1 fe63 	bl	8000874 <__aeabi_ddiv>
 801ebae:	2200      	movs	r2, #0
 801ebb0:	4bd9      	ldr	r3, [pc, #868]	; (801ef18 <main+0xec8>)
 801ebb2:	f7e1 fb81 	bl	80002b8 <__aeabi_dsub>
 801ebb6:	f7e2 f82b 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801ebba:	2101      	movs	r1, #1
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 801ebbc:	f847 0c10 	str.w	r0, [r7, #-16]
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801ebc0:	4658      	mov	r0, fp
 801ebc2:	f7f0 f8d9 	bl	800ed78 <Calibration_Load_2byte>
 801ebc6:	ee07 0a90 	vmov	s15, r0
 801ebca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ebce:	ee17 0a90 	vmov	r0, s15
 801ebd2:	f7e1 fcd1 	bl	8000578 <__aeabi_f2d>
 801ebd6:	4642      	mov	r2, r8
 801ebd8:	464b      	mov	r3, r9
 801ebda:	f7e1 fe4b 	bl	8000874 <__aeabi_ddiv>
 801ebde:	2200      	movs	r2, #0
 801ebe0:	4bcd      	ldr	r3, [pc, #820]	; (801ef18 <main+0xec8>)
 801ebe2:	f7e1 fb69 	bl	80002b8 <__aeabi_dsub>
 801ebe6:	f7e2 f813 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801ebea:	2102      	movs	r1, #2
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 801ebec:	f847 0c0c 	str.w	r0, [r7, #-12]
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801ebf0:	4658      	mov	r0, fp
 801ebf2:	f7f0 f8c1 	bl	800ed78 <Calibration_Load_2byte>
 801ebf6:	ee07 0a90 	vmov	s15, r0
 801ebfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ebfe:	ee17 0a90 	vmov	r0, s15
 801ec02:	f7e1 fcb9 	bl	8000578 <__aeabi_f2d>
 801ec06:	4642      	mov	r2, r8
 801ec08:	464b      	mov	r3, r9
 801ec0a:	f7e1 fe33 	bl	8000874 <__aeabi_ddiv>
 801ec0e:	2200      	movs	r2, #0
 801ec10:	4bc1      	ldr	r3, [pc, #772]	; (801ef18 <main+0xec8>)
 801ec12:	f7e1 fb51 	bl	80002b8 <__aeabi_dsub>
 801ec16:	f7e1 fffb 	bl	8000c10 <__aeabi_d2f>
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 801ec1a:	2103      	movs	r1, #3
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 801ec1c:	f847 0c08 	str.w	r0, [r7, #-8]
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 801ec20:	4658      	mov	r0, fp
 801ec22:	f7f0 f8a9 	bl	800ed78 <Calibration_Load_2byte>
 801ec26:	ee07 0a90 	vmov	s15, r0
 801ec2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec2e:	f504 4b30 	add.w	fp, r4, #45056	; 0xb000
 801ec32:	ee17 0a90 	vmov	r0, s15
 801ec36:	f7e1 fc9f 	bl	8000578 <__aeabi_f2d>
 801ec3a:	4642      	mov	r2, r8
 801ec3c:	464b      	mov	r3, r9
 801ec3e:	f7e1 fe19 	bl	8000874 <__aeabi_ddiv>
 801ec42:	2200      	movs	r2, #0
 801ec44:	4bb4      	ldr	r3, [pc, #720]	; (801ef18 <main+0xec8>)
 801ec46:	f7e1 fb37 	bl	80002b8 <__aeabi_dsub>
 801ec4a:	f7e1 ffe1 	bl	8000c10 <__aeabi_d2f>
 801ec4e:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801ec52:	f847 0c04 	str.w	r0, [r7, #-4]
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 801ec56:	2100      	movs	r1, #0
 801ec58:	4658      	mov	r0, fp
 801ec5a:	f7f0 f88d 	bl	800ed78 <Calibration_Load_2byte>
 801ec5e:	ee07 0a90 	vmov	s15, r0
 801ec62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec66:	ee17 0a90 	vmov	r0, s15
 801ec6a:	f7e1 fc85 	bl	8000578 <__aeabi_f2d>
 801ec6e:	4642      	mov	r2, r8
 801ec70:	464b      	mov	r3, r9
 801ec72:	f7e1 fdff 	bl	8000874 <__aeabi_ddiv>
 801ec76:	2200      	movs	r2, #0
 801ec78:	4ba7      	ldr	r3, [pc, #668]	; (801ef18 <main+0xec8>)
 801ec7a:	f7e1 fb1d 	bl	80002b8 <__aeabi_dsub>
 801ec7e:	f7e1 ffc7 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801ec82:	2101      	movs	r1, #1
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 801ec84:	f846 0c10 	str.w	r0, [r6, #-16]
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801ec88:	4658      	mov	r0, fp
 801ec8a:	f7f0 f875 	bl	800ed78 <Calibration_Load_2byte>
 801ec8e:	ee07 0a90 	vmov	s15, r0
 801ec92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec96:	ee17 0a90 	vmov	r0, s15
 801ec9a:	f7e1 fc6d 	bl	8000578 <__aeabi_f2d>
 801ec9e:	4642      	mov	r2, r8
 801eca0:	464b      	mov	r3, r9
 801eca2:	f7e1 fde7 	bl	8000874 <__aeabi_ddiv>
 801eca6:	2200      	movs	r2, #0
 801eca8:	4b9b      	ldr	r3, [pc, #620]	; (801ef18 <main+0xec8>)
 801ecaa:	f7e1 fb05 	bl	80002b8 <__aeabi_dsub>
 801ecae:	f7e1 ffaf 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801ecb2:	2102      	movs	r1, #2
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 801ecb4:	f846 0c0c 	str.w	r0, [r6, #-12]
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801ecb8:	4658      	mov	r0, fp
 801ecba:	f7f0 f85d 	bl	800ed78 <Calibration_Load_2byte>
 801ecbe:	ee07 0a90 	vmov	s15, r0
 801ecc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ecc6:	ee17 0a90 	vmov	r0, s15
 801ecca:	f7e1 fc55 	bl	8000578 <__aeabi_f2d>
 801ecce:	4642      	mov	r2, r8
 801ecd0:	464b      	mov	r3, r9
 801ecd2:	f7e1 fdcf 	bl	8000874 <__aeabi_ddiv>
 801ecd6:	2200      	movs	r2, #0
 801ecd8:	4b8f      	ldr	r3, [pc, #572]	; (801ef18 <main+0xec8>)
 801ecda:	f7e1 faed 	bl	80002b8 <__aeabi_dsub>
 801ecde:	f7e1 ff97 	bl	8000c10 <__aeabi_d2f>
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 801ece2:	2103      	movs	r1, #3
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 801ece4:	f846 0c08 	str.w	r0, [r6, #-8]
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 801ece8:	4658      	mov	r0, fp
 801ecea:	f7f0 f845 	bl	800ed78 <Calibration_Load_2byte>
 801ecee:	ee07 0a90 	vmov	s15, r0
 801ecf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ecf6:	f504 4b38 	add.w	fp, r4, #47104	; 0xb800
 801ecfa:	ee17 0a90 	vmov	r0, s15
 801ecfe:	f7e1 fc3b 	bl	8000578 <__aeabi_f2d>
 801ed02:	4642      	mov	r2, r8
 801ed04:	464b      	mov	r3, r9
 801ed06:	f7e1 fdb5 	bl	8000874 <__aeabi_ddiv>
 801ed0a:	2200      	movs	r2, #0
 801ed0c:	4b82      	ldr	r3, [pc, #520]	; (801ef18 <main+0xec8>)
 801ed0e:	f7e1 fad3 	bl	80002b8 <__aeabi_dsub>
 801ed12:	f7e1 ff7d 	bl	8000c10 <__aeabi_d2f>
 801ed16:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801ed1a:	f846 0c04 	str.w	r0, [r6, #-4]
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 801ed1e:	2100      	movs	r1, #0
 801ed20:	4658      	mov	r0, fp
 801ed22:	f7f0 f829 	bl	800ed78 <Calibration_Load_2byte>
 801ed26:	ee07 0a90 	vmov	s15, r0
 801ed2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed2e:	3408      	adds	r4, #8
 801ed30:	ee17 0a90 	vmov	r0, s15
 801ed34:	f7e1 fc20 	bl	8000578 <__aeabi_f2d>
 801ed38:	4642      	mov	r2, r8
 801ed3a:	464b      	mov	r3, r9
 801ed3c:	f7e1 fd9a 	bl	8000874 <__aeabi_ddiv>
 801ed40:	2200      	movs	r2, #0
 801ed42:	4b75      	ldr	r3, [pc, #468]	; (801ef18 <main+0xec8>)
 801ed44:	f7e1 fab8 	bl	80002b8 <__aeabi_dsub>
 801ed48:	f7e1 ff62 	bl	8000c10 <__aeabi_d2f>
 801ed4c:	9b03      	ldr	r3, [sp, #12]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801ed4e:	2101      	movs	r1, #1
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 801ed50:	6018      	str	r0, [r3, #0]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801ed52:	4658      	mov	r0, fp
 801ed54:	f7f0 f810 	bl	800ed78 <Calibration_Load_2byte>
 801ed58:	ee07 0a90 	vmov	s15, r0
 801ed5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed60:	ee17 0a90 	vmov	r0, s15
 801ed64:	f7e1 fc08 	bl	8000578 <__aeabi_f2d>
 801ed68:	4642      	mov	r2, r8
 801ed6a:	464b      	mov	r3, r9
 801ed6c:	f7e1 fd82 	bl	8000874 <__aeabi_ddiv>
 801ed70:	2200      	movs	r2, #0
 801ed72:	4b69      	ldr	r3, [pc, #420]	; (801ef18 <main+0xec8>)
 801ed74:	f7e1 faa0 	bl	80002b8 <__aeabi_dsub>
 801ed78:	f7e1 ff4a 	bl	8000c10 <__aeabi_d2f>
 801ed7c:	9b03      	ldr	r3, [sp, #12]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801ed7e:	2102      	movs	r1, #2
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 801ed80:	6058      	str	r0, [r3, #4]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801ed82:	4658      	mov	r0, fp
 801ed84:	f7ef fff8 	bl	800ed78 <Calibration_Load_2byte>
 801ed88:	ee07 0a90 	vmov	s15, r0
 801ed8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed90:	ee17 0a90 	vmov	r0, s15
 801ed94:	f7e1 fbf0 	bl	8000578 <__aeabi_f2d>
 801ed98:	4642      	mov	r2, r8
 801ed9a:	464b      	mov	r3, r9
 801ed9c:	f7e1 fd6a 	bl	8000874 <__aeabi_ddiv>
 801eda0:	2200      	movs	r2, #0
 801eda2:	4b5d      	ldr	r3, [pc, #372]	; (801ef18 <main+0xec8>)
 801eda4:	f7e1 fa88 	bl	80002b8 <__aeabi_dsub>
 801eda8:	f7e1 ff32 	bl	8000c10 <__aeabi_d2f>
 801edac:	9b03      	ldr	r3, [sp, #12]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 801edae:	2103      	movs	r1, #3
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 801edb0:	6098      	str	r0, [r3, #8]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 801edb2:	4658      	mov	r0, fp
 801edb4:	f7ef ffe0 	bl	800ed78 <Calibration_Load_2byte>
 801edb8:	ee07 0a90 	vmov	s15, r0
 801edbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801edc0:	ee17 0a90 	vmov	r0, s15
 801edc4:	f7e1 fbd8 	bl	8000578 <__aeabi_f2d>
 801edc8:	4642      	mov	r2, r8
 801edca:	464b      	mov	r3, r9
 801edcc:	f7e1 fd52 	bl	8000874 <__aeabi_ddiv>
 801edd0:	4b51      	ldr	r3, [pc, #324]	; (801ef18 <main+0xec8>)
 801edd2:	2200      	movs	r2, #0
 801edd4:	f7e1 fa70 	bl	80002b8 <__aeabi_dsub>
 801edd8:	f7e1 ff1a 	bl	8000c10 <__aeabi_d2f>
 801eddc:	9b03      	ldr	r3, [sp, #12]
 801edde:	60d8      	str	r0, [r3, #12]
 801ede0:	9b02      	ldr	r3, [sp, #8]
 801ede2:	3310      	adds	r3, #16
 801ede4:	9302      	str	r3, [sp, #8]
 801ede6:	9b04      	ldr	r3, [sp, #16]
 801ede8:	3310      	adds	r3, #16
 801edea:	9304      	str	r3, [sp, #16]
 801edec:	9b03      	ldr	r3, [sp, #12]
 801edee:	3310      	adds	r3, #16
 801edf0:	9303      	str	r3, [sp, #12]
	for(uint16_t i = 0; i < 2*1024; i=i+8){
 801edf2:	4b4a      	ldr	r3, [pc, #296]	; (801ef1c <main+0xecc>)
 801edf4:	429c      	cmp	r4, r3
 801edf6:	f47f ad7c 	bne.w	801e8f2 <main+0x8a2>
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 801edfa:	2100      	movs	r1, #0
 801edfc:	4848      	ldr	r0, [pc, #288]	; (801ef20 <main+0xed0>)
 801edfe:	f7ef ffbb 	bl	800ed78 <Calibration_Load_2byte>
 801ee02:	4b48      	ldr	r3, [pc, #288]	; (801ef24 <main+0xed4>)
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801ee04:	2101      	movs	r1, #1
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 801ee06:	8018      	strh	r0, [r3, #0]
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801ee08:	4845      	ldr	r0, [pc, #276]	; (801ef20 <main+0xed0>)
 801ee0a:	f7ef ffb5 	bl	800ed78 <Calibration_Load_2byte>
 801ee0e:	4b46      	ldr	r3, [pc, #280]	; (801ef28 <main+0xed8>)
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801ee10:	2100      	movs	r1, #0
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 801ee12:	8018      	strh	r0, [r3, #0]
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801ee14:	4845      	ldr	r0, [pc, #276]	; (801ef2c <main+0xedc>)
 801ee16:	f7ef ffaf 	bl	800ed78 <Calibration_Load_2byte>
 801ee1a:	4b45      	ldr	r3, [pc, #276]	; (801ef30 <main+0xee0>)
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801ee1c:	2100      	movs	r1, #0
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 801ee1e:	8018      	strh	r0, [r3, #0]
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801ee20:	4844      	ldr	r0, [pc, #272]	; (801ef34 <main+0xee4>)
 801ee22:	f7ef ffa9 	bl	800ed78 <Calibration_Load_2byte>
 801ee26:	4b44      	ldr	r3, [pc, #272]	; (801ef38 <main+0xee8>)
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801ee28:	2101      	movs	r1, #1
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 801ee2a:	8018      	strh	r0, [r3, #0]
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801ee2c:	4841      	ldr	r0, [pc, #260]	; (801ef34 <main+0xee4>)
 801ee2e:	f7ef ffa3 	bl	800ed78 <Calibration_Load_2byte>
 801ee32:	4b42      	ldr	r3, [pc, #264]	; (801ef3c <main+0xeec>)
 801ee34:	4942      	ldr	r1, [pc, #264]	; (801ef40 <main+0xef0>)
 801ee36:	8018      	strh	r0, [r3, #0]
 801ee38:	4b42      	ldr	r3, [pc, #264]	; (801ef44 <main+0xef4>)
 801ee3a:	4a43      	ldr	r2, [pc, #268]	; (801ef48 <main+0xef8>)
 801ee3c:	f8b3 e000 	ldrh.w	lr, [r3]
 801ee40:	4b42      	ldr	r3, [pc, #264]	; (801ef4c <main+0xefc>)
 801ee42:	8810      	ldrh	r0, [r2, #0]
 801ee44:	f8b3 8000 	ldrh.w	r8, [r3]
 801ee48:	880e      	ldrh	r6, [r1, #0]
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 801ee4a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801ef50 <main+0xf00>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 801ee4e:	eddf 6a41 	vldr	s13, [pc, #260]	; 801ef54 <main+0xf04>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 801ee52:	ed9f 6a41 	vldr	s12, [pc, #260]	; 801ef58 <main+0xf08>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 801ee56:	eddf 5a41 	vldr	s11, [pc, #260]	; 801ef5c <main+0xf0c>
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 801ee5a:	2300      	movs	r3, #0
 801ee5c:	461c      	mov	r4, r3
 801ee5e:	461f      	mov	r7, r3
 801ee60:	469c      	mov	ip, r3
 801ee62:	4699      	mov	r9, r3
 801ee64:	468a      	mov	sl, r1
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 801ee66:	ecf5 7a01 	vldmia	r5!, {s15}
 801ee6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801ee6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee72:	b299      	uxth	r1, r3
 801ee74:	d807      	bhi.n	801ee86 <main+0xe36>
 801ee76:	ed95 5a00 	vldr	s10, [r5]
 801ee7a:	eeb4 5ac7 	vcmpe.f32	s10, s14
 801ee7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee82:	f280 80f2 	bge.w	801f06a <main+0x101a>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 801ee86:	eef4 7ae6 	vcmpe.f32	s15, s13
 801ee8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee8e:	d807      	bhi.n	801eea0 <main+0xe50>
 801ee90:	ed95 5a00 	vldr	s10, [r5]
 801ee94:	eeb4 5ae6 	vcmpe.f32	s10, s13
 801ee98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee9c:	f280 80e9 	bge.w	801f072 <main+0x1022>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 801eea0:	eef4 7ac6 	vcmpe.f32	s15, s12
 801eea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eea8:	d807      	bhi.n	801eeba <main+0xe6a>
 801eeaa:	ed95 5a00 	vldr	s10, [r5]
 801eeae:	eeb4 5ac6 	vcmpe.f32	s10, s12
 801eeb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eeb6:	f280 80e0 	bge.w	801f07a <main+0x102a>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 801eeba:	eef4 7ae5 	vcmpe.f32	s15, s11
 801eebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eec2:	d808      	bhi.n	801eed6 <main+0xe86>
 801eec4:	edd5 7a00 	vldr	s15, [r5]
			PARGraph_IR = i;
 801eec8:	eef4 7a65 	vcmp.f32	s15, s11
 801eecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eed0:	bfa4      	itt	ge
 801eed2:	4608      	movge	r0, r1
 801eed4:	2401      	movge	r4, #1
 801eed6:	3301      	adds	r3, #1
	for(uint16_t i = 0; i < 1024; i++){
 801eed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801eedc:	d1c3      	bne.n	801ee66 <main+0xe16>
 801eede:	f1b9 0f00 	cmp.w	r9, #0
 801eee2:	d002      	beq.n	801eeea <main+0xe9a>
 801eee4:	4b19      	ldr	r3, [pc, #100]	; (801ef4c <main+0xefc>)
 801eee6:	f8a3 8000 	strh.w	r8, [r3]
 801eeea:	f1bc 0f00 	cmp.w	ip, #0
 801eeee:	d002      	beq.n	801eef6 <main+0xea6>
 801eef0:	4b14      	ldr	r3, [pc, #80]	; (801ef44 <main+0xef4>)
 801eef2:	f8a3 e000 	strh.w	lr, [r3]
 801eef6:	b10f      	cbz	r7, 801eefc <main+0xeac>
 801eef8:	f8aa 6000 	strh.w	r6, [sl]
 801eefc:	b104      	cbz	r4, 801ef00 <main+0xeb0>
 801eefe:	8010      	strh	r0, [r2, #0]
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 801ef00:	4b17      	ldr	r3, [pc, #92]	; (801ef60 <main+0xf10>)
 801ef02:	4a18      	ldr	r2, [pc, #96]	; (801ef64 <main+0xf14>)
 801ef04:	edd3 7a00 	vldr	s15, [r3]
 801ef08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ef0c:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 801ef10:	edd3 7aff 	vldr	s15, [r3, #1020]	; 0x3fc
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 801ef14:	8011      	strh	r1, [r2, #0]
 801ef16:	e027      	b.n	801ef68 <main+0xf18>
 801ef18:	40490000 	.word	0x40490000
 801ef1c:	08100800 	.word	0x08100800
 801ef20:	0812a048 	.word	0x0812a048
 801ef24:	20095710 	.word	0x20095710
 801ef28:	20095724 	.word	0x20095724
 801ef2c:	0812a04c 	.word	0x0812a04c
 801ef30:	200959a8 	.word	0x200959a8
 801ef34:	0812a040 	.word	0x0812a040
 801ef38:	20095714 	.word	0x20095714
 801ef3c:	20095a50 	.word	0x20095a50
 801ef40:	20095ce4 	.word	0x20095ce4
 801ef44:	20095b8c 	.word	0x20095b8c
 801ef48:	20095a40 	.word	0x20095a40
 801ef4c:	20095a42 	.word	0x20095a42
 801ef50:	43c80000 	.word	0x43c80000
 801ef54:	43fa0000 	.word	0x43fa0000
 801ef58:	44160000 	.word	0x44160000
 801ef5c:	442f0000 	.word	0x442f0000
 801ef60:	20054948 	.word	0x20054948
 801ef64:	20055948 	.word	0x20055948
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 801ef68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ef6c:	ee17 1a90 	vmov	r1, s15
 801ef70:	8051      	strh	r1, [r2, #2]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801ef72:	f203 71fc 	addw	r1, r3, #2044	; 0x7fc
 801ef76:	edd1 7a00 	vldr	s15, [r1]
 801ef7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801ef7e:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801ef82:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801ef86:	edd3 7a00 	vldr	s15, [r3]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 801ef8a:	8091      	strh	r1, [r2, #4]
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 801ef8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ef90:	ee17 3a90 	vmov	r3, s15
 801ef94:	80d3      	strh	r3, [r2, #6]
	if(Mode_EL == 0){
 801ef96:	4bad      	ldr	r3, [pc, #692]	; (801f24c <main+0x11fc>)
 801ef98:	781a      	ldrb	r2, [r3, #0]
 801ef9a:	4bad      	ldr	r3, [pc, #692]	; (801f250 <main+0x1200>)
 801ef9c:	2a00      	cmp	r2, #0
 801ef9e:	d16f      	bne.n	801f080 <main+0x1030>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801efa0:	4aac      	ldr	r2, [pc, #688]	; (801f254 <main+0x1204>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801efa2:	edd2 0a00 	vldr	s1, [r2]
 801efa6:	ed93 0a00 	vldr	s0, [r3]
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801efaa:	4cab      	ldr	r4, [pc, #684]	; (801f258 <main+0x1208>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801efac:	f7fa fe7c 	bl	8019ca8 <Rabs_calc_Factor2_Settings_change>
 801efb0:	4baa      	ldr	r3, [pc, #680]	; (801f25c <main+0x120c>)
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801efb2:	48ab      	ldr	r0, [pc, #684]	; (801f260 <main+0x1210>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801efb4:	ed83 0a00 	vstr	s0, [r3]
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 801efb8:	2103      	movs	r1, #3
 801efba:	f7ef ff01 	bl	800edc0 <Calibration_Load_1byte>
 801efbe:	7020      	strb	r0, [r4, #0]
	Calculate_Data();
 801efc0:	f7fd ff50 	bl	801ce64 <Calculate_Data>
	Get_Battery_Level();
 801efc4:	f7fe f882 	bl	801d0cc <Get_Battery_Level>
	HAL_Delay(1);
 801efc8:	2001      	movs	r0, #1
 801efca:	f7e2 f82f 	bl	800102c <HAL_Delay>
	Image_load(TKA_LOGO_BMP, TKA_LOGO_BMP_SIZEX*TKA_LOGO_BMP_SIZEY);
 801efce:	f64b 61e6 	movw	r1, #48870	; 0xbee6
 801efd2:	2000      	movs	r0, #0
 801efd4:	f7fa fe38 	bl	8019c48 <Image_load>
	CRC_STATUS = CRC_Check(FLASH_DATA_START, FLASH_DATA_SIZE, FLASH_CRC_ADDR);
 801efd8:	4aa2      	ldr	r2, [pc, #648]	; (801f264 <main+0x1214>)
 801efda:	f245 410a 	movw	r1, #21514	; 0x540a
 801efde:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 801efe2:	f7ec ffd7 	bl	800bf94 <CRC_Check>
 801efe6:	4ba0      	ldr	r3, [pc, #640]	; (801f268 <main+0x1218>)
 801efe8:	7018      	strb	r0, [r3, #0]
		BlueTooth_Module_Init();
 801efea:	f7ea fe59 	bl	8009ca0 <BlueTooth_Module_Init>
		GUI_Title_Screen();
 801efee:	f7f0 f8c7 	bl	800f180 <GUI_Title_Screen>
		HAL_Delay(2000);	
 801eff2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801eff6:	f7e2 f819 	bl	800102c <HAL_Delay>
		usb_receive_processing();
 801effa:	f7fe fab9 	bl	801d570 <usb_receive_processing>
		if(Bluetooth == 0)
 801effe:	4b9b      	ldr	r3, [pc, #620]	; (801f26c <main+0x121c>)
 801f000:	781b      	ldrb	r3, [r3, #0]
 801f002:	46a2      	mov	sl, r4
 801f004:	2b00      	cmp	r3, #0
 801f006:	d13d      	bne.n	801f084 <main+0x1034>
			BlueTooth_Off();
 801f008:	f7ea fd54 	bl	8009ab4 <BlueTooth_Off>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801f00c:	4c98      	ldr	r4, [pc, #608]	; (801f270 <main+0x1220>)
			HAL_Delay(200);
 801f00e:	20c8      	movs	r0, #200	; 0xc8
 801f010:	f7e2 f80c 	bl	800102c <HAL_Delay>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801f014:	7823      	ldrb	r3, [r4, #0]
 801f016:	07d8      	lsls	r0, r3, #31
 801f018:	d537      	bpl.n	801f08a <main+0x103a>
 801f01a:	4b96      	ldr	r3, [pc, #600]	; (801f274 <main+0x1224>)
 801f01c:	4896      	ldr	r0, [pc, #600]	; (801f278 <main+0x1228>)
 801f01e:	781b      	ldrb	r3, [r3, #0]
 801f020:	f013 0f01 	tst.w	r3, #1
 801f024:	bf18      	it	ne
 801f026:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 801f02a:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 801f02e:	f7fa fe0b 	bl	8019c48 <Image_load>
		Locus.pData = (uint16_t *)bmp;
 801f032:	4b92      	ldr	r3, [pc, #584]	; (801f27c <main+0x122c>)
 801f034:	4a92      	ldr	r2, [pc, #584]	; (801f280 <main+0x1230>)
 801f036:	605a      	str	r2, [r3, #4]
		Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 801f038:	7822      	ldrb	r2, [r4, #0]
 801f03a:	f002 0101 	and.w	r1, r2, #1
 801f03e:	2900      	cmp	r1, #0
 801f040:	bf14      	ite	ne
 801f042:	21d8      	movne	r1, #216	; 0xd8
 801f044:	21fa      	moveq	r1, #250	; 0xfa
 801f046:	8019      	strh	r1, [r3, #0]
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801f048:	d12d      	bne.n	801f0a6 <main+0x1056>
 801f04a:	f012 0f04 	tst.w	r2, #4
 801f04e:	bf0c      	ite	eq
 801f050:	22fa      	moveq	r2, #250	; 0xfa
 801f052:	22ea      	movne	r2, #234	; 0xea
 801f054:	805a      	strh	r2, [r3, #2]
		switch(GUI_screen_state){
 801f056:	f89a 3000 	ldrb.w	r3, [sl]
 801f05a:	3b01      	subs	r3, #1
 801f05c:	2b05      	cmp	r3, #5
 801f05e:	d858      	bhi.n	801f112 <main+0x10c2>
 801f060:	e8df f003 	tbb	[pc, r3]
 801f064:	453b235a 	.word	0x453b235a
 801f068:	514b      	.short	0x514b
			PARGraph_B = i;
 801f06a:	4688      	mov	r8, r1
 801f06c:	f04f 0901 	mov.w	r9, #1
 801f070:	e731      	b.n	801eed6 <main+0xe86>
			PARGraph_G = i;
 801f072:	468e      	mov	lr, r1
 801f074:	f04f 0c01 	mov.w	ip, #1
 801f078:	e72d      	b.n	801eed6 <main+0xe86>
			PARGraph_R = i;
 801f07a:	460e      	mov	r6, r1
 801f07c:	2701      	movs	r7, #1
 801f07e:	e72a      	b.n	801eed6 <main+0xe86>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f080:	4a80      	ldr	r2, [pc, #512]	; (801f284 <main+0x1234>)
 801f082:	e78e      	b.n	801efa2 <main+0xf52>
			BlueTooth_On();
 801f084:	f7ea fcee 	bl	8009a64 <BlueTooth_On>
 801f088:	e7c0      	b.n	801f00c <main+0xfbc>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 801f08a:	f003 0304 	and.w	r3, r3, #4
 801f08e:	2b00      	cmp	r3, #0
 801f090:	4b7d      	ldr	r3, [pc, #500]	; (801f288 <main+0x1238>)
 801f092:	487e      	ldr	r0, [pc, #504]	; (801f28c <main+0x123c>)
 801f094:	bf08      	it	eq
 801f096:	4618      	moveq	r0, r3
 801f098:	f24f 4324 	movw	r3, #62500	; 0xf424
 801f09c:	f24e 4184 	movw	r1, #58500	; 0xe484
 801f0a0:	bf08      	it	eq
 801f0a2:	4619      	moveq	r1, r3
 801f0a4:	e7c3      	b.n	801f02e <main+0xfde>
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 801f0a6:	22fa      	movs	r2, #250	; 0xfa
 801f0a8:	e7d4      	b.n	801f054 <main+0x1004>
		case Measure2_Screen: preGUI_screen_state = Measure_Screen; GUI_Measure2_Screen();  break;
 801f0aa:	4b79      	ldr	r3, [pc, #484]	; (801f290 <main+0x1240>)
 801f0ac:	2201      	movs	r2, #1
 801f0ae:	701a      	strb	r2, [r3, #0]
 801f0b0:	f7f1 f9a0 	bl	80103f4 <GUI_Measure2_Screen>
  htim7.Instance = TIM7;
 801f0b4:	4c77      	ldr	r4, [pc, #476]	; (801f294 <main+0x1244>)
  htim7.Init.Prescaler = 60000;
 801f0b6:	4978      	ldr	r1, [pc, #480]	; (801f298 <main+0x1248>)
 801f0b8:	f64e 2260 	movw	r2, #60000	; 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801f0bc:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 60000;
 801f0be:	e884 0006 	stmia.w	r4, {r1, r2}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801f0c2:	4620      	mov	r0, r4
  htim7.Init.Period = 200;
 801f0c4:	22c8      	movs	r2, #200	; 0xc8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801f0c6:	9319      	str	r3, [sp, #100]	; 0x64
 801f0c8:	931a      	str	r3, [sp, #104]	; 0x68
 801f0ca:	931b      	str	r3, [sp, #108]	; 0x6c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 801f0cc:	60a3      	str	r3, [r4, #8]
  htim7.Init.Period = 200;
 801f0ce:	60e2      	str	r2, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801f0d0:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 801f0d2:	f7e6 fe8f 	bl	8005df4 <HAL_TIM_Base_Init>
 801f0d6:	b310      	cbz	r0, 801f11e <main+0x10ce>
 801f0d8:	e7fe      	b.n	801f0d8 <main+0x1088>
		case Measure3_Screen: preGUI_screen_state = Measure2_Screen; GUI_Measure_Screen(); GUI_Measure2_Screen();GUI_Measure3_Screen();  break;
 801f0da:	4b6d      	ldr	r3, [pc, #436]	; (801f290 <main+0x1240>)
 801f0dc:	2202      	movs	r2, #2
 801f0de:	701a      	strb	r2, [r3, #0]
 801f0e0:	f7f1 f95a 	bl	8010398 <GUI_Measure_Screen>
 801f0e4:	f7f1 f986 	bl	80103f4 <GUI_Measure2_Screen>
 801f0e8:	f7f1 f9bc 	bl	8010464 <GUI_Measure3_Screen>
 801f0ec:	e7e2      	b.n	801f0b4 <main+0x1064>
		case Graph_Screen: preGUI_screen_state = Measure_Screen; GUI_Graph_Screen(); break;
 801f0ee:	4b68      	ldr	r3, [pc, #416]	; (801f290 <main+0x1240>)
 801f0f0:	2201      	movs	r2, #1
 801f0f2:	701a      	strb	r2, [r3, #0]
 801f0f4:	f7f0 ffb4 	bl	8010060 <GUI_Graph_Screen>
 801f0f8:	e7dc      	b.n	801f0b4 <main+0x1064>
		case Color_Screen: preGUI_screen_state = ColorSet1_Screen; GUI_Color_Screen();  break; 
 801f0fa:	4b65      	ldr	r3, [pc, #404]	; (801f290 <main+0x1240>)
 801f0fc:	220e      	movs	r2, #14
 801f0fe:	701a      	strb	r2, [r3, #0]
 801f100:	f7f1 f9e6 	bl	80104d0 <GUI_Color_Screen>
 801f104:	e7d6      	b.n	801f0b4 <main+0x1064>
		case Color_Rendition_Screen: preGUI_screen_state = Measure_Screen; GUI_ColorRend_Screen();	break;
 801f106:	4b62      	ldr	r3, [pc, #392]	; (801f290 <main+0x1240>)
 801f108:	2201      	movs	r2, #1
 801f10a:	701a      	strb	r2, [r3, #0]
 801f10c:	f7f1 fd4e 	bl	8010bac <GUI_ColorRend_Screen>
 801f110:	e7d0      	b.n	801f0b4 <main+0x1064>
		default: GUI_screen_state =  Measure_Screen; GUI_Measure_Screen();  break;
 801f112:	2301      	movs	r3, #1
 801f114:	f88a 3000 	strb.w	r3, [sl]
 801f118:	f7f1 f93e 	bl	8010398 <GUI_Measure_Screen>
 801f11c:	e7ca      	b.n	801f0b4 <main+0x1064>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801f11e:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801f120:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 801f122:	a919      	add	r1, sp, #100	; 0x64
 801f124:	4620      	mov	r0, r4
 801f126:	f7e7 f8e5 	bl	80062f4 <HAL_TIMEx_MasterConfigSynchronization>
 801f12a:	4607      	mov	r7, r0
 801f12c:	b100      	cbz	r0, 801f130 <main+0x10e0>
 801f12e:	e7fe      	b.n	801f12e <main+0x10de>
	HAL_Delay(1);
 801f130:	2001      	movs	r0, #1
 801f132:	f7e1 ff7b 	bl	800102c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801f136:	2037      	movs	r0, #55	; 0x37
 801f138:	f7e2 fc66 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 801f13c:	2025      	movs	r0, #37	; 0x25
 801f13e:	f7e2 fc63 	bl	8001a08 <HAL_NVIC_EnableIRQ>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 801f142:	4b56      	ldr	r3, [pc, #344]	; (801f29c <main+0x124c>)
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801f144:	4d56      	ldr	r5, [pc, #344]	; (801f2a0 <main+0x1250>)
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 801f146:	681a      	ldr	r2, [r3, #0]
 801f148:	6813      	ldr	r3, [r2, #0]
 801f14a:	f043 0320 	orr.w	r3, r3, #32
 801f14e:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 801f150:	2001      	movs	r0, #1
 801f152:	f7e1 ff6b 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start(&htim7);
 801f156:	4620      	mov	r0, r4
 801f158:	f7e6 fcfe 	bl	8005b58 <HAL_TIM_Base_Start>
	HAL_Delay(1);
 801f15c:	2001      	movs	r0, #1
 801f15e:	f7e1 ff65 	bl	800102c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim7);
 801f162:	4620      	mov	r0, r4
 801f164:	f7e6 fd12 	bl	8005b8c <HAL_TIM_Base_Start_IT>
	uint8_t exp_stable = 0, start = 1;
 801f168:	2301      	movs	r3, #1
	uint32_t cnt_delay = 0, scr_refresh = 0, scr_refresh_measure = 0, bat_refresh = 0;
 801f16a:	46b8      	mov	r8, r7
 801f16c:	46b9      	mov	r9, r7
 801f16e:	463c      	mov	r4, r7
	uint8_t exp_stable = 0, start = 1;
 801f170:	9303      	str	r3, [sp, #12]
 801f172:	9702      	str	r7, [sp, #8]
	 if(send_bluetooth) 
 801f174:	4e4b      	ldr	r6, [pc, #300]	; (801f2a4 <main+0x1254>)
	 usb_receive_processing();
 801f176:	f7fe f9fb 	bl	801d570 <usb_receive_processing>
	 if(send_bluetooth) 
 801f17a:	7833      	ldrb	r3, [r6, #0]
 801f17c:	b143      	cbz	r3, 801f190 <main+0x1140>
		 	 HAL_UART_Transmit(&huart1, (uint8_t*)&data_bluetooth_send, 4122, 3);
 801f17e:	2303      	movs	r3, #3
 801f180:	f241 021a 	movw	r2, #4122	; 0x101a
 801f184:	4948      	ldr	r1, [pc, #288]	; (801f2a8 <main+0x1258>)
 801f186:	4845      	ldr	r0, [pc, #276]	; (801f29c <main+0x124c>)
 801f188:	f7e7 fd3f 	bl	8006c0a <HAL_UART_Transmit>
			send_bluetooth = 0;
 801f18c:	2300      	movs	r3, #0
 801f18e:	7033      	strb	r3, [r6, #0]
 801f190:	f8df b144 	ldr.w	fp, [pc, #324]	; 801f2d8 <main+0x1288>
		while(start)
 801f194:	9b03      	ldr	r3, [sp, #12]
 801f196:	1c66      	adds	r6, r4, #1
 801f198:	2b00      	cmp	r3, #0
 801f19a:	f040 809f 	bne.w	801f2dc <main+0x128c>
		if(!exp_set){
 801f19e:	4b43      	ldr	r3, [pc, #268]	; (801f2ac <main+0x125c>)
 801f1a0:	781b      	ldrb	r3, [r3, #0]
 801f1a2:	b99b      	cbnz	r3, 801f1cc <main+0x117c>
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f1a4:	4b42      	ldr	r3, [pc, #264]	; (801f2b0 <main+0x1260>)
 801f1a6:	4c43      	ldr	r4, [pc, #268]	; (801f2b4 <main+0x1264>)
 801f1a8:	4943      	ldr	r1, [pc, #268]	; (801f2b8 <main+0x1268>)
 801f1aa:	ed93 0a00 	vldr	s0, [r3]
 801f1ae:	8820      	ldrh	r0, [r4, #0]
 801f1b0:	f7fa fd7e 	bl	8019cb0 <Rabs_calc_Factor1>
 801f1b4:	4b41      	ldr	r3, [pc, #260]	; (801f2bc <main+0x126c>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 801f1b6:	4929      	ldr	r1, [pc, #164]	; (801f25c <main+0x120c>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f1b8:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 801f1bc:	edd1 0a00 	vldr	s1, [r1]
 801f1c0:	4b3f      	ldr	r3, [pc, #252]	; (801f2c0 <main+0x1270>)
 801f1c2:	4a40      	ldr	r2, [pc, #256]	; (801f2c4 <main+0x1274>)
 801f1c4:	8821      	ldrh	r1, [r4, #0]
 801f1c6:	483c      	ldr	r0, [pc, #240]	; (801f2b8 <main+0x1268>)
 801f1c8:	f7fa fda6 	bl	8019d18 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 801f1cc:	f89b 3000 	ldrb.w	r3, [fp]
 801f1d0:	b92b      	cbnz	r3, 801f1de <main+0x118e>
 801f1d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f1d6:	493a      	ldr	r1, [pc, #232]	; (801f2c0 <main+0x1270>)
 801f1d8:	483b      	ldr	r0, [pc, #236]	; (801f2c8 <main+0x1278>)
 801f1da:	f001 f847 	bl	802026c <memcpy>
			exp_start = 0;
 801f1de:	4b3b      	ldr	r3, [pc, #236]	; (801f2cc <main+0x127c>)
 801f1e0:	2200      	movs	r2, #0
 801f1e2:	701a      	strb	r2, [r3, #0]
		if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen) && !pause)
 801f1e4:	f89a 3000 	ldrb.w	r3, [sl]
 801f1e8:	1e5a      	subs	r2, r3, #1
 801f1ea:	2a02      	cmp	r2, #2
 801f1ec:	f200 80c0 	bhi.w	801f370 <main+0x1320>
 801f1f0:	4b37      	ldr	r3, [pc, #220]	; (801f2d0 <main+0x1280>)
 801f1f2:	781b      	ldrb	r3, [r3, #0]
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	f040 8144 	bne.w	801f482 <main+0x1432>
			if(!pause & !exp_set)
 801f1fa:	4b2c      	ldr	r3, [pc, #176]	; (801f2ac <main+0x125c>)
 801f1fc:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 801f1fe:	4634      	mov	r4, r6
			if(!pause & !exp_set)
 801f200:	b94b      	cbnz	r3, 801f216 <main+0x11c6>
				scr_refresh_measure++;
 801f202:	f108 0801 	add.w	r8, r8, #1
				if(scr_refresh_measure == 28 )
 801f206:	f1b8 0f1c 	cmp.w	r8, #28
 801f20a:	d104      	bne.n	801f216 <main+0x11c6>
 801f20c:	9304      	str	r3, [sp, #16]
					Calculate_Data();
 801f20e:	f7fd fe29 	bl	801ce64 <Calculate_Data>
					scr_refresh_measure = 0;
 801f212:	9b04      	ldr	r3, [sp, #16]
 801f214:	4698      	mov	r8, r3
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 801f216:	2e28      	cmp	r6, #40	; 0x28
 801f218:	f240 80d6 	bls.w	801f3c8 <main+0x1378>
 801f21c:	782b      	ldrb	r3, [r5, #0]
 801f21e:	2b05      	cmp	r3, #5
 801f220:	d90c      	bls.n	801f23c <main+0x11ec>
 801f222:	2e46      	cmp	r6, #70	; 0x46
 801f224:	f240 80d0 	bls.w	801f3c8 <main+0x1378>
 801f228:	782b      	ldrb	r3, [r5, #0]
 801f22a:	2b05      	cmp	r3, #5
 801f22c:	d902      	bls.n	801f234 <main+0x11e4>
 801f22e:	782b      	ldrb	r3, [r5, #0]
 801f230:	2b07      	cmp	r3, #7
 801f232:	d903      	bls.n	801f23c <main+0x11ec>
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801f234:	782b      	ldrb	r3, [r5, #0]
 801f236:	2b07      	cmp	r3, #7
 801f238:	f240 80c6 	bls.w	801f3c8 <main+0x1378>
								auto_exposure();
 801f23c:	f7fe fc4a 	bl	801dad4 <auto_exposure>
								max_el = 0;
 801f240:	4b24      	ldr	r3, [pc, #144]	; (801f2d4 <main+0x1284>)
 801f242:	2400      	movs	r4, #0
 801f244:	801c      	strh	r4, [r3, #0]
 801f246:	e0bf      	b.n	801f3c8 <main+0x1378>
        	bat_refresh = 0;
 801f248:	4607      	mov	r7, r0
 801f24a:	e793      	b.n	801f174 <main+0x1124>
 801f24c:	20000ebc 	.word	0x20000ebc
 801f250:	20009d2c 	.word	0x20009d2c
 801f254:	20009d28 	.word	0x20009d28
 801f258:	20005701 	.word	0x20005701
 801f25c:	20009d34 	.word	0x20009d34
 801f260:	0812c020 	.word	0x0812c020
 801f264:	0812a050 	.word	0x0812a050
 801f268:	20095712 	.word	0x20095712
 801f26c:	20090aba 	.word	0x20090aba
 801f270:	200056ff 	.word	0x200056ff
 801f274:	20005704 	.word	0x20005704
 801f278:	00051d00 	.word	0x00051d00
 801f27c:	20091050 	.word	0x20091050
 801f280:	20055954 	.word	0x20055954
 801f284:	20009d24 	.word	0x20009d24
 801f288:	00018100 	.word	0x00018100
 801f28c:	0006ca00 	.word	0x0006ca00
 801f290:	2000022a 	.word	0x2000022a
 801f294:	20095ca4 	.word	0x20095ca4
 801f298:	40001400 	.word	0x40001400
 801f29c:	20095a54 	.word	0x20095a54
 801f2a0:	200905b6 	.word	0x200905b6
 801f2a4:	200905d0 	.word	0x200905d0
 801f2a8:	2008f59c 	.word	0x2008f59c
 801f2ac:	20000ec0 	.word	0x20000ec0
 801f2b0:	2005193c 	.word	0x2005193c
 801f2b4:	20009d22 	.word	0x20009d22
 801f2b8:	2000e53c 	.word	0x2000e53c
 801f2bc:	20009d30 	.word	0x20009d30
 801f2c0:	2000c53c 	.word	0x2000c53c
 801f2c4:	20051940 	.word	0x20051940
 801f2c8:	2000d53c 	.word	0x2000d53c
 801f2cc:	20000ec1 	.word	0x20000ec1
 801f2d0:	20005728 	.word	0x20005728
 801f2d4:	200905c4 	.word	0x200905c4
 801f2d8:	20055952 	.word	0x20055952
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f2dc:	4b76      	ldr	r3, [pc, #472]	; (801f4b8 <main+0x1468>)
 801f2de:	4c77      	ldr	r4, [pc, #476]	; (801f4bc <main+0x146c>)
 801f2e0:	4977      	ldr	r1, [pc, #476]	; (801f4c0 <main+0x1470>)
 801f2e2:	ed93 0a00 	vldr	s0, [r3]
 801f2e6:	8820      	ldrh	r0, [r4, #0]
 801f2e8:	f7fa fce2 	bl	8019cb0 <Rabs_calc_Factor1>
 801f2ec:	4b75      	ldr	r3, [pc, #468]	; (801f4c4 <main+0x1474>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801f2ee:	4976      	ldr	r1, [pc, #472]	; (801f4c8 <main+0x1478>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801f2f0:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801f2f4:	edd1 0a00 	vldr	s1, [r1]
 801f2f8:	4b74      	ldr	r3, [pc, #464]	; (801f4cc <main+0x147c>)
 801f2fa:	4a75      	ldr	r2, [pc, #468]	; (801f4d0 <main+0x1480>)
 801f2fc:	8821      	ldrh	r1, [r4, #0]
 801f2fe:	4870      	ldr	r0, [pc, #448]	; (801f4c0 <main+0x1470>)
 801f300:	f7fa fd0a 	bl	8019d18 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 801f304:	f89b 3000 	ldrb.w	r3, [fp]
 801f308:	b92b      	cbnz	r3, 801f316 <main+0x12c6>
 801f30a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f30e:	496f      	ldr	r1, [pc, #444]	; (801f4cc <main+0x147c>)
 801f310:	4870      	ldr	r0, [pc, #448]	; (801f4d4 <main+0x1484>)
 801f312:	f000 ffab 	bl	802026c <memcpy>
			Calculate_Data();
 801f316:	f7fd fda5 	bl	801ce64 <Calculate_Data>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801f31a:	2e14      	cmp	r6, #20
			cnt_delay++;
 801f31c:	4634      	mov	r4, r6
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 801f31e:	f67f af39 	bls.w	801f194 <main+0x1144>
 801f322:	782b      	ldrb	r3, [r5, #0]
 801f324:	2b05      	cmp	r3, #5
 801f326:	d910      	bls.n	801f34a <main+0x12fa>
 801f328:	2e32      	cmp	r6, #50	; 0x32
 801f32a:	f67f af33 	bls.w	801f194 <main+0x1144>
 801f32e:	782b      	ldrb	r3, [r5, #0]
 801f330:	2b05      	cmp	r3, #5
 801f332:	d902      	bls.n	801f33a <main+0x12ea>
 801f334:	782b      	ldrb	r3, [r5, #0]
 801f336:	2b07      	cmp	r3, #7
 801f338:	d907      	bls.n	801f34a <main+0x12fa>
 801f33a:	f5b6 7fc8 	cmp.w	r6, #400	; 0x190
 801f33e:	f67f af29 	bls.w	801f194 <main+0x1144>
 801f342:	782b      	ldrb	r3, [r5, #0]
 801f344:	2b07      	cmp	r3, #7
 801f346:	f67f af25 	bls.w	801f194 <main+0x1144>
								auto_exposure();
 801f34a:	f7fe fbc3 	bl	801dad4 <auto_exposure>
								max_el = 0;
 801f34e:	4b62      	ldr	r3, [pc, #392]	; (801f4d8 <main+0x1488>)
 801f350:	2400      	movs	r4, #0
 801f352:	801c      	strh	r4, [r3, #0]
								exp_stable = exp_stable+1;
 801f354:	9b02      	ldr	r3, [sp, #8]
 801f356:	3301      	adds	r3, #1
 801f358:	b2db      	uxtb	r3, r3
 801f35a:	9302      	str	r3, [sp, #8]
								exp_start = 1;
 801f35c:	4b5f      	ldr	r3, [pc, #380]	; (801f4dc <main+0x148c>)
 801f35e:	2201      	movs	r2, #1
 801f360:	701a      	strb	r2, [r3, #0]
 801f362:	9b02      	ldr	r3, [sp, #8]
 801f364:	2b0a      	cmp	r3, #10
 801f366:	bf8c      	ite	hi
 801f368:	2300      	movhi	r3, #0
 801f36a:	2301      	movls	r3, #1
 801f36c:	9303      	str	r3, [sp, #12]
 801f36e:	e711      	b.n	801f194 <main+0x1144>
		else	if((GUI_screen_state == Color_Screen) && !pause)
 801f370:	2b05      	cmp	r3, #5
 801f372:	f040 8086 	bne.w	801f482 <main+0x1432>
 801f376:	4b5a      	ldr	r3, [pc, #360]	; (801f4e0 <main+0x1490>)
 801f378:	781b      	ldrb	r3, [r3, #0]
 801f37a:	2b00      	cmp	r3, #0
 801f37c:	f040 8081 	bne.w	801f482 <main+0x1432>
			if(!pause & !exp_set)
 801f380:	4b58      	ldr	r3, [pc, #352]	; (801f4e4 <main+0x1494>)
 801f382:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 801f384:	4634      	mov	r4, r6
			if(!pause & !exp_set)
 801f386:	2b00      	cmp	r3, #0
 801f388:	f040 8091 	bne.w	801f4ae <main+0x145e>
				scr_refresh_measure++;
 801f38c:	f108 0801 	add.w	r8, r8, #1
				if(scr_refresh_measure == 28 )
 801f390:	f1b8 0f1c 	cmp.w	r8, #28
 801f394:	f040 808b 	bne.w	801f4ae <main+0x145e>
 801f398:	9304      	str	r3, [sp, #16]
					Calculate_Data();
 801f39a:	f7fd fd63 	bl	801ce64 <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801f39e:	9b04      	ldr	r3, [sp, #16]
 801f3a0:	2e28      	cmp	r6, #40	; 0x28
					scr_refresh_measure = 0;
 801f3a2:	4698      	mov	r8, r3
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801f3a4:	d910      	bls.n	801f3c8 <main+0x1378>
 801f3a6:	782b      	ldrb	r3, [r5, #0]
 801f3a8:	2b05      	cmp	r3, #5
 801f3aa:	f67f af47 	bls.w	801f23c <main+0x11ec>
 801f3ae:	2e46      	cmp	r6, #70	; 0x46
 801f3b0:	d90a      	bls.n	801f3c8 <main+0x1378>
 801f3b2:	782b      	ldrb	r3, [r5, #0]
 801f3b4:	2b05      	cmp	r3, #5
 801f3b6:	d903      	bls.n	801f3c0 <main+0x1370>
 801f3b8:	782b      	ldrb	r3, [r5, #0]
 801f3ba:	2b07      	cmp	r3, #7
 801f3bc:	f67f af3e 	bls.w	801f23c <main+0x11ec>
 801f3c0:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801f3c4:	f63f af36 	bhi.w	801f234 <main+0x11e4>
        if(GUI_screen_state == Graph_Screen)
 801f3c8:	f89a 3000 	ldrb.w	r3, [sl]
 801f3cc:	2b04      	cmp	r3, #4
 801f3ce:	d171      	bne.n	801f4b4 <main+0x1464>
            scr_refresh++;
 801f3d0:	f109 0901 	add.w	r9, r9, #1
            if(scr_refresh == 40 ){
 801f3d4:	f1b9 0f28 	cmp.w	r9, #40	; 0x28
 801f3d8:	d12f      	bne.n	801f43a <main+0x13ea>
							block_graph = 1;
 801f3da:	2301      	movs	r3, #1
 801f3dc:	f88b 3000 	strb.w	r3, [fp]
								if(preGUI_screen_state == Graph_Screen && Rotation_Screen_Spectral_Old3 == Rotation_Screen_Spectral){ Refresh_screen_Graph(20, 20, Line_Rabs_buff_graph2, Rotation_Screen_Spectral_Old3);}
 801f3e0:	4b41      	ldr	r3, [pc, #260]	; (801f4e8 <main+0x1498>)
 801f3e2:	4e42      	ldr	r6, [pc, #264]	; (801f4ec <main+0x149c>)
 801f3e4:	781b      	ldrb	r3, [r3, #0]
 801f3e6:	f8df 9118 	ldr.w	r9, [pc, #280]	; 801f500 <main+0x14b0>
 801f3ea:	2b04      	cmp	r3, #4
 801f3ec:	d109      	bne.n	801f402 <main+0x13b2>
 801f3ee:	7832      	ldrb	r2, [r6, #0]
 801f3f0:	f899 3000 	ldrb.w	r3, [r9]
 801f3f4:	4293      	cmp	r3, r2
 801f3f6:	d104      	bne.n	801f402 <main+0x13b2>
 801f3f8:	2114      	movs	r1, #20
 801f3fa:	4a3d      	ldr	r2, [pc, #244]	; (801f4f0 <main+0x14a0>)
 801f3fc:	4608      	mov	r0, r1
 801f3fe:	f7fc fc13 	bl	801bc28 <Refresh_screen_Graph>
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 801f402:	f899 1000 	ldrb.w	r1, [r9]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801f406:	4833      	ldr	r0, [pc, #204]	; (801f4d4 <main+0x1484>)
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 801f408:	7031      	strb	r1, [r6, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801f40a:	f7fa fce7 	bl	8019ddc <Rabs_find_MAX>
 801f40e:	4b39      	ldr	r3, [pc, #228]	; (801f4f4 <main+0x14a4>)
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 801f410:	4930      	ldr	r1, [pc, #192]	; (801f4d4 <main+0x1484>)
 801f412:	7830      	ldrb	r0, [r6, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 801f414:	ed83 0a00 	vstr	s0, [r3]
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 801f418:	f7fc fbb4 	bl	801bb84 <Rabs_graph_to_display>
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 801f41c:	7833      	ldrb	r3, [r6, #0]
 801f41e:	9300      	str	r3, [sp, #0]
 801f420:	2114      	movs	r1, #20
 801f422:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f426:	4a32      	ldr	r2, [pc, #200]	; (801f4f0 <main+0x14a0>)
 801f428:	4608      	mov	r0, r1
								block_graph = 0;
 801f42a:	f04f 0900 	mov.w	r9, #0
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 801f42e:	f7fc f9ef 	bl	801b810 <Spectral_DrawGraph_Line2>
								block_graph = 0;
 801f432:	f88b 9000 	strb.w	r9, [fp]
								GUI_SignalLevel();
 801f436:	f7f0 ff4d 	bl	80102d4 <GUI_SignalLevel>
        bat_refresh++;
 801f43a:	3701      	adds	r7, #1
        GUI_Display_Refresh();
 801f43c:	f7f1 fc54 	bl	8010ce8 <GUI_Display_Refresh>
        if (bat_refresh == 1000)
 801f440:	f5b7 7f7a 	cmp.w	r7, #1000	; 0x3e8
 801f444:	f47f ae96 	bne.w	801f174 <main+0x1124>
        	if(percentage_charge < percentage_charge_prev)
 801f448:	4f2b      	ldr	r7, [pc, #172]	; (801f4f8 <main+0x14a8>)
 801f44a:	4e2c      	ldr	r6, [pc, #176]	; (801f4fc <main+0x14ac>)
        	Get_Battery_Level();
 801f44c:	f7fd fe3e 	bl	801d0cc <Get_Battery_Level>
        	if(percentage_charge < percentage_charge_prev)
 801f450:	ed97 0b00 	vldr	d0, [r7]
 801f454:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f458:	ec51 0b10 	vmov	r0, r1, d0
 801f45c:	ed8d 0b04 	vstr	d0, [sp, #16]
 801f460:	f7e1 fb50 	bl	8000b04 <__aeabi_dcmplt>
 801f464:	ed9d 0b04 	vldr	d0, [sp, #16]
 801f468:	2800      	cmp	r0, #0
 801f46a:	f43f aeed 	beq.w	801f248 <main+0x11f8>
        		GUI_Battery_Level(0, 0, percentage_charge);
 801f46e:	2100      	movs	r1, #0
 801f470:	4608      	mov	r0, r1
 801f472:	f7f6 fd85 	bl	8015f80 <GUI_Battery_Level>
        		percentage_charge_prev = percentage_charge;
 801f476:	e9d7 2300 	ldrd	r2, r3, [r7]
        	bat_refresh = 0;
 801f47a:	2700      	movs	r7, #0
        		percentage_charge_prev = percentage_charge;
 801f47c:	e9c6 2300 	strd	r2, r3, [r6]
 801f480:	e678      	b.n	801f174 <main+0x1124>
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801f482:	2efa      	cmp	r6, #250	; 0xfa
				cnt_delay++;
 801f484:	4634      	mov	r4, r6
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 801f486:	d99f      	bls.n	801f3c8 <main+0x1378>
 801f488:	782b      	ldrb	r3, [r5, #0]
 801f48a:	2b05      	cmp	r3, #5
 801f48c:	f67f aed6 	bls.w	801f23c <main+0x11ec>
 801f490:	f240 33b6 	movw	r3, #950	; 0x3b6
 801f494:	429e      	cmp	r6, r3
 801f496:	d997      	bls.n	801f3c8 <main+0x1378>
 801f498:	782b      	ldrb	r3, [r5, #0]
 801f49a:	2b05      	cmp	r3, #5
 801f49c:	d903      	bls.n	801f4a6 <main+0x1456>
 801f49e:	782b      	ldrb	r3, [r5, #0]
 801f4a0:	2b07      	cmp	r3, #7
 801f4a2:	f67f aecb 	bls.w	801f23c <main+0x11ec>
 801f4a6:	f240 53aa 	movw	r3, #1450	; 0x5aa
 801f4aa:	429e      	cmp	r6, r3
 801f4ac:	e78a      	b.n	801f3c4 <main+0x1374>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 801f4ae:	2e28      	cmp	r6, #40	; 0x28
 801f4b0:	f63f af79 	bhi.w	801f3a6 <main+0x1356>
        } else{__asm("nop");}
 801f4b4:	bf00      	nop
 801f4b6:	e7c0      	b.n	801f43a <main+0x13ea>
 801f4b8:	2005193c 	.word	0x2005193c
 801f4bc:	20009d22 	.word	0x20009d22
 801f4c0:	2000e53c 	.word	0x2000e53c
 801f4c4:	20009d30 	.word	0x20009d30
 801f4c8:	20009d34 	.word	0x20009d34
 801f4cc:	2000c53c 	.word	0x2000c53c
 801f4d0:	20051940 	.word	0x20051940
 801f4d4:	2000d53c 	.word	0x2000d53c
 801f4d8:	200905c4 	.word	0x200905c4
 801f4dc:	20000ec1 	.word	0x20000ec1
 801f4e0:	20005728 	.word	0x20005728
 801f4e4:	20000ec0 	.word	0x20000ec0
 801f4e8:	2000022a 	.word	0x2000022a
 801f4ec:	20000ebd 	.word	0x20000ebd
 801f4f0:	20009a2e 	.word	0x20009a2e
 801f4f4:	20095ae0 	.word	0x20095ae0
 801f4f8:	200905c8 	.word	0x200905c8
 801f4fc:	20000ec8 	.word	0x20000ec8
 801f500:	2000570a 	.word	0x2000570a

0801f504 <_Error_Handler>:

}

void _Error_Handler(char *file, int line)
{
 801f504:	e7fe      	b.n	801f504 <_Error_Handler>
	...

0801f508 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 801f508:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 801f50a:	4c06      	ldr	r4, [pc, #24]	; (801f524 <SD_CheckStatus.isra.0+0x1c>)
 801f50c:	2301      	movs	r3, #1
 801f50e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 801f510:	f7fc fdec 	bl	801c0ec <BSP_SD_GetCardState>
 801f514:	4623      	mov	r3, r4
 801f516:	b918      	cbnz	r0, 801f520 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 801f518:	7822      	ldrb	r2, [r4, #0]
 801f51a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 801f51e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 801f520:	7818      	ldrb	r0, [r3, #0]
}
 801f522:	bd10      	pop	{r4, pc}
 801f524:	20000ed0 	.word	0x20000ed0

0801f528 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801f528:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 801f52a:	4c05      	ldr	r4, [pc, #20]	; (801f540 <SD_initialize+0x18>)
 801f52c:	2301      	movs	r3, #1
 801f52e:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801f530:	f7fc fda4 	bl	801c07c <BSP_SD_Init>
 801f534:	b910      	cbnz	r0, 801f53c <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 801f536:	f7ff ffe7 	bl	801f508 <SD_CheckStatus.isra.0>
 801f53a:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 801f53c:	7820      	ldrb	r0, [r4, #0]
}
 801f53e:	bd10      	pop	{r4, pc}
 801f540:	20000ed0 	.word	0x20000ed0

0801f544 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 801f544:	f7ff bfe0 	b.w	801f508 <SD_CheckStatus.isra.0>

0801f548 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801f548:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 801f54a:	4c16      	ldr	r4, [pc, #88]	; (801f5a4 <SD_read+0x5c>)
{
 801f54c:	4608      	mov	r0, r1
 801f54e:	4611      	mov	r1, r2
  ReadStatus = 0;
 801f550:	2200      	movs	r2, #0
 801f552:	6022      	str	r2, [r4, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801f554:	461a      	mov	r2, r3
 801f556:	f7fc fdad 	bl	801c0b4 <BSP_SD_ReadBlocks_DMA>
 801f55a:	b108      	cbz	r0, 801f560 <SD_read+0x18>
  DRESULT res = RES_ERROR;
 801f55c:	2001      	movs	r0, #1
 801f55e:	bd70      	pop	{r4, r5, r6, pc}
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 801f560:	f7e1 fd5e 	bl	8001020 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801f564:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 801f568:	4606      	mov	r6, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801f56a:	6823      	ldr	r3, [r4, #0]
 801f56c:	b19b      	cbz	r3, 801f596 <SD_read+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 801f56e:	6823      	ldr	r3, [r4, #0]
 801f570:	2b00      	cmp	r3, #0
 801f572:	d0f3      	beq.n	801f55c <SD_read+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      ReadStatus = 0;
 801f574:	2300      	movs	r3, #0
 801f576:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 801f578:	f7e1 fd52 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801f57c:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 801f580:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801f582:	f7e1 fd4d 	bl	8001020 <HAL_GetTick>
 801f586:	1b40      	subs	r0, r0, r5
 801f588:	42a0      	cmp	r0, r4
 801f58a:	d8e7      	bhi.n	801f55c <SD_read+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801f58c:	f7fc fdae 	bl	801c0ec <BSP_SD_GetCardState>
 801f590:	2800      	cmp	r0, #0
 801f592:	d1f6      	bne.n	801f582 <SD_read+0x3a>
      }
    }
  }

  return res;
}
 801f594:	bd70      	pop	{r4, r5, r6, pc}
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801f596:	f7e1 fd43 	bl	8001020 <HAL_GetTick>
 801f59a:	1b80      	subs	r0, r0, r6
 801f59c:	42a8      	cmp	r0, r5
 801f59e:	d9e4      	bls.n	801f56a <SD_read+0x22>
 801f5a0:	e7e5      	b.n	801f56e <SD_read+0x26>
 801f5a2:	bf00      	nop
 801f5a4:	20090610 	.word	0x20090610

0801f5a8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801f5a8:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 801f5aa:	4c16      	ldr	r4, [pc, #88]	; (801f604 <SD_write+0x5c>)
{
 801f5ac:	4608      	mov	r0, r1
 801f5ae:	4611      	mov	r1, r2
  WriteStatus = 0;
 801f5b0:	2200      	movs	r2, #0
 801f5b2:	6022      	str	r2, [r4, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801f5b4:	461a      	mov	r2, r3
 801f5b6:	f7fc fd8b 	bl	801c0d0 <BSP_SD_WriteBlocks_DMA>
 801f5ba:	b108      	cbz	r0, 801f5c0 <SD_write+0x18>
  DRESULT res = RES_ERROR;
 801f5bc:	2001      	movs	r0, #1
 801f5be:	bd70      	pop	{r4, r5, r6, pc}
                            (uint32_t) (sector),
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */

    timeout = HAL_GetTick();
 801f5c0:	f7e1 fd2e 	bl	8001020 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801f5c4:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 801f5c8:	4606      	mov	r6, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801f5ca:	6823      	ldr	r3, [r4, #0]
 801f5cc:	b19b      	cbz	r3, 801f5f6 <SD_write+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 801f5ce:	6823      	ldr	r3, [r4, #0]
 801f5d0:	2b00      	cmp	r3, #0
 801f5d2:	d0f3      	beq.n	801f5bc <SD_write+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      WriteStatus = 0;
 801f5d4:	2300      	movs	r3, #0
 801f5d6:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 801f5d8:	f7e1 fd22 	bl	8001020 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801f5dc:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 801f5e0:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801f5e2:	f7e1 fd1d 	bl	8001020 <HAL_GetTick>
 801f5e6:	1b40      	subs	r0, r0, r5
 801f5e8:	42a0      	cmp	r0, r4
 801f5ea:	d8e7      	bhi.n	801f5bc <SD_write+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801f5ec:	f7fc fd7e 	bl	801c0ec <BSP_SD_GetCardState>
 801f5f0:	2800      	cmp	r0, #0
 801f5f2:	d1f6      	bne.n	801f5e2 <SD_write+0x3a>
      }
    }
  }

  return res;
}
 801f5f4:	bd70      	pop	{r4, r5, r6, pc}
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801f5f6:	f7e1 fd13 	bl	8001020 <HAL_GetTick>
 801f5fa:	1b80      	subs	r0, r0, r6
 801f5fc:	42a8      	cmp	r0, r5
 801f5fe:	d9e4      	bls.n	801f5ca <SD_write+0x22>
 801f600:	e7e5      	b.n	801f5ce <SD_write+0x26>
 801f602:	bf00      	nop
 801f604:	20090614 	.word	0x20090614

0801f608 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801f608:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801f60a:	4b12      	ldr	r3, [pc, #72]	; (801f654 <SD_ioctl+0x4c>)
 801f60c:	781b      	ldrb	r3, [r3, #0]
 801f60e:	07db      	lsls	r3, r3, #31
{
 801f610:	b08a      	sub	sp, #40	; 0x28
 801f612:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801f614:	d41b      	bmi.n	801f64e <SD_ioctl+0x46>

  switch (cmd)
 801f616:	2903      	cmp	r1, #3
 801f618:	d803      	bhi.n	801f622 <SD_ioctl+0x1a>
 801f61a:	e8df f001 	tbb	[pc, r1]
 801f61e:	0510      	.short	0x0510
 801f620:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 801f622:	2004      	movs	r0, #4
  }

  return res;
}
 801f624:	b00a      	add	sp, #40	; 0x28
 801f626:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 801f628:	a801      	add	r0, sp, #4
 801f62a:	f7fc fd69 	bl	801c100 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801f62e:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801f630:	6023      	str	r3, [r4, #0]
 801f632:	e004      	b.n	801f63e <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 801f634:	a801      	add	r0, sp, #4
 801f636:	f7fc fd63 	bl	801c100 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801f63a:	9b08      	ldr	r3, [sp, #32]
 801f63c:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 801f63e:	2000      	movs	r0, #0
 801f640:	e7f0      	b.n	801f624 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 801f642:	a801      	add	r0, sp, #4
 801f644:	f7fc fd5c 	bl	801c100 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801f648:	9b08      	ldr	r3, [sp, #32]
 801f64a:	0a5b      	lsrs	r3, r3, #9
 801f64c:	e7f0      	b.n	801f630 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801f64e:	2003      	movs	r0, #3
 801f650:	e7e8      	b.n	801f624 <SD_ioctl+0x1c>
 801f652:	bf00      	nop
 801f654:	20000ed0 	.word	0x20000ed0

0801f658 <HAL_MspInit>:
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801f658:	4b21      	ldr	r3, [pc, #132]	; (801f6e0 <HAL_MspInit+0x88>)
{
 801f65a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801f65c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801f65e:	f042 0201 	orr.w	r2, r2, #1
 801f662:	661a      	str	r2, [r3, #96]	; 0x60
 801f664:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801f666:	f002 0201 	and.w	r2, r2, #1
 801f66a:	9200      	str	r2, [sp, #0]
 801f66c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 801f66e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f670:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 801f674:	659a      	str	r2, [r3, #88]	; 0x58
 801f676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801f67c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801f67e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 801f680:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801f682:	f7e2 f97b 	bl	800197c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 801f686:	2200      	movs	r2, #0
 801f688:	4611      	mov	r1, r2
 801f68a:	f06f 000b 	mvn.w	r0, #11
 801f68e:	f7e2 f987 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 801f692:	2200      	movs	r2, #0
 801f694:	4611      	mov	r1, r2
 801f696:	f06f 000a 	mvn.w	r0, #10
 801f69a:	f7e2 f981 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 801f69e:	2200      	movs	r2, #0
 801f6a0:	4611      	mov	r1, r2
 801f6a2:	f06f 0009 	mvn.w	r0, #9
 801f6a6:	f7e2 f97b 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 801f6aa:	2200      	movs	r2, #0
 801f6ac:	4611      	mov	r1, r2
 801f6ae:	f06f 0004 	mvn.w	r0, #4
 801f6b2:	f7e2 f975 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 801f6b6:	2200      	movs	r2, #0
 801f6b8:	4611      	mov	r1, r2
 801f6ba:	f06f 0003 	mvn.w	r0, #3
 801f6be:	f7e2 f96f 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 801f6c2:	2200      	movs	r2, #0
 801f6c4:	4611      	mov	r1, r2
 801f6c6:	f06f 0001 	mvn.w	r0, #1
 801f6ca:	f7e2 f969 	bl	80019a0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801f6ce:	2200      	movs	r2, #0
 801f6d0:	4611      	mov	r1, r2
 801f6d2:	f04f 30ff 	mov.w	r0, #4294967295
 801f6d6:	f7e2 f963 	bl	80019a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801f6da:	b003      	add	sp, #12
 801f6dc:	f85d fb04 	ldr.w	pc, [sp], #4
 801f6e0:	40021000 	.word	0x40021000

0801f6e4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 801f6e4:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 801f6e6:	6802      	ldr	r2, [r0, #0]
 801f6e8:	4b31      	ldr	r3, [pc, #196]	; (801f7b0 <HAL_LTDC_MspInit+0xcc>)
 801f6ea:	429a      	cmp	r2, r3
{
 801f6ec:	b08a      	sub	sp, #40	; 0x28
  if(hltdc->Instance==LTDC)
 801f6ee:	d15d      	bne.n	801f7ac <HAL_LTDC_MspInit+0xc8>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 801f6f0:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f6f4:	2400      	movs	r4, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 801f6f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801f6f8:	482e      	ldr	r0, [pc, #184]	; (801f7b4 <HAL_LTDC_MspInit+0xd0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 801f6fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801f6fe:	661a      	str	r2, [r3, #96]	; 0x60
 801f700:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801f702:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 801f706:	9200      	str	r2, [sp, #0]
 801f708:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801f70a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f70c:	f042 0210 	orr.w	r2, r2, #16
 801f710:	64da      	str	r2, [r3, #76]	; 0x4c
 801f712:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f714:	f002 0210 	and.w	r2, r2, #16
 801f718:	9201      	str	r2, [sp, #4]
 801f71a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801f71c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f71e:	f042 0202 	orr.w	r2, r2, #2
 801f722:	64da      	str	r2, [r3, #76]	; 0x4c
 801f724:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f726:	f002 0202 	and.w	r2, r2, #2
 801f72a:	9202      	str	r2, [sp, #8]
 801f72c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 801f72e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f730:	f042 0220 	orr.w	r2, r2, #32
 801f734:	64da      	str	r2, [r3, #76]	; 0x4c
 801f736:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f738:	f002 0220 	and.w	r2, r2, #32
 801f73c:	9203      	str	r2, [sp, #12]
 801f73e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801f740:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f742:	f042 0208 	orr.w	r2, r2, #8
 801f746:	64da      	str	r2, [r3, #76]	; 0x4c
 801f748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f74a:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801f74c:	f003 0308 	and.w	r3, r3, #8
 801f750:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f752:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801f754:	260b      	movs	r6, #11
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801f756:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f758:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 801f75a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801f75e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 801f760:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801f762:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801f764:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801f766:	f7e2 fd6b 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801f76a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801f76c:	a905      	add	r1, sp, #20
 801f76e:	4812      	ldr	r0, [pc, #72]	; (801f7b8 <HAL_LTDC_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801f770:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f772:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f774:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801f776:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801f778:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801f77a:	f7e2 fd61 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801f77e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801f782:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801f784:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801f786:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801f788:	480c      	ldr	r0, [pc, #48]	; (801f7bc <HAL_LTDC_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 801f78a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f78c:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f78e:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801f790:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801f792:	f7e2 fd55 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801f796:	f64d 730b 	movw	r3, #57099	; 0xdf0b
                          |GPIO_PIN_1|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801f79a:	a905      	add	r1, sp, #20
 801f79c:	4808      	ldr	r0, [pc, #32]	; (801f7c0 <HAL_LTDC_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801f79e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f7a0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f7a2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801f7a4:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 801f7a6:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801f7a8:	f7e2 fd4a 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 801f7ac:	b00a      	add	sp, #40	; 0x28
 801f7ae:	bd70      	pop	{r4, r5, r6, pc}
 801f7b0:	40016800 	.word	0x40016800
 801f7b4:	48001000 	.word	0x48001000
 801f7b8:	48000400 	.word	0x48000400
 801f7bc:	48001400 	.word	0x48001400
 801f7c0:	48000c00 	.word	0x48000c00

0801f7c4 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 801f7c4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 801f7c6:	6802      	ldr	r2, [r0, #0]
 801f7c8:	4b13      	ldr	r3, [pc, #76]	; (801f818 <HAL_SPI_MspInit+0x54>)
 801f7ca:	429a      	cmp	r2, r3
{
 801f7cc:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 801f7ce:	d121      	bne.n	801f814 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801f7d0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f7d4:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 801f7d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801f7d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801f7dc:	661a      	str	r2, [r3, #96]	; 0x60
 801f7de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f7e0:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 801f7e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801f7e6:	9300      	str	r3, [sp, #0]
 801f7e8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 801f7ea:	2342      	movs	r3, #66	; 0x42
 801f7ec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f7ee:	2302      	movs	r3, #2
 801f7f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f7f2:	2303      	movs	r3, #3
 801f7f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f7f6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801f7f8:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f7fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801f7fe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801f800:	f7e2 fd1e 	bl	8002240 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 801f804:	2023      	movs	r0, #35	; 0x23
 801f806:	4622      	mov	r2, r4
 801f808:	4621      	mov	r1, r4
 801f80a:	f7e2 f8c9 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 801f80e:	2023      	movs	r0, #35	; 0x23
 801f810:	f7e2 f8fa 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 801f814:	b006      	add	sp, #24
 801f816:	bd10      	pop	{r4, pc}
 801f818:	40013000 	.word	0x40013000

0801f81c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 801f81c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801f81e:	2214      	movs	r2, #20
{
 801f820:	b08a      	sub	sp, #40	; 0x28
 801f822:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801f824:	2100      	movs	r1, #0
 801f826:	eb0d 0002 	add.w	r0, sp, r2
 801f82a:	f000 fd2a 	bl	8020282 <memset>
  if(huart->Instance==LPUART1)
 801f82e:	6823      	ldr	r3, [r4, #0]
 801f830:	4a24      	ldr	r2, [pc, #144]	; (801f8c4 <HAL_UART_MspInit+0xa8>)
 801f832:	4293      	cmp	r3, r2
 801f834:	d11f      	bne.n	801f876 <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801f836:	4b24      	ldr	r3, [pc, #144]	; (801f8c8 <HAL_UART_MspInit+0xac>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f838:	4824      	ldr	r0, [pc, #144]	; (801f8cc <HAL_UART_MspInit+0xb0>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 801f83a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801f83c:	f042 0201 	orr.w	r2, r2, #1
 801f840:	65da      	str	r2, [r3, #92]	; 0x5c
 801f842:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801f844:	f002 0201 	and.w	r2, r2, #1
 801f848:	9201      	str	r2, [sp, #4]
 801f84a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801f84c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f84e:	f042 0204 	orr.w	r2, r2, #4
 801f852:	64da      	str	r2, [r3, #76]	; 0x4c
 801f854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f856:	f003 0304 	and.w	r3, r3, #4
 801f85a:	9302      	str	r3, [sp, #8]
 801f85c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801f85e:	2303      	movs	r3, #3
 801f860:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f862:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f864:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801f866:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f868:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 801f86a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f86c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801f86e:	f7e2 fce7 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 801f872:	b00a      	add	sp, #40	; 0x28
 801f874:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART1)
 801f876:	4a16      	ldr	r2, [pc, #88]	; (801f8d0 <HAL_UART_MspInit+0xb4>)
 801f878:	4293      	cmp	r3, r2
 801f87a:	d1fa      	bne.n	801f872 <HAL_UART_MspInit+0x56>
    __HAL_RCC_USART1_CLK_ENABLE();
 801f87c:	4b12      	ldr	r3, [pc, #72]	; (801f8c8 <HAL_UART_MspInit+0xac>)
 801f87e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801f880:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801f884:	661a      	str	r2, [r3, #96]	; 0x60
 801f886:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801f888:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 801f88c:	9203      	str	r2, [sp, #12]
 801f88e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801f890:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801f892:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801f896:	64da      	str	r2, [r3, #76]	; 0x4c
 801f898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f89a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f89e:	9304      	str	r3, [sp, #16]
 801f8a0:	9b04      	ldr	r3, [sp, #16]
    HAL_PWREx_EnableVddIO2();
 801f8a2:	f7e4 f9ab 	bl	8003bfc <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 801f8a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801f8aa:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801f8ac:	2302      	movs	r3, #2
 801f8ae:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f8b0:	2300      	movs	r3, #0
 801f8b2:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801f8b4:	2303      	movs	r3, #3
 801f8b6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801f8b8:	2307      	movs	r3, #7
 801f8ba:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801f8bc:	a905      	add	r1, sp, #20
 801f8be:	4805      	ldr	r0, [pc, #20]	; (801f8d4 <HAL_UART_MspInit+0xb8>)
 801f8c0:	e7d5      	b.n	801f86e <HAL_UART_MspInit+0x52>
 801f8c2:	bf00      	nop
 801f8c4:	40008000 	.word	0x40008000
 801f8c8:	40021000 	.word	0x40021000
 801f8cc:	48000800 	.word	0x48000800
 801f8d0:	40013800 	.word	0x40013800
 801f8d4:	48001800 	.word	0x48001800

0801f8d8 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==LPUART1)
 801f8d8:	6803      	ldr	r3, [r0, #0]
 801f8da:	4a0d      	ldr	r2, [pc, #52]	; (801f910 <HAL_UART_MspDeInit+0x38>)
 801f8dc:	4293      	cmp	r3, r2
 801f8de:	d109      	bne.n	801f8f4 <HAL_UART_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 801f8e0:	f502 32c8 	add.w	r2, r2, #102400	; 0x19000
  
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 801f8e4:	480b      	ldr	r0, [pc, #44]	; (801f914 <HAL_UART_MspDeInit+0x3c>)
    __HAL_RCC_LPUART1_CLK_DISABLE();
 801f8e6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 801f8e8:	f023 0301 	bic.w	r3, r3, #1
 801f8ec:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 801f8ee:	2103      	movs	r1, #3

    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 801f8f0:	f7e2 bd7e 	b.w	80023f0 <HAL_GPIO_DeInit>
  else if(huart->Instance==USART3)
 801f8f4:	4a08      	ldr	r2, [pc, #32]	; (801f918 <HAL_UART_MspDeInit+0x40>)
 801f8f6:	4293      	cmp	r3, r2
 801f8f8:	d109      	bne.n	801f90e <HAL_UART_MspDeInit+0x36>
    __HAL_RCC_USART3_CLK_DISABLE();
 801f8fa:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 801f8fe:	f44f 6140 	mov.w	r1, #3072	; 0xc00
    __HAL_RCC_USART3_CLK_DISABLE();
 801f902:	6d93      	ldr	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10|GPIO_PIN_11);
 801f904:	4805      	ldr	r0, [pc, #20]	; (801f91c <HAL_UART_MspDeInit+0x44>)
    __HAL_RCC_USART3_CLK_DISABLE();
 801f906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801f90a:	6593      	str	r3, [r2, #88]	; 0x58
 801f90c:	e7f0      	b.n	801f8f0 <HAL_UART_MspDeInit+0x18>
 801f90e:	4770      	bx	lr
 801f910:	40008000 	.word	0x40008000
 801f914:	48000800 	.word	0x48000800
 801f918:	40004800 	.word	0x40004800
 801f91c:	48000400 	.word	0x48000400

0801f920 <HAL_ADC_MspInit>:
}



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801f920:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 801f922:	6802      	ldr	r2, [r0, #0]
 801f924:	4b0e      	ldr	r3, [pc, #56]	; (801f960 <HAL_ADC_MspInit+0x40>)
 801f926:	429a      	cmp	r2, r3
 801f928:	d116      	bne.n	801f958 <HAL_ADC_MspInit+0x38>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 801f92a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 801f92e:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f932:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 801f934:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f936:	480b      	ldr	r0, [pc, #44]	; (801f964 <HAL_ADC_MspInit+0x44>)
    __HAL_RCC_ADC_CLK_ENABLE();
 801f938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801f93c:	64da      	str	r2, [r3, #76]	; 0x4c
 801f93e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801f944:	9300      	str	r3, [sp, #0]
 801f946:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801f948:	2304      	movs	r3, #4
 801f94a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 801f94c:	230b      	movs	r3, #11
 801f94e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801f950:	2300      	movs	r3, #0
 801f952:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801f954:	f7e2 fc74 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 801f958:	b007      	add	sp, #28
 801f95a:	f85d fb04 	ldr.w	pc, [sp], #4
 801f95e:	bf00      	nop
 801f960:	50040000 	.word	0x50040000
 801f964:	48000800 	.word	0x48000800

0801f968 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 801f968:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 801f96a:	6803      	ldr	r3, [r0, #0]
 801f96c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 801f970:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM2)
 801f972:	d112      	bne.n	801f99a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 801f974:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801f978:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 801f97a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f97c:	f042 0201 	orr.w	r2, r2, #1
 801f980:	659a      	str	r2, [r3, #88]	; 0x58
 801f982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801f984:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 801f986:	f003 0301 	and.w	r3, r3, #1
 801f98a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801f98c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 801f98e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 801f990:	f7e2 f806 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801f994:	201c      	movs	r0, #28
 801f996:	f7e2 f837 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
	
	if(htim_base->Instance==TIM7)
 801f99a:	6822      	ldr	r2, [r4, #0]
 801f99c:	4b20      	ldr	r3, [pc, #128]	; (801fa20 <HAL_TIM_Base_MspInit+0xb8>)
 801f99e:	429a      	cmp	r2, r3
 801f9a0:	d10d      	bne.n	801f9be <HAL_TIM_Base_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 801f9a2:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801f9a6:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 801f9a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f9aa:	f042 0220 	orr.w	r2, r2, #32
 801f9ae:	659a      	str	r2, [r3, #88]	; 0x58
 801f9b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801f9b2:	f003 0320 	and.w	r3, r3, #32
 801f9b6:	9301      	str	r3, [sp, #4]
 801f9b8:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801f9ba:	f7e2 f825 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
	
	 if(htim_base->Instance==TIM4)
 801f9be:	6822      	ldr	r2, [r4, #0]
 801f9c0:	4b18      	ldr	r3, [pc, #96]	; (801fa24 <HAL_TIM_Base_MspInit+0xbc>)
 801f9c2:	429a      	cmp	r2, r3
 801f9c4:	d112      	bne.n	801f9ec <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 801f9c6:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801f9ca:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 801f9cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f9ce:	f042 0204 	orr.w	r2, r2, #4
 801f9d2:	659a      	str	r2, [r3, #88]	; 0x58
 801f9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801f9d6:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 801f9d8:	f003 0304 	and.w	r3, r3, #4
 801f9dc:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801f9de:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 801f9e0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 801f9e2:	f7e1 ffdd 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 801f9e6:	201e      	movs	r0, #30
 801f9e8:	f7e2 f80e 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
	}
		if(htim_base->Instance==TIM6)
 801f9ec:	6822      	ldr	r2, [r4, #0]
 801f9ee:	4b0e      	ldr	r3, [pc, #56]	; (801fa28 <HAL_TIM_Base_MspInit+0xc0>)
 801f9f0:	429a      	cmp	r2, r3
 801f9f2:	d112      	bne.n	801fa1a <HAL_TIM_Base_MspInit+0xb2>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 801f9f4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801f9f8:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 801f9fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801f9fc:	f042 0210 	orr.w	r2, r2, #16
 801fa00:	659a      	str	r2, [r3, #88]	; 0x58
 801fa02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801fa04:	f003 0310 	and.w	r3, r3, #16
 801fa08:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801fa0a:	2200      	movs	r2, #0
 801fa0c:	2103      	movs	r1, #3
    __HAL_RCC_TIM6_CLK_ENABLE();
 801fa0e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801fa10:	f7e1 ffc6 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 801fa14:	2036      	movs	r0, #54	; 0x36
 801fa16:	f7e1 fff7 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 801fa1a:	b004      	add	sp, #16
 801fa1c:	bd10      	pop	{r4, pc}
 801fa1e:	bf00      	nop
 801fa20:	40001400 	.word	0x40001400
 801fa24:	40000800 	.word	0x40000800
 801fa28:	40001000 	.word	0x40001000

0801fa2c <HAL_TIM_OC_MspInit>:


void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 801fa2c:	b507      	push	{r0, r1, r2, lr}

  if(htim_oc->Instance==TIM5)
 801fa2e:	4b0d      	ldr	r3, [pc, #52]	; (801fa64 <HAL_TIM_OC_MspInit+0x38>)
 801fa30:	6802      	ldr	r2, [r0, #0]
 801fa32:	429a      	cmp	r2, r3
 801fa34:	d112      	bne.n	801fa5c <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 801fa36:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801fa3a:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 801fa3c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fa3e:	f042 0208 	orr.w	r2, r2, #8
 801fa42:	659a      	str	r2, [r3, #88]	; 0x58
 801fa44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801fa46:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 801fa48:	f003 0308 	and.w	r3, r3, #8
 801fa4c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801fa4e:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 801fa50:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 801fa52:	f7e1 ffa5 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 801fa56:	2032      	movs	r0, #50	; 0x32
 801fa58:	f7e1 ffd6 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 801fa5c:	b003      	add	sp, #12
 801fa5e:	f85d fb04 	ldr.w	pc, [sp], #4
 801fa62:	bf00      	nop
 801fa64:	40000c00 	.word	0x40000c00

0801fa68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801fa68:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM5)
 801fa6a:	6802      	ldr	r2, [r0, #0]
 801fa6c:	4b19      	ldr	r3, [pc, #100]	; (801fad4 <HAL_TIM_MspPostInit+0x6c>)
 801fa6e:	429a      	cmp	r2, r3
{
 801fa70:	b086      	sub	sp, #24
 801fa72:	4604      	mov	r4, r0
  if(htim->Instance==TIM5)
 801fa74:	d10c      	bne.n	801fa90 <HAL_TIM_MspPostInit+0x28>
  /* USER CODE END TIM5_MspPostInit 0 */
  
    /**TIM5 GPIO Configuration    
    PA0     ------> TIM5_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801fa76:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fa78:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 801fa7a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fa7c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fa7e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fa80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fa84:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fa86:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fa88:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801fa8a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fa8c:	f7e2 fbd8 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

  if(htim->Instance==TIM15)
 801fa90:	6822      	ldr	r2, [r4, #0]
 801fa92:	4b11      	ldr	r3, [pc, #68]	; (801fad8 <HAL_TIM_MspPostInit+0x70>)
 801fa94:	429a      	cmp	r2, r3
 801fa96:	d11a      	bne.n	801face <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801fa98:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 801fa9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fa9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801faa2:	64da      	str	r2, [r3, #76]	; 0x4c
 801faa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801faa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801faaa:	9300      	str	r3, [sp, #0]
 801faac:	9b00      	ldr	r3, [sp, #0]
    HAL_PWREx_EnableVddIO2();
 801faae:	f7e4 f8a5 	bl	8003bfc <HAL_PWREx_EnableVddIO2>
    /**TIM15 GPIO Configuration    
    PG11     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 801fab2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801fab6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fab8:	2302      	movs	r3, #2
 801faba:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fabc:	2300      	movs	r3, #0
 801fabe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fac0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801fac2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 801fac4:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801fac6:	4805      	ldr	r0, [pc, #20]	; (801fadc <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 801fac8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801faca:	f7e2 fbb9 	bl	8002240 <HAL_GPIO_Init>
	}
}
 801face:	b006      	add	sp, #24
 801fad0:	bd10      	pop	{r4, pc}
 801fad2:	bf00      	nop
 801fad4:	40000c00 	.word	0x40000c00
 801fad8:	40014000 	.word	0x40014000
 801fadc:	48001800 	.word	0x48001800

0801fae0 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 801fae0:	b507      	push	{r0, r1, r2, lr}

  if(hdma2d->Instance==DMA2D)
 801fae2:	4b0d      	ldr	r3, [pc, #52]	; (801fb18 <HAL_DMA2D_MspInit+0x38>)
 801fae4:	6802      	ldr	r2, [r0, #0]
 801fae6:	429a      	cmp	r2, r3
 801fae8:	d112      	bne.n	801fb10 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801faea:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801faee:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801faf0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801faf2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 801faf6:	649a      	str	r2, [r3, #72]	; 0x48
 801faf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801fafa:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801fafc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801fb00:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801fb02:	4611      	mov	r1, r2
    __HAL_RCC_DMA2D_CLK_ENABLE();
 801fb04:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 801fb06:	f7e1 ff4b 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 801fb0a:	205a      	movs	r0, #90	; 0x5a
 801fb0c:	f7e1 ff7c 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 801fb10:	b003      	add	sp, #12
 801fb12:	f85d fb04 	ldr.w	pc, [sp], #4
 801fb16:	bf00      	nop
 801fb18:	4002b000 	.word	0x4002b000

0801fb1c <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 801fb1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 801fb1e:	6802      	ldr	r2, [r0, #0]
 801fb20:	4b17      	ldr	r3, [pc, #92]	; (801fb80 <HAL_I2C_MspInit+0x64>)
 801fb22:	429a      	cmp	r2, r3
 801fb24:	d128      	bne.n	801fb78 <HAL_I2C_MspInit+0x5c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801fb26:	23c0      	movs	r3, #192	; 0xc0
 801fb28:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801fb2a:	2312      	movs	r3, #18
 801fb2c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801fb2e:	2301      	movs	r3, #1
 801fb30:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fb32:	2303      	movs	r3, #3
 801fb34:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801fb36:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801fb38:	eb0d 0103 	add.w	r1, sp, r3
 801fb3c:	4811      	ldr	r0, [pc, #68]	; (801fb84 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801fb3e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801fb40:	f7e2 fb7e 	bl	8002240 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 801fb44:	4b10      	ldr	r3, [pc, #64]	; (801fb88 <HAL_I2C_MspInit+0x6c>)
 801fb46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801fb48:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 801fb4c:	659a      	str	r2, [r3, #88]	; 0x58
 801fb4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801fb50:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 801fb52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801fb56:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 801fb58:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801fb5a:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 801fb5c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 801fb5e:	f7e1 ff1f 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 801fb62:	201f      	movs	r0, #31
 801fb64:	f7e1 ff50 	bl	8001a08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 801fb68:	2200      	movs	r2, #0
 801fb6a:	2020      	movs	r0, #32
 801fb6c:	4611      	mov	r1, r2
 801fb6e:	f7e1 ff17 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 801fb72:	2020      	movs	r0, #32
 801fb74:	f7e1 ff48 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 801fb78:	b007      	add	sp, #28
 801fb7a:	f85d fb04 	ldr.w	pc, [sp], #4
 801fb7e:	bf00      	nop
 801fb80:	40005400 	.word	0x40005400
 801fb84:	48000400 	.word	0x48000400
 801fb88:	40021000 	.word	0x40021000

0801fb8c <HAL_SD_MspInit>:

}


void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 801fb8c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 801fb8e:	6802      	ldr	r2, [r0, #0]
 801fb90:	4b18      	ldr	r3, [pc, #96]	; (801fbf4 <HAL_SD_MspInit+0x68>)
 801fb92:	429a      	cmp	r2, r3
{
 801fb94:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 801fb96:	d12b      	bne.n	801fbf0 <HAL_SD_MspInit+0x64>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801fb98:	4b17      	ldr	r3, [pc, #92]	; (801fbf8 <HAL_SD_MspInit+0x6c>)
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fb9a:	4818      	ldr	r0, [pc, #96]	; (801fbfc <HAL_SD_MspInit+0x70>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801fb9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fb9e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 801fba2:	64da      	str	r2, [r3, #76]	; 0x4c
 801fba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801fba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801fbaa:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fbac:	2400      	movs	r4, #0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801fbae:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fbb0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801fbb2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fbb6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fbb8:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801fbba:	250c      	movs	r5, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fbbc:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801fbbe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fbc0:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fbc2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801fbc4:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fbc6:	f7e2 fb3b 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801fbca:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801fbcc:	eb0d 0103 	add.w	r1, sp, r3
 801fbd0:	480b      	ldr	r0, [pc, #44]	; (801fc00 <HAL_SD_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801fbd2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fbd4:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fbd6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fbd8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 801fbda:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801fbdc:	f7e2 fb30 	bl	8002240 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 801fbe0:	2031      	movs	r0, #49	; 0x31
 801fbe2:	4622      	mov	r2, r4
 801fbe4:	4621      	mov	r1, r4
 801fbe6:	f7e1 fedb 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 801fbea:	2031      	movs	r0, #49	; 0x31
 801fbec:	f7e1 ff0c 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 801fbf0:	b007      	add	sp, #28
 801fbf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fbf4:	50062400 	.word	0x50062400
 801fbf8:	40021000 	.word	0x40021000
 801fbfc:	48000800 	.word	0x48000800
 801fc00:	48000c00 	.word	0x48000c00

0801fc04 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM15)
 801fc04:	6802      	ldr	r2, [r0, #0]
 801fc06:	4b08      	ldr	r3, [pc, #32]	; (801fc28 <HAL_TIM_PWM_MspInit+0x24>)
 801fc08:	429a      	cmp	r2, r3
{
 801fc0a:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM15)
 801fc0c:	d10a      	bne.n	801fc24 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 801fc0e:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 801fc12:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801fc14:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 801fc18:	661a      	str	r2, [r3, #96]	; 0x60
 801fc1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801fc1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801fc20:	9301      	str	r3, [sp, #4]
 801fc22:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 801fc24:	b002      	add	sp, #8
 801fc26:	4770      	bx	lr
 801fc28:	40014000 	.word	0x40014000

0801fc2c <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 801fc2c:	b508      	push	{r3, lr}

  if(hsd->Instance==SDMMC1)
 801fc2e:	6802      	ldr	r2, [r0, #0]
 801fc30:	4b0b      	ldr	r3, [pc, #44]	; (801fc60 <HAL_SD_MspDeInit+0x34>)
 801fc32:	429a      	cmp	r2, r3
 801fc34:	d112      	bne.n	801fc5c <HAL_SD_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 801fc36:	4a0b      	ldr	r2, [pc, #44]	; (801fc64 <HAL_SD_MspDeInit+0x38>)
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801fc38:	480b      	ldr	r0, [pc, #44]	; (801fc68 <HAL_SD_MspDeInit+0x3c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 801fc3a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801fc3c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 801fc40:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 801fc42:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 801fc46:	f7e2 fbd3 	bl	80023f0 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 801fc4a:	4808      	ldr	r0, [pc, #32]	; (801fc6c <HAL_SD_MspDeInit+0x40>)
 801fc4c:	2104      	movs	r1, #4
 801fc4e:	f7e2 fbcf 	bl	80023f0 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 801fc52:	2031      	movs	r0, #49	; 0x31
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 801fc54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 801fc58:	f7e1 bee2 	b.w	8001a20 <HAL_NVIC_DisableIRQ>
 801fc5c:	bd08      	pop	{r3, pc}
 801fc5e:	bf00      	nop
 801fc60:	50062400 	.word	0x50062400
 801fc64:	40021000 	.word	0x40021000
 801fc68:	48000800 	.word	0x48000800
 801fc6c:	48000c00 	.word	0x48000c00

0801fc70 <DMA1_Channel1_IRQHandler>:
*/

void DMA1_Channel1_IRQHandler(void)
{

  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 801fc70:	4801      	ldr	r0, [pc, #4]	; (801fc78 <DMA1_Channel1_IRQHandler+0x8>)
 801fc72:	f7e1 bf4f 	b.w	8001b14 <HAL_DMA_IRQHandler>
 801fc76:	bf00      	nop
 801fc78:	20095b24 	.word	0x20095b24

0801fc7c <NMI_Handler>:
 801fc7c:	4770      	bx	lr

0801fc7e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 801fc7e:	e7fe      	b.n	801fc7e <HardFault_Handler>

0801fc80 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 801fc80:	e7fe      	b.n	801fc80 <MemManage_Handler>

0801fc82 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 801fc82:	e7fe      	b.n	801fc82 <BusFault_Handler>

0801fc84 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 801fc84:	e7fe      	b.n	801fc84 <UsageFault_Handler>

0801fc86 <SVC_Handler>:
 801fc86:	4770      	bx	lr

0801fc88 <DebugMon_Handler>:
 801fc88:	4770      	bx	lr

0801fc8a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 801fc8a:	4770      	bx	lr

0801fc8c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 801fc8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 801fc8e:	f7e1 f9bf 	bl	8001010 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801fc92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 801fc96:	f7e1 bf02 	b.w	8001a9e <HAL_SYSTICK_IRQHandler>
	...

0801fc9c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 801fc9c:	4801      	ldr	r0, [pc, #4]	; (801fca4 <SPI1_IRQHandler+0x8>)
 801fc9e:	f7e5 bdb1 	b.w	8005804 <HAL_SPI_IRQHandler>
 801fca2:	bf00      	nop
 801fca4:	20095bf0 	.word	0x20095bf0

0801fca8 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 801fca8:	4801      	ldr	r0, [pc, #4]	; (801fcb0 <TIM5_IRQHandler+0x8>)
 801fcaa:	f7e5 bf8c 	b.w	8005bc6 <HAL_TIM_IRQHandler>
 801fcae:	bf00      	nop
 801fcb0:	2009589c 	.word	0x2009589c

0801fcb4 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 801fcb4:	4801      	ldr	r0, [pc, #4]	; (801fcbc <OTG_FS_IRQHandler+0x8>)
 801fcb6:	f7e3 bb0d 	b.w	80032d4 <HAL_PCD_IRQHandler>
 801fcba:	bf00      	nop
 801fcbc:	20095f88 	.word	0x20095f88

0801fcc0 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 801fcc0:	4801      	ldr	r0, [pc, #4]	; (801fcc8 <I2C1_EV_IRQHandler+0x8>)
 801fcc2:	f7e2 be93 	b.w	80029ec <HAL_I2C_EV_IRQHandler>
 801fcc6:	bf00      	nop
 801fcc8:	20095768 	.word	0x20095768

0801fccc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 801fccc:	4801      	ldr	r0, [pc, #4]	; (801fcd4 <I2C1_ER_IRQHandler+0x8>)
 801fcce:	f7e3 b8a3 	b.w	8002e18 <HAL_I2C_ER_IRQHandler>
 801fcd2:	bf00      	nop
 801fcd4:	20095768 	.word	0x20095768

0801fcd8 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 801fcd8:	4801      	ldr	r0, [pc, #4]	; (801fce0 <SDMMC1_IRQHandler+0x8>)
 801fcda:	f7e5 b871 	b.w	8004dc0 <HAL_SD_IRQHandler>
 801fcde:	bf00      	nop
 801fce0:	20095808 	.word	0x20095808

0801fce4 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 801fce4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801fce6:	4b0a      	ldr	r3, [pc, #40]	; (801fd10 <_sbrk+0x2c>)
 801fce8:	6819      	ldr	r1, [r3, #0]
{
 801fcea:	4602      	mov	r2, r0
	if (heap_end == 0)
 801fcec:	b909      	cbnz	r1, 801fcf2 <_sbrk+0xe>
		heap_end = &end;
 801fcee:	4909      	ldr	r1, [pc, #36]	; (801fd14 <_sbrk+0x30>)
 801fcf0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 801fcf2:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 801fcf4:	4669      	mov	r1, sp
 801fcf6:	4402      	add	r2, r0
 801fcf8:	428a      	cmp	r2, r1
 801fcfa:	d906      	bls.n	801fd0a <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 801fcfc:	f000 fa8c 	bl	8020218 <__errno>
 801fd00:	230c      	movs	r3, #12
 801fd02:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 801fd04:	f04f 30ff 	mov.w	r0, #4294967295
 801fd08:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 801fd0a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 801fd0c:	bd08      	pop	{r3, pc}
 801fd0e:	bf00      	nop
 801fd10:	20090618 	.word	0x20090618
 801fd14:	200965a0 	.word	0x200965a0

0801fd18 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801fd18:	490f      	ldr	r1, [pc, #60]	; (801fd58 <SystemInit+0x40>)
 801fd1a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 801fd1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801fd22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 801fd26:	4b0d      	ldr	r3, [pc, #52]	; (801fd5c <SystemInit+0x44>)
 801fd28:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 801fd2a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 801fd2c:	f042 0201 	orr.w	r2, r2, #1
 801fd30:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 801fd32:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 801fd34:	681a      	ldr	r2, [r3, #0]
 801fd36:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 801fd3a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 801fd3e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 801fd40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801fd44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 801fd46:	681a      	ldr	r2, [r3, #0]
 801fd48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801fd4c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 801fd4e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801fd50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801fd54:	608b      	str	r3, [r1, #8]
 801fd56:	4770      	bx	lr
 801fd58:	e000ed00 	.word	0xe000ed00
 801fd5c:	40021000 	.word	0x40021000

0801fd60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801fd60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 801fd62:	2200      	movs	r2, #0
 801fd64:	490a      	ldr	r1, [pc, #40]	; (801fd90 <MX_USB_DEVICE_Init+0x30>)
 801fd66:	480b      	ldr	r0, [pc, #44]	; (801fd94 <MX_USB_DEVICE_Init+0x34>)
 801fd68:	f7e8 f90f 	bl	8007f8a <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 801fd6c:	490a      	ldr	r1, [pc, #40]	; (801fd98 <MX_USB_DEVICE_Init+0x38>)
 801fd6e:	4809      	ldr	r0, [pc, #36]	; (801fd94 <MX_USB_DEVICE_Init+0x34>)
 801fd70:	f7e8 f920 	bl	8007fb4 <USBD_RegisterClass>
  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 801fd74:	4909      	ldr	r1, [pc, #36]	; (801fd9c <MX_USB_DEVICE_Init+0x3c>)
 801fd76:	4807      	ldr	r0, [pc, #28]	; (801fd94 <MX_USB_DEVICE_Init+0x34>)
 801fd78:	f7e8 f900 	bl	8007f7c <USBD_CUSTOM_HID_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 801fd7c:	4805      	ldr	r0, [pc, #20]	; (801fd94 <MX_USB_DEVICE_Init+0x34>)
 801fd7e:	f000 f9ac 	bl	80200da <USBD_LL_BatteryCharging>
 801fd82:	b120      	cbz	r0, 801fd8e <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 801fd84:	4803      	ldr	r0, [pc, #12]	; (801fd94 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801fd86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 801fd8a:	f7e8 b91a 	b.w	8007fc2 <USBD_Start>
 801fd8e:	bd08      	pop	{r3, pc}
 801fd90:	20000f0c 	.word	0x20000f0c
 801fd94:	20095cec 	.word	0x20095cec
 801fd98:	20000020 	.word	0x20000020
 801fd9c:	20000efc 	.word	0x20000efc

0801fda0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801fda0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 801fda2:	6803      	ldr	r3, [r0, #0]
 801fda4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 801fda8:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 801fdaa:	d133      	bne.n	801fe14 <HAL_PCD_MspInit+0x74>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801fdac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801fdb0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801fdb2:	2302      	movs	r3, #2
 801fdb4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fdb6:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801fdb8:	4c19      	ldr	r4, [pc, #100]	; (801fe20 <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fdba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801fdbc:	2303      	movs	r3, #3
 801fdbe:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fdc0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801fdc2:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fdc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801fdc8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fdca:	f7e2 fa39 	bl	8002240 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801fdce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801fdd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801fdd4:	64e3      	str	r3, [r4, #76]	; 0x4c
 801fdd6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 801fdd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801fddc:	9301      	str	r3, [sp, #4]
 801fdde:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801fde0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fde2:	00db      	lsls	r3, r3, #3
 801fde4:	d418      	bmi.n	801fe18 <HAL_PCD_MspInit+0x78>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801fde6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fde8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801fdec:	65a3      	str	r3, [r4, #88]	; 0x58
 801fdee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fdf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801fdf4:	9302      	str	r3, [sp, #8]
 801fdf6:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 801fdf8:	f7e3 fef8 	bl	8003bec <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 801fdfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801fdfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801fe02:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801fe04:	2200      	movs	r2, #0
 801fe06:	2043      	movs	r0, #67	; 0x43
 801fe08:	4611      	mov	r1, r2
 801fe0a:	f7e1 fdc9 	bl	80019a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801fe0e:	2043      	movs	r0, #67	; 0x43
 801fe10:	f7e1 fdfa 	bl	8001a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801fe14:	b008      	add	sp, #32
 801fe16:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 801fe18:	f7e3 fee8 	bl	8003bec <HAL_PWREx_EnableVddUSB>
 801fe1c:	e7f2      	b.n	801fe04 <HAL_PCD_MspInit+0x64>
 801fe1e:	bf00      	nop
 801fe20:	40021000 	.word	0x40021000

0801fe24 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801fe24:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 801fe28:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801fe2c:	f7e8 b8e0 	b.w	8007ff0 <USBD_LL_SetupStage>

0801fe30 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801fe30:	231c      	movs	r3, #28
 801fe32:	fb03 0301 	mla	r3, r3, r1, r0
 801fe36:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801fe3a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 801fe3e:	f7e8 b904 	b.w	800804a <USBD_LL_DataOutStage>

0801fe42 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801fe42:	231c      	movs	r3, #28
 801fe44:	fb03 0301 	mla	r3, r3, r1, r0
 801fe48:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801fe4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801fe4e:	f7e8 b934 	b.w	80080ba <USBD_LL_DataInStage>

0801fe52 <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801fe52:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801fe56:	f7e8 b9c5 	b.w	80081e4 <USBD_LL_SOF>

0801fe5a <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 801fe5a:	b510      	push	{r4, lr}
 801fe5c:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801fe5e:	2101      	movs	r1, #1
 801fe60:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801fe64:	f7e8 f9ac 	bl	80081c0 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801fe68:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 801fe6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801fe70:	f7e8 b97f 	b.w	8008172 <USBD_LL_Reset>

0801fe74 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801fe74:	6802      	ldr	r2, [r0, #0]
 801fe76:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 801fe7a:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801fe7c:	f043 0301 	orr.w	r3, r3, #1
{
 801fe80:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801fe82:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801fe86:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801fe8a:	f7e8 f99c 	bl	80081c6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801fe8e:	6a23      	ldr	r3, [r4, #32]
 801fe90:	b123      	cbz	r3, 801fe9c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801fe92:	4a03      	ldr	r2, [pc, #12]	; (801fea0 <HAL_PCD_SuspendCallback+0x2c>)
 801fe94:	6913      	ldr	r3, [r2, #16]
 801fe96:	f043 0306 	orr.w	r3, r3, #6
 801fe9a:	6113      	str	r3, [r2, #16]
 801fe9c:	bd10      	pop	{r4, pc}
 801fe9e:	bf00      	nop
 801fea0:	e000ed00 	.word	0xe000ed00

0801fea4 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801fea4:	6802      	ldr	r2, [r0, #0]
 801fea6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 801feaa:	f023 0301 	bic.w	r3, r3, #1
{
 801feae:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801feb0:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801feb4:	6a03      	ldr	r3, [r0, #32]
{
 801feb6:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 801feb8:	b133      	cbz	r3, 801fec8 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801feba:	4a06      	ldr	r2, [pc, #24]	; (801fed4 <HAL_PCD_ResumeCallback+0x30>)
 801febc:	6913      	ldr	r3, [r2, #16]
 801febe:	f023 0306 	bic.w	r3, r3, #6
 801fec2:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 801fec4:	f7fe f856 	bl	801df74 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801fec8:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 801fecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801fed0:	f7e8 b982 	b.w	80081d8 <USBD_LL_Resume>
 801fed4:	e000ed00 	.word	0xe000ed00

0801fed8 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801fed8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801fedc:	f7e8 b990 	b.w	8008200 <USBD_LL_IsoOUTIncomplete>

0801fee0 <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801fee0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801fee4:	f7e8 b98a 	b.w	80081fc <USBD_LL_IsoINIncomplete>

0801fee8 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801fee8:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801feec:	f7e8 b98a 	b.w	8008204 <USBD_LL_DevConnected>

0801fef0 <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801fef0:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 801fef4:	f7e8 b988 	b.w	8008208 <USBD_LL_DevDisconnected>

0801fef8 <USBD_LL_Init>:
{
 801fef8:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 801fefa:	7802      	ldrb	r2, [r0, #0]
 801fefc:	bb4a      	cbnz	r2, 801ff52 <USBD_LL_Init+0x5a>
  hpcd_USB_OTG_FS.pData = pdev;
 801fefe:	4b16      	ldr	r3, [pc, #88]	; (801ff58 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801ff00:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 801ff02:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801ff06:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801ff0a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801ff0e:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801ff12:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801ff14:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 801ff16:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801ff18:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801ff1a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801ff1c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801ff1e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801ff20:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801ff22:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801ff24:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801ff26:	f7e3 f942 	bl	80031ae <HAL_PCD_Init>
 801ff2a:	b120      	cbz	r0, 801ff36 <USBD_LL_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 801ff2c:	f240 116b 	movw	r1, #363	; 0x16b
 801ff30:	480a      	ldr	r0, [pc, #40]	; (801ff5c <USBD_LL_Init+0x64>)
 801ff32:	f7ff fae7 	bl	801f504 <_Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801ff36:	2180      	movs	r1, #128	; 0x80
 801ff38:	4807      	ldr	r0, [pc, #28]	; (801ff58 <USBD_LL_Init+0x60>)
 801ff3a:	f7e3 fdc9 	bl	8003ad0 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801ff3e:	2240      	movs	r2, #64	; 0x40
 801ff40:	2100      	movs	r1, #0
 801ff42:	4805      	ldr	r0, [pc, #20]	; (801ff58 <USBD_LL_Init+0x60>)
 801ff44:	f7e3 fda3 	bl	8003a8e <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801ff48:	2280      	movs	r2, #128	; 0x80
 801ff4a:	2101      	movs	r1, #1
 801ff4c:	4802      	ldr	r0, [pc, #8]	; (801ff58 <USBD_LL_Init+0x60>)
 801ff4e:	f7e3 fd9e 	bl	8003a8e <HAL_PCDEx_SetTxFiFo>
}
 801ff52:	2000      	movs	r0, #0
 801ff54:	bd08      	pop	{r3, pc}
 801ff56:	bf00      	nop
 801ff58:	20095f88 	.word	0x20095f88
 801ff5c:	08031e44 	.word	0x08031e44

0801ff60 <USBD_LL_Start>:
{
 801ff60:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 801ff62:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ff66:	f7e3 f99f 	bl	80032a8 <HAL_PCD_Start>
 801ff6a:	2803      	cmp	r0, #3
 801ff6c:	bf9a      	itte	ls
 801ff6e:	4b02      	ldrls	r3, [pc, #8]	; (801ff78 <USBD_LL_Start+0x18>)
 801ff70:	5c18      	ldrbls	r0, [r3, r0]
 801ff72:	2002      	movhi	r0, #2
}
 801ff74:	bd08      	pop	{r3, pc}
 801ff76:	bf00      	nop
 801ff78:	08031e40 	.word	0x08031e40

0801ff7c <USBD_LL_OpenEP>:
{
 801ff7c:	b510      	push	{r4, lr}
 801ff7e:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801ff80:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ff84:	4613      	mov	r3, r2
 801ff86:	4622      	mov	r2, r4
 801ff88:	f7e3 fc7e 	bl	8003888 <HAL_PCD_EP_Open>
 801ff8c:	2803      	cmp	r0, #3
 801ff8e:	bf9a      	itte	ls
 801ff90:	4b01      	ldrls	r3, [pc, #4]	; (801ff98 <USBD_LL_OpenEP+0x1c>)
 801ff92:	5c18      	ldrbls	r0, [r3, r0]
 801ff94:	2002      	movhi	r0, #2
}
 801ff96:	bd10      	pop	{r4, pc}
 801ff98:	08031e40 	.word	0x08031e40

0801ff9c <USBD_LL_CloseEP>:
{
 801ff9c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801ff9e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ffa2:	f7e3 fca6 	bl	80038f2 <HAL_PCD_EP_Close>
 801ffa6:	2803      	cmp	r0, #3
 801ffa8:	bf9a      	itte	ls
 801ffaa:	4b02      	ldrls	r3, [pc, #8]	; (801ffb4 <USBD_LL_CloseEP+0x18>)
 801ffac:	5c18      	ldrbls	r0, [r3, r0]
 801ffae:	2002      	movhi	r0, #2
}
 801ffb0:	bd08      	pop	{r3, pc}
 801ffb2:	bf00      	nop
 801ffb4:	08031e40 	.word	0x08031e40

0801ffb8 <USBD_LL_StallEP>:
{
 801ffb8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ffba:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ffbe:	f7e3 fcfb 	bl	80039b8 <HAL_PCD_EP_SetStall>
 801ffc2:	2803      	cmp	r0, #3
 801ffc4:	bf9a      	itte	ls
 801ffc6:	4b02      	ldrls	r3, [pc, #8]	; (801ffd0 <USBD_LL_StallEP+0x18>)
 801ffc8:	5c18      	ldrbls	r0, [r3, r0]
 801ffca:	2002      	movhi	r0, #2
}
 801ffcc:	bd08      	pop	{r3, pc}
 801ffce:	bf00      	nop
 801ffd0:	08031e40 	.word	0x08031e40

0801ffd4 <USBD_LL_ClearStallEP>:
{
 801ffd4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 801ffd6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 801ffda:	f7e3 fd26 	bl	8003a2a <HAL_PCD_EP_ClrStall>
 801ffde:	2803      	cmp	r0, #3
 801ffe0:	bf9a      	itte	ls
 801ffe2:	4b02      	ldrls	r3, [pc, #8]	; (801ffec <USBD_LL_ClearStallEP+0x18>)
 801ffe4:	5c18      	ldrbls	r0, [r3, r0]
 801ffe6:	2002      	movhi	r0, #2
}
 801ffe8:	bd08      	pop	{r3, pc}
 801ffea:	bf00      	nop
 801ffec:	08031e40 	.word	0x08031e40

0801fff0 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 801fff0:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801fff4:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 801fff8:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801fffc:	bf1b      	ittet	ne
 801fffe:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8020002:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8020006:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 802000a:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 802000e:	bf08      	it	eq
 8020010:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 8020014:	4770      	bx	lr
	...

08020018 <USBD_LL_SetUSBAddress>:
{
 8020018:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802001a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 802001e:	f7e3 fc1f 	bl	8003860 <HAL_PCD_SetAddress>
 8020022:	2803      	cmp	r0, #3
 8020024:	bf9a      	itte	ls
 8020026:	4b02      	ldrls	r3, [pc, #8]	; (8020030 <USBD_LL_SetUSBAddress+0x18>)
 8020028:	5c18      	ldrbls	r0, [r3, r0]
 802002a:	2002      	movhi	r0, #2
}
 802002c:	bd08      	pop	{r3, pc}
 802002e:	bf00      	nop
 8020030:	08031e40 	.word	0x08031e40

08020034 <USBD_LL_Transmit>:
{
 8020034:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8020036:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 802003a:	f7e3 fca2 	bl	8003982 <HAL_PCD_EP_Transmit>
 802003e:	2803      	cmp	r0, #3
 8020040:	bf9a      	itte	ls
 8020042:	4b02      	ldrls	r3, [pc, #8]	; (802004c <USBD_LL_Transmit+0x18>)
 8020044:	5c18      	ldrbls	r0, [r3, r0]
 8020046:	2002      	movhi	r0, #2
}
 8020048:	bd08      	pop	{r3, pc}
 802004a:	bf00      	nop
 802004c:	08031e40 	.word	0x08031e40

08020050 <USBD_LL_PrepareReceive>:
{
 8020050:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8020052:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8020056:	f7e3 fc76 	bl	8003946 <HAL_PCD_EP_Receive>
 802005a:	2803      	cmp	r0, #3
 802005c:	bf9a      	itte	ls
 802005e:	4b02      	ldrls	r3, [pc, #8]	; (8020068 <USBD_LL_PrepareReceive+0x18>)
 8020060:	5c18      	ldrbls	r0, [r3, r0]
 8020062:	2002      	movhi	r0, #2
}
 8020064:	bd08      	pop	{r3, pc}
 8020066:	bf00      	nop
 8020068:	08031e40 	.word	0x08031e40

0802006c <HAL_PCDEx_LPM_Callback>:
{
 802006c:	b510      	push	{r4, lr}
 802006e:	4604      	mov	r4, r0
  switch (msg)
 8020070:	b111      	cbz	r1, 8020078 <HAL_PCDEx_LPM_Callback+0xc>
 8020072:	2901      	cmp	r1, #1
 8020074:	d016      	beq.n	80200a4 <HAL_PCDEx_LPM_Callback+0x38>
 8020076:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8020078:	6a03      	ldr	r3, [r0, #32]
 802007a:	b133      	cbz	r3, 802008a <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 802007c:	f7fd ff7a 	bl	801df74 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8020080:	4a12      	ldr	r2, [pc, #72]	; (80200cc <HAL_PCDEx_LPM_Callback+0x60>)
 8020082:	6913      	ldr	r3, [r2, #16]
 8020084:	f023 0306 	bic.w	r3, r3, #6
 8020088:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 802008a:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 802008c:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8020090:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8020094:	f023 0301 	bic.w	r3, r3, #1
 8020098:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 802009c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 80200a0:	f7e8 b89a 	b.w	80081d8 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80200a4:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 80200a6:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80200aa:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80200ae:	f043 0301 	orr.w	r3, r3, #1
 80200b2:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 80200b6:	f7e8 f886 	bl	80081c6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80200ba:	6a23      	ldr	r3, [r4, #32]
 80200bc:	b123      	cbz	r3, 80200c8 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80200be:	4a03      	ldr	r2, [pc, #12]	; (80200cc <HAL_PCDEx_LPM_Callback+0x60>)
 80200c0:	6913      	ldr	r3, [r2, #16]
 80200c2:	f043 0306 	orr.w	r3, r3, #6
 80200c6:	6113      	str	r3, [r2, #16]
 80200c8:	bd10      	pop	{r4, pc}
 80200ca:	bf00      	nop
 80200cc:	e000ed00 	.word	0xe000ed00

080200d0 <USBD_static_malloc>:
}
 80200d0:	4800      	ldr	r0, [pc, #0]	; (80200d4 <USBD_static_malloc+0x4>)
 80200d2:	4770      	bx	lr
 80200d4:	2009061c 	.word	0x2009061c

080200d8 <USBD_static_free>:
{
 80200d8:	4770      	bx	lr

080200da <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 80200da:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 80200de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80200e0:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80200e2:	bf14      	ite	ne
 80200e4:	2002      	movne	r0, #2
 80200e6:	2000      	moveq	r0, #0
 80200e8:	4770      	bx	lr

080200ea <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 80200ea:	2000      	movs	r0, #0
 80200ec:	4770      	bx	lr
	...

080200f0 <CUSTOM_HID_OutEvent_FS>:
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 80200f0:	4b05      	ldr	r3, [pc, #20]	; (8020108 <CUSTOM_HID_OutEvent_FS+0x18>)
 
  for (uint8_t i = 0; i < 12; i++)
  {
    dataToReceive[i] = hhid->Report_buf[i];
 80200f2:	4a06      	ldr	r2, [pc, #24]	; (802010c <CUSTOM_HID_OutEvent_FS+0x1c>)
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 80200f4:	f8d3 0290 	ldr.w	r0, [r3, #656]	; 0x290
 80200f8:	2300      	movs	r3, #0
    dataToReceive[i] = hhid->Report_buf[i];
 80200fa:	5cc1      	ldrb	r1, [r0, r3]
 80200fc:	5499      	strb	r1, [r3, r2]
 80200fe:	3301      	adds	r3, #1
  for (uint8_t i = 0; i < 12; i++)
 8020100:	2b0c      	cmp	r3, #12
 8020102:	d1fa      	bne.n	80200fa <CUSTOM_HID_OutEvent_FS+0xa>
  }
 
 
  return (USBD_OK);
}
 8020104:	2000      	movs	r0, #0
 8020106:	4770      	bx	lr
 8020108:	20095cec 	.word	0x20095cec
 802010c:	2008f550 	.word	0x2008f550

08020110 <CUSTOM_HID_Init_FS>:
 8020110:	2000      	movs	r0, #0
 8020112:	4770      	bx	lr

08020114 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8020114:	2312      	movs	r3, #18
 8020116:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8020118:	4800      	ldr	r0, [pc, #0]	; (802011c <USBD_FS_DeviceDescriptor+0x8>)
 802011a:	4770      	bx	lr
 802011c:	20000f38 	.word	0x20000f38

08020120 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8020120:	2304      	movs	r3, #4
 8020122:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8020124:	4800      	ldr	r0, [pc, #0]	; (8020128 <USBD_FS_LangIDStrDescriptor+0x8>)
 8020126:	4770      	bx	lr
 8020128:	20000f4c 	.word	0x20000f4c

0802012c <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 802012c:	230c      	movs	r3, #12
 802012e:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8020130:	4800      	ldr	r0, [pc, #0]	; (8020134 <USBD_FS_USR_BOSDescriptor+0x8>)
 8020132:	4770      	bx	lr
 8020134:	20000f2c 	.word	0x20000f2c

08020138 <USBD_FS_ManufacturerStrDescriptor>:
{
 8020138:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 802013a:	4c04      	ldr	r4, [pc, #16]	; (802014c <USBD_FS_ManufacturerStrDescriptor+0x14>)
 802013c:	4804      	ldr	r0, [pc, #16]	; (8020150 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 802013e:	460a      	mov	r2, r1
 8020140:	4621      	mov	r1, r4
 8020142:	f7e8 fa6d 	bl	8008620 <USBD_GetString>
}
 8020146:	4620      	mov	r0, r4
 8020148:	bd10      	pop	{r4, pc}
 802014a:	bf00      	nop
 802014c:	20096390 	.word	0x20096390
 8020150:	08031e7e 	.word	0x08031e7e

08020154 <USBD_FS_ProductStrDescriptor>:
{
 8020154:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8020156:	4c04      	ldr	r4, [pc, #16]	; (8020168 <USBD_FS_ProductStrDescriptor+0x14>)
 8020158:	4804      	ldr	r0, [pc, #16]	; (802016c <USBD_FS_ProductStrDescriptor+0x18>)
 802015a:	460a      	mov	r2, r1
 802015c:	4621      	mov	r1, r4
 802015e:	f7e8 fa5f 	bl	8008620 <USBD_GetString>
}
 8020162:	4620      	mov	r0, r4
 8020164:	bd10      	pop	{r4, pc}
 8020166:	bf00      	nop
 8020168:	20096390 	.word	0x20096390
 802016c:	08031e85 	.word	0x08031e85

08020170 <USBD_FS_SerialStrDescriptor>:
{
 8020170:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8020172:	4c04      	ldr	r4, [pc, #16]	; (8020184 <USBD_FS_SerialStrDescriptor+0x14>)
 8020174:	4804      	ldr	r0, [pc, #16]	; (8020188 <USBD_FS_SerialStrDescriptor+0x18>)
 8020176:	460a      	mov	r2, r1
 8020178:	4621      	mov	r1, r4
 802017a:	f7e8 fa51 	bl	8008620 <USBD_GetString>
}
 802017e:	4620      	mov	r0, r4
 8020180:	bd10      	pop	{r4, pc}
 8020182:	bf00      	nop
 8020184:	20096390 	.word	0x20096390
 8020188:	08031ea3 	.word	0x08031ea3

0802018c <USBD_FS_ConfigStrDescriptor>:
{
 802018c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802018e:	4c04      	ldr	r4, [pc, #16]	; (80201a0 <USBD_FS_ConfigStrDescriptor+0x14>)
 8020190:	4804      	ldr	r0, [pc, #16]	; (80201a4 <USBD_FS_ConfigStrDescriptor+0x18>)
 8020192:	460a      	mov	r2, r1
 8020194:	4621      	mov	r1, r4
 8020196:	f7e8 fa43 	bl	8008620 <USBD_GetString>
}
 802019a:	4620      	mov	r0, r4
 802019c:	bd10      	pop	{r4, pc}
 802019e:	bf00      	nop
 80201a0:	20096390 	.word	0x20096390
 80201a4:	08031e57 	.word	0x08031e57

080201a8 <USBD_FS_InterfaceStrDescriptor>:
{
 80201a8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80201aa:	4c04      	ldr	r4, [pc, #16]	; (80201bc <USBD_FS_InterfaceStrDescriptor+0x14>)
 80201ac:	4804      	ldr	r0, [pc, #16]	; (80201c0 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80201ae:	460a      	mov	r2, r1
 80201b0:	4621      	mov	r1, r4
 80201b2:	f7e8 fa35 	bl	8008620 <USBD_GetString>
}
 80201b6:	4620      	mov	r0, r4
 80201b8:	bd10      	pop	{r4, pc}
 80201ba:	bf00      	nop
 80201bc:	20096390 	.word	0x20096390
 80201c0:	08031e69 	.word	0x08031e69

080201c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80201c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80201fc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80201c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80201ca:	e003      	b.n	80201d4 <LoopCopyDataInit>

080201cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80201cc:	4b0c      	ldr	r3, [pc, #48]	; (8020200 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80201ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80201d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80201d2:	3104      	adds	r1, #4

080201d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80201d4:	480b      	ldr	r0, [pc, #44]	; (8020204 <LoopForever+0xa>)
	ldr	r3, =_edata
 80201d6:	4b0c      	ldr	r3, [pc, #48]	; (8020208 <LoopForever+0xe>)
	adds	r2, r0, r1
 80201d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80201da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80201dc:	d3f6      	bcc.n	80201cc <CopyDataInit>
	ldr	r2, =_sbss
 80201de:	4a0b      	ldr	r2, [pc, #44]	; (802020c <LoopForever+0x12>)
	b	LoopFillZerobss
 80201e0:	e002      	b.n	80201e8 <LoopFillZerobss>

080201e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80201e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80201e4:	f842 3b04 	str.w	r3, [r2], #4

080201e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80201e8:	4b09      	ldr	r3, [pc, #36]	; (8020210 <LoopForever+0x16>)
	cmp	r2, r3
 80201ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80201ec:	d3f9      	bcc.n	80201e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80201ee:	f7ff fd93 	bl	801fd18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80201f2:	f000 f817 	bl	8020224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80201f6:	f7fd ff2b 	bl	801e050 <main>

080201fa <LoopForever>:

LoopForever:
    b LoopForever
 80201fa:	e7fe      	b.n	80201fa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80201fc:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8020200:	080321b0 	.word	0x080321b0
	ldr	r0, =_sdata
 8020204:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8020208:	200015c4 	.word	0x200015c4
	ldr	r2, =_sbss
 802020c:	200015c8 	.word	0x200015c8
	ldr	r3, = _ebss
 8020210:	200965a0 	.word	0x200965a0

08020214 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8020214:	e7fe      	b.n	8020214 <ADC1_IRQHandler>
	...

08020218 <__errno>:
 8020218:	4b01      	ldr	r3, [pc, #4]	; (8020220 <__errno+0x8>)
 802021a:	6818      	ldr	r0, [r3, #0]
 802021c:	4770      	bx	lr
 802021e:	bf00      	nop
 8020220:	20000f50 	.word	0x20000f50

08020224 <__libc_init_array>:
 8020224:	b570      	push	{r4, r5, r6, lr}
 8020226:	4e0d      	ldr	r6, [pc, #52]	; (802025c <__libc_init_array+0x38>)
 8020228:	4c0d      	ldr	r4, [pc, #52]	; (8020260 <__libc_init_array+0x3c>)
 802022a:	1ba4      	subs	r4, r4, r6
 802022c:	10a4      	asrs	r4, r4, #2
 802022e:	2500      	movs	r5, #0
 8020230:	42a5      	cmp	r5, r4
 8020232:	d109      	bne.n	8020248 <__libc_init_array+0x24>
 8020234:	4e0b      	ldr	r6, [pc, #44]	; (8020264 <__libc_init_array+0x40>)
 8020236:	4c0c      	ldr	r4, [pc, #48]	; (8020268 <__libc_init_array+0x44>)
 8020238:	f004 fe0a 	bl	8024e50 <_init>
 802023c:	1ba4      	subs	r4, r4, r6
 802023e:	10a4      	asrs	r4, r4, #2
 8020240:	2500      	movs	r5, #0
 8020242:	42a5      	cmp	r5, r4
 8020244:	d105      	bne.n	8020252 <__libc_init_array+0x2e>
 8020246:	bd70      	pop	{r4, r5, r6, pc}
 8020248:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 802024c:	4798      	blx	r3
 802024e:	3501      	adds	r5, #1
 8020250:	e7ee      	b.n	8020230 <__libc_init_array+0xc>
 8020252:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8020256:	4798      	blx	r3
 8020258:	3501      	adds	r5, #1
 802025a:	e7f2      	b.n	8020242 <__libc_init_array+0x1e>
 802025c:	080321a8 	.word	0x080321a8
 8020260:	080321a8 	.word	0x080321a8
 8020264:	080321a8 	.word	0x080321a8
 8020268:	080321ac 	.word	0x080321ac

0802026c <memcpy>:
 802026c:	b510      	push	{r4, lr}
 802026e:	1e43      	subs	r3, r0, #1
 8020270:	440a      	add	r2, r1
 8020272:	4291      	cmp	r1, r2
 8020274:	d100      	bne.n	8020278 <memcpy+0xc>
 8020276:	bd10      	pop	{r4, pc}
 8020278:	f811 4b01 	ldrb.w	r4, [r1], #1
 802027c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020280:	e7f7      	b.n	8020272 <memcpy+0x6>

08020282 <memset>:
 8020282:	4402      	add	r2, r0
 8020284:	4603      	mov	r3, r0
 8020286:	4293      	cmp	r3, r2
 8020288:	d100      	bne.n	802028c <memset+0xa>
 802028a:	4770      	bx	lr
 802028c:	f803 1b01 	strb.w	r1, [r3], #1
 8020290:	e7f9      	b.n	8020286 <memset+0x4>
	...

08020294 <sprintf>:
 8020294:	b40e      	push	{r1, r2, r3}
 8020296:	b500      	push	{lr}
 8020298:	b09c      	sub	sp, #112	; 0x70
 802029a:	f44f 7102 	mov.w	r1, #520	; 0x208
 802029e:	ab1d      	add	r3, sp, #116	; 0x74
 80202a0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80202a4:	9002      	str	r0, [sp, #8]
 80202a6:	9006      	str	r0, [sp, #24]
 80202a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80202ac:	480a      	ldr	r0, [pc, #40]	; (80202d8 <sprintf+0x44>)
 80202ae:	9104      	str	r1, [sp, #16]
 80202b0:	9107      	str	r1, [sp, #28]
 80202b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80202b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80202ba:	f8ad 1016 	strh.w	r1, [sp, #22]
 80202be:	6800      	ldr	r0, [r0, #0]
 80202c0:	9301      	str	r3, [sp, #4]
 80202c2:	a902      	add	r1, sp, #8
 80202c4:	f000 f830 	bl	8020328 <_svfprintf_r>
 80202c8:	9b02      	ldr	r3, [sp, #8]
 80202ca:	2200      	movs	r2, #0
 80202cc:	701a      	strb	r2, [r3, #0]
 80202ce:	b01c      	add	sp, #112	; 0x70
 80202d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80202d4:	b003      	add	sp, #12
 80202d6:	4770      	bx	lr
 80202d8:	20000f50 	.word	0x20000f50

080202dc <strcat>:
 80202dc:	b510      	push	{r4, lr}
 80202de:	4602      	mov	r2, r0
 80202e0:	4613      	mov	r3, r2
 80202e2:	3201      	adds	r2, #1
 80202e4:	781c      	ldrb	r4, [r3, #0]
 80202e6:	2c00      	cmp	r4, #0
 80202e8:	d1fa      	bne.n	80202e0 <strcat+0x4>
 80202ea:	3b01      	subs	r3, #1
 80202ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80202f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80202f4:	2a00      	cmp	r2, #0
 80202f6:	d1f9      	bne.n	80202ec <strcat+0x10>
 80202f8:	bd10      	pop	{r4, pc}

080202fa <strchr>:
 80202fa:	b2c9      	uxtb	r1, r1
 80202fc:	4603      	mov	r3, r0
 80202fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020302:	b11a      	cbz	r2, 802030c <strchr+0x12>
 8020304:	4291      	cmp	r1, r2
 8020306:	d1f9      	bne.n	80202fc <strchr+0x2>
 8020308:	4618      	mov	r0, r3
 802030a:	4770      	bx	lr
 802030c:	2900      	cmp	r1, #0
 802030e:	bf0c      	ite	eq
 8020310:	4618      	moveq	r0, r3
 8020312:	2000      	movne	r0, #0
 8020314:	4770      	bx	lr

08020316 <strcpy>:
 8020316:	4603      	mov	r3, r0
 8020318:	f811 2b01 	ldrb.w	r2, [r1], #1
 802031c:	f803 2b01 	strb.w	r2, [r3], #1
 8020320:	2a00      	cmp	r2, #0
 8020322:	d1f9      	bne.n	8020318 <strcpy+0x2>
 8020324:	4770      	bx	lr
	...

08020328 <_svfprintf_r>:
 8020328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802032c:	b0bd      	sub	sp, #244	; 0xf4
 802032e:	468a      	mov	sl, r1
 8020330:	4615      	mov	r5, r2
 8020332:	461f      	mov	r7, r3
 8020334:	4683      	mov	fp, r0
 8020336:	f001 fe25 	bl	8021f84 <_localeconv_r>
 802033a:	6803      	ldr	r3, [r0, #0]
 802033c:	930d      	str	r3, [sp, #52]	; 0x34
 802033e:	4618      	mov	r0, r3
 8020340:	f7df ffae 	bl	80002a0 <strlen>
 8020344:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8020348:	9008      	str	r0, [sp, #32]
 802034a:	061b      	lsls	r3, r3, #24
 802034c:	d518      	bpl.n	8020380 <_svfprintf_r+0x58>
 802034e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8020352:	b9ab      	cbnz	r3, 8020380 <_svfprintf_r+0x58>
 8020354:	2140      	movs	r1, #64	; 0x40
 8020356:	4658      	mov	r0, fp
 8020358:	f001 fe2a 	bl	8021fb0 <_malloc_r>
 802035c:	f8ca 0000 	str.w	r0, [sl]
 8020360:	f8ca 0010 	str.w	r0, [sl, #16]
 8020364:	b948      	cbnz	r0, 802037a <_svfprintf_r+0x52>
 8020366:	230c      	movs	r3, #12
 8020368:	f8cb 3000 	str.w	r3, [fp]
 802036c:	f04f 33ff 	mov.w	r3, #4294967295
 8020370:	9309      	str	r3, [sp, #36]	; 0x24
 8020372:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020374:	b03d      	add	sp, #244	; 0xf4
 8020376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802037a:	2340      	movs	r3, #64	; 0x40
 802037c:	f8ca 3014 	str.w	r3, [sl, #20]
 8020380:	ed9f 7b99 	vldr	d7, [pc, #612]	; 80205e8 <_svfprintf_r+0x2c0>
 8020384:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020388:	2300      	movs	r3, #0
 802038a:	ac2c      	add	r4, sp, #176	; 0xb0
 802038c:	941f      	str	r4, [sp, #124]	; 0x7c
 802038e:	9321      	str	r3, [sp, #132]	; 0x84
 8020390:	9320      	str	r3, [sp, #128]	; 0x80
 8020392:	9505      	str	r5, [sp, #20]
 8020394:	9303      	str	r3, [sp, #12]
 8020396:	9311      	str	r3, [sp, #68]	; 0x44
 8020398:	9310      	str	r3, [sp, #64]	; 0x40
 802039a:	9309      	str	r3, [sp, #36]	; 0x24
 802039c:	9d05      	ldr	r5, [sp, #20]
 802039e:	462b      	mov	r3, r5
 80203a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80203a4:	b112      	cbz	r2, 80203ac <_svfprintf_r+0x84>
 80203a6:	2a25      	cmp	r2, #37	; 0x25
 80203a8:	f040 8083 	bne.w	80204b2 <_svfprintf_r+0x18a>
 80203ac:	9b05      	ldr	r3, [sp, #20]
 80203ae:	1aee      	subs	r6, r5, r3
 80203b0:	d00d      	beq.n	80203ce <_svfprintf_r+0xa6>
 80203b2:	e884 0048 	stmia.w	r4, {r3, r6}
 80203b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80203b8:	4433      	add	r3, r6
 80203ba:	9321      	str	r3, [sp, #132]	; 0x84
 80203bc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80203be:	3301      	adds	r3, #1
 80203c0:	2b07      	cmp	r3, #7
 80203c2:	9320      	str	r3, [sp, #128]	; 0x80
 80203c4:	dc77      	bgt.n	80204b6 <_svfprintf_r+0x18e>
 80203c6:	3408      	adds	r4, #8
 80203c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80203ca:	4433      	add	r3, r6
 80203cc:	9309      	str	r3, [sp, #36]	; 0x24
 80203ce:	782b      	ldrb	r3, [r5, #0]
 80203d0:	2b00      	cmp	r3, #0
 80203d2:	f000 8729 	beq.w	8021228 <_svfprintf_r+0xf00>
 80203d6:	2300      	movs	r3, #0
 80203d8:	1c69      	adds	r1, r5, #1
 80203da:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80203de:	461a      	mov	r2, r3
 80203e0:	f04f 39ff 	mov.w	r9, #4294967295
 80203e4:	930a      	str	r3, [sp, #40]	; 0x28
 80203e6:	461d      	mov	r5, r3
 80203e8:	200a      	movs	r0, #10
 80203ea:	1c4e      	adds	r6, r1, #1
 80203ec:	7809      	ldrb	r1, [r1, #0]
 80203ee:	9605      	str	r6, [sp, #20]
 80203f0:	9102      	str	r1, [sp, #8]
 80203f2:	9902      	ldr	r1, [sp, #8]
 80203f4:	3920      	subs	r1, #32
 80203f6:	2958      	cmp	r1, #88	; 0x58
 80203f8:	f200 8418 	bhi.w	8020c2c <_svfprintf_r+0x904>
 80203fc:	e8df f011 	tbh	[pc, r1, lsl #1]
 8020400:	041600a6 	.word	0x041600a6
 8020404:	00ab0416 	.word	0x00ab0416
 8020408:	04160416 	.word	0x04160416
 802040c:	04160416 	.word	0x04160416
 8020410:	04160416 	.word	0x04160416
 8020414:	006500ae 	.word	0x006500ae
 8020418:	00b70416 	.word	0x00b70416
 802041c:	041600ba 	.word	0x041600ba
 8020420:	00da00d7 	.word	0x00da00d7
 8020424:	00da00da 	.word	0x00da00da
 8020428:	00da00da 	.word	0x00da00da
 802042c:	00da00da 	.word	0x00da00da
 8020430:	00da00da 	.word	0x00da00da
 8020434:	04160416 	.word	0x04160416
 8020438:	04160416 	.word	0x04160416
 802043c:	04160416 	.word	0x04160416
 8020440:	04160416 	.word	0x04160416
 8020444:	04160416 	.word	0x04160416
 8020448:	012b0115 	.word	0x012b0115
 802044c:	012b0416 	.word	0x012b0416
 8020450:	04160416 	.word	0x04160416
 8020454:	04160416 	.word	0x04160416
 8020458:	041600ed 	.word	0x041600ed
 802045c:	03400416 	.word	0x03400416
 8020460:	04160416 	.word	0x04160416
 8020464:	04160416 	.word	0x04160416
 8020468:	03a80416 	.word	0x03a80416
 802046c:	04160416 	.word	0x04160416
 8020470:	04160086 	.word	0x04160086
 8020474:	04160416 	.word	0x04160416
 8020478:	04160416 	.word	0x04160416
 802047c:	04160416 	.word	0x04160416
 8020480:	04160416 	.word	0x04160416
 8020484:	01070416 	.word	0x01070416
 8020488:	012b006b 	.word	0x012b006b
 802048c:	012b012b 	.word	0x012b012b
 8020490:	006b00f0 	.word	0x006b00f0
 8020494:	04160416 	.word	0x04160416
 8020498:	041600fa 	.word	0x041600fa
 802049c:	03420322 	.word	0x03420322
 80204a0:	01010376 	.word	0x01010376
 80204a4:	03870416 	.word	0x03870416
 80204a8:	03aa0416 	.word	0x03aa0416
 80204ac:	04160416 	.word	0x04160416
 80204b0:	03c2      	.short	0x03c2
 80204b2:	461d      	mov	r5, r3
 80204b4:	e773      	b.n	802039e <_svfprintf_r+0x76>
 80204b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80204b8:	4651      	mov	r1, sl
 80204ba:	4658      	mov	r0, fp
 80204bc:	f002 fa72 	bl	80229a4 <__ssprint_r>
 80204c0:	2800      	cmp	r0, #0
 80204c2:	f040 8692 	bne.w	80211ea <_svfprintf_r+0xec2>
 80204c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80204c8:	e77e      	b.n	80203c8 <_svfprintf_r+0xa0>
 80204ca:	2301      	movs	r3, #1
 80204cc:	222b      	movs	r2, #43	; 0x2b
 80204ce:	9905      	ldr	r1, [sp, #20]
 80204d0:	e78b      	b.n	80203ea <_svfprintf_r+0xc2>
 80204d2:	460f      	mov	r7, r1
 80204d4:	e7fb      	b.n	80204ce <_svfprintf_r+0x1a6>
 80204d6:	b10b      	cbz	r3, 80204dc <_svfprintf_r+0x1b4>
 80204d8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80204dc:	06ae      	lsls	r6, r5, #26
 80204de:	f140 80aa 	bpl.w	8020636 <_svfprintf_r+0x30e>
 80204e2:	3707      	adds	r7, #7
 80204e4:	f027 0707 	bic.w	r7, r7, #7
 80204e8:	f107 0308 	add.w	r3, r7, #8
 80204ec:	e9d7 6700 	ldrd	r6, r7, [r7]
 80204f0:	9304      	str	r3, [sp, #16]
 80204f2:	2e00      	cmp	r6, #0
 80204f4:	f177 0300 	sbcs.w	r3, r7, #0
 80204f8:	da06      	bge.n	8020508 <_svfprintf_r+0x1e0>
 80204fa:	4276      	negs	r6, r6
 80204fc:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8020500:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8020504:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8020508:	2301      	movs	r3, #1
 802050a:	e2ca      	b.n	8020aa2 <_svfprintf_r+0x77a>
 802050c:	b10b      	cbz	r3, 8020512 <_svfprintf_r+0x1ea>
 802050e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020512:	4b37      	ldr	r3, [pc, #220]	; (80205f0 <_svfprintf_r+0x2c8>)
 8020514:	9311      	str	r3, [sp, #68]	; 0x44
 8020516:	06ab      	lsls	r3, r5, #26
 8020518:	f140 8339 	bpl.w	8020b8e <_svfprintf_r+0x866>
 802051c:	3707      	adds	r7, #7
 802051e:	f027 0707 	bic.w	r7, r7, #7
 8020522:	f107 0308 	add.w	r3, r7, #8
 8020526:	e9d7 6700 	ldrd	r6, r7, [r7]
 802052a:	9304      	str	r3, [sp, #16]
 802052c:	07e8      	lsls	r0, r5, #31
 802052e:	d50b      	bpl.n	8020548 <_svfprintf_r+0x220>
 8020530:	ea56 0307 	orrs.w	r3, r6, r7
 8020534:	d008      	beq.n	8020548 <_svfprintf_r+0x220>
 8020536:	2330      	movs	r3, #48	; 0x30
 8020538:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 802053c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8020540:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8020544:	f045 0502 	orr.w	r5, r5, #2
 8020548:	2302      	movs	r3, #2
 802054a:	e2a7      	b.n	8020a9c <_svfprintf_r+0x774>
 802054c:	2a00      	cmp	r2, #0
 802054e:	d1be      	bne.n	80204ce <_svfprintf_r+0x1a6>
 8020550:	2301      	movs	r3, #1
 8020552:	2220      	movs	r2, #32
 8020554:	e7bb      	b.n	80204ce <_svfprintf_r+0x1a6>
 8020556:	f045 0501 	orr.w	r5, r5, #1
 802055a:	e7b8      	b.n	80204ce <_svfprintf_r+0x1a6>
 802055c:	683e      	ldr	r6, [r7, #0]
 802055e:	960a      	str	r6, [sp, #40]	; 0x28
 8020560:	2e00      	cmp	r6, #0
 8020562:	f107 0104 	add.w	r1, r7, #4
 8020566:	dab4      	bge.n	80204d2 <_svfprintf_r+0x1aa>
 8020568:	4276      	negs	r6, r6
 802056a:	960a      	str	r6, [sp, #40]	; 0x28
 802056c:	460f      	mov	r7, r1
 802056e:	f045 0504 	orr.w	r5, r5, #4
 8020572:	e7ac      	b.n	80204ce <_svfprintf_r+0x1a6>
 8020574:	9905      	ldr	r1, [sp, #20]
 8020576:	1c4e      	adds	r6, r1, #1
 8020578:	7809      	ldrb	r1, [r1, #0]
 802057a:	9102      	str	r1, [sp, #8]
 802057c:	292a      	cmp	r1, #42	; 0x2a
 802057e:	d010      	beq.n	80205a2 <_svfprintf_r+0x27a>
 8020580:	f04f 0900 	mov.w	r9, #0
 8020584:	9605      	str	r6, [sp, #20]
 8020586:	9902      	ldr	r1, [sp, #8]
 8020588:	3930      	subs	r1, #48	; 0x30
 802058a:	2909      	cmp	r1, #9
 802058c:	f63f af31 	bhi.w	80203f2 <_svfprintf_r+0xca>
 8020590:	fb00 1909 	mla	r9, r0, r9, r1
 8020594:	9905      	ldr	r1, [sp, #20]
 8020596:	460e      	mov	r6, r1
 8020598:	f816 1b01 	ldrb.w	r1, [r6], #1
 802059c:	9102      	str	r1, [sp, #8]
 802059e:	9605      	str	r6, [sp, #20]
 80205a0:	e7f1      	b.n	8020586 <_svfprintf_r+0x25e>
 80205a2:	6839      	ldr	r1, [r7, #0]
 80205a4:	9605      	str	r6, [sp, #20]
 80205a6:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 80205aa:	3704      	adds	r7, #4
 80205ac:	e78f      	b.n	80204ce <_svfprintf_r+0x1a6>
 80205ae:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80205b2:	e78c      	b.n	80204ce <_svfprintf_r+0x1a6>
 80205b4:	2100      	movs	r1, #0
 80205b6:	910a      	str	r1, [sp, #40]	; 0x28
 80205b8:	9902      	ldr	r1, [sp, #8]
 80205ba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80205bc:	3930      	subs	r1, #48	; 0x30
 80205be:	fb00 1106 	mla	r1, r0, r6, r1
 80205c2:	910a      	str	r1, [sp, #40]	; 0x28
 80205c4:	9905      	ldr	r1, [sp, #20]
 80205c6:	460e      	mov	r6, r1
 80205c8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80205cc:	9102      	str	r1, [sp, #8]
 80205ce:	9902      	ldr	r1, [sp, #8]
 80205d0:	9605      	str	r6, [sp, #20]
 80205d2:	3930      	subs	r1, #48	; 0x30
 80205d4:	2909      	cmp	r1, #9
 80205d6:	d9ef      	bls.n	80205b8 <_svfprintf_r+0x290>
 80205d8:	e70b      	b.n	80203f2 <_svfprintf_r+0xca>
 80205da:	f045 0508 	orr.w	r5, r5, #8
 80205de:	e776      	b.n	80204ce <_svfprintf_r+0x1a6>
 80205e0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80205e4:	e773      	b.n	80204ce <_svfprintf_r+0x1a6>
 80205e6:	bf00      	nop
	...
 80205f0:	08031ebc 	.word	0x08031ebc
 80205f4:	9905      	ldr	r1, [sp, #20]
 80205f6:	7809      	ldrb	r1, [r1, #0]
 80205f8:	296c      	cmp	r1, #108	; 0x6c
 80205fa:	d105      	bne.n	8020608 <_svfprintf_r+0x2e0>
 80205fc:	9905      	ldr	r1, [sp, #20]
 80205fe:	3101      	adds	r1, #1
 8020600:	9105      	str	r1, [sp, #20]
 8020602:	f045 0520 	orr.w	r5, r5, #32
 8020606:	e762      	b.n	80204ce <_svfprintf_r+0x1a6>
 8020608:	f045 0510 	orr.w	r5, r5, #16
 802060c:	e75f      	b.n	80204ce <_svfprintf_r+0x1a6>
 802060e:	1d3b      	adds	r3, r7, #4
 8020610:	9304      	str	r3, [sp, #16]
 8020612:	2600      	movs	r6, #0
 8020614:	683b      	ldr	r3, [r7, #0]
 8020616:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 802061a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 802061e:	f04f 0901 	mov.w	r9, #1
 8020622:	4637      	mov	r7, r6
 8020624:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8020628:	e11b      	b.n	8020862 <_svfprintf_r+0x53a>
 802062a:	b10b      	cbz	r3, 8020630 <_svfprintf_r+0x308>
 802062c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020630:	f045 0510 	orr.w	r5, r5, #16
 8020634:	e752      	b.n	80204dc <_svfprintf_r+0x1b4>
 8020636:	f015 0f10 	tst.w	r5, #16
 802063a:	f107 0304 	add.w	r3, r7, #4
 802063e:	d003      	beq.n	8020648 <_svfprintf_r+0x320>
 8020640:	683e      	ldr	r6, [r7, #0]
 8020642:	9304      	str	r3, [sp, #16]
 8020644:	17f7      	asrs	r7, r6, #31
 8020646:	e754      	b.n	80204f2 <_svfprintf_r+0x1ca>
 8020648:	683e      	ldr	r6, [r7, #0]
 802064a:	9304      	str	r3, [sp, #16]
 802064c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8020650:	bf18      	it	ne
 8020652:	b236      	sxthne	r6, r6
 8020654:	e7f6      	b.n	8020644 <_svfprintf_r+0x31c>
 8020656:	b10b      	cbz	r3, 802065c <_svfprintf_r+0x334>
 8020658:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 802065c:	3707      	adds	r7, #7
 802065e:	f027 0707 	bic.w	r7, r7, #7
 8020662:	f107 0308 	add.w	r3, r7, #8
 8020666:	9304      	str	r3, [sp, #16]
 8020668:	ed97 7b00 	vldr	d7, [r7]
 802066c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020670:	9b06      	ldr	r3, [sp, #24]
 8020672:	9312      	str	r3, [sp, #72]	; 0x48
 8020674:	9b07      	ldr	r3, [sp, #28]
 8020676:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802067a:	9313      	str	r3, [sp, #76]	; 0x4c
 802067c:	f04f 32ff 	mov.w	r2, #4294967295
 8020680:	4b4a      	ldr	r3, [pc, #296]	; (80207ac <_svfprintf_r+0x484>)
 8020682:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8020686:	f7e0 fa65 	bl	8000b54 <__aeabi_dcmpun>
 802068a:	2800      	cmp	r0, #0
 802068c:	f040 85d5 	bne.w	802123a <_svfprintf_r+0xf12>
 8020690:	f04f 32ff 	mov.w	r2, #4294967295
 8020694:	4b45      	ldr	r3, [pc, #276]	; (80207ac <_svfprintf_r+0x484>)
 8020696:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 802069a:	f7e0 fa3d 	bl	8000b18 <__aeabi_dcmple>
 802069e:	2800      	cmp	r0, #0
 80206a0:	f040 85cb 	bne.w	802123a <_svfprintf_r+0xf12>
 80206a4:	2200      	movs	r2, #0
 80206a6:	2300      	movs	r3, #0
 80206a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80206ac:	f7e0 fa2a 	bl	8000b04 <__aeabi_dcmplt>
 80206b0:	b110      	cbz	r0, 80206b8 <_svfprintf_r+0x390>
 80206b2:	232d      	movs	r3, #45	; 0x2d
 80206b4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80206b8:	4b3d      	ldr	r3, [pc, #244]	; (80207b0 <_svfprintf_r+0x488>)
 80206ba:	4a3e      	ldr	r2, [pc, #248]	; (80207b4 <_svfprintf_r+0x48c>)
 80206bc:	9902      	ldr	r1, [sp, #8]
 80206be:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80206c2:	2947      	cmp	r1, #71	; 0x47
 80206c4:	bfcc      	ite	gt
 80206c6:	4690      	movgt	r8, r2
 80206c8:	4698      	movle	r8, r3
 80206ca:	f04f 0903 	mov.w	r9, #3
 80206ce:	2600      	movs	r6, #0
 80206d0:	4637      	mov	r7, r6
 80206d2:	e0c6      	b.n	8020862 <_svfprintf_r+0x53a>
 80206d4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80206d8:	d022      	beq.n	8020720 <_svfprintf_r+0x3f8>
 80206da:	9b02      	ldr	r3, [sp, #8]
 80206dc:	f023 0320 	bic.w	r3, r3, #32
 80206e0:	2b47      	cmp	r3, #71	; 0x47
 80206e2:	d104      	bne.n	80206ee <_svfprintf_r+0x3c6>
 80206e4:	f1b9 0f00 	cmp.w	r9, #0
 80206e8:	bf08      	it	eq
 80206ea:	f04f 0901 	moveq.w	r9, #1
 80206ee:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80206f2:	930c      	str	r3, [sp, #48]	; 0x30
 80206f4:	9b07      	ldr	r3, [sp, #28]
 80206f6:	2b00      	cmp	r3, #0
 80206f8:	da15      	bge.n	8020726 <_svfprintf_r+0x3fe>
 80206fa:	9b06      	ldr	r3, [sp, #24]
 80206fc:	930e      	str	r3, [sp, #56]	; 0x38
 80206fe:	9b07      	ldr	r3, [sp, #28]
 8020700:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8020704:	930f      	str	r3, [sp, #60]	; 0x3c
 8020706:	232d      	movs	r3, #45	; 0x2d
 8020708:	930b      	str	r3, [sp, #44]	; 0x2c
 802070a:	9b02      	ldr	r3, [sp, #8]
 802070c:	f023 0720 	bic.w	r7, r3, #32
 8020710:	2f46      	cmp	r7, #70	; 0x46
 8020712:	d00e      	beq.n	8020732 <_svfprintf_r+0x40a>
 8020714:	2f45      	cmp	r7, #69	; 0x45
 8020716:	d146      	bne.n	80207a6 <_svfprintf_r+0x47e>
 8020718:	f109 0601 	add.w	r6, r9, #1
 802071c:	2102      	movs	r1, #2
 802071e:	e00a      	b.n	8020736 <_svfprintf_r+0x40e>
 8020720:	f04f 0906 	mov.w	r9, #6
 8020724:	e7e3      	b.n	80206ee <_svfprintf_r+0x3c6>
 8020726:	ed9d 7b06 	vldr	d7, [sp, #24]
 802072a:	2300      	movs	r3, #0
 802072c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8020730:	e7ea      	b.n	8020708 <_svfprintf_r+0x3e0>
 8020732:	464e      	mov	r6, r9
 8020734:	2103      	movs	r1, #3
 8020736:	ab1d      	add	r3, sp, #116	; 0x74
 8020738:	9301      	str	r3, [sp, #4]
 802073a:	ab1a      	add	r3, sp, #104	; 0x68
 802073c:	9300      	str	r3, [sp, #0]
 802073e:	4632      	mov	r2, r6
 8020740:	ab19      	add	r3, sp, #100	; 0x64
 8020742:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8020746:	4658      	mov	r0, fp
 8020748:	f000 fe4e 	bl	80213e8 <_dtoa_r>
 802074c:	2f47      	cmp	r7, #71	; 0x47
 802074e:	4680      	mov	r8, r0
 8020750:	d102      	bne.n	8020758 <_svfprintf_r+0x430>
 8020752:	07e8      	lsls	r0, r5, #31
 8020754:	f140 857e 	bpl.w	8021254 <_svfprintf_r+0xf2c>
 8020758:	eb08 0306 	add.w	r3, r8, r6
 802075c:	2f46      	cmp	r7, #70	; 0x46
 802075e:	9303      	str	r3, [sp, #12]
 8020760:	d111      	bne.n	8020786 <_svfprintf_r+0x45e>
 8020762:	f898 3000 	ldrb.w	r3, [r8]
 8020766:	2b30      	cmp	r3, #48	; 0x30
 8020768:	d109      	bne.n	802077e <_svfprintf_r+0x456>
 802076a:	2200      	movs	r2, #0
 802076c:	2300      	movs	r3, #0
 802076e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8020772:	f7e0 f9bd 	bl	8000af0 <__aeabi_dcmpeq>
 8020776:	b910      	cbnz	r0, 802077e <_svfprintf_r+0x456>
 8020778:	f1c6 0601 	rsb	r6, r6, #1
 802077c:	9619      	str	r6, [sp, #100]	; 0x64
 802077e:	9a03      	ldr	r2, [sp, #12]
 8020780:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020782:	441a      	add	r2, r3
 8020784:	9203      	str	r2, [sp, #12]
 8020786:	2200      	movs	r2, #0
 8020788:	2300      	movs	r3, #0
 802078a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 802078e:	f7e0 f9af 	bl	8000af0 <__aeabi_dcmpeq>
 8020792:	b988      	cbnz	r0, 80207b8 <_svfprintf_r+0x490>
 8020794:	2230      	movs	r2, #48	; 0x30
 8020796:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8020798:	9903      	ldr	r1, [sp, #12]
 802079a:	4299      	cmp	r1, r3
 802079c:	d90e      	bls.n	80207bc <_svfprintf_r+0x494>
 802079e:	1c59      	adds	r1, r3, #1
 80207a0:	911d      	str	r1, [sp, #116]	; 0x74
 80207a2:	701a      	strb	r2, [r3, #0]
 80207a4:	e7f7      	b.n	8020796 <_svfprintf_r+0x46e>
 80207a6:	464e      	mov	r6, r9
 80207a8:	e7b8      	b.n	802071c <_svfprintf_r+0x3f4>
 80207aa:	bf00      	nop
 80207ac:	7fefffff 	.word	0x7fefffff
 80207b0:	08031eb0 	.word	0x08031eb0
 80207b4:	08031eb4 	.word	0x08031eb4
 80207b8:	9b03      	ldr	r3, [sp, #12]
 80207ba:	931d      	str	r3, [sp, #116]	; 0x74
 80207bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80207be:	2f47      	cmp	r7, #71	; 0x47
 80207c0:	eba3 0308 	sub.w	r3, r3, r8
 80207c4:	9303      	str	r3, [sp, #12]
 80207c6:	f040 80fa 	bne.w	80209be <_svfprintf_r+0x696>
 80207ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80207cc:	1cd9      	adds	r1, r3, #3
 80207ce:	db02      	blt.n	80207d6 <_svfprintf_r+0x4ae>
 80207d0:	4599      	cmp	r9, r3
 80207d2:	f280 8120 	bge.w	8020a16 <_svfprintf_r+0x6ee>
 80207d6:	9b02      	ldr	r3, [sp, #8]
 80207d8:	3b02      	subs	r3, #2
 80207da:	9302      	str	r3, [sp, #8]
 80207dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80207de:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80207e2:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 80207e6:	1e53      	subs	r3, r2, #1
 80207e8:	2b00      	cmp	r3, #0
 80207ea:	9319      	str	r3, [sp, #100]	; 0x64
 80207ec:	bfb6      	itet	lt
 80207ee:	f1c2 0301 	rsblt	r3, r2, #1
 80207f2:	222b      	movge	r2, #43	; 0x2b
 80207f4:	222d      	movlt	r2, #45	; 0x2d
 80207f6:	2b09      	cmp	r3, #9
 80207f8:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80207fc:	f340 80fb 	ble.w	80209f6 <_svfprintf_r+0x6ce>
 8020800:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8020804:	260a      	movs	r6, #10
 8020806:	fb93 f0f6 	sdiv	r0, r3, r6
 802080a:	fb06 3310 	mls	r3, r6, r0, r3
 802080e:	3330      	adds	r3, #48	; 0x30
 8020810:	2809      	cmp	r0, #9
 8020812:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020816:	f102 31ff 	add.w	r1, r2, #4294967295
 802081a:	4603      	mov	r3, r0
 802081c:	f300 80e4 	bgt.w	80209e8 <_svfprintf_r+0x6c0>
 8020820:	3330      	adds	r3, #48	; 0x30
 8020822:	f801 3c01 	strb.w	r3, [r1, #-1]
 8020826:	3a02      	subs	r2, #2
 8020828:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 802082c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8020830:	4282      	cmp	r2, r0
 8020832:	4619      	mov	r1, r3
 8020834:	f0c0 80da 	bcc.w	80209ec <_svfprintf_r+0x6c4>
 8020838:	9a03      	ldr	r2, [sp, #12]
 802083a:	ab1b      	add	r3, sp, #108	; 0x6c
 802083c:	1acb      	subs	r3, r1, r3
 802083e:	2a01      	cmp	r2, #1
 8020840:	9310      	str	r3, [sp, #64]	; 0x40
 8020842:	eb03 0902 	add.w	r9, r3, r2
 8020846:	dc02      	bgt.n	802084e <_svfprintf_r+0x526>
 8020848:	f015 0701 	ands.w	r7, r5, #1
 802084c:	d002      	beq.n	8020854 <_svfprintf_r+0x52c>
 802084e:	9b08      	ldr	r3, [sp, #32]
 8020850:	2700      	movs	r7, #0
 8020852:	4499      	add	r9, r3
 8020854:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020856:	b113      	cbz	r3, 802085e <_svfprintf_r+0x536>
 8020858:	232d      	movs	r3, #45	; 0x2d
 802085a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 802085e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020860:	2600      	movs	r6, #0
 8020862:	454e      	cmp	r6, r9
 8020864:	4633      	mov	r3, r6
 8020866:	bfb8      	it	lt
 8020868:	464b      	movlt	r3, r9
 802086a:	930b      	str	r3, [sp, #44]	; 0x2c
 802086c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8020870:	b113      	cbz	r3, 8020878 <_svfprintf_r+0x550>
 8020872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020874:	3301      	adds	r3, #1
 8020876:	930b      	str	r3, [sp, #44]	; 0x2c
 8020878:	f015 0302 	ands.w	r3, r5, #2
 802087c:	9314      	str	r3, [sp, #80]	; 0x50
 802087e:	bf1e      	ittt	ne
 8020880:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8020882:	3302      	addne	r3, #2
 8020884:	930b      	strne	r3, [sp, #44]	; 0x2c
 8020886:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 802088a:	9315      	str	r3, [sp, #84]	; 0x54
 802088c:	d118      	bne.n	80208c0 <_svfprintf_r+0x598>
 802088e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020890:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020892:	1a9b      	subs	r3, r3, r2
 8020894:	2b00      	cmp	r3, #0
 8020896:	930c      	str	r3, [sp, #48]	; 0x30
 8020898:	dd12      	ble.n	80208c0 <_svfprintf_r+0x598>
 802089a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802089c:	2b10      	cmp	r3, #16
 802089e:	4ba9      	ldr	r3, [pc, #676]	; (8020b44 <_svfprintf_r+0x81c>)
 80208a0:	6023      	str	r3, [r4, #0]
 80208a2:	f300 81d5 	bgt.w	8020c50 <_svfprintf_r+0x928>
 80208a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80208a8:	6063      	str	r3, [r4, #4]
 80208aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80208ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80208ae:	4413      	add	r3, r2
 80208b0:	9321      	str	r3, [sp, #132]	; 0x84
 80208b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80208b4:	3301      	adds	r3, #1
 80208b6:	2b07      	cmp	r3, #7
 80208b8:	9320      	str	r3, [sp, #128]	; 0x80
 80208ba:	f300 81e2 	bgt.w	8020c82 <_svfprintf_r+0x95a>
 80208be:	3408      	adds	r4, #8
 80208c0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80208c4:	b173      	cbz	r3, 80208e4 <_svfprintf_r+0x5bc>
 80208c6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80208ca:	6023      	str	r3, [r4, #0]
 80208cc:	2301      	movs	r3, #1
 80208ce:	6063      	str	r3, [r4, #4]
 80208d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80208d2:	3301      	adds	r3, #1
 80208d4:	9321      	str	r3, [sp, #132]	; 0x84
 80208d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80208d8:	3301      	adds	r3, #1
 80208da:	2b07      	cmp	r3, #7
 80208dc:	9320      	str	r3, [sp, #128]	; 0x80
 80208de:	f300 81da 	bgt.w	8020c96 <_svfprintf_r+0x96e>
 80208e2:	3408      	adds	r4, #8
 80208e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80208e6:	b16b      	cbz	r3, 8020904 <_svfprintf_r+0x5dc>
 80208e8:	ab18      	add	r3, sp, #96	; 0x60
 80208ea:	6023      	str	r3, [r4, #0]
 80208ec:	2302      	movs	r3, #2
 80208ee:	6063      	str	r3, [r4, #4]
 80208f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80208f2:	3302      	adds	r3, #2
 80208f4:	9321      	str	r3, [sp, #132]	; 0x84
 80208f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80208f8:	3301      	adds	r3, #1
 80208fa:	2b07      	cmp	r3, #7
 80208fc:	9320      	str	r3, [sp, #128]	; 0x80
 80208fe:	f300 81d4 	bgt.w	8020caa <_svfprintf_r+0x982>
 8020902:	3408      	adds	r4, #8
 8020904:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020906:	2b80      	cmp	r3, #128	; 0x80
 8020908:	d114      	bne.n	8020934 <_svfprintf_r+0x60c>
 802090a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802090c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802090e:	1a9b      	subs	r3, r3, r2
 8020910:	2b00      	cmp	r3, #0
 8020912:	dd0f      	ble.n	8020934 <_svfprintf_r+0x60c>
 8020914:	4a8c      	ldr	r2, [pc, #560]	; (8020b48 <_svfprintf_r+0x820>)
 8020916:	6022      	str	r2, [r4, #0]
 8020918:	2b10      	cmp	r3, #16
 802091a:	f300 81d0 	bgt.w	8020cbe <_svfprintf_r+0x996>
 802091e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020920:	6063      	str	r3, [r4, #4]
 8020922:	4413      	add	r3, r2
 8020924:	9321      	str	r3, [sp, #132]	; 0x84
 8020926:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020928:	3301      	adds	r3, #1
 802092a:	2b07      	cmp	r3, #7
 802092c:	9320      	str	r3, [sp, #128]	; 0x80
 802092e:	f300 81df 	bgt.w	8020cf0 <_svfprintf_r+0x9c8>
 8020932:	3408      	adds	r4, #8
 8020934:	eba6 0609 	sub.w	r6, r6, r9
 8020938:	2e00      	cmp	r6, #0
 802093a:	dd0f      	ble.n	802095c <_svfprintf_r+0x634>
 802093c:	4b82      	ldr	r3, [pc, #520]	; (8020b48 <_svfprintf_r+0x820>)
 802093e:	6023      	str	r3, [r4, #0]
 8020940:	2e10      	cmp	r6, #16
 8020942:	f300 81df 	bgt.w	8020d04 <_svfprintf_r+0x9dc>
 8020946:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020948:	9821      	ldr	r0, [sp, #132]	; 0x84
 802094a:	6066      	str	r6, [r4, #4]
 802094c:	3301      	adds	r3, #1
 802094e:	4406      	add	r6, r0
 8020950:	2b07      	cmp	r3, #7
 8020952:	9621      	str	r6, [sp, #132]	; 0x84
 8020954:	9320      	str	r3, [sp, #128]	; 0x80
 8020956:	f300 81ec 	bgt.w	8020d32 <_svfprintf_r+0xa0a>
 802095a:	3408      	adds	r4, #8
 802095c:	05eb      	lsls	r3, r5, #23
 802095e:	f100 81f2 	bmi.w	8020d46 <_svfprintf_r+0xa1e>
 8020962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020964:	e884 0300 	stmia.w	r4, {r8, r9}
 8020968:	444b      	add	r3, r9
 802096a:	9321      	str	r3, [sp, #132]	; 0x84
 802096c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802096e:	3301      	adds	r3, #1
 8020970:	2b07      	cmp	r3, #7
 8020972:	9320      	str	r3, [sp, #128]	; 0x80
 8020974:	f340 8419 	ble.w	80211aa <_svfprintf_r+0xe82>
 8020978:	aa1f      	add	r2, sp, #124	; 0x7c
 802097a:	4651      	mov	r1, sl
 802097c:	4658      	mov	r0, fp
 802097e:	f002 f811 	bl	80229a4 <__ssprint_r>
 8020982:	2800      	cmp	r0, #0
 8020984:	f040 8431 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020988:	ac2c      	add	r4, sp, #176	; 0xb0
 802098a:	076b      	lsls	r3, r5, #29
 802098c:	f100 8410 	bmi.w	80211b0 <_svfprintf_r+0xe88>
 8020990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020994:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8020996:	428a      	cmp	r2, r1
 8020998:	bfac      	ite	ge
 802099a:	189b      	addge	r3, r3, r2
 802099c:	185b      	addlt	r3, r3, r1
 802099e:	9309      	str	r3, [sp, #36]	; 0x24
 80209a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80209a2:	b13b      	cbz	r3, 80209b4 <_svfprintf_r+0x68c>
 80209a4:	aa1f      	add	r2, sp, #124	; 0x7c
 80209a6:	4651      	mov	r1, sl
 80209a8:	4658      	mov	r0, fp
 80209aa:	f001 fffb 	bl	80229a4 <__ssprint_r>
 80209ae:	2800      	cmp	r0, #0
 80209b0:	f040 841b 	bne.w	80211ea <_svfprintf_r+0xec2>
 80209b4:	2300      	movs	r3, #0
 80209b6:	9320      	str	r3, [sp, #128]	; 0x80
 80209b8:	9f04      	ldr	r7, [sp, #16]
 80209ba:	ac2c      	add	r4, sp, #176	; 0xb0
 80209bc:	e4ee      	b.n	802039c <_svfprintf_r+0x74>
 80209be:	9b02      	ldr	r3, [sp, #8]
 80209c0:	2b65      	cmp	r3, #101	; 0x65
 80209c2:	f77f af0b 	ble.w	80207dc <_svfprintf_r+0x4b4>
 80209c6:	9b02      	ldr	r3, [sp, #8]
 80209c8:	2b66      	cmp	r3, #102	; 0x66
 80209ca:	d124      	bne.n	8020a16 <_svfprintf_r+0x6ee>
 80209cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80209ce:	2b00      	cmp	r3, #0
 80209d0:	dd19      	ble.n	8020a06 <_svfprintf_r+0x6de>
 80209d2:	f1b9 0f00 	cmp.w	r9, #0
 80209d6:	d101      	bne.n	80209dc <_svfprintf_r+0x6b4>
 80209d8:	07ea      	lsls	r2, r5, #31
 80209da:	d502      	bpl.n	80209e2 <_svfprintf_r+0x6ba>
 80209dc:	9a08      	ldr	r2, [sp, #32]
 80209de:	4413      	add	r3, r2
 80209e0:	444b      	add	r3, r9
 80209e2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80209e4:	4699      	mov	r9, r3
 80209e6:	e735      	b.n	8020854 <_svfprintf_r+0x52c>
 80209e8:	460a      	mov	r2, r1
 80209ea:	e70c      	b.n	8020806 <_svfprintf_r+0x4de>
 80209ec:	f812 1b01 	ldrb.w	r1, [r2], #1
 80209f0:	f803 1b01 	strb.w	r1, [r3], #1
 80209f4:	e71c      	b.n	8020830 <_svfprintf_r+0x508>
 80209f6:	2230      	movs	r2, #48	; 0x30
 80209f8:	4413      	add	r3, r2
 80209fa:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80209fe:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8020a02:	a91c      	add	r1, sp, #112	; 0x70
 8020a04:	e718      	b.n	8020838 <_svfprintf_r+0x510>
 8020a06:	f1b9 0f00 	cmp.w	r9, #0
 8020a0a:	d101      	bne.n	8020a10 <_svfprintf_r+0x6e8>
 8020a0c:	07eb      	lsls	r3, r5, #31
 8020a0e:	d515      	bpl.n	8020a3c <_svfprintf_r+0x714>
 8020a10:	9b08      	ldr	r3, [sp, #32]
 8020a12:	3301      	adds	r3, #1
 8020a14:	e7e4      	b.n	80209e0 <_svfprintf_r+0x6b8>
 8020a16:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8020a18:	9b03      	ldr	r3, [sp, #12]
 8020a1a:	429a      	cmp	r2, r3
 8020a1c:	db06      	blt.n	8020a2c <_svfprintf_r+0x704>
 8020a1e:	07ef      	lsls	r7, r5, #31
 8020a20:	d50e      	bpl.n	8020a40 <_svfprintf_r+0x718>
 8020a22:	9b08      	ldr	r3, [sp, #32]
 8020a24:	4413      	add	r3, r2
 8020a26:	2267      	movs	r2, #103	; 0x67
 8020a28:	9202      	str	r2, [sp, #8]
 8020a2a:	e7da      	b.n	80209e2 <_svfprintf_r+0x6ba>
 8020a2c:	9b03      	ldr	r3, [sp, #12]
 8020a2e:	9908      	ldr	r1, [sp, #32]
 8020a30:	2a00      	cmp	r2, #0
 8020a32:	440b      	add	r3, r1
 8020a34:	dcf7      	bgt.n	8020a26 <_svfprintf_r+0x6fe>
 8020a36:	f1c2 0201 	rsb	r2, r2, #1
 8020a3a:	e7f3      	b.n	8020a24 <_svfprintf_r+0x6fc>
 8020a3c:	2301      	movs	r3, #1
 8020a3e:	e7d0      	b.n	80209e2 <_svfprintf_r+0x6ba>
 8020a40:	4613      	mov	r3, r2
 8020a42:	e7f0      	b.n	8020a26 <_svfprintf_r+0x6fe>
 8020a44:	b10b      	cbz	r3, 8020a4a <_svfprintf_r+0x722>
 8020a46:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020a4a:	f015 0f20 	tst.w	r5, #32
 8020a4e:	f107 0304 	add.w	r3, r7, #4
 8020a52:	d008      	beq.n	8020a66 <_svfprintf_r+0x73e>
 8020a54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020a56:	683a      	ldr	r2, [r7, #0]
 8020a58:	17ce      	asrs	r6, r1, #31
 8020a5a:	4608      	mov	r0, r1
 8020a5c:	4631      	mov	r1, r6
 8020a5e:	e9c2 0100 	strd	r0, r1, [r2]
 8020a62:	461f      	mov	r7, r3
 8020a64:	e49a      	b.n	802039c <_svfprintf_r+0x74>
 8020a66:	06ee      	lsls	r6, r5, #27
 8020a68:	d503      	bpl.n	8020a72 <_svfprintf_r+0x74a>
 8020a6a:	683a      	ldr	r2, [r7, #0]
 8020a6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020a6e:	6011      	str	r1, [r2, #0]
 8020a70:	e7f7      	b.n	8020a62 <_svfprintf_r+0x73a>
 8020a72:	0668      	lsls	r0, r5, #25
 8020a74:	d5f9      	bpl.n	8020a6a <_svfprintf_r+0x742>
 8020a76:	683a      	ldr	r2, [r7, #0]
 8020a78:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8020a7c:	8011      	strh	r1, [r2, #0]
 8020a7e:	e7f0      	b.n	8020a62 <_svfprintf_r+0x73a>
 8020a80:	f045 0510 	orr.w	r5, r5, #16
 8020a84:	f015 0320 	ands.w	r3, r5, #32
 8020a88:	d022      	beq.n	8020ad0 <_svfprintf_r+0x7a8>
 8020a8a:	3707      	adds	r7, #7
 8020a8c:	f027 0707 	bic.w	r7, r7, #7
 8020a90:	f107 0308 	add.w	r3, r7, #8
 8020a94:	e9d7 6700 	ldrd	r6, r7, [r7]
 8020a98:	9304      	str	r3, [sp, #16]
 8020a9a:	2300      	movs	r3, #0
 8020a9c:	2200      	movs	r2, #0
 8020a9e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020aa2:	f1b9 3fff 	cmp.w	r9, #4294967295
 8020aa6:	f000 83db 	beq.w	8021260 <_svfprintf_r+0xf38>
 8020aaa:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8020aae:	920b      	str	r2, [sp, #44]	; 0x2c
 8020ab0:	ea56 0207 	orrs.w	r2, r6, r7
 8020ab4:	f040 83d9 	bne.w	802126a <_svfprintf_r+0xf42>
 8020ab8:	f1b9 0f00 	cmp.w	r9, #0
 8020abc:	f000 80aa 	beq.w	8020c14 <_svfprintf_r+0x8ec>
 8020ac0:	2b01      	cmp	r3, #1
 8020ac2:	d076      	beq.n	8020bb2 <_svfprintf_r+0x88a>
 8020ac4:	2b02      	cmp	r3, #2
 8020ac6:	f000 8091 	beq.w	8020bec <_svfprintf_r+0x8c4>
 8020aca:	2600      	movs	r6, #0
 8020acc:	2700      	movs	r7, #0
 8020ace:	e3d2      	b.n	8021276 <_svfprintf_r+0xf4e>
 8020ad0:	1d3a      	adds	r2, r7, #4
 8020ad2:	f015 0110 	ands.w	r1, r5, #16
 8020ad6:	9204      	str	r2, [sp, #16]
 8020ad8:	d002      	beq.n	8020ae0 <_svfprintf_r+0x7b8>
 8020ada:	683e      	ldr	r6, [r7, #0]
 8020adc:	2700      	movs	r7, #0
 8020ade:	e7dd      	b.n	8020a9c <_svfprintf_r+0x774>
 8020ae0:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8020ae4:	d0f9      	beq.n	8020ada <_svfprintf_r+0x7b2>
 8020ae6:	883e      	ldrh	r6, [r7, #0]
 8020ae8:	2700      	movs	r7, #0
 8020aea:	e7d6      	b.n	8020a9a <_svfprintf_r+0x772>
 8020aec:	1d3b      	adds	r3, r7, #4
 8020aee:	9304      	str	r3, [sp, #16]
 8020af0:	2330      	movs	r3, #48	; 0x30
 8020af2:	2278      	movs	r2, #120	; 0x78
 8020af4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8020af8:	4b14      	ldr	r3, [pc, #80]	; (8020b4c <_svfprintf_r+0x824>)
 8020afa:	683e      	ldr	r6, [r7, #0]
 8020afc:	9311      	str	r3, [sp, #68]	; 0x44
 8020afe:	2700      	movs	r7, #0
 8020b00:	f045 0502 	orr.w	r5, r5, #2
 8020b04:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8020b08:	2302      	movs	r3, #2
 8020b0a:	9202      	str	r2, [sp, #8]
 8020b0c:	e7c6      	b.n	8020a9c <_svfprintf_r+0x774>
 8020b0e:	1d3b      	adds	r3, r7, #4
 8020b10:	2600      	movs	r6, #0
 8020b12:	f1b9 3fff 	cmp.w	r9, #4294967295
 8020b16:	9304      	str	r3, [sp, #16]
 8020b18:	f8d7 8000 	ldr.w	r8, [r7]
 8020b1c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8020b20:	d00a      	beq.n	8020b38 <_svfprintf_r+0x810>
 8020b22:	464a      	mov	r2, r9
 8020b24:	4631      	mov	r1, r6
 8020b26:	4640      	mov	r0, r8
 8020b28:	f7df fb6a 	bl	8000200 <memchr>
 8020b2c:	2800      	cmp	r0, #0
 8020b2e:	f000 808d 	beq.w	8020c4c <_svfprintf_r+0x924>
 8020b32:	eba0 0908 	sub.w	r9, r0, r8
 8020b36:	e5cb      	b.n	80206d0 <_svfprintf_r+0x3a8>
 8020b38:	4640      	mov	r0, r8
 8020b3a:	f7df fbb1 	bl	80002a0 <strlen>
 8020b3e:	4681      	mov	r9, r0
 8020b40:	e5c6      	b.n	80206d0 <_svfprintf_r+0x3a8>
 8020b42:	bf00      	nop
 8020b44:	08031ede 	.word	0x08031ede
 8020b48:	08031eee 	.word	0x08031eee
 8020b4c:	08031ecd 	.word	0x08031ecd
 8020b50:	f045 0510 	orr.w	r5, r5, #16
 8020b54:	06a9      	lsls	r1, r5, #26
 8020b56:	d509      	bpl.n	8020b6c <_svfprintf_r+0x844>
 8020b58:	3707      	adds	r7, #7
 8020b5a:	f027 0707 	bic.w	r7, r7, #7
 8020b5e:	f107 0308 	add.w	r3, r7, #8
 8020b62:	e9d7 6700 	ldrd	r6, r7, [r7]
 8020b66:	9304      	str	r3, [sp, #16]
 8020b68:	2301      	movs	r3, #1
 8020b6a:	e797      	b.n	8020a9c <_svfprintf_r+0x774>
 8020b6c:	1d3b      	adds	r3, r7, #4
 8020b6e:	f015 0f10 	tst.w	r5, #16
 8020b72:	9304      	str	r3, [sp, #16]
 8020b74:	d001      	beq.n	8020b7a <_svfprintf_r+0x852>
 8020b76:	683e      	ldr	r6, [r7, #0]
 8020b78:	e002      	b.n	8020b80 <_svfprintf_r+0x858>
 8020b7a:	066a      	lsls	r2, r5, #25
 8020b7c:	d5fb      	bpl.n	8020b76 <_svfprintf_r+0x84e>
 8020b7e:	883e      	ldrh	r6, [r7, #0]
 8020b80:	2700      	movs	r7, #0
 8020b82:	e7f1      	b.n	8020b68 <_svfprintf_r+0x840>
 8020b84:	b10b      	cbz	r3, 8020b8a <_svfprintf_r+0x862>
 8020b86:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020b8a:	4ba3      	ldr	r3, [pc, #652]	; (8020e18 <_svfprintf_r+0xaf0>)
 8020b8c:	e4c2      	b.n	8020514 <_svfprintf_r+0x1ec>
 8020b8e:	1d3b      	adds	r3, r7, #4
 8020b90:	f015 0f10 	tst.w	r5, #16
 8020b94:	9304      	str	r3, [sp, #16]
 8020b96:	d001      	beq.n	8020b9c <_svfprintf_r+0x874>
 8020b98:	683e      	ldr	r6, [r7, #0]
 8020b9a:	e002      	b.n	8020ba2 <_svfprintf_r+0x87a>
 8020b9c:	066e      	lsls	r6, r5, #25
 8020b9e:	d5fb      	bpl.n	8020b98 <_svfprintf_r+0x870>
 8020ba0:	883e      	ldrh	r6, [r7, #0]
 8020ba2:	2700      	movs	r7, #0
 8020ba4:	e4c2      	b.n	802052c <_svfprintf_r+0x204>
 8020ba6:	4643      	mov	r3, r8
 8020ba8:	e366      	b.n	8021278 <_svfprintf_r+0xf50>
 8020baa:	2f00      	cmp	r7, #0
 8020bac:	bf08      	it	eq
 8020bae:	2e0a      	cmpeq	r6, #10
 8020bb0:	d205      	bcs.n	8020bbe <_svfprintf_r+0x896>
 8020bb2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8020bb6:	3630      	adds	r6, #48	; 0x30
 8020bb8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8020bbc:	e377      	b.n	80212ae <_svfprintf_r+0xf86>
 8020bbe:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8020bc2:	4630      	mov	r0, r6
 8020bc4:	4639      	mov	r1, r7
 8020bc6:	220a      	movs	r2, #10
 8020bc8:	2300      	movs	r3, #0
 8020bca:	f7e0 f871 	bl	8000cb0 <__aeabi_uldivmod>
 8020bce:	3230      	adds	r2, #48	; 0x30
 8020bd0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8020bd4:	2300      	movs	r3, #0
 8020bd6:	4630      	mov	r0, r6
 8020bd8:	4639      	mov	r1, r7
 8020bda:	220a      	movs	r2, #10
 8020bdc:	f7e0 f868 	bl	8000cb0 <__aeabi_uldivmod>
 8020be0:	4606      	mov	r6, r0
 8020be2:	460f      	mov	r7, r1
 8020be4:	ea56 0307 	orrs.w	r3, r6, r7
 8020be8:	d1eb      	bne.n	8020bc2 <_svfprintf_r+0x89a>
 8020bea:	e360      	b.n	80212ae <_svfprintf_r+0xf86>
 8020bec:	2600      	movs	r6, #0
 8020bee:	2700      	movs	r7, #0
 8020bf0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8020bf4:	f006 030f 	and.w	r3, r6, #15
 8020bf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020bfa:	5cd3      	ldrb	r3, [r2, r3]
 8020bfc:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8020c00:	0933      	lsrs	r3, r6, #4
 8020c02:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8020c06:	093a      	lsrs	r2, r7, #4
 8020c08:	461e      	mov	r6, r3
 8020c0a:	4617      	mov	r7, r2
 8020c0c:	ea56 0307 	orrs.w	r3, r6, r7
 8020c10:	d1f0      	bne.n	8020bf4 <_svfprintf_r+0x8cc>
 8020c12:	e34c      	b.n	80212ae <_svfprintf_r+0xf86>
 8020c14:	b93b      	cbnz	r3, 8020c26 <_svfprintf_r+0x8fe>
 8020c16:	07ea      	lsls	r2, r5, #31
 8020c18:	d505      	bpl.n	8020c26 <_svfprintf_r+0x8fe>
 8020c1a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8020c1e:	2330      	movs	r3, #48	; 0x30
 8020c20:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8020c24:	e343      	b.n	80212ae <_svfprintf_r+0xf86>
 8020c26:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8020c2a:	e340      	b.n	80212ae <_svfprintf_r+0xf86>
 8020c2c:	b10b      	cbz	r3, 8020c32 <_svfprintf_r+0x90a>
 8020c2e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8020c32:	9b02      	ldr	r3, [sp, #8]
 8020c34:	2b00      	cmp	r3, #0
 8020c36:	f000 82f7 	beq.w	8021228 <_svfprintf_r+0xf00>
 8020c3a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8020c3e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8020c42:	2600      	movs	r6, #0
 8020c44:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8020c48:	9704      	str	r7, [sp, #16]
 8020c4a:	e4e8      	b.n	802061e <_svfprintf_r+0x2f6>
 8020c4c:	4606      	mov	r6, r0
 8020c4e:	e53f      	b.n	80206d0 <_svfprintf_r+0x3a8>
 8020c50:	2310      	movs	r3, #16
 8020c52:	6063      	str	r3, [r4, #4]
 8020c54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020c56:	3310      	adds	r3, #16
 8020c58:	9321      	str	r3, [sp, #132]	; 0x84
 8020c5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020c5c:	3301      	adds	r3, #1
 8020c5e:	2b07      	cmp	r3, #7
 8020c60:	9320      	str	r3, [sp, #128]	; 0x80
 8020c62:	dc04      	bgt.n	8020c6e <_svfprintf_r+0x946>
 8020c64:	3408      	adds	r4, #8
 8020c66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020c68:	3b10      	subs	r3, #16
 8020c6a:	930c      	str	r3, [sp, #48]	; 0x30
 8020c6c:	e615      	b.n	802089a <_svfprintf_r+0x572>
 8020c6e:	aa1f      	add	r2, sp, #124	; 0x7c
 8020c70:	4651      	mov	r1, sl
 8020c72:	4658      	mov	r0, fp
 8020c74:	f001 fe96 	bl	80229a4 <__ssprint_r>
 8020c78:	2800      	cmp	r0, #0
 8020c7a:	f040 82b6 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020c7e:	ac2c      	add	r4, sp, #176	; 0xb0
 8020c80:	e7f1      	b.n	8020c66 <_svfprintf_r+0x93e>
 8020c82:	aa1f      	add	r2, sp, #124	; 0x7c
 8020c84:	4651      	mov	r1, sl
 8020c86:	4658      	mov	r0, fp
 8020c88:	f001 fe8c 	bl	80229a4 <__ssprint_r>
 8020c8c:	2800      	cmp	r0, #0
 8020c8e:	f040 82ac 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020c92:	ac2c      	add	r4, sp, #176	; 0xb0
 8020c94:	e614      	b.n	80208c0 <_svfprintf_r+0x598>
 8020c96:	aa1f      	add	r2, sp, #124	; 0x7c
 8020c98:	4651      	mov	r1, sl
 8020c9a:	4658      	mov	r0, fp
 8020c9c:	f001 fe82 	bl	80229a4 <__ssprint_r>
 8020ca0:	2800      	cmp	r0, #0
 8020ca2:	f040 82a2 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020ca6:	ac2c      	add	r4, sp, #176	; 0xb0
 8020ca8:	e61c      	b.n	80208e4 <_svfprintf_r+0x5bc>
 8020caa:	aa1f      	add	r2, sp, #124	; 0x7c
 8020cac:	4651      	mov	r1, sl
 8020cae:	4658      	mov	r0, fp
 8020cb0:	f001 fe78 	bl	80229a4 <__ssprint_r>
 8020cb4:	2800      	cmp	r0, #0
 8020cb6:	f040 8298 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020cba:	ac2c      	add	r4, sp, #176	; 0xb0
 8020cbc:	e622      	b.n	8020904 <_svfprintf_r+0x5dc>
 8020cbe:	2210      	movs	r2, #16
 8020cc0:	6062      	str	r2, [r4, #4]
 8020cc2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020cc4:	3210      	adds	r2, #16
 8020cc6:	9221      	str	r2, [sp, #132]	; 0x84
 8020cc8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020cca:	3201      	adds	r2, #1
 8020ccc:	2a07      	cmp	r2, #7
 8020cce:	9220      	str	r2, [sp, #128]	; 0x80
 8020cd0:	dc02      	bgt.n	8020cd8 <_svfprintf_r+0x9b0>
 8020cd2:	3408      	adds	r4, #8
 8020cd4:	3b10      	subs	r3, #16
 8020cd6:	e61d      	b.n	8020914 <_svfprintf_r+0x5ec>
 8020cd8:	aa1f      	add	r2, sp, #124	; 0x7c
 8020cda:	4651      	mov	r1, sl
 8020cdc:	4658      	mov	r0, fp
 8020cde:	930c      	str	r3, [sp, #48]	; 0x30
 8020ce0:	f001 fe60 	bl	80229a4 <__ssprint_r>
 8020ce4:	2800      	cmp	r0, #0
 8020ce6:	f040 8280 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020cea:	ac2c      	add	r4, sp, #176	; 0xb0
 8020cec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020cee:	e7f1      	b.n	8020cd4 <_svfprintf_r+0x9ac>
 8020cf0:	aa1f      	add	r2, sp, #124	; 0x7c
 8020cf2:	4651      	mov	r1, sl
 8020cf4:	4658      	mov	r0, fp
 8020cf6:	f001 fe55 	bl	80229a4 <__ssprint_r>
 8020cfa:	2800      	cmp	r0, #0
 8020cfc:	f040 8275 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020d00:	ac2c      	add	r4, sp, #176	; 0xb0
 8020d02:	e617      	b.n	8020934 <_svfprintf_r+0x60c>
 8020d04:	2310      	movs	r3, #16
 8020d06:	6063      	str	r3, [r4, #4]
 8020d08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020d0a:	3310      	adds	r3, #16
 8020d0c:	9321      	str	r3, [sp, #132]	; 0x84
 8020d0e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020d10:	3301      	adds	r3, #1
 8020d12:	2b07      	cmp	r3, #7
 8020d14:	9320      	str	r3, [sp, #128]	; 0x80
 8020d16:	dc02      	bgt.n	8020d1e <_svfprintf_r+0x9f6>
 8020d18:	3408      	adds	r4, #8
 8020d1a:	3e10      	subs	r6, #16
 8020d1c:	e60e      	b.n	802093c <_svfprintf_r+0x614>
 8020d1e:	aa1f      	add	r2, sp, #124	; 0x7c
 8020d20:	4651      	mov	r1, sl
 8020d22:	4658      	mov	r0, fp
 8020d24:	f001 fe3e 	bl	80229a4 <__ssprint_r>
 8020d28:	2800      	cmp	r0, #0
 8020d2a:	f040 825e 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020d2e:	ac2c      	add	r4, sp, #176	; 0xb0
 8020d30:	e7f3      	b.n	8020d1a <_svfprintf_r+0x9f2>
 8020d32:	aa1f      	add	r2, sp, #124	; 0x7c
 8020d34:	4651      	mov	r1, sl
 8020d36:	4658      	mov	r0, fp
 8020d38:	f001 fe34 	bl	80229a4 <__ssprint_r>
 8020d3c:	2800      	cmp	r0, #0
 8020d3e:	f040 8254 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020d42:	ac2c      	add	r4, sp, #176	; 0xb0
 8020d44:	e60a      	b.n	802095c <_svfprintf_r+0x634>
 8020d46:	9b02      	ldr	r3, [sp, #8]
 8020d48:	2b65      	cmp	r3, #101	; 0x65
 8020d4a:	f340 81a9 	ble.w	80210a0 <_svfprintf_r+0xd78>
 8020d4e:	2200      	movs	r2, #0
 8020d50:	2300      	movs	r3, #0
 8020d52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020d56:	f7df fecb 	bl	8000af0 <__aeabi_dcmpeq>
 8020d5a:	2800      	cmp	r0, #0
 8020d5c:	d062      	beq.n	8020e24 <_svfprintf_r+0xafc>
 8020d5e:	4b2f      	ldr	r3, [pc, #188]	; (8020e1c <_svfprintf_r+0xaf4>)
 8020d60:	6023      	str	r3, [r4, #0]
 8020d62:	2301      	movs	r3, #1
 8020d64:	6063      	str	r3, [r4, #4]
 8020d66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020d68:	3301      	adds	r3, #1
 8020d6a:	9321      	str	r3, [sp, #132]	; 0x84
 8020d6c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020d6e:	3301      	adds	r3, #1
 8020d70:	2b07      	cmp	r3, #7
 8020d72:	9320      	str	r3, [sp, #128]	; 0x80
 8020d74:	dc25      	bgt.n	8020dc2 <_svfprintf_r+0xa9a>
 8020d76:	3408      	adds	r4, #8
 8020d78:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020d7a:	9a03      	ldr	r2, [sp, #12]
 8020d7c:	4293      	cmp	r3, r2
 8020d7e:	db02      	blt.n	8020d86 <_svfprintf_r+0xa5e>
 8020d80:	07ee      	lsls	r6, r5, #31
 8020d82:	f57f ae02 	bpl.w	802098a <_svfprintf_r+0x662>
 8020d86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020d88:	6023      	str	r3, [r4, #0]
 8020d8a:	9b08      	ldr	r3, [sp, #32]
 8020d8c:	6063      	str	r3, [r4, #4]
 8020d8e:	9a08      	ldr	r2, [sp, #32]
 8020d90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020d92:	4413      	add	r3, r2
 8020d94:	9321      	str	r3, [sp, #132]	; 0x84
 8020d96:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020d98:	3301      	adds	r3, #1
 8020d9a:	2b07      	cmp	r3, #7
 8020d9c:	9320      	str	r3, [sp, #128]	; 0x80
 8020d9e:	dc1a      	bgt.n	8020dd6 <_svfprintf_r+0xaae>
 8020da0:	3408      	adds	r4, #8
 8020da2:	9b03      	ldr	r3, [sp, #12]
 8020da4:	1e5e      	subs	r6, r3, #1
 8020da6:	2e00      	cmp	r6, #0
 8020da8:	f77f adef 	ble.w	802098a <_svfprintf_r+0x662>
 8020dac:	4f1c      	ldr	r7, [pc, #112]	; (8020e20 <_svfprintf_r+0xaf8>)
 8020dae:	f04f 0810 	mov.w	r8, #16
 8020db2:	2e10      	cmp	r6, #16
 8020db4:	6027      	str	r7, [r4, #0]
 8020db6:	dc18      	bgt.n	8020dea <_svfprintf_r+0xac2>
 8020db8:	6066      	str	r6, [r4, #4]
 8020dba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020dbc:	441e      	add	r6, r3
 8020dbe:	9621      	str	r6, [sp, #132]	; 0x84
 8020dc0:	e5d4      	b.n	802096c <_svfprintf_r+0x644>
 8020dc2:	aa1f      	add	r2, sp, #124	; 0x7c
 8020dc4:	4651      	mov	r1, sl
 8020dc6:	4658      	mov	r0, fp
 8020dc8:	f001 fdec 	bl	80229a4 <__ssprint_r>
 8020dcc:	2800      	cmp	r0, #0
 8020dce:	f040 820c 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020dd2:	ac2c      	add	r4, sp, #176	; 0xb0
 8020dd4:	e7d0      	b.n	8020d78 <_svfprintf_r+0xa50>
 8020dd6:	aa1f      	add	r2, sp, #124	; 0x7c
 8020dd8:	4651      	mov	r1, sl
 8020dda:	4658      	mov	r0, fp
 8020ddc:	f001 fde2 	bl	80229a4 <__ssprint_r>
 8020de0:	2800      	cmp	r0, #0
 8020de2:	f040 8202 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020de6:	ac2c      	add	r4, sp, #176	; 0xb0
 8020de8:	e7db      	b.n	8020da2 <_svfprintf_r+0xa7a>
 8020dea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020dec:	f8c4 8004 	str.w	r8, [r4, #4]
 8020df0:	3310      	adds	r3, #16
 8020df2:	9321      	str	r3, [sp, #132]	; 0x84
 8020df4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020df6:	3301      	adds	r3, #1
 8020df8:	2b07      	cmp	r3, #7
 8020dfa:	9320      	str	r3, [sp, #128]	; 0x80
 8020dfc:	dc02      	bgt.n	8020e04 <_svfprintf_r+0xadc>
 8020dfe:	3408      	adds	r4, #8
 8020e00:	3e10      	subs	r6, #16
 8020e02:	e7d6      	b.n	8020db2 <_svfprintf_r+0xa8a>
 8020e04:	aa1f      	add	r2, sp, #124	; 0x7c
 8020e06:	4651      	mov	r1, sl
 8020e08:	4658      	mov	r0, fp
 8020e0a:	f001 fdcb 	bl	80229a4 <__ssprint_r>
 8020e0e:	2800      	cmp	r0, #0
 8020e10:	f040 81eb 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020e14:	ac2c      	add	r4, sp, #176	; 0xb0
 8020e16:	e7f3      	b.n	8020e00 <_svfprintf_r+0xad8>
 8020e18:	08031ecd 	.word	0x08031ecd
 8020e1c:	08031d8d 	.word	0x08031d8d
 8020e20:	08031eee 	.word	0x08031eee
 8020e24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	dc7a      	bgt.n	8020f20 <_svfprintf_r+0xbf8>
 8020e2a:	4b9b      	ldr	r3, [pc, #620]	; (8021098 <_svfprintf_r+0xd70>)
 8020e2c:	6023      	str	r3, [r4, #0]
 8020e2e:	2301      	movs	r3, #1
 8020e30:	6063      	str	r3, [r4, #4]
 8020e32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020e34:	3301      	adds	r3, #1
 8020e36:	9321      	str	r3, [sp, #132]	; 0x84
 8020e38:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020e3a:	3301      	adds	r3, #1
 8020e3c:	2b07      	cmp	r3, #7
 8020e3e:	9320      	str	r3, [sp, #128]	; 0x80
 8020e40:	dc44      	bgt.n	8020ecc <_svfprintf_r+0xba4>
 8020e42:	3408      	adds	r4, #8
 8020e44:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020e46:	b923      	cbnz	r3, 8020e52 <_svfprintf_r+0xb2a>
 8020e48:	9b03      	ldr	r3, [sp, #12]
 8020e4a:	b913      	cbnz	r3, 8020e52 <_svfprintf_r+0xb2a>
 8020e4c:	07e8      	lsls	r0, r5, #31
 8020e4e:	f57f ad9c 	bpl.w	802098a <_svfprintf_r+0x662>
 8020e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020e54:	6023      	str	r3, [r4, #0]
 8020e56:	9b08      	ldr	r3, [sp, #32]
 8020e58:	6063      	str	r3, [r4, #4]
 8020e5a:	9a08      	ldr	r2, [sp, #32]
 8020e5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020e5e:	4413      	add	r3, r2
 8020e60:	9321      	str	r3, [sp, #132]	; 0x84
 8020e62:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020e64:	3301      	adds	r3, #1
 8020e66:	2b07      	cmp	r3, #7
 8020e68:	9320      	str	r3, [sp, #128]	; 0x80
 8020e6a:	dc39      	bgt.n	8020ee0 <_svfprintf_r+0xbb8>
 8020e6c:	f104 0308 	add.w	r3, r4, #8
 8020e70:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8020e72:	2e00      	cmp	r6, #0
 8020e74:	da19      	bge.n	8020eaa <_svfprintf_r+0xb82>
 8020e76:	4f89      	ldr	r7, [pc, #548]	; (802109c <_svfprintf_r+0xd74>)
 8020e78:	4276      	negs	r6, r6
 8020e7a:	2410      	movs	r4, #16
 8020e7c:	2e10      	cmp	r6, #16
 8020e7e:	601f      	str	r7, [r3, #0]
 8020e80:	dc38      	bgt.n	8020ef4 <_svfprintf_r+0xbcc>
 8020e82:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020e84:	605e      	str	r6, [r3, #4]
 8020e86:	4416      	add	r6, r2
 8020e88:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020e8a:	9621      	str	r6, [sp, #132]	; 0x84
 8020e8c:	3201      	adds	r2, #1
 8020e8e:	2a07      	cmp	r2, #7
 8020e90:	f103 0308 	add.w	r3, r3, #8
 8020e94:	9220      	str	r2, [sp, #128]	; 0x80
 8020e96:	dd08      	ble.n	8020eaa <_svfprintf_r+0xb82>
 8020e98:	aa1f      	add	r2, sp, #124	; 0x7c
 8020e9a:	4651      	mov	r1, sl
 8020e9c:	4658      	mov	r0, fp
 8020e9e:	f001 fd81 	bl	80229a4 <__ssprint_r>
 8020ea2:	2800      	cmp	r0, #0
 8020ea4:	f040 81a1 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020ea8:	ab2c      	add	r3, sp, #176	; 0xb0
 8020eaa:	9a03      	ldr	r2, [sp, #12]
 8020eac:	605a      	str	r2, [r3, #4]
 8020eae:	9903      	ldr	r1, [sp, #12]
 8020eb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020eb2:	f8c3 8000 	str.w	r8, [r3]
 8020eb6:	440a      	add	r2, r1
 8020eb8:	9221      	str	r2, [sp, #132]	; 0x84
 8020eba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020ebc:	3201      	adds	r2, #1
 8020ebe:	2a07      	cmp	r2, #7
 8020ec0:	9220      	str	r2, [sp, #128]	; 0x80
 8020ec2:	f73f ad59 	bgt.w	8020978 <_svfprintf_r+0x650>
 8020ec6:	f103 0408 	add.w	r4, r3, #8
 8020eca:	e55e      	b.n	802098a <_svfprintf_r+0x662>
 8020ecc:	aa1f      	add	r2, sp, #124	; 0x7c
 8020ece:	4651      	mov	r1, sl
 8020ed0:	4658      	mov	r0, fp
 8020ed2:	f001 fd67 	bl	80229a4 <__ssprint_r>
 8020ed6:	2800      	cmp	r0, #0
 8020ed8:	f040 8187 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020edc:	ac2c      	add	r4, sp, #176	; 0xb0
 8020ede:	e7b1      	b.n	8020e44 <_svfprintf_r+0xb1c>
 8020ee0:	aa1f      	add	r2, sp, #124	; 0x7c
 8020ee2:	4651      	mov	r1, sl
 8020ee4:	4658      	mov	r0, fp
 8020ee6:	f001 fd5d 	bl	80229a4 <__ssprint_r>
 8020eea:	2800      	cmp	r0, #0
 8020eec:	f040 817d 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020ef0:	ab2c      	add	r3, sp, #176	; 0xb0
 8020ef2:	e7bd      	b.n	8020e70 <_svfprintf_r+0xb48>
 8020ef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020ef6:	605c      	str	r4, [r3, #4]
 8020ef8:	3210      	adds	r2, #16
 8020efa:	9221      	str	r2, [sp, #132]	; 0x84
 8020efc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8020efe:	3201      	adds	r2, #1
 8020f00:	2a07      	cmp	r2, #7
 8020f02:	9220      	str	r2, [sp, #128]	; 0x80
 8020f04:	dc02      	bgt.n	8020f0c <_svfprintf_r+0xbe4>
 8020f06:	3308      	adds	r3, #8
 8020f08:	3e10      	subs	r6, #16
 8020f0a:	e7b7      	b.n	8020e7c <_svfprintf_r+0xb54>
 8020f0c:	aa1f      	add	r2, sp, #124	; 0x7c
 8020f0e:	4651      	mov	r1, sl
 8020f10:	4658      	mov	r0, fp
 8020f12:	f001 fd47 	bl	80229a4 <__ssprint_r>
 8020f16:	2800      	cmp	r0, #0
 8020f18:	f040 8167 	bne.w	80211ea <_svfprintf_r+0xec2>
 8020f1c:	ab2c      	add	r3, sp, #176	; 0xb0
 8020f1e:	e7f3      	b.n	8020f08 <_svfprintf_r+0xbe0>
 8020f20:	9b03      	ldr	r3, [sp, #12]
 8020f22:	42bb      	cmp	r3, r7
 8020f24:	bfa8      	it	ge
 8020f26:	463b      	movge	r3, r7
 8020f28:	2b00      	cmp	r3, #0
 8020f2a:	461e      	mov	r6, r3
 8020f2c:	dd0b      	ble.n	8020f46 <_svfprintf_r+0xc1e>
 8020f2e:	6063      	str	r3, [r4, #4]
 8020f30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020f32:	f8c4 8000 	str.w	r8, [r4]
 8020f36:	4433      	add	r3, r6
 8020f38:	9321      	str	r3, [sp, #132]	; 0x84
 8020f3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f3c:	3301      	adds	r3, #1
 8020f3e:	2b07      	cmp	r3, #7
 8020f40:	9320      	str	r3, [sp, #128]	; 0x80
 8020f42:	dc5f      	bgt.n	8021004 <_svfprintf_r+0xcdc>
 8020f44:	3408      	adds	r4, #8
 8020f46:	2e00      	cmp	r6, #0
 8020f48:	bfac      	ite	ge
 8020f4a:	1bbe      	subge	r6, r7, r6
 8020f4c:	463e      	movlt	r6, r7
 8020f4e:	2e00      	cmp	r6, #0
 8020f50:	dd0f      	ble.n	8020f72 <_svfprintf_r+0xc4a>
 8020f52:	f8df 9148 	ldr.w	r9, [pc, #328]	; 802109c <_svfprintf_r+0xd74>
 8020f56:	f8c4 9000 	str.w	r9, [r4]
 8020f5a:	2e10      	cmp	r6, #16
 8020f5c:	dc5c      	bgt.n	8021018 <_svfprintf_r+0xcf0>
 8020f5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020f60:	6066      	str	r6, [r4, #4]
 8020f62:	441e      	add	r6, r3
 8020f64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f66:	9621      	str	r6, [sp, #132]	; 0x84
 8020f68:	3301      	adds	r3, #1
 8020f6a:	2b07      	cmp	r3, #7
 8020f6c:	9320      	str	r3, [sp, #128]	; 0x80
 8020f6e:	dc6a      	bgt.n	8021046 <_svfprintf_r+0xd1e>
 8020f70:	3408      	adds	r4, #8
 8020f72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020f74:	9a03      	ldr	r2, [sp, #12]
 8020f76:	4293      	cmp	r3, r2
 8020f78:	db01      	blt.n	8020f7e <_svfprintf_r+0xc56>
 8020f7a:	07e9      	lsls	r1, r5, #31
 8020f7c:	d50d      	bpl.n	8020f9a <_svfprintf_r+0xc72>
 8020f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020f80:	6023      	str	r3, [r4, #0]
 8020f82:	9b08      	ldr	r3, [sp, #32]
 8020f84:	6063      	str	r3, [r4, #4]
 8020f86:	9a08      	ldr	r2, [sp, #32]
 8020f88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020f8a:	4413      	add	r3, r2
 8020f8c:	9321      	str	r3, [sp, #132]	; 0x84
 8020f8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f90:	3301      	adds	r3, #1
 8020f92:	2b07      	cmp	r3, #7
 8020f94:	9320      	str	r3, [sp, #128]	; 0x80
 8020f96:	dc60      	bgt.n	802105a <_svfprintf_r+0xd32>
 8020f98:	3408      	adds	r4, #8
 8020f9a:	9b03      	ldr	r3, [sp, #12]
 8020f9c:	9a03      	ldr	r2, [sp, #12]
 8020f9e:	1bde      	subs	r6, r3, r7
 8020fa0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020fa2:	1ad3      	subs	r3, r2, r3
 8020fa4:	429e      	cmp	r6, r3
 8020fa6:	bfa8      	it	ge
 8020fa8:	461e      	movge	r6, r3
 8020faa:	2e00      	cmp	r6, #0
 8020fac:	dd0b      	ble.n	8020fc6 <_svfprintf_r+0xc9e>
 8020fae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020fb0:	6066      	str	r6, [r4, #4]
 8020fb2:	4433      	add	r3, r6
 8020fb4:	9321      	str	r3, [sp, #132]	; 0x84
 8020fb6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020fb8:	3301      	adds	r3, #1
 8020fba:	4447      	add	r7, r8
 8020fbc:	2b07      	cmp	r3, #7
 8020fbe:	6027      	str	r7, [r4, #0]
 8020fc0:	9320      	str	r3, [sp, #128]	; 0x80
 8020fc2:	dc54      	bgt.n	802106e <_svfprintf_r+0xd46>
 8020fc4:	3408      	adds	r4, #8
 8020fc6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8020fc8:	9a03      	ldr	r2, [sp, #12]
 8020fca:	2e00      	cmp	r6, #0
 8020fcc:	eba2 0303 	sub.w	r3, r2, r3
 8020fd0:	bfac      	ite	ge
 8020fd2:	1b9e      	subge	r6, r3, r6
 8020fd4:	461e      	movlt	r6, r3
 8020fd6:	2e00      	cmp	r6, #0
 8020fd8:	f77f acd7 	ble.w	802098a <_svfprintf_r+0x662>
 8020fdc:	4f2f      	ldr	r7, [pc, #188]	; (802109c <_svfprintf_r+0xd74>)
 8020fde:	f04f 0810 	mov.w	r8, #16
 8020fe2:	2e10      	cmp	r6, #16
 8020fe4:	6027      	str	r7, [r4, #0]
 8020fe6:	f77f aee7 	ble.w	8020db8 <_svfprintf_r+0xa90>
 8020fea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020fec:	f8c4 8004 	str.w	r8, [r4, #4]
 8020ff0:	3310      	adds	r3, #16
 8020ff2:	9321      	str	r3, [sp, #132]	; 0x84
 8020ff4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020ff6:	3301      	adds	r3, #1
 8020ff8:	2b07      	cmp	r3, #7
 8020ffa:	9320      	str	r3, [sp, #128]	; 0x80
 8020ffc:	dc41      	bgt.n	8021082 <_svfprintf_r+0xd5a>
 8020ffe:	3408      	adds	r4, #8
 8021000:	3e10      	subs	r6, #16
 8021002:	e7ee      	b.n	8020fe2 <_svfprintf_r+0xcba>
 8021004:	aa1f      	add	r2, sp, #124	; 0x7c
 8021006:	4651      	mov	r1, sl
 8021008:	4658      	mov	r0, fp
 802100a:	f001 fccb 	bl	80229a4 <__ssprint_r>
 802100e:	2800      	cmp	r0, #0
 8021010:	f040 80eb 	bne.w	80211ea <_svfprintf_r+0xec2>
 8021014:	ac2c      	add	r4, sp, #176	; 0xb0
 8021016:	e796      	b.n	8020f46 <_svfprintf_r+0xc1e>
 8021018:	2310      	movs	r3, #16
 802101a:	6063      	str	r3, [r4, #4]
 802101c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802101e:	3310      	adds	r3, #16
 8021020:	9321      	str	r3, [sp, #132]	; 0x84
 8021022:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021024:	3301      	adds	r3, #1
 8021026:	2b07      	cmp	r3, #7
 8021028:	9320      	str	r3, [sp, #128]	; 0x80
 802102a:	dc02      	bgt.n	8021032 <_svfprintf_r+0xd0a>
 802102c:	3408      	adds	r4, #8
 802102e:	3e10      	subs	r6, #16
 8021030:	e791      	b.n	8020f56 <_svfprintf_r+0xc2e>
 8021032:	aa1f      	add	r2, sp, #124	; 0x7c
 8021034:	4651      	mov	r1, sl
 8021036:	4658      	mov	r0, fp
 8021038:	f001 fcb4 	bl	80229a4 <__ssprint_r>
 802103c:	2800      	cmp	r0, #0
 802103e:	f040 80d4 	bne.w	80211ea <_svfprintf_r+0xec2>
 8021042:	ac2c      	add	r4, sp, #176	; 0xb0
 8021044:	e7f3      	b.n	802102e <_svfprintf_r+0xd06>
 8021046:	aa1f      	add	r2, sp, #124	; 0x7c
 8021048:	4651      	mov	r1, sl
 802104a:	4658      	mov	r0, fp
 802104c:	f001 fcaa 	bl	80229a4 <__ssprint_r>
 8021050:	2800      	cmp	r0, #0
 8021052:	f040 80ca 	bne.w	80211ea <_svfprintf_r+0xec2>
 8021056:	ac2c      	add	r4, sp, #176	; 0xb0
 8021058:	e78b      	b.n	8020f72 <_svfprintf_r+0xc4a>
 802105a:	aa1f      	add	r2, sp, #124	; 0x7c
 802105c:	4651      	mov	r1, sl
 802105e:	4658      	mov	r0, fp
 8021060:	f001 fca0 	bl	80229a4 <__ssprint_r>
 8021064:	2800      	cmp	r0, #0
 8021066:	f040 80c0 	bne.w	80211ea <_svfprintf_r+0xec2>
 802106a:	ac2c      	add	r4, sp, #176	; 0xb0
 802106c:	e795      	b.n	8020f9a <_svfprintf_r+0xc72>
 802106e:	aa1f      	add	r2, sp, #124	; 0x7c
 8021070:	4651      	mov	r1, sl
 8021072:	4658      	mov	r0, fp
 8021074:	f001 fc96 	bl	80229a4 <__ssprint_r>
 8021078:	2800      	cmp	r0, #0
 802107a:	f040 80b6 	bne.w	80211ea <_svfprintf_r+0xec2>
 802107e:	ac2c      	add	r4, sp, #176	; 0xb0
 8021080:	e7a1      	b.n	8020fc6 <_svfprintf_r+0xc9e>
 8021082:	aa1f      	add	r2, sp, #124	; 0x7c
 8021084:	4651      	mov	r1, sl
 8021086:	4658      	mov	r0, fp
 8021088:	f001 fc8c 	bl	80229a4 <__ssprint_r>
 802108c:	2800      	cmp	r0, #0
 802108e:	f040 80ac 	bne.w	80211ea <_svfprintf_r+0xec2>
 8021092:	ac2c      	add	r4, sp, #176	; 0xb0
 8021094:	e7b4      	b.n	8021000 <_svfprintf_r+0xcd8>
 8021096:	bf00      	nop
 8021098:	08031d8d 	.word	0x08031d8d
 802109c:	08031eee 	.word	0x08031eee
 80210a0:	9b03      	ldr	r3, [sp, #12]
 80210a2:	2b01      	cmp	r3, #1
 80210a4:	dc01      	bgt.n	80210aa <_svfprintf_r+0xd82>
 80210a6:	07ea      	lsls	r2, r5, #31
 80210a8:	d576      	bpl.n	8021198 <_svfprintf_r+0xe70>
 80210aa:	2301      	movs	r3, #1
 80210ac:	6063      	str	r3, [r4, #4]
 80210ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80210b0:	f8c4 8000 	str.w	r8, [r4]
 80210b4:	3301      	adds	r3, #1
 80210b6:	9321      	str	r3, [sp, #132]	; 0x84
 80210b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80210ba:	3301      	adds	r3, #1
 80210bc:	2b07      	cmp	r3, #7
 80210be:	9320      	str	r3, [sp, #128]	; 0x80
 80210c0:	dc36      	bgt.n	8021130 <_svfprintf_r+0xe08>
 80210c2:	3408      	adds	r4, #8
 80210c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80210c6:	6023      	str	r3, [r4, #0]
 80210c8:	9b08      	ldr	r3, [sp, #32]
 80210ca:	6063      	str	r3, [r4, #4]
 80210cc:	9a08      	ldr	r2, [sp, #32]
 80210ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80210d0:	4413      	add	r3, r2
 80210d2:	9321      	str	r3, [sp, #132]	; 0x84
 80210d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80210d6:	3301      	adds	r3, #1
 80210d8:	2b07      	cmp	r3, #7
 80210da:	9320      	str	r3, [sp, #128]	; 0x80
 80210dc:	dc31      	bgt.n	8021142 <_svfprintf_r+0xe1a>
 80210de:	3408      	adds	r4, #8
 80210e0:	2300      	movs	r3, #0
 80210e2:	2200      	movs	r2, #0
 80210e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80210e8:	f7df fd02 	bl	8000af0 <__aeabi_dcmpeq>
 80210ec:	9b03      	ldr	r3, [sp, #12]
 80210ee:	1e5e      	subs	r6, r3, #1
 80210f0:	2800      	cmp	r0, #0
 80210f2:	d12f      	bne.n	8021154 <_svfprintf_r+0xe2c>
 80210f4:	f108 0301 	add.w	r3, r8, #1
 80210f8:	e884 0048 	stmia.w	r4, {r3, r6}
 80210fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80210fe:	9a03      	ldr	r2, [sp, #12]
 8021100:	3b01      	subs	r3, #1
 8021102:	4413      	add	r3, r2
 8021104:	9321      	str	r3, [sp, #132]	; 0x84
 8021106:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021108:	3301      	adds	r3, #1
 802110a:	2b07      	cmp	r3, #7
 802110c:	9320      	str	r3, [sp, #128]	; 0x80
 802110e:	dd4a      	ble.n	80211a6 <_svfprintf_r+0xe7e>
 8021110:	aa1f      	add	r2, sp, #124	; 0x7c
 8021112:	4651      	mov	r1, sl
 8021114:	4658      	mov	r0, fp
 8021116:	f001 fc45 	bl	80229a4 <__ssprint_r>
 802111a:	2800      	cmp	r0, #0
 802111c:	d165      	bne.n	80211ea <_svfprintf_r+0xec2>
 802111e:	ac2c      	add	r4, sp, #176	; 0xb0
 8021120:	ab1b      	add	r3, sp, #108	; 0x6c
 8021122:	6023      	str	r3, [r4, #0]
 8021124:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021126:	6063      	str	r3, [r4, #4]
 8021128:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802112a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802112c:	4413      	add	r3, r2
 802112e:	e41c      	b.n	802096a <_svfprintf_r+0x642>
 8021130:	aa1f      	add	r2, sp, #124	; 0x7c
 8021132:	4651      	mov	r1, sl
 8021134:	4658      	mov	r0, fp
 8021136:	f001 fc35 	bl	80229a4 <__ssprint_r>
 802113a:	2800      	cmp	r0, #0
 802113c:	d155      	bne.n	80211ea <_svfprintf_r+0xec2>
 802113e:	ac2c      	add	r4, sp, #176	; 0xb0
 8021140:	e7c0      	b.n	80210c4 <_svfprintf_r+0xd9c>
 8021142:	aa1f      	add	r2, sp, #124	; 0x7c
 8021144:	4651      	mov	r1, sl
 8021146:	4658      	mov	r0, fp
 8021148:	f001 fc2c 	bl	80229a4 <__ssprint_r>
 802114c:	2800      	cmp	r0, #0
 802114e:	d14c      	bne.n	80211ea <_svfprintf_r+0xec2>
 8021150:	ac2c      	add	r4, sp, #176	; 0xb0
 8021152:	e7c5      	b.n	80210e0 <_svfprintf_r+0xdb8>
 8021154:	2e00      	cmp	r6, #0
 8021156:	dde3      	ble.n	8021120 <_svfprintf_r+0xdf8>
 8021158:	4f59      	ldr	r7, [pc, #356]	; (80212c0 <_svfprintf_r+0xf98>)
 802115a:	f04f 0810 	mov.w	r8, #16
 802115e:	2e10      	cmp	r6, #16
 8021160:	6027      	str	r7, [r4, #0]
 8021162:	dc04      	bgt.n	802116e <_svfprintf_r+0xe46>
 8021164:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021166:	6066      	str	r6, [r4, #4]
 8021168:	441e      	add	r6, r3
 802116a:	9621      	str	r6, [sp, #132]	; 0x84
 802116c:	e7cb      	b.n	8021106 <_svfprintf_r+0xdde>
 802116e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021170:	f8c4 8004 	str.w	r8, [r4, #4]
 8021174:	3310      	adds	r3, #16
 8021176:	9321      	str	r3, [sp, #132]	; 0x84
 8021178:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802117a:	3301      	adds	r3, #1
 802117c:	2b07      	cmp	r3, #7
 802117e:	9320      	str	r3, [sp, #128]	; 0x80
 8021180:	dc02      	bgt.n	8021188 <_svfprintf_r+0xe60>
 8021182:	3408      	adds	r4, #8
 8021184:	3e10      	subs	r6, #16
 8021186:	e7ea      	b.n	802115e <_svfprintf_r+0xe36>
 8021188:	aa1f      	add	r2, sp, #124	; 0x7c
 802118a:	4651      	mov	r1, sl
 802118c:	4658      	mov	r0, fp
 802118e:	f001 fc09 	bl	80229a4 <__ssprint_r>
 8021192:	bb50      	cbnz	r0, 80211ea <_svfprintf_r+0xec2>
 8021194:	ac2c      	add	r4, sp, #176	; 0xb0
 8021196:	e7f5      	b.n	8021184 <_svfprintf_r+0xe5c>
 8021198:	2301      	movs	r3, #1
 802119a:	6063      	str	r3, [r4, #4]
 802119c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802119e:	f8c4 8000 	str.w	r8, [r4]
 80211a2:	3301      	adds	r3, #1
 80211a4:	e7ae      	b.n	8021104 <_svfprintf_r+0xddc>
 80211a6:	3408      	adds	r4, #8
 80211a8:	e7ba      	b.n	8021120 <_svfprintf_r+0xdf8>
 80211aa:	3408      	adds	r4, #8
 80211ac:	f7ff bbed 	b.w	802098a <_svfprintf_r+0x662>
 80211b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80211b4:	1a9d      	subs	r5, r3, r2
 80211b6:	2d00      	cmp	r5, #0
 80211b8:	f77f abea 	ble.w	8020990 <_svfprintf_r+0x668>
 80211bc:	2610      	movs	r6, #16
 80211be:	4b41      	ldr	r3, [pc, #260]	; (80212c4 <_svfprintf_r+0xf9c>)
 80211c0:	6023      	str	r3, [r4, #0]
 80211c2:	2d10      	cmp	r5, #16
 80211c4:	dc1b      	bgt.n	80211fe <_svfprintf_r+0xed6>
 80211c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80211c8:	6065      	str	r5, [r4, #4]
 80211ca:	441d      	add	r5, r3
 80211cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80211ce:	9521      	str	r5, [sp, #132]	; 0x84
 80211d0:	3301      	adds	r3, #1
 80211d2:	2b07      	cmp	r3, #7
 80211d4:	9320      	str	r3, [sp, #128]	; 0x80
 80211d6:	f77f abdb 	ble.w	8020990 <_svfprintf_r+0x668>
 80211da:	aa1f      	add	r2, sp, #124	; 0x7c
 80211dc:	4651      	mov	r1, sl
 80211de:	4658      	mov	r0, fp
 80211e0:	f001 fbe0 	bl	80229a4 <__ssprint_r>
 80211e4:	2800      	cmp	r0, #0
 80211e6:	f43f abd3 	beq.w	8020990 <_svfprintf_r+0x668>
 80211ea:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80211ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80211f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80211f4:	bf18      	it	ne
 80211f6:	f04f 33ff 	movne.w	r3, #4294967295
 80211fa:	f7ff b8b9 	b.w	8020370 <_svfprintf_r+0x48>
 80211fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021200:	6066      	str	r6, [r4, #4]
 8021202:	3310      	adds	r3, #16
 8021204:	9321      	str	r3, [sp, #132]	; 0x84
 8021206:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021208:	3301      	adds	r3, #1
 802120a:	2b07      	cmp	r3, #7
 802120c:	9320      	str	r3, [sp, #128]	; 0x80
 802120e:	dc02      	bgt.n	8021216 <_svfprintf_r+0xeee>
 8021210:	3408      	adds	r4, #8
 8021212:	3d10      	subs	r5, #16
 8021214:	e7d3      	b.n	80211be <_svfprintf_r+0xe96>
 8021216:	aa1f      	add	r2, sp, #124	; 0x7c
 8021218:	4651      	mov	r1, sl
 802121a:	4658      	mov	r0, fp
 802121c:	f001 fbc2 	bl	80229a4 <__ssprint_r>
 8021220:	2800      	cmp	r0, #0
 8021222:	d1e2      	bne.n	80211ea <_svfprintf_r+0xec2>
 8021224:	ac2c      	add	r4, sp, #176	; 0xb0
 8021226:	e7f4      	b.n	8021212 <_svfprintf_r+0xeea>
 8021228:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802122a:	2b00      	cmp	r3, #0
 802122c:	d0dd      	beq.n	80211ea <_svfprintf_r+0xec2>
 802122e:	aa1f      	add	r2, sp, #124	; 0x7c
 8021230:	4651      	mov	r1, sl
 8021232:	4658      	mov	r0, fp
 8021234:	f001 fbb6 	bl	80229a4 <__ssprint_r>
 8021238:	e7d7      	b.n	80211ea <_svfprintf_r+0xec2>
 802123a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802123e:	4610      	mov	r0, r2
 8021240:	4619      	mov	r1, r3
 8021242:	f7df fc87 	bl	8000b54 <__aeabi_dcmpun>
 8021246:	2800      	cmp	r0, #0
 8021248:	f43f aa44 	beq.w	80206d4 <_svfprintf_r+0x3ac>
 802124c:	4b1e      	ldr	r3, [pc, #120]	; (80212c8 <_svfprintf_r+0xfa0>)
 802124e:	4a1f      	ldr	r2, [pc, #124]	; (80212cc <_svfprintf_r+0xfa4>)
 8021250:	f7ff ba34 	b.w	80206bc <_svfprintf_r+0x394>
 8021254:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8021256:	eba3 0308 	sub.w	r3, r3, r8
 802125a:	9303      	str	r3, [sp, #12]
 802125c:	f7ff bab5 	b.w	80207ca <_svfprintf_r+0x4a2>
 8021260:	ea56 0207 	orrs.w	r2, r6, r7
 8021264:	950b      	str	r5, [sp, #44]	; 0x2c
 8021266:	f43f ac2b 	beq.w	8020ac0 <_svfprintf_r+0x798>
 802126a:	2b01      	cmp	r3, #1
 802126c:	f43f ac9d 	beq.w	8020baa <_svfprintf_r+0x882>
 8021270:	2b02      	cmp	r3, #2
 8021272:	f43f acbd 	beq.w	8020bf0 <_svfprintf_r+0x8c8>
 8021276:	ab2c      	add	r3, sp, #176	; 0xb0
 8021278:	08f1      	lsrs	r1, r6, #3
 802127a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 802127e:	08f8      	lsrs	r0, r7, #3
 8021280:	f006 0207 	and.w	r2, r6, #7
 8021284:	4607      	mov	r7, r0
 8021286:	460e      	mov	r6, r1
 8021288:	3230      	adds	r2, #48	; 0x30
 802128a:	ea56 0107 	orrs.w	r1, r6, r7
 802128e:	f103 38ff 	add.w	r8, r3, #4294967295
 8021292:	f803 2c01 	strb.w	r2, [r3, #-1]
 8021296:	f47f ac86 	bne.w	8020ba6 <_svfprintf_r+0x87e>
 802129a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802129c:	07c9      	lsls	r1, r1, #31
 802129e:	d506      	bpl.n	80212ae <_svfprintf_r+0xf86>
 80212a0:	2a30      	cmp	r2, #48	; 0x30
 80212a2:	d004      	beq.n	80212ae <_svfprintf_r+0xf86>
 80212a4:	2230      	movs	r2, #48	; 0x30
 80212a6:	f808 2c01 	strb.w	r2, [r8, #-1]
 80212aa:	f1a3 0802 	sub.w	r8, r3, #2
 80212ae:	464e      	mov	r6, r9
 80212b0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80212b4:	eba9 0908 	sub.w	r9, r9, r8
 80212b8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80212ba:	2700      	movs	r7, #0
 80212bc:	f7ff bad1 	b.w	8020862 <_svfprintf_r+0x53a>
 80212c0:	08031eee 	.word	0x08031eee
 80212c4:	08031ede 	.word	0x08031ede
 80212c8:	08031d93 	.word	0x08031d93
 80212cc:	08031eb8 	.word	0x08031eb8

080212d0 <quorem>:
 80212d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212d4:	6903      	ldr	r3, [r0, #16]
 80212d6:	690c      	ldr	r4, [r1, #16]
 80212d8:	429c      	cmp	r4, r3
 80212da:	4680      	mov	r8, r0
 80212dc:	f300 8082 	bgt.w	80213e4 <quorem+0x114>
 80212e0:	3c01      	subs	r4, #1
 80212e2:	f101 0714 	add.w	r7, r1, #20
 80212e6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80212ea:	f100 0614 	add.w	r6, r0, #20
 80212ee:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80212f2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80212f6:	eb06 030e 	add.w	r3, r6, lr
 80212fa:	3501      	adds	r5, #1
 80212fc:	eb07 090e 	add.w	r9, r7, lr
 8021300:	9301      	str	r3, [sp, #4]
 8021302:	fbb0 f5f5 	udiv	r5, r0, r5
 8021306:	b395      	cbz	r5, 802136e <quorem+0x9e>
 8021308:	f04f 0a00 	mov.w	sl, #0
 802130c:	4638      	mov	r0, r7
 802130e:	46b4      	mov	ip, r6
 8021310:	46d3      	mov	fp, sl
 8021312:	f850 2b04 	ldr.w	r2, [r0], #4
 8021316:	b293      	uxth	r3, r2
 8021318:	fb05 a303 	mla	r3, r5, r3, sl
 802131c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8021320:	b29b      	uxth	r3, r3
 8021322:	ebab 0303 	sub.w	r3, fp, r3
 8021326:	0c12      	lsrs	r2, r2, #16
 8021328:	f8bc b000 	ldrh.w	fp, [ip]
 802132c:	fb05 a202 	mla	r2, r5, r2, sl
 8021330:	fa13 f38b 	uxtah	r3, r3, fp
 8021334:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8021338:	fa1f fb82 	uxth.w	fp, r2
 802133c:	f8dc 2000 	ldr.w	r2, [ip]
 8021340:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8021344:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021348:	b29b      	uxth	r3, r3
 802134a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802134e:	4581      	cmp	r9, r0
 8021350:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8021354:	f84c 3b04 	str.w	r3, [ip], #4
 8021358:	d2db      	bcs.n	8021312 <quorem+0x42>
 802135a:	f856 300e 	ldr.w	r3, [r6, lr]
 802135e:	b933      	cbnz	r3, 802136e <quorem+0x9e>
 8021360:	9b01      	ldr	r3, [sp, #4]
 8021362:	3b04      	subs	r3, #4
 8021364:	429e      	cmp	r6, r3
 8021366:	461a      	mov	r2, r3
 8021368:	d330      	bcc.n	80213cc <quorem+0xfc>
 802136a:	f8c8 4010 	str.w	r4, [r8, #16]
 802136e:	4640      	mov	r0, r8
 8021370:	f001 fa41 	bl	80227f6 <__mcmp>
 8021374:	2800      	cmp	r0, #0
 8021376:	db25      	blt.n	80213c4 <quorem+0xf4>
 8021378:	3501      	adds	r5, #1
 802137a:	4630      	mov	r0, r6
 802137c:	f04f 0e00 	mov.w	lr, #0
 8021380:	f857 2b04 	ldr.w	r2, [r7], #4
 8021384:	f8d0 c000 	ldr.w	ip, [r0]
 8021388:	b293      	uxth	r3, r2
 802138a:	ebae 0303 	sub.w	r3, lr, r3
 802138e:	0c12      	lsrs	r2, r2, #16
 8021390:	fa13 f38c 	uxtah	r3, r3, ip
 8021394:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8021398:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802139c:	b29b      	uxth	r3, r3
 802139e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80213a2:	45b9      	cmp	r9, r7
 80213a4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80213a8:	f840 3b04 	str.w	r3, [r0], #4
 80213ac:	d2e8      	bcs.n	8021380 <quorem+0xb0>
 80213ae:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80213b2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80213b6:	b92a      	cbnz	r2, 80213c4 <quorem+0xf4>
 80213b8:	3b04      	subs	r3, #4
 80213ba:	429e      	cmp	r6, r3
 80213bc:	461a      	mov	r2, r3
 80213be:	d30b      	bcc.n	80213d8 <quorem+0x108>
 80213c0:	f8c8 4010 	str.w	r4, [r8, #16]
 80213c4:	4628      	mov	r0, r5
 80213c6:	b003      	add	sp, #12
 80213c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213cc:	6812      	ldr	r2, [r2, #0]
 80213ce:	3b04      	subs	r3, #4
 80213d0:	2a00      	cmp	r2, #0
 80213d2:	d1ca      	bne.n	802136a <quorem+0x9a>
 80213d4:	3c01      	subs	r4, #1
 80213d6:	e7c5      	b.n	8021364 <quorem+0x94>
 80213d8:	6812      	ldr	r2, [r2, #0]
 80213da:	3b04      	subs	r3, #4
 80213dc:	2a00      	cmp	r2, #0
 80213de:	d1ef      	bne.n	80213c0 <quorem+0xf0>
 80213e0:	3c01      	subs	r4, #1
 80213e2:	e7ea      	b.n	80213ba <quorem+0xea>
 80213e4:	2000      	movs	r0, #0
 80213e6:	e7ee      	b.n	80213c6 <quorem+0xf6>

080213e8 <_dtoa_r>:
 80213e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80213ec:	ec57 6b10 	vmov	r6, r7, d0
 80213f0:	b097      	sub	sp, #92	; 0x5c
 80213f2:	e9cd 6700 	strd	r6, r7, [sp]
 80213f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80213f8:	9107      	str	r1, [sp, #28]
 80213fa:	4604      	mov	r4, r0
 80213fc:	920a      	str	r2, [sp, #40]	; 0x28
 80213fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8021400:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8021402:	b93e      	cbnz	r6, 8021414 <_dtoa_r+0x2c>
 8021404:	2010      	movs	r0, #16
 8021406:	f000 fdcb 	bl	8021fa0 <malloc>
 802140a:	6260      	str	r0, [r4, #36]	; 0x24
 802140c:	6046      	str	r6, [r0, #4]
 802140e:	6086      	str	r6, [r0, #8]
 8021410:	6006      	str	r6, [r0, #0]
 8021412:	60c6      	str	r6, [r0, #12]
 8021414:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021416:	6819      	ldr	r1, [r3, #0]
 8021418:	b151      	cbz	r1, 8021430 <_dtoa_r+0x48>
 802141a:	685a      	ldr	r2, [r3, #4]
 802141c:	604a      	str	r2, [r1, #4]
 802141e:	2301      	movs	r3, #1
 8021420:	4093      	lsls	r3, r2
 8021422:	608b      	str	r3, [r1, #8]
 8021424:	4620      	mov	r0, r4
 8021426:	f001 f811 	bl	802244c <_Bfree>
 802142a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802142c:	2200      	movs	r2, #0
 802142e:	601a      	str	r2, [r3, #0]
 8021430:	9b01      	ldr	r3, [sp, #4]
 8021432:	2b00      	cmp	r3, #0
 8021434:	bfbf      	itttt	lt
 8021436:	2301      	movlt	r3, #1
 8021438:	602b      	strlt	r3, [r5, #0]
 802143a:	9b01      	ldrlt	r3, [sp, #4]
 802143c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8021440:	bfb2      	itee	lt
 8021442:	9301      	strlt	r3, [sp, #4]
 8021444:	2300      	movge	r3, #0
 8021446:	602b      	strge	r3, [r5, #0]
 8021448:	f8dd 8004 	ldr.w	r8, [sp, #4]
 802144c:	4ba8      	ldr	r3, [pc, #672]	; (80216f0 <_dtoa_r+0x308>)
 802144e:	ea33 0308 	bics.w	r3, r3, r8
 8021452:	d11b      	bne.n	802148c <_dtoa_r+0xa4>
 8021454:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021456:	f242 730f 	movw	r3, #9999	; 0x270f
 802145a:	6013      	str	r3, [r2, #0]
 802145c:	9b00      	ldr	r3, [sp, #0]
 802145e:	b923      	cbnz	r3, 802146a <_dtoa_r+0x82>
 8021460:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8021464:	2800      	cmp	r0, #0
 8021466:	f000 8578 	beq.w	8021f5a <_dtoa_r+0xb72>
 802146a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802146c:	b953      	cbnz	r3, 8021484 <_dtoa_r+0x9c>
 802146e:	4ba1      	ldr	r3, [pc, #644]	; (80216f4 <_dtoa_r+0x30c>)
 8021470:	e021      	b.n	80214b6 <_dtoa_r+0xce>
 8021472:	4ba1      	ldr	r3, [pc, #644]	; (80216f8 <_dtoa_r+0x310>)
 8021474:	9302      	str	r3, [sp, #8]
 8021476:	3308      	adds	r3, #8
 8021478:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802147a:	6013      	str	r3, [r2, #0]
 802147c:	9802      	ldr	r0, [sp, #8]
 802147e:	b017      	add	sp, #92	; 0x5c
 8021480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021484:	4b9b      	ldr	r3, [pc, #620]	; (80216f4 <_dtoa_r+0x30c>)
 8021486:	9302      	str	r3, [sp, #8]
 8021488:	3303      	adds	r3, #3
 802148a:	e7f5      	b.n	8021478 <_dtoa_r+0x90>
 802148c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8021490:	2200      	movs	r2, #0
 8021492:	2300      	movs	r3, #0
 8021494:	4630      	mov	r0, r6
 8021496:	4639      	mov	r1, r7
 8021498:	f7df fb2a 	bl	8000af0 <__aeabi_dcmpeq>
 802149c:	4681      	mov	r9, r0
 802149e:	b160      	cbz	r0, 80214ba <_dtoa_r+0xd2>
 80214a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80214a2:	2301      	movs	r3, #1
 80214a4:	6013      	str	r3, [r2, #0]
 80214a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80214a8:	2b00      	cmp	r3, #0
 80214aa:	f000 8553 	beq.w	8021f54 <_dtoa_r+0xb6c>
 80214ae:	4b93      	ldr	r3, [pc, #588]	; (80216fc <_dtoa_r+0x314>)
 80214b0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80214b2:	6013      	str	r3, [r2, #0]
 80214b4:	3b01      	subs	r3, #1
 80214b6:	9302      	str	r3, [sp, #8]
 80214b8:	e7e0      	b.n	802147c <_dtoa_r+0x94>
 80214ba:	aa14      	add	r2, sp, #80	; 0x50
 80214bc:	a915      	add	r1, sp, #84	; 0x54
 80214be:	ec47 6b10 	vmov	d0, r6, r7
 80214c2:	4620      	mov	r0, r4
 80214c4:	f001 fa0f 	bl	80228e6 <__d2b>
 80214c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80214cc:	4682      	mov	sl, r0
 80214ce:	2d00      	cmp	r5, #0
 80214d0:	d07e      	beq.n	80215d0 <_dtoa_r+0x1e8>
 80214d2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80214d6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80214da:	4630      	mov	r0, r6
 80214dc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80214e0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80214e4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80214e8:	2200      	movs	r2, #0
 80214ea:	4b85      	ldr	r3, [pc, #532]	; (8021700 <_dtoa_r+0x318>)
 80214ec:	f7de fee4 	bl	80002b8 <__aeabi_dsub>
 80214f0:	a379      	add	r3, pc, #484	; (adr r3, 80216d8 <_dtoa_r+0x2f0>)
 80214f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80214f6:	f7df f893 	bl	8000620 <__aeabi_dmul>
 80214fa:	a379      	add	r3, pc, #484	; (adr r3, 80216e0 <_dtoa_r+0x2f8>)
 80214fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021500:	f7de fedc 	bl	80002bc <__adddf3>
 8021504:	4606      	mov	r6, r0
 8021506:	4628      	mov	r0, r5
 8021508:	460f      	mov	r7, r1
 802150a:	f7df f823 	bl	8000554 <__aeabi_i2d>
 802150e:	a376      	add	r3, pc, #472	; (adr r3, 80216e8 <_dtoa_r+0x300>)
 8021510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021514:	f7df f884 	bl	8000620 <__aeabi_dmul>
 8021518:	4602      	mov	r2, r0
 802151a:	460b      	mov	r3, r1
 802151c:	4630      	mov	r0, r6
 802151e:	4639      	mov	r1, r7
 8021520:	f7de fecc 	bl	80002bc <__adddf3>
 8021524:	4606      	mov	r6, r0
 8021526:	460f      	mov	r7, r1
 8021528:	f7df fb2a 	bl	8000b80 <__aeabi_d2iz>
 802152c:	2200      	movs	r2, #0
 802152e:	4683      	mov	fp, r0
 8021530:	2300      	movs	r3, #0
 8021532:	4630      	mov	r0, r6
 8021534:	4639      	mov	r1, r7
 8021536:	f7df fae5 	bl	8000b04 <__aeabi_dcmplt>
 802153a:	b158      	cbz	r0, 8021554 <_dtoa_r+0x16c>
 802153c:	4658      	mov	r0, fp
 802153e:	f7df f809 	bl	8000554 <__aeabi_i2d>
 8021542:	4602      	mov	r2, r0
 8021544:	460b      	mov	r3, r1
 8021546:	4630      	mov	r0, r6
 8021548:	4639      	mov	r1, r7
 802154a:	f7df fad1 	bl	8000af0 <__aeabi_dcmpeq>
 802154e:	b908      	cbnz	r0, 8021554 <_dtoa_r+0x16c>
 8021550:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021554:	f1bb 0f16 	cmp.w	fp, #22
 8021558:	d859      	bhi.n	802160e <_dtoa_r+0x226>
 802155a:	496a      	ldr	r1, [pc, #424]	; (8021704 <_dtoa_r+0x31c>)
 802155c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8021560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021564:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021568:	f7df faea 	bl	8000b40 <__aeabi_dcmpgt>
 802156c:	2800      	cmp	r0, #0
 802156e:	d050      	beq.n	8021612 <_dtoa_r+0x22a>
 8021570:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021574:	2300      	movs	r3, #0
 8021576:	930e      	str	r3, [sp, #56]	; 0x38
 8021578:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802157a:	1b5d      	subs	r5, r3, r5
 802157c:	1e6b      	subs	r3, r5, #1
 802157e:	9306      	str	r3, [sp, #24]
 8021580:	bf45      	ittet	mi
 8021582:	f1c5 0301 	rsbmi	r3, r5, #1
 8021586:	9305      	strmi	r3, [sp, #20]
 8021588:	2300      	movpl	r3, #0
 802158a:	2300      	movmi	r3, #0
 802158c:	bf4c      	ite	mi
 802158e:	9306      	strmi	r3, [sp, #24]
 8021590:	9305      	strpl	r3, [sp, #20]
 8021592:	f1bb 0f00 	cmp.w	fp, #0
 8021596:	db3e      	blt.n	8021616 <_dtoa_r+0x22e>
 8021598:	9b06      	ldr	r3, [sp, #24]
 802159a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 802159e:	445b      	add	r3, fp
 80215a0:	9306      	str	r3, [sp, #24]
 80215a2:	2300      	movs	r3, #0
 80215a4:	9308      	str	r3, [sp, #32]
 80215a6:	9b07      	ldr	r3, [sp, #28]
 80215a8:	2b09      	cmp	r3, #9
 80215aa:	f200 80af 	bhi.w	802170c <_dtoa_r+0x324>
 80215ae:	2b05      	cmp	r3, #5
 80215b0:	bfc4      	itt	gt
 80215b2:	3b04      	subgt	r3, #4
 80215b4:	9307      	strgt	r3, [sp, #28]
 80215b6:	9b07      	ldr	r3, [sp, #28]
 80215b8:	f1a3 0302 	sub.w	r3, r3, #2
 80215bc:	bfcc      	ite	gt
 80215be:	2600      	movgt	r6, #0
 80215c0:	2601      	movle	r6, #1
 80215c2:	2b03      	cmp	r3, #3
 80215c4:	f200 80ae 	bhi.w	8021724 <_dtoa_r+0x33c>
 80215c8:	e8df f003 	tbb	[pc, r3]
 80215cc:	772f8482 	.word	0x772f8482
 80215d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80215d2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80215d4:	441d      	add	r5, r3
 80215d6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80215da:	2b20      	cmp	r3, #32
 80215dc:	dd11      	ble.n	8021602 <_dtoa_r+0x21a>
 80215de:	9a00      	ldr	r2, [sp, #0]
 80215e0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80215e4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80215e8:	fa22 f000 	lsr.w	r0, r2, r0
 80215ec:	fa08 f303 	lsl.w	r3, r8, r3
 80215f0:	4318      	orrs	r0, r3
 80215f2:	f7de ff9f 	bl	8000534 <__aeabi_ui2d>
 80215f6:	2301      	movs	r3, #1
 80215f8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80215fc:	3d01      	subs	r5, #1
 80215fe:	9312      	str	r3, [sp, #72]	; 0x48
 8021600:	e772      	b.n	80214e8 <_dtoa_r+0x100>
 8021602:	f1c3 0020 	rsb	r0, r3, #32
 8021606:	9b00      	ldr	r3, [sp, #0]
 8021608:	fa03 f000 	lsl.w	r0, r3, r0
 802160c:	e7f1      	b.n	80215f2 <_dtoa_r+0x20a>
 802160e:	2301      	movs	r3, #1
 8021610:	e7b1      	b.n	8021576 <_dtoa_r+0x18e>
 8021612:	900e      	str	r0, [sp, #56]	; 0x38
 8021614:	e7b0      	b.n	8021578 <_dtoa_r+0x190>
 8021616:	9b05      	ldr	r3, [sp, #20]
 8021618:	eba3 030b 	sub.w	r3, r3, fp
 802161c:	9305      	str	r3, [sp, #20]
 802161e:	f1cb 0300 	rsb	r3, fp, #0
 8021622:	9308      	str	r3, [sp, #32]
 8021624:	2300      	movs	r3, #0
 8021626:	930b      	str	r3, [sp, #44]	; 0x2c
 8021628:	e7bd      	b.n	80215a6 <_dtoa_r+0x1be>
 802162a:	2301      	movs	r3, #1
 802162c:	9309      	str	r3, [sp, #36]	; 0x24
 802162e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021630:	2b00      	cmp	r3, #0
 8021632:	dd7a      	ble.n	802172a <_dtoa_r+0x342>
 8021634:	9304      	str	r3, [sp, #16]
 8021636:	9303      	str	r3, [sp, #12]
 8021638:	6a65      	ldr	r5, [r4, #36]	; 0x24
 802163a:	2200      	movs	r2, #0
 802163c:	606a      	str	r2, [r5, #4]
 802163e:	2104      	movs	r1, #4
 8021640:	f101 0214 	add.w	r2, r1, #20
 8021644:	429a      	cmp	r2, r3
 8021646:	d975      	bls.n	8021734 <_dtoa_r+0x34c>
 8021648:	6869      	ldr	r1, [r5, #4]
 802164a:	4620      	mov	r0, r4
 802164c:	f000 feca 	bl	80223e4 <_Balloc>
 8021650:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021652:	6028      	str	r0, [r5, #0]
 8021654:	681b      	ldr	r3, [r3, #0]
 8021656:	9302      	str	r3, [sp, #8]
 8021658:	9b03      	ldr	r3, [sp, #12]
 802165a:	2b0e      	cmp	r3, #14
 802165c:	f200 80e5 	bhi.w	802182a <_dtoa_r+0x442>
 8021660:	2e00      	cmp	r6, #0
 8021662:	f000 80e2 	beq.w	802182a <_dtoa_r+0x442>
 8021666:	ed9d 7b00 	vldr	d7, [sp]
 802166a:	f1bb 0f00 	cmp.w	fp, #0
 802166e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8021672:	dd74      	ble.n	802175e <_dtoa_r+0x376>
 8021674:	4a23      	ldr	r2, [pc, #140]	; (8021704 <_dtoa_r+0x31c>)
 8021676:	f00b 030f 	and.w	r3, fp, #15
 802167a:	ea4f 162b 	mov.w	r6, fp, asr #4
 802167e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021682:	06f0      	lsls	r0, r6, #27
 8021684:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021688:	d559      	bpl.n	802173e <_dtoa_r+0x356>
 802168a:	4b1f      	ldr	r3, [pc, #124]	; (8021708 <_dtoa_r+0x320>)
 802168c:	ec51 0b17 	vmov	r0, r1, d7
 8021690:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8021694:	f7df f8ee 	bl	8000874 <__aeabi_ddiv>
 8021698:	e9cd 0100 	strd	r0, r1, [sp]
 802169c:	f006 060f 	and.w	r6, r6, #15
 80216a0:	2503      	movs	r5, #3
 80216a2:	4f19      	ldr	r7, [pc, #100]	; (8021708 <_dtoa_r+0x320>)
 80216a4:	2e00      	cmp	r6, #0
 80216a6:	d14c      	bne.n	8021742 <_dtoa_r+0x35a>
 80216a8:	4642      	mov	r2, r8
 80216aa:	464b      	mov	r3, r9
 80216ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80216b0:	f7df f8e0 	bl	8000874 <__aeabi_ddiv>
 80216b4:	e9cd 0100 	strd	r0, r1, [sp]
 80216b8:	e06a      	b.n	8021790 <_dtoa_r+0x3a8>
 80216ba:	2301      	movs	r3, #1
 80216bc:	9309      	str	r3, [sp, #36]	; 0x24
 80216be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80216c0:	445b      	add	r3, fp
 80216c2:	9304      	str	r3, [sp, #16]
 80216c4:	3301      	adds	r3, #1
 80216c6:	2b01      	cmp	r3, #1
 80216c8:	9303      	str	r3, [sp, #12]
 80216ca:	bfb8      	it	lt
 80216cc:	2301      	movlt	r3, #1
 80216ce:	e7b3      	b.n	8021638 <_dtoa_r+0x250>
 80216d0:	2300      	movs	r3, #0
 80216d2:	e7ab      	b.n	802162c <_dtoa_r+0x244>
 80216d4:	2300      	movs	r3, #0
 80216d6:	e7f1      	b.n	80216bc <_dtoa_r+0x2d4>
 80216d8:	636f4361 	.word	0x636f4361
 80216dc:	3fd287a7 	.word	0x3fd287a7
 80216e0:	8b60c8b3 	.word	0x8b60c8b3
 80216e4:	3fc68a28 	.word	0x3fc68a28
 80216e8:	509f79fb 	.word	0x509f79fb
 80216ec:	3fd34413 	.word	0x3fd34413
 80216f0:	7ff00000 	.word	0x7ff00000
 80216f4:	08031f07 	.word	0x08031f07
 80216f8:	08031efe 	.word	0x08031efe
 80216fc:	08031d8e 	.word	0x08031d8e
 8021700:	3ff80000 	.word	0x3ff80000
 8021704:	08031f38 	.word	0x08031f38
 8021708:	08031f10 	.word	0x08031f10
 802170c:	2601      	movs	r6, #1
 802170e:	2300      	movs	r3, #0
 8021710:	9307      	str	r3, [sp, #28]
 8021712:	9609      	str	r6, [sp, #36]	; 0x24
 8021714:	f04f 33ff 	mov.w	r3, #4294967295
 8021718:	9304      	str	r3, [sp, #16]
 802171a:	9303      	str	r3, [sp, #12]
 802171c:	2200      	movs	r2, #0
 802171e:	2312      	movs	r3, #18
 8021720:	920a      	str	r2, [sp, #40]	; 0x28
 8021722:	e789      	b.n	8021638 <_dtoa_r+0x250>
 8021724:	2301      	movs	r3, #1
 8021726:	9309      	str	r3, [sp, #36]	; 0x24
 8021728:	e7f4      	b.n	8021714 <_dtoa_r+0x32c>
 802172a:	2301      	movs	r3, #1
 802172c:	9304      	str	r3, [sp, #16]
 802172e:	9303      	str	r3, [sp, #12]
 8021730:	461a      	mov	r2, r3
 8021732:	e7f5      	b.n	8021720 <_dtoa_r+0x338>
 8021734:	686a      	ldr	r2, [r5, #4]
 8021736:	3201      	adds	r2, #1
 8021738:	606a      	str	r2, [r5, #4]
 802173a:	0049      	lsls	r1, r1, #1
 802173c:	e780      	b.n	8021640 <_dtoa_r+0x258>
 802173e:	2502      	movs	r5, #2
 8021740:	e7af      	b.n	80216a2 <_dtoa_r+0x2ba>
 8021742:	07f1      	lsls	r1, r6, #31
 8021744:	d508      	bpl.n	8021758 <_dtoa_r+0x370>
 8021746:	4640      	mov	r0, r8
 8021748:	4649      	mov	r1, r9
 802174a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802174e:	f7de ff67 	bl	8000620 <__aeabi_dmul>
 8021752:	3501      	adds	r5, #1
 8021754:	4680      	mov	r8, r0
 8021756:	4689      	mov	r9, r1
 8021758:	1076      	asrs	r6, r6, #1
 802175a:	3708      	adds	r7, #8
 802175c:	e7a2      	b.n	80216a4 <_dtoa_r+0x2bc>
 802175e:	f000 809d 	beq.w	802189c <_dtoa_r+0x4b4>
 8021762:	f1cb 0600 	rsb	r6, fp, #0
 8021766:	4b9f      	ldr	r3, [pc, #636]	; (80219e4 <_dtoa_r+0x5fc>)
 8021768:	4f9f      	ldr	r7, [pc, #636]	; (80219e8 <_dtoa_r+0x600>)
 802176a:	f006 020f 	and.w	r2, r6, #15
 802176e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802177a:	f7de ff51 	bl	8000620 <__aeabi_dmul>
 802177e:	e9cd 0100 	strd	r0, r1, [sp]
 8021782:	1136      	asrs	r6, r6, #4
 8021784:	2300      	movs	r3, #0
 8021786:	2502      	movs	r5, #2
 8021788:	2e00      	cmp	r6, #0
 802178a:	d17c      	bne.n	8021886 <_dtoa_r+0x49e>
 802178c:	2b00      	cmp	r3, #0
 802178e:	d191      	bne.n	80216b4 <_dtoa_r+0x2cc>
 8021790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021792:	2b00      	cmp	r3, #0
 8021794:	f000 8084 	beq.w	80218a0 <_dtoa_r+0x4b8>
 8021798:	e9dd 8900 	ldrd	r8, r9, [sp]
 802179c:	2200      	movs	r2, #0
 802179e:	4b93      	ldr	r3, [pc, #588]	; (80219ec <_dtoa_r+0x604>)
 80217a0:	4640      	mov	r0, r8
 80217a2:	4649      	mov	r1, r9
 80217a4:	f7df f9ae 	bl	8000b04 <__aeabi_dcmplt>
 80217a8:	2800      	cmp	r0, #0
 80217aa:	d079      	beq.n	80218a0 <_dtoa_r+0x4b8>
 80217ac:	9b03      	ldr	r3, [sp, #12]
 80217ae:	2b00      	cmp	r3, #0
 80217b0:	d076      	beq.n	80218a0 <_dtoa_r+0x4b8>
 80217b2:	9b04      	ldr	r3, [sp, #16]
 80217b4:	2b00      	cmp	r3, #0
 80217b6:	dd34      	ble.n	8021822 <_dtoa_r+0x43a>
 80217b8:	2200      	movs	r2, #0
 80217ba:	4b8d      	ldr	r3, [pc, #564]	; (80219f0 <_dtoa_r+0x608>)
 80217bc:	4640      	mov	r0, r8
 80217be:	4649      	mov	r1, r9
 80217c0:	f7de ff2e 	bl	8000620 <__aeabi_dmul>
 80217c4:	e9cd 0100 	strd	r0, r1, [sp]
 80217c8:	9e04      	ldr	r6, [sp, #16]
 80217ca:	f10b 37ff 	add.w	r7, fp, #4294967295
 80217ce:	3501      	adds	r5, #1
 80217d0:	4628      	mov	r0, r5
 80217d2:	f7de febf 	bl	8000554 <__aeabi_i2d>
 80217d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80217da:	f7de ff21 	bl	8000620 <__aeabi_dmul>
 80217de:	2200      	movs	r2, #0
 80217e0:	4b84      	ldr	r3, [pc, #528]	; (80219f4 <_dtoa_r+0x60c>)
 80217e2:	f7de fd6b 	bl	80002bc <__adddf3>
 80217e6:	4680      	mov	r8, r0
 80217e8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80217ec:	2e00      	cmp	r6, #0
 80217ee:	d15a      	bne.n	80218a6 <_dtoa_r+0x4be>
 80217f0:	2200      	movs	r2, #0
 80217f2:	4b81      	ldr	r3, [pc, #516]	; (80219f8 <_dtoa_r+0x610>)
 80217f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80217f8:	f7de fd5e 	bl	80002b8 <__aeabi_dsub>
 80217fc:	4642      	mov	r2, r8
 80217fe:	464b      	mov	r3, r9
 8021800:	e9cd 0100 	strd	r0, r1, [sp]
 8021804:	f7df f99c 	bl	8000b40 <__aeabi_dcmpgt>
 8021808:	2800      	cmp	r0, #0
 802180a:	f040 829b 	bne.w	8021d44 <_dtoa_r+0x95c>
 802180e:	4642      	mov	r2, r8
 8021810:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8021814:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021818:	f7df f974 	bl	8000b04 <__aeabi_dcmplt>
 802181c:	2800      	cmp	r0, #0
 802181e:	f040 828f 	bne.w	8021d40 <_dtoa_r+0x958>
 8021822:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8021826:	e9cd 2300 	strd	r2, r3, [sp]
 802182a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802182c:	2b00      	cmp	r3, #0
 802182e:	f2c0 8150 	blt.w	8021ad2 <_dtoa_r+0x6ea>
 8021832:	f1bb 0f0e 	cmp.w	fp, #14
 8021836:	f300 814c 	bgt.w	8021ad2 <_dtoa_r+0x6ea>
 802183a:	4b6a      	ldr	r3, [pc, #424]	; (80219e4 <_dtoa_r+0x5fc>)
 802183c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8021840:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021846:	2b00      	cmp	r3, #0
 8021848:	f280 80da 	bge.w	8021a00 <_dtoa_r+0x618>
 802184c:	9b03      	ldr	r3, [sp, #12]
 802184e:	2b00      	cmp	r3, #0
 8021850:	f300 80d6 	bgt.w	8021a00 <_dtoa_r+0x618>
 8021854:	f040 8273 	bne.w	8021d3e <_dtoa_r+0x956>
 8021858:	2200      	movs	r2, #0
 802185a:	4b67      	ldr	r3, [pc, #412]	; (80219f8 <_dtoa_r+0x610>)
 802185c:	4640      	mov	r0, r8
 802185e:	4649      	mov	r1, r9
 8021860:	f7de fede 	bl	8000620 <__aeabi_dmul>
 8021864:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021868:	f7df f960 	bl	8000b2c <__aeabi_dcmpge>
 802186c:	9e03      	ldr	r6, [sp, #12]
 802186e:	4637      	mov	r7, r6
 8021870:	2800      	cmp	r0, #0
 8021872:	f040 824a 	bne.w	8021d0a <_dtoa_r+0x922>
 8021876:	9b02      	ldr	r3, [sp, #8]
 8021878:	9a02      	ldr	r2, [sp, #8]
 802187a:	1c5d      	adds	r5, r3, #1
 802187c:	2331      	movs	r3, #49	; 0x31
 802187e:	7013      	strb	r3, [r2, #0]
 8021880:	f10b 0b01 	add.w	fp, fp, #1
 8021884:	e245      	b.n	8021d12 <_dtoa_r+0x92a>
 8021886:	07f2      	lsls	r2, r6, #31
 8021888:	d505      	bpl.n	8021896 <_dtoa_r+0x4ae>
 802188a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802188e:	f7de fec7 	bl	8000620 <__aeabi_dmul>
 8021892:	3501      	adds	r5, #1
 8021894:	2301      	movs	r3, #1
 8021896:	1076      	asrs	r6, r6, #1
 8021898:	3708      	adds	r7, #8
 802189a:	e775      	b.n	8021788 <_dtoa_r+0x3a0>
 802189c:	2502      	movs	r5, #2
 802189e:	e777      	b.n	8021790 <_dtoa_r+0x3a8>
 80218a0:	465f      	mov	r7, fp
 80218a2:	9e03      	ldr	r6, [sp, #12]
 80218a4:	e794      	b.n	80217d0 <_dtoa_r+0x3e8>
 80218a6:	9a02      	ldr	r2, [sp, #8]
 80218a8:	4b4e      	ldr	r3, [pc, #312]	; (80219e4 <_dtoa_r+0x5fc>)
 80218aa:	4432      	add	r2, r6
 80218ac:	9213      	str	r2, [sp, #76]	; 0x4c
 80218ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80218b0:	1e71      	subs	r1, r6, #1
 80218b2:	2a00      	cmp	r2, #0
 80218b4:	d048      	beq.n	8021948 <_dtoa_r+0x560>
 80218b6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80218ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80218be:	2000      	movs	r0, #0
 80218c0:	494e      	ldr	r1, [pc, #312]	; (80219fc <_dtoa_r+0x614>)
 80218c2:	f7de ffd7 	bl	8000874 <__aeabi_ddiv>
 80218c6:	4642      	mov	r2, r8
 80218c8:	464b      	mov	r3, r9
 80218ca:	f7de fcf5 	bl	80002b8 <__aeabi_dsub>
 80218ce:	9d02      	ldr	r5, [sp, #8]
 80218d0:	4680      	mov	r8, r0
 80218d2:	4689      	mov	r9, r1
 80218d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80218d8:	f7df f952 	bl	8000b80 <__aeabi_d2iz>
 80218dc:	4606      	mov	r6, r0
 80218de:	f7de fe39 	bl	8000554 <__aeabi_i2d>
 80218e2:	4602      	mov	r2, r0
 80218e4:	460b      	mov	r3, r1
 80218e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80218ea:	f7de fce5 	bl	80002b8 <__aeabi_dsub>
 80218ee:	3630      	adds	r6, #48	; 0x30
 80218f0:	f805 6b01 	strb.w	r6, [r5], #1
 80218f4:	4642      	mov	r2, r8
 80218f6:	464b      	mov	r3, r9
 80218f8:	e9cd 0100 	strd	r0, r1, [sp]
 80218fc:	f7df f902 	bl	8000b04 <__aeabi_dcmplt>
 8021900:	2800      	cmp	r0, #0
 8021902:	d165      	bne.n	80219d0 <_dtoa_r+0x5e8>
 8021904:	e9dd 2300 	ldrd	r2, r3, [sp]
 8021908:	2000      	movs	r0, #0
 802190a:	4938      	ldr	r1, [pc, #224]	; (80219ec <_dtoa_r+0x604>)
 802190c:	f7de fcd4 	bl	80002b8 <__aeabi_dsub>
 8021910:	4642      	mov	r2, r8
 8021912:	464b      	mov	r3, r9
 8021914:	f7df f8f6 	bl	8000b04 <__aeabi_dcmplt>
 8021918:	2800      	cmp	r0, #0
 802191a:	f040 80ba 	bne.w	8021a92 <_dtoa_r+0x6aa>
 802191e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021920:	429d      	cmp	r5, r3
 8021922:	f43f af7e 	beq.w	8021822 <_dtoa_r+0x43a>
 8021926:	2200      	movs	r2, #0
 8021928:	4b31      	ldr	r3, [pc, #196]	; (80219f0 <_dtoa_r+0x608>)
 802192a:	4640      	mov	r0, r8
 802192c:	4649      	mov	r1, r9
 802192e:	f7de fe77 	bl	8000620 <__aeabi_dmul>
 8021932:	2200      	movs	r2, #0
 8021934:	4680      	mov	r8, r0
 8021936:	4689      	mov	r9, r1
 8021938:	4b2d      	ldr	r3, [pc, #180]	; (80219f0 <_dtoa_r+0x608>)
 802193a:	e9dd 0100 	ldrd	r0, r1, [sp]
 802193e:	f7de fe6f 	bl	8000620 <__aeabi_dmul>
 8021942:	e9cd 0100 	strd	r0, r1, [sp]
 8021946:	e7c5      	b.n	80218d4 <_dtoa_r+0x4ec>
 8021948:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 802194c:	4642      	mov	r2, r8
 802194e:	464b      	mov	r3, r9
 8021950:	e9d1 0100 	ldrd	r0, r1, [r1]
 8021954:	f7de fe64 	bl	8000620 <__aeabi_dmul>
 8021958:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 802195c:	9d02      	ldr	r5, [sp, #8]
 802195e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021962:	f7df f90d 	bl	8000b80 <__aeabi_d2iz>
 8021966:	4606      	mov	r6, r0
 8021968:	f7de fdf4 	bl	8000554 <__aeabi_i2d>
 802196c:	3630      	adds	r6, #48	; 0x30
 802196e:	4602      	mov	r2, r0
 8021970:	460b      	mov	r3, r1
 8021972:	e9dd 0100 	ldrd	r0, r1, [sp]
 8021976:	f7de fc9f 	bl	80002b8 <__aeabi_dsub>
 802197a:	f805 6b01 	strb.w	r6, [r5], #1
 802197e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021980:	42ab      	cmp	r3, r5
 8021982:	4680      	mov	r8, r0
 8021984:	4689      	mov	r9, r1
 8021986:	f04f 0200 	mov.w	r2, #0
 802198a:	d125      	bne.n	80219d8 <_dtoa_r+0x5f0>
 802198c:	4b1b      	ldr	r3, [pc, #108]	; (80219fc <_dtoa_r+0x614>)
 802198e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8021992:	f7de fc93 	bl	80002bc <__adddf3>
 8021996:	4602      	mov	r2, r0
 8021998:	460b      	mov	r3, r1
 802199a:	4640      	mov	r0, r8
 802199c:	4649      	mov	r1, r9
 802199e:	f7df f8cf 	bl	8000b40 <__aeabi_dcmpgt>
 80219a2:	2800      	cmp	r0, #0
 80219a4:	d175      	bne.n	8021a92 <_dtoa_r+0x6aa>
 80219a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80219aa:	2000      	movs	r0, #0
 80219ac:	4913      	ldr	r1, [pc, #76]	; (80219fc <_dtoa_r+0x614>)
 80219ae:	f7de fc83 	bl	80002b8 <__aeabi_dsub>
 80219b2:	4602      	mov	r2, r0
 80219b4:	460b      	mov	r3, r1
 80219b6:	4640      	mov	r0, r8
 80219b8:	4649      	mov	r1, r9
 80219ba:	f7df f8a3 	bl	8000b04 <__aeabi_dcmplt>
 80219be:	2800      	cmp	r0, #0
 80219c0:	f43f af2f 	beq.w	8021822 <_dtoa_r+0x43a>
 80219c4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80219c8:	2b30      	cmp	r3, #48	; 0x30
 80219ca:	f105 32ff 	add.w	r2, r5, #4294967295
 80219ce:	d001      	beq.n	80219d4 <_dtoa_r+0x5ec>
 80219d0:	46bb      	mov	fp, r7
 80219d2:	e04d      	b.n	8021a70 <_dtoa_r+0x688>
 80219d4:	4615      	mov	r5, r2
 80219d6:	e7f5      	b.n	80219c4 <_dtoa_r+0x5dc>
 80219d8:	4b05      	ldr	r3, [pc, #20]	; (80219f0 <_dtoa_r+0x608>)
 80219da:	f7de fe21 	bl	8000620 <__aeabi_dmul>
 80219de:	e9cd 0100 	strd	r0, r1, [sp]
 80219e2:	e7bc      	b.n	802195e <_dtoa_r+0x576>
 80219e4:	08031f38 	.word	0x08031f38
 80219e8:	08031f10 	.word	0x08031f10
 80219ec:	3ff00000 	.word	0x3ff00000
 80219f0:	40240000 	.word	0x40240000
 80219f4:	401c0000 	.word	0x401c0000
 80219f8:	40140000 	.word	0x40140000
 80219fc:	3fe00000 	.word	0x3fe00000
 8021a00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8021a04:	9d02      	ldr	r5, [sp, #8]
 8021a06:	4642      	mov	r2, r8
 8021a08:	464b      	mov	r3, r9
 8021a0a:	4630      	mov	r0, r6
 8021a0c:	4639      	mov	r1, r7
 8021a0e:	f7de ff31 	bl	8000874 <__aeabi_ddiv>
 8021a12:	f7df f8b5 	bl	8000b80 <__aeabi_d2iz>
 8021a16:	9000      	str	r0, [sp, #0]
 8021a18:	f7de fd9c 	bl	8000554 <__aeabi_i2d>
 8021a1c:	4642      	mov	r2, r8
 8021a1e:	464b      	mov	r3, r9
 8021a20:	f7de fdfe 	bl	8000620 <__aeabi_dmul>
 8021a24:	4602      	mov	r2, r0
 8021a26:	460b      	mov	r3, r1
 8021a28:	4630      	mov	r0, r6
 8021a2a:	4639      	mov	r1, r7
 8021a2c:	f7de fc44 	bl	80002b8 <__aeabi_dsub>
 8021a30:	9e00      	ldr	r6, [sp, #0]
 8021a32:	9f03      	ldr	r7, [sp, #12]
 8021a34:	3630      	adds	r6, #48	; 0x30
 8021a36:	f805 6b01 	strb.w	r6, [r5], #1
 8021a3a:	9e02      	ldr	r6, [sp, #8]
 8021a3c:	1bae      	subs	r6, r5, r6
 8021a3e:	42b7      	cmp	r7, r6
 8021a40:	4602      	mov	r2, r0
 8021a42:	460b      	mov	r3, r1
 8021a44:	d138      	bne.n	8021ab8 <_dtoa_r+0x6d0>
 8021a46:	f7de fc39 	bl	80002bc <__adddf3>
 8021a4a:	4606      	mov	r6, r0
 8021a4c:	460f      	mov	r7, r1
 8021a4e:	4602      	mov	r2, r0
 8021a50:	460b      	mov	r3, r1
 8021a52:	4640      	mov	r0, r8
 8021a54:	4649      	mov	r1, r9
 8021a56:	f7df f855 	bl	8000b04 <__aeabi_dcmplt>
 8021a5a:	b9c8      	cbnz	r0, 8021a90 <_dtoa_r+0x6a8>
 8021a5c:	4632      	mov	r2, r6
 8021a5e:	463b      	mov	r3, r7
 8021a60:	4640      	mov	r0, r8
 8021a62:	4649      	mov	r1, r9
 8021a64:	f7df f844 	bl	8000af0 <__aeabi_dcmpeq>
 8021a68:	b110      	cbz	r0, 8021a70 <_dtoa_r+0x688>
 8021a6a:	9b00      	ldr	r3, [sp, #0]
 8021a6c:	07db      	lsls	r3, r3, #31
 8021a6e:	d40f      	bmi.n	8021a90 <_dtoa_r+0x6a8>
 8021a70:	4651      	mov	r1, sl
 8021a72:	4620      	mov	r0, r4
 8021a74:	f000 fcea 	bl	802244c <_Bfree>
 8021a78:	2300      	movs	r3, #0
 8021a7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021a7c:	702b      	strb	r3, [r5, #0]
 8021a7e:	f10b 0301 	add.w	r3, fp, #1
 8021a82:	6013      	str	r3, [r2, #0]
 8021a84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021a86:	2b00      	cmp	r3, #0
 8021a88:	f43f acf8 	beq.w	802147c <_dtoa_r+0x94>
 8021a8c:	601d      	str	r5, [r3, #0]
 8021a8e:	e4f5      	b.n	802147c <_dtoa_r+0x94>
 8021a90:	465f      	mov	r7, fp
 8021a92:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8021a96:	2a39      	cmp	r2, #57	; 0x39
 8021a98:	f105 33ff 	add.w	r3, r5, #4294967295
 8021a9c:	d106      	bne.n	8021aac <_dtoa_r+0x6c4>
 8021a9e:	9a02      	ldr	r2, [sp, #8]
 8021aa0:	429a      	cmp	r2, r3
 8021aa2:	d107      	bne.n	8021ab4 <_dtoa_r+0x6cc>
 8021aa4:	2330      	movs	r3, #48	; 0x30
 8021aa6:	7013      	strb	r3, [r2, #0]
 8021aa8:	3701      	adds	r7, #1
 8021aaa:	4613      	mov	r3, r2
 8021aac:	781a      	ldrb	r2, [r3, #0]
 8021aae:	3201      	adds	r2, #1
 8021ab0:	701a      	strb	r2, [r3, #0]
 8021ab2:	e78d      	b.n	80219d0 <_dtoa_r+0x5e8>
 8021ab4:	461d      	mov	r5, r3
 8021ab6:	e7ec      	b.n	8021a92 <_dtoa_r+0x6aa>
 8021ab8:	2200      	movs	r2, #0
 8021aba:	4ba4      	ldr	r3, [pc, #656]	; (8021d4c <_dtoa_r+0x964>)
 8021abc:	f7de fdb0 	bl	8000620 <__aeabi_dmul>
 8021ac0:	2200      	movs	r2, #0
 8021ac2:	2300      	movs	r3, #0
 8021ac4:	4606      	mov	r6, r0
 8021ac6:	460f      	mov	r7, r1
 8021ac8:	f7df f812 	bl	8000af0 <__aeabi_dcmpeq>
 8021acc:	2800      	cmp	r0, #0
 8021ace:	d09a      	beq.n	8021a06 <_dtoa_r+0x61e>
 8021ad0:	e7ce      	b.n	8021a70 <_dtoa_r+0x688>
 8021ad2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021ad4:	2a00      	cmp	r2, #0
 8021ad6:	f000 80cd 	beq.w	8021c74 <_dtoa_r+0x88c>
 8021ada:	9a07      	ldr	r2, [sp, #28]
 8021adc:	2a01      	cmp	r2, #1
 8021ade:	f300 80af 	bgt.w	8021c40 <_dtoa_r+0x858>
 8021ae2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8021ae4:	2a00      	cmp	r2, #0
 8021ae6:	f000 80a7 	beq.w	8021c38 <_dtoa_r+0x850>
 8021aea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8021aee:	9e08      	ldr	r6, [sp, #32]
 8021af0:	9d05      	ldr	r5, [sp, #20]
 8021af2:	9a05      	ldr	r2, [sp, #20]
 8021af4:	441a      	add	r2, r3
 8021af6:	9205      	str	r2, [sp, #20]
 8021af8:	9a06      	ldr	r2, [sp, #24]
 8021afa:	2101      	movs	r1, #1
 8021afc:	441a      	add	r2, r3
 8021afe:	4620      	mov	r0, r4
 8021b00:	9206      	str	r2, [sp, #24]
 8021b02:	f000 fd43 	bl	802258c <__i2b>
 8021b06:	4607      	mov	r7, r0
 8021b08:	2d00      	cmp	r5, #0
 8021b0a:	dd0c      	ble.n	8021b26 <_dtoa_r+0x73e>
 8021b0c:	9b06      	ldr	r3, [sp, #24]
 8021b0e:	2b00      	cmp	r3, #0
 8021b10:	dd09      	ble.n	8021b26 <_dtoa_r+0x73e>
 8021b12:	42ab      	cmp	r3, r5
 8021b14:	9a05      	ldr	r2, [sp, #20]
 8021b16:	bfa8      	it	ge
 8021b18:	462b      	movge	r3, r5
 8021b1a:	1ad2      	subs	r2, r2, r3
 8021b1c:	9205      	str	r2, [sp, #20]
 8021b1e:	9a06      	ldr	r2, [sp, #24]
 8021b20:	1aed      	subs	r5, r5, r3
 8021b22:	1ad3      	subs	r3, r2, r3
 8021b24:	9306      	str	r3, [sp, #24]
 8021b26:	9b08      	ldr	r3, [sp, #32]
 8021b28:	b1f3      	cbz	r3, 8021b68 <_dtoa_r+0x780>
 8021b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b2c:	2b00      	cmp	r3, #0
 8021b2e:	f000 80a5 	beq.w	8021c7c <_dtoa_r+0x894>
 8021b32:	2e00      	cmp	r6, #0
 8021b34:	dd10      	ble.n	8021b58 <_dtoa_r+0x770>
 8021b36:	4639      	mov	r1, r7
 8021b38:	4632      	mov	r2, r6
 8021b3a:	4620      	mov	r0, r4
 8021b3c:	f000 fdbc 	bl	80226b8 <__pow5mult>
 8021b40:	4652      	mov	r2, sl
 8021b42:	4601      	mov	r1, r0
 8021b44:	4607      	mov	r7, r0
 8021b46:	4620      	mov	r0, r4
 8021b48:	f000 fd29 	bl	802259e <__multiply>
 8021b4c:	4651      	mov	r1, sl
 8021b4e:	4680      	mov	r8, r0
 8021b50:	4620      	mov	r0, r4
 8021b52:	f000 fc7b 	bl	802244c <_Bfree>
 8021b56:	46c2      	mov	sl, r8
 8021b58:	9b08      	ldr	r3, [sp, #32]
 8021b5a:	1b9a      	subs	r2, r3, r6
 8021b5c:	d004      	beq.n	8021b68 <_dtoa_r+0x780>
 8021b5e:	4651      	mov	r1, sl
 8021b60:	4620      	mov	r0, r4
 8021b62:	f000 fda9 	bl	80226b8 <__pow5mult>
 8021b66:	4682      	mov	sl, r0
 8021b68:	2101      	movs	r1, #1
 8021b6a:	4620      	mov	r0, r4
 8021b6c:	f000 fd0e 	bl	802258c <__i2b>
 8021b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	4606      	mov	r6, r0
 8021b76:	f340 8083 	ble.w	8021c80 <_dtoa_r+0x898>
 8021b7a:	461a      	mov	r2, r3
 8021b7c:	4601      	mov	r1, r0
 8021b7e:	4620      	mov	r0, r4
 8021b80:	f000 fd9a 	bl	80226b8 <__pow5mult>
 8021b84:	9b07      	ldr	r3, [sp, #28]
 8021b86:	2b01      	cmp	r3, #1
 8021b88:	4606      	mov	r6, r0
 8021b8a:	dd7c      	ble.n	8021c86 <_dtoa_r+0x89e>
 8021b8c:	f04f 0800 	mov.w	r8, #0
 8021b90:	6933      	ldr	r3, [r6, #16]
 8021b92:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021b96:	6918      	ldr	r0, [r3, #16]
 8021b98:	f000 fcaa 	bl	80224f0 <__hi0bits>
 8021b9c:	f1c0 0020 	rsb	r0, r0, #32
 8021ba0:	9b06      	ldr	r3, [sp, #24]
 8021ba2:	4418      	add	r0, r3
 8021ba4:	f010 001f 	ands.w	r0, r0, #31
 8021ba8:	f000 8096 	beq.w	8021cd8 <_dtoa_r+0x8f0>
 8021bac:	f1c0 0320 	rsb	r3, r0, #32
 8021bb0:	2b04      	cmp	r3, #4
 8021bb2:	f340 8087 	ble.w	8021cc4 <_dtoa_r+0x8dc>
 8021bb6:	9b05      	ldr	r3, [sp, #20]
 8021bb8:	f1c0 001c 	rsb	r0, r0, #28
 8021bbc:	4403      	add	r3, r0
 8021bbe:	9305      	str	r3, [sp, #20]
 8021bc0:	9b06      	ldr	r3, [sp, #24]
 8021bc2:	4405      	add	r5, r0
 8021bc4:	4403      	add	r3, r0
 8021bc6:	9306      	str	r3, [sp, #24]
 8021bc8:	9b05      	ldr	r3, [sp, #20]
 8021bca:	2b00      	cmp	r3, #0
 8021bcc:	dd05      	ble.n	8021bda <_dtoa_r+0x7f2>
 8021bce:	4651      	mov	r1, sl
 8021bd0:	461a      	mov	r2, r3
 8021bd2:	4620      	mov	r0, r4
 8021bd4:	f000 fdbe 	bl	8022754 <__lshift>
 8021bd8:	4682      	mov	sl, r0
 8021bda:	9b06      	ldr	r3, [sp, #24]
 8021bdc:	2b00      	cmp	r3, #0
 8021bde:	dd05      	ble.n	8021bec <_dtoa_r+0x804>
 8021be0:	4631      	mov	r1, r6
 8021be2:	461a      	mov	r2, r3
 8021be4:	4620      	mov	r0, r4
 8021be6:	f000 fdb5 	bl	8022754 <__lshift>
 8021bea:	4606      	mov	r6, r0
 8021bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021bee:	2b00      	cmp	r3, #0
 8021bf0:	d074      	beq.n	8021cdc <_dtoa_r+0x8f4>
 8021bf2:	4631      	mov	r1, r6
 8021bf4:	4650      	mov	r0, sl
 8021bf6:	f000 fdfe 	bl	80227f6 <__mcmp>
 8021bfa:	2800      	cmp	r0, #0
 8021bfc:	da6e      	bge.n	8021cdc <_dtoa_r+0x8f4>
 8021bfe:	2300      	movs	r3, #0
 8021c00:	4651      	mov	r1, sl
 8021c02:	220a      	movs	r2, #10
 8021c04:	4620      	mov	r0, r4
 8021c06:	f000 fc38 	bl	802247a <__multadd>
 8021c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c0c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021c10:	4682      	mov	sl, r0
 8021c12:	2b00      	cmp	r3, #0
 8021c14:	f000 81a8 	beq.w	8021f68 <_dtoa_r+0xb80>
 8021c18:	2300      	movs	r3, #0
 8021c1a:	4639      	mov	r1, r7
 8021c1c:	220a      	movs	r2, #10
 8021c1e:	4620      	mov	r0, r4
 8021c20:	f000 fc2b 	bl	802247a <__multadd>
 8021c24:	9b04      	ldr	r3, [sp, #16]
 8021c26:	2b00      	cmp	r3, #0
 8021c28:	4607      	mov	r7, r0
 8021c2a:	f300 80c8 	bgt.w	8021dbe <_dtoa_r+0x9d6>
 8021c2e:	9b07      	ldr	r3, [sp, #28]
 8021c30:	2b02      	cmp	r3, #2
 8021c32:	f340 80c4 	ble.w	8021dbe <_dtoa_r+0x9d6>
 8021c36:	e059      	b.n	8021cec <_dtoa_r+0x904>
 8021c38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021c3a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8021c3e:	e756      	b.n	8021aee <_dtoa_r+0x706>
 8021c40:	9b03      	ldr	r3, [sp, #12]
 8021c42:	1e5e      	subs	r6, r3, #1
 8021c44:	9b08      	ldr	r3, [sp, #32]
 8021c46:	42b3      	cmp	r3, r6
 8021c48:	bfbf      	itttt	lt
 8021c4a:	9b08      	ldrlt	r3, [sp, #32]
 8021c4c:	9608      	strlt	r6, [sp, #32]
 8021c4e:	1af2      	sublt	r2, r6, r3
 8021c50:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8021c52:	bfb6      	itet	lt
 8021c54:	189b      	addlt	r3, r3, r2
 8021c56:	1b9e      	subge	r6, r3, r6
 8021c58:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8021c5a:	9b03      	ldr	r3, [sp, #12]
 8021c5c:	bfb8      	it	lt
 8021c5e:	2600      	movlt	r6, #0
 8021c60:	2b00      	cmp	r3, #0
 8021c62:	bfb9      	ittee	lt
 8021c64:	9b05      	ldrlt	r3, [sp, #20]
 8021c66:	9a03      	ldrlt	r2, [sp, #12]
 8021c68:	9d05      	ldrge	r5, [sp, #20]
 8021c6a:	9b03      	ldrge	r3, [sp, #12]
 8021c6c:	bfbc      	itt	lt
 8021c6e:	1a9d      	sublt	r5, r3, r2
 8021c70:	2300      	movlt	r3, #0
 8021c72:	e73e      	b.n	8021af2 <_dtoa_r+0x70a>
 8021c74:	9e08      	ldr	r6, [sp, #32]
 8021c76:	9d05      	ldr	r5, [sp, #20]
 8021c78:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8021c7a:	e745      	b.n	8021b08 <_dtoa_r+0x720>
 8021c7c:	9a08      	ldr	r2, [sp, #32]
 8021c7e:	e76e      	b.n	8021b5e <_dtoa_r+0x776>
 8021c80:	9b07      	ldr	r3, [sp, #28]
 8021c82:	2b01      	cmp	r3, #1
 8021c84:	dc19      	bgt.n	8021cba <_dtoa_r+0x8d2>
 8021c86:	9b00      	ldr	r3, [sp, #0]
 8021c88:	b9bb      	cbnz	r3, 8021cba <_dtoa_r+0x8d2>
 8021c8a:	9b01      	ldr	r3, [sp, #4]
 8021c8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8021c90:	b99b      	cbnz	r3, 8021cba <_dtoa_r+0x8d2>
 8021c92:	9b01      	ldr	r3, [sp, #4]
 8021c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8021c98:	0d1b      	lsrs	r3, r3, #20
 8021c9a:	051b      	lsls	r3, r3, #20
 8021c9c:	b183      	cbz	r3, 8021cc0 <_dtoa_r+0x8d8>
 8021c9e:	9b05      	ldr	r3, [sp, #20]
 8021ca0:	3301      	adds	r3, #1
 8021ca2:	9305      	str	r3, [sp, #20]
 8021ca4:	9b06      	ldr	r3, [sp, #24]
 8021ca6:	3301      	adds	r3, #1
 8021ca8:	9306      	str	r3, [sp, #24]
 8021caa:	f04f 0801 	mov.w	r8, #1
 8021cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021cb0:	2b00      	cmp	r3, #0
 8021cb2:	f47f af6d 	bne.w	8021b90 <_dtoa_r+0x7a8>
 8021cb6:	2001      	movs	r0, #1
 8021cb8:	e772      	b.n	8021ba0 <_dtoa_r+0x7b8>
 8021cba:	f04f 0800 	mov.w	r8, #0
 8021cbe:	e7f6      	b.n	8021cae <_dtoa_r+0x8c6>
 8021cc0:	4698      	mov	r8, r3
 8021cc2:	e7f4      	b.n	8021cae <_dtoa_r+0x8c6>
 8021cc4:	d080      	beq.n	8021bc8 <_dtoa_r+0x7e0>
 8021cc6:	9a05      	ldr	r2, [sp, #20]
 8021cc8:	331c      	adds	r3, #28
 8021cca:	441a      	add	r2, r3
 8021ccc:	9205      	str	r2, [sp, #20]
 8021cce:	9a06      	ldr	r2, [sp, #24]
 8021cd0:	441a      	add	r2, r3
 8021cd2:	441d      	add	r5, r3
 8021cd4:	4613      	mov	r3, r2
 8021cd6:	e776      	b.n	8021bc6 <_dtoa_r+0x7de>
 8021cd8:	4603      	mov	r3, r0
 8021cda:	e7f4      	b.n	8021cc6 <_dtoa_r+0x8de>
 8021cdc:	9b03      	ldr	r3, [sp, #12]
 8021cde:	2b00      	cmp	r3, #0
 8021ce0:	dc36      	bgt.n	8021d50 <_dtoa_r+0x968>
 8021ce2:	9b07      	ldr	r3, [sp, #28]
 8021ce4:	2b02      	cmp	r3, #2
 8021ce6:	dd33      	ble.n	8021d50 <_dtoa_r+0x968>
 8021ce8:	9b03      	ldr	r3, [sp, #12]
 8021cea:	9304      	str	r3, [sp, #16]
 8021cec:	9b04      	ldr	r3, [sp, #16]
 8021cee:	b963      	cbnz	r3, 8021d0a <_dtoa_r+0x922>
 8021cf0:	4631      	mov	r1, r6
 8021cf2:	2205      	movs	r2, #5
 8021cf4:	4620      	mov	r0, r4
 8021cf6:	f000 fbc0 	bl	802247a <__multadd>
 8021cfa:	4601      	mov	r1, r0
 8021cfc:	4606      	mov	r6, r0
 8021cfe:	4650      	mov	r0, sl
 8021d00:	f000 fd79 	bl	80227f6 <__mcmp>
 8021d04:	2800      	cmp	r0, #0
 8021d06:	f73f adb6 	bgt.w	8021876 <_dtoa_r+0x48e>
 8021d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021d0c:	9d02      	ldr	r5, [sp, #8]
 8021d0e:	ea6f 0b03 	mvn.w	fp, r3
 8021d12:	2300      	movs	r3, #0
 8021d14:	9303      	str	r3, [sp, #12]
 8021d16:	4631      	mov	r1, r6
 8021d18:	4620      	mov	r0, r4
 8021d1a:	f000 fb97 	bl	802244c <_Bfree>
 8021d1e:	2f00      	cmp	r7, #0
 8021d20:	f43f aea6 	beq.w	8021a70 <_dtoa_r+0x688>
 8021d24:	9b03      	ldr	r3, [sp, #12]
 8021d26:	b12b      	cbz	r3, 8021d34 <_dtoa_r+0x94c>
 8021d28:	42bb      	cmp	r3, r7
 8021d2a:	d003      	beq.n	8021d34 <_dtoa_r+0x94c>
 8021d2c:	4619      	mov	r1, r3
 8021d2e:	4620      	mov	r0, r4
 8021d30:	f000 fb8c 	bl	802244c <_Bfree>
 8021d34:	4639      	mov	r1, r7
 8021d36:	4620      	mov	r0, r4
 8021d38:	f000 fb88 	bl	802244c <_Bfree>
 8021d3c:	e698      	b.n	8021a70 <_dtoa_r+0x688>
 8021d3e:	2600      	movs	r6, #0
 8021d40:	4637      	mov	r7, r6
 8021d42:	e7e2      	b.n	8021d0a <_dtoa_r+0x922>
 8021d44:	46bb      	mov	fp, r7
 8021d46:	4637      	mov	r7, r6
 8021d48:	e595      	b.n	8021876 <_dtoa_r+0x48e>
 8021d4a:	bf00      	nop
 8021d4c:	40240000 	.word	0x40240000
 8021d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d52:	bb93      	cbnz	r3, 8021dba <_dtoa_r+0x9d2>
 8021d54:	9b03      	ldr	r3, [sp, #12]
 8021d56:	9304      	str	r3, [sp, #16]
 8021d58:	9d02      	ldr	r5, [sp, #8]
 8021d5a:	4631      	mov	r1, r6
 8021d5c:	4650      	mov	r0, sl
 8021d5e:	f7ff fab7 	bl	80212d0 <quorem>
 8021d62:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8021d66:	f805 9b01 	strb.w	r9, [r5], #1
 8021d6a:	9b02      	ldr	r3, [sp, #8]
 8021d6c:	9a04      	ldr	r2, [sp, #16]
 8021d6e:	1aeb      	subs	r3, r5, r3
 8021d70:	429a      	cmp	r2, r3
 8021d72:	f300 80dc 	bgt.w	8021f2e <_dtoa_r+0xb46>
 8021d76:	9b02      	ldr	r3, [sp, #8]
 8021d78:	2a01      	cmp	r2, #1
 8021d7a:	bfac      	ite	ge
 8021d7c:	189b      	addge	r3, r3, r2
 8021d7e:	3301      	addlt	r3, #1
 8021d80:	4698      	mov	r8, r3
 8021d82:	2300      	movs	r3, #0
 8021d84:	9303      	str	r3, [sp, #12]
 8021d86:	4651      	mov	r1, sl
 8021d88:	2201      	movs	r2, #1
 8021d8a:	4620      	mov	r0, r4
 8021d8c:	f000 fce2 	bl	8022754 <__lshift>
 8021d90:	4631      	mov	r1, r6
 8021d92:	4682      	mov	sl, r0
 8021d94:	f000 fd2f 	bl	80227f6 <__mcmp>
 8021d98:	2800      	cmp	r0, #0
 8021d9a:	f300 808d 	bgt.w	8021eb8 <_dtoa_r+0xad0>
 8021d9e:	d103      	bne.n	8021da8 <_dtoa_r+0x9c0>
 8021da0:	f019 0f01 	tst.w	r9, #1
 8021da4:	f040 8088 	bne.w	8021eb8 <_dtoa_r+0xad0>
 8021da8:	4645      	mov	r5, r8
 8021daa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021dae:	2b30      	cmp	r3, #48	; 0x30
 8021db0:	f105 32ff 	add.w	r2, r5, #4294967295
 8021db4:	d1af      	bne.n	8021d16 <_dtoa_r+0x92e>
 8021db6:	4615      	mov	r5, r2
 8021db8:	e7f7      	b.n	8021daa <_dtoa_r+0x9c2>
 8021dba:	9b03      	ldr	r3, [sp, #12]
 8021dbc:	9304      	str	r3, [sp, #16]
 8021dbe:	2d00      	cmp	r5, #0
 8021dc0:	dd05      	ble.n	8021dce <_dtoa_r+0x9e6>
 8021dc2:	4639      	mov	r1, r7
 8021dc4:	462a      	mov	r2, r5
 8021dc6:	4620      	mov	r0, r4
 8021dc8:	f000 fcc4 	bl	8022754 <__lshift>
 8021dcc:	4607      	mov	r7, r0
 8021dce:	f1b8 0f00 	cmp.w	r8, #0
 8021dd2:	d04c      	beq.n	8021e6e <_dtoa_r+0xa86>
 8021dd4:	6879      	ldr	r1, [r7, #4]
 8021dd6:	4620      	mov	r0, r4
 8021dd8:	f000 fb04 	bl	80223e4 <_Balloc>
 8021ddc:	693a      	ldr	r2, [r7, #16]
 8021dde:	3202      	adds	r2, #2
 8021de0:	4605      	mov	r5, r0
 8021de2:	0092      	lsls	r2, r2, #2
 8021de4:	f107 010c 	add.w	r1, r7, #12
 8021de8:	300c      	adds	r0, #12
 8021dea:	f7fe fa3f 	bl	802026c <memcpy>
 8021dee:	2201      	movs	r2, #1
 8021df0:	4629      	mov	r1, r5
 8021df2:	4620      	mov	r0, r4
 8021df4:	f000 fcae 	bl	8022754 <__lshift>
 8021df8:	9b00      	ldr	r3, [sp, #0]
 8021dfa:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8021dfe:	9703      	str	r7, [sp, #12]
 8021e00:	f003 0301 	and.w	r3, r3, #1
 8021e04:	4607      	mov	r7, r0
 8021e06:	9305      	str	r3, [sp, #20]
 8021e08:	4631      	mov	r1, r6
 8021e0a:	4650      	mov	r0, sl
 8021e0c:	f7ff fa60 	bl	80212d0 <quorem>
 8021e10:	9903      	ldr	r1, [sp, #12]
 8021e12:	4605      	mov	r5, r0
 8021e14:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8021e18:	4650      	mov	r0, sl
 8021e1a:	f000 fcec 	bl	80227f6 <__mcmp>
 8021e1e:	463a      	mov	r2, r7
 8021e20:	9000      	str	r0, [sp, #0]
 8021e22:	4631      	mov	r1, r6
 8021e24:	4620      	mov	r0, r4
 8021e26:	f000 fd00 	bl	802282a <__mdiff>
 8021e2a:	68c3      	ldr	r3, [r0, #12]
 8021e2c:	4602      	mov	r2, r0
 8021e2e:	bb03      	cbnz	r3, 8021e72 <_dtoa_r+0xa8a>
 8021e30:	4601      	mov	r1, r0
 8021e32:	9006      	str	r0, [sp, #24]
 8021e34:	4650      	mov	r0, sl
 8021e36:	f000 fcde 	bl	80227f6 <__mcmp>
 8021e3a:	9a06      	ldr	r2, [sp, #24]
 8021e3c:	4603      	mov	r3, r0
 8021e3e:	4611      	mov	r1, r2
 8021e40:	4620      	mov	r0, r4
 8021e42:	9306      	str	r3, [sp, #24]
 8021e44:	f000 fb02 	bl	802244c <_Bfree>
 8021e48:	9b06      	ldr	r3, [sp, #24]
 8021e4a:	b9a3      	cbnz	r3, 8021e76 <_dtoa_r+0xa8e>
 8021e4c:	9a07      	ldr	r2, [sp, #28]
 8021e4e:	b992      	cbnz	r2, 8021e76 <_dtoa_r+0xa8e>
 8021e50:	9a05      	ldr	r2, [sp, #20]
 8021e52:	b982      	cbnz	r2, 8021e76 <_dtoa_r+0xa8e>
 8021e54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8021e58:	d029      	beq.n	8021eae <_dtoa_r+0xac6>
 8021e5a:	9b00      	ldr	r3, [sp, #0]
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	dd01      	ble.n	8021e64 <_dtoa_r+0xa7c>
 8021e60:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8021e64:	f108 0501 	add.w	r5, r8, #1
 8021e68:	f888 9000 	strb.w	r9, [r8]
 8021e6c:	e753      	b.n	8021d16 <_dtoa_r+0x92e>
 8021e6e:	4638      	mov	r0, r7
 8021e70:	e7c2      	b.n	8021df8 <_dtoa_r+0xa10>
 8021e72:	2301      	movs	r3, #1
 8021e74:	e7e3      	b.n	8021e3e <_dtoa_r+0xa56>
 8021e76:	9a00      	ldr	r2, [sp, #0]
 8021e78:	2a00      	cmp	r2, #0
 8021e7a:	db04      	blt.n	8021e86 <_dtoa_r+0xa9e>
 8021e7c:	d125      	bne.n	8021eca <_dtoa_r+0xae2>
 8021e7e:	9a07      	ldr	r2, [sp, #28]
 8021e80:	bb1a      	cbnz	r2, 8021eca <_dtoa_r+0xae2>
 8021e82:	9a05      	ldr	r2, [sp, #20]
 8021e84:	bb0a      	cbnz	r2, 8021eca <_dtoa_r+0xae2>
 8021e86:	2b00      	cmp	r3, #0
 8021e88:	ddec      	ble.n	8021e64 <_dtoa_r+0xa7c>
 8021e8a:	4651      	mov	r1, sl
 8021e8c:	2201      	movs	r2, #1
 8021e8e:	4620      	mov	r0, r4
 8021e90:	f000 fc60 	bl	8022754 <__lshift>
 8021e94:	4631      	mov	r1, r6
 8021e96:	4682      	mov	sl, r0
 8021e98:	f000 fcad 	bl	80227f6 <__mcmp>
 8021e9c:	2800      	cmp	r0, #0
 8021e9e:	dc03      	bgt.n	8021ea8 <_dtoa_r+0xac0>
 8021ea0:	d1e0      	bne.n	8021e64 <_dtoa_r+0xa7c>
 8021ea2:	f019 0f01 	tst.w	r9, #1
 8021ea6:	d0dd      	beq.n	8021e64 <_dtoa_r+0xa7c>
 8021ea8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8021eac:	d1d8      	bne.n	8021e60 <_dtoa_r+0xa78>
 8021eae:	2339      	movs	r3, #57	; 0x39
 8021eb0:	f888 3000 	strb.w	r3, [r8]
 8021eb4:	f108 0801 	add.w	r8, r8, #1
 8021eb8:	4645      	mov	r5, r8
 8021eba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021ebe:	2b39      	cmp	r3, #57	; 0x39
 8021ec0:	f105 32ff 	add.w	r2, r5, #4294967295
 8021ec4:	d03b      	beq.n	8021f3e <_dtoa_r+0xb56>
 8021ec6:	3301      	adds	r3, #1
 8021ec8:	e040      	b.n	8021f4c <_dtoa_r+0xb64>
 8021eca:	2b00      	cmp	r3, #0
 8021ecc:	f108 0501 	add.w	r5, r8, #1
 8021ed0:	dd05      	ble.n	8021ede <_dtoa_r+0xaf6>
 8021ed2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8021ed6:	d0ea      	beq.n	8021eae <_dtoa_r+0xac6>
 8021ed8:	f109 0901 	add.w	r9, r9, #1
 8021edc:	e7c4      	b.n	8021e68 <_dtoa_r+0xa80>
 8021ede:	9b02      	ldr	r3, [sp, #8]
 8021ee0:	9a04      	ldr	r2, [sp, #16]
 8021ee2:	f805 9c01 	strb.w	r9, [r5, #-1]
 8021ee6:	1aeb      	subs	r3, r5, r3
 8021ee8:	4293      	cmp	r3, r2
 8021eea:	46a8      	mov	r8, r5
 8021eec:	f43f af4b 	beq.w	8021d86 <_dtoa_r+0x99e>
 8021ef0:	4651      	mov	r1, sl
 8021ef2:	2300      	movs	r3, #0
 8021ef4:	220a      	movs	r2, #10
 8021ef6:	4620      	mov	r0, r4
 8021ef8:	f000 fabf 	bl	802247a <__multadd>
 8021efc:	9b03      	ldr	r3, [sp, #12]
 8021efe:	9903      	ldr	r1, [sp, #12]
 8021f00:	42bb      	cmp	r3, r7
 8021f02:	4682      	mov	sl, r0
 8021f04:	f04f 0300 	mov.w	r3, #0
 8021f08:	f04f 020a 	mov.w	r2, #10
 8021f0c:	4620      	mov	r0, r4
 8021f0e:	d104      	bne.n	8021f1a <_dtoa_r+0xb32>
 8021f10:	f000 fab3 	bl	802247a <__multadd>
 8021f14:	9003      	str	r0, [sp, #12]
 8021f16:	4607      	mov	r7, r0
 8021f18:	e776      	b.n	8021e08 <_dtoa_r+0xa20>
 8021f1a:	f000 faae 	bl	802247a <__multadd>
 8021f1e:	2300      	movs	r3, #0
 8021f20:	9003      	str	r0, [sp, #12]
 8021f22:	220a      	movs	r2, #10
 8021f24:	4639      	mov	r1, r7
 8021f26:	4620      	mov	r0, r4
 8021f28:	f000 faa7 	bl	802247a <__multadd>
 8021f2c:	e7f3      	b.n	8021f16 <_dtoa_r+0xb2e>
 8021f2e:	4651      	mov	r1, sl
 8021f30:	2300      	movs	r3, #0
 8021f32:	220a      	movs	r2, #10
 8021f34:	4620      	mov	r0, r4
 8021f36:	f000 faa0 	bl	802247a <__multadd>
 8021f3a:	4682      	mov	sl, r0
 8021f3c:	e70d      	b.n	8021d5a <_dtoa_r+0x972>
 8021f3e:	9b02      	ldr	r3, [sp, #8]
 8021f40:	4293      	cmp	r3, r2
 8021f42:	d105      	bne.n	8021f50 <_dtoa_r+0xb68>
 8021f44:	9a02      	ldr	r2, [sp, #8]
 8021f46:	f10b 0b01 	add.w	fp, fp, #1
 8021f4a:	2331      	movs	r3, #49	; 0x31
 8021f4c:	7013      	strb	r3, [r2, #0]
 8021f4e:	e6e2      	b.n	8021d16 <_dtoa_r+0x92e>
 8021f50:	4615      	mov	r5, r2
 8021f52:	e7b2      	b.n	8021eba <_dtoa_r+0xad2>
 8021f54:	4b09      	ldr	r3, [pc, #36]	; (8021f7c <_dtoa_r+0xb94>)
 8021f56:	f7ff baae 	b.w	80214b6 <_dtoa_r+0xce>
 8021f5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021f5c:	2b00      	cmp	r3, #0
 8021f5e:	f47f aa88 	bne.w	8021472 <_dtoa_r+0x8a>
 8021f62:	4b07      	ldr	r3, [pc, #28]	; (8021f80 <_dtoa_r+0xb98>)
 8021f64:	f7ff baa7 	b.w	80214b6 <_dtoa_r+0xce>
 8021f68:	9b04      	ldr	r3, [sp, #16]
 8021f6a:	2b00      	cmp	r3, #0
 8021f6c:	f73f aef4 	bgt.w	8021d58 <_dtoa_r+0x970>
 8021f70:	9b07      	ldr	r3, [sp, #28]
 8021f72:	2b02      	cmp	r3, #2
 8021f74:	f77f aef0 	ble.w	8021d58 <_dtoa_r+0x970>
 8021f78:	e6b8      	b.n	8021cec <_dtoa_r+0x904>
 8021f7a:	bf00      	nop
 8021f7c:	08031d8d 	.word	0x08031d8d
 8021f80:	08031efe 	.word	0x08031efe

08021f84 <_localeconv_r>:
 8021f84:	4b04      	ldr	r3, [pc, #16]	; (8021f98 <_localeconv_r+0x14>)
 8021f86:	681b      	ldr	r3, [r3, #0]
 8021f88:	6a18      	ldr	r0, [r3, #32]
 8021f8a:	4b04      	ldr	r3, [pc, #16]	; (8021f9c <_localeconv_r+0x18>)
 8021f8c:	2800      	cmp	r0, #0
 8021f8e:	bf08      	it	eq
 8021f90:	4618      	moveq	r0, r3
 8021f92:	30f0      	adds	r0, #240	; 0xf0
 8021f94:	4770      	bx	lr
 8021f96:	bf00      	nop
 8021f98:	20000f50 	.word	0x20000f50
 8021f9c:	20001454 	.word	0x20001454

08021fa0 <malloc>:
 8021fa0:	4b02      	ldr	r3, [pc, #8]	; (8021fac <malloc+0xc>)
 8021fa2:	4601      	mov	r1, r0
 8021fa4:	6818      	ldr	r0, [r3, #0]
 8021fa6:	f000 b803 	b.w	8021fb0 <_malloc_r>
 8021faa:	bf00      	nop
 8021fac:	20000f50 	.word	0x20000f50

08021fb0 <_malloc_r>:
 8021fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fb4:	f101 040b 	add.w	r4, r1, #11
 8021fb8:	2c16      	cmp	r4, #22
 8021fba:	4681      	mov	r9, r0
 8021fbc:	d907      	bls.n	8021fce <_malloc_r+0x1e>
 8021fbe:	f034 0407 	bics.w	r4, r4, #7
 8021fc2:	d505      	bpl.n	8021fd0 <_malloc_r+0x20>
 8021fc4:	230c      	movs	r3, #12
 8021fc6:	f8c9 3000 	str.w	r3, [r9]
 8021fca:	2600      	movs	r6, #0
 8021fcc:	e131      	b.n	8022232 <_malloc_r+0x282>
 8021fce:	2410      	movs	r4, #16
 8021fd0:	428c      	cmp	r4, r1
 8021fd2:	d3f7      	bcc.n	8021fc4 <_malloc_r+0x14>
 8021fd4:	4648      	mov	r0, r9
 8021fd6:	f000 f9f9 	bl	80223cc <__malloc_lock>
 8021fda:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8021fde:	4d9c      	ldr	r5, [pc, #624]	; (8022250 <_malloc_r+0x2a0>)
 8021fe0:	d236      	bcs.n	8022050 <_malloc_r+0xa0>
 8021fe2:	f104 0208 	add.w	r2, r4, #8
 8021fe6:	442a      	add	r2, r5
 8021fe8:	f1a2 0108 	sub.w	r1, r2, #8
 8021fec:	6856      	ldr	r6, [r2, #4]
 8021fee:	428e      	cmp	r6, r1
 8021ff0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8021ff4:	d102      	bne.n	8021ffc <_malloc_r+0x4c>
 8021ff6:	68d6      	ldr	r6, [r2, #12]
 8021ff8:	42b2      	cmp	r2, r6
 8021ffa:	d010      	beq.n	802201e <_malloc_r+0x6e>
 8021ffc:	6873      	ldr	r3, [r6, #4]
 8021ffe:	68f2      	ldr	r2, [r6, #12]
 8022000:	68b1      	ldr	r1, [r6, #8]
 8022002:	f023 0303 	bic.w	r3, r3, #3
 8022006:	60ca      	str	r2, [r1, #12]
 8022008:	4433      	add	r3, r6
 802200a:	6091      	str	r1, [r2, #8]
 802200c:	685a      	ldr	r2, [r3, #4]
 802200e:	f042 0201 	orr.w	r2, r2, #1
 8022012:	605a      	str	r2, [r3, #4]
 8022014:	4648      	mov	r0, r9
 8022016:	f000 f9df 	bl	80223d8 <__malloc_unlock>
 802201a:	3608      	adds	r6, #8
 802201c:	e109      	b.n	8022232 <_malloc_r+0x282>
 802201e:	3302      	adds	r3, #2
 8022020:	4a8c      	ldr	r2, [pc, #560]	; (8022254 <_malloc_r+0x2a4>)
 8022022:	692e      	ldr	r6, [r5, #16]
 8022024:	4296      	cmp	r6, r2
 8022026:	4611      	mov	r1, r2
 8022028:	d06d      	beq.n	8022106 <_malloc_r+0x156>
 802202a:	6870      	ldr	r0, [r6, #4]
 802202c:	f020 0003 	bic.w	r0, r0, #3
 8022030:	1b07      	subs	r7, r0, r4
 8022032:	2f0f      	cmp	r7, #15
 8022034:	dd47      	ble.n	80220c6 <_malloc_r+0x116>
 8022036:	1933      	adds	r3, r6, r4
 8022038:	f044 0401 	orr.w	r4, r4, #1
 802203c:	6074      	str	r4, [r6, #4]
 802203e:	616b      	str	r3, [r5, #20]
 8022040:	612b      	str	r3, [r5, #16]
 8022042:	60da      	str	r2, [r3, #12]
 8022044:	609a      	str	r2, [r3, #8]
 8022046:	f047 0201 	orr.w	r2, r7, #1
 802204a:	605a      	str	r2, [r3, #4]
 802204c:	5037      	str	r7, [r6, r0]
 802204e:	e7e1      	b.n	8022014 <_malloc_r+0x64>
 8022050:	0a63      	lsrs	r3, r4, #9
 8022052:	d02a      	beq.n	80220aa <_malloc_r+0xfa>
 8022054:	2b04      	cmp	r3, #4
 8022056:	d812      	bhi.n	802207e <_malloc_r+0xce>
 8022058:	09a3      	lsrs	r3, r4, #6
 802205a:	3338      	adds	r3, #56	; 0x38
 802205c:	1c5a      	adds	r2, r3, #1
 802205e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8022062:	f1a2 0008 	sub.w	r0, r2, #8
 8022066:	6856      	ldr	r6, [r2, #4]
 8022068:	4286      	cmp	r6, r0
 802206a:	d006      	beq.n	802207a <_malloc_r+0xca>
 802206c:	6872      	ldr	r2, [r6, #4]
 802206e:	f022 0203 	bic.w	r2, r2, #3
 8022072:	1b11      	subs	r1, r2, r4
 8022074:	290f      	cmp	r1, #15
 8022076:	dd1c      	ble.n	80220b2 <_malloc_r+0x102>
 8022078:	3b01      	subs	r3, #1
 802207a:	3301      	adds	r3, #1
 802207c:	e7d0      	b.n	8022020 <_malloc_r+0x70>
 802207e:	2b14      	cmp	r3, #20
 8022080:	d801      	bhi.n	8022086 <_malloc_r+0xd6>
 8022082:	335b      	adds	r3, #91	; 0x5b
 8022084:	e7ea      	b.n	802205c <_malloc_r+0xac>
 8022086:	2b54      	cmp	r3, #84	; 0x54
 8022088:	d802      	bhi.n	8022090 <_malloc_r+0xe0>
 802208a:	0b23      	lsrs	r3, r4, #12
 802208c:	336e      	adds	r3, #110	; 0x6e
 802208e:	e7e5      	b.n	802205c <_malloc_r+0xac>
 8022090:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8022094:	d802      	bhi.n	802209c <_malloc_r+0xec>
 8022096:	0be3      	lsrs	r3, r4, #15
 8022098:	3377      	adds	r3, #119	; 0x77
 802209a:	e7df      	b.n	802205c <_malloc_r+0xac>
 802209c:	f240 5254 	movw	r2, #1364	; 0x554
 80220a0:	4293      	cmp	r3, r2
 80220a2:	d804      	bhi.n	80220ae <_malloc_r+0xfe>
 80220a4:	0ca3      	lsrs	r3, r4, #18
 80220a6:	337c      	adds	r3, #124	; 0x7c
 80220a8:	e7d8      	b.n	802205c <_malloc_r+0xac>
 80220aa:	233f      	movs	r3, #63	; 0x3f
 80220ac:	e7d6      	b.n	802205c <_malloc_r+0xac>
 80220ae:	237e      	movs	r3, #126	; 0x7e
 80220b0:	e7d4      	b.n	802205c <_malloc_r+0xac>
 80220b2:	2900      	cmp	r1, #0
 80220b4:	68f1      	ldr	r1, [r6, #12]
 80220b6:	db04      	blt.n	80220c2 <_malloc_r+0x112>
 80220b8:	68b3      	ldr	r3, [r6, #8]
 80220ba:	60d9      	str	r1, [r3, #12]
 80220bc:	608b      	str	r3, [r1, #8]
 80220be:	18b3      	adds	r3, r6, r2
 80220c0:	e7a4      	b.n	802200c <_malloc_r+0x5c>
 80220c2:	460e      	mov	r6, r1
 80220c4:	e7d0      	b.n	8022068 <_malloc_r+0xb8>
 80220c6:	2f00      	cmp	r7, #0
 80220c8:	616a      	str	r2, [r5, #20]
 80220ca:	612a      	str	r2, [r5, #16]
 80220cc:	db05      	blt.n	80220da <_malloc_r+0x12a>
 80220ce:	4430      	add	r0, r6
 80220d0:	6843      	ldr	r3, [r0, #4]
 80220d2:	f043 0301 	orr.w	r3, r3, #1
 80220d6:	6043      	str	r3, [r0, #4]
 80220d8:	e79c      	b.n	8022014 <_malloc_r+0x64>
 80220da:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80220de:	d244      	bcs.n	802216a <_malloc_r+0x1ba>
 80220e0:	08c0      	lsrs	r0, r0, #3
 80220e2:	1087      	asrs	r7, r0, #2
 80220e4:	2201      	movs	r2, #1
 80220e6:	fa02 f707 	lsl.w	r7, r2, r7
 80220ea:	686a      	ldr	r2, [r5, #4]
 80220ec:	3001      	adds	r0, #1
 80220ee:	433a      	orrs	r2, r7
 80220f0:	606a      	str	r2, [r5, #4]
 80220f2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80220f6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80220fa:	60b7      	str	r7, [r6, #8]
 80220fc:	3a08      	subs	r2, #8
 80220fe:	60f2      	str	r2, [r6, #12]
 8022100:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8022104:	60fe      	str	r6, [r7, #12]
 8022106:	2001      	movs	r0, #1
 8022108:	109a      	asrs	r2, r3, #2
 802210a:	fa00 f202 	lsl.w	r2, r0, r2
 802210e:	6868      	ldr	r0, [r5, #4]
 8022110:	4282      	cmp	r2, r0
 8022112:	f200 80a1 	bhi.w	8022258 <_malloc_r+0x2a8>
 8022116:	4202      	tst	r2, r0
 8022118:	d106      	bne.n	8022128 <_malloc_r+0x178>
 802211a:	f023 0303 	bic.w	r3, r3, #3
 802211e:	0052      	lsls	r2, r2, #1
 8022120:	4202      	tst	r2, r0
 8022122:	f103 0304 	add.w	r3, r3, #4
 8022126:	d0fa      	beq.n	802211e <_malloc_r+0x16e>
 8022128:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 802212c:	46e0      	mov	r8, ip
 802212e:	469e      	mov	lr, r3
 8022130:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8022134:	4546      	cmp	r6, r8
 8022136:	d153      	bne.n	80221e0 <_malloc_r+0x230>
 8022138:	f10e 0e01 	add.w	lr, lr, #1
 802213c:	f01e 0f03 	tst.w	lr, #3
 8022140:	f108 0808 	add.w	r8, r8, #8
 8022144:	d1f4      	bne.n	8022130 <_malloc_r+0x180>
 8022146:	0798      	lsls	r0, r3, #30
 8022148:	d179      	bne.n	802223e <_malloc_r+0x28e>
 802214a:	686b      	ldr	r3, [r5, #4]
 802214c:	ea23 0302 	bic.w	r3, r3, r2
 8022150:	606b      	str	r3, [r5, #4]
 8022152:	6868      	ldr	r0, [r5, #4]
 8022154:	0052      	lsls	r2, r2, #1
 8022156:	4282      	cmp	r2, r0
 8022158:	d87e      	bhi.n	8022258 <_malloc_r+0x2a8>
 802215a:	2a00      	cmp	r2, #0
 802215c:	d07c      	beq.n	8022258 <_malloc_r+0x2a8>
 802215e:	4673      	mov	r3, lr
 8022160:	4202      	tst	r2, r0
 8022162:	d1e1      	bne.n	8022128 <_malloc_r+0x178>
 8022164:	3304      	adds	r3, #4
 8022166:	0052      	lsls	r2, r2, #1
 8022168:	e7fa      	b.n	8022160 <_malloc_r+0x1b0>
 802216a:	0a42      	lsrs	r2, r0, #9
 802216c:	2a04      	cmp	r2, #4
 802216e:	d815      	bhi.n	802219c <_malloc_r+0x1ec>
 8022170:	0982      	lsrs	r2, r0, #6
 8022172:	3238      	adds	r2, #56	; 0x38
 8022174:	1c57      	adds	r7, r2, #1
 8022176:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 802217a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 802217e:	45be      	cmp	lr, r7
 8022180:	d126      	bne.n	80221d0 <_malloc_r+0x220>
 8022182:	2001      	movs	r0, #1
 8022184:	1092      	asrs	r2, r2, #2
 8022186:	fa00 f202 	lsl.w	r2, r0, r2
 802218a:	6868      	ldr	r0, [r5, #4]
 802218c:	4310      	orrs	r0, r2
 802218e:	6068      	str	r0, [r5, #4]
 8022190:	f8c6 e00c 	str.w	lr, [r6, #12]
 8022194:	60b7      	str	r7, [r6, #8]
 8022196:	f8ce 6008 	str.w	r6, [lr, #8]
 802219a:	e7b3      	b.n	8022104 <_malloc_r+0x154>
 802219c:	2a14      	cmp	r2, #20
 802219e:	d801      	bhi.n	80221a4 <_malloc_r+0x1f4>
 80221a0:	325b      	adds	r2, #91	; 0x5b
 80221a2:	e7e7      	b.n	8022174 <_malloc_r+0x1c4>
 80221a4:	2a54      	cmp	r2, #84	; 0x54
 80221a6:	d802      	bhi.n	80221ae <_malloc_r+0x1fe>
 80221a8:	0b02      	lsrs	r2, r0, #12
 80221aa:	326e      	adds	r2, #110	; 0x6e
 80221ac:	e7e2      	b.n	8022174 <_malloc_r+0x1c4>
 80221ae:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80221b2:	d802      	bhi.n	80221ba <_malloc_r+0x20a>
 80221b4:	0bc2      	lsrs	r2, r0, #15
 80221b6:	3277      	adds	r2, #119	; 0x77
 80221b8:	e7dc      	b.n	8022174 <_malloc_r+0x1c4>
 80221ba:	f240 5754 	movw	r7, #1364	; 0x554
 80221be:	42ba      	cmp	r2, r7
 80221c0:	bf9a      	itte	ls
 80221c2:	0c82      	lsrls	r2, r0, #18
 80221c4:	327c      	addls	r2, #124	; 0x7c
 80221c6:	227e      	movhi	r2, #126	; 0x7e
 80221c8:	e7d4      	b.n	8022174 <_malloc_r+0x1c4>
 80221ca:	68bf      	ldr	r7, [r7, #8]
 80221cc:	45be      	cmp	lr, r7
 80221ce:	d004      	beq.n	80221da <_malloc_r+0x22a>
 80221d0:	687a      	ldr	r2, [r7, #4]
 80221d2:	f022 0203 	bic.w	r2, r2, #3
 80221d6:	4290      	cmp	r0, r2
 80221d8:	d3f7      	bcc.n	80221ca <_malloc_r+0x21a>
 80221da:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80221de:	e7d7      	b.n	8022190 <_malloc_r+0x1e0>
 80221e0:	6870      	ldr	r0, [r6, #4]
 80221e2:	68f7      	ldr	r7, [r6, #12]
 80221e4:	f020 0003 	bic.w	r0, r0, #3
 80221e8:	eba0 0a04 	sub.w	sl, r0, r4
 80221ec:	f1ba 0f0f 	cmp.w	sl, #15
 80221f0:	dd10      	ble.n	8022214 <_malloc_r+0x264>
 80221f2:	68b2      	ldr	r2, [r6, #8]
 80221f4:	1933      	adds	r3, r6, r4
 80221f6:	f044 0401 	orr.w	r4, r4, #1
 80221fa:	6074      	str	r4, [r6, #4]
 80221fc:	60d7      	str	r7, [r2, #12]
 80221fe:	60ba      	str	r2, [r7, #8]
 8022200:	f04a 0201 	orr.w	r2, sl, #1
 8022204:	616b      	str	r3, [r5, #20]
 8022206:	612b      	str	r3, [r5, #16]
 8022208:	60d9      	str	r1, [r3, #12]
 802220a:	6099      	str	r1, [r3, #8]
 802220c:	605a      	str	r2, [r3, #4]
 802220e:	f846 a000 	str.w	sl, [r6, r0]
 8022212:	e6ff      	b.n	8022014 <_malloc_r+0x64>
 8022214:	f1ba 0f00 	cmp.w	sl, #0
 8022218:	db0f      	blt.n	802223a <_malloc_r+0x28a>
 802221a:	4430      	add	r0, r6
 802221c:	6843      	ldr	r3, [r0, #4]
 802221e:	f043 0301 	orr.w	r3, r3, #1
 8022222:	6043      	str	r3, [r0, #4]
 8022224:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8022228:	4648      	mov	r0, r9
 802222a:	60df      	str	r7, [r3, #12]
 802222c:	60bb      	str	r3, [r7, #8]
 802222e:	f000 f8d3 	bl	80223d8 <__malloc_unlock>
 8022232:	4630      	mov	r0, r6
 8022234:	b003      	add	sp, #12
 8022236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802223a:	463e      	mov	r6, r7
 802223c:	e77a      	b.n	8022134 <_malloc_r+0x184>
 802223e:	f85c 0908 	ldr.w	r0, [ip], #-8
 8022242:	4584      	cmp	ip, r0
 8022244:	f103 33ff 	add.w	r3, r3, #4294967295
 8022248:	f43f af7d 	beq.w	8022146 <_malloc_r+0x196>
 802224c:	e781      	b.n	8022152 <_malloc_r+0x1a2>
 802224e:	bf00      	nop
 8022250:	20001044 	.word	0x20001044
 8022254:	2000104c 	.word	0x2000104c
 8022258:	f8d5 b008 	ldr.w	fp, [r5, #8]
 802225c:	f8db 6004 	ldr.w	r6, [fp, #4]
 8022260:	f026 0603 	bic.w	r6, r6, #3
 8022264:	42b4      	cmp	r4, r6
 8022266:	d803      	bhi.n	8022270 <_malloc_r+0x2c0>
 8022268:	1b33      	subs	r3, r6, r4
 802226a:	2b0f      	cmp	r3, #15
 802226c:	f300 8096 	bgt.w	802239c <_malloc_r+0x3ec>
 8022270:	4a4f      	ldr	r2, [pc, #316]	; (80223b0 <_malloc_r+0x400>)
 8022272:	6817      	ldr	r7, [r2, #0]
 8022274:	4a4f      	ldr	r2, [pc, #316]	; (80223b4 <_malloc_r+0x404>)
 8022276:	6811      	ldr	r1, [r2, #0]
 8022278:	3710      	adds	r7, #16
 802227a:	3101      	adds	r1, #1
 802227c:	eb0b 0306 	add.w	r3, fp, r6
 8022280:	4427      	add	r7, r4
 8022282:	d005      	beq.n	8022290 <_malloc_r+0x2e0>
 8022284:	494c      	ldr	r1, [pc, #304]	; (80223b8 <_malloc_r+0x408>)
 8022286:	3901      	subs	r1, #1
 8022288:	440f      	add	r7, r1
 802228a:	3101      	adds	r1, #1
 802228c:	4249      	negs	r1, r1
 802228e:	400f      	ands	r7, r1
 8022290:	4639      	mov	r1, r7
 8022292:	4648      	mov	r0, r9
 8022294:	9201      	str	r2, [sp, #4]
 8022296:	9300      	str	r3, [sp, #0]
 8022298:	f000 fb74 	bl	8022984 <_sbrk_r>
 802229c:	f1b0 3fff 	cmp.w	r0, #4294967295
 80222a0:	4680      	mov	r8, r0
 80222a2:	d056      	beq.n	8022352 <_malloc_r+0x3a2>
 80222a4:	9b00      	ldr	r3, [sp, #0]
 80222a6:	9a01      	ldr	r2, [sp, #4]
 80222a8:	4283      	cmp	r3, r0
 80222aa:	d901      	bls.n	80222b0 <_malloc_r+0x300>
 80222ac:	45ab      	cmp	fp, r5
 80222ae:	d150      	bne.n	8022352 <_malloc_r+0x3a2>
 80222b0:	4842      	ldr	r0, [pc, #264]	; (80223bc <_malloc_r+0x40c>)
 80222b2:	6801      	ldr	r1, [r0, #0]
 80222b4:	4543      	cmp	r3, r8
 80222b6:	eb07 0e01 	add.w	lr, r7, r1
 80222ba:	f8c0 e000 	str.w	lr, [r0]
 80222be:	4940      	ldr	r1, [pc, #256]	; (80223c0 <_malloc_r+0x410>)
 80222c0:	4682      	mov	sl, r0
 80222c2:	d113      	bne.n	80222ec <_malloc_r+0x33c>
 80222c4:	420b      	tst	r3, r1
 80222c6:	d111      	bne.n	80222ec <_malloc_r+0x33c>
 80222c8:	68ab      	ldr	r3, [r5, #8]
 80222ca:	443e      	add	r6, r7
 80222cc:	f046 0601 	orr.w	r6, r6, #1
 80222d0:	605e      	str	r6, [r3, #4]
 80222d2:	4a3c      	ldr	r2, [pc, #240]	; (80223c4 <_malloc_r+0x414>)
 80222d4:	f8da 3000 	ldr.w	r3, [sl]
 80222d8:	6811      	ldr	r1, [r2, #0]
 80222da:	428b      	cmp	r3, r1
 80222dc:	bf88      	it	hi
 80222de:	6013      	strhi	r3, [r2, #0]
 80222e0:	4a39      	ldr	r2, [pc, #228]	; (80223c8 <_malloc_r+0x418>)
 80222e2:	6811      	ldr	r1, [r2, #0]
 80222e4:	428b      	cmp	r3, r1
 80222e6:	bf88      	it	hi
 80222e8:	6013      	strhi	r3, [r2, #0]
 80222ea:	e032      	b.n	8022352 <_malloc_r+0x3a2>
 80222ec:	6810      	ldr	r0, [r2, #0]
 80222ee:	3001      	adds	r0, #1
 80222f0:	bf1b      	ittet	ne
 80222f2:	eba8 0303 	subne.w	r3, r8, r3
 80222f6:	4473      	addne	r3, lr
 80222f8:	f8c2 8000 	streq.w	r8, [r2]
 80222fc:	f8ca 3000 	strne.w	r3, [sl]
 8022300:	f018 0007 	ands.w	r0, r8, #7
 8022304:	bf1c      	itt	ne
 8022306:	f1c0 0008 	rsbne	r0, r0, #8
 802230a:	4480      	addne	r8, r0
 802230c:	4b2a      	ldr	r3, [pc, #168]	; (80223b8 <_malloc_r+0x408>)
 802230e:	4447      	add	r7, r8
 8022310:	4418      	add	r0, r3
 8022312:	400f      	ands	r7, r1
 8022314:	1bc7      	subs	r7, r0, r7
 8022316:	4639      	mov	r1, r7
 8022318:	4648      	mov	r0, r9
 802231a:	f000 fb33 	bl	8022984 <_sbrk_r>
 802231e:	1c43      	adds	r3, r0, #1
 8022320:	bf08      	it	eq
 8022322:	4640      	moveq	r0, r8
 8022324:	f8da 3000 	ldr.w	r3, [sl]
 8022328:	f8c5 8008 	str.w	r8, [r5, #8]
 802232c:	bf08      	it	eq
 802232e:	2700      	moveq	r7, #0
 8022330:	eba0 0008 	sub.w	r0, r0, r8
 8022334:	443b      	add	r3, r7
 8022336:	4407      	add	r7, r0
 8022338:	f047 0701 	orr.w	r7, r7, #1
 802233c:	45ab      	cmp	fp, r5
 802233e:	f8ca 3000 	str.w	r3, [sl]
 8022342:	f8c8 7004 	str.w	r7, [r8, #4]
 8022346:	d0c4      	beq.n	80222d2 <_malloc_r+0x322>
 8022348:	2e0f      	cmp	r6, #15
 802234a:	d810      	bhi.n	802236e <_malloc_r+0x3be>
 802234c:	2301      	movs	r3, #1
 802234e:	f8c8 3004 	str.w	r3, [r8, #4]
 8022352:	68ab      	ldr	r3, [r5, #8]
 8022354:	685a      	ldr	r2, [r3, #4]
 8022356:	f022 0203 	bic.w	r2, r2, #3
 802235a:	4294      	cmp	r4, r2
 802235c:	eba2 0304 	sub.w	r3, r2, r4
 8022360:	d801      	bhi.n	8022366 <_malloc_r+0x3b6>
 8022362:	2b0f      	cmp	r3, #15
 8022364:	dc1a      	bgt.n	802239c <_malloc_r+0x3ec>
 8022366:	4648      	mov	r0, r9
 8022368:	f000 f836 	bl	80223d8 <__malloc_unlock>
 802236c:	e62d      	b.n	8021fca <_malloc_r+0x1a>
 802236e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8022372:	3e0c      	subs	r6, #12
 8022374:	f026 0607 	bic.w	r6, r6, #7
 8022378:	f003 0301 	and.w	r3, r3, #1
 802237c:	4333      	orrs	r3, r6
 802237e:	f8cb 3004 	str.w	r3, [fp, #4]
 8022382:	eb0b 0306 	add.w	r3, fp, r6
 8022386:	2205      	movs	r2, #5
 8022388:	2e0f      	cmp	r6, #15
 802238a:	605a      	str	r2, [r3, #4]
 802238c:	609a      	str	r2, [r3, #8]
 802238e:	d9a0      	bls.n	80222d2 <_malloc_r+0x322>
 8022390:	f10b 0108 	add.w	r1, fp, #8
 8022394:	4648      	mov	r0, r9
 8022396:	f000 fc03 	bl	8022ba0 <_free_r>
 802239a:	e79a      	b.n	80222d2 <_malloc_r+0x322>
 802239c:	68ae      	ldr	r6, [r5, #8]
 802239e:	f044 0201 	orr.w	r2, r4, #1
 80223a2:	4434      	add	r4, r6
 80223a4:	f043 0301 	orr.w	r3, r3, #1
 80223a8:	6072      	str	r2, [r6, #4]
 80223aa:	60ac      	str	r4, [r5, #8]
 80223ac:	6063      	str	r3, [r4, #4]
 80223ae:	e631      	b.n	8022014 <_malloc_r+0x64>
 80223b0:	20090670 	.word	0x20090670
 80223b4:	2000144c 	.word	0x2000144c
 80223b8:	00000080 	.word	0x00000080
 80223bc:	20090640 	.word	0x20090640
 80223c0:	0000007f 	.word	0x0000007f
 80223c4:	20090668 	.word	0x20090668
 80223c8:	2009066c 	.word	0x2009066c

080223cc <__malloc_lock>:
 80223cc:	4801      	ldr	r0, [pc, #4]	; (80223d4 <__malloc_lock+0x8>)
 80223ce:	f000 bca3 	b.w	8022d18 <__retarget_lock_acquire_recursive>
 80223d2:	bf00      	nop
 80223d4:	20096594 	.word	0x20096594

080223d8 <__malloc_unlock>:
 80223d8:	4801      	ldr	r0, [pc, #4]	; (80223e0 <__malloc_unlock+0x8>)
 80223da:	f000 bc9e 	b.w	8022d1a <__retarget_lock_release_recursive>
 80223de:	bf00      	nop
 80223e0:	20096594 	.word	0x20096594

080223e4 <_Balloc>:
 80223e4:	b570      	push	{r4, r5, r6, lr}
 80223e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80223e8:	4604      	mov	r4, r0
 80223ea:	460e      	mov	r6, r1
 80223ec:	b93d      	cbnz	r5, 80223fe <_Balloc+0x1a>
 80223ee:	2010      	movs	r0, #16
 80223f0:	f7ff fdd6 	bl	8021fa0 <malloc>
 80223f4:	6260      	str	r0, [r4, #36]	; 0x24
 80223f6:	6045      	str	r5, [r0, #4]
 80223f8:	6085      	str	r5, [r0, #8]
 80223fa:	6005      	str	r5, [r0, #0]
 80223fc:	60c5      	str	r5, [r0, #12]
 80223fe:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022400:	68eb      	ldr	r3, [r5, #12]
 8022402:	b183      	cbz	r3, 8022426 <_Balloc+0x42>
 8022404:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022406:	68db      	ldr	r3, [r3, #12]
 8022408:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 802240c:	b9b8      	cbnz	r0, 802243e <_Balloc+0x5a>
 802240e:	2101      	movs	r1, #1
 8022410:	fa01 f506 	lsl.w	r5, r1, r6
 8022414:	1d6a      	adds	r2, r5, #5
 8022416:	0092      	lsls	r2, r2, #2
 8022418:	4620      	mov	r0, r4
 802241a:	f000 fb3d 	bl	8022a98 <_calloc_r>
 802241e:	b160      	cbz	r0, 802243a <_Balloc+0x56>
 8022420:	6046      	str	r6, [r0, #4]
 8022422:	6085      	str	r5, [r0, #8]
 8022424:	e00e      	b.n	8022444 <_Balloc+0x60>
 8022426:	2221      	movs	r2, #33	; 0x21
 8022428:	2104      	movs	r1, #4
 802242a:	4620      	mov	r0, r4
 802242c:	f000 fb34 	bl	8022a98 <_calloc_r>
 8022430:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022432:	60e8      	str	r0, [r5, #12]
 8022434:	68db      	ldr	r3, [r3, #12]
 8022436:	2b00      	cmp	r3, #0
 8022438:	d1e4      	bne.n	8022404 <_Balloc+0x20>
 802243a:	2000      	movs	r0, #0
 802243c:	bd70      	pop	{r4, r5, r6, pc}
 802243e:	6802      	ldr	r2, [r0, #0]
 8022440:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8022444:	2300      	movs	r3, #0
 8022446:	6103      	str	r3, [r0, #16]
 8022448:	60c3      	str	r3, [r0, #12]
 802244a:	bd70      	pop	{r4, r5, r6, pc}

0802244c <_Bfree>:
 802244c:	b570      	push	{r4, r5, r6, lr}
 802244e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8022450:	4606      	mov	r6, r0
 8022452:	460d      	mov	r5, r1
 8022454:	b93c      	cbnz	r4, 8022466 <_Bfree+0x1a>
 8022456:	2010      	movs	r0, #16
 8022458:	f7ff fda2 	bl	8021fa0 <malloc>
 802245c:	6270      	str	r0, [r6, #36]	; 0x24
 802245e:	6044      	str	r4, [r0, #4]
 8022460:	6084      	str	r4, [r0, #8]
 8022462:	6004      	str	r4, [r0, #0]
 8022464:	60c4      	str	r4, [r0, #12]
 8022466:	b13d      	cbz	r5, 8022478 <_Bfree+0x2c>
 8022468:	6a73      	ldr	r3, [r6, #36]	; 0x24
 802246a:	686a      	ldr	r2, [r5, #4]
 802246c:	68db      	ldr	r3, [r3, #12]
 802246e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8022472:	6029      	str	r1, [r5, #0]
 8022474:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8022478:	bd70      	pop	{r4, r5, r6, pc}

0802247a <__multadd>:
 802247a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802247e:	690d      	ldr	r5, [r1, #16]
 8022480:	461f      	mov	r7, r3
 8022482:	4606      	mov	r6, r0
 8022484:	460c      	mov	r4, r1
 8022486:	f101 0e14 	add.w	lr, r1, #20
 802248a:	2300      	movs	r3, #0
 802248c:	f8de 0000 	ldr.w	r0, [lr]
 8022490:	b281      	uxth	r1, r0
 8022492:	fb02 7101 	mla	r1, r2, r1, r7
 8022496:	0c0f      	lsrs	r7, r1, #16
 8022498:	0c00      	lsrs	r0, r0, #16
 802249a:	fb02 7000 	mla	r0, r2, r0, r7
 802249e:	b289      	uxth	r1, r1
 80224a0:	3301      	adds	r3, #1
 80224a2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80224a6:	429d      	cmp	r5, r3
 80224a8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80224ac:	f84e 1b04 	str.w	r1, [lr], #4
 80224b0:	dcec      	bgt.n	802248c <__multadd+0x12>
 80224b2:	b1d7      	cbz	r7, 80224ea <__multadd+0x70>
 80224b4:	68a3      	ldr	r3, [r4, #8]
 80224b6:	429d      	cmp	r5, r3
 80224b8:	db12      	blt.n	80224e0 <__multadd+0x66>
 80224ba:	6861      	ldr	r1, [r4, #4]
 80224bc:	4630      	mov	r0, r6
 80224be:	3101      	adds	r1, #1
 80224c0:	f7ff ff90 	bl	80223e4 <_Balloc>
 80224c4:	6922      	ldr	r2, [r4, #16]
 80224c6:	3202      	adds	r2, #2
 80224c8:	f104 010c 	add.w	r1, r4, #12
 80224cc:	4680      	mov	r8, r0
 80224ce:	0092      	lsls	r2, r2, #2
 80224d0:	300c      	adds	r0, #12
 80224d2:	f7fd fecb 	bl	802026c <memcpy>
 80224d6:	4621      	mov	r1, r4
 80224d8:	4630      	mov	r0, r6
 80224da:	f7ff ffb7 	bl	802244c <_Bfree>
 80224de:	4644      	mov	r4, r8
 80224e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80224e4:	3501      	adds	r5, #1
 80224e6:	615f      	str	r7, [r3, #20]
 80224e8:	6125      	str	r5, [r4, #16]
 80224ea:	4620      	mov	r0, r4
 80224ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080224f0 <__hi0bits>:
 80224f0:	0c02      	lsrs	r2, r0, #16
 80224f2:	0412      	lsls	r2, r2, #16
 80224f4:	4603      	mov	r3, r0
 80224f6:	b9b2      	cbnz	r2, 8022526 <__hi0bits+0x36>
 80224f8:	0403      	lsls	r3, r0, #16
 80224fa:	2010      	movs	r0, #16
 80224fc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8022500:	bf04      	itt	eq
 8022502:	021b      	lsleq	r3, r3, #8
 8022504:	3008      	addeq	r0, #8
 8022506:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 802250a:	bf04      	itt	eq
 802250c:	011b      	lsleq	r3, r3, #4
 802250e:	3004      	addeq	r0, #4
 8022510:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8022514:	bf04      	itt	eq
 8022516:	009b      	lsleq	r3, r3, #2
 8022518:	3002      	addeq	r0, #2
 802251a:	2b00      	cmp	r3, #0
 802251c:	db06      	blt.n	802252c <__hi0bits+0x3c>
 802251e:	005b      	lsls	r3, r3, #1
 8022520:	d503      	bpl.n	802252a <__hi0bits+0x3a>
 8022522:	3001      	adds	r0, #1
 8022524:	4770      	bx	lr
 8022526:	2000      	movs	r0, #0
 8022528:	e7e8      	b.n	80224fc <__hi0bits+0xc>
 802252a:	2020      	movs	r0, #32
 802252c:	4770      	bx	lr

0802252e <__lo0bits>:
 802252e:	6803      	ldr	r3, [r0, #0]
 8022530:	f013 0207 	ands.w	r2, r3, #7
 8022534:	4601      	mov	r1, r0
 8022536:	d00b      	beq.n	8022550 <__lo0bits+0x22>
 8022538:	07da      	lsls	r2, r3, #31
 802253a:	d423      	bmi.n	8022584 <__lo0bits+0x56>
 802253c:	0798      	lsls	r0, r3, #30
 802253e:	bf49      	itett	mi
 8022540:	085b      	lsrmi	r3, r3, #1
 8022542:	089b      	lsrpl	r3, r3, #2
 8022544:	2001      	movmi	r0, #1
 8022546:	600b      	strmi	r3, [r1, #0]
 8022548:	bf5c      	itt	pl
 802254a:	600b      	strpl	r3, [r1, #0]
 802254c:	2002      	movpl	r0, #2
 802254e:	4770      	bx	lr
 8022550:	b298      	uxth	r0, r3
 8022552:	b9a8      	cbnz	r0, 8022580 <__lo0bits+0x52>
 8022554:	0c1b      	lsrs	r3, r3, #16
 8022556:	2010      	movs	r0, #16
 8022558:	f013 0fff 	tst.w	r3, #255	; 0xff
 802255c:	bf04      	itt	eq
 802255e:	0a1b      	lsreq	r3, r3, #8
 8022560:	3008      	addeq	r0, #8
 8022562:	071a      	lsls	r2, r3, #28
 8022564:	bf04      	itt	eq
 8022566:	091b      	lsreq	r3, r3, #4
 8022568:	3004      	addeq	r0, #4
 802256a:	079a      	lsls	r2, r3, #30
 802256c:	bf04      	itt	eq
 802256e:	089b      	lsreq	r3, r3, #2
 8022570:	3002      	addeq	r0, #2
 8022572:	07da      	lsls	r2, r3, #31
 8022574:	d402      	bmi.n	802257c <__lo0bits+0x4e>
 8022576:	085b      	lsrs	r3, r3, #1
 8022578:	d006      	beq.n	8022588 <__lo0bits+0x5a>
 802257a:	3001      	adds	r0, #1
 802257c:	600b      	str	r3, [r1, #0]
 802257e:	4770      	bx	lr
 8022580:	4610      	mov	r0, r2
 8022582:	e7e9      	b.n	8022558 <__lo0bits+0x2a>
 8022584:	2000      	movs	r0, #0
 8022586:	4770      	bx	lr
 8022588:	2020      	movs	r0, #32
 802258a:	4770      	bx	lr

0802258c <__i2b>:
 802258c:	b510      	push	{r4, lr}
 802258e:	460c      	mov	r4, r1
 8022590:	2101      	movs	r1, #1
 8022592:	f7ff ff27 	bl	80223e4 <_Balloc>
 8022596:	2201      	movs	r2, #1
 8022598:	6144      	str	r4, [r0, #20]
 802259a:	6102      	str	r2, [r0, #16]
 802259c:	bd10      	pop	{r4, pc}

0802259e <__multiply>:
 802259e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225a2:	4614      	mov	r4, r2
 80225a4:	690a      	ldr	r2, [r1, #16]
 80225a6:	6923      	ldr	r3, [r4, #16]
 80225a8:	429a      	cmp	r2, r3
 80225aa:	bfb8      	it	lt
 80225ac:	460b      	movlt	r3, r1
 80225ae:	4689      	mov	r9, r1
 80225b0:	bfbc      	itt	lt
 80225b2:	46a1      	movlt	r9, r4
 80225b4:	461c      	movlt	r4, r3
 80225b6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80225ba:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80225be:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80225c2:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80225c6:	eb07 060a 	add.w	r6, r7, sl
 80225ca:	429e      	cmp	r6, r3
 80225cc:	bfc8      	it	gt
 80225ce:	3101      	addgt	r1, #1
 80225d0:	f7ff ff08 	bl	80223e4 <_Balloc>
 80225d4:	f100 0514 	add.w	r5, r0, #20
 80225d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80225dc:	462b      	mov	r3, r5
 80225de:	2200      	movs	r2, #0
 80225e0:	4543      	cmp	r3, r8
 80225e2:	d316      	bcc.n	8022612 <__multiply+0x74>
 80225e4:	f104 0214 	add.w	r2, r4, #20
 80225e8:	f109 0114 	add.w	r1, r9, #20
 80225ec:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80225f0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80225f4:	9301      	str	r3, [sp, #4]
 80225f6:	9c01      	ldr	r4, [sp, #4]
 80225f8:	4294      	cmp	r4, r2
 80225fa:	4613      	mov	r3, r2
 80225fc:	d80c      	bhi.n	8022618 <__multiply+0x7a>
 80225fe:	2e00      	cmp	r6, #0
 8022600:	dd03      	ble.n	802260a <__multiply+0x6c>
 8022602:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022606:	2b00      	cmp	r3, #0
 8022608:	d054      	beq.n	80226b4 <__multiply+0x116>
 802260a:	6106      	str	r6, [r0, #16]
 802260c:	b003      	add	sp, #12
 802260e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022612:	f843 2b04 	str.w	r2, [r3], #4
 8022616:	e7e3      	b.n	80225e0 <__multiply+0x42>
 8022618:	f8b3 a000 	ldrh.w	sl, [r3]
 802261c:	3204      	adds	r2, #4
 802261e:	f1ba 0f00 	cmp.w	sl, #0
 8022622:	d020      	beq.n	8022666 <__multiply+0xc8>
 8022624:	46ae      	mov	lr, r5
 8022626:	4689      	mov	r9, r1
 8022628:	f04f 0c00 	mov.w	ip, #0
 802262c:	f859 4b04 	ldr.w	r4, [r9], #4
 8022630:	f8be b000 	ldrh.w	fp, [lr]
 8022634:	b2a3      	uxth	r3, r4
 8022636:	fb0a b303 	mla	r3, sl, r3, fp
 802263a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 802263e:	f8de 4000 	ldr.w	r4, [lr]
 8022642:	4463      	add	r3, ip
 8022644:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8022648:	fb0a c40b 	mla	r4, sl, fp, ip
 802264c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8022650:	b29b      	uxth	r3, r3
 8022652:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8022656:	454f      	cmp	r7, r9
 8022658:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 802265c:	f84e 3b04 	str.w	r3, [lr], #4
 8022660:	d8e4      	bhi.n	802262c <__multiply+0x8e>
 8022662:	f8ce c000 	str.w	ip, [lr]
 8022666:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 802266a:	f1b9 0f00 	cmp.w	r9, #0
 802266e:	d01f      	beq.n	80226b0 <__multiply+0x112>
 8022670:	682b      	ldr	r3, [r5, #0]
 8022672:	46ae      	mov	lr, r5
 8022674:	468c      	mov	ip, r1
 8022676:	f04f 0a00 	mov.w	sl, #0
 802267a:	f8bc 4000 	ldrh.w	r4, [ip]
 802267e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8022682:	fb09 b404 	mla	r4, r9, r4, fp
 8022686:	44a2      	add	sl, r4
 8022688:	b29b      	uxth	r3, r3
 802268a:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 802268e:	f84e 3b04 	str.w	r3, [lr], #4
 8022692:	f85c 3b04 	ldr.w	r3, [ip], #4
 8022696:	f8be 4000 	ldrh.w	r4, [lr]
 802269a:	0c1b      	lsrs	r3, r3, #16
 802269c:	fb09 4303 	mla	r3, r9, r3, r4
 80226a0:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80226a4:	4567      	cmp	r7, ip
 80226a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80226aa:	d8e6      	bhi.n	802267a <__multiply+0xdc>
 80226ac:	f8ce 3000 	str.w	r3, [lr]
 80226b0:	3504      	adds	r5, #4
 80226b2:	e7a0      	b.n	80225f6 <__multiply+0x58>
 80226b4:	3e01      	subs	r6, #1
 80226b6:	e7a2      	b.n	80225fe <__multiply+0x60>

080226b8 <__pow5mult>:
 80226b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80226bc:	4615      	mov	r5, r2
 80226be:	f012 0203 	ands.w	r2, r2, #3
 80226c2:	4606      	mov	r6, r0
 80226c4:	460f      	mov	r7, r1
 80226c6:	d007      	beq.n	80226d8 <__pow5mult+0x20>
 80226c8:	3a01      	subs	r2, #1
 80226ca:	4c21      	ldr	r4, [pc, #132]	; (8022750 <__pow5mult+0x98>)
 80226cc:	2300      	movs	r3, #0
 80226ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80226d2:	f7ff fed2 	bl	802247a <__multadd>
 80226d6:	4607      	mov	r7, r0
 80226d8:	10ad      	asrs	r5, r5, #2
 80226da:	d035      	beq.n	8022748 <__pow5mult+0x90>
 80226dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80226de:	b93c      	cbnz	r4, 80226f0 <__pow5mult+0x38>
 80226e0:	2010      	movs	r0, #16
 80226e2:	f7ff fc5d 	bl	8021fa0 <malloc>
 80226e6:	6270      	str	r0, [r6, #36]	; 0x24
 80226e8:	6044      	str	r4, [r0, #4]
 80226ea:	6084      	str	r4, [r0, #8]
 80226ec:	6004      	str	r4, [r0, #0]
 80226ee:	60c4      	str	r4, [r0, #12]
 80226f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80226f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80226f8:	b94c      	cbnz	r4, 802270e <__pow5mult+0x56>
 80226fa:	f240 2171 	movw	r1, #625	; 0x271
 80226fe:	4630      	mov	r0, r6
 8022700:	f7ff ff44 	bl	802258c <__i2b>
 8022704:	2300      	movs	r3, #0
 8022706:	f8c8 0008 	str.w	r0, [r8, #8]
 802270a:	4604      	mov	r4, r0
 802270c:	6003      	str	r3, [r0, #0]
 802270e:	f04f 0800 	mov.w	r8, #0
 8022712:	07eb      	lsls	r3, r5, #31
 8022714:	d50a      	bpl.n	802272c <__pow5mult+0x74>
 8022716:	4639      	mov	r1, r7
 8022718:	4622      	mov	r2, r4
 802271a:	4630      	mov	r0, r6
 802271c:	f7ff ff3f 	bl	802259e <__multiply>
 8022720:	4639      	mov	r1, r7
 8022722:	4681      	mov	r9, r0
 8022724:	4630      	mov	r0, r6
 8022726:	f7ff fe91 	bl	802244c <_Bfree>
 802272a:	464f      	mov	r7, r9
 802272c:	106d      	asrs	r5, r5, #1
 802272e:	d00b      	beq.n	8022748 <__pow5mult+0x90>
 8022730:	6820      	ldr	r0, [r4, #0]
 8022732:	b938      	cbnz	r0, 8022744 <__pow5mult+0x8c>
 8022734:	4622      	mov	r2, r4
 8022736:	4621      	mov	r1, r4
 8022738:	4630      	mov	r0, r6
 802273a:	f7ff ff30 	bl	802259e <__multiply>
 802273e:	6020      	str	r0, [r4, #0]
 8022740:	f8c0 8000 	str.w	r8, [r0]
 8022744:	4604      	mov	r4, r0
 8022746:	e7e4      	b.n	8022712 <__pow5mult+0x5a>
 8022748:	4638      	mov	r0, r7
 802274a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802274e:	bf00      	nop
 8022750:	08032000 	.word	0x08032000

08022754 <__lshift>:
 8022754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022758:	460c      	mov	r4, r1
 802275a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802275e:	6923      	ldr	r3, [r4, #16]
 8022760:	6849      	ldr	r1, [r1, #4]
 8022762:	eb0a 0903 	add.w	r9, sl, r3
 8022766:	68a3      	ldr	r3, [r4, #8]
 8022768:	4607      	mov	r7, r0
 802276a:	4616      	mov	r6, r2
 802276c:	f109 0501 	add.w	r5, r9, #1
 8022770:	42ab      	cmp	r3, r5
 8022772:	db31      	blt.n	80227d8 <__lshift+0x84>
 8022774:	4638      	mov	r0, r7
 8022776:	f7ff fe35 	bl	80223e4 <_Balloc>
 802277a:	2200      	movs	r2, #0
 802277c:	4680      	mov	r8, r0
 802277e:	f100 0314 	add.w	r3, r0, #20
 8022782:	4611      	mov	r1, r2
 8022784:	4552      	cmp	r2, sl
 8022786:	db2a      	blt.n	80227de <__lshift+0x8a>
 8022788:	6920      	ldr	r0, [r4, #16]
 802278a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802278e:	f104 0114 	add.w	r1, r4, #20
 8022792:	f016 021f 	ands.w	r2, r6, #31
 8022796:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 802279a:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 802279e:	d022      	beq.n	80227e6 <__lshift+0x92>
 80227a0:	f1c2 0c20 	rsb	ip, r2, #32
 80227a4:	2000      	movs	r0, #0
 80227a6:	680e      	ldr	r6, [r1, #0]
 80227a8:	4096      	lsls	r6, r2
 80227aa:	4330      	orrs	r0, r6
 80227ac:	f843 0b04 	str.w	r0, [r3], #4
 80227b0:	f851 0b04 	ldr.w	r0, [r1], #4
 80227b4:	458e      	cmp	lr, r1
 80227b6:	fa20 f00c 	lsr.w	r0, r0, ip
 80227ba:	d8f4      	bhi.n	80227a6 <__lshift+0x52>
 80227bc:	6018      	str	r0, [r3, #0]
 80227be:	b108      	cbz	r0, 80227c4 <__lshift+0x70>
 80227c0:	f109 0502 	add.w	r5, r9, #2
 80227c4:	3d01      	subs	r5, #1
 80227c6:	4638      	mov	r0, r7
 80227c8:	f8c8 5010 	str.w	r5, [r8, #16]
 80227cc:	4621      	mov	r1, r4
 80227ce:	f7ff fe3d 	bl	802244c <_Bfree>
 80227d2:	4640      	mov	r0, r8
 80227d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80227d8:	3101      	adds	r1, #1
 80227da:	005b      	lsls	r3, r3, #1
 80227dc:	e7c8      	b.n	8022770 <__lshift+0x1c>
 80227de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80227e2:	3201      	adds	r2, #1
 80227e4:	e7ce      	b.n	8022784 <__lshift+0x30>
 80227e6:	3b04      	subs	r3, #4
 80227e8:	f851 2b04 	ldr.w	r2, [r1], #4
 80227ec:	f843 2f04 	str.w	r2, [r3, #4]!
 80227f0:	458e      	cmp	lr, r1
 80227f2:	d8f9      	bhi.n	80227e8 <__lshift+0x94>
 80227f4:	e7e6      	b.n	80227c4 <__lshift+0x70>

080227f6 <__mcmp>:
 80227f6:	6903      	ldr	r3, [r0, #16]
 80227f8:	690a      	ldr	r2, [r1, #16]
 80227fa:	1a9b      	subs	r3, r3, r2
 80227fc:	b530      	push	{r4, r5, lr}
 80227fe:	d10c      	bne.n	802281a <__mcmp+0x24>
 8022800:	0092      	lsls	r2, r2, #2
 8022802:	3014      	adds	r0, #20
 8022804:	3114      	adds	r1, #20
 8022806:	1884      	adds	r4, r0, r2
 8022808:	4411      	add	r1, r2
 802280a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 802280e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8022812:	4295      	cmp	r5, r2
 8022814:	d003      	beq.n	802281e <__mcmp+0x28>
 8022816:	d305      	bcc.n	8022824 <__mcmp+0x2e>
 8022818:	2301      	movs	r3, #1
 802281a:	4618      	mov	r0, r3
 802281c:	bd30      	pop	{r4, r5, pc}
 802281e:	42a0      	cmp	r0, r4
 8022820:	d3f3      	bcc.n	802280a <__mcmp+0x14>
 8022822:	e7fa      	b.n	802281a <__mcmp+0x24>
 8022824:	f04f 33ff 	mov.w	r3, #4294967295
 8022828:	e7f7      	b.n	802281a <__mcmp+0x24>

0802282a <__mdiff>:
 802282a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802282e:	460d      	mov	r5, r1
 8022830:	4607      	mov	r7, r0
 8022832:	4611      	mov	r1, r2
 8022834:	4628      	mov	r0, r5
 8022836:	4614      	mov	r4, r2
 8022838:	f7ff ffdd 	bl	80227f6 <__mcmp>
 802283c:	1e06      	subs	r6, r0, #0
 802283e:	d108      	bne.n	8022852 <__mdiff+0x28>
 8022840:	4631      	mov	r1, r6
 8022842:	4638      	mov	r0, r7
 8022844:	f7ff fdce 	bl	80223e4 <_Balloc>
 8022848:	2301      	movs	r3, #1
 802284a:	6103      	str	r3, [r0, #16]
 802284c:	6146      	str	r6, [r0, #20]
 802284e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022852:	bfa4      	itt	ge
 8022854:	4623      	movge	r3, r4
 8022856:	462c      	movge	r4, r5
 8022858:	4638      	mov	r0, r7
 802285a:	6861      	ldr	r1, [r4, #4]
 802285c:	bfa6      	itte	ge
 802285e:	461d      	movge	r5, r3
 8022860:	2600      	movge	r6, #0
 8022862:	2601      	movlt	r6, #1
 8022864:	f7ff fdbe 	bl	80223e4 <_Balloc>
 8022868:	692b      	ldr	r3, [r5, #16]
 802286a:	60c6      	str	r6, [r0, #12]
 802286c:	6926      	ldr	r6, [r4, #16]
 802286e:	f105 0914 	add.w	r9, r5, #20
 8022872:	f104 0214 	add.w	r2, r4, #20
 8022876:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 802287a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 802287e:	f100 0514 	add.w	r5, r0, #20
 8022882:	f04f 0c00 	mov.w	ip, #0
 8022886:	f852 ab04 	ldr.w	sl, [r2], #4
 802288a:	f859 4b04 	ldr.w	r4, [r9], #4
 802288e:	fa1c f18a 	uxtah	r1, ip, sl
 8022892:	b2a3      	uxth	r3, r4
 8022894:	1ac9      	subs	r1, r1, r3
 8022896:	0c23      	lsrs	r3, r4, #16
 8022898:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 802289c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80228a0:	b289      	uxth	r1, r1
 80228a2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80228a6:	45c8      	cmp	r8, r9
 80228a8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80228ac:	4696      	mov	lr, r2
 80228ae:	f845 3b04 	str.w	r3, [r5], #4
 80228b2:	d8e8      	bhi.n	8022886 <__mdiff+0x5c>
 80228b4:	45be      	cmp	lr, r7
 80228b6:	d305      	bcc.n	80228c4 <__mdiff+0x9a>
 80228b8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80228bc:	b18b      	cbz	r3, 80228e2 <__mdiff+0xb8>
 80228be:	6106      	str	r6, [r0, #16]
 80228c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80228c4:	f85e 1b04 	ldr.w	r1, [lr], #4
 80228c8:	fa1c f381 	uxtah	r3, ip, r1
 80228cc:	141a      	asrs	r2, r3, #16
 80228ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80228d2:	b29b      	uxth	r3, r3
 80228d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80228d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80228dc:	f845 3b04 	str.w	r3, [r5], #4
 80228e0:	e7e8      	b.n	80228b4 <__mdiff+0x8a>
 80228e2:	3e01      	subs	r6, #1
 80228e4:	e7e8      	b.n	80228b8 <__mdiff+0x8e>

080228e6 <__d2b>:
 80228e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80228ea:	460e      	mov	r6, r1
 80228ec:	2101      	movs	r1, #1
 80228ee:	ec59 8b10 	vmov	r8, r9, d0
 80228f2:	4615      	mov	r5, r2
 80228f4:	f7ff fd76 	bl	80223e4 <_Balloc>
 80228f8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80228fc:	4607      	mov	r7, r0
 80228fe:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8022902:	bb34      	cbnz	r4, 8022952 <__d2b+0x6c>
 8022904:	9301      	str	r3, [sp, #4]
 8022906:	f1b8 0f00 	cmp.w	r8, #0
 802290a:	d027      	beq.n	802295c <__d2b+0x76>
 802290c:	a802      	add	r0, sp, #8
 802290e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8022912:	f7ff fe0c 	bl	802252e <__lo0bits>
 8022916:	9900      	ldr	r1, [sp, #0]
 8022918:	b1f0      	cbz	r0, 8022958 <__d2b+0x72>
 802291a:	9a01      	ldr	r2, [sp, #4]
 802291c:	f1c0 0320 	rsb	r3, r0, #32
 8022920:	fa02 f303 	lsl.w	r3, r2, r3
 8022924:	430b      	orrs	r3, r1
 8022926:	40c2      	lsrs	r2, r0
 8022928:	617b      	str	r3, [r7, #20]
 802292a:	9201      	str	r2, [sp, #4]
 802292c:	9b01      	ldr	r3, [sp, #4]
 802292e:	61bb      	str	r3, [r7, #24]
 8022930:	2b00      	cmp	r3, #0
 8022932:	bf14      	ite	ne
 8022934:	2102      	movne	r1, #2
 8022936:	2101      	moveq	r1, #1
 8022938:	6139      	str	r1, [r7, #16]
 802293a:	b1c4      	cbz	r4, 802296e <__d2b+0x88>
 802293c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8022940:	4404      	add	r4, r0
 8022942:	6034      	str	r4, [r6, #0]
 8022944:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022948:	6028      	str	r0, [r5, #0]
 802294a:	4638      	mov	r0, r7
 802294c:	b003      	add	sp, #12
 802294e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022952:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022956:	e7d5      	b.n	8022904 <__d2b+0x1e>
 8022958:	6179      	str	r1, [r7, #20]
 802295a:	e7e7      	b.n	802292c <__d2b+0x46>
 802295c:	a801      	add	r0, sp, #4
 802295e:	f7ff fde6 	bl	802252e <__lo0bits>
 8022962:	9b01      	ldr	r3, [sp, #4]
 8022964:	617b      	str	r3, [r7, #20]
 8022966:	2101      	movs	r1, #1
 8022968:	6139      	str	r1, [r7, #16]
 802296a:	3020      	adds	r0, #32
 802296c:	e7e5      	b.n	802293a <__d2b+0x54>
 802296e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8022972:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8022976:	6030      	str	r0, [r6, #0]
 8022978:	6918      	ldr	r0, [r3, #16]
 802297a:	f7ff fdb9 	bl	80224f0 <__hi0bits>
 802297e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8022982:	e7e1      	b.n	8022948 <__d2b+0x62>

08022984 <_sbrk_r>:
 8022984:	b538      	push	{r3, r4, r5, lr}
 8022986:	4c06      	ldr	r4, [pc, #24]	; (80229a0 <_sbrk_r+0x1c>)
 8022988:	2300      	movs	r3, #0
 802298a:	4605      	mov	r5, r0
 802298c:	4608      	mov	r0, r1
 802298e:	6023      	str	r3, [r4, #0]
 8022990:	f7fd f9a8 	bl	801fce4 <_sbrk>
 8022994:	1c43      	adds	r3, r0, #1
 8022996:	d102      	bne.n	802299e <_sbrk_r+0x1a>
 8022998:	6823      	ldr	r3, [r4, #0]
 802299a:	b103      	cbz	r3, 802299e <_sbrk_r+0x1a>
 802299c:	602b      	str	r3, [r5, #0]
 802299e:	bd38      	pop	{r3, r4, r5, pc}
 80229a0:	2009659c 	.word	0x2009659c

080229a4 <__ssprint_r>:
 80229a4:	6893      	ldr	r3, [r2, #8]
 80229a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80229aa:	4681      	mov	r9, r0
 80229ac:	460c      	mov	r4, r1
 80229ae:	4617      	mov	r7, r2
 80229b0:	2b00      	cmp	r3, #0
 80229b2:	d060      	beq.n	8022a76 <__ssprint_r+0xd2>
 80229b4:	f04f 0b00 	mov.w	fp, #0
 80229b8:	f8d2 a000 	ldr.w	sl, [r2]
 80229bc:	465e      	mov	r6, fp
 80229be:	b356      	cbz	r6, 8022a16 <__ssprint_r+0x72>
 80229c0:	68a3      	ldr	r3, [r4, #8]
 80229c2:	429e      	cmp	r6, r3
 80229c4:	d344      	bcc.n	8022a50 <__ssprint_r+0xac>
 80229c6:	89a2      	ldrh	r2, [r4, #12]
 80229c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80229cc:	d03e      	beq.n	8022a4c <__ssprint_r+0xa8>
 80229ce:	6825      	ldr	r5, [r4, #0]
 80229d0:	6921      	ldr	r1, [r4, #16]
 80229d2:	eba5 0801 	sub.w	r8, r5, r1
 80229d6:	6965      	ldr	r5, [r4, #20]
 80229d8:	2302      	movs	r3, #2
 80229da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80229de:	fb95 f5f3 	sdiv	r5, r5, r3
 80229e2:	f108 0301 	add.w	r3, r8, #1
 80229e6:	4433      	add	r3, r6
 80229e8:	429d      	cmp	r5, r3
 80229ea:	bf38      	it	cc
 80229ec:	461d      	movcc	r5, r3
 80229ee:	0553      	lsls	r3, r2, #21
 80229f0:	d546      	bpl.n	8022a80 <__ssprint_r+0xdc>
 80229f2:	4629      	mov	r1, r5
 80229f4:	4648      	mov	r0, r9
 80229f6:	f7ff fadb 	bl	8021fb0 <_malloc_r>
 80229fa:	b998      	cbnz	r0, 8022a24 <__ssprint_r+0x80>
 80229fc:	230c      	movs	r3, #12
 80229fe:	f8c9 3000 	str.w	r3, [r9]
 8022a02:	89a3      	ldrh	r3, [r4, #12]
 8022a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022a08:	81a3      	strh	r3, [r4, #12]
 8022a0a:	2300      	movs	r3, #0
 8022a0c:	60bb      	str	r3, [r7, #8]
 8022a0e:	607b      	str	r3, [r7, #4]
 8022a10:	f04f 30ff 	mov.w	r0, #4294967295
 8022a14:	e031      	b.n	8022a7a <__ssprint_r+0xd6>
 8022a16:	f8da b000 	ldr.w	fp, [sl]
 8022a1a:	f8da 6004 	ldr.w	r6, [sl, #4]
 8022a1e:	f10a 0a08 	add.w	sl, sl, #8
 8022a22:	e7cc      	b.n	80229be <__ssprint_r+0x1a>
 8022a24:	4642      	mov	r2, r8
 8022a26:	6921      	ldr	r1, [r4, #16]
 8022a28:	9001      	str	r0, [sp, #4]
 8022a2a:	f7fd fc1f 	bl	802026c <memcpy>
 8022a2e:	89a2      	ldrh	r2, [r4, #12]
 8022a30:	9b01      	ldr	r3, [sp, #4]
 8022a32:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8022a36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8022a3a:	81a2      	strh	r2, [r4, #12]
 8022a3c:	6123      	str	r3, [r4, #16]
 8022a3e:	6165      	str	r5, [r4, #20]
 8022a40:	4443      	add	r3, r8
 8022a42:	eba5 0508 	sub.w	r5, r5, r8
 8022a46:	6023      	str	r3, [r4, #0]
 8022a48:	60a5      	str	r5, [r4, #8]
 8022a4a:	4633      	mov	r3, r6
 8022a4c:	429e      	cmp	r6, r3
 8022a4e:	d200      	bcs.n	8022a52 <__ssprint_r+0xae>
 8022a50:	4633      	mov	r3, r6
 8022a52:	461a      	mov	r2, r3
 8022a54:	4659      	mov	r1, fp
 8022a56:	6820      	ldr	r0, [r4, #0]
 8022a58:	9301      	str	r3, [sp, #4]
 8022a5a:	f000 f971 	bl	8022d40 <memmove>
 8022a5e:	68a2      	ldr	r2, [r4, #8]
 8022a60:	9b01      	ldr	r3, [sp, #4]
 8022a62:	1ad2      	subs	r2, r2, r3
 8022a64:	60a2      	str	r2, [r4, #8]
 8022a66:	6822      	ldr	r2, [r4, #0]
 8022a68:	4413      	add	r3, r2
 8022a6a:	6023      	str	r3, [r4, #0]
 8022a6c:	68bb      	ldr	r3, [r7, #8]
 8022a6e:	1b9e      	subs	r6, r3, r6
 8022a70:	60be      	str	r6, [r7, #8]
 8022a72:	2e00      	cmp	r6, #0
 8022a74:	d1cf      	bne.n	8022a16 <__ssprint_r+0x72>
 8022a76:	2000      	movs	r0, #0
 8022a78:	6078      	str	r0, [r7, #4]
 8022a7a:	b003      	add	sp, #12
 8022a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a80:	462a      	mov	r2, r5
 8022a82:	4648      	mov	r0, r9
 8022a84:	f000 f976 	bl	8022d74 <_realloc_r>
 8022a88:	4603      	mov	r3, r0
 8022a8a:	2800      	cmp	r0, #0
 8022a8c:	d1d6      	bne.n	8022a3c <__ssprint_r+0x98>
 8022a8e:	6921      	ldr	r1, [r4, #16]
 8022a90:	4648      	mov	r0, r9
 8022a92:	f000 f885 	bl	8022ba0 <_free_r>
 8022a96:	e7b1      	b.n	80229fc <__ssprint_r+0x58>

08022a98 <_calloc_r>:
 8022a98:	b510      	push	{r4, lr}
 8022a9a:	4351      	muls	r1, r2
 8022a9c:	f7ff fa88 	bl	8021fb0 <_malloc_r>
 8022aa0:	4604      	mov	r4, r0
 8022aa2:	b198      	cbz	r0, 8022acc <_calloc_r+0x34>
 8022aa4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8022aa8:	f022 0203 	bic.w	r2, r2, #3
 8022aac:	3a04      	subs	r2, #4
 8022aae:	2a24      	cmp	r2, #36	; 0x24
 8022ab0:	d81b      	bhi.n	8022aea <_calloc_r+0x52>
 8022ab2:	2a13      	cmp	r2, #19
 8022ab4:	d917      	bls.n	8022ae6 <_calloc_r+0x4e>
 8022ab6:	2100      	movs	r1, #0
 8022ab8:	2a1b      	cmp	r2, #27
 8022aba:	6001      	str	r1, [r0, #0]
 8022abc:	6041      	str	r1, [r0, #4]
 8022abe:	d807      	bhi.n	8022ad0 <_calloc_r+0x38>
 8022ac0:	f100 0308 	add.w	r3, r0, #8
 8022ac4:	2200      	movs	r2, #0
 8022ac6:	601a      	str	r2, [r3, #0]
 8022ac8:	605a      	str	r2, [r3, #4]
 8022aca:	609a      	str	r2, [r3, #8]
 8022acc:	4620      	mov	r0, r4
 8022ace:	bd10      	pop	{r4, pc}
 8022ad0:	2a24      	cmp	r2, #36	; 0x24
 8022ad2:	6081      	str	r1, [r0, #8]
 8022ad4:	60c1      	str	r1, [r0, #12]
 8022ad6:	bf11      	iteee	ne
 8022ad8:	f100 0310 	addne.w	r3, r0, #16
 8022adc:	6101      	streq	r1, [r0, #16]
 8022ade:	f100 0318 	addeq.w	r3, r0, #24
 8022ae2:	6141      	streq	r1, [r0, #20]
 8022ae4:	e7ee      	b.n	8022ac4 <_calloc_r+0x2c>
 8022ae6:	4603      	mov	r3, r0
 8022ae8:	e7ec      	b.n	8022ac4 <_calloc_r+0x2c>
 8022aea:	2100      	movs	r1, #0
 8022aec:	f7fd fbc9 	bl	8020282 <memset>
 8022af0:	e7ec      	b.n	8022acc <_calloc_r+0x34>
	...

08022af4 <_malloc_trim_r>:
 8022af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022af8:	4f25      	ldr	r7, [pc, #148]	; (8022b90 <_malloc_trim_r+0x9c>)
 8022afa:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8022b9c <_malloc_trim_r+0xa8>
 8022afe:	4689      	mov	r9, r1
 8022b00:	4606      	mov	r6, r0
 8022b02:	f7ff fc63 	bl	80223cc <__malloc_lock>
 8022b06:	68bb      	ldr	r3, [r7, #8]
 8022b08:	685d      	ldr	r5, [r3, #4]
 8022b0a:	f1a8 0411 	sub.w	r4, r8, #17
 8022b0e:	f025 0503 	bic.w	r5, r5, #3
 8022b12:	eba4 0409 	sub.w	r4, r4, r9
 8022b16:	442c      	add	r4, r5
 8022b18:	fbb4 f4f8 	udiv	r4, r4, r8
 8022b1c:	3c01      	subs	r4, #1
 8022b1e:	fb08 f404 	mul.w	r4, r8, r4
 8022b22:	4544      	cmp	r4, r8
 8022b24:	da05      	bge.n	8022b32 <_malloc_trim_r+0x3e>
 8022b26:	4630      	mov	r0, r6
 8022b28:	f7ff fc56 	bl	80223d8 <__malloc_unlock>
 8022b2c:	2000      	movs	r0, #0
 8022b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b32:	2100      	movs	r1, #0
 8022b34:	4630      	mov	r0, r6
 8022b36:	f7ff ff25 	bl	8022984 <_sbrk_r>
 8022b3a:	68bb      	ldr	r3, [r7, #8]
 8022b3c:	442b      	add	r3, r5
 8022b3e:	4298      	cmp	r0, r3
 8022b40:	d1f1      	bne.n	8022b26 <_malloc_trim_r+0x32>
 8022b42:	4261      	negs	r1, r4
 8022b44:	4630      	mov	r0, r6
 8022b46:	f7ff ff1d 	bl	8022984 <_sbrk_r>
 8022b4a:	3001      	adds	r0, #1
 8022b4c:	d110      	bne.n	8022b70 <_malloc_trim_r+0x7c>
 8022b4e:	2100      	movs	r1, #0
 8022b50:	4630      	mov	r0, r6
 8022b52:	f7ff ff17 	bl	8022984 <_sbrk_r>
 8022b56:	68ba      	ldr	r2, [r7, #8]
 8022b58:	1a83      	subs	r3, r0, r2
 8022b5a:	2b0f      	cmp	r3, #15
 8022b5c:	dde3      	ble.n	8022b26 <_malloc_trim_r+0x32>
 8022b5e:	490d      	ldr	r1, [pc, #52]	; (8022b94 <_malloc_trim_r+0xa0>)
 8022b60:	6809      	ldr	r1, [r1, #0]
 8022b62:	1a40      	subs	r0, r0, r1
 8022b64:	490c      	ldr	r1, [pc, #48]	; (8022b98 <_malloc_trim_r+0xa4>)
 8022b66:	f043 0301 	orr.w	r3, r3, #1
 8022b6a:	6008      	str	r0, [r1, #0]
 8022b6c:	6053      	str	r3, [r2, #4]
 8022b6e:	e7da      	b.n	8022b26 <_malloc_trim_r+0x32>
 8022b70:	68bb      	ldr	r3, [r7, #8]
 8022b72:	4a09      	ldr	r2, [pc, #36]	; (8022b98 <_malloc_trim_r+0xa4>)
 8022b74:	1b2d      	subs	r5, r5, r4
 8022b76:	f045 0501 	orr.w	r5, r5, #1
 8022b7a:	605d      	str	r5, [r3, #4]
 8022b7c:	6813      	ldr	r3, [r2, #0]
 8022b7e:	4630      	mov	r0, r6
 8022b80:	1b1c      	subs	r4, r3, r4
 8022b82:	6014      	str	r4, [r2, #0]
 8022b84:	f7ff fc28 	bl	80223d8 <__malloc_unlock>
 8022b88:	2001      	movs	r0, #1
 8022b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b8e:	bf00      	nop
 8022b90:	20001044 	.word	0x20001044
 8022b94:	2000144c 	.word	0x2000144c
 8022b98:	20090640 	.word	0x20090640
 8022b9c:	00000080 	.word	0x00000080

08022ba0 <_free_r>:
 8022ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ba4:	4604      	mov	r4, r0
 8022ba6:	4688      	mov	r8, r1
 8022ba8:	2900      	cmp	r1, #0
 8022baa:	f000 80ab 	beq.w	8022d04 <_free_r+0x164>
 8022bae:	f7ff fc0d 	bl	80223cc <__malloc_lock>
 8022bb2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8022bb6:	4d54      	ldr	r5, [pc, #336]	; (8022d08 <_free_r+0x168>)
 8022bb8:	f022 0001 	bic.w	r0, r2, #1
 8022bbc:	f1a8 0308 	sub.w	r3, r8, #8
 8022bc0:	181f      	adds	r7, r3, r0
 8022bc2:	68a9      	ldr	r1, [r5, #8]
 8022bc4:	687e      	ldr	r6, [r7, #4]
 8022bc6:	428f      	cmp	r7, r1
 8022bc8:	f026 0603 	bic.w	r6, r6, #3
 8022bcc:	f002 0201 	and.w	r2, r2, #1
 8022bd0:	d11b      	bne.n	8022c0a <_free_r+0x6a>
 8022bd2:	4430      	add	r0, r6
 8022bd4:	b93a      	cbnz	r2, 8022be6 <_free_r+0x46>
 8022bd6:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8022bda:	1a9b      	subs	r3, r3, r2
 8022bdc:	4410      	add	r0, r2
 8022bde:	6899      	ldr	r1, [r3, #8]
 8022be0:	68da      	ldr	r2, [r3, #12]
 8022be2:	60ca      	str	r2, [r1, #12]
 8022be4:	6091      	str	r1, [r2, #8]
 8022be6:	f040 0201 	orr.w	r2, r0, #1
 8022bea:	605a      	str	r2, [r3, #4]
 8022bec:	60ab      	str	r3, [r5, #8]
 8022bee:	4b47      	ldr	r3, [pc, #284]	; (8022d0c <_free_r+0x16c>)
 8022bf0:	681b      	ldr	r3, [r3, #0]
 8022bf2:	4298      	cmp	r0, r3
 8022bf4:	d304      	bcc.n	8022c00 <_free_r+0x60>
 8022bf6:	4b46      	ldr	r3, [pc, #280]	; (8022d10 <_free_r+0x170>)
 8022bf8:	4620      	mov	r0, r4
 8022bfa:	6819      	ldr	r1, [r3, #0]
 8022bfc:	f7ff ff7a 	bl	8022af4 <_malloc_trim_r>
 8022c00:	4620      	mov	r0, r4
 8022c02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022c06:	f7ff bbe7 	b.w	80223d8 <__malloc_unlock>
 8022c0a:	607e      	str	r6, [r7, #4]
 8022c0c:	2a00      	cmp	r2, #0
 8022c0e:	d139      	bne.n	8022c84 <_free_r+0xe4>
 8022c10:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8022c14:	1a5b      	subs	r3, r3, r1
 8022c16:	4408      	add	r0, r1
 8022c18:	6899      	ldr	r1, [r3, #8]
 8022c1a:	f105 0e08 	add.w	lr, r5, #8
 8022c1e:	4571      	cmp	r1, lr
 8022c20:	d032      	beq.n	8022c88 <_free_r+0xe8>
 8022c22:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8022c26:	f8c1 e00c 	str.w	lr, [r1, #12]
 8022c2a:	f8ce 1008 	str.w	r1, [lr, #8]
 8022c2e:	19b9      	adds	r1, r7, r6
 8022c30:	6849      	ldr	r1, [r1, #4]
 8022c32:	07c9      	lsls	r1, r1, #31
 8022c34:	d40a      	bmi.n	8022c4c <_free_r+0xac>
 8022c36:	4430      	add	r0, r6
 8022c38:	68b9      	ldr	r1, [r7, #8]
 8022c3a:	bb3a      	cbnz	r2, 8022c8c <_free_r+0xec>
 8022c3c:	4e35      	ldr	r6, [pc, #212]	; (8022d14 <_free_r+0x174>)
 8022c3e:	42b1      	cmp	r1, r6
 8022c40:	d124      	bne.n	8022c8c <_free_r+0xec>
 8022c42:	616b      	str	r3, [r5, #20]
 8022c44:	612b      	str	r3, [r5, #16]
 8022c46:	2201      	movs	r2, #1
 8022c48:	60d9      	str	r1, [r3, #12]
 8022c4a:	6099      	str	r1, [r3, #8]
 8022c4c:	f040 0101 	orr.w	r1, r0, #1
 8022c50:	6059      	str	r1, [r3, #4]
 8022c52:	5018      	str	r0, [r3, r0]
 8022c54:	2a00      	cmp	r2, #0
 8022c56:	d1d3      	bne.n	8022c00 <_free_r+0x60>
 8022c58:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8022c5c:	d21a      	bcs.n	8022c94 <_free_r+0xf4>
 8022c5e:	08c0      	lsrs	r0, r0, #3
 8022c60:	1081      	asrs	r1, r0, #2
 8022c62:	2201      	movs	r2, #1
 8022c64:	408a      	lsls	r2, r1
 8022c66:	6869      	ldr	r1, [r5, #4]
 8022c68:	3001      	adds	r0, #1
 8022c6a:	430a      	orrs	r2, r1
 8022c6c:	606a      	str	r2, [r5, #4]
 8022c6e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8022c72:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8022c76:	6099      	str	r1, [r3, #8]
 8022c78:	3a08      	subs	r2, #8
 8022c7a:	60da      	str	r2, [r3, #12]
 8022c7c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8022c80:	60cb      	str	r3, [r1, #12]
 8022c82:	e7bd      	b.n	8022c00 <_free_r+0x60>
 8022c84:	2200      	movs	r2, #0
 8022c86:	e7d2      	b.n	8022c2e <_free_r+0x8e>
 8022c88:	2201      	movs	r2, #1
 8022c8a:	e7d0      	b.n	8022c2e <_free_r+0x8e>
 8022c8c:	68fe      	ldr	r6, [r7, #12]
 8022c8e:	60ce      	str	r6, [r1, #12]
 8022c90:	60b1      	str	r1, [r6, #8]
 8022c92:	e7db      	b.n	8022c4c <_free_r+0xac>
 8022c94:	0a42      	lsrs	r2, r0, #9
 8022c96:	2a04      	cmp	r2, #4
 8022c98:	d813      	bhi.n	8022cc2 <_free_r+0x122>
 8022c9a:	0982      	lsrs	r2, r0, #6
 8022c9c:	3238      	adds	r2, #56	; 0x38
 8022c9e:	1c51      	adds	r1, r2, #1
 8022ca0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8022ca4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8022ca8:	428e      	cmp	r6, r1
 8022caa:	d124      	bne.n	8022cf6 <_free_r+0x156>
 8022cac:	2001      	movs	r0, #1
 8022cae:	1092      	asrs	r2, r2, #2
 8022cb0:	fa00 f202 	lsl.w	r2, r0, r2
 8022cb4:	6868      	ldr	r0, [r5, #4]
 8022cb6:	4302      	orrs	r2, r0
 8022cb8:	606a      	str	r2, [r5, #4]
 8022cba:	60de      	str	r6, [r3, #12]
 8022cbc:	6099      	str	r1, [r3, #8]
 8022cbe:	60b3      	str	r3, [r6, #8]
 8022cc0:	e7de      	b.n	8022c80 <_free_r+0xe0>
 8022cc2:	2a14      	cmp	r2, #20
 8022cc4:	d801      	bhi.n	8022cca <_free_r+0x12a>
 8022cc6:	325b      	adds	r2, #91	; 0x5b
 8022cc8:	e7e9      	b.n	8022c9e <_free_r+0xfe>
 8022cca:	2a54      	cmp	r2, #84	; 0x54
 8022ccc:	d802      	bhi.n	8022cd4 <_free_r+0x134>
 8022cce:	0b02      	lsrs	r2, r0, #12
 8022cd0:	326e      	adds	r2, #110	; 0x6e
 8022cd2:	e7e4      	b.n	8022c9e <_free_r+0xfe>
 8022cd4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8022cd8:	d802      	bhi.n	8022ce0 <_free_r+0x140>
 8022cda:	0bc2      	lsrs	r2, r0, #15
 8022cdc:	3277      	adds	r2, #119	; 0x77
 8022cde:	e7de      	b.n	8022c9e <_free_r+0xfe>
 8022ce0:	f240 5154 	movw	r1, #1364	; 0x554
 8022ce4:	428a      	cmp	r2, r1
 8022ce6:	bf9a      	itte	ls
 8022ce8:	0c82      	lsrls	r2, r0, #18
 8022cea:	327c      	addls	r2, #124	; 0x7c
 8022cec:	227e      	movhi	r2, #126	; 0x7e
 8022cee:	e7d6      	b.n	8022c9e <_free_r+0xfe>
 8022cf0:	6889      	ldr	r1, [r1, #8]
 8022cf2:	428e      	cmp	r6, r1
 8022cf4:	d004      	beq.n	8022d00 <_free_r+0x160>
 8022cf6:	684a      	ldr	r2, [r1, #4]
 8022cf8:	f022 0203 	bic.w	r2, r2, #3
 8022cfc:	4290      	cmp	r0, r2
 8022cfe:	d3f7      	bcc.n	8022cf0 <_free_r+0x150>
 8022d00:	68ce      	ldr	r6, [r1, #12]
 8022d02:	e7da      	b.n	8022cba <_free_r+0x11a>
 8022d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022d08:	20001044 	.word	0x20001044
 8022d0c:	20001450 	.word	0x20001450
 8022d10:	20090670 	.word	0x20090670
 8022d14:	2000104c 	.word	0x2000104c

08022d18 <__retarget_lock_acquire_recursive>:
 8022d18:	4770      	bx	lr

08022d1a <__retarget_lock_release_recursive>:
 8022d1a:	4770      	bx	lr

08022d1c <__ascii_mbtowc>:
 8022d1c:	b082      	sub	sp, #8
 8022d1e:	b901      	cbnz	r1, 8022d22 <__ascii_mbtowc+0x6>
 8022d20:	a901      	add	r1, sp, #4
 8022d22:	b142      	cbz	r2, 8022d36 <__ascii_mbtowc+0x1a>
 8022d24:	b14b      	cbz	r3, 8022d3a <__ascii_mbtowc+0x1e>
 8022d26:	7813      	ldrb	r3, [r2, #0]
 8022d28:	600b      	str	r3, [r1, #0]
 8022d2a:	7812      	ldrb	r2, [r2, #0]
 8022d2c:	1c10      	adds	r0, r2, #0
 8022d2e:	bf18      	it	ne
 8022d30:	2001      	movne	r0, #1
 8022d32:	b002      	add	sp, #8
 8022d34:	4770      	bx	lr
 8022d36:	4610      	mov	r0, r2
 8022d38:	e7fb      	b.n	8022d32 <__ascii_mbtowc+0x16>
 8022d3a:	f06f 0001 	mvn.w	r0, #1
 8022d3e:	e7f8      	b.n	8022d32 <__ascii_mbtowc+0x16>

08022d40 <memmove>:
 8022d40:	4288      	cmp	r0, r1
 8022d42:	b510      	push	{r4, lr}
 8022d44:	eb01 0302 	add.w	r3, r1, r2
 8022d48:	d803      	bhi.n	8022d52 <memmove+0x12>
 8022d4a:	1e42      	subs	r2, r0, #1
 8022d4c:	4299      	cmp	r1, r3
 8022d4e:	d10c      	bne.n	8022d6a <memmove+0x2a>
 8022d50:	bd10      	pop	{r4, pc}
 8022d52:	4298      	cmp	r0, r3
 8022d54:	d2f9      	bcs.n	8022d4a <memmove+0xa>
 8022d56:	1881      	adds	r1, r0, r2
 8022d58:	1ad2      	subs	r2, r2, r3
 8022d5a:	42d3      	cmn	r3, r2
 8022d5c:	d100      	bne.n	8022d60 <memmove+0x20>
 8022d5e:	bd10      	pop	{r4, pc}
 8022d60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022d64:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8022d68:	e7f7      	b.n	8022d5a <memmove+0x1a>
 8022d6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8022d6e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8022d72:	e7eb      	b.n	8022d4c <memmove+0xc>

08022d74 <_realloc_r>:
 8022d74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d78:	4682      	mov	sl, r0
 8022d7a:	460c      	mov	r4, r1
 8022d7c:	b929      	cbnz	r1, 8022d8a <_realloc_r+0x16>
 8022d7e:	4611      	mov	r1, r2
 8022d80:	b003      	add	sp, #12
 8022d82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d86:	f7ff b913 	b.w	8021fb0 <_malloc_r>
 8022d8a:	9201      	str	r2, [sp, #4]
 8022d8c:	f7ff fb1e 	bl	80223cc <__malloc_lock>
 8022d90:	9a01      	ldr	r2, [sp, #4]
 8022d92:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8022d96:	f102 080b 	add.w	r8, r2, #11
 8022d9a:	f1b8 0f16 	cmp.w	r8, #22
 8022d9e:	f1a4 0908 	sub.w	r9, r4, #8
 8022da2:	f025 0603 	bic.w	r6, r5, #3
 8022da6:	d90a      	bls.n	8022dbe <_realloc_r+0x4a>
 8022da8:	f038 0807 	bics.w	r8, r8, #7
 8022dac:	d509      	bpl.n	8022dc2 <_realloc_r+0x4e>
 8022dae:	230c      	movs	r3, #12
 8022db0:	f8ca 3000 	str.w	r3, [sl]
 8022db4:	2700      	movs	r7, #0
 8022db6:	4638      	mov	r0, r7
 8022db8:	b003      	add	sp, #12
 8022dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dbe:	f04f 0810 	mov.w	r8, #16
 8022dc2:	4590      	cmp	r8, r2
 8022dc4:	d3f3      	bcc.n	8022dae <_realloc_r+0x3a>
 8022dc6:	45b0      	cmp	r8, r6
 8022dc8:	f340 8145 	ble.w	8023056 <_realloc_r+0x2e2>
 8022dcc:	4ba8      	ldr	r3, [pc, #672]	; (8023070 <_realloc_r+0x2fc>)
 8022dce:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8022dd2:	eb09 0106 	add.w	r1, r9, r6
 8022dd6:	4571      	cmp	r1, lr
 8022dd8:	469b      	mov	fp, r3
 8022dda:	684b      	ldr	r3, [r1, #4]
 8022ddc:	d005      	beq.n	8022dea <_realloc_r+0x76>
 8022dde:	f023 0001 	bic.w	r0, r3, #1
 8022de2:	4408      	add	r0, r1
 8022de4:	6840      	ldr	r0, [r0, #4]
 8022de6:	07c7      	lsls	r7, r0, #31
 8022de8:	d447      	bmi.n	8022e7a <_realloc_r+0x106>
 8022dea:	f023 0303 	bic.w	r3, r3, #3
 8022dee:	4571      	cmp	r1, lr
 8022df0:	eb06 0703 	add.w	r7, r6, r3
 8022df4:	d119      	bne.n	8022e2a <_realloc_r+0xb6>
 8022df6:	f108 0010 	add.w	r0, r8, #16
 8022dfa:	4287      	cmp	r7, r0
 8022dfc:	db3f      	blt.n	8022e7e <_realloc_r+0x10a>
 8022dfe:	eb09 0308 	add.w	r3, r9, r8
 8022e02:	eba7 0708 	sub.w	r7, r7, r8
 8022e06:	f047 0701 	orr.w	r7, r7, #1
 8022e0a:	f8cb 3008 	str.w	r3, [fp, #8]
 8022e0e:	605f      	str	r7, [r3, #4]
 8022e10:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8022e14:	f003 0301 	and.w	r3, r3, #1
 8022e18:	ea43 0308 	orr.w	r3, r3, r8
 8022e1c:	f844 3c04 	str.w	r3, [r4, #-4]
 8022e20:	4650      	mov	r0, sl
 8022e22:	f7ff fad9 	bl	80223d8 <__malloc_unlock>
 8022e26:	4627      	mov	r7, r4
 8022e28:	e7c5      	b.n	8022db6 <_realloc_r+0x42>
 8022e2a:	45b8      	cmp	r8, r7
 8022e2c:	dc27      	bgt.n	8022e7e <_realloc_r+0x10a>
 8022e2e:	68cb      	ldr	r3, [r1, #12]
 8022e30:	688a      	ldr	r2, [r1, #8]
 8022e32:	60d3      	str	r3, [r2, #12]
 8022e34:	609a      	str	r2, [r3, #8]
 8022e36:	eba7 0008 	sub.w	r0, r7, r8
 8022e3a:	280f      	cmp	r0, #15
 8022e3c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8022e40:	eb09 0207 	add.w	r2, r9, r7
 8022e44:	f240 8109 	bls.w	802305a <_realloc_r+0x2e6>
 8022e48:	eb09 0108 	add.w	r1, r9, r8
 8022e4c:	f003 0301 	and.w	r3, r3, #1
 8022e50:	ea43 0308 	orr.w	r3, r3, r8
 8022e54:	f040 0001 	orr.w	r0, r0, #1
 8022e58:	f8c9 3004 	str.w	r3, [r9, #4]
 8022e5c:	6048      	str	r0, [r1, #4]
 8022e5e:	6853      	ldr	r3, [r2, #4]
 8022e60:	f043 0301 	orr.w	r3, r3, #1
 8022e64:	6053      	str	r3, [r2, #4]
 8022e66:	3108      	adds	r1, #8
 8022e68:	4650      	mov	r0, sl
 8022e6a:	f7ff fe99 	bl	8022ba0 <_free_r>
 8022e6e:	4650      	mov	r0, sl
 8022e70:	f7ff fab2 	bl	80223d8 <__malloc_unlock>
 8022e74:	f109 0708 	add.w	r7, r9, #8
 8022e78:	e79d      	b.n	8022db6 <_realloc_r+0x42>
 8022e7a:	2300      	movs	r3, #0
 8022e7c:	4619      	mov	r1, r3
 8022e7e:	07e8      	lsls	r0, r5, #31
 8022e80:	f100 8084 	bmi.w	8022f8c <_realloc_r+0x218>
 8022e84:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8022e88:	eba9 0505 	sub.w	r5, r9, r5
 8022e8c:	6868      	ldr	r0, [r5, #4]
 8022e8e:	f020 0003 	bic.w	r0, r0, #3
 8022e92:	4430      	add	r0, r6
 8022e94:	2900      	cmp	r1, #0
 8022e96:	d076      	beq.n	8022f86 <_realloc_r+0x212>
 8022e98:	4571      	cmp	r1, lr
 8022e9a:	d150      	bne.n	8022f3e <_realloc_r+0x1ca>
 8022e9c:	4403      	add	r3, r0
 8022e9e:	f108 0110 	add.w	r1, r8, #16
 8022ea2:	428b      	cmp	r3, r1
 8022ea4:	db6f      	blt.n	8022f86 <_realloc_r+0x212>
 8022ea6:	462f      	mov	r7, r5
 8022ea8:	68ea      	ldr	r2, [r5, #12]
 8022eaa:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8022eae:	60ca      	str	r2, [r1, #12]
 8022eb0:	6091      	str	r1, [r2, #8]
 8022eb2:	1f32      	subs	r2, r6, #4
 8022eb4:	2a24      	cmp	r2, #36	; 0x24
 8022eb6:	d83b      	bhi.n	8022f30 <_realloc_r+0x1bc>
 8022eb8:	2a13      	cmp	r2, #19
 8022eba:	d936      	bls.n	8022f2a <_realloc_r+0x1b6>
 8022ebc:	6821      	ldr	r1, [r4, #0]
 8022ebe:	60a9      	str	r1, [r5, #8]
 8022ec0:	6861      	ldr	r1, [r4, #4]
 8022ec2:	60e9      	str	r1, [r5, #12]
 8022ec4:	2a1b      	cmp	r2, #27
 8022ec6:	d81c      	bhi.n	8022f02 <_realloc_r+0x18e>
 8022ec8:	f105 0210 	add.w	r2, r5, #16
 8022ecc:	f104 0108 	add.w	r1, r4, #8
 8022ed0:	6808      	ldr	r0, [r1, #0]
 8022ed2:	6010      	str	r0, [r2, #0]
 8022ed4:	6848      	ldr	r0, [r1, #4]
 8022ed6:	6050      	str	r0, [r2, #4]
 8022ed8:	6889      	ldr	r1, [r1, #8]
 8022eda:	6091      	str	r1, [r2, #8]
 8022edc:	eb05 0208 	add.w	r2, r5, r8
 8022ee0:	eba3 0308 	sub.w	r3, r3, r8
 8022ee4:	f043 0301 	orr.w	r3, r3, #1
 8022ee8:	f8cb 2008 	str.w	r2, [fp, #8]
 8022eec:	6053      	str	r3, [r2, #4]
 8022eee:	686b      	ldr	r3, [r5, #4]
 8022ef0:	f003 0301 	and.w	r3, r3, #1
 8022ef4:	ea43 0308 	orr.w	r3, r3, r8
 8022ef8:	606b      	str	r3, [r5, #4]
 8022efa:	4650      	mov	r0, sl
 8022efc:	f7ff fa6c 	bl	80223d8 <__malloc_unlock>
 8022f00:	e759      	b.n	8022db6 <_realloc_r+0x42>
 8022f02:	68a1      	ldr	r1, [r4, #8]
 8022f04:	6129      	str	r1, [r5, #16]
 8022f06:	68e1      	ldr	r1, [r4, #12]
 8022f08:	6169      	str	r1, [r5, #20]
 8022f0a:	2a24      	cmp	r2, #36	; 0x24
 8022f0c:	bf01      	itttt	eq
 8022f0e:	6922      	ldreq	r2, [r4, #16]
 8022f10:	61aa      	streq	r2, [r5, #24]
 8022f12:	6960      	ldreq	r0, [r4, #20]
 8022f14:	61e8      	streq	r0, [r5, #28]
 8022f16:	bf19      	ittee	ne
 8022f18:	f105 0218 	addne.w	r2, r5, #24
 8022f1c:	f104 0110 	addne.w	r1, r4, #16
 8022f20:	f105 0220 	addeq.w	r2, r5, #32
 8022f24:	f104 0118 	addeq.w	r1, r4, #24
 8022f28:	e7d2      	b.n	8022ed0 <_realloc_r+0x15c>
 8022f2a:	463a      	mov	r2, r7
 8022f2c:	4621      	mov	r1, r4
 8022f2e:	e7cf      	b.n	8022ed0 <_realloc_r+0x15c>
 8022f30:	4621      	mov	r1, r4
 8022f32:	4638      	mov	r0, r7
 8022f34:	9301      	str	r3, [sp, #4]
 8022f36:	f7ff ff03 	bl	8022d40 <memmove>
 8022f3a:	9b01      	ldr	r3, [sp, #4]
 8022f3c:	e7ce      	b.n	8022edc <_realloc_r+0x168>
 8022f3e:	18c7      	adds	r7, r0, r3
 8022f40:	45b8      	cmp	r8, r7
 8022f42:	dc20      	bgt.n	8022f86 <_realloc_r+0x212>
 8022f44:	68cb      	ldr	r3, [r1, #12]
 8022f46:	688a      	ldr	r2, [r1, #8]
 8022f48:	60d3      	str	r3, [r2, #12]
 8022f4a:	609a      	str	r2, [r3, #8]
 8022f4c:	4628      	mov	r0, r5
 8022f4e:	68eb      	ldr	r3, [r5, #12]
 8022f50:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8022f54:	60d3      	str	r3, [r2, #12]
 8022f56:	609a      	str	r2, [r3, #8]
 8022f58:	1f32      	subs	r2, r6, #4
 8022f5a:	2a24      	cmp	r2, #36	; 0x24
 8022f5c:	d842      	bhi.n	8022fe4 <_realloc_r+0x270>
 8022f5e:	2a13      	cmp	r2, #19
 8022f60:	d93e      	bls.n	8022fe0 <_realloc_r+0x26c>
 8022f62:	6823      	ldr	r3, [r4, #0]
 8022f64:	60ab      	str	r3, [r5, #8]
 8022f66:	6863      	ldr	r3, [r4, #4]
 8022f68:	60eb      	str	r3, [r5, #12]
 8022f6a:	2a1b      	cmp	r2, #27
 8022f6c:	d824      	bhi.n	8022fb8 <_realloc_r+0x244>
 8022f6e:	f105 0010 	add.w	r0, r5, #16
 8022f72:	f104 0308 	add.w	r3, r4, #8
 8022f76:	681a      	ldr	r2, [r3, #0]
 8022f78:	6002      	str	r2, [r0, #0]
 8022f7a:	685a      	ldr	r2, [r3, #4]
 8022f7c:	6042      	str	r2, [r0, #4]
 8022f7e:	689b      	ldr	r3, [r3, #8]
 8022f80:	6083      	str	r3, [r0, #8]
 8022f82:	46a9      	mov	r9, r5
 8022f84:	e757      	b.n	8022e36 <_realloc_r+0xc2>
 8022f86:	4580      	cmp	r8, r0
 8022f88:	4607      	mov	r7, r0
 8022f8a:	dddf      	ble.n	8022f4c <_realloc_r+0x1d8>
 8022f8c:	4611      	mov	r1, r2
 8022f8e:	4650      	mov	r0, sl
 8022f90:	f7ff f80e 	bl	8021fb0 <_malloc_r>
 8022f94:	4607      	mov	r7, r0
 8022f96:	2800      	cmp	r0, #0
 8022f98:	d0af      	beq.n	8022efa <_realloc_r+0x186>
 8022f9a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8022f9e:	f023 0301 	bic.w	r3, r3, #1
 8022fa2:	f1a0 0208 	sub.w	r2, r0, #8
 8022fa6:	444b      	add	r3, r9
 8022fa8:	429a      	cmp	r2, r3
 8022faa:	d11f      	bne.n	8022fec <_realloc_r+0x278>
 8022fac:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8022fb0:	f027 0703 	bic.w	r7, r7, #3
 8022fb4:	4437      	add	r7, r6
 8022fb6:	e73e      	b.n	8022e36 <_realloc_r+0xc2>
 8022fb8:	68a3      	ldr	r3, [r4, #8]
 8022fba:	612b      	str	r3, [r5, #16]
 8022fbc:	68e3      	ldr	r3, [r4, #12]
 8022fbe:	616b      	str	r3, [r5, #20]
 8022fc0:	2a24      	cmp	r2, #36	; 0x24
 8022fc2:	bf01      	itttt	eq
 8022fc4:	6923      	ldreq	r3, [r4, #16]
 8022fc6:	61ab      	streq	r3, [r5, #24]
 8022fc8:	6962      	ldreq	r2, [r4, #20]
 8022fca:	61ea      	streq	r2, [r5, #28]
 8022fcc:	bf19      	ittee	ne
 8022fce:	f105 0018 	addne.w	r0, r5, #24
 8022fd2:	f104 0310 	addne.w	r3, r4, #16
 8022fd6:	f105 0020 	addeq.w	r0, r5, #32
 8022fda:	f104 0318 	addeq.w	r3, r4, #24
 8022fde:	e7ca      	b.n	8022f76 <_realloc_r+0x202>
 8022fe0:	4623      	mov	r3, r4
 8022fe2:	e7c8      	b.n	8022f76 <_realloc_r+0x202>
 8022fe4:	4621      	mov	r1, r4
 8022fe6:	f7ff feab 	bl	8022d40 <memmove>
 8022fea:	e7ca      	b.n	8022f82 <_realloc_r+0x20e>
 8022fec:	1f32      	subs	r2, r6, #4
 8022fee:	2a24      	cmp	r2, #36	; 0x24
 8022ff0:	d82d      	bhi.n	802304e <_realloc_r+0x2da>
 8022ff2:	2a13      	cmp	r2, #19
 8022ff4:	d928      	bls.n	8023048 <_realloc_r+0x2d4>
 8022ff6:	6823      	ldr	r3, [r4, #0]
 8022ff8:	6003      	str	r3, [r0, #0]
 8022ffa:	6863      	ldr	r3, [r4, #4]
 8022ffc:	6043      	str	r3, [r0, #4]
 8022ffe:	2a1b      	cmp	r2, #27
 8023000:	d80e      	bhi.n	8023020 <_realloc_r+0x2ac>
 8023002:	f100 0308 	add.w	r3, r0, #8
 8023006:	f104 0208 	add.w	r2, r4, #8
 802300a:	6811      	ldr	r1, [r2, #0]
 802300c:	6019      	str	r1, [r3, #0]
 802300e:	6851      	ldr	r1, [r2, #4]
 8023010:	6059      	str	r1, [r3, #4]
 8023012:	6892      	ldr	r2, [r2, #8]
 8023014:	609a      	str	r2, [r3, #8]
 8023016:	4621      	mov	r1, r4
 8023018:	4650      	mov	r0, sl
 802301a:	f7ff fdc1 	bl	8022ba0 <_free_r>
 802301e:	e76c      	b.n	8022efa <_realloc_r+0x186>
 8023020:	68a3      	ldr	r3, [r4, #8]
 8023022:	6083      	str	r3, [r0, #8]
 8023024:	68e3      	ldr	r3, [r4, #12]
 8023026:	60c3      	str	r3, [r0, #12]
 8023028:	2a24      	cmp	r2, #36	; 0x24
 802302a:	bf01      	itttt	eq
 802302c:	6923      	ldreq	r3, [r4, #16]
 802302e:	6103      	streq	r3, [r0, #16]
 8023030:	6961      	ldreq	r1, [r4, #20]
 8023032:	6141      	streq	r1, [r0, #20]
 8023034:	bf19      	ittee	ne
 8023036:	f100 0310 	addne.w	r3, r0, #16
 802303a:	f104 0210 	addne.w	r2, r4, #16
 802303e:	f100 0318 	addeq.w	r3, r0, #24
 8023042:	f104 0218 	addeq.w	r2, r4, #24
 8023046:	e7e0      	b.n	802300a <_realloc_r+0x296>
 8023048:	4603      	mov	r3, r0
 802304a:	4622      	mov	r2, r4
 802304c:	e7dd      	b.n	802300a <_realloc_r+0x296>
 802304e:	4621      	mov	r1, r4
 8023050:	f7ff fe76 	bl	8022d40 <memmove>
 8023054:	e7df      	b.n	8023016 <_realloc_r+0x2a2>
 8023056:	4637      	mov	r7, r6
 8023058:	e6ed      	b.n	8022e36 <_realloc_r+0xc2>
 802305a:	f003 0301 	and.w	r3, r3, #1
 802305e:	431f      	orrs	r7, r3
 8023060:	f8c9 7004 	str.w	r7, [r9, #4]
 8023064:	6853      	ldr	r3, [r2, #4]
 8023066:	f043 0301 	orr.w	r3, r3, #1
 802306a:	6053      	str	r3, [r2, #4]
 802306c:	e6ff      	b.n	8022e6e <_realloc_r+0xfa>
 802306e:	bf00      	nop
 8023070:	20001044 	.word	0x20001044

08023074 <__ascii_wctomb>:
 8023074:	b149      	cbz	r1, 802308a <__ascii_wctomb+0x16>
 8023076:	2aff      	cmp	r2, #255	; 0xff
 8023078:	bf85      	ittet	hi
 802307a:	238a      	movhi	r3, #138	; 0x8a
 802307c:	6003      	strhi	r3, [r0, #0]
 802307e:	700a      	strbls	r2, [r1, #0]
 8023080:	f04f 30ff 	movhi.w	r0, #4294967295
 8023084:	bf98      	it	ls
 8023086:	2001      	movls	r0, #1
 8023088:	4770      	bx	lr
 802308a:	4608      	mov	r0, r1
 802308c:	4770      	bx	lr
	...

08023090 <cbrt>:
 8023090:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8023094:	ec51 0b10 	vmov	r0, r1, d0
 8023098:	4a59      	ldr	r2, [pc, #356]	; (8023200 <cbrt+0x170>)
 802309a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802309e:	4293      	cmp	r3, r2
 80230a0:	468a      	mov	sl, r1
 80230a2:	ee10 2a10 	vmov	r2, s0
 80230a6:	d907      	bls.n	80230b8 <cbrt+0x28>
 80230a8:	460b      	mov	r3, r1
 80230aa:	f7dd f907 	bl	80002bc <__adddf3>
 80230ae:	ec41 0b10 	vmov	d0, r0, r1
 80230b2:	b002      	add	sp, #8
 80230b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80230b8:	431a      	orrs	r2, r3
 80230ba:	d0f8      	beq.n	80230ae <cbrt+0x1e>
 80230bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80230c0:	4619      	mov	r1, r3
 80230c2:	4606      	mov	r6, r0
 80230c4:	461f      	mov	r7, r3
 80230c6:	d27c      	bcs.n	80231c2 <cbrt+0x132>
 80230c8:	2200      	movs	r2, #0
 80230ca:	4b4e      	ldr	r3, [pc, #312]	; (8023204 <cbrt+0x174>)
 80230cc:	f7dd faa8 	bl	8000620 <__aeabi_dmul>
 80230d0:	2203      	movs	r2, #3
 80230d2:	fbb1 f3f2 	udiv	r3, r1, r2
 80230d6:	f103 5525 	add.w	r5, r3, #692060160	; 0x29400000
 80230da:	f505 157d 	add.w	r5, r5, #4145152	; 0x3f4000
 80230de:	f505 5562 	add.w	r5, r5, #14464	; 0x3880
 80230e2:	4604      	mov	r4, r0
 80230e4:	3513      	adds	r5, #19
 80230e6:	4622      	mov	r2, r4
 80230e8:	462b      	mov	r3, r5
 80230ea:	4620      	mov	r0, r4
 80230ec:	4629      	mov	r1, r5
 80230ee:	f7dd fa97 	bl	8000620 <__aeabi_dmul>
 80230f2:	4632      	mov	r2, r6
 80230f4:	463b      	mov	r3, r7
 80230f6:	f7dd fbbd 	bl	8000874 <__aeabi_ddiv>
 80230fa:	4622      	mov	r2, r4
 80230fc:	462b      	mov	r3, r5
 80230fe:	f7dd fa8f 	bl	8000620 <__aeabi_dmul>
 8023102:	a335      	add	r3, pc, #212	; (adr r3, 80231d8 <cbrt+0x148>)
 8023104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023108:	f7dd f8d8 	bl	80002bc <__adddf3>
 802310c:	a334      	add	r3, pc, #208	; (adr r3, 80231e0 <cbrt+0x150>)
 802310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023112:	e9cd 0100 	strd	r0, r1, [sp]
 8023116:	f7dd f8d1 	bl	80002bc <__adddf3>
 802311a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802311e:	4680      	mov	r8, r0
 8023120:	4689      	mov	r9, r1
 8023122:	a131      	add	r1, pc, #196	; (adr r1, 80231e8 <cbrt+0x158>)
 8023124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023128:	f7dd fba4 	bl	8000874 <__aeabi_ddiv>
 802312c:	4602      	mov	r2, r0
 802312e:	460b      	mov	r3, r1
 8023130:	4640      	mov	r0, r8
 8023132:	4649      	mov	r1, r9
 8023134:	f7dd f8c2 	bl	80002bc <__adddf3>
 8023138:	4602      	mov	r2, r0
 802313a:	460b      	mov	r3, r1
 802313c:	a12c      	add	r1, pc, #176	; (adr r1, 80231f0 <cbrt+0x160>)
 802313e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023142:	f7dd fb97 	bl	8000874 <__aeabi_ddiv>
 8023146:	a32c      	add	r3, pc, #176	; (adr r3, 80231f8 <cbrt+0x168>)
 8023148:	e9d3 2300 	ldrd	r2, r3, [r3]
 802314c:	f7dd f8b6 	bl	80002bc <__adddf3>
 8023150:	4622      	mov	r2, r4
 8023152:	462b      	mov	r3, r5
 8023154:	f7dd fa64 	bl	8000620 <__aeabi_dmul>
 8023158:	2400      	movs	r4, #0
 802315a:	1c4d      	adds	r5, r1, #1
 802315c:	4622      	mov	r2, r4
 802315e:	462b      	mov	r3, r5
 8023160:	4620      	mov	r0, r4
 8023162:	4629      	mov	r1, r5
 8023164:	f7dd fa5c 	bl	8000620 <__aeabi_dmul>
 8023168:	4602      	mov	r2, r0
 802316a:	460b      	mov	r3, r1
 802316c:	4630      	mov	r0, r6
 802316e:	4639      	mov	r1, r7
 8023170:	f7dd fb80 	bl	8000874 <__aeabi_ddiv>
 8023174:	4622      	mov	r2, r4
 8023176:	462b      	mov	r3, r5
 8023178:	4680      	mov	r8, r0
 802317a:	4689      	mov	r9, r1
 802317c:	f7dd f89c 	bl	80002b8 <__aeabi_dsub>
 8023180:	4622      	mov	r2, r4
 8023182:	4606      	mov	r6, r0
 8023184:	460f      	mov	r7, r1
 8023186:	462b      	mov	r3, r5
 8023188:	4620      	mov	r0, r4
 802318a:	4629      	mov	r1, r5
 802318c:	f7dd f896 	bl	80002bc <__adddf3>
 8023190:	4642      	mov	r2, r8
 8023192:	464b      	mov	r3, r9
 8023194:	f7dd f892 	bl	80002bc <__adddf3>
 8023198:	4602      	mov	r2, r0
 802319a:	460b      	mov	r3, r1
 802319c:	4630      	mov	r0, r6
 802319e:	4639      	mov	r1, r7
 80231a0:	f7dd fb68 	bl	8000874 <__aeabi_ddiv>
 80231a4:	4622      	mov	r2, r4
 80231a6:	462b      	mov	r3, r5
 80231a8:	f7dd fa3a 	bl	8000620 <__aeabi_dmul>
 80231ac:	4602      	mov	r2, r0
 80231ae:	460b      	mov	r3, r1
 80231b0:	4620      	mov	r0, r4
 80231b2:	4629      	mov	r1, r5
 80231b4:	f7dd f882 	bl	80002bc <__adddf3>
 80231b8:	f00a 4a00 	and.w	sl, sl, #2147483648	; 0x80000000
 80231bc:	ea4a 0101 	orr.w	r1, sl, r1
 80231c0:	e775      	b.n	80230ae <cbrt+0x1e>
 80231c2:	2203      	movs	r2, #3
 80231c4:	fb93 f3f2 	sdiv	r3, r3, r2
 80231c8:	f103 552c 	add.w	r5, r3, #721420288	; 0x2b000000
 80231cc:	f5a5 05c1 	sub.w	r5, r5, #6324224	; 0x608000
 80231d0:	2400      	movs	r4, #0
 80231d2:	f2a5 756d 	subw	r5, r5, #1901	; 0x76d
 80231d6:	e786      	b.n	80230e6 <cbrt+0x56>
 80231d8:	f15f15f1 	.word	0xf15f15f1
 80231dc:	3fe15f15 	.word	0x3fe15f15
 80231e0:	0ea0ea0f 	.word	0x0ea0ea0f
 80231e4:	3ff6a0ea 	.word	0x3ff6a0ea
 80231e8:	2532c834 	.word	0x2532c834
 80231ec:	bfe691de 	.word	0xbfe691de
 80231f0:	6db6db6e 	.word	0x6db6db6e
 80231f4:	3ff9b6db 	.word	0x3ff9b6db
 80231f8:	b6db6db7 	.word	0xb6db6db7
 80231fc:	3fd6db6d 	.word	0x3fd6db6d
 8023200:	7fefffff 	.word	0x7fefffff
 8023204:	43500000 	.word	0x43500000

08023208 <floor>:
 8023208:	ec51 0b10 	vmov	r0, r1, d0
 802320c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023210:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8023214:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8023218:	2e13      	cmp	r6, #19
 802321a:	ee10 8a10 	vmov	r8, s0
 802321e:	460c      	mov	r4, r1
 8023220:	ee10 5a10 	vmov	r5, s0
 8023224:	dc35      	bgt.n	8023292 <floor+0x8a>
 8023226:	2e00      	cmp	r6, #0
 8023228:	da17      	bge.n	802325a <floor+0x52>
 802322a:	a335      	add	r3, pc, #212	; (adr r3, 8023300 <floor+0xf8>)
 802322c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023230:	f7dd f844 	bl	80002bc <__adddf3>
 8023234:	2200      	movs	r2, #0
 8023236:	2300      	movs	r3, #0
 8023238:	f7dd fc82 	bl	8000b40 <__aeabi_dcmpgt>
 802323c:	b150      	cbz	r0, 8023254 <floor+0x4c>
 802323e:	2c00      	cmp	r4, #0
 8023240:	da5a      	bge.n	80232f8 <floor+0xf0>
 8023242:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8023246:	ea53 0308 	orrs.w	r3, r3, r8
 802324a:	4b2f      	ldr	r3, [pc, #188]	; (8023308 <floor+0x100>)
 802324c:	f04f 0500 	mov.w	r5, #0
 8023250:	bf18      	it	ne
 8023252:	461c      	movne	r4, r3
 8023254:	4621      	mov	r1, r4
 8023256:	4628      	mov	r0, r5
 8023258:	e025      	b.n	80232a6 <floor+0x9e>
 802325a:	4f2c      	ldr	r7, [pc, #176]	; (802330c <floor+0x104>)
 802325c:	4137      	asrs	r7, r6
 802325e:	ea01 0307 	and.w	r3, r1, r7
 8023262:	4303      	orrs	r3, r0
 8023264:	d01f      	beq.n	80232a6 <floor+0x9e>
 8023266:	a326      	add	r3, pc, #152	; (adr r3, 8023300 <floor+0xf8>)
 8023268:	e9d3 2300 	ldrd	r2, r3, [r3]
 802326c:	f7dd f826 	bl	80002bc <__adddf3>
 8023270:	2200      	movs	r2, #0
 8023272:	2300      	movs	r3, #0
 8023274:	f7dd fc64 	bl	8000b40 <__aeabi_dcmpgt>
 8023278:	2800      	cmp	r0, #0
 802327a:	d0eb      	beq.n	8023254 <floor+0x4c>
 802327c:	2c00      	cmp	r4, #0
 802327e:	bfbe      	ittt	lt
 8023280:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8023284:	fa43 f606 	asrlt.w	r6, r3, r6
 8023288:	19a4      	addlt	r4, r4, r6
 802328a:	ea24 0407 	bic.w	r4, r4, r7
 802328e:	2500      	movs	r5, #0
 8023290:	e7e0      	b.n	8023254 <floor+0x4c>
 8023292:	2e33      	cmp	r6, #51	; 0x33
 8023294:	dd0b      	ble.n	80232ae <floor+0xa6>
 8023296:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 802329a:	d104      	bne.n	80232a6 <floor+0x9e>
 802329c:	ee10 2a10 	vmov	r2, s0
 80232a0:	460b      	mov	r3, r1
 80232a2:	f7dd f80b 	bl	80002bc <__adddf3>
 80232a6:	ec41 0b10 	vmov	d0, r0, r1
 80232aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80232ae:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80232b2:	f04f 33ff 	mov.w	r3, #4294967295
 80232b6:	fa23 f707 	lsr.w	r7, r3, r7
 80232ba:	4238      	tst	r0, r7
 80232bc:	d0f3      	beq.n	80232a6 <floor+0x9e>
 80232be:	a310      	add	r3, pc, #64	; (adr r3, 8023300 <floor+0xf8>)
 80232c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232c4:	f7dc fffa 	bl	80002bc <__adddf3>
 80232c8:	2200      	movs	r2, #0
 80232ca:	2300      	movs	r3, #0
 80232cc:	f7dd fc38 	bl	8000b40 <__aeabi_dcmpgt>
 80232d0:	2800      	cmp	r0, #0
 80232d2:	d0bf      	beq.n	8023254 <floor+0x4c>
 80232d4:	2c00      	cmp	r4, #0
 80232d6:	da02      	bge.n	80232de <floor+0xd6>
 80232d8:	2e14      	cmp	r6, #20
 80232da:	d103      	bne.n	80232e4 <floor+0xdc>
 80232dc:	3401      	adds	r4, #1
 80232de:	ea25 0507 	bic.w	r5, r5, r7
 80232e2:	e7b7      	b.n	8023254 <floor+0x4c>
 80232e4:	2301      	movs	r3, #1
 80232e6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80232ea:	fa03 f606 	lsl.w	r6, r3, r6
 80232ee:	4435      	add	r5, r6
 80232f0:	45a8      	cmp	r8, r5
 80232f2:	bf88      	it	hi
 80232f4:	18e4      	addhi	r4, r4, r3
 80232f6:	e7f2      	b.n	80232de <floor+0xd6>
 80232f8:	2500      	movs	r5, #0
 80232fa:	462c      	mov	r4, r5
 80232fc:	e7aa      	b.n	8023254 <floor+0x4c>
 80232fe:	bf00      	nop
 8023300:	8800759c 	.word	0x8800759c
 8023304:	7e37e43c 	.word	0x7e37e43c
 8023308:	bff00000 	.word	0xbff00000
 802330c:	000fffff 	.word	0x000fffff

08023310 <exp>:
 8023310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023312:	ed2d 8b02 	vpush	{d8}
 8023316:	4e38      	ldr	r6, [pc, #224]	; (80233f8 <exp+0xe8>)
 8023318:	b08b      	sub	sp, #44	; 0x2c
 802331a:	ec55 4b10 	vmov	r4, r5, d0
 802331e:	f000 fb17 	bl	8023950 <__ieee754_exp>
 8023322:	f996 3000 	ldrsb.w	r3, [r6]
 8023326:	eeb0 8a40 	vmov.f32	s16, s0
 802332a:	eef0 8a60 	vmov.f32	s17, s1
 802332e:	3301      	adds	r3, #1
 8023330:	d02c      	beq.n	802338c <exp+0x7c>
 8023332:	ec45 4b10 	vmov	d0, r4, r5
 8023336:	f001 fc67 	bl	8024c08 <finite>
 802333a:	b338      	cbz	r0, 802338c <exp+0x7c>
 802333c:	a32a      	add	r3, pc, #168	; (adr r3, 80233e8 <exp+0xd8>)
 802333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023342:	4620      	mov	r0, r4
 8023344:	4629      	mov	r1, r5
 8023346:	f7dd fbfb 	bl	8000b40 <__aeabi_dcmpgt>
 802334a:	4607      	mov	r7, r0
 802334c:	2800      	cmp	r0, #0
 802334e:	d030      	beq.n	80233b2 <exp+0xa2>
 8023350:	2303      	movs	r3, #3
 8023352:	9300      	str	r3, [sp, #0]
 8023354:	4b29      	ldr	r3, [pc, #164]	; (80233fc <exp+0xec>)
 8023356:	9301      	str	r3, [sp, #4]
 8023358:	2300      	movs	r3, #0
 802335a:	9308      	str	r3, [sp, #32]
 802335c:	f996 3000 	ldrsb.w	r3, [r6]
 8023360:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8023364:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8023368:	b9c3      	cbnz	r3, 802339c <exp+0x8c>
 802336a:	4b25      	ldr	r3, [pc, #148]	; (8023400 <exp+0xf0>)
 802336c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8023370:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023374:	4668      	mov	r0, sp
 8023376:	f001 fc4f 	bl	8024c18 <matherr>
 802337a:	b1a8      	cbz	r0, 80233a8 <exp+0x98>
 802337c:	9b08      	ldr	r3, [sp, #32]
 802337e:	b11b      	cbz	r3, 8023388 <exp+0x78>
 8023380:	f7fc ff4a 	bl	8020218 <__errno>
 8023384:	9b08      	ldr	r3, [sp, #32]
 8023386:	6003      	str	r3, [r0, #0]
 8023388:	ed9d 8b06 	vldr	d8, [sp, #24]
 802338c:	eeb0 0a48 	vmov.f32	s0, s16
 8023390:	eef0 0a68 	vmov.f32	s1, s17
 8023394:	b00b      	add	sp, #44	; 0x2c
 8023396:	ecbd 8b02 	vpop	{d8}
 802339a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802339c:	4919      	ldr	r1, [pc, #100]	; (8023404 <exp+0xf4>)
 802339e:	2000      	movs	r0, #0
 80233a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80233a4:	2b02      	cmp	r3, #2
 80233a6:	d1e5      	bne.n	8023374 <exp+0x64>
 80233a8:	f7fc ff36 	bl	8020218 <__errno>
 80233ac:	2322      	movs	r3, #34	; 0x22
 80233ae:	6003      	str	r3, [r0, #0]
 80233b0:	e7e4      	b.n	802337c <exp+0x6c>
 80233b2:	a30f      	add	r3, pc, #60	; (adr r3, 80233f0 <exp+0xe0>)
 80233b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80233b8:	4620      	mov	r0, r4
 80233ba:	4629      	mov	r1, r5
 80233bc:	f7dd fba2 	bl	8000b04 <__aeabi_dcmplt>
 80233c0:	2800      	cmp	r0, #0
 80233c2:	d0e3      	beq.n	802338c <exp+0x7c>
 80233c4:	2304      	movs	r3, #4
 80233c6:	9300      	str	r3, [sp, #0]
 80233c8:	4b0c      	ldr	r3, [pc, #48]	; (80233fc <exp+0xec>)
 80233ca:	9301      	str	r3, [sp, #4]
 80233cc:	2200      	movs	r2, #0
 80233ce:	2300      	movs	r3, #0
 80233d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80233d4:	9708      	str	r7, [sp, #32]
 80233d6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80233da:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80233de:	f996 3000 	ldrsb.w	r3, [r6]
 80233e2:	e7df      	b.n	80233a4 <exp+0x94>
 80233e4:	f3af 8000 	nop.w
 80233e8:	fefa39ef 	.word	0xfefa39ef
 80233ec:	40862e42 	.word	0x40862e42
 80233f0:	d52d3051 	.word	0xd52d3051
 80233f4:	c0874910 	.word	0xc0874910
 80233f8:	200015c0 	.word	0x200015c0
 80233fc:	08032115 	.word	0x08032115
 8023400:	47efffff 	.word	0x47efffff
 8023404:	7ff00000 	.word	0x7ff00000

08023408 <log>:
 8023408:	b570      	push	{r4, r5, r6, lr}
 802340a:	ed2d 8b02 	vpush	{d8}
 802340e:	b08a      	sub	sp, #40	; 0x28
 8023410:	ec55 4b10 	vmov	r4, r5, d0
 8023414:	f000 fc10 	bl	8023c38 <__ieee754_log>
 8023418:	4b36      	ldr	r3, [pc, #216]	; (80234f4 <log+0xec>)
 802341a:	eeb0 8a40 	vmov.f32	s16, s0
 802341e:	eef0 8a60 	vmov.f32	s17, s1
 8023422:	f993 6000 	ldrsb.w	r6, [r3]
 8023426:	1c73      	adds	r3, r6, #1
 8023428:	d05b      	beq.n	80234e2 <log+0xda>
 802342a:	4622      	mov	r2, r4
 802342c:	462b      	mov	r3, r5
 802342e:	4620      	mov	r0, r4
 8023430:	4629      	mov	r1, r5
 8023432:	f7dd fb8f 	bl	8000b54 <__aeabi_dcmpun>
 8023436:	2800      	cmp	r0, #0
 8023438:	d153      	bne.n	80234e2 <log+0xda>
 802343a:	2200      	movs	r2, #0
 802343c:	2300      	movs	r3, #0
 802343e:	4620      	mov	r0, r4
 8023440:	4629      	mov	r1, r5
 8023442:	f7dd fb7d 	bl	8000b40 <__aeabi_dcmpgt>
 8023446:	2800      	cmp	r0, #0
 8023448:	d14b      	bne.n	80234e2 <log+0xda>
 802344a:	4b2b      	ldr	r3, [pc, #172]	; (80234f8 <log+0xf0>)
 802344c:	9301      	str	r3, [sp, #4]
 802344e:	9008      	str	r0, [sp, #32]
 8023450:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8023454:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8023458:	b9a6      	cbnz	r6, 8023484 <log+0x7c>
 802345a:	4b28      	ldr	r3, [pc, #160]	; (80234fc <log+0xf4>)
 802345c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8023460:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023464:	4620      	mov	r0, r4
 8023466:	2200      	movs	r2, #0
 8023468:	2300      	movs	r3, #0
 802346a:	4629      	mov	r1, r5
 802346c:	f7dd fb40 	bl	8000af0 <__aeabi_dcmpeq>
 8023470:	bb40      	cbnz	r0, 80234c4 <log+0xbc>
 8023472:	2301      	movs	r3, #1
 8023474:	2e02      	cmp	r6, #2
 8023476:	9300      	str	r3, [sp, #0]
 8023478:	d119      	bne.n	80234ae <log+0xa6>
 802347a:	f7fc fecd 	bl	8020218 <__errno>
 802347e:	2321      	movs	r3, #33	; 0x21
 8023480:	6003      	str	r3, [r0, #0]
 8023482:	e019      	b.n	80234b8 <log+0xb0>
 8023484:	4b1e      	ldr	r3, [pc, #120]	; (8023500 <log+0xf8>)
 8023486:	2200      	movs	r2, #0
 8023488:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802348c:	4620      	mov	r0, r4
 802348e:	2200      	movs	r2, #0
 8023490:	2300      	movs	r3, #0
 8023492:	4629      	mov	r1, r5
 8023494:	f7dd fb2c 	bl	8000af0 <__aeabi_dcmpeq>
 8023498:	2800      	cmp	r0, #0
 802349a:	d0ea      	beq.n	8023472 <log+0x6a>
 802349c:	2302      	movs	r3, #2
 802349e:	429e      	cmp	r6, r3
 80234a0:	9300      	str	r3, [sp, #0]
 80234a2:	d111      	bne.n	80234c8 <log+0xc0>
 80234a4:	f7fc feb8 	bl	8020218 <__errno>
 80234a8:	2322      	movs	r3, #34	; 0x22
 80234aa:	6003      	str	r3, [r0, #0]
 80234ac:	e011      	b.n	80234d2 <log+0xca>
 80234ae:	4668      	mov	r0, sp
 80234b0:	f001 fbb2 	bl	8024c18 <matherr>
 80234b4:	2800      	cmp	r0, #0
 80234b6:	d0e0      	beq.n	802347a <log+0x72>
 80234b8:	4812      	ldr	r0, [pc, #72]	; (8023504 <log+0xfc>)
 80234ba:	f001 fbb1 	bl	8024c20 <nan>
 80234be:	ed8d 0b06 	vstr	d0, [sp, #24]
 80234c2:	e006      	b.n	80234d2 <log+0xca>
 80234c4:	2302      	movs	r3, #2
 80234c6:	9300      	str	r3, [sp, #0]
 80234c8:	4668      	mov	r0, sp
 80234ca:	f001 fba5 	bl	8024c18 <matherr>
 80234ce:	2800      	cmp	r0, #0
 80234d0:	d0e8      	beq.n	80234a4 <log+0x9c>
 80234d2:	9b08      	ldr	r3, [sp, #32]
 80234d4:	b11b      	cbz	r3, 80234de <log+0xd6>
 80234d6:	f7fc fe9f 	bl	8020218 <__errno>
 80234da:	9b08      	ldr	r3, [sp, #32]
 80234dc:	6003      	str	r3, [r0, #0]
 80234de:	ed9d 8b06 	vldr	d8, [sp, #24]
 80234e2:	eeb0 0a48 	vmov.f32	s0, s16
 80234e6:	eef0 0a68 	vmov.f32	s1, s17
 80234ea:	b00a      	add	sp, #40	; 0x28
 80234ec:	ecbd 8b02 	vpop	{d8}
 80234f0:	bd70      	pop	{r4, r5, r6, pc}
 80234f2:	bf00      	nop
 80234f4:	200015c0 	.word	0x200015c0
 80234f8:	08032119 	.word	0x08032119
 80234fc:	c7efffff 	.word	0xc7efffff
 8023500:	fff00000 	.word	0xfff00000
 8023504:	08031dc9 	.word	0x08031dc9

08023508 <pow>:
 8023508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802350c:	ed2d 8b04 	vpush	{d8-d9}
 8023510:	b08d      	sub	sp, #52	; 0x34
 8023512:	ec57 6b10 	vmov	r6, r7, d0
 8023516:	ec55 4b11 	vmov	r4, r5, d1
 802351a:	f000 fd65 	bl	8023fe8 <__ieee754_pow>
 802351e:	4bae      	ldr	r3, [pc, #696]	; (80237d8 <pow+0x2d0>)
 8023520:	eeb0 8a40 	vmov.f32	s16, s0
 8023524:	eef0 8a60 	vmov.f32	s17, s1
 8023528:	f993 9000 	ldrsb.w	r9, [r3]
 802352c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8023530:	4698      	mov	r8, r3
 8023532:	d05f      	beq.n	80235f4 <pow+0xec>
 8023534:	4622      	mov	r2, r4
 8023536:	462b      	mov	r3, r5
 8023538:	4620      	mov	r0, r4
 802353a:	4629      	mov	r1, r5
 802353c:	f7dd fb0a 	bl	8000b54 <__aeabi_dcmpun>
 8023540:	4683      	mov	fp, r0
 8023542:	2800      	cmp	r0, #0
 8023544:	d156      	bne.n	80235f4 <pow+0xec>
 8023546:	4632      	mov	r2, r6
 8023548:	463b      	mov	r3, r7
 802354a:	4630      	mov	r0, r6
 802354c:	4639      	mov	r1, r7
 802354e:	f7dd fb01 	bl	8000b54 <__aeabi_dcmpun>
 8023552:	9001      	str	r0, [sp, #4]
 8023554:	b1e8      	cbz	r0, 8023592 <pow+0x8a>
 8023556:	2200      	movs	r2, #0
 8023558:	2300      	movs	r3, #0
 802355a:	4620      	mov	r0, r4
 802355c:	4629      	mov	r1, r5
 802355e:	f7dd fac7 	bl	8000af0 <__aeabi_dcmpeq>
 8023562:	2800      	cmp	r0, #0
 8023564:	d046      	beq.n	80235f4 <pow+0xec>
 8023566:	2301      	movs	r3, #1
 8023568:	9302      	str	r3, [sp, #8]
 802356a:	4b9c      	ldr	r3, [pc, #624]	; (80237dc <pow+0x2d4>)
 802356c:	9303      	str	r3, [sp, #12]
 802356e:	4b9c      	ldr	r3, [pc, #624]	; (80237e0 <pow+0x2d8>)
 8023570:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8023574:	2200      	movs	r2, #0
 8023576:	f1b9 0f02 	cmp.w	r9, #2
 802357a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 802357e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8023582:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023586:	d033      	beq.n	80235f0 <pow+0xe8>
 8023588:	a802      	add	r0, sp, #8
 802358a:	f001 fb45 	bl	8024c18 <matherr>
 802358e:	bb48      	cbnz	r0, 80235e4 <pow+0xdc>
 8023590:	e05e      	b.n	8023650 <pow+0x148>
 8023592:	f04f 0a00 	mov.w	sl, #0
 8023596:	f04f 0b00 	mov.w	fp, #0
 802359a:	4652      	mov	r2, sl
 802359c:	465b      	mov	r3, fp
 802359e:	4630      	mov	r0, r6
 80235a0:	4639      	mov	r1, r7
 80235a2:	f7dd faa5 	bl	8000af0 <__aeabi_dcmpeq>
 80235a6:	ec4b ab19 	vmov	d9, sl, fp
 80235aa:	2800      	cmp	r0, #0
 80235ac:	d055      	beq.n	802365a <pow+0x152>
 80235ae:	4652      	mov	r2, sl
 80235b0:	465b      	mov	r3, fp
 80235b2:	4620      	mov	r0, r4
 80235b4:	4629      	mov	r1, r5
 80235b6:	f7dd fa9b 	bl	8000af0 <__aeabi_dcmpeq>
 80235ba:	4680      	mov	r8, r0
 80235bc:	b318      	cbz	r0, 8023606 <pow+0xfe>
 80235be:	2301      	movs	r3, #1
 80235c0:	9302      	str	r3, [sp, #8]
 80235c2:	4b86      	ldr	r3, [pc, #536]	; (80237dc <pow+0x2d4>)
 80235c4:	9303      	str	r3, [sp, #12]
 80235c6:	9b01      	ldr	r3, [sp, #4]
 80235c8:	930a      	str	r3, [sp, #40]	; 0x28
 80235ca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80235ce:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80235d2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80235d6:	f1b9 0f00 	cmp.w	r9, #0
 80235da:	d0d5      	beq.n	8023588 <pow+0x80>
 80235dc:	4b80      	ldr	r3, [pc, #512]	; (80237e0 <pow+0x2d8>)
 80235de:	2200      	movs	r2, #0
 80235e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80235e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80235e6:	b11b      	cbz	r3, 80235f0 <pow+0xe8>
 80235e8:	f7fc fe16 	bl	8020218 <__errno>
 80235ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80235ee:	6003      	str	r3, [r0, #0]
 80235f0:	ed9d 8b08 	vldr	d8, [sp, #32]
 80235f4:	eeb0 0a48 	vmov.f32	s0, s16
 80235f8:	eef0 0a68 	vmov.f32	s1, s17
 80235fc:	b00d      	add	sp, #52	; 0x34
 80235fe:	ecbd 8b04 	vpop	{d8-d9}
 8023602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023606:	ec45 4b10 	vmov	d0, r4, r5
 802360a:	f001 fafd 	bl	8024c08 <finite>
 802360e:	2800      	cmp	r0, #0
 8023610:	d0f0      	beq.n	80235f4 <pow+0xec>
 8023612:	4652      	mov	r2, sl
 8023614:	465b      	mov	r3, fp
 8023616:	4620      	mov	r0, r4
 8023618:	4629      	mov	r1, r5
 802361a:	f7dd fa73 	bl	8000b04 <__aeabi_dcmplt>
 802361e:	2800      	cmp	r0, #0
 8023620:	d0e8      	beq.n	80235f4 <pow+0xec>
 8023622:	2301      	movs	r3, #1
 8023624:	9302      	str	r3, [sp, #8]
 8023626:	4b6d      	ldr	r3, [pc, #436]	; (80237dc <pow+0x2d4>)
 8023628:	9303      	str	r3, [sp, #12]
 802362a:	4b6b      	ldr	r3, [pc, #428]	; (80237d8 <pow+0x2d0>)
 802362c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8023630:	f993 3000 	ldrsb.w	r3, [r3]
 8023634:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8023638:	e9cd 4506 	strd	r4, r5, [sp, #24]
 802363c:	b913      	cbnz	r3, 8023644 <pow+0x13c>
 802363e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8023642:	e7a1      	b.n	8023588 <pow+0x80>
 8023644:	4967      	ldr	r1, [pc, #412]	; (80237e4 <pow+0x2dc>)
 8023646:	2000      	movs	r0, #0
 8023648:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802364c:	2b02      	cmp	r3, #2
 802364e:	d19b      	bne.n	8023588 <pow+0x80>
 8023650:	f7fc fde2 	bl	8020218 <__errno>
 8023654:	2321      	movs	r3, #33	; 0x21
 8023656:	6003      	str	r3, [r0, #0]
 8023658:	e7c4      	b.n	80235e4 <pow+0xdc>
 802365a:	eeb0 0a48 	vmov.f32	s0, s16
 802365e:	eef0 0a68 	vmov.f32	s1, s17
 8023662:	f001 fad1 	bl	8024c08 <finite>
 8023666:	9001      	str	r0, [sp, #4]
 8023668:	2800      	cmp	r0, #0
 802366a:	f040 808a 	bne.w	8023782 <pow+0x27a>
 802366e:	ec47 6b10 	vmov	d0, r6, r7
 8023672:	f001 fac9 	bl	8024c08 <finite>
 8023676:	2800      	cmp	r0, #0
 8023678:	f000 8083 	beq.w	8023782 <pow+0x27a>
 802367c:	ec45 4b10 	vmov	d0, r4, r5
 8023680:	f001 fac2 	bl	8024c08 <finite>
 8023684:	2800      	cmp	r0, #0
 8023686:	d07c      	beq.n	8023782 <pow+0x27a>
 8023688:	ec53 2b18 	vmov	r2, r3, d8
 802368c:	ee18 0a10 	vmov	r0, s16
 8023690:	4619      	mov	r1, r3
 8023692:	f7dd fa5f 	bl	8000b54 <__aeabi_dcmpun>
 8023696:	f998 9000 	ldrsb.w	r9, [r8]
 802369a:	4b50      	ldr	r3, [pc, #320]	; (80237dc <pow+0x2d4>)
 802369c:	b1b0      	cbz	r0, 80236cc <pow+0x1c4>
 802369e:	2201      	movs	r2, #1
 80236a0:	9303      	str	r3, [sp, #12]
 80236a2:	9b01      	ldr	r3, [sp, #4]
 80236a4:	9202      	str	r2, [sp, #8]
 80236a6:	930a      	str	r3, [sp, #40]	; 0x28
 80236a8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80236ac:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80236b0:	f1b9 0f00 	cmp.w	r9, #0
 80236b4:	d0c3      	beq.n	802363e <pow+0x136>
 80236b6:	4652      	mov	r2, sl
 80236b8:	465b      	mov	r3, fp
 80236ba:	4650      	mov	r0, sl
 80236bc:	4659      	mov	r1, fp
 80236be:	f7dd f8d9 	bl	8000874 <__aeabi_ddiv>
 80236c2:	f1b9 0f02 	cmp.w	r9, #2
 80236c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80236ca:	e7c0      	b.n	802364e <pow+0x146>
 80236cc:	2203      	movs	r2, #3
 80236ce:	9202      	str	r2, [sp, #8]
 80236d0:	9303      	str	r3, [sp, #12]
 80236d2:	900a      	str	r0, [sp, #40]	; 0x28
 80236d4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80236d8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80236dc:	f1b9 0f00 	cmp.w	r9, #0
 80236e0:	d12c      	bne.n	802373c <pow+0x234>
 80236e2:	4b41      	ldr	r3, [pc, #260]	; (80237e8 <pow+0x2e0>)
 80236e4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80236e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80236ec:	4630      	mov	r0, r6
 80236ee:	4652      	mov	r2, sl
 80236f0:	465b      	mov	r3, fp
 80236f2:	4639      	mov	r1, r7
 80236f4:	f7dd fa06 	bl	8000b04 <__aeabi_dcmplt>
 80236f8:	2800      	cmp	r0, #0
 80236fa:	d066      	beq.n	80237ca <pow+0x2c2>
 80236fc:	2200      	movs	r2, #0
 80236fe:	4b3b      	ldr	r3, [pc, #236]	; (80237ec <pow+0x2e4>)
 8023700:	4620      	mov	r0, r4
 8023702:	4629      	mov	r1, r5
 8023704:	f7dc ff8c 	bl	8000620 <__aeabi_dmul>
 8023708:	4604      	mov	r4, r0
 802370a:	460d      	mov	r5, r1
 802370c:	ec45 4b10 	vmov	d0, r4, r5
 8023710:	f001 fa8e 	bl	8024c30 <rint>
 8023714:	4620      	mov	r0, r4
 8023716:	ec53 2b10 	vmov	r2, r3, d0
 802371a:	4629      	mov	r1, r5
 802371c:	f7dd f9e8 	bl	8000af0 <__aeabi_dcmpeq>
 8023720:	b920      	cbnz	r0, 802372c <pow+0x224>
 8023722:	4b33      	ldr	r3, [pc, #204]	; (80237f0 <pow+0x2e8>)
 8023724:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8023728:	e9cd 2308 	strd	r2, r3, [sp, #32]
 802372c:	f998 3000 	ldrsb.w	r3, [r8]
 8023730:	2b02      	cmp	r3, #2
 8023732:	d14a      	bne.n	80237ca <pow+0x2c2>
 8023734:	f7fc fd70 	bl	8020218 <__errno>
 8023738:	2322      	movs	r3, #34	; 0x22
 802373a:	e78c      	b.n	8023656 <pow+0x14e>
 802373c:	4b2d      	ldr	r3, [pc, #180]	; (80237f4 <pow+0x2ec>)
 802373e:	2200      	movs	r2, #0
 8023740:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8023744:	4630      	mov	r0, r6
 8023746:	4652      	mov	r2, sl
 8023748:	465b      	mov	r3, fp
 802374a:	4639      	mov	r1, r7
 802374c:	f7dd f9da 	bl	8000b04 <__aeabi_dcmplt>
 8023750:	2800      	cmp	r0, #0
 8023752:	d0eb      	beq.n	802372c <pow+0x224>
 8023754:	2200      	movs	r2, #0
 8023756:	4b25      	ldr	r3, [pc, #148]	; (80237ec <pow+0x2e4>)
 8023758:	4620      	mov	r0, r4
 802375a:	4629      	mov	r1, r5
 802375c:	f7dc ff60 	bl	8000620 <__aeabi_dmul>
 8023760:	4604      	mov	r4, r0
 8023762:	460d      	mov	r5, r1
 8023764:	ec45 4b10 	vmov	d0, r4, r5
 8023768:	f001 fa62 	bl	8024c30 <rint>
 802376c:	4620      	mov	r0, r4
 802376e:	ec53 2b10 	vmov	r2, r3, d0
 8023772:	4629      	mov	r1, r5
 8023774:	f7dd f9bc 	bl	8000af0 <__aeabi_dcmpeq>
 8023778:	2800      	cmp	r0, #0
 802377a:	d1d7      	bne.n	802372c <pow+0x224>
 802377c:	2200      	movs	r2, #0
 802377e:	4b19      	ldr	r3, [pc, #100]	; (80237e4 <pow+0x2dc>)
 8023780:	e7d2      	b.n	8023728 <pow+0x220>
 8023782:	2200      	movs	r2, #0
 8023784:	2300      	movs	r3, #0
 8023786:	ec51 0b18 	vmov	r0, r1, d8
 802378a:	f7dd f9b1 	bl	8000af0 <__aeabi_dcmpeq>
 802378e:	2800      	cmp	r0, #0
 8023790:	f43f af30 	beq.w	80235f4 <pow+0xec>
 8023794:	ec47 6b10 	vmov	d0, r6, r7
 8023798:	f001 fa36 	bl	8024c08 <finite>
 802379c:	2800      	cmp	r0, #0
 802379e:	f43f af29 	beq.w	80235f4 <pow+0xec>
 80237a2:	ec45 4b10 	vmov	d0, r4, r5
 80237a6:	f001 fa2f 	bl	8024c08 <finite>
 80237aa:	2800      	cmp	r0, #0
 80237ac:	f43f af22 	beq.w	80235f4 <pow+0xec>
 80237b0:	2304      	movs	r3, #4
 80237b2:	9302      	str	r3, [sp, #8]
 80237b4:	4b09      	ldr	r3, [pc, #36]	; (80237dc <pow+0x2d4>)
 80237b6:	9303      	str	r3, [sp, #12]
 80237b8:	2300      	movs	r3, #0
 80237ba:	930a      	str	r3, [sp, #40]	; 0x28
 80237bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80237c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80237c4:	ed8d 9b08 	vstr	d9, [sp, #32]
 80237c8:	e7b0      	b.n	802372c <pow+0x224>
 80237ca:	a802      	add	r0, sp, #8
 80237cc:	f001 fa24 	bl	8024c18 <matherr>
 80237d0:	2800      	cmp	r0, #0
 80237d2:	f47f af07 	bne.w	80235e4 <pow+0xdc>
 80237d6:	e7ad      	b.n	8023734 <pow+0x22c>
 80237d8:	200015c0 	.word	0x200015c0
 80237dc:	0803211d 	.word	0x0803211d
 80237e0:	3ff00000 	.word	0x3ff00000
 80237e4:	fff00000 	.word	0xfff00000
 80237e8:	47efffff 	.word	0x47efffff
 80237ec:	3fe00000 	.word	0x3fe00000
 80237f0:	c7efffff 	.word	0xc7efffff
 80237f4:	7ff00000 	.word	0x7ff00000

080237f8 <sqrt>:
 80237f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80237fc:	ed2d 8b02 	vpush	{d8}
 8023800:	b08b      	sub	sp, #44	; 0x2c
 8023802:	ec55 4b10 	vmov	r4, r5, d0
 8023806:	f001 f901 	bl	8024a0c <__ieee754_sqrt>
 802380a:	4b26      	ldr	r3, [pc, #152]	; (80238a4 <sqrt+0xac>)
 802380c:	eeb0 8a40 	vmov.f32	s16, s0
 8023810:	eef0 8a60 	vmov.f32	s17, s1
 8023814:	f993 6000 	ldrsb.w	r6, [r3]
 8023818:	1c73      	adds	r3, r6, #1
 802381a:	d02a      	beq.n	8023872 <sqrt+0x7a>
 802381c:	4622      	mov	r2, r4
 802381e:	462b      	mov	r3, r5
 8023820:	4620      	mov	r0, r4
 8023822:	4629      	mov	r1, r5
 8023824:	f7dd f996 	bl	8000b54 <__aeabi_dcmpun>
 8023828:	4607      	mov	r7, r0
 802382a:	bb10      	cbnz	r0, 8023872 <sqrt+0x7a>
 802382c:	f04f 0800 	mov.w	r8, #0
 8023830:	f04f 0900 	mov.w	r9, #0
 8023834:	4642      	mov	r2, r8
 8023836:	464b      	mov	r3, r9
 8023838:	4620      	mov	r0, r4
 802383a:	4629      	mov	r1, r5
 802383c:	f7dd f962 	bl	8000b04 <__aeabi_dcmplt>
 8023840:	b1b8      	cbz	r0, 8023872 <sqrt+0x7a>
 8023842:	2301      	movs	r3, #1
 8023844:	9300      	str	r3, [sp, #0]
 8023846:	4b18      	ldr	r3, [pc, #96]	; (80238a8 <sqrt+0xb0>)
 8023848:	9301      	str	r3, [sp, #4]
 802384a:	9708      	str	r7, [sp, #32]
 802384c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8023850:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8023854:	b9b6      	cbnz	r6, 8023884 <sqrt+0x8c>
 8023856:	e9cd 8906 	strd	r8, r9, [sp, #24]
 802385a:	4668      	mov	r0, sp
 802385c:	f001 f9dc 	bl	8024c18 <matherr>
 8023860:	b1d0      	cbz	r0, 8023898 <sqrt+0xa0>
 8023862:	9b08      	ldr	r3, [sp, #32]
 8023864:	b11b      	cbz	r3, 802386e <sqrt+0x76>
 8023866:	f7fc fcd7 	bl	8020218 <__errno>
 802386a:	9b08      	ldr	r3, [sp, #32]
 802386c:	6003      	str	r3, [r0, #0]
 802386e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8023872:	eeb0 0a48 	vmov.f32	s0, s16
 8023876:	eef0 0a68 	vmov.f32	s1, s17
 802387a:	b00b      	add	sp, #44	; 0x2c
 802387c:	ecbd 8b02 	vpop	{d8}
 8023880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023884:	4642      	mov	r2, r8
 8023886:	464b      	mov	r3, r9
 8023888:	4640      	mov	r0, r8
 802388a:	4649      	mov	r1, r9
 802388c:	f7dc fff2 	bl	8000874 <__aeabi_ddiv>
 8023890:	2e02      	cmp	r6, #2
 8023892:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023896:	d1e0      	bne.n	802385a <sqrt+0x62>
 8023898:	f7fc fcbe 	bl	8020218 <__errno>
 802389c:	2321      	movs	r3, #33	; 0x21
 802389e:	6003      	str	r3, [r0, #0]
 80238a0:	e7df      	b.n	8023862 <sqrt+0x6a>
 80238a2:	bf00      	nop
 80238a4:	200015c0 	.word	0x200015c0
 80238a8:	08032121 	.word	0x08032121

080238ac <sqrtf>:
 80238ac:	b510      	push	{r4, lr}
 80238ae:	ed2d 8b02 	vpush	{d8}
 80238b2:	b08a      	sub	sp, #40	; 0x28
 80238b4:	eeb0 8a40 	vmov.f32	s16, s0
 80238b8:	f001 f958 	bl	8024b6c <__ieee754_sqrtf>
 80238bc:	4b21      	ldr	r3, [pc, #132]	; (8023944 <sqrtf+0x98>)
 80238be:	f993 4000 	ldrsb.w	r4, [r3]
 80238c2:	1c63      	adds	r3, r4, #1
 80238c4:	d02c      	beq.n	8023920 <sqrtf+0x74>
 80238c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80238ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238ce:	d627      	bvs.n	8023920 <sqrtf+0x74>
 80238d0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80238d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80238d8:	d522      	bpl.n	8023920 <sqrtf+0x74>
 80238da:	2301      	movs	r3, #1
 80238dc:	9300      	str	r3, [sp, #0]
 80238de:	4b1a      	ldr	r3, [pc, #104]	; (8023948 <sqrtf+0x9c>)
 80238e0:	9301      	str	r3, [sp, #4]
 80238e2:	ee18 0a10 	vmov	r0, s16
 80238e6:	2300      	movs	r3, #0
 80238e8:	9308      	str	r3, [sp, #32]
 80238ea:	f7dc fe45 	bl	8000578 <__aeabi_f2d>
 80238ee:	2200      	movs	r2, #0
 80238f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80238f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80238f8:	2300      	movs	r3, #0
 80238fa:	b9ac      	cbnz	r4, 8023928 <sqrtf+0x7c>
 80238fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8023900:	4668      	mov	r0, sp
 8023902:	f001 f989 	bl	8024c18 <matherr>
 8023906:	b1b8      	cbz	r0, 8023938 <sqrtf+0x8c>
 8023908:	9b08      	ldr	r3, [sp, #32]
 802390a:	b11b      	cbz	r3, 8023914 <sqrtf+0x68>
 802390c:	f7fc fc84 	bl	8020218 <__errno>
 8023910:	9b08      	ldr	r3, [sp, #32]
 8023912:	6003      	str	r3, [r0, #0]
 8023914:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8023918:	f7dd f97a 	bl	8000c10 <__aeabi_d2f>
 802391c:	ee00 0a10 	vmov	s0, r0
 8023920:	b00a      	add	sp, #40	; 0x28
 8023922:	ecbd 8b02 	vpop	{d8}
 8023926:	bd10      	pop	{r4, pc}
 8023928:	4610      	mov	r0, r2
 802392a:	4619      	mov	r1, r3
 802392c:	f7dc ffa2 	bl	8000874 <__aeabi_ddiv>
 8023930:	2c02      	cmp	r4, #2
 8023932:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8023936:	d1e3      	bne.n	8023900 <sqrtf+0x54>
 8023938:	f7fc fc6e 	bl	8020218 <__errno>
 802393c:	2321      	movs	r3, #33	; 0x21
 802393e:	6003      	str	r3, [r0, #0]
 8023940:	e7e2      	b.n	8023908 <sqrtf+0x5c>
 8023942:	bf00      	nop
 8023944:	200015c0 	.word	0x200015c0
 8023948:	08032126 	.word	0x08032126
 802394c:	00000000 	.word	0x00000000

08023950 <__ieee754_exp>:
 8023950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023954:	ec55 4b10 	vmov	r4, r5, d0
 8023958:	4aad      	ldr	r2, [pc, #692]	; (8023c10 <__ieee754_exp+0x2c0>)
 802395a:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 802395e:	4297      	cmp	r7, r2
 8023960:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8023964:	f240 80af 	bls.w	8023ac6 <__ieee754_exp+0x176>
 8023968:	4aaa      	ldr	r2, [pc, #680]	; (8023c14 <__ieee754_exp+0x2c4>)
 802396a:	4297      	cmp	r7, r2
 802396c:	d915      	bls.n	802399a <__ieee754_exp+0x4a>
 802396e:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8023972:	4323      	orrs	r3, r4
 8023974:	d009      	beq.n	802398a <__ieee754_exp+0x3a>
 8023976:	ee10 2a10 	vmov	r2, s0
 802397a:	462b      	mov	r3, r5
 802397c:	4620      	mov	r0, r4
 802397e:	4629      	mov	r1, r5
 8023980:	f7dc fc9c 	bl	80002bc <__adddf3>
 8023984:	4604      	mov	r4, r0
 8023986:	460d      	mov	r5, r1
 8023988:	e002      	b.n	8023990 <__ieee754_exp+0x40>
 802398a:	b10e      	cbz	r6, 8023990 <__ieee754_exp+0x40>
 802398c:	2400      	movs	r4, #0
 802398e:	2500      	movs	r5, #0
 8023990:	ec45 4b10 	vmov	d0, r4, r5
 8023994:	b003      	add	sp, #12
 8023996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802399a:	a387      	add	r3, pc, #540	; (adr r3, 8023bb8 <__ieee754_exp+0x268>)
 802399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239a0:	ee10 0a10 	vmov	r0, s0
 80239a4:	4629      	mov	r1, r5
 80239a6:	f7dd f8cb 	bl	8000b40 <__aeabi_dcmpgt>
 80239aa:	b138      	cbz	r0, 80239bc <__ieee754_exp+0x6c>
 80239ac:	a384      	add	r3, pc, #528	; (adr r3, 8023bc0 <__ieee754_exp+0x270>)
 80239ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239b2:	4610      	mov	r0, r2
 80239b4:	4619      	mov	r1, r3
 80239b6:	f7dc fe33 	bl	8000620 <__aeabi_dmul>
 80239ba:	e7e3      	b.n	8023984 <__ieee754_exp+0x34>
 80239bc:	a382      	add	r3, pc, #520	; (adr r3, 8023bc8 <__ieee754_exp+0x278>)
 80239be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239c2:	4620      	mov	r0, r4
 80239c4:	4629      	mov	r1, r5
 80239c6:	f7dd f89d 	bl	8000b04 <__aeabi_dcmplt>
 80239ca:	2800      	cmp	r0, #0
 80239cc:	d1de      	bne.n	802398c <__ieee754_exp+0x3c>
 80239ce:	4b92      	ldr	r3, [pc, #584]	; (8023c18 <__ieee754_exp+0x2c8>)
 80239d0:	429f      	cmp	r7, r3
 80239d2:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 80239d6:	f200 808e 	bhi.w	8023af6 <__ieee754_exp+0x1a6>
 80239da:	4b90      	ldr	r3, [pc, #576]	; (8023c1c <__ieee754_exp+0x2cc>)
 80239dc:	443b      	add	r3, r7
 80239de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80239e2:	4620      	mov	r0, r4
 80239e4:	4629      	mov	r1, r5
 80239e6:	f7dc fc67 	bl	80002b8 <__aeabi_dsub>
 80239ea:	4b8d      	ldr	r3, [pc, #564]	; (8023c20 <__ieee754_exp+0x2d0>)
 80239ec:	441f      	add	r7, r3
 80239ee:	ed97 7b00 	vldr	d7, [r7]
 80239f2:	ed8d 7b00 	vstr	d7, [sp]
 80239f6:	4682      	mov	sl, r0
 80239f8:	f1c6 0001 	rsb	r0, r6, #1
 80239fc:	468b      	mov	fp, r1
 80239fe:	1b86      	subs	r6, r0, r6
 8023a00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023a04:	4650      	mov	r0, sl
 8023a06:	4659      	mov	r1, fp
 8023a08:	f7dc fc56 	bl	80002b8 <__aeabi_dsub>
 8023a0c:	4604      	mov	r4, r0
 8023a0e:	460d      	mov	r5, r1
 8023a10:	4622      	mov	r2, r4
 8023a12:	462b      	mov	r3, r5
 8023a14:	4620      	mov	r0, r4
 8023a16:	4629      	mov	r1, r5
 8023a18:	f7dc fe02 	bl	8000620 <__aeabi_dmul>
 8023a1c:	a36c      	add	r3, pc, #432	; (adr r3, 8023bd0 <__ieee754_exp+0x280>)
 8023a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a22:	4680      	mov	r8, r0
 8023a24:	4689      	mov	r9, r1
 8023a26:	f7dc fdfb 	bl	8000620 <__aeabi_dmul>
 8023a2a:	a36b      	add	r3, pc, #428	; (adr r3, 8023bd8 <__ieee754_exp+0x288>)
 8023a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a30:	f7dc fc42 	bl	80002b8 <__aeabi_dsub>
 8023a34:	4642      	mov	r2, r8
 8023a36:	464b      	mov	r3, r9
 8023a38:	f7dc fdf2 	bl	8000620 <__aeabi_dmul>
 8023a3c:	a368      	add	r3, pc, #416	; (adr r3, 8023be0 <__ieee754_exp+0x290>)
 8023a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a42:	f7dc fc3b 	bl	80002bc <__adddf3>
 8023a46:	4642      	mov	r2, r8
 8023a48:	464b      	mov	r3, r9
 8023a4a:	f7dc fde9 	bl	8000620 <__aeabi_dmul>
 8023a4e:	a366      	add	r3, pc, #408	; (adr r3, 8023be8 <__ieee754_exp+0x298>)
 8023a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a54:	f7dc fc30 	bl	80002b8 <__aeabi_dsub>
 8023a58:	4642      	mov	r2, r8
 8023a5a:	464b      	mov	r3, r9
 8023a5c:	f7dc fde0 	bl	8000620 <__aeabi_dmul>
 8023a60:	a363      	add	r3, pc, #396	; (adr r3, 8023bf0 <__ieee754_exp+0x2a0>)
 8023a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a66:	f7dc fc29 	bl	80002bc <__adddf3>
 8023a6a:	4642      	mov	r2, r8
 8023a6c:	464b      	mov	r3, r9
 8023a6e:	f7dc fdd7 	bl	8000620 <__aeabi_dmul>
 8023a72:	4602      	mov	r2, r0
 8023a74:	460b      	mov	r3, r1
 8023a76:	4620      	mov	r0, r4
 8023a78:	4629      	mov	r1, r5
 8023a7a:	f7dc fc1d 	bl	80002b8 <__aeabi_dsub>
 8023a7e:	4680      	mov	r8, r0
 8023a80:	4689      	mov	r9, r1
 8023a82:	4602      	mov	r2, r0
 8023a84:	460b      	mov	r3, r1
 8023a86:	4620      	mov	r0, r4
 8023a88:	4629      	mov	r1, r5
 8023a8a:	2e00      	cmp	r6, #0
 8023a8c:	d162      	bne.n	8023b54 <__ieee754_exp+0x204>
 8023a8e:	f7dc fdc7 	bl	8000620 <__aeabi_dmul>
 8023a92:	2200      	movs	r2, #0
 8023a94:	4606      	mov	r6, r0
 8023a96:	460f      	mov	r7, r1
 8023a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023a9c:	4640      	mov	r0, r8
 8023a9e:	4649      	mov	r1, r9
 8023aa0:	f7dc fc0a 	bl	80002b8 <__aeabi_dsub>
 8023aa4:	4602      	mov	r2, r0
 8023aa6:	460b      	mov	r3, r1
 8023aa8:	4630      	mov	r0, r6
 8023aaa:	4639      	mov	r1, r7
 8023aac:	f7dc fee2 	bl	8000874 <__aeabi_ddiv>
 8023ab0:	4622      	mov	r2, r4
 8023ab2:	462b      	mov	r3, r5
 8023ab4:	f7dc fc00 	bl	80002b8 <__aeabi_dsub>
 8023ab8:	4602      	mov	r2, r0
 8023aba:	460b      	mov	r3, r1
 8023abc:	2000      	movs	r0, #0
 8023abe:	4959      	ldr	r1, [pc, #356]	; (8023c24 <__ieee754_exp+0x2d4>)
 8023ac0:	f7dc fbfa 	bl	80002b8 <__aeabi_dsub>
 8023ac4:	e75e      	b.n	8023984 <__ieee754_exp+0x34>
 8023ac6:	4b58      	ldr	r3, [pc, #352]	; (8023c28 <__ieee754_exp+0x2d8>)
 8023ac8:	429f      	cmp	r7, r3
 8023aca:	d880      	bhi.n	80239ce <__ieee754_exp+0x7e>
 8023acc:	4b57      	ldr	r3, [pc, #348]	; (8023c2c <__ieee754_exp+0x2dc>)
 8023ace:	429f      	cmp	r7, r3
 8023ad0:	d83c      	bhi.n	8023b4c <__ieee754_exp+0x1fc>
 8023ad2:	a33b      	add	r3, pc, #236	; (adr r3, 8023bc0 <__ieee754_exp+0x270>)
 8023ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ad8:	ee10 0a10 	vmov	r0, s0
 8023adc:	4629      	mov	r1, r5
 8023ade:	f7dc fbed 	bl	80002bc <__adddf3>
 8023ae2:	2200      	movs	r2, #0
 8023ae4:	4b4f      	ldr	r3, [pc, #316]	; (8023c24 <__ieee754_exp+0x2d4>)
 8023ae6:	f7dd f82b 	bl	8000b40 <__aeabi_dcmpgt>
 8023aea:	b388      	cbz	r0, 8023b50 <__ieee754_exp+0x200>
 8023aec:	2200      	movs	r2, #0
 8023aee:	4b4d      	ldr	r3, [pc, #308]	; (8023c24 <__ieee754_exp+0x2d4>)
 8023af0:	4620      	mov	r0, r4
 8023af2:	4629      	mov	r1, r5
 8023af4:	e744      	b.n	8023980 <__ieee754_exp+0x30>
 8023af6:	4e4e      	ldr	r6, [pc, #312]	; (8023c30 <__ieee754_exp+0x2e0>)
 8023af8:	a33f      	add	r3, pc, #252	; (adr r3, 8023bf8 <__ieee754_exp+0x2a8>)
 8023afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023afe:	443e      	add	r6, r7
 8023b00:	4620      	mov	r0, r4
 8023b02:	4629      	mov	r1, r5
 8023b04:	f7dc fd8c 	bl	8000620 <__aeabi_dmul>
 8023b08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023b0c:	f7dc fbd6 	bl	80002bc <__adddf3>
 8023b10:	f7dd f836 	bl	8000b80 <__aeabi_d2iz>
 8023b14:	4606      	mov	r6, r0
 8023b16:	f7dc fd1d 	bl	8000554 <__aeabi_i2d>
 8023b1a:	a339      	add	r3, pc, #228	; (adr r3, 8023c00 <__ieee754_exp+0x2b0>)
 8023b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b20:	4680      	mov	r8, r0
 8023b22:	4689      	mov	r9, r1
 8023b24:	f7dc fd7c 	bl	8000620 <__aeabi_dmul>
 8023b28:	4602      	mov	r2, r0
 8023b2a:	460b      	mov	r3, r1
 8023b2c:	4620      	mov	r0, r4
 8023b2e:	4629      	mov	r1, r5
 8023b30:	f7dc fbc2 	bl	80002b8 <__aeabi_dsub>
 8023b34:	a334      	add	r3, pc, #208	; (adr r3, 8023c08 <__ieee754_exp+0x2b8>)
 8023b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b3a:	4682      	mov	sl, r0
 8023b3c:	468b      	mov	fp, r1
 8023b3e:	4640      	mov	r0, r8
 8023b40:	4649      	mov	r1, r9
 8023b42:	f7dc fd6d 	bl	8000620 <__aeabi_dmul>
 8023b46:	e9cd 0100 	strd	r0, r1, [sp]
 8023b4a:	e759      	b.n	8023a00 <__ieee754_exp+0xb0>
 8023b4c:	2600      	movs	r6, #0
 8023b4e:	e75f      	b.n	8023a10 <__ieee754_exp+0xc0>
 8023b50:	4606      	mov	r6, r0
 8023b52:	e75d      	b.n	8023a10 <__ieee754_exp+0xc0>
 8023b54:	f7dc fd64 	bl	8000620 <__aeabi_dmul>
 8023b58:	4642      	mov	r2, r8
 8023b5a:	4604      	mov	r4, r0
 8023b5c:	460d      	mov	r5, r1
 8023b5e:	464b      	mov	r3, r9
 8023b60:	2000      	movs	r0, #0
 8023b62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8023b66:	f7dc fba7 	bl	80002b8 <__aeabi_dsub>
 8023b6a:	4602      	mov	r2, r0
 8023b6c:	460b      	mov	r3, r1
 8023b6e:	4620      	mov	r0, r4
 8023b70:	4629      	mov	r1, r5
 8023b72:	f7dc fe7f 	bl	8000874 <__aeabi_ddiv>
 8023b76:	4602      	mov	r2, r0
 8023b78:	460b      	mov	r3, r1
 8023b7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023b7e:	f7dc fb9b 	bl	80002b8 <__aeabi_dsub>
 8023b82:	4652      	mov	r2, sl
 8023b84:	465b      	mov	r3, fp
 8023b86:	f7dc fb97 	bl	80002b8 <__aeabi_dsub>
 8023b8a:	460b      	mov	r3, r1
 8023b8c:	4602      	mov	r2, r0
 8023b8e:	4925      	ldr	r1, [pc, #148]	; (8023c24 <__ieee754_exp+0x2d4>)
 8023b90:	2000      	movs	r0, #0
 8023b92:	f7dc fb91 	bl	80002b8 <__aeabi_dsub>
 8023b96:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 8023b9a:	429e      	cmp	r6, r3
 8023b9c:	db02      	blt.n	8023ba4 <__ieee754_exp+0x254>
 8023b9e:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 8023ba2:	e6ef      	b.n	8023984 <__ieee754_exp+0x34>
 8023ba4:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 8023ba8:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 8023bac:	2200      	movs	r2, #0
 8023bae:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8023bb2:	e700      	b.n	80239b6 <__ieee754_exp+0x66>
 8023bb4:	f3af 8000 	nop.w
 8023bb8:	fefa39ef 	.word	0xfefa39ef
 8023bbc:	40862e42 	.word	0x40862e42
 8023bc0:	8800759c 	.word	0x8800759c
 8023bc4:	7e37e43c 	.word	0x7e37e43c
 8023bc8:	d52d3051 	.word	0xd52d3051
 8023bcc:	c0874910 	.word	0xc0874910
 8023bd0:	72bea4d0 	.word	0x72bea4d0
 8023bd4:	3e663769 	.word	0x3e663769
 8023bd8:	c5d26bf1 	.word	0xc5d26bf1
 8023bdc:	3ebbbd41 	.word	0x3ebbbd41
 8023be0:	af25de2c 	.word	0xaf25de2c
 8023be4:	3f11566a 	.word	0x3f11566a
 8023be8:	16bebd93 	.word	0x16bebd93
 8023bec:	3f66c16c 	.word	0x3f66c16c
 8023bf0:	5555553e 	.word	0x5555553e
 8023bf4:	3fc55555 	.word	0x3fc55555
 8023bf8:	652b82fe 	.word	0x652b82fe
 8023bfc:	3ff71547 	.word	0x3ff71547
 8023c00:	fee00000 	.word	0xfee00000
 8023c04:	3fe62e42 	.word	0x3fe62e42
 8023c08:	35793c76 	.word	0x35793c76
 8023c0c:	3dea39ef 	.word	0x3dea39ef
 8023c10:	40862e41 	.word	0x40862e41
 8023c14:	7fefffff 	.word	0x7fefffff
 8023c18:	3ff0a2b1 	.word	0x3ff0a2b1
 8023c1c:	08032140 	.word	0x08032140
 8023c20:	08032150 	.word	0x08032150
 8023c24:	3ff00000 	.word	0x3ff00000
 8023c28:	3fd62e42 	.word	0x3fd62e42
 8023c2c:	3e2fffff 	.word	0x3e2fffff
 8023c30:	08032130 	.word	0x08032130
 8023c34:	00000000 	.word	0x00000000

08023c38 <__ieee754_log>:
 8023c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c3c:	ec51 0b10 	vmov	r0, r1, d0
 8023c40:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8023c44:	b087      	sub	sp, #28
 8023c46:	ee10 3a10 	vmov	r3, s0
 8023c4a:	460d      	mov	r5, r1
 8023c4c:	da27      	bge.n	8023c9e <__ieee754_log+0x66>
 8023c4e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8023c52:	4313      	orrs	r3, r2
 8023c54:	d10a      	bne.n	8023c6c <__ieee754_log+0x34>
 8023c56:	49cc      	ldr	r1, [pc, #816]	; (8023f88 <__ieee754_log+0x350>)
 8023c58:	2200      	movs	r2, #0
 8023c5a:	2300      	movs	r3, #0
 8023c5c:	2000      	movs	r0, #0
 8023c5e:	f7dc fe09 	bl	8000874 <__aeabi_ddiv>
 8023c62:	ec41 0b10 	vmov	d0, r0, r1
 8023c66:	b007      	add	sp, #28
 8023c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c6c:	2900      	cmp	r1, #0
 8023c6e:	da07      	bge.n	8023c80 <__ieee754_log+0x48>
 8023c70:	ee10 2a10 	vmov	r2, s0
 8023c74:	460b      	mov	r3, r1
 8023c76:	f7dc fb1f 	bl	80002b8 <__aeabi_dsub>
 8023c7a:	2200      	movs	r2, #0
 8023c7c:	2300      	movs	r3, #0
 8023c7e:	e7ee      	b.n	8023c5e <__ieee754_log+0x26>
 8023c80:	4bc2      	ldr	r3, [pc, #776]	; (8023f8c <__ieee754_log+0x354>)
 8023c82:	2200      	movs	r2, #0
 8023c84:	f7dc fccc 	bl	8000620 <__aeabi_dmul>
 8023c88:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8023c8c:	460d      	mov	r5, r1
 8023c8e:	4ac0      	ldr	r2, [pc, #768]	; (8023f90 <__ieee754_log+0x358>)
 8023c90:	4295      	cmp	r5, r2
 8023c92:	dd06      	ble.n	8023ca2 <__ieee754_log+0x6a>
 8023c94:	4602      	mov	r2, r0
 8023c96:	460b      	mov	r3, r1
 8023c98:	f7dc fb10 	bl	80002bc <__adddf3>
 8023c9c:	e7e1      	b.n	8023c62 <__ieee754_log+0x2a>
 8023c9e:	2300      	movs	r3, #0
 8023ca0:	e7f5      	b.n	8023c8e <__ieee754_log+0x56>
 8023ca2:	152c      	asrs	r4, r5, #20
 8023ca4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8023ca8:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8023cac:	441c      	add	r4, r3
 8023cae:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8023cb2:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8023cb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8023cba:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8023cbe:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8023cc2:	ea42 0105 	orr.w	r1, r2, r5
 8023cc6:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8023cca:	2200      	movs	r2, #0
 8023ccc:	4bb1      	ldr	r3, [pc, #708]	; (8023f94 <__ieee754_log+0x35c>)
 8023cce:	f7dc faf3 	bl	80002b8 <__aeabi_dsub>
 8023cd2:	1cab      	adds	r3, r5, #2
 8023cd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023cd8:	2b02      	cmp	r3, #2
 8023cda:	4682      	mov	sl, r0
 8023cdc:	468b      	mov	fp, r1
 8023cde:	f04f 0200 	mov.w	r2, #0
 8023ce2:	dc5b      	bgt.n	8023d9c <__ieee754_log+0x164>
 8023ce4:	2300      	movs	r3, #0
 8023ce6:	f7dc ff03 	bl	8000af0 <__aeabi_dcmpeq>
 8023cea:	b1d0      	cbz	r0, 8023d22 <__ieee754_log+0xea>
 8023cec:	2c00      	cmp	r4, #0
 8023cee:	f000 8170 	beq.w	8023fd2 <__ieee754_log+0x39a>
 8023cf2:	4620      	mov	r0, r4
 8023cf4:	f7dc fc2e 	bl	8000554 <__aeabi_i2d>
 8023cf8:	a38f      	add	r3, pc, #572	; (adr r3, 8023f38 <__ieee754_log+0x300>)
 8023cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cfe:	4606      	mov	r6, r0
 8023d00:	460f      	mov	r7, r1
 8023d02:	f7dc fc8d 	bl	8000620 <__aeabi_dmul>
 8023d06:	a38e      	add	r3, pc, #568	; (adr r3, 8023f40 <__ieee754_log+0x308>)
 8023d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d0c:	4604      	mov	r4, r0
 8023d0e:	460d      	mov	r5, r1
 8023d10:	4630      	mov	r0, r6
 8023d12:	4639      	mov	r1, r7
 8023d14:	f7dc fc84 	bl	8000620 <__aeabi_dmul>
 8023d18:	4602      	mov	r2, r0
 8023d1a:	460b      	mov	r3, r1
 8023d1c:	4620      	mov	r0, r4
 8023d1e:	4629      	mov	r1, r5
 8023d20:	e7ba      	b.n	8023c98 <__ieee754_log+0x60>
 8023d22:	a389      	add	r3, pc, #548	; (adr r3, 8023f48 <__ieee754_log+0x310>)
 8023d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d28:	4650      	mov	r0, sl
 8023d2a:	4659      	mov	r1, fp
 8023d2c:	f7dc fc78 	bl	8000620 <__aeabi_dmul>
 8023d30:	4602      	mov	r2, r0
 8023d32:	460b      	mov	r3, r1
 8023d34:	2000      	movs	r0, #0
 8023d36:	4998      	ldr	r1, [pc, #608]	; (8023f98 <__ieee754_log+0x360>)
 8023d38:	f7dc fabe 	bl	80002b8 <__aeabi_dsub>
 8023d3c:	4652      	mov	r2, sl
 8023d3e:	4606      	mov	r6, r0
 8023d40:	460f      	mov	r7, r1
 8023d42:	465b      	mov	r3, fp
 8023d44:	4650      	mov	r0, sl
 8023d46:	4659      	mov	r1, fp
 8023d48:	f7dc fc6a 	bl	8000620 <__aeabi_dmul>
 8023d4c:	4602      	mov	r2, r0
 8023d4e:	460b      	mov	r3, r1
 8023d50:	4630      	mov	r0, r6
 8023d52:	4639      	mov	r1, r7
 8023d54:	f7dc fc64 	bl	8000620 <__aeabi_dmul>
 8023d58:	4606      	mov	r6, r0
 8023d5a:	460f      	mov	r7, r1
 8023d5c:	b934      	cbnz	r4, 8023d6c <__ieee754_log+0x134>
 8023d5e:	4602      	mov	r2, r0
 8023d60:	460b      	mov	r3, r1
 8023d62:	4650      	mov	r0, sl
 8023d64:	4659      	mov	r1, fp
 8023d66:	f7dc faa7 	bl	80002b8 <__aeabi_dsub>
 8023d6a:	e77a      	b.n	8023c62 <__ieee754_log+0x2a>
 8023d6c:	4620      	mov	r0, r4
 8023d6e:	f7dc fbf1 	bl	8000554 <__aeabi_i2d>
 8023d72:	a371      	add	r3, pc, #452	; (adr r3, 8023f38 <__ieee754_log+0x300>)
 8023d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d78:	4680      	mov	r8, r0
 8023d7a:	4689      	mov	r9, r1
 8023d7c:	f7dc fc50 	bl	8000620 <__aeabi_dmul>
 8023d80:	a36f      	add	r3, pc, #444	; (adr r3, 8023f40 <__ieee754_log+0x308>)
 8023d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d86:	4604      	mov	r4, r0
 8023d88:	460d      	mov	r5, r1
 8023d8a:	4640      	mov	r0, r8
 8023d8c:	4649      	mov	r1, r9
 8023d8e:	f7dc fc47 	bl	8000620 <__aeabi_dmul>
 8023d92:	4602      	mov	r2, r0
 8023d94:	460b      	mov	r3, r1
 8023d96:	4630      	mov	r0, r6
 8023d98:	4639      	mov	r1, r7
 8023d9a:	e0b2      	b.n	8023f02 <__ieee754_log+0x2ca>
 8023d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023da0:	f7dc fa8c 	bl	80002bc <__adddf3>
 8023da4:	4602      	mov	r2, r0
 8023da6:	460b      	mov	r3, r1
 8023da8:	4650      	mov	r0, sl
 8023daa:	4659      	mov	r1, fp
 8023dac:	f7dc fd62 	bl	8000874 <__aeabi_ddiv>
 8023db0:	e9cd 0100 	strd	r0, r1, [sp]
 8023db4:	4620      	mov	r0, r4
 8023db6:	f7dc fbcd 	bl	8000554 <__aeabi_i2d>
 8023dba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023dc2:	4610      	mov	r0, r2
 8023dc4:	4619      	mov	r1, r3
 8023dc6:	f7dc fc2b 	bl	8000620 <__aeabi_dmul>
 8023dca:	4602      	mov	r2, r0
 8023dcc:	460b      	mov	r3, r1
 8023dce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023dd2:	f7dc fc25 	bl	8000620 <__aeabi_dmul>
 8023dd6:	a35e      	add	r3, pc, #376	; (adr r3, 8023f50 <__ieee754_log+0x318>)
 8023dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ddc:	4606      	mov	r6, r0
 8023dde:	460f      	mov	r7, r1
 8023de0:	f7dc fc1e 	bl	8000620 <__aeabi_dmul>
 8023de4:	a35c      	add	r3, pc, #368	; (adr r3, 8023f58 <__ieee754_log+0x320>)
 8023de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dea:	f7dc fa67 	bl	80002bc <__adddf3>
 8023dee:	4632      	mov	r2, r6
 8023df0:	463b      	mov	r3, r7
 8023df2:	f7dc fc15 	bl	8000620 <__aeabi_dmul>
 8023df6:	a35a      	add	r3, pc, #360	; (adr r3, 8023f60 <__ieee754_log+0x328>)
 8023df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dfc:	f7dc fa5e 	bl	80002bc <__adddf3>
 8023e00:	4632      	mov	r2, r6
 8023e02:	463b      	mov	r3, r7
 8023e04:	f7dc fc0c 	bl	8000620 <__aeabi_dmul>
 8023e08:	a357      	add	r3, pc, #348	; (adr r3, 8023f68 <__ieee754_log+0x330>)
 8023e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e0e:	f7dc fa55 	bl	80002bc <__adddf3>
 8023e12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023e16:	f7dc fc03 	bl	8000620 <__aeabi_dmul>
 8023e1a:	a355      	add	r3, pc, #340	; (adr r3, 8023f70 <__ieee754_log+0x338>)
 8023e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023e24:	4630      	mov	r0, r6
 8023e26:	4639      	mov	r1, r7
 8023e28:	f7dc fbfa 	bl	8000620 <__aeabi_dmul>
 8023e2c:	a352      	add	r3, pc, #328	; (adr r3, 8023f78 <__ieee754_log+0x340>)
 8023e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e32:	f7dc fa43 	bl	80002bc <__adddf3>
 8023e36:	4632      	mov	r2, r6
 8023e38:	463b      	mov	r3, r7
 8023e3a:	f7dc fbf1 	bl	8000620 <__aeabi_dmul>
 8023e3e:	a350      	add	r3, pc, #320	; (adr r3, 8023f80 <__ieee754_log+0x348>)
 8023e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e44:	f7dc fa3a 	bl	80002bc <__adddf3>
 8023e48:	4632      	mov	r2, r6
 8023e4a:	463b      	mov	r3, r7
 8023e4c:	f7dc fbe8 	bl	8000620 <__aeabi_dmul>
 8023e50:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 8023e54:	4602      	mov	r2, r0
 8023e56:	460b      	mov	r3, r1
 8023e58:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8023e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023e60:	f7dc fa2c 	bl	80002bc <__adddf3>
 8023e64:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 8023e68:	3551      	adds	r5, #81	; 0x51
 8023e6a:	ea45 0508 	orr.w	r5, r5, r8
 8023e6e:	2d00      	cmp	r5, #0
 8023e70:	4606      	mov	r6, r0
 8023e72:	460f      	mov	r7, r1
 8023e74:	dd50      	ble.n	8023f18 <__ieee754_log+0x2e0>
 8023e76:	2200      	movs	r2, #0
 8023e78:	4b47      	ldr	r3, [pc, #284]	; (8023f98 <__ieee754_log+0x360>)
 8023e7a:	4650      	mov	r0, sl
 8023e7c:	4659      	mov	r1, fp
 8023e7e:	f7dc fbcf 	bl	8000620 <__aeabi_dmul>
 8023e82:	4652      	mov	r2, sl
 8023e84:	465b      	mov	r3, fp
 8023e86:	f7dc fbcb 	bl	8000620 <__aeabi_dmul>
 8023e8a:	4680      	mov	r8, r0
 8023e8c:	4689      	mov	r9, r1
 8023e8e:	b994      	cbnz	r4, 8023eb6 <__ieee754_log+0x27e>
 8023e90:	4602      	mov	r2, r0
 8023e92:	460b      	mov	r3, r1
 8023e94:	4630      	mov	r0, r6
 8023e96:	4639      	mov	r1, r7
 8023e98:	f7dc fa10 	bl	80002bc <__adddf3>
 8023e9c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023ea0:	f7dc fbbe 	bl	8000620 <__aeabi_dmul>
 8023ea4:	4602      	mov	r2, r0
 8023ea6:	460b      	mov	r3, r1
 8023ea8:	4640      	mov	r0, r8
 8023eaa:	4649      	mov	r1, r9
 8023eac:	f7dc fa04 	bl	80002b8 <__aeabi_dsub>
 8023eb0:	4602      	mov	r2, r0
 8023eb2:	460b      	mov	r3, r1
 8023eb4:	e755      	b.n	8023d62 <__ieee754_log+0x12a>
 8023eb6:	a320      	add	r3, pc, #128	; (adr r3, 8023f38 <__ieee754_log+0x300>)
 8023eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023ec0:	f7dc fbae 	bl	8000620 <__aeabi_dmul>
 8023ec4:	4642      	mov	r2, r8
 8023ec6:	464b      	mov	r3, r9
 8023ec8:	4604      	mov	r4, r0
 8023eca:	460d      	mov	r5, r1
 8023ecc:	4630      	mov	r0, r6
 8023ece:	4639      	mov	r1, r7
 8023ed0:	f7dc f9f4 	bl	80002bc <__adddf3>
 8023ed4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023ed8:	f7dc fba2 	bl	8000620 <__aeabi_dmul>
 8023edc:	a318      	add	r3, pc, #96	; (adr r3, 8023f40 <__ieee754_log+0x308>)
 8023ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ee2:	4606      	mov	r6, r0
 8023ee4:	460f      	mov	r7, r1
 8023ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023eea:	f7dc fb99 	bl	8000620 <__aeabi_dmul>
 8023eee:	4602      	mov	r2, r0
 8023ef0:	460b      	mov	r3, r1
 8023ef2:	4630      	mov	r0, r6
 8023ef4:	4639      	mov	r1, r7
 8023ef6:	f7dc f9e1 	bl	80002bc <__adddf3>
 8023efa:	4602      	mov	r2, r0
 8023efc:	460b      	mov	r3, r1
 8023efe:	4640      	mov	r0, r8
 8023f00:	4649      	mov	r1, r9
 8023f02:	f7dc f9d9 	bl	80002b8 <__aeabi_dsub>
 8023f06:	4652      	mov	r2, sl
 8023f08:	465b      	mov	r3, fp
 8023f0a:	f7dc f9d5 	bl	80002b8 <__aeabi_dsub>
 8023f0e:	4602      	mov	r2, r0
 8023f10:	460b      	mov	r3, r1
 8023f12:	4620      	mov	r0, r4
 8023f14:	4629      	mov	r1, r5
 8023f16:	e726      	b.n	8023d66 <__ieee754_log+0x12e>
 8023f18:	2c00      	cmp	r4, #0
 8023f1a:	d13f      	bne.n	8023f9c <__ieee754_log+0x364>
 8023f1c:	4602      	mov	r2, r0
 8023f1e:	460b      	mov	r3, r1
 8023f20:	4650      	mov	r0, sl
 8023f22:	4659      	mov	r1, fp
 8023f24:	f7dc f9c8 	bl	80002b8 <__aeabi_dsub>
 8023f28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023f2c:	f7dc fb78 	bl	8000620 <__aeabi_dmul>
 8023f30:	e7be      	b.n	8023eb0 <__ieee754_log+0x278>
 8023f32:	bf00      	nop
 8023f34:	f3af 8000 	nop.w
 8023f38:	fee00000 	.word	0xfee00000
 8023f3c:	3fe62e42 	.word	0x3fe62e42
 8023f40:	35793c76 	.word	0x35793c76
 8023f44:	3dea39ef 	.word	0x3dea39ef
 8023f48:	55555555 	.word	0x55555555
 8023f4c:	3fd55555 	.word	0x3fd55555
 8023f50:	df3e5244 	.word	0xdf3e5244
 8023f54:	3fc2f112 	.word	0x3fc2f112
 8023f58:	96cb03de 	.word	0x96cb03de
 8023f5c:	3fc74664 	.word	0x3fc74664
 8023f60:	94229359 	.word	0x94229359
 8023f64:	3fd24924 	.word	0x3fd24924
 8023f68:	55555593 	.word	0x55555593
 8023f6c:	3fe55555 	.word	0x3fe55555
 8023f70:	d078c69f 	.word	0xd078c69f
 8023f74:	3fc39a09 	.word	0x3fc39a09
 8023f78:	1d8e78af 	.word	0x1d8e78af
 8023f7c:	3fcc71c5 	.word	0x3fcc71c5
 8023f80:	9997fa04 	.word	0x9997fa04
 8023f84:	3fd99999 	.word	0x3fd99999
 8023f88:	c3500000 	.word	0xc3500000
 8023f8c:	43500000 	.word	0x43500000
 8023f90:	7fefffff 	.word	0x7fefffff
 8023f94:	3ff00000 	.word	0x3ff00000
 8023f98:	3fe00000 	.word	0x3fe00000
 8023f9c:	a30e      	add	r3, pc, #56	; (adr r3, 8023fd8 <__ieee754_log+0x3a0>)
 8023f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023fa6:	f7dc fb3b 	bl	8000620 <__aeabi_dmul>
 8023faa:	4632      	mov	r2, r6
 8023fac:	463b      	mov	r3, r7
 8023fae:	4604      	mov	r4, r0
 8023fb0:	460d      	mov	r5, r1
 8023fb2:	4650      	mov	r0, sl
 8023fb4:	4659      	mov	r1, fp
 8023fb6:	f7dc f97f 	bl	80002b8 <__aeabi_dsub>
 8023fba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023fbe:	f7dc fb2f 	bl	8000620 <__aeabi_dmul>
 8023fc2:	a307      	add	r3, pc, #28	; (adr r3, 8023fe0 <__ieee754_log+0x3a8>)
 8023fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023fc8:	4606      	mov	r6, r0
 8023fca:	460f      	mov	r7, r1
 8023fcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023fd0:	e6dd      	b.n	8023d8e <__ieee754_log+0x156>
 8023fd2:	2000      	movs	r0, #0
 8023fd4:	2100      	movs	r1, #0
 8023fd6:	e644      	b.n	8023c62 <__ieee754_log+0x2a>
 8023fd8:	fee00000 	.word	0xfee00000
 8023fdc:	3fe62e42 	.word	0x3fe62e42
 8023fe0:	35793c76 	.word	0x35793c76
 8023fe4:	3dea39ef 	.word	0x3dea39ef

08023fe8 <__ieee754_pow>:
 8023fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023fec:	b091      	sub	sp, #68	; 0x44
 8023fee:	ed8d 1b00 	vstr	d1, [sp]
 8023ff2:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8023ff6:	ec57 6b10 	vmov	r6, r7, d0
 8023ffa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8023ffe:	ea58 0302 	orrs.w	r3, r8, r2
 8024002:	ee10 aa10 	vmov	sl, s0
 8024006:	463d      	mov	r5, r7
 8024008:	f000 84bd 	beq.w	8024986 <__ieee754_pow+0x99e>
 802400c:	4b78      	ldr	r3, [pc, #480]	; (80241f0 <__ieee754_pow+0x208>)
 802400e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8024012:	429c      	cmp	r4, r3
 8024014:	dc09      	bgt.n	802402a <__ieee754_pow+0x42>
 8024016:	d103      	bne.n	8024020 <__ieee754_pow+0x38>
 8024018:	b93e      	cbnz	r6, 802402a <__ieee754_pow+0x42>
 802401a:	45a0      	cmp	r8, r4
 802401c:	dc0d      	bgt.n	802403a <__ieee754_pow+0x52>
 802401e:	e001      	b.n	8024024 <__ieee754_pow+0x3c>
 8024020:	4598      	cmp	r8, r3
 8024022:	dc02      	bgt.n	802402a <__ieee754_pow+0x42>
 8024024:	4598      	cmp	r8, r3
 8024026:	d10e      	bne.n	8024046 <__ieee754_pow+0x5e>
 8024028:	b16a      	cbz	r2, 8024046 <__ieee754_pow+0x5e>
 802402a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802402e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8024032:	ea54 030a 	orrs.w	r3, r4, sl
 8024036:	f000 84a6 	beq.w	8024986 <__ieee754_pow+0x99e>
 802403a:	486e      	ldr	r0, [pc, #440]	; (80241f4 <__ieee754_pow+0x20c>)
 802403c:	b011      	add	sp, #68	; 0x44
 802403e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024042:	f000 bded 	b.w	8024c20 <nan>
 8024046:	2d00      	cmp	r5, #0
 8024048:	da53      	bge.n	80240f2 <__ieee754_pow+0x10a>
 802404a:	4b6b      	ldr	r3, [pc, #428]	; (80241f8 <__ieee754_pow+0x210>)
 802404c:	4598      	cmp	r8, r3
 802404e:	dc4d      	bgt.n	80240ec <__ieee754_pow+0x104>
 8024050:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8024054:	4598      	cmp	r8, r3
 8024056:	dd4c      	ble.n	80240f2 <__ieee754_pow+0x10a>
 8024058:	ea4f 5328 	mov.w	r3, r8, asr #20
 802405c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8024060:	2b14      	cmp	r3, #20
 8024062:	dd26      	ble.n	80240b2 <__ieee754_pow+0xca>
 8024064:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8024068:	fa22 f103 	lsr.w	r1, r2, r3
 802406c:	fa01 f303 	lsl.w	r3, r1, r3
 8024070:	429a      	cmp	r2, r3
 8024072:	d13e      	bne.n	80240f2 <__ieee754_pow+0x10a>
 8024074:	f001 0101 	and.w	r1, r1, #1
 8024078:	f1c1 0b02 	rsb	fp, r1, #2
 802407c:	2a00      	cmp	r2, #0
 802407e:	d15b      	bne.n	8024138 <__ieee754_pow+0x150>
 8024080:	4b5b      	ldr	r3, [pc, #364]	; (80241f0 <__ieee754_pow+0x208>)
 8024082:	4598      	cmp	r8, r3
 8024084:	d124      	bne.n	80240d0 <__ieee754_pow+0xe8>
 8024086:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802408a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802408e:	ea53 030a 	orrs.w	r3, r3, sl
 8024092:	f000 8478 	beq.w	8024986 <__ieee754_pow+0x99e>
 8024096:	4b59      	ldr	r3, [pc, #356]	; (80241fc <__ieee754_pow+0x214>)
 8024098:	429c      	cmp	r4, r3
 802409a:	dd2d      	ble.n	80240f8 <__ieee754_pow+0x110>
 802409c:	f1b9 0f00 	cmp.w	r9, #0
 80240a0:	f280 8475 	bge.w	802498e <__ieee754_pow+0x9a6>
 80240a4:	2000      	movs	r0, #0
 80240a6:	2100      	movs	r1, #0
 80240a8:	ec41 0b10 	vmov	d0, r0, r1
 80240ac:	b011      	add	sp, #68	; 0x44
 80240ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240b2:	2a00      	cmp	r2, #0
 80240b4:	d13e      	bne.n	8024134 <__ieee754_pow+0x14c>
 80240b6:	f1c3 0314 	rsb	r3, r3, #20
 80240ba:	fa48 f103 	asr.w	r1, r8, r3
 80240be:	fa01 f303 	lsl.w	r3, r1, r3
 80240c2:	4598      	cmp	r8, r3
 80240c4:	f040 846b 	bne.w	802499e <__ieee754_pow+0x9b6>
 80240c8:	f001 0101 	and.w	r1, r1, #1
 80240cc:	f1c1 0b02 	rsb	fp, r1, #2
 80240d0:	4b4b      	ldr	r3, [pc, #300]	; (8024200 <__ieee754_pow+0x218>)
 80240d2:	4598      	cmp	r8, r3
 80240d4:	d118      	bne.n	8024108 <__ieee754_pow+0x120>
 80240d6:	f1b9 0f00 	cmp.w	r9, #0
 80240da:	f280 845c 	bge.w	8024996 <__ieee754_pow+0x9ae>
 80240de:	4948      	ldr	r1, [pc, #288]	; (8024200 <__ieee754_pow+0x218>)
 80240e0:	4632      	mov	r2, r6
 80240e2:	463b      	mov	r3, r7
 80240e4:	2000      	movs	r0, #0
 80240e6:	f7dc fbc5 	bl	8000874 <__aeabi_ddiv>
 80240ea:	e7dd      	b.n	80240a8 <__ieee754_pow+0xc0>
 80240ec:	f04f 0b02 	mov.w	fp, #2
 80240f0:	e7c4      	b.n	802407c <__ieee754_pow+0x94>
 80240f2:	f04f 0b00 	mov.w	fp, #0
 80240f6:	e7c1      	b.n	802407c <__ieee754_pow+0x94>
 80240f8:	f1b9 0f00 	cmp.w	r9, #0
 80240fc:	dad2      	bge.n	80240a4 <__ieee754_pow+0xbc>
 80240fe:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8024102:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8024106:	e7cf      	b.n	80240a8 <__ieee754_pow+0xc0>
 8024108:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802410c:	d106      	bne.n	802411c <__ieee754_pow+0x134>
 802410e:	4632      	mov	r2, r6
 8024110:	463b      	mov	r3, r7
 8024112:	4610      	mov	r0, r2
 8024114:	4619      	mov	r1, r3
 8024116:	f7dc fa83 	bl	8000620 <__aeabi_dmul>
 802411a:	e7c5      	b.n	80240a8 <__ieee754_pow+0xc0>
 802411c:	4b39      	ldr	r3, [pc, #228]	; (8024204 <__ieee754_pow+0x21c>)
 802411e:	4599      	cmp	r9, r3
 8024120:	d10a      	bne.n	8024138 <__ieee754_pow+0x150>
 8024122:	2d00      	cmp	r5, #0
 8024124:	db08      	blt.n	8024138 <__ieee754_pow+0x150>
 8024126:	ec47 6b10 	vmov	d0, r6, r7
 802412a:	b011      	add	sp, #68	; 0x44
 802412c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024130:	f000 bc6c 	b.w	8024a0c <__ieee754_sqrt>
 8024134:	f04f 0b00 	mov.w	fp, #0
 8024138:	ec47 6b10 	vmov	d0, r6, r7
 802413c:	f000 fd5d 	bl	8024bfa <fabs>
 8024140:	ec51 0b10 	vmov	r0, r1, d0
 8024144:	f1ba 0f00 	cmp.w	sl, #0
 8024148:	d127      	bne.n	802419a <__ieee754_pow+0x1b2>
 802414a:	b124      	cbz	r4, 8024156 <__ieee754_pow+0x16e>
 802414c:	4b2c      	ldr	r3, [pc, #176]	; (8024200 <__ieee754_pow+0x218>)
 802414e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8024152:	429a      	cmp	r2, r3
 8024154:	d121      	bne.n	802419a <__ieee754_pow+0x1b2>
 8024156:	f1b9 0f00 	cmp.w	r9, #0
 802415a:	da05      	bge.n	8024168 <__ieee754_pow+0x180>
 802415c:	4602      	mov	r2, r0
 802415e:	460b      	mov	r3, r1
 8024160:	2000      	movs	r0, #0
 8024162:	4927      	ldr	r1, [pc, #156]	; (8024200 <__ieee754_pow+0x218>)
 8024164:	f7dc fb86 	bl	8000874 <__aeabi_ddiv>
 8024168:	2d00      	cmp	r5, #0
 802416a:	da9d      	bge.n	80240a8 <__ieee754_pow+0xc0>
 802416c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8024170:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8024174:	ea54 030b 	orrs.w	r3, r4, fp
 8024178:	d108      	bne.n	802418c <__ieee754_pow+0x1a4>
 802417a:	4602      	mov	r2, r0
 802417c:	460b      	mov	r3, r1
 802417e:	4610      	mov	r0, r2
 8024180:	4619      	mov	r1, r3
 8024182:	f7dc f899 	bl	80002b8 <__aeabi_dsub>
 8024186:	4602      	mov	r2, r0
 8024188:	460b      	mov	r3, r1
 802418a:	e7ac      	b.n	80240e6 <__ieee754_pow+0xfe>
 802418c:	f1bb 0f01 	cmp.w	fp, #1
 8024190:	d18a      	bne.n	80240a8 <__ieee754_pow+0xc0>
 8024192:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024196:	4619      	mov	r1, r3
 8024198:	e786      	b.n	80240a8 <__ieee754_pow+0xc0>
 802419a:	0fed      	lsrs	r5, r5, #31
 802419c:	1e6b      	subs	r3, r5, #1
 802419e:	930d      	str	r3, [sp, #52]	; 0x34
 80241a0:	ea5b 0303 	orrs.w	r3, fp, r3
 80241a4:	d102      	bne.n	80241ac <__ieee754_pow+0x1c4>
 80241a6:	4632      	mov	r2, r6
 80241a8:	463b      	mov	r3, r7
 80241aa:	e7e8      	b.n	802417e <__ieee754_pow+0x196>
 80241ac:	4b16      	ldr	r3, [pc, #88]	; (8024208 <__ieee754_pow+0x220>)
 80241ae:	4598      	cmp	r8, r3
 80241b0:	f340 80fe 	ble.w	80243b0 <__ieee754_pow+0x3c8>
 80241b4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80241b8:	4598      	cmp	r8, r3
 80241ba:	dd0a      	ble.n	80241d2 <__ieee754_pow+0x1ea>
 80241bc:	4b0f      	ldr	r3, [pc, #60]	; (80241fc <__ieee754_pow+0x214>)
 80241be:	429c      	cmp	r4, r3
 80241c0:	dc0d      	bgt.n	80241de <__ieee754_pow+0x1f6>
 80241c2:	f1b9 0f00 	cmp.w	r9, #0
 80241c6:	f6bf af6d 	bge.w	80240a4 <__ieee754_pow+0xbc>
 80241ca:	a307      	add	r3, pc, #28	; (adr r3, 80241e8 <__ieee754_pow+0x200>)
 80241cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80241d0:	e79f      	b.n	8024112 <__ieee754_pow+0x12a>
 80241d2:	4b0e      	ldr	r3, [pc, #56]	; (802420c <__ieee754_pow+0x224>)
 80241d4:	429c      	cmp	r4, r3
 80241d6:	ddf4      	ble.n	80241c2 <__ieee754_pow+0x1da>
 80241d8:	4b09      	ldr	r3, [pc, #36]	; (8024200 <__ieee754_pow+0x218>)
 80241da:	429c      	cmp	r4, r3
 80241dc:	dd18      	ble.n	8024210 <__ieee754_pow+0x228>
 80241de:	f1b9 0f00 	cmp.w	r9, #0
 80241e2:	dcf2      	bgt.n	80241ca <__ieee754_pow+0x1e2>
 80241e4:	e75e      	b.n	80240a4 <__ieee754_pow+0xbc>
 80241e6:	bf00      	nop
 80241e8:	8800759c 	.word	0x8800759c
 80241ec:	7e37e43c 	.word	0x7e37e43c
 80241f0:	7ff00000 	.word	0x7ff00000
 80241f4:	08031dc9 	.word	0x08031dc9
 80241f8:	433fffff 	.word	0x433fffff
 80241fc:	3fefffff 	.word	0x3fefffff
 8024200:	3ff00000 	.word	0x3ff00000
 8024204:	3fe00000 	.word	0x3fe00000
 8024208:	41e00000 	.word	0x41e00000
 802420c:	3feffffe 	.word	0x3feffffe
 8024210:	2200      	movs	r2, #0
 8024212:	4b63      	ldr	r3, [pc, #396]	; (80243a0 <__ieee754_pow+0x3b8>)
 8024214:	f7dc f850 	bl	80002b8 <__aeabi_dsub>
 8024218:	a355      	add	r3, pc, #340	; (adr r3, 8024370 <__ieee754_pow+0x388>)
 802421a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802421e:	4604      	mov	r4, r0
 8024220:	460d      	mov	r5, r1
 8024222:	f7dc f9fd 	bl	8000620 <__aeabi_dmul>
 8024226:	a354      	add	r3, pc, #336	; (adr r3, 8024378 <__ieee754_pow+0x390>)
 8024228:	e9d3 2300 	ldrd	r2, r3, [r3]
 802422c:	4606      	mov	r6, r0
 802422e:	460f      	mov	r7, r1
 8024230:	4620      	mov	r0, r4
 8024232:	4629      	mov	r1, r5
 8024234:	f7dc f9f4 	bl	8000620 <__aeabi_dmul>
 8024238:	2200      	movs	r2, #0
 802423a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802423e:	4b59      	ldr	r3, [pc, #356]	; (80243a4 <__ieee754_pow+0x3bc>)
 8024240:	4620      	mov	r0, r4
 8024242:	4629      	mov	r1, r5
 8024244:	f7dc f9ec 	bl	8000620 <__aeabi_dmul>
 8024248:	4602      	mov	r2, r0
 802424a:	460b      	mov	r3, r1
 802424c:	a14c      	add	r1, pc, #304	; (adr r1, 8024380 <__ieee754_pow+0x398>)
 802424e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024252:	f7dc f831 	bl	80002b8 <__aeabi_dsub>
 8024256:	4622      	mov	r2, r4
 8024258:	462b      	mov	r3, r5
 802425a:	f7dc f9e1 	bl	8000620 <__aeabi_dmul>
 802425e:	4602      	mov	r2, r0
 8024260:	460b      	mov	r3, r1
 8024262:	2000      	movs	r0, #0
 8024264:	4950      	ldr	r1, [pc, #320]	; (80243a8 <__ieee754_pow+0x3c0>)
 8024266:	f7dc f827 	bl	80002b8 <__aeabi_dsub>
 802426a:	4622      	mov	r2, r4
 802426c:	462b      	mov	r3, r5
 802426e:	4680      	mov	r8, r0
 8024270:	4689      	mov	r9, r1
 8024272:	4620      	mov	r0, r4
 8024274:	4629      	mov	r1, r5
 8024276:	f7dc f9d3 	bl	8000620 <__aeabi_dmul>
 802427a:	4602      	mov	r2, r0
 802427c:	460b      	mov	r3, r1
 802427e:	4640      	mov	r0, r8
 8024280:	4649      	mov	r1, r9
 8024282:	f7dc f9cd 	bl	8000620 <__aeabi_dmul>
 8024286:	a340      	add	r3, pc, #256	; (adr r3, 8024388 <__ieee754_pow+0x3a0>)
 8024288:	e9d3 2300 	ldrd	r2, r3, [r3]
 802428c:	f7dc f9c8 	bl	8000620 <__aeabi_dmul>
 8024290:	4602      	mov	r2, r0
 8024292:	460b      	mov	r3, r1
 8024294:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024298:	f7dc f80e 	bl	80002b8 <__aeabi_dsub>
 802429c:	4602      	mov	r2, r0
 802429e:	460b      	mov	r3, r1
 80242a0:	4604      	mov	r4, r0
 80242a2:	460d      	mov	r5, r1
 80242a4:	4630      	mov	r0, r6
 80242a6:	4639      	mov	r1, r7
 80242a8:	f7dc f808 	bl	80002bc <__adddf3>
 80242ac:	2000      	movs	r0, #0
 80242ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80242b2:	4632      	mov	r2, r6
 80242b4:	463b      	mov	r3, r7
 80242b6:	f7db ffff 	bl	80002b8 <__aeabi_dsub>
 80242ba:	4602      	mov	r2, r0
 80242bc:	460b      	mov	r3, r1
 80242be:	4620      	mov	r0, r4
 80242c0:	4629      	mov	r1, r5
 80242c2:	f7db fff9 	bl	80002b8 <__aeabi_dsub>
 80242c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80242c8:	f10b 33ff 	add.w	r3, fp, #4294967295
 80242cc:	4313      	orrs	r3, r2
 80242ce:	4606      	mov	r6, r0
 80242d0:	460f      	mov	r7, r1
 80242d2:	f040 81eb 	bne.w	80246ac <__ieee754_pow+0x6c4>
 80242d6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8024390 <__ieee754_pow+0x3a8>
 80242da:	e9dd 4500 	ldrd	r4, r5, [sp]
 80242de:	2400      	movs	r4, #0
 80242e0:	4622      	mov	r2, r4
 80242e2:	462b      	mov	r3, r5
 80242e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80242e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80242ec:	f7db ffe4 	bl	80002b8 <__aeabi_dsub>
 80242f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80242f4:	f7dc f994 	bl	8000620 <__aeabi_dmul>
 80242f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80242fc:	4680      	mov	r8, r0
 80242fe:	4689      	mov	r9, r1
 8024300:	4630      	mov	r0, r6
 8024302:	4639      	mov	r1, r7
 8024304:	f7dc f98c 	bl	8000620 <__aeabi_dmul>
 8024308:	4602      	mov	r2, r0
 802430a:	460b      	mov	r3, r1
 802430c:	4640      	mov	r0, r8
 802430e:	4649      	mov	r1, r9
 8024310:	f7db ffd4 	bl	80002bc <__adddf3>
 8024314:	4622      	mov	r2, r4
 8024316:	462b      	mov	r3, r5
 8024318:	4680      	mov	r8, r0
 802431a:	4689      	mov	r9, r1
 802431c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024320:	f7dc f97e 	bl	8000620 <__aeabi_dmul>
 8024324:	460b      	mov	r3, r1
 8024326:	4604      	mov	r4, r0
 8024328:	460d      	mov	r5, r1
 802432a:	4602      	mov	r2, r0
 802432c:	4649      	mov	r1, r9
 802432e:	4640      	mov	r0, r8
 8024330:	e9cd 4500 	strd	r4, r5, [sp]
 8024334:	f7db ffc2 	bl	80002bc <__adddf3>
 8024338:	4b1c      	ldr	r3, [pc, #112]	; (80243ac <__ieee754_pow+0x3c4>)
 802433a:	4299      	cmp	r1, r3
 802433c:	4606      	mov	r6, r0
 802433e:	460f      	mov	r7, r1
 8024340:	468b      	mov	fp, r1
 8024342:	f340 82f7 	ble.w	8024934 <__ieee754_pow+0x94c>
 8024346:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802434a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802434e:	4303      	orrs	r3, r0
 8024350:	f000 81ea 	beq.w	8024728 <__ieee754_pow+0x740>
 8024354:	a310      	add	r3, pc, #64	; (adr r3, 8024398 <__ieee754_pow+0x3b0>)
 8024356:	e9d3 2300 	ldrd	r2, r3, [r3]
 802435a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802435e:	f7dc f95f 	bl	8000620 <__aeabi_dmul>
 8024362:	a30d      	add	r3, pc, #52	; (adr r3, 8024398 <__ieee754_pow+0x3b0>)
 8024364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024368:	e6d5      	b.n	8024116 <__ieee754_pow+0x12e>
 802436a:	bf00      	nop
 802436c:	f3af 8000 	nop.w
 8024370:	60000000 	.word	0x60000000
 8024374:	3ff71547 	.word	0x3ff71547
 8024378:	f85ddf44 	.word	0xf85ddf44
 802437c:	3e54ae0b 	.word	0x3e54ae0b
 8024380:	55555555 	.word	0x55555555
 8024384:	3fd55555 	.word	0x3fd55555
 8024388:	652b82fe 	.word	0x652b82fe
 802438c:	3ff71547 	.word	0x3ff71547
 8024390:	00000000 	.word	0x00000000
 8024394:	bff00000 	.word	0xbff00000
 8024398:	8800759c 	.word	0x8800759c
 802439c:	7e37e43c 	.word	0x7e37e43c
 80243a0:	3ff00000 	.word	0x3ff00000
 80243a4:	3fd00000 	.word	0x3fd00000
 80243a8:	3fe00000 	.word	0x3fe00000
 80243ac:	408fffff 	.word	0x408fffff
 80243b0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80243b4:	f04f 0200 	mov.w	r2, #0
 80243b8:	da05      	bge.n	80243c6 <__ieee754_pow+0x3de>
 80243ba:	4bd3      	ldr	r3, [pc, #844]	; (8024708 <__ieee754_pow+0x720>)
 80243bc:	f7dc f930 	bl	8000620 <__aeabi_dmul>
 80243c0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80243c4:	460c      	mov	r4, r1
 80243c6:	1523      	asrs	r3, r4, #20
 80243c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80243cc:	4413      	add	r3, r2
 80243ce:	9307      	str	r3, [sp, #28]
 80243d0:	4bce      	ldr	r3, [pc, #824]	; (802470c <__ieee754_pow+0x724>)
 80243d2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80243d6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80243da:	429c      	cmp	r4, r3
 80243dc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80243e0:	dd08      	ble.n	80243f4 <__ieee754_pow+0x40c>
 80243e2:	4bcb      	ldr	r3, [pc, #812]	; (8024710 <__ieee754_pow+0x728>)
 80243e4:	429c      	cmp	r4, r3
 80243e6:	f340 815e 	ble.w	80246a6 <__ieee754_pow+0x6be>
 80243ea:	9b07      	ldr	r3, [sp, #28]
 80243ec:	3301      	adds	r3, #1
 80243ee:	9307      	str	r3, [sp, #28]
 80243f0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80243f4:	f04f 0a00 	mov.w	sl, #0
 80243f8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80243fc:	930c      	str	r3, [sp, #48]	; 0x30
 80243fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024400:	4bc4      	ldr	r3, [pc, #784]	; (8024714 <__ieee754_pow+0x72c>)
 8024402:	4413      	add	r3, r2
 8024404:	ed93 7b00 	vldr	d7, [r3]
 8024408:	4629      	mov	r1, r5
 802440a:	ec53 2b17 	vmov	r2, r3, d7
 802440e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8024412:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8024416:	f7db ff4f 	bl	80002b8 <__aeabi_dsub>
 802441a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 802441e:	4606      	mov	r6, r0
 8024420:	460f      	mov	r7, r1
 8024422:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024426:	f7db ff49 	bl	80002bc <__adddf3>
 802442a:	4602      	mov	r2, r0
 802442c:	460b      	mov	r3, r1
 802442e:	2000      	movs	r0, #0
 8024430:	49b9      	ldr	r1, [pc, #740]	; (8024718 <__ieee754_pow+0x730>)
 8024432:	f7dc fa1f 	bl	8000874 <__aeabi_ddiv>
 8024436:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802443a:	4602      	mov	r2, r0
 802443c:	460b      	mov	r3, r1
 802443e:	4630      	mov	r0, r6
 8024440:	4639      	mov	r1, r7
 8024442:	f7dc f8ed 	bl	8000620 <__aeabi_dmul>
 8024446:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802444a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 802444e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8024452:	2300      	movs	r3, #0
 8024454:	9302      	str	r3, [sp, #8]
 8024456:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802445a:	106d      	asrs	r5, r5, #1
 802445c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8024460:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8024464:	2200      	movs	r2, #0
 8024466:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 802446a:	4640      	mov	r0, r8
 802446c:	4649      	mov	r1, r9
 802446e:	4614      	mov	r4, r2
 8024470:	461d      	mov	r5, r3
 8024472:	f7dc f8d5 	bl	8000620 <__aeabi_dmul>
 8024476:	4602      	mov	r2, r0
 8024478:	460b      	mov	r3, r1
 802447a:	4630      	mov	r0, r6
 802447c:	4639      	mov	r1, r7
 802447e:	f7db ff1b 	bl	80002b8 <__aeabi_dsub>
 8024482:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8024486:	4606      	mov	r6, r0
 8024488:	460f      	mov	r7, r1
 802448a:	4620      	mov	r0, r4
 802448c:	4629      	mov	r1, r5
 802448e:	f7db ff13 	bl	80002b8 <__aeabi_dsub>
 8024492:	4602      	mov	r2, r0
 8024494:	460b      	mov	r3, r1
 8024496:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 802449a:	f7db ff0d 	bl	80002b8 <__aeabi_dsub>
 802449e:	4642      	mov	r2, r8
 80244a0:	464b      	mov	r3, r9
 80244a2:	f7dc f8bd 	bl	8000620 <__aeabi_dmul>
 80244a6:	4602      	mov	r2, r0
 80244a8:	460b      	mov	r3, r1
 80244aa:	4630      	mov	r0, r6
 80244ac:	4639      	mov	r1, r7
 80244ae:	f7db ff03 	bl	80002b8 <__aeabi_dsub>
 80244b2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80244b6:	f7dc f8b3 	bl	8000620 <__aeabi_dmul>
 80244ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80244be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80244c2:	4610      	mov	r0, r2
 80244c4:	4619      	mov	r1, r3
 80244c6:	f7dc f8ab 	bl	8000620 <__aeabi_dmul>
 80244ca:	a37b      	add	r3, pc, #492	; (adr r3, 80246b8 <__ieee754_pow+0x6d0>)
 80244cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80244d0:	4604      	mov	r4, r0
 80244d2:	460d      	mov	r5, r1
 80244d4:	f7dc f8a4 	bl	8000620 <__aeabi_dmul>
 80244d8:	a379      	add	r3, pc, #484	; (adr r3, 80246c0 <__ieee754_pow+0x6d8>)
 80244da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80244de:	f7db feed 	bl	80002bc <__adddf3>
 80244e2:	4622      	mov	r2, r4
 80244e4:	462b      	mov	r3, r5
 80244e6:	f7dc f89b 	bl	8000620 <__aeabi_dmul>
 80244ea:	a377      	add	r3, pc, #476	; (adr r3, 80246c8 <__ieee754_pow+0x6e0>)
 80244ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80244f0:	f7db fee4 	bl	80002bc <__adddf3>
 80244f4:	4622      	mov	r2, r4
 80244f6:	462b      	mov	r3, r5
 80244f8:	f7dc f892 	bl	8000620 <__aeabi_dmul>
 80244fc:	a374      	add	r3, pc, #464	; (adr r3, 80246d0 <__ieee754_pow+0x6e8>)
 80244fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024502:	f7db fedb 	bl	80002bc <__adddf3>
 8024506:	4622      	mov	r2, r4
 8024508:	462b      	mov	r3, r5
 802450a:	f7dc f889 	bl	8000620 <__aeabi_dmul>
 802450e:	a372      	add	r3, pc, #456	; (adr r3, 80246d8 <__ieee754_pow+0x6f0>)
 8024510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024514:	f7db fed2 	bl	80002bc <__adddf3>
 8024518:	4622      	mov	r2, r4
 802451a:	462b      	mov	r3, r5
 802451c:	f7dc f880 	bl	8000620 <__aeabi_dmul>
 8024520:	a36f      	add	r3, pc, #444	; (adr r3, 80246e0 <__ieee754_pow+0x6f8>)
 8024522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024526:	f7db fec9 	bl	80002bc <__adddf3>
 802452a:	4622      	mov	r2, r4
 802452c:	4606      	mov	r6, r0
 802452e:	460f      	mov	r7, r1
 8024530:	462b      	mov	r3, r5
 8024532:	4620      	mov	r0, r4
 8024534:	4629      	mov	r1, r5
 8024536:	f7dc f873 	bl	8000620 <__aeabi_dmul>
 802453a:	4602      	mov	r2, r0
 802453c:	460b      	mov	r3, r1
 802453e:	4630      	mov	r0, r6
 8024540:	4639      	mov	r1, r7
 8024542:	f7dc f86d 	bl	8000620 <__aeabi_dmul>
 8024546:	4642      	mov	r2, r8
 8024548:	4604      	mov	r4, r0
 802454a:	460d      	mov	r5, r1
 802454c:	464b      	mov	r3, r9
 802454e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8024552:	f7db feb3 	bl	80002bc <__adddf3>
 8024556:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 802455a:	f7dc f861 	bl	8000620 <__aeabi_dmul>
 802455e:	4622      	mov	r2, r4
 8024560:	462b      	mov	r3, r5
 8024562:	f7db feab 	bl	80002bc <__adddf3>
 8024566:	4642      	mov	r2, r8
 8024568:	4606      	mov	r6, r0
 802456a:	460f      	mov	r7, r1
 802456c:	464b      	mov	r3, r9
 802456e:	4640      	mov	r0, r8
 8024570:	4649      	mov	r1, r9
 8024572:	f7dc f855 	bl	8000620 <__aeabi_dmul>
 8024576:	2200      	movs	r2, #0
 8024578:	4b68      	ldr	r3, [pc, #416]	; (802471c <__ieee754_pow+0x734>)
 802457a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 802457e:	f7db fe9d 	bl	80002bc <__adddf3>
 8024582:	4632      	mov	r2, r6
 8024584:	463b      	mov	r3, r7
 8024586:	f7db fe99 	bl	80002bc <__adddf3>
 802458a:	9802      	ldr	r0, [sp, #8]
 802458c:	460d      	mov	r5, r1
 802458e:	4604      	mov	r4, r0
 8024590:	4602      	mov	r2, r0
 8024592:	460b      	mov	r3, r1
 8024594:	4640      	mov	r0, r8
 8024596:	4649      	mov	r1, r9
 8024598:	f7dc f842 	bl	8000620 <__aeabi_dmul>
 802459c:	2200      	movs	r2, #0
 802459e:	4680      	mov	r8, r0
 80245a0:	4689      	mov	r9, r1
 80245a2:	4b5e      	ldr	r3, [pc, #376]	; (802471c <__ieee754_pow+0x734>)
 80245a4:	4620      	mov	r0, r4
 80245a6:	4629      	mov	r1, r5
 80245a8:	f7db fe86 	bl	80002b8 <__aeabi_dsub>
 80245ac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80245b0:	f7db fe82 	bl	80002b8 <__aeabi_dsub>
 80245b4:	4602      	mov	r2, r0
 80245b6:	460b      	mov	r3, r1
 80245b8:	4630      	mov	r0, r6
 80245ba:	4639      	mov	r1, r7
 80245bc:	f7db fe7c 	bl	80002b8 <__aeabi_dsub>
 80245c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80245c4:	f7dc f82c 	bl	8000620 <__aeabi_dmul>
 80245c8:	4622      	mov	r2, r4
 80245ca:	4606      	mov	r6, r0
 80245cc:	460f      	mov	r7, r1
 80245ce:	462b      	mov	r3, r5
 80245d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80245d4:	f7dc f824 	bl	8000620 <__aeabi_dmul>
 80245d8:	4602      	mov	r2, r0
 80245da:	460b      	mov	r3, r1
 80245dc:	4630      	mov	r0, r6
 80245de:	4639      	mov	r1, r7
 80245e0:	f7db fe6c 	bl	80002bc <__adddf3>
 80245e4:	4606      	mov	r6, r0
 80245e6:	460f      	mov	r7, r1
 80245e8:	4602      	mov	r2, r0
 80245ea:	460b      	mov	r3, r1
 80245ec:	4640      	mov	r0, r8
 80245ee:	4649      	mov	r1, r9
 80245f0:	f7db fe64 	bl	80002bc <__adddf3>
 80245f4:	9802      	ldr	r0, [sp, #8]
 80245f6:	a33c      	add	r3, pc, #240	; (adr r3, 80246e8 <__ieee754_pow+0x700>)
 80245f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80245fc:	4604      	mov	r4, r0
 80245fe:	460d      	mov	r5, r1
 8024600:	f7dc f80e 	bl	8000620 <__aeabi_dmul>
 8024604:	4642      	mov	r2, r8
 8024606:	e9cd 0108 	strd	r0, r1, [sp, #32]
 802460a:	464b      	mov	r3, r9
 802460c:	4620      	mov	r0, r4
 802460e:	4629      	mov	r1, r5
 8024610:	f7db fe52 	bl	80002b8 <__aeabi_dsub>
 8024614:	4602      	mov	r2, r0
 8024616:	460b      	mov	r3, r1
 8024618:	4630      	mov	r0, r6
 802461a:	4639      	mov	r1, r7
 802461c:	f7db fe4c 	bl	80002b8 <__aeabi_dsub>
 8024620:	a333      	add	r3, pc, #204	; (adr r3, 80246f0 <__ieee754_pow+0x708>)
 8024622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024626:	f7db fffb 	bl	8000620 <__aeabi_dmul>
 802462a:	a333      	add	r3, pc, #204	; (adr r3, 80246f8 <__ieee754_pow+0x710>)
 802462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024630:	4606      	mov	r6, r0
 8024632:	460f      	mov	r7, r1
 8024634:	4620      	mov	r0, r4
 8024636:	4629      	mov	r1, r5
 8024638:	f7db fff2 	bl	8000620 <__aeabi_dmul>
 802463c:	4602      	mov	r2, r0
 802463e:	460b      	mov	r3, r1
 8024640:	4630      	mov	r0, r6
 8024642:	4639      	mov	r1, r7
 8024644:	f7db fe3a 	bl	80002bc <__adddf3>
 8024648:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802464a:	4b35      	ldr	r3, [pc, #212]	; (8024720 <__ieee754_pow+0x738>)
 802464c:	4413      	add	r3, r2
 802464e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024652:	f7db fe33 	bl	80002bc <__adddf3>
 8024656:	4604      	mov	r4, r0
 8024658:	9807      	ldr	r0, [sp, #28]
 802465a:	460d      	mov	r5, r1
 802465c:	f7db ff7a 	bl	8000554 <__aeabi_i2d>
 8024660:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024662:	4b30      	ldr	r3, [pc, #192]	; (8024724 <__ieee754_pow+0x73c>)
 8024664:	4413      	add	r3, r2
 8024666:	e9d3 8900 	ldrd	r8, r9, [r3]
 802466a:	4606      	mov	r6, r0
 802466c:	460f      	mov	r7, r1
 802466e:	4622      	mov	r2, r4
 8024670:	462b      	mov	r3, r5
 8024672:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8024676:	f7db fe21 	bl	80002bc <__adddf3>
 802467a:	4642      	mov	r2, r8
 802467c:	464b      	mov	r3, r9
 802467e:	f7db fe1d 	bl	80002bc <__adddf3>
 8024682:	4632      	mov	r2, r6
 8024684:	463b      	mov	r3, r7
 8024686:	f7db fe19 	bl	80002bc <__adddf3>
 802468a:	9802      	ldr	r0, [sp, #8]
 802468c:	4632      	mov	r2, r6
 802468e:	463b      	mov	r3, r7
 8024690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024694:	f7db fe10 	bl	80002b8 <__aeabi_dsub>
 8024698:	4642      	mov	r2, r8
 802469a:	464b      	mov	r3, r9
 802469c:	f7db fe0c 	bl	80002b8 <__aeabi_dsub>
 80246a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80246a4:	e607      	b.n	80242b6 <__ieee754_pow+0x2ce>
 80246a6:	f04f 0a01 	mov.w	sl, #1
 80246aa:	e6a5      	b.n	80243f8 <__ieee754_pow+0x410>
 80246ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8024700 <__ieee754_pow+0x718>
 80246b0:	e613      	b.n	80242da <__ieee754_pow+0x2f2>
 80246b2:	bf00      	nop
 80246b4:	f3af 8000 	nop.w
 80246b8:	4a454eef 	.word	0x4a454eef
 80246bc:	3fca7e28 	.word	0x3fca7e28
 80246c0:	93c9db65 	.word	0x93c9db65
 80246c4:	3fcd864a 	.word	0x3fcd864a
 80246c8:	a91d4101 	.word	0xa91d4101
 80246cc:	3fd17460 	.word	0x3fd17460
 80246d0:	518f264d 	.word	0x518f264d
 80246d4:	3fd55555 	.word	0x3fd55555
 80246d8:	db6fabff 	.word	0xdb6fabff
 80246dc:	3fdb6db6 	.word	0x3fdb6db6
 80246e0:	33333303 	.word	0x33333303
 80246e4:	3fe33333 	.word	0x3fe33333
 80246e8:	e0000000 	.word	0xe0000000
 80246ec:	3feec709 	.word	0x3feec709
 80246f0:	dc3a03fd 	.word	0xdc3a03fd
 80246f4:	3feec709 	.word	0x3feec709
 80246f8:	145b01f5 	.word	0x145b01f5
 80246fc:	be3e2fe0 	.word	0xbe3e2fe0
 8024700:	00000000 	.word	0x00000000
 8024704:	3ff00000 	.word	0x3ff00000
 8024708:	43400000 	.word	0x43400000
 802470c:	0003988e 	.word	0x0003988e
 8024710:	000bb679 	.word	0x000bb679
 8024714:	08032160 	.word	0x08032160
 8024718:	3ff00000 	.word	0x3ff00000
 802471c:	40080000 	.word	0x40080000
 8024720:	08032180 	.word	0x08032180
 8024724:	08032170 	.word	0x08032170
 8024728:	a3b6      	add	r3, pc, #728	; (adr r3, 8024a04 <__ieee754_pow+0xa1c>)
 802472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802472e:	4640      	mov	r0, r8
 8024730:	4649      	mov	r1, r9
 8024732:	f7db fdc3 	bl	80002bc <__adddf3>
 8024736:	4622      	mov	r2, r4
 8024738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802473c:	462b      	mov	r3, r5
 802473e:	4630      	mov	r0, r6
 8024740:	4639      	mov	r1, r7
 8024742:	f7db fdb9 	bl	80002b8 <__aeabi_dsub>
 8024746:	4602      	mov	r2, r0
 8024748:	460b      	mov	r3, r1
 802474a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802474e:	f7dc f9f7 	bl	8000b40 <__aeabi_dcmpgt>
 8024752:	2800      	cmp	r0, #0
 8024754:	f47f adfe 	bne.w	8024354 <__ieee754_pow+0x36c>
 8024758:	4aa5      	ldr	r2, [pc, #660]	; (80249f0 <__ieee754_pow+0xa08>)
 802475a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802475e:	4293      	cmp	r3, r2
 8024760:	f340 810c 	ble.w	802497c <__ieee754_pow+0x994>
 8024764:	151b      	asrs	r3, r3, #20
 8024766:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 802476a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802476e:	fa4a f303 	asr.w	r3, sl, r3
 8024772:	445b      	add	r3, fp
 8024774:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8024778:	4e9e      	ldr	r6, [pc, #632]	; (80249f4 <__ieee754_pow+0xa0c>)
 802477a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802477e:	4116      	asrs	r6, r2
 8024780:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8024784:	2000      	movs	r0, #0
 8024786:	ea23 0106 	bic.w	r1, r3, r6
 802478a:	f1c2 0214 	rsb	r2, r2, #20
 802478e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8024792:	fa4a fa02 	asr.w	sl, sl, r2
 8024796:	f1bb 0f00 	cmp.w	fp, #0
 802479a:	4602      	mov	r2, r0
 802479c:	460b      	mov	r3, r1
 802479e:	4620      	mov	r0, r4
 80247a0:	4629      	mov	r1, r5
 80247a2:	bfb8      	it	lt
 80247a4:	f1ca 0a00 	rsblt	sl, sl, #0
 80247a8:	f7db fd86 	bl	80002b8 <__aeabi_dsub>
 80247ac:	e9cd 0100 	strd	r0, r1, [sp]
 80247b0:	4642      	mov	r2, r8
 80247b2:	464b      	mov	r3, r9
 80247b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80247b8:	f7db fd80 	bl	80002bc <__adddf3>
 80247bc:	2000      	movs	r0, #0
 80247be:	a37a      	add	r3, pc, #488	; (adr r3, 80249a8 <__ieee754_pow+0x9c0>)
 80247c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247c4:	4604      	mov	r4, r0
 80247c6:	460d      	mov	r5, r1
 80247c8:	f7db ff2a 	bl	8000620 <__aeabi_dmul>
 80247cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80247d0:	4606      	mov	r6, r0
 80247d2:	460f      	mov	r7, r1
 80247d4:	4620      	mov	r0, r4
 80247d6:	4629      	mov	r1, r5
 80247d8:	f7db fd6e 	bl	80002b8 <__aeabi_dsub>
 80247dc:	4602      	mov	r2, r0
 80247de:	460b      	mov	r3, r1
 80247e0:	4640      	mov	r0, r8
 80247e2:	4649      	mov	r1, r9
 80247e4:	f7db fd68 	bl	80002b8 <__aeabi_dsub>
 80247e8:	a371      	add	r3, pc, #452	; (adr r3, 80249b0 <__ieee754_pow+0x9c8>)
 80247ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247ee:	f7db ff17 	bl	8000620 <__aeabi_dmul>
 80247f2:	a371      	add	r3, pc, #452	; (adr r3, 80249b8 <__ieee754_pow+0x9d0>)
 80247f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80247f8:	4680      	mov	r8, r0
 80247fa:	4689      	mov	r9, r1
 80247fc:	4620      	mov	r0, r4
 80247fe:	4629      	mov	r1, r5
 8024800:	f7db ff0e 	bl	8000620 <__aeabi_dmul>
 8024804:	4602      	mov	r2, r0
 8024806:	460b      	mov	r3, r1
 8024808:	4640      	mov	r0, r8
 802480a:	4649      	mov	r1, r9
 802480c:	f7db fd56 	bl	80002bc <__adddf3>
 8024810:	4604      	mov	r4, r0
 8024812:	460d      	mov	r5, r1
 8024814:	4602      	mov	r2, r0
 8024816:	460b      	mov	r3, r1
 8024818:	4630      	mov	r0, r6
 802481a:	4639      	mov	r1, r7
 802481c:	f7db fd4e 	bl	80002bc <__adddf3>
 8024820:	4632      	mov	r2, r6
 8024822:	463b      	mov	r3, r7
 8024824:	4680      	mov	r8, r0
 8024826:	4689      	mov	r9, r1
 8024828:	f7db fd46 	bl	80002b8 <__aeabi_dsub>
 802482c:	4602      	mov	r2, r0
 802482e:	460b      	mov	r3, r1
 8024830:	4620      	mov	r0, r4
 8024832:	4629      	mov	r1, r5
 8024834:	f7db fd40 	bl	80002b8 <__aeabi_dsub>
 8024838:	4642      	mov	r2, r8
 802483a:	4606      	mov	r6, r0
 802483c:	460f      	mov	r7, r1
 802483e:	464b      	mov	r3, r9
 8024840:	4640      	mov	r0, r8
 8024842:	4649      	mov	r1, r9
 8024844:	f7db feec 	bl	8000620 <__aeabi_dmul>
 8024848:	a35d      	add	r3, pc, #372	; (adr r3, 80249c0 <__ieee754_pow+0x9d8>)
 802484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802484e:	4604      	mov	r4, r0
 8024850:	460d      	mov	r5, r1
 8024852:	f7db fee5 	bl	8000620 <__aeabi_dmul>
 8024856:	a35c      	add	r3, pc, #368	; (adr r3, 80249c8 <__ieee754_pow+0x9e0>)
 8024858:	e9d3 2300 	ldrd	r2, r3, [r3]
 802485c:	f7db fd2c 	bl	80002b8 <__aeabi_dsub>
 8024860:	4622      	mov	r2, r4
 8024862:	462b      	mov	r3, r5
 8024864:	f7db fedc 	bl	8000620 <__aeabi_dmul>
 8024868:	a359      	add	r3, pc, #356	; (adr r3, 80249d0 <__ieee754_pow+0x9e8>)
 802486a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802486e:	f7db fd25 	bl	80002bc <__adddf3>
 8024872:	4622      	mov	r2, r4
 8024874:	462b      	mov	r3, r5
 8024876:	f7db fed3 	bl	8000620 <__aeabi_dmul>
 802487a:	a357      	add	r3, pc, #348	; (adr r3, 80249d8 <__ieee754_pow+0x9f0>)
 802487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024880:	f7db fd1a 	bl	80002b8 <__aeabi_dsub>
 8024884:	4622      	mov	r2, r4
 8024886:	462b      	mov	r3, r5
 8024888:	f7db feca 	bl	8000620 <__aeabi_dmul>
 802488c:	a354      	add	r3, pc, #336	; (adr r3, 80249e0 <__ieee754_pow+0x9f8>)
 802488e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024892:	f7db fd13 	bl	80002bc <__adddf3>
 8024896:	4622      	mov	r2, r4
 8024898:	462b      	mov	r3, r5
 802489a:	f7db fec1 	bl	8000620 <__aeabi_dmul>
 802489e:	4602      	mov	r2, r0
 80248a0:	460b      	mov	r3, r1
 80248a2:	4640      	mov	r0, r8
 80248a4:	4649      	mov	r1, r9
 80248a6:	f7db fd07 	bl	80002b8 <__aeabi_dsub>
 80248aa:	4604      	mov	r4, r0
 80248ac:	460d      	mov	r5, r1
 80248ae:	4602      	mov	r2, r0
 80248b0:	460b      	mov	r3, r1
 80248b2:	4640      	mov	r0, r8
 80248b4:	4649      	mov	r1, r9
 80248b6:	f7db feb3 	bl	8000620 <__aeabi_dmul>
 80248ba:	2200      	movs	r2, #0
 80248bc:	e9cd 0100 	strd	r0, r1, [sp]
 80248c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80248c4:	4620      	mov	r0, r4
 80248c6:	4629      	mov	r1, r5
 80248c8:	f7db fcf6 	bl	80002b8 <__aeabi_dsub>
 80248cc:	4602      	mov	r2, r0
 80248ce:	460b      	mov	r3, r1
 80248d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80248d4:	f7db ffce 	bl	8000874 <__aeabi_ddiv>
 80248d8:	4632      	mov	r2, r6
 80248da:	4604      	mov	r4, r0
 80248dc:	460d      	mov	r5, r1
 80248de:	463b      	mov	r3, r7
 80248e0:	4640      	mov	r0, r8
 80248e2:	4649      	mov	r1, r9
 80248e4:	f7db fe9c 	bl	8000620 <__aeabi_dmul>
 80248e8:	4632      	mov	r2, r6
 80248ea:	463b      	mov	r3, r7
 80248ec:	f7db fce6 	bl	80002bc <__adddf3>
 80248f0:	4602      	mov	r2, r0
 80248f2:	460b      	mov	r3, r1
 80248f4:	4620      	mov	r0, r4
 80248f6:	4629      	mov	r1, r5
 80248f8:	f7db fcde 	bl	80002b8 <__aeabi_dsub>
 80248fc:	4642      	mov	r2, r8
 80248fe:	464b      	mov	r3, r9
 8024900:	f7db fcda 	bl	80002b8 <__aeabi_dsub>
 8024904:	4602      	mov	r2, r0
 8024906:	460b      	mov	r3, r1
 8024908:	2000      	movs	r0, #0
 802490a:	493b      	ldr	r1, [pc, #236]	; (80249f8 <__ieee754_pow+0xa10>)
 802490c:	f7db fcd4 	bl	80002b8 <__aeabi_dsub>
 8024910:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8024914:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8024918:	4602      	mov	r2, r0
 802491a:	460b      	mov	r3, r1
 802491c:	da31      	bge.n	8024982 <__ieee754_pow+0x99a>
 802491e:	4650      	mov	r0, sl
 8024920:	ec43 2b10 	vmov	d0, r2, r3
 8024924:	f000 fa0c 	bl	8024d40 <scalbn>
 8024928:	ec51 0b10 	vmov	r0, r1, d0
 802492c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8024930:	f7ff bbf1 	b.w	8024116 <__ieee754_pow+0x12e>
 8024934:	4b31      	ldr	r3, [pc, #196]	; (80249fc <__ieee754_pow+0xa14>)
 8024936:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802493a:	429e      	cmp	r6, r3
 802493c:	f77f af0c 	ble.w	8024758 <__ieee754_pow+0x770>
 8024940:	4b2f      	ldr	r3, [pc, #188]	; (8024a00 <__ieee754_pow+0xa18>)
 8024942:	440b      	add	r3, r1
 8024944:	4303      	orrs	r3, r0
 8024946:	d00b      	beq.n	8024960 <__ieee754_pow+0x978>
 8024948:	a327      	add	r3, pc, #156	; (adr r3, 80249e8 <__ieee754_pow+0xa00>)
 802494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802494e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8024952:	f7db fe65 	bl	8000620 <__aeabi_dmul>
 8024956:	a324      	add	r3, pc, #144	; (adr r3, 80249e8 <__ieee754_pow+0xa00>)
 8024958:	e9d3 2300 	ldrd	r2, r3, [r3]
 802495c:	f7ff bbdb 	b.w	8024116 <__ieee754_pow+0x12e>
 8024960:	4622      	mov	r2, r4
 8024962:	462b      	mov	r3, r5
 8024964:	f7db fca8 	bl	80002b8 <__aeabi_dsub>
 8024968:	4602      	mov	r2, r0
 802496a:	460b      	mov	r3, r1
 802496c:	4640      	mov	r0, r8
 802496e:	4649      	mov	r1, r9
 8024970:	f7dc f8d2 	bl	8000b18 <__aeabi_dcmple>
 8024974:	2800      	cmp	r0, #0
 8024976:	f43f aeef 	beq.w	8024758 <__ieee754_pow+0x770>
 802497a:	e7e5      	b.n	8024948 <__ieee754_pow+0x960>
 802497c:	f04f 0a00 	mov.w	sl, #0
 8024980:	e716      	b.n	80247b0 <__ieee754_pow+0x7c8>
 8024982:	4621      	mov	r1, r4
 8024984:	e7d2      	b.n	802492c <__ieee754_pow+0x944>
 8024986:	2000      	movs	r0, #0
 8024988:	491b      	ldr	r1, [pc, #108]	; (80249f8 <__ieee754_pow+0xa10>)
 802498a:	f7ff bb8d 	b.w	80240a8 <__ieee754_pow+0xc0>
 802498e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024992:	f7ff bb89 	b.w	80240a8 <__ieee754_pow+0xc0>
 8024996:	4630      	mov	r0, r6
 8024998:	4639      	mov	r1, r7
 802499a:	f7ff bb85 	b.w	80240a8 <__ieee754_pow+0xc0>
 802499e:	4693      	mov	fp, r2
 80249a0:	f7ff bb96 	b.w	80240d0 <__ieee754_pow+0xe8>
 80249a4:	f3af 8000 	nop.w
 80249a8:	00000000 	.word	0x00000000
 80249ac:	3fe62e43 	.word	0x3fe62e43
 80249b0:	fefa39ef 	.word	0xfefa39ef
 80249b4:	3fe62e42 	.word	0x3fe62e42
 80249b8:	0ca86c39 	.word	0x0ca86c39
 80249bc:	be205c61 	.word	0xbe205c61
 80249c0:	72bea4d0 	.word	0x72bea4d0
 80249c4:	3e663769 	.word	0x3e663769
 80249c8:	c5d26bf1 	.word	0xc5d26bf1
 80249cc:	3ebbbd41 	.word	0x3ebbbd41
 80249d0:	af25de2c 	.word	0xaf25de2c
 80249d4:	3f11566a 	.word	0x3f11566a
 80249d8:	16bebd93 	.word	0x16bebd93
 80249dc:	3f66c16c 	.word	0x3f66c16c
 80249e0:	5555553e 	.word	0x5555553e
 80249e4:	3fc55555 	.word	0x3fc55555
 80249e8:	c2f8f359 	.word	0xc2f8f359
 80249ec:	01a56e1f 	.word	0x01a56e1f
 80249f0:	3fe00000 	.word	0x3fe00000
 80249f4:	000fffff 	.word	0x000fffff
 80249f8:	3ff00000 	.word	0x3ff00000
 80249fc:	4090cbff 	.word	0x4090cbff
 8024a00:	3f6f3400 	.word	0x3f6f3400
 8024a04:	652b82fe 	.word	0x652b82fe
 8024a08:	3c971547 	.word	0x3c971547

08024a0c <__ieee754_sqrt>:
 8024a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024a10:	ec55 4b10 	vmov	r4, r5, d0
 8024a14:	4e54      	ldr	r6, [pc, #336]	; (8024b68 <__ieee754_sqrt+0x15c>)
 8024a16:	43ae      	bics	r6, r5
 8024a18:	ee10 0a10 	vmov	r0, s0
 8024a1c:	462b      	mov	r3, r5
 8024a1e:	462a      	mov	r2, r5
 8024a20:	4621      	mov	r1, r4
 8024a22:	d113      	bne.n	8024a4c <__ieee754_sqrt+0x40>
 8024a24:	ee10 2a10 	vmov	r2, s0
 8024a28:	462b      	mov	r3, r5
 8024a2a:	ee10 0a10 	vmov	r0, s0
 8024a2e:	4629      	mov	r1, r5
 8024a30:	f7db fdf6 	bl	8000620 <__aeabi_dmul>
 8024a34:	4602      	mov	r2, r0
 8024a36:	460b      	mov	r3, r1
 8024a38:	4620      	mov	r0, r4
 8024a3a:	4629      	mov	r1, r5
 8024a3c:	f7db fc3e 	bl	80002bc <__adddf3>
 8024a40:	4604      	mov	r4, r0
 8024a42:	460d      	mov	r5, r1
 8024a44:	ec45 4b10 	vmov	d0, r4, r5
 8024a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024a4c:	2d00      	cmp	r5, #0
 8024a4e:	dc10      	bgt.n	8024a72 <__ieee754_sqrt+0x66>
 8024a50:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8024a54:	4330      	orrs	r0, r6
 8024a56:	d0f5      	beq.n	8024a44 <__ieee754_sqrt+0x38>
 8024a58:	b15d      	cbz	r5, 8024a72 <__ieee754_sqrt+0x66>
 8024a5a:	ee10 2a10 	vmov	r2, s0
 8024a5e:	462b      	mov	r3, r5
 8024a60:	4620      	mov	r0, r4
 8024a62:	4629      	mov	r1, r5
 8024a64:	f7db fc28 	bl	80002b8 <__aeabi_dsub>
 8024a68:	4602      	mov	r2, r0
 8024a6a:	460b      	mov	r3, r1
 8024a6c:	f7db ff02 	bl	8000874 <__aeabi_ddiv>
 8024a70:	e7e6      	b.n	8024a40 <__ieee754_sqrt+0x34>
 8024a72:	151b      	asrs	r3, r3, #20
 8024a74:	d10c      	bne.n	8024a90 <__ieee754_sqrt+0x84>
 8024a76:	2a00      	cmp	r2, #0
 8024a78:	d06d      	beq.n	8024b56 <__ieee754_sqrt+0x14a>
 8024a7a:	2000      	movs	r0, #0
 8024a7c:	02d6      	lsls	r6, r2, #11
 8024a7e:	d56e      	bpl.n	8024b5e <__ieee754_sqrt+0x152>
 8024a80:	1e44      	subs	r4, r0, #1
 8024a82:	1b1b      	subs	r3, r3, r4
 8024a84:	f1c0 0420 	rsb	r4, r0, #32
 8024a88:	fa21 f404 	lsr.w	r4, r1, r4
 8024a8c:	4322      	orrs	r2, r4
 8024a8e:	4081      	lsls	r1, r0
 8024a90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8024a94:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8024a98:	07dd      	lsls	r5, r3, #31
 8024a9a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8024a9e:	bf42      	ittt	mi
 8024aa0:	0052      	lslmi	r2, r2, #1
 8024aa2:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8024aa6:	0049      	lslmi	r1, r1, #1
 8024aa8:	1058      	asrs	r0, r3, #1
 8024aaa:	2500      	movs	r5, #0
 8024aac:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8024ab0:	441a      	add	r2, r3
 8024ab2:	0049      	lsls	r1, r1, #1
 8024ab4:	2316      	movs	r3, #22
 8024ab6:	462c      	mov	r4, r5
 8024ab8:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8024abc:	19a7      	adds	r7, r4, r6
 8024abe:	4297      	cmp	r7, r2
 8024ac0:	bfde      	ittt	le
 8024ac2:	1bd2      	suble	r2, r2, r7
 8024ac4:	19bc      	addle	r4, r7, r6
 8024ac6:	19ad      	addle	r5, r5, r6
 8024ac8:	0052      	lsls	r2, r2, #1
 8024aca:	3b01      	subs	r3, #1
 8024acc:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8024ad0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8024ad4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024ad8:	d1f0      	bne.n	8024abc <__ieee754_sqrt+0xb0>
 8024ada:	f04f 0e20 	mov.w	lr, #32
 8024ade:	469c      	mov	ip, r3
 8024ae0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8024ae4:	42a2      	cmp	r2, r4
 8024ae6:	eb06 070c 	add.w	r7, r6, ip
 8024aea:	dc02      	bgt.n	8024af2 <__ieee754_sqrt+0xe6>
 8024aec:	d112      	bne.n	8024b14 <__ieee754_sqrt+0x108>
 8024aee:	428f      	cmp	r7, r1
 8024af0:	d810      	bhi.n	8024b14 <__ieee754_sqrt+0x108>
 8024af2:	2f00      	cmp	r7, #0
 8024af4:	eb07 0c06 	add.w	ip, r7, r6
 8024af8:	da34      	bge.n	8024b64 <__ieee754_sqrt+0x158>
 8024afa:	f1bc 0f00 	cmp.w	ip, #0
 8024afe:	db31      	blt.n	8024b64 <__ieee754_sqrt+0x158>
 8024b00:	f104 0801 	add.w	r8, r4, #1
 8024b04:	1b12      	subs	r2, r2, r4
 8024b06:	428f      	cmp	r7, r1
 8024b08:	bf88      	it	hi
 8024b0a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8024b0e:	1bc9      	subs	r1, r1, r7
 8024b10:	4433      	add	r3, r6
 8024b12:	4644      	mov	r4, r8
 8024b14:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8024b18:	f1be 0e01 	subs.w	lr, lr, #1
 8024b1c:	443a      	add	r2, r7
 8024b1e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024b22:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8024b26:	d1dd      	bne.n	8024ae4 <__ieee754_sqrt+0xd8>
 8024b28:	430a      	orrs	r2, r1
 8024b2a:	d006      	beq.n	8024b3a <__ieee754_sqrt+0x12e>
 8024b2c:	1c5c      	adds	r4, r3, #1
 8024b2e:	bf13      	iteet	ne
 8024b30:	3301      	addne	r3, #1
 8024b32:	3501      	addeq	r5, #1
 8024b34:	4673      	moveq	r3, lr
 8024b36:	f023 0301 	bicne.w	r3, r3, #1
 8024b3a:	106a      	asrs	r2, r5, #1
 8024b3c:	085b      	lsrs	r3, r3, #1
 8024b3e:	07e9      	lsls	r1, r5, #31
 8024b40:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8024b44:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8024b48:	bf48      	it	mi
 8024b4a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8024b4e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8024b52:	461c      	mov	r4, r3
 8024b54:	e776      	b.n	8024a44 <__ieee754_sqrt+0x38>
 8024b56:	0aca      	lsrs	r2, r1, #11
 8024b58:	3b15      	subs	r3, #21
 8024b5a:	0549      	lsls	r1, r1, #21
 8024b5c:	e78b      	b.n	8024a76 <__ieee754_sqrt+0x6a>
 8024b5e:	0052      	lsls	r2, r2, #1
 8024b60:	3001      	adds	r0, #1
 8024b62:	e78b      	b.n	8024a7c <__ieee754_sqrt+0x70>
 8024b64:	46a0      	mov	r8, r4
 8024b66:	e7cd      	b.n	8024b04 <__ieee754_sqrt+0xf8>
 8024b68:	7ff00000 	.word	0x7ff00000

08024b6c <__ieee754_sqrtf>:
 8024b6c:	ee10 2a10 	vmov	r2, s0
 8024b70:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8024b74:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8024b78:	b570      	push	{r4, r5, r6, lr}
 8024b7a:	d302      	bcc.n	8024b82 <__ieee754_sqrtf+0x16>
 8024b7c:	eea0 0a00 	vfma.f32	s0, s0, s0
 8024b80:	bd70      	pop	{r4, r5, r6, pc}
 8024b82:	b3b1      	cbz	r1, 8024bf2 <__ieee754_sqrtf+0x86>
 8024b84:	2a00      	cmp	r2, #0
 8024b86:	da04      	bge.n	8024b92 <__ieee754_sqrtf+0x26>
 8024b88:	ee70 7a40 	vsub.f32	s15, s0, s0
 8024b8c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8024b90:	bd70      	pop	{r4, r5, r6, pc}
 8024b92:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8024b96:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8024b9a:	d204      	bcs.n	8024ba6 <__ieee754_sqrtf+0x3a>
 8024b9c:	2100      	movs	r1, #0
 8024b9e:	0210      	lsls	r0, r2, #8
 8024ba0:	d528      	bpl.n	8024bf4 <__ieee754_sqrtf+0x88>
 8024ba2:	3901      	subs	r1, #1
 8024ba4:	1a5b      	subs	r3, r3, r1
 8024ba6:	3b7f      	subs	r3, #127	; 0x7f
 8024ba8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8024bac:	07d9      	lsls	r1, r3, #31
 8024bae:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8024bb2:	bf48      	it	mi
 8024bb4:	0052      	lslmi	r2, r2, #1
 8024bb6:	1059      	asrs	r1, r3, #1
 8024bb8:	2300      	movs	r3, #0
 8024bba:	0052      	lsls	r2, r2, #1
 8024bbc:	2419      	movs	r4, #25
 8024bbe:	461e      	mov	r6, r3
 8024bc0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8024bc4:	1835      	adds	r5, r6, r0
 8024bc6:	4295      	cmp	r5, r2
 8024bc8:	bfde      	ittt	le
 8024bca:	182e      	addle	r6, r5, r0
 8024bcc:	1b52      	suble	r2, r2, r5
 8024bce:	181b      	addle	r3, r3, r0
 8024bd0:	3c01      	subs	r4, #1
 8024bd2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024bd6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8024bda:	d1f3      	bne.n	8024bc4 <__ieee754_sqrtf+0x58>
 8024bdc:	b112      	cbz	r2, 8024be4 <__ieee754_sqrtf+0x78>
 8024bde:	3301      	adds	r3, #1
 8024be0:	f023 0301 	bic.w	r3, r3, #1
 8024be4:	105b      	asrs	r3, r3, #1
 8024be6:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8024bea:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8024bee:	ee00 3a10 	vmov	s0, r3
 8024bf2:	bd70      	pop	{r4, r5, r6, pc}
 8024bf4:	0052      	lsls	r2, r2, #1
 8024bf6:	3101      	adds	r1, #1
 8024bf8:	e7d1      	b.n	8024b9e <__ieee754_sqrtf+0x32>

08024bfa <fabs>:
 8024bfa:	ec53 2b10 	vmov	r2, r3, d0
 8024bfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024c02:	ec43 2b10 	vmov	d0, r2, r3
 8024c06:	4770      	bx	lr

08024c08 <finite>:
 8024c08:	ee10 3a90 	vmov	r3, s1
 8024c0c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8024c10:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8024c14:	0fc0      	lsrs	r0, r0, #31
 8024c16:	4770      	bx	lr

08024c18 <matherr>:
 8024c18:	2000      	movs	r0, #0
 8024c1a:	4770      	bx	lr
 8024c1c:	0000      	movs	r0, r0
	...

08024c20 <nan>:
 8024c20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8024c28 <nan+0x8>
 8024c24:	4770      	bx	lr
 8024c26:	bf00      	nop
 8024c28:	00000000 	.word	0x00000000
 8024c2c:	7ff80000 	.word	0x7ff80000

08024c30 <rint>:
 8024c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024c32:	ec51 0b10 	vmov	r0, r1, d0
 8024c36:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8024c3a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8024c3e:	2e13      	cmp	r6, #19
 8024c40:	ee10 7a10 	vmov	r7, s0
 8024c44:	460b      	mov	r3, r1
 8024c46:	4602      	mov	r2, r0
 8024c48:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8024c4c:	dc58      	bgt.n	8024d00 <rint+0xd0>
 8024c4e:	2e00      	cmp	r6, #0
 8024c50:	da2b      	bge.n	8024caa <rint+0x7a>
 8024c52:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8024c56:	4302      	orrs	r2, r0
 8024c58:	d023      	beq.n	8024ca2 <rint+0x72>
 8024c5a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8024c5e:	4302      	orrs	r2, r0
 8024c60:	4251      	negs	r1, r2
 8024c62:	4311      	orrs	r1, r2
 8024c64:	0b09      	lsrs	r1, r1, #12
 8024c66:	0c5b      	lsrs	r3, r3, #17
 8024c68:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8024c6c:	045b      	lsls	r3, r3, #17
 8024c6e:	ea41 0703 	orr.w	r7, r1, r3
 8024c72:	4b31      	ldr	r3, [pc, #196]	; (8024d38 <rint+0x108>)
 8024c74:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8024c78:	4639      	mov	r1, r7
 8024c7a:	e9d3 6700 	ldrd	r6, r7, [r3]
 8024c7e:	ee10 0a10 	vmov	r0, s0
 8024c82:	4632      	mov	r2, r6
 8024c84:	463b      	mov	r3, r7
 8024c86:	f7db fb19 	bl	80002bc <__adddf3>
 8024c8a:	e9cd 0100 	strd	r0, r1, [sp]
 8024c8e:	463b      	mov	r3, r7
 8024c90:	4632      	mov	r2, r6
 8024c92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024c96:	f7db fb0f 	bl	80002b8 <__aeabi_dsub>
 8024c9a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024c9e:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8024ca2:	ec41 0b10 	vmov	d0, r0, r1
 8024ca6:	b003      	add	sp, #12
 8024ca8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024caa:	4c24      	ldr	r4, [pc, #144]	; (8024d3c <rint+0x10c>)
 8024cac:	4134      	asrs	r4, r6
 8024cae:	ea01 0704 	and.w	r7, r1, r4
 8024cb2:	4307      	orrs	r7, r0
 8024cb4:	d0f5      	beq.n	8024ca2 <rint+0x72>
 8024cb6:	0861      	lsrs	r1, r4, #1
 8024cb8:	ea03 0001 	and.w	r0, r3, r1
 8024cbc:	4302      	orrs	r2, r0
 8024cbe:	d00b      	beq.n	8024cd8 <rint+0xa8>
 8024cc0:	ea23 0101 	bic.w	r1, r3, r1
 8024cc4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8024cc8:	2e13      	cmp	r6, #19
 8024cca:	fa43 f306 	asr.w	r3, r3, r6
 8024cce:	bf0c      	ite	eq
 8024cd0:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8024cd4:	2200      	movne	r2, #0
 8024cd6:	430b      	orrs	r3, r1
 8024cd8:	4619      	mov	r1, r3
 8024cda:	4b17      	ldr	r3, [pc, #92]	; (8024d38 <rint+0x108>)
 8024cdc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8024ce0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8024ce4:	4610      	mov	r0, r2
 8024ce6:	462b      	mov	r3, r5
 8024ce8:	4622      	mov	r2, r4
 8024cea:	f7db fae7 	bl	80002bc <__adddf3>
 8024cee:	e9cd 0100 	strd	r0, r1, [sp]
 8024cf2:	4622      	mov	r2, r4
 8024cf4:	462b      	mov	r3, r5
 8024cf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8024cfa:	f7db fadd 	bl	80002b8 <__aeabi_dsub>
 8024cfe:	e7d0      	b.n	8024ca2 <rint+0x72>
 8024d00:	2e33      	cmp	r6, #51	; 0x33
 8024d02:	dd08      	ble.n	8024d16 <rint+0xe6>
 8024d04:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024d08:	d1cb      	bne.n	8024ca2 <rint+0x72>
 8024d0a:	ee10 2a10 	vmov	r2, s0
 8024d0e:	460b      	mov	r3, r1
 8024d10:	f7db fad4 	bl	80002bc <__adddf3>
 8024d14:	e7c5      	b.n	8024ca2 <rint+0x72>
 8024d16:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8024d1a:	f04f 34ff 	mov.w	r4, #4294967295
 8024d1e:	40f4      	lsrs	r4, r6
 8024d20:	4220      	tst	r0, r4
 8024d22:	d0be      	beq.n	8024ca2 <rint+0x72>
 8024d24:	0861      	lsrs	r1, r4, #1
 8024d26:	420f      	tst	r7, r1
 8024d28:	bf1f      	itttt	ne
 8024d2a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8024d2e:	ea27 0101 	bicne.w	r1, r7, r1
 8024d32:	4132      	asrne	r2, r6
 8024d34:	430a      	orrne	r2, r1
 8024d36:	e7cf      	b.n	8024cd8 <rint+0xa8>
 8024d38:	08032190 	.word	0x08032190
 8024d3c:	000fffff 	.word	0x000fffff

08024d40 <scalbn>:
 8024d40:	b570      	push	{r4, r5, r6, lr}
 8024d42:	ec55 4b10 	vmov	r4, r5, d0
 8024d46:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8024d4a:	4606      	mov	r6, r0
 8024d4c:	462b      	mov	r3, r5
 8024d4e:	b9b2      	cbnz	r2, 8024d7e <scalbn+0x3e>
 8024d50:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024d54:	4323      	orrs	r3, r4
 8024d56:	d03c      	beq.n	8024dd2 <scalbn+0x92>
 8024d58:	2200      	movs	r2, #0
 8024d5a:	4b33      	ldr	r3, [pc, #204]	; (8024e28 <scalbn+0xe8>)
 8024d5c:	4629      	mov	r1, r5
 8024d5e:	ee10 0a10 	vmov	r0, s0
 8024d62:	f7db fc5d 	bl	8000620 <__aeabi_dmul>
 8024d66:	4a31      	ldr	r2, [pc, #196]	; (8024e2c <scalbn+0xec>)
 8024d68:	4296      	cmp	r6, r2
 8024d6a:	4604      	mov	r4, r0
 8024d6c:	460d      	mov	r5, r1
 8024d6e:	460b      	mov	r3, r1
 8024d70:	da13      	bge.n	8024d9a <scalbn+0x5a>
 8024d72:	a329      	add	r3, pc, #164	; (adr r3, 8024e18 <scalbn+0xd8>)
 8024d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d78:	f7db fc52 	bl	8000620 <__aeabi_dmul>
 8024d7c:	e00a      	b.n	8024d94 <scalbn+0x54>
 8024d7e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8024d82:	428a      	cmp	r2, r1
 8024d84:	d10c      	bne.n	8024da0 <scalbn+0x60>
 8024d86:	ee10 2a10 	vmov	r2, s0
 8024d8a:	462b      	mov	r3, r5
 8024d8c:	4620      	mov	r0, r4
 8024d8e:	4629      	mov	r1, r5
 8024d90:	f7db fa94 	bl	80002bc <__adddf3>
 8024d94:	4604      	mov	r4, r0
 8024d96:	460d      	mov	r5, r1
 8024d98:	e01b      	b.n	8024dd2 <scalbn+0x92>
 8024d9a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024d9e:	3a36      	subs	r2, #54	; 0x36
 8024da0:	4432      	add	r2, r6
 8024da2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024da6:	428a      	cmp	r2, r1
 8024da8:	dd0b      	ble.n	8024dc2 <scalbn+0x82>
 8024daa:	ec45 4b11 	vmov	d1, r4, r5
 8024dae:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8024e20 <scalbn+0xe0>
 8024db2:	f000 f83f 	bl	8024e34 <copysign>
 8024db6:	a31a      	add	r3, pc, #104	; (adr r3, 8024e20 <scalbn+0xe0>)
 8024db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024dbc:	ec51 0b10 	vmov	r0, r1, d0
 8024dc0:	e7da      	b.n	8024d78 <scalbn+0x38>
 8024dc2:	2a00      	cmp	r2, #0
 8024dc4:	dd08      	ble.n	8024dd8 <scalbn+0x98>
 8024dc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024dca:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024dce:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024dd2:	ec45 4b10 	vmov	d0, r4, r5
 8024dd6:	bd70      	pop	{r4, r5, r6, pc}
 8024dd8:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024ddc:	da0d      	bge.n	8024dfa <scalbn+0xba>
 8024dde:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024de2:	429e      	cmp	r6, r3
 8024de4:	ec45 4b11 	vmov	d1, r4, r5
 8024de8:	dce1      	bgt.n	8024dae <scalbn+0x6e>
 8024dea:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8024e18 <scalbn+0xd8>
 8024dee:	f000 f821 	bl	8024e34 <copysign>
 8024df2:	a309      	add	r3, pc, #36	; (adr r3, 8024e18 <scalbn+0xd8>)
 8024df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024df8:	e7e0      	b.n	8024dbc <scalbn+0x7c>
 8024dfa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024dfe:	3236      	adds	r2, #54	; 0x36
 8024e00:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024e04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024e08:	4620      	mov	r0, r4
 8024e0a:	4629      	mov	r1, r5
 8024e0c:	2200      	movs	r2, #0
 8024e0e:	4b08      	ldr	r3, [pc, #32]	; (8024e30 <scalbn+0xf0>)
 8024e10:	e7b2      	b.n	8024d78 <scalbn+0x38>
 8024e12:	bf00      	nop
 8024e14:	f3af 8000 	nop.w
 8024e18:	c2f8f359 	.word	0xc2f8f359
 8024e1c:	01a56e1f 	.word	0x01a56e1f
 8024e20:	8800759c 	.word	0x8800759c
 8024e24:	7e37e43c 	.word	0x7e37e43c
 8024e28:	43500000 	.word	0x43500000
 8024e2c:	ffff3cb0 	.word	0xffff3cb0
 8024e30:	3c900000 	.word	0x3c900000

08024e34 <copysign>:
 8024e34:	ec53 2b10 	vmov	r2, r3, d0
 8024e38:	ee11 0a90 	vmov	r0, s3
 8024e3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8024e40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8024e44:	ea41 0300 	orr.w	r3, r1, r0
 8024e48:	ec43 2b10 	vmov	d0, r2, r3
 8024e4c:	4770      	bx	lr
	...

08024e50 <_init>:
 8024e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024e52:	bf00      	nop
 8024e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024e56:	bc08      	pop	{r3}
 8024e58:	469e      	mov	lr, r3
 8024e5a:	4770      	bx	lr

08024e5c <_fini>:
 8024e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024e5e:	bf00      	nop
 8024e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024e62:	bc08      	pop	{r3}
 8024e64:	469e      	mov	lr, r3
 8024e66:	4770      	bx	lr
