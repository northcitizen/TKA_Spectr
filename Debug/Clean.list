
Clean.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000241f8  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d0b8  080243b8  080243b8  000343b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08031470  08031470  00041470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08031478  08031478  00041478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0803147c  0803147c  0004147c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000b34  20000000  08031480  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00090c98  20000b38  08031fb4  00050b38  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  200917d0  08031fb4  000517d0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00050b34  2**0
                  CONTENTS, READONLY
 10 .debug_info   00077202  00000000  00000000  00050b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c0e2  00000000  00000000  000c7d66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0002bc96  00000000  00000000  000d3e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00002ef8  00000000  00000000  000ffae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00003f30  00000000  00000000  001029d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001e9ae  00000000  00000000  00106908  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000f178  00000000  00000000  001252b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0013442e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009e5c  00000000  00000000  001344ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000b38 	.word	0x20000b38
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080243a0 	.word	0x080243a0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000b3c 	.word	0x20000b3c
 80001fc:	080243a0 	.word	0x080243a0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f092 0f00 	teq	r2, #0
 800058a:	bf14      	ite	ne
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a0:	e720      	b.n	80003e4 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_ul2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	e00a      	b.n	80005ca <__aeabi_l2d+0x16>

080005b4 <__aeabi_l2d>:
 80005b4:	ea50 0201 	orrs.w	r2, r0, r1
 80005b8:	bf08      	it	eq
 80005ba:	4770      	bxeq	lr
 80005bc:	b530      	push	{r4, r5, lr}
 80005be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005c2:	d502      	bpl.n	80005ca <__aeabi_l2d+0x16>
 80005c4:	4240      	negs	r0, r0
 80005c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d6:	f43f aedc 	beq.w	8000392 <__adddf3+0xe6>
 80005da:	f04f 0203 	mov.w	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005f2:	f1c2 0320 	rsb	r3, r2, #32
 80005f6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 fe03 	lsl.w	lr, r1, r3
 8000602:	ea40 000e 	orr.w	r0, r0, lr
 8000606:	fa21 f102 	lsr.w	r1, r1, r2
 800060a:	4414      	add	r4, r2
 800060c:	e6c1      	b.n	8000392 <__adddf3+0xe6>
 800060e:	bf00      	nop

08000610 <__aeabi_dmul>:
 8000610:	b570      	push	{r4, r5, r6, lr}
 8000612:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000616:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800061a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061e:	bf1d      	ittte	ne
 8000620:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000624:	ea94 0f0c 	teqne	r4, ip
 8000628:	ea95 0f0c 	teqne	r5, ip
 800062c:	f000 f8de 	bleq	80007ec <__aeabi_dmul+0x1dc>
 8000630:	442c      	add	r4, r5
 8000632:	ea81 0603 	eor.w	r6, r1, r3
 8000636:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800063a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000642:	bf18      	it	ne
 8000644:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000648:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800064c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000650:	d038      	beq.n	80006c4 <__aeabi_dmul+0xb4>
 8000652:	fba0 ce02 	umull	ip, lr, r0, r2
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000662:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000666:	f04f 0600 	mov.w	r6, #0
 800066a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066e:	f09c 0f00 	teq	ip, #0
 8000672:	bf18      	it	ne
 8000674:	f04e 0e01 	orrne.w	lr, lr, #1
 8000678:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800067c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000680:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000684:	d204      	bcs.n	8000690 <__aeabi_dmul+0x80>
 8000686:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800068a:	416d      	adcs	r5, r5
 800068c:	eb46 0606 	adc.w	r6, r6, r6
 8000690:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000694:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000698:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800069c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a8:	bf88      	it	hi
 80006aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ae:	d81e      	bhi.n	80006ee <__aeabi_dmul+0xde>
 80006b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006b4:	bf08      	it	eq
 80006b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ba:	f150 0000 	adcs.w	r0, r0, #0
 80006be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c8:	ea46 0101 	orr.w	r1, r6, r1
 80006cc:	ea40 0002 	orr.w	r0, r0, r2
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d8:	bfc2      	ittt	gt
 80006da:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	popgt	{r4, r5, r6, pc}
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f04f 0e00 	mov.w	lr, #0
 80006ec:	3c01      	subs	r4, #1
 80006ee:	f300 80ab 	bgt.w	8000848 <__aeabi_dmul+0x238>
 80006f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006f6:	bfde      	ittt	le
 80006f8:	2000      	movle	r0, #0
 80006fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd70      	pople	{r4, r5, r6, pc}
 8000700:	f1c4 0400 	rsb	r4, r4, #0
 8000704:	3c20      	subs	r4, #32
 8000706:	da35      	bge.n	8000774 <__aeabi_dmul+0x164>
 8000708:	340c      	adds	r4, #12
 800070a:	dc1b      	bgt.n	8000744 <__aeabi_dmul+0x134>
 800070c:	f104 0414 	add.w	r4, r4, #20
 8000710:	f1c4 0520 	rsb	r5, r4, #32
 8000714:	fa00 f305 	lsl.w	r3, r0, r5
 8000718:	fa20 f004 	lsr.w	r0, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea40 0002 	orr.w	r0, r0, r2
 8000724:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800072c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000730:	fa21 f604 	lsr.w	r6, r1, r4
 8000734:	eb42 0106 	adc.w	r1, r2, r6
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 040c 	rsb	r4, r4, #12
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f304 	lsl.w	r3, r0, r4
 8000750:	fa20 f005 	lsr.w	r0, r0, r5
 8000754:	fa01 f204 	lsl.w	r2, r1, r4
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000764:	f141 0100 	adc.w	r1, r1, #0
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f205 	lsl.w	r2, r0, r5
 800077c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000780:	fa20 f304 	lsr.w	r3, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea43 0302 	orr.w	r3, r3, r2
 800078c:	fa21 f004 	lsr.w	r0, r1, r4
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	fa21 f204 	lsr.w	r2, r1, r4
 8000798:	ea20 0002 	bic.w	r0, r0, r2
 800079c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f094 0f00 	teq	r4, #0
 80007b0:	d10f      	bne.n	80007d2 <__aeabi_dmul+0x1c2>
 80007b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007b6:	0040      	lsls	r0, r0, #1
 80007b8:	eb41 0101 	adc.w	r1, r1, r1
 80007bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3c01      	subeq	r4, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1a6>
 80007c6:	ea41 0106 	orr.w	r1, r1, r6
 80007ca:	f095 0f00 	teq	r5, #0
 80007ce:	bf18      	it	ne
 80007d0:	4770      	bxne	lr
 80007d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	eb43 0303 	adc.w	r3, r3, r3
 80007dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3d01      	subeq	r5, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1c6>
 80007e6:	ea43 0306 	orr.w	r3, r3, r6
 80007ea:	4770      	bx	lr
 80007ec:	ea94 0f0c 	teq	r4, ip
 80007f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f4:	bf18      	it	ne
 80007f6:	ea95 0f0c 	teqne	r5, ip
 80007fa:	d00c      	beq.n	8000816 <__aeabi_dmul+0x206>
 80007fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000800:	bf18      	it	ne
 8000802:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000806:	d1d1      	bne.n	80007ac <__aeabi_dmul+0x19c>
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000810:	f04f 0000 	mov.w	r0, #0
 8000814:	bd70      	pop	{r4, r5, r6, pc}
 8000816:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081a:	bf06      	itte	eq
 800081c:	4610      	moveq	r0, r2
 800081e:	4619      	moveq	r1, r3
 8000820:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000824:	d019      	beq.n	800085a <__aeabi_dmul+0x24a>
 8000826:	ea94 0f0c 	teq	r4, ip
 800082a:	d102      	bne.n	8000832 <__aeabi_dmul+0x222>
 800082c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000830:	d113      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000832:	ea95 0f0c 	teq	r5, ip
 8000836:	d105      	bne.n	8000844 <__aeabi_dmul+0x234>
 8000838:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800083c:	bf1c      	itt	ne
 800083e:	4610      	movne	r0, r2
 8000840:	4619      	movne	r1, r3
 8000842:	d10a      	bne.n	800085a <__aeabi_dmul+0x24a>
 8000844:	ea81 0103 	eor.w	r1, r1, r3
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000850:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000854:	f04f 0000 	mov.w	r0, #0
 8000858:	bd70      	pop	{r4, r5, r6, pc}
 800085a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800085e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000862:	bd70      	pop	{r4, r5, r6, pc}

08000864 <__aeabi_ddiv>:
 8000864:	b570      	push	{r4, r5, r6, lr}
 8000866:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800086a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000872:	bf1d      	ittte	ne
 8000874:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000878:	ea94 0f0c 	teqne	r4, ip
 800087c:	ea95 0f0c 	teqne	r5, ip
 8000880:	f000 f8a7 	bleq	80009d2 <__aeabi_ddiv+0x16e>
 8000884:	eba4 0405 	sub.w	r4, r4, r5
 8000888:	ea81 0e03 	eor.w	lr, r1, r3
 800088c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000894:	f000 8088 	beq.w	80009a8 <__aeabi_ddiv+0x144>
 8000898:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800089c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008bc:	429d      	cmp	r5, r3
 80008be:	bf08      	it	eq
 80008c0:	4296      	cmpeq	r6, r2
 80008c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ca:	d202      	bcs.n	80008d2 <__aeabi_ddiv+0x6e>
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d2:	1ab6      	subs	r6, r6, r2
 80008d4:	eb65 0503 	sbc.w	r5, r5, r3
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000940:	ea55 0e06 	orrs.w	lr, r5, r6
 8000944:	d018      	beq.n	8000978 <__aeabi_ddiv+0x114>
 8000946:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800094a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000952:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000956:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800095a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000962:	d1c0      	bne.n	80008e6 <__aeabi_ddiv+0x82>
 8000964:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000968:	d10b      	bne.n	8000982 <__aeabi_ddiv+0x11e>
 800096a:	ea41 0100 	orr.w	r1, r1, r0
 800096e:	f04f 0000 	mov.w	r0, #0
 8000972:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000976:	e7b6      	b.n	80008e6 <__aeabi_ddiv+0x82>
 8000978:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800097c:	bf04      	itt	eq
 800097e:	4301      	orreq	r1, r0
 8000980:	2000      	moveq	r0, #0
 8000982:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000986:	bf88      	it	hi
 8000988:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800098c:	f63f aeaf 	bhi.w	80006ee <__aeabi_dmul+0xde>
 8000990:	ebb5 0c03 	subs.w	ip, r5, r3
 8000994:	bf04      	itt	eq
 8000996:	ebb6 0c02 	subseq.w	ip, r6, r2
 800099a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099e:	f150 0000 	adcs.w	r0, r0, #0
 80009a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	pop	{r4, r5, r6, pc}
 80009a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b4:	bfc2      	ittt	gt
 80009b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009be:	bd70      	popgt	{r4, r5, r6, pc}
 80009c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009c4:	f04f 0e00 	mov.w	lr, #0
 80009c8:	3c01      	subs	r4, #1
 80009ca:	e690      	b.n	80006ee <__aeabi_dmul+0xde>
 80009cc:	ea45 0e06 	orr.w	lr, r5, r6
 80009d0:	e68d      	b.n	80006ee <__aeabi_dmul+0xde>
 80009d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d6:	ea94 0f0c 	teq	r4, ip
 80009da:	bf08      	it	eq
 80009dc:	ea95 0f0c 	teqeq	r5, ip
 80009e0:	f43f af3b 	beq.w	800085a <__aeabi_dmul+0x24a>
 80009e4:	ea94 0f0c 	teq	r4, ip
 80009e8:	d10a      	bne.n	8000a00 <__aeabi_ddiv+0x19c>
 80009ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ee:	f47f af34 	bne.w	800085a <__aeabi_dmul+0x24a>
 80009f2:	ea95 0f0c 	teq	r5, ip
 80009f6:	f47f af25 	bne.w	8000844 <__aeabi_dmul+0x234>
 80009fa:	4610      	mov	r0, r2
 80009fc:	4619      	mov	r1, r3
 80009fe:	e72c      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a00:	ea95 0f0c 	teq	r5, ip
 8000a04:	d106      	bne.n	8000a14 <__aeabi_ddiv+0x1b0>
 8000a06:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a0a:	f43f aefd 	beq.w	8000808 <__aeabi_dmul+0x1f8>
 8000a0e:	4610      	mov	r0, r2
 8000a10:	4619      	mov	r1, r3
 8000a12:	e722      	b.n	800085a <__aeabi_dmul+0x24a>
 8000a14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a18:	bf18      	it	ne
 8000a1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1e:	f47f aec5 	bne.w	80007ac <__aeabi_dmul+0x19c>
 8000a22:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a26:	f47f af0d 	bne.w	8000844 <__aeabi_dmul+0x234>
 8000a2a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2e:	f47f aeeb 	bne.w	8000808 <__aeabi_dmul+0x1f8>
 8000a32:	e712      	b.n	800085a <__aeabi_dmul+0x24a>

08000a34 <__gedf2>:
 8000a34:	f04f 3cff 	mov.w	ip, #4294967295
 8000a38:	e006      	b.n	8000a48 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__ledf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	e002      	b.n	8000a48 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__cmpdf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5e:	d01b      	beq.n	8000a98 <__cmpdf2+0x54>
 8000a60:	b001      	add	sp, #4
 8000a62:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a66:	bf0c      	ite	eq
 8000a68:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a6c:	ea91 0f03 	teqne	r1, r3
 8000a70:	bf02      	ittt	eq
 8000a72:	ea90 0f02 	teqeq	r0, r2
 8000a76:	2000      	moveq	r0, #0
 8000a78:	4770      	bxeq	lr
 8000a7a:	f110 0f00 	cmn.w	r0, #0
 8000a7e:	ea91 0f03 	teq	r1, r3
 8000a82:	bf58      	it	pl
 8000a84:	4299      	cmppl	r1, r3
 8000a86:	bf08      	it	eq
 8000a88:	4290      	cmpeq	r0, r2
 8000a8a:	bf2c      	ite	cs
 8000a8c:	17d8      	asrcs	r0, r3, #31
 8000a8e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a92:	f040 0001 	orr.w	r0, r0, #1
 8000a96:	4770      	bx	lr
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__cmpdf2+0x64>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d107      	bne.n	8000ab8 <__cmpdf2+0x74>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d1d6      	bne.n	8000a60 <__cmpdf2+0x1c>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d0d3      	beq.n	8000a60 <__cmpdf2+0x1c>
 8000ab8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdrcmple>:
 8000ac0:	4684      	mov	ip, r0
 8000ac2:	4610      	mov	r0, r2
 8000ac4:	4662      	mov	r2, ip
 8000ac6:	468c      	mov	ip, r1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4663      	mov	r3, ip
 8000acc:	e000      	b.n	8000ad0 <__aeabi_cdcmpeq>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_cdcmpeq>:
 8000ad0:	b501      	push	{r0, lr}
 8000ad2:	f7ff ffb7 	bl	8000a44 <__cmpdf2>
 8000ad6:	2800      	cmp	r0, #0
 8000ad8:	bf48      	it	mi
 8000ada:	f110 0f00 	cmnmi.w	r0, #0
 8000ade:	bd01      	pop	{r0, pc}

08000ae0 <__aeabi_dcmpeq>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff fff4 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000ae8:	bf0c      	ite	eq
 8000aea:	2001      	moveq	r0, #1
 8000aec:	2000      	movne	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmplt>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffea 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000afc:	bf34      	ite	cc
 8000afe:	2001      	movcc	r0, #1
 8000b00:	2000      	movcs	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmple>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffe0 	bl	8000ad0 <__aeabi_cdcmpeq>
 8000b10:	bf94      	ite	ls
 8000b12:	2001      	movls	r0, #1
 8000b14:	2000      	movhi	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpge>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffce 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b24:	bf94      	ite	ls
 8000b26:	2001      	movls	r0, #1
 8000b28:	2000      	movhi	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmpgt>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffc4 	bl	8000ac0 <__aeabi_cdrcmple>
 8000b38:	bf34      	ite	cc
 8000b3a:	2001      	movcc	r0, #1
 8000b3c:	2000      	movcs	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpun>:
 8000b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x10>
 8000b4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b52:	d10a      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b5c:	d102      	bne.n	8000b64 <__aeabi_dcmpun+0x20>
 8000b5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_dcmpun+0x26>
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0001 	mov.w	r0, #1
 8000b6e:	4770      	bx	lr

08000b70 <__aeabi_d2iz>:
 8000b70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b78:	d215      	bcs.n	8000ba6 <__aeabi_d2iz+0x36>
 8000b7a:	d511      	bpl.n	8000ba0 <__aeabi_d2iz+0x30>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d912      	bls.n	8000bac <__aeabi_d2iz+0x3c>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b96:	fa23 f002 	lsr.w	r0, r3, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000baa:	d105      	bne.n	8000bb8 <__aeabi_d2iz+0x48>
 8000bac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb0:	bf08      	it	eq
 8000bb2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_d2uiz>:
 8000bc0:	004a      	lsls	r2, r1, #1
 8000bc2:	d211      	bcs.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc8:	d211      	bcs.n	8000bee <__aeabi_d2uiz+0x2e>
 8000bca:	d50d      	bpl.n	8000be8 <__aeabi_d2uiz+0x28>
 8000bcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd4:	d40e      	bmi.n	8000bf4 <__aeabi_d2uiz+0x34>
 8000bd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000be2:	fa23 f002 	lsr.w	r0, r3, r2
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d102      	bne.n	8000bfa <__aeabi_d2uiz+0x3a>
 8000bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf8:	4770      	bx	lr
 8000bfa:	f04f 0000 	mov.w	r0, #0
 8000bfe:	4770      	bx	lr

08000c00 <__aeabi_d2f>:
 8000c00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c08:	bf24      	itt	cs
 8000c0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c12:	d90d      	bls.n	8000c30 <__aeabi_d2f+0x30>
 8000c14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c28:	bf08      	it	eq
 8000c2a:	f020 0001 	biceq.w	r0, r0, #1
 8000c2e:	4770      	bx	lr
 8000c30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c34:	d121      	bne.n	8000c7a <__aeabi_d2f+0x7a>
 8000c36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c3a:	bfbc      	itt	lt
 8000c3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	4770      	bxlt	lr
 8000c42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c4a:	f1c2 0218 	rsb	r2, r2, #24
 8000c4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c56:	fa20 f002 	lsr.w	r0, r0, r2
 8000c5a:	bf18      	it	ne
 8000c5c:	f040 0001 	orrne.w	r0, r0, #1
 8000c60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c6c:	ea40 000c 	orr.w	r0, r0, ip
 8000c70:	fa23 f302 	lsr.w	r3, r3, r2
 8000c74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c78:	e7cc      	b.n	8000c14 <__aeabi_d2f+0x14>
 8000c7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7e:	d107      	bne.n	8000c90 <__aeabi_d2f+0x90>
 8000c80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c84:	bf1e      	ittt	ne
 8000c86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8e:	4770      	bxne	lr
 8000c90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_uldivmod>:
 8000ca0:	b953      	cbnz	r3, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca2:	b94a      	cbnz	r2, 8000cb8 <__aeabi_uldivmod+0x18>
 8000ca4:	2900      	cmp	r1, #0
 8000ca6:	bf08      	it	eq
 8000ca8:	2800      	cmpeq	r0, #0
 8000caa:	bf1c      	itt	ne
 8000cac:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb4:	f000 b97a 	b.w	8000fac <__aeabi_idiv0>
 8000cb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc0:	f000 f806 	bl	8000cd0 <__udivmoddi4>
 8000cc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ccc:	b004      	add	sp, #16
 8000cce:	4770      	bx	lr

08000cd0 <__udivmoddi4>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	468c      	mov	ip, r1
 8000cd6:	460d      	mov	r5, r1
 8000cd8:	4604      	mov	r4, r0
 8000cda:	9e08      	ldr	r6, [sp, #32]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d151      	bne.n	8000d84 <__udivmoddi4+0xb4>
 8000ce0:	428a      	cmp	r2, r1
 8000ce2:	4617      	mov	r7, r2
 8000ce4:	d96d      	bls.n	8000dc2 <__udivmoddi4+0xf2>
 8000ce6:	fab2 fe82 	clz	lr, r2
 8000cea:	f1be 0f00 	cmp.w	lr, #0
 8000cee:	d00b      	beq.n	8000d08 <__udivmoddi4+0x38>
 8000cf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000d00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000d04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000d0c:	0c25      	lsrs	r5, r4, #16
 8000d0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000d12:	fa1f f987 	uxth.w	r9, r7
 8000d16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d1e:	fb08 f309 	mul.w	r3, r8, r9
 8000d22:	42ab      	cmp	r3, r5
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x6c>
 8000d26:	19ed      	adds	r5, r5, r7
 8000d28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d2c:	f080 8123 	bcs.w	8000f76 <__udivmoddi4+0x2a6>
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	f240 8120 	bls.w	8000f76 <__udivmoddi4+0x2a6>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	443d      	add	r5, r7
 8000d3c:	1aed      	subs	r5, r5, r3
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d4c:	fb00 f909 	mul.w	r9, r0, r9
 8000d50:	45a1      	cmp	r9, r4
 8000d52:	d909      	bls.n	8000d68 <__udivmoddi4+0x98>
 8000d54:	19e4      	adds	r4, r4, r7
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	f080 810a 	bcs.w	8000f72 <__udivmoddi4+0x2a2>
 8000d5e:	45a1      	cmp	r9, r4
 8000d60:	f240 8107 	bls.w	8000f72 <__udivmoddi4+0x2a2>
 8000d64:	3802      	subs	r0, #2
 8000d66:	443c      	add	r4, r7
 8000d68:	eba4 0409 	sub.w	r4, r4, r9
 8000d6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d70:	2100      	movs	r1, #0
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d061      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000d76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	6034      	str	r4, [r6, #0]
 8000d7e:	6073      	str	r3, [r6, #4]
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d907      	bls.n	8000d98 <__udivmoddi4+0xc8>
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d054      	beq.n	8000e36 <__udivmoddi4+0x166>
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d92:	4608      	mov	r0, r1
 8000d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d98:	fab3 f183 	clz	r1, r3
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	f040 808e 	bne.w	8000ebe <__udivmoddi4+0x1ee>
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xdc>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80fa 	bhi.w	8000fa0 <__udivmoddi4+0x2d0>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb65 0503 	sbc.w	r5, r5, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	46ac      	mov	ip, r5
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	d03f      	beq.n	8000e3a <__udivmoddi4+0x16a>
 8000dba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	b912      	cbnz	r2, 8000dca <__udivmoddi4+0xfa>
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dca:	fab7 fe87 	clz	lr, r7
 8000dce:	f1be 0f00 	cmp.w	lr, #0
 8000dd2:	d134      	bne.n	8000e3e <__udivmoddi4+0x16e>
 8000dd4:	1beb      	subs	r3, r5, r7
 8000dd6:	0c3a      	lsrs	r2, r7, #16
 8000dd8:	fa1f fc87 	uxth.w	ip, r7
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000de2:	0c25      	lsrs	r5, r4, #16
 8000de4:	fb02 3318 	mls	r3, r2, r8, r3
 8000de8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dec:	fb0c f308 	mul.w	r3, ip, r8
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x134>
 8000df4:	19ed      	adds	r5, r5, r7
 8000df6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x132>
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	f200 80d1 	bhi.w	8000fa4 <__udivmoddi4+0x2d4>
 8000e02:	4680      	mov	r8, r0
 8000e04:	1aed      	subs	r5, r5, r3
 8000e06:	b2a3      	uxth	r3, r4
 8000e08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000e0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000e10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e14:	fb0c fc00 	mul.w	ip, ip, r0
 8000e18:	45a4      	cmp	ip, r4
 8000e1a:	d907      	bls.n	8000e2c <__udivmoddi4+0x15c>
 8000e1c:	19e4      	adds	r4, r4, r7
 8000e1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x15a>
 8000e24:	45a4      	cmp	ip, r4
 8000e26:	f200 80b8 	bhi.w	8000f9a <__udivmoddi4+0x2ca>
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	eba4 040c 	sub.w	r4, r4, ip
 8000e30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e34:	e79d      	b.n	8000d72 <__udivmoddi4+0xa2>
 8000e36:	4631      	mov	r1, r6
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3e:	f1ce 0420 	rsb	r4, lr, #32
 8000e42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e4e:	0c3a      	lsrs	r2, r7, #16
 8000e50:	fa25 f404 	lsr.w	r4, r5, r4
 8000e54:	ea48 0803 	orr.w	r8, r8, r3
 8000e58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e60:	fb02 4411 	mls	r4, r2, r1, r4
 8000e64:	fa1f fc87 	uxth.w	ip, r7
 8000e68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e70:	42ab      	cmp	r3, r5
 8000e72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e76:	d909      	bls.n	8000e8c <__udivmoddi4+0x1bc>
 8000e78:	19ed      	adds	r5, r5, r7
 8000e7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e7e:	f080 808a 	bcs.w	8000f96 <__udivmoddi4+0x2c6>
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	f240 8087 	bls.w	8000f96 <__udivmoddi4+0x2c6>
 8000e88:	3902      	subs	r1, #2
 8000e8a:	443d      	add	r5, r7
 8000e8c:	1aeb      	subs	r3, r5, r3
 8000e8e:	fa1f f588 	uxth.w	r5, r8
 8000e92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e96:	fb02 3310 	mls	r3, r2, r0, r3
 8000e9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000ea2:	42ab      	cmp	r3, r5
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x1e6>
 8000ea6:	19ed      	adds	r5, r5, r7
 8000ea8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eac:	d26f      	bcs.n	8000f8e <__udivmoddi4+0x2be>
 8000eae:	42ab      	cmp	r3, r5
 8000eb0:	d96d      	bls.n	8000f8e <__udivmoddi4+0x2be>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	443d      	add	r5, r7
 8000eb6:	1aeb      	subs	r3, r5, r3
 8000eb8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ebc:	e78f      	b.n	8000dde <__udivmoddi4+0x10e>
 8000ebe:	f1c1 0720 	rsb	r7, r1, #32
 8000ec2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ec6:	408b      	lsls	r3, r1
 8000ec8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ecc:	ea48 0303 	orr.w	r3, r8, r3
 8000ed0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ed4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ede:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ee2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ee6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eea:	fa1f f883 	uxth.w	r8, r3
 8000eee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ef2:	fb09 f408 	mul.w	r4, r9, r8
 8000ef6:	42ac      	cmp	r4, r5
 8000ef8:	fa02 f201 	lsl.w	r2, r2, r1
 8000efc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x244>
 8000f02:	18ed      	adds	r5, r5, r3
 8000f04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f08:	d243      	bcs.n	8000f92 <__udivmoddi4+0x2c2>
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	d941      	bls.n	8000f92 <__udivmoddi4+0x2c2>
 8000f0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f12:	441d      	add	r5, r3
 8000f14:	1b2d      	subs	r5, r5, r4
 8000f16:	fa1f fe8e 	uxth.w	lr, lr
 8000f1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f26:	fb00 f808 	mul.w	r8, r0, r8
 8000f2a:	45a0      	cmp	r8, r4
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x26e>
 8000f2e:	18e4      	adds	r4, r4, r3
 8000f30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f34:	d229      	bcs.n	8000f8a <__udivmoddi4+0x2ba>
 8000f36:	45a0      	cmp	r8, r4
 8000f38:	d927      	bls.n	8000f8a <__udivmoddi4+0x2ba>
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	441c      	add	r4, r3
 8000f3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f42:	eba4 0408 	sub.w	r4, r4, r8
 8000f46:	fba0 8902 	umull	r8, r9, r0, r2
 8000f4a:	454c      	cmp	r4, r9
 8000f4c:	46c6      	mov	lr, r8
 8000f4e:	464d      	mov	r5, r9
 8000f50:	d315      	bcc.n	8000f7e <__udivmoddi4+0x2ae>
 8000f52:	d012      	beq.n	8000f7a <__udivmoddi4+0x2aa>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x29c>
 8000f56:	ebba 030e 	subs.w	r3, sl, lr
 8000f5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40cb      	lsrs	r3, r1
 8000f64:	431f      	orrs	r7, r3
 8000f66:	40cc      	lsrs	r4, r1
 8000f68:	6037      	str	r7, [r6, #0]
 8000f6a:	6074      	str	r4, [r6, #4]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f72:	4618      	mov	r0, r3
 8000f74:	e6f8      	b.n	8000d68 <__udivmoddi4+0x98>
 8000f76:	4690      	mov	r8, r2
 8000f78:	e6e0      	b.n	8000d3c <__udivmoddi4+0x6c>
 8000f7a:	45c2      	cmp	sl, r8
 8000f7c:	d2ea      	bcs.n	8000f54 <__udivmoddi4+0x284>
 8000f7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f82:	eb69 0503 	sbc.w	r5, r9, r3
 8000f86:	3801      	subs	r0, #1
 8000f88:	e7e4      	b.n	8000f54 <__udivmoddi4+0x284>
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	e7d7      	b.n	8000f3e <__udivmoddi4+0x26e>
 8000f8e:	4640      	mov	r0, r8
 8000f90:	e791      	b.n	8000eb6 <__udivmoddi4+0x1e6>
 8000f92:	4681      	mov	r9, r0
 8000f94:	e7be      	b.n	8000f14 <__udivmoddi4+0x244>
 8000f96:	4601      	mov	r1, r0
 8000f98:	e778      	b.n	8000e8c <__udivmoddi4+0x1bc>
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	443c      	add	r4, r7
 8000f9e:	e745      	b.n	8000e2c <__udivmoddi4+0x15c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e708      	b.n	8000db6 <__udivmoddi4+0xe6>
 8000fa4:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa8:	443d      	add	r5, r7
 8000faa:	e72b      	b.n	8000e04 <__udivmoddi4+0x134>

08000fac <__aeabi_idiv0>:
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fb2:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_InitTick+0x2c>)
{
 8000fb4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fb6:	6818      	ldr	r0, [r3, #0]
 8000fb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fc0:	f000 fd34 	bl	8001a2c <HAL_SYSTICK_Config>
 8000fc4:	4604      	mov	r4, r0
 8000fc6:	b938      	cbnz	r0, 8000fd8 <HAL_InitTick+0x28>
    status = HAL_ERROR;
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000fc8:	4602      	mov	r2, r0
 8000fca:	4629      	mov	r1, r5
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 fcde 	bl	8001990 <HAL_NVIC_SetPriority>
 8000fd4:	4620      	mov	r0, r4
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8000fd8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8000fda:	bd38      	pop	{r3, r4, r5, pc}
 8000fdc:	20000a50 	.word	0x20000a50

08000fe0 <HAL_Init>:
{
 8000fe0:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f000 fcc2 	bl	800196c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe8:	2000      	movs	r0, #0
 8000fea:	f7ff ffe1 	bl	8000fb0 <HAL_InitTick>
 8000fee:	4604      	mov	r4, r0
 8000ff0:	b918      	cbnz	r0, 8000ffa <HAL_Init+0x1a>
    HAL_MspInit();
 8000ff2:	f020 f8c1 	bl	8021178 <HAL_MspInit>
}
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000ffa:	2401      	movs	r4, #1
 8000ffc:	e7fb      	b.n	8000ff6 <HAL_Init+0x16>
	...

08001000 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001000:	4a02      	ldr	r2, [pc, #8]	; (800100c <HAL_IncTick+0xc>)
 8001002:	6813      	ldr	r3, [r2, #0]
 8001004:	3301      	adds	r3, #1
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2008b8a0 	.word	0x2008b8a0

08001010 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001010:	4b01      	ldr	r3, [pc, #4]	; (8001018 <HAL_GetTick+0x8>)
 8001012:	6818      	ldr	r0, [r3, #0]
}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	2008b8a0 	.word	0x2008b8a0

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001020:	f7ff fff6 	bl	8001010 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001024:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001026:	4605      	mov	r5, r0
  {
    wait++;
 8001028:	bf18      	it	ne
 800102a:	3401      	addne	r4, #1
  }

  while((HAL_GetTick() - tickstart) < wait)
 800102c:	f7ff fff0 	bl	8001010 <HAL_GetTick>
 8001030:	1b40      	subs	r0, r0, r5
 8001032:	4284      	cmp	r4, r0
 8001034:	d8fa      	bhi.n	800102c <HAL_Delay+0x10>
  {
  }
}
 8001036:	bd38      	pop	{r3, r4, r5, pc}

08001038 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001038:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 800103e:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8001042:	fab6 f386 	clz	r3, r6
 8001046:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 800104a:	40de      	lsrs	r6, r3
 800104c:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 800104e:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8001052:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8001056:	fa93 f5a3 	rbit	r5, r3
 800105a:	fab5 f585 	clz	r5, r5
 800105e:	fa93 f3a3 	rbit	r3, r3
 8001062:	2407      	movs	r4, #7
 8001064:	fa21 f505 	lsr.w	r5, r1, r5
 8001068:	fa04 f505 	lsl.w	r5, r4, r5
 800106c:	fab3 f383 	clz	r3, r3
 8001070:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8001074:	40d9      	lsrs	r1, r3
 8001076:	ea24 0405 	bic.w	r4, r4, r5
 800107a:	fa02 f101 	lsl.w	r1, r2, r1
 800107e:	4321      	orrs	r1, r4
 8001080:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8001084:	bd70      	pop	{r4, r5, r6, pc}
	...

08001088 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001088:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800108e:	4604      	mov	r4, r0
 8001090:	2800      	cmp	r0, #0
 8001092:	f000 80b4 	beq.w	80011fe <HAL_ADC_Init+0x176>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001096:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001098:	b925      	cbnz	r5, 80010a4 <HAL_ADC_Init+0x1c>
  {
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800109a:	f020 f9b9 	bl	8021410 <HAL_ADC_MspInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800109e:	6625      	str	r5, [r4, #96]	; 0x60
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010a0:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 80010a4:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010aa:	bf41      	itttt	mi
 80010ac:	689a      	ldrmi	r2, [r3, #8]
 80010ae:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 80010b2:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 80010b6:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 80010b8:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010ba:	00d1      	lsls	r1, r2, #3
 80010bc:	d576      	bpl.n	80011ac <HAL_ADC_Init+0x124>
 80010be:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 80010c0:	00d2      	lsls	r2, r2, #3
 80010c2:	f140 808a 	bpl.w	80011da <HAL_ADC_Init+0x152>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c6:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010c8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010ca:	06d5      	lsls	r5, r2, #27
 80010cc:	f100 8093 	bmi.w	80011f6 <HAL_ADC_Init+0x16e>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80010d0:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010d2:	0751      	lsls	r1, r2, #29
 80010d4:	f100 808f 	bmi.w	80011f6 <HAL_ADC_Init+0x16e>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010d8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010da:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 80010de:	f042 0202 	orr.w	r2, r2, #2
 80010e2:	65e2      	str	r2, [r4, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	f002 0203 	and.w	r2, r2, #3
 80010ea:	2a01      	cmp	r2, #1
 80010ec:	f040 8089 	bne.w	8001202 <HAL_ADC_Init+0x17a>
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	07d2      	lsls	r2, r2, #31
 80010f4:	f140 8085 	bpl.w	8001202 <HAL_ADC_Init+0x17a>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 80010f8:	68e5      	ldr	r5, [r4, #12]
 80010fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 80010fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 80010fe:	432a      	orrs	r2, r5
 8001100:	68a5      	ldr	r5, [r4, #8]
 8001102:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8001104:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001106:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 8001108:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 800110c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001110:	bf02      	ittt	eq
 8001112:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 8001114:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001118:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800111c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800111e:	b121      	cbz	r1, 800112a <HAL_ADC_Init+0xa2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001120:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001122:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001126:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001128:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 800112a:	68dd      	ldr	r5, [r3, #12]
 800112c:	4939      	ldr	r1, [pc, #228]	; (8001214 <HAL_ADC_Init+0x18c>)
 800112e:	4029      	ands	r1, r5
 8001130:	430a      	orrs	r2, r1
 8001132:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	f012 0f0c 	tst.w	r2, #12
 800113a:	d120      	bne.n	800117e <HAL_ADC_Init+0xf6>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 800113c:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800113e:	69a5      	ldr	r5, [r4, #24]
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001140:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8001142:	0052      	lsls	r2, r2, #1
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8001144:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
 8001148:	6d25      	ldr	r5, [r4, #80]	; 0x50
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800114a:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 800114e:	432a      	orrs	r2, r5
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001150:	f021 0106 	bic.w	r1, r1, #6
 8001154:	430a      	orrs	r2, r1
 8001156:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8001158:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800115a:	2a01      	cmp	r2, #1
 800115c:	d147      	bne.n	80011ee <HAL_ADC_Init+0x166>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800115e:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8001160:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001162:	6919      	ldr	r1, [r3, #16]
 8001164:	432a      	orrs	r2, r5
 8001166:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001168:	f042 0201 	orr.w	r2, r2, #1
 800116c:	432a      	orrs	r2, r5
 800116e:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001170:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001174:	432a      	orrs	r2, r5
 8001176:	f021 0104 	bic.w	r1, r1, #4
 800117a:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800117c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800117e:	6922      	ldr	r2, [r4, #16]
 8001180:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001182:	bf05      	ittet	eq
 8001184:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001186:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001188:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800118a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800118e:	bf06      	itte	eq
 8001190:	f021 010f 	biceq.w	r1, r1, #15
 8001194:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001196:	f022 020f 	bicne.w	r2, r2, #15
 800119a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800119c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800119e:	f023 0303 	bic.w	r3, r3, #3
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80011a8:	b003      	add	sp, #12
 80011aa:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80011ac:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80011ae:	491a      	ldr	r1, [pc, #104]	; (8001218 <HAL_ADC_Init+0x190>)
 80011b0:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80011b4:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80011b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	4a17      	ldr	r2, [pc, #92]	; (800121c <HAL_ADC_Init+0x194>)
 80011c0:	6812      	ldr	r2, [r2, #0]
 80011c2:	fbb2 f1f1 	udiv	r1, r2, r1
 80011c6:	220a      	movs	r2, #10
 80011c8:	434a      	muls	r2, r1
      wait_loop_index--;
 80011ca:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80011cc:	9a01      	ldr	r2, [sp, #4]
 80011ce:	2a00      	cmp	r2, #0
 80011d0:	f43f af75 	beq.w	80010be <HAL_ADC_Init+0x36>
      wait_loop_index--;
 80011d4:	9a01      	ldr	r2, [sp, #4]
 80011d6:	3a01      	subs	r2, #1
 80011d8:	e7f7      	b.n	80011ca <HAL_ADC_Init+0x142>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011da:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80011dc:	f042 0210 	orr.w	r2, r2, #16
 80011e0:	65e2      	str	r2, [r4, #92]	; 0x5c
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011e2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80011e4:	f042 0201 	orr.w	r2, r2, #1
 80011e8:	6622      	str	r2, [r4, #96]	; 0x60
    tmp_hal_status = HAL_ERROR;
 80011ea:	2001      	movs	r0, #1
 80011ec:	e76c      	b.n	80010c8 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80011ee:	691a      	ldr	r2, [r3, #16]
 80011f0:	f022 0201 	bic.w	r2, r2, #1
 80011f4:	e7c2      	b.n	800117c <HAL_ADC_Init+0xf4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80011f8:	f043 0310 	orr.w	r3, r3, #16
 80011fc:	65e3      	str	r3, [r4, #92]	; 0x5c
    return HAL_ERROR;
 80011fe:	2001      	movs	r0, #1
 8001200:	e7d2      	b.n	80011a8 <HAL_ADC_Init+0x120>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001202:	4907      	ldr	r1, [pc, #28]	; (8001220 <HAL_ADC_Init+0x198>)
 8001204:	6865      	ldr	r5, [r4, #4]
 8001206:	688a      	ldr	r2, [r1, #8]
 8001208:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 800120c:	432a      	orrs	r2, r5
 800120e:	608a      	str	r2, [r1, #8]
 8001210:	e772      	b.n	80010f8 <HAL_ADC_Init+0x70>
 8001212:	bf00      	nop
 8001214:	fff0c007 	.word	0xfff0c007
 8001218:	001e8480 	.word	0x001e8480
 800121c:	20000a50 	.word	0x20000a50
 8001220:	50040300 	.word	0x50040300

08001224 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001226:	6945      	ldr	r5, [r0, #20]
 8001228:	2d08      	cmp	r5, #8
{
 800122a:	4604      	mov	r4, r0
 800122c:	460e      	mov	r6, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800122e:	d00a      	beq.n	8001246 <HAL_ADC_PollForConversion+0x22>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if(ADC_IS_DUAL_REGULAR_CONVERSION_ENABLE(hadc) == RESET)
    {
      /* Check ADC DMA mode in independant mode */
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != RESET)
 8001230:	6803      	ldr	r3, [r0, #0]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	07dd      	lsls	r5, r3, #31
 8001236:	d505      	bpl.n	8001244 <HAL_ADC_PollForConversion+0x20>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001238:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800123a:	f043 0320 	orr.w	r3, r3, #32
 800123e:	65c3      	str	r3, [r0, #92]	; 0x5c
        return HAL_ERROR;
 8001240:	2001      	movs	r0, #1
 8001242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001244:	2504      	movs	r5, #4
      }
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001246:	f7ff fee3 	bl	8001010 <HAL_GetTick>
 800124a:	4607      	mov	r7, r0
  
  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_End))
 800124c:	6823      	ldr	r3, [r4, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4215      	tst	r5, r2
 8001252:	d01d      	beq.n	8001290 <HAL_ADC_PollForConversion+0x6c>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001254:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800125a:	65e2      	str	r2, [r4, #92]	; 0x5c
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001262:	d10f      	bne.n	8001284 <HAL_ADC_PollForConversion+0x60>
 8001264:	69e2      	ldr	r2, [r4, #28]
 8001266:	b96a      	cbnz	r2, 8001284 <HAL_ADC_PollForConversion+0x60>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
  {
    /* Check whether end of sequence is reached */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	0711      	lsls	r1, r2, #28
 800126c:	d50a      	bpl.n	8001284 <HAL_ADC_PollForConversion+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800126e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001274:	65e2      	str	r2, [r4, #92]	; 0x5c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001276:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001278:	04d2      	lsls	r2, r2, #19
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800127a:	bf5e      	ittt	pl
 800127c:	6de2      	ldrpl	r2, [r4, #92]	; 0x5c
 800127e:	f042 0201 	orrpl.w	r2, r2, #1
 8001282:	65e2      	strpl	r2, [r4, #92]	; 0x5c
    tmpADC_Master = ADC_MASTER_REGISTER(hadc);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
  
  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001284:	2d08      	cmp	r5, #8
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);  
 8001286:	68d8      	ldr	r0, [r3, #12]
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001288:	d114      	bne.n	80012b4 <HAL_ADC_PollForConversion+0x90>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);  
 800128a:	601d      	str	r5, [r3, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800128c:	2000      	movs	r0, #0
}
 800128e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001290:	1c70      	adds	r0, r6, #1
 8001292:	d0dc      	beq.n	800124e <HAL_ADC_PollForConversion+0x2a>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8001294:	b946      	cbnz	r6, 80012a8 <HAL_ADC_PollForConversion+0x84>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001296:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 800129e:	2300      	movs	r3, #0
 80012a0:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_TIMEOUT;
 80012a4:	2003      	movs	r0, #3
 80012a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012a8:	f7ff feb2 	bl	8001010 <HAL_GetTick>
 80012ac:	1bc0      	subs	r0, r0, r7
 80012ae:	4286      	cmp	r6, r0
 80012b0:	d2cc      	bcs.n	800124c <HAL_ADC_PollForConversion+0x28>
 80012b2:	e7f0      	b.n	8001296 <HAL_ADC_PollForConversion+0x72>
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80012b4:	f410 4080 	ands.w	r0, r0, #16384	; 0x4000
 80012b8:	d1e8      	bne.n	800128c <HAL_ADC_PollForConversion+0x68>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80012ba:	220c      	movs	r2, #12
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012c0 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80012c0:	6803      	ldr	r3, [r0, #0]
 80012c2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80012c4:	4770      	bx	lr
	...

080012c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	9301      	str	r3, [sp, #4]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ce:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80012d2:	2b01      	cmp	r3, #1
{
 80012d4:	4605      	mov	r5, r0
 80012d6:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80012d8:	f000 8168 	beq.w	80015ac <HAL_ADC_ConfigChannel+0x2e4>
 80012dc:	2301      	movs	r3, #1
 80012de:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012e2:	6800      	ldr	r0, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80012e4:	6882      	ldr	r2, [r0, #8]
 80012e6:	0757      	lsls	r7, r2, #29
 80012e8:	f100 815a 	bmi.w	80015a0 <HAL_ADC_ConfigChannel+0x2d8>
    /* Correspondance for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondance can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80012ec:	684b      	ldr	r3, [r1, #4]
 80012ee:	2b05      	cmp	r3, #5
 80012f0:	d808      	bhi.n	8001304 <HAL_ADC_ConfigChannel+0x3c>
    {
      switch (sConfig->Rank)
 80012f2:	3b02      	subs	r3, #2
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d864      	bhi.n	80013c2 <HAL_ADC_ConfigChannel+0xfa>
 80012f8:	e8df f003 	tbb	[pc, r3]
 80012fc:	605e5c02 	.word	0x605e5c02
      {
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 8001300:	230c      	movs	r3, #12
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
        /* case 1U */
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 8001302:	6063      	str	r3, [r4, #4]
      }
    }
    #endif
    
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001304:	6861      	ldr	r1, [r4, #4]
 8001306:	f44f 7340 	mov.w	r3, #768	; 0x300
 800130a:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	f401 7640 	and.w	r6, r1, #768	; 0x300
 8001316:	40de      	lsrs	r6, r3
 8001318:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 800131c:	f001 011f 	and.w	r1, r1, #31
 8001320:	231f      	movs	r3, #31
 8001322:	fa03 f201 	lsl.w	r2, r3, r1
 8001326:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 800132a:	ea23 0302 	bic.w	r3, r3, r2
 800132e:	6822      	ldr	r2, [r4, #0]
 8001330:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001334:	408a      	lsls	r2, r1
 8001336:	4313      	orrs	r3, r2
 8001338:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800133c:	6882      	ldr	r2, [r0, #8]
 800133e:	f012 020c 	ands.w	r2, r2, #12
 8001342:	d126      	bne.n	8001392 <HAL_ADC_ConfigChannel+0xca>
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if(sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001344:	68a3      	ldr	r3, [r4, #8]
 8001346:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800134a:	d13c      	bne.n	80013c6 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800134c:	6821      	ldr	r1, [r4, #0]
 800134e:	f7ff fe73 	bl	8001038 <LL_ADC_SetChannelSamplingTime>
        
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001352:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001354:	6953      	ldr	r3, [r2, #20]
 8001356:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800135a:	6153      	str	r3, [r2, #20]

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
     
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800135c:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800135e:	f8d5 e000 	ldr.w	lr, [r5]
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001368:	2e04      	cmp	r6, #4
 800136a:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 800136e:	d033      	beq.n	80013d8 <HAL_ADC_ConfigChannel+0x110>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001370:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8001374:	0048      	lsls	r0, r1, #1
 8001376:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8001378:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 800137c:	4081      	lsls	r1, r0
 800137e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001382:	4319      	orrs	r1, r3
 8001384:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8001388:	4bc5      	ldr	r3, [pc, #788]	; (80016a0 <HAL_ADC_ConfigChannel+0x3d8>)
 800138a:	4003      	ands	r3, r0
 800138c:	4319      	orrs	r1, r3
 800138e:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001392:	6828      	ldr	r0, [r5, #0]
 8001394:	6883      	ldr	r3, [r0, #8]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	2b01      	cmp	r3, #1
 800139c:	f040 8108 	bne.w	80015b0 <HAL_ADC_ConfigChannel+0x2e8>
 80013a0:	6803      	ldr	r3, [r0, #0]
 80013a2:	07de      	lsls	r6, r3, #31
 80013a4:	f140 8104 	bpl.w	80015b0 <HAL_ADC_ConfigChannel+0x2e8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a8:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013aa:	2300      	movs	r3, #0
 80013ac:	f885 3058 	strb.w	r3, [r5, #88]	; 0x58
  
  /* Return function status */
  return tmp_hal_status;
}
 80013b0:	b003      	add	sp, #12
 80013b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 80013b4:	2312      	movs	r3, #18
 80013b6:	e7a4      	b.n	8001302 <HAL_ADC_ConfigChannel+0x3a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 80013b8:	2318      	movs	r3, #24
 80013ba:	e7a2      	b.n	8001302 <HAL_ADC_ConfigChannel+0x3a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 80013bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013c0:	e79f      	b.n	8001302 <HAL_ADC_ConfigChannel+0x3a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 80013c2:	2306      	movs	r3, #6
 80013c4:	e79d      	b.n	8001302 <HAL_ADC_ConfigChannel+0x3a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80013c6:	461a      	mov	r2, r3
 80013c8:	6821      	ldr	r1, [r4, #0]
 80013ca:	f7ff fe35 	bl	8001038 <LL_ADC_SetChannelSamplingTime>
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80013ce:	682a      	ldr	r2, [r5, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013d0:	6953      	ldr	r3, [r2, #20]
 80013d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80013d6:	e7c0      	b.n	800135a <HAL_ADC_ConfigChannel+0x92>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80013d8:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013dc:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80013e0:	f3c1 6784 	ubfx	r7, r1, #26, #5
 80013e4:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 80013e8:	2800      	cmp	r0, #0
 80013ea:	d13a      	bne.n	8001462 <HAL_ADC_ConfigChannel+0x19a>
 80013ec:	f3c3 6084 	ubfx	r0, r3, #26, #5
 80013f0:	4287      	cmp	r7, r0
 80013f2:	f040 8149 	bne.w	8001688 <HAL_ADC_ConfigChannel+0x3c0>
  MODIFY_REG(*preg,
 80013f6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80013fa:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80013fe:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001400:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 8001404:	f3c3 0712 	ubfx	r7, r3, #0, #19
 8001408:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800140c:	bb9f      	cbnz	r7, 8001476 <HAL_ADC_ConfigChannel+0x1ae>
 800140e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001412:	4283      	cmp	r3, r0
 8001414:	f040 813d 	bne.w	8001692 <HAL_ADC_ConfigChannel+0x3ca>
  MODIFY_REG(*preg,
 8001418:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800141c:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800141e:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001420:	6891      	ldr	r1, [r2, #8]
 8001422:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001426:	f102 0608 	add.w	r6, r2, #8
 800142a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800142e:	bb77      	cbnz	r7, 800148e <HAL_ADC_ConfigChannel+0x1c6>
 8001430:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001434:	4283      	cmp	r3, r0
 8001436:	f040 8147 	bne.w	80016c8 <HAL_ADC_ConfigChannel+0x400>
  MODIFY_REG(*preg,
 800143a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800143e:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001440:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001442:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001446:	68d2      	ldr	r2, [r2, #12]
 8001448:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800144c:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001450:	bb4e      	cbnz	r6, 80014a6 <HAL_ADC_ConfigChannel+0x1de>
 8001452:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001456:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8001458:	bf04      	itt	eq
 800145a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800145e:	6002      	streq	r2, [r0, #0]
 8001460:	e797      	b.n	8001392 <HAL_ADC_ConfigChannel+0xca>
 8001462:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001466:	fab0 f080 	clz	r0, r0
 800146a:	4287      	cmp	r7, r0
 800146c:	d0c3      	beq.n	80013f6 <HAL_ADC_ConfigChannel+0x12e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800146e:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001472:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	4283      	cmp	r3, r0
 8001480:	d0ca      	beq.n	8001418 <HAL_ADC_ConfigChannel+0x150>
 8001482:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001484:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001486:	f102 0608 	add.w	r6, r2, #8
 800148a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800148e:	fa93 f3a3 	rbit	r3, r3
 8001492:	fab3 f383 	clz	r3, r3
 8001496:	4283      	cmp	r3, r0
 8001498:	d0cf      	beq.n	800143a <HAL_ADC_ConfigChannel+0x172>
 800149a:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800149e:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80014a0:	6823      	ldr	r3, [r4, #0]
 80014a2:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80014a6:	fa93 f3a3 	rbit	r3, r3
 80014aa:	fab3 f383 	clz	r3, r3
 80014ae:	e7d2      	b.n	8001456 <HAL_ADC_ConfigChannel+0x18e>
 80014b0:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80014b4:	fab2 f282 	clz	r2, r2
 80014b8:	3201      	adds	r2, #1
 80014ba:	2a09      	cmp	r2, #9
 80014bc:	d90d      	bls.n	80014da <HAL_ADC_ConfigChannel+0x212>
 80014be:	fa93 f2a3 	rbit	r2, r3
 80014c2:	fab2 f282 	clz	r2, r2
 80014c6:	3201      	adds	r2, #1
 80014c8:	0696      	lsls	r6, r2, #26
 80014ca:	fa93 f1a3 	rbit	r1, r3
 80014ce:	fab1 f181 	clz	r1, r1
 80014d2:	1c4a      	adds	r2, r1, #1
 80014d4:	2101      	movs	r1, #1
 80014d6:	4091      	lsls	r1, r2
 80014d8:	e016      	b.n	8001508 <HAL_ADC_ConfigChannel+0x240>
 80014da:	fa93 f2a3 	rbit	r2, r3
 80014de:	fab2 f282 	clz	r2, r2
 80014e2:	3201      	adds	r2, #1
 80014e4:	0692      	lsls	r2, r2, #26
 80014e6:	fa93 f1a3 	rbit	r1, r3
 80014ea:	fab1 f181 	clz	r1, r1
 80014ee:	1c4e      	adds	r6, r1, #1
 80014f0:	2101      	movs	r1, #1
 80014f2:	40b1      	lsls	r1, r6
 80014f4:	e07f      	b.n	80015f6 <HAL_ADC_ConfigChannel+0x32e>
 80014f6:	fa93 f1a3 	rbit	r1, r3
 80014fa:	fab1 f181 	clz	r1, r1
 80014fe:	3101      	adds	r1, #1
 8001500:	e080      	b.n	8001604 <HAL_ADC_ConfigChannel+0x33c>
 8001502:	4616      	mov	r6, r2
 8001504:	fa01 f10e 	lsl.w	r1, r1, lr
 8001508:	ea41 0206 	orr.w	r2, r1, r6
 800150c:	b94f      	cbnz	r7, 8001522 <HAL_ADC_ConfigChannel+0x25a>
 800150e:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001512:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001516:	f1a3 011b 	sub.w	r1, r3, #27
 800151a:	0509      	lsls	r1, r1, #20
 800151c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001520:	e073      	b.n	800160a <HAL_ADC_ConfigChannel+0x342>
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	fab3 f383 	clz	r3, r3
 800152a:	e7f2      	b.n	8001512 <HAL_ADC_ConfigChannel+0x24a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 800152c:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HAL_ADC_ConfigChannel+0x3dc>)
 800152e:	429a      	cmp	r2, r3
 8001530:	d104      	bne.n	800153c <HAL_ADC_ConfigChannel+0x274>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001532:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001534:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001536:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800153a:	e072      	b.n	8001622 <HAL_ADC_ConfigChannel+0x35a>
            ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 800153c:	4b5b      	ldr	r3, [pc, #364]	; (80016ac <HAL_ADC_ConfigChannel+0x3e4>)
 800153e:	429a      	cmp	r2, r3
 8001540:	f47f af32 	bne.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
 8001544:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <HAL_ADC_ConfigChannel+0x3e0>)
 8001546:	689b      	ldr	r3, [r3, #8]
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001548:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800154c:	e069      	b.n	8001622 <HAL_ADC_ConfigChannel+0x35a>
          else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 800154e:	4955      	ldr	r1, [pc, #340]	; (80016a4 <HAL_ADC_ConfigChannel+0x3dc>)
 8001550:	428a      	cmp	r2, r1
 8001552:	d111      	bne.n	8001578 <HAL_ADC_ConfigChannel+0x2b0>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001554:	4a56      	ldr	r2, [pc, #344]	; (80016b0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	f47f af26 	bne.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
 800155c:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001560:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001564:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001568:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 800156c:	430b      	orrs	r3, r1
 800156e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001572:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
 8001576:	e717      	b.n	80013a8 <HAL_ADC_ConfigChannel+0xe0>
          else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001578:	494c      	ldr	r1, [pc, #304]	; (80016ac <HAL_ADC_ConfigChannel+0x3e4>)
 800157a:	428a      	cmp	r2, r1
 800157c:	f47f af14 	bne.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
            if (ADC_VREFINT_INSTANCE(hadc))
 8001580:	4a4b      	ldr	r2, [pc, #300]	; (80016b0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001582:	4293      	cmp	r3, r2
 8001584:	f47f af10 	bne.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001588:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800158c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001590:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001594:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001598:	430b      	orrs	r3, r1
 800159a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800159e:	e7e8      	b.n	8001572 <HAL_ADC_ConfigChannel+0x2aa>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a0:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80015a2:	f042 0220 	orr.w	r2, r2, #32
 80015a6:	65ea      	str	r2, [r5, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80015a8:	4618      	mov	r0, r3
 80015aa:	e6fe      	b.n	80013aa <HAL_ADC_ConfigChannel+0xe2>
  __HAL_LOCK(hadc);
 80015ac:	2002      	movs	r0, #2
 80015ae:	e6ff      	b.n	80013b0 <HAL_ADC_ConfigChannel+0xe8>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80015b0:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80015b2:	4a40      	ldr	r2, [pc, #256]	; (80016b4 <HAL_ADC_ConfigChannel+0x3ec>)
 80015b4:	f8d0 60b0 	ldr.w	r6, [r0, #176]	; 0xb0
 80015b8:	6823      	ldr	r3, [r4, #0]
 80015ba:	f001 0e20 	and.w	lr, r1, #32
 80015be:	fa02 f20e 	lsl.w	r2, r2, lr
 80015c2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80015c6:	4072      	eors	r2, r6
 80015c8:	403a      	ands	r2, r7
 80015ca:	4072      	eors	r2, r6
 80015cc:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80015d0:	4a39      	ldr	r2, [pc, #228]	; (80016b8 <HAL_ADC_ConfigChannel+0x3f0>)
 80015d2:	4291      	cmp	r1, r2
 80015d4:	d11d      	bne.n	8001612 <HAL_ADC_ConfigChannel+0x34a>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80015d6:	2f00      	cmp	r7, #0
 80015d8:	f47f af6a 	bne.w	80014b0 <HAL_ADC_ConfigChannel+0x1e8>
 80015dc:	f3c3 6184 	ubfx	r1, r3, #26, #5
 80015e0:	f101 0e01 	add.w	lr, r1, #1
 80015e4:	f1be 0f09 	cmp.w	lr, #9
 80015e8:	f04f 0101 	mov.w	r1, #1
 80015ec:	ea4f 628e 	mov.w	r2, lr, lsl #26
 80015f0:	d887      	bhi.n	8001502 <HAL_ADC_ConfigChannel+0x23a>
 80015f2:	fa01 f10e 	lsl.w	r1, r1, lr
 80015f6:	430a      	orrs	r2, r1
 80015f8:	2f00      	cmp	r7, #0
 80015fa:	f47f af7c 	bne.w	80014f6 <HAL_ADC_ConfigChannel+0x22e>
 80015fe:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001602:	1c59      	adds	r1, r3, #1
 8001604:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001608:	0509      	lsls	r1, r1, #20
 800160a:	4311      	orrs	r1, r2
 800160c:	68a2      	ldr	r2, [r4, #8]
 800160e:	f7ff fd13 	bl	8001038 <LL_ADC_SetChannelSamplingTime>
      if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001612:	6822      	ldr	r2, [r4, #0]
 8001614:	4b29      	ldr	r3, [pc, #164]	; (80016bc <HAL_ADC_ConfigChannel+0x3f4>)
 8001616:	429a      	cmp	r2, r3
 8001618:	d188      	bne.n	800152c <HAL_ADC_ConfigChannel+0x264>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800161a:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_ADC_ConfigChannel+0x3e0>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
          ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001622:	f47f aec1 	bne.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
        if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8001626:	682b      	ldr	r3, [r5, #0]
 8001628:	6898      	ldr	r0, [r3, #8]
 800162a:	f000 0003 	and.w	r0, r0, #3
 800162e:	2801      	cmp	r0, #1
 8001630:	d102      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x370>
 8001632:	6819      	ldr	r1, [r3, #0]
 8001634:	07c9      	lsls	r1, r1, #31
 8001636:	d422      	bmi.n	800167e <HAL_ADC_ConfigChannel+0x3b6>
          if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001638:	4920      	ldr	r1, [pc, #128]	; (80016bc <HAL_ADC_ConfigChannel+0x3f4>)
 800163a:	428a      	cmp	r2, r1
 800163c:	d187      	bne.n	800154e <HAL_ADC_ConfigChannel+0x286>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 800163e:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <HAL_ADC_ConfigChannel+0x3e8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	f47f aeb1 	bne.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
 8001646:	f8d2 1308 	ldr.w	r1, [r2, #776]	; 0x308
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800164a:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800164e:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001652:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001656:	430b      	orrs	r3, r1
 8001658:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800165c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
              wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 8001660:	4b17      	ldr	r3, [pc, #92]	; (80016c0 <HAL_ADC_ConfigChannel+0x3f8>)
 8001662:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <HAL_ADC_ConfigChannel+0x3fc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fbb3 f2f2 	udiv	r2, r3, r2
 800166a:	2378      	movs	r3, #120	; 0x78
 800166c:	4353      	muls	r3, r2
                wait_loop_index--;
 800166e:	9301      	str	r3, [sp, #4]
              while(wait_loop_index != 0)
 8001670:	9b01      	ldr	r3, [sp, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f43f ae98 	beq.w	80013a8 <HAL_ADC_ConfigChannel+0xe0>
                wait_loop_index--;
 8001678:	9b01      	ldr	r3, [sp, #4]
 800167a:	3b01      	subs	r3, #1
 800167c:	e7f7      	b.n	800166e <HAL_ADC_ConfigChannel+0x3a6>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	65eb      	str	r3, [r5, #92]	; 0x5c
 8001686:	e690      	b.n	80013aa <HAL_ADC_ConfigChannel+0xe2>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001688:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800168c:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001690:	e6bd      	b.n	800140e <HAL_ADC_ConfigChannel+0x146>
 8001692:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001694:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001696:	f102 0608 	add.w	r6, r2, #8
 800169a:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800169e:	e6c7      	b.n	8001430 <HAL_ADC_ConfigChannel+0x168>
 80016a0:	03fff000 	.word	0x03fff000
 80016a4:	cb840000 	.word	0xcb840000
 80016a8:	50040300 	.word	0x50040300
 80016ac:	80000001 	.word	0x80000001
 80016b0:	50040000 	.word	0x50040000
 80016b4:	0007ffff 	.word	0x0007ffff
 80016b8:	407f0000 	.word	0x407f0000
 80016bc:	c7520000 	.word	0xc7520000
 80016c0:	20000a50 	.word	0x20000a50
 80016c4:	001e8480 	.word	0x001e8480
 80016c8:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016cc:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80016ce:	6823      	ldr	r3, [r4, #0]
 80016d0:	f3c2 6184 	ubfx	r1, r2, #26, #5
 80016d4:	e6bd      	b.n	8001452 <HAL_ADC_ConfigChannel+0x18a>
 80016d6:	bf00      	nop

080016d8 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016d8:	6803      	ldr	r3, [r0, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	f012 0f0c 	tst.w	r2, #12
{
 80016e0:	b570      	push	{r4, r5, r6, lr}
 80016e2:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80016e4:	d101      	bne.n	80016ea <ADC_ConversionStop+0x12>
    }
    
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016e6:	2000      	movs	r0, #0
 80016e8:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) 
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	0190      	lsls	r0, r2, #6
 80016ee:	d52a      	bpl.n	8001746 <ADC_ConversionStop+0x6e>
         && (hadc->Init.ContinuousConvMode==ENABLE) 
 80016f0:	69e2      	ldr	r2, [r4, #28]
 80016f2:	2a01      	cmp	r2, #1
 80016f4:	d127      	bne.n	8001746 <ADC_ConversionStop+0x6e>
         && (hadc->Init.LowPowerAutoWait==ENABLE))
 80016f6:	69a2      	ldr	r2, [r4, #24]
 80016f8:	2a01      	cmp	r2, #1
 80016fa:	d124      	bne.n	8001746 <ADC_ConversionStop+0x6e>
 80016fc:	4a22      	ldr	r2, [pc, #136]	; (8001788 <ADC_ConversionStop+0xb0>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80016fe:	6819      	ldr	r1, [r3, #0]
 8001700:	0649      	lsls	r1, r1, #25
 8001702:	d514      	bpl.n	800172e <ADC_ConversionStop+0x56>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001704:	2240      	movs	r2, #64	; 0x40
 8001706:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 8001708:	2101      	movs	r1, #1
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800170a:	689a      	ldr	r2, [r3, #8]
 800170c:	0756      	lsls	r6, r2, #29
 800170e:	d50a      	bpl.n	8001726 <ADC_ConversionStop+0x4e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001710:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001712:	0795      	lsls	r5, r2, #30
 8001714:	d407      	bmi.n	8001726 <ADC_ConversionStop+0x4e>
  MODIFY_REG(ADCx->CR,
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800171c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001720:	f042 0210 	orr.w	r2, r2, #16
 8001724:	609a      	str	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001726:	2901      	cmp	r1, #1
 8001728:	d10f      	bne.n	800174a <ADC_ConversionStop+0x72>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800172a:	2504      	movs	r5, #4
        break;
 800172c:	e01e      	b.n	800176c <ADC_ConversionStop+0x94>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4))
 800172e:	3a01      	subs	r2, #1
 8001730:	d1e5      	bne.n	80016fe <ADC_ConversionStop+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001732:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001734:	f043 0310 	orr.w	r3, r3, #16
 8001738:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800173a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001742:	2001      	movs	r0, #1
 8001744:	bd70      	pop	{r4, r5, r6, pc}
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001746:	2902      	cmp	r1, #2
 8001748:	d1df      	bne.n	800170a <ADC_ConversionStop+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	0710      	lsls	r0, r2, #28
 800174e:	d506      	bpl.n	800175e <ADC_ConversionStop+0x86>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001750:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001752:	0792      	lsls	r2, r2, #30
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTP);
 8001754:	bf5e      	ittt	pl
 8001756:	689a      	ldrpl	r2, [r3, #8]
 8001758:	f042 0220 	orrpl.w	r2, r2, #32
 800175c:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 800175e:	2902      	cmp	r1, #2
 8001760:	d003      	beq.n	800176a <ADC_ConversionStop+0x92>
 8001762:	2903      	cmp	r1, #3
 8001764:	d1e1      	bne.n	800172a <ADC_ConversionStop+0x52>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001766:	250c      	movs	r5, #12
 8001768:	e000      	b.n	800176c <ADC_ConversionStop+0x94>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800176a:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 800176c:	f7ff fc50 	bl	8001010 <HAL_GetTick>
 8001770:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001772:	6823      	ldr	r3, [r4, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	421d      	tst	r5, r3
 8001778:	d0b5      	beq.n	80016e6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick()-tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800177a:	f7ff fc49 	bl	8001010 <HAL_GetTick>
 800177e:	1b80      	subs	r0, r0, r6
 8001780:	2805      	cmp	r0, #5
 8001782:	d9f6      	bls.n	8001772 <ADC_ConversionStop+0x9a>
 8001784:	e7d5      	b.n	8001732 <ADC_ConversionStop+0x5a>
 8001786:	bf00      	nop
 8001788:	0a340001 	.word	0x0a340001

0800178c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800178c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 800178e:	2300      	movs	r3, #0
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001790:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 8001792:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001794:	6893      	ldr	r3, [r2, #8]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b01      	cmp	r3, #1
{
 800179c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800179e:	d108      	bne.n	80017b2 <ADC_Enable+0x26>
 80017a0:	6813      	ldr	r3, [r2, #0]
 80017a2:	07d8      	lsls	r0, r3, #31
 80017a4:	d505      	bpl.n	80017b2 <ADC_Enable+0x26>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80017a6:	2000      	movs	r0, #0
}
 80017a8:	b002      	add	sp, #8
 80017aa:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 80017ac:	9b01      	ldr	r3, [sp, #4]
 80017ae:	3b01      	subs	r3, #1
 80017b0:	e012      	b.n	80017d8 <ADC_Enable+0x4c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80017b2:	6891      	ldr	r1, [r2, #8]
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <ADC_Enable+0x94>)
 80017b6:	4219      	tst	r1, r3
 80017b8:	d127      	bne.n	800180a <ADC_Enable+0x7e>
  MODIFY_REG(ADCx->CR,
 80017ba:	6893      	ldr	r3, [r2, #8]
 80017bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6093      	str	r3, [r2, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 80017ca:	4b16      	ldr	r3, [pc, #88]	; (8001824 <ADC_Enable+0x98>)
 80017cc:	4a16      	ldr	r2, [pc, #88]	; (8001828 <ADC_Enable+0x9c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	fbb3 f2f2 	udiv	r2, r3, r2
 80017d4:	230a      	movs	r3, #10
 80017d6:	4353      	muls	r3, r2
      wait_loop_index--;
 80017d8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80017da:	9b01      	ldr	r3, [sp, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d1e5      	bne.n	80017ac <ADC_Enable+0x20>
    tickstart = HAL_GetTick();
 80017e0:	f7ff fc16 	bl	8001010 <HAL_GetTick>
 80017e4:	4e11      	ldr	r6, [pc, #68]	; (800182c <ADC_Enable+0xa0>)
 80017e6:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80017e8:	6822      	ldr	r2, [r4, #0]
 80017ea:	6813      	ldr	r3, [r2, #0]
 80017ec:	07db      	lsls	r3, r3, #31
 80017ee:	d4da      	bmi.n	80017a6 <ADC_Enable+0x1a>
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80017f0:	6893      	ldr	r3, [r2, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 80017f2:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 80017f4:	bf5f      	itttt	pl
 80017f6:	6893      	ldrpl	r3, [r2, #8]
 80017f8:	4033      	andpl	r3, r6
 80017fa:	f043 0301 	orrpl.w	r3, r3, #1
 80017fe:	6093      	strpl	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001800:	f7ff fc06 	bl	8001010 <HAL_GetTick>
 8001804:	1b40      	subs	r0, r0, r5
 8001806:	2802      	cmp	r0, #2
 8001808:	d9ee      	bls.n	80017e8 <ADC_Enable+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800180c:	f043 0310 	orr.w	r3, r3, #16
 8001810:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001812:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001814:	f043 0301 	orr.w	r3, r3, #1
 8001818:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 800181a:	2001      	movs	r0, #1
 800181c:	e7c4      	b.n	80017a8 <ADC_Enable+0x1c>
 800181e:	bf00      	nop
 8001820:	8000003f 	.word	0x8000003f
 8001824:	20000a50 	.word	0x20000a50
 8001828:	001e8480 	.word	0x001e8480
 800182c:	7fffffc0 	.word	0x7fffffc0

08001830 <HAL_ADC_Start>:
{
 8001830:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001832:	6803      	ldr	r3, [r0, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8001834:	689d      	ldr	r5, [r3, #8]
 8001836:	f015 0504 	ands.w	r5, r5, #4
{
 800183a:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800183c:	d13a      	bne.n	80018b4 <HAL_ADC_Start+0x84>
    __HAL_LOCK(hadc);
 800183e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001842:	2b01      	cmp	r3, #1
 8001844:	d036      	beq.n	80018b4 <HAL_ADC_Start+0x84>
 8001846:	2301      	movs	r3, #1
 8001848:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
    tmp_hal_status = ADC_Enable(hadc);
 800184c:	f7ff ff9e 	bl	800178c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001850:	2800      	cmp	r0, #0
 8001852:	d12c      	bne.n	80018ae <HAL_ADC_Start+0x7e>
      ADC_STATE_CLR_SET(hadc->State,
 8001854:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001856:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800185a:	f023 0301 	bic.w	r3, r3, #1
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	65e3      	str	r3, [r4, #92]	; 0x5c
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001864:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001866:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800186a:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800186c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800186e:	04da      	lsls	r2, r3, #19
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001870:	bf48      	it	mi
 8001872:	6e23      	ldrmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001874:	6822      	ldr	r2, [r4, #0]
        ADC_CLEAR_ERRORCODE(hadc); 
 8001876:	bf52      	itee	pl
 8001878:	6620      	strpl	r0, [r4, #96]	; 0x60
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800187a:	f023 0306 	bicmi.w	r3, r3, #6
 800187e:	6623      	strmi	r3, [r4, #96]	; 0x60
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001880:	231c      	movs	r3, #28
 8001882:	6013      	str	r3, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001884:	2300      	movs	r3, #0
 8001886:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800188a:	68d3      	ldr	r3, [r2, #12]
 800188c:	019b      	lsls	r3, r3, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800188e:	bf41      	itttt	mi
 8001890:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
 8001892:	f423 5340 	bicmi.w	r3, r3, #12288	; 0x3000
 8001896:	f443 5380 	orrmi.w	r3, r3, #4096	; 0x1000
 800189a:	65e3      	strmi	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 800189c:	6893      	ldr	r3, [r2, #8]
 800189e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018a6:	f043 0304 	orr.w	r3, r3, #4
 80018aa:	6093      	str	r3, [r2, #8]
 80018ac:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_UNLOCK(hadc);
 80018ae:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80018b2:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 80018b4:	2002      	movs	r0, #2
}
 80018b6:	bd38      	pop	{r3, r4, r5, pc}

080018b8 <ADC_Disable>:
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018b8:	6802      	ldr	r2, [r0, #0]
{
 80018ba:	b538      	push	{r3, r4, r5, lr}
 80018bc:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018be:	6890      	ldr	r0, [r2, #8]
 80018c0:	f000 0003 	and.w	r0, r0, #3
 80018c4:	2801      	cmp	r0, #1
 80018c6:	d001      	beq.n	80018cc <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80018c8:	2000      	movs	r0, #0
 80018ca:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80018cc:	6813      	ldr	r3, [r2, #0]
 80018ce:	07d9      	lsls	r1, r3, #31
 80018d0:	d5fa      	bpl.n	80018c8 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80018d2:	6893      	ldr	r3, [r2, #8]
 80018d4:	f003 030d 	and.w	r3, r3, #13
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d11f      	bne.n	800191c <ADC_Disable+0x64>
  MODIFY_REG(ADCx->CR,
 80018dc:	6893      	ldr	r3, [r2, #8]
 80018de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80018e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018e6:	f043 0302 	orr.w	r3, r3, #2
 80018ea:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80018ec:	2303      	movs	r3, #3
 80018ee:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80018f0:	f7ff fb8e 	bl	8001010 <HAL_GetTick>
 80018f4:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80018f6:	6823      	ldr	r3, [r4, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	07db      	lsls	r3, r3, #31
 80018fc:	d5e4      	bpl.n	80018c8 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80018fe:	f7ff fb87 	bl	8001010 <HAL_GetTick>
 8001902:	1b40      	subs	r0, r0, r5
 8001904:	2802      	cmp	r0, #2
 8001906:	d9f6      	bls.n	80018f6 <ADC_Disable+0x3e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001908:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800190a:	f043 0310 	orr.w	r3, r3, #16
 800190e:	65e3      	str	r3, [r4, #92]	; 0x5c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001910:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6623      	str	r3, [r4, #96]	; 0x60
        return HAL_ERROR;
 8001918:	2001      	movs	r0, #1
 800191a:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800191c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800191e:	f043 0310 	orr.w	r3, r3, #16
 8001922:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001924:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 800192c:	bd38      	pop	{r3, r4, r5, pc}

0800192e <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800192e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8001932:	2b01      	cmp	r3, #1
{
 8001934:	b510      	push	{r4, lr}
 8001936:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001938:	d016      	beq.n	8001968 <HAL_ADC_Stop+0x3a>
 800193a:	2301      	movs	r3, #1
 800193c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001940:	2103      	movs	r1, #3
 8001942:	f7ff fec9 	bl	80016d8 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8001946:	b958      	cbnz	r0, 8001960 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8001948:	4620      	mov	r0, r4
 800194a:	f7ff ffb5 	bl	80018b8 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800194e:	b938      	cbnz	r0, 8001960 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8001950:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001952:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001956:	f023 0301 	bic.w	r3, r3, #1
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	65e3      	str	r3, [r4, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8001960:	2300      	movs	r3, #0
 8001962:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
  return tmp_hal_status;
 8001966:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001968:	2002      	movs	r0, #2
}
 800196a:	bd10      	pop	{r4, pc}

0800196c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800196e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001970:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001974:	041b      	lsls	r3, r3, #16
 8001976:	0c1b      	lsrs	r3, r3, #16
 8001978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800197c:	0200      	lsls	r0, r0, #8
 800197e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001982:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001986:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001988:	60d3      	str	r3, [r2, #12]
 800198a:	4770      	bx	lr
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001992:	b530      	push	{r4, r5, lr}
 8001994:	68dc      	ldr	r4, [r3, #12]
 8001996:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800199a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	bf28      	it	cs
 80019a4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019a6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 0501 	mov.w	r5, #1
 80019ac:	fa05 f303 	lsl.w	r3, r5, r3
 80019b0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b4:	bf8c      	ite	hi
 80019b6:	3c03      	subhi	r4, #3
 80019b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ba:	4019      	ands	r1, r3
 80019bc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019be:	fa05 f404 	lsl.w	r4, r5, r4
 80019c2:	3c01      	subs	r4, #1
 80019c4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80019c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c8:	ea42 0201 	orr.w	r2, r2, r1
 80019cc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d0:	bfaf      	iteee	ge
 80019d2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	f000 000f 	andlt.w	r0, r0, #15
 80019da:	4b06      	ldrlt	r3, [pc, #24]	; (80019f4 <HAL_NVIC_SetPriority+0x64>)
 80019dc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	bfa5      	ittet	ge
 80019e0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80019e4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80019ec:	bd30      	pop	{r4, r5, pc}
 80019ee:	bf00      	nop
 80019f0:	e000ed00 	.word	0xe000ed00
 80019f4:	e000ed14 	.word	0xe000ed14

080019f8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80019f8:	0942      	lsrs	r2, r0, #5
 80019fa:	2301      	movs	r3, #1
 80019fc:	f000 001f 	and.w	r0, r0, #31
 8001a00:	fa03 f000 	lsl.w	r0, r3, r0
 8001a04:	4b01      	ldr	r3, [pc, #4]	; (8001a0c <HAL_NVIC_EnableIRQ+0x14>)
 8001a06:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001a0a:	4770      	bx	lr
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a10:	0943      	lsrs	r3, r0, #5
 8001a12:	2201      	movs	r2, #1
 8001a14:	f000 001f 	and.w	r0, r0, #31
 8001a18:	fa02 f000 	lsl.w	r0, r2, r0
 8001a1c:	3320      	adds	r3, #32
 8001a1e:	4a02      	ldr	r2, [pc, #8]	; (8001a28 <HAL_NVIC_DisableIRQ+0x18>)
 8001a20:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100

08001a2c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a2c:	3801      	subs	r0, #1
 8001a2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a32:	d20a      	bcs.n	8001a4a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a34:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a36:	4a07      	ldr	r2, [pc, #28]	; (8001a54 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a38:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	21f0      	movs	r1, #240	; 0xf0
 8001a3c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a44:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a4a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000e010 	.word	0xe000e010
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <HAL_NVIC_ClearPendingIRQ>:
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001a58:	0943      	lsrs	r3, r0, #5
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f000 001f 	and.w	r0, r0, #31
 8001a60:	fa02 f000 	lsl.w	r0, r2, r0
 8001a64:	3360      	adds	r3, #96	; 0x60
 8001a66:	4a02      	ldr	r2, [pc, #8]	; (8001a70 <HAL_NVIC_ClearPendingIRQ+0x18>)
 8001a68:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a76:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001a78:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001a7a:	bf0c      	ite	eq
 8001a7c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001a80:	f022 0204 	bicne.w	r2, r2, #4
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	4770      	bx	lr
 8001a88:	e000e010 	.word	0xe000e010

08001a8c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001a8c:	4770      	bx	lr

08001a8e <HAL_SYSTICK_IRQHandler>:
{
 8001a8e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001a90:	f7ff fffc 	bl	8001a8c <HAL_SYSTICK_Callback>
 8001a94:	bd08      	pop	{r3, pc}

08001a96 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a96:	b570      	push	{r4, r5, r6, lr}
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a98:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8001a9a:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8001a9c:	6065      	str	r5, [r4, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001a9e:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8001aa0:	b114      	cbz	r4, 8001aa8 <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aa2:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8001aa4:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001aa6:	6065      	str	r5, [r4, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001aa8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001aaa:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001aac:	f004 051c 	and.w	r5, r4, #28
 8001ab0:	2401      	movs	r4, #1
 8001ab2:	40ac      	lsls	r4, r5
 8001ab4:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ab6:	6804      	ldr	r4, [r0, #0]
 8001ab8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001aba:	6883      	ldr	r3, [r0, #8]
 8001abc:	2b10      	cmp	r3, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001abe:	bf0b      	itete	eq
 8001ac0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001ac2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001ac4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001ac6:	60e2      	strne	r2, [r4, #12]
 8001ac8:	bd70      	pop	{r4, r5, r6, pc}
	...

08001acc <DMA_CalcDMAMUXChannelBaseAndMask>:
{
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001acc:	6803      	ldr	r3, [r0, #0]
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
  }
  else
  {
    /* DMA2 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
 8001ace:	490d      	ldr	r1, [pc, #52]	; (8001b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
 8001ad0:	4a0d      	ldr	r2, [pc, #52]	; (8001b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
{
 8001ad2:	b510      	push	{r4, lr}
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
 8001ad4:	4c0d      	ldr	r4, [pc, #52]	; (8001b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8001ad6:	42a3      	cmp	r3, r4
 8001ad8:	bf88      	it	hi
 8001ada:	460a      	movhi	r2, r1
  }
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_ChannelBase + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001adc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001ade:	f021 0103 	bic.w	r1, r1, #3
 8001ae2:	440a      	add	r2, r1
 8001ae4:	6482      	str	r2, [r0, #72]	; 0x48
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ae6:	b2db      	uxtb	r3, r3
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001ae8:	4a09      	ldr	r2, [pc, #36]	; (8001b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8001aea:	64c2      	str	r2, [r0, #76]	; 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001aec:	3b08      	subs	r3, #8
 8001aee:	2214      	movs	r2, #20
 8001af0:	fbb3 f3f2 	udiv	r3, r3, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8001af4:	2201      	movs	r2, #1
 8001af6:	f003 031c 	and.w	r3, r3, #28
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	6503      	str	r3, [r0, #80]	; 0x50
 8001b00:	bd10      	pop	{r4, pc}
 8001b02:	bf00      	nop
 8001b04:	4002081c 	.word	0x4002081c
 8001b08:	40020800 	.word	0x40020800
 8001b0c:	40020407 	.word	0x40020407
 8001b10:	40020880 	.word	0x40020880

08001b14 <HAL_DMA_Init>:
{
 8001b14:	b510      	push	{r4, lr}
  if(hdma == NULL)
 8001b16:	4604      	mov	r4, r0
 8001b18:	2800      	cmp	r0, #0
 8001b1a:	d05d      	beq.n	8001bd8 <HAL_DMA_Init+0xc4>
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b1c:	6801      	ldr	r1, [r0, #0]
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <HAL_DMA_Init+0xc8>)
 8001b20:	4299      	cmp	r1, r3
 8001b22:	f04f 0014 	mov.w	r0, #20
 8001b26:	d84a      	bhi.n	8001bbe <HAL_DMA_Init+0xaa>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001b28:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <HAL_DMA_Init+0xcc>)
 8001b2a:	440a      	add	r2, r1
 8001b2c:	fbb2 f2f0 	udiv	r2, r2, r0
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001b34:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001b38:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp |=  hdma->Init.Direction        |
 8001b40:	68e0      	ldr	r0, [r4, #12]
 8001b42:	68a3      	ldr	r3, [r4, #8]
  tmp = hdma->Instance->CCR;
 8001b44:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 8001b46:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b48:	6920      	ldr	r0, [r4, #16]
 8001b4a:	4303      	orrs	r3, r0
 8001b4c:	6960      	ldr	r0, [r4, #20]
 8001b4e:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b50:	69a0      	ldr	r0, [r4, #24]
 8001b52:	4303      	orrs	r3, r0
 8001b54:	69e0      	ldr	r0, [r4, #28]
 8001b56:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b58:	6a20      	ldr	r0, [r4, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001b5a:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8001b5e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b62:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001b64:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8001b66:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001b68:	4620      	mov	r0, r4
 8001b6a:	f7ff ffaf 	bl	8001acc <DMA_CalcDMAMUXChannelBaseAndMask>
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b6e:	68a3      	ldr	r3, [r4, #8]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b72:	6d20      	ldr	r0, [r4, #80]	; 0x50
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001b74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001b78:	bf04      	itt	eq
 8001b7a:	2300      	moveq	r3, #0
 8001b7c:	6063      	streq	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001b7e:	6862      	ldr	r2, [r4, #4]
 8001b80:	b2d3      	uxtb	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b84:	3a01      	subs	r2, #1
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b86:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b88:	2a03      	cmp	r2, #3
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b8a:	6048      	str	r0, [r1, #4]
  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001b8c:	d81f      	bhi.n	8001bce <HAL_DMA_Init+0xba>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b8e:	4a15      	ldr	r2, [pc, #84]	; (8001be4 <HAL_DMA_Init+0xd0>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001b90:	4815      	ldr	r0, [pc, #84]	; (8001be8 <HAL_DMA_Init+0xd4>)
 8001b92:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b94:	441a      	add	r2, r3

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b96:	3b01      	subs	r3, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b98:	0092      	lsls	r2, r2, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001ba4:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ba6:	6562      	str	r2, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ba8:	65e3      	str	r3, [r4, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001baa:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bac:	6043      	str	r3, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bae:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8001bb0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bb2:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8001bb4:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8001bb8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  return HAL_OK;
 8001bbc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <HAL_DMA_Init+0xd8>)
 8001bc0:	440b      	add	r3, r1
 8001bc2:	fbb3 f3f0 	udiv	r3, r3, r0
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <HAL_DMA_Init+0xdc>)
 8001bcc:	e7b4      	b.n	8001b38 <HAL_DMA_Init+0x24>
    hdma->DMAmuxRequestGen = 0U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001bd2:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001bd4:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001bd6:	e7ea      	b.n	8001bae <HAL_DMA_Init+0x9a>
    return HAL_ERROR;
 8001bd8:	2001      	movs	r0, #1
}
 8001bda:	bd10      	pop	{r4, pc}
 8001bdc:	40020407 	.word	0x40020407
 8001be0:	bffdfff8 	.word	0xbffdfff8
 8001be4:	1000823f 	.word	0x1000823f
 8001be8:	40020940 	.word	0x40020940
 8001bec:	bffdfbf8 	.word	0xbffdfbf8
 8001bf0:	40020400 	.word	0x40020400

08001bf4 <HAL_DMA_DeInit>:
{
 8001bf4:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma )
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	2800      	cmp	r0, #0
 8001bfa:	d045      	beq.n	8001c88 <HAL_DMA_DeInit+0x94>
  __HAL_DMA_DISABLE(hdma);
 8001bfc:	6801      	ldr	r1, [r0, #0]
 8001bfe:	680b      	ldr	r3, [r1, #0]
 8001c00:	f023 0301 	bic.w	r3, r3, #1
 8001c04:	600b      	str	r3, [r1, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001c06:	4b21      	ldr	r3, [pc, #132]	; (8001c8c <HAL_DMA_DeInit+0x98>)
 8001c08:	4299      	cmp	r1, r3
 8001c0a:	f04f 0014 	mov.w	r0, #20
 8001c0e:	d833      	bhi.n	8001c78 <HAL_DMA_DeInit+0x84>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001c10:	4a1f      	ldr	r2, [pc, #124]	; (8001c90 <HAL_DMA_DeInit+0x9c>)
 8001c12:	440a      	add	r2, r1
 8001c14:	fbb2 f2f0 	udiv	r2, r2, r0
 8001c18:	0092      	lsls	r2, r2, #2
 8001c1a:	6462      	str	r2, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001c1c:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
    hdma->DmaBaseAddress = DMA2;
 8001c20:	6423      	str	r3, [r4, #64]	; 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c22:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001c24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001c26:	f003 031c 	and.w	r3, r3, #28
 8001c2a:	2501      	movs	r5, #1
 8001c2c:	fa05 f303 	lsl.w	r3, r5, r3
  hdma->Instance->CCR  = 0;
 8001c30:	2600      	movs	r6, #0
 8001c32:	600e      	str	r6, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c34:	4620      	mov	r0, r4
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001c36:	6053      	str	r3, [r2, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c38:	f7ff ff48 	bl	8001acc <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0;
 8001c3c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c3e:	6861      	ldr	r1, [r4, #4]
  hdma->DMAmuxChannel->CCR = 0;
 8001c40:	601e      	str	r6, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c42:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001c44:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001c46:	605a      	str	r2, [r3, #4]
  if(((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001c48:	1e4a      	subs	r2, r1, #1
 8001c4a:	2a03      	cmp	r2, #3
 8001c4c:	d806      	bhi.n	8001c5c <HAL_DMA_DeInit+0x68>
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_DMA_DeInit+0xa0>)
 8001c50:	440b      	add	r3, r1
 8001c52:	009b      	lsls	r3, r3, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c54:	4095      	lsls	r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c56:	601e      	str	r6, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_DMA_DeInit+0xa4>)
 8001c5a:	605d      	str	r5, [r3, #4]
  hdma->DMAmuxRequestGen = 0U;
 8001c5c:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c5e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->DMAmuxRequestGen = 0U;
 8001c60:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8001c62:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8001c64:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8001c66:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8001c68:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8001c6a:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8001c6c:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_RESET;
 8001c6e:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8001c72:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  return HAL_OK;
 8001c76:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <HAL_DMA_DeInit+0xa8>)
 8001c7a:	440b      	add	r3, r1
 8001c7c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	6463      	str	r3, [r4, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <HAL_DMA_DeInit+0xac>)
 8001c86:	e7cb      	b.n	8001c20 <HAL_DMA_DeInit+0x2c>
    return HAL_ERROR;
 8001c88:	2001      	movs	r0, #1
}
 8001c8a:	bd70      	pop	{r4, r5, r6, pc}
 8001c8c:	40020407 	.word	0x40020407
 8001c90:	bffdfff8 	.word	0xbffdfff8
 8001c94:	1000823f 	.word	0x1000823f
 8001c98:	40020940 	.word	0x40020940
 8001c9c:	bffdfbf8 	.word	0xbffdfbf8
 8001ca0:	40020400 	.word	0x40020400

08001ca4 <HAL_DMA_Start_IT>:
{
 8001ca4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001ca6:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
 8001caa:	2d01      	cmp	r5, #1
{
 8001cac:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8001cae:	d039      	beq.n	8001d24 <HAL_DMA_Start_IT+0x80>
 8001cb0:	2501      	movs	r5, #1
 8001cb2:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cb6:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
 8001cba:	2d01      	cmp	r5, #1
 8001cbc:	f04f 0600 	mov.w	r6, #0
 8001cc0:	f04f 0502 	mov.w	r5, #2
 8001cc4:	d12c      	bne.n	8001d20 <HAL_DMA_Start_IT+0x7c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001cc6:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cca:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8001ccc:	6806      	ldr	r6, [r0, #0]
 8001cce:	6835      	ldr	r5, [r6, #0]
 8001cd0:	f025 0501 	bic.w	r5, r5, #1
 8001cd4:	6035      	str	r5, [r6, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cd6:	f7ff fede 	bl	8001a96 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001cda:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001cdc:	6803      	ldr	r3, [r0, #0]
 8001cde:	b1ba      	cbz	r2, 8001d10 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	f042 020e 	orr.w	r2, r2, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ce6:	601a      	str	r2, [r3, #0]
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ce8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001cea:	6811      	ldr	r1, [r2, #0]
 8001cec:	03c9      	lsls	r1, r1, #15
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001cee:	bf42      	ittt	mi
 8001cf0:	6811      	ldrmi	r1, [r2, #0]
 8001cf2:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 8001cf6:	6011      	strmi	r1, [r2, #0]
    if(hdma->DMAmuxRequestGen != 0U)
 8001cf8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001cfa:	b11a      	cbz	r2, 8001d04 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001cfc:	6811      	ldr	r1, [r2, #0]
 8001cfe:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001d02:	6011      	str	r1, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0c:	2000      	movs	r0, #0
 8001d0e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	f022 0204 	bic.w	r2, r2, #4
 8001d16:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	f042 020a 	orr.w	r2, r2, #10
 8001d1e:	e7e2      	b.n	8001ce6 <HAL_DMA_Start_IT+0x42>
    __HAL_UNLOCK(hdma);
 8001d20:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8001d24:	2002      	movs	r0, #2
}
 8001d26:	bd70      	pop	{r4, r5, r6, pc}

08001d28 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d28:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8001d2c:	2b02      	cmp	r3, #2
{
 8001d2e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d30:	d003      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d32:	2304      	movs	r3, #4
 8001d34:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8001d36:	2001      	movs	r0, #1
 8001d38:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d3a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d3c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f022 020e 	bic.w	r2, r2, #14
 8001d44:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d4e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001d50:	6813      	ldr	r3, [r2, #0]
 8001d52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d56:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001d58:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001d5a:	f003 021c 	and.w	r2, r3, #28
 8001d5e:	2301      	movs	r3, #1
 8001d60:	4093      	lsls	r3, r2
 8001d62:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d64:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001d66:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001d68:	605a      	str	r2, [r3, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8001d6a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001d6c:	b133      	cbz	r3, 8001d7c <HAL_DMA_Abort_IT+0x54>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d74:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d76:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8001d78:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001d7a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    if(hdma->XferAbortCallback != NULL)
 8001d82:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001d84:	2400      	movs	r4, #0
 8001d86:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8001d8a:	b113      	cbz	r3, 8001d92 <HAL_DMA_Abort_IT+0x6a>
      hdma->XferAbortCallback(hdma);
 8001d8c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001d8e:	4620      	mov	r0, r4
 8001d90:	bd10      	pop	{r4, pc}
 8001d92:	4618      	mov	r0, r3
}
 8001d94:	bd10      	pop	{r4, pc}

08001d96 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d96:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001d98:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 8001d9a:	6803      	ldr	r3, [r0, #0]
{
 8001d9c:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001d9e:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001da2:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001da4:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001da6:	2404      	movs	r4, #4
 8001da8:	4094      	lsls	r4, r2
 8001daa:	4226      	tst	r6, r4
 8001dac:	d00e      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x36>
 8001dae:	f015 0f04 	tst.w	r5, #4
 8001db2:	d00b      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001db8:	bf5e      	ittt	pl
 8001dba:	681a      	ldrpl	r2, [r3, #0]
 8001dbc:	f022 0204 	bicpl.w	r2, r2, #4
 8001dc0:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001dc2:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001dc4:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001dc6:	b373      	cbz	r3, 8001e26 <HAL_DMA_IRQHandler+0x90>
}
 8001dc8:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001dca:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001dcc:	2402      	movs	r4, #2
 8001dce:	4094      	lsls	r4, r2
 8001dd0:	4226      	tst	r6, r4
 8001dd2:	d012      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x64>
 8001dd4:	f015 0f02 	tst.w	r5, #2
 8001dd8:	d00f      	beq.n	8001dfa <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	0695      	lsls	r5, r2, #26
 8001dde:	d406      	bmi.n	8001dee <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f022 020a 	bic.w	r2, r2, #10
 8001de6:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001de8:	2301      	movs	r3, #1
 8001dea:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001dee:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8001df0:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001df2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001df6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001df8:	e7e5      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001dfa:	2408      	movs	r4, #8
 8001dfc:	4094      	lsls	r4, r2
 8001dfe:	4234      	tst	r4, r6
 8001e00:	d011      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x90>
 8001e02:	072c      	lsls	r4, r5, #28
 8001e04:	d50f      	bpl.n	8001e26 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e06:	681c      	ldr	r4, [r3, #0]
 8001e08:	f024 040e 	bic.w	r4, r4, #14
 8001e0c:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001e0e:	2301      	movs	r3, #1
 8001e10:	fa03 f202 	lsl.w	r2, r3, r2
 8001e14:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e16:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001e18:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001e22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001e24:	e7cf      	b.n	8001dc6 <HAL_DMA_IRQHandler+0x30>
}
 8001e26:	bc70      	pop	{r4, r5, r6}
 8001e28:	4770      	bx	lr
	...

08001e2c <DMA2D_SetConfig>:
  * @param  Width:      The width of data to be transferred from source to destination.
  * @param  Height:     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{  
 8001e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmp2 = 0;
  uint32_t tmp3 = 0;
  uint32_t tmp4 = 0;
    
  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_POSITION_NLR_PL))); 
 8001e2e:	6805      	ldr	r5, [r0, #0]
 8001e30:	4e0a      	ldr	r6, [pc, #40]	; (8001e5c <DMA2D_SetConfig+0x30>)
 8001e32:	6c6c      	ldr	r4, [r5, #68]	; 0x44
 8001e34:	fa96 f6a6 	rbit	r6, r6
 8001e38:	9f05      	ldr	r7, [sp, #20]
 8001e3a:	fab6 f686 	clz	r6, r6
 8001e3e:	f004 4440 	and.w	r4, r4, #3221225472	; 0xc0000000
 8001e42:	433c      	orrs	r4, r7
 8001e44:	40b3      	lsls	r3, r6
 8001e46:	4323      	orrs	r3, r4
 8001e48:	646b      	str	r3, [r5, #68]	; 0x44
  
  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 
  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e4a:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001e4c:	63ea      	str	r2, [r5, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001e4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      tmp3 = (tmp3 >> 12);
      tmp4 = (tmp4 >> 4 );
      tmp  = ((tmp3 << 4) | (tmp2 << 8) | (tmp1 << 12) | tmp4);
    }    
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, pdata);    
 8001e52:	bf0c      	ite	eq
 8001e54:	63a9      	streq	r1, [r5, #56]	; 0x38
  } 
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
  WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001e56:	60e9      	strne	r1, [r5, #12]
 8001e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	3fff0000 	.word	0x3fff0000

08001e60 <HAL_DMA2D_Init>:
{ 
 8001e60:	b538      	push	{r3, r4, r5, lr}
  if(hdma2d == NULL)
 8001e62:	4604      	mov	r4, r0
 8001e64:	2800      	cmp	r0, #0
 8001e66:	d043      	beq.n	8001ef0 <HAL_DMA2D_Init+0x90>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001e68:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
 8001e6c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e70:	b91b      	cbnz	r3, 8001e7a <HAL_DMA2D_Init+0x1a>
    hdma2d->Lock = HAL_UNLOCKED;
 8001e72:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
    HAL_DMA2D_MspInit(hdma2d);
 8001e76:	f01f fbab 	bl	80215d0 <HAL_DMA2D_MspInit>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;  
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	69e0      	ldr	r0, [r4, #28]
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	6862      	ldr	r2, [r4, #4]
 8001e88:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
 8001e8c:	4302      	orrs	r2, r0
 8001e8e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8001e92:	430a      	orrs	r2, r1
 8001e94:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB, hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);
 8001e96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e98:	68a2      	ldr	r2, [r4, #8]
 8001e9a:	69a0      	ldr	r0, [r4, #24]
 8001e9c:	f421 7183 	bic.w	r1, r1, #262	; 0x106
 8001ea0:	4302      	orrs	r2, r0
 8001ea2:	f021 0101 	bic.w	r1, r1, #1
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);  
 8001eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eac:	68e1      	ldr	r1, [r4, #12]
 8001eae:	0c12      	lsrs	r2, r2, #16
 8001eb0:	0412      	lsls	r2, r2, #16
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), \
 8001eb6:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001eb8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ebc:	fa92 f2a2 	rbit	r2, r2
 8001ec0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001ec4:	fab2 f082 	clz	r0, r2
 8001ec8:	fa91 f1a1 	rbit	r1, r1
 8001ecc:	6922      	ldr	r2, [r4, #16]
 8001ece:	4082      	lsls	r2, r0
 8001ed0:	6960      	ldr	r0, [r4, #20]
 8001ed2:	fab1 f181 	clz	r1, r1
 8001ed6:	fa00 f101 	lsl.w	r1, r0, r1
 8001eda:	430a      	orrs	r2, r1
 8001edc:	f425 1140 	bic.w	r1, r5, #3145728	; 0x300000
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	635a      	str	r2, [r3, #52]	; 0x34
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ee4:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001ee6:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ee8:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001eea:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  return HAL_OK;
 8001eee:	bd38      	pop	{r3, r4, r5, pc}
     return HAL_ERROR;
 8001ef0:	2001      	movs	r0, #1
}
 8001ef2:	bd38      	pop	{r3, r4, r5, pc}

08001ef4 <HAL_DMA2D_Start>:
{
 8001ef4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8001ef6:	f890 4058 	ldrb.w	r4, [r0, #88]	; 0x58
 8001efa:	2c01      	cmp	r4, #1
 8001efc:	f04f 0402 	mov.w	r4, #2
 8001f00:	d00f      	beq.n	8001f22 <HAL_DMA2D_Start+0x2e>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f02:	f880 4059 	strb.w	r4, [r0, #89]	; 0x59
  __HAL_LOCK(hdma2d);
 8001f06:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001f08:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8001f0a:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001f0e:	9400      	str	r4, [sp, #0]
 8001f10:	f7ff ff8c 	bl	8001e2c <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8001f14:	6802      	ldr	r2, [r0, #0]
 8001f16:	6813      	ldr	r3, [r2, #0]
 8001f18:	4333      	orrs	r3, r6
 8001f1a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001f1c:	2000      	movs	r0, #0
}
 8001f1e:	b002      	add	sp, #8
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8001f22:	4620      	mov	r0, r4
 8001f24:	e7fb      	b.n	8001f1e <HAL_DMA2D_Start+0x2a>

08001f26 <HAL_DMA2D_PollForTransfer>:
{
 8001f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0;  
 8001f28:	2300      	movs	r3, #0
 8001f2a:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001f2c:	6803      	ldr	r3, [r0, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	07db      	lsls	r3, r3, #31
{
 8001f32:	4604      	mov	r4, r0
 8001f34:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != RESET)
 8001f36:	d427      	bmi.n	8001f88 <HAL_DMA2D_PollForTransfer+0x62>
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	69da      	ldr	r2, [r3, #28]
 8001f3c:	0696      	lsls	r6, r2, #26
 8001f3e:	d55c      	bpl.n	8001ffa <HAL_DMA2D_PollForTransfer+0xd4>
    tickstart = HAL_GetTick();
 8001f40:	f7ff f866 	bl	8001010 <HAL_GetTick>
 8001f44:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == RESET)
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	06d2      	lsls	r2, r2, #27
 8001f4c:	d458      	bmi.n	8002000 <HAL_DMA2D_PollForTransfer+0xda>
      isrflags = READ_REG(hdma2d->Instance->ISR);   
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)        
 8001f52:	9a01      	ldr	r2, [sp, #4]
 8001f54:	f012 0f29 	tst.w	r2, #41	; 0x29
 8001f58:	d05d      	beq.n	8002016 <HAL_DMA2D_PollForTransfer+0xf0>
        if ((isrflags & DMA2D_FLAG_CAE) != RESET)
 8001f5a:	9a01      	ldr	r2, [sp, #4]
 8001f5c:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;        
 8001f5e:	bf42      	ittt	mi
 8001f60:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001f62:	f042 0204 	orrmi.w	r2, r2, #4
 8001f66:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_CE) != RESET)             
 8001f68:	9a01      	ldr	r2, [sp, #4]
 8001f6a:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001f6c:	bf42      	ittt	mi
 8001f6e:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001f70:	f042 0202 	orrmi.w	r2, r2, #2
 8001f74:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001f76:	9a01      	ldr	r2, [sp, #4]
 8001f78:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001f7a:	bf42      	ittt	mi
 8001f7c:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001f7e:	f042 0201 	orrmi.w	r2, r2, #1
 8001f82:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001f84:	2229      	movs	r2, #41	; 0x29
 8001f86:	e01b      	b.n	8001fc0 <HAL_DMA2D_PollForTransfer+0x9a>
   tickstart = HAL_GetTick();
 8001f88:	f7ff f842 	bl	8001010 <HAL_GetTick>
 8001f8c:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == RESET)
 8001f8e:	6823      	ldr	r3, [r4, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	0792      	lsls	r2, r2, #30
 8001f94:	d4d0      	bmi.n	8001f38 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR); 
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != RESET)
 8001f9a:	9a01      	ldr	r2, [sp, #4]
 8001f9c:	f012 0f21 	tst.w	r2, #33	; 0x21
 8001fa0:	d017      	beq.n	8001fd2 <HAL_DMA2D_PollForTransfer+0xac>
        if ((isrflags & DMA2D_FLAG_CE) != RESET)
 8001fa2:	9a01      	ldr	r2, [sp, #4]
 8001fa4:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;        
 8001fa6:	bf42      	ittt	mi
 8001fa8:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001faa:	f042 0202 	orrmi.w	r2, r2, #2
 8001fae:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        if ((isrflags & DMA2D_FLAG_TE) != RESET)        
 8001fb0:	9a01      	ldr	r2, [sp, #4]
 8001fb2:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;        
 8001fb4:	bf42      	ittt	mi
 8001fb6:	6de2      	ldrmi	r2, [r4, #92]	; 0x5c
 8001fb8:	f042 0201 	orrmi.w	r2, r2, #1
 8001fbc:	65e2      	strmi	r2, [r4, #92]	; 0x5c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001fbe:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8001fc0:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8001fc2:	2304      	movs	r3, #4
 8001fc4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
        __HAL_UNLOCK(hdma2d);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_ERROR;      
 8001fce:	2001      	movs	r0, #1
 8001fd0:	e01f      	b.n	8002012 <HAL_DMA2D_PollForTransfer+0xec>
      if(Timeout != HAL_MAX_DELAY)
 8001fd2:	1c69      	adds	r1, r5, #1
 8001fd4:	d0dc      	beq.n	8001f90 <HAL_DMA2D_PollForTransfer+0x6a>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001fd6:	b955      	cbnz	r5, 8001fee <HAL_DMA2D_PollForTransfer+0xc8>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001fd8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001fda:	f043 0320 	orr.w	r3, r3, #32
 8001fde:	65e3      	str	r3, [r4, #92]	; 0x5c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001fe0:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8001fe2:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8001fe4:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
          __HAL_UNLOCK(hdma2d);
 8001fe8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
          return HAL_TIMEOUT;
 8001fec:	e011      	b.n	8002012 <HAL_DMA2D_PollForTransfer+0xec>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8001fee:	f7ff f80f 	bl	8001010 <HAL_GetTick>
 8001ff2:	1b80      	subs	r0, r0, r6
 8001ff4:	4285      	cmp	r5, r0
 8001ff6:	d2ca      	bcs.n	8001f8e <HAL_DMA2D_PollForTransfer+0x68>
 8001ff8:	e7ee      	b.n	8001fd8 <HAL_DMA2D_PollForTransfer+0xb2>
      ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) != RESET))
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) != RESET)  || 
 8001ffc:	069b      	lsls	r3, r3, #26
 8001ffe:	d49f      	bmi.n	8001f40 <HAL_DMA2D_PollForTransfer+0x1a>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8002000:	6823      	ldr	r3, [r4, #0]
 8002002:	2212      	movs	r2, #18
 8002004:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8002006:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002008:	2301      	movs	r3, #1
 800200a:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);
 800200e:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
}
 8002012:	b002      	add	sp, #8
 8002014:	bd70      	pop	{r4, r5, r6, pc}
      if(Timeout != HAL_MAX_DELAY)
 8002016:	1c69      	adds	r1, r5, #1
 8002018:	d096      	beq.n	8001f48 <HAL_DMA2D_PollForTransfer+0x22>
        if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800201a:	2d00      	cmp	r5, #0
 800201c:	d0dc      	beq.n	8001fd8 <HAL_DMA2D_PollForTransfer+0xb2>
 800201e:	f7fe fff7 	bl	8001010 <HAL_GetTick>
 8002022:	1b80      	subs	r0, r0, r6
 8002024:	4285      	cmp	r5, r0
 8002026:	d28e      	bcs.n	8001f46 <HAL_DMA2D_PollForTransfer+0x20>
 8002028:	e7d6      	b.n	8001fd8 <HAL_DMA2D_PollForTransfer+0xb2>
	...

0800202c <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 800202c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8002030:	2b01      	cmp	r3, #1
{   
 8002032:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002034:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 8002038:	d041      	beq.n	80020be <HAL_DMA2D_ConfigLayer+0x92>
 800203a:	2201      	movs	r2, #1
 800203c:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  hdma2d->State = HAL_DMA2D_STATE_BUSY;   
 8002040:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 8002044:	6802      	ldr	r2, [r0, #0]
  if(LayerIdx == 0)
 8002046:	2900      	cmp	r1, #0
 8002048:	d14d      	bne.n	80020e6 <HAL_DMA2D_ConfigLayer+0xba>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800204a:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800204c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800204e:	6b07      	ldr	r7, [r0, #48]	; 0x30
 8002050:	f1a6 0509 	sub.w	r5, r6, #9
 8002054:	2d01      	cmp	r5, #1
 8002056:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800205a:	d832      	bhi.n	80020c2 <HAL_DMA2D_ConfigLayer+0x96>
 800205c:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA));
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	f004 417f 	and.w	r1, r4, #4278190080	; 0xff000000
 8002068:	4331      	orrs	r1, r6
 800206a:	fa07 f303 	lsl.w	r3, r7, r3
 800206e:	4319      	orrs	r1, r3
    MODIFY_REG(hdma2d->Instance->BGPFCCR, (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS), \
 8002070:	f8d2 e024 	ldr.w	lr, [r2, #36]	; 0x24
 8002074:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002078:	fa93 f3a3 	rbit	r3, r3
 800207c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8002080:	fab3 f783 	clz	r7, r3
 8002084:	fa96 f6a6 	rbit	r6, r6
 8002088:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800208a:	40bb      	lsls	r3, r7
 800208c:	4f3c      	ldr	r7, [pc, #240]	; (8002180 <HAL_DMA2D_ConfigLayer+0x154>)
 800208e:	ea0e 0707 	and.w	r7, lr, r7
 8002092:	4339      	orrs	r1, r7
 8002094:	430b      	orrs	r3, r1
 8002096:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002098:	fab6 f686 	clz	r6, r6
 800209c:	fa01 f606 	lsl.w	r6, r1, r6
 80020a0:	4333      	orrs	r3, r6
 80020a2:	6253      	str	r3, [r2, #36]	; 0x24
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020a4:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->BGOR, LayerCfg->InputOffset);
 80020a6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80020a8:	6193      	str	r3, [r2, #24]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020aa:	d802      	bhi.n	80020b2 <HAL_DMA2D_ConfigLayer+0x86>
      WRITE_REG(hdma2d->Instance->BGCOLR, LayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80020ac:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 80020b0:	6294      	str	r4, [r2, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80020b2:	2301      	movs	r3, #1
 80020b4:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
  __HAL_UNLOCK(hdma2d);  
 80020b8:	2300      	movs	r3, #0
 80020ba:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  __HAL_LOCK(hdma2d);
 80020be:	4618      	mov	r0, r3
}
 80020c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_BGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_BGPFCCR_ALPHA));
 80020ca:	fab3 f383 	clz	r3, r3
 80020ce:	fa91 f1a1 	rbit	r1, r1
 80020d2:	fab1 f181 	clz	r1, r1
 80020d6:	fa04 f101 	lsl.w	r1, r4, r1
 80020da:	fa07 f303 	lsl.w	r3, r7, r3
 80020de:	430b      	orrs	r3, r1
 80020e0:	ea43 0106 	orr.w	r1, r3, r6
 80020e4:	e7c4      	b.n	8002070 <HAL_DMA2D_ConfigLayer+0x44>
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80020e6:	2418      	movs	r4, #24
 80020e8:	fb04 0401 	mla	r4, r4, r1, r0
 80020ec:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80020f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80020f2:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80020f4:	6b24      	ldr	r4, [r4, #48]	; 0x30
 80020f6:	f1a7 0509 	sub.w	r5, r7, #9
 80020fa:	2d01      	cmp	r5, #1
 80020fc:	d82f      	bhi.n	800215e <HAL_DMA2D_ConfigLayer+0x132>
 80020fe:	fa93 f3a3 	rbit	r3, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha & DMA2D_FGPFCCR_ALPHA));
 8002102:	fab3 f383 	clz	r3, r3
 8002106:	f006 467f 	and.w	r6, r6, #4278190080	; 0xff000000
 800210a:	4337      	orrs	r7, r6
 800210c:	fa04 f303 	lsl.w	r3, r4, r3
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8002110:	433b      	orrs	r3, r7
    MODIFY_REG(hdma2d->Instance->FGPFCCR, (DMA2D_FGPFCCR_CM | DMA2D_FGPFCCR_AM | DMA2D_FGPFCCR_ALPHA | DMA2D_FGPFCCR_AI | DMA2D_FGPFCCR_RBS), \
 8002112:	f8d2 e01c 	ldr.w	lr, [r2, #28]
 8002116:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 800211a:	fa94 f4a4 	rbit	r4, r4
 800211e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8002122:	fab4 f784 	clz	r7, r4
 8002126:	fa96 f6a6 	rbit	r6, r6
 800212a:	2418      	movs	r4, #24
 800212c:	fb04 0101 	mla	r1, r4, r1, r0
 8002130:	fab6 f686 	clz	r6, r6
 8002134:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8002136:	40bc      	lsls	r4, r7
 8002138:	4f11      	ldr	r7, [pc, #68]	; (8002180 <HAL_DMA2D_ConfigLayer+0x154>)
 800213a:	ea0e 0707 	and.w	r7, lr, r7
 800213e:	433b      	orrs	r3, r7
 8002140:	4323      	orrs	r3, r4
 8002142:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8002144:	fa04 f606 	lsl.w	r6, r4, r6
 8002148:	4333      	orrs	r3, r6
 800214a:	61d3      	str	r3, [r2, #28]
    if ((LayerCfg->InputColorMode == DMA2D_INPUT_A4) || (LayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800214c:	2d01      	cmp	r5, #1
    WRITE_REG(hdma2d->Instance->FGOR, LayerCfg->InputOffset);      
 800214e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002150:	6113      	str	r3, [r2, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, LayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));      
 8002152:	bf9e      	ittt	ls
 8002154:	6b4b      	ldrls	r3, [r1, #52]	; 0x34
 8002156:	f023 437f 	bicls.w	r3, r3, #4278190080	; 0xff000000
 800215a:	6213      	strls	r3, [r2, #32]
 800215c:	e7a9      	b.n	80020b2 <HAL_DMA2D_ConfigLayer+0x86>
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	f04f 4e7f 	mov.w	lr, #4278190080	; 0xff000000
      tmp = (LayerCfg->InputColorMode | (LayerCfg->AlphaMode << DMA2D_POSITION_FGPFCCR_AM) | (LayerCfg->InputAlpha << DMA2D_POSITION_FGPFCCR_ALPHA));
 8002166:	fab3 f383 	clz	r3, r3
 800216a:	fa9e feae 	rbit	lr, lr
 800216e:	fabe fe8e 	clz	lr, lr
 8002172:	fa04 f303 	lsl.w	r3, r4, r3
 8002176:	fa06 f60e 	lsl.w	r6, r6, lr
 800217a:	4333      	orrs	r3, r6
 800217c:	e7c8      	b.n	8002110 <HAL_DMA2D_ConfigLayer+0xe4>
 800217e:	bf00      	nop
 8002180:	00ccfff0 	.word	0x00ccfff0

08002184 <FLASH_Program_Fast>:

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8002184:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <FLASH_Program_Fast+0x20>)
 8002186:	6953      	ldr	r3, [r2, #20]
 8002188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800218c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800218e:	b672      	cpsid	i
 8002190:	f501 7300 	add.w	r3, r1, #512	; 0x200
 8002194:	1a40      	subs	r0, r0, r1
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002196:	680a      	ldr	r2, [r1, #0]
 8002198:	500a      	str	r2, [r1, r0]
    dest_addr++;
    src_addr++;
 800219a:	3104      	adds	r1, #4
    row_index--;
  } while (row_index != 0U);
 800219c:	4299      	cmp	r1, r3
 800219e:	d1fa      	bne.n	8002196 <FLASH_Program_Fast+0x12>
  __ASM volatile ("cpsie i" : : : "memory");
 80021a0:	b662      	cpsie	i
 80021a2:	4770      	bx	lr
 80021a4:	40022000 	.word	0x40022000

080021a8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_FLASH_Unlock+0x1c>)
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	2a00      	cmp	r2, #0
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80021ae:	bfbf      	itttt	lt
 80021b0:	4a05      	ldrlt	r2, [pc, #20]	; (80021c8 <HAL_FLASH_Unlock+0x20>)
 80021b2:	609a      	strlt	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80021b4:	f102 3288 	addlt.w	r2, r2, #2290649224	; 0x88888888
 80021b8:	609a      	strlt	r2, [r3, #8]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80021ba:	bfba      	itte	lt
 80021bc:	6958      	ldrlt	r0, [r3, #20]
  HAL_StatusTypeDef status = HAL_OK;
 80021be:	0fc0      	lsrlt	r0, r0, #31
 80021c0:	2000      	movge	r0, #0
}
 80021c2:	4770      	bx	lr
 80021c4:	40022000 	.word	0x40022000
 80021c8:	45670123 	.word	0x45670123

080021cc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80021cc:	4a03      	ldr	r2, [pc, #12]	; (80021dc <HAL_FLASH_Lock+0x10>)
 80021ce:	6953      	ldr	r3, [r2, #20]
 80021d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021d4:	6153      	str	r3, [r2, #20]
}
 80021d6:	2000      	movs	r0, #0
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40022000 	.word	0x40022000

080021e0 <FLASH_WaitForLastOperation>:
{
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 80021e4:	f7fe ff14 	bl	8001010 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80021e8:	4c1a      	ldr	r4, [pc, #104]	; (8002254 <FLASH_WaitForLastOperation+0x74>)
  uint32_t tickstart = HAL_GetTick();
 80021ea:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80021ec:	6923      	ldr	r3, [r4, #16]
 80021ee:	03db      	lsls	r3, r3, #15
 80021f0:	d41e      	bmi.n	8002230 <FLASH_WaitForLastOperation+0x50>
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80021f2:	6923      	ldr	r3, [r4, #16]
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 80021f4:	69a0      	ldr	r0, [r4, #24]
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80021f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021fa:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80021fe:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8002202:	f023 0305 	bic.w	r3, r3, #5
  error |= (FLASH->ECCR & FLASH_FLAG_ECCD);
 8002206:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
  if(error != 0u)
 800220a:	4318      	orrs	r0, r3
 800220c:	d019      	beq.n	8002242 <FLASH_WaitForLastOperation+0x62>
    pFlash.ErrorCode |= error;
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <FLASH_WaitForLastOperation+0x78>)
 8002210:	6853      	ldr	r3, [r2, #4]
 8002212:	4303      	orrs	r3, r0
 8002214:	6053      	str	r3, [r2, #4]
    __HAL_FLASH_CLEAR_FLAG(error);
 8002216:	f010 4340 	ands.w	r3, r0, #3221225472	; 0xc0000000
 800221a:	bf1e      	ittt	ne
 800221c:	69a2      	ldrne	r2, [r4, #24]
 800221e:	4313      	orrne	r3, r2
 8002220:	61a3      	strne	r3, [r4, #24]
 8002222:	f030 4040 	bics.w	r0, r0, #3221225472	; 0xc0000000
 8002226:	d001      	beq.n	800222c <FLASH_WaitForLastOperation+0x4c>
 8002228:	4b0a      	ldr	r3, [pc, #40]	; (8002254 <FLASH_WaitForLastOperation+0x74>)
 800222a:	6118      	str	r0, [r3, #16]
    return HAL_ERROR;
 800222c:	2001      	movs	r0, #1
 800222e:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002230:	1c6a      	adds	r2, r5, #1
 8002232:	d0db      	beq.n	80021ec <FLASH_WaitForLastOperation+0xc>
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002234:	f7fe feec 	bl	8001010 <HAL_GetTick>
 8002238:	1b80      	subs	r0, r0, r6
 800223a:	4285      	cmp	r5, r0
 800223c:	d8d6      	bhi.n	80021ec <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 800223e:	2003      	movs	r0, #3
 8002240:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002242:	6923      	ldr	r3, [r4, #16]
 8002244:	f013 0301 	ands.w	r3, r3, #1
 8002248:	d002      	beq.n	8002250 <FLASH_WaitForLastOperation+0x70>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800224a:	2301      	movs	r3, #1
 800224c:	6123      	str	r3, [r4, #16]
 800224e:	bd70      	pop	{r4, r5, r6, pc}
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002250:	4618      	mov	r0, r3
}
 8002252:	bd70      	pop	{r4, r5, r6, pc}
 8002254:	40022000 	.word	0x40022000
 8002258:	20000000 	.word	0x20000000

0800225c <HAL_FLASH_Program>:
{
 800225c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 8002260:	4c24      	ldr	r4, [pc, #144]	; (80022f4 <HAL_FLASH_Program+0x98>)
{
 8002262:	469a      	mov	sl, r3
  __HAL_LOCK(&pFlash);
 8002264:	7823      	ldrb	r3, [r4, #0]
 8002266:	2b01      	cmp	r3, #1
{
 8002268:	4607      	mov	r7, r0
 800226a:	4688      	mov	r8, r1
 800226c:	4691      	mov	r9, r2
  __HAL_LOCK(&pFlash);
 800226e:	d03f      	beq.n	80022f0 <HAL_FLASH_Program+0x94>
 8002270:	2301      	movs	r3, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002272:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8002276:	7023      	strb	r3, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002278:	f7ff ffb2 	bl	80021e0 <FLASH_WaitForLastOperation>
 800227c:	4606      	mov	r6, r0
  if(status == HAL_OK)
 800227e:	bb20      	cbnz	r0, 80022ca <HAL_FLASH_Program+0x6e>
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002280:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002282:	481d      	ldr	r0, [pc, #116]	; (80022f8 <HAL_FLASH_Program+0x9c>)
 8002284:	6805      	ldr	r5, [r0, #0]
 8002286:	f415 6580 	ands.w	r5, r5, #1024	; 0x400
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800228a:	bf17      	itett	ne
 800228c:	6803      	ldrne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800228e:	7725      	strbeq	r5, [r4, #28]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002290:	f423 6380 	bicne.w	r3, r3, #1024	; 0x400
 8002294:	6003      	strne	r3, [r0, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002296:	bf1c      	itt	ne
 8002298:	2302      	movne	r3, #2
 800229a:	7723      	strbne	r3, [r4, #28]
    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800229c:	b9d7      	cbnz	r7, 80022d4 <HAL_FLASH_Program+0x78>
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800229e:	6945      	ldr	r5, [r0, #20]
 80022a0:	f045 0501 	orr.w	r5, r5, #1
 80022a4:	6145      	str	r5, [r0, #20]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80022a6:	f8c8 9000 	str.w	r9, [r8]
      prog_bit = FLASH_CR_PG;
 80022aa:	2501      	movs	r5, #1
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 80022ac:	f8c8 a004 	str.w	sl, [r8, #4]
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80022b0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80022b4:	f7ff ff94 	bl	80021e0 <FLASH_WaitForLastOperation>
 80022b8:	4606      	mov	r6, r0
    if (prog_bit != 0U)
 80022ba:	b125      	cbz	r5, 80022c6 <HAL_FLASH_Program+0x6a>
      CLEAR_BIT(FLASH->CR, prog_bit);
 80022bc:	4a0e      	ldr	r2, [pc, #56]	; (80022f8 <HAL_FLASH_Program+0x9c>)
 80022be:	6953      	ldr	r3, [r2, #20]
 80022c0:	ea23 0505 	bic.w	r5, r3, r5
 80022c4:	6155      	str	r5, [r2, #20]
    FLASH_FlushCaches();
 80022c6:	f000 f85d 	bl	8002384 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 80022ca:	2300      	movs	r3, #0
 80022cc:	7023      	strb	r3, [r4, #0]
}
 80022ce:	4630      	mov	r0, r6
 80022d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80022d4:	1e7b      	subs	r3, r7, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d901      	bls.n	80022de <HAL_FLASH_Program+0x82>
  uint32_t prog_bit = 0;
 80022da:	2500      	movs	r5, #0
 80022dc:	e7e8      	b.n	80022b0 <HAL_FLASH_Program+0x54>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80022de:	4649      	mov	r1, r9
 80022e0:	4640      	mov	r0, r8
 80022e2:	f7ff ff4f 	bl	8002184 <FLASH_Program_Fast>
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80022e6:	2f02      	cmp	r7, #2
 80022e8:	d1f7      	bne.n	80022da <HAL_FLASH_Program+0x7e>
        prog_bit = FLASH_CR_FSTPG;
 80022ea:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 80022ee:	e7df      	b.n	80022b0 <HAL_FLASH_Program+0x54>
  __HAL_LOCK(&pFlash);
 80022f0:	2602      	movs	r6, #2
 80022f2:	e7ec      	b.n	80022ce <HAL_FLASH_Program+0x72>
 80022f4:	20000000 	.word	0x20000000
 80022f8:	40022000 	.word	0x40022000

080022fc <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
 80022fc:	4a0f      	ldr	r2, [pc, #60]	; (800233c <FLASH_MassErase+0x40>)
 80022fe:	6a13      	ldr	r3, [r2, #32]
 8002300:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002304:	4613      	mov	r3, r2
 8002306:	d011      	beq.n	800232c <FLASH_MassErase+0x30>
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002308:	07c1      	lsls	r1, r0, #31
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800230a:	bf42      	ittt	mi
 800230c:	6952      	ldrmi	r2, [r2, #20]
 800230e:	f042 0204 	orrmi.w	r2, r2, #4
 8002312:	615a      	strmi	r2, [r3, #20]
    
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002314:	0782      	lsls	r2, r0, #30
 8002316:	d503      	bpl.n	8002320 <FLASH_MassErase+0x24>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002318:	695a      	ldr	r2, [r3, #20]
 800231a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800231e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002320:	4a06      	ldr	r2, [pc, #24]	; (800233c <FLASH_MassErase+0x40>)
 8002322:	6953      	ldr	r3, [r2, #20]
 8002324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002328:	6153      	str	r3, [r2, #20]
 800232a:	4770      	bx	lr
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800232c:	6953      	ldr	r3, [r2, #20]
 800232e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002332:	f043 0304 	orr.w	r3, r3, #4
 8002336:	6153      	str	r3, [r2, #20]
 8002338:	e7f2      	b.n	8002320 <FLASH_MassErase+0x24>
 800233a:	bf00      	nop
 800233c:	40022000 	.word	0x40022000

08002340 <FLASH_PageErase>:

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
#if defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 8002340:	4b0f      	ldr	r3, [pc, #60]	; (8002380 <FLASH_PageErase+0x40>)
 8002342:	6a1a      	ldr	r2, [r3, #32]
 8002344:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8002348:	695a      	ldr	r2, [r3, #20]
  if(READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) == 0U)
 800234a:	d113      	bne.n	8002374 <FLASH_PageErase+0x34>
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800234c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002350:	615a      	str	r2, [r3, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002352:	695a      	ldr	r2, [r3, #20]
 8002354:	00c0      	lsls	r0, r0, #3
 8002356:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 800235a:	f400 60ff 	and.w	r0, r0, #2040	; 0x7f8
 800235e:	4310      	orrs	r0, r2
 8002360:	6158      	str	r0, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	f042 0202 	orr.w	r2, r2, #2
 8002368:	615a      	str	r2, [r3, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800236a:	695a      	ldr	r2, [r3, #20]
 800236c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002370:	615a      	str	r2, [r3, #20]
 8002372:	4770      	bx	lr
    if((Banks & FLASH_BANK_1) != 0U)
 8002374:	07c9      	lsls	r1, r1, #31
 8002376:	d4e9      	bmi.n	800234c <FLASH_PageErase+0xc>
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8002378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800237c:	e7e8      	b.n	8002350 <FLASH_PageErase+0x10>
 800237e:	bf00      	nop
 8002380:	40022000 	.word	0x40022000

08002384 <FLASH_FlushCaches>:
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8002384:	4913      	ldr	r1, [pc, #76]	; (80023d4 <FLASH_FlushCaches+0x50>)
 8002386:	7f0b      	ldrb	r3, [r1, #28]
 8002388:	b2db      	uxtb	r3, r3

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) || 
 800238a:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 800238e:	2a01      	cmp	r2, #1
 8002390:	d10c      	bne.n	80023ac <FLASH_FlushCaches+0x28>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002392:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <FLASH_FlushCaches+0x54>)
 8002394:	6810      	ldr	r0, [r2, #0]
 8002396:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 800239a:	6010      	str	r0, [r2, #0]
 800239c:	6810      	ldr	r0, [r2, #0]
 800239e:	f420 6000 	bic.w	r0, r0, #2048	; 0x800
 80023a2:	6010      	str	r0, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023a4:	6810      	ldr	r0, [r2, #0]
 80023a6:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 80023aa:	6010      	str	r0, [r2, #0]
  }
  
  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) || 
 80023ac:	3b02      	subs	r3, #2
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d80c      	bhi.n	80023cc <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <FLASH_FlushCaches+0x54>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023c2:	601a      	str	r2, [r3, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023ca:	601a      	str	r2, [r3, #0]
  }
  
  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80023cc:	2300      	movs	r3, #0
 80023ce:	770b      	strb	r3, [r1, #28]
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000000 	.word	0x20000000
 80023d8:	40022000 	.word	0x40022000

080023dc <HAL_FLASHEx_Erase>:
{
 80023dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __HAL_LOCK(&pFlash);
 80023e0:	4c35      	ldr	r4, [pc, #212]	; (80024b8 <HAL_FLASHEx_Erase+0xdc>)
 80023e2:	7823      	ldrb	r3, [r4, #0]
 80023e4:	2b01      	cmp	r3, #1
{
 80023e6:	4606      	mov	r6, r0
 80023e8:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 80023ea:	d062      	beq.n	80024b2 <HAL_FLASHEx_Erase+0xd6>
 80023ec:	2701      	movs	r7, #1
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023ee:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 80023f2:	7027      	strb	r7, [r4, #0]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023f4:	f7ff fef4 	bl	80021e0 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80023f8:	4605      	mov	r5, r0
 80023fa:	bb40      	cbnz	r0, 800244e <HAL_FLASHEx_Erase+0x72>
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80023fc:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <HAL_FLASHEx_Erase+0xe0>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80023fe:	6060      	str	r0, [r4, #4]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	f412 7f00 	tst.w	r2, #512	; 0x200
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002406:	681a      	ldr	r2, [r3, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8002408:	d026      	beq.n	8002458 <HAL_FLASHEx_Erase+0x7c>
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800240a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800240e:	601a      	str	r2, [r3, #0]
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	0551      	lsls	r1, r2, #21
 8002414:	d506      	bpl.n	8002424 <HAL_FLASHEx_Erase+0x48>
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800241c:	601a      	str	r2, [r3, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800241e:	2303      	movs	r3, #3
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002420:	7723      	strb	r3, [r4, #28]
 8002422:	e000      	b.n	8002426 <HAL_FLASHEx_Erase+0x4a>
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002424:	7727      	strb	r7, [r4, #28]
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002426:	6833      	ldr	r3, [r6, #0]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d11f      	bne.n	800246c <HAL_FLASHEx_Erase+0x90>
      FLASH_MassErase(pEraseInit->Banks);
 800242c:	6870      	ldr	r0, [r6, #4]
 800242e:	f7ff ff65 	bl	80022fc <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002432:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002436:	f7ff fed3 	bl	80021e0 <FLASH_WaitForLastOperation>
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800243a:	4a20      	ldr	r2, [pc, #128]	; (80024bc <HAL_FLASHEx_Erase+0xe0>)
 800243c:	6953      	ldr	r3, [r2, #20]
 800243e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002442:	f023 0304 	bic.w	r3, r3, #4
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002446:	4605      	mov	r5, r0
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 8002448:	6153      	str	r3, [r2, #20]
    FLASH_FlushCaches();
 800244a:	f7ff ff9b 	bl	8002384 <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 800244e:	2300      	movs	r3, #0
 8002450:	7023      	strb	r3, [r4, #0]
}
 8002452:	4628      	mov	r0, r5
 8002454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002458:	0552      	lsls	r2, r2, #21
 800245a:	d505      	bpl.n	8002468 <HAL_FLASHEx_Erase+0x8c>
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002462:	601a      	str	r2, [r3, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002464:	2302      	movs	r3, #2
 8002466:	e7db      	b.n	8002420 <HAL_FLASHEx_Erase+0x44>
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002468:	7720      	strb	r0, [r4, #28]
 800246a:	e7dc      	b.n	8002426 <HAL_FLASHEx_Erase+0x4a>
      *PageError = 0xFFFFFFFFU;
 800246c:	f04f 33ff 	mov.w	r3, #4294967295
 8002470:	f8c8 3000 	str.w	r3, [r8]
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002474:	68b7      	ldr	r7, [r6, #8]
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002476:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80024bc <HAL_FLASHEx_Erase+0xe0>
 800247a:	f8df a044 	ldr.w	sl, [pc, #68]	; 80024c0 <HAL_FLASHEx_Erase+0xe4>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800247e:	68b3      	ldr	r3, [r6, #8]
 8002480:	68f2      	ldr	r2, [r6, #12]
 8002482:	4413      	add	r3, r2
 8002484:	429f      	cmp	r7, r3
 8002486:	d2e0      	bcs.n	800244a <HAL_FLASHEx_Erase+0x6e>
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8002488:	6871      	ldr	r1, [r6, #4]
 800248a:	4638      	mov	r0, r7
 800248c:	f7ff ff58 	bl	8002340 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002490:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002494:	f7ff fea4 	bl	80021e0 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8002498:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800249c:	ea03 030a 	and.w	r3, r3, sl
 80024a0:	f8c9 3014 	str.w	r3, [r9, #20]
        if (status != HAL_OK)
 80024a4:	b118      	cbz	r0, 80024ae <HAL_FLASHEx_Erase+0xd2>
          *PageError = page_index;
 80024a6:	f8c8 7000 	str.w	r7, [r8]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024aa:	4605      	mov	r5, r0
          break;
 80024ac:	e7cd      	b.n	800244a <HAL_FLASHEx_Erase+0x6e>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80024ae:	3701      	adds	r7, #1
 80024b0:	e7e5      	b.n	800247e <HAL_FLASHEx_Erase+0xa2>
  __HAL_LOCK(&pFlash);
 80024b2:	2502      	movs	r5, #2
 80024b4:	e7cd      	b.n	8002452 <HAL_FLASHEx_Erase+0x76>
 80024b6:	bf00      	nop
 80024b8:	20000000 	.word	0x20000000
 80024bc:	40022000 	.word	0x40022000
 80024c0:	fffff805 	.word	0xfffff805

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c8:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024cc:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8002670 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024d0:	4a65      	ldr	r2, [pc, #404]	; (8002668 <HAL_GPIO_Init+0x1a4>)
  uint32_t position = 0x00u;
 80024d2:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024d4:	fa38 f403 	lsrs.w	r4, r8, r3
 80024d8:	d102      	bne.n	80024e0 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 80024da:	b003      	add	sp, #12
 80024dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024e0:	f04f 0e01 	mov.w	lr, #1
 80024e4:	fa0e fe03 	lsl.w	lr, lr, r3
    if (iocurrent != 0x00u)
 80024e8:	ea18 060e 	ands.w	r6, r8, lr
 80024ec:	f000 80ab 	beq.w	8002646 <HAL_GPIO_Init+0x182>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f0:	684c      	ldr	r4, [r1, #4]
 80024f2:	f024 0710 	bic.w	r7, r4, #16
 80024f6:	2f02      	cmp	r7, #2
 80024f8:	d116      	bne.n	8002528 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 80024fa:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80024fe:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002502:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8002506:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800250a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800250e:	f04f 0c0f 	mov.w	ip, #15
 8002512:	fa0c fc0b 	lsl.w	ip, ip, fp
 8002516:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800251a:	690d      	ldr	r5, [r1, #16]
 800251c:	fa05 f50b 	lsl.w	r5, r5, fp
 8002520:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8002524:	f8ca 5020 	str.w	r5, [sl, #32]
 8002528:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800252c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800252e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002532:	fa05 f50a 	lsl.w	r5, r5, sl
 8002536:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002538:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800253c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002540:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002544:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002546:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800254a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800254c:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002550:	d811      	bhi.n	8002576 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8002552:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002554:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002558:	68cf      	ldr	r7, [r1, #12]
 800255a:	fa07 fc0a 	lsl.w	ip, r7, sl
 800255e:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8002562:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002564:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002566:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800256a:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800256e:	409f      	lsls	r7, r3
 8002570:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002574:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8002576:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002578:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800257a:	688f      	ldr	r7, [r1, #8]
 800257c:	fa07 f70a 	lsl.w	r7, r7, sl
 8002580:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8002582:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002584:	00e5      	lsls	r5, r4, #3
 8002586:	d55e      	bpl.n	8002646 <HAL_GPIO_Init+0x182>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002588:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 800258c:	f045 0501 	orr.w	r5, r5, #1
 8002590:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8002594:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8002598:	f023 0703 	bic.w	r7, r3, #3
 800259c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80025a0:	f005 0501 	and.w	r5, r5, #1
 80025a4:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 80025a8:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025aa:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ae:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80025b0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025b4:	f04f 0c0f 	mov.w	ip, #15
 80025b8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80025bc:	fa0c f50e 	lsl.w	r5, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025c0:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80025c4:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025c8:	d03f      	beq.n	800264a <HAL_GPIO_Init+0x186>
 80025ca:	4d28      	ldr	r5, [pc, #160]	; (800266c <HAL_GPIO_Init+0x1a8>)
 80025cc:	42a8      	cmp	r0, r5
 80025ce:	d03e      	beq.n	800264e <HAL_GPIO_Init+0x18a>
 80025d0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025d4:	42a8      	cmp	r0, r5
 80025d6:	d03c      	beq.n	8002652 <HAL_GPIO_Init+0x18e>
 80025d8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025dc:	42a8      	cmp	r0, r5
 80025de:	d03a      	beq.n	8002656 <HAL_GPIO_Init+0x192>
 80025e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025e4:	42a8      	cmp	r0, r5
 80025e6:	d038      	beq.n	800265a <HAL_GPIO_Init+0x196>
 80025e8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025ec:	42a8      	cmp	r0, r5
 80025ee:	d036      	beq.n	800265e <HAL_GPIO_Init+0x19a>
 80025f0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025f4:	42a8      	cmp	r0, r5
 80025f6:	d034      	beq.n	8002662 <HAL_GPIO_Init+0x19e>
 80025f8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80025fc:	42a8      	cmp	r0, r5
 80025fe:	bf14      	ite	ne
 8002600:	2508      	movne	r5, #8
 8002602:	2507      	moveq	r5, #7
 8002604:	fa05 f50e 	lsl.w	r5, r5, lr
 8002608:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 800260c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR1;
 800260e:	6815      	ldr	r5, [r2, #0]
        temp &= ~(iocurrent);
 8002610:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002612:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8002616:	bf0c      	ite	eq
 8002618:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800261a:	4335      	orrne	r5, r6
        EXTI->IMR1 = temp;
 800261c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR1;
 800261e:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002620:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002624:	bf0c      	ite	eq
 8002626:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002628:	4335      	orrne	r5, r6
        EXTI->EMR1 = temp;
 800262a:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR1;
 800262c:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800262e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002632:	bf0c      	ite	eq
 8002634:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8002636:	4335      	orrne	r5, r6
        EXTI->RTSR1 = temp;
 8002638:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR1;
 800263a:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800263c:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 800263e:	bf54      	ite	pl
 8002640:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8002642:	4335      	orrmi	r5, r6
        EXTI->FTSR1 = temp;
 8002644:	60d5      	str	r5, [r2, #12]
    position++;
 8002646:	3301      	adds	r3, #1
 8002648:	e744      	b.n	80024d4 <HAL_GPIO_Init+0x10>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800264a:	2500      	movs	r5, #0
 800264c:	e7da      	b.n	8002604 <HAL_GPIO_Init+0x140>
 800264e:	2501      	movs	r5, #1
 8002650:	e7d8      	b.n	8002604 <HAL_GPIO_Init+0x140>
 8002652:	2502      	movs	r5, #2
 8002654:	e7d6      	b.n	8002604 <HAL_GPIO_Init+0x140>
 8002656:	2503      	movs	r5, #3
 8002658:	e7d4      	b.n	8002604 <HAL_GPIO_Init+0x140>
 800265a:	2504      	movs	r5, #4
 800265c:	e7d2      	b.n	8002604 <HAL_GPIO_Init+0x140>
 800265e:	2505      	movs	r5, #5
 8002660:	e7d0      	b.n	8002604 <HAL_GPIO_Init+0x140>
 8002662:	2506      	movs	r5, #6
 8002664:	e7ce      	b.n	8002604 <HAL_GPIO_Init+0x140>
 8002666:	bf00      	nop
 8002668:	40010400 	.word	0x40010400
 800266c:	48000400 	.word	0x48000400
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002678:	4d46      	ldr	r5, [pc, #280]	; (8002794 <HAL_GPIO_DeInit+0x120>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800267a:	f8df a120 	ldr.w	sl, [pc, #288]	; 800279c <HAL_GPIO_DeInit+0x128>
 800267e:	f8df b120 	ldr.w	fp, [pc, #288]	; 80027a0 <HAL_GPIO_DeInit+0x12c>
  uint32_t position = 0x00u;
 8002682:	2200      	movs	r2, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002684:	f04f 0901 	mov.w	r9, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8002688:	fa31 f302 	lsrs.w	r3, r1, r2
 800268c:	d101      	bne.n	8002692 <HAL_GPIO_DeInit+0x1e>
      }
    }

    position++;
  }
}
 800268e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002692:	fa09 f802 	lsl.w	r8, r9, r2
    if (iocurrent != 0x00u)
 8002696:	ea11 0608 	ands.w	r6, r1, r8
 800269a:	d06b      	beq.n	8002774 <HAL_GPIO_DeInit+0x100>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800269c:	6807      	ldr	r7, [r0, #0]
 800269e:	2303      	movs	r3, #3
 80026a0:	0054      	lsls	r4, r2, #1
 80026a2:	fa03 f404 	lsl.w	r4, r3, r4
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80026a6:	fa22 fc03 	lsr.w	ip, r2, r3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80026aa:	4327      	orrs	r7, r4
 80026ac:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80026b0:	6007      	str	r7, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80026b2:	f8dc 7020 	ldr.w	r7, [ip, #32]
 80026b6:	f002 0e07 	and.w	lr, r2, #7
 80026ba:	463b      	mov	r3, r7
 80026bc:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80026c0:	270f      	movs	r7, #15
 80026c2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80026c6:	ea23 0e0e 	bic.w	lr, r3, lr
 80026ca:	f8cc e020 	str.w	lr, [ip, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80026ce:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80026d2:	43e4      	mvns	r4, r4
 80026d4:	ea0e 0e04 	and.w	lr, lr, r4
 80026d8:	f8c0 e008 	str.w	lr, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026dc:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80026e0:	ea2e 0808 	bic.w	r8, lr, r8
 80026e4:	f8c0 8004 	str.w	r8, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80026e8:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 80026ec:	ea04 040e 	and.w	r4, r4, lr
 80026f0:	60c4      	str	r4, [r0, #12]
 80026f2:	f022 0403 	bic.w	r4, r2, #3
 80026f6:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80026fa:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80026fe:	f002 0e03 	and.w	lr, r2, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002702:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002706:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800270a:	fa07 f70e 	lsl.w	r7, r7, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800270e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002712:	ea0c 0c07 	and.w	ip, ip, r7
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002716:	d02f      	beq.n	8002778 <HAL_GPIO_DeInit+0x104>
 8002718:	4b1f      	ldr	r3, [pc, #124]	; (8002798 <HAL_GPIO_DeInit+0x124>)
 800271a:	4298      	cmp	r0, r3
 800271c:	d02e      	beq.n	800277c <HAL_GPIO_DeInit+0x108>
 800271e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002722:	4298      	cmp	r0, r3
 8002724:	d02c      	beq.n	8002780 <HAL_GPIO_DeInit+0x10c>
 8002726:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800272a:	4298      	cmp	r0, r3
 800272c:	d02a      	beq.n	8002784 <HAL_GPIO_DeInit+0x110>
 800272e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002732:	4298      	cmp	r0, r3
 8002734:	d028      	beq.n	8002788 <HAL_GPIO_DeInit+0x114>
 8002736:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800273a:	4298      	cmp	r0, r3
 800273c:	d026      	beq.n	800278c <HAL_GPIO_DeInit+0x118>
 800273e:	4550      	cmp	r0, sl
 8002740:	d026      	beq.n	8002790 <HAL_GPIO_DeInit+0x11c>
 8002742:	4558      	cmp	r0, fp
 8002744:	bf0c      	ite	eq
 8002746:	2307      	moveq	r3, #7
 8002748:	2308      	movne	r3, #8
 800274a:	fa03 f30e 	lsl.w	r3, r3, lr
 800274e:	459c      	cmp	ip, r3
 8002750:	d110      	bne.n	8002774 <HAL_GPIO_DeInit+0x100>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002752:	68a3      	ldr	r3, [r4, #8]
 8002754:	ea23 0707 	bic.w	r7, r3, r7
 8002758:	60a7      	str	r7, [r4, #8]
        EXTI->IMR1 &= ~(iocurrent);
 800275a:	682b      	ldr	r3, [r5, #0]
 800275c:	43f6      	mvns	r6, r6
 800275e:	4033      	ands	r3, r6
 8002760:	602b      	str	r3, [r5, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002762:	686b      	ldr	r3, [r5, #4]
 8002764:	4033      	ands	r3, r6
 8002766:	606b      	str	r3, [r5, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002768:	68ab      	ldr	r3, [r5, #8]
 800276a:	4033      	ands	r3, r6
 800276c:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800276e:	68eb      	ldr	r3, [r5, #12]
 8002770:	401e      	ands	r6, r3
 8002772:	60ee      	str	r6, [r5, #12]
    position++;
 8002774:	3201      	adds	r2, #1
 8002776:	e787      	b.n	8002688 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002778:	2300      	movs	r3, #0
 800277a:	e7e6      	b.n	800274a <HAL_GPIO_DeInit+0xd6>
 800277c:	2301      	movs	r3, #1
 800277e:	e7e4      	b.n	800274a <HAL_GPIO_DeInit+0xd6>
 8002780:	2302      	movs	r3, #2
 8002782:	e7e2      	b.n	800274a <HAL_GPIO_DeInit+0xd6>
 8002784:	2303      	movs	r3, #3
 8002786:	e7e0      	b.n	800274a <HAL_GPIO_DeInit+0xd6>
 8002788:	2304      	movs	r3, #4
 800278a:	e7de      	b.n	800274a <HAL_GPIO_DeInit+0xd6>
 800278c:	2305      	movs	r3, #5
 800278e:	e7dc      	b.n	800274a <HAL_GPIO_DeInit+0xd6>
 8002790:	2306      	movs	r3, #6
 8002792:	e7da      	b.n	800274a <HAL_GPIO_DeInit+0xd6>
 8002794:	40010400 	.word	0x40010400
 8002798:	48000400 	.word	0x48000400
 800279c:	48001800 	.word	0x48001800
 80027a0:	48001c00 	.word	0x48001c00

080027a4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80027a4:	6903      	ldr	r3, [r0, #16]
 80027a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80027a8:	bf14      	ite	ne
 80027aa:	2001      	movne	r0, #1
 80027ac:	2000      	moveq	r0, #0
 80027ae:	4770      	bx	lr

080027b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027b0:	b10a      	cbz	r2, 80027b6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027b2:	6181      	str	r1, [r0, #24]
 80027b4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027b6:	6281      	str	r1, [r0, #40]	; 0x28
 80027b8:	4770      	bx	lr

080027ba <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80027ba:	6943      	ldr	r3, [r0, #20]
 80027bc:	4059      	eors	r1, r3
 80027be:	6141      	str	r1, [r0, #20]
 80027c0:	4770      	bx	lr

080027c2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80027c2:	4770      	bx	lr

080027c4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80027c4:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027c6:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80027c8:	6959      	ldr	r1, [r3, #20]
 80027ca:	4201      	tst	r1, r0
 80027cc:	d002      	beq.n	80027d4 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027ce:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027d0:	f7ff fff7 	bl	80027c2 <HAL_GPIO_EXTI_Callback>
 80027d4:	bd08      	pop	{r3, pc}
 80027d6:	bf00      	nop
 80027d8:	40010400 	.word	0x40010400

080027dc <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80027dc:	6803      	ldr	r3, [r0, #0]
 80027de:	699a      	ldr	r2, [r3, #24]
 80027e0:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 80027e2:	bf44      	itt	mi
 80027e4:	2200      	movmi	r2, #0
 80027e6:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e8:	699a      	ldr	r2, [r3, #24]
 80027ea:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027ec:	bf5e      	ittt	pl
 80027ee:	699a      	ldrpl	r2, [r3, #24]
 80027f0:	f042 0201 	orrpl.w	r2, r2, #1
 80027f4:	619a      	strpl	r2, [r3, #24]
 80027f6:	4770      	bx	lr

080027f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80027f8:	b530      	push	{r4, r5, lr}
 80027fa:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80027fc:	6805      	ldr	r5, [r0, #0]
 80027fe:	4323      	orrs	r3, r4
 8002800:	0d64      	lsrs	r4, r4, #21
 8002802:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 8002806:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 800280a:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 800280e:	6868      	ldr	r0, [r5, #4]
 8002810:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8002814:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8002818:	4319      	orrs	r1, r3
 800281a:	f044 0403 	orr.w	r4, r4, #3
 800281e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002822:	ea20 0404 	bic.w	r4, r0, r4
 8002826:	4321      	orrs	r1, r4
 8002828:	6069      	str	r1, [r5, #4]
 800282a:	bd30      	pop	{r4, r5, pc}

0800282c <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800282c:	f011 0301 	ands.w	r3, r1, #1
 8002830:	d007      	beq.n	8002842 <I2C_Disable_IRQ+0x16>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002832:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002836:	f003 0328 	and.w	r3, r3, #40	; 0x28
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800283a:	2b28      	cmp	r3, #40	; 0x28
 800283c:	bf0c      	ite	eq
 800283e:	2342      	moveq	r3, #66	; 0x42
 8002840:	23f2      	movne	r3, #242	; 0xf2
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002842:	078a      	lsls	r2, r1, #30
 8002844:	d509      	bpl.n	800285a <I2C_Disable_IRQ+0x2e>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002846:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800284a:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800284e:	2a28      	cmp	r2, #40	; 0x28
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002850:	bf0c      	ite	eq
 8002852:	f043 0344 	orreq.w	r3, r3, #68	; 0x44
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002856:	f043 03f4 	orrne.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800285a:	074a      	lsls	r2, r1, #29
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800285c:	f001 0211 	and.w	r2, r1, #17
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002860:	bf48      	it	mi
 8002862:	f043 03b8 	orrmi.w	r3, r3, #184	; 0xb8
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002866:	f001 0112 	and.w	r1, r1, #18
  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800286a:	2a11      	cmp	r2, #17
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800286c:	bf08      	it	eq
 800286e:	f043 0390 	orreq.w	r3, r3, #144	; 0x90
  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 8002872:	2912      	cmp	r1, #18
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002874:	6801      	ldr	r1, [r0, #0]
 8002876:	680a      	ldr	r2, [r1, #0]
    tmpisr |= I2C_IT_TCI;
 8002878:	bf08      	it	eq
 800287a:	f043 0360 	orreq.w	r3, r3, #96	; 0x60
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800287e:	ea22 0303 	bic.w	r3, r2, r3
 8002882:	600b      	str	r3, [r1, #0]
 8002884:	4770      	bx	lr

08002886 <I2C_WaitOnFlagUntilTimeout>:
{
 8002886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800288a:	9f06      	ldr	r7, [sp, #24]
 800288c:	4604      	mov	r4, r0
 800288e:	4688      	mov	r8, r1
 8002890:	4616      	mov	r6, r2
 8002892:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002894:	6822      	ldr	r2, [r4, #0]
 8002896:	6993      	ldr	r3, [r2, #24]
 8002898:	ea38 0303 	bics.w	r3, r8, r3
 800289c:	bf0c      	ite	eq
 800289e:	2301      	moveq	r3, #1
 80028a0:	2300      	movne	r3, #0
 80028a2:	42b3      	cmp	r3, r6
 80028a4:	d002      	beq.n	80028ac <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80028a6:	2000      	movs	r0, #0
}
 80028a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80028ac:	1c6b      	adds	r3, r5, #1
 80028ae:	d0f2      	beq.n	8002896 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028b0:	f7fe fbae 	bl	8001010 <HAL_GetTick>
 80028b4:	1bc0      	subs	r0, r0, r7
 80028b6:	4285      	cmp	r5, r0
 80028b8:	d301      	bcc.n	80028be <I2C_WaitOnFlagUntilTimeout+0x38>
 80028ba:	2d00      	cmp	r5, #0
 80028bc:	d1ea      	bne.n	8002894 <I2C_WaitOnFlagUntilTimeout+0xe>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80028c0:	f043 0320 	orr.w	r3, r3, #32
 80028c4:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028c6:	2320      	movs	r3, #32
 80028c8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80028d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80028d6:	2001      	movs	r0, #1
 80028d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080028dc <I2C_IsAcknowledgeFailed>:
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028dc:	6803      	ldr	r3, [r0, #0]
{
 80028de:	b570      	push	{r4, r5, r6, lr}
 80028e0:	4604      	mov	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028e2:	6998      	ldr	r0, [r3, #24]
 80028e4:	f010 0010 	ands.w	r0, r0, #16
{
 80028e8:	460d      	mov	r5, r1
 80028ea:	4616      	mov	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028ec:	d116      	bne.n	800291c <I2C_IsAcknowledgeFailed+0x40>
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
      if (Timeout != HAL_MAX_DELAY)
 80028f0:	1c69      	adds	r1, r5, #1
 80028f2:	d014      	beq.n	800291e <I2C_IsAcknowledgeFailed+0x42>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f4:	f7fe fb8c 	bl	8001010 <HAL_GetTick>
 80028f8:	1b80      	subs	r0, r0, r6
 80028fa:	4285      	cmp	r5, r0
 80028fc:	d300      	bcc.n	8002900 <I2C_IsAcknowledgeFailed+0x24>
 80028fe:	b96d      	cbnz	r5, 800291c <I2C_IsAcknowledgeFailed+0x40>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002900:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002902:	f043 0320 	orr.w	r3, r3, #32
 8002906:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002908:	2320      	movs	r3, #32
 800290a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800290e:	2300      	movs	r3, #0
 8002910:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8002914:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 8002918:	2001      	movs	r0, #1
}
 800291a:	bd70      	pop	{r4, r5, r6, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	6999      	ldr	r1, [r3, #24]
 8002920:	068a      	lsls	r2, r1, #26
 8002922:	d5e5      	bpl.n	80028f0 <I2C_IsAcknowledgeFailed+0x14>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002924:	2210      	movs	r2, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002926:	2520      	movs	r5, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002928:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800292a:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800292c:	61dd      	str	r5, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800292e:	f7ff ff55 	bl	80027dc <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002932:	6822      	ldr	r2, [r4, #0]
 8002934:	6853      	ldr	r3, [r2, #4]
 8002936:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800293a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800293e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002948:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800294a:	f043 0304 	orr.w	r3, r3, #4
 800294e:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002950:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
 8002954:	e7db      	b.n	800290e <I2C_IsAcknowledgeFailed+0x32>

08002956 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002956:	b570      	push	{r4, r5, r6, lr}
 8002958:	4604      	mov	r4, r0
 800295a:	460d      	mov	r5, r1
 800295c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800295e:	6823      	ldr	r3, [r4, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	079b      	lsls	r3, r3, #30
 8002964:	d501      	bpl.n	800296a <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8002966:	2000      	movs	r0, #0
 8002968:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800296a:	4632      	mov	r2, r6
 800296c:	4629      	mov	r1, r5
 800296e:	4620      	mov	r0, r4
 8002970:	f7ff ffb4 	bl	80028dc <I2C_IsAcknowledgeFailed>
 8002974:	b9a0      	cbnz	r0, 80029a0 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8002976:	1c6a      	adds	r2, r5, #1
 8002978:	d0f1      	beq.n	800295e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297a:	f7fe fb49 	bl	8001010 <HAL_GetTick>
 800297e:	1b80      	subs	r0, r0, r6
 8002980:	4285      	cmp	r5, r0
 8002982:	d301      	bcc.n	8002988 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002984:	2d00      	cmp	r5, #0
 8002986:	d1ea      	bne.n	800295e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002988:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800298a:	f043 0320 	orr.w	r3, r3, #32
 800298e:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002990:	2320      	movs	r3, #32
 8002992:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002996:	2300      	movs	r3, #0
 8002998:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800299c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80029a0:	2001      	movs	r0, #1
}
 80029a2:	bd70      	pop	{r4, r5, r6, pc}

080029a4 <I2C_RequestMemoryRead>:
{
 80029a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029a6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80029a8:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029aa:	4b16      	ldr	r3, [pc, #88]	; (8002a04 <I2C_RequestMemoryRead+0x60>)
 80029ac:	9300      	str	r3, [sp, #0]
{
 80029ae:	4605      	mov	r5, r0
 80029b0:	4614      	mov	r4, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80029b2:	2300      	movs	r3, #0
 80029b4:	b2fa      	uxtb	r2, r7
 80029b6:	f7ff ff1f 	bl	80027f8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029ba:	4632      	mov	r2, r6
 80029bc:	9908      	ldr	r1, [sp, #32]
 80029be:	4628      	mov	r0, r5
 80029c0:	f7ff ffc9 	bl	8002956 <I2C_WaitOnTXISFlagUntilTimeout>
 80029c4:	b110      	cbz	r0, 80029cc <I2C_RequestMemoryRead+0x28>
    return HAL_ERROR;
 80029c6:	2001      	movs	r0, #1
}
 80029c8:	b003      	add	sp, #12
 80029ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029cc:	2f01      	cmp	r7, #1
 80029ce:	682b      	ldr	r3, [r5, #0]
 80029d0:	d10c      	bne.n	80029ec <I2C_RequestMemoryRead+0x48>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029d2:	b2e4      	uxtb	r4, r4
 80029d4:	629c      	str	r4, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80029d6:	9b08      	ldr	r3, [sp, #32]
 80029d8:	9600      	str	r6, [sp, #0]
 80029da:	2200      	movs	r2, #0
 80029dc:	2140      	movs	r1, #64	; 0x40
 80029de:	4628      	mov	r0, r5
 80029e0:	f7ff ff51 	bl	8002886 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 80029e4:	3000      	adds	r0, #0
 80029e6:	bf18      	it	ne
 80029e8:	2001      	movne	r0, #1
 80029ea:	e7ed      	b.n	80029c8 <I2C_RequestMemoryRead+0x24>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80029ec:	0a22      	lsrs	r2, r4, #8
 80029ee:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029f0:	9908      	ldr	r1, [sp, #32]
 80029f2:	4632      	mov	r2, r6
 80029f4:	4628      	mov	r0, r5
 80029f6:	f7ff ffae 	bl	8002956 <I2C_WaitOnTXISFlagUntilTimeout>
 80029fa:	2800      	cmp	r0, #0
 80029fc:	d1e3      	bne.n	80029c6 <I2C_RequestMemoryRead+0x22>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80029fe:	682b      	ldr	r3, [r5, #0]
 8002a00:	e7e7      	b.n	80029d2 <I2C_RequestMemoryRead+0x2e>
 8002a02:	bf00      	nop
 8002a04:	80002000 	.word	0x80002000

08002a08 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002a08:	b570      	push	{r4, r5, r6, lr}
 8002a0a:	4604      	mov	r4, r0
 8002a0c:	460d      	mov	r5, r1
 8002a0e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	069b      	lsls	r3, r3, #26
 8002a16:	d501      	bpl.n	8002a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8002a18:	2000      	movs	r0, #0
 8002a1a:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1c:	4632      	mov	r2, r6
 8002a1e:	4629      	mov	r1, r5
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7ff ff5b 	bl	80028dc <I2C_IsAcknowledgeFailed>
 8002a26:	b990      	cbnz	r0, 8002a4e <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a28:	f7fe faf2 	bl	8001010 <HAL_GetTick>
 8002a2c:	1b80      	subs	r0, r0, r6
 8002a2e:	4285      	cmp	r5, r0
 8002a30:	d301      	bcc.n	8002a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8002a32:	2d00      	cmp	r5, #0
 8002a34:	d1ec      	bne.n	8002a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a36:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a38:	f043 0320 	orr.w	r3, r3, #32
 8002a3c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	2320      	movs	r3, #32
 8002a40:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002a4a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002a4e:	2001      	movs	r0, #1
}
 8002a50:	bd70      	pop	{r4, r5, r6, pc}

08002a52 <HAL_I2C_Init>:
{
 8002a52:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8002a54:	4604      	mov	r4, r0
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d04a      	beq.n	8002af0 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a5a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002a5e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002a62:	b91b      	cbnz	r3, 8002a6c <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8002a64:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002a68:	f01e fdd0 	bl	802160c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6c:	2324      	movs	r3, #36	; 0x24
 8002a6e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002a72:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a74:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	f022 0201 	bic.w	r2, r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002a7e:	6862      	ldr	r2, [r4, #4]
 8002a80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a84:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a86:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a88:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002a8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a92:	d124      	bne.n	8002ade <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002a94:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a98:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a9a:	685a      	ldr	r2, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002a9c:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a9e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002aa2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002aa6:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002aae:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8002ab0:	6922      	ldr	r2, [r4, #16]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	69a1      	ldr	r1, [r4, #24]
 8002ab6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002aba:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002abc:	6a21      	ldr	r1, [r4, #32]
 8002abe:	69e2      	ldr	r2, [r4, #28]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002acc:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8002ace:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ad2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ad6:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad8:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  return HAL_OK;
 8002adc:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ade:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ae2:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ae4:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ae6:	bf04      	itt	eq
 8002ae8:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8002aec:	605a      	streq	r2, [r3, #4]
 8002aee:	e7d4      	b.n	8002a9a <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8002af0:	2001      	movs	r0, #1
}
 8002af2:	bd10      	pop	{r4, pc}

08002af4 <HAL_I2C_Mem_Read>:
{
 8002af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af8:	469b      	mov	fp, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002afa:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8002afe:	b085      	sub	sp, #20
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b00:	2b20      	cmp	r3, #32
{
 8002b02:	4604      	mov	r4, r0
 8002b04:	460f      	mov	r7, r1
 8002b06:	9203      	str	r2, [sp, #12]
 8002b08:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 8002b0c:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b10:	f040 80a9 	bne.w	8002c66 <HAL_I2C_Mem_Read+0x172>
    if ((pData == NULL) || (Size == 0U))
 8002b14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002b16:	b113      	cbz	r3, 8002b1e <HAL_I2C_Mem_Read+0x2a>
 8002b18:	f1ba 0f00 	cmp.w	sl, #0
 8002b1c:	d106      	bne.n	8002b2c <HAL_I2C_Mem_Read+0x38>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b22:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 8002b24:	2001      	movs	r0, #1
}
 8002b26:	b005      	add	sp, #20
 8002b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002b2c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	f000 8098 	beq.w	8002c66 <HAL_I2C_Mem_Read+0x172>
 8002b36:	2501      	movs	r5, #1
 8002b38:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fa68 	bl	8001010 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b40:	2319      	movs	r3, #25
 8002b42:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8002b44:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b46:	462a      	mov	r2, r5
 8002b48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f7ff fe9a 	bl	8002886 <I2C_WaitOnFlagUntilTimeout>
 8002b52:	4681      	mov	r9, r0
 8002b54:	2800      	cmp	r0, #0
 8002b56:	d1e5      	bne.n	8002b24 <HAL_I2C_Mem_Read+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b58:	2322      	movs	r3, #34	; 0x22
 8002b5a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b5e:	2340      	movs	r3, #64	; 0x40
 8002b60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->pBuffPtr  = pData;
 8002b64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b66:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8002b68:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 8002b6a:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8002b6c:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b70:	9601      	str	r6, [sp, #4]
 8002b72:	f8cd 8000 	str.w	r8, [sp]
 8002b76:	465b      	mov	r3, fp
 8002b78:	9a03      	ldr	r2, [sp, #12]
 8002b7a:	4639      	mov	r1, r7
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f7ff ff11 	bl	80029a4 <I2C_RequestMemoryRead>
 8002b82:	b110      	cbz	r0, 8002b8a <HAL_I2C_Mem_Read+0x96>
      __HAL_UNLOCK(hi2c);
 8002b84:	f884 9040 	strb.w	r9, [r4, #64]	; 0x40
 8002b88:	e7cc      	b.n	8002b24 <HAL_I2C_Mem_Read+0x30>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002b8c:	b29b      	uxth	r3, r3
 8002b8e:	2bff      	cmp	r3, #255	; 0xff
 8002b90:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <HAL_I2C_Mem_Read+0x178>)
 8002b92:	d958      	bls.n	8002c46 <HAL_I2C_Mem_Read+0x152>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b94:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002b96:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b98:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002b9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002b9e:	4639      	mov	r1, r7
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f7ff fe29 	bl	80027f8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002ba6:	9600      	str	r6, [sp, #0]
 8002ba8:	4643      	mov	r3, r8
 8002baa:	2200      	movs	r2, #0
 8002bac:	2104      	movs	r1, #4
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f7ff fe69 	bl	8002886 <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	2800      	cmp	r0, #0
 8002bb6:	d1b5      	bne.n	8002b24 <HAL_I2C_Mem_Read+0x30>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bb8:	6822      	ldr	r2, [r4, #0]
 8002bba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002bbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bbe:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8002bc2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002bc8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002bd2:	3a01      	subs	r2, #1
 8002bd4:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bd6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002bd8:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bda:	b1ab      	cbz	r3, 8002c08 <HAL_I2C_Mem_Read+0x114>
 8002bdc:	b9a2      	cbnz	r2, 8002c08 <HAL_I2C_Mem_Read+0x114>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bde:	9600      	str	r6, [sp, #0]
 8002be0:	4643      	mov	r3, r8
 8002be2:	2180      	movs	r1, #128	; 0x80
 8002be4:	4620      	mov	r0, r4
 8002be6:	f7ff fe4e 	bl	8002886 <I2C_WaitOnFlagUntilTimeout>
 8002bea:	2800      	cmp	r0, #0
 8002bec:	d19a      	bne.n	8002b24 <HAL_I2C_Mem_Read+0x30>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2bff      	cmp	r3, #255	; 0xff
 8002bf4:	d92f      	bls.n	8002c56 <HAL_I2C_Mem_Read+0x162>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bf6:	22ff      	movs	r2, #255	; 0xff
 8002bf8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002bfa:	9000      	str	r0, [sp, #0]
 8002bfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c00:	4639      	mov	r1, r7
 8002c02:	4620      	mov	r0, r4
 8002c04:	f7ff fdf8 	bl	80027f8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U);
 8002c08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d1ca      	bne.n	8002ba6 <HAL_I2C_Mem_Read+0xb2>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c10:	4632      	mov	r2, r6
 8002c12:	4641      	mov	r1, r8
 8002c14:	4620      	mov	r0, r4
 8002c16:	f7ff fef7 	bl	8002a08 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	d182      	bne.n	8002b24 <HAL_I2C_Mem_Read+0x30>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	2120      	movs	r1, #32
 8002c22:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002c2a:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002c2e:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002c32:	f022 0201 	bic.w	r2, r2, #1
 8002c36:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002c38:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002c3c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c40:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002c44:	e76f      	b.n	8002b26 <HAL_I2C_Mem_Read+0x32>
      hi2c->XferSize = hi2c->XferCount;
 8002c46:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002c48:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002c4a:	b292      	uxth	r2, r2
 8002c4c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	e7a3      	b.n	8002b9e <HAL_I2C_Mem_Read+0xaa>
          hi2c->XferSize = hi2c->XferCount;
 8002c56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c58:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 8002c5a:	b292      	uxth	r2, r2
 8002c5c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	e7cc      	b.n	8002c00 <HAL_I2C_Mem_Read+0x10c>
    return HAL_BUSY;
 8002c66:	2002      	movs	r0, #2
 8002c68:	e75d      	b.n	8002b26 <HAL_I2C_Mem_Read+0x32>
 8002c6a:	bf00      	nop
 8002c6c:	80002400 	.word	0x80002400

08002c70 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c70:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 8002c72:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c74:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c76:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 8002c78:	b103      	cbz	r3, 8002c7c <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 8002c7a:	4718      	bx	r3
 8002c7c:	4770      	bx	lr

08002c7e <HAL_I2C_SlaveTxCpltCallback>:
 8002c7e:	4770      	bx	lr

08002c80 <HAL_I2C_SlaveRxCpltCallback>:
 8002c80:	4770      	bx	lr

08002c82 <I2C_ITSlaveSequentialCplt>:
{
 8002c82:	b538      	push	{r3, r4, r5, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c84:	2500      	movs	r5, #0
 8002c86:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002c8a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002c8e:	2b29      	cmp	r3, #41	; 0x29
 8002c90:	d10c      	bne.n	8002cac <I2C_ITSlaveSequentialCplt+0x2a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c92:	2328      	movs	r3, #40	; 0x28
 8002c94:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c98:	2321      	movs	r3, #33	; 0x21
 8002c9a:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	f7ff fdc5 	bl	800282c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002ca2:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ca6:	f7ff ffea 	bl	8002c7e <HAL_I2C_SlaveTxCpltCallback>
 8002caa:	bd38      	pop	{r3, r4, r5, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002cac:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002cb0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cb2:	d10b      	bne.n	8002ccc <I2C_ITSlaveSequentialCplt+0x4a>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002cb4:	2328      	movs	r3, #40	; 0x28
 8002cb6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cba:	2322      	movs	r3, #34	; 0x22
 8002cbc:	6303      	str	r3, [r0, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	f7ff fdb4 	bl	800282c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002cc4:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cc8:	f7ff ffda 	bl	8002c80 <HAL_I2C_SlaveRxCpltCallback>
 8002ccc:	bd38      	pop	{r3, r4, r5, pc}

08002cce <HAL_I2C_AddrCallback>:
{
 8002cce:	4770      	bx	lr

08002cd0 <I2C_ITAddrCplt.isra.8>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002cd2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002cd6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cda:	2b28      	cmp	r3, #40	; 0x28
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8002cdc:	4604      	mov	r4, r0
 8002cde:	6803      	ldr	r3, [r0, #0]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ce0:	d134      	bne.n	8002d4c <I2C_ITAddrCplt.isra.8+0x7c>
    transferdirection = I2C_GET_DIR(hi2c);
 8002ce2:	699e      	ldr	r6, [r3, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ce4:	68c1      	ldr	r1, [r0, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002ce6:	699d      	ldr	r5, [r3, #24]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002ce8:	689a      	ldr	r2, [r3, #8]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002cea:	68df      	ldr	r7, [r3, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002cec:	0c2d      	lsrs	r5, r5, #16
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cee:	2902      	cmp	r1, #2
    transferdirection = I2C_GET_DIR(hi2c);
 8002cf0:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002cf4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cf8:	d120      	bne.n	8002d3c <I2C_ITAddrCplt.isra.8+0x6c>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002cfa:	f3c2 0209 	ubfx	r2, r2, #0, #10
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8002cfe:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8002d02:	f015 0506 	ands.w	r5, r5, #6
 8002d06:	d10e      	bne.n	8002d26 <I2C_ITAddrCplt.isra.8+0x56>
        hi2c->AddrEventCount++;
 8002d08:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d0a:	3101      	adds	r1, #1
 8002d0c:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002d0e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d10:	2902      	cmp	r1, #2
 8002d12:	d120      	bne.n	8002d56 <I2C_ITAddrCplt.isra.8+0x86>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d14:	2108      	movs	r1, #8
          hi2c->AddrEventCount = 0U;
 8002d16:	6485      	str	r5, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d18:	61d9      	str	r1, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8002d1a:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d1e:	4631      	mov	r1, r6
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d20:	f7ff ffd5 	bl	8002cce <HAL_I2C_AddrCallback>
 8002d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d26:	2104      	movs	r1, #4
 8002d28:	f7ff fd80 	bl	800282c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d32:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d36:	4631      	mov	r1, r6
 8002d38:	4620      	mov	r0, r4
 8002d3a:	e7f1      	b.n	8002d20 <I2C_ITAddrCplt.isra.8+0x50>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002d3c:	2104      	movs	r1, #4
 8002d3e:	f7ff fd75 	bl	800282c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002d42:	2300      	movs	r3, #0
 8002d44:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002d48:	462a      	mov	r2, r5
 8002d4a:	e7f4      	b.n	8002d36 <I2C_ITAddrCplt.isra.8+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d4c:	2208      	movs	r2, #8
 8002d4e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002d50:	2300      	movs	r3, #0
 8002d52:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8002d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d58 <HAL_I2C_ListenCpltCallback>:
 8002d58:	4770      	bx	lr
	...

08002d5c <I2C_ITListenCplt>:
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d5c:	4b17      	ldr	r3, [pc, #92]	; (8002dbc <I2C_ITListenCplt+0x60>)
{
 8002d5e:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_READY;
 8002d60:	2220      	movs	r2, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d62:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d64:	2300      	movs	r3, #0
 8002d66:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->XferISR = NULL;
 8002d68:	6343      	str	r3, [r0, #52]	; 0x34
  hi2c->State = HAL_I2C_STATE_READY;
 8002d6a:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6e:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d72:	074b      	lsls	r3, r1, #29
{
 8002d74:	4604      	mov	r4, r0
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002d76:	d512      	bpl.n	8002d9e <I2C_ITListenCplt+0x42>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d78:	6802      	ldr	r2, [r0, #0]
 8002d7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d7e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002d80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d82:	3301      	adds	r3, #1
 8002d84:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002d86:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8002d88:	b14b      	cbz	r3, 8002d9e <I2C_ITListenCplt+0x42>
      hi2c->XferSize--;
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8002d8e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002d96:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002d98:	f043 0304 	orr.w	r3, r3, #4
 8002d9c:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002d9e:	4620      	mov	r0, r4
 8002da0:	2107      	movs	r1, #7
 8002da2:	f7ff fd43 	bl	800282c <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	2210      	movs	r2, #16
 8002daa:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8002dac:	2300      	movs	r3, #0
 8002dae:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8002db2:	4620      	mov	r0, r4
 8002db4:	f7ff ffd0 	bl	8002d58 <HAL_I2C_ListenCpltCallback>
 8002db8:	bd10      	pop	{r4, pc}
 8002dba:	bf00      	nop
 8002dbc:	ffff0000 	.word	0xffff0000

08002dc0 <HAL_I2C_ErrorCallback>:
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_I2C_AbortCpltCallback>:
{
 8002dc2:	4770      	bx	lr

08002dc4 <I2C_ITError>:
{
 8002dc4:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002dc6:	4a32      	ldr	r2, [pc, #200]	; (8002e90 <I2C_ITError+0xcc>)
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002dc8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002dcc:	2500      	movs	r5, #0
 8002dce:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002dd2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002dd4:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8002dd6:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002dd8:	3b28      	subs	r3, #40	; 0x28
  hi2c->ErrorCode |= ErrorCode;
 8002dda:	4311      	orrs	r1, r2
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002ddc:	2b02      	cmp	r3, #2
{
 8002dde:	4604      	mov	r4, r0
  hi2c->ErrorCode |= ErrorCode;
 8002de0:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002de2:	d822      	bhi.n	8002e2a <I2C_ITError+0x66>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002de4:	2103      	movs	r1, #3
 8002de6:	f7ff fd21 	bl	800282c <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002dea:	2328      	movs	r3, #40	; 0x28
 8002dec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002df0:	4b28      	ldr	r3, [pc, #160]	; (8002e94 <I2C_ITError+0xd0>)
    hi2c->PreviousState = I2C_STATE_NONE;
 8002df2:	6305      	str	r5, [r0, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002df4:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002df6:	6823      	ldr	r3, [r4, #0]
 8002df8:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002dfa:	681a      	ldr	r2, [r3, #0]
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002dfc:	f411 4180 	ands.w	r1, r1, #16384	; 0x4000
 8002e00:	d020      	beq.n	8002e44 <I2C_ITError+0x80>
    if (hi2c->hdmatx != NULL)
 8002e02:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e08:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8002e0a:	2800      	cmp	r0, #0
 8002e0c:	d03e      	beq.n	8002e8c <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e0e:	4b22      	ldr	r3, [pc, #136]	; (8002e98 <I2C_ITError+0xd4>)
 8002e10:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002e12:	2300      	movs	r3, #0
 8002e14:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e18:	f7fe ff86 	bl	8001d28 <HAL_DMA_Abort_IT>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d035      	beq.n	8002e8c <I2C_ITError+0xc8>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e20:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e22:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8002e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e28:	4718      	bx	r3
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e2a:	2107      	movs	r1, #7
 8002e2c:	f7ff fcfe 	bl	800282c <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002e30:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002e34:	2b60      	cmp	r3, #96	; 0x60
      hi2c->State         = HAL_I2C_STATE_READY;
 8002e36:	bf1c      	itt	ne
 8002e38:	2320      	movne	r3, #32
 8002e3a:	f880 3041 	strbne.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	6303      	str	r3, [r0, #48]	; 0x30
 8002e42:	e7d7      	b.n	8002df4 <I2C_ITError+0x30>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002e44:	f412 4200 	ands.w	r2, r2, #32768	; 0x8000
 8002e48:	d00e      	beq.n	8002e68 <I2C_ITError+0xa4>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e4a:	681a      	ldr	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002e4c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e52:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8002e54:	b1d0      	cbz	r0, 8002e8c <I2C_ITError+0xc8>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e56:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <I2C_ITError+0xd4>)
 8002e58:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8002e5a:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e5e:	f7fe ff63 	bl	8001d28 <HAL_DMA_Abort_IT>
 8002e62:	b198      	cbz	r0, 8002e8c <I2C_ITError+0xc8>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e64:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002e66:	e7dc      	b.n	8002e22 <I2C_ITError+0x5e>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e68:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002e6c:	2b60      	cmp	r3, #96	; 0x60
 8002e6e:	d108      	bne.n	8002e82 <I2C_ITError+0xbe>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e70:	2320      	movs	r3, #32
 8002e72:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002e76:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002e7a:	4620      	mov	r0, r4
 8002e7c:	f7ff ffa1 	bl	8002dc2 <HAL_I2C_AbortCpltCallback>
 8002e80:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hi2c);
 8002e82:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002e86:	4620      	mov	r0, r4
 8002e88:	f7ff ff9a 	bl	8002dc0 <HAL_I2C_ErrorCallback>
 8002e8c:	bd70      	pop	{r4, r5, r6, pc}
 8002e8e:	bf00      	nop
 8002e90:	ffff0000 	.word	0xffff0000
 8002e94:	08002f8d 	.word	0x08002f8d
 8002e98:	080030fd 	.word	0x080030fd

08002e9c <I2C_ITSlaveCplt>:
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002e9c:	6803      	ldr	r3, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e9e:	2220      	movs	r2, #32
{
 8002ea0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ea2:	681e      	ldr	r6, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea4:	61da      	str	r2, [r3, #28]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ea6:	2208      	movs	r2, #8
 8002ea8:	61da      	str	r2, [r3, #28]
{
 8002eaa:	460d      	mov	r5, r1
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002eac:	2107      	movs	r1, #7
{
 8002eae:	4604      	mov	r4, r0
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002eb0:	f7ff fcbc 	bl	800282c <I2C_Disable_IRQ>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002eb4:	6803      	ldr	r3, [r0, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ebc:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002ec4:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002ec8:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8002ecc:	f022 0201 	bic.w	r2, r2, #1
 8002ed0:	605a      	str	r2, [r3, #4]
  I2C_Flush_TXDR(hi2c);
 8002ed2:	f7ff fc83 	bl	80027dc <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002ed6:	0471      	lsls	r1, r6, #17
 8002ed8:	d532      	bpl.n	8002f40 <I2C_ITSlaveCplt+0xa4>
    if (hi2c->hdmatx != NULL)
 8002eda:	6b83      	ldr	r3, [r0, #56]	; 0x38
    if (hi2c->hdmarx != NULL)
 8002edc:	b11b      	cbz	r3, 8002ee6 <I2C_ITSlaveCplt+0x4a>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ee6:	076b      	lsls	r3, r5, #29
 8002ee8:	d50e      	bpl.n	8002f08 <I2C_ITSlaveCplt+0x6c>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002eea:	6822      	ldr	r2, [r4, #0]
 8002eec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ef0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002ef2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8002ef8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002efa:	b12b      	cbz	r3, 8002f08 <I2C_ITSlaveCplt+0x6c>
      hi2c->XferSize--;
 8002efc:	3b01      	subs	r3, #1
 8002efe:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002f00:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8002f08:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	b11b      	cbz	r3, 8002f16 <I2C_ITSlaveCplt+0x7a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002f1e:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002f22:	b18b      	cbz	r3, 8002f48 <I2C_ITSlaveCplt+0xac>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002f24:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002f26:	4620      	mov	r0, r4
 8002f28:	f7ff ff4c 	bl	8002dc4 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f2c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002f30:	2b28      	cmp	r3, #40	; 0x28
 8002f32:	d128      	bne.n	8002f86 <I2C_ITSlaveCplt+0xea>
      I2C_ITListenCplt(hi2c, ITFlags);
 8002f34:	4629      	mov	r1, r5
 8002f36:	4620      	mov	r0, r4
}
 8002f38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      I2C_ITListenCplt(hi2c, ITFlags);
 8002f3c:	f7ff bf0e 	b.w	8002d5c <I2C_ITListenCplt>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002f40:	0432      	lsls	r2, r6, #16
 8002f42:	d5d0      	bpl.n	8002ee6 <I2C_ITSlaveCplt+0x4a>
    if (hi2c->hdmarx != NULL)
 8002f44:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002f46:	e7c9      	b.n	8002edc <I2C_ITSlaveCplt+0x40>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002f48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f4a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8002f4e:	d00a      	beq.n	8002f66 <I2C_ITSlaveCplt+0xca>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f50:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <I2C_ITSlaveCplt+0xec>)
 8002f52:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002f54:	2220      	movs	r2, #32
 8002f56:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f5a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f5e:	4620      	mov	r0, r4
 8002f60:	f7ff fefa 	bl	8002d58 <HAL_I2C_ListenCpltCallback>
 8002f64:	bd70      	pop	{r4, r5, r6, pc}
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f66:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002f6a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f6e:	2a22      	cmp	r2, #34	; 0x22
 8002f70:	f04f 0220 	mov.w	r2, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8002f74:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f78:	4620      	mov	r0, r4
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f7a:	d102      	bne.n	8002f82 <I2C_ITSlaveCplt+0xe6>
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f7c:	f7ff fe80 	bl	8002c80 <HAL_I2C_SlaveRxCpltCallback>
 8002f80:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f82:	f7ff fe7c 	bl	8002c7e <HAL_I2C_SlaveTxCpltCallback>
 8002f86:	bd70      	pop	{r4, r5, r6, pc}
 8002f88:	ffff0000 	.word	0xffff0000

08002f8c <I2C_Slave_ISR_IT>:
{
 8002f8c:	b570      	push	{r4, r5, r6, lr}
 8002f8e:	4616      	mov	r6, r2
  __HAL_LOCK(hi2c);
 8002f90:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8002f94:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8002f96:	2a01      	cmp	r2, #1
{
 8002f98:	4604      	mov	r4, r0
 8002f9a:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8002f9c:	d07c      	beq.n	8003098 <I2C_Slave_ISR_IT+0x10c>
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fa4:	06ca      	lsls	r2, r1, #27
 8002fa6:	d539      	bpl.n	800301c <I2C_Slave_ISR_IT+0x90>
 8002fa8:	06f2      	lsls	r2, r6, #27
 8002faa:	d537      	bpl.n	800301c <I2C_Slave_ISR_IT+0x90>
    if (hi2c->XferCount == 0U)
 8002fac:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8002fae:	b292      	uxth	r2, r2
 8002fb0:	bb32      	cbnz	r2, 8003000 <I2C_Slave_ISR_IT+0x74>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 8002fb2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002fb6:	2a28      	cmp	r2, #40	; 0x28
 8002fb8:	d110      	bne.n	8002fdc <I2C_Slave_ISR_IT+0x50>
 8002fba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fbe:	d10d      	bne.n	8002fdc <I2C_Slave_ISR_IT+0x50>
        I2C_ITListenCplt(hi2c, ITFlags);
 8002fc0:	f7ff fecc 	bl	8002d5c <I2C_ITListenCplt>
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002fc4:	06aa      	lsls	r2, r5, #26
 8002fc6:	d505      	bpl.n	8002fd4 <I2C_Slave_ISR_IT+0x48>
 8002fc8:	06b3      	lsls	r3, r6, #26
 8002fca:	d503      	bpl.n	8002fd4 <I2C_Slave_ISR_IT+0x48>
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002fcc:	4629      	mov	r1, r5
 8002fce:	4620      	mov	r0, r4
 8002fd0:	f7ff ff64 	bl	8002e9c <I2C_ITSlaveCplt>
  __HAL_UNLOCK(hi2c);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
  return HAL_OK;
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002fdc:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8002fe0:	2a29      	cmp	r2, #41	; 0x29
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	f04f 0110 	mov.w	r1, #16
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe8:	61d1      	str	r1, [r2, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002fea:	d1eb      	bne.n	8002fc4 <I2C_Slave_ISR_IT+0x38>
 8002fec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ff0:	d0e8      	beq.n	8002fc4 <I2C_Slave_ISR_IT+0x38>
        I2C_Flush_TXDR(hi2c);
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f7ff fbf2 	bl	80027dc <I2C_Flush_TXDR>
      I2C_ITSlaveSequentialCplt(hi2c);
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f7ff fe42 	bl	8002c82 <I2C_ITSlaveSequentialCplt>
 8002ffe:	e7e1      	b.n	8002fc4 <I2C_Slave_ISR_IT+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003000:	6802      	ldr	r2, [r0, #0]
 8003002:	2110      	movs	r1, #16
 8003004:	61d1      	str	r1, [r2, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003006:	6c42      	ldr	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003008:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800300c:	f042 0204 	orr.w	r2, r2, #4
 8003010:	6442      	str	r2, [r0, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003012:	d1d7      	bne.n	8002fc4 <I2C_Slave_ISR_IT+0x38>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003014:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003016:	f7ff fed5 	bl	8002dc4 <I2C_ITError>
 800301a:	e7d3      	b.n	8002fc4 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800301c:	076a      	lsls	r2, r5, #29
 800301e:	d51a      	bpl.n	8003056 <I2C_Slave_ISR_IT+0xca>
 8003020:	0770      	lsls	r0, r6, #29
 8003022:	d518      	bpl.n	8003056 <I2C_Slave_ISR_IT+0xca>
    if (hi2c->XferCount > 0U)
 8003024:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003026:	b292      	uxth	r2, r2
 8003028:	b16a      	cbz	r2, 8003046 <I2C_Slave_ISR_IT+0xba>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800302a:	6821      	ldr	r1, [r4, #0]
 800302c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800302e:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8003030:	7011      	strb	r1, [r2, #0]
      hi2c->pBuffPtr++;
 8003032:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003034:	3201      	adds	r2, #1
 8003036:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003038:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800303a:	3a01      	subs	r2, #1
 800303c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800303e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003040:	3a01      	subs	r2, #1
 8003042:	b292      	uxth	r2, r2
 8003044:	8562      	strh	r2, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8003046:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003048:	b292      	uxth	r2, r2
 800304a:	2a00      	cmp	r2, #0
 800304c:	d1ba      	bne.n	8002fc4 <I2C_Slave_ISR_IT+0x38>
 800304e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003052:	d1d1      	bne.n	8002ff8 <I2C_Slave_ISR_IT+0x6c>
 8003054:	e7b6      	b.n	8002fc4 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003056:	0729      	lsls	r1, r5, #28
 8003058:	d505      	bpl.n	8003066 <I2C_Slave_ISR_IT+0xda>
 800305a:	0732      	lsls	r2, r6, #28
 800305c:	d503      	bpl.n	8003066 <I2C_Slave_ISR_IT+0xda>
    I2C_ITAddrCplt(hi2c, ITFlags);
 800305e:	4620      	mov	r0, r4
 8003060:	f7ff fe36 	bl	8002cd0 <I2C_ITAddrCplt.isra.8>
 8003064:	e7ae      	b.n	8002fc4 <I2C_Slave_ISR_IT+0x38>
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003066:	07a8      	lsls	r0, r5, #30
 8003068:	d5ac      	bpl.n	8002fc4 <I2C_Slave_ISR_IT+0x38>
 800306a:	07b1      	lsls	r1, r6, #30
 800306c:	d5aa      	bpl.n	8002fc4 <I2C_Slave_ISR_IT+0x38>
    if (hi2c->XferCount > 0U)
 800306e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8003070:	b292      	uxth	r2, r2
 8003072:	b16a      	cbz	r2, 8003090 <I2C_Slave_ISR_IT+0x104>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003076:	6822      	ldr	r2, [r4, #0]
 8003078:	f813 1b01 	ldrb.w	r1, [r3], #1
 800307c:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 800307e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003080:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003082:	3b01      	subs	r3, #1
 8003084:	b29b      	uxth	r3, r3
 8003086:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003088:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800308a:	3b01      	subs	r3, #1
 800308c:	8523      	strh	r3, [r4, #40]	; 0x28
 800308e:	e799      	b.n	8002fc4 <I2C_Slave_ISR_IT+0x38>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003090:	f033 7380 	bics.w	r3, r3, #16777216	; 0x1000000
 8003094:	d0b0      	beq.n	8002ff8 <I2C_Slave_ISR_IT+0x6c>
 8003096:	e795      	b.n	8002fc4 <I2C_Slave_ISR_IT+0x38>
  __HAL_LOCK(hi2c);
 8003098:	2002      	movs	r0, #2
}
 800309a:	bd70      	pop	{r4, r5, r6, pc}

0800309c <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800309c:	6803      	ldr	r3, [r0, #0]
 800309e:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80030a0:	681a      	ldr	r2, [r3, #0]
{
 80030a2:	b410      	push	{r4}
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030a4:	05cc      	lsls	r4, r1, #23
 80030a6:	d508      	bpl.n	80030ba <HAL_I2C_ER_IRQHandler+0x1e>
 80030a8:	0614      	lsls	r4, r2, #24
 80030aa:	d506      	bpl.n	80030ba <HAL_I2C_ER_IRQHandler+0x1e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80030ac:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80030ae:	f044 0401 	orr.w	r4, r4, #1
 80030b2:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030b4:	f44f 7480 	mov.w	r4, #256	; 0x100
 80030b8:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030ba:	054c      	lsls	r4, r1, #21
 80030bc:	d508      	bpl.n	80030d0 <HAL_I2C_ER_IRQHandler+0x34>
 80030be:	0614      	lsls	r4, r2, #24
 80030c0:	d506      	bpl.n	80030d0 <HAL_I2C_ER_IRQHandler+0x34>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80030c2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80030c4:	f044 0408 	orr.w	r4, r4, #8
 80030c8:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80030ce:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80030d0:	0589      	lsls	r1, r1, #22
 80030d2:	d508      	bpl.n	80030e6 <HAL_I2C_ER_IRQHandler+0x4a>
 80030d4:	0612      	lsls	r2, r2, #24
 80030d6:	d506      	bpl.n	80030e6 <HAL_I2C_ER_IRQHandler+0x4a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80030d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80030da:	f042 0202 	orr.w	r2, r2, #2
 80030de:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e4:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 80030e6:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80030e8:	f011 0f0b 	tst.w	r1, #11
 80030ec:	d003      	beq.n	80030f6 <HAL_I2C_ER_IRQHandler+0x5a>
}
 80030ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 80030f2:	f7ff be67 	b.w	8002dc4 <I2C_ITError>
}
 80030f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030fa:	4770      	bx	lr

080030fc <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030fc:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hi2c->hdmatx->XferAbortCallback = NULL;
 80030fe:	6b82      	ldr	r2, [r0, #56]	; 0x38
{
 8003100:	b508      	push	{r3, lr}
  hi2c->hdmatx->XferAbortCallback = NULL;
 8003102:	2300      	movs	r3, #0
 8003104:	6393      	str	r3, [r2, #56]	; 0x38
  hi2c->hdmarx->XferAbortCallback = NULL;
 8003106:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003108:	6393      	str	r3, [r2, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800310a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800310e:	2b60      	cmp	r3, #96	; 0x60
 8003110:	d105      	bne.n	800311e <I2C_DMAAbort+0x22>
    hi2c->State = HAL_I2C_STATE_READY;
 8003112:	2320      	movs	r3, #32
 8003114:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2C_AbortCpltCallback(hi2c);
 8003118:	f7ff fe53 	bl	8002dc2 <HAL_I2C_AbortCpltCallback>
 800311c:	bd08      	pop	{r3, pc}
    HAL_I2C_ErrorCallback(hi2c);
 800311e:	f7ff fe4f 	bl	8002dc0 <HAL_I2C_ErrorCallback>
 8003122:	bd08      	pop	{r3, pc}

08003124 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003124:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	2a20      	cmp	r2, #32
{
 800312c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 800312e:	d11d      	bne.n	800316c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003130:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003134:	2b01      	cmp	r3, #1
 8003136:	d019      	beq.n	800316c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003138:	2324      	movs	r3, #36	; 0x24
 800313a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800313e:	6803      	ldr	r3, [r0, #0]
 8003140:	681c      	ldr	r4, [r3, #0]
 8003142:	f024 0401 	bic.w	r4, r4, #1
 8003146:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003148:	681c      	ldr	r4, [r3, #0]
 800314a:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 800314e:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003150:	681c      	ldr	r4, [r3, #0]
 8003152:	4321      	orrs	r1, r4
 8003154:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003156:	6819      	ldr	r1, [r3, #0]
 8003158:	f041 0101 	orr.w	r1, r1, #1
 800315c:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800315e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003160:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003164:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8003168:	4618      	mov	r0, r3
 800316a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800316c:	2002      	movs	r0, #2
  }
}
 800316e:	bd10      	pop	{r4, pc}

08003170 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003170:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003172:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8003176:	b2e4      	uxtb	r4, r4
 8003178:	2c20      	cmp	r4, #32
 800317a:	d11c      	bne.n	80031b6 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800317c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003180:	2b01      	cmp	r3, #1
 8003182:	d018      	beq.n	80031b6 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003184:	2324      	movs	r3, #36	; 0x24
 8003186:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800318a:	6803      	ldr	r3, [r0, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	f022 0201 	bic.w	r2, r2, #1
 8003192:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003194:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003196:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800319a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800319e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80031aa:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80031ae:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 80031b2:	4618      	mov	r0, r3
 80031b4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 80031b6:	2002      	movs	r0, #2
  }
}
 80031b8:	bd10      	pop	{r4, pc}

080031ba <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80031ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1 = 0;
  uint32_t tmp2 = 0;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031be:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80031c0:	6804      	ldr	r4, [r0, #0]
 80031c2:	684f      	ldr	r7, [r1, #4]
 80031c4:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031c6:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
  tmp2 = (pLayerCfg->Alpha0 << 24);  
 80031ca:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031ce:	3284      	adds	r2, #132	; 0x84
 80031d0:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031d2:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80031d6:	6858      	ldr	r0, [r3, #4]
 80031d8:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 80031dc:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031de:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80031e0:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031e4:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16)) << 16);
 80031e8:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16) + 1) | tmp);
 80031ea:	4430      	add	r0, r6
 80031ec:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80031f0:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16);
 80031f2:	68e0      	ldr	r0, [r4, #12]
 80031f4:	68cd      	ldr	r5, [r1, #12]
 80031f6:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80031fa:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80031fc:	6898      	ldr	r0, [r3, #8]
 80031fe:	f000 20f0 	and.w	r0, r0, #4026593280	; 0xf000f000
 8003202:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1) | tmp);  
 8003204:	68e6      	ldr	r6, [r4, #12]
 8003206:	6888      	ldr	r0, [r1, #8]
 8003208:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800320c:	3001      	adds	r0, #1
 800320e:	4430      	add	r0, r6
 8003210:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8003214:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003216:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003218:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800321a:	f020 0007 	bic.w	r0, r0, #7
 800321e:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003220:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003224:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003226:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16);
 8003228:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8);
 800322c:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8003230:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 8003234:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8003238:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800323c:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003240:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8003244:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003246:	6958      	ldr	r0, [r3, #20]
 8003248:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 800324c:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800324e:	6948      	ldr	r0, [r1, #20]
 8003250:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003252:	69d8      	ldr	r0, [r3, #28]
 8003254:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8003258:	f020 0007 	bic.w	r0, r0, #7
 800325c:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800325e:	6a08      	ldr	r0, [r1, #32]
 8003260:	69cd      	ldr	r5, [r1, #28]
 8003262:	4305      	orrs	r5, r0
 8003264:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003266:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003268:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800326a:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800326e:	6298      	str	r0, [r3, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003270:	b31e      	cbz	r6, 80032ba <LTDC_SetConfig+0x100>
  {
    tmp = 4;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003272:	2e01      	cmp	r6, #1
 8003274:	d023      	beq.n	80032be <LTDC_SetConfig+0x104>
  {
    tmp = 3;
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003276:	1eb0      	subs	r0, r6, #2
 8003278:	2802      	cmp	r0, #2
 800327a:	d922      	bls.n	80032c2 <LTDC_SetConfig+0x108>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800327c:	2e07      	cmp	r6, #7
  {
    tmp = 2;
  }
  else
  {
    tmp = 1;
 800327e:	bf0c      	ite	eq
 8003280:	2002      	moveq	r0, #2
 8003282:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003284:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003286:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 800328a:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 800328c:	6a8d      	ldr	r5, [r1, #40]	; 0x28

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800328e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3));
 8003290:	eba7 070e 	sub.w	r7, r7, lr
 8003294:	4345      	muls	r5, r0
 8003296:	4378      	muls	r0, r7
 8003298:	3003      	adds	r0, #3
 800329a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800329e:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80032a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032a2:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 80032a6:	f020 0007 	bic.w	r0, r0, #7
 80032aa:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80032ac:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80032ae:	58a3      	ldr	r3, [r4, r2]
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	50a3      	str	r3, [r4, r2]
 80032b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4;
 80032ba:	2004      	movs	r0, #4
 80032bc:	e7e2      	b.n	8003284 <LTDC_SetConfig+0xca>
    tmp = 3;
 80032be:	2003      	movs	r0, #3
 80032c0:	e7e0      	b.n	8003284 <LTDC_SetConfig+0xca>
    tmp = 2;
 80032c2:	2002      	movs	r0, #2
 80032c4:	e7de      	b.n	8003284 <LTDC_SetConfig+0xca>
	...

080032c8 <HAL_LTDC_Init>:
{
 80032c8:	b538      	push	{r3, r4, r5, lr}
  if(hltdc == NULL)
 80032ca:	4604      	mov	r4, r0
 80032cc:	2800      	cmp	r0, #0
 80032ce:	d063      	beq.n	8003398 <HAL_LTDC_Init+0xd0>
  if(hltdc->State == HAL_LTDC_STATE_RESET)
 80032d0:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 80032d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80032d8:	b91b      	cbnz	r3, 80032e2 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80032da:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 80032de:	f01d ff91 	bl	8021204 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80032e2:	2302      	movs	r3, #2
 80032e4:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80032e8:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032ea:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80032f2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80032f4:	6862      	ldr	r2, [r4, #4]
 80032f6:	6999      	ldr	r1, [r3, #24]
 80032f8:	4302      	orrs	r2, r0
 80032fa:	68e0      	ldr	r0, [r4, #12]
 80032fc:	4302      	orrs	r2, r0
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80032fe:	6920      	ldr	r0, [r4, #16]
 8003300:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003302:	430a      	orrs	r2, r1
 8003304:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	4924      	ldr	r1, [pc, #144]	; (800339c <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16);
 800330a:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800330c:	400a      	ands	r2, r1
 800330e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003316:	69a0      	ldr	r0, [r4, #24]
 8003318:	4302      	orrs	r2, r0
 800331a:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800331c:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16);
 800331e:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003320:	400a      	ands	r2, r1
 8003322:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800332a:	6a20      	ldr	r0, [r4, #32]
 800332c:	4302      	orrs	r2, r0
 800332e:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003330:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16);
 8003332:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003334:	400a      	ands	r2, r1
 8003336:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003338:	691a      	ldr	r2, [r3, #16]
 800333a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800333e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003340:	4302      	orrs	r2, r0
 8003342:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	4011      	ands	r1, r2
 8003348:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800334a:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16);
 800334c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800334e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003352:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003354:	430a      	orrs	r2, r1
 8003356:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003358:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16);
 800335a:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8);
 800335e:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003362:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8003366:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003368:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800336a:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 800336e:	430a      	orrs	r2, r1
 8003370:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003374:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003378:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800337a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800337c:	f042 0206 	orr.w	r2, r2, #6
 8003380:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8003382:	699a      	ldr	r2, [r3, #24]
 8003384:	f042 0201 	orr.w	r2, r2, #1
 8003388:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800338a:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 800338c:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 800338e:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8003392:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8003396:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003398:	2001      	movs	r0, #1
}
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	f000f800 	.word	0xf000f800

080033a0 <HAL_LTDC_ConfigLayer>:
{   
 80033a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80033a2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80033a6:	2b01      	cmp	r3, #1
{   
 80033a8:	4606      	mov	r6, r0
 80033aa:	468e      	mov	lr, r1
 80033ac:	4694      	mov	ip, r2
 80033ae:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80033b2:	d01d      	beq.n	80033f0 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80033b4:	2434      	movs	r4, #52	; 0x34
 80033b6:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80033b8:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80033bc:	fb04 6402 	mla	r4, r4, r2, r6
 80033c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 80033c2:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80033c4:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 80033c6:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 80033ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033d4:	682b      	ldr	r3, [r5, #0]
 80033d6:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80033d8:	4630      	mov	r0, r6
 80033da:	4662      	mov	r2, ip
 80033dc:	4671      	mov	r1, lr
 80033de:	f7ff feec 	bl	80031ba <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80033e2:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 80033e4:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80033e6:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 80033e8:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80033ec:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 80033f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033f2 <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 80033f2:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80033f6:	2b01      	cmp	r3, #1
{
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	f04f 0302 	mov.w	r3, #2
 80033fe:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8003400:	d015      	beq.n	800342e <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003402:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 8003406:	2334      	movs	r3, #52	; 0x34
 8003408:	4353      	muls	r3, r2
 800340a:	18c6      	adds	r6, r0, r3
  __HAL_LOCK(hltdc);
 800340c:	2501      	movs	r5, #1
 800340e:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8003412:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8003414:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003418:	4401      	add	r1, r0
 800341a:	f7ff fece 	bl	80031ba <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800341e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8003420:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003422:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003424:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003428:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 800342c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 800342e:	4618      	mov	r0, r3
}
 8003430:	bd70      	pop	{r4, r5, r6, pc}

08003432 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003436:	4604      	mov	r4, r0
{
 8003438:	b08a      	sub	sp, #40	; 0x28
  if (hpcd == NULL)
 800343a:	2800      	cmp	r0, #0
 800343c:	d074      	beq.n	8003528 <HAL_PCD_Init+0xf6>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800343e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8003442:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003446:	b91b      	cbnz	r3, 8003450 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003448:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800344c:	f01e fa26 	bl	802189c <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003450:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003452:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 8003454:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8003458:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 800345c:	f004 f98f 	bl	800777e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8003460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003462:	466e      	mov	r6, sp
 8003464:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003466:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003468:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800346a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800346e:	e886 0003 	stmia.w	r6, {r0, r1}
 8003472:	f104 0804 	add.w	r8, r4, #4
 8003476:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800347a:	6820      	ldr	r0, [r4, #0]
 800347c:	f004 f94a 	bl	8007714 <USB_CoreInit>

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003480:	2100      	movs	r1, #0
 8003482:	6820      	ldr	r0, [r4, #0]
 8003484:	f004 f981 	bl	800778a <USB_SetCurrentMode>
 8003488:	2100      	movs	r1, #0
 800348a:	4622      	mov	r2, r4
 800348c:	4623      	mov	r3, r4
 800348e:	f104 0510 	add.w	r5, r4, #16

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003492:	2601      	movs	r6, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003494:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 8003496:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800349a:	f8a3 1042 	strh.w	r1, [r3, #66]	; 0x42
 800349e:	3101      	adds	r1, #1
  for (i = 0U; i < 15U; i++)
 80034a0:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].is_in = 1U;
 80034a2:	f883 603d 	strb.w	r6, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034a6:	f883 003f 	strb.w	r0, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 80034aa:	6458      	str	r0, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 80034ac:	6498      	str	r0, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 80034ae:	6518      	str	r0, [r3, #80]	; 0x50
 80034b0:	f103 031c 	add.w	r3, r3, #28
  for (i = 0U; i < 15U; i++)
 80034b4:	d1ef      	bne.n	8003496 <HAL_PCD_Init+0x64>
 80034b6:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034b8:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 80034ba:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 80034be:	3301      	adds	r3, #1
  for (i = 0U; i < 15U; i++)
 80034c0:	2b0f      	cmp	r3, #15
    hpcd->OUT_ep[i].is_in = 0U;
 80034c2:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034c6:	f882 71ff 	strb.w	r7, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034ca:	f8c2 7204 	str.w	r7, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034ce:	f8c2 7208 	str.w	r7, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034d2:	f8c2 7210 	str.w	r7, [r2, #528]	; 0x210
 80034d6:	f102 021c 	add.w	r2, r2, #28
  for (i = 0U; i < 15U; i++)
 80034da:	d1ee      	bne.n	80034ba <HAL_PCD_Init+0x88>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80034dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034de:	466e      	mov	r6, sp
 80034e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80034e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034e4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80034e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80034ea:	e886 0003 	stmia.w	r6, {r0, r1}
 80034ee:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80034f2:	6820      	ldr	r0, [r4, #0]
 80034f4:	f004 f98a 	bl	800780c <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 80034f8:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 80034fa:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034fe:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003502:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003504:	2b01      	cmp	r3, #1
 8003506:	d102      	bne.n	800350e <HAL_PCD_Init+0xdc>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003508:	4620      	mov	r0, r4
 800350a:	f000 fc27 	bl	8003d5c <HAL_PCDEx_ActivateLPM>
  }

  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable == 1U)
 800350e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003510:	2b01      	cmp	r3, #1
 8003512:	d102      	bne.n	800351a <HAL_PCD_Init+0xe8>
  {
    (void)HAL_PCDEx_ActivateBCD(hpcd);
 8003514:	4620      	mov	r0, r4
 8003516:	f000 fc34 	bl	8003d82 <HAL_PCDEx_ActivateBCD>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800351a:	6820      	ldr	r0, [r4, #0]
 800351c:	f004 fc50 	bl	8007dc0 <USB_DevDisconnect>

  return HAL_OK;
 8003520:	2000      	movs	r0, #0
}
 8003522:	b00a      	add	sp, #40	; 0x28
 8003524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8003528:	2001      	movs	r0, #1
 800352a:	e7fa      	b.n	8003522 <HAL_PCD_Init+0xf0>

0800352c <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800352c:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 8003530:	2b01      	cmp	r3, #1
{
 8003532:	b510      	push	{r4, lr}
 8003534:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003536:	d00c      	beq.n	8003552 <HAL_PCD_Start+0x26>
 8003538:	2301      	movs	r3, #1
 800353a:	f880 33bc 	strb.w	r3, [r0, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 800353e:	6800      	ldr	r0, [r0, #0]
 8003540:	f004 fc32 	bl	8007da8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003544:	6820      	ldr	r0, [r4, #0]
 8003546:	f004 f914 	bl	8007772 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800354a:	2000      	movs	r0, #0
 800354c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003550:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003552:	2002      	movs	r0, #2
}
 8003554:	bd10      	pop	{r4, pc}
	...

08003558 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800355c:	f8d0 9000 	ldr.w	r9, [r0]
{
 8003560:	b085      	sub	sp, #20
 8003562:	4604      	mov	r4, r0
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003564:	4648      	mov	r0, r9
  uint32_t gSNPSiD = *(uint32_t *) TempReg;
 8003566:	f8d9 8040 	ldr.w	r8, [r9, #64]	; 0x40
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800356a:	f004 fc64 	bl	8007e36 <USB_GetMode>
 800356e:	9000      	str	r0, [sp, #0]
 8003570:	2800      	cmp	r0, #0
 8003572:	f040 8154 	bne.w	800381e <HAL_PCD_IRQHandler+0x2c6>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003576:	6820      	ldr	r0, [r4, #0]
 8003578:	f004 fc2e 	bl	8007dd8 <USB_ReadInterrupts>
 800357c:	2800      	cmp	r0, #0
 800357e:	f000 814e 	beq.w	800381e <HAL_PCD_IRQHandler+0x2c6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003582:	6820      	ldr	r0, [r4, #0]
 8003584:	f004 fc28 	bl	8007dd8 <USB_ReadInterrupts>
 8003588:	0780      	lsls	r0, r0, #30
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800358a:	bf48      	it	mi
 800358c:	6822      	ldrmi	r2, [r4, #0]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800358e:	6820      	ldr	r0, [r4, #0]
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003590:	bf42      	ittt	mi
 8003592:	6953      	ldrmi	r3, [r2, #20]
 8003594:	f003 0302 	andmi.w	r3, r3, #2
 8003598:	6153      	strmi	r3, [r2, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800359a:	f004 fc1d 	bl	8007dd8 <USB_ReadInterrupts>
 800359e:	f410 2b00 	ands.w	fp, r0, #524288	; 0x80000
 80035a2:	d00b      	beq.n	80035bc <HAL_PCD_IRQHandler+0x64>
    {
      epnum = 0U;

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035a4:	6820      	ldr	r0, [r4, #0]
 80035a6:	f004 fc1b 	bl	8007de0 <USB_ReadDevAllOutEpInterrupt>
 80035aa:	f509 6630 	add.w	r6, r9, #2816	; 0xb00
 80035ae:	4605      	mov	r5, r0

      while (ep_intr != 0U)
 80035b0:	46b2      	mov	sl, r6
      epnum = 0U;
 80035b2:	f04f 0b00 	mov.w	fp, #0
      while (ep_intr != 0U)
 80035b6:	2d00      	cmp	r5, #0
 80035b8:	f040 8134 	bne.w	8003824 <HAL_PCD_IRQHandler+0x2cc>
        epnum++;
        ep_intr >>= 1U;
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80035bc:	6820      	ldr	r0, [r4, #0]
 80035be:	f004 fc0b 	bl	8007dd8 <USB_ReadInterrupts>
 80035c2:	0347      	lsls	r7, r0, #13
 80035c4:	d50c      	bpl.n	80035e0 <HAL_PCD_IRQHandler+0x88>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80035c6:	6820      	ldr	r0, [r4, #0]
 80035c8:	f004 fc12 	bl	8007df0 <USB_ReadDevAllInEpInterrupt>
 80035cc:	4625      	mov	r5, r4
 80035ce:	9001      	str	r0, [sp, #4]
 80035d0:	f509 6810 	add.w	r8, r9, #2304	; 0x900

      epnum = 0U;
 80035d4:	f04f 0b00 	mov.w	fp, #0

      while (ep_intr != 0U)
 80035d8:	9b01      	ldr	r3, [sp, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f040 8164 	bne.w	80038a8 <HAL_PCD_IRQHandler+0x350>
        ep_intr >>= 1U;
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035e0:	6820      	ldr	r0, [r4, #0]
 80035e2:	f004 fbf9 	bl	8007dd8 <USB_ReadInterrupts>
 80035e6:	2800      	cmp	r0, #0
 80035e8:	da15      	bge.n	8003616 <HAL_PCD_IRQHandler+0xbe>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035ea:	f8d9 3804 	ldr.w	r3, [r9, #2052]	; 0x804
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	f8c9 3804 	str.w	r3, [r9, #2052]	; 0x804

      if (hpcd->LPM_State == LPM_L1)
 80035f6:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	f040 81cf 	bne.w	800399e <HAL_PCD_IRQHandler+0x446>
      {
        hpcd->LPM_State = LPM_L0;
 8003600:	2100      	movs	r1, #0
 8003602:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003606:	4620      	mov	r0, r4
 8003608:	f01e faae 	bl	8021b68 <HAL_PCDEx_LPM_Callback>
#else
        HAL_PCD_ResumeCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800360c:	6822      	ldr	r2, [r4, #0]
 800360e:	6953      	ldr	r3, [r2, #20]
 8003610:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003614:	6153      	str	r3, [r2, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003616:	6820      	ldr	r0, [r4, #0]
 8003618:	f004 fbde 	bl	8007dd8 <USB_ReadInterrupts>
 800361c:	0505      	lsls	r5, r0, #20
 800361e:	d50b      	bpl.n	8003638 <HAL_PCD_IRQHandler+0xe0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003620:	f8d9 3808 	ldr.w	r3, [r9, #2056]	; 0x808
 8003624:	07d8      	lsls	r0, r3, #31
 8003626:	d502      	bpl.n	800362e <HAL_PCD_IRQHandler+0xd6>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003628:	4620      	mov	r0, r4
 800362a:	f01e f9a1 	bl	8021970 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800362e:	6822      	ldr	r2, [r4, #0]
 8003630:	6953      	ldr	r3, [r2, #20]
 8003632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003636:	6153      	str	r3, [r2, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003638:	6820      	ldr	r0, [r4, #0]
 800363a:	f004 fbcd 	bl	8007dd8 <USB_ReadInterrupts>
 800363e:	0101      	lsls	r1, r0, #4
 8003640:	d514      	bpl.n	800366c <HAL_PCD_IRQHandler+0x114>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003642:	6823      	ldr	r3, [r4, #0]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800364a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800364c:	f894 23f4 	ldrb.w	r2, [r4, #1012]	; 0x3f4
 8003650:	2a00      	cmp	r2, #0
 8003652:	f040 81a8 	bne.w	80039a6 <HAL_PCD_IRQHandler+0x44e>
      {
        hpcd->LPM_State = LPM_L1;
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003656:	6d5b      	ldr	r3, [r3, #84]	; 0x54
        hpcd->LPM_State = LPM_L1;
 8003658:	2101      	movs	r1, #1
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800365a:	f3c3 0383 	ubfx	r3, r3, #2, #4
        hpcd->LPM_State = LPM_L1;
 800365e:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003662:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003666:	4620      	mov	r0, r4
 8003668:	f01e fa7e 	bl	8021b68 <HAL_PCDEx_LPM_Callback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800366c:	6820      	ldr	r0, [r4, #0]
 800366e:	f004 fbb3 	bl	8007dd8 <USB_ReadInterrupts>
 8003672:	04c2      	lsls	r2, r0, #19
 8003674:	d534      	bpl.n	80036e0 <HAL_PCD_IRQHandler+0x188>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003676:	f509 6500 	add.w	r5, r9, #2048	; 0x800
 800367a:	686b      	ldr	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800367c:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003684:	2110      	movs	r1, #16
 8003686:	f004 f897 	bl	80077b8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800368a:	6860      	ldr	r0, [r4, #4]
 800368c:	f509 6310 	add.w	r3, r9, #2304	; 0x900
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003690:	f64f 317f 	movw	r1, #64383	; 0xfb7f
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003694:	9a00      	ldr	r2, [sp, #0]
 8003696:	4282      	cmp	r2, r0
 8003698:	f040 8189 	bne.w	80039ae <HAL_PCD_IRQHandler+0x456>
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800369c:	69eb      	ldr	r3, [r5, #28]
 800369e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036a2:	61eb      	str	r3, [r5, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 819a 	beq.w	80039e0 <HAL_PCD_IRQHandler+0x488>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80036ac:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 80036b0:	f043 030b 	orr.w	r3, r3, #11
 80036b4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80036b8:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80036ba:	f043 030b 	orr.w	r3, r3, #11
 80036be:	646b      	str	r3, [r5, #68]	; 0x44
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036c0:	f8d9 3800 	ldr.w	r3, [r9, #2048]	; 0x800

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036c4:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036ca:	f8c9 3800 	str.w	r3, [r9, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80036ce:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 80036d2:	f004 fbcf 	bl	8007e74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036d6:	6822      	ldr	r2, [r4, #0]
 80036d8:	6953      	ldr	r3, [r2, #20]
 80036da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036de:	6153      	str	r3, [r2, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	f004 fb79 	bl	8007dd8 <USB_ReadInterrupts>
 80036e6:	0483      	lsls	r3, r0, #18
 80036e8:	d520      	bpl.n	800372c <HAL_PCD_IRQHandler+0x1d4>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036ea:	6820      	ldr	r0, [r4, #0]
 80036ec:	f004 fba7 	bl	8007e3e <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80036f0:	6822      	ldr	r2, [r4, #0]
 80036f2:	68d3      	ldr	r3, [r2, #12]
 80036f4:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 80036f8:	60d3      	str	r3, [r2, #12]
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 80036fa:	2303      	movs	r3, #3
 80036fc:	60e3      	str	r3, [r4, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE;
 80036fe:	2340      	movs	r3, #64	; 0x40
 8003700:	6163      	str	r3, [r4, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
        latency to the Data FIFO */

        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 8003702:	f000 ff9d 	bl	8004640 <HAL_RCC_GetHCLKFreq>

        if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003706:	4bb3      	ldr	r3, [pc, #716]	; (80039d4 <HAL_PCD_IRQHandler+0x47c>)
 8003708:	4ab3      	ldr	r2, [pc, #716]	; (80039d8 <HAL_PCD_IRQHandler+0x480>)
 800370a:	4403      	add	r3, r0
 800370c:	4293      	cmp	r3, r2
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	f200 816f 	bhi.w	80039f2 <HAL_PCD_IRQHandler+0x49a>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
        }

        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-200 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 800371a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800371c:	4620      	mov	r0, r4
 800371e:	f01e f91a 	bl	8021956 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003722:	6822      	ldr	r2, [r4, #0]
 8003724:	6953      	ldr	r3, [r2, #20]
 8003726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800372a:	6153      	str	r3, [r2, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800372c:	6820      	ldr	r0, [r4, #0]
 800372e:	f004 fb53 	bl	8007dd8 <USB_ReadInterrupts>
 8003732:	06c7      	lsls	r7, r0, #27
 8003734:	d52b      	bpl.n	800378e <HAL_PCD_IRQHandler+0x236>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003736:	6822      	ldr	r2, [r4, #0]
 8003738:	6993      	ldr	r3, [r2, #24]
 800373a:	f023 0310 	bic.w	r3, r3, #16
 800373e:	6193      	str	r3, [r2, #24]

      temp = USBx->GRXSTSP;
 8003740:	f8d9 5020 	ldr.w	r5, [r9, #32]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003744:	f3c5 4343 	ubfx	r3, r5, #17, #4
 8003748:	2b02      	cmp	r3, #2
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800374a:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800374e:	f040 81a0 	bne.w	8003a92 <HAL_PCD_IRQHandler+0x53a>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003752:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003756:	421d      	tst	r5, r3
 8003758:	d014      	beq.n	8003784 <HAL_PCD_IRQHandler+0x22c>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff, (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800375a:	261c      	movs	r6, #28
 800375c:	fb06 4607 	mla	r6, r6, r7, r4
 8003760:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003764:	462a      	mov	r2, r5
 8003766:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800376a:	4648      	mov	r0, r9
 800376c:	f004 faa6 	bl	8007cbc <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003770:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
 8003774:	442b      	add	r3, r5
 8003776:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800377a:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800377e:	441d      	add	r5, r3
 8003780:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003784:	6822      	ldr	r2, [r4, #0]
 8003786:	6993      	ldr	r3, [r2, #24]
 8003788:	f043 0310 	orr.w	r3, r3, #16
 800378c:	6193      	str	r3, [r2, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800378e:	6820      	ldr	r0, [r4, #0]
 8003790:	f004 fb22 	bl	8007dd8 <USB_ReadInterrupts>
 8003794:	0706      	lsls	r6, r0, #28
 8003796:	d507      	bpl.n	80037a8 <HAL_PCD_IRQHandler+0x250>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003798:	4620      	mov	r0, r4
 800379a:	f01e f8d8 	bl	802194e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	6953      	ldr	r3, [r2, #20]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037a8:	6820      	ldr	r0, [r4, #0]
 80037aa:	f004 fb15 	bl	8007dd8 <USB_ReadInterrupts>
 80037ae:	02c5      	lsls	r5, r0, #11
 80037b0:	d509      	bpl.n	80037c6 <HAL_PCD_IRQHandler+0x26e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80037b2:	fa5f f18b 	uxtb.w	r1, fp
 80037b6:	4620      	mov	r0, r4
 80037b8:	f01e f910 	bl	80219dc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80037bc:	6822      	ldr	r2, [r4, #0]
 80037be:	6953      	ldr	r3, [r2, #20]
 80037c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037c4:	6153      	str	r3, [r2, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80037c6:	6820      	ldr	r0, [r4, #0]
 80037c8:	f004 fb06 	bl	8007dd8 <USB_ReadInterrupts>
 80037cc:	0280      	lsls	r0, r0, #10
 80037ce:	d509      	bpl.n	80037e4 <HAL_PCD_IRQHandler+0x28c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037d0:	fa5f f18b 	uxtb.w	r1, fp
 80037d4:	4620      	mov	r0, r4
 80037d6:	f01e f8fd 	bl	80219d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037da:	6822      	ldr	r2, [r4, #0]
 80037dc:	6953      	ldr	r3, [r2, #20]
 80037de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e2:	6153      	str	r3, [r2, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037e4:	6820      	ldr	r0, [r4, #0]
 80037e6:	f004 faf7 	bl	8007dd8 <USB_ReadInterrupts>
 80037ea:	0041      	lsls	r1, r0, #1
 80037ec:	d507      	bpl.n	80037fe <HAL_PCD_IRQHandler+0x2a6>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037ee:	4620      	mov	r0, r4
 80037f0:	f01e f8f8 	bl	80219e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	6953      	ldr	r3, [r2, #20]
 80037f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037fc:	6153      	str	r3, [r2, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80037fe:	6820      	ldr	r0, [r4, #0]
 8003800:	f004 faea 	bl	8007dd8 <USB_ReadInterrupts>
 8003804:	0742      	lsls	r2, r0, #29
 8003806:	d50a      	bpl.n	800381e <HAL_PCD_IRQHandler+0x2c6>
    {
      temp = hpcd->Instance->GOTGINT;
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	685d      	ldr	r5, [r3, #4]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800380c:	076b      	lsls	r3, r5, #29
 800380e:	d502      	bpl.n	8003816 <HAL_PCD_IRQHandler+0x2be>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003810:	4620      	mov	r0, r4
 8003812:	f01e f8eb 	bl	80219ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003816:	6823      	ldr	r3, [r4, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	4315      	orrs	r5, r2
 800381c:	605d      	str	r5, [r3, #4]
    }
  }
}
 800381e:	b005      	add	sp, #20
 8003820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((ep_intr & 0x1U) != 0U)
 8003824:	07e9      	lsls	r1, r5, #31
 8003826:	d52e      	bpl.n	8003886 <HAL_PCD_IRQHandler+0x32e>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003828:	fa5f f28b 	uxtb.w	r2, fp
 800382c:	4611      	mov	r1, r2
 800382e:	6820      	ldr	r0, [r4, #0]
 8003830:	9201      	str	r2, [sp, #4]
 8003832:	f004 fae5 	bl	8007e00 <USB_ReadDevOutEPInterrupt>
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003836:	07c2      	lsls	r2, r0, #31
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003838:	4607      	mov	r7, r0
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800383a:	d50d      	bpl.n	8003858 <HAL_PCD_IRQHandler+0x300>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800383c:	4b67      	ldr	r3, [pc, #412]	; (80039dc <HAL_PCD_IRQHandler+0x484>)
 800383e:	9a01      	ldr	r2, [sp, #4]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003840:	2101      	movs	r1, #1
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003842:	4598      	cmp	r8, r3
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003844:	f8ca 1008 	str.w	r1, [sl, #8]
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003848:	d129      	bne.n	800389e <HAL_PCD_IRQHandler+0x346>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 800384a:	68b1      	ldr	r1, [r6, #8]
 800384c:	040b      	lsls	r3, r1, #16
 800384e:	d520      	bpl.n	8003892 <HAL_PCD_IRQHandler+0x33a>
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003850:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003854:	f8ca 2008 	str.w	r2, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003858:	0739      	lsls	r1, r7, #28
 800385a:	d50f      	bpl.n	800387c <HAL_PCD_IRQHandler+0x324>
            if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800385c:	4b5f      	ldr	r3, [pc, #380]	; (80039dc <HAL_PCD_IRQHandler+0x484>)
 800385e:	4598      	cmp	r8, r3
 8003860:	d106      	bne.n	8003870 <HAL_PCD_IRQHandler+0x318>
              if ((USBx_OUTEP(0U)->DOEPINT & (1U << 15)) != 0U)
 8003862:	68b2      	ldr	r2, [r6, #8]
 8003864:	0412      	lsls	r2, r2, #16
                CLEAR_OUT_EP_INTR(epnum, (1U << 15));
 8003866:	bf44      	itt	mi
 8003868:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 800386c:	f8ca 2008 	strmi.w	r2, [sl, #8]
            HAL_PCD_SetupStageCallback(hpcd);
 8003870:	4620      	mov	r0, r4
 8003872:	f01e f855 	bl	8021920 <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003876:	2308      	movs	r3, #8
 8003878:	f8ca 3008 	str.w	r3, [sl, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800387c:	06fb      	lsls	r3, r7, #27
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800387e:	bf44      	itt	mi
 8003880:	2310      	movmi	r3, #16
 8003882:	f8ca 3008 	strmi.w	r3, [sl, #8]
        epnum++;
 8003886:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 800388a:	086d      	lsrs	r5, r5, #1
 800388c:	f10a 0a20 	add.w	sl, sl, #32
 8003890:	e691      	b.n	80035b6 <HAL_PCD_IRQHandler+0x5e>
                if ((USBx_OUTEP(0U)->DOEPINT & (1U << 5)) != 0U)
 8003892:	68b1      	ldr	r1, [r6, #8]
 8003894:	0688      	lsls	r0, r1, #26
                  CLEAR_OUT_EP_INTR(epnum, (1U << 5));
 8003896:	bf44      	itt	mi
 8003898:	2120      	movmi	r1, #32
 800389a:	f8ca 1008 	strmi.w	r1, [sl, #8]
              HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800389e:	4611      	mov	r1, r2
 80038a0:	4620      	mov	r0, r4
 80038a2:	f01e f843 	bl	802192c <HAL_PCD_DataOutStageCallback>
 80038a6:	e7d7      	b.n	8003858 <HAL_PCD_IRQHandler+0x300>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038a8:	9b01      	ldr	r3, [sp, #4]
 80038aa:	07de      	lsls	r6, r3, #31
 80038ac:	d56e      	bpl.n	800398c <HAL_PCD_IRQHandler+0x434>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038ae:	fa5f fa8b 	uxtb.w	sl, fp
 80038b2:	4651      	mov	r1, sl
 80038b4:	6820      	ldr	r0, [r4, #0]
 80038b6:	f004 faac 	bl	8007e12 <USB_ReadDevInEPInterrupt>
 80038ba:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038bc:	07f0      	lsls	r0, r6, #31
 80038be:	d510      	bpl.n	80038e2 <HAL_PCD_IRQHandler+0x38a>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038c0:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & 0xFU));
 80038c4:	2001      	movs	r0, #1
 80038c6:	f00b 020f 	and.w	r2, fp, #15
 80038ca:	fa00 f202 	lsl.w	r2, r0, r2
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038ce:	ea23 0302 	bic.w	r3, r3, r2
 80038d2:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038d6:	4651      	mov	r1, sl
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038d8:	f8c8 0008 	str.w	r0, [r8, #8]
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80038dc:	4620      	mov	r0, r4
 80038de:	f01e f82e 	bl	802193e <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80038e2:	0731      	lsls	r1, r6, #28
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038e4:	bf44      	itt	mi
 80038e6:	2308      	movmi	r3, #8
 80038e8:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038ec:	06f2      	lsls	r2, r6, #27
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038ee:	bf44      	itt	mi
 80038f0:	2310      	movmi	r3, #16
 80038f2:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80038f6:	0673      	lsls	r3, r6, #25
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80038f8:	bf44      	itt	mi
 80038fa:	2340      	movmi	r3, #64	; 0x40
 80038fc:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003900:	07b7      	lsls	r7, r6, #30
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003902:	bf44      	itt	mi
 8003904:	2302      	movmi	r3, #2
 8003906:	f8c8 3008 	strmi.w	r3, [r8, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800390a:	0636      	lsls	r6, r6, #24
 800390c:	d53e      	bpl.n	800398c <HAL_PCD_IRQHandler+0x434>
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];

  if (ep->xfer_count > ep->xfer_len)
 800390e:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 8003910:	6d2e      	ldr	r6, [r5, #80]	; 0x50
 8003912:	42b3      	cmp	r3, r6
 8003914:	d83a      	bhi.n	800398c <HAL_PCD_IRQHandler+0x434>
  {
    return HAL_ERROR;
  }

  len = ep->xfer_len - ep->xfer_count;
 8003916:	1af6      	subs	r6, r6, r3
  if (len > ep->maxpacket)
  {
    len = ep->maxpacket;
  }

  len32b = (len + 3U) / 4U;
 8003918:	6c6b      	ldr	r3, [r5, #68]	; 0x44
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800391a:	6822      	ldr	r2, [r4, #0]
 800391c:	9202      	str	r2, [sp, #8]
  len32b = (len + 3U) / 4U;
 800391e:	429e      	cmp	r6, r3
 8003920:	bf28      	it	cs
 8003922:	461e      	movcs	r6, r3

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003924:	f502 6310 	add.w	r3, r2, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 8003928:	3603      	adds	r6, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 800392a:	eb03 134b 	add.w	r3, r3, fp, lsl #5
  len32b = (len + 3U) / 4U;
 800392e:	08b6      	lsrs	r6, r6, #2
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8003930:	9303      	str	r3, [sp, #12]
 8003932:	9b03      	ldr	r3, [sp, #12]
 8003934:	6d2f      	ldr	r7, [r5, #80]	; 0x50
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	b29b      	uxth	r3, r3
 800393a:	42b3      	cmp	r3, r6
 800393c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800393e:	d923      	bls.n	8003988 <HAL_PCD_IRQHandler+0x430>
 8003940:	429f      	cmp	r7, r3
 8003942:	d921      	bls.n	8003988 <HAL_PCD_IRQHandler+0x430>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003944:	b967      	cbnz	r7, 8003960 <HAL_PCD_IRQHandler+0x408>
  }

  if (ep->xfer_len <= ep->xfer_count)
  {
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003946:	9b02      	ldr	r3, [sp, #8]
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8003948:	2201      	movs	r2, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800394a:	f503 6a00 	add.w	sl, r3, #2048	; 0x800
 800394e:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << epnum);
 8003952:	fa02 f20b 	lsl.w	r2, r2, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003956:	ea23 0302 	bic.w	r3, r3, r2
 800395a:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 800395e:	e015      	b.n	800398c <HAL_PCD_IRQHandler+0x434>
    len = ep->xfer_len - ep->xfer_count;
 8003960:	1aff      	subs	r7, r7, r3
 8003962:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003964:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8003966:	9802      	ldr	r0, [sp, #8]
 8003968:	429f      	cmp	r7, r3
 800396a:	bf28      	it	cs
 800396c:	461f      	movcs	r7, r3
 800396e:	b2bb      	uxth	r3, r7
 8003970:	4652      	mov	r2, sl
 8003972:	f004 f8cd 	bl	8007b10 <USB_WritePacket>
    ep->xfer_buff  += len;
 8003976:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003978:	443b      	add	r3, r7
 800397a:	64ab      	str	r3, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800397c:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    len32b = (len + 3U) / 4U;
 800397e:	1cfe      	adds	r6, r7, #3
    ep->xfer_count += len;
 8003980:	441f      	add	r7, r3
    len32b = (len + 3U) / 4U;
 8003982:	08b6      	lsrs	r6, r6, #2
    ep->xfer_count += len;
 8003984:	656f      	str	r7, [r5, #84]	; 0x54
 8003986:	e7d4      	b.n	8003932 <HAL_PCD_IRQHandler+0x3da>
  if (ep->xfer_len <= ep->xfer_count)
 8003988:	429f      	cmp	r7, r3
 800398a:	d9dc      	bls.n	8003946 <HAL_PCD_IRQHandler+0x3ee>
        ep_intr >>= 1U;
 800398c:	9b01      	ldr	r3, [sp, #4]
 800398e:	085b      	lsrs	r3, r3, #1
        epnum++;
 8003990:	f10b 0b01 	add.w	fp, fp, #1
        ep_intr >>= 1U;
 8003994:	9301      	str	r3, [sp, #4]
 8003996:	351c      	adds	r5, #28
 8003998:	f108 0820 	add.w	r8, r8, #32
 800399c:	e61c      	b.n	80035d8 <HAL_PCD_IRQHandler+0x80>
        HAL_PCD_ResumeCallback(hpcd);
 800399e:	4620      	mov	r0, r4
 80039a0:	f01d fffe 	bl	80219a0 <HAL_PCD_ResumeCallback>
 80039a4:	e632      	b.n	800360c <HAL_PCD_IRQHandler+0xb4>
        HAL_PCD_SuspendCallback(hpcd);
 80039a6:	4620      	mov	r0, r4
 80039a8:	f01d ffe2 	bl	8021970 <HAL_PCD_SuspendCallback>
 80039ac:	e65e      	b.n	800366c <HAL_PCD_IRQHandler+0x114>
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039ae:	6099      	str	r1, [r3, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039b0:	681a      	ldr	r2, [r3, #0]
 80039b2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80039b6:	601a      	str	r2, [r3, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80039b8:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80039bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80039c0:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80039c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c8:	9a00      	ldr	r2, [sp, #0]
 80039ca:	3201      	adds	r2, #1
 80039cc:	9200      	str	r2, [sp, #0]
 80039ce:	3320      	adds	r3, #32
 80039d0:	e660      	b.n	8003694 <HAL_PCD_IRQHandler+0x13c>
 80039d2:	bf00      	nop
 80039d4:	ff275340 	.word	0xff275340
 80039d8:	000c34ff 	.word	0x000c34ff
 80039dc:	4f54310a 	.word	0x4f54310a
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 80039e0:	696b      	ldr	r3, [r5, #20]
 80039e2:	f043 030b 	orr.w	r3, r3, #11
 80039e6:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80039e8:	692b      	ldr	r3, [r5, #16]
 80039ea:	f043 030b 	orr.w	r3, r3, #11
 80039ee:	612b      	str	r3, [r5, #16]
 80039f0:	e666      	b.n	80036c0 <HAL_PCD_IRQHandler+0x168>
        else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80039f2:	4a2f      	ldr	r2, [pc, #188]	; (8003ab0 <HAL_PCD_IRQHandler+0x558>)
 80039f4:	492f      	ldr	r1, [pc, #188]	; (8003ab4 <HAL_PCD_IRQHandler+0x55c>)
 80039f6:	4402      	add	r2, r0
 80039f8:	428a      	cmp	r2, r1
 80039fa:	d803      	bhi.n	8003a04 <HAL_PCD_IRQHandler+0x4ac>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10) & USB_OTG_GUSBCFG_TRDT);
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003a02:	e68a      	b.n	800371a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a04:	f5a0 0274 	sub.w	r2, r0, #15990784	; 0xf40000
 8003a08:	492b      	ldr	r1, [pc, #172]	; (8003ab8 <HAL_PCD_IRQHandler+0x560>)
 8003a0a:	f5a2 5210 	sub.w	r2, r2, #9216	; 0x2400
 8003a0e:	428a      	cmp	r2, r1
 8003a10:	d803      	bhi.n	8003a1a <HAL_PCD_IRQHandler+0x4c2>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 8003a18:	e67f      	b.n	800371a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003a1a:	f1a0 7283 	sub.w	r2, r0, #17170432	; 0x1060000
 8003a1e:	4927      	ldr	r1, [pc, #156]	; (8003abc <HAL_PCD_IRQHandler+0x564>)
 8003a20:	f5a2 42e7 	sub.w	r2, r2, #29568	; 0x7380
 8003a24:	428a      	cmp	r2, r1
 8003a26:	d803      	bhi.n	8003a30 <HAL_PCD_IRQHandler+0x4d8>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 8003a2e:	e674      	b.n	800371a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003a30:	4a23      	ldr	r2, [pc, #140]	; (8003ac0 <HAL_PCD_IRQHandler+0x568>)
 8003a32:	4924      	ldr	r1, [pc, #144]	; (8003ac4 <HAL_PCD_IRQHandler+0x56c>)
 8003a34:	4402      	add	r2, r0
 8003a36:	428a      	cmp	r2, r1
 8003a38:	d803      	bhi.n	8003a42 <HAL_PCD_IRQHandler+0x4ea>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a3a:	68da      	ldr	r2, [r3, #12]
 8003a3c:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8003a40:	e66b      	b.n	800371a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003a42:	4a21      	ldr	r2, [pc, #132]	; (8003ac8 <HAL_PCD_IRQHandler+0x570>)
 8003a44:	4921      	ldr	r1, [pc, #132]	; (8003acc <HAL_PCD_IRQHandler+0x574>)
 8003a46:	4402      	add	r2, r0
 8003a48:	428a      	cmp	r2, r1
 8003a4a:	d803      	bhi.n	8003a54 <HAL_PCD_IRQHandler+0x4fc>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8003a52:	e662      	b.n	800371a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003a54:	4a1e      	ldr	r2, [pc, #120]	; (8003ad0 <HAL_PCD_IRQHandler+0x578>)
 8003a56:	491f      	ldr	r1, [pc, #124]	; (8003ad4 <HAL_PCD_IRQHandler+0x57c>)
 8003a58:	4402      	add	r2, r0
 8003a5a:	428a      	cmp	r2, r1
 8003a5c:	d803      	bhi.n	8003a66 <HAL_PCD_IRQHandler+0x50e>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8003a64:	e659      	b.n	800371a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003a66:	f1a0 72b7 	sub.w	r2, r0, #23986176	; 0x16e0000
 8003a6a:	491b      	ldr	r1, [pc, #108]	; (8003ad8 <HAL_PCD_IRQHandler+0x580>)
 8003a6c:	f5a2 5258 	sub.w	r2, r2, #13824	; 0x3600
 8003a70:	428a      	cmp	r2, r1
 8003a72:	d803      	bhi.n	8003a7c <HAL_PCD_IRQHandler+0x524>
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a74:	68da      	ldr	r2, [r3, #12]
 8003a76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a7a:	e64e      	b.n	800371a <HAL_PCD_IRQHandler+0x1c2>
        else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003a7c:	4a17      	ldr	r2, [pc, #92]	; (8003adc <HAL_PCD_IRQHandler+0x584>)
 8003a7e:	4918      	ldr	r1, [pc, #96]	; (8003ae0 <HAL_PCD_IRQHandler+0x588>)
 8003a80:	4402      	add	r2, r0
 8003a82:	428a      	cmp	r2, r1
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a84:	68da      	ldr	r2, [r3, #12]
 8003a86:	bf94      	ite	ls
 8003a88:	f442 52e0 	orrls.w	r2, r2, #7168	; 0x1c00
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a8c:	f442 52c0 	orrhi.w	r2, r2, #6144	; 0x1800
 8003a90:	e643      	b.n	800371a <HAL_PCD_IRQHandler+0x1c2>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003a92:	2b06      	cmp	r3, #6
 8003a94:	f47f ae76 	bne.w	8003784 <HAL_PCD_IRQHandler+0x22c>
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003a98:	2208      	movs	r2, #8
 8003a9a:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003a9e:	4648      	mov	r0, r9
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aa0:	261c      	movs	r6, #28
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003aa2:	f004 f90b 	bl	8007cbc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aa6:	fb06 4607 	mla	r6, r6, r7, r4
 8003aaa:	f3c5 150a 	ubfx	r5, r5, #4, #11
 8003aae:	e664      	b.n	800377a <HAL_PCD_IRQHandler+0x222>
 8003ab0:	ff1b1e40 	.word	0xff1b1e40
 8003ab4:	000f423f 	.word	0x000f423f
 8003ab8:	00124f7f 	.word	0x00124f7f
 8003abc:	0013d61f 	.word	0x0013d61f
 8003ac0:	fee5b660 	.word	0xfee5b660
 8003ac4:	0016e35f 	.word	0x0016e35f
 8003ac8:	feced300 	.word	0xfeced300
 8003acc:	001b773f 	.word	0x001b773f
 8003ad0:	feb35bc0 	.word	0xfeb35bc0
 8003ad4:	002191bf 	.word	0x002191bf
 8003ad8:	0038751f 	.word	0x0038751f
 8003adc:	fe5954e0 	.word	0xfe5954e0
 8003ae0:	00419cdf 	.word	0x00419cdf

08003ae4 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 8003ae4:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 8003ae8:	2a01      	cmp	r2, #1
{
 8003aea:	b510      	push	{r4, lr}
 8003aec:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8003aee:	d00b      	beq.n	8003b08 <HAL_PCD_SetAddress+0x24>
 8003af0:	2201      	movs	r2, #1
 8003af2:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003af6:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003afa:	6800      	ldr	r0, [r0, #0]
 8003afc:	f004 f944 	bl	8007d88 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b00:	2000      	movs	r0, #0
 8003b02:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003b06:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003b08:	2002      	movs	r0, #2
}
 8003b0a:	bd10      	pop	{r4, pc}

08003b0c <HAL_PCD_EP_Open>:
{
 8003b0c:	b570      	push	{r4, r5, r6, lr}
 8003b0e:	4604      	mov	r4, r0
 8003b10:	f001 000f 	and.w	r0, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 8003b14:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003b18:	f04f 061c 	mov.w	r6, #28
 8003b1c:	b2c5      	uxtb	r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003b1e:	fb06 4105 	mla	r1, r6, r5, r4
    ep->is_in = 1U;
 8003b22:	bf15      	itete	ne
 8003b24:	fb06 4505 	mlane	r5, r6, r5, r4
    ep->is_in = 0U;
 8003b28:	fb06 4505 	mlaeq	r5, r6, r5, r4
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003b2c:	313c      	addne	r1, #60	; 0x3c
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003b2e:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003b32:	bf15      	itete	ne
 8003b34:	2601      	movne	r6, #1
    ep->is_in = 0U;
 8003b36:	2600      	moveq	r6, #0
    ep->is_in = 1U;
 8003b38:	f885 603d 	strbne.w	r6, [r5, #61]	; 0x3d
    ep->is_in = 0U;
 8003b3c:	f885 61fd 	strbeq.w	r6, [r5, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 8003b40:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 8003b42:	784a      	ldrb	r2, [r1, #1]
  ep->type = ep_type;
 8003b44:	70cb      	strb	r3, [r1, #3]
  ep->num = ep_addr & 0xFU;
 8003b46:	b2c0      	uxtb	r0, r0
 8003b48:	7008      	strb	r0, [r1, #0]
  if (ep->is_in != 0U)
 8003b4a:	b102      	cbz	r2, 8003b4e <HAL_PCD_EP_Open+0x42>
    ep->tx_fifo_num = ep->num;
 8003b4c:	80c8      	strh	r0, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 8003b4e:	2b02      	cmp	r3, #2
    ep->data_pid_start = 0U;
 8003b50:	bf04      	itt	eq
 8003b52:	2300      	moveq	r3, #0
 8003b54:	710b      	strbeq	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003b56:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d009      	beq.n	8003b72 <HAL_PCD_EP_Open+0x66>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b64:	6820      	ldr	r0, [r4, #0]
 8003b66:	f003 feed 	bl	8007944 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b6a:	2000      	movs	r0, #0
 8003b6c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return ret;
 8003b70:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8003b72:	2002      	movs	r0, #2
}
 8003b74:	bd70      	pop	{r4, r5, r6, pc}

08003b76 <HAL_PCD_EP_Close>:
{
 8003b76:	f001 030f 	and.w	r3, r1, #15
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	b510      	push	{r4, lr}
 8003b7e:	4604      	mov	r4, r0
 8003b80:	201c      	movs	r0, #28
  if ((ep_addr & 0x80U) == 0x80U)
 8003b82:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003b86:	fb00 4102 	mla	r1, r0, r2, r4
 8003b8a:	bf19      	ittee	ne
 8003b8c:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003b8e:	fb00 4202 	mlane	r2, r0, r2, r4
    ep->is_in = 0U;
 8003b92:	fb00 4202 	mlaeq	r2, r0, r2, r4
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003b96:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 1U;
 8003b9a:	bf15      	itete	ne
 8003b9c:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003b9e:	2000      	moveq	r0, #0
    ep->is_in = 1U;
 8003ba0:	f882 003d 	strbne.w	r0, [r2, #61]	; 0x3d
    ep->is_in = 0U;
 8003ba4:	f882 01fd 	strbeq.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & 0xFU;
 8003ba8:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 8003baa:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d009      	beq.n	8003bc6 <HAL_PCD_EP_Close+0x50>
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bb8:	6820      	ldr	r0, [r4, #0]
 8003bba:	f003 ff05 	bl	80079c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003bc4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8003bc6:	2002      	movs	r0, #2
}
 8003bc8:	bd10      	pop	{r4, pc}

08003bca <HAL_PCD_EP_Receive>:
{
 8003bca:	b538      	push	{r3, r4, r5, lr}
 8003bcc:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003bd0:	241c      	movs	r4, #28
 8003bd2:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003bd6:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003bda:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 8003bde:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->xfer_count = 0U;
 8003be2:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 8003be4:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_count = 0U;
 8003be8:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
  ep->is_in = 0U;
 8003bec:	f884 31fd 	strb.w	r3, [r4, #509]	; 0x1fd
  ep->num = ep_addr & 0xFU;
 8003bf0:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003bf4:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003bf6:	b91d      	cbnz	r5, 8003c00 <HAL_PCD_EP_Receive+0x36>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003bf8:	f003 ff18 	bl	8007a2c <USB_EP0StartXfer>
}
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c00:	f003 ff96 	bl	8007b30 <USB_EPStartXfer>
 8003c04:	e7fa      	b.n	8003bfc <HAL_PCD_EP_Receive+0x32>

08003c06 <HAL_PCD_EP_Transmit>:
{
 8003c06:	b538      	push	{r3, r4, r5, lr}
 8003c08:	f001 050f 	and.w	r5, r1, #15
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003c0c:	241c      	movs	r4, #28
 8003c0e:	fb04 0105 	mla	r1, r4, r5, r0
  ep->xfer_buff = pBuf;
 8003c12:	fb04 0405 	mla	r4, r4, r5, r0
  ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003c16:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 8003c18:	6523      	str	r3, [r4, #80]	; 0x50
  ep->xfer_count = 0U;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	6563      	str	r3, [r4, #84]	; 0x54
  ep->is_in = 1U;
 8003c1e:	2301      	movs	r3, #1
  ep->xfer_buff = pBuf;
 8003c20:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8003c22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  ep->num = ep_addr & 0xFU;
 8003c26:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c2a:	6800      	ldr	r0, [r0, #0]
  if ((ep_addr & 0xFU) == 0U)
 8003c2c:	b91d      	cbnz	r5, 8003c36 <HAL_PCD_EP_Transmit+0x30>
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c2e:	f003 fefd 	bl	8007a2c <USB_EP0StartXfer>
}
 8003c32:	2000      	movs	r0, #0
 8003c34:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c36:	f003 ff7b 	bl	8007b30 <USB_EPStartXfer>
 8003c3a:	e7fa      	b.n	8003c32 <HAL_PCD_EP_Transmit+0x2c>

08003c3c <HAL_PCD_EP_SetStall>:
{
 8003c3c:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003c3e:	6843      	ldr	r3, [r0, #4]
 8003c40:	f001 050f 	and.w	r5, r1, #15
 8003c44:	429d      	cmp	r5, r3
{
 8003c46:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0xFU) > hpcd->Init.dev_endpoints)
 8003c48:	d82d      	bhi.n	8003ca6 <HAL_PCD_EP_SetStall+0x6a>
  if ((0x80U & ep_addr) == 0x80U)
 8003c4a:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003c4e:	f04f 021c 	mov.w	r2, #28
 8003c52:	d01e      	beq.n	8003c92 <HAL_PCD_EP_SetStall+0x56>
    ep->is_in = 1U;
 8003c54:	fb02 0105 	mla	r1, r2, r5, r0
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003c58:	fb02 0305 	mla	r3, r2, r5, r0
    ep->is_in = 1U;
 8003c5c:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003c5e:	333c      	adds	r3, #60	; 0x3c
    ep->is_in = 1U;
 8003c60:	f881 203d 	strb.w	r2, [r1, #61]	; 0x3d
  ep->is_stall = 1U;
 8003c64:	2201      	movs	r2, #1
 8003c66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & 0xFU;
 8003c68:	701d      	strb	r5, [r3, #0]
  __HAL_LOCK(hpcd);
 8003c6a:	f894 13bc 	ldrb.w	r1, [r4, #956]	; 0x3bc
 8003c6e:	4291      	cmp	r1, r2
 8003c70:	d01b      	beq.n	8003caa <HAL_PCD_EP_SetStall+0x6e>
 8003c72:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003c76:	4619      	mov	r1, r3
 8003c78:	6820      	ldr	r0, [r4, #0]
 8003c7a:	f004 f82d 	bl	8007cd8 <USB_EPSetStall>
  if ((ep_addr & 0xFU) == 0U)
 8003c7e:	b925      	cbnz	r5, 8003c8a <HAL_PCD_EP_SetStall+0x4e>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003c80:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 8003c84:	6820      	ldr	r0, [r4, #0]
 8003c86:	f004 f8f5 	bl	8007e74 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003c90:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003c92:	fb02 0301 	mla	r3, r2, r1, r0
    ep->is_in = 0U;
 8003c96:	fb02 0101 	mla	r1, r2, r1, r0
 8003c9a:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8003c9c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
    ep->is_in = 0U;
 8003ca0:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 8003ca4:	e7de      	b.n	8003c64 <HAL_PCD_EP_SetStall+0x28>
    return HAL_ERROR;
 8003ca6:	2001      	movs	r0, #1
 8003ca8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003caa:	2002      	movs	r0, #2
}
 8003cac:	bd38      	pop	{r3, r4, r5, pc}

08003cae <HAL_PCD_EP_ClrStall>:
{
 8003cae:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cb0:	6843      	ldr	r3, [r0, #4]
 8003cb2:	f001 020f 	and.w	r2, r1, #15
 8003cb6:	429a      	cmp	r2, r3
{
 8003cb8:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003cba:	d826      	bhi.n	8003d0a <HAL_PCD_EP_ClrStall+0x5c>
 8003cbc:	231c      	movs	r3, #28
  if ((0x80U & ep_addr) == 0x80U)
 8003cbe:	f011 0f80 	tst.w	r1, #128	; 0x80
    ep = &hpcd->IN_ep[ep_addr & 0xFU];
 8003cc2:	fb03 0102 	mla	r1, r3, r2, r0
 8003cc6:	bf19      	ittee	ne
 8003cc8:	313c      	addne	r1, #60	; 0x3c
    ep->is_in = 1U;
 8003cca:	fb03 0302 	mlane	r3, r3, r2, r0
    ep = &hpcd->OUT_ep[ep_addr & 0xFU];
 8003cce:	f501 71fe 	addeq.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 8003cd2:	fb03 4302 	mlaeq	r3, r3, r2, r4
    ep->is_in = 1U;
 8003cd6:	bf14      	ite	ne
 8003cd8:	2001      	movne	r0, #1
    ep->is_in = 0U;
 8003cda:	2000      	moveq	r0, #0
  ep->is_stall = 0U;
 8003cdc:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8003ce0:	bf14      	ite	ne
 8003ce2:	f883 003d 	strbne.w	r0, [r3, #61]	; 0x3d
    ep->is_in = 0U;
 8003ce6:	f883 01fd 	strbeq.w	r0, [r3, #509]	; 0x1fd
  ep->is_stall = 0U;
 8003cea:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & 0xFU;
 8003cec:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8003cee:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d00b      	beq.n	8003d0e <HAL_PCD_EP_ClrStall+0x60>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003cfc:	6820      	ldr	r0, [r4, #0]
 8003cfe:	f004 f818 	bl	8007d32 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d02:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
  return HAL_OK;
 8003d06:	4628      	mov	r0, r5
 8003d08:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003d0a:	2001      	movs	r0, #1
 8003d0c:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8003d0e:	2002      	movs	r0, #2
}
 8003d10:	bd38      	pop	{r3, r4, r5, pc}

08003d12 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003d12:	b570      	push	{r4, r5, r6, lr}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003d14:	6804      	ldr	r4, [r0, #0]
 8003d16:	6a63      	ldr	r3, [r4, #36]	; 0x24

  if (fifo == 0U)
 8003d18:	b921      	cbnz	r1, 8003d24 <HAL_PCDEx_SetTxFiFo+0x12>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d1e:	62a3      	str	r3, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 8003d20:	2000      	movs	r0, #0
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d24:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 8003d26:	1e4d      	subs	r5, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003d28:	eb03 4310 	add.w	r3, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	1c46      	adds	r6, r0, #1
 8003d30:	b2c0      	uxtb	r0, r0
 8003d32:	4285      	cmp	r5, r0
 8003d34:	d806      	bhi.n	8003d44 <HAL_PCDEx_SetTxFiFo+0x32>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003d36:	313f      	adds	r1, #63	; 0x3f
 8003d38:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8003d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d40:	6063      	str	r3, [r4, #4]
 8003d42:	e7ed      	b.n	8003d20 <HAL_PCDEx_SetTxFiFo+0xe>
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003d44:	3040      	adds	r0, #64	; 0x40
 8003d46:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8003d4a:	6840      	ldr	r0, [r0, #4]
 8003d4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003d50:	4630      	mov	r0, r6
 8003d52:	e7ec      	b.n	8003d2e <HAL_PCDEx_SetTxFiFo+0x1c>

08003d54 <HAL_PCDEx_SetRxFiFo>:
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
  hpcd->Instance->GRXFSIZ = size;
 8003d54:	6803      	ldr	r3, [r0, #0]

  return HAL_OK;
}
 8003d56:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 8003d58:	6259      	str	r1, [r3, #36]	; 0x24
}
 8003d5a:	4770      	bx	lr

08003d5c <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d5c:	6802      	ldr	r2, [r0, #0]
{
 8003d5e:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8003d60:	2101      	movs	r1, #1
 8003d62:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003d66:	2000      	movs	r0, #0
 8003d68:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003d6c:	6993      	ldr	r3, [r2, #24]
 8003d6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d72:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003d74:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	f043 0303 	orr.w	r3, r3, #3
 8003d7e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 8003d80:	4770      	bx	lr

08003d82 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d82:	6802      	ldr	r2, [r0, #0]

  hpcd->battery_charging_active = 1U;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx->GCCFG |= (USB_OTG_GCCFG_BCDEN);
 8003d8a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003d8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d90:	6393      	str	r3, [r2, #56]	; 0x38

  return HAL_OK;
}
 8003d92:	2000      	movs	r0, #0
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d98:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <HAL_PWREx_GetVoltageRange+0x20>)
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8003da0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003da4:	d007      	beq.n	8003db6 <HAL_PWREx_GetVoltageRange+0x1e>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003daa:	f413 7f80 	tst.w	r3, #256	; 0x100
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003dae:	bf14      	ite	ne
 8003db0:	f44f 7000 	movne.w	r0, #512	; 0x200
 8003db4:	2000      	moveq	r0, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003db6:	4770      	bx	lr
 8003db8:	40007000 	.word	0x40007000

08003dbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dbc:	4b29      	ldr	r3, [pc, #164]	; (8003e64 <HAL_PWREx_ControlVoltageScaling+0xa8>)

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dbe:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003dc0:	bb28      	cbnz	r0, 8003e0e <HAL_PWREx_ControlVoltageScaling+0x52>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dc2:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003dc6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dca:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003dce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dd6:	d119      	bne.n	8003e0c <HAL_PWREx_ControlVoltageScaling+0x50>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de2:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003de4:	4a20      	ldr	r2, [pc, #128]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003de6:	6811      	ldr	r1, [r2, #0]
 8003de8:	2232      	movs	r2, #50	; 0x32
 8003dea:	434a      	muls	r2, r1
 8003dec:	491f      	ldr	r1, [pc, #124]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003dee:	fbb2 f2f1 	udiv	r2, r2, r1
 8003df2:	4619      	mov	r1, r3
 8003df4:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df6:	6958      	ldr	r0, [r3, #20]
 8003df8:	0540      	lsls	r0, r0, #21
 8003dfa:	d500      	bpl.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x42>
 8003dfc:	b922      	cbnz	r2, 8003e08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003dfe:	694b      	ldr	r3, [r1, #20]
 8003e00:	055b      	lsls	r3, r3, #21
 8003e02:	d52d      	bpl.n	8003e60 <HAL_PWREx_ControlVoltageScaling+0xa4>
      {
        return HAL_TIMEOUT;
 8003e04:	2003      	movs	r0, #3
 8003e06:	4770      	bx	lr
        wait_loop_index--;
 8003e08:	3a01      	subs	r2, #1
 8003e0a:	e7f4      	b.n	8003df6 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8003e0c:	4770      	bx	lr
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e0e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003e12:	d120      	bne.n	8003e56 <HAL_PWREx_ControlVoltageScaling+0x9a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e14:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 8003e18:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e1c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e28:	d11a      	bne.n	8003e60 <HAL_PWREx_ControlVoltageScaling+0xa4>

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e34:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003e36:	4a0c      	ldr	r2, [pc, #48]	; (8003e68 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003e38:	6811      	ldr	r1, [r2, #0]
 8003e3a:	2232      	movs	r2, #50	; 0x32
 8003e3c:	434a      	muls	r2, r1
 8003e3e:	490b      	ldr	r1, [pc, #44]	; (8003e6c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003e40:	fbb2 f2f1 	udiv	r2, r2, r1
 8003e44:	4619      	mov	r1, r3
 8003e46:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e48:	6958      	ldr	r0, [r3, #20]
 8003e4a:	0540      	lsls	r0, r0, #21
 8003e4c:	d5d7      	bpl.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x42>
 8003e4e:	2a00      	cmp	r2, #0
 8003e50:	d0d5      	beq.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0x42>
      {
        wait_loop_index--;
 8003e52:	3a01      	subs	r2, #1
 8003e54:	e7f8      	b.n	8003e48 <HAL_PWREx_ControlVoltageScaling+0x8c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e56:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8003e5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e5e:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e60:	2000      	movs	r0, #0
}
 8003e62:	4770      	bx	lr
 8003e64:	40007000 	.word	0x40007000
 8003e68:	20000a50 	.word	0x20000a50
 8003e6c:	000f4240 	.word	0x000f4240

08003e70 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003e70:	4a02      	ldr	r2, [pc, #8]	; (8003e7c <HAL_PWREx_EnableVddUSB+0xc>)
 8003e72:	6853      	ldr	r3, [r2, #4]
 8003e74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e78:	6053      	str	r3, [r2, #4]
 8003e7a:	4770      	bx	lr
 8003e7c:	40007000 	.word	0x40007000

08003e80 <HAL_PWREx_EnableVddIO2>:
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003e80:	4a02      	ldr	r2, [pc, #8]	; (8003e8c <HAL_PWREx_EnableVddIO2+0xc>)
 8003e82:	6853      	ldr	r3, [r2, #4]
 8003e84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e88:	6053      	str	r3, [r2, #4]
 8003e8a:	4770      	bx	lr
 8003e8c:	40007000 	.word	0x40007000

08003e90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e92:	4d1c      	ldr	r5, [pc, #112]	; (8003f04 <RCC_SetFlashLatencyFromMSIRange+0x74>)
 8003e94:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003e96:	00da      	lsls	r2, r3, #3
{
 8003e98:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e9a:	d518      	bpl.n	8003ece <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e9c:	f7ff ff7c 	bl	8003d98 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ea0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003ea4:	d123      	bne.n	8003eee <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003ea6:	2c80      	cmp	r4, #128	; 0x80
 8003ea8:	d928      	bls.n	8003efc <RCC_SetFlashLatencyFromMSIRange+0x6c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003eaa:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003eac:	bf8c      	ite	hi
 8003eae:	2002      	movhi	r0, #2
 8003eb0:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003eb2:	4a15      	ldr	r2, [pc, #84]	; (8003f08 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8003eb4:	6813      	ldr	r3, [r2, #0]
 8003eb6:	f023 030f 	bic.w	r3, r3, #15
 8003eba:	4303      	orrs	r3, r0
 8003ebc:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ebe:	6813      	ldr	r3, [r2, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8003ec4:	1a18      	subs	r0, r3, r0
 8003ec6:	bf18      	it	ne
 8003ec8:	2001      	movne	r0, #1
 8003eca:	b003      	add	sp, #12
 8003ecc:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	65ab      	str	r3, [r5, #88]	; 0x58
 8003ed6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003edc:	9301      	str	r3, [sp, #4]
 8003ede:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8003ee0:	f7ff ff5a 	bl	8003d98 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ee4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8003ee6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eea:	65ab      	str	r3, [r5, #88]	; 0x58
 8003eec:	e7d8      	b.n	8003ea0 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange >= RCC_MSIRANGE_8)
 8003eee:	2c7f      	cmp	r4, #127	; 0x7f
 8003ef0:	d806      	bhi.n	8003f00 <RCC_SetFlashLatencyFromMSIRange+0x70>
      if(msirange == RCC_MSIRANGE_7)
 8003ef2:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8003ef6:	4258      	negs	r0, r3
 8003ef8:	4158      	adcs	r0, r3
 8003efa:	e7da      	b.n	8003eb2 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003efc:	2000      	movs	r0, #0
 8003efe:	e7d8      	b.n	8003eb2 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f00:	2002      	movs	r0, #2
 8003f02:	e7d6      	b.n	8003eb2 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40022000 	.word	0x40022000

08003f0c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f0c:	4b23      	ldr	r3, [pc, #140]	; (8003f9c <HAL_RCC_GetSysClockFreq+0x90>)
 8003f0e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f10:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f12:	f012 020c 	ands.w	r2, r2, #12
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x18>
 8003f18:	2a0c      	cmp	r2, #12
 8003f1a:	d115      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f1c:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003f20:	2901      	cmp	r1, #1
 8003f22:	d118      	bne.n	8003f56 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f24:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8003f26:	481e      	ldr	r0, [pc, #120]	; (8003fa0 <HAL_RCC_GetSysClockFreq+0x94>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f28:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f2a:	bf55      	itete	pl
 8003f2c:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f30:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f32:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f36:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8003f3a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f3e:	b112      	cbz	r2, 8003f46 <HAL_RCC_GetSysClockFreq+0x3a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003f40:	2a0c      	cmp	r2, #12
 8003f42:	d009      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x4c>
 8003f44:	2000      	movs	r0, #0
}
 8003f46:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003f48:	2a04      	cmp	r2, #4
 8003f4a:	d024      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0x8a>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003f4c:	2a08      	cmp	r2, #8
 8003f4e:	4815      	ldr	r0, [pc, #84]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f50:	bf18      	it	ne
 8003f52:	2000      	movne	r0, #0
 8003f54:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003f56:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f58:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f5a:	68da      	ldr	r2, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f5c:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f60:	f3c2 1203 	ubfx	r2, r2, #4, #4
    switch (pllsource)
 8003f64:	2902      	cmp	r1, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f66:	f102 0201 	add.w	r2, r2, #1
    switch (pllsource)
 8003f6a:	d005      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x6c>
 8003f6c:	2903      	cmp	r1, #3
 8003f6e:	d003      	beq.n	8003f78 <HAL_RCC_GetSysClockFreq+0x6c>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f70:	68d9      	ldr	r1, [r3, #12]
 8003f72:	f3c1 2106 	ubfx	r1, r1, #8, #7
 8003f76:	e003      	b.n	8003f80 <HAL_RCC_GetSysClockFreq+0x74>
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f78:	68d9      	ldr	r1, [r3, #12]
 8003f7a:	480a      	ldr	r0, [pc, #40]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f7c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f80:	68db      	ldr	r3, [r3, #12]
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f82:	fbb0 f0f2 	udiv	r0, r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f86:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003f8a:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f8c:	4348      	muls	r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f8e:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003f90:	fbb0 f0f3 	udiv	r0, r0, r3
 8003f94:	4770      	bx	lr
 8003f96:	4803      	ldr	r0, [pc, #12]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	08031314 	.word	0x08031314
 8003fa4:	00f42400 	.word	0x00f42400

08003fa8 <HAL_RCC_OscConfig>:
{
 8003fa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8003fac:	4605      	mov	r5, r0
 8003fae:	b908      	cbnz	r0, 8003fb4 <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	e046      	b.n	8004042 <HAL_RCC_OscConfig+0x9a>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb4:	4ca8      	ldr	r4, [pc, #672]	; (8004258 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fb6:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fb8:	68a6      	ldr	r6, [r4, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fba:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fbc:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fbe:	f006 060c 	and.w	r6, r6, #12
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fc2:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fc6:	d572      	bpl.n	80040ae <HAL_RCC_OscConfig+0x106>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fc8:	b11e      	cbz	r6, 8003fd2 <HAL_RCC_OscConfig+0x2a>
 8003fca:	2e0c      	cmp	r6, #12
 8003fcc:	d151      	bne.n	8004072 <HAL_RCC_OscConfig+0xca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fce:	2f01      	cmp	r7, #1
 8003fd0:	d14f      	bne.n	8004072 <HAL_RCC_OscConfig+0xca>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fd2:	6823      	ldr	r3, [r4, #0]
 8003fd4:	0799      	lsls	r1, r3, #30
 8003fd6:	d502      	bpl.n	8003fde <HAL_RCC_OscConfig+0x36>
 8003fd8:	69ab      	ldr	r3, [r5, #24]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0e8      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	6a28      	ldr	r0, [r5, #32]
 8003fe2:	071a      	lsls	r2, r3, #28
 8003fe4:	bf56      	itet	pl
 8003fe6:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8003fea:	6823      	ldrmi	r3, [r4, #0]
 8003fec:	091b      	lsrpl	r3, r3, #4
 8003fee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff2:	4283      	cmp	r3, r0
 8003ff4:	d228      	bcs.n	8004048 <HAL_RCC_OscConfig+0xa0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ff6:	f7ff ff4b 	bl	8003e90 <RCC_SetFlashLatencyFromMSIRange>
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d1d8      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	f043 0308 	orr.w	r3, r3, #8
 8004004:	6023      	str	r3, [r4, #0]
 8004006:	6823      	ldr	r3, [r4, #0]
 8004008:	6a2a      	ldr	r2, [r5, #32]
 800400a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800400e:	4313      	orrs	r3, r2
 8004010:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004012:	6863      	ldr	r3, [r4, #4]
 8004014:	69ea      	ldr	r2, [r5, #28]
 8004016:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800401a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800401e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004020:	f7ff ff74 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 8004024:	68a3      	ldr	r3, [r4, #8]
 8004026:	4a8d      	ldr	r2, [pc, #564]	; (800425c <HAL_RCC_OscConfig+0x2b4>)
 8004028:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800402c:	5cd3      	ldrb	r3, [r2, r3]
 800402e:	f003 031f 	and.w	r3, r3, #31
 8004032:	40d8      	lsrs	r0, r3
 8004034:	4b8a      	ldr	r3, [pc, #552]	; (8004260 <HAL_RCC_OscConfig+0x2b8>)
 8004036:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8004038:	2000      	movs	r0, #0
 800403a:	f7fc ffb9 	bl	8000fb0 <HAL_InitTick>
        if(status != HAL_OK)
 800403e:	2800      	cmp	r0, #0
 8004040:	d035      	beq.n	80040ae <HAL_RCC_OscConfig+0x106>
}
 8004042:	b003      	add	sp, #12
 8004044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	f043 0308 	orr.w	r3, r3, #8
 800404e:	6023      	str	r3, [r4, #0]
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004056:	4303      	orrs	r3, r0
 8004058:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800405a:	6863      	ldr	r3, [r4, #4]
 800405c:	69ea      	ldr	r2, [r5, #28]
 800405e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004062:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004066:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004068:	f7ff ff12 	bl	8003e90 <RCC_SetFlashLatencyFromMSIRange>
 800406c:	2800      	cmp	r0, #0
 800406e:	d0d7      	beq.n	8004020 <HAL_RCC_OscConfig+0x78>
 8004070:	e79e      	b.n	8003fb0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004072:	69ab      	ldr	r3, [r5, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d03a      	beq.n	80040ee <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_MSI_ENABLE();
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004080:	f7fc ffc6 	bl	8001010 <HAL_GetTick>
 8004084:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004086:	6823      	ldr	r3, [r4, #0]
 8004088:	079b      	lsls	r3, r3, #30
 800408a:	d528      	bpl.n	80040de <HAL_RCC_OscConfig+0x136>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	f043 0308 	orr.w	r3, r3, #8
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	6a2a      	ldr	r2, [r5, #32]
 8004098:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800409c:	4313      	orrs	r3, r2
 800409e:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040a0:	6863      	ldr	r3, [r4, #4]
 80040a2:	69ea      	ldr	r2, [r5, #28]
 80040a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040a8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80040ac:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ae:	682b      	ldr	r3, [r5, #0]
 80040b0:	07d9      	lsls	r1, r3, #31
 80040b2:	d42d      	bmi.n	8004110 <HAL_RCC_OscConfig+0x168>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b4:	682b      	ldr	r3, [r5, #0]
 80040b6:	079a      	lsls	r2, r3, #30
 80040b8:	d46b      	bmi.n	8004192 <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ba:	682b      	ldr	r3, [r5, #0]
 80040bc:	0719      	lsls	r1, r3, #28
 80040be:	f100 80a0 	bmi.w	8004202 <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c2:	682b      	ldr	r3, [r5, #0]
 80040c4:	075a      	lsls	r2, r3, #29
 80040c6:	f100 80cd 	bmi.w	8004264 <HAL_RCC_OscConfig+0x2bc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040ca:	682b      	ldr	r3, [r5, #0]
 80040cc:	069a      	lsls	r2, r3, #26
 80040ce:	f100 8136 	bmi.w	800433e <HAL_RCC_OscConfig+0x396>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f040 815c 	bne.w	8004392 <HAL_RCC_OscConfig+0x3ea>
  return HAL_OK;
 80040da:	2000      	movs	r0, #0
 80040dc:	e7b1      	b.n	8004042 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040de:	f7fc ff97 	bl	8001010 <HAL_GetTick>
 80040e2:	eba0 0008 	sub.w	r0, r0, r8
 80040e6:	2802      	cmp	r0, #2
 80040e8:	d9cd      	bls.n	8004086 <HAL_RCC_OscConfig+0xde>
            return HAL_TIMEOUT;
 80040ea:	2003      	movs	r0, #3
 80040ec:	e7a9      	b.n	8004042 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_MSI_DISABLE();
 80040ee:	6823      	ldr	r3, [r4, #0]
 80040f0:	f023 0301 	bic.w	r3, r3, #1
 80040f4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80040f6:	f7fc ff8b 	bl	8001010 <HAL_GetTick>
 80040fa:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040fc:	6823      	ldr	r3, [r4, #0]
 80040fe:	0798      	lsls	r0, r3, #30
 8004100:	d5d5      	bpl.n	80040ae <HAL_RCC_OscConfig+0x106>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004102:	f7fc ff85 	bl	8001010 <HAL_GetTick>
 8004106:	eba0 0008 	sub.w	r0, r0, r8
 800410a:	2802      	cmp	r0, #2
 800410c:	d9f6      	bls.n	80040fc <HAL_RCC_OscConfig+0x154>
 800410e:	e7ec      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004110:	2e08      	cmp	r6, #8
 8004112:	d003      	beq.n	800411c <HAL_RCC_OscConfig+0x174>
 8004114:	2e0c      	cmp	r6, #12
 8004116:	d108      	bne.n	800412a <HAL_RCC_OscConfig+0x182>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSE)))
 8004118:	2f03      	cmp	r7, #3
 800411a:	d106      	bne.n	800412a <HAL_RCC_OscConfig+0x182>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	039b      	lsls	r3, r3, #14
 8004120:	d5c8      	bpl.n	80040b4 <HAL_RCC_OscConfig+0x10c>
 8004122:	686b      	ldr	r3, [r5, #4]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1c5      	bne.n	80040b4 <HAL_RCC_OscConfig+0x10c>
 8004128:	e742      	b.n	8003fb0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412a:	686b      	ldr	r3, [r5, #4]
 800412c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004130:	d110      	bne.n	8004154 <HAL_RCC_OscConfig+0x1ac>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004138:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800413a:	f7fc ff69 	bl	8001010 <HAL_GetTick>
 800413e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	0398      	lsls	r0, r3, #14
 8004144:	d4b6      	bmi.n	80040b4 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004146:	f7fc ff63 	bl	8001010 <HAL_GetTick>
 800414a:	eba0 0008 	sub.w	r0, r0, r8
 800414e:	2864      	cmp	r0, #100	; 0x64
 8004150:	d9f6      	bls.n	8004140 <HAL_RCC_OscConfig+0x198>
 8004152:	e7ca      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004158:	d104      	bne.n	8004164 <HAL_RCC_OscConfig+0x1bc>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	e7e6      	b.n	8004132 <HAL_RCC_OscConfig+0x18a>
 8004164:	6822      	ldr	r2, [r4, #0]
 8004166:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800416a:	6022      	str	r2, [r4, #0]
 800416c:	6822      	ldr	r2, [r4, #0]
 800416e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004172:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e0      	bne.n	800413a <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8004178:	f7fc ff4a 	bl	8001010 <HAL_GetTick>
 800417c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800417e:	6823      	ldr	r3, [r4, #0]
 8004180:	0399      	lsls	r1, r3, #14
 8004182:	d597      	bpl.n	80040b4 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004184:	f7fc ff44 	bl	8001010 <HAL_GetTick>
 8004188:	eba0 0008 	sub.w	r0, r0, r8
 800418c:	2864      	cmp	r0, #100	; 0x64
 800418e:	d9f6      	bls.n	800417e <HAL_RCC_OscConfig+0x1d6>
 8004190:	e7ab      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004192:	2e04      	cmp	r6, #4
 8004194:	d003      	beq.n	800419e <HAL_RCC_OscConfig+0x1f6>
 8004196:	2e0c      	cmp	r6, #12
 8004198:	d110      	bne.n	80041bc <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_HSI)))
 800419a:	2f02      	cmp	r7, #2
 800419c:	d10e      	bne.n	80041bc <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	055a      	lsls	r2, r3, #21
 80041a2:	d503      	bpl.n	80041ac <HAL_RCC_OscConfig+0x204>
 80041a4:	68eb      	ldr	r3, [r5, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f43f af02 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ac:	6863      	ldr	r3, [r4, #4]
 80041ae:	692a      	ldr	r2, [r5, #16]
 80041b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041b4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80041b8:	6063      	str	r3, [r4, #4]
 80041ba:	e77e      	b.n	80040ba <HAL_RCC_OscConfig+0x112>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041bc:	68eb      	ldr	r3, [r5, #12]
 80041be:	b17b      	cbz	r3, 80041e0 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80041c8:	f7fc ff22 	bl	8001010 <HAL_GetTick>
 80041cc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ce:	6823      	ldr	r3, [r4, #0]
 80041d0:	055b      	lsls	r3, r3, #21
 80041d2:	d4eb      	bmi.n	80041ac <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041d4:	f7fc ff1c 	bl	8001010 <HAL_GetTick>
 80041d8:	1bc0      	subs	r0, r0, r7
 80041da:	2802      	cmp	r0, #2
 80041dc:	d9f7      	bls.n	80041ce <HAL_RCC_OscConfig+0x226>
 80041de:	e784      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI_DISABLE();
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80041e8:	f7fc ff12 	bl	8001010 <HAL_GetTick>
 80041ec:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041ee:	6823      	ldr	r3, [r4, #0]
 80041f0:	0558      	lsls	r0, r3, #21
 80041f2:	f57f af62 	bpl.w	80040ba <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041f6:	f7fc ff0b 	bl	8001010 <HAL_GetTick>
 80041fa:	1bc0      	subs	r0, r0, r7
 80041fc:	2802      	cmp	r0, #2
 80041fe:	d9f6      	bls.n	80041ee <HAL_RCC_OscConfig+0x246>
 8004200:	e773      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004202:	696b      	ldr	r3, [r5, #20]
 8004204:	b19b      	cbz	r3, 800422e <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8004206:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004212:	f7fc fefd 	bl	8001010 <HAL_GetTick>
 8004216:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004218:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800421c:	079b      	lsls	r3, r3, #30
 800421e:	f53f af50 	bmi.w	80040c2 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004222:	f7fc fef5 	bl	8001010 <HAL_GetTick>
 8004226:	1bc0      	subs	r0, r0, r7
 8004228:	2802      	cmp	r0, #2
 800422a:	d9f5      	bls.n	8004218 <HAL_RCC_OscConfig+0x270>
 800422c:	e75d      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_LSI_DISABLE();
 800422e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004232:	f023 0301 	bic.w	r3, r3, #1
 8004236:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800423a:	f7fc fee9 	bl	8001010 <HAL_GetTick>
 800423e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004240:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004244:	0798      	lsls	r0, r3, #30
 8004246:	f57f af3c 	bpl.w	80040c2 <HAL_RCC_OscConfig+0x11a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800424a:	f7fc fee1 	bl	8001010 <HAL_GetTick>
 800424e:	1bc0      	subs	r0, r0, r7
 8004250:	2802      	cmp	r0, #2
 8004252:	d9f5      	bls.n	8004240 <HAL_RCC_OscConfig+0x298>
 8004254:	e749      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
 8004256:	bf00      	nop
 8004258:	40021000 	.word	0x40021000
 800425c:	080312fb 	.word	0x080312fb
 8004260:	20000a50 	.word	0x20000a50
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004264:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004266:	00d9      	lsls	r1, r3, #3
 8004268:	d429      	bmi.n	80042be <HAL_RCC_OscConfig+0x316>
      __HAL_RCC_PWR_CLK_ENABLE();
 800426a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800426c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004270:	65a3      	str	r3, [r4, #88]	; 0x58
 8004272:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004278:	9301      	str	r3, [sp, #4]
 800427a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800427c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004280:	4f71      	ldr	r7, [pc, #452]	; (8004448 <HAL_RCC_OscConfig+0x4a0>)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	05da      	lsls	r2, r3, #23
 8004286:	d51d      	bpl.n	80042c4 <HAL_RCC_OscConfig+0x31c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004288:	68ab      	ldr	r3, [r5, #8]
 800428a:	2b01      	cmp	r3, #1
 800428c:	d12b      	bne.n	80042e6 <HAL_RCC_OscConfig+0x33e>
 800428e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004292:	f043 0301 	orr.w	r3, r3, #1
 8004296:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800429a:	f7fc feb9 	bl	8001010 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800429e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80042a2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80042a8:	0798      	lsls	r0, r3, #30
 80042aa:	d542      	bpl.n	8004332 <HAL_RCC_OscConfig+0x38a>
    if(pwrclkchanged == SET)
 80042ac:	f1b8 0f00 	cmp.w	r8, #0
 80042b0:	f43f af0b 	beq.w	80040ca <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80042bc:	e705      	b.n	80040ca <HAL_RCC_OscConfig+0x122>
    FlagStatus       pwrclkchanged = RESET;
 80042be:	f04f 0800 	mov.w	r8, #0
 80042c2:	e7dd      	b.n	8004280 <HAL_RCC_OscConfig+0x2d8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ca:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80042cc:	f7fc fea0 	bl	8001010 <HAL_GetTick>
 80042d0:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	05db      	lsls	r3, r3, #23
 80042d6:	d4d7      	bmi.n	8004288 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d8:	f7fc fe9a 	bl	8001010 <HAL_GetTick>
 80042dc:	eba0 0009 	sub.w	r0, r0, r9
 80042e0:	2802      	cmp	r0, #2
 80042e2:	d9f6      	bls.n	80042d2 <HAL_RCC_OscConfig+0x32a>
 80042e4:	e701      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d106      	bne.n	80042f8 <HAL_RCC_OscConfig+0x350>
 80042ea:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80042ee:	f043 0304 	orr.w	r3, r3, #4
 80042f2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80042f6:	e7ca      	b.n	800428e <HAL_RCC_OscConfig+0x2e6>
 80042f8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80042fc:	f022 0201 	bic.w	r2, r2, #1
 8004300:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8004304:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004308:	f022 0204 	bic.w	r2, r2, #4
 800430c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1c2      	bne.n	800429a <HAL_RCC_OscConfig+0x2f2>
      tickstart = HAL_GetTick();
 8004314:	f7fc fe7c 	bl	8001010 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004318:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800431c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800431e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004322:	0799      	lsls	r1, r3, #30
 8004324:	d5c2      	bpl.n	80042ac <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004326:	f7fc fe73 	bl	8001010 <HAL_GetTick>
 800432a:	1bc0      	subs	r0, r0, r7
 800432c:	4548      	cmp	r0, r9
 800432e:	d9f6      	bls.n	800431e <HAL_RCC_OscConfig+0x376>
 8004330:	e6db      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7fc fe6d 	bl	8001010 <HAL_GetTick>
 8004336:	1bc0      	subs	r0, r0, r7
 8004338:	4548      	cmp	r0, r9
 800433a:	d9b3      	bls.n	80042a4 <HAL_RCC_OscConfig+0x2fc>
 800433c:	e6d5      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800433e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004340:	b19b      	cbz	r3, 800436a <HAL_RCC_OscConfig+0x3c2>
      __HAL_RCC_HSI48_ENABLE();
 8004342:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004346:	f043 0301 	orr.w	r3, r3, #1
 800434a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800434e:	f7fc fe5f 	bl	8001010 <HAL_GetTick>
 8004352:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004354:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004358:	079b      	lsls	r3, r3, #30
 800435a:	f53f aeba 	bmi.w	80040d2 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800435e:	f7fc fe57 	bl	8001010 <HAL_GetTick>
 8004362:	1bc0      	subs	r0, r0, r7
 8004364:	2802      	cmp	r0, #2
 8004366:	d9f5      	bls.n	8004354 <HAL_RCC_OscConfig+0x3ac>
 8004368:	e6bf      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSI48_DISABLE();
 800436a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004376:	f7fc fe4b 	bl	8001010 <HAL_GetTick>
 800437a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800437c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8004380:	0798      	lsls	r0, r3, #30
 8004382:	f57f aea6 	bpl.w	80040d2 <HAL_RCC_OscConfig+0x12a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004386:	f7fc fe43 	bl	8001010 <HAL_GetTick>
 800438a:	1bc0      	subs	r0, r0, r7
 800438c:	2802      	cmp	r0, #2
 800438e:	d9f5      	bls.n	800437c <HAL_RCC_OscConfig+0x3d4>
 8004390:	e6ab      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004392:	2e0c      	cmp	r6, #12
 8004394:	f43f ae0c 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004398:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a0:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043a2:	d136      	bne.n	8004412 <HAL_RCC_OscConfig+0x46a>
        tickstart = HAL_GetTick();
 80043a4:	f7fc fe34 	bl	8001010 <HAL_GetTick>
 80043a8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	0199      	lsls	r1, r3, #6
 80043ae:	d42a      	bmi.n	8004406 <HAL_RCC_OscConfig+0x45e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80043b2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80043b4:	06db      	lsls	r3, r3, #27
 80043b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80043ba:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80043bc:	4313      	orrs	r3, r2
 80043be:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80043c0:	3a01      	subs	r2, #1
 80043c2:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80043c6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80043c8:	0852      	lsrs	r2, r2, #1
 80043ca:	3a01      	subs	r2, #1
 80043cc:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80043d0:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80043d2:	0852      	lsrs	r2, r2, #1
 80043d4:	3a01      	subs	r2, #1
 80043d6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80043da:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043e2:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043e4:	68e3      	ldr	r3, [r4, #12]
 80043e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ea:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80043ec:	f7fc fe10 	bl	8001010 <HAL_GetTick>
 80043f0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	019a      	lsls	r2, r3, #6
 80043f6:	f53f ae70 	bmi.w	80040da <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fa:	f7fc fe09 	bl	8001010 <HAL_GetTick>
 80043fe:	1b40      	subs	r0, r0, r5
 8004400:	2802      	cmp	r0, #2
 8004402:	d9f6      	bls.n	80043f2 <HAL_RCC_OscConfig+0x44a>
 8004404:	e671      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004406:	f7fc fe03 	bl	8001010 <HAL_GetTick>
 800440a:	1b80      	subs	r0, r0, r6
 800440c:	2802      	cmp	r0, #2
 800440e:	d9cc      	bls.n	80043aa <HAL_RCC_OscConfig+0x402>
 8004410:	e66b      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004418:	bf02      	ittt	eq
 800441a:	68e3      	ldreq	r3, [r4, #12]
 800441c:	f023 0303 	biceq.w	r3, r3, #3
 8004420:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004422:	68e3      	ldr	r3, [r4, #12]
 8004424:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004428:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800442c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800442e:	f7fc fdef 	bl	8001010 <HAL_GetTick>
 8004432:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004434:	6823      	ldr	r3, [r4, #0]
 8004436:	019b      	lsls	r3, r3, #6
 8004438:	f57f ae4f 	bpl.w	80040da <HAL_RCC_OscConfig+0x132>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443c:	f7fc fde8 	bl	8001010 <HAL_GetTick>
 8004440:	1b40      	subs	r0, r0, r5
 8004442:	2802      	cmp	r0, #2
 8004444:	d9f6      	bls.n	8004434 <HAL_RCC_OscConfig+0x48c>
 8004446:	e650      	b.n	80040ea <HAL_RCC_OscConfig+0x142>
 8004448:	40007000 	.word	0x40007000

0800444c <HAL_RCC_ClockConfig>:
{
 800444c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004450:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8004452:	4605      	mov	r5, r0
 8004454:	b910      	cbnz	r0, 800445c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004456:	2001      	movs	r0, #1
 8004458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800445c:	4a71      	ldr	r2, [pc, #452]	; (8004624 <HAL_RCC_ClockConfig+0x1d8>)
 800445e:	6813      	ldr	r3, [r2, #0]
 8004460:	f003 030f 	and.w	r3, r3, #15
 8004464:	428b      	cmp	r3, r1
 8004466:	d334      	bcc.n	80044d2 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004468:	6829      	ldr	r1, [r5, #0]
 800446a:	f011 0701 	ands.w	r7, r1, #1
 800446e:	d13b      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004470:	682a      	ldr	r2, [r5, #0]
 8004472:	0791      	lsls	r1, r2, #30
 8004474:	f140 80bb 	bpl.w	80045ee <HAL_RCC_ClockConfig+0x1a2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004478:	496b      	ldr	r1, [pc, #428]	; (8004628 <HAL_RCC_ClockConfig+0x1dc>)
 800447a:	68a8      	ldr	r0, [r5, #8]
 800447c:	688b      	ldr	r3, [r1, #8]
 800447e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004482:	4303      	orrs	r3, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004484:	608b      	str	r3, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004486:	4967      	ldr	r1, [pc, #412]	; (8004624 <HAL_RCC_ClockConfig+0x1d8>)
 8004488:	680b      	ldr	r3, [r1, #0]
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	429e      	cmp	r6, r3
 8004490:	f0c0 80b5 	bcc.w	80045fe <HAL_RCC_ClockConfig+0x1b2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004494:	f012 0f04 	tst.w	r2, #4
 8004498:	4c63      	ldr	r4, [pc, #396]	; (8004628 <HAL_RCC_ClockConfig+0x1dc>)
 800449a:	f040 80bc 	bne.w	8004616 <HAL_RCC_ClockConfig+0x1ca>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800449e:	0713      	lsls	r3, r2, #28
 80044a0:	d506      	bpl.n	80044b0 <HAL_RCC_ClockConfig+0x64>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044a2:	68a3      	ldr	r3, [r4, #8]
 80044a4:	692a      	ldr	r2, [r5, #16]
 80044a6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80044aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80044ae:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044b0:	f7ff fd2c 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 80044b4:	68a3      	ldr	r3, [r4, #8]
 80044b6:	4a5d      	ldr	r2, [pc, #372]	; (800462c <HAL_RCC_ClockConfig+0x1e0>)
 80044b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80044bc:	5cd3      	ldrb	r3, [r2, r3]
 80044be:	f003 031f 	and.w	r3, r3, #31
 80044c2:	40d8      	lsrs	r0, r3
 80044c4:	4b5a      	ldr	r3, [pc, #360]	; (8004630 <HAL_RCC_ClockConfig+0x1e4>)
 80044c6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80044c8:	2000      	movs	r0, #0
}
 80044ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  status = HAL_InitTick (TICK_INT_PRIORITY);
 80044ce:	f7fc bd6f 	b.w	8000fb0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d2:	6813      	ldr	r3, [r2, #0]
 80044d4:	f023 030f 	bic.w	r3, r3, #15
 80044d8:	430b      	orrs	r3, r1
 80044da:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044dc:	6813      	ldr	r3, [r2, #0]
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	4299      	cmp	r1, r3
 80044e4:	d1b7      	bne.n	8004456 <HAL_RCC_ClockConfig+0xa>
 80044e6:	e7bf      	b.n	8004468 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044e8:	686b      	ldr	r3, [r5, #4]
 80044ea:	4c4f      	ldr	r4, [pc, #316]	; (8004628 <HAL_RCC_ClockConfig+0x1dc>)
 80044ec:	2b03      	cmp	r3, #3
 80044ee:	d168      	bne.n	80045c2 <HAL_RCC_ClockConfig+0x176>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	019b      	lsls	r3, r3, #6
 80044f4:	d5af      	bpl.n	8004456 <HAL_RCC_ClockConfig+0xa>
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
  uint32_t msirange = 0U;
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80044f6:	68e3      	ldr	r3, [r4, #12]
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d11e      	bne.n	800453e <HAL_RCC_ClockConfig+0xf2>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004500:	6823      	ldr	r3, [r4, #0]
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004502:	4a4c      	ldr	r2, [pc, #304]	; (8004634 <HAL_RCC_ClockConfig+0x1e8>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004504:	071f      	lsls	r7, r3, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004506:	bf55      	itete	pl
 8004508:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800450c:	6823      	ldrmi	r3, [r4, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800450e:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004512:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
    msirange = MSIRangeTable[msirange];
 8004516:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800451a:	68e7      	ldr	r7, [r4, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800451c:	68e3      	ldr	r3, [r4, #12]
 800451e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004522:	1c58      	adds	r0, r3, #1
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004524:	f007 0303 	and.w	r3, r7, #3

  switch (pllsource)
 8004528:	2b02      	cmp	r3, #2
 800452a:	d00a      	beq.n	8004542 <HAL_RCC_ClockConfig+0xf6>
 800452c:	2b03      	cmp	r3, #3
 800452e:	d008      	beq.n	8004542 <HAL_RCC_ClockConfig+0xf6>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004530:	fbb2 f3f0 	udiv	r3, r2, r0
 8004534:	68e7      	ldr	r7, [r4, #12]
 8004536:	f3c7 2706 	ubfx	r7, r7, #8, #7
 800453a:	437b      	muls	r3, r7
 800453c:	e008      	b.n	8004550 <HAL_RCC_ClockConfig+0x104>
  uint32_t msirange = 0U;
 800453e:	2200      	movs	r2, #0
 8004540:	e7eb      	b.n	800451a <HAL_RCC_ClockConfig+0xce>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004542:	68e2      	ldr	r2, [r4, #12]
 8004544:	4b3c      	ldr	r3, [pc, #240]	; (8004638 <HAL_RCC_ClockConfig+0x1ec>)
 8004546:	fbb3 f3f0 	udiv	r3, r3, r0
 800454a:	f3c2 2206 	ubfx	r2, r2, #8, #7
 800454e:	4353      	muls	r3, r2
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004550:	68e2      	ldr	r2, [r4, #12]
 8004552:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8004556:	3201      	adds	r2, #1
 8004558:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco/pllr;
 800455a:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800455e:	4a37      	ldr	r2, [pc, #220]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d81c      	bhi.n	800459e <HAL_RCC_ClockConfig+0x152>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004564:	2700      	movs	r7, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004566:	68a3      	ldr	r3, [r4, #8]
 8004568:	686a      	ldr	r2, [r5, #4]
 800456a:	f023 0303 	bic.w	r3, r3, #3
 800456e:	4313      	orrs	r3, r2
 8004570:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004572:	f7fc fd4d 	bl	8001010 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004576:	f241 3988 	movw	r9, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800457a:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457c:	68a3      	ldr	r3, [r4, #8]
 800457e:	686a      	ldr	r2, [r5, #4]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004588:	f43f af72 	beq.w	8004470 <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800458c:	f7fc fd40 	bl	8001010 <HAL_GetTick>
 8004590:	eba0 0008 	sub.w	r0, r0, r8
 8004594:	4548      	cmp	r0, r9
 8004596:	d9f1      	bls.n	800457c <HAL_RCC_ClockConfig+0x130>
        return HAL_TIMEOUT;
 8004598:	2003      	movs	r0, #3
}
 800459a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800459e:	68a3      	ldr	r3, [r4, #8]
 80045a0:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0x16a>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045a6:	68a3      	ldr	r3, [r4, #8]
 80045a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b0:	60a3      	str	r3, [r4, #8]
        hpre = RCC_SYSCLK_DIV2;
 80045b2:	2780      	movs	r7, #128	; 0x80
 80045b4:	e7d7      	b.n	8004566 <HAL_RCC_ClockConfig+0x11a>
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80045b6:	0788      	lsls	r0, r1, #30
 80045b8:	d5d4      	bpl.n	8004564 <HAL_RCC_ClockConfig+0x118>
 80045ba:	68ab      	ldr	r3, [r5, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1d1      	bne.n	8004564 <HAL_RCC_ClockConfig+0x118>
 80045c0:	e7f1      	b.n	80045a6 <HAL_RCC_ClockConfig+0x15a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d10a      	bne.n	80045dc <HAL_RCC_ClockConfig+0x190>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045cc:	f43f af43 	beq.w	8004456 <HAL_RCC_ClockConfig+0xa>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80045d0:	f7ff fc9c 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 80045d4:	4b19      	ldr	r3, [pc, #100]	; (800463c <HAL_RCC_ClockConfig+0x1f0>)
 80045d6:	4298      	cmp	r0, r3
 80045d8:	d9c4      	bls.n	8004564 <HAL_RCC_ClockConfig+0x118>
 80045da:	e7e4      	b.n	80045a6 <HAL_RCC_ClockConfig+0x15a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045dc:	b91b      	cbnz	r3, 80045e6 <HAL_RCC_ClockConfig+0x19a>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	f013 0f02 	tst.w	r3, #2
 80045e4:	e7f2      	b.n	80045cc <HAL_RCC_ClockConfig+0x180>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045e6:	6823      	ldr	r3, [r4, #0]
 80045e8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80045ec:	e7ee      	b.n	80045cc <HAL_RCC_ClockConfig+0x180>
    if(hpre == RCC_SYSCLK_DIV2)
 80045ee:	2f80      	cmp	r7, #128	; 0x80
 80045f0:	f47f af49 	bne.w	8004486 <HAL_RCC_ClockConfig+0x3a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80045f4:	490c      	ldr	r1, [pc, #48]	; (8004628 <HAL_RCC_ClockConfig+0x1dc>)
 80045f6:	688b      	ldr	r3, [r1, #8]
 80045f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045fc:	e742      	b.n	8004484 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fe:	680b      	ldr	r3, [r1, #0]
 8004600:	f023 030f 	bic.w	r3, r3, #15
 8004604:	4333      	orrs	r3, r6
 8004606:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004608:	680b      	ldr	r3, [r1, #0]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	429e      	cmp	r6, r3
 8004610:	f47f af21 	bne.w	8004456 <HAL_RCC_ClockConfig+0xa>
 8004614:	e73e      	b.n	8004494 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004616:	68a3      	ldr	r3, [r4, #8]
 8004618:	68e9      	ldr	r1, [r5, #12]
 800461a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800461e:	430b      	orrs	r3, r1
 8004620:	60a3      	str	r3, [r4, #8]
 8004622:	e73c      	b.n	800449e <HAL_RCC_ClockConfig+0x52>
 8004624:	40022000 	.word	0x40022000
 8004628:	40021000 	.word	0x40021000
 800462c:	080312fb 	.word	0x080312fb
 8004630:	20000a50 	.word	0x20000a50
 8004634:	08031314 	.word	0x08031314
 8004638:	00f42400 	.word	0x00f42400
 800463c:	04c4b400 	.word	0x04c4b400

08004640 <HAL_RCC_GetHCLKFreq>:
}
 8004640:	4b01      	ldr	r3, [pc, #4]	; (8004648 <HAL_RCC_GetHCLKFreq+0x8>)
 8004642:	6818      	ldr	r0, [r3, #0]
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	20000a50 	.word	0x20000a50

0800464c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x18>)
 800464e:	4a06      	ldr	r2, [pc, #24]	; (8004668 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004656:	5cd3      	ldrb	r3, [r2, r3]
 8004658:	4a04      	ldr	r2, [pc, #16]	; (800466c <HAL_RCC_GetPCLK1Freq+0x20>)
 800465a:	6810      	ldr	r0, [r2, #0]
 800465c:	f003 031f 	and.w	r3, r3, #31
}
 8004660:	40d8      	lsrs	r0, r3
 8004662:	4770      	bx	lr
 8004664:	40021000 	.word	0x40021000
 8004668:	0803130b 	.word	0x0803130b
 800466c:	20000a50 	.word	0x20000a50

08004670 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004670:	4b05      	ldr	r3, [pc, #20]	; (8004688 <HAL_RCC_GetPCLK2Freq+0x18>)
 8004672:	4a06      	ldr	r2, [pc, #24]	; (800468c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800467a:	5cd3      	ldrb	r3, [r2, r3]
 800467c:	4a04      	ldr	r2, [pc, #16]	; (8004690 <HAL_RCC_GetPCLK2Freq+0x20>)
 800467e:	6810      	ldr	r0, [r2, #0]
 8004680:	f003 031f 	and.w	r3, r3, #31
}
 8004684:	40d8      	lsrs	r0, r3
 8004686:	4770      	bx	lr
 8004688:	40021000 	.word	0x40021000
 800468c:	0803130b 	.word	0x0803130b
 8004690:	20000a50 	.word	0x20000a50

08004694 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004696:	4b3f      	ldr	r3, [pc, #252]	; (8004794 <RCCEx_PLLSAI1_Config+0x100>)
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	f012 0f03 	tst.w	r2, #3
{
 800469e:	4605      	mov	r5, r0
 80046a0:	460e      	mov	r6, r1
 80046a2:	461c      	mov	r4, r3
 80046a4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046a6:	d022      	beq.n	80046ee <RCCEx_PLLSAI1_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	4283      	cmp	r3, r0
 80046b0:	d130      	bne.n	8004714 <RCCEx_PLLSAI1_Config+0x80>
       ||
 80046b2:	b37b      	cbz	r3, 8004714 <RCCEx_PLLSAI1_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046b4:	6823      	ldr	r3, [r4, #0]
 80046b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046ba:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046bc:	f7fc fca8 	bl	8001010 <HAL_GetTick>
 80046c0:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046c2:	6823      	ldr	r3, [r4, #0]
 80046c4:	011a      	lsls	r2, r3, #4
 80046c6:	d42e      	bmi.n	8004726 <RCCEx_PLLSAI1_Config+0x92>
 80046c8:	68af      	ldr	r7, [r5, #8]
 80046ca:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046cc:	b396      	cbz	r6, 8004734 <RCCEx_PLLSAI1_Config+0xa0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80046ce:	2e01      	cmp	r6, #1
 80046d0:	d14c      	bne.n	800476c <RCCEx_PLLSAI1_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046d2:	6922      	ldr	r2, [r4, #16]
 80046d4:	4930      	ldr	r1, [pc, #192]	; (8004798 <RCCEx_PLLSAI1_Config+0x104>)
 80046d6:	4011      	ands	r1, r2
 80046d8:	692a      	ldr	r2, [r5, #16]
 80046da:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80046de:	3b01      	subs	r3, #1
 80046e0:	0852      	lsrs	r2, r2, #1
 80046e2:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 80046e6:	3a01      	subs	r2, #1
 80046e8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80046ec:	e02d      	b.n	800474a <RCCEx_PLLSAI1_Config+0xb6>
    switch(PllSai1->PLLSAI1Source)
 80046ee:	2802      	cmp	r0, #2
 80046f0:	d00c      	beq.n	800470c <RCCEx_PLLSAI1_Config+0x78>
 80046f2:	2803      	cmp	r0, #3
 80046f4:	d010      	beq.n	8004718 <RCCEx_PLLSAI1_Config+0x84>
 80046f6:	2801      	cmp	r0, #1
 80046f8:	d10c      	bne.n	8004714 <RCCEx_PLLSAI1_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	079f      	lsls	r7, r3, #30
 80046fe:	d534      	bpl.n	800476a <RCCEx_PLLSAI1_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004700:	68e3      	ldr	r3, [r4, #12]
 8004702:	f023 0303 	bic.w	r3, r3, #3
 8004706:	4318      	orrs	r0, r3
 8004708:	60e0      	str	r0, [r4, #12]
 800470a:	e7d3      	b.n	80046b4 <RCCEx_PLLSAI1_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004712:	d1f5      	bne.n	8004700 <RCCEx_PLLSAI1_Config+0x6c>
 8004714:	2001      	movs	r0, #1
 8004716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	0391      	lsls	r1, r2, #14
 800471c:	d4f0      	bmi.n	8004700 <RCCEx_PLLSAI1_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004724:	e7f5      	b.n	8004712 <RCCEx_PLLSAI1_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004726:	f7fc fc73 	bl	8001010 <HAL_GetTick>
 800472a:	1bc0      	subs	r0, r0, r7
 800472c:	2802      	cmp	r0, #2
 800472e:	d9c8      	bls.n	80046c2 <RCCEx_PLLSAI1_Config+0x2e>
        status = HAL_TIMEOUT;
 8004730:	2003      	movs	r0, #3
 8004732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004734:	68e8      	ldr	r0, [r5, #12]
 8004736:	6926      	ldr	r6, [r4, #16]
 8004738:	4918      	ldr	r1, [pc, #96]	; (800479c <RCCEx_PLLSAI1_Config+0x108>)
 800473a:	06c2      	lsls	r2, r0, #27
 800473c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004740:	4031      	ands	r1, r6
 8004742:	430a      	orrs	r2, r1
 8004744:	3b01      	subs	r3, #1
 8004746:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800474a:	6123      	str	r3, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800474c:	6823      	ldr	r3, [r4, #0]
 800474e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004752:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004754:	f7fc fc5c 	bl	8001010 <HAL_GetTick>
 8004758:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800475a:	6823      	ldr	r3, [r4, #0]
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	d513      	bpl.n	8004788 <RCCEx_PLLSAI1_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004760:	6923      	ldr	r3, [r4, #16]
 8004762:	69aa      	ldr	r2, [r5, #24]
 8004764:	4313      	orrs	r3, r2
 8004766:	6123      	str	r3, [r4, #16]
 8004768:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800476a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800476c:	6921      	ldr	r1, [r4, #16]
 800476e:	4a0c      	ldr	r2, [pc, #48]	; (80047a0 <RCCEx_PLLSAI1_Config+0x10c>)
 8004770:	400a      	ands	r2, r1
 8004772:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004776:	3b01      	subs	r3, #1
 8004778:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800477c:	696a      	ldr	r2, [r5, #20]
 800477e:	0852      	lsrs	r2, r2, #1
 8004780:	3a01      	subs	r2, #1
 8004782:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004786:	e7e0      	b.n	800474a <RCCEx_PLLSAI1_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004788:	f7fc fc42 	bl	8001010 <HAL_GetTick>
 800478c:	1b80      	subs	r0, r0, r6
 800478e:	2802      	cmp	r0, #2
 8004790:	d9e3      	bls.n	800475a <RCCEx_PLLSAI1_Config+0xc6>
 8004792:	e7cd      	b.n	8004730 <RCCEx_PLLSAI1_Config+0x9c>
 8004794:	40021000 	.word	0x40021000
 8004798:	ff9f800f 	.word	0xff9f800f
 800479c:	07ff800f 	.word	0x07ff800f
 80047a0:	f9ff800f 	.word	0xf9ff800f

080047a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047a6:	4b3f      	ldr	r3, [pc, #252]	; (80048a4 <RCCEx_PLLSAI2_Config+0x100>)
 80047a8:	68da      	ldr	r2, [r3, #12]
 80047aa:	f012 0f03 	tst.w	r2, #3
{
 80047ae:	4605      	mov	r5, r0
 80047b0:	460e      	mov	r6, r1
 80047b2:	461c      	mov	r4, r3
 80047b4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80047b6:	d022      	beq.n	80047fe <RCCEx_PLLSAI2_Config+0x5a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f003 0303 	and.w	r3, r3, #3
 80047be:	4283      	cmp	r3, r0
 80047c0:	d130      	bne.n	8004824 <RCCEx_PLLSAI2_Config+0x80>
       ||
 80047c2:	b37b      	cbz	r3, 8004824 <RCCEx_PLLSAI2_Config+0x80>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ca:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047cc:	f7fc fc20 	bl	8001010 <HAL_GetTick>
 80047d0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047d2:	6823      	ldr	r3, [r4, #0]
 80047d4:	009a      	lsls	r2, r3, #2
 80047d6:	d42e      	bmi.n	8004836 <RCCEx_PLLSAI2_Config+0x92>
 80047d8:	68af      	ldr	r7, [r5, #8]
 80047da:	686b      	ldr	r3, [r5, #4]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047dc:	b396      	cbz	r6, 8004844 <RCCEx_PLLSAI2_Config+0xa0>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80047de:	2e01      	cmp	r6, #1
 80047e0:	d14c      	bne.n	800487c <RCCEx_PLLSAI2_Config+0xd8>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047e2:	6962      	ldr	r2, [r4, #20]
 80047e4:	4930      	ldr	r1, [pc, #192]	; (80048a8 <RCCEx_PLLSAI2_Config+0x104>)
 80047e6:	4011      	ands	r1, r2
 80047e8:	692a      	ldr	r2, [r5, #16]
 80047ea:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80047ee:	3b01      	subs	r3, #1
 80047f0:	0852      	lsrs	r2, r2, #1
 80047f2:	ea41 1303 	orr.w	r3, r1, r3, lsl #4
 80047f6:	3a01      	subs	r2, #1
 80047f8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80047fc:	e02d      	b.n	800485a <RCCEx_PLLSAI2_Config+0xb6>
    switch(PllSai2->PLLSAI2Source)
 80047fe:	2802      	cmp	r0, #2
 8004800:	d00c      	beq.n	800481c <RCCEx_PLLSAI2_Config+0x78>
 8004802:	2803      	cmp	r0, #3
 8004804:	d010      	beq.n	8004828 <RCCEx_PLLSAI2_Config+0x84>
 8004806:	2801      	cmp	r0, #1
 8004808:	d10c      	bne.n	8004824 <RCCEx_PLLSAI2_Config+0x80>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	079f      	lsls	r7, r3, #30
 800480e:	d534      	bpl.n	800487a <RCCEx_PLLSAI2_Config+0xd6>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004810:	68e3      	ldr	r3, [r4, #12]
 8004812:	f023 0303 	bic.w	r3, r3, #3
 8004816:	4318      	orrs	r0, r3
 8004818:	60e0      	str	r0, [r4, #12]
 800481a:	e7d3      	b.n	80047c4 <RCCEx_PLLSAI2_Config+0x20>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004822:	d1f5      	bne.n	8004810 <RCCEx_PLLSAI2_Config+0x6c>
 8004824:	2001      	movs	r0, #1
 8004826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	0391      	lsls	r1, r2, #14
 800482c:	d4f0      	bmi.n	8004810 <RCCEx_PLLSAI2_Config+0x6c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004834:	e7f5      	b.n	8004822 <RCCEx_PLLSAI2_Config+0x7e>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004836:	f7fc fbeb 	bl	8001010 <HAL_GetTick>
 800483a:	1bc0      	subs	r0, r0, r7
 800483c:	2802      	cmp	r0, #2
 800483e:	d9c8      	bls.n	80047d2 <RCCEx_PLLSAI2_Config+0x2e>
        status = HAL_TIMEOUT;
 8004840:	2003      	movs	r0, #3
 8004842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004844:	68e8      	ldr	r0, [r5, #12]
 8004846:	6966      	ldr	r6, [r4, #20]
 8004848:	4918      	ldr	r1, [pc, #96]	; (80048ac <RCCEx_PLLSAI2_Config+0x108>)
 800484a:	06c2      	lsls	r2, r0, #27
 800484c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004850:	4031      	ands	r1, r6
 8004852:	430a      	orrs	r2, r1
 8004854:	3b01      	subs	r3, #1
 8004856:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800485a:	6163      	str	r3, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004862:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004864:	f7fc fbd4 	bl	8001010 <HAL_GetTick>
 8004868:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800486a:	6823      	ldr	r3, [r4, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	d513      	bpl.n	8004898 <RCCEx_PLLSAI2_Config+0xf4>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004870:	6963      	ldr	r3, [r4, #20]
 8004872:	69aa      	ldr	r2, [r5, #24]
 8004874:	4313      	orrs	r3, r2
 8004876:	6163      	str	r3, [r4, #20]
 8004878:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800487a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800487c:	6961      	ldr	r1, [r4, #20]
 800487e:	4a0c      	ldr	r2, [pc, #48]	; (80048b0 <RCCEx_PLLSAI2_Config+0x10c>)
 8004880:	400a      	ands	r2, r1
 8004882:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004886:	3b01      	subs	r3, #1
 8004888:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
 800488c:	696a      	ldr	r2, [r5, #20]
 800488e:	0852      	lsrs	r2, r2, #1
 8004890:	3a01      	subs	r2, #1
 8004892:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004896:	e7e0      	b.n	800485a <RCCEx_PLLSAI2_Config+0xb6>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004898:	f7fc fbba 	bl	8001010 <HAL_GetTick>
 800489c:	1b80      	subs	r0, r0, r6
 800489e:	2802      	cmp	r0, #2
 80048a0:	d9e3      	bls.n	800486a <RCCEx_PLLSAI2_Config+0xc6>
 80048a2:	e7cd      	b.n	8004840 <RCCEx_PLLSAI2_Config+0x9c>
 80048a4:	40021000 	.word	0x40021000
 80048a8:	ff9f800f 	.word	0xff9f800f
 80048ac:	07ff800f 	.word	0x07ff800f
 80048b0:	f9ff800f 	.word	0xf9ff800f

080048b4 <HAL_RCCEx_PeriphCLKConfig>:
{
 80048b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048b8:	6805      	ldr	r5, [r0, #0]
 80048ba:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 80048be:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048c0:	d023      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 80048c2:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80048c4:	2940      	cmp	r1, #64	; 0x40
 80048c6:	d014      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
 80048c8:	d804      	bhi.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 80048ca:	b1c1      	cbz	r1, 80048fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
 80048cc:	2920      	cmp	r1, #32
 80048ce:	d02b      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0x74>
      ret = HAL_ERROR;
 80048d0:	2501      	movs	r5, #1
 80048d2:	e01a      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch(PeriphClkInit->Sai1ClockSelection)
 80048d4:	2960      	cmp	r1, #96	; 0x60
 80048d6:	d001      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80048d8:	2980      	cmp	r1, #128	; 0x80
 80048da:	d1f9      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048dc:	4a4e      	ldr	r2, [pc, #312]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048de:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80048e0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80048e4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 80048e8:	430b      	orrs	r3, r1
 80048ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80048ee:	2500      	movs	r5, #0
 80048f0:	e00b      	b.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x56>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048f2:	4a49      	ldr	r2, [pc, #292]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80048f4:	68d3      	ldr	r3, [r2, #12]
 80048f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fa:	60d3      	str	r3, [r2, #12]
      break;
 80048fc:	e7ee      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x28>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048fe:	3004      	adds	r0, #4
 8004900:	f7ff fec8 	bl	8004694 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004904:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8004906:	2800      	cmp	r0, #0
 8004908:	d0e8      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x28>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	04db      	lsls	r3, r3, #19
 800490e:	d509      	bpl.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004910:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8004912:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004916:	d014      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 8004918:	d80b      	bhi.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800491a:	b1c1      	cbz	r1, 800494e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800491c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004920:	d071      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x152>
      ret = HAL_ERROR;
 8004922:	2501      	movs	r5, #1
 8004924:	462e      	mov	r6, r5
 8004926:	e021      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004928:	2100      	movs	r1, #0
 800492a:	3020      	adds	r0, #32
 800492c:	f7ff ff3a 	bl	80047a4 <RCCEx_PLLSAI2_Config>
 8004930:	e7e8      	b.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch(PeriphClkInit->Sai2ClockSelection)
 8004932:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8004936:	d002      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8004938:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800493c:	d1f1      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800493e:	462e      	mov	r6, r5
 8004940:	e009      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0xa2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004942:	4a35      	ldr	r2, [pc, #212]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004944:	68d3      	ldr	r3, [r2, #12]
 8004946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800494a:	60d3      	str	r3, [r2, #12]
 800494c:	e7f7      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800494e:	1d20      	adds	r0, r4, #4
 8004950:	f7ff fea0 	bl	8004694 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004954:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8004956:	2e00      	cmp	r6, #0
 8004958:	d15b      	bne.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0x15e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800495a:	4a2f      	ldr	r2, [pc, #188]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800495c:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800495e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004962:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004966:	430b      	orrs	r3, r1
 8004968:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	039f      	lsls	r7, r3, #14
 8004970:	d565      	bpl.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004972:	4f29      	ldr	r7, [pc, #164]	; (8004a18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004976:	00d8      	lsls	r0, r3, #3
 8004978:	f140 81f3 	bpl.w	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    FlagStatus       pwrclkchanged = RESET;
 800497c:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004980:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8004a1c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004984:	f8d9 3000 	ldr.w	r3, [r9]
 8004988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498c:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8004990:	f7fc fb3e 	bl	8001010 <HAL_GetTick>
 8004994:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004996:	f8d9 3000 	ldr.w	r3, [r9]
 800499a:	05d9      	lsls	r1, r3, #23
 800499c:	d540      	bpl.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if(ret == HAL_OK)
 800499e:	2e00      	cmp	r6, #0
 80049a0:	f040 8197 	bne.w	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049a8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80049ac:	d015      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x126>
 80049ae:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d011      	beq.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x126>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80049ba:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80049be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80049c2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80049d2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80049d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049da:	07da      	lsls	r2, r3, #31
 80049dc:	d509      	bpl.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
        tickstart = HAL_GetTick();
 80049de:	f7fc fb17 	bl	8001010 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e2:	f241 3a88 	movw	sl, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80049e6:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049ec:	079b      	lsls	r3, r3, #30
 80049ee:	f140 8168 	bpl.w	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049f6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80049fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a04:	e014      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a06:	2100      	movs	r1, #0
 8004a08:	f104 0020 	add.w	r0, r4, #32
 8004a0c:	f7ff feca 	bl	80047a4 <RCCEx_PLLSAI2_Config>
 8004a10:	e7a0      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004a12:	4635      	mov	r5, r6
 8004a14:	e7aa      	b.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xb8>
 8004a16:	bf00      	nop
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a20:	f7fc faf6 	bl	8001010 <HAL_GetTick>
 8004a24:	eba0 000a 	sub.w	r0, r0, sl
 8004a28:	2802      	cmp	r0, #2
 8004a2a:	d9b4      	bls.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xe2>
        ret = HAL_TIMEOUT;
 8004a2c:	2503      	movs	r5, #3
 8004a2e:	462e      	mov	r6, r5
    if(pwrclkchanged == SET)
 8004a30:	f1b8 0f00 	cmp.w	r8, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a3c:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a3e:	6823      	ldr	r3, [r4, #0]
 8004a40:	07df      	lsls	r7, r3, #31
 8004a42:	d508      	bpl.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a44:	49c0      	ldr	r1, [pc, #768]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a46:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004a48:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a4c:	f022 0203 	bic.w	r2, r2, #3
 8004a50:	4302      	orrs	r2, r0
 8004a52:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a56:	0798      	lsls	r0, r3, #30
 8004a58:	d508      	bpl.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a5a:	49bb      	ldr	r1, [pc, #748]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a5c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004a5e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a62:	f022 020c 	bic.w	r2, r2, #12
 8004a66:	4302      	orrs	r2, r0
 8004a68:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004a6c:	0759      	lsls	r1, r3, #29
 8004a6e:	d508      	bpl.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004a70:	49b5      	ldr	r1, [pc, #724]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a72:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004a74:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a78:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8004a7c:	4302      	orrs	r2, r0
 8004a7e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a82:	071a      	lsls	r2, r3, #28
 8004a84:	d508      	bpl.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a86:	49b0      	ldr	r1, [pc, #704]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a88:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8004a8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004a8e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004a92:	4302      	orrs	r2, r0
 8004a94:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a98:	06df      	lsls	r7, r3, #27
 8004a9a:	d508      	bpl.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a9c:	49aa      	ldr	r1, [pc, #680]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a9e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8004aa0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004aa4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004aa8:	4302      	orrs	r2, r0
 8004aaa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004aae:	0698      	lsls	r0, r3, #26
 8004ab0:	d508      	bpl.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x210>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ab2:	49a5      	ldr	r1, [pc, #660]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004ab4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004ab6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004aba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004abe:	4302      	orrs	r2, r0
 8004ac0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ac4:	0599      	lsls	r1, r3, #22
 8004ac6:	d508      	bpl.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x226>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004ac8:	499f      	ldr	r1, [pc, #636]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004aca:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8004acc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ad0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8004ad4:	4302      	orrs	r2, r0
 8004ad6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ada:	055a      	lsls	r2, r3, #21
 8004adc:	d508      	bpl.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ade:	499a      	ldr	r1, [pc, #616]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004ae0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8004ae2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004ae6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004aea:	4302      	orrs	r2, r0
 8004aec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004af0:	065f      	lsls	r7, r3, #25
 8004af2:	d508      	bpl.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004af4:	4994      	ldr	r1, [pc, #592]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004af6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004af8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004afc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8004b00:	4302      	orrs	r2, r0
 8004b02:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b06:	0618      	lsls	r0, r3, #24
 8004b08:	d508      	bpl.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x268>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004b0a:	498f      	ldr	r1, [pc, #572]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b0e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b12:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8004b16:	4302      	orrs	r2, r0
 8004b18:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b1c:	05d9      	lsls	r1, r3, #23
 8004b1e:	d508      	bpl.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b20:	4989      	ldr	r1, [pc, #548]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b22:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8004b24:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8004b28:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8004b2c:	4302      	orrs	r2, r0
 8004b2e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b32:	02da      	lsls	r2, r3, #11
 8004b34:	d508      	bpl.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x294>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b36:	4984      	ldr	r1, [pc, #528]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b38:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004b3a:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8004b3e:	f022 0203 	bic.w	r2, r2, #3
 8004b42:	4302      	orrs	r2, r0
 8004b44:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b48:	049f      	lsls	r7, r3, #18
 8004b4a:	d510      	bpl.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b4c:	4a7e      	ldr	r2, [pc, #504]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b4e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8004b50:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004b54:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004b58:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b5a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b62:	f040 80b8 	bne.w	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b66:	68d3      	ldr	r3, [r2, #12]
 8004b68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b6c:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	0318      	lsls	r0, r3, #12
 8004b72:	d50f      	bpl.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b74:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8004b76:	4b74      	ldr	r3, [pc, #464]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b78:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8004b7c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8004b80:	f040 80b6 	bne.w	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8004b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b92:	60da      	str	r2, [r3, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	0359      	lsls	r1, r3, #13
 8004b98:	d510      	bpl.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x308>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b9a:	4a6b      	ldr	r2, [pc, #428]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004b9c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8004b9e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004ba2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8004ba6:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ba8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bb0:	f040 80bd 	bne.w	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb4:	68d3      	ldr	r3, [r2, #12]
 8004bb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bba:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	045a      	lsls	r2, r3, #17
 8004bc0:	d514      	bpl.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x338>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bc2:	4961      	ldr	r1, [pc, #388]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004bc4:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004bc8:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8004bcc:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8004bd0:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bd2:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bda:	d107      	bne.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x338>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004bdc:	2102      	movs	r1, #2
 8004bde:	1d20      	adds	r0, r4, #4
 8004be0:	f7ff fd58 	bl	8004694 <RCCEx_PLLSAI1_Config>
 8004be4:	4606      	mov	r6, r0
 8004be6:	2800      	cmp	r0, #0
 8004be8:	bf18      	it	ne
 8004bea:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bec:	6822      	ldr	r2, [r4, #0]
 8004bee:	03d3      	lsls	r3, r2, #15
 8004bf0:	d509      	bpl.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x352>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bf2:	4955      	ldr	r1, [pc, #340]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004bf4:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8004bf8:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004bfc:	f023 0304 	bic.w	r3, r3, #4
 8004c00:	4303      	orrs	r3, r0
 8004c02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004c06:	0297      	lsls	r7, r2, #10
 8004c08:	d509      	bpl.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004c0a:	494f      	ldr	r1, [pc, #316]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c0c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8004c10:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004c14:	f023 0318 	bic.w	r3, r3, #24
 8004c18:	4303      	orrs	r3, r0
 8004c1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c1e:	0250      	lsls	r0, r2, #9
 8004c20:	d51f      	bpl.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c22:	4f49      	ldr	r7, [pc, #292]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8004c2c:	f7fc f9f0 	bl	8001010 <HAL_GetTick>
 8004c30:	4680      	mov	r8, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	0099      	lsls	r1, r3, #2
 8004c36:	f100 8089 	bmi.w	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x498>
    if(ret == HAL_OK)
 8004c3a:	2e00      	cmp	r6, #0
 8004c3c:	f040 808f 	bne.w	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 8004c40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c44:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8004c48:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c52:	2102      	movs	r1, #2
 8004c54:	f104 0020 	add.w	r0, r4, #32
 8004c58:	f7ff fda4 	bl	80047a4 <RCCEx_PLLSAI2_Config>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	bf18      	it	ne
 8004c60:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	021a      	lsls	r2, r3, #8
 8004c66:	d514      	bpl.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004c68:	4937      	ldr	r1, [pc, #220]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c6a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004c6e:	f8d1 309c 	ldr.w	r3, [r1, #156]	; 0x9c
 8004c72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c76:	4313      	orrs	r3, r2
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004c78:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004c7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8004c80:	d107      	bne.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 8004c82:	2101      	movs	r1, #1
 8004c84:	f104 0020 	add.w	r0, r4, #32
 8004c88:	f7ff fd8c 	bl	80047a4 <RCCEx_PLLSAI2_Config>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	bf18      	it	ne
 8004c90:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	01db      	lsls	r3, r3, #7
 8004c96:	d510      	bpl.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x406>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004c98:	4a2b      	ldr	r2, [pc, #172]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004c9a:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8004c9e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8004ca2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ca6:	430b      	orrs	r3, r1
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004ca8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004cac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004cb0:	d103      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cb2:	68d3      	ldr	r3, [r2, #12]
 8004cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb8:	60d3      	str	r3, [r2, #12]
}
 8004cba:	4628      	mov	r0, r5
 8004cbc:	b002      	add	sp, #8
 8004cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc2:	f7fc f9a5 	bl	8001010 <HAL_GetTick>
 8004cc6:	eba0 0009 	sub.w	r0, r0, r9
 8004cca:	4550      	cmp	r0, sl
 8004ccc:	f67f ae8c 	bls.w	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 8004cd0:	e6ac      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004cd2:	4635      	mov	r5, r6
 8004cd4:	e6ac      	b.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004cd6:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004cda:	f47f af48 	bne.w	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cde:	2101      	movs	r1, #1
 8004ce0:	1d20      	adds	r0, r4, #4
 8004ce2:	f7ff fcd7 	bl	8004694 <RCCEx_PLLSAI1_Config>
 8004ce6:	4606      	mov	r6, r0
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	bf18      	it	ne
 8004cec:	4605      	movne	r5, r0
 8004cee:	e73e      	b.n	8004b6e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004cf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cf4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004cf8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004cfc:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8004d00:	430a      	orrs	r2, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d02:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004d0a:	d103      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x460>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d0c:	68da      	ldr	r2, [r3, #12]
 8004d0e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d12:	e73e      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d14:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004d18:	f47f af3c 	bne.w	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	1d20      	adds	r0, r4, #4
 8004d20:	f7ff fcb8 	bl	8004694 <RCCEx_PLLSAI1_Config>
 8004d24:	4606      	mov	r6, r0
 8004d26:	2800      	cmp	r0, #0
 8004d28:	bf18      	it	ne
 8004d2a:	4605      	movne	r5, r0
 8004d2c:	e732      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d2e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8004d32:	f47f af43 	bne.w	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x308>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d36:	2101      	movs	r1, #1
 8004d38:	1d20      	adds	r0, r4, #4
 8004d3a:	f7ff fcab 	bl	8004694 <RCCEx_PLLSAI1_Config>
 8004d3e:	4606      	mov	r6, r0
 8004d40:	2800      	cmp	r0, #0
 8004d42:	bf18      	it	ne
 8004d44:	4605      	movne	r5, r0
 8004d46:	e739      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004d48:	40021000 	.word	0x40021000
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d4c:	f7fc f960 	bl	8001010 <HAL_GetTick>
 8004d50:	eba0 0008 	sub.w	r0, r0, r8
 8004d54:	2802      	cmp	r0, #2
 8004d56:	f67f af6c 	bls.w	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x37e>
        ret = HAL_TIMEOUT;
 8004d5a:	2503      	movs	r5, #3
 8004d5c:	e781      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004d5e:	4635      	mov	r5, r6
 8004d60:	e77f      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d68:	65bb      	str	r3, [r7, #88]	; 0x58
 8004d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d70:	9301      	str	r3, [sp, #4]
 8004d72:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d74:	f04f 0801 	mov.w	r8, #1
 8004d78:	e602      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8004d7a:	bf00      	nop

08004d7c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	b087      	sub	sp, #28
 8004d82:	4606      	mov	r6, r0
 8004d84:	4688      	mov	r8, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
  uint32_t tickstart = HAL_GetTick();
 8004d86:	f7fc f943 	bl	8001010 <HAL_GetTick>
  uint32_t index = 0;
  uint32_t tempscr[2] = {0, 0};
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004d8a:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8004d8c:	4682      	mov	sl, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8004d8e:	6830      	ldr	r0, [r6, #0]
 8004d90:	f002 fa76 	bl	8007280 <SDMMC_CmdBlockLength>
  if(errorstate != HAL_OK)
 8004d94:	4604      	mov	r4, r0
 8004d96:	bb40      	cbnz	r0, 8004dea <SD_FindSCR+0x6e>
  {
    return errorstate;
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8004d98:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8004d9a:	6830      	ldr	r0, [r6, #0]
 8004d9c:	0409      	lsls	r1, r1, #16
 8004d9e:	f002 fb89 	bl	80074b4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_OK)
 8004da2:	4604      	mov	r4, r0
 8004da4:	bb08      	cbnz	r0, 8004dea <SD_FindSCR+0x6e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
  config.DataLength    = 8;
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004da6:	2230      	movs	r2, #48	; 0x30
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	2108      	movs	r1, #8
 8004dae:	2302      	movs	r3, #2
 8004db0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004db4:	2301      	movs	r3, #1
  SDMMC_ConfigData(hsd->Instance, &config);
 8004db6:	4669      	mov	r1, sp
 8004db8:	6830      	ldr	r0, [r6, #0]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004dba:	9404      	str	r4, [sp, #16]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8004dbc:	9305      	str	r3, [sp, #20]
  SDMMC_ConfigData(hsd->Instance, &config);
 8004dbe:	f002 fa4d 	bl	800725c <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004dc2:	6830      	ldr	r0, [r6, #0]
 8004dc4:	f002 fba5 	bl	8007512 <SDMMC_CmdSendSCR>
  if(errorstate != HAL_OK)
 8004dc8:	4604      	mov	r4, r0
 8004dca:	b970      	cbnz	r0, 8004dea <SD_FindSCR+0x6e>
 8004dcc:	4605      	mov	r5, r0
 8004dce:	4607      	mov	r7, r0
 8004dd0:	4683      	mov	fp, r0
  {
    return errorstate;
  }
  
#if defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004dd2:	f240 592a 	movw	r9, #1322	; 0x52a
 8004dd6:	6830      	ldr	r0, [r6, #0]
 8004dd8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004dda:	ea13 0f09 	tst.w	r3, r9
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004dde:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8004de0:	d007      	beq.n	8004df2 <SD_FindSCR+0x76>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004de2:	0719      	lsls	r1, r3, #28
 8004de4:	d51c      	bpl.n	8004e20 <SD_FindSCR+0xa4>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004de6:	2408      	movs	r4, #8
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004de8:	6384      	str	r4, [r0, #56]	; 0x38
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
  }

  return HAL_SD_ERROR_NONE;
}
 8004dea:	4620      	mov	r0, r4
 8004dec:	b007      	add	sp, #28
 8004dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0))
 8004df2:	031b      	lsls	r3, r3, #12
 8004df4:	d40b      	bmi.n	8004e0e <SD_FindSCR+0x92>
 8004df6:	f1bb 0f00 	cmp.w	fp, #0
 8004dfa:	d108      	bne.n	8004e0e <SD_FindSCR+0x92>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004dfc:	f002 f96a 	bl	80070d4 <SDMMC_ReadFIFO>
 8004e00:	4607      	mov	r7, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004e02:	6830      	ldr	r0, [r6, #0]
 8004e04:	f002 f966 	bl	80070d4 <SDMMC_ReadFIFO>
      index++;
 8004e08:	f04f 0b01 	mov.w	fp, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004e0c:	4605      	mov	r5, r0
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004e0e:	f7fc f8ff 	bl	8001010 <HAL_GetTick>
 8004e12:	eba0 000a 	sub.w	r0, r0, sl
 8004e16:	3001      	adds	r0, #1
 8004e18:	d1dd      	bne.n	8004dd6 <SD_FindSCR+0x5a>
      return HAL_SD_ERROR_TIMEOUT;
 8004e1a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004e1e:	e7e4      	b.n	8004dea <SD_FindSCR+0x6e>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004e20:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e22:	079a      	lsls	r2, r3, #30
 8004e24:	d501      	bpl.n	8004e2a <SD_FindSCR+0xae>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004e26:	2402      	movs	r4, #2
 8004e28:	e7de      	b.n	8004de8 <SD_FindSCR+0x6c>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004e2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e2c:	069b      	lsls	r3, r3, #26
 8004e2e:	d501      	bpl.n	8004e34 <SD_FindSCR+0xb8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004e30:	2420      	movs	r4, #32
 8004e32:	e7d9      	b.n	8004de8 <SD_FindSCR+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004e34:	4b04      	ldr	r3, [pc, #16]	; (8004e48 <SD_FindSCR+0xcc>)
 8004e36:	6383      	str	r3, [r0, #56]	; 0x38
 8004e38:	ba3f      	rev	r7, r7
 8004e3a:	ba2d      	rev	r5, r5
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e3c:	f8c8 7004 	str.w	r7, [r8, #4]
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e40:	f8c8 5000 	str.w	r5, [r8]
  return HAL_SD_ERROR_NONE;
 8004e44:	e7d1      	b.n	8004dea <SD_FindSCR+0x6e>
 8004e46:	bf00      	nop
 8004e48:	18000f3a 	.word	0x18000f3a

08004e4c <HAL_SD_DeInit>:
{
 8004e4c:	b510      	push	{r4, lr}
  if(hsd == NULL)
 8004e4e:	4604      	mov	r4, r0
 8004e50:	b168      	cbz	r0, 8004e6e <HAL_SD_DeInit+0x22>
  hsd->State = HAL_SD_STATE_BUSY;
 8004e52:	2303      	movs	r3, #3
 8004e54:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  SDMMC_PowerState_OFF(hsd->Instance);
 8004e58:	6800      	ldr	r0, [r0, #0]
 8004e5a:	f002 f949 	bl	80070f0 <SDMMC_PowerState_OFF>
  HAL_SD_MspDeInit(hsd);
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f01c fc5c 	bl	802171c <HAL_SD_MspDeInit>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004e64:	2000      	movs	r0, #0
 8004e66:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_RESET;
 8004e68:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  return HAL_OK;
 8004e6c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004e6e:	2001      	movs	r0, #1
}
 8004e70:	bd10      	pop	{r4, pc}
	...

08004e74 <HAL_SD_ReadBlocks_DMA>:
{
 8004e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e78:	4604      	mov	r4, r0
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	4615      	mov	r5, r2
 8004e7e:	461e      	mov	r6, r3
  if(NULL == pData)
 8004e80:	460f      	mov	r7, r1
 8004e82:	b939      	cbnz	r1, 8004e94 <HAL_SD_ReadBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004e84:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004e86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e8a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004e8c:	2001      	movs	r0, #1
}
 8004e8e:	b006      	add	sp, #24
 8004e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004e94:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004e98:	b2c0      	uxtb	r0, r0
 8004e9a:	2801      	cmp	r0, #1
 8004e9c:	d158      	bne.n	8004f50 <HAL_SD_ReadBlocks_DMA+0xdc>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004e9e:	18d3      	adds	r3, r2, r3
 8004ea0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ea2:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ea4:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ea6:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004ea8:	d904      	bls.n	8004eb4 <HAL_SD_ReadBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004eaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004eac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004eb0:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004eb2:	e7ec      	b.n	8004e8e <HAL_SD_ReadBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004eba:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ebc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004ebe:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004ec0:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ec4:	2b01      	cmp	r3, #1
    hsd->pRxBuffPtr = (uint32_t*)pData;
 8004ec6:	62a7      	str	r7, [r4, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004ec8:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ecc:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004ed0:	bf18      	it	ne
 8004ed2:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004ed4:	f002 f9d4 	bl	8007280 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ed8:	b148      	cbz	r0, 8004eee <HAL_SD_ReadBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004eda:	6823      	ldr	r3, [r4, #0]
 8004edc:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004ede:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004ee0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ee2:	4318      	orrs	r0, r3
 8004ee4:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004ee6:	2001      	movs	r0, #1
 8004ee8:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004eec:	e7cf      	b.n	8004e8e <HAL_SD_ReadBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004eee:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004ef2:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004ef6:	2390      	movs	r3, #144	; 0x90
 8004ef8:	9302      	str	r3, [sp, #8]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004efa:	9004      	str	r0, [sp, #16]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004efc:	2302      	movs	r3, #2
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004efe:	9005      	str	r0, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004f00:	4669      	mov	r1, sp
 8004f02:	6820      	ldr	r0, [r4, #0]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004f04:	9303      	str	r3, [sp, #12]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004f06:	f002 f9a9 	bl	800725c <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004f0a:	6820      	ldr	r0, [r4, #0]
 8004f0c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004f0e:	f443 7395 	orr.w	r3, r3, #298	; 0x12a
 8004f12:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004f14:	68c3      	ldr	r3, [r0, #12]
 8004f16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f1a:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004f1c:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8004f1e:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8004f20:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8004f22:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 8004f24:	d90e      	bls.n	8004f44 <HAL_SD_ReadBlocks_DMA+0xd0>
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004f26:	2382      	movs	r3, #130	; 0x82
 8004f28:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	f002 f9da 	bl	80072e4 <SDMMC_CmdReadMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d0ac      	beq.n	8004e8e <HAL_SD_ReadBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	4a07      	ldr	r2, [pc, #28]	; (8004f54 <HAL_SD_ReadBlocks_DMA+0xe0>)
 8004f38:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8004f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f3c:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004f40:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f42:	e7cd      	b.n	8004ee0 <HAL_SD_ReadBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004f44:	2381      	movs	r3, #129	; 0x81
 8004f46:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8004f48:	4629      	mov	r1, r5
 8004f4a:	f002 f9b2 	bl	80072b2 <SDMMC_CmdReadSingleBlock>
 8004f4e:	e7ef      	b.n	8004f30 <HAL_SD_ReadBlocks_DMA+0xbc>
    return HAL_BUSY;
 8004f50:	2002      	movs	r0, #2
 8004f52:	e79c      	b.n	8004e8e <HAL_SD_ReadBlocks_DMA+0x1a>
 8004f54:	1fe00fff 	.word	0x1fe00fff

08004f58 <HAL_SD_WriteBlocks_DMA>:
{
 8004f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	b086      	sub	sp, #24
 8004f60:	4615      	mov	r5, r2
 8004f62:	461e      	mov	r6, r3
  if(NULL == pData)
 8004f64:	460f      	mov	r7, r1
 8004f66:	b939      	cbnz	r1, 8004f78 <HAL_SD_WriteBlocks_DMA+0x20>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f68:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004f6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f6e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_ERROR;
 8004f70:	2001      	movs	r0, #1
}
 8004f72:	b006      	add	sp, #24
 8004f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(hsd->State == HAL_SD_STATE_READY)
 8004f78:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004f7c:	b2c0      	uxtb	r0, r0
 8004f7e:	2801      	cmp	r0, #1
 8004f80:	d159      	bne.n	8005036 <HAL_SD_WriteBlocks_DMA+0xde>
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f82:	18d3      	adds	r3, r2, r3
 8004f84:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f86:	2100      	movs	r1, #0
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f88:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004f8a:	63a1      	str	r1, [r4, #56]	; 0x38
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f8c:	d904      	bls.n	8004f98 <HAL_SD_WriteBlocks_DMA+0x40>
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004f8e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f94:	63a3      	str	r3, [r4, #56]	; 0x38
      return HAL_ERROR;
 8004f96:	e7ec      	b.n	8004f72 <HAL_SD_WriteBlocks_DMA+0x1a>
    hsd->State = HAL_SD_STATE_BUSY;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004f9e:	6820      	ldr	r0, [r4, #0]
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004fa0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    hsd->Instance->DCTRL = 0U;
 8004fa2:	62c1      	str	r1, [r0, #44]	; 0x2c
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004fa4:	ea4f 2846 	mov.w	r8, r6, lsl #9
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004fa8:	2b01      	cmp	r3, #1
    hsd->pTxBuffPtr = (uint32_t*)pData;
 8004faa:	6227      	str	r7, [r4, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8004fac:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fb0:	f44f 7100 	mov.w	r1, #512	; 0x200
      BlockAdd *= 512U;
 8004fb4:	bf18      	it	ne
 8004fb6:	026d      	lslne	r5, r5, #9
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004fb8:	f002 f962 	bl	8007280 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 8004fbc:	b148      	cbz	r0, 8004fd2 <HAL_SD_WriteBlocks_DMA+0x7a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8004fbe:	6823      	ldr	r3, [r4, #0]
 8004fc0:	4a1e      	ldr	r2, [pc, #120]	; (800503c <HAL_SD_WriteBlocks_DMA+0xe4>)
 8004fc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004fc4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004fc6:	4318      	orrs	r0, r3
 8004fc8:	63a0      	str	r0, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004fca:	2001      	movs	r0, #1
 8004fcc:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
      return HAL_ERROR;
 8004fd0:	e7cf      	b.n	8004f72 <HAL_SD_WriteBlocks_DMA+0x1a>
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004fd2:	f04f 33ff 	mov.w	r3, #4294967295
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004fd6:	e88d 0108 	stmia.w	sp, {r3, r8}
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004fda:	9003      	str	r0, [sp, #12]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004fdc:	9004      	str	r0, [sp, #16]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004fde:	9005      	str	r0, [sp, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004fe0:	f04f 0890 	mov.w	r8, #144	; 0x90
    SDMMC_ConfigData(hsd->Instance, &config);
 8004fe4:	4669      	mov	r1, sp
 8004fe6:	6820      	ldr	r0, [r4, #0]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004fe8:	f8cd 8008 	str.w	r8, [sp, #8]
    SDMMC_ConfigData(hsd->Instance, &config);
 8004fec:	f002 f936 	bl	800725c <SDMMC_ConfigData>
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND)); 
 8004ff0:	6820      	ldr	r0, [r4, #0]
 8004ff2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8004ff4:	f443 738d 	orr.w	r3, r3, #282	; 0x11a
 8004ff8:	63c3      	str	r3, [r0, #60]	; 0x3c
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8004ffa:	68c3      	ldr	r3, [r0, #12]
 8004ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005000:	60c3      	str	r3, [r0, #12]
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8005002:	2301      	movs	r3, #1
    if(NumberOfBlocks > 1U)
 8005004:	429e      	cmp	r6, r3
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF; 
 8005006:	6503      	str	r3, [r0, #80]	; 0x50
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005008:	6587      	str	r7, [r0, #88]	; 0x58
    if(NumberOfBlocks > 1U)
 800500a:	d90e      	bls.n	800502a <HAL_SD_WriteBlocks_DMA+0xd2>
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800500c:	23a0      	movs	r3, #160	; 0xa0
 800500e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8005010:	4629      	mov	r1, r5
 8005012:	f002 f999 	bl	8007348 <SDMMC_CmdWriteMultiBlock>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005016:	2800      	cmp	r0, #0
 8005018:	d0ab      	beq.n	8004f72 <HAL_SD_WriteBlocks_DMA+0x1a>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	4a07      	ldr	r2, [pc, #28]	; (800503c <HAL_SD_WriteBlocks_DMA+0xe4>)
 800501e:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8005020:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005022:	f422 728d 	bic.w	r2, r2, #282	; 0x11a
 8005026:	63da      	str	r2, [r3, #60]	; 0x3c
 8005028:	e7cc      	b.n	8004fc4 <HAL_SD_WriteBlocks_DMA+0x6c>
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800502a:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 800502e:	4629      	mov	r1, r5
 8005030:	f002 f971 	bl	8007316 <SDMMC_CmdWriteSingleBlock>
 8005034:	e7ef      	b.n	8005016 <HAL_SD_WriteBlocks_DMA+0xbe>
    return HAL_BUSY;
 8005036:	2002      	movs	r0, #2
 8005038:	e79b      	b.n	8004f72 <HAL_SD_WriteBlocks_DMA+0x1a>
 800503a:	bf00      	nop
 800503c:	1fe00fff 	.word	0x1fe00fff

08005040 <HAL_SD_ErrorCallback>:
 8005040:	4770      	bx	lr
	...

08005044 <HAL_SD_IRQHandler>:
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 8005044:	6803      	ldr	r3, [r0, #0]
 8005046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
{  
 8005048:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 800504a:	05d5      	lsls	r5, r2, #23
{  
 800504c:	4604      	mov	r4, r0
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DATAEND) != RESET)
 800504e:	d55f      	bpl.n	8005110 <HAL_SD_IRQHandler+0xcc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND); 
 8005050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT   |\
 8005056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005058:	f422 4241 	bic.w	r2, r2, #49408	; 0xc100
 800505c:	f022 023a 	bic.w	r2, r2, #58	; 0x3a
 8005060:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005062:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005064:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005068:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005070:	60da      	str	r2, [r3, #12]
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 8005072:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8005074:	f012 0208 	ands.w	r2, r2, #8
 8005078:	d023      	beq.n	80050c2 <HAL_SD_IRQHandler+0x7e>
      if(((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 800507a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800507c:	0790      	lsls	r0, r2, #30
 800507e:	d402      	bmi.n	8005086 <HAL_SD_IRQHandler+0x42>
 8005080:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005082:	0691      	lsls	r1, r2, #26
 8005084:	d509      	bpl.n	800509a <HAL_SD_IRQHandler+0x56>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005086:	4618      	mov	r0, r3
 8005088:	f002 f978 	bl	800737c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 800508c:	b128      	cbz	r0, 800509a <HAL_SD_IRQHandler+0x56>
          hsd->ErrorCode |= errorstate;
 800508e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005090:	4318      	orrs	r0, r3
 8005092:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8005094:	4620      	mov	r0, r4
 8005096:	f7ff ffd3 	bl	8005040 <HAL_SD_ErrorCallback>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800509a:	6823      	ldr	r3, [r4, #0]
 800509c:	4a59      	ldr	r2, [pc, #356]	; (8005204 <HAL_SD_IRQHandler+0x1c0>)
 800509e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80050a0:	2301      	movs	r3, #1
 80050a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80050a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050a8:	07da      	lsls	r2, r3, #31
 80050aa:	d503      	bpl.n	80050b4 <HAL_SD_IRQHandler+0x70>
        HAL_SD_RxCpltCallback(hsd);
 80050ac:	4620      	mov	r0, r4
 80050ae:	f018 fed9 	bl	801de64 <HAL_SD_RxCpltCallback>
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 80050b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050b6:	079b      	lsls	r3, r3, #30
 80050b8:	d4f8      	bmi.n	80050ac <HAL_SD_IRQHandler+0x68>
        HAL_SD_TxCpltCallback(hsd);
 80050ba:	4620      	mov	r0, r4
 80050bc:	f018 fecd 	bl	801de5a <HAL_SD_TxCpltCallback>
 80050c0:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80050c2:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80050c4:	060e      	lsls	r6, r1, #24
 80050c6:	f140 8090 	bpl.w	80051ea <HAL_SD_IRQHandler+0x1a6>
      hsd->Instance->DLEN = 0;
 80050ca:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80050cc:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80050ce:	651a      	str	r2, [r3, #80]	; 0x50
      if((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) == RESET)
 80050d0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80050d2:	07d5      	lsls	r5, r2, #31
 80050d4:	d409      	bmi.n	80050ea <HAL_SD_IRQHandler+0xa6>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80050d6:	4618      	mov	r0, r3
 80050d8:	f002 f950 	bl	800737c <SDMMC_CmdStopTransfer>
        if(errorstate != HAL_SD_ERROR_NONE)
 80050dc:	b128      	cbz	r0, 80050ea <HAL_SD_IRQHandler+0xa6>
          hsd->ErrorCode |= errorstate;
 80050de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050e0:	4318      	orrs	r0, r3
 80050e2:	63a0      	str	r0, [r4, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80050e4:	4620      	mov	r0, r4
 80050e6:	f7ff ffab 	bl	8005040 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80050ea:	2301      	movs	r3, #1
 80050ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(((hsd->Context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET))
 80050f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050f2:	06d8      	lsls	r0, r3, #27
 80050f4:	d402      	bmi.n	80050fc <HAL_SD_IRQHandler+0xb8>
 80050f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80050f8:	0699      	lsls	r1, r3, #26
 80050fa:	d502      	bpl.n	8005102 <HAL_SD_IRQHandler+0xbe>
        HAL_SD_TxCpltCallback(hsd);
 80050fc:	4620      	mov	r0, r4
 80050fe:	f018 feac 	bl	801de5a <HAL_SD_TxCpltCallback>
      if(((hsd->Context & SD_CONTEXT_READ_SINGLE_BLOCK) != RESET) || ((hsd->Context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != RESET))
 8005102:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005104:	07da      	lsls	r2, r3, #31
 8005106:	d4d1      	bmi.n	80050ac <HAL_SD_IRQHandler+0x68>
 8005108:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800510a:	079b      	lsls	r3, r3, #30
 800510c:	d4ce      	bmi.n	80050ac <HAL_SD_IRQHandler+0x68>
 800510e:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXFIFOHE) != RESET)
 8005110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005112:	0456      	lsls	r6, r2, #17
 8005114:	d50d      	bpl.n	8005132 <HAL_SD_IRQHandler+0xee>
static HAL_StatusTypeDef SD_Write_IT(SD_HandleTypeDef *hsd)
{
  uint32_t count = 0;
  uint32_t* tmp;
  
  tmp = (uint32_t*)hsd->pTxBuffPtr;
 8005116:	6a05      	ldr	r5, [r0, #32]
 8005118:	f105 0620 	add.w	r6, r5, #32
  
  /* Write data to SDMMC Tx FIFO */
  for(count = 0; count < 8; count++)
  {
    SDMMC_WriteFIFO(hsd->Instance, (tmp + count));
 800511c:	4629      	mov	r1, r5
 800511e:	6820      	ldr	r0, [r4, #0]
 8005120:	3504      	adds	r5, #4
 8005122:	f001 ffda 	bl	80070da <SDMMC_WriteFIFO>
  for(count = 0; count < 8; count++)
 8005126:	42ae      	cmp	r6, r5
 8005128:	d1f8      	bne.n	800511c <HAL_SD_IRQHandler+0xd8>
  }
  
  hsd->pTxBuffPtr += 8;
 800512a:	6a23      	ldr	r3, [r4, #32]
 800512c:	3320      	adds	r3, #32
 800512e:	6223      	str	r3, [r4, #32]
 8005130:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXFIFOHF) != RESET)
 8005132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005134:	0415      	lsls	r5, r2, #16
 8005136:	d50d      	bpl.n	8005154 <HAL_SD_IRQHandler+0x110>
  tmp = (uint32_t*)hsd->pRxBuffPtr;
 8005138:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800513a:	1f2e      	subs	r6, r5, #4
 800513c:	351c      	adds	r5, #28
    *(tmp + count) = SDMMC_ReadFIFO(hsd->Instance);
 800513e:	6820      	ldr	r0, [r4, #0]
 8005140:	f001 ffc8 	bl	80070d4 <SDMMC_ReadFIFO>
 8005144:	f846 0f04 	str.w	r0, [r6, #4]!
  for(count = 0; count < 8; count++)
 8005148:	42b5      	cmp	r5, r6
 800514a:	d1f8      	bne.n	800513e <HAL_SD_IRQHandler+0xfa>
  hsd->pRxBuffPtr += 8;
 800514c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800514e:	3320      	adds	r3, #32
 8005150:	62a3      	str	r3, [r4, #40]	; 0x28
 8005152:	bd70      	pop	{r4, r5, r6, pc}
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 8005154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005156:	f012 0f3a 	tst.w	r2, #58	; 0x3a
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800515a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_TXUNDERR) != RESET)
 800515c:	d036      	beq.n	80051cc <HAL_SD_IRQHandler+0x188>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800515e:	0791      	lsls	r1, r2, #30
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL; 
 8005160:	bf42      	ittt	mi
 8005162:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8005164:	f042 0202 	orrmi.w	r2, r2, #2
 8005168:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800516a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800516c:	0712      	lsls	r2, r2, #28
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800516e:	bf42      	ittt	mi
 8005170:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8005172:	f042 0208 	orrmi.w	r2, r2, #8
 8005176:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8005178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800517a:	0696      	lsls	r6, r2, #26
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800517c:	bf42      	ittt	mi
 800517e:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 8005180:	f042 0220 	orrmi.w	r2, r2, #32
 8005184:	6382      	strmi	r2, [r0, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8005186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005188:	06d5      	lsls	r5, r2, #27
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN; 
 800518a:	bf42      	ittt	mi
 800518c:	6b82      	ldrmi	r2, [r0, #56]	; 0x38
 800518e:	f042 0210 	orrmi.w	r2, r2, #16
 8005192:	6382      	strmi	r2, [r0, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005194:	4a1b      	ldr	r2, [pc, #108]	; (8005204 <HAL_SD_IRQHandler+0x1c0>)
 8005196:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8005198:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800519a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800519e:	63da      	str	r2, [r3, #60]	; 0x3c
    if((hsd->Context & SD_CONTEXT_IT) != RESET)
 80051a0:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80051a2:	f012 0208 	ands.w	r2, r2, #8
 80051a6:	d006      	beq.n	80051b6 <HAL_SD_IRQHandler+0x172>
        hsd->State = HAL_SD_STATE_READY;
 80051a8:	2301      	movs	r3, #1
 80051aa:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7ff ff46 	bl	8005040 <HAL_SD_ErrorCallback>
 80051b4:	bd70      	pop	{r4, r5, r6, pc}
    else if((hsd->Context & SD_CONTEXT_DMA) != RESET)
 80051b6:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80051b8:	0608      	lsls	r0, r1, #24
 80051ba:	d516      	bpl.n	80051ea <HAL_SD_IRQHandler+0x1a6>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80051bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051be:	b1a1      	cbz	r1, 80051ea <HAL_SD_IRQHandler+0x1a6>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80051c0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80051c2:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80051c6:	63d9      	str	r1, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80051c8:	651a      	str	r2, [r3, #80]	; 0x50
 80051ca:	e7ed      	b.n	80051a8 <HAL_SD_IRQHandler+0x164>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_IDMABTC) != RESET)
 80051cc:	00d1      	lsls	r1, r2, #3
 80051ce:	d50c      	bpl.n	80051ea <HAL_SD_IRQHandler+0x1a6>
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 80051d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d2:	f013 0f04 	tst.w	r3, #4
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80051d6:	6b03      	ldr	r3, [r0, #48]	; 0x30
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == SD_DMA_BUFFER0)
 80051d8:	d10b      	bne.n	80051f2 <HAL_SD_IRQHandler+0x1ae>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80051da:	069a      	lsls	r2, r3, #26
 80051dc:	d506      	bpl.n	80051ec <HAL_SD_IRQHandler+0x1a8>
        HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(hsd);
 80051de:	f000 fb72 	bl	80058c6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e8:	639a      	str	r2, [r3, #56]	; 0x38
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
        HAL_SDEx_Read_DMADoubleBuffer1CpltCallback(hsd);
 80051ec:	f000 fb69 	bl	80058c2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>
 80051f0:	e7f7      	b.n	80051e2 <HAL_SD_IRQHandler+0x19e>
      if((hsd->Context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != RESET)
 80051f2:	069b      	lsls	r3, r3, #26
 80051f4:	d502      	bpl.n	80051fc <HAL_SD_IRQHandler+0x1b8>
        HAL_SDEx_Write_DMADoubleBuffer0CpltCallback(hsd);
 80051f6:	f000 fb65 	bl	80058c4 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>
 80051fa:	e7f2      	b.n	80051e2 <HAL_SD_IRQHandler+0x19e>
        HAL_SDEx_Read_DMADoubleBuffer0CpltCallback(hsd);
 80051fc:	f000 fb60 	bl	80058c0 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>
 8005200:	e7ef      	b.n	80051e2 <HAL_SD_IRQHandler+0x19e>
 8005202:	bf00      	nop
 8005204:	18000f3a 	.word	0x18000f3a

08005208 <HAL_SD_GetCardCSD>:
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8005208:	6e03      	ldr	r3, [r0, #96]	; 0x60
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 800520a:	0f9a      	lsrs	r2, r3, #30
 800520c:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 800520e:	f3c3 6283 	ubfx	r2, r3, #26, #4
 8005212:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8005214:	f3c3 6201 	ubfx	r2, r3, #24, #2
 8005218:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)tmp;
 800521a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800521e:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)tmp;
 8005220:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005224:	b2db      	uxtb	r3, r3
  pCSD->NSAC = (uint8_t)tmp;
 8005226:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8005228:	714b      	strb	r3, [r1, #5]
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 800522a:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800522c:	0e1a      	lsrs	r2, r3, #24
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 800522e:	0112      	lsls	r2, r2, #4
 8005230:	80ca      	strh	r2, [r1, #6]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005232:	88ca      	ldrh	r2, [r1, #6]
{
 8005234:	b530      	push	{r4, r5, lr}
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8005236:	b292      	uxth	r2, r2
 8005238:	f3c3 5403 	ubfx	r4, r3, #20, #4
 800523c:	4322      	orrs	r2, r4
 800523e:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8005240:	f3c3 4203 	ubfx	r2, r3, #16, #4
 8005244:	720a      	strb	r2, [r1, #8]
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8005246:	f3c3 2207 	ubfx	r2, r3, #8, #8
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 800524a:	09d4      	lsrs	r4, r2, #7
 800524c:	724c      	strb	r4, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 800524e:	f3c2 1480 	ubfx	r4, r2, #6, #1
 8005252:	728c      	strb	r4, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8005254:	f3c2 1440 	ubfx	r4, r2, #5, #1
 8005258:	72cc      	strb	r4, [r1, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 800525a:	f3c2 1400 	ubfx	r4, r2, #4, #1
 800525e:	730c      	strb	r4, [r1, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8005260:	2400      	movs	r4, #0
 8005262:	734c      	strb	r4, [r1, #13]
  if(hsd->SdCard.CardType == CARD_SDSC)
 8005264:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005266:	2c00      	cmp	r4, #0
 8005268:	f040 8083 	bne.w	8005372 <HAL_SD_GetCardCSD+0x16a>
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 800526c:	0292      	lsls	r2, r2, #10
 800526e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005272:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp) << 2;
 8005274:	690a      	ldr	r2, [r1, #16]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	f403 737f 	and.w	r3, r3, #1020	; 0x3fc
 800527c:	4313      	orrs	r3, r2
 800527e:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8005280:	6e82      	ldr	r2, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8005282:	690b      	ldr	r3, [r1, #16]
 8005284:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
 8005288:	610b      	str	r3, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 800528a:	f3c2 63c2 	ubfx	r3, r2, #27, #3
 800528e:	750b      	strb	r3, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8005290:	f3c2 6302 	ubfx	r3, r2, #24, #3
 8005294:	754b      	strb	r3, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8005296:	f3c2 5342 	ubfx	r3, r2, #21, #3
 800529a:	758b      	strb	r3, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 800529c:	f3c2 4382 	ubfx	r3, r2, #18, #3
 80052a0:	75cb      	strb	r3, [r1, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 80052a2:	0bd3      	lsrs	r3, r2, #15
 80052a4:	f003 0306 	and.w	r3, r3, #6
 80052a8:	760b      	strb	r3, [r1, #24]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 80052aa:	7e0c      	ldrb	r4, [r1, #24]
 80052ac:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80052b0:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80052b4:	4322      	orrs	r2, r4
 80052b6:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80052b8:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80052ba:	7e0c      	ldrb	r4, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 80052bc:	3201      	adds	r2, #1
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 80052be:	3402      	adds	r4, #2
 80052c0:	40a2      	lsls	r2, r4
 80052c2:	64c2      	str	r2, [r0, #76]	; 0x4c
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 80052c4:	7a0d      	ldrb	r5, [r1, #8]
 80052c6:	2401      	movs	r4, #1
 80052c8:	40ac      	lsls	r4, r5
 80052ca:	6504      	str	r4, [r0, #80]	; 0x50
    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80052cc:	0a64      	lsrs	r4, r4, #9
 80052ce:	4362      	muls	r2, r4
 80052d0:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512;
 80052d2:	f44f 7200 	mov.w	r2, #512	; 0x200
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80052d6:	6582      	str	r2, [r0, #88]	; 0x58
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80052d8:	f3c3 1280 	ubfx	r2, r3, #6, #1
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	f003 037e 	and.w	r3, r3, #126	; 0x7e
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 80052e2:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 80052e4:	768b      	strb	r3, [r1, #26]
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 80052e6:	6e83      	ldr	r3, [r0, #104]	; 0x68
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80052e8:	7e8a      	ldrb	r2, [r1, #26]
 80052ea:	f3c3 14c0 	ubfx	r4, r3, #7, #1
 80052ee:	4322      	orrs	r2, r4
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 80052f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 80052f4:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 80052f6:	76cb      	strb	r3, [r1, #27]
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 80052f8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 80052fa:	0fda      	lsrs	r2, r3, #31
 80052fc:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 80052fe:	f3c3 7241 	ubfx	r2, r3, #29, #2
 8005302:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 8005304:	f3c3 6282 	ubfx	r2, r3, #26, #3
 8005308:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 800530a:	0d9a      	lsrs	r2, r3, #22
 800530c:	f002 020c 	and.w	r2, r2, #12
 8005310:	77ca      	strb	r2, [r1, #31]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8005312:	7fca      	ldrb	r2, [r1, #31]
 8005314:	f3c3 5081 	ubfx	r0, r3, #22, #2
 8005318:	4302      	orrs	r2, r0
 800531a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800531c:	f3c3 5240 	ubfx	r2, r3, #21, #1
 8005320:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3           = 0;
 8005324:	2000      	movs	r0, #0
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8005326:	f3c3 4200 	ubfx	r2, r3, #16, #1
  pCSD->Reserved3           = 0;
 800532a:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 800532e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8005332:	f3c3 32c0 	ubfx	r2, r3, #15, #1
 8005336:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 800533a:	f3c3 3280 	ubfx	r2, r3, #14, #1
 800533e:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8005342:	f3c3 3240 	ubfx	r2, r3, #13, #1
 8005346:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800534a:	f3c3 3200 	ubfx	r2, r3, #12, #1
 800534e:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8005352:	f3c3 2281 	ubfx	r2, r3, #10, #2
 8005356:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 800535a:	f3c3 2201 	ubfx	r2, r3, #8, #2
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 800535e:	f3c3 0346 	ubfx	r3, r3, #1, #7
  pCSD->ECC              = (tmp & 0x03);
 8005362:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8005366:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800536a:	2301      	movs	r3, #1
 800536c:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
}
 8005370:	bd30      	pop	{r4, r5, pc}
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005372:	2c01      	cmp	r4, #1
 8005374:	d11a      	bne.n	80053ac <HAL_SD_GetCardCSD+0x1a4>
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8005376:	041b      	lsls	r3, r3, #16
 8005378:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800537c:	610b      	str	r3, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 800537e:	6e83      	ldr	r3, [r0, #104]	; 0x68
    pCSD->DeviceSize |= (tmp << 8);
 8005380:	690a      	ldr	r2, [r1, #16]
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8005382:	0e1c      	lsrs	r4, r3, #24
    pCSD->DeviceSize |= (tmp << 8);
 8005384:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8005388:	610a      	str	r2, [r1, #16]
    pCSD->DeviceSize |= (tmp);
 800538a:	690c      	ldr	r4, [r1, #16]
 800538c:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8005390:	4322      	orrs	r2, r4
 8005392:	610a      	str	r2, [r1, #16]
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8005394:	690a      	ldr	r2, [r1, #16]
 8005396:	0292      	lsls	r2, r2, #10
 8005398:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800539c:	64c2      	str	r2, [r0, #76]	; 0x4c
 800539e:	6542      	str	r2, [r0, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80053a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80053a8:	6502      	str	r2, [r0, #80]	; 0x50
 80053aa:	e794      	b.n	80052d6 <HAL_SD_GetCardCSD+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80053ac:	6803      	ldr	r3, [r0, #0]
 80053ae:	4a05      	ldr	r2, [pc, #20]	; (80053c4 <HAL_SD_GetCardCSD+0x1bc>)
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80053b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b8:	6383      	str	r3, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    return HAL_ERROR;
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd30      	pop	{r4, r5, pc}
 80053c4:	1fe00fff 	.word	0x1fe00fff

080053c8 <HAL_SD_InitCard>:
{
 80053c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053ca:	b099      	sub	sp, #100	; 0x64
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80053cc:	2300      	movs	r3, #0
 80053ce:	9307      	str	r3, [sp, #28]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80053d0:	9308      	str	r3, [sp, #32]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80053d2:	9309      	str	r3, [sp, #36]	; 0x24
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80053d4:	930a      	str	r3, [sp, #40]	; 0x28
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80053d6:	233c      	movs	r3, #60	; 0x3c
 80053d8:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80053da:	6983      	ldr	r3, [r0, #24]
 80053dc:	2b01      	cmp	r3, #1
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80053de:	bf01      	itttt	eq
 80053e0:	6802      	ldreq	r2, [r0, #0]
 80053e2:	6813      	ldreq	r3, [r2, #0]
 80053e4:	f043 0304 	orreq.w	r3, r3, #4
 80053e8:	6013      	streq	r3, [r2, #0]
  status = SDMMC_Init(hsd->Instance, Init);
 80053ea:	ab0a      	add	r3, sp, #40	; 0x28
{
 80053ec:	4604      	mov	r4, r0
  status = SDMMC_Init(hsd->Instance, Init);
 80053ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80053f2:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80053f6:	ab07      	add	r3, sp, #28
 80053f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053fa:	6820      	ldr	r0, [r4, #0]
 80053fc:	f001 fe50 	bl	80070a0 <SDMMC_Init>
  if(status != HAL_OK)
 8005400:	2800      	cmp	r0, #0
 8005402:	f040 80e9 	bne.w	80055d8 <HAL_SD_InitCard+0x210>
  status = SDMMC_PowerState_ON(hsd->Instance);
 8005406:	6820      	ldr	r0, [r4, #0]
 8005408:	f001 fe6c 	bl	80070e4 <SDMMC_PowerState_ON>
  if(status != HAL_OK)
 800540c:	4605      	mov	r5, r0
 800540e:	2800      	cmp	r0, #0
 8005410:	f040 80e2 	bne.w	80055d8 <HAL_SD_InitCard+0x210>
  HAL_Delay(2U);
 8005414:	2002      	movs	r0, #2
 8005416:	f7fb fe01 	bl	800101c <HAL_Delay>
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800541a:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0;
 800541c:	9506      	str	r5, [sp, #24]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800541e:	f001 ffe1 	bl	80073e4 <SDMMC_CmdGoIdleState>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005422:	b958      	cbnz	r0, 800543c <HAL_SD_InitCard+0x74>
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005424:	6820      	ldr	r0, [r4, #0]
 8005426:	f002 f807 	bl	8007438 <SDMMC_CmdOperCond>
  if(errorstate != HAL_SD_ERROR_NONE)
 800542a:	b170      	cbz	r0, 800544a <HAL_SD_InitCard+0x82>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800542c:	6425      	str	r5, [r4, #64]	; 0x40
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800542e:	2100      	movs	r1, #0
 8005430:	6820      	ldr	r0, [r4, #0]
 8005432:	f002 f83f 	bl	80074b4 <SDMMC_CmdAppCommand>
  if(errorstate != HAL_SD_ERROR_NONE)
 8005436:	b158      	cbz	r0, 8005450 <HAL_SD_InitCard+0x88>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005438:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    hsd->State = HAL_SD_STATE_READY;
 800543c:	2501      	movs	r5, #1
 800543e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005442:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005444:	4318      	orrs	r0, r3
    hsd->ErrorCode |= errorstate;
 8005446:	63a0      	str	r0, [r4, #56]	; 0x38
 8005448:	e098      	b.n	800557c <HAL_SD_InitCard+0x1b4>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800544a:	2301      	movs	r3, #1
 800544c:	6423      	str	r3, [r4, #64]	; 0x40
 800544e:	e7ee      	b.n	800542e <HAL_SD_InitCard+0x66>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005450:	4f62      	ldr	r7, [pc, #392]	; (80055dc <HAL_SD_InitCard+0x214>)
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 8005452:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 8005456:	9b06      	ldr	r3, [sp, #24]
 8005458:	42b3      	cmp	r3, r6
 800545a:	d815      	bhi.n	8005488 <HAL_SD_InitCard+0xc0>
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800545c:	2100      	movs	r1, #0
 800545e:	6820      	ldr	r0, [r4, #0]
 8005460:	f002 f828 	bl	80074b4 <SDMMC_CmdAppCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005464:	2800      	cmp	r0, #0
 8005466:	d1e9      	bne.n	800543c <HAL_SD_InitCard+0x74>
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8005468:	4639      	mov	r1, r7
 800546a:	6820      	ldr	r0, [r4, #0]
 800546c:	f002 f83b 	bl	80074e6 <SDMMC_CmdAppOperCommand>
      if(errorstate != HAL_SD_ERROR_NONE)
 8005470:	4601      	mov	r1, r0
 8005472:	2800      	cmp	r0, #0
 8005474:	d1e0      	bne.n	8005438 <HAL_SD_InitCard+0x70>
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005476:	6820      	ldr	r0, [r4, #0]
 8005478:	f001 fe56 	bl	8007128 <SDMMC_GetResponse>
      count++;
 800547c:	9b06      	ldr	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 800547e:	2800      	cmp	r0, #0
      count++;
 8005480:	f103 0301 	add.w	r3, r3, #1
 8005484:	9306      	str	r3, [sp, #24]
    while((!validvoltage) && (count < SDMMC_MAX_VOLT_TRIAL))
 8005486:	dae6      	bge.n	8005456 <HAL_SD_InitCard+0x8e>
    if(count >= SDMMC_MAX_VOLT_TRIAL)
 8005488:	9a06      	ldr	r2, [sp, #24]
 800548a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800548e:	429a      	cmp	r2, r3
 8005490:	d902      	bls.n	8005498 <HAL_SD_InitCard+0xd0>
      return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005492:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8005496:	e7d1      	b.n	800543c <HAL_SD_InitCard+0x74>
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005498:	0043      	lsls	r3, r0, #1
 800549a:	d532      	bpl.n	8005502 <HAL_SD_InitCard+0x13a>
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800549c:	2301      	movs	r3, #1
 800549e:	63e3      	str	r3, [r4, #60]	; 0x3c
      if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 80054a0:	69a3      	ldr	r3, [r4, #24]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d12d      	bne.n	8005502 <HAL_SD_InitCard+0x13a>
        if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 80054a6:	01c7      	lsls	r7, r0, #7
 80054a8:	d52b      	bpl.n	8005502 <HAL_SD_InitCard+0x13a>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80054aa:	6820      	ldr	r0, [r4, #0]
           hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80054ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054b0:	65e3      	str	r3, [r4, #92]	; 0x5c
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 80054b2:	6803      	ldr	r3, [r0, #0]
 80054b4:	f043 0303 	orr.w	r3, r3, #3
 80054b8:	6003      	str	r3, [r0, #0]
          errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 80054ba:	f002 f8f9 	bl	80076b0 <SDMMC_CmdVoltageSwitch>
          if(errorstate != HAL_SD_ERROR_NONE)
 80054be:	2800      	cmp	r0, #0
 80054c0:	d1bc      	bne.n	800543c <HAL_SD_InitCard+0x74>
          while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP);
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054c6:	0156      	lsls	r6, r2, #5
 80054c8:	d5fc      	bpl.n	80054c4 <HAL_SD_InitCard+0xfc>
          hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80054ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80054ce:	639a      	str	r2, [r3, #56]	; 0x38
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80054d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d2:	02d8      	lsls	r0, r3, #11
 80054d4:	d5b0      	bpl.n	8005438 <HAL_SD_InitCard+0x70>
            HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 80054d6:	2001      	movs	r0, #1
 80054d8:	f000 f965 	bl	80057a6 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
            hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	f042 0202 	orr.w	r2, r2, #2
 80054e4:	601a      	str	r2, [r3, #0]
            while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND);
 80054e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054e8:	0191      	lsls	r1, r2, #6
 80054ea:	d5fc      	bpl.n	80054e6 <HAL_SD_InitCard+0x11e>
            hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80054ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054f0:	639a      	str	r2, [r3, #56]	; 0x38
            if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 80054f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054f4:	02d2      	lsls	r2, r2, #11
 80054f6:	d4cc      	bmi.n	8005492 <HAL_SD_InitCard+0xca>
            hsd->Instance->POWER = 0x13; 
 80054f8:	2213      	movs	r2, #19
 80054fa:	601a      	str	r2, [r3, #0]
            hsd->Instance->ICR = 0xFFFFFFFF;
 80054fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005500:	639a      	str	r2, [r3, #56]	; 0x38
  uint16_t sd_rca = 1;
 8005502:	2301      	movs	r3, #1
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8005504:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1;
 8005506:	f8ad 3016 	strh.w	r3, [sp, #22]
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 800550a:	f001 fdf7 	bl	80070fc <SDMMC_GetPowerState>
 800550e:	b910      	cbnz	r0, 8005516 <HAL_SD_InitCard+0x14e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005510:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005514:	e03c      	b.n	8005590 <HAL_SD_InitCard+0x1c8>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005516:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005518:	2b03      	cmp	r3, #3
 800551a:	d018      	beq.n	800554e <HAL_SD_InitCard+0x186>
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800551c:	6820      	ldr	r0, [r4, #0]
 800551e:	f002 f811 	bl	8007544 <SDMMC_CmdSendCID>
    if(errorstate != HAL_SD_ERROR_NONE)
 8005522:	2800      	cmp	r0, #0
 8005524:	d134      	bne.n	8005590 <HAL_SD_InitCard+0x1c8>
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005526:	4601      	mov	r1, r0
 8005528:	6820      	ldr	r0, [r4, #0]
 800552a:	f001 fdfd 	bl	8007128 <SDMMC_GetResponse>
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800552e:	2104      	movs	r1, #4
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005530:	6720      	str	r0, [r4, #112]	; 0x70
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005532:	6820      	ldr	r0, [r4, #0]
 8005534:	f001 fdf8 	bl	8007128 <SDMMC_GetResponse>
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005538:	2108      	movs	r1, #8
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800553a:	6760      	str	r0, [r4, #116]	; 0x74
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800553c:	6820      	ldr	r0, [r4, #0]
 800553e:	f001 fdf3 	bl	8007128 <SDMMC_GetResponse>
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005542:	210c      	movs	r1, #12
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005544:	67a0      	str	r0, [r4, #120]	; 0x78
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005546:	6820      	ldr	r0, [r4, #0]
 8005548:	f001 fdee 	bl	8007128 <SDMMC_GetResponse>
 800554c:	67e0      	str	r0, [r4, #124]	; 0x7c
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800554e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005550:	2b03      	cmp	r3, #3
 8005552:	d116      	bne.n	8005582 <HAL_SD_InitCard+0x1ba>
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005554:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005556:	2b03      	cmp	r3, #3
 8005558:	d120      	bne.n	800559c <HAL_SD_InitCard+0x1d4>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 800555a:	2104      	movs	r1, #4
 800555c:	6820      	ldr	r0, [r4, #0]
 800555e:	f001 fde3 	bl	8007128 <SDMMC_GetResponse>
 8005562:	0d00      	lsrs	r0, r0, #20
 8005564:	6460      	str	r0, [r4, #68]	; 0x44
  HAL_SD_GetCardCSD(hsd, &CSD);
 8005566:	a90d      	add	r1, sp, #52	; 0x34
 8005568:	4620      	mov	r0, r4
 800556a:	f7ff fe4d 	bl	8005208 <HAL_SD_GetCardCSD>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 800556e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005570:	6820      	ldr	r0, [r4, #0]
 8005572:	0412      	lsls	r2, r2, #16
 8005574:	2300      	movs	r3, #0
 8005576:	f001 ff1b 	bl	80073b0 <SDMMC_CmdSelDesel>
  if(errorstate != HAL_SD_ERROR_NONE)
 800557a:	b948      	cbnz	r0, 8005590 <HAL_SD_InitCard+0x1c8>
}
 800557c:	4628      	mov	r0, r5
 800557e:	b019      	add	sp, #100	; 0x64
 8005580:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005582:	f10d 0116 	add.w	r1, sp, #22
 8005586:	6820      	ldr	r0, [r4, #0]
 8005588:	f002 f808 	bl	800759c <SDMMC_CmdSetRelAdd>
    if(errorstate != HAL_SD_ERROR_NONE)
 800558c:	2800      	cmp	r0, #0
 800558e:	d0e1      	beq.n	8005554 <HAL_SD_InitCard+0x18c>
    hsd->State = HAL_SD_STATE_READY;
 8005590:	2501      	movs	r5, #1
 8005592:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005596:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005598:	4308      	orrs	r0, r1
 800559a:	e754      	b.n	8005446 <HAL_SD_InitCard+0x7e>
    hsd->SdCard.RelCardAdd = sd_rca;
 800559c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 80055a0:	64a1      	str	r1, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055a2:	6820      	ldr	r0, [r4, #0]
 80055a4:	0409      	lsls	r1, r1, #16
 80055a6:	f001 ffe3 	bl	8007570 <SDMMC_CmdSendCSD>
    if(errorstate != HAL_SD_ERROR_NONE)
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d1f0      	bne.n	8005590 <HAL_SD_InitCard+0x1c8>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055ae:	4601      	mov	r1, r0
 80055b0:	6820      	ldr	r0, [r4, #0]
 80055b2:	f001 fdb9 	bl	8007128 <SDMMC_GetResponse>
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055b6:	2104      	movs	r1, #4
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80055b8:	6620      	str	r0, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055ba:	6820      	ldr	r0, [r4, #0]
 80055bc:	f001 fdb4 	bl	8007128 <SDMMC_GetResponse>
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055c0:	2108      	movs	r1, #8
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80055c2:	6660      	str	r0, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055c4:	6820      	ldr	r0, [r4, #0]
 80055c6:	f001 fdaf 	bl	8007128 <SDMMC_GetResponse>
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055ca:	210c      	movs	r1, #12
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80055cc:	66a0      	str	r0, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80055ce:	6820      	ldr	r0, [r4, #0]
 80055d0:	f001 fdaa 	bl	8007128 <SDMMC_GetResponse>
 80055d4:	66e0      	str	r0, [r4, #108]	; 0x6c
 80055d6:	e7c0      	b.n	800555a <HAL_SD_InitCard+0x192>
    return HAL_ERROR;
 80055d8:	2501      	movs	r5, #1
 80055da:	e7cf      	b.n	800557c <HAL_SD_InitCard+0x1b4>
 80055dc:	c1100000 	.word	0xc1100000

080055e0 <HAL_SD_GetCardInfo>:
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80055e0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80055e2:	600b      	str	r3, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80055e4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80055e6:	604b      	str	r3, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80055e8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80055ea:	608b      	str	r3, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80055ec:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80055ee:	60cb      	str	r3, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80055f0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80055f2:	610b      	str	r3, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80055f4:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80055f6:	614b      	str	r3, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80055f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80055fa:	618b      	str	r3, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80055fc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80055fe:	61cb      	str	r3, [r1, #28]
}
 8005600:	2000      	movs	r0, #0
 8005602:	4770      	bx	lr

08005604 <HAL_SD_ConfigWideBusOperation>:
{
 8005604:	b570      	push	{r4, r5, r6, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 8005606:	2303      	movs	r3, #3
 8005608:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800560c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800560e:	2b03      	cmp	r3, #3
{
 8005610:	b08a      	sub	sp, #40	; 0x28
 8005612:	4604      	mov	r4, r0
 8005614:	460e      	mov	r6, r1
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8005616:	d002      	beq.n	800561e <HAL_SD_ConfigWideBusOperation+0x1a>
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8005618:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800561c:	d103      	bne.n	8005626 <HAL_SD_ConfigWideBusOperation+0x22>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800561e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005624:	e056      	b.n	80056d4 <HAL_SD_ConfigWideBusOperation+0xd0>
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8005626:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800562a:	d12d      	bne.n	8005688 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2] = {0, 0};
 800562c:	2100      	movs	r1, #0
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800562e:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 8005630:	9104      	str	r1, [sp, #16]
 8005632:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005634:	f001 fd78 	bl	8007128 <SDMMC_GetResponse>
 8005638:	0180      	lsls	r0, r0, #6
 800563a:	d41f      	bmi.n	800567c <HAL_SD_ConfigWideBusOperation+0x78>
  errorstate = SD_FindSCR(hsd, scr);
 800563c:	a904      	add	r1, sp, #16
 800563e:	4620      	mov	r0, r4
 8005640:	f7ff fb9c 	bl	8004d7c <SD_FindSCR>
  if(errorstate != HAL_OK)
 8005644:	b960      	cbnz	r0, 8005660 <HAL_SD_ConfigWideBusOperation+0x5c>
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005646:	9b05      	ldr	r3, [sp, #20]
 8005648:	0359      	lsls	r1, r3, #13
 800564a:	d51a      	bpl.n	8005682 <HAL_SD_ConfigWideBusOperation+0x7e>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800564c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800564e:	6820      	ldr	r0, [r4, #0]
 8005650:	0409      	lsls	r1, r1, #16
 8005652:	f001 ff2f 	bl	80074b4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 8005656:	b918      	cbnz	r0, 8005660 <HAL_SD_ConfigWideBusOperation+0x5c>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8005658:	2102      	movs	r1, #2
 800565a:	6820      	ldr	r0, [r4, #0]
 800565c:	f002 f826 	bl	80076ac <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8005660:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005662:	4318      	orrs	r0, r3
      hsd->ErrorCode |= errorstate;
 8005664:	63a0      	str	r0, [r4, #56]	; 0x38
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005666:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005668:	2d00      	cmp	r5, #0
 800566a:	d035      	beq.n	80056d8 <HAL_SD_ConfigWideBusOperation+0xd4>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800566c:	6823      	ldr	r3, [r4, #0]
 800566e:	4a26      	ldr	r2, [pc, #152]	; (8005708 <HAL_SD_ConfigWideBusOperation+0x104>)
 8005670:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005672:	2001      	movs	r0, #1
 8005674:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
}
 8005678:	b00a      	add	sp, #40	; 0x28
 800567a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800567c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005680:	e7ee      	b.n	8005660 <HAL_SD_ConfigWideBusOperation+0x5c>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005682:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005686:	e7eb      	b.n	8005660 <HAL_SD_ConfigWideBusOperation+0x5c>
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8005688:	bb09      	cbnz	r1, 80056ce <HAL_SD_ConfigWideBusOperation+0xca>
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800568a:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2] = {0, 0};
 800568c:	9104      	str	r1, [sp, #16]
 800568e:	9105      	str	r1, [sp, #20]
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005690:	f001 fd4a 	bl	8007128 <SDMMC_GetResponse>
 8005694:	0182      	lsls	r2, r0, #6
 8005696:	d414      	bmi.n	80056c2 <HAL_SD_ConfigWideBusOperation+0xbe>
  errorstate = SD_FindSCR(hsd, scr);
 8005698:	a904      	add	r1, sp, #16
 800569a:	4620      	mov	r0, r4
 800569c:	f7ff fb6e 	bl	8004d7c <SD_FindSCR>
  if(errorstate != HAL_OK)
 80056a0:	b960      	cbnz	r0, 80056bc <HAL_SD_ConfigWideBusOperation+0xb8>
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80056a2:	9b05      	ldr	r3, [sp, #20]
 80056a4:	03db      	lsls	r3, r3, #15
 80056a6:	d50f      	bpl.n	80056c8 <HAL_SD_ConfigWideBusOperation+0xc4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80056a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80056aa:	6820      	ldr	r0, [r4, #0]
 80056ac:	0409      	lsls	r1, r1, #16
 80056ae:	f001 ff01 	bl	80074b4 <SDMMC_CmdAppCommand>
    if(errorstate != HAL_OK)
 80056b2:	b918      	cbnz	r0, 80056bc <HAL_SD_ConfigWideBusOperation+0xb8>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80056b4:	4601      	mov	r1, r0
 80056b6:	6820      	ldr	r0, [r4, #0]
 80056b8:	f001 fff8 	bl	80076ac <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 80056bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80056be:	4308      	orrs	r0, r1
 80056c0:	e7d0      	b.n	8005664 <HAL_SD_ConfigWideBusOperation+0x60>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80056c2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80056c6:	e7f9      	b.n	80056bc <HAL_SD_ConfigWideBusOperation+0xb8>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80056c8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80056cc:	e7f6      	b.n	80056bc <HAL_SD_ConfigWideBusOperation+0xb8>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80056ce:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80056d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056d4:	63a3      	str	r3, [r4, #56]	; 0x38
 80056d6:	e7c6      	b.n	8005666 <HAL_SD_ConfigWideBusOperation+0x62>
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80056d8:	6863      	ldr	r3, [r4, #4]
 80056da:	9304      	str	r3, [sp, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80056dc:	68a3      	ldr	r3, [r4, #8]
 80056de:	9305      	str	r3, [sp, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80056e0:	6923      	ldr	r3, [r4, #16]
 80056e2:	9307      	str	r3, [sp, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80056e4:	6963      	ldr	r3, [r4, #20]
 80056e6:	9308      	str	r3, [sp, #32]
    SDMMC_Init(hsd->Instance, Init);
 80056e8:	ab0a      	add	r3, sp, #40	; 0x28
 80056ea:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80056ee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
    Init.BusWide             = WideMode;
 80056f2:	9606      	str	r6, [sp, #24]
    SDMMC_Init(hsd->Instance, Init);
 80056f4:	ab04      	add	r3, sp, #16
 80056f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056f8:	6820      	ldr	r0, [r4, #0]
 80056fa:	f001 fcd1 	bl	80070a0 <SDMMC_Init>
  hsd->State = HAL_SD_STATE_READY;
 80056fe:	2301      	movs	r3, #1
 8005700:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005704:	4628      	mov	r0, r5
 8005706:	e7b7      	b.n	8005678 <HAL_SD_ConfigWideBusOperation+0x74>
 8005708:	1fe00fff 	.word	0x1fe00fff

0800570c <HAL_SD_Init>:
{ 
 800570c:	b538      	push	{r3, r4, r5, lr}
  if(hsd == NULL)
 800570e:	4604      	mov	r4, r0
 8005710:	b910      	cbnz	r0, 8005718 <HAL_SD_Init+0xc>
    return HAL_ERROR;
 8005712:	2501      	movs	r5, #1
}
 8005714:	4628      	mov	r0, r5
 8005716:	bd38      	pop	{r3, r4, r5, pc}
  if(hsd->State == HAL_SD_STATE_RESET)
 8005718:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 800571c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005720:	b913      	cbnz	r3, 8005728 <HAL_SD_Init+0x1c>
    hsd->Lock = HAL_UNLOCKED;
 8005722:	7702      	strb	r2, [r0, #28]
    HAL_SD_MspInit(hsd);
 8005724:	f01b ffaa 	bl	802167c <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 8005728:	2303      	movs	r3, #3
 800572a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800572e:	4620      	mov	r0, r4
 8005730:	f7ff fe4a 	bl	80053c8 <HAL_SD_InitCard>
 8005734:	2800      	cmp	r0, #0
 8005736:	d1ec      	bne.n	8005712 <HAL_SD_Init+0x6>
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005738:	68e1      	ldr	r1, [r4, #12]
 800573a:	4620      	mov	r0, r4
 800573c:	f7ff ff62 	bl	8005604 <HAL_SD_ConfigWideBusOperation>
 8005740:	4605      	mov	r5, r0
 8005742:	2800      	cmp	r0, #0
 8005744:	d1e5      	bne.n	8005712 <HAL_SD_Init+0x6>
  if(hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE)
 8005746:	69a3      	ldr	r3, [r4, #24]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d006      	beq.n	800575a <HAL_SD_Init+0x4e>
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800574c:	2300      	movs	r3, #0
 800574e:	63a3      	str	r3, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005750:	6323      	str	r3, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005752:	2301      	movs	r3, #1
 8005754:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005758:	e7dc      	b.n	8005714 <HAL_SD_Init+0x8>
    if((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) || 
 800575a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800575c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005760:	d002      	beq.n	8005768 <HAL_SD_Init+0x5c>
 8005762:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d1f1      	bne.n	800574c <HAL_SD_Init+0x40>
      hsd->Instance->CLKCR |= 0x00100000;
 8005768:	6822      	ldr	r2, [r4, #0]
 800576a:	6853      	ldr	r3, [r2, #4]
 800576c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005770:	6053      	str	r3, [r2, #4]
      if(HAL_SDEx_HighSpeed(hsd) != HAL_OK)
 8005772:	4620      	mov	r0, r4
 8005774:	f000 f818 	bl	80057a8 <HAL_SDEx_HighSpeed>
 8005778:	2800      	cmp	r0, #0
 800577a:	d0e7      	beq.n	800574c <HAL_SD_Init+0x40>
 800577c:	e7c9      	b.n	8005712 <HAL_SD_Init+0x6>

0800577e <HAL_SD_GetCardState>:
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800577e:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8005780:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005782:	0409      	lsls	r1, r1, #16
{
 8005784:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8005786:	6800      	ldr	r0, [r0, #0]
 8005788:	f001 ff5e 	bl	8007648 <SDMMC_CmdSendStatus>
  if(errorstate != HAL_OK)
 800578c:	4601      	mov	r1, r0
 800578e:	b928      	cbnz	r0, 800579c <HAL_SD_GetCardState+0x1e>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005790:	6820      	ldr	r0, [r4, #0]
 8005792:	f001 fcc9 	bl	8007128 <SDMMC_GetResponse>
  return cardstate;
 8005796:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800579a:	bd10      	pop	{r4, pc}
    hsd->ErrorCode |= errorstate;
 800579c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800579e:	4319      	orrs	r1, r3
 80057a0:	63a1      	str	r1, [r4, #56]	; 0x38
  uint32_t resp1 = 0;
 80057a2:	2000      	movs	r0, #0
 80057a4:	e7f7      	b.n	8005796 <HAL_SD_GetCardState+0x18>

080057a6 <HAL_SDEx_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transciver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak void HAL_SDEx_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80057a6:	4770      	bx	lr

080057a8 <HAL_SDEx_HighSpeed>:
{
 80057a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t SD_hs[64]  = {0};
 80057ac:	2640      	movs	r6, #64	; 0x40
{
 80057ae:	b096      	sub	sp, #88	; 0x58
 80057b0:	4605      	mov	r5, r0
  uint8_t SD_hs[64]  = {0};
 80057b2:	4632      	mov	r2, r6
 80057b4:	2100      	movs	r1, #0
 80057b6:	a806      	add	r0, sp, #24
 80057b8:	f01c fae1 	bl	8021d7e <memset>
  uint32_t Timeout = HAL_GetTick();
 80057bc:	f7fb fc28 	bl	8001010 <HAL_GetTick>
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80057c0:	6deb      	ldr	r3, [r5, #92]	; 0x5c
  uint32_t Timeout = HAL_GetTick();
 80057c2:	4680      	mov	r8, r0
  if(hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d074      	beq.n	80058b2 <HAL_SDEx_HighSpeed+0x10a>
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 80057c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057cc:	d004      	beq.n	80057d8 <HAL_SDEx_HighSpeed+0x30>
  uint32_t errorstate = HAL_OK;
 80057ce:	2400      	movs	r4, #0
}
 80057d0:	4620      	mov	r0, r4
 80057d2:	b016      	add	sp, #88	; 0x58
 80057d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      (hsd->Init.Transceiver == SDMMC_TRANSCEIVER_ENABLE))
 80057d8:	69af      	ldr	r7, [r5, #24]
  if((hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED) &&
 80057da:	2f01      	cmp	r7, #1
 80057dc:	d1f7      	bne.n	80057ce <HAL_SDEx_HighSpeed+0x26>
    hsd->Instance->DCTRL = 0;
 80057de:	6828      	ldr	r0, [r5, #0]
 80057e0:	2300      	movs	r3, #0
 80057e2:	62c3      	str	r3, [r0, #44]	; 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64);
 80057e4:	4631      	mov	r1, r6
 80057e6:	f001 fd4b 	bl	8007280 <SDMMC_CmdBlockLength>
    if (errorstate != HAL_OK)
 80057ea:	4604      	mov	r4, r0
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d1ef      	bne.n	80057d0 <HAL_SDEx_HighSpeed+0x28>
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 80057f0:	f04f 33ff 	mov.w	r3, #4294967295
    sdmmc_datainitstructure.DataLength    = 64;
 80057f4:	e88d 0048 	stmia.w	sp, {r3, r6}
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 80057f8:	2360      	movs	r3, #96	; 0x60
 80057fa:	9302      	str	r3, [sp, #8]
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80057fc:	9004      	str	r0, [sp, #16]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80057fe:	2302      	movs	r3, #2
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005800:	4669      	mov	r1, sp
 8005802:	6828      	ldr	r0, [r5, #0]
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005804:	9303      	str	r3, [sp, #12]
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8005806:	9705      	str	r7, [sp, #20]
    SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8005808:	f001 fd28 	bl	800725c <SDMMC_ConfigData>
    errorstate = SDMMC_CmdSwitch(hsd->Instance, SDMMC_SDR25_SWITCH_PATTERN);
 800580c:	492a      	ldr	r1, [pc, #168]	; (80058b8 <HAL_SDEx_HighSpeed+0x110>)
 800580e:	6828      	ldr	r0, [r5, #0]
 8005810:	f001 ff33 	bl	800767a <SDMMC_CmdSwitch>
    if(errorstate != HAL_OK)
 8005814:	4604      	mov	r4, r0
 8005816:	2800      	cmp	r0, #0
 8005818:	d1da      	bne.n	80057d0 <HAL_SDEx_HighSpeed+0x28>
 800581a:	ae06      	add	r6, sp, #24
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND| SDMMC_FLAG_DATAEND ))
 800581c:	f240 592a 	movw	r9, #1322	; 0x52a
 8005820:	682b      	ldr	r3, [r5, #0]
 8005822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005824:	ea12 0f09 	tst.w	r2, r9
 8005828:	d005      	beq.n	8005836 <HAL_SDEx_HighSpeed+0x8e>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800582a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800582c:	0710      	lsls	r0, r2, #28
 800582e:	d51e      	bpl.n	800586e <HAL_SDEx_HighSpeed+0xc6>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8005830:	2208      	movs	r2, #8
 8005832:	639a      	str	r2, [r3, #56]	; 0x38
      return errorstate;
 8005834:	e7cc      	b.n	80057d0 <HAL_SDEx_HighSpeed+0x28>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8005836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005838:	041f      	lsls	r7, r3, #16
 800583a:	d50a      	bpl.n	8005852 <HAL_SDEx_HighSpeed+0xaa>
 800583c:	1f37      	subs	r7, r6, #4
 800583e:	f106 0a1c 	add.w	sl, r6, #28
          *(tempbuff + count) = SDMMC_ReadFIFO(hsd->Instance);
 8005842:	6828      	ldr	r0, [r5, #0]
 8005844:	f001 fc46 	bl	80070d4 <SDMMC_ReadFIFO>
 8005848:	f847 0f04 	str.w	r0, [r7, #4]!
        for (count = 0; count < 8; count++)
 800584c:	4557      	cmp	r7, sl
 800584e:	d1f8      	bne.n	8005842 <HAL_SDEx_HighSpeed+0x9a>
        tempbuff += 8;
 8005850:	3620      	adds	r6, #32
      if((HAL_GetTick()-Timeout) >=  SDMMC_DATATIMEOUT)
 8005852:	f7fb fbdd 	bl	8001010 <HAL_GetTick>
 8005856:	eba0 0008 	sub.w	r0, r0, r8
 800585a:	3001      	adds	r0, #1
 800585c:	d1e0      	bne.n	8005820 <HAL_SDEx_HighSpeed+0x78>
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800585e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005862:	63ab      	str	r3, [r5, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005864:	2301      	movs	r3, #1
 8005866:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        return HAL_TIMEOUT;
 800586a:	2403      	movs	r4, #3
 800586c:	e7b0      	b.n	80057d0 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800586e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005870:	0791      	lsls	r1, r2, #30
 8005872:	d502      	bpl.n	800587a <HAL_SDEx_HighSpeed+0xd2>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8005874:	2402      	movs	r4, #2
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005876:	639c      	str	r4, [r3, #56]	; 0x38
      return errorstate;
 8005878:	e7aa      	b.n	80057d0 <HAL_SDEx_HighSpeed+0x28>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800587a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800587c:	0692      	lsls	r2, r2, #26
 800587e:	d501      	bpl.n	8005884 <HAL_SDEx_HighSpeed+0xdc>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8005880:	2420      	movs	r4, #32
 8005882:	e7f8      	b.n	8005876 <HAL_SDEx_HighSpeed+0xce>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005884:	4a0d      	ldr	r2, [pc, #52]	; (80058bc <HAL_SDEx_HighSpeed+0x114>)
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
    if ((SD_hs[13]& 2) != 2)
 8005888:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800588c:	079b      	lsls	r3, r3, #30
 800588e:	d502      	bpl.n	8005896 <HAL_SDEx_HighSpeed+0xee>
      HAL_SDEx_DriveTransceiver_1_8V_Callback(SET);
 8005890:	2001      	movs	r0, #1
 8005892:	f7ff ff88 	bl	80057a6 <HAL_SDEx_DriveTransceiver_1_8V_Callback>
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800589a:	6828      	ldr	r0, [r5, #0]
 800589c:	f001 fcf0 	bl	8007280 <SDMMC_CmdBlockLength>
    if(errorstate != HAL_SD_ERROR_NONE)
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d094      	beq.n	80057ce <HAL_SDEx_HighSpeed+0x26>
      hsd->State = HAL_SD_STATE_READY;
 80058a4:	2401      	movs	r4, #1
 80058a6:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
      hsd->ErrorCode |= errorstate;
 80058aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80058ac:	4318      	orrs	r0, r3
 80058ae:	63a8      	str	r0, [r5, #56]	; 0x38
      return HAL_ERROR;
 80058b0:	e78e      	b.n	80057d0 <HAL_SDEx_HighSpeed+0x28>
     return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE; 
 80058b2:	f04f 6480 	mov.w	r4, #67108864	; 0x4000000
 80058b6:	e78b      	b.n	80057d0 <HAL_SDEx_HighSpeed+0x28>
 80058b8:	80ffff01 	.word	0x80ffff01
 80058bc:	18000f3a 	.word	0x18000f3a

080058c0 <HAL_SDEx_Read_DMADoubleBuffer0CpltCallback>:
 80058c0:	4770      	bx	lr

080058c2 <HAL_SDEx_Read_DMADoubleBuffer1CpltCallback>:
 80058c2:	4770      	bx	lr

080058c4 <HAL_SDEx_Write_DMADoubleBuffer0CpltCallback>:
 80058c4:	4770      	bx	lr

080058c6 <HAL_SDEx_Write_DMADoubleBuffer1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuffer1CpltCallback(SD_HandleTypeDef *hsd)
{
 80058c6:	4770      	bx	lr

080058c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058c8:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058ca:	4604      	mov	r4, r0
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d04a      	beq.n	8005966 <HAL_SPI_Init+0x9e>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058d0:	2300      	movs	r3, #0
 80058d2:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058d4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80058d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80058dc:	b91b      	cbnz	r3, 80058e6 <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058de:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058e2:	f01b fcff 	bl	80212e4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058e6:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058e8:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80058ea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80058ee:	680b      	ldr	r3, [r1, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058f0:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80058f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80058f6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80058fa:	600b      	str	r3, [r1, #0]
 80058fc:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005900:	d92e      	bls.n	8005960 <HAL_SPI_Init+0x98>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005902:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005904:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005908:	bf18      	it	ne
 800590a:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800590c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800590e:	b92b      	cbnz	r3, 800591c <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005910:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8005914:	bf8c      	ite	hi
 8005916:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8005918:	2301      	movls	r3, #1
 800591a:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800591c:	68a6      	ldr	r6, [r4, #8]
 800591e:	6863      	ldr	r3, [r4, #4]
 8005920:	69a5      	ldr	r5, [r4, #24]
 8005922:	4333      	orrs	r3, r6
 8005924:	6926      	ldr	r6, [r4, #16]
 8005926:	4333      	orrs	r3, r6
 8005928:	6966      	ldr	r6, [r4, #20]
 800592a:	4333      	orrs	r3, r6
 800592c:	69e6      	ldr	r6, [r4, #28]
 800592e:	4333      	orrs	r3, r6
 8005930:	6a26      	ldr	r6, [r4, #32]
 8005932:	4333      	orrs	r3, r6
 8005934:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005936:	4333      	orrs	r3, r6
 8005938:	f405 7600 	and.w	r6, r5, #512	; 0x200
 800593c:	4333      	orrs	r3, r6
 800593e:	600b      	str	r3, [r1, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005942:	431a      	orrs	r2, r3
 8005944:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005946:	0c2d      	lsrs	r5, r5, #16
 8005948:	431a      	orrs	r2, r3
 800594a:	f005 0504 	and.w	r5, r5, #4
 800594e:	432a      	orrs	r2, r5
 8005950:	4302      	orrs	r2, r0
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State     = HAL_SPI_STATE_READY;
 8005952:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005954:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8005956:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005958:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800595a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

	
  return HAL_OK;
 800595e:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005960:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005964:	e7d0      	b.n	8005908 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8005966:	2001      	movs	r0, #1
}
 8005968:	bd70      	pop	{r4, r5, r6, pc}

0800596a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800596a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800596e:	461d      	mov	r5, r3

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005970:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8005974:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8005978:	2b01      	cmp	r3, #1
{
 800597a:	4604      	mov	r4, r0
 800597c:	460e      	mov	r6, r1
 800597e:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8005980:	d07d      	beq.n	8005a7e <HAL_SPI_TransmitReceive+0x114>
 8005982:	2301      	movs	r3, #1
 8005984:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005988:	f7fb fb42 	bl	8001010 <HAL_GetTick>

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800598c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	hspi->TxISR       = NULL;


  /* Set the Rx Fifo threshold */
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005990:	6822      	ldr	r2, [r4, #0]
  hspi->RxXferSize  = Size;
 8005992:	f8a4 5044 	strh.w	r5, [r4, #68]	; 0x44
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005996:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005998:	bf1c      	itt	ne
 800599a:	2305      	movne	r3, #5
 800599c:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059a0:	2300      	movs	r3, #0
 80059a2:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 80059a4:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 80059a8:	87e5      	strh	r5, [r4, #62]	; 0x3e
	hspi->TxISR       = NULL;
 80059aa:	6523      	str	r3, [r4, #80]	; 0x50
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059ac:	6853      	ldr	r3, [r2, #4]
	hspi->TxXferSize  = Size;
 80059ae:	87a5      	strh	r5, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059b4:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80059b6:	63a6      	str	r6, [r4, #56]	; 0x38
  tickstart = HAL_GetTick();
 80059b8:	4681      	mov	r9, r0
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80059ba:	6053      	str	r3, [r2, #4]
  uint32_t txallowed = 1U;
 80059bc:	2501      	movs	r5, #1


    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059be:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	b95b      	cbnz	r3, 80059dc <HAL_SPI_TransmitReceive+0x72>
 80059c4:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 80059c8:	b280      	uxth	r0, r0
 80059ca:	b938      	cbnz	r0, 80059dc <HAL_SPI_TransmitReceive+0x72>
    }
 // }


error :
  hspi->State = HAL_SPI_STATE_READY;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80059d2:	2300      	movs	r3, #0
 80059d4:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80059d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80059dc:	b195      	cbz	r5, 8005a04 <HAL_SPI_TransmitReceive+0x9a>
 80059de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	b17b      	cbz	r3, 8005a04 <HAL_SPI_TransmitReceive+0x9a>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	0791      	lsls	r1, r2, #30
 80059ea:	d50b      	bpl.n	8005a04 <HAL_SPI_TransmitReceive+0x9a>
        if (hspi->TxXferCount > 1U)
 80059ec:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80059ee:	b292      	uxth	r2, r2
 80059f0:	2a01      	cmp	r2, #1
 80059f2:	d932      	bls.n	8005a5a <HAL_SPI_TransmitReceive+0xf0>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 80059f4:	f836 2b02 	ldrh.w	r2, [r6], #2
 80059f8:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 80059fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80059fc:	3b02      	subs	r3, #2
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8005a02:	2500      	movs	r5, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8005a04:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	b1db      	cbz	r3, 8005a44 <HAL_SPI_TransmitReceive+0xda>
 8005a0c:	6823      	ldr	r3, [r4, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	07d2      	lsls	r2, r2, #31
 8005a12:	d517      	bpl.n	8005a44 <HAL_SPI_TransmitReceive+0xda>
        if (hspi->RxXferCount > 1U)
 8005a14:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005a18:	b292      	uxth	r2, r2
 8005a1a:	2a01      	cmp	r2, #1
 8005a1c:	d925      	bls.n	8005a6a <HAL_SPI_TransmitReceive+0x100>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8005a1e:	68da      	ldr	r2, [r3, #12]
 8005a20:	f827 2b02 	strh.w	r2, [r7], #2
          hspi->RxXferCount -= 2U;
 8005a24:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005a28:	3a02      	subs	r2, #2
 8005a2a:	b292      	uxth	r2, r2
 8005a2c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005a30:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8005a34:	b292      	uxth	r2, r2
 8005a36:	2a01      	cmp	r2, #1
 8005a38:	d803      	bhi.n	8005a42 <HAL_SPI_TransmitReceive+0xd8>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a3a:	685a      	ldr	r2, [r3, #4]
 8005a3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a40:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8005a42:	2501      	movs	r5, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8005a44:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005a48:	d0b9      	beq.n	80059be <HAL_SPI_TransmitReceive+0x54>
 8005a4a:	f7fb fae1 	bl	8001010 <HAL_GetTick>
 8005a4e:	eba0 0009 	sub.w	r0, r0, r9
 8005a52:	4580      	cmp	r8, r0
 8005a54:	d8b3      	bhi.n	80059be <HAL_SPI_TransmitReceive+0x54>
        errorcode = HAL_TIMEOUT;
 8005a56:	2003      	movs	r0, #3
 8005a58:	e7b8      	b.n	80059cc <HAL_SPI_TransmitReceive+0x62>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005a5a:	7832      	ldrb	r2, [r6, #0]
 8005a5c:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8005a5e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	87e3      	strh	r3, [r4, #62]	; 0x3e
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7cb      	b.n	8005a02 <HAL_SPI_TransmitReceive+0x98>
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a6a:	7b1b      	ldrb	r3, [r3, #12]
 8005a6c:	703b      	strb	r3, [r7, #0]
          hspi->RxXferCount--;
 8005a6e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8005a72:	3b01      	subs	r3, #1
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a7a:	3701      	adds	r7, #1
 8005a7c:	e7e1      	b.n	8005a42 <HAL_SPI_TransmitReceive+0xd8>
  __HAL_LOCK(hspi);
 8005a7e:	2002      	movs	r0, #2
  return errorcode;
}
 8005a80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005a84 <HAL_SPI_ErrorCallback>:
 8005a84:	4770      	bx	lr
	...

08005a88 <HAL_SPI_IRQHandler>:
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
  uint32_t itsource = hspi->Instance->CR2;
 8005a88:	6803      	ldr	r3, [r0, #0]
{
 8005a8a:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8005a8c:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8005a8e:	689a      	ldr	r2, [r3, #8]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8005a90:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8005a94:	2d01      	cmp	r5, #1
{
 8005a96:	b085      	sub	sp, #20
 8005a98:	4604      	mov	r4, r0
  if (((itflag & SPI_FLAG_OVR) == RESET) &&
 8005a9a:	d105      	bne.n	8005aa8 <HAL_SPI_IRQHandler+0x20>
      ((itflag & SPI_FLAG_RXNE) != RESET) && ((itsource & SPI_IT_RXNE) != RESET))
 8005a9c:	064d      	lsls	r5, r1, #25
 8005a9e:	d503      	bpl.n	8005aa8 <HAL_SPI_IRQHandler+0x20>
  {
    hspi->RxISR(hspi);
 8005aa0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
  {
    hspi->TxISR(hspi);
 8005aa2:	4798      	blx	r3
        HAL_SPI_ErrorCallback(hspi);
      }
    }
    return;
  }
}
 8005aa4:	b005      	add	sp, #20
 8005aa6:	bd30      	pop	{r4, r5, pc}
  if (((itflag & SPI_FLAG_TXE) != RESET) && ((itsource & SPI_IT_TXE) != RESET))
 8005aa8:	0795      	lsls	r5, r2, #30
 8005aaa:	d504      	bpl.n	8005ab6 <HAL_SPI_IRQHandler+0x2e>
 8005aac:	0608      	lsls	r0, r1, #24
 8005aae:	d502      	bpl.n	8005ab6 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 8005ab0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	e7f5      	b.n	8005aa2 <HAL_SPI_IRQHandler+0x1a>
  if (((itflag & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE)) != RESET) && ((itsource & SPI_IT_ERR) != RESET))
 8005ab6:	f412 7fb0 	tst.w	r2, #352	; 0x160
 8005aba:	d0f3      	beq.n	8005aa4 <HAL_SPI_IRQHandler+0x1c>
 8005abc:	068d      	lsls	r5, r1, #26
 8005abe:	d5f1      	bpl.n	8005aa4 <HAL_SPI_IRQHandler+0x1c>
    if ((itflag & SPI_FLAG_OVR) != RESET)
 8005ac0:	0650      	lsls	r0, r2, #25
 8005ac2:	d50f      	bpl.n	8005ae4 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005ac4:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8005ac8:	2803      	cmp	r0, #3
 8005aca:	f04f 0500 	mov.w	r5, #0
 8005ace:	d041      	beq.n	8005b54 <HAL_SPI_IRQHandler+0xcc>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005ad0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005ad2:	f040 0004 	orr.w	r0, r0, #4
 8005ad6:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ad8:	9500      	str	r5, [sp, #0]
 8005ada:	68d8      	ldr	r0, [r3, #12]
 8005adc:	9000      	str	r0, [sp, #0]
 8005ade:	6898      	ldr	r0, [r3, #8]
 8005ae0:	9000      	str	r0, [sp, #0]
 8005ae2:	9800      	ldr	r0, [sp, #0]
    if ((itflag & SPI_FLAG_MODF) != RESET)
 8005ae4:	0695      	lsls	r5, r2, #26
 8005ae6:	d50c      	bpl.n	8005b02 <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ae8:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8005aea:	f040 0001 	orr.w	r0, r0, #1
 8005aee:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005af0:	2000      	movs	r0, #0
 8005af2:	9002      	str	r0, [sp, #8]
 8005af4:	6898      	ldr	r0, [r3, #8]
 8005af6:	9002      	str	r0, [sp, #8]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8005afe:	6018      	str	r0, [r3, #0]
 8005b00:	9802      	ldr	r0, [sp, #8]
    if ((itflag & SPI_FLAG_FRE) != RESET)
 8005b02:	05d0      	lsls	r0, r2, #23
 8005b04:	d508      	bpl.n	8005b18 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005b06:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005b08:	f042 0208 	orr.w	r2, r2, #8
 8005b0c:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005b0e:	2200      	movs	r2, #0
 8005b10:	9203      	str	r2, [sp, #12]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	9203      	str	r2, [sp, #12]
 8005b16:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b18:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005b1a:	2a00      	cmp	r2, #0
 8005b1c:	d0c2      	beq.n	8005aa4 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005b24:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8005b26:	2201      	movs	r2, #1
 8005b28:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005b2c:	078a      	lsls	r2, r1, #30
 8005b2e:	d018      	beq.n	8005b62 <HAL_SPI_IRQHandler+0xda>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b30:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005b32:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005b34:	f022 0203 	bic.w	r2, r2, #3
 8005b38:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8005b3a:	b118      	cbz	r0, 8005b44 <HAL_SPI_IRQHandler+0xbc>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b3c:	4b0b      	ldr	r3, [pc, #44]	; (8005b6c <HAL_SPI_IRQHandler+0xe4>)
 8005b3e:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmarx);
 8005b40:	f7fc f8f2 	bl	8001d28 <HAL_DMA_Abort_IT>
        if (hspi->hdmatx != NULL)
 8005b44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b46:	2800      	cmp	r0, #0
 8005b48:	d0ac      	beq.n	8005aa4 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005b4a:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <HAL_SPI_IRQHandler+0xe4>)
 8005b4c:	6383      	str	r3, [r0, #56]	; 0x38
          HAL_DMA_Abort_IT(hspi->hdmatx);
 8005b4e:	f7fc f8eb 	bl	8001d28 <HAL_DMA_Abort_IT>
 8005b52:	e7a7      	b.n	8005aa4 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b54:	9501      	str	r5, [sp, #4]
 8005b56:	68da      	ldr	r2, [r3, #12]
 8005b58:	9201      	str	r2, [sp, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	9b01      	ldr	r3, [sp, #4]
        return;
 8005b60:	e7a0      	b.n	8005aa4 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8005b62:	4620      	mov	r0, r4
 8005b64:	f7ff ff8e 	bl	8005a84 <HAL_SPI_ErrorCallback>
 8005b68:	e79c      	b.n	8005aa4 <HAL_SPI_IRQHandler+0x1c>
 8005b6a:	bf00      	nop
 8005b6c:	08005b71 	.word	0x08005b71

08005b70 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b70:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b72:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005b7a:	87c3      	strh	r3, [r0, #62]	; 0x3e

  HAL_SPI_ErrorCallback(hspi);
 8005b7c:	f7ff ff82 	bl	8005a84 <HAL_SPI_ErrorCallback>
 8005b80:	bd08      	pop	{r3, pc}
	...

08005b84 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b84:	6a03      	ldr	r3, [r0, #32]
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8c:	6a03      	ldr	r3, [r0, #32]
{
 8005b8e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b92:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b94:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b9a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005b9e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ba0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005ba2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005ba6:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ba8:	4d1b      	ldr	r5, [pc, #108]	; (8005c18 <TIM_OC1_SetConfig+0x94>)
 8005baa:	42a8      	cmp	r0, r5
 8005bac:	d00f      	beq.n	8005bce <TIM_OC1_SetConfig+0x4a>
 8005bae:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005bb2:	42a8      	cmp	r0, r5
 8005bb4:	d00b      	beq.n	8005bce <TIM_OC1_SetConfig+0x4a>
 8005bb6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005bba:	42a8      	cmp	r0, r5
 8005bbc:	d007      	beq.n	8005bce <TIM_OC1_SetConfig+0x4a>
 8005bbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bc2:	42a8      	cmp	r0, r5
 8005bc4:	d003      	beq.n	8005bce <TIM_OC1_SetConfig+0x4a>
 8005bc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bca:	42a8      	cmp	r0, r5
 8005bcc:	d11e      	bne.n	8005c0c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bce:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005bd0:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005bd4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd6:	4d10      	ldr	r5, [pc, #64]	; (8005c18 <TIM_OC1_SetConfig+0x94>)
 8005bd8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bda:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bde:	d00f      	beq.n	8005c00 <TIM_OC1_SetConfig+0x7c>
 8005be0:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005be4:	42a8      	cmp	r0, r5
 8005be6:	d00b      	beq.n	8005c00 <TIM_OC1_SetConfig+0x7c>
 8005be8:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005bec:	42a8      	cmp	r0, r5
 8005bee:	d007      	beq.n	8005c00 <TIM_OC1_SetConfig+0x7c>
 8005bf0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bf4:	42a8      	cmp	r0, r5
 8005bf6:	d003      	beq.n	8005c00 <TIM_OC1_SetConfig+0x7c>
 8005bf8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005bfc:	42a8      	cmp	r0, r5
 8005bfe:	d105      	bne.n	8005c0c <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c00:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c04:	698e      	ldr	r6, [r1, #24]
 8005c06:	694c      	ldr	r4, [r1, #20]
 8005c08:	4334      	orrs	r4, r6
 8005c0a:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c0c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c0e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c10:	684a      	ldr	r2, [r1, #4]
 8005c12:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c14:	6203      	str	r3, [r0, #32]
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	40012c00 	.word	0x40012c00

08005c1c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c1c:	6a03      	ldr	r3, [r0, #32]
 8005c1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c22:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c24:	6a03      	ldr	r3, [r0, #32]
{
 8005c26:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c28:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2a:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c2c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c32:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005c36:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c38:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005c3a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c3e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c42:	4d16      	ldr	r5, [pc, #88]	; (8005c9c <TIM_OC3_SetConfig+0x80>)
 8005c44:	42a8      	cmp	r0, r5
 8005c46:	d003      	beq.n	8005c50 <TIM_OC3_SetConfig+0x34>
 8005c48:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005c4c:	42a8      	cmp	r0, r5
 8005c4e:	d10d      	bne.n	8005c6c <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c50:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5a:	4d10      	ldr	r5, [pc, #64]	; (8005c9c <TIM_OC3_SetConfig+0x80>)
 8005c5c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c62:	d00e      	beq.n	8005c82 <TIM_OC3_SetConfig+0x66>
 8005c64:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005c68:	42a8      	cmp	r0, r5
 8005c6a:	d00a      	beq.n	8005c82 <TIM_OC3_SetConfig+0x66>
 8005c6c:	4d0c      	ldr	r5, [pc, #48]	; (8005ca0 <TIM_OC3_SetConfig+0x84>)
 8005c6e:	42a8      	cmp	r0, r5
 8005c70:	d007      	beq.n	8005c82 <TIM_OC3_SetConfig+0x66>
 8005c72:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c76:	42a8      	cmp	r0, r5
 8005c78:	d003      	beq.n	8005c82 <TIM_OC3_SetConfig+0x66>
 8005c7a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c7e:	42a8      	cmp	r0, r5
 8005c80:	d106      	bne.n	8005c90 <TIM_OC3_SetConfig+0x74>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c82:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c86:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c88:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c8a:	4334      	orrs	r4, r6
 8005c8c:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c90:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c92:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c94:	684a      	ldr	r2, [r1, #4]
 8005c96:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c98:	6203      	str	r3, [r0, #32]
 8005c9a:	bd70      	pop	{r4, r5, r6, pc}
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40014000 	.word	0x40014000

08005ca4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ca4:	6a03      	ldr	r3, [r0, #32]
 8005ca6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005caa:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cac:	6a03      	ldr	r3, [r0, #32]
{
 8005cae:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cb0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cb2:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cb4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cb6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005cba:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cbe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cc2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005cc4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cc8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ccc:	4d0e      	ldr	r5, [pc, #56]	; (8005d08 <TIM_OC4_SetConfig+0x64>)
 8005cce:	42a8      	cmp	r0, r5
 8005cd0:	d00f      	beq.n	8005cf2 <TIM_OC4_SetConfig+0x4e>
 8005cd2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005cd6:	42a8      	cmp	r0, r5
 8005cd8:	d00b      	beq.n	8005cf2 <TIM_OC4_SetConfig+0x4e>
 8005cda:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005cde:	42a8      	cmp	r0, r5
 8005ce0:	d007      	beq.n	8005cf2 <TIM_OC4_SetConfig+0x4e>
 8005ce2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ce6:	42a8      	cmp	r0, r5
 8005ce8:	d003      	beq.n	8005cf2 <TIM_OC4_SetConfig+0x4e>
 8005cea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005cee:	42a8      	cmp	r0, r5
 8005cf0:	d104      	bne.n	8005cfc <TIM_OC4_SetConfig+0x58>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cf2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cf4:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cf8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cfe:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d00:	684a      	ldr	r2, [r1, #4]
 8005d02:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d04:	6203      	str	r3, [r0, #32]
 8005d06:	bd30      	pop	{r4, r5, pc}
 8005d08:	40012c00 	.word	0x40012c00

08005d0c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d0c:	6a03      	ldr	r3, [r0, #32]
 8005d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d12:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d14:	6a03      	ldr	r3, [r0, #32]
{
 8005d16:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d18:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d1a:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d1c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005d26:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d28:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005d2a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d2e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d32:	4d0f      	ldr	r5, [pc, #60]	; (8005d70 <TIM_OC5_SetConfig+0x64>)
 8005d34:	42a8      	cmp	r0, r5
 8005d36:	d00f      	beq.n	8005d58 <TIM_OC5_SetConfig+0x4c>
 8005d38:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005d3c:	42a8      	cmp	r0, r5
 8005d3e:	d00b      	beq.n	8005d58 <TIM_OC5_SetConfig+0x4c>
 8005d40:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005d44:	42a8      	cmp	r0, r5
 8005d46:	d007      	beq.n	8005d58 <TIM_OC5_SetConfig+0x4c>
 8005d48:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d4c:	42a8      	cmp	r0, r5
 8005d4e:	d003      	beq.n	8005d58 <TIM_OC5_SetConfig+0x4c>
 8005d50:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d54:	42a8      	cmp	r0, r5
 8005d56:	d104      	bne.n	8005d62 <TIM_OC5_SetConfig+0x56>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d58:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d5a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d5e:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d62:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d64:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d66:	684a      	ldr	r2, [r1, #4]
 8005d68:	6582      	str	r2, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d6a:	6203      	str	r3, [r0, #32]
 8005d6c:	bd30      	pop	{r4, r5, pc}
 8005d6e:	bf00      	nop
 8005d70:	40012c00 	.word	0x40012c00

08005d74 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d74:	6a03      	ldr	r3, [r0, #32]
 8005d76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005d7a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d7c:	6a03      	ldr	r3, [r0, #32]
{
 8005d7e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d80:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d82:	6d42      	ldr	r2, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d86:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005d8a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d8e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d92:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d98:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d9c:	4d0e      	ldr	r5, [pc, #56]	; (8005dd8 <TIM_OC6_SetConfig+0x64>)
 8005d9e:	42a8      	cmp	r0, r5
 8005da0:	d00f      	beq.n	8005dc2 <TIM_OC6_SetConfig+0x4e>
 8005da2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005da6:	42a8      	cmp	r0, r5
 8005da8:	d00b      	beq.n	8005dc2 <TIM_OC6_SetConfig+0x4e>
 8005daa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005dae:	42a8      	cmp	r0, r5
 8005db0:	d007      	beq.n	8005dc2 <TIM_OC6_SetConfig+0x4e>
 8005db2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005db6:	42a8      	cmp	r0, r5
 8005db8:	d003      	beq.n	8005dc2 <TIM_OC6_SetConfig+0x4e>
 8005dba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005dbe:	42a8      	cmp	r0, r5
 8005dc0:	d104      	bne.n	8005dcc <TIM_OC6_SetConfig+0x58>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dc2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dc4:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dc8:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dcc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dce:	6542      	str	r2, [r0, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005dd0:	684a      	ldr	r2, [r1, #4]
 8005dd2:	65c2      	str	r2, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd4:	6203      	str	r3, [r0, #32]
 8005dd6:	bd30      	pop	{r4, r5, pc}
 8005dd8:	40012c00 	.word	0x40012c00

08005ddc <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8005ddc:	2302      	movs	r3, #2
{
 8005dde:	b510      	push	{r4, lr}
  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005de4:	6803      	ldr	r3, [r0, #0]
 8005de6:	4c09      	ldr	r4, [pc, #36]	; (8005e0c <HAL_TIM_Base_Start+0x30>)
 8005de8:	6899      	ldr	r1, [r3, #8]
 8005dea:	4021      	ands	r1, r4
 8005dec:	2906      	cmp	r1, #6
 8005dee:	d008      	beq.n	8005e02 <HAL_TIM_Base_Start+0x26>
 8005df0:	689a      	ldr	r2, [r3, #8]
 8005df2:	4022      	ands	r2, r4
 8005df4:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005df8:	bf1e      	ittt	ne
 8005dfa:	681a      	ldrne	r2, [r3, #0]
 8005dfc:	f042 0201 	orrne.w	r2, r2, #1
 8005e00:	601a      	strne	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8005e02:	2301      	movs	r3, #1
 8005e04:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8005e08:	2000      	movs	r0, #0
 8005e0a:	bd10      	pop	{r4, pc}
 8005e0c:	00010007 	.word	0x00010007

08005e10 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e10:	6803      	ldr	r3, [r0, #0]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005e12:	480a      	ldr	r0, [pc, #40]	; (8005e3c <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 8005e1c:	6899      	ldr	r1, [r3, #8]
 8005e1e:	4001      	ands	r1, r0
 8005e20:	2906      	cmp	r1, #6
 8005e22:	d008      	beq.n	8005e36 <HAL_TIM_Base_Start_IT+0x26>
 8005e24:	689a      	ldr	r2, [r3, #8]
 8005e26:	4002      	ands	r2, r0
 8005e28:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    __HAL_TIM_ENABLE(htim);
 8005e2c:	bf1e      	ittt	ne
 8005e2e:	681a      	ldrne	r2, [r3, #0]
 8005e30:	f042 0201 	orrne.w	r2, r2, #1
 8005e34:	601a      	strne	r2, [r3, #0]
}
 8005e36:	2000      	movs	r0, #0
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	00010007 	.word	0x00010007

08005e40 <HAL_TIM_PeriodElapsedCallback>:
 8005e40:	4770      	bx	lr

08005e42 <HAL_TIM_OC_DelayElapsedCallback>:
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIM_IC_CaptureCallback>:
 8005e44:	4770      	bx	lr

08005e46 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005e46:	4770      	bx	lr

08005e48 <HAL_TIM_TriggerCallback>:
 8005e48:	4770      	bx	lr

08005e4a <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e4a:	6803      	ldr	r3, [r0, #0]
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	0791      	lsls	r1, r2, #30
{
 8005e50:	b510      	push	{r4, lr}
 8005e52:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e54:	d50f      	bpl.n	8005e76 <HAL_TIM_IRQHandler+0x2c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e56:	68da      	ldr	r2, [r3, #12]
 8005e58:	0792      	lsls	r2, r2, #30
 8005e5a:	d50c      	bpl.n	8005e76 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e5c:	f06f 0202 	mvn.w	r2, #2
 8005e60:	611a      	str	r2, [r3, #16]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e62:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e64:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e66:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e68:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e6a:	f000 8085 	beq.w	8005f78 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8005e6e:	f7ff ffe9 	bl	8005e44 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e72:	2300      	movs	r3, #0
 8005e74:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	0752      	lsls	r2, r2, #29
 8005e7c:	d510      	bpl.n	8005ea0 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	0750      	lsls	r0, r2, #29
 8005e82:	d50d      	bpl.n	8005ea0 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e84:	f06f 0204 	mvn.w	r2, #4
 8005e88:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e8a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e8c:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e8e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e92:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005e94:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e96:	d075      	beq.n	8005f84 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8005e98:	f7ff ffd4 	bl	8005e44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	0711      	lsls	r1, r2, #28
 8005ea6:	d50f      	bpl.n	8005ec8 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	0712      	lsls	r2, r2, #28
 8005eac:	d50c      	bpl.n	8005ec8 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005eae:	f06f 0208 	mvn.w	r2, #8
 8005eb2:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eb4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eb6:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eb8:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005eba:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005ebc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ebe:	d067      	beq.n	8005f90 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8005ec0:	f7ff ffc0 	bl	8005e44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ec8:	6823      	ldr	r3, [r4, #0]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	06d0      	lsls	r0, r2, #27
 8005ece:	d510      	bpl.n	8005ef2 <HAL_TIM_IRQHandler+0xa8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	06d1      	lsls	r1, r2, #27
 8005ed4:	d50d      	bpl.n	8005ef2 <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ed6:	f06f 0210 	mvn.w	r2, #16
 8005eda:	611a      	str	r2, [r3, #16]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005edc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ede:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ee0:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ee4:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ee8:	d058      	beq.n	8005f9c <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8005eea:	f7ff ffab 	bl	8005e44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ef2:	6823      	ldr	r3, [r4, #0]
 8005ef4:	691a      	ldr	r2, [r3, #16]
 8005ef6:	07d2      	lsls	r2, r2, #31
 8005ef8:	d508      	bpl.n	8005f0c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	07d0      	lsls	r0, r2, #31
 8005efe:	d505      	bpl.n	8005f0c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f00:	f06f 0201 	mvn.w	r2, #1
 8005f04:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f06:	4620      	mov	r0, r4
 8005f08:	f7ff ff9a 	bl	8005e40 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	0611      	lsls	r1, r2, #24
 8005f12:	d508      	bpl.n	8005f26 <HAL_TIM_IRQHandler+0xdc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	0612      	lsls	r2, r2, #24
 8005f18:	d505      	bpl.n	8005f26 <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f1e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8005f20:	4620      	mov	r0, r4
 8005f22:	f000 fb98 	bl	8006656 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	691a      	ldr	r2, [r3, #16]
 8005f2a:	05d0      	lsls	r0, r2, #23
 8005f2c:	d508      	bpl.n	8005f40 <HAL_TIM_IRQHandler+0xf6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	0611      	lsls	r1, r2, #24
 8005f32:	d505      	bpl.n	8005f40 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f38:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8005f3a:	4620      	mov	r0, r4
 8005f3c:	f000 fb8c 	bl	8006658 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f40:	6823      	ldr	r3, [r4, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	0652      	lsls	r2, r2, #25
 8005f46:	d508      	bpl.n	8005f5a <HAL_TIM_IRQHandler+0x110>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	0650      	lsls	r0, r2, #25
 8005f4c:	d505      	bpl.n	8005f5a <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f52:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8005f54:	4620      	mov	r0, r4
 8005f56:	f7ff ff77 	bl	8005e48 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	691a      	ldr	r2, [r3, #16]
 8005f5e:	0691      	lsls	r1, r2, #26
 8005f60:	d522      	bpl.n	8005fa8 <HAL_TIM_IRQHandler+0x15e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	0692      	lsls	r2, r2, #26
 8005f66:	d51f      	bpl.n	8005fa8 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f68:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8005f6c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f6e:	611a      	str	r2, [r3, #16]
}
 8005f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8005f74:	f000 bb6e 	b.w	8006654 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f78:	f7ff ff63 	bl	8005e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f7c:	4620      	mov	r0, r4
 8005f7e:	f7ff ff62 	bl	8005e46 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f82:	e776      	b.n	8005e72 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f84:	f7ff ff5d 	bl	8005e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f7ff ff5c 	bl	8005e46 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f8e:	e785      	b.n	8005e9c <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f90:	f7ff ff57 	bl	8005e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f94:	4620      	mov	r0, r4
 8005f96:	f7ff ff56 	bl	8005e46 <HAL_TIM_PWM_PulseFinishedCallback>
 8005f9a:	e793      	b.n	8005ec4 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f9c:	f7ff ff51 	bl	8005e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f7ff ff50 	bl	8005e46 <HAL_TIM_PWM_PulseFinishedCallback>
 8005fa6:	e7a2      	b.n	8005eee <HAL_TIM_IRQHandler+0xa4>
 8005fa8:	bd10      	pop	{r4, pc}
	...

08005fac <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fac:	4a30      	ldr	r2, [pc, #192]	; (8006070 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005fae:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb0:	4290      	cmp	r0, r2
 8005fb2:	d012      	beq.n	8005fda <TIM_Base_SetConfig+0x2e>
 8005fb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005fb8:	d00f      	beq.n	8005fda <TIM_Base_SetConfig+0x2e>
 8005fba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005fbe:	4290      	cmp	r0, r2
 8005fc0:	d00b      	beq.n	8005fda <TIM_Base_SetConfig+0x2e>
 8005fc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fc6:	4290      	cmp	r0, r2
 8005fc8:	d007      	beq.n	8005fda <TIM_Base_SetConfig+0x2e>
 8005fca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005fce:	4290      	cmp	r0, r2
 8005fd0:	d003      	beq.n	8005fda <TIM_Base_SetConfig+0x2e>
 8005fd2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005fd6:	4290      	cmp	r0, r2
 8005fd8:	d119      	bne.n	800600e <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005fda:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005fe0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fe2:	4a23      	ldr	r2, [pc, #140]	; (8006070 <TIM_Base_SetConfig+0xc4>)
 8005fe4:	4290      	cmp	r0, r2
 8005fe6:	d01d      	beq.n	8006024 <TIM_Base_SetConfig+0x78>
 8005fe8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005fec:	d01a      	beq.n	8006024 <TIM_Base_SetConfig+0x78>
 8005fee:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005ff2:	4290      	cmp	r0, r2
 8005ff4:	d016      	beq.n	8006024 <TIM_Base_SetConfig+0x78>
 8005ff6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ffa:	4290      	cmp	r0, r2
 8005ffc:	d012      	beq.n	8006024 <TIM_Base_SetConfig+0x78>
 8005ffe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006002:	4290      	cmp	r0, r2
 8006004:	d00e      	beq.n	8006024 <TIM_Base_SetConfig+0x78>
 8006006:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800600a:	4290      	cmp	r0, r2
 800600c:	d00a      	beq.n	8006024 <TIM_Base_SetConfig+0x78>
 800600e:	4a19      	ldr	r2, [pc, #100]	; (8006074 <TIM_Base_SetConfig+0xc8>)
 8006010:	4290      	cmp	r0, r2
 8006012:	d007      	beq.n	8006024 <TIM_Base_SetConfig+0x78>
 8006014:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006018:	4290      	cmp	r0, r2
 800601a:	d003      	beq.n	8006024 <TIM_Base_SetConfig+0x78>
 800601c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006020:	4290      	cmp	r0, r2
 8006022:	d103      	bne.n	800602c <TIM_Base_SetConfig+0x80>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006024:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800602a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800602c:	694a      	ldr	r2, [r1, #20]
 800602e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006032:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8006034:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006036:	688b      	ldr	r3, [r1, #8]
 8006038:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800603a:	680b      	ldr	r3, [r1, #0]
 800603c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800603e:	4b0c      	ldr	r3, [pc, #48]	; (8006070 <TIM_Base_SetConfig+0xc4>)
 8006040:	4298      	cmp	r0, r3
 8006042:	d00f      	beq.n	8006064 <TIM_Base_SetConfig+0xb8>
 8006044:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006048:	4298      	cmp	r0, r3
 800604a:	d00b      	beq.n	8006064 <TIM_Base_SetConfig+0xb8>
 800604c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8006050:	4298      	cmp	r0, r3
 8006052:	d007      	beq.n	8006064 <TIM_Base_SetConfig+0xb8>
 8006054:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006058:	4298      	cmp	r0, r3
 800605a:	d003      	beq.n	8006064 <TIM_Base_SetConfig+0xb8>
 800605c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006060:	4298      	cmp	r0, r3
 8006062:	d101      	bne.n	8006068 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8006064:	690b      	ldr	r3, [r1, #16]
 8006066:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8006068:	2301      	movs	r3, #1
 800606a:	6143      	str	r3, [r0, #20]
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40012c00 	.word	0x40012c00
 8006074:	40014000 	.word	0x40014000

08006078 <HAL_TIM_Base_Init>:
{
 8006078:	b510      	push	{r4, lr}
  if (htim == NULL)
 800607a:	4604      	mov	r4, r0
 800607c:	b1a0      	cbz	r0, 80060a8 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800607e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8006082:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006086:	b91b      	cbnz	r3, 8006090 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8006088:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800608c:	f01b f9e4 	bl	8021458 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8006090:	2302      	movs	r3, #2
 8006092:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006096:	6820      	ldr	r0, [r4, #0]
 8006098:	1d21      	adds	r1, r4, #4
 800609a:	f7ff ff87 	bl	8005fac <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800609e:	2301      	movs	r3, #1
 80060a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80060a4:	2000      	movs	r0, #0
 80060a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80060a8:	2001      	movs	r0, #1
}
 80060aa:	bd10      	pop	{r4, pc}

080060ac <HAL_TIM_OC_Init>:
{
 80060ac:	b510      	push	{r4, lr}
  if (htim == NULL)
 80060ae:	4604      	mov	r4, r0
 80060b0:	b1a0      	cbz	r0, 80060dc <HAL_TIM_OC_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80060b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060ba:	b91b      	cbnz	r3, 80060c4 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80060bc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 80060c0:	f01b fa2c 	bl	802151c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80060c4:	2302      	movs	r3, #2
 80060c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80060ca:	6820      	ldr	r0, [r4, #0]
 80060cc:	1d21      	adds	r1, r4, #4
 80060ce:	f7ff ff6d 	bl	8005fac <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80060d2:	2301      	movs	r3, #1
 80060d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80060d8:	2000      	movs	r0, #0
 80060da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80060dc:	2001      	movs	r0, #1
}
 80060de:	bd10      	pop	{r4, pc}

080060e0 <HAL_TIM_PWM_Init>:
{
 80060e0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80060e2:	4604      	mov	r4, r0
 80060e4:	b1a0      	cbz	r0, 8006110 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80060e6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80060ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80060ee:	b91b      	cbnz	r3, 80060f8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80060f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80060f4:	f01b fafe 	bl	80216f4 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80060f8:	2302      	movs	r3, #2
 80060fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060fe:	6820      	ldr	r0, [r4, #0]
 8006100:	1d21      	adds	r1, r4, #4
 8006102:	f7ff ff53 	bl	8005fac <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8006106:	2301      	movs	r3, #1
 8006108:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800610c:	2000      	movs	r0, #0
 800610e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006110:	2001      	movs	r0, #1
}
 8006112:	bd10      	pop	{r4, pc}

08006114 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006114:	6a03      	ldr	r3, [r0, #32]
 8006116:	f023 0310 	bic.w	r3, r3, #16
 800611a:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800611c:	6a03      	ldr	r3, [r0, #32]
{
 800611e:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8006120:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8006122:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006124:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006126:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800612a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800612e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006132:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006134:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006138:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800613c:	4d16      	ldr	r5, [pc, #88]	; (8006198 <TIM_OC2_SetConfig+0x84>)
 800613e:	42a8      	cmp	r0, r5
 8006140:	d003      	beq.n	800614a <TIM_OC2_SetConfig+0x36>
 8006142:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006146:	42a8      	cmp	r0, r5
 8006148:	d10d      	bne.n	8006166 <TIM_OC2_SetConfig+0x52>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800614a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800614c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006150:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006154:	4d10      	ldr	r5, [pc, #64]	; (8006198 <TIM_OC2_SetConfig+0x84>)
 8006156:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8006158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615c:	d00e      	beq.n	800617c <TIM_OC2_SetConfig+0x68>
 800615e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8006162:	42a8      	cmp	r0, r5
 8006164:	d00a      	beq.n	800617c <TIM_OC2_SetConfig+0x68>
 8006166:	4d0d      	ldr	r5, [pc, #52]	; (800619c <TIM_OC2_SetConfig+0x88>)
 8006168:	42a8      	cmp	r0, r5
 800616a:	d007      	beq.n	800617c <TIM_OC2_SetConfig+0x68>
 800616c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006170:	42a8      	cmp	r0, r5
 8006172:	d003      	beq.n	800617c <TIM_OC2_SetConfig+0x68>
 8006174:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006178:	42a8      	cmp	r0, r5
 800617a:	d106      	bne.n	800618a <TIM_OC2_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800617c:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006180:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006182:	694c      	ldr	r4, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006184:	4334      	orrs	r4, r6
 8006186:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 800618a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800618c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800618e:	684a      	ldr	r2, [r1, #4]
 8006190:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8006192:	6203      	str	r3, [r0, #32]
 8006194:	bd70      	pop	{r4, r5, r6, pc}
 8006196:	bf00      	nop
 8006198:	40012c00 	.word	0x40012c00
 800619c:	40014000 	.word	0x40014000

080061a0 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80061a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80061a4:	2b01      	cmp	r3, #1
{
 80061a6:	b510      	push	{r4, lr}
 80061a8:	4604      	mov	r4, r0
 80061aa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80061ae:	d010      	beq.n	80061d2 <HAL_TIM_OC_ConfigChannel+0x32>
 80061b0:	2301      	movs	r3, #1
  switch (Channel)
 80061b2:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80061b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80061b8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80061bc:	d01c      	beq.n	80061f8 <HAL_TIM_OC_ConfigChannel+0x58>
 80061be:	d809      	bhi.n	80061d4 <HAL_TIM_OC_ConfigChannel+0x34>
 80061c0:	b192      	cbz	r2, 80061e8 <HAL_TIM_OC_ConfigChannel+0x48>
 80061c2:	2a04      	cmp	r2, #4
 80061c4:	d014      	beq.n	80061f0 <HAL_TIM_OC_ConfigChannel+0x50>
  htim->State = HAL_TIM_STATE_READY;
 80061c6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80061c8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80061ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80061ce:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80061d2:	bd10      	pop	{r4, pc}
  switch (Channel)
 80061d4:	2a10      	cmp	r2, #16
 80061d6:	d013      	beq.n	8006200 <HAL_TIM_OC_ConfigChannel+0x60>
 80061d8:	2a14      	cmp	r2, #20
 80061da:	d015      	beq.n	8006208 <HAL_TIM_OC_ConfigChannel+0x68>
 80061dc:	2a0c      	cmp	r2, #12
 80061de:	d1f2      	bne.n	80061c6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061e0:	6820      	ldr	r0, [r4, #0]
 80061e2:	f7ff fd5f 	bl	8005ca4 <TIM_OC4_SetConfig>
      break;
 80061e6:	e7ee      	b.n	80061c6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061e8:	6820      	ldr	r0, [r4, #0]
 80061ea:	f7ff fccb 	bl	8005b84 <TIM_OC1_SetConfig>
      break;
 80061ee:	e7ea      	b.n	80061c6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061f0:	6820      	ldr	r0, [r4, #0]
 80061f2:	f7ff ff8f 	bl	8006114 <TIM_OC2_SetConfig>
      break;
 80061f6:	e7e6      	b.n	80061c6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061f8:	6820      	ldr	r0, [r4, #0]
 80061fa:	f7ff fd0f 	bl	8005c1c <TIM_OC3_SetConfig>
      break;
 80061fe:	e7e2      	b.n	80061c6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	f7ff fd83 	bl	8005d0c <TIM_OC5_SetConfig>
      break;
 8006206:	e7de      	b.n	80061c6 <HAL_TIM_OC_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006208:	6820      	ldr	r0, [r4, #0]
 800620a:	f7ff fdb3 	bl	8005d74 <TIM_OC6_SetConfig>
      break;
 800620e:	e7da      	b.n	80061c6 <HAL_TIM_OC_ConfigChannel+0x26>

08006210 <HAL_TIM_PWM_ConfigChannel>:
{
 8006210:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8006212:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006216:	2b01      	cmp	r3, #1
{
 8006218:	4604      	mov	r4, r0
 800621a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800621e:	d010      	beq.n	8006242 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006220:	2301      	movs	r3, #1
  switch (Channel)
 8006222:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8006224:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8006228:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 800622c:	d043      	beq.n	80062b6 <HAL_TIM_PWM_ConfigChannel+0xa6>
 800622e:	d809      	bhi.n	8006244 <HAL_TIM_PWM_ConfigChannel+0x34>
 8006230:	b1fa      	cbz	r2, 8006272 <HAL_TIM_PWM_ConfigChannel+0x62>
 8006232:	2a04      	cmp	r2, #4
 8006234:	d02e      	beq.n	8006294 <HAL_TIM_PWM_ConfigChannel+0x84>
  htim->State = HAL_TIM_STATE_READY;
 8006236:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8006238:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800623a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800623e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006242:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8006244:	2a10      	cmp	r2, #16
 8006246:	d047      	beq.n	80062d8 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8006248:	2a14      	cmp	r2, #20
 800624a:	d056      	beq.n	80062fa <HAL_TIM_PWM_ConfigChannel+0xea>
 800624c:	2a0c      	cmp	r2, #12
 800624e:	d1f2      	bne.n	8006236 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006250:	6820      	ldr	r0, [r4, #0]
 8006252:	f7ff fd27 	bl	8005ca4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006256:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006258:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006262:	69da      	ldr	r2, [r3, #28]
 8006264:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800626a:	69da      	ldr	r2, [r3, #28]
 800626c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006270:	e030      	b.n	80062d4 <HAL_TIM_PWM_ConfigChannel+0xc4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006272:	6820      	ldr	r0, [r4, #0]
 8006274:	f7ff fc86 	bl	8005b84 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006278:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800627a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	f042 0208 	orr.w	r2, r2, #8
 8006282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006284:	699a      	ldr	r2, [r3, #24]
 8006286:	f022 0204 	bic.w	r2, r2, #4
 800628a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800628c:	699a      	ldr	r2, [r3, #24]
 800628e:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006290:	619a      	str	r2, [r3, #24]
      break;
 8006292:	e7d0      	b.n	8006236 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006294:	6820      	ldr	r0, [r4, #0]
 8006296:	f7ff ff3d 	bl	8006114 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800629a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800629c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800629e:	699a      	ldr	r2, [r3, #24]
 80062a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80062b4:	e7ec      	b.n	8006290 <HAL_TIM_PWM_ConfigChannel+0x80>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	f7ff fcb0 	bl	8005c1c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062bc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062be:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062c0:	69da      	ldr	r2, [r3, #28]
 80062c2:	f042 0208 	orr.w	r2, r2, #8
 80062c6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062c8:	69da      	ldr	r2, [r3, #28]
 80062ca:	f022 0204 	bic.w	r2, r2, #4
 80062ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062d0:	69da      	ldr	r2, [r3, #28]
 80062d2:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062d4:	61da      	str	r2, [r3, #28]
      break;
 80062d6:	e7ae      	b.n	8006236 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80062d8:	6820      	ldr	r0, [r4, #0]
 80062da:	f7ff fd17 	bl	8005d0c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062de:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062e0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80062e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062e4:	f042 0208 	orr.w	r2, r2, #8
 80062e8:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062ec:	f022 0204 	bic.w	r2, r2, #4
 80062f0:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062f4:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062f8:	e79d      	b.n	8006236 <HAL_TIM_PWM_ConfigChannel+0x26>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062fa:	6820      	ldr	r0, [r4, #0]
 80062fc:	f7ff fd3a 	bl	8005d74 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006300:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006302:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006304:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800630a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800630c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800630e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006312:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006316:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800631a:	e7ec      	b.n	80062f6 <HAL_TIM_PWM_ConfigChannel+0xe6>

0800631c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800631c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800631e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006320:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006322:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006326:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800632a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800632c:	6083      	str	r3, [r0, #8]
 800632e:	bd10      	pop	{r4, pc}

08006330 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8006330:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006334:	2b01      	cmp	r3, #1
{
 8006336:	b570      	push	{r4, r5, r6, lr}
 8006338:	4604      	mov	r4, r0
 800633a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800633e:	d017      	beq.n	8006370 <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 8006340:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8006344:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8006346:	2301      	movs	r3, #1
 8006348:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800634c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800634e:	4b48      	ldr	r3, [pc, #288]	; (8006470 <HAL_TIM_ConfigClockSource+0x140>)
 8006350:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8006352:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8006354:	680b      	ldr	r3, [r1, #0]
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d072      	beq.n	8006440 <HAL_TIM_ConfigClockSource+0x110>
 800635a:	d815      	bhi.n	8006388 <HAL_TIM_ConfigClockSource+0x58>
 800635c:	2b10      	cmp	r3, #16
 800635e:	d00c      	beq.n	800637a <HAL_TIM_ConfigClockSource+0x4a>
 8006360:	d807      	bhi.n	8006372 <HAL_TIM_ConfigClockSource+0x42>
 8006362:	b153      	cbz	r3, 800637a <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8006364:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8006366:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006368:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800636c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8006370:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8006372:	2b20      	cmp	r3, #32
 8006374:	d001      	beq.n	800637a <HAL_TIM_ConfigClockSource+0x4a>
 8006376:	2b30      	cmp	r3, #48	; 0x30
 8006378:	d1f4      	bne.n	8006364 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 800637a:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800637c:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 8006380:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006384:	4313      	orrs	r3, r2
 8006386:	e033      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8006388:	2b70      	cmp	r3, #112	; 0x70
 800638a:	d033      	beq.n	80063f4 <HAL_TIM_ConfigClockSource+0xc4>
 800638c:	d81b      	bhi.n	80063c6 <HAL_TIM_ConfigClockSource+0x96>
 800638e:	2b50      	cmp	r3, #80	; 0x50
 8006390:	d03f      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0xe2>
 8006392:	2b60      	cmp	r3, #96	; 0x60
 8006394:	d1e6      	bne.n	8006364 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006396:	684d      	ldr	r5, [r1, #4]
 8006398:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800639a:	6a01      	ldr	r1, [r0, #32]
 800639c:	f021 0110 	bic.w	r1, r1, #16
 80063a0:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063a2:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80063a4:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a6:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80063ae:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063b2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80063b6:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80063b8:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80063ba:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80063bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063c0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80063c4:	e014      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 80063c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ca:	d00c      	beq.n	80063e6 <HAL_TIM_ConfigClockSource+0xb6>
 80063cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d0:	d1c8      	bne.n	8006364 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80063d2:	68cb      	ldr	r3, [r1, #12]
 80063d4:	684a      	ldr	r2, [r1, #4]
 80063d6:	6889      	ldr	r1, [r1, #8]
 80063d8:	f7ff ffa0 	bl	800631c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063dc:	6822      	ldr	r2, [r4, #0]
 80063de:	6893      	ldr	r3, [r2, #8]
 80063e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063e4:	e013      	b.n	800640e <HAL_TIM_ConfigClockSource+0xde>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80063e6:	6883      	ldr	r3, [r0, #8]
 80063e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063ec:	f023 0307 	bic.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80063f0:	6083      	str	r3, [r0, #8]
 80063f2:	e7b7      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80063f4:	68cb      	ldr	r3, [r1, #12]
 80063f6:	684a      	ldr	r2, [r1, #4]
 80063f8:	6889      	ldr	r1, [r1, #8]
 80063fa:	f7ff ff8f 	bl	800631c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063fe:	6822      	ldr	r2, [r4, #0]
 8006400:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006406:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800640a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800640e:	6093      	str	r3, [r2, #8]
      break;
 8006410:	e7a8      	b.n	8006364 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006412:	684a      	ldr	r2, [r1, #4]
 8006414:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006416:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006418:	6a05      	ldr	r5, [r0, #32]
 800641a:	f025 0501 	bic.w	r5, r5, #1
 800641e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006420:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006422:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006426:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800642a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800642e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8006430:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006432:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006434:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800643a:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 800643e:	e7d7      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006440:	684a      	ldr	r2, [r1, #4]
 8006442:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8006444:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006446:	6a05      	ldr	r5, [r0, #32]
 8006448:	f025 0501 	bic.w	r5, r5, #1
 800644c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006450:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006454:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006458:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800645c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800645e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8006460:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8006462:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8006464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006468:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800646c:	e7c0      	b.n	80063f0 <HAL_TIM_ConfigClockSource+0xc0>
 800646e:	bf00      	nop
 8006470:	fffe0088 	.word	0xfffe0088

08006474 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006474:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006476:	f001 011f 	and.w	r1, r1, #31
{
 800647a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800647c:	2401      	movs	r4, #1
 800647e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8006480:	ea23 0304 	bic.w	r3, r3, r4
 8006484:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006486:	6a03      	ldr	r3, [r0, #32]
 8006488:	408a      	lsls	r2, r1
 800648a:	431a      	orrs	r2, r3
 800648c:	6202      	str	r2, [r0, #32]
 800648e:	bd10      	pop	{r4, pc}

08006490 <HAL_TIM_PWM_Start>:
{
 8006490:	b510      	push	{r4, lr}
 8006492:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006494:	2201      	movs	r2, #1
 8006496:	6800      	ldr	r0, [r0, #0]
 8006498:	f7ff ffec 	bl	8006474 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	4a14      	ldr	r2, [pc, #80]	; (80064f0 <HAL_TIM_PWM_Start+0x60>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d01f      	beq.n	80064e4 <HAL_TIM_PWM_Start+0x54>
 80064a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d01b      	beq.n	80064e4 <HAL_TIM_PWM_Start+0x54>
 80064ac:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d017      	beq.n	80064e4 <HAL_TIM_PWM_Start+0x54>
 80064b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d013      	beq.n	80064e4 <HAL_TIM_PWM_Start+0x54>
 80064bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00f      	beq.n	80064e4 <HAL_TIM_PWM_Start+0x54>
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80064c4:	6899      	ldr	r1, [r3, #8]
 80064c6:	480b      	ldr	r0, [pc, #44]	; (80064f4 <HAL_TIM_PWM_Start+0x64>)
 80064c8:	4001      	ands	r1, r0
 80064ca:	2906      	cmp	r1, #6
 80064cc:	d008      	beq.n	80064e0 <HAL_TIM_PWM_Start+0x50>
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	4002      	ands	r2, r0
 80064d2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80064d6:	d003      	beq.n	80064e0 <HAL_TIM_PWM_Start+0x50>
    __HAL_TIM_ENABLE(htim);
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]
}
 80064e0:	2000      	movs	r0, #0
 80064e2:	bd10      	pop	{r4, pc}
    __HAL_TIM_MOE_ENABLE(htim);
 80064e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ea:	645a      	str	r2, [r3, #68]	; 0x44
 80064ec:	e7ea      	b.n	80064c4 <HAL_TIM_PWM_Start+0x34>
 80064ee:	bf00      	nop
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	00010007 	.word	0x00010007

080064f8 <HAL_TIM_OC_Start>:
 80064f8:	f7ff bfca 	b.w	8006490 <HAL_TIM_PWM_Start>

080064fc <HAL_TIM_PWM_Stop>:
{
 80064fc:	b510      	push	{r4, lr}
 80064fe:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006500:	2200      	movs	r2, #0
 8006502:	6800      	ldr	r0, [r0, #0]
 8006504:	f7ff ffb6 	bl	8006474 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006508:	6823      	ldr	r3, [r4, #0]
 800650a:	4a1a      	ldr	r2, [pc, #104]	; (8006574 <HAL_TIM_PWM_Stop+0x78>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d00f      	beq.n	8006530 <HAL_TIM_PWM_Stop+0x34>
 8006510:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006514:	4293      	cmp	r3, r2
 8006516:	d00b      	beq.n	8006530 <HAL_TIM_PWM_Stop+0x34>
 8006518:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800651c:	4293      	cmp	r3, r2
 800651e:	d007      	beq.n	8006530 <HAL_TIM_PWM_Stop+0x34>
 8006520:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006524:	4293      	cmp	r3, r2
 8006526:	d003      	beq.n	8006530 <HAL_TIM_PWM_Stop+0x34>
 8006528:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800652c:	4293      	cmp	r3, r2
 800652e:	d10d      	bne.n	800654c <HAL_TIM_PWM_Stop+0x50>
    __HAL_TIM_MOE_DISABLE(htim);
 8006530:	6a19      	ldr	r1, [r3, #32]
 8006532:	f241 1211 	movw	r2, #4369	; 0x1111
 8006536:	4211      	tst	r1, r2
 8006538:	d108      	bne.n	800654c <HAL_TIM_PWM_Stop+0x50>
 800653a:	6a19      	ldr	r1, [r3, #32]
 800653c:	f240 4244 	movw	r2, #1092	; 0x444
 8006540:	4211      	tst	r1, r2
 8006542:	bf02      	ittt	eq
 8006544:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8006546:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800654a:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800654c:	6a19      	ldr	r1, [r3, #32]
 800654e:	f241 1211 	movw	r2, #4369	; 0x1111
 8006552:	4211      	tst	r1, r2
 8006554:	d108      	bne.n	8006568 <HAL_TIM_PWM_Stop+0x6c>
 8006556:	6a19      	ldr	r1, [r3, #32]
 8006558:	f240 4244 	movw	r2, #1092	; 0x444
 800655c:	4211      	tst	r1, r2
 800655e:	d103      	bne.n	8006568 <HAL_TIM_PWM_Stop+0x6c>
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	f022 0201 	bic.w	r2, r2, #1
 8006566:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8006568:	2301      	movs	r3, #1
 800656a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800656e:	2000      	movs	r0, #0
 8006570:	bd10      	pop	{r4, pc}
 8006572:	bf00      	nop
 8006574:	40012c00 	.word	0x40012c00

08006578 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006578:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800657c:	2b01      	cmp	r3, #1
{
 800657e:	b530      	push	{r4, r5, lr}
 8006580:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8006584:	d01f      	beq.n	80065c6 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006586:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006588:	4d10      	ldr	r5, [pc, #64]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0x54>)
  htim->State = HAL_TIM_STATE_BUSY;
 800658a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800658e:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8006590:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8006592:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006594:	d003      	beq.n	800659e <HAL_TIMEx_MasterConfigSynchronization+0x26>
 8006596:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800659a:	42aa      	cmp	r2, r5
 800659c:	d103      	bne.n	80065a6 <HAL_TIMEx_MasterConfigSynchronization+0x2e>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800659e:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80065a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80065a4:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065a6:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065a8:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80065aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80065ae:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80065b0:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80065b4:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065b6:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065b8:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 80065ba:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80065bc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065c0:	2300      	movs	r3, #0
 80065c2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80065c6:	4618      	mov	r0, r3

  return HAL_OK;
}
 80065c8:	bd30      	pop	{r4, r5, pc}
 80065ca:	bf00      	nop
 80065cc:	40012c00 	.word	0x40012c00

080065d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80065d4:	2b01      	cmp	r3, #1
{
 80065d6:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80065d8:	d038      	beq.n	800664c <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065da:	68cb      	ldr	r3, [r1, #12]
 80065dc:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80065de:	4c1c      	ldr	r4, [pc, #112]	; (8006650 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065e4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065e6:	684a      	ldr	r2, [r1, #4]
 80065e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ec:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065ee:	680a      	ldr	r2, [r1, #0]
 80065f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065f4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065f6:	690a      	ldr	r2, [r1, #16]
 80065f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065fc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065fe:	694a      	ldr	r2, [r1, #20]
 8006600:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006604:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006606:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8006608:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800660c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800660e:	698a      	ldr	r2, [r1, #24]
 8006610:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8006614:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006618:	6802      	ldr	r2, [r0, #0]
 800661a:	42a2      	cmp	r2, r4
 800661c:	d003      	beq.n	8006626 <HAL_TIMEx_ConfigBreakDeadTime+0x56>
 800661e:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8006622:	42a2      	cmp	r2, r4
 8006624:	d10c      	bne.n	8006640 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006626:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8006628:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800662c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006630:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006632:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006634:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006638:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800663a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800663e:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006640:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006642:	2300      	movs	r3, #0
 8006644:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8006648:	4618      	mov	r0, r3
 800664a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 800664c:	2002      	movs	r0, #2
}
 800664e:	bd10      	pop	{r4, pc}
 8006650:	40012c00 	.word	0x40012c00

08006654 <HAL_TIMEx_CommutationCallback>:
 8006654:	4770      	bx	lr

08006656 <HAL_TIMEx_BreakCallback>:
 8006656:	4770      	bx	lr

08006658 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006658:	4770      	bx	lr

0800665a <UART_EndRxTransfer>:
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800665a:	6803      	ldr	r3, [r0, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006662:	601a      	str	r2, [r3, #0]
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	f022 0201 	bic.w	r2, r2, #1
 800666a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800666c:	2320      	movs	r3, #32
 800666e:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006672:	2300      	movs	r3, #0
 8006674:	6703      	str	r3, [r0, #112]	; 0x70
 8006676:	4770      	bx	lr

08006678 <HAL_UART_Transmit_DMA>:
{
 8006678:	b538      	push	{r3, r4, r5, lr}
 800667a:	4604      	mov	r4, r0
 800667c:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800667e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006682:	2a20      	cmp	r2, #32
 8006684:	d12c      	bne.n	80066e0 <HAL_UART_Transmit_DMA+0x68>
    if((pData == NULL ) || (Size == 0U))
 8006686:	b349      	cbz	r1, 80066dc <HAL_UART_Transmit_DMA+0x64>
 8006688:	b343      	cbz	r3, 80066dc <HAL_UART_Transmit_DMA+0x64>
    __HAL_LOCK(huart);
 800668a:	f894 2080 	ldrb.w	r2, [r4, #128]	; 0x80
 800668e:	2a01      	cmp	r2, #1
 8006690:	d026      	beq.n	80066e0 <HAL_UART_Transmit_DMA+0x68>
 8006692:	2201      	movs	r2, #1
 8006694:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006698:	6fa0      	ldr	r0, [r4, #120]	; 0x78
    huart->TxXferCount = Size;
 800669a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669e:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066a0:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066a6:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066aa:	4a0e      	ldr	r2, [pc, #56]	; (80066e4 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize  = Size;
 80066ac:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    huart->pTxBuffPtr  = pData;
 80066b0:	6521      	str	r1, [r4, #80]	; 0x50
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066b2:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066b4:	4a0c      	ldr	r2, [pc, #48]	; (80066e8 <HAL_UART_Transmit_DMA+0x70>)
 80066b6:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066b8:	4a0c      	ldr	r2, [pc, #48]	; (80066ec <HAL_UART_Transmit_DMA+0x74>)
 80066ba:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80066bc:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 80066be:	6385      	str	r5, [r0, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 80066c0:	3228      	adds	r2, #40	; 0x28
 80066c2:	f7fb faef 	bl	8001ca4 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	2240      	movs	r2, #64	; 0x40
 80066ca:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066cc:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 80066ce:	f884 5080 	strb.w	r5, [r4, #128]	; 0x80
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80066d6:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 80066d8:	4628      	mov	r0, r5
 80066da:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 80066dc:	2001      	movs	r0, #1
 80066de:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 80066e0:	2002      	movs	r0, #2
}
 80066e2:	bd38      	pop	{r3, r4, r5, pc}
 80066e4:	080066f3 	.word	0x080066f3
 80066e8:	08006723 	.word	0x08006723
 80066ec:	0800672f 	.word	0x0800672f

080066f0 <HAL_UART_TxCpltCallback>:
 80066f0:	4770      	bx	lr

080066f2 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80066f2:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80066f4:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80066f6:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f013 0320 	ands.w	r3, r3, #32
 80066fe:	d10b      	bne.n	8006718 <UART_DMATransmitCplt+0x26>
  {  
    huart->TxXferCount = 0U;
 8006700:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
    
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006704:	6813      	ldr	r3, [r2, #0]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800670c:	609a      	str	r2, [r3, #8]
    
    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8006718:	4610      	mov	r0, r2
 800671a:	f7ff ffe9 	bl	80066f0 <HAL_UART_TxCpltCallback>
 800671e:	bd08      	pop	{r3, pc}

08006720 <HAL_UART_TxHalfCpltCallback>:
 8006720:	4770      	bx	lr

08006722 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006722:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  HAL_UART_TxHalfCpltCallback(huart);
 8006724:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006726:	f7ff fffb 	bl	8006720 <HAL_UART_TxHalfCpltCallback>
 800672a:	bd08      	pop	{r3, pc}

0800672c <HAL_UART_ErrorCallback>:
 800672c:	4770      	bx	lr

0800672e <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800672e:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
 8006730:	b508      	push	{r3, lr}
  
  /* Stop UART DMA Tx request if ongoing */
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006732:	f891 3081 	ldrb.w	r3, [r1, #129]	; 0x81
 8006736:	2b21      	cmp	r3, #33	; 0x21
 8006738:	d10d      	bne.n	8006756 <UART_DMAError+0x28>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800673a:	680b      	ldr	r3, [r1, #0]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	0612      	lsls	r2, r2, #24
 8006740:	d509      	bpl.n	8006756 <UART_DMAError+0x28>
  {
    huart->TxXferCount = 0U;
 8006742:	2200      	movs	r2, #0
 8006744:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800674e:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006750:	2320      	movs	r3, #32
 8006752:	f881 3081 	strb.w	r3, [r1, #129]	; 0x81
    UART_EndTxTransfer(huart);
  }
  
  /* Stop UART DMA Rx request if ongoing */
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006756:	f891 3082 	ldrb.w	r3, [r1, #130]	; 0x82
 800675a:	2b22      	cmp	r3, #34	; 0x22
 800675c:	d109      	bne.n	8006772 <UART_DMAError+0x44>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 800675e:	680b      	ldr	r3, [r1, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	065b      	lsls	r3, r3, #25
 8006764:	d505      	bpl.n	8006772 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
 8006766:	2300      	movs	r3, #0
 8006768:	f8a1 305e 	strh.w	r3, [r1, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800676c:	4608      	mov	r0, r1
 800676e:	f7ff ff74 	bl	800665a <UART_EndRxTransfer>
  }
  
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006772:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
 8006776:	f043 0310 	orr.w	r3, r3, #16
 800677a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
  HAL_UART_ErrorCallback(huart);
 800677e:	4608      	mov	r0, r1
 8006780:	f7ff ffd4 	bl	800672c <HAL_UART_ErrorCallback>
 8006784:	bd08      	pop	{r3, pc}
	...

08006788 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006788:	6802      	ldr	r2, [r0, #0]
 800678a:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800678c:	6811      	ldr	r1, [r2, #0]
{
 800678e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8006790:	071d      	lsls	r5, r3, #28
{
 8006792:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006794:	6890      	ldr	r0, [r2, #8]
  if (errorflags == RESET)
 8006796:	d10b      	bne.n	80067b0 <HAL_UART_IRQHandler+0x28>
    if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 8006798:	069e      	lsls	r6, r3, #26
 800679a:	d577      	bpl.n	800688c <HAL_UART_IRQHandler+0x104>
       && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 800679c:	068d      	lsls	r5, r1, #26
 800679e:	d401      	bmi.n	80067a4 <HAL_UART_IRQHandler+0x1c>
           || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 80067a0:	00c6      	lsls	r6, r0, #3
 80067a2:	d573      	bpl.n	800688c <HAL_UART_IRQHandler+0x104>
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 80067a4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 80ac 	beq.w	8006904 <HAL_UART_IRQHandler+0x17c>
 80067ac:	4620      	mov	r0, r4
 80067ae:	e061      	b.n	8006874 <HAL_UART_IRQHandler+0xec>
     && (   (((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 80067b0:	4e55      	ldr	r6, [pc, #340]	; (8006908 <HAL_UART_IRQHandler+0x180>)
 80067b2:	4006      	ands	r6, r0
 80067b4:	d102      	bne.n	80067bc <HAL_UART_IRQHandler+0x34>
         ||  ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != RESET))) )
 80067b6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80067ba:	d067      	beq.n	800688c <HAL_UART_IRQHandler+0x104>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067bc:	07dd      	lsls	r5, r3, #31
 80067be:	d509      	bpl.n	80067d4 <HAL_UART_IRQHandler+0x4c>
 80067c0:	05cd      	lsls	r5, r1, #23
 80067c2:	d507      	bpl.n	80067d4 <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067c4:	2501      	movs	r5, #1
 80067c6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067c8:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80067cc:	f045 0501 	orr.w	r5, r5, #1
 80067d0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067d4:	079d      	lsls	r5, r3, #30
 80067d6:	d509      	bpl.n	80067ec <HAL_UART_IRQHandler+0x64>
 80067d8:	07c5      	lsls	r5, r0, #31
 80067da:	d507      	bpl.n	80067ec <HAL_UART_IRQHandler+0x64>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067dc:	2502      	movs	r5, #2
 80067de:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067e0:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80067e4:	f045 0504 	orr.w	r5, r5, #4
 80067e8:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ec:	075d      	lsls	r5, r3, #29
 80067ee:	d509      	bpl.n	8006804 <HAL_UART_IRQHandler+0x7c>
 80067f0:	07c5      	lsls	r5, r0, #31
 80067f2:	d507      	bpl.n	8006804 <HAL_UART_IRQHandler+0x7c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80067f4:	2504      	movs	r5, #4
 80067f6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067f8:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 80067fc:	f045 0502 	orr.w	r5, r5, #2
 8006800:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 8006804:	071d      	lsls	r5, r3, #28
 8006806:	d509      	bpl.n	800681c <HAL_UART_IRQHandler+0x94>
       &&(  ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET) ||
 8006808:	068d      	lsls	r5, r1, #26
 800680a:	d400      	bmi.n	800680e <HAL_UART_IRQHandler+0x86>
 800680c:	b136      	cbz	r6, 800681c <HAL_UART_IRQHandler+0x94>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800680e:	2508      	movs	r5, #8
 8006810:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006812:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006816:	432a      	orrs	r2, r5
 8006818:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800681c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8006820:	2a00      	cmp	r2, #0
 8006822:	d06f      	beq.n	8006904 <HAL_UART_IRQHandler+0x17c>
      if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET) 
 8006824:	069e      	lsls	r6, r3, #26
 8006826:	d507      	bpl.n	8006838 <HAL_UART_IRQHandler+0xb0>
         && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8006828:	068d      	lsls	r5, r1, #26
 800682a:	d401      	bmi.n	8006830 <HAL_UART_IRQHandler+0xa8>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 800682c:	00c0      	lsls	r0, r0, #3
 800682e:	d503      	bpl.n	8006838 <HAL_UART_IRQHandler+0xb0>
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8006830:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006832:	b10b      	cbz	r3, 8006838 <HAL_UART_IRQHandler+0xb0>
 8006834:	4620      	mov	r0, r4
 8006836:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006838:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800683c:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 800683e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006840:	d404      	bmi.n	800684c <HAL_UART_IRQHandler+0xc4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8006846:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800684a:	d01a      	beq.n	8006882 <HAL_UART_IRQHandler+0xfa>
        UART_EndRxTransfer(huart);
 800684c:	f7ff ff05 	bl	800665a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	689a      	ldr	r2, [r3, #8]
 8006854:	0652      	lsls	r2, r2, #25
 8006856:	d510      	bpl.n	800687a <HAL_UART_IRQHandler+0xf2>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006858:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800685a:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800685c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006860:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8006862:	b150      	cbz	r0, 800687a <HAL_UART_IRQHandler+0xf2>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006864:	4b29      	ldr	r3, [pc, #164]	; (800690c <HAL_UART_IRQHandler+0x184>)
 8006866:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006868:	f7fb fa5e 	bl	8001d28 <HAL_DMA_Abort_IT>
 800686c:	2800      	cmp	r0, #0
 800686e:	d049      	beq.n	8006904 <HAL_UART_IRQHandler+0x17c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006870:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8006872:	6b83      	ldr	r3, [r0, #56]	; 0x38
}
 8006874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006878:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800687a:	4620      	mov	r0, r4
 800687c:	f7ff ff56 	bl	800672c <HAL_UART_ErrorCallback>
 8006880:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8006882:	f7ff ff53 	bl	800672c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006886:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 800688a:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 800688c:	02de      	lsls	r6, r3, #11
 800688e:	d50e      	bpl.n	80068ae <HAL_UART_IRQHandler+0x126>
 8006890:	0245      	lsls	r5, r0, #9
 8006892:	d50c      	bpl.n	80068ae <HAL_UART_IRQHandler+0x126>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006894:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006898:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 800689a:	2320      	movs	r3, #32
 800689c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    HAL_UARTEx_WakeupCallback(huart);
 80068a0:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80068a2:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
}
 80068a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80068aa:	f000 bb63 	b.w	8006f74 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE_TXFNF) != RESET) 
 80068ae:	061e      	lsls	r6, r3, #24
 80068b0:	d505      	bpl.n	80068be <HAL_UART_IRQHandler+0x136>
     && (   ((cr1its & USART_CR1_TXEIE_TXFNFIE) != RESET)
 80068b2:	060d      	lsls	r5, r1, #24
 80068b4:	d401      	bmi.n	80068ba <HAL_UART_IRQHandler+0x132>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 80068b6:	0200      	lsls	r0, r0, #8
 80068b8:	d501      	bpl.n	80068be <HAL_UART_IRQHandler+0x136>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 80068ba:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80068bc:	e773      	b.n	80067a6 <HAL_UART_IRQHandler+0x1e>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068be:	065e      	lsls	r6, r3, #25
 80068c0:	d50e      	bpl.n	80068e0 <HAL_UART_IRQHandler+0x158>
 80068c2:	064d      	lsls	r5, r1, #25
 80068c4:	d50c      	bpl.n	80068e0 <HAL_UART_IRQHandler+0x158>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80068c6:	6813      	ldr	r3, [r2, #0]
 80068c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068cc:	6013      	str	r3, [r2, #0]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068ce:	2320      	movs	r3, #32
 80068d0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  
  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068d4:	2300      	movs	r3, #0
 80068d6:	6763      	str	r3, [r4, #116]	; 0x74
  
  HAL_UART_TxCpltCallback(huart);
 80068d8:	4620      	mov	r0, r4
 80068da:	f7ff ff09 	bl	80066f0 <HAL_UART_TxCpltCallback>
 80068de:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 80068e0:	0218      	lsls	r0, r3, #8
 80068e2:	d506      	bpl.n	80068f2 <HAL_UART_IRQHandler+0x16a>
 80068e4:	004a      	lsls	r2, r1, #1
 80068e6:	d504      	bpl.n	80068f2 <HAL_UART_IRQHandler+0x16a>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068e8:	4620      	mov	r0, r4
}
 80068ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80068ee:	f000 bb43 	b.w	8006f78 <HAL_UARTEx_TxFifoEmptyCallback>
  if(((isrflags & USART_ISR_RXFF) != RESET) && ((cr1its & USART_CR1_RXFFIE) != RESET))
 80068f2:	01db      	lsls	r3, r3, #7
 80068f4:	d506      	bpl.n	8006904 <HAL_UART_IRQHandler+0x17c>
 80068f6:	2900      	cmp	r1, #0
 80068f8:	da04      	bge.n	8006904 <HAL_UART_IRQHandler+0x17c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80068fa:	4620      	mov	r0, r4
}
 80068fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006900:	f000 bb39 	b.w	8006f76 <HAL_UARTEx_RxFifoFullCallback>
 8006904:	bd70      	pop	{r4, r5, r6, pc}
 8006906:	bf00      	nop
 8006908:	10000001 	.word	0x10000001
 800690c:	08006911 	.word	0x08006911

08006910 <UART_DMAAbortOnError>:
{
 8006910:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8006912:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800691a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800691e:	f7ff ff05 	bl	800672c <HAL_UART_ErrorCallback>
 8006922:	bd08      	pop	{r3, pc}

08006924 <UART_SetConfig>:
  if(UART_INSTANCE_LOWPOWER(huart))
 8006924:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006926:	69c1      	ldr	r1, [r0, #28]
 8006928:	6882      	ldr	r2, [r0, #8]
{
 800692a:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800692e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006930:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006932:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006934:	4302      	orrs	r2, r0
 8006936:	6960      	ldr	r0, [r4, #20]
 8006938:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800693a:	48bd      	ldr	r0, [pc, #756]	; (8006c30 <UART_SetConfig+0x30c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800693c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800693e:	4028      	ands	r0, r5
 8006940:	4302      	orrs	r2, r0
 8006942:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	68e0      	ldr	r0, [r4, #12]
 8006948:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800694c:	4302      	orrs	r2, r0
 800694e:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006950:	4ab8      	ldr	r2, [pc, #736]	; (8006c34 <UART_SetConfig+0x310>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006952:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006954:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 8006956:	bf1c      	itt	ne
 8006958:	6a22      	ldrne	r2, [r4, #32]
 800695a:	4310      	orrne	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	f022 426e 	bic.w	r2, r2, #3992977408	; 0xee000000
 8006962:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8006966:	4302      	orrs	r2, r0
 8006968:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800696a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800696c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800696e:	f020 000f 	bic.w	r0, r0, #15
 8006972:	4310      	orrs	r0, r2
 8006974:	62d8      	str	r0, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006976:	48b0      	ldr	r0, [pc, #704]	; (8006c38 <UART_SetConfig+0x314>)
 8006978:	4283      	cmp	r3, r0
 800697a:	d117      	bne.n	80069ac <UART_SetConfig+0x88>
 800697c:	4baf      	ldr	r3, [pc, #700]	; (8006c3c <UART_SetConfig+0x318>)
 800697e:	48b0      	ldr	r0, [pc, #704]	; (8006c40 <UART_SetConfig+0x31c>)
 8006980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006984:	f003 0303 	and.w	r3, r3, #3
 8006988:	5cc3      	ldrb	r3, [r0, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800698a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800698e:	f040 81a7 	bne.w	8006ce0 <UART_SetConfig+0x3bc>
    switch (clocksource)
 8006992:	2b08      	cmp	r3, #8
 8006994:	d849      	bhi.n	8006a2a <UART_SetConfig+0x106>
 8006996:	e8df f013 	tbh	[pc, r3, lsl #1]
 800699a:	017f      	.short	0x017f
 800699c:	016800d0 	.word	0x016800d0
 80069a0:	01780048 	.word	0x01780048
 80069a4:	00480048 	.word	0x00480048
 80069a8:	002d0048 	.word	0x002d0048
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ac:	48a5      	ldr	r0, [pc, #660]	; (8006c44 <UART_SetConfig+0x320>)
 80069ae:	4283      	cmp	r3, r0
 80069b0:	d106      	bne.n	80069c0 <UART_SetConfig+0x9c>
 80069b2:	4ba2      	ldr	r3, [pc, #648]	; (8006c3c <UART_SetConfig+0x318>)
 80069b4:	48a4      	ldr	r0, [pc, #656]	; (8006c48 <UART_SetConfig+0x324>)
 80069b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069ba:	f003 030c 	and.w	r3, r3, #12
 80069be:	e7e3      	b.n	8006988 <UART_SetConfig+0x64>
 80069c0:	48a2      	ldr	r0, [pc, #648]	; (8006c4c <UART_SetConfig+0x328>)
 80069c2:	4283      	cmp	r3, r0
 80069c4:	d11d      	bne.n	8006a02 <UART_SetConfig+0xde>
 80069c6:	4b9d      	ldr	r3, [pc, #628]	; (8006c3c <UART_SetConfig+0x318>)
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80069d0:	2b10      	cmp	r3, #16
 80069d2:	f000 8157 	beq.w	8006c84 <UART_SetConfig+0x360>
 80069d6:	d804      	bhi.n	80069e2 <UART_SetConfig+0xbe>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	f000 8159 	beq.w	8006c90 <UART_SetConfig+0x36c>
 80069de:	2310      	movs	r3, #16
 80069e0:	e7d3      	b.n	800698a <UART_SetConfig+0x66>
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	f000 813e 	beq.w	8006c64 <UART_SetConfig+0x340>
 80069e8:	2b30      	cmp	r3, #48	; 0x30
 80069ea:	d1f8      	bne.n	80069de <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069ec:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80069f0:	f040 80d0 	bne.w	8006b94 <UART_SetConfig+0x270>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069f4:	4b96      	ldr	r3, [pc, #600]	; (8006c50 <UART_SetConfig+0x32c>)
 80069f6:	6861      	ldr	r1, [r4, #4]
 80069f8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80069fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006a00:	e138      	b.n	8006c74 <UART_SetConfig+0x350>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a02:	4894      	ldr	r0, [pc, #592]	; (8006c54 <UART_SetConfig+0x330>)
 8006a04:	4283      	cmp	r3, r0
 8006a06:	d12d      	bne.n	8006a64 <UART_SetConfig+0x140>
 8006a08:	f500 30e2 	add.w	r0, r0, #115712	; 0x1c400
 8006a0c:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006a10:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8006a14:	2840      	cmp	r0, #64	; 0x40
 8006a16:	f000 80fd 	beq.w	8006c14 <UART_SetConfig+0x2f0>
 8006a1a:	d812      	bhi.n	8006a42 <UART_SetConfig+0x11e>
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	f000 80c0 	beq.w	8006ba2 <UART_SetConfig+0x27e>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006a22:	4884      	ldr	r0, [pc, #528]	; (8006c34 <UART_SetConfig+0x310>)
 8006a24:	4283      	cmp	r3, r0
 8006a26:	f040 8156 	bne.w	8006cd6 <UART_SetConfig+0x3b2>
      ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
  huart->NbTxDataToProcess = 1;
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  huart->NbRxDataToProcess = 1;
 8006a32:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
  huart->RxISR = NULL;
 8006a36:	2200      	movs	r2, #0
 8006a38:	6722      	str	r2, [r4, #112]	; 0x70
  huart->TxISR = NULL;
 8006a3a:	6762      	str	r2, [r4, #116]	; 0x74
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a42:	2880      	cmp	r0, #128	; 0x80
 8006a44:	f000 80bb 	beq.w	8006bbe <UART_SetConfig+0x29a>
 8006a48:	28c0      	cmp	r0, #192	; 0xc0
 8006a4a:	d1ea      	bne.n	8006a22 <UART_SetConfig+0xfe>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006a4c:	4879      	ldr	r0, [pc, #484]	; (8006c34 <UART_SetConfig+0x310>)
 8006a4e:	4283      	cmp	r3, r0
 8006a50:	d1cc      	bne.n	80069ec <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a52:	4b7f      	ldr	r3, [pc, #508]	; (8006c50 <UART_SetConfig+0x32c>)
 8006a54:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006a58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
      break;
 8006a5c:	2208      	movs	r2, #8
      lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006a5e:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 8006a62:	e0aa      	b.n	8006bba <UART_SetConfig+0x296>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a64:	487c      	ldr	r0, [pc, #496]	; (8006c58 <UART_SetConfig+0x334>)
 8006a66:	4283      	cmp	r3, r0
 8006a68:	d111      	bne.n	8006a8e <UART_SetConfig+0x16a>
 8006a6a:	f500 30e0 	add.w	r0, r0, #114688	; 0x1c000
 8006a6e:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006a72:	f400 7040 	and.w	r0, r0, #768	; 0x300
 8006a76:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006a7a:	f000 80cb 	beq.w	8006c14 <UART_SetConfig+0x2f0>
 8006a7e:	d9cd      	bls.n	8006a1c <UART_SetConfig+0xf8>
 8006a80:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006a84:	f000 809b 	beq.w	8006bbe <UART_SetConfig+0x29a>
 8006a88:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8006a8c:	e7dd      	b.n	8006a4a <UART_SetConfig+0x126>
 8006a8e:	4869      	ldr	r0, [pc, #420]	; (8006c34 <UART_SetConfig+0x310>)
 8006a90:	4283      	cmp	r3, r0
 8006a92:	d1a4      	bne.n	80069de <UART_SetConfig+0xba>
 8006a94:	f500 30c8 	add.w	r0, r0, #102400	; 0x19000
 8006a98:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8006a9c:	f400 6040 	and.w	r0, r0, #3072	; 0xc00
 8006aa0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006aa4:	f000 80b6 	beq.w	8006c14 <UART_SetConfig+0x2f0>
 8006aa8:	d9b8      	bls.n	8006a1c <UART_SetConfig+0xf8>
 8006aaa:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8006aae:	f000 8086 	beq.w	8006bbe <UART_SetConfig+0x29a>
 8006ab2:	f5b0 6f40 	cmp.w	r0, #3072	; 0xc00
 8006ab6:	e7c8      	b.n	8006a4a <UART_SetConfig+0x126>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ab8:	f7fd fdc8 	bl	800464c <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006abc:	4b64      	ldr	r3, [pc, #400]	; (8006c50 <UART_SetConfig+0x32c>)
 8006abe:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ac0:	6865      	ldr	r5, [r4, #4]
 8006ac2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	e005      	b.n	8006ad6 <UART_SetConfig+0x1b2>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006aca:	4b61      	ldr	r3, [pc, #388]	; (8006c50 <UART_SetConfig+0x32c>)
 8006acc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006ace:	4863      	ldr	r0, [pc, #396]	; (8006c5c <UART_SetConfig+0x338>)
 8006ad0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8006ad4:	2300      	movs	r3, #0
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	f7fa f8e2 	bl	8000ca0 <__aeabi_uldivmod>
 8006adc:	020f      	lsls	r7, r1, #8
 8006ade:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8006ae2:	0206      	lsls	r6, r0, #8
 8006ae4:	0868      	lsrs	r0, r5, #1
 8006ae6:	eb16 0b00 	adds.w	fp, r6, r0
 8006aea:	f147 0c00 	adc.w	ip, r7, #0
 8006aee:	462a      	mov	r2, r5
 8006af0:	2300      	movs	r3, #0
 8006af2:	4658      	mov	r0, fp
 8006af4:	4661      	mov	r1, ip
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006af6:	f7fa f8d3 	bl	8000ca0 <__aeabi_uldivmod>
          break;
 8006afa:	2300      	movs	r3, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006afc:	4a58      	ldr	r2, [pc, #352]	; (8006c60 <UART_SetConfig+0x33c>)
 8006afe:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8006b02:	4291      	cmp	r1, r2
 8006b04:	d891      	bhi.n	8006a2a <UART_SetConfig+0x106>
          huart->Instance->BRR = usartdiv;
 8006b06:	6822      	ldr	r2, [r4, #0]
 8006b08:	60d0      	str	r0, [r2, #12]
 8006b0a:	e78f      	b.n	8006a2c <UART_SetConfig+0x108>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b0c:	f7fd f9fe 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 8006b10:	e7d4      	b.n	8006abc <UART_SetConfig+0x198>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b12:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006b14:	4b4e      	ldr	r3, [pc, #312]	; (8006c50 <UART_SetConfig+0x32c>)
 8006b16:	0868      	lsrs	r0, r5, #1
 8006b18:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	462a      	mov	r2, r5
 8006b20:	f44f 7580 	mov.w	r5, #256	; 0x100
 8006b24:	f44f 4600 	mov.w	r6, #32768	; 0x8000
 8006b28:	fbb6 f6f3 	udiv	r6, r6, r3
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	fbe6 0105 	umlal	r0, r1, r6, r5
 8006b32:	e7e0      	b.n	8006af6 <UART_SetConfig+0x1d2>
          ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
  uint32_t usartdiv                   = 0x00000000U;
 8006b36:	2000      	movs	r0, #0
 8006b38:	e7e0      	b.n	8006afc <UART_SetConfig+0x1d8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b3a:	f7fd fd99 	bl	8004670 <HAL_RCC_GetPCLK2Freq>
 8006b3e:	e0ad      	b.n	8006c9c <UART_SetConfig+0x378>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b40:	f7fd fd84 	bl	800464c <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b44:	6862      	ldr	r2, [r4, #4]
 8006b46:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006b48:	4b41      	ldr	r3, [pc, #260]	; (8006c50 <UART_SetConfig+0x32c>)
 8006b4a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006b4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b52:	eb00 0052 	add.w	r0, r0, r2, lsr #1
 8006b56:	fbb0 f0f2 	udiv	r0, r0, r2
 8006b5a:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b5c:	f1a0 0210 	sub.w	r2, r0, #16
 8006b60:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006b64:	429a      	cmp	r2, r3
 8006b66:	f63f af60 	bhi.w	8006a2a <UART_SetConfig+0x106>
      huart->Instance->BRR = usartdiv;
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	60d8      	str	r0, [r3, #12]
 8006b6e:	e0b0      	b.n	8006cd2 <UART_SetConfig+0x3ae>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b70:	f7fd fd7e 	bl	8004670 <HAL_RCC_GetPCLK2Freq>
 8006b74:	e7e6      	b.n	8006b44 <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b76:	4936      	ldr	r1, [pc, #216]	; (8006c50 <UART_SetConfig+0x32c>)
 8006b78:	6863      	ldr	r3, [r4, #4]
 8006b7a:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006b7e:	4837      	ldr	r0, [pc, #220]	; (8006c5c <UART_SetConfig+0x338>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b80:	fbb0 f0f2 	udiv	r0, r0, r2
 8006b84:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006b88:	fbb0 f0f3 	udiv	r0, r0, r3
 8006b8c:	e7e5      	b.n	8006b5a <UART_SetConfig+0x236>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b8e:	f7fd f9bd 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 8006b92:	e7d7      	b.n	8006b44 <UART_SetConfig+0x220>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b94:	492e      	ldr	r1, [pc, #184]	; (8006c50 <UART_SetConfig+0x32c>)
 8006b96:	6863      	ldr	r3, [r4, #4]
 8006b98:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006b9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006ba0:	e7ee      	b.n	8006b80 <UART_SetConfig+0x25c>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006ba2:	4a24      	ldr	r2, [pc, #144]	; (8006c34 <UART_SetConfig+0x310>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d173      	bne.n	8006c90 <UART_SetConfig+0x36c>
      lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ba8:	f7fd fd50 	bl	800464c <HAL_RCC_GetPCLK1Freq>
 8006bac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006bae:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <UART_SetConfig+0x32c>)
 8006bb0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006bb4:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8006bb8:	2200      	movs	r2, #0
    if (lpuart_ker_ck_pres != 0U)
 8006bba:	b953      	cbnz	r3, 8006bd2 <UART_SetConfig+0x2ae>
 8006bbc:	e736      	b.n	8006a2c <UART_SetConfig+0x108>
  if(UART_INSTANCE_LOWPOWER(huart))
 8006bbe:	481d      	ldr	r0, [pc, #116]	; (8006c34 <UART_SetConfig+0x310>)
 8006bc0:	4283      	cmp	r3, r0
 8006bc2:	d14f      	bne.n	8006c64 <UART_SetConfig+0x340>
      lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bc4:	4b22      	ldr	r3, [pc, #136]	; (8006c50 <UART_SetConfig+0x32c>)
 8006bc6:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8006bca:	4b24      	ldr	r3, [pc, #144]	; (8006c5c <UART_SetConfig+0x338>)
 8006bcc:	fbb3 f3f0 	udiv	r3, r3, r0
 8006bd0:	2202      	movs	r2, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 8006bd2:	6865      	ldr	r5, [r4, #4]
 8006bd4:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8006bd8:	4299      	cmp	r1, r3
 8006bda:	f63f af26 	bhi.w	8006a2a <UART_SetConfig+0x106>
 8006bde:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006be2:	f63f af22 	bhi.w	8006a2a <UART_SetConfig+0x106>
        switch (clocksource)
 8006be6:	2a08      	cmp	r2, #8
 8006be8:	d8a4      	bhi.n	8006b34 <UART_SetConfig+0x210>
 8006bea:	a301      	add	r3, pc, #4	; (adr r3, 8006bf0 <UART_SetConfig+0x2cc>)
 8006bec:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8006bf0:	08006ab9 	.word	0x08006ab9
 8006bf4:	08006b35 	.word	0x08006b35
 8006bf8:	08006acb 	.word	0x08006acb
 8006bfc:	08006b35 	.word	0x08006b35
 8006c00:	08006b0d 	.word	0x08006b0d
 8006c04:	08006b35 	.word	0x08006b35
 8006c08:	08006b35 	.word	0x08006b35
 8006c0c:	08006b35 	.word	0x08006b35
 8006c10:	08006b13 	.word	0x08006b13
  if(UART_INSTANCE_LOWPOWER(huart))
 8006c14:	4a07      	ldr	r2, [pc, #28]	; (8006c34 <UART_SetConfig+0x310>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d134      	bne.n	8006c84 <UART_SetConfig+0x360>
      lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq()/UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c1a:	f7fd f977 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 8006c1e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006c20:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <UART_SetConfig+0x32c>)
 8006c22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006c26:	fbb0 f3f3 	udiv	r3, r0, r3
      break;
 8006c2a:	2204      	movs	r2, #4
 8006c2c:	e7c5      	b.n	8006bba <UART_SetConfig+0x296>
 8006c2e:	bf00      	nop
 8006c30:	cfff69f3 	.word	0xcfff69f3
 8006c34:	40008000 	.word	0x40008000
 8006c38:	40013800 	.word	0x40013800
 8006c3c:	40021000 	.word	0x40021000
 8006c40:	080243b8 	.word	0x080243b8
 8006c44:	40004400 	.word	0x40004400
 8006c48:	080243bc 	.word	0x080243bc
 8006c4c:	40004800 	.word	0x40004800
 8006c50:	080243ca 	.word	0x080243ca
 8006c54:	40004c00 	.word	0x40004c00
 8006c58:	40005000 	.word	0x40005000
 8006c5c:	00f42400 	.word	0x00f42400
 8006c60:	000ffcff 	.word	0x000ffcff
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c64:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006c68:	d185      	bne.n	8006b76 <UART_SetConfig+0x252>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c6a:	4b29      	ldr	r3, [pc, #164]	; (8006d10 <UART_SetConfig+0x3ec>)
 8006c6c:	6861      	ldr	r1, [r4, #4]
 8006c6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006c72:	4828      	ldr	r0, [pc, #160]	; (8006d14 <UART_SetConfig+0x3f0>)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c74:	fbb0 f3f3 	udiv	r3, r0, r3
 8006c78:	0848      	lsrs	r0, r1, #1
 8006c7a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006c7e:	fbb0 f0f1 	udiv	r0, r0, r1
 8006c82:	e017      	b.n	8006cb4 <UART_SetConfig+0x390>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c84:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006c88:	d181      	bne.n	8006b8e <UART_SetConfig+0x26a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c8a:	f7fd f93f 	bl	8003f0c <HAL_RCC_GetSysClockFreq>
 8006c8e:	e005      	b.n	8006c9c <UART_SetConfig+0x378>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c90:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006c94:	f47f af54 	bne.w	8006b40 <UART_SetConfig+0x21c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c98:	f7fd fcd8 	bl	800464c <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c9c:	6862      	ldr	r2, [r4, #4]
 8006c9e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006ca0:	4b1b      	ldr	r3, [pc, #108]	; (8006d10 <UART_SetConfig+0x3ec>)
 8006ca2:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8006ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006caa:	0850      	lsrs	r0, r2, #1
 8006cac:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8006cb0:	fbb0 f0f2 	udiv	r0, r0, r2
 8006cb4:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006cb6:	f1a0 0210 	sub.w	r2, r0, #16
 8006cba:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	f63f aeb3 	bhi.w	8006a2a <UART_SetConfig+0x106>
      brrtemp = usartdiv & 0xFFF0U;
 8006cc4:	f020 030f 	bic.w	r3, r0, #15
      huart->Instance->BRR = brrtemp;
 8006cc8:	6822      	ldr	r2, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006cca:	f3c0 0042 	ubfx	r0, r0, #1, #3
      huart->Instance->BRR = brrtemp;
 8006cce:	4318      	orrs	r0, r3
 8006cd0:	60d0      	str	r0, [r2, #12]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e6aa      	b.n	8006a2c <UART_SetConfig+0x108>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cd6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8006cda:	f43f aea6 	beq.w	8006a2a <UART_SetConfig+0x106>
 8006cde:	2310      	movs	r3, #16
    switch (clocksource)
 8006ce0:	2b08      	cmp	r3, #8
 8006ce2:	f63f aea2 	bhi.w	8006a2a <UART_SetConfig+0x106>
 8006ce6:	a101      	add	r1, pc, #4	; (adr r1, 8006cec <UART_SetConfig+0x3c8>)
 8006ce8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cec:	08006b41 	.word	0x08006b41
 8006cf0:	08006b71 	.word	0x08006b71
 8006cf4:	08006b77 	.word	0x08006b77
 8006cf8:	08006a2b 	.word	0x08006a2b
 8006cfc:	08006b8f 	.word	0x08006b8f
 8006d00:	08006a2b 	.word	0x08006a2b
 8006d04:	08006a2b 	.word	0x08006a2b
 8006d08:	08006a2b 	.word	0x08006a2b
 8006d0c:	08006b95 	.word	0x08006b95
 8006d10:	080243ca 	.word	0x080243ca
 8006d14:	00f42400 	.word	0x00f42400

08006d18 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006d1a:	07da      	lsls	r2, r3, #31
{
 8006d1c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006d1e:	d506      	bpl.n	8006d2e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006d20:	6801      	ldr	r1, [r0, #0]
 8006d22:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006d24:	684a      	ldr	r2, [r1, #4]
 8006d26:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006d2a:	4322      	orrs	r2, r4
 8006d2c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006d2e:	079c      	lsls	r4, r3, #30
 8006d30:	d506      	bpl.n	8006d40 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006d32:	6801      	ldr	r1, [r0, #0]
 8006d34:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006d36:	684a      	ldr	r2, [r1, #4]
 8006d38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006d3c:	4322      	orrs	r2, r4
 8006d3e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006d40:	0759      	lsls	r1, r3, #29
 8006d42:	d506      	bpl.n	8006d52 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d44:	6801      	ldr	r1, [r0, #0]
 8006d46:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006d48:	684a      	ldr	r2, [r1, #4]
 8006d4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d4e:	4322      	orrs	r2, r4
 8006d50:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d52:	071a      	lsls	r2, r3, #28
 8006d54:	d506      	bpl.n	8006d64 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d56:	6801      	ldr	r1, [r0, #0]
 8006d58:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006d5a:	684a      	ldr	r2, [r1, #4]
 8006d5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d60:	4322      	orrs	r2, r4
 8006d62:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d64:	06dc      	lsls	r4, r3, #27
 8006d66:	d506      	bpl.n	8006d76 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d68:	6801      	ldr	r1, [r0, #0]
 8006d6a:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006d6c:	688a      	ldr	r2, [r1, #8]
 8006d6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d72:	4322      	orrs	r2, r4
 8006d74:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d76:	0699      	lsls	r1, r3, #26
 8006d78:	d506      	bpl.n	8006d88 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d7a:	6801      	ldr	r1, [r0, #0]
 8006d7c:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006d7e:	688a      	ldr	r2, [r1, #8]
 8006d80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d84:	4322      	orrs	r2, r4
 8006d86:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d88:	065a      	lsls	r2, r3, #25
 8006d8a:	d50f      	bpl.n	8006dac <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d8c:	6801      	ldr	r1, [r0, #0]
 8006d8e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006d90:	684a      	ldr	r2, [r1, #4]
 8006d92:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006d96:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d98:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d9c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d9e:	d105      	bne.n	8006dac <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006da0:	684a      	ldr	r2, [r1, #4]
 8006da2:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006da4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006da8:	4322      	orrs	r2, r4
 8006daa:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006dac:	061b      	lsls	r3, r3, #24
 8006dae:	d506      	bpl.n	8006dbe <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006db0:	6802      	ldr	r2, [r0, #0]
 8006db2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006db4:	6853      	ldr	r3, [r2, #4]
 8006db6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006dba:	430b      	orrs	r3, r1
 8006dbc:	6053      	str	r3, [r2, #4]
 8006dbe:	bd10      	pop	{r4, pc}

08006dc0 <UART_WaitOnFlagUntilTimeout>:
{
 8006dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc4:	9d06      	ldr	r5, [sp, #24]
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	460f      	mov	r7, r1
 8006dca:	4616      	mov	r6, r2
 8006dcc:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dce:	6821      	ldr	r1, [r4, #0]
 8006dd0:	69ca      	ldr	r2, [r1, #28]
 8006dd2:	ea37 0302 	bics.w	r3, r7, r2
 8006dd6:	bf0c      	ite	eq
 8006dd8:	2201      	moveq	r2, #1
 8006dda:	2200      	movne	r2, #0
 8006ddc:	42b2      	cmp	r2, r6
 8006dde:	d002      	beq.n	8006de6 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8006de0:	2000      	movs	r0, #0
}
 8006de2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8006de6:	1c6b      	adds	r3, r5, #1
 8006de8:	d0f2      	beq.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006dea:	b99d      	cbnz	r5, 8006e14 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006df4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df6:	689a      	ldr	r2, [r3, #8]
 8006df8:	f022 0201 	bic.w	r2, r2, #1
 8006dfc:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006dfe:	2320      	movs	r3, #32
 8006e00:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        huart->RxState = HAL_UART_STATE_READY;
 8006e04:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
        __HAL_UNLOCK(huart);
 8006e08:	2300      	movs	r3, #0
 8006e0a:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
 8006e0e:	2003      	movs	r0, #3
 8006e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006e14:	f7fa f8fc 	bl	8001010 <HAL_GetTick>
 8006e18:	eba0 0008 	sub.w	r0, r0, r8
 8006e1c:	4285      	cmp	r5, r0
 8006e1e:	d2d6      	bcs.n	8006dce <UART_WaitOnFlagUntilTimeout+0xe>
 8006e20:	e7e4      	b.n	8006dec <UART_WaitOnFlagUntilTimeout+0x2c>

08006e22 <UART_CheckIdleState>:
{
 8006e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e24:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e26:	2600      	movs	r6, #0
 8006e28:	f8c0 6084 	str.w	r6, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8006e2c:	f7fa f8f0 	bl	8001010 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8006e36:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e38:	d417      	bmi.n	8006e6a <UART_CheckIdleState+0x48>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	075b      	lsls	r3, r3, #29
 8006e40:	d50a      	bpl.n	8006e58 <UART_CheckIdleState+0x36>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	462b      	mov	r3, r5
 8006e4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e50:	4620      	mov	r0, r4
 8006e52:	f7ff ffb5 	bl	8006dc0 <UART_WaitOnFlagUntilTimeout>
 8006e56:	b9a0      	cbnz	r0, 8006e82 <UART_CheckIdleState+0x60>
  huart->gState= HAL_UART_STATE_READY;
 8006e58:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006e5a:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8006e5c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006e60:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  huart->RxState= HAL_UART_STATE_READY;
 8006e64:	f884 3082 	strb.w	r3, [r4, #130]	; 0x82
  return HAL_OK;
 8006e68:	e00c      	b.n	8006e84 <UART_CheckIdleState+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e6a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e6e:	9300      	str	r3, [sp, #0]
 8006e70:	4632      	mov	r2, r6
 8006e72:	4603      	mov	r3, r0
 8006e74:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f7ff ffa1 	bl	8006dc0 <UART_WaitOnFlagUntilTimeout>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d0db      	beq.n	8006e3a <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006e82:	2003      	movs	r0, #3
}
 8006e84:	b002      	add	sp, #8
 8006e86:	bd70      	pop	{r4, r5, r6, pc}

08006e88 <HAL_UART_Init>:
{
 8006e88:	b510      	push	{r4, lr}
  if(huart == NULL)
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	b360      	cbz	r0, 8006ee8 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8006e8e:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 8006e92:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e96:	b91b      	cbnz	r3, 8006ea0 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8006e98:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006e9c:	f01a fa4e 	bl	802133c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8006ea0:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006ea2:	2324      	movs	r3, #36	; 0x24
 8006ea4:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  __HAL_UART_DISABLE(huart);
 8006ea8:	6813      	ldr	r3, [r2, #0]
 8006eaa:	f023 0301 	bic.w	r3, r3, #1
 8006eae:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f7ff fd37 	bl	8006924 <UART_SetConfig>
 8006eb6:	2801      	cmp	r0, #1
 8006eb8:	d016      	beq.n	8006ee8 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006ebc:	b113      	cbz	r3, 8006ec4 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f7ff ff2a 	bl	8006d18 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ec4:	6823      	ldr	r3, [r4, #0]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006ecc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ed4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8006edc:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8006ede:	601a      	str	r2, [r3, #0]
}
 8006ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8006ee4:	f7ff bf9d 	b.w	8006e22 <UART_CheckIdleState>
}
 8006ee8:	2001      	movs	r0, #1
 8006eea:	bd10      	pop	{r4, pc}

08006eec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006eee:	2203      	movs	r2, #3
 8006ef0:	f88d 2003 	strb.w	r2, [sp, #3]
 8006ef4:	2207      	movs	r2, #7
 8006ef6:	f88d 2004 	strb.w	r2, [sp, #4]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006efa:	2208      	movs	r2, #8
 8006efc:	f88d 2008 	strb.w	r2, [sp, #8]
 8006f00:	f88d 200c 	strb.w	r2, [sp, #12]
  
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f04:	6e82      	ldr	r2, [r0, #104]	; 0x68
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006f06:	2301      	movs	r3, #1
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006f08:	2104      	movs	r1, #4
 8006f0a:	2402      	movs	r4, #2
  uint8_t numerator[] = {1, 1, 1, 3, 7, 1};
 8006f0c:	f88d 3000 	strb.w	r3, [sp]
 8006f10:	f88d 3001 	strb.w	r3, [sp, #1]
 8006f14:	f88d 3002 	strb.w	r3, [sp, #2]
 8006f18:	f88d 3005 	strb.w	r3, [sp, #5]
  uint8_t denominator[] = {8, 4, 2, 4, 8, 1};
 8006f1c:	f88d 1009 	strb.w	r1, [sp, #9]
 8006f20:	f88d 400a 	strb.w	r4, [sp, #10]
 8006f24:	f88d 100b 	strb.w	r1, [sp, #11]
 8006f28:	f88d 300d 	strb.w	r3, [sp, #13]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006f2c:	b92a      	cbnz	r2, 8006f3a <UARTEx_SetNbDataToProcess+0x4e>
  {
    huart->NbTxDataToProcess = 1;
 8006f2e:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    rx_fifo_depth = 8; /* RX Fifo size */
    tx_fifo_depth = 8; /* TX Fifo size */
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006f32:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  }
}
 8006f36:	b004      	add	sp, #16
 8006f38:	bd10      	pop	{r4, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f3a:	6803      	ldr	r3, [r0, #0]
 8006f3c:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f3e:	6899      	ldr	r1, [r3, #8]
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8006f40:	ab04      	add	r3, sp, #16
 8006f42:	eb03 7151 	add.w	r1, r3, r1, lsr #29
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006f46:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = (uint8_t)(tx_fifo_depth * numerator[tx_fifo_threshold])/denominator[tx_fifo_threshold];
 8006f4a:	f811 3c10 	ldrb.w	r3, [r1, #-16]
 8006f4e:	f811 1c08 	ldrb.w	r1, [r1, #-8]
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f5a:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    huart->NbRxDataToProcess = (uint8_t)(rx_fifo_depth * numerator[rx_fifo_threshold])/denominator[rx_fifo_threshold];
 8006f5e:	ab04      	add	r3, sp, #16
 8006f60:	441a      	add	r2, r3
 8006f62:	f812 3c10 	ldrb.w	r3, [r2, #-16]
 8006f66:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8006f6a:	00db      	lsls	r3, r3, #3
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f72:	e7de      	b.n	8006f32 <UARTEx_SetNbDataToProcess+0x46>

08006f74 <HAL_UARTEx_WakeupCallback>:
 8006f74:	4770      	bx	lr

08006f76 <HAL_UARTEx_RxFifoFullCallback>:
 8006f76:	4770      	bx	lr

08006f78 <HAL_UARTEx_TxFifoEmptyCallback>:
{
 8006f78:	4770      	bx	lr

08006f7a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8006f7a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006f7c:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006f80:	2b01      	cmp	r3, #1
{
 8006f82:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006f84:	d01b      	beq.n	8006fbe <HAL_UARTEx_SetTxFifoThreshold+0x44>
 8006f86:	2301      	movs	r3, #1
 8006f88:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006f8c:	2324      	movs	r3, #36	; 0x24
 8006f8e:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f92:	6803      	ldr	r3, [r0, #0]
 8006f94:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	f022 0201 	bic.w	r2, r2, #1
 8006f9c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f9e:	689a      	ldr	r2, [r3, #8]
 8006fa0:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 8006fa4:	4311      	orrs	r1, r2
 8006fa6:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006fa8:	f7ff ffa0 	bl	8006eec <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fac:	6803      	ldr	r3, [r0, #0]
 8006fae:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006fb0:	2320      	movs	r3, #32
 8006fb2:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006fb6:	2000      	movs	r0, #0
 8006fb8:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8006fbc:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8006fbe:	2002      	movs	r0, #2
}
 8006fc0:	bd38      	pop	{r3, r4, r5, pc}

08006fc2 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8006fc2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8006fc4:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8006fc8:	2b01      	cmp	r3, #1
{
 8006fca:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8006fcc:	d01b      	beq.n	8007006 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8006fce:	2301      	movs	r3, #1
 8006fd0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_BUSY;
 8006fd4:	2324      	movs	r3, #36	; 0x24
 8006fd6:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fda:	6803      	ldr	r3, [r0, #0]
 8006fdc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	f022 0201 	bic.w	r2, r2, #1
 8006fe4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006fe6:	689a      	ldr	r2, [r3, #8]
 8006fe8:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
 8006fec:	4311      	orrs	r1, r2
 8006fee:	6099      	str	r1, [r3, #8]
  UARTEx_SetNbDataToProcess(huart);
 8006ff0:	f7ff ff7c 	bl	8006eec <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ff4:	6803      	ldr	r3, [r0, #0]
 8006ff6:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006ff8:	2320      	movs	r3, #32
 8006ffa:	f880 3081 	strb.w	r3, [r0, #129]	; 0x81
  __HAL_UNLOCK(huart);
 8006ffe:	2000      	movs	r0, #0
 8007000:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  return HAL_OK;
 8007004:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007006:	2002      	movs	r0, #2
}
 8007008:	bd38      	pop	{r3, r4, r5, pc}
	...

0800700c <SDMMC_GetCmdResp2>:
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800700c:	4b11      	ldr	r3, [pc, #68]	; (8007054 <SDMMC_GetCmdResp2+0x48>)
 800700e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	fbb3 f2f2 	udiv	r2, r3, r2
 8007018:	f241 3388 	movw	r3, #5000	; 0x1388
 800701c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800701e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007022:	d313      	bcc.n	800704c <SDMMC_GetCmdResp2+0x40>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007024:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007026:	f012 0f45 	tst.w	r2, #69	; 0x45
 800702a:	d0f8      	beq.n	800701e <SDMMC_GetCmdResp2+0x12>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800702c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800702e:	075b      	lsls	r3, r3, #29
 8007030:	d503      	bpl.n	800703a <SDMMC_GetCmdResp2+0x2e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007032:	2304      	movs	r3, #4
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007034:	6383      	str	r3, [r0, #56]	; 0x38
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
  }

  return SDMMC_ERROR_NONE;
}
 8007036:	4618      	mov	r0, r3
 8007038:	4770      	bx	lr
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800703a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800703c:	f013 0301 	ands.w	r3, r3, #1
 8007040:	d001      	beq.n	8007046 <SDMMC_GetCmdResp2+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007042:	2301      	movs	r3, #1
 8007044:	e7f6      	b.n	8007034 <SDMMC_GetCmdResp2+0x28>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007046:	4a04      	ldr	r2, [pc, #16]	; (8007058 <SDMMC_GetCmdResp2+0x4c>)
 8007048:	6382      	str	r2, [r0, #56]	; 0x38
 800704a:	e7f4      	b.n	8007036 <SDMMC_GetCmdResp2+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800704c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007050:	e7f1      	b.n	8007036 <SDMMC_GetCmdResp2+0x2a>
 8007052:	bf00      	nop
 8007054:	20000a50 	.word	0x20000a50
 8007058:	002000c5 	.word	0x002000c5

0800705c <SDMMC_GetCmdResp3>:
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800705c:	4b0e      	ldr	r3, [pc, #56]	; (8007098 <SDMMC_GetCmdResp3+0x3c>)
 800705e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	fbb3 f2f2 	udiv	r2, r3, r2
 8007068:	f241 3388 	movw	r3, #5000	; 0x1388
 800706c:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 800706e:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007072:	d30d      	bcc.n	8007090 <SDMMC_GetCmdResp3+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007074:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007076:	f012 0f45 	tst.w	r2, #69	; 0x45
 800707a:	d0f8      	beq.n	800706e <SDMMC_GetCmdResp3+0x12>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800707c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800707e:	f013 0304 	ands.w	r3, r3, #4
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007082:	bf15      	itete	ne
 8007084:	2304      	movne	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007086:	4a05      	ldreq	r2, [pc, #20]	; (800709c <SDMMC_GetCmdResp3+0x40>)
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007088:	6383      	strne	r3, [r0, #56]	; 0x38
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800708a:	6382      	streq	r2, [r0, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800708c:	4618      	mov	r0, r3
 800708e:	4770      	bx	lr
      return SDMMC_ERROR_TIMEOUT;
 8007090:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	20000a50 	.word	0x20000a50
 800709c:	002000c5 	.word	0x002000c5

080070a0 <SDMMC_Init>:
{
 80070a0:	b084      	sub	sp, #16
 80070a2:	b510      	push	{r4, lr}
 80070a4:	ac03      	add	r4, sp, #12
 80070a6:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80070aa:	9a04      	ldr	r2, [sp, #16]
 80070ac:	9b03      	ldr	r3, [sp, #12]
 80070ae:	6841      	ldr	r1, [r0, #4]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	9a05      	ldr	r2, [sp, #20]
 80070b4:	4313      	orrs	r3, r2
 80070b6:	9a06      	ldr	r2, [sp, #24]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	9a07      	ldr	r2, [sp, #28]
}
 80070bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, Init.ClockEdge           |\
 80070c0:	4313      	orrs	r3, r2
 80070c2:	4a03      	ldr	r2, [pc, #12]	; (80070d0 <SDMMC_Init+0x30>)
 80070c4:	400a      	ands	r2, r1
 80070c6:	4313      	orrs	r3, r2
 80070c8:	6043      	str	r3, [r0, #4]
}
 80070ca:	b004      	add	sp, #16
 80070cc:	2000      	movs	r0, #0
 80070ce:	4770      	bx	lr
 80070d0:	fffc2c00 	.word	0xfffc2c00

080070d4 <SDMMC_ReadFIFO>:
 80070d4:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80070d8:	4770      	bx	lr

080070da <SDMMC_WriteFIFO>:
  SDMMCx->FIFO = *pWriteData;
 80070da:	680b      	ldr	r3, [r1, #0]
 80070dc:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
}
 80070e0:	2000      	movs	r0, #0
 80070e2:	4770      	bx	lr

080070e4 <SDMMC_PowerState_ON>:
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80070e4:	6803      	ldr	r3, [r0, #0]
 80070e6:	f043 0303 	orr.w	r3, r3, #3
 80070ea:	6003      	str	r3, [r0, #0]
}
 80070ec:	2000      	movs	r0, #0
 80070ee:	4770      	bx	lr

080070f0 <SDMMC_PowerState_OFF>:
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 80070f0:	6803      	ldr	r3, [r0, #0]
 80070f2:	f023 0303 	bic.w	r3, r3, #3
 80070f6:	6003      	str	r3, [r0, #0]
}
 80070f8:	2000      	movs	r0, #0
 80070fa:	4770      	bx	lr

080070fc <SDMMC_GetPowerState>:
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80070fc:	6800      	ldr	r0, [r0, #0]
}
 80070fe:	f000 0003 	and.w	r0, r0, #3
 8007102:	4770      	bx	lr

08007104 <SDMMC_SendCommand>:
  SDMMCx->ARG = Command->Argument;
 8007104:	680b      	ldr	r3, [r1, #0]
 8007106:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, Command->CmdIndex         |\
 8007108:	68c2      	ldr	r2, [r0, #12]
 800710a:	4b06      	ldr	r3, [pc, #24]	; (8007124 <SDMMC_SendCommand+0x20>)
 800710c:	4013      	ands	r3, r2
 800710e:	684a      	ldr	r2, [r1, #4]
 8007110:	4313      	orrs	r3, r2
 8007112:	688a      	ldr	r2, [r1, #8]
 8007114:	4313      	orrs	r3, r2
 8007116:	68ca      	ldr	r2, [r1, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	690a      	ldr	r2, [r1, #16]
 800711c:	4313      	orrs	r3, r2
 800711e:	60c3      	str	r3, [r0, #12]
}
 8007120:	2000      	movs	r0, #0
 8007122:	4770      	bx	lr
 8007124:	fffee0c0 	.word	0xfffee0c0

08007128 <SDMMC_GetResponse>:
{
 8007128:	b082      	sub	sp, #8
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800712a:	3014      	adds	r0, #20
 800712c:	4401      	add	r1, r0
  __IO uint32_t tmp = 0;
 800712e:	2300      	movs	r3, #0
 8007130:	9301      	str	r3, [sp, #4]
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 8007132:	9101      	str	r1, [sp, #4]
  return (*(__IO uint32_t *) tmp);
 8007134:	9b01      	ldr	r3, [sp, #4]
 8007136:	6818      	ldr	r0, [r3, #0]
}  
 8007138:	b002      	add	sp, #8
 800713a:	4770      	bx	lr

0800713c <SDMMC_GetCmdResp1>:
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800713c:	4b44      	ldr	r3, [pc, #272]	; (8007250 <SDMMC_GetCmdResp1+0x114>)
{
 800713e:	b510      	push	{r4, lr}
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f44f 54fa 	mov.w	r4, #8000	; 0x1f40
 8007146:	fbb3 f3f4 	udiv	r3, r3, r4
 800714a:	435a      	muls	r2, r3
    if (count-- == 0)
 800714c:	2a00      	cmp	r2, #0
 800714e:	d049      	beq.n	80071e4 <SDMMC_GetCmdResp1+0xa8>
  }while(!__SDMMC_GET_FLAG(SDMMCx, flags));
 8007150:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007152:	f013 0f45 	tst.w	r3, #69	; 0x45
 8007156:	f102 32ff 	add.w	r2, r2, #4294967295
 800715a:	d0f7      	beq.n	800714c <SDMMC_GetCmdResp1+0x10>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800715c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800715e:	075c      	lsls	r4, r3, #29
 8007160:	d503      	bpl.n	800716a <SDMMC_GetCmdResp1+0x2e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007162:	2304      	movs	r3, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007164:	6383      	str	r3, [r0, #56]	; 0x38
}
 8007166:	4618      	mov	r0, r3
 8007168:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800716a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800716c:	f013 0301 	ands.w	r3, r3, #1
 8007170:	d001      	beq.n	8007176 <SDMMC_GetCmdResp1+0x3a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007172:	2301      	movs	r3, #1
 8007174:	e7f6      	b.n	8007164 <SDMMC_GetCmdResp1+0x28>
  return (uint8_t)(SDMMCx->RESPCMD);
 8007176:	6902      	ldr	r2, [r0, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007178:	b2d2      	uxtb	r2, r2
 800717a:	4291      	cmp	r1, r2
 800717c:	d135      	bne.n	80071ea <SDMMC_GetCmdResp1+0xae>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800717e:	4a35      	ldr	r2, [pc, #212]	; (8007254 <SDMMC_GetCmdResp1+0x118>)
 8007180:	6382      	str	r2, [r0, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007182:	4619      	mov	r1, r3
 8007184:	f7ff ffd0 	bl	8007128 <SDMMC_GetResponse>
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007188:	4b33      	ldr	r3, [pc, #204]	; (8007258 <SDMMC_GetCmdResp1+0x11c>)
 800718a:	4003      	ands	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d0ea      	beq.n	8007166 <SDMMC_GetCmdResp1+0x2a>
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007190:	2800      	cmp	r0, #0
 8007192:	db2c      	blt.n	80071ee <SDMMC_GetCmdResp1+0xb2>
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007194:	0042      	lsls	r2, r0, #1
 8007196:	d42d      	bmi.n	80071f4 <SDMMC_GetCmdResp1+0xb8>
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007198:	0084      	lsls	r4, r0, #2
 800719a:	d42d      	bmi.n	80071f8 <SDMMC_GetCmdResp1+0xbc>
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800719c:	00c1      	lsls	r1, r0, #3
 800719e:	d42d      	bmi.n	80071fc <SDMMC_GetCmdResp1+0xc0>
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80071a0:	0102      	lsls	r2, r0, #4
 80071a2:	d42e      	bmi.n	8007202 <SDMMC_GetCmdResp1+0xc6>
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80071a4:	0144      	lsls	r4, r0, #5
 80071a6:	d42f      	bmi.n	8007208 <SDMMC_GetCmdResp1+0xcc>
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80071a8:	01c1      	lsls	r1, r0, #7
 80071aa:	d430      	bmi.n	800720e <SDMMC_GetCmdResp1+0xd2>
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80071ac:	0202      	lsls	r2, r0, #8
 80071ae:	d431      	bmi.n	8007214 <SDMMC_GetCmdResp1+0xd8>
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80071b0:	0244      	lsls	r4, r0, #9
 80071b2:	d432      	bmi.n	800721a <SDMMC_GetCmdResp1+0xde>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80071b4:	0281      	lsls	r1, r0, #10
 80071b6:	d433      	bmi.n	8007220 <SDMMC_GetCmdResp1+0xe4>
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80071b8:	02c2      	lsls	r2, r0, #11
 80071ba:	d434      	bmi.n	8007226 <SDMMC_GetCmdResp1+0xea>
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80071bc:	0344      	lsls	r4, r0, #13
 80071be:	d435      	bmi.n	800722c <SDMMC_GetCmdResp1+0xf0>
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80071c0:	0381      	lsls	r1, r0, #14
 80071c2:	d436      	bmi.n	8007232 <SDMMC_GetCmdResp1+0xf6>
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80071c4:	03c2      	lsls	r2, r0, #15
 80071c6:	d437      	bmi.n	8007238 <SDMMC_GetCmdResp1+0xfc>
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80071c8:	0404      	lsls	r4, r0, #16
 80071ca:	d438      	bmi.n	800723e <SDMMC_GetCmdResp1+0x102>
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80071cc:	0441      	lsls	r1, r0, #17
 80071ce:	d439      	bmi.n	8007244 <SDMMC_GetCmdResp1+0x108>
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80071d0:	0482      	lsls	r2, r0, #18
 80071d2:	d43a      	bmi.n	800724a <SDMMC_GetCmdResp1+0x10e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80071d4:	f010 0f08 	tst.w	r0, #8
 80071d8:	bf14      	ite	ne
 80071da:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80071de:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80071e2:	e7c0      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80071e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071e8:	e7bd      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071ea:	2301      	movs	r3, #1
 80071ec:	e7bb      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80071ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071f2:	e7b8      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80071f4:	2340      	movs	r3, #64	; 0x40
 80071f6:	e7b6      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80071f8:	2380      	movs	r3, #128	; 0x80
 80071fa:	e7b4      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80071fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007200:	e7b1      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007202:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007206:	e7ae      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800720c:	e7ab      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800720e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007212:	e7a8      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007218:	e7a5      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800721a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800721e:	e7a2      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007220:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007224:	e79f      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CC_ERR;
 8007226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800722a:	e79c      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800722c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007230:	e799      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007232:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007236:	e796      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007238:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800723c:	e793      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800723e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007242:	e790      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007244:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007248:	e78d      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
    return SDMMC_ERROR_ERASE_RESET;
 800724a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800724e:	e78a      	b.n	8007166 <SDMMC_GetCmdResp1+0x2a>
 8007250:	20000a50 	.word	0x20000a50
 8007254:	002000c5 	.word	0x002000c5
 8007258:	fdffe008 	.word	0xfdffe008

0800725c <SDMMC_ConfigData>:
  SDMMCx->DTIMER = Data->DataTimeOut;
 800725c:	680b      	ldr	r3, [r1, #0]
 800725e:	6243      	str	r3, [r0, #36]	; 0x24
  SDMMCx->DLEN = Data->DataLength;
 8007260:	684b      	ldr	r3, [r1, #4]
 8007262:	6283      	str	r3, [r0, #40]	; 0x28
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, Data->DataBlockSize |\
 8007264:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007266:	688a      	ldr	r2, [r1, #8]
 8007268:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800726c:	4313      	orrs	r3, r2
 800726e:	68ca      	ldr	r2, [r1, #12]
 8007270:	4313      	orrs	r3, r2
 8007272:	690a      	ldr	r2, [r1, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	694a      	ldr	r2, [r1, #20]
 8007278:	4313      	orrs	r3, r2
 800727a:	62c3      	str	r3, [r0, #44]	; 0x2c
}
 800727c:	2000      	movs	r0, #0
 800727e:	4770      	bx	lr

08007280 <SDMMC_CmdBlockLength>:
{
 8007280:	b530      	push	{r4, r5, lr}
 8007282:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007288:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800728a:	2300      	movs	r3, #0
{
 800728c:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800728e:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8007290:	2410      	movs	r4, #16
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007292:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007294:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800729a:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800729c:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800729e:	f7ff ff31 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80072a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a6:	4621      	mov	r1, r4
 80072a8:	4628      	mov	r0, r5
 80072aa:	f7ff ff47 	bl	800713c <SDMMC_GetCmdResp1>
}
 80072ae:	b007      	add	sp, #28
 80072b0:	bd30      	pop	{r4, r5, pc}

080072b2 <SDMMC_CmdReadSingleBlock>:
{
 80072b2:	b530      	push	{r4, r5, lr}
 80072b4:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072ba:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072bc:	2300      	movs	r3, #0
{
 80072be:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80072c0:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80072c2:	2411      	movs	r4, #17
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072c4:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072c6:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072cc:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80072ce:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072d0:	f7ff ff18 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80072d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d8:	4621      	mov	r1, r4
 80072da:	4628      	mov	r0, r5
 80072dc:	f7ff ff2e 	bl	800713c <SDMMC_GetCmdResp1>
}
 80072e0:	b007      	add	sp, #28
 80072e2:	bd30      	pop	{r4, r5, pc}

080072e4 <SDMMC_CmdReadMultiBlock>:
{
 80072e4:	b530      	push	{r4, r5, lr}
 80072e6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80072e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072ec:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072ee:	2300      	movs	r3, #0
{
 80072f0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80072f2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80072f4:	2412      	movs	r4, #18
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80072f6:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80072f8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80072fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80072fe:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8007300:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007302:	f7ff feff 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8007306:	f241 3288 	movw	r2, #5000	; 0x1388
 800730a:	4621      	mov	r1, r4
 800730c:	4628      	mov	r0, r5
 800730e:	f7ff ff15 	bl	800713c <SDMMC_GetCmdResp1>
}
 8007312:	b007      	add	sp, #28
 8007314:	bd30      	pop	{r4, r5, pc}

08007316 <SDMMC_CmdWriteSingleBlock>:
{
 8007316:	b530      	push	{r4, r5, lr}
 8007318:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800731a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800731e:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007320:	2300      	movs	r3, #0
{
 8007322:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007324:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007326:	2418      	movs	r4, #24
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007328:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800732a:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800732c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007330:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007332:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007334:	f7ff fee6 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8007338:	f241 3288 	movw	r2, #5000	; 0x1388
 800733c:	4621      	mov	r1, r4
 800733e:	4628      	mov	r0, r5
 8007340:	f7ff fefc 	bl	800713c <SDMMC_GetCmdResp1>
}
 8007344:	b007      	add	sp, #28
 8007346:	bd30      	pop	{r4, r5, pc}

08007348 <SDMMC_CmdWriteMultiBlock>:
{
 8007348:	b530      	push	{r4, r5, lr}
 800734a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800734c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007350:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007352:	2300      	movs	r3, #0
{
 8007354:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8007356:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007358:	2419      	movs	r4, #25
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800735a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800735c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800735e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007362:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8007364:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007366:	f7ff fecd 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800736a:	f241 3288 	movw	r2, #5000	; 0x1388
 800736e:	4621      	mov	r1, r4
 8007370:	4628      	mov	r0, r5
 8007372:	f7ff fee3 	bl	800713c <SDMMC_GetCmdResp1>
}
 8007376:	b007      	add	sp, #28
 8007378:	bd30      	pop	{r4, r5, pc}
	...

0800737c <SDMMC_CmdStopTransfer>:
{
 800737c:	b530      	push	{r4, r5, lr}
 800737e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 8007380:	2300      	movs	r3, #0
{
 8007382:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 8007384:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007386:	240c      	movs	r4, #12
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007388:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800738c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800738e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007394:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007396:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007398:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800739a:	f7ff feb3 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800739e:	4a03      	ldr	r2, [pc, #12]	; (80073ac <SDMMC_CmdStopTransfer+0x30>)
 80073a0:	4621      	mov	r1, r4
 80073a2:	4628      	mov	r0, r5
 80073a4:	f7ff feca 	bl	800713c <SDMMC_GetCmdResp1>
}
 80073a8:	b007      	add	sp, #28
 80073aa:	bd30      	pop	{r4, r5, pc}
 80073ac:	05f5e100 	.word	0x05f5e100

080073b0 <SDMMC_CmdSelDesel>:
{
 80073b0:	b530      	push	{r4, r5, lr}
 80073b2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80073b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073b8:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073ba:	2300      	movs	r3, #0
{
 80073bc:	4605      	mov	r5, r0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80073be:	2407      	movs	r4, #7
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073c0:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073c2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80073c8:	9201      	str	r2, [sp, #4]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073ca:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80073cc:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073ce:	f7ff fe99 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80073d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80073d6:	4621      	mov	r1, r4
 80073d8:	4628      	mov	r0, r5
 80073da:	f7ff feaf 	bl	800713c <SDMMC_GetCmdResp1>
}
 80073de:	b007      	add	sp, #28
 80073e0:	bd30      	pop	{r4, r5, pc}
	...

080073e4 <SDMMC_CmdGoIdleState>:
{
 80073e4:	b510      	push	{r4, lr}
 80073e6:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80073ec:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80073ee:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80073f0:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073f2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80073f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073f8:	9305      	str	r3, [sp, #20]
{
 80073fa:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80073fc:	f7ff fe82 	bl	8007104 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 8007400:	4b0b      	ldr	r3, [pc, #44]	; (8007430 <SDMMC_CmdGoIdleState+0x4c>)
 8007402:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	fbb3 f2f2 	udiv	r2, r3, r2
 800740c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007410:	4353      	muls	r3, r2
    if (count-- == 0)
 8007412:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007416:	d307      	bcc.n	8007428 <SDMMC_CmdGoIdleState+0x44>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007418:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800741a:	0612      	lsls	r2, r2, #24
 800741c:	d5f9      	bpl.n	8007412 <SDMMC_CmdGoIdleState+0x2e>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800741e:	4b05      	ldr	r3, [pc, #20]	; (8007434 <SDMMC_CmdGoIdleState+0x50>)
 8007420:	63a3      	str	r3, [r4, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8007422:	2000      	movs	r0, #0
}
 8007424:	b006      	add	sp, #24
 8007426:	bd10      	pop	{r4, pc}
      return SDMMC_ERROR_TIMEOUT;
 8007428:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  return errorstate;
 800742c:	e7fa      	b.n	8007424 <SDMMC_CmdGoIdleState+0x40>
 800742e:	bf00      	nop
 8007430:	20000a50 	.word	0x20000a50
 8007434:	002000c5 	.word	0x002000c5

08007438 <SDMMC_CmdOperCond>:
{
 8007438:	b510      	push	{r4, lr}
 800743a:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800743c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007440:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007442:	2308      	movs	r3, #8
 8007444:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800744a:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800744c:	2300      	movs	r3, #0
 800744e:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007450:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007456:	9305      	str	r3, [sp, #20]
{
 8007458:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800745a:	f7ff fe53 	bl	8007104 <SDMMC_SendCommand>
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800745e:	4b14      	ldr	r3, [pc, #80]	; (80074b0 <SDMMC_CmdOperCond+0x78>)
 8007460:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	fbb3 f2f2 	udiv	r2, r3, r2
 800746a:	f241 3388 	movw	r3, #5000	; 0x1388
 800746e:	4353      	muls	r3, r2
  
  do
  {
    if (count-- == 0)
 8007470:	f113 33ff 	adds.w	r3, r3, #4294967295
 8007474:	d318      	bcc.n	80074a8 <SDMMC_CmdOperCond+0x70>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 8007476:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8007478:	f012 0f45 	tst.w	r2, #69	; 0x45
 800747c:	d0f8      	beq.n	8007470 <SDMMC_CmdOperCond+0x38>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800747e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007480:	075b      	lsls	r3, r3, #29
 8007482:	d503      	bpl.n	800748c <SDMMC_CmdOperCond+0x54>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007484:	2004      	movs	r0, #4
  }
  
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007486:	63a0      	str	r0, [r4, #56]	; 0x38
}
 8007488:	b006      	add	sp, #24
 800748a:	bd10      	pop	{r4, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800748c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800748e:	f012 0201 	ands.w	r2, r2, #1
 8007492:	d001      	beq.n	8007498 <SDMMC_CmdOperCond+0x60>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007494:	2001      	movs	r0, #1
 8007496:	e7f6      	b.n	8007486 <SDMMC_CmdOperCond+0x4e>
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8007498:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800749a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 800749e:	d0f3      	beq.n	8007488 <SDMMC_CmdOperCond+0x50>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80074a0:	2340      	movs	r3, #64	; 0x40
 80074a2:	63a3      	str	r3, [r4, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80074a4:	4610      	mov	r0, r2
 80074a6:	e7ef      	b.n	8007488 <SDMMC_CmdOperCond+0x50>
      return SDMMC_ERROR_TIMEOUT;
 80074a8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80074ac:	e7ec      	b.n	8007488 <SDMMC_CmdOperCond+0x50>
 80074ae:	bf00      	nop
 80074b0:	20000a50 	.word	0x20000a50

080074b4 <SDMMC_CmdAppCommand>:
{
 80074b4:	b530      	push	{r4, r5, lr}
 80074b6:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074bc:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074be:	2300      	movs	r3, #0
{
 80074c0:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80074c2:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80074c4:	2437      	movs	r4, #55	; 0x37
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074c6:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074c8:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074ce:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80074d0:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074d2:	f7ff fe17 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80074d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074da:	4621      	mov	r1, r4
 80074dc:	4628      	mov	r0, r5
 80074de:	f7ff fe2d 	bl	800713c <SDMMC_GetCmdResp1>
}
 80074e2:	b007      	add	sp, #28
 80074e4:	bd30      	pop	{r4, r5, pc}

080074e6 <SDMMC_CmdAppOperCommand>:
{
 80074e6:	b510      	push	{r4, lr}
 80074e8:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80074ea:	2329      	movs	r3, #41	; 0x29
 80074ec:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80074ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074f2:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074f4:	2300      	movs	r3, #0
{
 80074f6:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 80074f8:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80074fa:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80074fc:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80074fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007502:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007504:	f7ff fdfe 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007508:	4620      	mov	r0, r4
 800750a:	f7ff fda7 	bl	800705c <SDMMC_GetCmdResp3>
}
 800750e:	b006      	add	sp, #24
 8007510:	bd10      	pop	{r4, pc}

08007512 <SDMMC_CmdSendSCR>:
{
 8007512:	b530      	push	{r4, r5, lr}
 8007514:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 8007516:	2300      	movs	r3, #0
{
 8007518:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0;
 800751a:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800751c:	2433      	movs	r4, #51	; 0x33
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800751e:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007522:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007524:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800752a:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800752c:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800752e:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007530:	f7ff fde8 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007534:	f241 3288 	movw	r2, #5000	; 0x1388
 8007538:	4621      	mov	r1, r4
 800753a:	4628      	mov	r0, r5
 800753c:	f7ff fdfe 	bl	800713c <SDMMC_GetCmdResp1>
}
 8007540:	b007      	add	sp, #28
 8007542:	bd30      	pop	{r4, r5, pc}

08007544 <SDMMC_CmdSendCID>:
{
 8007544:	b510      	push	{r4, lr}
 8007546:	b086      	sub	sp, #24
  sdmmc_cmdinit.Argument         = 0;
 8007548:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800754a:	2202      	movs	r2, #2
{
 800754c:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = 0;
 800754e:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007550:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007552:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007554:	f44f 7240 	mov.w	r2, #768	; 0x300
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800755c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800755e:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007560:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007562:	f7ff fdcf 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007566:	4620      	mov	r0, r4
 8007568:	f7ff fd50 	bl	800700c <SDMMC_GetCmdResp2>
}
 800756c:	b006      	add	sp, #24
 800756e:	bd10      	pop	{r4, pc}

08007570 <SDMMC_CmdSendCSD>:
{
 8007570:	b510      	push	{r4, lr}
 8007572:	b086      	sub	sp, #24
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007574:	2309      	movs	r3, #9
 8007576:	9302      	str	r3, [sp, #8]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007578:	f44f 7340 	mov.w	r3, #768	; 0x300
 800757c:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800757e:	2300      	movs	r3, #0
{
 8007580:	4604      	mov	r4, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007582:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007584:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007586:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800758c:	9305      	str	r3, [sp, #20]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800758e:	f7ff fdb9 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007592:	4620      	mov	r0, r4
 8007594:	f7ff fd3a 	bl	800700c <SDMMC_GetCmdResp2>
}
 8007598:	b006      	add	sp, #24
 800759a:	bd10      	pop	{r4, pc}

0800759c <SDMMC_CmdSetRelAdd>:
{
 800759c:	b530      	push	{r4, r5, lr}
 800759e:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0;
 80075a0:	2300      	movs	r3, #0
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80075a2:	2203      	movs	r2, #3
  sdmmc_cmdinit.Argument         = 0;
 80075a4:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80075a6:	9202      	str	r2, [sp, #8]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80075a8:	9304      	str	r3, [sp, #16]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075aa:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
{
 80075b2:	460d      	mov	r5, r1
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075b4:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80075b6:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80075b8:	9305      	str	r3, [sp, #20]
{
 80075ba:	4604      	mov	r4, r0
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80075bc:	f7ff fda2 	bl	8007104 <SDMMC_SendCommand>
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 80075c0:	4b1f      	ldr	r3, [pc, #124]	; (8007640 <SDMMC_CmdSetRelAdd+0xa4>)
 80075c2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80075cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80075d0:	4353      	muls	r3, r2
    if (count-- == 0)
 80075d2:	f113 33ff 	adds.w	r3, r3, #4294967295
 80075d6:	d32a      	bcc.n	800762e <SDMMC_CmdSetRelAdd+0x92>
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 80075d8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80075da:	f012 0f45 	tst.w	r2, #69	; 0x45
 80075de:	d0f8      	beq.n	80075d2 <SDMMC_CmdSetRelAdd+0x36>
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80075e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075e2:	075a      	lsls	r2, r3, #29
 80075e4:	d503      	bpl.n	80075ee <SDMMC_CmdSetRelAdd+0x52>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80075e6:	2004      	movs	r0, #4
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80075e8:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80075ea:	b007      	add	sp, #28
 80075ec:	bd30      	pop	{r4, r5, pc}
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80075ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075f0:	f011 0101 	ands.w	r1, r1, #1
 80075f4:	d001      	beq.n	80075fa <SDMMC_CmdSetRelAdd+0x5e>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80075f6:	2001      	movs	r0, #1
 80075f8:	e7f6      	b.n	80075e8 <SDMMC_CmdSetRelAdd+0x4c>
  return (uint8_t)(SDMMCx->RESPCMD);
 80075fa:	6923      	ldr	r3, [r4, #16]
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	2b03      	cmp	r3, #3
 8007600:	d118      	bne.n	8007634 <SDMMC_CmdSetRelAdd+0x98>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007602:	4b10      	ldr	r3, [pc, #64]	; (8007644 <SDMMC_CmdSetRelAdd+0xa8>)
 8007604:	63a3      	str	r3, [r4, #56]	; 0x38
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007606:	4620      	mov	r0, r4
 8007608:	f7ff fd8e 	bl	8007128 <SDMMC_GetResponse>
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800760c:	f410 4360 	ands.w	r3, r0, #57344	; 0xe000
 8007610:	d103      	bne.n	800761a <SDMMC_CmdSetRelAdd+0x7e>
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007612:	0c00      	lsrs	r0, r0, #16
 8007614:	8028      	strh	r0, [r5, #0]
    return SDMMC_ERROR_NONE;
 8007616:	4618      	mov	r0, r3
 8007618:	e7e7      	b.n	80075ea <SDMMC_CmdSetRelAdd+0x4e>
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800761a:	0443      	lsls	r3, r0, #17
 800761c:	d40c      	bmi.n	8007638 <SDMMC_CmdSetRelAdd+0x9c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800761e:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 8007622:	bf14      	ite	ne
 8007624:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8007628:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800762c:	e7dd      	b.n	80075ea <SDMMC_CmdSetRelAdd+0x4e>
      return SDMMC_ERROR_TIMEOUT;
 800762e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8007632:	e7da      	b.n	80075ea <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007634:	2001      	movs	r0, #1
 8007636:	e7d8      	b.n	80075ea <SDMMC_CmdSetRelAdd+0x4e>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007638:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800763c:	e7d5      	b.n	80075ea <SDMMC_CmdSetRelAdd+0x4e>
 800763e:	bf00      	nop
 8007640:	20000a50 	.word	0x20000a50
 8007644:	002000c5 	.word	0x002000c5

08007648 <SDMMC_CmdSendStatus>:
{
 8007648:	b530      	push	{r4, r5, lr}
 800764a:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800764c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007650:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007652:	2300      	movs	r3, #0
{
 8007654:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007656:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007658:	240d      	movs	r4, #13
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800765a:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800765c:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800765e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007662:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007664:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007666:	f7ff fd4d 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800766a:	f241 3288 	movw	r2, #5000	; 0x1388
 800766e:	4621      	mov	r1, r4
 8007670:	4628      	mov	r0, r5
 8007672:	f7ff fd63 	bl	800713c <SDMMC_GetCmdResp1>
}
 8007676:	b007      	add	sp, #28
 8007678:	bd30      	pop	{r4, r5, pc}

0800767a <SDMMC_CmdSwitch>:
{
 800767a:	b530      	push	{r4, r5, lr}
 800767c:	b087      	sub	sp, #28
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800767e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007682:	9303      	str	r3, [sp, #12]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007684:	2300      	movs	r3, #0
{
 8007686:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = Argument;
 8007688:	9101      	str	r1, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 800768a:	2406      	movs	r4, #6
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800768c:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800768e:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007694:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8007696:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007698:	f7ff fd34 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 800769c:	f241 3288 	movw	r2, #5000	; 0x1388
 80076a0:	4621      	mov	r1, r4
 80076a2:	4628      	mov	r0, r5
 80076a4:	f7ff fd4a 	bl	800713c <SDMMC_GetCmdResp1>
}
 80076a8:	b007      	add	sp, #28
 80076aa:	bd30      	pop	{r4, r5, pc}

080076ac <SDMMC_CmdBusWidth>:
 80076ac:	f7ff bfe5 	b.w	800767a <SDMMC_CmdSwitch>

080076b0 <SDMMC_CmdVoltageSwitch>:
{
 80076b0:	b530      	push	{r4, r5, lr}
 80076b2:	b087      	sub	sp, #28
  sdmmc_cmdinit.Argument         = 0x00000000;
 80076b4:	2300      	movs	r3, #0
{
 80076b6:	4605      	mov	r5, r0
  sdmmc_cmdinit.Argument         = 0x00000000;
 80076b8:	9301      	str	r3, [sp, #4]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80076ba:	240b      	movs	r4, #11
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076bc:	f44f 7280 	mov.w	r2, #256	; 0x100
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80076c0:	9304      	str	r3, [sp, #16]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076c2:	a901      	add	r1, sp, #4
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80076c8:	9203      	str	r2, [sp, #12]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80076ca:	9305      	str	r3, [sp, #20]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 80076cc:	9402      	str	r4, [sp, #8]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80076ce:	f7ff fd19 	bl	8007104 <SDMMC_SendCommand>
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 80076d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d6:	4621      	mov	r1, r4
 80076d8:	4628      	mov	r0, r5
 80076da:	f7ff fd2f 	bl	800713c <SDMMC_GetCmdResp1>
}
 80076de:	b007      	add	sp, #28
 80076e0:	bd30      	pop	{r4, r5, pc}
	...

080076e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076e4:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80076e6:	3b01      	subs	r3, #1
 80076e8:	d101      	bne.n	80076ee <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80076ea:	2003      	movs	r0, #3
 80076ec:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076ee:	6902      	ldr	r2, [r0, #16]
 80076f0:	2a00      	cmp	r2, #0
 80076f2:	daf8      	bge.n	80076e6 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076f4:	6903      	ldr	r3, [r0, #16]
 80076f6:	4a06      	ldr	r2, [pc, #24]	; (8007710 <USB_CoreReset+0x2c>)
 80076f8:	f043 0301 	orr.w	r3, r3, #1
 80076fc:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80076fe:	3a01      	subs	r2, #1
 8007700:	d0f3      	beq.n	80076ea <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007702:	6903      	ldr	r3, [r0, #16]
 8007704:	f013 0301 	ands.w	r3, r3, #1
 8007708:	d1f9      	bne.n	80076fe <USB_CoreReset+0x1a>

  return HAL_OK;
 800770a:	4618      	mov	r0, r3
}
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	00030d41 	.word	0x00030d41

08007714 <USB_CoreInit>:
{
 8007714:	b084      	sub	sp, #16
 8007716:	b538      	push	{r3, r4, r5, lr}
 8007718:	ad05      	add	r5, sp, #20
 800771a:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800771e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007720:	2b01      	cmp	r3, #1
{
 8007722:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007724:	d11b      	bne.n	800775e <USB_CoreInit+0x4a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007726:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800772c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800772e:	68c3      	ldr	r3, [r0, #12]
 8007730:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007734:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007738:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800773a:	68c3      	ldr	r3, [r0, #12]
 800773c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007740:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8007742:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007744:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007746:	bf02      	ittt	eq
 8007748:	68c3      	ldreq	r3, [r0, #12]
 800774a:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 800774e:	60c3      	streq	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8007750:	f7ff ffc8 	bl	80076e4 <USB_CoreReset>
}
 8007754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007758:	2000      	movs	r0, #0
 800775a:	b004      	add	sp, #16
 800775c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800775e:	68c3      	ldr	r3, [r0, #12]
 8007760:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007764:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8007766:	f7ff ffbd 	bl	80076e4 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 800776a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800776e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007770:	e7f0      	b.n	8007754 <USB_CoreInit+0x40>

08007772 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007772:	6883      	ldr	r3, [r0, #8]
 8007774:	f043 0301 	orr.w	r3, r3, #1
 8007778:	6083      	str	r3, [r0, #8]
}
 800777a:	2000      	movs	r0, #0
 800777c:	4770      	bx	lr

0800777e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800777e:	6883      	ldr	r3, [r0, #8]
 8007780:	f023 0301 	bic.w	r3, r3, #1
 8007784:	6083      	str	r3, [r0, #8]
}
 8007786:	2000      	movs	r0, #0
 8007788:	4770      	bx	lr

0800778a <USB_SetCurrentMode>:
{
 800778a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800778c:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800778e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007790:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007794:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8007796:	d108      	bne.n	80077aa <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007798:	68c3      	ldr	r3, [r0, #12]
 800779a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800779e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80077a0:	2032      	movs	r0, #50	; 0x32
 80077a2:	f7f9 fc3b 	bl	800101c <HAL_Delay>
  return HAL_OK;
 80077a6:	2000      	movs	r0, #0
 80077a8:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80077aa:	b919      	cbnz	r1, 80077b4 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077ac:	68c3      	ldr	r3, [r0, #12]
 80077ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077b2:	e7f4      	b.n	800779e <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80077b4:	2001      	movs	r0, #1
}
 80077b6:	bd08      	pop	{r3, pc}

080077b8 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077b8:	0189      	lsls	r1, r1, #6
 80077ba:	f041 0120 	orr.w	r1, r1, #32
 80077be:	4a06      	ldr	r2, [pc, #24]	; (80077d8 <USB_FlushTxFifo+0x20>)
 80077c0:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80077c2:	3a01      	subs	r2, #1
 80077c4:	d005      	beq.n	80077d2 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077c6:	6903      	ldr	r3, [r0, #16]
 80077c8:	f013 0320 	ands.w	r3, r3, #32
 80077cc:	d1f9      	bne.n	80077c2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80077ce:	4618      	mov	r0, r3
 80077d0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80077d2:	2003      	movs	r0, #3
}
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	00030d41 	.word	0x00030d41

080077dc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077dc:	2310      	movs	r3, #16
 80077de:	4a06      	ldr	r2, [pc, #24]	; (80077f8 <USB_FlushRxFifo+0x1c>)
 80077e0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80077e2:	3a01      	subs	r2, #1
 80077e4:	d005      	beq.n	80077f2 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077e6:	6903      	ldr	r3, [r0, #16]
 80077e8:	f013 0310 	ands.w	r3, r3, #16
 80077ec:	d1f9      	bne.n	80077e2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80077ee:	4618      	mov	r0, r3
 80077f0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80077f2:	2003      	movs	r0, #3
}
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	00030d41 	.word	0x00030d41

080077fc <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80077fc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007800:	4319      	orrs	r1, r3
 8007802:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8007806:	2000      	movs	r0, #0
 8007808:	4770      	bx	lr
	...

0800780c <USB_DevInit>:
{
 800780c:	b084      	sub	sp, #16
 800780e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007812:	4604      	mov	r4, r0
 8007814:	a807      	add	r0, sp, #28
 8007816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800781a:	2300      	movs	r3, #0
 800781c:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800781e:	4688      	mov	r8, r1
    USBx->DIEPTXF[i] = 0U;
 8007820:	4619      	mov	r1, r3
 8007822:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007826:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 800782a:	3301      	adds	r3, #1
 800782c:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 800782e:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8007830:	d1f7      	bne.n	8007822 <USB_DevInit+0x16>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007832:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007834:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007838:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 800783a:	b95f      	cbnz	r7, 8007854 <USB_DevInit+0x48>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800783c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800783e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007842:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800784a:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007852:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8007854:	2500      	movs	r5, #0
 8007856:	f8c4 5e00 	str.w	r5, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800785a:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800785e:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007862:	2103      	movs	r1, #3
 8007864:	4620      	mov	r0, r4
 8007866:	f7ff ffc9 	bl	80077fc <USB_SetDevSpeed>
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800786a:	f504 6600 	add.w	r6, r4, #2048	; 0x800
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800786e:	2110      	movs	r1, #16
 8007870:	4620      	mov	r0, r4
 8007872:	f7ff ffa1 	bl	80077b8 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007876:	4620      	mov	r0, r4
 8007878:	f7ff ffb0 	bl	80077dc <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 800787c:	6135      	str	r5, [r6, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800787e:	462b      	mov	r3, r5
  USBx_DEVICE->DOEPMSK = 0U;
 8007880:	6175      	str	r5, [r6, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8007882:	4629      	mov	r1, r5
  USBx_DEVICE->DAINTMSK = 0U;
 8007884:	61f5      	str	r5, [r6, #28]
 8007886:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800788a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800788e:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007892:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007896:	4543      	cmp	r3, r8
 8007898:	d12f      	bne.n	80078fa <USB_DevInit+0xee>
 800789a:	2100      	movs	r1, #0
 800789c:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078a0:	4608      	mov	r0, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078a2:	f04f 4590 	mov.w	r5, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078a6:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078aa:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078ae:	428b      	cmp	r3, r1
 80078b0:	d134      	bne.n	800791c <USB_DevInit+0x110>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80078b2:	6933      	ldr	r3, [r6, #16]
 80078b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078b8:	6133      	str	r3, [r6, #16]
  USBx->GINTMSK = 0U;
 80078ba:	2300      	movs	r3, #0
 80078bc:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80078be:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80078c2:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80078c4:	69a3      	ldr	r3, [r4, #24]
 80078c6:	f043 0310 	orr.w	r3, r3, #16
 80078ca:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80078cc:	69a2      	ldr	r2, [r4, #24]
 80078ce:	4b1c      	ldr	r3, [pc, #112]	; (8007940 <USB_DevInit+0x134>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80078d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078d6:	b11b      	cbz	r3, 80078e0 <USB_DevInit+0xd4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80078d8:	69a3      	ldr	r3, [r4, #24]
 80078da:	f043 0308 	orr.w	r3, r3, #8
 80078de:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80078e0:	2f01      	cmp	r7, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80078e2:	bf01      	itttt	eq
 80078e4:	69a3      	ldreq	r3, [r4, #24]
 80078e6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80078ea:	f043 0304 	orreq.w	r3, r3, #4
 80078ee:	61a3      	streq	r3, [r4, #24]
}
 80078f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078f4:	2000      	movs	r0, #0
 80078f6:	b004      	add	sp, #16
 80078f8:	4770      	bx	lr
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078fa:	f8d2 c000 	ldr.w	ip, [r2]
 80078fe:	f1bc 0f00 	cmp.w	ip, #0
 8007902:	da09      	bge.n	8007918 <USB_DevInit+0x10c>
      if (i == 0U)
 8007904:	b933      	cbnz	r3, 8007914 <USB_DevInit+0x108>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007906:	6015      	str	r5, [r2, #0]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007908:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800790a:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800790c:	f8c2 e008 	str.w	lr, [r2, #8]
 8007910:	3220      	adds	r2, #32
 8007912:	e7c0      	b.n	8007896 <USB_DevInit+0x8a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007914:	6010      	str	r0, [r2, #0]
 8007916:	e7f7      	b.n	8007908 <USB_DevInit+0xfc>
      USBx_INEP(i)->DIEPCTL = 0U;
 8007918:	6011      	str	r1, [r2, #0]
 800791a:	e7f5      	b.n	8007908 <USB_DevInit+0xfc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800791c:	f8d2 8000 	ldr.w	r8, [r2]
 8007920:	f1b8 0f00 	cmp.w	r8, #0
 8007924:	da0a      	bge.n	800793c <USB_DevInit+0x130>
      if (i == 0U)
 8007926:	b939      	cbnz	r1, 8007938 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007928:	f8c2 e000 	str.w	lr, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800792c:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800792e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007930:	f8c2 c008 	str.w	ip, [r2, #8]
 8007934:	3220      	adds	r2, #32
 8007936:	e7ba      	b.n	80078ae <USB_DevInit+0xa2>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007938:	6015      	str	r5, [r2, #0]
 800793a:	e7f7      	b.n	800792c <USB_DevInit+0x120>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800793c:	6010      	str	r0, [r2, #0]
 800793e:	e7f5      	b.n	800792c <USB_DevInit+0x120>
 8007940:	803c3800 	.word	0x803c3800

08007944 <USB_ActivateEndpoint>:
{
 8007944:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8007946:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007948:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 800794a:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 800794e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 8007952:	2a01      	cmp	r2, #1
 8007954:	f004 050f 	and.w	r5, r4, #15
 8007958:	d11b      	bne.n	8007992 <USB_ActivateEndpoint+0x4e>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 800795a:	40aa      	lsls	r2, r5
 800795c:	4332      	orrs	r2, r6
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800795e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU));
 8007962:	61da      	str	r2, [r3, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007964:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007968:	041a      	lsls	r2, r3, #16
 800796a:	d410      	bmi.n	800798e <USB_ActivateEndpoint+0x4a>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800796c:	688b      	ldr	r3, [r1, #8]
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800796e:	78c9      	ldrb	r1, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007970:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8007974:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800797c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007980:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8007984:	ea43 5384 	orr.w	r3, r3, r4, lsl #22
 8007988:	4313      	orrs	r3, r2
 800798a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 800798e:	2000      	movs	r0, #0
 8007990:	bd70      	pop	{r4, r5, r6, pc}
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 8007992:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007996:	40aa      	lsls	r2, r5
 8007998:	4332      	orrs	r2, r6
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800799a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16);
 800799e:	61da      	str	r2, [r3, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80079a0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80079a4:	041b      	lsls	r3, r3, #16
 80079a6:	d4f2      	bmi.n	800798e <USB_ActivateEndpoint+0x4a>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079a8:	688b      	ldr	r3, [r1, #8]
                                    ((uint32_t)ep->type << 18) |
 80079aa:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079ac:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 80079b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80079b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079bc:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 80079c0:	4313      	orrs	r3, r2
 80079c2:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80079c6:	e7e2      	b.n	800798e <USB_ActivateEndpoint+0x4a>

080079c8 <USB_DeactivateEndpoint>:
{
 80079c8:	b530      	push	{r4, r5, lr}
  if (ep->is_in == 1U)
 80079ca:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80079cc:	780c      	ldrb	r4, [r1, #0]
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80079ce:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 80079d2:	f500 6200 	add.w	r2, r0, #2048	; 0x800
  if (ep->is_in == 1U)
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	f004 050f 	and.w	r5, r4, #15
 80079dc:	d110      	bne.n	8007a00 <USB_DeactivateEndpoint+0x38>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80079de:	40ab      	lsls	r3, r5
 80079e0:	43db      	mvns	r3, r3
 80079e2:	4019      	ands	r1, r3
 80079e4:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80079e6:	69d1      	ldr	r1, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80079e8:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & 0xFU)));
 80079ec:	400b      	ands	r3, r1
 80079ee:	61d3      	str	r3, [r2, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80079f0:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 80079f4:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <USB_DeactivateEndpoint+0x5c>)
 80079f6:	4013      	ands	r3, r2
 80079f8:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80079fc:	2000      	movs	r0, #0
 80079fe:	bd30      	pop	{r4, r5, pc}
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007a00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007a04:	40ab      	lsls	r3, r5
 8007a06:	43db      	mvns	r3, r3
 8007a08:	4019      	ands	r1, r3
 8007a0a:	63d1      	str	r1, [r2, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007a0c:	69d1      	ldr	r1, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007a0e:	eb00 1044 	add.w	r0, r0, r4, lsl #5
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & 0xFU)) << 16));
 8007a12:	400b      	ands	r3, r1
 8007a14:	61d3      	str	r3, [r2, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007a16:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8007a1a:	4b03      	ldr	r3, [pc, #12]	; (8007a28 <USB_DeactivateEndpoint+0x60>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007a22:	e7eb      	b.n	80079fc <USB_DeactivateEndpoint+0x34>
 8007a24:	ec337800 	.word	0xec337800
 8007a28:	eff37800 	.word	0xeff37800

08007a2c <USB_EP0StartXfer>:
{
 8007a2c:	b570      	push	{r4, r5, r6, lr}
  if (ep->is_in == 1U)
 8007a2e:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007a30:	780a      	ldrb	r2, [r1, #0]
 8007a32:	694d      	ldr	r5, [r1, #20]
 8007a34:	4e35      	ldr	r6, [pc, #212]	; (8007b0c <USB_EP0StartXfer+0xe0>)
  if (ep->is_in == 1U)
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	f04f 0320 	mov.w	r3, #32
 8007a3c:	d145      	bne.n	8007aca <USB_EP0StartXfer+0x9e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a3e:	fb13 0302 	smlabb	r3, r3, r2, r0
    if (ep->xfer_len == 0U)
 8007a42:	bb45      	cbnz	r5, 8007a96 <USB_EP0StartXfer+0x6a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a44:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007a48:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007a4c:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007a50:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a54:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007a58:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007a5c:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a60:	f8d3 4910 	ldr.w	r4, [r3, #2320]	; 0x910
 8007a64:	4026      	ands	r6, r4
 8007a66:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
    if (ep->xfer_len > 0U)
 8007a6a:	694b      	ldr	r3, [r1, #20]
 8007a6c:	b14b      	cbz	r3, 8007a82 <USB_EP0StartXfer+0x56>
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007a6e:	780b      	ldrb	r3, [r1, #0]
 8007a70:	f8d0 5834 	ldr.w	r5, [r0, #2100]	; 0x834
 8007a74:	f003 010f 	and.w	r1, r3, #15
 8007a78:	2301      	movs	r3, #1
 8007a7a:	408b      	lsls	r3, r1
 8007a7c:	432b      	orrs	r3, r5
 8007a7e:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a82:	eb00 1042 	add.w	r0, r0, r2, lsl #5
 8007a86:	f8d0 1900 	ldr.w	r1, [r0, #2304]	; 0x900
 8007a8a:	f041 4104 	orr.w	r1, r1, #2214592512	; 0x84000000
 8007a8e:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8007a92:	2000      	movs	r0, #0
 8007a94:	bd70      	pop	{r4, r5, r6, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9a:	691c      	ldr	r4, [r3, #16]
 8007a9c:	4026      	ands	r6, r4
 8007a9e:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007aa0:	691c      	ldr	r4, [r3, #16]
 8007aa2:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007aa6:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007aaa:	611c      	str	r4, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8007aac:	688c      	ldr	r4, [r1, #8]
 8007aae:	42a5      	cmp	r5, r4
        ep->xfer_len = ep->maxpacket;
 8007ab0:	bf88      	it	hi
 8007ab2:	614c      	strhi	r4, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ab4:	691c      	ldr	r4, [r3, #16]
 8007ab6:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8007aba:	611c      	str	r4, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007abc:	694c      	ldr	r4, [r1, #20]
 8007abe:	691d      	ldr	r5, [r3, #16]
 8007ac0:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007ac4:	432c      	orrs	r4, r5
 8007ac6:	611c      	str	r4, [r3, #16]
 8007ac8:	e7cf      	b.n	8007a6a <USB_EP0StartXfer+0x3e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007aca:	fb13 0002 	smlabb	r0, r3, r2, r0
 8007ace:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007ad2:	691a      	ldr	r2, [r3, #16]
 8007ad4:	4032      	ands	r2, r6
 8007ad6:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007ade:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007ae2:	611a      	str	r2, [r3, #16]
 8007ae4:	688a      	ldr	r2, [r1, #8]
    if (ep->xfer_len > 0U)
 8007ae6:	b105      	cbz	r5, 8007aea <USB_EP0StartXfer+0xbe>
      ep->xfer_len = ep->maxpacket;
 8007ae8:	614a      	str	r2, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007aea:	6919      	ldr	r1, [r3, #16]
 8007aec:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
 8007af0:	6119      	str	r1, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007af2:	6919      	ldr	r1, [r3, #16]
 8007af4:	f3c2 0212 	ubfx	r2, r2, #0, #19
 8007af8:	430a      	orrs	r2, r1
 8007afa:	611a      	str	r2, [r3, #16]
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007afc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007b00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b04:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007b08:	e7c3      	b.n	8007a92 <USB_EP0StartXfer+0x66>
 8007b0a:	bf00      	nop
 8007b0c:	fff80000 	.word	0xfff80000

08007b10 <USB_WritePacket>:
  count32b = ((uint32_t)len + 3U) / 4U;
 8007b10:	3303      	adds	r3, #3
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007b12:	eb00 3202 	add.w	r2, r0, r2, lsl #12
 8007b16:	f023 0303 	bic.w	r3, r3, #3
 8007b1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b1e:	440b      	add	r3, r1
  for (i = 0U; i < count32b; i++)
 8007b20:	4299      	cmp	r1, r3
 8007b22:	d101      	bne.n	8007b28 <USB_WritePacket+0x18>
}
 8007b24:	2000      	movs	r0, #0
 8007b26:	4770      	bx	lr
    USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 8007b28:	f851 0b04 	ldr.w	r0, [r1], #4
 8007b2c:	6010      	str	r0, [r2, #0]
 8007b2e:	e7f7      	b.n	8007b20 <USB_WritePacket+0x10>

08007b30 <USB_EPStartXfer>:
{
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8007b32:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007b34:	780d      	ldrb	r5, [r1, #0]
 8007b36:	4e5f      	ldr	r6, [pc, #380]	; (8007cb4 <USB_EPStartXfer+0x184>)
  if (ep->is_in == 1U)
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	f04f 0220 	mov.w	r2, #32
 8007b3e:	694b      	ldr	r3, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b40:	fb12 0205 	smlabb	r2, r2, r5, r0
  if (ep->is_in == 1U)
 8007b44:	d169      	bne.n	8007c1a <USB_EPStartXfer+0xea>
    if (ep->xfer_len == 0U)
 8007b46:	bb83      	cbnz	r3, 8007baa <USB_EPStartXfer+0x7a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b48:	f502 6410 	add.w	r4, r2, #2304	; 0x900
 8007b4c:	f8d2 2910 	ldr.w	r2, [r2, #2320]	; 0x910
 8007b50:	f022 52ff 	bic.w	r2, r2, #534773760	; 0x1fe00000
 8007b54:	f422 12c0 	bic.w	r2, r2, #1572864	; 0x180000
 8007b58:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b5a:	6922      	ldr	r2, [r4, #16]
 8007b5c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007b60:	6122      	str	r2, [r4, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b62:	6922      	ldr	r2, [r4, #16]
 8007b64:	4016      	ands	r6, r2
 8007b66:	6126      	str	r6, [r4, #16]
    if (ep->type != EP_TYPE_ISOC)
 8007b68:	78ce      	ldrb	r6, [r1, #3]
 8007b6a:	2e01      	cmp	r6, #1
 8007b6c:	f000 8094 	beq.w	8007c98 <USB_EPStartXfer+0x168>
      if (ep->xfer_len > 0U)
 8007b70:	b153      	cbz	r3, 8007b88 <USB_EPStartXfer+0x58>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & 0xFU);
 8007b72:	780a      	ldrb	r2, [r1, #0]
 8007b74:	f8d0 e834 	ldr.w	lr, [r0, #2100]	; 0x834
 8007b78:	f002 040f 	and.w	r4, r2, #15
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	40a2      	lsls	r2, r4
 8007b80:	ea42 020e 	orr.w	r2, r2, lr
 8007b84:	f8c0 2834 	str.w	r2, [r0, #2100]	; 0x834
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b88:	eb00 1245 	add.w	r2, r0, r5, lsl #5
    if (ep->type == EP_TYPE_ISOC)
 8007b8c:	2e01      	cmp	r6, #1
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b8e:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007b92:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8007b96:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
    if (ep->type == EP_TYPE_ISOC)
 8007b9a:	d104      	bne.n	8007ba6 <USB_EPStartXfer+0x76>
      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007b9c:	780a      	ldrb	r2, [r1, #0]
 8007b9e:	68c9      	ldr	r1, [r1, #12]
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	f7ff ffb5 	bl	8007b10 <USB_WritePacket>
}
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007baa:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
 8007bae:	4034      	ands	r4, r6
 8007bb0:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bb4:	f8d2 4910 	ldr.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007bb8:	688e      	ldr	r6, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007bba:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007bbe:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007bc2:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007bc6:	199c      	adds	r4, r3, r6
 8007bc8:	3c01      	subs	r4, #1
 8007bca:	fbb4 f6f6 	udiv	r6, r4, r6
 8007bce:	4c3a      	ldr	r4, [pc, #232]	; (8007cb8 <USB_EPStartXfer+0x188>)
 8007bd0:	f8d2 7910 	ldr.w	r7, [r2, #2320]	; 0x910
 8007bd4:	ea04 44c6 	and.w	r4, r4, r6, lsl #19
 8007bd8:	433c      	orrs	r4, r7
 8007bda:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007bde:	f8d2 6910 	ldr.w	r6, [r2, #2320]	; 0x910
 8007be2:	f3c3 0412 	ubfx	r4, r3, #0, #19
 8007be6:	4334      	orrs	r4, r6
 8007be8:	f8c2 4910 	str.w	r4, [r2, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8007bec:	78cc      	ldrb	r4, [r1, #3]
 8007bee:	2c01      	cmp	r4, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 8007bf4:	d1b8      	bne.n	8007b68 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007bf6:	6914      	ldr	r4, [r2, #16]
 8007bf8:	f024 44c0 	bic.w	r4, r4, #1610612736	; 0x60000000
 8007bfc:	6114      	str	r4, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007bfe:	6914      	ldr	r4, [r2, #16]
 8007c00:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8007c04:	6114      	str	r4, [r2, #16]
 8007c06:	e7af      	b.n	8007b68 <USB_EPStartXfer+0x38>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007c08:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007c0c:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007c10:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007c14:	f8c2 4900 	str.w	r4, [r2, #2304]	; 0x900
 8007c18:	e7b6      	b.n	8007b88 <USB_EPStartXfer+0x58>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c1a:	f502 6530 	add.w	r5, r2, #2816	; 0xb00
 8007c1e:	692c      	ldr	r4, [r5, #16]
 8007c20:	4034      	ands	r4, r6
 8007c22:	612c      	str	r4, [r5, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c24:	692c      	ldr	r4, [r5, #16]
 8007c26:	f024 54ff 	bic.w	r4, r4, #534773760	; 0x1fe00000
 8007c2a:	f424 14c0 	bic.w	r4, r4, #1572864	; 0x180000
 8007c2e:	612c      	str	r4, [r5, #16]
 8007c30:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len == 0U)
 8007c32:	b9fb      	cbnz	r3, 8007c74 <USB_EPStartXfer+0x144>
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007c34:	692b      	ldr	r3, [r5, #16]
 8007c36:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007c3a:	431c      	orrs	r4, r3
 8007c3c:	612c      	str	r4, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c3e:	692b      	ldr	r3, [r5, #16]
 8007c40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c44:	612b      	str	r3, [r5, #16]
    if (ep->type == EP_TYPE_ISOC)
 8007c46:	78cb      	ldrb	r3, [r1, #3]
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d10c      	bne.n	8007c66 <USB_EPStartXfer+0x136>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c4c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8007c50:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c54:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007c58:	bf0c      	ite	eq
 8007c5a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c5e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8007c62:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c66:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8007c6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c6e:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
  return HAL_OK;
 8007c72:	e798      	b.n	8007ba6 <USB_EPStartXfer+0x76>
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c74:	4e10      	ldr	r6, [pc, #64]	; (8007cb8 <USB_EPStartXfer+0x188>)
 8007c76:	692f      	ldr	r7, [r5, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007c78:	4423      	add	r3, r4
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	fbb3 f3f4 	udiv	r3, r3, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c80:	ea06 46c3 	and.w	r6, r6, r3, lsl #19
 8007c84:	433e      	orrs	r6, r7
 8007c86:	612e      	str	r6, [r5, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	692e      	ldr	r6, [r5, #16]
 8007c8c:	435c      	muls	r4, r3
 8007c8e:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8007c92:	4334      	orrs	r4, r6
 8007c94:	612c      	str	r4, [r5, #16]
 8007c96:	e7d6      	b.n	8007c46 <USB_EPStartXfer+0x116>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c98:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8007c9c:	f412 7f80 	tst.w	r2, #256	; 0x100
 8007ca0:	f04f 0220 	mov.w	r2, #32
 8007ca4:	d0b0      	beq.n	8007c08 <USB_EPStartXfer+0xd8>
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ca6:	fb12 0205 	smlabb	r2, r2, r5, r0
 8007caa:	f8d2 4900 	ldr.w	r4, [r2, #2304]	; 0x900
 8007cae:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8007cb2:	e7af      	b.n	8007c14 <USB_EPStartXfer+0xe4>
 8007cb4:	fff80000 	.word	0xfff80000
 8007cb8:	1ff80000 	.word	0x1ff80000

08007cbc <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007cbc:	3203      	adds	r2, #3
 8007cbe:	f022 0203 	bic.w	r2, r2, #3
 8007cc2:	440a      	add	r2, r1
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007cc4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8007cc8:	4291      	cmp	r1, r2
 8007cca:	d101      	bne.n	8007cd0 <USB_ReadPacket+0x14>
}
 8007ccc:	4608      	mov	r0, r1
 8007cce:	4770      	bx	lr
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 8007cd0:	6803      	ldr	r3, [r0, #0]
 8007cd2:	f841 3b04 	str.w	r3, [r1], #4
 8007cd6:	e7f7      	b.n	8007cc8 <USB_ReadPacket+0xc>

08007cd8 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8007cd8:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007cda:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	f04f 0320 	mov.w	r3, #32
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ce2:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007ce6:	d112      	bne.n	8007d0e <USB_EPSetStall+0x36>
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007ce8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	db06      	blt.n	8007cfe <USB_EPSetStall+0x26>
 8007cf0:	b12a      	cbz	r2, 8007cfe <USB_EPSetStall+0x26>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007cf2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007cf6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007cfa:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007cfe:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007d02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d06:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	4770      	bx	lr
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d0e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	db06      	blt.n	8007d24 <USB_EPSetStall+0x4c>
 8007d16:	b12a      	cbz	r2, 8007d24 <USB_EPSetStall+0x4c>
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007d18:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d20:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007d24:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d2c:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 8007d30:	e7eb      	b.n	8007d0a <USB_EPSetStall+0x32>

08007d32 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 8007d32:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8007d34:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	f04f 0320 	mov.w	r3, #32
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d3c:	fb13 0002 	smlabb	r0, r3, r2, r0
  if (ep->is_in == 1U)
 8007d40:	d111      	bne.n	8007d66 <USB_EPClearStall+0x34>
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007d42:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007d46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d4a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d4e:	78cb      	ldrb	r3, [r1, #3]
 8007d50:	3b02      	subs	r3, #2
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d805      	bhi.n	8007d62 <USB_EPClearStall+0x30>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d56:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d5e:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8007d62:	2000      	movs	r0, #0
 8007d64:	4770      	bx	lr
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007d66:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8007d6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007d6e:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007d72:	78cb      	ldrb	r3, [r1, #3]
 8007d74:	3b02      	subs	r3, #2
 8007d76:	2b01      	cmp	r3, #1
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007d78:	bf9e      	ittt	ls
 8007d7a:	f8d0 3b00 	ldrls.w	r3, [r0, #2816]	; 0xb00
 8007d7e:	f043 5380 	orrls.w	r3, r3, #268435456	; 0x10000000
 8007d82:	f8c0 3b00 	strls.w	r3, [r0, #2816]	; 0xb00
 8007d86:	e7ec      	b.n	8007d62 <USB_EPClearStall+0x30>

08007d88 <USB_SetDevAddress>:
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d88:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007d8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d90:	f8c0 3800 	str.w	r3, [r0, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d94:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8007d98:	0109      	lsls	r1, r1, #4
 8007d9a:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
 8007d9e:	4319      	orrs	r1, r3
 8007da0:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8007da4:	2000      	movs	r0, #0
 8007da6:	4770      	bx	lr

08007da8 <USB_DevConnect>:
{
 8007da8:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007daa:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007dae:	f023 0302 	bic.w	r3, r3, #2
 8007db2:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8007db6:	2003      	movs	r0, #3
 8007db8:	f7f9 f930 	bl	800101c <HAL_Delay>
}
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	bd08      	pop	{r3, pc}

08007dc0 <USB_DevDisconnect>:
{
 8007dc0:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dc2:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8007dc6:	f043 0302 	orr.w	r3, r3, #2
 8007dca:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8007dce:	2003      	movs	r0, #3
 8007dd0:	f7f9 f924 	bl	800101c <HAL_Delay>
}
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	bd08      	pop	{r3, pc}

08007dd8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8007dd8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8007dda:	6980      	ldr	r0, [r0, #24]
}
 8007ddc:	4010      	ands	r0, r2
 8007dde:	4770      	bx	lr

08007de0 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007de0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007de4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007de8:	69c0      	ldr	r0, [r0, #28]
 8007dea:	4018      	ands	r0, r3
}
 8007dec:	0c00      	lsrs	r0, r0, #16
 8007dee:	4770      	bx	lr

08007df0 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8007df0:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8007df4:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007df8:	69c0      	ldr	r0, [r0, #28]
 8007dfa:	4018      	ands	r0, r3
}
 8007dfc:	b280      	uxth	r0, r0
 8007dfe:	4770      	bx	lr

08007e00 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e00:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e04:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e08:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e0c:	6940      	ldr	r0, [r0, #20]
}
 8007e0e:	4010      	ands	r0, r2
 8007e10:	4770      	bx	lr

08007e12 <USB_ReadDevInEPInterrupt>:
{
 8007e12:	b510      	push	{r4, lr}
  msk = USBx_DEVICE->DIEPMSK;
 8007e14:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e18:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e1c:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007e20:	f001 010f 	and.w	r1, r1, #15
 8007e24:	40cb      	lsrs	r3, r1
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e26:	f500 6010 	add.w	r0, r0, #2304	; 0x900
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007e2a:	01db      	lsls	r3, r3, #7
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e2c:	6880      	ldr	r0, [r0, #8]
  msk |= ((emp >> (epnum & 0xFU)) & 0x1U) << 7;
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	4323      	orrs	r3, r4
}
 8007e32:	4018      	ands	r0, r3
 8007e34:	bd10      	pop	{r4, pc}

08007e36 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8007e36:	6940      	ldr	r0, [r0, #20]
}
 8007e38:	f000 0001 	and.w	r0, r0, #1
 8007e3c:	4770      	bx	lr

08007e3e <USB_ActivateSetup>:
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007e3e:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8007e42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007e46:	f023 0307 	bic.w	r3, r3, #7
 8007e4a:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8007e4e:	f500 6300 	add.w	r3, r0, #2048	; 0x800
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	f002 0206 	and.w	r2, r2, #6
 8007e58:	2a04      	cmp	r2, #4
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8007e5a:	bf02      	ittt	eq
 8007e5c:	f8d0 2900 	ldreq.w	r2, [r0, #2304]	; 0x900
 8007e60:	f042 0203 	orreq.w	r2, r2, #3
 8007e64:	f8c0 2900 	streq.w	r2, [r0, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007e68:	685a      	ldr	r2, [r3, #4]
 8007e6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e6e:	605a      	str	r2, [r3, #4]
}
 8007e70:	2000      	movs	r0, #0
 8007e72:	4770      	bx	lr

08007e74 <USB_EP0_OutStart>:
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e74:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8007e78:	2000      	movs	r0, #0
 8007e7a:	6118      	str	r0, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e7c:	691a      	ldr	r2, [r3, #16]
 8007e7e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8007e82:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e84:	691a      	ldr	r2, [r3, #16]
 8007e86:	f042 0218 	orr.w	r2, r2, #24
 8007e8a:	611a      	str	r2, [r3, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e8c:	691a      	ldr	r2, [r3, #16]
 8007e8e:	f042 42c0 	orr.w	r2, r2, #1610612736	; 0x60000000
 8007e92:	611a      	str	r2, [r3, #16]
}
 8007e94:	4770      	bx	lr
	...

08007e98 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgFSDesc);
 8007e98:	2329      	movs	r3, #41	; 0x29
 8007e9a:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
}
 8007e9c:	4800      	ldr	r0, [pc, #0]	; (8007ea0 <USBD_CUSTOM_HID_GetFSCfgDesc+0x8>)
 8007e9e:	4770      	bx	lr
 8007ea0:	2000005c 	.word	0x2000005c

08007ea4 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_CfgHSDesc);
 8007ea4:	2329      	movs	r3, #41	; 0x29
 8007ea6:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
}
 8007ea8:	4800      	ldr	r0, [pc, #0]	; (8007eac <USBD_CUSTOM_HID_GetHSCfgDesc+0x8>)
 8007eaa:	4770      	bx	lr
 8007eac:	20000088 	.word	0x20000088

08007eb0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007eb0:	2329      	movs	r3, #41	; 0x29
 8007eb2:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
}
 8007eb4:	4800      	ldr	r0, [pc, #0]	; (8007eb8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x8>)
 8007eb6:	4770      	bx	lr
 8007eb8:	200000cc 	.word	0x200000cc

08007ebc <USBD_CUSTOM_HID_DataIn>:
static uint8_t  USBD_CUSTOM_HID_DataIn (USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007ebc:	f8d0 3290 	ldr.w	r3, [r0, #656]	; 0x290
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	7718      	strb	r0, [r3, #28]

  return USBD_OK;
}
 8007ec4:	4770      	bx	lr

08007ec6 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007ec6:	b510      	push	{r4, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007ec8:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290

  if (hhid->IsReportAvailable == 1U)
 8007ecc:	69a3      	ldr	r3, [r4, #24]
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	d107      	bne.n	8007ee2 <USBD_CUSTOM_HID_EP0_RxReady+0x1c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007ed2:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007ed6:	7861      	ldrb	r1, [r4, #1]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	7820      	ldrb	r0, [r4, #0]
 8007edc:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	61a3      	str	r3, [r4, #24]
  }

  return USBD_OK;
}
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	bd10      	pop	{r4, pc}
	...

08007ee8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007ee8:	230a      	movs	r3, #10
 8007eea:	8003      	strh	r3, [r0, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
}
 8007eec:	4800      	ldr	r0, [pc, #0]	; (8007ef0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x8>)
 8007eee:	4770      	bx	lr
 8007ef0:	200000c0 	.word	0x200000c0

08007ef4 <USBD_CUSTOM_HID_DataOut>:
{
 8007ef4:	b538      	push	{r3, r4, r5, lr}
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007ef6:	f8d0 5290 	ldr.w	r5, [r0, #656]	; 0x290
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007efa:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8007efe:	7869      	ldrb	r1, [r5, #1]
 8007f00:	68db      	ldr	r3, [r3, #12]
{
 8007f02:	4604      	mov	r4, r0
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007f04:	7828      	ldrb	r0, [r5, #0]
 8007f06:	4798      	blx	r3
  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR , hhid->Report_buf,
 8007f08:	230c      	movs	r3, #12
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	4620      	mov	r0, r4
 8007f10:	f019 fe1c 	bl	8021b4c <USBD_LL_PrepareReceive>
}
 8007f14:	2000      	movs	r0, #0
 8007f16:	bd38      	pop	{r3, r4, r5, pc}

08007f18 <USBD_CUSTOM_HID_Setup>:
{
 8007f18:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t status_info = 0U;
 8007f1a:	2500      	movs	r5, #0
 8007f1c:	f8ad 5006 	strh.w	r5, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f20:	780d      	ldrb	r5, [r1, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8007f22:	f8d0 4290 	ldr.w	r4, [r0, #656]	; 0x290
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f26:	f015 0560 	ands.w	r5, r5, #96	; 0x60
{
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	460a      	mov	r2, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f2e:	d028      	beq.n	8007f82 <USBD_CUSTOM_HID_Setup+0x6a>
 8007f30:	2d20      	cmp	r5, #32
 8007f32:	d161      	bne.n	8007ff8 <USBD_CUSTOM_HID_Setup+0xe0>
    switch (req->bRequest)
 8007f34:	7849      	ldrb	r1, [r1, #1]
 8007f36:	3902      	subs	r1, #2
 8007f38:	2909      	cmp	r1, #9
 8007f3a:	d85b      	bhi.n	8007ff4 <USBD_CUSTOM_HID_Setup+0xdc>
 8007f3c:	e8df f001 	tbb	[pc, r1]
 8007f40:	5a5a0a15 	.word	0x5a5a0a15
 8007f44:	195a5a5a 	.word	0x195a5a5a
 8007f48:	0511      	.short	0x0511
      hhid->Protocol = (uint8_t)(req->wValue);
 8007f4a:	7893      	ldrb	r3, [r2, #2]
 8007f4c:	60e3      	str	r3, [r4, #12]
  uint8_t ret = USBD_OK;
 8007f4e:	2000      	movs	r0, #0
}
 8007f50:	b003      	add	sp, #12
 8007f52:	bd30      	pop	{r4, r5, pc}
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007f54:	2201      	movs	r2, #1
 8007f56:	f104 010c 	add.w	r1, r4, #12
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 fc18 	bl	8008790 <USBD_CtlSendData>
 8007f60:	e7f5      	b.n	8007f4e <USBD_CUSTOM_HID_Setup+0x36>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007f62:	8853      	ldrh	r3, [r2, #2]
 8007f64:	0a1b      	lsrs	r3, r3, #8
 8007f66:	6123      	str	r3, [r4, #16]
 8007f68:	e7f1      	b.n	8007f4e <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f104 0110 	add.w	r1, r4, #16
 8007f70:	e7f3      	b.n	8007f5a <USBD_CUSTOM_HID_Setup+0x42>
      hhid->IsReportAvailable = 1U;
 8007f72:	2101      	movs	r1, #1
 8007f74:	61a1      	str	r1, [r4, #24]
      USBD_CtlPrepareRx (pdev, hhid->Report_buf, req->wLength);
 8007f76:	88d2      	ldrh	r2, [r2, #6]
 8007f78:	4621      	mov	r1, r4
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f000 fc1d 	bl	80087ba <USBD_CtlPrepareRx>
 8007f80:	e7e5      	b.n	8007f4e <USBD_CUSTOM_HID_Setup+0x36>
    switch (req->bRequest)
 8007f82:	7849      	ldrb	r1, [r1, #1]
 8007f84:	290b      	cmp	r1, #11
 8007f86:	d835      	bhi.n	8007ff4 <USBD_CUSTOM_HID_Setup+0xdc>
 8007f88:	e8df f001 	tbb	[pc, r1]
 8007f8c:	34343406 	.word	0x34343406
 8007f90:	340e3434 	.word	0x340e3434
 8007f94:	2d253434 	.word	0x2d253434
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f98:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007f9c:	2903      	cmp	r1, #3
 8007f9e:	d129      	bne.n	8007ff4 <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007fa0:	2202      	movs	r2, #2
 8007fa2:	f10d 0106 	add.w	r1, sp, #6
 8007fa6:	e7d8      	b.n	8007f5a <USBD_CUSTOM_HID_Setup+0x42>
      if( req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8007fa8:	8851      	ldrh	r1, [r2, #2]
 8007faa:	0a09      	lsrs	r1, r1, #8
 8007fac:	2922      	cmp	r1, #34	; 0x22
 8007fae:	d107      	bne.n	8007fc0 <USBD_CUSTOM_HID_Setup+0xa8>
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8007fb0:	88d2      	ldrh	r2, [r2, #6]
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007fb2:	f8d3 1294 	ldr.w	r1, [r3, #660]	; 0x294
        len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE , req->wLength);
 8007fb6:	2a21      	cmp	r2, #33	; 0x21
 8007fb8:	bf28      	it	cs
 8007fba:	2221      	movcs	r2, #33	; 0x21
        pbuf =  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007fbc:	6809      	ldr	r1, [r1, #0]
 8007fbe:	e7cc      	b.n	8007f5a <USBD_CUSTOM_HID_Setup+0x42>
        if( req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007fc0:	2921      	cmp	r1, #33	; 0x21
 8007fc2:	d105      	bne.n	8007fd0 <USBD_CUSTOM_HID_Setup+0xb8>
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8007fc4:	88d2      	ldrh	r2, [r2, #6]
          pbuf = USBD_CUSTOM_HID_Desc;
 8007fc6:	490e      	ldr	r1, [pc, #56]	; (8008000 <USBD_CUSTOM_HID_Setup+0xe8>)
          len = MIN(USB_CUSTOM_HID_DESC_SIZ , req->wLength);
 8007fc8:	2a09      	cmp	r2, #9
 8007fca:	bf28      	it	cs
 8007fcc:	2209      	movcs	r2, #9
 8007fce:	e7c4      	b.n	8007f5a <USBD_CUSTOM_HID_Setup+0x42>
  uint8_t  *pbuf = NULL;
 8007fd0:	2100      	movs	r1, #0
  uint16_t len = 0U;
 8007fd2:	460a      	mov	r2, r1
 8007fd4:	e7c1      	b.n	8007f5a <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fd6:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007fda:	2903      	cmp	r1, #3
 8007fdc:	d10a      	bne.n	8007ff4 <USBD_CUSTOM_HID_Setup+0xdc>
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f104 0114 	add.w	r1, r4, #20
 8007fe4:	e7b9      	b.n	8007f5a <USBD_CUSTOM_HID_Setup+0x42>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fe6:	f893 1274 	ldrb.w	r1, [r3, #628]	; 0x274
 8007fea:	2903      	cmp	r1, #3
 8007fec:	d102      	bne.n	8007ff4 <USBD_CUSTOM_HID_Setup+0xdc>
        hhid->AltSetting = (uint8_t)(req->wValue);
 8007fee:	7893      	ldrb	r3, [r2, #2]
 8007ff0:	6163      	str	r3, [r4, #20]
 8007ff2:	e7ac      	b.n	8007f4e <USBD_CUSTOM_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8007ff4:	4611      	mov	r1, r2
 8007ff6:	4618      	mov	r0, r3
    USBD_CtlError (pdev, req);
 8007ff8:	f000 fba3 	bl	8008742 <USBD_CtlError>
    ret = USBD_FAIL;
 8007ffc:	2002      	movs	r0, #2
    break;
 8007ffe:	e7a7      	b.n	8007f50 <USBD_CUSTOM_HID_Setup+0x38>
 8008000:	200000b4 	.word	0x200000b4

08008004 <USBD_CUSTOM_HID_DeInit>:
{
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008008:	2181      	movs	r1, #129	; 0x81
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800800a:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800800c:	f019 fd44 	bl	8021a98 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008010:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008012:	2101      	movs	r1, #1
 8008014:	4620      	mov	r0, r4
 8008016:	f019 fd3f 	bl	8021a98 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 800801a:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800801e:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
  if(pdev->pClassData != NULL)
 8008022:	b14b      	cbz	r3, 8008038 <USBD_CUSTOM_HID_DeInit+0x34>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008024:	f8d4 3294 	ldr.w	r3, [r4, #660]	; 0x294
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800802c:	f8d4 0290 	ldr.w	r0, [r4, #656]	; 0x290
 8008030:	f019 fdd0 	bl	8021bd4 <USBD_static_free>
    pdev->pClassData = NULL;
 8008034:	f8c4 5290 	str.w	r5, [r4, #656]	; 0x290
}
 8008038:	2000      	movs	r0, #0
 800803a:	bd38      	pop	{r3, r4, r5, pc}

0800803c <USBD_CUSTOM_HID_Init>:
{
 800803c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800803e:	4605      	mov	r5, r0
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008040:	2401      	movs	r4, #1
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008042:	2340      	movs	r3, #64	; 0x40
 8008044:	2203      	movs	r2, #3
 8008046:	2181      	movs	r1, #129	; 0x81
 8008048:	f019 fd16 	bl	8021a78 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 800804c:	230c      	movs	r3, #12
 800804e:	2203      	movs	r2, #3
 8008050:	4621      	mov	r1, r4
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008052:	62ec      	str	r4, [r5, #44]	; 0x2c
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008054:	4628      	mov	r0, r5
 8008056:	f019 fd0f 	bl	8021a78 <USBD_LL_OpenEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 800805a:	f8c5 4158 	str.w	r4, [r5, #344]	; 0x158
  pdev->pClassData = USBD_malloc(sizeof (USBD_CUSTOM_HID_HandleTypeDef));
 800805e:	2020      	movs	r0, #32
 8008060:	f019 fdb4 	bl	8021bcc <USBD_static_malloc>
 8008064:	4606      	mov	r6, r0
 8008066:	f8c5 0290 	str.w	r0, [r5, #656]	; 0x290
  if(pdev->pClassData == NULL)
 800806a:	b168      	cbz	r0, 8008088 <USBD_CUSTOM_HID_Init+0x4c>
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800806c:	f8d5 3294 	ldr.w	r3, [r5, #660]	; 0x294
    hhid->state = CUSTOM_HID_IDLE;
 8008070:	2700      	movs	r7, #0
 8008072:	7707      	strb	r7, [r0, #28]
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	4798      	blx	r3
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008078:	230c      	movs	r3, #12
 800807a:	4632      	mov	r2, r6
 800807c:	4621      	mov	r1, r4
 800807e:	4628      	mov	r0, r5
 8008080:	f019 fd64 	bl	8021b4c <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8008084:	4638      	mov	r0, r7
 8008086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1U;
 8008088:	4620      	mov	r0, r4
}
 800808a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800808c <USBD_CUSTOM_HID_SendReport>:
{
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8008090:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008094:	2a03      	cmp	r2, #3
 8008096:	d109      	bne.n	80080ac <USBD_CUSTOM_HID_SendReport+0x20>
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)pdev->pClassData;
 8008098:	f8d0 6290 	ldr.w	r6, [r0, #656]	; 0x290
    if(hhid->state == CUSTOM_HID_IDLE)
 800809c:	7f35      	ldrb	r5, [r6, #28]
 800809e:	2401      	movs	r4, #1
 80080a0:	b935      	cbnz	r5, 80080b0 <USBD_CUSTOM_HID_SendReport+0x24>
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80080a2:	460a      	mov	r2, r1
      hhid->state = CUSTOM_HID_BUSY;
 80080a4:	7734      	strb	r4, [r6, #28]
      USBD_LL_Transmit (pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80080a6:	2181      	movs	r1, #129	; 0x81
 80080a8:	f019 fd42 	bl	8021b30 <USBD_LL_Transmit>
  return USBD_OK;
 80080ac:	2000      	movs	r0, #0
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
      return USBD_BUSY;
 80080b0:	4620      	mov	r0, r4
}
 80080b2:	bd70      	pop	{r4, r5, r6, pc}

080080b4 <USBD_CUSTOM_HID_RegisterInterface>:
uint8_t  USBD_CUSTOM_HID_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                             USBD_CUSTOM_HID_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if(fops != NULL)
 80080b4:	b119      	cbz	r1, 80080be <USBD_CUSTOM_HID_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80080b6:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
    ret = USBD_OK;
 80080ba:	2000      	movs	r0, #0
 80080bc:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 80080be:	2002      	movs	r0, #2
  }

  return ret;
}
 80080c0:	4770      	bx	lr

080080c2 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080c2:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80080c4:	b180      	cbz	r0, 80080e8 <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80080c6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80080ca:	b113      	cbz	r3, 80080d2 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80080cc:	2300      	movs	r3, #0
 80080ce:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80080d2:	b109      	cbz	r1, 80080d8 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80080d4:	f8c0 1288 	str.w	r1, [r0, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80080d8:	2301      	movs	r3, #1
 80080da:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  pdev->id = id;
 80080de:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80080e0:	f019 fc88 	bl	80219f4 <USBD_LL_Init>

  return USBD_OK;
 80080e4:	2000      	movs	r0, #0
 80080e6:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 80080e8:	2002      	movs	r0, #2
}
 80080ea:	bd08      	pop	{r3, pc}

080080ec <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80080ec:	b119      	cbz	r1, 80080f6 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80080ee:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
    status = USBD_OK;
 80080f2:	2000      	movs	r0, #0
 80080f4:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80080f6:	2002      	movs	r0, #2
  }

  return status;
}
 80080f8:	4770      	bx	lr

080080fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80080fa:	b508      	push	{r3, lr}

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80080fc:	f019 fcae 	bl	8021a5c <USBD_LL_Start>

  return USBD_OK;
}
 8008100:	2000      	movs	r0, #0
 8008102:	bd08      	pop	{r3, pc}

08008104 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008104:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;

  if(pdev->pClass != NULL)
 8008106:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800810a:	b90b      	cbnz	r3, 8008110 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800810c:	2002      	movs	r0, #2
 800810e:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4798      	blx	r3
 8008114:	2800      	cmp	r0, #0
 8008116:	d1f9      	bne.n	800810c <USBD_SetClassConfig+0x8>
      ret = USBD_OK;
    }
  }

  return ret;
}
 8008118:	bd08      	pop	{r3, pc}

0800811a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800811a:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800811c:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	4798      	blx	r3
  return USBD_OK;
}
 8008124:	2000      	movs	r0, #0
 8008126:	bd08      	pop	{r3, pc}

08008128 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008128:	b538      	push	{r3, r4, r5, lr}
 800812a:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800812c:	f500 7520 	add.w	r5, r0, #640	; 0x280
 8008130:	4628      	mov	r0, r5
 8008132:	f000 faf2 	bl	800871a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008136:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8008138:	f894 1280 	ldrb.w	r1, [r4, #640]	; 0x280
  pdev->ep0_state = USBD_EP0_SETUP;
 800813c:	f8c4 326c 	str.w	r3, [r4, #620]	; 0x26c
  pdev->ep0_data_len = pdev->request.wLength;
 8008140:	f8b4 3286 	ldrh.w	r3, [r4, #646]	; 0x286
 8008144:	f8c4 3270 	str.w	r3, [r4, #624]	; 0x270
  switch (pdev->request.bmRequest & 0x1FU)
 8008148:	f001 031f 	and.w	r3, r1, #31
 800814c:	2b01      	cmp	r3, #1
 800814e:	d00e      	beq.n	800816e <USBD_LL_SetupStage+0x46>
 8008150:	d307      	bcc.n	8008162 <USBD_LL_SetupStage+0x3a>
 8008152:	2b02      	cmp	r3, #2
 8008154:	d010      	beq.n	8008178 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
    break;

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008156:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800815a:	4620      	mov	r0, r4
 800815c:	f019 fcaa 	bl	8021ab4 <USBD_LL_StallEP>
    break;
 8008160:	e003      	b.n	800816a <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8008162:	4629      	mov	r1, r5
 8008164:	4620      	mov	r0, r4
 8008166:	f000 f901 	bl	800836c <USBD_StdDevReq>
  }

  return USBD_OK;
}
 800816a:	2000      	movs	r0, #0
 800816c:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 800816e:	4629      	mov	r1, r5
 8008170:	4620      	mov	r0, r4
 8008172:	f000 fa25 	bl	80085c0 <USBD_StdItfReq>
    break;
 8008176:	e7f8      	b.n	800816a <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);
 8008178:	4629      	mov	r1, r5
 800817a:	4620      	mov	r0, r4
 800817c:	f000 fa45 	bl	800860a <USBD_StdEPReq>
    break;
 8008180:	e7f3      	b.n	800816a <USBD_LL_SetupStage+0x42>

08008182 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008182:	b570      	push	{r4, r5, r6, lr}
 8008184:	4605      	mov	r5, r0
 8008186:	4616      	mov	r6, r2
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008188:	bb39      	cbnz	r1, 80081da <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800818a:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 800818e:	2b03      	cmp	r3, #3
 8008190:	d11e      	bne.n	80081d0 <USBD_LL_DataOutStage+0x4e>
    {
      if(pep->rem_length > pep->maxpacket)
 8008192:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
 8008196:	f8d0 2150 	ldr.w	r2, [r0, #336]	; 0x150
 800819a:	4293      	cmp	r3, r2
 800819c:	d90b      	bls.n	80081b6 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 800819e:	1a9b      	subs	r3, r3, r2

        USBD_CtlContinueRx (pdev,
 80081a0:	429a      	cmp	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80081a2:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
        USBD_CtlContinueRx (pdev,
 80081a6:	bf8c      	ite	hi
 80081a8:	b29a      	uxthhi	r2, r3
 80081aa:	b292      	uxthls	r2, r2
 80081ac:	4631      	mov	r1, r6
 80081ae:	f000 fb13 	bl	80087d8 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80081b2:	2000      	movs	r0, #0
    pdev->pClass->DataOut(pdev, epnum);
 80081b4:	bd70      	pop	{r4, r5, r6, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80081b6:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	b123      	cbz	r3, 80081c8 <USBD_LL_DataOutStage+0x46>
 80081be:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80081c2:	2a03      	cmp	r2, #3
 80081c4:	d100      	bne.n	80081c8 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev);
 80081c6:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80081c8:	4628      	mov	r0, r5
 80081ca:	f000 fb0d 	bl	80087e8 <USBD_CtlSendStatus>
 80081ce:	e7f0      	b.n	80081b2 <USBD_LL_DataOutStage+0x30>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80081d0:	2b05      	cmp	r3, #5
 80081d2:	d1ee      	bne.n	80081b2 <USBD_LL_DataOutStage+0x30>
        USBD_LL_StallEP(pdev, 0U);
 80081d4:	f019 fc6e 	bl	8021ab4 <USBD_LL_StallEP>
 80081d8:	e7eb      	b.n	80081b2 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL) &&
 80081da:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	b12b      	cbz	r3, 80081ee <USBD_LL_DataOutStage+0x6c>
 80081e2:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 80081e6:	2a03      	cmp	r2, #3
 80081e8:	d101      	bne.n	80081ee <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 80081ea:	4798      	blx	r3
 80081ec:	e7e1      	b.n	80081b2 <USBD_LL_DataOutStage+0x30>
    return USBD_FAIL;
 80081ee:	2002      	movs	r0, #2
}
 80081f0:	bd70      	pop	{r4, r5, r6, pc}

080081f2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80081f2:	b570      	push	{r4, r5, r6, lr}
 80081f4:	4613      	mov	r3, r2
 80081f6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80081f8:	460e      	mov	r6, r1
 80081fa:	2900      	cmp	r1, #0
 80081fc:	d148      	bne.n	8008290 <USBD_LL_DataInStage+0x9e>
  {
    pep = &pdev->ep_in[0];

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80081fe:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8008202:	2a02      	cmp	r2, #2
 8008204:	d13d      	bne.n	8008282 <USBD_LL_DataInStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8008206:	6a05      	ldr	r5, [r0, #32]
 8008208:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800820a:	4295      	cmp	r5, r2
 800820c:	d914      	bls.n	8008238 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800820e:	1aaa      	subs	r2, r5, r2
 8008210:	6202      	str	r2, [r0, #32]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008212:	4619      	mov	r1, r3
 8008214:	b292      	uxth	r2, r2
 8008216:	f000 fac8 	bl	80087aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800821a:	4633      	mov	r3, r6
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800821c:	461a      	mov	r2, r3
 800821e:	4619      	mov	r1, r3
 8008220:	4620      	mov	r0, r4
 8008222:	f019 fc93 	bl	8021b4c <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008226:	f894 3278 	ldrb.w	r3, [r4, #632]	; 0x278
 800822a:	2b01      	cmp	r3, #1
 800822c:	f04f 0000 	mov.w	r0, #0
 8008230:	d13a      	bne.n	80082a8 <USBD_LL_DataInStage+0xb6>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8008232:	f884 0278 	strb.w	r0, [r4, #632]	; 0x278
 8008236:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008238:	69c3      	ldr	r3, [r0, #28]
 800823a:	fbb3 f5f2 	udiv	r5, r3, r2
 800823e:	fb02 3515 	mls	r5, r2, r5, r3
 8008242:	b965      	cbnz	r5, 800825e <USBD_LL_DataInStage+0x6c>
 8008244:	429a      	cmp	r2, r3
 8008246:	d80a      	bhi.n	800825e <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8008248:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 800824c:	4293      	cmp	r3, r2
 800824e:	d206      	bcs.n	800825e <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008250:	462a      	mov	r2, r5
 8008252:	f000 faaa 	bl	80087aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008256:	f8c4 5270 	str.w	r5, [r4, #624]	; 0x270
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800825a:	462b      	mov	r3, r5
 800825c:	e7de      	b.n	800821c <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800825e:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	b12b      	cbz	r3, 8008272 <USBD_LL_DataInStage+0x80>
 8008266:	f894 2274 	ldrb.w	r2, [r4, #628]	; 0x274
 800826a:	2a03      	cmp	r2, #3
 800826c:	d101      	bne.n	8008272 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev);
 800826e:	4620      	mov	r0, r4
 8008270:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8008272:	2180      	movs	r1, #128	; 0x80
 8008274:	4620      	mov	r0, r4
 8008276:	f019 fc1d 	bl	8021ab4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800827a:	4620      	mov	r0, r4
 800827c:	f000 fabf 	bl	80087fe <USBD_CtlReceiveStatus>
 8008280:	e7d1      	b.n	8008226 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008282:	f032 0304 	bics.w	r3, r2, #4
 8008286:	d1ce      	bne.n	8008226 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8008288:	2180      	movs	r1, #128	; 0x80
 800828a:	f019 fc13 	bl	8021ab4 <USBD_LL_StallEP>
 800828e:	e7ca      	b.n	8008226 <USBD_LL_DataInStage+0x34>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8008290:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	b133      	cbz	r3, 80082a6 <USBD_LL_DataInStage+0xb4>
 8008298:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800829c:	2a03      	cmp	r2, #3
 800829e:	d102      	bne.n	80082a6 <USBD_LL_DataInStage+0xb4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum);
 80082a0:	4798      	blx	r3
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80082a2:	2000      	movs	r0, #0
    pdev->pClass->DataIn(pdev, epnum);
 80082a4:	bd70      	pop	{r4, r5, r6, pc}
    return USBD_FAIL;
 80082a6:	2002      	movs	r0, #2
}
 80082a8:	bd70      	pop	{r4, r5, r6, pc}

080082aa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 80082aa:	b570      	push	{r4, r5, r6, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082ac:	2200      	movs	r2, #0
{
 80082ae:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082b0:	4611      	mov	r1, r2
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082b2:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082b4:	2640      	movs	r6, #64	; 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082b6:	2340      	movs	r3, #64	; 0x40
 80082b8:	f019 fbde 	bl	8021a78 <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082bc:	4633      	mov	r3, r6
 80082be:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082c0:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082c4:	f8c4 6150 	str.w	r6, [r4, #336]	; 0x150
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082c8:	2200      	movs	r2, #0
 80082ca:	4620      	mov	r0, r4
 80082cc:	f019 fbd4 	bl	8021a78 <USBD_LL_OpenEP>
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
  pdev->dev_config= 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80082d0:	f8d4 3290 	ldr.w	r3, [r4, #656]	; 0x290
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082d4:	61a5      	str	r5, [r4, #24]
  pdev->ep0_state = USBD_EP0_IDLE;
 80082d6:	2100      	movs	r1, #0
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082d8:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082da:	f884 5274 	strb.w	r5, [r4, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 80082de:	f8c4 126c 	str.w	r1, [r4, #620]	; 0x26c
  pdev->dev_config= 0U;
 80082e2:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 80082e4:	f8c4 127c 	str.w	r1, [r4, #636]	; 0x27c
  if (pdev->pClassData)
 80082e8:	b123      	cbz	r3, 80082f4 <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80082ea:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80082ee:	4620      	mov	r0, r4
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	4798      	blx	r3
  }

  return USBD_OK;
}
 80082f4:	2000      	movs	r0, #0
 80082f6:	bd70      	pop	{r4, r5, r6, pc}

080082f8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80082f8:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80082fa:	2000      	movs	r0, #0
 80082fc:	4770      	bx	lr

080082fe <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80082fe:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008302:	f880 3275 	strb.w	r3, [r0, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008306:	2304      	movs	r3, #4
 8008308:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 800830c:	2000      	movs	r0, #0
 800830e:	4770      	bx	lr

08008310 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;
 8008310:	f890 3275 	ldrb.w	r3, [r0, #629]	; 0x275
 8008314:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
  return USBD_OK;
}
 8008318:	2000      	movs	r0, #0
 800831a:	4770      	bx	lr

0800831c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800831c:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800831e:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008322:	2a03      	cmp	r2, #3
 8008324:	d104      	bne.n	8008330 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8008326:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	b103      	cbz	r3, 8008330 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800832e:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8008330:	2000      	movs	r0, #0
 8008332:	bd08      	pop	{r3, pc}

08008334 <USBD_LL_IsoINIncomplete>:
 8008334:	2000      	movs	r0, #0
 8008336:	4770      	bx	lr

08008338 <USBD_LL_IsoOUTIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8008338:	2000      	movs	r0, #0
 800833a:	4770      	bx	lr

0800833c <USBD_LL_DevConnected>:
{
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
}
 800833c:	2000      	movs	r0, #0
 800833e:	4770      	bx	lr

08008340 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8008340:	b508      	push	{r3, lr}
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008342:	2201      	movs	r2, #1
 8008344:	f880 2274 	strb.w	r2, [r0, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008348:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
 800834c:	7901      	ldrb	r1, [r0, #4]
 800834e:	6852      	ldr	r2, [r2, #4]
 8008350:	4790      	blx	r2

  return USBD_OK;
}
 8008352:	2000      	movs	r0, #0
 8008354:	bd08      	pop	{r3, pc}

08008356 <USBD_CtlError.constprop.1>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8008356:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80U);
 8008358:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 800835a:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 800835c:	f019 fbaa 	bl	8021ab4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008360:	4620      	mov	r0, r4
 8008362:	2100      	movs	r1, #0
}
 8008364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8008368:	f019 bba4 	b.w	8021ab4 <USBD_LL_StallEP>

0800836c <USBD_StdDevReq>:
{
 800836c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800836e:	780b      	ldrb	r3, [r1, #0]
 8008370:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008374:	2b20      	cmp	r3, #32
{
 8008376:	4604      	mov	r4, r0
 8008378:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800837a:	d014      	beq.n	80083a6 <USBD_StdDevReq+0x3a>
 800837c:	2b40      	cmp	r3, #64	; 0x40
 800837e:	d012      	beq.n	80083a6 <USBD_StdDevReq+0x3a>
 8008380:	2b00      	cmp	r3, #0
 8008382:	f040 809c 	bne.w	80084be <USBD_StdDevReq+0x152>
    switch (req->bRequest)
 8008386:	784b      	ldrb	r3, [r1, #1]
 8008388:	2b09      	cmp	r3, #9
 800838a:	f200 8097 	bhi.w	80084bc <USBD_StdDevReq+0x150>
 800838e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008392:	00ef      	.short	0x00ef
 8008394:	00950109 	.word	0x00950109
 8008398:	00950102 	.word	0x00950102
 800839c:	00130089 	.word	0x00130089
 80083a0:	00da0095 	.word	0x00da0095
 80083a4:	00a7      	.short	0x00a7
    pdev->pClass->Setup(pdev, req);
 80083a6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80083aa:	4629      	mov	r1, r5
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	4620      	mov	r0, r4
 80083b0:	4798      	blx	r3
}
 80083b2:	2000      	movs	r0, #0
 80083b4:	b003      	add	sp, #12
 80083b6:	bd30      	pop	{r4, r5, pc}
  switch (req->wValue >> 8)
 80083b8:	8849      	ldrh	r1, [r1, #2]
 80083ba:	0a0b      	lsrs	r3, r1, #8
 80083bc:	3b01      	subs	r3, #1
 80083be:	2b0e      	cmp	r3, #14
 80083c0:	d87c      	bhi.n	80084bc <USBD_StdDevReq+0x150>
 80083c2:	e8df f003 	tbb	[pc, r3]
 80083c6:	2824      	.short	0x2824
 80083c8:	5c7b7b35 	.word	0x5c7b7b35
 80083cc:	7b7b7b65 	.word	0x7b7b7b65
 80083d0:	7b7b7b7b 	.word	0x7b7b7b7b
 80083d4:	08          	.byte	0x08
 80083d5:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80083d6:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 80083da:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80083dc:	7c20      	ldrb	r0, [r4, #16]
 80083de:	f10d 0106 	add.w	r1, sp, #6
 80083e2:	4798      	blx	r3
  if((len != 0U) && (req->wLength != 0U))
 80083e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80083e8:	b152      	cbz	r2, 8008400 <USBD_StdDevReq+0x94>
 80083ea:	88eb      	ldrh	r3, [r5, #6]
 80083ec:	b143      	cbz	r3, 8008400 <USBD_StdDevReq+0x94>
    len = MIN(len, req->wLength);
 80083ee:	429a      	cmp	r2, r3
 80083f0:	bf28      	it	cs
 80083f2:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, pbuf, len);
 80083f4:	4601      	mov	r1, r0
 80083f6:	4620      	mov	r0, r4
    len = MIN(len, req->wLength);
 80083f8:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, pbuf, len);
 80083fc:	f000 f9c8 	bl	8008790 <USBD_CtlSendData>
  if(req->wLength == 0U)
 8008400:	88eb      	ldrh	r3, [r5, #6]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d1d5      	bne.n	80083b2 <USBD_StdDevReq+0x46>
    USBD_CtlSendStatus(pdev);
 8008406:	4620      	mov	r0, r4
 8008408:	f000 f9ee 	bl	80087e8 <USBD_CtlSendStatus>
 800840c:	e7d1      	b.n	80083b2 <USBD_StdDevReq+0x46>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800840e:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	e7e2      	b.n	80083dc <USBD_StdDevReq+0x70>
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008416:	7c02      	ldrb	r2, [r0, #16]
 8008418:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 800841c:	b932      	cbnz	r2, 800842c <USBD_StdDevReq+0xc0>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800841e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008420:	f10d 0006 	add.w	r0, sp, #6
 8008424:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008426:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008428:	7043      	strb	r3, [r0, #1]
 800842a:	e7db      	b.n	80083e4 <USBD_StdDevReq+0x78>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800842c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800842e:	e7f7      	b.n	8008420 <USBD_StdDevReq+0xb4>
    switch ((uint8_t)(req->wValue))
 8008430:	b2c9      	uxtb	r1, r1
 8008432:	2905      	cmp	r1, #5
 8008434:	d81c      	bhi.n	8008470 <USBD_StdDevReq+0x104>
 8008436:	e8df f001 	tbb	[pc, r1]
 800843a:	0703      	.short	0x0703
 800843c:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008440:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	e7c9      	b.n	80083dc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008448:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	e7c5      	b.n	80083dc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008450:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	e7c1      	b.n	80083dc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008458:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	e7bd      	b.n	80083dc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008460:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 8008464:	695b      	ldr	r3, [r3, #20]
 8008466:	e7b9      	b.n	80083dc <USBD_StdDevReq+0x70>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008468:	f8d0 3288 	ldr.w	r3, [r0, #648]	; 0x288
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	e7b5      	b.n	80083dc <USBD_StdDevReq+0x70>
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
 8008470:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008474:	f10d 0206 	add.w	r2, sp, #6
 8008478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847a:	4798      	blx	r3
 800847c:	e7b2      	b.n	80083e4 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800847e:	7c03      	ldrb	r3, [r0, #16]
 8008480:	b9e3      	cbnz	r3, 80084bc <USBD_StdDevReq+0x150>
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008482:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008486:	f10d 0006 	add.w	r0, sp, #6
 800848a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848c:	4798      	blx	r3
 800848e:	e7a9      	b.n	80083e4 <USBD_StdDevReq+0x78>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008490:	7c03      	ldrb	r3, [r0, #16]
 8008492:	b99b      	cbnz	r3, 80084bc <USBD_StdDevReq+0x150>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008494:	f8d0 328c 	ldr.w	r3, [r0, #652]	; 0x28c
 8008498:	f10d 0006 	add.w	r0, sp, #6
 800849c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80084a0:	2307      	movs	r3, #7
 80084a2:	e7c1      	b.n	8008428 <USBD_StdDevReq+0xbc>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084a4:	888b      	ldrh	r3, [r1, #4]
 80084a6:	b94b      	cbnz	r3, 80084bc <USBD_StdDevReq+0x150>
 80084a8:	88cb      	ldrh	r3, [r1, #6]
 80084aa:	b93b      	cbnz	r3, 80084bc <USBD_StdDevReq+0x150>
 80084ac:	884d      	ldrh	r5, [r1, #2]
 80084ae:	2d7f      	cmp	r5, #127	; 0x7f
 80084b0:	d804      	bhi.n	80084bc <USBD_StdDevReq+0x150>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084b2:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80084b6:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084b8:	b2e9      	uxtb	r1, r5
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084ba:	d103      	bne.n	80084c4 <USBD_StdDevReq+0x158>
      USBD_CtlError(pdev, req);
 80084bc:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 80084be:	f7ff ff4a 	bl	8008356 <USBD_CtlError.constprop.1>
    break;
 80084c2:	e776      	b.n	80083b2 <USBD_StdDevReq+0x46>
      pdev->dev_address = dev_addr;
 80084c4:	f880 1276 	strb.w	r1, [r0, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084c8:	f019 fb24 	bl	8021b14 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80084cc:	4620      	mov	r0, r4
 80084ce:	f000 f98b 	bl	80087e8 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 80084d2:	b11d      	cbz	r5, 80084dc <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80084d4:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 80084d6:	f884 3274 	strb.w	r3, [r4, #628]	; 0x274
 80084da:	e76a      	b.n	80083b2 <USBD_StdDevReq+0x46>
 80084dc:	2301      	movs	r3, #1
 80084de:	e7fa      	b.n	80084d6 <USBD_StdDevReq+0x16a>
  cfgidx = (uint8_t)(req->wValue);
 80084e0:	7889      	ldrb	r1, [r1, #2]
 80084e2:	4d36      	ldr	r5, [pc, #216]	; (80085bc <USBD_StdDevReq+0x250>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084e4:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80084e6:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80084e8:	d8e8      	bhi.n	80084bc <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 80084ea:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80084ee:	2b02      	cmp	r3, #2
 80084f0:	d008      	beq.n	8008504 <USBD_StdDevReq+0x198>
 80084f2:	2b03      	cmp	r3, #3
 80084f4:	d015      	beq.n	8008522 <USBD_StdDevReq+0x1b6>
      USBD_CtlError(pdev, req);
 80084f6:	f7ff ff2e 	bl	8008356 <USBD_CtlError.constprop.1>
      USBD_ClrClassConfig(pdev, cfgidx);
 80084fa:	7829      	ldrb	r1, [r5, #0]
 80084fc:	4620      	mov	r0, r4
 80084fe:	f7ff fe0c 	bl	800811a <USBD_ClrClassConfig>
 8008502:	e756      	b.n	80083b2 <USBD_StdDevReq+0x46>
      if (cfgidx)
 8008504:	2900      	cmp	r1, #0
 8008506:	f43f af7e 	beq.w	8008406 <USBD_StdDevReq+0x9a>
        pdev->dev_config = cfgidx;
 800850a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800850c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800850e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008510:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008514:	4620      	mov	r0, r4
 8008516:	f7ff fdf5 	bl	8008104 <USBD_SetClassConfig>
 800851a:	2802      	cmp	r0, #2
 800851c:	f47f af73 	bne.w	8008406 <USBD_StdDevReq+0x9a>
 8008520:	e7cc      	b.n	80084bc <USBD_StdDevReq+0x150>
      if (cfgidx == 0U)
 8008522:	b931      	cbnz	r1, 8008532 <USBD_StdDevReq+0x1c6>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008524:	2302      	movs	r3, #2
 8008526:	f880 3274 	strb.w	r3, [r0, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800852a:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800852c:	f7ff fdf5 	bl	800811a <USBD_ClrClassConfig>
 8008530:	e769      	b.n	8008406 <USBD_StdDevReq+0x9a>
      else if (cfgidx != pdev->dev_config)
 8008532:	6841      	ldr	r1, [r0, #4]
 8008534:	2901      	cmp	r1, #1
 8008536:	f43f af66 	beq.w	8008406 <USBD_StdDevReq+0x9a>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800853a:	b2c9      	uxtb	r1, r1
 800853c:	f7ff fded 	bl	800811a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008540:	7829      	ldrb	r1, [r5, #0]
 8008542:	6061      	str	r1, [r4, #4]
 8008544:	e7e6      	b.n	8008514 <USBD_StdDevReq+0x1a8>
  if (req->wLength != 1U)
 8008546:	88ca      	ldrh	r2, [r1, #6]
 8008548:	2a01      	cmp	r2, #1
 800854a:	d1b7      	bne.n	80084bc <USBD_StdDevReq+0x150>
    switch (pdev->dev_state)
 800854c:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0b3      	beq.n	80084bc <USBD_StdDevReq+0x150>
 8008554:	2b02      	cmp	r3, #2
 8008556:	d903      	bls.n	8008560 <USBD_StdDevReq+0x1f4>
 8008558:	2b03      	cmp	r3, #3
 800855a:	d1af      	bne.n	80084bc <USBD_StdDevReq+0x150>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800855c:	1d01      	adds	r1, r0, #4
 800855e:	e003      	b.n	8008568 <USBD_StdDevReq+0x1fc>
      pdev->dev_default_config = 0U;
 8008560:	4601      	mov	r1, r0
 8008562:	2300      	movs	r3, #0
 8008564:	f841 3f08 	str.w	r3, [r1, #8]!
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008568:	4620      	mov	r0, r4
 800856a:	f000 f911 	bl	8008790 <USBD_CtlSendData>
 800856e:	e720      	b.n	80083b2 <USBD_StdDevReq+0x46>
  switch (pdev->dev_state)
 8008570:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 8008574:	3b01      	subs	r3, #1
 8008576:	2b02      	cmp	r3, #2
 8008578:	d8a0      	bhi.n	80084bc <USBD_StdDevReq+0x150>
    if(req->wLength != 0x2U)
 800857a:	88cb      	ldrh	r3, [r1, #6]
 800857c:	2b02      	cmp	r3, #2
 800857e:	d19d      	bne.n	80084bc <USBD_StdDevReq+0x150>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008580:	2301      	movs	r3, #1
 8008582:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup)
 8008584:	f8d0 327c 	ldr.w	r3, [r0, #636]	; 0x27c
 8008588:	b10b      	cbz	r3, 800858e <USBD_StdDevReq+0x222>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800858a:	2303      	movs	r3, #3
 800858c:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800858e:	2202      	movs	r2, #2
 8008590:	f104 010c 	add.w	r1, r4, #12
 8008594:	e7e8      	b.n	8008568 <USBD_StdDevReq+0x1fc>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008596:	884b      	ldrh	r3, [r1, #2]
 8008598:	2b01      	cmp	r3, #1
 800859a:	f47f af0a 	bne.w	80083b2 <USBD_StdDevReq+0x46>
    pdev->dev_remote_wakeup = 1U;
 800859e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 80085a2:	e730      	b.n	8008406 <USBD_StdDevReq+0x9a>
  switch (pdev->dev_state)
 80085a4:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 80085a8:	3b01      	subs	r3, #1
 80085aa:	2b02      	cmp	r3, #2
 80085ac:	d886      	bhi.n	80084bc <USBD_StdDevReq+0x150>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80085ae:	884b      	ldrh	r3, [r1, #2]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	f47f aefe 	bne.w	80083b2 <USBD_StdDevReq+0x46>
      pdev->dev_remote_wakeup = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	e7f1      	b.n	800859e <USBD_StdDevReq+0x232>
 80085ba:	bf00      	nop
 80085bc:	20000b54 	.word	0x20000b54

080085c0 <USBD_StdItfReq>:
{
 80085c0:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085c2:	780b      	ldrb	r3, [r1, #0]
 80085c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085c8:	2b20      	cmp	r3, #32
{
 80085ca:	4604      	mov	r4, r0
 80085cc:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085ce:	d002      	beq.n	80085d6 <USBD_StdItfReq+0x16>
 80085d0:	2b40      	cmp	r3, #64	; 0x40
 80085d2:	d000      	beq.n	80085d6 <USBD_StdItfReq+0x16>
 80085d4:	b9b3      	cbnz	r3, 8008604 <USBD_StdItfReq+0x44>
    switch (pdev->dev_state)
 80085d6:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
 80085da:	3b01      	subs	r3, #1
 80085dc:	2b02      	cmp	r3, #2
 80085de:	d810      	bhi.n	8008602 <USBD_StdItfReq+0x42>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085e0:	792b      	ldrb	r3, [r5, #4]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d80d      	bhi.n	8008602 <USBD_StdItfReq+0x42>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80085e6:	f8d4 328c 	ldr.w	r3, [r4, #652]	; 0x28c
 80085ea:	4629      	mov	r1, r5
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	4620      	mov	r0, r4
 80085f0:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80085f2:	88eb      	ldrh	r3, [r5, #6]
 80085f4:	b91b      	cbnz	r3, 80085fe <USBD_StdItfReq+0x3e>
 80085f6:	b910      	cbnz	r0, 80085fe <USBD_StdItfReq+0x3e>
          USBD_CtlSendStatus(pdev);
 80085f8:	4620      	mov	r0, r4
 80085fa:	f000 f8f5 	bl	80087e8 <USBD_CtlSendStatus>
}
 80085fe:	2000      	movs	r0, #0
 8008600:	bd38      	pop	{r3, r4, r5, pc}
      USBD_CtlError(pdev, req);
 8008602:	4620      	mov	r0, r4
    USBD_CtlError(pdev, req);
 8008604:	f7ff fea7 	bl	8008356 <USBD_CtlError.constprop.1>
    break;
 8008608:	e7f9      	b.n	80085fe <USBD_StdItfReq+0x3e>

0800860a <USBD_StdEPReq>:
{
 800860a:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800860c:	780a      	ldrb	r2, [r1, #0]
 800860e:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8008612:	2a20      	cmp	r2, #32
{
 8008614:	4604      	mov	r4, r0
 8008616:	460b      	mov	r3, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008618:	d013      	beq.n	8008642 <USBD_StdEPReq+0x38>
 800861a:	2a40      	cmp	r2, #64	; 0x40
 800861c:	d011      	beq.n	8008642 <USBD_StdEPReq+0x38>
 800861e:	b96a      	cbnz	r2, 800863c <USBD_StdEPReq+0x32>
    switch (req->bRequest)
 8008620:	785d      	ldrb	r5, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8008622:	888a      	ldrh	r2, [r1, #4]
    switch (req->bRequest)
 8008624:	2d01      	cmp	r5, #1
  ep_addr  = LOBYTE(req->wIndex);
 8008626:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8008628:	d01f      	beq.n	800866a <USBD_StdEPReq+0x60>
 800862a:	d335      	bcc.n	8008698 <USBD_StdEPReq+0x8e>
 800862c:	2d03      	cmp	r5, #3
 800862e:	d105      	bne.n	800863c <USBD_StdEPReq+0x32>
      switch (pdev->dev_state)
 8008630:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 8008634:	2a02      	cmp	r2, #2
 8008636:	d026      	beq.n	8008686 <USBD_StdEPReq+0x7c>
 8008638:	2a03      	cmp	r2, #3
 800863a:	d00a      	beq.n	8008652 <USBD_StdEPReq+0x48>
    USBD_CtlError(pdev, req);
 800863c:	f7ff fe8b 	bl	8008356 <USBD_CtlError.constprop.1>
    break;
 8008640:	e005      	b.n	800864e <USBD_StdEPReq+0x44>
    pdev->pClass->Setup (pdev, req);
 8008642:	f8d4 228c 	ldr.w	r2, [r4, #652]	; 0x28c
 8008646:	4619      	mov	r1, r3
 8008648:	6892      	ldr	r2, [r2, #8]
 800864a:	4620      	mov	r0, r4
 800864c:	4790      	blx	r2
}
 800864e:	2000      	movs	r0, #0
 8008650:	bd38      	pop	{r3, r4, r5, pc}
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008652:	885a      	ldrh	r2, [r3, #2]
 8008654:	b92a      	cbnz	r2, 8008662 <USBD_StdEPReq+0x58>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008656:	064a      	lsls	r2, r1, #25
 8008658:	d003      	beq.n	8008662 <USBD_StdEPReq+0x58>
 800865a:	88db      	ldrh	r3, [r3, #6]
 800865c:	b90b      	cbnz	r3, 8008662 <USBD_StdEPReq+0x58>
            USBD_LL_StallEP(pdev, ep_addr);
 800865e:	f019 fa29 	bl	8021ab4 <USBD_LL_StallEP>
        USBD_CtlSendStatus(pdev);
 8008662:	4620      	mov	r0, r4
 8008664:	f000 f8c0 	bl	80087e8 <USBD_CtlSendStatus>
        break;
 8008668:	e7f1      	b.n	800864e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 800866a:	f890 2274 	ldrb.w	r2, [r0, #628]	; 0x274
 800866e:	2a02      	cmp	r2, #2
 8008670:	d009      	beq.n	8008686 <USBD_StdEPReq+0x7c>
 8008672:	2a03      	cmp	r2, #3
 8008674:	d1e2      	bne.n	800863c <USBD_StdEPReq+0x32>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008676:	885b      	ldrh	r3, [r3, #2]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e8      	bne.n	800864e <USBD_StdEPReq+0x44>
          if ((ep_addr & 0x7FU) != 0x00U)
 800867c:	064d      	lsls	r5, r1, #25
 800867e:	d0f0      	beq.n	8008662 <USBD_StdEPReq+0x58>
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8008680:	f019 fa26 	bl	8021ad0 <USBD_LL_ClearStallEP>
 8008684:	e7ed      	b.n	8008662 <USBD_StdEPReq+0x58>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008686:	064b      	lsls	r3, r1, #25
 8008688:	d017      	beq.n	80086ba <USBD_StdEPReq+0xb0>
          USBD_LL_StallEP(pdev, ep_addr);
 800868a:	f019 fa13 	bl	8021ab4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800868e:	2180      	movs	r1, #128	; 0x80
 8008690:	4620      	mov	r0, r4
 8008692:	f019 fa0f 	bl	8021ab4 <USBD_LL_StallEP>
 8008696:	e7da      	b.n	800864e <USBD_StdEPReq+0x44>
      switch (pdev->dev_state)
 8008698:	f890 3274 	ldrb.w	r3, [r0, #628]	; 0x274
 800869c:	2b02      	cmp	r3, #2
 800869e:	d00e      	beq.n	80086be <USBD_StdEPReq+0xb4>
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d1cb      	bne.n	800863c <USBD_StdEPReq+0x32>
        if((ep_addr & 0x80U) == 0x80U)
 80086a4:	f012 0f80 	tst.w	r2, #128	; 0x80
 80086a8:	f04f 0314 	mov.w	r3, #20
 80086ac:	f001 020f 	and.w	r2, r1, #15
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086b0:	fb03 0202 	mla	r2, r3, r2, r0
        if((ep_addr & 0x80U) == 0x80U)
 80086b4:	d012      	beq.n	80086dc <USBD_StdEPReq+0xd2>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80086b6:	6992      	ldr	r2, [r2, #24]
 80086b8:	b9da      	cbnz	r2, 80086f2 <USBD_StdEPReq+0xe8>
          USBD_CtlError(pdev, req);
 80086ba:	4620      	mov	r0, r4
 80086bc:	e7be      	b.n	800863c <USBD_StdEPReq+0x32>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086be:	0649      	lsls	r1, r1, #25
 80086c0:	d1fb      	bne.n	80086ba <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80086c2:	0613      	lsls	r3, r2, #24
 80086c4:	bf4c      	ite	mi
 80086c6:	f100 0114 	addmi.w	r1, r0, #20
 80086ca:	f500 71a0 	addpl.w	r1, r0, #320	; 0x140
          pep->status = 0x0000U;
 80086ce:	2300      	movs	r3, #0
 80086d0:	600b      	str	r3, [r1, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086d2:	2202      	movs	r2, #2
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80086d4:	4620      	mov	r0, r4
 80086d6:	f000 f85b 	bl	8008790 <USBD_CtlSendData>
          break;
 80086da:	e7b8      	b.n	800864e <USBD_StdEPReq+0x44>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086dc:	f8d2 2144 	ldr.w	r2, [r2, #324]	; 0x144
 80086e0:	2a00      	cmp	r2, #0
 80086e2:	d0ea      	beq.n	80086ba <USBD_StdEPReq+0xb0>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80086e4:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80086e8:	fb03 0505 	mla	r5, r3, r5, r0
 80086ec:	f505 75a0 	add.w	r5, r5, #320	; 0x140
 80086f0:	e004      	b.n	80086fc <USBD_StdEPReq+0xf2>
 80086f2:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80086f6:	fb05 3503 	mla	r5, r5, r3, r3
 80086fa:	4405      	add	r5, r0
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80086fc:	f011 037f 	ands.w	r3, r1, #127	; 0x7f
 8008700:	d103      	bne.n	800870a <USBD_StdEPReq+0x100>
            pep->status = 0x0001U;
 8008702:	602b      	str	r3, [r5, #0]
          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008704:	2202      	movs	r2, #2
 8008706:	4629      	mov	r1, r5
 8008708:	e7e4      	b.n	80086d4 <USBD_StdEPReq+0xca>
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800870a:	4620      	mov	r0, r4
 800870c:	f019 f9ee 	bl	8021aec <USBD_LL_IsStallEP>
 8008710:	b108      	cbz	r0, 8008716 <USBD_StdEPReq+0x10c>
            pep->status = 0x0001U;
 8008712:	2301      	movs	r3, #1
 8008714:	e7f5      	b.n	8008702 <USBD_StdEPReq+0xf8>
            pep->status = 0x0000U;
 8008716:	6028      	str	r0, [r5, #0]
 8008718:	e7f4      	b.n	8008704 <USBD_StdEPReq+0xfa>

0800871a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800871a:	780b      	ldrb	r3, [r1, #0]
 800871c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800871e:	784b      	ldrb	r3, [r1, #1]
 8008720:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008722:	78ca      	ldrb	r2, [r1, #3]
 8008724:	788b      	ldrb	r3, [r1, #2]
 8008726:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800872a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800872c:	794a      	ldrb	r2, [r1, #5]
 800872e:	790b      	ldrb	r3, [r1, #4]
 8008730:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8008734:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008736:	79ca      	ldrb	r2, [r1, #7]
 8008738:	798b      	ldrb	r3, [r1, #6]
 800873a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800873e:	80c3      	strh	r3, [r0, #6]
 8008740:	4770      	bx	lr

08008742 <USBD_CtlError>:
{
 8008742:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80U);
 8008744:	2180      	movs	r1, #128	; 0x80
{
 8008746:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80U);
 8008748:	f019 f9b4 	bl	8021ab4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800874c:	4620      	mov	r0, r4
 800874e:	2100      	movs	r1, #0
}
 8008750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0U);
 8008754:	f019 b9ae 	b.w	8021ab4 <USBD_LL_StallEP>

08008758 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008758:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0U;

  if (desc != NULL)
 800875a:	b188      	cbz	r0, 8008780 <USBD_GetString+0x28>
 800875c:	4605      	mov	r5, r0
 800875e:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0U;

    while (*buf != '\0')
 8008760:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008764:	b2db      	uxtb	r3, r3
 8008766:	2c00      	cmp	r4, #0
 8008768:	d1f9      	bne.n	800875e <USBD_GetString+0x6>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800876a:	3301      	adds	r3, #1
 800876c:	005b      	lsls	r3, r3, #1
 800876e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008770:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008772:	2303      	movs	r3, #3
 8008774:	704b      	strb	r3, [r1, #1]
 8008776:	3801      	subs	r0, #1
 8008778:	2302      	movs	r3, #2
    while (*desc != '\0')
 800877a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800877e:	b905      	cbnz	r5, 8008782 <USBD_GetString+0x2a>
 8008780:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8008782:	1c5a      	adds	r2, r3, #1
 8008784:	b2d2      	uxtb	r2, r2
 8008786:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0U;
 8008788:	3302      	adds	r3, #2
 800878a:	b2db      	uxtb	r3, r3
 800878c:	548c      	strb	r4, [r1, r2]
 800878e:	e7f4      	b.n	800877a <USBD_GetString+0x22>

08008790 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008790:	b510      	push	{r4, lr}
 8008792:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008794:	2202      	movs	r2, #2
 8008796:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800879a:	61c3      	str	r3, [r0, #28]
  pdev->ep_in[0].rem_length   = len;

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800879c:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800879e:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80087a0:	2100      	movs	r1, #0
 80087a2:	f019 f9c5 	bl	8021b30 <USBD_LL_Transmit>

  return USBD_OK;
}
 80087a6:	2000      	movs	r0, #0
 80087a8:	bd10      	pop	{r4, pc}

080087aa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 80087aa:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 80087ac:	4613      	mov	r3, r2
 80087ae:	460a      	mov	r2, r1
 80087b0:	2100      	movs	r1, #0
 80087b2:	f019 f9bd 	bl	8021b30 <USBD_LL_Transmit>

  return USBD_OK;
}
 80087b6:	2000      	movs	r0, #0
 80087b8:	bd08      	pop	{r3, pc}

080087ba <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 80087ba:	b510      	push	{r4, lr}
 80087bc:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80087be:	2203      	movs	r2, #3
 80087c0:	f8c0 226c 	str.w	r2, [r0, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 80087c4:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80087c8:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80087ca:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 80087ce:	2100      	movs	r1, #0
 80087d0:	f019 f9bc 	bl	8021b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80087d4:	2000      	movs	r0, #0
 80087d6:	bd10      	pop	{r4, pc}

080087d8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 80087d8:	b508      	push	{r3, lr}
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80087da:	4613      	mov	r3, r2
 80087dc:	460a      	mov	r2, r1
 80087de:	2100      	movs	r1, #0
 80087e0:	f019 f9b4 	bl	8021b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 80087e4:	2000      	movs	r0, #0
 80087e6:	bd08      	pop	{r3, pc}

080087e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80087e8:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80087ea:	2304      	movs	r3, #4
 80087ec:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80087f0:	2300      	movs	r3, #0
 80087f2:	461a      	mov	r2, r3
 80087f4:	4619      	mov	r1, r3
 80087f6:	f019 f99b 	bl	8021b30 <USBD_LL_Transmit>

  return USBD_OK;
}
 80087fa:	2000      	movs	r0, #0
 80087fc:	bd08      	pop	{r3, pc}

080087fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80087fe:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008800:	2305      	movs	r3, #5
 8008802:	f8c0 326c 	str.w	r3, [r0, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008806:	2300      	movs	r3, #0
 8008808:	461a      	mov	r2, r3
 800880a:	4619      	mov	r1, r3
 800880c:	f019 f99e 	bl	8021b4c <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8008810:	2000      	movs	r0, #0
 8008812:	bd08      	pop	{r3, pc}

08008814 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008814:	4b03      	ldr	r3, [pc, #12]	; (8008824 <disk_status+0x10>)
 8008816:	181a      	adds	r2, r3, r0
 8008818:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800881c:	7a10      	ldrb	r0, [r2, #8]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	4718      	bx	r3
 8008824:	20000b80 	.word	0x20000b80

08008828 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8008828:	4b06      	ldr	r3, [pc, #24]	; (8008844 <disk_initialize+0x1c>)
 800882a:	5c1a      	ldrb	r2, [r3, r0]
 800882c:	b942      	cbnz	r2, 8008840 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800882e:	2201      	movs	r2, #1
 8008830:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008832:	181a      	adds	r2, r3, r0
 8008834:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8008838:	7a10      	ldrb	r0, [r2, #8]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4718      	bx	r3
  }
  return stat;
}
 8008840:	2000      	movs	r0, #0
 8008842:	4770      	bx	lr
 8008844:	20000b80 	.word	0x20000b80

08008848 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008848:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800884a:	4c05      	ldr	r4, [pc, #20]	; (8008860 <disk_read+0x18>)
 800884c:	1825      	adds	r5, r4, r0
 800884e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8008852:	6860      	ldr	r0, [r4, #4]
 8008854:	6884      	ldr	r4, [r0, #8]
 8008856:	7a28      	ldrb	r0, [r5, #8]
 8008858:	46a4      	mov	ip, r4
  return res;
}
 800885a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800885c:	4760      	bx	ip
 800885e:	bf00      	nop
 8008860:	20000b80 	.word	0x20000b80

08008864 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008864:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008866:	4c05      	ldr	r4, [pc, #20]	; (800887c <disk_write+0x18>)
 8008868:	1825      	adds	r5, r4, r0
 800886a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800886e:	6860      	ldr	r0, [r4, #4]
 8008870:	68c4      	ldr	r4, [r0, #12]
 8008872:	7a28      	ldrb	r0, [r5, #8]
 8008874:	46a4      	mov	ip, r4
  return res;
}
 8008876:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008878:	4760      	bx	ip
 800887a:	bf00      	nop
 800887c:	20000b80 	.word	0x20000b80

08008880 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008880:	4b05      	ldr	r3, [pc, #20]	; (8008898 <disk_ioctl+0x18>)
{
 8008882:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008884:	181c      	adds	r4, r3, r0
 8008886:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800888a:	7a20      	ldrb	r0, [r4, #8]
 800888c:	685b      	ldr	r3, [r3, #4]
  return res;
}
 800888e:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	4718      	bx	r3
 8008896:	bf00      	nop
 8008898:	20000b80 	.word	0x20000b80

0800889c <ld_dword>:
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
	DWORD rv;

	rv = ptr[3];
	rv = rv << 8 | ptr[2];
 800889c:	8842      	ldrh	r2, [r0, #2]
	rv = rv << 8 | ptr[1];
 800889e:	7843      	ldrb	r3, [r0, #1]
	rv = rv << 8 | ptr[0];
 80088a0:	7800      	ldrb	r0, [r0, #0]
	rv = rv << 8 | ptr[1];
 80088a2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	return rv;
}
 80088a6:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80088aa:	4770      	bx	lr

080088ac <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 80088ac:	0a0b      	lsrs	r3, r1, #8
 80088ae:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80088b0:	7043      	strb	r3, [r0, #1]
 80088b2:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 80088b4:	0e09      	lsrs	r1, r1, #24
 80088b6:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 80088b8:	70c1      	strb	r1, [r0, #3]
 80088ba:	4770      	bx	lr

080088bc <mem_set>:
	}
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80088bc:	4402      	add	r2, r0
	BYTE *d = (BYTE*)dst;

	do {
		*d++ = (BYTE)val;
 80088be:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 80088c2:	4290      	cmp	r0, r2
 80088c4:	d1fb      	bne.n	80088be <mem_set+0x2>
}
 80088c6:	4770      	bx	lr

080088c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80088c8:	4b15      	ldr	r3, [pc, #84]	; (8008920 <chk_lock+0x58>)
 80088ca:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80088cc:	2500      	movs	r5, #0
 80088ce:	462a      	mov	r2, r5
 80088d0:	461c      	mov	r4, r3
		if (Files[i].fs) {	/* Existing entry */
 80088d2:	681e      	ldr	r6, [r3, #0]
 80088d4:	b1a6      	cbz	r6, 8008900 <chk_lock+0x38>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80088d6:	6807      	ldr	r7, [r0, #0]
 80088d8:	42be      	cmp	r6, r7
 80088da:	d112      	bne.n	8008902 <chk_lock+0x3a>
 80088dc:	685f      	ldr	r7, [r3, #4]
 80088de:	6886      	ldr	r6, [r0, #8]
 80088e0:	42b7      	cmp	r7, r6
 80088e2:	d10e      	bne.n	8008902 <chk_lock+0x3a>
				Files[i].clu == dp->obj.sclust &&
 80088e4:	689f      	ldr	r7, [r3, #8]
 80088e6:	6946      	ldr	r6, [r0, #20]
 80088e8:	42b7      	cmp	r7, r6
 80088ea:	d10a      	bne.n	8008902 <chk_lock+0x3a>
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80088ec:	b9b1      	cbnz	r1, 800891c <chk_lock+0x54>
 80088ee:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80088f2:	8993      	ldrh	r3, [r2, #12]
 80088f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80088f8:	bf14      	ite	ne
 80088fa:	2000      	movne	r0, #0
 80088fc:	2010      	moveq	r0, #16
 80088fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			be = 1;
 8008900:	2501      	movs	r5, #1
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008902:	3201      	adds	r2, #1
 8008904:	2a02      	cmp	r2, #2
 8008906:	f103 0310 	add.w	r3, r3, #16
 800890a:	d1e2      	bne.n	80088d2 <chk_lock+0xa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800890c:	b10d      	cbz	r5, 8008912 <chk_lock+0x4a>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800890e:	2000      	movs	r0, #0
 8008910:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008912:	2902      	cmp	r1, #2
 8008914:	bf0c      	ite	eq
 8008916:	2000      	moveq	r0, #0
 8008918:	2012      	movne	r0, #18
 800891a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800891c:	2010      	movs	r0, #16
 800891e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008920:	20000b5c 	.word	0x20000b5c

08008924 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008924:	4a1c      	ldr	r2, [pc, #112]	; (8008998 <inc_lock+0x74>)
 8008926:	b5f0      	push	{r4, r5, r6, r7, lr}
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8008928:	6805      	ldr	r5, [r0, #0]
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800892a:	2300      	movs	r3, #0
 800892c:	4616      	mov	r6, r2
		if (Files[i].fs == dp->obj.fs &&
 800892e:	6814      	ldr	r4, [r2, #0]
 8008930:	42ac      	cmp	r4, r5
 8008932:	d107      	bne.n	8008944 <inc_lock+0x20>
 8008934:	6857      	ldr	r7, [r2, #4]
 8008936:	6884      	ldr	r4, [r0, #8]
 8008938:	42a7      	cmp	r7, r4
 800893a:	d103      	bne.n	8008944 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
 800893c:	6897      	ldr	r7, [r2, #8]
 800893e:	6944      	ldr	r4, [r0, #20]
 8008940:	42a7      	cmp	r7, r4
 8008942:	d01d      	beq.n	8008980 <inc_lock+0x5c>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008944:	3301      	adds	r3, #1
 8008946:	2b02      	cmp	r3, #2
 8008948:	f102 0210 	add.w	r2, r2, #16
 800894c:	d1ef      	bne.n	800892e <inc_lock+0xa>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800894e:	6833      	ldr	r3, [r6, #0]
 8008950:	b113      	cbz	r3, 8008958 <inc_lock+0x34>
 8008952:	6933      	ldr	r3, [r6, #16]
 8008954:	b9eb      	cbnz	r3, 8008992 <inc_lock+0x6e>
 8008956:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 8008958:	011c      	lsls	r4, r3, #4
 800895a:	1932      	adds	r2, r6, r4
 800895c:	5135      	str	r5, [r6, r4]
		Files[i].clu = dp->obj.sclust;
 800895e:	6884      	ldr	r4, [r0, #8]
		Files[i].ofs = dp->dptr;
 8008960:	6940      	ldr	r0, [r0, #20]
 8008962:	6090      	str	r0, [r2, #8]
		Files[i].ctr = 0;
 8008964:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 8008966:	6054      	str	r4, [r2, #4]
		Files[i].ctr = 0;
 8008968:	8190      	strh	r0, [r2, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800896a:	b979      	cbnz	r1, 800898c <inc_lock+0x68>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800896c:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8008970:	8992      	ldrh	r2, [r2, #12]
 8008972:	3201      	adds	r2, #1
 8008974:	b292      	uxth	r2, r2
 8008976:	eb06 1603 	add.w	r6, r6, r3, lsl #4

	return i + 1;
 800897a:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800897c:	81b2      	strh	r2, [r6, #12]
	return i + 1;
 800897e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008980:	2900      	cmp	r1, #0
 8008982:	d0f3      	beq.n	800896c <inc_lock+0x48>
 8008984:	eb06 1203 	add.w	r2, r6, r3, lsl #4
 8008988:	8992      	ldrh	r2, [r2, #12]
 800898a:	b912      	cbnz	r2, 8008992 <inc_lock+0x6e>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800898c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008990:	e7f1      	b.n	8008976 <inc_lock+0x52>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008992:	2000      	movs	r0, #0
 8008994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008996:	bf00      	nop
 8008998:	20000b5c 	.word	0x20000b5c

0800899c <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800899c:	3801      	subs	r0, #1
 800899e:	2801      	cmp	r0, #1
 80089a0:	d80e      	bhi.n	80089c0 <dec_lock+0x24>
		n = Files[i].ctr;
 80089a2:	4a09      	ldr	r2, [pc, #36]	; (80089c8 <dec_lock+0x2c>)
 80089a4:	0103      	lsls	r3, r0, #4
 80089a6:	18d1      	adds	r1, r2, r3
 80089a8:	8989      	ldrh	r1, [r1, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
		if (n > 0) n--;				/* Decrement read mode open count */
 80089aa:	f421 7080 	bic.w	r0, r1, #256	; 0x100
 80089ae:	b280      	uxth	r0, r0
 80089b0:	b108      	cbz	r0, 80089b6 <dec_lock+0x1a>
 80089b2:	1e48      	subs	r0, r1, #1
 80089b4:	b280      	uxth	r0, r0
		Files[i].ctr = n;
 80089b6:	18d1      	adds	r1, r2, r3
 80089b8:	8188      	strh	r0, [r1, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80089ba:	b918      	cbnz	r0, 80089c4 <dec_lock+0x28>
 80089bc:	50d0      	str	r0, [r2, r3]
 80089be:	4770      	bx	lr
		res = FR_OK;
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80089c0:	2002      	movs	r0, #2
 80089c2:	4770      	bx	lr
		res = FR_OK;
 80089c4:	2000      	movs	r0, #0
	}
	return res;
}
 80089c6:	4770      	bx	lr
 80089c8:	20000b5c 	.word	0x20000b5c

080089cc <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089cc:	6983      	ldr	r3, [r0, #24]
	clst -= 2;
 80089ce:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089d0:	3b02      	subs	r3, #2
 80089d2:	4299      	cmp	r1, r3
	return clst * fs->csize + fs->database;
 80089d4:	bf3d      	ittte	cc
 80089d6:	8943      	ldrhcc	r3, [r0, #10]
 80089d8:	6ac0      	ldrcc	r0, [r0, #44]	; 0x2c
 80089da:	fb01 0003 	mlacc	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80089de:	2000      	movcs	r0, #0
}
 80089e0:	4770      	bx	lr

080089e2 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80089e2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
{
 80089e4:	b510      	push	{r4, lr}
	FATFS *fs = fp->obj.fs;
 80089e6:	6804      	ldr	r4, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80089e8:	3204      	adds	r2, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80089ea:	89a3      	ldrh	r3, [r4, #12]
 80089ec:	fbb1 f1f3 	udiv	r1, r1, r3
 80089f0:	8963      	ldrh	r3, [r4, #10]
 80089f2:	fbb1 f1f3 	udiv	r1, r1, r3
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80089f6:	6810      	ldr	r0, [r2, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80089f8:	b130      	cbz	r0, 8008a08 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80089fa:	4281      	cmp	r1, r0
 80089fc:	d302      	bcc.n	8008a04 <clmt_clust+0x22>
		cl -= ncl; tbl++;		/* Next fragment */
 80089fe:	1a09      	subs	r1, r1, r0
 8008a00:	3208      	adds	r2, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a02:	e7f8      	b.n	80089f6 <clmt_clust+0x14>
	}
	return cl + *tbl;	/* Return the cluster number */
 8008a04:	6850      	ldr	r0, [r2, #4]
 8008a06:	4408      	add	r0, r1
}
 8008a08:	bd10      	pop	{r4, pc}

08008a0a <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008a0a:	6802      	ldr	r2, [r0, #0]
{
 8008a0c:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 8008a0e:	b152      	cbz	r2, 8008a26 <get_ldnumber+0x1c>
 8008a10:	4611      	mov	r1, r2
 8008a12:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008a14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a18:	2c20      	cmp	r4, #32
 8008a1a:	d90c      	bls.n	8008a36 <get_ldnumber+0x2c>
 8008a1c:	2c3a      	cmp	r4, #58	; 0x3a
 8008a1e:	d1f8      	bne.n	8008a12 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8008a20:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008a22:	428b      	cmp	r3, r1
 8008a24:	d002      	beq.n	8008a2c <get_ldnumber+0x22>
	int vol = -1;
 8008a26:	f04f 30ff 	mov.w	r0, #4294967295
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8008a2a:	bd10      	pop	{r4, pc}
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008a2c:	7812      	ldrb	r2, [r2, #0]
 8008a2e:	2a30      	cmp	r2, #48	; 0x30
 8008a30:	d1f9      	bne.n	8008a26 <get_ldnumber+0x1c>
					*path = ++tt;
 8008a32:	3301      	adds	r3, #1
 8008a34:	6003      	str	r3, [r0, #0]
		vol = 0;		/* Drive 0 */
 8008a36:	2000      	movs	r0, #0
 8008a38:	bd10      	pop	{r4, pc}

08008a3a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008a3a:	b538      	push	{r3, r4, r5, lr}
 8008a3c:	460d      	mov	r5, r1
	FRESULT res;

	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008a3e:	4604      	mov	r4, r0
 8008a40:	b918      	cbnz	r0, 8008a4a <validate+0x10>
		*fs = 0;
 8008a42:	2300      	movs	r3, #0
 8008a44:	602b      	str	r3, [r5, #0]
		res = FR_INVALID_OBJECT;	/* The object is invalid */
 8008a46:	2009      	movs	r0, #9
 8008a48:	bd38      	pop	{r3, r4, r5, pc}
	if (!obj || !obj->fs || !obj->fs->fs_type || obj->fs->id != obj->id || (disk_status(obj->fs->drv) & STA_NOINIT)) {
 8008a4a:	6803      	ldr	r3, [r0, #0]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d0f8      	beq.n	8008a42 <validate+0x8>
 8008a50:	781a      	ldrb	r2, [r3, #0]
 8008a52:	2a00      	cmp	r2, #0
 8008a54:	d0f5      	beq.n	8008a42 <validate+0x8>
 8008a56:	88d9      	ldrh	r1, [r3, #6]
 8008a58:	8882      	ldrh	r2, [r0, #4]
 8008a5a:	4291      	cmp	r1, r2
 8008a5c:	d1f1      	bne.n	8008a42 <validate+0x8>
 8008a5e:	7858      	ldrb	r0, [r3, #1]
 8008a60:	f7ff fed8 	bl	8008814 <disk_status>
 8008a64:	f010 0001 	ands.w	r0, r0, #1
 8008a68:	d1eb      	bne.n	8008a42 <validate+0x8>
	} else {
		*fs = obj->fs;			/* Owner file sytem object */
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	602b      	str	r3, [r5, #0]
		ENTER_FF(obj->fs);		/* Lock file system */
		res = FR_OK;			/* Valid object */
	}
	return res;
}
 8008a6e:	bd38      	pop	{r3, r4, r5, pc}

08008a70 <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008a70:	3801      	subs	r0, #1
 8008a72:	440a      	add	r2, r1
			*d++ = *s++;
 8008a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a78:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 8008a7c:	4291      	cmp	r1, r2
 8008a7e:	d1f9      	bne.n	8008a74 <mem_cpy.part.0+0x4>
}
 8008a80:	4770      	bx	lr

08008a82 <ld_clust.isra.1>:
	rv = rv << 8 | ptr[0];
 8008a82:	7eca      	ldrb	r2, [r1, #27]
 8008a84:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 8008a86:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8008a88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	rv = rv << 8 | ptr[0];
 8008a8c:	bf01      	itttt	eq
 8008a8e:	7d48      	ldrbeq	r0, [r1, #21]
 8008a90:	7d0a      	ldrbeq	r2, [r1, #20]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008a92:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 8008a96:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	4770      	bx	lr

08008a9e <st_clust.isra.2>:
	*ptr++ = (BYTE)val; val >>= 8;
 8008a9e:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8008aa2:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 8008aa4:	76cb      	strb	r3, [r1, #27]
	if (fs->fs_type == FS_FAT32) {
 8008aa6:	7803      	ldrb	r3, [r0, #0]
 8008aa8:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008aaa:	bf01      	itttt	eq
 8008aac:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8008aae:	750a      	strbeq	r2, [r1, #20]
 8008ab0:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 8008ab2:	754a      	strbeq	r2, [r1, #21]
 8008ab4:	4770      	bx	lr

08008ab6 <sync_window.part.4>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		wsect = fs->winsect;	/* Current sector number */
 8008ab8:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008aba:	f100 0734 	add.w	r7, r0, #52	; 0x34
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 8008abe:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	462a      	mov	r2, r5
 8008ac4:	4639      	mov	r1, r7
 8008ac6:	7840      	ldrb	r0, [r0, #1]
 8008ac8:	f7ff fecc 	bl	8008864 <disk_write>
 8008acc:	b9a0      	cbnz	r0, 8008af8 <sync_window.part.4+0x42>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ad0:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
 8008ad2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008ad4:	1aeb      	subs	r3, r5, r3
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d301      	bcc.n	8008ade <sync_window.part.4+0x28>
	FRESULT res = FR_OK;
 8008ada:	2000      	movs	r0, #0
 8008adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008ade:	78a6      	ldrb	r6, [r4, #2]
 8008ae0:	2e01      	cmp	r6, #1
 8008ae2:	d9fa      	bls.n	8008ada <sync_window.part.4+0x24>
					wsect += fs->fsize;
 8008ae4:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008ae6:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 8008ae8:	441d      	add	r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 8008aea:	462a      	mov	r2, r5
 8008aec:	2301      	movs	r3, #1
 8008aee:	4639      	mov	r1, r7
 8008af0:	f7ff feb8 	bl	8008864 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008af4:	3e01      	subs	r6, #1
 8008af6:	e7f3      	b.n	8008ae0 <sync_window.part.4+0x2a>
			res = FR_DISK_ERR;
 8008af8:	2001      	movs	r0, #1
}
 8008afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008afc <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008afc:	78c3      	ldrb	r3, [r0, #3]
 8008afe:	b10b      	cbz	r3, 8008b04 <sync_window+0x8>
 8008b00:	f7ff bfd9 	b.w	8008ab6 <sync_window.part.4>
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	4770      	bx	lr

08008b08 <sync_fs>:
{
 8008b08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b0a:	4604      	mov	r4, r0
	res = sync_window(fs);
 8008b0c:	f7ff fff6 	bl	8008afc <sync_window>
 8008b10:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8008b12:	2800      	cmp	r0, #0
 8008b14:	d141      	bne.n	8008b9a <sync_fs+0x92>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008b16:	7823      	ldrb	r3, [r4, #0]
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d136      	bne.n	8008b8a <sync_fs+0x82>
 8008b1c:	7927      	ldrb	r7, [r4, #4]
 8008b1e:	2f01      	cmp	r7, #1
 8008b20:	d133      	bne.n	8008b8a <sync_fs+0x82>
			mem_set(fs->win, 0, SS(fs));
 8008b22:	f104 0634 	add.w	r6, r4, #52	; 0x34
 8008b26:	4601      	mov	r1, r0
 8008b28:	89a2      	ldrh	r2, [r4, #12]
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7ff fec6 	bl	80088bc <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 8008b30:	2355      	movs	r3, #85	; 0x55
 8008b32:	f884 3232 	strb.w	r3, [r4, #562]	; 0x232
	*ptr++ = (BYTE)val;
 8008b36:	23aa      	movs	r3, #170	; 0xaa
 8008b38:	f884 3233 	strb.w	r3, [r4, #563]	; 0x233
	*ptr++ = (BYTE)val; val >>= 8;
 8008b3c:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8008b3e:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8008b40:	2172      	movs	r1, #114	; 0x72
 8008b42:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8008b46:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	*ptr++ = (BYTE)val; val >>= 8;
 8008b4a:	2361      	movs	r3, #97	; 0x61
 8008b4c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
	*ptr++ = (BYTE)val;
 8008b50:	f884 2037 	strb.w	r2, [r4, #55]	; 0x37
	*ptr++ = (BYTE)val; val >>= 8;
 8008b54:	f884 221a 	strb.w	r2, [r4, #538]	; 0x21a
	*ptr++ = (BYTE)val;
 8008b58:	f884 321b 	strb.w	r3, [r4, #539]	; 0x21b
	*ptr++ = (BYTE)val; val >>= 8;
 8008b5c:	f884 1218 	strb.w	r1, [r4, #536]	; 0x218
	*ptr++ = (BYTE)val; val >>= 8;
 8008b60:	f884 1219 	strb.w	r1, [r4, #537]	; 0x219
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008b64:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008b68:	6961      	ldr	r1, [r4, #20]
 8008b6a:	f7ff fe9f 	bl	80088ac <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008b6e:	6921      	ldr	r1, [r4, #16]
 8008b70:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008b74:	f7ff fe9a 	bl	80088ac <st_dword>
			fs->winsect = fs->volbase + 1;
 8008b78:	6a22      	ldr	r2, [r4, #32]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008b7a:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8008b7c:	3201      	adds	r2, #1
 8008b7e:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8008b80:	463b      	mov	r3, r7
 8008b82:	4631      	mov	r1, r6
 8008b84:	f7ff fe6e 	bl	8008864 <disk_write>
			fs->fsi_flag = 0;
 8008b88:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	4611      	mov	r1, r2
 8008b8e:	7860      	ldrb	r0, [r4, #1]
 8008b90:	f7ff fe76 	bl	8008880 <disk_ioctl>
 8008b94:	3000      	adds	r0, #0
 8008b96:	bf18      	it	ne
 8008b98:	2001      	movne	r0, #1
}
 8008b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b9c <move_window>:
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008b9c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008b9e:	428b      	cmp	r3, r1
{
 8008ba0:	b570      	push	{r4, r5, r6, lr}
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	460d      	mov	r5, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8008ba6:	d012      	beq.n	8008bce <move_window+0x32>
		res = sync_window(fs);		/* Write-back changes */
 8008ba8:	f7ff ffa8 	bl	8008afc <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8008bac:	4604      	mov	r4, r0
 8008bae:	b960      	cbnz	r0, 8008bca <move_window+0x2e>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8008bb0:	462a      	mov	r2, r5
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8008bb8:	7870      	ldrb	r0, [r6, #1]
 8008bba:	f7ff fe45 	bl	8008848 <disk_read>
 8008bbe:	2800      	cmp	r0, #0
				res = FR_DISK_ERR;
 8008bc0:	bf1c      	itt	ne
 8008bc2:	f04f 35ff 	movne.w	r5, #4294967295
 8008bc6:	2401      	movne	r4, #1
			fs->winsect = sector;
 8008bc8:	6335      	str	r5, [r6, #48]	; 0x30
}
 8008bca:	4620      	mov	r0, r4
 8008bcc:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_OK;
 8008bce:	2400      	movs	r4, #0
 8008bd0:	e7fb      	b.n	8008bca <move_window+0x2e>
	...

08008bd4 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008bd4:	2300      	movs	r3, #0
{
 8008bd6:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008bd8:	70c3      	strb	r3, [r0, #3]
 8008bda:	f04f 33ff 	mov.w	r3, #4294967295
 8008bde:	6303      	str	r3, [r0, #48]	; 0x30
{
 8008be0:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008be2:	f7ff ffdb 	bl	8008b9c <move_window>
 8008be6:	bb30      	cbnz	r0, 8008c36 <check_fs+0x62>
	rv = rv << 8 | ptr[0];
 8008be8:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8008bec:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
 8008bf0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008bf4:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d11e      	bne.n	8008c3a <check_fs+0x66>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008bfc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008c00:	2be9      	cmp	r3, #233	; 0xe9
 8008c02:	d005      	beq.n	8008c10 <check_fs+0x3c>
 8008c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c06:	4a10      	ldr	r2, [pc, #64]	; (8008c48 <check_fs+0x74>)
 8008c08:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d116      	bne.n	8008c3e <check_fs+0x6a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008c10:	f104 006a 	add.w	r0, r4, #106	; 0x6a
 8008c14:	f7ff fe42 	bl	800889c <ld_dword>
 8008c18:	4b0c      	ldr	r3, [pc, #48]	; (8008c4c <check_fs+0x78>)
 8008c1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8008c1e:	4298      	cmp	r0, r3
 8008c20:	d00f      	beq.n	8008c42 <check_fs+0x6e>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008c22:	f104 0086 	add.w	r0, r4, #134	; 0x86
 8008c26:	f7ff fe39 	bl	800889c <ld_dword>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008c2a:	4b09      	ldr	r3, [pc, #36]	; (8008c50 <check_fs+0x7c>)
 8008c2c:	4298      	cmp	r0, r3
 8008c2e:	bf14      	ite	ne
 8008c30:	2002      	movne	r0, #2
 8008c32:	2000      	moveq	r0, #0
 8008c34:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008c36:	2004      	movs	r0, #4
 8008c38:	bd10      	pop	{r4, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008c3a:	2003      	movs	r0, #3
 8008c3c:	bd10      	pop	{r4, pc}
	return 2;
 8008c3e:	2002      	movs	r0, #2
 8008c40:	bd10      	pop	{r4, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008c42:	2000      	movs	r0, #0
}
 8008c44:	bd10      	pop	{r4, pc}
 8008c46:	bf00      	nop
 8008c48:	009000eb 	.word	0x009000eb
 8008c4c:	00544146 	.word	0x00544146
 8008c50:	33544146 	.word	0x33544146

08008c54 <find_volume>:
{
 8008c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8008c58:	2300      	movs	r3, #0
{
 8008c5a:	b085      	sub	sp, #20
	*rfs = 0;
 8008c5c:	600b      	str	r3, [r1, #0]
{
 8008c5e:	460f      	mov	r7, r1
 8008c60:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8008c62:	f7ff fed2 	bl	8008a0a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c66:	1e06      	subs	r6, r0, #0
 8008c68:	f2c0 815e 	blt.w	8008f28 <find_volume+0x2d4>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008c6c:	4bb2      	ldr	r3, [pc, #712]	; (8008f38 <find_volume+0x2e4>)
 8008c6e:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008c72:	2c00      	cmp	r4, #0
 8008c74:	f000 815a 	beq.w	8008f2c <find_volume+0x2d8>
	*rfs = fs;							/* Return pointer to the file system object */
 8008c78:	603c      	str	r4, [r7, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008c7a:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008c7c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008c80:	b173      	cbz	r3, 8008ca0 <find_volume+0x4c>
		stat = disk_status(fs->drv);
 8008c82:	7860      	ldrb	r0, [r4, #1]
 8008c84:	f7ff fdc6 	bl	8008814 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008c88:	07c1      	lsls	r1, r0, #31
 8008c8a:	d409      	bmi.n	8008ca0 <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008c8c:	2d00      	cmp	r5, #0
 8008c8e:	f000 814f 	beq.w	8008f30 <find_volume+0x2dc>
 8008c92:	f010 0004 	ands.w	r0, r0, #4
 8008c96:	d000      	beq.n	8008c9a <find_volume+0x46>
				return FR_WRITE_PROTECTED;
 8008c98:	200a      	movs	r0, #10
}
 8008c9a:	b005      	add	sp, #20
 8008c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8008ca0:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ca2:	b2f0      	uxtb	r0, r6
	fs->fs_type = 0;					/* Clear the file system object */
 8008ca4:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008ca6:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ca8:	f7ff fdbe 	bl	8008828 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008cac:	07c2      	lsls	r2, r0, #31
 8008cae:	f100 8141 	bmi.w	8008f34 <find_volume+0x2e0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008cb2:	b10d      	cbz	r5, 8008cb8 <find_volume+0x64>
 8008cb4:	0743      	lsls	r3, r0, #29
 8008cb6:	d4ef      	bmi.n	8008c98 <find_volume+0x44>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008cb8:	f104 020c 	add.w	r2, r4, #12
 8008cbc:	2102      	movs	r1, #2
 8008cbe:	7860      	ldrb	r0, [r4, #1]
 8008cc0:	f7ff fdde 	bl	8008880 <disk_ioctl>
 8008cc4:	b108      	cbz	r0, 8008cca <find_volume+0x76>
 8008cc6:	2001      	movs	r0, #1
 8008cc8:	e7e7      	b.n	8008c9a <find_volume+0x46>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008cca:	89a3      	ldrh	r3, [r4, #12]
 8008ccc:	f5a3 7200 	sub.w	r2, r3, #512	; 0x200
 8008cd0:	f5b2 6f60 	cmp.w	r2, #3584	; 0xe00
 8008cd4:	d8f7      	bhi.n	8008cc6 <find_volume+0x72>
 8008cd6:	1e5e      	subs	r6, r3, #1
 8008cd8:	401e      	ands	r6, r3
 8008cda:	d1f4      	bne.n	8008cc6 <find_volume+0x72>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008cdc:	4631      	mov	r1, r6
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f7ff ff78 	bl	8008bd4 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008ce4:	2802      	cmp	r0, #2
 8008ce6:	f040 8101 	bne.w	8008eec <find_volume+0x298>
 8008cea:	f504 71fd 	add.w	r1, r4, #506	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008cee:	f811 0c04 	ldrb.w	r0, [r1, #-4]
 8008cf2:	b110      	cbz	r0, 8008cfa <find_volume+0xa6>
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	f7ff fdd1 	bl	800889c <ld_dword>
 8008cfa:	f84d 0026 	str.w	r0, [sp, r6, lsl #2]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008cfe:	3601      	adds	r6, #1
 8008d00:	2e04      	cmp	r6, #4
 8008d02:	f101 0110 	add.w	r1, r1, #16
 8008d06:	d1f2      	bne.n	8008cee <find_volume+0x9a>
 8008d08:	2500      	movs	r5, #0
			bsect = br[i];
 8008d0a:	f85d 6025 	ldr.w	r6, [sp, r5, lsl #2]
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008d0e:	2e00      	cmp	r6, #0
 8008d10:	f000 80e4 	beq.w	8008edc <find_volume+0x288>
 8008d14:	4631      	mov	r1, r6
 8008d16:	4620      	mov	r0, r4
 8008d18:	f7ff ff5c 	bl	8008bd4 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008d1c:	2801      	cmp	r0, #1
 8008d1e:	f200 80de 	bhi.w	8008ede <find_volume+0x28a>
	rv = rv << 8 | ptr[0];
 8008d22:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8008d26:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008d2a:	f8b4 800c 	ldrh.w	r8, [r4, #12]
 8008d2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008d32:	4598      	cmp	r8, r3
 8008d34:	f040 80e0 	bne.w	8008ef8 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008d38:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8008d3c:	f894 104a 	ldrb.w	r1, [r4, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008d40:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
 8008d44:	d104      	bne.n	8008d50 <find_volume+0xfc>
 8008d46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d4a:	f7ff fda7 	bl	800889c <ld_dword>
 8008d4e:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008d50:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
		fs->fsize = fasize;
 8008d54:	61e1      	str	r1, [r4, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d56:	1e7b      	subs	r3, r7, #1
 8008d58:	2b01      	cmp	r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008d5a:	70a7      	strb	r7, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d5c:	f200 80cc 	bhi.w	8008ef8 <find_volume+0x2a4>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d60:	f894 9041 	ldrb.w	r9, [r4, #65]	; 0x41
 8008d64:	fa1f f389 	uxth.w	r3, r9
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008d68:	434f      	muls	r7, r1
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d6a:	8163      	strh	r3, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f000 80c3 	beq.w	8008ef8 <find_volume+0x2a4>
 8008d72:	f109 33ff 	add.w	r3, r9, #4294967295
 8008d76:	ea13 0f09 	tst.w	r3, r9
 8008d7a:	f040 80bd 	bne.w	8008ef8 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008d7e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008d82:	f894 a045 	ldrb.w	sl, [r4, #69]	; 0x45
 8008d86:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008d8a:	ea4f 1358 	mov.w	r3, r8, lsr #5
 8008d8e:	fbba fbf3 	udiv	fp, sl, r3
 8008d92:	fb03 a31b 	mls	r3, r3, fp, sl
 8008d96:	b29b      	uxth	r3, r3
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008d98:	f8a4 a008 	strh.w	sl, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f040 80ab 	bne.w	8008ef8 <find_volume+0x2a4>
	rv = rv << 8 | ptr[0];
 8008da2:	f894 5048 	ldrb.w	r5, [r4, #72]	; 0x48
 8008da6:	f894 0047 	ldrb.w	r0, [r4, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008daa:	ea50 2005 	orrs.w	r0, r0, r5, lsl #8
 8008dae:	d103      	bne.n	8008db8 <find_volume+0x164>
 8008db0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8008db4:	f7ff fd72 	bl	800889c <ld_dword>
	rv = rv << 8 | ptr[0];
 8008db8:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008dbc:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008dc0:	ea52 2203 	orrs.w	r2, r2, r3, lsl #8
 8008dc4:	f000 8098 	beq.w	8008ef8 <find_volume+0x2a4>
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008dc8:	fa12 f38b 	uxtah	r3, r2, fp
 8008dcc:	443b      	add	r3, r7
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008dce:	4298      	cmp	r0, r3
 8008dd0:	f0c0 8092 	bcc.w	8008ef8 <find_volume+0x2a4>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008dd4:	1ac5      	subs	r5, r0, r3
 8008dd6:	fbb5 f5f9 	udiv	r5, r5, r9
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008dda:	2d00      	cmp	r5, #0
 8008ddc:	f000 808c 	beq.w	8008ef8 <find_volume+0x2a4>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008de0:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 8008de4:	4285      	cmp	r5, r0
 8008de6:	f200 8089 	bhi.w	8008efc <find_volume+0x2a8>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008dea:	f640 79f5 	movw	r9, #4085	; 0xff5
 8008dee:	454d      	cmp	r5, r9
 8008df0:	bf8c      	ite	hi
 8008df2:	f04f 0902 	movhi.w	r9, #2
 8008df6:	f04f 0901 	movls.w	r9, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008dfa:	3502      	adds	r5, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008dfc:	4432      	add	r2, r6
		fs->database = bsect + sysect;					/* Data start sector */
 8008dfe:	4433      	add	r3, r6
		if (fmt == FS_FAT32) {
 8008e00:	f1b9 0f03 	cmp.w	r9, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008e04:	61a5      	str	r5, [r4, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008e06:	6226      	str	r6, [r4, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008e08:	6262      	str	r2, [r4, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008e0a:	62e3      	str	r3, [r4, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008e0c:	d179      	bne.n	8008f02 <find_volume+0x2ae>
	rv = rv << 8 | ptr[0];
 8008e0e:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 8008e12:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008e16:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
 8008e1a:	d16d      	bne.n	8008ef8 <find_volume+0x2a4>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008e1c:	f1ba 0f00 	cmp.w	sl, #0
 8008e20:	d16a      	bne.n	8008ef8 <find_volume+0x2a4>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008e22:	f104 0060 	add.w	r0, r4, #96	; 0x60
 8008e26:	f7ff fd39 	bl	800889c <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008e2a:	00ad      	lsls	r5, r5, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008e2c:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008e2e:	f108 33ff 	add.w	r3, r8, #4294967295
 8008e32:	441d      	add	r5, r3
 8008e34:	fbb5 f8f8 	udiv	r8, r5, r8
 8008e38:	4541      	cmp	r1, r8
 8008e3a:	d35d      	bcc.n	8008ef8 <find_volume+0x2a4>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e40:	6163      	str	r3, [r4, #20]
 8008e42:	6123      	str	r3, [r4, #16]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008e44:	f1b9 0f03 	cmp.w	r9, #3
		fs->fsi_flag = 0x80;
 8008e48:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008e4c:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008e4e:	d12f      	bne.n	8008eb0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8008e50:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8008e54:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8008e58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d127      	bne.n	8008eb0 <find_volume+0x25c>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008e60:	1c71      	adds	r1, r6, #1
 8008e62:	4620      	mov	r0, r4
 8008e64:	f7ff fe9a 	bl	8008b9c <move_window>
 8008e68:	bb10      	cbnz	r0, 8008eb0 <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8008e6a:	f894 2233 	ldrb.w	r2, [r4, #563]	; 0x233
 8008e6e:	f894 3232 	ldrb.w	r3, [r4, #562]	; 0x232
			fs->fsi_flag = 0;
 8008e72:	7120      	strb	r0, [r4, #4]
	rv = rv << 8 | ptr[0];
 8008e74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008e78:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d117      	bne.n	8008eb0 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008e80:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8008e84:	f7ff fd0a 	bl	800889c <ld_dword>
 8008e88:	4b2c      	ldr	r3, [pc, #176]	; (8008f3c <find_volume+0x2e8>)
 8008e8a:	4298      	cmp	r0, r3
 8008e8c:	d110      	bne.n	8008eb0 <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008e8e:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8008e92:	f7ff fd03 	bl	800889c <ld_dword>
 8008e96:	4b2a      	ldr	r3, [pc, #168]	; (8008f40 <find_volume+0x2ec>)
 8008e98:	4298      	cmp	r0, r3
 8008e9a:	d109      	bne.n	8008eb0 <find_volume+0x25c>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008e9c:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8008ea0:	f7ff fcfc 	bl	800889c <ld_dword>
 8008ea4:	6160      	str	r0, [r4, #20]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008ea6:	f504 7008 	add.w	r0, r4, #544	; 0x220
 8008eaa:	f7ff fcf7 	bl	800889c <ld_dword>
 8008eae:	6120      	str	r0, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
 8008eb0:	4a24      	ldr	r2, [pc, #144]	; (8008f44 <find_volume+0x2f0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8008eb2:	f884 9000 	strb.w	r9, [r4]
	fs->id = ++Fsid;		/* File system mount ID */
 8008eb6:	8813      	ldrh	r3, [r2, #0]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	8013      	strh	r3, [r2, #0]
 8008ebe:	80e3      	strh	r3, [r4, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8008ec0:	4b21      	ldr	r3, [pc, #132]	; (8008f48 <find_volume+0x2f4>)
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	4294      	cmp	r4, r2
 8008ec6:	bf04      	itt	eq
 8008ec8:	2200      	moveq	r2, #0
 8008eca:	601a      	streq	r2, [r3, #0]
 8008ecc:	691a      	ldr	r2, [r3, #16]
 8008ece:	4294      	cmp	r4, r2
 8008ed0:	f04f 0000 	mov.w	r0, #0
 8008ed4:	f47f aee1 	bne.w	8008c9a <find_volume+0x46>
 8008ed8:	6118      	str	r0, [r3, #16]
 8008eda:	e6de      	b.n	8008c9a <find_volume+0x46>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008edc:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008ede:	3501      	adds	r5, #1
 8008ee0:	2d04      	cmp	r5, #4
 8008ee2:	f47f af12 	bne.w	8008d0a <find_volume+0xb6>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008ee6:	2804      	cmp	r0, #4
 8008ee8:	d106      	bne.n	8008ef8 <find_volume+0x2a4>
 8008eea:	e6ec      	b.n	8008cc6 <find_volume+0x72>
 8008eec:	2804      	cmp	r0, #4
 8008eee:	f43f aeea 	beq.w	8008cc6 <find_volume+0x72>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008ef2:	2801      	cmp	r0, #1
 8008ef4:	f67f af15 	bls.w	8008d22 <find_volume+0xce>
 8008ef8:	200d      	movs	r0, #13
 8008efa:	e6ce      	b.n	8008c9a <find_volume+0x46>
		fmt = FS_FAT32;
 8008efc:	f04f 0903 	mov.w	r9, #3
 8008f00:	e77b      	b.n	8008dfa <find_volume+0x1a6>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008f02:	f1ba 0f00 	cmp.w	sl, #0
 8008f06:	d0f7      	beq.n	8008ef8 <find_volume+0x2a4>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008f08:	f1b9 0f02 	cmp.w	r9, #2
 8008f0c:	ea4f 0045 	mov.w	r0, r5, lsl #1
 8008f10:	bf18      	it	ne
 8008f12:	1940      	addne	r0, r0, r5
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008f14:	443a      	add	r2, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008f16:	bf18      	it	ne
 8008f18:	f005 0501 	andne.w	r5, r5, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008f1c:	62a2      	str	r2, [r4, #40]	; 0x28
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008f1e:	bf0c      	ite	eq
 8008f20:	4605      	moveq	r5, r0
 8008f22:	eb05 0550 	addne.w	r5, r5, r0, lsr #1
 8008f26:	e782      	b.n	8008e2e <find_volume+0x1da>
	if (vol < 0) return FR_INVALID_DRIVE;
 8008f28:	200b      	movs	r0, #11
 8008f2a:	e6b6      	b.n	8008c9a <find_volume+0x46>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008f2c:	200c      	movs	r0, #12
 8008f2e:	e6b4      	b.n	8008c9a <find_volume+0x46>
			return FR_OK;				/* The file system object is valid */
 8008f30:	4628      	mov	r0, r5
 8008f32:	e6b2      	b.n	8008c9a <find_volume+0x46>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008f34:	2003      	movs	r0, #3
 8008f36:	e6b0      	b.n	8008c9a <find_volume+0x46>
 8008f38:	20000b58 	.word	0x20000b58
 8008f3c:	41615252 	.word	0x41615252
 8008f40:	61417272 	.word	0x61417272
 8008f44:	20000b7c 	.word	0x20000b7c
 8008f48:	20000b5c 	.word	0x20000b5c

08008f4c <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008f4c:	2901      	cmp	r1, #1
{
 8008f4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f52:	4604      	mov	r4, r0
 8008f54:	460d      	mov	r5, r1
 8008f56:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8008f58:	f240 808a 	bls.w	8009070 <put_fat+0x124>
 8008f5c:	6983      	ldr	r3, [r0, #24]
 8008f5e:	4299      	cmp	r1, r3
 8008f60:	f080 8086 	bcs.w	8009070 <put_fat+0x124>
		switch (fs->fs_type) {
 8008f64:	7803      	ldrb	r3, [r0, #0]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d049      	beq.n	8008ffe <put_fat+0xb2>
 8008f6a:	2b03      	cmp	r3, #3
 8008f6c:	d060      	beq.n	8009030 <put_fat+0xe4>
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d17e      	bne.n	8009070 <put_fat+0x124>
			bc = (UINT)clst; bc += bc / 2;
 8008f72:	eb01 0a51 	add.w	sl, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008f76:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8008f78:	8983      	ldrh	r3, [r0, #12]
 8008f7a:	fbba f3f3 	udiv	r3, sl, r3
 8008f7e:	4419      	add	r1, r3
 8008f80:	f7ff fe0c 	bl	8008b9c <move_window>
 8008f84:	4606      	mov	r6, r0
			if (res != FR_OK) break;
 8008f86:	bb78      	cbnz	r0, 8008fe8 <put_fat+0x9c>
			p = fs->win + bc++ % SS(fs);
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	fbba f2f3 	udiv	r2, sl, r3
 8008f8e:	f104 0834 	add.w	r8, r4, #52	; 0x34
 8008f92:	fb03 a212 	mls	r2, r3, r2, sl
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008f96:	f015 0501 	ands.w	r5, r5, #1
 8008f9a:	bf1f      	itttt	ne
 8008f9c:	f818 3002 	ldrbne.w	r3, [r8, r2]
 8008fa0:	f003 010f 	andne.w	r1, r3, #15
 8008fa4:	013b      	lslne	r3, r7, #4
 8008fa6:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8008faa:	bf14      	ite	ne
 8008fac:	430b      	orrne	r3, r1
 8008fae:	b2fb      	uxtbeq	r3, r7
 8008fb0:	f808 3002 	strb.w	r3, [r8, r2]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008fb4:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	70e3      	strb	r3, [r4, #3]
			p = fs->win + bc++ % SS(fs);
 8008fba:	f10a 0901 	add.w	r9, sl, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008fbe:	89a3      	ldrh	r3, [r4, #12]
 8008fc0:	fbb9 f3f3 	udiv	r3, r9, r3
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	4419      	add	r1, r3
 8008fc8:	f7ff fde8 	bl	8008b9c <move_window>
			if (res != FR_OK) break;
 8008fcc:	4606      	mov	r6, r0
 8008fce:	b958      	cbnz	r0, 8008fe8 <put_fat+0x9c>
			p = fs->win + bc % SS(fs);
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	fbb9 f2f3 	udiv	r2, r9, r3
 8008fd6:	fb03 9212 	mls	r2, r3, r2, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008fda:	b145      	cbz	r5, 8008fee <put_fat+0xa2>
 8008fdc:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8008fe0:	f808 7002 	strb.w	r7, [r8, r2]
			fs->wflag = 1;
 8008fe4:	2301      	movs	r3, #1
 8008fe6:	70e3      	strb	r3, [r4, #3]
}
 8008fe8:	4630      	mov	r0, r6
 8008fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008fee:	f818 3002 	ldrb.w	r3, [r8, r2]
 8008ff2:	f3c7 2703 	ubfx	r7, r7, #8, #4
 8008ff6:	f023 030f 	bic.w	r3, r3, #15
 8008ffa:	431f      	orrs	r7, r3
 8008ffc:	e7f0      	b.n	8008fe0 <put_fat+0x94>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008ffe:	8983      	ldrh	r3, [r0, #12]
 8009000:	085b      	lsrs	r3, r3, #1
 8009002:	fbb1 f3f3 	udiv	r3, r1, r3
 8009006:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009008:	4419      	add	r1, r3
 800900a:	f7ff fdc7 	bl	8008b9c <move_window>
			if (res != FR_OK) break;
 800900e:	4606      	mov	r6, r0
 8009010:	2800      	cmp	r0, #0
 8009012:	d1e9      	bne.n	8008fe8 <put_fat+0x9c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009014:	89a1      	ldrh	r1, [r4, #12]
 8009016:	006d      	lsls	r5, r5, #1
 8009018:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800901c:	fbb5 f3f1 	udiv	r3, r5, r1
 8009020:	fb01 5513 	mls	r5, r1, r3, r5
 8009024:	1953      	adds	r3, r2, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8009026:	5557      	strb	r7, [r2, r5]
 8009028:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 800902c:	705f      	strb	r7, [r3, #1]
 800902e:	e7d9      	b.n	8008fe4 <put_fat+0x98>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009030:	8983      	ldrh	r3, [r0, #12]
 8009032:	089b      	lsrs	r3, r3, #2
 8009034:	fbb1 f3f3 	udiv	r3, r1, r3
 8009038:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800903a:	4419      	add	r1, r3
 800903c:	f7ff fdae 	bl	8008b9c <move_window>
			if (res != FR_OK) break;
 8009040:	4606      	mov	r6, r0
 8009042:	2800      	cmp	r0, #0
 8009044:	d1d0      	bne.n	8008fe8 <put_fat+0x9c>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009046:	89a1      	ldrh	r1, [r4, #12]
 8009048:	00ad      	lsls	r5, r5, #2
 800904a:	f104 0334 	add.w	r3, r4, #52	; 0x34
 800904e:	fbb5 f2f1 	udiv	r2, r5, r1
 8009052:	fb01 5512 	mls	r5, r1, r2, r5
 8009056:	441d      	add	r5, r3
 8009058:	4628      	mov	r0, r5
 800905a:	f7ff fc1f 	bl	800889c <ld_dword>
 800905e:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 8009062:	f000 4170 	and.w	r1, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009066:	4339      	orrs	r1, r7
 8009068:	4628      	mov	r0, r5
 800906a:	f7ff fc1f 	bl	80088ac <st_dword>
 800906e:	e7b9      	b.n	8008fe4 <put_fat+0x98>
	FRESULT res = FR_INT_ERR;
 8009070:	2602      	movs	r6, #2
 8009072:	e7b9      	b.n	8008fe8 <put_fat+0x9c>

08009074 <get_fat.isra.8>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009074:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8009076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009078:	4604      	mov	r4, r0
 800907a:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800907c:	d968      	bls.n	8009150 <get_fat.isra.8+0xdc>
 800907e:	6983      	ldr	r3, [r0, #24]
 8009080:	4299      	cmp	r1, r3
 8009082:	d265      	bcs.n	8009150 <get_fat.isra.8+0xdc>
		switch (fs->fs_type) {
 8009084:	7803      	ldrb	r3, [r0, #0]
 8009086:	2b02      	cmp	r3, #2
 8009088:	d032      	beq.n	80090f0 <get_fat.isra.8+0x7c>
 800908a:	2b03      	cmp	r3, #3
 800908c:	d048      	beq.n	8009120 <get_fat.isra.8+0xac>
 800908e:	2b01      	cmp	r3, #1
 8009090:	d15e      	bne.n	8009150 <get_fat.isra.8+0xdc>
			bc = (UINT)clst; bc += bc / 2;
 8009092:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009096:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8009098:	8983      	ldrh	r3, [r0, #12]
 800909a:	fbb5 f3f3 	udiv	r3, r5, r3
 800909e:	4419      	add	r1, r3
 80090a0:	f7ff fd7c 	bl	8008b9c <move_window>
 80090a4:	b110      	cbz	r0, 80090ac <get_fat.isra.8+0x38>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80090a6:	f04f 30ff 	mov.w	r0, #4294967295
 80090aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80090ac:	89a1      	ldrh	r1, [r4, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 80090b0:	fbb5 f2f1 	udiv	r2, r5, r1
 80090b4:	fb01 5212 	mls	r2, r1, r2, r5
 80090b8:	4422      	add	r2, r4
 80090ba:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090bc:	4620      	mov	r0, r4
 80090be:	fbb7 f1f1 	udiv	r1, r7, r1
 80090c2:	4419      	add	r1, r3
			wc = fs->win[bc++ % SS(fs)];
 80090c4:	f892 5034 	ldrb.w	r5, [r2, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80090c8:	f7ff fd68 	bl	8008b9c <move_window>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d1ea      	bne.n	80090a6 <get_fat.isra.8+0x32>
			wc |= fs->win[bc % SS(fs)] << 8;
 80090d0:	89a2      	ldrh	r2, [r4, #12]
 80090d2:	fbb7 f3f2 	udiv	r3, r7, r2
 80090d6:	fb02 7313 	mls	r3, r2, r3, r7
 80090da:	441c      	add	r4, r3
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80090dc:	07f3      	lsls	r3, r6, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 80090de:	f894 0034 	ldrb.w	r0, [r4, #52]	; 0x34
 80090e2:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80090e6:	bf4c      	ite	mi
 80090e8:	0900      	lsrmi	r0, r0, #4
 80090ea:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 80090ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80090f0:	8983      	ldrh	r3, [r0, #12]
 80090f2:	085b      	lsrs	r3, r3, #1
 80090f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80090f8:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80090fa:	4419      	add	r1, r3
 80090fc:	f7ff fd4e 	bl	8008b9c <move_window>
 8009100:	2800      	cmp	r0, #0
 8009102:	d1d0      	bne.n	80090a6 <get_fat.isra.8+0x32>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009104:	89a1      	ldrh	r1, [r4, #12]
 8009106:	0076      	lsls	r6, r6, #1
 8009108:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800910c:	fbb6 f3f1 	udiv	r3, r6, r1
 8009110:	fb01 6613 	mls	r6, r1, r3, r6
 8009114:	1993      	adds	r3, r2, r6
	rv = rv << 8 | ptr[0];
 8009116:	5d90      	ldrb	r0, [r2, r6]
 8009118:	785b      	ldrb	r3, [r3, #1]
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800911a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 800911e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009120:	8983      	ldrh	r3, [r0, #12]
 8009122:	089b      	lsrs	r3, r3, #2
 8009124:	fbb1 f3f3 	udiv	r3, r1, r3
 8009128:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800912a:	4419      	add	r1, r3
 800912c:	f7ff fd36 	bl	8008b9c <move_window>
 8009130:	2800      	cmp	r0, #0
 8009132:	d1b8      	bne.n	80090a6 <get_fat.isra.8+0x32>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009134:	89a2      	ldrh	r2, [r4, #12]
 8009136:	00b6      	lsls	r6, r6, #2
 8009138:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800913c:	fbb6 f3f2 	udiv	r3, r6, r2
 8009140:	fb02 6613 	mls	r6, r2, r3, r6
 8009144:	4430      	add	r0, r6
 8009146:	f7ff fba9 	bl	800889c <ld_dword>
 800914a:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
 800914e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = 1;	/* Internal error */
 8009150:	2001      	movs	r0, #1
}
 8009152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009154 <create_chain>:
{
 8009154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009158:	4680      	mov	r8, r0
	FATFS *fs = obj->fs;
 800915a:	6805      	ldr	r5, [r0, #0]
	if (clst == 0) {	/* Create a new chain */
 800915c:	460f      	mov	r7, r1
 800915e:	b971      	cbnz	r1, 800917e <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009160:	692e      	ldr	r6, [r5, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009162:	b1f6      	cbz	r6, 80091a2 <create_chain+0x4e>
 8009164:	69ab      	ldr	r3, [r5, #24]
 8009166:	429e      	cmp	r6, r3
 8009168:	bf28      	it	cs
 800916a:	2601      	movcs	r6, #1
 800916c:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800916e:	69ab      	ldr	r3, [r5, #24]
			ncl++;							/* Next cluster */
 8009170:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009172:	429c      	cmp	r4, r3
 8009174:	d318      	bcc.n	80091a8 <create_chain+0x54>
				if (ncl > scl) return 0;	/* No free cluster */
 8009176:	2e01      	cmp	r6, #1
 8009178:	d815      	bhi.n	80091a6 <create_chain+0x52>
 800917a:	2400      	movs	r4, #0
 800917c:	e009      	b.n	8009192 <create_chain+0x3e>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800917e:	4628      	mov	r0, r5
 8009180:	f7ff ff78 	bl	8009074 <get_fat.isra.8>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009184:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009186:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009188:	d937      	bls.n	80091fa <create_chain+0xa6>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800918a:	1c43      	adds	r3, r0, #1
 800918c:	d104      	bne.n	8009198 <create_chain+0x44>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800918e:	f04f 34ff 	mov.w	r4, #4294967295
}
 8009192:	4620      	mov	r0, r4
 8009194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009198:	69ab      	ldr	r3, [r5, #24]
 800919a:	4298      	cmp	r0, r3
 800919c:	d3f9      	bcc.n	8009192 <create_chain+0x3e>
 800919e:	463e      	mov	r6, r7
 80091a0:	e7e4      	b.n	800916c <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80091a2:	2601      	movs	r6, #1
 80091a4:	e7e2      	b.n	800916c <create_chain+0x18>
				ncl = 2;
 80091a6:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80091a8:	4621      	mov	r1, r4
 80091aa:	f8d8 0000 	ldr.w	r0, [r8]
 80091ae:	f7ff ff61 	bl	8009074 <get_fat.isra.8>
			if (cs == 0) break;				/* Found a free cluster */
 80091b2:	b130      	cbz	r0, 80091c2 <create_chain+0x6e>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80091b4:	2801      	cmp	r0, #1
 80091b6:	d020      	beq.n	80091fa <create_chain+0xa6>
 80091b8:	3001      	adds	r0, #1
 80091ba:	d0e8      	beq.n	800918e <create_chain+0x3a>
			if (ncl == scl) return 0;		/* No free cluster */
 80091bc:	42b4      	cmp	r4, r6
 80091be:	d1d6      	bne.n	800916e <create_chain+0x1a>
 80091c0:	e7db      	b.n	800917a <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80091c2:	f04f 32ff 	mov.w	r2, #4294967295
 80091c6:	4621      	mov	r1, r4
 80091c8:	4628      	mov	r0, r5
 80091ca:	f7ff febf 	bl	8008f4c <put_fat>
		if (res == FR_OK && clst != 0) {
 80091ce:	b990      	cbnz	r0, 80091f6 <create_chain+0xa2>
 80091d0:	b957      	cbnz	r7, 80091e8 <create_chain+0x94>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091d2:	69aa      	ldr	r2, [r5, #24]
 80091d4:	696b      	ldr	r3, [r5, #20]
		fs->last_clst = ncl;
 80091d6:	612c      	str	r4, [r5, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091d8:	3a02      	subs	r2, #2
 80091da:	4293      	cmp	r3, r2
 80091dc:	d90f      	bls.n	80091fe <create_chain+0xaa>
		fs->fsi_flag |= 1;
 80091de:	792b      	ldrb	r3, [r5, #4]
 80091e0:	f043 0301 	orr.w	r3, r3, #1
 80091e4:	712b      	strb	r3, [r5, #4]
 80091e6:	e7d4      	b.n	8009192 <create_chain+0x3e>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80091e8:	4622      	mov	r2, r4
 80091ea:	4639      	mov	r1, r7
 80091ec:	4628      	mov	r0, r5
 80091ee:	f7ff fead 	bl	8008f4c <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80091f2:	2800      	cmp	r0, #0
 80091f4:	d0ed      	beq.n	80091d2 <create_chain+0x7e>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80091f6:	2801      	cmp	r0, #1
 80091f8:	d0c9      	beq.n	800918e <create_chain+0x3a>
 80091fa:	2401      	movs	r4, #1
 80091fc:	e7c9      	b.n	8009192 <create_chain+0x3e>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80091fe:	3b01      	subs	r3, #1
 8009200:	616b      	str	r3, [r5, #20]
 8009202:	e7ec      	b.n	80091de <create_chain+0x8a>

08009204 <remove_chain>:
{
 8009204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009206:	460d      	mov	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009208:	2d01      	cmp	r5, #1
{
 800920a:	4607      	mov	r7, r0
 800920c:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800920e:	d801      	bhi.n	8009214 <remove_chain+0x10>
 8009210:	2002      	movs	r0, #2
 8009212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	FATFS *fs = obj->fs;
 8009214:	6804      	ldr	r4, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009216:	69a3      	ldr	r3, [r4, #24]
 8009218:	429d      	cmp	r5, r3
 800921a:	d2f9      	bcs.n	8009210 <remove_chain+0xc>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800921c:	b12a      	cbz	r2, 800922a <remove_chain+0x26>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800921e:	f04f 32ff 	mov.w	r2, #4294967295
 8009222:	4620      	mov	r0, r4
 8009224:	f7ff fe92 	bl	8008f4c <put_fat>
		if (res != FR_OK) return res;
 8009228:	bb08      	cbnz	r0, 800926e <remove_chain+0x6a>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800922a:	4629      	mov	r1, r5
 800922c:	6838      	ldr	r0, [r7, #0]
 800922e:	f7ff ff21 	bl	8009074 <get_fat.isra.8>
		if (nxt == 0) break;				/* Empty cluster? */
 8009232:	4606      	mov	r6, r0
 8009234:	b908      	cbnz	r0, 800923a <remove_chain+0x36>
	return FR_OK;
 8009236:	2000      	movs	r0, #0
 8009238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800923a:	2801      	cmp	r0, #1
 800923c:	d0e8      	beq.n	8009210 <remove_chain+0xc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800923e:	1c43      	adds	r3, r0, #1
 8009240:	d014      	beq.n	800926c <remove_chain+0x68>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009242:	2200      	movs	r2, #0
 8009244:	4629      	mov	r1, r5
 8009246:	4620      	mov	r0, r4
 8009248:	f7ff fe80 	bl	8008f4c <put_fat>
			if (res != FR_OK) return res;
 800924c:	b978      	cbnz	r0, 800926e <remove_chain+0x6a>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800924e:	69a2      	ldr	r2, [r4, #24]
 8009250:	6963      	ldr	r3, [r4, #20]
 8009252:	1e91      	subs	r1, r2, #2
 8009254:	428b      	cmp	r3, r1
 8009256:	d205      	bcs.n	8009264 <remove_chain+0x60>
			fs->free_clst++;
 8009258:	3301      	adds	r3, #1
 800925a:	6163      	str	r3, [r4, #20]
			fs->fsi_flag |= 1;
 800925c:	7923      	ldrb	r3, [r4, #4]
 800925e:	f043 0301 	orr.w	r3, r3, #1
 8009262:	7123      	strb	r3, [r4, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009264:	4296      	cmp	r6, r2
 8009266:	4635      	mov	r5, r6
 8009268:	d3df      	bcc.n	800922a <remove_chain+0x26>
 800926a:	e7e4      	b.n	8009236 <remove_chain+0x32>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800926c:	2001      	movs	r0, #1
}
 800926e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009270 <dir_sdi.constprop.11>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009270:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8009272:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8009274:	2300      	movs	r3, #0
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8009276:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 8009278:	6804      	ldr	r4, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 800927a:	6143      	str	r3, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800927c:	b992      	cbnz	r2, 80092a4 <dir_sdi.constprop.11+0x34>
 800927e:	7823      	ldrb	r3, [r4, #0]
 8009280:	2b02      	cmp	r3, #2
 8009282:	d901      	bls.n	8009288 <dir_sdi.constprop.11+0x18>
		clst = fs->dirbase;
 8009284:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009286:	b973      	cbnz	r3, 80092a6 <dir_sdi.constprop.11+0x36>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009288:	8923      	ldrh	r3, [r4, #8]
 800928a:	b90b      	cbnz	r3, 8009290 <dir_sdi.constprop.11+0x20>
 800928c:	2002      	movs	r0, #2
 800928e:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8009290:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009292:	61eb      	str	r3, [r5, #28]
	if (!dp->sect) return FR_INT_ERR;
 8009294:	69eb      	ldr	r3, [r5, #28]
	dp->clust = clst;					/* Current cluster# */
 8009296:	61aa      	str	r2, [r5, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0f7      	beq.n	800928c <dir_sdi.constprop.11+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800929c:	3434      	adds	r4, #52	; 0x34
 800929e:	622c      	str	r4, [r5, #32]
	return FR_OK;
 80092a0:	2000      	movs	r0, #0
 80092a2:	bd38      	pop	{r3, r4, r5, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80092a4:	4613      	mov	r3, r2
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80092a6:	8961      	ldrh	r1, [r4, #10]
 80092a8:	89a0      	ldrh	r0, [r4, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80092aa:	4348      	muls	r0, r1
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80092ac:	461a      	mov	r2, r3
		while (ofs >= csz) {				/* Follow cluster chain */
 80092ae:	d10c      	bne.n	80092ca <dir_sdi.constprop.11+0x5a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80092b0:	4611      	mov	r1, r2
 80092b2:	6828      	ldr	r0, [r5, #0]
 80092b4:	f7ff fede 	bl	8009074 <get_fat.isra.8>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092b8:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80092ba:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092bc:	d00b      	beq.n	80092d6 <dir_sdi.constprop.11+0x66>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80092be:	2801      	cmp	r0, #1
 80092c0:	d9e4      	bls.n	800928c <dir_sdi.constprop.11+0x1c>
 80092c2:	69a3      	ldr	r3, [r4, #24]
 80092c4:	4298      	cmp	r0, r3
 80092c6:	d3f3      	bcc.n	80092b0 <dir_sdi.constprop.11+0x40>
 80092c8:	e7e0      	b.n	800928c <dir_sdi.constprop.11+0x1c>
		dp->sect = clust2sect(fs, clst);
 80092ca:	4619      	mov	r1, r3
 80092cc:	4620      	mov	r0, r4
 80092ce:	f7ff fb7d 	bl	80089cc <clust2sect>
 80092d2:	61e8      	str	r0, [r5, #28]
 80092d4:	e7de      	b.n	8009294 <dir_sdi.constprop.11+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80092d6:	2001      	movs	r0, #1
}
 80092d8:	bd38      	pop	{r3, r4, r5, pc}

080092da <dir_next>:
{
 80092da:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092de:	69c3      	ldr	r3, [r0, #28]
{
 80092e0:	4605      	mov	r5, r0
 80092e2:	4688      	mov	r8, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092e4:	b1b3      	cbz	r3, 8009314 <dir_next+0x3a>
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80092e6:	6947      	ldr	r7, [r0, #20]
 80092e8:	3720      	adds	r7, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80092ea:	f5b7 1f00 	cmp.w	r7, #2097152	; 0x200000
 80092ee:	d211      	bcs.n	8009314 <dir_next+0x3a>
	FATFS *fs = dp->obj.fs;
 80092f0:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80092f2:	89a2      	ldrh	r2, [r4, #12]
 80092f4:	fbb7 f0f2 	udiv	r0, r7, r2
 80092f8:	fb02 7210 	mls	r2, r2, r0, r7
 80092fc:	2a00      	cmp	r2, #0
 80092fe:	d14f      	bne.n	80093a0 <dir_next+0xc6>
		if (!dp->clust) {		/* Static table */
 8009300:	69a9      	ldr	r1, [r5, #24]
		dp->sect++;				/* Next sector */
 8009302:	3301      	adds	r3, #1
 8009304:	61eb      	str	r3, [r5, #28]
		if (!dp->clust) {		/* Static table */
 8009306:	b941      	cbnz	r1, 800931a <dir_next+0x40>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009308:	8923      	ldrh	r3, [r4, #8]
 800930a:	ebb3 1f57 	cmp.w	r3, r7, lsr #5
 800930e:	d847      	bhi.n	80093a0 <dir_next+0xc6>
				dp->sect = 0; return FR_NO_FILE;
 8009310:	2300      	movs	r3, #0
 8009312:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009314:	2004      	movs	r0, #4
 8009316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800931a:	8963      	ldrh	r3, [r4, #10]
 800931c:	3b01      	subs	r3, #1
 800931e:	4203      	tst	r3, r0
 8009320:	d13e      	bne.n	80093a0 <dir_next+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009322:	4620      	mov	r0, r4
 8009324:	f7ff fea6 	bl	8009074 <get_fat.isra.8>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009328:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800932a:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800932c:	d802      	bhi.n	8009334 <dir_next+0x5a>
 800932e:	2002      	movs	r0, #2
 8009330:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009334:	1c42      	adds	r2, r0, #1
 8009336:	d102      	bne.n	800933e <dir_next+0x64>
 8009338:	2001      	movs	r0, #1
 800933a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800933e:	69a3      	ldr	r3, [r4, #24]
 8009340:	4298      	cmp	r0, r3
 8009342:	d327      	bcc.n	8009394 <dir_next+0xba>
					if (!stretch) {								/* If no stretch, report EOT */
 8009344:	f1b8 0f00 	cmp.w	r8, #0
 8009348:	d0e2      	beq.n	8009310 <dir_next+0x36>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800934a:	69a9      	ldr	r1, [r5, #24]
 800934c:	4628      	mov	r0, r5
 800934e:	f7ff ff01 	bl	8009154 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009352:	4606      	mov	r6, r0
 8009354:	2800      	cmp	r0, #0
 8009356:	d03d      	beq.n	80093d4 <dir_next+0xfa>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009358:	2801      	cmp	r0, #1
 800935a:	d0e8      	beq.n	800932e <dir_next+0x54>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800935c:	1c43      	adds	r3, r0, #1
 800935e:	d0eb      	beq.n	8009338 <dir_next+0x5e>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009360:	4620      	mov	r0, r4
 8009362:	f7ff fbcb 	bl	8008afc <sync_window>
 8009366:	4680      	mov	r8, r0
 8009368:	2800      	cmp	r0, #0
 800936a:	d1e5      	bne.n	8009338 <dir_next+0x5e>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800936c:	4601      	mov	r1, r0
 800936e:	89a2      	ldrh	r2, [r4, #12]
 8009370:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8009374:	f7ff faa2 	bl	80088bc <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009378:	4631      	mov	r1, r6
 800937a:	4620      	mov	r0, r4
 800937c:	f7ff fb26 	bl	80089cc <clust2sect>
						fs->wflag = 1;
 8009380:	f04f 0901 	mov.w	r9, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009384:	6320      	str	r0, [r4, #48]	; 0x30
 8009386:	8963      	ldrh	r3, [r4, #10]
 8009388:	4598      	cmp	r8, r3
 800938a:	d316      	bcc.n	80093ba <dir_next+0xe0>
					fs->winsect -= n;							/* Restore window offset */
 800938c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800938e:	eba3 0308 	sub.w	r3, r3, r8
 8009392:	6323      	str	r3, [r4, #48]	; 0x30
				dp->clust = clst;		/* Initialize data for new cluster */
 8009394:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8009396:	4631      	mov	r1, r6
 8009398:	4620      	mov	r0, r4
 800939a:	f7ff fb17 	bl	80089cc <clust2sect>
 800939e:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80093a0:	89a1      	ldrh	r1, [r4, #12]
	dp->dptr = ofs;						/* Current entry */
 80093a2:	616f      	str	r7, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80093a4:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80093a8:	fbb7 f2f1 	udiv	r2, r7, r1
 80093ac:	fb01 7712 	mls	r7, r1, r2, r7
 80093b0:	441f      	add	r7, r3
 80093b2:	622f      	str	r7, [r5, #32]
	return FR_OK;
 80093b4:	2000      	movs	r0, #0
 80093b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
						fs->wflag = 1;
 80093ba:	f884 9003 	strb.w	r9, [r4, #3]
 80093be:	4620      	mov	r0, r4
 80093c0:	f7ff fb79 	bl	8008ab6 <sync_window.part.4>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d1b7      	bne.n	8009338 <dir_next+0x5e>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80093c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80093ca:	3301      	adds	r3, #1
 80093cc:	f108 0801 	add.w	r8, r8, #1
 80093d0:	6323      	str	r3, [r4, #48]	; 0x30
 80093d2:	e7d8      	b.n	8009386 <dir_next+0xac>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80093d4:	2007      	movs	r0, #7
}
 80093d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

080093dc <follow_path>:
{
 80093dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 80093e0:	6806      	ldr	r6, [r0, #0]
{
 80093e2:	4604      	mov	r4, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80093e4:	780b      	ldrb	r3, [r1, #0]
 80093e6:	2b2f      	cmp	r3, #47	; 0x2f
 80093e8:	460d      	mov	r5, r1
 80093ea:	f101 0101 	add.w	r1, r1, #1
 80093ee:	d0f9      	beq.n	80093e4 <follow_path+0x8>
 80093f0:	2b5c      	cmp	r3, #92	; 0x5c
 80093f2:	d0f7      	beq.n	80093e4 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 80093f4:	2300      	movs	r3, #0
 80093f6:	60a3      	str	r3, [r4, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80093f8:	782b      	ldrb	r3, [r5, #0]
 80093fa:	2b1f      	cmp	r3, #31
 80093fc:	d959      	bls.n	80094b2 <follow_path+0xd6>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80093fe:	f8df 8160 	ldr.w	r8, [pc, #352]	; 8009560 <follow_path+0x184>
	p = *path; sfn = dp->fn;
 8009402:	f104 0724 	add.w	r7, r4, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8009406:	220b      	movs	r2, #11
 8009408:	2120      	movs	r1, #32
 800940a:	4638      	mov	r0, r7
 800940c:	f7ff fa56 	bl	80088bc <mem_set>
	si = i = 0; ni = 8;
 8009410:	2200      	movs	r2, #0
 8009412:	f105 3eff 	add.w	lr, r5, #4294967295
 8009416:	4611      	mov	r1, r2
 8009418:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 800941a:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 800941e:	2b20      	cmp	r3, #32
		c = (BYTE)p[si++];
 8009420:	f101 0101 	add.w	r1, r1, #1
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009424:	d90b      	bls.n	800943e <follow_path+0x62>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009426:	2b2f      	cmp	r3, #47	; 0x2f
 8009428:	d14b      	bne.n	80094c2 <follow_path+0xe6>
 800942a:	1868      	adds	r0, r5, r1
 800942c:	1b41      	subs	r1, r0, r5
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800942e:	f810 eb01 	ldrb.w	lr, [r0], #1
 8009432:	f1be 0f2f 	cmp.w	lr, #47	; 0x2f
 8009436:	d0f9      	beq.n	800942c <follow_path+0x50>
 8009438:	f1be 0f5c 	cmp.w	lr, #92	; 0x5c
 800943c:	d0f6      	beq.n	800942c <follow_path+0x50>
	*path = p + si;						/* Return pointer to the next segment */
 800943e:	440d      	add	r5, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009440:	2a00      	cmp	r2, #0
 8009442:	d054      	beq.n	80094ee <follow_path+0x112>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009444:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8009448:	f8d4 9000 	ldr.w	r9, [r4]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800944c:	2ae5      	cmp	r2, #229	; 0xe5
 800944e:	bf04      	itt	eq
 8009450:	2205      	moveq	r2, #5
 8009452:	f884 2024 	strbeq.w	r2, [r4, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009456:	2b21      	cmp	r3, #33	; 0x21
 8009458:	bf34      	ite	cc
 800945a:	2304      	movcc	r3, #4
 800945c:	2300      	movcs	r3, #0
 800945e:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009462:	4620      	mov	r0, r4
 8009464:	f7ff ff04 	bl	8009270 <dir_sdi.constprop.11>
	if (res != FR_OK) return res;
 8009468:	2800      	cmp	r0, #0
 800946a:	d145      	bne.n	80094f8 <follow_path+0x11c>
		res = move_window(fs, dp->sect);
 800946c:	69e1      	ldr	r1, [r4, #28]
 800946e:	4648      	mov	r0, r9
 8009470:	f7ff fb94 	bl	8008b9c <move_window>
		if (res != FR_OK) break;
 8009474:	2800      	cmp	r0, #0
 8009476:	d13f      	bne.n	80094f8 <follow_path+0x11c>
		c = dp->dir[DIR_Name];
 8009478:	6a23      	ldr	r3, [r4, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800947a:	781a      	ldrb	r2, [r3, #0]
 800947c:	2a00      	cmp	r2, #0
 800947e:	d046      	beq.n	800950e <follow_path+0x132>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009480:	7ada      	ldrb	r2, [r3, #11]
 8009482:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8009486:	71a2      	strb	r2, [r4, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009488:	7ada      	ldrb	r2, [r3, #11]
 800948a:	0711      	lsls	r1, r2, #28
 800948c:	d40c      	bmi.n	80094a8 <follow_path+0xcc>
 800948e:	f103 0e0b 	add.w	lr, r3, #11
 8009492:	4639      	mov	r1, r7
		r = *d++ - *s++;
 8009494:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009498:	f811 cb01 	ldrb.w	ip, [r1], #1
	} while (--cnt && r == 0);
 800949c:	459e      	cmp	lr, r3
		r = *d++ - *s++;
 800949e:	eba2 020c 	sub.w	r2, r2, ip
	} while (--cnt && r == 0);
 80094a2:	d027      	beq.n	80094f4 <follow_path+0x118>
 80094a4:	2a00      	cmp	r2, #0
 80094a6:	d0f5      	beq.n	8009494 <follow_path+0xb8>
		res = dir_next(dp, 0);	/* Next entry */
 80094a8:	2100      	movs	r1, #0
 80094aa:	4620      	mov	r0, r4
 80094ac:	f7ff ff15 	bl	80092da <dir_next>
 80094b0:	e7da      	b.n	8009468 <follow_path+0x8c>
		dp->fn[NSFLAG] = NS_NONAME;
 80094b2:	2380      	movs	r3, #128	; 0x80
 80094b4:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80094b8:	4620      	mov	r0, r4
}
 80094ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 80094be:	f7ff bed7 	b.w	8009270 <dir_sdi.constprop.11>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80094c2:	2b5c      	cmp	r3, #92	; 0x5c
 80094c4:	d0b1      	beq.n	800942a <follow_path+0x4e>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80094c6:	2b2e      	cmp	r3, #46	; 0x2e
 80094c8:	d039      	beq.n	800953e <follow_path+0x162>
 80094ca:	4290      	cmp	r0, r2
 80094cc:	d90f      	bls.n	80094ee <follow_path+0x112>
		if (c >= 0x80) {				/* Extended character? */
 80094ce:	f013 0f80 	tst.w	r3, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80094d2:	bf18      	it	ne
 80094d4:	3b80      	subne	r3, #128	; 0x80
 80094d6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8009564 <follow_path+0x188>
 80094da:	bf18      	it	ne
 80094dc:	f818 3003 	ldrbne.w	r3, [r8, r3]
	while (*str && *str != chr) str++;
 80094e0:	f819 cf01 	ldrb.w	ip, [r9, #1]!
 80094e4:	f1bc 0f00 	cmp.w	ip, #0
 80094e8:	d02e      	beq.n	8009548 <follow_path+0x16c>
 80094ea:	4563      	cmp	r3, ip
 80094ec:	d1f8      	bne.n	80094e0 <follow_path+0x104>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80094ee:	2006      	movs	r0, #6
	return res;
 80094f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80094f4:	2a00      	cmp	r2, #0
 80094f6:	d1d7      	bne.n	80094a8 <follow_path+0xcc>
			ns = dp->fn[NSFLAG];
 80094f8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 80094fc:	b148      	cbz	r0, 8009512 <follow_path+0x136>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80094fe:	2804      	cmp	r0, #4
 8009500:	d12c      	bne.n	800955c <follow_path+0x180>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009502:	f013 0f04 	tst.w	r3, #4
 8009506:	bf08      	it	eq
 8009508:	2005      	moveq	r0, #5
 800950a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800950e:	2004      	movs	r0, #4
 8009510:	e7f2      	b.n	80094f8 <follow_path+0x11c>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009512:	075a      	lsls	r2, r3, #29
 8009514:	d422      	bmi.n	800955c <follow_path+0x180>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009516:	79a3      	ldrb	r3, [r4, #6]
 8009518:	06db      	lsls	r3, r3, #27
 800951a:	d50d      	bpl.n	8009538 <follow_path+0x15c>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800951c:	89b2      	ldrh	r2, [r6, #12]
 800951e:	6960      	ldr	r0, [r4, #20]
 8009520:	fbb0 f3f2 	udiv	r3, r0, r2
 8009524:	f106 0134 	add.w	r1, r6, #52	; 0x34
 8009528:	fb02 0313 	mls	r3, r2, r3, r0
 800952c:	4419      	add	r1, r3
 800952e:	7830      	ldrb	r0, [r6, #0]
 8009530:	f7ff faa7 	bl	8008a82 <ld_clust.isra.1>
 8009534:	60a0      	str	r0, [r4, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009536:	e764      	b.n	8009402 <follow_path+0x26>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009538:	2005      	movs	r0, #5
 800953a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800953e:	280b      	cmp	r0, #11
 8009540:	d0d5      	beq.n	80094ee <follow_path+0x112>
			i = 8; ni = 11;				/* Goto extension */
 8009542:	2208      	movs	r2, #8
 8009544:	200b      	movs	r0, #11
 8009546:	e768      	b.n	800941a <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009548:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 800954c:	f1bc 0f19 	cmp.w	ip, #25
 8009550:	d801      	bhi.n	8009556 <follow_path+0x17a>
 8009552:	3b20      	subs	r3, #32
 8009554:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8009556:	54bb      	strb	r3, [r7, r2]
 8009558:	3201      	adds	r2, #1
 800955a:	e75e      	b.n	800941a <follow_path+0x3e>
}
 800955c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009560:	080243e2 	.word	0x080243e2
 8009564:	08024461 	.word	0x08024461

08009568 <dir_register>:
{
 8009568:	b570      	push	{r4, r5, r6, lr}
 800956a:	4605      	mov	r5, r0
	FATFS *fs = dp->obj.fs;
 800956c:	6806      	ldr	r6, [r0, #0]
	res = dir_sdi(dp, 0);
 800956e:	f7ff fe7f 	bl	8009270 <dir_sdi.constprop.11>
	if (res == FR_OK) {
 8009572:	4604      	mov	r4, r0
 8009574:	bb28      	cbnz	r0, 80095c2 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8009576:	69e9      	ldr	r1, [r5, #28]
 8009578:	4630      	mov	r0, r6
 800957a:	f7ff fb0f 	bl	8008b9c <move_window>
			if (res != FR_OK) break;
 800957e:	4604      	mov	r4, r0
 8009580:	b9f8      	cbnz	r0, 80095c2 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009582:	6a2b      	ldr	r3, [r5, #32]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	2be5      	cmp	r3, #229	; 0xe5
 8009588:	d114      	bne.n	80095b4 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 800958a:	69e9      	ldr	r1, [r5, #28]
 800958c:	4630      	mov	r0, r6
 800958e:	f7ff fb05 	bl	8008b9c <move_window>
		if (res == FR_OK) {
 8009592:	4604      	mov	r4, r0
 8009594:	b960      	cbnz	r0, 80095b0 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009596:	4601      	mov	r1, r0
 8009598:	2220      	movs	r2, #32
 800959a:	6a28      	ldr	r0, [r5, #32]
 800959c:	f7ff f98e 	bl	80088bc <mem_set>
 80095a0:	220b      	movs	r2, #11
 80095a2:	f105 0124 	add.w	r1, r5, #36	; 0x24
 80095a6:	6a28      	ldr	r0, [r5, #32]
 80095a8:	f7ff fa62 	bl	8008a70 <mem_cpy.part.0>
			fs->wflag = 1;
 80095ac:	2301      	movs	r3, #1
 80095ae:	70f3      	strb	r3, [r6, #3]
}
 80095b0:	4620      	mov	r0, r4
 80095b2:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d0e8      	beq.n	800958a <dir_register+0x22>
			res = dir_next(dp, 1);
 80095b8:	2101      	movs	r1, #1
 80095ba:	4628      	mov	r0, r5
 80095bc:	f7ff fe8d 	bl	80092da <dir_next>
 80095c0:	e7d7      	b.n	8009572 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80095c2:	2c04      	cmp	r4, #4
 80095c4:	bf08      	it	eq
 80095c6:	2407      	moveq	r4, #7
 80095c8:	e7f2      	b.n	80095b0 <dir_register+0x48>
	...

080095cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80095cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80095ce:	9001      	str	r0, [sp, #4]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80095d0:	a804      	add	r0, sp, #16
{
 80095d2:	9100      	str	r1, [sp, #0]
	const TCHAR *rp = path;
 80095d4:	f840 1d04 	str.w	r1, [r0, #-4]!
{
 80095d8:	4616      	mov	r6, r2


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80095da:	f7ff fa16 	bl	8008a0a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80095de:	1e05      	subs	r5, r0, #0
 80095e0:	db1f      	blt.n	8009622 <f_mount+0x56>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80095e2:	4912      	ldr	r1, [pc, #72]	; (800962c <f_mount+0x60>)
 80095e4:	f851 4025 	ldr.w	r4, [r1, r5, lsl #2]

	if (cfs) {
 80095e8:	b15c      	cbz	r4, 8009602 <f_mount+0x36>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80095ea:	4b11      	ldr	r3, [pc, #68]	; (8009630 <f_mount+0x64>)
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	4294      	cmp	r4, r2
 80095f0:	bf04      	itt	eq
 80095f2:	2200      	moveq	r2, #0
 80095f4:	601a      	streq	r2, [r3, #0]
 80095f6:	691a      	ldr	r2, [r3, #16]
 80095f8:	2000      	movs	r0, #0
 80095fa:	4294      	cmp	r4, r2
 80095fc:	bf08      	it	eq
 80095fe:	6118      	streq	r0, [r3, #16]
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009600:	7020      	strb	r0, [r4, #0]
	}

	if (fs) {
 8009602:	9801      	ldr	r0, [sp, #4]
 8009604:	b108      	cbz	r0, 800960a <f_mount+0x3e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009606:	2300      	movs	r3, #0
 8009608:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800960a:	f841 0025 	str.w	r0, [r1, r5, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800960e:	b130      	cbz	r0, 800961e <f_mount+0x52>
 8009610:	2e01      	cmp	r6, #1
 8009612:	d108      	bne.n	8009626 <f_mount+0x5a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009614:	2200      	movs	r2, #0
 8009616:	a901      	add	r1, sp, #4
 8009618:	4668      	mov	r0, sp
 800961a:	f7ff fb1b 	bl	8008c54 <find_volume>
	LEAVE_FF(fs, res);
}
 800961e:	b004      	add	sp, #16
 8009620:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8009622:	200b      	movs	r0, #11
 8009624:	e7fb      	b.n	800961e <f_mount+0x52>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009626:	2000      	movs	r0, #0
 8009628:	e7f9      	b.n	800961e <f_mount+0x52>
 800962a:	bf00      	nop
 800962c:	20000b58 	.word	0x20000b58
 8009630:	20000b5c 	.word	0x20000b5c

08009634 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009638:	b090      	sub	sp, #64	; 0x40
 800963a:	4690      	mov	r8, r2
 800963c:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800963e:	4604      	mov	r4, r0
 8009640:	2800      	cmp	r0, #0
 8009642:	f000 80d1 	beq.w	80097e8 <f_open+0x1b4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009646:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800964a:	462a      	mov	r2, r5
 800964c:	a903      	add	r1, sp, #12
 800964e:	a801      	add	r0, sp, #4
 8009650:	f7ff fb00 	bl	8008c54 <find_volume>
	if (res == FR_OK) {
 8009654:	4607      	mov	r7, r0
 8009656:	bb38      	cbnz	r0, 80096a8 <f_open+0x74>
		dj.obj.fs = fs;
 8009658:	ae10      	add	r6, sp, #64	; 0x40
 800965a:	9b03      	ldr	r3, [sp, #12]
 800965c:	f846 3d30 	str.w	r3, [r6, #-48]!
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009660:	9901      	ldr	r1, [sp, #4]
 8009662:	4630      	mov	r0, r6
 8009664:	f7ff feba 	bl	80093dc <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009668:	b958      	cbnz	r0, 8009682 <f_open+0x4e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800966a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800966e:	2b00      	cmp	r3, #0
 8009670:	db1e      	blt.n	80096b0 <f_open+0x7c>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009672:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8009676:	bf14      	ite	ne
 8009678:	2101      	movne	r1, #1
 800967a:	2100      	moveq	r1, #0
 800967c:	4630      	mov	r0, r6
 800967e:	f7ff f923 	bl	80088c8 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009682:	f018 0f1c 	tst.w	r8, #28
 8009686:	d073      	beq.n	8009770 <f_open+0x13c>
			if (res != FR_OK) {					/* No file, create new */
 8009688:	b1a0      	cbz	r0, 80096b4 <f_open+0x80>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800968a:	2804      	cmp	r0, #4
 800968c:	d109      	bne.n	80096a2 <f_open+0x6e>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800968e:	4b73      	ldr	r3, [pc, #460]	; (800985c <f_open+0x228>)
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	2a00      	cmp	r2, #0
 8009694:	f000 80de 	beq.w	8009854 <f_open+0x220>
 8009698:	691b      	ldr	r3, [r3, #16]
 800969a:	2b00      	cmp	r3, #0
 800969c:	f000 80da 	beq.w	8009854 <f_open+0x220>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80096a0:	2012      	movs	r0, #18
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80096a2:	f045 0508 	orr.w	r5, r5, #8
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80096a6:	b170      	cbz	r0, 80096c6 <f_open+0x92>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80096a8:	2300      	movs	r3, #0
 80096aa:	6023      	str	r3, [r4, #0]
 80096ac:	4607      	mov	r7, r0
 80096ae:	e095      	b.n	80097dc <f_open+0x1a8>
				res = FR_INVALID_NAME;
 80096b0:	2006      	movs	r0, #6
 80096b2:	e7e6      	b.n	8009682 <f_open+0x4e>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80096b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80096b8:	f013 0f11 	tst.w	r3, #17
 80096bc:	d163      	bne.n	8009786 <f_open+0x152>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80096be:	f018 0f04 	tst.w	r8, #4
 80096c2:	f040 80c1 	bne.w	8009848 <f_open+0x214>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80096c6:	0728      	lsls	r0, r5, #28
 80096c8:	d53c      	bpl.n	8009744 <f_open+0x110>
				dw = GET_FATTIME();
 80096ca:	f014 fbdd 	bl	801de88 <get_fattime>
 80096ce:	4602      	mov	r2, r0
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80096d0:	4601      	mov	r1, r0
 80096d2:	980c      	ldr	r0, [sp, #48]	; 0x30
 80096d4:	300e      	adds	r0, #14
 80096d6:	f7ff f8e9 	bl	80088ac <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80096da:	980c      	ldr	r0, [sp, #48]	; 0x30
 80096dc:	4611      	mov	r1, r2
 80096de:	3016      	adds	r0, #22
 80096e0:	f7ff f8e4 	bl	80088ac <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80096e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80096e6:	f8dd 900c 	ldr.w	r9, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80096ea:	2220      	movs	r2, #32
 80096ec:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80096ee:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80096f2:	f899 0000 	ldrb.w	r0, [r9]
 80096f6:	4651      	mov	r1, sl
 80096f8:	f7ff f9c3 	bl	8008a82 <ld_clust.isra.1>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80096fc:	2200      	movs	r2, #0
 80096fe:	4651      	mov	r1, sl
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009700:	4680      	mov	r8, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009702:	4648      	mov	r0, r9
 8009704:	f7ff f9cb 	bl	8008a9e <st_clust.isra.2>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009708:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800970a:	2200      	movs	r2, #0
 800970c:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800970e:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8009710:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8009712:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8009714:	9b03      	ldr	r3, [sp, #12]
 8009716:	2101      	movs	r1, #1
 8009718:	70d9      	strb	r1, [r3, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800971a:	f1b8 0f00 	cmp.w	r8, #0
 800971e:	d011      	beq.n	8009744 <f_open+0x110>
						res = remove_chain(&dj.obj, cl, 0);
 8009720:	4641      	mov	r1, r8
 8009722:	4630      	mov	r0, r6
						dw = fs->winsect;
 8009724:	f8d3 9030 	ldr.w	r9, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8009728:	f7ff fd6c 	bl	8009204 <remove_chain>
						if (res == FR_OK) {
 800972c:	2800      	cmp	r0, #0
 800972e:	d1bb      	bne.n	80096a8 <f_open+0x74>
							res = move_window(fs, dw);
 8009730:	4649      	mov	r1, r9
 8009732:	9803      	ldr	r0, [sp, #12]
 8009734:	f7ff fa32 	bl	8008b9c <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009738:	9a03      	ldr	r2, [sp, #12]
 800973a:	f108 33ff 	add.w	r3, r8, #4294967295
 800973e:	6113      	str	r3, [r2, #16]
		if (res == FR_OK) {
 8009740:	2800      	cmp	r0, #0
 8009742:	d1b1      	bne.n	80096a8 <f_open+0x74>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009744:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009746:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800974a:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 800974c:	bf48      	it	mi
 800974e:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009752:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 8009756:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009758:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800975a:	bf14      	ite	ne
 800975c:	2101      	movne	r1, #1
 800975e:	2100      	moveq	r1, #0
 8009760:	4630      	mov	r0, r6
 8009762:	f7ff f8df 	bl	8008924 <inc_lock>
 8009766:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009768:	2800      	cmp	r0, #0
 800976a:	d13f      	bne.n	80097ec <f_open+0x1b8>
 800976c:	2002      	movs	r0, #2
 800976e:	e79b      	b.n	80096a8 <f_open+0x74>
			if (res == FR_OK) {					/* Following succeeded */
 8009770:	2800      	cmp	r0, #0
 8009772:	d199      	bne.n	80096a8 <f_open+0x74>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009774:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8009778:	06da      	lsls	r2, r3, #27
 800977a:	d467      	bmi.n	800984c <f_open+0x218>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800977c:	f018 0f02 	tst.w	r8, #2
 8009780:	d0e0      	beq.n	8009744 <f_open+0x110>
 8009782:	07db      	lsls	r3, r3, #31
 8009784:	d5de      	bpl.n	8009744 <f_open+0x110>
					res = FR_DENIED;
 8009786:	2007      	movs	r0, #7
 8009788:	e78e      	b.n	80096a8 <f_open+0x74>
					clst = get_fat(&fp->obj, clst);
 800978a:	6820      	ldr	r0, [r4, #0]
 800978c:	f7ff fc72 	bl	8009074 <get_fat.isra.8>
					if (clst <= 1) res = FR_INT_ERR;
 8009790:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 8009792:	4601      	mov	r1, r0
					if (clst <= 1) res = FR_INT_ERR;
 8009794:	d926      	bls.n	80097e4 <f_open+0x1b0>
 8009796:	1c42      	adds	r2, r0, #1
 8009798:	4250      	negs	r0, r2
 800979a:	4150      	adcs	r0, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800979c:	eba5 0508 	sub.w	r5, r5, r8
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d04d      	beq.n	8009840 <f_open+0x20c>
				fp->clust = clst;
 80097a4:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80097a6:	2800      	cmp	r0, #0
 80097a8:	f47f af7e 	bne.w	80096a8 <f_open+0x74>
 80097ac:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80097b0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80097b4:	fbb5 f2f3 	udiv	r2, r5, r3
 80097b8:	fb03 5512 	mls	r5, r3, r2, r5
 80097bc:	b175      	cbz	r5, 80097dc <f_open+0x1a8>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80097be:	4640      	mov	r0, r8
 80097c0:	f7ff f904 	bl	80089cc <clust2sect>
 80097c4:	2800      	cmp	r0, #0
 80097c6:	d0d1      	beq.n	800976c <f_open+0x138>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80097c8:	4402      	add	r2, r0
 80097ca:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	4631      	mov	r1, r6
 80097d0:	f898 0001 	ldrb.w	r0, [r8, #1]
 80097d4:	f7ff f838 	bl	8008848 <disk_read>
 80097d8:	2800      	cmp	r0, #0
 80097da:	d139      	bne.n	8009850 <f_open+0x21c>

	LEAVE_FF(fs, res);
}
 80097dc:	4638      	mov	r0, r7
 80097de:	b010      	add	sp, #64	; 0x40
 80097e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if (clst <= 1) res = FR_INT_ERR;
 80097e4:	2002      	movs	r0, #2
 80097e6:	e7d9      	b.n	800979c <f_open+0x168>
	if (!fp) return FR_INVALID_OBJECT;
 80097e8:	2709      	movs	r7, #9
 80097ea:	e7f7      	b.n	80097dc <f_open+0x1a8>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80097ec:	9e03      	ldr	r6, [sp, #12]
 80097ee:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 80097f2:	7830      	ldrb	r0, [r6, #0]
 80097f4:	4641      	mov	r1, r8
 80097f6:	f7ff f944 	bl	8008a82 <ld_clust.isra.1>
 80097fa:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80097fc:	f108 001c 	add.w	r0, r8, #28
 8009800:	f7ff f84c 	bl	800889c <ld_dword>
			fp->obj.id = fs->id;
 8009804:	88f3      	ldrh	r3, [r6, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009806:	6026      	str	r6, [r4, #0]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009808:	2100      	movs	r1, #0
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800980a:	f104 0630 	add.w	r6, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800980e:	60e0      	str	r0, [r4, #12]
			fp->obj.id = fs->id;
 8009810:	80a3      	strh	r3, [r4, #4]
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009812:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->flag = mode;		/* Set file access mode */
 8009814:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8009816:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009818:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800981a:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800981c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009820:	4630      	mov	r0, r6
 8009822:	f7ff f84b 	bl	80088bc <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009826:	06ab      	lsls	r3, r5, #26
 8009828:	d5d8      	bpl.n	80097dc <f_open+0x1a8>
 800982a:	68e5      	ldr	r5, [r4, #12]
 800982c:	2d00      	cmp	r5, #0
 800982e:	d0d5      	beq.n	80097dc <f_open+0x1a8>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009830:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009832:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009834:	895a      	ldrh	r2, [r3, #10]
 8009836:	f8b3 800c 	ldrh.w	r8, [r3, #12]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800983a:	61a5      	str	r5, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800983c:	fb08 f802 	mul.w	r8, r8, r2
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009840:	45a8      	cmp	r8, r5
 8009842:	d3a2      	bcc.n	800978a <f_open+0x156>
 8009844:	2000      	movs	r0, #0
 8009846:	e7ad      	b.n	80097a4 <f_open+0x170>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009848:	2008      	movs	r0, #8
 800984a:	e72d      	b.n	80096a8 <f_open+0x74>
					res = FR_NO_FILE;
 800984c:	2004      	movs	r0, #4
 800984e:	e72b      	b.n	80096a8 <f_open+0x74>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009850:	2001      	movs	r0, #1
 8009852:	e729      	b.n	80096a8 <f_open+0x74>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009854:	4630      	mov	r0, r6
 8009856:	f7ff fe87 	bl	8009568 <dir_register>
 800985a:	e722      	b.n	80096a2 <f_open+0x6e>
 800985c:	20000b5c 	.word	0x20000b5c

08009860 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	469b      	mov	fp, r3
 8009866:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8009868:	2300      	movs	r3, #0
{
 800986a:	4689      	mov	r9, r1
	*bw = 0;	/* Clear write byte counter */
 800986c:	f8cb 3000 	str.w	r3, [fp]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009870:	a903      	add	r1, sp, #12
{
 8009872:	4604      	mov	r4, r0
 8009874:	4690      	mov	r8, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009876:	f7ff f8e0 	bl	8008a3a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800987a:	4605      	mov	r5, r0
 800987c:	2800      	cmp	r0, #0
 800987e:	d132      	bne.n	80098e6 <f_write+0x86>
 8009880:	7d65      	ldrb	r5, [r4, #21]
 8009882:	bb85      	cbnz	r5, 80098e6 <f_write+0x86>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009884:	7d23      	ldrb	r3, [r4, #20]
 8009886:	079a      	lsls	r2, r3, #30
 8009888:	f140 80be 	bpl.w	8009a08 <f_write+0x1a8>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800988c:	69a3      	ldr	r3, [r4, #24]
 800988e:	eb13 0f08 	cmn.w	r3, r8
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009892:	bf28      	it	cs
 8009894:	ea6f 0803 	mvncs.w	r8, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009898:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800989c:	9300      	str	r3, [sp, #0]
	for ( ;  btw;							/* Repeat until all data written */
 800989e:	f1b8 0f00 	cmp.w	r8, #0
 80098a2:	d01c      	beq.n	80098de <f_write+0x7e>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80098a4:	9803      	ldr	r0, [sp, #12]
 80098a6:	69a1      	ldr	r1, [r4, #24]
 80098a8:	8983      	ldrh	r3, [r0, #12]
 80098aa:	fbb1 f2f3 	udiv	r2, r1, r3
 80098ae:	fb03 1312 	mls	r3, r3, r2, r1
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	f040 8091 	bne.w	80099da <f_write+0x17a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80098b8:	8943      	ldrh	r3, [r0, #10]
 80098ba:	3b01      	subs	r3, #1
			if (csect == 0) {				/* On the cluster boundary? */
 80098bc:	4013      	ands	r3, r2
 80098be:	9301      	str	r3, [sp, #4]
 80098c0:	d124      	bne.n	800990c <f_write+0xac>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80098c2:	b931      	cbnz	r1, 80098d2 <f_write+0x72>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80098c4:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80098c6:	b9a0      	cbnz	r0, 80098f2 <f_write+0x92>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80098c8:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80098ca:	4620      	mov	r0, r4
 80098cc:	f7ff fc42 	bl	8009154 <create_chain>
 80098d0:	e004      	b.n	80098dc <f_write+0x7c>
					if (fp->cltbl) {
 80098d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80098d4:	b15b      	cbz	r3, 80098ee <f_write+0x8e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80098d6:	4620      	mov	r0, r4
 80098d8:	f7ff f883 	bl	80089e2 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80098dc:	b948      	cbnz	r0, 80098f2 <f_write+0x92>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80098de:	7d23      	ldrb	r3, [r4, #20]
 80098e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e4:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 80098e6:	4628      	mov	r0, r5
 80098e8:	b005      	add	sp, #20
 80098ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80098ee:	69e1      	ldr	r1, [r4, #28]
 80098f0:	e7eb      	b.n	80098ca <f_write+0x6a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80098f2:	2801      	cmp	r0, #1
 80098f4:	d102      	bne.n	80098fc <f_write+0x9c>
 80098f6:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80098f8:	7565      	strb	r5, [r4, #21]
 80098fa:	e7f4      	b.n	80098e6 <f_write+0x86>
 80098fc:	1c43      	adds	r3, r0, #1
 80098fe:	d101      	bne.n	8009904 <f_write+0xa4>
 8009900:	2501      	movs	r5, #1
 8009902:	e7f9      	b.n	80098f8 <f_write+0x98>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009904:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 8009906:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009908:	b903      	cbnz	r3, 800990c <f_write+0xac>
 800990a:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800990c:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8009910:	2b00      	cmp	r3, #0
 8009912:	da0c      	bge.n	800992e <f_write+0xce>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009914:	9803      	ldr	r0, [sp, #12]
 8009916:	6a22      	ldr	r2, [r4, #32]
 8009918:	9900      	ldr	r1, [sp, #0]
 800991a:	7840      	ldrb	r0, [r0, #1]
 800991c:	2301      	movs	r3, #1
 800991e:	f7fe ffa1 	bl	8008864 <disk_write>
 8009922:	2800      	cmp	r0, #0
 8009924:	d1ec      	bne.n	8009900 <f_write+0xa0>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009926:	7d23      	ldrb	r3, [r4, #20]
 8009928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800992c:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800992e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8009932:	69e1      	ldr	r1, [r4, #28]
 8009934:	4650      	mov	r0, sl
 8009936:	f7ff f849 	bl	80089cc <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 800993a:	2800      	cmp	r0, #0
 800993c:	d0db      	beq.n	80098f6 <f_write+0x96>
			sect += csect;
 800993e:	9b01      	ldr	r3, [sp, #4]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009940:	f8ba 700c 	ldrh.w	r7, [sl, #12]
 8009944:	fbb8 f7f7 	udiv	r7, r8, r7
			sect += csect;
 8009948:	181e      	adds	r6, r3, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 800994a:	2f00      	cmp	r7, #0
 800994c:	d034      	beq.n	80099b8 <f_write+0x158>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800994e:	9a01      	ldr	r2, [sp, #4]
 8009950:	f8ba 300a 	ldrh.w	r3, [sl, #10]
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009954:	f89a 0001 	ldrb.w	r0, [sl, #1]
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009958:	443a      	add	r2, r7
 800995a:	429a      	cmp	r2, r3
					cc = fs->csize - csect;
 800995c:	bf84      	itt	hi
 800995e:	9a01      	ldrhi	r2, [sp, #4]
 8009960:	1a9f      	subhi	r7, r3, r2
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009962:	463b      	mov	r3, r7
 8009964:	4632      	mov	r2, r6
 8009966:	4649      	mov	r1, r9
 8009968:	f7fe ff7c 	bl	8008864 <disk_write>
 800996c:	2800      	cmp	r0, #0
 800996e:	d1c7      	bne.n	8009900 <f_write+0xa0>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009970:	6a21      	ldr	r1, [r4, #32]
 8009972:	1b89      	subs	r1, r1, r6
 8009974:	428f      	cmp	r7, r1
 8009976:	d90b      	bls.n	8009990 <f_write+0x130>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009978:	9b03      	ldr	r3, [sp, #12]
 800997a:	899a      	ldrh	r2, [r3, #12]
	if (cnt) {
 800997c:	b122      	cbz	r2, 8009988 <f_write+0x128>
 800997e:	fb02 9101 	mla	r1, r2, r1, r9
 8009982:	9800      	ldr	r0, [sp, #0]
 8009984:	f7ff f874 	bl	8008a70 <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009988:	7d23      	ldrb	r3, [r4, #20]
 800998a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800998e:	7523      	strb	r3, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009990:	9b03      	ldr	r3, [sp, #12]
 8009992:	899b      	ldrh	r3, [r3, #12]
 8009994:	435f      	muls	r7, r3
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009996:	69a3      	ldr	r3, [r4, #24]
 8009998:	68e2      	ldr	r2, [r4, #12]
 800999a:	443b      	add	r3, r7
 800999c:	61a3      	str	r3, [r4, #24]
 800999e:	429a      	cmp	r2, r3
 80099a0:	bf2c      	ite	cs
 80099a2:	60e2      	strcs	r2, [r4, #12]
 80099a4:	60e3      	strcc	r3, [r4, #12]
 80099a6:	f8db 3000 	ldr.w	r3, [fp]
 80099aa:	443b      	add	r3, r7
 80099ac:	44b9      	add	r9, r7
 80099ae:	f8cb 3000 	str.w	r3, [fp]
 80099b2:	eba8 0807 	sub.w	r8, r8, r7
 80099b6:	e772      	b.n	800989e <f_write+0x3e>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80099b8:	6a23      	ldr	r3, [r4, #32]
 80099ba:	429e      	cmp	r6, r3
 80099bc:	d00c      	beq.n	80099d8 <f_write+0x178>
 80099be:	69a2      	ldr	r2, [r4, #24]
 80099c0:	68e3      	ldr	r3, [r4, #12]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d208      	bcs.n	80099d8 <f_write+0x178>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80099c6:	2301      	movs	r3, #1
 80099c8:	4632      	mov	r2, r6
 80099ca:	9900      	ldr	r1, [sp, #0]
 80099cc:	f89a 0001 	ldrb.w	r0, [sl, #1]
 80099d0:	f7fe ff3a 	bl	8008848 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80099d4:	2800      	cmp	r0, #0
 80099d6:	d193      	bne.n	8009900 <f_write+0xa0>
			fp->sect = sect;
 80099d8:	6226      	str	r6, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80099da:	9b03      	ldr	r3, [sp, #12]
 80099dc:	899f      	ldrh	r7, [r3, #12]
 80099de:	69a3      	ldr	r3, [r4, #24]
 80099e0:	fbb3 f0f7 	udiv	r0, r3, r7
 80099e4:	fb07 3010 	mls	r0, r7, r0, r3
 80099e8:	1a3f      	subs	r7, r7, r0
 80099ea:	4547      	cmp	r7, r8
 80099ec:	bf28      	it	cs
 80099ee:	4647      	movcs	r7, r8
	if (cnt) {
 80099f0:	b12f      	cbz	r7, 80099fe <f_write+0x19e>
 80099f2:	9b00      	ldr	r3, [sp, #0]
 80099f4:	463a      	mov	r2, r7
 80099f6:	4649      	mov	r1, r9
 80099f8:	4418      	add	r0, r3
 80099fa:	f7ff f839 	bl	8008a70 <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 80099fe:	7d23      	ldrb	r3, [r4, #20]
 8009a00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a04:	7523      	strb	r3, [r4, #20]
 8009a06:	e7c6      	b.n	8009996 <f_write+0x136>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009a08:	2507      	movs	r5, #7
 8009a0a:	e76c      	b.n	80098e6 <f_write+0x86>

08009a0c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009a0e:	a901      	add	r1, sp, #4
{
 8009a10:	4604      	mov	r4, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009a12:	f7ff f812 	bl	8008a3a <validate>
	if (res == FR_OK) {
 8009a16:	4605      	mov	r5, r0
 8009a18:	2800      	cmp	r0, #0
 8009a1a:	d13a      	bne.n	8009a92 <f_sync+0x86>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009a1c:	7d23      	ldrb	r3, [r4, #20]
 8009a1e:	065a      	lsls	r2, r3, #25
 8009a20:	d537      	bpl.n	8009a92 <f_sync+0x86>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009a22:	061b      	lsls	r3, r3, #24
 8009a24:	d50c      	bpl.n	8009a40 <f_sync+0x34>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009a26:	9801      	ldr	r0, [sp, #4]
 8009a28:	6a22      	ldr	r2, [r4, #32]
 8009a2a:	7840      	ldrb	r0, [r0, #1]
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8009a32:	f7fe ff17 	bl	8008864 <disk_write>
 8009a36:	bb78      	cbnz	r0, 8009a98 <f_sync+0x8c>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009a38:	7d23      	ldrb	r3, [r4, #20]
 8009a3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a3e:	7523      	strb	r3, [r4, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009a40:	f014 fa22 	bl	801de88 <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009a44:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 8009a46:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 8009a48:	9801      	ldr	r0, [sp, #4]
 8009a4a:	f7ff f8a7 	bl	8008b9c <move_window>
				if (res == FR_OK) {
 8009a4e:	4605      	mov	r5, r0
 8009a50:	b9f8      	cbnz	r0, 8009a92 <f_sync+0x86>
					dir = fp->dir_ptr;
 8009a52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009a54:	7af3      	ldrb	r3, [r6, #11]
 8009a56:	f043 0320 	orr.w	r3, r3, #32
 8009a5a:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009a5c:	68a2      	ldr	r2, [r4, #8]
 8009a5e:	6820      	ldr	r0, [r4, #0]
 8009a60:	4631      	mov	r1, r6
 8009a62:	f7ff f81c 	bl	8008a9e <st_clust.isra.2>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009a66:	68e1      	ldr	r1, [r4, #12]
 8009a68:	f106 001c 	add.w	r0, r6, #28
 8009a6c:	f7fe ff1e 	bl	80088ac <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009a70:	4639      	mov	r1, r7
 8009a72:	f106 0016 	add.w	r0, r6, #22
 8009a76:	f7fe ff19 	bl	80088ac <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8009a7a:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a7c:	74b5      	strb	r5, [r6, #18]
					fs->wflag = 1;
 8009a7e:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8009a80:	74f5      	strb	r5, [r6, #19]
					fs->wflag = 1;
 8009a82:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009a84:	f7ff f840 	bl	8008b08 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009a88:	7d23      	ldrb	r3, [r4, #20]
 8009a8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 8009a8e:	4605      	mov	r5, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009a90:	7523      	strb	r3, [r4, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 8009a92:	4628      	mov	r0, r5
 8009a94:	b003      	add	sp, #12
 8009a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009a98:	2501      	movs	r5, #1
 8009a9a:	e7fa      	b.n	8009a92 <f_sync+0x86>

08009a9c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009a9c:	b513      	push	{r0, r1, r4, lr}
 8009a9e:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009aa0:	f7ff ffb4 	bl	8009a0c <f_sync>
	if (res == FR_OK)
 8009aa4:	b948      	cbnz	r0, 8009aba <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009aa6:	a901      	add	r1, sp, #4
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f7fe ffc6 	bl	8008a3a <validate>
		if (res == FR_OK) {
 8009aae:	b920      	cbnz	r0, 8009aba <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009ab0:	6920      	ldr	r0, [r4, #16]
 8009ab2:	f7fe ff73 	bl	800899c <dec_lock>
			if (res == FR_OK)
 8009ab6:	b900      	cbnz	r0, 8009aba <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009ab8:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8009aba:	b002      	add	sp, #8
 8009abc:	bd10      	pop	{r4, pc}
	...

08009ac0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009ac0:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8009ac2:	4b0f      	ldr	r3, [pc, #60]	; (8009b00 <FATFS_LinkDriverEx+0x40>)
 8009ac4:	7a5d      	ldrb	r5, [r3, #9]
 8009ac6:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8009aca:	b9b5      	cbnz	r5, 8009afa <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009acc:	7a5d      	ldrb	r5, [r3, #9]
 8009ace:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8009ad0:	7a5d      	ldrb	r5, [r3, #9]
 8009ad2:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8009ad6:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8009ad8:	7a58      	ldrb	r0, [r3, #9]
 8009ada:	4418      	add	r0, r3
 8009adc:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8009ade:	7a5a      	ldrb	r2, [r3, #9]
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	1c50      	adds	r0, r2, #1
 8009ae4:	b2c0      	uxtb	r0, r0
 8009ae6:	7258      	strb	r0, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8009ae8:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8009aea:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8009aec:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8009aee:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8009af0:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8009af2:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8009af4:	70cc      	strb	r4, [r1, #3]
 8009af6:	4620      	mov	r0, r4
 8009af8:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8009afa:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8009afc:	bd30      	pop	{r4, r5, pc}
 8009afe:	bf00      	nop
 8009b00:	20000b80 	.word	0x20000b80

08009b04 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b04:	2200      	movs	r2, #0
 8009b06:	f7ff bfdb 	b.w	8009ac0 <FATFS_LinkDriverEx>
	...

08009b0c <FATFS_UnLinkDriverEx>:
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
  uint8_t DiskNum = 0;
  uint8_t ret = 1;

  if(disk.nbr >= 1)
 8009b0c:	4a0a      	ldr	r2, [pc, #40]	; (8009b38 <FATFS_UnLinkDriverEx+0x2c>)
 8009b0e:	7a53      	ldrb	r3, [r2, #9]
 8009b10:	b17b      	cbz	r3, 8009b32 <FATFS_UnLinkDriverEx+0x26>
  {
    DiskNum = path[0] - '0';
 8009b12:	7803      	ldrb	r3, [r0, #0]
 8009b14:	3b30      	subs	r3, #48	; 0x30
    if(disk.drv[DiskNum] != 0)
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8009b1c:	6848      	ldr	r0, [r1, #4]
 8009b1e:	b140      	cbz	r0, 8009b32 <FATFS_UnLinkDriverEx+0x26>
    {
      disk.drv[DiskNum] = 0;
      disk.lun[DiskNum] = 0;
 8009b20:	4413      	add	r3, r2
      disk.drv[DiskNum] = 0;
 8009b22:	2000      	movs	r0, #0
      disk.lun[DiskNum] = 0;
 8009b24:	7218      	strb	r0, [r3, #8]
      disk.nbr--;
 8009b26:	7a53      	ldrb	r3, [r2, #9]
      disk.drv[DiskNum] = 0;
 8009b28:	6048      	str	r0, [r1, #4]
      disk.nbr--;
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	b2db      	uxtb	r3, r3
 8009b2e:	7253      	strb	r3, [r2, #9]
 8009b30:	4770      	bx	lr
  uint8_t ret = 1;
 8009b32:	2001      	movs	r0, #1
      ret = 0;
    }
  }

  return ret;
}
 8009b34:	4770      	bx	lr
 8009b36:	bf00      	nop
 8009b38:	20000b80 	.word	0x20000b80

08009b3c <FATFS_UnLinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
  return FATFS_UnLinkDriverEx(path, 0);
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	f7ff bfe5 	b.w	8009b0c <FATFS_UnLinkDriverEx>
 8009b42:	0000      	movs	r0, r0
 8009b44:	0000      	movs	r0, r0
	...

08009b48 <calcNorm560>:
double M_inv[9] = { 1.07645, -0.237662, 0.161212,
					0.410964, 0.554342, 0.034694,
					-0.010954, -0.013389, 1.024343 };
					
void calcNorm560(uint16_t CCT_measure)
{
 8009b48:	b508      	push	{r3, lr}
	norm_560 = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 8009b4a:	f7f6 fcfb 	bl	8000544 <__aeabi_i2d>
 8009b4e:	a316      	add	r3, pc, #88	; (adr r3, 8009ba8 <calcNorm560+0x60>)
 8009b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b54:	f7f6 fd5c 	bl	8000610 <__aeabi_dmul>
 8009b58:	4602      	mov	r2, r0
 8009b5a:	460b      	mov	r3, r1
 8009b5c:	a114      	add	r1, pc, #80	; (adr r1, 8009bb0 <calcNorm560+0x68>)
 8009b5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b62:	f7f6 fe7f 	bl	8000864 <__aeabi_ddiv>
 8009b66:	ec41 0b10 	vmov	d0, r0, r1
 8009b6a:	f018 fe79 	bl	8022860 <exp>
 8009b6e:	2200      	movs	r2, #0
 8009b70:	ec51 0b10 	vmov	r0, r1, d0
 8009b74:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <calcNorm560+0x58>)
 8009b76:	f7f6 fb97 	bl	80002a8 <__aeabi_dsub>
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	a106      	add	r1, pc, #24	; (adr r1, 8009b98 <calcNorm560+0x50>)
 8009b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b84:	f7f6 fe6e 	bl	8000864 <__aeabi_ddiv>
 8009b88:	f7f7 f83a 	bl	8000c00 <__aeabi_d2f>
 8009b8c:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <calcNorm560+0x5c>)
 8009b8e:	6018      	str	r0, [r3, #0]
 8009b90:	bd08      	pop	{r3, pc}
 8009b92:	bf00      	nop
 8009b94:	f3af 8000 	nop.w
 8009b98:	f9f35846 	.word	0xf9f35846
 8009b9c:	466ca5d1 	.word	0x466ca5d1
 8009ba0:	3ff00000 	.word	0x3ff00000
 8009ba4:	2008ba98 	.word	0x2008ba98
 8009ba8:	05ea7ab3 	.word	0x05ea7ab3
 8009bac:	3ea2ca5d 	.word	0x3ea2ca5d
 8009bb0:	aba38759 	.word	0xaba38759
 8009bb4:	3f8d7774 	.word	0x3f8d7774

08009bb8 <calcSref>:
}

double ans = 0;
double calcSref(int idx, uint16_t CCT_measure)
{
 8009bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (CCT_measure < 5000)
 8009bbc:	f241 3387 	movw	r3, #4999	; 0x1387
 8009bc0:	4299      	cmp	r1, r3
{
 8009bc2:	460e      	mov	r6, r1
 8009bc4:	ea4f 0080 	mov.w	r0, r0, lsl #2
 8009bc8:	4c3b      	ldr	r4, [pc, #236]	; (8009cb8 <calcSref+0x100>)
	if (CCT_measure < 5000)
 8009bca:	d84d      	bhi.n	8009c68 <calcSref+0xb0>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 8009bcc:	4d3b      	ldr	r5, [pc, #236]	; (8009cbc <calcSref+0x104>)
 8009bce:	4405      	add	r5, r0
 8009bd0:	6828      	ldr	r0, [r5, #0]
 8009bd2:	f7f6 fcc9 	bl	8000568 <__aeabi_f2d>
 8009bd6:	a332      	add	r3, pc, #200	; (adr r3, 8009ca0 <calcSref+0xe8>)
 8009bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bdc:	f7f6 fd18 	bl	8000610 <__aeabi_dmul>
 8009be0:	4680      	mov	r8, r0
 8009be2:	4630      	mov	r0, r6
 8009be4:	4689      	mov	r9, r1
 8009be6:	f7f6 fcad 	bl	8000544 <__aeabi_i2d>
 8009bea:	4602      	mov	r2, r0
 8009bec:	460b      	mov	r3, r1
 8009bee:	4640      	mov	r0, r8
 8009bf0:	4649      	mov	r1, r9
 8009bf2:	f7f6 fd0d 	bl	8000610 <__aeabi_dmul>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	a12b      	add	r1, pc, #172	; (adr r1, 8009ca8 <calcSref+0xf0>)
 8009bfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c00:	f7f6 fe30 	bl	8000864 <__aeabi_ddiv>
 8009c04:	ec41 0b10 	vmov	d0, r0, r1
 8009c08:	f018 fe2a 	bl	8022860 <exp>
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	ec51 0b10 	vmov	r0, r1, d0
 8009c12:	4b2b      	ldr	r3, [pc, #172]	; (8009cc0 <calcSref+0x108>)
 8009c14:	f7f6 fb48 	bl	80002a8 <__aeabi_dsub>
 8009c18:	e9c4 0100 	strd	r0, r1, [r4]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009c1c:	6828      	ldr	r0, [r5, #0]
 8009c1e:	f7f6 fca3 	bl	8000568 <__aeabi_f2d>
 8009c22:	a31f      	add	r3, pc, #124	; (adr r3, 8009ca0 <calcSref+0xe8>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	f7f6 fcf2 	bl	8000610 <__aeabi_dmul>
 8009c2c:	ed9f 1b20 	vldr	d1, [pc, #128]	; 8009cb0 <calcSref+0xf8>
 8009c30:	ec41 0b10 	vmov	d0, r0, r1
 8009c34:	f018 ff10 	bl	8022a58 <pow>
 8009c38:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009c3c:	ec51 0b10 	vmov	r0, r1, d0
 8009c40:	f7f6 fe10 	bl	8000864 <__aeabi_ddiv>
		ans /= norm_560;
 8009c44:	4b1f      	ldr	r3, [pc, #124]	; (8009cc4 <calcSref+0x10c>)
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009c46:	4606      	mov	r6, r0
		ans /= norm_560;
 8009c48:	6818      	ldr	r0, [r3, #0]
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 8009c4a:	460f      	mov	r7, r1
		ans /= norm_560;
 8009c4c:	f7f6 fc8c 	bl	8000568 <__aeabi_f2d>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4630      	mov	r0, r6
 8009c56:	4639      	mov	r1, r7
 8009c58:	f7f6 fe04 	bl	8000864 <__aeabi_ddiv>
	}
	else
	{
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 8009c5c:	e9c4 0100 	strd	r0, r1, [r4]
	}
	return ans;
}
 8009c60:	ed94 0b00 	vldr	d0, [r4]
 8009c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		ans = S0_lambda[idx] + M1*S1_lambda[idx] + M2*S2_lambda[idx];
 8009c68:	4a17      	ldr	r2, [pc, #92]	; (8009cc8 <calcSref+0x110>)
 8009c6a:	4b18      	ldr	r3, [pc, #96]	; (8009ccc <calcSref+0x114>)
 8009c6c:	4918      	ldr	r1, [pc, #96]	; (8009cd0 <calcSref+0x118>)
 8009c6e:	4403      	add	r3, r0
 8009c70:	4401      	add	r1, r0
 8009c72:	4410      	add	r0, r2
 8009c74:	4a17      	ldr	r2, [pc, #92]	; (8009cd4 <calcSref+0x11c>)
 8009c76:	edd1 6a00 	vldr	s13, [r1]
 8009c7a:	ed92 7a00 	vldr	s14, [r2]
 8009c7e:	edd0 7a00 	vldr	s15, [r0]
 8009c82:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009c86:	edd3 6a00 	vldr	s13, [r3]
 8009c8a:	4b13      	ldr	r3, [pc, #76]	; (8009cd8 <calcSref+0x120>)
 8009c8c:	ed93 7a00 	vldr	s14, [r3]
 8009c90:	eee6 7a87 	vfma.f32	s15, s13, s14
 8009c94:	ee17 0a90 	vmov	r0, s15
 8009c98:	f7f6 fc66 	bl	8000568 <__aeabi_f2d>
 8009c9c:	e7de      	b.n	8009c5c <calcSref+0xa4>
 8009c9e:	bf00      	nop
 8009ca0:	e826d695 	.word	0xe826d695
 8009ca4:	3e112e0b 	.word	0x3e112e0b
 8009ca8:	aba38759 	.word	0xaba38759
 8009cac:	3f8d7774 	.word	0x3f8d7774
 8009cb0:	00000000 	.word	0x00000000
 8009cb4:	c0140000 	.word	0xc0140000
 8009cb8:	20002ba8 	.word	0x20002ba8
 8009cbc:	2004fbe4 	.word	0x2004fbe4
 8009cc0:	3ff00000 	.word	0x3ff00000
 8009cc4:	2008ba98 	.word	0x2008ba98
 8009cc8:	20049bdc 	.word	0x20049bdc
 8009ccc:	2004bbdc 	.word	0x2004bbdc
 8009cd0:	2004abdc 	.word	0x2004abdc
 8009cd4:	20002b8c 	.word	0x20002b8c
 8009cd8:	20002b90 	.word	0x20002b90
 8009cdc:	00000000 	.word	0x00000000

08009ce0 <cqs_func>:

void cqs_func(uint16_t CCT_measure, float *Rabs)
{
 8009ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce4:	ed2d 8b0a 	vpush	{d8-d12}
 8009ce8:	b0af      	sub	sp, #188	; 0xbc
 8009cea:	460c      	mov	r4, r1
 8009cec:	9004      	str	r0, [sp, #16]
	double x_test = 0;	
	double y_test = 0;		
	double z_test = 0;	
	
	
	memset(CQS_S_test, 0, sizeof(CQS_S_test));
 8009cee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009cf2:	2100      	movs	r1, #0
 8009cf4:	48c4      	ldr	r0, [pc, #784]	; (800a008 <cqs_func+0x328>)
 8009cf6:	f018 f842 	bl	8021d7e <memset>
	memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 8009cfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009cfe:	2100      	movs	r1, #0
 8009d00:	48c2      	ldr	r0, [pc, #776]	; (800a00c <cqs_func+0x32c>)
 8009d02:	f018 f83c 	bl	8021d7e <memset>
	
	for (uint16_t i = 0; i < 1024; i++){
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 8009d06:	4bc2      	ldr	r3, [pc, #776]	; (800a010 <cqs_func+0x330>)
 8009d08:	ed93 7a00 	vldr	s14, [r3]
 8009d0c:	4bbe      	ldr	r3, [pc, #760]	; (800a008 <cqs_func+0x328>)
 8009d0e:	4621      	mov	r1, r4
 8009d10:	f504 5280 	add.w	r2, r4, #4096	; 0x1000
 8009d14:	ecf1 6a01 	vldmia	r1!, {s13}
 8009d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t i = 0; i < 1024; i++){
 8009d1c:	428a      	cmp	r2, r1
		CQS_S_test[i] = Rabs[i]/max_Rabs;
 8009d1e:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t i = 0; i < 1024; i++){
 8009d22:	d1f7      	bne.n	8009d14 <cqs_func+0x34>
	}

	if (CCT_measure < 3500){
 8009d24:	9a04      	ldr	r2, [sp, #16]
 8009d26:	f640 53ab 	movw	r3, #3499	; 0xdab
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	f200 870d 	bhi.w	800ab4a <cqs_func+0xe6a>
		Mcct = (float)CCT_measure*(float)CCT_measure*(float)CCT_measure*0.000000000092672 - (float)CCT_measure*(float)CCT_measure*0.00000083959 + (float)CCT_measure*0.00255 - 1.612;
 8009d30:	ee07 2a90 	vmov	s15, r2
 8009d34:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8009d38:	ee68 8a08 	vmul.f32	s17, s16, s16
 8009d3c:	ee68 7a28 	vmul.f32	s15, s16, s17
 8009d40:	ee17 0a90 	vmov	r0, s15
 8009d44:	f7f6 fc10 	bl	8000568 <__aeabi_f2d>
 8009d48:	a3a3      	add	r3, pc, #652	; (adr r3, 8009fd8 <cqs_func+0x2f8>)
 8009d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4e:	f7f6 fc5f 	bl	8000610 <__aeabi_dmul>
 8009d52:	4604      	mov	r4, r0
 8009d54:	ee18 0a90 	vmov	r0, s17
 8009d58:	460d      	mov	r5, r1
 8009d5a:	f7f6 fc05 	bl	8000568 <__aeabi_f2d>
 8009d5e:	a3a0      	add	r3, pc, #640	; (adr r3, 8009fe0 <cqs_func+0x300>)
 8009d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d64:	f7f6 fc54 	bl	8000610 <__aeabi_dmul>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	4629      	mov	r1, r5
 8009d70:	f7f6 fa9a 	bl	80002a8 <__aeabi_dsub>
 8009d74:	4604      	mov	r4, r0
 8009d76:	ee18 0a10 	vmov	r0, s16
 8009d7a:	460d      	mov	r5, r1
 8009d7c:	f7f6 fbf4 	bl	8000568 <__aeabi_f2d>
 8009d80:	a399      	add	r3, pc, #612	; (adr r3, 8009fe8 <cqs_func+0x308>)
 8009d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d86:	f7f6 fc43 	bl	8000610 <__aeabi_dmul>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4620      	mov	r0, r4
 8009d90:	4629      	mov	r1, r5
 8009d92:	f7f6 fa8b 	bl	80002ac <__adddf3>
 8009d96:	a396      	add	r3, pc, #600	; (adr r3, 8009ff0 <cqs_func+0x310>)
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	f7f6 fa84 	bl	80002a8 <__aeabi_dsub>
 8009da0:	4b9c      	ldr	r3, [pc, #624]	; (800a014 <cqs_func+0x334>)
 8009da2:	e9c3 0100 	strd	r0, r1, [r3]
	}
	
	if (CCT_measure < 5000)
	{
		calcNorm560(CCT_measure);
 8009da6:	9804      	ldr	r0, [sp, #16]
 8009da8:	f7ff fece 	bl	8009b48 <calcNorm560>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
	}
	
	bar_CQS = 0.2;
 8009dac:	a192      	add	r1, pc, #584	; (adr r1, 8009ff8 <cqs_func+0x318>)
 8009dae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009db2:	4b99      	ldr	r3, [pc, #612]	; (800a018 <cqs_func+0x338>)
	GUI_Bar_Measure(85, 13, bar_CQS);
 8009db4:	ed9f 0a99 	vldr	s0, [pc, #612]	; 800a01c <cqs_func+0x33c>
	bar_CQS = 0.2;
 8009db8:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CQS);
 8009dbc:	210d      	movs	r1, #13
 8009dbe:	2055      	movs	r0, #85	; 0x55
 8009dc0:	f00b fc64 	bl	801568c <GUI_Bar_Measure>

	memset(x_ref, 0, sizeof(x_ref));
 8009dc4:	2278      	movs	r2, #120	; 0x78
 8009dc6:	2100      	movs	r1, #0
 8009dc8:	4895      	ldr	r0, [pc, #596]	; (800a020 <cqs_func+0x340>)
 8009dca:	f017 ffd8 	bl	8021d7e <memset>
	memset(y_ref, 0, sizeof(y_ref));
 8009dce:	2278      	movs	r2, #120	; 0x78
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	4894      	ldr	r0, [pc, #592]	; (800a024 <cqs_func+0x344>)
 8009dd4:	f017 ffd3 	bl	8021d7e <memset>
	memset(z_ref, 0, sizeof(z_ref));
 8009dd8:	2278      	movs	r2, #120	; 0x78
 8009dda:	2100      	movs	r1, #0
 8009ddc:	4892      	ldr	r0, [pc, #584]	; (800a028 <cqs_func+0x348>)
 8009dde:	f017 ffce 	bl	8021d7e <memset>
	double zw_test = 0;
 8009de2:	f04f 0a00 	mov.w	sl, #0
 8009de6:	f04f 0b00 	mov.w	fp, #0
 8009dea:	4b8d      	ldr	r3, [pc, #564]	; (800a020 <cqs_func+0x340>)
 8009dec:	930a      	str	r3, [sp, #40]	; 0x28
	double yw_test = 0;
 8009dee:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8009df2:	4b8c      	ldr	r3, [pc, #560]	; (800a024 <cqs_func+0x344>)
 8009df4:	9308      	str	r3, [sp, #32]
	double xw_test = 0;
 8009df6:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
	double zw_ref = 0;
 8009dfa:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
	double yw_ref = 0;
 8009dfe:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
	double xw_ref = 0;
 8009e02:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
	double k_test = 0;
 8009e06:	e9cd ab02 	strd	sl, fp, [sp, #8]
	double k_ref = 0;
 8009e0a:	e9cd ab00 	strd	sl, fp, [sp]
 8009e0e:	4b86      	ldr	r3, [pc, #536]	; (800a028 <cqs_func+0x348>)
 8009e10:	9306      	str	r3, [sp, #24]
		bar_CQS += 0.04;
		GUI_Bar_Measure(85, 13, bar_CQS);
		
		 x_test = 0;	
		 y_test = 0;		
		 z_test = 0;	
 8009e12:	ec4b ab1b 	vmov	d11, sl, fp
		 y_test = 0;		
 8009e16:	ec4b ab1a 	vmov	d10, sl, fp
	memset(z_ref, 0, sizeof(z_ref));
 8009e1a:	2400      	movs	r4, #0
		bar_CQS += 0.04;
 8009e1c:	4d7e      	ldr	r5, [pc, #504]	; (800a018 <cqs_func+0x338>)
 8009e1e:	4f83      	ldr	r7, [pc, #524]	; (800a02c <cqs_func+0x34c>)
	
	
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 8009e20:	4e79      	ldr	r6, [pc, #484]	; (800a008 <cqs_func+0x328>)
		bar_CQS += 0.04;
 8009e22:	a377      	add	r3, pc, #476	; (adr r3, 800a000 <cqs_func+0x320>)
 8009e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e28:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009e2c:	f7f6 fa3e 	bl	80002ac <__adddf3>
 8009e30:	e9c5 0100 	strd	r0, r1, [r5]
		GUI_Bar_Measure(85, 13, bar_CQS);
 8009e34:	f7f6 fee4 	bl	8000c00 <__aeabi_d2f>
 8009e38:	210d      	movs	r1, #13
 8009e3a:	ee00 0a10 	vmov	s0, r0
 8009e3e:	2055      	movs	r0, #85	; 0x55
 8009e40:	f00b fc24 	bl	801568c <GUI_Bar_Measure>
		Calibration_Load_Pack(CQS_R1+i*0x1000, 0x400, CQS_R_temp);
 8009e44:	487a      	ldr	r0, [pc, #488]	; (800a030 <cqs_func+0x350>)
 8009e46:	4a71      	ldr	r2, [pc, #452]	; (800a00c <cqs_func+0x32c>)
 8009e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009e4c:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 8009e50:	f004 feea 	bl	800ec28 <Calibration_Load_Pack>
 8009e54:	4b77      	ldr	r3, [pc, #476]	; (800a034 <cqs_func+0x354>)
 8009e56:	9320      	str	r3, [sp, #128]	; 0x80
 8009e58:	4b77      	ldr	r3, [pc, #476]	; (800a038 <cqs_func+0x358>)
 8009e5a:	931e      	str	r3, [sp, #120]	; 0x78
		 z_test = 0;	
 8009e5c:	ed8d bb1a 	vstr	d11, [sp, #104]	; 0x68
 8009e60:	4b76      	ldr	r3, [pc, #472]	; (800a03c <cqs_func+0x35c>)
 8009e62:	931c      	str	r3, [sp, #112]	; 0x70
		 y_test = 0;		
 8009e64:	ed8d ab18 	vstr	d10, [sp, #96]	; 0x60
		 x_test = 0;	
 8009e68:	ed8d ab16 	vstr	d10, [sp, #88]	; 0x58
 8009e6c:	b2e3      	uxtb	r3, r4

		for (int j = 0; j < 1024; j++)
 8009e6e:	2500      	movs	r5, #0
 8009e70:	9326      	str	r3, [sp, #152]	; 0x98
		{
			if (i == 0)
 8009e72:	2c00      	cmp	r4, #0
 8009e74:	d17d      	bne.n	8009f72 <cqs_func+0x292>
			{
				s_ref[j] = calcSref(j, CCT_measure);
 8009e76:	9904      	ldr	r1, [sp, #16]
 8009e78:	4628      	mov	r0, r5
 8009e7a:	f7ff fe9d 	bl	8009bb8 <calcSref>
 8009e7e:	ec51 0b10 	vmov	r0, r1, d0
 8009e82:	f7f6 febd 	bl	8000c00 <__aeabi_d2f>
 8009e86:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009e88:	6018      	str	r0, [r3, #0]
				k_ref += s_ref[j] * Spectral_day[j];
 8009e8a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
				s_ref[j] = calcSref(j, CCT_measure);
 8009e8c:	ee08 0a10 	vmov	s16, r0
				k_ref += s_ref[j] * Spectral_day[j];
 8009e90:	edd3 9a00 	vldr	s19, [r3]
 8009e94:	ee68 7a29 	vmul.f32	s15, s16, s19
 8009e98:	ee17 0a90 	vmov	r0, s15
 8009e9c:	f7f6 fb64 	bl	8000568 <__aeabi_f2d>
 8009ea0:	4602      	mov	r2, r0
 8009ea2:	4680      	mov	r8, r0
 8009ea4:	4689      	mov	r9, r1
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009eac:	f7f6 f9fe 	bl	80002ac <__adddf3>
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8009eb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009eb2:	ed93 9a00 	vldr	s18, [r3]
 8009eb6:	ee68 7a09 	vmul.f32	s15, s16, s18
				k_ref += s_ref[j] * Spectral_day[j];
 8009eba:	e9cd 0100 	strd	r0, r1, [sp]
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8009ebe:	ee17 0a90 	vmov	r0, s15
 8009ec2:	f7f6 fb51 	bl	8000568 <__aeabi_f2d>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	460b      	mov	r3, r1
 8009eca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009ece:	f7f6 f9ed 	bl	80002ac <__adddf3>
				yw_ref += s_ref[j] * Spectral_day[j];
 8009ed2:	4642      	mov	r2, r8
 8009ed4:	464b      	mov	r3, r9
				xw_ref += s_ref[j] * calibratre_x_1931[j];
 8009ed6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
				yw_ref += s_ref[j] * Spectral_day[j];
 8009eda:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009ede:	f7f6 f9e5 	bl	80002ac <__adddf3>
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8009ee2:	edd7 8a00 	vldr	s17, [r7]
 8009ee6:	ee68 7a28 	vmul.f32	s15, s16, s17
				yw_ref += s_ref[j] * Spectral_day[j];
 8009eea:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8009eee:	ee17 0a90 	vmov	r0, s15
 8009ef2:	f7f6 fb39 	bl	8000568 <__aeabi_f2d>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009efe:	f7f6 f9d5 	bl	80002ac <__adddf3>
				k_test += CQS_S_test[j] * Spectral_day[j];
 8009f02:	ed96 8a00 	vldr	s16, [r6]
 8009f06:	ee69 7a88 	vmul.f32	s15, s19, s16
				zw_ref += s_ref[j] * calibratre_z_1931[j];
 8009f0a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
				k_test += CQS_S_test[j] * Spectral_day[j];
 8009f0e:	ee17 0a90 	vmov	r0, s15
 8009f12:	f7f6 fb29 	bl	8000568 <__aeabi_f2d>
 8009f16:	4602      	mov	r2, r0
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	4689      	mov	r9, r1
 8009f1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f22:	f7f6 f9c3 	bl	80002ac <__adddf3>
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8009f26:	ee69 7a08 	vmul.f32	s15, s18, s16
				k_test += CQS_S_test[j] * Spectral_day[j];
 8009f2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8009f2e:	ee17 0a90 	vmov	r0, s15
 8009f32:	f7f6 fb19 	bl	8000568 <__aeabi_f2d>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8009f3e:	f7f6 f9b5 	bl	80002ac <__adddf3>
				yw_test += CQS_S_test[j] * Spectral_day[j];
 8009f42:	4642      	mov	r2, r8
 8009f44:	464b      	mov	r3, r9
				xw_test += CQS_S_test[j] * calibratre_x_1931[j];
 8009f46:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
				yw_test += CQS_S_test[j] * Spectral_day[j];
 8009f4a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8009f4e:	f7f6 f9ad 	bl	80002ac <__adddf3>
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 8009f52:	ee68 7a88 	vmul.f32	s15, s17, s16
				yw_test += CQS_S_test[j] * Spectral_day[j];
 8009f56:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
				zw_test += CQS_S_test[j] * calibratre_z_1931[j];
 8009f5a:	ee17 0a90 	vmov	r0, s15
 8009f5e:	f7f6 fb03 	bl	8000568 <__aeabi_f2d>
 8009f62:	4602      	mov	r2, r0
 8009f64:	460b      	mov	r3, r1
 8009f66:	4650      	mov	r0, sl
 8009f68:	4659      	mov	r1, fp
 8009f6a:	f7f6 f99f 	bl	80002ac <__adddf3>
 8009f6e:	4682      	mov	sl, r0
 8009f70:	468b      	mov	fp, r1
			}

			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009f72:	4b26      	ldr	r3, [pc, #152]	; (800a00c <cqs_func+0x32c>)
 8009f74:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8009f78:	ed93 8a00 	vldr	s16, [r3]
 8009f7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009f7e:	ecb3 9a01 	vldmia	r3!, {s18}
 8009f82:	9320      	str	r3, [sp, #128]	; 0x80
 8009f84:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8009f86:	ee28 9a09 	vmul.f32	s18, s16, s18
 8009f8a:	ecf3 9a01 	vldmia	r3!, {s19}
 8009f8e:	ee69 7a29 	vmul.f32	s15, s18, s19
 8009f92:	931e      	str	r3, [sp, #120]	; 0x78
 8009f94:	ee17 0a90 	vmov	r0, s15
 8009f98:	f7f6 fae6 	bl	8000568 <__aeabi_f2d>
 8009f9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	f7f6 f983 	bl	80002ac <__adddf3>
 8009fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fa8:	e9c3 0100 	strd	r0, r1, [r3]
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 8009fac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009fae:	ecf3 8a01 	vldmia	r3!, {s17}
 8009fb2:	ee68 8a28 	vmul.f32	s17, s16, s17
			x_ref[i] += calibratre_x_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009fb6:	e9cd 0122 	strd	r0, r1, [sp, #136]	; 0x88
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 8009fba:	ee69 7aa8 	vmul.f32	s15, s19, s17
 8009fbe:	931c      	str	r3, [sp, #112]	; 0x70
 8009fc0:	ee17 0a90 	vmov	r0, s15
 8009fc4:	f7f6 fad0 	bl	8000568 <__aeabi_f2d>
 8009fc8:	9b08      	ldr	r3, [sp, #32]
 8009fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fce:	f7f6 f96d 	bl	80002ac <__adddf3>
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 8009fd2:	ecf7 7a01 	vldmia	r7!, {s15}
 8009fd6:	e033      	b.n	800a040 <cqs_func+0x360>
 8009fd8:	56b31fbb 	.word	0x56b31fbb
 8009fdc:	3dd97936 	.word	0x3dd97936
 8009fe0:	ef649b9b 	.word	0xef649b9b
 8009fe4:	3eac2c05 	.word	0x3eac2c05
 8009fe8:	d35a8588 	.word	0xd35a8588
 8009fec:	3f64e3bc 	.word	0x3f64e3bc
 8009ff0:	83126e98 	.word	0x83126e98
 8009ff4:	3ff9cac0 	.word	0x3ff9cac0
 8009ff8:	9999999a 	.word	0x9999999a
 8009ffc:	3fc99999 	.word	0x3fc99999
 800a000:	47ae147b 	.word	0x47ae147b
 800a004:	3fa47ae1 	.word	0x3fa47ae1
 800a008:	20001b8c 	.word	0x20001b8c
 800a00c:	20000b8c 	.word	0x20000b8c
 800a010:	20090b2c 	.word	0x20090b2c
 800a014:	20000188 	.word	0x20000188
 800a018:	2008b920 	.word	0x2008b920
 800a01c:	3e4ccccd 	.word	0x3e4ccccd
 800a020:	2008b928 	.word	0x2008b928
 800a024:	2008bab8 	.word	0x2008bab8
 800a028:	2008ba20 	.word	0x2008ba20
 800a02c:	200887b0 	.word	0x200887b0
 800a030:	0810c040 	.word	0x0810c040
 800a034:	200857b0 	.word	0x200857b0
 800a038:	20002bb0 	.word	0x20002bb0
 800a03c:	2004dbe0 	.word	0x2004dbe0
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a040:	9b08      	ldr	r3, [sp, #32]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a042:	ee28 8a27 	vmul.f32	s16, s16, s15
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a046:	e9c3 0100 	strd	r0, r1, [r3]
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a04a:	ee69 7a88 	vmul.f32	s15, s19, s16
			y_ref[i] += Spectral_day[j] * CQS_R_temp[j] * s_ref[j];
 800a04e:	e9cd 0124 	strd	r0, r1, [sp, #144]	; 0x90
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a052:	ee17 0a90 	vmov	r0, s15
 800a056:	f7f6 fa87 	bl	8000568 <__aeabi_f2d>
 800a05a:	9b06      	ldr	r3, [sp, #24]
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f7f6 f924 	bl	80002ac <__adddf3>
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a064:	ecf6 9a01 	vldmia	r6!, {s19}
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a068:	9b06      	ldr	r3, [sp, #24]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a06a:	ee69 7a29 	vmul.f32	s15, s18, s19
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a06e:	4680      	mov	r8, r0
 800a070:	4689      	mov	r9, r1
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a072:	ee17 0a90 	vmov	r0, s15
			z_ref[i] += calibratre_z_1931[j] * CQS_R_temp[j] * s_ref[j];
 800a076:	e9c3 8900 	strd	r8, r9, [r3]
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a07a:	f7f6 fa75 	bl	8000568 <__aeabi_f2d>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a086:	f7f6 f911 	bl	80002ac <__adddf3>
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a08a:	ee68 7aa9 	vmul.f32	s15, s17, s19
			x_test += calibratre_x_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a08e:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a092:	ee17 0a90 	vmov	r0, s15
 800a096:	f7f6 fa67 	bl	8000568 <__aeabi_f2d>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a0a2:	f7f6 f903 	bl	80002ac <__adddf3>
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0a6:	ee68 7a29 	vmul.f32	s15, s16, s19
			y_test += Spectral_day[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0aa:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0ae:	ee17 0a90 	vmov	r0, s15
 800a0b2:	f7f6 fa59 	bl	8000568 <__aeabi_f2d>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a0be:	f7f6 f8f5 	bl	80002ac <__adddf3>
		for (int j = 0; j < 1024; j++)
 800a0c2:	3501      	adds	r5, #1
 800a0c4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_test += calibratre_z_1931[j] * CQS_R_temp[j] * CQS_S_test[j];
 800a0c8:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		for (int j = 0; j < 1024; j++)
 800a0cc:	f47f aed1 	bne.w	8009e72 <cqs_func+0x192>
		}
		
		memset(CQS_R_temp, 0, sizeof(CQS_R_temp));
 800a0d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	4874      	ldr	r0, [pc, #464]	; (800a2a8 <cqs_func+0x5c8>)
 800a0d8:	f017 fe51 	bl	8021d7e <memset>
		
		if (i == 0) {
 800a0dc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a0de:	b97b      	cbnz	r3, 800a100 <cqs_func+0x420>
			k_ref = 100 / k_ref;
 800a0e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	4971      	ldr	r1, [pc, #452]	; (800a2ac <cqs_func+0x5cc>)
 800a0e8:	f7f6 fbbc 	bl	8000864 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800a0ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_ref = 100 / k_ref;
 800a0f0:	e9cd 0100 	strd	r0, r1, [sp]
			k_test = 100 / k_test;
 800a0f4:	2000      	movs	r0, #0
 800a0f6:	496d      	ldr	r1, [pc, #436]	; (800a2ac <cqs_func+0x5cc>)
 800a0f8:	f7f6 fbb4 	bl	8000864 <__aeabi_ddiv>
 800a0fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
		}
			
		x_ref[i] *= k_ref;
 800a100:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a104:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a108:	f7f6 fa82 	bl	8000610 <__aeabi_dmul>
 800a10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
		z_ref[i] *= k_ref;
		x_test *= k_test;
		y_test *= k_test;
		z_test *= k_test;
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a10e:	4d68      	ldr	r5, [pc, #416]	; (800a2b0 <cqs_func+0x5d0>)
 800a110:	4f68      	ldr	r7, [pc, #416]	; (800a2b4 <cqs_func+0x5d4>)
		x_ref[i] *= k_ref;
 800a112:	e8e3 0102 	strd	r0, r1, [r3], #8
		y_ref[i] *= k_ref;
 800a116:	e9dd 0100 	ldrd	r0, r1, [sp]
		x_ref[i] *= k_ref;
 800a11a:	930a      	str	r3, [sp, #40]	; 0x28
		y_ref[i] *= k_ref;
 800a11c:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a120:	f7f6 fa76 	bl	8000610 <__aeabi_dmul>
 800a124:	9b08      	ldr	r3, [sp, #32]
 800a126:	e8e3 0102 	strd	r0, r1, [r3], #8
		z_ref[i] *= k_ref;
 800a12a:	4642      	mov	r2, r8
		y_ref[i] *= k_ref;
 800a12c:	9308      	str	r3, [sp, #32]
		z_ref[i] *= k_ref;
 800a12e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a132:	464b      	mov	r3, r9
 800a134:	f7f6 fa6c 	bl	8000610 <__aeabi_dmul>
 800a138:	9b06      	ldr	r3, [sp, #24]
 800a13a:	e8e3 0102 	strd	r0, r1, [r3], #8
		x_test *= k_test;
 800a13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
		z_ref[i] *= k_ref;
 800a142:	9306      	str	r3, [sp, #24]
		x_test *= k_test;
 800a144:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a148:	f7f6 fa62 	bl	8000610 <__aeabi_dmul>
		y_test *= k_test;
 800a14c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
		x_test *= k_test;
 800a150:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
		y_test *= k_test;
 800a154:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a158:	f7f6 fa5a 	bl	8000610 <__aeabi_dmul>
		z_test *= k_test;
 800a15c:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
		y_test *= k_test;
 800a160:	e9cd 012a 	strd	r0, r1, [sp, #168]	; 0xa8
		z_test *= k_test;
 800a164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a168:	f7f6 fa52 	bl	8000610 <__aeabi_dmul>
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a16c:	ed95 7b00 	vldr	d7, [r5]
 800a170:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800a174:	ed95 7b02 	vldr	d7, [r5, #8]
 800a178:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 800a17c:	ed95 7b04 	vldr	d7, [r5, #16]
 800a180:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
		z_test *= k_test;
 800a184:	e9cd 012c 	strd	r0, r1, [sp, #176]	; 0xb0
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a188:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a18c:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 800a190:	f7f6 fa3e 	bl	8000610 <__aeabi_dmul>
 800a194:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a198:	4680      	mov	r8, r0
 800a19a:	4689      	mov	r9, r1
 800a19c:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a1a0:	f7f6 fa36 	bl	8000610 <__aeabi_dmul>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	4640      	mov	r0, r8
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	f7f6 f87e 	bl	80002ac <__adddf3>
 800a1b0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a1b4:	4680      	mov	r8, r0
 800a1b6:	4689      	mov	r9, r1
 800a1b8:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a1bc:	f7f6 fa28 	bl	8000610 <__aeabi_dmul>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	4649      	mov	r1, r9
 800a1c8:	f7f6 f870 	bl	80002ac <__adddf3>
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a1cc:	ed95 7b06 	vldr	d7, [r5, #24]
 800a1d0:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800a1d4:	ed95 7b08 	vldr	d7, [r5, #32]
 800a1d8:	00e6      	lsls	r6, r4, #3
 800a1da:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 800a1de:	ed95 7b0a 	vldr	d7, [r5, #40]	; 0x28
		R_i_test[i] = x_test * M[0] + y_test * M[1] + z_test * M[2];	
 800a1e2:	4437      	add	r7, r6
 800a1e4:	e9c7 0100 	strd	r0, r1, [r7]
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a1e8:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800a1ec:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a1f0:	ed8d 7b20 	vstr	d7, [sp, #128]	; 0x80
 800a1f4:	f7f6 fa0c 	bl	8000610 <__aeabi_dmul>
 800a1f8:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800a1fc:	4680      	mov	r8, r0
 800a1fe:	4689      	mov	r9, r1
 800a200:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a204:	f7f6 fa04 	bl	8000610 <__aeabi_dmul>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4640      	mov	r0, r8
 800a20e:	4649      	mov	r1, r9
 800a210:	f7f6 f84c 	bl	80002ac <__adddf3>
 800a214:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
 800a218:	4680      	mov	r8, r0
 800a21a:	4689      	mov	r9, r1
 800a21c:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a220:	f7f6 f9f6 	bl	8000610 <__aeabi_dmul>
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	4640      	mov	r0, r8
 800a22a:	4649      	mov	r1, r9
 800a22c:	f7f6 f83e 	bl	80002ac <__adddf3>
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a230:	ed95 7b0c 	vldr	d7, [r5, #48]	; 0x30
 800a234:	ed8d 7b22 	vstr	d7, [sp, #136]	; 0x88
 800a238:	ed95 7b0e 	vldr	d7, [r5, #56]	; 0x38
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a23c:	4f1e      	ldr	r7, [pc, #120]	; (800a2b8 <cqs_func+0x5d8>)
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a23e:	4b1f      	ldr	r3, [pc, #124]	; (800a2bc <cqs_func+0x5dc>)
 800a240:	ed8d 7b24 	vstr	d7, [sp, #144]	; 0x90
 800a244:	ed95 7b10 	vldr	d7, [r5, #64]	; 0x40
		G_i_test[i] = x_test * M[3] + y_test * M[4] + z_test * M[5];
 800a248:	4437      	add	r7, r6
 800a24a:	e9c7 0100 	strd	r0, r1, [r7]
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a24e:	441e      	add	r6, r3
 800a250:	e9dd 0128 	ldrd	r0, r1, [sp, #160]	; 0xa0
 800a254:	e9dd 2322 	ldrd	r2, r3, [sp, #136]	; 0x88
 800a258:	ed8d 7b26 	vstr	d7, [sp, #152]	; 0x98
 800a25c:	f7f6 f9d8 	bl	8000610 <__aeabi_dmul>
 800a260:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 800a264:	4680      	mov	r8, r0
 800a266:	4689      	mov	r9, r1
 800a268:	e9dd 012a 	ldrd	r0, r1, [sp, #168]	; 0xa8
 800a26c:	f7f6 f9d0 	bl	8000610 <__aeabi_dmul>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4640      	mov	r0, r8
 800a276:	4649      	mov	r1, r9
 800a278:	f7f6 f818 	bl	80002ac <__adddf3>
 800a27c:	e9dd 2326 	ldrd	r2, r3, [sp, #152]	; 0x98
 800a280:	4680      	mov	r8, r0
 800a282:	4689      	mov	r9, r1
 800a284:	e9dd 012c 	ldrd	r0, r1, [sp, #176]	; 0xb0
 800a288:	f7f6 f9c2 	bl	8000610 <__aeabi_dmul>
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	4640      	mov	r0, r8
 800a292:	4649      	mov	r1, r9
 800a294:	f7f6 f80a 	bl	80002ac <__adddf3>
 800a298:	3401      	adds	r4, #1
	for (uint8_t i = 0; i < 15; i++)
 800a29a:	2c0f      	cmp	r4, #15
		B_i_test[i] = x_test * M[6] + y_test * M[7] + z_test * M[8];
 800a29c:	e9c6 0100 	strd	r0, r1, [r6]
	for (uint8_t i = 0; i < 15; i++)
 800a2a0:	f47f adbc 	bne.w	8009e1c <cqs_func+0x13c>
 800a2a4:	e00e      	b.n	800a2c4 <cqs_func+0x5e4>
 800a2a6:	bf00      	nop
 800a2a8:	20000b8c 	.word	0x20000b8c
 800a2ac:	40590000 	.word	0x40590000
 800a2b0:	200000f8 	.word	0x200000f8
 800a2b4:	2008b9a8 	.word	0x2008b9a8
 800a2b8:	2008bb30 	.word	0x2008bb30
 800a2bc:	2008b8a8 	.word	0x2008b8a8
 800a2c0:	00000000 	.word	0x00000000
	}

	xw_ref *= k_ref;
 800a2c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a2c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2cc:	f7f6 f9a0 	bl	8000610 <__aeabi_dmul>
	yw_ref *= k_ref;
 800a2d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
	xw_ref *= k_ref;
 800a2d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
	yw_ref *= k_ref;
 800a2d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2dc:	f7f6 f998 	bl	8000610 <__aeabi_dmul>
	zw_ref *= k_ref;
 800a2e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
	yw_ref *= k_ref;
 800a2e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
	zw_ref *= k_ref;
 800a2e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2ec:	f7f6 f990 	bl	8000610 <__aeabi_dmul>
	xw_test *= k_test;
 800a2f0:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
	zw_ref *= k_ref;
 800a2f4:	e9cd 0108 	strd	r0, r1, [sp, #32]
	xw_test *= k_test;
 800a2f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2fc:	f7f6 f988 	bl	8000610 <__aeabi_dmul>
	yw_test *= k_test;
 800a300:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
	xw_test *= k_test;
 800a304:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	yw_test *= k_test;
 800a308:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a30c:	f7f6 f980 	bl	8000610 <__aeabi_dmul>
	zw_test *= k_test;
 800a310:	4652      	mov	r2, sl
 800a312:	465b      	mov	r3, fp
	yw_test *= k_test;
 800a314:	e9cd 0100 	strd	r0, r1, [sp]
	zw_test *= k_test;
 800a318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a31c:	f7f6 f978 	bl	8000610 <__aeabi_dmul>

	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a320:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	zw_test *= k_test;
 800a324:	e9cd 0102 	strd	r0, r1, [sp, #8]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a328:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a32c:	f7f6 f970 	bl	8000610 <__aeabi_dmul>
 800a330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a334:	4604      	mov	r4, r0
 800a336:	460d      	mov	r5, r1
 800a338:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a33c:	f7f6 f968 	bl	8000610 <__aeabi_dmul>
 800a340:	4602      	mov	r2, r0
 800a342:	460b      	mov	r3, r1
 800a344:	4620      	mov	r0, r4
 800a346:	4629      	mov	r1, r5
 800a348:	f7f5 ffb0 	bl	80002ac <__adddf3>
 800a34c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a350:	4604      	mov	r4, r0
 800a352:	460d      	mov	r5, r1
 800a354:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a358:	f7f6 f95a 	bl	8000610 <__aeabi_dmul>
 800a35c:	4602      	mov	r2, r0
 800a35e:	460b      	mov	r3, r1
 800a360:	4620      	mov	r0, r4
 800a362:	4629      	mov	r1, r5
 800a364:	f7f5 ffa2 	bl	80002ac <__adddf3>
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a368:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double R_w_ref = xw_ref * M[0] + yw_ref* M[1] + zw_ref * M[2];
 800a36c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a370:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a374:	f7f6 f94c 	bl	8000610 <__aeabi_dmul>
 800a378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a37c:	4604      	mov	r4, r0
 800a37e:	460d      	mov	r5, r1
 800a380:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a384:	f7f6 f944 	bl	8000610 <__aeabi_dmul>
 800a388:	4602      	mov	r2, r0
 800a38a:	460b      	mov	r3, r1
 800a38c:	4620      	mov	r0, r4
 800a38e:	4629      	mov	r1, r5
 800a390:	f7f5 ff8c 	bl	80002ac <__adddf3>
 800a394:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a398:	4604      	mov	r4, r0
 800a39a:	460d      	mov	r5, r1
 800a39c:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800a3a0:	f7f6 f936 	bl	8000610 <__aeabi_dmul>
 800a3a4:	4602      	mov	r2, r0
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	4629      	mov	r1, r5
 800a3ac:	f7f5 ff7e 	bl	80002ac <__adddf3>
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a3b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
	double G_w_ref = xw_ref * M[3] + yw_ref* M[4] + zw_ref * M[5];
 800a3b4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a3b8:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800a3bc:	f7f6 f928 	bl	8000610 <__aeabi_dmul>
 800a3c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3c4:	4604      	mov	r4, r0
 800a3c6:	460d      	mov	r5, r1
 800a3c8:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800a3cc:	f7f6 f920 	bl	8000610 <__aeabi_dmul>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	f7f5 ff68 	bl	80002ac <__adddf3>
 800a3dc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	460d      	mov	r5, r1
 800a3e4:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800a3e8:	f7f6 f912 	bl	8000610 <__aeabi_dmul>
 800a3ec:	4602      	mov	r2, r0
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	f7f5 ff5a 	bl	80002ac <__adddf3>
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a3f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double B_w_ref = xw_ref * M[6] + yw_ref* M[7] + zw_ref * M[8];
 800a3fc:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a400:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 800a404:	f7f6 f904 	bl	8000610 <__aeabi_dmul>
 800a408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a40c:	4604      	mov	r4, r0
 800a40e:	460d      	mov	r5, r1
 800a410:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800a414:	f7f6 f8fc 	bl	8000610 <__aeabi_dmul>
 800a418:	4602      	mov	r2, r0
 800a41a:	460b      	mov	r3, r1
 800a41c:	4620      	mov	r0, r4
 800a41e:	4629      	mov	r1, r5
 800a420:	f7f5 ff44 	bl	80002ac <__adddf3>
 800a424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a428:	4604      	mov	r4, r0
 800a42a:	460d      	mov	r5, r1
 800a42c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800a430:	f7f6 f8ee 	bl	8000610 <__aeabi_dmul>
 800a434:	4602      	mov	r2, r0
 800a436:	460b      	mov	r3, r1
 800a438:	4620      	mov	r0, r4
 800a43a:	4629      	mov	r1, r5
 800a43c:	f7f5 ff36 	bl	80002ac <__adddf3>
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a440:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double R_w_test = xw_test * M[0] + yw_test* M[1] + zw_test * M[2];
 800a444:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a448:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 800a44c:	f7f6 f8e0 	bl	8000610 <__aeabi_dmul>
 800a450:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a454:	4604      	mov	r4, r0
 800a456:	460d      	mov	r5, r1
 800a458:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 800a45c:	f7f6 f8d8 	bl	8000610 <__aeabi_dmul>
 800a460:	4602      	mov	r2, r0
 800a462:	460b      	mov	r3, r1
 800a464:	4620      	mov	r0, r4
 800a466:	4629      	mov	r1, r5
 800a468:	f7f5 ff20 	bl	80002ac <__adddf3>
 800a46c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a470:	4604      	mov	r4, r0
 800a472:	460d      	mov	r5, r1
 800a474:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
 800a478:	f7f6 f8ca 	bl	8000610 <__aeabi_dmul>
 800a47c:	4602      	mov	r2, r0
 800a47e:	460b      	mov	r3, r1
 800a480:	4620      	mov	r0, r4
 800a482:	4629      	mov	r1, r5
 800a484:	f7f5 ff12 	bl	80002ac <__adddf3>
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a488:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
	double G_w_test = xw_test * M[3] + yw_test* M[4] + zw_test * M[5];
 800a48c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a490:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800a494:	f7f6 f8bc 	bl	8000610 <__aeabi_dmul>
 800a498:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a49c:	4604      	mov	r4, r0
 800a49e:	460d      	mov	r5, r1
 800a4a0:	e9dd 0124 	ldrd	r0, r1, [sp, #144]	; 0x90
 800a4a4:	f7f6 f8b4 	bl	8000610 <__aeabi_dmul>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	f7f5 fefc 	bl	80002ac <__adddf3>
 800a4b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4b8:	4604      	mov	r4, r0
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	e9dd 0126 	ldrd	r0, r1, [sp, #152]	; 0x98
 800a4c0:	f7f6 f8a6 	bl	8000610 <__aeabi_dmul>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4620      	mov	r0, r4
 800a4ca:	4629      	mov	r1, r5
 800a4cc:	f7f5 feee 	bl	80002ac <__adddf3>

	float alpha = yw_test / yw_ref;
 800a4d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	double B_w_test = xw_test * M[6] + yw_test* M[7] + zw_test * M[8];
 800a4d4:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
	float alpha = yw_test / yw_ref;
 800a4d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4dc:	f7f6 f9c2 	bl	8000864 <__aeabi_ddiv>
 800a4e0:	f7f6 fb8e 	bl	8000c00 <__aeabi_d2f>
	float delta_e_rms = 0;
	float sum_delta_e = 0;
	float sum_delta_c = 0;
 800a4e4:	ed5f 8a8a 	vldr	s17, [pc, #-552]	; 800a2c0 <cqs_func+0x5e0>
 800a4e8:	f8df b390 	ldr.w	fp, [pc, #912]	; 800a87c <cqs_func+0xb9c>
	float alpha = yw_test / yw_ref;
 800a4ec:	901c      	str	r0, [sp, #112]	; 0x70
 800a4ee:	f04f 0a00 	mov.w	sl, #0
	float sum_delta_e = 0;
 800a4f2:	eef0 9a68 	vmov.f32	s19, s17
	float delta_e_rms = 0;
 800a4f6:	eeb0 aa68 	vmov.f32	s20, s17

	for (int i = 0; i < 15; i++)
	{
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a4fa:	981c      	ldr	r0, [sp, #112]	; 0x70
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;

		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a4fc:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800a880 <cqs_func+0xba0>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];

		float y_tmp = cbrt(y_ref[i] / yw_ref);
		float L_ref = 116* y_tmp - 16;
 800a500:	ed9f 9ad3 	vldr	s18, [pc, #844]	; 800a850 <cqs_func+0xb70>
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a504:	f7f6 f830 	bl	8000568 <__aeabi_f2d>
 800a508:	4bd2      	ldr	r3, [pc, #840]	; (800a854 <cqs_func+0xb74>)
 800a50a:	4453      	add	r3, sl
 800a50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a510:	4604      	mov	r4, r0
 800a512:	460d      	mov	r5, r1
 800a514:	f7f6 f87c 	bl	8000610 <__aeabi_dmul>
 800a518:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a51c:	f7f6 f878 	bl	8000610 <__aeabi_dmul>
 800a520:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800a524:	f7f6 f99e 	bl	8000864 <__aeabi_ddiv>
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a528:	4bcb      	ldr	r3, [pc, #812]	; (800a858 <cqs_func+0xb78>)
 800a52a:	4453      	add	r3, sl
		R_ic_test =  R_i_test[i] * alpha * R_w_ref / R_w_test;
 800a52c:	4606      	mov	r6, r0
 800a52e:	460f      	mov	r7, r1
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a534:	4620      	mov	r0, r4
 800a536:	4629      	mov	r1, r5
 800a538:	f7f6 f86a 	bl	8000610 <__aeabi_dmul>
 800a53c:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800a540:	f7f6 f866 	bl	8000610 <__aeabi_dmul>
 800a544:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800a548:	f7f6 f98c 	bl	8000864 <__aeabi_ddiv>
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800a54c:	4bc3      	ldr	r3, [pc, #780]	; (800a85c <cqs_func+0xb7c>)
 800a54e:	4453      	add	r3, sl
		G_ic_test =  G_i_test[i] * alpha * G_w_ref / G_w_test;
 800a550:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
		B_ic_test =  B_i_test[i] * alpha * B_w_ref / B_w_test;
 800a554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a558:	4620      	mov	r0, r4
 800a55a:	4629      	mov	r1, r5
 800a55c:	f7f6 f858 	bl	8000610 <__aeabi_dmul>
 800a560:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a564:	f7f6 f854 	bl	8000610 <__aeabi_dmul>
 800a568:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800a56c:	f7f6 f97a 	bl	8000864 <__aeabi_ddiv>
 800a570:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800a574:	49ba      	ldr	r1, [pc, #744]	; (800a860 <cqs_func+0xb80>)
 800a576:	4451      	add	r1, sl
 800a578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a57c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a580:	f7f6 f970 	bl	8000864 <__aeabi_ddiv>
 800a584:	ec41 0b10 	vmov	d0, r0, r1
 800a588:	f018 f82a 	bl	80225e0 <cbrt>
 800a58c:	ec51 0b10 	vmov	r0, r1, d0
 800a590:	f7f6 fb36 	bl	8000c00 <__aeabi_d2f>
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a594:	49b3      	ldr	r1, [pc, #716]	; (800a864 <cqs_func+0xb84>)
 800a596:	4451      	add	r1, sl
 800a598:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
		float y_tmp = cbrt(y_ref[i] / yw_ref);
 800a59c:	ee0a 0a90 	vmov	s21, r0
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a5a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5a4:	f7f6 f95e 	bl	8000864 <__aeabi_ddiv>
 800a5a8:	ec41 0b10 	vmov	d0, r0, r1
 800a5ac:	f018 f818 	bl	80225e0 <cbrt>
 800a5b0:	ee1a 0a90 	vmov	r0, s21
 800a5b4:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800a5b8:	f7f5 ffd6 	bl	8000568 <__aeabi_f2d>
 800a5bc:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	460d      	mov	r5, r1
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	ec51 0b10 	vmov	r0, r1, d0
 800a5cc:	f7f5 fe6c 	bl	80002a8 <__aeabi_dsub>
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	4ba5      	ldr	r3, [pc, #660]	; (800a868 <cqs_func+0xb88>)
 800a5d4:	f7f6 f81c 	bl	8000610 <__aeabi_dmul>
 800a5d8:	f7f6 fb12 	bl	8000c00 <__aeabi_d2f>
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a5dc:	49a3      	ldr	r1, [pc, #652]	; (800a86c <cqs_func+0xb8c>)
 800a5de:	4451      	add	r1, sl
 800a5e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
		float a_ref = 500 * (cbrt(x_ref[i] / xw_ref) - y_tmp);
 800a5e4:	ee0b 0a90 	vmov	s23, r0
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a5e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ec:	f7f6 f93a 	bl	8000864 <__aeabi_ddiv>
 800a5f0:	ec41 0b10 	vmov	d0, r0, r1
 800a5f4:	f017 fff4 	bl	80225e0 <cbrt>
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	ec53 2b10 	vmov	r2, r3, d0
 800a5fe:	4629      	mov	r1, r5
 800a600:	f7f5 fe52 	bl	80002a8 <__aeabi_dsub>
 800a604:	2200      	movs	r2, #0
 800a606:	4b9a      	ldr	r3, [pc, #616]	; (800a870 <cqs_func+0xb90>)
 800a608:	f7f6 f802 	bl	8000610 <__aeabi_dmul>
 800a60c:	f7f6 faf8 	bl	8000c00 <__aeabi_d2f>
		float L_ref = 116* y_tmp - 16;
 800a610:	eebb 8a00 	vmov.f32	s16, #176	; 0xc1800000 -16.0
 800a614:	eef0 ca48 	vmov.f32	s25, s16
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a618:	e9d8 2306 	ldrd	r2, r3, [r8, #24]
		float L_ref = 116* y_tmp - 16;
 800a61c:	eeea ca89 	vfma.f32	s25, s21, s18
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a620:	4639      	mov	r1, r7
		float b_ref = 200 * (y_tmp - cbrt(z_ref[i] / zw_ref));
 800a622:	ee0a 0a90 	vmov	s21, r0
		Y_ic_test = R_ic_test * M_inv[3] + G_ic_test * M_inv[4] + B_ic_test * M_inv[5];
 800a626:	4630      	mov	r0, r6
 800a628:	f7f5 fff2 	bl	8000610 <__aeabi_dmul>
 800a62c:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 800a630:	4604      	mov	r4, r0
 800a632:	460d      	mov	r5, r1
 800a634:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a638:	f7f5 ffea 	bl	8000610 <__aeabi_dmul>
 800a63c:	4602      	mov	r2, r0
 800a63e:	460b      	mov	r3, r1
 800a640:	4620      	mov	r0, r4
 800a642:	4629      	mov	r1, r5
 800a644:	f7f5 fe32 	bl	80002ac <__adddf3>
 800a648:	e9d8 230a 	ldrd	r2, r3, [r8, #40]	; 0x28
 800a64c:	4604      	mov	r4, r0
 800a64e:	460d      	mov	r5, r1
 800a650:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a654:	f7f5 ffdc 	bl	8000610 <__aeabi_dmul>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	4620      	mov	r0, r4
 800a65e:	4629      	mov	r1, r5
 800a660:	f7f5 fe24 	bl	80002ac <__adddf3>

		y_tmp = cbrt(Y_ic_test / yw_test);
 800a664:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a668:	f7f6 f8fc 	bl	8000864 <__aeabi_ddiv>
 800a66c:	ec41 0b10 	vmov	d0, r0, r1
 800a670:	f017 ffb6 	bl	80225e0 <cbrt>
 800a674:	ec51 0b10 	vmov	r0, r1, d0
 800a678:	f7f6 fac2 	bl	8000c00 <__aeabi_d2f>
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800a67c:	e9d8 2300 	ldrd	r2, r3, [r8]
		y_tmp = cbrt(Y_ic_test / yw_test);
 800a680:	ee0b 0a10 	vmov	s22, r0
		X_ic_test = R_ic_test * M_inv[0] + G_ic_test * M_inv[1] + B_ic_test * M_inv[2];
 800a684:	4639      	mov	r1, r7
 800a686:	4630      	mov	r0, r6
 800a688:	f7f5 ffc2 	bl	8000610 <__aeabi_dmul>
 800a68c:	e9d8 2302 	ldrd	r2, r3, [r8, #8]
 800a690:	4604      	mov	r4, r0
 800a692:	460d      	mov	r5, r1
 800a694:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a698:	f7f5 ffba 	bl	8000610 <__aeabi_dmul>
 800a69c:	4602      	mov	r2, r0
 800a69e:	460b      	mov	r3, r1
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	f7f5 fe02 	bl	80002ac <__adddf3>
 800a6a8:	e9d8 2304 	ldrd	r2, r3, [r8, #16]
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	460d      	mov	r5, r1
 800a6b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a6b4:	f7f5 ffac 	bl	8000610 <__aeabi_dmul>
 800a6b8:	4602      	mov	r2, r0
 800a6ba:	460b      	mov	r3, r1
 800a6bc:	4620      	mov	r0, r4
 800a6be:	4629      	mov	r1, r5
 800a6c0:	f7f5 fdf4 	bl	80002ac <__adddf3>
		float L_test = 116 * y_tmp - 16;
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800a6c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a6c8:	f7f6 f8cc 	bl	8000864 <__aeabi_ddiv>
 800a6cc:	ec41 0b10 	vmov	d0, r0, r1
 800a6d0:	f017 ff86 	bl	80225e0 <cbrt>
 800a6d4:	ee1b 0a10 	vmov	r0, s22
 800a6d8:	ed8d 0b1e 	vstr	d0, [sp, #120]	; 0x78
 800a6dc:	f7f5 ff44 	bl	8000568 <__aeabi_f2d>
 800a6e0:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	460d      	mov	r5, r1
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	460b      	mov	r3, r1
 800a6ec:	ec51 0b10 	vmov	r0, r1, d0
 800a6f0:	f7f5 fdda 	bl	80002a8 <__aeabi_dsub>
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	4b5c      	ldr	r3, [pc, #368]	; (800a868 <cqs_func+0xb88>)
 800a6f8:	f7f5 ff8a 	bl	8000610 <__aeabi_dmul>
 800a6fc:	f7f6 fa80 	bl	8000c00 <__aeabi_d2f>
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800a700:	e9d8 230c 	ldrd	r2, r3, [r8, #48]	; 0x30
		float a_test = 500 * (cbrt(X_ic_test / xw_test) - y_tmp);
 800a704:	ee0c 0a10 	vmov	s24, r0
		Z_ic_test = R_ic_test * M_inv[6] + G_ic_test * M_inv[7] + B_ic_test * M_inv[8];
 800a708:	4639      	mov	r1, r7
 800a70a:	4630      	mov	r0, r6
 800a70c:	f7f5 ff80 	bl	8000610 <__aeabi_dmul>
 800a710:	e9d8 230e 	ldrd	r2, r3, [r8, #56]	; 0x38
 800a714:	4606      	mov	r6, r0
 800a716:	460f      	mov	r7, r1
 800a718:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a71c:	f7f5 ff78 	bl	8000610 <__aeabi_dmul>
 800a720:	4602      	mov	r2, r0
 800a722:	460b      	mov	r3, r1
 800a724:	4630      	mov	r0, r6
 800a726:	4639      	mov	r1, r7
 800a728:	f7f5 fdc0 	bl	80002ac <__adddf3>
 800a72c:	e9d8 2310 	ldrd	r2, r3, [r8, #64]	; 0x40
 800a730:	4606      	mov	r6, r0
 800a732:	460f      	mov	r7, r1
 800a734:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a738:	f7f5 ff6a 	bl	8000610 <__aeabi_dmul>
 800a73c:	4602      	mov	r2, r0
 800a73e:	460b      	mov	r3, r1
 800a740:	4630      	mov	r0, r6
 800a742:	4639      	mov	r1, r7
 800a744:	f7f5 fdb2 	bl	80002ac <__adddf3>
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800a748:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a74c:	f7f6 f88a 	bl	8000864 <__aeabi_ddiv>
 800a750:	ec41 0b10 	vmov	d0, r0, r1
 800a754:	f017 ff44 	bl	80225e0 <cbrt>
 800a758:	4620      	mov	r0, r4
 800a75a:	ec53 2b10 	vmov	r2, r3, d0
 800a75e:	4629      	mov	r1, r5
 800a760:	f7f5 fda2 	bl	80002a8 <__aeabi_dsub>
 800a764:	2200      	movs	r2, #0
 800a766:	4b42      	ldr	r3, [pc, #264]	; (800a870 <cqs_func+0xb90>)
 800a768:	f7f5 ff52 	bl	8000610 <__aeabi_dmul>
 800a76c:	f7f6 fa48 	bl	8000c00 <__aeabi_d2f>
		float L_test = 116 * y_tmp - 16;
 800a770:	eeab 8a09 	vfma.f32	s16, s22, s18
		float b_test = 200 * (y_tmp - cbrt(Z_ic_test / zw_test));
 800a774:	ee0b 0a10 	vmov	s22, r0

		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a778:	ee6b 7a0b 	vmul.f32	s15, s22, s22
		float L_test = 116 * y_tmp - 16;
 800a77c:	eeb0 9a48 	vmov.f32	s18, s16
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a780:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800a784:	ee17 0a90 	vmov	r0, s15
 800a788:	f7f5 feee 	bl	8000568 <__aeabi_f2d>
 800a78c:	ec41 0b10 	vmov	d0, r0, r1
 800a790:	f018 fada 	bl	8022d48 <sqrt>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a794:	ee6a 7aaa 	vmul.f32	s15, s21, s21
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a798:	ec55 4b10 	vmov	r4, r5, d0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a79c:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800a7a0:	ee17 0a90 	vmov	r0, s15
 800a7a4:	f7f5 fee0 	bl	8000568 <__aeabi_f2d>
 800a7a8:	ec41 0b10 	vmov	d0, r0, r1
 800a7ac:	f018 facc 	bl	8022d48 <sqrt>
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a7b0:	4629      	mov	r1, r5
 800a7b2:	4620      	mov	r0, r4
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a7b4:	ed8d 0b0c 	vstr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a7b8:	f7f6 fa22 	bl	8000c00 <__aeabi_d2f>
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a7bc:	ed9d 0b0c 	vldr	d0, [sp, #48]	; 0x30
		float delta_c_test = sqrt(a_test * a_test + b_test * b_test);
 800a7c0:	ee08 0a10 	vmov	s16, r0
		float delta_c_ref = sqrt(a_ref * a_ref + b_ref * b_ref);
 800a7c4:	ec51 0b10 	vmov	r0, r1, d0
 800a7c8:	f7f6 fa1a 	bl	8000c00 <__aeabi_d2f>
		float delta_c = delta_c_test - delta_c_ref;
 800a7cc:	ee07 0a90 	vmov	s15, r0

		bar_CQS = 0.9;
 800a7d0:	a11d      	add	r1, pc, #116	; (adr r1, 800a848 <cqs_func+0xb68>)
 800a7d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7d6:	4b27      	ldr	r3, [pc, #156]	; (800a874 <cqs_func+0xb94>)
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a7d8:	ed9f 0a27 	vldr	s0, [pc, #156]	; 800a878 <cqs_func+0xb98>
		bar_CQS = 0.9;
 800a7dc:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a7e0:	210d      	movs	r1, #13
 800a7e2:	2055      	movs	r0, #85	; 0x55
		float delta_c = delta_c_test - delta_c_ref;
 800a7e4:	ee38 8a67 	vsub.f32	s16, s16, s15
		GUI_Bar_Measure(85, 13, bar_CQS);
 800a7e8:	f00a ff50 	bl	801568c <GUI_Bar_Measure>
	
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800a7ec:	ee79 7a6c 	vsub.f32	s15, s18, s25
 800a7f0:	ee17 0a90 	vmov	r0, s15
 800a7f4:	f7f5 feb8 	bl	8000568 <__aeabi_f2d>
 800a7f8:	ee7c 7a6b 	vsub.f32	s15, s24, s23
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	ee17 0a90 	vmov	r0, s15
 800a802:	460f      	mov	r7, r1
 800a804:	f7f5 feb0 	bl	8000568 <__aeabi_f2d>
 800a808:	ee7b 7a6a 	vsub.f32	s15, s22, s21
 800a80c:	4680      	mov	r8, r0
 800a80e:	ee17 0a90 	vmov	r0, s15
 800a812:	4689      	mov	r9, r1
 800a814:	f7f5 fea8 	bl	8000568 <__aeabi_f2d>
 800a818:	4632      	mov	r2, r6
 800a81a:	4604      	mov	r4, r0
 800a81c:	460d      	mov	r5, r1
 800a81e:	463b      	mov	r3, r7
 800a820:	4630      	mov	r0, r6
 800a822:	4639      	mov	r1, r7
 800a824:	f7f5 fef4 	bl	8000610 <__aeabi_dmul>
 800a828:	4642      	mov	r2, r8
 800a82a:	4606      	mov	r6, r0
 800a82c:	460f      	mov	r7, r1
 800a82e:	464b      	mov	r3, r9
 800a830:	4640      	mov	r0, r8
 800a832:	4649      	mov	r1, r9
 800a834:	f7f5 feec 	bl	8000610 <__aeabi_dmul>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	4630      	mov	r0, r6
 800a83e:	4639      	mov	r1, r7
 800a840:	f7f5 fd34 	bl	80002ac <__adddf3>
 800a844:	e01e      	b.n	800a884 <cqs_func+0xba4>
 800a846:	bf00      	nop
 800a848:	cccccccd 	.word	0xcccccccd
 800a84c:	3feccccc 	.word	0x3feccccc
 800a850:	42e80000 	.word	0x42e80000
 800a854:	2008b9a8 	.word	0x2008b9a8
 800a858:	2008bb30 	.word	0x2008bb30
 800a85c:	2008b8a8 	.word	0x2008b8a8
 800a860:	2008bab8 	.word	0x2008bab8
 800a864:	2008b928 	.word	0x2008b928
 800a868:	407f4000 	.word	0x407f4000
 800a86c:	2008ba20 	.word	0x2008ba20
 800a870:	40690000 	.word	0x40690000
 800a874:	2008b920 	.word	0x2008b920
 800a878:	3f666666 	.word	0x3f666666
 800a87c:	20002b93 	.word	0x20002b93
 800a880:	20000140 	.word	0x20000140
 800a884:	4622      	mov	r2, r4
 800a886:	4606      	mov	r6, r0
 800a888:	460f      	mov	r7, r1
 800a88a:	462b      	mov	r3, r5
 800a88c:	4620      	mov	r0, r4
 800a88e:	4629      	mov	r1, r5
 800a890:	f7f5 febe 	bl	8000610 <__aeabi_dmul>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4630      	mov	r0, r6
 800a89a:	4639      	mov	r1, r7
 800a89c:	f7f5 fd06 	bl	80002ac <__adddf3>
 800a8a0:	ec41 0b10 	vmov	d0, r0, r1
 800a8a4:	f018 fa50 	bl	8022d48 <sqrt>
 800a8a8:	ec51 0b10 	vmov	r0, r1, d0
 800a8ac:	f7f6 f9a8 	bl	8000c00 <__aeabi_d2f>
		float E_sat = delta_E_CQS;
		if (delta_c > 0)
 800a8b0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float delta_E_CQS = sqrt(pow(L_test - L_ref, 2) + pow(a_test - a_ref,2)+ pow(b_test - b_ref,2));
 800a8b8:	ee09 0a10 	vmov	s18, r0
		if (delta_c > 0)
 800a8bc:	f340 82a4 	ble.w	800ae08 <cqs_func+0x1128>
		{
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800a8c0:	ee68 7a48 	vnmul.f32	s15, s16, s16
 800a8c4:	eee9 7a09 	vfma.f32	s15, s18, s18
 800a8c8:	ee17 0a90 	vmov	r0, s15
 800a8cc:	f7f5 fe4c 	bl	8000568 <__aeabi_f2d>
 800a8d0:	ec41 0b10 	vmov	d0, r0, r1
 800a8d4:	f018 fa38 	bl	8022d48 <sqrt>
 800a8d8:	ec51 0b10 	vmov	r0, r1, d0
 800a8dc:	f7f6 f990 	bl	8000c00 <__aeabi_d2f>
			sum_delta_c += delta_c;
 800a8e0:	ee78 8a88 	vadd.f32	s17, s17, s16
			E_sat = sqrt(delta_E_CQS*delta_E_CQS - delta_c*delta_c);
 800a8e4:	ee07 0a90 	vmov	s15, r0
		}			

		delta_e_rms += (E_sat*E_sat);
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800a8e8:	ee17 0a90 	vmov	r0, s15
		delta_e_rms += (E_sat*E_sat);
 800a8ec:	eea7 aaa7 	vfma.f32	s20, s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800a8f0:	f7f5 fe3a 	bl	8000568 <__aeabi_f2d>
 800a8f4:	a3bc      	add	r3, pc, #752	; (adr r3, 800abe8 <cqs_func+0xf08>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7f5 fe89 	bl	8000610 <__aeabi_dmul>
 800a8fe:	4602      	mov	r2, r0
 800a900:	460b      	mov	r3, r1
 800a902:	2000      	movs	r0, #0
 800a904:	49c8      	ldr	r1, [pc, #800]	; (800ac28 <cqs_func+0xf48>)
 800a906:	4cc9      	ldr	r4, [pc, #804]	; (800ac2c <cqs_func+0xf4c>)
 800a908:	f7f5 fcce 	bl	80002a8 <__aeabi_dsub>
 800a90c:	2200      	movs	r2, #0
 800a90e:	4bc8      	ldr	r3, [pc, #800]	; (800ac30 <cqs_func+0xf50>)
 800a910:	f7f5 ffa8 	bl	8000864 <__aeabi_ddiv>
 800a914:	ec41 0b10 	vmov	d0, r0, r1
 800a918:	f017 ffa2 	bl	8022860 <exp>
 800a91c:	2200      	movs	r2, #0
 800a91e:	4bc5      	ldr	r3, [pc, #788]	; (800ac34 <cqs_func+0xf54>)
 800a920:	ec51 0b10 	vmov	r0, r1, d0
 800a924:	f7f5 fcc2 	bl	80002ac <__adddf3>
 800a928:	ec41 0b10 	vmov	d0, r0, r1
 800a92c:	f018 f814 	bl	8022958 <log>
 800a930:	2200      	movs	r2, #0
 800a932:	ec51 0b10 	vmov	r0, r1, d0
 800a936:	4bbe      	ldr	r3, [pc, #760]	; (800ac30 <cqs_func+0xf50>)
 800a938:	f7f5 fe6a 	bl	8000610 <__aeabi_dmul>
 800a93c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a940:	f7f5 fe66 	bl	8000610 <__aeabi_dmul>
 800a944:	f7f6 f95c 	bl	8000c00 <__aeabi_d2f>
 800a948:	ee07 0a90 	vmov	s15, r0
 800a94c:	4bba      	ldr	r3, [pc, #744]	; (800ac38 <cqs_func+0xf58>)
		Q_i[i] = (uint8_t)Q_i_temp;		
 800a94e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		Q_i_temp = 10 * log(exp((100 - 3.1*E_sat) / 10) + 1) * Mcct;
 800a952:	6018      	str	r0, [r3, #0]
 800a954:	f10a 0a08 	add.w	sl, sl, #8
		Q_i[i] = (uint8_t)Q_i_temp;		
 800a958:	ee17 3a90 	vmov	r3, s15
	for (int i = 0; i < 15; i++)
 800a95c:	f1ba 0f78 	cmp.w	sl, #120	; 0x78
		sum_delta_e += (delta_E_CQS*delta_E_CQS);
 800a960:	eee9 9a09 	vfma.f32	s19, s18, s18
		Q_i[i] = (uint8_t)Q_i_temp;		
 800a964:	f80b 3f01 	strb.w	r3, [fp, #1]!
	for (int i = 0; i < 15; i++)
 800a968:	f47f adc7 	bne.w	800a4fa <cqs_func+0x81a>
	}
	delta_e_rms /= 15;
 800a96c:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
	delta_e_rms = sqrt(delta_e_rms);
 800a970:	eeca 7a08 	vdiv.f32	s15, s20, s16
 800a974:	ee17 0a90 	vmov	r0, s15
 800a978:	f7f5 fdf6 	bl	8000568 <__aeabi_f2d>
 800a97c:	ec41 0b10 	vmov	d0, r0, r1
 800a980:	f018 f9e2 	bl	8022d48 <sqrt>
 800a984:	ec51 0b10 	vmov	r0, r1, d0
 800a988:	f7f6 f93a 	bl	8000c00 <__aeabi_d2f>
	sum_delta_e /= 15;
	sum_delta_e = sqrt(sum_delta_e);
 800a98c:	eec9 7a88 	vdiv.f32	s15, s19, s16
	delta_e_rms = sqrt(delta_e_rms);
 800a990:	ee09 0a10 	vmov	s18, r0
	sum_delta_e = sqrt(sum_delta_e);
 800a994:	ee17 0a90 	vmov	r0, s15
 800a998:	f7f5 fde6 	bl	8000568 <__aeabi_f2d>
 800a99c:	ec41 0b10 	vmov	d0, r0, r1
 800a9a0:	f018 f9d2 	bl	8022d48 <sqrt>
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800a9a4:	ee19 0a10 	vmov	r0, s18
	sum_delta_e = sqrt(sum_delta_e);
 800a9a8:	ec59 8b10 	vmov	r8, r9, d0
	float Qa_rms = 100 - 3.1*delta_e_rms;
 800a9ac:	f7f5 fddc 	bl	8000568 <__aeabi_f2d>
 800a9b0:	a38d      	add	r3, pc, #564	; (adr r3, 800abe8 <cqs_func+0xf08>)
 800a9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b6:	f7f5 fe2b 	bl	8000610 <__aeabi_dmul>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	460b      	mov	r3, r1
 800a9be:	2000      	movs	r0, #0
 800a9c0:	4999      	ldr	r1, [pc, #612]	; (800ac28 <cqs_func+0xf48>)
 800a9c2:	f7f5 fc71 	bl	80002a8 <__aeabi_dsub>
 800a9c6:	f7f6 f91b 	bl	8000c00 <__aeabi_d2f>
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800a9ca:	ee06 0a90 	vmov	s13, r0
 800a9ce:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800a9d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a9d6:	ee17 0a10 	vmov	r0, s14
 800a9da:	f7f5 fdc5 	bl	8000568 <__aeabi_f2d>
 800a9de:	ec41 0b10 	vmov	d0, r0, r1
 800a9e2:	f017 ff3d 	bl	8022860 <exp>
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	4b92      	ldr	r3, [pc, #584]	; (800ac34 <cqs_func+0xf54>)
 800a9ea:	ec51 0b10 	vmov	r0, r1, d0
 800a9ee:	f7f5 fc5d 	bl	80002ac <__adddf3>
 800a9f2:	ec41 0b10 	vmov	d0, r0, r1
 800a9f6:	f017 ffaf 	bl	8022958 <log>

	 Qa_temp = Mcct * Qa0_100;
 800a9fa:	e9d4 6700 	ldrd	r6, r7, [r4]
	float Qa0_100 = 10 * log(exp(Qa_rms / 10)+ 1);
 800a9fe:	ec51 0b10 	vmov	r0, r1, d0
 800aa02:	2200      	movs	r2, #0
 800aa04:	4b8a      	ldr	r3, [pc, #552]	; (800ac30 <cqs_func+0xf50>)
 800aa06:	f7f5 fe03 	bl	8000610 <__aeabi_dmul>
 800aa0a:	f7f6 f8f9 	bl	8000c00 <__aeabi_d2f>
	 Qa_temp = Mcct * Qa0_100;
 800aa0e:	f7f5 fdab 	bl	8000568 <__aeabi_f2d>
 800aa12:	4632      	mov	r2, r6
 800aa14:	463b      	mov	r3, r7
 800aa16:	f7f5 fdfb 	bl	8000610 <__aeabi_dmul>
 800aa1a:	f7f6 f8f1 	bl	8000c00 <__aeabi_d2f>
 800aa1e:	ee07 0a90 	vmov	s15, r0
 800aa22:	4b86      	ldr	r3, [pc, #536]	; (800ac3c <cqs_func+0xf5c>)
	 Qa = (uint8_t)Qa_temp;
 800aa24:	4a86      	ldr	r2, [pc, #536]	; (800ac40 <cqs_func+0xf60>)
	 Qa_temp = Mcct * Qa0_100;
 800aa26:	6018      	str	r0, [r3, #0]
	 Qa = (uint8_t)Qa_temp;
 800aa28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	sum_delta_e = sqrt(sum_delta_e);
 800aa2c:	4649      	mov	r1, r9
	 Qa = (uint8_t)Qa_temp;
 800aa2e:	ee17 3a90 	vmov	r3, s15
	sum_delta_e = sqrt(sum_delta_e);
 800aa32:	4640      	mov	r0, r8
	 Qa = (uint8_t)Qa_temp;
 800aa34:	7013      	strb	r3, [r2, #0]
	sum_delta_e = sqrt(sum_delta_e);
 800aa36:	f7f6 f8e3 	bl	8000c00 <__aeabi_d2f>
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800aa3a:	f7f5 fd95 	bl	8000568 <__aeabi_f2d>
 800aa3e:	a36c      	add	r3, pc, #432	; (adr r3, 800abf0 <cqs_func+0xf10>)
 800aa40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa44:	f7f5 fde4 	bl	8000610 <__aeabi_dmul>
 800aa48:	4602      	mov	r2, r0
 800aa4a:	460b      	mov	r3, r1
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	4976      	ldr	r1, [pc, #472]	; (800ac28 <cqs_func+0xf48>)
 800aa50:	f7f5 fc2a 	bl	80002a8 <__aeabi_dsub>
 800aa54:	2200      	movs	r2, #0
 800aa56:	4b76      	ldr	r3, [pc, #472]	; (800ac30 <cqs_func+0xf50>)
 800aa58:	f7f5 ff04 	bl	8000864 <__aeabi_ddiv>
 800aa5c:	ec41 0b10 	vmov	d0, r0, r1
 800aa60:	f017 fefe 	bl	8022860 <exp>
 800aa64:	2200      	movs	r2, #0
 800aa66:	4b73      	ldr	r3, [pc, #460]	; (800ac34 <cqs_func+0xf54>)
 800aa68:	ec51 0b10 	vmov	r0, r1, d0
 800aa6c:	f7f5 fc1c 	bl	80002a8 <__aeabi_dsub>
 800aa70:	ec41 0b10 	vmov	d0, r0, r1
 800aa74:	f017 ff70 	bl	8022958 <log>
 800aa78:	2200      	movs	r2, #0
 800aa7a:	4b6d      	ldr	r3, [pc, #436]	; (800ac30 <cqs_func+0xf50>)
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	4639      	mov	r1, r7
 800aa80:	ed8d 0b00 	vstr	d0, [sp]
 800aa84:	f7f5 fdc4 	bl	8000610 <__aeabi_dmul>
 800aa88:	ed9d 0b00 	vldr	d0, [sp]
 800aa8c:	ec53 2b10 	vmov	r2, r3, d0
 800aa90:	f7f5 fdbe 	bl	8000610 <__aeabi_dmul>
 800aa94:	f7f6 f8b4 	bl	8000c00 <__aeabi_d2f>
 800aa98:	ee07 0a90 	vmov	s15, r0
 800aa9c:	4b69      	ldr	r3, [pc, #420]	; (800ac44 <cqs_func+0xf64>)
		Qf = (uint8_t)Qf_temp;
 800aa9e:	4a6a      	ldr	r2, [pc, #424]	; (800ac48 <cqs_func+0xf68>)
	 Qf_temp = Mcct * 10 * log(exp((100 - 2.93*sum_delta_e) / 10) - 1);
 800aaa0:	6018      	str	r0, [r3, #0]
		Qf = (uint8_t)Qf_temp;
 800aaa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800aaa6:	e9d4 0100 	ldrd	r0, r1, [r4]
		Qf = (uint8_t)Qf_temp;
 800aaaa:	ee17 3a90 	vmov	r3, s15
 800aaae:	7013      	strb	r3, [r2, #0]
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800aab0:	2200      	movs	r2, #0
 800aab2:	4b5f      	ldr	r3, [pc, #380]	; (800ac30 <cqs_func+0xf50>)
 800aab4:	f7f5 fdac 	bl	8000610 <__aeabi_dmul>
 800aab8:	eec8 7a88 	vdiv.f32	s15, s17, s16
 800aabc:	4604      	mov	r4, r0
 800aabe:	460d      	mov	r5, r1
 800aac0:	ee79 7a67 	vsub.f32	s15, s18, s15
 800aac4:	ee17 0a90 	vmov	r0, s15
 800aac8:	f7f5 fd4e 	bl	8000568 <__aeabi_f2d>
 800aacc:	a34a      	add	r3, pc, #296	; (adr r3, 800abf8 <cqs_func+0xf18>)
 800aace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aad2:	f7f5 fd9d 	bl	8000610 <__aeabi_dmul>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	2000      	movs	r0, #0
 800aadc:	4952      	ldr	r1, [pc, #328]	; (800ac28 <cqs_func+0xf48>)
 800aade:	f7f5 fbe3 	bl	80002a8 <__aeabi_dsub>
 800aae2:	2200      	movs	r2, #0
 800aae4:	4b52      	ldr	r3, [pc, #328]	; (800ac30 <cqs_func+0xf50>)
 800aae6:	f7f5 febd 	bl	8000864 <__aeabi_ddiv>
 800aaea:	ec41 0b10 	vmov	d0, r0, r1
 800aaee:	f017 feb7 	bl	8022860 <exp>
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	4b4f      	ldr	r3, [pc, #316]	; (800ac34 <cqs_func+0xf54>)
 800aaf6:	ec51 0b10 	vmov	r0, r1, d0
 800aafa:	f7f5 fbd5 	bl	80002a8 <__aeabi_dsub>
 800aafe:	ec41 0b10 	vmov	d0, r0, r1
 800ab02:	f017 ff29 	bl	8022958 <log>
 800ab06:	4620      	mov	r0, r4
 800ab08:	ec53 2b10 	vmov	r2, r3, d0
 800ab0c:	4629      	mov	r1, r5
 800ab0e:	f7f5 fd7f 	bl	8000610 <__aeabi_dmul>
 800ab12:	f7f6 f875 	bl	8000c00 <__aeabi_d2f>
 800ab16:	ee07 0a90 	vmov	s15, r0
 800ab1a:	4b4c      	ldr	r3, [pc, #304]	; (800ac4c <cqs_func+0xf6c>)
		Qp = (uint8_t)Qp_temp;
 800ab1c:	4a4c      	ldr	r2, [pc, #304]	; (800ac50 <cqs_func+0xf70>)
	 Qp_temp = Mcct * 10 * log(exp((100 - 3.78*(delta_e_rms - sum_delta_c/15))/10)-1);
 800ab1e:	6018      	str	r0, [r3, #0]
		Qp = (uint8_t)Qp_temp;
 800ab20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	
		bar_CQS = 1.0;
 800ab24:	4943      	ldr	r1, [pc, #268]	; (800ac34 <cqs_func+0xf54>)
		Qp = (uint8_t)Qp_temp;
 800ab26:	ee17 3a90 	vmov	r3, s15
 800ab2a:	7013      	strb	r3, [r2, #0]
		bar_CQS = 1.0;
 800ab2c:	4b49      	ldr	r3, [pc, #292]	; (800ac54 <cqs_func+0xf74>)
 800ab2e:	2000      	movs	r0, #0
 800ab30:	e9c3 0100 	strd	r0, r1, [r3]
		GUI_Bar_Measure(85, 13, bar_CQS);
 800ab34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ab38:	210d      	movs	r1, #13
 800ab3a:	2055      	movs	r0, #85	; 0x55
 800ab3c:	b02f      	add	sp, #188	; 0xbc
 800ab3e:	ecbd 8b0a 	vpop	{d8-d12}
 800ab42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		GUI_Bar_Measure(85, 13, bar_CQS);
 800ab46:	f00a bda1 	b.w	801568c <GUI_Bar_Measure>
	if (CCT_measure < 5000)
 800ab4a:	9a04      	ldr	r2, [sp, #16]
 800ab4c:	f241 3387 	movw	r3, #4999	; 0x1387
 800ab50:	429a      	cmp	r2, r3
 800ab52:	f67f a928 	bls.w	8009da6 <cqs_func+0xc6>
		if (CCT_measure < 7000)
 800ab56:	9a04      	ldr	r2, [sp, #16]
 800ab58:	f641 3357 	movw	r3, #6999	; 0x1b57
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d97b      	bls.n	800ac58 <cqs_func+0xf78>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ab60:	9804      	ldr	r0, [sp, #16]
 800ab62:	f7f5 fcdf 	bl	8000524 <__aeabi_ui2d>
 800ab66:	ed9f 1b26 	vldr	d1, [pc, #152]	; 800ac00 <cqs_func+0xf20>
 800ab6a:	ec41 0b10 	vmov	d0, r0, r1
 800ab6e:	f017 ff73 	bl	8022a58 <pow>
 800ab72:	eddd 7a04 	vldr	s15, [sp, #16]
 800ab76:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800ab7a:	ed8d 0b00 	vstr	d0, [sp]
 800ab7e:	ee68 7a08 	vmul.f32	s15, s16, s16
 800ab82:	ee17 0a90 	vmov	r0, s15
 800ab86:	f7f5 fcef 	bl	8000568 <__aeabi_f2d>
 800ab8a:	4602      	mov	r2, r0
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	a11e      	add	r1, pc, #120	; (adr r1, 800ac08 <cqs_func+0xf28>)
 800ab90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab94:	f7f5 fe66 	bl	8000864 <__aeabi_ddiv>
 800ab98:	ed9d 0b00 	vldr	d0, [sp]
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	ec53 2b10 	vmov	r2, r3, d0
 800aba2:	460d      	mov	r5, r1
 800aba4:	a11a      	add	r1, pc, #104	; (adr r1, 800ac10 <cqs_func+0xf30>)
 800aba6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abaa:	f7f5 fe5b 	bl	8000864 <__aeabi_ddiv>
 800abae:	4602      	mov	r2, r0
 800abb0:	460b      	mov	r3, r1
 800abb2:	4620      	mov	r0, r4
 800abb4:	4629      	mov	r1, r5
 800abb6:	f7f5 fb79 	bl	80002ac <__adddf3>
 800abba:	4604      	mov	r4, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800abbc:	ee18 0a10 	vmov	r0, s16
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800abc0:	460d      	mov	r5, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800abc2:	f7f5 fcd1 	bl	8000568 <__aeabi_f2d>
 800abc6:	4602      	mov	r2, r0
 800abc8:	460b      	mov	r3, r1
 800abca:	a113      	add	r1, pc, #76	; (adr r1, 800ac18 <cqs_func+0xf38>)
 800abcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abd0:	f7f5 fe48 	bl	8000864 <__aeabi_ddiv>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	4620      	mov	r0, r4
 800abda:	4629      	mov	r1, r5
 800abdc:	f7f5 fb66 	bl	80002ac <__adddf3>
 800abe0:	a30f      	add	r3, pc, #60	; (adr r3, 800ac20 <cqs_func+0xf40>)
 800abe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe6:	e073      	b.n	800acd0 <cqs_func+0xff0>
 800abe8:	cccccccd 	.word	0xcccccccd
 800abec:	4008cccc 	.word	0x4008cccc
 800abf0:	d70a3d71 	.word	0xd70a3d71
 800abf4:	400770a3 	.word	0x400770a3
 800abf8:	a3d70a3d 	.word	0xa3d70a3d
 800abfc:	400e3d70 	.word	0x400e3d70
 800ac00:	00000000 	.word	0x00000000
 800ac04:	40080000 	.word	0x40080000
 800ac08:	00000000 	.word	0x00000000
 800ac0c:	413d04e8 	.word	0x413d04e8
 800ac10:	00000001 	.word	0x00000001
 800ac14:	c1dde5cf 	.word	0xc1dde5cf
 800ac18:	28f5c290 	.word	0x28f5c290
 800ac1c:	406eef5c 	.word	0x406eef5c
 800ac20:	a3ec02f3 	.word	0xa3ec02f3
 800ac24:	3fce5753 	.word	0x3fce5753
 800ac28:	40590000 	.word	0x40590000
 800ac2c:	20000188 	.word	0x20000188
 800ac30:	40240000 	.word	0x40240000
 800ac34:	3ff00000 	.word	0x3ff00000
 800ac38:	2008bab0 	.word	0x2008bab0
 800ac3c:	2008bba8 	.word	0x2008bba8
 800ac40:	20002ba3 	.word	0x20002ba3
 800ac44:	2008bbac 	.word	0x2008bbac
 800ac48:	20002ba4 	.word	0x20002ba4
 800ac4c:	2008b9a0 	.word	0x2008b9a0
 800ac50:	20002ba5 	.word	0x20002ba5
 800ac54:	2008b920 	.word	0x2008b920
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ac58:	eddd 7a04 	vldr	s15, [sp, #16]
 800ac5c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800ac60:	ee68 8a08 	vmul.f32	s17, s16, s16
 800ac64:	ee68 7a28 	vmul.f32	s15, s16, s17
 800ac68:	ee17 0a90 	vmov	r0, s15
 800ac6c:	f7f5 fc7c 	bl	8000568 <__aeabi_f2d>
 800ac70:	4602      	mov	r2, r0
 800ac72:	460b      	mov	r3, r1
 800ac74:	a181      	add	r1, pc, #516	; (adr r1, 800ae7c <cqs_func+0x119c>)
 800ac76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac7a:	f7f5 fdf3 	bl	8000864 <__aeabi_ddiv>
 800ac7e:	4604      	mov	r4, r0
 800ac80:	ee18 0a90 	vmov	r0, s17
 800ac84:	460d      	mov	r5, r1
 800ac86:	f7f5 fc6f 	bl	8000568 <__aeabi_f2d>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	a17d      	add	r1, pc, #500	; (adr r1, 800ae84 <cqs_func+0x11a4>)
 800ac90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ac94:	f7f5 fde6 	bl	8000864 <__aeabi_ddiv>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	460b      	mov	r3, r1
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	4629      	mov	r1, r5
 800aca0:	f7f5 fb04 	bl	80002ac <__adddf3>
 800aca4:	4604      	mov	r4, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800aca6:	ee18 0a10 	vmov	r0, s16
			xD = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800acaa:	460d      	mov	r5, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800acac:	f7f5 fc5c 	bl	8000568 <__aeabi_f2d>
 800acb0:	4602      	mov	r2, r0
 800acb2:	460b      	mov	r3, r1
 800acb4:	a175      	add	r1, pc, #468	; (adr r1, 800ae8c <cqs_func+0x11ac>)
 800acb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800acba:	f7f5 fdd3 	bl	8000864 <__aeabi_ddiv>
 800acbe:	4602      	mov	r2, r0
 800acc0:	460b      	mov	r3, r1
 800acc2:	4620      	mov	r0, r4
 800acc4:	4629      	mov	r1, r5
 800acc6:	f7f5 faf1 	bl	80002ac <__adddf3>
 800acca:	a372      	add	r3, pc, #456	; (adr r3, 800ae94 <cqs_func+0x11b4>)
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800acd0:	f7f5 faec 	bl	80002ac <__adddf3>
			xD = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800acd4:	4b64      	ldr	r3, [pc, #400]	; (800ae68 <cqs_func+0x1188>)
 800acd6:	e9c3 0100 	strd	r0, r1, [r3]
		yD = -3 * xD*xD + 2.87*xD - 0.275;
 800acda:	4b63      	ldr	r3, [pc, #396]	; (800ae68 <cqs_func+0x1188>)
 800acdc:	e9d3 4500 	ldrd	r4, r5, [r3]
 800ace0:	2200      	movs	r2, #0
 800ace2:	4b62      	ldr	r3, [pc, #392]	; (800ae6c <cqs_func+0x118c>)
 800ace4:	4620      	mov	r0, r4
 800ace6:	4629      	mov	r1, r5
 800ace8:	f7f5 fc92 	bl	8000610 <__aeabi_dmul>
 800acec:	4622      	mov	r2, r4
 800acee:	462b      	mov	r3, r5
 800acf0:	f7f5 fc8e 	bl	8000610 <__aeabi_dmul>
 800acf4:	a346      	add	r3, pc, #280	; (adr r3, 800ae10 <cqs_func+0x1130>)
 800acf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfa:	4606      	mov	r6, r0
 800acfc:	460f      	mov	r7, r1
 800acfe:	4620      	mov	r0, r4
 800ad00:	4629      	mov	r1, r5
 800ad02:	f7f5 fc85 	bl	8000610 <__aeabi_dmul>
 800ad06:	4602      	mov	r2, r0
 800ad08:	460b      	mov	r3, r1
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	4639      	mov	r1, r7
 800ad0e:	f7f5 facd 	bl	80002ac <__adddf3>
 800ad12:	a341      	add	r3, pc, #260	; (adr r3, 800ae18 <cqs_func+0x1138>)
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	f7f5 fac6 	bl	80002a8 <__aeabi_dsub>
 800ad1c:	4b54      	ldr	r3, [pc, #336]	; (800ae70 <cqs_func+0x1190>)
 800ad1e:	4606      	mov	r6, r0
 800ad20:	460f      	mov	r7, r1
 800ad22:	e9c3 6700 	strd	r6, r7, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800ad26:	4620      	mov	r0, r4
 800ad28:	a33d      	add	r3, pc, #244	; (adr r3, 800ae20 <cqs_func+0x1140>)
 800ad2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2e:	4629      	mov	r1, r5
 800ad30:	f7f5 fc6e 	bl	8000610 <__aeabi_dmul>
 800ad34:	a33c      	add	r3, pc, #240	; (adr r3, 800ae28 <cqs_func+0x1148>)
 800ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3a:	f7f5 fab7 	bl	80002ac <__adddf3>
 800ad3e:	a33c      	add	r3, pc, #240	; (adr r3, 800ae30 <cqs_func+0x1150>)
 800ad40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad44:	4680      	mov	r8, r0
 800ad46:	4689      	mov	r9, r1
 800ad48:	4630      	mov	r0, r6
 800ad4a:	4639      	mov	r1, r7
 800ad4c:	f7f5 fc60 	bl	8000610 <__aeabi_dmul>
 800ad50:	4602      	mov	r2, r0
 800ad52:	460b      	mov	r3, r1
 800ad54:	4640      	mov	r0, r8
 800ad56:	4649      	mov	r1, r9
 800ad58:	f7f5 faa6 	bl	80002a8 <__aeabi_dsub>
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800ad5c:	a336      	add	r3, pc, #216	; (adr r3, 800ae38 <cqs_func+0x1158>)
 800ad5e:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800ad62:	4680      	mov	r8, r0
 800ad64:	4689      	mov	r9, r1
		M1 = -1.3515 - 1.7703*xD + 5.9114*yD;
 800ad66:	4620      	mov	r0, r4
 800ad68:	4629      	mov	r1, r5
 800ad6a:	f7f5 fc51 	bl	8000610 <__aeabi_dmul>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	a133      	add	r1, pc, #204	; (adr r1, 800ae40 <cqs_func+0x1160>)
 800ad74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ad78:	f7f5 fa96 	bl	80002a8 <__aeabi_dsub>
 800ad7c:	a332      	add	r3, pc, #200	; (adr r3, 800ae48 <cqs_func+0x1168>)
 800ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad82:	4682      	mov	sl, r0
 800ad84:	468b      	mov	fp, r1
 800ad86:	4630      	mov	r0, r6
 800ad88:	4639      	mov	r1, r7
 800ad8a:	f7f5 fc41 	bl	8000610 <__aeabi_dmul>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	460b      	mov	r3, r1
 800ad92:	4650      	mov	r0, sl
 800ad94:	4659      	mov	r1, fp
 800ad96:	f7f5 fa89 	bl	80002ac <__adddf3>
 800ad9a:	f7f5 ff31 	bl	8000c00 <__aeabi_d2f>
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800ad9e:	f7f5 fbe3 	bl	8000568 <__aeabi_f2d>
 800ada2:	4642      	mov	r2, r8
 800ada4:	464b      	mov	r3, r9
 800ada6:	f7f5 fd5d 	bl	8000864 <__aeabi_ddiv>
 800adaa:	f7f5 ff29 	bl	8000c00 <__aeabi_d2f>
 800adae:	4b31      	ldr	r3, [pc, #196]	; (800ae74 <cqs_func+0x1194>)
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800adb0:	4629      	mov	r1, r5
		M1 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800adb2:	6018      	str	r0, [r3, #0]
		M2 = 0.03 - 31.4424*xD + 30.0717*yD;
 800adb4:	a326      	add	r3, pc, #152	; (adr r3, 800ae50 <cqs_func+0x1170>)
 800adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adba:	4620      	mov	r0, r4
 800adbc:	f7f5 fc28 	bl	8000610 <__aeabi_dmul>
 800adc0:	4602      	mov	r2, r0
 800adc2:	460b      	mov	r3, r1
 800adc4:	a124      	add	r1, pc, #144	; (adr r1, 800ae58 <cqs_func+0x1178>)
 800adc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800adca:	f7f5 fa6d 	bl	80002a8 <__aeabi_dsub>
 800adce:	a324      	add	r3, pc, #144	; (adr r3, 800ae60 <cqs_func+0x1180>)
 800add0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add4:	4604      	mov	r4, r0
 800add6:	460d      	mov	r5, r1
 800add8:	4630      	mov	r0, r6
 800adda:	4639      	mov	r1, r7
 800addc:	f7f5 fc18 	bl	8000610 <__aeabi_dmul>
 800ade0:	4602      	mov	r2, r0
 800ade2:	460b      	mov	r3, r1
 800ade4:	4620      	mov	r0, r4
 800ade6:	4629      	mov	r1, r5
 800ade8:	f7f5 fa60 	bl	80002ac <__adddf3>
 800adec:	f7f5 ff08 	bl	8000c00 <__aeabi_d2f>
		M2 /= (0.0241 + 0.2562*xD - 0.7341*yD);
 800adf0:	f7f5 fbba 	bl	8000568 <__aeabi_f2d>
 800adf4:	464b      	mov	r3, r9
 800adf6:	4642      	mov	r2, r8
 800adf8:	f7f5 fd34 	bl	8000864 <__aeabi_ddiv>
 800adfc:	f7f5 ff00 	bl	8000c00 <__aeabi_d2f>
 800ae00:	4b1d      	ldr	r3, [pc, #116]	; (800ae78 <cqs_func+0x1198>)
 800ae02:	6018      	str	r0, [r3, #0]
 800ae04:	f7fe bfd2 	b.w	8009dac <cqs_func+0xcc>
		float E_sat = delta_E_CQS;
 800ae08:	ee07 0a90 	vmov	s15, r0
 800ae0c:	e56c      	b.n	800a8e8 <cqs_func+0xc08>
 800ae0e:	bf00      	nop
 800ae10:	8f5c28f6 	.word	0x8f5c28f6
 800ae14:	4006f5c2 	.word	0x4006f5c2
 800ae18:	9999999a 	.word	0x9999999a
 800ae1c:	3fd19999 	.word	0x3fd19999
 800ae20:	af4f0d84 	.word	0xaf4f0d84
 800ae24:	3fd06594 	.word	0x3fd06594
 800ae28:	9f559b3d 	.word	0x9f559b3d
 800ae2c:	3f98adab 	.word	0x3f98adab
 800ae30:	487fcb92 	.word	0x487fcb92
 800ae34:	3fe77dbf 	.word	0x3fe77dbf
 800ae38:	17c1bda5 	.word	0x17c1bda5
 800ae3c:	3ffc5326 	.word	0x3ffc5326
 800ae40:	76c8b439 	.word	0x76c8b439
 800ae44:	bff59fbe 	.word	0xbff59fbe
 800ae48:	0aa64c30 	.word	0x0aa64c30
 800ae4c:	4017a546 	.word	0x4017a546
 800ae50:	205bc01a 	.word	0x205bc01a
 800ae54:	403f7141 	.word	0x403f7141
 800ae58:	eb851eb8 	.word	0xeb851eb8
 800ae5c:	3f9eb851 	.word	0x3f9eb851
 800ae60:	ee631f8a 	.word	0xee631f8a
 800ae64:	403e125a 	.word	0x403e125a
 800ae68:	2008baa8 	.word	0x2008baa8
 800ae6c:	c0080000 	.word	0xc0080000
 800ae70:	2008baa0 	.word	0x2008baa0
 800ae74:	20002b8c 	.word	0x20002b8c
 800ae78:	20002b90 	.word	0x20002b90
 800ae7c:	dc000000 	.word	0xdc000000
 800ae80:	c1f12993 	.word	0xc1f12993
 800ae84:	00000000 	.word	0x00000000
 800ae88:	4146a47c 	.word	0x4146a47c
 800ae8c:	3d70a3d7 	.word	0x3d70a3d7
 800ae90:	4058c70a 	.word	0x4058c70a
 800ae94:	d594f26b 	.word	0xd594f26b
 800ae98:	3fcf3d74 	.word	0x3fcf3d74

0800ae9c <CQS_Axes>:
#include "CQS_graph.h"
extern uint8_t TFT_direction;


void CQS_Axes(uint8_t direction){
 800ae9c:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800ae9e:	bbb8      	cbnz	r0, 800af10 <CQS_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800aea0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800aea4:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800aea8:	2212      	movs	r2, #18
 800aeaa:	215f      	movs	r1, #95	; 0x5f
 800aeac:	2010      	movs	r0, #16
 800aeae:	9400      	str	r4, [sp, #0]
 800aeb0:	f013 fa2b 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800aeb4:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800aeb8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800aebc:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800aec0:	2010      	movs	r0, #16
 800aec2:	9400      	str	r4, [sp, #0]
 800aec4:	f013 fa21 	bl	801e30a <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800aec8:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800aecc:	4619      	mov	r1, r3
 800aece:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800aed2:	2010      	movs	r0, #16
 800aed4:	9400      	str	r4, [sp, #0]
 800aed6:	f013 f9bb 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800aeda:	f240 1301 	movw	r3, #257	; 0x101
 800aede:	4619      	mov	r1, r3
 800aee0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800aee4:	2010      	movs	r0, #16
 800aee6:	9400      	str	r4, [sp, #0]
 800aee8:	f013 f9b2 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800aeec:	23b5      	movs	r3, #181	; 0xb5
 800aeee:	4619      	mov	r1, r3
 800aef0:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800aef4:	2010      	movs	r0, #16
 800aef6:	9400      	str	r4, [sp, #0]
 800aef8:	f013 f9aa 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800aefc:	2369      	movs	r3, #105	; 0x69
 800aefe:	9400      	str	r4, [sp, #0]
 800af00:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800af04:	4619      	mov	r1, r3
 800af06:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800af08:	f013 f9a2 	bl	801e250 <TFT_DrawLine>
		}
}
 800af0c:	b002      	add	sp, #8
 800af0e:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800af10:	2801      	cmp	r0, #1
 800af12:	d131      	bne.n	800af78 <CQS_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800af14:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800af18:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af1c:	22ff      	movs	r2, #255	; 0xff
 800af1e:	2146      	movs	r1, #70	; 0x46
 800af20:	20fd      	movs	r0, #253	; 0xfd
 800af22:	9400      	str	r4, [sp, #0]
 800af24:	f013 f9f1 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800af28:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af2c:	22ff      	movs	r2, #255	; 0xff
 800af2e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800af32:	2028      	movs	r0, #40	; 0x28
 800af34:	9400      	str	r4, [sp, #0]
 800af36:	f013 f9e8 	bl	801e30a <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800af3a:	22cc      	movs	r2, #204	; 0xcc
 800af3c:	4610      	mov	r0, r2
 800af3e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af42:	2146      	movs	r1, #70	; 0x46
 800af44:	9400      	str	r4, [sp, #0]
 800af46:	f013 f983 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800af4a:	2297      	movs	r2, #151	; 0x97
 800af4c:	4610      	mov	r0, r2
 800af4e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af52:	2146      	movs	r1, #70	; 0x46
 800af54:	9400      	str	r4, [sp, #0]
 800af56:	f013 f97b 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800af5a:	2262      	movs	r2, #98	; 0x62
 800af5c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af60:	4610      	mov	r0, r2
 800af62:	9400      	str	r4, [sp, #0]
 800af64:	2146      	movs	r1, #70	; 0x46
 800af66:	f013 f973 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800af6a:	9400      	str	r4, [sp, #0]
 800af6c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af70:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800af72:	2146      	movs	r1, #70	; 0x46
 800af74:	4610      	mov	r0, r2
 800af76:	e7c7      	b.n	800af08 <CQS_Axes+0x6c>
	}else if (direction == 0x02)
 800af78:	2802      	cmp	r0, #2
 800af7a:	d1c7      	bne.n	800af0c <CQS_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800af7c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800af80:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800af84:	2210      	movs	r2, #16
 800af86:	214a      	movs	r1, #74	; 0x4a
 800af88:	2012      	movs	r0, #18
 800af8a:	9400      	str	r4, [sp, #0]
 800af8c:	f013 f9bd 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800af90:	234c      	movs	r3, #76	; 0x4c
 800af92:	22e8      	movs	r2, #232	; 0xe8
 800af94:	214a      	movs	r1, #74	; 0x4a
 800af96:	2011      	movs	r0, #17
 800af98:	9400      	str	r4, [sp, #0]
 800af9a:	f013 f9b6 	bl	801e30a <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800af9e:	2244      	movs	r2, #68	; 0x44
 800afa0:	4610      	mov	r0, r2
 800afa2:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800afa6:	2146      	movs	r1, #70	; 0x46
 800afa8:	9400      	str	r4, [sp, #0]
 800afaa:	f013 f951 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800afae:	2279      	movs	r2, #121	; 0x79
 800afb0:	4610      	mov	r0, r2
 800afb2:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800afb6:	2146      	movs	r1, #70	; 0x46
 800afb8:	9400      	str	r4, [sp, #0]
 800afba:	f013 f949 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800afbe:	22ae      	movs	r2, #174	; 0xae
 800afc0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800afc4:	4610      	mov	r0, r2
 800afc6:	9400      	str	r4, [sp, #0]
 800afc8:	2146      	movs	r1, #70	; 0x46
 800afca:	f013 f941 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800afce:	9400      	str	r4, [sp, #0]
 800afd0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800afd4:	22e3      	movs	r2, #227	; 0xe3
 800afd6:	e7cc      	b.n	800af72 <CQS_Axes+0xd6>

0800afd8 <CQS_Axes_Measure>:

void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800afd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800afdc:	ac02      	add	r4, sp, #8
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800afde:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800afe0:	2300      	movs	r3, #0
void CQS_Axes_Measure(uint8_t direction, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800afe2:	4688      	mov	r8, r1
 800afe4:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800afe6:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800afea:	2800      	cmp	r0, #0
 800afec:	d15a      	bne.n	800b0a4 <CQS_Axes_Measure+0xcc>
	{
		
		TFT_SetTextColor(TFT_White);
 800afee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800aff2:	f013 fbb9 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800aff6:	2063      	movs	r0, #99	; 0x63
 800aff8:	f013 fbbc 	bl	801e774 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800affc:	485c      	ldr	r0, [pc, #368]	; (800b170 <CQS_Axes_Measure+0x198>)
 800affe:	f013 fbad 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(20, 70, 'a');
 800b002:	2261      	movs	r2, #97	; 0x61
 800b004:	2146      	movs	r1, #70	; 0x46
 800b006:	2014      	movs	r0, #20
 800b008:	f013 fc72 	bl	801e8f0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b00c:	4859      	ldr	r0, [pc, #356]	; (800b174 <CQS_Axes_Measure+0x19c>)
 800b00e:	f013 fba5 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(5, 70-2, 'Q');
 800b012:	2251      	movs	r2, #81	; 0x51
 800b014:	2144      	movs	r1, #68	; 0x44
 800b016:	2005      	movs	r0, #5
 800b018:	f013 fc6a 	bl	801e8f0 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qa);
 800b01c:	4642      	mov	r2, r8
 800b01e:	4956      	ldr	r1, [pc, #344]	; (800b178 <CQS_Axes_Measure+0x1a0>)
 800b020:	4620      	mov	r0, r4
 800b022:	f016 feb5 	bl	8021d90 <siprintf>
		TFT_DisplayString(39, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b026:	2303      	movs	r3, #3
 800b028:	4622      	mov	r2, r4
 800b02a:	2144      	movs	r1, #68	; 0x44
 800b02c:	2027      	movs	r0, #39	; 0x27
 800b02e:	f013 fcb7 	bl	801e9a0 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b032:	484f      	ldr	r0, [pc, #316]	; (800b170 <CQS_Axes_Measure+0x198>)
 800b034:	f013 fb92 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(112, 70, 'p');
 800b038:	2270      	movs	r2, #112	; 0x70
 800b03a:	4610      	mov	r0, r2
 800b03c:	2146      	movs	r1, #70	; 0x46
 800b03e:	f013 fc57 	bl	801e8f0 <TFT_DrawChar>

		TFT_SetFont(&Font16EN_arch_big);
 800b042:	484c      	ldr	r0, [pc, #304]	; (800b174 <CQS_Axes_Measure+0x19c>)
 800b044:	f013 fb8a 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(93, 70-2, 'Q');
 800b048:	2251      	movs	r2, #81	; 0x51
 800b04a:	2144      	movs	r1, #68	; 0x44
 800b04c:	205d      	movs	r0, #93	; 0x5d
 800b04e:	f013 fc4f 	bl	801e8f0 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Qp);
 800b052:	463a      	mov	r2, r7
 800b054:	4948      	ldr	r1, [pc, #288]	; (800b178 <CQS_Axes_Measure+0x1a0>)
 800b056:	4620      	mov	r0, r4
 800b058:	f016 fe9a 	bl	8021d90 <siprintf>
		TFT_DisplayString(130, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b05c:	2303      	movs	r3, #3
 800b05e:	4622      	mov	r2, r4
 800b060:	2144      	movs	r1, #68	; 0x44
 800b062:	2082      	movs	r0, #130	; 0x82
 800b064:	f013 fc9c 	bl	801e9a0 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800b068:	4841      	ldr	r0, [pc, #260]	; (800b170 <CQS_Axes_Measure+0x198>)
 800b06a:	f013 fb77 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(206, 70, 'f');
 800b06e:	2266      	movs	r2, #102	; 0x66
 800b070:	2146      	movs	r1, #70	; 0x46
 800b072:	20ce      	movs	r0, #206	; 0xce
 800b074:	f013 fc3c 	bl	801e8f0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b078:	483e      	ldr	r0, [pc, #248]	; (800b174 <CQS_Axes_Measure+0x19c>)
 800b07a:	f013 fb6f 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(191, 70-2, 'Q');
 800b07e:	2251      	movs	r2, #81	; 0x51
 800b080:	2144      	movs	r1, #68	; 0x44
 800b082:	20bf      	movs	r0, #191	; 0xbf
 800b084:	f013 fc34 	bl	801e8f0 <TFT_DrawChar>

		sprintf (buffer, "%d", Qf);
 800b088:	4632      	mov	r2, r6
 800b08a:	493b      	ldr	r1, [pc, #236]	; (800b178 <CQS_Axes_Measure+0x1a0>)
 800b08c:	4620      	mov	r0, r4
 800b08e:	f016 fe7f 	bl	8021d90 <siprintf>
		TFT_DisplayString(230, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800b092:	2303      	movs	r3, #3
 800b094:	4622      	mov	r2, r4
 800b096:	2144      	movs	r1, #68	; 0x44
 800b098:	20e6      	movs	r0, #230	; 0xe6
 800b09a:	f013 fc81 	bl	801e9a0 <TFT_DisplayString>
		
		sprintf (buffer, "%d", Qf);
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800b09e:	b002      	add	sp, #8
 800b0a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a4:	4d35      	ldr	r5, [pc, #212]	; (800b17c <CQS_Axes_Measure+0x1a4>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b0a6:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800b0a8:	bf14      	ite	ne
 800b0aa:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b0ac:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b0ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b0b2:	bf18      	it	ne
 800b0b4:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b0b6:	f013 fb57 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b0ba:	2063      	movs	r0, #99	; 0x63
 800b0bc:	f013 fb5a 	bl	801e774 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800b0c0:	482b      	ldr	r0, [pc, #172]	; (800b170 <CQS_Axes_Measure+0x198>)
 800b0c2:	f013 fb4b 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800b0c6:	2261      	movs	r2, #97	; 0x61
 800b0c8:	2110      	movs	r1, #16
 800b0ca:	2064      	movs	r0, #100	; 0x64
 800b0cc:	f013 fc10 	bl	801e8f0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b0d0:	4828      	ldr	r0, [pc, #160]	; (800b174 <CQS_Axes_Measure+0x19c>)
 800b0d2:	f013 fb43 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'Q');
 800b0d6:	2251      	movs	r2, #81	; 0x51
 800b0d8:	210e      	movs	r1, #14
 800b0da:	2055      	movs	r0, #85	; 0x55
 800b0dc:	f013 fc08 	bl	801e8f0 <TFT_DrawChar>
		sprintf (buffer, "%d", Qa);
 800b0e0:	4642      	mov	r2, r8
 800b0e2:	4925      	ldr	r1, [pc, #148]	; (800b178 <CQS_Axes_Measure+0x1a0>)
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f016 fe53 	bl	8021d90 <siprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b0ea:	2303      	movs	r3, #3
 800b0ec:	4622      	mov	r2, r4
 800b0ee:	210e      	movs	r1, #14
 800b0f0:	207d      	movs	r0, #125	; 0x7d
 800b0f2:	f013 fc55 	bl	801e9a0 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b0f6:	481e      	ldr	r0, [pc, #120]	; (800b170 <CQS_Axes_Measure+0x198>)
 800b0f8:	f013 fb30 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(216, 16, 'p');
 800b0fc:	2270      	movs	r2, #112	; 0x70
 800b0fe:	2110      	movs	r1, #16
 800b100:	20d8      	movs	r0, #216	; 0xd8
 800b102:	f013 fbf5 	bl	801e8f0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b106:	481b      	ldr	r0, [pc, #108]	; (800b174 <CQS_Axes_Measure+0x19c>)
 800b108:	f013 fb28 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(199, 16-2, 'Q');
 800b10c:	2251      	movs	r2, #81	; 0x51
 800b10e:	210e      	movs	r1, #14
 800b110:	20c7      	movs	r0, #199	; 0xc7
 800b112:	f013 fbed 	bl	801e8f0 <TFT_DrawChar>
		sprintf (buffer, "%d", Qp);
 800b116:	463a      	mov	r2, r7
 800b118:	4917      	ldr	r1, [pc, #92]	; (800b178 <CQS_Axes_Measure+0x1a0>)
 800b11a:	4620      	mov	r0, r4
 800b11c:	f016 fe38 	bl	8021d90 <siprintf>
		TFT_DisplayString(252, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b120:	2303      	movs	r3, #3
 800b122:	4622      	mov	r2, r4
 800b124:	210e      	movs	r1, #14
 800b126:	20fc      	movs	r0, #252	; 0xfc
 800b128:	f013 fc3a 	bl	801e9a0 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800b12c:	4810      	ldr	r0, [pc, #64]	; (800b170 <CQS_Axes_Measure+0x198>)
 800b12e:	f013 fb15 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(340, 16-2, 'f');
 800b132:	2266      	movs	r2, #102	; 0x66
 800b134:	210e      	movs	r1, #14
 800b136:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800b13a:	f013 fbd9 	bl	801e8f0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800b13e:	480d      	ldr	r0, [pc, #52]	; (800b174 <CQS_Axes_Measure+0x19c>)
 800b140:	f013 fb0c 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(325, 16-2, 'Q');
 800b144:	2251      	movs	r2, #81	; 0x51
 800b146:	210e      	movs	r1, #14
 800b148:	f240 1045 	movw	r0, #325	; 0x145
 800b14c:	f013 fbd0 	bl	801e8f0 <TFT_DrawChar>
		sprintf (buffer, "%d", Qf);
 800b150:	4632      	mov	r2, r6
 800b152:	4909      	ldr	r1, [pc, #36]	; (800b178 <CQS_Axes_Measure+0x1a0>)
 800b154:	4620      	mov	r0, r4
 800b156:	f016 fe1b 	bl	8021d90 <siprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800b15a:	2303      	movs	r3, #3
 800b15c:	4622      	mov	r2, r4
 800b15e:	210e      	movs	r1, #14
 800b160:	f240 106d 	movw	r0, #365	; 0x16d
 800b164:	f013 fc1c 	bl	801e9a0 <TFT_DisplayString>
		TFT_direction = 0x00;
 800b168:	2300      	movs	r3, #0
 800b16a:	702b      	strb	r3, [r5, #0]
}
 800b16c:	e797      	b.n	800b09e <CQS_Axes_Measure+0xc6>
 800b16e:	bf00      	nop
 800b170:	200001c0 	.word	0x200001c0
 800b174:	200001b0 	.word	0x200001b0
 800b178:	08024471 	.word	0x08024471
 800b17c:	20004c10 	.word	0x20004c10

0800b180 <CQS_Axes_Text>:

void CQS_Axes_Text(uint8_t direction){
 800b180:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800b182:	4604      	mov	r4, r0
 800b184:	2800      	cmp	r0, #0
 800b186:	f040 811f 	bne.w	800b3c8 <CQS_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800b18a:	488e      	ldr	r0, [pc, #568]	; (800b3c4 <CQS_Axes_Text+0x244>)
 800b18c:	f013 fae6 	bl	801e75c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800b190:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b194:	f013 fae8 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b198:	2063      	movs	r0, #99	; 0x63
 800b19a:	f013 faeb 	bl	801e774 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'Q');
 800b19e:	2251      	movs	r2, #81	; 0x51
 800b1a0:	f240 119f 	movw	r1, #415	; 0x19f
 800b1a4:	2018      	movs	r0, #24
 800b1a6:	f013 fba3 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800b1aa:	2231      	movs	r2, #49	; 0x31
 800b1ac:	f240 119f 	movw	r1, #415	; 0x19f
 800b1b0:	201e      	movs	r0, #30
 800b1b2:	f013 fb9d 	bl	801e8f0 <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'Q');
 800b1b6:	2251      	movs	r2, #81	; 0x51
 800b1b8:	f240 119f 	movw	r1, #415	; 0x19f
 800b1bc:	2028      	movs	r0, #40	; 0x28
 800b1be:	f013 fb97 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800b1c2:	2232      	movs	r2, #50	; 0x32
 800b1c4:	f240 119f 	movw	r1, #415	; 0x19f
 800b1c8:	202e      	movs	r0, #46	; 0x2e
 800b1ca:	f013 fb91 	bl	801e8f0 <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'Q');
 800b1ce:	2251      	movs	r2, #81	; 0x51
 800b1d0:	f240 119f 	movw	r1, #415	; 0x19f
 800b1d4:	2038      	movs	r0, #56	; 0x38
 800b1d6:	f013 fb8b 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800b1da:	2233      	movs	r2, #51	; 0x33
 800b1dc:	f240 119f 	movw	r1, #415	; 0x19f
 800b1e0:	203e      	movs	r0, #62	; 0x3e
 800b1e2:	f013 fb85 	bl	801e8f0 <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'Q');
 800b1e6:	2251      	movs	r2, #81	; 0x51
 800b1e8:	f240 119f 	movw	r1, #415	; 0x19f
 800b1ec:	2048      	movs	r0, #72	; 0x48
 800b1ee:	f013 fb7f 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800b1f2:	2234      	movs	r2, #52	; 0x34
 800b1f4:	f240 119f 	movw	r1, #415	; 0x19f
 800b1f8:	204e      	movs	r0, #78	; 0x4e
 800b1fa:	f013 fb79 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'Q');
 800b1fe:	2251      	movs	r2, #81	; 0x51
 800b200:	f240 119f 	movw	r1, #415	; 0x19f
 800b204:	2058      	movs	r0, #88	; 0x58
 800b206:	f013 fb73 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800b20a:	2235      	movs	r2, #53	; 0x35
 800b20c:	f240 119f 	movw	r1, #415	; 0x19f
 800b210:	205e      	movs	r0, #94	; 0x5e
 800b212:	f013 fb6d 	bl	801e8f0 <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'Q');
 800b216:	2251      	movs	r2, #81	; 0x51
 800b218:	f240 119f 	movw	r1, #415	; 0x19f
 800b21c:	2068      	movs	r0, #104	; 0x68
 800b21e:	f013 fb67 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800b222:	2236      	movs	r2, #54	; 0x36
 800b224:	f240 119f 	movw	r1, #415	; 0x19f
 800b228:	206e      	movs	r0, #110	; 0x6e
 800b22a:	f013 fb61 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'Q');
 800b22e:	2251      	movs	r2, #81	; 0x51
 800b230:	f240 119f 	movw	r1, #415	; 0x19f
 800b234:	2078      	movs	r0, #120	; 0x78
 800b236:	f013 fb5b 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800b23a:	2237      	movs	r2, #55	; 0x37
 800b23c:	f240 119f 	movw	r1, #415	; 0x19f
 800b240:	207e      	movs	r0, #126	; 0x7e
 800b242:	f013 fb55 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'Q');
 800b246:	2251      	movs	r2, #81	; 0x51
 800b248:	f240 119f 	movw	r1, #415	; 0x19f
 800b24c:	2088      	movs	r0, #136	; 0x88
 800b24e:	f013 fb4f 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800b252:	2238      	movs	r2, #56	; 0x38
 800b254:	f240 119f 	movw	r1, #415	; 0x19f
 800b258:	208e      	movs	r0, #142	; 0x8e
 800b25a:	f013 fb49 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'Q');
 800b25e:	2251      	movs	r2, #81	; 0x51
 800b260:	f240 119f 	movw	r1, #415	; 0x19f
 800b264:	2098      	movs	r0, #152	; 0x98
 800b266:	f013 fb43 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800b26a:	2239      	movs	r2, #57	; 0x39
 800b26c:	f240 119f 	movw	r1, #415	; 0x19f
 800b270:	209e      	movs	r0, #158	; 0x9e
 800b272:	f013 fb3d 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800b276:	2231      	movs	r2, #49	; 0x31
 800b278:	f240 119f 	movw	r1, #415	; 0x19f
 800b27c:	20ad      	movs	r0, #173	; 0xad
 800b27e:	f013 fb37 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'Q');
 800b282:	2251      	movs	r2, #81	; 0x51
 800b284:	f240 119f 	movw	r1, #415	; 0x19f
 800b288:	20a8      	movs	r0, #168	; 0xa8
 800b28a:	f013 fb31 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800b28e:	2230      	movs	r2, #48	; 0x30
 800b290:	f240 119f 	movw	r1, #415	; 0x19f
 800b294:	20b1      	movs	r0, #177	; 0xb1
 800b296:	f013 fb2b 	bl	801e8f0 <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800b29a:	2231      	movs	r2, #49	; 0x31
 800b29c:	f240 119f 	movw	r1, #415	; 0x19f
 800b2a0:	20bd      	movs	r0, #189	; 0xbd
 800b2a2:	f013 fb25 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'Q');
 800b2a6:	2251      	movs	r2, #81	; 0x51
 800b2a8:	f240 119f 	movw	r1, #415	; 0x19f
 800b2ac:	20b8      	movs	r0, #184	; 0xb8
 800b2ae:	f013 fb1f 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800b2b2:	2231      	movs	r2, #49	; 0x31
 800b2b4:	f240 119f 	movw	r1, #415	; 0x19f
 800b2b8:	20c2      	movs	r0, #194	; 0xc2
 800b2ba:	f013 fb19 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800b2be:	2231      	movs	r2, #49	; 0x31
 800b2c0:	f240 119f 	movw	r1, #415	; 0x19f
 800b2c4:	20cd      	movs	r0, #205	; 0xcd
 800b2c6:	f013 fb13 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'Q');
 800b2ca:	2251      	movs	r2, #81	; 0x51
 800b2cc:	f240 119f 	movw	r1, #415	; 0x19f
 800b2d0:	20c8      	movs	r0, #200	; 0xc8
 800b2d2:	f013 fb0d 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800b2d6:	2232      	movs	r2, #50	; 0x32
 800b2d8:	f240 119f 	movw	r1, #415	; 0x19f
 800b2dc:	20d1      	movs	r0, #209	; 0xd1
 800b2de:	f013 fb07 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800b2e2:	2231      	movs	r2, #49	; 0x31
 800b2e4:	f240 119f 	movw	r1, #415	; 0x19f
 800b2e8:	20dd      	movs	r0, #221	; 0xdd
 800b2ea:	f013 fb01 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'Q');
 800b2ee:	2251      	movs	r2, #81	; 0x51
 800b2f0:	f240 119f 	movw	r1, #415	; 0x19f
 800b2f4:	20d8      	movs	r0, #216	; 0xd8
 800b2f6:	f013 fafb 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800b2fa:	2233      	movs	r2, #51	; 0x33
 800b2fc:	f240 119f 	movw	r1, #415	; 0x19f
 800b300:	20e1      	movs	r0, #225	; 0xe1
 800b302:	f013 faf5 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800b306:	2231      	movs	r2, #49	; 0x31
 800b308:	f240 119f 	movw	r1, #415	; 0x19f
 800b30c:	20ed      	movs	r0, #237	; 0xed
 800b30e:	f013 faef 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'Q');
 800b312:	2251      	movs	r2, #81	; 0x51
 800b314:	f240 119f 	movw	r1, #415	; 0x19f
 800b318:	20e8      	movs	r0, #232	; 0xe8
 800b31a:	f013 fae9 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800b31e:	2234      	movs	r2, #52	; 0x34
 800b320:	f240 119f 	movw	r1, #415	; 0x19f
 800b324:	20f1      	movs	r0, #241	; 0xf1
 800b326:	f013 fae3 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800b32a:	2231      	movs	r2, #49	; 0x31
 800b32c:	f240 119f 	movw	r1, #415	; 0x19f
 800b330:	20fd      	movs	r0, #253	; 0xfd
 800b332:	f013 fadd 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'Q');
 800b336:	2251      	movs	r2, #81	; 0x51
 800b338:	f240 119f 	movw	r1, #415	; 0x19f
 800b33c:	20f8      	movs	r0, #248	; 0xf8
 800b33e:	f013 fad7 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800b342:	2235      	movs	r2, #53	; 0x35
 800b344:	f240 119f 	movw	r1, #415	; 0x19f
 800b348:	f240 1001 	movw	r0, #257	; 0x101
 800b34c:	f013 fad0 	bl	801e8f0 <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800b350:	2230      	movs	r2, #48	; 0x30
 800b352:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800b356:	2005      	movs	r0, #5
 800b358:	f013 faca 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800b35c:	2232      	movs	r2, #50	; 0x32
 800b35e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800b362:	2001      	movs	r0, #1
 800b364:	f013 fac4 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800b368:	2235      	movs	r2, #53	; 0x35
 800b36a:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800b36e:	2007      	movs	r0, #7
 800b370:	f013 fabe 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800b374:	2235      	movs	r2, #53	; 0x35
 800b376:	f240 1101 	movw	r1, #257	; 0x101
 800b37a:	2001      	movs	r0, #1
 800b37c:	f013 fab8 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800b380:	2230      	movs	r2, #48	; 0x30
 800b382:	f240 1101 	movw	r1, #257	; 0x101
 800b386:	2007      	movs	r0, #7
 800b388:	f013 fab2 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800b38c:	2237      	movs	r2, #55	; 0x37
 800b38e:	21b5      	movs	r1, #181	; 0xb5
 800b390:	2001      	movs	r0, #1
 800b392:	f013 faad 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800b396:	2235      	movs	r2, #53	; 0x35
 800b398:	21b5      	movs	r1, #181	; 0xb5
 800b39a:	2007      	movs	r0, #7
 800b39c:	f013 faa8 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	2231      	movs	r2, #49	; 0x31
 800b3a4:	2169      	movs	r1, #105	; 0x69
 800b3a6:	f013 faa3 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800b3aa:	2230      	movs	r2, #48	; 0x30
 800b3ac:	2169      	movs	r1, #105	; 0x69
 800b3ae:	2004      	movs	r0, #4
 800b3b0:	f013 fa9e 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800b3b4:	2230      	movs	r2, #48	; 0x30
 800b3b6:	2169      	movs	r1, #105	; 0x69
 800b3b8:	2009      	movs	r0, #9
		TFT_DrawChar(67, 43, '0');
		

		TFT_direction = 0x00;
	}
}
 800b3ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800b3be:	f013 ba97 	b.w	801e8f0 <TFT_DrawChar>
 800b3c2:	bf00      	nop
 800b3c4:	20000210 	.word	0x20000210
 800b3c8:	4d98      	ldr	r5, [pc, #608]	; (800b62c <CQS_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b3ca:	2801      	cmp	r0, #1
 800b3cc:	bf0c      	ite	eq
 800b3ce:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800b3d0:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800b3d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800b3d6:	bf18      	it	ne
 800b3d8:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800b3da:	f013 f9c5 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b3de:	2063      	movs	r0, #99	; 0x63
 800b3e0:	f013 f9c8 	bl	801e774 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800b3e4:	4892      	ldr	r0, [pc, #584]	; (800b630 <CQS_Axes_Text+0x4b0>)
 800b3e6:	f013 f9b9 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(87, 258, 'Q');
 800b3ea:	2251      	movs	r2, #81	; 0x51
 800b3ec:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b3f0:	2057      	movs	r0, #87	; 0x57
 800b3f2:	f013 fa7d 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800b3f6:	2231      	movs	r2, #49	; 0x31
 800b3f8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b3fc:	205d      	movs	r0, #93	; 0x5d
 800b3fe:	f013 fa77 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'Q');
 800b402:	2251      	movs	r2, #81	; 0x51
 800b404:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b408:	206d      	movs	r0, #109	; 0x6d
 800b40a:	f013 fa71 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800b40e:	2232      	movs	r2, #50	; 0x32
 800b410:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b414:	2073      	movs	r0, #115	; 0x73
 800b416:	f013 fa6b 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'Q');
 800b41a:	2251      	movs	r2, #81	; 0x51
 800b41c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b420:	2083      	movs	r0, #131	; 0x83
 800b422:	f013 fa65 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800b426:	2233      	movs	r2, #51	; 0x33
 800b428:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b42c:	2089      	movs	r0, #137	; 0x89
 800b42e:	f013 fa5f 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'Q');
 800b432:	2251      	movs	r2, #81	; 0x51
 800b434:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b438:	2099      	movs	r0, #153	; 0x99
 800b43a:	f013 fa59 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800b43e:	2234      	movs	r2, #52	; 0x34
 800b440:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b444:	209f      	movs	r0, #159	; 0x9f
 800b446:	f013 fa53 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'Q');
 800b44a:	2251      	movs	r2, #81	; 0x51
 800b44c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b450:	20af      	movs	r0, #175	; 0xaf
 800b452:	f013 fa4d 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800b456:	2235      	movs	r2, #53	; 0x35
 800b458:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b45c:	20b5      	movs	r0, #181	; 0xb5
 800b45e:	f013 fa47 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'Q');
 800b462:	2251      	movs	r2, #81	; 0x51
 800b464:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b468:	20c5      	movs	r0, #197	; 0xc5
 800b46a:	f013 fa41 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800b46e:	2236      	movs	r2, #54	; 0x36
 800b470:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b474:	20cb      	movs	r0, #203	; 0xcb
 800b476:	f013 fa3b 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'Q');
 800b47a:	2251      	movs	r2, #81	; 0x51
 800b47c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b480:	20db      	movs	r0, #219	; 0xdb
 800b482:	f013 fa35 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800b486:	2237      	movs	r2, #55	; 0x37
 800b488:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b48c:	20e1      	movs	r0, #225	; 0xe1
 800b48e:	f013 fa2f 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'Q');
 800b492:	2251      	movs	r2, #81	; 0x51
 800b494:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b498:	20f1      	movs	r0, #241	; 0xf1
 800b49a:	f013 fa29 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800b49e:	2238      	movs	r2, #56	; 0x38
 800b4a0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4a4:	20f7      	movs	r0, #247	; 0xf7
 800b4a6:	f013 fa23 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'Q');
 800b4aa:	2251      	movs	r2, #81	; 0x51
 800b4ac:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4b0:	f240 1007 	movw	r0, #263	; 0x107
 800b4b4:	f013 fa1c 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800b4b8:	2239      	movs	r2, #57	; 0x39
 800b4ba:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4be:	f240 100d 	movw	r0, #269	; 0x10d
 800b4c2:	f013 fa15 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800b4c6:	2231      	movs	r2, #49	; 0x31
 800b4c8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4cc:	f44f 7091 	mov.w	r0, #290	; 0x122
 800b4d0:	f013 fa0e 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'Q');
 800b4d4:	2251      	movs	r2, #81	; 0x51
 800b4d6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4da:	f240 101d 	movw	r0, #285	; 0x11d
 800b4de:	f013 fa07 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800b4e2:	2230      	movs	r2, #48	; 0x30
 800b4e4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4e8:	f44f 7093 	mov.w	r0, #294	; 0x126
 800b4ec:	f013 fa00 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800b4f0:	2231      	movs	r2, #49	; 0x31
 800b4f2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b4f6:	f44f 709c 	mov.w	r0, #312	; 0x138
 800b4fa:	f013 f9f9 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'Q');
 800b4fe:	2251      	movs	r2, #81	; 0x51
 800b500:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b504:	f240 1033 	movw	r0, #307	; 0x133
 800b508:	f013 f9f2 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800b50c:	2231      	movs	r2, #49	; 0x31
 800b50e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b512:	f240 103d 	movw	r0, #317	; 0x13d
 800b516:	f013 f9eb 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800b51a:	2231      	movs	r2, #49	; 0x31
 800b51c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b520:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800b524:	f013 f9e4 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'Q');
 800b528:	2251      	movs	r2, #81	; 0x51
 800b52a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b52e:	f240 1049 	movw	r0, #329	; 0x149
 800b532:	f013 f9dd 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800b536:	2232      	movs	r2, #50	; 0x32
 800b538:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b53c:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800b540:	f013 f9d6 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800b544:	2231      	movs	r2, #49	; 0x31
 800b546:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b54a:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800b54e:	f013 f9cf 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'Q');
 800b552:	2251      	movs	r2, #81	; 0x51
 800b554:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b558:	f240 105f 	movw	r0, #351	; 0x15f
 800b55c:	f013 f9c8 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800b560:	2233      	movs	r2, #51	; 0x33
 800b562:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b566:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800b56a:	f013 f9c1 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800b56e:	2231      	movs	r2, #49	; 0x31
 800b570:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b574:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800b578:	f013 f9ba 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'Q');
 800b57c:	2251      	movs	r2, #81	; 0x51
 800b57e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b582:	f240 1075 	movw	r0, #373	; 0x175
 800b586:	f013 f9b3 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800b58a:	2234      	movs	r2, #52	; 0x34
 800b58c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b590:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800b594:	f013 f9ac 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800b598:	2231      	movs	r2, #49	; 0x31
 800b59a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b59e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b5a2:	f013 f9a5 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'Q');
 800b5a6:	2251      	movs	r2, #81	; 0x51
 800b5a8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5ac:	f240 108b 	movw	r0, #395	; 0x18b
 800b5b0:	f013 f99e 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800b5b4:	2235      	movs	r2, #53	; 0x35
 800b5b6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800b5ba:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800b5be:	f013 f997 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800b5c2:	2230      	movs	r2, #48	; 0x30
 800b5c4:	21fa      	movs	r1, #250	; 0xfa
 800b5c6:	2041      	movs	r0, #65	; 0x41
 800b5c8:	f013 f992 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800b5cc:	2232      	movs	r2, #50	; 0x32
 800b5ce:	21ca      	movs	r1, #202	; 0xca
 800b5d0:	203a      	movs	r0, #58	; 0x3a
 800b5d2:	f013 f98d 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800b5d6:	2235      	movs	r2, #53	; 0x35
 800b5d8:	21ca      	movs	r1, #202	; 0xca
 800b5da:	2041      	movs	r0, #65	; 0x41
 800b5dc:	f013 f988 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800b5e0:	2235      	movs	r2, #53	; 0x35
 800b5e2:	2195      	movs	r1, #149	; 0x95
 800b5e4:	203a      	movs	r0, #58	; 0x3a
 800b5e6:	f013 f983 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800b5ea:	2230      	movs	r2, #48	; 0x30
 800b5ec:	2195      	movs	r1, #149	; 0x95
 800b5ee:	2041      	movs	r0, #65	; 0x41
 800b5f0:	f013 f97e 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800b5f4:	2237      	movs	r2, #55	; 0x37
 800b5f6:	2160      	movs	r1, #96	; 0x60
 800b5f8:	203a      	movs	r0, #58	; 0x3a
 800b5fa:	f013 f979 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800b5fe:	2235      	movs	r2, #53	; 0x35
 800b600:	2160      	movs	r1, #96	; 0x60
 800b602:	2041      	movs	r0, #65	; 0x41
 800b604:	f013 f974 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800b608:	2231      	movs	r2, #49	; 0x31
 800b60a:	212b      	movs	r1, #43	; 0x2b
 800b60c:	2039      	movs	r0, #57	; 0x39
 800b60e:	f013 f96f 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800b612:	2230      	movs	r2, #48	; 0x30
 800b614:	212b      	movs	r1, #43	; 0x2b
 800b616:	203e      	movs	r0, #62	; 0x3e
 800b618:	f013 f96a 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800b61c:	2230      	movs	r2, #48	; 0x30
 800b61e:	212b      	movs	r1, #43	; 0x2b
 800b620:	2043      	movs	r0, #67	; 0x43
 800b622:	f013 f965 	bl	801e8f0 <TFT_DrawChar>
		TFT_direction = 0x00;
 800b626:	2300      	movs	r3, #0
 800b628:	702b      	strb	r3, [r5, #0]
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	20004c10 	.word	0x20004c10
 800b630:	20000210 	.word	0x20000210

0800b634 <CQS_chart>:

void CQS_chart(uint8_t direction, uint8_t *GraphData)
{
 800b634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b638:	ed2d 8b04 	vpush	{d8-d9}
 800b63c:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800b63e:	ad06      	add	r5, sp, #24
 800b640:	2300      	movs	r3, #0
{
 800b642:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800b644:	f825 3d04 	strh.w	r3, [r5, #-4]!
 800b648:	ed9f 8ae1 	vldr	s16, [pc, #900]	; 800b9d0 <CQS_chart+0x39c>
 800b64c:	1e4e      	subs	r6, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800b64e:	2800      	cmp	r0, #0
 800b650:	f040 81ca 	bne.w	800b9e8 <CQS_chart+0x3b4>
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800b654:	780b      	ldrb	r3, [r1, #0]
 800b656:	ed9f 9adf 	vldr	s18, [pc, #892]	; 800b9d4 <CQS_chart+0x3a0>
 800b65a:	eddf 8adf 	vldr	s17, [pc, #892]	; 800b9d8 <CQS_chart+0x3a4>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800b65e:	4fdf      	ldr	r7, [pc, #892]	; (800b9dc <CQS_chart+0x3a8>)
		TFT_FillRectangle(24, 410-(float)GraphData[0]/100*305, 34, 410, CQS_COLOR_Q1);
 800b660:	ee07 3a90 	vmov	s15, r3
 800b664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b668:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800b66c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b670:	9300      	str	r3, [sp, #0]
 800b672:	2222      	movs	r2, #34	; 0x22
 800b674:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b678:	2018      	movs	r0, #24
 800b67a:	eef0 7a49 	vmov.f32	s15, s18
 800b67e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b686:	edcd 7a03 	vstr	s15, [sp, #12]
 800b68a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b68e:	f012 fe3c 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(float)GraphData[1]/100*305, 50, 410, CQS_COLOR_Q2);
 800b692:	7863      	ldrb	r3, [r4, #1]
 800b694:	ee07 3a90 	vmov	s15, r3
 800b698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b69c:	f645 2392 	movw	r3, #23186	; 0x5a92
 800b6a0:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	2232      	movs	r2, #50	; 0x32
 800b6a8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b6ac:	2028      	movs	r0, #40	; 0x28
 800b6ae:	eef0 7a49 	vmov.f32	s15, s18
 800b6b2:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b6b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6ba:	edcd 7a03 	vstr	s15, [sp, #12]
 800b6be:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b6c2:	f012 fe22 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(float)GraphData[2]/100*305, 66, 410, CQS_COLOR_Q3);
 800b6c6:	78a3      	ldrb	r3, [r4, #2]
 800b6c8:	ee07 3a90 	vmov	s15, r3
 800b6cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6d0:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800b6d4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b6d8:	9300      	str	r3, [sp, #0]
 800b6da:	2242      	movs	r2, #66	; 0x42
 800b6dc:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b6e0:	2038      	movs	r0, #56	; 0x38
 800b6e2:	eef0 7a49 	vmov.f32	s15, s18
 800b6e6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b6ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6ee:	edcd 7a03 	vstr	s15, [sp, #12]
 800b6f2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b6f6:	f012 fe08 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(float)GraphData[3]/100*305, 82, 410, CQS_COLOR_Q4);
 800b6fa:	78e3      	ldrb	r3, [r4, #3]
 800b6fc:	ee07 3a90 	vmov	s15, r3
 800b700:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b704:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800b708:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	2252      	movs	r2, #82	; 0x52
 800b710:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b714:	2048      	movs	r0, #72	; 0x48
 800b716:	eef0 7a49 	vmov.f32	s15, s18
 800b71a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b71e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b722:	edcd 7a03 	vstr	s15, [sp, #12]
 800b726:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b72a:	f012 fdee 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(float)GraphData[4]/100*305, 98, 410, CQS_COLOR_Q5);
 800b72e:	7923      	ldrb	r3, [r4, #4]
 800b730:	ee07 3a90 	vmov	s15, r3
 800b734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b738:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800b73c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	2262      	movs	r2, #98	; 0x62
 800b744:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b748:	2058      	movs	r0, #88	; 0x58
 800b74a:	eef0 7a49 	vmov.f32	s15, s18
 800b74e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b756:	edcd 7a03 	vstr	s15, [sp, #12]
 800b75a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b75e:	f012 fdd4 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(float)GraphData[5]/100*305, 114, 410, CQS_COLOR_Q6);
 800b762:	7963      	ldrb	r3, [r4, #5]
 800b764:	ee07 3a90 	vmov	s15, r3
 800b768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b76c:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800b770:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	2272      	movs	r2, #114	; 0x72
 800b778:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b77c:	2068      	movs	r0, #104	; 0x68
 800b77e:	eef0 7a49 	vmov.f32	s15, s18
 800b782:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b786:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b78a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b78e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b792:	f012 fdba 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(float)GraphData[6]/100*305, 130, 410, CQS_COLOR_Q7);
 800b796:	79a3      	ldrb	r3, [r4, #6]
 800b798:	ee07 3a90 	vmov	s15, r3
 800b79c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a0:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800b7a4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b7a8:	9300      	str	r3, [sp, #0]
 800b7aa:	2282      	movs	r2, #130	; 0x82
 800b7ac:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b7b0:	2078      	movs	r0, #120	; 0x78
 800b7b2:	eef0 7a49 	vmov.f32	s15, s18
 800b7b6:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b7ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7be:	edcd 7a03 	vstr	s15, [sp, #12]
 800b7c2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b7c6:	f012 fda0 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(float)GraphData[7]/100*305, 146, 410, CQS_COLOR_Q8);
 800b7ca:	79e3      	ldrb	r3, [r4, #7]
 800b7cc:	ee07 3a90 	vmov	s15, r3
 800b7d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d4:	f247 5369 	movw	r3, #30057	; 0x7569
 800b7d8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	2292      	movs	r2, #146	; 0x92
 800b7e0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b7e4:	2088      	movs	r0, #136	; 0x88
 800b7e6:	eef0 7a49 	vmov.f32	s15, s18
 800b7ea:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b7ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7f2:	edcd 7a03 	vstr	s15, [sp, #12]
 800b7f6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b7fa:	f012 fd86 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(float)GraphData[8]/100*305, 162, 410, CQS_COLOR_Q9);
 800b7fe:	7a23      	ldrb	r3, [r4, #8]
 800b800:	ee07 3a90 	vmov	s15, r3
 800b804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b808:	f24b 6307 	movw	r3, #46599	; 0xb607
 800b80c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	22a2      	movs	r2, #162	; 0xa2
 800b814:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b818:	2098      	movs	r0, #152	; 0x98
 800b81a:	eef0 7a49 	vmov.f32	s15, s18
 800b81e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b826:	edcd 7a03 	vstr	s15, [sp, #12]
 800b82a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b82e:	f012 fd6c 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(float)GraphData[9]/100*305, 178, 410, CQS_COLOR_Q10);
 800b832:	7a63      	ldrb	r3, [r4, #9]
 800b834:	ee07 3a90 	vmov	s15, r3
 800b838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b83c:	f64e 6325 	movw	r3, #60965	; 0xee25
 800b840:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b844:	9300      	str	r3, [sp, #0]
 800b846:	22b2      	movs	r2, #178	; 0xb2
 800b848:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b84c:	20a8      	movs	r0, #168	; 0xa8
 800b84e:	eef0 7a49 	vmov.f32	s15, s18
 800b852:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b856:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b85a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b85e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b862:	f012 fd52 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(float)GraphData[10]/100*305, 194, 410, CQS_COLOR_Q11);
 800b866:	7aa3      	ldrb	r3, [r4, #10]
 800b868:	ee07 3a90 	vmov	s15, r3
 800b86c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b870:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800b874:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	22c2      	movs	r2, #194	; 0xc2
 800b87c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b880:	20b8      	movs	r0, #184	; 0xb8
 800b882:	eef0 7a49 	vmov.f32	s15, s18
 800b886:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b88a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b88e:	edcd 7a03 	vstr	s15, [sp, #12]
 800b892:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b896:	f012 fd38 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(float)GraphData[11]/100*305, 210, 410, CQS_COLOR_Q12);
 800b89a:	7ae3      	ldrb	r3, [r4, #11]
 800b89c:	ee07 3a90 	vmov	s15, r3
 800b8a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a4:	f64e 4347 	movw	r3, #60487	; 0xec47
 800b8a8:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	22d2      	movs	r2, #210	; 0xd2
 800b8b0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b8b4:	20c8      	movs	r0, #200	; 0xc8
 800b8b6:	eef0 7a49 	vmov.f32	s15, s18
 800b8ba:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b8be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8c2:	edcd 7a03 	vstr	s15, [sp, #12]
 800b8c6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b8ca:	f012 fd1e 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(float)GraphData[12]/100*305, 226, 410, CQS_COLOR_Q13);
 800b8ce:	7b23      	ldrb	r3, [r4, #12]
 800b8d0:	ee07 3a90 	vmov	s15, r3
 800b8d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8d8:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800b8dc:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	22e2      	movs	r2, #226	; 0xe2
 800b8e4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b8e8:	20d8      	movs	r0, #216	; 0xd8
 800b8ea:	eef0 7a49 	vmov.f32	s15, s18
 800b8ee:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b8f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b8f6:	edcd 7a03 	vstr	s15, [sp, #12]
 800b8fa:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b8fe:	f012 fd04 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(float)GraphData[13]/100*305, 242, 410, CQS_COLOR_Q14);
 800b902:	7b63      	ldrb	r3, [r4, #13]
 800b904:	ee07 3a90 	vmov	s15, r3
 800b908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b90c:	f64a 1347 	movw	r3, #43335	; 0xa947
 800b910:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b914:	9300      	str	r3, [sp, #0]
 800b916:	22f2      	movs	r2, #242	; 0xf2
 800b918:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800b91c:	20e8      	movs	r0, #232	; 0xe8
 800b91e:	eef0 7a49 	vmov.f32	s15, s18
 800b922:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b92a:	edcd 7a03 	vstr	s15, [sp, #12]
 800b92e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b932:	f012 fcea 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800b936:	7ba3      	ldrb	r3, [r4, #14]
 800b938:	ee07 3a90 	vmov	s15, r3
 800b93c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b940:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800b944:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b948:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b94c:	9300      	str	r3, [sp, #0]
 800b94e:	20f8      	movs	r0, #248	; 0xf8
 800b950:	f44f 73cd 	mov.w	r3, #410	; 0x19a
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b954:	2418      	movs	r4, #24
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800b956:	eea7 9a68 	vfms.f32	s18, s14, s17
 800b95a:	eefc 7ac9 	vcvt.u32.f32	s15, s18
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800b95e:	ed9f 9a20 	vldr	s18, [pc, #128]	; 800b9e0 <CQS_chart+0x3ac>
		TFT_FillRectangle(248, 410-(float)GraphData[14]/100*305, 258, 410, CQS_COLOR_Q15);
 800b962:	edcd 7a03 	vstr	s15, [sp, #12]
 800b966:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b96a:	f012 fcce 	bl	801e30a <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800b96e:	481d      	ldr	r0, [pc, #116]	; (800b9e4 <CQS_chart+0x3b0>)
 800b970:	f012 fef4 	bl	801e75c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800b974:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800b978:	f012 fef6 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800b97c:	2063      	movs	r0, #99	; 0x63
 800b97e:	f012 fef9 	bl	801e774 <TFT_SetBackColor>
			sprintf (buffer, "%d", GraphData[i]);
 800b982:	7872      	ldrb	r2, [r6, #1]
 800b984:	4639      	mov	r1, r7
 800b986:	4628      	mov	r0, r5
 800b988:	f016 fa02 	bl	8021d90 <siprintf>
			TFT_DisplayString(24+X, 400-(float)GraphData[i]/100*305, (uint8_t *)buffer, LEFT_MODE);
 800b98c:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800b990:	ee07 3a90 	vmov	s15, r3
 800b994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b998:	4620      	mov	r0, r4
 800b99a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800b99e:	3410      	adds	r4, #16
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	462a      	mov	r2, r5
 800b9a4:	b2a4      	uxth	r4, r4
 800b9a6:	eef0 7a49 	vmov.f32	s15, s18
 800b9aa:	eee7 7a68 	vfms.f32	s15, s14, s17
 800b9ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9b2:	edcd 7a03 	vstr	s15, [sp, #12]
 800b9b6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800b9ba:	f012 fff1 	bl	801e9a0 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800b9be:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800b9c2:	d1de      	bne.n	800b982 <CQS_chart+0x34e>
			X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800b9c4:	b006      	add	sp, #24
 800b9c6:	ecbd 8b04 	vpop	{d8-d9}
 800b9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ce:	bf00      	nop
 800b9d0:	42c80000 	.word	0x42c80000
 800b9d4:	43cd0000 	.word	0x43cd0000
 800b9d8:	43988000 	.word	0x43988000
 800b9dc:	08024471 	.word	0x08024471
 800b9e0:	43c80000 	.word	0x43c80000
 800b9e4:	20000210 	.word	0x20000210
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b9e8:	2801      	cmp	r0, #1
 800b9ea:	4fdf      	ldr	r7, [pc, #892]	; (800bd68 <CQS_chart+0x734>)
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800b9ec:	eddf 8adf 	vldr	s17, [pc, #892]	; 800bd6c <CQS_chart+0x738>
		if(direction == 0x01){TFT_direction = 0x01;} 
 800b9f0:	bf0e      	itee	eq
 800b9f2:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800b9f4:	2302      	movne	r3, #2
 800b9f6:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800b9f8:	780b      	ldrb	r3, [r1, #0]
 800b9fa:	ed9f 9add 	vldr	s18, [pc, #884]	; 800bd70 <CQS_chart+0x73c>
			sprintf (buffer, "%d", GraphData[i]);
 800b9fe:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800bd80 <CQS_chart+0x74c>
		TFT_FillRectangle(87, 252-(float)GraphData[0]/100*210, 98, 	 252, CQS_COLOR_Q1);
 800ba02:	ee07 3a90 	vmov	s15, r3
 800ba06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba0a:	f647 232f 	movw	r3, #31279	; 0x7a2f
 800ba0e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba12:	9300      	str	r3, [sp, #0]
 800ba14:	2262      	movs	r2, #98	; 0x62
 800ba16:	23fc      	movs	r3, #252	; 0xfc
 800ba18:	2057      	movs	r0, #87	; 0x57
 800ba1a:	eef0 7a68 	vmov.f32	s15, s17
 800ba1e:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ba22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba26:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba2a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ba2e:	f012 fc6c 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(109, 252-(float)GraphData[1]/100*210, 120, 252, CQS_COLOR_Q2);
 800ba32:	7863      	ldrb	r3, [r4, #1]
 800ba34:	ee07 3a90 	vmov	s15, r3
 800ba38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba3c:	f645 2392 	movw	r3, #23186	; 0x5a92
 800ba40:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	2278      	movs	r2, #120	; 0x78
 800ba48:	23fc      	movs	r3, #252	; 0xfc
 800ba4a:	206d      	movs	r0, #109	; 0x6d
 800ba4c:	eef0 7a68 	vmov.f32	s15, s17
 800ba50:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ba54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba58:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba5c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ba60:	f012 fc53 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(131, 252-(float)GraphData[2]/100*210, 142, 252, CQS_COLOR_Q3);
 800ba64:	78a3      	ldrb	r3, [r4, #2]
 800ba66:	ee07 3a90 	vmov	s15, r3
 800ba6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba6e:	f242 23b2 	movw	r3, #8882	; 0x22b2
 800ba72:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800ba76:	9300      	str	r3, [sp, #0]
 800ba78:	228e      	movs	r2, #142	; 0x8e
 800ba7a:	23fc      	movs	r3, #252	; 0xfc
 800ba7c:	2083      	movs	r0, #131	; 0x83
 800ba7e:	eef0 7a68 	vmov.f32	s15, s17
 800ba82:	eee7 7a49 	vfms.f32	s15, s14, s18
 800ba86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba8a:	edcd 7a03 	vstr	s15, [sp, #12]
 800ba8e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800ba92:	f012 fc3a 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(153, 252-(float)GraphData[3]/100*210, 164, 252, CQS_COLOR_Q4);
 800ba96:	78e3      	ldrb	r3, [r4, #3]
 800ba98:	ee07 3a90 	vmov	s15, r3
 800ba9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baa0:	f44f 7375 	mov.w	r3, #980	; 0x3d4
 800baa4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	22a4      	movs	r2, #164	; 0xa4
 800baac:	23fc      	movs	r3, #252	; 0xfc
 800baae:	2099      	movs	r0, #153	; 0x99
 800bab0:	eef0 7a68 	vmov.f32	s15, s17
 800bab4:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bab8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800babc:	edcd 7a03 	vstr	s15, [sp, #12]
 800bac0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bac4:	f012 fc21 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(175, 252-(float)GraphData[4]/100*210, 186, 252, CQS_COLOR_Q5);
 800bac8:	7923      	ldrb	r3, [r4, #4]
 800baca:	ee07 3a90 	vmov	s15, r3
 800bace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bad2:	f240 43d4 	movw	r3, #1236	; 0x4d4
 800bad6:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bada:	9300      	str	r3, [sp, #0]
 800badc:	22ba      	movs	r2, #186	; 0xba
 800bade:	23fc      	movs	r3, #252	; 0xfc
 800bae0:	20af      	movs	r0, #175	; 0xaf
 800bae2:	eef0 7a68 	vmov.f32	s15, s17
 800bae6:	eee7 7a49 	vfms.f32	s15, s14, s18
 800baea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baee:	edcd 7a03 	vstr	s15, [sp, #12]
 800baf2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800baf6:	f012 fc08 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(197, 252-(float)GraphData[5]/100*210, 208, 252, CQS_COLOR_Q6);
 800bafa:	7963      	ldrb	r3, [r4, #5]
 800bafc:	ee07 3a90 	vmov	s15, r3
 800bb00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb04:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 800bb08:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb0c:	9300      	str	r3, [sp, #0]
 800bb0e:	22d0      	movs	r2, #208	; 0xd0
 800bb10:	23fc      	movs	r3, #252	; 0xfc
 800bb12:	20c5      	movs	r0, #197	; 0xc5
 800bb14:	eef0 7a68 	vmov.f32	s15, s17
 800bb18:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bb1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb20:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb24:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb28:	f012 fbef 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(219, 252-(float)GraphData[6]/100*210, 230, 252, CQS_COLOR_Q7);
 800bb2c:	79a3      	ldrb	r3, [r4, #6]
 800bb2e:	ee07 3a90 	vmov	s15, r3
 800bb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb36:	f240 43eb 	movw	r3, #1259	; 0x4eb
 800bb3a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	22e6      	movs	r2, #230	; 0xe6
 800bb42:	23fc      	movs	r3, #252	; 0xfc
 800bb44:	20db      	movs	r0, #219	; 0xdb
 800bb46:	eef0 7a68 	vmov.f32	s15, s17
 800bb4a:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bb4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb52:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb56:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb5a:	f012 fbd6 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(241, 252-(float)GraphData[7]/100*210, 252, 252, CQS_COLOR_Q8);
 800bb5e:	79e3      	ldrb	r3, [r4, #7]
 800bb60:	ee07 3a90 	vmov	s15, r3
 800bb64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb68:	f247 5369 	movw	r3, #30057	; 0x7569
 800bb6c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	23fc      	movs	r3, #252	; 0xfc
 800bb74:	461a      	mov	r2, r3
 800bb76:	20f1      	movs	r0, #241	; 0xf1
 800bb78:	eef0 7a68 	vmov.f32	s15, s17
 800bb7c:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bb80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb84:	edcd 7a03 	vstr	s15, [sp, #12]
 800bb88:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bb8c:	f012 fbbd 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(263, 252-(float)GraphData[8]/100*210, 274, 252, CQS_COLOR_Q9);
 800bb90:	7a23      	ldrb	r3, [r4, #8]
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9a:	f24b 6307 	movw	r3, #46599	; 0xb607
 800bb9e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bba8:	23fc      	movs	r3, #252	; 0xfc
 800bbaa:	f240 1007 	movw	r0, #263	; 0x107
 800bbae:	eef0 7a68 	vmov.f32	s15, s17
 800bbb2:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bbb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbba:	edcd 7a03 	vstr	s15, [sp, #12]
 800bbbe:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bbc2:	f012 fba2 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(285, 252-(float)GraphData[9]/100*210, 296, 252, CQS_COLOR_Q10);
 800bbc6:	7a63      	ldrb	r3, [r4, #9]
 800bbc8:	ee07 3a90 	vmov	s15, r3
 800bbcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbd0:	f64e 6325 	movw	r3, #60965	; 0xee25
 800bbd4:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	f44f 7294 	mov.w	r2, #296	; 0x128
 800bbde:	23fc      	movs	r3, #252	; 0xfc
 800bbe0:	f240 101d 	movw	r0, #285	; 0x11d
 800bbe4:	eef0 7a68 	vmov.f32	s15, s17
 800bbe8:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bbec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbf0:	edcd 7a03 	vstr	s15, [sp, #12]
 800bbf4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bbf8:	f012 fb87 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(307, 252-(float)GraphData[10]/100*210,318, 252, CQS_COLOR_Q11);
 800bbfc:	7aa3      	ldrb	r3, [r4, #10]
 800bbfe:	ee07 3a90 	vmov	s15, r3
 800bc02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc06:	f24d 43a3 	movw	r3, #54435	; 0xd4a3
 800bc0a:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc0e:	9300      	str	r3, [sp, #0]
 800bc10:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800bc14:	23fc      	movs	r3, #252	; 0xfc
 800bc16:	f240 1033 	movw	r0, #307	; 0x133
 800bc1a:	eef0 7a68 	vmov.f32	s15, s17
 800bc1e:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bc22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc26:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc2a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc2e:	f012 fb6c 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(329, 252-(float)GraphData[11]/100*210,340, 252, CQS_COLOR_Q12);
 800bc32:	7ae3      	ldrb	r3, [r4, #11]
 800bc34:	ee07 3a90 	vmov	s15, r3
 800bc38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc3c:	f64e 4347 	movw	r3, #60487	; 0xec47
 800bc40:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc44:	9300      	str	r3, [sp, #0]
 800bc46:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800bc4a:	23fc      	movs	r3, #252	; 0xfc
 800bc4c:	f240 1049 	movw	r0, #329	; 0x149
 800bc50:	eef0 7a68 	vmov.f32	s15, s17
 800bc54:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bc58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc5c:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc60:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc64:	f012 fb51 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(351, 252-(float)GraphData[12]/100*210,362, 252, CQS_COLOR_Q13);
 800bc68:	7b23      	ldrb	r3, [r4, #12]
 800bc6a:	ee07 3a90 	vmov	s15, r3
 800bc6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc72:	f64d 3348 	movw	r3, #56136	; 0xdb48
 800bc76:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800bc80:	23fc      	movs	r3, #252	; 0xfc
 800bc82:	f240 105f 	movw	r0, #351	; 0x15f
 800bc86:	eef0 7a68 	vmov.f32	s15, s17
 800bc8a:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bc8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc92:	edcd 7a03 	vstr	s15, [sp, #12]
 800bc96:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bc9a:	f012 fb36 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(373, 252-(float)GraphData[13]/100*210,384, 252, CQS_COLOR_Q14);
 800bc9e:	7b63      	ldrb	r3, [r4, #13]
 800bca0:	ee07 3a90 	vmov	s15, r3
 800bca4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bca8:	f64a 1347 	movw	r3, #43335	; 0xa947
 800bcac:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800bcb6:	23fc      	movs	r3, #252	; 0xfc
 800bcb8:	f240 1075 	movw	r0, #373	; 0x175
 800bcbc:	eef0 7a68 	vmov.f32	s15, s17
 800bcc0:	eee7 7a49 	vfms.f32	s15, s14, s18
 800bcc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcc8:	edcd 7a03 	vstr	s15, [sp, #12]
 800bccc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bcd0:	f012 fb1b 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800bcd4:	7ba3      	ldrb	r3, [r4, #14]
 800bcd6:	ee07 3a90 	vmov	s15, r3
 800bcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcde:	f649 13ab 	movw	r3, #39339	; 0x99ab
 800bce2:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800bcec:	23fc      	movs	r3, #252	; 0xfc
 800bcee:	f240 108b 	movw	r0, #395	; 0x18b
 800bcf2:	2457      	movs	r4, #87	; 0x57
 800bcf4:	eee7 8a49 	vfms.f32	s17, s14, s18
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800bcf8:	ed9f 9a1e 	vldr	s18, [pc, #120]	; 800bd74 <CQS_chart+0x740>
		TFT_FillRectangle(395, 252-(float)GraphData[14]/100*210,406, 252, CQS_COLOR_Q15);
 800bcfc:	eefc 7ae8 	vcvt.u32.f32	s15, s17
 800bd00:	eddf 8a1d 	vldr	s17, [pc, #116]	; 800bd78 <CQS_chart+0x744>
 800bd04:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd08:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd0c:	f012 fafd 	bl	801e30a <TFT_FillRectangle>
			sprintf (buffer, "%d", GraphData[i]);
 800bd10:	7872      	ldrb	r2, [r6, #1]
 800bd12:	4641      	mov	r1, r8
 800bd14:	4628      	mov	r0, r5
 800bd16:	f016 f83b 	bl	8021d90 <siprintf>
			TFT_DisplayString(87+X, (GraphData[i]< 10) ? 243-(float)GraphData[i]/100*215 : 250-(float)GraphData[i]/100*215, (uint8_t *)buffer, LEFT_MODE);
 800bd1a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 800bd1e:	ee07 3a90 	vmov	s15, r3
 800bd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd26:	2b09      	cmp	r3, #9
 800bd28:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800bd2c:	f04f 0303 	mov.w	r3, #3
 800bd30:	4620      	mov	r0, r4
 800bd32:	462a      	mov	r2, r5
 800bd34:	f104 0416 	add.w	r4, r4, #22
 800bd38:	b2a4      	uxth	r4, r4
 800bd3a:	bf94      	ite	ls
 800bd3c:	eddf 7a0f 	vldrls	s15, [pc, #60]	; 800bd7c <CQS_chart+0x748>
 800bd40:	eef0 7a49 	vmovhi.f32	s15, s18
 800bd44:	eee7 7a68 	vfms.f32	s15, s14, s17
 800bd48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd4c:	edcd 7a03 	vstr	s15, [sp, #12]
 800bd50:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800bd54:	f012 fe24 	bl	801e9a0 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800bd58:	f240 13a1 	movw	r3, #417	; 0x1a1
 800bd5c:	429c      	cmp	r4, r3
 800bd5e:	d1d7      	bne.n	800bd10 <CQS_chart+0x6dc>
		TFT_direction = 0x00;
 800bd60:	2300      	movs	r3, #0
 800bd62:	703b      	strb	r3, [r7, #0]
}
 800bd64:	e62e      	b.n	800b9c4 <CQS_chart+0x390>
 800bd66:	bf00      	nop
 800bd68:	20004c10 	.word	0x20004c10
 800bd6c:	437c0000 	.word	0x437c0000
 800bd70:	43520000 	.word	0x43520000
 800bd74:	437a0000 	.word	0x437a0000
 800bd78:	43570000 	.word	0x43570000
 800bd7c:	43730000 	.word	0x43730000
 800bd80:	08024471 	.word	0x08024471

0800bd84 <CQS_Draw>:

void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bd84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bd88:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bd8a:	2363      	movs	r3, #99	; 0x63
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bd8c:	4604      	mov	r4, r0
 800bd8e:	4688      	mov	r8, r1
 800bd90:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bd92:	213a      	movs	r1, #58	; 0x3a
 800bd94:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800bd98:	9300      	str	r3, [sp, #0]
 800bd9a:	2005      	movs	r0, #5
 800bd9c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CQS_Draw(uint8_t direction, uint8_t *GraphData, uint8_t Qa, uint8_t Qp, uint8_t Qf){
 800bda0:	f89d 7020 	ldrb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800bda4:	f012 fab1 	bl	801e30a <TFT_FillRectangle>
	CQS_Axes(direction);
 800bda8:	4620      	mov	r0, r4
 800bdaa:	f7ff f877 	bl	800ae9c <CQS_Axes>
	CQS_Axes_Text(direction);
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f7ff f9e6 	bl	800b180 <CQS_Axes_Text>
	CQS_chart(direction, GraphData);
 800bdb4:	4641      	mov	r1, r8
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	f7ff fc3c 	bl	800b634 <CQS_chart>
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800bdbc:	463b      	mov	r3, r7
 800bdbe:	4632      	mov	r2, r6
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	b002      	add	sp, #8
 800bdc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CQS_Axes_Measure(direction, Qa, Qp, Qf);
 800bdca:	f7ff b905 	b.w	800afd8 <CQS_Axes_Measure>

0800bdce <flash_data_read_buff>:
#include "CRC_check.h"

uint64_t flash_data_read_buff(uint32_t flash_addr_buff) 
{ 
	return ( *(__IO uint64_t*) flash_addr_buff);
}
 800bdce:	e9d0 0100 	ldrd	r0, r1, [r0]
 800bdd2:	4770      	bx	lr

0800bdd4 <CRC_Check>:
uint32_t addr_i;

CRC_Check_StatusTypeDef CRC_Check(uint32_t start_flash_addr, uint32_t flash_size, uint32_t CRC_addr)
{

	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800bdd4:	4b13      	ldr	r3, [pc, #76]	; (800be24 <CRC_Check+0x50>)
{
 800bdd6:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800bdda:	4e13      	ldr	r6, [pc, #76]	; (800be28 <CRC_Check+0x54>)
	for (addr_i = start_flash_addr; addr_i < start_flash_addr + (flash_size*8); addr_i+=8)
 800bddc:	6018      	str	r0, [r3, #0]
 800bdde:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800bde2:	2400      	movs	r4, #0
 800bde4:	4281      	cmp	r1, r0
 800bde6:	d811      	bhi.n	800be0c <CRC_Check+0x38>
 800bde8:	b104      	cbz	r4, 800bdec <CRC_Check+0x18>
 800bdea:	6018      	str	r0, [r3, #0]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800bdec:	e9d2 0100 	ldrd	r0, r1, [r2]
	{
		CRC_buff += flash_data_read_buff(addr_i);
	}
	crcr_flash = flash_data_read_buff(CRC_addr);
 800bdf0:	4b0e      	ldr	r3, [pc, #56]	; (800be2c <CRC_Check+0x58>)
 800bdf2:	e9c3 0100 	strd	r0, r1, [r3]
	
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800bdf6:	e9d6 0100 	ldrd	r0, r1, [r6]
	return ( *(__IO uint64_t*) flash_addr_buff);
 800bdfa:	e9d2 2300 	ldrd	r2, r3, [r2]
	if(CRC_buff == flash_data_read_buff(CRC_addr))
 800bdfe:	4299      	cmp	r1, r3
 800be00:	bf0a      	itet	eq
 800be02:	4290      	cmpeq	r0, r2
		return	CRC_OK;
	} else
	{
		return	CRC_ERROR;
	}
};
 800be04:	2001      	movne	r0, #1
 800be06:	2000      	moveq	r0, #0
 800be08:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	return ( *(__IO uint64_t*) flash_addr_buff);
 800be0c:	e8f0 8902 	ldrd	r8, r9, [r0], #8
		CRC_buff += flash_data_read_buff(addr_i);
 800be10:	e9d6 4500 	ldrd	r4, r5, [r6]
 800be14:	eb14 0408 	adds.w	r4, r4, r8
 800be18:	eb45 0509 	adc.w	r5, r5, r9
 800be1c:	e9c6 4500 	strd	r4, r5, [r6]
 800be20:	2401      	movs	r4, #1
 800be22:	e7df      	b.n	800bde4 <CRC_Check+0x10>
 800be24:	2008bbb0 	.word	0x2008bbb0
 800be28:	20003bb0 	.word	0x20003bb0
 800be2c:	20003bb8 	.word	0x20003bb8

0800be30 <calcNorm560_CRI>:
double L_i_ref ;
double u_i_ref ;
double v_i_ref ;

void calcNorm560_CRI(uint16_t CCT_measure)
{
 800be30:	b508      	push	{r3, lr}
	norm_560_CRI = pow(0.00000056, -5) / (exp(0.014388 / (0.00000056 *CCT_measure)) - 1);
 800be32:	f7f4 fb87 	bl	8000544 <__aeabi_i2d>
 800be36:	a316      	add	r3, pc, #88	; (adr r3, 800be90 <calcNorm560_CRI+0x60>)
 800be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3c:	f7f4 fbe8 	bl	8000610 <__aeabi_dmul>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	a114      	add	r1, pc, #80	; (adr r1, 800be98 <calcNorm560_CRI+0x68>)
 800be46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be4a:	f7f4 fd0b 	bl	8000864 <__aeabi_ddiv>
 800be4e:	ec41 0b10 	vmov	d0, r0, r1
 800be52:	f016 fd05 	bl	8022860 <exp>
 800be56:	2200      	movs	r2, #0
 800be58:	ec51 0b10 	vmov	r0, r1, d0
 800be5c:	4b0a      	ldr	r3, [pc, #40]	; (800be88 <calcNorm560_CRI+0x58>)
 800be5e:	f7f4 fa23 	bl	80002a8 <__aeabi_dsub>
 800be62:	460b      	mov	r3, r1
 800be64:	4602      	mov	r2, r0
 800be66:	a106      	add	r1, pc, #24	; (adr r1, 800be80 <calcNorm560_CRI+0x50>)
 800be68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be6c:	f7f4 fcfa 	bl	8000864 <__aeabi_ddiv>
 800be70:	f7f4 fec6 	bl	8000c00 <__aeabi_d2f>
 800be74:	4b05      	ldr	r3, [pc, #20]	; (800be8c <calcNorm560_CRI+0x5c>)
 800be76:	6018      	str	r0, [r3, #0]
 800be78:	bd08      	pop	{r3, pc}
 800be7a:	bf00      	nop
 800be7c:	f3af 8000 	nop.w
 800be80:	f9f35846 	.word	0xf9f35846
 800be84:	466ca5d1 	.word	0x466ca5d1
 800be88:	3ff00000 	.word	0x3ff00000
 800be8c:	2008bbe0 	.word	0x2008bbe0
 800be90:	05ea7ab3 	.word	0x05ea7ab3
 800be94:	3ea2ca5d 	.word	0x3ea2ca5d
 800be98:	aba38759 	.word	0xaba38759
 800be9c:	3f8d7774 	.word	0x3f8d7774

0800bea0 <calcSref_CRI>:


float calcSref_CRI(int idx, uint16_t CCT_measure)
{
	float ans;
	if (CCT_measure < 5000)
 800bea0:	f241 3387 	movw	r3, #4999	; 0x1387
 800bea4:	4299      	cmp	r1, r3
{
 800bea6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bea8:	460d      	mov	r5, r1
 800beaa:	ea4f 0080 	mov.w	r0, r0, lsl #2
	if (CCT_measure < 5000)
 800beae:	d84e      	bhi.n	800bf4e <calcSref_CRI+0xae>
	{
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800beb0:	4c39      	ldr	r4, [pc, #228]	; (800bf98 <calcSref_CRI+0xf8>)
 800beb2:	4404      	add	r4, r0
 800beb4:	6820      	ldr	r0, [r4, #0]
 800beb6:	f7f4 fb57 	bl	8000568 <__aeabi_f2d>
 800beba:	a331      	add	r3, pc, #196	; (adr r3, 800bf80 <calcSref_CRI+0xe0>)
 800bebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec0:	f7f4 fba6 	bl	8000610 <__aeabi_dmul>
 800bec4:	4606      	mov	r6, r0
 800bec6:	4628      	mov	r0, r5
 800bec8:	460f      	mov	r7, r1
 800beca:	f7f4 fb3b 	bl	8000544 <__aeabi_i2d>
 800bece:	4602      	mov	r2, r0
 800bed0:	460b      	mov	r3, r1
 800bed2:	4630      	mov	r0, r6
 800bed4:	4639      	mov	r1, r7
 800bed6:	f7f4 fb9b 	bl	8000610 <__aeabi_dmul>
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	a12a      	add	r1, pc, #168	; (adr r1, 800bf88 <calcSref_CRI+0xe8>)
 800bee0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bee4:	f7f4 fcbe 	bl	8000864 <__aeabi_ddiv>
 800bee8:	ec41 0b10 	vmov	d0, r0, r1
 800beec:	f016 fcb8 	bl	8022860 <exp>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bef0:	6820      	ldr	r0, [r4, #0]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bef2:	ec57 6b10 	vmov	r6, r7, d0
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bef6:	f7f4 fb37 	bl	8000568 <__aeabi_f2d>
 800befa:	a321      	add	r3, pc, #132	; (adr r3, 800bf80 <calcSref_CRI+0xe0>)
 800befc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf00:	f7f4 fb86 	bl	8000610 <__aeabi_dmul>
 800bf04:	ed9f 1b22 	vldr	d1, [pc, #136]	; 800bf90 <calcSref_CRI+0xf0>
 800bf08:	ec41 0b10 	vmov	d0, r0, r1
 800bf0c:	f016 fda4 	bl	8022a58 <pow>
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bf10:	2200      	movs	r2, #0
 800bf12:	4b22      	ldr	r3, [pc, #136]	; (800bf9c <calcSref_CRI+0xfc>)
 800bf14:	4630      	mov	r0, r6
 800bf16:	4639      	mov	r1, r7
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bf18:	ed8d 0b00 	vstr	d0, [sp]
		ans = exp(0.014388 / (WaveLenght[idx] * 0.000000001 * CCT_measure)) - 1;
 800bf1c:	f7f4 f9c4 	bl	80002a8 <__aeabi_dsub>
 800bf20:	f7f4 fe6e 	bl	8000c00 <__aeabi_d2f>
		ans = pow(WaveLenght[idx] * 0.000000001, -5) / ans;
 800bf24:	f7f4 fb20 	bl	8000568 <__aeabi_f2d>
 800bf28:	ed9d 0b00 	vldr	d0, [sp]
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4602      	mov	r2, r0
 800bf30:	ec51 0b10 	vmov	r0, r1, d0
 800bf34:	f7f4 fc96 	bl	8000864 <__aeabi_ddiv>
 800bf38:	f7f4 fe62 	bl	8000c00 <__aeabi_d2f>
		ans /= norm_560_CRI;
 800bf3c:	4b18      	ldr	r3, [pc, #96]	; (800bfa0 <calcSref_CRI+0x100>)
 800bf3e:	ee07 0a10 	vmov	s14, r0
 800bf42:	edd3 7a00 	vldr	s15, [r3]
 800bf46:	ee87 0a27 	vdiv.f32	s0, s14, s15
	else
	{
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
	}
	return ans;
}
 800bf4a:	b003      	add	sp, #12
 800bf4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ans = S0_lambda[idx] + M1_CRI*S1_lambda[idx] + M2_CRI*S2_lambda[idx];
 800bf4e:	4a15      	ldr	r2, [pc, #84]	; (800bfa4 <calcSref_CRI+0x104>)
 800bf50:	4b15      	ldr	r3, [pc, #84]	; (800bfa8 <calcSref_CRI+0x108>)
 800bf52:	4916      	ldr	r1, [pc, #88]	; (800bfac <calcSref_CRI+0x10c>)
 800bf54:	4403      	add	r3, r0
 800bf56:	4401      	add	r1, r0
 800bf58:	4410      	add	r0, r2
 800bf5a:	4a15      	ldr	r2, [pc, #84]	; (800bfb0 <calcSref_CRI+0x110>)
 800bf5c:	ed91 7a00 	vldr	s14, [r1]
 800bf60:	edd2 7a00 	vldr	s15, [r2]
 800bf64:	ed90 0a00 	vldr	s0, [r0]
 800bf68:	eea7 0a27 	vfma.f32	s0, s14, s15
 800bf6c:	ed93 7a00 	vldr	s14, [r3]
 800bf70:	4b10      	ldr	r3, [pc, #64]	; (800bfb4 <calcSref_CRI+0x114>)
 800bf72:	edd3 7a00 	vldr	s15, [r3]
 800bf76:	eea7 0a27 	vfma.f32	s0, s14, s15
	return ans;
 800bf7a:	e7e6      	b.n	800bf4a <calcSref_CRI+0xaa>
 800bf7c:	f3af 8000 	nop.w
 800bf80:	e826d695 	.word	0xe826d695
 800bf84:	3e112e0b 	.word	0x3e112e0b
 800bf88:	aba38759 	.word	0xaba38759
 800bf8c:	3f8d7774 	.word	0x3f8d7774
 800bf90:	00000000 	.word	0x00000000
 800bf94:	c0140000 	.word	0xc0140000
 800bf98:	2004fbe4 	.word	0x2004fbe4
 800bf9c:	3ff00000 	.word	0x3ff00000
 800bfa0:	2008bbe0 	.word	0x2008bbe0
 800bfa4:	20049bdc 	.word	0x20049bdc
 800bfa8:	2004bbdc 	.word	0x2004bbdc
 800bfac:	2004abdc 	.word	0x2004abdc
 800bfb0:	20003bc0 	.word	0x20003bc0
 800bfb4:	20003bc4 	.word	0x20003bc4

0800bfb8 <CRI_func>:
		double x_i_ref = 0;
		double y_i_ref = 0;
		double z_i_ref = 0;

void CRI_func(uint16_t CCT_measure, float *Rabs)
{
 800bfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfbc:	ed2d 8b08 	vpush	{d8-d11}
 800bfc0:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800bfc4:	b083      	sub	sp, #12
	int16_t Ra_temp = 0, Rall_temp = 0, R9_temp = 0;
	float s_ref_CRI[1024] = {0};
 800bfc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
{
 800bfca:	900c      	str	r0, [sp, #48]	; 0x30
 800bfcc:	468a      	mov	sl, r1
	float s_ref_CRI[1024] = {0};
 800bfce:	a822      	add	r0, sp, #136	; 0x88
 800bfd0:	2100      	movs	r1, #0
 800bfd2:	f015 fed4 	bl	8021d7e <memset>
	float CRI_R_temp[1024] = {0};
 800bfd6:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800bfda:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bfde:	2100      	movs	r1, #0
 800bfe0:	3008      	adds	r0, #8
 800bfe2:	f015 fecc 	bl	8021d7e <memset>

	memset(Ri_temp, 0, sizeof(Ri_temp));
 800bfe6:	2278      	movs	r2, #120	; 0x78
 800bfe8:	2100      	movs	r1, #0
 800bfea:	48c1      	ldr	r0, [pc, #772]	; (800c2f0 <CRI_func+0x338>)
 800bfec:	f015 fec7 	bl	8021d7e <memset>
	double y_ref = 0;
	double z_ref = 0;
	double u_ref = 0;
	double v_ref = 0;

	if (CCT_measure < 5000)
 800bff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bff2:	f241 3387 	movw	r3, #4999	; 0x1387
 800bff6:	429a      	cmp	r2, r3
 800bff8:	f200 8514 	bhi.w	800ca24 <CRI_func+0xa6c>
	{
		calcNorm560_CRI(CCT_measure);
 800bffc:	4610      	mov	r0, r2
 800bffe:	f7ff ff17 	bl	800be30 <calcNorm560_CRI>
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
	}
	
	
	float u_test = colorimetry_uv[0];	
 800c002:	4bbc      	ldr	r3, [pc, #752]	; (800c2f4 <CRI_func+0x33c>)
	float v_test = colorimetry_uv[1];
	
	bar_CRI = 0.1;
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c004:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800c2f8 <CRI_func+0x340>
	float u_test = colorimetry_uv[0];	
 800c008:	edd3 7a00 	vldr	s15, [r3]
	bar_CRI = 0.1;
 800c00c:	a1b2      	add	r1, pc, #712	; (adr r1, 800c2d8 <CRI_func+0x320>)
 800c00e:	e9d1 0100 	ldrd	r0, r1, [r1]
	float u_test = colorimetry_uv[0];	
 800c012:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
	float v_test = colorimetry_uv[1];
 800c016:	edd3 7a01 	vldr	s15, [r3, #4]
	bar_CRI = 0.1;
 800c01a:	4bb8      	ldr	r3, [pc, #736]	; (800c2fc <CRI_func+0x344>)
	float v_test = colorimetry_uv[1];
 800c01c:	edcd 7a21 	vstr	s15, [sp, #132]	; 0x84
	bar_CRI = 0.1;
 800c020:	e9c3 0100 	strd	r0, r1, [r3]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c024:	210d      	movs	r1, #13
 800c026:	2055      	movs	r0, #85	; 0x55
 800c028:	f009 fb30 	bl	801568c <GUI_Bar_Measure>
	
	for (uint16_t y = 0; y < 1024; y++){
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c02c:	4bb4      	ldr	r3, [pc, #720]	; (800c300 <CRI_func+0x348>)
 800c02e:	ed93 7a00 	vldr	s14, [r3]
 800c032:	4bb4      	ldr	r3, [pc, #720]	; (800c304 <CRI_func+0x34c>)
 800c034:	f50a 5280 	add.w	r2, sl, #4096	; 0x1000
 800c038:	ecfa 6a01 	vldmia	sl!, {s13}
 800c03c:	eec6 7a87 	vdiv.f32	s15, s13, s14
	for (uint16_t y = 0; y < 1024; y++){
 800c040:	4552      	cmp	r2, sl
		s_test_CRI[y] = Rabs[y]/max_Rabs;
 800c042:	ece3 7a01 	vstmia	r3!, {s15}
	for (uint16_t y = 0; y < 1024; y++){
 800c046:	d1f7      	bne.n	800c038 <CRI_func+0x80>
 800c048:	ed9f 7ba5 	vldr	d7, [pc, #660]	; 800c2e0 <CRI_func+0x328>
 800c04c:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800c050:	eeb0 8a47 	vmov.f32	s16, s14
 800c054:	eef0 8a67 	vmov.f32	s17, s15
 800c058:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800c05c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800c060:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c064:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c068:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c06c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c070:	2300      	movs	r3, #0
 800c072:	9300      	str	r3, [sp, #0]
 800c074:	9310      	str	r3, [sp, #64]	; 0x40
 800c076:	9311      	str	r3, [sp, #68]	; 0x44
	}
	
	for (uint8_t i = 0; i < 15; i++)
	{
		bar_CRI += 0.05;
 800c078:	4ca0      	ldr	r4, [pc, #640]	; (800c2fc <CRI_func+0x344>)
		for (int j = 0; j < 1024; j++)
		{
			if (i == 0)
			{
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c07a:	4fa3      	ldr	r7, [pc, #652]	; (800c308 <CRI_func+0x350>)
 800c07c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 800c304 <CRI_func+0x34c>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c080:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800c330 <CRI_func+0x378>
		bar_CRI += 0.05;
 800c084:	a398      	add	r3, pc, #608	; (adr r3, 800c2e8 <CRI_func+0x330>)
 800c086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c08e:	f7f4 f90d 	bl	80002ac <__adddf3>
 800c092:	e9c4 0100 	strd	r0, r1, [r4]
		GUI_Bar_Measure(85, 13, bar_CRI);
 800c096:	f7f4 fdb3 	bl	8000c00 <__aeabi_d2f>
 800c09a:	210d      	movs	r1, #13
 800c09c:	ee00 0a10 	vmov	s0, r0
 800c0a0:	2055      	movs	r0, #85	; 0x55
 800c0a2:	f009 faf3 	bl	801568c <GUI_Bar_Measure>
		 x_i_test = 0;
 800c0a6:	4b99      	ldr	r3, [pc, #612]	; (800c30c <CRI_func+0x354>)
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c0a8:	4899      	ldr	r0, [pc, #612]	; (800c310 <CRI_func+0x358>)
		 x_i_test = 0;
 800c0aa:	ed83 8b00 	vstr	d8, [r3]
		 y_i_test = 0;
 800c0ae:	4b99      	ldr	r3, [pc, #612]	; (800c314 <CRI_func+0x35c>)
 800c0b0:	ed83 8b00 	vstr	d8, [r3]
		 z_i_test = 0;
 800c0b4:	4b98      	ldr	r3, [pc, #608]	; (800c318 <CRI_func+0x360>)
 800c0b6:	ed83 8b00 	vstr	d8, [r3]
		 x_i_ref = 0;
 800c0ba:	4b98      	ldr	r3, [pc, #608]	; (800c31c <CRI_func+0x364>)
 800c0bc:	ed83 8b00 	vstr	d8, [r3]
		 y_i_ref = 0;
 800c0c0:	4b97      	ldr	r3, [pc, #604]	; (800c320 <CRI_func+0x368>)
 800c0c2:	ed83 8b00 	vstr	d8, [r3]
		 z_i_ref = 0;
 800c0c6:	4b97      	ldr	r3, [pc, #604]	; (800c324 <CRI_func+0x36c>)
 800c0c8:	ed83 8b00 	vstr	d8, [r3]
		Calibration_Load_Pack(CRI_R1+i*0x1000, 0x400, CRI_R_temp);
 800c0cc:	9b00      	ldr	r3, [sp, #0]
 800c0ce:	f50d 5284 	add.w	r2, sp, #4224	; 0x1080
 800c0d2:	3208      	adds	r2, #8
 800c0d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c0d8:	eb00 3003 	add.w	r0, r0, r3, lsl #12
 800c0dc:	f002 fda4 	bl	800ec28 <Calibration_Load_Pack>
 800c0e0:	2400      	movs	r4, #0
		for (int j = 0; j < 1024; j++)
 800c0e2:	4625      	mov	r5, r4
 800c0e4:	f89d 3000 	ldrb.w	r3, [sp]
 800c0e8:	930d      	str	r3, [sp, #52]	; 0x34
			if (i == 0)
 800c0ea:	9b00      	ldr	r3, [sp, #0]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d150      	bne.n	800c192 <CRI_func+0x1da>
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c0f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f7ff fed4 	bl	800bea0 <calcSref_CRI>
 800c0f8:	ab22      	add	r3, sp, #136	; 0x88
 800c0fa:	4423      	add	r3, r4
 800c0fc:	ed83 0a00 	vstr	s0, [r3]
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c100:	19e3      	adds	r3, r4, r7
 800c102:	edd3 9a00 	vldr	s19, [r3]
 800c106:	eb09 0304 	add.w	r3, r9, r4
 800c10a:	edd3 7a00 	vldr	s15, [r3]
 800c10e:	ee69 7aa7 	vmul.f32	s15, s19, s15
				s_ref_CRI[j] = calcSref_CRI(j, CCT_measure);
 800c112:	eeb0 9a40 	vmov.f32	s18, s0
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c116:	ee17 0a90 	vmov	r0, s15
 800c11a:	f7f4 fa25 	bl	8000568 <__aeabi_f2d>
 800c11e:	4602      	mov	r2, r0
 800c120:	460b      	mov	r3, r1
 800c122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c126:	f7f4 f8c1 	bl	80002ac <__adddf3>
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c12a:	eb04 0308 	add.w	r3, r4, r8
 800c12e:	edd3 7a00 	vldr	s15, [r3]
 800c132:	ee69 7a27 	vmul.f32	s15, s18, s15
				k_test += s_test_CRI[j] * Spectral_day[j];
 800c136:	e9cd 0104 	strd	r0, r1, [sp, #16]
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c13a:	ee17 0a90 	vmov	r0, s15
 800c13e:	f7f4 fa13 	bl	8000568 <__aeabi_f2d>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c14a:	f7f4 f8af 	bl	80002ac <__adddf3>
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c14e:	ee69 7a29 	vmul.f32	s15, s18, s19
				x_ref += s_ref_CRI[j] * calibratre_x_1931[j];
 800c152:	e9cd 0108 	strd	r0, r1, [sp, #32]
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c156:	ee17 0a90 	vmov	r0, s15
 800c15a:	f7f4 fa05 	bl	8000568 <__aeabi_f2d>
 800c15e:	4602      	mov	r2, r0
 800c160:	460b      	mov	r3, r1
 800c162:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c166:	f7f4 f8a1 	bl	80002ac <__adddf3>
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c16a:	4b6f      	ldr	r3, [pc, #444]	; (800c328 <CRI_func+0x370>)
 800c16c:	4423      	add	r3, r4
 800c16e:	edd3 7a00 	vldr	s15, [r3]
 800c172:	ee69 7a27 	vmul.f32	s15, s18, s15
				y_ref += s_ref_CRI[j] * Spectral_day[j];
 800c176:	e9cd 0106 	strd	r0, r1, [sp, #24]
				z_ref += s_ref_CRI[j] * calibratre_z_1931[j];
 800c17a:	ee17 0a90 	vmov	r0, s15
 800c17e:	f7f4 f9f3 	bl	8000568 <__aeabi_f2d>
 800c182:	4602      	mov	r2, r0
 800c184:	460b      	mov	r3, r1
 800c186:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c18a:	f7f4 f88f 	bl	80002ac <__adddf3>
 800c18e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			}

			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c192:	f50d 5384 	add.w	r3, sp, #4224	; 0x1080
 800c196:	3308      	adds	r3, #8
 800c198:	4423      	add	r3, r4
 800c19a:	ed93 9a00 	vldr	s18, [r3]
 800c19e:	4e5b      	ldr	r6, [pc, #364]	; (800c30c <CRI_func+0x354>)
 800c1a0:	eb09 0304 	add.w	r3, r9, r4
 800c1a4:	edd3 9a00 	vldr	s19, [r3]
 800c1a8:	eb04 0308 	add.w	r3, r4, r8
 800c1ac:	ee69 9a29 	vmul.f32	s19, s18, s19
 800c1b0:	ed93 ba00 	vldr	s22, [r3]
 800c1b4:	ee69 7a8b 	vmul.f32	s15, s19, s22
		for (int j = 0; j < 1024; j++)
 800c1b8:	3501      	adds	r5, #1
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c1ba:	ee17 0a90 	vmov	r0, s15
 800c1be:	f7f4 f9d3 	bl	8000568 <__aeabi_f2d>
 800c1c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c1c6:	f7f4 f871 	bl	80002ac <__adddf3>
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c1ca:	19e3      	adds	r3, r4, r7
 800c1cc:	edd3 aa00 	vldr	s21, [r3]
 800c1d0:	ee69 7aaa 	vmul.f32	s15, s19, s21
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c1d4:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c1d8:	4e4e      	ldr	r6, [pc, #312]	; (800c314 <CRI_func+0x35c>)
			x_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c1da:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c1de:	ee17 0a90 	vmov	r0, s15
 800c1e2:	f7f4 f9c1 	bl	8000568 <__aeabi_f2d>
 800c1e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c1ea:	f7f4 f85f 	bl	80002ac <__adddf3>
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c1ee:	4b4e      	ldr	r3, [pc, #312]	; (800c328 <CRI_func+0x370>)
 800c1f0:	4423      	add	r3, r4
 800c1f2:	ed93 aa00 	vldr	s20, [r3]
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c1f6:	4682      	mov	sl, r0
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c1f8:	ee69 7a8a 	vmul.f32	s15, s19, s20
			y_i_test += s_test_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c1fc:	468b      	mov	fp, r1
 800c1fe:	e9c6 ab00 	strd	sl, fp, [r6]
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c202:	4e45      	ldr	r6, [pc, #276]	; (800c318 <CRI_func+0x360>)
 800c204:	ee17 0a90 	vmov	r0, s15
 800c208:	f7f4 f9ae 	bl	8000568 <__aeabi_f2d>
 800c20c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c210:	f7f4 f84c 	bl	80002ac <__adddf3>

			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c214:	ab22      	add	r3, sp, #136	; 0x88
 800c216:	4423      	add	r3, r4
 800c218:	edd3 7a00 	vldr	s15, [r3]
 800c21c:	ee29 9a27 	vmul.f32	s18, s18, s15
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c220:	e9c6 0100 	strd	r0, r1, [r6]
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c224:	ee6b 7a09 	vmul.f32	s15, s22, s18
 800c228:	4e3c      	ldr	r6, [pc, #240]	; (800c31c <CRI_func+0x364>)
			z_i_test += s_test_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c22a:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c22e:	ee17 0a90 	vmov	r0, s15
 800c232:	f7f4 f999 	bl	8000568 <__aeabi_f2d>
 800c236:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c23a:	f7f4 f837 	bl	80002ac <__adddf3>
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c23e:	ee6a 7a89 	vmul.f32	s15, s21, s18
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c242:	e9c6 0100 	strd	r0, r1, [r6]
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c246:	4e36      	ldr	r6, [pc, #216]	; (800c320 <CRI_func+0x368>)
			x_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_x_1931[j];
 800c248:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c24c:	ee17 0a90 	vmov	r0, s15
 800c250:	f7f4 f98a 	bl	8000568 <__aeabi_f2d>
 800c254:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c258:	f7f4 f828 	bl	80002ac <__adddf3>
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c25c:	ee6a 7a09 	vmul.f32	s15, s20, s18
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c260:	e9c6 0100 	strd	r0, r1, [r6]
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c264:	4e2f      	ldr	r6, [pc, #188]	; (800c324 <CRI_func+0x36c>)
			y_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * Spectral_day[j];
 800c266:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c26a:	ee17 0a90 	vmov	r0, s15
 800c26e:	f7f4 f97b 	bl	8000568 <__aeabi_f2d>
 800c272:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c276:	f7f4 f819 	bl	80002ac <__adddf3>
		for (int j = 0; j < 1024; j++)
 800c27a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
			z_i_ref += s_ref_CRI[j] * CRI_R_temp[j] * calibratre_z_1931[j];
 800c27e:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800c282:	e9c6 0100 	strd	r0, r1, [r6]
 800c286:	f104 0404 	add.w	r4, r4, #4
		for (int j = 0; j < 1024; j++)
 800c28a:	f47f af2b 	bne.w	800c0e4 <CRI_func+0x12c>
		}
		if (i == 0) 
 800c28e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c290:	2b00      	cmp	r3, #0
 800c292:	f040 8089 	bne.w	800c3a8 <CRI_func+0x3f0>
		{
			k_ref = 100 / y_ref;
 800c296:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c29a:	2000      	movs	r0, #0
 800c29c:	4923      	ldr	r1, [pc, #140]	; (800c32c <CRI_func+0x374>)
 800c29e:	f7f4 fae1 	bl	8000864 <__aeabi_ddiv>
			k_test = 100 / k_test;
 800c2a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
			k_ref = 100 / y_ref;
 800c2a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
			k_test = 100 / k_test;
 800c2aa:	2000      	movs	r0, #0
 800c2ac:	491f      	ldr	r1, [pc, #124]	; (800c32c <CRI_func+0x374>)
 800c2ae:	f7f4 fad9 	bl	8000864 <__aeabi_ddiv>
			x_ref *= k_ref;
 800c2b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			k_test = 100 / k_test;
 800c2b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
			x_ref *= k_ref;
 800c2ba:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c2be:	f7f4 f9a7 	bl	8000610 <__aeabi_dmul>
			y_ref *= k_ref;
 800c2c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
			x_ref *= k_ref;
 800c2c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
			y_ref *= k_ref;
 800c2ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2ce:	f7f4 f99f 	bl	8000610 <__aeabi_dmul>
			z_ref *= k_ref;
 800c2d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2d6:	e02d      	b.n	800c334 <CRI_func+0x37c>
 800c2d8:	9999999a 	.word	0x9999999a
 800c2dc:	3fb99999 	.word	0x3fb99999
	...
 800c2e8:	9999999a 	.word	0x9999999a
 800c2ec:	3fa99999 	.word	0x3fa99999
 800c2f0:	2008bc40 	.word	0x2008bc40
 800c2f4:	2008a7cc 	.word	0x2008a7cc
 800c2f8:	3dcccccd 	.word	0x3dcccccd
 800c2fc:	2008bbf0 	.word	0x2008bbf0
 800c300:	20090b2c 	.word	0x20090b2c
 800c304:	20003bdc 	.word	0x20003bdc
 800c308:	2004dbe0 	.word	0x2004dbe0
 800c30c:	20004be8 	.word	0x20004be8
 800c310:	0811b040 	.word	0x0811b040
 800c314:	20004bf8 	.word	0x20004bf8
 800c318:	20004c08 	.word	0x20004c08
 800c31c:	20004be0 	.word	0x20004be0
 800c320:	20004bf0 	.word	0x20004bf0
 800c324:	20004c00 	.word	0x20004c00
 800c328:	200887b0 	.word	0x200887b0
 800c32c:	40590000 	.word	0x40590000
 800c330:	200857b0 	.word	0x200857b0
			y_ref *= k_ref;
 800c334:	e9cd 0106 	strd	r0, r1, [sp, #24]
			z_ref *= k_ref;
 800c338:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c33c:	f7f4 f968 	bl	8000610 <__aeabi_dmul>
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c340:	2200      	movs	r2, #0
			z_ref *= k_ref;
 800c342:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c346:	4bb7      	ldr	r3, [pc, #732]	; (800c624 <CRI_func+0x66c>)
 800c348:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c34c:	f7f4 f960 	bl	8000610 <__aeabi_dmul>
 800c350:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c354:	f7f3 ffaa 	bl	80002ac <__adddf3>
 800c358:	2200      	movs	r2, #0
 800c35a:	4604      	mov	r4, r0
 800c35c:	460d      	mov	r5, r1
 800c35e:	4bb2      	ldr	r3, [pc, #712]	; (800c628 <CRI_func+0x670>)
 800c360:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800c364:	f7f4 f954 	bl	8000610 <__aeabi_dmul>
 800c368:	4602      	mov	r2, r0
 800c36a:	460b      	mov	r3, r1
 800c36c:	4620      	mov	r0, r4
 800c36e:	4629      	mov	r1, r5
 800c370:	f7f3 ff9c 	bl	80002ac <__adddf3>
 800c374:	2200      	movs	r2, #0
 800c376:	4604      	mov	r4, r0
 800c378:	460d      	mov	r5, r1
 800c37a:	4bac      	ldr	r3, [pc, #688]	; (800c62c <CRI_func+0x674>)
 800c37c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c380:	f7f4 f946 	bl	8000610 <__aeabi_dmul>
 800c384:	4622      	mov	r2, r4
 800c386:	462b      	mov	r3, r5
 800c388:	f7f4 fa6c 	bl	8000864 <__aeabi_ddiv>
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800c38c:	2200      	movs	r2, #0
			u_ref = 4 * x_ref / (x_ref + 15 * y_ref + 3 * z_ref);
 800c38e:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
			v_ref = 6 * y_ref / (x_ref + 15 * y_ref + 3 * z_ref); 
 800c392:	4ba7      	ldr	r3, [pc, #668]	; (800c630 <CRI_func+0x678>)
 800c394:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c398:	f7f4 f93a 	bl	8000610 <__aeabi_dmul>
 800c39c:	4622      	mov	r2, r4
 800c39e:	462b      	mov	r3, r5
 800c3a0:	f7f4 fa60 	bl	8000864 <__aeabi_ddiv>
 800c3a4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58

		}	
		x_i_test *= k_test;	
 800c3a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c3ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3b0:	f7f4 f92e 	bl	8000610 <__aeabi_dmul>
 800c3b4:	4b9f      	ldr	r3, [pc, #636]	; (800c634 <CRI_func+0x67c>)
 800c3b6:	4680      	mov	r8, r0
 800c3b8:	4689      	mov	r9, r1
 800c3ba:	e9c3 8900 	strd	r8, r9, [r3]
		y_i_test *= k_test;
 800c3be:	4652      	mov	r2, sl
 800c3c0:	465b      	mov	r3, fp
 800c3c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c6:	f7f4 f923 	bl	8000610 <__aeabi_dmul>
 800c3ca:	4b9b      	ldr	r3, [pc, #620]	; (800c638 <CRI_func+0x680>)
 800c3cc:	4682      	mov	sl, r0
 800c3ce:	468b      	mov	fp, r1
 800c3d0:	e9c3 ab00 	strd	sl, fp, [r3]
		z_i_test *= k_test;
 800c3d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3d8:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c3dc:	f7f4 f918 	bl	8000610 <__aeabi_dmul>
 800c3e0:	4b96      	ldr	r3, [pc, #600]	; (800c63c <CRI_func+0x684>)
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	e9c3 4500 	strd	r4, r5, [r3]
		
		x_i_ref *= k_ref;
 800c3ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3ee:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800c3f2:	f7f4 f90d 	bl	8000610 <__aeabi_dmul>
 800c3f6:	4b92      	ldr	r3, [pc, #584]	; (800c640 <CRI_func+0x688>)
 800c3f8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800c3fc:	e9c3 0100 	strd	r0, r1, [r3]
		y_i_ref *= k_ref;
 800c400:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c404:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c408:	f7f4 f902 	bl	8000610 <__aeabi_dmul>
 800c40c:	4b8d      	ldr	r3, [pc, #564]	; (800c644 <CRI_func+0x68c>)
 800c40e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c412:	e9c3 0100 	strd	r0, r1, [r3]
		z_i_ref *= k_ref;	
 800c416:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800c41a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c41e:	f7f4 f8f7 	bl	8000610 <__aeabi_dmul>
 800c422:	4b89      	ldr	r3, [pc, #548]	; (800c648 <CRI_func+0x690>)
 800c424:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
 800c428:	e9c3 0100 	strd	r0, r1, [r3]
	
		 u_test_s = 4 * x_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c42c:	2200      	movs	r2, #0
 800c42e:	4b7d      	ldr	r3, [pc, #500]	; (800c624 <CRI_func+0x66c>)
 800c430:	4650      	mov	r0, sl
 800c432:	4659      	mov	r1, fp
 800c434:	f7f4 f8ec 	bl	8000610 <__aeabi_dmul>
 800c438:	4642      	mov	r2, r8
 800c43a:	464b      	mov	r3, r9
 800c43c:	f7f3 ff36 	bl	80002ac <__adddf3>
 800c440:	2200      	movs	r2, #0
 800c442:	4606      	mov	r6, r0
 800c444:	460f      	mov	r7, r1
 800c446:	4b78      	ldr	r3, [pc, #480]	; (800c628 <CRI_func+0x670>)
 800c448:	4620      	mov	r0, r4
 800c44a:	4629      	mov	r1, r5
 800c44c:	f7f4 f8e0 	bl	8000610 <__aeabi_dmul>
 800c450:	4602      	mov	r2, r0
 800c452:	460b      	mov	r3, r1
 800c454:	4630      	mov	r0, r6
 800c456:	4639      	mov	r1, r7
 800c458:	f7f3 ff28 	bl	80002ac <__adddf3>
 800c45c:	2200      	movs	r2, #0
 800c45e:	4604      	mov	r4, r0
 800c460:	460d      	mov	r5, r1
 800c462:	4b72      	ldr	r3, [pc, #456]	; (800c62c <CRI_func+0x674>)
 800c464:	4640      	mov	r0, r8
 800c466:	4649      	mov	r1, r9
 800c468:	f7f4 f8d2 	bl	8000610 <__aeabi_dmul>
 800c46c:	4622      	mov	r2, r4
 800c46e:	462b      	mov	r3, r5
 800c470:	f7f4 f9f8 	bl	8000864 <__aeabi_ddiv>
 800c474:	4b75      	ldr	r3, [pc, #468]	; (800c64c <CRI_func+0x694>)
 800c476:	4680      	mov	r8, r0
 800c478:	4689      	mov	r9, r1
 800c47a:	e9c3 8900 	strd	r8, r9, [r3]
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c47e:	2200      	movs	r2, #0
 800c480:	4b6b      	ldr	r3, [pc, #428]	; (800c630 <CRI_func+0x678>)
 800c482:	4650      	mov	r0, sl
 800c484:	4659      	mov	r1, fp
 800c486:	f7f4 f8c3 	bl	8000610 <__aeabi_dmul>
 800c48a:	4622      	mov	r2, r4
 800c48c:	462b      	mov	r3, r5
 800c48e:	f7f4 f9e9 	bl	8000864 <__aeabi_ddiv>
 800c492:	4b6f      	ldr	r3, [pc, #444]	; (800c650 <CRI_func+0x698>)
 800c494:	4606      	mov	r6, r0
 800c496:	460f      	mov	r7, r1
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c498:	ec4b ab10 	vmov	d0, sl, fp
		 v_test_s = 6 * y_i_test / (x_i_test + 15 * y_i_test + 3 * z_i_test);
 800c49c:	e9c3 6700 	strd	r6, r7, [r3]
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c4a0:	f016 f89e 	bl	80225e0 <cbrt>
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	ec51 0b10 	vmov	r0, r1, d0
 800c4aa:	4b6a      	ldr	r3, [pc, #424]	; (800c654 <CRI_func+0x69c>)
 800c4ac:	f7f4 f8b0 	bl	8000610 <__aeabi_dmul>
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	4b69      	ldr	r3, [pc, #420]	; (800c658 <CRI_func+0x6a0>)
 800c4b4:	f7f3 fef8 	bl	80002a8 <__aeabi_dsub>
 800c4b8:	4b68      	ldr	r3, [pc, #416]	; (800c65c <CRI_func+0x6a4>)
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c4ba:	2200      	movs	r2, #0
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c4bc:	e9c3 0100 	strd	r0, r1, [r3]
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c4c0:	4b67      	ldr	r3, [pc, #412]	; (800c660 <CRI_func+0x6a8>)
		 L_i_test = 25 * cbrt(y_i_test) - 17;
 800c4c2:	e9cd 011a 	strd	r0, r1, [sp, #104]	; 0x68
		 u_i_test = 13 * L_i_test * (u_test_s - u_test);
 800c4c6:	f7f4 f8a3 	bl	8000610 <__aeabi_dmul>
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	9820      	ldr	r0, [sp, #128]	; 0x80
 800c4ce:	460d      	mov	r5, r1
 800c4d0:	f7f4 f84a 	bl	8000568 <__aeabi_f2d>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	4640      	mov	r0, r8
 800c4da:	4649      	mov	r1, r9
 800c4dc:	f7f3 fee4 	bl	80002a8 <__aeabi_dsub>
 800c4e0:	4622      	mov	r2, r4
 800c4e2:	462b      	mov	r3, r5
 800c4e4:	f7f4 f894 	bl	8000610 <__aeabi_dmul>
 800c4e8:	4b5e      	ldr	r3, [pc, #376]	; (800c664 <CRI_func+0x6ac>)
 800c4ea:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
 800c4ee:	e9c3 0100 	strd	r0, r1, [r3]
		 v_i_test = 13 * L_i_test * (v_test_s - v_test);
 800c4f2:	9821      	ldr	r0, [sp, #132]	; 0x84
 800c4f4:	f7f4 f838 	bl	8000568 <__aeabi_f2d>
 800c4f8:	4602      	mov	r2, r0
 800c4fa:	460b      	mov	r3, r1
 800c4fc:	4630      	mov	r0, r6
 800c4fe:	4639      	mov	r1, r7
 800c500:	f7f3 fed2 	bl	80002a8 <__aeabi_dsub>
 800c504:	4622      	mov	r2, r4
 800c506:	462b      	mov	r3, r5
 800c508:	f7f4 f882 	bl	8000610 <__aeabi_dmul>
 800c50c:	4b56      	ldr	r3, [pc, #344]	; (800c668 <CRI_func+0x6b0>)
 800c50e:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800c512:	e9c3 0100 	strd	r0, r1, [r3]

		 u_ref_s = 4 * x_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c516:	2200      	movs	r2, #0
 800c518:	4b42      	ldr	r3, [pc, #264]	; (800c624 <CRI_func+0x66c>)
 800c51a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c51e:	f7f4 f877 	bl	8000610 <__aeabi_dmul>
 800c522:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800c526:	f7f3 fec1 	bl	80002ac <__adddf3>
 800c52a:	2200      	movs	r2, #0
 800c52c:	4604      	mov	r4, r0
 800c52e:	460d      	mov	r5, r1
 800c530:	4b3d      	ldr	r3, [pc, #244]	; (800c628 <CRI_func+0x670>)
 800c532:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800c536:	f7f4 f86b 	bl	8000610 <__aeabi_dmul>
 800c53a:	4602      	mov	r2, r0
 800c53c:	460b      	mov	r3, r1
 800c53e:	4620      	mov	r0, r4
 800c540:	4629      	mov	r1, r5
 800c542:	f7f3 feb3 	bl	80002ac <__adddf3>
 800c546:	2200      	movs	r2, #0
 800c548:	4606      	mov	r6, r0
 800c54a:	460f      	mov	r7, r1
 800c54c:	4b37      	ldr	r3, [pc, #220]	; (800c62c <CRI_func+0x674>)
 800c54e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800c552:	f7f4 f85d 	bl	8000610 <__aeabi_dmul>
 800c556:	4632      	mov	r2, r6
 800c558:	463b      	mov	r3, r7
 800c55a:	f7f4 f983 	bl	8000864 <__aeabi_ddiv>
 800c55e:	4b43      	ldr	r3, [pc, #268]	; (800c66c <CRI_func+0x6b4>)
 800c560:	4604      	mov	r4, r0
 800c562:	460d      	mov	r5, r1
 800c564:	e9c3 4500 	strd	r4, r5, [r3]
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c568:	2200      	movs	r2, #0
 800c56a:	4b31      	ldr	r3, [pc, #196]	; (800c630 <CRI_func+0x678>)
 800c56c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c570:	f7f4 f84e 	bl	8000610 <__aeabi_dmul>
 800c574:	4632      	mov	r2, r6
 800c576:	463b      	mov	r3, r7
 800c578:	f7f4 f974 	bl	8000864 <__aeabi_ddiv>
 800c57c:	4b3c      	ldr	r3, [pc, #240]	; (800c670 <CRI_func+0x6b8>)
 800c57e:	4682      	mov	sl, r0
 800c580:	468b      	mov	fp, r1
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800c582:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
		 v_ref_s = 6 * y_i_ref / (x_i_ref + 15 * y_i_ref + 3 * z_i_ref);
 800c586:	e9c3 ab00 	strd	sl, fp, [r3]
		 L_i_ref = 25 * cbrt(y_i_ref) - 17;
 800c58a:	f016 f829 	bl	80225e0 <cbrt>
 800c58e:	2200      	movs	r2, #0
 800c590:	ec51 0b10 	vmov	r0, r1, d0
 800c594:	4b2f      	ldr	r3, [pc, #188]	; (800c654 <CRI_func+0x69c>)
 800c596:	f7f4 f83b 	bl	8000610 <__aeabi_dmul>
 800c59a:	2200      	movs	r2, #0
 800c59c:	4b2e      	ldr	r3, [pc, #184]	; (800c658 <CRI_func+0x6a0>)
 800c59e:	f7f3 fe83 	bl	80002a8 <__aeabi_dsub>
 800c5a2:	4b34      	ldr	r3, [pc, #208]	; (800c674 <CRI_func+0x6bc>)
 800c5a4:	4606      	mov	r6, r0
 800c5a6:	460f      	mov	r7, r1
 800c5a8:	e9c3 6700 	strd	r6, r7, [r3]
		 u_i_ref = 13 * L_i_ref * (u_ref_s - u_ref);
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	4b2c      	ldr	r3, [pc, #176]	; (800c660 <CRI_func+0x6a8>)
 800c5b0:	f7f4 f82e 	bl	8000610 <__aeabi_dmul>
 800c5b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c5b8:	4680      	mov	r8, r0
 800c5ba:	4689      	mov	r9, r1
 800c5bc:	4620      	mov	r0, r4
 800c5be:	4629      	mov	r1, r5
 800c5c0:	f7f3 fe72 	bl	80002a8 <__aeabi_dsub>
 800c5c4:	4642      	mov	r2, r8
 800c5c6:	464b      	mov	r3, r9
 800c5c8:	f7f4 f822 	bl	8000610 <__aeabi_dmul>
 800c5cc:	4b2a      	ldr	r3, [pc, #168]	; (800c678 <CRI_func+0x6c0>)
 800c5ce:	4604      	mov	r4, r0
 800c5d0:	460d      	mov	r5, r1
 800c5d2:	e9c3 4500 	strd	r4, r5, [r3]
		 v_i_ref = 13 * L_i_ref * (v_ref_s - v_ref);
 800c5d6:	4650      	mov	r0, sl
 800c5d8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800c5dc:	4659      	mov	r1, fp
 800c5de:	f7f3 fe63 	bl	80002a8 <__aeabi_dsub>
 800c5e2:	4642      	mov	r2, r8
 800c5e4:	464b      	mov	r3, r9
 800c5e6:	f7f4 f813 	bl	8000610 <__aeabi_dmul>
 800c5ea:	4b24      	ldr	r3, [pc, #144]	; (800c67c <CRI_func+0x6c4>)
 800c5ec:	4680      	mov	r8, r0
 800c5ee:	4689      	mov	r9, r1
 800c5f0:	e9c3 8900 	strd	r8, r9, [r3]

		 delta_L = L_i_ref - L_i_test;
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800c5fa:	4639      	mov	r1, r7
 800c5fc:	f7f3 fe54 	bl	80002a8 <__aeabi_dsub>
 800c600:	4b1f      	ldr	r3, [pc, #124]	; (800c680 <CRI_func+0x6c8>)
 800c602:	4606      	mov	r6, r0
 800c604:	460f      	mov	r7, r1
 800c606:	e9c3 6700 	strd	r6, r7, [r3]
		 delta_u = u_i_ref - u_i_test;
 800c60a:	4620      	mov	r0, r4
 800c60c:	e9dd 231c 	ldrd	r2, r3, [sp, #112]	; 0x70
 800c610:	4629      	mov	r1, r5
 800c612:	f7f3 fe49 	bl	80002a8 <__aeabi_dsub>
 800c616:	4b1b      	ldr	r3, [pc, #108]	; (800c684 <CRI_func+0x6cc>)
 800c618:	4604      	mov	r4, r0
 800c61a:	460d      	mov	r5, r1
 800c61c:	e9c3 4500 	strd	r4, r5, [r3]
		 delta_v = v_i_ref - v_i_test;	
 800c620:	4640      	mov	r0, r8
 800c622:	e031      	b.n	800c688 <CRI_func+0x6d0>
 800c624:	402e0000 	.word	0x402e0000
 800c628:	40080000 	.word	0x40080000
 800c62c:	40100000 	.word	0x40100000
 800c630:	40180000 	.word	0x40180000
 800c634:	20004be8 	.word	0x20004be8
 800c638:	20004bf8 	.word	0x20004bf8
 800c63c:	20004c08 	.word	0x20004c08
 800c640:	20004be0 	.word	0x20004be0
 800c644:	20004bf0 	.word	0x20004bf0
 800c648:	20004c00 	.word	0x20004c00
 800c64c:	2008bc10 	.word	0x2008bc10
 800c650:	2008bbc0 	.word	0x2008bbc0
 800c654:	40390000 	.word	0x40390000
 800c658:	40310000 	.word	0x40310000
 800c65c:	2008bc38 	.word	0x2008bc38
 800c660:	402a0000 	.word	0x402a0000
 800c664:	2008bbc8 	.word	0x2008bbc8
 800c668:	2008bc08 	.word	0x2008bc08
 800c66c:	2008bc30 	.word	0x2008bc30
 800c670:	2008bbd0 	.word	0x2008bbd0
 800c674:	2008bc18 	.word	0x2008bc18
 800c678:	2008bbe8 	.word	0x2008bbe8
 800c67c:	2008bbb8 	.word	0x2008bbb8
 800c680:	2008bc00 	.word	0x2008bc00
 800c684:	2008bbf8 	.word	0x2008bbf8
 800c688:	e9dd 231e 	ldrd	r2, r3, [sp, #120]	; 0x78
 800c68c:	4649      	mov	r1, r9
 800c68e:	f7f3 fe0b 	bl	80002a8 <__aeabi_dsub>
 800c692:	4bd5      	ldr	r3, [pc, #852]	; (800c9e8 <CRI_func+0xa30>)
 800c694:	4680      	mov	r8, r0
 800c696:	4689      	mov	r9, r1
		
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800c698:	4632      	mov	r2, r6
		 delta_v = v_i_ref - v_i_test;	
 800c69a:	e9c3 8900 	strd	r8, r9, [r3]
		delta_E_CRI = sqrt(delta_L*delta_L + delta_u*delta_u + delta_v*delta_v);
 800c69e:	4630      	mov	r0, r6
 800c6a0:	463b      	mov	r3, r7
 800c6a2:	4639      	mov	r1, r7
 800c6a4:	f7f3 ffb4 	bl	8000610 <__aeabi_dmul>
 800c6a8:	4622      	mov	r2, r4
 800c6aa:	462b      	mov	r3, r5
 800c6ac:	4606      	mov	r6, r0
 800c6ae:	460f      	mov	r7, r1
 800c6b0:	4620      	mov	r0, r4
 800c6b2:	4629      	mov	r1, r5
 800c6b4:	f7f3 ffac 	bl	8000610 <__aeabi_dmul>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	460b      	mov	r3, r1
 800c6bc:	4630      	mov	r0, r6
 800c6be:	4639      	mov	r1, r7
 800c6c0:	f7f3 fdf4 	bl	80002ac <__adddf3>
 800c6c4:	4642      	mov	r2, r8
 800c6c6:	4604      	mov	r4, r0
 800c6c8:	460d      	mov	r5, r1
 800c6ca:	464b      	mov	r3, r9
 800c6cc:	4640      	mov	r0, r8
 800c6ce:	4649      	mov	r1, r9
 800c6d0:	f7f3 ff9e 	bl	8000610 <__aeabi_dmul>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	4620      	mov	r0, r4
 800c6da:	4629      	mov	r1, r5
 800c6dc:	f7f3 fde6 	bl	80002ac <__adddf3>
 800c6e0:	ec41 0b10 	vmov	d0, r0, r1
 800c6e4:	f016 fb30 	bl	8022d48 <sqrt>
 800c6e8:	4bc0      	ldr	r3, [pc, #768]	; (800c9ec <CRI_func+0xa34>)
 800c6ea:	ec51 0b10 	vmov	r0, r1, d0
 800c6ee:	ed83 0b00 	vstr	d0, [r3]
		Ri_temp[i] = 100 - 4.6*delta_E_CRI;
 800c6f2:	a39b      	add	r3, pc, #620	; (adr r3, 800c960 <CRI_func+0x9a8>)
 800c6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f8:	f7f3 ff8a 	bl	8000610 <__aeabi_dmul>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	460b      	mov	r3, r1
 800c700:	2000      	movs	r0, #0
 800c702:	49bb      	ldr	r1, [pc, #748]	; (800c9f0 <CRI_func+0xa38>)
 800c704:	f7f3 fdd0 	bl	80002a8 <__aeabi_dsub>
 800c708:	9a00      	ldr	r2, [sp, #0]
 800c70a:	4bba      	ldr	r3, [pc, #744]	; (800c9f4 <CRI_func+0xa3c>)
 800c70c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c710:	e9c3 0100 	strd	r0, r1, [r3]
		Ri[i] = (int8_t)Ri_temp[i];
 800c714:	f7f4 fa2c 	bl	8000b70 <__aeabi_d2iz>
 800c718:	4bb7      	ldr	r3, [pc, #732]	; (800c9f8 <CRI_func+0xa40>)
 800c71a:	9a00      	ldr	r2, [sp, #0]
 800c71c:	b240      	sxtb	r0, r0
 800c71e:	54d0      	strb	r0, [r2, r3]
		
		if (i < 8)
 800c720:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c722:	2b07      	cmp	r3, #7
 800c724:	f200 8111 	bhi.w	800c94a <CRI_func+0x992>
			Ra_temp += Ri[i];
 800c728:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c72a:	4403      	add	r3, r0
 800c72c:	b21b      	sxth	r3, r3
 800c72e:	9311      	str	r3, [sp, #68]	; 0x44
		if (i == 8)
			R9 = Ri[i];
		if(i < 14)
 800c730:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c732:	2b0e      	cmp	r3, #14
 800c734:	f040 810f 	bne.w	800c956 <CRI_func+0x99e>
			Rall_temp += Ri[i];
		
		memset(CRI_R_temp, 0, sizeof(CRI_R_temp));		
 800c738:	f50d 5084 	add.w	r0, sp, #4224	; 0x1080
 800c73c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c740:	2100      	movs	r1, #0
 800c742:	3008      	adds	r0, #8
 800c744:	f015 fb1b 	bl	8021d7e <memset>
 800c748:	9b00      	ldr	r3, [sp, #0]
 800c74a:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < 15; i++)
 800c74c:	2b0f      	cmp	r3, #15
 800c74e:	9300      	str	r3, [sp, #0]
 800c750:	f47f ac92 	bne.w	800c078 <CRI_func+0xc0>
	}
	
	bar_CRI = 0.9;
 800c754:	a384      	add	r3, pc, #528	; (adr r3, 800c968 <CRI_func+0x9b0>)
 800c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75a:	4ca8      	ldr	r4, [pc, #672]	; (800c9fc <CRI_func+0xa44>)
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c75c:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 800ca00 <CRI_func+0xa48>
 800c760:	210d      	movs	r1, #13
 800c762:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 0.9;
 800c764:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c768:	f008 ff90 	bl	801568c <GUI_Bar_Measure>
	
	Rall_temp /= 14;
 800c76c:	9b10      	ldr	r3, [sp, #64]	; 0x40
	Rall = (int8_t)Rall_temp;
	
	Ra_temp /= 8;
 800c76e:	9a11      	ldr	r2, [sp, #68]	; 0x44
	Rall_temp /= 14;
 800c770:	200e      	movs	r0, #14
 800c772:	fb93 f0f0 	sdiv	r0, r3, r0
	Rall = (int8_t)Rall_temp;
 800c776:	4ba3      	ldr	r3, [pc, #652]	; (800ca04 <CRI_func+0xa4c>)
 800c778:	7018      	strb	r0, [r3, #0]
	Ra_temp /= 8;
 800c77a:	2308      	movs	r3, #8
 800c77c:	fb92 f3f3 	sdiv	r3, r2, r3
	Ra = (int8_t)Ra_temp;
 800c780:	4aa1      	ldr	r2, [pc, #644]	; (800ca08 <CRI_func+0xa50>)
 800c782:	7013      	strb	r3, [r2, #0]
	
	bar_CRI = 1.0;
 800c784:	4ba1      	ldr	r3, [pc, #644]	; (800ca0c <CRI_func+0xa54>)
 800c786:	2200      	movs	r2, #0
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c788:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c78c:	210d      	movs	r1, #13
 800c78e:	2055      	movs	r0, #85	; 0x55
	bar_CRI = 1.0;
 800c790:	e9c4 2300 	strd	r2, r3, [r4]
	GUI_Bar_Measure(85, 13, bar_CRI);
 800c794:	f008 ff7a 	bl	801568c <GUI_Bar_Measure>
 800c798:	f50d 5d02 	add.w	sp, sp, #8320	; 0x2080
 800c79c:	b003      	add	sp, #12
 800c79e:	ecbd 8b08 	vpop	{d8-d11}
 800c7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c7a6:	ee68 8a08 	vmul.f32	s17, s16, s16
 800c7aa:	ee68 7a28 	vmul.f32	s15, s16, s17
 800c7ae:	ee17 0a90 	vmov	r0, s15
 800c7b2:	f7f3 fed9 	bl	8000568 <__aeabi_f2d>
 800c7b6:	4602      	mov	r2, r0
 800c7b8:	460b      	mov	r3, r1
 800c7ba:	a16d      	add	r1, pc, #436	; (adr r1, 800c970 <CRI_func+0x9b8>)
 800c7bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7c0:	f7f4 f850 	bl	8000864 <__aeabi_ddiv>
 800c7c4:	4606      	mov	r6, r0
 800c7c6:	ee18 0a90 	vmov	r0, s17
 800c7ca:	460f      	mov	r7, r1
 800c7cc:	f7f3 fecc 	bl	8000568 <__aeabi_f2d>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	a168      	add	r1, pc, #416	; (adr r1, 800c978 <CRI_func+0x9c0>)
 800c7d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7da:	f7f4 f843 	bl	8000864 <__aeabi_ddiv>
 800c7de:	4602      	mov	r2, r0
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	4639      	mov	r1, r7
 800c7e6:	f7f3 fd61 	bl	80002ac <__adddf3>
 800c7ea:	4606      	mov	r6, r0
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800c7ec:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -4.6070*pow(10, 9) / ((float)CCT_measure*(float)CCT_measure*(float)CCT_measure) + 2.9678*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c7f0:	460f      	mov	r7, r1
					+ 0.09911*pow(10, 3) / (float)CCT_measure + 0.244063;
 800c7f2:	f7f3 feb9 	bl	8000568 <__aeabi_f2d>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	460b      	mov	r3, r1
 800c7fa:	a161      	add	r1, pc, #388	; (adr r1, 800c980 <CRI_func+0x9c8>)
 800c7fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c800:	f7f4 f830 	bl	8000864 <__aeabi_ddiv>
 800c804:	4602      	mov	r2, r0
 800c806:	460b      	mov	r3, r1
 800c808:	4630      	mov	r0, r6
 800c80a:	4639      	mov	r1, r7
 800c80c:	f7f3 fd4e 	bl	80002ac <__adddf3>
 800c810:	a35d      	add	r3, pc, #372	; (adr r3, 800c988 <CRI_func+0x9d0>)
 800c812:	e9d3 2300 	ldrd	r2, r3, [r3]
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800c816:	f7f3 fd49 	bl	80002ac <__adddf3>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800c81a:	e9c4 0100 	strd	r0, r1, [r4]
		yD_CRI = -3 * xD_CRI*xD_CRI + 2.87*xD_CRI - 0.275;
 800c81e:	e9d4 4500 	ldrd	r4, r5, [r4]
 800c822:	2200      	movs	r2, #0
 800c824:	4b7a      	ldr	r3, [pc, #488]	; (800ca10 <CRI_func+0xa58>)
 800c826:	4620      	mov	r0, r4
 800c828:	4629      	mov	r1, r5
 800c82a:	f7f3 fef1 	bl	8000610 <__aeabi_dmul>
 800c82e:	4622      	mov	r2, r4
 800c830:	462b      	mov	r3, r5
 800c832:	f7f3 feed 	bl	8000610 <__aeabi_dmul>
 800c836:	a356      	add	r3, pc, #344	; (adr r3, 800c990 <CRI_func+0x9d8>)
 800c838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83c:	4606      	mov	r6, r0
 800c83e:	460f      	mov	r7, r1
 800c840:	4620      	mov	r0, r4
 800c842:	4629      	mov	r1, r5
 800c844:	f7f3 fee4 	bl	8000610 <__aeabi_dmul>
 800c848:	4602      	mov	r2, r0
 800c84a:	460b      	mov	r3, r1
 800c84c:	4630      	mov	r0, r6
 800c84e:	4639      	mov	r1, r7
 800c850:	f7f3 fd2c 	bl	80002ac <__adddf3>
 800c854:	a350      	add	r3, pc, #320	; (adr r3, 800c998 <CRI_func+0x9e0>)
 800c856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85a:	f7f3 fd25 	bl	80002a8 <__aeabi_dsub>
 800c85e:	4b6d      	ldr	r3, [pc, #436]	; (800ca14 <CRI_func+0xa5c>)
 800c860:	4606      	mov	r6, r0
 800c862:	460f      	mov	r7, r1
 800c864:	e9c3 6700 	strd	r6, r7, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c868:	4620      	mov	r0, r4
 800c86a:	a34d      	add	r3, pc, #308	; (adr r3, 800c9a0 <CRI_func+0x9e8>)
 800c86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c870:	4629      	mov	r1, r5
 800c872:	f7f3 fecd 	bl	8000610 <__aeabi_dmul>
 800c876:	a34c      	add	r3, pc, #304	; (adr r3, 800c9a8 <CRI_func+0x9f0>)
 800c878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c87c:	f7f3 fd16 	bl	80002ac <__adddf3>
 800c880:	a34b      	add	r3, pc, #300	; (adr r3, 800c9b0 <CRI_func+0x9f8>)
 800c882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c886:	4680      	mov	r8, r0
 800c888:	4689      	mov	r9, r1
 800c88a:	4630      	mov	r0, r6
 800c88c:	4639      	mov	r1, r7
 800c88e:	f7f3 febf 	bl	8000610 <__aeabi_dmul>
 800c892:	4602      	mov	r2, r0
 800c894:	460b      	mov	r3, r1
 800c896:	4640      	mov	r0, r8
 800c898:	4649      	mov	r1, r9
 800c89a:	f7f3 fd05 	bl	80002a8 <__aeabi_dsub>
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800c89e:	a346      	add	r3, pc, #280	; (adr r3, 800c9b8 <CRI_func+0xa00>)
 800c8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c8a4:	4680      	mov	r8, r0
 800c8a6:	4689      	mov	r9, r1
		M1_CRI = -1.3515 - 1.7703*xD_CRI + 5.9114*yD_CRI;
 800c8a8:	4620      	mov	r0, r4
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	f7f3 feb0 	bl	8000610 <__aeabi_dmul>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	460b      	mov	r3, r1
 800c8b4:	a142      	add	r1, pc, #264	; (adr r1, 800c9c0 <CRI_func+0xa08>)
 800c8b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c8ba:	f7f3 fcf5 	bl	80002a8 <__aeabi_dsub>
 800c8be:	a342      	add	r3, pc, #264	; (adr r3, 800c9c8 <CRI_func+0xa10>)
 800c8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c4:	e9cd 0100 	strd	r0, r1, [sp]
 800c8c8:	4630      	mov	r0, r6
 800c8ca:	4639      	mov	r1, r7
 800c8cc:	f7f3 fea0 	bl	8000610 <__aeabi_dmul>
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8d8:	f7f3 fce8 	bl	80002ac <__adddf3>
 800c8dc:	f7f4 f990 	bl	8000c00 <__aeabi_d2f>
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c8e0:	f7f3 fe42 	bl	8000568 <__aeabi_f2d>
 800c8e4:	4642      	mov	r2, r8
 800c8e6:	464b      	mov	r3, r9
 800c8e8:	f7f3 ffbc 	bl	8000864 <__aeabi_ddiv>
 800c8ec:	f7f4 f988 	bl	8000c00 <__aeabi_d2f>
 800c8f0:	4b49      	ldr	r3, [pc, #292]	; (800ca18 <CRI_func+0xa60>)
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800c8f2:	4629      	mov	r1, r5
		M1_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c8f4:	6018      	str	r0, [r3, #0]
		M2_CRI = 0.03 - 31.4424*xD_CRI + 30.0717*yD_CRI;
 800c8f6:	a336      	add	r3, pc, #216	; (adr r3, 800c9d0 <CRI_func+0xa18>)
 800c8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8fc:	4620      	mov	r0, r4
 800c8fe:	f7f3 fe87 	bl	8000610 <__aeabi_dmul>
 800c902:	4602      	mov	r2, r0
 800c904:	460b      	mov	r3, r1
 800c906:	a134      	add	r1, pc, #208	; (adr r1, 800c9d8 <CRI_func+0xa20>)
 800c908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c90c:	f7f3 fccc 	bl	80002a8 <__aeabi_dsub>
 800c910:	a333      	add	r3, pc, #204	; (adr r3, 800c9e0 <CRI_func+0xa28>)
 800c912:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c916:	4604      	mov	r4, r0
 800c918:	460d      	mov	r5, r1
 800c91a:	4630      	mov	r0, r6
 800c91c:	4639      	mov	r1, r7
 800c91e:	f7f3 fe77 	bl	8000610 <__aeabi_dmul>
 800c922:	4602      	mov	r2, r0
 800c924:	460b      	mov	r3, r1
 800c926:	4620      	mov	r0, r4
 800c928:	4629      	mov	r1, r5
 800c92a:	f7f3 fcbf 	bl	80002ac <__adddf3>
 800c92e:	f7f4 f967 	bl	8000c00 <__aeabi_d2f>
		M2_CRI /= (0.0241 + 0.2562*xD_CRI - 0.7341*yD_CRI);
 800c932:	f7f3 fe19 	bl	8000568 <__aeabi_f2d>
 800c936:	464b      	mov	r3, r9
 800c938:	4642      	mov	r2, r8
 800c93a:	f7f3 ff93 	bl	8000864 <__aeabi_ddiv>
 800c93e:	f7f4 f95f 	bl	8000c00 <__aeabi_d2f>
 800c942:	4b36      	ldr	r3, [pc, #216]	; (800ca1c <CRI_func+0xa64>)
 800c944:	6018      	str	r0, [r3, #0]
 800c946:	f7ff bb5c 	b.w	800c002 <CRI_func+0x4a>
		if (i == 8)
 800c94a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c94c:	2b08      	cmp	r3, #8
 800c94e:	f47f aeef 	bne.w	800c730 <CRI_func+0x778>
			R9 = Ri[i];
 800c952:	4b33      	ldr	r3, [pc, #204]	; (800ca20 <CRI_func+0xa68>)
 800c954:	7018      	strb	r0, [r3, #0]
			Rall_temp += Ri[i];
 800c956:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c958:	4418      	add	r0, r3
 800c95a:	b203      	sxth	r3, r0
 800c95c:	9310      	str	r3, [sp, #64]	; 0x40
 800c95e:	e6eb      	b.n	800c738 <CRI_func+0x780>
 800c960:	66666666 	.word	0x66666666
 800c964:	40126666 	.word	0x40126666
 800c968:	cccccccd 	.word	0xcccccccd
 800c96c:	3feccccc 	.word	0x3feccccc
 800c970:	dc000000 	.word	0xdc000000
 800c974:	c1f12993 	.word	0xc1f12993
 800c978:	00000000 	.word	0x00000000
 800c97c:	4146a47c 	.word	0x4146a47c
 800c980:	3d70a3d7 	.word	0x3d70a3d7
 800c984:	4058c70a 	.word	0x4058c70a
 800c988:	d594f26b 	.word	0xd594f26b
 800c98c:	3fcf3d74 	.word	0x3fcf3d74
 800c990:	8f5c28f6 	.word	0x8f5c28f6
 800c994:	4006f5c2 	.word	0x4006f5c2
 800c998:	9999999a 	.word	0x9999999a
 800c99c:	3fd19999 	.word	0x3fd19999
 800c9a0:	af4f0d84 	.word	0xaf4f0d84
 800c9a4:	3fd06594 	.word	0x3fd06594
 800c9a8:	9f559b3d 	.word	0x9f559b3d
 800c9ac:	3f98adab 	.word	0x3f98adab
 800c9b0:	487fcb92 	.word	0x487fcb92
 800c9b4:	3fe77dbf 	.word	0x3fe77dbf
 800c9b8:	17c1bda5 	.word	0x17c1bda5
 800c9bc:	3ffc5326 	.word	0x3ffc5326
 800c9c0:	76c8b439 	.word	0x76c8b439
 800c9c4:	bff59fbe 	.word	0xbff59fbe
 800c9c8:	0aa64c30 	.word	0x0aa64c30
 800c9cc:	4017a546 	.word	0x4017a546
 800c9d0:	205bc01a 	.word	0x205bc01a
 800c9d4:	403f7141 	.word	0x403f7141
 800c9d8:	eb851eb8 	.word	0xeb851eb8
 800c9dc:	3f9eb851 	.word	0x3f9eb851
 800c9e0:	ee631f8a 	.word	0xee631f8a
 800c9e4:	403e125a 	.word	0x403e125a
 800c9e8:	2008bcb8 	.word	0x2008bcb8
 800c9ec:	2008bc28 	.word	0x2008bc28
 800c9f0:	40590000 	.word	0x40590000
 800c9f4:	2008bc40 	.word	0x2008bc40
 800c9f8:	20003bcb 	.word	0x20003bcb
 800c9fc:	2008bbf0 	.word	0x2008bbf0
 800ca00:	3f666666 	.word	0x3f666666
 800ca04:	20003bca 	.word	0x20003bca
 800ca08:	20003bc9 	.word	0x20003bc9
 800ca0c:	3ff00000 	.word	0x3ff00000
 800ca10:	c0080000 	.word	0xc0080000
 800ca14:	2008bc20 	.word	0x2008bc20
 800ca18:	20003bc0 	.word	0x20003bc0
 800ca1c:	20003bc4 	.word	0x20003bc4
 800ca20:	20003bc8 	.word	0x20003bc8
		if (CCT_measure < 7000)
 800ca24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca26:	4c30      	ldr	r4, [pc, #192]	; (800cae8 <CRI_func+0xb30>)
 800ca28:	f641 3357 	movw	r3, #6999	; 0x1b57
 800ca2c:	ee07 2a90 	vmov	s15, r2
 800ca30:	429a      	cmp	r2, r3
 800ca32:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800ca36:	f67f aeb6 	bls.w	800c7a6 <CRI_func+0x7ee>
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ca3a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ca3c:	f7f3 fd72 	bl	8000524 <__aeabi_ui2d>
 800ca40:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800cac0 <CRI_func+0xb08>
 800ca44:	ec41 0b10 	vmov	d0, r0, r1
 800ca48:	f016 f806 	bl	8022a58 <pow>
 800ca4c:	ee68 7a08 	vmul.f32	s15, s16, s16
 800ca50:	ed8d 0b00 	vstr	d0, [sp]
 800ca54:	ee17 0a90 	vmov	r0, s15
 800ca58:	f7f3 fd86 	bl	8000568 <__aeabi_f2d>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	460b      	mov	r3, r1
 800ca60:	a119      	add	r1, pc, #100	; (adr r1, 800cac8 <CRI_func+0xb10>)
 800ca62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca66:	f7f3 fefd 	bl	8000864 <__aeabi_ddiv>
 800ca6a:	ed9d 0b00 	vldr	d0, [sp]
 800ca6e:	4606      	mov	r6, r0
 800ca70:	ec53 2b10 	vmov	r2, r3, d0
 800ca74:	460f      	mov	r7, r1
 800ca76:	a116      	add	r1, pc, #88	; (adr r1, 800cad0 <CRI_func+0xb18>)
 800ca78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ca7c:	f7f3 fef2 	bl	8000864 <__aeabi_ddiv>
 800ca80:	4602      	mov	r2, r0
 800ca82:	460b      	mov	r3, r1
 800ca84:	4630      	mov	r0, r6
 800ca86:	4639      	mov	r1, r7
 800ca88:	f7f3 fc10 	bl	80002ac <__adddf3>
 800ca8c:	4606      	mov	r6, r0
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800ca8e:	ee18 0a10 	vmov	r0, s16
			xD_CRI = -2.0064*pow(10, 9) / pow(CCT_measure, 3) + 1.9018*pow(10, 6) / ((float)CCT_measure*(float)CCT_measure)
 800ca92:	460f      	mov	r7, r1
			+ 0.24748*pow(10, 3) / (float)CCT_measure + 0.23704;
 800ca94:	f7f3 fd68 	bl	8000568 <__aeabi_f2d>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	a10e      	add	r1, pc, #56	; (adr r1, 800cad8 <CRI_func+0xb20>)
 800ca9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800caa2:	f7f3 fedf 	bl	8000864 <__aeabi_ddiv>
 800caa6:	4602      	mov	r2, r0
 800caa8:	460b      	mov	r3, r1
 800caaa:	4630      	mov	r0, r6
 800caac:	4639      	mov	r1, r7
 800caae:	f7f3 fbfd 	bl	80002ac <__adddf3>
 800cab2:	a30b      	add	r3, pc, #44	; (adr r3, 800cae0 <CRI_func+0xb28>)
 800cab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab8:	e6ad      	b.n	800c816 <CRI_func+0x85e>
 800caba:	bf00      	nop
 800cabc:	f3af 8000 	nop.w
 800cac0:	00000000 	.word	0x00000000
 800cac4:	40080000 	.word	0x40080000
 800cac8:	00000000 	.word	0x00000000
 800cacc:	413d04e8 	.word	0x413d04e8
 800cad0:	00000001 	.word	0x00000001
 800cad4:	c1dde5cf 	.word	0xc1dde5cf
 800cad8:	28f5c290 	.word	0x28f5c290
 800cadc:	406eef5c 	.word	0x406eef5c
 800cae0:	a3ec02f3 	.word	0xa3ec02f3
 800cae4:	3fce5753 	.word	0x3fce5753
 800cae8:	2008bbd8 	.word	0x2008bbd8

0800caec <CRI_Axes>:
#include "CRI_graph.h"
uint8_t TFT_direction = 0x00;



void CRI_Axes(uint8_t direction){
 800caec:	b513      	push	{r0, r1, r4, lr}
	if (direction == 0x00)
 800caee:	bbb8      	cbnz	r0, 800cb60 <CRI_Axes+0x74>
	{
		TFT_FillRectangle(16, 95, 18, 412, TFT_White); //Yline
 800caf0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800caf4:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 800caf8:	2212      	movs	r2, #18
 800cafa:	215f      	movs	r1, #95	; 0x5f
 800cafc:	2010      	movs	r0, #16
 800cafe:	9400      	str	r4, [sp, #0]
 800cb00:	f011 fc03 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(16, 412, 270, 414, TFT_White);//XLine
 800cb04:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 800cb08:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800cb0c:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800cb10:	2010      	movs	r0, #16
 800cb12:	9400      	str	r4, [sp, #0]
 800cb14:	f011 fbf9 	bl	801e30a <TFT_FillRectangle>
		
		TFT_DrawLine(16, 334, 268, 334, TFT_White); //25
 800cb18:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cb22:	2010      	movs	r0, #16
 800cb24:	9400      	str	r4, [sp, #0]
 800cb26:	f011 fb93 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(16, 257, 268, 257, TFT_White); //50
 800cb2a:	f240 1301 	movw	r3, #257	; 0x101
 800cb2e:	4619      	mov	r1, r3
 800cb30:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cb34:	2010      	movs	r0, #16
 800cb36:	9400      	str	r4, [sp, #0]
 800cb38:	f011 fb8a 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(16, 181, 268, 181, TFT_White); //75
 800cb3c:	23b5      	movs	r3, #181	; 0xb5
 800cb3e:	4619      	mov	r1, r3
 800cb40:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cb44:	2010      	movs	r0, #16
 800cb46:	9400      	str	r4, [sp, #0]
 800cb48:	f011 fb82 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(16, 105, 268, 105, TFT_White); //100
 800cb4c:	2369      	movs	r3, #105	; 0x69
 800cb4e:	9400      	str	r4, [sp, #0]
 800cb50:	f44f 7286 	mov.w	r2, #268	; 0x10c
 800cb54:	4619      	mov	r1, r3
 800cb56:	2010      	movs	r0, #16
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
		
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800cb58:	f011 fb7a 	bl	801e250 <TFT_DrawLine>
		
	}
}
 800cb5c:	b002      	add	sp, #8
 800cb5e:	bd10      	pop	{r4, pc}
	} else if (direction == 0x01)
 800cb60:	2801      	cmp	r0, #1
 800cb62:	d131      	bne.n	800cbc8 <CRI_Axes+0xdc>
		TFT_FillRectangle(253, 70, 255, 406, TFT_White); //XLine
 800cb64:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800cb68:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cb6c:	22ff      	movs	r2, #255	; 0xff
 800cb6e:	2146      	movs	r1, #70	; 0x46
 800cb70:	20fd      	movs	r0, #253	; 0xfd
 800cb72:	9400      	str	r4, [sp, #0]
 800cb74:	f011 fbc9 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_White); //Yline
 800cb78:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cb7c:	22ff      	movs	r2, #255	; 0xff
 800cb7e:	f44f 71ca 	mov.w	r1, #404	; 0x194
 800cb82:	2028      	movs	r0, #40	; 0x28
 800cb84:	9400      	str	r4, [sp, #0]
 800cb86:	f011 fbc0 	bl	801e30a <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_White); //25
 800cb8a:	22cc      	movs	r2, #204	; 0xcc
 800cb8c:	4610      	mov	r0, r2
 800cb8e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cb92:	2146      	movs	r1, #70	; 0x46
 800cb94:	9400      	str	r4, [sp, #0]
 800cb96:	f011 fb5b 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_White); //50
 800cb9a:	2297      	movs	r2, #151	; 0x97
 800cb9c:	4610      	mov	r0, r2
 800cb9e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cba2:	2146      	movs	r1, #70	; 0x46
 800cba4:	9400      	str	r4, [sp, #0]
 800cba6:	f011 fb53 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_White); //75
 800cbaa:	2262      	movs	r2, #98	; 0x62
 800cbac:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cbb0:	4610      	mov	r0, r2
 800cbb2:	9400      	str	r4, [sp, #0]
 800cbb4:	2146      	movs	r1, #70	; 0x46
 800cbb6:	f011 fb4b 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_White); //100
 800cbba:	9400      	str	r4, [sp, #0]
 800cbbc:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cbc0:	222d      	movs	r2, #45	; 0x2d
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800cbc2:	2146      	movs	r1, #70	; 0x46
 800cbc4:	4610      	mov	r0, r2
 800cbc6:	e7c7      	b.n	800cb58 <CRI_Axes+0x6c>
	} else if (direction == 0x02)
 800cbc8:	2802      	cmp	r0, #2
 800cbca:	d1c7      	bne.n	800cb5c <CRI_Axes+0x70>
		TFT_FillRectangle(18, 74, 16, 406, TFT_White); //XLine
 800cbcc:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800cbd0:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cbd4:	2210      	movs	r2, #16
 800cbd6:	214a      	movs	r1, #74	; 0x4a
 800cbd8:	2012      	movs	r0, #18
 800cbda:	9400      	str	r4, [sp, #0]
 800cbdc:	f011 fb95 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_White); //Yline
 800cbe0:	234c      	movs	r3, #76	; 0x4c
 800cbe2:	22e8      	movs	r2, #232	; 0xe8
 800cbe4:	214a      	movs	r1, #74	; 0x4a
 800cbe6:	2011      	movs	r0, #17
 800cbe8:	9400      	str	r4, [sp, #0]
 800cbea:	f011 fb8e 	bl	801e30a <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_White); //25
 800cbee:	2244      	movs	r2, #68	; 0x44
 800cbf0:	4610      	mov	r0, r2
 800cbf2:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cbf6:	2146      	movs	r1, #70	; 0x46
 800cbf8:	9400      	str	r4, [sp, #0]
 800cbfa:	f011 fb29 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_White); //50
 800cbfe:	2279      	movs	r2, #121	; 0x79
 800cc00:	4610      	mov	r0, r2
 800cc02:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cc06:	2146      	movs	r1, #70	; 0x46
 800cc08:	9400      	str	r4, [sp, #0]
 800cc0a:	f011 fb21 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_White); //75
 800cc0e:	22ae      	movs	r2, #174	; 0xae
 800cc10:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cc14:	4610      	mov	r0, r2
 800cc16:	9400      	str	r4, [sp, #0]
 800cc18:	2146      	movs	r1, #70	; 0x46
 800cc1a:	f011 fb19 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_White); //100
 800cc1e:	9400      	str	r4, [sp, #0]
 800cc20:	f44f 73cb 	mov.w	r3, #406	; 0x196
 800cc24:	22e3      	movs	r2, #227	; 0xe3
 800cc26:	e7cc      	b.n	800cbc2 <CRI_Axes+0xd6>

0800cc28 <CRI_Axes_Measure>:

void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800cc28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	char buffer[2] = {0};
 800cc2c:	ac02      	add	r4, sp, #8
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800cc2e:	461e      	mov	r6, r3
	char buffer[2] = {0};
 800cc30:	2300      	movs	r3, #0
void CRI_Axes_Measure(uint8_t direction, int8_t Ra, int8_t Rall, int8_t R9){
 800cc32:	4688      	mov	r8, r1
 800cc34:	4617      	mov	r7, r2
	char buffer[2] = {0};
 800cc36:	f824 3d04 	strh.w	r3, [r4, #-4]!
	
	
if (direction == 0x00)
 800cc3a:	2800      	cmp	r0, #0
 800cc3c:	d161      	bne.n	800cd02 <CRI_Axes_Measure+0xda>
	{
		TFT_SetTextColor(TFT_White);
 800cc3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cc42:	f011 fd91 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800cc46:	2063      	movs	r0, #99	; 0x63
 800cc48:	f011 fd94 	bl	801e774 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800cc4c:	4861      	ldr	r0, [pc, #388]	; (800cdd4 <CRI_Axes_Measure+0x1ac>)
 800cc4e:	f011 fd85 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(17, 70, 'a');
 800cc52:	2261      	movs	r2, #97	; 0x61
 800cc54:	2146      	movs	r1, #70	; 0x46
 800cc56:	2011      	movs	r0, #17
 800cc58:	f011 fe4a 	bl	801e8f0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800cc5c:	485e      	ldr	r0, [pc, #376]	; (800cdd8 <CRI_Axes_Measure+0x1b0>)
 800cc5e:	f011 fd7d 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(3, 70-2, 'R');
 800cc62:	2252      	movs	r2, #82	; 0x52
 800cc64:	2144      	movs	r1, #68	; 0x44
 800cc66:	2003      	movs	r0, #3
 800cc68:	f011 fe42 	bl	801e8f0 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Ra);
 800cc6c:	4642      	mov	r2, r8
 800cc6e:	495b      	ldr	r1, [pc, #364]	; (800cddc <CRI_Axes_Measure+0x1b4>)
 800cc70:	4620      	mov	r0, r4
 800cc72:	f015 f88d 	bl	8021d90 <siprintf>
		TFT_DisplayString(35, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800cc76:	2303      	movs	r3, #3
 800cc78:	4622      	mov	r2, r4
 800cc7a:	2144      	movs	r1, #68	; 0x44
 800cc7c:	2023      	movs	r0, #35	; 0x23
 800cc7e:	f011 fe8f 	bl	801e9a0 <TFT_DisplayString>
		
		TFT_SetFont(&Font16EN_arch_small);
 800cc82:	4854      	ldr	r0, [pc, #336]	; (800cdd4 <CRI_Axes_Measure+0x1ac>)
 800cc84:	f011 fd6a 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(113, 70, 'l');
 800cc88:	226c      	movs	r2, #108	; 0x6c
 800cc8a:	2146      	movs	r1, #70	; 0x46
 800cc8c:	2071      	movs	r0, #113	; 0x71
 800cc8e:	f011 fe2f 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(122, 70, 'l');
 800cc92:	226c      	movs	r2, #108	; 0x6c
 800cc94:	2146      	movs	r1, #70	; 0x46
 800cc96:	207a      	movs	r0, #122	; 0x7a
 800cc98:	f011 fe2a 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(102, 70, 'a');
 800cc9c:	2261      	movs	r2, #97	; 0x61
 800cc9e:	2146      	movs	r1, #70	; 0x46
 800cca0:	2066      	movs	r0, #102	; 0x66
 800cca2:	f011 fe25 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_SetFont(&Font16EN_arch_big);
 800cca6:	484c      	ldr	r0, [pc, #304]	; (800cdd8 <CRI_Axes_Measure+0x1b0>)
 800cca8:	f011 fd58 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(86, 70-2, 'R');
 800ccac:	2252      	movs	r2, #82	; 0x52
 800ccae:	2144      	movs	r1, #68	; 0x44
 800ccb0:	2056      	movs	r0, #86	; 0x56
 800ccb2:	f011 fe1d 	bl	801e8f0 <TFT_DrawChar>
		
		sprintf (buffer, "%d", Rall);
 800ccb6:	463a      	mov	r2, r7
 800ccb8:	4948      	ldr	r1, [pc, #288]	; (800cddc <CRI_Axes_Measure+0x1b4>)
 800ccba:	4620      	mov	r0, r4
 800ccbc:	f015 f868 	bl	8021d90 <siprintf>
		TFT_DisplayString(138, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800ccc0:	2303      	movs	r3, #3
 800ccc2:	4622      	mov	r2, r4
 800ccc4:	2144      	movs	r1, #68	; 0x44
 800ccc6:	208a      	movs	r0, #138	; 0x8a
 800ccc8:	f011 fe6a 	bl	801e9a0 <TFT_DisplayString>
		

		
		sprintf (buffer, "%d", R9);
 800cccc:	4632      	mov	r2, r6
 800ccce:	4943      	ldr	r1, [pc, #268]	; (800cddc <CRI_Axes_Measure+0x1b4>)
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	f015 f85d 	bl	8021d90 <siprintf>
		TFT_DisplayString(R9 < 0 ? 215 : 220, 70-2, (uint8_t *)buffer, LEFT_MODE);
 800ccd6:	2e00      	cmp	r6, #0
 800ccd8:	bfb4      	ite	lt
 800ccda:	20d7      	movlt	r0, #215	; 0xd7
 800ccdc:	20dc      	movge	r0, #220	; 0xdc
 800ccde:	2303      	movs	r3, #3
 800cce0:	4622      	mov	r2, r4
 800cce2:	2144      	movs	r1, #68	; 0x44
 800cce4:	f011 fe5c 	bl	801e9a0 <TFT_DisplayString>
		TFT_DrawChar(183, 70-2, 'R');
 800cce8:	2252      	movs	r2, #82	; 0x52
 800ccea:	2144      	movs	r1, #68	; 0x44
 800ccec:	20b7      	movs	r0, #183	; 0xb7
 800ccee:	f011 fdff 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(198, 70-2, '9');
 800ccf2:	2239      	movs	r2, #57	; 0x39
 800ccf4:	2144      	movs	r1, #68	; 0x44
 800ccf6:	20c6      	movs	r0, #198	; 0xc6
 800ccf8:	f011 fdfa 	bl	801e8f0 <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
	
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
		TFT_direction = 0x00;
	}
}
 800ccfc:	b002      	add	sp, #8
 800ccfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd02:	4d37      	ldr	r5, [pc, #220]	; (800cde0 <CRI_Axes_Measure+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800cd04:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 800cd06:	bf14      	ite	ne
 800cd08:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800cd0a:	7028      	strbeq	r0, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800cd0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800cd10:	bf18      	it	ne
 800cd12:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800cd14:	f011 fd28 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800cd18:	2063      	movs	r0, #99	; 0x63
 800cd1a:	f011 fd2b 	bl	801e774 <TFT_SetBackColor>
		TFT_SetFont(&Font16EN_arch_small);
 800cd1e:	482d      	ldr	r0, [pc, #180]	; (800cdd4 <CRI_Axes_Measure+0x1ac>)
 800cd20:	f011 fd1c 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(100, 16, 'a');
 800cd24:	2261      	movs	r2, #97	; 0x61
 800cd26:	2110      	movs	r1, #16
 800cd28:	2064      	movs	r0, #100	; 0x64
 800cd2a:	f011 fde1 	bl	801e8f0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800cd2e:	482a      	ldr	r0, [pc, #168]	; (800cdd8 <CRI_Axes_Measure+0x1b0>)
 800cd30:	f011 fd14 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(85, 16-2, 'R');
 800cd34:	2252      	movs	r2, #82	; 0x52
 800cd36:	210e      	movs	r1, #14
 800cd38:	2055      	movs	r0, #85	; 0x55
 800cd3a:	f011 fdd9 	bl	801e8f0 <TFT_DrawChar>
		sprintf (buffer, "%d", Ra);
 800cd3e:	4642      	mov	r2, r8
 800cd40:	4926      	ldr	r1, [pc, #152]	; (800cddc <CRI_Axes_Measure+0x1b4>)
 800cd42:	4620      	mov	r0, r4
 800cd44:	f015 f824 	bl	8021d90 <siprintf>
		TFT_DisplayString(125, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cd48:	2303      	movs	r3, #3
 800cd4a:	4622      	mov	r2, r4
 800cd4c:	210e      	movs	r1, #14
 800cd4e:	207d      	movs	r0, #125	; 0x7d
 800cd50:	f011 fe26 	bl	801e9a0 <TFT_DisplayString>
		TFT_SetFont(&Font16EN_arch_small);
 800cd54:	481f      	ldr	r0, [pc, #124]	; (800cdd4 <CRI_Axes_Measure+0x1ac>)
 800cd56:	f011 fd01 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(221, 16, 'l');
 800cd5a:	226c      	movs	r2, #108	; 0x6c
 800cd5c:	2110      	movs	r1, #16
 800cd5e:	20dd      	movs	r0, #221	; 0xdd
 800cd60:	f011 fdc6 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(230, 16, 'l');
 800cd64:	226c      	movs	r2, #108	; 0x6c
 800cd66:	2110      	movs	r1, #16
 800cd68:	20e6      	movs	r0, #230	; 0xe6
 800cd6a:	f011 fdc1 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(210, 16, 'a');
 800cd6e:	2261      	movs	r2, #97	; 0x61
 800cd70:	2110      	movs	r1, #16
 800cd72:	20d2      	movs	r0, #210	; 0xd2
 800cd74:	f011 fdbc 	bl	801e8f0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_big);
 800cd78:	4817      	ldr	r0, [pc, #92]	; (800cdd8 <CRI_Axes_Measure+0x1b0>)
 800cd7a:	f011 fcef 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(195, 16-2, 'R');
 800cd7e:	2252      	movs	r2, #82	; 0x52
 800cd80:	210e      	movs	r1, #14
 800cd82:	20c3      	movs	r0, #195	; 0xc3
 800cd84:	f011 fdb4 	bl	801e8f0 <TFT_DrawChar>
		sprintf (buffer, "%d", Rall);
 800cd88:	463a      	mov	r2, r7
 800cd8a:	4914      	ldr	r1, [pc, #80]	; (800cddc <CRI_Axes_Measure+0x1b4>)
 800cd8c:	4620      	mov	r0, r4
 800cd8e:	f014 ffff 	bl	8021d90 <siprintf>
		TFT_DisplayString(255, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cd92:	2303      	movs	r3, #3
 800cd94:	4622      	mov	r2, r4
 800cd96:	210e      	movs	r1, #14
 800cd98:	20ff      	movs	r0, #255	; 0xff
 800cd9a:	f011 fe01 	bl	801e9a0 <TFT_DisplayString>
		TFT_DrawChar(325, 16-2, 'R');
 800cd9e:	2252      	movs	r2, #82	; 0x52
 800cda0:	210e      	movs	r1, #14
 800cda2:	f240 1045 	movw	r0, #325	; 0x145
 800cda6:	f011 fda3 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(340, 16-2, '9');
 800cdaa:	2239      	movs	r2, #57	; 0x39
 800cdac:	210e      	movs	r1, #14
 800cdae:	f44f 70aa 	mov.w	r0, #340	; 0x154
 800cdb2:	f011 fd9d 	bl	801e8f0 <TFT_DrawChar>
		sprintf (buffer, "%d", R9);
 800cdb6:	4632      	mov	r2, r6
 800cdb8:	4908      	ldr	r1, [pc, #32]	; (800cddc <CRI_Axes_Measure+0x1b4>)
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f014 ffe8 	bl	8021d90 <siprintf>
		TFT_DisplayString(365, 16-2, (uint8_t *)buffer, LEFT_MODE);
 800cdc0:	2303      	movs	r3, #3
 800cdc2:	4622      	mov	r2, r4
 800cdc4:	210e      	movs	r1, #14
 800cdc6:	f240 106d 	movw	r0, #365	; 0x16d
 800cdca:	f011 fde9 	bl	801e9a0 <TFT_DisplayString>
		TFT_direction = 0x00;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	702b      	strb	r3, [r5, #0]
}
 800cdd2:	e793      	b.n	800ccfc <CRI_Axes_Measure+0xd4>
 800cdd4:	200001c0 	.word	0x200001c0
 800cdd8:	200001b0 	.word	0x200001b0
 800cddc:	08024471 	.word	0x08024471
 800cde0:	20004c10 	.word	0x20004c10

0800cde4 <CRI_Axes_Text>:

void CRI_Axes_Text(uint8_t direction){
 800cde4:	b538      	push	{r3, r4, r5, lr}
	if (direction == 0x00)
 800cde6:	4604      	mov	r4, r0
 800cde8:	2800      	cmp	r0, #0
 800cdea:	f040 811f 	bne.w	800d02c <CRI_Axes_Text+0x248>
	{
		
		//max Y = 105    min Y = 410
		TFT_SetFont(&Font6EN_arch_big);
 800cdee:	488e      	ldr	r0, [pc, #568]	; (800d028 <CRI_Axes_Text+0x244>)
 800cdf0:	f011 fcb4 	bl	801e75c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800cdf4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800cdf8:	f011 fcb6 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800cdfc:	2063      	movs	r0, #99	; 0x63
 800cdfe:	f011 fcb9 	bl	801e774 <TFT_SetBackColor>
		
		TFT_DrawChar(24, 415, 'R');
 800ce02:	2252      	movs	r2, #82	; 0x52
 800ce04:	f240 119f 	movw	r1, #415	; 0x19f
 800ce08:	2018      	movs	r0, #24
 800ce0a:	f011 fd71 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(30, 415, '1');
 800ce0e:	2231      	movs	r2, #49	; 0x31
 800ce10:	f240 119f 	movw	r1, #415	; 0x19f
 800ce14:	201e      	movs	r0, #30
 800ce16:	f011 fd6b 	bl	801e8f0 <TFT_DrawChar>

		TFT_DrawChar(40, 415, 'R');
 800ce1a:	2252      	movs	r2, #82	; 0x52
 800ce1c:	f240 119f 	movw	r1, #415	; 0x19f
 800ce20:	2028      	movs	r0, #40	; 0x28
 800ce22:	f011 fd65 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(46, 415, '2');
 800ce26:	2232      	movs	r2, #50	; 0x32
 800ce28:	f240 119f 	movw	r1, #415	; 0x19f
 800ce2c:	202e      	movs	r0, #46	; 0x2e
 800ce2e:	f011 fd5f 	bl	801e8f0 <TFT_DrawChar>

		TFT_DrawChar(56, 415, 'R');
 800ce32:	2252      	movs	r2, #82	; 0x52
 800ce34:	f240 119f 	movw	r1, #415	; 0x19f
 800ce38:	2038      	movs	r0, #56	; 0x38
 800ce3a:	f011 fd59 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(62, 415, '3');
 800ce3e:	2233      	movs	r2, #51	; 0x33
 800ce40:	f240 119f 	movw	r1, #415	; 0x19f
 800ce44:	203e      	movs	r0, #62	; 0x3e
 800ce46:	f011 fd53 	bl	801e8f0 <TFT_DrawChar>

		TFT_DrawChar(72, 415, 'R');
 800ce4a:	2252      	movs	r2, #82	; 0x52
 800ce4c:	f240 119f 	movw	r1, #415	; 0x19f
 800ce50:	2048      	movs	r0, #72	; 0x48
 800ce52:	f011 fd4d 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(78, 415, '4');
 800ce56:	2234      	movs	r2, #52	; 0x34
 800ce58:	f240 119f 	movw	r1, #415	; 0x19f
 800ce5c:	204e      	movs	r0, #78	; 0x4e
 800ce5e:	f011 fd47 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(88, 415, 'R');
 800ce62:	2252      	movs	r2, #82	; 0x52
 800ce64:	f240 119f 	movw	r1, #415	; 0x19f
 800ce68:	2058      	movs	r0, #88	; 0x58
 800ce6a:	f011 fd41 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(94, 415, '5');
 800ce6e:	2235      	movs	r2, #53	; 0x35
 800ce70:	f240 119f 	movw	r1, #415	; 0x19f
 800ce74:	205e      	movs	r0, #94	; 0x5e
 800ce76:	f011 fd3b 	bl	801e8f0 <TFT_DrawChar>


		TFT_DrawChar(104, 415, 'R');
 800ce7a:	2252      	movs	r2, #82	; 0x52
 800ce7c:	f240 119f 	movw	r1, #415	; 0x19f
 800ce80:	2068      	movs	r0, #104	; 0x68
 800ce82:	f011 fd35 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(110, 415, '6');
 800ce86:	2236      	movs	r2, #54	; 0x36
 800ce88:	f240 119f 	movw	r1, #415	; 0x19f
 800ce8c:	206e      	movs	r0, #110	; 0x6e
 800ce8e:	f011 fd2f 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(120, 415, 'R');
 800ce92:	2252      	movs	r2, #82	; 0x52
 800ce94:	f240 119f 	movw	r1, #415	; 0x19f
 800ce98:	2078      	movs	r0, #120	; 0x78
 800ce9a:	f011 fd29 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(126, 415, '7');
 800ce9e:	2237      	movs	r2, #55	; 0x37
 800cea0:	f240 119f 	movw	r1, #415	; 0x19f
 800cea4:	207e      	movs	r0, #126	; 0x7e
 800cea6:	f011 fd23 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(136, 415, 'R');
 800ceaa:	2252      	movs	r2, #82	; 0x52
 800ceac:	f240 119f 	movw	r1, #415	; 0x19f
 800ceb0:	2088      	movs	r0, #136	; 0x88
 800ceb2:	f011 fd1d 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(142, 415, '8');
 800ceb6:	2238      	movs	r2, #56	; 0x38
 800ceb8:	f240 119f 	movw	r1, #415	; 0x19f
 800cebc:	208e      	movs	r0, #142	; 0x8e
 800cebe:	f011 fd17 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(152, 415, 'R');
 800cec2:	2252      	movs	r2, #82	; 0x52
 800cec4:	f240 119f 	movw	r1, #415	; 0x19f
 800cec8:	2098      	movs	r0, #152	; 0x98
 800ceca:	f011 fd11 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(158, 415, '9');
 800cece:	2239      	movs	r2, #57	; 0x39
 800ced0:	f240 119f 	movw	r1, #415	; 0x19f
 800ced4:	209e      	movs	r0, #158	; 0x9e
 800ced6:	f011 fd0b 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(173, 415, '1');
 800ceda:	2231      	movs	r2, #49	; 0x31
 800cedc:	f240 119f 	movw	r1, #415	; 0x19f
 800cee0:	20ad      	movs	r0, #173	; 0xad
 800cee2:	f011 fd05 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(168, 415, 'R');
 800cee6:	2252      	movs	r2, #82	; 0x52
 800cee8:	f240 119f 	movw	r1, #415	; 0x19f
 800ceec:	20a8      	movs	r0, #168	; 0xa8
 800ceee:	f011 fcff 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(177, 415, '0');
 800cef2:	2230      	movs	r2, #48	; 0x30
 800cef4:	f240 119f 	movw	r1, #415	; 0x19f
 800cef8:	20b1      	movs	r0, #177	; 0xb1
 800cefa:	f011 fcf9 	bl	801e8f0 <TFT_DrawChar>


		TFT_DrawChar(189, 415, '1');
 800cefe:	2231      	movs	r2, #49	; 0x31
 800cf00:	f240 119f 	movw	r1, #415	; 0x19f
 800cf04:	20bd      	movs	r0, #189	; 0xbd
 800cf06:	f011 fcf3 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(184, 415, 'R');
 800cf0a:	2252      	movs	r2, #82	; 0x52
 800cf0c:	f240 119f 	movw	r1, #415	; 0x19f
 800cf10:	20b8      	movs	r0, #184	; 0xb8
 800cf12:	f011 fced 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(194, 415, '1');
 800cf16:	2231      	movs	r2, #49	; 0x31
 800cf18:	f240 119f 	movw	r1, #415	; 0x19f
 800cf1c:	20c2      	movs	r0, #194	; 0xc2
 800cf1e:	f011 fce7 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(205, 415, '1');
 800cf22:	2231      	movs	r2, #49	; 0x31
 800cf24:	f240 119f 	movw	r1, #415	; 0x19f
 800cf28:	20cd      	movs	r0, #205	; 0xcd
 800cf2a:	f011 fce1 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(200, 415, 'R');
 800cf2e:	2252      	movs	r2, #82	; 0x52
 800cf30:	f240 119f 	movw	r1, #415	; 0x19f
 800cf34:	20c8      	movs	r0, #200	; 0xc8
 800cf36:	f011 fcdb 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(209, 415, '2');
 800cf3a:	2232      	movs	r2, #50	; 0x32
 800cf3c:	f240 119f 	movw	r1, #415	; 0x19f
 800cf40:	20d1      	movs	r0, #209	; 0xd1
 800cf42:	f011 fcd5 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(221, 415, '1');
 800cf46:	2231      	movs	r2, #49	; 0x31
 800cf48:	f240 119f 	movw	r1, #415	; 0x19f
 800cf4c:	20dd      	movs	r0, #221	; 0xdd
 800cf4e:	f011 fccf 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(216, 415, 'R');
 800cf52:	2252      	movs	r2, #82	; 0x52
 800cf54:	f240 119f 	movw	r1, #415	; 0x19f
 800cf58:	20d8      	movs	r0, #216	; 0xd8
 800cf5a:	f011 fcc9 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(225, 415, '3');
 800cf5e:	2233      	movs	r2, #51	; 0x33
 800cf60:	f240 119f 	movw	r1, #415	; 0x19f
 800cf64:	20e1      	movs	r0, #225	; 0xe1
 800cf66:	f011 fcc3 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(237, 415, '1');
 800cf6a:	2231      	movs	r2, #49	; 0x31
 800cf6c:	f240 119f 	movw	r1, #415	; 0x19f
 800cf70:	20ed      	movs	r0, #237	; 0xed
 800cf72:	f011 fcbd 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(232, 415, 'R');
 800cf76:	2252      	movs	r2, #82	; 0x52
 800cf78:	f240 119f 	movw	r1, #415	; 0x19f
 800cf7c:	20e8      	movs	r0, #232	; 0xe8
 800cf7e:	f011 fcb7 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(241, 415, '4');
 800cf82:	2234      	movs	r2, #52	; 0x34
 800cf84:	f240 119f 	movw	r1, #415	; 0x19f
 800cf88:	20f1      	movs	r0, #241	; 0xf1
 800cf8a:	f011 fcb1 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(253, 415, '1');		
 800cf8e:	2231      	movs	r2, #49	; 0x31
 800cf90:	f240 119f 	movw	r1, #415	; 0x19f
 800cf94:	20fd      	movs	r0, #253	; 0xfd
 800cf96:	f011 fcab 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(248, 415, 'R');
 800cf9a:	2252      	movs	r2, #82	; 0x52
 800cf9c:	f240 119f 	movw	r1, #415	; 0x19f
 800cfa0:	20f8      	movs	r0, #248	; 0xf8
 800cfa2:	f011 fca5 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(257, 415, '5');
 800cfa6:	2235      	movs	r2, #53	; 0x35
 800cfa8:	f240 119f 	movw	r1, #415	; 0x19f
 800cfac:	f240 1001 	movw	r0, #257	; 0x101
 800cfb0:	f011 fc9e 	bl	801e8f0 <TFT_DrawChar>

		TFT_DrawChar(5, 410, '0');
 800cfb4:	2230      	movs	r2, #48	; 0x30
 800cfb6:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800cfba:	2005      	movs	r0, #5
 800cfbc:	f011 fc98 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(1, 334, '2');
 800cfc0:	2232      	movs	r2, #50	; 0x32
 800cfc2:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800cfc6:	2001      	movs	r0, #1
 800cfc8:	f011 fc92 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(7, 334, '5');
 800cfcc:	2235      	movs	r2, #53	; 0x35
 800cfce:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800cfd2:	2007      	movs	r0, #7
 800cfd4:	f011 fc8c 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(1, 257, '5');
 800cfd8:	2235      	movs	r2, #53	; 0x35
 800cfda:	f240 1101 	movw	r1, #257	; 0x101
 800cfde:	2001      	movs	r0, #1
 800cfe0:	f011 fc86 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(7, 257, '0');
 800cfe4:	2230      	movs	r2, #48	; 0x30
 800cfe6:	f240 1101 	movw	r1, #257	; 0x101
 800cfea:	2007      	movs	r0, #7
 800cfec:	f011 fc80 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(1, 181, '7');
 800cff0:	2237      	movs	r2, #55	; 0x37
 800cff2:	21b5      	movs	r1, #181	; 0xb5
 800cff4:	2001      	movs	r0, #1
 800cff6:	f011 fc7b 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(7, 181, '5');
 800cffa:	2235      	movs	r2, #53	; 0x35
 800cffc:	21b5      	movs	r1, #181	; 0xb5
 800cffe:	2007      	movs	r0, #7
 800d000:	f011 fc76 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 800d004:	4620      	mov	r0, r4
 800d006:	2231      	movs	r2, #49	; 0x31
 800d008:	2169      	movs	r1, #105	; 0x69
 800d00a:	f011 fc71 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '0');
 800d00e:	2230      	movs	r2, #48	; 0x30
 800d010:	2169      	movs	r1, #105	; 0x69
 800d012:	2004      	movs	r0, #4
 800d014:	f011 fc6c 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 800d018:	2230      	movs	r2, #48	; 0x30
 800d01a:	2169      	movs	r1, #105	; 0x69
 800d01c:	2009      	movs	r0, #9
		TFT_DrawChar(62, 43, '0');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 800d01e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(9, 105, '0');
 800d022:	f011 bc65 	b.w	801e8f0 <TFT_DrawChar>
 800d026:	bf00      	nop
 800d028:	20000210 	.word	0x20000210
 800d02c:	4d98      	ldr	r5, [pc, #608]	; (800d290 <CRI_Axes_Text+0x4ac>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d02e:	2801      	cmp	r0, #1
 800d030:	bf0c      	ite	eq
 800d032:	7028      	strbeq	r0, [r5, #0]
		else {TFT_direction = 0x02;}
 800d034:	2302      	movne	r3, #2
		TFT_SetTextColor(TFT_White);
 800d036:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 800d03a:	bf18      	it	ne
 800d03c:	702b      	strbne	r3, [r5, #0]
		TFT_SetTextColor(TFT_White);
 800d03e:	f011 fb93 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d042:	2063      	movs	r0, #99	; 0x63
 800d044:	f011 fb96 	bl	801e774 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 800d048:	4892      	ldr	r0, [pc, #584]	; (800d294 <CRI_Axes_Text+0x4b0>)
 800d04a:	f011 fb87 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(87, 258, 'R');
 800d04e:	2252      	movs	r2, #82	; 0x52
 800d050:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d054:	2057      	movs	r0, #87	; 0x57
 800d056:	f011 fc4b 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(93, 258, '1');
 800d05a:	2231      	movs	r2, #49	; 0x31
 800d05c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d060:	205d      	movs	r0, #93	; 0x5d
 800d062:	f011 fc45 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(109, 258, 'R');
 800d066:	2252      	movs	r2, #82	; 0x52
 800d068:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d06c:	206d      	movs	r0, #109	; 0x6d
 800d06e:	f011 fc3f 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(115, 258, '2');
 800d072:	2232      	movs	r2, #50	; 0x32
 800d074:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d078:	2073      	movs	r0, #115	; 0x73
 800d07a:	f011 fc39 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(131, 258, 'R');
 800d07e:	2252      	movs	r2, #82	; 0x52
 800d080:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d084:	2083      	movs	r0, #131	; 0x83
 800d086:	f011 fc33 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(137, 258, '3');
 800d08a:	2233      	movs	r2, #51	; 0x33
 800d08c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d090:	2089      	movs	r0, #137	; 0x89
 800d092:	f011 fc2d 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(153, 258, 'R');
 800d096:	2252      	movs	r2, #82	; 0x52
 800d098:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d09c:	2099      	movs	r0, #153	; 0x99
 800d09e:	f011 fc27 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(159, 258, '4');
 800d0a2:	2234      	movs	r2, #52	; 0x34
 800d0a4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0a8:	209f      	movs	r0, #159	; 0x9f
 800d0aa:	f011 fc21 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(175, 258, 'R');
 800d0ae:	2252      	movs	r2, #82	; 0x52
 800d0b0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0b4:	20af      	movs	r0, #175	; 0xaf
 800d0b6:	f011 fc1b 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(181, 258, '5');
 800d0ba:	2235      	movs	r2, #53	; 0x35
 800d0bc:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0c0:	20b5      	movs	r0, #181	; 0xb5
 800d0c2:	f011 fc15 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(197, 258, 'R');
 800d0c6:	2252      	movs	r2, #82	; 0x52
 800d0c8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0cc:	20c5      	movs	r0, #197	; 0xc5
 800d0ce:	f011 fc0f 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(203, 258, '6');
 800d0d2:	2236      	movs	r2, #54	; 0x36
 800d0d4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0d8:	20cb      	movs	r0, #203	; 0xcb
 800d0da:	f011 fc09 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(219, 258, 'R');
 800d0de:	2252      	movs	r2, #82	; 0x52
 800d0e0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0e4:	20db      	movs	r0, #219	; 0xdb
 800d0e6:	f011 fc03 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(225, 258, '7');
 800d0ea:	2237      	movs	r2, #55	; 0x37
 800d0ec:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0f0:	20e1      	movs	r0, #225	; 0xe1
 800d0f2:	f011 fbfd 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(241, 258, 'R');
 800d0f6:	2252      	movs	r2, #82	; 0x52
 800d0f8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d0fc:	20f1      	movs	r0, #241	; 0xf1
 800d0fe:	f011 fbf7 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(247, 258, '8');
 800d102:	2238      	movs	r2, #56	; 0x38
 800d104:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d108:	20f7      	movs	r0, #247	; 0xf7
 800d10a:	f011 fbf1 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(263, 258, 'R');
 800d10e:	2252      	movs	r2, #82	; 0x52
 800d110:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d114:	f240 1007 	movw	r0, #263	; 0x107
 800d118:	f011 fbea 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(269, 258, '9');
 800d11c:	2239      	movs	r2, #57	; 0x39
 800d11e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d122:	f240 100d 	movw	r0, #269	; 0x10d
 800d126:	f011 fbe3 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(290, 258, '1');
 800d12a:	2231      	movs	r2, #49	; 0x31
 800d12c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d130:	f44f 7091 	mov.w	r0, #290	; 0x122
 800d134:	f011 fbdc 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(285, 258, 'R');
 800d138:	2252      	movs	r2, #82	; 0x52
 800d13a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d13e:	f240 101d 	movw	r0, #285	; 0x11d
 800d142:	f011 fbd5 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(294, 258, '0');
 800d146:	2230      	movs	r2, #48	; 0x30
 800d148:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d14c:	f44f 7093 	mov.w	r0, #294	; 0x126
 800d150:	f011 fbce 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(312, 258, '1');
 800d154:	2231      	movs	r2, #49	; 0x31
 800d156:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d15a:	f44f 709c 	mov.w	r0, #312	; 0x138
 800d15e:	f011 fbc7 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(307, 258, 'R');
 800d162:	2252      	movs	r2, #82	; 0x52
 800d164:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d168:	f240 1033 	movw	r0, #307	; 0x133
 800d16c:	f011 fbc0 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(317, 258, '1');
 800d170:	2231      	movs	r2, #49	; 0x31
 800d172:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d176:	f240 103d 	movw	r0, #317	; 0x13d
 800d17a:	f011 fbb9 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(334, 258, '1');
 800d17e:	2231      	movs	r2, #49	; 0x31
 800d180:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d184:	f44f 70a7 	mov.w	r0, #334	; 0x14e
 800d188:	f011 fbb2 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(329, 258, 'R');
 800d18c:	2252      	movs	r2, #82	; 0x52
 800d18e:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d192:	f240 1049 	movw	r0, #329	; 0x149
 800d196:	f011 fbab 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(338, 258, '2');
 800d19a:	2232      	movs	r2, #50	; 0x32
 800d19c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1a0:	f44f 70a9 	mov.w	r0, #338	; 0x152
 800d1a4:	f011 fba4 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(356, 258, '1');
 800d1a8:	2231      	movs	r2, #49	; 0x31
 800d1aa:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1ae:	f44f 70b2 	mov.w	r0, #356	; 0x164
 800d1b2:	f011 fb9d 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(351, 258, 'R');
 800d1b6:	2252      	movs	r2, #82	; 0x52
 800d1b8:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1bc:	f240 105f 	movw	r0, #351	; 0x15f
 800d1c0:	f011 fb96 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(360, 258, '3');
 800d1c4:	2233      	movs	r2, #51	; 0x33
 800d1c6:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1ca:	f44f 70b4 	mov.w	r0, #360	; 0x168
 800d1ce:	f011 fb8f 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(378, 258, '1');
 800d1d2:	2231      	movs	r2, #49	; 0x31
 800d1d4:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1d8:	f44f 70bd 	mov.w	r0, #378	; 0x17a
 800d1dc:	f011 fb88 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(373, 258, 'R');
 800d1e0:	2252      	movs	r2, #82	; 0x52
 800d1e2:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1e6:	f240 1075 	movw	r0, #373	; 0x175
 800d1ea:	f011 fb81 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(382, 258, '4');
 800d1ee:	2234      	movs	r2, #52	; 0x34
 800d1f0:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d1f4:	f44f 70bf 	mov.w	r0, #382	; 0x17e
 800d1f8:	f011 fb7a 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(400, 258, '1');		
 800d1fc:	2231      	movs	r2, #49	; 0x31
 800d1fe:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d202:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800d206:	f011 fb73 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(395, 258, 'R');
 800d20a:	2252      	movs	r2, #82	; 0x52
 800d20c:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d210:	f240 108b 	movw	r0, #395	; 0x18b
 800d214:	f011 fb6c 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(404, 258, '5');
 800d218:	2235      	movs	r2, #53	; 0x35
 800d21a:	f44f 7181 	mov.w	r1, #258	; 0x102
 800d21e:	f44f 70ca 	mov.w	r0, #404	; 0x194
 800d222:	f011 fb65 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(65, 250, '0');
 800d226:	2230      	movs	r2, #48	; 0x30
 800d228:	21fa      	movs	r1, #250	; 0xfa
 800d22a:	2041      	movs	r0, #65	; 0x41
 800d22c:	f011 fb60 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(58, 202, '2');
 800d230:	2232      	movs	r2, #50	; 0x32
 800d232:	21ca      	movs	r1, #202	; 0xca
 800d234:	203a      	movs	r0, #58	; 0x3a
 800d236:	f011 fb5b 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(65, 202, '5');
 800d23a:	2235      	movs	r2, #53	; 0x35
 800d23c:	21ca      	movs	r1, #202	; 0xca
 800d23e:	2041      	movs	r0, #65	; 0x41
 800d240:	f011 fb56 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(58, 149, '5');
 800d244:	2235      	movs	r2, #53	; 0x35
 800d246:	2195      	movs	r1, #149	; 0x95
 800d248:	203a      	movs	r0, #58	; 0x3a
 800d24a:	f011 fb51 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(65, 149, '0');
 800d24e:	2230      	movs	r2, #48	; 0x30
 800d250:	2195      	movs	r1, #149	; 0x95
 800d252:	2041      	movs	r0, #65	; 0x41
 800d254:	f011 fb4c 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(58, 96, '7');
 800d258:	2237      	movs	r2, #55	; 0x37
 800d25a:	2160      	movs	r1, #96	; 0x60
 800d25c:	203a      	movs	r0, #58	; 0x3a
 800d25e:	f011 fb47 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(65, 96, '5');
 800d262:	2235      	movs	r2, #53	; 0x35
 800d264:	2160      	movs	r1, #96	; 0x60
 800d266:	2041      	movs	r0, #65	; 0x41
 800d268:	f011 fb42 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 800d26c:	2231      	movs	r2, #49	; 0x31
 800d26e:	212b      	movs	r1, #43	; 0x2b
 800d270:	2039      	movs	r0, #57	; 0x39
 800d272:	f011 fb3d 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '0');
 800d276:	2230      	movs	r2, #48	; 0x30
 800d278:	212b      	movs	r1, #43	; 0x2b
 800d27a:	203e      	movs	r0, #62	; 0x3e
 800d27c:	f011 fb38 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 800d280:	2230      	movs	r2, #48	; 0x30
 800d282:	212b      	movs	r1, #43	; 0x2b
 800d284:	2043      	movs	r0, #67	; 0x43
 800d286:	f011 fb33 	bl	801e8f0 <TFT_DrawChar>
		TFT_direction = 0x00;
 800d28a:	2300      	movs	r3, #0
 800d28c:	702b      	strb	r3, [r5, #0]
 800d28e:	bd38      	pop	{r3, r4, r5, pc}
 800d290:	20004c10 	.word	0x20004c10
 800d294:	20000210 	.word	0x20000210

0800d298 <CRI_chart>:

void CRI_chart(uint8_t direction, int8_t *GraphData)
{
 800d298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d29c:	ed2d 8b02 	vpush	{d8}
 800d2a0:	b086      	sub	sp, #24
	char buffer[2] = {0};
 800d2a2:	ae06      	add	r6, sp, #24
 800d2a4:	2300      	movs	r3, #0
{
 800d2a6:	460c      	mov	r4, r1
	char buffer[2] = {0};
 800d2a8:	f826 3d04 	strh.w	r3, [r6, #-4]!
 800d2ac:	1e4d      	subs	r5, r1, #1
	uint16_t X = 0;
	
	if(direction == 0x00){
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	f040 82de 	bne.w	800d870 <CRI_chart+0x5d8>
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800d2b4:	f991 3000 	ldrsb.w	r3, [r1]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	f2c0 826f 	blt.w	800d79c <CRI_chart+0x504>
 800d2be:	2b64      	cmp	r3, #100	; 0x64
 800d2c0:	f300 826f 	bgt.w	800d7a2 <CRI_chart+0x50a>
 800d2c4:	ee07 3a90 	vmov	s15, r3
 800d2c8:	ed9f 7af7 	vldr	s14, [pc, #988]	; 800d6a8 <CRI_chart+0x410>
 800d2cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d2d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d2d4:	eddf 7af5 	vldr	s15, [pc, #980]	; 800d6ac <CRI_chart+0x414>
 800d2d8:	ed9f 7af5 	vldr	s14, [pc, #980]	; 800d6b0 <CRI_chart+0x418>
 800d2dc:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d2e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2e4:	edcd 7a03 	vstr	s15, [sp, #12]
 800d2e8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d2ec:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	2222      	movs	r2, #34	; 0x22
 800d2f4:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d2f8:	2018      	movs	r0, #24
 800d2fa:	f011 f806 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800d2fe:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d302:	2b00      	cmp	r3, #0
 800d304:	f2c0 8250 	blt.w	800d7a8 <CRI_chart+0x510>
 800d308:	2b64      	cmp	r3, #100	; 0x64
 800d30a:	f300 8250 	bgt.w	800d7ae <CRI_chart+0x516>
 800d30e:	ee07 3a90 	vmov	s15, r3
 800d312:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 800d6a8 <CRI_chart+0x410>
 800d316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d31a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d31e:	eddf 7ae3 	vldr	s15, [pc, #908]	; 800d6ac <CRI_chart+0x414>
 800d322:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 800d6b0 <CRI_chart+0x418>
 800d326:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d32a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d32e:	edcd 7a03 	vstr	s15, [sp, #12]
 800d332:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d336:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800d33a:	9300      	str	r3, [sp, #0]
 800d33c:	2232      	movs	r2, #50	; 0x32
 800d33e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d342:	2028      	movs	r0, #40	; 0x28
 800d344:	f010 ffe1 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800d348:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	f2c0 8231 	blt.w	800d7b4 <CRI_chart+0x51c>
 800d352:	2b64      	cmp	r3, #100	; 0x64
 800d354:	f300 8231 	bgt.w	800d7ba <CRI_chart+0x522>
 800d358:	ee07 3a90 	vmov	s15, r3
 800d35c:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800d6a8 <CRI_chart+0x410>
 800d360:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d364:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d368:	eddf 7ad0 	vldr	s15, [pc, #832]	; 800d6ac <CRI_chart+0x414>
 800d36c:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 800d6b0 <CRI_chart+0x418>
 800d370:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d378:	edcd 7a03 	vstr	s15, [sp, #12]
 800d37c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d380:	f64a 5388 	movw	r3, #44424	; 0xad88
 800d384:	9300      	str	r3, [sp, #0]
 800d386:	2242      	movs	r2, #66	; 0x42
 800d388:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d38c:	2038      	movs	r0, #56	; 0x38
 800d38e:	f010 ffbc 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800d392:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800d396:	2b00      	cmp	r3, #0
 800d398:	f2c0 8212 	blt.w	800d7c0 <CRI_chart+0x528>
 800d39c:	2b64      	cmp	r3, #100	; 0x64
 800d39e:	f300 8212 	bgt.w	800d7c6 <CRI_chart+0x52e>
 800d3a2:	ee07 3a90 	vmov	s15, r3
 800d3a6:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800d6a8 <CRI_chart+0x410>
 800d3aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d3b2:	eddf 7abe 	vldr	s15, [pc, #760]	; 800d6ac <CRI_chart+0x414>
 800d3b6:	ed9f 7abe 	vldr	s14, [pc, #760]	; 800d6b0 <CRI_chart+0x418>
 800d3ba:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d3be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3c2:	edcd 7a03 	vstr	s15, [sp, #12]
 800d3c6:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d3ca:	f241 430f 	movw	r3, #5135	; 0x140f
 800d3ce:	9300      	str	r3, [sp, #0]
 800d3d0:	2252      	movs	r2, #82	; 0x52
 800d3d2:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d3d6:	2048      	movs	r0, #72	; 0x48
 800d3d8:	f010 ff97 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800d3dc:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	f2c0 81f3 	blt.w	800d7cc <CRI_chart+0x534>
 800d3e6:	2b64      	cmp	r3, #100	; 0x64
 800d3e8:	f300 81f3 	bgt.w	800d7d2 <CRI_chart+0x53a>
 800d3ec:	ee07 3a90 	vmov	s15, r3
 800d3f0:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800d6a8 <CRI_chart+0x410>
 800d3f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3f8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d3fc:	eddf 7aab 	vldr	s15, [pc, #684]	; 800d6ac <CRI_chart+0x414>
 800d400:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800d6b0 <CRI_chart+0x418>
 800d404:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d40c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d410:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d414:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800d418:	9300      	str	r3, [sp, #0]
 800d41a:	2262      	movs	r2, #98	; 0x62
 800d41c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d420:	2058      	movs	r0, #88	; 0x58
 800d422:	f010 ff72 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800d426:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f2c0 81d4 	blt.w	800d7d8 <CRI_chart+0x540>
 800d430:	2b64      	cmp	r3, #100	; 0x64
 800d432:	f300 81d4 	bgt.w	800d7de <CRI_chart+0x546>
 800d436:	ee07 3a90 	vmov	s15, r3
 800d43a:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800d6a8 <CRI_chart+0x410>
 800d43e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d442:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d446:	eddf 7a99 	vldr	s15, [pc, #612]	; 800d6ac <CRI_chart+0x414>
 800d44a:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800d6b0 <CRI_chart+0x418>
 800d44e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d456:	edcd 7a03 	vstr	s15, [sp, #12]
 800d45a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d45e:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800d462:	9300      	str	r3, [sp, #0]
 800d464:	2272      	movs	r2, #114	; 0x72
 800d466:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d46a:	2068      	movs	r0, #104	; 0x68
 800d46c:	f010 ff4d 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800d470:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800d474:	2b00      	cmp	r3, #0
 800d476:	f2c0 81b5 	blt.w	800d7e4 <CRI_chart+0x54c>
 800d47a:	2b64      	cmp	r3, #100	; 0x64
 800d47c:	f300 81b5 	bgt.w	800d7ea <CRI_chart+0x552>
 800d480:	ee07 3a90 	vmov	s15, r3
 800d484:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800d6a8 <CRI_chart+0x410>
 800d488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d48c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d490:	eddf 7a86 	vldr	s15, [pc, #536]	; 800d6ac <CRI_chart+0x414>
 800d494:	ed9f 7a86 	vldr	s14, [pc, #536]	; 800d6b0 <CRI_chart+0x418>
 800d498:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d49c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4a0:	edcd 7a03 	vstr	s15, [sp, #12]
 800d4a4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d4a8:	f248 4357 	movw	r3, #33879	; 0x8457
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	2282      	movs	r2, #130	; 0x82
 800d4b0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d4b4:	2078      	movs	r0, #120	; 0x78
 800d4b6:	f010 ff28 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800d4ba:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	f2c0 8196 	blt.w	800d7f0 <CRI_chart+0x558>
 800d4c4:	2b64      	cmp	r3, #100	; 0x64
 800d4c6:	f300 8196 	bgt.w	800d7f6 <CRI_chart+0x55e>
 800d4ca:	ee07 3a90 	vmov	s15, r3
 800d4ce:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800d6a8 <CRI_chart+0x410>
 800d4d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d4da:	eddf 7a74 	vldr	s15, [pc, #464]	; 800d6ac <CRI_chart+0x414>
 800d4de:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800d6b0 <CRI_chart+0x418>
 800d4e2:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d4e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ea:	edcd 7a03 	vstr	s15, [sp, #12]
 800d4ee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d4f2:	f24a 4377 	movw	r3, #42103	; 0xa477
 800d4f6:	9300      	str	r3, [sp, #0]
 800d4f8:	2292      	movs	r2, #146	; 0x92
 800d4fa:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d4fe:	2088      	movs	r0, #136	; 0x88
 800d500:	f010 ff03 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800d504:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	f2c0 8177 	blt.w	800d7fc <CRI_chart+0x564>
 800d50e:	2b64      	cmp	r3, #100	; 0x64
 800d510:	f300 8177 	bgt.w	800d802 <CRI_chart+0x56a>
 800d514:	ee07 3a90 	vmov	s15, r3
 800d518:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800d6a8 <CRI_chart+0x410>
 800d51c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d520:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d524:	eddf 7a61 	vldr	s15, [pc, #388]	; 800d6ac <CRI_chart+0x414>
 800d528:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800d6b0 <CRI_chart+0x418>
 800d52c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d534:	edcd 7a03 	vstr	s15, [sp, #12]
 800d538:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d53c:	f24e 1365 	movw	r3, #57701	; 0xe165
 800d540:	9300      	str	r3, [sp, #0]
 800d542:	22a2      	movs	r2, #162	; 0xa2
 800d544:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d548:	2098      	movs	r0, #152	; 0x98
 800d54a:	f010 fede 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800d54e:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800d552:	2b00      	cmp	r3, #0
 800d554:	f2c0 8158 	blt.w	800d808 <CRI_chart+0x570>
 800d558:	2b64      	cmp	r3, #100	; 0x64
 800d55a:	f300 8158 	bgt.w	800d80e <CRI_chart+0x576>
 800d55e:	ee07 3a90 	vmov	s15, r3
 800d562:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800d6a8 <CRI_chart+0x410>
 800d566:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d56a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d56e:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800d6ac <CRI_chart+0x414>
 800d572:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800d6b0 <CRI_chart+0x418>
 800d576:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d57a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d57e:	edcd 7a03 	vstr	s15, [sp, #12]
 800d582:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d586:	f24e 7323 	movw	r3, #59171	; 0xe723
 800d58a:	9300      	str	r3, [sp, #0]
 800d58c:	22b2      	movs	r2, #178	; 0xb2
 800d58e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d592:	20a8      	movs	r0, #168	; 0xa8
 800d594:	f010 feb9 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800d598:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	f2c0 8139 	blt.w	800d814 <CRI_chart+0x57c>
 800d5a2:	2b64      	cmp	r3, #100	; 0x64
 800d5a4:	f300 8139 	bgt.w	800d81a <CRI_chart+0x582>
 800d5a8:	ee07 3a90 	vmov	s15, r3
 800d5ac:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800d6a8 <CRI_chart+0x410>
 800d5b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d5b8:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800d6ac <CRI_chart+0x414>
 800d5bc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800d6b0 <CRI_chart+0x418>
 800d5c0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d5c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5c8:	edcd 7a03 	vstr	s15, [sp, #12]
 800d5cc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d5d0:	f241 4327 	movw	r3, #5159	; 0x1427
 800d5d4:	9300      	str	r3, [sp, #0]
 800d5d6:	22c2      	movs	r2, #194	; 0xc2
 800d5d8:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d5dc:	20b8      	movs	r0, #184	; 0xb8
 800d5de:	f010 fe94 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800d5e2:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	f2c0 811a 	blt.w	800d820 <CRI_chart+0x588>
 800d5ec:	2b64      	cmp	r3, #100	; 0x64
 800d5ee:	f300 811a 	bgt.w	800d826 <CRI_chart+0x58e>
 800d5f2:	ee07 3a90 	vmov	s15, r3
 800d5f6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800d6a8 <CRI_chart+0x410>
 800d5fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5fe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d602:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800d6ac <CRI_chart+0x414>
 800d606:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800d6b0 <CRI_chart+0x418>
 800d60a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d60e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d612:	edcd 7a03 	vstr	s15, [sp, #12]
 800d616:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d61a:	f242 138d 	movw	r3, #8589	; 0x218d
 800d61e:	9300      	str	r3, [sp, #0]
 800d620:	22d2      	movs	r2, #210	; 0xd2
 800d622:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d626:	20c8      	movs	r0, #200	; 0xc8
 800d628:	f010 fe6f 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800d62c:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	f2c0 80fb 	blt.w	800d82c <CRI_chart+0x594>
 800d636:	2b64      	cmp	r3, #100	; 0x64
 800d638:	f300 80fb 	bgt.w	800d832 <CRI_chart+0x59a>
 800d63c:	ee07 3a90 	vmov	s15, r3
 800d640:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800d6a8 <CRI_chart+0x410>
 800d644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d648:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d64c:	eddf 7a17 	vldr	s15, [pc, #92]	; 800d6ac <CRI_chart+0x414>
 800d650:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800d6b0 <CRI_chart+0x418>
 800d654:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d65c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d660:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d664:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800d668:	9300      	str	r3, [sp, #0]
 800d66a:	22e2      	movs	r2, #226	; 0xe2
 800d66c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d670:	20d8      	movs	r0, #216	; 0xd8
 800d672:	f010 fe4a 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800d676:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	f2c0 80dc 	blt.w	800d838 <CRI_chart+0x5a0>
 800d680:	2b64      	cmp	r3, #100	; 0x64
 800d682:	f300 80dc 	bgt.w	800d83e <CRI_chart+0x5a6>
 800d686:	ee07 3a90 	vmov	s15, r3
 800d68a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800d6a8 <CRI_chart+0x410>
 800d68e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d692:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d696:	eddf 7a05 	vldr	s15, [pc, #20]	; 800d6ac <CRI_chart+0x414>
 800d69a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800d6b0 <CRI_chart+0x418>
 800d69e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d6a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d6a6:	e00b      	b.n	800d6c0 <CRI_chart+0x428>
 800d6a8:	42c80000 	.word	0x42c80000
 800d6ac:	43cd0000 	.word	0x43cd0000
 800d6b0:	43988000 	.word	0x43988000
 800d6b4:	42c80000 	.word	0x42c80000
 800d6b8:	43cd0000 	.word	0x43cd0000
 800d6bc:	43988000 	.word	0x43988000
 800d6c0:	edcd 7a03 	vstr	s15, [sp, #12]
 800d6c4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d6c8:	f641 3346 	movw	r3, #6982	; 0x1b46
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	22f2      	movs	r2, #242	; 0xf2
 800d6d0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d6d4:	20e8      	movs	r0, #232	; 0xe8
 800d6d6:	f010 fe18 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d6da:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f2c0 80b0 	blt.w	800d844 <CRI_chart+0x5ac>
 800d6e4:	2b64      	cmp	r3, #100	; 0x64
 800d6e6:	f300 80b0 	bgt.w	800d84a <CRI_chart+0x5b2>
 800d6ea:	ee07 3a90 	vmov	s15, r3
 800d6ee:	ed1f 7a0f 	vldr	s14, [pc, #-60]	; 800d6b4 <CRI_chart+0x41c>
 800d6f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6f6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d6fa:	ed5f 7a11 	vldr	s15, [pc, #-68]	; 800d6b8 <CRI_chart+0x420>
 800d6fe:	ed1f 7a11 	vldr	s14, [pc, #-68]	; 800d6bc <CRI_chart+0x424>
 800d702:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d706:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d70a:	edcd 7a03 	vstr	s15, [sp, #12]
 800d70e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		for(uint8_t i = 0; i<=14; i++)
		{
			sprintf (buffer, "%d", GraphData[i]);
 800d712:	4f52      	ldr	r7, [pc, #328]	; (800d85c <CRI_chart+0x5c4>)
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d714:	ed9f 8a52 	vldr	s16, [pc, #328]	; 800d860 <CRI_chart+0x5c8>
 800d718:	eddf 8a52 	vldr	s17, [pc, #328]	; 800d864 <CRI_chart+0x5cc>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d71c:	f24f 6311 	movw	r3, #62993	; 0xf611
 800d720:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	20f8      	movs	r0, #248	; 0xf8
 800d728:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 800d72c:	f010 fded 	bl	801e30a <TFT_FillRectangle>
		TFT_SetFont(&Font6EN_arch_big);
 800d730:	484d      	ldr	r0, [pc, #308]	; (800d868 <CRI_chart+0x5d0>)
 800d732:	f011 f813 	bl	801e75c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 800d736:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d73a:	f011 f815 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 800d73e:	2063      	movs	r0, #99	; 0x63
 800d740:	f011 f818 	bl	801e774 <TFT_SetBackColor>
 800d744:	2418      	movs	r4, #24
			sprintf (buffer, "%d", GraphData[i]);
 800d746:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800d74a:	4639      	mov	r1, r7
 800d74c:	4630      	mov	r0, r6
 800d74e:	f014 fb1f 	bl	8021d90 <siprintf>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d752:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800d756:	2b00      	cmp	r3, #0
 800d758:	db7a      	blt.n	800d850 <CRI_chart+0x5b8>
 800d75a:	2b64      	cmp	r3, #100	; 0x64
 800d75c:	dc7b      	bgt.n	800d856 <CRI_chart+0x5be>
 800d75e:	ee07 3a90 	vmov	s15, r3
 800d762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d766:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800d76a:	eddf 7a40 	vldr	s15, [pc, #256]	; 800d86c <CRI_chart+0x5d4>
 800d76e:	eee7 7a68 	vfms.f32	s15, s14, s17
 800d772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d776:	edcd 7a03 	vstr	s15, [sp, #12]
 800d77a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d77e:	4620      	mov	r0, r4
 800d780:	3410      	adds	r4, #16
 800d782:	2303      	movs	r3, #3
 800d784:	4632      	mov	r2, r6
 800d786:	b2a4      	uxth	r4, r4
 800d788:	f011 f90a 	bl	801e9a0 <TFT_DisplayString>
		for(uint8_t i = 0; i<=14; i++)
 800d78c:	f5b4 7f84 	cmp.w	r4, #264	; 0x108
 800d790:	d1d9      	bne.n	800d746 <CRI_chart+0x4ae>
					X += 22;
		}
		
		TFT_direction = 0x00;
	}
}
 800d792:	b006      	add	sp, #24
 800d794:	ecbd 8b02 	vpop	{d8}
 800d798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_FillRectangle(24, 410-(GraphData[0] < 0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*305), 34, 410, CRI_COLOR_R1);
 800d79c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7a0:	e5a4      	b.n	800d2ec <CRI_chart+0x54>
 800d7a2:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7a6:	e5a1      	b.n	800d2ec <CRI_chart+0x54>
		TFT_FillRectangle(40, 410-(GraphData[1] < 0 ? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*305), 50, 410, CRI_COLOR_R2);
 800d7a8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7ac:	e5c3      	b.n	800d336 <CRI_chart+0x9e>
 800d7ae:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7b2:	e5c0      	b.n	800d336 <CRI_chart+0x9e>
		TFT_FillRectangle(56, 410-(GraphData[2] < 0 ? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*305), 66, 410, CRI_COLOR_R3);
 800d7b4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7b8:	e5e2      	b.n	800d380 <CRI_chart+0xe8>
 800d7ba:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7be:	e5df      	b.n	800d380 <CRI_chart+0xe8>
		TFT_FillRectangle(72, 410-(GraphData[3] < 0 ? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*305), 82, 410, CRI_COLOR_R4);
 800d7c0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7c4:	e601      	b.n	800d3ca <CRI_chart+0x132>
 800d7c6:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7ca:	e5fe      	b.n	800d3ca <CRI_chart+0x132>
		TFT_FillRectangle(88, 410-(GraphData[4] < 0 ? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*305), 98, 410, CRI_COLOR_R5);
 800d7cc:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7d0:	e620      	b.n	800d414 <CRI_chart+0x17c>
 800d7d2:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7d6:	e61d      	b.n	800d414 <CRI_chart+0x17c>
		TFT_FillRectangle(104, 410-(GraphData[5] < 0 ? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*305), 114, 410, CRI_COLOR_R6);
 800d7d8:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7dc:	e63f      	b.n	800d45e <CRI_chart+0x1c6>
 800d7de:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7e2:	e63c      	b.n	800d45e <CRI_chart+0x1c6>
		TFT_FillRectangle(120, 410-(GraphData[6] < 0 ? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*305), 130, 410, CRI_COLOR_R7);
 800d7e4:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7e8:	e65e      	b.n	800d4a8 <CRI_chart+0x210>
 800d7ea:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7ee:	e65b      	b.n	800d4a8 <CRI_chart+0x210>
		TFT_FillRectangle(136, 410-(GraphData[7] < 0 ? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*305), 146, 410, CRI_COLOR_R8);
 800d7f0:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d7f4:	e67d      	b.n	800d4f2 <CRI_chart+0x25a>
 800d7f6:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d7fa:	e67a      	b.n	800d4f2 <CRI_chart+0x25a>
		TFT_FillRectangle(152, 410-(GraphData[8] < 0 ? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*305), 162, 410, CRI_COLOR_R9);
 800d7fc:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d800:	e69c      	b.n	800d53c <CRI_chart+0x2a4>
 800d802:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d806:	e699      	b.n	800d53c <CRI_chart+0x2a4>
		TFT_FillRectangle(168, 410-(GraphData[9] < 0 ? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*305), 178, 410, CRI_COLOR_R10);
 800d808:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d80c:	e6bb      	b.n	800d586 <CRI_chart+0x2ee>
 800d80e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d812:	e6b8      	b.n	800d586 <CRI_chart+0x2ee>
		TFT_FillRectangle(184, 410-(GraphData[10] < 0 ? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*305), 194, 410, CRI_COLOR_R11);
 800d814:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d818:	e6da      	b.n	800d5d0 <CRI_chart+0x338>
 800d81a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d81e:	e6d7      	b.n	800d5d0 <CRI_chart+0x338>
		TFT_FillRectangle(200, 410-(GraphData[11] < 0 ? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*305), 210, 410, CRI_COLOR_R12);
 800d820:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d824:	e6f9      	b.n	800d61a <CRI_chart+0x382>
 800d826:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d82a:	e6f6      	b.n	800d61a <CRI_chart+0x382>
		TFT_FillRectangle(216, 410-(GraphData[12] < 0 ? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*305), 226, 410, CRI_COLOR_R13);
 800d82c:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d830:	e718      	b.n	800d664 <CRI_chart+0x3cc>
 800d832:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d836:	e715      	b.n	800d664 <CRI_chart+0x3cc>
		TFT_FillRectangle(232, 410-(GraphData[13] < 0 ? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*305), 242, 410, CRI_COLOR_R14);
 800d838:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d83c:	e744      	b.n	800d6c8 <CRI_chart+0x430>
 800d83e:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d842:	e741      	b.n	800d6c8 <CRI_chart+0x430>
		TFT_FillRectangle(248, 410-(GraphData[14] < 0 ? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*305), 258, 410, CRI_COLOR_R15);
 800d844:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d848:	e763      	b.n	800d712 <CRI_chart+0x47a>
 800d84a:	f44f 719b 	mov.w	r1, #310	; 0x136
 800d84e:	e760      	b.n	800d712 <CRI_chart+0x47a>
			TFT_DisplayString(24+X, 400-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*305), (uint8_t *)buffer, LEFT_MODE);
 800d850:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800d854:	e793      	b.n	800d77e <CRI_chart+0x4e6>
 800d856:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800d85a:	e790      	b.n	800d77e <CRI_chart+0x4e6>
 800d85c:	08024471 	.word	0x08024471
 800d860:	42c80000 	.word	0x42c80000
 800d864:	43988000 	.word	0x43988000
 800d868:	20000210 	.word	0x20000210
 800d86c:	43c80000 	.word	0x43c80000
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d870:	2801      	cmp	r0, #1
 800d872:	4fed      	ldr	r7, [pc, #948]	; (800dc28 <CRI_chart+0x990>)
		else {TFT_direction = 0x02;}
 800d874:	bf16      	itet	ne
 800d876:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 800d878:	7038      	strbeq	r0, [r7, #0]
		else {TFT_direction = 0x02;}
 800d87a:	703b      	strbne	r3, [r7, #0]
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800d87c:	f991 3000 	ldrsb.w	r3, [r1]
 800d880:	2b00      	cmp	r3, #0
 800d882:	f2c0 8260 	blt.w	800dd46 <CRI_chart+0xaae>
 800d886:	2b64      	cmp	r3, #100	; 0x64
 800d888:	f300 825f 	bgt.w	800dd4a <CRI_chart+0xab2>
 800d88c:	ee07 3a90 	vmov	s15, r3
 800d890:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 800dc2c <CRI_chart+0x994>
 800d894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d898:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d89c:	eddf 7ae4 	vldr	s15, [pc, #912]	; 800dc30 <CRI_chart+0x998>
 800d8a0:	ed9f 7ae4 	vldr	s14, [pc, #912]	; 800dc34 <CRI_chart+0x99c>
 800d8a4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d8a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8ac:	edcd 7a03 	vstr	s15, [sp, #12]
 800d8b0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d8b4:	f24c 43f0 	movw	r3, #50416	; 0xc4f0
 800d8b8:	9300      	str	r3, [sp, #0]
 800d8ba:	2262      	movs	r2, #98	; 0x62
 800d8bc:	23fc      	movs	r3, #252	; 0xfc
 800d8be:	2057      	movs	r0, #87	; 0x57
 800d8c0:	f010 fd23 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800d8c4:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	f2c0 8240 	blt.w	800dd4e <CRI_chart+0xab6>
 800d8ce:	2b64      	cmp	r3, #100	; 0x64
 800d8d0:	f300 823f 	bgt.w	800dd52 <CRI_chart+0xaba>
 800d8d4:	ee07 3a90 	vmov	s15, r3
 800d8d8:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 800dc2c <CRI_chart+0x994>
 800d8dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d8e4:	eddf 7ad2 	vldr	s15, [pc, #840]	; 800dc30 <CRI_chart+0x998>
 800d8e8:	ed9f 7ad2 	vldr	s14, [pc, #840]	; 800dc34 <CRI_chart+0x99c>
 800d8ec:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d8f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8f4:	edcd 7a03 	vstr	s15, [sp, #12]
 800d8f8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d8fc:	f24c 33e7 	movw	r3, #50151	; 0xc3e7
 800d900:	9300      	str	r3, [sp, #0]
 800d902:	2278      	movs	r2, #120	; 0x78
 800d904:	23fc      	movs	r3, #252	; 0xfc
 800d906:	206d      	movs	r0, #109	; 0x6d
 800d908:	f010 fcff 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800d90c:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800d910:	2b00      	cmp	r3, #0
 800d912:	f2c0 8220 	blt.w	800dd56 <CRI_chart+0xabe>
 800d916:	2b64      	cmp	r3, #100	; 0x64
 800d918:	f300 821f 	bgt.w	800dd5a <CRI_chart+0xac2>
 800d91c:	ee07 3a90 	vmov	s15, r3
 800d920:	ed9f 7ac2 	vldr	s14, [pc, #776]	; 800dc2c <CRI_chart+0x994>
 800d924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d928:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d92c:	eddf 7ac0 	vldr	s15, [pc, #768]	; 800dc30 <CRI_chart+0x998>
 800d930:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 800dc34 <CRI_chart+0x99c>
 800d934:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d93c:	edcd 7a03 	vstr	s15, [sp, #12]
 800d940:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d944:	f64a 5388 	movw	r3, #44424	; 0xad88
 800d948:	9300      	str	r3, [sp, #0]
 800d94a:	228e      	movs	r2, #142	; 0x8e
 800d94c:	23fc      	movs	r3, #252	; 0xfc
 800d94e:	2083      	movs	r0, #131	; 0x83
 800d950:	f010 fcdb 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800d954:	f994 3003 	ldrsb.w	r3, [r4, #3]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	f2c0 8200 	blt.w	800dd5e <CRI_chart+0xac6>
 800d95e:	2b64      	cmp	r3, #100	; 0x64
 800d960:	f300 81ff 	bgt.w	800dd62 <CRI_chart+0xaca>
 800d964:	ee07 3a90 	vmov	s15, r3
 800d968:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 800dc2c <CRI_chart+0x994>
 800d96c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d970:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d974:	eddf 7aae 	vldr	s15, [pc, #696]	; 800dc30 <CRI_chart+0x998>
 800d978:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800dc34 <CRI_chart+0x99c>
 800d97c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d984:	edcd 7a03 	vstr	s15, [sp, #12]
 800d988:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d98c:	f241 430f 	movw	r3, #5135	; 0x140f
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	22a4      	movs	r2, #164	; 0xa4
 800d994:	23fc      	movs	r3, #252	; 0xfc
 800d996:	2099      	movs	r0, #153	; 0x99
 800d998:	f010 fcb7 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800d99c:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	f2c0 81e0 	blt.w	800dd66 <CRI_chart+0xace>
 800d9a6:	2b64      	cmp	r3, #100	; 0x64
 800d9a8:	f300 81df 	bgt.w	800dd6a <CRI_chart+0xad2>
 800d9ac:	ee07 3a90 	vmov	s15, r3
 800d9b0:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800dc2c <CRI_chart+0x994>
 800d9b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d9b8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d9bc:	eddf 7a9c 	vldr	s15, [pc, #624]	; 800dc30 <CRI_chart+0x998>
 800d9c0:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 800dc34 <CRI_chart+0x99c>
 800d9c4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800d9c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9cc:	edcd 7a03 	vstr	s15, [sp, #12]
 800d9d0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800d9d4:	f241 43d8 	movw	r3, #5336	; 0x14d8
 800d9d8:	9300      	str	r3, [sp, #0]
 800d9da:	22ba      	movs	r2, #186	; 0xba
 800d9dc:	23fc      	movs	r3, #252	; 0xfc
 800d9de:	20af      	movs	r0, #175	; 0xaf
 800d9e0:	f010 fc93 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800d9e4:	f994 3005 	ldrsb.w	r3, [r4, #5]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	f2c0 81c0 	blt.w	800dd6e <CRI_chart+0xad6>
 800d9ee:	2b64      	cmp	r3, #100	; 0x64
 800d9f0:	f300 81bf 	bgt.w	800dd72 <CRI_chart+0xada>
 800d9f4:	ee07 3a90 	vmov	s15, r3
 800d9f8:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800dc2c <CRI_chart+0x994>
 800d9fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da00:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da04:	eddf 7a8a 	vldr	s15, [pc, #552]	; 800dc30 <CRI_chart+0x998>
 800da08:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800dc34 <CRI_chart+0x99c>
 800da0c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da14:	edcd 7a03 	vstr	s15, [sp, #12]
 800da18:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da1c:	f643 53f6 	movw	r3, #15862	; 0x3df6
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	22d0      	movs	r2, #208	; 0xd0
 800da24:	23fc      	movs	r3, #252	; 0xfc
 800da26:	20c5      	movs	r0, #197	; 0xc5
 800da28:	f010 fc6f 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800da2c:	f994 3006 	ldrsb.w	r3, [r4, #6]
 800da30:	2b00      	cmp	r3, #0
 800da32:	f2c0 81a0 	blt.w	800dd76 <CRI_chart+0xade>
 800da36:	2b64      	cmp	r3, #100	; 0x64
 800da38:	f300 819f 	bgt.w	800dd7a <CRI_chart+0xae2>
 800da3c:	ee07 3a90 	vmov	s15, r3
 800da40:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800dc2c <CRI_chart+0x994>
 800da44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da48:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da4c:	eddf 7a78 	vldr	s15, [pc, #480]	; 800dc30 <CRI_chart+0x998>
 800da50:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800dc34 <CRI_chart+0x99c>
 800da54:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800da58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da5c:	edcd 7a03 	vstr	s15, [sp, #12]
 800da60:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800da64:	f248 4357 	movw	r3, #33879	; 0x8457
 800da68:	9300      	str	r3, [sp, #0]
 800da6a:	22e6      	movs	r2, #230	; 0xe6
 800da6c:	23fc      	movs	r3, #252	; 0xfc
 800da6e:	20db      	movs	r0, #219	; 0xdb
 800da70:	f010 fc4b 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800da74:	f994 3007 	ldrsb.w	r3, [r4, #7]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f2c0 8180 	blt.w	800dd7e <CRI_chart+0xae6>
 800da7e:	2b64      	cmp	r3, #100	; 0x64
 800da80:	f300 817f 	bgt.w	800dd82 <CRI_chart+0xaea>
 800da84:	ee07 3a90 	vmov	s15, r3
 800da88:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800dc2c <CRI_chart+0x994>
 800da8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da90:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800da94:	eddf 7a66 	vldr	s15, [pc, #408]	; 800dc30 <CRI_chart+0x998>
 800da98:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800dc34 <CRI_chart+0x99c>
 800da9c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800daa0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daa4:	edcd 7a03 	vstr	s15, [sp, #12]
 800daa8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800daac:	f24a 4377 	movw	r3, #42103	; 0xa477
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	23fc      	movs	r3, #252	; 0xfc
 800dab4:	461a      	mov	r2, r3
 800dab6:	20f1      	movs	r0, #241	; 0xf1
 800dab8:	f010 fc27 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800dabc:	f994 3008 	ldrsb.w	r3, [r4, #8]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f2c0 8160 	blt.w	800dd86 <CRI_chart+0xaee>
 800dac6:	2b64      	cmp	r3, #100	; 0x64
 800dac8:	f300 815f 	bgt.w	800dd8a <CRI_chart+0xaf2>
 800dacc:	ee07 3a90 	vmov	s15, r3
 800dad0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800dc2c <CRI_chart+0x994>
 800dad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dad8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dadc:	eddf 7a54 	vldr	s15, [pc, #336]	; 800dc30 <CRI_chart+0x998>
 800dae0:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800dc34 <CRI_chart+0x99c>
 800dae4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800daec:	edcd 7a03 	vstr	s15, [sp, #12]
 800daf0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800daf4:	f24e 1365 	movw	r3, #57701	; 0xe165
 800daf8:	9300      	str	r3, [sp, #0]
 800dafa:	f44f 7289 	mov.w	r2, #274	; 0x112
 800dafe:	23fc      	movs	r3, #252	; 0xfc
 800db00:	f240 1007 	movw	r0, #263	; 0x107
 800db04:	f010 fc01 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800db08:	f994 3009 	ldrsb.w	r3, [r4, #9]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	f2c0 813e 	blt.w	800dd8e <CRI_chart+0xaf6>
 800db12:	2b64      	cmp	r3, #100	; 0x64
 800db14:	f300 813d 	bgt.w	800dd92 <CRI_chart+0xafa>
 800db18:	ee07 3a90 	vmov	s15, r3
 800db1c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800dc2c <CRI_chart+0x994>
 800db20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db24:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db28:	eddf 7a41 	vldr	s15, [pc, #260]	; 800dc30 <CRI_chart+0x998>
 800db2c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800dc34 <CRI_chart+0x99c>
 800db30:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800db34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db38:	edcd 7a03 	vstr	s15, [sp, #12]
 800db3c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db40:	f24e 7323 	movw	r3, #59171	; 0xe723
 800db44:	9300      	str	r3, [sp, #0]
 800db46:	f44f 7294 	mov.w	r2, #296	; 0x128
 800db4a:	23fc      	movs	r3, #252	; 0xfc
 800db4c:	f240 101d 	movw	r0, #285	; 0x11d
 800db50:	f010 fbdb 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800db54:	f994 300a 	ldrsb.w	r3, [r4, #10]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	f2c0 811c 	blt.w	800dd96 <CRI_chart+0xafe>
 800db5e:	2b64      	cmp	r3, #100	; 0x64
 800db60:	f300 811b 	bgt.w	800dd9a <CRI_chart+0xb02>
 800db64:	ee07 3a90 	vmov	s15, r3
 800db68:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800dc2c <CRI_chart+0x994>
 800db6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800db74:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800dc30 <CRI_chart+0x998>
 800db78:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800dc34 <CRI_chart+0x99c>
 800db7c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800db80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db84:	edcd 7a03 	vstr	s15, [sp, #12]
 800db88:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800db8c:	f241 4327 	movw	r3, #5159	; 0x1427
 800db90:	9300      	str	r3, [sp, #0]
 800db92:	f44f 729f 	mov.w	r2, #318	; 0x13e
 800db96:	23fc      	movs	r3, #252	; 0xfc
 800db98:	f240 1033 	movw	r0, #307	; 0x133
 800db9c:	f010 fbb5 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800dba0:	f994 300b 	ldrsb.w	r3, [r4, #11]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	f2c0 80fa 	blt.w	800dd9e <CRI_chart+0xb06>
 800dbaa:	2b64      	cmp	r3, #100	; 0x64
 800dbac:	f300 80f9 	bgt.w	800dda2 <CRI_chart+0xb0a>
 800dbb0:	ee07 3a90 	vmov	s15, r3
 800dbb4:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800dc2c <CRI_chart+0x994>
 800dbb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dbbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dbc0:	eddf 7a1b 	vldr	s15, [pc, #108]	; 800dc30 <CRI_chart+0x998>
 800dbc4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800dc34 <CRI_chart+0x99c>
 800dbc8:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dbcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbd0:	edcd 7a03 	vstr	s15, [sp, #12]
 800dbd4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dbd8:	f242 138d 	movw	r3, #8589	; 0x218d
 800dbdc:	9300      	str	r3, [sp, #0]
 800dbde:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800dbe2:	23fc      	movs	r3, #252	; 0xfc
 800dbe4:	f240 1049 	movw	r0, #329	; 0x149
 800dbe8:	f010 fb8f 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800dbec:	f994 300c 	ldrsb.w	r3, [r4, #12]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f2c0 80d8 	blt.w	800dda6 <CRI_chart+0xb0e>
 800dbf6:	2b64      	cmp	r3, #100	; 0x64
 800dbf8:	f300 80d7 	bgt.w	800ddaa <CRI_chart+0xb12>
 800dbfc:	ee07 3a90 	vmov	s15, r3
 800dc00:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800dc2c <CRI_chart+0x994>
 800dc04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc0c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800dc30 <CRI_chart+0x998>
 800dc10:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800dc34 <CRI_chart+0x99c>
 800dc14:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dc18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc1c:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc20:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dc24:	e008      	b.n	800dc38 <CRI_chart+0x9a0>
 800dc26:	bf00      	nop
 800dc28:	20004c10 	.word	0x20004c10
 800dc2c:	42c80000 	.word	0x42c80000
 800dc30:	437e0000 	.word	0x437e0000
 800dc34:	43520000 	.word	0x43520000
 800dc38:	f24f 735d 	movw	r3, #63325	; 0xf75d
 800dc3c:	9300      	str	r3, [sp, #0]
 800dc3e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800dc42:	23fc      	movs	r3, #252	; 0xfc
 800dc44:	f240 105f 	movw	r0, #351	; 0x15f
 800dc48:	f010 fb5f 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800dc4c:	f994 300d 	ldrsb.w	r3, [r4, #13]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	f2c0 80ac 	blt.w	800ddae <CRI_chart+0xb16>
 800dc56:	2b64      	cmp	r3, #100	; 0x64
 800dc58:	f300 80ab 	bgt.w	800ddb2 <CRI_chart+0xb1a>
 800dc5c:	ee07 3a90 	vmov	s15, r3
 800dc60:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 800dc2c <CRI_chart+0x994>
 800dc64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dc68:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dc6c:	ed5f 7a10 	vldr	s15, [pc, #-64]	; 800dc30 <CRI_chart+0x998>
 800dc70:	ed1f 7a10 	vldr	s14, [pc, #-64]	; 800dc34 <CRI_chart+0x99c>
 800dc74:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dc78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc7c:	edcd 7a03 	vstr	s15, [sp, #12]
 800dc80:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dc84:	f641 3346 	movw	r3, #6982	; 0x1b46
 800dc88:	9300      	str	r3, [sp, #0]
 800dc8a:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800dc8e:	23fc      	movs	r3, #252	; 0xfc
 800dc90:	f240 1075 	movw	r0, #373	; 0x175
 800dc94:	f010 fb39 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800dc98:	f994 300e 	ldrsb.w	r3, [r4, #14]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	f2c0 808a 	blt.w	800ddb6 <CRI_chart+0xb1e>
 800dca2:	2b64      	cmp	r3, #100	; 0x64
 800dca4:	f300 8089 	bgt.w	800ddba <CRI_chart+0xb22>
 800dca8:	ee07 3a90 	vmov	s15, r3
 800dcac:	ed1f 7a21 	vldr	s14, [pc, #-132]	; 800dc2c <CRI_chart+0x994>
 800dcb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dcb4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dcb8:	ed5f 7a23 	vldr	s15, [pc, #-140]	; 800dc30 <CRI_chart+0x998>
 800dcbc:	ed1f 7a23 	vldr	s14, [pc, #-140]	; 800dc34 <CRI_chart+0x99c>
 800dcc0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800dcc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcc8:	edcd 7a03 	vstr	s15, [sp, #12]
 800dccc:	f8bd 100c 	ldrh.w	r1, [sp, #12]
					sprintf (buffer, "%d", GraphData[i]);
 800dcd0:	f8df 8100 	ldr.w	r8, [pc, #256]	; 800ddd4 <CRI_chart+0xb3c>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800dcd4:	ed9f 8a3c 	vldr	s16, [pc, #240]	; 800ddc8 <CRI_chart+0xb30>
 800dcd8:	eddf 8a3c 	vldr	s17, [pc, #240]	; 800ddcc <CRI_chart+0xb34>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800dcdc:	f24f 6311 	movw	r3, #62993	; 0xf611
 800dce0:	9300      	str	r3, [sp, #0]
 800dce2:	f44f 72cb 	mov.w	r2, #406	; 0x196
 800dce6:	23fc      	movs	r3, #252	; 0xfc
 800dce8:	f240 108b 	movw	r0, #395	; 0x18b
 800dcec:	f010 fb0d 	bl	801e30a <TFT_FillRectangle>
 800dcf0:	2457      	movs	r4, #87	; 0x57
					sprintf (buffer, "%d", GraphData[i]);
 800dcf2:	f995 2001 	ldrsb.w	r2, [r5, #1]
 800dcf6:	4641      	mov	r1, r8
 800dcf8:	4630      	mov	r0, r6
 800dcfa:	f014 f849 	bl	8021d90 <siprintf>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800dcfe:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	db5b      	blt.n	800ddbe <CRI_chart+0xb26>
 800dd06:	2b64      	cmp	r3, #100	; 0x64
 800dd08:	dc5b      	bgt.n	800ddc2 <CRI_chart+0xb2a>
 800dd0a:	ee07 3a90 	vmov	s15, r3
 800dd0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dd12:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800dd16:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800ddd0 <CRI_chart+0xb38>
 800dd1a:	eee7 7a68 	vfms.f32	s15, s14, s17
 800dd1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dd22:	edcd 7a03 	vstr	s15, [sp, #12]
 800dd26:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800dd2a:	2303      	movs	r3, #3
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	4632      	mov	r2, r6
 800dd30:	3416      	adds	r4, #22
 800dd32:	f010 fe35 	bl	801e9a0 <TFT_DisplayString>
 800dd36:	b2a4      	uxth	r4, r4
		for(uint8_t i = 0; i<=14; i++)
 800dd38:	f240 13a1 	movw	r3, #417	; 0x1a1
 800dd3c:	429c      	cmp	r4, r3
 800dd3e:	d1d8      	bne.n	800dcf2 <CRI_chart+0xa5a>
		TFT_direction = 0x00;
 800dd40:	2300      	movs	r3, #0
 800dd42:	703b      	strb	r3, [r7, #0]
}
 800dd44:	e525      	b.n	800d792 <CRI_chart+0x4fa>
		TFT_FillRectangle(87, 254-(GraphData[0]<0 ? 0 : GraphData[0] > 100 ? 100 : (float)GraphData[0]/100*210), 98,  252, CRI_COLOR_R1);
 800dd46:	21fe      	movs	r1, #254	; 0xfe
 800dd48:	e5b4      	b.n	800d8b4 <CRI_chart+0x61c>
 800dd4a:	219a      	movs	r1, #154	; 0x9a
 800dd4c:	e5b2      	b.n	800d8b4 <CRI_chart+0x61c>
		TFT_FillRectangle(109, 254-(GraphData[1]<0? 0 : GraphData[1] > 100 ? 100 : (float)GraphData[1]/100*210), 120, 252, CRI_COLOR_R2);
 800dd4e:	21fe      	movs	r1, #254	; 0xfe
 800dd50:	e5d4      	b.n	800d8fc <CRI_chart+0x664>
 800dd52:	219a      	movs	r1, #154	; 0x9a
 800dd54:	e5d2      	b.n	800d8fc <CRI_chart+0x664>
		TFT_FillRectangle(131, 254-(GraphData[2]<0? 0 : GraphData[2] > 100 ? 100 : (float)GraphData[2]/100*210), 142, 252, CRI_COLOR_R3);
 800dd56:	21fe      	movs	r1, #254	; 0xfe
 800dd58:	e5f4      	b.n	800d944 <CRI_chart+0x6ac>
 800dd5a:	219a      	movs	r1, #154	; 0x9a
 800dd5c:	e5f2      	b.n	800d944 <CRI_chart+0x6ac>
		TFT_FillRectangle(153, 254-(GraphData[3]<0? 0 : GraphData[3] > 100 ? 100 : (float)GraphData[3]/100*210), 164, 252, CRI_COLOR_R4);
 800dd5e:	21fe      	movs	r1, #254	; 0xfe
 800dd60:	e614      	b.n	800d98c <CRI_chart+0x6f4>
 800dd62:	219a      	movs	r1, #154	; 0x9a
 800dd64:	e612      	b.n	800d98c <CRI_chart+0x6f4>
		TFT_FillRectangle(175, 254-(GraphData[4]<0? 0 : GraphData[4] > 100 ? 100 : (float)GraphData[4]/100*210), 186, 252, CRI_COLOR_R5);
 800dd66:	21fe      	movs	r1, #254	; 0xfe
 800dd68:	e634      	b.n	800d9d4 <CRI_chart+0x73c>
 800dd6a:	219a      	movs	r1, #154	; 0x9a
 800dd6c:	e632      	b.n	800d9d4 <CRI_chart+0x73c>
		TFT_FillRectangle(197, 254-(GraphData[5]<0? 0 : GraphData[5] > 100 ? 100 : (float)GraphData[5]/100*210), 208, 252, CRI_COLOR_R6);
 800dd6e:	21fe      	movs	r1, #254	; 0xfe
 800dd70:	e654      	b.n	800da1c <CRI_chart+0x784>
 800dd72:	219a      	movs	r1, #154	; 0x9a
 800dd74:	e652      	b.n	800da1c <CRI_chart+0x784>
		TFT_FillRectangle(219, 254-(GraphData[6]<0? 0 : GraphData[6] > 100 ? 100 : (float)GraphData[6]/100*210), 230, 252, CRI_COLOR_R7);
 800dd76:	21fe      	movs	r1, #254	; 0xfe
 800dd78:	e674      	b.n	800da64 <CRI_chart+0x7cc>
 800dd7a:	219a      	movs	r1, #154	; 0x9a
 800dd7c:	e672      	b.n	800da64 <CRI_chart+0x7cc>
		TFT_FillRectangle(241, 254-(GraphData[7]<0? 0 : GraphData[7] > 100 ? 100 : (float)GraphData[7]/100*210), 252, 252, CRI_COLOR_R8);
 800dd7e:	21fe      	movs	r1, #254	; 0xfe
 800dd80:	e694      	b.n	800daac <CRI_chart+0x814>
 800dd82:	219a      	movs	r1, #154	; 0x9a
 800dd84:	e692      	b.n	800daac <CRI_chart+0x814>
		TFT_FillRectangle(263, 254-(GraphData[8]<0? 0 : GraphData[8] > 100 ? 100 : (float)GraphData[8]/100*210), 274, 252, CRI_COLOR_R9);
 800dd86:	21fe      	movs	r1, #254	; 0xfe
 800dd88:	e6b4      	b.n	800daf4 <CRI_chart+0x85c>
 800dd8a:	219a      	movs	r1, #154	; 0x9a
 800dd8c:	e6b2      	b.n	800daf4 <CRI_chart+0x85c>
		TFT_FillRectangle(285, 254-(GraphData[9]<0? 0 : GraphData[9] > 100 ? 100 : (float)GraphData[9]/100*210), 296, 252, CRI_COLOR_R10);
 800dd8e:	21fe      	movs	r1, #254	; 0xfe
 800dd90:	e6d6      	b.n	800db40 <CRI_chart+0x8a8>
 800dd92:	219a      	movs	r1, #154	; 0x9a
 800dd94:	e6d4      	b.n	800db40 <CRI_chart+0x8a8>
		TFT_FillRectangle(307, 254-(GraphData[10]<0? 0 : GraphData[10] > 100 ? 100 : (float)GraphData[10]/100*210),318, 252, CRI_COLOR_R11);
 800dd96:	21fe      	movs	r1, #254	; 0xfe
 800dd98:	e6f8      	b.n	800db8c <CRI_chart+0x8f4>
 800dd9a:	219a      	movs	r1, #154	; 0x9a
 800dd9c:	e6f6      	b.n	800db8c <CRI_chart+0x8f4>
		TFT_FillRectangle(329, 254-(GraphData[11]<0? 0 : GraphData[11] > 100 ? 100 : (float)GraphData[11]/100*210),340, 252, CRI_COLOR_R12);
 800dd9e:	21fe      	movs	r1, #254	; 0xfe
 800dda0:	e71a      	b.n	800dbd8 <CRI_chart+0x940>
 800dda2:	219a      	movs	r1, #154	; 0x9a
 800dda4:	e718      	b.n	800dbd8 <CRI_chart+0x940>
		TFT_FillRectangle(351, 254-(GraphData[12]<0? 0 : GraphData[12] > 100 ? 100 : (float)GraphData[12]/100*210),362, 252, CRI_COLOR_R13);
 800dda6:	21fe      	movs	r1, #254	; 0xfe
 800dda8:	e746      	b.n	800dc38 <CRI_chart+0x9a0>
 800ddaa:	219a      	movs	r1, #154	; 0x9a
 800ddac:	e744      	b.n	800dc38 <CRI_chart+0x9a0>
		TFT_FillRectangle(373, 254-(GraphData[13]<0? 0 : GraphData[13] > 100 ? 100 : (float)GraphData[13]/100*210),384, 252, CRI_COLOR_R14);
 800ddae:	21fe      	movs	r1, #254	; 0xfe
 800ddb0:	e768      	b.n	800dc84 <CRI_chart+0x9ec>
 800ddb2:	219a      	movs	r1, #154	; 0x9a
 800ddb4:	e766      	b.n	800dc84 <CRI_chart+0x9ec>
		TFT_FillRectangle(395, 254-(GraphData[14]<0? 0 : GraphData[14] > 100 ? 100 : (float)GraphData[14]/100*210),406, 252, CRI_COLOR_R15);
 800ddb6:	21fe      	movs	r1, #254	; 0xfe
 800ddb8:	e78a      	b.n	800dcd0 <CRI_chart+0xa38>
 800ddba:	219a      	movs	r1, #154	; 0x9a
 800ddbc:	e788      	b.n	800dcd0 <CRI_chart+0xa38>
			TFT_DisplayString(87+X, 244-(GraphData[i]<0 ? 0 : GraphData[i] > 100 ? 100 : (float)GraphData[i]/100*215), (uint8_t *)buffer, LEFT_MODE);
 800ddbe:	21f4      	movs	r1, #244	; 0xf4
 800ddc0:	e7b3      	b.n	800dd2a <CRI_chart+0xa92>
 800ddc2:	2190      	movs	r1, #144	; 0x90
 800ddc4:	e7b1      	b.n	800dd2a <CRI_chart+0xa92>
 800ddc6:	bf00      	nop
 800ddc8:	42c80000 	.word	0x42c80000
 800ddcc:	43570000 	.word	0x43570000
 800ddd0:	43740000 	.word	0x43740000
 800ddd4:	08024471 	.word	0x08024471

0800ddd8 <CRI_Draw>:

void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800ddd8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800dddc:	461e      	mov	r6, r3
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800ddde:	2363      	movs	r3, #99	; 0x63
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800dde0:	4604      	mov	r4, r0
 800dde2:	4688      	mov	r8, r1
 800dde4:	4615      	mov	r5, r2
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800dde6:	213a      	movs	r1, #58	; 0x3a
 800dde8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800ddec:	9300      	str	r3, [sp, #0]
 800ddee:	2005      	movs	r0, #5
 800ddf0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
void CRI_Draw(uint8_t direction, int8_t *GraphData, int8_t Ra, int8_t Rall, int8_t R9){
 800ddf4:	f99d 7020 	ldrsb.w	r7, [sp, #32]
	TFT_FillRectangle(5, 58, 270, 410, TFT_Black_Bkgr);
 800ddf8:	f010 fa87 	bl	801e30a <TFT_FillRectangle>
	CRI_Axes(direction);
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	f7fe fe75 	bl	800caec <CRI_Axes>
	CRI_Axes_Text(direction);
 800de02:	4620      	mov	r0, r4
 800de04:	f7fe ffee 	bl	800cde4 <CRI_Axes_Text>
	CRI_chart(direction, GraphData);
 800de08:	4641      	mov	r1, r8
 800de0a:	4620      	mov	r0, r4
 800de0c:	f7ff fa44 	bl	800d298 <CRI_chart>
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800de10:	463b      	mov	r3, r7
 800de12:	4632      	mov	r2, r6
 800de14:	4629      	mov	r1, r5
 800de16:	4620      	mov	r0, r4
 800de18:	b002      	add	sp, #8
 800de1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	CRI_Axes_Measure(direction, Ra, Rall, R9);
 800de1e:	f7fe bf03 	b.w	800cc28 <CRI_Axes_Measure>
	...

0800de24 <Calculate_EL_Day>:
extern float colorimetry_xy1964[2], colorimetry_uv[2], colorimetry_uv1976[2], colorimetry_xy1931[2];
extern float calibratre_x_1931[1024], Spectral_day[1024], calibratre_z_1931[1024];
	
float Calculate_EL_Day(float R_data[], float Spectral_Day_const[])
{
	sum = 0;
 800de24:	4a0c      	ldr	r2, [pc, #48]	; (800de58 <Calculate_EL_Day+0x34>)
 800de26:	2300      	movs	r3, #0
 800de28:	6013      	str	r3, [r2, #0]
 800de2a:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800de2c:	ecb0 7a01 	vldmia	r0!, {s14}
 800de30:	ecf1 7a01 	vldmia	r1!, {s15}
 800de34:	ed92 0a00 	vldr	s0, [r2]
 800de38:	eea7 0a27 	vfma.f32	s0, s14, s15
	for ( iq = 0; iq < 1024; iq++)
 800de3c:	3301      	adds	r3, #1
 800de3e:	b29b      	uxth	r3, r3
 800de40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Day_const[iq]);
 800de44:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800de48:	d1f0      	bne.n	800de2c <Calculate_EL_Day+0x8>
 800de4a:	4a04      	ldr	r2, [pc, #16]	; (800de5c <Calculate_EL_Day+0x38>)
	}
	return 683*sum;
}
 800de4c:	eddf 7a04 	vldr	s15, [pc, #16]	; 800de60 <Calculate_EL_Day+0x3c>
 800de50:	8013      	strh	r3, [r2, #0]
 800de52:	ee20 0a27 	vmul.f32	s0, s0, s15
 800de56:	4770      	bx	lr
 800de58:	2008bccc 	.word	0x2008bccc
 800de5c:	2008bcc4 	.word	0x2008bcc4
 800de60:	442ac000 	.word	0x442ac000

0800de64 <Calculate_EL_Day_Wt>:


float Calculate_EL_Day_Wt(float R_data[])
{
	sum = 0;
 800de64:	4a09      	ldr	r2, [pc, #36]	; (800de8c <Calculate_EL_Day_Wt+0x28>)
 800de66:	2300      	movs	r3, #0
 800de68:	6013      	str	r3, [r2, #0]
 800de6a:	2300      	movs	r3, #0
	for ( iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]);
 800de6c:	ecf0 7a01 	vldmia	r0!, {s15}
 800de70:	ed92 0a00 	vldr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800de74:	3301      	adds	r3, #1
		sum = sum + (R_data[iq]);
 800de76:	ee30 0a27 	vadd.f32	s0, s0, s15
	for ( iq = 0; iq < 1024; iq++)
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]);
 800de80:	ed82 0a00 	vstr	s0, [r2]
	for ( iq = 0; iq < 1024; iq++)
 800de84:	d1f2      	bne.n	800de6c <Calculate_EL_Day_Wt+0x8>
 800de86:	4a02      	ldr	r2, [pc, #8]	; (800de90 <Calculate_EL_Day_Wt+0x2c>)
 800de88:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800de8a:	4770      	bx	lr
 800de8c:	2008bccc 	.word	0x2008bccc
 800de90:	2008bcc4 	.word	0x2008bcc4

0800de94 <Calculate_EL_Night>:

float Calculate_EL_Night(float R_data[], float Spectral_Night_const[])
{
	sum = 0;
 800de94:	4a0c      	ldr	r2, [pc, #48]	; (800dec8 <Calculate_EL_Night+0x34>)
 800de96:	2300      	movs	r3, #0
 800de98:	6013      	str	r3, [r2, #0]
 800de9a:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800de9c:	ecb0 7a01 	vldmia	r0!, {s14}
 800dea0:	ecf1 7a01 	vldmia	r1!, {s15}
 800dea4:	ed92 0a00 	vldr	s0, [r2]
 800dea8:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800deac:	3301      	adds	r3, #1
 800deae:	b29b      	uxth	r3, r3
 800deb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Spectral_Night_const[iq]);
 800deb4:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800deb8:	d1f0      	bne.n	800de9c <Calculate_EL_Night+0x8>
 800deba:	4a04      	ldr	r2, [pc, #16]	; (800decc <Calculate_EL_Night+0x38>)
	}
	return 1700*sum;
}
 800debc:	eddf 7a04 	vldr	s15, [pc, #16]	; 800ded0 <Calculate_EL_Night+0x3c>
 800dec0:	8013      	strh	r3, [r2, #0]
 800dec2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800dec6:	4770      	bx	lr
 800dec8:	2008bccc 	.word	0x2008bccc
 800decc:	2008bcc4 	.word	0x2008bcc4
 800ded0:	44d48000 	.word	0x44d48000

0800ded4 <Calculate_SP>:

float Calculate_SP(float EL_day_data, float EL_Night_data)
{
	return (EL_day_data !=0) ? EL_Night_data/EL_day_data: 0;
 800ded4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ded8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dedc:	bf14      	ite	ne
 800dede:	eec0 7a80 	vdivne.f32	s15, s1, s0
 800dee2:	eddf 7a02 	vldreq	s15, [pc, #8]	; 800deec <Calculate_SP+0x18>
}
 800dee6:	eeb0 0a67 	vmov.f32	s0, s15
 800deea:	4770      	bx	lr
 800deec:	00000000 	.word	0x00000000

0800def0 <Calculate_PPFD_PPL>:

float Calculate_PPFD_PPL(float R_data[], float Wavelenght[])
{
 800def0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sum = 0;
 800def4:	4d1a      	ldr	r5, [pc, #104]	; (800df60 <Calculate_PPFD_PPL+0x70>)
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800def6:	f20f 0960 	addw	r9, pc, #96	; 0x60
 800defa:	e9d9 8900 	ldrd	r8, r9, [r9]
	sum = 0;
 800defe:	2300      	movs	r3, #0
 800df00:	602b      	str	r3, [r5, #0]
 800df02:	4683      	mov	fp, r0
 800df04:	468a      	mov	sl, r1
 800df06:	2400      	movs	r4, #0
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800df08:	ecbb 7a01 	vldmia	fp!, {s14}
 800df0c:	ecfa 7a01 	vldmia	sl!, {s15}
 800df10:	ee67 7a27 	vmul.f32	s15, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800df14:	3401      	adds	r4, #1
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800df16:	ee17 0a90 	vmov	r0, s15
 800df1a:	f7f2 fb25 	bl	8000568 <__aeabi_f2d>
 800df1e:	4642      	mov	r2, r8
 800df20:	464b      	mov	r3, r9
 800df22:	f7f2 fb75 	bl	8000610 <__aeabi_dmul>
 800df26:	4606      	mov	r6, r0
 800df28:	6828      	ldr	r0, [r5, #0]
 800df2a:	460f      	mov	r7, r1
 800df2c:	f7f2 fb1c 	bl	8000568 <__aeabi_f2d>
 800df30:	4602      	mov	r2, r0
 800df32:	460b      	mov	r3, r1
 800df34:	4630      	mov	r0, r6
 800df36:	4639      	mov	r1, r7
 800df38:	f7f2 f9b8 	bl	80002ac <__adddf3>
 800df3c:	f7f2 fe60 	bl	8000c00 <__aeabi_d2f>
	for (iq = 0; iq < 1024; iq++)
 800df40:	b2a4      	uxth	r4, r4
 800df42:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800df46:	6028      	str	r0, [r5, #0]
	for (iq = 0; iq < 1024; iq++)
 800df48:	d1de      	bne.n	800df08 <Calculate_PPFD_PPL+0x18>
 800df4a:	4b06      	ldr	r3, [pc, #24]	; (800df64 <Calculate_PPFD_PPL+0x74>)
	}
	return sum;
}
 800df4c:	ee00 0a10 	vmov	s0, r0
 800df50:	801c      	strh	r4, [r3, #0]
 800df52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df56:	bf00      	nop
 800df58:	73f2981b 	.word	0x73f2981b
 800df5c:	3f811eb6 	.word	0x3f811eb6
 800df60:	2008bccc 	.word	0x2008bccc
 800df64:	2008bcc4 	.word	0x2008bcc4

0800df68 <Calculate_PPFD_PPL_Range>:

float Calculate_PPFD_PPL_Range(float R_data[], float Wavelenght[], uint8_t Range)
{
 800df68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t Range_min, Range_max;
	sum = 0;
 800df6c:	4d34      	ldr	r5, [pc, #208]	; (800e040 <Calculate_PPFD_PPL_Range+0xd8>)
 800df6e:	2300      	movs	r3, #0
 800df70:	602b      	str	r3, [r5, #0]
	
	if (Range == BLUE_RANGE)
 800df72:	b1f2      	cbz	r2, 800dfb2 <Calculate_PPFD_PPL_Range+0x4a>
	{
		Range_min = 400;
		Range_max = 500;
	} else if (Range == GREEN_RANGE)
 800df74:	2a01      	cmp	r2, #1
 800df76:	d021      	beq.n	800dfbc <Calculate_PPFD_PPL_Range+0x54>
	{
		Range_min = 500;
		Range_max = 600;
	} else if (Range == RED_RANGE)
 800df78:	2a02      	cmp	r2, #2
 800df7a:	d024      	beq.n	800dfc6 <Calculate_PPFD_PPL_Range+0x5e>
		Range_min = 600;
		Range_max = 700;
	}else if (Range == FAR_RED_RANGE)
	{
		Range_min = 700;
		Range_max = 1000;
 800df7c:	2a03      	cmp	r2, #3
 800df7e:	bf0b      	itete	eq
 800df80:	f44f 7a7a 	moveq.w	sl, #1000	; 0x3e8
 800df84:	f04f 0a00 	movne.w	sl, #0
 800df88:	f44f 772f 	moveq.w	r7, #700	; 0x2bc
 800df8c:	2700      	movne	r7, #0
	}
	
	for(iq = 0; iq < 1024; iq++)
 800df8e:	4a2d      	ldr	r2, [pc, #180]	; (800e044 <Calculate_PPFD_PPL_Range+0xdc>)
 800df90:	9201      	str	r2, [sp, #4]
 800df92:	2400      	movs	r4, #0
 800df94:	8014      	strh	r4, [r2, #0]
 800df96:	4606      	mov	r6, r0
 800df98:	468b      	mov	fp, r1
 800df9a:	4623      	mov	r3, r4
 800df9c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800dfa0:	d116      	bne.n	800dfd0 <Calculate_PPFD_PPL_Range+0x68>
 800dfa2:	b10b      	cbz	r3, 800dfa8 <Calculate_PPFD_PPL_Range+0x40>
 800dfa4:	9b01      	ldr	r3, [sp, #4]
 800dfa6:	801c      	strh	r4, [r3, #0]
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
			}
		}
	}
	return sum;
}
 800dfa8:	ed95 0a00 	vldr	s0, [r5]
 800dfac:	b003      	add	sp, #12
 800dfae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Range_max = 500;
 800dfb2:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
		Range_min = 400;
 800dfb6:	f44f 77c8 	mov.w	r7, #400	; 0x190
 800dfba:	e7e8      	b.n	800df8e <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 600;
 800dfbc:	f44f 7a16 	mov.w	sl, #600	; 0x258
		Range_min = 500;
 800dfc0:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
 800dfc4:	e7e3      	b.n	800df8e <Calculate_PPFD_PPL_Range+0x26>
		Range_max = 700;
 800dfc6:	f44f 7a2f 	mov.w	sl, #700	; 0x2bc
		Range_min = 600;
 800dfca:	f44f 7716 	mov.w	r7, #600	; 0x258
 800dfce:	e7de      	b.n	800df8e <Calculate_PPFD_PPL_Range+0x26>
		if(Wavelenght[iq] > Range_min && Wavelenght[iq] < Range_max)
 800dfd0:	ee07 7a10 	vmov	s14, r7
 800dfd4:	ecfb 7a01 	vldmia	fp!, {s15}
 800dfd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dfdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dfe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfe4:	dd23      	ble.n	800e02e <Calculate_PPFD_PPL_Range+0xc6>
 800dfe6:	ee07 aa10 	vmov	s14, sl
 800dfea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800dfee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dff6:	d51a      	bpl.n	800e02e <Calculate_PPFD_PPL_Range+0xc6>
				sum = sum + (R_data[iq]*Wavelenght[iq]*0.00835936108917328);
 800dff8:	ed96 7a00 	vldr	s14, [r6]
 800dffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e000:	ee17 0a90 	vmov	r0, s15
 800e004:	f7f2 fab0 	bl	8000568 <__aeabi_f2d>
 800e008:	a30b      	add	r3, pc, #44	; (adr r3, 800e038 <Calculate_PPFD_PPL_Range+0xd0>)
 800e00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e00e:	f7f2 faff 	bl	8000610 <__aeabi_dmul>
 800e012:	4680      	mov	r8, r0
 800e014:	6828      	ldr	r0, [r5, #0]
 800e016:	4689      	mov	r9, r1
 800e018:	f7f2 faa6 	bl	8000568 <__aeabi_f2d>
 800e01c:	4602      	mov	r2, r0
 800e01e:	460b      	mov	r3, r1
 800e020:	4640      	mov	r0, r8
 800e022:	4649      	mov	r1, r9
 800e024:	f7f2 f942 	bl	80002ac <__adddf3>
 800e028:	f7f2 fdea 	bl	8000c00 <__aeabi_d2f>
 800e02c:	6028      	str	r0, [r5, #0]
 800e02e:	3401      	adds	r4, #1
 800e030:	b2a4      	uxth	r4, r4
 800e032:	3604      	adds	r6, #4
 800e034:	2301      	movs	r3, #1
 800e036:	e7b1      	b.n	800df9c <Calculate_PPFD_PPL_Range+0x34>
 800e038:	73f2981b 	.word	0x73f2981b
 800e03c:	3f811eb6 	.word	0x3f811eb6
 800e040:	2008bccc 	.word	0x2008bccc
 800e044:	2008bcc4 	.word	0x2008bcc4

0800e048 <Calculate_ELb>:
	return sum;
}

float Calculate_ELb(float R_data[], float Hazard_Blue[])
{
		sum = 0;
 800e048:	4a0a      	ldr	r2, [pc, #40]	; (800e074 <Calculate_ELb+0x2c>)
 800e04a:	2300      	movs	r3, #0
 800e04c:	6013      	str	r3, [r2, #0]
 800e04e:	2300      	movs	r3, #0
	for (iq = 0; iq < 1024; iq++)
	{
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e050:	ecb0 7a01 	vldmia	r0!, {s14}
 800e054:	ecf1 7a01 	vldmia	r1!, {s15}
 800e058:	ed92 0a00 	vldr	s0, [r2]
 800e05c:	eea7 0a27 	vfma.f32	s0, s14, s15
	for (iq = 0; iq < 1024; iq++)
 800e060:	3301      	adds	r3, #1
 800e062:	b29b      	uxth	r3, r3
 800e064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		sum = sum + (R_data[iq]*Hazard_Blue[iq]);
 800e068:	ed82 0a00 	vstr	s0, [r2]
	for (iq = 0; iq < 1024; iq++)
 800e06c:	d1f0      	bne.n	800e050 <Calculate_ELb+0x8>
 800e06e:	4a02      	ldr	r2, [pc, #8]	; (800e078 <Calculate_ELb+0x30>)
 800e070:	8013      	strh	r3, [r2, #0]
	}
	return sum;
}
 800e072:	4770      	bx	lr
 800e074:	2008bccc 	.word	0x2008bccc
 800e078:	2008bcc4 	.word	0x2008bcc4

0800e07c <Calculate_ELr>:
 800e07c:	f7ff bfe4 	b.w	800e048 <Calculate_ELb>

0800e080 <Calculate_XYZ1964>:




void Calculate_XYZ1964(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e080:	b5d0      	push	{r4, r6, r7, lr}
 800e082:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e086:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e10c <Calculate_XYZ1964+0x8c>
{
 800e08a:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e08c:	eef0 7a48 	vmov.f32	s15, s16
 800e090:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1964[0] = 0;
	colorimetry_XYZ1964[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e094:	ecb0 7a01 	vldmia	r0!, {s14}
 800e098:	ecf1 6a01 	vldmia	r1!, {s13}
 800e09c:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e0a0:	3401      	adds	r4, #1
 800e0a2:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e0a4:	ecf2 6a01 	vldmia	r2!, {s13}
 800e0a8:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e0ac:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e0b0:	ecf3 6a01 	vldmia	r3!, {s13}
 800e0b4:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e0b8:	d1ec      	bne.n	800e094 <Calculate_XYZ1964+0x14>
	}
	
	k = 100/Y_sum;
 800e0ba:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e110 <Calculate_XYZ1964+0x90>
 800e0be:	4b15      	ldr	r3, [pc, #84]	; (800e114 <Calculate_XYZ1964+0x94>)
 800e0c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e0c4:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1964[0] = k*X_sum;
 800e0c6:	4c14      	ldr	r4, [pc, #80]	; (800e118 <Calculate_XYZ1964+0x98>)
	k = 100/Y_sum;
 800e0c8:	ee16 0a90 	vmov	r0, s13
 800e0cc:	f7f2 fa4c 	bl	8000568 <__aeabi_f2d>
 800e0d0:	4606      	mov	r6, r0
 800e0d2:	460f      	mov	r7, r1
	colorimetry_XYZ1964[0] = k*X_sum;
 800e0d4:	ee18 0a90 	vmov	r0, s17
 800e0d8:	f7f2 fa46 	bl	8000568 <__aeabi_f2d>
 800e0dc:	4632      	mov	r2, r6
 800e0de:	463b      	mov	r3, r7
 800e0e0:	f7f2 fa96 	bl	8000610 <__aeabi_dmul>
 800e0e4:	f7f2 fd6c 	bl	8000bc0 <__aeabi_d2uiz>
	colorimetry_XYZ1964[1] = 100;
 800e0e8:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1964[0] = k*X_sum;
 800e0ea:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1964[1] = 100;
 800e0ec:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e0ee:	ee18 0a10 	vmov	r0, s16
 800e0f2:	f7f2 fa39 	bl	8000568 <__aeabi_f2d>
 800e0f6:	4632      	mov	r2, r6
 800e0f8:	463b      	mov	r3, r7
 800e0fa:	f7f2 fa89 	bl	8000610 <__aeabi_dmul>
 800e0fe:	f7f2 fd5f 	bl	8000bc0 <__aeabi_d2uiz>
}
 800e102:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1964[2] = k*Z_sum;	
 800e106:	80a0      	strh	r0, [r4, #4]
}
 800e108:	bdd0      	pop	{r4, r6, r7, pc}
 800e10a:	bf00      	nop
 800e10c:	00000000 	.word	0x00000000
 800e110:	42c80000 	.word	0x42c80000
 800e114:	2008bcc4 	.word	0x2008bcc4
 800e118:	2008a7c4 	.word	0x2008a7c4

0800e11c <Calculate_XYZ1931>:
void Calculate_XYZ1931(float R_data[], float colorimetry_x[], float colorimetry_y[], float colorimetry_z[])
{
 800e11c:	b5d0      	push	{r4, r6, r7, lr}
 800e11e:	ed2d 8b02 	vpush	{d8}

	double k;
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e122:	ed9f 8a21 	vldr	s16, [pc, #132]	; 800e1a8 <Calculate_XYZ1931+0x8c>
{
 800e126:	2400      	movs	r4, #0
	float X_sum = 0, Y_sum = 0, Z_sum = 0;
 800e128:	eef0 7a48 	vmov.f32	s15, s16
 800e12c:	eef0 8a48 	vmov.f32	s17, s16
	colorimetry_XYZ1931[0] = 0;
	colorimetry_XYZ1931[2] = 0;	
	
	for (iq = 0; iq < 1024; iq++)
	{
		X_sum = X_sum + (R_data[iq]*colorimetry_x[iq]);
 800e130:	ecb0 7a01 	vldmia	r0!, {s14}
 800e134:	ecf1 6a01 	vldmia	r1!, {s13}
 800e138:	eee7 8a26 	vfma.f32	s17, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e13c:	3401      	adds	r4, #1
 800e13e:	b2a4      	uxth	r4, r4
		Y_sum = Y_sum + (R_data[iq]*colorimetry_y[iq]);
 800e140:	ecf2 6a01 	vldmia	r2!, {s13}
 800e144:	eee7 7a26 	vfma.f32	s15, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e148:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
		Z_sum = Z_sum + (R_data[iq]*colorimetry_z[iq]);
 800e14c:	ecf3 6a01 	vldmia	r3!, {s13}
 800e150:	eea7 8a26 	vfma.f32	s16, s14, s13
	for (iq = 0; iq < 1024; iq++)
 800e154:	d1ec      	bne.n	800e130 <Calculate_XYZ1931+0x14>
	}
	
	k = 100/Y_sum;
 800e156:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800e1ac <Calculate_XYZ1931+0x90>
 800e15a:	4b15      	ldr	r3, [pc, #84]	; (800e1b0 <Calculate_XYZ1931+0x94>)
 800e15c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e160:	801c      	strh	r4, [r3, #0]
	
	colorimetry_XYZ1931[0] = k*X_sum;
 800e162:	4c14      	ldr	r4, [pc, #80]	; (800e1b4 <Calculate_XYZ1931+0x98>)
	k = 100/Y_sum;
 800e164:	ee16 0a90 	vmov	r0, s13
 800e168:	f7f2 f9fe 	bl	8000568 <__aeabi_f2d>
 800e16c:	4606      	mov	r6, r0
 800e16e:	460f      	mov	r7, r1
	colorimetry_XYZ1931[0] = k*X_sum;
 800e170:	ee18 0a90 	vmov	r0, s17
 800e174:	f7f2 f9f8 	bl	8000568 <__aeabi_f2d>
 800e178:	4632      	mov	r2, r6
 800e17a:	463b      	mov	r3, r7
 800e17c:	f7f2 fa48 	bl	8000610 <__aeabi_dmul>
 800e180:	f7f2 fd1e 	bl	8000bc0 <__aeabi_d2uiz>
	colorimetry_XYZ1931[1] = 100;
 800e184:	2364      	movs	r3, #100	; 0x64
	colorimetry_XYZ1931[0] = k*X_sum;
 800e186:	8020      	strh	r0, [r4, #0]
	colorimetry_XYZ1931[1] = 100;
 800e188:	8063      	strh	r3, [r4, #2]
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e18a:	ee18 0a10 	vmov	r0, s16
 800e18e:	f7f2 f9eb 	bl	8000568 <__aeabi_f2d>
 800e192:	4632      	mov	r2, r6
 800e194:	463b      	mov	r3, r7
 800e196:	f7f2 fa3b 	bl	8000610 <__aeabi_dmul>
 800e19a:	f7f2 fd11 	bl	8000bc0 <__aeabi_d2uiz>
}
 800e19e:	ecbd 8b02 	vpop	{d8}
	colorimetry_XYZ1931[2] = k*Z_sum;	
 800e1a2:	80a0      	strh	r0, [r4, #4]
}
 800e1a4:	bdd0      	pop	{r4, r6, r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	00000000 	.word	0x00000000
 800e1ac:	42c80000 	.word	0x42c80000
 800e1b0:	2008bcc4 	.word	0x2008bcc4
 800e1b4:	2008a7be 	.word	0x2008a7be

0800e1b8 <Calculate_xy1964>:
void Calculate_xy1964(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e1b8:	8801      	ldrh	r1, [r0, #0]
 800e1ba:	8842      	ldrh	r2, [r0, #2]
 800e1bc:	8880      	ldrh	r0, [r0, #4]
 800e1be:	188b      	adds	r3, r1, r2
 800e1c0:	4403      	add	r3, r0
	
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e1c2:	b29b      	uxth	r3, r3
 800e1c4:	ee07 3a90 	vmov	s15, r3
 800e1c8:	ee07 1a10 	vmov	s14, r1
 800e1cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e1d4:	4b06      	ldr	r3, [pc, #24]	; (800e1f0 <Calculate_xy1964+0x38>)
 800e1d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e1da:	ee07 2a10 	vmov	s14, r2
 800e1de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1964[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e1e2:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1964[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e1e6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e1ea:	edc3 6a01 	vstr	s13, [r3, #4]
 800e1ee:	4770      	bx	lr
 800e1f0:	2008a7e4 	.word	0x2008a7e4

0800e1f4 <Calculate_xy1931>:
}

void Calculate_xy1931(uint16_t colorimetry_XYZ_calculate[])
{
	uint16_t sum = colorimetry_XYZ_calculate[0] + colorimetry_XYZ_calculate[1] + colorimetry_XYZ_calculate[2];
 800e1f4:	8801      	ldrh	r1, [r0, #0]
 800e1f6:	8842      	ldrh	r2, [r0, #2]
 800e1f8:	8880      	ldrh	r0, [r0, #4]
 800e1fa:	188b      	adds	r3, r1, r2
 800e1fc:	4403      	add	r3, r0
	
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e1fe:	b29b      	uxth	r3, r3
 800e200:	ee07 3a90 	vmov	s15, r3
 800e204:	ee07 1a10 	vmov	s14, r1
 800e208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e20c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800e210:	4b06      	ldr	r3, [pc, #24]	; (800e22c <Calculate_xy1931+0x38>)
 800e212:	eec7 6a27 	vdiv.f32	s13, s14, s15
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e216:	ee07 2a10 	vmov	s14, r2
 800e21a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
	colorimetry_xy1931[0] = fabs(((float)colorimetry_XYZ_calculate[0])/((float)sum));
 800e21e:	edc3 6a00 	vstr	s13, [r3]
	colorimetry_xy1931[1] = fabs((float)colorimetry_XYZ_calculate[1])/((float)sum);
 800e222:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e226:	edc3 6a01 	vstr	s13, [r3, #4]
 800e22a:	4770      	bx	lr
 800e22c:	2008a7dc 	.word	0x2008a7dc

0800e230 <Calculate_uv>:
}

void Calculate_uv(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e230:	ed90 7a01 	vldr	s14, [r0, #4]
 800e234:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e238:	4b0e      	ldr	r3, [pc, #56]	; (800e274 <Calculate_uv+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e23a:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e242:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e246:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e24a:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e24e:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e252:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e256:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e25a:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e25e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e262:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e266:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv[1] = 6*colorimetry_xy_calculate[1]/sum;
 800e26a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e26e:	edc3 6a01 	vstr	s13, [r3, #4]
 800e272:	4770      	bx	lr
 800e274:	2008a7cc 	.word	0x2008a7cc

0800e278 <Calculate_uv1976>:
}

void Calculate_uv1976(float colorimetry_xy_calculate[])
{
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e278:	ed90 7a01 	vldr	s14, [r0, #4]
 800e27c:	edd0 6a00 	vldr	s13, [r0]
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e280:	4b0e      	ldr	r3, [pc, #56]	; (800e2bc <Calculate_uv1976+0x44>)
	float sum = -2*colorimetry_xy_calculate[0] + 12*colorimetry_xy_calculate[1] + 3;
 800e282:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
 800e286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e28a:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 800e28e:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e292:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e296:	ee77 7a86 	vadd.f32	s15, s15, s12
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e29a:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e29e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e2a2:	ee86 6aa7 	vdiv.f32	s12, s13, s15
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e2a6:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800e2aa:	ee27 7a26 	vmul.f32	s14, s14, s13
	colorimetry_uv1976[0] = 4*colorimetry_xy_calculate[0]/sum;
 800e2ae:	ed83 6a00 	vstr	s12, [r3]
	colorimetry_uv1976[1] = 9*colorimetry_xy_calculate[1]/sum;
 800e2b2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e2b6:	edc3 6a01 	vstr	s13, [r3, #4]
 800e2ba:	4770      	bx	lr
 800e2bc:	2008a7d4 	.word	0x2008a7d4

0800e2c0 <Calculate_Tc>:
}

double up = 0, vp = 0, factor_uvp = 0, result_tc, u_dop = 0, v_dop = 0, deltaC = 0;
float Calculate_Tc(float R_data[], uint8_t CIE_Type)
{
 800e2c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2c4:	ed2d 8b02 	vpush	{d8}
 800e2c8:	b08b      	sub	sp, #44	; 0x2c
	
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
	uint8_t	 i_min1 = 0, i_min2 = 0;
	
	if(CIE_Type == 0x00) //check CIE 1964
 800e2ca:	b921      	cbnz	r1, 800e2d6 <Calculate_Tc+0x16>
	{
		Calculate_XYZ1931(R_data, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 800e2cc:	4bb4      	ldr	r3, [pc, #720]	; (800e5a0 <Calculate_Tc+0x2e0>)
 800e2ce:	4ab5      	ldr	r2, [pc, #724]	; (800e5a4 <Calculate_Tc+0x2e4>)
 800e2d0:	49b5      	ldr	r1, [pc, #724]	; (800e5a8 <Calculate_Tc+0x2e8>)
 800e2d2:	f7ff ff23 	bl	800e11c <Calculate_XYZ1931>
	}
	
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e2d6:	4bb5      	ldr	r3, [pc, #724]	; (800e5ac <Calculate_Tc+0x2ec>)
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800e2d8:	eddf 8ab5 	vldr	s17, [pc, #724]	; 800e5b0 <Calculate_Tc+0x2f0>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e2dc:	885e      	ldrh	r6, [r3, #2]
 800e2de:	881f      	ldrh	r7, [r3, #0]
 800e2e0:	889b      	ldrh	r3, [r3, #4]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
	
	
	for(uint8_t i = 0; i < 31; i++)
	{
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800e2e2:	f8df a30c 	ldr.w	sl, [pc, #780]	; 800e5f0 <Calculate_Tc+0x330>
	factor_uvp = (colorimetry_XYZ1931[0] + 15*colorimetry_XYZ1931[1] + 3*colorimetry_XYZ1931[2]);
 800e2e6:	ebc6 1006 	rsb	r0, r6, r6, lsl #4
 800e2ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e2ee:	4438      	add	r0, r7
 800e2f0:	4418      	add	r0, r3
 800e2f2:	f7f2 f927 	bl	8000544 <__aeabi_i2d>
 800e2f6:	4baf      	ldr	r3, [pc, #700]	; (800e5b4 <Calculate_Tc+0x2f4>)
 800e2f8:	4604      	mov	r4, r0
 800e2fa:	460d      	mov	r5, r1
 800e2fc:	e9c3 4500 	strd	r4, r5, [r3]
	up = (4.*colorimetry_XYZ1931[0])/factor_uvp;
 800e300:	4638      	mov	r0, r7
 800e302:	f7f2 f91f 	bl	8000544 <__aeabi_i2d>
 800e306:	2200      	movs	r2, #0
 800e308:	4bab      	ldr	r3, [pc, #684]	; (800e5b8 <Calculate_Tc+0x2f8>)
 800e30a:	4fac      	ldr	r7, [pc, #688]	; (800e5bc <Calculate_Tc+0x2fc>)
 800e30c:	f7f2 f980 	bl	8000610 <__aeabi_dmul>
 800e310:	4622      	mov	r2, r4
 800e312:	462b      	mov	r3, r5
 800e314:	f7f2 faa6 	bl	8000864 <__aeabi_ddiv>
 800e318:	4ba9      	ldr	r3, [pc, #676]	; (800e5c0 <Calculate_Tc+0x300>)
 800e31a:	e9cd 0100 	strd	r0, r1, [sp]
 800e31e:	e9c3 0100 	strd	r0, r1, [r3]
	vp = (6.*colorimetry_XYZ1931[1])/factor_uvp;
 800e322:	4630      	mov	r0, r6
 800e324:	f7f2 f90e 	bl	8000544 <__aeabi_i2d>
 800e328:	2200      	movs	r2, #0
 800e32a:	4ba6      	ldr	r3, [pc, #664]	; (800e5c4 <Calculate_Tc+0x304>)
 800e32c:	f7f2 f970 	bl	8000610 <__aeabi_dmul>
 800e330:	462b      	mov	r3, r5
 800e332:	4622      	mov	r2, r4
 800e334:	f7f2 fa96 	bl	8000864 <__aeabi_ddiv>
 800e338:	4ba3      	ldr	r3, [pc, #652]	; (800e5c8 <Calculate_Tc+0x308>)
 800e33a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e33e:	2600      	movs	r6, #0
 800e340:	e9c3 0100 	strd	r0, r1, [r3]
 800e344:	4ba1      	ldr	r3, [pc, #644]	; (800e5cc <Calculate_Tc+0x30c>)
 800e346:	9304      	str	r3, [sp, #16]
	uint8_t	 i_min1 = 0, i_min2 = 0;
 800e348:	4635      	mov	r5, r6
 800e34a:	4634      	mov	r4, r6
	float dline = 0, dmin1 = 1000, dmin2 = 1000;
 800e34c:	eeb0 8a68 	vmov.f32	s16, s17
 800e350:	46d3      	mov	fp, sl
 800e352:	b2f3      	uxtb	r3, r6
 800e354:	9307      	str	r3, [sp, #28]
		dline = ((vp - ((float)v0[i])/100000.)- t[i] * (up - ((float)u0[i])/100000.))/t_sqrt[i];
 800e356:	9b04      	ldr	r3, [sp, #16]
 800e358:	ecf3 7a01 	vldmia	r3!, {s15}
 800e35c:	9304      	str	r3, [sp, #16]
 800e35e:	4b9c      	ldr	r3, [pc, #624]	; (800e5d0 <Calculate_Tc+0x310>)
 800e360:	edcd 7a05 	vstr	s15, [sp, #20]
 800e364:	f833 0016 	ldrh.w	r0, [r3, r6, lsl #1]
 800e368:	ecf7 7a01 	vldmia	r7!, {s15}
 800e36c:	edcd 7a06 	vstr	s15, [sp, #24]
 800e370:	ee07 0a90 	vmov	s15, r0
 800e374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e378:	ee17 0a90 	vmov	r0, s15
 800e37c:	f7f2 f8f4 	bl	8000568 <__aeabi_f2d>
 800e380:	a381      	add	r3, pc, #516	; (adr r3, 800e588 <Calculate_Tc+0x2c8>)
 800e382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e386:	f7f2 fa6d 	bl	8000864 <__aeabi_ddiv>
 800e38a:	4602      	mov	r2, r0
 800e38c:	460b      	mov	r3, r1
 800e38e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e392:	f7f1 ff89 	bl	80002a8 <__aeabi_dsub>
 800e396:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e39a:	f83a 0016 	ldrh.w	r0, [sl, r6, lsl #1]
 800e39e:	ee07 0a90 	vmov	s15, r0
 800e3a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3a6:	3601      	adds	r6, #1
 800e3a8:	ee17 0a90 	vmov	r0, s15
 800e3ac:	f7f2 f8dc 	bl	8000568 <__aeabi_f2d>
 800e3b0:	a375      	add	r3, pc, #468	; (adr r3, 800e588 <Calculate_Tc+0x2c8>)
 800e3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b6:	f7f2 fa55 	bl	8000864 <__aeabi_ddiv>
 800e3ba:	4602      	mov	r2, r0
 800e3bc:	460b      	mov	r3, r1
 800e3be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3c2:	f7f1 ff71 	bl	80002a8 <__aeabi_dsub>
 800e3c6:	4680      	mov	r8, r0
 800e3c8:	9805      	ldr	r0, [sp, #20]
 800e3ca:	4689      	mov	r9, r1
 800e3cc:	f7f2 f8cc 	bl	8000568 <__aeabi_f2d>
 800e3d0:	4602      	mov	r2, r0
 800e3d2:	460b      	mov	r3, r1
 800e3d4:	4640      	mov	r0, r8
 800e3d6:	4649      	mov	r1, r9
 800e3d8:	f7f2 f91a 	bl	8000610 <__aeabi_dmul>
 800e3dc:	4602      	mov	r2, r0
 800e3de:	460b      	mov	r3, r1
 800e3e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e3e4:	f7f1 ff60 	bl	80002a8 <__aeabi_dsub>
 800e3e8:	4680      	mov	r8, r0
 800e3ea:	9806      	ldr	r0, [sp, #24]
 800e3ec:	4689      	mov	r9, r1
 800e3ee:	f7f2 f8bb 	bl	8000568 <__aeabi_f2d>
 800e3f2:	4602      	mov	r2, r0
 800e3f4:	460b      	mov	r3, r1
 800e3f6:	4640      	mov	r0, r8
 800e3f8:	4649      	mov	r1, r9
 800e3fa:	f7f2 fa33 	bl	8000864 <__aeabi_ddiv>
 800e3fe:	f7f2 fbff 	bl	8000c00 <__aeabi_d2f>
 800e402:	ee07 0a10 	vmov	s14, r0
		if (fabs(dmin1) > fabs(dline)) {
 800e406:	eef0 7ac8 	vabs.f32	s15, s16
 800e40a:	eef0 6ac7 	vabs.f32	s13, s14
 800e40e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e416:	bfc1      	itttt	gt
 800e418:	4625      	movgt	r5, r4
 800e41a:	eef0 8a48 	vmovgt.f32	s17, s16
 800e41e:	9c07      	ldrgt	r4, [sp, #28]
				dmin2 = dmin1; 
				dmin1 = dline;
 800e420:	eeb0 8a47 	vmovgt.f32	s16, s14
	for(uint8_t i = 0; i < 31; i++)
 800e424:	2e1f      	cmp	r6, #31
 800e426:	d194      	bne.n	800e352 <Calculate_Tc+0x92>
				i_min2 = i_min1;
				i_min1 = i;
			}
	}
	
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800e428:	f83b 0014 	ldrh.w	r0, [fp, r4, lsl #1]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800e42c:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 800e5d0 <Calculate_Tc+0x310>
	u_dop = (u0[i_min1]/100000. + u0[i_min2]/100000.)/2;
 800e430:	f7f2 f888 	bl	8000544 <__aeabi_i2d>
 800e434:	a354      	add	r3, pc, #336	; (adr r3, 800e588 <Calculate_Tc+0x2c8>)
 800e436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e43a:	f7f2 fa13 	bl	8000864 <__aeabi_ddiv>
 800e43e:	4606      	mov	r6, r0
 800e440:	f83b 0015 	ldrh.w	r0, [fp, r5, lsl #1]
 800e444:	460f      	mov	r7, r1
 800e446:	f7f2 f87d 	bl	8000544 <__aeabi_i2d>
 800e44a:	a34f      	add	r3, pc, #316	; (adr r3, 800e588 <Calculate_Tc+0x2c8>)
 800e44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e450:	f7f2 fa08 	bl	8000864 <__aeabi_ddiv>
 800e454:	4602      	mov	r2, r0
 800e456:	460b      	mov	r3, r1
 800e458:	4630      	mov	r0, r6
 800e45a:	4639      	mov	r1, r7
 800e45c:	f7f1 ff26 	bl	80002ac <__adddf3>
 800e460:	2200      	movs	r2, #0
 800e462:	4b5c      	ldr	r3, [pc, #368]	; (800e5d4 <Calculate_Tc+0x314>)
 800e464:	f7f2 f8d4 	bl	8000610 <__aeabi_dmul>
 800e468:	4b5b      	ldr	r3, [pc, #364]	; (800e5d8 <Calculate_Tc+0x318>)
 800e46a:	4680      	mov	r8, r0
 800e46c:	4689      	mov	r9, r1
 800e46e:	e9c3 8900 	strd	r8, r9, [r3]
	v_dop = (v0[i_min1]/100000. + v0[i_min2]/100000.)/2;
 800e472:	f83a 0014 	ldrh.w	r0, [sl, r4, lsl #1]
 800e476:	f7f2 f865 	bl	8000544 <__aeabi_i2d>
 800e47a:	a343      	add	r3, pc, #268	; (adr r3, 800e588 <Calculate_Tc+0x2c8>)
 800e47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e480:	f7f2 f9f0 	bl	8000864 <__aeabi_ddiv>
 800e484:	4606      	mov	r6, r0
 800e486:	f83a 0015 	ldrh.w	r0, [sl, r5, lsl #1]
 800e48a:	460f      	mov	r7, r1
 800e48c:	f7f2 f85a 	bl	8000544 <__aeabi_i2d>
 800e490:	a33d      	add	r3, pc, #244	; (adr r3, 800e588 <Calculate_Tc+0x2c8>)
 800e492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e496:	f7f2 f9e5 	bl	8000864 <__aeabi_ddiv>
 800e49a:	4602      	mov	r2, r0
 800e49c:	460b      	mov	r3, r1
 800e49e:	4630      	mov	r0, r6
 800e4a0:	4639      	mov	r1, r7
 800e4a2:	f7f1 ff03 	bl	80002ac <__adddf3>
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	4b4a      	ldr	r3, [pc, #296]	; (800e5d4 <Calculate_Tc+0x314>)
 800e4aa:	f7f2 f8b1 	bl	8000610 <__aeabi_dmul>
 800e4ae:	4b4b      	ldr	r3, [pc, #300]	; (800e5dc <Calculate_Tc+0x31c>)
 800e4b0:	4606      	mov	r6, r0
 800e4b2:	460f      	mov	r7, r1
 800e4b4:	e9c3 6700 	strd	r6, r7, [r3]
	
	deltaC = sqrt((pow((u_dop - up), 2)+ pow((v_dop - vp), 2)));
 800e4b8:	4640      	mov	r0, r8
 800e4ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4be:	4649      	mov	r1, r9
 800e4c0:	f7f1 fef2 	bl	80002a8 <__aeabi_dsub>
 800e4c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e4c8:	4680      	mov	r8, r0
 800e4ca:	4689      	mov	r9, r1
 800e4cc:	4630      	mov	r0, r6
 800e4ce:	4639      	mov	r1, r7
 800e4d0:	f7f1 feea 	bl	80002a8 <__aeabi_dsub>
 800e4d4:	4642      	mov	r2, r8
 800e4d6:	4606      	mov	r6, r0
 800e4d8:	460f      	mov	r7, r1
 800e4da:	464b      	mov	r3, r9
 800e4dc:	4640      	mov	r0, r8
 800e4de:	4649      	mov	r1, r9
 800e4e0:	f7f2 f896 	bl	8000610 <__aeabi_dmul>
 800e4e4:	4632      	mov	r2, r6
 800e4e6:	4680      	mov	r8, r0
 800e4e8:	4689      	mov	r9, r1
 800e4ea:	463b      	mov	r3, r7
 800e4ec:	4630      	mov	r0, r6
 800e4ee:	4639      	mov	r1, r7
 800e4f0:	f7f2 f88e 	bl	8000610 <__aeabi_dmul>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	4640      	mov	r0, r8
 800e4fa:	4649      	mov	r1, r9
 800e4fc:	f7f1 fed6 	bl	80002ac <__adddf3>
 800e500:	ec41 0b10 	vmov	d0, r0, r1
 800e504:	f014 fc20 	bl	8022d48 <sqrt>
 800e508:	4b35      	ldr	r3, [pc, #212]	; (800e5e0 <Calculate_Tc+0x320>)
 800e50a:	ec51 0b10 	vmov	r0, r1, d0
 800e50e:	ed83 0b00 	vstr	d0, [r3]
	
	if(deltaC > 0.05)
 800e512:	a31f      	add	r3, pc, #124	; (adr r3, 800e590 <Calculate_Tc+0x2d0>)
 800e514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e518:	f7f2 fb0a 	bl	8000b30 <__aeabi_dcmpgt>
 800e51c:	bb78      	cbnz	r0, 800e57e <Calculate_Tc+0x2be>
	{
		return 0xFFFF;
	}else
	{
		return result_tc = fabs(1000000./(Tc_tabl[i_min1]+dmin1*((Tc_tabl[i_min2]-Tc_tabl[i_min1])/(dmin1-dmin2))));
 800e51e:	4b31      	ldr	r3, [pc, #196]	; (800e5e4 <Calculate_Tc+0x324>)
 800e520:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 800e524:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 800e528:	ee07 2a90 	vmov	s15, r2
 800e52c:	1a9b      	subs	r3, r3, r2
 800e52e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800e532:	ee07 3a90 	vmov	s15, r3
 800e536:	ee78 8a68 	vsub.f32	s17, s16, s17
 800e53a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e53e:	eec7 6aa8 	vdiv.f32	s13, s15, s17
 800e542:	eea8 7a26 	vfma.f32	s14, s16, s13
 800e546:	ee17 0a10 	vmov	r0, s14
 800e54a:	f7f2 f80d 	bl	8000568 <__aeabi_f2d>
 800e54e:	4602      	mov	r2, r0
 800e550:	460b      	mov	r3, r1
 800e552:	a111      	add	r1, pc, #68	; (adr r1, 800e598 <Calculate_Tc+0x2d8>)
 800e554:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e558:	f7f2 f984 	bl	8000864 <__aeabi_ddiv>
 800e55c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e560:	4921      	ldr	r1, [pc, #132]	; (800e5e8 <Calculate_Tc+0x328>)
 800e562:	4602      	mov	r2, r0
 800e564:	e9c1 2300 	strd	r2, r3, [r1]
 800e568:	4610      	mov	r0, r2
 800e56a:	4619      	mov	r1, r3
 800e56c:	f7f2 fb48 	bl	8000c00 <__aeabi_d2f>
	}
}
 800e570:	ee00 0a10 	vmov	s0, r0
 800e574:	b00b      	add	sp, #44	; 0x2c
 800e576:	ecbd 8b02 	vpop	{d8}
 800e57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 0xFFFF;
 800e57e:	481b      	ldr	r0, [pc, #108]	; (800e5ec <Calculate_Tc+0x32c>)
 800e580:	e7f6      	b.n	800e570 <Calculate_Tc+0x2b0>
 800e582:	bf00      	nop
 800e584:	f3af 8000 	nop.w
 800e588:	00000000 	.word	0x00000000
 800e58c:	40f86a00 	.word	0x40f86a00
 800e590:	9999999a 	.word	0x9999999a
 800e594:	3fa99999 	.word	0x3fa99999
 800e598:	00000000 	.word	0x00000000
 800e59c:	412e8480 	.word	0x412e8480
 800e5a0:	200887b0 	.word	0x200887b0
 800e5a4:	2004dbe0 	.word	0x2004dbe0
 800e5a8:	200857b0 	.word	0x200857b0
 800e5ac:	2008a7be 	.word	0x2008a7be
 800e5b0:	447a0000 	.word	0x447a0000
 800e5b4:	20004c20 	.word	0x20004c20
 800e5b8:	40100000 	.word	0x40100000
 800e5bc:	080245e4 	.word	0x080245e4
 800e5c0:	20004c30 	.word	0x20004c30
 800e5c4:	40180000 	.word	0x40180000
 800e5c8:	20004c40 	.word	0x20004c40
 800e5cc:	08024568 	.word	0x08024568
 800e5d0:	0802469e 	.word	0x0802469e
 800e5d4:	3fe00000 	.word	0x3fe00000
 800e5d8:	20004c28 	.word	0x20004c28
 800e5dc:	20004c38 	.word	0x20004c38
 800e5e0:	20004c18 	.word	0x20004c18
 800e5e4:	08024474 	.word	0x08024474
 800e5e8:	2008bcd0 	.word	0x2008bcd0
 800e5ec:	477fff00 	.word	0x477fff00
 800e5f0:	08024660 	.word	0x08024660
 800e5f4:	00000000 	.word	0x00000000

0800e5f8 <Calculate_Lab>:

void Calculate_Lab(uint16_t colorimetry_XYZ_calculate[], uint8_t CIE_Type, uint8_t Source_Type)
{
 800e5f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	float Xref, Yref = 100, Zref;
	uint8_t i;
	double factor_x = 0, factor_y = 0, factor_z = 0, fx = 0, fy = 0, fz = 0;
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e5fc:	2a01      	cmp	r2, #1
{
 800e5fe:	ed2d 8b02 	vpush	{d8}
 800e602:	4606      	mov	r6, r0
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e604:	f000 80b9 	beq.w	800e77a <Calculate_Lab+0x182>
 800e608:	2a02      	cmp	r2, #2
 800e60a:	f000 80b8 	beq.w	800e77e <Calculate_Lab+0x186>
 800e60e:	2a04      	cmp	r2, #4
 800e610:	f000 80b7 	beq.w	800e782 <Calculate_Lab+0x18a>
 800e614:	2a08      	cmp	r2, #8
 800e616:	f000 80b6 	beq.w	800e786 <Calculate_Lab+0x18e>
 800e61a:	2a10      	cmp	r2, #16
 800e61c:	f000 80b5 	beq.w	800e78a <Calculate_Lab+0x192>
 800e620:	2a20      	cmp	r2, #32
 800e622:	bf14      	ite	ne
 800e624:	2400      	movne	r4, #0
 800e626:	2405      	moveq	r4, #5
	
	if (CIE_Type == 0x01) //check CIE 1931
 800e628:	2901      	cmp	r1, #1
 800e62a:	f040 80b0 	bne.w	800e78e <Calculate_Lab+0x196>
	{
		Xref = Xref_CIE1931[i]/100.0;
 800e62e:	4b82      	ldr	r3, [pc, #520]	; (800e838 <Calculate_Lab+0x240>)
 800e630:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e634:	f7f1 ff86 	bl	8000544 <__aeabi_i2d>
 800e638:	4b80      	ldr	r3, [pc, #512]	; (800e83c <Calculate_Lab+0x244>)
 800e63a:	2200      	movs	r2, #0
 800e63c:	f7f2 f912 	bl	8000864 <__aeabi_ddiv>
 800e640:	f7f2 fade 	bl	8000c00 <__aeabi_d2f>
		Zref = Zref_CIE1931[i]/100.0;
 800e644:	4b7e      	ldr	r3, [pc, #504]	; (800e840 <Calculate_Lab+0x248>)
		Xref = Xref_CIE1931[i]/100.0;
 800e646:	ee08 0a90 	vmov	s17, r0
	
	} else if(CIE_Type == 0x00) ////check CIE 1964
	{
		Xref = Xref_CIE1964[i]/100.0;
		Zref = Zref_CIE1964[i]/100.0;
 800e64a:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e64e:	f7f1 ff79 	bl	8000544 <__aeabi_i2d>
 800e652:	2200      	movs	r2, #0
 800e654:	4b79      	ldr	r3, [pc, #484]	; (800e83c <Calculate_Lab+0x244>)
 800e656:	f7f2 f905 	bl	8000864 <__aeabi_ddiv>
 800e65a:	f7f2 fad1 	bl	8000c00 <__aeabi_d2f>
 800e65e:	ee08 0a10 	vmov	s16, r0
	}
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e662:	8833      	ldrh	r3, [r6, #0]
 800e664:	ee07 3a90 	vmov	s15, r3
 800e668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e66c:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800e670:	ee17 0a10 	vmov	r0, s14
 800e674:	f7f1 ff78 	bl	8000568 <__aeabi_f2d>
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e678:	8873      	ldrh	r3, [r6, #2]
 800e67a:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800e844 <Calculate_Lab+0x24c>
 800e67e:	ee07 3a90 	vmov	s15, r3
 800e682:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e686:	4680      	mov	r8, r0
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e688:	eec7 6a87 	vdiv.f32	s13, s15, s14
	factor_x = (float)colorimetry_XYZ_calculate[0]/Xref;
 800e68c:	4689      	mov	r9, r1
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e68e:	ee16 0a90 	vmov	r0, s13
 800e692:	f7f1 ff69 	bl	8000568 <__aeabi_f2d>
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e696:	88b3      	ldrh	r3, [r6, #4]
 800e698:	ee07 3a90 	vmov	s15, r3
 800e69c:	eef8 7a67 	vcvt.f32.u32	s15, s15
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e6a0:	4604      	mov	r4, r0
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e6a2:	ee87 7a88 	vdiv.f32	s14, s15, s16
	factor_y = (float)colorimetry_XYZ_calculate[1]/Yref;
 800e6a6:	460d      	mov	r5, r1
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e6a8:	ee17 0a10 	vmov	r0, s14
 800e6ac:	f7f1 ff5c 	bl	8000568 <__aeabi_f2d>
	
		if(factor_x > 0.00885645)
 800e6b0:	a35b      	add	r3, pc, #364	; (adr r3, 800e820 <Calculate_Lab+0x228>)
 800e6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
	factor_z = (float)colorimetry_XYZ_calculate[2]/Zref;
 800e6b6:	4606      	mov	r6, r0
 800e6b8:	460f      	mov	r7, r1
		if(factor_x > 0.00885645)
 800e6ba:	4640      	mov	r0, r8
 800e6bc:	4649      	mov	r1, r9
 800e6be:	f7f2 fa37 	bl	8000b30 <__aeabi_dcmpgt>
 800e6c2:	2800      	cmp	r0, #0
 800e6c4:	d075      	beq.n	800e7b2 <Calculate_Lab+0x1ba>
	{
		fx = pow(factor_x, 1./3.);
 800e6c6:	ec49 8b10 	vmov	d0, r8, r9
 800e6ca:	ed9f 1b57 	vldr	d1, [pc, #348]	; 800e828 <Calculate_Lab+0x230>
 800e6ce:	f014 f9c3 	bl	8022a58 <pow>
 800e6d2:	ec59 8b10 	vmov	r8, r9, d0
	} else 
	{
		fx = (903.3*factor_x + 16.) / 116.;
	}
	
		if(factor_y > 0.00885645)
 800e6d6:	a352      	add	r3, pc, #328	; (adr r3, 800e820 <Calculate_Lab+0x228>)
 800e6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6dc:	4620      	mov	r0, r4
 800e6de:	4629      	mov	r1, r5
 800e6e0:	f7f2 fa26 	bl	8000b30 <__aeabi_dcmpgt>
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	d076      	beq.n	800e7d6 <Calculate_Lab+0x1de>
	{
		fy = pow(factor_y, 1./3.);
 800e6e8:	ec45 4b10 	vmov	d0, r4, r5
 800e6ec:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 800e828 <Calculate_Lab+0x230>
 800e6f0:	f014 f9b2 	bl	8022a58 <pow>
 800e6f4:	ec55 4b10 	vmov	r4, r5, d0
	} else 
	{
		fy = (903.3*factor_y + 16.) / 116.;
	}
	
		if(factor_z > 0.00885645)
 800e6f8:	a349      	add	r3, pc, #292	; (adr r3, 800e820 <Calculate_Lab+0x228>)
 800e6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6fe:	4630      	mov	r0, r6
 800e700:	4639      	mov	r1, r7
 800e702:	f7f2 fa15 	bl	8000b30 <__aeabi_dcmpgt>
 800e706:	2800      	cmp	r0, #0
 800e708:	d077      	beq.n	800e7fa <Calculate_Lab+0x202>
	{
		fz = pow(factor_z, 1./3.);
 800e70a:	ec47 6b10 	vmov	d0, r6, r7
 800e70e:	ed9f 1b46 	vldr	d1, [pc, #280]	; 800e828 <Calculate_Lab+0x230>
 800e712:	f014 f9a1 	bl	8022a58 <pow>
 800e716:	ec57 6b10 	vmov	r6, r7, d0
	} else 
	{
		fz = (903.3*factor_z + 16.) / 116.;
	}
	
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800e71a:	2200      	movs	r2, #0
 800e71c:	4b4a      	ldr	r3, [pc, #296]	; (800e848 <Calculate_Lab+0x250>)
 800e71e:	f8df a140 	ldr.w	sl, [pc, #320]	; 800e860 <Calculate_Lab+0x268>
 800e722:	4620      	mov	r0, r4
 800e724:	4629      	mov	r1, r5
 800e726:	f7f1 ff73 	bl	8000610 <__aeabi_dmul>
 800e72a:	2200      	movs	r2, #0
 800e72c:	4b47      	ldr	r3, [pc, #284]	; (800e84c <Calculate_Lab+0x254>)
 800e72e:	f7f1 fdbb 	bl	80002a8 <__aeabi_dsub>
 800e732:	f7f2 fa1d 	bl	8000b70 <__aeabi_d2iz>
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e736:	4622      	mov	r2, r4
	colorimetry_LAB[0] = (int16_t)(116.*fy-16.);
 800e738:	f8aa 0000 	strh.w	r0, [sl]
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e73c:	462b      	mov	r3, r5
 800e73e:	4640      	mov	r0, r8
 800e740:	4649      	mov	r1, r9
 800e742:	f7f1 fdb1 	bl	80002a8 <__aeabi_dsub>
 800e746:	2200      	movs	r2, #0
 800e748:	4b41      	ldr	r3, [pc, #260]	; (800e850 <Calculate_Lab+0x258>)
 800e74a:	f7f1 ff61 	bl	8000610 <__aeabi_dmul>
 800e74e:	f7f2 fa0f 	bl	8000b70 <__aeabi_d2iz>
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e752:	4632      	mov	r2, r6
	colorimetry_LAB[1] = (int16_t)(500.*(fx-fy));
 800e754:	f8aa 0002 	strh.w	r0, [sl, #2]
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e758:	463b      	mov	r3, r7
 800e75a:	4620      	mov	r0, r4
 800e75c:	4629      	mov	r1, r5
 800e75e:	f7f1 fda3 	bl	80002a8 <__aeabi_dsub>
 800e762:	2200      	movs	r2, #0
 800e764:	4b3b      	ldr	r3, [pc, #236]	; (800e854 <Calculate_Lab+0x25c>)
 800e766:	f7f1 ff53 	bl	8000610 <__aeabi_dmul>
 800e76a:	f7f2 fa01 	bl	8000b70 <__aeabi_d2iz>
	
}
 800e76e:	ecbd 8b02 	vpop	{d8}
	colorimetry_LAB[2] = (int16_t)(200.*(fy-fz));
 800e772:	f8aa 0004 	strh.w	r0, [sl, #4]
}
 800e776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = (Source_Type == Source_A)?0:(Source_Type == Source_D65)?1:(Source_Type == Source_C)?2:(Source_Type == Source_D50)?3:(Source_Type == Source_D55)?4:(Source_Type == Source_D75)?5:0;
 800e77a:	2400      	movs	r4, #0
 800e77c:	e754      	b.n	800e628 <Calculate_Lab+0x30>
 800e77e:	2401      	movs	r4, #1
 800e780:	e752      	b.n	800e628 <Calculate_Lab+0x30>
 800e782:	2402      	movs	r4, #2
 800e784:	e750      	b.n	800e628 <Calculate_Lab+0x30>
 800e786:	2403      	movs	r4, #3
 800e788:	e74e      	b.n	800e628 <Calculate_Lab+0x30>
 800e78a:	2404      	movs	r4, #4
 800e78c:	e74c      	b.n	800e628 <Calculate_Lab+0x30>
	} else if(CIE_Type == 0x00) ////check CIE 1964
 800e78e:	2900      	cmp	r1, #0
 800e790:	f47f af67 	bne.w	800e662 <Calculate_Lab+0x6a>
		Xref = Xref_CIE1964[i]/100.0;
 800e794:	4b30      	ldr	r3, [pc, #192]	; (800e858 <Calculate_Lab+0x260>)
 800e796:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 800e79a:	f7f1 fed3 	bl	8000544 <__aeabi_i2d>
 800e79e:	4b27      	ldr	r3, [pc, #156]	; (800e83c <Calculate_Lab+0x244>)
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f7f2 f85f 	bl	8000864 <__aeabi_ddiv>
 800e7a6:	f7f2 fa2b 	bl	8000c00 <__aeabi_d2f>
		Zref = Zref_CIE1964[i]/100.0;
 800e7aa:	4b2c      	ldr	r3, [pc, #176]	; (800e85c <Calculate_Lab+0x264>)
		Xref = Xref_CIE1964[i]/100.0;
 800e7ac:	ee08 0a90 	vmov	s17, r0
 800e7b0:	e74b      	b.n	800e64a <Calculate_Lab+0x52>
		fx = (903.3*factor_x + 16.) / 116.;
 800e7b2:	a31f      	add	r3, pc, #124	; (adr r3, 800e830 <Calculate_Lab+0x238>)
 800e7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b8:	4640      	mov	r0, r8
 800e7ba:	4649      	mov	r1, r9
 800e7bc:	f7f1 ff28 	bl	8000610 <__aeabi_dmul>
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	4b22      	ldr	r3, [pc, #136]	; (800e84c <Calculate_Lab+0x254>)
 800e7c4:	f7f1 fd72 	bl	80002ac <__adddf3>
 800e7c8:	2200      	movs	r2, #0
 800e7ca:	4b1f      	ldr	r3, [pc, #124]	; (800e848 <Calculate_Lab+0x250>)
 800e7cc:	f7f2 f84a 	bl	8000864 <__aeabi_ddiv>
 800e7d0:	4680      	mov	r8, r0
 800e7d2:	4689      	mov	r9, r1
 800e7d4:	e77f      	b.n	800e6d6 <Calculate_Lab+0xde>
		fy = (903.3*factor_y + 16.) / 116.;
 800e7d6:	a316      	add	r3, pc, #88	; (adr r3, 800e830 <Calculate_Lab+0x238>)
 800e7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7dc:	4620      	mov	r0, r4
 800e7de:	4629      	mov	r1, r5
 800e7e0:	f7f1 ff16 	bl	8000610 <__aeabi_dmul>
 800e7e4:	2200      	movs	r2, #0
 800e7e6:	4b19      	ldr	r3, [pc, #100]	; (800e84c <Calculate_Lab+0x254>)
 800e7e8:	f7f1 fd60 	bl	80002ac <__adddf3>
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	4b16      	ldr	r3, [pc, #88]	; (800e848 <Calculate_Lab+0x250>)
 800e7f0:	f7f2 f838 	bl	8000864 <__aeabi_ddiv>
 800e7f4:	4604      	mov	r4, r0
 800e7f6:	460d      	mov	r5, r1
 800e7f8:	e77e      	b.n	800e6f8 <Calculate_Lab+0x100>
		fz = (903.3*factor_z + 16.) / 116.;
 800e7fa:	a30d      	add	r3, pc, #52	; (adr r3, 800e830 <Calculate_Lab+0x238>)
 800e7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e800:	4630      	mov	r0, r6
 800e802:	4639      	mov	r1, r7
 800e804:	f7f1 ff04 	bl	8000610 <__aeabi_dmul>
 800e808:	2200      	movs	r2, #0
 800e80a:	4b10      	ldr	r3, [pc, #64]	; (800e84c <Calculate_Lab+0x254>)
 800e80c:	f7f1 fd4e 	bl	80002ac <__adddf3>
 800e810:	2200      	movs	r2, #0
 800e812:	4b0d      	ldr	r3, [pc, #52]	; (800e848 <Calculate_Lab+0x250>)
 800e814:	f7f2 f826 	bl	8000864 <__aeabi_ddiv>
 800e818:	4606      	mov	r6, r0
 800e81a:	460f      	mov	r7, r1
 800e81c:	e77d      	b.n	800e71a <Calculate_Lab+0x122>
 800e81e:	bf00      	nop
 800e820:	98de88b7 	.word	0x98de88b7
 800e824:	3f822354 	.word	0x3f822354
 800e828:	55555555 	.word	0x55555555
 800e82c:	3fd55555 	.word	0x3fd55555
 800e830:	66666666 	.word	0x66666666
 800e834:	408c3a66 	.word	0x408c3a66
 800e838:	080244b2 	.word	0x080244b2
 800e83c:	40590000 	.word	0x40590000
 800e840:	080244ca 	.word	0x080244ca
 800e844:	42c80000 	.word	0x42c80000
 800e848:	405d0000 	.word	0x405d0000
 800e84c:	40300000 	.word	0x40300000
 800e850:	407f4000 	.word	0x407f4000
 800e854:	40690000 	.word	0x40690000
 800e858:	080244be 	.word	0x080244be
 800e85c:	080244d6 	.word	0x080244d6
 800e860:	2008a7b8 	.word	0x2008a7b8

0800e864 <Calculate_Lambda_Dominant>:
void Calculate_Lambda_Dominant(float R_data[], uint8_t CIE_Type)
{	
	float Px, Py, x1 = 0.3333, y1 = 0.3333, x2, y2, divider;
	int8_t triangle_p1, triangle_p2, triangle_p3, triangle_out, ld;
	
	x2 = colorimetry_xy1931[0];
 800e864:	4b75      	ldr	r3, [pc, #468]	; (800ea3c <Calculate_Lambda_Dominant+0x1d8>)
	y2 = colorimetry_xy1931[1];
	
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e866:	eddf 7a76 	vldr	s15, [pc, #472]	; 800ea40 <Calculate_Lambda_Dominant+0x1dc>
	y2 = colorimetry_xy1931[1];
 800e86a:	ed93 6a01 	vldr	s12, [r3, #4]
	x2 = colorimetry_xy1931[0];
 800e86e:	edd3 5a00 	vldr	s11, [r3]
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e872:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800ea44 <Calculate_Lambda_Dominant+0x1e0>
 800e876:	eddf 6a74 	vldr	s13, [pc, #464]	; 800ea48 <Calculate_Lambda_Dominant+0x1e4>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e87a:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800ea4c <Calculate_Lambda_Dominant+0x1e8>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e87e:	ee77 1ac6 	vsub.f32	s3, s15, s12
 800e882:	ee37 2ae5 	vsub.f32	s4, s15, s11
 800e886:	ee27 7a61 	vnmul.f32	s14, s14, s3
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e88a:	ee35 5a65 	vsub.f32	s10, s10, s11
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e88e:	eea2 7a26 	vfma.f32	s14, s4, s13
{	
 800e892:	b5f0      	push	{r4, r5, r6, r7, lr}
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e894:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ea50 <Calculate_Lambda_Dominant+0x1ec>
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e898:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e89c:	ee36 7ac6 	vsub.f32	s14, s13, s12
 800e8a0:	eddf 6a6c 	vldr	s13, [pc, #432]	; 800ea54 <Calculate_Lambda_Dominant+0x1f0>
 800e8a4:	ee66 6ac7 	vnmul.f32	s13, s13, s14
 800e8a8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800ea58 <Calculate_Lambda_Dominant+0x1f4>
 800e8ac:	eee5 6a07 	vfma.f32	s13, s10, s14
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e8b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e8b4:	ed9f 5a69 	vldr	s10, [pc, #420]	; 800ea5c <Calculate_Lambda_Dominant+0x1f8>
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e8b8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e8bc:	ee77 6a46 	vsub.f32	s13, s14, s12
 800e8c0:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800ea60 <Calculate_Lambda_Dominant+0x1fc>
 800e8c4:	ee35 5a65 	vsub.f32	s10, s10, s11
 800e8c8:	ee27 7a66 	vnmul.f32	s14, s14, s13
 800e8cc:	eddf 6a65 	vldr	s13, [pc, #404]	; 800ea64 <Calculate_Lambda_Dominant+0x200>
 800e8d0:	eea5 7a26 	vfma.f32	s14, s10, s13
	triangle_p1 = (((x1-x2)*(y34_dominant[0]-y1) - (x34_dominant[0] - y1)*(y1 - y2)) > 0)? 1 : -1;
 800e8d4:	bfcc      	ite	gt
 800e8d6:	2101      	movgt	r1, #1
 800e8d8:	f04f 31ff 	movle.w	r1, #4294967295
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e8e0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
	triangle_p2 = (((x34_dominant[0] - x2)*(y34_dominant[64]-y34_dominant[0]) - (x34_dominant[64]-x34_dominant[0])*(y34_dominant[0]-y2)) > 0)? 1 : -1;
 800e8e4:	bfcc      	ite	gt
 800e8e6:	2201      	movgt	r2, #1
 800e8e8:	f04f 32ff 	movle.w	r2, #4294967295
	triangle_p3 = (((x34_dominant[64] - x2)*(y1 - y34_dominant[64]) - (x1 - x34_dominant[64])*(y34_dominant[64] - y2)) > 0)? 1 : -1;
 800e8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8f0:	bfcc      	ite	gt
 800e8f2:	2301      	movgt	r3, #1
 800e8f4:	f04f 33ff 	movle.w	r3, #4294967295
		
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800e8f8:	4291      	cmp	r1, r2
 800e8fa:	f040 8093 	bne.w	800ea24 <Calculate_Lambda_Dominant+0x1c0>
 800e8fe:	4299      	cmp	r1, r3
 800e900:	bf14      	ite	ne
 800e902:	2101      	movne	r1, #1
 800e904:	f04f 31ff 	moveq.w	r1, #4294967295
	
	for(uint8_t i = 0; i < 65; i++)
	{
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e908:	ee67 3ae5 	vnmul.f32	s7, s15, s11
 800e90c:	4856      	ldr	r0, [pc, #344]	; (800ea68 <Calculate_Lambda_Dominant+0x204>)
 800e90e:	4a57      	ldr	r2, [pc, #348]	; (800ea6c <Calculate_Lambda_Dominant+0x208>)
 800e910:	8804      	ldrh	r4, [r0, #0]
 800e912:	4e57      	ldr	r6, [pc, #348]	; (800ea70 <Calculate_Lambda_Dominant+0x20c>)
 800e914:	4d57      	ldr	r5, [pc, #348]	; (800ea74 <Calculate_Lambda_Dominant+0x210>)
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
		
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
		{
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800e916:	eddf 0a4a 	vldr	s1, [pc, #296]	; 800ea40 <Calculate_Lambda_Dominant+0x1dc>
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e91a:	eee6 3a27 	vfma.f32	s7, s12, s15
 800e91e:	f102 0782 	add.w	r7, r2, #130	; 0x82
 800e922:	2300      	movs	r3, #0
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e924:	eeb1 0a61 	vneg.f32	s0, s3
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e928:	ed95 6a00 	vldr	s12, [r5]
 800e92c:	edd6 6a00 	vldr	s13, [r6]
 800e930:	ed95 4a01 	vldr	s8, [r5, #4]
 800e934:	ed96 5a01 	vldr	s10, [r6, #4]
 800e938:	3504      	adds	r5, #4
 800e93a:	3604      	adds	r6, #4
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e93c:	ee64 2a66 	vnmul.f32	s5, s8, s13
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e940:	ee36 7a44 	vsub.f32	s14, s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e944:	eee5 2a06 	vfma.f32	s5, s10, s12
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e948:	ee27 3a61 	vnmul.f32	s6, s14, s3
 800e94c:	ee76 4ac5 	vsub.f32	s9, s13, s10
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e950:	ee22 1ac2 	vnmul.f32	s2, s5, s4
		divider = (x1-x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i] - x34_dominant[i+1]);
 800e954:	eea2 3a24 	vfma.f32	s6, s4, s9
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e958:	eea7 1a23 	vfma.f32	s2, s14, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e95c:	eeb4 6ac4 	vcmpe.f32	s12, s8
		Px = ((x1*y2 - y1*x2)*(x34_dominant[i] - x34_dominant[i+1]) - (x1 - x2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e960:	ee81 7a03 	vdiv.f32	s14, s2, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e968:	bf54      	ite	pl
 800e96a:	eeb0 1a44 	vmovpl.f32	s2, s8
 800e96e:	eeb0 1a46 	vmovmi.f32	s2, s12
 800e972:	eeb4 1ac7 	vcmpe.f32	s2, s14
 800e976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e97a:	d54d      	bpl.n	800ea18 <Calculate_Lambda_Dominant+0x1b4>
 800e97c:	eeb4 6ac4 	vcmpe.f32	s12, s8
 800e980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e984:	bfd8      	it	le
 800e986:	eeb0 6a44 	vmovle.f32	s12, s8
 800e98a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800e98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e992:	dd41      	ble.n	800ea18 <Calculate_Lambda_Dominant+0x1b4>
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e994:	ee64 4aa3 	vmul.f32	s9, s9, s7
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e998:	eef4 6ac5 	vcmpe.f32	s13, s10
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e99c:	eee0 4a22 	vfma.f32	s9, s0, s5
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		Py = ((x1*y2 - y1*x2)*(y34_dominant[i] - y34_dominant[i+1]) - (y1 - y2)*(x34_dominant[i]*y34_dominant[i+1] - y34_dominant[i]*x34_dominant[i+1]))/divider;
 800e9a4:	ee84 6a83 	vdiv.f32	s12, s9, s6
		if(Px > MIN(x34_dominant[i], x34_dominant[i+1]) && Px < MAX(x34_dominant[i], x34_dominant[i+1]) && Py > MIN(y34_dominant[i], y34_dominant[i+1]) && Py < MAX(y34_dominant[i], y34_dominant[i+1]))
 800e9a8:	bf54      	ite	pl
 800e9aa:	eeb0 4a45 	vmovpl.f32	s8, s10
 800e9ae:	eeb0 4a66 	vmovmi.f32	s8, s13
 800e9b2:	eeb4 4ac6 	vcmpe.f32	s8, s12
 800e9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ba:	d52d      	bpl.n	800ea18 <Calculate_Lambda_Dominant+0x1b4>
 800e9bc:	eef4 6ac5 	vcmpe.f32	s13, s10
 800e9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9c4:	bfd8      	it	le
 800e9c6:	eef0 6a45 	vmovle.f32	s13, s10
 800e9ca:	eef4 6ac6 	vcmpe.f32	s13, s12
 800e9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9d2:	dd21      	ble.n	800ea18 <Calculate_Lambda_Dominant+0x1b4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800e9d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9dc:	bf54      	ite	pl
 800e9de:	eef0 6a60 	vmovpl.f32	s13, s1
 800e9e2:	eef0 6a47 	vmovmi.f32	s13, s14
 800e9e6:	eef4 6ae5 	vcmpe.f32	s13, s11
 800e9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ee:	d51b      	bpl.n	800ea28 <Calculate_Lambda_Dominant+0x1c4>
 800e9f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9f8:	bfd8      	it	le
 800e9fa:	eeb0 7a60 	vmovle.f32	s14, s1
 800e9fe:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800ea02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea06:	bfcc      	ite	gt
 800ea08:	2301      	movgt	r3, #1
 800ea0a:	f04f 33ff 	movle.w	r3, #4294967295
			
			if((ld*triangle_out) > 0)
 800ea0e:	fb13 f301 	smulbb	r3, r3, r1
 800ea12:	2b01      	cmp	r3, #1
 800ea14:	d10b      	bne.n	800ea2e <Calculate_Lambda_Dominant+0x1ca>
			{
				lambda_d_Measure = lamda_dominant[i+1];
 800ea16:	8814      	ldrh	r4, [r2, #0]
 800ea18:	3202      	adds	r2, #2
	for(uint8_t i = 0; i < 65; i++)
 800ea1a:	4297      	cmp	r7, r2
 800ea1c:	d184      	bne.n	800e928 <Calculate_Lambda_Dominant+0xc4>
 800ea1e:	b103      	cbz	r3, 800ea22 <Calculate_Lambda_Dominant+0x1be>
 800ea20:	8004      	strh	r4, [r0, #0]
 800ea22:	bdf0      	pop	{r4, r5, r6, r7, pc}
	triangle_out = (triangle_p1 == triangle_p2 && triangle_p2 == triangle_p3) ? -1 : 1;
 800ea24:	2101      	movs	r1, #1
 800ea26:	e76f      	b.n	800e908 <Calculate_Lambda_Dominant+0xa4>
			ld = (x2 > MIN(Px, x1) && x2 < MAX(Px, x1))? 1:-1;
 800ea28:	f04f 33ff 	mov.w	r3, #4294967295
 800ea2c:	e7ef      	b.n	800ea0e <Calculate_Lambda_Dominant+0x1aa>
			} else {
				lambda_d_Measure = triangle_out < 0 ? 0 : lamda_dominant[i+1];
 800ea2e:	1c4b      	adds	r3, r1, #1
 800ea30:	bf14      	ite	ne
 800ea32:	8814      	ldrhne	r4, [r2, #0]
 800ea34:	2400      	moveq	r4, #0
 800ea36:	2301      	movs	r3, #1
 800ea38:	e7ee      	b.n	800ea18 <Calculate_Lambda_Dominant+0x1b4>
 800ea3a:	bf00      	nop
 800ea3c:	2008a7dc 	.word	0x2008a7dc
 800ea40:	3eaaa64c 	.word	0x3eaaa64c
 800ea44:	be1fd4b2 	.word	0xbe1fd4b2
 800ea48:	beaaa64c 	.word	0xbeaaa64c
 800ea4c:	3e3577e6 	.word	0x3e3577e6
 800ea50:	00000000 	.word	0x00000000
 800ea54:	3f0eeab2 	.word	0x3f0eeab2
 800ea58:	3e876ea8 	.word	0x3e876ea8
 800ea5c:	3f3c48ac 	.word	0x3f3c48ac
 800ea60:	becdeb0c 	.word	0xbecdeb0c
 800ea64:	3d8cde90 	.word	0x3d8cde90
 800ea68:	20090db4 	.word	0x20090db4
 800ea6c:	080244e4 	.word	0x080244e4
 800ea70:	080247e4 	.word	0x080247e4
 800ea74:	080246dc 	.word	0x080246dc

0800ea78 <Calculate_deltaEab>:

extern int16_t colorimetry_LAB_mem[3];
float result, res1, res2, res3;

int16_t Calculate_deltaEab() {
	if((Measure_Field&CIE_Lab) == 0){
 800ea78:	4b2c      	ldr	r3, [pc, #176]	; (800eb2c <Calculate_deltaEab+0xb4>)
 800ea7a:	881b      	ldrh	r3, [r3, #0]
 800ea7c:	061b      	lsls	r3, r3, #24
int16_t Calculate_deltaEab() {
 800ea7e:	b507      	push	{r0, r1, r2, lr}
	if((Measure_Field&CIE_Lab) == 0){
 800ea80:	d40a      	bmi.n	800ea98 <Calculate_deltaEab+0x20>
		Calculate_Lab(Measure_Color_xy == 0x00 ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 800ea82:	4b2b      	ldr	r3, [pc, #172]	; (800eb30 <Calculate_deltaEab+0xb8>)
 800ea84:	482b      	ldr	r0, [pc, #172]	; (800eb34 <Calculate_deltaEab+0xbc>)
 800ea86:	7819      	ldrb	r1, [r3, #0]
 800ea88:	4b2b      	ldr	r3, [pc, #172]	; (800eb38 <Calculate_deltaEab+0xc0>)
 800ea8a:	781a      	ldrb	r2, [r3, #0]
 800ea8c:	4b2b      	ldr	r3, [pc, #172]	; (800eb3c <Calculate_deltaEab+0xc4>)
 800ea8e:	2900      	cmp	r1, #0
 800ea90:	bf18      	it	ne
 800ea92:	4618      	movne	r0, r3
 800ea94:	f7ff fdb0 	bl	800e5f8 <Calculate_Lab>
	}
	res1 = ((float)(colorimetry_LAB[0]) - (float)(colorimetry_LAB_mem[0]));
 800ea98:	4a29      	ldr	r2, [pc, #164]	; (800eb40 <Calculate_deltaEab+0xc8>)
 800ea9a:	f9b2 3000 	ldrsh.w	r3, [r2]
 800ea9e:	ee06 3a90 	vmov	s13, r3
 800eaa2:	4b28      	ldr	r3, [pc, #160]	; (800eb44 <Calculate_deltaEab+0xcc>)
 800eaa4:	f9b3 1000 	ldrsh.w	r1, [r3]
 800eaa8:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 800eaac:	ee06 1a90 	vmov	s13, r1
 800eab0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800eab4:	4924      	ldr	r1, [pc, #144]	; (800eb48 <Calculate_deltaEab+0xd0>)
 800eab6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800eaba:	edc1 6a00 	vstr	s13, [r1]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800eabe:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eac2:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800eac6:	ee00 1a10 	vmov	s0, r1
 800eaca:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eace:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800ead2:	eef8 7ac0 	vcvt.f32.s32	s15, s0
 800ead6:	ee00 1a10 	vmov	s0, r1
 800eada:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800eade:	491b      	ldr	r1, [pc, #108]	; (800eb4c <Calculate_deltaEab+0xd4>)
 800eae0:	ee37 0ac0 	vsub.f32	s0, s15, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eae4:	ee07 2a90 	vmov	s15, r2
 800eae8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eaec:	ee07 3a90 	vmov	s15, r3
	res2 = ((float)(colorimetry_LAB[1]) - (float)(colorimetry_LAB_mem[1]));
 800eaf0:	ed81 0a00 	vstr	s0, [r1]
	Calculate_deltaEab_Done = 0x01;
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800eaf4:	ee20 0a00 	vmul.f32	s0, s0, s0
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eaf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800eafc:	eea6 0aa6 	vfma.f32	s0, s13, s13
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eb00:	4b13      	ldr	r3, [pc, #76]	; (800eb50 <Calculate_deltaEab+0xd8>)
 800eb02:	ee77 7a67 	vsub.f32	s15, s14, s15
	Calculate_deltaEab_Done = 0x01;
 800eb06:	2201      	movs	r2, #1
	res3 = ((float)(colorimetry_LAB[2]) - (float)(colorimetry_LAB_mem[2]));
 800eb08:	edc3 7a00 	vstr	s15, [r3]
	Calculate_deltaEab_Done = 0x01;
 800eb0c:	4b11      	ldr	r3, [pc, #68]	; (800eb54 <Calculate_deltaEab+0xdc>)
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800eb0e:	eea7 0aa7 	vfma.f32	s0, s15, s15
	Calculate_deltaEab_Done = 0x01;
 800eb12:	701a      	strb	r2, [r3, #0]
	return (int16_t)sqrtf(res1*res1+res2*res2+res3*res3);
 800eb14:	f014 f972 	bl	8022dfc <sqrtf>
 800eb18:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800eb1c:	edcd 7a01 	vstr	s15, [sp, #4]
 800eb20:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 800eb24:	b003      	add	sp, #12
 800eb26:	f85d fb04 	ldr.w	pc, [sp], #4
 800eb2a:	bf00      	nop
 800eb2c:	20004c76 	.word	0x20004c76
 800eb30:	20004c74 	.word	0x20004c74
 800eb34:	2008a7c4 	.word	0x2008a7c4
 800eb38:	2008bce9 	.word	0x2008bce9
 800eb3c:	2008a7be 	.word	0x2008a7be
 800eb40:	2008a7b8 	.word	0x2008a7b8
 800eb44:	2008c278 	.word	0x2008c278
 800eb48:	2008bcc8 	.word	0x2008bcc8
 800eb4c:	2008bcc0 	.word	0x2008bcc0
 800eb50:	2008bcd8 	.word	0x2008bcd8
 800eb54:	20004c11 	.word	0x20004c11

0800eb58 <Calibration_Load_2byte>:
extern float Unit_nm[7], Spectral_Corection_Buff[1024], Scattering_Light, Exposure_Factor;
extern float Spectral_day[1024], Spectral_night[1024], Spectral_B[1024], Spectral_R[1024];
	
uint16_t buff2_array[4] = {0};
uint16_t Calibration_Load_2byte(uint32_t Address, uint8_t num)
{
 800eb58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint64_t buff = 0;

	uint16_t byte_array[4] = {0};
	uint8_t i = 0;
	
	i = num > 3 ? (num - 4*(num/4)) : num;
 800eb5a:	2903      	cmp	r1, #3
{
 800eb5c:	460c      	mov	r4, r1
 800eb5e:	bf88      	it	hi
 800eb60:	f001 0403 	andhi.w	r4, r1, #3
	buff = flash_data_read_buff(Address);
 800eb64:	f7fd f933 	bl	800bdce <flash_data_read_buff>
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800eb68:	aa04      	add	r2, sp, #16
 800eb6a:	e962 0104 	strd	r0, r1, [r2, #-16]!
 800eb6e:	ca03      	ldmia	r2!, {r0, r1}
 800eb70:	4b0a      	ldr	r3, [pc, #40]	; (800eb9c <Calibration_Load_2byte+0x44>)
 800eb72:	6018      	str	r0, [r3, #0]
	
	byte_array[0] = buff2_array[1];
 800eb74:	885a      	ldrh	r2, [r3, #2]
	memcpy(buff2_array, &buff, sizeof(uint64_t));
 800eb76:	6059      	str	r1, [r3, #4]
	byte_array[0] = buff2_array[1];
 800eb78:	f8ad 2008 	strh.w	r2, [sp, #8]
	byte_array[1] = buff2_array[0];
 800eb7c:	881a      	ldrh	r2, [r3, #0]
 800eb7e:	f8ad 200a 	strh.w	r2, [sp, #10]
	byte_array[2] = buff2_array[3];
 800eb82:	88da      	ldrh	r2, [r3, #6]
	byte_array[3] = buff2_array[2];
 800eb84:	889b      	ldrh	r3, [r3, #4]
 800eb86:	f8ad 300e 	strh.w	r3, [sp, #14]
	
	return byte_array[i];
 800eb8a:	ab04      	add	r3, sp, #16
 800eb8c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
	byte_array[2] = buff2_array[3];
 800eb90:	f8ad 200c 	strh.w	r2, [sp, #12]
}
 800eb94:	f834 0c08 	ldrh.w	r0, [r4, #-8]
 800eb98:	b004      	add	sp, #16
 800eb9a:	bd10      	pop	{r4, pc}
 800eb9c:	20004c50 	.word	0x20004c50

0800eba0 <Calibration_Load_1byte>:
	

	uint8_t byte1[8] = {0};
uint8_t Calibration_Load_1byte(uint32_t Address, uint8_t num)
{
 800eba0:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint64_t buff = 0;
	uint8_t buff_array[8] = {0};

	uint8_t i = 0;
	
	i = num > 7 ? (num - 8) : num;
 800eba2:	2907      	cmp	r1, #7
{
 800eba4:	b085      	sub	sp, #20
 800eba6:	460c      	mov	r4, r1
	i = num > 7 ? (num - 8) : num;
 800eba8:	bf84      	itt	hi
 800ebaa:	f1a1 0408 	subhi.w	r4, r1, #8
 800ebae:	b2e4      	uxtbhi	r4, r4
	buff = flash_data_read_buff(Address);
 800ebb0:	f7fd f90d 	bl	800bdce <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ebb4:	e9cd 0100 	strd	r0, r1, [sp]
 800ebb8:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800ebbc:	ab04      	add	r3, sp, #16
 800ebbe:	e903 0003 	stmdb	r3, {r0, r1}
	
	byte1[0] =  buff_array[3];
 800ebc2:	4b0f      	ldr	r3, [pc, #60]	; (800ec00 <Calibration_Load_1byte+0x60>)
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ebc4:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800ebc8:	f89d 6008 	ldrb.w	r6, [sp, #8]
 800ebcc:	f89d 7009 	ldrb.w	r7, [sp, #9]
 800ebd0:	f89d e00a 	ldrb.w	lr, [sp, #10]
 800ebd4:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800ebd8:	f89d 100d 	ldrb.w	r1, [sp, #13]
 800ebdc:	f89d 500f 	ldrb.w	r5, [sp, #15]
	byte1[0] =  buff_array[3];
 800ebe0:	f89d c00b 	ldrb.w	ip, [sp, #11]
 800ebe4:	f883 c000 	strb.w	ip, [r3]
	byte1[1] =  buff_array[2];
 800ebe8:	f883 e001 	strb.w	lr, [r3, #1]
	byte1[2] =  buff_array[1];
 800ebec:	709f      	strb	r7, [r3, #2]
	byte1[3] =  buff_array[0];
 800ebee:	70de      	strb	r6, [r3, #3]
	byte1[4] =  buff_array[7];
 800ebf0:	711d      	strb	r5, [r3, #4]
	byte1[5] =  buff_array[6];
 800ebf2:	7158      	strb	r0, [r3, #5]
	byte1[6] =  buff_array[5];
 800ebf4:	7199      	strb	r1, [r3, #6]
	byte1[7] =  buff_array[4];
 800ebf6:	71da      	strb	r2, [r3, #7]
	
	return byte1[i];
}
 800ebf8:	5d18      	ldrb	r0, [r3, r4]
 800ebfa:	b005      	add	sp, #20
 800ebfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	20004c64 	.word	0x20004c64

0800ec04 <Calibration_Load_float>:


	
float Calibration_Load_float(uint32_t Address)
{
 800ec04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buff_array[8] = {0};
	uint32_t buff_float = 0;
	float res = 0;
	uint64_t buff = 0;
	buff = flash_data_read_buff(Address);
 800ec06:	f7fd f8e2 	bl	800bdce <flash_data_read_buff>
	memcpy(buff_array, &buff, sizeof(uint64_t));
 800ec0a:	e9cd 0100 	strd	r0, r1, [sp]
 800ec0e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 800ec12:	ab04      	add	r3, sp, #16
 800ec14:	e903 0003 	stmdb	r3, {r0, r1}
	buff_float = (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
	memcpy(&res, &buff_float, sizeof(uint32_t));
	return res;
 800ec18:	9b02      	ldr	r3, [sp, #8]
 800ec1a:	ba1b      	rev	r3, r3
}
 800ec1c:	ee00 3a10 	vmov	s0, r3
 800ec20:	b005      	add	sp, #20
 800ec22:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800ec28 <Calibration_Load_Pack>:
	uint8_t buff_array[8] = {0};
	uint64_t buff = 0;
	uint32_t buff_float = 0;
	
void Calibration_Load_Pack(uint32_t Address, uint16_t size, float data[])
{
 800ec28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t idx = 0;
	
	for (uint16_t i = 0; i < (4*size); i+=8){
		addr = Address + i;
 800ec2c:	f8df a078 	ldr.w	sl, [pc, #120]	; 800eca8 <Calibration_Load_Pack+0x80>
		buff = flash_data_read_buff(Address+i);
 800ec30:	f8df b06c 	ldr.w	fp, [pc, #108]	; 800eca0 <Calibration_Load_Pack+0x78>
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800ec34:	4c19      	ldr	r4, [pc, #100]	; (800ec9c <Calibration_Load_Pack+0x74>)
{
 800ec36:	4681      	mov	r9, r0
 800ec38:	4617      	mov	r7, r2
	for (uint16_t i = 0; i < (4*size); i+=8){
 800ec3a:	ea4f 0881 	mov.w	r8, r1, lsl #2
	uint16_t idx = 0;
 800ec3e:	2500      	movs	r5, #0
 800ec40:	00ae      	lsls	r6, r5, #2
 800ec42:	b2b0      	uxth	r0, r6
	for (uint16_t i = 0; i < (4*size); i+=8){
 800ec44:	4540      	cmp	r0, r8
 800ec46:	db01      	blt.n	800ec4c <Calibration_Load_Pack+0x24>
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
		idx+=2;
	}
}
 800ec48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		addr = Address + i;
 800ec4c:	4448      	add	r0, r9
 800ec4e:	f8ca 0000 	str.w	r0, [sl]
		buff = flash_data_read_buff(Address+i);
 800ec52:	f7fd f8bc 	bl	800bdce <flash_data_read_buff>
 800ec56:	e9cb 0100 	strd	r0, r1, [fp]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800ec5a:	4b11      	ldr	r3, [pc, #68]	; (800eca0 <Calibration_Load_Pack+0x78>)
 800ec5c:	cb03      	ldmia	r3!, {r0, r1}
 800ec5e:	6020      	str	r0, [r4, #0]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800ec60:	7863      	ldrb	r3, [r4, #1]
 800ec62:	7822      	ldrb	r2, [r4, #0]
		memcpy(buff_array, &buff, sizeof(uint64_t));
 800ec64:	6061      	str	r1, [r4, #4]
		buff_float	= (uint32_t)buff_array[0]<<24 | (uint32_t)buff_array[1] << 16 | (uint32_t)buff_array[2] << 8 | (uint32_t)buff_array[3];
 800ec66:	041b      	lsls	r3, r3, #16
 800ec68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ec6c:	78e2      	ldrb	r2, [r4, #3]
 800ec6e:	4313      	orrs	r3, r2
 800ec70:	78a2      	ldrb	r2, [r4, #2]
 800ec72:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		memcpy(&data[idx]	, &buff_float, sizeof(uint32_t));
 800ec76:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800ec7a:	7963      	ldrb	r3, [r4, #5]
 800ec7c:	7922      	ldrb	r2, [r4, #4]
 800ec7e:	041b      	lsls	r3, r3, #16
 800ec80:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ec84:	79e2      	ldrb	r2, [r4, #7]
 800ec86:	4313      	orrs	r3, r2
 800ec88:	79a2      	ldrb	r2, [r4, #6]
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800ec8a:	443e      	add	r6, r7
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800ec8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ec90:	4a04      	ldr	r2, [pc, #16]	; (800eca4 <Calibration_Load_Pack+0x7c>)
		idx+=2;
 800ec92:	3502      	adds	r5, #2
		buff_float	= (uint32_t)buff_array[4]<<24 | (uint32_t)buff_array[5] << 16 | (uint32_t)buff_array[6] << 8 | (uint32_t)buff_array[7];
 800ec94:	6013      	str	r3, [r2, #0]
		idx+=2;
 800ec96:	b2ad      	uxth	r5, r5
		memcpy(&data[idx+1]	, &buff_float, sizeof(uint32_t));
 800ec98:	6073      	str	r3, [r6, #4]
 800ec9a:	e7d1      	b.n	800ec40 <Calibration_Load_Pack+0x18>
 800ec9c:	20004c58 	.word	0x20004c58
 800eca0:	20004c48 	.word	0x20004c48
 800eca4:	20004c60 	.word	0x20004c60
 800eca8:	2008bce0 	.word	0x2008bce0

0800ecac <Calibration_Exposure_Change>:


void Calibration_Exposure_Change(uint8_t Exp)
{
 800ecac:	b538      	push	{r3, r4, r5, lr}
 800ecae:	4605      	mov	r5, r0
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800ecb0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 800ecb4:	f100 6001 	add.w	r0, r0, #135266304	; 0x8100000
 800ecb8:	4629      	mov	r1, r5
 800ecba:	f600 0028 	addw	r0, r0, #2088	; 0x828
 800ecbe:	f7ff ff6f 	bl	800eba0 <Calibration_Load_1byte>
 800ecc2:	ee07 0a90 	vmov	s15, r0
 800ecc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ecca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ecce:	eec6 7a87 	vdiv.f32	s15, s13, s14
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ecd2:	08a8      	lsrs	r0, r5, #2
 800ecd4:	f100 2001 	add.w	r0, r0, #16777472	; 0x1000100
 800ecd8:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800ecdc:	4b0d      	ldr	r3, [pc, #52]	; (800ed14 <Calibration_Exposure_Change+0x68>)
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ecde:	00c4      	lsls	r4, r0, #3
 800ece0:	4629      	mov	r1, r5
 800ece2:	4620      	mov	r0, r4
	Scattering_Light = ((float)Calibration_Load_1byte((SCATTERING_LIGHT_7_812+8*(Exp/8)), Exp)) /10.0;
 800ece4:	edc3 7a00 	vstr	s15, [r3]
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ece8:	f7ff ff36 	bl	800eb58 <Calibration_Load_2byte>
 800ecec:	4b0a      	ldr	r3, [pc, #40]	; (800ed18 <Calibration_Exposure_Change+0x6c>)
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800ecee:	4629      	mov	r1, r5
	DarkSignal = Calibration_Load_2byte(DARK_SIGNAL_7_812+8*(Exp/4), Exp);
 800ecf0:	8018      	strh	r0, [r3, #0]
	Exposure_Factor = ((float)Calibration_Load_2byte(EXPOSURE_FACTOR_7_812+8*(Exp/4), Exp))/100.0;
 800ecf2:	f104 0014 	add.w	r0, r4, #20
 800ecf6:	f7ff ff2f 	bl	800eb58 <Calibration_Load_2byte>
 800ecfa:	ee07 0a90 	vmov	s15, r0
 800ecfe:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800ed1c <Calibration_Exposure_Change+0x70>
 800ed02:	4b07      	ldr	r3, [pc, #28]	; (800ed20 <Calibration_Exposure_Change+0x74>)
 800ed04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ed08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ed0c:	edc3 7a00 	vstr	s15, [r3]
 800ed10:	bd38      	pop	{r3, r4, r5, pc}
 800ed12:	bf00      	nop
 800ed14:	2004cbdc 	.word	0x2004cbdc
 800ed18:	20004fc2 	.word	0x20004fc2
 800ed1c:	42c80000 	.word	0x42c80000
 800ed20:	20004fcc 	.word	0x20004fcc
 800ed24:	00000000 	.word	0x00000000

0800ed28 <Calibration_WaveLenght_Graph>:
}

void Calibration_WaveLenght_Graph()
{
 800ed28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i = 0; i <= 7; i++){
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ed2c:	a717      	add	r7, pc, #92	; (adr r7, 800ed8c <Calibration_WaveLenght_Graph+0x64>)
 800ed2e:	e9d7 6700 	ldrd	r6, r7, [r7]
 800ed32:	f8df a060 	ldr.w	sl, [pc, #96]	; 800ed94 <Calibration_WaveLenght_Graph+0x6c>
 800ed36:	4d14      	ldr	r5, [pc, #80]	; (800ed88 <Calibration_WaveLenght_Graph+0x60>)
 800ed38:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800ed98 <Calibration_WaveLenght_Graph+0x70>
	for (uint8_t i = 0; i <= 7; i++){
 800ed3c:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800ed9c <Calibration_WaveLenght_Graph+0x74>
{
 800ed40:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ed44:	f04f 0800 	mov.w	r8, #0
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800ed48:	2100      	movs	r1, #0
 800ed4a:	4620      	mov	r0, r4
 800ed4c:	f7ff ff04 	bl	800eb58 <Calibration_Load_2byte>
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ed50:	ee07 0a90 	vmov	s15, r0
 800ed54:	eef8 7a67 	vcvt.f32.u32	s15, s15
		WaveLenght_Graph[i] = Calibration_Load_2byte(WAVELENGHT+i*292, 0); //step*2
 800ed58:	f82a 0f02 	strh.w	r0, [sl, #2]!
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ed5c:	ee17 0a90 	vmov	r0, s15
 800ed60:	f7f1 fc02 	bl	8000568 <__aeabi_f2d>
 800ed64:	4642      	mov	r2, r8
 800ed66:	464b      	mov	r3, r9
 800ed68:	f7f1 fd7c 	bl	8000864 <__aeabi_ddiv>
 800ed6c:	4632      	mov	r2, r6
 800ed6e:	463b      	mov	r3, r7
 800ed70:	f7f1 fa9c 	bl	80002ac <__adddf3>
 800ed74:	f7f1 ff44 	bl	8000c00 <__aeabi_d2f>
 800ed78:	f504 7492 	add.w	r4, r4, #292	; 0x124
	for (uint8_t i = 0; i <= 7; i++){
 800ed7c:	455c      	cmp	r4, fp
		Unit_nm[i] = ((float)WaveLenght_Graph[i])/100.0+300.0;
 800ed7e:	f845 0b04 	str.w	r0, [r5], #4
	for (uint8_t i = 0; i <= 7; i++){
 800ed82:	d1e1      	bne.n	800ed48 <Calibration_WaveLenght_Graph+0x20>
	}
}
 800ed84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed88:	20004fa0 	.word	0x20004fa0
 800ed8c:	00000000 	.word	0x00000000
 800ed90:	4072c000 	.word	0x4072c000
 800ed94:	20050be2 	.word	0x20050be2
 800ed98:	40590000 	.word	0x40590000
 800ed9c:	08100920 	.word	0x08100920

0800eda0 <GUI_OptionMenuRu>:
uint8_t screen_count = 0, screen_count_old = 0, state_Measure_Elements = 0;
sImage Locus;
extern volatile uint8_t TFT_direction;

void GUI_OptionMenuRu()
{	
 800eda0:	b513      	push	{r0, r1, r4, lr}
	GUI_TextRu_Language(10, 86);
 800eda2:	2156      	movs	r1, #86	; 0x56
 800eda4:	200a      	movs	r0, #10
 800eda6:	f00b fb45 	bl	801a434 <GUI_TextRu_Language>
	GUI_TextRu_Russian(118, 86);
 800edaa:	2156      	movs	r1, #86	; 0x56
 800edac:	2076      	movs	r0, #118	; 0x76
 800edae:	f00b fb73 	bl	801a498 <GUI_TextRu_Russian>
	GUI_Flag_Ru(218, 86);
 800edb2:	2156      	movs	r1, #86	; 0x56
 800edb4:	20da      	movs	r0, #218	; 0xda
 800edb6:	f006 fb4e 	bl	8015456 <GUI_Flag_Ru>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800edba:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800edbe:	2378      	movs	r3, #120	; 0x78
 800edc0:	4619      	mov	r1, r3
 800edc2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800edc6:	9400      	str	r4, [sp, #0]
 800edc8:	200a      	movs	r0, #10
 800edca:	f00f fa41 	bl	801e250 <TFT_DrawLine>
	GUI_TextRu_Info(10, 145);
 800edce:	2191      	movs	r1, #145	; 0x91
 800edd0:	200a      	movs	r0, #10
 800edd2:	f00b fba9 	bl	801a528 <GUI_TextRu_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800edd6:	23b7      	movs	r3, #183	; 0xb7
 800edd8:	4619      	mov	r1, r3
 800edda:	f44f 7283 	mov.w	r2, #262	; 0x106
 800edde:	9400      	str	r4, [sp, #0]
 800ede0:	200a      	movs	r0, #10
 800ede2:	f00f fa35 	bl	801e250 <TFT_DrawLine>
	
	GUI_TextRu_Mode(10, 209);
 800ede6:	21d1      	movs	r1, #209	; 0xd1
 800ede8:	200a      	movs	r0, #10
 800edea:	f00b fc3f 	bl	801a66c <GUI_TextRu_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800edee:	4b21      	ldr	r3, [pc, #132]	; (800ee74 <GUI_OptionMenuRu+0xd4>)
 800edf0:	21ca      	movs	r1, #202	; 0xca
 800edf2:	781a      	ldrb	r2, [r3, #0]
 800edf4:	20b6      	movs	r0, #182	; 0xb6
 800edf6:	f006 faf5 	bl	80153e4 <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800edfa:	4620      	mov	r0, r4
 800edfc:	f00f fcb4 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800ee00:	2063      	movs	r0, #99	; 0x63
 800ee02:	f00f fcb7 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800ee06:	481c      	ldr	r0, [pc, #112]	; (800ee78 <GUI_OptionMenuRu+0xd8>)
 800ee08:	f00f fca8 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800ee0c:	2245      	movs	r2, #69	; 0x45
 800ee0e:	21d2      	movs	r1, #210	; 0xd2
 800ee10:	20e1      	movs	r0, #225	; 0xe1
 800ee12:	f00f fd6d 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800ee16:	224c      	movs	r2, #76	; 0x4c
 800ee18:	21d2      	movs	r1, #210	; 0xd2
 800ee1a:	209b      	movs	r0, #155	; 0x9b
 800ee1c:	f00f fd68 	bl	801e8f0 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800ee20:	23f8      	movs	r3, #248	; 0xf8
 800ee22:	4619      	mov	r1, r3
 800ee24:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ee28:	9400      	str	r4, [sp, #0]
 800ee2a:	200a      	movs	r0, #10
 800ee2c:	f00f fa10 	bl	801e250 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800ee30:	f240 1113 	movw	r1, #275	; 0x113
 800ee34:	200a      	movs	r0, #10
 800ee36:	f009 fdf5 	bl	8018a24 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800ee3a:	4b10      	ldr	r3, [pc, #64]	; (800ee7c <GUI_OptionMenuRu+0xdc>)
 800ee3c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800ee40:	781a      	ldrb	r2, [r3, #0]
 800ee42:	20b6      	movs	r0, #182	; 0xb6
 800ee44:	f006 fa74 	bl	8015330 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800ee48:	f240 1113 	movw	r1, #275	; 0x113
 800ee4c:	20de      	movs	r0, #222	; 0xde
 800ee4e:	f00a f929 	bl	80190a4 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800ee52:	f240 1113 	movw	r1, #275	; 0x113
 800ee56:	208c      	movs	r0, #140	; 0x8c
 800ee58:	f00a f948 	bl	80190ec <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800ee5c:	f240 1339 	movw	r3, #313	; 0x139
 800ee60:	9400      	str	r4, [sp, #0]
 800ee62:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ee66:	4619      	mov	r1, r3
 800ee68:	200a      	movs	r0, #10
 800ee6a:	f00f f9f1 	bl	801e250 <TFT_DrawLine>
}
 800ee6e:	b002      	add	sp, #8
 800ee70:	bd10      	pop	{r4, pc}
 800ee72:	bf00      	nop
 800ee74:	20000a48 	.word	0x20000a48
 800ee78:	200001b0 	.word	0x200001b0
 800ee7c:	2008bcea 	.word	0x2008bcea

0800ee80 <GUI_OptionMenuEn>:
void GUI_OptionMenuEn()
{
 800ee80:	b513      	push	{r0, r1, r4, lr}
	GUI_TextEn_Language(10, 88);
 800ee82:	2158      	movs	r1, #88	; 0x58
 800ee84:	200a      	movs	r0, #10
 800ee86:	f00a f9d1 	bl	801922c <GUI_TextEn_Language>
	GUI_TextEn_English(127, 88);
 800ee8a:	2158      	movs	r1, #88	; 0x58
 800ee8c:	207f      	movs	r0, #127	; 0x7f
 800ee8e:	f00a fa1b 	bl	80192c8 <GUI_TextEn_English>
	GUI_Flag_En(218, 86);
 800ee92:	2156      	movs	r1, #86	; 0x56
 800ee94:	20da      	movs	r0, #218	; 0xda
 800ee96:	f006 fb08 	bl	80154aa <GUI_Flag_En>
	TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800ee9a:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800ee9e:	2378      	movs	r3, #120	; 0x78
 800eea0:	4619      	mov	r1, r3
 800eea2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800eea6:	9400      	str	r4, [sp, #0]
 800eea8:	200a      	movs	r0, #10
 800eeaa:	f00f f9d1 	bl	801e250 <TFT_DrawLine>
	GUI_TextEn_Info(10, 147);
 800eeae:	2193      	movs	r1, #147	; 0x93
 800eeb0:	200a      	movs	r0, #10
 800eeb2:	f00a fa51 	bl	8019358 <GUI_TextEn_Info>
	TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800eeb6:	23b7      	movs	r3, #183	; 0xb7
 800eeb8:	4619      	mov	r1, r3
 800eeba:	f44f 7283 	mov.w	r2, #262	; 0x106
 800eebe:	9400      	str	r4, [sp, #0]
 800eec0:	200a      	movs	r0, #10
 800eec2:	f00f f9c5 	bl	801e250 <TFT_DrawLine>
	
	GUI_TextEn_Mode(10, 211);
 800eec6:	21d3      	movs	r1, #211	; 0xd3
 800eec8:	200a      	movs	r0, #10
 800eeca:	f00a fd93 	bl	80199f4 <GUI_TextEn_Mode>
	GUI_Switch_ButtonActive(182, 202, Mode_EL);
 800eece:	4b21      	ldr	r3, [pc, #132]	; (800ef54 <GUI_OptionMenuEn+0xd4>)
 800eed0:	21ca      	movs	r1, #202	; 0xca
 800eed2:	781a      	ldrb	r2, [r3, #0]
 800eed4:	20b6      	movs	r0, #182	; 0xb6
 800eed6:	f006 fa85 	bl	80153e4 <GUI_Switch_ButtonActive>
	TFT_SetTextColor(TFT_White);
 800eeda:	4620      	mov	r0, r4
 800eedc:	f00f fc44 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 800eee0:	2063      	movs	r0, #99	; 0x63
 800eee2:	f00f fc47 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 800eee6:	481c      	ldr	r0, [pc, #112]	; (800ef58 <GUI_OptionMenuEn+0xd8>)
 800eee8:	f00f fc38 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(225, 210, 'E' );
 800eeec:	2245      	movs	r2, #69	; 0x45
 800eeee:	21d2      	movs	r1, #210	; 0xd2
 800eef0:	20e1      	movs	r0, #225	; 0xe1
 800eef2:	f00f fcfd 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(155, 210, 'L');
 800eef6:	224c      	movs	r2, #76	; 0x4c
 800eef8:	21d2      	movs	r1, #210	; 0xd2
 800eefa:	209b      	movs	r0, #155	; 0x9b
 800eefc:	f00f fcf8 	bl	801e8f0 <TFT_DrawChar>
	
	TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800ef00:	23f8      	movs	r3, #248	; 0xf8
 800ef02:	4619      	mov	r1, r3
 800ef04:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ef08:	9400      	str	r4, [sp, #0]
 800ef0a:	200a      	movs	r0, #10
 800ef0c:	f00f f9a0 	bl	801e250 <TFT_DrawLine>
	
	GUI_Text_Bluetooth(10, 275);
 800ef10:	f240 1113 	movw	r1, #275	; 0x113
 800ef14:	200a      	movs	r0, #10
 800ef16:	f009 fd85 	bl	8018a24 <GUI_Text_Bluetooth>
	GUI_Switch_Button(182, 268, Bluetooth);
 800ef1a:	4b10      	ldr	r3, [pc, #64]	; (800ef5c <GUI_OptionMenuEn+0xdc>)
 800ef1c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 800ef20:	781a      	ldrb	r2, [r3, #0]
 800ef22:	20b6      	movs	r0, #182	; 0xb6
 800ef24:	f006 fa04 	bl	8015330 <GUI_Switch_Button>
	GUI_Text_On(222, 275);
 800ef28:	f240 1113 	movw	r1, #275	; 0x113
 800ef2c:	20de      	movs	r0, #222	; 0xde
 800ef2e:	f00a f8b9 	bl	80190a4 <GUI_Text_On>
	GUI_Text_Off(140, 275);
 800ef32:	f240 1113 	movw	r1, #275	; 0x113
 800ef36:	208c      	movs	r0, #140	; 0x8c
 800ef38:	f00a f8d8 	bl	80190ec <GUI_Text_Off>
	TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800ef3c:	f240 1339 	movw	r3, #313	; 0x139
 800ef40:	9400      	str	r4, [sp, #0]
 800ef42:	f44f 7283 	mov.w	r2, #262	; 0x106
 800ef46:	4619      	mov	r1, r3
 800ef48:	200a      	movs	r0, #10
 800ef4a:	f00f f981 	bl	801e250 <TFT_DrawLine>
}
 800ef4e:	b002      	add	sp, #8
 800ef50:	bd10      	pop	{r4, pc}
 800ef52:	bf00      	nop
 800ef54:	20000a48 	.word	0x20000a48
 800ef58:	200001b0 	.word	0x200001b0
 800ef5c:	2008bcea 	.word	0x2008bcea

0800ef60 <GUI_Title_Screen>:
void GUI_Title_Screen()
{
 800ef60:	b507      	push	{r0, r1, r2, lr}
	TFT_FillScreen_DMA(0x0084);
 800ef62:	2084      	movs	r0, #132	; 0x84
 800ef64:	f00e ffd2 	bl	801df0c <TFT_FillScreen_DMA>
	GUI_TitleString_Name(80, 330);
 800ef68:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800ef6c:	2050      	movs	r0, #80	; 0x50
 800ef6e:	f00b f9c3 	bl	801a2f8 <GUI_TitleString_Name>
	GUI_TitleString_Version(180, 420, VERSION);
 800ef72:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ef76:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 800ef7a:	20b4      	movs	r0, #180	; 0xb4
 800ef7c:	f00b fa16 	bl	801a3ac <GUI_TitleString_Version>
	sImage bmTKA_logo_Flash = {
 800ef80:	f44f 7387 	mov.w	r3, #270	; 0x10e
 800ef84:	f8ad 3000 	strh.w	r3, [sp]
 800ef88:	23b5      	movs	r3, #181	; 0xb5
 800ef8a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ef8e:	4b08      	ldr	r3, [pc, #32]	; (800efb0 <GUI_Title_Screen+0x50>)
 800ef90:	9301      	str	r3, [sp, #4]
			TKA_LOGO_BMP_SIZEX, // xSize
			TKA_LOGO_BMP_SIZEY, // ySize
			(uint16_t *)bmp,  // Pointer to picture data
		};
	TFT_DrawBitmap(0, 100, bmTKA_logo_Flash);
 800ef92:	ab02      	add	r3, sp, #8
 800ef94:	e913 000c 	ldmdb	r3, {r2, r3}
 800ef98:	2164      	movs	r1, #100	; 0x64
 800ef9a:	2000      	movs	r0, #0
 800ef9c:	f00f fbb7 	bl	801e70e <TFT_DrawBitmap>
	Measure_Color_xy |= CIE_xy_1931_1964;
 800efa0:	4a04      	ldr	r2, [pc, #16]	; (800efb4 <GUI_Title_Screen+0x54>)
 800efa2:	7813      	ldrb	r3, [r2, #0]
 800efa4:	f043 0301 	orr.w	r3, r3, #1
 800efa8:	7013      	strb	r3, [r2, #0]
}
 800efaa:	b003      	add	sp, #12
 800efac:	f85d fb04 	ldr.w	pc, [sp], #4
 800efb0:	20050bee 	.word	0x20050bee
 800efb4:	20004c74 	.word	0x20004c74

0800efb8 <Measure_Elements_Draw>:
		Prev_Inf_Screen = Measure_Screen;
		preGUI_screen_state = Measure_Screen;
}

void Measure_Elements_Draw(uint8_t Measure_Number)
{	
 800efb8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint16_t Y = 70, limit = 410;
	
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
	{
		screen_count_old = screen_count;
 800efbc:	4da4      	ldr	r5, [pc, #656]	; (800f250 <Measure_Elements_Draw+0x298>)
 800efbe:	4fa5      	ldr	r7, [pc, #660]	; (800f254 <Measure_Elements_Draw+0x29c>)
{	
 800efc0:	4606      	mov	r6, r0
	uint16_t Y = 70, limit = 410;
 800efc2:	2446      	movs	r4, #70	; 0x46
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800efc4:	2e0e      	cmp	r6, #14
 800efc6:	f200 8099 	bhi.w	800f0fc <Measure_Elements_Draw+0x144>
		screen_count_old = screen_count;
 800efca:	782b      	ldrb	r3, [r5, #0]
 800efcc:	703b      	strb	r3, [r7, #0]
		
		switch(state_i){
 800efce:	2e0c      	cmp	r6, #12
 800efd0:	f200 808c 	bhi.w	800f0ec <Measure_Elements_Draw+0x134>
 800efd4:	e8df f016 	tbh	[pc, r6, lsl #1]
 800efd8:	0035000d 	.word	0x0035000d
 800efdc:	0060004c 	.word	0x0060004c
 800efe0:	00ba0095 	.word	0x00ba0095
 800efe4:	00fc00d2 	.word	0x00fc00d2
 800efe8:	01680124 	.word	0x01680124
 800efec:	019a0183 	.word	0x019a0183
 800eff0:	01ba      	.short	0x01ba
					case 0: if(Measure_Field&Illuminance){
 800eff2:	4a99      	ldr	r2, [pc, #612]	; (800f258 <Measure_Elements_Draw+0x2a0>)
 800eff4:	8812      	ldrh	r2, [r2, #0]
 800eff6:	07d2      	lsls	r2, r2, #31
 800eff8:	d578      	bpl.n	800f0ec <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800effa:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800effe:	f280 81b9 	bge.w	800f374 <Measure_Elements_Draw+0x3bc>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f002:	4b96      	ldr	r3, [pc, #600]	; (800f25c <Measure_Elements_Draw+0x2a4>)
 800f004:	4996      	ldr	r1, [pc, #600]	; (800f260 <Measure_Elements_Draw+0x2a8>)
 800f006:	781a      	ldrb	r2, [r3, #0]
 800f008:	4b96      	ldr	r3, [pc, #600]	; (800f264 <Measure_Elements_Draw+0x2ac>)
 800f00a:	4897      	ldr	r0, [pc, #604]	; (800f268 <Measure_Elements_Draw+0x2b0>)
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	b17a      	cbz	r2, 800f030 <Measure_Elements_Draw+0x78>
 800f010:	7802      	ldrb	r2, [r0, #0]
 800f012:	9200      	str	r2, [sp, #0]
 800f014:	ed91 0a00 	vldr	s0, [r1]
 800f018:	2200      	movs	r2, #0
 800f01a:	4621      	mov	r1, r4
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
									Y+=10;
							} else {screen_count++;}} break;
				case 1: if(Measure_Field&Irradiance){
					if(Y+35 <= limit){
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f01c:	2014      	movs	r0, #20
 800f01e:	f006 fb65 	bl	80156ec <GUI_Text_E_Measure>
									Y+=10;
							}else {screen_count++;}} break;
				case 12: if(Measure_Field&SP_measure){
					if(Y+35 <= limit){
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
									Y+=35;
 800f022:	f104 0323 	add.w	r3, r4, #35	; 0x23
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f026:	f64f 72ff 	movw	r2, #65535	; 0xffff
									Y+=35;
 800f02a:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f02c:	9200      	str	r2, [sp, #0]
 800f02e:	e085      	b.n	800f13c <Measure_Elements_Draw+0x184>
									Mode_EL ?	 GUI_Text_E_Measure(20, Y, E_day, 0, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day, 0, exp_start, exp_set); 
 800f030:	7800      	ldrb	r0, [r0, #0]
 800f032:	9000      	str	r0, [sp, #0]
 800f034:	ed91 0a00 	vldr	s0, [r1]
 800f038:	4621      	mov	r1, r4
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f03a:	2014      	movs	r0, #20
 800f03c:	f006 fd70 	bl	8015b20 <GUI_Text_L_Measure>
 800f040:	e7ef      	b.n	800f022 <Measure_Elements_Draw+0x6a>
				case 1: if(Measure_Field&Irradiance){
 800f042:	4a85      	ldr	r2, [pc, #532]	; (800f258 <Measure_Elements_Draw+0x2a0>)
 800f044:	8812      	ldrh	r2, [r2, #0]
 800f046:	0790      	lsls	r0, r2, #30
 800f048:	d550      	bpl.n	800f0ec <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f04a:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f04e:	f280 8191 	bge.w	800f374 <Measure_Elements_Draw+0x3bc>
					Mode_EL ?	GUI_Text_E_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set):GUI_Text_L_Measure(20, Y, E_day_Wt, 1, exp_start, exp_set); 
 800f052:	4b82      	ldr	r3, [pc, #520]	; (800f25c <Measure_Elements_Draw+0x2a4>)
 800f054:	4a84      	ldr	r2, [pc, #528]	; (800f268 <Measure_Elements_Draw+0x2b0>)
 800f056:	7818      	ldrb	r0, [r3, #0]
 800f058:	4b82      	ldr	r3, [pc, #520]	; (800f264 <Measure_Elements_Draw+0x2ac>)
 800f05a:	4984      	ldr	r1, [pc, #528]	; (800f26c <Measure_Elements_Draw+0x2b4>)
 800f05c:	7812      	ldrb	r2, [r2, #0]
 800f05e:	781b      	ldrb	r3, [r3, #0]
 800f060:	9200      	str	r2, [sp, #0]
 800f062:	ed91 0a00 	vldr	s0, [r1]
 800f066:	2201      	movs	r2, #1
 800f068:	4621      	mov	r1, r4
 800f06a:	2800      	cmp	r0, #0
 800f06c:	d0e5      	beq.n	800f03a <Measure_Elements_Draw+0x82>
 800f06e:	e7d5      	b.n	800f01c <Measure_Elements_Draw+0x64>
				case 2: if(Measure_Field&PPFD){
 800f070:	4a79      	ldr	r2, [pc, #484]	; (800f258 <Measure_Elements_Draw+0x2a0>)
 800f072:	8812      	ldrh	r2, [r2, #0]
 800f074:	0751      	lsls	r1, r2, #29
 800f076:	d539      	bpl.n	800f0ec <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f078:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f07c:	f280 817a 	bge.w	800f374 <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPF_Measure(20, Y, PPFD_PPL_Measure, exp_start, exp_set);
 800f080:	497b      	ldr	r1, [pc, #492]	; (800f270 <Measure_Elements_Draw+0x2b8>)
 800f082:	4b79      	ldr	r3, [pc, #484]	; (800f268 <Measure_Elements_Draw+0x2b0>)
 800f084:	4a77      	ldr	r2, [pc, #476]	; (800f264 <Measure_Elements_Draw+0x2ac>)
 800f086:	ed91 0a00 	vldr	s0, [r1]
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	7812      	ldrb	r2, [r2, #0]
 800f08e:	4621      	mov	r1, r4
 800f090:	2014      	movs	r0, #20
 800f092:	f006 ff23 	bl	8015edc <GUI_Text_PPF_Measure>
 800f096:	e7c4      	b.n	800f022 <Measure_Elements_Draw+0x6a>
				case 3: if(Measure_Field&PPFD_BGR){
 800f098:	4a6f      	ldr	r2, [pc, #444]	; (800f258 <Measure_Elements_Draw+0x2a0>)
 800f09a:	8812      	ldrh	r2, [r2, #0]
 800f09c:	0712      	lsls	r2, r2, #28
 800f09e:	d525      	bpl.n	800f0ec <Measure_Elements_Draw+0x134>
						if(Y+95 <= limit){
 800f0a0:	f5b4 7f9e 	cmp.w	r4, #316	; 0x13c
 800f0a4:	f280 8166 	bge.w	800f374 <Measure_Elements_Draw+0x3bc>
									GUI_Text_PPFRGB_Measure(20, Y, PPFD_PPL_Red_Measure, PPFD_PPL_Green_Measure, PPFD_PPL_Blue_Measure, PPFD_PPL_Far_Red_Measure, exp_start, exp_set);
 800f0a8:	4972      	ldr	r1, [pc, #456]	; (800f274 <Measure_Elements_Draw+0x2bc>)
 800f0aa:	4b6f      	ldr	r3, [pc, #444]	; (800f268 <Measure_Elements_Draw+0x2b0>)
 800f0ac:	edd1 1a00 	vldr	s3, [r1]
 800f0b0:	4971      	ldr	r1, [pc, #452]	; (800f278 <Measure_Elements_Draw+0x2c0>)
 800f0b2:	4a6c      	ldr	r2, [pc, #432]	; (800f264 <Measure_Elements_Draw+0x2ac>)
 800f0b4:	ed91 1a00 	vldr	s2, [r1]
 800f0b8:	4970      	ldr	r1, [pc, #448]	; (800f27c <Measure_Elements_Draw+0x2c4>)
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	edd1 0a00 	vldr	s1, [r1]
 800f0c0:	496f      	ldr	r1, [pc, #444]	; (800f280 <Measure_Elements_Draw+0x2c8>)
 800f0c2:	7812      	ldrb	r2, [r2, #0]
 800f0c4:	ed91 0a00 	vldr	s0, [r1]
 800f0c8:	2014      	movs	r0, #20
 800f0ca:	4621      	mov	r1, r4
 800f0cc:	f007 f886 	bl	80161dc <GUI_Text_PPFRGB_Measure>
									Y+=95;
 800f0d0:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 800f0d4:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f0d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0da:	9200      	str	r2, [sp, #0]
 800f0dc:	4619      	mov	r1, r3
 800f0de:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f0e2:	200a      	movs	r0, #10
 800f0e4:	f00f f8b4 	bl	801e250 <TFT_DrawLine>
									Y+=10;
 800f0e8:	3469      	adds	r4, #105	; 0x69
									Y+=10;
 800f0ea:	b2a4      	uxth	r4, r4
							}else {screen_count++;}} break;
			default: break;
		}

		if (screen_count != screen_count_old)
 800f0ec:	782b      	ldrb	r3, [r5, #0]
 800f0ee:	783a      	ldrb	r2, [r7, #0]
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	f000 8142 	beq.w	800f37a <Measure_Elements_Draw+0x3c2>
			{
				state_Measure_Elements = state_i;
 800f0f6:	4a63      	ldr	r2, [pc, #396]	; (800f284 <Measure_Elements_Draw+0x2cc>)
				screen_count_old = screen_count;
 800f0f8:	703b      	strb	r3, [r7, #0]
				state_Measure_Elements = state_i;
 800f0fa:	7016      	strb	r6, [r2, #0]
				break;
			}	
			
	}
	
}
 800f0fc:	b004      	add	sp, #16
 800f0fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				case 4: if(Measure_Field&CCT){
 800f102:	4a55      	ldr	r2, [pc, #340]	; (800f258 <Measure_Elements_Draw+0x2a0>)
 800f104:	8812      	ldrh	r2, [r2, #0]
 800f106:	05d0      	lsls	r0, r2, #23
 800f108:	d5f0      	bpl.n	800f0ec <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f10a:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f10e:	f280 8131 	bge.w	800f374 <Measure_Elements_Draw+0x3bc>
							GUI_Text_CCT_Measure(20, Y,  Tc_Measure == 0xFFFF ? 0 : Tc_Measure, exp_start, exp_set); //
 800f112:	4b5d      	ldr	r3, [pc, #372]	; (800f288 <Measure_Elements_Draw+0x2d0>)
 800f114:	4954      	ldr	r1, [pc, #336]	; (800f268 <Measure_Elements_Draw+0x2b0>)
 800f116:	881a      	ldrh	r2, [r3, #0]
 800f118:	4b52      	ldr	r3, [pc, #328]	; (800f264 <Measure_Elements_Draw+0x2ac>)
 800f11a:	7809      	ldrb	r1, [r1, #0]
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	9100      	str	r1, [sp, #0]
 800f120:	f64f 78ff 	movw	r8, #65535	; 0xffff
 800f124:	4542      	cmp	r2, r8
 800f126:	bf08      	it	eq
 800f128:	2200      	moveq	r2, #0
 800f12a:	4621      	mov	r1, r4
 800f12c:	2014      	movs	r0, #20
 800f12e:	f007 ffad 	bl	801708c <GUI_Text_CCT_Measure>
									Y+=35;
 800f132:	f104 0323 	add.w	r3, r4, #35	; 0x23
 800f136:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f138:	f8cd 8000 	str.w	r8, [sp]
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f13c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f140:	4619      	mov	r1, r3
 800f142:	200a      	movs	r0, #10
 800f144:	f00f f884 	bl	801e250 <TFT_DrawLine>
									Y+=10;
 800f148:	342d      	adds	r4, #45	; 0x2d
 800f14a:	e7ce      	b.n	800f0ea <Measure_Elements_Draw+0x132>
				case 5: if(Measure_Field&delta_E){
 800f14c:	4a42      	ldr	r2, [pc, #264]	; (800f258 <Measure_Elements_Draw+0x2a0>)
 800f14e:	8812      	ldrh	r2, [r2, #0]
 800f150:	0511      	lsls	r1, r2, #20
 800f152:	d5cb      	bpl.n	800f0ec <Measure_Elements_Draw+0x134>
						if(Y+35 <= limit){
 800f154:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f158:	f280 810c 	bge.w	800f374 <Measure_Elements_Draw+0x3bc>
									GUI_Text_deltaE_Measure(20, Y, delta_Eab_Measure, exp_start, exp_set);
 800f15c:	4b4b      	ldr	r3, [pc, #300]	; (800f28c <Measure_Elements_Draw+0x2d4>)
 800f15e:	4a41      	ldr	r2, [pc, #260]	; (800f264 <Measure_Elements_Draw+0x2ac>)
 800f160:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f164:	7812      	ldrb	r2, [r2, #0]
 800f166:	ee00 3a10 	vmov	s0, r3
 800f16a:	4b3f      	ldr	r3, [pc, #252]	; (800f268 <Measure_Elements_Draw+0x2b0>)
 800f16c:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	4621      	mov	r1, r4
 800f174:	2014      	movs	r0, #20
 800f176:	f008 f981 	bl	801747c <GUI_Text_deltaE_Measure>
 800f17a:	e752      	b.n	800f022 <Measure_Elements_Draw+0x6a>
				case 6: if(Measure_Field&CIE_XYZ){
 800f17c:	4a36      	ldr	r2, [pc, #216]	; (800f258 <Measure_Elements_Draw+0x2a0>)
 800f17e:	8812      	ldrh	r2, [r2, #0]
 800f180:	06d2      	lsls	r2, r2, #27
 800f182:	d5b3      	bpl.n	800f0ec <Measure_Elements_Draw+0x134>
						if(Y+105 <= limit){
 800f184:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f188:	f280 80f4 	bge.w	800f374 <Measure_Elements_Draw+0x3bc>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f18c:	4b40      	ldr	r3, [pc, #256]	; (800f290 <Measure_Elements_Draw+0x2d8>)
 800f18e:	781b      	ldrb	r3, [r3, #0]
 800f190:	b9e3      	cbnz	r3, 800f1cc <Measure_Elements_Draw+0x214>
 800f192:	4940      	ldr	r1, [pc, #256]	; (800f294 <Measure_Elements_Draw+0x2dc>)
 800f194:	4834      	ldr	r0, [pc, #208]	; (800f268 <Measure_Elements_Draw+0x2b0>)
 800f196:	880a      	ldrh	r2, [r1, #0]
 800f198:	7800      	ldrb	r0, [r0, #0]
 800f19a:	884b      	ldrh	r3, [r1, #2]
 800f19c:	8889      	ldrh	r1, [r1, #4]
 800f19e:	9002      	str	r0, [sp, #8]
 800f1a0:	4830      	ldr	r0, [pc, #192]	; (800f264 <Measure_Elements_Draw+0x2ac>)
 800f1a2:	7800      	ldrb	r0, [r0, #0]
 800f1a4:	9001      	str	r0, [sp, #4]
 800f1a6:	9100      	str	r1, [sp, #0]
 800f1a8:	2014      	movs	r0, #20
 800f1aa:	4621      	mov	r1, r4
 800f1ac:	f007 fc3c 	bl	8016a28 <GUI_Text_XYZ_Measure>
									Y+=105;
 800f1b0:	f104 0369 	add.w	r3, r4, #105	; 0x69
 800f1b4:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f1b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1ba:	9200      	str	r2, [sp, #0]
 800f1bc:	4619      	mov	r1, r3
 800f1be:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f1c2:	200a      	movs	r0, #10
 800f1c4:	f00f f844 	bl	801e250 <TFT_DrawLine>
									Y+=10;
 800f1c8:	3473      	adds	r4, #115	; 0x73
 800f1ca:	e78e      	b.n	800f0ea <Measure_Elements_Draw+0x132>
							GUI_Text_XYZ_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[0]:colorimetry_XYZ1931[0], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[1]:colorimetry_XYZ1931[1], (Measure_Color_xy == 0x00)?colorimetry_XYZ1964[2]:colorimetry_XYZ1931[2], exp_start, exp_set);
 800f1cc:	4932      	ldr	r1, [pc, #200]	; (800f298 <Measure_Elements_Draw+0x2e0>)
 800f1ce:	e7e1      	b.n	800f194 <Measure_Elements_Draw+0x1dc>
				case 7: if(Measure_Field&CIE_xy){
 800f1d0:	4a21      	ldr	r2, [pc, #132]	; (800f258 <Measure_Elements_Draw+0x2a0>)
 800f1d2:	8812      	ldrh	r2, [r2, #0]
 800f1d4:	0690      	lsls	r0, r2, #26
 800f1d6:	d589      	bpl.n	800f0ec <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f1d8:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f1dc:	f300 80ca 	bgt.w	800f374 <Measure_Elements_Draw+0x3bc>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f1e0:	4b2b      	ldr	r3, [pc, #172]	; (800f290 <Measure_Elements_Draw+0x2d8>)
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	b9d3      	cbnz	r3, 800f21c <Measure_Elements_Draw+0x264>
 800f1e6:	4b2d      	ldr	r3, [pc, #180]	; (800f29c <Measure_Elements_Draw+0x2e4>)
 800f1e8:	ed93 0a00 	vldr	s0, [r3]
 800f1ec:	edd3 0a01 	vldr	s1, [r3, #4]
 800f1f0:	4a1c      	ldr	r2, [pc, #112]	; (800f264 <Measure_Elements_Draw+0x2ac>)
 800f1f2:	4b1d      	ldr	r3, [pc, #116]	; (800f268 <Measure_Elements_Draw+0x2b0>)
 800f1f4:	7812      	ldrb	r2, [r2, #0]
 800f1f6:	781b      	ldrb	r3, [r3, #0]
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	2014      	movs	r0, #20
 800f1fc:	f007 fda2 	bl	8016d44 <GUI_Text_xy_Measure>
									Y+=70;
 800f200:	f104 0346 	add.w	r3, r4, #70	; 0x46
 800f204:	b29b      	uxth	r3, r3
									TFT_DrawLine(10, Y, 262, Y, TFT_White);
 800f206:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f20a:	9200      	str	r2, [sp, #0]
 800f20c:	4619      	mov	r1, r3
 800f20e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f212:	200a      	movs	r0, #10
 800f214:	f00f f81c 	bl	801e250 <TFT_DrawLine>
									Y+=10;
 800f218:	3450      	adds	r4, #80	; 0x50
 800f21a:	e766      	b.n	800f0ea <Measure_Elements_Draw+0x132>
						GUI_Text_xy_Measure(20, Y, (Measure_Color_xy == 0x00)?colorimetry_xy1964[0]:colorimetry_xy1931[0], (Measure_Color_xy == 0x00)?colorimetry_xy1964[1]:colorimetry_xy1931[1], exp_start, exp_set);
 800f21c:	4b20      	ldr	r3, [pc, #128]	; (800f2a0 <Measure_Elements_Draw+0x2e8>)
 800f21e:	e7e3      	b.n	800f1e8 <Measure_Elements_Draw+0x230>
				case 8: if(Measure_Field&CIE_Luv){
 800f220:	4a0d      	ldr	r2, [pc, #52]	; (800f258 <Measure_Elements_Draw+0x2a0>)
 800f222:	8812      	ldrh	r2, [r2, #0]
 800f224:	0651      	lsls	r1, r2, #25
 800f226:	f57f af61 	bpl.w	800f0ec <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f22a:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f22e:	f300 80a1 	bgt.w	800f374 <Measure_Elements_Draw+0x3bc>
									GUI_Text_uv_Measure(20, Y, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 800f232:	491c      	ldr	r1, [pc, #112]	; (800f2a4 <Measure_Elements_Draw+0x2ec>)
 800f234:	4b0c      	ldr	r3, [pc, #48]	; (800f268 <Measure_Elements_Draw+0x2b0>)
 800f236:	4a0b      	ldr	r2, [pc, #44]	; (800f264 <Measure_Elements_Draw+0x2ac>)
 800f238:	edd1 0a01 	vldr	s1, [r1, #4]
 800f23c:	ed91 0a00 	vldr	s0, [r1]
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	7812      	ldrb	r2, [r2, #0]
 800f244:	4621      	mov	r1, r4
 800f246:	2014      	movs	r0, #20
 800f248:	f007 fe3e 	bl	8016ec8 <GUI_Text_uv_Measure>
 800f24c:	e7d8      	b.n	800f200 <Measure_Elements_Draw+0x248>
 800f24e:	bf00      	nop
 800f250:	20004c9b 	.word	0x20004c9b
 800f254:	20004c9c 	.word	0x20004c9c
 800f258:	20004c76 	.word	0x20004c76
 800f25c:	20000a48 	.word	0x20000a48
 800f260:	20090edc 	.word	0x20090edc
 800f264:	20000a4d 	.word	0x20000a4d
 800f268:	20000a4c 	.word	0x20000a4c
 800f26c:	20090948 	.word	0x20090948
 800f270:	20090950 	.word	0x20090950
 800f274:	2009094c 	.word	0x2009094c
 800f278:	20090a34 	.word	0x20090a34
 800f27c:	20090db8 	.word	0x20090db8
 800f280:	20090cf4 	.word	0x20090cf4
 800f284:	20004ca0 	.word	0x20004ca0
 800f288:	2004fbe0 	.word	0x2004fbe0
 800f28c:	2008bce6 	.word	0x2008bce6
 800f290:	20004c74 	.word	0x20004c74
 800f294:	2008a7c4 	.word	0x2008a7c4
 800f298:	2008a7be 	.word	0x2008a7be
 800f29c:	2008a7e4 	.word	0x2008a7e4
 800f2a0:	2008a7dc 	.word	0x2008a7dc
 800f2a4:	2008a7d4 	.word	0x2008a7d4
				case 9: if(Measure_Field&CIE_Lab){
 800f2a8:	4a35      	ldr	r2, [pc, #212]	; (800f380 <Measure_Elements_Draw+0x3c8>)
 800f2aa:	8812      	ldrh	r2, [r2, #0]
 800f2ac:	0612      	lsls	r2, r2, #24
 800f2ae:	f57f af1d 	bpl.w	800f0ec <Measure_Elements_Draw+0x134>
					if(Y+105 <= limit){
 800f2b2:	f5b4 7f99 	cmp.w	r4, #306	; 0x132
 800f2b6:	da5d      	bge.n	800f374 <Measure_Elements_Draw+0x3bc>
									GUI_Text_LAB_Measure(20, Y, colorimetry_LAB[0],colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 800f2b8:	4832      	ldr	r0, [pc, #200]	; (800f384 <Measure_Elements_Draw+0x3cc>)
 800f2ba:	4933      	ldr	r1, [pc, #204]	; (800f388 <Measure_Elements_Draw+0x3d0>)
 800f2bc:	7800      	ldrb	r0, [r0, #0]
 800f2be:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800f2c2:	f9b1 2000 	ldrsh.w	r2, [r1]
 800f2c6:	9002      	str	r0, [sp, #8]
 800f2c8:	4830      	ldr	r0, [pc, #192]	; (800f38c <Measure_Elements_Draw+0x3d4>)
 800f2ca:	7800      	ldrb	r0, [r0, #0]
 800f2cc:	9001      	str	r0, [sp, #4]
 800f2ce:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800f2d2:	9100      	str	r1, [sp, #0]
 800f2d4:	2014      	movs	r0, #20
 800f2d6:	4621      	mov	r1, r4
 800f2d8:	f008 fdae 	bl	8017e38 <GUI_Text_LAB_Measure>
 800f2dc:	e768      	b.n	800f1b0 <Measure_Elements_Draw+0x1f8>
				case 10: if(Measure_Field&lambda_d){
 800f2de:	4a28      	ldr	r2, [pc, #160]	; (800f380 <Measure_Elements_Draw+0x3c8>)
 800f2e0:	8812      	ldrh	r2, [r2, #0]
 800f2e2:	0590      	lsls	r0, r2, #22
 800f2e4:	f57f af02 	bpl.w	800f0ec <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f2e8:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f2ec:	da42      	bge.n	800f374 <Measure_Elements_Draw+0x3bc>
									GUI_Text_lambdaD_Measure(20, Y, lambda_d_Measure, exp_start, exp_set);
 800f2ee:	4b28      	ldr	r3, [pc, #160]	; (800f390 <Measure_Elements_Draw+0x3d8>)
 800f2f0:	4a26      	ldr	r2, [pc, #152]	; (800f38c <Measure_Elements_Draw+0x3d4>)
 800f2f2:	881b      	ldrh	r3, [r3, #0]
 800f2f4:	7812      	ldrb	r2, [r2, #0]
 800f2f6:	ee00 3a10 	vmov	s0, r3
 800f2fa:	4b22      	ldr	r3, [pc, #136]	; (800f384 <Measure_Elements_Draw+0x3cc>)
 800f2fc:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	4621      	mov	r1, r4
 800f304:	2014      	movs	r0, #20
 800f306:	f007 ffbb 	bl	8017280 <GUI_Text_lambdaD_Measure>
 800f30a:	e68a      	b.n	800f022 <Measure_Elements_Draw+0x6a>
				case 11: if(Measure_Field&EbEr){
 800f30c:	4a1c      	ldr	r2, [pc, #112]	; (800f380 <Measure_Elements_Draw+0x3c8>)
 800f30e:	8812      	ldrh	r2, [r2, #0]
 800f310:	04d1      	lsls	r1, r2, #19
 800f312:	f57f aeeb 	bpl.w	800f0ec <Measure_Elements_Draw+0x134>
					if(Y+70 <= limit){
 800f316:	f5b4 7faa 	cmp.w	r4, #340	; 0x154
 800f31a:	dc2b      	bgt.n	800f374 <Measure_Elements_Draw+0x3bc>
						Mode_EL ?	 GUI_Text_EbEr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set):GUI_Text_LbLr_Measure(20, Y, ELb_Measure, ELr_Measure, exp_start, exp_set); 
 800f31c:	4b1d      	ldr	r3, [pc, #116]	; (800f394 <Measure_Elements_Draw+0x3dc>)
 800f31e:	481e      	ldr	r0, [pc, #120]	; (800f398 <Measure_Elements_Draw+0x3e0>)
 800f320:	491e      	ldr	r1, [pc, #120]	; (800f39c <Measure_Elements_Draw+0x3e4>)
 800f322:	f893 e000 	ldrb.w	lr, [r3]
 800f326:	4a19      	ldr	r2, [pc, #100]	; (800f38c <Measure_Elements_Draw+0x3d4>)
 800f328:	4b16      	ldr	r3, [pc, #88]	; (800f384 <Measure_Elements_Draw+0x3cc>)
 800f32a:	edd0 0a00 	vldr	s1, [r0]
 800f32e:	ed91 0a00 	vldr	s0, [r1]
 800f332:	781b      	ldrb	r3, [r3, #0]
 800f334:	7812      	ldrb	r2, [r2, #0]
 800f336:	4621      	mov	r1, r4
 800f338:	2014      	movs	r0, #20
 800f33a:	f1be 0f00 	cmp.w	lr, #0
 800f33e:	d002      	beq.n	800f346 <Measure_Elements_Draw+0x38e>
 800f340:	f008 f9a0 	bl	8017684 <GUI_Text_EbEr_Measure>
 800f344:	e75c      	b.n	800f200 <Measure_Elements_Draw+0x248>
 800f346:	f008 fb25 	bl	8017994 <GUI_Text_LbLr_Measure>
 800f34a:	e759      	b.n	800f200 <Measure_Elements_Draw+0x248>
				case 12: if(Measure_Field&SP_measure){
 800f34c:	4a0c      	ldr	r2, [pc, #48]	; (800f380 <Measure_Elements_Draw+0x3c8>)
 800f34e:	8812      	ldrh	r2, [r2, #0]
 800f350:	0492      	lsls	r2, r2, #18
 800f352:	f57f aecb 	bpl.w	800f0ec <Measure_Elements_Draw+0x134>
					if(Y+35 <= limit){
 800f356:	f5b4 7fbc 	cmp.w	r4, #376	; 0x178
 800f35a:	da0b      	bge.n	800f374 <Measure_Elements_Draw+0x3bc>
						GUI_Text_S_P_Measure(20, Y, SP_Measure, exp_start, exp_set);
 800f35c:	4910      	ldr	r1, [pc, #64]	; (800f3a0 <Measure_Elements_Draw+0x3e8>)
 800f35e:	4b09      	ldr	r3, [pc, #36]	; (800f384 <Measure_Elements_Draw+0x3cc>)
 800f360:	4a0a      	ldr	r2, [pc, #40]	; (800f38c <Measure_Elements_Draw+0x3d4>)
 800f362:	ed91 0a00 	vldr	s0, [r1]
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	7812      	ldrb	r2, [r2, #0]
 800f36a:	4621      	mov	r1, r4
 800f36c:	2014      	movs	r0, #20
 800f36e:	f008 fc9d 	bl	8017cac <GUI_Text_S_P_Measure>
 800f372:	e656      	b.n	800f022 <Measure_Elements_Draw+0x6a>
							}else {screen_count++;}} break;
 800f374:	3301      	adds	r3, #1
 800f376:	702b      	strb	r3, [r5, #0]
 800f378:	e6b8      	b.n	800f0ec <Measure_Elements_Draw+0x134>
	for (uint8_t state_i = Measure_Number; state_i < 15; state_i++)
 800f37a:	3601      	adds	r6, #1
 800f37c:	b2f6      	uxtb	r6, r6
 800f37e:	e621      	b.n	800efc4 <Measure_Elements_Draw+0xc>
 800f380:	20004c76 	.word	0x20004c76
 800f384:	20000a4c 	.word	0x20000a4c
 800f388:	2008a7b8 	.word	0x2008a7b8
 800f38c:	20000a4d 	.word	0x20000a4d
 800f390:	20090db4 	.word	0x20090db4
 800f394:	20000a48 	.word	0x20000a48
 800f398:	20090ed8 	.word	0x20090ed8
 800f39c:	20090ed4 	.word	0x20090ed4
 800f3a0:	20090a30 	.word	0x20090a30

0800f3a4 <GUI_Information_Screen>:
	TFT_FillScreen_DMA(TFT_Red);

}

void GUI_Information_Screen()
{
 800f3a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f3a6:	4b1e      	ldr	r3, [pc, #120]	; (800f420 <GUI_Information_Screen+0x7c>)
 800f3a8:	4a1e      	ldr	r2, [pc, #120]	; (800f424 <GUI_Information_Screen+0x80>)
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	7812      	ldrb	r2, [r2, #0]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d034      	beq.n	800f41c <GUI_Information_Screen+0x78>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f3b2:	2063      	movs	r0, #99	; 0x63
 800f3b4:	f00e fdaa 	bl	801df0c <TFT_FillScreen_DMA>
		if(Language_status == En){
 800f3b8:	4b1b      	ldr	r3, [pc, #108]	; (800f428 <GUI_Information_Screen+0x84>)
 800f3ba:	491c      	ldr	r1, [pc, #112]	; (800f42c <GUI_Information_Screen+0x88>)
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	4a1c      	ldr	r2, [pc, #112]	; (800f430 <GUI_Information_Screen+0x8c>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f3c0:	8809      	ldrh	r1, [r1, #0]
 800f3c2:	7812      	ldrb	r2, [r2, #0]
 800f3c4:	4d1b      	ldr	r5, [pc, #108]	; (800f434 <GUI_Information_Screen+0x90>)
 800f3c6:	4c1c      	ldr	r4, [pc, #112]	; (800f438 <GUI_Information_Screen+0x94>)
		if(Language_status == En){
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	4b1c      	ldr	r3, [pc, #112]	; (800f43c <GUI_Information_Screen+0x98>)
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	9100      	str	r1, [sp, #0]
 800f3d0:	f04f 0100 	mov.w	r1, #0
 800f3d4:	4608      	mov	r0, r1
		if(Language_status == En){
 800f3d6:	d110      	bne.n	800f3fa <GUI_Information_Screen+0x56>
			GUI_TextEn_Info_Callibration(0, 0, (uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f3d8:	f00a fe22 	bl	801a020 <GUI_TextEn_Info_Callibration>
			GUI_TextEn_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800f3dc:	2100      	movs	r1, #0
 800f3de:	4608      	mov	r0, r1
 800f3e0:	882b      	ldrh	r3, [r5, #0]
 800f3e2:	8822      	ldrh	r2, [r4, #0]
 800f3e4:	f00a fe9e 	bl	801a124 <GUI_TextEn_Info_Serial>
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f3ee:	4608      	mov	r0, r1
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
			GUI_TextRu_Info_Ver(0, 0, VERSION);
		}
	}
}
 800f3f0:	b003      	add	sp, #12
 800f3f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextEn_Info_Ver(0, 0, VERSION);
 800f3f6:	f00a bf0b 	b.w	801a210 <GUI_TextEn_Info_Ver>
			GUI_TextRu_Info_Callibration(0, 0,(uint8_t)(Calibration_date&0x00FF), (uint8_t)(Calibration_month&0x00FF), Calibration_year);
 800f3fa:	f00b faf7 	bl	801a9ec <GUI_TextRu_Info_Callibration>
			GUI_TextRu_Info_Serial(0,0, Serial_part_device, Serial_number_device);
 800f3fe:	2100      	movs	r1, #0
 800f400:	4608      	mov	r0, r1
 800f402:	882b      	ldrh	r3, [r5, #0]
 800f404:	8822      	ldrh	r2, [r4, #0]
 800f406:	f00b fbaf 	bl	801ab68 <GUI_TextRu_Info_Serial>
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800f40a:	2100      	movs	r1, #0
 800f40c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f410:	4608      	mov	r0, r1
}
 800f412:	b003      	add	sp, #12
 800f414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			GUI_TextRu_Info_Ver(0, 0, VERSION);
 800f418:	f00b bc20 	b.w	801ac5c <GUI_TextRu_Info_Ver>
}
 800f41c:	b003      	add	sp, #12
 800f41e:	bd30      	pop	{r4, r5, pc}
 800f420:	2000022a 	.word	0x2000022a
 800f424:	20004c71 	.word	0x20004c71
 800f428:	20004c73 	.word	0x20004c73
 800f42c:	20090c60 	.word	0x20090c60
 800f430:	20090940 	.word	0x20090940
 800f434:	20090d08 	.word	0x20090d08
 800f438:	20090944 	.word	0x20090944
 800f43c:	20090954 	.word	0x20090954

0800f440 <GUI_SD_Write_Screen>:

void GUI_SD_Write_Screen()
{
 800f440:	b537      	push	{r0, r1, r2, r4, r5, lr}
	
	if(preGUI_screen_state != GUI_screen_state){
 800f442:	4b29      	ldr	r3, [pc, #164]	; (800f4e8 <GUI_SD_Write_Screen+0xa8>)
 800f444:	4d29      	ldr	r5, [pc, #164]	; (800f4ec <GUI_SD_Write_Screen+0xac>)
 800f446:	781a      	ldrb	r2, [r3, #0]
 800f448:	7829      	ldrb	r1, [r5, #0]
 800f44a:	4291      	cmp	r1, r2
 800f44c:	d020      	beq.n	800f490 <GUI_SD_Write_Screen+0x50>
		pause = 1;
 800f44e:	4b28      	ldr	r3, [pc, #160]	; (800f4f0 <GUI_SD_Write_Screen+0xb0>)
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
		if(Language_status == En){
 800f450:	4c28      	ldr	r4, [pc, #160]	; (800f4f4 <GUI_SD_Write_Screen+0xb4>)
		pause = 1;
 800f452:	2201      	movs	r2, #1
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f454:	2063      	movs	r0, #99	; 0x63
		pause = 1;
 800f456:	701a      	strb	r2, [r3, #0]
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f458:	f00e fd58 	bl	801df0c <TFT_FillScreen_DMA>
		if(Language_status == En){
 800f45c:	7822      	ldrb	r2, [r4, #0]
 800f45e:	2a01      	cmp	r2, #1
			GUI_TextEn_WriteSD(80, 120);
 800f460:	f04f 0178 	mov.w	r1, #120	; 0x78
 800f464:	f04f 0050 	mov.w	r0, #80	; 0x50
		if(Language_status == En){
 800f468:	d13a      	bne.n	800f4e0 <GUI_SD_Write_Screen+0xa0>
			GUI_TextEn_WriteSD(80, 120);
 800f46a:	f00a fd9f 	bl	8019fac <GUI_TextEn_WriteSD>
		}
		else
		{	
				 GUI_TextRu_WriteSD(80, 120);
		}
		if (SD_Detect == 0) {
 800f46e:	4b22      	ldr	r3, [pc, #136]	; (800f4f8 <GUI_SD_Write_Screen+0xb8>)
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	b96b      	cbnz	r3, 800f490 <GUI_SD_Write_Screen+0x50>
			Calculate_SD_Data(); 
 800f474:	f00c fdb4 	bl	801bfe0 <Calculate_SD_Data>
			SD_Witer(sdfile_cnt, Language_status, Memory_Data_satus, Mode_EL, CRICQS_done);
 800f478:	7821      	ldrb	r1, [r4, #0]
 800f47a:	4c20      	ldr	r4, [pc, #128]	; (800f4fc <GUI_SD_Write_Screen+0xbc>)
 800f47c:	4b20      	ldr	r3, [pc, #128]	; (800f500 <GUI_SD_Write_Screen+0xc0>)
 800f47e:	4a21      	ldr	r2, [pc, #132]	; (800f504 <GUI_SD_Write_Screen+0xc4>)
 800f480:	4821      	ldr	r0, [pc, #132]	; (800f508 <GUI_SD_Write_Screen+0xc8>)
 800f482:	7824      	ldrb	r4, [r4, #0]
 800f484:	781b      	ldrb	r3, [r3, #0]
 800f486:	7812      	ldrb	r2, [r2, #0]
 800f488:	8800      	ldrh	r0, [r0, #0]
 800f48a:	9400      	str	r4, [sp, #0]
 800f48c:	f00c fe9c 	bl	801c1c8 <SD_Witer>

		}
	}
	
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 800f490:	4c1e      	ldr	r4, [pc, #120]	; (800f50c <GUI_SD_Write_Screen+0xcc>)
 800f492:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f496:	f7f1 fbb3 	bl	8000c00 <__aeabi_d2f>
 800f49a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800f49e:	ee00 0a10 	vmov	s0, r0
 800f4a2:	2055      	movs	r0, #85	; 0x55
 800f4a4:	f006 f8f2 	bl	801568c <GUI_Bar_Measure>
	
	if(SDWr_Status_bar == 1){
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	4b19      	ldr	r3, [pc, #100]	; (800f510 <GUI_SD_Write_Screen+0xd0>)
 800f4ac:	e9d4 0100 	ldrd	r0, r1, [r4]
 800f4b0:	f7f1 fb16 	bl	8000ae0 <__aeabi_dcmpeq>
 800f4b4:	b190      	cbz	r0, 800f4dc <GUI_SD_Write_Screen+0x9c>
			if(sdfile_cnt < 999){
 800f4b6:	4b14      	ldr	r3, [pc, #80]	; (800f508 <GUI_SD_Write_Screen+0xc8>)
 800f4b8:	881a      	ldrh	r2, [r3, #0]
 800f4ba:	f240 31e6 	movw	r1, #998	; 0x3e6
 800f4be:	428a      	cmp	r2, r1
					sdfile_cnt++;
 800f4c0:	bf94      	ite	ls
 800f4c2:	3201      	addls	r2, #1
				}else{
					sdfile_cnt = 0;
 800f4c4:	2200      	movhi	r2, #0
 800f4c6:	801a      	strh	r2, [r3, #0]
				} 
			WriteSDFLASH_t(sdfile_cnt);  
 800f4c8:	8818      	ldrh	r0, [r3, #0]
 800f4ca:	2100      	movs	r1, #0
 800f4cc:	f00c fc7a 	bl	801bdc4 <WriteSDFLASH_t>
			pause = 0; 
 800f4d0:	4b07      	ldr	r3, [pc, #28]	; (800f4f0 <GUI_SD_Write_Screen+0xb0>)
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	701a      	strb	r2, [r3, #0]
			GUI_screen_state = Prev_Inf_Screen;
 800f4d6:	4b0f      	ldr	r3, [pc, #60]	; (800f514 <GUI_SD_Write_Screen+0xd4>)
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	702b      	strb	r3, [r5, #0]
	}

}
 800f4dc:	b003      	add	sp, #12
 800f4de:	bd30      	pop	{r4, r5, pc}
				 GUI_TextRu_WriteSD(80, 120);
 800f4e0:	f00b fb02 	bl	801aae8 <GUI_TextRu_WriteSD>
 800f4e4:	e7c3      	b.n	800f46e <GUI_SD_Write_Screen+0x2e>
 800f4e6:	bf00      	nop
 800f4e8:	2000022a 	.word	0x2000022a
 800f4ec:	20004c71 	.word	0x20004c71
 800f4f0:	20004c98 	.word	0x20004c98
 800f4f4:	20004c73 	.word	0x20004c73
 800f4f8:	20090e90 	.word	0x20090e90
 800f4fc:	20004c6c 	.word	0x20004c6c
 800f500:	20000a48 	.word	0x20000a48
 800f504:	20000228 	.word	0x20000228
 800f508:	20004c9e 	.word	0x20004c9e
 800f50c:	20004cc8 	.word	0x20004cc8
 800f510:	3ff00000 	.word	0x3ff00000
 800f514:	2008bce5 	.word	0x2008bce5

0800f518 <GUI_Up_Panel>:


void GUI_Up_Panel()
{
	GUI_Battery_Level(0, 0, percentage_charge);
 800f518:	4b0f      	ldr	r3, [pc, #60]	; (800f558 <GUI_Up_Panel+0x40>)
{
 800f51a:	b507      	push	{r0, r1, r2, lr}
	GUI_Battery_Level(0, 0, percentage_charge);
 800f51c:	2100      	movs	r1, #0
 800f51e:	ed93 0b00 	vldr	d0, [r3]
 800f522:	4608      	mov	r0, r1
 800f524:	f008 fe84 	bl	8018230 <GUI_Battery_Level>
	if (Bluetooth == ON){
 800f528:	4b0c      	ldr	r3, [pc, #48]	; (800f55c <GUI_Up_Panel+0x44>)
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d106      	bne.n	800f53e <GUI_Up_Panel+0x26>
		GUI_Bluetooth_Logo(240, 2);
 800f530:	2102      	movs	r1, #2
 800f532:	20f0      	movs	r0, #240	; 0xf0
	} else
	{
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
	}
}
 800f534:	b003      	add	sp, #12
 800f536:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Bluetooth_Logo(240, 2);
 800f53a:	f005 b915 	b.w	8014768 <GUI_Bluetooth_Logo>
		TFT_FillRectangle(239, 1, 260, 35, TFT_Black_Bkgr);
 800f53e:	2363      	movs	r3, #99	; 0x63
 800f540:	9300      	str	r3, [sp, #0]
 800f542:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f546:	2323      	movs	r3, #35	; 0x23
 800f548:	2101      	movs	r1, #1
 800f54a:	20ef      	movs	r0, #239	; 0xef
 800f54c:	f00e fedd 	bl	801e30a <TFT_FillRectangle>
}
 800f550:	b003      	add	sp, #12
 800f552:	f85d fb04 	ldr.w	pc, [sp], #4
 800f556:	bf00      	nop
 800f558:	20090dc0 	.word	0x20090dc0
 800f55c:	2008bcea 	.word	0x2008bcea

0800f560 <GUI_Down_Panel>:

void GUI_Down_Panel()
{		
 800f560:	b508      	push	{r3, lr}
	GUI_Button_Settings(1, 426);
 800f562:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f566:	2001      	movs	r0, #1
 800f568:	f005 f950 	bl	801480c <GUI_Button_Settings>
	GUI_Button_SD_Card(55, 426, !SD_Detect);
 800f56c:	4b1b      	ldr	r3, [pc, #108]	; (800f5dc <GUI_Down_Panel+0x7c>)
 800f56e:	781a      	ldrb	r2, [r3, #0]
 800f570:	fab2 f282 	clz	r2, r2
 800f574:	0952      	lsrs	r2, r2, #5
 800f576:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f57a:	2037      	movs	r0, #55	; 0x37
 800f57c:	f005 fb00 	bl	8014b80 <GUI_Button_SD_Card>
	GUI_Button_Measure_Start_Pause(109, 426);
 800f580:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f584:	206d      	movs	r0, #109	; 0x6d
 800f586:	f005 fbc7 	bl	8014d18 <GUI_Button_Measure_Start_Pause>
	
	if(GUI_screen_state >= DataSet1_Screen)
 800f58a:	4b15      	ldr	r3, [pc, #84]	; (800f5e0 <GUI_Down_Panel+0x80>)
 800f58c:	781b      	ldrb	r3, [r3, #0]
 800f58e:	2b06      	cmp	r3, #6
 800f590:	d90b      	bls.n	800f5aa <GUI_Down_Panel+0x4a>
	{
		GUI_Button_Down(163, 426);
 800f592:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f596:	20a3      	movs	r0, #163	; 0xa3
 800f598:	f005 f976 	bl	8014888 <GUI_Button_Down>
		GUI_Button_TFT_On_Off(217, 426);
 800f59c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f5a0:	20d9      	movs	r0, #217	; 0xd9
	else
	{
		GUI_Button_TFT_Rotate(163, 426);
		GUI_Button_Right(217, 426);
	}
}
 800f5a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_TFT_On_Off(217, 426);
 800f5a6:	f005 ba48 	b.w	8014a3a <GUI_Button_TFT_On_Off>
	}else if(GUI_screen_state <= Measure3_Screen)
 800f5aa:	2b03      	cmp	r3, #3
 800f5ac:	d810      	bhi.n	800f5d0 <GUI_Down_Panel+0x70>
		GUI_Button_Down_Active(163, 426, (screen_count > 0));
 800f5ae:	4b0d      	ldr	r3, [pc, #52]	; (800f5e4 <GUI_Down_Panel+0x84>)
 800f5b0:	781a      	ldrb	r2, [r3, #0]
 800f5b2:	3200      	adds	r2, #0
 800f5b4:	bf18      	it	ne
 800f5b6:	2201      	movne	r2, #1
 800f5b8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f5bc:	20a3      	movs	r0, #163	; 0xa3
 800f5be:	f005 f9a8 	bl	8014912 <GUI_Button_Down_Active>
		GUI_Button_Right(217, 426);
 800f5c2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f5c6:	20d9      	movs	r0, #217	; 0xd9
}
 800f5c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		GUI_Button_Right(217, 426);
 800f5cc:	f005 b9eb 	b.w	80149a6 <GUI_Button_Right>
		GUI_Button_TFT_Rotate(163, 426);
 800f5d0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f5d4:	20a3      	movs	r0, #163	; 0xa3
 800f5d6:	f005 fa5e 	bl	8014a96 <GUI_Button_TFT_Rotate>
 800f5da:	e7f2      	b.n	800f5c2 <GUI_Down_Panel+0x62>
 800f5dc:	20090e90 	.word	0x20090e90
 800f5e0:	20004c71 	.word	0x20004c71
 800f5e4:	20004c9b 	.word	0x20004c9b

0800f5e8 <GUI_Panels>:

void GUI_Panels()
{
 800f5e8:	b507      	push	{r0, r1, r2, lr}
	if((GUI_screen_state == Measure_Screen && (preGUI_screen_state !=Measure2_Screen 
 800f5ea:	4b1c      	ldr	r3, [pc, #112]	; (800f65c <GUI_Panels+0x74>)
 800f5ec:	781a      	ldrb	r2, [r3, #0]
 800f5ee:	2a01      	cmp	r2, #1
 800f5f0:	d121      	bne.n	800f636 <GUI_Panels+0x4e>
 800f5f2:	4b1b      	ldr	r3, [pc, #108]	; (800f660 <GUI_Panels+0x78>)
 800f5f4:	7819      	ldrb	r1, [r3, #0]
 800f5f6:	2902      	cmp	r1, #2
 800f5f8:	d125      	bne.n	800f646 <GUI_Panels+0x5e>
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	2b03      	cmp	r3, #3
 800f5fe:	d122      	bne.n	800f646 <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
			|| (preGUI_screen_state >= DataSet1_Screen && GUI_screen_state < DataSet1_Screen)
 800f600:	4b17      	ldr	r3, [pc, #92]	; (800f660 <GUI_Panels+0x78>)
 800f602:	7819      	ldrb	r1, [r3, #0]
 800f604:	2906      	cmp	r1, #6
 800f606:	d901      	bls.n	800f60c <GUI_Panels+0x24>
 800f608:	2a06      	cmp	r2, #6
 800f60a:	d91c      	bls.n	800f646 <GUI_Panels+0x5e>
			|| (preGUI_screen_state == Information_Screen) || ((GUI_screen_state == Color_Rendition_Screen) && preGUI_screen_state < Color_Rendition_Screen))
 800f60c:	7819      	ldrb	r1, [r3, #0]
 800f60e:	2911      	cmp	r1, #17
 800f610:	d019      	beq.n	800f646 <GUI_Panels+0x5e>
 800f612:	2a06      	cmp	r2, #6
 800f614:	d102      	bne.n	800f61c <GUI_Panels+0x34>
 800f616:	781b      	ldrb	r3, [r3, #0]
 800f618:	2b05      	cmp	r3, #5
 800f61a:	d914      	bls.n	800f646 <GUI_Panels+0x5e>
		GUI_Up_Panel();
		GUI_Down_Panel();
	} 
	else 
	{
		TFT_FillRectangle(0, 40, 271, 425, TFT_Black_Bkgr);
 800f61c:	2363      	movs	r3, #99	; 0x63
 800f61e:	9300      	str	r3, [sp, #0]
 800f620:	f240 120f 	movw	r2, #271	; 0x10f
 800f624:	f240 13a9 	movw	r3, #425	; 0x1a9
 800f628:	2128      	movs	r1, #40	; 0x28
 800f62a:	2000      	movs	r0, #0
 800f62c:	f00e fe6d 	bl	801e30a <TFT_FillRectangle>
	}
}
 800f630:	b003      	add	sp, #12
 800f632:	f85d fb04 	ldr.w	pc, [sp], #4
			|| preGUI_screen_state !=Measure3_Screen)) || (GUI_screen_state == Graph_Screen) 
 800f636:	2a04      	cmp	r2, #4
 800f638:	d005      	beq.n	800f646 <GUI_Panels+0x5e>
			|| (GUI_screen_state >= DataSet1_Screen && preGUI_screen_state < DataSet1_Screen)
 800f63a:	2a06      	cmp	r2, #6
 800f63c:	d9e0      	bls.n	800f600 <GUI_Panels+0x18>
 800f63e:	4b08      	ldr	r3, [pc, #32]	; (800f660 <GUI_Panels+0x78>)
 800f640:	781b      	ldrb	r3, [r3, #0]
 800f642:	2b06      	cmp	r3, #6
 800f644:	d8dc      	bhi.n	800f600 <GUI_Panels+0x18>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800f646:	2063      	movs	r0, #99	; 0x63
 800f648:	f00e fc60 	bl	801df0c <TFT_FillScreen_DMA>
		GUI_Up_Panel();
 800f64c:	f7ff ff64 	bl	800f518 <GUI_Up_Panel>
}
 800f650:	b003      	add	sp, #12
 800f652:	f85d eb04 	ldr.w	lr, [sp], #4
		GUI_Down_Panel();
 800f656:	f7ff bf83 	b.w	800f560 <GUI_Down_Panel>
 800f65a:	bf00      	nop
 800f65c:	20004c71 	.word	0x20004c71
 800f660:	2000022a 	.word	0x2000022a

0800f664 <GUI_DataSet1_Screen>:
{
 800f664:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 800f666:	4b28      	ldr	r3, [pc, #160]	; (800f708 <GUI_DataSet1_Screen+0xa4>)
 800f668:	4c28      	ldr	r4, [pc, #160]	; (800f70c <GUI_DataSet1_Screen+0xa8>)
 800f66a:	4d29      	ldr	r5, [pc, #164]	; (800f710 <GUI_DataSet1_Screen+0xac>)
 800f66c:	2202      	movs	r2, #2
 800f66e:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Mode_EL_Old != Mode_EL || Language_status_prev != Language_status){
 800f670:	4b28      	ldr	r3, [pc, #160]	; (800f714 <GUI_DataSet1_Screen+0xb0>)
 800f672:	4a29      	ldr	r2, [pc, #164]	; (800f718 <GUI_DataSet1_Screen+0xb4>)
 800f674:	781b      	ldrb	r3, [r3, #0]
 800f676:	7812      	ldrb	r2, [r2, #0]
 800f678:	429a      	cmp	r2, r3
 800f67a:	4a28      	ldr	r2, [pc, #160]	; (800f71c <GUI_DataSet1_Screen+0xb8>)
 800f67c:	4b28      	ldr	r3, [pc, #160]	; (800f720 <GUI_DataSet1_Screen+0xbc>)
 800f67e:	d107      	bne.n	800f690 <GUI_DataSet1_Screen+0x2c>
 800f680:	7810      	ldrb	r0, [r2, #0]
 800f682:	7821      	ldrb	r1, [r4, #0]
 800f684:	4288      	cmp	r0, r1
 800f686:	d103      	bne.n	800f690 <GUI_DataSet1_Screen+0x2c>
 800f688:	7818      	ldrb	r0, [r3, #0]
 800f68a:	7829      	ldrb	r1, [r5, #0]
 800f68c:	4288      	cmp	r0, r1
 800f68e:	d027      	beq.n	800f6e0 <GUI_DataSet1_Screen+0x7c>
		Mode_EL_Old = Mode_EL;
 800f690:	7821      	ldrb	r1, [r4, #0]
 800f692:	7011      	strb	r1, [r2, #0]
		Language_status_prev = Language_status;
 800f694:	782a      	ldrb	r2, [r5, #0]
 800f696:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800f698:	f7ff ffa6 	bl	800f5e8 <GUI_Panels>
		Prev_Inf_Screen2 = DataSet1_Screen;
 800f69c:	4b21      	ldr	r3, [pc, #132]	; (800f724 <GUI_DataSet1_Screen+0xc0>)
 800f69e:	2207      	movs	r2, #7
 800f6a0:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800f6a2:	782b      	ldrb	r3, [r5, #0]
 800f6a4:	bb0b      	cbnz	r3, 800f6ea <GUI_DataSet1_Screen+0x86>
			GUI_OptionMenuRu();
 800f6a6:	f7ff fb7b 	bl	800eda0 <GUI_OptionMenuRu>
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800f6aa:	7823      	ldrb	r3, [r4, #0]
 800f6ac:	f240 1151 	movw	r1, #337	; 0x151
 800f6b0:	200a      	movs	r0, #10
 800f6b2:	b1bb      	cbz	r3, 800f6e4 <GUI_DataSet1_Screen+0x80>
 800f6b4:	f00b f814 	bl	801a6e0 <GUI_TextRu_Illuminance>
		GUI_CheckBox(200, 327, Measure_Field&Illuminance);
 800f6b8:	4b1b      	ldr	r3, [pc, #108]	; (800f728 <GUI_DataSet1_Screen+0xc4>)
 800f6ba:	881a      	ldrh	r2, [r3, #0]
 800f6bc:	f240 1147 	movw	r1, #327	; 0x147
 800f6c0:	f002 0201 	and.w	r2, r2, #1
 800f6c4:	20c8      	movs	r0, #200	; 0xc8
 800f6c6:	f005 fdc3 	bl	8015250 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800f6ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	f240 1379 	movw	r3, #377	; 0x179
 800f6d4:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f6d8:	4619      	mov	r1, r3
 800f6da:	200a      	movs	r0, #10
 800f6dc:	f00e fdb8 	bl	801e250 <TFT_DrawLine>
}
 800f6e0:	b003      	add	sp, #12
 800f6e2:	bd30      	pop	{r4, r5, pc}
			Mode_EL ? GUI_TextRu_Illuminance(10, 337):GUI_TextRu_Luminance(10, 337);
 800f6e4:	f00b fdc2 	bl	801b26c <GUI_TextRu_Luminance>
 800f6e8:	e7e6      	b.n	800f6b8 <GUI_DataSet1_Screen+0x54>
		else if (Language_status == En) {
 800f6ea:	2b01      	cmp	r3, #1
 800f6ec:	d1e4      	bne.n	800f6b8 <GUI_DataSet1_Screen+0x54>
			GUI_OptionMenuEn();
 800f6ee:	f7ff fbc7 	bl	800ee80 <GUI_OptionMenuEn>
			Mode_EL ? GUI_TextEn_Illuminance(10, 339):GUI_TextEn_Luminance(10, 339);
 800f6f2:	7823      	ldrb	r3, [r4, #0]
 800f6f4:	f240 1153 	movw	r1, #339	; 0x153
 800f6f8:	200a      	movs	r0, #10
 800f6fa:	b113      	cbz	r3, 800f702 <GUI_DataSet1_Screen+0x9e>
 800f6fc:	f00a f916 	bl	801992c <GUI_TextEn_Illuminance>
 800f700:	e7da      	b.n	800f6b8 <GUI_DataSet1_Screen+0x54>
 800f702:	f00a f8bd 	bl	8019880 <GUI_TextEn_Luminance>
 800f706:	e7d7      	b.n	800f6b8 <GUI_DataSet1_Screen+0x54>
 800f708:	20000230 	.word	0x20000230
 800f70c:	20000a48 	.word	0x20000a48
 800f710:	20004c73 	.word	0x20004c73
 800f714:	2000022a 	.word	0x2000022a
 800f718:	20004c71 	.word	0x20004c71
 800f71c:	2008bceb 	.word	0x2008bceb
 800f720:	2008bce4 	.word	0x2008bce4
 800f724:	2008c288 	.word	0x2008c288
 800f728:	20004c76 	.word	0x20004c76

0800f72c <GUI_DataSet2_Screen>:
{
 800f72c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f72e:	4b66      	ldr	r3, [pc, #408]	; (800f8c8 <GUI_DataSet2_Screen+0x19c>)
 800f730:	4a66      	ldr	r2, [pc, #408]	; (800f8cc <GUI_DataSet2_Screen+0x1a0>)
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	7812      	ldrb	r2, [r2, #0]
 800f736:	429a      	cmp	r2, r3
 800f738:	f000 80c3 	beq.w	800f8c2 <GUI_DataSet2_Screen+0x196>
			GUI_Panels();
 800f73c:	f7ff ff54 	bl	800f5e8 <GUI_Panels>
			if(Language_status == Ru){
 800f740:	4b63      	ldr	r3, [pc, #396]	; (800f8d0 <GUI_DataSet2_Screen+0x1a4>)
 800f742:	781b      	ldrb	r3, [r3, #0]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d172      	bne.n	800f82e <GUI_DataSet2_Screen+0x102>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800f748:	4b62      	ldr	r3, [pc, #392]	; (800f8d4 <GUI_DataSet2_Screen+0x1a8>)
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	2152      	movs	r1, #82	; 0x52
 800f74e:	2012      	movs	r0, #18
 800f750:	2b00      	cmp	r3, #0
 800f752:	d069      	beq.n	800f828 <GUI_DataSet2_Screen+0xfc>
 800f754:	f00b fd20 	bl	801b198 <GUI_TextRu_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800f758:	4c5f      	ldr	r4, [pc, #380]	; (800f8d8 <GUI_DataSet2_Screen+0x1ac>)
 800f75a:	8822      	ldrh	r2, [r4, #0]
 800f75c:	2146      	movs	r1, #70	; 0x46
 800f75e:	f002 0202 	and.w	r2, r2, #2
 800f762:	20c8      	movs	r0, #200	; 0xc8
 800f764:	f005 fd74 	bl	8015250 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f768:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f76c:	2378      	movs	r3, #120	; 0x78
 800f76e:	4619      	mov	r1, r3
 800f770:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f774:	200a      	movs	r0, #10
 800f776:	9500      	str	r5, [sp, #0]
 800f778:	f00e fd6a 	bl	801e250 <TFT_DrawLine>
				GUI_TextRu_PPF(10, 145);
 800f77c:	2191      	movs	r1, #145	; 0x91
 800f77e:	200a      	movs	r0, #10
 800f780:	f00b f818 	bl	801a7b4 <GUI_TextRu_PPF>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800f784:	8822      	ldrh	r2, [r4, #0]
 800f786:	2185      	movs	r1, #133	; 0x85
 800f788:	f002 0204 	and.w	r2, r2, #4
 800f78c:	20c8      	movs	r0, #200	; 0xc8
 800f78e:	f005 fd5f 	bl	8015250 <GUI_CheckBox>
				GUI_TextRu_PPF_RGB(10, 209);
 800f792:	21d1      	movs	r1, #209	; 0xd1
 800f794:	200a      	movs	r0, #10
 800f796:	f00b f831 	bl	801a7fc <GUI_TextRu_PPF_RGB>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800f79a:	8822      	ldrh	r2, [r4, #0]
 800f79c:	21c6      	movs	r1, #198	; 0xc6
 800f79e:	f002 0208 	and.w	r2, r2, #8
 800f7a2:	20c8      	movs	r0, #200	; 0xc8
 800f7a4:	f005 fd54 	bl	8015250 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f7a8:	23f8      	movs	r3, #248	; 0xf8
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	200a      	movs	r0, #10
 800f7ae:	9500      	str	r5, [sp, #0]
 800f7b0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f7b4:	f00e fd4c 	bl	801e250 <TFT_DrawLine>
				GUI_TextRu_CCT(20, 275);
 800f7b8:	f240 1113 	movw	r1, #275	; 0x113
 800f7bc:	2014      	movs	r0, #20
 800f7be:	f00b fa99 	bl	801acf4 <GUI_TextRu_CCT>
				GUI_CheckBox(200, 263, Measure_Field&CCT);
 800f7c2:	8822      	ldrh	r2, [r4, #0]
 800f7c4:	f240 1107 	movw	r1, #263	; 0x107
 800f7c8:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800f7cc:	20c8      	movs	r0, #200	; 0xc8
 800f7ce:	f005 fd3f 	bl	8015250 <GUI_CheckBox>
				TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f7d2:	f240 1339 	movw	r3, #313	; 0x139
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f7dc:	9500      	str	r5, [sp, #0]
 800f7de:	200a      	movs	r0, #10
 800f7e0:	f00e fd36 	bl	801e250 <TFT_DrawLine>
				GUI_Text_deltaE(20, 337);
 800f7e4:	f240 1151 	movw	r1, #337	; 0x151
 800f7e8:	2014      	movs	r0, #20
 800f7ea:	f009 fb51 	bl	8018e90 <GUI_Text_deltaE>
				GUI_CheckBox(200, 327, Measure_Field&delta_E);
 800f7ee:	8822      	ldrh	r2, [r4, #0]
 800f7f0:	f240 1147 	movw	r1, #327	; 0x147
 800f7f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f7f8:	20c8      	movs	r0, #200	; 0xc8
 800f7fa:	f005 fd29 	bl	8015250 <GUI_CheckBox>
				TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800f7fe:	f240 1379 	movw	r3, #377	; 0x179
 800f802:	4619      	mov	r1, r3
 800f804:	9500      	str	r5, [sp, #0]
 800f806:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f80a:	200a      	movs	r0, #10
 800f80c:	f00e fd20 	bl	801e250 <TFT_DrawLine>
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800f810:	8822      	ldrh	r2, [r4, #0]
 800f812:	2300      	movs	r3, #0
 800f814:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f818:	f240 1147 	movw	r1, #327	; 0x147
 800f81c:	2082      	movs	r0, #130	; 0x82
}
 800f81e:	b003      	add	sp, #12
 800f820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 800f824:	f005 bbf4 	b.w	8015010 <GUI_Button_Measure_deltaE_Small>
				Mode_EL ? 	GUI_TextRu_Irradiance(18, 82):GUI_TextRu_Radiance(18, 82);
 800f828:	f00b fd68 	bl	801b2fc <GUI_TextRu_Radiance>
 800f82c:	e794      	b.n	800f758 <GUI_DataSet2_Screen+0x2c>
			else if(Language_status == En){
 800f82e:	2b01      	cmp	r3, #1
 800f830:	d147      	bne.n	800f8c2 <GUI_DataSet2_Screen+0x196>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800f832:	4d28      	ldr	r5, [pc, #160]	; (800f8d4 <GUI_DataSet2_Screen+0x1a8>)
 800f834:	782a      	ldrb	r2, [r5, #0]
 800f836:	2154      	movs	r1, #84	; 0x54
 800f838:	2012      	movs	r0, #18
 800f83a:	2a00      	cmp	r2, #0
 800f83c:	d03b      	beq.n	800f8b6 <GUI_DataSet2_Screen+0x18a>
 800f83e:	f009 fe0b 	bl	8019458 <GUI_TextEn_Irradiance>
				GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 800f842:	4c25      	ldr	r4, [pc, #148]	; (800f8d8 <GUI_DataSet2_Screen+0x1ac>)
 800f844:	8822      	ldrh	r2, [r4, #0]
 800f846:	2146      	movs	r1, #70	; 0x46
 800f848:	f002 0202 	and.w	r2, r2, #2
 800f84c:	20c8      	movs	r0, #200	; 0xc8
 800f84e:	f005 fcff 	bl	8015250 <GUI_CheckBox>
				TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f856:	9300      	str	r3, [sp, #0]
 800f858:	2378      	movs	r3, #120	; 0x78
 800f85a:	4619      	mov	r1, r3
 800f85c:	200a      	movs	r0, #10
 800f85e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f862:	f00e fcf5 	bl	801e250 <TFT_DrawLine>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800f866:	782b      	ldrb	r3, [r5, #0]
 800f868:	2193      	movs	r1, #147	; 0x93
 800f86a:	200a      	movs	r0, #10
 800f86c:	b333      	cbz	r3, 800f8bc <GUI_DataSet2_Screen+0x190>
 800f86e:	f00a f8f3 	bl	8019a58 <GUI_TextEn_PPFD>
				GUI_CheckBox(200, 133, Measure_Field&PPFD);
 800f872:	8822      	ldrh	r2, [r4, #0]
 800f874:	2185      	movs	r1, #133	; 0x85
 800f876:	f002 0204 	and.w	r2, r2, #4
 800f87a:	20c8      	movs	r0, #200	; 0xc8
 800f87c:	f005 fce8 	bl	8015250 <GUI_CheckBox>
				GUI_TextEn_B_G_R_FR(10, 211);
 800f880:	21d3      	movs	r1, #211	; 0xd3
 800f882:	200a      	movs	r0, #10
 800f884:	f00a f9a2 	bl	8019bcc <GUI_TextEn_B_G_R_FR>
				GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 800f888:	8822      	ldrh	r2, [r4, #0]
 800f88a:	21c6      	movs	r1, #198	; 0xc6
 800f88c:	f002 0208 	and.w	r2, r2, #8
 800f890:	20c8      	movs	r0, #200	; 0xc8
 800f892:	f005 fcdd 	bl	8015250 <GUI_CheckBox>
				TFT_DrawLine(10, 248, 262, 248, TFT_White);
 800f896:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f89a:	23f8      	movs	r3, #248	; 0xf8
 800f89c:	4619      	mov	r1, r3
 800f89e:	9500      	str	r5, [sp, #0]
 800f8a0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f8a4:	200a      	movs	r0, #10
 800f8a6:	f00e fcd3 	bl	801e250 <TFT_DrawLine>
				GUI_TextEn_CCT(20, 277);
 800f8aa:	f240 1115 	movw	r1, #277	; 0x115
 800f8ae:	2014      	movs	r0, #20
 800f8b0:	f00a f9d4 	bl	8019c5c <GUI_TextEn_CCT>
 800f8b4:	e785      	b.n	800f7c2 <GUI_DataSet2_Screen+0x96>
				Mode_EL ? 	GUI_TextEn_Irradiance(18, 84) : GUI_TextEn_Radiance(18, 84);
 800f8b6:	f009 fd81 	bl	80193bc <GUI_TextEn_Radiance>
 800f8ba:	e7c2      	b.n	800f842 <GUI_DataSet2_Screen+0x116>
				Mode_EL ?  GUI_TextEn_PPFD(10, 147) : GUI_TextEn_PPL(10, 147);
 800f8bc:	f00a f8f8 	bl	8019ab0 <GUI_TextEn_PPL>
 800f8c0:	e7d7      	b.n	800f872 <GUI_DataSet2_Screen+0x146>
}
 800f8c2:	b003      	add	sp, #12
 800f8c4:	bd30      	pop	{r4, r5, pc}
 800f8c6:	bf00      	nop
 800f8c8:	2000022a 	.word	0x2000022a
 800f8cc:	20004c71 	.word	0x20004c71
 800f8d0:	20004c73 	.word	0x20004c73
 800f8d4:	20000a48 	.word	0x20000a48
 800f8d8:	20004c76 	.word	0x20004c76

0800f8dc <GUI_DataSet3_Screen>:
{
 800f8dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f8de:	4b35      	ldr	r3, [pc, #212]	; (800f9b4 <GUI_DataSet3_Screen+0xd8>)
 800f8e0:	4a35      	ldr	r2, [pc, #212]	; (800f9b8 <GUI_DataSet3_Screen+0xdc>)
 800f8e2:	781b      	ldrb	r3, [r3, #0]
 800f8e4:	7812      	ldrb	r2, [r2, #0]
 800f8e6:	429a      	cmp	r2, r3
 800f8e8:	d061      	beq.n	800f9ae <GUI_DataSet3_Screen+0xd2>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800f8ea:	4c34      	ldr	r4, [pc, #208]	; (800f9bc <GUI_DataSet3_Screen+0xe0>)
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800f8ec:	4e34      	ldr	r6, [pc, #208]	; (800f9c0 <GUI_DataSet3_Screen+0xe4>)
		GUI_Panels();
 800f8ee:	f7ff fe7b 	bl	800f5e8 <GUI_Panels>
		GUI_Text_CIE_XYZ(20, 82);
 800f8f2:	2152      	movs	r1, #82	; 0x52
 800f8f4:	2014      	movs	r0, #20
 800f8f6:	f008 feff 	bl	80186f8 <GUI_Text_CIE_XYZ>
		GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 800f8fa:	8822      	ldrh	r2, [r4, #0]
 800f8fc:	2146      	movs	r1, #70	; 0x46
 800f8fe:	f002 0210 	and.w	r2, r2, #16
 800f902:	20c8      	movs	r0, #200	; 0xc8
 800f904:	f005 fca4 	bl	8015250 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800f908:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800f90c:	2378      	movs	r3, #120	; 0x78
 800f90e:	4619      	mov	r1, r3
 800f910:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f914:	200a      	movs	r0, #10
 800f916:	9500      	str	r5, [sp, #0]
 800f918:	f00e fc9a 	bl	801e250 <TFT_DrawLine>
		GUI_Text_CIE_xy(20, 145);
 800f91c:	2191      	movs	r1, #145	; 0x91
 800f91e:	2014      	movs	r0, #20
 800f920:	f009 f996 	bl	8018c50 <GUI_Text_CIE_xy>
		GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 800f924:	8822      	ldrh	r2, [r4, #0]
 800f926:	2185      	movs	r1, #133	; 0x85
 800f928:	f002 0220 	and.w	r2, r2, #32
 800f92c:	20c8      	movs	r0, #200	; 0xc8
 800f92e:	f005 fc8f 	bl	8015250 <GUI_CheckBox>
		GUI_Text_CIE_xy_1931(35, 209);
 800f932:	21d1      	movs	r1, #209	; 0xd1
 800f934:	2023      	movs	r0, #35	; 0x23
 800f936:	f008 ff19 	bl	801876c <GUI_Text_CIE_xy_1931>
		GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 800f93a:	8823      	ldrh	r3, [r4, #0]
 800f93c:	7832      	ldrb	r2, [r6, #0]
 800f93e:	f003 0320 	and.w	r3, r3, #32
 800f942:	f002 0201 	and.w	r2, r2, #1
 800f946:	21c6      	movs	r1, #198	; 0xc6
 800f948:	20c8      	movs	r0, #200	; 0xc8
 800f94a:	f005 fcc2 	bl	80152d2 <GUI_RadioBox>
		GUI_Text_CIE_xy_1964(35, 275);
 800f94e:	f240 1113 	movw	r1, #275	; 0x113
 800f952:	2023      	movs	r0, #35	; 0x23
 800f954:	f008 ff6a 	bl	801882c <GUI_Text_CIE_xy_1964>
		GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 800f958:	7832      	ldrb	r2, [r6, #0]
 800f95a:	8823      	ldrh	r3, [r4, #0]
 800f95c:	43d2      	mvns	r2, r2
 800f95e:	f003 0320 	and.w	r3, r3, #32
 800f962:	f002 0201 	and.w	r2, r2, #1
 800f966:	f240 1107 	movw	r1, #263	; 0x107
 800f96a:	20c8      	movs	r0, #200	; 0xc8
 800f96c:	f005 fcb1 	bl	80152d2 <GUI_RadioBox>
		TFT_DrawLine(10, 313, 262, 313, TFT_White);
 800f970:	f240 1339 	movw	r3, #313	; 0x139
 800f974:	4619      	mov	r1, r3
 800f976:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f97a:	200a      	movs	r0, #10
 800f97c:	9500      	str	r5, [sp, #0]
 800f97e:	f00e fc67 	bl	801e250 <TFT_DrawLine>
		GUI_Text_CIE_Luv(20, 337);
 800f982:	f240 1151 	movw	r1, #337	; 0x151
 800f986:	2014      	movs	r0, #20
 800f988:	f008 ffb0 	bl	80188ec <GUI_Text_CIE_Luv>
		GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 800f98c:	8822      	ldrh	r2, [r4, #0]
 800f98e:	f240 1147 	movw	r1, #327	; 0x147
 800f992:	f002 0240 	and.w	r2, r2, #64	; 0x40
 800f996:	20c8      	movs	r0, #200	; 0xc8
 800f998:	f005 fc5a 	bl	8015250 <GUI_CheckBox>
		TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800f99c:	f240 1379 	movw	r3, #377	; 0x179
 800f9a0:	9500      	str	r5, [sp, #0]
 800f9a2:	f44f 7283 	mov.w	r2, #262	; 0x106
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	200a      	movs	r0, #10
 800f9aa:	f00e fc51 	bl	801e250 <TFT_DrawLine>
}
 800f9ae:	b002      	add	sp, #8
 800f9b0:	bd70      	pop	{r4, r5, r6, pc}
 800f9b2:	bf00      	nop
 800f9b4:	2000022a 	.word	0x2000022a
 800f9b8:	20004c71 	.word	0x20004c71
 800f9bc:	20004c76 	.word	0x20004c76
 800f9c0:	20004c74 	.word	0x20004c74

0800f9c4 <GUI_DataSet4_Screen>:
{
 800f9c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800f9c6:	4b4b      	ldr	r3, [pc, #300]	; (800faf4 <GUI_DataSet4_Screen+0x130>)
 800f9c8:	4a4b      	ldr	r2, [pc, #300]	; (800faf8 <GUI_DataSet4_Screen+0x134>)
 800f9ca:	781b      	ldrb	r3, [r3, #0]
 800f9cc:	7812      	ldrb	r2, [r2, #0]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	f000 808b 	beq.w	800faea <GUI_DataSet4_Screen+0x126>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800f9d4:	4c49      	ldr	r4, [pc, #292]	; (800fafc <GUI_DataSet4_Screen+0x138>)
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800f9d6:	4d4a      	ldr	r5, [pc, #296]	; (800fb00 <GUI_DataSet4_Screen+0x13c>)
		GUI_Panels();
 800f9d8:	f7ff fe06 	bl	800f5e8 <GUI_Panels>
		GUI_Text_CIE_Lab(20, 80);
 800f9dc:	2150      	movs	r1, #80	; 0x50
 800f9de:	2014      	movs	r0, #20
 800f9e0:	f008 ffd2 	bl	8018988 <GUI_Text_CIE_Lab>
		GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 800f9e4:	8822      	ldrh	r2, [r4, #0]
 800f9e6:	2141      	movs	r1, #65	; 0x41
 800f9e8:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800f9ec:	20c8      	movs	r0, #200	; 0xc8
 800f9ee:	f005 fc2f 	bl	8015250 <GUI_CheckBox>
		GUI_Text_A(40, 115);
 800f9f2:	2173      	movs	r1, #115	; 0x73
 800f9f4:	2028      	movs	r0, #40	; 0x28
 800f9f6:	f009 f86f 	bl	8018ad8 <GUI_Text_A>
		GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 800f9fa:	8823      	ldrh	r3, [r4, #0]
 800f9fc:	782a      	ldrb	r2, [r5, #0]
 800f9fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa02:	f002 0201 	and.w	r2, r2, #1
 800fa06:	216c      	movs	r1, #108	; 0x6c
 800fa08:	20c8      	movs	r0, #200	; 0xc8
 800fa0a:	f005 fc62 	bl	80152d2 <GUI_RadioBox>
		GUI_Text_D65(40, 150);
 800fa0e:	2196      	movs	r1, #150	; 0x96
 800fa10:	2028      	movs	r0, #40	; 0x28
 800fa12:	f009 f877 	bl	8018b04 <GUI_Text_D65>
		GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 800fa16:	8823      	ldrh	r3, [r4, #0]
 800fa18:	782a      	ldrb	r2, [r5, #0]
 800fa1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa1e:	f002 0202 	and.w	r2, r2, #2
 800fa22:	218f      	movs	r1, #143	; 0x8f
 800fa24:	20c8      	movs	r0, #200	; 0xc8
 800fa26:	f005 fc54 	bl	80152d2 <GUI_RadioBox>
		GUI_Text_C(40, 185);
 800fa2a:	21b9      	movs	r1, #185	; 0xb9
 800fa2c:	2028      	movs	r0, #40	; 0x28
 800fa2e:	f009 f88d 	bl	8018b4c <GUI_Text_C>
		GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 800fa32:	8823      	ldrh	r3, [r4, #0]
 800fa34:	782a      	ldrb	r2, [r5, #0]
 800fa36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa3a:	f002 0204 	and.w	r2, r2, #4
 800fa3e:	21b2      	movs	r1, #178	; 0xb2
 800fa40:	20c8      	movs	r0, #200	; 0xc8
 800fa42:	f005 fc46 	bl	80152d2 <GUI_RadioBox>
		GUI_Text_D50(40, 220);
 800fa46:	21dc      	movs	r1, #220	; 0xdc
 800fa48:	2028      	movs	r0, #40	; 0x28
 800fa4a:	f009 f895 	bl	8018b78 <GUI_Text_D50>
		GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 800fa4e:	8823      	ldrh	r3, [r4, #0]
 800fa50:	782a      	ldrb	r2, [r5, #0]
 800fa52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa56:	f002 0208 	and.w	r2, r2, #8
 800fa5a:	21d5      	movs	r1, #213	; 0xd5
 800fa5c:	20c8      	movs	r0, #200	; 0xc8
 800fa5e:	f005 fc38 	bl	80152d2 <GUI_RadioBox>
		GUI_Text_D55(40, 255);
 800fa62:	21ff      	movs	r1, #255	; 0xff
 800fa64:	2028      	movs	r0, #40	; 0x28
 800fa66:	f009 f8ab 	bl	8018bc0 <GUI_Text_D55>
		GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 800fa6a:	8823      	ldrh	r3, [r4, #0]
 800fa6c:	782a      	ldrb	r2, [r5, #0]
 800fa6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa72:	f002 0210 	and.w	r2, r2, #16
 800fa76:	21f8      	movs	r1, #248	; 0xf8
 800fa78:	20c8      	movs	r0, #200	; 0xc8
 800fa7a:	f005 fc2a 	bl	80152d2 <GUI_RadioBox>
		GUI_Text_D75(40, 290);
 800fa7e:	f44f 7191 	mov.w	r1, #290	; 0x122
 800fa82:	2028      	movs	r0, #40	; 0x28
 800fa84:	f009 f8c0 	bl	8018c08 <GUI_Text_D75>
		GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 800fa88:	8823      	ldrh	r3, [r4, #0]
 800fa8a:	782a      	ldrb	r2, [r5, #0]
 800fa8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fa90:	f002 0220 	and.w	r2, r2, #32
 800fa94:	f240 111b 	movw	r1, #283	; 0x11b
 800fa98:	20c8      	movs	r0, #200	; 0xc8
 800fa9a:	f005 fc1a 	bl	80152d2 <GUI_RadioBox>
		TFT_DrawLine(10, 330, 262, 330, TFT_White);
 800fa9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800faa2:	9300      	str	r3, [sp, #0]
 800faa4:	f44f 73a5 	mov.w	r3, #330	; 0x14a
 800faa8:	4619      	mov	r1, r3
 800faaa:	200a      	movs	r0, #10
 800faac:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fab0:	f00e fbce 	bl	801e250 <TFT_DrawLine>
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 800fab4:	4b13      	ldr	r3, [pc, #76]	; (800fb04 <GUI_DataSet4_Screen+0x140>)
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800fabc:	2014      	movs	r0, #20
 800fabe:	b1b3      	cbz	r3, 800faee <GUI_DataSet4_Screen+0x12a>
 800fac0:	f009 fb40 	bl	8019144 <GUI_Text_EbEr>
		GUI_CheckBox(200, 345, Measure_Field&EbEr);
 800fac4:	8822      	ldrh	r2, [r4, #0]
 800fac6:	f240 1159 	movw	r1, #345	; 0x159
 800faca:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800face:	20c8      	movs	r0, #200	; 0xc8
 800fad0:	f005 fbbe 	bl	8015250 <GUI_CheckBox>
		TFT_DrawLine(10, 390, 262, 390, TFT_White);
 800fad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fad8:	9300      	str	r3, [sp, #0]
 800fada:	f44f 73c3 	mov.w	r3, #390	; 0x186
 800fade:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fae2:	4619      	mov	r1, r3
 800fae4:	200a      	movs	r0, #10
 800fae6:	f00e fbb3 	bl	801e250 <TFT_DrawLine>
}
 800faea:	b003      	add	sp, #12
 800faec:	bd30      	pop	{r4, r5, pc}
		Mode_EL ? GUI_Text_EbEr(20, 360) : GUI_Text_LbLr(20, 360);
 800faee:	f009 fb63 	bl	80191b8 <GUI_Text_LbLr>
 800faf2:	e7e7      	b.n	800fac4 <GUI_DataSet4_Screen+0x100>
 800faf4:	2000022a 	.word	0x2000022a
 800faf8:	20004c71 	.word	0x20004c71
 800fafc:	20004c76 	.word	0x20004c76
 800fb00:	2008bce9 	.word	0x2008bce9
 800fb04:	20000a48 	.word	0x20000a48

0800fb08 <GUI_DataSet5_Screen>:
{
 800fb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fb0a:	4b19      	ldr	r3, [pc, #100]	; (800fb70 <GUI_DataSet5_Screen+0x68>)
 800fb0c:	4a19      	ldr	r2, [pc, #100]	; (800fb74 <GUI_DataSet5_Screen+0x6c>)
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	7812      	ldrb	r2, [r2, #0]
 800fb12:	429a      	cmp	r2, r3
 800fb14:	d02a      	beq.n	800fb6c <GUI_DataSet5_Screen+0x64>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 800fb16:	4d18      	ldr	r5, [pc, #96]	; (800fb78 <GUI_DataSet5_Screen+0x70>)
		GUI_Panels();
 800fb18:	f7ff fd66 	bl	800f5e8 <GUI_Panels>
		GUI_Text_lambda_d(35, 86);
 800fb1c:	2156      	movs	r1, #86	; 0x56
 800fb1e:	2023      	movs	r0, #35	; 0x23
 800fb20:	f009 f93c 	bl	8018d9c <GUI_Text_lambda_d>
		GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 800fb24:	882a      	ldrh	r2, [r5, #0]
 800fb26:	2146      	movs	r1, #70	; 0x46
 800fb28:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800fb2c:	20c8      	movs	r0, #200	; 0xc8
 800fb2e:	f005 fb8f 	bl	8015250 <GUI_CheckBox>
		TFT_DrawLine(10, 120, 262, 120, TFT_White);
 800fb32:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fb36:	2378      	movs	r3, #120	; 0x78
 800fb38:	4619      	mov	r1, r3
 800fb3a:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fb3e:	200a      	movs	r0, #10
 800fb40:	9400      	str	r4, [sp, #0]
 800fb42:	f00e fb85 	bl	801e250 <TFT_DrawLine>
		GUI_Text_SP(35, 145);
 800fb46:	2191      	movs	r1, #145	; 0x91
 800fb48:	2023      	movs	r0, #35	; 0x23
 800fb4a:	f009 f903 	bl	8018d54 <GUI_Text_SP>
		GUI_CheckBox(200, 133, Measure_Field&SP_measure);
 800fb4e:	882a      	ldrh	r2, [r5, #0]
 800fb50:	2185      	movs	r1, #133	; 0x85
 800fb52:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800fb56:	20c8      	movs	r0, #200	; 0xc8
 800fb58:	f005 fb7a 	bl	8015250 <GUI_CheckBox>
		TFT_DrawLine(10, 183, 262, 183, TFT_White);
 800fb5c:	23b7      	movs	r3, #183	; 0xb7
 800fb5e:	9400      	str	r4, [sp, #0]
 800fb60:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fb64:	4619      	mov	r1, r3
 800fb66:	200a      	movs	r0, #10
 800fb68:	f00e fb72 	bl	801e250 <TFT_DrawLine>
}
 800fb6c:	b003      	add	sp, #12
 800fb6e:	bd30      	pop	{r4, r5, pc}
 800fb70:	2000022a 	.word	0x2000022a
 800fb74:	20004c71 	.word	0x20004c71
 800fb78:	20004c76 	.word	0x20004c76

0800fb7c <GUI_GraphSet1_Screen>:
{
 800fb7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fb7e:	4b1d      	ldr	r3, [pc, #116]	; (800fbf4 <GUI_GraphSet1_Screen+0x78>)
 800fb80:	4a1d      	ldr	r2, [pc, #116]	; (800fbf8 <GUI_GraphSet1_Screen+0x7c>)
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	7812      	ldrb	r2, [r2, #0]
 800fb86:	4c1d      	ldr	r4, [pc, #116]	; (800fbfc <GUI_GraphSet1_Screen+0x80>)
 800fb88:	4d1d      	ldr	r5, [pc, #116]	; (800fc00 <GUI_GraphSet1_Screen+0x84>)
 800fb8a:	429a      	cmp	r2, r3
 800fb8c:	d103      	bne.n	800fb96 <GUI_GraphSet1_Screen+0x1a>
 800fb8e:	7822      	ldrb	r2, [r4, #0]
 800fb90:	782b      	ldrb	r3, [r5, #0]
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d022      	beq.n	800fbdc <GUI_GraphSet1_Screen+0x60>
		GUI_Panels();
 800fb96:	f7ff fd27 	bl	800f5e8 <GUI_Panels>
		Language_status_prev = Language_status;
 800fb9a:	782b      	ldrb	r3, [r5, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 800fb9c:	4a19      	ldr	r2, [pc, #100]	; (800fc04 <GUI_GraphSet1_Screen+0x88>)
		Language_status_prev = Language_status;
 800fb9e:	7023      	strb	r3, [r4, #0]
		Prev_Inf_Screen2 = GraphSet1_Screen;
 800fba0:	210c      	movs	r1, #12
 800fba2:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 800fba4:	b9e3      	cbnz	r3, 800fbe0 <GUI_GraphSet1_Screen+0x64>
			GUI_OptionMenuRu();
 800fba6:	f7ff f8fb 	bl	800eda0 <GUI_OptionMenuRu>
			GUI_TextRu_PPF_bands(10, 337);
 800fbaa:	f240 1151 	movw	r1, #337	; 0x151
 800fbae:	200a      	movs	r0, #10
 800fbb0:	f00a feb2 	bl	801a918 <GUI_TextRu_PPF_bands>
			GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 800fbb4:	4b14      	ldr	r3, [pc, #80]	; (800fc08 <GUI_GraphSet1_Screen+0x8c>)
 800fbb6:	781a      	ldrb	r2, [r3, #0]
 800fbb8:	f240 1147 	movw	r1, #327	; 0x147
 800fbbc:	f002 0201 	and.w	r2, r2, #1
 800fbc0:	20c8      	movs	r0, #200	; 0xc8
 800fbc2:	f005 fb45 	bl	8015250 <GUI_CheckBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fbc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fbca:	9300      	str	r3, [sp, #0]
 800fbcc:	f240 1379 	movw	r3, #377	; 0x179
 800fbd0:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fbd4:	4619      	mov	r1, r3
 800fbd6:	200a      	movs	r0, #10
 800fbd8:	f00e fb3a 	bl	801e250 <TFT_DrawLine>
}
 800fbdc:	b003      	add	sp, #12
 800fbde:	bd30      	pop	{r4, r5, pc}
		else if(Language_status == En){
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d1e7      	bne.n	800fbb4 <GUI_GraphSet1_Screen+0x38>
			GUI_OptionMenuEn();
 800fbe4:	f7ff f94c 	bl	800ee80 <GUI_OptionMenuEn>
			GUI_TextEn_PARwavebands(10, 339);
 800fbe8:	f240 1153 	movw	r1, #339	; 0x153
 800fbec:	200a      	movs	r0, #10
 800fbee:	f009 ff83 	bl	8019af8 <GUI_TextEn_PARwavebands>
 800fbf2:	e7df      	b.n	800fbb4 <GUI_GraphSet1_Screen+0x38>
 800fbf4:	2000022a 	.word	0x2000022a
 800fbf8:	20004c71 	.word	0x20004c71
 800fbfc:	2008bce4 	.word	0x2008bce4
 800fc00:	20004c73 	.word	0x20004c73
 800fc04:	2008c288 	.word	0x2008c288
 800fc08:	20004c72 	.word	0x20004c72

0800fc0c <GUI_GraphSet2_Screen>:
{
 800fc0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fc0e:	4b19      	ldr	r3, [pc, #100]	; (800fc74 <GUI_GraphSet2_Screen+0x68>)
 800fc10:	4a19      	ldr	r2, [pc, #100]	; (800fc78 <GUI_GraphSet2_Screen+0x6c>)
 800fc12:	781b      	ldrb	r3, [r3, #0]
 800fc14:	7812      	ldrb	r2, [r2, #0]
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d02a      	beq.n	800fc70 <GUI_GraphSet2_Screen+0x64>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 800fc1a:	4d18      	ldr	r5, [pc, #96]	; (800fc7c <GUI_GraphSet2_Screen+0x70>)
		GUI_Panels();
 800fc1c:	f7ff fce4 	bl	800f5e8 <GUI_Panels>
		GUI_Text_EbEr(18, 82);
 800fc20:	2152      	movs	r1, #82	; 0x52
 800fc22:	2012      	movs	r0, #18
 800fc24:	f009 fa8e 	bl	8019144 <GUI_Text_EbEr>
		GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 800fc28:	782a      	ldrb	r2, [r5, #0]
 800fc2a:	2146      	movs	r1, #70	; 0x46
 800fc2c:	f002 0202 	and.w	r2, r2, #2
 800fc30:	20c8      	movs	r0, #200	; 0xc8
 800fc32:	f005 fb0d 	bl	8015250 <GUI_CheckBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 800fc36:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fc3a:	237a      	movs	r3, #122	; 0x7a
 800fc3c:	4619      	mov	r1, r3
 800fc3e:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fc42:	200a      	movs	r0, #10
 800fc44:	9400      	str	r4, [sp, #0]
 800fc46:	f00e fb03 	bl	801e250 <TFT_DrawLine>
		GUI_Text_V_lambda(10, 145);
 800fc4a:	2191      	movs	r1, #145	; 0x91
 800fc4c:	200a      	movs	r0, #10
 800fc4e:	f009 f8c9 	bl	8018de4 <GUI_Text_V_lambda>
		GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 800fc52:	782a      	ldrb	r2, [r5, #0]
 800fc54:	2185      	movs	r1, #133	; 0x85
 800fc56:	f002 0204 	and.w	r2, r2, #4
 800fc5a:	20c8      	movs	r0, #200	; 0xc8
 800fc5c:	f005 faf8 	bl	8015250 <GUI_CheckBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 800fc60:	23b9      	movs	r3, #185	; 0xb9
 800fc62:	9400      	str	r4, [sp, #0]
 800fc64:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fc68:	4619      	mov	r1, r3
 800fc6a:	200a      	movs	r0, #10
 800fc6c:	f00e faf0 	bl	801e250 <TFT_DrawLine>
}
 800fc70:	b003      	add	sp, #12
 800fc72:	bd30      	pop	{r4, r5, pc}
 800fc74:	2000022a 	.word	0x2000022a
 800fc78:	20004c71 	.word	0x20004c71
 800fc7c:	20004c72 	.word	0x20004c72

0800fc80 <GUI_ColorSet1_Screen>:
{
 800fc80:	b513      	push	{r0, r1, r4, lr}
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fc82:	4b1b      	ldr	r3, [pc, #108]	; (800fcf0 <GUI_ColorSet1_Screen+0x70>)
 800fc84:	4a1b      	ldr	r2, [pc, #108]	; (800fcf4 <GUI_ColorSet1_Screen+0x74>)
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	7812      	ldrb	r2, [r2, #0]
 800fc8a:	4c1b      	ldr	r4, [pc, #108]	; (800fcf8 <GUI_ColorSet1_Screen+0x78>)
 800fc8c:	429a      	cmp	r2, r3
 800fc8e:	4b1b      	ldr	r3, [pc, #108]	; (800fcfc <GUI_ColorSet1_Screen+0x7c>)
 800fc90:	d103      	bne.n	800fc9a <GUI_ColorSet1_Screen+0x1a>
 800fc92:	7819      	ldrb	r1, [r3, #0]
 800fc94:	7822      	ldrb	r2, [r4, #0]
 800fc96:	4291      	cmp	r1, r2
 800fc98:	d023      	beq.n	800fce2 <GUI_ColorSet1_Screen+0x62>
		Language_status_prev = Language_status;
 800fc9a:	7822      	ldrb	r2, [r4, #0]
 800fc9c:	701a      	strb	r2, [r3, #0]
		GUI_Panels();
 800fc9e:	f7ff fca3 	bl	800f5e8 <GUI_Panels>
		Prev_Inf_Screen2 = ColorSet1_Screen;
 800fca2:	4b17      	ldr	r3, [pc, #92]	; (800fd00 <GUI_ColorSet1_Screen+0x80>)
 800fca4:	220e      	movs	r2, #14
 800fca6:	701a      	strb	r2, [r3, #0]
		if(Language_status == Ru){
 800fca8:	7823      	ldrb	r3, [r4, #0]
 800fcaa:	b9e3      	cbnz	r3, 800fce6 <GUI_ColorSet1_Screen+0x66>
			GUI_OptionMenuRu();
 800fcac:	f7ff f878 	bl	800eda0 <GUI_OptionMenuRu>
			GUI_Text_CIE_xy(10, 337);
 800fcb0:	f240 1151 	movw	r1, #337	; 0x151
 800fcb4:	200a      	movs	r0, #10
 800fcb6:	f008 ffcb 	bl	8018c50 <GUI_Text_CIE_xy>
			GUI_RadioBox(200, 327, Color_Field&Color_CIE_xy, 0x01);
 800fcba:	4b12      	ldr	r3, [pc, #72]	; (800fd04 <GUI_ColorSet1_Screen+0x84>)
 800fcbc:	781a      	ldrb	r2, [r3, #0]
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	401a      	ands	r2, r3
 800fcc2:	f240 1147 	movw	r1, #327	; 0x147
 800fcc6:	20c8      	movs	r0, #200	; 0xc8
 800fcc8:	f005 fb03 	bl	80152d2 <GUI_RadioBox>
			TFT_DrawLine(10, 377, 262, 377, TFT_White);
 800fccc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fcd0:	9300      	str	r3, [sp, #0]
 800fcd2:	f240 1379 	movw	r3, #377	; 0x179
 800fcd6:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fcda:	4619      	mov	r1, r3
 800fcdc:	200a      	movs	r0, #10
 800fcde:	f00e fab7 	bl	801e250 <TFT_DrawLine>
}
 800fce2:	b002      	add	sp, #8
 800fce4:	bd10      	pop	{r4, pc}
		else if(Language_status == En){
 800fce6:	2b01      	cmp	r3, #1
 800fce8:	d1e2      	bne.n	800fcb0 <GUI_ColorSet1_Screen+0x30>
			GUI_OptionMenuEn();
 800fcea:	f7ff f8c9 	bl	800ee80 <GUI_OptionMenuEn>
 800fcee:	e7df      	b.n	800fcb0 <GUI_ColorSet1_Screen+0x30>
 800fcf0:	2000022a 	.word	0x2000022a
 800fcf4:	20004c71 	.word	0x20004c71
 800fcf8:	20004c73 	.word	0x20004c73
 800fcfc:	2008bce4 	.word	0x2008bce4
 800fd00:	2008c288 	.word	0x2008c288
 800fd04:	20004c6f 	.word	0x20004c6f

0800fd08 <GUI_ColorSet2_Screen>:
{
 800fd08:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if(preGUI_screen_state != GUI_screen_state){
 800fd0a:	4b1a      	ldr	r3, [pc, #104]	; (800fd74 <GUI_ColorSet2_Screen+0x6c>)
 800fd0c:	4a1a      	ldr	r2, [pc, #104]	; (800fd78 <GUI_ColorSet2_Screen+0x70>)
 800fd0e:	781b      	ldrb	r3, [r3, #0]
 800fd10:	7812      	ldrb	r2, [r2, #0]
 800fd12:	429a      	cmp	r2, r3
 800fd14:	d02c      	beq.n	800fd70 <GUI_ColorSet2_Screen+0x68>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 800fd16:	4d19      	ldr	r5, [pc, #100]	; (800fd7c <GUI_ColorSet2_Screen+0x74>)
		GUI_Panels();
 800fd18:	f7ff fc66 	bl	800f5e8 <GUI_Panels>
		GUI_Text_CIE_Luv(20, 82);
 800fd1c:	2152      	movs	r1, #82	; 0x52
 800fd1e:	2014      	movs	r0, #20
 800fd20:	f008 fde4 	bl	80188ec <GUI_Text_CIE_Luv>
		GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 800fd24:	782a      	ldrb	r2, [r5, #0]
 800fd26:	2301      	movs	r3, #1
 800fd28:	f002 0204 	and.w	r2, r2, #4
 800fd2c:	2146      	movs	r1, #70	; 0x46
 800fd2e:	20c8      	movs	r0, #200	; 0xc8
 800fd30:	f005 facf 	bl	80152d2 <GUI_RadioBox>
		TFT_DrawLine(10, 122, 262, 122, TFT_White);
 800fd34:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fd38:	237a      	movs	r3, #122	; 0x7a
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fd40:	200a      	movs	r0, #10
 800fd42:	9400      	str	r4, [sp, #0]
 800fd44:	f00e fa84 	bl	801e250 <TFT_DrawLine>
		GUI_Text_CIE_Lab(20, 145);
 800fd48:	2191      	movs	r1, #145	; 0x91
 800fd4a:	2014      	movs	r0, #20
 800fd4c:	f008 fe1c 	bl	8018988 <GUI_Text_CIE_Lab>
		GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 800fd50:	782a      	ldrb	r2, [r5, #0]
 800fd52:	2301      	movs	r3, #1
 800fd54:	f002 0202 	and.w	r2, r2, #2
 800fd58:	2185      	movs	r1, #133	; 0x85
 800fd5a:	20c8      	movs	r0, #200	; 0xc8
 800fd5c:	f005 fab9 	bl	80152d2 <GUI_RadioBox>
		TFT_DrawLine(10, 185, 262, 185, TFT_White);
 800fd60:	23b9      	movs	r3, #185	; 0xb9
 800fd62:	9400      	str	r4, [sp, #0]
 800fd64:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fd68:	4619      	mov	r1, r3
 800fd6a:	200a      	movs	r0, #10
 800fd6c:	f00e fa70 	bl	801e250 <TFT_DrawLine>
}
 800fd70:	b003      	add	sp, #12
 800fd72:	bd30      	pop	{r4, r5, pc}
 800fd74:	2000022a 	.word	0x2000022a
 800fd78:	20004c71 	.word	0x20004c71
 800fd7c:	20004c6f 	.word	0x20004c6f

0800fd80 <GUI_ColorRendSet_Screen>:
{
 800fd80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 800fd82:	4b28      	ldr	r3, [pc, #160]	; (800fe24 <GUI_ColorRendSet_Screen+0xa4>)
 800fd84:	4d28      	ldr	r5, [pc, #160]	; (800fe28 <GUI_ColorRendSet_Screen+0xa8>)
 800fd86:	4c29      	ldr	r4, [pc, #164]	; (800fe2c <GUI_ColorRendSet_Screen+0xac>)
 800fd88:	2202      	movs	r2, #2
 800fd8a:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Language_status_prev != Language_status){
 800fd8c:	4b28      	ldr	r3, [pc, #160]	; (800fe30 <GUI_ColorRendSet_Screen+0xb0>)
 800fd8e:	4a29      	ldr	r2, [pc, #164]	; (800fe34 <GUI_ColorRendSet_Screen+0xb4>)
 800fd90:	781b      	ldrb	r3, [r3, #0]
 800fd92:	7812      	ldrb	r2, [r2, #0]
 800fd94:	429a      	cmp	r2, r3
 800fd96:	d103      	bne.n	800fda0 <GUI_ColorRendSet_Screen+0x20>
 800fd98:	782a      	ldrb	r2, [r5, #0]
 800fd9a:	7823      	ldrb	r3, [r4, #0]
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d03e      	beq.n	800fe1e <GUI_ColorRendSet_Screen+0x9e>
		GUI_Panels();
 800fda0:	f7ff fc22 	bl	800f5e8 <GUI_Panels>
		Language_status_prev = Language_status;
 800fda4:	7823      	ldrb	r3, [r4, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 800fda6:	4a24      	ldr	r2, [pc, #144]	; (800fe38 <GUI_ColorRendSet_Screen+0xb8>)
		Language_status_prev = Language_status;
 800fda8:	702b      	strb	r3, [r5, #0]
		Prev_Inf_Screen2 = ColorRendSet_Screen;
 800fdaa:	2110      	movs	r1, #16
 800fdac:	7011      	strb	r1, [r2, #0]
		if(Language_status == Ru){
 800fdae:	b90b      	cbnz	r3, 800fdb4 <GUI_ColorRendSet_Screen+0x34>
			GUI_OptionMenuRu();
 800fdb0:	f7fe fff6 	bl	800eda0 <GUI_OptionMenuRu>
		if(Language_status == En){
 800fdb4:	7823      	ldrb	r3, [r4, #0]
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d101      	bne.n	800fdbe <GUI_ColorRendSet_Screen+0x3e>
			GUI_OptionMenuEn();
 800fdba:	f7ff f861 	bl	800ee80 <GUI_OptionMenuEn>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 800fdbe:	4d1f      	ldr	r5, [pc, #124]	; (800fe3c <GUI_ColorRendSet_Screen+0xbc>)
			GUI_Text_CRI(30, 325);
 800fdc0:	f240 1145 	movw	r1, #325	; 0x145
 800fdc4:	201e      	movs	r0, #30
 800fdc6:	f008 ff7d 	bl	8018cc4 <GUI_Text_CRI>
			GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 800fdca:	782a      	ldrb	r2, [r5, #0]
 800fdcc:	2301      	movs	r3, #1
 800fdce:	401a      	ands	r2, r3
 800fdd0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800fdd4:	20b9      	movs	r0, #185	; 0xb9
 800fdd6:	f005 fa7c 	bl	80152d2 <GUI_RadioBox>
			TFT_DrawLine(10, 355, 262, 355, TFT_White);
 800fdda:	f64f 74ff 	movw	r4, #65535	; 0xffff
 800fdde:	f240 1363 	movw	r3, #355	; 0x163
 800fde2:	4619      	mov	r1, r3
 800fde4:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fde8:	200a      	movs	r0, #10
 800fdea:	9400      	str	r4, [sp, #0]
 800fdec:	f00e fa30 	bl	801e250 <TFT_DrawLine>
			GUI_Text_CQS(30, 369);
 800fdf0:	f240 1171 	movw	r1, #369	; 0x171
 800fdf4:	201e      	movs	r0, #30
 800fdf6:	f008 ff89 	bl	8018d0c <GUI_Text_CQS>
			GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 800fdfa:	782a      	ldrb	r2, [r5, #0]
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	43d2      	mvns	r2, r2
 800fe00:	401a      	ands	r2, r3
 800fe02:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 800fe06:	20b9      	movs	r0, #185	; 0xb9
 800fe08:	f005 fa63 	bl	80152d2 <GUI_RadioBox>
			TFT_DrawLine(10, 401, 262, 401, TFT_White);
 800fe0c:	f240 1391 	movw	r3, #401	; 0x191
 800fe10:	9400      	str	r4, [sp, #0]
 800fe12:	f44f 7283 	mov.w	r2, #262	; 0x106
 800fe16:	4619      	mov	r1, r3
 800fe18:	200a      	movs	r0, #10
 800fe1a:	f00e fa19 	bl	801e250 <TFT_DrawLine>
}
 800fe1e:	b003      	add	sp, #12
 800fe20:	bd30      	pop	{r4, r5, pc}
 800fe22:	bf00      	nop
 800fe24:	20000230 	.word	0x20000230
 800fe28:	2008bce4 	.word	0x2008bce4
 800fe2c:	20004c73 	.word	0x20004c73
 800fe30:	2000022a 	.word	0x2000022a
 800fe34:	20004c71 	.word	0x20004c71
 800fe38:	2008c288 	.word	0x2008c288
 800fe3c:	20004c70 	.word	0x20004c70

0800fe40 <GUI_Graph_Screen>:
void GUI_Graph_Screen(){
 800fe40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe44:	ed2d 8b02 	vpush	{d8}
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 800fe48:	4b87      	ldr	r3, [pc, #540]	; (8010068 <GUI_Graph_Screen+0x228>)
 800fe4a:	4a88      	ldr	r2, [pc, #544]	; (801006c <GUI_Graph_Screen+0x22c>)
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	7812      	ldrb	r2, [r2, #0]
 800fe50:	4d87      	ldr	r5, [pc, #540]	; (8010070 <GUI_Graph_Screen+0x230>)
 800fe52:	4c88      	ldr	r4, [pc, #544]	; (8010074 <GUI_Graph_Screen+0x234>)
 800fe54:	429a      	cmp	r2, r3
void GUI_Graph_Screen(){
 800fe56:	b083      	sub	sp, #12
	if((preGUI_screen_state != GUI_screen_state || Rotation_Screen_Spectral_Old != Rotation_Screen_Spectral)){
 800fe58:	d104      	bne.n	800fe64 <GUI_Graph_Screen+0x24>
 800fe5a:	782a      	ldrb	r2, [r5, #0]
 800fe5c:	7823      	ldrb	r3, [r4, #0]
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	f000 809d 	beq.w	800ff9e <GUI_Graph_Screen+0x15e>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 800fe64:	2063      	movs	r0, #99	; 0x63
 800fe66:	f00e f851 	bl	801df0c <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 800fe6a:	4a83      	ldr	r2, [pc, #524]	; (8010078 <GUI_Graph_Screen+0x238>)
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 800fe70:	4a82      	ldr	r2, [pc, #520]	; (801007c <GUI_Graph_Screen+0x23c>)
 800fe72:	7013      	strb	r3, [r2, #0]
		GUI_Panels();		
 800fe74:	f7ff fbb8 	bl	800f5e8 <GUI_Panels>
		Rotation_Screen_Spectral_Old = Rotation_Screen_Spectral;
 800fe78:	7820      	ldrb	r0, [r4, #0]
 800fe7a:	7028      	strb	r0, [r5, #0]
		if(Graph_Field&PPF_Bands)
 800fe7c:	4d80      	ldr	r5, [pc, #512]	; (8010080 <GUI_Graph_Screen+0x240>)
 800fe7e:	782b      	ldrb	r3, [r5, #0]
 800fe80:	07d9      	lsls	r1, r3, #31
 800fe82:	d501      	bpl.n	800fe88 <GUI_Graph_Screen+0x48>
			Spectral_PAR_Range(Rotation_Screen_Spectral);
 800fe84:	f00d fa78 	bl	801d378 <Spectral_PAR_Range>
		if(Graph_Field&V_lambda)
 800fe88:	782b      	ldrb	r3, [r5, #0]
 800fe8a:	075a      	lsls	r2, r3, #29
 800fe8c:	d538      	bpl.n	800ff00 <GUI_Graph_Screen+0xc0>
			if(Rotation_Screen_Spectral == 0)
 800fe8e:	7820      	ldrb	r0, [r4, #0]
 800fe90:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8010090 <GUI_Graph_Screen+0x250>
 800fe94:	f8df c210 	ldr.w	ip, [pc, #528]	; 80100a8 <GUI_Graph_Screen+0x268>
 800fe98:	4e7a      	ldr	r6, [pc, #488]	; (8010084 <GUI_Graph_Screen+0x244>)
 800fe9a:	4f7b      	ldr	r7, [pc, #492]	; (8010088 <GUI_Graph_Screen+0x248>)
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	f040 8086 	bne.w	800ffae <GUI_Graph_Screen+0x16e>
						buf_pix = (Spectral_day[i])*307;
 800fea2:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 801008c <GUI_Graph_Screen+0x24c>
 800fea6:	4603      	mov	r3, r0
 800fea8:	0119      	lsls	r1, r3, #4
 800feaa:	eb0c 0201 	add.w	r2, ip, r1
 800feae:	edd2 7a00 	vldr	s15, [r2]
 800feb2:	ee67 7a87 	vmul.f32	s15, s15, s14
						buf_pix = (Spectral_night[i])*307;
 800feb6:	4439      	add	r1, r7
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 800feb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800febc:	ee17 2a90 	vmov	r2, s15
						buf_pix = (Spectral_night[i])*307;
 800fec0:	edd1 7a00 	vldr	s15, [r1]
						graph_spectral_day[jj] = (uint16_t)buf_pix;
 800fec4:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
						buf_pix = (Spectral_night[i])*307;
 800fec8:	ee67 7a87 	vmul.f32	s15, s15, s14
						graph_spectral_night[jj] = (uint16_t)buf_pix;
 800fecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fed0:	ee17 2a90 	vmov	r2, s15
 800fed4:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800fed8:	3301      	adds	r3, #1
				for(uint16_t i = 0; i < 1024; i+=4)
 800feda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fede:	d1e3      	bne.n	800fea8 <GUI_Graph_Screen+0x68>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, Rotation_Screen_Spectral);
 800fee0:	2114      	movs	r1, #20
 800fee2:	9000      	str	r0, [sp, #0]
 800fee4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800fee8:	4608      	mov	r0, r1
 800feea:	4a69      	ldr	r2, [pc, #420]	; (8010090 <GUI_Graph_Screen+0x250>)
 800feec:	f00d fc04 	bl	801d6f8 <Spectral_DrawGraph_Const>
			Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, Rotation_Screen_Spectral);
 800fef0:	7823      	ldrb	r3, [r4, #0]
 800fef2:	9300      	str	r3, [sp, #0]
 800fef4:	2114      	movs	r1, #20
 800fef6:	231f      	movs	r3, #31
 800fef8:	4a62      	ldr	r2, [pc, #392]	; (8010084 <GUI_Graph_Screen+0x244>)
 800fefa:	4608      	mov	r0, r1
 800fefc:	f00d fbfc 	bl	801d6f8 <Spectral_DrawGraph_Const>
			if(Graph_Field&EbEr_graph)
 800ff00:	782b      	ldrb	r3, [r5, #0]
 800ff02:	079b      	lsls	r3, r3, #30
 800ff04:	d545      	bpl.n	800ff92 <GUI_Graph_Screen+0x152>
				if(Rotation_Screen_Spectral == 0)
 800ff06:	7826      	ldrb	r6, [r4, #0]
 800ff08:	f8df 9190 	ldr.w	r9, [pc, #400]	; 801009c <GUI_Graph_Screen+0x25c>
 800ff0c:	f8df a19c 	ldr.w	sl, [pc, #412]	; 80100ac <GUI_Graph_Screen+0x26c>
 800ff10:	4f60      	ldr	r7, [pc, #384]	; (8010094 <GUI_Graph_Screen+0x254>)
 800ff12:	f8df 819c 	ldr.w	r8, [pc, #412]	; 80100b0 <GUI_Graph_Screen+0x270>
 800ff16:	2e00      	cmp	r6, #0
 800ff18:	d16c      	bne.n	800fff4 <GUI_Graph_Screen+0x1b4>
							buf_pix = (Hazard_Blue[i])*307;
 800ff1a:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 801008c <GUI_Graph_Screen+0x24c>
 800ff1e:	4635      	mov	r5, r6
 800ff20:	012a      	lsls	r2, r5, #4
 800ff22:	eb0a 0302 	add.w	r3, sl, r2
 800ff26:	edd3 7a00 	vldr	s15, [r3]
 800ff2a:	ee67 7a88 	vmul.f32	s15, s15, s16
							buf_pix = (Hazard_Retina[i])/10.*307;
 800ff2e:	4442      	add	r2, r8
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 800ff30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
							buf_pix = (Hazard_Retina[i])/10.*307;
 800ff34:	6810      	ldr	r0, [r2, #0]
							graph_spectral_Blue[jj] = (uint16_t)buf_pix;
 800ff36:	ee17 3a90 	vmov	r3, s15
 800ff3a:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
							buf_pix = (Hazard_Retina[i])/10.*307;
 800ff3e:	f7f0 fb13 	bl	8000568 <__aeabi_f2d>
 800ff42:	2200      	movs	r2, #0
 800ff44:	4b54      	ldr	r3, [pc, #336]	; (8010098 <GUI_Graph_Screen+0x258>)
 800ff46:	f7f0 fc8d 	bl	8000864 <__aeabi_ddiv>
 800ff4a:	a343      	add	r3, pc, #268	; (adr r3, 8010058 <GUI_Graph_Screen+0x218>)
 800ff4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff50:	f7f0 fb5e 	bl	8000610 <__aeabi_dmul>
 800ff54:	f7f0 fe54 	bl	8000c00 <__aeabi_d2f>
							graph_spectral_Retina[jj] = (uint16_t)buf_pix;
 800ff58:	ee07 0a90 	vmov	s15, r0
 800ff5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ff60:	ee17 0a90 	vmov	r0, s15
 800ff64:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 800ff68:	3501      	adds	r5, #1
					for(uint16_t i = 0; i < 1024; i+=4)
 800ff6a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800ff6e:	d1d7      	bne.n	800ff20 <GUI_Graph_Screen+0xe0>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, Rotation_Screen_Spectral);
 800ff70:	2114      	movs	r1, #20
 800ff72:	4608      	mov	r0, r1
 800ff74:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800ff78:	4a48      	ldr	r2, [pc, #288]	; (801009c <GUI_Graph_Screen+0x25c>)
 800ff7a:	9600      	str	r6, [sp, #0]
 800ff7c:	f00d fbbc 	bl	801d6f8 <Spectral_DrawGraph_Const>
				Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, Rotation_Screen_Spectral);
 800ff80:	7823      	ldrb	r3, [r4, #0]
 800ff82:	9300      	str	r3, [sp, #0]
 800ff84:	2114      	movs	r1, #20
 800ff86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800ff8a:	4a42      	ldr	r2, [pc, #264]	; (8010094 <GUI_Graph_Screen+0x254>)
 800ff8c:	4608      	mov	r0, r1
 800ff8e:	f00d fbb3 	bl	801d6f8 <Spectral_DrawGraph_Const>
		Spectral_Axes(Rotation_Screen_Spectral);
 800ff92:	7820      	ldrb	r0, [r4, #0]
 800ff94:	f00d f922 	bl	801d1dc <Spectral_Axes>
		Spectral_Axes_Text(Rotation_Screen_Spectral);
 800ff98:	7820      	ldrb	r0, [r4, #0]
 800ff9a:	f00d facf 	bl	801d53c <Spectral_Axes_Text>
	Prev_Inf_Screen = Graph_Screen;	
 800ff9e:	4b40      	ldr	r3, [pc, #256]	; (80100a0 <GUI_Graph_Screen+0x260>)
 800ffa0:	2204      	movs	r2, #4
 800ffa2:	701a      	strb	r2, [r3, #0]
}
 800ffa4:	b003      	add	sp, #12
 800ffa6:	ecbd 8b02 	vpop	{d8}
 800ffaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
								buf_pix = (Spectral_day[i])*209;
 800ffae:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80100a4 <GUI_Graph_Screen+0x264>
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	f04f 080c 	mov.w	r8, #12
 800ffb8:	fb08 f103 	mul.w	r1, r8, r3
 800ffbc:	eb0c 0201 	add.w	r2, ip, r1
 800ffc0:	edd2 7a00 	vldr	s15, [r2]
 800ffc4:	ee67 7a87 	vmul.f32	s15, s15, s14
								buf_pix = (Spectral_night[i])*209;
 800ffc8:	4439      	add	r1, r7
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 800ffca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffce:	ee17 2a90 	vmov	r2, s15
								buf_pix = (Spectral_night[i])*209;
 800ffd2:	edd1 7a00 	vldr	s15, [r1]
								graph_spectral_day[ii] = (uint16_t)buf_pix;
 800ffd6:	f82e 2013 	strh.w	r2, [lr, r3, lsl #1]
								buf_pix = (Spectral_night[i])*209;
 800ffda:	ee67 7a87 	vmul.f32	s15, s15, s14
								graph_spectral_night[ii] = (uint16_t)buf_pix;
 800ffde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffe2:	ee17 2a90 	vmov	r2, s15
 800ffe6:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 800ffea:	3301      	adds	r3, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 800ffec:	f5b3 7fab 	cmp.w	r3, #342	; 0x156
 800fff0:	d1e2      	bne.n	800ffb8 <GUI_Graph_Screen+0x178>
 800fff2:	e775      	b.n	800fee0 <GUI_Graph_Screen+0xa0>
								buf_pix = (Hazard_Blue[i])*209;
 800fff4:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 80100a4 <GUI_Graph_Screen+0x264>
 800fff8:	2500      	movs	r5, #0
 800fffa:	f04f 0b0c 	mov.w	fp, #12
 800fffe:	fb0b f205 	mul.w	r2, fp, r5
 8010002:	eb0a 0302 	add.w	r3, sl, r2
 8010006:	edd3 7a00 	vldr	s15, [r3]
 801000a:	ee67 7a88 	vmul.f32	s15, s15, s16
								buf_pix = (Hazard_Retina[i])/10.*209;
 801000e:	4442      	add	r2, r8
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 8010010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
								buf_pix = (Hazard_Retina[i])/10.*209;
 8010014:	6810      	ldr	r0, [r2, #0]
								graph_spectral_Blue[ii] = (uint16_t)buf_pix;
 8010016:	ee17 3a90 	vmov	r3, s15
 801001a:	f829 3015 	strh.w	r3, [r9, r5, lsl #1]
								buf_pix = (Hazard_Retina[i])/10.*209;
 801001e:	f7f0 faa3 	bl	8000568 <__aeabi_f2d>
 8010022:	2200      	movs	r2, #0
 8010024:	4b1c      	ldr	r3, [pc, #112]	; (8010098 <GUI_Graph_Screen+0x258>)
 8010026:	f7f0 fc1d 	bl	8000864 <__aeabi_ddiv>
 801002a:	a30d      	add	r3, pc, #52	; (adr r3, 8010060 <GUI_Graph_Screen+0x220>)
 801002c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010030:	f7f0 faee 	bl	8000610 <__aeabi_dmul>
 8010034:	f7f0 fde4 	bl	8000c00 <__aeabi_d2f>
								graph_spectral_Retina[ii] = (uint16_t)buf_pix;
 8010038:	ee07 0a90 	vmov	s15, r0
 801003c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010040:	ee17 0a90 	vmov	r0, s15
 8010044:	f827 0015 	strh.w	r0, [r7, r5, lsl #1]
 8010048:	3501      	adds	r5, #1
						for(uint16_t i = 0; i < 1024; i+=3)
 801004a:	f5b5 7fab 	cmp.w	r5, #342	; 0x156
 801004e:	d1d6      	bne.n	800fffe <GUI_Graph_Screen+0x1be>
 8010050:	e78e      	b.n	800ff70 <GUI_Graph_Screen+0x130>
 8010052:	bf00      	nop
 8010054:	f3af 8000 	nop.w
 8010058:	00000000 	.word	0x00000000
 801005c:	40733000 	.word	0x40733000
 8010060:	00000000 	.word	0x00000000
 8010064:	406a2000 	.word	0x406a2000
 8010068:	2000022a 	.word	0x2000022a
 801006c:	20004c71 	.word	0x20004c71
 8010070:	2008c289 	.word	0x2008c289
 8010074:	20004c7a 	.word	0x20004c7a
 8010078:	20004c97 	.word	0x20004c97
 801007c:	20004c96 	.word	0x20004c96
 8010080:	20004c72 	.word	0x20004c72
 8010084:	2008c550 	.word	0x2008c550
 8010088:	2004ebe0 	.word	0x2004ebe0
 801008c:	43998000 	.word	0x43998000
 8010090:	2008bfb2 	.word	0x2008bfb2
 8010094:	2008bcec 	.word	0x2008bcec
 8010098:	40240000 	.word	0x40240000
 801009c:	2008c28a 	.word	0x2008c28a
 80100a0:	2008bce5 	.word	0x2008bce5
 80100a4:	43510000 	.word	0x43510000
 80100a8:	2004dbe0 	.word	0x2004dbe0
 80100ac:	20004fd8 	.word	0x20004fd8
 80100b0:	20005fd8 	.word	0x20005fd8

080100b4 <GUI_SignalLevel>:
}



void GUI_SignalLevel()
{
 80100b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(oldHighSignal != highSignal)
 80100b6:	4f2a      	ldr	r7, [pc, #168]	; (8010160 <GUI_SignalLevel+0xac>)
 80100b8:	4e2a      	ldr	r6, [pc, #168]	; (8010164 <GUI_SignalLevel+0xb0>)
 80100ba:	783b      	ldrb	r3, [r7, #0]
 80100bc:	7832      	ldrb	r2, [r6, #0]
 80100be:	429a      	cmp	r2, r3
 80100c0:	d00a      	beq.n	80100d8 <GUI_SignalLevel+0x24>
  {
    if(highSignal)
 80100c2:	b363      	cbz	r3, 801011e <GUI_SignalLevel+0x6a>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 80100c4:	4b28      	ldr	r3, [pc, #160]	; (8010168 <GUI_SignalLevel+0xb4>)
 80100c6:	781a      	ldrb	r2, [r3, #0]
 80100c8:	4b28      	ldr	r3, [pc, #160]	; (801016c <GUI_SignalLevel+0xb8>)
 80100ca:	211e      	movs	r1, #30
 80100cc:	781b      	ldrb	r3, [r3, #0]
 80100ce:	b9f2      	cbnz	r2, 801010e <GUI_SignalLevel+0x5a>
 80100d0:	b1cb      	cbz	r3, 8010106 <GUI_SignalLevel+0x52>
 80100d2:	200f      	movs	r0, #15
 80100d4:	f00b fa7e 	bl	801b5d4 <GUI_TextMsgRu_HighIrradiance>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
  
  if(oldLowSignal != lowSignal)
 80100d8:	4d25      	ldr	r5, [pc, #148]	; (8010170 <GUI_SignalLevel+0xbc>)
 80100da:	4c26      	ldr	r4, [pc, #152]	; (8010174 <GUI_SignalLevel+0xc0>)
 80100dc:	782b      	ldrb	r3, [r5, #0]
 80100de:	7820      	ldrb	r0, [r4, #0]
 80100e0:	4298      	cmp	r0, r3
 80100e2:	d00a      	beq.n	80100fa <GUI_SignalLevel+0x46>
  {
    if(lowSignal)
 80100e4:	b38b      	cbz	r3, 801014a <GUI_SignalLevel+0x96>
    {
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 80100e6:	4b20      	ldr	r3, [pc, #128]	; (8010168 <GUI_SignalLevel+0xb4>)
 80100e8:	781a      	ldrb	r2, [r3, #0]
 80100ea:	4b20      	ldr	r3, [pc, #128]	; (801016c <GUI_SignalLevel+0xb8>)
 80100ec:	211e      	movs	r1, #30
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	bb1a      	cbnz	r2, 801013a <GUI_SignalLevel+0x86>
 80100f2:	b1f3      	cbz	r3, 8010132 <GUI_SignalLevel+0x7e>
 80100f4:	2014      	movs	r0, #20
 80100f6:	f00b f975 	bl	801b3e4 <GUI_TextMsgRu_LowIrradiance>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
  }
	oldHighSignal = highSignal;
 80100fa:	783b      	ldrb	r3, [r7, #0]
 80100fc:	7033      	strb	r3, [r6, #0]
	oldLowSignal = lowSignal;
 80100fe:	782b      	ldrb	r3, [r5, #0]
 8010100:	7023      	strb	r3, [r4, #0]
}
 8010102:	b003      	add	sp, #12
 8010104:	bdf0      	pop	{r4, r5, r6, r7, pc}
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_HighIrradiance(15, 30) : GUI_TextMsgRu_HighRadiance(50, 30)):
 8010106:	2032      	movs	r0, #50	; 0x32
 8010108:	f00b fb00 	bl	801b70c <GUI_TextMsgRu_HighRadiance>
 801010c:	e7e4      	b.n	80100d8 <GUI_SignalLevel+0x24>
      (Mode_EL ? GUI_TextMsgEn_HighIrradiance(55, 30) : GUI_TextMsgEn_HighRadiance(55, 30));
 801010e:	2037      	movs	r0, #55	; 0x37
 8010110:	b113      	cbz	r3, 8010118 <GUI_SignalLevel+0x64>
 8010112:	f009 f9fd 	bl	8019510 <GUI_TextMsgEn_HighIrradiance>
 8010116:	e7df      	b.n	80100d8 <GUI_SignalLevel+0x24>
 8010118:	f009 fa72 	bl	8019600 <GUI_TextMsgEn_HighRadiance>
 801011c:	e7dc      	b.n	80100d8 <GUI_SignalLevel+0x24>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 801011e:	2363      	movs	r3, #99	; 0x63
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8010126:	2338      	movs	r3, #56	; 0x38
 8010128:	2120      	movs	r1, #32
 801012a:	200a      	movs	r0, #10
 801012c:	f00e f8ed 	bl	801e30a <TFT_FillRectangle>
 8010130:	e7d2      	b.n	80100d8 <GUI_SignalLevel+0x24>
      (Language_status == Ru)? ( Mode_EL ? GUI_TextMsgRu_LowIrradiance(20, 30) : GUI_TextMsgRu_LowRadiance(55,30)):
 8010132:	2037      	movs	r0, #55	; 0x37
 8010134:	f00b f9e4 	bl	801b500 <GUI_TextMsgRu_LowRadiance>
 8010138:	e7df      	b.n	80100fa <GUI_SignalLevel+0x46>
      (Mode_EL ? GUI_TextMsgEn_LowIrradiance(70, 30) : GUI_TextMsgEn_LowRadiance(70, 30));
 801013a:	2046      	movs	r0, #70	; 0x46
 801013c:	b113      	cbz	r3, 8010144 <GUI_SignalLevel+0x90>
 801013e:	f009 fb2d 	bl	801979c <GUI_TextMsgEn_LowIrradiance>
 8010142:	e7da      	b.n	80100fa <GUI_SignalLevel+0x46>
 8010144:	f009 fac6 	bl	80196d4 <GUI_TextMsgEn_LowRadiance>
 8010148:	e7d7      	b.n	80100fa <GUI_SignalLevel+0x46>
    }else{TFT_FillRectangle(10, 32, 270, 56, TFT_Black_Bkgr);}
 801014a:	2363      	movs	r3, #99	; 0x63
 801014c:	9300      	str	r3, [sp, #0]
 801014e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8010152:	2338      	movs	r3, #56	; 0x38
 8010154:	2120      	movs	r1, #32
 8010156:	200a      	movs	r0, #10
 8010158:	f00e f8d7 	bl	801e30a <TFT_FillRectangle>
 801015c:	e7cd      	b.n	80100fa <GUI_SignalLevel+0x46>
 801015e:	bf00      	nop
 8010160:	2008b85b 	.word	0x2008b85b
 8010164:	20004c96 	.word	0x20004c96
 8010168:	20004c73 	.word	0x20004c73
 801016c:	20000a48 	.word	0x20000a48
 8010170:	2008b85e 	.word	0x2008b85e
 8010174:	20004c97 	.word	0x20004c97

08010178 <GUI_Measure_Screen>:
void GUI_Measure_Screen(){
 8010178:	b510      	push	{r4, lr}
	if(preGUI_screen_state != GUI_screen_state){
 801017a:	4910      	ldr	r1, [pc, #64]	; (80101bc <GUI_Measure_Screen+0x44>)
 801017c:	4c10      	ldr	r4, [pc, #64]	; (80101c0 <GUI_Measure_Screen+0x48>)
 801017e:	7809      	ldrb	r1, [r1, #0]
 8010180:	7822      	ldrb	r2, [r4, #0]
 8010182:	4291      	cmp	r1, r2
 8010184:	d014      	beq.n	80101b0 <GUI_Measure_Screen+0x38>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 8010186:	2063      	movs	r0, #99	; 0x63
 8010188:	f00d fec0 	bl	801df0c <TFT_FillScreen_DMA>
		oldLowSignal = 0;
 801018c:	4b0d      	ldr	r3, [pc, #52]	; (80101c4 <GUI_Measure_Screen+0x4c>)
 801018e:	2000      	movs	r0, #0
 8010190:	7018      	strb	r0, [r3, #0]
		oldHighSignal = 0;
 8010192:	4b0d      	ldr	r3, [pc, #52]	; (80101c8 <GUI_Measure_Screen+0x50>)
 8010194:	7018      	strb	r0, [r3, #0]
		screen_count = 0;
 8010196:	4b0d      	ldr	r3, [pc, #52]	; (80101cc <GUI_Measure_Screen+0x54>)
 8010198:	7018      	strb	r0, [r3, #0]
		Measure_Elements_Draw(0);
 801019a:	f7fe ff0d 	bl	800efb8 <Measure_Elements_Draw>
		GUI_Up_Panel();
 801019e:	f7ff f9bb 	bl	800f518 <GUI_Up_Panel>
		GUI_Down_Panel();
 80101a2:	f7ff f9dd 	bl	800f560 <GUI_Down_Panel>
		Prev_Inf_Screen = Measure_Screen;
 80101a6:	4a0a      	ldr	r2, [pc, #40]	; (80101d0 <GUI_Measure_Screen+0x58>)
 80101a8:	2301      	movs	r3, #1
 80101aa:	7013      	strb	r3, [r2, #0]
		preGUI_screen_state = Measure_Screen;
 80101ac:	7023      	strb	r3, [r4, #0]
 80101ae:	bd10      	pop	{r4, pc}
		GUI_SignalLevel();
 80101b0:	f7ff ff80 	bl	80100b4 <GUI_SignalLevel>
		Measure_Elements_Draw(0);
 80101b4:	2000      	movs	r0, #0
 80101b6:	f7fe feff 	bl	800efb8 <Measure_Elements_Draw>
 80101ba:	e7f4      	b.n	80101a6 <GUI_Measure_Screen+0x2e>
 80101bc:	20004c71 	.word	0x20004c71
 80101c0:	2000022a 	.word	0x2000022a
 80101c4:	20004c97 	.word	0x20004c97
 80101c8:	20004c96 	.word	0x20004c96
 80101cc:	20004c9b 	.word	0x20004c9b
 80101d0:	2008bce5 	.word	0x2008bce5

080101d4 <GUI_Measure2_Screen>:
{
 80101d4:	b510      	push	{r4, lr}
 old_meas_type_L = 2;
 80101d6:	4b13      	ldr	r3, [pc, #76]	; (8010224 <GUI_Measure2_Screen+0x50>)
 80101d8:	4c13      	ldr	r4, [pc, #76]	; (8010228 <GUI_Measure2_Screen+0x54>)
 80101da:	2202      	movs	r2, #2
 80101dc:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != Measure2_Screen){
 80101de:	4b13      	ldr	r3, [pc, #76]	; (801022c <GUI_Measure2_Screen+0x58>)
 80101e0:	781b      	ldrb	r3, [r3, #0]
 80101e2:	4293      	cmp	r3, r2
 80101e4:	d017      	beq.n	8010216 <GUI_Measure2_Screen+0x42>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 80101e6:	2063      	movs	r0, #99	; 0x63
 80101e8:	f00d fe90 	bl	801df0c <TFT_FillScreen_DMA>
		current_state_Measure_Draw = state_Measure_Elements;
 80101ec:	4b10      	ldr	r3, [pc, #64]	; (8010230 <GUI_Measure2_Screen+0x5c>)
 80101ee:	7818      	ldrb	r0, [r3, #0]
		screen_count = 1;
 80101f0:	4b10      	ldr	r3, [pc, #64]	; (8010234 <GUI_Measure2_Screen+0x60>)
		current_state_Measure_Draw = state_Measure_Elements;
 80101f2:	7020      	strb	r0, [r4, #0]
		screen_count = 1;
 80101f4:	2201      	movs	r2, #1
 80101f6:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 80101f8:	4a0f      	ldr	r2, [pc, #60]	; (8010238 <GUI_Measure2_Screen+0x64>)
 80101fa:	2300      	movs	r3, #0
 80101fc:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 80101fe:	4a0f      	ldr	r2, [pc, #60]	; (801023c <GUI_Measure2_Screen+0x68>)
 8010200:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 8010202:	f7fe fed9 	bl	800efb8 <Measure_Elements_Draw>
		GUI_Up_Panel();
 8010206:	f7ff f987 	bl	800f518 <GUI_Up_Panel>
		GUI_Down_Panel();
 801020a:	f7ff f9a9 	bl	800f560 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 801020e:	4b0c      	ldr	r3, [pc, #48]	; (8010240 <GUI_Measure2_Screen+0x6c>)
 8010210:	2201      	movs	r2, #1
 8010212:	701a      	strb	r2, [r3, #0]
 8010214:	bd10      	pop	{r4, pc}
			GUI_SignalLevel();
 8010216:	f7ff ff4d 	bl	80100b4 <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 801021a:	7820      	ldrb	r0, [r4, #0]
 801021c:	f7fe fecc 	bl	800efb8 <Measure_Elements_Draw>
 8010220:	e7f5      	b.n	801020e <GUI_Measure2_Screen+0x3a>
 8010222:	bf00      	nop
 8010224:	20000230 	.word	0x20000230
 8010228:	20004c94 	.word	0x20004c94
 801022c:	2000022a 	.word	0x2000022a
 8010230:	20004ca0 	.word	0x20004ca0
 8010234:	20004c9b 	.word	0x20004c9b
 8010238:	20004c97 	.word	0x20004c97
 801023c:	20004c96 	.word	0x20004c96
 8010240:	2008bce5 	.word	0x2008bce5

08010244 <GUI_Measure3_Screen>:
{
 8010244:	b538      	push	{r3, r4, r5, lr}
 old_meas_type_L = 2;
 8010246:	4b12      	ldr	r3, [pc, #72]	; (8010290 <GUI_Measure3_Screen+0x4c>)
 8010248:	4c12      	ldr	r4, [pc, #72]	; (8010294 <GUI_Measure3_Screen+0x50>)
 801024a:	2502      	movs	r5, #2
 801024c:	701d      	strb	r5, [r3, #0]
	if(preGUI_screen_state != Measure3_Screen){
 801024e:	4b12      	ldr	r3, [pc, #72]	; (8010298 <GUI_Measure3_Screen+0x54>)
 8010250:	781b      	ldrb	r3, [r3, #0]
 8010252:	2b03      	cmp	r3, #3
 8010254:	d016      	beq.n	8010284 <GUI_Measure3_Screen+0x40>
		TFT_FillScreen_DMA(TFT_Black_Bkgr);
 8010256:	2063      	movs	r0, #99	; 0x63
 8010258:	f00d fe58 	bl	801df0c <TFT_FillScreen_DMA>
		current_state_Measure_Draw= state_Measure_Elements;
 801025c:	4b0f      	ldr	r3, [pc, #60]	; (801029c <GUI_Measure3_Screen+0x58>)
		oldLowSignal = 0;
 801025e:	4a10      	ldr	r2, [pc, #64]	; (80102a0 <GUI_Measure3_Screen+0x5c>)
		current_state_Measure_Draw= state_Measure_Elements;
 8010260:	7818      	ldrb	r0, [r3, #0]
		screen_count = 2;
 8010262:	4b10      	ldr	r3, [pc, #64]	; (80102a4 <GUI_Measure3_Screen+0x60>)
		current_state_Measure_Draw= state_Measure_Elements;
 8010264:	7020      	strb	r0, [r4, #0]
		screen_count = 2;
 8010266:	701d      	strb	r5, [r3, #0]
		oldLowSignal = 0;
 8010268:	2300      	movs	r3, #0
 801026a:	7013      	strb	r3, [r2, #0]
		oldHighSignal = 0;
 801026c:	4a0e      	ldr	r2, [pc, #56]	; (80102a8 <GUI_Measure3_Screen+0x64>)
 801026e:	7013      	strb	r3, [r2, #0]
		Measure_Elements_Draw(current_state_Measure_Draw);
 8010270:	f7fe fea2 	bl	800efb8 <Measure_Elements_Draw>
		GUI_Up_Panel();
 8010274:	f7ff f950 	bl	800f518 <GUI_Up_Panel>
		GUI_Down_Panel();
 8010278:	f7ff f972 	bl	800f560 <GUI_Down_Panel>
	Prev_Inf_Screen = Measure_Screen;
 801027c:	4b0b      	ldr	r3, [pc, #44]	; (80102ac <GUI_Measure3_Screen+0x68>)
 801027e:	2201      	movs	r2, #1
 8010280:	701a      	strb	r2, [r3, #0]
 8010282:	bd38      	pop	{r3, r4, r5, pc}
			GUI_SignalLevel();
 8010284:	f7ff ff16 	bl	80100b4 <GUI_SignalLevel>
			Measure_Elements_Draw(current_state_Measure_Draw);
 8010288:	7820      	ldrb	r0, [r4, #0]
 801028a:	f7fe fe95 	bl	800efb8 <Measure_Elements_Draw>
 801028e:	e7f5      	b.n	801027c <GUI_Measure3_Screen+0x38>
 8010290:	20000230 	.word	0x20000230
 8010294:	20004c94 	.word	0x20004c94
 8010298:	2000022a 	.word	0x2000022a
 801029c:	20004ca0 	.word	0x20004ca0
 80102a0:	20004c97 	.word	0x20004c97
 80102a4:	20004c9b 	.word	0x20004c9b
 80102a8:	20004c96 	.word	0x20004c96
 80102ac:	2008bce5 	.word	0x2008bce5

080102b0 <GUI_Color_Screen>:
void GUI_Color_Screen(){
 80102b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b4:	ed2d 8b04 	vpush	{d8-d9}
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 80102b8:	4c8f      	ldr	r4, [pc, #572]	; (80104f8 <GUI_Color_Screen+0x248>)
 80102ba:	4f90      	ldr	r7, [pc, #576]	; (80104fc <GUI_Color_Screen+0x24c>)
 80102bc:	7823      	ldrb	r3, [r4, #0]
 80102be:	4d90      	ldr	r5, [pc, #576]	; (8010500 <GUI_Color_Screen+0x250>)
 80102c0:	2b04      	cmp	r3, #4
void GUI_Color_Screen(){
 80102c2:	b089      	sub	sp, #36	; 0x24
	if((preGUI_screen_state == Graph_Screen) ||  (preGUI_screen_state == ColorSet1_Screen)||(preGUI_screen_state == ColorSet2_Screen) || (preGUI_screen_state == SD_Write_Screen)){	
 80102c4:	d008      	beq.n	80102d8 <GUI_Color_Screen+0x28>
 80102c6:	7823      	ldrb	r3, [r4, #0]
 80102c8:	2b0e      	cmp	r3, #14
 80102ca:	d005      	beq.n	80102d8 <GUI_Color_Screen+0x28>
 80102cc:	7823      	ldrb	r3, [r4, #0]
 80102ce:	2b0f      	cmp	r3, #15
 80102d0:	d002      	beq.n	80102d8 <GUI_Color_Screen+0x28>
 80102d2:	7823      	ldrb	r3, [r4, #0]
 80102d4:	2b12      	cmp	r3, #18
 80102d6:	d125      	bne.n	8010324 <GUI_Color_Screen+0x74>
		GUI_Panels();	
 80102d8:	f7ff f986 	bl	800f5e8 <GUI_Panels>
		TFT_direction = Rotation_Screen_Color;
 80102dc:	4b89      	ldr	r3, [pc, #548]	; (8010504 <GUI_Color_Screen+0x254>)
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	703b      	strb	r3, [r7, #0]
		TFT_DrawBitmap(Color_Field&Color_CIE_xy? 18:
 80102e2:	782b      	ldrb	r3, [r5, #0]
 80102e4:	f013 0f05 	tst.w	r3, #5
 80102e8:	bf0c      	ite	eq
 80102ea:	200b      	moveq	r0, #11
 80102ec:	2012      	movne	r0, #18
 80102ee:	f013 0f04 	tst.w	r3, #4
 80102f2:	4b85      	ldr	r3, [pc, #532]	; (8010508 <GUI_Color_Screen+0x258>)
 80102f4:	bf18      	it	ne
 80102f6:	21ac      	movne	r1, #172	; 0xac
 80102f8:	cb0c      	ldmia	r3, {r2, r3}
 80102fa:	bf08      	it	eq
 80102fc:	2196      	moveq	r1, #150	; 0x96
 80102fe:	f00e fa06 	bl	801e70e <TFT_DrawBitmap>
		flag = 0;	
 8010302:	4b82      	ldr	r3, [pc, #520]	; (801050c <GUI_Color_Screen+0x25c>)
 8010304:	2200      	movs	r2, #0
 8010306:	701a      	strb	r2, [r3, #0]
		oldLowSignal = 0;
 8010308:	4b81      	ldr	r3, [pc, #516]	; (8010510 <GUI_Color_Screen+0x260>)
 801030a:	701a      	strb	r2, [r3, #0]
		oldHighSignal = 0;
 801030c:	4b81      	ldr	r3, [pc, #516]	; (8010514 <GUI_Color_Screen+0x264>)
 801030e:	701a      	strb	r2, [r3, #0]
		if(Color_Field&Color_CIE_xy){GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);}
 8010310:	782b      	ldrb	r3, [r5, #0]
 8010312:	f013 0101 	ands.w	r1, r3, #1
 8010316:	f000 80cf 	beq.w	80104b8 <GUI_Color_Screen+0x208>
 801031a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801031e:	2012      	movs	r0, #18
 8010320:	f008 f858 	bl	80183d4 <GUI_Axes_Locus_XY>
	Prev_Inf_Screen = Color_Screen;
 8010324:	4a7c      	ldr	r2, [pc, #496]	; (8010518 <GUI_Color_Screen+0x268>)
	preGUI_screen_state = Color_Screen;
 8010326:	2305      	movs	r3, #5
 8010328:	7023      	strb	r3, [r4, #0]
	Prev_Inf_Screen = Color_Screen;
 801032a:	7013      	strb	r3, [r2, #0]
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 801032c:	4b7b      	ldr	r3, [pc, #492]	; (801051c <GUI_Color_Screen+0x26c>)
 801032e:	781b      	ldrb	r3, [r3, #0]
 8010330:	2b00      	cmp	r3, #0
 8010332:	f040 80d4 	bne.w	80104de <GUI_Color_Screen+0x22e>
 8010336:	4b7a      	ldr	r3, [pc, #488]	; (8010520 <GUI_Color_Screen+0x270>)
 8010338:	edd3 8a00 	vldr	s17, [r3]
colorimetry_xy_buff[1] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[1] : colorimetry_xy1931[1];
 801033c:	ed93 8a01 	vldr	s16, [r3, #4]
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 8010340:	782b      	ldrb	r3, [r5, #0]
 8010342:	07d9      	lsls	r1, r3, #31
 8010344:	f140 8102 	bpl.w	801054c <GUI_Color_Screen+0x29c>
 8010348:	4b76      	ldr	r3, [pc, #472]	; (8010524 <GUI_Color_Screen+0x274>)
 801034a:	4a77      	ldr	r2, [pc, #476]	; (8010528 <GUI_Color_Screen+0x278>)
		 scr_refresh++;
 801034c:	4e77      	ldr	r6, [pc, #476]	; (801052c <GUI_Color_Screen+0x27c>)
	if(Color_Field&Color_CIE_xy) {GUI_Text_xy_Measure(20, 70, colorimetry_xy_buff[0], colorimetry_xy_buff[1], exp_start, exp_set); 
 801034e:	781b      	ldrb	r3, [r3, #0]
 8010350:	7812      	ldrb	r2, [r2, #0]
 8010352:	eef0 0a48 	vmov.f32	s1, s16
 8010356:	eeb0 0a68 	vmov.f32	s0, s17
 801035a:	2146      	movs	r1, #70	; 0x46
 801035c:	2014      	movs	r0, #20
 801035e:	f006 fcf1 	bl	8016d44 <GUI_Text_xy_Measure>
		 scr_refresh++;
 8010362:	7833      	ldrb	r3, [r6, #0]
 8010364:	3301      	adds	r3, #1
 8010366:	b2db      	uxtb	r3, r3
   if(scr_refresh > 15 ){
 8010368:	2b0f      	cmp	r3, #15
		 scr_refresh++;
 801036a:	7033      	strb	r3, [r6, #0]
   if(scr_refresh > 15 ){
 801036c:	f240 809b 	bls.w	80104a6 <GUI_Color_Screen+0x1f6>
		 if(colorimetry_xy_buff[0] < 0.74 & colorimetry_xy_buff[1] < 0.84 ){
 8010370:	ee18 0a90 	vmov	r0, s17
 8010374:	f7f0 f8f8 	bl	8000568 <__aeabi_f2d>
 8010378:	a35b      	add	r3, pc, #364	; (adr r3, 80104e8 <GUI_Color_Screen+0x238>)
 801037a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037e:	f04f 0401 	mov.w	r4, #1
 8010382:	f7f0 fbb7 	bl	8000af4 <__aeabi_dcmplt>
 8010386:	b900      	cbnz	r0, 801038a <GUI_Color_Screen+0xda>
 8010388:	4604      	mov	r4, r0
 801038a:	f014 0fff 	tst.w	r4, #255	; 0xff
 801038e:	f000 808a 	beq.w	80104a6 <GUI_Color_Screen+0x1f6>
 8010392:	ee18 0a10 	vmov	r0, s16
 8010396:	f7f0 f8e7 	bl	8000568 <__aeabi_f2d>
 801039a:	a355      	add	r3, pc, #340	; (adr r3, 80104f0 <GUI_Color_Screen+0x240>)
 801039c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a0:	f04f 0401 	mov.w	r4, #1
 80103a4:	f7f0 fba6 	bl	8000af4 <__aeabi_dcmplt>
 80103a8:	b900      	cbnz	r0, 80103ac <GUI_Color_Screen+0xfc>
 80103aa:	4604      	mov	r4, r0
 80103ac:	f014 0fff 	tst.w	r4, #255	; 0xff
 80103b0:	d079      	beq.n	80104a6 <GUI_Color_Screen+0x1f6>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80103b2:	4b56      	ldr	r3, [pc, #344]	; (801050c <GUI_Color_Screen+0x25c>)
 80103b4:	4c5e      	ldr	r4, [pc, #376]	; (8010530 <GUI_Color_Screen+0x280>)
 80103b6:	781a      	ldrb	r2, [r3, #0]
 80103b8:	ed9f 9a5e 	vldr	s18, [pc, #376]	; 8010534 <GUI_Color_Screen+0x284>
 80103bc:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8010538 <GUI_Color_Screen+0x288>
 80103c0:	4698      	mov	r8, r3
 80103c2:	2a00      	cmp	r2, #0
 80103c4:	d03f      	beq.n	8010446 <GUI_Color_Screen+0x196>
 80103c6:	edd4 6a01 	vldr	s13, [r4, #4]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 80103ca:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 801053c <GUI_Color_Screen+0x28c>
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80103ce:	edd4 5a00 	vldr	s11, [r4]
 80103d2:	4a4d      	ldr	r2, [pc, #308]	; (8010508 <GUI_Color_Screen+0x258>)
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 80103d4:	eef1 6a66 	vneg.f32	s13, s13
 80103d8:	eea6 7a89 	vfma.f32	s14, s13, s18
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80103dc:	e892 0003 	ldmia.w	r2, {r0, r1}
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 80103e0:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 80103e4:	ee37 7a46 	vsub.f32	s14, s14, s12
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80103e8:	ab01      	add	r3, sp, #4
 80103ea:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80103ee:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8010540 <GUI_Color_Screen+0x290>
 80103f2:	edcd 7a04 	vstr	s15, [sp, #16]
					 colorimetry_xy_old[0]*295-5, XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5, 15, Locus);}
 80103f6:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 80103fa:	eee5 7aa9 	vfma.f32	s15, s11, s19
			 if(flag){		TFT_DrawCutBMP(18-1+colorimetry_xy_old[0]*295-5, 150+XY2_LOCUS_BMP_SIZEY-1-colorimetry_xy_old[1]*300-5,
 80103fe:	eea6 7a89 	vfma.f32	s14, s13, s18
 8010402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010406:	ee37 7a46 	vsub.f32	s14, s14, s12
 801040a:	edcd 7a05 	vstr	s15, [sp, #20]
 801040e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010412:	edcd 7a06 	vstr	s15, [sp, #24]
 8010416:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 801041a:	eee5 7aa9 	vfma.f32	s15, s11, s19
 801041e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010426:	edcd 7a07 	vstr	s15, [sp, #28]
 801042a:	e883 0003 	stmia.w	r3, {r0, r1}
 801042e:	230f      	movs	r3, #15
 8010430:	9300      	str	r3, [sp, #0]
 8010432:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010436:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801043a:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801043e:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8010442:	f00e fa01 	bl	801e848 <TFT_DrawCutBMP>
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010446:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 801044a:	eee8 7aa9 	vfma.f32	s15, s17, s19
 801044e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010452:	2204      	movs	r2, #4
		colorimetry_xy_old[0] = colorimetry_xy_buff[0];
 8010454:	edc4 8a00 	vstr	s17, [r4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010458:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		colorimetry_xy_old[1] = colorimetry_xy_buff[1];
 801045c:	ed84 8a01 	vstr	s16, [r4, #4]
		TFT_DrawFilledCircle( 18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 4, TFT_White);
 8010460:	edcd 7a04 	vstr	s15, [sp, #16]
 8010464:	eddf 7a37 	vldr	s15, [pc, #220]	; 8010544 <GUI_Color_Screen+0x294>
 8010468:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
 801046c:	eee8 7a49 	vfms.f32	s15, s16, s18
 8010470:	4620      	mov	r0, r4
 8010472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010476:	edcd 7a04 	vstr	s15, [sp, #16]
 801047a:	f9bd 5010 	ldrsh.w	r5, [sp, #16]
 801047e:	4629      	mov	r1, r5
 8010480:	f00d ff7f 	bl	801e382 <TFT_DrawFilledCircle>
		TFT_DrawFilledCircle(18+colorimetry_xy_buff[0]*295, 150+XY2_LOCUS_BMP_SIZEY-colorimetry_xy_buff[1]*300, 2, TFT_Black);
 8010484:	2300      	movs	r3, #0
 8010486:	2202      	movs	r2, #2
 8010488:	4629      	mov	r1, r5
 801048a:	4620      	mov	r0, r4
 801048c:	f00d ff79 	bl	801e382 <TFT_DrawFilledCircle>
		GUI_Axes_Locus_XY(18, 150+XY2_LOCUS_BMP_SIZEY, 0);
 8010490:	2200      	movs	r2, #0
 8010492:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8010496:	2012      	movs	r0, #18
 8010498:	f007 ff9c 	bl	80183d4 <GUI_Axes_Locus_XY>
		flag = 1;
 801049c:	2301      	movs	r3, #1
 801049e:	f888 3000 	strb.w	r3, [r8]
			scr_refresh = 0;
 80104a2:	2300      	movs	r3, #0
 80104a4:	7033      	strb	r3, [r6, #0]
	TFT_direction = 0x00;
 80104a6:	2300      	movs	r3, #0
 80104a8:	703b      	strb	r3, [r7, #0]
}         
 80104aa:	b009      	add	sp, #36	; 0x24
 80104ac:	ecbd 8b04 	vpop	{d8-d9}
 80104b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	GUI_SignalLevel();
 80104b4:	f7ff bdfe 	b.w	80100b4 <GUI_SignalLevel>
		else if(Color_Field&Color_CIE_Luv){GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);}
 80104b8:	f013 0204 	ands.w	r2, r3, #4
 80104bc:	d006      	beq.n	80104cc <GUI_Color_Screen+0x21c>
 80104be:	460a      	mov	r2, r1
 80104c0:	2012      	movs	r0, #18
 80104c2:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80104c6:	f007 ffeb 	bl	80184a0 <GUI_Axes_Locus_LUV>
 80104ca:	e72b      	b.n	8010324 <GUI_Color_Screen+0x74>
		else if(Color_Field&Color_CIE_Lab) {GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);}
 80104cc:	0798      	lsls	r0, r3, #30
 80104ce:	f57f af29 	bpl.w	8010324 <GUI_Color_Screen+0x74>
 80104d2:	f240 1113 	movw	r1, #275	; 0x113
 80104d6:	2088      	movs	r0, #136	; 0x88
 80104d8:	f008 f848 	bl	801856c <GUI_Axes_Locus_Lab>
 80104dc:	e722      	b.n	8010324 <GUI_Color_Screen+0x74>
colorimetry_xy_buff[0] = (Measure_Color_xy == 0x00) ? colorimetry_xy1964[0] : colorimetry_xy1931[0];
 80104de:	4b1a      	ldr	r3, [pc, #104]	; (8010548 <GUI_Color_Screen+0x298>)
 80104e0:	e72a      	b.n	8010338 <GUI_Color_Screen+0x88>
 80104e2:	bf00      	nop
 80104e4:	f3af 8000 	nop.w
 80104e8:	7ae147ae 	.word	0x7ae147ae
 80104ec:	3fe7ae14 	.word	0x3fe7ae14
 80104f0:	ae147ae1 	.word	0xae147ae1
 80104f4:	3feae147 	.word	0x3feae147
 80104f8:	2000022a 	.word	0x2000022a
 80104fc:	20004c10 	.word	0x20004c10
 8010500:	20004c6f 	.word	0x20004c6f
 8010504:	20004c78 	.word	0x20004c78
 8010508:	2008c280 	.word	0x2008c280
 801050c:	20004c95 	.word	0x20004c95
 8010510:	20004c97 	.word	0x20004c97
 8010514:	20004c96 	.word	0x20004c96
 8010518:	2008bce5 	.word	0x2008bce5
 801051c:	20004c74 	.word	0x20004c74
 8010520:	2008a7e4 	.word	0x2008a7e4
 8010524:	20000a4c 	.word	0x20000a4c
 8010528:	20000a4d 	.word	0x20000a4d
 801052c:	20004c9a 	.word	0x20004c9a
 8010530:	20004c8c 	.word	0x20004c8c
 8010534:	43960000 	.word	0x43960000
 8010538:	43938000 	.word	0x43938000
 801053c:	43790000 	.word	0x43790000
 8010540:	43c78000 	.word	0x43c78000
 8010544:	43c80000 	.word	0x43c80000
 8010548:	2008a7dc 	.word	0x2008a7dc
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 801054c:	075a      	lsls	r2, r3, #29
 801054e:	f140 80fb 	bpl.w	8010748 <GUI_Color_Screen+0x498>
 8010552:	4c71      	ldr	r4, [pc, #452]	; (8010718 <GUI_Color_Screen+0x468>)
 8010554:	4b71      	ldr	r3, [pc, #452]	; (801071c <GUI_Color_Screen+0x46c>)
 8010556:	4a72      	ldr	r2, [pc, #456]	; (8010720 <GUI_Color_Screen+0x470>)
		scr_refresh++;
 8010558:	4e72      	ldr	r6, [pc, #456]	; (8010724 <GUI_Color_Screen+0x474>)
	if(Color_Field&Color_CIE_Luv) {GUI_Text_uv_Measure(20, 70, colorimetry_uv1976[0], colorimetry_uv1976[1], exp_start, exp_set);
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	7812      	ldrb	r2, [r2, #0]
 801055e:	edd4 0a01 	vldr	s1, [r4, #4]
 8010562:	ed94 0a00 	vldr	s0, [r4]
 8010566:	2146      	movs	r1, #70	; 0x46
 8010568:	2014      	movs	r0, #20
 801056a:	f006 fcad 	bl	8016ec8 <GUI_Text_uv_Measure>
		scr_refresh++;
 801056e:	7833      	ldrb	r3, [r6, #0]
 8010570:	3301      	adds	r3, #1
 8010572:	b2db      	uxtb	r3, r3
		if(scr_refresh > 15 ){
 8010574:	2b0f      	cmp	r3, #15
		scr_refresh++;
 8010576:	7033      	strb	r3, [r6, #0]
		if(scr_refresh > 15 ){
 8010578:	d995      	bls.n	80104a6 <GUI_Color_Screen+0x1f6>
		if(colorimetry_uv1976[0] < 0.63 & colorimetry_uv1976[1] < 0.59 & colorimetry_uv1976[0] > 0.0 & colorimetry_uv1976[1] > 0.0){
 801057a:	edd4 7a00 	vldr	s15, [r4]
 801057e:	ed94 8a01 	vldr	s16, [r4, #4]
 8010582:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801058a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801058e:	bfcc      	ite	gt
 8010590:	2501      	movgt	r5, #1
 8010592:	2500      	movle	r5, #0
 8010594:	ee17 0a90 	vmov	r0, s15
 8010598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801059c:	f005 0501 	and.w	r5, r5, #1
 80105a0:	bfd8      	it	le
 80105a2:	2500      	movle	r5, #0
 80105a4:	f7ef ffe0 	bl	8000568 <__aeabi_f2d>
 80105a8:	a357      	add	r3, pc, #348	; (adr r3, 8010708 <GUI_Color_Screen+0x458>)
 80105aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ae:	f04f 0801 	mov.w	r8, #1
 80105b2:	f7f0 fa9f 	bl	8000af4 <__aeabi_dcmplt>
 80105b6:	b900      	cbnz	r0, 80105ba <GUI_Color_Screen+0x30a>
 80105b8:	4680      	mov	r8, r0
 80105ba:	ea15 0f08 	tst.w	r5, r8
 80105be:	f43f af72 	beq.w	80104a6 <GUI_Color_Screen+0x1f6>
 80105c2:	ee18 0a10 	vmov	r0, s16
 80105c6:	f7ef ffcf 	bl	8000568 <__aeabi_f2d>
 80105ca:	a351      	add	r3, pc, #324	; (adr r3, 8010710 <GUI_Color_Screen+0x460>)
 80105cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d0:	f04f 0501 	mov.w	r5, #1
 80105d4:	f7f0 fa8e 	bl	8000af4 <__aeabi_dcmplt>
 80105d8:	b900      	cbnz	r0, 80105dc <GUI_Color_Screen+0x32c>
 80105da:	4605      	mov	r5, r0
 80105dc:	f015 0fff 	tst.w	r5, #255	; 0xff
 80105e0:	f43f af61 	beq.w	80104a6 <GUI_Color_Screen+0x1f6>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 80105e4:	4d50      	ldr	r5, [pc, #320]	; (8010728 <GUI_Color_Screen+0x478>)
 80105e6:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8010744 <GUI_Color_Screen+0x494>
 80105ea:	782a      	ldrb	r2, [r5, #0]
 80105ec:	eddf 9a4f 	vldr	s19, [pc, #316]	; 801072c <GUI_Color_Screen+0x47c>
 80105f0:	eddf 8a4f 	vldr	s17, [pc, #316]	; 8010730 <GUI_Color_Screen+0x480>
 80105f4:	2a00      	cmp	r2, #0
 80105f6:	d03f      	beq.n	8010678 <GUI_Color_Screen+0x3c8>
 80105f8:	edd8 6a01 	vldr	s13, [r8, #4]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 80105fc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8010734 <GUI_Color_Screen+0x484>
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010600:	edd8 5a00 	vldr	s11, [r8]
 8010604:	4a4c      	ldr	r2, [pc, #304]	; (8010738 <GUI_Color_Screen+0x488>)
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010606:	eef1 6a66 	vneg.f32	s13, s13
 801060a:	eea6 7aa9 	vfma.f32	s14, s13, s19
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 801060e:	e892 0003 	ldmia.w	r2, {r0, r1}
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010612:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8010616:	ee37 7a46 	vsub.f32	s14, s14, s12
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 801061a:	ab01      	add	r3, sp, #4
 801061c:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010620:	ed9f 7a46 	vldr	s14, [pc, #280]	; 801073c <GUI_Color_Screen+0x48c>
 8010624:	edcd 7a04 	vstr	s15, [sp, #16]
			colorimetry_uv1976_old[0]*403-5, LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5, 12, Locus);}
 8010628:	eef9 7a04 	vmov.f32	s15, #148	; 0xc0a00000 -5.0
 801062c:	eee5 7aa8 	vfma.f32	s15, s11, s17
			if(flag){	TFT_DrawCutBMP(18-1+colorimetry_uv1976_old[0]*403-5, 172+LUV_LOCUS_BMP_SIZEY-1-colorimetry_uv1976_old[1]*396-5,
 8010630:	eea6 7aa9 	vfma.f32	s14, s13, s19
 8010634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010638:	ee37 7a46 	vsub.f32	s14, s14, s12
 801063c:	edcd 7a05 	vstr	s15, [sp, #20]
 8010640:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010644:	edcd 7a06 	vstr	s15, [sp, #24]
 8010648:	eef3 7a01 	vmov.f32	s15, #49	; 0x41880000  17.0
 801064c:	eee5 7aa8 	vfma.f32	s15, s11, s17
 8010650:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010658:	edcd 7a07 	vstr	s15, [sp, #28]
 801065c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010660:	230c      	movs	r3, #12
 8010662:	9300      	str	r3, [sp, #0]
 8010664:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8010668:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801066c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8010670:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8010674:	f00e f8e8 	bl	801e848 <TFT_DrawCutBMP>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010678:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8010740 <GUI_Color_Screen+0x490>
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 801067c:	ed94 7a01 	vldr	s14, [r4, #4]
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 8010680:	edd4 7a00 	vldr	s15, [r4]
			colorimetry_uv1976_old[1] = colorimetry_uv1976[1];
 8010684:	ed88 7a01 	vstr	s14, [r8, #4]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 8010688:	eef0 6a49 	vmov.f32	s13, s18
 801068c:	eee7 6a69 	vfms.f32	s13, s14, s19
 8010690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010694:	2204      	movs	r2, #4
 8010696:	eeb3 8a02 	vmov.f32	s16, #50	; 0x41900000  18.0
 801069a:	eebd 7ae6 	vcvt.s32.f32	s14, s13
			colorimetry_uv1976_old[0] = colorimetry_uv1976[0];
 801069e:	edc8 7a00 	vstr	s15, [r8]
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 4, TFT_White);
 80106a2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80106a6:	eeb0 7a48 	vmov.f32	s14, s16
 80106aa:	eea7 7aa8 	vfma.f32	s14, s15, s17
 80106ae:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80106b2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80106b6:	edcd 7a05 	vstr	s15, [sp, #20]
 80106ba:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 80106be:	f00d fe60 	bl	801e382 <TFT_DrawFilledCircle>
			TFT_DrawFilledCircle(18 + colorimetry_uv1976[0]*403, 172+LUV_LOCUS_BMP_SIZEY-colorimetry_uv1976[1]*396, 2, TFT_Black);
 80106c2:	edd4 7a01 	vldr	s15, [r4, #4]
 80106c6:	eea7 9ae9 	vfms.f32	s18, s15, s19
 80106ca:	2300      	movs	r3, #0
 80106cc:	2202      	movs	r2, #2
 80106ce:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 80106d2:	edcd 7a04 	vstr	s15, [sp, #16]
 80106d6:	edd4 7a00 	vldr	s15, [r4]
 80106da:	f9bd 1010 	ldrsh.w	r1, [sp, #16]
 80106de:	eea7 8aa8 	vfma.f32	s16, s15, s17
 80106e2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80106e6:	edcd 7a05 	vstr	s15, [sp, #20]
 80106ea:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 80106ee:	f00d fe48 	bl	801e382 <TFT_DrawFilledCircle>
			GUI_Axes_Locus_LUV(18, 172+LUV_LOCUS_BMP_SIZEY, 0);
 80106f2:	2200      	movs	r2, #0
 80106f4:	f44f 71cb 	mov.w	r1, #406	; 0x196
 80106f8:	2012      	movs	r0, #18
 80106fa:	f007 fed1 	bl	80184a0 <GUI_Axes_Locus_LUV>
			flag = 1;
 80106fe:	2301      	movs	r3, #1
 8010700:	702b      	strb	r3, [r5, #0]
 8010702:	e6ce      	b.n	80104a2 <GUI_Color_Screen+0x1f2>
 8010704:	f3af 8000 	nop.w
 8010708:	c28f5c29 	.word	0xc28f5c29
 801070c:	3fe428f5 	.word	0x3fe428f5
 8010710:	ae147ae1 	.word	0xae147ae1
 8010714:	3fe2e147 	.word	0x3fe2e147
 8010718:	2008a7d4 	.word	0x2008a7d4
 801071c:	20000a4c 	.word	0x20000a4c
 8010720:	20000a4d 	.word	0x20000a4d
 8010724:	20004c9a 	.word	0x20004c9a
 8010728:	20004c95 	.word	0x20004c95
 801072c:	43c60000 	.word	0x43c60000
 8010730:	43c98000 	.word	0x43c98000
 8010734:	43690000 	.word	0x43690000
 8010738:	2008c280 	.word	0x2008c280
 801073c:	43ca8000 	.word	0x43ca8000
 8010740:	43cb0000 	.word	0x43cb0000
 8010744:	20004c84 	.word	0x20004c84
	if(Color_Field&Color_CIE_Lab) {GUI_Text_LAB_Measure(20, 54, colorimetry_LAB[0], colorimetry_LAB[1], colorimetry_LAB[2], exp_start, exp_set);
 8010748:	079b      	lsls	r3, r3, #30
 801074a:	f57f aeac 	bpl.w	80104a6 <GUI_Color_Screen+0x1f6>
 801074e:	4984      	ldr	r1, [pc, #528]	; (8010960 <GUI_Color_Screen+0x6b0>)
 8010750:	4c84      	ldr	r4, [pc, #528]	; (8010964 <GUI_Color_Screen+0x6b4>)
 8010752:	7809      	ldrb	r1, [r1, #0]
 8010754:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8010758:	f9b4 2000 	ldrsh.w	r2, [r4]
 801075c:	9102      	str	r1, [sp, #8]
 801075e:	4982      	ldr	r1, [pc, #520]	; (8010968 <GUI_Color_Screen+0x6b8>)
 8010760:	7809      	ldrb	r1, [r1, #0]
 8010762:	9101      	str	r1, [sp, #4]
 8010764:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8010768:	9100      	str	r1, [sp, #0]
 801076a:	2014      	movs	r0, #20
 801076c:	2136      	movs	r1, #54	; 0x36
 801076e:	f007 fb63 	bl	8017e38 <GUI_Text_LAB_Measure>
		if(colorimetry_LAB[1] < 128 & colorimetry_LAB[1] > -128 & colorimetry_LAB[2]<128 & colorimetry_LAB[2] > -128){
 8010772:	8863      	ldrh	r3, [r4, #2]
 8010774:	337f      	adds	r3, #127	; 0x7f
 8010776:	b29b      	uxth	r3, r3
 8010778:	2bfe      	cmp	r3, #254	; 0xfe
 801077a:	f63f ae94 	bhi.w	80104a6 <GUI_Color_Screen+0x1f6>
 801077e:	88a3      	ldrh	r3, [r4, #4]
 8010780:	337f      	adds	r3, #127	; 0x7f
 8010782:	b29b      	uxth	r3, r3
 8010784:	2bfe      	cmp	r3, #254	; 0xfe
 8010786:	f63f ae8e 	bhi.w	80104a6 <GUI_Color_Screen+0x1f6>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 801078a:	4d78      	ldr	r5, [pc, #480]	; (801096c <GUI_Color_Screen+0x6bc>)
 801078c:	4e78      	ldr	r6, [pc, #480]	; (8010970 <GUI_Color_Screen+0x6c0>)
 801078e:	782b      	ldrb	r3, [r5, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d05d      	beq.n	8010850 <GUI_Color_Screen+0x5a0>
 8010794:	f9b6 0002 	ldrsh.w	r0, [r6, #2]
 8010798:	f7ef fed4 	bl	8000544 <__aeabi_i2d>
 801079c:	a368      	add	r3, pc, #416	; (adr r3, 8010940 <GUI_Color_Screen+0x690>)
 801079e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a2:	f7ef ff35 	bl	8000610 <__aeabi_dmul>
 80107a6:	4682      	mov	sl, r0
 80107a8:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 80107ac:	468b      	mov	fp, r1
 80107ae:	f7ef fec9 	bl	8000544 <__aeabi_i2d>
 80107b2:	a363      	add	r3, pc, #396	; (adr r3, 8010940 <GUI_Color_Screen+0x690>)
 80107b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b8:	f7ef ff2a 	bl	8000610 <__aeabi_dmul>
 80107bc:	4680      	mov	r8, r0
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 80107be:	4602      	mov	r2, r0
 80107c0:	460b      	mov	r3, r1
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 80107c2:	4689      	mov	r9, r1
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 80107c4:	2000      	movs	r0, #0
 80107c6:	496b      	ldr	r1, [pc, #428]	; (8010974 <GUI_Color_Screen+0x6c4>)
 80107c8:	f7ef fd6e 	bl	80002a8 <__aeabi_dsub>
 80107cc:	2200      	movs	r2, #0
 80107ce:	4b6a      	ldr	r3, [pc, #424]	; (8010978 <GUI_Color_Screen+0x6c8>)
 80107d0:	f7ef fd6a 	bl	80002a8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 80107d4:	f7f0 f9f4 	bl	8000bc0 <__aeabi_d2uiz>
 80107d8:	b283      	uxth	r3, r0
 80107da:	9304      	str	r3, [sp, #16]
				125+colorimetry_LAB_old[1]*0.976-5, LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5, 12, Locus);}
 80107dc:	2200      	movs	r2, #0
 80107de:	4b67      	ldr	r3, [pc, #412]	; (801097c <GUI_Color_Screen+0x6cc>)
 80107e0:	4650      	mov	r0, sl
 80107e2:	4659      	mov	r1, fp
 80107e4:	f7ef fd62 	bl	80002ac <__adddf3>
 80107e8:	2200      	movs	r2, #0
 80107ea:	4b63      	ldr	r3, [pc, #396]	; (8010978 <GUI_Color_Screen+0x6c8>)
 80107ec:	f7ef fd5c 	bl	80002a8 <__aeabi_dsub>
			if(flag){		TFT_DrawCutBMP(125+11-1+colorimetry_LAB_old[1]*0.976-5, 150+LAB_LOCUS_SIZEY-1-125-colorimetry_LAB_old[2]*0.976-5,
 80107f0:	f7f0 f9e6 	bl	8000bc0 <__aeabi_d2uiz>
 80107f4:	b283      	uxth	r3, r0
 80107f6:	4642      	mov	r2, r8
 80107f8:	9305      	str	r3, [sp, #20]
 80107fa:	a153      	add	r1, pc, #332	; (adr r1, 8010948 <GUI_Color_Screen+0x698>)
 80107fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010800:	464b      	mov	r3, r9
 8010802:	f7ef fd51 	bl	80002a8 <__aeabi_dsub>
 8010806:	2200      	movs	r2, #0
 8010808:	4b5b      	ldr	r3, [pc, #364]	; (8010978 <GUI_Color_Screen+0x6c8>)
 801080a:	f7ef fd4d 	bl	80002a8 <__aeabi_dsub>
 801080e:	f7f0 f9d7 	bl	8000bc0 <__aeabi_d2uiz>
 8010812:	a34f      	add	r3, pc, #316	; (adr r3, 8010950 <GUI_Color_Screen+0x6a0>)
 8010814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010818:	fa1f f880 	uxth.w	r8, r0
 801081c:	4659      	mov	r1, fp
 801081e:	4650      	mov	r0, sl
 8010820:	f7ef fd44 	bl	80002ac <__adddf3>
 8010824:	2200      	movs	r2, #0
 8010826:	4b54      	ldr	r3, [pc, #336]	; (8010978 <GUI_Color_Screen+0x6c8>)
 8010828:	f7ef fd3e 	bl	80002a8 <__aeabi_dsub>
 801082c:	f7f0 f9c8 	bl	8000bc0 <__aeabi_d2uiz>
 8010830:	4a53      	ldr	r2, [pc, #332]	; (8010980 <GUI_Color_Screen+0x6d0>)
 8010832:	fa1f fe80 	uxth.w	lr, r0
 8010836:	e892 0003 	ldmia.w	r2, {r0, r1}
 801083a:	ab01      	add	r3, sp, #4
 801083c:	e883 0003 	stmia.w	r3, {r0, r1}
 8010840:	230c      	movs	r3, #12
 8010842:	9300      	str	r3, [sp, #0]
 8010844:	9a05      	ldr	r2, [sp, #20]
 8010846:	9b04      	ldr	r3, [sp, #16]
 8010848:	4641      	mov	r1, r8
 801084a:	4670      	mov	r0, lr
 801084c:	f00d fffc 	bl	801e848 <TFT_DrawCutBMP>
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010850:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 8010854:	f9b4 8002 	ldrsh.w	r8, [r4, #2]
				colorimetry_LAB_old[2] = colorimetry_LAB[2];
 8010858:	80b0      	strh	r0, [r6, #4]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 801085a:	ee07 0a90 	vmov	s15, r0
 801085e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				colorimetry_LAB_old[1] = colorimetry_LAB[1];
 8010862:	f8a6 8002 	strh.w	r8, [r6, #2]
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 4, TFT_White);
 8010866:	ee17 0a90 	vmov	r0, s15
 801086a:	f7ef fe7d 	bl	8000568 <__aeabi_f2d>
 801086e:	a334      	add	r3, pc, #208	; (adr r3, 8010940 <GUI_Color_Screen+0x690>)
 8010870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010874:	f7ef fecc 	bl	8000610 <__aeabi_dmul>
 8010878:	4602      	mov	r2, r0
 801087a:	460b      	mov	r3, r1
 801087c:	a136      	add	r1, pc, #216	; (adr r1, 8010958 <GUI_Color_Screen+0x6a8>)
 801087e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010882:	f7ef fd11 	bl	80002a8 <__aeabi_dsub>
 8010886:	f7f0 f973 	bl	8000b70 <__aeabi_d2iz>
 801088a:	ee07 8a90 	vmov	s15, r8
 801088e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010892:	b206      	sxth	r6, r0
 8010894:	ee17 0a90 	vmov	r0, s15
 8010898:	f7ef fe66 	bl	8000568 <__aeabi_f2d>
 801089c:	a328      	add	r3, pc, #160	; (adr r3, 8010940 <GUI_Color_Screen+0x690>)
 801089e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a2:	f7ef feb5 	bl	8000610 <__aeabi_dmul>
 80108a6:	2200      	movs	r2, #0
 80108a8:	4b36      	ldr	r3, [pc, #216]	; (8010984 <GUI_Color_Screen+0x6d4>)
 80108aa:	f7ef fcff 	bl	80002ac <__adddf3>
 80108ae:	f7f0 f95f 	bl	8000b70 <__aeabi_d2iz>
 80108b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80108b6:	2204      	movs	r2, #4
 80108b8:	4631      	mov	r1, r6
 80108ba:	b200      	sxth	r0, r0
 80108bc:	f00d fd61 	bl	801e382 <TFT_DrawFilledCircle>
				TFT_DrawFilledCircle(125+11+(float)colorimetry_LAB[1]*0.976, LAB_LOCUS_SIZEY-125+150-(float)colorimetry_LAB[2]*0.976, 2, TFT_Black);
 80108c0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80108c4:	ee07 0a90 	vmov	s15, r0
 80108c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80108cc:	ee17 0a90 	vmov	r0, s15
 80108d0:	f7ef fe4a 	bl	8000568 <__aeabi_f2d>
 80108d4:	a31a      	add	r3, pc, #104	; (adr r3, 8010940 <GUI_Color_Screen+0x690>)
 80108d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108da:	f7ef fe99 	bl	8000610 <__aeabi_dmul>
 80108de:	4602      	mov	r2, r0
 80108e0:	460b      	mov	r3, r1
 80108e2:	a11d      	add	r1, pc, #116	; (adr r1, 8010958 <GUI_Color_Screen+0x6a8>)
 80108e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108e8:	f7ef fcde 	bl	80002a8 <__aeabi_dsub>
 80108ec:	f7f0 f940 	bl	8000b70 <__aeabi_d2iz>
 80108f0:	b206      	sxth	r6, r0
 80108f2:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80108f6:	ee07 0a90 	vmov	s15, r0
 80108fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80108fe:	ee17 0a90 	vmov	r0, s15
 8010902:	f7ef fe31 	bl	8000568 <__aeabi_f2d>
 8010906:	a30e      	add	r3, pc, #56	; (adr r3, 8010940 <GUI_Color_Screen+0x690>)
 8010908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090c:	f7ef fe80 	bl	8000610 <__aeabi_dmul>
 8010910:	2200      	movs	r2, #0
 8010912:	4b1c      	ldr	r3, [pc, #112]	; (8010984 <GUI_Color_Screen+0x6d4>)
 8010914:	f7ef fcca 	bl	80002ac <__adddf3>
 8010918:	f7f0 f92a 	bl	8000b70 <__aeabi_d2iz>
 801091c:	2300      	movs	r3, #0
 801091e:	2202      	movs	r2, #2
 8010920:	4631      	mov	r1, r6
 8010922:	b200      	sxth	r0, r0
 8010924:	f00d fd2d 	bl	801e382 <TFT_DrawFilledCircle>
				GUI_Axes_Locus_Lab(125+11, LAB_LOCUS_SIZEY-125+150, 0);
 8010928:	2200      	movs	r2, #0
 801092a:	f240 1113 	movw	r1, #275	; 0x113
 801092e:	2088      	movs	r0, #136	; 0x88
 8010930:	f007 fe1c 	bl	801856c <GUI_Axes_Locus_Lab>
				flag = 1;
 8010934:	2301      	movs	r3, #1
 8010936:	702b      	strb	r3, [r5, #0]
				scr_refresh = 0;
 8010938:	4b13      	ldr	r3, [pc, #76]	; (8010988 <GUI_Color_Screen+0x6d8>)
 801093a:	2200      	movs	r2, #0
 801093c:	701a      	strb	r2, [r3, #0]
 801093e:	e5b2      	b.n	80104a6 <GUI_Color_Screen+0x1f6>
 8010940:	5a1cac08 	.word	0x5a1cac08
 8010944:	3fef3b64 	.word	0x3fef3b64
 8010948:	00000000 	.word	0x00000000
 801094c:	40712000 	.word	0x40712000
 8010950:	00000000 	.word	0x00000000
 8010954:	4060e000 	.word	0x4060e000
 8010958:	00000000 	.word	0x00000000
 801095c:	40713000 	.word	0x40713000
 8010960:	20000a4c 	.word	0x20000a4c
 8010964:	2008a7b8 	.word	0x2008a7b8
 8010968:	20000a4d 	.word	0x20000a4d
 801096c:	20004c95 	.word	0x20004c95
 8010970:	20004c7c 	.word	0x20004c7c
 8010974:	405f0000 	.word	0x405f0000
 8010978:	40140000 	.word	0x40140000
 801097c:	405f4000 	.word	0x405f4000
 8010980:	2008c280 	.word	0x2008c280
 8010984:	40610000 	.word	0x40610000
 8010988:	20004c9a 	.word	0x20004c9a

0801098c <GUI_ColorRend_Screen>:
void GUI_ColorRend_Screen(){
 801098c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 old_meas_type_L = 2;
 801098e:	4b39      	ldr	r3, [pc, #228]	; (8010a74 <GUI_ColorRend_Screen+0xe8>)
 8010990:	4d39      	ldr	r5, [pc, #228]	; (8010a78 <GUI_ColorRend_Screen+0xec>)
 8010992:	4c3a      	ldr	r4, [pc, #232]	; (8010a7c <GUI_ColorRend_Screen+0xf0>)
 8010994:	2202      	movs	r2, #2
 8010996:	701a      	strb	r2, [r3, #0]
	if(preGUI_screen_state != GUI_screen_state || Rotation_Screen_Rend_Old != Rotation_Screen_Rend){
 8010998:	4b39      	ldr	r3, [pc, #228]	; (8010a80 <GUI_ColorRend_Screen+0xf4>)
 801099a:	4a3a      	ldr	r2, [pc, #232]	; (8010a84 <GUI_ColorRend_Screen+0xf8>)
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	7812      	ldrb	r2, [r2, #0]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d103      	bne.n	80109ac <GUI_ColorRend_Screen+0x20>
 80109a4:	782a      	ldrb	r2, [r5, #0]
 80109a6:	7823      	ldrb	r3, [r4, #0]
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d02b      	beq.n	8010a04 <GUI_ColorRend_Screen+0x78>
	GUI_Panels();		
 80109ac:	f7fe fe1c 	bl	800f5e8 <GUI_Panels>
	oldLowSignal = 0;
 80109b0:	4a35      	ldr	r2, [pc, #212]	; (8010a88 <GUI_ColorRend_Screen+0xfc>)
 80109b2:	2300      	movs	r3, #0
 80109b4:	7013      	strb	r3, [r2, #0]
	oldHighSignal = 0;
 80109b6:	4a35      	ldr	r2, [pc, #212]	; (8010a8c <GUI_ColorRend_Screen+0x100>)
 80109b8:	7013      	strb	r3, [r2, #0]
	Rotation_Screen_Rend_Old = Rotation_Screen_Rend;
 80109ba:	7823      	ldrb	r3, [r4, #0]
 80109bc:	702b      	strb	r3, [r5, #0]
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 80109be:	4d34      	ldr	r5, [pc, #208]	; (8010a90 <GUI_ColorRend_Screen+0x104>)
 80109c0:	782a      	ldrb	r2, [r5, #0]
 80109c2:	2a00      	cmp	r2, #0
 80109c4:	d03c      	beq.n	8010a40 <GUI_ColorRend_Screen+0xb4>
 80109c6:	4b33      	ldr	r3, [pc, #204]	; (8010a94 <GUI_ColorRend_Screen+0x108>)
 80109c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80109cc:	f7f0 f918 	bl	8000c00 <__aeabi_d2f>
 80109d0:	210d      	movs	r1, #13
 80109d2:	ee00 0a10 	vmov	s0, r0
 80109d6:	2055      	movs	r0, #85	; 0x55
 80109d8:	f004 fe58 	bl	801568c <GUI_Bar_Measure>
	Prev_Inf_Screen = Color_Rendition_Screen;
 80109dc:	4b2e      	ldr	r3, [pc, #184]	; (8010a98 <GUI_ColorRend_Screen+0x10c>)
 80109de:	2206      	movs	r2, #6
 80109e0:	701a      	strb	r2, [r3, #0]
	if (Color_rend_Field&CRI_CQS){
 80109e2:	782b      	ldrb	r3, [r5, #0]
 80109e4:	07da      	lsls	r2, r3, #31
 80109e6:	d52d      	bpl.n	8010a44 <GUI_ColorRend_Screen+0xb8>
		CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 80109e8:	492c      	ldr	r1, [pc, #176]	; (8010a9c <GUI_ColorRend_Screen+0x110>)
 80109ea:	4b2d      	ldr	r3, [pc, #180]	; (8010aa0 <GUI_ColorRend_Screen+0x114>)
 80109ec:	4a2d      	ldr	r2, [pc, #180]	; (8010aa4 <GUI_ColorRend_Screen+0x118>)
 80109ee:	f991 1000 	ldrsb.w	r1, [r1]
 80109f2:	f993 3000 	ldrsb.w	r3, [r3]
 80109f6:	f992 2000 	ldrsb.w	r2, [r2]
 80109fa:	7820      	ldrb	r0, [r4, #0]
 80109fc:	9100      	str	r1, [sp, #0]
 80109fe:	492a      	ldr	r1, [pc, #168]	; (8010aa8 <GUI_ColorRend_Screen+0x11c>)
 8010a00:	f7fd f9ea 	bl	800ddd8 <CRI_Draw>
	if(Calc_ColorRend != Calc_ColorRend_old){
 8010a04:	4b29      	ldr	r3, [pc, #164]	; (8010aac <GUI_ColorRend_Screen+0x120>)
 8010a06:	781a      	ldrb	r2, [r3, #0]
 8010a08:	4b29      	ldr	r3, [pc, #164]	; (8010ab0 <GUI_ColorRend_Screen+0x124>)
 8010a0a:	7819      	ldrb	r1, [r3, #0]
 8010a0c:	4291      	cmp	r1, r2
 8010a0e:	d012      	beq.n	8010a36 <GUI_ColorRend_Screen+0xaa>
		Calc_ColorRend_old = Calc_ColorRend;
 8010a10:	701a      	strb	r2, [r3, #0]
		if (Color_rend_Field&CRI_CQS){
 8010a12:	4b1f      	ldr	r3, [pc, #124]	; (8010a90 <GUI_ColorRend_Screen+0x104>)
 8010a14:	781b      	ldrb	r3, [r3, #0]
 8010a16:	07db      	lsls	r3, r3, #31
 8010a18:	d520      	bpl.n	8010a5c <GUI_ColorRend_Screen+0xd0>
			CRI_Draw(Rotation_Screen_Rend, Ri, Ra, Rall, R9);
 8010a1a:	4920      	ldr	r1, [pc, #128]	; (8010a9c <GUI_ColorRend_Screen+0x110>)
 8010a1c:	4b20      	ldr	r3, [pc, #128]	; (8010aa0 <GUI_ColorRend_Screen+0x114>)
 8010a1e:	4a21      	ldr	r2, [pc, #132]	; (8010aa4 <GUI_ColorRend_Screen+0x118>)
 8010a20:	f991 1000 	ldrsb.w	r1, [r1]
 8010a24:	f993 3000 	ldrsb.w	r3, [r3]
 8010a28:	f992 2000 	ldrsb.w	r2, [r2]
 8010a2c:	7820      	ldrb	r0, [r4, #0]
 8010a2e:	9100      	str	r1, [sp, #0]
 8010a30:	491d      	ldr	r1, [pc, #116]	; (8010aa8 <GUI_ColorRend_Screen+0x11c>)
 8010a32:	f7fd f9d1 	bl	800ddd8 <CRI_Draw>
}
 8010a36:	b003      	add	sp, #12
 8010a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	GUI_SignalLevel();
 8010a3c:	f7ff bb3a 	b.w	80100b4 <GUI_SignalLevel>
	GUI_Bar_Measure(85, 13, Color_rend_Field? bar_CRI : bar_CQS);
 8010a40:	4b1c      	ldr	r3, [pc, #112]	; (8010ab4 <GUI_ColorRend_Screen+0x128>)
 8010a42:	e7c1      	b.n	80109c8 <GUI_ColorRend_Screen+0x3c>
		CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 8010a44:	491c      	ldr	r1, [pc, #112]	; (8010ab8 <GUI_ColorRend_Screen+0x12c>)
 8010a46:	4b1d      	ldr	r3, [pc, #116]	; (8010abc <GUI_ColorRend_Screen+0x130>)
 8010a48:	4a1d      	ldr	r2, [pc, #116]	; (8010ac0 <GUI_ColorRend_Screen+0x134>)
 8010a4a:	7809      	ldrb	r1, [r1, #0]
 8010a4c:	781b      	ldrb	r3, [r3, #0]
 8010a4e:	7812      	ldrb	r2, [r2, #0]
 8010a50:	7820      	ldrb	r0, [r4, #0]
 8010a52:	9100      	str	r1, [sp, #0]
 8010a54:	491b      	ldr	r1, [pc, #108]	; (8010ac4 <GUI_ColorRend_Screen+0x138>)
 8010a56:	f7fb f995 	bl	800bd84 <CQS_Draw>
 8010a5a:	e7d3      	b.n	8010a04 <GUI_ColorRend_Screen+0x78>
			CQS_Draw(Rotation_Screen_Rend, Q_i, Qa, Qp, Qf);
 8010a5c:	4916      	ldr	r1, [pc, #88]	; (8010ab8 <GUI_ColorRend_Screen+0x12c>)
 8010a5e:	4b17      	ldr	r3, [pc, #92]	; (8010abc <GUI_ColorRend_Screen+0x130>)
 8010a60:	4a17      	ldr	r2, [pc, #92]	; (8010ac0 <GUI_ColorRend_Screen+0x134>)
 8010a62:	7809      	ldrb	r1, [r1, #0]
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	7812      	ldrb	r2, [r2, #0]
 8010a68:	7820      	ldrb	r0, [r4, #0]
 8010a6a:	9100      	str	r1, [sp, #0]
 8010a6c:	4915      	ldr	r1, [pc, #84]	; (8010ac4 <GUI_ColorRend_Screen+0x138>)
 8010a6e:	f7fb f989 	bl	800bd84 <CQS_Draw>
 8010a72:	e7e0      	b.n	8010a36 <GUI_ColorRend_Screen+0xaa>
 8010a74:	20000230 	.word	0x20000230
 8010a78:	2008bce8 	.word	0x2008bce8
 8010a7c:	20004c79 	.word	0x20004c79
 8010a80:	2000022a 	.word	0x2000022a
 8010a84:	20004c71 	.word	0x20004c71
 8010a88:	20004c97 	.word	0x20004c97
 8010a8c:	20004c96 	.word	0x20004c96
 8010a90:	20004c70 	.word	0x20004c70
 8010a94:	2008bbf0 	.word	0x2008bbf0
 8010a98:	2008bce5 	.word	0x2008bce5
 8010a9c:	20003bc8 	.word	0x20003bc8
 8010aa0:	20003bca 	.word	0x20003bca
 8010aa4:	20003bc9 	.word	0x20003bc9
 8010aa8:	20003bcb 	.word	0x20003bcb
 8010aac:	20004c6d 	.word	0x20004c6d
 8010ab0:	20004c6e 	.word	0x20004c6e
 8010ab4:	2008b920 	.word	0x2008b920
 8010ab8:	20002ba4 	.word	0x20002ba4
 8010abc:	20002ba5 	.word	0x20002ba5
 8010ac0:	20002ba3 	.word	0x20002ba3
 8010ac4:	20002b94 	.word	0x20002b94

08010ac8 <GUI_Display_Refresh>:

void GUI_Display_Refresh()
{
 8010ac8:	b508      	push	{r3, lr}
	
	switch(GUI_screen_state){
 8010aca:	4b2d      	ldr	r3, [pc, #180]	; (8010b80 <GUI_Display_Refresh+0xb8>)
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	3b01      	subs	r3, #1
 8010ad0:	2b11      	cmp	r3, #17
 8010ad2:	d80f      	bhi.n	8010af4 <GUI_Display_Refresh+0x2c>
 8010ad4:	e8df f003 	tbb	[pc, r3]
 8010ad8:	17130f09 	.word	0x17130f09
 8010adc:	27231f1b 	.word	0x27231f1b
 8010ae0:	37332f2b 	.word	0x37332f2b
 8010ae4:	47433f3b 	.word	0x47433f3b
 8010ae8:	4f4b      	.short	0x4f4b
		case Measure_Screen: GUI_Measure_Screen(); preGUI_screen_state = Measure_Screen; break;
 8010aea:	f7ff fb45 	bl	8010178 <GUI_Measure_Screen>
 8010aee:	2201      	movs	r2, #1
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
					
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 8010af0:	4b24      	ldr	r3, [pc, #144]	; (8010b84 <GUI_Display_Refresh+0xbc>)
 8010af2:	701a      	strb	r2, [r3, #0]
 8010af4:	bd08      	pop	{r3, pc}
		case Measure2_Screen: GUI_Measure2_Screen(); preGUI_screen_state = Measure2_Screen; break;
 8010af6:	f7ff fb6d 	bl	80101d4 <GUI_Measure2_Screen>
 8010afa:	2202      	movs	r2, #2
 8010afc:	e7f8      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case Measure3_Screen: GUI_Measure3_Screen(); preGUI_screen_state = Measure3_Screen; break;
 8010afe:	f7ff fba1 	bl	8010244 <GUI_Measure3_Screen>
 8010b02:	2203      	movs	r2, #3
 8010b04:	e7f4      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case Graph_Screen: GUI_Graph_Screen(); preGUI_screen_state = Graph_Screen; break;
 8010b06:	f7ff f99b 	bl	800fe40 <GUI_Graph_Screen>
 8010b0a:	2204      	movs	r2, #4
 8010b0c:	e7f0      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case Color_Screen: GUI_Color_Screen(); preGUI_screen_state = Color_Screen; break; 
 8010b0e:	f7ff fbcf 	bl	80102b0 <GUI_Color_Screen>
 8010b12:	2205      	movs	r2, #5
 8010b14:	e7ec      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case Color_Rendition_Screen: GUI_ColorRend_Screen(); preGUI_screen_state = Color_Rendition_Screen; break;		
 8010b16:	f7ff ff39 	bl	801098c <GUI_ColorRend_Screen>
 8010b1a:	2206      	movs	r2, #6
 8010b1c:	e7e8      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case DataSet1_Screen: GUI_DataSet1_Screen();  preGUI_screen_state = DataSet1_Screen; break;
 8010b1e:	f7fe fda1 	bl	800f664 <GUI_DataSet1_Screen>
 8010b22:	2207      	movs	r2, #7
 8010b24:	e7e4      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case DataSet2_Screen: GUI_DataSet2_Screen();  preGUI_screen_state = DataSet2_Screen; break;
 8010b26:	f7fe fe01 	bl	800f72c <GUI_DataSet2_Screen>
 8010b2a:	2208      	movs	r2, #8
 8010b2c:	e7e0      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case DataSet3_Screen: GUI_DataSet3_Screen();  preGUI_screen_state = DataSet3_Screen; break;
 8010b2e:	f7fe fed5 	bl	800f8dc <GUI_DataSet3_Screen>
 8010b32:	2209      	movs	r2, #9
 8010b34:	e7dc      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case DataSet4_Screen: GUI_DataSet4_Screen();  preGUI_screen_state = DataSet4_Screen; break;
 8010b36:	f7fe ff45 	bl	800f9c4 <GUI_DataSet4_Screen>
 8010b3a:	220a      	movs	r2, #10
 8010b3c:	e7d8      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case DataSet5_Screen: GUI_DataSet5_Screen();  preGUI_screen_state = DataSet5_Screen; break;
 8010b3e:	f7fe ffe3 	bl	800fb08 <GUI_DataSet5_Screen>
 8010b42:	220b      	movs	r2, #11
 8010b44:	e7d4      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case GraphSet1_Screen: GUI_GraphSet1_Screen(); preGUI_screen_state = GraphSet1_Screen; break;
 8010b46:	f7ff f819 	bl	800fb7c <GUI_GraphSet1_Screen>
 8010b4a:	220c      	movs	r2, #12
 8010b4c:	e7d0      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case GraphSet2_Screen: GUI_GraphSet2_Screen(); preGUI_screen_state = GraphSet2_Screen; break;
 8010b4e:	f7ff f85d 	bl	800fc0c <GUI_GraphSet2_Screen>
 8010b52:	220d      	movs	r2, #13
 8010b54:	e7cc      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case ColorSet1_Screen: GUI_ColorSet1_Screen(); preGUI_screen_state = ColorSet1_Screen; break;
 8010b56:	f7ff f893 	bl	800fc80 <GUI_ColorSet1_Screen>
 8010b5a:	220e      	movs	r2, #14
 8010b5c:	e7c8      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case ColorSet2_Screen: GUI_ColorSet2_Screen(); preGUI_screen_state = ColorSet2_Screen; break;
 8010b5e:	f7ff f8d3 	bl	800fd08 <GUI_ColorSet2_Screen>
 8010b62:	220f      	movs	r2, #15
 8010b64:	e7c4      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case ColorRendSet_Screen:GUI_ColorRendSet_Screen();preGUI_screen_state = ColorRendSet_Screen; break;
 8010b66:	f7ff f90b 	bl	800fd80 <GUI_ColorRendSet_Screen>
 8010b6a:	2210      	movs	r2, #16
 8010b6c:	e7c0      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case Information_Screen : GUI_Information_Screen();preGUI_screen_state = Information_Screen; break;
 8010b6e:	f7fe fc19 	bl	800f3a4 <GUI_Information_Screen>
 8010b72:	2211      	movs	r2, #17
 8010b74:	e7bc      	b.n	8010af0 <GUI_Display_Refresh+0x28>
		case SD_Write_Screen : GUI_SD_Write_Screen();preGUI_screen_state = SD_Write_Screen; break;
 8010b76:	f7fe fc63 	bl	800f440 <GUI_SD_Write_Screen>
 8010b7a:	2212      	movs	r2, #18
 8010b7c:	e7b8      	b.n	8010af0 <GUI_Display_Refresh+0x28>
 8010b7e:	bf00      	nop
 8010b80:	20004c71 	.word	0x20004c71
 8010b84:	2000022a 	.word	0x2000022a

08010b88 <GUI_Touch_Processing>:
		default: break;
	}
}

void GUI_Touch_Processing()
{
 8010b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b8c:	b087      	sub	sp, #28
	uint16_t Touch_x = 0, Touch_y = 0;
 8010b8e:	aa06      	add	r2, sp, #24
 8010b90:	2300      	movs	r3, #0
 8010b92:	f822 3d02 	strh.w	r3, [r2, #-2]!
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 8010b96:	a905      	add	r1, sp, #20
 8010b98:	2070      	movs	r0, #112	; 0x70
	uint16_t Touch_x = 0, Touch_y = 0;
 8010b9a:	f8ad 3014 	strh.w	r3, [sp, #20]
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 8010b9e:	f00d f8e3 	bl	801dd68 <TS_Get_XY1>
	switch(GUI_screen_state){
 8010ba2:	4a87      	ldr	r2, [pc, #540]	; (8010dc0 <GUI_Touch_Processing+0x238>)
 8010ba4:	7813      	ldrb	r3, [r2, #0]
 8010ba6:	3b01      	subs	r3, #1
 8010ba8:	4693      	mov	fp, r2
 8010baa:	2b11      	cmp	r3, #17
 8010bac:	f203 85a4 	bhi.w	80146f8 <GUI_Touch_Processing+0x3b70>
 8010bb0:	e8df f013 	tbh	[pc, r3, lsl #1]
 8010bb4:	01140012 	.word	0x01140012
 8010bb8:	02cb01dc 	.word	0x02cb01dc
 8010bbc:	04700395 	.word	0x04700395
 8010bc0:	08650607 	.word	0x08650607
 8010bc4:	0d130aed 	.word	0x0d130aed
 8010bc8:	1270111e 	.word	0x1270111e
 8010bcc:	161b14be 	.word	0x161b14be
 8010bd0:	1a3c186c 	.word	0x1a3c186c
 8010bd4:	00781d1d 	.word	0x00781d1d
		
		case Measure_Screen:
			preGUI_screen_state = GUI_screen_state;
 8010bd8:	4b7a      	ldr	r3, [pc, #488]	; (8010dc4 <GUI_Touch_Processing+0x23c>)
		
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010bda:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 8010bde:	2401      	movs	r4, #1
 8010be0:	701c      	strb	r4, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010be2:	f7ef fcaf 	bl	8000544 <__aeabi_i2d>
 8010be6:	4606      	mov	r6, r0
 8010be8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8010bec:	460f      	mov	r7, r1
 8010bee:	f7ef fca9 	bl	8000544 <__aeabi_i2d>
 8010bf2:	a365      	add	r3, pc, #404	; (adr r3, 8010d88 <GUI_Touch_Processing+0x200>)
 8010bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf8:	4680      	mov	r8, r0
 8010bfa:	4689      	mov	r9, r1
 8010bfc:	f7ef ff8e 	bl	8000b1c <__aeabi_dcmpge>
 8010c00:	b900      	cbnz	r0, 8010c04 <GUI_Touch_Processing+0x7c>
 8010c02:	4604      	mov	r4, r0
 8010c04:	2200      	movs	r2, #0
 8010c06:	4b70      	ldr	r3, [pc, #448]	; (8010dc8 <GUI_Touch_Processing+0x240>)
 8010c08:	4640      	mov	r0, r8
 8010c0a:	4649      	mov	r1, r9
 8010c0c:	b2e4      	uxtb	r4, r4
 8010c0e:	f04f 0501 	mov.w	r5, #1
 8010c12:	f7ef ff79 	bl	8000b08 <__aeabi_dcmple>
 8010c16:	b900      	cbnz	r0, 8010c1a <GUI_Touch_Processing+0x92>
 8010c18:	4605      	mov	r5, r0
 8010c1a:	a35d      	add	r3, pc, #372	; (adr r3, 8010d90 <GUI_Touch_Processing+0x208>)
 8010c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c20:	4630      	mov	r0, r6
 8010c22:	4639      	mov	r1, r7
 8010c24:	b2ed      	uxtb	r5, r5
 8010c26:	f04f 0801 	mov.w	r8, #1
 8010c2a:	f7ef ff77 	bl	8000b1c <__aeabi_dcmpge>
 8010c2e:	b900      	cbnz	r0, 8010c32 <GUI_Touch_Processing+0xaa>
 8010c30:	4680      	mov	r8, r0
 8010c32:	a359      	add	r3, pc, #356	; (adr r3, 8010d98 <GUI_Touch_Processing+0x210>)
 8010c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c38:	4630      	mov	r0, r6
 8010c3a:	4639      	mov	r1, r7
 8010c3c:	f04f 0901 	mov.w	r9, #1
 8010c40:	f7ef ff62 	bl	8000b08 <__aeabi_dcmple>
 8010c44:	b900      	cbnz	r0, 8010c48 <GUI_Touch_Processing+0xc0>
 8010c46:	4681      	mov	r9, r0
 8010c48:	ea08 0309 	and.w	r3, r8, r9
 8010c4c:	421c      	tst	r4, r3
 8010c4e:	d003      	beq.n	8010c58 <GUI_Touch_Processing+0xd0>
 8010c50:	b115      	cbz	r5, 8010c58 <GUI_Touch_Processing+0xd0>
				{	
					GUI_screen_state = DataSet1_Screen;
 8010c52:	2307      	movs	r3, #7
 8010c54:	f88b 3000 	strb.w	r3, [fp]
				} 
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //down
 8010c58:	a351      	add	r3, pc, #324	; (adr r3, 8010da0 <GUI_Touch_Processing+0x218>)
 8010c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c5e:	4630      	mov	r0, r6
 8010c60:	4639      	mov	r1, r7
 8010c62:	402c      	ands	r4, r5
 8010c64:	f04f 0501 	mov.w	r5, #1
 8010c68:	f7ef ff58 	bl	8000b1c <__aeabi_dcmpge>
 8010c6c:	b900      	cbnz	r0, 8010c70 <GUI_Touch_Processing+0xe8>
 8010c6e:	4605      	mov	r5, r0
 8010c70:	a34d      	add	r3, pc, #308	; (adr r3, 8010da8 <GUI_Touch_Processing+0x220>)
 8010c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c76:	4630      	mov	r0, r6
 8010c78:	4639      	mov	r1, r7
 8010c7a:	f04f 0801 	mov.w	r8, #1
 8010c7e:	f7ef ff43 	bl	8000b08 <__aeabi_dcmple>
 8010c82:	b900      	cbnz	r0, 8010c86 <GUI_Touch_Processing+0xfe>
 8010c84:	4680      	mov	r8, r0
 8010c86:	ea05 0508 	and.w	r5, r5, r8
 8010c8a:	07ea      	lsls	r2, r5, #31
 8010c8c:	d50d      	bpl.n	8010caa <GUI_Touch_Processing+0x122>
 8010c8e:	b164      	cbz	r4, 8010caa <GUI_Touch_Processing+0x122>
				{	
					GUI_screen_state = (screen_count > 0) ? Measure2_Screen : Measure_Screen; 
 8010c90:	4b4e      	ldr	r3, [pc, #312]	; (8010dcc <GUI_Touch_Processing+0x244>)
 8010c92:	781b      	ldrb	r3, [r3, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	bf0c      	ite	eq
 8010c98:	2001      	moveq	r0, #1
 8010c9a:	2002      	movne	r0, #2
 8010c9c:	f88b 0000 	strb.w	r0, [fp]
					WriteFLASH_Screen(GUI_screen_state);
 8010ca0:	f00b f95e 	bl	801bf60 <WriteFLASH_Screen>

		break;
				
		default: preGUI_screen_state = Measure_Screen;
			}
 8010ca4:	b007      	add	sp, #28
 8010ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8010caa:	a33f      	add	r3, pc, #252	; (adr r3, 8010da8 <GUI_Touch_Processing+0x220>)
 8010cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb0:	4630      	mov	r0, r6
 8010cb2:	4639      	mov	r1, r7
 8010cb4:	f04f 0501 	mov.w	r5, #1
 8010cb8:	f7ef ff30 	bl	8000b1c <__aeabi_dcmpge>
 8010cbc:	b900      	cbnz	r0, 8010cc0 <GUI_Touch_Processing+0x138>
 8010cbe:	4605      	mov	r5, r0
 8010cc0:	a33b      	add	r3, pc, #236	; (adr r3, 8010db0 <GUI_Touch_Processing+0x228>)
 8010cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc6:	4630      	mov	r0, r6
 8010cc8:	4639      	mov	r1, r7
 8010cca:	f04f 0801 	mov.w	r8, #1
 8010cce:	f7ef ff1b 	bl	8000b08 <__aeabi_dcmple>
 8010cd2:	b900      	cbnz	r0, 8010cd6 <GUI_Touch_Processing+0x14e>
 8010cd4:	4680      	mov	r8, r0
 8010cd6:	ea05 0508 	and.w	r5, r5, r8
 8010cda:	07eb      	lsls	r3, r5, #31
 8010cdc:	d507      	bpl.n	8010cee <GUI_Touch_Processing+0x166>
 8010cde:	b134      	cbz	r4, 8010cee <GUI_Touch_Processing+0x166>
					WriteFLASH_Screen(Graph_Screen);
 8010ce0:	2004      	movs	r0, #4
 8010ce2:	f00b f93d 	bl	801bf60 <WriteFLASH_Screen>
					GUI_screen_state =  Graph_Screen;
 8010ce6:	2304      	movs	r3, #4
 8010ce8:	f88b 3000 	strb.w	r3, [fp]
 8010cec:	e7da      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8010cee:	a32a      	add	r3, pc, #168	; (adr r3, 8010d98 <GUI_Touch_Processing+0x210>)
 8010cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf4:	4630      	mov	r0, r6
 8010cf6:	4639      	mov	r1, r7
 8010cf8:	f04f 0501 	mov.w	r5, #1
 8010cfc:	f7ef ff0e 	bl	8000b1c <__aeabi_dcmpge>
 8010d00:	b900      	cbnz	r0, 8010d04 <GUI_Touch_Processing+0x17c>
 8010d02:	4605      	mov	r5, r0
 8010d04:	a32c      	add	r3, pc, #176	; (adr r3, 8010db8 <GUI_Touch_Processing+0x230>)
 8010d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d0a:	4630      	mov	r0, r6
 8010d0c:	4639      	mov	r1, r7
 8010d0e:	f04f 0801 	mov.w	r8, #1
 8010d12:	f7ef fef9 	bl	8000b08 <__aeabi_dcmple>
 8010d16:	b900      	cbnz	r0, 8010d1a <GUI_Touch_Processing+0x192>
 8010d18:	4680      	mov	r8, r0
 8010d1a:	ea05 0508 	and.w	r5, r5, r8
 8010d1e:	07ed      	lsls	r5, r5, #31
 8010d20:	d508      	bpl.n	8010d34 <GUI_Touch_Processing+0x1ac>
 8010d22:	b13c      	cbz	r4, 8010d34 <GUI_Touch_Processing+0x1ac>
					if(!SD_Detect){if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}}
 8010d24:	4b2a      	ldr	r3, [pc, #168]	; (8010dd0 <GUI_Touch_Processing+0x248>)
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d1bb      	bne.n	8010ca4 <GUI_Touch_Processing+0x11c>
 8010d2c:	4b24      	ldr	r3, [pc, #144]	; (8010dc0 <GUI_Touch_Processing+0x238>)
 8010d2e:	2212      	movs	r2, #18
 8010d30:	701a      	strb	r2, [r3, #0]
 8010d32:	e7b7      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 8010d34:	a320      	add	r3, pc, #128	; (adr r3, 8010db8 <GUI_Touch_Processing+0x230>)
 8010d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3a:	4630      	mov	r0, r6
 8010d3c:	4639      	mov	r1, r7
 8010d3e:	f04f 0501 	mov.w	r5, #1
 8010d42:	f7ef feeb 	bl	8000b1c <__aeabi_dcmpge>
 8010d46:	b900      	cbnz	r0, 8010d4a <GUI_Touch_Processing+0x1c2>
 8010d48:	4605      	mov	r5, r0
 8010d4a:	a315      	add	r3, pc, #84	; (adr r3, 8010da0 <GUI_Touch_Processing+0x218>)
 8010d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d50:	4630      	mov	r0, r6
 8010d52:	4639      	mov	r1, r7
 8010d54:	f04f 0801 	mov.w	r8, #1
 8010d58:	f7ef fed6 	bl	8000b08 <__aeabi_dcmple>
 8010d5c:	b900      	cbnz	r0, 8010d60 <GUI_Touch_Processing+0x1d8>
 8010d5e:	4680      	mov	r8, r0
 8010d60:	ea05 0508 	and.w	r5, r5, r8
 8010d64:	07e8      	lsls	r0, r5, #31
 8010d66:	d59d      	bpl.n	8010ca4 <GUI_Touch_Processing+0x11c>
 8010d68:	2c00      	cmp	r4, #0
 8010d6a:	d09b      	beq.n	8010ca4 <GUI_Touch_Processing+0x11c>
						pause = !pause;
 8010d6c:	4a19      	ldr	r2, [pc, #100]	; (8010dd4 <GUI_Touch_Processing+0x24c>)
						GUI_Bar_Measure(85, 13, 0.0);
 8010d6e:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8010dd8 <GUI_Touch_Processing+0x250>
						pause = !pause;
 8010d72:	7813      	ldrb	r3, [r2, #0]
 8010d74:	fab3 f383 	clz	r3, r3
 8010d78:	095b      	lsrs	r3, r3, #5
						GUI_Bar_Measure(85, 13, 0.0);
 8010d7a:	210d      	movs	r1, #13
 8010d7c:	2055      	movs	r0, #85	; 0x55
						pause = !pause;
 8010d7e:	7013      	strb	r3, [r2, #0]
						GUI_Bar_Measure(85, 13, 0.0);
 8010d80:	f004 fc84 	bl	801568c <GUI_Bar_Measure>
 8010d84:	e78e      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
 8010d86:	bf00      	nop
 8010d88:	99999999 	.word	0x99999999
 8010d8c:	4091a399 	.word	0x4091a399
 8010d90:	33333333 	.word	0x33333333
 8010d94:	40053333 	.word	0x40053333
 8010d98:	00000000 	.word	0x00000000
 8010d9c:	40623800 	.word	0x40623800
 8010da0:	33333333 	.word	0x33333333
 8010da4:	407aff33 	.word	0x407aff33
 8010da8:	66666666 	.word	0x66666666
 8010dac:	4081f866 	.word	0x4081f866
 8010db0:	33333333 	.word	0x33333333
 8010db4:	40867133 	.word	0x40867133
 8010db8:	99999999 	.word	0x99999999
 8010dbc:	40720d99 	.word	0x40720d99
 8010dc0:	20004c71 	.word	0x20004c71
 8010dc4:	2000022a 	.word	0x2000022a
 8010dc8:	4093e000 	.word	0x4093e000
 8010dcc:	20004c9b 	.word	0x20004c9b
 8010dd0:	20090e90 	.word	0x20090e90
 8010dd4:	20004c98 	.word	0x20004c98
 8010dd8:	00000000 	.word	0x00000000
			preGUI_screen_state = GUI_screen_state;
 8010ddc:	4ba4      	ldr	r3, [pc, #656]	; (8011070 <GUI_Touch_Processing+0x4e8>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010dde:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 8010de2:	2202      	movs	r2, #2
 8010de4:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010de6:	f7ef fbad 	bl	8000544 <__aeabi_i2d>
 8010dea:	4606      	mov	r6, r0
 8010dec:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8010df0:	460f      	mov	r7, r1
 8010df2:	f7ef fba7 	bl	8000544 <__aeabi_i2d>
 8010df6:	a390      	add	r3, pc, #576	; (adr r3, 8011038 <GUI_Touch_Processing+0x4b0>)
 8010df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dfc:	4680      	mov	r8, r0
 8010dfe:	4689      	mov	r9, r1
 8010e00:	f04f 0501 	mov.w	r5, #1
 8010e04:	f7ef fe8a 	bl	8000b1c <__aeabi_dcmpge>
 8010e08:	b900      	cbnz	r0, 8010e0c <GUI_Touch_Processing+0x284>
 8010e0a:	4605      	mov	r5, r0
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	4b99      	ldr	r3, [pc, #612]	; (8011074 <GUI_Touch_Processing+0x4ec>)
 8010e10:	4640      	mov	r0, r8
 8010e12:	4649      	mov	r1, r9
 8010e14:	b2ed      	uxtb	r5, r5
 8010e16:	f04f 0401 	mov.w	r4, #1
 8010e1a:	f7ef fe75 	bl	8000b08 <__aeabi_dcmple>
 8010e1e:	b900      	cbnz	r0, 8010e22 <GUI_Touch_Processing+0x29a>
 8010e20:	4604      	mov	r4, r0
 8010e22:	a387      	add	r3, pc, #540	; (adr r3, 8011040 <GUI_Touch_Processing+0x4b8>)
 8010e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e28:	4630      	mov	r0, r6
 8010e2a:	4639      	mov	r1, r7
 8010e2c:	b2e4      	uxtb	r4, r4
 8010e2e:	f04f 0801 	mov.w	r8, #1
 8010e32:	f7ef fe73 	bl	8000b1c <__aeabi_dcmpge>
 8010e36:	b900      	cbnz	r0, 8010e3a <GUI_Touch_Processing+0x2b2>
 8010e38:	4680      	mov	r8, r0
 8010e3a:	a383      	add	r3, pc, #524	; (adr r3, 8011048 <GUI_Touch_Processing+0x4c0>)
 8010e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e40:	4630      	mov	r0, r6
 8010e42:	4639      	mov	r1, r7
 8010e44:	f04f 0901 	mov.w	r9, #1
 8010e48:	f7ef fe5e 	bl	8000b08 <__aeabi_dcmple>
 8010e4c:	b900      	cbnz	r0, 8010e50 <GUI_Touch_Processing+0x2c8>
 8010e4e:	4681      	mov	r9, r0
 8010e50:	ea08 0309 	and.w	r3, r8, r9
 8010e54:	421d      	tst	r5, r3
 8010e56:	d003      	beq.n	8010e60 <GUI_Touch_Processing+0x2d8>
 8010e58:	b114      	cbz	r4, 8010e60 <GUI_Touch_Processing+0x2d8>
					GUI_screen_state = DataSet1_Screen;
 8010e5a:	2307      	movs	r3, #7
 8010e5c:	f88b 3000 	strb.w	r3, [fp]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010e60:	a37b      	add	r3, pc, #492	; (adr r3, 8011050 <GUI_Touch_Processing+0x4c8>)
 8010e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e66:	4630      	mov	r0, r6
 8010e68:	4639      	mov	r1, r7
 8010e6a:	402c      	ands	r4, r5
 8010e6c:	f04f 0501 	mov.w	r5, #1
 8010e70:	f7ef fe54 	bl	8000b1c <__aeabi_dcmpge>
 8010e74:	b900      	cbnz	r0, 8010e78 <GUI_Touch_Processing+0x2f0>
 8010e76:	4605      	mov	r5, r0
 8010e78:	a377      	add	r3, pc, #476	; (adr r3, 8011058 <GUI_Touch_Processing+0x4d0>)
 8010e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e7e:	4630      	mov	r0, r6
 8010e80:	4639      	mov	r1, r7
 8010e82:	f04f 0801 	mov.w	r8, #1
 8010e86:	f7ef fe3f 	bl	8000b08 <__aeabi_dcmple>
 8010e8a:	b900      	cbnz	r0, 8010e8e <GUI_Touch_Processing+0x306>
 8010e8c:	4680      	mov	r8, r0
 8010e8e:	ea05 0508 	and.w	r5, r5, r8
 8010e92:	07e9      	lsls	r1, r5, #31
 8010e94:	d50b      	bpl.n	8010eae <GUI_Touch_Processing+0x326>
 8010e96:	b154      	cbz	r4, 8010eae <GUI_Touch_Processing+0x326>
					GUI_screen_state = (screen_count > 1) ? Measure3_Screen : Measure_Screen; 
 8010e98:	4b77      	ldr	r3, [pc, #476]	; (8011078 <GUI_Touch_Processing+0x4f0>)
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	2b02      	cmp	r3, #2
 8010e9e:	bf34      	ite	cc
 8010ea0:	2001      	movcc	r0, #1
 8010ea2:	2003      	movcs	r0, #3
 8010ea4:	f88b 0000 	strb.w	r0, [fp]
					WriteFLASH_Screen(GUI_screen_state);
 8010ea8:	f00b f85a 	bl	801bf60 <WriteFLASH_Screen>
 8010eac:	e6fa      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8010eae:	a36a      	add	r3, pc, #424	; (adr r3, 8011058 <GUI_Touch_Processing+0x4d0>)
 8010eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eb4:	4630      	mov	r0, r6
 8010eb6:	4639      	mov	r1, r7
 8010eb8:	f04f 0501 	mov.w	r5, #1
 8010ebc:	f7ef fe2e 	bl	8000b1c <__aeabi_dcmpge>
 8010ec0:	b900      	cbnz	r0, 8010ec4 <GUI_Touch_Processing+0x33c>
 8010ec2:	4605      	mov	r5, r0
 8010ec4:	a366      	add	r3, pc, #408	; (adr r3, 8011060 <GUI_Touch_Processing+0x4d8>)
 8010ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eca:	4630      	mov	r0, r6
 8010ecc:	4639      	mov	r1, r7
 8010ece:	f04f 0801 	mov.w	r8, #1
 8010ed2:	f7ef fe19 	bl	8000b08 <__aeabi_dcmple>
 8010ed6:	b900      	cbnz	r0, 8010eda <GUI_Touch_Processing+0x352>
 8010ed8:	4680      	mov	r8, r0
 8010eda:	ea05 0508 	and.w	r5, r5, r8
 8010ede:	07ea      	lsls	r2, r5, #31
 8010ee0:	d502      	bpl.n	8010ee8 <GUI_Touch_Processing+0x360>
 8010ee2:	2c00      	cmp	r4, #0
 8010ee4:	f47f aefc 	bne.w	8010ce0 <GUI_Touch_Processing+0x158>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8010ee8:	a357      	add	r3, pc, #348	; (adr r3, 8011048 <GUI_Touch_Processing+0x4c0>)
 8010eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010eee:	4630      	mov	r0, r6
 8010ef0:	4639      	mov	r1, r7
 8010ef2:	f04f 0501 	mov.w	r5, #1
 8010ef6:	f7ef fe11 	bl	8000b1c <__aeabi_dcmpge>
 8010efa:	b900      	cbnz	r0, 8010efe <GUI_Touch_Processing+0x376>
 8010efc:	4605      	mov	r5, r0
 8010efe:	a35a      	add	r3, pc, #360	; (adr r3, 8011068 <GUI_Touch_Processing+0x4e0>)
 8010f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f04:	4630      	mov	r0, r6
 8010f06:	4639      	mov	r1, r7
 8010f08:	f04f 0801 	mov.w	r8, #1
 8010f0c:	f7ef fdfc 	bl	8000b08 <__aeabi_dcmple>
 8010f10:	b900      	cbnz	r0, 8010f14 <GUI_Touch_Processing+0x38c>
 8010f12:	4680      	mov	r8, r0
 8010f14:	ea05 0508 	and.w	r5, r5, r8
 8010f18:	07eb      	lsls	r3, r5, #31
 8010f1a:	d502      	bpl.n	8010f22 <GUI_Touch_Processing+0x39a>
 8010f1c:	2c00      	cmp	r4, #0
 8010f1e:	f47f af01 	bne.w	8010d24 <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 8010f22:	a351      	add	r3, pc, #324	; (adr r3, 8011068 <GUI_Touch_Processing+0x4e0>)
 8010f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f28:	4630      	mov	r0, r6
 8010f2a:	4639      	mov	r1, r7
 8010f2c:	f04f 0501 	mov.w	r5, #1
 8010f30:	f7ef fdf4 	bl	8000b1c <__aeabi_dcmpge>
 8010f34:	b900      	cbnz	r0, 8010f38 <GUI_Touch_Processing+0x3b0>
 8010f36:	4605      	mov	r5, r0
 8010f38:	a345      	add	r3, pc, #276	; (adr r3, 8011050 <GUI_Touch_Processing+0x4c8>)
 8010f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3e:	4630      	mov	r0, r6
 8010f40:	4639      	mov	r1, r7
 8010f42:	f04f 0801 	mov.w	r8, #1
 8010f46:	f7ef fddf 	bl	8000b08 <__aeabi_dcmple>
 8010f4a:	b900      	cbnz	r0, 8010f4e <GUI_Touch_Processing+0x3c6>
 8010f4c:	4680      	mov	r8, r0
 8010f4e:	ea05 0508 	and.w	r5, r5, r8
 8010f52:	07ee      	lsls	r6, r5, #31
 8010f54:	f57f aea6 	bpl.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8010f58:	2c00      	cmp	r4, #0
 8010f5a:	f43f aea3 	beq.w	8010ca4 <GUI_Touch_Processing+0x11c>
						pause = !pause;
 8010f5e:	4a47      	ldr	r2, [pc, #284]	; (801107c <GUI_Touch_Processing+0x4f4>)
 8010f60:	7813      	ldrb	r3, [r2, #0]
 8010f62:	fab3 f383 	clz	r3, r3
 8010f66:	095b      	lsrs	r3, r3, #5
 8010f68:	7013      	strb	r3, [r2, #0]
 8010f6a:	e69b      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 8010f6c:	4b40      	ldr	r3, [pc, #256]	; (8011070 <GUI_Touch_Processing+0x4e8>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010f6e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 8010f72:	2203      	movs	r2, #3
 8010f74:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8010f76:	f7ef fae5 	bl	8000544 <__aeabi_i2d>
 8010f7a:	4606      	mov	r6, r0
 8010f7c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8010f80:	460f      	mov	r7, r1
 8010f82:	f7ef fadf 	bl	8000544 <__aeabi_i2d>
 8010f86:	a32c      	add	r3, pc, #176	; (adr r3, 8011038 <GUI_Touch_Processing+0x4b0>)
 8010f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8c:	4680      	mov	r8, r0
 8010f8e:	4689      	mov	r9, r1
 8010f90:	f04f 0501 	mov.w	r5, #1
 8010f94:	f7ef fdc2 	bl	8000b1c <__aeabi_dcmpge>
 8010f98:	b900      	cbnz	r0, 8010f9c <GUI_Touch_Processing+0x414>
 8010f9a:	4605      	mov	r5, r0
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	4b35      	ldr	r3, [pc, #212]	; (8011074 <GUI_Touch_Processing+0x4ec>)
 8010fa0:	4640      	mov	r0, r8
 8010fa2:	4649      	mov	r1, r9
 8010fa4:	b2ed      	uxtb	r5, r5
 8010fa6:	f04f 0401 	mov.w	r4, #1
 8010faa:	f7ef fdad 	bl	8000b08 <__aeabi_dcmple>
 8010fae:	b900      	cbnz	r0, 8010fb2 <GUI_Touch_Processing+0x42a>
 8010fb0:	4604      	mov	r4, r0
 8010fb2:	a323      	add	r3, pc, #140	; (adr r3, 8011040 <GUI_Touch_Processing+0x4b8>)
 8010fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb8:	4630      	mov	r0, r6
 8010fba:	4639      	mov	r1, r7
 8010fbc:	b2e4      	uxtb	r4, r4
 8010fbe:	f04f 0801 	mov.w	r8, #1
 8010fc2:	f7ef fdab 	bl	8000b1c <__aeabi_dcmpge>
 8010fc6:	b900      	cbnz	r0, 8010fca <GUI_Touch_Processing+0x442>
 8010fc8:	4680      	mov	r8, r0
 8010fca:	a31f      	add	r3, pc, #124	; (adr r3, 8011048 <GUI_Touch_Processing+0x4c0>)
 8010fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	4639      	mov	r1, r7
 8010fd4:	f04f 0901 	mov.w	r9, #1
 8010fd8:	f7ef fd96 	bl	8000b08 <__aeabi_dcmple>
 8010fdc:	b900      	cbnz	r0, 8010fe0 <GUI_Touch_Processing+0x458>
 8010fde:	4681      	mov	r9, r0
 8010fe0:	ea08 0309 	and.w	r3, r8, r9
 8010fe4:	421d      	tst	r5, r3
 8010fe6:	d003      	beq.n	8010ff0 <GUI_Touch_Processing+0x468>
 8010fe8:	b114      	cbz	r4, 8010ff0 <GUI_Touch_Processing+0x468>
					GUI_screen_state = DataSet1_Screen;
 8010fea:	2307      	movs	r3, #7
 8010fec:	f88b 3000 	strb.w	r3, [fp]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Down
 8010ff0:	a317      	add	r3, pc, #92	; (adr r3, 8011050 <GUI_Touch_Processing+0x4c8>)
 8010ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ff6:	4630      	mov	r0, r6
 8010ff8:	4639      	mov	r1, r7
 8010ffa:	402c      	ands	r4, r5
 8010ffc:	f04f 0501 	mov.w	r5, #1
 8011000:	f7ef fd8c 	bl	8000b1c <__aeabi_dcmpge>
 8011004:	b900      	cbnz	r0, 8011008 <GUI_Touch_Processing+0x480>
 8011006:	4605      	mov	r5, r0
 8011008:	a313      	add	r3, pc, #76	; (adr r3, 8011058 <GUI_Touch_Processing+0x4d0>)
 801100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801100e:	4630      	mov	r0, r6
 8011010:	4639      	mov	r1, r7
 8011012:	f04f 0801 	mov.w	r8, #1
 8011016:	f7ef fd77 	bl	8000b08 <__aeabi_dcmple>
 801101a:	b900      	cbnz	r0, 801101e <GUI_Touch_Processing+0x496>
 801101c:	4680      	mov	r8, r0
 801101e:	ea05 0508 	and.w	r5, r5, r8
 8011022:	07ed      	lsls	r5, r5, #31
 8011024:	d52c      	bpl.n	8011080 <GUI_Touch_Processing+0x4f8>
 8011026:	b35c      	cbz	r4, 8011080 <GUI_Touch_Processing+0x4f8>
					GUI_screen_state = Measure_Screen;
 8011028:	2001      	movs	r0, #1
 801102a:	f88b 0000 	strb.w	r0, [fp]
					WriteFLASH_Screen(GUI_screen_state);
 801102e:	f00a ff97 	bl	801bf60 <WriteFLASH_Screen>
 8011032:	e637      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
 8011034:	f3af 8000 	nop.w
 8011038:	99999999 	.word	0x99999999
 801103c:	4091a399 	.word	0x4091a399
 8011040:	33333333 	.word	0x33333333
 8011044:	40053333 	.word	0x40053333
 8011048:	00000000 	.word	0x00000000
 801104c:	40623800 	.word	0x40623800
 8011050:	33333333 	.word	0x33333333
 8011054:	407aff33 	.word	0x407aff33
 8011058:	66666666 	.word	0x66666666
 801105c:	4081f866 	.word	0x4081f866
 8011060:	33333333 	.word	0x33333333
 8011064:	40867133 	.word	0x40867133
 8011068:	99999999 	.word	0x99999999
 801106c:	40720d99 	.word	0x40720d99
 8011070:	2000022a 	.word	0x2000022a
 8011074:	4093e000 	.word	0x4093e000
 8011078:	20004c9b 	.word	0x20004c9b
 801107c:	20004c98 	.word	0x20004c98
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8011080:	a3d5      	add	r3, pc, #852	; (adr r3, 80113d8 <GUI_Touch_Processing+0x850>)
 8011082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011086:	4630      	mov	r0, r6
 8011088:	4639      	mov	r1, r7
 801108a:	f04f 0501 	mov.w	r5, #1
 801108e:	f7ef fd45 	bl	8000b1c <__aeabi_dcmpge>
 8011092:	b900      	cbnz	r0, 8011096 <GUI_Touch_Processing+0x50e>
 8011094:	4605      	mov	r5, r0
 8011096:	a3d2      	add	r3, pc, #840	; (adr r3, 80113e0 <GUI_Touch_Processing+0x858>)
 8011098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801109c:	4630      	mov	r0, r6
 801109e:	4639      	mov	r1, r7
 80110a0:	f04f 0801 	mov.w	r8, #1
 80110a4:	f7ef fd30 	bl	8000b08 <__aeabi_dcmple>
 80110a8:	b900      	cbnz	r0, 80110ac <GUI_Touch_Processing+0x524>
 80110aa:	4680      	mov	r8, r0
 80110ac:	ea05 0508 	and.w	r5, r5, r8
 80110b0:	07e8      	lsls	r0, r5, #31
 80110b2:	d502      	bpl.n	80110ba <GUI_Touch_Processing+0x532>
 80110b4:	2c00      	cmp	r4, #0
 80110b6:	f47f ae13 	bne.w	8010ce0 <GUI_Touch_Processing+0x158>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 80110ba:	a3c3      	add	r3, pc, #780	; (adr r3, 80113c8 <GUI_Touch_Processing+0x840>)
 80110bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110c0:	4630      	mov	r0, r6
 80110c2:	4639      	mov	r1, r7
 80110c4:	f04f 0501 	mov.w	r5, #1
 80110c8:	f7ef fd28 	bl	8000b1c <__aeabi_dcmpge>
 80110cc:	b900      	cbnz	r0, 80110d0 <GUI_Touch_Processing+0x548>
 80110ce:	4605      	mov	r5, r0
 80110d0:	a3c5      	add	r3, pc, #788	; (adr r3, 80113e8 <GUI_Touch_Processing+0x860>)
 80110d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d6:	4630      	mov	r0, r6
 80110d8:	4639      	mov	r1, r7
 80110da:	f04f 0801 	mov.w	r8, #1
 80110de:	f7ef fd13 	bl	8000b08 <__aeabi_dcmple>
 80110e2:	b900      	cbnz	r0, 80110e6 <GUI_Touch_Processing+0x55e>
 80110e4:	4680      	mov	r8, r0
 80110e6:	ea05 0508 	and.w	r5, r5, r8
 80110ea:	07e9      	lsls	r1, r5, #31
 80110ec:	d502      	bpl.n	80110f4 <GUI_Touch_Processing+0x56c>
 80110ee:	2c00      	cmp	r4, #0
 80110f0:	f47f ae18 	bne.w	8010d24 <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 80110f4:	a3bc      	add	r3, pc, #752	; (adr r3, 80113e8 <GUI_Touch_Processing+0x860>)
 80110f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fa:	4630      	mov	r0, r6
 80110fc:	4639      	mov	r1, r7
 80110fe:	f04f 0501 	mov.w	r5, #1
 8011102:	f7ef fd0b 	bl	8000b1c <__aeabi_dcmpge>
 8011106:	b900      	cbnz	r0, 801110a <GUI_Touch_Processing+0x582>
 8011108:	4605      	mov	r5, r0
 801110a:	a3b1      	add	r3, pc, #708	; (adr r3, 80113d0 <GUI_Touch_Processing+0x848>)
 801110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011110:	4630      	mov	r0, r6
 8011112:	4639      	mov	r1, r7
 8011114:	f04f 0801 	mov.w	r8, #1
 8011118:	f7ef fcf6 	bl	8000b08 <__aeabi_dcmple>
 801111c:	b900      	cbnz	r0, 8011120 <GUI_Touch_Processing+0x598>
 801111e:	4680      	mov	r8, r0
 8011120:	ea05 0508 	and.w	r5, r5, r8
 8011124:	07ea      	lsls	r2, r5, #31
 8011126:	f57f adbd 	bpl.w	8010ca4 <GUI_Touch_Processing+0x11c>
 801112a:	2c00      	cmp	r4, #0
 801112c:	f43f adba 	beq.w	8010ca4 <GUI_Touch_Processing+0x11c>
						pause = !pause;
 8011130:	4aaf      	ldr	r2, [pc, #700]	; (80113f0 <GUI_Touch_Processing+0x868>)
						GUI_Bar_Measure(85, 13, 0.0);
 8011132:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 80113f4 <GUI_Touch_Processing+0x86c>
						pause = !pause;
 8011136:	7813      	ldrb	r3, [r2, #0]
 8011138:	fab3 f383 	clz	r3, r3
 801113c:	095b      	lsrs	r3, r3, #5
						GUI_Bar_Measure(85, 13, 0.0);
 801113e:	210d      	movs	r1, #13
 8011140:	2055      	movs	r0, #85	; 0x55
						pause = !pause;
 8011142:	7013      	strb	r3, [r2, #0]
						GUI_Bar_Measure(85, 13, 0.0);
 8011144:	f004 faa2 	bl	801568c <GUI_Bar_Measure>
 8011148:	e5ac      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 801114a:	4bab      	ldr	r3, [pc, #684]	; (80113f8 <GUI_Touch_Processing+0x870>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 801114c:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 8011150:	2204      	movs	r2, #4
 8011152:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8011154:	f7ef f9f6 	bl	8000544 <__aeabi_i2d>
 8011158:	4606      	mov	r6, r0
 801115a:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801115e:	460f      	mov	r7, r1
 8011160:	f7ef f9f0 	bl	8000544 <__aeabi_i2d>
 8011164:	a394      	add	r3, pc, #592	; (adr r3, 80113b8 <GUI_Touch_Processing+0x830>)
 8011166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801116a:	4680      	mov	r8, r0
 801116c:	4689      	mov	r9, r1
 801116e:	f04f 0501 	mov.w	r5, #1
 8011172:	f7ef fcd3 	bl	8000b1c <__aeabi_dcmpge>
 8011176:	b900      	cbnz	r0, 801117a <GUI_Touch_Processing+0x5f2>
 8011178:	4605      	mov	r5, r0
 801117a:	2200      	movs	r2, #0
 801117c:	4b9f      	ldr	r3, [pc, #636]	; (80113fc <GUI_Touch_Processing+0x874>)
 801117e:	4640      	mov	r0, r8
 8011180:	4649      	mov	r1, r9
 8011182:	b2ed      	uxtb	r5, r5
 8011184:	f04f 0401 	mov.w	r4, #1
 8011188:	f7ef fcbe 	bl	8000b08 <__aeabi_dcmple>
 801118c:	b900      	cbnz	r0, 8011190 <GUI_Touch_Processing+0x608>
 801118e:	4604      	mov	r4, r0
 8011190:	a38b      	add	r3, pc, #556	; (adr r3, 80113c0 <GUI_Touch_Processing+0x838>)
 8011192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011196:	4630      	mov	r0, r6
 8011198:	4639      	mov	r1, r7
 801119a:	b2e4      	uxtb	r4, r4
 801119c:	f04f 0801 	mov.w	r8, #1
 80111a0:	f7ef fcbc 	bl	8000b1c <__aeabi_dcmpge>
 80111a4:	b900      	cbnz	r0, 80111a8 <GUI_Touch_Processing+0x620>
 80111a6:	4680      	mov	r8, r0
 80111a8:	a387      	add	r3, pc, #540	; (adr r3, 80113c8 <GUI_Touch_Processing+0x840>)
 80111aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ae:	4630      	mov	r0, r6
 80111b0:	4639      	mov	r1, r7
 80111b2:	f04f 0901 	mov.w	r9, #1
 80111b6:	f7ef fca7 	bl	8000b08 <__aeabi_dcmple>
 80111ba:	b900      	cbnz	r0, 80111be <GUI_Touch_Processing+0x636>
 80111bc:	4681      	mov	r9, r0
 80111be:	ea08 0309 	and.w	r3, r8, r9
 80111c2:	421d      	tst	r5, r3
 80111c4:	d003      	beq.n	80111ce <GUI_Touch_Processing+0x646>
 80111c6:	b114      	cbz	r4, 80111ce <GUI_Touch_Processing+0x646>
					GUI_screen_state = GraphSet1_Screen;
 80111c8:	230c      	movs	r3, #12
 80111ca:	f88b 3000 	strb.w	r3, [fp]
			if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Rotation_Screen
 80111ce:	a380      	add	r3, pc, #512	; (adr r3, 80113d0 <GUI_Touch_Processing+0x848>)
 80111d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d4:	4630      	mov	r0, r6
 80111d6:	4639      	mov	r1, r7
 80111d8:	402c      	ands	r4, r5
 80111da:	f04f 0501 	mov.w	r5, #1
 80111de:	f7ef fc9d 	bl	8000b1c <__aeabi_dcmpge>
 80111e2:	b900      	cbnz	r0, 80111e6 <GUI_Touch_Processing+0x65e>
 80111e4:	4605      	mov	r5, r0
 80111e6:	a37c      	add	r3, pc, #496	; (adr r3, 80113d8 <GUI_Touch_Processing+0x850>)
 80111e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111ec:	4630      	mov	r0, r6
 80111ee:	4639      	mov	r1, r7
 80111f0:	f04f 0801 	mov.w	r8, #1
 80111f4:	f7ef fc88 	bl	8000b08 <__aeabi_dcmple>
 80111f8:	b900      	cbnz	r0, 80111fc <GUI_Touch_Processing+0x674>
 80111fa:	4680      	mov	r8, r0
 80111fc:	ea05 0508 	and.w	r5, r5, r8
 8011200:	07eb      	lsls	r3, r5, #31
 8011202:	d508      	bpl.n	8011216 <GUI_Touch_Processing+0x68e>
 8011204:	b13c      	cbz	r4, 8011216 <GUI_Touch_Processing+0x68e>
					if(Rotation_Screen_Spectral < 0x02) {Rotation_Screen_Spectral++;} else{Rotation_Screen_Spectral= 0x00;}
 8011206:	4a7e      	ldr	r2, [pc, #504]	; (8011400 <GUI_Touch_Processing+0x878>)
 8011208:	7813      	ldrb	r3, [r2, #0]
 801120a:	2b01      	cmp	r3, #1
 801120c:	bf94      	ite	ls
 801120e:	3301      	addls	r3, #1
 8011210:	2300      	movhi	r3, #0
 8011212:	7013      	strb	r3, [r2, #0]
 8011214:	e546      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8011216:	a370      	add	r3, pc, #448	; (adr r3, 80113d8 <GUI_Touch_Processing+0x850>)
 8011218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801121c:	4630      	mov	r0, r6
 801121e:	4639      	mov	r1, r7
 8011220:	f04f 0501 	mov.w	r5, #1
 8011224:	f7ef fc7a 	bl	8000b1c <__aeabi_dcmpge>
 8011228:	b900      	cbnz	r0, 801122c <GUI_Touch_Processing+0x6a4>
 801122a:	4605      	mov	r5, r0
 801122c:	a36c      	add	r3, pc, #432	; (adr r3, 80113e0 <GUI_Touch_Processing+0x858>)
 801122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011232:	4630      	mov	r0, r6
 8011234:	4639      	mov	r1, r7
 8011236:	f04f 0801 	mov.w	r8, #1
 801123a:	f7ef fc65 	bl	8000b08 <__aeabi_dcmple>
 801123e:	b900      	cbnz	r0, 8011242 <GUI_Touch_Processing+0x6ba>
 8011240:	4680      	mov	r8, r0
 8011242:	ea05 0508 	and.w	r5, r5, r8
 8011246:	07ed      	lsls	r5, r5, #31
 8011248:	d507      	bpl.n	801125a <GUI_Touch_Processing+0x6d2>
 801124a:	b134      	cbz	r4, 801125a <GUI_Touch_Processing+0x6d2>
					WriteFLASH_Screen(Color_Screen);
 801124c:	2005      	movs	r0, #5
 801124e:	f00a fe87 	bl	801bf60 <WriteFLASH_Screen>
					GUI_screen_state = Color_Screen;
 8011252:	2305      	movs	r3, #5
 8011254:	f88b 3000 	strb.w	r3, [fp]
 8011258:	e524      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 801125a:	a35b      	add	r3, pc, #364	; (adr r3, 80113c8 <GUI_Touch_Processing+0x840>)
 801125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011260:	4630      	mov	r0, r6
 8011262:	4639      	mov	r1, r7
 8011264:	f04f 0501 	mov.w	r5, #1
 8011268:	f7ef fc58 	bl	8000b1c <__aeabi_dcmpge>
 801126c:	b900      	cbnz	r0, 8011270 <GUI_Touch_Processing+0x6e8>
 801126e:	4605      	mov	r5, r0
 8011270:	a35d      	add	r3, pc, #372	; (adr r3, 80113e8 <GUI_Touch_Processing+0x860>)
 8011272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011276:	4630      	mov	r0, r6
 8011278:	4639      	mov	r1, r7
 801127a:	f04f 0801 	mov.w	r8, #1
 801127e:	f7ef fc43 	bl	8000b08 <__aeabi_dcmple>
 8011282:	b900      	cbnz	r0, 8011286 <GUI_Touch_Processing+0x6fe>
 8011284:	4680      	mov	r8, r0
 8011286:	ea05 0508 	and.w	r5, r5, r8
 801128a:	07e8      	lsls	r0, r5, #31
 801128c:	d502      	bpl.n	8011294 <GUI_Touch_Processing+0x70c>
 801128e:	2c00      	cmp	r4, #0
 8011290:	f47f ad48 	bne.w	8010d24 <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 8011294:	a354      	add	r3, pc, #336	; (adr r3, 80113e8 <GUI_Touch_Processing+0x860>)
 8011296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801129a:	4630      	mov	r0, r6
 801129c:	4639      	mov	r1, r7
 801129e:	f04f 0501 	mov.w	r5, #1
 80112a2:	f7ef fc3b 	bl	8000b1c <__aeabi_dcmpge>
 80112a6:	b900      	cbnz	r0, 80112aa <GUI_Touch_Processing+0x722>
 80112a8:	4605      	mov	r5, r0
 80112aa:	a349      	add	r3, pc, #292	; (adr r3, 80113d0 <GUI_Touch_Processing+0x848>)
 80112ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b0:	4630      	mov	r0, r6
 80112b2:	4639      	mov	r1, r7
 80112b4:	f04f 0801 	mov.w	r8, #1
 80112b8:	f7ef fc26 	bl	8000b08 <__aeabi_dcmple>
 80112bc:	b900      	cbnz	r0, 80112c0 <GUI_Touch_Processing+0x738>
 80112be:	4680      	mov	r8, r0
 80112c0:	ea05 0508 	and.w	r5, r5, r8
 80112c4:	07e9      	lsls	r1, r5, #31
 80112c6:	f57f aced 	bpl.w	8010ca4 <GUI_Touch_Processing+0x11c>
 80112ca:	2c00      	cmp	r4, #0
 80112cc:	f43f acea 	beq.w	8010ca4 <GUI_Touch_Processing+0x11c>
					pause = !pause;
 80112d0:	4a47      	ldr	r2, [pc, #284]	; (80113f0 <GUI_Touch_Processing+0x868>)
 80112d2:	7813      	ldrb	r3, [r2, #0]
 80112d4:	fab3 f383 	clz	r3, r3
 80112d8:	095b      	lsrs	r3, r3, #5
 80112da:	7013      	strb	r3, [r2, #0]
 80112dc:	e4e2      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 80112de:	4b46      	ldr	r3, [pc, #280]	; (80113f8 <GUI_Touch_Processing+0x870>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 80112e0:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 80112e4:	2205      	movs	r2, #5
 80112e6:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 80112e8:	f7ef f92c 	bl	8000544 <__aeabi_i2d>
 80112ec:	4604      	mov	r4, r0
 80112ee:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80112f2:	460d      	mov	r5, r1
 80112f4:	f7ef f926 	bl	8000544 <__aeabi_i2d>
 80112f8:	a32f      	add	r3, pc, #188	; (adr r3, 80113b8 <GUI_Touch_Processing+0x830>)
 80112fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fe:	4680      	mov	r8, r0
 8011300:	4689      	mov	r9, r1
 8011302:	f04f 0701 	mov.w	r7, #1
 8011306:	f7ef fc09 	bl	8000b1c <__aeabi_dcmpge>
 801130a:	b900      	cbnz	r0, 801130e <GUI_Touch_Processing+0x786>
 801130c:	4607      	mov	r7, r0
 801130e:	2200      	movs	r2, #0
 8011310:	4b3a      	ldr	r3, [pc, #232]	; (80113fc <GUI_Touch_Processing+0x874>)
 8011312:	4640      	mov	r0, r8
 8011314:	4649      	mov	r1, r9
 8011316:	b2ff      	uxtb	r7, r7
 8011318:	f04f 0601 	mov.w	r6, #1
 801131c:	f7ef fbf4 	bl	8000b08 <__aeabi_dcmple>
 8011320:	b900      	cbnz	r0, 8011324 <GUI_Touch_Processing+0x79c>
 8011322:	4606      	mov	r6, r0
 8011324:	a326      	add	r3, pc, #152	; (adr r3, 80113c0 <GUI_Touch_Processing+0x838>)
 8011326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132a:	4620      	mov	r0, r4
 801132c:	4629      	mov	r1, r5
 801132e:	b2f6      	uxtb	r6, r6
 8011330:	f04f 0801 	mov.w	r8, #1
 8011334:	f7ef fbf2 	bl	8000b1c <__aeabi_dcmpge>
 8011338:	b900      	cbnz	r0, 801133c <GUI_Touch_Processing+0x7b4>
 801133a:	4680      	mov	r8, r0
 801133c:	a322      	add	r3, pc, #136	; (adr r3, 80113c8 <GUI_Touch_Processing+0x840>)
 801133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011342:	4620      	mov	r0, r4
 8011344:	4629      	mov	r1, r5
 8011346:	f04f 0901 	mov.w	r9, #1
 801134a:	f7ef fbdd 	bl	8000b08 <__aeabi_dcmple>
 801134e:	b900      	cbnz	r0, 8011352 <GUI_Touch_Processing+0x7ca>
 8011350:	4681      	mov	r9, r0
 8011352:	ea08 0309 	and.w	r3, r8, r9
 8011356:	421f      	tst	r7, r3
 8011358:	d008      	beq.n	801136c <GUI_Touch_Processing+0x7e4>
 801135a:	b13e      	cbz	r6, 801136c <GUI_Touch_Processing+0x7e4>
					preColor_Field = Color_Field;
 801135c:	4b29      	ldr	r3, [pc, #164]	; (8011404 <GUI_Touch_Processing+0x87c>)
 801135e:	781a      	ldrb	r2, [r3, #0]
 8011360:	4b29      	ldr	r3, [pc, #164]	; (8011408 <GUI_Touch_Processing+0x880>)
 8011362:	701a      	strb	r2, [r3, #0]
					GUI_screen_state = ColorSet1_Screen;
 8011364:	230e      	movs	r3, #14
 8011366:	f88b 3000 	strb.w	r3, [fp]
 801136a:	e49b      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 801136c:	a31a      	add	r3, pc, #104	; (adr r3, 80113d8 <GUI_Touch_Processing+0x850>)
 801136e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011372:	4620      	mov	r0, r4
 8011374:	4629      	mov	r1, r5
 8011376:	ea07 0806 	and.w	r8, r7, r6
 801137a:	f04f 0901 	mov.w	r9, #1
 801137e:	f7ef fbcd 	bl	8000b1c <__aeabi_dcmpge>
 8011382:	b900      	cbnz	r0, 8011386 <GUI_Touch_Processing+0x7fe>
 8011384:	4681      	mov	r9, r0
 8011386:	a316      	add	r3, pc, #88	; (adr r3, 80113e0 <GUI_Touch_Processing+0x858>)
 8011388:	e9d3 2300 	ldrd	r2, r3, [r3]
 801138c:	4620      	mov	r0, r4
 801138e:	4629      	mov	r1, r5
 8011390:	f04f 0a01 	mov.w	sl, #1
 8011394:	f7ef fbb8 	bl	8000b08 <__aeabi_dcmple>
 8011398:	b900      	cbnz	r0, 801139c <GUI_Touch_Processing+0x814>
 801139a:	4682      	mov	sl, r0
 801139c:	ea09 030a 	and.w	r3, r9, sl
 80113a0:	07da      	lsls	r2, r3, #31
 80113a2:	d533      	bpl.n	801140c <GUI_Touch_Processing+0x884>
 80113a4:	f1b8 0f00 	cmp.w	r8, #0
 80113a8:	d030      	beq.n	801140c <GUI_Touch_Processing+0x884>
					WriteFLASH_Screen(Color_Rendition_Screen);
 80113aa:	2006      	movs	r0, #6
 80113ac:	f00a fdd8 	bl	801bf60 <WriteFLASH_Screen>
					GUI_screen_state = Color_Rendition_Screen;
 80113b0:	2306      	movs	r3, #6
 80113b2:	f88b 3000 	strb.w	r3, [fp]
 80113b6:	e475      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
 80113b8:	99999999 	.word	0x99999999
 80113bc:	4091a399 	.word	0x4091a399
 80113c0:	33333333 	.word	0x33333333
 80113c4:	40053333 	.word	0x40053333
 80113c8:	00000000 	.word	0x00000000
 80113cc:	40623800 	.word	0x40623800
 80113d0:	33333333 	.word	0x33333333
 80113d4:	407aff33 	.word	0x407aff33
 80113d8:	66666666 	.word	0x66666666
 80113dc:	4081f866 	.word	0x4081f866
 80113e0:	33333333 	.word	0x33333333
 80113e4:	40867133 	.word	0x40867133
 80113e8:	99999999 	.word	0x99999999
 80113ec:	40720d99 	.word	0x40720d99
 80113f0:	20004c98 	.word	0x20004c98
 80113f4:	00000000 	.word	0x00000000
 80113f8:	2000022a 	.word	0x2000022a
 80113fc:	4093e000 	.word	0x4093e000
 8011400:	20004c7a 	.word	0x20004c7a
 8011404:	20004c6f 	.word	0x20004c6f
 8011408:	20004c99 	.word	0x20004c99
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 801140c:	a3b4      	add	r3, pc, #720	; (adr r3, 80116e0 <GUI_Touch_Processing+0xb58>)
 801140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011412:	4620      	mov	r0, r4
 8011414:	4629      	mov	r1, r5
 8011416:	f04f 0901 	mov.w	r9, #1
 801141a:	f7ef fb7f 	bl	8000b1c <__aeabi_dcmpge>
 801141e:	b900      	cbnz	r0, 8011422 <GUI_Touch_Processing+0x89a>
 8011420:	4681      	mov	r9, r0
 8011422:	a3b9      	add	r3, pc, #740	; (adr r3, 8011708 <GUI_Touch_Processing+0xb80>)
 8011424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011428:	4620      	mov	r0, r4
 801142a:	4629      	mov	r1, r5
 801142c:	f04f 0a01 	mov.w	sl, #1
 8011430:	f7ef fb6a 	bl	8000b08 <__aeabi_dcmple>
 8011434:	b900      	cbnz	r0, 8011438 <GUI_Touch_Processing+0x8b0>
 8011436:	4682      	mov	sl, r0
 8011438:	ea09 030a 	and.w	r3, r9, sl
 801143c:	07db      	lsls	r3, r3, #31
 801143e:	d509      	bpl.n	8011454 <GUI_Touch_Processing+0x8cc>
 8011440:	f1b8 0f00 	cmp.w	r8, #0
 8011444:	d006      	beq.n	8011454 <GUI_Touch_Processing+0x8cc>
					pause = !pause;
 8011446:	4ab2      	ldr	r2, [pc, #712]	; (8011710 <GUI_Touch_Processing+0xb88>)
 8011448:	7813      	ldrb	r3, [r2, #0]
 801144a:	fab3 f383 	clz	r3, r3
 801144e:	095b      	lsrs	r3, r3, #5
 8011450:	7013      	strb	r3, [r2, #0]
 8011452:	e427      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011454:	a3a0      	add	r3, pc, #640	; (adr r3, 80116d8 <GUI_Touch_Processing+0xb50>)
 8011456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145a:	4620      	mov	r0, r4
 801145c:	4629      	mov	r1, r5
 801145e:	f04f 0801 	mov.w	r8, #1
 8011462:	f7ef fb5b 	bl	8000b1c <__aeabi_dcmpge>
 8011466:	b900      	cbnz	r0, 801146a <GUI_Touch_Processing+0x8e2>
 8011468:	4680      	mov	r8, r0
 801146a:	a39d      	add	r3, pc, #628	; (adr r3, 80116e0 <GUI_Touch_Processing+0xb58>)
 801146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011470:	4620      	mov	r0, r4
 8011472:	4629      	mov	r1, r5
 8011474:	f04f 0901 	mov.w	r9, #1
 8011478:	f7ef fb46 	bl	8000b08 <__aeabi_dcmple>
 801147c:	b900      	cbnz	r0, 8011480 <GUI_Touch_Processing+0x8f8>
 801147e:	4681      	mov	r9, r0
 8011480:	ea08 0809 	and.w	r8, r8, r9
 8011484:	ea17 0f08 	tst.w	r7, r8
 8011488:	f43f ac0c 	beq.w	8010ca4 <GUI_Touch_Processing+0x11c>
 801148c:	2e00      	cmp	r6, #0
 801148e:	f47f ac49 	bne.w	8010d24 <GUI_Touch_Processing+0x19c>
 8011492:	e407      	b.n	8010ca4 <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 8011494:	4b9f      	ldr	r3, [pc, #636]	; (8011714 <GUI_Touch_Processing+0xb8c>)
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 8011496:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 801149a:	2206      	movs	r2, #6
 801149c:	701a      	strb	r2, [r3, #0]
			if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Settings
 801149e:	f7ef f851 	bl	8000544 <__aeabi_i2d>
 80114a2:	4606      	mov	r6, r0
 80114a4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80114a8:	460f      	mov	r7, r1
 80114aa:	f7ef f84b 	bl	8000544 <__aeabi_i2d>
 80114ae:	a38e      	add	r3, pc, #568	; (adr r3, 80116e8 <GUI_Touch_Processing+0xb60>)
 80114b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b4:	4680      	mov	r8, r0
 80114b6:	4689      	mov	r9, r1
 80114b8:	f04f 0501 	mov.w	r5, #1
 80114bc:	f7ef fb2e 	bl	8000b1c <__aeabi_dcmpge>
 80114c0:	b900      	cbnz	r0, 80114c4 <GUI_Touch_Processing+0x93c>
 80114c2:	4605      	mov	r5, r0
 80114c4:	2200      	movs	r2, #0
 80114c6:	4b94      	ldr	r3, [pc, #592]	; (8011718 <GUI_Touch_Processing+0xb90>)
 80114c8:	4640      	mov	r0, r8
 80114ca:	4649      	mov	r1, r9
 80114cc:	b2ed      	uxtb	r5, r5
 80114ce:	f04f 0401 	mov.w	r4, #1
 80114d2:	f7ef fb19 	bl	8000b08 <__aeabi_dcmple>
 80114d6:	b900      	cbnz	r0, 80114da <GUI_Touch_Processing+0x952>
 80114d8:	4604      	mov	r4, r0
 80114da:	a385      	add	r3, pc, #532	; (adr r3, 80116f0 <GUI_Touch_Processing+0xb68>)
 80114dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e0:	4630      	mov	r0, r6
 80114e2:	4639      	mov	r1, r7
 80114e4:	b2e4      	uxtb	r4, r4
 80114e6:	f04f 0801 	mov.w	r8, #1
 80114ea:	f7ef fb17 	bl	8000b1c <__aeabi_dcmpge>
 80114ee:	b900      	cbnz	r0, 80114f2 <GUI_Touch_Processing+0x96a>
 80114f0:	4680      	mov	r8, r0
 80114f2:	a379      	add	r3, pc, #484	; (adr r3, 80116d8 <GUI_Touch_Processing+0xb50>)
 80114f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f8:	4630      	mov	r0, r6
 80114fa:	4639      	mov	r1, r7
 80114fc:	f04f 0901 	mov.w	r9, #1
 8011500:	f7ef fb02 	bl	8000b08 <__aeabi_dcmple>
 8011504:	b900      	cbnz	r0, 8011508 <GUI_Touch_Processing+0x980>
 8011506:	4681      	mov	r9, r0
 8011508:	ea08 0309 	and.w	r3, r8, r9
 801150c:	421d      	tst	r5, r3
 801150e:	d005      	beq.n	801151c <GUI_Touch_Processing+0x994>
 8011510:	b124      	cbz	r4, 801151c <GUI_Touch_Processing+0x994>
					GUI_screen_state = ColorRendSet_Screen;
 8011512:	2310      	movs	r3, #16
 8011514:	f88b 3000 	strb.w	r3, [fp]
 8011518:	f7ff bbc4 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 801151c:	a376      	add	r3, pc, #472	; (adr r3, 80116f8 <GUI_Touch_Processing+0xb70>)
 801151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011522:	4630      	mov	r0, r6
 8011524:	4639      	mov	r1, r7
 8011526:	402c      	ands	r4, r5
 8011528:	f04f 0501 	mov.w	r5, #1
 801152c:	f7ef faf6 	bl	8000b1c <__aeabi_dcmpge>
 8011530:	b900      	cbnz	r0, 8011534 <GUI_Touch_Processing+0x9ac>
 8011532:	4605      	mov	r5, r0
 8011534:	a372      	add	r3, pc, #456	; (adr r3, 8011700 <GUI_Touch_Processing+0xb78>)
 8011536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153a:	4630      	mov	r0, r6
 801153c:	4639      	mov	r1, r7
 801153e:	f04f 0801 	mov.w	r8, #1
 8011542:	f7ef fae1 	bl	8000b08 <__aeabi_dcmple>
 8011546:	b900      	cbnz	r0, 801154a <GUI_Touch_Processing+0x9c2>
 8011548:	4680      	mov	r8, r0
 801154a:	ea05 0508 	and.w	r5, r5, r8
 801154e:	07ed      	lsls	r5, r5, #31
 8011550:	d508      	bpl.n	8011564 <GUI_Touch_Processing+0x9dc>
 8011552:	b13c      	cbz	r4, 8011564 <GUI_Touch_Processing+0x9dc>
					WriteFLASH_Screen(Measure_Screen);
 8011554:	2001      	movs	r0, #1
 8011556:	f00a fd03 	bl	801bf60 <WriteFLASH_Screen>
					GUI_screen_state = Measure_Screen;
 801155a:	2301      	movs	r3, #1
 801155c:	f88b 3000 	strb.w	r3, [fp]
 8011560:	f7ff bba0 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Rotation_Screen
 8011564:	a368      	add	r3, pc, #416	; (adr r3, 8011708 <GUI_Touch_Processing+0xb80>)
 8011566:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156a:	4630      	mov	r0, r6
 801156c:	4639      	mov	r1, r7
 801156e:	f04f 0501 	mov.w	r5, #1
 8011572:	f7ef fad3 	bl	8000b1c <__aeabi_dcmpge>
 8011576:	b900      	cbnz	r0, 801157a <GUI_Touch_Processing+0x9f2>
 8011578:	4605      	mov	r5, r0
 801157a:	a35f      	add	r3, pc, #380	; (adr r3, 80116f8 <GUI_Touch_Processing+0xb70>)
 801157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011580:	4630      	mov	r0, r6
 8011582:	4639      	mov	r1, r7
 8011584:	f04f 0801 	mov.w	r8, #1
 8011588:	f7ef fabe 	bl	8000b08 <__aeabi_dcmple>
 801158c:	b900      	cbnz	r0, 8011590 <GUI_Touch_Processing+0xa08>
 801158e:	4680      	mov	r8, r0
 8011590:	ea05 0508 	and.w	r5, r5, r8
 8011594:	07e8      	lsls	r0, r5, #31
 8011596:	d509      	bpl.n	80115ac <GUI_Touch_Processing+0xa24>
 8011598:	b144      	cbz	r4, 80115ac <GUI_Touch_Processing+0xa24>
					if(Rotation_Screen_Rend < 0x02) {Rotation_Screen_Rend++;} else{Rotation_Screen_Rend = 0x00;}
 801159a:	4a60      	ldr	r2, [pc, #384]	; (801171c <GUI_Touch_Processing+0xb94>)
 801159c:	7813      	ldrb	r3, [r2, #0]
 801159e:	2b01      	cmp	r3, #1
 80115a0:	bf94      	ite	ls
 80115a2:	3301      	addls	r3, #1
 80115a4:	2300      	movhi	r3, #0
 80115a6:	7013      	strb	r3, [r2, #0]
 80115a8:	f7ff bb7c 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Measure
 80115ac:	a34c      	add	r3, pc, #304	; (adr r3, 80116e0 <GUI_Touch_Processing+0xb58>)
 80115ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b2:	4630      	mov	r0, r6
 80115b4:	4639      	mov	r1, r7
 80115b6:	f04f 0501 	mov.w	r5, #1
 80115ba:	f7ef faaf 	bl	8000b1c <__aeabi_dcmpge>
 80115be:	b900      	cbnz	r0, 80115c2 <GUI_Touch_Processing+0xa3a>
 80115c0:	4605      	mov	r5, r0
 80115c2:	a351      	add	r3, pc, #324	; (adr r3, 8011708 <GUI_Touch_Processing+0xb80>)
 80115c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115c8:	4630      	mov	r0, r6
 80115ca:	4639      	mov	r1, r7
 80115cc:	f04f 0801 	mov.w	r8, #1
 80115d0:	f7ef fa9a 	bl	8000b08 <__aeabi_dcmple>
 80115d4:	b900      	cbnz	r0, 80115d8 <GUI_Touch_Processing+0xa50>
 80115d6:	4680      	mov	r8, r0
 80115d8:	ea05 0508 	and.w	r5, r5, r8
 80115dc:	07e9      	lsls	r1, r5, #31
 80115de:	f140 80c7 	bpl.w	8011770 <GUI_Touch_Processing+0xbe8>
 80115e2:	2c00      	cmp	r4, #0
 80115e4:	f000 80c4 	beq.w	8011770 <GUI_Touch_Processing+0xbe8>
					if (Color_rend_Field & CRI_CQS){
 80115e8:	4b4d      	ldr	r3, [pc, #308]	; (8011720 <GUI_Touch_Processing+0xb98>)
 80115ea:	f8df 8180 	ldr.w	r8, [pc, #384]	; 801176c <GUI_Touch_Processing+0xbe4>
 80115ee:	781c      	ldrb	r4, [r3, #0]
 80115f0:	4e4c      	ldr	r6, [pc, #304]	; (8011724 <GUI_Touch_Processing+0xb9c>)
 80115f2:	4f4d      	ldr	r7, [pc, #308]	; (8011728 <GUI_Touch_Processing+0xba0>)
 80115f4:	4d4d      	ldr	r5, [pc, #308]	; (801172c <GUI_Touch_Processing+0xba4>)
 80115f6:	f014 0401 	ands.w	r4, r4, #1
 80115fa:	d03e      	beq.n	801167a <GUI_Touch_Processing+0xaf2>
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 80115fc:	484c      	ldr	r0, [pc, #304]	; (8011730 <GUI_Touch_Processing+0xba8>)
						CRICQS_done = 0x00;
 80115fe:	2400      	movs	r4, #0
 8011600:	f888 4000 	strb.w	r4, [r8]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011604:	f00a fbcc 	bl	801bda0 <Rabs_find_MAX_all>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011608:	4b4a      	ldr	r3, [pc, #296]	; (8011734 <GUI_Touch_Processing+0xbac>)
 801160a:	4a4b      	ldr	r2, [pc, #300]	; (8011738 <GUI_Touch_Processing+0xbb0>)
 801160c:	494b      	ldr	r1, [pc, #300]	; (801173c <GUI_Touch_Processing+0xbb4>)
 801160e:	4848      	ldr	r0, [pc, #288]	; (8011730 <GUI_Touch_Processing+0xba8>)
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 8011610:	ed86 0a00 	vstr	s0, [r6]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011614:	f7fc fd82 	bl	800e11c <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 8011618:	4849      	ldr	r0, [pc, #292]	; (8011740 <GUI_Touch_Processing+0xbb8>)
 801161a:	f7fc fdeb 	bl	800e1f4 <Calculate_xy1931>
						Calculate_uv(colorimetry_xy1931);
 801161e:	4849      	ldr	r0, [pc, #292]	; (8011744 <GUI_Touch_Processing+0xbbc>)
 8011620:	f7fc fe06 	bl	800e230 <Calculate_uv>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011624:	4842      	ldr	r0, [pc, #264]	; (8011730 <GUI_Touch_Processing+0xba8>)
 8011626:	7839      	ldrb	r1, [r7, #0]
 8011628:	f7fc fe4a 	bl	800e2c0 <Calculate_Tc>
 801162c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 8011630:	f64f 73ff 	movw	r3, #65535	; 0xffff
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011634:	edcd 7a00 	vstr	s15, [sp]
 8011638:	f8bd 0000 	ldrh.w	r0, [sp]
 801163c:	8028      	strh	r0, [r5, #0]
						if(Tc_Measure == 0xFFFF ){Ra = 0; Rall = 0; R9 = 0; memset(Ri, 0, sizeof(Ri)); }
 801163e:	4298      	cmp	r0, r3
 8011640:	d10b      	bne.n	801165a <GUI_Touch_Processing+0xad2>
 8011642:	4b41      	ldr	r3, [pc, #260]	; (8011748 <GUI_Touch_Processing+0xbc0>)
 8011644:	4841      	ldr	r0, [pc, #260]	; (801174c <GUI_Touch_Processing+0xbc4>)
 8011646:	701c      	strb	r4, [r3, #0]
 8011648:	4b41      	ldr	r3, [pc, #260]	; (8011750 <GUI_Touch_Processing+0xbc8>)
 801164a:	701c      	strb	r4, [r3, #0]
 801164c:	4b41      	ldr	r3, [pc, #260]	; (8011754 <GUI_Touch_Processing+0xbcc>)
 801164e:	220e      	movs	r2, #14
 8011650:	701c      	strb	r4, [r3, #0]
 8011652:	4621      	mov	r1, r4
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 8011654:	f010 fb93 	bl	8021d7e <memset>
 8011658:	e002      	b.n	8011660 <GUI_Touch_Processing+0xad8>
						else	{CRI_func(Tc_Measure, Line_Rabs_buff);}
 801165a:	4935      	ldr	r1, [pc, #212]	; (8011730 <GUI_Touch_Processing+0xba8>)
 801165c:	f7fa fcac 	bl	800bfb8 <CRI_func>
					Calc_ColorRend = !Calc_ColorRend;
 8011660:	4a3d      	ldr	r2, [pc, #244]	; (8011758 <GUI_Touch_Processing+0xbd0>)
						CRICQS_done = 0x01;
 8011662:	2301      	movs	r3, #1
 8011664:	f888 3000 	strb.w	r3, [r8]
					Calc_ColorRend = !Calc_ColorRend;
 8011668:	7813      	ldrb	r3, [r2, #0]
 801166a:	fab3 f383 	clz	r3, r3
 801166e:	095b      	lsrs	r3, r3, #5
 8011670:	7013      	strb	r3, [r2, #0]
					GUI_Display_Refresh();
 8011672:	f7ff fa29 	bl	8010ac8 <GUI_Display_Refresh>
 8011676:	f7ff bb15 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801167a:	4b2e      	ldr	r3, [pc, #184]	; (8011734 <GUI_Touch_Processing+0xbac>)
 801167c:	4a2e      	ldr	r2, [pc, #184]	; (8011738 <GUI_Touch_Processing+0xbb0>)
 801167e:	492f      	ldr	r1, [pc, #188]	; (801173c <GUI_Touch_Processing+0xbb4>)
 8011680:	482b      	ldr	r0, [pc, #172]	; (8011730 <GUI_Touch_Processing+0xba8>)
						CRICQS_done = 0x00;
 8011682:	f888 4000 	strb.w	r4, [r8]
						Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 8011686:	f7fc fd49 	bl	800e11c <Calculate_XYZ1931>
						Calculate_xy1931(colorimetry_XYZ1931);
 801168a:	482d      	ldr	r0, [pc, #180]	; (8011740 <GUI_Touch_Processing+0xbb8>)
 801168c:	f7fc fdb2 	bl	800e1f4 <Calculate_xy1931>
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 8011690:	7839      	ldrb	r1, [r7, #0]
 8011692:	4827      	ldr	r0, [pc, #156]	; (8011730 <GUI_Touch_Processing+0xba8>)
 8011694:	f7fc fe14 	bl	800e2c0 <Calculate_Tc>
 8011698:	eefc 7ac0 	vcvt.u32.f32	s15, s0
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 801169c:	4824      	ldr	r0, [pc, #144]	; (8011730 <GUI_Touch_Processing+0xba8>)
						Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801169e:	ee17 3a90 	vmov	r3, s15
 80116a2:	802b      	strh	r3, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 80116a4:	f00a fb7c 	bl	801bda0 <Rabs_find_MAX_all>
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 80116a8:	8828      	ldrh	r0, [r5, #0]
						max_Rabs = Rabs_find_MAX_all(Line_Rabs_buff);
 80116aa:	ed86 0a00 	vstr	s0, [r6]
						if(Tc_Measure == 0xFFFF ){Qa = 0; Qp = 0; Qf = 0; memset(Q_i, 0, sizeof(Q_i)); }
 80116ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80116b2:	4298      	cmp	r0, r3
 80116b4:	d109      	bne.n	80116ca <GUI_Touch_Processing+0xb42>
 80116b6:	4b29      	ldr	r3, [pc, #164]	; (801175c <GUI_Touch_Processing+0xbd4>)
 80116b8:	4829      	ldr	r0, [pc, #164]	; (8011760 <GUI_Touch_Processing+0xbd8>)
 80116ba:	701c      	strb	r4, [r3, #0]
 80116bc:	4b29      	ldr	r3, [pc, #164]	; (8011764 <GUI_Touch_Processing+0xbdc>)
 80116be:	701c      	strb	r4, [r3, #0]
 80116c0:	4b29      	ldr	r3, [pc, #164]	; (8011768 <GUI_Touch_Processing+0xbe0>)
 80116c2:	220f      	movs	r2, #15
 80116c4:	701c      	strb	r4, [r3, #0]
 80116c6:	4621      	mov	r1, r4
 80116c8:	e7c4      	b.n	8011654 <GUI_Touch_Processing+0xacc>
						else	{cqs_func(Tc_Measure, Line_Rabs_buff);}
 80116ca:	4919      	ldr	r1, [pc, #100]	; (8011730 <GUI_Touch_Processing+0xba8>)
 80116cc:	f7f8 fb08 	bl	8009ce0 <cqs_func>
 80116d0:	e7c6      	b.n	8011660 <GUI_Touch_Processing+0xad8>
 80116d2:	bf00      	nop
 80116d4:	f3af 8000 	nop.w
 80116d8:	00000000 	.word	0x00000000
 80116dc:	40623800 	.word	0x40623800
 80116e0:	99999999 	.word	0x99999999
 80116e4:	40720d99 	.word	0x40720d99
 80116e8:	99999999 	.word	0x99999999
 80116ec:	4091a399 	.word	0x4091a399
 80116f0:	33333333 	.word	0x33333333
 80116f4:	40053333 	.word	0x40053333
 80116f8:	66666666 	.word	0x66666666
 80116fc:	4081f866 	.word	0x4081f866
 8011700:	33333333 	.word	0x33333333
 8011704:	40867133 	.word	0x40867133
 8011708:	33333333 	.word	0x33333333
 801170c:	407aff33 	.word	0x407aff33
 8011710:	20004c98 	.word	0x20004c98
 8011714:	2000022a 	.word	0x2000022a
 8011718:	4093e000 	.word	0x4093e000
 801171c:	20004c79 	.word	0x20004c79
 8011720:	20004c70 	.word	0x20004c70
 8011724:	20090b2c 	.word	0x20090b2c
 8011728:	20004c74 	.word	0x20004c74
 801172c:	2004fbe0 	.word	0x2004fbe0
 8011730:	200077dc 	.word	0x200077dc
 8011734:	200887b0 	.word	0x200887b0
 8011738:	2004dbe0 	.word	0x2004dbe0
 801173c:	200857b0 	.word	0x200857b0
 8011740:	2008a7be 	.word	0x2008a7be
 8011744:	2008a7dc 	.word	0x2008a7dc
 8011748:	20003bc9 	.word	0x20003bc9
 801174c:	20003bcb 	.word	0x20003bcb
 8011750:	20003bca 	.word	0x20003bca
 8011754:	20003bc8 	.word	0x20003bc8
 8011758:	20004c6d 	.word	0x20004c6d
 801175c:	20002ba3 	.word	0x20002ba3
 8011760:	20002b94 	.word	0x20002b94
 8011764:	20002ba5 	.word	0x20002ba5
 8011768:	20002ba4 	.word	0x20002ba4
 801176c:	20004c6c 	.word	0x20004c6c
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011770:	a3be      	add	r3, pc, #760	; (adr r3, 8011a6c <GUI_Touch_Processing+0xee4>)
 8011772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011776:	4630      	mov	r0, r6
 8011778:	4639      	mov	r1, r7
 801177a:	f04f 0501 	mov.w	r5, #1
 801177e:	f7ef f9cd 	bl	8000b1c <__aeabi_dcmpge>
 8011782:	b900      	cbnz	r0, 8011786 <GUI_Touch_Processing+0xbfe>
 8011784:	4605      	mov	r5, r0
 8011786:	a3bb      	add	r3, pc, #748	; (adr r3, 8011a74 <GUI_Touch_Processing+0xeec>)
 8011788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178c:	4630      	mov	r0, r6
 801178e:	4639      	mov	r1, r7
 8011790:	f04f 0801 	mov.w	r8, #1
 8011794:	f7ef f9b8 	bl	8000b08 <__aeabi_dcmple>
 8011798:	b900      	cbnz	r0, 801179c <GUI_Touch_Processing+0xc14>
 801179a:	4680      	mov	r8, r0
 801179c:	ea05 0508 	and.w	r5, r5, r8
 80117a0:	07ea      	lsls	r2, r5, #31
 80117a2:	f57f aa7f 	bpl.w	8010ca4 <GUI_Touch_Processing+0x11c>
 80117a6:	2c00      	cmp	r4, #0
 80117a8:	f43f aa7c 	beq.w	8010ca4 <GUI_Touch_Processing+0x11c>
						if(!SD_Detect){GUI_screen_state = SD_Write_Screen;}
 80117ac:	4ba2      	ldr	r3, [pc, #648]	; (8011a38 <GUI_Touch_Processing+0xeb0>)
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	b913      	cbnz	r3, 80117b8 <GUI_Touch_Processing+0xc30>
 80117b2:	2312      	movs	r3, #18
 80117b4:	f88b 3000 	strb.w	r3, [fp]
						pause = 0;
 80117b8:	4ba0      	ldr	r3, [pc, #640]	; (8011a3c <GUI_Touch_Processing+0xeb4>)
 80117ba:	2200      	movs	r2, #0
 80117bc:	701a      	strb	r2, [r3, #0]
 80117be:	f7ff ba71 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
			preGUI_screen_state = GUI_screen_state;
 80117c2:	4b9f      	ldr	r3, [pc, #636]	; (8011a40 <GUI_Touch_Processing+0xeb8>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Down
 80117c4:	f8bd 0014 	ldrh.w	r0, [sp, #20]
			preGUI_screen_state = GUI_screen_state;
 80117c8:	2207      	movs	r2, #7
 80117ca:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Down
 80117cc:	f7ee feba 	bl	8000544 <__aeabi_i2d>
 80117d0:	4604      	mov	r4, r0
 80117d2:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80117d6:	460d      	mov	r5, r1
 80117d8:	f7ee feb4 	bl	8000544 <__aeabi_i2d>
 80117dc:	a37c      	add	r3, pc, #496	; (adr r3, 80119d0 <GUI_Touch_Processing+0xe48>)
 80117de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e2:	e9cd 0100 	strd	r0, r1, [sp]
 80117e6:	f04f 0701 	mov.w	r7, #1
 80117ea:	f7ef f997 	bl	8000b1c <__aeabi_dcmpge>
 80117ee:	b900      	cbnz	r0, 80117f2 <GUI_Touch_Processing+0xc6a>
 80117f0:	4607      	mov	r7, r0
 80117f2:	2200      	movs	r2, #0
 80117f4:	4b93      	ldr	r3, [pc, #588]	; (8011a44 <GUI_Touch_Processing+0xebc>)
 80117f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117fa:	b2ff      	uxtb	r7, r7
 80117fc:	f04f 0601 	mov.w	r6, #1
 8011800:	f7ef f982 	bl	8000b08 <__aeabi_dcmple>
 8011804:	b900      	cbnz	r0, 8011808 <GUI_Touch_Processing+0xc80>
 8011806:	4606      	mov	r6, r0
 8011808:	b2f3      	uxtb	r3, r6
 801180a:	9303      	str	r3, [sp, #12]
 801180c:	4620      	mov	r0, r4
 801180e:	a372      	add	r3, pc, #456	; (adr r3, 80119d8 <GUI_Touch_Processing+0xe50>)
 8011810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011814:	4629      	mov	r1, r5
 8011816:	f04f 0601 	mov.w	r6, #1
 801181a:	f7ef f97f 	bl	8000b1c <__aeabi_dcmpge>
 801181e:	b900      	cbnz	r0, 8011822 <GUI_Touch_Processing+0xc9a>
 8011820:	4606      	mov	r6, r0
 8011822:	a36f      	add	r3, pc, #444	; (adr r3, 80119e0 <GUI_Touch_Processing+0xe58>)
 8011824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011828:	4620      	mov	r0, r4
 801182a:	4629      	mov	r1, r5
 801182c:	f04f 0801 	mov.w	r8, #1
 8011830:	f7ef f96a 	bl	8000b08 <__aeabi_dcmple>
 8011834:	b900      	cbnz	r0, 8011838 <GUI_Touch_Processing+0xcb0>
 8011836:	4680      	mov	r8, r0
 8011838:	ea06 0608 	and.w	r6, r6, r8
 801183c:	4237      	tst	r7, r6
 801183e:	d006      	beq.n	801184e <GUI_Touch_Processing+0xcc6>
 8011840:	9b03      	ldr	r3, [sp, #12]
 8011842:	b123      	cbz	r3, 801184e <GUI_Touch_Processing+0xcc6>
					GUI_screen_state = DataSet2_Screen;
 8011844:	2308      	movs	r3, #8
 8011846:	f88b 3000 	strb.w	r3, [fp]
 801184a:	f7ff ba2b 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 801184e:	a366      	add	r3, pc, #408	; (adr r3, 80119e8 <GUI_Touch_Processing+0xe60>)
 8011850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011854:	4620      	mov	r0, r4
 8011856:	4629      	mov	r1, r5
 8011858:	f04f 0601 	mov.w	r6, #1
 801185c:	f7ef f95e 	bl	8000b1c <__aeabi_dcmpge>
 8011860:	b900      	cbnz	r0, 8011864 <GUI_Touch_Processing+0xcdc>
 8011862:	4606      	mov	r6, r0
 8011864:	a362      	add	r3, pc, #392	; (adr r3, 80119f0 <GUI_Touch_Processing+0xe68>)
 8011866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801186a:	4620      	mov	r0, r4
 801186c:	4629      	mov	r1, r5
 801186e:	f04f 0801 	mov.w	r8, #1
 8011872:	f7ef f949 	bl	8000b08 <__aeabi_dcmple>
 8011876:	b900      	cbnz	r0, 801187a <GUI_Touch_Processing+0xcf2>
 8011878:	4680      	mov	r8, r0
 801187a:	ea06 0608 	and.w	r6, r6, r8
 801187e:	a35e      	add	r3, pc, #376	; (adr r3, 80119f8 <GUI_Touch_Processing+0xe70>)
 8011880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011884:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011888:	b2f6      	uxtb	r6, r6
 801188a:	f04f 0801 	mov.w	r8, #1
 801188e:	f7ef f945 	bl	8000b1c <__aeabi_dcmpge>
 8011892:	b900      	cbnz	r0, 8011896 <GUI_Touch_Processing+0xd0e>
 8011894:	4680      	mov	r8, r0
 8011896:	a35a      	add	r3, pc, #360	; (adr r3, 8011a00 <GUI_Touch_Processing+0xe78>)
 8011898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801189c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80118a0:	f04f 0901 	mov.w	r9, #1
 80118a4:	f7ef f930 	bl	8000b08 <__aeabi_dcmple>
 80118a8:	b900      	cbnz	r0, 80118ac <GUI_Touch_Processing+0xd24>
 80118aa:	4681      	mov	r9, r0
 80118ac:	ea08 0809 	and.w	r8, r8, r9
 80118b0:	f018 0f01 	tst.w	r8, #1
 80118b4:	d026      	beq.n	8011904 <GUI_Touch_Processing+0xd7c>
 80118b6:	b32e      	cbz	r6, 8011904 <GUI_Touch_Processing+0xd7c>
					Mode_EL = !Mode_EL;
 80118b8:	4c63      	ldr	r4, [pc, #396]	; (8011a48 <GUI_Touch_Processing+0xec0>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80118ba:	4b64      	ldr	r3, [pc, #400]	; (8011a4c <GUI_Touch_Processing+0xec4>)
					Mode_EL = !Mode_EL;
 80118bc:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80118be:	4864      	ldr	r0, [pc, #400]	; (8011a50 <GUI_Touch_Processing+0xec8>)
					Mode_EL = !Mode_EL;
 80118c0:	2a00      	cmp	r2, #0
 80118c2:	bf0c      	ite	eq
 80118c4:	2201      	moveq	r2, #1
 80118c6:	2200      	movne	r2, #0
 80118c8:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80118ca:	bf18      	it	ne
 80118cc:	4618      	movne	r0, r3
 80118ce:	4a61      	ldr	r2, [pc, #388]	; (8011a54 <GUI_Touch_Processing+0xecc>)
 80118d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80118d4:	f7fd f9a8 	bl	800ec28 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80118d8:	7822      	ldrb	r2, [r4, #0]
 80118da:	4b5f      	ldr	r3, [pc, #380]	; (8011a58 <GUI_Touch_Processing+0xed0>)
 80118dc:	b982      	cbnz	r2, 8011900 <GUI_Touch_Processing+0xd78>
 80118de:	4a5f      	ldr	r2, [pc, #380]	; (8011a5c <GUI_Touch_Processing+0xed4>)
 80118e0:	edd2 0a00 	vldr	s1, [r2]
 80118e4:	ed93 0a00 	vldr	s0, [r3]
 80118e8:	f00a f9e2 	bl	801bcb0 <Rabs_calc_Factor2_Settings_change>
 80118ec:	4b5c      	ldr	r3, [pc, #368]	; (8011a60 <GUI_Touch_Processing+0xed8>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80118ee:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80118f0:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80118f4:	21ca      	movs	r1, #202	; 0xca
 80118f6:	20b6      	movs	r0, #182	; 0xb6
 80118f8:	f003 fd74 	bl	80153e4 <GUI_Switch_ButtonActive>
 80118fc:	f7ff b9d2 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8011900:	4a58      	ldr	r2, [pc, #352]	; (8011a64 <GUI_Touch_Processing+0xedc>)
 8011902:	e7ed      	b.n	80118e0 <GUI_Touch_Processing+0xd58>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 8011904:	a340      	add	r3, pc, #256	; (adr r3, 8011a08 <GUI_Touch_Processing+0xe80>)
 8011906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801190e:	f04f 0801 	mov.w	r8, #1
 8011912:	f7ef f903 	bl	8000b1c <__aeabi_dcmpge>
 8011916:	b900      	cbnz	r0, 801191a <GUI_Touch_Processing+0xd92>
 8011918:	4680      	mov	r8, r0
 801191a:	a33d      	add	r3, pc, #244	; (adr r3, 8011a10 <GUI_Touch_Processing+0xe88>)
 801191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011920:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011924:	f04f 0901 	mov.w	r9, #1
 8011928:	f7ef f8ee 	bl	8000b08 <__aeabi_dcmple>
 801192c:	b900      	cbnz	r0, 8011930 <GUI_Touch_Processing+0xda8>
 801192e:	4681      	mov	r9, r0
 8011930:	ea08 0809 	and.w	r8, r8, r9
 8011934:	f018 0f01 	tst.w	r8, #1
 8011938:	d00f      	beq.n	801195a <GUI_Touch_Processing+0xdd2>
 801193a:	b176      	cbz	r6, 801195a <GUI_Touch_Processing+0xdd2>
					Bluetooth = !Bluetooth;
 801193c:	4b4a      	ldr	r3, [pc, #296]	; (8011a68 <GUI_Touch_Processing+0xee0>)
 801193e:	781a      	ldrb	r2, [r3, #0]
 8011940:	fab2 f282 	clz	r2, r2
 8011944:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 8011946:	f44f 7186 	mov.w	r1, #268	; 0x10c
 801194a:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 801194c:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 801194e:	f003 fcef 	bl	8015330 <GUI_Switch_Button>
					GUI_Up_Panel();
 8011952:	f7fd fde1 	bl	800f518 <GUI_Up_Panel>
 8011956:	f7ff b9a5 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 801195a:	a32f      	add	r3, pc, #188	; (adr r3, 8011a18 <GUI_Touch_Processing+0xe90>)
 801195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011960:	4620      	mov	r0, r4
 8011962:	4629      	mov	r1, r5
 8011964:	f04f 0601 	mov.w	r6, #1
 8011968:	f7ef f8d8 	bl	8000b1c <__aeabi_dcmpge>
 801196c:	b900      	cbnz	r0, 8011970 <GUI_Touch_Processing+0xde8>
 801196e:	4606      	mov	r6, r0
 8011970:	a32b      	add	r3, pc, #172	; (adr r3, 8011a20 <GUI_Touch_Processing+0xe98>)
 8011972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011976:	4620      	mov	r0, r4
 8011978:	4629      	mov	r1, r5
 801197a:	f04f 0801 	mov.w	r8, #1
 801197e:	f7ef f8c3 	bl	8000b08 <__aeabi_dcmple>
 8011982:	b900      	cbnz	r0, 8011986 <GUI_Touch_Processing+0xdfe>
 8011984:	4680      	mov	r8, r0
 8011986:	ea06 0608 	and.w	r6, r6, r8
 801198a:	a327      	add	r3, pc, #156	; (adr r3, 8011a28 <GUI_Touch_Processing+0xea0>)
 801198c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011990:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011994:	b2f6      	uxtb	r6, r6
 8011996:	f04f 0801 	mov.w	r8, #1
 801199a:	f7ef f8bf 	bl	8000b1c <__aeabi_dcmpge>
 801199e:	b900      	cbnz	r0, 80119a2 <GUI_Touch_Processing+0xe1a>
 80119a0:	4680      	mov	r8, r0
 80119a2:	a323      	add	r3, pc, #140	; (adr r3, 8011a30 <GUI_Touch_Processing+0xea8>)
 80119a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80119ac:	f04f 0901 	mov.w	r9, #1
 80119b0:	f7ef f8aa 	bl	8000b08 <__aeabi_dcmple>
 80119b4:	b900      	cbnz	r0, 80119b8 <GUI_Touch_Processing+0xe30>
 80119b6:	4681      	mov	r9, r0
 80119b8:	ea08 0809 	and.w	r8, r8, r9
 80119bc:	f018 0f01 	tst.w	r8, #1
 80119c0:	d05c      	beq.n	8011a7c <GUI_Touch_Processing+0xef4>
 80119c2:	2e00      	cmp	r6, #0
 80119c4:	d05a      	beq.n	8011a7c <GUI_Touch_Processing+0xef4>
					GUI_screen_state = Information_Screen;
 80119c6:	2311      	movs	r3, #17
 80119c8:	f88b 3000 	strb.w	r3, [fp]
 80119cc:	f7ff b96a 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 80119d0:	99999999 	.word	0x99999999
 80119d4:	4091a399 	.word	0x4091a399
 80119d8:	33333333 	.word	0x33333333
 80119dc:	407aff33 	.word	0x407aff33
 80119e0:	66666666 	.word	0x66666666
 80119e4:	4081f866 	.word	0x4081f866
 80119e8:	cccccccd 	.word	0xcccccccd
 80119ec:	407e24cc 	.word	0x407e24cc
 80119f0:	33333333 	.word	0x33333333
 80119f4:	40838b33 	.word	0x40838b33
 80119f8:	66666666 	.word	0x66666666
 80119fc:	4080ba66 	.word	0x4080ba66
 8011a00:	33333333 	.word	0x33333333
 8011a04:	40853333 	.word	0x40853333
 8011a08:	99999999 	.word	0x99999999
 8011a0c:	40863199 	.word	0x40863199
 8011a10:	66666666 	.word	0x66666666
 8011a14:	408aaa66 	.word	0x408aaa66
 8011a18:	33333333 	.word	0x33333333
 8011a1c:	40353333 	.word	0x40353333
 8011a20:	00000000 	.word	0x00000000
 8011a24:	4084b400 	.word	0x4084b400
 8011a28:	99999999 	.word	0x99999999
 8011a2c:	40748999 	.word	0x40748999
 8011a30:	99999999 	.word	0x99999999
 8011a34:	407cd199 	.word	0x407cd199
 8011a38:	20090e90 	.word	0x20090e90
 8011a3c:	20004c98 	.word	0x20004c98
 8011a40:	2000022a 	.word	0x2000022a
 8011a44:	4093e000 	.word	0x4093e000
 8011a48:	20000a48 	.word	0x20000a48
 8011a4c:	08101838 	.word	0x08101838
 8011a50:	08100838 	.word	0x08100838
 8011a54:	2004cbe0 	.word	0x2004cbe0
 8011a58:	20004fcc 	.word	0x20004fcc
 8011a5c:	20004fc8 	.word	0x20004fc8
 8011a60:	20004fd4 	.word	0x20004fd4
 8011a64:	20004fc4 	.word	0x20004fc4
 8011a68:	2008bcea 	.word	0x2008bcea
 8011a6c:	00000000 	.word	0x00000000
 8011a70:	40623800 	.word	0x40623800
 8011a74:	99999999 	.word	0x99999999
 8011a78:	40720d99 	.word	0x40720d99
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //Illuminance
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	4bbc      	ldr	r3, [pc, #752]	; (8011d70 <GUI_Touch_Processing+0x11e8>)
 8011a80:	4620      	mov	r0, r4
 8011a82:	4629      	mov	r1, r5
 8011a84:	f04f 0901 	mov.w	r9, #1
 8011a88:	f7ef f848 	bl	8000b1c <__aeabi_dcmpge>
 8011a8c:	b900      	cbnz	r0, 8011a90 <GUI_Touch_Processing+0xf08>
 8011a8e:	4681      	mov	r9, r0
 8011a90:	a3a1      	add	r3, pc, #644	; (adr r3, 8011d18 <GUI_Touch_Processing+0x1190>)
 8011a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a96:	4620      	mov	r0, r4
 8011a98:	4629      	mov	r1, r5
 8011a9a:	f04f 0801 	mov.w	r8, #1
 8011a9e:	f7ef f833 	bl	8000b08 <__aeabi_dcmple>
 8011aa2:	b900      	cbnz	r0, 8011aa6 <GUI_Touch_Processing+0xf1e>
 8011aa4:	4680      	mov	r8, r0
 8011aa6:	a39e      	add	r3, pc, #632	; (adr r3, 8011d20 <GUI_Touch_Processing+0x1198>)
 8011aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ab0:	ea09 0808 	and.w	r8, r9, r8
 8011ab4:	f04f 0901 	mov.w	r9, #1
 8011ab8:	f7ef f830 	bl	8000b1c <__aeabi_dcmpge>
 8011abc:	b900      	cbnz	r0, 8011ac0 <GUI_Touch_Processing+0xf38>
 8011abe:	4681      	mov	r9, r0
 8011ac0:	ea08 0809 	and.w	r8, r8, r9
 8011ac4:	f018 0f01 	tst.w	r8, #1
 8011ac8:	d01b      	beq.n	8011b02 <GUI_Touch_Processing+0xf7a>
 8011aca:	a397      	add	r3, pc, #604	; (adr r3, 8011d28 <GUI_Touch_Processing+0x11a0>)
 8011acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ad4:	f04f 0801 	mov.w	r8, #1
 8011ad8:	f7ef f816 	bl	8000b08 <__aeabi_dcmple>
 8011adc:	b900      	cbnz	r0, 8011ae0 <GUI_Touch_Processing+0xf58>
 8011ade:	4680      	mov	r8, r0
 8011ae0:	f018 0fff 	tst.w	r8, #255	; 0xff
 8011ae4:	d00d      	beq.n	8011b02 <GUI_Touch_Processing+0xf7a>
					Measure_Field ^= Illuminance;
 8011ae6:	4ba3      	ldr	r3, [pc, #652]	; (8011d74 <GUI_Touch_Processing+0x11ec>)
 8011ae8:	881a      	ldrh	r2, [r3, #0]
 8011aea:	f082 0201 	eor.w	r2, r2, #1
 8011aee:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Measure_Field&Illuminance);
 8011af0:	f240 1147 	movw	r1, #327	; 0x147
 8011af4:	f002 0201 	and.w	r2, r2, #1
 8011af8:	20c8      	movs	r0, #200	; 0xc8
 8011afa:	f003 fba9 	bl	8015250 <GUI_CheckBox>
 8011afe:	f7ff b8d1 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8011b02:	9b03      	ldr	r3, [sp, #12]
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8011b04:	4620      	mov	r0, r4
 8011b06:	ea07 0903 	and.w	r9, r7, r3
 8011b0a:	4629      	mov	r1, r5
 8011b0c:	a388      	add	r3, pc, #544	; (adr r3, 8011d30 <GUI_Touch_Processing+0x11a8>)
 8011b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b12:	f04f 0801 	mov.w	r8, #1
 8011b16:	f7ef f801 	bl	8000b1c <__aeabi_dcmpge>
 8011b1a:	b900      	cbnz	r0, 8011b1e <GUI_Touch_Processing+0xf96>
 8011b1c:	4680      	mov	r8, r0
 8011b1e:	a386      	add	r3, pc, #536	; (adr r3, 8011d38 <GUI_Touch_Processing+0x11b0>)
 8011b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b24:	4620      	mov	r0, r4
 8011b26:	4629      	mov	r1, r5
 8011b28:	f04f 0a01 	mov.w	sl, #1
 8011b2c:	f7ee ffec 	bl	8000b08 <__aeabi_dcmple>
 8011b30:	b900      	cbnz	r0, 8011b34 <GUI_Touch_Processing+0xfac>
 8011b32:	4682      	mov	sl, r0
 8011b34:	ea08 080a 	and.w	r8, r8, sl
 8011b38:	f018 0f01 	tst.w	r8, #1
 8011b3c:	d029      	beq.n	8011b92 <GUI_Touch_Processing+0x100a>
 8011b3e:	f1b9 0f00 	cmp.w	r9, #0
 8011b42:	d026      	beq.n	8011b92 <GUI_Touch_Processing+0x100a>
					WriteSDFLASH_t(sdfile_cnt);
 8011b44:	4b8c      	ldr	r3, [pc, #560]	; (8011d78 <GUI_Touch_Processing+0x11f0>)
 8011b46:	2100      	movs	r1, #0
 8011b48:	8818      	ldrh	r0, [r3, #0]
 8011b4a:	f00a f93b 	bl	801bdc4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8011b4e:	4b8b      	ldr	r3, [pc, #556]	; (8011d7c <GUI_Touch_Processing+0x11f4>)
 8011b50:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8011b52:	1e5a      	subs	r2, r3, #1
 8011b54:	2a05      	cmp	r2, #5
 8011b56:	d804      	bhi.n	8011b62 <GUI_Touch_Processing+0xfda>
 8011b58:	e8df f002 	tbb	[pc, r2]
 8011b5c:	0c030307 	.word	0x0c030307
 8011b60:	1116      	.short	0x1116
					GUI_screen_state = Prev_Inf_Screen;
 8011b62:	f88b 3000 	strb.w	r3, [fp]
 8011b66:	f7ff b89d 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	f88b 3000 	strb.w	r3, [fp]
 8011b70:	f7ff b898 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8011b74:	2304      	movs	r3, #4
 8011b76:	f88b 3000 	strb.w	r3, [fp]
 8011b7a:	f7ff b893 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8011b7e:	2306      	movs	r3, #6
 8011b80:	f88b 3000 	strb.w	r3, [fp]
 8011b84:	f7ff b88e 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8011b88:	2305      	movs	r3, #5
 8011b8a:	f88b 3000 	strb.w	r3, [fp]
 8011b8e:	f7ff b889 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 8011b92:	2200      	movs	r2, #0
 8011b94:	4b7a      	ldr	r3, [pc, #488]	; (8011d80 <GUI_Touch_Processing+0x11f8>)
 8011b96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b9a:	f04f 0801 	mov.w	r8, #1
 8011b9e:	f7ee ffbd 	bl	8000b1c <__aeabi_dcmpge>
 8011ba2:	b900      	cbnz	r0, 8011ba6 <GUI_Touch_Processing+0x101e>
 8011ba4:	4680      	mov	r8, r0
 8011ba6:	a366      	add	r3, pc, #408	; (adr r3, 8011d40 <GUI_Touch_Processing+0x11b8>)
 8011ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011bb0:	f04f 0a01 	mov.w	sl, #1
 8011bb4:	f7ee ffa8 	bl	8000b08 <__aeabi_dcmple>
 8011bb8:	b900      	cbnz	r0, 8011bbc <GUI_Touch_Processing+0x1034>
 8011bba:	4682      	mov	sl, r0
 8011bbc:	ea08 080a 	and.w	r8, r8, sl
 8011bc0:	f018 0f01 	tst.w	r8, #1
 8011bc4:	d00e      	beq.n	8011be4 <GUI_Touch_Processing+0x105c>
 8011bc6:	b16e      	cbz	r6, 8011be4 <GUI_Touch_Processing+0x105c>
					if (Language_status == Ru) Language_status=En;
 8011bc8:	4b6e      	ldr	r3, [pc, #440]	; (8011d84 <GUI_Touch_Processing+0x11fc>)
 8011bca:	781a      	ldrb	r2, [r3, #0]
 8011bcc:	b91a      	cbnz	r2, 8011bd6 <GUI_Touch_Processing+0x104e>
 8011bce:	2201      	movs	r2, #1
 8011bd0:	701a      	strb	r2, [r3, #0]
 8011bd2:	f7ff b867 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
					else if (Language_status == En) Language_status=Ru;
 8011bd6:	2a01      	cmp	r2, #1
 8011bd8:	f47f a864 	bne.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8011bdc:	2200      	movs	r2, #0
 8011bde:	701a      	strb	r2, [r3, #0]
 8011be0:	f7ff b860 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8011be4:	a358      	add	r3, pc, #352	; (adr r3, 8011d48 <GUI_Touch_Processing+0x11c0>)
 8011be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bea:	4620      	mov	r0, r4
 8011bec:	4629      	mov	r1, r5
 8011bee:	f04f 0601 	mov.w	r6, #1
 8011bf2:	f7ee ff93 	bl	8000b1c <__aeabi_dcmpge>
 8011bf6:	b900      	cbnz	r0, 8011bfa <GUI_Touch_Processing+0x1072>
 8011bf8:	4606      	mov	r6, r0
 8011bfa:	a355      	add	r3, pc, #340	; (adr r3, 8011d50 <GUI_Touch_Processing+0x11c8>)
 8011bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c00:	4620      	mov	r0, r4
 8011c02:	4629      	mov	r1, r5
 8011c04:	f04f 0801 	mov.w	r8, #1
 8011c08:	f7ee ff7e 	bl	8000b08 <__aeabi_dcmple>
 8011c0c:	b900      	cbnz	r0, 8011c10 <GUI_Touch_Processing+0x1088>
 8011c0e:	4680      	mov	r8, r0
 8011c10:	ea06 0308 	and.w	r3, r6, r8
 8011c14:	07db      	lsls	r3, r3, #31
 8011c16:	d511      	bpl.n	8011c3c <GUI_Touch_Processing+0x10b4>
 8011c18:	f1b9 0f00 	cmp.w	r9, #0
 8011c1c:	d00e      	beq.n	8011c3c <GUI_Touch_Processing+0x10b4>
					TFT_ON_OFF = 0x00;
 8011c1e:	4b5a      	ldr	r3, [pc, #360]	; (8011d88 <GUI_Touch_Processing+0x1200>)
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8011c20:	485a      	ldr	r0, [pc, #360]	; (8011d8c <GUI_Touch_Processing+0x1204>)
					TFT_ON_OFF = 0x00;
 8011c22:	2400      	movs	r4, #0
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8011c24:	2104      	movs	r1, #4
					TFT_ON_OFF = 0x00;
 8011c26:	701c      	strb	r4, [r3, #0]
					HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 8011c28:	f7f4 fc68 	bl	80064fc <HAL_TIM_PWM_Stop>
					HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 8011c2c:	4622      	mov	r2, r4
 8011c2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011c32:	4857      	ldr	r0, [pc, #348]	; (8011d90 <GUI_Touch_Processing+0x1208>)
 8011c34:	f7f0 fdbc 	bl	80027b0 <HAL_GPIO_WritePin>
 8011c38:	f7ff b834 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011c3c:	a33e      	add	r3, pc, #248	; (adr r3, 8011d38 <GUI_Touch_Processing+0x11b0>)
 8011c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c42:	4620      	mov	r0, r4
 8011c44:	4629      	mov	r1, r5
 8011c46:	f04f 0601 	mov.w	r6, #1
 8011c4a:	f7ee ff67 	bl	8000b1c <__aeabi_dcmpge>
 8011c4e:	b900      	cbnz	r0, 8011c52 <GUI_Touch_Processing+0x10ca>
 8011c50:	4606      	mov	r6, r0
 8011c52:	a341      	add	r3, pc, #260	; (adr r3, 8011d58 <GUI_Touch_Processing+0x11d0>)
 8011c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c58:	4620      	mov	r0, r4
 8011c5a:	4629      	mov	r1, r5
 8011c5c:	f04f 0801 	mov.w	r8, #1
 8011c60:	f7ee ff52 	bl	8000b08 <__aeabi_dcmple>
 8011c64:	b900      	cbnz	r0, 8011c68 <GUI_Touch_Processing+0x10e0>
 8011c66:	4680      	mov	r8, r0
 8011c68:	ea06 0608 	and.w	r6, r6, r8
 8011c6c:	4237      	tst	r7, r6
 8011c6e:	f43f a819 	beq.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8011c72:	9b03      	ldr	r3, [sp, #12]
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	f47f a855 	bne.w	8010d24 <GUI_Touch_Processing+0x19c>
 8011c7a:	f7ff b813 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				preGUI_screen_state = GUI_screen_state;
 8011c7e:	4b45      	ldr	r3, [pc, #276]	; (8011d94 <GUI_Touch_Processing+0x120c>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)////down
 8011c80:	f8bd 0014 	ldrh.w	r0, [sp, #20]
				preGUI_screen_state = GUI_screen_state;
 8011c84:	2208      	movs	r2, #8
 8011c86:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)////down
 8011c88:	f7ee fc5c 	bl	8000544 <__aeabi_i2d>
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8011c92:	460d      	mov	r5, r1
 8011c94:	f7ee fc56 	bl	8000544 <__aeabi_i2d>
 8011c98:	a331      	add	r3, pc, #196	; (adr r3, 8011d60 <GUI_Touch_Processing+0x11d8>)
 8011c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c9e:	4606      	mov	r6, r0
 8011ca0:	460f      	mov	r7, r1
 8011ca2:	f04f 0a01 	mov.w	sl, #1
 8011ca6:	f7ee ff39 	bl	8000b1c <__aeabi_dcmpge>
 8011caa:	b900      	cbnz	r0, 8011cae <GUI_Touch_Processing+0x1126>
 8011cac:	4682      	mov	sl, r0
 8011cae:	2200      	movs	r2, #0
 8011cb0:	4b39      	ldr	r3, [pc, #228]	; (8011d98 <GUI_Touch_Processing+0x1210>)
 8011cb2:	4630      	mov	r0, r6
 8011cb4:	4639      	mov	r1, r7
 8011cb6:	fa5f fa8a 	uxtb.w	sl, sl
 8011cba:	f04f 0801 	mov.w	r8, #1
 8011cbe:	f7ee ff23 	bl	8000b08 <__aeabi_dcmple>
 8011cc2:	b900      	cbnz	r0, 8011cc6 <GUI_Touch_Processing+0x113e>
 8011cc4:	4680      	mov	r8, r0
 8011cc6:	fa5f f388 	uxtb.w	r3, r8
 8011cca:	9300      	str	r3, [sp, #0]
 8011ccc:	4620      	mov	r0, r4
 8011cce:	a326      	add	r3, pc, #152	; (adr r3, 8011d68 <GUI_Touch_Processing+0x11e0>)
 8011cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd4:	4629      	mov	r1, r5
 8011cd6:	f04f 0801 	mov.w	r8, #1
 8011cda:	f7ee ff1f 	bl	8000b1c <__aeabi_dcmpge>
 8011cde:	b900      	cbnz	r0, 8011ce2 <GUI_Touch_Processing+0x115a>
 8011ce0:	4680      	mov	r8, r0
 8011ce2:	a319      	add	r3, pc, #100	; (adr r3, 8011d48 <GUI_Touch_Processing+0x11c0>)
 8011ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce8:	4620      	mov	r0, r4
 8011cea:	4629      	mov	r1, r5
 8011cec:	f04f 0901 	mov.w	r9, #1
 8011cf0:	f7ee ff0a 	bl	8000b08 <__aeabi_dcmple>
 8011cf4:	b900      	cbnz	r0, 8011cf8 <GUI_Touch_Processing+0x1170>
 8011cf6:	4681      	mov	r9, r0
 8011cf8:	ea08 0809 	and.w	r8, r8, r9
 8011cfc:	ea1a 0f08 	tst.w	sl, r8
 8011d00:	d04c      	beq.n	8011d9c <GUI_Touch_Processing+0x1214>
 8011d02:	9b00      	ldr	r3, [sp, #0]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d049      	beq.n	8011d9c <GUI_Touch_Processing+0x1214>
					GUI_screen_state = DataSet3_Screen;
 8011d08:	2309      	movs	r3, #9
 8011d0a:	f88b 3000 	strb.w	r3, [fp]
 8011d0e:	f7fe bfc9 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8011d12:	bf00      	nop
 8011d14:	f3af 8000 	nop.w
 8011d18:	cccccccd 	.word	0xcccccccd
 8011d1c:	408508cc 	.word	0x408508cc
 8011d20:	66666666 	.word	0x66666666
 8011d24:	408b1466 	.word	0x408b1466
 8011d28:	33333333 	.word	0x33333333
 8011d2c:	408f8d33 	.word	0x408f8d33
 8011d30:	33333333 	.word	0x33333333
 8011d34:	40053333 	.word	0x40053333
 8011d38:	00000000 	.word	0x00000000
 8011d3c:	40623800 	.word	0x40623800
 8011d40:	00000000 	.word	0x00000000
 8011d44:	4073e000 	.word	0x4073e000
 8011d48:	66666666 	.word	0x66666666
 8011d4c:	4081f866 	.word	0x4081f866
 8011d50:	33333333 	.word	0x33333333
 8011d54:	40867133 	.word	0x40867133
 8011d58:	99999999 	.word	0x99999999
 8011d5c:	40720d99 	.word	0x40720d99
 8011d60:	99999999 	.word	0x99999999
 8011d64:	4091a399 	.word	0x4091a399
 8011d68:	33333333 	.word	0x33333333
 8011d6c:	407aff33 	.word	0x407aff33
 8011d70:	40809000 	.word	0x40809000
 8011d74:	20004c76 	.word	0x20004c76
 8011d78:	20004c9e 	.word	0x20004c9e
 8011d7c:	2008bce5 	.word	0x2008bce5
 8011d80:	406a8000 	.word	0x406a8000
 8011d84:	20004c73 	.word	0x20004c73
 8011d88:	20000a4a 	.word	0x20000a4a
 8011d8c:	200909e4 	.word	0x200909e4
 8011d90:	48001400 	.word	0x48001400
 8011d94:	2000022a 	.word	0x2000022a
 8011d98:	4093e000 	.word	0x4093e000
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //Irradiance
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	4bb6      	ldr	r3, [pc, #728]	; (8012078 <GUI_Touch_Processing+0x14f0>)
 8011da0:	4620      	mov	r0, r4
 8011da2:	4629      	mov	r1, r5
 8011da4:	f04f 0801 	mov.w	r8, #1
 8011da8:	f7ee feb8 	bl	8000b1c <__aeabi_dcmpge>
 8011dac:	b900      	cbnz	r0, 8011db0 <GUI_Touch_Processing+0x1228>
 8011dae:	4680      	mov	r8, r0
 8011db0:	a397      	add	r3, pc, #604	; (adr r3, 8012010 <GUI_Touch_Processing+0x1488>)
 8011db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db6:	4620      	mov	r0, r4
 8011db8:	4629      	mov	r1, r5
 8011dba:	f04f 0901 	mov.w	r9, #1
 8011dbe:	f7ee fea3 	bl	8000b08 <__aeabi_dcmple>
 8011dc2:	b900      	cbnz	r0, 8011dc6 <GUI_Touch_Processing+0x123e>
 8011dc4:	4681      	mov	r9, r0
 8011dc6:	ea08 0809 	and.w	r8, r8, r9
 8011dca:	a393      	add	r3, pc, #588	; (adr r3, 8012018 <GUI_Touch_Processing+0x1490>)
 8011dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dd0:	4630      	mov	r0, r6
 8011dd2:	4639      	mov	r1, r7
 8011dd4:	fa5f f888 	uxtb.w	r8, r8
 8011dd8:	f04f 0901 	mov.w	r9, #1
 8011ddc:	f7ee fe9e 	bl	8000b1c <__aeabi_dcmpge>
 8011de0:	b900      	cbnz	r0, 8011de4 <GUI_Touch_Processing+0x125c>
 8011de2:	4681      	mov	r9, r0
 8011de4:	a38e      	add	r3, pc, #568	; (adr r3, 8012020 <GUI_Touch_Processing+0x1498>)
 8011de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dea:	4630      	mov	r0, r6
 8011dec:	4639      	mov	r1, r7
 8011dee:	f04f 0b01 	mov.w	fp, #1
 8011df2:	f7ee fe89 	bl	8000b08 <__aeabi_dcmple>
 8011df6:	b900      	cbnz	r0, 8011dfa <GUI_Touch_Processing+0x1272>
 8011df8:	4683      	mov	fp, r0
 8011dfa:	ea09 090b 	and.w	r9, r9, fp
 8011dfe:	f019 0f01 	tst.w	r9, #1
 8011e02:	d00f      	beq.n	8011e24 <GUI_Touch_Processing+0x129c>
 8011e04:	f1b8 0f00 	cmp.w	r8, #0
 8011e08:	d00c      	beq.n	8011e24 <GUI_Touch_Processing+0x129c>
					Measure_Field ^= Irradiance;
 8011e0a:	4b9c      	ldr	r3, [pc, #624]	; (801207c <GUI_Touch_Processing+0x14f4>)
 8011e0c:	881a      	ldrh	r2, [r3, #0]
 8011e0e:	f082 0202 	eor.w	r2, r2, #2
 8011e12:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&Irradiance);
 8011e14:	2146      	movs	r1, #70	; 0x46
 8011e16:	f002 0202 	and.w	r2, r2, #2
 8011e1a:	20c8      	movs	r0, #200	; 0xc8
 8011e1c:	f003 fa18 	bl	8015250 <GUI_CheckBox>
 8011e20:	f7fe bf40 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //PPFD
 8011e24:	a380      	add	r3, pc, #512	; (adr r3, 8012028 <GUI_Touch_Processing+0x14a0>)
 8011e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e2a:	4630      	mov	r0, r6
 8011e2c:	4639      	mov	r1, r7
 8011e2e:	f04f 0901 	mov.w	r9, #1
 8011e32:	f7ee fe73 	bl	8000b1c <__aeabi_dcmpge>
 8011e36:	b900      	cbnz	r0, 8011e3a <GUI_Touch_Processing+0x12b2>
 8011e38:	4681      	mov	r9, r0
 8011e3a:	a37d      	add	r3, pc, #500	; (adr r3, 8012030 <GUI_Touch_Processing+0x14a8>)
 8011e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e40:	4630      	mov	r0, r6
 8011e42:	4639      	mov	r1, r7
 8011e44:	f04f 0b01 	mov.w	fp, #1
 8011e48:	f7ee fe5e 	bl	8000b08 <__aeabi_dcmple>
 8011e4c:	b900      	cbnz	r0, 8011e50 <GUI_Touch_Processing+0x12c8>
 8011e4e:	4683      	mov	fp, r0
 8011e50:	ea09 090b 	and.w	r9, r9, fp
 8011e54:	f019 0f01 	tst.w	r9, #1
 8011e58:	d00f      	beq.n	8011e7a <GUI_Touch_Processing+0x12f2>
 8011e5a:	f1b8 0f00 	cmp.w	r8, #0
 8011e5e:	d00c      	beq.n	8011e7a <GUI_Touch_Processing+0x12f2>
					Measure_Field ^= PPFD;
 8011e60:	4b86      	ldr	r3, [pc, #536]	; (801207c <GUI_Touch_Processing+0x14f4>)
 8011e62:	881a      	ldrh	r2, [r3, #0]
 8011e64:	f082 0204 	eor.w	r2, r2, #4
 8011e68:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 133, Measure_Field&PPFD);
 8011e6a:	2185      	movs	r1, #133	; 0x85
 8011e6c:	f002 0204 	and.w	r2, r2, #4
 8011e70:	20c8      	movs	r0, #200	; 0xc8
 8011e72:	f003 f9ed 	bl	8015250 <GUI_CheckBox>
 8011e76:	f7fe bf15 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=198*TS_Callib & Touch_y <=(198+54)*TS_Callib) //PPFD_BGR
 8011e7a:	a36f      	add	r3, pc, #444	; (adr r3, 8012038 <GUI_Touch_Processing+0x14b0>)
 8011e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e80:	4630      	mov	r0, r6
 8011e82:	4639      	mov	r1, r7
 8011e84:	f04f 0901 	mov.w	r9, #1
 8011e88:	f7ee fe48 	bl	8000b1c <__aeabi_dcmpge>
 8011e8c:	b900      	cbnz	r0, 8011e90 <GUI_Touch_Processing+0x1308>
 8011e8e:	4681      	mov	r9, r0
 8011e90:	a36b      	add	r3, pc, #428	; (adr r3, 8012040 <GUI_Touch_Processing+0x14b8>)
 8011e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e96:	4630      	mov	r0, r6
 8011e98:	4639      	mov	r1, r7
 8011e9a:	f04f 0b01 	mov.w	fp, #1
 8011e9e:	f7ee fe33 	bl	8000b08 <__aeabi_dcmple>
 8011ea2:	b900      	cbnz	r0, 8011ea6 <GUI_Touch_Processing+0x131e>
 8011ea4:	4683      	mov	fp, r0
 8011ea6:	ea09 090b 	and.w	r9, r9, fp
 8011eaa:	f019 0f01 	tst.w	r9, #1
 8011eae:	d00f      	beq.n	8011ed0 <GUI_Touch_Processing+0x1348>
 8011eb0:	f1b8 0f00 	cmp.w	r8, #0
 8011eb4:	d00c      	beq.n	8011ed0 <GUI_Touch_Processing+0x1348>
					Measure_Field ^= PPFD_BGR;
 8011eb6:	4b71      	ldr	r3, [pc, #452]	; (801207c <GUI_Touch_Processing+0x14f4>)
 8011eb8:	881a      	ldrh	r2, [r3, #0]
 8011eba:	f082 0208 	eor.w	r2, r2, #8
 8011ebe:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&PPFD_BGR);
 8011ec0:	21c6      	movs	r1, #198	; 0xc6
 8011ec2:	f002 0208 	and.w	r2, r2, #8
 8011ec6:	20c8      	movs	r0, #200	; 0xc8
 8011ec8:	f003 f9c2 	bl	8015250 <GUI_CheckBox>
 8011ecc:	f7fe beea 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=263*TS_Callib & Touch_y <=(263+54)*TS_Callib) //CCT
 8011ed0:	a35d      	add	r3, pc, #372	; (adr r3, 8012048 <GUI_Touch_Processing+0x14c0>)
 8011ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed6:	4630      	mov	r0, r6
 8011ed8:	4639      	mov	r1, r7
 8011eda:	f04f 0901 	mov.w	r9, #1
 8011ede:	f7ee fe1d 	bl	8000b1c <__aeabi_dcmpge>
 8011ee2:	b900      	cbnz	r0, 8011ee6 <GUI_Touch_Processing+0x135e>
 8011ee4:	4681      	mov	r9, r0
 8011ee6:	a35a      	add	r3, pc, #360	; (adr r3, 8012050 <GUI_Touch_Processing+0x14c8>)
 8011ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eec:	4630      	mov	r0, r6
 8011eee:	4639      	mov	r1, r7
 8011ef0:	f04f 0b01 	mov.w	fp, #1
 8011ef4:	f7ee fe08 	bl	8000b08 <__aeabi_dcmple>
 8011ef8:	b900      	cbnz	r0, 8011efc <GUI_Touch_Processing+0x1374>
 8011efa:	4683      	mov	fp, r0
 8011efc:	ea09 090b 	and.w	r9, r9, fp
 8011f00:	f019 0f01 	tst.w	r9, #1
 8011f04:	d010      	beq.n	8011f28 <GUI_Touch_Processing+0x13a0>
 8011f06:	f1b8 0f00 	cmp.w	r8, #0
 8011f0a:	d00d      	beq.n	8011f28 <GUI_Touch_Processing+0x13a0>
					Measure_Field ^= CCT;
 8011f0c:	4b5b      	ldr	r3, [pc, #364]	; (801207c <GUI_Touch_Processing+0x14f4>)
 8011f0e:	881a      	ldrh	r2, [r3, #0]
 8011f10:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8011f14:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 263, Measure_Field&CCT);
 8011f16:	f240 1107 	movw	r1, #263	; 0x107
 8011f1a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8011f1e:	20c8      	movs	r0, #200	; 0xc8
 8011f20:	f003 f996 	bl	8015250 <GUI_CheckBox>
 8011f24:	f7fe bebe 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //delta_E
 8011f28:	a34b      	add	r3, pc, #300	; (adr r3, 8012058 <GUI_Touch_Processing+0x14d0>)
 8011f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f2e:	4630      	mov	r0, r6
 8011f30:	4639      	mov	r1, r7
 8011f32:	f04f 0901 	mov.w	r9, #1
 8011f36:	f7ee fdf1 	bl	8000b1c <__aeabi_dcmpge>
 8011f3a:	b900      	cbnz	r0, 8011f3e <GUI_Touch_Processing+0x13b6>
 8011f3c:	4681      	mov	r9, r0
 8011f3e:	a348      	add	r3, pc, #288	; (adr r3, 8012060 <GUI_Touch_Processing+0x14d8>)
 8011f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f44:	4630      	mov	r0, r6
 8011f46:	4639      	mov	r1, r7
 8011f48:	f04f 0b01 	mov.w	fp, #1
 8011f4c:	f7ee fddc 	bl	8000b08 <__aeabi_dcmple>
 8011f50:	b900      	cbnz	r0, 8011f54 <GUI_Touch_Processing+0x13cc>
 8011f52:	4683      	mov	fp, r0
 8011f54:	ea09 090b 	and.w	r9, r9, fp
 8011f58:	fa5f f689 	uxtb.w	r6, r9
 8011f5c:	f1b8 0f00 	cmp.w	r8, #0
 8011f60:	d017      	beq.n	8011f92 <GUI_Touch_Processing+0x140a>
 8011f62:	b1b6      	cbz	r6, 8011f92 <GUI_Touch_Processing+0x140a>
					Measure_Field ^= delta_E;
 8011f64:	4c45      	ldr	r4, [pc, #276]	; (801207c <GUI_Touch_Processing+0x14f4>)
 8011f66:	8822      	ldrh	r2, [r4, #0]
 8011f68:	f482 6200 	eor.w	r2, r2, #2048	; 0x800
 8011f6c:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 327, Measure_Field&delta_E);
 8011f6e:	f240 1147 	movw	r1, #327	; 0x147
 8011f72:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8011f76:	20c8      	movs	r0, #200	; 0xc8
 8011f78:	f003 f96a 	bl	8015250 <GUI_CheckBox>
					GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 0);
 8011f7c:	8822      	ldrh	r2, [r4, #0]
 8011f7e:	2300      	movs	r3, #0
 8011f80:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8011f84:	f240 1147 	movw	r1, #327	; 0x147
 8011f88:	2082      	movs	r0, #130	; 0x82
 8011f8a:	f003 f841 	bl	8015010 <GUI_Button_Measure_deltaE_Small>
 8011f8e:	f7fe be89 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				else	if(Touch_x >= 130*TS_Callib & Touch_x <= (200+38)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //delta_E_measure_small
 8011f92:	a335      	add	r3, pc, #212	; (adr r3, 8012068 <GUI_Touch_Processing+0x14e0>)
 8011f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f98:	4620      	mov	r0, r4
 8011f9a:	4629      	mov	r1, r5
 8011f9c:	f04f 0701 	mov.w	r7, #1
 8011fa0:	f7ee fdbc 	bl	8000b1c <__aeabi_dcmpge>
 8011fa4:	b900      	cbnz	r0, 8011fa8 <GUI_Touch_Processing+0x1420>
 8011fa6:	4607      	mov	r7, r0
 8011fa8:	a331      	add	r3, pc, #196	; (adr r3, 8012070 <GUI_Touch_Processing+0x14e8>)
 8011faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fae:	4620      	mov	r0, r4
 8011fb0:	4629      	mov	r1, r5
 8011fb2:	f04f 0801 	mov.w	r8, #1
 8011fb6:	f7ee fda7 	bl	8000b08 <__aeabi_dcmple>
 8011fba:	b900      	cbnz	r0, 8011fbe <GUI_Touch_Processing+0x1436>
 8011fbc:	4680      	mov	r8, r0
 8011fbe:	ea07 0308 	and.w	r3, r7, r8
 8011fc2:	07df      	lsls	r7, r3, #31
 8011fc4:	d568      	bpl.n	8012098 <GUI_Touch_Processing+0x1510>
 8011fc6:	2e00      	cmp	r6, #0
 8011fc8:	d066      	beq.n	8012098 <GUI_Touch_Processing+0x1510>
					if(Measure_Field&delta_E)
 8011fca:	4c2c      	ldr	r4, [pc, #176]	; (801207c <GUI_Touch_Processing+0x14f4>)
 8011fcc:	8823      	ldrh	r3, [r4, #0]
 8011fce:	0518      	lsls	r0, r3, #20
 8011fd0:	f57e ae68 	bpl.w	8010ca4 <GUI_Touch_Processing+0x11c>
						Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 8011fd4:	4b2a      	ldr	r3, [pc, #168]	; (8012080 <GUI_Touch_Processing+0x14f8>)
 8011fd6:	482b      	ldr	r0, [pc, #172]	; (8012084 <GUI_Touch_Processing+0x14fc>)
 8011fd8:	7819      	ldrb	r1, [r3, #0]
 8011fda:	4b2b      	ldr	r3, [pc, #172]	; (8012088 <GUI_Touch_Processing+0x1500>)
 8011fdc:	781a      	ldrb	r2, [r3, #0]
 8011fde:	4b2b      	ldr	r3, [pc, #172]	; (801208c <GUI_Touch_Processing+0x1504>)
 8011fe0:	2900      	cmp	r1, #0
 8011fe2:	bf08      	it	eq
 8011fe4:	4618      	moveq	r0, r3
 8011fe6:	f7fc fb07 	bl	800e5f8 <Calculate_Lab>
						colorimetry_LAB_mem[0] = colorimetry_LAB[0];
 8011fea:	4a29      	ldr	r2, [pc, #164]	; (8012090 <GUI_Touch_Processing+0x1508>)
 8011fec:	4b29      	ldr	r3, [pc, #164]	; (8012094 <GUI_Touch_Processing+0x150c>)
 8011fee:	8811      	ldrh	r1, [r2, #0]
 8011ff0:	8019      	strh	r1, [r3, #0]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 8011ff2:	8851      	ldrh	r1, [r2, #2]
						colorimetry_LAB_mem[2] = colorimetry_LAB[2];
 8011ff4:	8892      	ldrh	r2, [r2, #4]
 8011ff6:	809a      	strh	r2, [r3, #4]
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8011ff8:	8822      	ldrh	r2, [r4, #0]
						colorimetry_LAB_mem[1] = colorimetry_LAB[1];
 8011ffa:	8059      	strh	r1, [r3, #2]
						GUI_Button_Measure_deltaE_Small(130, 327, Measure_Field&delta_E, 1);
 8011ffc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8012000:	2301      	movs	r3, #1
 8012002:	f240 1147 	movw	r1, #327	; 0x147
 8012006:	2082      	movs	r0, #130	; 0x82
 8012008:	f003 f802 	bl	8015010 <GUI_Button_Measure_deltaE_Small>
 801200c:	f7fe be4a 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8012010:	cccccccd 	.word	0xcccccccd
 8012014:	408508cc 	.word	0x408508cc
 8012018:	00000000 	.word	0x00000000
 801201c:	40673000 	.word	0x40673000
 8012020:	99999999 	.word	0x99999999
 8012024:	40748999 	.word	0x40748999
 8012028:	33333333 	.word	0x33333333
 801202c:	40760733 	.word	0x40760733
 8012030:	cccccccd 	.word	0xcccccccd
 8012034:	407ef8cc 	.word	0x407ef8cc
 8012038:	99999999 	.word	0x99999999
 801203c:	40806599 	.word	0x40806599
 8012040:	66666666 	.word	0x66666666
 8012044:	4084de66 	.word	0x4084de66
 8012048:	99999999 	.word	0x99999999
 801204c:	4085c799 	.word	0x4085c799
 8012050:	66666666 	.word	0x66666666
 8012054:	408a4066 	.word	0x408a4066
 8012058:	66666666 	.word	0x66666666
 801205c:	408b1466 	.word	0x408b1466
 8012060:	33333333 	.word	0x33333333
 8012064:	408f8d33 	.word	0x408f8d33
 8012068:	00000000 	.word	0x00000000
 801206c:	40758800 	.word	0x40758800
 8012070:	99999999 	.word	0x99999999
 8012074:	4083b599 	.word	0x4083b599
 8012078:	40809000 	.word	0x40809000
 801207c:	20004c76 	.word	0x20004c76
 8012080:	20004c74 	.word	0x20004c74
 8012084:	2008a7be 	.word	0x2008a7be
 8012088:	2008bce9 	.word	0x2008bce9
 801208c:	2008a7c4 	.word	0x2008a7c4
 8012090:	2008a7b8 	.word	0x2008a7b8
 8012094:	2008c278 	.word	0x2008c278
 8012098:	9b00      	ldr	r3, [sp, #0]
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 801209a:	4620      	mov	r0, r4
 801209c:	ea0a 0703 	and.w	r7, sl, r3
 80120a0:	4629      	mov	r1, r5
 80120a2:	a3bd      	add	r3, pc, #756	; (adr r3, 8012398 <GUI_Touch_Processing+0x1810>)
 80120a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a8:	f04f 0601 	mov.w	r6, #1
 80120ac:	f7ee fd36 	bl	8000b1c <__aeabi_dcmpge>
 80120b0:	b900      	cbnz	r0, 80120b4 <GUI_Touch_Processing+0x152c>
 80120b2:	4606      	mov	r6, r0
 80120b4:	a39e      	add	r3, pc, #632	; (adr r3, 8012330 <GUI_Touch_Processing+0x17a8>)
 80120b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ba:	4620      	mov	r0, r4
 80120bc:	4629      	mov	r1, r5
 80120be:	f04f 0801 	mov.w	r8, #1
 80120c2:	f7ee fd21 	bl	8000b08 <__aeabi_dcmple>
 80120c6:	b900      	cbnz	r0, 80120ca <GUI_Touch_Processing+0x1542>
 80120c8:	4680      	mov	r8, r0
 80120ca:	ea06 0308 	and.w	r3, r6, r8
 80120ce:	07d9      	lsls	r1, r3, #31
 80120d0:	d523      	bpl.n	801211a <GUI_Touch_Processing+0x1592>
 80120d2:	b317      	cbz	r7, 801211a <GUI_Touch_Processing+0x1592>
					WriteSDFLASH_t(sdfile_cnt);
 80120d4:	4ba8      	ldr	r3, [pc, #672]	; (8012378 <GUI_Touch_Processing+0x17f0>)
 80120d6:	2100      	movs	r1, #0
 80120d8:	8818      	ldrh	r0, [r3, #0]
 80120da:	f009 fe73 	bl	801bdc4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80120de:	4ba7      	ldr	r3, [pc, #668]	; (801237c <GUI_Touch_Processing+0x17f4>)
 80120e0:	781a      	ldrb	r2, [r3, #0]
 80120e2:	4ba7      	ldr	r3, [pc, #668]	; (8012380 <GUI_Touch_Processing+0x17f8>)
					switch (Prev_Inf_Screen){
 80120e4:	1e51      	subs	r1, r2, #1
 80120e6:	2905      	cmp	r1, #5
 80120e8:	d804      	bhi.n	80120f4 <GUI_Touch_Processing+0x156c>
 80120ea:	e8df f001 	tbb	[pc, r1]
 80120ee:	0306      	.short	0x0306
 80120f0:	0e120a03 	.word	0x0e120a03
					GUI_screen_state = Prev_Inf_Screen;
 80120f4:	701a      	strb	r2, [r3, #0]
 80120f6:	f7fe bdd5 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80120fa:	2201      	movs	r2, #1
 80120fc:	701a      	strb	r2, [r3, #0]
 80120fe:	f7fe bdd1 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8012102:	2204      	movs	r2, #4
 8012104:	701a      	strb	r2, [r3, #0]
 8012106:	f7fe bdcd 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 801210a:	2206      	movs	r2, #6
 801210c:	701a      	strb	r2, [r3, #0]
 801210e:	f7fe bdc9 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8012112:	2205      	movs	r2, #5
 8012114:	701a      	strb	r2, [r3, #0]
 8012116:	f7fe bdc5 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 801211a:	a381      	add	r3, pc, #516	; (adr r3, 8012320 <GUI_Touch_Processing+0x1798>)
 801211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012120:	4620      	mov	r0, r4
 8012122:	4629      	mov	r1, r5
 8012124:	f04f 0601 	mov.w	r6, #1
 8012128:	f7ee fcf8 	bl	8000b1c <__aeabi_dcmpge>
 801212c:	b900      	cbnz	r0, 8012130 <GUI_Touch_Processing+0x15a8>
 801212e:	4606      	mov	r6, r0
 8012130:	a37d      	add	r3, pc, #500	; (adr r3, 8012328 <GUI_Touch_Processing+0x17a0>)
 8012132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012136:	4620      	mov	r0, r4
 8012138:	4629      	mov	r1, r5
 801213a:	f04f 0801 	mov.w	r8, #1
 801213e:	f7ee fce3 	bl	8000b08 <__aeabi_dcmple>
 8012142:	b900      	cbnz	r0, 8012146 <GUI_Touch_Processing+0x15be>
 8012144:	4680      	mov	r8, r0
 8012146:	ea06 0308 	and.w	r3, r6, r8
 801214a:	07da      	lsls	r2, r3, #31
 801214c:	d502      	bpl.n	8012154 <GUI_Touch_Processing+0x15cc>
 801214e:	2f00      	cmp	r7, #0
 8012150:	f47f ad65 	bne.w	8011c1e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8012154:	a376      	add	r3, pc, #472	; (adr r3, 8012330 <GUI_Touch_Processing+0x17a8>)
 8012156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801215a:	4620      	mov	r0, r4
 801215c:	4629      	mov	r1, r5
 801215e:	f04f 0601 	mov.w	r6, #1
 8012162:	f7ee fcdb 	bl	8000b1c <__aeabi_dcmpge>
 8012166:	b900      	cbnz	r0, 801216a <GUI_Touch_Processing+0x15e2>
 8012168:	4606      	mov	r6, r0
 801216a:	a373      	add	r3, pc, #460	; (adr r3, 8012338 <GUI_Touch_Processing+0x17b0>)
 801216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012170:	4620      	mov	r0, r4
 8012172:	4629      	mov	r1, r5
 8012174:	f04f 0701 	mov.w	r7, #1
 8012178:	f7ee fcc6 	bl	8000b08 <__aeabi_dcmple>
 801217c:	b900      	cbnz	r0, 8012180 <GUI_Touch_Processing+0x15f8>
 801217e:	4607      	mov	r7, r0
 8012180:	403e      	ands	r6, r7
 8012182:	ea1a 0f06 	tst.w	sl, r6
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8012186:	f43e ad8d 	beq.w	8010ca4 <GUI_Touch_Processing+0x11c>
 801218a:	9b00      	ldr	r3, [sp, #0]
 801218c:	e572      	b.n	8011c74 <GUI_Touch_Processing+0x10ec>
					preGUI_screen_state = GUI_screen_state;
 801218e:	4b7d      	ldr	r3, [pc, #500]	; (8012384 <GUI_Touch_Processing+0x17fc>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)// down
 8012190:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8012194:	2209      	movs	r2, #9
 8012196:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)// down
 8012198:	f7ee f9d4 	bl	8000544 <__aeabi_i2d>
 801219c:	e9cd 0100 	strd	r0, r1, [sp]
 80121a0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80121a4:	f7ee f9ce 	bl	8000544 <__aeabi_i2d>
 80121a8:	a365      	add	r3, pc, #404	; (adr r3, 8012340 <GUI_Touch_Processing+0x17b8>)
 80121aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ae:	4604      	mov	r4, r0
 80121b0:	460d      	mov	r5, r1
 80121b2:	f04f 0801 	mov.w	r8, #1
 80121b6:	f7ee fcb1 	bl	8000b1c <__aeabi_dcmpge>
 80121ba:	b900      	cbnz	r0, 80121be <GUI_Touch_Processing+0x1636>
 80121bc:	4680      	mov	r8, r0
 80121be:	2200      	movs	r2, #0
 80121c0:	4b71      	ldr	r3, [pc, #452]	; (8012388 <GUI_Touch_Processing+0x1800>)
 80121c2:	4620      	mov	r0, r4
 80121c4:	4629      	mov	r1, r5
 80121c6:	fa5f f888 	uxtb.w	r8, r8
 80121ca:	f04f 0701 	mov.w	r7, #1
 80121ce:	f7ee fc9b 	bl	8000b08 <__aeabi_dcmple>
 80121d2:	b900      	cbnz	r0, 80121d6 <GUI_Touch_Processing+0x164e>
 80121d4:	4607      	mov	r7, r0
 80121d6:	a35c      	add	r3, pc, #368	; (adr r3, 8012348 <GUI_Touch_Processing+0x17c0>)
 80121d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121e0:	b2ff      	uxtb	r7, r7
 80121e2:	f04f 0601 	mov.w	r6, #1
 80121e6:	f7ee fc99 	bl	8000b1c <__aeabi_dcmpge>
 80121ea:	b900      	cbnz	r0, 80121ee <GUI_Touch_Processing+0x1666>
 80121ec:	4606      	mov	r6, r0
 80121ee:	a34c      	add	r3, pc, #304	; (adr r3, 8012320 <GUI_Touch_Processing+0x1798>)
 80121f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80121f8:	f04f 0901 	mov.w	r9, #1
 80121fc:	f7ee fc84 	bl	8000b08 <__aeabi_dcmple>
 8012200:	b900      	cbnz	r0, 8012204 <GUI_Touch_Processing+0x167c>
 8012202:	4681      	mov	r9, r0
 8012204:	ea06 0609 	and.w	r6, r6, r9
 8012208:	ea18 0f06 	tst.w	r8, r6
 801220c:	d005      	beq.n	801221a <GUI_Touch_Processing+0x1692>
 801220e:	b127      	cbz	r7, 801221a <GUI_Touch_Processing+0x1692>
					GUI_screen_state = DataSet4_Screen;
 8012210:	230a      	movs	r3, #10
 8012212:	f88b 3000 	strb.w	r3, [fp]
 8012216:	f7fe bd45 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //CIE_XYZ
 801221a:	2200      	movs	r2, #0
 801221c:	4b5b      	ldr	r3, [pc, #364]	; (801238c <GUI_Touch_Processing+0x1804>)
 801221e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012222:	f04f 0601 	mov.w	r6, #1
 8012226:	f7ee fc79 	bl	8000b1c <__aeabi_dcmpge>
 801222a:	b900      	cbnz	r0, 801222e <GUI_Touch_Processing+0x16a6>
 801222c:	4606      	mov	r6, r0
 801222e:	a348      	add	r3, pc, #288	; (adr r3, 8012350 <GUI_Touch_Processing+0x17c8>)
 8012230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012234:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012238:	f04f 0901 	mov.w	r9, #1
 801223c:	f7ee fc64 	bl	8000b08 <__aeabi_dcmple>
 8012240:	b900      	cbnz	r0, 8012244 <GUI_Touch_Processing+0x16bc>
 8012242:	4681      	mov	r9, r0
 8012244:	ea06 0609 	and.w	r6, r6, r9
 8012248:	a343      	add	r3, pc, #268	; (adr r3, 8012358 <GUI_Touch_Processing+0x17d0>)
 801224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224e:	4620      	mov	r0, r4
 8012250:	4629      	mov	r1, r5
 8012252:	b2f6      	uxtb	r6, r6
 8012254:	f04f 0901 	mov.w	r9, #1
 8012258:	f7ee fc60 	bl	8000b1c <__aeabi_dcmpge>
 801225c:	b900      	cbnz	r0, 8012260 <GUI_Touch_Processing+0x16d8>
 801225e:	4681      	mov	r9, r0
 8012260:	a33f      	add	r3, pc, #252	; (adr r3, 8012360 <GUI_Touch_Processing+0x17d8>)
 8012262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012266:	4620      	mov	r0, r4
 8012268:	4629      	mov	r1, r5
 801226a:	f04f 0a01 	mov.w	sl, #1
 801226e:	f7ee fc4b 	bl	8000b08 <__aeabi_dcmple>
 8012272:	b900      	cbnz	r0, 8012276 <GUI_Touch_Processing+0x16ee>
 8012274:	4682      	mov	sl, r0
 8012276:	ea09 090a 	and.w	r9, r9, sl
 801227a:	f019 0f01 	tst.w	r9, #1
 801227e:	d00d      	beq.n	801229c <GUI_Touch_Processing+0x1714>
 8012280:	b166      	cbz	r6, 801229c <GUI_Touch_Processing+0x1714>
					Measure_Field ^= CIE_XYZ;
 8012282:	4b43      	ldr	r3, [pc, #268]	; (8012390 <GUI_Touch_Processing+0x1808>)
 8012284:	881a      	ldrh	r2, [r3, #0]
 8012286:	f082 0210 	eor.w	r2, r2, #16
 801228a:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&CIE_XYZ);
 801228c:	2146      	movs	r1, #70	; 0x46
 801228e:	f002 0210 	and.w	r2, r2, #16
 8012292:	20c8      	movs	r0, #200	; 0xc8
 8012294:	f002 ffdc 	bl	8015250 <GUI_CheckBox>
 8012298:	f7fe bd04 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //CIE_xy
 801229c:	a332      	add	r3, pc, #200	; (adr r3, 8012368 <GUI_Touch_Processing+0x17e0>)
 801229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a2:	4620      	mov	r0, r4
 80122a4:	4629      	mov	r1, r5
 80122a6:	f04f 0901 	mov.w	r9, #1
 80122aa:	f7ee fc37 	bl	8000b1c <__aeabi_dcmpge>
 80122ae:	b900      	cbnz	r0, 80122b2 <GUI_Touch_Processing+0x172a>
 80122b0:	4681      	mov	r9, r0
 80122b2:	a32f      	add	r3, pc, #188	; (adr r3, 8012370 <GUI_Touch_Processing+0x17e8>)
 80122b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b8:	4620      	mov	r0, r4
 80122ba:	4629      	mov	r1, r5
 80122bc:	f04f 0a01 	mov.w	sl, #1
 80122c0:	f7ee fc22 	bl	8000b08 <__aeabi_dcmple>
 80122c4:	b900      	cbnz	r0, 80122c8 <GUI_Touch_Processing+0x1740>
 80122c6:	4682      	mov	sl, r0
 80122c8:	ea09 090a 	and.w	r9, r9, sl
 80122cc:	f019 0f01 	tst.w	r9, #1
 80122d0:	d066      	beq.n	80123a0 <GUI_Touch_Processing+0x1818>
 80122d2:	2e00      	cmp	r6, #0
 80122d4:	d064      	beq.n	80123a0 <GUI_Touch_Processing+0x1818>
					Measure_Field ^= CIE_xy;
 80122d6:	4c2e      	ldr	r4, [pc, #184]	; (8012390 <GUI_Touch_Processing+0x1808>)
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 80122d8:	4d2e      	ldr	r5, [pc, #184]	; (8012394 <GUI_Touch_Processing+0x180c>)
					Measure_Field ^= CIE_xy;
 80122da:	8822      	ldrh	r2, [r4, #0]
 80122dc:	f082 0220 	eor.w	r2, r2, #32
 80122e0:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 133, Measure_Field&CIE_xy);
 80122e2:	2185      	movs	r1, #133	; 0x85
 80122e4:	f002 0220 	and.w	r2, r2, #32
 80122e8:	20c8      	movs	r0, #200	; 0xc8
 80122ea:	f002 ffb1 	bl	8015250 <GUI_CheckBox>
					GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, Measure_Field&CIE_xy);
 80122ee:	8823      	ldrh	r3, [r4, #0]
 80122f0:	782a      	ldrb	r2, [r5, #0]
 80122f2:	f003 0320 	and.w	r3, r3, #32
 80122f6:	f002 0201 	and.w	r2, r2, #1
 80122fa:	21c6      	movs	r1, #198	; 0xc6
 80122fc:	20c8      	movs	r0, #200	; 0xc8
 80122fe:	f002 ffe8 	bl	80152d2 <GUI_RadioBox>
					GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), Measure_Field&CIE_xy);
 8012302:	782a      	ldrb	r2, [r5, #0]
 8012304:	8823      	ldrh	r3, [r4, #0]
 8012306:	43d2      	mvns	r2, r2
 8012308:	f003 0320 	and.w	r3, r3, #32
 801230c:	f002 0201 	and.w	r2, r2, #1
 8012310:	f240 1107 	movw	r1, #263	; 0x107
 8012314:	20c8      	movs	r0, #200	; 0xc8
 8012316:	f002 ffdc 	bl	80152d2 <GUI_RadioBox>
 801231a:	f7fe bcc3 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 801231e:	bf00      	nop
 8012320:	66666666 	.word	0x66666666
 8012324:	4081f866 	.word	0x4081f866
 8012328:	33333333 	.word	0x33333333
 801232c:	40867133 	.word	0x40867133
 8012330:	00000000 	.word	0x00000000
 8012334:	40623800 	.word	0x40623800
 8012338:	99999999 	.word	0x99999999
 801233c:	40720d99 	.word	0x40720d99
 8012340:	99999999 	.word	0x99999999
 8012344:	4091a399 	.word	0x4091a399
 8012348:	33333333 	.word	0x33333333
 801234c:	407aff33 	.word	0x407aff33
 8012350:	cccccccd 	.word	0xcccccccd
 8012354:	408508cc 	.word	0x408508cc
 8012358:	00000000 	.word	0x00000000
 801235c:	40673000 	.word	0x40673000
 8012360:	99999999 	.word	0x99999999
 8012364:	40748999 	.word	0x40748999
 8012368:	33333333 	.word	0x33333333
 801236c:	40760733 	.word	0x40760733
 8012370:	cccccccd 	.word	0xcccccccd
 8012374:	407ef8cc 	.word	0x407ef8cc
 8012378:	20004c9e 	.word	0x20004c9e
 801237c:	2008bce5 	.word	0x2008bce5
 8012380:	20004c71 	.word	0x20004c71
 8012384:	2000022a 	.word	0x2000022a
 8012388:	4093e000 	.word	0x4093e000
 801238c:	40809000 	.word	0x40809000
 8012390:	20004c76 	.word	0x20004c76
 8012394:	20004c74 	.word	0x20004c74
 8012398:	33333333 	.word	0x33333333
 801239c:	40053333 	.word	0x40053333
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //CIE_Luv
 80123a0:	a3cd      	add	r3, pc, #820	; (adr r3, 80126d8 <GUI_Touch_Processing+0x1b50>)
 80123a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a6:	4620      	mov	r0, r4
 80123a8:	4629      	mov	r1, r5
 80123aa:	f04f 0901 	mov.w	r9, #1
 80123ae:	f7ee fbb5 	bl	8000b1c <__aeabi_dcmpge>
 80123b2:	b900      	cbnz	r0, 80123b6 <GUI_Touch_Processing+0x182e>
 80123b4:	4681      	mov	r9, r0
 80123b6:	a3ca      	add	r3, pc, #808	; (adr r3, 80126e0 <GUI_Touch_Processing+0x1b58>)
 80123b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123bc:	4620      	mov	r0, r4
 80123be:	4629      	mov	r1, r5
 80123c0:	f04f 0a01 	mov.w	sl, #1
 80123c4:	f7ee fba0 	bl	8000b08 <__aeabi_dcmple>
 80123c8:	b900      	cbnz	r0, 80123cc <GUI_Touch_Processing+0x1844>
 80123ca:	4682      	mov	sl, r0
 80123cc:	ea09 090a 	and.w	r9, r9, sl
 80123d0:	f019 0f01 	tst.w	r9, #1
 80123d4:	d00e      	beq.n	80123f4 <GUI_Touch_Processing+0x186c>
 80123d6:	b16e      	cbz	r6, 80123f4 <GUI_Touch_Processing+0x186c>
					Measure_Field ^= CIE_Luv;
 80123d8:	4bb9      	ldr	r3, [pc, #740]	; (80126c0 <GUI_Touch_Processing+0x1b38>)
 80123da:	881a      	ldrh	r2, [r3, #0]
 80123dc:	f082 0240 	eor.w	r2, r2, #64	; 0x40
 80123e0:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 327, Measure_Field&CIE_Luv);
 80123e2:	f240 1147 	movw	r1, #327	; 0x147
 80123e6:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80123ea:	20c8      	movs	r0, #200	; 0xc8
 80123ec:	f002 ff30 	bl	8015250 <GUI_CheckBox>
 80123f0:	f7fe bc58 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=198*TS_Callib & Touch_y <=(198+54)*TS_Callib && (Measure_Field&CIE_xy)) //CIE_xy_1931
 80123f4:	a39c      	add	r3, pc, #624	; (adr r3, 8012668 <GUI_Touch_Processing+0x1ae0>)
 80123f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fa:	4620      	mov	r0, r4
 80123fc:	4629      	mov	r1, r5
 80123fe:	f04f 0901 	mov.w	r9, #1
 8012402:	f7ee fb8b 	bl	8000b1c <__aeabi_dcmpge>
 8012406:	b900      	cbnz	r0, 801240a <GUI_Touch_Processing+0x1882>
 8012408:	4681      	mov	r9, r0
 801240a:	ea16 0f09 	tst.w	r6, r9
 801240e:	d02a      	beq.n	8012466 <GUI_Touch_Processing+0x18de>
 8012410:	a397      	add	r3, pc, #604	; (adr r3, 8012670 <GUI_Touch_Processing+0x1ae8>)
 8012412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012416:	4620      	mov	r0, r4
 8012418:	4629      	mov	r1, r5
 801241a:	f04f 0901 	mov.w	r9, #1
 801241e:	f7ee fb73 	bl	8000b08 <__aeabi_dcmple>
 8012422:	b900      	cbnz	r0, 8012426 <GUI_Touch_Processing+0x189e>
 8012424:	4681      	mov	r9, r0
 8012426:	f019 0fff 	tst.w	r9, #255	; 0xff
 801242a:	d01c      	beq.n	8012466 <GUI_Touch_Processing+0x18de>
 801242c:	4ba4      	ldr	r3, [pc, #656]	; (80126c0 <GUI_Touch_Processing+0x1b38>)
 801242e:	881b      	ldrh	r3, [r3, #0]
 8012430:	069b      	lsls	r3, r3, #26
 8012432:	d518      	bpl.n	8012466 <GUI_Touch_Processing+0x18de>
					if(!(Measure_Color_xy&CIE_xy_1931_1964)){
 8012434:	4ca3      	ldr	r4, [pc, #652]	; (80126c4 <GUI_Touch_Processing+0x1b3c>)
 8012436:	7822      	ldrb	r2, [r4, #0]
 8012438:	07d5      	lsls	r5, r2, #31
 801243a:	f53e ac33 	bmi.w	8010ca4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 801243e:	2301      	movs	r3, #1
						Measure_Color_xy ^= CIE_xy_1931_1964;
 8012440:	f082 0201 	eor.w	r2, r2, #1
 8012444:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 8012446:	21c6      	movs	r1, #198	; 0xc6
 8012448:	401a      	ands	r2, r3
 801244a:	20c8      	movs	r0, #200	; 0xc8
 801244c:	f002 ff41 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 8012450:	7822      	ldrb	r2, [r4, #0]
 8012452:	2301      	movs	r3, #1
 8012454:	43d2      	mvns	r2, r2
 8012456:	401a      	ands	r2, r3
 8012458:	f240 1107 	movw	r1, #263	; 0x107
 801245c:	20c8      	movs	r0, #200	; 0xc8
 801245e:	f002 ff38 	bl	80152d2 <GUI_RadioBox>
 8012462:	f7fe bc1f 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=263*TS_Callib & Touch_y <=(263+54)*TS_Callib && (Measure_Field&CIE_xy)) //CIE_xy_1964
 8012466:	a384      	add	r3, pc, #528	; (adr r3, 8012678 <GUI_Touch_Processing+0x1af0>)
 8012468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801246c:	4620      	mov	r0, r4
 801246e:	4629      	mov	r1, r5
 8012470:	f04f 0901 	mov.w	r9, #1
 8012474:	f7ee fb52 	bl	8000b1c <__aeabi_dcmpge>
 8012478:	b900      	cbnz	r0, 801247c <GUI_Touch_Processing+0x18f4>
 801247a:	4681      	mov	r9, r0
 801247c:	ea16 0f09 	tst.w	r6, r9
 8012480:	d02a      	beq.n	80124d8 <GUI_Touch_Processing+0x1950>
 8012482:	a37f      	add	r3, pc, #508	; (adr r3, 8012680 <GUI_Touch_Processing+0x1af8>)
 8012484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012488:	4620      	mov	r0, r4
 801248a:	4629      	mov	r1, r5
 801248c:	f04f 0601 	mov.w	r6, #1
 8012490:	f7ee fb3a 	bl	8000b08 <__aeabi_dcmple>
 8012494:	b900      	cbnz	r0, 8012498 <GUI_Touch_Processing+0x1910>
 8012496:	4606      	mov	r6, r0
 8012498:	f016 0fff 	tst.w	r6, #255	; 0xff
 801249c:	d01c      	beq.n	80124d8 <GUI_Touch_Processing+0x1950>
 801249e:	4b88      	ldr	r3, [pc, #544]	; (80126c0 <GUI_Touch_Processing+0x1b38>)
 80124a0:	881b      	ldrh	r3, [r3, #0]
 80124a2:	069c      	lsls	r4, r3, #26
 80124a4:	d518      	bpl.n	80124d8 <GUI_Touch_Processing+0x1950>
					if((Measure_Color_xy&CIE_xy_1931_1964)){
 80124a6:	4c87      	ldr	r4, [pc, #540]	; (80126c4 <GUI_Touch_Processing+0x1b3c>)
 80124a8:	7822      	ldrb	r2, [r4, #0]
 80124aa:	07d0      	lsls	r0, r2, #31
 80124ac:	f57e abfa 	bpl.w	8010ca4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 80124b0:	2301      	movs	r3, #1
						Measure_Color_xy ^= CIE_xy_1931_1964;
 80124b2:	f082 0201 	eor.w	r2, r2, #1
 80124b6:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 198, Measure_Color_xy&CIE_xy_1931_1964, 0x01);
 80124b8:	21c6      	movs	r1, #198	; 0xc6
 80124ba:	401a      	ands	r2, r3
 80124bc:	20c8      	movs	r0, #200	; 0xc8
 80124be:	f002 ff08 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 263, !(Measure_Color_xy&CIE_xy_1931_1964), 0x01);
 80124c2:	7822      	ldrb	r2, [r4, #0]
 80124c4:	2301      	movs	r3, #1
 80124c6:	43d2      	mvns	r2, r2
 80124c8:	401a      	ands	r2, r3
 80124ca:	f240 1107 	movw	r1, #263	; 0x107
 80124ce:	20c8      	movs	r0, #200	; 0xc8
 80124d0:	f002 feff 	bl	80152d2 <GUI_RadioBox>
 80124d4:	f7fe bbe6 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 80124d8:	a36b      	add	r3, pc, #428	; (adr r3, 8012688 <GUI_Touch_Processing+0x1b00>)
 80124da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124e2:	ea08 0407 	and.w	r4, r8, r7
 80124e6:	f04f 0501 	mov.w	r5, #1
 80124ea:	f7ee fb17 	bl	8000b1c <__aeabi_dcmpge>
 80124ee:	b900      	cbnz	r0, 80124f2 <GUI_Touch_Processing+0x196a>
 80124f0:	4605      	mov	r5, r0
 80124f2:	a367      	add	r3, pc, #412	; (adr r3, 8012690 <GUI_Touch_Processing+0x1b08>)
 80124f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80124fc:	f04f 0601 	mov.w	r6, #1
 8012500:	f7ee fb02 	bl	8000b08 <__aeabi_dcmple>
 8012504:	b900      	cbnz	r0, 8012508 <GUI_Touch_Processing+0x1980>
 8012506:	4606      	mov	r6, r0
 8012508:	ea05 0306 	and.w	r3, r5, r6
 801250c:	07d9      	lsls	r1, r3, #31
 801250e:	d502      	bpl.n	8012516 <GUI_Touch_Processing+0x198e>
 8012510:	2c00      	cmp	r4, #0
 8012512:	f47f ab84 	bne.w	8011c1e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8012516:	a360      	add	r3, pc, #384	; (adr r3, 8012698 <GUI_Touch_Processing+0x1b10>)
 8012518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801251c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012520:	f04f 0501 	mov.w	r5, #1
 8012524:	f7ee fafa 	bl	8000b1c <__aeabi_dcmpge>
 8012528:	b900      	cbnz	r0, 801252c <GUI_Touch_Processing+0x19a4>
 801252a:	4605      	mov	r5, r0
 801252c:	a35c      	add	r3, pc, #368	; (adr r3, 80126a0 <GUI_Touch_Processing+0x1b18>)
 801252e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012532:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012536:	f04f 0601 	mov.w	r6, #1
 801253a:	f7ee fae5 	bl	8000b08 <__aeabi_dcmple>
 801253e:	b900      	cbnz	r0, 8012542 <GUI_Touch_Processing+0x19ba>
 8012540:	4606      	mov	r6, r0
 8012542:	ea05 0306 	and.w	r3, r5, r6
 8012546:	07da      	lsls	r2, r3, #31
 8012548:	d527      	bpl.n	801259a <GUI_Touch_Processing+0x1a12>
 801254a:	b334      	cbz	r4, 801259a <GUI_Touch_Processing+0x1a12>
					WriteSDFLASH_t(sdfile_cnt);
 801254c:	4b5e      	ldr	r3, [pc, #376]	; (80126c8 <GUI_Touch_Processing+0x1b40>)
 801254e:	2100      	movs	r1, #0
 8012550:	8818      	ldrh	r0, [r3, #0]
 8012552:	f009 fc37 	bl	801bdc4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012556:	4b5d      	ldr	r3, [pc, #372]	; (80126cc <GUI_Touch_Processing+0x1b44>)
 8012558:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 801255a:	1e5a      	subs	r2, r3, #1
 801255c:	2a05      	cmp	r2, #5
 801255e:	d804      	bhi.n	801256a <GUI_Touch_Processing+0x19e2>
 8012560:	e8df f002 	tbb	[pc, r2]
 8012564:	0c030307 	.word	0x0c030307
 8012568:	1116      	.short	0x1116
					GUI_screen_state = Prev_Inf_Screen;
 801256a:	f88b 3000 	strb.w	r3, [fp]
 801256e:	f7fe bb99 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012572:	2301      	movs	r3, #1
 8012574:	f88b 3000 	strb.w	r3, [fp]
 8012578:	f7fe bb94 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801257c:	2304      	movs	r3, #4
 801257e:	f88b 3000 	strb.w	r3, [fp]
 8012582:	f7fe bb8f 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012586:	2306      	movs	r3, #6
 8012588:	f88b 3000 	strb.w	r3, [fp]
 801258c:	f7fe bb8a 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8012590:	2305      	movs	r3, #5
 8012592:	f88b 3000 	strb.w	r3, [fp]
 8012596:	f7fe bb85 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 801259a:	a341      	add	r3, pc, #260	; (adr r3, 80126a0 <GUI_Touch_Processing+0x1b18>)
 801259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125a4:	f04f 0401 	mov.w	r4, #1
 80125a8:	f7ee fab8 	bl	8000b1c <__aeabi_dcmpge>
 80125ac:	b900      	cbnz	r0, 80125b0 <GUI_Touch_Processing+0x1a28>
 80125ae:	4604      	mov	r4, r0
 80125b0:	a33d      	add	r3, pc, #244	; (adr r3, 80126a8 <GUI_Touch_Processing+0x1b20>)
 80125b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125ba:	f04f 0501 	mov.w	r5, #1
 80125be:	f7ee faa3 	bl	8000b08 <__aeabi_dcmple>
 80125c2:	b900      	cbnz	r0, 80125c6 <GUI_Touch_Processing+0x1a3e>
 80125c4:	4605      	mov	r5, r0
 80125c6:	402c      	ands	r4, r5
 80125c8:	ea18 0f04 	tst.w	r8, r4
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 80125cc:	f43e ab6a 	beq.w	8010ca4 <GUI_Touch_Processing+0x11c>
 80125d0:	2f00      	cmp	r7, #0
 80125d2:	f47e aba7 	bne.w	8010d24 <GUI_Touch_Processing+0x19c>
 80125d6:	f7fe bb65 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 80125da:	4b3d      	ldr	r3, [pc, #244]	; (80126d0 <GUI_Touch_Processing+0x1b48>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //down
 80125dc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 80125e0:	220a      	movs	r2, #10
 80125e2:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //down
 80125e4:	f7ed ffae 	bl	8000544 <__aeabi_i2d>
 80125e8:	4680      	mov	r8, r0
 80125ea:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80125ee:	4689      	mov	r9, r1
 80125f0:	f7ed ffa8 	bl	8000544 <__aeabi_i2d>
 80125f4:	a32e      	add	r3, pc, #184	; (adr r3, 80126b0 <GUI_Touch_Processing+0x1b28>)
 80125f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125fa:	4604      	mov	r4, r0
 80125fc:	460d      	mov	r5, r1
 80125fe:	f04f 0701 	mov.w	r7, #1
 8012602:	f7ee fa8b 	bl	8000b1c <__aeabi_dcmpge>
 8012606:	b900      	cbnz	r0, 801260a <GUI_Touch_Processing+0x1a82>
 8012608:	4607      	mov	r7, r0
 801260a:	2200      	movs	r2, #0
 801260c:	4b31      	ldr	r3, [pc, #196]	; (80126d4 <GUI_Touch_Processing+0x1b4c>)
 801260e:	4620      	mov	r0, r4
 8012610:	4629      	mov	r1, r5
 8012612:	b2ff      	uxtb	r7, r7
 8012614:	f04f 0601 	mov.w	r6, #1
 8012618:	f7ee fa76 	bl	8000b08 <__aeabi_dcmple>
 801261c:	b900      	cbnz	r0, 8012620 <GUI_Touch_Processing+0x1a98>
 801261e:	4606      	mov	r6, r0
 8012620:	b2f3      	uxtb	r3, r6
 8012622:	9300      	str	r3, [sp, #0]
 8012624:	4640      	mov	r0, r8
 8012626:	a324      	add	r3, pc, #144	; (adr r3, 80126b8 <GUI_Touch_Processing+0x1b30>)
 8012628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801262c:	4649      	mov	r1, r9
 801262e:	f04f 0601 	mov.w	r6, #1
 8012632:	f7ee fa73 	bl	8000b1c <__aeabi_dcmpge>
 8012636:	b900      	cbnz	r0, 801263a <GUI_Touch_Processing+0x1ab2>
 8012638:	4606      	mov	r6, r0
 801263a:	a313      	add	r3, pc, #76	; (adr r3, 8012688 <GUI_Touch_Processing+0x1b00>)
 801263c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012640:	4640      	mov	r0, r8
 8012642:	4649      	mov	r1, r9
 8012644:	f04f 0a01 	mov.w	sl, #1
 8012648:	f7ee fa5e 	bl	8000b08 <__aeabi_dcmple>
 801264c:	b900      	cbnz	r0, 8012650 <GUI_Touch_Processing+0x1ac8>
 801264e:	4682      	mov	sl, r0
 8012650:	ea06 060a 	and.w	r6, r6, sl
 8012654:	4237      	tst	r7, r6
 8012656:	d047      	beq.n	80126e8 <GUI_Touch_Processing+0x1b60>
 8012658:	9b00      	ldr	r3, [sp, #0]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d044      	beq.n	80126e8 <GUI_Touch_Processing+0x1b60>
					GUI_screen_state = DataSet5_Screen;
 801265e:	230b      	movs	r3, #11
 8012660:	f88b 3000 	strb.w	r3, [fp]
 8012664:	f7fe bb1e 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8012668:	99999999 	.word	0x99999999
 801266c:	40806599 	.word	0x40806599
 8012670:	66666666 	.word	0x66666666
 8012674:	4084de66 	.word	0x4084de66
 8012678:	99999999 	.word	0x99999999
 801267c:	4085c799 	.word	0x4085c799
 8012680:	66666666 	.word	0x66666666
 8012684:	408a4066 	.word	0x408a4066
 8012688:	66666666 	.word	0x66666666
 801268c:	4081f866 	.word	0x4081f866
 8012690:	33333333 	.word	0x33333333
 8012694:	40867133 	.word	0x40867133
 8012698:	33333333 	.word	0x33333333
 801269c:	40053333 	.word	0x40053333
 80126a0:	00000000 	.word	0x00000000
 80126a4:	40623800 	.word	0x40623800
 80126a8:	99999999 	.word	0x99999999
 80126ac:	40720d99 	.word	0x40720d99
 80126b0:	99999999 	.word	0x99999999
 80126b4:	4091a399 	.word	0x4091a399
 80126b8:	33333333 	.word	0x33333333
 80126bc:	407aff33 	.word	0x407aff33
 80126c0:	20004c76 	.word	0x20004c76
 80126c4:	20004c74 	.word	0x20004c74
 80126c8:	20004c9e 	.word	0x20004c9e
 80126cc:	2008bce5 	.word	0x2008bce5
 80126d0:	2000022a 	.word	0x2000022a
 80126d4:	4093e000 	.word	0x4093e000
 80126d8:	66666666 	.word	0x66666666
 80126dc:	408b1466 	.word	0x408b1466
 80126e0:	33333333 	.word	0x33333333
 80126e4:	408f8d33 	.word	0x408f8d33
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=65*TS_Callib & Touch_y <=(65+54)*TS_Callib) //CIE_Lab
 80126e8:	2200      	movs	r2, #0
 80126ea:	4bbf      	ldr	r3, [pc, #764]	; (80129e8 <GUI_Touch_Processing+0x1e60>)
 80126ec:	4640      	mov	r0, r8
 80126ee:	4649      	mov	r1, r9
 80126f0:	f04f 0601 	mov.w	r6, #1
 80126f4:	f7ee fa12 	bl	8000b1c <__aeabi_dcmpge>
 80126f8:	b900      	cbnz	r0, 80126fc <GUI_Touch_Processing+0x1b74>
 80126fa:	4606      	mov	r6, r0
 80126fc:	a3a8      	add	r3, pc, #672	; (adr r3, 80129a0 <GUI_Touch_Processing+0x1e18>)
 80126fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012702:	4640      	mov	r0, r8
 8012704:	4649      	mov	r1, r9
 8012706:	f04f 0a01 	mov.w	sl, #1
 801270a:	f7ee f9fd 	bl	8000b08 <__aeabi_dcmple>
 801270e:	b900      	cbnz	r0, 8012712 <GUI_Touch_Processing+0x1b8a>
 8012710:	4682      	mov	sl, r0
 8012712:	ea06 060a 	and.w	r6, r6, sl
 8012716:	a3a4      	add	r3, pc, #656	; (adr r3, 80129a8 <GUI_Touch_Processing+0x1e20>)
 8012718:	e9d3 2300 	ldrd	r2, r3, [r3]
 801271c:	4620      	mov	r0, r4
 801271e:	4629      	mov	r1, r5
 8012720:	b2f6      	uxtb	r6, r6
 8012722:	f04f 0a01 	mov.w	sl, #1
 8012726:	f7ee f9f9 	bl	8000b1c <__aeabi_dcmpge>
 801272a:	b900      	cbnz	r0, 801272e <GUI_Touch_Processing+0x1ba6>
 801272c:	4682      	mov	sl, r0
 801272e:	a3a0      	add	r3, pc, #640	; (adr r3, 80129b0 <GUI_Touch_Processing+0x1e28>)
 8012730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012734:	4620      	mov	r0, r4
 8012736:	4629      	mov	r1, r5
 8012738:	f04f 0b01 	mov.w	fp, #1
 801273c:	f7ee f9e4 	bl	8000b08 <__aeabi_dcmple>
 8012740:	b900      	cbnz	r0, 8012744 <GUI_Touch_Processing+0x1bbc>
 8012742:	4683      	mov	fp, r0
 8012744:	ea0a 0a0b 	and.w	sl, sl, fp
 8012748:	f01a 0f01 	tst.w	sl, #1
 801274c:	d04c      	beq.n	80127e8 <GUI_Touch_Processing+0x1c60>
 801274e:	2e00      	cmp	r6, #0
 8012750:	d04a      	beq.n	80127e8 <GUI_Touch_Processing+0x1c60>
					Measure_Field ^= CIE_Lab;
 8012752:	4ca6      	ldr	r4, [pc, #664]	; (80129ec <GUI_Touch_Processing+0x1e64>)
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 8012754:	4da6      	ldr	r5, [pc, #664]	; (80129f0 <GUI_Touch_Processing+0x1e68>)
					Measure_Field ^= CIE_Lab;
 8012756:	8822      	ldrh	r2, [r4, #0]
 8012758:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 801275c:	8022      	strh	r2, [r4, #0]
					GUI_CheckBox(200, 65, Measure_Field&CIE_Lab);
 801275e:	2141      	movs	r1, #65	; 0x41
 8012760:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8012764:	20c8      	movs	r0, #200	; 0xc8
 8012766:	f002 fd73 	bl	8015250 <GUI_CheckBox>
					GUI_RadioBox(200, 108, Source_Type&Source_A, Measure_Field&CIE_Lab);
 801276a:	8823      	ldrh	r3, [r4, #0]
 801276c:	782a      	ldrb	r2, [r5, #0]
 801276e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012772:	f002 0201 	and.w	r2, r2, #1
 8012776:	216c      	movs	r1, #108	; 0x6c
 8012778:	20c8      	movs	r0, #200	; 0xc8
 801277a:	f002 fdaa 	bl	80152d2 <GUI_RadioBox>
					GUI_RadioBox(200, 143, Source_Type&Source_D65, Measure_Field&CIE_Lab);
 801277e:	8823      	ldrh	r3, [r4, #0]
 8012780:	782a      	ldrb	r2, [r5, #0]
 8012782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012786:	f002 0202 	and.w	r2, r2, #2
 801278a:	218f      	movs	r1, #143	; 0x8f
 801278c:	20c8      	movs	r0, #200	; 0xc8
 801278e:	f002 fda0 	bl	80152d2 <GUI_RadioBox>
					GUI_RadioBox(200, 178, Source_Type&Source_C, Measure_Field&CIE_Lab);
 8012792:	8823      	ldrh	r3, [r4, #0]
 8012794:	782a      	ldrb	r2, [r5, #0]
 8012796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801279a:	f002 0204 	and.w	r2, r2, #4
 801279e:	21b2      	movs	r1, #178	; 0xb2
 80127a0:	20c8      	movs	r0, #200	; 0xc8
 80127a2:	f002 fd96 	bl	80152d2 <GUI_RadioBox>
					GUI_RadioBox(200, 213, Source_Type&Source_D50, Measure_Field&CIE_Lab);
 80127a6:	8823      	ldrh	r3, [r4, #0]
 80127a8:	782a      	ldrb	r2, [r5, #0]
 80127aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127ae:	f002 0208 	and.w	r2, r2, #8
 80127b2:	21d5      	movs	r1, #213	; 0xd5
 80127b4:	20c8      	movs	r0, #200	; 0xc8
 80127b6:	f002 fd8c 	bl	80152d2 <GUI_RadioBox>
					GUI_RadioBox(200, 248, Source_Type&Source_D55, Measure_Field&CIE_Lab);
 80127ba:	8823      	ldrh	r3, [r4, #0]
 80127bc:	782a      	ldrb	r2, [r5, #0]
 80127be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127c2:	f002 0210 	and.w	r2, r2, #16
 80127c6:	21f8      	movs	r1, #248	; 0xf8
 80127c8:	20c8      	movs	r0, #200	; 0xc8
 80127ca:	f002 fd82 	bl	80152d2 <GUI_RadioBox>
					GUI_RadioBox(200, 283, Source_Type&Source_D75, Measure_Field&CIE_Lab);
 80127ce:	8823      	ldrh	r3, [r4, #0]
 80127d0:	782a      	ldrb	r2, [r5, #0]
 80127d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80127d6:	f002 0220 	and.w	r2, r2, #32
 80127da:	f240 111b 	movw	r1, #283	; 0x11b
 80127de:	20c8      	movs	r0, #200	; 0xc8
 80127e0:	f002 fd77 	bl	80152d2 <GUI_RadioBox>
 80127e4:	f7fe ba5e 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=345*TS_Callib & Touch_y <=(345+54)*TS_Callib) //EbEr
 80127e8:	a373      	add	r3, pc, #460	; (adr r3, 80129b8 <GUI_Touch_Processing+0x1e30>)
 80127ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127ee:	4620      	mov	r0, r4
 80127f0:	4629      	mov	r1, r5
 80127f2:	f04f 0a01 	mov.w	sl, #1
 80127f6:	f7ee f991 	bl	8000b1c <__aeabi_dcmpge>
 80127fa:	b900      	cbnz	r0, 80127fe <GUI_Touch_Processing+0x1c76>
 80127fc:	4682      	mov	sl, r0
 80127fe:	a370      	add	r3, pc, #448	; (adr r3, 80129c0 <GUI_Touch_Processing+0x1e38>)
 8012800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012804:	4620      	mov	r0, r4
 8012806:	4629      	mov	r1, r5
 8012808:	f04f 0b01 	mov.w	fp, #1
 801280c:	f7ee f97c 	bl	8000b08 <__aeabi_dcmple>
 8012810:	b900      	cbnz	r0, 8012814 <GUI_Touch_Processing+0x1c8c>
 8012812:	4683      	mov	fp, r0
 8012814:	ea0a 0a0b 	and.w	sl, sl, fp
 8012818:	f01a 0f01 	tst.w	sl, #1
 801281c:	d00e      	beq.n	801283c <GUI_Touch_Processing+0x1cb4>
 801281e:	b16e      	cbz	r6, 801283c <GUI_Touch_Processing+0x1cb4>
					Measure_Field ^= EbEr;
 8012820:	4b72      	ldr	r3, [pc, #456]	; (80129ec <GUI_Touch_Processing+0x1e64>)
 8012822:	881a      	ldrh	r2, [r3, #0]
 8012824:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 8012828:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 345, Measure_Field&EbEr);
 801282a:	f240 1159 	movw	r1, #345	; 0x159
 801282e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8012832:	20c8      	movs	r0, #200	; 0xc8
 8012834:	f002 fd0c 	bl	8015250 <GUI_CheckBox>
 8012838:	f7fe ba34 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=108*TS_Callib & Touch_y <=(108+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_A
 801283c:	a362      	add	r3, pc, #392	; (adr r3, 80129c8 <GUI_Touch_Processing+0x1e40>)
 801283e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012842:	4620      	mov	r0, r4
 8012844:	4629      	mov	r1, r5
 8012846:	f04f 0a01 	mov.w	sl, #1
 801284a:	f7ee f967 	bl	8000b1c <__aeabi_dcmpge>
 801284e:	b900      	cbnz	r0, 8012852 <GUI_Touch_Processing+0x1cca>
 8012850:	4682      	mov	sl, r0
 8012852:	ea16 0f0a 	tst.w	r6, sl
 8012856:	d049      	beq.n	80128ec <GUI_Touch_Processing+0x1d64>
 8012858:	a35d      	add	r3, pc, #372	; (adr r3, 80129d0 <GUI_Touch_Processing+0x1e48>)
 801285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801285e:	4620      	mov	r0, r4
 8012860:	4629      	mov	r1, r5
 8012862:	f04f 0a01 	mov.w	sl, #1
 8012866:	f7ee f94f 	bl	8000b08 <__aeabi_dcmple>
 801286a:	b900      	cbnz	r0, 801286e <GUI_Touch_Processing+0x1ce6>
 801286c:	4682      	mov	sl, r0
 801286e:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8012872:	d03b      	beq.n	80128ec <GUI_Touch_Processing+0x1d64>
 8012874:	4b5d      	ldr	r3, [pc, #372]	; (80129ec <GUI_Touch_Processing+0x1e64>)
 8012876:	881b      	ldrh	r3, [r3, #0]
 8012878:	061b      	lsls	r3, r3, #24
 801287a:	d537      	bpl.n	80128ec <GUI_Touch_Processing+0x1d64>
					if(!(Source_Type&Source_A))
 801287c:	4d5c      	ldr	r5, [pc, #368]	; (80129f0 <GUI_Touch_Processing+0x1e68>)
 801287e:	782b      	ldrb	r3, [r5, #0]
 8012880:	07dc      	lsls	r4, r3, #31
 8012882:	f53e aa0f 	bmi.w	8010ca4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type|=Source_A, 0x01);
 8012886:	2401      	movs	r4, #1
 8012888:	4623      	mov	r3, r4
 801288a:	4622      	mov	r2, r4
 801288c:	216c      	movs	r1, #108	; 0x6c
 801288e:	20c8      	movs	r0, #200	; 0xc8
 8012890:	702c      	strb	r4, [r5, #0]
 8012892:	f002 fd1e 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8012896:	782a      	ldrb	r2, [r5, #0]
 8012898:	4623      	mov	r3, r4
 801289a:	f002 0202 	and.w	r2, r2, #2
 801289e:	218f      	movs	r1, #143	; 0x8f
 80128a0:	20c8      	movs	r0, #200	; 0xc8
 80128a2:	f002 fd16 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 80128a6:	782a      	ldrb	r2, [r5, #0]
 80128a8:	4623      	mov	r3, r4
 80128aa:	f002 0204 	and.w	r2, r2, #4
 80128ae:	21b2      	movs	r1, #178	; 0xb2
 80128b0:	20c8      	movs	r0, #200	; 0xc8
 80128b2:	f002 fd0e 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 80128b6:	782a      	ldrb	r2, [r5, #0]
 80128b8:	4623      	mov	r3, r4
 80128ba:	f002 0208 	and.w	r2, r2, #8
 80128be:	21d5      	movs	r1, #213	; 0xd5
 80128c0:	20c8      	movs	r0, #200	; 0xc8
 80128c2:	f002 fd06 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 80128c6:	782a      	ldrb	r2, [r5, #0]
 80128c8:	4623      	mov	r3, r4
 80128ca:	f002 0210 	and.w	r2, r2, #16
 80128ce:	21f8      	movs	r1, #248	; 0xf8
 80128d0:	20c8      	movs	r0, #200	; 0xc8
 80128d2:	f002 fcfe 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 80128d6:	782a      	ldrb	r2, [r5, #0]
 80128d8:	4623      	mov	r3, r4
 80128da:	f002 0220 	and.w	r2, r2, #32
 80128de:	f240 111b 	movw	r1, #283	; 0x11b
 80128e2:	20c8      	movs	r0, #200	; 0xc8
 80128e4:	f002 fcf5 	bl	80152d2 <GUI_RadioBox>
 80128e8:	f7fe b9dc 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=143*TS_Callib & Touch_y <=(143+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D65
 80128ec:	a33a      	add	r3, pc, #232	; (adr r3, 80129d8 <GUI_Touch_Processing+0x1e50>)
 80128ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f2:	4620      	mov	r0, r4
 80128f4:	4629      	mov	r1, r5
 80128f6:	f04f 0a01 	mov.w	sl, #1
 80128fa:	f7ee f90f 	bl	8000b1c <__aeabi_dcmpge>
 80128fe:	b900      	cbnz	r0, 8012902 <GUI_Touch_Processing+0x1d7a>
 8012900:	4682      	mov	sl, r0
 8012902:	ea16 0f0a 	tst.w	r6, sl
 8012906:	d075      	beq.n	80129f4 <GUI_Touch_Processing+0x1e6c>
 8012908:	a335      	add	r3, pc, #212	; (adr r3, 80129e0 <GUI_Touch_Processing+0x1e58>)
 801290a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290e:	4620      	mov	r0, r4
 8012910:	4629      	mov	r1, r5
 8012912:	f04f 0a01 	mov.w	sl, #1
 8012916:	f7ee f8f7 	bl	8000b08 <__aeabi_dcmple>
 801291a:	b900      	cbnz	r0, 801291e <GUI_Touch_Processing+0x1d96>
 801291c:	4682      	mov	sl, r0
 801291e:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8012922:	d067      	beq.n	80129f4 <GUI_Touch_Processing+0x1e6c>
 8012924:	4b31      	ldr	r3, [pc, #196]	; (80129ec <GUI_Touch_Processing+0x1e64>)
 8012926:	881b      	ldrh	r3, [r3, #0]
 8012928:	0618      	lsls	r0, r3, #24
 801292a:	d563      	bpl.n	80129f4 <GUI_Touch_Processing+0x1e6c>
					if(!(Source_Type&Source_D65))
 801292c:	4c30      	ldr	r4, [pc, #192]	; (80129f0 <GUI_Touch_Processing+0x1e68>)
 801292e:	7822      	ldrb	r2, [r4, #0]
 8012930:	f012 0202 	ands.w	r2, r2, #2
 8012934:	f47e a9b6 	bne.w	8010ca4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012938:	2301      	movs	r3, #1
 801293a:	216c      	movs	r1, #108	; 0x6c
 801293c:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 801293e:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012940:	f002 fcc7 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type|=Source_D65, 0x01);
 8012944:	7822      	ldrb	r2, [r4, #0]
 8012946:	2301      	movs	r3, #1
 8012948:	f042 0202 	orr.w	r2, r2, #2
 801294c:	218f      	movs	r1, #143	; 0x8f
 801294e:	20c8      	movs	r0, #200	; 0xc8
 8012950:	7022      	strb	r2, [r4, #0]
 8012952:	f002 fcbe 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8012956:	7822      	ldrb	r2, [r4, #0]
 8012958:	2301      	movs	r3, #1
 801295a:	f002 0204 	and.w	r2, r2, #4
 801295e:	21b2      	movs	r1, #178	; 0xb2
 8012960:	20c8      	movs	r0, #200	; 0xc8
 8012962:	f002 fcb6 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8012966:	7822      	ldrb	r2, [r4, #0]
 8012968:	2301      	movs	r3, #1
 801296a:	f002 0208 	and.w	r2, r2, #8
 801296e:	21d5      	movs	r1, #213	; 0xd5
 8012970:	20c8      	movs	r0, #200	; 0xc8
 8012972:	f002 fcae 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8012976:	7822      	ldrb	r2, [r4, #0]
 8012978:	2301      	movs	r3, #1
 801297a:	f002 0210 	and.w	r2, r2, #16
 801297e:	21f8      	movs	r1, #248	; 0xf8
 8012980:	20c8      	movs	r0, #200	; 0xc8
 8012982:	f002 fca6 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8012986:	7822      	ldrb	r2, [r4, #0]
 8012988:	2301      	movs	r3, #1
 801298a:	f002 0220 	and.w	r2, r2, #32
 801298e:	f240 111b 	movw	r1, #283	; 0x11b
 8012992:	20c8      	movs	r0, #200	; 0xc8
 8012994:	f002 fc9d 	bl	80152d2 <GUI_RadioBox>
 8012998:	f7fe b984 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 801299c:	f3af 8000 	nop.w
 80129a0:	cccccccd 	.word	0xcccccccd
 80129a4:	408508cc 	.word	0x408508cc
 80129a8:	00000000 	.word	0x00000000
 80129ac:	40658800 	.word	0x40658800
 80129b0:	99999999 	.word	0x99999999
 80129b4:	4073b599 	.word	0x4073b599
 80129b8:	00000000 	.word	0x00000000
 80129bc:	408c9200 	.word	0x408c9200
 80129c0:	66666666 	.word	0x66666666
 80129c4:	40908566 	.word	0x40908566
 80129c8:	33333333 	.word	0x33333333
 80129cc:	4071e333 	.word	0x4071e333
 80129d0:	cccccccd 	.word	0xcccccccd
 80129d4:	407ad4cc 	.word	0x407ad4cc
 80129d8:	33333333 	.word	0x33333333
 80129dc:	4077af33 	.word	0x4077af33
 80129e0:	66666666 	.word	0x66666666
 80129e4:	40805066 	.word	0x40805066
 80129e8:	40809000 	.word	0x40809000
 80129ec:	20004c76 	.word	0x20004c76
 80129f0:	2008bce9 	.word	0x2008bce9
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=178*TS_Callib & Touch_y <=(178+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_C
 80129f4:	a3be      	add	r3, pc, #760	; (adr r3, 8012cf0 <GUI_Touch_Processing+0x2168>)
 80129f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129fa:	4620      	mov	r0, r4
 80129fc:	4629      	mov	r1, r5
 80129fe:	f04f 0a01 	mov.w	sl, #1
 8012a02:	f7ee f88b 	bl	8000b1c <__aeabi_dcmpge>
 8012a06:	b900      	cbnz	r0, 8012a0a <GUI_Touch_Processing+0x1e82>
 8012a08:	4682      	mov	sl, r0
 8012a0a:	ea16 0f0a 	tst.w	r6, sl
 8012a0e:	d049      	beq.n	8012aa4 <GUI_Touch_Processing+0x1f1c>
 8012a10:	a3b9      	add	r3, pc, #740	; (adr r3, 8012cf8 <GUI_Touch_Processing+0x2170>)
 8012a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a16:	4620      	mov	r0, r4
 8012a18:	4629      	mov	r1, r5
 8012a1a:	f04f 0a01 	mov.w	sl, #1
 8012a1e:	f7ee f873 	bl	8000b08 <__aeabi_dcmple>
 8012a22:	b900      	cbnz	r0, 8012a26 <GUI_Touch_Processing+0x1e9e>
 8012a24:	4682      	mov	sl, r0
 8012a26:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8012a2a:	d03b      	beq.n	8012aa4 <GUI_Touch_Processing+0x1f1c>
 8012a2c:	4bae      	ldr	r3, [pc, #696]	; (8012ce8 <GUI_Touch_Processing+0x2160>)
 8012a2e:	881b      	ldrh	r3, [r3, #0]
 8012a30:	0619      	lsls	r1, r3, #24
 8012a32:	d537      	bpl.n	8012aa4 <GUI_Touch_Processing+0x1f1c>
					if(!(Source_Type&Source_C))
 8012a34:	4cad      	ldr	r4, [pc, #692]	; (8012cec <GUI_Touch_Processing+0x2164>)
 8012a36:	7822      	ldrb	r2, [r4, #0]
 8012a38:	f012 0204 	ands.w	r2, r2, #4
 8012a3c:	f47e a932 	bne.w	8010ca4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012a40:	2301      	movs	r3, #1
 8012a42:	216c      	movs	r1, #108	; 0x6c
 8012a44:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8012a46:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012a48:	f002 fc43 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8012a4c:	7822      	ldrb	r2, [r4, #0]
 8012a4e:	2301      	movs	r3, #1
 8012a50:	f002 0202 	and.w	r2, r2, #2
 8012a54:	218f      	movs	r1, #143	; 0x8f
 8012a56:	20c8      	movs	r0, #200	; 0xc8
 8012a58:	f002 fc3b 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type|=Source_C, 0x01);
 8012a5c:	7822      	ldrb	r2, [r4, #0]
 8012a5e:	2301      	movs	r3, #1
 8012a60:	f042 0204 	orr.w	r2, r2, #4
 8012a64:	21b2      	movs	r1, #178	; 0xb2
 8012a66:	20c8      	movs	r0, #200	; 0xc8
 8012a68:	7022      	strb	r2, [r4, #0]
 8012a6a:	f002 fc32 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8012a6e:	7822      	ldrb	r2, [r4, #0]
 8012a70:	2301      	movs	r3, #1
 8012a72:	f002 0208 	and.w	r2, r2, #8
 8012a76:	21d5      	movs	r1, #213	; 0xd5
 8012a78:	20c8      	movs	r0, #200	; 0xc8
 8012a7a:	f002 fc2a 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8012a7e:	7822      	ldrb	r2, [r4, #0]
 8012a80:	2301      	movs	r3, #1
 8012a82:	f002 0210 	and.w	r2, r2, #16
 8012a86:	21f8      	movs	r1, #248	; 0xf8
 8012a88:	20c8      	movs	r0, #200	; 0xc8
 8012a8a:	f002 fc22 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8012a8e:	7822      	ldrb	r2, [r4, #0]
 8012a90:	2301      	movs	r3, #1
 8012a92:	f002 0220 	and.w	r2, r2, #32
 8012a96:	f240 111b 	movw	r1, #283	; 0x11b
 8012a9a:	20c8      	movs	r0, #200	; 0xc8
 8012a9c:	f002 fc19 	bl	80152d2 <GUI_RadioBox>
 8012aa0:	f7fe b900 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=213*TS_Callib & Touch_y <=(213+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D50
 8012aa4:	a384      	add	r3, pc, #528	; (adr r3, 8012cb8 <GUI_Touch_Processing+0x2130>)
 8012aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aaa:	4620      	mov	r0, r4
 8012aac:	4629      	mov	r1, r5
 8012aae:	f04f 0a01 	mov.w	sl, #1
 8012ab2:	f7ee f833 	bl	8000b1c <__aeabi_dcmpge>
 8012ab6:	b900      	cbnz	r0, 8012aba <GUI_Touch_Processing+0x1f32>
 8012ab8:	4682      	mov	sl, r0
 8012aba:	ea16 0f0a 	tst.w	r6, sl
 8012abe:	d049      	beq.n	8012b54 <GUI_Touch_Processing+0x1fcc>
 8012ac0:	a37f      	add	r3, pc, #508	; (adr r3, 8012cc0 <GUI_Touch_Processing+0x2138>)
 8012ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac6:	4620      	mov	r0, r4
 8012ac8:	4629      	mov	r1, r5
 8012aca:	f04f 0a01 	mov.w	sl, #1
 8012ace:	f7ee f81b 	bl	8000b08 <__aeabi_dcmple>
 8012ad2:	b900      	cbnz	r0, 8012ad6 <GUI_Touch_Processing+0x1f4e>
 8012ad4:	4682      	mov	sl, r0
 8012ad6:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8012ada:	d03b      	beq.n	8012b54 <GUI_Touch_Processing+0x1fcc>
 8012adc:	4b82      	ldr	r3, [pc, #520]	; (8012ce8 <GUI_Touch_Processing+0x2160>)
 8012ade:	881b      	ldrh	r3, [r3, #0]
 8012ae0:	061a      	lsls	r2, r3, #24
 8012ae2:	d537      	bpl.n	8012b54 <GUI_Touch_Processing+0x1fcc>
					if(!(Source_Type&Source_D50))
 8012ae4:	4c81      	ldr	r4, [pc, #516]	; (8012cec <GUI_Touch_Processing+0x2164>)
 8012ae6:	7822      	ldrb	r2, [r4, #0]
 8012ae8:	f012 0208 	ands.w	r2, r2, #8
 8012aec:	f47e a8da 	bne.w	8010ca4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012af0:	2301      	movs	r3, #1
 8012af2:	216c      	movs	r1, #108	; 0x6c
 8012af4:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8012af6:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012af8:	f002 fbeb 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8012afc:	7822      	ldrb	r2, [r4, #0]
 8012afe:	2301      	movs	r3, #1
 8012b00:	f002 0202 	and.w	r2, r2, #2
 8012b04:	218f      	movs	r1, #143	; 0x8f
 8012b06:	20c8      	movs	r0, #200	; 0xc8
 8012b08:	f002 fbe3 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8012b0c:	7822      	ldrb	r2, [r4, #0]
 8012b0e:	2301      	movs	r3, #1
 8012b10:	f002 0204 	and.w	r2, r2, #4
 8012b14:	21b2      	movs	r1, #178	; 0xb2
 8012b16:	20c8      	movs	r0, #200	; 0xc8
 8012b18:	f002 fbdb 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type|=Source_D50, 0x01);
 8012b1c:	7822      	ldrb	r2, [r4, #0]
 8012b1e:	2301      	movs	r3, #1
 8012b20:	f042 0208 	orr.w	r2, r2, #8
 8012b24:	21d5      	movs	r1, #213	; 0xd5
 8012b26:	20c8      	movs	r0, #200	; 0xc8
 8012b28:	7022      	strb	r2, [r4, #0]
 8012b2a:	f002 fbd2 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8012b2e:	7822      	ldrb	r2, [r4, #0]
 8012b30:	2301      	movs	r3, #1
 8012b32:	f002 0210 	and.w	r2, r2, #16
 8012b36:	21f8      	movs	r1, #248	; 0xf8
 8012b38:	20c8      	movs	r0, #200	; 0xc8
 8012b3a:	f002 fbca 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8012b3e:	7822      	ldrb	r2, [r4, #0]
 8012b40:	2301      	movs	r3, #1
 8012b42:	f002 0220 	and.w	r2, r2, #32
 8012b46:	f240 111b 	movw	r1, #283	; 0x11b
 8012b4a:	20c8      	movs	r0, #200	; 0xc8
 8012b4c:	f002 fbc1 	bl	80152d2 <GUI_RadioBox>
 8012b50:	f7fe b8a8 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=248*TS_Callib & Touch_y <=(248+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D55
 8012b54:	a35c      	add	r3, pc, #368	; (adr r3, 8012cc8 <GUI_Touch_Processing+0x2140>)
 8012b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5a:	4620      	mov	r0, r4
 8012b5c:	4629      	mov	r1, r5
 8012b5e:	f04f 0a01 	mov.w	sl, #1
 8012b62:	f7ed ffdb 	bl	8000b1c <__aeabi_dcmpge>
 8012b66:	b900      	cbnz	r0, 8012b6a <GUI_Touch_Processing+0x1fe2>
 8012b68:	4682      	mov	sl, r0
 8012b6a:	ea16 0f0a 	tst.w	r6, sl
 8012b6e:	d049      	beq.n	8012c04 <GUI_Touch_Processing+0x207c>
 8012b70:	a357      	add	r3, pc, #348	; (adr r3, 8012cd0 <GUI_Touch_Processing+0x2148>)
 8012b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b76:	4620      	mov	r0, r4
 8012b78:	4629      	mov	r1, r5
 8012b7a:	f04f 0a01 	mov.w	sl, #1
 8012b7e:	f7ed ffc3 	bl	8000b08 <__aeabi_dcmple>
 8012b82:	b900      	cbnz	r0, 8012b86 <GUI_Touch_Processing+0x1ffe>
 8012b84:	4682      	mov	sl, r0
 8012b86:	f01a 0fff 	tst.w	sl, #255	; 0xff
 8012b8a:	d03b      	beq.n	8012c04 <GUI_Touch_Processing+0x207c>
 8012b8c:	4b56      	ldr	r3, [pc, #344]	; (8012ce8 <GUI_Touch_Processing+0x2160>)
 8012b8e:	881b      	ldrh	r3, [r3, #0]
 8012b90:	061b      	lsls	r3, r3, #24
 8012b92:	d537      	bpl.n	8012c04 <GUI_Touch_Processing+0x207c>
					if(!(Source_Type&Source_D55))
 8012b94:	4c55      	ldr	r4, [pc, #340]	; (8012cec <GUI_Touch_Processing+0x2164>)
 8012b96:	7822      	ldrb	r2, [r4, #0]
 8012b98:	f012 0210 	ands.w	r2, r2, #16
 8012b9c:	f47e a882 	bne.w	8010ca4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012ba0:	2301      	movs	r3, #1
 8012ba2:	216c      	movs	r1, #108	; 0x6c
 8012ba4:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8012ba6:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012ba8:	f002 fb93 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8012bac:	7822      	ldrb	r2, [r4, #0]
 8012bae:	2301      	movs	r3, #1
 8012bb0:	f002 0202 	and.w	r2, r2, #2
 8012bb4:	218f      	movs	r1, #143	; 0x8f
 8012bb6:	20c8      	movs	r0, #200	; 0xc8
 8012bb8:	f002 fb8b 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8012bbc:	7822      	ldrb	r2, [r4, #0]
 8012bbe:	2301      	movs	r3, #1
 8012bc0:	f002 0204 	and.w	r2, r2, #4
 8012bc4:	21b2      	movs	r1, #178	; 0xb2
 8012bc6:	20c8      	movs	r0, #200	; 0xc8
 8012bc8:	f002 fb83 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8012bcc:	7822      	ldrb	r2, [r4, #0]
 8012bce:	2301      	movs	r3, #1
 8012bd0:	f002 0208 	and.w	r2, r2, #8
 8012bd4:	21d5      	movs	r1, #213	; 0xd5
 8012bd6:	20c8      	movs	r0, #200	; 0xc8
 8012bd8:	f002 fb7b 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type |= Source_D55, 0x01);
 8012bdc:	7822      	ldrb	r2, [r4, #0]
 8012bde:	2301      	movs	r3, #1
 8012be0:	f042 0210 	orr.w	r2, r2, #16
 8012be4:	21f8      	movs	r1, #248	; 0xf8
 8012be6:	20c8      	movs	r0, #200	; 0xc8
 8012be8:	7022      	strb	r2, [r4, #0]
 8012bea:	f002 fb72 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type&Source_D75, 0x01);
 8012bee:	7822      	ldrb	r2, [r4, #0]
 8012bf0:	2301      	movs	r3, #1
 8012bf2:	f002 0220 	and.w	r2, r2, #32
 8012bf6:	f240 111b 	movw	r1, #283	; 0x11b
 8012bfa:	20c8      	movs	r0, #200	; 0xc8
 8012bfc:	f002 fb69 	bl	80152d2 <GUI_RadioBox>
 8012c00:	f7fe b850 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=283*TS_Callib & Touch_y <=(283+54)*TS_Callib && (Measure_Field&CIE_Lab)) //Source_D75
 8012c04:	a334      	add	r3, pc, #208	; (adr r3, 8012cd8 <GUI_Touch_Processing+0x2150>)
 8012c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c0a:	4620      	mov	r0, r4
 8012c0c:	4629      	mov	r1, r5
 8012c0e:	f04f 0a01 	mov.w	sl, #1
 8012c12:	f7ed ff83 	bl	8000b1c <__aeabi_dcmpge>
 8012c16:	b900      	cbnz	r0, 8012c1a <GUI_Touch_Processing+0x2092>
 8012c18:	4682      	mov	sl, r0
 8012c1a:	ea16 0f0a 	tst.w	r6, sl
 8012c1e:	d06f      	beq.n	8012d00 <GUI_Touch_Processing+0x2178>
 8012c20:	a32f      	add	r3, pc, #188	; (adr r3, 8012ce0 <GUI_Touch_Processing+0x2158>)
 8012c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c26:	4620      	mov	r0, r4
 8012c28:	4629      	mov	r1, r5
 8012c2a:	f04f 0601 	mov.w	r6, #1
 8012c2e:	f7ed ff6b 	bl	8000b08 <__aeabi_dcmple>
 8012c32:	b900      	cbnz	r0, 8012c36 <GUI_Touch_Processing+0x20ae>
 8012c34:	4606      	mov	r6, r0
 8012c36:	f016 0fff 	tst.w	r6, #255	; 0xff
 8012c3a:	d061      	beq.n	8012d00 <GUI_Touch_Processing+0x2178>
 8012c3c:	4b2a      	ldr	r3, [pc, #168]	; (8012ce8 <GUI_Touch_Processing+0x2160>)
 8012c3e:	881b      	ldrh	r3, [r3, #0]
 8012c40:	0618      	lsls	r0, r3, #24
 8012c42:	d55d      	bpl.n	8012d00 <GUI_Touch_Processing+0x2178>
					if(!(Source_Type&Source_D75))
 8012c44:	4c29      	ldr	r4, [pc, #164]	; (8012cec <GUI_Touch_Processing+0x2164>)
 8012c46:	7822      	ldrb	r2, [r4, #0]
 8012c48:	f012 0220 	ands.w	r2, r2, #32
 8012c4c:	f47e a82a 	bne.w	8010ca4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012c50:	2301      	movs	r3, #1
 8012c52:	216c      	movs	r1, #108	; 0x6c
 8012c54:	20c8      	movs	r0, #200	; 0xc8
						Source_Type = 0;
 8012c56:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 108, Source_Type&Source_A, 0x01);
 8012c58:	f002 fb3b 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 143, Source_Type&Source_D65, 0x01);
 8012c5c:	7822      	ldrb	r2, [r4, #0]
 8012c5e:	2301      	movs	r3, #1
 8012c60:	f002 0202 	and.w	r2, r2, #2
 8012c64:	218f      	movs	r1, #143	; 0x8f
 8012c66:	20c8      	movs	r0, #200	; 0xc8
 8012c68:	f002 fb33 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 178, Source_Type&Source_C, 0x01);
 8012c6c:	7822      	ldrb	r2, [r4, #0]
 8012c6e:	2301      	movs	r3, #1
 8012c70:	f002 0204 	and.w	r2, r2, #4
 8012c74:	21b2      	movs	r1, #178	; 0xb2
 8012c76:	20c8      	movs	r0, #200	; 0xc8
 8012c78:	f002 fb2b 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 213, Source_Type&Source_D50, 0x01);
 8012c7c:	7822      	ldrb	r2, [r4, #0]
 8012c7e:	2301      	movs	r3, #1
 8012c80:	f002 0208 	and.w	r2, r2, #8
 8012c84:	21d5      	movs	r1, #213	; 0xd5
 8012c86:	20c8      	movs	r0, #200	; 0xc8
 8012c88:	f002 fb23 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 248, Source_Type&Source_D55, 0x01);
 8012c8c:	7822      	ldrb	r2, [r4, #0]
 8012c8e:	2301      	movs	r3, #1
 8012c90:	f002 0210 	and.w	r2, r2, #16
 8012c94:	21f8      	movs	r1, #248	; 0xf8
 8012c96:	20c8      	movs	r0, #200	; 0xc8
 8012c98:	f002 fb1b 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 283, Source_Type|=Source_D75, 0x01);
 8012c9c:	7822      	ldrb	r2, [r4, #0]
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	f042 0220 	orr.w	r2, r2, #32
 8012ca4:	f240 111b 	movw	r1, #283	; 0x11b
 8012ca8:	20c8      	movs	r0, #200	; 0xc8
 8012caa:	7022      	strb	r2, [r4, #0]
 8012cac:	f002 fb11 	bl	80152d2 <GUI_RadioBox>
 8012cb0:	f7fd bff8 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8012cb4:	f3af 8000 	nop.w
 8012cb8:	99999999 	.word	0x99999999
 8012cbc:	4081a399 	.word	0x4081a399
 8012cc0:	66666666 	.word	0x66666666
 8012cc4:	40861c66 	.word	0x40861c66
 8012cc8:	99999999 	.word	0x99999999
 8012ccc:	40848999 	.word	0x40848999
 8012cd0:	66666666 	.word	0x66666666
 8012cd4:	40890266 	.word	0x40890266
 8012cd8:	99999999 	.word	0x99999999
 8012cdc:	40876f99 	.word	0x40876f99
 8012ce0:	66666666 	.word	0x66666666
 8012ce4:	408be866 	.word	0x408be866
 8012ce8:	20004c76 	.word	0x20004c76
 8012cec:	2008bce9 	.word	0x2008bce9
 8012cf0:	33333333 	.word	0x33333333
 8012cf4:	407d7b33 	.word	0x407d7b33
 8012cf8:	66666666 	.word	0x66666666
 8012cfc:	40833666 	.word	0x40833666
 8012d00:	9b00      	ldr	r3, [sp, #0]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8012d02:	4640      	mov	r0, r8
 8012d04:	ea07 0503 	and.w	r5, r7, r3
 8012d08:	4649      	mov	r1, r9
 8012d0a:	a3c1      	add	r3, pc, #772	; (adr r3, 8013010 <GUI_Touch_Processing+0x2488>)
 8012d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d10:	f04f 0401 	mov.w	r4, #1
 8012d14:	f7ed ff02 	bl	8000b1c <__aeabi_dcmpge>
 8012d18:	b900      	cbnz	r0, 8012d1c <GUI_Touch_Processing+0x2194>
 8012d1a:	4604      	mov	r4, r0
 8012d1c:	a3c8      	add	r3, pc, #800	; (adr r3, 8013040 <GUI_Touch_Processing+0x24b8>)
 8012d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d22:	4640      	mov	r0, r8
 8012d24:	4649      	mov	r1, r9
 8012d26:	f04f 0601 	mov.w	r6, #1
 8012d2a:	f7ed feed 	bl	8000b08 <__aeabi_dcmple>
 8012d2e:	b900      	cbnz	r0, 8012d32 <GUI_Touch_Processing+0x21aa>
 8012d30:	4606      	mov	r6, r0
 8012d32:	ea04 0306 	and.w	r3, r4, r6
 8012d36:	07d9      	lsls	r1, r3, #31
 8012d38:	d502      	bpl.n	8012d40 <GUI_Touch_Processing+0x21b8>
 8012d3a:	2d00      	cmp	r5, #0
 8012d3c:	f47e af6f 	bne.w	8011c1e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8012d40:	a3c1      	add	r3, pc, #772	; (adr r3, 8013048 <GUI_Touch_Processing+0x24c0>)
 8012d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d46:	4640      	mov	r0, r8
 8012d48:	4649      	mov	r1, r9
 8012d4a:	f04f 0401 	mov.w	r4, #1
 8012d4e:	f7ed fee5 	bl	8000b1c <__aeabi_dcmpge>
 8012d52:	b900      	cbnz	r0, 8012d56 <GUI_Touch_Processing+0x21ce>
 8012d54:	4604      	mov	r4, r0
 8012d56:	a3a6      	add	r3, pc, #664	; (adr r3, 8012ff0 <GUI_Touch_Processing+0x2468>)
 8012d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d5c:	4640      	mov	r0, r8
 8012d5e:	4649      	mov	r1, r9
 8012d60:	f04f 0601 	mov.w	r6, #1
 8012d64:	f7ed fed0 	bl	8000b08 <__aeabi_dcmple>
 8012d68:	b900      	cbnz	r0, 8012d6c <GUI_Touch_Processing+0x21e4>
 8012d6a:	4606      	mov	r6, r0
 8012d6c:	ea04 0306 	and.w	r3, r4, r6
 8012d70:	07da      	lsls	r2, r3, #31
 8012d72:	d523      	bpl.n	8012dbc <GUI_Touch_Processing+0x2234>
 8012d74:	b315      	cbz	r5, 8012dbc <GUI_Touch_Processing+0x2234>
					WriteSDFLASH_t(sdfile_cnt);
 8012d76:	4bb6      	ldr	r3, [pc, #728]	; (8013050 <GUI_Touch_Processing+0x24c8>)
 8012d78:	2100      	movs	r1, #0
 8012d7a:	8818      	ldrh	r0, [r3, #0]
 8012d7c:	f009 f822 	bl	801bdc4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012d80:	4bb4      	ldr	r3, [pc, #720]	; (8013054 <GUI_Touch_Processing+0x24cc>)
 8012d82:	781a      	ldrb	r2, [r3, #0]
 8012d84:	4bb4      	ldr	r3, [pc, #720]	; (8013058 <GUI_Touch_Processing+0x24d0>)
					switch (Prev_Inf_Screen){
 8012d86:	1e51      	subs	r1, r2, #1
 8012d88:	2905      	cmp	r1, #5
 8012d8a:	d804      	bhi.n	8012d96 <GUI_Touch_Processing+0x220e>
 8012d8c:	e8df f001 	tbb	[pc, r1]
 8012d90:	0a030306 	.word	0x0a030306
 8012d94:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 8012d96:	701a      	strb	r2, [r3, #0]
 8012d98:	f7fd bf84 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8012d9c:	2201      	movs	r2, #1
 8012d9e:	701a      	strb	r2, [r3, #0]
 8012da0:	f7fd bf80 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8012da4:	2204      	movs	r2, #4
 8012da6:	701a      	strb	r2, [r3, #0]
 8012da8:	f7fd bf7c 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8012dac:	2206      	movs	r2, #6
 8012dae:	701a      	strb	r2, [r3, #0]
 8012db0:	f7fd bf78 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8012db4:	2205      	movs	r2, #5
 8012db6:	701a      	strb	r2, [r3, #0]
 8012db8:	f7fd bf74 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8012dbc:	a38c      	add	r3, pc, #560	; (adr r3, 8012ff0 <GUI_Touch_Processing+0x2468>)
 8012dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc2:	4640      	mov	r0, r8
 8012dc4:	4649      	mov	r1, r9
 8012dc6:	f04f 0401 	mov.w	r4, #1
 8012dca:	f7ed fea7 	bl	8000b1c <__aeabi_dcmpge>
 8012dce:	b900      	cbnz	r0, 8012dd2 <GUI_Touch_Processing+0x224a>
 8012dd0:	4604      	mov	r4, r0
 8012dd2:	a389      	add	r3, pc, #548	; (adr r3, 8012ff8 <GUI_Touch_Processing+0x2470>)
 8012dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd8:	4640      	mov	r0, r8
 8012dda:	4649      	mov	r1, r9
 8012ddc:	f04f 0501 	mov.w	r5, #1
 8012de0:	f7ed fe92 	bl	8000b08 <__aeabi_dcmple>
 8012de4:	b900      	cbnz	r0, 8012de8 <GUI_Touch_Processing+0x2260>
 8012de6:	4605      	mov	r5, r0
 8012de8:	402c      	ands	r4, r5
 8012dea:	4227      	tst	r7, r4
 8012dec:	f7ff b9cb 	b.w	8012186 <GUI_Touch_Processing+0x15fe>
					preGUI_screen_state = GUI_screen_state;
 8012df0:	4b9a      	ldr	r3, [pc, #616]	; (801305c <GUI_Touch_Processing+0x24d4>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8012df2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8012df6:	220b      	movs	r2, #11
 8012df8:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Next
 8012dfa:	f7ed fba3 	bl	8000544 <__aeabi_i2d>
 8012dfe:	4604      	mov	r4, r0
 8012e00:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8012e04:	460d      	mov	r5, r1
 8012e06:	f7ed fb9d 	bl	8000544 <__aeabi_i2d>
 8012e0a:	a37d      	add	r3, pc, #500	; (adr r3, 8013000 <GUI_Touch_Processing+0x2478>)
 8012e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e10:	e9cd 0100 	strd	r0, r1, [sp]
 8012e14:	f04f 0801 	mov.w	r8, #1
 8012e18:	f7ed fe80 	bl	8000b1c <__aeabi_dcmpge>
 8012e1c:	b900      	cbnz	r0, 8012e20 <GUI_Touch_Processing+0x2298>
 8012e1e:	4680      	mov	r8, r0
 8012e20:	2200      	movs	r2, #0
 8012e22:	4b8f      	ldr	r3, [pc, #572]	; (8013060 <GUI_Touch_Processing+0x24d8>)
 8012e24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e28:	fa5f f888 	uxtb.w	r8, r8
 8012e2c:	f04f 0701 	mov.w	r7, #1
 8012e30:	f7ed fe6a 	bl	8000b08 <__aeabi_dcmple>
 8012e34:	b900      	cbnz	r0, 8012e38 <GUI_Touch_Processing+0x22b0>
 8012e36:	4607      	mov	r7, r0
 8012e38:	a373      	add	r3, pc, #460	; (adr r3, 8013008 <GUI_Touch_Processing+0x2480>)
 8012e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e3e:	4620      	mov	r0, r4
 8012e40:	4629      	mov	r1, r5
 8012e42:	b2ff      	uxtb	r7, r7
 8012e44:	f04f 0601 	mov.w	r6, #1
 8012e48:	f7ed fe68 	bl	8000b1c <__aeabi_dcmpge>
 8012e4c:	b900      	cbnz	r0, 8012e50 <GUI_Touch_Processing+0x22c8>
 8012e4e:	4606      	mov	r6, r0
 8012e50:	a36f      	add	r3, pc, #444	; (adr r3, 8013010 <GUI_Touch_Processing+0x2488>)
 8012e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e56:	4620      	mov	r0, r4
 8012e58:	4629      	mov	r1, r5
 8012e5a:	f04f 0901 	mov.w	r9, #1
 8012e5e:	f7ed fe53 	bl	8000b08 <__aeabi_dcmple>
 8012e62:	b900      	cbnz	r0, 8012e66 <GUI_Touch_Processing+0x22de>
 8012e64:	4681      	mov	r9, r0
 8012e66:	ea06 0609 	and.w	r6, r6, r9
 8012e6a:	ea18 0f06 	tst.w	r8, r6
 8012e6e:	d005      	beq.n	8012e7c <GUI_Touch_Processing+0x22f4>
 8012e70:	b127      	cbz	r7, 8012e7c <GUI_Touch_Processing+0x22f4>
					GUI_screen_state = DataSet1_Screen;
 8012e72:	2307      	movs	r3, #7
 8012e74:	f88b 3000 	strb.w	r3, [fp]
 8012e78:	f7fd bf14 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //EbEr
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	4b79      	ldr	r3, [pc, #484]	; (8013064 <GUI_Touch_Processing+0x24dc>)
 8012e80:	4620      	mov	r0, r4
 8012e82:	4629      	mov	r1, r5
 8012e84:	f04f 0601 	mov.w	r6, #1
 8012e88:	f7ed fe48 	bl	8000b1c <__aeabi_dcmpge>
 8012e8c:	b900      	cbnz	r0, 8012e90 <GUI_Touch_Processing+0x2308>
 8012e8e:	4606      	mov	r6, r0
 8012e90:	a361      	add	r3, pc, #388	; (adr r3, 8013018 <GUI_Touch_Processing+0x2490>)
 8012e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e96:	4620      	mov	r0, r4
 8012e98:	4629      	mov	r1, r5
 8012e9a:	f04f 0901 	mov.w	r9, #1
 8012e9e:	f7ed fe33 	bl	8000b08 <__aeabi_dcmple>
 8012ea2:	b900      	cbnz	r0, 8012ea6 <GUI_Touch_Processing+0x231e>
 8012ea4:	4681      	mov	r9, r0
 8012ea6:	ea06 0609 	and.w	r6, r6, r9
 8012eaa:	a35d      	add	r3, pc, #372	; (adr r3, 8013020 <GUI_Touch_Processing+0x2498>)
 8012eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012eb4:	b2f6      	uxtb	r6, r6
 8012eb6:	f04f 0901 	mov.w	r9, #1
 8012eba:	f7ed fe2f 	bl	8000b1c <__aeabi_dcmpge>
 8012ebe:	b900      	cbnz	r0, 8012ec2 <GUI_Touch_Processing+0x233a>
 8012ec0:	4681      	mov	r9, r0
 8012ec2:	a359      	add	r3, pc, #356	; (adr r3, 8013028 <GUI_Touch_Processing+0x24a0>)
 8012ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012ecc:	f04f 0a01 	mov.w	sl, #1
 8012ed0:	f7ed fe1a 	bl	8000b08 <__aeabi_dcmple>
 8012ed4:	b900      	cbnz	r0, 8012ed8 <GUI_Touch_Processing+0x2350>
 8012ed6:	4682      	mov	sl, r0
 8012ed8:	ea09 090a 	and.w	r9, r9, sl
 8012edc:	f019 0f01 	tst.w	r9, #1
 8012ee0:	d00d      	beq.n	8012efe <GUI_Touch_Processing+0x2376>
 8012ee2:	b166      	cbz	r6, 8012efe <GUI_Touch_Processing+0x2376>
					Measure_Field ^= lambda_d;
 8012ee4:	4b60      	ldr	r3, [pc, #384]	; (8013068 <GUI_Touch_Processing+0x24e0>)
 8012ee6:	881a      	ldrh	r2, [r3, #0]
 8012ee8:	f482 7200 	eor.w	r2, r2, #512	; 0x200
 8012eec:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 70, Measure_Field&lambda_d);
 8012eee:	2146      	movs	r1, #70	; 0x46
 8012ef0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8012ef4:	20c8      	movs	r0, #200	; 0xc8
 8012ef6:	f002 f9ab 	bl	8015250 <GUI_CheckBox>
 8012efa:	f7fd bed3 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=198*TS_Callib & Touch_y <=(198+54)*TS_Callib) //EbEr
 8012efe:	a34c      	add	r3, pc, #304	; (adr r3, 8013030 <GUI_Touch_Processing+0x24a8>)
 8012f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f08:	f04f 0901 	mov.w	r9, #1
 8012f0c:	f7ed fe06 	bl	8000b1c <__aeabi_dcmpge>
 8012f10:	b900      	cbnz	r0, 8012f14 <GUI_Touch_Processing+0x238c>
 8012f12:	4681      	mov	r9, r0
 8012f14:	a348      	add	r3, pc, #288	; (adr r3, 8013038 <GUI_Touch_Processing+0x24b0>)
 8012f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f1e:	f04f 0a01 	mov.w	sl, #1
 8012f22:	f7ed fdf1 	bl	8000b08 <__aeabi_dcmple>
 8012f26:	b900      	cbnz	r0, 8012f2a <GUI_Touch_Processing+0x23a2>
 8012f28:	4682      	mov	sl, r0
 8012f2a:	ea09 090a 	and.w	r9, r9, sl
 8012f2e:	f019 0f01 	tst.w	r9, #1
 8012f32:	d00d      	beq.n	8012f50 <GUI_Touch_Processing+0x23c8>
 8012f34:	b166      	cbz	r6, 8012f50 <GUI_Touch_Processing+0x23c8>
					Measure_Field ^= SP_measure;
 8012f36:	4b4c      	ldr	r3, [pc, #304]	; (8013068 <GUI_Touch_Processing+0x24e0>)
 8012f38:	881a      	ldrh	r2, [r3, #0]
 8012f3a:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8012f3e:	801a      	strh	r2, [r3, #0]
					GUI_CheckBox(200, 198, Measure_Field&SP_measure);
 8012f40:	21c6      	movs	r1, #198	; 0xc6
 8012f42:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8012f46:	20c8      	movs	r0, #200	; 0xc8
 8012f48:	f002 f982 	bl	8015250 <GUI_CheckBox>
 8012f4c:	f7fd beaa 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8012f50:	a32f      	add	r3, pc, #188	; (adr r3, 8013010 <GUI_Touch_Processing+0x2488>)
 8012f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f56:	4620      	mov	r0, r4
 8012f58:	4629      	mov	r1, r5
 8012f5a:	ea08 0607 	and.w	r6, r8, r7
 8012f5e:	f04f 0901 	mov.w	r9, #1
 8012f62:	f7ed fddb 	bl	8000b1c <__aeabi_dcmpge>
 8012f66:	b900      	cbnz	r0, 8012f6a <GUI_Touch_Processing+0x23e2>
 8012f68:	4681      	mov	r9, r0
 8012f6a:	a335      	add	r3, pc, #212	; (adr r3, 8013040 <GUI_Touch_Processing+0x24b8>)
 8012f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f70:	4620      	mov	r0, r4
 8012f72:	4629      	mov	r1, r5
 8012f74:	f04f 0a01 	mov.w	sl, #1
 8012f78:	f7ed fdc6 	bl	8000b08 <__aeabi_dcmple>
 8012f7c:	b900      	cbnz	r0, 8012f80 <GUI_Touch_Processing+0x23f8>
 8012f7e:	4682      	mov	sl, r0
 8012f80:	ea09 030a 	and.w	r3, r9, sl
 8012f84:	07db      	lsls	r3, r3, #31
 8012f86:	d502      	bpl.n	8012f8e <GUI_Touch_Processing+0x2406>
 8012f88:	2e00      	cmp	r6, #0
 8012f8a:	f47e ae48 	bne.w	8011c1e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8012f8e:	a32e      	add	r3, pc, #184	; (adr r3, 8013048 <GUI_Touch_Processing+0x24c0>)
 8012f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f94:	4620      	mov	r0, r4
 8012f96:	4629      	mov	r1, r5
 8012f98:	f04f 0901 	mov.w	r9, #1
 8012f9c:	f7ed fdbe 	bl	8000b1c <__aeabi_dcmpge>
 8012fa0:	b900      	cbnz	r0, 8012fa4 <GUI_Touch_Processing+0x241c>
 8012fa2:	4681      	mov	r9, r0
 8012fa4:	a312      	add	r3, pc, #72	; (adr r3, 8012ff0 <GUI_Touch_Processing+0x2468>)
 8012fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012faa:	4620      	mov	r0, r4
 8012fac:	4629      	mov	r1, r5
 8012fae:	f04f 0a01 	mov.w	sl, #1
 8012fb2:	f7ed fda9 	bl	8000b08 <__aeabi_dcmple>
 8012fb6:	b900      	cbnz	r0, 8012fba <GUI_Touch_Processing+0x2432>
 8012fb8:	4682      	mov	sl, r0
 8012fba:	ea09 030a 	and.w	r3, r9, sl
 8012fbe:	07d8      	lsls	r0, r3, #31
 8012fc0:	f141 8018 	bpl.w	8013ff4 <GUI_Touch_Processing+0x346c>
 8012fc4:	2e00      	cmp	r6, #0
 8012fc6:	f001 8015 	beq.w	8013ff4 <GUI_Touch_Processing+0x346c>
					WriteSDFLASH_t(sdfile_cnt);
 8012fca:	4b21      	ldr	r3, [pc, #132]	; (8013050 <GUI_Touch_Processing+0x24c8>)
 8012fcc:	2100      	movs	r1, #0
 8012fce:	8818      	ldrh	r0, [r3, #0]
 8012fd0:	f008 fef8 	bl	801bdc4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8012fd4:	4b1f      	ldr	r3, [pc, #124]	; (8013054 <GUI_Touch_Processing+0x24cc>)
 8012fd6:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8012fd8:	1e5a      	subs	r2, r3, #1
 8012fda:	2a05      	cmp	r2, #5
 8012fdc:	d804      	bhi.n	8012fe8 <GUI_Touch_Processing+0x2460>
 8012fde:	e8df f002 	tbb	[pc, r2]
 8012fe2:	0345      	.short	0x0345
 8012fe4:	4f544a03 	.word	0x4f544a03
					GUI_screen_state = Prev_Inf_Screen;
 8012fe8:	f88b 3000 	strb.w	r3, [fp]
 8012fec:	f7fd be5a 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8012ff0:	00000000 	.word	0x00000000
 8012ff4:	40623800 	.word	0x40623800
 8012ff8:	99999999 	.word	0x99999999
 8012ffc:	40720d99 	.word	0x40720d99
 8013000:	99999999 	.word	0x99999999
 8013004:	4091a399 	.word	0x4091a399
 8013008:	33333333 	.word	0x33333333
 801300c:	407aff33 	.word	0x407aff33
 8013010:	66666666 	.word	0x66666666
 8013014:	4081f866 	.word	0x4081f866
 8013018:	cccccccd 	.word	0xcccccccd
 801301c:	408508cc 	.word	0x408508cc
 8013020:	00000000 	.word	0x00000000
 8013024:	40673000 	.word	0x40673000
 8013028:	99999999 	.word	0x99999999
 801302c:	40748999 	.word	0x40748999
 8013030:	99999999 	.word	0x99999999
 8013034:	40806599 	.word	0x40806599
 8013038:	66666666 	.word	0x66666666
 801303c:	4084de66 	.word	0x4084de66
 8013040:	33333333 	.word	0x33333333
 8013044:	40867133 	.word	0x40867133
 8013048:	33333333 	.word	0x33333333
 801304c:	40053333 	.word	0x40053333
 8013050:	20004c9e 	.word	0x20004c9e
 8013054:	2008bce5 	.word	0x2008bce5
 8013058:	20004c71 	.word	0x20004c71
 801305c:	2000022a 	.word	0x2000022a
 8013060:	4093e000 	.word	0x4093e000
 8013064:	40809000 	.word	0x40809000
 8013068:	20004c76 	.word	0x20004c76
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 801306c:	2301      	movs	r3, #1
 801306e:	f88b 3000 	strb.w	r3, [fp]
 8013072:	f7fd be17 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8013076:	2304      	movs	r3, #4
 8013078:	f88b 3000 	strb.w	r3, [fp]
 801307c:	f7fd be12 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8013080:	2306      	movs	r3, #6
 8013082:	f88b 3000 	strb.w	r3, [fp]
 8013086:	f7fd be0d 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801308a:	2305      	movs	r3, #5
 801308c:	f88b 3000 	strb.w	r3, [fp]
 8013090:	f7fd be08 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 8013094:	4ba4      	ldr	r3, [pc, #656]	; (8013328 <GUI_Touch_Processing+0x27a0>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8013096:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 801309a:	220c      	movs	r2, #12
 801309c:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 801309e:	f7ed fa51 	bl	8000544 <__aeabi_i2d>
 80130a2:	4604      	mov	r4, r0
 80130a4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80130a8:	460d      	mov	r5, r1
 80130aa:	f7ed fa4b 	bl	8000544 <__aeabi_i2d>
 80130ae:	a386      	add	r3, pc, #536	; (adr r3, 80132c8 <GUI_Touch_Processing+0x2740>)
 80130b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b4:	4606      	mov	r6, r0
 80130b6:	460f      	mov	r7, r1
 80130b8:	f04f 0801 	mov.w	r8, #1
 80130bc:	f7ed fd2e 	bl	8000b1c <__aeabi_dcmpge>
 80130c0:	b900      	cbnz	r0, 80130c4 <GUI_Touch_Processing+0x253c>
 80130c2:	4680      	mov	r8, r0
 80130c4:	fa5f f388 	uxtb.w	r3, r8
 80130c8:	9300      	str	r3, [sp, #0]
 80130ca:	2200      	movs	r2, #0
 80130cc:	4b97      	ldr	r3, [pc, #604]	; (801332c <GUI_Touch_Processing+0x27a4>)
 80130ce:	4630      	mov	r0, r6
 80130d0:	4639      	mov	r1, r7
 80130d2:	f04f 0801 	mov.w	r8, #1
 80130d6:	f7ed fd17 	bl	8000b08 <__aeabi_dcmple>
 80130da:	b900      	cbnz	r0, 80130de <GUI_Touch_Processing+0x2556>
 80130dc:	4680      	mov	r8, r0
 80130de:	fa5f f388 	uxtb.w	r3, r8
 80130e2:	9303      	str	r3, [sp, #12]
 80130e4:	4620      	mov	r0, r4
 80130e6:	a37a      	add	r3, pc, #488	; (adr r3, 80132d0 <GUI_Touch_Processing+0x2748>)
 80130e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ec:	4629      	mov	r1, r5
 80130ee:	f04f 0801 	mov.w	r8, #1
 80130f2:	f7ed fd13 	bl	8000b1c <__aeabi_dcmpge>
 80130f6:	b900      	cbnz	r0, 80130fa <GUI_Touch_Processing+0x2572>
 80130f8:	4680      	mov	r8, r0
 80130fa:	a377      	add	r3, pc, #476	; (adr r3, 80132d8 <GUI_Touch_Processing+0x2750>)
 80130fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013100:	4620      	mov	r0, r4
 8013102:	4629      	mov	r1, r5
 8013104:	f04f 0901 	mov.w	r9, #1
 8013108:	f7ed fcfe 	bl	8000b08 <__aeabi_dcmple>
 801310c:	b900      	cbnz	r0, 8013110 <GUI_Touch_Processing+0x2588>
 801310e:	4681      	mov	r9, r0
 8013110:	9b00      	ldr	r3, [sp, #0]
 8013112:	ea08 0809 	and.w	r8, r8, r9
 8013116:	ea13 0f08 	tst.w	r3, r8
 801311a:	d006      	beq.n	801312a <GUI_Touch_Processing+0x25a2>
 801311c:	9b03      	ldr	r3, [sp, #12]
 801311e:	b123      	cbz	r3, 801312a <GUI_Touch_Processing+0x25a2>
					GUI_screen_state = GraphSet2_Screen;
 8013120:	230d      	movs	r3, #13
 8013122:	f88b 3000 	strb.w	r3, [fp]
 8013126:	f7fd bdbd 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 801312a:	a36d      	add	r3, pc, #436	; (adr r3, 80132e0 <GUI_Touch_Processing+0x2758>)
 801312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013130:	4620      	mov	r0, r4
 8013132:	4629      	mov	r1, r5
 8013134:	f04f 0801 	mov.w	r8, #1
 8013138:	f7ed fcf0 	bl	8000b1c <__aeabi_dcmpge>
 801313c:	b900      	cbnz	r0, 8013140 <GUI_Touch_Processing+0x25b8>
 801313e:	4680      	mov	r8, r0
 8013140:	a369      	add	r3, pc, #420	; (adr r3, 80132e8 <GUI_Touch_Processing+0x2760>)
 8013142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013146:	4620      	mov	r0, r4
 8013148:	4629      	mov	r1, r5
 801314a:	f04f 0901 	mov.w	r9, #1
 801314e:	f7ed fcdb 	bl	8000b08 <__aeabi_dcmple>
 8013152:	b900      	cbnz	r0, 8013156 <GUI_Touch_Processing+0x25ce>
 8013154:	4681      	mov	r9, r0
 8013156:	ea08 0809 	and.w	r8, r8, r9
 801315a:	a365      	add	r3, pc, #404	; (adr r3, 80132f0 <GUI_Touch_Processing+0x2768>)
 801315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013160:	4630      	mov	r0, r6
 8013162:	4639      	mov	r1, r7
 8013164:	fa5f f888 	uxtb.w	r8, r8
 8013168:	f04f 0901 	mov.w	r9, #1
 801316c:	f7ed fcd6 	bl	8000b1c <__aeabi_dcmpge>
 8013170:	b900      	cbnz	r0, 8013174 <GUI_Touch_Processing+0x25ec>
 8013172:	4681      	mov	r9, r0
 8013174:	a360      	add	r3, pc, #384	; (adr r3, 80132f8 <GUI_Touch_Processing+0x2770>)
 8013176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317a:	4630      	mov	r0, r6
 801317c:	4639      	mov	r1, r7
 801317e:	f04f 0a01 	mov.w	sl, #1
 8013182:	f7ed fcc1 	bl	8000b08 <__aeabi_dcmple>
 8013186:	b900      	cbnz	r0, 801318a <GUI_Touch_Processing+0x2602>
 8013188:	4682      	mov	sl, r0
 801318a:	ea09 090a 	and.w	r9, r9, sl
 801318e:	f019 0f01 	tst.w	r9, #1
 8013192:	d028      	beq.n	80131e6 <GUI_Touch_Processing+0x265e>
 8013194:	f1b8 0f00 	cmp.w	r8, #0
 8013198:	d025      	beq.n	80131e6 <GUI_Touch_Processing+0x265e>
					Mode_EL = !Mode_EL;
 801319a:	4c65      	ldr	r4, [pc, #404]	; (8013330 <GUI_Touch_Processing+0x27a8>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 801319c:	4b65      	ldr	r3, [pc, #404]	; (8013334 <GUI_Touch_Processing+0x27ac>)
					Mode_EL = !Mode_EL;
 801319e:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80131a0:	4865      	ldr	r0, [pc, #404]	; (8013338 <GUI_Touch_Processing+0x27b0>)
					Mode_EL = !Mode_EL;
 80131a2:	2a00      	cmp	r2, #0
 80131a4:	bf0c      	ite	eq
 80131a6:	2201      	moveq	r2, #1
 80131a8:	2200      	movne	r2, #0
 80131aa:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80131ac:	bf18      	it	ne
 80131ae:	4618      	movne	r0, r3
 80131b0:	4a62      	ldr	r2, [pc, #392]	; (801333c <GUI_Touch_Processing+0x27b4>)
 80131b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80131b6:	f7fb fd37 	bl	800ec28 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80131ba:	7822      	ldrb	r2, [r4, #0]
 80131bc:	4b60      	ldr	r3, [pc, #384]	; (8013340 <GUI_Touch_Processing+0x27b8>)
 80131be:	b982      	cbnz	r2, 80131e2 <GUI_Touch_Processing+0x265a>
 80131c0:	4a60      	ldr	r2, [pc, #384]	; (8013344 <GUI_Touch_Processing+0x27bc>)
 80131c2:	edd2 0a00 	vldr	s1, [r2]
 80131c6:	ed93 0a00 	vldr	s0, [r3]
 80131ca:	f008 fd71 	bl	801bcb0 <Rabs_calc_Factor2_Settings_change>
 80131ce:	4b5e      	ldr	r3, [pc, #376]	; (8013348 <GUI_Touch_Processing+0x27c0>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80131d0:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80131d2:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 80131d6:	21ca      	movs	r1, #202	; 0xca
 80131d8:	20b6      	movs	r0, #182	; 0xb6
 80131da:	f002 f903 	bl	80153e4 <GUI_Switch_ButtonActive>
 80131de:	f7fd bd61 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80131e2:	4a5a      	ldr	r2, [pc, #360]	; (801334c <GUI_Touch_Processing+0x27c4>)
 80131e4:	e7ed      	b.n	80131c2 <GUI_Touch_Processing+0x263a>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 80131e6:	a346      	add	r3, pc, #280	; (adr r3, 8013300 <GUI_Touch_Processing+0x2778>)
 80131e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ec:	4630      	mov	r0, r6
 80131ee:	4639      	mov	r1, r7
 80131f0:	f04f 0901 	mov.w	r9, #1
 80131f4:	f7ed fc92 	bl	8000b1c <__aeabi_dcmpge>
 80131f8:	b900      	cbnz	r0, 80131fc <GUI_Touch_Processing+0x2674>
 80131fa:	4681      	mov	r9, r0
 80131fc:	a342      	add	r3, pc, #264	; (adr r3, 8013308 <GUI_Touch_Processing+0x2780>)
 80131fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013202:	4630      	mov	r0, r6
 8013204:	4639      	mov	r1, r7
 8013206:	f04f 0a01 	mov.w	sl, #1
 801320a:	f7ed fc7d 	bl	8000b08 <__aeabi_dcmple>
 801320e:	b900      	cbnz	r0, 8013212 <GUI_Touch_Processing+0x268a>
 8013210:	4682      	mov	sl, r0
 8013212:	ea09 090a 	and.w	r9, r9, sl
 8013216:	f019 0f01 	tst.w	r9, #1
 801321a:	d011      	beq.n	8013240 <GUI_Touch_Processing+0x26b8>
 801321c:	f1b8 0f00 	cmp.w	r8, #0
 8013220:	d00e      	beq.n	8013240 <GUI_Touch_Processing+0x26b8>
					Bluetooth = !Bluetooth;
 8013222:	4b4b      	ldr	r3, [pc, #300]	; (8013350 <GUI_Touch_Processing+0x27c8>)
 8013224:	781a      	ldrb	r2, [r3, #0]
 8013226:	fab2 f282 	clz	r2, r2
 801322a:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 801322c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8013230:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8013232:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8013234:	f002 f87c 	bl	8015330 <GUI_Switch_Button>
					GUI_Up_Panel();
 8013238:	f7fc f96e 	bl	800f518 <GUI_Up_Panel>
 801323c:	f7fd bd32 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //PPF_Bands
 8013240:	2200      	movs	r2, #0
 8013242:	4b44      	ldr	r3, [pc, #272]	; (8013354 <GUI_Touch_Processing+0x27cc>)
 8013244:	4620      	mov	r0, r4
 8013246:	4629      	mov	r1, r5
 8013248:	f04f 0901 	mov.w	r9, #1
 801324c:	f7ed fc66 	bl	8000b1c <__aeabi_dcmpge>
 8013250:	b900      	cbnz	r0, 8013254 <GUI_Touch_Processing+0x26cc>
 8013252:	4681      	mov	r9, r0
 8013254:	a32e      	add	r3, pc, #184	; (adr r3, 8013310 <GUI_Touch_Processing+0x2788>)
 8013256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801325a:	4620      	mov	r0, r4
 801325c:	4629      	mov	r1, r5
 801325e:	f04f 0801 	mov.w	r8, #1
 8013262:	f7ed fc51 	bl	8000b08 <__aeabi_dcmple>
 8013266:	b900      	cbnz	r0, 801326a <GUI_Touch_Processing+0x26e2>
 8013268:	4680      	mov	r8, r0
 801326a:	a32b      	add	r3, pc, #172	; (adr r3, 8013318 <GUI_Touch_Processing+0x2790>)
 801326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013270:	4630      	mov	r0, r6
 8013272:	4639      	mov	r1, r7
 8013274:	ea09 0808 	and.w	r8, r9, r8
 8013278:	f04f 0901 	mov.w	r9, #1
 801327c:	f7ed fc4e 	bl	8000b1c <__aeabi_dcmpge>
 8013280:	b900      	cbnz	r0, 8013284 <GUI_Touch_Processing+0x26fc>
 8013282:	4681      	mov	r9, r0
 8013284:	ea08 0809 	and.w	r8, r8, r9
 8013288:	f018 0f01 	tst.w	r8, #1
 801328c:	d066      	beq.n	801335c <GUI_Touch_Processing+0x27d4>
 801328e:	a324      	add	r3, pc, #144	; (adr r3, 8013320 <GUI_Touch_Processing+0x2798>)
 8013290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013294:	4630      	mov	r0, r6
 8013296:	4639      	mov	r1, r7
 8013298:	f04f 0801 	mov.w	r8, #1
 801329c:	f7ed fc34 	bl	8000b08 <__aeabi_dcmple>
 80132a0:	b900      	cbnz	r0, 80132a4 <GUI_Touch_Processing+0x271c>
 80132a2:	4680      	mov	r8, r0
 80132a4:	f018 0fff 	tst.w	r8, #255	; 0xff
 80132a8:	d058      	beq.n	801335c <GUI_Touch_Processing+0x27d4>
					Graph_Field ^= PPF_Bands;
 80132aa:	4b2b      	ldr	r3, [pc, #172]	; (8013358 <GUI_Touch_Processing+0x27d0>)
 80132ac:	781a      	ldrb	r2, [r3, #0]
 80132ae:	f082 0201 	eor.w	r2, r2, #1
 80132b2:	701a      	strb	r2, [r3, #0]
					GUI_CheckBox(200, 327, Graph_Field&PPF_Bands);
 80132b4:	f240 1147 	movw	r1, #327	; 0x147
 80132b8:	f002 0201 	and.w	r2, r2, #1
 80132bc:	20c8      	movs	r0, #200	; 0xc8
 80132be:	f001 ffc7 	bl	8015250 <GUI_CheckBox>
 80132c2:	f7fd bcef 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 80132c6:	bf00      	nop
 80132c8:	99999999 	.word	0x99999999
 80132cc:	4091a399 	.word	0x4091a399
 80132d0:	33333333 	.word	0x33333333
 80132d4:	407aff33 	.word	0x407aff33
 80132d8:	66666666 	.word	0x66666666
 80132dc:	4081f866 	.word	0x4081f866
 80132e0:	cccccccd 	.word	0xcccccccd
 80132e4:	407e24cc 	.word	0x407e24cc
 80132e8:	33333333 	.word	0x33333333
 80132ec:	40838b33 	.word	0x40838b33
 80132f0:	66666666 	.word	0x66666666
 80132f4:	4080ba66 	.word	0x4080ba66
 80132f8:	33333333 	.word	0x33333333
 80132fc:	40853333 	.word	0x40853333
 8013300:	99999999 	.word	0x99999999
 8013304:	40863199 	.word	0x40863199
 8013308:	66666666 	.word	0x66666666
 801330c:	408aaa66 	.word	0x408aaa66
 8013310:	cccccccd 	.word	0xcccccccd
 8013314:	408508cc 	.word	0x408508cc
 8013318:	66666666 	.word	0x66666666
 801331c:	408b1466 	.word	0x408b1466
 8013320:	33333333 	.word	0x33333333
 8013324:	408f8d33 	.word	0x408f8d33
 8013328:	2000022a 	.word	0x2000022a
 801332c:	4093e000 	.word	0x4093e000
 8013330:	20000a48 	.word	0x20000a48
 8013334:	08101838 	.word	0x08101838
 8013338:	08100838 	.word	0x08100838
 801333c:	2004cbe0 	.word	0x2004cbe0
 8013340:	20004fcc 	.word	0x20004fcc
 8013344:	20004fc8 	.word	0x20004fc8
 8013348:	20004fd4 	.word	0x20004fd4
 801334c:	20004fc4 	.word	0x20004fc4
 8013350:	2008bcea 	.word	0x2008bcea
 8013354:	40809000 	.word	0x40809000
 8013358:	20004c72 	.word	0x20004c72
 801335c:	9b00      	ldr	r3, [sp, #0]
 801335e:	9a03      	ldr	r2, [sp, #12]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8013360:	4620      	mov	r0, r4
 8013362:	ea03 0802 	and.w	r8, r3, r2
 8013366:	4629      	mov	r1, r5
 8013368:	a3c7      	add	r3, pc, #796	; (adr r3, 8013688 <GUI_Touch_Processing+0x2b00>)
 801336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801336e:	f04f 0901 	mov.w	r9, #1
 8013372:	f7ed fbd3 	bl	8000b1c <__aeabi_dcmpge>
 8013376:	b900      	cbnz	r0, 801337a <GUI_Touch_Processing+0x27f2>
 8013378:	4681      	mov	r9, r0
 801337a:	a3d1      	add	r3, pc, #836	; (adr r3, 80136c0 <GUI_Touch_Processing+0x2b38>)
 801337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013380:	4620      	mov	r0, r4
 8013382:	4629      	mov	r1, r5
 8013384:	f04f 0a01 	mov.w	sl, #1
 8013388:	f7ed fbbe 	bl	8000b08 <__aeabi_dcmple>
 801338c:	b900      	cbnz	r0, 8013390 <GUI_Touch_Processing+0x2808>
 801338e:	4682      	mov	sl, r0
 8013390:	ea09 030a 	and.w	r3, r9, sl
 8013394:	07d9      	lsls	r1, r3, #31
 8013396:	d503      	bpl.n	80133a0 <GUI_Touch_Processing+0x2818>
 8013398:	f1b8 0f00 	cmp.w	r8, #0
 801339c:	f47e ac3f 	bne.w	8011c1e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 80133a0:	a3c9      	add	r3, pc, #804	; (adr r3, 80136c8 <GUI_Touch_Processing+0x2b40>)
 80133a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133a6:	4620      	mov	r0, r4
 80133a8:	4629      	mov	r1, r5
 80133aa:	f04f 0901 	mov.w	r9, #1
 80133ae:	f7ed fbb5 	bl	8000b1c <__aeabi_dcmpge>
 80133b2:	b900      	cbnz	r0, 80133b6 <GUI_Touch_Processing+0x282e>
 80133b4:	4681      	mov	r9, r0
 80133b6:	a3a2      	add	r3, pc, #648	; (adr r3, 8013640 <GUI_Touch_Processing+0x2ab8>)
 80133b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133bc:	4620      	mov	r0, r4
 80133be:	4629      	mov	r1, r5
 80133c0:	f04f 0a01 	mov.w	sl, #1
 80133c4:	f7ed fba0 	bl	8000b08 <__aeabi_dcmple>
 80133c8:	b900      	cbnz	r0, 80133cc <GUI_Touch_Processing+0x2844>
 80133ca:	4682      	mov	sl, r0
 80133cc:	ea09 030a 	and.w	r3, r9, sl
 80133d0:	07da      	lsls	r2, r3, #31
 80133d2:	d529      	bpl.n	8013428 <GUI_Touch_Processing+0x28a0>
 80133d4:	f1b8 0f00 	cmp.w	r8, #0
 80133d8:	d026      	beq.n	8013428 <GUI_Touch_Processing+0x28a0>
					WriteSDFLASH_t(sdfile_cnt);
 80133da:	4bb1      	ldr	r3, [pc, #708]	; (80136a0 <GUI_Touch_Processing+0x2b18>)
 80133dc:	2100      	movs	r1, #0
 80133de:	8818      	ldrh	r0, [r3, #0]
 80133e0:	f008 fcf0 	bl	801bdc4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80133e4:	4baf      	ldr	r3, [pc, #700]	; (80136a4 <GUI_Touch_Processing+0x2b1c>)
 80133e6:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80133e8:	1e5a      	subs	r2, r3, #1
 80133ea:	2a05      	cmp	r2, #5
 80133ec:	d804      	bhi.n	80133f8 <GUI_Touch_Processing+0x2870>
 80133ee:	e8df f002 	tbb	[pc, r2]
 80133f2:	0307      	.short	0x0307
 80133f4:	11160c03 	.word	0x11160c03
					GUI_screen_state = Prev_Inf_Screen;
 80133f8:	f88b 3000 	strb.w	r3, [fp]
 80133fc:	f7fd bc52 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8013400:	2301      	movs	r3, #1
 8013402:	f88b 3000 	strb.w	r3, [fp]
 8013406:	f7fd bc4d 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801340a:	2304      	movs	r3, #4
 801340c:	f88b 3000 	strb.w	r3, [fp]
 8013410:	f7fd bc48 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8013414:	2306      	movs	r3, #6
 8013416:	f88b 3000 	strb.w	r3, [fp]
 801341a:	f7fd bc43 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801341e:	2305      	movs	r3, #5
 8013420:	f88b 3000 	strb.w	r3, [fp]
 8013424:	f7fd bc3e 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8013428:	a385      	add	r3, pc, #532	; (adr r3, 8013640 <GUI_Touch_Processing+0x2ab8>)
 801342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801342e:	4620      	mov	r0, r4
 8013430:	4629      	mov	r1, r5
 8013432:	f04f 0901 	mov.w	r9, #1
 8013436:	f7ed fb71 	bl	8000b1c <__aeabi_dcmpge>
 801343a:	b900      	cbnz	r0, 801343e <GUI_Touch_Processing+0x28b6>
 801343c:	4681      	mov	r9, r0
 801343e:	a382      	add	r3, pc, #520	; (adr r3, 8013648 <GUI_Touch_Processing+0x2ac0>)
 8013440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013444:	4620      	mov	r0, r4
 8013446:	4629      	mov	r1, r5
 8013448:	f04f 0a01 	mov.w	sl, #1
 801344c:	f7ed fb5c 	bl	8000b08 <__aeabi_dcmple>
 8013450:	b900      	cbnz	r0, 8013454 <GUI_Touch_Processing+0x28cc>
 8013452:	4682      	mov	sl, r0
 8013454:	ea09 030a 	and.w	r3, r9, sl
 8013458:	07db      	lsls	r3, r3, #31
 801345a:	d503      	bpl.n	8013464 <GUI_Touch_Processing+0x28dc>
 801345c:	f1b8 0f00 	cmp.w	r8, #0
 8013460:	f47d ac60 	bne.w	8010d24 <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 8013464:	a37a      	add	r3, pc, #488	; (adr r3, 8013650 <GUI_Touch_Processing+0x2ac8>)
 8013466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346a:	4620      	mov	r0, r4
 801346c:	4629      	mov	r1, r5
 801346e:	f04f 0801 	mov.w	r8, #1
 8013472:	f7ed fb53 	bl	8000b1c <__aeabi_dcmpge>
 8013476:	b900      	cbnz	r0, 801347a <GUI_Touch_Processing+0x28f2>
 8013478:	4680      	mov	r8, r0
 801347a:	a377      	add	r3, pc, #476	; (adr r3, 8013658 <GUI_Touch_Processing+0x2ad0>)
 801347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013480:	4620      	mov	r0, r4
 8013482:	4629      	mov	r1, r5
 8013484:	f04f 0901 	mov.w	r9, #1
 8013488:	f7ed fb3e 	bl	8000b08 <__aeabi_dcmple>
 801348c:	b900      	cbnz	r0, 8013490 <GUI_Touch_Processing+0x2908>
 801348e:	4681      	mov	r9, r0
 8013490:	ea08 0409 	and.w	r4, r8, r9
 8013494:	2200      	movs	r2, #0
 8013496:	4b84      	ldr	r3, [pc, #528]	; (80136a8 <GUI_Touch_Processing+0x2b20>)
 8013498:	4630      	mov	r0, r6
 801349a:	4639      	mov	r1, r7
 801349c:	b2e4      	uxtb	r4, r4
 801349e:	f04f 0501 	mov.w	r5, #1
 80134a2:	f7ed fb3b 	bl	8000b1c <__aeabi_dcmpge>
 80134a6:	b900      	cbnz	r0, 80134aa <GUI_Touch_Processing+0x2922>
 80134a8:	4605      	mov	r5, r0
 80134aa:	a36d      	add	r3, pc, #436	; (adr r3, 8013660 <GUI_Touch_Processing+0x2ad8>)
 80134ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b0:	4630      	mov	r0, r6
 80134b2:	4639      	mov	r1, r7
 80134b4:	f04f 0801 	mov.w	r8, #1
 80134b8:	f7ed fb26 	bl	8000b08 <__aeabi_dcmple>
 80134bc:	b900      	cbnz	r0, 80134c0 <GUI_Touch_Processing+0x2938>
 80134be:	4680      	mov	r8, r0
 80134c0:	ea05 0508 	and.w	r5, r5, r8
 80134c4:	07e8      	lsls	r0, r5, #31
 80134c6:	d510      	bpl.n	80134ea <GUI_Touch_Processing+0x2962>
 80134c8:	b17c      	cbz	r4, 80134ea <GUI_Touch_Processing+0x2962>
					if (Language_status == Ru) Language_status=En;
 80134ca:	4b78      	ldr	r3, [pc, #480]	; (80136ac <GUI_Touch_Processing+0x2b24>)
 80134cc:	781b      	ldrb	r3, [r3, #0]
 80134ce:	b923      	cbnz	r3, 80134da <GUI_Touch_Processing+0x2952>
 80134d0:	4b76      	ldr	r3, [pc, #472]	; (80136ac <GUI_Touch_Processing+0x2b24>)
 80134d2:	2201      	movs	r2, #1
 80134d4:	701a      	strb	r2, [r3, #0]
 80134d6:	f7fd bbe5 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
					else if (Language_status == En) Language_status=Ru;
 80134da:	2b01      	cmp	r3, #1
 80134dc:	f47d abe2 	bne.w	8010ca4 <GUI_Touch_Processing+0x11c>
 80134e0:	4b72      	ldr	r3, [pc, #456]	; (80136ac <GUI_Touch_Processing+0x2b24>)
 80134e2:	2200      	movs	r2, #0
 80134e4:	701a      	strb	r2, [r3, #0]
 80134e6:	f7fd bbdd 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 80134ea:	a35f      	add	r3, pc, #380	; (adr r3, 8013668 <GUI_Touch_Processing+0x2ae0>)
 80134ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f0:	4630      	mov	r0, r6
 80134f2:	4639      	mov	r1, r7
 80134f4:	f04f 0501 	mov.w	r5, #1
 80134f8:	f7ed fb10 	bl	8000b1c <__aeabi_dcmpge>
 80134fc:	b900      	cbnz	r0, 8013500 <GUI_Touch_Processing+0x2978>
 80134fe:	4605      	mov	r5, r0
 8013500:	a35b      	add	r3, pc, #364	; (adr r3, 8013670 <GUI_Touch_Processing+0x2ae8>)
 8013502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013506:	4630      	mov	r0, r6
 8013508:	4639      	mov	r1, r7
 801350a:	f04f 0801 	mov.w	r8, #1
 801350e:	f7ed fafb 	bl	8000b08 <__aeabi_dcmple>
 8013512:	b900      	cbnz	r0, 8013516 <GUI_Touch_Processing+0x298e>
 8013514:	4680      	mov	r8, r0
 8013516:	ea05 0508 	and.w	r5, r5, r8
 801351a:	07e9      	lsls	r1, r5, #31
 801351c:	f57d abc2 	bpl.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8013520:	2c00      	cmp	r4, #0
 8013522:	f43d abbf 	beq.w	8010ca4 <GUI_Touch_Processing+0x11c>
					GUI_screen_state = Information_Screen;
 8013526:	2311      	movs	r3, #17
 8013528:	f88b 3000 	strb.w	r3, [fp]
 801352c:	f7fd bbba 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 8013530:	4b5f      	ldr	r3, [pc, #380]	; (80136b0 <GUI_Touch_Processing+0x2b28>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8013532:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8013536:	220d      	movs	r2, #13
 8013538:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 801353a:	f7ed f803 	bl	8000544 <__aeabi_i2d>
 801353e:	4604      	mov	r4, r0
 8013540:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8013544:	460d      	mov	r5, r1
 8013546:	f7ec fffd 	bl	8000544 <__aeabi_i2d>
 801354a:	a34b      	add	r3, pc, #300	; (adr r3, 8013678 <GUI_Touch_Processing+0x2af0>)
 801354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013550:	e9cd 0100 	strd	r0, r1, [sp]
 8013554:	f04f 0801 	mov.w	r8, #1
 8013558:	f7ed fae0 	bl	8000b1c <__aeabi_dcmpge>
 801355c:	b900      	cbnz	r0, 8013560 <GUI_Touch_Processing+0x29d8>
 801355e:	4680      	mov	r8, r0
 8013560:	2200      	movs	r2, #0
 8013562:	4b54      	ldr	r3, [pc, #336]	; (80136b4 <GUI_Touch_Processing+0x2b2c>)
 8013564:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013568:	fa5f f888 	uxtb.w	r8, r8
 801356c:	f04f 0701 	mov.w	r7, #1
 8013570:	f7ed faca 	bl	8000b08 <__aeabi_dcmple>
 8013574:	b900      	cbnz	r0, 8013578 <GUI_Touch_Processing+0x29f0>
 8013576:	4607      	mov	r7, r0
 8013578:	a341      	add	r3, pc, #260	; (adr r3, 8013680 <GUI_Touch_Processing+0x2af8>)
 801357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801357e:	4620      	mov	r0, r4
 8013580:	4629      	mov	r1, r5
 8013582:	b2ff      	uxtb	r7, r7
 8013584:	f04f 0601 	mov.w	r6, #1
 8013588:	f7ed fac8 	bl	8000b1c <__aeabi_dcmpge>
 801358c:	b900      	cbnz	r0, 8013590 <GUI_Touch_Processing+0x2a08>
 801358e:	4606      	mov	r6, r0
 8013590:	a33d      	add	r3, pc, #244	; (adr r3, 8013688 <GUI_Touch_Processing+0x2b00>)
 8013592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013596:	4620      	mov	r0, r4
 8013598:	4629      	mov	r1, r5
 801359a:	f04f 0901 	mov.w	r9, #1
 801359e:	f7ed fab3 	bl	8000b08 <__aeabi_dcmple>
 80135a2:	b900      	cbnz	r0, 80135a6 <GUI_Touch_Processing+0x2a1e>
 80135a4:	4681      	mov	r9, r0
 80135a6:	ea06 0609 	and.w	r6, r6, r9
 80135aa:	ea18 0f06 	tst.w	r8, r6
 80135ae:	d005      	beq.n	80135bc <GUI_Touch_Processing+0x2a34>
 80135b0:	b127      	cbz	r7, 80135bc <GUI_Touch_Processing+0x2a34>
					GUI_screen_state = GraphSet1_Screen;
 80135b2:	230c      	movs	r3, #12
 80135b4:	f88b 3000 	strb.w	r3, [fp]
 80135b8:	f7fd bb74 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //PPF_Bands
 80135bc:	2200      	movs	r2, #0
 80135be:	4b3e      	ldr	r3, [pc, #248]	; (80136b8 <GUI_Touch_Processing+0x2b30>)
 80135c0:	4620      	mov	r0, r4
 80135c2:	4629      	mov	r1, r5
 80135c4:	f04f 0601 	mov.w	r6, #1
 80135c8:	f7ed faa8 	bl	8000b1c <__aeabi_dcmpge>
 80135cc:	b900      	cbnz	r0, 80135d0 <GUI_Touch_Processing+0x2a48>
 80135ce:	4606      	mov	r6, r0
 80135d0:	a32f      	add	r3, pc, #188	; (adr r3, 8013690 <GUI_Touch_Processing+0x2b08>)
 80135d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d6:	4620      	mov	r0, r4
 80135d8:	4629      	mov	r1, r5
 80135da:	f04f 0901 	mov.w	r9, #1
 80135de:	f7ed fa93 	bl	8000b08 <__aeabi_dcmple>
 80135e2:	b900      	cbnz	r0, 80135e6 <GUI_Touch_Processing+0x2a5e>
 80135e4:	4681      	mov	r9, r0
 80135e6:	ea06 0609 	and.w	r6, r6, r9
 80135ea:	a32b      	add	r3, pc, #172	; (adr r3, 8013698 <GUI_Touch_Processing+0x2b10>)
 80135ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80135f4:	b2f6      	uxtb	r6, r6
 80135f6:	f04f 0901 	mov.w	r9, #1
 80135fa:	f7ed fa8f 	bl	8000b1c <__aeabi_dcmpge>
 80135fe:	b900      	cbnz	r0, 8013602 <GUI_Touch_Processing+0x2a7a>
 8013600:	4681      	mov	r9, r0
 8013602:	a319      	add	r3, pc, #100	; (adr r3, 8013668 <GUI_Touch_Processing+0x2ae0>)
 8013604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013608:	e9dd 0100 	ldrd	r0, r1, [sp]
 801360c:	f04f 0a01 	mov.w	sl, #1
 8013610:	f7ed fa7a 	bl	8000b08 <__aeabi_dcmple>
 8013614:	b900      	cbnz	r0, 8013618 <GUI_Touch_Processing+0x2a90>
 8013616:	4682      	mov	sl, r0
 8013618:	ea09 090a 	and.w	r9, r9, sl
 801361c:	f019 0f01 	tst.w	r9, #1
 8013620:	d056      	beq.n	80136d0 <GUI_Touch_Processing+0x2b48>
 8013622:	2e00      	cmp	r6, #0
 8013624:	d054      	beq.n	80136d0 <GUI_Touch_Processing+0x2b48>
					Graph_Field ^= EbEr_graph;
 8013626:	4b25      	ldr	r3, [pc, #148]	; (80136bc <GUI_Touch_Processing+0x2b34>)
 8013628:	781a      	ldrb	r2, [r3, #0]
 801362a:	f082 0202 	eor.w	r2, r2, #2
 801362e:	701a      	strb	r2, [r3, #0]
					GUI_CheckBox(200, 70, Graph_Field&EbEr_graph);
 8013630:	2146      	movs	r1, #70	; 0x46
 8013632:	f002 0202 	and.w	r2, r2, #2
 8013636:	20c8      	movs	r0, #200	; 0xc8
 8013638:	f001 fe0a 	bl	8015250 <GUI_CheckBox>
 801363c:	f7fd bb32 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8013640:	00000000 	.word	0x00000000
 8013644:	40623800 	.word	0x40623800
 8013648:	99999999 	.word	0x99999999
 801364c:	40720d99 	.word	0x40720d99
 8013650:	33333333 	.word	0x33333333
 8013654:	40353333 	.word	0x40353333
 8013658:	00000000 	.word	0x00000000
 801365c:	4084b400 	.word	0x4084b400
 8013660:	00000000 	.word	0x00000000
 8013664:	4073e000 	.word	0x4073e000
 8013668:	99999999 	.word	0x99999999
 801366c:	40748999 	.word	0x40748999
 8013670:	99999999 	.word	0x99999999
 8013674:	407cd199 	.word	0x407cd199
 8013678:	99999999 	.word	0x99999999
 801367c:	4091a399 	.word	0x4091a399
 8013680:	33333333 	.word	0x33333333
 8013684:	407aff33 	.word	0x407aff33
 8013688:	66666666 	.word	0x66666666
 801368c:	4081f866 	.word	0x4081f866
 8013690:	cccccccd 	.word	0xcccccccd
 8013694:	408508cc 	.word	0x408508cc
 8013698:	00000000 	.word	0x00000000
 801369c:	40673000 	.word	0x40673000
 80136a0:	20004c9e 	.word	0x20004c9e
 80136a4:	2008bce5 	.word	0x2008bce5
 80136a8:	406a8000 	.word	0x406a8000
 80136ac:	20004c73 	.word	0x20004c73
 80136b0:	2000022a 	.word	0x2000022a
 80136b4:	4093e000 	.word	0x4093e000
 80136b8:	40809000 	.word	0x40809000
 80136bc:	20004c72 	.word	0x20004c72
 80136c0:	33333333 	.word	0x33333333
 80136c4:	40867133 	.word	0x40867133
 80136c8:	33333333 	.word	0x33333333
 80136cc:	40053333 	.word	0x40053333
				if(Touch_x >= 200*TS_Callib & Touch_x <= (200+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //PPF_Bands
 80136d0:	a3d1      	add	r3, pc, #836	; (adr r3, 8013a18 <GUI_Touch_Processing+0x2e90>)
 80136d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136da:	f04f 0901 	mov.w	r9, #1
 80136de:	f7ed fa1d 	bl	8000b1c <__aeabi_dcmpge>
 80136e2:	b900      	cbnz	r0, 80136e6 <GUI_Touch_Processing+0x2b5e>
 80136e4:	4681      	mov	r9, r0
 80136e6:	a3ce      	add	r3, pc, #824	; (adr r3, 8013a20 <GUI_Touch_Processing+0x2e98>)
 80136e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80136f0:	f04f 0a01 	mov.w	sl, #1
 80136f4:	f7ed fa08 	bl	8000b08 <__aeabi_dcmple>
 80136f8:	b900      	cbnz	r0, 80136fc <GUI_Touch_Processing+0x2b74>
 80136fa:	4682      	mov	sl, r0
 80136fc:	ea09 090a 	and.w	r9, r9, sl
 8013700:	f019 0f01 	tst.w	r9, #1
 8013704:	d00d      	beq.n	8013722 <GUI_Touch_Processing+0x2b9a>
 8013706:	b166      	cbz	r6, 8013722 <GUI_Touch_Processing+0x2b9a>
					Graph_Field ^= V_lambda;
 8013708:	4bb5      	ldr	r3, [pc, #724]	; (80139e0 <GUI_Touch_Processing+0x2e58>)
 801370a:	781a      	ldrb	r2, [r3, #0]
 801370c:	f082 0204 	eor.w	r2, r2, #4
 8013710:	701a      	strb	r2, [r3, #0]
					GUI_CheckBox(200, 133, Graph_Field&V_lambda);
 8013712:	2185      	movs	r1, #133	; 0x85
 8013714:	f002 0204 	and.w	r2, r2, #4
 8013718:	20c8      	movs	r0, #200	; 0xc8
 801371a:	f001 fd99 	bl	8015250 <GUI_CheckBox>
 801371e:	f7fd bac1 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8013722:	a397      	add	r3, pc, #604	; (adr r3, 8013980 <GUI_Touch_Processing+0x2df8>)
 8013724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013728:	4620      	mov	r0, r4
 801372a:	4629      	mov	r1, r5
 801372c:	ea08 0607 	and.w	r6, r8, r7
 8013730:	f04f 0901 	mov.w	r9, #1
 8013734:	f7ed f9f2 	bl	8000b1c <__aeabi_dcmpge>
 8013738:	b900      	cbnz	r0, 801373c <GUI_Touch_Processing+0x2bb4>
 801373a:	4681      	mov	r9, r0
 801373c:	a392      	add	r3, pc, #584	; (adr r3, 8013988 <GUI_Touch_Processing+0x2e00>)
 801373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013742:	4620      	mov	r0, r4
 8013744:	4629      	mov	r1, r5
 8013746:	f04f 0a01 	mov.w	sl, #1
 801374a:	f7ed f9dd 	bl	8000b08 <__aeabi_dcmple>
 801374e:	b900      	cbnz	r0, 8013752 <GUI_Touch_Processing+0x2bca>
 8013750:	4682      	mov	sl, r0
 8013752:	ea09 030a 	and.w	r3, r9, sl
 8013756:	07da      	lsls	r2, r3, #31
 8013758:	d502      	bpl.n	8013760 <GUI_Touch_Processing+0x2bd8>
 801375a:	2e00      	cmp	r6, #0
 801375c:	f47e aa5f 	bne.w	8011c1e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8013760:	a38b      	add	r3, pc, #556	; (adr r3, 8013990 <GUI_Touch_Processing+0x2e08>)
 8013762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013766:	4620      	mov	r0, r4
 8013768:	4629      	mov	r1, r5
 801376a:	f04f 0901 	mov.w	r9, #1
 801376e:	f7ed f9d5 	bl	8000b1c <__aeabi_dcmpge>
 8013772:	b900      	cbnz	r0, 8013776 <GUI_Touch_Processing+0x2bee>
 8013774:	4681      	mov	r9, r0
 8013776:	a388      	add	r3, pc, #544	; (adr r3, 8013998 <GUI_Touch_Processing+0x2e10>)
 8013778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377c:	4620      	mov	r0, r4
 801377e:	4629      	mov	r1, r5
 8013780:	f04f 0a01 	mov.w	sl, #1
 8013784:	f7ed f9c0 	bl	8000b08 <__aeabi_dcmple>
 8013788:	b900      	cbnz	r0, 801378c <GUI_Touch_Processing+0x2c04>
 801378a:	4682      	mov	sl, r0
 801378c:	ea09 030a 	and.w	r3, r9, sl
 8013790:	07db      	lsls	r3, r3, #31
 8013792:	f140 842f 	bpl.w	8013ff4 <GUI_Touch_Processing+0x346c>
 8013796:	2e00      	cmp	r6, #0
 8013798:	f000 842c 	beq.w	8013ff4 <GUI_Touch_Processing+0x346c>
					WriteSDFLASH_t(sdfile_cnt);
 801379c:	4b91      	ldr	r3, [pc, #580]	; (80139e4 <GUI_Touch_Processing+0x2e5c>)
 801379e:	2100      	movs	r1, #0
 80137a0:	8818      	ldrh	r0, [r3, #0]
 80137a2:	f008 fb0f 	bl	801bdc4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 80137a6:	4b90      	ldr	r3, [pc, #576]	; (80139e8 <GUI_Touch_Processing+0x2e60>)
 80137a8:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 80137aa:	1e5a      	subs	r2, r3, #1
 80137ac:	2a05      	cmp	r2, #5
 80137ae:	d804      	bhi.n	80137ba <GUI_Touch_Processing+0x2c32>
 80137b0:	e8df f002 	tbb	[pc, r2]
 80137b4:	0c030307 	.word	0x0c030307
 80137b8:	1116      	.short	0x1116
					GUI_screen_state = Prev_Inf_Screen;
 80137ba:	f88b 3000 	strb.w	r3, [fp]
 80137be:	f7fd ba71 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 80137c2:	2301      	movs	r3, #1
 80137c4:	f88b 3000 	strb.w	r3, [fp]
 80137c8:	f7fd ba6c 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 80137cc:	2304      	movs	r3, #4
 80137ce:	f88b 3000 	strb.w	r3, [fp]
 80137d2:	f7fd ba67 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 80137d6:	2306      	movs	r3, #6
 80137d8:	f88b 3000 	strb.w	r3, [fp]
 80137dc:	f7fd ba62 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 80137e0:	2305      	movs	r3, #5
 80137e2:	f88b 3000 	strb.w	r3, [fp]
 80137e6:	f7fd ba5d 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 80137ea:	4b80      	ldr	r3, [pc, #512]	; (80139ec <GUI_Touch_Processing+0x2e64>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 80137ec:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 80137f0:	220e      	movs	r2, #14
 80137f2:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 80137f4:	f7ec fea6 	bl	8000544 <__aeabi_i2d>
 80137f8:	4604      	mov	r4, r0
 80137fa:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80137fe:	460d      	mov	r5, r1
 8013800:	f7ec fea0 	bl	8000544 <__aeabi_i2d>
 8013804:	a366      	add	r3, pc, #408	; (adr r3, 80139a0 <GUI_Touch_Processing+0x2e18>)
 8013806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801380a:	e9cd 0100 	strd	r0, r1, [sp]
 801380e:	f04f 0a01 	mov.w	sl, #1
 8013812:	f7ed f983 	bl	8000b1c <__aeabi_dcmpge>
 8013816:	b900      	cbnz	r0, 801381a <GUI_Touch_Processing+0x2c92>
 8013818:	4682      	mov	sl, r0
 801381a:	2200      	movs	r2, #0
 801381c:	4b74      	ldr	r3, [pc, #464]	; (80139f0 <GUI_Touch_Processing+0x2e68>)
 801381e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013822:	fa5f fa8a 	uxtb.w	sl, sl
 8013826:	f04f 0601 	mov.w	r6, #1
 801382a:	f7ed f96d 	bl	8000b08 <__aeabi_dcmple>
 801382e:	b900      	cbnz	r0, 8013832 <GUI_Touch_Processing+0x2caa>
 8013830:	4606      	mov	r6, r0
 8013832:	b2f3      	uxtb	r3, r6
 8013834:	9303      	str	r3, [sp, #12]
 8013836:	4620      	mov	r0, r4
 8013838:	a35b      	add	r3, pc, #364	; (adr r3, 80139a8 <GUI_Touch_Processing+0x2e20>)
 801383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801383e:	4629      	mov	r1, r5
 8013840:	f04f 0601 	mov.w	r6, #1
 8013844:	f7ed f96a 	bl	8000b1c <__aeabi_dcmpge>
 8013848:	b900      	cbnz	r0, 801384c <GUI_Touch_Processing+0x2cc4>
 801384a:	4606      	mov	r6, r0
 801384c:	a34c      	add	r3, pc, #304	; (adr r3, 8013980 <GUI_Touch_Processing+0x2df8>)
 801384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013852:	4620      	mov	r0, r4
 8013854:	4629      	mov	r1, r5
 8013856:	f04f 0701 	mov.w	r7, #1
 801385a:	f7ed f955 	bl	8000b08 <__aeabi_dcmple>
 801385e:	b900      	cbnz	r0, 8013862 <GUI_Touch_Processing+0x2cda>
 8013860:	4607      	mov	r7, r0
 8013862:	403e      	ands	r6, r7
 8013864:	ea1a 0f06 	tst.w	sl, r6
 8013868:	d006      	beq.n	8013878 <GUI_Touch_Processing+0x2cf0>
 801386a:	9b03      	ldr	r3, [sp, #12]
 801386c:	b123      	cbz	r3, 8013878 <GUI_Touch_Processing+0x2cf0>
					GUI_screen_state = ColorSet2_Screen;
 801386e:	230f      	movs	r3, #15
 8013870:	f88b 3000 	strb.w	r3, [fp]
 8013874:	f7fd ba16 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 8013878:	a34d      	add	r3, pc, #308	; (adr r3, 80139b0 <GUI_Touch_Processing+0x2e28>)
 801387a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801387e:	4620      	mov	r0, r4
 8013880:	4629      	mov	r1, r5
 8013882:	f04f 0601 	mov.w	r6, #1
 8013886:	f7ed f949 	bl	8000b1c <__aeabi_dcmpge>
 801388a:	b900      	cbnz	r0, 801388e <GUI_Touch_Processing+0x2d06>
 801388c:	4606      	mov	r6, r0
 801388e:	a34a      	add	r3, pc, #296	; (adr r3, 80139b8 <GUI_Touch_Processing+0x2e30>)
 8013890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013894:	4620      	mov	r0, r4
 8013896:	4629      	mov	r1, r5
 8013898:	f04f 0701 	mov.w	r7, #1
 801389c:	f7ed f934 	bl	8000b08 <__aeabi_dcmple>
 80138a0:	b900      	cbnz	r0, 80138a4 <GUI_Touch_Processing+0x2d1c>
 80138a2:	4607      	mov	r7, r0
 80138a4:	403e      	ands	r6, r7
 80138a6:	a346      	add	r3, pc, #280	; (adr r3, 80139c0 <GUI_Touch_Processing+0x2e38>)
 80138a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138b0:	b2f6      	uxtb	r6, r6
 80138b2:	f04f 0701 	mov.w	r7, #1
 80138b6:	f7ed f931 	bl	8000b1c <__aeabi_dcmpge>
 80138ba:	b900      	cbnz	r0, 80138be <GUI_Touch_Processing+0x2d36>
 80138bc:	4607      	mov	r7, r0
 80138be:	a342      	add	r3, pc, #264	; (adr r3, 80139c8 <GUI_Touch_Processing+0x2e40>)
 80138c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80138c8:	f04f 0801 	mov.w	r8, #1
 80138cc:	f7ed f91c 	bl	8000b08 <__aeabi_dcmple>
 80138d0:	b900      	cbnz	r0, 80138d4 <GUI_Touch_Processing+0x2d4c>
 80138d2:	4680      	mov	r8, r0
 80138d4:	ea07 0708 	and.w	r7, r7, r8
 80138d8:	07ff      	lsls	r7, r7, #31
 80138da:	d526      	bpl.n	801392a <GUI_Touch_Processing+0x2da2>
 80138dc:	b32e      	cbz	r6, 801392a <GUI_Touch_Processing+0x2da2>
					Mode_EL = !Mode_EL;
 80138de:	4c45      	ldr	r4, [pc, #276]	; (80139f4 <GUI_Touch_Processing+0x2e6c>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80138e0:	4b45      	ldr	r3, [pc, #276]	; (80139f8 <GUI_Touch_Processing+0x2e70>)
					Mode_EL = !Mode_EL;
 80138e2:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80138e4:	4845      	ldr	r0, [pc, #276]	; (80139fc <GUI_Touch_Processing+0x2e74>)
					Mode_EL = !Mode_EL;
 80138e6:	2a00      	cmp	r2, #0
 80138e8:	bf0c      	ite	eq
 80138ea:	2201      	moveq	r2, #1
 80138ec:	2200      	movne	r2, #0
 80138ee:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80138f0:	bf18      	it	ne
 80138f2:	4618      	movne	r0, r3
 80138f4:	4a42      	ldr	r2, [pc, #264]	; (8013a00 <GUI_Touch_Processing+0x2e78>)
 80138f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80138fa:	f7fb f995 	bl	800ec28 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80138fe:	7822      	ldrb	r2, [r4, #0]
 8013900:	4b40      	ldr	r3, [pc, #256]	; (8013a04 <GUI_Touch_Processing+0x2e7c>)
 8013902:	b982      	cbnz	r2, 8013926 <GUI_Touch_Processing+0x2d9e>
 8013904:	4a40      	ldr	r2, [pc, #256]	; (8013a08 <GUI_Touch_Processing+0x2e80>)
 8013906:	edd2 0a00 	vldr	s1, [r2]
 801390a:	ed93 0a00 	vldr	s0, [r3]
 801390e:	f008 f9cf 	bl	801bcb0 <Rabs_calc_Factor2_Settings_change>
 8013912:	4b3e      	ldr	r3, [pc, #248]	; (8013a0c <GUI_Touch_Processing+0x2e84>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8013914:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8013916:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 801391a:	21ca      	movs	r1, #202	; 0xca
 801391c:	20b6      	movs	r0, #182	; 0xb6
 801391e:	f001 fd61 	bl	80153e4 <GUI_Switch_ButtonActive>
 8013922:	f7fd b9bf 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8013926:	4a3a      	ldr	r2, [pc, #232]	; (8013a10 <GUI_Touch_Processing+0x2e88>)
 8013928:	e7ed      	b.n	8013906 <GUI_Touch_Processing+0x2d7e>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 801392a:	a329      	add	r3, pc, #164	; (adr r3, 80139d0 <GUI_Touch_Processing+0x2e48>)
 801392c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013930:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013934:	f04f 0701 	mov.w	r7, #1
 8013938:	f7ed f8f0 	bl	8000b1c <__aeabi_dcmpge>
 801393c:	b900      	cbnz	r0, 8013940 <GUI_Touch_Processing+0x2db8>
 801393e:	4607      	mov	r7, r0
 8013940:	a325      	add	r3, pc, #148	; (adr r3, 80139d8 <GUI_Touch_Processing+0x2e50>)
 8013942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013946:	e9dd 0100 	ldrd	r0, r1, [sp]
 801394a:	f04f 0801 	mov.w	r8, #1
 801394e:	f7ed f8db 	bl	8000b08 <__aeabi_dcmple>
 8013952:	b900      	cbnz	r0, 8013956 <GUI_Touch_Processing+0x2dce>
 8013954:	4680      	mov	r8, r0
 8013956:	ea07 0708 	and.w	r7, r7, r8
 801395a:	07f8      	lsls	r0, r7, #31
 801395c:	d564      	bpl.n	8013a28 <GUI_Touch_Processing+0x2ea0>
 801395e:	2e00      	cmp	r6, #0
 8013960:	d062      	beq.n	8013a28 <GUI_Touch_Processing+0x2ea0>
					Bluetooth = !Bluetooth;
 8013962:	4b2c      	ldr	r3, [pc, #176]	; (8013a14 <GUI_Touch_Processing+0x2e8c>)
 8013964:	781a      	ldrb	r2, [r3, #0]
 8013966:	fab2 f282 	clz	r2, r2
 801396a:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 801396c:	f44f 7186 	mov.w	r1, #268	; 0x10c
 8013970:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8013972:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8013974:	f001 fcdc 	bl	8015330 <GUI_Switch_Button>
					GUI_Up_Panel();
 8013978:	f7fb fdce 	bl	800f518 <GUI_Up_Panel>
 801397c:	f7fd b992 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8013980:	66666666 	.word	0x66666666
 8013984:	4081f866 	.word	0x4081f866
 8013988:	33333333 	.word	0x33333333
 801398c:	40867133 	.word	0x40867133
 8013990:	33333333 	.word	0x33333333
 8013994:	40053333 	.word	0x40053333
 8013998:	00000000 	.word	0x00000000
 801399c:	40623800 	.word	0x40623800
 80139a0:	99999999 	.word	0x99999999
 80139a4:	4091a399 	.word	0x4091a399
 80139a8:	33333333 	.word	0x33333333
 80139ac:	407aff33 	.word	0x407aff33
 80139b0:	cccccccd 	.word	0xcccccccd
 80139b4:	407e24cc 	.word	0x407e24cc
 80139b8:	33333333 	.word	0x33333333
 80139bc:	40838b33 	.word	0x40838b33
 80139c0:	66666666 	.word	0x66666666
 80139c4:	4080ba66 	.word	0x4080ba66
 80139c8:	33333333 	.word	0x33333333
 80139cc:	40853333 	.word	0x40853333
 80139d0:	99999999 	.word	0x99999999
 80139d4:	40863199 	.word	0x40863199
 80139d8:	66666666 	.word	0x66666666
 80139dc:	408aaa66 	.word	0x408aaa66
 80139e0:	20004c72 	.word	0x20004c72
 80139e4:	20004c9e 	.word	0x20004c9e
 80139e8:	2008bce5 	.word	0x2008bce5
 80139ec:	2000022a 	.word	0x2000022a
 80139f0:	4093e000 	.word	0x4093e000
 80139f4:	20000a48 	.word	0x20000a48
 80139f8:	08101838 	.word	0x08101838
 80139fc:	08100838 	.word	0x08100838
 8013a00:	2004cbe0 	.word	0x2004cbe0
 8013a04:	20004fcc 	.word	0x20004fcc
 8013a08:	20004fc8 	.word	0x20004fc8
 8013a0c:	20004fd4 	.word	0x20004fd4
 8013a10:	20004fc4 	.word	0x20004fc4
 8013a14:	2008bcea 	.word	0x2008bcea
 8013a18:	33333333 	.word	0x33333333
 8013a1c:	40760733 	.word	0x40760733
 8013a20:	cccccccd 	.word	0xcccccccd
 8013a24:	407ef8cc 	.word	0x407ef8cc
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 8013a28:	a3db      	add	r3, pc, #876	; (adr r3, 8013d98 <GUI_Touch_Processing+0x3210>)
 8013a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a2e:	4620      	mov	r0, r4
 8013a30:	4629      	mov	r1, r5
 8013a32:	f04f 0701 	mov.w	r7, #1
 8013a36:	f7ed f871 	bl	8000b1c <__aeabi_dcmpge>
 8013a3a:	b900      	cbnz	r0, 8013a3e <GUI_Touch_Processing+0x2eb6>
 8013a3c:	4607      	mov	r7, r0
 8013a3e:	a3d8      	add	r3, pc, #864	; (adr r3, 8013da0 <GUI_Touch_Processing+0x3218>)
 8013a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a44:	4620      	mov	r0, r4
 8013a46:	4629      	mov	r1, r5
 8013a48:	f04f 0801 	mov.w	r8, #1
 8013a4c:	f7ed f85c 	bl	8000b08 <__aeabi_dcmple>
 8013a50:	b900      	cbnz	r0, 8013a54 <GUI_Touch_Processing+0x2ecc>
 8013a52:	4680      	mov	r8, r0
 8013a54:	ea07 0708 	and.w	r7, r7, r8
 8013a58:	a3d3      	add	r3, pc, #844	; (adr r3, 8013da8 <GUI_Touch_Processing+0x3220>)
 8013a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a62:	b2ff      	uxtb	r7, r7
 8013a64:	f04f 0801 	mov.w	r8, #1
 8013a68:	f7ed f858 	bl	8000b1c <__aeabi_dcmpge>
 8013a6c:	b900      	cbnz	r0, 8013a70 <GUI_Touch_Processing+0x2ee8>
 8013a6e:	4680      	mov	r8, r0
 8013a70:	a3cf      	add	r3, pc, #828	; (adr r3, 8013db0 <GUI_Touch_Processing+0x3228>)
 8013a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013a7a:	f04f 0901 	mov.w	r9, #1
 8013a7e:	f7ed f843 	bl	8000b08 <__aeabi_dcmple>
 8013a82:	b900      	cbnz	r0, 8013a86 <GUI_Touch_Processing+0x2efe>
 8013a84:	4681      	mov	r9, r0
 8013a86:	ea08 0809 	and.w	r8, r8, r9
 8013a8a:	f018 0f01 	tst.w	r8, #1
 8013a8e:	d002      	beq.n	8013a96 <GUI_Touch_Processing+0x2f0e>
 8013a90:	2f00      	cmp	r7, #0
 8013a92:	f47f ad48 	bne.w	8013526 <GUI_Touch_Processing+0x299e>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=327*TS_Callib & Touch_y <=(327+54)*TS_Callib) //Color_CIE_xy
 8013a96:	a3c8      	add	r3, pc, #800	; (adr r3, 8013db8 <GUI_Touch_Processing+0x3230>)
 8013a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013aa0:	f04f 0801 	mov.w	r8, #1
 8013aa4:	f7ed f83a 	bl	8000b1c <__aeabi_dcmpge>
 8013aa8:	b900      	cbnz	r0, 8013aac <GUI_Touch_Processing+0x2f24>
 8013aaa:	4680      	mov	r8, r0
 8013aac:	a3c4      	add	r3, pc, #784	; (adr r3, 8013dc0 <GUI_Touch_Processing+0x3238>)
 8013aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ab2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013ab6:	f04f 0901 	mov.w	r9, #1
 8013aba:	f7ed f825 	bl	8000b08 <__aeabi_dcmple>
 8013abe:	b900      	cbnz	r0, 8013ac2 <GUI_Touch_Processing+0x2f3a>
 8013ac0:	4681      	mov	r9, r0
 8013ac2:	ea08 0809 	and.w	r8, r8, r9
 8013ac6:	f018 0f01 	tst.w	r8, #1
 8013aca:	d00f      	beq.n	8013aec <GUI_Touch_Processing+0x2f64>
 8013acc:	b176      	cbz	r6, 8013aec <GUI_Touch_Processing+0x2f64>
					if(!(Color_Field&Color_CIE_xy))
 8013ace:	4aa4      	ldr	r2, [pc, #656]	; (8013d60 <GUI_Touch_Processing+0x31d8>)
 8013ad0:	7813      	ldrb	r3, [r2, #0]
 8013ad2:	07d9      	lsls	r1, r3, #31
 8013ad4:	f53d a8e6 	bmi.w	8010ca4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 327, Color_Field|=Color_CIE_xy, 0x01);
 8013ad8:	2301      	movs	r3, #1
 8013ada:	7013      	strb	r3, [r2, #0]
 8013adc:	f240 1147 	movw	r1, #327	; 0x147
 8013ae0:	461a      	mov	r2, r3
 8013ae2:	20c8      	movs	r0, #200	; 0xc8
 8013ae4:	f001 fbf5 	bl	80152d2 <GUI_RadioBox>
 8013ae8:	f7fd b8dc 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8013aec:	9b03      	ldr	r3, [sp, #12]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8013aee:	4620      	mov	r0, r4
 8013af0:	ea0a 0603 	and.w	r6, sl, r3
 8013af4:	4629      	mov	r1, r5
 8013af6:	a38a      	add	r3, pc, #552	; (adr r3, 8013d20 <GUI_Touch_Processing+0x3198>)
 8013af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013afc:	f04f 0801 	mov.w	r8, #1
 8013b00:	f7ed f80c 	bl	8000b1c <__aeabi_dcmpge>
 8013b04:	b900      	cbnz	r0, 8013b08 <GUI_Touch_Processing+0x2f80>
 8013b06:	4680      	mov	r8, r0
 8013b08:	a387      	add	r3, pc, #540	; (adr r3, 8013d28 <GUI_Touch_Processing+0x31a0>)
 8013b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b0e:	4620      	mov	r0, r4
 8013b10:	4629      	mov	r1, r5
 8013b12:	f04f 0901 	mov.w	r9, #1
 8013b16:	f7ec fff7 	bl	8000b08 <__aeabi_dcmple>
 8013b1a:	b900      	cbnz	r0, 8013b1e <GUI_Touch_Processing+0x2f96>
 8013b1c:	4681      	mov	r9, r0
 8013b1e:	ea08 0309 	and.w	r3, r8, r9
 8013b22:	07da      	lsls	r2, r3, #31
 8013b24:	d502      	bpl.n	8013b2c <GUI_Touch_Processing+0x2fa4>
 8013b26:	2e00      	cmp	r6, #0
 8013b28:	f47e a879 	bne.w	8011c1e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8013b2c:	a380      	add	r3, pc, #512	; (adr r3, 8013d30 <GUI_Touch_Processing+0x31a8>)
 8013b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b32:	4620      	mov	r0, r4
 8013b34:	4629      	mov	r1, r5
 8013b36:	f04f 0801 	mov.w	r8, #1
 8013b3a:	f7ec ffef 	bl	8000b1c <__aeabi_dcmpge>
 8013b3e:	b900      	cbnz	r0, 8013b42 <GUI_Touch_Processing+0x2fba>
 8013b40:	4680      	mov	r8, r0
 8013b42:	a37d      	add	r3, pc, #500	; (adr r3, 8013d38 <GUI_Touch_Processing+0x31b0>)
 8013b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b48:	4620      	mov	r0, r4
 8013b4a:	4629      	mov	r1, r5
 8013b4c:	f04f 0901 	mov.w	r9, #1
 8013b50:	f7ec ffda 	bl	8000b08 <__aeabi_dcmple>
 8013b54:	b900      	cbnz	r0, 8013b58 <GUI_Touch_Processing+0x2fd0>
 8013b56:	4681      	mov	r9, r0
 8013b58:	ea08 0309 	and.w	r3, r8, r9
 8013b5c:	07db      	lsls	r3, r3, #31
 8013b5e:	d55a      	bpl.n	8013c16 <GUI_Touch_Processing+0x308e>
 8013b60:	2e00      	cmp	r6, #0
 8013b62:	d058      	beq.n	8013c16 <GUI_Touch_Processing+0x308e>
					if(preColor_Field != Color_Field)
 8013b64:	4c7e      	ldr	r4, [pc, #504]	; (8013d60 <GUI_Touch_Processing+0x31d8>)
 8013b66:	497f      	ldr	r1, [pc, #508]	; (8013d64 <GUI_Touch_Processing+0x31dc>)
 8013b68:	7823      	ldrb	r3, [r4, #0]
 8013b6a:	7809      	ldrb	r1, [r1, #0]
 8013b6c:	4299      	cmp	r1, r3
 8013b6e:	d01f      	beq.n	8013bb0 <GUI_Touch_Processing+0x3028>
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8013b70:	07dd      	lsls	r5, r3, #31
 8013b72:	d52d      	bpl.n	8013bd0 <GUI_Touch_Processing+0x3048>
 8013b74:	4b7c      	ldr	r3, [pc, #496]	; (8013d68 <GUI_Touch_Processing+0x31e0>)
 8013b76:	487d      	ldr	r0, [pc, #500]	; (8013d6c <GUI_Touch_Processing+0x31e4>)
 8013b78:	781b      	ldrb	r3, [r3, #0]
 8013b7a:	f013 0f01 	tst.w	r3, #1
 8013b7e:	bf18      	it	ne
 8013b80:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8013b84:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8013b88:	f008 f862 	bl	801bc50 <Image_load>
						Locus.pData = (uint16_t *)bmp;
 8013b8c:	4b78      	ldr	r3, [pc, #480]	; (8013d70 <GUI_Touch_Processing+0x31e8>)
 8013b8e:	4a79      	ldr	r2, [pc, #484]	; (8013d74 <GUI_Touch_Processing+0x31ec>)
 8013b90:	605a      	str	r2, [r3, #4]
						Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8013b92:	7822      	ldrb	r2, [r4, #0]
 8013b94:	f002 0101 	and.w	r1, r2, #1
 8013b98:	2900      	cmp	r1, #0
 8013b9a:	bf0c      	ite	eq
 8013b9c:	21fa      	moveq	r1, #250	; 0xfa
 8013b9e:	21d8      	movne	r1, #216	; 0xd8
 8013ba0:	8019      	strh	r1, [r3, #0]
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8013ba2:	d123      	bne.n	8013bec <GUI_Touch_Processing+0x3064>
 8013ba4:	f012 0f04 	tst.w	r2, #4
 8013ba8:	bf0c      	ite	eq
 8013baa:	22fa      	moveq	r2, #250	; 0xfa
 8013bac:	22ea      	movne	r2, #234	; 0xea
 8013bae:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 8013bb0:	4b71      	ldr	r3, [pc, #452]	; (8013d78 <GUI_Touch_Processing+0x31f0>)
 8013bb2:	2100      	movs	r1, #0
 8013bb4:	8818      	ldrh	r0, [r3, #0]
 8013bb6:	f008 f905 	bl	801bdc4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8013bba:	4b70      	ldr	r3, [pc, #448]	; (8013d7c <GUI_Touch_Processing+0x31f4>)
 8013bbc:	781a      	ldrb	r2, [r3, #0]
 8013bbe:	4b70      	ldr	r3, [pc, #448]	; (8013d80 <GUI_Touch_Processing+0x31f8>)
					switch (Prev_Inf_Screen){
 8013bc0:	1e51      	subs	r1, r2, #1
 8013bc2:	2905      	cmp	r1, #5
 8013bc4:	d814      	bhi.n	8013bf0 <GUI_Touch_Processing+0x3068>
 8013bc6:	e8df f001 	tbb	[pc, r1]
 8013bca:	1316      	.short	0x1316
 8013bcc:	1e221a13 	.word	0x1e221a13
						Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8013bd0:	f003 0304 	and.w	r3, r3, #4
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	4b6b      	ldr	r3, [pc, #428]	; (8013d84 <GUI_Touch_Processing+0x31fc>)
 8013bd8:	486b      	ldr	r0, [pc, #428]	; (8013d88 <GUI_Touch_Processing+0x3200>)
 8013bda:	bf18      	it	ne
 8013bdc:	4618      	movne	r0, r3
 8013bde:	f24e 4384 	movw	r3, #58500	; 0xe484
 8013be2:	f24f 4124 	movw	r1, #62500	; 0xf424
 8013be6:	bf18      	it	ne
 8013be8:	4619      	movne	r1, r3
 8013bea:	e7cd      	b.n	8013b88 <GUI_Touch_Processing+0x3000>
						Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8013bec:	22fa      	movs	r2, #250	; 0xfa
 8013bee:	e7de      	b.n	8013bae <GUI_Touch_Processing+0x3026>
					GUI_screen_state = Prev_Inf_Screen;
 8013bf0:	701a      	strb	r2, [r3, #0]
 8013bf2:	f7fd b857 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8013bf6:	2201      	movs	r2, #1
 8013bf8:	701a      	strb	r2, [r3, #0]
 8013bfa:	f7fd b853 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8013bfe:	2204      	movs	r2, #4
 8013c00:	701a      	strb	r2, [r3, #0]
 8013c02:	f7fd b84f 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8013c06:	2206      	movs	r2, #6
 8013c08:	701a      	strb	r2, [r3, #0]
 8013c0a:	f7fd b84b 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8013c0e:	2205      	movs	r2, #5
 8013c10:	701a      	strb	r2, [r3, #0]
 8013c12:	f7fd b847 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8013c16:	a348      	add	r3, pc, #288	; (adr r3, 8013d38 <GUI_Touch_Processing+0x31b0>)
 8013c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c1c:	4620      	mov	r0, r4
 8013c1e:	4629      	mov	r1, r5
 8013c20:	f04f 0801 	mov.w	r8, #1
 8013c24:	f7ec ff7a 	bl	8000b1c <__aeabi_dcmpge>
 8013c28:	b900      	cbnz	r0, 8013c2c <GUI_Touch_Processing+0x30a4>
 8013c2a:	4680      	mov	r8, r0
 8013c2c:	a344      	add	r3, pc, #272	; (adr r3, 8013d40 <GUI_Touch_Processing+0x31b8>)
 8013c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c32:	4620      	mov	r0, r4
 8013c34:	4629      	mov	r1, r5
 8013c36:	f04f 0901 	mov.w	r9, #1
 8013c3a:	f7ec ff65 	bl	8000b08 <__aeabi_dcmple>
 8013c3e:	b900      	cbnz	r0, 8013c42 <GUI_Touch_Processing+0x30ba>
 8013c40:	4681      	mov	r9, r0
 8013c42:	ea08 0309 	and.w	r3, r8, r9
 8013c46:	07dc      	lsls	r4, r3, #31
 8013c48:	d502      	bpl.n	8013c50 <GUI_Touch_Processing+0x30c8>
 8013c4a:	2e00      	cmp	r6, #0
 8013c4c:	f47d a86a 	bne.w	8010d24 <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 8013c50:	2200      	movs	r2, #0
 8013c52:	4b4e      	ldr	r3, [pc, #312]	; (8013d8c <GUI_Touch_Processing+0x3204>)
 8013c54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c58:	f04f 0401 	mov.w	r4, #1
 8013c5c:	f7ec ff5e 	bl	8000b1c <__aeabi_dcmpge>
 8013c60:	b900      	cbnz	r0, 8013c64 <GUI_Touch_Processing+0x30dc>
 8013c62:	4604      	mov	r4, r0
 8013c64:	a338      	add	r3, pc, #224	; (adr r3, 8013d48 <GUI_Touch_Processing+0x31c0>)
 8013c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013c6e:	f04f 0501 	mov.w	r5, #1
 8013c72:	f7ec ff49 	bl	8000b08 <__aeabi_dcmple>
 8013c76:	b900      	cbnz	r0, 8013c7a <GUI_Touch_Processing+0x30f2>
 8013c78:	4605      	mov	r5, r0
 8013c7a:	402c      	ands	r4, r5
 8013c7c:	07e0      	lsls	r0, r4, #31
 8013c7e:	f57d a811 	bpl.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8013c82:	2f00      	cmp	r7, #0
 8013c84:	f47f ac21 	bne.w	80134ca <GUI_Touch_Processing+0x2942>
 8013c88:	f7fd b80c 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
					preGUI_screen_state = GUI_screen_state;
 8013c8c:	4b40      	ldr	r3, [pc, #256]	; (8013d90 <GUI_Touch_Processing+0x3208>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8013c8e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8013c92:	220f      	movs	r2, #15
 8013c94:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //next
 8013c96:	f7ec fc55 	bl	8000544 <__aeabi_i2d>
 8013c9a:	4604      	mov	r4, r0
 8013c9c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8013ca0:	460d      	mov	r5, r1
 8013ca2:	f7ec fc4f 	bl	8000544 <__aeabi_i2d>
 8013ca6:	a32a      	add	r3, pc, #168	; (adr r3, 8013d50 <GUI_Touch_Processing+0x31c8>)
 8013ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cac:	e9cd 0100 	strd	r0, r1, [sp]
 8013cb0:	f04f 0801 	mov.w	r8, #1
 8013cb4:	f7ec ff32 	bl	8000b1c <__aeabi_dcmpge>
 8013cb8:	b900      	cbnz	r0, 8013cbc <GUI_Touch_Processing+0x3134>
 8013cba:	4680      	mov	r8, r0
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	4b35      	ldr	r3, [pc, #212]	; (8013d94 <GUI_Touch_Processing+0x320c>)
 8013cc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013cc4:	fa5f f888 	uxtb.w	r8, r8
 8013cc8:	f04f 0701 	mov.w	r7, #1
 8013ccc:	f7ec ff1c 	bl	8000b08 <__aeabi_dcmple>
 8013cd0:	b900      	cbnz	r0, 8013cd4 <GUI_Touch_Processing+0x314c>
 8013cd2:	4607      	mov	r7, r0
 8013cd4:	a320      	add	r3, pc, #128	; (adr r3, 8013d58 <GUI_Touch_Processing+0x31d0>)
 8013cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cda:	4620      	mov	r0, r4
 8013cdc:	4629      	mov	r1, r5
 8013cde:	b2ff      	uxtb	r7, r7
 8013ce0:	f04f 0601 	mov.w	r6, #1
 8013ce4:	f7ec ff1a 	bl	8000b1c <__aeabi_dcmpge>
 8013ce8:	b900      	cbnz	r0, 8013cec <GUI_Touch_Processing+0x3164>
 8013cea:	4606      	mov	r6, r0
 8013cec:	a30c      	add	r3, pc, #48	; (adr r3, 8013d20 <GUI_Touch_Processing+0x3198>)
 8013cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cf2:	4620      	mov	r0, r4
 8013cf4:	4629      	mov	r1, r5
 8013cf6:	f04f 0901 	mov.w	r9, #1
 8013cfa:	f7ec ff05 	bl	8000b08 <__aeabi_dcmple>
 8013cfe:	b900      	cbnz	r0, 8013d02 <GUI_Touch_Processing+0x317a>
 8013d00:	4681      	mov	r9, r0
 8013d02:	ea06 0609 	and.w	r6, r6, r9
 8013d06:	ea18 0f06 	tst.w	r8, r6
 8013d0a:	d05d      	beq.n	8013dc8 <GUI_Touch_Processing+0x3240>
 8013d0c:	2f00      	cmp	r7, #0
 8013d0e:	d05b      	beq.n	8013dc8 <GUI_Touch_Processing+0x3240>
					GUI_screen_state = ColorSet1_Screen;
 8013d10:	230e      	movs	r3, #14
 8013d12:	f88b 3000 	strb.w	r3, [fp]
 8013d16:	f7fc bfc5 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8013d1a:	bf00      	nop
 8013d1c:	f3af 8000 	nop.w
 8013d20:	66666666 	.word	0x66666666
 8013d24:	4081f866 	.word	0x4081f866
 8013d28:	33333333 	.word	0x33333333
 8013d2c:	40867133 	.word	0x40867133
 8013d30:	33333333 	.word	0x33333333
 8013d34:	40053333 	.word	0x40053333
 8013d38:	00000000 	.word	0x00000000
 8013d3c:	40623800 	.word	0x40623800
 8013d40:	99999999 	.word	0x99999999
 8013d44:	40720d99 	.word	0x40720d99
 8013d48:	00000000 	.word	0x00000000
 8013d4c:	4073e000 	.word	0x4073e000
 8013d50:	99999999 	.word	0x99999999
 8013d54:	4091a399 	.word	0x4091a399
 8013d58:	33333333 	.word	0x33333333
 8013d5c:	407aff33 	.word	0x407aff33
 8013d60:	20004c6f 	.word	0x20004c6f
 8013d64:	20004c99 	.word	0x20004c99
 8013d68:	20004c74 	.word	0x20004c74
 8013d6c:	00051d00 	.word	0x00051d00
 8013d70:	2008c280 	.word	0x2008c280
 8013d74:	20050bee 	.word	0x20050bee
 8013d78:	20004c9e 	.word	0x20004c9e
 8013d7c:	2008bce5 	.word	0x2008bce5
 8013d80:	20004c71 	.word	0x20004c71
 8013d84:	0006ca00 	.word	0x0006ca00
 8013d88:	00018100 	.word	0x00018100
 8013d8c:	406a8000 	.word	0x406a8000
 8013d90:	2000022a 	.word	0x2000022a
 8013d94:	4093e000 	.word	0x4093e000
 8013d98:	33333333 	.word	0x33333333
 8013d9c:	40353333 	.word	0x40353333
 8013da0:	00000000 	.word	0x00000000
 8013da4:	4084b400 	.word	0x4084b400
 8013da8:	99999999 	.word	0x99999999
 8013dac:	40748999 	.word	0x40748999
 8013db0:	99999999 	.word	0x99999999
 8013db4:	407cd199 	.word	0x407cd199
 8013db8:	66666666 	.word	0x66666666
 8013dbc:	408b1466 	.word	0x408b1466
 8013dc0:	33333333 	.word	0x33333333
 8013dc4:	408f8d33 	.word	0x408f8d33
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=70*TS_Callib & Touch_y <=(70+54)*TS_Callib) //Color_CIE_Luv
 8013dc8:	a3d3      	add	r3, pc, #844	; (adr r3, 8014118 <GUI_Touch_Processing+0x3590>)
 8013dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dce:	4620      	mov	r0, r4
 8013dd0:	4629      	mov	r1, r5
 8013dd2:	f04f 0601 	mov.w	r6, #1
 8013dd6:	f7ec fea1 	bl	8000b1c <__aeabi_dcmpge>
 8013dda:	b900      	cbnz	r0, 8013dde <GUI_Touch_Processing+0x3256>
 8013ddc:	4606      	mov	r6, r0
 8013dde:	a3dc      	add	r3, pc, #880	; (adr r3, 8014150 <GUI_Touch_Processing+0x35c8>)
 8013de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de4:	4620      	mov	r0, r4
 8013de6:	4629      	mov	r1, r5
 8013de8:	f04f 0901 	mov.w	r9, #1
 8013dec:	f7ec fe8c 	bl	8000b08 <__aeabi_dcmple>
 8013df0:	b900      	cbnz	r0, 8013df4 <GUI_Touch_Processing+0x326c>
 8013df2:	4681      	mov	r9, r0
 8013df4:	ea06 0609 	and.w	r6, r6, r9
 8013df8:	a3d7      	add	r3, pc, #860	; (adr r3, 8014158 <GUI_Touch_Processing+0x35d0>)
 8013dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e02:	b2f6      	uxtb	r6, r6
 8013e04:	f04f 0901 	mov.w	r9, #1
 8013e08:	f7ec fe88 	bl	8000b1c <__aeabi_dcmpge>
 8013e0c:	b900      	cbnz	r0, 8013e10 <GUI_Touch_Processing+0x3288>
 8013e0e:	4681      	mov	r9, r0
 8013e10:	a3d3      	add	r3, pc, #844	; (adr r3, 8014160 <GUI_Touch_Processing+0x35d8>)
 8013e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e1a:	f04f 0a01 	mov.w	sl, #1
 8013e1e:	f7ec fe73 	bl	8000b08 <__aeabi_dcmple>
 8013e22:	b900      	cbnz	r0, 8013e26 <GUI_Touch_Processing+0x329e>
 8013e24:	4682      	mov	sl, r0
 8013e26:	ea09 090a 	and.w	r9, r9, sl
 8013e2a:	f019 0f01 	tst.w	r9, #1
 8013e2e:	d016      	beq.n	8013e5e <GUI_Touch_Processing+0x32d6>
 8013e30:	b1ae      	cbz	r6, 8013e5e <GUI_Touch_Processing+0x32d6>
					if(!(Color_Field&Color_CIE_Luv))
 8013e32:	4cbb      	ldr	r4, [pc, #748]	; (8014120 <GUI_Touch_Processing+0x3598>)
 8013e34:	7823      	ldrb	r3, [r4, #0]
 8013e36:	0759      	lsls	r1, r3, #29
 8013e38:	f53c af34 	bmi.w	8010ca4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 70, Color_Field|=Color_CIE_Luv, 0x01);
 8013e3c:	2204      	movs	r2, #4
 8013e3e:	2301      	movs	r3, #1
 8013e40:	2146      	movs	r1, #70	; 0x46
 8013e42:	20c8      	movs	r0, #200	; 0xc8
 8013e44:	7022      	strb	r2, [r4, #0]
 8013e46:	f001 fa44 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field&Color_CIE_Lab, 0x01);
 8013e4a:	7822      	ldrb	r2, [r4, #0]
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	f002 0202 	and.w	r2, r2, #2
 8013e52:	2185      	movs	r1, #133	; 0x85
 8013e54:	20c8      	movs	r0, #200	; 0xc8
 8013e56:	f001 fa3c 	bl	80152d2 <GUI_RadioBox>
 8013e5a:	f7fc bf23 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=133*TS_Callib & Touch_y <=(133+54)*TS_Callib) //Color_CIE_Lab
 8013e5e:	a39c      	add	r3, pc, #624	; (adr r3, 80140d0 <GUI_Touch_Processing+0x3548>)
 8013e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e68:	f04f 0901 	mov.w	r9, #1
 8013e6c:	f7ec fe56 	bl	8000b1c <__aeabi_dcmpge>
 8013e70:	b900      	cbnz	r0, 8013e74 <GUI_Touch_Processing+0x32ec>
 8013e72:	4681      	mov	r9, r0
 8013e74:	a398      	add	r3, pc, #608	; (adr r3, 80140d8 <GUI_Touch_Processing+0x3550>)
 8013e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e7e:	f04f 0a01 	mov.w	sl, #1
 8013e82:	f7ec fe41 	bl	8000b08 <__aeabi_dcmple>
 8013e86:	b900      	cbnz	r0, 8013e8a <GUI_Touch_Processing+0x3302>
 8013e88:	4682      	mov	sl, r0
 8013e8a:	ea09 090a 	and.w	r9, r9, sl
 8013e8e:	f019 0f01 	tst.w	r9, #1
 8013e92:	d017      	beq.n	8013ec4 <GUI_Touch_Processing+0x333c>
 8013e94:	b1b6      	cbz	r6, 8013ec4 <GUI_Touch_Processing+0x333c>
					if(!(Color_Field&Color_CIE_Lab))
 8013e96:	4ca2      	ldr	r4, [pc, #648]	; (8014120 <GUI_Touch_Processing+0x3598>)
 8013e98:	7822      	ldrb	r2, [r4, #0]
 8013e9a:	f012 0202 	ands.w	r2, r2, #2
 8013e9e:	f47c af01 	bne.w	8010ca4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	2146      	movs	r1, #70	; 0x46
 8013ea6:	20c8      	movs	r0, #200	; 0xc8
						Color_Field = 0;
 8013ea8:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(200, 70, Color_Field&Color_CIE_Luv, 0x01);
 8013eaa:	f001 fa12 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(200, 133, Color_Field|=Color_CIE_Lab, 0x01);
 8013eae:	7822      	ldrb	r2, [r4, #0]
 8013eb0:	2301      	movs	r3, #1
 8013eb2:	f042 0202 	orr.w	r2, r2, #2
 8013eb6:	2185      	movs	r1, #133	; 0x85
 8013eb8:	20c8      	movs	r0, #200	; 0xc8
 8013eba:	7022      	strb	r2, [r4, #0]
 8013ebc:	f001 fa09 	bl	80152d2 <GUI_RadioBox>
 8013ec0:	f7fc bef0 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 8013ec4:	a386      	add	r3, pc, #536	; (adr r3, 80140e0 <GUI_Touch_Processing+0x3558>)
 8013ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013eca:	4620      	mov	r0, r4
 8013ecc:	4629      	mov	r1, r5
 8013ece:	ea08 0607 	and.w	r6, r8, r7
 8013ed2:	f04f 0901 	mov.w	r9, #1
 8013ed6:	f7ec fe21 	bl	8000b1c <__aeabi_dcmpge>
 8013eda:	b900      	cbnz	r0, 8013ede <GUI_Touch_Processing+0x3356>
 8013edc:	4681      	mov	r9, r0
 8013ede:	a382      	add	r3, pc, #520	; (adr r3, 80140e8 <GUI_Touch_Processing+0x3560>)
 8013ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ee4:	4620      	mov	r0, r4
 8013ee6:	4629      	mov	r1, r5
 8013ee8:	f04f 0a01 	mov.w	sl, #1
 8013eec:	f7ec fe0c 	bl	8000b08 <__aeabi_dcmple>
 8013ef0:	b900      	cbnz	r0, 8013ef4 <GUI_Touch_Processing+0x336c>
 8013ef2:	4682      	mov	sl, r0
 8013ef4:	ea09 030a 	and.w	r3, r9, sl
 8013ef8:	07da      	lsls	r2, r3, #31
 8013efa:	d502      	bpl.n	8013f02 <GUI_Touch_Processing+0x337a>
 8013efc:	2e00      	cmp	r6, #0
 8013efe:	f47d ae8e 	bne.w	8011c1e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 8013f02:	a37b      	add	r3, pc, #492	; (adr r3, 80140f0 <GUI_Touch_Processing+0x3568>)
 8013f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f08:	4620      	mov	r0, r4
 8013f0a:	4629      	mov	r1, r5
 8013f0c:	f04f 0901 	mov.w	r9, #1
 8013f10:	f7ec fe04 	bl	8000b1c <__aeabi_dcmpge>
 8013f14:	b900      	cbnz	r0, 8013f18 <GUI_Touch_Processing+0x3390>
 8013f16:	4681      	mov	r9, r0
 8013f18:	a377      	add	r3, pc, #476	; (adr r3, 80140f8 <GUI_Touch_Processing+0x3570>)
 8013f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f1e:	4620      	mov	r0, r4
 8013f20:	4629      	mov	r1, r5
 8013f22:	f04f 0a01 	mov.w	sl, #1
 8013f26:	f7ec fdef 	bl	8000b08 <__aeabi_dcmple>
 8013f2a:	b900      	cbnz	r0, 8013f2e <GUI_Touch_Processing+0x33a6>
 8013f2c:	4682      	mov	sl, r0
 8013f2e:	ea09 030a 	and.w	r3, r9, sl
 8013f32:	07db      	lsls	r3, r3, #31
 8013f34:	d55e      	bpl.n	8013ff4 <GUI_Touch_Processing+0x346c>
 8013f36:	2e00      	cmp	r6, #0
 8013f38:	d05c      	beq.n	8013ff4 <GUI_Touch_Processing+0x346c>
					if(preColor_Field != Color_Field)
 8013f3a:	4c79      	ldr	r4, [pc, #484]	; (8014120 <GUI_Touch_Processing+0x3598>)
 8013f3c:	4979      	ldr	r1, [pc, #484]	; (8014124 <GUI_Touch_Processing+0x359c>)
 8013f3e:	7823      	ldrb	r3, [r4, #0]
 8013f40:	7809      	ldrb	r1, [r1, #0]
 8013f42:	4299      	cmp	r1, r3
 8013f44:	d01f      	beq.n	8013f86 <GUI_Touch_Processing+0x33fe>
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8013f46:	07dd      	lsls	r5, r3, #31
 8013f48:	d52c      	bpl.n	8013fa4 <GUI_Touch_Processing+0x341c>
 8013f4a:	4b77      	ldr	r3, [pc, #476]	; (8014128 <GUI_Touch_Processing+0x35a0>)
 8013f4c:	4877      	ldr	r0, [pc, #476]	; (801412c <GUI_Touch_Processing+0x35a4>)
 8013f4e:	781b      	ldrb	r3, [r3, #0]
 8013f50:	f013 0f01 	tst.w	r3, #1
 8013f54:	bf18      	it	ne
 8013f56:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8013f5a:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8013f5e:	f007 fe77 	bl	801bc50 <Image_load>
								Locus.pData = (uint16_t *)bmp;
 8013f62:	4b73      	ldr	r3, [pc, #460]	; (8014130 <GUI_Touch_Processing+0x35a8>)
 8013f64:	4a73      	ldr	r2, [pc, #460]	; (8014134 <GUI_Touch_Processing+0x35ac>)
 8013f66:	605a      	str	r2, [r3, #4]
								Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8013f68:	7822      	ldrb	r2, [r4, #0]
 8013f6a:	f002 0101 	and.w	r1, r2, #1
 8013f6e:	2900      	cmp	r1, #0
 8013f70:	bf0c      	ite	eq
 8013f72:	21fa      	moveq	r1, #250	; 0xfa
 8013f74:	21d8      	movne	r1, #216	; 0xd8
 8013f76:	8019      	strh	r1, [r3, #0]
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8013f78:	d122      	bne.n	8013fc0 <GUI_Touch_Processing+0x3438>
 8013f7a:	f012 0f04 	tst.w	r2, #4
 8013f7e:	bf0c      	ite	eq
 8013f80:	22fa      	moveq	r2, #250	; 0xfa
 8013f82:	22ea      	movne	r2, #234	; 0xea
 8013f84:	805a      	strh	r2, [r3, #2]
					WriteSDFLASH_t(sdfile_cnt);
 8013f86:	4b6c      	ldr	r3, [pc, #432]	; (8014138 <GUI_Touch_Processing+0x35b0>)
 8013f88:	2100      	movs	r1, #0
 8013f8a:	8818      	ldrh	r0, [r3, #0]
 8013f8c:	f007 ff1a 	bl	801bdc4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8013f90:	4b6a      	ldr	r3, [pc, #424]	; (801413c <GUI_Touch_Processing+0x35b4>)
 8013f92:	781b      	ldrb	r3, [r3, #0]
					switch (Prev_Inf_Screen){
 8013f94:	1e5a      	subs	r2, r3, #1
 8013f96:	2a05      	cmp	r2, #5
 8013f98:	d814      	bhi.n	8013fc4 <GUI_Touch_Processing+0x343c>
 8013f9a:	e8df f002 	tbb	[pc, r2]
 8013f9e:	1317      	.short	0x1317
 8013fa0:	21261c13 	.word	0x21261c13
								Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8013fa4:	f003 0304 	and.w	r3, r3, #4
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	4b65      	ldr	r3, [pc, #404]	; (8014140 <GUI_Touch_Processing+0x35b8>)
 8013fac:	4865      	ldr	r0, [pc, #404]	; (8014144 <GUI_Touch_Processing+0x35bc>)
 8013fae:	bf18      	it	ne
 8013fb0:	4618      	movne	r0, r3
 8013fb2:	f24e 4384 	movw	r3, #58500	; 0xe484
 8013fb6:	f24f 4124 	movw	r1, #62500	; 0xf424
 8013fba:	bf18      	it	ne
 8013fbc:	4619      	movne	r1, r3
 8013fbe:	e7ce      	b.n	8013f5e <GUI_Touch_Processing+0x33d6>
								Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8013fc0:	22fa      	movs	r2, #250	; 0xfa
 8013fc2:	e7df      	b.n	8013f84 <GUI_Touch_Processing+0x33fc>
					GUI_screen_state = Prev_Inf_Screen;
 8013fc4:	f88b 3000 	strb.w	r3, [fp]
 8013fc8:	f7fc be6c 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8013fcc:	2301      	movs	r3, #1
 8013fce:	f88b 3000 	strb.w	r3, [fp]
 8013fd2:	f7fc be67 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 8013fd6:	2304      	movs	r3, #4
 8013fd8:	f88b 3000 	strb.w	r3, [fp]
 8013fdc:	f7fc be62 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8013fe0:	2306      	movs	r3, #6
 8013fe2:	f88b 3000 	strb.w	r3, [fp]
 8013fe6:	f7fc be5d 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 8013fea:	2305      	movs	r3, #5
 8013fec:	f88b 3000 	strb.w	r3, [fp]
 8013ff0:	f7fc be58 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8013ff4:	a340      	add	r3, pc, #256	; (adr r3, 80140f8 <GUI_Touch_Processing+0x3570>)
 8013ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ffa:	4620      	mov	r0, r4
 8013ffc:	4629      	mov	r1, r5
 8013ffe:	f04f 0601 	mov.w	r6, #1
 8014002:	f7ec fd8b 	bl	8000b1c <__aeabi_dcmpge>
 8014006:	b900      	cbnz	r0, 801400a <GUI_Touch_Processing+0x3482>
 8014008:	4606      	mov	r6, r0
 801400a:	a33d      	add	r3, pc, #244	; (adr r3, 8014100 <GUI_Touch_Processing+0x3578>)
 801400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014010:	4620      	mov	r0, r4
 8014012:	4629      	mov	r1, r5
 8014014:	f04f 0901 	mov.w	r9, #1
 8014018:	f7ec fd76 	bl	8000b08 <__aeabi_dcmple>
 801401c:	b900      	cbnz	r0, 8014020 <GUI_Touch_Processing+0x3498>
 801401e:	4681      	mov	r9, r0
 8014020:	ea06 0609 	and.w	r6, r6, r9
 8014024:	ea18 0f06 	tst.w	r8, r6
 8014028:	f7fe bad0 	b.w	80125cc <GUI_Touch_Processing+0x1a44>
					preGUI_screen_state = GUI_screen_state;
 801402c:	4b46      	ldr	r3, [pc, #280]	; (8014148 <GUI_Touch_Processing+0x35c0>)
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)//next
 801402e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
					preGUI_screen_state = GUI_screen_state;
 8014032:	2210      	movs	r2, #16
 8014034:	701a      	strb	r2, [r3, #0]
				if(Touch_x >= 163*TS_Callib & Touch_x <= (163+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)//next
 8014036:	f7ec fa85 	bl	8000544 <__aeabi_i2d>
 801403a:	4604      	mov	r4, r0
 801403c:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8014040:	460d      	mov	r5, r1
 8014042:	f7ec fa7f 	bl	8000544 <__aeabi_i2d>
 8014046:	a330      	add	r3, pc, #192	; (adr r3, 8014108 <GUI_Touch_Processing+0x3580>)
 8014048:	e9d3 2300 	ldrd	r2, r3, [r3]
 801404c:	4606      	mov	r6, r0
 801404e:	460f      	mov	r7, r1
 8014050:	f04f 0801 	mov.w	r8, #1
 8014054:	f7ec fd62 	bl	8000b1c <__aeabi_dcmpge>
 8014058:	b900      	cbnz	r0, 801405c <GUI_Touch_Processing+0x34d4>
 801405a:	4680      	mov	r8, r0
 801405c:	fa5f f388 	uxtb.w	r3, r8
 8014060:	9300      	str	r3, [sp, #0]
 8014062:	2200      	movs	r2, #0
 8014064:	4b39      	ldr	r3, [pc, #228]	; (801414c <GUI_Touch_Processing+0x35c4>)
 8014066:	4630      	mov	r0, r6
 8014068:	4639      	mov	r1, r7
 801406a:	f04f 0801 	mov.w	r8, #1
 801406e:	f7ec fd4b 	bl	8000b08 <__aeabi_dcmple>
 8014072:	b900      	cbnz	r0, 8014076 <GUI_Touch_Processing+0x34ee>
 8014074:	4680      	mov	r8, r0
 8014076:	fa5f f388 	uxtb.w	r3, r8
 801407a:	9303      	str	r3, [sp, #12]
 801407c:	4620      	mov	r0, r4
 801407e:	a324      	add	r3, pc, #144	; (adr r3, 8014110 <GUI_Touch_Processing+0x3588>)
 8014080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014084:	4629      	mov	r1, r5
 8014086:	f04f 0801 	mov.w	r8, #1
 801408a:	f7ec fd47 	bl	8000b1c <__aeabi_dcmpge>
 801408e:	b900      	cbnz	r0, 8014092 <GUI_Touch_Processing+0x350a>
 8014090:	4680      	mov	r8, r0
 8014092:	a313      	add	r3, pc, #76	; (adr r3, 80140e0 <GUI_Touch_Processing+0x3558>)
 8014094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014098:	4620      	mov	r0, r4
 801409a:	4629      	mov	r1, r5
 801409c:	f04f 0901 	mov.w	r9, #1
 80140a0:	f7ec fd32 	bl	8000b08 <__aeabi_dcmple>
 80140a4:	b900      	cbnz	r0, 80140a8 <GUI_Touch_Processing+0x3520>
 80140a6:	4681      	mov	r9, r0
 80140a8:	9b00      	ldr	r3, [sp, #0]
 80140aa:	ea08 0809 	and.w	r8, r8, r9
 80140ae:	ea13 0f08 	tst.w	r3, r8
 80140b2:	d059      	beq.n	8014168 <GUI_Touch_Processing+0x35e0>
 80140b4:	9b03      	ldr	r3, [sp, #12]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d056      	beq.n	8014168 <GUI_Touch_Processing+0x35e0>
					WriteSDFLASH_t(sdfile_cnt);
 80140ba:	4b1f      	ldr	r3, [pc, #124]	; (8014138 <GUI_Touch_Processing+0x35b0>)
 80140bc:	2100      	movs	r1, #0
 80140be:	8818      	ldrh	r0, [r3, #0]
 80140c0:	f007 fe80 	bl	801bdc4 <WriteSDFLASH_t>
					GUI_screen_state = Color_Rendition_Screen;
 80140c4:	2306      	movs	r3, #6
 80140c6:	f88b 3000 	strb.w	r3, [fp]
 80140ca:	f7fc bdeb 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 80140ce:	bf00      	nop
 80140d0:	33333333 	.word	0x33333333
 80140d4:	40760733 	.word	0x40760733
 80140d8:	cccccccd 	.word	0xcccccccd
 80140dc:	407ef8cc 	.word	0x407ef8cc
 80140e0:	66666666 	.word	0x66666666
 80140e4:	4081f866 	.word	0x4081f866
 80140e8:	33333333 	.word	0x33333333
 80140ec:	40867133 	.word	0x40867133
 80140f0:	33333333 	.word	0x33333333
 80140f4:	40053333 	.word	0x40053333
 80140f8:	00000000 	.word	0x00000000
 80140fc:	40623800 	.word	0x40623800
 8014100:	99999999 	.word	0x99999999
 8014104:	40720d99 	.word	0x40720d99
 8014108:	99999999 	.word	0x99999999
 801410c:	4091a399 	.word	0x4091a399
 8014110:	33333333 	.word	0x33333333
 8014114:	407aff33 	.word	0x407aff33
 8014118:	cccccccd 	.word	0xcccccccd
 801411c:	407e24cc 	.word	0x407e24cc
 8014120:	20004c6f 	.word	0x20004c6f
 8014124:	20004c99 	.word	0x20004c99
 8014128:	20004c74 	.word	0x20004c74
 801412c:	00051d00 	.word	0x00051d00
 8014130:	2008c280 	.word	0x2008c280
 8014134:	20050bee 	.word	0x20050bee
 8014138:	20004c9e 	.word	0x20004c9e
 801413c:	2008bce5 	.word	0x2008bce5
 8014140:	0006ca00 	.word	0x0006ca00
 8014144:	00018100 	.word	0x00018100
 8014148:	2000022a 	.word	0x2000022a
 801414c:	4093e000 	.word	0x4093e000
 8014150:	33333333 	.word	0x33333333
 8014154:	40838b33 	.word	0x40838b33
 8014158:	00000000 	.word	0x00000000
 801415c:	40673000 	.word	0x40673000
 8014160:	99999999 	.word	0x99999999
 8014164:	40748999 	.word	0x40748999
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=202*TS_Callib & Touch_y <=(202+54)*TS_Callib) //Mode_EL
 8014168:	a3c9      	add	r3, pc, #804	; (adr r3, 8014490 <GUI_Touch_Processing+0x3908>)
 801416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801416e:	4620      	mov	r0, r4
 8014170:	4629      	mov	r1, r5
 8014172:	f04f 0801 	mov.w	r8, #1
 8014176:	f7ec fcd1 	bl	8000b1c <__aeabi_dcmpge>
 801417a:	b900      	cbnz	r0, 801417e <GUI_Touch_Processing+0x35f6>
 801417c:	4680      	mov	r8, r0
 801417e:	a3c6      	add	r3, pc, #792	; (adr r3, 8014498 <GUI_Touch_Processing+0x3910>)
 8014180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014184:	4620      	mov	r0, r4
 8014186:	4629      	mov	r1, r5
 8014188:	f04f 0901 	mov.w	r9, #1
 801418c:	f7ec fcbc 	bl	8000b08 <__aeabi_dcmple>
 8014190:	b900      	cbnz	r0, 8014194 <GUI_Touch_Processing+0x360c>
 8014192:	4681      	mov	r9, r0
 8014194:	ea08 0809 	and.w	r8, r8, r9
 8014198:	a3c1      	add	r3, pc, #772	; (adr r3, 80144a0 <GUI_Touch_Processing+0x3918>)
 801419a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801419e:	4630      	mov	r0, r6
 80141a0:	4639      	mov	r1, r7
 80141a2:	fa5f f888 	uxtb.w	r8, r8
 80141a6:	f04f 0901 	mov.w	r9, #1
 80141aa:	f7ec fcb7 	bl	8000b1c <__aeabi_dcmpge>
 80141ae:	b900      	cbnz	r0, 80141b2 <GUI_Touch_Processing+0x362a>
 80141b0:	4681      	mov	r9, r0
 80141b2:	a3bd      	add	r3, pc, #756	; (adr r3, 80144a8 <GUI_Touch_Processing+0x3920>)
 80141b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141b8:	4630      	mov	r0, r6
 80141ba:	4639      	mov	r1, r7
 80141bc:	f04f 0a01 	mov.w	sl, #1
 80141c0:	f7ec fca2 	bl	8000b08 <__aeabi_dcmple>
 80141c4:	b900      	cbnz	r0, 80141c8 <GUI_Touch_Processing+0x3640>
 80141c6:	4682      	mov	sl, r0
 80141c8:	ea09 090a 	and.w	r9, r9, sl
 80141cc:	f019 0f01 	tst.w	r9, #1
 80141d0:	d028      	beq.n	8014224 <GUI_Touch_Processing+0x369c>
 80141d2:	f1b8 0f00 	cmp.w	r8, #0
 80141d6:	d025      	beq.n	8014224 <GUI_Touch_Processing+0x369c>
					Mode_EL = !Mode_EL;
 80141d8:	4ca3      	ldr	r4, [pc, #652]	; (8014468 <GUI_Touch_Processing+0x38e0>)
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80141da:	4ba4      	ldr	r3, [pc, #656]	; (801446c <GUI_Touch_Processing+0x38e4>)
					Mode_EL = !Mode_EL;
 80141dc:	7822      	ldrb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80141de:	48a4      	ldr	r0, [pc, #656]	; (8014470 <GUI_Touch_Processing+0x38e8>)
					Mode_EL = !Mode_EL;
 80141e0:	2a00      	cmp	r2, #0
 80141e2:	bf0c      	ite	eq
 80141e4:	2201      	moveq	r2, #1
 80141e6:	2200      	movne	r2, #0
 80141e8:	7022      	strb	r2, [r4, #0]
					Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 80141ea:	bf18      	it	ne
 80141ec:	4618      	movne	r0, r3
 80141ee:	4aa1      	ldr	r2, [pc, #644]	; (8014474 <GUI_Touch_Processing+0x38ec>)
 80141f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80141f4:	f7fa fd18 	bl	800ec28 <Calibration_Load_Pack>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 80141f8:	7822      	ldrb	r2, [r4, #0]
 80141fa:	4b9f      	ldr	r3, [pc, #636]	; (8014478 <GUI_Touch_Processing+0x38f0>)
 80141fc:	b982      	cbnz	r2, 8014220 <GUI_Touch_Processing+0x3698>
 80141fe:	4a9f      	ldr	r2, [pc, #636]	; (801447c <GUI_Touch_Processing+0x38f4>)
 8014200:	edd2 0a00 	vldr	s1, [r2]
 8014204:	ed93 0a00 	vldr	s0, [r3]
 8014208:	f007 fd52 	bl	801bcb0 <Rabs_calc_Factor2_Settings_change>
 801420c:	4b9c      	ldr	r3, [pc, #624]	; (8014480 <GUI_Touch_Processing+0x38f8>)
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 801420e:	7822      	ldrb	r2, [r4, #0]
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8014210:	ed83 0a00 	vstr	s0, [r3]
					GUI_Switch_ButtonActive(182, 202, Mode_EL);
 8014214:	21ca      	movs	r1, #202	; 0xca
 8014216:	20b6      	movs	r0, #182	; 0xb6
 8014218:	f001 f8e4 	bl	80153e4 <GUI_Switch_ButtonActive>
 801421c:	f7fc bd42 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
					Factor2 = (Mode_EL == 0x00 ? Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L) : Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E));
 8014220:	4a98      	ldr	r2, [pc, #608]	; (8014484 <GUI_Touch_Processing+0x38fc>)
 8014222:	e7ed      	b.n	8014200 <GUI_Touch_Processing+0x3678>
				if(Touch_x >= 182*TS_Callib & Touch_x <= (182+54)*TS_Callib & Touch_y >=268*TS_Callib & Touch_y <=(268+54)*TS_Callib) //Bluetooth
 8014224:	a378      	add	r3, pc, #480	; (adr r3, 8014408 <GUI_Touch_Processing+0x3880>)
 8014226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801422a:	4630      	mov	r0, r6
 801422c:	4639      	mov	r1, r7
 801422e:	f04f 0901 	mov.w	r9, #1
 8014232:	f7ec fc73 	bl	8000b1c <__aeabi_dcmpge>
 8014236:	b900      	cbnz	r0, 801423a <GUI_Touch_Processing+0x36b2>
 8014238:	4681      	mov	r9, r0
 801423a:	a375      	add	r3, pc, #468	; (adr r3, 8014410 <GUI_Touch_Processing+0x3888>)
 801423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014240:	4630      	mov	r0, r6
 8014242:	4639      	mov	r1, r7
 8014244:	f04f 0a01 	mov.w	sl, #1
 8014248:	f7ec fc5e 	bl	8000b08 <__aeabi_dcmple>
 801424c:	b900      	cbnz	r0, 8014250 <GUI_Touch_Processing+0x36c8>
 801424e:	4682      	mov	sl, r0
 8014250:	ea09 090a 	and.w	r9, r9, sl
 8014254:	f019 0f01 	tst.w	r9, #1
 8014258:	d011      	beq.n	801427e <GUI_Touch_Processing+0x36f6>
 801425a:	f1b8 0f00 	cmp.w	r8, #0
 801425e:	d00e      	beq.n	801427e <GUI_Touch_Processing+0x36f6>
					Bluetooth = !Bluetooth;
 8014260:	4b89      	ldr	r3, [pc, #548]	; (8014488 <GUI_Touch_Processing+0x3900>)
 8014262:	781a      	ldrb	r2, [r3, #0]
 8014264:	fab2 f282 	clz	r2, r2
 8014268:	0952      	lsrs	r2, r2, #5
					GUI_Switch_Button(182, 268, Bluetooth);
 801426a:	f44f 7186 	mov.w	r1, #268	; 0x10c
 801426e:	20b6      	movs	r0, #182	; 0xb6
					Bluetooth = !Bluetooth;
 8014270:	701a      	strb	r2, [r3, #0]
					GUI_Switch_Button(182, 268, Bluetooth);
 8014272:	f001 f85d 	bl	8015330 <GUI_Switch_Button>
					GUI_Up_Panel();
 8014276:	f7fb f94f 	bl	800f518 <GUI_Up_Panel>
 801427a:	f7fc bd13 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=124*TS_Callib & Touch_y <=(174)*TS_Callib) // Information
 801427e:	a366      	add	r3, pc, #408	; (adr r3, 8014418 <GUI_Touch_Processing+0x3890>)
 8014280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014284:	4620      	mov	r0, r4
 8014286:	4629      	mov	r1, r5
 8014288:	f04f 0801 	mov.w	r8, #1
 801428c:	f7ec fc46 	bl	8000b1c <__aeabi_dcmpge>
 8014290:	b900      	cbnz	r0, 8014294 <GUI_Touch_Processing+0x370c>
 8014292:	4680      	mov	r8, r0
 8014294:	a362      	add	r3, pc, #392	; (adr r3, 8014420 <GUI_Touch_Processing+0x3898>)
 8014296:	e9d3 2300 	ldrd	r2, r3, [r3]
 801429a:	4620      	mov	r0, r4
 801429c:	4629      	mov	r1, r5
 801429e:	f04f 0901 	mov.w	r9, #1
 80142a2:	f7ec fc31 	bl	8000b08 <__aeabi_dcmple>
 80142a6:	b900      	cbnz	r0, 80142aa <GUI_Touch_Processing+0x3722>
 80142a8:	4681      	mov	r9, r0
 80142aa:	ea08 0809 	and.w	r8, r8, r9
 80142ae:	a35e      	add	r3, pc, #376	; (adr r3, 8014428 <GUI_Touch_Processing+0x38a0>)
 80142b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b4:	4630      	mov	r0, r6
 80142b6:	4639      	mov	r1, r7
 80142b8:	fa5f f888 	uxtb.w	r8, r8
 80142bc:	f04f 0901 	mov.w	r9, #1
 80142c0:	f7ec fc2c 	bl	8000b1c <__aeabi_dcmpge>
 80142c4:	b900      	cbnz	r0, 80142c8 <GUI_Touch_Processing+0x3740>
 80142c6:	4681      	mov	r9, r0
 80142c8:	a359      	add	r3, pc, #356	; (adr r3, 8014430 <GUI_Touch_Processing+0x38a8>)
 80142ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ce:	4630      	mov	r0, r6
 80142d0:	4639      	mov	r1, r7
 80142d2:	f04f 0a01 	mov.w	sl, #1
 80142d6:	f7ec fc17 	bl	8000b08 <__aeabi_dcmple>
 80142da:	b900      	cbnz	r0, 80142de <GUI_Touch_Processing+0x3756>
 80142dc:	4682      	mov	sl, r0
 80142de:	ea09 090a 	and.w	r9, r9, sl
 80142e2:	f019 0f01 	tst.w	r9, #1
 80142e6:	d003      	beq.n	80142f0 <GUI_Touch_Processing+0x3768>
 80142e8:	f1b8 0f00 	cmp.w	r8, #0
 80142ec:	f47f a91b 	bne.w	8013526 <GUI_Touch_Processing+0x299e>
				if(Touch_x >= 185*TS_Callib & Touch_x <= (185+54)*TS_Callib & Touch_y >=318*TS_Callib & Touch_y <=(318+54)*TS_Callib) //CRI
 80142f0:	a351      	add	r3, pc, #324	; (adr r3, 8014438 <GUI_Touch_Processing+0x38b0>)
 80142f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f6:	4620      	mov	r0, r4
 80142f8:	4629      	mov	r1, r5
 80142fa:	f04f 0901 	mov.w	r9, #1
 80142fe:	f7ec fc0d 	bl	8000b1c <__aeabi_dcmpge>
 8014302:	b900      	cbnz	r0, 8014306 <GUI_Touch_Processing+0x377e>
 8014304:	4681      	mov	r9, r0
 8014306:	a34e      	add	r3, pc, #312	; (adr r3, 8014440 <GUI_Touch_Processing+0x38b8>)
 8014308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801430c:	4620      	mov	r0, r4
 801430e:	4629      	mov	r1, r5
 8014310:	f04f 0a01 	mov.w	sl, #1
 8014314:	f7ec fbf8 	bl	8000b08 <__aeabi_dcmple>
 8014318:	b900      	cbnz	r0, 801431c <GUI_Touch_Processing+0x3794>
 801431a:	4682      	mov	sl, r0
 801431c:	ea09 090a 	and.w	r9, r9, sl
 8014320:	a349      	add	r3, pc, #292	; (adr r3, 8014448 <GUI_Touch_Processing+0x38c0>)
 8014322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014326:	4630      	mov	r0, r6
 8014328:	4639      	mov	r1, r7
 801432a:	fa5f f989 	uxtb.w	r9, r9
 801432e:	f04f 0a01 	mov.w	sl, #1
 8014332:	f7ec fbf3 	bl	8000b1c <__aeabi_dcmpge>
 8014336:	b900      	cbnz	r0, 801433a <GUI_Touch_Processing+0x37b2>
 8014338:	4682      	mov	sl, r0
 801433a:	a345      	add	r3, pc, #276	; (adr r3, 8014450 <GUI_Touch_Processing+0x38c8>)
 801433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014340:	4630      	mov	r0, r6
 8014342:	4639      	mov	r1, r7
 8014344:	f04f 0b01 	mov.w	fp, #1
 8014348:	f7ec fbde 	bl	8000b08 <__aeabi_dcmple>
 801434c:	b900      	cbnz	r0, 8014350 <GUI_Touch_Processing+0x37c8>
 801434e:	4683      	mov	fp, r0
 8014350:	ea0a 0a0b 	and.w	sl, sl, fp
 8014354:	f01a 0f01 	tst.w	sl, #1
 8014358:	d01c      	beq.n	8014394 <GUI_Touch_Processing+0x380c>
 801435a:	f1b9 0f00 	cmp.w	r9, #0
 801435e:	d019      	beq.n	8014394 <GUI_Touch_Processing+0x380c>
					if(!(Color_rend_Field & CRI_CQS)){
 8014360:	4c4a      	ldr	r4, [pc, #296]	; (801448c <GUI_Touch_Processing+0x3904>)
 8014362:	7822      	ldrb	r2, [r4, #0]
 8014364:	07d0      	lsls	r0, r2, #31
 8014366:	f53c ac9d 	bmi.w	8010ca4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 801436a:	2301      	movs	r3, #1
						Color_rend_Field ^= CRI_CQS;
 801436c:	f082 0201 	eor.w	r2, r2, #1
 8014370:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 8014372:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8014376:	401a      	ands	r2, r3
 8014378:	20b9      	movs	r0, #185	; 0xb9
 801437a:	f000 ffaa 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 801437e:	7822      	ldrb	r2, [r4, #0]
 8014380:	2301      	movs	r3, #1
 8014382:	43d2      	mvns	r2, r2
 8014384:	401a      	ands	r2, r3
 8014386:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 801438a:	20b9      	movs	r0, #185	; 0xb9
 801438c:	f000 ffa1 	bl	80152d2 <GUI_RadioBox>
 8014390:	f7fc bc88 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 185*TS_Callib & Touch_x <= (185+54)*TS_Callib & Touch_y >=362*TS_Callib & Touch_y <=(362+54)*TS_Callib) //CQS
 8014394:	a330      	add	r3, pc, #192	; (adr r3, 8014458 <GUI_Touch_Processing+0x38d0>)
 8014396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801439a:	4630      	mov	r0, r6
 801439c:	4639      	mov	r1, r7
 801439e:	f04f 0a01 	mov.w	sl, #1
 80143a2:	f7ec fbbb 	bl	8000b1c <__aeabi_dcmpge>
 80143a6:	b900      	cbnz	r0, 80143aa <GUI_Touch_Processing+0x3822>
 80143a8:	4682      	mov	sl, r0
 80143aa:	a32d      	add	r3, pc, #180	; (adr r3, 8014460 <GUI_Touch_Processing+0x38d8>)
 80143ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143b0:	4630      	mov	r0, r6
 80143b2:	4639      	mov	r1, r7
 80143b4:	f04f 0b01 	mov.w	fp, #1
 80143b8:	f7ec fba6 	bl	8000b08 <__aeabi_dcmple>
 80143bc:	b900      	cbnz	r0, 80143c0 <GUI_Touch_Processing+0x3838>
 80143be:	4683      	mov	fp, r0
 80143c0:	ea0a 0a0b 	and.w	sl, sl, fp
 80143c4:	f01a 0f01 	tst.w	sl, #1
 80143c8:	d072      	beq.n	80144b0 <GUI_Touch_Processing+0x3928>
 80143ca:	f1b9 0f00 	cmp.w	r9, #0
 80143ce:	d06f      	beq.n	80144b0 <GUI_Touch_Processing+0x3928>
					if((Color_rend_Field&CRI_CQS)){
 80143d0:	4c2e      	ldr	r4, [pc, #184]	; (801448c <GUI_Touch_Processing+0x3904>)
 80143d2:	7822      	ldrb	r2, [r4, #0]
 80143d4:	07d1      	lsls	r1, r2, #31
 80143d6:	f57c ac65 	bpl.w	8010ca4 <GUI_Touch_Processing+0x11c>
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 80143da:	2301      	movs	r3, #1
						Color_rend_Field ^= CRI_CQS;
 80143dc:	f082 0201 	eor.w	r2, r2, #1
 80143e0:	7022      	strb	r2, [r4, #0]
						GUI_RadioBox(185, 318, Color_rend_Field&CRI_CQS, 0x01);
 80143e2:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80143e6:	401a      	ands	r2, r3
 80143e8:	20b9      	movs	r0, #185	; 0xb9
 80143ea:	f000 ff72 	bl	80152d2 <GUI_RadioBox>
						GUI_RadioBox(185, 362, !(Color_rend_Field&CRI_CQS), 0x01);
 80143ee:	7822      	ldrb	r2, [r4, #0]
 80143f0:	2301      	movs	r3, #1
 80143f2:	43d2      	mvns	r2, r2
 80143f4:	401a      	ands	r2, r3
 80143f6:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 80143fa:	20b9      	movs	r0, #185	; 0xb9
 80143fc:	f000 ff69 	bl	80152d2 <GUI_RadioBox>
 8014400:	f7fc bc50 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8014404:	f3af 8000 	nop.w
 8014408:	99999999 	.word	0x99999999
 801440c:	40863199 	.word	0x40863199
 8014410:	66666666 	.word	0x66666666
 8014414:	408aaa66 	.word	0x408aaa66
 8014418:	33333333 	.word	0x33333333
 801441c:	40353333 	.word	0x40353333
 8014420:	00000000 	.word	0x00000000
 8014424:	4084b400 	.word	0x4084b400
 8014428:	99999999 	.word	0x99999999
 801442c:	40748999 	.word	0x40748999
 8014430:	99999999 	.word	0x99999999
 8014434:	407cd199 	.word	0x407cd199
 8014438:	00000000 	.word	0x00000000
 801443c:	407ea400 	.word	0x407ea400
 8014440:	cccccccd 	.word	0xcccccccd
 8014444:	4083cacc 	.word	0x4083cacc
 8014448:	99999999 	.word	0x99999999
 801444c:	408a5599 	.word	0x408a5599
 8014450:	66666666 	.word	0x66666666
 8014454:	408ece66 	.word	0x408ece66
 8014458:	66666666 	.word	0x66666666
 801445c:	408dfa66 	.word	0x408dfa66
 8014460:	99999999 	.word	0x99999999
 8014464:	40913999 	.word	0x40913999
 8014468:	20000a48 	.word	0x20000a48
 801446c:	08101838 	.word	0x08101838
 8014470:	08100838 	.word	0x08100838
 8014474:	2004cbe0 	.word	0x2004cbe0
 8014478:	20004fcc 	.word	0x20004fcc
 801447c:	20004fc8 	.word	0x20004fc8
 8014480:	20004fd4 	.word	0x20004fd4
 8014484:	20004fc4 	.word	0x20004fc4
 8014488:	2008bcea 	.word	0x2008bcea
 801448c:	20004c70 	.word	0x20004c70
 8014490:	cccccccd 	.word	0xcccccccd
 8014494:	407e24cc 	.word	0x407e24cc
 8014498:	33333333 	.word	0x33333333
 801449c:	40838b33 	.word	0x40838b33
 80144a0:	66666666 	.word	0x66666666
 80144a4:	4080ba66 	.word	0x4080ba66
 80144a8:	33333333 	.word	0x33333333
 80144ac:	40853333 	.word	0x40853333
 80144b0:	9b00      	ldr	r3, [sp, #0]
 80144b2:	9a03      	ldr	r2, [sp, #12]
				if(Touch_x >= 217*TS_Callib & Touch_x <= (217+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Display_Off
 80144b4:	4620      	mov	r0, r4
 80144b6:	ea03 0902 	and.w	r9, r3, r2
 80144ba:	4629      	mov	r1, r5
 80144bc:	a3a4      	add	r3, pc, #656	; (adr r3, 8014750 <GUI_Touch_Processing+0x3bc8>)
 80144be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144c2:	f04f 0a01 	mov.w	sl, #1
 80144c6:	f7ec fb29 	bl	8000b1c <__aeabi_dcmpge>
 80144ca:	b900      	cbnz	r0, 80144ce <GUI_Touch_Processing+0x3946>
 80144cc:	4682      	mov	sl, r0
 80144ce:	a3a2      	add	r3, pc, #648	; (adr r3, 8014758 <GUI_Touch_Processing+0x3bd0>)
 80144d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144d4:	4620      	mov	r0, r4
 80144d6:	4629      	mov	r1, r5
 80144d8:	f04f 0b01 	mov.w	fp, #1
 80144dc:	f7ec fb14 	bl	8000b08 <__aeabi_dcmple>
 80144e0:	b900      	cbnz	r0, 80144e4 <GUI_Touch_Processing+0x395c>
 80144e2:	4683      	mov	fp, r0
 80144e4:	ea0a 030b 	and.w	r3, sl, fp
 80144e8:	07db      	lsls	r3, r3, #31
 80144ea:	d503      	bpl.n	80144f4 <GUI_Touch_Processing+0x396c>
 80144ec:	f1b9 0f00 	cmp.w	r9, #0
 80144f0:	f47d ab95 	bne.w	8011c1e <GUI_Touch_Processing+0x1096>
				if(Touch_x >= 1*TS_Callib & Touch_x <= (1+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //Back
 80144f4:	a39a      	add	r3, pc, #616	; (adr r3, 8014760 <GUI_Touch_Processing+0x3bd8>)
 80144f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144fa:	4620      	mov	r0, r4
 80144fc:	4629      	mov	r1, r5
 80144fe:	f04f 0a01 	mov.w	sl, #1
 8014502:	f7ec fb0b 	bl	8000b1c <__aeabi_dcmpge>
 8014506:	b900      	cbnz	r0, 801450a <GUI_Touch_Processing+0x3982>
 8014508:	4682      	mov	sl, r0
 801450a:	a37f      	add	r3, pc, #508	; (adr r3, 8014708 <GUI_Touch_Processing+0x3b80>)
 801450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014510:	4620      	mov	r0, r4
 8014512:	4629      	mov	r1, r5
 8014514:	f04f 0b01 	mov.w	fp, #1
 8014518:	f7ec faf6 	bl	8000b08 <__aeabi_dcmple>
 801451c:	b900      	cbnz	r0, 8014520 <GUI_Touch_Processing+0x3998>
 801451e:	4683      	mov	fp, r0
 8014520:	ea0a 030b 	and.w	r3, sl, fp
 8014524:	07d8      	lsls	r0, r3, #31
 8014526:	d525      	bpl.n	8014574 <GUI_Touch_Processing+0x39ec>
 8014528:	f1b9 0f00 	cmp.w	r9, #0
 801452c:	d022      	beq.n	8014574 <GUI_Touch_Processing+0x39ec>
					WriteSDFLASH_t(sdfile_cnt);
 801452e:	4b82      	ldr	r3, [pc, #520]	; (8014738 <GUI_Touch_Processing+0x3bb0>)
 8014530:	2100      	movs	r1, #0
 8014532:	8818      	ldrh	r0, [r3, #0]
 8014534:	f007 fc46 	bl	801bdc4 <WriteSDFLASH_t>
					GUI_screen_state = Prev_Inf_Screen;
 8014538:	4b80      	ldr	r3, [pc, #512]	; (801473c <GUI_Touch_Processing+0x3bb4>)
 801453a:	781a      	ldrb	r2, [r3, #0]
 801453c:	4b80      	ldr	r3, [pc, #512]	; (8014740 <GUI_Touch_Processing+0x3bb8>)
					switch (Prev_Inf_Screen){
 801453e:	1e51      	subs	r1, r2, #1
 8014540:	2905      	cmp	r1, #5
 8014542:	d804      	bhi.n	801454e <GUI_Touch_Processing+0x39c6>
 8014544:	e8df f001 	tbb	[pc, r1]
 8014548:	0a030306 	.word	0x0a030306
 801454c:	0e12      	.short	0x0e12
					GUI_screen_state = Prev_Inf_Screen;
 801454e:	701a      	strb	r2, [r3, #0]
 8014550:	f7fc bba8 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Measure_Screen: GUI_screen_state = Measure_Screen; 		break;
 8014554:	2201      	movs	r2, #1
 8014556:	701a      	strb	r2, [r3, #0]
 8014558:	f7fc bba4 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Graph_Screen:  GUI_screen_state = Graph_Screen; 		break;
 801455c:	2204      	movs	r2, #4
 801455e:	701a      	strb	r2, [r3, #0]
 8014560:	f7fc bba0 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Rendition_Screen: GUI_screen_state = Color_Rendition_Screen; break;
 8014564:	2206      	movs	r2, #6
 8014566:	701a      	strb	r2, [r3, #0]
 8014568:	f7fc bb9c 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case Color_Screen: GUI_screen_state = Color_Screen; break;
 801456c:	2205      	movs	r2, #5
 801456e:	701a      	strb	r2, [r3, #0]
 8014570:	f7fc bb98 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
				if(Touch_x >= 55*TS_Callib & Touch_x <= (55+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib) //SD_Card
 8014574:	a364      	add	r3, pc, #400	; (adr r3, 8014708 <GUI_Touch_Processing+0x3b80>)
 8014576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801457a:	4620      	mov	r0, r4
 801457c:	4629      	mov	r1, r5
 801457e:	f04f 0a01 	mov.w	sl, #1
 8014582:	f7ec facb 	bl	8000b1c <__aeabi_dcmpge>
 8014586:	b900      	cbnz	r0, 801458a <GUI_Touch_Processing+0x3a02>
 8014588:	4682      	mov	sl, r0
 801458a:	a361      	add	r3, pc, #388	; (adr r3, 8014710 <GUI_Touch_Processing+0x3b88>)
 801458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014590:	4620      	mov	r0, r4
 8014592:	4629      	mov	r1, r5
 8014594:	f04f 0b01 	mov.w	fp, #1
 8014598:	f7ec fab6 	bl	8000b08 <__aeabi_dcmple>
 801459c:	b900      	cbnz	r0, 80145a0 <GUI_Touch_Processing+0x3a18>
 801459e:	4683      	mov	fp, r0
 80145a0:	ea0a 030b 	and.w	r3, sl, fp
 80145a4:	07d9      	lsls	r1, r3, #31
 80145a6:	d503      	bpl.n	80145b0 <GUI_Touch_Processing+0x3a28>
 80145a8:	f1b9 0f00 	cmp.w	r9, #0
 80145ac:	f47c abba 	bne.w	8010d24 <GUI_Touch_Processing+0x19c>
				if(Touch_x >= 8*TS_Callib & Touch_x <= (250)*TS_Callib & Touch_y >=80*TS_Callib & Touch_y <=(120)*TS_Callib) // Language change
 80145b0:	2200      	movs	r2, #0
 80145b2:	4b64      	ldr	r3, [pc, #400]	; (8014744 <GUI_Touch_Processing+0x3bbc>)
 80145b4:	4630      	mov	r0, r6
 80145b6:	4639      	mov	r1, r7
 80145b8:	f04f 0401 	mov.w	r4, #1
 80145bc:	f7ec faae 	bl	8000b1c <__aeabi_dcmpge>
 80145c0:	b900      	cbnz	r0, 80145c4 <GUI_Touch_Processing+0x3a3c>
 80145c2:	4604      	mov	r4, r0
 80145c4:	a354      	add	r3, pc, #336	; (adr r3, 8014718 <GUI_Touch_Processing+0x3b90>)
 80145c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ca:	4630      	mov	r0, r6
 80145cc:	4639      	mov	r1, r7
 80145ce:	f04f 0501 	mov.w	r5, #1
 80145d2:	f7ec fa99 	bl	8000b08 <__aeabi_dcmple>
 80145d6:	b900      	cbnz	r0, 80145da <GUI_Touch_Processing+0x3a52>
 80145d8:	4605      	mov	r5, r0
 80145da:	402c      	ands	r4, r5
 80145dc:	07e2      	lsls	r2, r4, #31
 80145de:	f57c ab61 	bpl.w	8010ca4 <GUI_Touch_Processing+0x11c>
 80145e2:	f1b8 0f00 	cmp.w	r8, #0
 80145e6:	f47e af70 	bne.w	80134ca <GUI_Touch_Processing+0x2942>
 80145ea:	f7fc bb5b 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
			if(Touch_x >= 8*TS_Callib & Touch_x <= (270)*TS_Callib & Touch_y >=8*TS_Callib & Touch_y <=(470)*TS_Callib) // Information
 80145ee:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 80145f2:	f7eb ffa7 	bl	8000544 <__aeabi_i2d>
 80145f6:	4680      	mov	r8, r0
 80145f8:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80145fc:	4689      	mov	r9, r1
 80145fe:	f7eb ffa1 	bl	8000544 <__aeabi_i2d>
 8014602:	a347      	add	r3, pc, #284	; (adr r3, 8014720 <GUI_Touch_Processing+0x3b98>)
 8014604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014608:	4606      	mov	r6, r0
 801460a:	460f      	mov	r7, r1
 801460c:	4640      	mov	r0, r8
 801460e:	4649      	mov	r1, r9
 8014610:	f04f 0401 	mov.w	r4, #1
 8014614:	f7ec fa82 	bl	8000b1c <__aeabi_dcmpge>
 8014618:	b900      	cbnz	r0, 801461c <GUI_Touch_Processing+0x3a94>
 801461a:	4604      	mov	r4, r0
 801461c:	a342      	add	r3, pc, #264	; (adr r3, 8014728 <GUI_Touch_Processing+0x3ba0>)
 801461e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014622:	4640      	mov	r0, r8
 8014624:	4649      	mov	r1, r9
 8014626:	f04f 0501 	mov.w	r5, #1
 801462a:	f7ec fa6d 	bl	8000b08 <__aeabi_dcmple>
 801462e:	b900      	cbnz	r0, 8014632 <GUI_Touch_Processing+0x3aaa>
 8014630:	4605      	mov	r5, r0
 8014632:	a33b      	add	r3, pc, #236	; (adr r3, 8014720 <GUI_Touch_Processing+0x3b98>)
 8014634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014638:	4630      	mov	r0, r6
 801463a:	4639      	mov	r1, r7
 801463c:	402c      	ands	r4, r5
 801463e:	f04f 0501 	mov.w	r5, #1
 8014642:	f7ec fa6b 	bl	8000b1c <__aeabi_dcmpge>
 8014646:	b900      	cbnz	r0, 801464a <GUI_Touch_Processing+0x3ac2>
 8014648:	4605      	mov	r5, r0
 801464a:	402c      	ands	r4, r5
 801464c:	07e3      	lsls	r3, r4, #31
 801464e:	f57c ab29 	bpl.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8014652:	a337      	add	r3, pc, #220	; (adr r3, 8014730 <GUI_Touch_Processing+0x3ba8>)
 8014654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014658:	4630      	mov	r0, r6
 801465a:	4639      	mov	r1, r7
 801465c:	f04f 0401 	mov.w	r4, #1
 8014660:	f7ec fa52 	bl	8000b08 <__aeabi_dcmple>
 8014664:	b900      	cbnz	r0, 8014668 <GUI_Touch_Processing+0x3ae0>
 8014666:	4604      	mov	r4, r0
 8014668:	f014 0fff 	tst.w	r4, #255	; 0xff
 801466c:	f43c ab1a 	beq.w	8010ca4 <GUI_Touch_Processing+0x11c>
					GUI_screen_state = preGUI_screen_state;
 8014670:	4b35      	ldr	r3, [pc, #212]	; (8014748 <GUI_Touch_Processing+0x3bc0>)
 8014672:	781a      	ldrb	r2, [r3, #0]
 8014674:	f88b 2000 	strb.w	r2, [fp]
					preGUI_screen_state = Information_Screen;
 8014678:	2211      	movs	r2, #17
 801467a:	701a      	strb	r2, [r3, #0]
						switch (Prev_Inf_Screen2){
 801467c:	4b33      	ldr	r3, [pc, #204]	; (801474c <GUI_Touch_Processing+0x3bc4>)
 801467e:	781b      	ldrb	r3, [r3, #0]
 8014680:	3b07      	subs	r3, #7
 8014682:	2b09      	cmp	r3, #9
 8014684:	f63c ab0e 	bhi.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8014688:	a201      	add	r2, pc, #4	; (adr r2, 8014690 <GUI_Touch_Processing+0x3b08>)
 801468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801468e:	bf00      	nop
 8014690:	080146b9 	.word	0x080146b9
 8014694:	08010ca5 	.word	0x08010ca5
 8014698:	08010ca5 	.word	0x08010ca5
 801469c:	08010ca5 	.word	0x08010ca5
 80146a0:	08010ca5 	.word	0x08010ca5
 80146a4:	080146c9 	.word	0x080146c9
 80146a8:	08010ca5 	.word	0x08010ca5
 80146ac:	080146d9 	.word	0x080146d9
 80146b0:	08010ca5 	.word	0x08010ca5
 80146b4:	080146e9 	.word	0x080146e9
						case DataSet1_Screen: GUI_screen_state = DataSet1_Screen; 	Prev_Inf_Screen = Measure_Screen;	break;
 80146b8:	2307      	movs	r3, #7
 80146ba:	f88b 3000 	strb.w	r3, [fp]
 80146be:	4b1f      	ldr	r3, [pc, #124]	; (801473c <GUI_Touch_Processing+0x3bb4>)
 80146c0:	2201      	movs	r2, #1
 80146c2:	701a      	strb	r2, [r3, #0]
 80146c4:	f7fc baee 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case GraphSet1_Screen: GUI_screen_state = GraphSet1_Screen; Prev_Inf_Screen = Graph_Screen; 		break;
 80146c8:	230c      	movs	r3, #12
 80146ca:	f88b 3000 	strb.w	r3, [fp]
 80146ce:	4b1b      	ldr	r3, [pc, #108]	; (801473c <GUI_Touch_Processing+0x3bb4>)
 80146d0:	2204      	movs	r2, #4
 80146d2:	701a      	strb	r2, [r3, #0]
 80146d4:	f7fc bae6 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case ColorSet1_Screen: GUI_screen_state = ColorSet1_Screen; Prev_Inf_Screen = Color_Screen; break;
 80146d8:	230e      	movs	r3, #14
 80146da:	f88b 3000 	strb.w	r3, [fp]
 80146de:	4b17      	ldr	r3, [pc, #92]	; (801473c <GUI_Touch_Processing+0x3bb4>)
 80146e0:	2205      	movs	r2, #5
 80146e2:	701a      	strb	r2, [r3, #0]
 80146e4:	f7fc bade 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
						case ColorRendSet_Screen: GUI_screen_state = ColorRendSet_Screen; Prev_Inf_Screen = Color_Rendition_Screen; break;
 80146e8:	2310      	movs	r3, #16
 80146ea:	f88b 3000 	strb.w	r3, [fp]
 80146ee:	4b13      	ldr	r3, [pc, #76]	; (801473c <GUI_Touch_Processing+0x3bb4>)
 80146f0:	2206      	movs	r2, #6
 80146f2:	701a      	strb	r2, [r3, #0]
 80146f4:	f7fc bad6 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
		default: preGUI_screen_state = Measure_Screen;
 80146f8:	4b13      	ldr	r3, [pc, #76]	; (8014748 <GUI_Touch_Processing+0x3bc0>)
 80146fa:	2201      	movs	r2, #1
 80146fc:	701a      	strb	r2, [r3, #0]
 80146fe:	f7fc bad1 	b.w	8010ca4 <GUI_Touch_Processing+0x11c>
 8014702:	bf00      	nop
 8014704:	f3af 8000 	nop.w
 8014708:	00000000 	.word	0x00000000
 801470c:	40623800 	.word	0x40623800
 8014710:	99999999 	.word	0x99999999
 8014714:	40720d99 	.word	0x40720d99
 8014718:	00000000 	.word	0x00000000
 801471c:	4073e000 	.word	0x4073e000
 8014720:	33333333 	.word	0x33333333
 8014724:	40353333 	.word	0x40353333
 8014728:	00000000 	.word	0x00000000
 801472c:	40865c00 	.word	0x40865c00
 8014730:	00000000 	.word	0x00000000
 8014734:	40937600 	.word	0x40937600
 8014738:	20004c9e 	.word	0x20004c9e
 801473c:	2008bce5 	.word	0x2008bce5
 8014740:	20004c71 	.word	0x20004c71
 8014744:	406a8000 	.word	0x406a8000
 8014748:	2000022a 	.word	0x2000022a
 801474c:	2008c288 	.word	0x2008c288
 8014750:	66666666 	.word	0x66666666
 8014754:	4081f866 	.word	0x4081f866
 8014758:	33333333 	.word	0x33333333
 801475c:	40867133 	.word	0x40867133
 8014760:	33333333 	.word	0x33333333
 8014764:	40053333 	.word	0x40053333

08014768 <GUI_Bluetooth_Logo>:

extern UART_HandleTypeDef hlpuart1;
extern uint8_t BluetoothStat;

void GUI_Bluetooth_Logo(uint16_t X, uint16_t Y)
{
 8014768:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 801476c:	f101 031e 	add.w	r3, r1, #30
{
 8014770:	460c      	mov	r4, r1
 8014772:	4605      	mov	r5, r0
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 8014774:	f100 0214 	add.w	r2, r0, #20
 8014778:	2605      	movs	r6, #5
 801477a:	f241 3776 	movw	r7, #4982	; 0x1376
 801477e:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8014782:	b29b      	uxth	r3, r3
 8014784:	b292      	uxth	r2, r2
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8014786:	f105 060a 	add.w	r6, r5, #10
 801478a:	f104 0a1a 	add.w	sl, r4, #26
	TFT_DrawFilledRoundedRectangle(X, Y, X+20, Y+30, 5, TFT_Blue_Off); 
 801478e:	f009 ff41 	bl	801e614 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 8014792:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8014796:	b2b6      	uxth	r6, r6
 8014798:	fa1f fa8a 	uxth.w	sl, sl
 801479c:	1d21      	adds	r1, r4, #4
 801479e:	4653      	mov	r3, sl
 80147a0:	4632      	mov	r2, r6
 80147a2:	4630      	mov	r0, r6
 80147a4:	f8cd 8000 	str.w	r8, [sp]
 80147a8:	b289      	uxth	r1, r1
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80147aa:	f105 070f 	add.w	r7, r5, #15
 80147ae:	f104 090b 	add.w	r9, r4, #11
	TFT_DrawLine(X+10, Y+4, X+10, Y+26, TFT_White);
 80147b2:	f009 fd4d 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80147b6:	b2bf      	uxth	r7, r7
 80147b8:	fa1f f989 	uxth.w	r9, r9
 80147bc:	1d61      	adds	r1, r4, #5
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 80147be:	3506      	adds	r5, #6
 80147c0:	3414      	adds	r4, #20
 80147c2:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80147c4:	464b      	mov	r3, r9
 80147c6:	463a      	mov	r2, r7
 80147c8:	4630      	mov	r0, r6
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 80147ca:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+10, Y+5, X+15, Y+11, TFT_White);
 80147cc:	f8cd 8000 	str.w	r8, [sp]
 80147d0:	b289      	uxth	r1, r1
 80147d2:	f009 fd3d 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+20, X+15, Y+11, TFT_White);
 80147d6:	464b      	mov	r3, r9
 80147d8:	463a      	mov	r2, r7
 80147da:	4621      	mov	r1, r4
 80147dc:	4628      	mov	r0, r5
 80147de:	f8cd 8000 	str.w	r8, [sp]
 80147e2:	f009 fd35 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+15, Y+20, TFT_White);
 80147e6:	4623      	mov	r3, r4
 80147e8:	463a      	mov	r2, r7
 80147ea:	4649      	mov	r1, r9
 80147ec:	4628      	mov	r0, r5
 80147ee:	f8cd 8000 	str.w	r8, [sp]
 80147f2:	f009 fd2d 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+26, X+15, Y+20,TFT_White);
 80147f6:	f8cd 8000 	str.w	r8, [sp]
 80147fa:	4623      	mov	r3, r4
 80147fc:	463a      	mov	r2, r7
 80147fe:	4651      	mov	r1, sl
 8014800:	4630      	mov	r0, r6
 8014802:	f009 fd25 	bl	801e250 <TFT_DrawLine>
}
 8014806:	b002      	add	sp, #8
 8014808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801480c <GUI_Button_Settings>:


void GUI_Button_Settings(uint16_t X, uint16_t Y)
{
 801480c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014810:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8014814:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014816:	f100 0236 	add.w	r2, r0, #54	; 0x36
 801481a:	f241 3676 	movw	r6, #4982	; 0x1376
{
 801481e:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014820:	9600      	str	r6, [sp, #0]
 8014822:	b29b      	uxth	r3, r3
 8014824:	b292      	uxth	r2, r2
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 8014826:	f105 0608 	add.w	r6, r5, #8
 801482a:	352f      	adds	r5, #47	; 0x2f
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801482c:	f009 fd6d 	bl	801e30a <TFT_FillRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+13, X+47, Y+19, 2, TFT_White);
 8014830:	b2b6      	uxth	r6, r6
 8014832:	b2ad      	uxth	r5, r5
 8014834:	2702      	movs	r7, #2
 8014836:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801483a:	f104 0313 	add.w	r3, r4, #19
 801483e:	f104 010d 	add.w	r1, r4, #13
 8014842:	462a      	mov	r2, r5
 8014844:	4630      	mov	r0, r6
 8014846:	e88d 0180 	stmia.w	sp, {r7, r8}
 801484a:	b29b      	uxth	r3, r3
 801484c:	b289      	uxth	r1, r1
 801484e:	f009 fee1 	bl	801e614 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+25, X+47, Y+31, 2, TFT_White);
 8014852:	f104 031f 	add.w	r3, r4, #31
 8014856:	f104 0119 	add.w	r1, r4, #25
 801485a:	462a      	mov	r2, r5
 801485c:	4630      	mov	r0, r6
 801485e:	e88d 0180 	stmia.w	sp, {r7, r8}
 8014862:	b29b      	uxth	r3, r3
 8014864:	b289      	uxth	r1, r1
 8014866:	f009 fed5 	bl	801e614 <TFT_DrawFilledRoundedRectangle>
	TFT_DrawFilledRoundedRectangle(X+8, Y+37, X+47, Y+43, 2, TFT_White);
 801486a:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 801486e:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8014872:	e88d 0180 	stmia.w	sp, {r7, r8}
 8014876:	b29b      	uxth	r3, r3
 8014878:	462a      	mov	r2, r5
 801487a:	b289      	uxth	r1, r1
 801487c:	4630      	mov	r0, r6
 801487e:	f009 fec9 	bl	801e614 <TFT_DrawFilledRoundedRectangle>
}
 8014882:	b002      	add	sp, #8
 8014884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014888 <GUI_Button_Down>:

void GUI_Button_Down(uint16_t X, uint16_t Y)
{
 8014888:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 801488c:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8014890:	4604      	mov	r4, r0
 8014892:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014894:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8014898:	f241 3676 	movw	r6, #4982	; 0x1376
 801489c:	9600      	str	r6, [sp, #0]
 801489e:	b29b      	uxth	r3, r3
 80148a0:	b292      	uxth	r2, r2
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 80148a2:	f105 0612 	add.w	r6, r5, #18
 80148a6:	f104 081c 	add.w	r8, r4, #28
 80148aa:	3528      	adds	r5, #40	; 0x28
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80148ac:	f009 fd2d 	bl	801e30a <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 80148b0:	b2b6      	uxth	r6, r6
 80148b2:	b2ad      	uxth	r5, r5
 80148b4:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80148b8:	fa1f f888 	uxth.w	r8, r8
 80148bc:	f104 000c 	add.w	r0, r4, #12
 80148c0:	462b      	mov	r3, r5
 80148c2:	4642      	mov	r2, r8
 80148c4:	4631      	mov	r1, r6
 80148c6:	9700      	str	r7, [sp, #0]
 80148c8:	b280      	uxth	r0, r0
 80148ca:	f009 fcc1 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 80148ce:	f104 021d 	add.w	r2, r4, #29
 80148d2:	f104 000d 	add.w	r0, r4, #13
 80148d6:	462b      	mov	r3, r5
 80148d8:	4631      	mov	r1, r6
 80148da:	9700      	str	r7, [sp, #0]
 80148dc:	b292      	uxth	r2, r2
 80148de:	b280      	uxth	r0, r0
 80148e0:	f009 fcb6 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 80148e4:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 80148e8:	462b      	mov	r3, r5
 80148ea:	4642      	mov	r2, r8
 80148ec:	4631      	mov	r1, r6
 80148ee:	9700      	str	r7, [sp, #0]
 80148f0:	b280      	uxth	r0, r0
 80148f2:	f009 fcad 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 80148f6:	f104 021b 	add.w	r2, r4, #27
 80148fa:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 80148fe:	9700      	str	r7, [sp, #0]
 8014900:	462b      	mov	r3, r5
 8014902:	b292      	uxth	r2, r2
 8014904:	4631      	mov	r1, r6
 8014906:	b280      	uxth	r0, r0
 8014908:	f009 fca2 	bl	801e250 <TFT_DrawLine>
}
 801490c:	b002      	add	sp, #8
 801490e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014912 <GUI_Button_Down_Active>:

void GUI_Button_Down_Active(uint16_t X, uint16_t Y, uint8_t Active)
{
 8014912:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8014916:	f101 0336 	add.w	r3, r1, #54	; 0x36
 801491a:	4604      	mov	r4, r0
 801491c:	460d      	mov	r5, r1
 801491e:	f100 0636 	add.w	r6, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8014922:	2a00      	cmp	r2, #0
 8014924:	d03c      	beq.n	80149a0 <GUI_Button_Down_Active+0x8e>
 8014926:	f241 3276 	movw	r2, #4982	; 0x1376
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 801492a:	9200      	str	r2, [sp, #0]
 801492c:	b29b      	uxth	r3, r3
 801492e:	b2b2      	uxth	r2, r6
	
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 8014930:	f104 081c 	add.w	r8, r4, #28
 8014934:	f105 0612 	add.w	r6, r5, #18
 8014938:	3528      	adds	r5, #40	; 0x28
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 801493a:	f009 fce6 	bl	801e30a <TFT_FillRectangle>
	TFT_DrawLine(X+12, Y+18, X+28, Y+40, TFT_White);
 801493e:	b2b6      	uxth	r6, r6
 8014940:	b2ad      	uxth	r5, r5
 8014942:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8014946:	fa1f f888 	uxth.w	r8, r8
 801494a:	f104 000c 	add.w	r0, r4, #12
 801494e:	462b      	mov	r3, r5
 8014950:	4642      	mov	r2, r8
 8014952:	4631      	mov	r1, r6
 8014954:	9700      	str	r7, [sp, #0]
 8014956:	b280      	uxth	r0, r0
 8014958:	f009 fc7a 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+18, X+29, Y+40, TFT_White);
 801495c:	f104 021d 	add.w	r2, r4, #29
 8014960:	f104 000d 	add.w	r0, r4, #13
 8014964:	462b      	mov	r3, r5
 8014966:	4631      	mov	r1, r6
 8014968:	9700      	str	r7, [sp, #0]
 801496a:	b292      	uxth	r2, r2
 801496c:	b280      	uxth	r0, r0
 801496e:	f009 fc6f 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+43, Y+18, X+28, Y+40, TFT_White);
 8014972:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8014976:	462b      	mov	r3, r5
 8014978:	4642      	mov	r2, r8
 801497a:	4631      	mov	r1, r6
 801497c:	9700      	str	r7, [sp, #0]
 801497e:	b280      	uxth	r0, r0
 8014980:	f009 fc66 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+42, Y+18, X+27, Y+40, TFT_White);
 8014984:	f104 021b 	add.w	r2, r4, #27
 8014988:	f104 002a 	add.w	r0, r4, #42	; 0x2a
 801498c:	9700      	str	r7, [sp, #0]
 801498e:	462b      	mov	r3, r5
 8014990:	b292      	uxth	r2, r2
 8014992:	4631      	mov	r1, r6
 8014994:	b280      	uxth	r0, r0
 8014996:	f009 fc5b 	bl	801e250 <TFT_DrawLine>
}
 801499a:	b002      	add	sp, #8
 801499c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else {TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 80149a0:	f64d 721c 	movw	r2, #57116	; 0xdf1c
 80149a4:	e7c1      	b.n	801492a <GUI_Button_Down_Active+0x18>

080149a6 <GUI_Button_Right>:

void GUI_Button_Right(uint16_t X, uint16_t Y)
{
 80149a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149aa:	4604      	mov	r4, r0
 80149ac:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80149ae:	f241 3676 	movw	r6, #4982	; 0x1376
 80149b2:	f101 0336 	add.w	r3, r1, #54	; 0x36
 80149b6:	f100 0236 	add.w	r2, r0, #54	; 0x36
 80149ba:	9600      	str	r6, [sp, #0]
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80149bc:	f104 0a13 	add.w	sl, r4, #19
 80149c0:	f105 0b0c 	add.w	fp, r5, #12
 80149c4:	f104 0928 	add.w	r9, r4, #40	; 0x28
 80149c8:	f105 061b 	add.w	r6, r5, #27
 80149cc:	b2b6      	uxth	r6, r6
 80149ce:	f64f 78ff 	movw	r8, #65535	; 0xffff
 80149d2:	fa1f fa8a 	uxth.w	sl, sl
 80149d6:	fa1f fb8b 	uxth.w	fp, fp
 80149da:	fa1f f989 	uxth.w	r9, r9
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80149de:	b29b      	uxth	r3, r3
 80149e0:	b292      	uxth	r2, r2
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 80149e2:	f104 0712 	add.w	r7, r4, #18
 80149e6:	3427      	adds	r4, #39	; 0x27
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 80149e8:	f009 fc8f 	bl	801e30a <TFT_FillRectangle>
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 80149ec:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80149ee:	4633      	mov	r3, r6
 80149f0:	464a      	mov	r2, r9
 80149f2:	4659      	mov	r1, fp
 80149f4:	4650      	mov	r0, sl
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 80149f6:	b2a4      	uxth	r4, r4
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80149f8:	f8cd 8000 	str.w	r8, [sp]
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 80149fc:	352a      	adds	r5, #42	; 0x2a
	TFT_DrawLine(X+19, Y+12, X+40, Y+27, TFT_White);
 80149fe:	f009 fc27 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8014a02:	b2ad      	uxth	r5, r5
	TFT_DrawLine(X+18, Y+12, X+39, Y+27, TFT_White);
 8014a04:	4633      	mov	r3, r6
 8014a06:	4622      	mov	r2, r4
 8014a08:	4659      	mov	r1, fp
 8014a0a:	4638      	mov	r0, r7
 8014a0c:	f8cd 8000 	str.w	r8, [sp]
 8014a10:	f009 fc1e 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+40, Y+27, X+19, Y+42, TFT_White);
 8014a14:	462b      	mov	r3, r5
 8014a16:	4652      	mov	r2, sl
 8014a18:	4631      	mov	r1, r6
 8014a1a:	4648      	mov	r0, r9
 8014a1c:	f8cd 8000 	str.w	r8, [sp]
 8014a20:	f009 fc16 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+39, Y+27, X+18, Y+42, TFT_White);
 8014a24:	f8cd 8000 	str.w	r8, [sp]
 8014a28:	462b      	mov	r3, r5
 8014a2a:	463a      	mov	r2, r7
 8014a2c:	4631      	mov	r1, r6
 8014a2e:	4620      	mov	r0, r4
 8014a30:	f009 fc0e 	bl	801e250 <TFT_DrawLine>
}
 8014a34:	b003      	add	sp, #12
 8014a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08014a3a <GUI_Button_TFT_On_Off>:

void GUI_Button_TFT_On_Off(uint16_t X, uint16_t Y)
{
 8014a3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014a3c:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8014a40:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8014a44:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8014a48:	4604      	mov	r4, r0
 8014a4a:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014a4c:	9600      	str	r6, [sp, #0]
 8014a4e:	b29b      	uxth	r3, r3
 8014a50:	b292      	uxth	r2, r2
 8014a52:	f009 fc5a 	bl	801e30a <TFT_FillRectangle>
	TFT_DrawRectangle(X+8, Y+16, X+48, Y+39, TFT_White);
 8014a56:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8014a5a:	f105 0327 	add.w	r3, r5, #39	; 0x27
 8014a5e:	f104 0230 	add.w	r2, r4, #48	; 0x30
 8014a62:	f105 0110 	add.w	r1, r5, #16
 8014a66:	f104 0008 	add.w	r0, r4, #8
 8014a6a:	9600      	str	r6, [sp, #0]
 8014a6c:	b29b      	uxth	r3, r3
 8014a6e:	b292      	uxth	r2, r2
 8014a70:	b289      	uxth	r1, r1
 8014a72:	b280      	uxth	r0, r0
 8014a74:	f009 fc61 	bl	801e33a <TFT_DrawRectangle>
	TFT_DrawLine(X+6, Y+5, X+51, Y+48, TFT_White);
 8014a78:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8014a7c:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8014a80:	1d69      	adds	r1, r5, #5
 8014a82:	1da0      	adds	r0, r4, #6
 8014a84:	9600      	str	r6, [sp, #0]
 8014a86:	b29b      	uxth	r3, r3
 8014a88:	b292      	uxth	r2, r2
 8014a8a:	b289      	uxth	r1, r1
 8014a8c:	b280      	uxth	r0, r0
 8014a8e:	f009 fbdf 	bl	801e250 <TFT_DrawLine>
}
 8014a92:	b002      	add	sp, #8
 8014a94:	bd70      	pop	{r4, r5, r6, pc}

08014a96 <GUI_Button_TFT_Rotate>:

void GUI_Button_TFT_Rotate(uint16_t X, uint16_t Y)
{
 8014a96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014a9a:	f101 0336 	add.w	r3, r1, #54	; 0x36
{
 8014a9e:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014aa0:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8014aa4:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8014aa8:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014aaa:	9600      	str	r6, [sp, #0]
 8014aac:	b29b      	uxth	r3, r3
 8014aae:	b292      	uxth	r2, r2
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8014ab0:	f105 071c 	add.w	r7, r5, #28
 8014ab4:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014ab8:	f009 fc27 	bl	801e30a <TFT_FillRectangle>
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8014abc:	b2bf      	uxth	r7, r7
 8014abe:	f104 032b 	add.w	r3, r4, #43	; 0x2b
 8014ac2:	f104 0109 	add.w	r1, r4, #9
 8014ac6:	f105 0009 	add.w	r0, r5, #9
 8014aca:	463a      	mov	r2, r7
 8014acc:	9600      	str	r6, [sp, #0]
 8014ace:	b29b      	uxth	r3, r3
 8014ad0:	b289      	uxth	r1, r1
 8014ad2:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 8014ad4:	f104 081e 	add.w	r8, r4, #30
	TFT_DrawRectangle(X+9, Y+9, X+28, Y+43, TFT_White);
 8014ad8:	f009 fc2f 	bl	801e33a <TFT_DrawRectangle>
	TFT_DrawRectangle(X+18, Y+30, X+49, Y+48, TFT_White);
 8014adc:	fa1f f888 	uxth.w	r8, r8
 8014ae0:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8014ae4:	f105 0231 	add.w	r2, r5, #49	; 0x31
 8014ae8:	f105 0012 	add.w	r0, r5, #18
 8014aec:	4641      	mov	r1, r8
 8014aee:	9600      	str	r6, [sp, #0]
 8014af0:	b29b      	uxth	r3, r3
 8014af2:	b292      	uxth	r2, r2
 8014af4:	b280      	uxth	r0, r0
 8014af6:	f009 fc20 	bl	801e33a <TFT_DrawRectangle>
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
	
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8014afa:	f105 0921 	add.w	r9, r5, #33	; 0x21
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 8014afe:	fa0f f188 	sxth.w	r1, r8
 8014b02:	b238      	sxth	r0, r7
 8014b04:	9600      	str	r6, [sp, #0]
 8014b06:	2302      	movs	r3, #2
 8014b08:	2210      	movs	r2, #16
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8014b0a:	f105 071d 	add.w	r7, r5, #29
 8014b0e:	f104 080e 	add.w	r8, r4, #14
	TFT_DrawCircleCorner(X+28, Y+30, 16, 2, TFT_White);
 8014b12:	f009 fa53 	bl	801dfbc <TFT_DrawCircleCorner>
	TFT_DrawLine(X+29, Y+14, X+33, Y+19, TFT_White); //arrow up left
 8014b16:	b2bf      	uxth	r7, r7
 8014b18:	fa1f f888 	uxth.w	r8, r8
 8014b1c:	fa1f f989 	uxth.w	r9, r9
 8014b20:	f104 0313 	add.w	r3, r4, #19
 8014b24:	464a      	mov	r2, r9
 8014b26:	4641      	mov	r1, r8
 8014b28:	4638      	mov	r0, r7
 8014b2a:	9600      	str	r6, [sp, #0]
 8014b2c:	b29b      	uxth	r3, r3
 8014b2e:	f009 fb8f 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 8014b32:	f104 030b 	add.w	r3, r4, #11
 8014b36:	464a      	mov	r2, r9
 8014b38:	4641      	mov	r1, r8
 8014b3a:	4638      	mov	r0, r7
 8014b3c:	9600      	str	r6, [sp, #0]
 8014b3e:	b29b      	uxth	r3, r3
	
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 8014b40:	f105 072c 	add.w	r7, r5, #44	; 0x2c
 8014b44:	f104 081d 	add.w	r8, r4, #29
 8014b48:	3419      	adds	r4, #25
	TFT_DrawLine(X+29, Y+14, X+33, Y+11, TFT_White);
 8014b4a:	f009 fb81 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+39, Y+25, TFT_White); //arrow down right
 8014b4e:	b2bf      	uxth	r7, r7
 8014b50:	fa1f f888 	uxth.w	r8, r8
 8014b54:	b2a4      	uxth	r4, r4
 8014b56:	f105 0227 	add.w	r2, r5, #39	; 0x27
 8014b5a:	4623      	mov	r3, r4
 8014b5c:	4641      	mov	r1, r8
 8014b5e:	4638      	mov	r0, r7
 8014b60:	9600      	str	r6, [sp, #0]
 8014b62:	b292      	uxth	r2, r2
 8014b64:	f009 fb74 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+44, Y+29, X+47, Y+25, TFT_White);
 8014b68:	f105 022f 	add.w	r2, r5, #47	; 0x2f
 8014b6c:	9600      	str	r6, [sp, #0]
 8014b6e:	4623      	mov	r3, r4
 8014b70:	b292      	uxth	r2, r2
 8014b72:	4641      	mov	r1, r8
 8014b74:	4638      	mov	r0, r7
 8014b76:	f009 fb6b 	bl	801e250 <TFT_DrawLine>
}
 8014b7a:	b003      	add	sp, #12
 8014b7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08014b80 <GUI_Button_SD_Card>:

void GUI_Button_SD_Card(uint16_t X, uint16_t Y, uint8_t Active)
{
 8014b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b84:	b085      	sub	sp, #20
 8014b86:	4604      	mov	r4, r0
	
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8014b88:	9203      	str	r2, [sp, #12]
 8014b8a:	9e03      	ldr	r6, [sp, #12]
{
 8014b8c:	460d      	mov	r5, r1
 8014b8e:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8014b92:	f100 0236 	add.w	r2, r0, #54	; 0x36
	if(Active){TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);}
 8014b96:	2e00      	cmp	r6, #0
 8014b98:	f000 80b6 	beq.w	8014d08 <GUI_Button_SD_Card+0x188>
 8014b9c:	f241 3676 	movw	r6, #4982	; 0x1376
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
	
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8014ba0:	f104 0715 	add.w	r7, r4, #21
 8014ba4:	f105 0b05 	add.w	fp, r5, #5
 8014ba8:	f104 092e 	add.w	r9, r4, #46	; 0x2e
 8014bac:	f105 0a07 	add.w	sl, r5, #7
 8014bb0:	b2bf      	uxth	r7, r7
 8014bb2:	fa1f f989 	uxth.w	r9, r9
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8014bb6:	9600      	str	r6, [sp, #0]
 8014bb8:	b29b      	uxth	r3, r3
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8014bba:	f64f 76ff 	movw	r6, #65535	; 0xffff
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8014bbe:	b292      	uxth	r2, r2
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8014bc0:	fa1f fb8b 	uxth.w	fp, fp
 8014bc4:	fa1f fa8a 	uxth.w	sl, sl
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8014bc8:	f009 fb9f 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8014bcc:	f105 0832 	add.w	r8, r5, #50	; 0x32
	TFT_FillRectangle(X+21, Y+5, X+46, Y+7, TFT_White); //SD contour
 8014bd0:	464a      	mov	r2, r9
 8014bd2:	4638      	mov	r0, r7
 8014bd4:	4653      	mov	r3, sl
 8014bd6:	4659      	mov	r1, fp
 8014bd8:	9600      	str	r6, [sp, #0]
 8014bda:	f009 fb96 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8014bde:	fa1f f888 	uxth.w	r8, r8
 8014be2:	f105 0108 	add.w	r1, r5, #8
 8014be6:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8014bea:	4643      	mov	r3, r8
 8014bec:	464a      	mov	r2, r9
 8014bee:	b289      	uxth	r1, r1
 8014bf0:	b280      	uxth	r0, r0
 8014bf2:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 8014bf4:	f104 090a 	add.w	r9, r4, #10
	TFT_FillRectangle(X+44, Y+8, X+46, Y+50, TFT_White);
 8014bf8:	f009 fb87 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X+43, Y+48, X+10, Y+50, TFT_White);
 8014bfc:	fa1f f989 	uxth.w	r9, r9
 8014c00:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8014c04:	f104 002b 	add.w	r0, r4, #43	; 0x2b
 8014c08:	4643      	mov	r3, r8
 8014c0a:	464a      	mov	r2, r9
 8014c0c:	b289      	uxth	r1, r1
 8014c0e:	b280      	uxth	r0, r0
 8014c10:	9600      	str	r6, [sp, #0]
 8014c12:	f009 fb7a 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X+10, Y+16, X+12, Y+47, TFT_White);
 8014c16:	f104 030c 	add.w	r3, r4, #12
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	f105 0810 	add.w	r8, r5, #16
 8014c20:	fa1f f888 	uxth.w	r8, r8
 8014c24:	9302      	str	r3, [sp, #8]
 8014c26:	f105 032f 	add.w	r3, r5, #47	; 0x2f
 8014c2a:	4641      	mov	r1, r8
 8014c2c:	4648      	mov	r0, r9
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	9a02      	ldr	r2, [sp, #8]
 8014c32:	9600      	str	r6, [sp, #0]
 8014c34:	f009 fb69 	bl	801e30a <TFT_FillRectangle>
	
	TFT_DrawLine(X+10, Y+16, X+21, Y+5, TFT_White);
 8014c38:	463a      	mov	r2, r7
 8014c3a:	4641      	mov	r1, r8
 8014c3c:	4648      	mov	r0, r9
 8014c3e:	465b      	mov	r3, fp
 8014c40:	9600      	str	r6, [sp, #0]
 8014c42:	f009 fb05 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+16, X+21, Y+6, TFT_White);
 8014c46:	1dab      	adds	r3, r5, #6
 8014c48:	f104 000b 	add.w	r0, r4, #11
 8014c4c:	463a      	mov	r2, r7
 8014c4e:	4641      	mov	r1, r8
 8014c50:	b29b      	uxth	r3, r3
 8014c52:	b280      	uxth	r0, r0
 8014c54:	9600      	str	r6, [sp, #0]
 8014c56:	f009 fafb 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
	
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8014c5a:	f105 0913 	add.w	r9, r5, #19
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8014c5e:	463a      	mov	r2, r7
 8014c60:	4641      	mov	r1, r8
 8014c62:	4653      	mov	r3, sl
 8014c64:	9802      	ldr	r0, [sp, #8]
 8014c66:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8014c68:	f105 080d 	add.w	r8, r5, #13
	TFT_DrawLine(X+12, Y+16, X+21, Y+7, TFT_White);
 8014c6c:	f009 faf0 	bl	801e250 <TFT_DrawLine>
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8014c70:	fa1f f888 	uxth.w	r8, r8
 8014c74:	fa1f f989 	uxth.w	r9, r9
 8014c78:	f104 0013 	add.w	r0, r4, #19
 8014c7c:	463a      	mov	r2, r7
 8014c7e:	464b      	mov	r3, r9
 8014c80:	4641      	mov	r1, r8
 8014c82:	b280      	uxth	r0, r0
 8014c84:	9600      	str	r6, [sp, #0]
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 8014c86:	f104 071b 	add.w	r7, r4, #27
	TFT_FillRectangle(X+19, Y+13, X+21, Y+19, TFT_White); //SD pins
 8014c8a:	f009 fb3e 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X+25, Y+13, X+27, Y+19, TFT_White);
 8014c8e:	b2bf      	uxth	r7, r7
 8014c90:	f104 0019 	add.w	r0, r4, #25
 8014c94:	464b      	mov	r3, r9
 8014c96:	463a      	mov	r2, r7
 8014c98:	4641      	mov	r1, r8
 8014c9a:	b280      	uxth	r0, r0
 8014c9c:	9600      	str	r6, [sp, #0]
 8014c9e:	f009 fb34 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X+31, Y+13, X+33, Y+19, TFT_White);
 8014ca2:	f104 0221 	add.w	r2, r4, #33	; 0x21
 8014ca6:	f104 001f 	add.w	r0, r4, #31
 8014caa:	464b      	mov	r3, r9
 8014cac:	b292      	uxth	r2, r2
 8014cae:	4641      	mov	r1, r8
 8014cb0:	b280      	uxth	r0, r0
 8014cb2:	9600      	str	r6, [sp, #0]
 8014cb4:	f009 fb29 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X+37, Y+13, X+39, Y+19, TFT_White);
 8014cb8:	f104 0227 	add.w	r2, r4, #39	; 0x27
 8014cbc:	f104 0025 	add.w	r0, r4, #37	; 0x25
 8014cc0:	464b      	mov	r3, r9
 8014cc2:	b292      	uxth	r2, r2
 8014cc4:	4641      	mov	r1, r8
 8014cc6:	b280      	uxth	r0, r0
 8014cc8:	9600      	str	r6, [sp, #0]
 8014cca:	f009 fb1e 	bl	801e30a <TFT_FillRectangle>
	
	TFT_SetFont(&Font20);
 8014cce:	4811      	ldr	r0, [pc, #68]	; (8014d14 <GUI_Button_SD_Card+0x194>)
 8014cd0:	f009 fd44 	bl	801e75c <TFT_SetFont>
	TFT_SetTextColor(TFT_White);
 8014cd4:	4630      	mov	r0, r6
 8014cd6:	f009 fd47 	bl	801e768 <TFT_SetTextColor>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8014cda:	9b03      	ldr	r3, [sp, #12]
 8014cdc:	b1bb      	cbz	r3, 8014d0e <GUI_Button_SD_Card+0x18e>
 8014cde:	f241 3076 	movw	r0, #4982	; 0x1376
	TFT_DrawChar(X+16, Y+28, 'S');
 8014ce2:	351c      	adds	r5, #28
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8014ce4:	f009 fd46 	bl	801e774 <TFT_SetBackColor>
	TFT_DrawChar(X+16, Y+28, 'S');
 8014ce8:	b2ad      	uxth	r5, r5
 8014cea:	f104 0010 	add.w	r0, r4, #16
 8014cee:	4629      	mov	r1, r5
 8014cf0:	2253      	movs	r2, #83	; 0x53
 8014cf2:	b280      	uxth	r0, r0
 8014cf4:	f009 fdfc 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+28, 'D');
 8014cf8:	2244      	movs	r2, #68	; 0x44
 8014cfa:	4629      	mov	r1, r5
 8014cfc:	4638      	mov	r0, r7
}
 8014cfe:	b005      	add	sp, #20
 8014d00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawChar(X+27, Y+28, 'D');
 8014d04:	f009 bdf4 	b.w	801e8f0 <TFT_DrawChar>
	else{TFT_FillRectangle(X, Y, X+54, Y+54, TFT_GreyMain);}
 8014d08:	f64d 761c 	movw	r6, #57116	; 0xdf1c
 8014d0c:	e748      	b.n	8014ba0 <GUI_Button_SD_Card+0x20>
	Active ? TFT_SetBackColor(TFT_Blue_Off) : TFT_SetBackColor(TFT_GreyMain);
 8014d0e:	f64d 701c 	movw	r0, #57116	; 0xdf1c
 8014d12:	e7e6      	b.n	8014ce2 <GUI_Button_SD_Card+0x162>
 8014d14:	200001e0 	.word	0x200001e0

08014d18 <GUI_Button_Measure_Start_Pause>:

void GUI_Button_Measure_Start_Pause(uint16_t X, uint16_t Y)
{
 8014d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d1c:	b085      	sub	sp, #20
 8014d1e:	460c      	mov	r4, r1
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014d20:	f101 0336 	add.w	r3, r1, #54	; 0x36
 8014d24:	f100 0236 	add.w	r2, r0, #54	; 0x36
 8014d28:	f241 3676 	movw	r6, #4982	; 0x1376
{
 8014d2c:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014d2e:	9600      	str	r6, [sp, #0]
 8014d30:	b29b      	uxth	r3, r3
 8014d32:	b292      	uxth	r2, r2
	
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 8014d34:	f104 090b 	add.w	r9, r4, #11
 8014d38:	f104 072b 	add.w	r7, r4, #43	; 0x2b
 8014d3c:	f64f 76ff 	movw	r6, #65535	; 0xffff
	TFT_FillRectangle(X, Y, X+54, Y+54, TFT_Blue_Off);
 8014d40:	f009 fae3 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X+35, Y+11, X+37, Y+43, TFT_White); //Pause
 8014d44:	fa1f f989 	uxth.w	r9, r9
 8014d48:	b2bf      	uxth	r7, r7
 8014d4a:	f105 0225 	add.w	r2, r5, #37	; 0x25
 8014d4e:	f105 0023 	add.w	r0, r5, #35	; 0x23
 8014d52:	463b      	mov	r3, r7
 8014d54:	4649      	mov	r1, r9
 8014d56:	9600      	str	r6, [sp, #0]
 8014d58:	b292      	uxth	r2, r2
 8014d5a:	b280      	uxth	r0, r0
 8014d5c:	f009 fad5 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 8014d60:	f105 0232 	add.w	r2, r5, #50	; 0x32
 8014d64:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8014d68:	463b      	mov	r3, r7
 8014d6a:	4649      	mov	r1, r9
 8014d6c:	9600      	str	r6, [sp, #0]
 8014d6e:	b292      	uxth	r2, r2
 8014d70:	b280      	uxth	r0, r0
	
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8014d72:	f105 0806 	add.w	r8, r5, #6
	TFT_FillRectangle(X+48, Y+11, X+50, Y+43, TFT_White);
 8014d76:	f009 fac8 	bl	801e30a <TFT_FillRectangle>
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8014d7a:	fa1f f888 	uxth.w	r8, r8
 8014d7e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 8014d82:	f105 0a1e 	add.w	sl, r5, #30
 8014d86:	f104 0b1b 	add.w	fp, r4, #27
 8014d8a:	fa1f fa8a 	uxth.w	sl, sl
 8014d8e:	fa1f fb8b 	uxth.w	fp, fp
	TFT_DrawLine(X+6, Y+11, X+6, Y+44, TFT_White); //Play
 8014d92:	b29b      	uxth	r3, r3
 8014d94:	4642      	mov	r2, r8
 8014d96:	4649      	mov	r1, r9
 8014d98:	4640      	mov	r0, r8
 8014d9a:	9600      	str	r6, [sp, #0]
 8014d9c:	9303      	str	r3, [sp, #12]
 8014d9e:	f009 fa57 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+11, X+30, Y+27, TFT_White);
 8014da2:	465b      	mov	r3, fp
 8014da4:	4652      	mov	r2, sl
 8014da6:	4649      	mov	r1, r9
 8014da8:	4640      	mov	r0, r8
 8014daa:	9600      	str	r6, [sp, #0]
 8014dac:	f009 fa50 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+44, X+30, Y+27, TFT_White);
 8014db0:	465b      	mov	r3, fp
 8014db2:	4652      	mov	r2, sl
 8014db4:	9903      	ldr	r1, [sp, #12]
 8014db6:	9600      	str	r6, [sp, #0]
 8014db8:	4640      	mov	r0, r8
 8014dba:	f009 fa49 	bl	801e250 <TFT_DrawLine>
	
	//paint white
	TFT_DrawLine(X+7, Y+12, X+7, Y+43, TFT_White);
 8014dbe:	f104 080c 	add.w	r8, r4, #12
 8014dc2:	1dea      	adds	r2, r5, #7
 8014dc4:	b292      	uxth	r2, r2
 8014dc6:	fa1f f888 	uxth.w	r8, r8
 8014dca:	463b      	mov	r3, r7
 8014dcc:	4641      	mov	r1, r8
 8014dce:	4610      	mov	r0, r2
 8014dd0:	9600      	str	r6, [sp, #0]
 8014dd2:	f009 fa3d 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+8, Y+12, X+8, Y+43, TFT_White);
 8014dd6:	f105 0208 	add.w	r2, r5, #8
 8014dda:	b292      	uxth	r2, r2
 8014ddc:	463b      	mov	r3, r7
 8014dde:	4641      	mov	r1, r8
 8014de0:	4610      	mov	r0, r2
 8014de2:	9600      	str	r6, [sp, #0]
 8014de4:	f009 fa34 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+9, Y+13, X+9, Y+42, TFT_White);
 8014de8:	f105 0209 	add.w	r2, r5, #9
 8014dec:	b292      	uxth	r2, r2
 8014dee:	f104 032a 	add.w	r3, r4, #42	; 0x2a
 8014df2:	f104 010d 	add.w	r1, r4, #13
 8014df6:	4610      	mov	r0, r2
 8014df8:	9600      	str	r6, [sp, #0]
 8014dfa:	b29b      	uxth	r3, r3
 8014dfc:	b289      	uxth	r1, r1
 8014dfe:	f009 fa27 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+14, X+10, Y+41, TFT_White);
 8014e02:	f104 080e 	add.w	r8, r4, #14
 8014e06:	f105 020a 	add.w	r2, r5, #10
 8014e0a:	b292      	uxth	r2, r2
 8014e0c:	fa1f f888 	uxth.w	r8, r8
 8014e10:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8014e14:	4641      	mov	r1, r8
 8014e16:	4610      	mov	r0, r2
 8014e18:	9600      	str	r6, [sp, #0]
 8014e1a:	b29b      	uxth	r3, r3
 8014e1c:	f009 fa18 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+11, Y+14, X+11, Y+40, TFT_White);
 8014e20:	f104 0728 	add.w	r7, r4, #40	; 0x28
 8014e24:	f105 020b 	add.w	r2, r5, #11
 8014e28:	b292      	uxth	r2, r2
 8014e2a:	b2bf      	uxth	r7, r7
 8014e2c:	463b      	mov	r3, r7
 8014e2e:	4641      	mov	r1, r8
 8014e30:	4610      	mov	r0, r2
 8014e32:	9600      	str	r6, [sp, #0]
 8014e34:	f009 fa0c 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+15, X+12, Y+40, TFT_White);
 8014e38:	f105 020c 	add.w	r2, r5, #12
 8014e3c:	b292      	uxth	r2, r2
 8014e3e:	f104 010f 	add.w	r1, r4, #15
 8014e42:	463b      	mov	r3, r7
 8014e44:	4610      	mov	r0, r2
 8014e46:	9600      	str	r6, [sp, #0]
 8014e48:	b289      	uxth	r1, r1
 8014e4a:	f009 fa01 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+16, X+13, Y+39, TFT_White);
 8014e4e:	f104 0810 	add.w	r8, r4, #16
 8014e52:	f105 020d 	add.w	r2, r5, #13
 8014e56:	b292      	uxth	r2, r2
 8014e58:	fa1f f888 	uxth.w	r8, r8
 8014e5c:	f104 0327 	add.w	r3, r4, #39	; 0x27
 8014e60:	4641      	mov	r1, r8
 8014e62:	4610      	mov	r0, r2
 8014e64:	9600      	str	r6, [sp, #0]
 8014e66:	b29b      	uxth	r3, r3
 8014e68:	f009 f9f2 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+16, X+14, Y+38, TFT_White);
 8014e6c:	f104 0726 	add.w	r7, r4, #38	; 0x26
 8014e70:	f105 020e 	add.w	r2, r5, #14
 8014e74:	b292      	uxth	r2, r2
 8014e76:	b2bf      	uxth	r7, r7
 8014e78:	463b      	mov	r3, r7
 8014e7a:	4641      	mov	r1, r8
 8014e7c:	4610      	mov	r0, r2
 8014e7e:	9600      	str	r6, [sp, #0]
 8014e80:	f009 f9e6 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+17, X+15, Y+38, TFT_White);
 8014e84:	f105 020f 	add.w	r2, r5, #15
 8014e88:	b292      	uxth	r2, r2
 8014e8a:	f104 0111 	add.w	r1, r4, #17
 8014e8e:	463b      	mov	r3, r7
 8014e90:	4610      	mov	r0, r2
 8014e92:	9600      	str	r6, [sp, #0]
 8014e94:	b289      	uxth	r1, r1
 8014e96:	f009 f9db 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+18, X+16, Y+37, TFT_White);
 8014e9a:	f104 0812 	add.w	r8, r4, #18
 8014e9e:	f105 0210 	add.w	r2, r5, #16
 8014ea2:	b292      	uxth	r2, r2
 8014ea4:	fa1f f888 	uxth.w	r8, r8
 8014ea8:	f104 0325 	add.w	r3, r4, #37	; 0x25
 8014eac:	4641      	mov	r1, r8
 8014eae:	4610      	mov	r0, r2
 8014eb0:	9600      	str	r6, [sp, #0]
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	f009 f9cc 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+18, X+17, Y+36, TFT_White);
 8014eb8:	f104 0724 	add.w	r7, r4, #36	; 0x24
 8014ebc:	f105 0211 	add.w	r2, r5, #17
 8014ec0:	b292      	uxth	r2, r2
 8014ec2:	b2bf      	uxth	r7, r7
 8014ec4:	463b      	mov	r3, r7
 8014ec6:	4641      	mov	r1, r8
 8014ec8:	4610      	mov	r0, r2
 8014eca:	9600      	str	r6, [sp, #0]
 8014ecc:	f009 f9c0 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+19, X+18, Y+36, TFT_White);
 8014ed0:	f105 0212 	add.w	r2, r5, #18
 8014ed4:	b292      	uxth	r2, r2
 8014ed6:	f104 0113 	add.w	r1, r4, #19
 8014eda:	463b      	mov	r3, r7
 8014edc:	4610      	mov	r0, r2
 8014ede:	9600      	str	r6, [sp, #0]
 8014ee0:	b289      	uxth	r1, r1
 8014ee2:	f009 f9b5 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+20, X+19, Y+35, TFT_White);
 8014ee6:	f104 0714 	add.w	r7, r4, #20
 8014eea:	f105 0213 	add.w	r2, r5, #19
 8014eee:	b292      	uxth	r2, r2
 8014ef0:	b2bf      	uxth	r7, r7
 8014ef2:	f104 0323 	add.w	r3, r4, #35	; 0x23
 8014ef6:	4639      	mov	r1, r7
 8014ef8:	4610      	mov	r0, r2
 8014efa:	9600      	str	r6, [sp, #0]
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	f009 f9a7 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+20, X+20, Y+34, TFT_White);
 8014f02:	f105 0214 	add.w	r2, r5, #20
 8014f06:	b292      	uxth	r2, r2
 8014f08:	f104 0322 	add.w	r3, r4, #34	; 0x22
 8014f0c:	4639      	mov	r1, r7
 8014f0e:	4610      	mov	r0, r2
 8014f10:	9600      	str	r6, [sp, #0]
 8014f12:	b29b      	uxth	r3, r3
 8014f14:	f009 f99c 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+21, X+21, Y+33, TFT_White);
 8014f18:	f104 0821 	add.w	r8, r4, #33	; 0x21
 8014f1c:	f105 0215 	add.w	r2, r5, #21
 8014f20:	b292      	uxth	r2, r2
 8014f22:	fa1f f888 	uxth.w	r8, r8
 8014f26:	f104 0115 	add.w	r1, r4, #21
 8014f2a:	4643      	mov	r3, r8
 8014f2c:	4610      	mov	r0, r2
 8014f2e:	9600      	str	r6, [sp, #0]
 8014f30:	b289      	uxth	r1, r1
 8014f32:	f009 f98d 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+22, X+22, Y+33, TFT_White);
 8014f36:	f104 0716 	add.w	r7, r4, #22
 8014f3a:	f105 0216 	add.w	r2, r5, #22
 8014f3e:	b292      	uxth	r2, r2
 8014f40:	b2bf      	uxth	r7, r7
 8014f42:	4643      	mov	r3, r8
 8014f44:	4639      	mov	r1, r7
 8014f46:	4610      	mov	r0, r2
 8014f48:	9600      	str	r6, [sp, #0]
 8014f4a:	f009 f981 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+22, X+23, Y+32, TFT_White);
 8014f4e:	f105 0217 	add.w	r2, r5, #23
 8014f52:	b292      	uxth	r2, r2
 8014f54:	f104 0320 	add.w	r3, r4, #32
 8014f58:	4639      	mov	r1, r7
 8014f5a:	4610      	mov	r0, r2
 8014f5c:	9600      	str	r6, [sp, #0]
 8014f5e:	b29b      	uxth	r3, r3
 8014f60:	f009 f976 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+23, X+24, Y+31, TFT_White);
 8014f64:	f104 081f 	add.w	r8, r4, #31
 8014f68:	f105 0218 	add.w	r2, r5, #24
 8014f6c:	b292      	uxth	r2, r2
 8014f6e:	fa1f f888 	uxth.w	r8, r8
 8014f72:	f104 0117 	add.w	r1, r4, #23
 8014f76:	4643      	mov	r3, r8
 8014f78:	4610      	mov	r0, r2
 8014f7a:	9600      	str	r6, [sp, #0]
 8014f7c:	b289      	uxth	r1, r1
 8014f7e:	f009 f967 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+24, X+25, Y+31, TFT_White);
 8014f82:	f104 0718 	add.w	r7, r4, #24
 8014f86:	f105 0219 	add.w	r2, r5, #25
 8014f8a:	b292      	uxth	r2, r2
 8014f8c:	b2bf      	uxth	r7, r7
 8014f8e:	4643      	mov	r3, r8
 8014f90:	4639      	mov	r1, r7
 8014f92:	4610      	mov	r0, r2
 8014f94:	9600      	str	r6, [sp, #0]
 8014f96:	f009 f95b 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+24, X+26, Y+30, TFT_White);
 8014f9a:	f105 021a 	add.w	r2, r5, #26
 8014f9e:	b292      	uxth	r2, r2
 8014fa0:	f104 031e 	add.w	r3, r4, #30
 8014fa4:	4639      	mov	r1, r7
 8014fa6:	4610      	mov	r0, r2
 8014fa8:	9600      	str	r6, [sp, #0]
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	f009 f950 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+25, X+27, Y+29, TFT_White);
 8014fb0:	f104 0819 	add.w	r8, r4, #25
 8014fb4:	f105 021b 	add.w	r2, r5, #27
 8014fb8:	b292      	uxth	r2, r2
 8014fba:	fa1f f888 	uxth.w	r8, r8
 8014fbe:	f104 031d 	add.w	r3, r4, #29
 8014fc2:	4641      	mov	r1, r8
 8014fc4:	4610      	mov	r0, r2
 8014fc6:	9600      	str	r6, [sp, #0]
 8014fc8:	b29b      	uxth	r3, r3
 8014fca:	f009 f941 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+28, Y+25, X+28, Y+28, TFT_White);
 8014fce:	f104 071c 	add.w	r7, r4, #28
 8014fd2:	f105 021c 	add.w	r2, r5, #28
 8014fd6:	b292      	uxth	r2, r2
 8014fd8:	b2bf      	uxth	r7, r7
 8014fda:	463b      	mov	r3, r7
 8014fdc:	4641      	mov	r1, r8
 8014fde:	4610      	mov	r0, r2
 8014fe0:	9600      	str	r6, [sp, #0]
 8014fe2:	f009 f935 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+29, Y+26, X+29, Y+28, TFT_White);
 8014fe6:	f105 021d 	add.w	r2, r5, #29
 8014fea:	b292      	uxth	r2, r2
 8014fec:	f104 011a 	add.w	r1, r4, #26
 8014ff0:	463b      	mov	r3, r7
 8014ff2:	4610      	mov	r0, r2
 8014ff4:	9600      	str	r6, [sp, #0]
 8014ff6:	b289      	uxth	r1, r1
 8014ff8:	f009 f92a 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+30, Y+27, X+30, Y+27, TFT_White);
 8014ffc:	9600      	str	r6, [sp, #0]
 8014ffe:	465b      	mov	r3, fp
 8015000:	4652      	mov	r2, sl
 8015002:	4659      	mov	r1, fp
 8015004:	4650      	mov	r0, sl
 8015006:	f009 f923 	bl	801e250 <TFT_DrawLine>
}
 801500a:	b005      	add	sp, #20
 801500c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015010 <GUI_Button_Measure_deltaE_Small>:

void GUI_Button_Measure_deltaE_Small(uint16_t X, uint16_t Y, uint16_t Active, uint8_t color)
{
 8015010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015014:	4605      	mov	r5, r0
 8015016:	460c      	mov	r4, r1
 8015018:	f100 0623 	add.w	r6, r0, #35	; 0x23
 801501c:	f101 0723 	add.w	r7, r1, #35	; 0x23
		if(Active){
 8015020:	2a00      	cmp	r2, #0
 8015022:	f000 8111 	beq.w	8015248 <GUI_Button_Measure_deltaE_Small+0x238>
			TFT_FillRectangle(X, Y, X+35, Y+35, color == 0 ? TFT_Blue_Off:TFT_Green);
 8015026:	2b00      	cmp	r3, #0
 8015028:	f241 3276 	movw	r2, #4982	; 0x1376
 801502c:	bf18      	it	ne
 801502e:	f44f 62fc 	movne.w	r2, #2016	; 0x7e0
 8015032:	9200      	str	r2, [sp, #0]
		}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
	
	
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8015034:	f105 080a 	add.w	r8, r5, #10
 8015038:	f104 0b07 	add.w	fp, r4, #7
 801503c:	f104 091e 	add.w	r9, r4, #30
 8015040:	fa1f f888 	uxth.w	r8, r8
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8015044:	b2bb      	uxth	r3, r7
 8015046:	b2b2      	uxth	r2, r6
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8015048:	fa1f fb8b 	uxth.w	fp, fp
 801504c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8015050:	fa1f f989 	uxth.w	r9, r9
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8015054:	f105 0a1c 	add.w	sl, r5, #28
 8015058:	f104 0712 	add.w	r7, r4, #18
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 801505c:	f009 f955 	bl	801e30a <TFT_FillRectangle>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8015060:	b2bf      	uxth	r7, r7
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 8015062:	464b      	mov	r3, r9
 8015064:	4642      	mov	r2, r8
 8015066:	4659      	mov	r1, fp
 8015068:	4640      	mov	r0, r8
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 801506a:	fa1f fa8a 	uxth.w	sl, sl
	TFT_DrawLine(X+10, Y+7, X+10, Y+30, TFT_White); //Play
 801506e:	9600      	str	r6, [sp, #0]
 8015070:	f009 f8ee 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+7, X+28, Y+18, TFT_White);
 8015074:	463b      	mov	r3, r7
 8015076:	4652      	mov	r2, sl
 8015078:	4659      	mov	r1, fp
 801507a:	4640      	mov	r0, r8
 801507c:	9600      	str	r6, [sp, #0]
 801507e:	f009 f8e7 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+10, Y+30, X+28, Y+18, TFT_White);
 8015082:	463b      	mov	r3, r7
 8015084:	4652      	mov	r2, sl
 8015086:	4649      	mov	r1, r9
 8015088:	4640      	mov	r0, r8
 801508a:	9600      	str	r6, [sp, #0]
 801508c:	f009 f8e0 	bl	801e250 <TFT_DrawLine>
	
	//paint
	TFT_DrawLine(X+11, Y+8, X+11, Y+29, TFT_White);
 8015090:	f105 020b 	add.w	r2, r5, #11
 8015094:	b292      	uxth	r2, r2
 8015096:	f104 031d 	add.w	r3, r4, #29
 801509a:	f104 0108 	add.w	r1, r4, #8
 801509e:	4610      	mov	r0, r2
 80150a0:	9600      	str	r6, [sp, #0]
 80150a2:	b29b      	uxth	r3, r3
 80150a4:	b289      	uxth	r1, r1
 80150a6:	f009 f8d3 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+12, Y+9, X+12, Y+28, TFT_White);
 80150aa:	f104 091c 	add.w	r9, r4, #28
 80150ae:	f105 020c 	add.w	r2, r5, #12
 80150b2:	b292      	uxth	r2, r2
 80150b4:	fa1f f989 	uxth.w	r9, r9
 80150b8:	f104 0109 	add.w	r1, r4, #9
 80150bc:	464b      	mov	r3, r9
 80150be:	4610      	mov	r0, r2
 80150c0:	9600      	str	r6, [sp, #0]
 80150c2:	b289      	uxth	r1, r1
 80150c4:	f009 f8c4 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+13, Y+10, X+13, Y+28, TFT_White);
 80150c8:	f104 080a 	add.w	r8, r4, #10
 80150cc:	f105 020d 	add.w	r2, r5, #13
 80150d0:	b292      	uxth	r2, r2
 80150d2:	fa1f f888 	uxth.w	r8, r8
 80150d6:	464b      	mov	r3, r9
 80150d8:	4641      	mov	r1, r8
 80150da:	4610      	mov	r0, r2
 80150dc:	9600      	str	r6, [sp, #0]
 80150de:	f009 f8b7 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+14, Y+10, X+14, Y+27, TFT_White);
 80150e2:	f105 020e 	add.w	r2, r5, #14
 80150e6:	b292      	uxth	r2, r2
 80150e8:	f104 031b 	add.w	r3, r4, #27
 80150ec:	4641      	mov	r1, r8
 80150ee:	4610      	mov	r0, r2
 80150f0:	9600      	str	r6, [sp, #0]
 80150f2:	b29b      	uxth	r3, r3
 80150f4:	f009 f8ac 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+15, Y+11, X+15, Y+26, TFT_White);
 80150f8:	f104 091a 	add.w	r9, r4, #26
 80150fc:	f105 020f 	add.w	r2, r5, #15
 8015100:	b292      	uxth	r2, r2
 8015102:	fa1f f989 	uxth.w	r9, r9
 8015106:	f104 010b 	add.w	r1, r4, #11
 801510a:	464b      	mov	r3, r9
 801510c:	4610      	mov	r0, r2
 801510e:	9600      	str	r6, [sp, #0]
 8015110:	b289      	uxth	r1, r1
 8015112:	f009 f89d 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+16, Y+12, X+16, Y+26, TFT_White);
 8015116:	f104 080c 	add.w	r8, r4, #12
 801511a:	f105 0210 	add.w	r2, r5, #16
 801511e:	b292      	uxth	r2, r2
 8015120:	fa1f f888 	uxth.w	r8, r8
 8015124:	464b      	mov	r3, r9
 8015126:	4641      	mov	r1, r8
 8015128:	4610      	mov	r0, r2
 801512a:	9600      	str	r6, [sp, #0]
 801512c:	f009 f890 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+17, Y+12, X+17, Y+25, TFT_White);
 8015130:	f105 0211 	add.w	r2, r5, #17
 8015134:	b292      	uxth	r2, r2
 8015136:	f104 0319 	add.w	r3, r4, #25
 801513a:	4641      	mov	r1, r8
 801513c:	4610      	mov	r0, r2
 801513e:	9600      	str	r6, [sp, #0]
 8015140:	b29b      	uxth	r3, r3
 8015142:	f009 f885 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+18, Y+13, X+18, Y+24, TFT_White);
 8015146:	f105 0212 	add.w	r2, r5, #18
 801514a:	b292      	uxth	r2, r2
 801514c:	f104 0318 	add.w	r3, r4, #24
 8015150:	f104 010d 	add.w	r1, r4, #13
 8015154:	4610      	mov	r0, r2
 8015156:	9600      	str	r6, [sp, #0]
 8015158:	b29b      	uxth	r3, r3
 801515a:	b289      	uxth	r1, r1
 801515c:	f009 f878 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+19, Y+14, X+19, Y+23, TFT_White);
 8015160:	f104 080e 	add.w	r8, r4, #14
 8015164:	f105 0213 	add.w	r2, r5, #19
 8015168:	f104 0917 	add.w	r9, r4, #23
 801516c:	b292      	uxth	r2, r2
 801516e:	fa1f f888 	uxth.w	r8, r8
 8015172:	fa1f f989 	uxth.w	r9, r9
 8015176:	464b      	mov	r3, r9
 8015178:	4641      	mov	r1, r8
 801517a:	4610      	mov	r0, r2
 801517c:	9600      	str	r6, [sp, #0]
 801517e:	f009 f867 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+20, Y+14, X+20, Y+23, TFT_White);
 8015182:	f105 0214 	add.w	r2, r5, #20
 8015186:	b292      	uxth	r2, r2
 8015188:	464b      	mov	r3, r9
 801518a:	4641      	mov	r1, r8
 801518c:	4610      	mov	r0, r2
 801518e:	9600      	str	r6, [sp, #0]
 8015190:	f009 f85e 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+21, Y+15, X+21, Y+22, TFT_White);
 8015194:	f104 080f 	add.w	r8, r4, #15
 8015198:	f105 0215 	add.w	r2, r5, #21
 801519c:	f104 0916 	add.w	r9, r4, #22
 80151a0:	b292      	uxth	r2, r2
 80151a2:	fa1f f888 	uxth.w	r8, r8
 80151a6:	fa1f f989 	uxth.w	r9, r9
 80151aa:	464b      	mov	r3, r9
 80151ac:	4641      	mov	r1, r8
 80151ae:	4610      	mov	r0, r2
 80151b0:	9600      	str	r6, [sp, #0]
 80151b2:	f009 f84d 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+22, Y+15, X+22, Y+22, TFT_White);
 80151b6:	f105 0216 	add.w	r2, r5, #22
 80151ba:	b292      	uxth	r2, r2
 80151bc:	464b      	mov	r3, r9
 80151be:	4641      	mov	r1, r8
 80151c0:	4610      	mov	r0, r2
 80151c2:	9600      	str	r6, [sp, #0]
 80151c4:	f009 f844 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+23, Y+16, X+23, Y+21, TFT_White);
 80151c8:	f104 0810 	add.w	r8, r4, #16
 80151cc:	f105 0217 	add.w	r2, r5, #23
 80151d0:	b292      	uxth	r2, r2
 80151d2:	fa1f f888 	uxth.w	r8, r8
 80151d6:	f104 0315 	add.w	r3, r4, #21
 80151da:	4641      	mov	r1, r8
 80151dc:	4610      	mov	r0, r2
 80151de:	9600      	str	r6, [sp, #0]
 80151e0:	b29b      	uxth	r3, r3
 80151e2:	f009 f835 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+24, Y+16, X+24, Y+20, TFT_White);
 80151e6:	f104 0914 	add.w	r9, r4, #20
 80151ea:	f105 0218 	add.w	r2, r5, #24
 80151ee:	b292      	uxth	r2, r2
 80151f0:	fa1f f989 	uxth.w	r9, r9
 80151f4:	464b      	mov	r3, r9
 80151f6:	4641      	mov	r1, r8
 80151f8:	4610      	mov	r0, r2
 80151fa:	9600      	str	r6, [sp, #0]
 80151fc:	f009 f828 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+25, Y+17, X+25, Y+20, TFT_White);
 8015200:	f104 0811 	add.w	r8, r4, #17
 8015204:	f105 0219 	add.w	r2, r5, #25
 8015208:	b292      	uxth	r2, r2
 801520a:	fa1f f888 	uxth.w	r8, r8
 801520e:	464b      	mov	r3, r9
 8015210:	4641      	mov	r1, r8
 8015212:	4610      	mov	r0, r2
 8015214:	9600      	str	r6, [sp, #0]
 8015216:	f009 f81b 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+26, Y+17, X+26, Y+19, TFT_White);
 801521a:	3413      	adds	r4, #19
 801521c:	f105 021a 	add.w	r2, r5, #26
 8015220:	b292      	uxth	r2, r2
 8015222:	b2a4      	uxth	r4, r4
 8015224:	4623      	mov	r3, r4
 8015226:	4641      	mov	r1, r8
 8015228:	4610      	mov	r0, r2
 801522a:	9600      	str	r6, [sp, #0]
 801522c:	f009 f810 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+27, Y+18, X+27, Y+19, TFT_White);
 8015230:	f105 021b 	add.w	r2, r5, #27
 8015234:	b292      	uxth	r2, r2
 8015236:	9600      	str	r6, [sp, #0]
 8015238:	4623      	mov	r3, r4
 801523a:	4639      	mov	r1, r7
 801523c:	4610      	mov	r0, r2
 801523e:	f009 f807 	bl	801e250 <TFT_DrawLine>
}
 8015242:	b003      	add	sp, #12
 8015244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		else{TFT_FillRectangle(X, Y, X+35, Y+35,  TFT_GreyMain);}
 8015248:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 801524c:	9300      	str	r3, [sp, #0]
 801524e:	e6f1      	b.n	8015034 <GUI_Button_Measure_deltaE_Small+0x24>

08015250 <GUI_CheckBox>:

void GUI_CheckBox(uint16_t X, uint16_t Y, uint16_t Check)
{
 8015250:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 8015254:	f101 0323 	add.w	r3, r1, #35	; 0x23
{
 8015258:	4616      	mov	r6, r2
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 801525a:	f241 3876 	movw	r8, #4982	; 0x1376
 801525e:	f100 0223 	add.w	r2, r0, #35	; 0x23
 8015262:	f8cd 8000 	str.w	r8, [sp]
 8015266:	b29b      	uxth	r3, r3
 8015268:	b292      	uxth	r2, r2
{
 801526a:	4604      	mov	r4, r0
 801526c:	460d      	mov	r5, r1
	TFT_DrawRectangle(X, Y, X+35, Y+35, TFT_Blue_Off);
 801526e:	f009 f864 	bl	801e33a <TFT_DrawRectangle>
	if(Check)
 8015272:	b1fe      	cbz	r6, 80152b4 <GUI_CheckBox+0x64>
		{
			TFT_DrawLine(X+8, Y+17, X+16, Y+26, TFT_Blue_Off);
 8015274:	f104 0610 	add.w	r6, r4, #16
 8015278:	f105 071a 	add.w	r7, r5, #26
 801527c:	b2b6      	uxth	r6, r6
 801527e:	b2bf      	uxth	r7, r7
 8015280:	f105 0111 	add.w	r1, r5, #17
 8015284:	f104 0008 	add.w	r0, r4, #8
 8015288:	463b      	mov	r3, r7
 801528a:	4632      	mov	r2, r6
 801528c:	b289      	uxth	r1, r1
 801528e:	b280      	uxth	r0, r0
 8015290:	f8cd 8000 	str.w	r8, [sp]
 8015294:	f008 ffdc 	bl	801e250 <TFT_DrawLine>
			TFT_DrawLine(X+16, Y+26, X+29, Y+5, TFT_Blue_Off);
 8015298:	1d6b      	adds	r3, r5, #5
 801529a:	f104 021d 	add.w	r2, r4, #29
 801529e:	f8cd 8000 	str.w	r8, [sp]
 80152a2:	b29b      	uxth	r3, r3
 80152a4:	b292      	uxth	r2, r2
 80152a6:	4639      	mov	r1, r7
 80152a8:	4630      	mov	r0, r6
 80152aa:	f008 ffd1 	bl	801e250 <TFT_DrawLine>
		} else {
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
		}
}
 80152ae:	b002      	add	sp, #8
 80152b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_FillRectangle(X+2, Y+2, X+32, Y+32, TFT_Black_Bkgr); //Pause
 80152b4:	f105 0320 	add.w	r3, r5, #32
 80152b8:	f104 0220 	add.w	r2, r4, #32
 80152bc:	1ca9      	adds	r1, r5, #2
 80152be:	1ca0      	adds	r0, r4, #2
 80152c0:	2463      	movs	r4, #99	; 0x63
 80152c2:	9400      	str	r4, [sp, #0]
 80152c4:	b29b      	uxth	r3, r3
 80152c6:	b292      	uxth	r2, r2
 80152c8:	b289      	uxth	r1, r1
 80152ca:	b280      	uxth	r0, r0
 80152cc:	f009 f81d 	bl	801e30a <TFT_FillRectangle>
}
 80152d0:	e7ed      	b.n	80152ae <GUI_CheckBox+0x5e>

080152d2 <GUI_RadioBox>:



void GUI_RadioBox(uint16_t X, uint16_t Y, uint16_t Check, uint16_t Active)
{
 80152d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152d6:	f100 0411 	add.w	r4, r0, #17
 80152da:	f101 0511 	add.w	r5, r1, #17
 80152de:	4690      	mov	r8, r2
	if(Active){
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 80152e0:	b226      	sxth	r6, r4
 80152e2:	b22f      	sxth	r7, r5
	if(Active){
 80152e4:	b173      	cbz	r3, 8015304 <GUI_RadioBox+0x32>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_Blue_Off);
 80152e6:	f241 3376 	movw	r3, #4982	; 0x1376
 80152ea:	220f      	movs	r2, #15
 80152ec:	4639      	mov	r1, r7
 80152ee:	4630      	mov	r0, r6
 80152f0:	f008 ff0e 	bl	801e110 <TFT_DrawCircle>
	} else
	{
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
	}
	if(Check)
 80152f4:	f1b8 0f00 	cmp.w	r8, #0
 80152f8:	d111      	bne.n	801531e <GUI_RadioBox+0x4c>
			if(Active)
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
		} else
		{
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 80152fa:	2363      	movs	r3, #99	; 0x63
 80152fc:	220a      	movs	r2, #10
 80152fe:	b229      	sxth	r1, r5
 8015300:	b220      	sxth	r0, r4
 8015302:	e011      	b.n	8015328 <GUI_RadioBox+0x56>
		TFT_DrawCircle(X+17, Y+17, 15, TFT_GreyMain);
 8015304:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 8015308:	220f      	movs	r2, #15
 801530a:	4639      	mov	r1, r7
 801530c:	4630      	mov	r0, r6
 801530e:	f008 feff 	bl	801e110 <TFT_DrawCircle>
	if(Check)
 8015312:	f1b8 0f00 	cmp.w	r8, #0
 8015316:	d0f0      	beq.n	80152fa <GUI_RadioBox+0x28>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 8015318:	f64d 731c 	movw	r3, #57116	; 0xdf1c
 801531c:	e001      	b.n	8015322 <GUI_RadioBox+0x50>
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Blue_Off);} else
 801531e:	f241 3376 	movw	r3, #4982	; 0x1376
				{	TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_GreyMain);}
 8015322:	220a      	movs	r2, #10
 8015324:	4639      	mov	r1, r7
 8015326:	4630      	mov	r0, r6
		}
}
 8015328:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			TFT_DrawFilledCircle(X+17, Y+17, 10, TFT_Black_Bkgr);
 801532c:	f009 b829 	b.w	801e382 <TFT_DrawFilledCircle>

08015330 <GUI_Switch_Button>:

void GUI_Switch_Button(uint16_t X, uint16_t Y, uint8_t Check)
{
 8015330:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8015334:	f101 031c 	add.w	r3, r1, #28
 8015338:	2663      	movs	r6, #99	; 0x63
{
 801533a:	4617      	mov	r7, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 801533c:	f100 0224 	add.w	r2, r0, #36	; 0x24
{
 8015340:	460d      	mov	r5, r1
 8015342:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 8015344:	9600      	str	r6, [sp, #0]
 8015346:	b29b      	uxth	r3, r3
 8015348:	b292      	uxth	r2, r2
 801534a:	f008 ffde 	bl	801e30a <TFT_FillRectangle>
 801534e:	f105 0611 	add.w	r6, r5, #17
 8015352:	f105 0318 	add.w	r3, r5, #24
 8015356:	f105 010a 	add.w	r1, r5, #10
 801535a:	f104 0223 	add.w	r2, r4, #35	; 0x23
 801535e:	4d1f      	ldr	r5, [pc, #124]	; (80153dc <GUI_Switch_Button+0xac>)
	if(Check)
 8015360:	b1ef      	cbz	r7, 801539e <GUI_Switch_Button+0x6e>
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8015362:	f242 409b 	movw	r0, #9371	; 0x249b
 8015366:	270a      	movs	r7, #10
 8015368:	9001      	str	r0, [sp, #4]
 801536a:	b29b      	uxth	r3, r3
 801536c:	b292      	uxth	r2, r2
 801536e:	b289      	uxth	r1, r1
 8015370:	4620      	mov	r0, r4
 8015372:	9700      	str	r7, [sp, #0]
 8015374:	f009 f94e 	bl	801e614 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8015378:	f104 0019 	add.w	r0, r4, #25
 801537c:	f241 3376 	movw	r3, #4982	; 0x1376
 8015380:	463a      	mov	r2, r7
 8015382:	b231      	sxth	r1, r6
 8015384:	b200      	sxth	r0, r0
 8015386:	f008 fffc 	bl	801e382 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x00){
 801538a:	782b      	ldrb	r3, [r5, #0]
 801538c:	b923      	cbnz	r3, 8015398 <GUI_Switch_Button+0x68>
				HAL_UART_MspInit(&hlpuart1); //Enable Bluetooth
 801538e:	4814      	ldr	r0, [pc, #80]	; (80153e0 <GUI_Switch_Button+0xb0>)
 8015390:	f00b ffd4 	bl	802133c <HAL_UART_MspInit>
				BluetoothStat = 0x01;
 8015394:	2301      	movs	r3, #1
 8015396:	702b      	strb	r3, [r5, #0]
			if(BluetoothStat == 0x01){
				HAL_UART_MspDeInit(&hlpuart1); //Disable Bluetooth
				BluetoothStat = 0x00;
			}
		}
}
 8015398:	b002      	add	sp, #8
 801539a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_LightGrey);
 801539e:	f04f 080a 	mov.w	r8, #10
 80153a2:	f24c 6018 	movw	r0, #50712	; 0xc618
 80153a6:	9001      	str	r0, [sp, #4]
 80153a8:	b29b      	uxth	r3, r3
 80153aa:	b292      	uxth	r2, r2
 80153ac:	b289      	uxth	r1, r1
 80153ae:	4620      	mov	r0, r4
 80153b0:	f8cd 8000 	str.w	r8, [sp]
 80153b4:	f009 f92e 	bl	801e614 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 80153b8:	eb04 0008 	add.w	r0, r4, r8
 80153bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80153c0:	4642      	mov	r2, r8
 80153c2:	b231      	sxth	r1, r6
 80153c4:	b200      	sxth	r0, r0
 80153c6:	f008 ffdc 	bl	801e382 <TFT_DrawFilledCircle>
			if(BluetoothStat == 0x01){
 80153ca:	782b      	ldrb	r3, [r5, #0]
 80153cc:	2b01      	cmp	r3, #1
 80153ce:	d1e3      	bne.n	8015398 <GUI_Switch_Button+0x68>
				HAL_UART_MspDeInit(&hlpuart1); //Disable Bluetooth
 80153d0:	4803      	ldr	r0, [pc, #12]	; (80153e0 <GUI_Switch_Button+0xb0>)
 80153d2:	f00b ffff 	bl	80213d4 <HAL_UART_MspDeInit>
				BluetoothStat = 0x00;
 80153d6:	702f      	strb	r7, [r5, #0]
}
 80153d8:	e7de      	b.n	8015398 <GUI_Switch_Button+0x68>
 80153da:	bf00      	nop
 80153dc:	20004fc0 	.word	0x20004fc0
 80153e0:	20090b30 	.word	0x20090b30

080153e4 <GUI_Switch_ButtonActive>:

void GUI_Switch_ButtonActive(uint16_t X, uint16_t Y, uint8_t Check)
{
 80153e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80153e6:	f101 031c 	add.w	r3, r1, #28
{
 80153ea:	4616      	mov	r6, r2
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80153ec:	2763      	movs	r7, #99	; 0x63
 80153ee:	f100 0224 	add.w	r2, r0, #36	; 0x24
 80153f2:	b29b      	uxth	r3, r3
 80153f4:	b292      	uxth	r2, r2
 80153f6:	9700      	str	r7, [sp, #0]
{
 80153f8:	460d      	mov	r5, r1
 80153fa:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+36, Y+28, TFT_Black_Bkgr);
 80153fc:	f008 ff85 	bl	801e30a <TFT_FillRectangle>
	if(Check)
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8015400:	f242 409b 	movw	r0, #9371	; 0x249b
 8015404:	f105 0318 	add.w	r3, r5, #24
 8015408:	f105 010a 	add.w	r1, r5, #10
 801540c:	f104 0223 	add.w	r2, r4, #35	; 0x23
 8015410:	3511      	adds	r5, #17
 8015412:	9001      	str	r0, [sp, #4]
	if(Check)
 8015414:	b19e      	cbz	r6, 801543e <GUI_Switch_ButtonActive+0x5a>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 8015416:	260a      	movs	r6, #10
 8015418:	b29b      	uxth	r3, r3
 801541a:	4620      	mov	r0, r4
 801541c:	9600      	str	r6, [sp, #0]
 801541e:	b292      	uxth	r2, r2
 8015420:	b289      	uxth	r1, r1
 8015422:	f009 f8f7 	bl	801e614 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+25, Y+17, 10, TFT_Blue_Off);
 8015426:	f104 0019 	add.w	r0, r4, #25
 801542a:	f241 3376 	movw	r3, #4982	; 0x1376
		} else
		{
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 801542e:	4632      	mov	r2, r6
 8015430:	b229      	sxth	r1, r5
 8015432:	b200      	sxth	r0, r0
		}
}
 8015434:	b003      	add	sp, #12
 8015436:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 801543a:	f008 bfa2 	b.w	801e382 <TFT_DrawFilledCircle>
			TFT_DrawFilledRoundedRectangle(X, Y+10, X+35, Y+24, 10, TFT_Blue_On);
 801543e:	260a      	movs	r6, #10
 8015440:	b29b      	uxth	r3, r3
 8015442:	4620      	mov	r0, r4
 8015444:	9600      	str	r6, [sp, #0]
 8015446:	b292      	uxth	r2, r2
 8015448:	b289      	uxth	r1, r1
 801544a:	f009 f8e3 	bl	801e614 <TFT_DrawFilledRoundedRectangle>
			TFT_DrawFilledCircle(X+10, Y+17, 10, TFT_White);
 801544e:	19a0      	adds	r0, r4, r6
 8015450:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015454:	e7eb      	b.n	801542e <GUI_Switch_ButtonActive+0x4a>

08015456 <GUI_Flag_Ru>:


void GUI_Flag_Ru(uint16_t X, uint16_t Y)
{
 8015456:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 801545a:	f100 0423 	add.w	r4, r0, #35	; 0x23
 801545e:	1dcf      	adds	r7, r1, #7
{
 8015460:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8015462:	b2a4      	uxth	r4, r4
 8015464:	b2bf      	uxth	r7, r7
 8015466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801546a:	9300      	str	r3, [sp, #0]
 801546c:	4622      	mov	r2, r4
 801546e:	463b      	mov	r3, r7
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8015470:	f105 060e 	add.w	r6, r5, #14
{
 8015474:	4680      	mov	r8, r0
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 8015476:	b2b6      	uxth	r6, r6
	TFT_FillRectangle(X, Y, X+35, Y+7, TFT_White);
 8015478:	f008 ff47 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+7, X+35, Y+14, TFT_RuBlue);
 801547c:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
 8015480:	9300      	str	r3, [sp, #0]
 8015482:	4622      	mov	r2, r4
 8015484:	4633      	mov	r3, r6
 8015486:	4639      	mov	r1, r7
 8015488:	4640      	mov	r0, r8
 801548a:	f008 ff3e 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+35, Y+21, TFT_RuRed);
 801548e:	f105 0315 	add.w	r3, r5, #21
 8015492:	f64c 1243 	movw	r2, #51523	; 0xc943
 8015496:	9200      	str	r2, [sp, #0]
 8015498:	b29b      	uxth	r3, r3
 801549a:	4622      	mov	r2, r4
 801549c:	4631      	mov	r1, r6
 801549e:	4640      	mov	r0, r8
 80154a0:	f008 ff33 	bl	801e30a <TFT_FillRectangle>
}
 80154a4:	b002      	add	sp, #8
 80154a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080154aa <GUI_Flag_En>:

void GUI_Flag_En(uint16_t X, uint16_t Y)
{
 80154aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 80154ae:	f100 030f 	add.w	r3, r0, #15
{
 80154b2:	b08d      	sub	sp, #52	; 0x34
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 80154b4:	b29b      	uxth	r3, r3
 80154b6:	270f      	movs	r7, #15
 80154b8:	9302      	str	r3, [sp, #8]
 80154ba:	f101 0309 	add.w	r3, r1, #9
{
 80154be:	4604      	mov	r4, r0
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 80154c0:	b29b      	uxth	r3, r3
 80154c2:	9700      	str	r7, [sp, #0]
 80154c4:	9a02      	ldr	r2, [sp, #8]
 80154c6:	9303      	str	r3, [sp, #12]
{
 80154c8:	460d      	mov	r5, r1
	TFT_FillRectangle(X, Y, X+15, Y+9, TFT_Navy);
 80154ca:	f008 ff1e 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y, X+34, Y+9, TFT_Navy);
 80154ce:	f104 0314 	add.w	r3, r4, #20
 80154d2:	b29b      	uxth	r3, r3
 80154d4:	f104 0822 	add.w	r8, r4, #34	; 0x22
 80154d8:	fa1f f888 	uxth.w	r8, r8
 80154dc:	9304      	str	r3, [sp, #16]
 80154de:	9700      	str	r7, [sp, #0]
 80154e0:	9b03      	ldr	r3, [sp, #12]
 80154e2:	9804      	ldr	r0, [sp, #16]
 80154e4:	4642      	mov	r2, r8
 80154e6:	4629      	mov	r1, r5
 80154e8:	f008 ff0f 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+14, X+15, Y+21, TFT_Navy);
 80154ec:	f105 030e 	add.w	r3, r5, #14
 80154f0:	b29b      	uxth	r3, r3
 80154f2:	f105 0615 	add.w	r6, r5, #21
 80154f6:	b2b6      	uxth	r6, r6
 80154f8:	9305      	str	r3, [sp, #20]
 80154fa:	9700      	str	r7, [sp, #0]
 80154fc:	4633      	mov	r3, r6
 80154fe:	9a02      	ldr	r2, [sp, #8]
 8015500:	9905      	ldr	r1, [sp, #20]
 8015502:	4620      	mov	r0, r4
 8015504:	f008 ff01 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X+20, Y+14, X+34, Y+21, TFT_Navy);
 8015508:	9700      	str	r7, [sp, #0]
 801550a:	4633      	mov	r3, r6
 801550c:	4642      	mov	r2, r8
 801550e:	9905      	ldr	r1, [sp, #20]
 8015510:	9804      	ldr	r0, [sp, #16]
 8015512:	f008 fefa 	bl	801e30a <TFT_FillRectangle>
	
	TFT_DrawLine(X, Y+2, X+29, Y+21, TFT_White);
 8015516:	1cab      	adds	r3, r5, #2
 8015518:	b29b      	uxth	r3, r3
 801551a:	f104 091d 	add.w	r9, r4, #29
 801551e:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015522:	9307      	str	r3, [sp, #28]
 8015524:	fa1f f989 	uxth.w	r9, r9
 8015528:	9700      	str	r7, [sp, #0]
 801552a:	4633      	mov	r3, r6
 801552c:	464a      	mov	r2, r9
 801552e:	9907      	ldr	r1, [sp, #28]
 8015530:	4620      	mov	r0, r4
 8015532:	f008 fe8d 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X, Y+1, X+29, Y+21, TFT_White);
 8015536:	1c6b      	adds	r3, r5, #1
 8015538:	b29b      	uxth	r3, r3
 801553a:	9308      	str	r3, [sp, #32]
 801553c:	9700      	str	r7, [sp, #0]
 801553e:	4633      	mov	r3, r6
 8015540:	464a      	mov	r2, r9
 8015542:	9908      	ldr	r1, [sp, #32]
 8015544:	4620      	mov	r0, r4
 8015546:	f008 fe83 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X, Y, X+30, Y+21, TFT_White);
 801554a:	f104 021e 	add.w	r2, r4, #30
 801554e:	9700      	str	r7, [sp, #0]
 8015550:	4633      	mov	r3, r6
 8015552:	4629      	mov	r1, r5
 8015554:	4620      	mov	r0, r4
 8015556:	b292      	uxth	r2, r2
 8015558:	f008 fe7a 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y, X+31, Y+21, TFT_White);
 801555c:	1c63      	adds	r3, r4, #1
 801555e:	b29b      	uxth	r3, r3
 8015560:	f104 0a1f 	add.w	sl, r4, #31
 8015564:	9309      	str	r3, [sp, #36]	; 0x24
 8015566:	fa1f fa8a 	uxth.w	sl, sl
 801556a:	9700      	str	r7, [sp, #0]
 801556c:	4633      	mov	r3, r6
 801556e:	4652      	mov	r2, sl
 8015570:	4629      	mov	r1, r5
 8015572:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015574:	f008 fe6c 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y, X+31, Y+21, TFT_White);
 8015578:	1ca3      	adds	r3, r4, #2
 801557a:	b29b      	uxth	r3, r3
 801557c:	930a      	str	r3, [sp, #40]	; 0x28
 801557e:	9700      	str	r7, [sp, #0]
 8015580:	4633      	mov	r3, r6
 8015582:	4652      	mov	r2, sl
 8015584:	4629      	mov	r1, r5
 8015586:	980a      	ldr	r0, [sp, #40]	; 0x28
 8015588:	f008 fe62 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y, X+32, Y+21, TFT_White);
 801558c:	1ce3      	adds	r3, r4, #3
 801558e:	b29b      	uxth	r3, r3
 8015590:	f104 0920 	add.w	r9, r4, #32
 8015594:	930b      	str	r3, [sp, #44]	; 0x2c
 8015596:	fa1f f989 	uxth.w	r9, r9
 801559a:	9700      	str	r7, [sp, #0]
 801559c:	4633      	mov	r3, r6
 801559e:	464a      	mov	r2, r9
 80155a0:	4629      	mov	r1, r5
 80155a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80155a4:	f008 fe54 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+33, Y+21, TFT_White);
 80155a8:	1d23      	adds	r3, r4, #4
 80155aa:	b29b      	uxth	r3, r3
 80155ac:	f104 0b21 	add.w	fp, r4, #33	; 0x21
 80155b0:	9306      	str	r3, [sp, #24]
 80155b2:	fa1f fb8b 	uxth.w	fp, fp
 80155b6:	9700      	str	r7, [sp, #0]
 80155b8:	4633      	mov	r3, r6
 80155ba:	465a      	mov	r2, fp
 80155bc:	4629      	mov	r1, r5
 80155be:	9806      	ldr	r0, [sp, #24]
 80155c0:	f008 fe46 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y, X+34, Y+21, TFT_White);
 80155c4:	9700      	str	r7, [sp, #0]
 80155c6:	4633      	mov	r3, r6
 80155c8:	4642      	mov	r2, r8
 80155ca:	4629      	mov	r1, r5
 80155cc:	9806      	ldr	r0, [sp, #24]
 80155ce:	f008 fe3f 	bl	801e250 <TFT_DrawLine>
	
	TFT_DrawLine(X, Y+21, X+31, Y, TFT_White);
 80155d2:	9700      	str	r7, [sp, #0]
 80155d4:	462b      	mov	r3, r5
 80155d6:	4652      	mov	r2, sl
 80155d8:	4631      	mov	r1, r6
 80155da:	4620      	mov	r0, r4
 80155dc:	f008 fe38 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+1, Y+21, X+32, Y, TFT_White);
 80155e0:	9700      	str	r7, [sp, #0]
 80155e2:	462b      	mov	r3, r5
 80155e4:	464a      	mov	r2, r9
 80155e6:	4631      	mov	r1, r6
 80155e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80155ea:	f008 fe31 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+2, Y+21, X+32, Y, TFT_White);
 80155ee:	9700      	str	r7, [sp, #0]
 80155f0:	462b      	mov	r3, r5
 80155f2:	464a      	mov	r2, r9
 80155f4:	4631      	mov	r1, r6
 80155f6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80155f8:	f008 fe2a 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+3, Y+21, X+33, Y, TFT_White);
 80155fc:	9700      	str	r7, [sp, #0]
 80155fe:	462b      	mov	r3, r5
 8015600:	465a      	mov	r2, fp
 8015602:	4631      	mov	r1, r6
 8015604:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8015606:	f008 fe23 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+4, Y+21, X+34, Y, TFT_White);
 801560a:	9700      	str	r7, [sp, #0]
 801560c:	462b      	mov	r3, r5
 801560e:	4642      	mov	r2, r8
 8015610:	4631      	mov	r1, r6
 8015612:	9806      	ldr	r0, [sp, #24]
 8015614:	f008 fe1c 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+5, Y+21, X+34, Y+1, TFT_White);
 8015618:	1d60      	adds	r0, r4, #5
 801561a:	9700      	str	r7, [sp, #0]
 801561c:	9b08      	ldr	r3, [sp, #32]
 801561e:	4642      	mov	r2, r8
 8015620:	4631      	mov	r1, r6
 8015622:	b280      	uxth	r0, r0
 8015624:	f008 fe14 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(X+6, Y+21, X+34, Y+2, TFT_White);
 8015628:	1da0      	adds	r0, r4, #6
 801562a:	9700      	str	r7, [sp, #0]
 801562c:	9b07      	ldr	r3, [sp, #28]
 801562e:	4642      	mov	r2, r8
 8015630:	4631      	mov	r1, r6
 8015632:	b280      	uxth	r0, r0
 8015634:	f008 fe0c 	bl	801e250 <TFT_DrawLine>
	
	TFT_FillRectangle(X, Y+9, X+34, Y+14, TFT_White);
 8015638:	9700      	str	r7, [sp, #0]
 801563a:	9b05      	ldr	r3, [sp, #20]
 801563c:	9903      	ldr	r1, [sp, #12]
 801563e:	4642      	mov	r2, r8
 8015640:	4620      	mov	r0, r4
 8015642:	f008 fe62 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X+15, Y, X+20, Y+21, TFT_White);
 8015646:	9700      	str	r7, [sp, #0]
 8015648:	4633      	mov	r3, r6
 801564a:	9a04      	ldr	r2, [sp, #16]
 801564c:	9802      	ldr	r0, [sp, #8]
 801564e:	4629      	mov	r1, r5
 8015650:	f008 fe5b 	bl	801e30a <TFT_FillRectangle>
	
	TFT_FillRectangle(X+16, Y, X+19, Y+21, TFT_Red);
 8015654:	f44f 4778 	mov.w	r7, #63488	; 0xf800
 8015658:	f104 0213 	add.w	r2, r4, #19
 801565c:	f104 0010 	add.w	r0, r4, #16
 8015660:	4633      	mov	r3, r6
 8015662:	4629      	mov	r1, r5
 8015664:	9700      	str	r7, [sp, #0]
 8015666:	b292      	uxth	r2, r2
 8015668:	b280      	uxth	r0, r0
 801566a:	f008 fe4e 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X, Y+10, X+34, Y+13, TFT_Red);
 801566e:	f105 030d 	add.w	r3, r5, #13
 8015672:	f105 010a 	add.w	r1, r5, #10
 8015676:	9700      	str	r7, [sp, #0]
 8015678:	b29b      	uxth	r3, r3
 801567a:	4642      	mov	r2, r8
 801567c:	b289      	uxth	r1, r1
 801567e:	4620      	mov	r0, r4
 8015680:	f008 fe43 	bl	801e30a <TFT_FillRectangle>
	
}
 8015684:	b00d      	add	sp, #52	; 0x34
 8015686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801568c <GUI_Bar_Measure>:
#include "GUI_Measure_Elements.h"
#include <math.h>
extern uint8_t Language_status, Mode_EL, preGUI_screen_state, GUI_screen_state;

void GUI_Bar_Measure(uint16_t X, uint16_t Y, float Value)
{
 801568c:	b570      	push	{r4, r5, r6, lr}
 801568e:	ed2d 8b02 	vpush	{d8}
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8015692:	f101 040a 	add.w	r4, r1, #10
{
 8015696:	b084      	sub	sp, #16
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 8015698:	b2a4      	uxth	r4, r4
 801569a:	f100 026e 	add.w	r2, r0, #110	; 0x6e
 801569e:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 80156a2:	4605      	mov	r5, r0
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 80156a4:	9300      	str	r3, [sp, #0]
 80156a6:	b292      	uxth	r2, r2
 80156a8:	4623      	mov	r3, r4
{
 80156aa:	eeb0 8a40 	vmov.f32	s16, s0
 80156ae:	460e      	mov	r6, r1
	TFT_FillRectangle(X, Y, X+110, Y+10, TFT_White);	
 80156b0:	f008 fe2b 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X, Y, X+110*Value, Y+10, TFT_Blue_Off);
 80156b4:	ee07 5a90 	vmov	s15, r5
 80156b8:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80156e8 <GUI_Bar_Measure+0x5c>
 80156bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80156c0:	f241 3376 	movw	r3, #4982	; 0x1376
 80156c4:	eee8 7a07 	vfma.f32	s15, s16, s14
 80156c8:	9300      	str	r3, [sp, #0]
 80156ca:	4631      	mov	r1, r6
 80156cc:	4623      	mov	r3, r4
 80156ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80156d2:	4628      	mov	r0, r5
 80156d4:	edcd 7a03 	vstr	s15, [sp, #12]
 80156d8:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80156dc:	f008 fe15 	bl	801e30a <TFT_FillRectangle>
}
 80156e0:	b004      	add	sp, #16
 80156e2:	ecbd 8b02 	vpop	{d8}
 80156e6:	bd70      	pop	{r4, r5, r6, pc}
 80156e8:	42dc0000 	.word	0x42dc0000

080156ec <GUI_Text_E_Measure>:


uint8_t  old_num_e = 10, old_num_n = 10, old_deg_e = 0xFF;
uint8_t old_meas_type_L = 2, old_numL_e = 10, old_numL_n = 10, old_rulx = 0, old_nan_Ee = 0, old_nan_El = 0; 
void GUI_Text_E_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nan, uint8_t grey)
{
 80156ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156f0:	ed2d 8b02 	vpush	{d8}
 80156f4:	461e      	mov	r6, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 80156f6:	4bba      	ldr	r3, [pc, #744]	; (80159e0 <GUI_Text_E_Measure+0x2f4>)
 80156f8:	f8df a320 	ldr.w	sl, [pc, #800]	; 8015a1c <GUI_Text_E_Measure+0x330>
 80156fc:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8015a20 <GUI_Text_E_Measure+0x334>
{
 8015700:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8015702:	781a      	ldrb	r2, [r3, #0]
 8015704:	4bb7      	ldr	r3, [pc, #732]	; (80159e4 <GUI_Text_E_Measure+0x2f8>)
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	429a      	cmp	r2, r3
{
 801570a:	b086      	sub	sp, #24
 801570c:	4604      	mov	r4, r0
 801570e:	460d      	mov	r5, r1
 8015710:	eeb0 8a40 	vmov.f32	s16, s0
	if(preGUI_screen_state != GUI_screen_state){old_nan_Ee = 0; old_nan_El = 0; old_deg_e = 0xFF;}
 8015714:	d007      	beq.n	8015726 <GUI_Text_E_Measure+0x3a>
 8015716:	2300      	movs	r3, #0
 8015718:	f88a 3000 	strb.w	r3, [sl]
 801571c:	f889 3000 	strb.w	r3, [r9]
 8015720:	4bb1      	ldr	r3, [pc, #708]	; (80159e8 <GUI_Text_E_Measure+0x2fc>)
 8015722:	22ff      	movs	r2, #255	; 0xff
 8015724:	701a      	strb	r2, [r3, #0]
	
	char buffer[9] = {0};
 8015726:	2300      	movs	r3, #0
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 8015728:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[9] = {0};
 801572c:	9303      	str	r3, [sp, #12]
 801572e:	9304      	str	r3, [sp, #16]
 8015730:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8015734:	f009 f818 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015738:	2063      	movs	r0, #99	; 0x63
 801573a:	f009 f81b 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 801573e:	48ab      	ldr	r0, [pc, #684]	; (80159ec <GUI_Text_E_Measure+0x300>)
 8015740:	f009 f80c 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 8015744:	1ca9      	adds	r1, r5, #2
 8015746:	2224      	movs	r2, #36	; 0x24
 8015748:	b289      	uxth	r1, r1
 801574a:	4620      	mov	r0, r4
 801574c:	f009 f8d0 	bl	801e8f0 <TFT_DrawChar>
	

		if((Value/1000.0) >= 1.0)
 8015750:	ee18 0a10 	vmov	r0, s16
 8015754:	f7ea ff08 	bl	8000568 <__aeabi_f2d>
 8015758:	2200      	movs	r2, #0
 801575a:	4ba5      	ldr	r3, [pc, #660]	; (80159f0 <GUI_Text_E_Measure+0x304>)
 801575c:	f7eb f882 	bl	8000864 <__aeabi_ddiv>
 8015760:	2200      	movs	r2, #0
 8015762:	4ba4      	ldr	r3, [pc, #656]	; (80159f4 <GUI_Text_E_Measure+0x308>)
 8015764:	f7eb f9da 	bl	8000b1c <__aeabi_dcmpge>
 8015768:	2800      	cmp	r0, #0
 801576a:	f000 80b4 	beq.w	80158d6 <GUI_Text_E_Measure+0x1ea>
	{
		Value = Value/(1000.0);
 801576e:	eddf 7aa2 	vldr	s15, [pc, #648]	; 80159f8 <GUI_Text_E_Measure+0x30c>
 8015772:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 8015776:	2701      	movs	r7, #1
		meas_type = 1;
	}else {meas_type = 0;}
	if(nan)
 8015778:	2e00      	cmp	r6, #0
 801577a:	f000 80ae 	beq.w	80158da <GUI_Text_E_Measure+0x1ee>
		{	
			if(energy_light & !old_nan_Ee){
 801577e:	f89a 3000 	ldrb.w	r3, [sl]
 8015782:	2b00      	cmp	r3, #0
 8015784:	bf14      	ite	ne
 8015786:	2300      	movne	r3, #0
 8015788:	f008 0301 	andeq.w	r3, r8, #1
 801578c:	b33b      	cbz	r3, 80157de <GUI_Text_E_Measure+0xf2>
				TFT_SetTextColor(TFT_White);
 801578e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015792:	f008 ffe9 	bl	801e768 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015796:	2063      	movs	r0, #99	; 0x63
 8015798:	f008 ffec 	bl	801e774 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 801579c:	4897      	ldr	r0, [pc, #604]	; (80159fc <GUI_Text_E_Measure+0x310>)
 801579e:	f008 ffdd 	bl	801e75c <TFT_SetFont>
				TFT_FillRectangle(X+35, Y, X+195, Y+26, TFT_Black_Bkgr);
 80157a2:	2163      	movs	r1, #99	; 0x63
 80157a4:	f105 031a 	add.w	r3, r5, #26
 80157a8:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 80157ac:	f104 0023 	add.w	r0, r4, #35	; 0x23
 80157b0:	9100      	str	r1, [sp, #0]
 80157b2:	b29b      	uxth	r3, r3
 80157b4:	b292      	uxth	r2, r2
 80157b6:	4629      	mov	r1, r5
 80157b8:	b280      	uxth	r0, r0
 80157ba:	f008 fda6 	bl	801e30a <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 80157be:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80157c0:	f104 007a 	add.w	r0, r4, #122	; 0x7a
				buffer[0] = '-';buffer[1] = '-';
 80157c4:	f88d 300c 	strb.w	r3, [sp, #12]
 80157c8:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80157cc:	aa03      	add	r2, sp, #12
 80157ce:	2303      	movs	r3, #3
 80157d0:	4629      	mov	r1, r5
 80157d2:	b280      	uxth	r0, r0
 80157d4:	f009 f8e4 	bl	801e9a0 <TFT_DisplayString>
				old_nan_Ee = 1;
 80157d8:	2301      	movs	r3, #1
 80157da:	f88a 3000 	strb.w	r3, [sl]
			}
				if(!energy_light & !old_nan_El){
 80157de:	f899 3000 	ldrb.w	r3, [r9]
 80157e2:	bb53      	cbnz	r3, 801583a <GUI_Text_E_Measure+0x14e>
 80157e4:	f1b8 0f00 	cmp.w	r8, #0
 80157e8:	d127      	bne.n	801583a <GUI_Text_E_Measure+0x14e>
				TFT_SetTextColor(TFT_White);
 80157ea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80157ee:	f008 ffbb 	bl	801e768 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80157f2:	2063      	movs	r0, #99	; 0x63
 80157f4:	f008 ffbe 	bl	801e774 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 80157f8:	4880      	ldr	r0, [pc, #512]	; (80159fc <GUI_Text_E_Measure+0x310>)
 80157fa:	f008 ffaf 	bl	801e75c <TFT_SetFont>
				TFT_FillRectangle(X+35, Y, X+195, Y+26, TFT_Black_Bkgr);
 80157fe:	2163      	movs	r1, #99	; 0x63
 8015800:	f105 031a 	add.w	r3, r5, #26
 8015804:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
 8015808:	f104 0023 	add.w	r0, r4, #35	; 0x23
 801580c:	9100      	str	r1, [sp, #0]
 801580e:	b29b      	uxth	r3, r3
 8015810:	b292      	uxth	r2, r2
 8015812:	4629      	mov	r1, r5
 8015814:	b280      	uxth	r0, r0
 8015816:	f008 fd78 	bl	801e30a <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 801581a:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801581c:	f104 007a 	add.w	r0, r4, #122	; 0x7a
				buffer[0] = '-';buffer[1] = '-';
 8015820:	f88d 300c 	strb.w	r3, [sp, #12]
 8015824:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015828:	aa03      	add	r2, sp, #12
 801582a:	2303      	movs	r3, #3
 801582c:	4629      	mov	r1, r5
 801582e:	b280      	uxth	r0, r0
 8015830:	f009 f8b6 	bl	801e9a0 <TFT_DisplayString>
				old_nan_El = 1;
 8015834:	2301      	movs	r3, #1
 8015836:	f889 3000 	strb.w	r3, [r9]
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}

	if (Language_status == Ru && !energy_light)
 801583a:	4b71      	ldr	r3, [pc, #452]	; (8015a00 <GUI_Text_E_Measure+0x314>)
 801583c:	781b      	ldrb	r3, [r3, #0]
 801583e:	2b00      	cmp	r3, #0
 8015840:	f040 80f0 	bne.w	8015a24 <GUI_Text_E_Measure+0x338>
 8015844:	f1b8 0f00 	cmp.w	r8, #0
 8015848:	f040 813f 	bne.w	8015aca <GUI_Text_E_Measure+0x3de>
	{
			if(deg != old_deg_e){
 801584c:	4b66      	ldr	r3, [pc, #408]	; (80159e8 <GUI_Text_E_Measure+0x2fc>)
 801584e:	781a      	ldrb	r2, [r3, #0]
 8015850:	42ba      	cmp	r2, r7
 8015852:	4698      	mov	r8, r3
 8015854:	d030      	beq.n	80158b8 <GUI_Text_E_Measure+0x1cc>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8015856:	2663      	movs	r6, #99	; 0x63
 8015858:	f105 031a 	add.w	r3, r5, #26
 801585c:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015860:	1ce9      	adds	r1, r5, #3
 8015862:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
 8015866:	b29b      	uxth	r3, r3
 8015868:	b292      	uxth	r2, r2
 801586a:	b289      	uxth	r1, r1
 801586c:	9600      	str	r6, [sp, #0]
 801586e:	b280      	uxth	r0, r0
 8015870:	f008 fd4b 	bl	801e30a <TFT_FillRectangle>
			TFT_SetTextColor(TFT_White);
 8015874:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015878:	f008 ff76 	bl	801e768 <TFT_SetTextColor>
 801587c:	1d2e      	adds	r6, r5, #4
			TFT_SetFont(&Font26RU_arch_small);
 801587e:	4861      	ldr	r0, [pc, #388]	; (8015a04 <GUI_Text_E_Measure+0x318>)
 8015880:	f008 ff6c 	bl	801e75c <TFT_SetFont>
 8015884:	f104 09d7 	add.w	r9, r4, #215	; 0xd7
 8015888:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
			if(deg){
			TFT_DrawCharRus(X+200, Y+4, 'к');
 801588c:	b2b6      	uxth	r6, r6
			if(deg){
 801588e:	2f00      	cmp	r7, #0
 8015890:	f000 809c 	beq.w	80159cc <GUI_Text_E_Measure+0x2e0>
			TFT_DrawCharRus(X+200, Y+4, 'к');
 8015894:	22ba      	movs	r2, #186	; 0xba
 8015896:	4631      	mov	r1, r6
 8015898:	b280      	uxth	r0, r0
 801589a:	f008 ff71 	bl	801e780 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'л');
 801589e:	22bb      	movs	r2, #187	; 0xbb
 80158a0:	4631      	mov	r1, r6
 80158a2:	fa1f f089 	uxth.w	r0, r9
 80158a6:	f008 ff6b 	bl	801e780 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+232, Y+4, 'к');} else{
 80158aa:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80158ae:	22ba      	movs	r2, #186	; 0xba
 80158b0:	4631      	mov	r1, r6
 80158b2:	b280      	uxth	r0, r0
			TFT_DrawCharRus(X+200, Y+4, 'л');
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 80158b4:	f008 ff64 	bl	801e780 <TFT_DrawCharRus>
			}
			
			
			old_deg_e = deg;
 80158b8:	f888 7000 	strb.w	r7, [r8]
		if(energy_light) {
			TFT_SetTextColor(TFT_White);
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+20, Y+14, 'e');}
	else {
		TFT_SetTextColor(TFT_White);
 80158bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80158c0:	f008 ff52 	bl	801e768 <TFT_SetTextColor>
		TFT_SetFont(&Font16EN_arch_small);
 80158c4:	4850      	ldr	r0, [pc, #320]	; (8015a08 <GUI_Text_E_Measure+0x31c>)
 80158c6:	f008 ff49 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 80158ca:	f105 010d 	add.w	r1, r5, #13
 80158ce:	f104 0017 	add.w	r0, r4, #23
 80158d2:	227b      	movs	r2, #123	; 0x7b
 80158d4:	e109      	b.n	8015aea <GUI_Text_E_Measure+0x3fe>
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 80158d6:	4607      	mov	r7, r0
 80158d8:	e74e      	b.n	8015778 <GUI_Text_E_Measure+0x8c>
		Value = floor(Value*10)/10.0;
 80158da:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80158de:	ee68 7a27 	vmul.f32	s15, s16, s15
		old_nan_Ee = 0; old_nan_El = 0;
 80158e2:	f889 6000 	strb.w	r6, [r9]
		Value = floor(Value*10)/10.0;
 80158e6:	ee17 0a90 	vmov	r0, s15
		old_nan_Ee = 0; old_nan_El = 0;
 80158ea:	f88a 6000 	strb.w	r6, [sl]
		Value = floor(Value*10)/10.0;
 80158ee:	f7ea fe3b 	bl	8000568 <__aeabi_f2d>
 80158f2:	ec41 0b10 	vmov	d0, r0, r1
 80158f6:	f00c ff2f 	bl	8022758 <floor>
 80158fa:	2200      	movs	r2, #0
 80158fc:	ec51 0b10 	vmov	r0, r1, d0
 8015900:	4b42      	ldr	r3, [pc, #264]	; (8015a0c <GUI_Text_E_Measure+0x320>)
 8015902:	f7ea ffaf 	bl	8000864 <__aeabi_ddiv>
 8015906:	f7eb f97b 	bl	8000c00 <__aeabi_d2f>
 801590a:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801590e:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8015912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015916:	f249 42d2 	movw	r2, #38098	; 0x94d2
 801591a:	2800      	cmp	r0, #0
 801591c:	bf14      	ite	ne
 801591e:	4610      	movne	r0, r2
 8015920:	4618      	moveq	r0, r3
 8015922:	f008 ff21 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015926:	2063      	movs	r0, #99	; 0x63
 8015928:	f008 ff24 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 801592c:	4833      	ldr	r0, [pc, #204]	; (80159fc <GUI_Text_E_Measure+0x310>)
 801592e:	f008 ff15 	bl	801e75c <TFT_SetFont>
		sprintf (buffer, "%.1f", Value);}
 8015932:	ee18 0a10 	vmov	r0, s16
		sprintf (buffer, "%.1f", Value);
 8015936:	f7ea fe17 	bl	8000568 <__aeabi_f2d>
 801593a:	4602      	mov	r2, r0
 801593c:	460b      	mov	r3, r1
 801593e:	a803      	add	r0, sp, #12
 8015940:	4933      	ldr	r1, [pc, #204]	; (8015a10 <GUI_Text_E_Measure+0x324>)
 8015942:	f00c fa25 	bl	8021d90 <siprintf>
	uint32_t dec = 10;
 8015946:	220a      	movs	r2, #10
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015948:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0, meas_type=0, deg = 0; 
 801594a:	f04f 097a 	mov.w	r9, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 801594e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8015952:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8015954:	ee07 2a10 	vmov	s14, r2
 8015958:	eef8 6a47 	vcvt.f32.u32	s13, s14
 801595c:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8015960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015968:	db06      	blt.n	8015978 <GUI_Text_E_Measure+0x28c>
			delta_pos-=23;
 801596a:	f1a9 0917 	sub.w	r9, r9, #23
			number++;
 801596e:	3601      	adds	r6, #1
			dec *= 10;
 8015970:	434a      	muls	r2, r1
			delta_pos-=23;
 8015972:	fa5f f989 	uxtb.w	r9, r9
			number++;
 8015976:	b2f6      	uxtb	r6, r6
 8015978:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 801597a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801597e:	d1e9      	bne.n	8015954 <GUI_Text_E_Measure+0x268>
	if(energy_light && number < old_num_e )
 8015980:	f1b8 0f00 	cmp.w	r8, #0
 8015984:	d020      	beq.n	80159c8 <GUI_Text_E_Measure+0x2dc>
 8015986:	4b23      	ldr	r3, [pc, #140]	; (8015a14 <GUI_Text_E_Measure+0x328>)
	else if(!energy_light && number < old_num_n)
 8015988:	781a      	ldrb	r2, [r3, #0]
 801598a:	42b2      	cmp	r2, r6
 801598c:	469a      	mov	sl, r3
 801598e:	d90d      	bls.n	80159ac <GUI_Text_E_Measure+0x2c0>
		TFT_FillRectangle(X+40, Y, X+127, Y+26, TFT_Black_Bkgr);
 8015990:	2163      	movs	r1, #99	; 0x63
 8015992:	f105 031a 	add.w	r3, r5, #26
 8015996:	f104 027f 	add.w	r2, r4, #127	; 0x7f
 801599a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801599e:	9100      	str	r1, [sp, #0]
 80159a0:	b29b      	uxth	r3, r3
 80159a2:	b292      	uxth	r2, r2
 80159a4:	4629      	mov	r1, r5
 80159a6:	b280      	uxth	r0, r0
 80159a8:	f008 fcaf 	bl	801e30a <TFT_FillRectangle>
	buffer[8] = 0;
 80159ac:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80159ae:	eb04 0009 	add.w	r0, r4, r9
		old_num_n = number;
 80159b2:	f88a 6000 	strb.w	r6, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80159b6:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 80159b8:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80159bc:	4629      	mov	r1, r5
 80159be:	2303      	movs	r3, #3
 80159c0:	b280      	uxth	r0, r0
 80159c2:	f008 ffed 	bl	801e9a0 <TFT_DisplayString>
 80159c6:	e738      	b.n	801583a <GUI_Text_E_Measure+0x14e>
	else if(!energy_light && number < old_num_n)
 80159c8:	4b13      	ldr	r3, [pc, #76]	; (8015a18 <GUI_Text_E_Measure+0x32c>)
 80159ca:	e7dd      	b.n	8015988 <GUI_Text_E_Measure+0x29c>
			TFT_DrawCharRus(X+200, Y+4, 'л');
 80159cc:	22bb      	movs	r2, #187	; 0xbb
 80159ce:	4631      	mov	r1, r6
 80159d0:	b280      	uxth	r0, r0
 80159d2:	f008 fed5 	bl	801e780 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+215, Y+4, 'к');}
 80159d6:	22ba      	movs	r2, #186	; 0xba
 80159d8:	4631      	mov	r1, r6
 80159da:	fa1f f089 	uxth.w	r0, r9
 80159de:	e769      	b.n	80158b4 <GUI_Text_E_Measure+0x1c8>
 80159e0:	2000022a 	.word	0x2000022a
 80159e4:	20004c71 	.word	0x20004c71
 80159e8:	2000022d 	.word	0x2000022d
 80159ec:	200001e8 	.word	0x200001e8
 80159f0:	408f4000 	.word	0x408f4000
 80159f4:	3ff00000 	.word	0x3ff00000
 80159f8:	447a0000 	.word	0x447a0000
 80159fc:	200001f0 	.word	0x200001f0
 8015a00:	20004c73 	.word	0x20004c73
 8015a04:	20000208 	.word	0x20000208
 8015a08:	200001c0 	.word	0x200001c0
 8015a0c:	40240000 	.word	0x40240000
 8015a10:	0803124d 	.word	0x0803124d
 8015a14:	20000244 	.word	0x20000244
 8015a18:	20000245 	.word	0x20000245
 8015a1c:	20004ca5 	.word	0x20004ca5
 8015a20:	20004ca6 	.word	0x20004ca6
	} else if (Language_status == En && !energy_light)
 8015a24:	2b01      	cmp	r3, #1
 8015a26:	d16e      	bne.n	8015b06 <GUI_Text_E_Measure+0x41a>
 8015a28:	f1b8 0f00 	cmp.w	r8, #0
 8015a2c:	d166      	bne.n	8015afc <GUI_Text_E_Measure+0x410>
		if(deg != old_deg_e){
 8015a2e:	4b38      	ldr	r3, [pc, #224]	; (8015b10 <GUI_Text_E_Measure+0x424>)
 8015a30:	781a      	ldrb	r2, [r3, #0]
 8015a32:	42ba      	cmp	r2, r7
 8015a34:	4699      	mov	r9, r3
 8015a36:	d031      	beq.n	8015a9c <GUI_Text_E_Measure+0x3b0>
			TFT_FillRectangle(X+198, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8015a38:	2663      	movs	r6, #99	; 0x63
 8015a3a:	f105 031a 	add.w	r3, r5, #26
 8015a3e:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015a42:	1ce9      	adds	r1, r5, #3
 8015a44:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
 8015a48:	9600      	str	r6, [sp, #0]
 8015a4a:	b280      	uxth	r0, r0
 8015a4c:	b29b      	uxth	r3, r3
 8015a4e:	b292      	uxth	r2, r2
 8015a50:	b289      	uxth	r1, r1
 8015a52:	f008 fc5a 	bl	801e30a <TFT_FillRectangle>
 8015a56:	1d2e      	adds	r6, r5, #4
 8015a58:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
			TFT_SetTextColor(TFT_White);
 8015a5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
			if (deg){
 8015a60:	b1ff      	cbz	r7, 8015aa2 <GUI_Text_E_Measure+0x3b6>
			TFT_SetTextColor(TFT_White);
 8015a62:	f008 fe81 	bl	801e768 <TFT_SetTextColor>
			TFT_SetFont(&Font26EN_arch_small);
 8015a66:	482b      	ldr	r0, [pc, #172]	; (8015b14 <GUI_Text_E_Measure+0x428>)
 8015a68:	f008 fe78 	bl	801e75c <TFT_SetFont>
			TFT_DrawChar(X+214, Y+4, 'l'-65);
 8015a6c:	b2b6      	uxth	r6, r6
 8015a6e:	f104 00d6 	add.w	r0, r4, #214	; 0xd6
 8015a72:	222b      	movs	r2, #43	; 0x2b
 8015a74:	4631      	mov	r1, r6
 8015a76:	b280      	uxth	r0, r0
 8015a78:	f008 ff3a 	bl	801e8f0 <TFT_DrawChar>
			TFT_DrawChar(X+200, Y+4, 'k'-65);
 8015a7c:	222a      	movs	r2, #42	; 0x2a
 8015a7e:	4631      	mov	r1, r6
 8015a80:	fa1f f08a 	uxth.w	r0, sl
 8015a84:	f008 ff34 	bl	801e8f0 <TFT_DrawChar>
			TFT_DrawChar(X+226, Y+4, 'x'-65);
 8015a88:	f104 00e2 	add.w	r0, r4, #226	; 0xe2
 8015a8c:	2237      	movs	r2, #55	; 0x37
 8015a8e:	4631      	mov	r1, r6
 8015a90:	b280      	uxth	r0, r0
 8015a92:	f008 ff2d 	bl	801e8f0 <TFT_DrawChar>
			old_rulx = 0;
 8015a96:	4b20      	ldr	r3, [pc, #128]	; (8015b18 <GUI_Text_E_Measure+0x42c>)
 8015a98:	f883 8000 	strb.w	r8, [r3]
		old_deg_e = deg;
 8015a9c:	f889 7000 	strb.w	r7, [r9]
 8015aa0:	e70c      	b.n	80158bc <GUI_Text_E_Measure+0x1d0>
			TFT_SetTextColor(TFT_White);
 8015aa2:	f008 fe61 	bl	801e768 <TFT_SetTextColor>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 8015aa6:	b2b6      	uxth	r6, r6
			TFT_SetFont(&Font26EN_arch_small);
 8015aa8:	481a      	ldr	r0, [pc, #104]	; (8015b14 <GUI_Text_E_Measure+0x428>)
 8015aaa:	f008 fe57 	bl	801e75c <TFT_SetFont>
			TFT_DrawChar(X+200, Y+4, 'l'-65);
 8015aae:	4631      	mov	r1, r6
 8015ab0:	fa1f f08a 	uxth.w	r0, sl
 8015ab4:	222b      	movs	r2, #43	; 0x2b
 8015ab6:	f008 ff1b 	bl	801e8f0 <TFT_DrawChar>
			TFT_DrawChar(X+212, Y+4, 'x'-65);
 8015aba:	f104 00d4 	add.w	r0, r4, #212	; 0xd4
 8015abe:	2237      	movs	r2, #55	; 0x37
 8015ac0:	4631      	mov	r1, r6
 8015ac2:	b280      	uxth	r0, r0
 8015ac4:	f008 ff14 	bl	801e8f0 <TFT_DrawChar>
 8015ac8:	e7e8      	b.n	8015a9c <GUI_Text_E_Measure+0x3b0>
		GUI_TextRu_W_m2(234, Y);
 8015aca:	4629      	mov	r1, r5
 8015acc:	20ea      	movs	r0, #234	; 0xea
 8015ace:	f005 fa51 	bl	801af74 <GUI_TextRu_W_m2>
			TFT_SetTextColor(TFT_White);
 8015ad2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015ad6:	f008 fe47 	bl	801e768 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_small);
 8015ada:	4810      	ldr	r0, [pc, #64]	; (8015b1c <GUI_Text_E_Measure+0x430>)
 8015adc:	f008 fe3e 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 8015ae0:	f105 010e 	add.w	r1, r5, #14
 8015ae4:	f104 0014 	add.w	r0, r4, #20
 8015ae8:	2265      	movs	r2, #101	; 0x65
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8015aea:	b289      	uxth	r1, r1
 8015aec:	b280      	uxth	r0, r0
 8015aee:	f008 feff 	bl	801e8f0 <TFT_DrawChar>
	}

}
 8015af2:	b006      	add	sp, #24
 8015af4:	ecbd 8b02 	vpop	{d8}
 8015af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		GUI_TextEn_W_m2(234, Y);
 8015afc:	4629      	mov	r1, r5
 8015afe:	20ea      	movs	r0, #234	; 0xea
 8015b00:	f004 f8d0 	bl	8019ca4 <GUI_TextEn_W_m2>
 8015b04:	e7e5      	b.n	8015ad2 <GUI_Text_E_Measure+0x3e6>
		if(energy_light) {
 8015b06:	f1b8 0f00 	cmp.w	r8, #0
 8015b0a:	d1e2      	bne.n	8015ad2 <GUI_Text_E_Measure+0x3e6>
 8015b0c:	e6d6      	b.n	80158bc <GUI_Text_E_Measure+0x1d0>
 8015b0e:	bf00      	nop
 8015b10:	2000022d 	.word	0x2000022d
 8015b14:	200001f8 	.word	0x200001f8
 8015b18:	20004cb1 	.word	0x20004cb1
 8015b1c:	200001c0 	.word	0x200001c0

08015b20 <GUI_Text_L_Measure>:

uint8_t old_nan_Le = 0, old_nan_Ll = 0, old_deg_L = 0xFF;
void GUI_Text_L_Measure(uint16_t X, uint16_t Y, float Value, uint8_t energy_light, uint8_t nan, uint8_t grey)
{
 8015b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b24:	ed2d 8b02 	vpush	{d8}
 8015b28:	461e      	mov	r6, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8015b2a:	4bb7      	ldr	r3, [pc, #732]	; (8015e08 <GUI_Text_L_Measure+0x2e8>)
{
 8015b2c:	4691      	mov	r9, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8015b2e:	781a      	ldrb	r2, [r3, #0]
 8015b30:	4bb6      	ldr	r3, [pc, #728]	; (8015e0c <GUI_Text_L_Measure+0x2ec>)
 8015b32:	781b      	ldrb	r3, [r3, #0]
 8015b34:	429a      	cmp	r2, r3
{
 8015b36:	b086      	sub	sp, #24
 8015b38:	4604      	mov	r4, r0
 8015b3a:	460d      	mov	r5, r1
 8015b3c:	eeb0 8a40 	vmov.f32	s16, s0
	if(preGUI_screen_state != GUI_screen_state){old_nan_Le = 0; old_nan_Ll = 0; old_deg_L = 0xFF;}
 8015b40:	d007      	beq.n	8015b52 <GUI_Text_L_Measure+0x32>
 8015b42:	4ab3      	ldr	r2, [pc, #716]	; (8015e10 <GUI_Text_L_Measure+0x2f0>)
 8015b44:	2300      	movs	r3, #0
 8015b46:	7013      	strb	r3, [r2, #0]
 8015b48:	4ab2      	ldr	r2, [pc, #712]	; (8015e14 <GUI_Text_L_Measure+0x2f4>)
 8015b4a:	7013      	strb	r3, [r2, #0]
 8015b4c:	4bb2      	ldr	r3, [pc, #712]	; (8015e18 <GUI_Text_L_Measure+0x2f8>)
 8015b4e:	22ff      	movs	r2, #255	; 0xff
 8015b50:	701a      	strb	r2, [r3, #0]
	char buffer[9] = {0};
 8015b52:	2300      	movs	r3, #0
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
	uint32_t dec = 10;
	
	TFT_SetTextColor(TFT_White);
 8015b54:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[9] = {0};
 8015b58:	9303      	str	r3, [sp, #12]
 8015b5a:	9304      	str	r3, [sp, #16]
 8015b5c:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8015b60:	f008 fe02 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015b64:	2063      	movs	r0, #99	; 0x63
 8015b66:	f008 fe05 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8015b6a:	48ac      	ldr	r0, [pc, #688]	; (8015e1c <GUI_Text_L_Measure+0x2fc>)
 8015b6c:	f008 fdf6 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 8015b70:	1ca9      	adds	r1, r5, #2
 8015b72:	4620      	mov	r0, r4
 8015b74:	222b      	movs	r2, #43	; 0x2b
 8015b76:	b289      	uxth	r1, r1
 8015b78:	f008 feba 	bl	801e8f0 <TFT_DrawChar>
	
	if(energy_light) {
	TFT_SetFont(&Font16EN_arch_small);
 8015b7c:	48a8      	ldr	r0, [pc, #672]	; (8015e20 <GUI_Text_L_Measure+0x300>)
	if(energy_light) {
 8015b7e:	f1b9 0f00 	cmp.w	r9, #0
 8015b82:	f000 8097 	beq.w	8015cb4 <GUI_Text_L_Measure+0x194>
	TFT_SetFont(&Font16EN_arch_small);
 8015b86:	f008 fde9 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+20, Y+14, 'e');}
 8015b8a:	f105 010e 	add.w	r1, r5, #14
 8015b8e:	f104 0014 	add.w	r0, r4, #20
 8015b92:	2265      	movs	r2, #101	; 0x65
 8015b94:	b289      	uxth	r1, r1
 8015b96:	b280      	uxth	r0, r0
 8015b98:	f008 feaa 	bl	801e8f0 <TFT_DrawChar>
 8015b9c:	4f9c      	ldr	r7, [pc, #624]	; (8015e10 <GUI_Text_L_Measure+0x2f0>)
	else {
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+23, Y+13, 'z'+1);
	}
	
	if(nan) 
 8015b9e:	2e00      	cmp	r6, #0
 8015ba0:	f040 8098 	bne.w	8015cd4 <GUI_Text_L_Measure+0x1b4>
			buffer[0] = '-';buffer[1] = '-';
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
			old_nan_Ll = 1;}
		}
	else{
	if(energy_light) {old_nan_Le = 0;}
 8015ba4:	703e      	strb	r6, [r7, #0]
	if(!energy_light) {old_nan_Ll = 0;}
	Value = floor(Value*10)/10.0;
 8015ba6:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8015baa:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015bae:	ee17 0a90 	vmov	r0, s15
 8015bb2:	f7ea fcd9 	bl	8000568 <__aeabi_f2d>
 8015bb6:	ec41 0b10 	vmov	d0, r0, r1
 8015bba:	f00c fdcd 	bl	8022758 <floor>
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	4b98      	ldr	r3, [pc, #608]	; (8015e24 <GUI_Text_L_Measure+0x304>)
 8015bc2:	ec51 0b10 	vmov	r0, r1, d0
 8015bc6:	f7ea fe4d 	bl	8000864 <__aeabi_ddiv>
 8015bca:	f7eb f819 	bl	8000c00 <__aeabi_d2f>
 8015bce:	ee08 0a10 	vmov	s16, r0
	
	if((Value/1000.0) >= 1.0)
 8015bd2:	f7ea fcc9 	bl	8000568 <__aeabi_f2d>
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	4b93      	ldr	r3, [pc, #588]	; (8015e28 <GUI_Text_L_Measure+0x308>)
 8015bda:	f7ea fe43 	bl	8000864 <__aeabi_ddiv>
 8015bde:	2200      	movs	r2, #0
 8015be0:	4b92      	ldr	r3, [pc, #584]	; (8015e2c <GUI_Text_L_Measure+0x30c>)
 8015be2:	f7ea ff9b 	bl	8000b1c <__aeabi_dcmpge>
 8015be6:	2800      	cmp	r0, #0
 8015be8:	f000 80fb 	beq.w	8015de2 <GUI_Text_L_Measure+0x2c2>
	{
		Value = Value/(1000.0);
 8015bec:	eddf 7a90 	vldr	s15, [pc, #576]	; 8015e30 <GUI_Text_L_Measure+0x310>
 8015bf0:	ee88 8a27 	vdiv.f32	s16, s16, s15
		deg = 1;
 8015bf4:	2601      	movs	r6, #1
		meas_type = 1;
	}else {meas_type = 0;}
	
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8015bf6:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 8015bfa:	f249 43d2 	movw	r3, #38098	; 0x94d2
 8015bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015c02:	2800      	cmp	r0, #0
 8015c04:	bf0c      	ite	eq
 8015c06:	4610      	moveq	r0, r2
 8015c08:	4618      	movne	r0, r3
 8015c0a:	f008 fdad 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015c0e:	2063      	movs	r0, #99	; 0x63
 8015c10:	f008 fdb0 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8015c14:	4887      	ldr	r0, [pc, #540]	; (8015e34 <GUI_Text_L_Measure+0x314>)
 8015c16:	f008 fda1 	bl	801e75c <TFT_SetFont>
	
	sprintf (buffer, "%.1f", Value);
 8015c1a:	ee18 0a10 	vmov	r0, s16
 8015c1e:	f7ea fca3 	bl	8000568 <__aeabi_f2d>
 8015c22:	4602      	mov	r2, r0
 8015c24:	460b      	mov	r3, r1
 8015c26:	a803      	add	r0, sp, #12
 8015c28:	4983      	ldr	r1, [pc, #524]	; (8015e38 <GUI_Text_L_Measure+0x318>)
 8015c2a:	f00c f8b1 	bl	8021d90 <siprintf>
	uint32_t dec = 10;
 8015c2e:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 8015c30:	2304      	movs	r3, #4
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8015c32:	2700      	movs	r7, #0
 8015c34:	f04f 0875 	mov.w	r8, #117	; 0x75


for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 8015c38:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		{
			dec *= 10;
 8015c3c:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8015c3e:	ee07 2a10 	vmov	s14, r2
 8015c42:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8015c46:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8015c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c52:	db06      	blt.n	8015c62 <GUI_Text_L_Measure+0x142>
			delta_pos-=23;
 8015c54:	f1a8 0817 	sub.w	r8, r8, #23
			number++;
 8015c58:	3701      	adds	r7, #1
			dec *= 10;
 8015c5a:	434a      	muls	r2, r1
			delta_pos-=23;
 8015c5c:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8015c60:	b2ff      	uxtb	r7, r7
 8015c62:	3b01      	subs	r3, #1
for (uint8_t i = 1; i <= 4; i++)
 8015c64:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8015c68:	d1e9      	bne.n	8015c3e <GUI_Text_L_Measure+0x11e>
		}
	}
	
	if(energy_light && number < old_numL_e )
 8015c6a:	f1b9 0f00 	cmp.w	r9, #0
 8015c6e:	f000 80ba 	beq.w	8015de6 <GUI_Text_L_Measure+0x2c6>
 8015c72:	4b72      	ldr	r3, [pc, #456]	; (8015e3c <GUI_Text_L_Measure+0x31c>)
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
	} 
	else if(!energy_light && number < old_numL_n)
 8015c74:	781a      	ldrb	r2, [r3, #0]
 8015c76:	42ba      	cmp	r2, r7
 8015c78:	469a      	mov	sl, r3
 8015c7a:	d90d      	bls.n	8015c98 <GUI_Text_L_Measure+0x178>
	{
		TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8015c7c:	2163      	movs	r1, #99	; 0x63
 8015c7e:	f105 031a 	add.w	r3, r5, #26
 8015c82:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015c86:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015c8a:	9100      	str	r1, [sp, #0]
 8015c8c:	b29b      	uxth	r3, r3
 8015c8e:	b292      	uxth	r2, r2
 8015c90:	4629      	mov	r1, r5
 8015c92:	b280      	uxth	r0, r0
 8015c94:	f008 fb39 	bl	801e30a <TFT_FillRectangle>
		old_numL_e = number;}
	else{
		old_numL_n = number;
	}
	
	buffer[8] = 0;
 8015c98:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015c9a:	eb04 0008 	add.w	r0, r4, r8
		old_numL_n = number;
 8015c9e:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015ca2:	aa03      	add	r2, sp, #12
	buffer[8] = 0;
 8015ca4:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015ca8:	4629      	mov	r1, r5
 8015caa:	2303      	movs	r3, #3
 8015cac:	b280      	uxth	r0, r0
 8015cae:	f008 fe77 	bl	801e9a0 <TFT_DisplayString>
 8015cb2:	e06c      	b.n	8015d8e <GUI_Text_L_Measure+0x26e>
		TFT_SetFont(&Font16EN_arch_small);
 8015cb4:	f008 fd52 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(X+23, Y+13, 'z'+1);
 8015cb8:	f105 010d 	add.w	r1, r5, #13
 8015cbc:	f104 0017 	add.w	r0, r4, #23
 8015cc0:	227b      	movs	r2, #123	; 0x7b
 8015cc2:	b289      	uxth	r1, r1
 8015cc4:	b280      	uxth	r0, r0
 8015cc6:	f008 fe13 	bl	801e8f0 <TFT_DrawChar>
	if(nan) 
 8015cca:	bb96      	cbnz	r6, 8015d32 <GUI_Text_L_Measure+0x212>
	if(!energy_light) {old_nan_Ll = 0;}
 8015ccc:	4b51      	ldr	r3, [pc, #324]	; (8015e14 <GUI_Text_L_Measure+0x2f4>)
 8015cce:	f883 9000 	strb.w	r9, [r3]
 8015cd2:	e768      	b.n	8015ba6 <GUI_Text_L_Measure+0x86>
			if(energy_light & !old_nan_Le){
 8015cd4:	783e      	ldrb	r6, [r7, #0]
 8015cd6:	2e00      	cmp	r6, #0
 8015cd8:	bf14      	ite	ne
 8015cda:	2600      	movne	r6, #0
 8015cdc:	f009 0601 	andeq.w	r6, r9, #1
 8015ce0:	2e00      	cmp	r6, #0
 8015ce2:	d054      	beq.n	8015d8e <GUI_Text_L_Measure+0x26e>
			TFT_SetTextColor(TFT_White);
 8015ce4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015ce8:	f008 fd3e 	bl	801e768 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8015cec:	2063      	movs	r0, #99	; 0x63
 8015cee:	f008 fd41 	bl	801e774 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 8015cf2:	4850      	ldr	r0, [pc, #320]	; (8015e34 <GUI_Text_L_Measure+0x314>)
 8015cf4:	f008 fd32 	bl	801e75c <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8015cf8:	2163      	movs	r1, #99	; 0x63
 8015cfa:	f105 031a 	add.w	r3, r5, #26
 8015cfe:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015d02:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015d06:	9100      	str	r1, [sp, #0]
 8015d08:	b29b      	uxth	r3, r3
 8015d0a:	b292      	uxth	r2, r2
 8015d0c:	4629      	mov	r1, r5
 8015d0e:	b280      	uxth	r0, r0
 8015d10:	f008 fafb 	bl	801e30a <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 8015d14:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015d16:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 8015d1a:	f88d 300c 	strb.w	r3, [sp, #12]
 8015d1e:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015d22:	aa03      	add	r2, sp, #12
 8015d24:	2303      	movs	r3, #3
 8015d26:	4629      	mov	r1, r5
 8015d28:	b280      	uxth	r0, r0
 8015d2a:	f008 fe39 	bl	801e9a0 <TFT_DisplayString>
			old_nan_Le = 1;}
 8015d2e:	2301      	movs	r3, #1
 8015d30:	703b      	strb	r3, [r7, #0]
			if(!energy_light & !old_nan_Ll){
 8015d32:	4e38      	ldr	r6, [pc, #224]	; (8015e14 <GUI_Text_L_Measure+0x2f4>)
 8015d34:	7833      	ldrb	r3, [r6, #0]
 8015d36:	bb4b      	cbnz	r3, 8015d8c <GUI_Text_L_Measure+0x26c>
 8015d38:	f1b9 0f00 	cmp.w	r9, #0
 8015d3c:	d126      	bne.n	8015d8c <GUI_Text_L_Measure+0x26c>
			TFT_SetTextColor(TFT_White);
 8015d3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015d42:	f008 fd11 	bl	801e768 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8015d46:	2063      	movs	r0, #99	; 0x63
 8015d48:	f008 fd14 	bl	801e774 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_digit);
 8015d4c:	4839      	ldr	r0, [pc, #228]	; (8015e34 <GUI_Text_L_Measure+0x314>)
 8015d4e:	f008 fd05 	bl	801e75c <TFT_SetFont>
			TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 8015d52:	2163      	movs	r1, #99	; 0x63
 8015d54:	f105 031a 	add.w	r3, r5, #26
 8015d58:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015d5c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8015d60:	9100      	str	r1, [sp, #0]
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	b292      	uxth	r2, r2
 8015d66:	4629      	mov	r1, r5
 8015d68:	b280      	uxth	r0, r0
 8015d6a:	f008 face 	bl	801e30a <TFT_FillRectangle>
			buffer[0] = '-';buffer[1] = '-';
 8015d6e:	232d      	movs	r3, #45	; 0x2d
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015d70:	f104 0075 	add.w	r0, r4, #117	; 0x75
			buffer[0] = '-';buffer[1] = '-';
 8015d74:	f88d 300c 	strb.w	r3, [sp, #12]
 8015d78:	f88d 300d 	strb.w	r3, [sp, #13]
			TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8015d7c:	aa03      	add	r2, sp, #12
 8015d7e:	2303      	movs	r3, #3
 8015d80:	4629      	mov	r1, r5
 8015d82:	b280      	uxth	r0, r0
 8015d84:	f008 fe0c 	bl	801e9a0 <TFT_DisplayString>
			old_nan_Ll = 1;}
 8015d88:	2301      	movs	r3, #1
 8015d8a:	7033      	strb	r3, [r6, #0]
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8015d8c:	2600      	movs	r6, #0
	
}
	if (Language_status == Ru && !energy_light)
 8015d8e:	4b2c      	ldr	r3, [pc, #176]	; (8015e40 <GUI_Text_L_Measure+0x320>)
 8015d90:	781f      	ldrb	r7, [r3, #0]
 8015d92:	2f00      	cmp	r7, #0
 8015d94:	d158      	bne.n	8015e48 <GUI_Text_L_Measure+0x328>
 8015d96:	f1b9 0f00 	cmp.w	r9, #0
 8015d9a:	f040 808f 	bne.w	8015ebc <GUI_Text_L_Measure+0x39c>
 8015d9e:	4b1e      	ldr	r3, [pc, #120]	; (8015e18 <GUI_Text_L_Measure+0x2f8>)
	{
		if (deg && old_deg_L != 1){
 8015da0:	781a      	ldrb	r2, [r3, #0]
 8015da2:	b316      	cbz	r6, 8015dea <GUI_Text_L_Measure+0x2ca>
 8015da4:	2a01      	cmp	r2, #1
 8015da6:	d017      	beq.n	8015dd8 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 1;
 8015da8:	2601      	movs	r6, #1
 8015daa:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y+3, X+250, Y+26, TFT_Black_Bkgr);
 8015dac:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8015db0:	f105 031a 	add.w	r3, r5, #26
 8015db4:	1ce9      	adds	r1, r5, #3
 8015db6:	2763      	movs	r7, #99	; 0x63
 8015db8:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8015dbc:	9700      	str	r7, [sp, #0]
 8015dbe:	b29b      	uxth	r3, r3
 8015dc0:	b292      	uxth	r2, r2
 8015dc2:	b289      	uxth	r1, r1
			GUI_TextRu_Cd_m2(X+205, Y, 1);
		}else if(!deg && old_deg_L != 0){
			old_deg_L = 0;
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8015dc4:	b280      	uxth	r0, r0
 8015dc6:	f008 faa0 	bl	801e30a <TFT_FillRectangle>
			GUI_TextRu_Cd_m2(X+205, Y, 0);
 8015dca:	f104 00cd 	add.w	r0, r4, #205	; 0xcd
 8015dce:	4632      	mov	r2, r6
 8015dd0:	4629      	mov	r1, r5
 8015dd2:	b280      	uxth	r0, r0
 8015dd4:	f005 f972 	bl	801b0bc <GUI_TextRu_Cd_m2>
		GUI_TextRu_W_m2_sr(X+210, Y);
	}else if (Language_status == En && energy_light)
	{
		GUI_TextEn_W_m2_sr(X+210, Y);
	}
}
 8015dd8:	b006      	add	sp, #24
 8015dda:	ecbd 8b02 	vpop	{d8}
 8015dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t	delta_pos = 117, deg = 0, number = 0, meas_type;
 8015de2:	4606      	mov	r6, r0
 8015de4:	e707      	b.n	8015bf6 <GUI_Text_L_Measure+0xd6>
	else if(!energy_light && number < old_numL_n)
 8015de6:	4b17      	ldr	r3, [pc, #92]	; (8015e44 <GUI_Text_L_Measure+0x324>)
 8015de8:	e744      	b.n	8015c74 <GUI_Text_L_Measure+0x154>
		}else if(!deg && old_deg_L != 0){
 8015dea:	2a00      	cmp	r2, #0
 8015dec:	d0f4      	beq.n	8015dd8 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 0;
 8015dee:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+193, Y, X+251, Y+26, TFT_Black_Bkgr);
 8015df0:	2163      	movs	r1, #99	; 0x63
 8015df2:	f105 031a 	add.w	r3, r5, #26
 8015df6:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8015dfa:	9100      	str	r1, [sp, #0]
 8015dfc:	f104 00c1 	add.w	r0, r4, #193	; 0xc1
 8015e00:	b29b      	uxth	r3, r3
 8015e02:	b292      	uxth	r2, r2
 8015e04:	4629      	mov	r1, r5
 8015e06:	e7dd      	b.n	8015dc4 <GUI_Text_L_Measure+0x2a4>
 8015e08:	2000022a 	.word	0x2000022a
 8015e0c:	20004c71 	.word	0x20004c71
 8015e10:	20004ca8 	.word	0x20004ca8
 8015e14:	20004ca9 	.word	0x20004ca9
 8015e18:	2000022c 	.word	0x2000022c
 8015e1c:	200001e8 	.word	0x200001e8
 8015e20:	200001c0 	.word	0x200001c0
 8015e24:	40240000 	.word	0x40240000
 8015e28:	408f4000 	.word	0x408f4000
 8015e2c:	3ff00000 	.word	0x3ff00000
 8015e30:	447a0000 	.word	0x447a0000
 8015e34:	200001f0 	.word	0x200001f0
 8015e38:	0803124d 	.word	0x0803124d
 8015e3c:	20000232 	.word	0x20000232
 8015e40:	20004c73 	.word	0x20004c73
 8015e44:	20000233 	.word	0x20000233
	else if (Language_status == En && !energy_light)
 8015e48:	2f01      	cmp	r7, #1
 8015e4a:	d1c5      	bne.n	8015dd8 <GUI_Text_L_Measure+0x2b8>
 8015e4c:	f1b9 0f00 	cmp.w	r9, #0
 8015e50:	d13b      	bne.n	8015eca <GUI_Text_L_Measure+0x3aa>
 8015e52:	4b21      	ldr	r3, [pc, #132]	; (8015ed8 <GUI_Text_L_Measure+0x3b8>)
		if (deg && old_deg_L != 1){
 8015e54:	781a      	ldrb	r2, [r3, #0]
 8015e56:	b1d6      	cbz	r6, 8015e8e <GUI_Text_L_Measure+0x36e>
 8015e58:	2a01      	cmp	r2, #1
 8015e5a:	d0bd      	beq.n	8015dd8 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 1;
 8015e5c:	701f      	strb	r7, [r3, #0]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 8015e5e:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8015e62:	f105 031a 	add.w	r3, r5, #26
 8015e66:	1f69      	subs	r1, r5, #5
 8015e68:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8015e6c:	2663      	movs	r6, #99	; 0x63
 8015e6e:	b292      	uxth	r2, r2
 8015e70:	b289      	uxth	r1, r1
 8015e72:	b280      	uxth	r0, r0
 8015e74:	9600      	str	r6, [sp, #0]
 8015e76:	b29b      	uxth	r3, r3
 8015e78:	f008 fa47 	bl	801e30a <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+210, Y-4, 1);
 8015e7c:	1f29      	subs	r1, r5, #4
 8015e7e:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8015e82:	463a      	mov	r2, r7
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 8015e84:	b289      	uxth	r1, r1
 8015e86:	b280      	uxth	r0, r0
 8015e88:	f003 ff9e 	bl	8019dc8 <GUI_TextEn_cd_m2>
 8015e8c:	e7a4      	b.n	8015dd8 <GUI_Text_L_Measure+0x2b8>
		}else if(!deg && old_deg_L != 0){
 8015e8e:	2a00      	cmp	r2, #0
 8015e90:	d0a2      	beq.n	8015dd8 <GUI_Text_L_Measure+0x2b8>
			old_deg_L = 0;
 8015e92:	701e      	strb	r6, [r3, #0]
			TFT_FillRectangle(X+195, Y-5, X+251, Y+26, TFT_Black_Bkgr);
 8015e94:	f104 02fb 	add.w	r2, r4, #251	; 0xfb
 8015e98:	f105 031a 	add.w	r3, r5, #26
 8015e9c:	1f69      	subs	r1, r5, #5
 8015e9e:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
 8015ea2:	2763      	movs	r7, #99	; 0x63
 8015ea4:	b292      	uxth	r2, r2
 8015ea6:	b289      	uxth	r1, r1
 8015ea8:	b280      	uxth	r0, r0
 8015eaa:	9700      	str	r7, [sp, #0]
 8015eac:	b29b      	uxth	r3, r3
 8015eae:	f008 fa2c 	bl	801e30a <TFT_FillRectangle>
			GUI_TextEn_cd_m2(X+215, Y-4, 0);
 8015eb2:	1f29      	subs	r1, r5, #4
 8015eb4:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
 8015eb8:	4632      	mov	r2, r6
 8015eba:	e7e3      	b.n	8015e84 <GUI_Text_L_Measure+0x364>
		GUI_TextRu_W_m2_sr(X+210, Y);
 8015ebc:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8015ec0:	4629      	mov	r1, r5
 8015ec2:	b280      	uxth	r0, r0
 8015ec4:	f005 f898 	bl	801aff8 <GUI_TextRu_W_m2_sr>
 8015ec8:	e786      	b.n	8015dd8 <GUI_Text_L_Measure+0x2b8>
		GUI_TextEn_W_m2_sr(X+210, Y);
 8015eca:	f104 00d2 	add.w	r0, r4, #210	; 0xd2
 8015ece:	4629      	mov	r1, r5
 8015ed0:	b280      	uxth	r0, r0
 8015ed2:	f003 ff21 	bl	8019d18 <GUI_TextEn_W_m2_sr>
}
 8015ed6:	e77f      	b.n	8015dd8 <GUI_Text_L_Measure+0x2b8>
 8015ed8:	2000022c 	.word	0x2000022c

08015edc <GUI_Text_PPF_Measure>:
uint8_t old_numPPF = 10, old_nan_PPF = 0;
void GUI_Text_PPF_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nan, uint8_t grey)
{	
 8015edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ee0:	ed2d 8b02 	vpush	{d8}
 8015ee4:	4616      	mov	r6, r2
 8015ee6:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8015ee8:	4ab0      	ldr	r2, [pc, #704]	; (80161ac <GUI_Text_PPF_Measure+0x2d0>)
 8015eea:	4bb1      	ldr	r3, [pc, #708]	; (80161b0 <GUI_Text_PPF_Measure+0x2d4>)
 8015eec:	4fb1      	ldr	r7, [pc, #708]	; (80161b4 <GUI_Text_PPF_Measure+0x2d8>)
{	
 8015eee:	4604      	mov	r4, r0
 8015ef0:	460d      	mov	r5, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8015ef2:	7810      	ldrb	r0, [r2, #0]
 8015ef4:	7819      	ldrb	r1, [r3, #0]
 8015ef6:	4288      	cmp	r0, r1
{	
 8015ef8:	b087      	sub	sp, #28
 8015efa:	4698      	mov	r8, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPF = 0;}
 8015efc:	bf1c      	itt	ne
 8015efe:	2300      	movne	r3, #0
 8015f00:	703b      	strbne	r3, [r7, #0]
	char buffer[9] = {0};
 8015f02:	2300      	movs	r3, #0
{	
 8015f04:	eeb0 8a40 	vmov.f32	s16, s0
 8015f08:	4691      	mov	r9, r2
	char buffer[9] = {0};
 8015f0a:	9303      	str	r3, [sp, #12]
 8015f0c:	9304      	str	r3, [sp, #16]
 8015f0e:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 122, deg = 0, number;
	uint32_t dec = 10;
	
		if(nan) 
 8015f12:	2e00      	cmp	r6, #0
 8015f14:	d067      	beq.n	8015fe6 <GUI_Text_PPF_Measure+0x10a>
		{	
			if(!old_nan_PPF){
 8015f16:	783e      	ldrb	r6, [r7, #0]
 8015f18:	2e00      	cmp	r6, #0
 8015f1a:	f040 80ef 	bne.w	80160fc <GUI_Text_PPF_Measure+0x220>
				TFT_SetTextColor(TFT_White);
 8015f1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015f22:	f008 fc21 	bl	801e768 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8015f26:	2063      	movs	r0, #99	; 0x63
 8015f28:	f008 fc24 	bl	801e774 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8015f2c:	48a2      	ldr	r0, [pc, #648]	; (80161b8 <GUI_Text_PPF_Measure+0x2dc>)
 8015f2e:	f008 fc15 	bl	801e75c <TFT_SetFont>
				TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);
 8015f32:	2163      	movs	r1, #99	; 0x63
 8015f34:	f105 031a 	add.w	r3, r5, #26
 8015f38:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015f3c:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8015f40:	9100      	str	r1, [sp, #0]
 8015f42:	b29b      	uxth	r3, r3
 8015f44:	b292      	uxth	r2, r2
 8015f46:	4629      	mov	r1, r5
 8015f48:	b280      	uxth	r0, r0
 8015f4a:	f008 f9de 	bl	801e30a <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8015f4e:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015f50:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8015f54:	f88d 300c 	strb.w	r3, [sp, #12]
 8015f58:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8015f5c:	aa03      	add	r2, sp, #12
 8015f5e:	2303      	movs	r3, #3
 8015f60:	4629      	mov	r1, r5
 8015f62:	b280      	uxth	r0, r0
 8015f64:	f008 fd1c 	bl	801e9a0 <TFT_DisplayString>
				old_nan_PPF = 1;
 8015f68:	2301      	movs	r3, #1
 8015f6a:	703b      	strb	r3, [r7, #0]
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	
{
	TFT_SetTextColor(TFT_White);
 8015f6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8015f70:	f008 fbfa 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8015f74:	2063      	movs	r0, #99	; 0x63
 8015f76:	f008 fbfd 	bl	801e774 <TFT_SetBackColor>
	if(Language_status == Ru ){
 8015f7a:	4b90      	ldr	r3, [pc, #576]	; (80161bc <GUI_Text_PPF_Measure+0x2e0>)
 8015f7c:	f8df b258 	ldr.w	fp, [pc, #600]	; 80161d8 <GUI_Text_PPF_Measure+0x2fc>
 8015f80:	781b      	ldrb	r3, [r3, #0]
 8015f82:	1caf      	adds	r7, r5, #2
 8015f84:	f104 0ac8 	add.w	sl, r4, #200	; 0xc8
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	f040 80bf 	bne.w	801610c <GUI_Text_PPF_Measure+0x230>
			TFT_SetFont(&Font26RU_arch_big);
 8015f8e:	488c      	ldr	r0, [pc, #560]	; (80161c0 <GUI_Text_PPF_Measure+0x2e4>)
 8015f90:	f008 fbe4 	bl	801e75c <TFT_SetFont>
			if(preGUI_screen_state != GUI_screen_state){
 8015f94:	f899 2000 	ldrb.w	r2, [r9]
 8015f98:	f898 3000 	ldrb.w	r3, [r8]
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	d012      	beq.n	8015fc6 <GUI_Text_PPF_Measure+0xea>
				TFT_DrawCharRus(X, Y, 'Ф'-17);
 8015fa0:	2293      	movs	r2, #147	; 0x93
 8015fa2:	4629      	mov	r1, r5
 8015fa4:	4620      	mov	r0, r4
 8015fa6:	f008 fbeb 	bl	801e780 <TFT_DrawCharRus>
				TFT_DrawCharRus(X+24, Y, 'А'-17);
 8015faa:	f104 0018 	add.w	r0, r4, #24
 8015fae:	227f      	movs	r2, #127	; 0x7f
 8015fb0:	4629      	mov	r1, r5
 8015fb2:	b280      	uxth	r0, r0
 8015fb4:	f008 fbe4 	bl	801e780 <TFT_DrawCharRus>
				TFT_DrawCharRus(X+48, Y, 'Р'-17);}
 8015fb8:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8015fbc:	228f      	movs	r2, #143	; 0x8f
 8015fbe:	4629      	mov	r1, r5
 8015fc0:	b280      	uxth	r0, r0
 8015fc2:	f008 fbdd 	bl	801e780 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 8015fc6:	f89b 3000 	ldrb.w	r3, [fp]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	f000 8098 	beq.w	8016100 <GUI_Text_PPF_Measure+0x224>
 8015fd0:	4632      	mov	r2, r6
 8015fd2:	b2b9      	uxth	r1, r7
 8015fd4:	fa1f f08a 	uxth.w	r0, sl
 8015fd8:	f004 fed8 	bl	801ad8c <GUI_TextRu_umol>
				TFT_DrawChar(X+5, Y+2, 'P');
				TFT_DrawChar(X+20, Y+2, 'L');}
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
			}
		}	}
}
 8015fdc:	b007      	add	sp, #28
 8015fde:	ecbd 8b02 	vpop	{d8}
 8015fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_PPF){TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);}
 8015fe6:	783b      	ldrb	r3, [r7, #0]
 8015fe8:	b16b      	cbz	r3, 8016006 <GUI_Text_PPF_Measure+0x12a>
 8015fea:	2163      	movs	r1, #99	; 0x63
 8015fec:	f105 031a 	add.w	r3, r5, #26
 8015ff0:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8015ff4:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8015ff8:	9100      	str	r1, [sp, #0]
 8015ffa:	b29b      	uxth	r3, r3
 8015ffc:	b292      	uxth	r2, r2
 8015ffe:	4629      	mov	r1, r5
 8016000:	b280      	uxth	r0, r0
 8016002:	f008 f982 	bl	801e30a <TFT_FillRectangle>
	Value = floor(Value*10)/10.0;
 8016006:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801600a:	ee68 7a27 	vmul.f32	s15, s16, s15
	old_nan_PPF = 0;
 801600e:	2300      	movs	r3, #0
	Value = floor(Value*10)/10.0;
 8016010:	ee17 0a90 	vmov	r0, s15
	old_nan_PPF = 0;
 8016014:	703b      	strb	r3, [r7, #0]
	Value = floor(Value*10)/10.0;
 8016016:	f7ea faa7 	bl	8000568 <__aeabi_f2d>
 801601a:	ec41 0b10 	vmov	d0, r0, r1
 801601e:	f00c fb9b 	bl	8022758 <floor>
 8016022:	2200      	movs	r2, #0
 8016024:	ec51 0b10 	vmov	r0, r1, d0
 8016028:	4b66      	ldr	r3, [pc, #408]	; (80161c4 <GUI_Text_PPF_Measure+0x2e8>)
 801602a:	f7ea fc1b 	bl	8000864 <__aeabi_ddiv>
 801602e:	f7ea fde7 	bl	8000c00 <__aeabi_d2f>
	if((Value/1000) >= 1.0)
 8016032:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80161c8 <GUI_Text_PPF_Measure+0x2ec>
	Value = floor(Value*10)/10.0;
 8016036:	ee08 0a10 	vmov	s16, r0
	if((Value/1000) >= 1.0)
 801603a:	eec8 7a07 	vdiv.f32	s15, s16, s14
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801603e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016042:	f249 40d2 	movw	r0, #38098	; 0x94d2
	uint8_t	delta_pos = 122, deg = 0, number;
 8016046:	277a      	movs	r7, #122	; 0x7a
	if((Value/1000) >= 1.0)
 8016048:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
		Value = Value/(1000);
 801604c:	eef4 7a68 	vcmp.f32	s15, s17
 8016050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016054:	bfa8      	it	ge
 8016056:	eeb0 8a67 	vmovge.f32	s16, s15
 801605a:	bfa8      	it	ge
 801605c:	2601      	movge	r6, #1
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801605e:	f1bb 0f00 	cmp.w	fp, #0
 8016062:	bf08      	it	eq
 8016064:	4618      	moveq	r0, r3
 8016066:	f008 fb7f 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801606a:	2063      	movs	r0, #99	; 0x63
 801606c:	f008 fb82 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8016070:	4851      	ldr	r0, [pc, #324]	; (80161b8 <GUI_Text_PPF_Measure+0x2dc>)
 8016072:	f008 fb73 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 8016076:	ee18 0a10 	vmov	r0, s16
 801607a:	f7ea fa75 	bl	8000568 <__aeabi_f2d>
 801607e:	4602      	mov	r2, r0
 8016080:	460b      	mov	r3, r1
 8016082:	a803      	add	r0, sp, #12
 8016084:	4951      	ldr	r1, [pc, #324]	; (80161cc <GUI_Text_PPF_Measure+0x2f0>)
 8016086:	f00b fe83 	bl	8021d90 <siprintf>
	uint32_t dec = 10;
 801608a:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 801608c:	2304      	movs	r3, #4
			dec *= 10;
 801608e:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8016090:	ee07 2a90 	vmov	s15, r2
 8016094:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8016098:	eec8 7a07 	vdiv.f32	s15, s16, s14
 801609c:	eef4 7ae8 	vcmpe.f32	s15, s17
 80160a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160a4:	db06      	blt.n	80160b4 <GUI_Text_PPF_Measure+0x1d8>
			delta_pos-=23;
 80160a6:	3f17      	subs	r7, #23
			number++;
 80160a8:	f10a 0a01 	add.w	sl, sl, #1
			dec *= 10;
 80160ac:	434a      	muls	r2, r1
			delta_pos-=23;
 80160ae:	b2ff      	uxtb	r7, r7
			number++;
 80160b0:	fa5f fa8a 	uxtb.w	sl, sl
 80160b4:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80160b6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80160ba:	d1e9      	bne.n	8016090 <GUI_Text_PPF_Measure+0x1b4>
	if(number < old_numPPF )
 80160bc:	4b44      	ldr	r3, [pc, #272]	; (80161d0 <GUI_Text_PPF_Measure+0x2f4>)
 80160be:	781a      	ldrb	r2, [r3, #0]
 80160c0:	4552      	cmp	r2, sl
 80160c2:	469b      	mov	fp, r3
 80160c4:	d90d      	bls.n	80160e2 <GUI_Text_PPF_Measure+0x206>
		TFT_FillRectangle(X+70, Y, X+197, Y+26, TFT_Black_Bkgr);
 80160c6:	2163      	movs	r1, #99	; 0x63
 80160c8:	f105 031a 	add.w	r3, r5, #26
 80160cc:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 80160d0:	f104 0046 	add.w	r0, r4, #70	; 0x46
 80160d4:	9100      	str	r1, [sp, #0]
 80160d6:	b29b      	uxth	r3, r3
 80160d8:	b292      	uxth	r2, r2
 80160da:	4629      	mov	r1, r5
 80160dc:	b280      	uxth	r0, r0
 80160de:	f008 f914 	bl	801e30a <TFT_FillRectangle>
	buffer[8] = 0;
 80160e2:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80160e4:	19e0      	adds	r0, r4, r7
	buffer[8] = 0;
 80160e6:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80160ea:	aa03      	add	r2, sp, #12
 80160ec:	2303      	movs	r3, #3
 80160ee:	4629      	mov	r1, r5
 80160f0:	b280      	uxth	r0, r0
	old_numPPF = number;
 80160f2:	f88b a000 	strb.w	sl, [fp]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80160f6:	f008 fc53 	bl	801e9a0 <TFT_DisplayString>
 80160fa:	e737      	b.n	8015f6c <GUI_Text_PPF_Measure+0x90>
	uint8_t	delta_pos = 122, deg = 0, number;
 80160fc:	461e      	mov	r6, r3
 80160fe:	e735      	b.n	8015f6c <GUI_Text_PPF_Measure+0x90>
		(Mode_EL) ? GUI_TextRu_umol(X+200, Y+2, deg) : GUI_TextRu_umol_sr(X+200, Y+2);
 8016100:	b2b9      	uxth	r1, r7
 8016102:	fa1f f08a 	uxth.w	r0, sl
 8016106:	f004 feaf 	bl	801ae68 <GUI_TextRu_umol_sr>
 801610a:	e767      	b.n	8015fdc <GUI_Text_PPF_Measure+0x100>
			TFT_SetFont(&Font16EN_arch_big);
 801610c:	4831      	ldr	r0, [pc, #196]	; (80161d4 <GUI_Text_PPF_Measure+0x2f8>)
 801610e:	f008 fb25 	bl	801e75c <TFT_SetFont>
			if(Mode_EL){
 8016112:	f89b 3000 	ldrb.w	r3, [fp]
				if(preGUI_screen_state != GUI_screen_state){
 8016116:	f899 2000 	ldrb.w	r2, [r9]
			if(Mode_EL){
 801611a:	b333      	cbz	r3, 801616a <GUI_Text_PPF_Measure+0x28e>
				if(preGUI_screen_state != GUI_screen_state){
 801611c:	f898 3000 	ldrb.w	r3, [r8]
 8016120:	429a      	cmp	r2, r3
 8016122:	d01b      	beq.n	801615c <GUI_Text_PPF_Measure+0x280>
				TFT_DrawChar(X-10, Y+2, 'P');
 8016124:	b2bd      	uxth	r5, r7
 8016126:	f1a4 000a 	sub.w	r0, r4, #10
 801612a:	2250      	movs	r2, #80	; 0x50
 801612c:	4629      	mov	r1, r5
 801612e:	b280      	uxth	r0, r0
 8016130:	f008 fbde 	bl	801e8f0 <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 8016134:	1d60      	adds	r0, r4, #5
 8016136:	2250      	movs	r2, #80	; 0x50
 8016138:	4629      	mov	r1, r5
 801613a:	b280      	uxth	r0, r0
 801613c:	f008 fbd8 	bl	801e8f0 <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'F');
 8016140:	f104 0014 	add.w	r0, r4, #20
 8016144:	2246      	movs	r2, #70	; 0x46
 8016146:	4629      	mov	r1, r5
 8016148:	b280      	uxth	r0, r0
 801614a:	f008 fbd1 	bl	801e8f0 <TFT_DrawChar>
				TFT_DrawChar(X+35, Y+2, 'D');}
 801614e:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8016152:	2244      	movs	r2, #68	; 0x44
 8016154:	4629      	mov	r1, r5
 8016156:	b280      	uxth	r0, r0
 8016158:	f008 fbca 	bl	801e8f0 <TFT_DrawChar>
				GUI_TextEn_umol(X+200, Y+2, deg);
 801615c:	4632      	mov	r2, r6
 801615e:	b2b9      	uxth	r1, r7
 8016160:	fa1f f08a 	uxth.w	r0, sl
 8016164:	f002 feb2 	bl	8018ecc <GUI_TextEn_umol>
 8016168:	e738      	b.n	8015fdc <GUI_Text_PPF_Measure+0x100>
				if(preGUI_screen_state != GUI_screen_state){
 801616a:	f898 3000 	ldrb.w	r3, [r8]
 801616e:	429a      	cmp	r2, r3
 8016170:	d014      	beq.n	801619c <GUI_Text_PPF_Measure+0x2c0>
				TFT_DrawChar(X-10, Y+2, 'P');
 8016172:	b2bd      	uxth	r5, r7
 8016174:	f1a4 000a 	sub.w	r0, r4, #10
 8016178:	2250      	movs	r2, #80	; 0x50
 801617a:	4629      	mov	r1, r5
 801617c:	b280      	uxth	r0, r0
 801617e:	f008 fbb7 	bl	801e8f0 <TFT_DrawChar>
				TFT_DrawChar(X+5, Y+2, 'P');
 8016182:	1d60      	adds	r0, r4, #5
 8016184:	2250      	movs	r2, #80	; 0x50
 8016186:	4629      	mov	r1, r5
 8016188:	b280      	uxth	r0, r0
 801618a:	f008 fbb1 	bl	801e8f0 <TFT_DrawChar>
				TFT_DrawChar(X+20, Y+2, 'L');}
 801618e:	f104 0014 	add.w	r0, r4, #20
 8016192:	224c      	movs	r2, #76	; 0x4c
 8016194:	4629      	mov	r1, r5
 8016196:	b280      	uxth	r0, r0
 8016198:	f008 fbaa 	bl	801e8f0 <TFT_DrawChar>
				GUI_TextEn_umol_sr(X+200, Y+2, deg);
 801619c:	4632      	mov	r2, r6
 801619e:	b2b9      	uxth	r1, r7
 80161a0:	fa1f f08a 	uxth.w	r0, sl
 80161a4:	f002 fef8 	bl	8018f98 <GUI_TextEn_umol_sr>
}
 80161a8:	e718      	b.n	8015fdc <GUI_Text_PPF_Measure+0x100>
 80161aa:	bf00      	nop
 80161ac:	2000022a 	.word	0x2000022a
 80161b0:	20004c71 	.word	0x20004c71
 80161b4:	20004caa 	.word	0x20004caa
 80161b8:	200001f0 	.word	0x200001f0
 80161bc:	20004c73 	.word	0x20004c73
 80161c0:	20000200 	.word	0x20000200
 80161c4:	40240000 	.word	0x40240000
 80161c8:	447a0000 	.word	0x447a0000
 80161cc:	0803124d 	.word	0x0803124d
 80161d0:	20000234 	.word	0x20000234
 80161d4:	200001b0 	.word	0x200001b0
 80161d8:	20000a48 	.word	0x20000a48

080161dc <GUI_Text_PPFRGB_Measure>:
uint8_t old_numPPFR = 10, old_numPPFG = 10, old_numPPFB = 10, old_numPPFFR = 10, test = 0, test2 = 0, delta_pos2 = 140, old_nan_PPFRGB = 0;
float ValueB2 = 10;
void GUI_Text_PPFRGB_Measure(uint16_t X, uint16_t Y, float ValueR, float ValueG, float ValueB, float ValueFR, uint8_t nan, uint8_t grey)
{
 80161dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161e0:	ed2d 8b08 	vpush	{d8-d11}
 80161e4:	4616      	mov	r6, r2
 80161e6:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 80161e8:	4aad      	ldr	r2, [pc, #692]	; (80164a0 <GUI_Text_PPFRGB_Measure+0x2c4>)
 80161ea:	4bae      	ldr	r3, [pc, #696]	; (80164a4 <GUI_Text_PPFRGB_Measure+0x2c8>)
 80161ec:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80164c0 <GUI_Text_PPFRGB_Measure+0x2e4>
{
 80161f0:	4605      	mov	r5, r0
 80161f2:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 80161f4:	7810      	ldrb	r0, [r2, #0]
 80161f6:	7819      	ldrb	r1, [r3, #0]
{
 80161f8:	b089      	sub	sp, #36	; 0x24
	if(preGUI_screen_state != GUI_screen_state){old_nan_PPFRGB = 0;}
 80161fa:	4288      	cmp	r0, r1
 80161fc:	9303      	str	r3, [sp, #12]
 80161fe:	bf1c      	itt	ne
 8016200:	2300      	movne	r3, #0
 8016202:	f889 3000 	strbne.w	r3, [r9]
	
	char buffer[9] = {0};
 8016206:	2300      	movs	r3, #0
{
 8016208:	eeb0 ba40 	vmov.f32	s22, s0
 801620c:	eef0 9a60 	vmov.f32	s19, s1
 8016210:	eeb0 8a41 	vmov.f32	s16, s2
 8016214:	eef0 aa61 	vmov.f32	s21, s3
 8016218:	9202      	str	r2, [sp, #8]
	char buffer[9] = {0};
 801621a:	9305      	str	r3, [sp, #20]
 801621c:	9306      	str	r3, [sp, #24]
 801621e:	f88d 301c 	strb.w	r3, [sp, #28]
	uint8_t	delta_pos = 140, deg = 0, number=0;
	uint32_t dec = 10;
		if(nan) 
 8016222:	2e00      	cmp	r6, #0
 8016224:	f000 814e 	beq.w	80164c4 <GUI_Text_PPFRGB_Measure+0x2e8>
		{	
			if(!old_nan_PPFRGB){
 8016228:	f899 7000 	ldrb.w	r7, [r9]
 801622c:	2f00      	cmp	r7, #0
 801622e:	f040 8379 	bne.w	8016924 <GUI_Text_PPFRGB_Measure+0x748>
				TFT_SetTextColor(TFT_White);
 8016232:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016236:	f008 fa97 	bl	801e768 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 801623a:	2063      	movs	r0, #99	; 0x63
 801623c:	f008 fa9a 	bl	801e774 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8016240:	f105 0662 	add.w	r6, r5, #98	; 0x62
				TFT_SetFont(&Font26EN_arch_digit);
 8016244:	4898      	ldr	r0, [pc, #608]	; (80164a8 <GUI_Text_PPFRGB_Measure+0x2cc>)
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 8016246:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
				TFT_SetFont(&Font26EN_arch_digit);
 801624a:	f008 fa87 	bl	801e75c <TFT_SetFont>
				TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 801624e:	b2b6      	uxth	r6, r6
 8016250:	fa1f f888 	uxth.w	r8, r8
 8016254:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8016258:	f104 0314 	add.w	r3, r4, #20
 801625c:	4630      	mov	r0, r6
 801625e:	b29b      	uxth	r3, r3
 8016260:	4642      	mov	r2, r8
 8016262:	4621      	mov	r1, r4
 8016264:	f8cd a000 	str.w	sl, [sp]
 8016268:	f008 f84f 	bl	801e30a <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 801626c:	f104 0329 	add.w	r3, r4, #41	; 0x29
 8016270:	f104 0115 	add.w	r1, r4, #21
 8016274:	4630      	mov	r0, r6
 8016276:	b29b      	uxth	r3, r3
 8016278:	4642      	mov	r2, r8
 801627a:	b289      	uxth	r1, r1
 801627c:	f8cd a000 	str.w	sl, [sp]
 8016280:	f008 f843 	bl	801e30a <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 8016284:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 8016288:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 801628c:	4630      	mov	r0, r6
 801628e:	b29b      	uxth	r3, r3
 8016290:	4642      	mov	r2, r8
 8016292:	b289      	uxth	r1, r1
 8016294:	f8cd a000 	str.w	sl, [sp]
 8016298:	f008 f837 	bl	801e30a <TFT_FillRectangle>
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 801629c:	f104 0357 	add.w	r3, r4, #87	; 0x57
 80162a0:	f104 0141 	add.w	r1, r4, #65	; 0x41
 80162a4:	4630      	mov	r0, r6
 80162a6:	b29b      	uxth	r3, r3
 80162a8:	4642      	mov	r2, r8
 80162aa:	b289      	uxth	r1, r1
 80162ac:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80162b0:	f105 0675 	add.w	r6, r5, #117	; 0x75
				TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 80162b4:	f008 f829 	bl	801e30a <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80162b8:	b2b6      	uxth	r6, r6
				buffer[0] = '-';buffer[1] = '-';
 80162ba:	232d      	movs	r3, #45	; 0x2d
 80162bc:	f88d 3014 	strb.w	r3, [sp, #20]
 80162c0:	f88d 3015 	strb.w	r3, [sp, #21]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80162c4:	aa05      	add	r2, sp, #20
 80162c6:	2303      	movs	r3, #3
 80162c8:	4621      	mov	r1, r4
 80162ca:	4630      	mov	r0, r6
 80162cc:	f008 fb68 	bl	801e9a0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+22, (uint8_t *)buffer, LEFT_MODE);
 80162d0:	f104 0116 	add.w	r1, r4, #22
 80162d4:	2303      	movs	r3, #3
 80162d6:	aa05      	add	r2, sp, #20
 80162d8:	b289      	uxth	r1, r1
 80162da:	4630      	mov	r0, r6
 80162dc:	f008 fb60 	bl	801e9a0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+44, (uint8_t *)buffer, LEFT_MODE);
 80162e0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80162e4:	2303      	movs	r3, #3
 80162e6:	aa05      	add	r2, sp, #20
 80162e8:	b289      	uxth	r1, r1
 80162ea:	4630      	mov	r0, r6
 80162ec:	f008 fb58 	bl	801e9a0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+66, (uint8_t *)buffer, LEFT_MODE);
 80162f0:	f104 0142 	add.w	r1, r4, #66	; 0x42
 80162f4:	2303      	movs	r3, #3
 80162f6:	aa05      	add	r2, sp, #20
 80162f8:	b289      	uxth	r1, r1
 80162fa:	4630      	mov	r0, r6
 80162fc:	f008 fb50 	bl	801e9a0 <TFT_DisplayString>
				old_nan_PPFRGB = 1;
 8016300:	2301      	movs	r3, #1
 8016302:	f889 3000 	strb.w	r3, [r9]
	number = 0;
	
	buffer[8] = 0;
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 8016306:	9b02      	ldr	r3, [sp, #8]
 8016308:	781a      	ldrb	r2, [r3, #0]
 801630a:	9b03      	ldr	r3, [sp, #12]
 801630c:	781b      	ldrb	r3, [r3, #0]
 801630e:	429a      	cmp	r2, r3
 8016310:	f000 80c1 	beq.w	8016496 <GUI_Text_PPFRGB_Measure+0x2ba>
if (Language_status==Ru)
 8016314:	4e65      	ldr	r6, [pc, #404]	; (80164ac <GUI_Text_PPFRGB_Measure+0x2d0>)
 8016316:	7833      	ldrb	r3, [r6, #0]
 8016318:	2b00      	cmp	r3, #0
 801631a:	f040 830a 	bne.w	8016932 <GUI_Text_PPFRGB_Measure+0x756>
	{	TFT_SetTextColor(TFT_White);
 801631e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016322:	f008 fa21 	bl	801e768 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
 8016326:	4862      	ldr	r0, [pc, #392]	; (80164b0 <GUI_Text_PPFRGB_Measure+0x2d4>)
 8016328:	f008 fa18 	bl	801e75c <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y, 'С');
 801632c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016330:	22a1      	movs	r2, #161	; 0xa1
 8016332:	4621      	mov	r1, r4
 8016334:	b280      	uxth	r0, r0
 8016336:	f008 fa23 	bl	801e780 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+5, 'и');
 801633a:	f104 0805 	add.w	r8, r4, #5
		TFT_SetFont(&Font16RU_arch_small);
 801633e:	485d      	ldr	r0, [pc, #372]	; (80164b4 <GUI_Text_PPFRGB_Measure+0x2d8>)
 8016340:	f008 fa0c 	bl	801e75c <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+5, 'и');
 8016344:	fa1f f888 	uxth.w	r8, r8
 8016348:	f105 0036 	add.w	r0, r5, #54	; 0x36
 801634c:	22b8      	movs	r2, #184	; 0xb8
 801634e:	4641      	mov	r1, r8
 8016350:	b280      	uxth	r0, r0
 8016352:	f008 fa15 	bl	801e780 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+5, 'н');
 8016356:	f105 0042 	add.w	r0, r5, #66	; 0x42
 801635a:	b280      	uxth	r0, r0
 801635c:	22bd      	movs	r2, #189	; 0xbd
 801635e:	4641      	mov	r1, r8
 8016360:	f008 fa0e 	bl	801e780 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8016364:	4b54      	ldr	r3, [pc, #336]	; (80164b8 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8016366:	781b      	ldrb	r3, [r3, #0]
 8016368:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 801636c:	2b00      	cmp	r3, #0
 801636e:	f000 82db 	beq.w	8016928 <GUI_Text_PPFRGB_Measure+0x74c>
 8016372:	463a      	mov	r2, r7
 8016374:	4621      	mov	r1, r4
 8016376:	b280      	uxth	r0, r0
 8016378:	f004 fd08 	bl	801ad8c <GUI_TextRu_umol>
	{TFT_SetTextColor(TFT_White);
		GUI_TextEn_Blue(X+34, Y);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
	}
	
	if (Language_status==Ru)
 801637c:	7833      	ldrb	r3, [r6, #0]
 801637e:	2b00      	cmp	r3, #0
 8016380:	f040 82f7 	bne.w	8016972 <GUI_Text_PPFRGB_Measure+0x796>
	{	TFT_SetTextColor(TFT_White);
 8016384:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016388:	f008 f9ee 	bl	801e768 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+22, 'З');
 801638c:	f104 0816 	add.w	r8, r4, #22
		TFT_SetFont(&Font16RU_arch_big);
 8016390:	4847      	ldr	r0, [pc, #284]	; (80164b0 <GUI_Text_PPFRGB_Measure+0x2d4>)
 8016392:	f008 f9e3 	bl	801e75c <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+22, 'З');
 8016396:	fa1f f888 	uxth.w	r8, r8
 801639a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801639e:	2297      	movs	r2, #151	; 0x97
 80163a0:	4641      	mov	r1, r8
 80163a2:	b280      	uxth	r0, r0
 80163a4:	f008 f9ec 	bl	801e780 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
		TFT_DrawCharRus(X+54, Y+27, 'е');
 80163a8:	f104 091b 	add.w	r9, r4, #27
		TFT_SetFont(&Font16RU_arch_small);
 80163ac:	4841      	ldr	r0, [pc, #260]	; (80164b4 <GUI_Text_PPFRGB_Measure+0x2d8>)
 80163ae:	f008 f9d5 	bl	801e75c <TFT_SetFont>
		TFT_DrawCharRus(X+54, Y+27, 'е');
 80163b2:	fa1f f989 	uxth.w	r9, r9
 80163b6:	f105 0036 	add.w	r0, r5, #54	; 0x36
 80163ba:	22b5      	movs	r2, #181	; 0xb5
 80163bc:	4649      	mov	r1, r9
 80163be:	b280      	uxth	r0, r0
 80163c0:	f008 f9de 	bl	801e780 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+66, Y+27, 'л');
 80163c4:	f105 0042 	add.w	r0, r5, #66	; 0x42
 80163c8:	b280      	uxth	r0, r0
 80163ca:	22bb      	movs	r2, #187	; 0xbb
 80163cc:	4649      	mov	r1, r9
 80163ce:	f008 f9d7 	bl	801e780 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 80163d2:	4b39      	ldr	r3, [pc, #228]	; (80164b8 <GUI_Text_PPFRGB_Measure+0x2dc>)
 80163d4:	781b      	ldrb	r3, [r3, #0]
 80163d6:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 80163da:	2b00      	cmp	r3, #0
 80163dc:	f000 82c4 	beq.w	8016968 <GUI_Text_PPFRGB_Measure+0x78c>
 80163e0:	463a      	mov	r2, r7
 80163e2:	4641      	mov	r1, r8
 80163e4:	b280      	uxth	r0, r0
 80163e6:	f004 fcd1 	bl	801ad8c <GUI_TextRu_umol>
		GUI_TextEn_Green(X+17, Y+22);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
	}
	
	
	if (Language_status==Ru)
 80163ea:	7833      	ldrb	r3, [r6, #0]
 80163ec:	f105 0925 	add.w	r9, r5, #37	; 0x25
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	f040 82e2 	bne.w	80169ba <GUI_Text_PPFRGB_Measure+0x7de>
	{	TFT_SetTextColor(TFT_White);
 80163f6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80163fa:	f008 f9b5 	bl	801e768 <TFT_SetTextColor>
		TFT_SetFont(&Font16RU_arch_big);
		TFT_DrawCharRus(X+40, Y+44, 'К');
 80163fe:	f104 082c 	add.w	r8, r4, #44	; 0x2c
		TFT_SetFont(&Font16RU_arch_big);
 8016402:	482b      	ldr	r0, [pc, #172]	; (80164b0 <GUI_Text_PPFRGB_Measure+0x2d4>)
 8016404:	f008 f9aa 	bl	801e75c <TFT_SetFont>
		TFT_DrawCharRus(X+40, Y+44, 'К');
 8016408:	fa1f f888 	uxth.w	r8, r8
 801640c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016410:	229a      	movs	r2, #154	; 0x9a
 8016412:	4641      	mov	r1, r8
 8016414:	b280      	uxth	r0, r0
 8016416:	f008 f9b3 	bl	801e780 <TFT_DrawCharRus>
		TFT_SetFont(&Font16RU_arch_small);
 801641a:	4826      	ldr	r0, [pc, #152]	; (80164b4 <GUI_Text_PPFRGB_Measure+0x2d8>)
 801641c:	f008 f99e 	bl	801e75c <TFT_SetFont>
		TFT_DrawCharRus(X+55, Y+49, 'р');
 8016420:	f104 0131 	add.w	r1, r4, #49	; 0x31
 8016424:	f105 0037 	add.w	r0, r5, #55	; 0x37
 8016428:	b280      	uxth	r0, r0
 801642a:	2280      	movs	r2, #128	; 0x80
 801642c:	b289      	uxth	r1, r1
 801642e:	f008 f9a7 	bl	801e780 <TFT_DrawCharRus>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 8016432:	4b21      	ldr	r3, [pc, #132]	; (80164b8 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8016434:	781b      	ldrb	r3, [r3, #0]
 8016436:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 801643a:	2b00      	cmp	r3, #0
 801643c:	f000 82b8 	beq.w	80169b0 <GUI_Text_PPFRGB_Measure+0x7d4>
 8016440:	463a      	mov	r2, r7
 8016442:	4641      	mov	r1, r8
 8016444:	b280      	uxth	r0, r0
 8016446:	f004 fca1 	bl	801ad8c <GUI_TextRu_umol>
	else if (Language_status==En)
	{	TFT_SetTextColor(TFT_White);
		GUI_TextEn_Red(X+37, Y+44);
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
	}
	TFT_SetTextColor(TFT_White);
 801644a:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+37, Y+66, 'F');
 801644e:	3442      	adds	r4, #66	; 0x42
	TFT_SetTextColor(TFT_White);
 8016450:	f008 f98a 	bl	801e768 <TFT_SetTextColor>
	TFT_DrawChar(X+37, Y+66, 'F');
 8016454:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_big);
 8016456:	4819      	ldr	r0, [pc, #100]	; (80164bc <GUI_Text_PPFRGB_Measure+0x2e0>)
 8016458:	f008 f980 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+37, Y+66, 'F');
 801645c:	2246      	movs	r2, #70	; 0x46
 801645e:	4621      	mov	r1, r4
 8016460:	fa1f f089 	uxth.w	r0, r9
 8016464:	f008 fa44 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+66, 'R');
 8016468:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801646c:	2252      	movs	r2, #82	; 0x52
 801646e:	4621      	mov	r1, r4
 8016470:	b280      	uxth	r0, r0
 8016472:	f008 fa3d 	bl	801e8f0 <TFT_DrawChar>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 8016476:	7833      	ldrb	r3, [r6, #0]
 8016478:	2b00      	cmp	r3, #0
 801647a:	f040 82c1 	bne.w	8016a00 <GUI_Text_PPFRGB_Measure+0x824>
 801647e:	4b0e      	ldr	r3, [pc, #56]	; (80164b8 <GUI_Text_PPFRGB_Measure+0x2dc>)
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 8016486:	2b00      	cmp	r3, #0
 8016488:	f000 82b5 	beq.w	80169f6 <GUI_Text_PPFRGB_Measure+0x81a>
 801648c:	463a      	mov	r2, r7
 801648e:	4621      	mov	r1, r4
 8016490:	b280      	uxth	r0, r0
 8016492:	f004 fc7b 	bl	801ad8c <GUI_TextRu_umol>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
}
}
 8016496:	b009      	add	sp, #36	; 0x24
 8016498:	ecbd 8b08 	vpop	{d8-d11}
 801649c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164a0:	2000022a 	.word	0x2000022a
 80164a4:	20004c71 	.word	0x20004c71
 80164a8:	200001f0 	.word	0x200001f0
 80164ac:	20004c73 	.word	0x20004c73
 80164b0:	200001d0 	.word	0x200001d0
 80164b4:	200001d8 	.word	0x200001d8
 80164b8:	20000a48 	.word	0x20000a48
 80164bc:	200001b0 	.word	0x200001b0
 80164c0:	20004cab 	.word	0x20004cab
		if(old_nan_PPFRGB) 
 80164c4:	f899 3000 	ldrb.w	r3, [r9]
 80164c8:	b3b3      	cbz	r3, 8016538 <GUI_Text_PPFRGB_Measure+0x35c>
			TFT_FillRectangle(X+98, Y+0, X+195, Y+20, TFT_Black_Bkgr);
 80164ca:	f105 0762 	add.w	r7, r5, #98	; 0x62
 80164ce:	f105 08c3 	add.w	r8, r5, #195	; 0xc3
 80164d2:	b2bf      	uxth	r7, r7
 80164d4:	fa1f f888 	uxth.w	r8, r8
 80164d8:	f04f 0a63 	mov.w	sl, #99	; 0x63
 80164dc:	f104 0314 	add.w	r3, r4, #20
 80164e0:	b29b      	uxth	r3, r3
 80164e2:	4642      	mov	r2, r8
 80164e4:	4621      	mov	r1, r4
 80164e6:	4638      	mov	r0, r7
 80164e8:	f8cd a000 	str.w	sl, [sp]
 80164ec:	f007 ff0d 	bl	801e30a <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 80164f0:	f104 0329 	add.w	r3, r4, #41	; 0x29
 80164f4:	f104 0115 	add.w	r1, r4, #21
 80164f8:	b29b      	uxth	r3, r3
 80164fa:	4642      	mov	r2, r8
 80164fc:	b289      	uxth	r1, r1
 80164fe:	4638      	mov	r0, r7
 8016500:	f8cd a000 	str.w	sl, [sp]
 8016504:	f007 ff01 	bl	801e30a <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 8016508:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 801650c:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 8016510:	b29b      	uxth	r3, r3
 8016512:	4642      	mov	r2, r8
 8016514:	b289      	uxth	r1, r1
 8016516:	4638      	mov	r0, r7
 8016518:	f8cd a000 	str.w	sl, [sp]
 801651c:	f007 fef5 	bl	801e30a <TFT_FillRectangle>
			TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 8016520:	f104 0357 	add.w	r3, r4, #87	; 0x57
 8016524:	f104 0141 	add.w	r1, r4, #65	; 0x41
 8016528:	f8cd a000 	str.w	sl, [sp]
 801652c:	b29b      	uxth	r3, r3
 801652e:	4642      	mov	r2, r8
 8016530:	b289      	uxth	r1, r1
 8016532:	4638      	mov	r0, r7
 8016534:	f007 fee9 	bl	801e30a <TFT_FillRectangle>
	ValueB = floor(ValueB*10)/10.0;
 8016538:	eef2 8a04 	vmov.f32	s17, #36	; 0x41200000  10.0
 801653c:	ee68 7a28 	vmul.f32	s15, s16, s17
	old_nan_PPFRGB = 0;
 8016540:	2700      	movs	r7, #0
	ValueB = floor(ValueB*10)/10.0;
 8016542:	ee17 0a90 	vmov	r0, s15
	old_nan_PPFRGB = 0;
 8016546:	f889 7000 	strb.w	r7, [r9]
	ValueB = floor(ValueB*10)/10.0;
 801654a:	f7ea f80d 	bl	8000568 <__aeabi_f2d>
 801654e:	ec41 0b10 	vmov	d0, r0, r1
 8016552:	f00c f901 	bl	8022758 <floor>
 8016556:	2200      	movs	r2, #0
 8016558:	ec51 0b10 	vmov	r0, r1, d0
 801655c:	4bd4      	ldr	r3, [pc, #848]	; (80168b0 <GUI_Text_PPFRGB_Measure+0x6d4>)
 801655e:	f7ea f981 	bl	8000864 <__aeabi_ddiv>
 8016562:	f7ea fb4d 	bl	8000c00 <__aeabi_d2f>
	if((ValueB/1000) > 1.0)
 8016566:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 80168b4 <GUI_Text_PPFRGB_Measure+0x6d8>
	test = ValueB/(dec);
 801656a:	4ad3      	ldr	r2, [pc, #844]	; (80168b8 <GUI_Text_PPFRGB_Measure+0x6dc>)
	ValueB = floor(ValueB*10)/10.0;
 801656c:	ee09 0a10 	vmov	s18, r0
	if((ValueB/1000) > 1.0)
 8016570:	eec9 7a07 	vdiv.f32	s15, s18, s14
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016574:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8016578:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		ValueB = ValueB/(1000);
 801657c:	eef4 7a48 	vcmp.f32	s15, s16
 8016580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016584:	bfc8      	it	gt
 8016586:	eeb0 9a67 	vmovgt.f32	s18, s15
	test = ValueB/(dec);
 801658a:	eec9 7a28 	vdiv.f32	s15, s18, s17
 801658e:	eeb0 aa47 	vmov.f32	s20, s14
 8016592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	test2 = ValueB/(dec*dec);
 8016596:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 80168bc <GUI_Text_PPFRGB_Measure+0x6e0>
	test = ValueB/(dec);
 801659a:	ee17 3a90 	vmov	r3, s15
	test2 = ValueB/(dec*dec);
 801659e:	eec9 7a07 	vdiv.f32	s15, s18, s14
	test = ValueB/(dec);
 80165a2:	7013      	strb	r3, [r2, #0]
	test2 = ValueB/(dec*dec);
 80165a4:	4ac6      	ldr	r2, [pc, #792]	; (80168c0 <GUI_Text_PPFRGB_Measure+0x6e4>)
 80165a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80165aa:	ee17 3a90 	vmov	r3, s15
 80165ae:	7013      	strb	r3, [r2, #0]
	delta_pos2 = 140;
 80165b0:	4bc4      	ldr	r3, [pc, #784]	; (80168c4 <GUI_Text_PPFRGB_Measure+0x6e8>)
 80165b2:	228c      	movs	r2, #140	; 0x8c
 80165b4:	701a      	strb	r2, [r3, #0]
 80165b6:	4698      	mov	r8, r3
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80165b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80165bc:	45bb      	cmp	fp, r7
 80165be:	bf08      	it	eq
 80165c0:	4618      	moveq	r0, r3
 80165c2:	f008 f8d1 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80165c6:	2063      	movs	r0, #99	; 0x63
 80165c8:	f008 f8d4 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80165cc:	48be      	ldr	r0, [pc, #760]	; (80168c8 <GUI_Text_PPFRGB_Measure+0x6ec>)
 80165ce:	f008 f8c5 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueB);
 80165d2:	ee19 0a10 	vmov	r0, s18
 80165d6:	f7e9 ffc7 	bl	8000568 <__aeabi_f2d>
 80165da:	4602      	mov	r2, r0
 80165dc:	460b      	mov	r3, r1
 80165de:	a805      	add	r0, sp, #20
 80165e0:	49ba      	ldr	r1, [pc, #744]	; (80168cc <GUI_Text_PPFRGB_Measure+0x6f0>)
 80165e2:	f00b fbd5 	bl	8021d90 <siprintf>
	uint32_t dec = 10;
 80165e6:	210a      	movs	r1, #10
 80165e8:	f898 3000 	ldrb.w	r3, [r8]
	sprintf (buffer, "%.1f", ValueB);
 80165ec:	2204      	movs	r2, #4
 80165ee:	4638      	mov	r0, r7
			dec *= 10;
 80165f0:	468e      	mov	lr, r1
		if((ValueB/((float)dec)) >= 1.0)
 80165f2:	ee07 1a90 	vmov	s15, r1
 80165f6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80165fa:	eec9 7a07 	vdiv.f32	s15, s18, s14
 80165fe:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016606:	db06      	blt.n	8016616 <GUI_Text_PPFRGB_Measure+0x43a>
			delta_pos2-=22;
 8016608:	3b16      	subs	r3, #22
			number++;
 801660a:	3701      	adds	r7, #1
			dec *= 10;
 801660c:	fb0e f101 	mul.w	r1, lr, r1
			delta_pos2-=22;
 8016610:	b2db      	uxtb	r3, r3
			number++;
 8016612:	b2ff      	uxtb	r7, r7
 8016614:	2001      	movs	r0, #1
 8016616:	3a01      	subs	r2, #1
	for (uint8_t i = 1; i <= 4; i++)
 8016618:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 801661c:	d1e9      	bne.n	80165f2 <GUI_Text_PPFRGB_Measure+0x416>
 801661e:	b108      	cbz	r0, 8016624 <GUI_Text_PPFRGB_Measure+0x448>
 8016620:	f888 3000 	strb.w	r3, [r8]
	if(number < old_numPPFB )
 8016624:	4baa      	ldr	r3, [pc, #680]	; (80168d0 <GUI_Text_PPFRGB_Measure+0x6f4>)
 8016626:	781a      	ldrb	r2, [r3, #0]
 8016628:	42ba      	cmp	r2, r7
 801662a:	4699      	mov	r9, r3
 801662c:	d90d      	bls.n	801664a <GUI_Text_PPFRGB_Measure+0x46e>
		TFT_FillRectangle(X+98, Y, X+195, Y+20, TFT_Black_Bkgr);
 801662e:	2163      	movs	r1, #99	; 0x63
 8016630:	f104 0314 	add.w	r3, r4, #20
 8016634:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 8016638:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801663c:	9100      	str	r1, [sp, #0]
 801663e:	b29b      	uxth	r3, r3
 8016640:	b292      	uxth	r2, r2
 8016642:	4621      	mov	r1, r4
 8016644:	b280      	uxth	r0, r0
 8016646:	f007 fe60 	bl	801e30a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos2, Y, (uint8_t *)buffer, LEFT_MODE);
 801664a:	f898 0000 	ldrb.w	r0, [r8]
	old_numPPFB = number;
 801664e:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos2, Y, (uint8_t *)buffer, LEFT_MODE);
 8016652:	4428      	add	r0, r5
 8016654:	2303      	movs	r3, #3
 8016656:	aa05      	add	r2, sp, #20
 8016658:	4621      	mov	r1, r4
 801665a:	b280      	uxth	r0, r0
	buffer[8] = 0;
 801665c:	2700      	movs	r7, #0
 801665e:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos2, Y, (uint8_t *)buffer, LEFT_MODE);
 8016662:	f008 f99d 	bl	801e9a0 <TFT_DisplayString>
	ValueR = floor(ValueR*10)/10.0;
 8016666:	ee6b 7a28 	vmul.f32	s15, s22, s17
	delta_pos = 140;
 801666a:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueR = floor(ValueR*10)/10.0;
 801666e:	ee17 0a90 	vmov	r0, s15
 8016672:	f7e9 ff79 	bl	8000568 <__aeabi_f2d>
 8016676:	ec41 0b10 	vmov	d0, r0, r1
 801667a:	f00c f86d 	bl	8022758 <floor>
 801667e:	2200      	movs	r2, #0
 8016680:	4b8b      	ldr	r3, [pc, #556]	; (80168b0 <GUI_Text_PPFRGB_Measure+0x6d4>)
 8016682:	ec51 0b10 	vmov	r0, r1, d0
 8016686:	f7ea f8ed 	bl	8000864 <__aeabi_ddiv>
 801668a:	f7ea fab9 	bl	8000c00 <__aeabi_d2f>
	if((ValueG/1000) > 1.0)
 801668e:	eec9 7a8a 	vdiv.f32	s15, s19, s20
	ValueR = floor(ValueR*10)/10.0;
 8016692:	ee09 0a10 	vmov	s18, r0
		ValueG = ValueG/(1000);
 8016696:	eef4 7a48 	vcmp.f32	s15, s16
 801669a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801669e:	bfc8      	it	gt
 80166a0:	eef0 9a67 	vmovgt.f32	s19, s15
	TFT_SetFont(&Font16EN_arch_big);
 80166a4:	4888      	ldr	r0, [pc, #544]	; (80168c8 <GUI_Text_PPFRGB_Measure+0x6ec>)
 80166a6:	f008 f859 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueG);
 80166aa:	ee19 0a90 	vmov	r0, s19
 80166ae:	f7e9 ff5b 	bl	8000568 <__aeabi_f2d>
 80166b2:	4602      	mov	r2, r0
 80166b4:	460b      	mov	r3, r1
 80166b6:	a805      	add	r0, sp, #20
 80166b8:	4984      	ldr	r1, [pc, #528]	; (80168cc <GUI_Text_PPFRGB_Measure+0x6f0>)
 80166ba:	f00b fb69 	bl	8021d90 <siprintf>
	dec = 10;
 80166be:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueG);
 80166c0:	2304      	movs	r3, #4
			dec *= 10;
 80166c2:	4611      	mov	r1, r2
		if((ValueG/(dec)) >= 1.0)
 80166c4:	ee07 2a90 	vmov	s15, r2
 80166c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80166cc:	eec9 7a87 	vdiv.f32	s15, s19, s14
 80166d0:	eef4 7ac8 	vcmpe.f32	s15, s16
 80166d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166d8:	db06      	blt.n	80166e8 <GUI_Text_PPFRGB_Measure+0x50c>
			delta_pos-=22;
 80166da:	f1a8 0816 	sub.w	r8, r8, #22
			number++;
 80166de:	3701      	adds	r7, #1
			dec *= 10;
 80166e0:	434a      	muls	r2, r1
			delta_pos-=22;
 80166e2:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80166e6:	b2ff      	uxtb	r7, r7
 80166e8:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80166ea:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80166ee:	d1e9      	bne.n	80166c4 <GUI_Text_PPFRGB_Measure+0x4e8>
		if(number < old_numPPFG )
 80166f0:	4b78      	ldr	r3, [pc, #480]	; (80168d4 <GUI_Text_PPFRGB_Measure+0x6f8>)
 80166f2:	781a      	ldrb	r2, [r3, #0]
 80166f4:	42ba      	cmp	r2, r7
 80166f6:	4699      	mov	r9, r3
 80166f8:	d911      	bls.n	801671e <GUI_Text_PPFRGB_Measure+0x542>
		TFT_FillRectangle(X+98, Y+21, X+195, Y+41, TFT_Black_Bkgr);
 80166fa:	f104 0329 	add.w	r3, r4, #41	; 0x29
 80166fe:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 8016702:	f104 0115 	add.w	r1, r4, #21
 8016706:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801670a:	f04f 0e63 	mov.w	lr, #99	; 0x63
 801670e:	f8cd e000 	str.w	lr, [sp]
 8016712:	b29b      	uxth	r3, r3
 8016714:	b292      	uxth	r2, r2
 8016716:	b289      	uxth	r1, r1
 8016718:	b280      	uxth	r0, r0
 801671a:	f007 fdf6 	bl	801e30a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 801671e:	eb05 0008 	add.w	r0, r5, r8
 8016722:	f104 0116 	add.w	r1, r4, #22
 8016726:	2303      	movs	r3, #3
 8016728:	aa05      	add	r2, sp, #20
	old_numPPFG = number;
 801672a:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 801672e:	b289      	uxth	r1, r1
 8016730:	b280      	uxth	r0, r0
	buffer[8] = 0;
 8016732:	2700      	movs	r7, #0
 8016734:	f88d 701c 	strb.w	r7, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+22, (uint8_t *)buffer, LEFT_MODE);
 8016738:	f008 f932 	bl	801e9a0 <TFT_DisplayString>
	ValueR = floor(ValueR*10)/10.0;
 801673c:	ee69 7a28 	vmul.f32	s15, s18, s17
	delta_pos = 140;
 8016740:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueR = floor(ValueR*10)/10.0;
 8016744:	ee17 0a90 	vmov	r0, s15
 8016748:	f7e9 ff0e 	bl	8000568 <__aeabi_f2d>
 801674c:	ec41 0b10 	vmov	d0, r0, r1
 8016750:	f00c f802 	bl	8022758 <floor>
 8016754:	2200      	movs	r2, #0
 8016756:	4b56      	ldr	r3, [pc, #344]	; (80168b0 <GUI_Text_PPFRGB_Measure+0x6d4>)
 8016758:	ec51 0b10 	vmov	r0, r1, d0
 801675c:	f7ea f882 	bl	8000864 <__aeabi_ddiv>
 8016760:	f7ea fa4e 	bl	8000c00 <__aeabi_d2f>
 8016764:	ee09 0a10 	vmov	s18, r0
	if((ValueR/1000) > 1.0)
 8016768:	eec9 7a0a 	vdiv.f32	s15, s18, s20
	TFT_SetFont(&Font16EN_arch_big);
 801676c:	4856      	ldr	r0, [pc, #344]	; (80168c8 <GUI_Text_PPFRGB_Measure+0x6ec>)
		ValueR = ValueR/(1000);
 801676e:	eef4 7a48 	vcmp.f32	s15, s16
 8016772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016776:	bfc8      	it	gt
 8016778:	eeb0 9a67 	vmovgt.f32	s18, s15
	TFT_SetFont(&Font16EN_arch_big);
 801677c:	f007 ffee 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueR);
 8016780:	ee19 0a10 	vmov	r0, s18
 8016784:	f7e9 fef0 	bl	8000568 <__aeabi_f2d>
 8016788:	4602      	mov	r2, r0
 801678a:	460b      	mov	r3, r1
 801678c:	a805      	add	r0, sp, #20
 801678e:	494f      	ldr	r1, [pc, #316]	; (80168cc <GUI_Text_PPFRGB_Measure+0x6f0>)
 8016790:	f00b fafe 	bl	8021d90 <siprintf>
	dec = 10;
 8016794:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueR);
 8016796:	2304      	movs	r3, #4
			dec *= 10;
 8016798:	4611      	mov	r1, r2
		if((ValueR/(dec)) >= 1.0)
 801679a:	ee07 2a90 	vmov	s15, r2
 801679e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80167a2:	eec9 7a07 	vdiv.f32	s15, s18, s14
 80167a6:	eef4 7ac8 	vcmpe.f32	s15, s16
 80167aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80167ae:	db06      	blt.n	80167be <GUI_Text_PPFRGB_Measure+0x5e2>
			delta_pos-=22;
 80167b0:	f1a8 0816 	sub.w	r8, r8, #22
			number++;
 80167b4:	3701      	adds	r7, #1
			dec *= 10;
 80167b6:	434a      	muls	r2, r1
			delta_pos-=22;
 80167b8:	fa5f f888 	uxtb.w	r8, r8
			number++;
 80167bc:	b2ff      	uxtb	r7, r7
 80167be:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80167c0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80167c4:	d1e9      	bne.n	801679a <GUI_Text_PPFRGB_Measure+0x5be>
	if(number < old_numPPFR )
 80167c6:	4b44      	ldr	r3, [pc, #272]	; (80168d8 <GUI_Text_PPFRGB_Measure+0x6fc>)
 80167c8:	781a      	ldrb	r2, [r3, #0]
 80167ca:	42ba      	cmp	r2, r7
 80167cc:	4699      	mov	r9, r3
 80167ce:	d911      	bls.n	80167f4 <GUI_Text_PPFRGB_Measure+0x618>
		TFT_FillRectangle(X+98, Y+42, X+195, Y+63, TFT_Black_Bkgr);
 80167d0:	f104 033f 	add.w	r3, r4, #63	; 0x3f
 80167d4:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 80167d8:	f104 012a 	add.w	r1, r4, #42	; 0x2a
 80167dc:	f105 0062 	add.w	r0, r5, #98	; 0x62
 80167e0:	f04f 0e63 	mov.w	lr, #99	; 0x63
 80167e4:	f8cd e000 	str.w	lr, [sp]
 80167e8:	b29b      	uxth	r3, r3
 80167ea:	b292      	uxth	r2, r2
 80167ec:	b289      	uxth	r1, r1
 80167ee:	b280      	uxth	r0, r0
 80167f0:	f007 fd8b 	bl	801e30a <TFT_FillRectangle>
	buffer[8] = 0;
 80167f4:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 80167f6:	eb05 0008 	add.w	r0, r5, r8
 80167fa:	f104 012c 	add.w	r1, r4, #44	; 0x2c
 80167fe:	aa05      	add	r2, sp, #20
	buffer[8] = 0;
 8016800:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 8016804:	b289      	uxth	r1, r1
 8016806:	2303      	movs	r3, #3
 8016808:	b280      	uxth	r0, r0
	old_numPPFR = number;
 801680a:	f889 7000 	strb.w	r7, [r9]
	TFT_DisplayString(X+delta_pos, Y+44, (uint8_t *)buffer, LEFT_MODE);
 801680e:	f008 f8c7 	bl	801e9a0 <TFT_DisplayString>
	ValueFR = floor(ValueFR*10)/10.0;
 8016812:	ee6a 7aa8 	vmul.f32	s15, s21, s17
	delta_pos = 140;
 8016816:	f04f 088c 	mov.w	r8, #140	; 0x8c
	ValueFR = floor(ValueFR*10)/10.0;
 801681a:	ee17 0a90 	vmov	r0, s15
 801681e:	f7e9 fea3 	bl	8000568 <__aeabi_f2d>
 8016822:	ec41 0b10 	vmov	d0, r0, r1
 8016826:	f00b ff97 	bl	8022758 <floor>
 801682a:	2200      	movs	r2, #0
 801682c:	4b20      	ldr	r3, [pc, #128]	; (80168b0 <GUI_Text_PPFRGB_Measure+0x6d4>)
 801682e:	ec51 0b10 	vmov	r0, r1, d0
 8016832:	f7ea f817 	bl	8000864 <__aeabi_ddiv>
 8016836:	f7ea f9e3 	bl	8000c00 <__aeabi_d2f>
 801683a:	ee08 0a90 	vmov	s17, r0
	if((ValueFR/1000) > 1.0)
 801683e:	eec8 7a8a 	vdiv.f32	s15, s17, s20
	TFT_SetFont(&Font16EN_arch_big);
 8016842:	4821      	ldr	r0, [pc, #132]	; (80168c8 <GUI_Text_PPFRGB_Measure+0x6ec>)
	else deg=0;
 8016844:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801684c:	bfc8      	it	gt
 801684e:	eef0 8a67 	vmovgt.f32	s17, s15
 8016852:	bfcc      	ite	gt
 8016854:	2701      	movgt	r7, #1
 8016856:	2700      	movle	r7, #0
	TFT_SetFont(&Font16EN_arch_big);
 8016858:	f007 ff80 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%.1f", ValueFR);
 801685c:	ee18 0a90 	vmov	r0, s17
 8016860:	f7e9 fe82 	bl	8000568 <__aeabi_f2d>
 8016864:	4602      	mov	r2, r0
 8016866:	460b      	mov	r3, r1
 8016868:	a805      	add	r0, sp, #20
 801686a:	4918      	ldr	r1, [pc, #96]	; (80168cc <GUI_Text_PPFRGB_Measure+0x6f0>)
 801686c:	f00b fa90 	bl	8021d90 <siprintf>
	dec = 10;
 8016870:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", ValueFR);
 8016872:	2304      	movs	r3, #4
			dec *= 10;
 8016874:	4611      	mov	r1, r2
		if((ValueFR/(dec)) >= 1.0)
 8016876:	ee07 2a90 	vmov	s15, r2
 801687a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801687e:	eec8 7a87 	vdiv.f32	s15, s17, s14
 8016882:	eef4 7ac8 	vcmpe.f32	s15, s16
 8016886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801688a:	db06      	blt.n	801689a <GUI_Text_PPFRGB_Measure+0x6be>
			delta_pos-=22;
 801688c:	f1a8 0816 	sub.w	r8, r8, #22
			number++;
 8016890:	3601      	adds	r6, #1
			dec *= 10;
 8016892:	434a      	muls	r2, r1
			delta_pos-=22;
 8016894:	fa5f f888 	uxtb.w	r8, r8
			number++;
 8016898:	b2f6      	uxtb	r6, r6
 801689a:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 801689c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80168a0:	d1e9      	bne.n	8016876 <GUI_Text_PPFRGB_Measure+0x69a>
	if(number < old_numPPFFR )
 80168a2:	4b0e      	ldr	r3, [pc, #56]	; (80168dc <GUI_Text_PPFRGB_Measure+0x700>)
 80168a4:	781a      	ldrb	r2, [r3, #0]
 80168a6:	42b2      	cmp	r2, r6
 80168a8:	4699      	mov	r9, r3
 80168aa:	d92b      	bls.n	8016904 <GUI_Text_PPFRGB_Measure+0x728>
 80168ac:	e018      	b.n	80168e0 <GUI_Text_PPFRGB_Measure+0x704>
 80168ae:	bf00      	nop
 80168b0:	40240000 	.word	0x40240000
 80168b4:	447a0000 	.word	0x447a0000
 80168b8:	20004cb2 	.word	0x20004cb2
 80168bc:	42c80000 	.word	0x42c80000
 80168c0:	20004cb3 	.word	0x20004cb3
 80168c4:	2000022b 	.word	0x2000022b
 80168c8:	200001b0 	.word	0x200001b0
 80168cc:	0803124d 	.word	0x0803124d
 80168d0:	20000235 	.word	0x20000235
 80168d4:	20000237 	.word	0x20000237
 80168d8:	20000238 	.word	0x20000238
 80168dc:	20000236 	.word	0x20000236
		TFT_FillRectangle(X+98, Y+65, X+195, Y+87, TFT_Black_Bkgr);
 80168e0:	f104 0357 	add.w	r3, r4, #87	; 0x57
 80168e4:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
 80168e8:	f104 0141 	add.w	r1, r4, #65	; 0x41
 80168ec:	f105 0062 	add.w	r0, r5, #98	; 0x62
 80168f0:	f04f 0e63 	mov.w	lr, #99	; 0x63
 80168f4:	f8cd e000 	str.w	lr, [sp]
 80168f8:	b29b      	uxth	r3, r3
 80168fa:	b292      	uxth	r2, r2
 80168fc:	b289      	uxth	r1, r1
 80168fe:	b280      	uxth	r0, r0
 8016900:	f007 fd03 	bl	801e30a <TFT_FillRectangle>
	buffer[8] = 0;
 8016904:	2300      	movs	r3, #0
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8016906:	f104 0142 	add.w	r1, r4, #66	; 0x42
 801690a:	eb05 0008 	add.w	r0, r5, r8
	buffer[8] = 0;
 801690e:	f88d 301c 	strb.w	r3, [sp, #28]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 8016912:	aa05      	add	r2, sp, #20
 8016914:	2303      	movs	r3, #3
 8016916:	b289      	uxth	r1, r1
 8016918:	b280      	uxth	r0, r0
	old_numPPFFR = number;
 801691a:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+66, (uint8_t *)buffer, LEFT_MODE);
 801691e:	f008 f83f 	bl	801e9a0 <TFT_DisplayString>
 8016922:	e4f0      	b.n	8016306 <GUI_Text_PPFRGB_Measure+0x12a>
	uint8_t	delta_pos = 140, deg = 0, number=0;
 8016924:	461f      	mov	r7, r3
 8016926:	e4ee      	b.n	8016306 <GUI_Text_PPFRGB_Measure+0x12a>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y, deg) : GUI_TextRu_umol_sr(X+202, Y) ;
 8016928:	4621      	mov	r1, r4
 801692a:	b280      	uxth	r0, r0
 801692c:	f004 fa9c 	bl	801ae68 <GUI_TextRu_umol_sr>
 8016930:	e524      	b.n	801637c <GUI_Text_PPFRGB_Measure+0x1a0>
	else if (Language_status==En)
 8016932:	2b01      	cmp	r3, #1
 8016934:	f47f ad22 	bne.w	801637c <GUI_Text_PPFRGB_Measure+0x1a0>
	{TFT_SetTextColor(TFT_White);
 8016938:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801693c:	f007 ff14 	bl	801e768 <TFT_SetTextColor>
		GUI_TextEn_Blue(X+34, Y);
 8016940:	f105 0022 	add.w	r0, r5, #34	; 0x22
 8016944:	4621      	mov	r1, r4
 8016946:	b280      	uxth	r0, r0
 8016948:	f003 fae0 	bl	8019f0c <GUI_TextEn_Blue>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y, deg) : GUI_TextEn_umol_sr(X+200, Y, deg);	
 801694c:	4b35      	ldr	r3, [pc, #212]	; (8016a24 <GUI_Text_PPFRGB_Measure+0x848>)
 801694e:	781b      	ldrb	r3, [r3, #0]
 8016950:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8016954:	463a      	mov	r2, r7
 8016956:	4621      	mov	r1, r4
 8016958:	b280      	uxth	r0, r0
 801695a:	b113      	cbz	r3, 8016962 <GUI_Text_PPFRGB_Measure+0x786>
 801695c:	f002 fab6 	bl	8018ecc <GUI_TextEn_umol>
 8016960:	e50c      	b.n	801637c <GUI_Text_PPFRGB_Measure+0x1a0>
 8016962:	f002 fb19 	bl	8018f98 <GUI_TextEn_umol_sr>
 8016966:	e509      	b.n	801637c <GUI_Text_PPFRGB_Measure+0x1a0>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+22, deg) : GUI_TextRu_umol_sr(X+202, Y+22) ;	
 8016968:	4641      	mov	r1, r8
 801696a:	b280      	uxth	r0, r0
 801696c:	f004 fa7c 	bl	801ae68 <GUI_TextRu_umol_sr>
 8016970:	e53b      	b.n	80163ea <GUI_Text_PPFRGB_Measure+0x20e>
	else if (Language_status==En)
 8016972:	2b01      	cmp	r3, #1
 8016974:	f47f ad39 	bne.w	80163ea <GUI_Text_PPFRGB_Measure+0x20e>
	{	TFT_SetTextColor(TFT_White);
 8016978:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Green(X+17, Y+22);
 801697c:	f104 0816 	add.w	r8, r4, #22
	{	TFT_SetTextColor(TFT_White);
 8016980:	f007 fef2 	bl	801e768 <TFT_SetTextColor>
		GUI_TextEn_Green(X+17, Y+22);
 8016984:	fa1f f888 	uxth.w	r8, r8
 8016988:	f105 0011 	add.w	r0, r5, #17
 801698c:	4641      	mov	r1, r8
 801698e:	b280      	uxth	r0, r0
 8016990:	f003 fa8a 	bl	8019ea8 <GUI_TextEn_Green>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+22, deg) : GUI_TextEn_umol_sr(X+200, Y+22, deg);	
 8016994:	4b23      	ldr	r3, [pc, #140]	; (8016a24 <GUI_Text_PPFRGB_Measure+0x848>)
 8016996:	781b      	ldrb	r3, [r3, #0]
 8016998:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 801699c:	463a      	mov	r2, r7
 801699e:	4641      	mov	r1, r8
 80169a0:	b280      	uxth	r0, r0
 80169a2:	b113      	cbz	r3, 80169aa <GUI_Text_PPFRGB_Measure+0x7ce>
 80169a4:	f002 fa92 	bl	8018ecc <GUI_TextEn_umol>
 80169a8:	e51f      	b.n	80163ea <GUI_Text_PPFRGB_Measure+0x20e>
 80169aa:	f002 faf5 	bl	8018f98 <GUI_TextEn_umol_sr>
 80169ae:	e51c      	b.n	80163ea <GUI_Text_PPFRGB_Measure+0x20e>
		(Mode_EL) ? GUI_TextRu_umol(X+202, Y+44, deg) : GUI_TextRu_umol_sr(X+202, Y+44) ;	
 80169b0:	4641      	mov	r1, r8
 80169b2:	b280      	uxth	r0, r0
 80169b4:	f004 fa58 	bl	801ae68 <GUI_TextRu_umol_sr>
 80169b8:	e547      	b.n	801644a <GUI_Text_PPFRGB_Measure+0x26e>
	else if (Language_status==En)
 80169ba:	2b01      	cmp	r3, #1
 80169bc:	f47f ad45 	bne.w	801644a <GUI_Text_PPFRGB_Measure+0x26e>
		GUI_TextEn_Red(X+37, Y+44);
 80169c0:	f104 082c 	add.w	r8, r4, #44	; 0x2c
	{	TFT_SetTextColor(TFT_White);
 80169c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
		GUI_TextEn_Red(X+37, Y+44);
 80169c8:	fa1f f888 	uxth.w	r8, r8
	{	TFT_SetTextColor(TFT_White);
 80169cc:	f007 fecc 	bl	801e768 <TFT_SetTextColor>
		GUI_TextEn_Red(X+37, Y+44);
 80169d0:	4641      	mov	r1, r8
 80169d2:	fa1f f089 	uxth.w	r0, r9
 80169d6:	f003 fac5 	bl	8019f64 <GUI_TextEn_Red>
		(Mode_EL) ? GUI_TextEn_umol(X+200, Y+44, deg) : GUI_TextEn_umol_sr(X+200, Y+44, deg);	
 80169da:	4b12      	ldr	r3, [pc, #72]	; (8016a24 <GUI_Text_PPFRGB_Measure+0x848>)
 80169dc:	781b      	ldrb	r3, [r3, #0]
 80169de:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 80169e2:	463a      	mov	r2, r7
 80169e4:	4641      	mov	r1, r8
 80169e6:	b280      	uxth	r0, r0
 80169e8:	b113      	cbz	r3, 80169f0 <GUI_Text_PPFRGB_Measure+0x814>
 80169ea:	f002 fa6f 	bl	8018ecc <GUI_TextEn_umol>
 80169ee:	e52c      	b.n	801644a <GUI_Text_PPFRGB_Measure+0x26e>
 80169f0:	f002 fad2 	bl	8018f98 <GUI_TextEn_umol_sr>
 80169f4:	e529      	b.n	801644a <GUI_Text_PPFRGB_Measure+0x26e>
	if (Language_status==Ru) (Mode_EL) ? GUI_TextRu_umol(X+202, Y+66, deg) : GUI_TextRu_umol_sr(X+202, Y+66) ;	
 80169f6:	4621      	mov	r1, r4
 80169f8:	b280      	uxth	r0, r0
 80169fa:	f004 fa35 	bl	801ae68 <GUI_TextRu_umol_sr>
 80169fe:	e54a      	b.n	8016496 <GUI_Text_PPFRGB_Measure+0x2ba>
	else if (Language_status==En) (Mode_EL) ? GUI_TextEn_umol(X+200, Y+66, deg) : GUI_TextEn_umol_sr(X+200, Y+66, deg);	;
 8016a00:	2b01      	cmp	r3, #1
 8016a02:	f47f ad48 	bne.w	8016496 <GUI_Text_PPFRGB_Measure+0x2ba>
 8016a06:	4b07      	ldr	r3, [pc, #28]	; (8016a24 <GUI_Text_PPFRGB_Measure+0x848>)
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	f105 00c8 	add.w	r0, r5, #200	; 0xc8
 8016a0e:	463a      	mov	r2, r7
 8016a10:	4621      	mov	r1, r4
 8016a12:	b280      	uxth	r0, r0
 8016a14:	b113      	cbz	r3, 8016a1c <GUI_Text_PPFRGB_Measure+0x840>
 8016a16:	f002 fa59 	bl	8018ecc <GUI_TextEn_umol>
 8016a1a:	e53c      	b.n	8016496 <GUI_Text_PPFRGB_Measure+0x2ba>
 8016a1c:	f002 fabc 	bl	8018f98 <GUI_TextEn_umol_sr>
}
 8016a20:	e539      	b.n	8016496 <GUI_Text_PPFRGB_Measure+0x2ba>
 8016a22:	bf00      	nop
 8016a24:	20000a48 	.word	0x20000a48

08016a28 <GUI_Text_XYZ_Measure>:
uint8_t old_numX = 10, old_numY = 10, old_numZ = 10, old_nanXYZ = 0;
void GUI_Text_XYZ_Measure(uint16_t X, uint16_t Y, uint16_t ValueX, uint16_t ValueY, uint16_t ValueZ, uint8_t nan, uint8_t grey)
{
 8016a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a2c:	b087      	sub	sp, #28
 8016a2e:	4605      	mov	r5, r0
 8016a30:	9302      	str	r3, [sp, #8]
 8016a32:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016a36:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
 8016a38:	2300      	movs	r3, #0
{
 8016a3a:	460c      	mov	r4, r1
 8016a3c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
	char buffer[5] = {0};
 8016a40:	9304      	str	r3, [sp, #16]
 8016a42:	f88d 3014 	strb.w	r3, [sp, #20]
	uint8_t	delta_pos = 190, number = 0;
	uint32_t dec = 10;
	
	if((ValueX ==0 && ValueY ==100 && ValueZ ==0)||nan)
 8016a46:	4693      	mov	fp, r2
 8016a48:	b922      	cbnz	r2, 8016a54 <GUI_Text_XYZ_Measure+0x2c>
 8016a4a:	9b02      	ldr	r3, [sp, #8]
 8016a4c:	2b64      	cmp	r3, #100	; 0x64
 8016a4e:	d101      	bne.n	8016a54 <GUI_Text_XYZ_Measure+0x2c>
 8016a50:	9b03      	ldr	r3, [sp, #12]
 8016a52:	b10b      	cbz	r3, 8016a58 <GUI_Text_XYZ_Measure+0x30>
 8016a54:	2e00      	cmp	r6, #0
 8016a56:	d07c      	beq.n	8016b52 <GUI_Text_XYZ_Measure+0x12a>
	{
		if(!old_nanXYZ){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 8016a58:	4bb2      	ldr	r3, [pc, #712]	; (8016d24 <GUI_Text_XYZ_Measure+0x2fc>)
 8016a5a:	781a      	ldrb	r2, [r3, #0]
 8016a5c:	469a      	mov	sl, r3
 8016a5e:	b96a      	cbnz	r2, 8016a7c <GUI_Text_XYZ_Measure+0x54>
 8016a60:	2163      	movs	r1, #99	; 0x63
 8016a62:	f104 035f 	add.w	r3, r4, #95	; 0x5f
 8016a66:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8016a6a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016a6e:	9100      	str	r1, [sp, #0]
 8016a70:	b29b      	uxth	r3, r3
 8016a72:	b292      	uxth	r2, r2
 8016a74:	4621      	mov	r1, r4
 8016a76:	b280      	uxth	r0, r0
 8016a78:	f007 fc47 	bl	801e30a <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 8016a7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016a80:	f007 fe72 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016a84:	f105 0987 	add.w	r9, r5, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 8016a88:	2063      	movs	r0, #99	; 0x63
 8016a8a:	f007 fe73 	bl	801e774 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016a8e:	fa1f f989 	uxth.w	r9, r9
 8016a92:	48a5      	ldr	r0, [pc, #660]	; (8016d28 <GUI_Text_XYZ_Measure+0x300>)
 8016a94:	f105 08a0 	add.w	r8, r5, #160	; 0xa0
 8016a98:	f007 fe60 	bl	801e75c <TFT_SetFont>
 8016a9c:	fa1f f888 	uxth.w	r8, r8
 8016aa0:	222d      	movs	r2, #45	; 0x2d
 8016aa2:	4621      	mov	r1, r4
 8016aa4:	4648      	mov	r0, r9
 8016aa6:	f105 06b9 	add.w	r6, r5, #185	; 0xb9
 8016aaa:	f007 ff21 	bl	801e8f0 <TFT_DrawChar>
 8016aae:	b2b6      	uxth	r6, r6
 8016ab0:	2220      	movs	r2, #32
 8016ab2:	4621      	mov	r1, r4
 8016ab4:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016ab6:	f104 0723 	add.w	r7, r4, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016aba:	f007 ff19 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016abe:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016ac0:	222d      	movs	r2, #45	; 0x2d
 8016ac2:	4621      	mov	r1, r4
 8016ac4:	4630      	mov	r0, r6
 8016ac6:	f007 ff13 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016aca:	4639      	mov	r1, r7
 8016acc:	222d      	movs	r2, #45	; 0x2d
 8016ace:	4648      	mov	r0, r9
 8016ad0:	f007 ff0e 	bl	801e8f0 <TFT_DrawChar>
 8016ad4:	4639      	mov	r1, r7
 8016ad6:	2220      	movs	r2, #32
 8016ad8:	4640      	mov	r0, r8
 8016ada:	f007 ff09 	bl	801e8f0 <TFT_DrawChar>
 8016ade:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8016ae0:	f104 0746 	add.w	r7, r4, #70	; 0x46
 8016ae4:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016ae6:	222d      	movs	r2, #45	; 0x2d
 8016ae8:	4630      	mov	r0, r6
 8016aea:	f007 ff01 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8016aee:	222d      	movs	r2, #45	; 0x2d
 8016af0:	4639      	mov	r1, r7
 8016af2:	4648      	mov	r0, r9
 8016af4:	f007 fefc 	bl	801e8f0 <TFT_DrawChar>
 8016af8:	2220      	movs	r2, #32
 8016afa:	4639      	mov	r1, r7
 8016afc:	4640      	mov	r0, r8
 8016afe:	f007 fef7 	bl	801e8f0 <TFT_DrawChar>
 8016b02:	222d      	movs	r2, #45	; 0x2d
 8016b04:	4639      	mov	r1, r7
 8016b06:	4630      	mov	r0, r6
 8016b08:	f007 fef2 	bl	801e8f0 <TFT_DrawChar>
		old_nanXYZ = 1;
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	f88a 3000 	strb.w	r3, [sl]
	old_numZ = number;
	number = 0;
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
	old_nanXYZ = 0;
}
			TFT_SetTextColor(TFT_White);
 8016b12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016b16:	f007 fe27 	bl	801e768 <TFT_SetTextColor>
			TFT_SetBackColor(TFT_Black_Bkgr);
 8016b1a:	2063      	movs	r0, #99	; 0x63
 8016b1c:	f007 fe2a 	bl	801e774 <TFT_SetBackColor>
			TFT_SetFont(&Font26EN_arch_big);
 8016b20:	4881      	ldr	r0, [pc, #516]	; (8016d28 <GUI_Text_XYZ_Measure+0x300>)
 8016b22:	f007 fe1b 	bl	801e75c <TFT_SetFont>
			TFT_DrawChar(X, Y, 'X'-34);
 8016b26:	4621      	mov	r1, r4
 8016b28:	4628      	mov	r0, r5
 8016b2a:	2236      	movs	r2, #54	; 0x36
 8016b2c:	f007 fee0 	bl	801e8f0 <TFT_DrawChar>
			TFT_DrawChar(X, Y+35, 'Y'-34);
 8016b30:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8016b34:	4628      	mov	r0, r5
 8016b36:	2237      	movs	r2, #55	; 0x37
 8016b38:	b289      	uxth	r1, r1
 8016b3a:	f007 fed9 	bl	801e8f0 <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'Z'-34);
 8016b3e:	f104 0146 	add.w	r1, r4, #70	; 0x46
 8016b42:	2238      	movs	r2, #56	; 0x38
 8016b44:	b289      	uxth	r1, r1
 8016b46:	4628      	mov	r0, r5
 8016b48:	f007 fed2 	bl	801e8f0 <TFT_DrawChar>
}	
 8016b4c:	b007      	add	sp, #28
 8016b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016b52:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8016b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b5a:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8016b5e:	2800      	cmp	r0, #0
 8016b60:	bf14      	ite	ne
 8016b62:	4610      	movne	r0, r2
 8016b64:	4618      	moveq	r0, r3
 8016b66:	f007 fdff 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016b6a:	2063      	movs	r0, #99	; 0x63
 8016b6c:	f007 fe02 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8016b70:	486e      	ldr	r0, [pc, #440]	; (8016d2c <GUI_Text_XYZ_Measure+0x304>)
 8016b72:	f007 fdf3 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%d", ValueX);
 8016b76:	465a      	mov	r2, fp
 8016b78:	496d      	ldr	r1, [pc, #436]	; (8016d30 <GUI_Text_XYZ_Measure+0x308>)
 8016b7a:	a804      	add	r0, sp, #16
 8016b7c:	f00b f908 	bl	8021d90 <siprintf>
	uint8_t	delta_pos = 190, number = 0;
 8016b80:	46b0      	mov	r8, r6
	sprintf (buffer, "%d", ValueX);
 8016b82:	f04f 0904 	mov.w	r9, #4
	uint32_t dec = 10;
 8016b86:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 190, number = 0;
 8016b8a:	27be      	movs	r7, #190	; 0xbe
		if((ValueX/(dec)) >= 1.0)
 8016b8c:	fbbb f0fa 	udiv	r0, fp, sl
 8016b90:	f7e9 fcc8 	bl	8000524 <__aeabi_ui2d>
 8016b94:	2200      	movs	r2, #0
 8016b96:	4b67      	ldr	r3, [pc, #412]	; (8016d34 <GUI_Text_XYZ_Measure+0x30c>)
 8016b98:	f7e9 ffc0 	bl	8000b1c <__aeabi_dcmpge>
 8016b9c:	b140      	cbz	r0, 8016bb0 <GUI_Text_XYZ_Measure+0x188>
			dec *= 10;
 8016b9e:	230a      	movs	r3, #10
			delta_pos-=23;
 8016ba0:	3f17      	subs	r7, #23
			number++;
 8016ba2:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8016ba6:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 8016baa:	b2ff      	uxtb	r7, r7
			number++;
 8016bac:	fa5f f888 	uxtb.w	r8, r8
 8016bb0:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8016bb4:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8016bb8:	d1e8      	bne.n	8016b8c <GUI_Text_XYZ_Measure+0x164>
	if(number < old_numX || old_nanXYZ )
 8016bba:	4b5f      	ldr	r3, [pc, #380]	; (8016d38 <GUI_Text_XYZ_Measure+0x310>)
 8016bbc:	781a      	ldrb	r2, [r3, #0]
 8016bbe:	4542      	cmp	r2, r8
 8016bc0:	4699      	mov	r9, r3
 8016bc2:	d802      	bhi.n	8016bca <GUI_Text_XYZ_Measure+0x1a2>
 8016bc4:	4b57      	ldr	r3, [pc, #348]	; (8016d24 <GUI_Text_XYZ_Measure+0x2fc>)
 8016bc6:	781b      	ldrb	r3, [r3, #0]
 8016bc8:	b16b      	cbz	r3, 8016be6 <GUI_Text_XYZ_Measure+0x1be>
		TFT_FillRectangle(X+40, Y, X+197, Y+24, TFT_Black_Bkgr);
 8016bca:	2163      	movs	r1, #99	; 0x63
 8016bcc:	f104 0318 	add.w	r3, r4, #24
 8016bd0:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8016bd4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016bd8:	9100      	str	r1, [sp, #0]
 8016bda:	b29b      	uxth	r3, r3
 8016bdc:	b292      	uxth	r2, r2
 8016bde:	4621      	mov	r1, r4
 8016be0:	b280      	uxth	r0, r0
 8016be2:	f007 fb92 	bl	801e30a <TFT_FillRectangle>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016be6:	19e8      	adds	r0, r5, r7
 8016be8:	2303      	movs	r3, #3
 8016bea:	aa04      	add	r2, sp, #16
 8016bec:	4621      	mov	r1, r4
 8016bee:	b280      	uxth	r0, r0
	old_numX = number;
 8016bf0:	f889 8000 	strb.w	r8, [r9]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016bf4:	f007 fed4 	bl	801e9a0 <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 8016bf8:	484c      	ldr	r0, [pc, #304]	; (8016d2c <GUI_Text_XYZ_Measure+0x304>)
 8016bfa:	f007 fdaf 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%d", ValueY);
 8016bfe:	9a02      	ldr	r2, [sp, #8]
 8016c00:	494b      	ldr	r1, [pc, #300]	; (8016d30 <GUI_Text_XYZ_Measure+0x308>)
 8016c02:	a804      	add	r0, sp, #16
 8016c04:	f00b f8c4 	bl	8021d90 <siprintf>
	dec = 10;
 8016c08:	f04f 0a0a 	mov.w	sl, #10
	number = 0;
 8016c0c:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueY);
 8016c10:	f04f 0904 	mov.w	r9, #4
	delta_pos = 190;
 8016c14:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 8016c16:	46d3      	mov	fp, sl
		if((ValueY/(dec)) >= 1.0)
 8016c18:	9b02      	ldr	r3, [sp, #8]
 8016c1a:	fbb3 f0fa 	udiv	r0, r3, sl
 8016c1e:	f7e9 fc81 	bl	8000524 <__aeabi_ui2d>
 8016c22:	2200      	movs	r2, #0
 8016c24:	4b43      	ldr	r3, [pc, #268]	; (8016d34 <GUI_Text_XYZ_Measure+0x30c>)
 8016c26:	f7e9 ff79 	bl	8000b1c <__aeabi_dcmpge>
 8016c2a:	b138      	cbz	r0, 8016c3c <GUI_Text_XYZ_Measure+0x214>
			delta_pos-=23;
 8016c2c:	3f17      	subs	r7, #23
			number++;
 8016c2e:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8016c32:	fb0b fa0a 	mul.w	sl, fp, sl
			delta_pos-=23;
 8016c36:	b2ff      	uxtb	r7, r7
			number++;
 8016c38:	fa5f f888 	uxtb.w	r8, r8
 8016c3c:	f109 39ff 	add.w	r9, r9, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8016c40:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 8016c44:	d1e8      	bne.n	8016c18 <GUI_Text_XYZ_Measure+0x1f0>
	if(number < old_numY || old_nanXYZ)
 8016c46:	4b3d      	ldr	r3, [pc, #244]	; (8016d3c <GUI_Text_XYZ_Measure+0x314>)
 8016c48:	781a      	ldrb	r2, [r3, #0]
 8016c4a:	4542      	cmp	r2, r8
 8016c4c:	f104 0923 	add.w	r9, r4, #35	; 0x23
 8016c50:	469a      	mov	sl, r3
 8016c52:	d802      	bhi.n	8016c5a <GUI_Text_XYZ_Measure+0x232>
 8016c54:	4b33      	ldr	r3, [pc, #204]	; (8016d24 <GUI_Text_XYZ_Measure+0x2fc>)
 8016c56:	781b      	ldrb	r3, [r3, #0]
 8016c58:	b173      	cbz	r3, 8016c78 <GUI_Text_XYZ_Measure+0x250>
		TFT_FillRectangle(X+40, Y+35, X+197, Y+59, TFT_Black_Bkgr);
 8016c5a:	2163      	movs	r1, #99	; 0x63
 8016c5c:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8016c60:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8016c64:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016c68:	9100      	str	r1, [sp, #0]
 8016c6a:	b29b      	uxth	r3, r3
 8016c6c:	b292      	uxth	r2, r2
 8016c6e:	fa1f f189 	uxth.w	r1, r9
 8016c72:	b280      	uxth	r0, r0
 8016c74:	f007 fb49 	bl	801e30a <TFT_FillRectangle>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8016c78:	19e8      	adds	r0, r5, r7
 8016c7a:	fa1f f189 	uxth.w	r1, r9
 8016c7e:	2303      	movs	r3, #3
 8016c80:	aa04      	add	r2, sp, #16
 8016c82:	b280      	uxth	r0, r0
	old_numY = number;
 8016c84:	f88a 8000 	strb.w	r8, [sl]
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8016c88:	f007 fe8a 	bl	801e9a0 <TFT_DisplayString>
	TFT_SetFont(&Font26EN_arch_digit);
 8016c8c:	4827      	ldr	r0, [pc, #156]	; (8016d2c <GUI_Text_XYZ_Measure+0x304>)
 8016c8e:	f007 fd65 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%d", ValueZ);
 8016c92:	9a03      	ldr	r2, [sp, #12]
 8016c94:	4926      	ldr	r1, [pc, #152]	; (8016d30 <GUI_Text_XYZ_Measure+0x308>)
 8016c96:	a804      	add	r0, sp, #16
 8016c98:	f00b f87a 	bl	8021d90 <siprintf>
	 dec = 10;
 8016c9c:	f04f 090a 	mov.w	r9, #10
	sprintf (buffer, "%d", ValueZ);
 8016ca0:	f04f 0804 	mov.w	r8, #4
		delta_pos = 190;
 8016ca4:	27be      	movs	r7, #190	; 0xbe
			dec *= 10;
 8016ca6:	46ca      	mov	sl, r9
		if((ValueZ/(dec)) >= 1.0)
 8016ca8:	9b03      	ldr	r3, [sp, #12]
 8016caa:	fbb3 f0f9 	udiv	r0, r3, r9
 8016cae:	f7e9 fc39 	bl	8000524 <__aeabi_ui2d>
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	4b1f      	ldr	r3, [pc, #124]	; (8016d34 <GUI_Text_XYZ_Measure+0x30c>)
 8016cb6:	f7e9 ff31 	bl	8000b1c <__aeabi_dcmpge>
 8016cba:	b128      	cbz	r0, 8016cc8 <GUI_Text_XYZ_Measure+0x2a0>
			delta_pos-=23;
 8016cbc:	3f17      	subs	r7, #23
			number++;
 8016cbe:	3601      	adds	r6, #1
			dec *= 10;
 8016cc0:	fb0a f909 	mul.w	r9, sl, r9
			delta_pos-=23;
 8016cc4:	b2ff      	uxtb	r7, r7
			number++;
 8016cc6:	b2f6      	uxtb	r6, r6
 8016cc8:	f108 38ff 	add.w	r8, r8, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 8016ccc:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8016cd0:	d1ea      	bne.n	8016ca8 <GUI_Text_XYZ_Measure+0x280>
	if(number < old_numZ || old_nanXYZ)
 8016cd2:	4b1b      	ldr	r3, [pc, #108]	; (8016d40 <GUI_Text_XYZ_Measure+0x318>)
 8016cd4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 8016d24 <GUI_Text_XYZ_Measure+0x2fc>
 8016cd8:	781a      	ldrb	r2, [r3, #0]
 8016cda:	42b2      	cmp	r2, r6
 8016cdc:	f104 0a46 	add.w	sl, r4, #70	; 0x46
 8016ce0:	4698      	mov	r8, r3
 8016ce2:	d802      	bhi.n	8016cea <GUI_Text_XYZ_Measure+0x2c2>
 8016ce4:	f899 3000 	ldrb.w	r3, [r9]
 8016ce8:	b173      	cbz	r3, 8016d08 <GUI_Text_XYZ_Measure+0x2e0>
		TFT_FillRectangle(X+40, Y+70, X+197, Y+94, TFT_Black_Bkgr);
 8016cea:	2163      	movs	r1, #99	; 0x63
 8016cec:	f104 035e 	add.w	r3, r4, #94	; 0x5e
 8016cf0:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8016cf4:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8016cf8:	9100      	str	r1, [sp, #0]
 8016cfa:	b29b      	uxth	r3, r3
 8016cfc:	b292      	uxth	r2, r2
 8016cfe:	fa1f f18a 	uxth.w	r1, sl
 8016d02:	b280      	uxth	r0, r0
 8016d04:	f007 fb01 	bl	801e30a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8016d08:	19e8      	adds	r0, r5, r7
 8016d0a:	2303      	movs	r3, #3
 8016d0c:	aa04      	add	r2, sp, #16
 8016d0e:	fa1f f18a 	uxth.w	r1, sl
 8016d12:	b280      	uxth	r0, r0
	old_numZ = number;
 8016d14:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 8016d18:	f007 fe42 	bl	801e9a0 <TFT_DisplayString>
	old_nanXYZ = 0;
 8016d1c:	2300      	movs	r3, #0
 8016d1e:	f889 3000 	strb.w	r3, [r9]
 8016d22:	e6f6      	b.n	8016b12 <GUI_Text_XYZ_Measure+0xea>
 8016d24:	20004ca2 	.word	0x20004ca2
 8016d28:	200001e8 	.word	0x200001e8
 8016d2c:	200001f0 	.word	0x200001f0
 8016d30:	08024471 	.word	0x08024471
 8016d34:	3ff00000 	.word	0x3ff00000
 8016d38:	20000239 	.word	0x20000239
 8016d3c:	2000023a 	.word	0x2000023a
 8016d40:	2000023b 	.word	0x2000023b

08016d44 <GUI_Text_xy_Measure>:
uint8_t old_nanxy = 0;
void GUI_Text_xy_Measure(uint16_t X, uint16_t Y, float Valuex, float Valuey, uint8_t nan, uint8_t grey)
{
 8016d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d48:	ed2d 8b02 	vpush	{d8}
 8016d4c:	b085      	sub	sp, #20
 8016d4e:	4604      	mov	r4, r0
 8016d50:	4691      	mov	r9, r2
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 8016d52:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8016d56:	2200      	movs	r2, #0
{
 8016d58:	460d      	mov	r5, r1
 8016d5a:	eef0 8a40 	vmov.f32	s17, s0
 8016d5e:	eeb0 8a60 	vmov.f32	s16, s1
 8016d62:	461e      	mov	r6, r3
	char buffer[5] = {0};
 8016d64:	9202      	str	r2, [sp, #8]
 8016d66:	f88d 200c 	strb.w	r2, [sp, #12]
	TFT_SetTextColor(TFT_White);
 8016d6a:	f007 fcfd 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016d6e:	2063      	movs	r0, #99	; 0x63
 8016d70:	f007 fd00 	bl	801e774 <TFT_SetBackColor>

	if((Valuex == 0 && Valuey ==1) || nan){
 8016d74:	eef5 8a40 	vcmp.f32	s17, #0.0
 8016d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d7c:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8016ec4 <GUI_Text_xy_Measure+0x180>
 8016d80:	f105 0723 	add.w	r7, r5, #35	; 0x23
 8016d84:	d106      	bne.n	8016d94 <GUI_Text_xy_Measure+0x50>
 8016d86:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8016d8a:	eeb4 8a67 	vcmp.f32	s16, s15
 8016d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d92:	d002      	beq.n	8016d9a <GUI_Text_xy_Measure+0x56>
 8016d94:	f1b9 0f00 	cmp.w	r9, #0
 8016d98:	d05a      	beq.n	8016e50 <GUI_Text_xy_Measure+0x10c>
		if(!old_nanxy){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 8016d9a:	f898 3000 	ldrb.w	r3, [r8]
 8016d9e:	b96b      	cbnz	r3, 8016dbc <GUI_Text_xy_Measure+0x78>
 8016da0:	2163      	movs	r1, #99	; 0x63
 8016da2:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8016da6:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8016daa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016dae:	9100      	str	r1, [sp, #0]
 8016db0:	b29b      	uxth	r3, r3
 8016db2:	b292      	uxth	r2, r2
 8016db4:	4629      	mov	r1, r5
 8016db6:	b280      	uxth	r0, r0
 8016db8:	f007 faa7 	bl	801e30a <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016dbc:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 8016dc0:	483c      	ldr	r0, [pc, #240]	; (8016eb4 <GUI_Text_xy_Measure+0x170>)
 8016dc2:	fa1f fb8b 	uxth.w	fp, fp
 8016dc6:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 8016dca:	f007 fcc7 	bl	801e75c <TFT_SetFont>
 8016dce:	fa1f fa8a 	uxth.w	sl, sl
 8016dd2:	222d      	movs	r2, #45	; 0x2d
 8016dd4:	4629      	mov	r1, r5
 8016dd6:	4658      	mov	r0, fp
 8016dd8:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 8016ddc:	f007 fd88 	bl	801e8f0 <TFT_DrawChar>
 8016de0:	fa1f f989 	uxth.w	r9, r9
 8016de4:	2220      	movs	r2, #32
 8016de6:	4629      	mov	r1, r5
 8016de8:	4650      	mov	r0, sl
 8016dea:	f007 fd81 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016dee:	b2be      	uxth	r6, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016df0:	222d      	movs	r2, #45	; 0x2d
 8016df2:	4629      	mov	r1, r5
 8016df4:	4648      	mov	r0, r9
 8016df6:	f007 fd7b 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016dfa:	222d      	movs	r2, #45	; 0x2d
 8016dfc:	4631      	mov	r1, r6
 8016dfe:	4658      	mov	r0, fp
 8016e00:	f007 fd76 	bl	801e8f0 <TFT_DrawChar>
 8016e04:	2220      	movs	r2, #32
 8016e06:	4631      	mov	r1, r6
 8016e08:	4650      	mov	r0, sl
 8016e0a:	f007 fd71 	bl	801e8f0 <TFT_DrawChar>
 8016e0e:	222d      	movs	r2, #45	; 0x2d
 8016e10:	4631      	mov	r1, r6
 8016e12:	4648      	mov	r0, r9
 8016e14:	f007 fd6c 	bl	801e8f0 <TFT_DrawChar>
		old_nanxy = 1;
 8016e18:	2301      	movs	r3, #1
 8016e1a:	f888 3000 	strb.w	r3, [r8]
		
		sprintf (buffer, "%.4f", Valuey);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanxy = 0;
	}
	TFT_SetTextColor(TFT_White);
 8016e1e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016e22:	f007 fca1 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016e26:	2063      	movs	r0, #99	; 0x63
 8016e28:	f007 fca4 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_small);
 8016e2c:	4822      	ldr	r0, [pc, #136]	; (8016eb8 <GUI_Text_xy_Measure+0x174>)
 8016e2e:	f007 fc95 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'x'-65);
 8016e32:	4629      	mov	r1, r5
 8016e34:	4620      	mov	r0, r4
 8016e36:	2237      	movs	r2, #55	; 0x37
 8016e38:	f007 fd5a 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'y'-65);
 8016e3c:	2238      	movs	r2, #56	; 0x38
 8016e3e:	b2b9      	uxth	r1, r7
 8016e40:	4620      	mov	r0, r4
 8016e42:	f007 fd55 	bl	801e8f0 <TFT_DrawChar>
	
}	
 8016e46:	b005      	add	sp, #20
 8016e48:	ecbd 8b02 	vpop	{d8}
 8016e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016e54:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8016e58:	2e00      	cmp	r6, #0
 8016e5a:	bf08      	it	eq
 8016e5c:	4610      	moveq	r0, r2
 8016e5e:	f007 fc83 	bl	801e768 <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 8016e62:	4816      	ldr	r0, [pc, #88]	; (8016ebc <GUI_Text_xy_Measure+0x178>)
 8016e64:	f007 fc7a 	bl	801e75c <TFT_SetFont>
		sprintf (buffer, "%.4f", Valuex);
 8016e68:	ee18 0a90 	vmov	r0, s17
 8016e6c:	f7e9 fb7c 	bl	8000568 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016e70:	f104 0646 	add.w	r6, r4, #70	; 0x46
		sprintf (buffer, "%.4f", Valuex);
 8016e74:	4602      	mov	r2, r0
 8016e76:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016e78:	b2b6      	uxth	r6, r6
		sprintf (buffer, "%.4f", Valuex);
 8016e7a:	4911      	ldr	r1, [pc, #68]	; (8016ec0 <GUI_Text_xy_Measure+0x17c>)
 8016e7c:	a802      	add	r0, sp, #8
 8016e7e:	f00a ff87 	bl	8021d90 <siprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8016e82:	2303      	movs	r3, #3
 8016e84:	aa02      	add	r2, sp, #8
 8016e86:	4629      	mov	r1, r5
 8016e88:	4630      	mov	r0, r6
 8016e8a:	f007 fd89 	bl	801e9a0 <TFT_DisplayString>
		sprintf (buffer, "%.4f", Valuey);
 8016e8e:	ee18 0a10 	vmov	r0, s16
 8016e92:	f7e9 fb69 	bl	8000568 <__aeabi_f2d>
 8016e96:	4602      	mov	r2, r0
 8016e98:	460b      	mov	r3, r1
 8016e9a:	a802      	add	r0, sp, #8
 8016e9c:	4908      	ldr	r1, [pc, #32]	; (8016ec0 <GUI_Text_xy_Measure+0x17c>)
 8016e9e:	f00a ff77 	bl	8021d90 <siprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8016ea2:	2303      	movs	r3, #3
 8016ea4:	aa02      	add	r2, sp, #8
 8016ea6:	b2b9      	uxth	r1, r7
 8016ea8:	4630      	mov	r0, r6
 8016eaa:	f007 fd79 	bl	801e9a0 <TFT_DisplayString>
		old_nanxy = 0;
 8016eae:	f888 9000 	strb.w	r9, [r8]
 8016eb2:	e7b4      	b.n	8016e1e <GUI_Text_xy_Measure+0xda>
 8016eb4:	200001e8 	.word	0x200001e8
 8016eb8:	200001f8 	.word	0x200001f8
 8016ebc:	200001f0 	.word	0x200001f0
 8016ec0:	08031257 	.word	0x08031257
 8016ec4:	20004cb0 	.word	0x20004cb0

08016ec8 <GUI_Text_uv_Measure>:
uint8_t old_nanuv = 0;
void GUI_Text_uv_Measure(uint16_t X, uint16_t Y, float ValueU, float ValueV, uint8_t nan, uint8_t grey)
{
 8016ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ecc:	ed2d 8b02 	vpush	{d8}
 8016ed0:	b087      	sub	sp, #28
 8016ed2:	4604      	mov	r4, r0
 8016ed4:	469a      	mov	sl, r3
	char buffer[5] = {0};
	uint8_t	delta_pos = 70;
	
	TFT_SetTextColor(TFT_White);
 8016ed6:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 8016eda:	2300      	movs	r3, #0
{
 8016edc:	460d      	mov	r5, r1
 8016ede:	eeb0 8a40 	vmov.f32	s16, s0
 8016ee2:	ee10 9a90 	vmov	r9, s1
 8016ee6:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8016ee8:	9304      	str	r3, [sp, #16]
 8016eea:	f88d 3014 	strb.w	r3, [sp, #20]
	TFT_SetTextColor(TFT_White);
 8016eee:	f007 fc3b 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8016ef2:	2063      	movs	r0, #99	; 0x63
 8016ef4:	f007 fc3e 	bl	801e774 <TFT_SetBackColor>
	
	if((ValueU == 0 && (ValueV >0.6 && ValueV <0.6001)) || nan){
 8016ef8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8016efc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016f00:	4f5d      	ldr	r7, [pc, #372]	; (8017078 <GUI_Text_uv_Measure+0x1b0>)
 8016f02:	f105 0623 	add.w	r6, r5, #35	; 0x23
 8016f06:	d112      	bne.n	8016f2e <GUI_Text_uv_Measure+0x66>
 8016f08:	4648      	mov	r0, r9
 8016f0a:	f7e9 fb2d 	bl	8000568 <__aeabi_f2d>
 8016f0e:	a356      	add	r3, pc, #344	; (adr r3, 8017068 <GUI_Text_uv_Measure+0x1a0>)
 8016f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016f18:	f7e9 fe0a 	bl	8000b30 <__aeabi_dcmpgt>
 8016f1c:	b138      	cbz	r0, 8016f2e <GUI_Text_uv_Measure+0x66>
 8016f1e:	a354      	add	r3, pc, #336	; (adr r3, 8017070 <GUI_Text_uv_Measure+0x1a8>)
 8016f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016f28:	f7e9 fde4 	bl	8000af4 <__aeabi_dcmplt>
 8016f2c:	b910      	cbnz	r0, 8016f34 <GUI_Text_uv_Measure+0x6c>
 8016f2e:	f1b8 0f00 	cmp.w	r8, #0
 8016f32:	d064      	beq.n	8016ffe <GUI_Text_uv_Measure+0x136>
		if(!old_nanuv){TFT_FillRectangle(X+40, Y, X+250, Y+60, TFT_Black_Bkgr);}
 8016f34:	783b      	ldrb	r3, [r7, #0]
 8016f36:	b96b      	cbnz	r3, 8016f54 <GUI_Text_uv_Measure+0x8c>
 8016f38:	2163      	movs	r1, #99	; 0x63
 8016f3a:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8016f3e:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8016f42:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016f46:	9100      	str	r1, [sp, #0]
 8016f48:	b29b      	uxth	r3, r3
 8016f4a:	b292      	uxth	r2, r2
 8016f4c:	4629      	mov	r1, r5
 8016f4e:	b280      	uxth	r0, r0
 8016f50:	f007 f9db 	bl	801e30a <TFT_FillRectangle>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016f54:	f104 0b87 	add.w	fp, r4, #135	; 0x87
 8016f58:	4848      	ldr	r0, [pc, #288]	; (801707c <GUI_Text_uv_Measure+0x1b4>)
 8016f5a:	fa1f fb8b 	uxth.w	fp, fp
 8016f5e:	f104 0aa0 	add.w	sl, r4, #160	; 0xa0
 8016f62:	f007 fbfb 	bl	801e75c <TFT_SetFont>
 8016f66:	fa1f fa8a 	uxth.w	sl, sl
 8016f6a:	222d      	movs	r2, #45	; 0x2d
 8016f6c:	4629      	mov	r1, r5
 8016f6e:	4658      	mov	r0, fp
 8016f70:	f104 09b9 	add.w	r9, r4, #185	; 0xb9
 8016f74:	f007 fcbc 	bl	801e8f0 <TFT_DrawChar>
 8016f78:	fa1f f989 	uxth.w	r9, r9
 8016f7c:	2220      	movs	r2, #32
 8016f7e:	4629      	mov	r1, r5
 8016f80:	4650      	mov	r0, sl
 8016f82:	f007 fcb5 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016f86:	fa1f f886 	uxth.w	r8, r6
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8016f8a:	222d      	movs	r2, #45	; 0x2d
 8016f8c:	4629      	mov	r1, r5
 8016f8e:	4648      	mov	r0, r9
 8016f90:	f007 fcae 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8016f94:	222d      	movs	r2, #45	; 0x2d
 8016f96:	4641      	mov	r1, r8
 8016f98:	4658      	mov	r0, fp
 8016f9a:	f007 fca9 	bl	801e8f0 <TFT_DrawChar>
 8016f9e:	2220      	movs	r2, #32
 8016fa0:	4641      	mov	r1, r8
 8016fa2:	4650      	mov	r0, sl
 8016fa4:	f007 fca4 	bl	801e8f0 <TFT_DrawChar>
 8016fa8:	222d      	movs	r2, #45	; 0x2d
 8016faa:	4641      	mov	r1, r8
 8016fac:	4648      	mov	r0, r9
 8016fae:	f007 fc9f 	bl	801e8f0 <TFT_DrawChar>
		old_nanuv = 1;
 8016fb2:	2301      	movs	r3, #1
 8016fb4:	703b      	strb	r3, [r7, #0]
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
		sprintf (buffer, "%.4f", ValueV);
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
		old_nanuv = 0;
	}
	TFT_SetTextColor(TFT_White);
 8016fb6:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetFont(&Font26EN_arch_small);
	TFT_DrawChar(X+15, Y, 'z'-64);
 8016fba:	f104 070f 	add.w	r7, r4, #15
	TFT_SetTextColor(TFT_White);
 8016fbe:	f007 fbd3 	bl	801e768 <TFT_SetTextColor>
	TFT_DrawChar(X+15, Y, 'z'-64);
 8016fc2:	b2bf      	uxth	r7, r7
	TFT_SetFont(&Font26EN_arch_small);
 8016fc4:	482e      	ldr	r0, [pc, #184]	; (8017080 <GUI_Text_uv_Measure+0x1b8>)
 8016fc6:	f007 fbc9 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+15, Y, 'z'-64);
 8016fca:	4629      	mov	r1, r5
 8016fcc:	4638      	mov	r0, r7
 8016fce:	223a      	movs	r2, #58	; 0x3a
 8016fd0:	f007 fc8e 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'u'-65);
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 8016fd4:	b2b6      	uxth	r6, r6
	TFT_DrawChar(X, Y, 'u'-65);
 8016fd6:	4629      	mov	r1, r5
 8016fd8:	4620      	mov	r0, r4
 8016fda:	2234      	movs	r2, #52	; 0x34
 8016fdc:	f007 fc88 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y+35, 'z'-64);
 8016fe0:	4631      	mov	r1, r6
 8016fe2:	4638      	mov	r0, r7
 8016fe4:	223a      	movs	r2, #58	; 0x3a
 8016fe6:	f007 fc83 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y+35, 'v'-65);
 8016fea:	2235      	movs	r2, #53	; 0x35
 8016fec:	4631      	mov	r1, r6
 8016fee:	4620      	mov	r0, r4
 8016ff0:	f007 fc7e 	bl	801e8f0 <TFT_DrawChar>
}	
 8016ff4:	b007      	add	sp, #28
 8016ff6:	ecbd 8b02 	vpop	{d8}
 8016ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8016ffe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017002:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8017006:	f1ba 0f00 	cmp.w	sl, #0
 801700a:	bf08      	it	eq
 801700c:	4618      	moveq	r0, r3
 801700e:	f007 fbab 	bl	801e768 <TFT_SetTextColor>
		TFT_SetFont(&Font26EN_arch_digit);
 8017012:	481c      	ldr	r0, [pc, #112]	; (8017084 <GUI_Text_uv_Measure+0x1bc>)
 8017014:	f007 fba2 	bl	801e75c <TFT_SetFont>
		sprintf (buffer, "%.4f", ValueU);
 8017018:	ee18 0a10 	vmov	r0, s16
 801701c:	f7e9 faa4 	bl	8000568 <__aeabi_f2d>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017020:	f104 0a46 	add.w	sl, r4, #70	; 0x46
		sprintf (buffer, "%.4f", ValueU);
 8017024:	4602      	mov	r2, r0
 8017026:	460b      	mov	r3, r1
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017028:	fa1f fa8a 	uxth.w	sl, sl
		sprintf (buffer, "%.4f", ValueU);
 801702c:	4916      	ldr	r1, [pc, #88]	; (8017088 <GUI_Text_uv_Measure+0x1c0>)
 801702e:	a804      	add	r0, sp, #16
 8017030:	f00a feae 	bl	8021d90 <siprintf>
		TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017034:	2303      	movs	r3, #3
 8017036:	aa04      	add	r2, sp, #16
 8017038:	4629      	mov	r1, r5
 801703a:	4650      	mov	r0, sl
 801703c:	f007 fcb0 	bl	801e9a0 <TFT_DisplayString>
		sprintf (buffer, "%.4f", ValueV);
 8017040:	4648      	mov	r0, r9
 8017042:	f7e9 fa91 	bl	8000568 <__aeabi_f2d>
 8017046:	4602      	mov	r2, r0
 8017048:	460b      	mov	r3, r1
 801704a:	a804      	add	r0, sp, #16
 801704c:	490e      	ldr	r1, [pc, #56]	; (8017088 <GUI_Text_uv_Measure+0x1c0>)
 801704e:	f00a fe9f 	bl	8021d90 <siprintf>
		TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017052:	2303      	movs	r3, #3
 8017054:	aa04      	add	r2, sp, #16
 8017056:	b2b1      	uxth	r1, r6
 8017058:	4650      	mov	r0, sl
 801705a:	f007 fca1 	bl	801e9a0 <TFT_DisplayString>
		old_nanuv = 0;
 801705e:	f887 8000 	strb.w	r8, [r7]
 8017062:	e7a8      	b.n	8016fb6 <GUI_Text_uv_Measure+0xee>
 8017064:	f3af 8000 	nop.w
 8017068:	33333333 	.word	0x33333333
 801706c:	3fe33333 	.word	0x3fe33333
 8017070:	ea4a8c15 	.word	0xea4a8c15
 8017074:	3fe33404 	.word	0x3fe33404
 8017078:	20004caf 	.word	0x20004caf
 801707c:	200001e8 	.word	0x200001e8
 8017080:	200001f8 	.word	0x200001f8
 8017084:	200001f0 	.word	0x200001f0
 8017088:	08031257 	.word	0x08031257

0801708c <GUI_Text_CCT_Measure>:

uint8_t old_numCCT = 10, old_nan_CCT = 0;
void GUI_Text_CCT_Measure(uint16_t X, uint16_t Y, uint16_t Value, uint8_t nan, uint8_t grey)
{	
 801708c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017090:	469b      	mov	fp, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8017092:	4b71      	ldr	r3, [pc, #452]	; (8017258 <GUI_Text_CCT_Measure+0x1cc>)
{	
 8017094:	4691      	mov	r9, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 8017096:	781a      	ldrb	r2, [r3, #0]
 8017098:	4b70      	ldr	r3, [pc, #448]	; (801725c <GUI_Text_CCT_Measure+0x1d0>)
 801709a:	781b      	ldrb	r3, [r3, #0]
 801709c:	429a      	cmp	r2, r3
{	
 801709e:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80170a0:	bf1c      	itt	ne
 80170a2:	4b6f      	ldrne	r3, [pc, #444]	; (8017260 <GUI_Text_CCT_Measure+0x1d4>)
 80170a4:	2200      	movne	r2, #0
	char buffer[9] = {0};
 80170a6:	f04f 0600 	mov.w	r6, #0
{	
 80170aa:	4605      	mov	r5, r0
	uint8_t	delta_pos = 160, number = 0;
	uint32_t dec = 10;
	
	
	TFT_SetBackColor(TFT_Black_Bkgr);
 80170ac:	f04f 0063 	mov.w	r0, #99	; 0x63
	if(preGUI_screen_state != GUI_screen_state){old_nan_CCT = 0; }
 80170b0:	bf18      	it	ne
 80170b2:	701a      	strbne	r2, [r3, #0]
{	
 80170b4:	460c      	mov	r4, r1
	char buffer[9] = {0};
 80170b6:	9603      	str	r6, [sp, #12]
 80170b8:	9604      	str	r6, [sp, #16]
 80170ba:	f88d 6014 	strb.w	r6, [sp, #20]
	TFT_SetBackColor(TFT_Black_Bkgr);
 80170be:	f007 fb59 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80170c2:	4868      	ldr	r0, [pc, #416]	; (8017264 <GUI_Text_CCT_Measure+0x1d8>)
 80170c4:	f007 fb4a 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%d", Value);
 80170c8:	464a      	mov	r2, r9
 80170ca:	4967      	ldr	r1, [pc, #412]	; (8017268 <GUI_Text_CCT_Measure+0x1dc>)
 80170cc:	a803      	add	r0, sp, #12
 80170ce:	f00a fe5f 	bl	8021d90 <siprintf>
 80170d2:	f04f 0804 	mov.w	r8, #4
	uint32_t dec = 10;
 80170d6:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 160, number = 0;
 80170da:	27a0      	movs	r7, #160	; 0xa0
	for (uint8_t i = 1; i <= 4; i++)
	{
		if((Value/(dec)) >= 1.0)
 80170dc:	fbb9 f0fa 	udiv	r0, r9, sl
 80170e0:	f7e9 fa20 	bl	8000524 <__aeabi_ui2d>
 80170e4:	2200      	movs	r2, #0
 80170e6:	4b61      	ldr	r3, [pc, #388]	; (801726c <GUI_Text_CCT_Measure+0x1e0>)
 80170e8:	f7e9 fd18 	bl	8000b1c <__aeabi_dcmpge>
 80170ec:	b130      	cbz	r0, 80170fc <GUI_Text_CCT_Measure+0x70>
		{
			dec *= 10;
 80170ee:	230a      	movs	r3, #10
			delta_pos-=23;
 80170f0:	3f17      	subs	r7, #23
			number++;
 80170f2:	3601      	adds	r6, #1
			dec *= 10;
 80170f4:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80170f8:	b2ff      	uxtb	r7, r7
			number++;
 80170fa:	b2f6      	uxtb	r6, r6
 80170fc:	f108 38ff 	add.w	r8, r8, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8017100:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8017104:	d1ea      	bne.n	80170dc <GUI_Text_CCT_Measure+0x50>
		}
	}
	
	if((Value == 0 || nan) & !old_nan_CCT){old_nan_CCT = 1; TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);TFT_SetTextColor(TFT_White); TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+100, Y+4, 'N'-33);TFT_DrawChar(X+125, Y+4, 'A'-33);TFT_DrawChar(X+150, Y+4, 'N'-33);}
 8017106:	f1b9 0f00 	cmp.w	r9, #0
 801710a:	d063      	beq.n	80171d4 <GUI_Text_CCT_Measure+0x148>
 801710c:	f11b 0200 	adds.w	r2, fp, #0
 8017110:	bf18      	it	ne
 8017112:	2201      	movne	r2, #1
 8017114:	4b52      	ldr	r3, [pc, #328]	; (8017260 <GUI_Text_CCT_Measure+0x1d4>)
 8017116:	7819      	ldrb	r1, [r3, #0]
 8017118:	4698      	mov	r8, r3
 801711a:	2900      	cmp	r1, #0
 801711c:	d15c      	bne.n	80171d8 <GUI_Text_CCT_Measure+0x14c>
 801711e:	2a00      	cmp	r2, #0
 8017120:	d05a      	beq.n	80171d8 <GUI_Text_CCT_Measure+0x14c>
 8017122:	2201      	movs	r2, #1
 8017124:	701a      	strb	r2, [r3, #0]
 8017126:	2163      	movs	r1, #99	; 0x63
 8017128:	f104 0319 	add.w	r3, r4, #25
 801712c:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017130:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017134:	b29b      	uxth	r3, r3
 8017136:	b292      	uxth	r2, r2
 8017138:	9100      	str	r1, [sp, #0]
 801713a:	b280      	uxth	r0, r0
 801713c:	4621      	mov	r1, r4
 801713e:	f007 f8e4 	bl	801e30a <TFT_FillRectangle>
 8017142:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017146:	f007 fb0f 	bl	801e768 <TFT_SetTextColor>
 801714a:	1d26      	adds	r6, r4, #4
 801714c:	4848      	ldr	r0, [pc, #288]	; (8017270 <GUI_Text_CCT_Measure+0x1e4>)
 801714e:	f007 fb05 	bl	801e75c <TFT_SetFont>
 8017152:	b2b6      	uxth	r6, r6
 8017154:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8017158:	222d      	movs	r2, #45	; 0x2d
 801715a:	4631      	mov	r1, r6
 801715c:	b280      	uxth	r0, r0
 801715e:	f007 fbc7 	bl	801e8f0 <TFT_DrawChar>
 8017162:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 8017166:	2220      	movs	r2, #32
 8017168:	4631      	mov	r1, r6
 801716a:	b280      	uxth	r0, r0
 801716c:	f007 fbc0 	bl	801e8f0 <TFT_DrawChar>
 8017170:	f105 0096 	add.w	r0, r5, #150	; 0x96
 8017174:	222d      	movs	r2, #45	; 0x2d
 8017176:	4631      	mov	r1, r6
 8017178:	b280      	uxth	r0, r0
 801717a:	f007 fbb9 	bl	801e8f0 <TFT_DrawChar>
	old_numCCT = number;
		
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
	}
	
	TFT_SetTextColor(TFT_White);
 801717e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017182:	f007 faf1 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017186:	2063      	movs	r0, #99	; 0x63
 8017188:	f007 faf4 	bl	801e774 <TFT_SetBackColor>
	if(Language_status == Ru ){
 801718c:	4b39      	ldr	r3, [pc, #228]	; (8017274 <GUI_Text_CCT_Measure+0x1e8>)
 801718e:	781b      	ldrb	r3, [r3, #0]
 8017190:	f105 06c8 	add.w	r6, r5, #200	; 0xc8
 8017194:	2b00      	cmp	r3, #0
 8017196:	d152      	bne.n	801723e <GUI_Text_CCT_Measure+0x1b2>
			TFT_SetFont(&Font26RU_arch_big);
 8017198:	4837      	ldr	r0, [pc, #220]	; (8017278 <GUI_Text_CCT_Measure+0x1ec>)
 801719a:	f007 fadf 	bl	801e75c <TFT_SetFont>
			TFT_DrawCharRus(X, Y, 'К'-17);
 801719e:	2289      	movs	r2, #137	; 0x89
 80171a0:	4621      	mov	r1, r4
 80171a2:	4628      	mov	r0, r5
 80171a4:	f007 faec 	bl	801e780 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+24, Y, 'Ц'-17);
 80171a8:	f105 0018 	add.w	r0, r5, #24
 80171ac:	2295      	movs	r2, #149	; 0x95
 80171ae:	4621      	mov	r1, r4
 80171b0:	b280      	uxth	r0, r0
 80171b2:	f007 fae5 	bl	801e780 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+45, Y, 'Т'-17);
 80171b6:	f105 002d 	add.w	r0, r5, #45	; 0x2d
 80171ba:	2291      	movs	r2, #145	; 0x91
 80171bc:	4621      	mov	r1, r4
 80171be:	b280      	uxth	r0, r0
 80171c0:	f007 fade 	bl	801e780 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+200, Y, 'К'-17);
 80171c4:	2289      	movs	r2, #137	; 0x89
 80171c6:	4621      	mov	r1, r4
 80171c8:	b2b0      	uxth	r0, r6
 80171ca:	f007 fad9 	bl	801e780 <TFT_DrawCharRus>
		{
			GUI_TextEn_CCT(X, Y+4);

			TFT_DrawChar(X+200, Y+4, 'K'-33);
		}	
}
 80171ce:	b007      	add	sp, #28
 80171d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171d4:	2201      	movs	r2, #1
 80171d6:	e79d      	b.n	8017114 <GUI_Text_CCT_Measure+0x88>
	else if(!nan & Value != 0){
 80171d8:	f1bb 0f00 	cmp.w	fp, #0
 80171dc:	d1cf      	bne.n	801717e <GUI_Text_CCT_Measure+0xf2>
 80171de:	f1b9 0f00 	cmp.w	r9, #0
 80171e2:	d0cc      	beq.n	801717e <GUI_Text_CCT_Measure+0xf2>
	if(number < old_numCCT )
 80171e4:	4b25      	ldr	r3, [pc, #148]	; (801727c <GUI_Text_CCT_Measure+0x1f0>)
 80171e6:	781a      	ldrb	r2, [r3, #0]
 80171e8:	42b2      	cmp	r2, r6
 80171ea:	4699      	mov	r9, r3
 80171ec:	d90d      	bls.n	801720a <GUI_Text_CCT_Measure+0x17e>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80171ee:	2163      	movs	r1, #99	; 0x63
 80171f0:	f104 0319 	add.w	r3, r4, #25
 80171f4:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80171f8:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80171fc:	9100      	str	r1, [sp, #0]
 80171fe:	b29b      	uxth	r3, r3
 8017200:	b292      	uxth	r2, r2
 8017202:	4621      	mov	r1, r4
 8017204:	b280      	uxth	r0, r0
 8017206:	f007 f880 	bl	801e30a <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801720a:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801720e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017212:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8017216:	2800      	cmp	r0, #0
 8017218:	bf14      	ite	ne
 801721a:	4610      	movne	r0, r2
 801721c:	4618      	moveq	r0, r3
 801721e:	f007 faa3 	bl	801e768 <TFT_SetTextColor>
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 8017222:	1ca1      	adds	r1, r4, #2
 8017224:	19e8      	adds	r0, r5, r7
 8017226:	2303      	movs	r3, #3
 8017228:	aa03      	add	r2, sp, #12
 801722a:	b289      	uxth	r1, r1
 801722c:	b280      	uxth	r0, r0
	old_numCCT = number;
 801722e:	f889 6000 	strb.w	r6, [r9]
	TFT_DisplayString(X+delta_pos, Y+2, (uint8_t *)buffer, LEFT_MODE); old_nan_CCT = 0; 
 8017232:	f007 fbb5 	bl	801e9a0 <TFT_DisplayString>
 8017236:	2300      	movs	r3, #0
 8017238:	f888 3000 	strb.w	r3, [r8]
 801723c:	e79f      	b.n	801717e <GUI_Text_CCT_Measure+0xf2>
			GUI_TextEn_CCT(X, Y+4);
 801723e:	3404      	adds	r4, #4
 8017240:	b2a4      	uxth	r4, r4
 8017242:	4621      	mov	r1, r4
 8017244:	4628      	mov	r0, r5
 8017246:	f002 fd09 	bl	8019c5c <GUI_TextEn_CCT>
			TFT_DrawChar(X+200, Y+4, 'K'-33);
 801724a:	222a      	movs	r2, #42	; 0x2a
 801724c:	4621      	mov	r1, r4
 801724e:	b2b0      	uxth	r0, r6
 8017250:	f007 fb4e 	bl	801e8f0 <TFT_DrawChar>
}
 8017254:	e7bb      	b.n	80171ce <GUI_Text_CCT_Measure+0x142>
 8017256:	bf00      	nop
 8017258:	2000022a 	.word	0x2000022a
 801725c:	20004c71 	.word	0x20004c71
 8017260:	20004ca3 	.word	0x20004ca3
 8017264:	200001f0 	.word	0x200001f0
 8017268:	08024471 	.word	0x08024471
 801726c:	3ff00000 	.word	0x3ff00000
 8017270:	200001e8 	.word	0x200001e8
 8017274:	20004c73 	.word	0x20004c73
 8017278:	20000200 	.word	0x20000200
 801727c:	20000231 	.word	0x20000231

08017280 <GUI_Text_lambdaD_Measure>:
uint8_t old_lambdaD = 10, old_nan_lambdaD = 0;
void GUI_Text_lambdaD_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nan, uint8_t grey)
{	
 8017280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017284:	ed2d 8b02 	vpush	{d8}
 8017288:	4616      	mov	r6, r2
 801728a:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 801728c:	4a71      	ldr	r2, [pc, #452]	; (8017454 <GUI_Text_lambdaD_Measure+0x1d4>)
 801728e:	4b72      	ldr	r3, [pc, #456]	; (8017458 <GUI_Text_lambdaD_Measure+0x1d8>)
 8017290:	4f72      	ldr	r7, [pc, #456]	; (801745c <GUI_Text_lambdaD_Measure+0x1dc>)
{	
 8017292:	4605      	mov	r5, r0
 8017294:	460c      	mov	r4, r1
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 8017296:	7818      	ldrb	r0, [r3, #0]
 8017298:	7811      	ldrb	r1, [r2, #0]
	Value = floor(Value*10)/10.0;
 801729a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 801729e:	4288      	cmp	r0, r1
	Value = floor(Value*10)/10.0;
 80172a0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80172a4:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 80172a6:	bf18      	it	ne
 80172a8:	2300      	movne	r3, #0
{	
 80172aa:	b086      	sub	sp, #24
	if(preGUI_screen_state != GUI_screen_state){old_nan_lambdaD = 0;}
 80172ac:	bf18      	it	ne
 80172ae:	703b      	strbne	r3, [r7, #0]
	Value = floor(Value*10)/10.0;
 80172b0:	ee17 0a90 	vmov	r0, s15
 80172b4:	4690      	mov	r8, r2
 80172b6:	f7e9 f957 	bl	8000568 <__aeabi_f2d>
 80172ba:	ec41 0b10 	vmov	d0, r0, r1
 80172be:	f00b fa4b 	bl	8022758 <floor>
	char buffer[9] = {0};
 80172c2:	2200      	movs	r2, #0
	Value = floor(Value*10)/10.0;
 80172c4:	ec51 0b10 	vmov	r0, r1, d0
	char buffer[9] = {0};
 80172c8:	9203      	str	r2, [sp, #12]
 80172ca:	9204      	str	r2, [sp, #16]
 80172cc:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 122, number = 0;
	uint32_t dec = 10;
	
	if(nan) 
 80172d0:	2e00      	cmp	r6, #0
 80172d2:	d054      	beq.n	801737e <GUI_Text_lambdaD_Measure+0xfe>
		{	
			if(!old_nan_lambdaD){
 80172d4:	783b      	ldrb	r3, [r7, #0]
 80172d6:	bb33      	cbnz	r3, 8017326 <GUI_Text_lambdaD_Measure+0xa6>
				TFT_SetTextColor(TFT_White);
 80172d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80172dc:	f007 fa44 	bl	801e768 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80172e0:	2063      	movs	r0, #99	; 0x63
 80172e2:	f007 fa47 	bl	801e774 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 80172e6:	485e      	ldr	r0, [pc, #376]	; (8017460 <GUI_Text_lambdaD_Measure+0x1e0>)
 80172e8:	f007 fa38 	bl	801e75c <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+197, Y+26, TFT_Black_Bkgr);
 80172ec:	2163      	movs	r1, #99	; 0x63
 80172ee:	f104 031a 	add.w	r3, r4, #26
 80172f2:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80172f6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80172fa:	9100      	str	r1, [sp, #0]
 80172fc:	b29b      	uxth	r3, r3
 80172fe:	b292      	uxth	r2, r2
 8017300:	4621      	mov	r1, r4
 8017302:	b280      	uxth	r0, r0
 8017304:	f007 f801 	bl	801e30a <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8017308:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801730a:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 801730e:	f88d 300c 	strb.w	r3, [sp, #12]
 8017312:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017316:	aa03      	add	r2, sp, #12
 8017318:	2303      	movs	r3, #3
 801731a:	4621      	mov	r1, r4
 801731c:	b280      	uxth	r0, r0
 801731e:	f007 fb3f 	bl	801e9a0 <TFT_DisplayString>
				old_nan_lambdaD = 1;
 8017322:	2301      	movs	r3, #1
 8017324:	703b      	strb	r3, [r7, #0]
	} 
	old_lambdaD = number;
	
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	if(preGUI_screen_state != GUI_screen_state){
 8017326:	f899 2000 	ldrb.w	r2, [r9]
 801732a:	f898 3000 	ldrb.w	r3, [r8]
 801732e:	429a      	cmp	r2, r3
 8017330:	d020      	beq.n	8017374 <GUI_Text_lambdaD_Measure+0xf4>
	TFT_SetTextColor(TFT_White);
 8017332:	f64f 70ff 	movw	r0, #65535	; 0xffff
	TFT_SetBackColor(TFT_Black_Bkgr);
	GUI_Text_lambda_d(X, Y+5);
 8017336:	1d66      	adds	r6, r4, #5
	TFT_SetTextColor(TFT_White);
 8017338:	f007 fa16 	bl	801e768 <TFT_SetTextColor>
	GUI_Text_lambda_d(X, Y+5);
 801733c:	b2b6      	uxth	r6, r6
	TFT_SetBackColor(TFT_Black_Bkgr);
 801733e:	2063      	movs	r0, #99	; 0x63
 8017340:	f007 fa18 	bl	801e774 <TFT_SetBackColor>
	GUI_Text_lambda_d(X, Y+5);
 8017344:	4628      	mov	r0, r5
 8017346:	4631      	mov	r1, r6
 8017348:	f001 fd28 	bl	8018d9c <GUI_Text_lambda_d>
	if(Language_status == Ru ){
 801734c:	4b45      	ldr	r3, [pc, #276]	; (8017464 <GUI_Text_lambdaD_Measure+0x1e4>)
 801734e:	781b      	ldrb	r3, [r3, #0]
 8017350:	f105 07c8 	add.w	r7, r5, #200	; 0xc8
 8017354:	35d8      	adds	r5, #216	; 0xd8
 8017356:	2b00      	cmp	r3, #0
 8017358:	d16c      	bne.n	8017434 <GUI_Text_lambdaD_Measure+0x1b4>
			TFT_SetFont(&Font26RU_arch_small);
 801735a:	4843      	ldr	r0, [pc, #268]	; (8017468 <GUI_Text_lambdaD_Measure+0x1e8>)
 801735c:	f007 f9fe 	bl	801e75c <TFT_SetFont>
			TFT_DrawCharRus(X+200, Y+5, 'н');
 8017360:	22bd      	movs	r2, #189	; 0xbd
 8017362:	4631      	mov	r1, r6
 8017364:	b2b8      	uxth	r0, r7
 8017366:	f007 fa0b 	bl	801e780 <TFT_DrawCharRus>
			TFT_DrawCharRus(X+216, Y+5, 'м');
 801736a:	22bc      	movs	r2, #188	; 0xbc
 801736c:	4631      	mov	r1, r6
 801736e:	b2a8      	uxth	r0, r5
 8017370:	f007 fa06 	bl	801e780 <TFT_DrawCharRus>
			TFT_SetFont(&Font16EN_arch_small);
			TFT_DrawChar(X+200, Y+10, 'n');
			TFT_DrawChar(X+216, Y+10, 'm');
		}	
	}
}
 8017374:	b006      	add	sp, #24
 8017376:	ecbd 8b02 	vpop	{d8}
 801737a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	old_nan_lambdaD = 0;
 801737e:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017380:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017384:	f249 47d2 	movw	r7, #38098	; 0x94d2
	Value = floor(Value*10)/10.0;
 8017388:	2200      	movs	r2, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801738a:	f1ba 0f00 	cmp.w	sl, #0
 801738e:	bf08      	it	eq
 8017390:	461f      	moveq	r7, r3
	Value = floor(Value*10)/10.0;
 8017392:	4b36      	ldr	r3, [pc, #216]	; (801746c <GUI_Text_lambdaD_Measure+0x1ec>)
 8017394:	f7e9 fa66 	bl	8000864 <__aeabi_ddiv>
 8017398:	f7e9 fc32 	bl	8000c00 <__aeabi_d2f>
 801739c:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 80173a0:	4638      	mov	r0, r7
 80173a2:	f007 f9e1 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80173a6:	2063      	movs	r0, #99	; 0x63
 80173a8:	f007 f9e4 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 80173ac:	482c      	ldr	r0, [pc, #176]	; (8017460 <GUI_Text_lambdaD_Measure+0x1e0>)
 80173ae:	f007 f9d5 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%.1f", Value);
 80173b2:	ee18 0a10 	vmov	r0, s16
 80173b6:	f7e9 f8d7 	bl	8000568 <__aeabi_f2d>
 80173ba:	4602      	mov	r2, r0
 80173bc:	460b      	mov	r3, r1
 80173be:	a803      	add	r0, sp, #12
 80173c0:	492b      	ldr	r1, [pc, #172]	; (8017470 <GUI_Text_lambdaD_Measure+0x1f0>)
 80173c2:	f00a fce5 	bl	8021d90 <siprintf>
	uint32_t dec = 10;
 80173c6:	220a      	movs	r2, #10
	sprintf (buffer, "%.1f", Value);
 80173c8:	2304      	movs	r3, #4
	uint8_t	delta_pos = 122, number = 0;
 80173ca:	277a      	movs	r7, #122	; 0x7a
		if((Value/(dec)) >= 1.0)
 80173cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 80173d0:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80173d2:	ee07 2a10 	vmov	s14, r2
 80173d6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80173da:	ee88 7a26 	vdiv.f32	s14, s16, s13
 80173de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80173e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173e6:	db04      	blt.n	80173f2 <GUI_Text_lambdaD_Measure+0x172>
			delta_pos-=23;
 80173e8:	3f17      	subs	r7, #23
			number++;
 80173ea:	3601      	adds	r6, #1
			dec *= 10;
 80173ec:	434a      	muls	r2, r1
			delta_pos-=23;
 80173ee:	b2ff      	uxtb	r7, r7
			number++;
 80173f0:	b2f6      	uxtb	r6, r6
 80173f2:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 80173f4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80173f8:	d1eb      	bne.n	80173d2 <GUI_Text_lambdaD_Measure+0x152>
	if(number < old_lambdaD )
 80173fa:	4b1e      	ldr	r3, [pc, #120]	; (8017474 <GUI_Text_lambdaD_Measure+0x1f4>)
 80173fc:	781a      	ldrb	r2, [r3, #0]
 80173fe:	42b2      	cmp	r2, r6
 8017400:	469a      	mov	sl, r3
 8017402:	d90d      	bls.n	8017420 <GUI_Text_lambdaD_Measure+0x1a0>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8017404:	2163      	movs	r1, #99	; 0x63
 8017406:	f104 0319 	add.w	r3, r4, #25
 801740a:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 801740e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017412:	9100      	str	r1, [sp, #0]
 8017414:	b29b      	uxth	r3, r3
 8017416:	b292      	uxth	r2, r2
 8017418:	4621      	mov	r1, r4
 801741a:	b280      	uxth	r0, r0
 801741c:	f006 ff75 	bl	801e30a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017420:	19e8      	adds	r0, r5, r7
 8017422:	2303      	movs	r3, #3
 8017424:	aa03      	add	r2, sp, #12
 8017426:	4621      	mov	r1, r4
 8017428:	b280      	uxth	r0, r0
	old_lambdaD = number;
 801742a:	f88a 6000 	strb.w	r6, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801742e:	f007 fab7 	bl	801e9a0 <TFT_DisplayString>
 8017432:	e778      	b.n	8017326 <GUI_Text_lambdaD_Measure+0xa6>
			TFT_DrawChar(X+200, Y+10, 'n');
 8017434:	340a      	adds	r4, #10
 8017436:	b2a4      	uxth	r4, r4
			TFT_SetFont(&Font16EN_arch_small);
 8017438:	480f      	ldr	r0, [pc, #60]	; (8017478 <GUI_Text_lambdaD_Measure+0x1f8>)
 801743a:	f007 f98f 	bl	801e75c <TFT_SetFont>
			TFT_DrawChar(X+200, Y+10, 'n');
 801743e:	4621      	mov	r1, r4
 8017440:	b2b8      	uxth	r0, r7
 8017442:	226e      	movs	r2, #110	; 0x6e
 8017444:	f007 fa54 	bl	801e8f0 <TFT_DrawChar>
			TFT_DrawChar(X+216, Y+10, 'm');
 8017448:	226d      	movs	r2, #109	; 0x6d
 801744a:	4621      	mov	r1, r4
 801744c:	b2a8      	uxth	r0, r5
 801744e:	f007 fa4f 	bl	801e8f0 <TFT_DrawChar>
}
 8017452:	e78f      	b.n	8017374 <GUI_Text_lambdaD_Measure+0xf4>
 8017454:	20004c71 	.word	0x20004c71
 8017458:	2000022a 	.word	0x2000022a
 801745c:	20004cae 	.word	0x20004cae
 8017460:	200001f0 	.word	0x200001f0
 8017464:	20004c73 	.word	0x20004c73
 8017468:	20000208 	.word	0x20000208
 801746c:	40240000 	.word	0x40240000
 8017470:	0803124d 	.word	0x0803124d
 8017474:	2000022f 	.word	0x2000022f
 8017478:	200001c0 	.word	0x200001c0

0801747c <GUI_Text_deltaE_Measure>:
}


uint8_t old_deltaE = 10, old_nan_deltaE = 0;
void GUI_Text_deltaE_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nan, uint8_t grey)
{	
 801747c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017480:	ed2d 8b02 	vpush	{d8}
 8017484:	4699      	mov	r9, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8017486:	4b76      	ldr	r3, [pc, #472]	; (8017660 <GUI_Text_deltaE_Measure+0x1e4>)
 8017488:	4e76      	ldr	r6, [pc, #472]	; (8017664 <GUI_Text_deltaE_Measure+0x1e8>)
{	
 801748a:	4617      	mov	r7, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 801748c:	781a      	ldrb	r2, [r3, #0]
 801748e:	4b76      	ldr	r3, [pc, #472]	; (8017668 <GUI_Text_deltaE_Measure+0x1ec>)
 8017490:	781b      	ldrb	r3, [r3, #0]
 8017492:	429a      	cmp	r2, r3
{	
 8017494:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_deltaE = 0;}
 8017496:	bf1c      	itt	ne
 8017498:	2300      	movne	r3, #0
 801749a:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 801749c:	2300      	movs	r3, #0
 801749e:	9303      	str	r3, [sp, #12]
 80174a0:	9304      	str	r3, [sp, #16]
 80174a2:	f88d 3014 	strb.w	r3, [sp, #20]
{	
 80174a6:	4604      	mov	r4, r0
 80174a8:	460d      	mov	r5, r1
 80174aa:	eeb0 8a40 	vmov.f32	s16, s0
	uint8_t	delta_pos = 140, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(nan) 
		{	
			if(!old_nan_deltaE){
 80174ae:	7833      	ldrb	r3, [r6, #0]
	if(nan) 
 80174b0:	2f00      	cmp	r7, #0
 80174b2:	d047      	beq.n	8017544 <GUI_Text_deltaE_Measure+0xc8>
			if(!old_nan_deltaE){
 80174b4:	bb33      	cbnz	r3, 8017504 <GUI_Text_deltaE_Measure+0x88>
				TFT_SetTextColor(TFT_White);
 80174b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80174ba:	f007 f955 	bl	801e768 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80174be:	2063      	movs	r0, #99	; 0x63
 80174c0:	f007 f958 	bl	801e774 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 80174c4:	4869      	ldr	r0, [pc, #420]	; (801766c <GUI_Text_deltaE_Measure+0x1f0>)
 80174c6:	f007 f949 	bl	801e75c <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80174ca:	2163      	movs	r1, #99	; 0x63
 80174cc:	f105 031a 	add.w	r3, r5, #26
 80174d0:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80174d4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80174d8:	9100      	str	r1, [sp, #0]
 80174da:	b29b      	uxth	r3, r3
 80174dc:	b292      	uxth	r2, r2
 80174de:	4629      	mov	r1, r5
 80174e0:	b280      	uxth	r0, r0
 80174e2:	f006 ff12 	bl	801e30a <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 80174e6:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80174e8:	f104 0075 	add.w	r0, r4, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 80174ec:	f88d 300c 	strb.w	r3, [sp, #12]
 80174f0:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 80174f4:	aa03      	add	r2, sp, #12
 80174f6:	2303      	movs	r3, #3
 80174f8:	4629      	mov	r1, r5
 80174fa:	b280      	uxth	r0, r0
 80174fc:	f007 fa50 	bl	801e9a0 <TFT_DisplayString>
				old_nan_deltaE = 1;
 8017500:	2301      	movs	r3, #1
 8017502:	7033      	strb	r3, [r6, #0]
	
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8017504:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017508:	f007 f92e 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801750c:	2063      	movs	r0, #99	; 0x63
 801750e:	f007 f931 	bl	801e774 <TFT_SetBackColor>

	TFT_SetFont(&Font16EN_arch_big);
 8017512:	4857      	ldr	r0, [pc, #348]	; (8017670 <GUI_Text_deltaE_Measure+0x1f4>)
 8017514:	f007 f922 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y+6, '~'+2);
 8017518:	1da9      	adds	r1, r5, #6
 801751a:	2280      	movs	r2, #128	; 0x80
 801751c:	b289      	uxth	r1, r1
 801751e:	4620      	mov	r0, r4
 8017520:	f007 f9e6 	bl	801e8f0 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8017524:	4853      	ldr	r0, [pc, #332]	; (8017674 <GUI_Text_deltaE_Measure+0x1f8>)
 8017526:	f007 f919 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'E'-33);
 801752a:	1ca9      	adds	r1, r5, #2
 801752c:	f104 0012 	add.w	r0, r4, #18
 8017530:	2224      	movs	r2, #36	; 0x24
 8017532:	b289      	uxth	r1, r1
 8017534:	b280      	uxth	r0, r0
 8017536:	f007 f9db 	bl	801e8f0 <TFT_DrawChar>

}
 801753a:	b007      	add	sp, #28
 801753c:	ecbd 8b02 	vpop	{d8}
 8017540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if(old_nan_deltaE){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);}
 8017544:	b163      	cbz	r3, 8017560 <GUI_Text_deltaE_Measure+0xe4>
 8017546:	f101 031a 	add.w	r3, r1, #26
 801754a:	f100 02fa 	add.w	r2, r0, #250	; 0xfa
 801754e:	2163      	movs	r1, #99	; 0x63
 8017550:	3028      	adds	r0, #40	; 0x28
 8017552:	9100      	str	r1, [sp, #0]
 8017554:	b29b      	uxth	r3, r3
 8017556:	b292      	uxth	r2, r2
 8017558:	4629      	mov	r1, r5
 801755a:	b280      	uxth	r0, r0
 801755c:	f006 fed5 	bl	801e30a <TFT_FillRectangle>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017560:	f64f 73ff 	movw	r3, #65535	; 0xffff
	old_nan_deltaE = 0;
 8017564:	f04f 0800 	mov.w	r8, #0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017568:	f249 40d2 	movw	r0, #38098	; 0x94d2
 801756c:	45c1      	cmp	r9, r8
 801756e:	bf08      	it	eq
 8017570:	4618      	moveq	r0, r3
	old_nan_deltaE = 0;
 8017572:	f886 8000 	strb.w	r8, [r6]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017576:	f007 f8f7 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801757a:	2063      	movs	r0, #99	; 0x63
 801757c:	f007 f8fa 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017580:	483a      	ldr	r0, [pc, #232]	; (801766c <GUI_Text_deltaE_Measure+0x1f0>)
 8017582:	f007 f8eb 	bl	801e75c <TFT_SetFont>
	Value = floor(Value*10)/10.0;
 8017586:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 801758a:	ee68 7a27 	vmul.f32	s15, s16, s15
	uint8_t	delta_pos = 140, sign = 0, number = 0;
 801758e:	268c      	movs	r6, #140	; 0x8c
	Value = floor(Value*10)/10.0;
 8017590:	ee17 0a90 	vmov	r0, s15
 8017594:	f7e8 ffe8 	bl	8000568 <__aeabi_f2d>
 8017598:	ec41 0b10 	vmov	d0, r0, r1
 801759c:	f00b f8dc 	bl	8022758 <floor>
 80175a0:	2200      	movs	r2, #0
 80175a2:	4b35      	ldr	r3, [pc, #212]	; (8017678 <GUI_Text_deltaE_Measure+0x1fc>)
 80175a4:	ec51 0b10 	vmov	r0, r1, d0
 80175a8:	f7e9 f95c 	bl	8000864 <__aeabi_ddiv>
 80175ac:	f7e9 fb28 	bl	8000c00 <__aeabi_d2f>
 80175b0:	ee08 0a10 	vmov	s16, r0
	if(Value < 0){Value *= -1; sign = 1;}
 80175b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80175b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175bc:	bf48      	it	mi
 80175be:	eeb1 8a48 	vnegmi.f32	s16, s16
	sprintf (buffer, "%.2f", Value);
 80175c2:	ee18 0a10 	vmov	r0, s16
	if(Value < 0){Value *= -1; sign = 1;}
 80175c6:	bf48      	it	mi
 80175c8:	f04f 0801 	movmi.w	r8, #1
	sprintf (buffer, "%.2f", Value);
 80175cc:	f7e8 ffcc 	bl	8000568 <__aeabi_f2d>
 80175d0:	4602      	mov	r2, r0
 80175d2:	460b      	mov	r3, r1
 80175d4:	a803      	add	r0, sp, #12
 80175d6:	4929      	ldr	r1, [pc, #164]	; (801767c <GUI_Text_deltaE_Measure+0x200>)
 80175d8:	f00a fbda 	bl	8021d90 <siprintf>
	uint32_t dec = 10;
 80175dc:	220a      	movs	r2, #10
	sprintf (buffer, "%.2f", Value);
 80175de:	2304      	movs	r3, #4
		if((Value/(dec)) >= 1.0)
 80175e0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 80175e4:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 80175e6:	ee07 2a10 	vmov	s14, r2
 80175ea:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80175ee:	ee88 7a26 	vdiv.f32	s14, s16, s13
 80175f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80175f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175fa:	db04      	blt.n	8017606 <GUI_Text_deltaE_Measure+0x18a>
			delta_pos-=23;
 80175fc:	3e17      	subs	r6, #23
			number++;
 80175fe:	3701      	adds	r7, #1
			dec *= 10;
 8017600:	434a      	muls	r2, r1
			delta_pos-=23;
 8017602:	b2f6      	uxtb	r6, r6
			number++;
 8017604:	b2ff      	uxtb	r7, r7
 8017606:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8017608:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801760c:	d1eb      	bne.n	80175e6 <GUI_Text_deltaE_Measure+0x16a>
	if(number < old_deltaE )
 801760e:	4b1c      	ldr	r3, [pc, #112]	; (8017680 <GUI_Text_deltaE_Measure+0x204>)
 8017610:	781a      	ldrb	r2, [r3, #0]
 8017612:	42ba      	cmp	r2, r7
 8017614:	4699      	mov	r9, r3
 8017616:	d90d      	bls.n	8017634 <GUI_Text_deltaE_Measure+0x1b8>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8017618:	2163      	movs	r1, #99	; 0x63
 801761a:	f105 0319 	add.w	r3, r5, #25
 801761e:	f104 02c5 	add.w	r2, r4, #197	; 0xc5
 8017622:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8017626:	9100      	str	r1, [sp, #0]
 8017628:	b29b      	uxth	r3, r3
 801762a:	b292      	uxth	r2, r2
 801762c:	4629      	mov	r1, r5
 801762e:	b280      	uxth	r0, r0
 8017630:	f006 fe6b 	bl	801e30a <TFT_FillRectangle>
	old_deltaE = number;
 8017634:	f889 7000 	strb.w	r7, [r9]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-');}
 8017638:	f1b8 0f00 	cmp.w	r8, #0
 801763c:	d007      	beq.n	801764e <GUI_Text_deltaE_Measure+0x1d2>
 801763e:	f1a4 0012 	sub.w	r0, r4, #18
 8017642:	4430      	add	r0, r6
 8017644:	222d      	movs	r2, #45	; 0x2d
 8017646:	4629      	mov	r1, r5
 8017648:	b280      	uxth	r0, r0
 801764a:	f007 f951 	bl	801e8f0 <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 801764e:	19a0      	adds	r0, r4, r6
 8017650:	2303      	movs	r3, #3
 8017652:	aa03      	add	r2, sp, #12
 8017654:	4629      	mov	r1, r5
 8017656:	b280      	uxth	r0, r0
 8017658:	f007 f9a2 	bl	801e9a0 <TFT_DisplayString>
 801765c:	e752      	b.n	8017504 <GUI_Text_deltaE_Measure+0x88>
 801765e:	bf00      	nop
 8017660:	2000022a 	.word	0x2000022a
 8017664:	20004cad 	.word	0x20004cad
 8017668:	20004c71 	.word	0x20004c71
 801766c:	200001f0 	.word	0x200001f0
 8017670:	200001b0 	.word	0x200001b0
 8017674:	200001e8 	.word	0x200001e8
 8017678:	40240000 	.word	0x40240000
 801767c:	08031252 	.word	0x08031252
 8017680:	2000022e 	.word	0x2000022e

08017684 <GUI_Text_EbEr_Measure>:
uint8_t old_num_EB = 10, old_num_ER = 10, old_nan_EBER = 0;
void GUI_Text_EbEr_Measure(uint16_t X, uint16_t Y, float ValueEB, float ValueER, uint8_t nan, uint8_t grey)
{
 8017684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017688:	ed2d 8b04 	vpush	{d8-d9}
 801768c:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 801768e:	4bb6      	ldr	r3, [pc, #728]	; (8017968 <GUI_Text_EbEr_Measure+0x2e4>)
 8017690:	4eb6      	ldr	r6, [pc, #728]	; (801796c <GUI_Text_EbEr_Measure+0x2e8>)
{
 8017692:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 8017694:	781a      	ldrb	r2, [r3, #0]
 8017696:	4bb6      	ldr	r3, [pc, #728]	; (8017970 <GUI_Text_EbEr_Measure+0x2ec>)
 8017698:	781b      	ldrb	r3, [r3, #0]
 801769a:	429a      	cmp	r2, r3
{
 801769c:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_EBER = 0;}
 801769e:	bf1c      	itt	ne
 80176a0:	2300      	movne	r3, #0
 80176a2:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 80176a4:	2300      	movs	r3, #0
 80176a6:	9303      	str	r3, [sp, #12]
 80176a8:	9304      	str	r3, [sp, #16]
 80176aa:	f88d 3014 	strb.w	r3, [sp, #20]
{
 80176ae:	4605      	mov	r5, r0
 80176b0:	460c      	mov	r4, r1
 80176b2:	eef0 8a40 	vmov.f32	s17, s0
 80176b6:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	
	if(nan) 
		{	
			if(!old_nan_EBER){
 80176ba:	7833      	ldrb	r3, [r6, #0]
	if(nan) 
 80176bc:	f1b8 0f00 	cmp.w	r8, #0
 80176c0:	d06f      	beq.n	80177a2 <GUI_Text_EbEr_Measure+0x11e>
			if(!old_nan_EBER){
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d140      	bne.n	8017748 <GUI_Text_EbEr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 80176c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80176ca:	f007 f84d 	bl	801e768 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80176ce:	2063      	movs	r0, #99	; 0x63
 80176d0:	f007 f850 	bl	801e774 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80176d4:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 80176d8:	48a6      	ldr	r0, [pc, #664]	; (8017974 <GUI_Text_EbEr_Measure+0x2f0>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80176da:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 80176de:	f007 f83d 	bl	801e75c <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80176e2:	b2bf      	uxth	r7, r7
 80176e4:	fa1f f989 	uxth.w	r9, r9
 80176e8:	f04f 0a63 	mov.w	sl, #99	; 0x63
 80176ec:	f104 031a 	add.w	r3, r4, #26
 80176f0:	4638      	mov	r0, r7
 80176f2:	b29b      	uxth	r3, r3
 80176f4:	464a      	mov	r2, r9
 80176f6:	4621      	mov	r1, r4
 80176f8:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 80176fc:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017700:	f006 fe03 	bl	801e30a <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8017704:	fa1f f888 	uxth.w	r8, r8
 8017708:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 801770c:	4638      	mov	r0, r7
 801770e:	b29b      	uxth	r3, r3
 8017710:	464a      	mov	r2, r9
 8017712:	4641      	mov	r1, r8
 8017714:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017718:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 801771c:	f006 fdf5 	bl	801e30a <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017720:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 8017722:	232d      	movs	r3, #45	; 0x2d
 8017724:	f88d 300c 	strb.w	r3, [sp, #12]
 8017728:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 801772c:	aa03      	add	r2, sp, #12
 801772e:	2303      	movs	r3, #3
 8017730:	4621      	mov	r1, r4
 8017732:	4638      	mov	r0, r7
 8017734:	f007 f934 	bl	801e9a0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017738:	2303      	movs	r3, #3
 801773a:	aa03      	add	r2, sp, #12
 801773c:	4641      	mov	r1, r8
 801773e:	4638      	mov	r0, r7
 8017740:	f007 f92e 	bl	801e9a0 <TFT_DisplayString>
				old_nan_EBER = 1;
 8017744:	2301      	movs	r3, #1
 8017746:	7033      	strb	r3, [r6, #0]
	old_num_ER = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetTextColor(TFT_White);
 8017748:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801774c:	f007 f80c 	bl	801e768 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8017750:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 8017754:	4888      	ldr	r0, [pc, #544]	; (8017978 <GUI_Text_EbEr_Measure+0x2f4>)
 8017756:	f007 f801 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 801775a:	b2b6      	uxth	r6, r6
 801775c:	f104 010c 	add.w	r1, r4, #12
 8017760:	4630      	mov	r0, r6
 8017762:	2242      	movs	r2, #66	; 0x42
 8017764:	b289      	uxth	r1, r1
 8017766:	f007 f8c3 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 801776a:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 801776e:	2252      	movs	r2, #82	; 0x52
 8017770:	b289      	uxth	r1, r1
 8017772:	4630      	mov	r0, r6
 8017774:	f007 f8bc 	bl	801e8f0 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8017778:	4880      	ldr	r0, [pc, #512]	; (801797c <GUI_Text_EbEr_Measure+0x2f8>)
 801777a:	f006 ffef 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'E'-33);
 801777e:	1ca1      	adds	r1, r4, #2
 8017780:	4628      	mov	r0, r5
 8017782:	2224      	movs	r2, #36	; 0x24
 8017784:	b289      	uxth	r1, r1
 8017786:	f007 f8b3 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'E'-33);
 801778a:	f104 0125 	add.w	r1, r4, #37	; 0x25
 801778e:	2224      	movs	r2, #36	; 0x24
 8017790:	b289      	uxth	r1, r1
 8017792:	4628      	mov	r0, r5
 8017794:	f007 f8ac 	bl	801e8f0 <TFT_DrawChar>
}
 8017798:	b007      	add	sp, #28
 801779a:	ecbd 8b04 	vpop	{d8-d9}
 801779e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(old_nan_EBER){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80177a2:	b1eb      	cbz	r3, 80177e0 <GUI_Text_EbEr_Measure+0x15c>
 80177a4:	f100 0728 	add.w	r7, r0, #40	; 0x28
 80177a8:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 80177ac:	f101 031a 	add.w	r3, r1, #26
 80177b0:	b2bf      	uxth	r7, r7
 80177b2:	fa1f f989 	uxth.w	r9, r9
 80177b6:	f04f 0b63 	mov.w	fp, #99	; 0x63
 80177ba:	b29b      	uxth	r3, r3
 80177bc:	464a      	mov	r2, r9
 80177be:	4638      	mov	r0, r7
 80177c0:	f8cd b000 	str.w	fp, [sp]
 80177c4:	f006 fda1 	bl	801e30a <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 80177c8:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 80177cc:	f104 0123 	add.w	r1, r4, #35	; 0x23
 80177d0:	f8cd b000 	str.w	fp, [sp]
 80177d4:	b29b      	uxth	r3, r3
 80177d6:	464a      	mov	r2, r9
 80177d8:	b289      	uxth	r1, r1
 80177da:	4638      	mov	r0, r7
 80177dc:	f006 fd95 	bl	801e30a <TFT_FillRectangle>
	ValueEB = floor(ValueEB*100)/100.0;
 80177e0:	ed9f 8a67 	vldr	s16, [pc, #412]	; 8017980 <GUI_Text_EbEr_Measure+0x2fc>
 80177e4:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_EBER = 0;
 80177e8:	2700      	movs	r7, #0
	ValueEB = floor(ValueEB*100)/100.0;
 80177ea:	ee17 0a90 	vmov	r0, s15
	old_nan_EBER = 0;
 80177ee:	7037      	strb	r7, [r6, #0]
	ValueEB = floor(ValueEB*100)/100.0;
 80177f0:	f7e8 feba 	bl	8000568 <__aeabi_f2d>
 80177f4:	ec41 0b10 	vmov	d0, r0, r1
 80177f8:	f00a ffae 	bl	8022758 <floor>
 80177fc:	2200      	movs	r2, #0
 80177fe:	4b61      	ldr	r3, [pc, #388]	; (8017984 <GUI_Text_EbEr_Measure+0x300>)
 8017800:	ec51 0b10 	vmov	r0, r1, d0
 8017804:	f7e9 f82e 	bl	8000864 <__aeabi_ddiv>
 8017808:	f7e9 f9fa 	bl	8000c00 <__aeabi_d2f>
	ValueER = floor(ValueER*100)/100.0;
 801780c:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueEB = floor(ValueEB*100)/100.0;
 8017810:	ee08 0a90 	vmov	s17, r0
	ValueER = floor(ValueER*100)/100.0;
 8017814:	ee17 0a90 	vmov	r0, s15
 8017818:	f7e8 fea6 	bl	8000568 <__aeabi_f2d>
 801781c:	ec41 0b10 	vmov	d0, r0, r1
 8017820:	f00a ff9a 	bl	8022758 <floor>
 8017824:	2200      	movs	r2, #0
 8017826:	ec51 0b10 	vmov	r0, r1, d0
 801782a:	4b56      	ldr	r3, [pc, #344]	; (8017984 <GUI_Text_EbEr_Measure+0x300>)
 801782c:	f7e9 f81a 	bl	8000864 <__aeabi_ddiv>
 8017830:	f7e9 f9e6 	bl	8000c00 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017834:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueER = floor(ValueER*100)/100.0;
 8017838:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 801783c:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8017840:	45ba      	cmp	sl, r7
 8017842:	bf08      	it	eq
 8017844:	4618      	moveq	r0, r3
 8017846:	f006 ff8f 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801784a:	2063      	movs	r0, #99	; 0x63
 801784c:	f006 ff92 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017850:	4848      	ldr	r0, [pc, #288]	; (8017974 <GUI_Text_EbEr_Measure+0x2f0>)
 8017852:	f006 ff83 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueEB);
 8017856:	ee18 0a90 	vmov	r0, s17
 801785a:	f7e8 fe85 	bl	8000568 <__aeabi_f2d>
 801785e:	4602      	mov	r2, r0
 8017860:	460b      	mov	r3, r1
 8017862:	a803      	add	r0, sp, #12
 8017864:	4948      	ldr	r1, [pc, #288]	; (8017988 <GUI_Text_EbEr_Measure+0x304>)
 8017866:	f00a fa93 	bl	8021d90 <siprintf>
	uint32_t dec = 10;
 801786a:	f04f 090a 	mov.w	r9, #10
		if((ValueEB/(dec)) >= 1.0)
 801786e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueEB);
 8017872:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 8017874:	2696      	movs	r6, #150	; 0x96
 8017876:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 801787a:	464a      	mov	r2, r9
		if((ValueEB/(dec)) >= 1.0)
 801787c:	ee07 9a10 	vmov	s14, r9
 8017880:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8017884:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8017888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801788c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017890:	db05      	blt.n	801789e <GUI_Text_EbEr_Measure+0x21a>
			delta_pos-=23;
 8017892:	3e17      	subs	r6, #23
			number++;
 8017894:	3701      	adds	r7, #1
			dec *= 10;
 8017896:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 801789a:	b2f6      	uxtb	r6, r6
			number++;
 801789c:	b2ff      	uxtb	r7, r7
 801789e:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 80178a0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80178a4:	d1ea      	bne.n	801787c <GUI_Text_EbEr_Measure+0x1f8>
	if(number < old_num_EB )
 80178a6:	4b39      	ldr	r3, [pc, #228]	; (801798c <GUI_Text_EbEr_Measure+0x308>)
 80178a8:	781a      	ldrb	r2, [r3, #0]
 80178aa:	42ba      	cmp	r2, r7
 80178ac:	469a      	mov	sl, r3
 80178ae:	d90d      	bls.n	80178cc <GUI_Text_EbEr_Measure+0x248>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 80178b0:	2163      	movs	r1, #99	; 0x63
 80178b2:	f104 0319 	add.w	r3, r4, #25
 80178b6:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 80178ba:	f105 0028 	add.w	r0, r5, #40	; 0x28
 80178be:	9100      	str	r1, [sp, #0]
 80178c0:	b29b      	uxth	r3, r3
 80178c2:	b292      	uxth	r2, r2
 80178c4:	4621      	mov	r1, r4
 80178c6:	b280      	uxth	r0, r0
 80178c8:	f006 fd1f 	bl	801e30a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80178cc:	19a8      	adds	r0, r5, r6
 80178ce:	2303      	movs	r3, #3
 80178d0:	aa03      	add	r2, sp, #12
 80178d2:	4621      	mov	r1, r4
 80178d4:	b280      	uxth	r0, r0
	old_num_EB = number;
 80178d6:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 80178da:	f007 f861 	bl	801e9a0 <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueER);
 80178de:	ee18 0a10 	vmov	r0, s16
 80178e2:	f7e8 fe41 	bl	8000568 <__aeabi_f2d>
 80178e6:	4602      	mov	r2, r0
 80178e8:	460b      	mov	r3, r1
 80178ea:	a803      	add	r0, sp, #12
 80178ec:	4926      	ldr	r1, [pc, #152]	; (8017988 <GUI_Text_EbEr_Measure+0x304>)
 80178ee:	f00a fa4f 	bl	8021d90 <siprintf>
 80178f2:	2304      	movs	r3, #4
			dec *= 10;
 80178f4:	220a      	movs	r2, #10
		if((ValueER/(dec)) >= 1.0)
 80178f6:	ee07 9a90 	vmov	s15, r9
 80178fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80178fe:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8017902:	eef4 7ac9 	vcmpe.f32	s15, s18
 8017906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801790a:	db07      	blt.n	801791c <GUI_Text_EbEr_Measure+0x298>
			delta_pos-=23;
 801790c:	3e17      	subs	r6, #23
			number++;
 801790e:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8017912:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8017916:	b2f6      	uxtb	r6, r6
			number++;
 8017918:	fa5f f888 	uxtb.w	r8, r8
 801791c:	3b01      	subs	r3, #1
		for (uint8_t i = 1; i <= 4; i++)
 801791e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8017922:	d1e8      	bne.n	80178f6 <GUI_Text_EbEr_Measure+0x272>
	if(number < old_num_ER )
 8017924:	4f1a      	ldr	r7, [pc, #104]	; (8017990 <GUI_Text_EbEr_Measure+0x30c>)
 8017926:	783b      	ldrb	r3, [r7, #0]
 8017928:	4543      	cmp	r3, r8
 801792a:	d911      	bls.n	8017950 <GUI_Text_EbEr_Measure+0x2cc>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 801792c:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8017930:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017934:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8017938:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801793c:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8017940:	f8cd e000 	str.w	lr, [sp]
 8017944:	b29b      	uxth	r3, r3
 8017946:	b292      	uxth	r2, r2
 8017948:	b289      	uxth	r1, r1
 801794a:	b280      	uxth	r0, r0
 801794c:	f006 fcdd 	bl	801e30a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017950:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8017954:	19a8      	adds	r0, r5, r6
 8017956:	2303      	movs	r3, #3
 8017958:	aa03      	add	r2, sp, #12
 801795a:	b289      	uxth	r1, r1
 801795c:	b280      	uxth	r0, r0
	old_num_ER = number;
 801795e:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017962:	f007 f81d 	bl	801e9a0 <TFT_DisplayString>
 8017966:	e6ef      	b.n	8017748 <GUI_Text_EbEr_Measure+0xc4>
 8017968:	2000022a 	.word	0x2000022a
 801796c:	20004ca4 	.word	0x20004ca4
 8017970:	20004c71 	.word	0x20004c71
 8017974:	200001f0 	.word	0x200001f0
 8017978:	200001b0 	.word	0x200001b0
 801797c:	200001e8 	.word	0x200001e8
 8017980:	42c80000 	.word	0x42c80000
 8017984:	40590000 	.word	0x40590000
 8017988:	08031252 	.word	0x08031252
 801798c:	2000023e 	.word	0x2000023e
 8017990:	2000023f 	.word	0x2000023f

08017994 <GUI_Text_LbLr_Measure>:
uint8_t old_num_LB = 10, old_num_LR = 10, old_nan_LBLR = 0;
void GUI_Text_LbLr_Measure(uint16_t X, uint16_t Y, float ValueLB, float ValueLR, uint8_t nan, uint8_t grey)
{
 8017994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017998:	ed2d 8b04 	vpush	{d8-d9}
 801799c:	469a      	mov	sl, r3
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 801799e:	4bb8      	ldr	r3, [pc, #736]	; (8017c80 <GUI_Text_LbLr_Measure+0x2ec>)
 80179a0:	4eb8      	ldr	r6, [pc, #736]	; (8017c84 <GUI_Text_LbLr_Measure+0x2f0>)
{
 80179a2:	4690      	mov	r8, r2
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80179a4:	781a      	ldrb	r2, [r3, #0]
 80179a6:	4bb8      	ldr	r3, [pc, #736]	; (8017c88 <GUI_Text_LbLr_Measure+0x2f4>)
 80179a8:	781b      	ldrb	r3, [r3, #0]
 80179aa:	429a      	cmp	r2, r3
{
 80179ac:	b087      	sub	sp, #28
	if(preGUI_screen_state != GUI_screen_state){old_nan_LBLR = 0;}
 80179ae:	bf1c      	itt	ne
 80179b0:	2300      	movne	r3, #0
 80179b2:	7033      	strbne	r3, [r6, #0]
	char buffer[9] = {0};
 80179b4:	2300      	movs	r3, #0
 80179b6:	9303      	str	r3, [sp, #12]
 80179b8:	9304      	str	r3, [sp, #16]
 80179ba:	f88d 3014 	strb.w	r3, [sp, #20]
{
 80179be:	4605      	mov	r5, r0
 80179c0:	460c      	mov	r4, r1
 80179c2:	eef0 8a40 	vmov.f32	s17, s0
 80179c6:	eeb0 9a60 	vmov.f32	s18, s1
	uint8_t	delta_pos = 150, number = 0;
	uint32_t dec = 10;
	if(nan) 
		{	
			if(!old_nan_LBLR){
 80179ca:	7833      	ldrb	r3, [r6, #0]
	if(nan) 
 80179cc:	f1b8 0f00 	cmp.w	r8, #0
 80179d0:	d072      	beq.n	8017ab8 <GUI_Text_LbLr_Measure+0x124>
			if(!old_nan_LBLR){
 80179d2:	2b00      	cmp	r3, #0
 80179d4:	d140      	bne.n	8017a58 <GUI_Text_LbLr_Measure+0xc4>
				TFT_SetTextColor(TFT_White);
 80179d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80179da:	f006 fec5 	bl	801e768 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 80179de:	2063      	movs	r0, #99	; 0x63
 80179e0:	f006 fec8 	bl	801e774 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80179e4:	f105 0728 	add.w	r7, r5, #40	; 0x28
				TFT_SetFont(&Font26EN_arch_digit);
 80179e8:	48a8      	ldr	r0, [pc, #672]	; (8017c8c <GUI_Text_LbLr_Measure+0x2f8>)
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80179ea:	f105 09fa 	add.w	r9, r5, #250	; 0xfa
				TFT_SetFont(&Font26EN_arch_digit);
 80179ee:	f006 feb5 	bl	801e75c <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 80179f2:	b2bf      	uxth	r7, r7
 80179f4:	fa1f f989 	uxth.w	r9, r9
 80179f8:	f04f 0a63 	mov.w	sl, #99	; 0x63
 80179fc:	f104 031a 	add.w	r3, r4, #26
 8017a00:	4638      	mov	r0, r7
 8017a02:	b29b      	uxth	r3, r3
 8017a04:	464a      	mov	r2, r9
 8017a06:	4621      	mov	r1, r4
 8017a08:	f8cd a000 	str.w	sl, [sp]
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8017a0c:	f104 0823 	add.w	r8, r4, #35	; 0x23
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017a10:	f006 fc7b 	bl	801e30a <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8017a14:	fa1f f888 	uxth.w	r8, r8
 8017a18:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8017a1c:	4638      	mov	r0, r7
 8017a1e:	b29b      	uxth	r3, r3
 8017a20:	464a      	mov	r2, r9
 8017a22:	4641      	mov	r1, r8
 8017a24:	f8cd a000 	str.w	sl, [sp]
				buffer[0] = '-';buffer[1] = '-';
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017a28:	f105 0775 	add.w	r7, r5, #117	; 0x75
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);
 8017a2c:	f006 fc6d 	bl	801e30a <TFT_FillRectangle>
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017a30:	b2bf      	uxth	r7, r7
				buffer[0] = '-';buffer[1] = '-';
 8017a32:	232d      	movs	r3, #45	; 0x2d
 8017a34:	f88d 300c 	strb.w	r3, [sp, #12]
 8017a38:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017a3c:	aa03      	add	r2, sp, #12
 8017a3e:	2303      	movs	r3, #3
 8017a40:	4621      	mov	r1, r4
 8017a42:	4638      	mov	r0, r7
 8017a44:	f006 ffac 	bl	801e9a0 <TFT_DisplayString>
				TFT_DisplayString(X+117, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017a48:	2303      	movs	r3, #3
 8017a4a:	aa03      	add	r2, sp, #12
 8017a4c:	4641      	mov	r1, r8
 8017a4e:	4638      	mov	r0, r7
 8017a50:	f006 ffa6 	bl	801e9a0 <TFT_DisplayString>
				old_nan_LBLR = 1;
 8017a54:	2301      	movs	r3, #1
 8017a56:	7033      	strb	r3, [r6, #0]
	old_num_LR = number;
	number = 0;

	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
}
	TFT_SetFont(&Font26EN_arch_digit);
 8017a58:	488c      	ldr	r0, [pc, #560]	; (8017c8c <GUI_Text_LbLr_Measure+0x2f8>)
 8017a5a:	f006 fe7f 	bl	801e75c <TFT_SetFont>

	TFT_SetTextColor(TFT_White);
 8017a5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017a62:	f006 fe81 	bl	801e768 <TFT_SetTextColor>
	TFT_SetFont(&Font16EN_arch_big);
	TFT_DrawChar(X+21, Y+12, 'B');
 8017a66:	f105 0615 	add.w	r6, r5, #21
	TFT_SetFont(&Font16EN_arch_big);
 8017a6a:	4889      	ldr	r0, [pc, #548]	; (8017c90 <GUI_Text_LbLr_Measure+0x2fc>)
 8017a6c:	f006 fe76 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+21, Y+12, 'B');
 8017a70:	b2b6      	uxth	r6, r6
 8017a72:	f104 010c 	add.w	r1, r4, #12
 8017a76:	4630      	mov	r0, r6
 8017a78:	2242      	movs	r2, #66	; 0x42
 8017a7a:	b289      	uxth	r1, r1
 8017a7c:	f006 ff38 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+47, 'R');
 8017a80:	f104 012f 	add.w	r1, r4, #47	; 0x2f
 8017a84:	2252      	movs	r2, #82	; 0x52
 8017a86:	b289      	uxth	r1, r1
 8017a88:	4630      	mov	r0, r6
 8017a8a:	f006 ff31 	bl	801e8f0 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8017a8e:	4881      	ldr	r0, [pc, #516]	; (8017c94 <GUI_Text_LbLr_Measure+0x300>)
 8017a90:	f006 fe64 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'L'-33);
 8017a94:	1ca1      	adds	r1, r4, #2
 8017a96:	4628      	mov	r0, r5
 8017a98:	222b      	movs	r2, #43	; 0x2b
 8017a9a:	b289      	uxth	r1, r1
 8017a9c:	f006 ff28 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y+37, 'L'-33);
 8017aa0:	f104 0125 	add.w	r1, r4, #37	; 0x25
 8017aa4:	222b      	movs	r2, #43	; 0x2b
 8017aa6:	b289      	uxth	r1, r1
 8017aa8:	4628      	mov	r0, r5
 8017aaa:	f006 ff21 	bl	801e8f0 <TFT_DrawChar>
}
 8017aae:	b007      	add	sp, #28
 8017ab0:	ecbd 8b04 	vpop	{d8-d9}
 8017ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(old_nan_LBLR){TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017ab8:	b1eb      	cbz	r3, 8017af6 <GUI_Text_LbLr_Measure+0x162>
 8017aba:	f100 0728 	add.w	r7, r0, #40	; 0x28
 8017abe:	f100 09fa 	add.w	r9, r0, #250	; 0xfa
 8017ac2:	f101 031a 	add.w	r3, r1, #26
 8017ac6:	b2bf      	uxth	r7, r7
 8017ac8:	fa1f f989 	uxth.w	r9, r9
 8017acc:	f04f 0b63 	mov.w	fp, #99	; 0x63
 8017ad0:	b29b      	uxth	r3, r3
 8017ad2:	464a      	mov	r2, r9
 8017ad4:	4638      	mov	r0, r7
 8017ad6:	f8cd b000 	str.w	fp, [sp]
 8017ada:	f006 fc16 	bl	801e30a <TFT_FillRectangle>
				TFT_FillRectangle(X+40, Y+35, X+250, Y+59, TFT_Black_Bkgr);}
 8017ade:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8017ae2:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8017ae6:	f8cd b000 	str.w	fp, [sp]
 8017aea:	b29b      	uxth	r3, r3
 8017aec:	464a      	mov	r2, r9
 8017aee:	b289      	uxth	r1, r1
 8017af0:	4638      	mov	r0, r7
 8017af2:	f006 fc0a 	bl	801e30a <TFT_FillRectangle>
	ValueLB = floor(ValueLB*100)/100.0;
 8017af6:	ed9f 8a68 	vldr	s16, [pc, #416]	; 8017c98 <GUI_Text_LbLr_Measure+0x304>
 8017afa:	ee68 7a88 	vmul.f32	s15, s17, s16
	old_nan_LBLR = 0;
 8017afe:	2700      	movs	r7, #0
	ValueLB = floor(ValueLB*100)/100.0;
 8017b00:	ee17 0a90 	vmov	r0, s15
	old_nan_LBLR = 0;
 8017b04:	7037      	strb	r7, [r6, #0]
	ValueLB = floor(ValueLB*100)/100.0;
 8017b06:	f7e8 fd2f 	bl	8000568 <__aeabi_f2d>
 8017b0a:	ec41 0b10 	vmov	d0, r0, r1
 8017b0e:	f00a fe23 	bl	8022758 <floor>
 8017b12:	2200      	movs	r2, #0
 8017b14:	4b61      	ldr	r3, [pc, #388]	; (8017c9c <GUI_Text_LbLr_Measure+0x308>)
 8017b16:	ec51 0b10 	vmov	r0, r1, d0
 8017b1a:	f7e8 fea3 	bl	8000864 <__aeabi_ddiv>
 8017b1e:	f7e9 f86f 	bl	8000c00 <__aeabi_d2f>
	ValueLR = floor(ValueLR*100)/100.0;
 8017b22:	ee69 7a08 	vmul.f32	s15, s18, s16
	ValueLB = floor(ValueLB*100)/100.0;
 8017b26:	ee08 0a90 	vmov	s17, r0
	ValueLR = floor(ValueLR*100)/100.0;
 8017b2a:	ee17 0a90 	vmov	r0, s15
 8017b2e:	f7e8 fd1b 	bl	8000568 <__aeabi_f2d>
 8017b32:	ec41 0b10 	vmov	d0, r0, r1
 8017b36:	f00a fe0f 	bl	8022758 <floor>
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	ec51 0b10 	vmov	r0, r1, d0
 8017b40:	4b56      	ldr	r3, [pc, #344]	; (8017c9c <GUI_Text_LbLr_Measure+0x308>)
 8017b42:	f7e8 fe8f 	bl	8000864 <__aeabi_ddiv>
 8017b46:	f7e9 f85b 	bl	8000c00 <__aeabi_d2f>
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017b4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ValueLR = floor(ValueLR*100)/100.0;
 8017b4e:	ee08 0a10 	vmov	s16, r0
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017b52:	f249 40d2 	movw	r0, #38098	; 0x94d2
 8017b56:	45ba      	cmp	sl, r7
 8017b58:	bf08      	it	eq
 8017b5a:	4618      	moveq	r0, r3
 8017b5c:	f006 fe04 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017b60:	2063      	movs	r0, #99	; 0x63
 8017b62:	f006 fe07 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017b66:	4849      	ldr	r0, [pc, #292]	; (8017c8c <GUI_Text_LbLr_Measure+0x2f8>)
 8017b68:	f006 fdf8 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%.2f", ValueLB);
 8017b6c:	ee18 0a90 	vmov	r0, s17
 8017b70:	f7e8 fcfa 	bl	8000568 <__aeabi_f2d>
 8017b74:	4602      	mov	r2, r0
 8017b76:	460b      	mov	r3, r1
 8017b78:	a803      	add	r0, sp, #12
 8017b7a:	4949      	ldr	r1, [pc, #292]	; (8017ca0 <GUI_Text_LbLr_Measure+0x30c>)
 8017b7c:	f00a f908 	bl	8021d90 <siprintf>
	uint32_t dec = 10;
 8017b80:	f04f 090a 	mov.w	r9, #10
		if((ValueLB/(dec)) >= 1.0)
 8017b84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	sprintf (buffer, "%.2f", ValueLB);
 8017b88:	2304      	movs	r3, #4
	uint8_t	delta_pos = 150, number = 0;
 8017b8a:	2696      	movs	r6, #150	; 0x96
 8017b8c:	eeb0 9a67 	vmov.f32	s18, s15
			dec *= 10;
 8017b90:	464a      	mov	r2, r9
		if((ValueLB/(dec)) >= 1.0)
 8017b92:	ee07 9a10 	vmov	s14, r9
 8017b96:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8017b9a:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8017b9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ba6:	db05      	blt.n	8017bb4 <GUI_Text_LbLr_Measure+0x220>
			delta_pos-=23;
 8017ba8:	3e17      	subs	r6, #23
			number++;
 8017baa:	3701      	adds	r7, #1
			dec *= 10;
 8017bac:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8017bb0:	b2f6      	uxtb	r6, r6
			number++;
 8017bb2:	b2ff      	uxtb	r7, r7
 8017bb4:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8017bb6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8017bba:	d1ea      	bne.n	8017b92 <GUI_Text_LbLr_Measure+0x1fe>
	if(number < old_num_LB )
 8017bbc:	4b39      	ldr	r3, [pc, #228]	; (8017ca4 <GUI_Text_LbLr_Measure+0x310>)
 8017bbe:	781a      	ldrb	r2, [r3, #0]
 8017bc0:	42ba      	cmp	r2, r7
 8017bc2:	469a      	mov	sl, r3
 8017bc4:	d90d      	bls.n	8017be2 <GUI_Text_LbLr_Measure+0x24e>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8017bc6:	2163      	movs	r1, #99	; 0x63
 8017bc8:	f104 0319 	add.w	r3, r4, #25
 8017bcc:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017bd0:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017bd4:	9100      	str	r1, [sp, #0]
 8017bd6:	b29b      	uxth	r3, r3
 8017bd8:	b292      	uxth	r2, r2
 8017bda:	4621      	mov	r1, r4
 8017bdc:	b280      	uxth	r0, r0
 8017bde:	f006 fb94 	bl	801e30a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017be2:	19a8      	adds	r0, r5, r6
 8017be4:	2303      	movs	r3, #3
 8017be6:	aa03      	add	r2, sp, #12
 8017be8:	4621      	mov	r1, r4
 8017bea:	b280      	uxth	r0, r0
	old_num_LB = number;
 8017bec:	f88a 7000 	strb.w	r7, [sl]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017bf0:	f006 fed6 	bl	801e9a0 <TFT_DisplayString>
	sprintf (buffer, "%.2f", ValueLR);
 8017bf4:	ee18 0a10 	vmov	r0, s16
 8017bf8:	f7e8 fcb6 	bl	8000568 <__aeabi_f2d>
 8017bfc:	4602      	mov	r2, r0
 8017bfe:	460b      	mov	r3, r1
 8017c00:	a803      	add	r0, sp, #12
 8017c02:	4927      	ldr	r1, [pc, #156]	; (8017ca0 <GUI_Text_LbLr_Measure+0x30c>)
 8017c04:	f00a f8c4 	bl	8021d90 <siprintf>
 8017c08:	2304      	movs	r3, #4
			dec *= 10;
 8017c0a:	220a      	movs	r2, #10
		if((ValueLR/(dec)) >= 1.0)
 8017c0c:	ee07 9a90 	vmov	s15, r9
 8017c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8017c14:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8017c18:	eef4 7ac9 	vcmpe.f32	s15, s18
 8017c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c20:	db07      	blt.n	8017c32 <GUI_Text_LbLr_Measure+0x29e>
			delta_pos-=23;
 8017c22:	3e17      	subs	r6, #23
			number++;
 8017c24:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 8017c28:	fb02 f909 	mul.w	r9, r2, r9
			delta_pos-=23;
 8017c2c:	b2f6      	uxtb	r6, r6
			number++;
 8017c2e:	fa5f f888 	uxtb.w	r8, r8
 8017c32:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8017c34:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8017c38:	d1e8      	bne.n	8017c0c <GUI_Text_LbLr_Measure+0x278>
	if(number < old_num_LR )
 8017c3a:	4f1b      	ldr	r7, [pc, #108]	; (8017ca8 <GUI_Text_LbLr_Measure+0x314>)
 8017c3c:	783b      	ldrb	r3, [r7, #0]
 8017c3e:	4543      	cmp	r3, r8
 8017c40:	d911      	bls.n	8017c66 <GUI_Text_LbLr_Measure+0x2d2>
		TFT_FillRectangle(X+40, Y+33, X+197, Y+59, TFT_Black_Bkgr);
 8017c42:	f104 033b 	add.w	r3, r4, #59	; 0x3b
 8017c46:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017c4a:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8017c4e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017c52:	f04f 0e63 	mov.w	lr, #99	; 0x63
 8017c56:	f8cd e000 	str.w	lr, [sp]
 8017c5a:	b29b      	uxth	r3, r3
 8017c5c:	b292      	uxth	r2, r2
 8017c5e:	b289      	uxth	r1, r1
 8017c60:	b280      	uxth	r0, r0
 8017c62:	f006 fb52 	bl	801e30a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017c66:	f104 0123 	add.w	r1, r4, #35	; 0x23
 8017c6a:	19a8      	adds	r0, r5, r6
 8017c6c:	2303      	movs	r3, #3
 8017c6e:	aa03      	add	r2, sp, #12
 8017c70:	b289      	uxth	r1, r1
 8017c72:	b280      	uxth	r0, r0
	old_num_LR = number;
 8017c74:	f887 8000 	strb.w	r8, [r7]
	TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8017c78:	f006 fe92 	bl	801e9a0 <TFT_DisplayString>
 8017c7c:	e6ec      	b.n	8017a58 <GUI_Text_LbLr_Measure+0xc4>
 8017c7e:	bf00      	nop
 8017c80:	2000022a 	.word	0x2000022a
 8017c84:	20004ca7 	.word	0x20004ca7
 8017c88:	20004c71 	.word	0x20004c71
 8017c8c:	200001f0 	.word	0x200001f0
 8017c90:	200001b0 	.word	0x200001b0
 8017c94:	200001e8 	.word	0x200001e8
 8017c98:	42c80000 	.word	0x42c80000
 8017c9c:	40590000 	.word	0x40590000
 8017ca0:	08031252 	.word	0x08031252
 8017ca4:	20000241 	.word	0x20000241
 8017ca8:	20000242 	.word	0x20000242

08017cac <GUI_Text_S_P_Measure>:

uint8_t old_num_SP = 10, old_nan_SP = 0;
void GUI_Text_S_P_Measure(uint16_t X, uint16_t Y, float Value, uint8_t nan, uint8_t grey)
{
 8017cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cb0:	ed2d 8b02 	vpush	{d8}
 8017cb4:	4616      	mov	r6, r2
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8017cb6:	4a59      	ldr	r2, [pc, #356]	; (8017e1c <GUI_Text_S_P_Measure+0x170>)
 8017cb8:	4f59      	ldr	r7, [pc, #356]	; (8017e20 <GUI_Text_S_P_Measure+0x174>)
{
 8017cba:	460c      	mov	r4, r1
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8017cbc:	7811      	ldrb	r1, [r2, #0]
 8017cbe:	4a59      	ldr	r2, [pc, #356]	; (8017e24 <GUI_Text_S_P_Measure+0x178>)
 8017cc0:	7812      	ldrb	r2, [r2, #0]
 8017cc2:	4291      	cmp	r1, r2
{
 8017cc4:	b086      	sub	sp, #24
		if(preGUI_screen_state != GUI_screen_state){old_nan_SP = 0;}
 8017cc6:	bf1c      	itt	ne
 8017cc8:	2200      	movne	r2, #0
 8017cca:	703a      	strbne	r2, [r7, #0]
	char buffer[9] = {0};
 8017ccc:	2200      	movs	r2, #0
{
 8017cce:	4605      	mov	r5, r0
 8017cd0:	eeb0 8a40 	vmov.f32	s16, s0
	char buffer[9] = {0};
 8017cd4:	9203      	str	r2, [sp, #12]
 8017cd6:	9204      	str	r2, [sp, #16]
 8017cd8:	f88d 2014 	strb.w	r2, [sp, #20]
	uint8_t	delta_pos = 100, number = 0;
	uint32_t dec = 10;
	
		if(nan) 
 8017cdc:	2e00      	cmp	r6, #0
 8017cde:	d04c      	beq.n	8017d7a <GUI_Text_S_P_Measure+0xce>
		{	
			if(!old_nan_SP){
 8017ce0:	783b      	ldrb	r3, [r7, #0]
 8017ce2:	bb33      	cbnz	r3, 8017d32 <GUI_Text_S_P_Measure+0x86>
				TFT_SetTextColor(TFT_White);
 8017ce4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017ce8:	f006 fd3e 	bl	801e768 <TFT_SetTextColor>
				TFT_SetBackColor(TFT_Black_Bkgr);
 8017cec:	2063      	movs	r0, #99	; 0x63
 8017cee:	f006 fd41 	bl	801e774 <TFT_SetBackColor>
				TFT_SetFont(&Font26EN_arch_digit);
 8017cf2:	484d      	ldr	r0, [pc, #308]	; (8017e28 <GUI_Text_S_P_Measure+0x17c>)
 8017cf4:	f006 fd32 	bl	801e75c <TFT_SetFont>
				TFT_FillRectangle(X+40, Y, X+250, Y+26, TFT_Black_Bkgr);
 8017cf8:	2163      	movs	r1, #99	; 0x63
 8017cfa:	f104 031a 	add.w	r3, r4, #26
 8017cfe:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 8017d02:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017d06:	9100      	str	r1, [sp, #0]
 8017d08:	b29b      	uxth	r3, r3
 8017d0a:	b292      	uxth	r2, r2
 8017d0c:	4621      	mov	r1, r4
 8017d0e:	b280      	uxth	r0, r0
 8017d10:	f006 fafb 	bl	801e30a <TFT_FillRectangle>
				buffer[0] = '-';buffer[1] = '-';
 8017d14:	232d      	movs	r3, #45	; 0x2d
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017d16:	f105 0075 	add.w	r0, r5, #117	; 0x75
				buffer[0] = '-';buffer[1] = '-';
 8017d1a:	f88d 300c 	strb.w	r3, [sp, #12]
 8017d1e:	f88d 300d 	strb.w	r3, [sp, #13]
				TFT_DisplayString(X+117, Y, (uint8_t *)buffer, LEFT_MODE);
 8017d22:	aa03      	add	r2, sp, #12
 8017d24:	2303      	movs	r3, #3
 8017d26:	4621      	mov	r1, r4
 8017d28:	b280      	uxth	r0, r0
 8017d2a:	f006 fe39 	bl	801e9a0 <TFT_DisplayString>
				old_nan_SP = 1;
 8017d2e:	2301      	movs	r3, #1
 8017d30:	703b      	strb	r3, [r7, #0]
	} 
	old_num_SP = number;

	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
}	
	TFT_SetTextColor(TFT_White);
 8017d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017d36:	f006 fd17 	bl	801e768 <TFT_SetTextColor>
	TFT_SetFont(&Font26EN_arch_digit);
	TFT_DrawChar(X+22, Y+2, '/');
 8017d3a:	3402      	adds	r4, #2
	TFT_SetFont(&Font26EN_arch_digit);
 8017d3c:	483a      	ldr	r0, [pc, #232]	; (8017e28 <GUI_Text_S_P_Measure+0x17c>)
 8017d3e:	f006 fd0d 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+22, Y+2, '/');
 8017d42:	b2a4      	uxth	r4, r4
 8017d44:	f105 0016 	add.w	r0, r5, #22
 8017d48:	4621      	mov	r1, r4
 8017d4a:	222f      	movs	r2, #47	; 0x2f
 8017d4c:	b280      	uxth	r0, r0
 8017d4e:	f006 fdcf 	bl	801e8f0 <TFT_DrawChar>
	
	TFT_SetFont(&Font26EN_arch_big);
 8017d52:	4836      	ldr	r0, [pc, #216]	; (8017e2c <GUI_Text_S_P_Measure+0x180>)
 8017d54:	f006 fd02 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y+2, 'S'-33);
 8017d58:	4621      	mov	r1, r4
 8017d5a:	4628      	mov	r0, r5
 8017d5c:	2232      	movs	r2, #50	; 0x32
 8017d5e:	f006 fdc7 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'P'-33);
 8017d62:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8017d66:	222f      	movs	r2, #47	; 0x2f
 8017d68:	4621      	mov	r1, r4
 8017d6a:	b280      	uxth	r0, r0
 8017d6c:	f006 fdc0 	bl	801e8f0 <TFT_DrawChar>
}
 8017d70:	b006      	add	sp, #24
 8017d72:	ecbd 8b02 	vpop	{d8}
 8017d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017d7a:	f249 41d2 	movw	r1, #38098	; 0x94d2
 8017d7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	bf18      	it	ne
 8017d86:	4608      	movne	r0, r1
	old_nan_SP = 0;
 8017d88:	703e      	strb	r6, [r7, #0]
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017d8a:	f006 fced 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017d8e:	2063      	movs	r0, #99	; 0x63
 8017d90:	f006 fcf0 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017d94:	4824      	ldr	r0, [pc, #144]	; (8017e28 <GUI_Text_S_P_Measure+0x17c>)
 8017d96:	f006 fce1 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%.4f", Value);
 8017d9a:	ee18 0a10 	vmov	r0, s16
 8017d9e:	f7e8 fbe3 	bl	8000568 <__aeabi_f2d>
 8017da2:	4602      	mov	r2, r0
 8017da4:	460b      	mov	r3, r1
 8017da6:	a803      	add	r0, sp, #12
 8017da8:	4921      	ldr	r1, [pc, #132]	; (8017e30 <GUI_Text_S_P_Measure+0x184>)
 8017daa:	f009 fff1 	bl	8021d90 <siprintf>
	uint32_t dec = 10;
 8017dae:	220a      	movs	r2, #10
	sprintf (buffer, "%.4f", Value);
 8017db0:	2304      	movs	r3, #4
	uint8_t	delta_pos = 100, number = 0;
 8017db2:	2764      	movs	r7, #100	; 0x64
		if((Value/(dec)) >= 1.0)
 8017db4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			dec *= 10;
 8017db8:	4611      	mov	r1, r2
		if((Value/(dec)) >= 1.0)
 8017dba:	ee07 2a10 	vmov	s14, r2
 8017dbe:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8017dc2:	ee88 7a26 	vdiv.f32	s14, s16, s13
 8017dc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017dce:	db04      	blt.n	8017dda <GUI_Text_S_P_Measure+0x12e>
			delta_pos-=23;
 8017dd0:	3f17      	subs	r7, #23
			number++;
 8017dd2:	3601      	adds	r6, #1
			dec *= 10;
 8017dd4:	434a      	muls	r2, r1
			delta_pos-=23;
 8017dd6:	b2ff      	uxtb	r7, r7
			number++;
 8017dd8:	b2f6      	uxtb	r6, r6
 8017dda:	3b01      	subs	r3, #1
	for (uint8_t i = 1; i <= 4; i++)
 8017ddc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8017de0:	d1eb      	bne.n	8017dba <GUI_Text_S_P_Measure+0x10e>
	if(number < old_num_SP )
 8017de2:	4b14      	ldr	r3, [pc, #80]	; (8017e34 <GUI_Text_S_P_Measure+0x188>)
 8017de4:	781a      	ldrb	r2, [r3, #0]
 8017de6:	42b2      	cmp	r2, r6
 8017de8:	4698      	mov	r8, r3
 8017dea:	d90d      	bls.n	8017e08 <GUI_Text_S_P_Measure+0x15c>
		TFT_FillRectangle(X+40, Y, X+197, Y+25, TFT_Black_Bkgr);
 8017dec:	2163      	movs	r1, #99	; 0x63
 8017dee:	f104 0319 	add.w	r3, r4, #25
 8017df2:	f105 02c5 	add.w	r2, r5, #197	; 0xc5
 8017df6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8017dfa:	9100      	str	r1, [sp, #0]
 8017dfc:	b29b      	uxth	r3, r3
 8017dfe:	b292      	uxth	r2, r2
 8017e00:	4621      	mov	r1, r4
 8017e02:	b280      	uxth	r0, r0
 8017e04:	f006 fa81 	bl	801e30a <TFT_FillRectangle>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017e08:	19e8      	adds	r0, r5, r7
 8017e0a:	2303      	movs	r3, #3
 8017e0c:	aa03      	add	r2, sp, #12
 8017e0e:	4621      	mov	r1, r4
 8017e10:	b280      	uxth	r0, r0
	old_num_SP = number;
 8017e12:	f888 6000 	strb.w	r6, [r8]
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8017e16:	f006 fdc3 	bl	801e9a0 <TFT_DisplayString>
 8017e1a:	e78a      	b.n	8017d32 <GUI_Text_S_P_Measure+0x86>
 8017e1c:	2000022a 	.word	0x2000022a
 8017e20:	20004cac 	.word	0x20004cac
 8017e24:	20004c71 	.word	0x20004c71
 8017e28:	200001f0 	.word	0x200001f0
 8017e2c:	200001e8 	.word	0x200001e8
 8017e30:	08031257 	.word	0x08031257
 8017e34:	20000243 	.word	0x20000243

08017e38 <GUI_Text_LAB_Measure>:

uint8_t old_num_L = 10, old_num_A = 10, old_num_B = 10, old_nan = 0;
void GUI_Text_LAB_Measure(uint16_t X, uint16_t Y, int16_t ValueL, int16_t ValueA, int16_t ValueB, uint8_t nan, uint8_t grey)
{
 8017e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e3c:	b089      	sub	sp, #36	; 0x24
 8017e3e:	461f      	mov	r7, r3
 8017e40:	f9bd 3048 	ldrsh.w	r3, [sp, #72]	; 0x48
 8017e44:	9304      	str	r3, [sp, #16]
 8017e46:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8017e4a:	9303      	str	r3, [sp, #12]
	char buffer[5] = {0};
	uint8_t	delta_pos = 180, sign = 0, number = 0;
	uint32_t dec = 10;
	
	if(ValueA <= -431 || nan){
 8017e4c:	f517 7fd7 	cmn.w	r7, #430	; 0x1ae
	char buffer[5] = {0};
 8017e50:	f04f 0300 	mov.w	r3, #0
{
 8017e54:	4604      	mov	r4, r0
 8017e56:	460d      	mov	r5, r1
 8017e58:	4690      	mov	r8, r2
	char buffer[5] = {0};
 8017e5a:	9306      	str	r3, [sp, #24]
 8017e5c:	f88d 301c 	strb.w	r3, [sp, #28]
	if(ValueA <= -431 || nan){
 8017e60:	db03      	blt.n	8017e6a <GUI_Text_LAB_Measure+0x32>
 8017e62:	9b03      	ldr	r3, [sp, #12]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	f000 80a9 	beq.w	8017fbc <GUI_Text_LAB_Measure+0x184>
		if(!old_nan){TFT_FillRectangle(X+40, Y, X+250, Y+95, TFT_Black_Bkgr);}
 8017e6a:	4b4e      	ldr	r3, [pc, #312]	; (8017fa4 <GUI_Text_LAB_Measure+0x16c>)
 8017e6c:	781a      	ldrb	r2, [r3, #0]
 8017e6e:	469a      	mov	sl, r3
 8017e70:	b96a      	cbnz	r2, 8017e8e <GUI_Text_LAB_Measure+0x56>
 8017e72:	2163      	movs	r1, #99	; 0x63
 8017e74:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 8017e78:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8017e7c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8017e80:	9100      	str	r1, [sp, #0]
 8017e82:	b29b      	uxth	r3, r3
 8017e84:	b292      	uxth	r2, r2
 8017e86:	4629      	mov	r1, r5
 8017e88:	b280      	uxth	r0, r0
 8017e8a:	f006 fa3e 	bl	801e30a <TFT_FillRectangle>
		TFT_SetTextColor(TFT_White);
 8017e8e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017e92:	f006 fc69 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8017e96:	f104 0987 	add.w	r9, r4, #135	; 0x87
		TFT_SetBackColor(TFT_Black_Bkgr);
 8017e9a:	2063      	movs	r0, #99	; 0x63
 8017e9c:	f006 fc6a 	bl	801e774 <TFT_SetBackColor>
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8017ea0:	fa1f f989 	uxth.w	r9, r9
 8017ea4:	4840      	ldr	r0, [pc, #256]	; (8017fa8 <GUI_Text_LAB_Measure+0x170>)
 8017ea6:	f104 08a0 	add.w	r8, r4, #160	; 0xa0
 8017eaa:	f006 fc57 	bl	801e75c <TFT_SetFont>
 8017eae:	fa1f f888 	uxth.w	r8, r8
 8017eb2:	222d      	movs	r2, #45	; 0x2d
 8017eb4:	4629      	mov	r1, r5
 8017eb6:	4648      	mov	r0, r9
 8017eb8:	f104 06b9 	add.w	r6, r4, #185	; 0xb9
 8017ebc:	f006 fd18 	bl	801e8f0 <TFT_DrawChar>
 8017ec0:	b2b6      	uxth	r6, r6
 8017ec2:	2220      	movs	r2, #32
 8017ec4:	4629      	mov	r1, r5
 8017ec6:	4640      	mov	r0, r8
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8017ec8:	f105 0723 	add.w	r7, r5, #35	; 0x23
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8017ecc:	f006 fd10 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8017ed0:	b2bf      	uxth	r7, r7
		TFT_SetFont(&Font26EN_arch_big);  TFT_DrawChar(X+135, Y, 'N'-33);TFT_DrawChar(X+160, Y, 'A'-33);TFT_DrawChar(X+185, Y, 'N'-33);
 8017ed2:	222d      	movs	r2, #45	; 0x2d
 8017ed4:	4629      	mov	r1, r5
 8017ed6:	4630      	mov	r0, r6
 8017ed8:	f006 fd0a 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8017edc:	4639      	mov	r1, r7
 8017ede:	222d      	movs	r2, #45	; 0x2d
 8017ee0:	4648      	mov	r0, r9
 8017ee2:	f006 fd05 	bl	801e8f0 <TFT_DrawChar>
 8017ee6:	4639      	mov	r1, r7
 8017ee8:	2220      	movs	r2, #32
 8017eea:	4640      	mov	r0, r8
 8017eec:	f006 fd00 	bl	801e8f0 <TFT_DrawChar>
 8017ef0:	4639      	mov	r1, r7
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8017ef2:	f105 0746 	add.w	r7, r5, #70	; 0x46
 8017ef6:	b2bf      	uxth	r7, r7
		TFT_DrawChar(X+135, Y+35, 'N'-33);TFT_DrawChar(X+160, Y+35, 'A'-33);TFT_DrawChar(X+185, Y+35, 'N'-33);
 8017ef8:	222d      	movs	r2, #45	; 0x2d
 8017efa:	4630      	mov	r0, r6
 8017efc:	f006 fcf8 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+135, Y+70, 'N'-33);TFT_DrawChar(X+160, Y+70, 'A'-33);TFT_DrawChar(X+185, Y+70, 'N'-33);
 8017f00:	222d      	movs	r2, #45	; 0x2d
 8017f02:	4639      	mov	r1, r7
 8017f04:	4648      	mov	r0, r9
 8017f06:	f006 fcf3 	bl	801e8f0 <TFT_DrawChar>
 8017f0a:	2220      	movs	r2, #32
 8017f0c:	4639      	mov	r1, r7
 8017f0e:	4640      	mov	r0, r8
 8017f10:	f006 fcee 	bl	801e8f0 <TFT_DrawChar>
 8017f14:	222d      	movs	r2, #45	; 0x2d
 8017f16:	4639      	mov	r1, r7
 8017f18:	4630      	mov	r0, r6
 8017f1a:	f006 fce9 	bl	801e8f0 <TFT_DrawChar>
		old_nan = 1;
 8017f1e:	2301      	movs	r3, #1
 8017f20:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
		old_nan = 0;
	} 
	
	if(preGUI_screen_state != GUI_screen_state || GUI_screen_state == Color_Screen){
 8017f24:	4b21      	ldr	r3, [pc, #132]	; (8017fac <GUI_Text_LAB_Measure+0x174>)
 8017f26:	781a      	ldrb	r2, [r3, #0]
 8017f28:	4b21      	ldr	r3, [pc, #132]	; (8017fb0 <GUI_Text_LAB_Measure+0x178>)
 8017f2a:	781b      	ldrb	r3, [r3, #0]
 8017f2c:	4293      	cmp	r3, r2
 8017f2e:	d101      	bne.n	8017f34 <GUI_Text_LAB_Measure+0xfc>
 8017f30:	2b05      	cmp	r3, #5
 8017f32:	d134      	bne.n	8017f9e <GUI_Text_LAB_Measure+0x166>
			TFT_SetTextColor(TFT_White);
 8017f34:	f64f 70ff 	movw	r0, #65535	; 0xffff
			TFT_SetFont(&Font26EN_arch_digit);
			TFT_DrawChar(X+17, Y, '*');
 8017f38:	f104 0611 	add.w	r6, r4, #17
			TFT_SetTextColor(TFT_White);
 8017f3c:	f006 fc14 	bl	801e768 <TFT_SetTextColor>
			TFT_DrawChar(X+17, Y, '*');
 8017f40:	b2b6      	uxth	r6, r6
			TFT_SetFont(&Font26EN_arch_digit);
 8017f42:	481c      	ldr	r0, [pc, #112]	; (8017fb4 <GUI_Text_LAB_Measure+0x17c>)
			TFT_DrawChar(X+17, Y+35, '*');
 8017f44:	f105 0823 	add.w	r8, r5, #35	; 0x23
			TFT_SetFont(&Font26EN_arch_digit);
 8017f48:	f006 fc08 	bl	801e75c <TFT_SetFont>
			TFT_DrawChar(X+17, Y+35, '*');
 8017f4c:	fa1f f888 	uxth.w	r8, r8
			TFT_DrawChar(X+17, Y, '*');
 8017f50:	222a      	movs	r2, #42	; 0x2a
 8017f52:	4629      	mov	r1, r5
 8017f54:	4630      	mov	r0, r6
			TFT_DrawChar(X+17, Y+70, '*');
 8017f56:	f105 0746 	add.w	r7, r5, #70	; 0x46
			TFT_DrawChar(X+17, Y, '*');
 8017f5a:	f006 fcc9 	bl	801e8f0 <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 8017f5e:	b2bf      	uxth	r7, r7
			TFT_DrawChar(X+17, Y+35, '*');
 8017f60:	222a      	movs	r2, #42	; 0x2a
 8017f62:	4641      	mov	r1, r8
 8017f64:	4630      	mov	r0, r6
 8017f66:	f006 fcc3 	bl	801e8f0 <TFT_DrawChar>
			TFT_DrawChar(X+17, Y+70, '*');
 8017f6a:	222a      	movs	r2, #42	; 0x2a
 8017f6c:	4639      	mov	r1, r7
 8017f6e:	4630      	mov	r0, r6
 8017f70:	f006 fcbe 	bl	801e8f0 <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_big);
 8017f74:	480c      	ldr	r0, [pc, #48]	; (8017fa8 <GUI_Text_LAB_Measure+0x170>)
 8017f76:	f006 fbf1 	bl	801e75c <TFT_SetFont>
			TFT_DrawChar(X, Y, 'L'-33);
 8017f7a:	222b      	movs	r2, #43	; 0x2b
 8017f7c:	4629      	mov	r1, r5
 8017f7e:	4620      	mov	r0, r4
 8017f80:	f006 fcb6 	bl	801e8f0 <TFT_DrawChar>
			TFT_SetFont(&Font26EN_arch_small);
 8017f84:	480c      	ldr	r0, [pc, #48]	; (8017fb8 <GUI_Text_LAB_Measure+0x180>)
 8017f86:	f006 fbe9 	bl	801e75c <TFT_SetFont>
			TFT_DrawChar(X, Y+35, 'a'-65);
 8017f8a:	2220      	movs	r2, #32
 8017f8c:	4641      	mov	r1, r8
 8017f8e:	4620      	mov	r0, r4
 8017f90:	f006 fcae 	bl	801e8f0 <TFT_DrawChar>
			TFT_DrawChar(X, Y+70, 'b'-65);}
 8017f94:	2221      	movs	r2, #33	; 0x21
 8017f96:	4639      	mov	r1, r7
 8017f98:	4620      	mov	r0, r4
 8017f9a:	f006 fca9 	bl	801e8f0 <TFT_DrawChar>
}	
 8017f9e:	b009      	add	sp, #36	; 0x24
 8017fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017fa4:	20004ca1 	.word	0x20004ca1
 8017fa8:	200001e8 	.word	0x200001e8
 8017fac:	2000022a 	.word	0x2000022a
 8017fb0:	20004c71 	.word	0x20004c71
 8017fb4:	200001f0 	.word	0x200001f0
 8017fb8:	200001f8 	.word	0x200001f8
	TFT_SetTextColor(grey ? TFT_Grey : TFT_White);
 8017fbc:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8017fc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017fc4:	f249 42d2 	movw	r2, #38098	; 0x94d2
 8017fc8:	2800      	cmp	r0, #0
 8017fca:	bf14      	ite	ne
 8017fcc:	4610      	movne	r0, r2
 8017fce:	4618      	moveq	r0, r3
 8017fd0:	f006 fbca 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8017fd4:	2063      	movs	r0, #99	; 0x63
 8017fd6:	f006 fbcd 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_digit);
 8017fda:	488e      	ldr	r0, [pc, #568]	; (8018214 <GUI_Text_LAB_Measure+0x3dc>)
 8017fdc:	f006 fbbe 	bl	801e75c <TFT_SetFont>
	if(ValueL < 0){ValueL *= -1; sign = 1;}
 8017fe0:	f1b8 0f00 	cmp.w	r8, #0
 8017fe4:	bfbd      	ittte	lt
 8017fe6:	f1c8 0800 	rsblt	r8, r8, #0
 8017fea:	fa0f f888 	sxthlt.w	r8, r8
 8017fee:	2301      	movlt	r3, #1
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8017ff0:	9b03      	ldrge	r3, [sp, #12]
	sprintf (buffer, "%d", ValueL);
 8017ff2:	4989      	ldr	r1, [pc, #548]	; (8018218 <GUI_Text_LAB_Measure+0x3e0>)
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8017ff4:	9305      	str	r3, [sp, #20]
	sprintf (buffer, "%d", ValueL);
 8017ff6:	4642      	mov	r2, r8
 8017ff8:	a806      	add	r0, sp, #24
 8017ffa:	f009 fec9 	bl	8021d90 <siprintf>
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 8017ffe:	f04f 0900 	mov.w	r9, #0
	sprintf (buffer, "%d", ValueL);
 8018002:	f04f 0b04 	mov.w	fp, #4
	uint32_t dec = 10;
 8018006:	f04f 0a0a 	mov.w	sl, #10
	uint8_t	delta_pos = 180, sign = 0, number = 0;
 801800a:	26b4      	movs	r6, #180	; 0xb4
		if((ValueL/(dec)) >= 1.0)
 801800c:	fbb8 f0fa 	udiv	r0, r8, sl
 8018010:	f7e8 fa88 	bl	8000524 <__aeabi_ui2d>
 8018014:	2200      	movs	r2, #0
 8018016:	4b81      	ldr	r3, [pc, #516]	; (801821c <GUI_Text_LAB_Measure+0x3e4>)
 8018018:	f7e8 fd80 	bl	8000b1c <__aeabi_dcmpge>
 801801c:	b140      	cbz	r0, 8018030 <GUI_Text_LAB_Measure+0x1f8>
			dec *= 10;
 801801e:	230a      	movs	r3, #10
			delta_pos-=23;
 8018020:	3e17      	subs	r6, #23
			number++;
 8018022:	f109 0901 	add.w	r9, r9, #1
			dec *= 10;
 8018026:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 801802a:	b2f6      	uxtb	r6, r6
			number++;
 801802c:	fa5f f989 	uxtb.w	r9, r9
 8018030:	f10b 3bff 	add.w	fp, fp, #4294967295
	for (uint8_t i = 1; i <= 4; i++)
 8018034:	f01b 0bff 	ands.w	fp, fp, #255	; 0xff
 8018038:	d1e8      	bne.n	801800c <GUI_Text_LAB_Measure+0x1d4>
	if(number < old_num_L || old_nan == 1 )
 801803a:	4b79      	ldr	r3, [pc, #484]	; (8018220 <GUI_Text_LAB_Measure+0x3e8>)
 801803c:	781a      	ldrb	r2, [r3, #0]
 801803e:	454a      	cmp	r2, r9
 8018040:	4698      	mov	r8, r3
 8018042:	d803      	bhi.n	801804c <GUI_Text_LAB_Measure+0x214>
 8018044:	4b77      	ldr	r3, [pc, #476]	; (8018224 <GUI_Text_LAB_Measure+0x3ec>)
 8018046:	781b      	ldrb	r3, [r3, #0]
 8018048:	2b01      	cmp	r3, #1
 801804a:	d10d      	bne.n	8018068 <GUI_Text_LAB_Measure+0x230>
		TFT_FillRectangle(X+40, Y, X+250, Y+25, TFT_Black_Bkgr);
 801804c:	2163      	movs	r1, #99	; 0x63
 801804e:	f105 0319 	add.w	r3, r5, #25
 8018052:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 8018056:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801805a:	9100      	str	r1, [sp, #0]
 801805c:	b29b      	uxth	r3, r3
 801805e:	b292      	uxth	r2, r2
 8018060:	4629      	mov	r1, r5
 8018062:	b280      	uxth	r0, r0
 8018064:	f006 f951 	bl	801e30a <TFT_FillRectangle>
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 8018068:	9b05      	ldr	r3, [sp, #20]
	old_num_L = number;
 801806a:	f888 9000 	strb.w	r9, [r8]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y, '-'); sign = 0;}
 801806e:	b13b      	cbz	r3, 8018080 <GUI_Text_LAB_Measure+0x248>
 8018070:	f1a4 0012 	sub.w	r0, r4, #18
 8018074:	4430      	add	r0, r6
 8018076:	222d      	movs	r2, #45	; 0x2d
 8018078:	4629      	mov	r1, r5
 801807a:	b280      	uxth	r0, r0
 801807c:	f006 fc38 	bl	801e8f0 <TFT_DrawChar>
	TFT_DisplayString(X+delta_pos, Y, (uint8_t *)buffer, LEFT_MODE);
 8018080:	19a0      	adds	r0, r4, r6
 8018082:	2303      	movs	r3, #3
 8018084:	aa06      	add	r2, sp, #24
 8018086:	4629      	mov	r1, r5
 8018088:	b280      	uxth	r0, r0
 801808a:	f006 fc89 	bl	801e9a0 <TFT_DisplayString>
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 801808e:	2f00      	cmp	r7, #0
 8018090:	bfbc      	itt	lt
 8018092:	427f      	neglt	r7, r7
 8018094:	b23f      	sxthlt	r7, r7
	TFT_SetFont(&Font26EN_arch_digit);
 8018096:	485f      	ldr	r0, [pc, #380]	; (8018214 <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueA < 0){ValueA *= -1; sign = 1;}
 8018098:	bfb4      	ite	lt
 801809a:	f04f 0b01 	movlt.w	fp, #1
 801809e:	f04f 0b00 	movge.w	fp, #0
	TFT_SetFont(&Font26EN_arch_digit);
 80180a2:	f006 fb5b 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%d", ValueA);
 80180a6:	463a      	mov	r2, r7
 80180a8:	495b      	ldr	r1, [pc, #364]	; (8018218 <GUI_Text_LAB_Measure+0x3e0>)
 80180aa:	a806      	add	r0, sp, #24
 80180ac:	f009 fe70 	bl	8021d90 <siprintf>
	number = 0;
 80180b0:	f04f 0800 	mov.w	r8, #0
	sprintf (buffer, "%d", ValueA);
 80180b4:	f04f 0904 	mov.w	r9, #4
	dec = 10;
 80180b8:	f04f 0a0a 	mov.w	sl, #10
	delta_pos = 180;
 80180bc:	26b4      	movs	r6, #180	; 0xb4
		if((ValueA/(dec)) >= 1.0)
 80180be:	fbb7 f0fa 	udiv	r0, r7, sl
 80180c2:	f7e8 fa2f 	bl	8000524 <__aeabi_ui2d>
 80180c6:	2200      	movs	r2, #0
 80180c8:	4b54      	ldr	r3, [pc, #336]	; (801821c <GUI_Text_LAB_Measure+0x3e4>)
 80180ca:	f7e8 fd27 	bl	8000b1c <__aeabi_dcmpge>
 80180ce:	b140      	cbz	r0, 80180e2 <GUI_Text_LAB_Measure+0x2aa>
			dec *= 10;
 80180d0:	230a      	movs	r3, #10
			delta_pos-=23;
 80180d2:	3e17      	subs	r6, #23
			number++;
 80180d4:	f108 0801 	add.w	r8, r8, #1
			dec *= 10;
 80180d8:	fb03 fa0a 	mul.w	sl, r3, sl
			delta_pos-=23;
 80180dc:	b2f6      	uxtb	r6, r6
			number++;
 80180de:	fa5f f888 	uxtb.w	r8, r8
 80180e2:	f109 39ff 	add.w	r9, r9, #4294967295
		for (uint8_t i = 1; i <= 4; i++)
 80180e6:	f019 09ff 	ands.w	r9, r9, #255	; 0xff
 80180ea:	d1e8      	bne.n	80180be <GUI_Text_LAB_Measure+0x286>
	if(number < old_num_A || old_nan == 1 )
 80180ec:	4b4e      	ldr	r3, [pc, #312]	; (8018228 <GUI_Text_LAB_Measure+0x3f0>)
 80180ee:	781b      	ldrb	r3, [r3, #0]
 80180f0:	4543      	cmp	r3, r8
 80180f2:	f105 0723 	add.w	r7, r5, #35	; 0x23
 80180f6:	d803      	bhi.n	8018100 <GUI_Text_LAB_Measure+0x2c8>
 80180f8:	4b4a      	ldr	r3, [pc, #296]	; (8018224 <GUI_Text_LAB_Measure+0x3ec>)
 80180fa:	781b      	ldrb	r3, [r3, #0]
 80180fc:	2b01      	cmp	r3, #1
 80180fe:	d10d      	bne.n	801811c <GUI_Text_LAB_Measure+0x2e4>
		TFT_FillRectangle(X+40, Y+35, X+250, Y+62, TFT_Black_Bkgr);
 8018100:	2163      	movs	r1, #99	; 0x63
 8018102:	f105 033e 	add.w	r3, r5, #62	; 0x3e
 8018106:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 801810a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801810e:	9100      	str	r1, [sp, #0]
 8018110:	b29b      	uxth	r3, r3
 8018112:	b292      	uxth	r2, r2
 8018114:	b2b9      	uxth	r1, r7
 8018116:	b280      	uxth	r0, r0
 8018118:	f006 f8f7 	bl	801e30a <TFT_FillRectangle>
	old_num_A = number;
 801811c:	4b42      	ldr	r3, [pc, #264]	; (8018228 <GUI_Text_LAB_Measure+0x3f0>)
 801811e:	f883 8000 	strb.w	r8, [r3]
	if(sign){TFT_DrawChar(X+delta_pos-18, Y+35, '-'); sign = 0;}
 8018122:	f1bb 0f00 	cmp.w	fp, #0
 8018126:	d007      	beq.n	8018138 <GUI_Text_LAB_Measure+0x300>
 8018128:	f1a4 0012 	sub.w	r0, r4, #18
 801812c:	4430      	add	r0, r6
 801812e:	222d      	movs	r2, #45	; 0x2d
 8018130:	b2b9      	uxth	r1, r7
 8018132:	b280      	uxth	r0, r0
 8018134:	f006 fbdc 	bl	801e8f0 <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+35, (uint8_t *)buffer, LEFT_MODE);
 8018138:	19a0      	adds	r0, r4, r6
 801813a:	b2b9      	uxth	r1, r7
 801813c:	aa06      	add	r2, sp, #24
 801813e:	2303      	movs	r3, #3
 8018140:	b280      	uxth	r0, r0
 8018142:	f006 fc2d 	bl	801e9a0 <TFT_DisplayString>
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 8018146:	9b04      	ldr	r3, [sp, #16]
	TFT_SetFont(&Font26EN_arch_digit);
 8018148:	4832      	ldr	r0, [pc, #200]	; (8018214 <GUI_Text_LAB_Measure+0x3dc>)
	if(ValueB < 0){ValueB *= -1; sign = 1;}
 801814a:	2b00      	cmp	r3, #0
 801814c:	bfbf      	itttt	lt
 801814e:	425b      	neglt	r3, r3
 8018150:	b21b      	sxthlt	r3, r3
 8018152:	9304      	strlt	r3, [sp, #16]
 8018154:	f04f 0901 	movlt.w	r9, #1
 8018158:	bfa8      	it	ge
 801815a:	f04f 0900 	movge.w	r9, #0
	TFT_SetFont(&Font26EN_arch_digit);
 801815e:	f006 fafd 	bl	801e75c <TFT_SetFont>
	sprintf (buffer, "%d", ValueB);
 8018162:	9a04      	ldr	r2, [sp, #16]
 8018164:	492c      	ldr	r1, [pc, #176]	; (8018218 <GUI_Text_LAB_Measure+0x3e0>)
 8018166:	a806      	add	r0, sp, #24
 8018168:	f009 fe12 	bl	8021d90 <siprintf>
	 dec = 10;
 801816c:	f04f 080a 	mov.w	r8, #10
	sprintf (buffer, "%d", ValueB);
 8018170:	2704      	movs	r7, #4
		delta_pos = 180;
 8018172:	26b4      	movs	r6, #180	; 0xb4
			dec *= 10;
 8018174:	46c2      	mov	sl, r8
		if(abs((ValueB/(dec))) >= 1.0)
 8018176:	9b04      	ldr	r3, [sp, #16]
 8018178:	fbb3 f0f8 	udiv	r0, r3, r8
 801817c:	2800      	cmp	r0, #0
 801817e:	bfb8      	it	lt
 8018180:	4240      	neglt	r0, r0
 8018182:	f7e8 f9df 	bl	8000544 <__aeabi_i2d>
 8018186:	2200      	movs	r2, #0
 8018188:	4b24      	ldr	r3, [pc, #144]	; (801821c <GUI_Text_LAB_Measure+0x3e4>)
 801818a:	f7e8 fcc7 	bl	8000b1c <__aeabi_dcmpge>
 801818e:	b138      	cbz	r0, 80181a0 <GUI_Text_LAB_Measure+0x368>
			number++;
 8018190:	9b03      	ldr	r3, [sp, #12]
 8018192:	3301      	adds	r3, #1
			delta_pos-=23;
 8018194:	3e17      	subs	r6, #23
			number++;
 8018196:	b2db      	uxtb	r3, r3
			dec *= 10;
 8018198:	fb0a f808 	mul.w	r8, sl, r8
			delta_pos-=23;
 801819c:	b2f6      	uxtb	r6, r6
			number++;
 801819e:	9303      	str	r3, [sp, #12]
 80181a0:	3f01      	subs	r7, #1
	for (uint8_t i = 1; i <= 4; i++)
 80181a2:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
 80181a6:	d1e6      	bne.n	8018176 <GUI_Text_LAB_Measure+0x33e>
	if(number < old_num_B || old_nan == 1)
 80181a8:	4b20      	ldr	r3, [pc, #128]	; (801822c <GUI_Text_LAB_Measure+0x3f4>)
 80181aa:	9903      	ldr	r1, [sp, #12]
 80181ac:	781a      	ldrb	r2, [r3, #0]
 80181ae:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8018224 <GUI_Text_LAB_Measure+0x3ec>
 80181b2:	428a      	cmp	r2, r1
 80181b4:	f105 0746 	add.w	r7, r5, #70	; 0x46
 80181b8:	469a      	mov	sl, r3
 80181ba:	d803      	bhi.n	80181c4 <GUI_Text_LAB_Measure+0x38c>
 80181bc:	f898 3000 	ldrb.w	r3, [r8]
 80181c0:	2b01      	cmp	r3, #1
 80181c2:	d10d      	bne.n	80181e0 <GUI_Text_LAB_Measure+0x3a8>
		TFT_FillRectangle(X+40, Y+70, X+250, Y+95, TFT_Black_Bkgr);
 80181c4:	2163      	movs	r1, #99	; 0x63
 80181c6:	f105 035f 	add.w	r3, r5, #95	; 0x5f
 80181ca:	f104 02fa 	add.w	r2, r4, #250	; 0xfa
 80181ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80181d2:	9100      	str	r1, [sp, #0]
 80181d4:	b29b      	uxth	r3, r3
 80181d6:	b292      	uxth	r2, r2
 80181d8:	b2b9      	uxth	r1, r7
 80181da:	b280      	uxth	r0, r0
 80181dc:	f006 f895 	bl	801e30a <TFT_FillRectangle>
	old_num_B = number;
 80181e0:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80181e4:	f88a 3000 	strb.w	r3, [sl]
		if(sign){TFT_DrawChar(X+delta_pos-18, Y+70, '-'); sign = 0;}
 80181e8:	f1b9 0f00 	cmp.w	r9, #0
 80181ec:	d007      	beq.n	80181fe <GUI_Text_LAB_Measure+0x3c6>
 80181ee:	f1a4 0012 	sub.w	r0, r4, #18
 80181f2:	4430      	add	r0, r6
 80181f4:	222d      	movs	r2, #45	; 0x2d
 80181f6:	b2b9      	uxth	r1, r7
 80181f8:	b280      	uxth	r0, r0
 80181fa:	f006 fb79 	bl	801e8f0 <TFT_DrawChar>
			TFT_DisplayString(X+delta_pos, Y+70, (uint8_t *)buffer, LEFT_MODE);
 80181fe:	19a0      	adds	r0, r4, r6
 8018200:	2303      	movs	r3, #3
 8018202:	aa06      	add	r2, sp, #24
 8018204:	b2b9      	uxth	r1, r7
 8018206:	b280      	uxth	r0, r0
 8018208:	f006 fbca 	bl	801e9a0 <TFT_DisplayString>
		old_nan = 0;
 801820c:	2300      	movs	r3, #0
 801820e:	f888 3000 	strb.w	r3, [r8]
 8018212:	e687      	b.n	8017f24 <GUI_Text_LAB_Measure+0xec>
 8018214:	200001f0 	.word	0x200001f0
 8018218:	08024471 	.word	0x08024471
 801821c:	3ff00000 	.word	0x3ff00000
 8018220:	20000240 	.word	0x20000240
 8018224:	20004ca1 	.word	0x20004ca1
 8018228:	2000023c 	.word	0x2000023c
 801822c:	2000023d 	.word	0x2000023d

08018230 <GUI_Battery_Level>:
			

			

void GUI_Battery_Level(uint16_t X, uint16_t Y, double charge)
{
 8018230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018234:	b085      	sub	sp, #20
	char buffer[5] = {0};
 8018236:	2300      	movs	r3, #0
	
	
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8018238:	f100 082d 	add.w	r8, r0, #45	; 0x2d
{
 801823c:	460c      	mov	r4, r1
 801823e:	4605      	mov	r5, r0
	char buffer[5] = {0};
 8018240:	9302      	str	r3, [sp, #8]
 8018242:	f88d 300c 	strb.w	r3, [sp, #12]
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8018246:	fa1f f888 	uxth.w	r8, r8
 801824a:	f101 031a 	add.w	r3, r1, #26
 801824e:	f241 3976 	movw	r9, #4982	; 0x1376
 8018252:	310a      	adds	r1, #10
 8018254:	300a      	adds	r0, #10
 8018256:	b29b      	uxth	r3, r3
 8018258:	4642      	mov	r2, r8
 801825a:	b289      	uxth	r1, r1
 801825c:	b280      	uxth	r0, r0
 801825e:	f8cd 9000 	str.w	r9, [sp]
{
 8018262:	ec57 6b10 	vmov	r6, r7, d0
	TFT_FillRectangle(X+10, Y+10, X+45, Y+26, TFT_Blue_Off); // big battery rect
 8018266:	f006 f850 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(X+45, Y+15, X+48, Y+20, TFT_Blue_Off); //small battery rect
 801826a:	f104 0314 	add.w	r3, r4, #20
 801826e:	f105 0230 	add.w	r2, r5, #48	; 0x30
 8018272:	f104 010f 	add.w	r1, r4, #15
 8018276:	b29b      	uxth	r3, r3
 8018278:	b292      	uxth	r2, r2
 801827a:	b289      	uxth	r1, r1
 801827c:	4640      	mov	r0, r8
 801827e:	f8cd 9000 	str.w	r9, [sp]
 8018282:	f006 f842 	bl	801e30a <TFT_FillRectangle>

		if(charge < 12)
 8018286:	2200      	movs	r2, #0
 8018288:	4b4c      	ldr	r3, [pc, #304]	; (80183bc <GUI_Battery_Level+0x18c>)
 801828a:	4630      	mov	r0, r6
 801828c:	4639      	mov	r1, r7
 801828e:	f7e8 fc31 	bl	8000af4 <__aeabi_dcmplt>
 8018292:	b188      	cbz	r0, 80182b8 <GUI_Battery_Level+0x88>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_Red);
 8018294:	f104 0318 	add.w	r3, r4, #24
 8018298:	f105 0213 	add.w	r2, r5, #19
 801829c:	f104 010c 	add.w	r1, r4, #12
 80182a0:	f105 000f 	add.w	r0, r5, #15
 80182a4:	f44f 4e78 	mov.w	lr, #63488	; 0xf800
 80182a8:	f8cd e000 	str.w	lr, [sp]
 80182ac:	b29b      	uxth	r3, r3
 80182ae:	b292      	uxth	r2, r2
 80182b0:	b289      	uxth	r1, r1
 80182b2:	b280      	uxth	r0, r0
 80182b4:	f006 f829 	bl	801e30a <TFT_FillRectangle>
		}		
		if(charge >= 12)
 80182b8:	2200      	movs	r2, #0
 80182ba:	4b40      	ldr	r3, [pc, #256]	; (80183bc <GUI_Battery_Level+0x18c>)
 80182bc:	4630      	mov	r0, r6
 80182be:	4639      	mov	r1, r7
 80182c0:	f7e8 fc2c 	bl	8000b1c <__aeabi_dcmpge>
 80182c4:	b188      	cbz	r0, 80182ea <GUI_Battery_Level+0xba>
		{
			TFT_FillRectangle(X+15, Y+12, X+19, Y+24, TFT_White);
 80182c6:	f104 0318 	add.w	r3, r4, #24
 80182ca:	f105 0213 	add.w	r2, r5, #19
 80182ce:	f104 010c 	add.w	r1, r4, #12
 80182d2:	f105 000f 	add.w	r0, r5, #15
 80182d6:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80182da:	f8cd e000 	str.w	lr, [sp]
 80182de:	b29b      	uxth	r3, r3
 80182e0:	b292      	uxth	r2, r2
 80182e2:	b289      	uxth	r1, r1
 80182e4:	b280      	uxth	r0, r0
 80182e6:	f006 f810 	bl	801e30a <TFT_FillRectangle>
		}		
		if(charge >= 25)
 80182ea:	2200      	movs	r2, #0
 80182ec:	4b34      	ldr	r3, [pc, #208]	; (80183c0 <GUI_Battery_Level+0x190>)
 80182ee:	4630      	mov	r0, r6
 80182f0:	4639      	mov	r1, r7
 80182f2:	f7e8 fc13 	bl	8000b1c <__aeabi_dcmpge>
 80182f6:	b188      	cbz	r0, 801831c <GUI_Battery_Level+0xec>
		{
			TFT_FillRectangle(X+22, Y+12, X+26, Y+24, TFT_White);
 80182f8:	f104 0318 	add.w	r3, r4, #24
 80182fc:	f105 021a 	add.w	r2, r5, #26
 8018300:	f104 010c 	add.w	r1, r4, #12
 8018304:	f105 0016 	add.w	r0, r5, #22
 8018308:	f64f 7eff 	movw	lr, #65535	; 0xffff
 801830c:	f8cd e000 	str.w	lr, [sp]
 8018310:	b29b      	uxth	r3, r3
 8018312:	b292      	uxth	r2, r2
 8018314:	b289      	uxth	r1, r1
 8018316:	b280      	uxth	r0, r0
 8018318:	f005 fff7 	bl	801e30a <TFT_FillRectangle>
		}		
		if(charge >= 50)
 801831c:	2200      	movs	r2, #0
 801831e:	4b29      	ldr	r3, [pc, #164]	; (80183c4 <GUI_Battery_Level+0x194>)
 8018320:	4630      	mov	r0, r6
 8018322:	4639      	mov	r1, r7
 8018324:	f7e8 fbfa 	bl	8000b1c <__aeabi_dcmpge>
 8018328:	b188      	cbz	r0, 801834e <GUI_Battery_Level+0x11e>
		{
			TFT_FillRectangle(X+29, Y+12, X+33, Y+24, TFT_White);
 801832a:	f104 0318 	add.w	r3, r4, #24
 801832e:	f105 0221 	add.w	r2, r5, #33	; 0x21
 8018332:	f104 010c 	add.w	r1, r4, #12
 8018336:	f105 001d 	add.w	r0, r5, #29
 801833a:	f64f 7eff 	movw	lr, #65535	; 0xffff
 801833e:	f8cd e000 	str.w	lr, [sp]
 8018342:	b29b      	uxth	r3, r3
 8018344:	b292      	uxth	r2, r2
 8018346:	b289      	uxth	r1, r1
 8018348:	b280      	uxth	r0, r0
 801834a:	f005 ffde 	bl	801e30a <TFT_FillRectangle>
		}
		if(charge >= 85)
 801834e:	2200      	movs	r2, #0
 8018350:	4b1d      	ldr	r3, [pc, #116]	; (80183c8 <GUI_Battery_Level+0x198>)
 8018352:	4630      	mov	r0, r6
 8018354:	4639      	mov	r1, r7
 8018356:	f7e8 fbe1 	bl	8000b1c <__aeabi_dcmpge>
 801835a:	b188      	cbz	r0, 8018380 <GUI_Battery_Level+0x150>
		{
			TFT_FillRectangle(X+36, Y+12, X+40, Y+24, TFT_White);
 801835c:	f104 0318 	add.w	r3, r4, #24
 8018360:	f105 0228 	add.w	r2, r5, #40	; 0x28
 8018364:	f104 010c 	add.w	r1, r4, #12
 8018368:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801836c:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8018370:	f8cd e000 	str.w	lr, [sp]
 8018374:	b29b      	uxth	r3, r3
 8018376:	b292      	uxth	r2, r2
 8018378:	b289      	uxth	r1, r1
 801837a:	b280      	uxth	r0, r0
 801837c:	f005 ffc5 	bl	801e30a <TFT_FillRectangle>
		}
		
		sprintf (buffer, "%.1f%%", charge);
 8018380:	4632      	mov	r2, r6
 8018382:	463b      	mov	r3, r7
 8018384:	4911      	ldr	r1, [pc, #68]	; (80183cc <GUI_Battery_Level+0x19c>)
 8018386:	a802      	add	r0, sp, #8
 8018388:	f009 fd02 	bl	8021d90 <siprintf>
		TFT_SetFont(&Font8);
 801838c:	4810      	ldr	r0, [pc, #64]	; (80183d0 <GUI_Battery_Level+0x1a0>)
 801838e:	f006 f9e5 	bl	801e75c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 8018392:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8018396:	f006 f9e7 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801839a:	2063      	movs	r0, #99	; 0x63
 801839c:	f006 f9ea 	bl	801e774 <TFT_SetBackColor>
		TFT_DisplayString(X+52, Y+14, (uint8_t *)buffer, LEFT_MODE);
 80183a0:	f104 010e 	add.w	r1, r4, #14
 80183a4:	f105 0034 	add.w	r0, r5, #52	; 0x34
 80183a8:	2303      	movs	r3, #3
 80183aa:	aa02      	add	r2, sp, #8
 80183ac:	b289      	uxth	r1, r1
 80183ae:	b280      	uxth	r0, r0
 80183b0:	f006 faf6 	bl	801e9a0 <TFT_DisplayString>

}
 80183b4:	b005      	add	sp, #20
 80183b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183ba:	bf00      	nop
 80183bc:	40280000 	.word	0x40280000
 80183c0:	40390000 	.word	0x40390000
 80183c4:	40490000 	.word	0x40490000
 80183c8:	40554000 	.word	0x40554000
 80183cc:	08031246 	.word	0x08031246
 80183d0:	20000218 	.word	0x20000218

080183d4 <GUI_Axes_Locus_XY>:

void GUI_Axes_Locus_XY(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 80183d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80183d6:	1e86      	subs	r6, r0, #2
{
 80183d8:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80183da:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80183de:	b2b6      	uxth	r6, r6
 80183e0:	39fa      	subs	r1, #250	; 0xfa
{
 80183e2:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-XY2_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80183e4:	4623      	mov	r3, r4
 80183e6:	4602      	mov	r2, r0
 80183e8:	9700      	str	r7, [sp, #0]
 80183ea:	4630      	mov	r0, r6
 80183ec:	b289      	uxth	r1, r1
 80183ee:	f005 ff8c 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+XY2_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 80183f2:	1ce3      	adds	r3, r4, #3
 80183f4:	f105 02d8 	add.w	r2, r5, #216	; 0xd8
 80183f8:	1c61      	adds	r1, r4, #1
 80183fa:	4630      	mov	r0, r6
 80183fc:	9700      	str	r7, [sp, #0]
 80183fe:	b29b      	uxth	r3, r3
 8018400:	b292      	uxth	r2, r2
 8018402:	b289      	uxth	r1, r1
 8018404:	f005 ff81 	bl	801e30a <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-300/2, X_center+3, Y_center-300/2, TFT_White);
 8018408:	f1a4 0396 	sub.w	r3, r4, #150	; 0x96
 801840c:	b29b      	uxth	r3, r3
 801840e:	1cea      	adds	r2, r5, #3
 8018410:	1f68      	subs	r0, r5, #5
 8018412:	4619      	mov	r1, r3
 8018414:	9700      	str	r7, [sp, #0]
 8018416:	b292      	uxth	r2, r2
 8018418:	b280      	uxth	r0, r0
 801841a:	f005 ff19 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(X_center+295/2, Y_center-3, X_center+295/2, Y_center+6, TFT_White);
 801841e:	1da6      	adds	r6, r4, #6
 8018420:	f105 0293 	add.w	r2, r5, #147	; 0x93
 8018424:	b292      	uxth	r2, r2
 8018426:	b2b6      	uxth	r6, r6
 8018428:	1ee1      	subs	r1, r4, #3
 801842a:	4633      	mov	r3, r6
 801842c:	4610      	mov	r0, r2
 801842e:	b289      	uxth	r1, r1
 8018430:	9700      	str	r7, [sp, #0]
 8018432:	f005 ff0d 	bl	801e250 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 8018436:	4819      	ldr	r0, [pc, #100]	; (801849c <GUI_Axes_Locus_XY+0xc8>)
 8018438:	f006 f990 	bl	801e75c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 801843c:	3c98      	subs	r4, #152	; 0x98
		TFT_SetTextColor(TFT_White);
 801843e:	4638      	mov	r0, r7
 8018440:	f006 f992 	bl	801e768 <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 8018444:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 8018446:	2063      	movs	r0, #99	; 0x63
 8018448:	f006 f994 	bl	801e774 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-300/2-2, '.');
 801844c:	4621      	mov	r1, r4
 801844e:	222e      	movs	r2, #46	; 0x2e
 8018450:	2004      	movs	r0, #4
 8018452:	f006 fa4d 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-300/2-2, '0');
 8018456:	4621      	mov	r1, r4
 8018458:	2230      	movs	r2, #48	; 0x30
 801845a:	2000      	movs	r0, #0
 801845c:	f006 fa48 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-300/2-2, '5');
 8018460:	4621      	mov	r1, r4
 8018462:	2235      	movs	r2, #53	; 0x35
 8018464:	2008      	movs	r0, #8
 8018466:	f006 fa43 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+295/2-6+4,  Y_center+6, '.');
 801846a:	f105 0091 	add.w	r0, r5, #145	; 0x91
 801846e:	4631      	mov	r1, r6
 8018470:	222e      	movs	r2, #46	; 0x2e
 8018472:	b280      	uxth	r0, r0
 8018474:	f006 fa3c 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+0,  Y_center+6, '0');
 8018478:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 801847c:	4631      	mov	r1, r6
 801847e:	2230      	movs	r2, #48	; 0x30
 8018480:	b280      	uxth	r0, r0
 8018482:	f006 fa35 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 8018486:	f105 0095 	add.w	r0, r5, #149	; 0x95
 801848a:	2235      	movs	r2, #53	; 0x35
 801848c:	4631      	mov	r1, r6
 801848e:	b280      	uxth	r0, r0
}
 8018490:	b003      	add	sp, #12
 8018492:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+295/2-6+8,  Y_center+6, '5');
 8018496:	f006 ba2b 	b.w	801e8f0 <TFT_DrawChar>
 801849a:	bf00      	nop
 801849c:	20000210 	.word	0x20000210

080184a0 <GUI_Axes_Locus_LUV>:

void GUI_Axes_Locus_LUV(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 80184a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80184a2:	1e86      	subs	r6, r0, #2
{
 80184a4:	460c      	mov	r4, r1
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80184a6:	f64f 77ff 	movw	r7, #65535	; 0xffff
 80184aa:	b2b6      	uxth	r6, r6
 80184ac:	39ea      	subs	r1, #234	; 0xea
{
 80184ae:	4605      	mov	r5, r0
		TFT_FillRectangle(X_center-2, Y_center-LUV_LOCUS_BMP_SIZEY, X_center, Y_center, TFT_White); //Yline
 80184b0:	4623      	mov	r3, r4
 80184b2:	4602      	mov	r2, r0
 80184b4:	9700      	str	r7, [sp, #0]
 80184b6:	4630      	mov	r0, r6
 80184b8:	b289      	uxth	r1, r1
 80184ba:	f005 ff26 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center+1, X_center+LUV_LOCUS_BMP_SIZEX, Y_center+3, TFT_White);//XLine
 80184be:	1ce3      	adds	r3, r4, #3
 80184c0:	f105 02fa 	add.w	r2, r5, #250	; 0xfa
 80184c4:	1c61      	adds	r1, r4, #1
 80184c6:	4630      	mov	r0, r6
 80184c8:	9700      	str	r7, [sp, #0]
 80184ca:	b29b      	uxth	r3, r3
 80184cc:	b292      	uxth	r2, r2
 80184ce:	b289      	uxth	r1, r1
 80184d0:	f005 ff1b 	bl	801e30a <TFT_FillRectangle>
		
		TFT_DrawLine(X_center-5, Y_center-396/2, X_center+3, Y_center-396/2, TFT_White);
 80184d4:	f1a4 03c6 	sub.w	r3, r4, #198	; 0xc6
 80184d8:	b29b      	uxth	r3, r3
 80184da:	1cea      	adds	r2, r5, #3
 80184dc:	1f68      	subs	r0, r5, #5
 80184de:	4619      	mov	r1, r3
 80184e0:	9700      	str	r7, [sp, #0]
 80184e2:	b292      	uxth	r2, r2
 80184e4:	b280      	uxth	r0, r0
 80184e6:	f005 feb3 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(X_center+403/2, Y_center-3, X_center+403/2, Y_center+6, TFT_White);
 80184ea:	1da6      	adds	r6, r4, #6
 80184ec:	f105 02c9 	add.w	r2, r5, #201	; 0xc9
 80184f0:	b292      	uxth	r2, r2
 80184f2:	b2b6      	uxth	r6, r6
 80184f4:	1ee1      	subs	r1, r4, #3
 80184f6:	4633      	mov	r3, r6
 80184f8:	4610      	mov	r0, r2
 80184fa:	b289      	uxth	r1, r1
 80184fc:	9700      	str	r7, [sp, #0]
 80184fe:	f005 fea7 	bl	801e250 <TFT_DrawLine>
		
		TFT_SetFont(&Font6EN_arch_big);
 8018502:	4819      	ldr	r0, [pc, #100]	; (8018568 <GUI_Axes_Locus_LUV+0xc8>)
 8018504:	f006 f92a 	bl	801e75c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
		TFT_SetBackColor(TFT_Black_Bkgr);
		
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8018508:	3cc8      	subs	r4, #200	; 0xc8
		TFT_SetTextColor(TFT_White);
 801850a:	4638      	mov	r0, r7
 801850c:	f006 f92c 	bl	801e768 <TFT_SetTextColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8018510:	b2a4      	uxth	r4, r4
		TFT_SetBackColor(TFT_Black_Bkgr);
 8018512:	2063      	movs	r0, #99	; 0x63
 8018514:	f006 f92e 	bl	801e774 <TFT_SetBackColor>
		TFT_DrawChar(4,  Y_center-396/2-2, '.');
 8018518:	4621      	mov	r1, r4
 801851a:	222e      	movs	r2, #46	; 0x2e
 801851c:	2004      	movs	r0, #4
 801851e:	f006 f9e7 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-396/2-2, '0');
 8018522:	4621      	mov	r1, r4
 8018524:	2230      	movs	r2, #48	; 0x30
 8018526:	2000      	movs	r0, #0
 8018528:	f006 f9e2 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(8,  Y_center-396/2-2, '5');
 801852c:	4621      	mov	r1, r4
 801852e:	2235      	movs	r2, #53	; 0x35
 8018530:	2008      	movs	r0, #8
 8018532:	f006 f9dd 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(X_center+403/2-6+4,  Y_center+6, '.');
 8018536:	f105 00c7 	add.w	r0, r5, #199	; 0xc7
 801853a:	4631      	mov	r1, r6
 801853c:	222e      	movs	r2, #46	; 0x2e
 801853e:	b280      	uxth	r0, r0
 8018540:	f006 f9d6 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+0,  Y_center+6, '0');
 8018544:	f105 00c3 	add.w	r0, r5, #195	; 0xc3
 8018548:	4631      	mov	r1, r6
 801854a:	2230      	movs	r2, #48	; 0x30
 801854c:	b280      	uxth	r0, r0
 801854e:	f006 f9cf 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 8018552:	f105 00cb 	add.w	r0, r5, #203	; 0xcb
 8018556:	2235      	movs	r2, #53	; 0x35
 8018558:	4631      	mov	r1, r6
 801855a:	b280      	uxth	r0, r0
}
 801855c:	b003      	add	sp, #12
 801855e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		TFT_DrawChar(X_center+403/2-6+8,  Y_center+6, '5');
 8018562:	f006 b9c5 	b.w	801e8f0 <TFT_DrawChar>
 8018566:	bf00      	nop
 8018568:	20000210 	.word	0x20000210

0801856c <GUI_Axes_Locus_Lab>:

void GUI_Axes_Locus_Lab(uint16_t X_center, uint16_t Y_center, uint8_t direction)
{
 801856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8018570:	f100 037d 	add.w	r3, r0, #125	; 0x7d
{
 8018574:	b087      	sub	sp, #28
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8018576:	b29b      	uxth	r3, r3
{
 8018578:	4604      	mov	r4, r0
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 801857a:	f64f 77ff 	movw	r7, #65535	; 0xffff
{
 801857e:	460d      	mov	r5, r1
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8018580:	9303      	str	r3, [sp, #12]
 8018582:	387f      	subs	r0, #127	; 0x7f
 8018584:	1c4b      	adds	r3, r1, #1
 8018586:	3901      	subs	r1, #1
 8018588:	9a03      	ldr	r2, [sp, #12]
 801858a:	9700      	str	r7, [sp, #0]
 801858c:	b29b      	uxth	r3, r3
 801858e:	b289      	uxth	r1, r1
 8018590:	b280      	uxth	r0, r0
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 8018592:	f1a5 067d 	sub.w	r6, r5, #125	; 0x7d
		TFT_FillRectangle(X_center-2-LAB_LOCUS_SIZEX/2, Y_center-1, X_center+LAB_LOCUS_SIZEX/2, Y_center+1, TFT_White); //
 8018596:	f005 feb8 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(X_center-2, Y_center-LAB_LOCUS_SIZEY/2, X_center, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);//
 801859a:	b2b6      	uxth	r6, r6
 801859c:	f105 037d 	add.w	r3, r5, #125	; 0x7d
 80185a0:	1ea0      	subs	r0, r4, #2
 80185a2:	b29b      	uxth	r3, r3
 80185a4:	4622      	mov	r2, r4
 80185a6:	4631      	mov	r1, r6
 80185a8:	9700      	str	r7, [sp, #0]
 80185aa:	b280      	uxth	r0, r0
 80185ac:	9304      	str	r3, [sp, #16]
 80185ae:	f005 feac 	bl	801e30a <TFT_FillRectangle>
		

		TFT_SetFont(&Font6EN_arch_big);
 80185b2:	4850      	ldr	r0, [pc, #320]	; (80186f4 <GUI_Axes_Locus_Lab+0x188>)
 80185b4:	f006 f8d2 	bl	801e75c <TFT_SetFont>
		TFT_SetTextColor(TFT_White);
 80185b8:	4638      	mov	r0, r7
 80185ba:	f006 f8d5 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 80185be:	2063      	movs	r0, #99	; 0x63
 80185c0:	f006 f8d8 	bl	801e774 <TFT_SetBackColor>
	
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80185c4:	f1a4 031e 	sub.w	r3, r4, #30
 80185c8:	b29b      	uxth	r3, r3
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 80185ca:	f1a4 0b19 	sub.w	fp, r4, #25
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80185ce:	4618      	mov	r0, r3
 80185d0:	4631      	mov	r1, r6
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 80185d2:	fa1f fb8b 	uxth.w	fp, fp
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80185d6:	222b      	movs	r2, #43	; 0x2b
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 80185d8:	f1a4 0a14 	sub.w	sl, r4, #20
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80185dc:	9305      	str	r3, [sp, #20]
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 80185de:	fa1f fa8a 	uxth.w	sl, sl
		TFT_DrawChar(X_center-35+5,  Y_center-LAB_LOCUS_SIZEY/2, '+');
 80185e2:	f006 f985 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 80185e6:	f1a4 090e 	sub.w	r9, r4, #14
		TFT_DrawChar(X_center-35+10,  Y_center-LAB_LOCUS_SIZEY/2, '1');
 80185ea:	4631      	mov	r1, r6
 80185ec:	4658      	mov	r0, fp
 80185ee:	2231      	movs	r2, #49	; 0x31
 80185f0:	f006 f97e 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 80185f4:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(X_center-35+15,  Y_center-LAB_LOCUS_SIZEY/2, '2');
 80185f8:	4631      	mov	r1, r6
 80185fa:	4650      	mov	r0, sl
 80185fc:	2232      	movs	r2, #50	; 0x32
 80185fe:	f006 f977 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center-LAB_LOCUS_SIZEY/2, '8');
 8018602:	4631      	mov	r1, r6
 8018604:	4648      	mov	r0, r9
 8018606:	2238      	movs	r2, #56	; 0x38
 8018608:	f006 f972 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(X_center-35+5,  Y_center+LAB_LOCUS_SIZEY/2-8, '-');
 801860c:	f105 0875 	add.w	r8, r5, #117	; 0x75
 8018610:	9b05      	ldr	r3, [sp, #20]
 8018612:	fa1f f888 	uxth.w	r8, r8
 8018616:	4618      	mov	r0, r3
 8018618:	4641      	mov	r1, r8
 801861a:	222d      	movs	r2, #45	; 0x2d
 801861c:	f006 f968 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+10,  Y_center+LAB_LOCUS_SIZEY/2-8, '1');
 8018620:	4641      	mov	r1, r8
 8018622:	4658      	mov	r0, fp
 8018624:	2231      	movs	r2, #49	; 0x31
 8018626:	f006 f963 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+15,  Y_center+LAB_LOCUS_SIZEY/2-8, '2');
 801862a:	4641      	mov	r1, r8
 801862c:	4650      	mov	r0, sl
 801862e:	2232      	movs	r2, #50	; 0x32
 8018630:	f006 f95e 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 8018634:	4641      	mov	r1, r8
		
		TFT_DrawChar(0,  Y_center-11, '-');
 8018636:	f1a5 080b 	sub.w	r8, r5, #11
 801863a:	fa1f f888 	uxth.w	r8, r8
		TFT_DrawChar(X_center-35+21,  Y_center+LAB_LOCUS_SIZEY/2-8, '8');
 801863e:	4648      	mov	r0, r9
 8018640:	2238      	movs	r2, #56	; 0x38
 8018642:	f006 f955 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(0,  Y_center-11, '-');
 8018646:	4641      	mov	r1, r8
 8018648:	222d      	movs	r2, #45	; 0x2d
 801864a:	2000      	movs	r0, #0
 801864c:	f006 f950 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(5,  Y_center-11, '1');
 8018650:	4641      	mov	r1, r8
 8018652:	2231      	movs	r2, #49	; 0x31
 8018654:	2005      	movs	r0, #5
 8018656:	f006 f94b 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(10,  Y_center-11, '2');
 801865a:	4641      	mov	r1, r8
 801865c:	2232      	movs	r2, #50	; 0x32
 801865e:	200a      	movs	r0, #10
 8018660:	f006 f946 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(16,  Y_center-11, '8');
 8018664:	4641      	mov	r1, r8
 8018666:	2238      	movs	r2, #56	; 0x38
 8018668:	2010      	movs	r0, #16
 801866a:	f006 f941 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(260-15,  Y_center-11, '+');
 801866e:	4641      	mov	r1, r8
 8018670:	222b      	movs	r2, #43	; 0x2b
 8018672:	20f5      	movs	r0, #245	; 0xf5
 8018674:	f006 f93c 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(260-10,  Y_center-11, '1');
 8018678:	4641      	mov	r1, r8
 801867a:	2231      	movs	r2, #49	; 0x31
 801867c:	20fa      	movs	r0, #250	; 0xfa
 801867e:	f006 f937 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(260-5,  Y_center-11, '2');
 8018682:	4641      	mov	r1, r8
 8018684:	2232      	movs	r2, #50	; 0x32
 8018686:	20ff      	movs	r0, #255	; 0xff
 8018688:	f006 f932 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(260,  Y_center-11, '8');
		
		//		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/4, X_center+3, Y_center-LAB_LOCUS_SIZEY/4, TFT_White);
//		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/4, X_center+3, Y_center+LAB_LOCUS_SIZEY/4, TFT_White);
		
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 801868c:	f104 0903 	add.w	r9, r4, #3
		TFT_DrawChar(260,  Y_center-11, '8');
 8018690:	4641      	mov	r1, r8
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 8018692:	f1a4 0805 	sub.w	r8, r4, #5
 8018696:	fa1f f888 	uxth.w	r8, r8
 801869a:	fa1f f989 	uxth.w	r9, r9
		TFT_DrawChar(260,  Y_center-11, '8');
 801869e:	2238      	movs	r2, #56	; 0x38
 80186a0:	f44f 7082 	mov.w	r0, #260	; 0x104
 80186a4:	f006 f924 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawLine(X_center-5, Y_center-LAB_LOCUS_SIZEY/2, X_center+3, Y_center-LAB_LOCUS_SIZEY/2, TFT_White);
 80186a8:	4633      	mov	r3, r6
 80186aa:	464a      	mov	r2, r9
 80186ac:	4631      	mov	r1, r6
 80186ae:	4640      	mov	r0, r8
 80186b0:	9700      	str	r7, [sp, #0]
 80186b2:	f005 fdcd 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(X_center-5, Y_center+LAB_LOCUS_SIZEY/2, X_center+3, Y_center+LAB_LOCUS_SIZEY/2, TFT_White);
 80186b6:	9b04      	ldr	r3, [sp, #16]
 80186b8:	9700      	str	r7, [sp, #0]
 80186ba:	464a      	mov	r2, r9
 80186bc:	4619      	mov	r1, r3
 80186be:	4640      	mov	r0, r8
 80186c0:	f005 fdc6 	bl	801e250 <TFT_DrawLine>
	
//		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/4, Y_center-3, X_center-LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
//		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/4, Y_center-3, X_center+LAB_LOCUS_SIZEX/4, Y_center+6, TFT_White);
		
		TFT_DrawLine(X_center-LAB_LOCUS_SIZEX/2+1, Y_center-3, X_center-LAB_LOCUS_SIZEX/2+1, Y_center+6, TFT_White);
 80186c4:	f1a4 027c 	sub.w	r2, r4, #124	; 0x7c
 80186c8:	1eec      	subs	r4, r5, #3
 80186ca:	3506      	adds	r5, #6
 80186cc:	b292      	uxth	r2, r2
 80186ce:	b2a4      	uxth	r4, r4
 80186d0:	b2ad      	uxth	r5, r5
 80186d2:	462b      	mov	r3, r5
 80186d4:	4621      	mov	r1, r4
 80186d6:	4610      	mov	r0, r2
 80186d8:	9700      	str	r7, [sp, #0]
 80186da:	f005 fdb9 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(X_center+LAB_LOCUS_SIZEX/2, Y_center-3, X_center+LAB_LOCUS_SIZEX/2, Y_center+6, TFT_White);
 80186de:	9a03      	ldr	r2, [sp, #12]
 80186e0:	9700      	str	r7, [sp, #0]
 80186e2:	462b      	mov	r3, r5
 80186e4:	4621      	mov	r1, r4
 80186e6:	4610      	mov	r0, r2
 80186e8:	f005 fdb2 	bl	801e250 <TFT_DrawLine>
 80186ec:	b007      	add	sp, #28
 80186ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80186f2:	bf00      	nop
 80186f4:	20000210 	.word	0x20000210

080186f8 <GUI_Text_CIE_XYZ>:
#include "stdio.h"
#include "GUI_Text_Elements_EN.h"


void GUI_Text_CIE_XYZ(uint16_t X, uint16_t Y)
{
 80186f8:	b538      	push	{r3, r4, r5, lr}
 80186fa:	4604      	mov	r4, r0
TFT_SetTextColor(TFT_White);
 80186fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018700:	460d      	mov	r5, r1
TFT_SetTextColor(TFT_White);
 8018702:	f006 f831 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018706:	2063      	movs	r0, #99	; 0x63
 8018708:	f006 f834 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801870c:	4816      	ldr	r0, [pc, #88]	; (8018768 <GUI_Text_CIE_XYZ+0x70>)
 801870e:	f006 f825 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018712:	4629      	mov	r1, r5
 8018714:	4620      	mov	r0, r4
 8018716:	2243      	movs	r2, #67	; 0x43
 8018718:	f006 f8ea 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 801871c:	f104 000d 	add.w	r0, r4, #13
 8018720:	4629      	mov	r1, r5
 8018722:	2249      	movs	r2, #73	; 0x49
 8018724:	b280      	uxth	r0, r0
 8018726:	f006 f8e3 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 801872a:	f104 001b 	add.w	r0, r4, #27
 801872e:	4629      	mov	r1, r5
 8018730:	2245      	movs	r2, #69	; 0x45
 8018732:	b280      	uxth	r0, r0
 8018734:	f006 f8dc 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'X');
 8018738:	f104 0031 	add.w	r0, r4, #49	; 0x31
 801873c:	4629      	mov	r1, r5
 801873e:	2258      	movs	r2, #88	; 0x58
 8018740:	b280      	uxth	r0, r0
 8018742:	f006 f8d5 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y, 'Y');
 8018746:	f104 0041 	add.w	r0, r4, #65	; 0x41
 801874a:	4629      	mov	r1, r5
 801874c:	2259      	movs	r2, #89	; 0x59
 801874e:	b280      	uxth	r0, r0
 8018750:	f006 f8ce 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y, 'Z');
 8018754:	f104 0051 	add.w	r0, r4, #81	; 0x51
 8018758:	4629      	mov	r1, r5
 801875a:	225a      	movs	r2, #90	; 0x5a
 801875c:	b280      	uxth	r0, r0
}
 801875e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+81, Y, 'Z');
 8018762:	f006 b8c5 	b.w	801e8f0 <TFT_DrawChar>
 8018766:	bf00      	nop
 8018768:	200001b0 	.word	0x200001b0

0801876c <GUI_Text_CIE_xy_1931>:
	TFT_DrawChar(X+49, Y+1, 'x');
	TFT_DrawChar(X+72, Y+1, 'y');
}

void GUI_Text_CIE_xy_1931(uint16_t X, uint16_t Y)
{
 801876c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801876e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 8018770:	4f2c      	ldr	r7, [pc, #176]	; (8018824 <GUI_Text_CIE_xy_1931+0xb8>)
	TFT_SetTextColor(TFT_White);
 8018772:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018776:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018778:	f005 fff6 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801877c:	2063      	movs	r0, #99	; 0x63
 801877e:	f005 fff9 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018782:	4638      	mov	r0, r7
 8018784:	f005 ffea 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018788:	4629      	mov	r1, r5
 801878a:	4620      	mov	r0, r4
 801878c:	2243      	movs	r2, #67	; 0x43
 801878e:	f006 f8af 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8018792:	f104 000d 	add.w	r0, r4, #13
 8018796:	4629      	mov	r1, r5
 8018798:	2249      	movs	r2, #73	; 0x49
 801879a:	b280      	uxth	r0, r0
 801879c:	f006 f8a8 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80187a0:	f104 001b 	add.w	r0, r4, #27
 80187a4:	4629      	mov	r1, r5
 80187a6:	2245      	movs	r2, #69	; 0x45
 80187a8:	b280      	uxth	r0, r0
 80187aa:	f006 f8a1 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 80187ae:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 80187b2:	4629      	mov	r1, r5
 80187b4:	222c      	movs	r2, #44	; 0x2c
 80187b6:	b280      	uxth	r0, r0
 80187b8:	f006 f89a 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 80187bc:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 80187be:	481a      	ldr	r0, [pc, #104]	; (8018828 <GUI_Text_CIE_xy_1931+0xbc>)
 80187c0:	f005 ffcc 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 80187c4:	b2b6      	uxth	r6, r6
 80187c6:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80187ca:	4631      	mov	r1, r6
 80187cc:	2278      	movs	r2, #120	; 0x78
 80187ce:	b280      	uxth	r0, r0
 80187d0:	f006 f88e 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 80187d4:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80187d8:	4631      	mov	r1, r6
 80187da:	2279      	movs	r2, #121	; 0x79
 80187dc:	b280      	uxth	r0, r0
 80187de:	f006 f887 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80187e2:	4638      	mov	r0, r7
 80187e4:	f005 ffba 	bl	801e75c <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 80187e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80187ec:	4629      	mov	r1, r5
 80187ee:	2231      	movs	r2, #49	; 0x31
 80187f0:	b280      	uxth	r0, r0
 80187f2:	f006 f87d 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+133, Y, '1');
 80187f6:	f104 0085 	add.w	r0, r4, #133	; 0x85
 80187fa:	4629      	mov	r1, r5
 80187fc:	2231      	movs	r2, #49	; 0x31
 80187fe:	b280      	uxth	r0, r0
 8018800:	f006 f876 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 8018804:	f104 0069 	add.w	r0, r4, #105	; 0x69
 8018808:	4629      	mov	r1, r5
 801880a:	2239      	movs	r2, #57	; 0x39
 801880c:	b280      	uxth	r0, r0
 801880e:	f006 f86f 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+121, Y, '3');
 8018812:	f104 0079 	add.w	r0, r4, #121	; 0x79
 8018816:	4629      	mov	r1, r5
 8018818:	2233      	movs	r2, #51	; 0x33
 801881a:	b280      	uxth	r0, r0


}
 801881c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+121, Y, '3');
 8018820:	f006 b866 	b.w	801e8f0 <TFT_DrawChar>
 8018824:	200001b0 	.word	0x200001b0
 8018828:	200001c0 	.word	0x200001c0

0801882c <GUI_Text_CIE_xy_1964>:

void GUI_Text_CIE_xy_1964(uint16_t X, uint16_t Y)
{
 801882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801882e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_big);
 8018830:	4f2c      	ldr	r7, [pc, #176]	; (80188e4 <GUI_Text_CIE_xy_1964+0xb8>)
	TFT_SetTextColor(TFT_White);
 8018832:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018836:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018838:	f005 ff96 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801883c:	2063      	movs	r0, #99	; 0x63
 801883e:	f005 ff99 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018842:	4638      	mov	r0, r7
 8018844:	f005 ff8a 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018848:	4629      	mov	r1, r5
 801884a:	4620      	mov	r0, r4
 801884c:	2243      	movs	r2, #67	; 0x43
 801884e:	f006 f84f 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8018852:	f104 000d 	add.w	r0, r4, #13
 8018856:	4629      	mov	r1, r5
 8018858:	2249      	movs	r2, #73	; 0x49
 801885a:	b280      	uxth	r0, r0
 801885c:	f006 f848 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8018860:	f104 001b 	add.w	r0, r4, #27
 8018864:	4629      	mov	r1, r5
 8018866:	2245      	movs	r2, #69	; 0x45
 8018868:	b280      	uxth	r0, r0
 801886a:	f006 f841 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y, ',');
 801886e:	f104 003a 	add.w	r0, r4, #58	; 0x3a
 8018872:	4629      	mov	r1, r5
 8018874:	222c      	movs	r2, #44	; 0x2c
 8018876:	b280      	uxth	r0, r0
 8018878:	f006 f83a 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 801887c:	1c6e      	adds	r6, r5, #1
	TFT_SetFont(&Font16EN_arch_small);
 801887e:	481a      	ldr	r0, [pc, #104]	; (80188e8 <GUI_Text_CIE_xy_1964+0xbc>)
 8018880:	f005 ff6c 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8018884:	b2b6      	uxth	r6, r6
 8018886:	f104 0031 	add.w	r0, r4, #49	; 0x31
 801888a:	4631      	mov	r1, r6
 801888c:	2278      	movs	r2, #120	; 0x78
 801888e:	b280      	uxth	r0, r0
 8018890:	f006 f82e 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+72, Y+1, 'y');
 8018894:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8018898:	4631      	mov	r1, r6
 801889a:	2279      	movs	r2, #121	; 0x79
 801889c:	b280      	uxth	r0, r0
 801889e:	f006 f827 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 80188a2:	4638      	mov	r0, r7
 80188a4:	f005 ff5a 	bl	801e75c <TFT_SetFont>
	
	TFT_DrawChar(X+92, Y, '1');
 80188a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80188ac:	4629      	mov	r1, r5
 80188ae:	2231      	movs	r2, #49	; 0x31
 80188b0:	b280      	uxth	r0, r0
 80188b2:	f006 f81d 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '9');
 80188b6:	f104 0069 	add.w	r0, r4, #105	; 0x69
 80188ba:	4629      	mov	r1, r5
 80188bc:	2239      	movs	r2, #57	; 0x39
 80188be:	b280      	uxth	r0, r0
 80188c0:	f006 f816 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y, '6');
 80188c4:	f104 0078 	add.w	r0, r4, #120	; 0x78
 80188c8:	4629      	mov	r1, r5
 80188ca:	2236      	movs	r2, #54	; 0x36
 80188cc:	b280      	uxth	r0, r0
 80188ce:	f006 f80f 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+135, Y, '4');
 80188d2:	f104 0087 	add.w	r0, r4, #135	; 0x87
 80188d6:	4629      	mov	r1, r5
 80188d8:	2234      	movs	r2, #52	; 0x34
 80188da:	b280      	uxth	r0, r0
}
 80188dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+135, Y, '4');
 80188e0:	f006 b806 	b.w	801e8f0 <TFT_DrawChar>
 80188e4:	200001b0 	.word	0x200001b0
 80188e8:	200001c0 	.word	0x200001c0

080188ec <GUI_Text_CIE_Luv>:



void GUI_Text_CIE_Luv(uint16_t X, uint16_t Y)
{
 80188ec:	b538      	push	{r3, r4, r5, lr}
 80188ee:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80188f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80188f4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80188f6:	f005 ff37 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80188fa:	2063      	movs	r0, #99	; 0x63
 80188fc:	f005 ff3a 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018900:	481f      	ldr	r0, [pc, #124]	; (8018980 <GUI_Text_CIE_Luv+0x94>)
 8018902:	f005 ff2b 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018906:	4621      	mov	r1, r4
 8018908:	4628      	mov	r0, r5
 801890a:	2243      	movs	r2, #67	; 0x43
 801890c:	f005 fff0 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8018910:	f105 000d 	add.w	r0, r5, #13
 8018914:	4621      	mov	r1, r4
 8018916:	2249      	movs	r2, #73	; 0x49
 8018918:	b280      	uxth	r0, r0
 801891a:	f005 ffe9 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 801891e:	f105 001b 	add.w	r0, r5, #27
 8018922:	4621      	mov	r1, r4
 8018924:	2245      	movs	r2, #69	; 0x45
 8018926:	b280      	uxth	r0, r0
 8018928:	f005 ffe2 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 801892c:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8018930:	4621      	mov	r1, r4
 8018932:	224c      	movs	r2, #76	; 0x4c
 8018934:	b280      	uxth	r0, r0
 8018936:	f005 ffdb 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '('-1);
 801893a:	f105 0050 	add.w	r0, r5, #80	; 0x50
 801893e:	4621      	mov	r1, r4
 8018940:	2227      	movs	r2, #39	; 0x27
 8018942:	b280      	uxth	r0, r0
 8018944:	f005 ffd4 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+106, Y, '('-1);
 8018948:	f105 006a 	add.w	r0, r5, #106	; 0x6a
 801894c:	4621      	mov	r1, r4
 801894e:	2227      	movs	r2, #39	; 0x27
 8018950:	b280      	uxth	r0, r0
 8018952:	f005 ffcd 	bl	801e8f0 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'u');
 8018956:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8018958:	480a      	ldr	r0, [pc, #40]	; (8018984 <GUI_Text_CIE_Luv+0x98>)
 801895a:	f005 feff 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'u');
 801895e:	b2a4      	uxth	r4, r4
 8018960:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8018964:	4621      	mov	r1, r4
 8018966:	2275      	movs	r2, #117	; 0x75
 8018968:	b280      	uxth	r0, r0
 801896a:	f005 ffc1 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'v');
 801896e:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 8018972:	4621      	mov	r1, r4
 8018974:	2276      	movs	r2, #118	; 0x76
 8018976:	b280      	uxth	r0, r0
}
 8018978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'v');
 801897c:	f005 bfb8 	b.w	801e8f0 <TFT_DrawChar>
 8018980:	200001b0 	.word	0x200001b0
 8018984:	200001c0 	.word	0x200001c0

08018988 <GUI_Text_CIE_Lab>:

void GUI_Text_CIE_Lab(uint16_t X, uint16_t Y)
{
 8018988:	b538      	push	{r3, r4, r5, lr}
 801898a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801898c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018990:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018992:	f005 fee9 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018996:	2063      	movs	r0, #99	; 0x63
 8018998:	f005 feec 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801899c:	481f      	ldr	r0, [pc, #124]	; (8018a1c <GUI_Text_CIE_Lab+0x94>)
 801899e:	f005 fedd 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 80189a2:	4621      	mov	r1, r4
 80189a4:	4628      	mov	r0, r5
 80189a6:	2243      	movs	r2, #67	; 0x43
 80189a8:	f005 ffa2 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 80189ac:	f105 000d 	add.w	r0, r5, #13
 80189b0:	4621      	mov	r1, r4
 80189b2:	2249      	movs	r2, #73	; 0x49
 80189b4:	b280      	uxth	r0, r0
 80189b6:	f005 ff9b 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 80189ba:	f105 001b 	add.w	r0, r5, #27
 80189be:	4621      	mov	r1, r4
 80189c0:	2245      	movs	r2, #69	; 0x45
 80189c2:	b280      	uxth	r0, r0
 80189c4:	f005 ff94 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+49, Y, 'L');
 80189c8:	f105 0031 	add.w	r0, r5, #49	; 0x31
 80189cc:	4621      	mov	r1, r4
 80189ce:	224c      	movs	r2, #76	; 0x4c
 80189d0:	b280      	uxth	r0, r0
 80189d2:	f005 ff8d 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+80, Y, '*');
 80189d6:	f105 0050 	add.w	r0, r5, #80	; 0x50
 80189da:	4621      	mov	r1, r4
 80189dc:	222a      	movs	r2, #42	; 0x2a
 80189de:	b280      	uxth	r0, r0
 80189e0:	f005 ff86 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+105, Y, '*');
 80189e4:	f105 0069 	add.w	r0, r5, #105	; 0x69
 80189e8:	4621      	mov	r1, r4
 80189ea:	222a      	movs	r2, #42	; 0x2a
 80189ec:	b280      	uxth	r0, r0
 80189ee:	f005 ff7f 	bl	801e8f0 <TFT_DrawChar>
	
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+68, Y+2, 'a');
 80189f2:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 80189f4:	480a      	ldr	r0, [pc, #40]	; (8018a20 <GUI_Text_CIE_Lab+0x98>)
 80189f6:	f005 feb1 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+68, Y+2, 'a');
 80189fa:	b2a4      	uxth	r4, r4
 80189fc:	f105 0044 	add.w	r0, r5, #68	; 0x44
 8018a00:	4621      	mov	r1, r4
 8018a02:	2261      	movs	r2, #97	; 0x61
 8018a04:	b280      	uxth	r0, r0
 8018a06:	f005 ff73 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+93, Y+2, 'b');
 8018a0a:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 8018a0e:	4621      	mov	r1, r4
 8018a10:	2262      	movs	r2, #98	; 0x62
 8018a12:	b280      	uxth	r0, r0
}
 8018a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+93, Y+2, 'b');
 8018a18:	f005 bf6a 	b.w	801e8f0 <TFT_DrawChar>
 8018a1c:	200001b0 	.word	0x200001b0
 8018a20:	200001c0 	.word	0x200001c0

08018a24 <GUI_Text_Bluetooth>:

void GUI_Text_Bluetooth(uint16_t X, uint16_t Y)
{
 8018a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a26:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16EN_arch_small);
 8018a28:	4e29      	ldr	r6, [pc, #164]	; (8018ad0 <GUI_Text_Bluetooth+0xac>)
	TFT_SetTextColor(TFT_White);
 8018a2a:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018a2e:	460f      	mov	r7, r1
	TFT_SetTextColor(TFT_White);
 8018a30:	f005 fe9a 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018a34:	2063      	movs	r0, #99	; 0x63
 8018a36:	f005 fe9d 	bl	801e774 <TFT_SetBackColor>
	TFT_DrawChar(X+13, Y+2, 'l');
 8018a3a:	1cbd      	adds	r5, r7, #2
	TFT_SetFont(&Font16EN_arch_small);
 8018a3c:	4630      	mov	r0, r6
	TFT_DrawChar(X+13, Y+2, 'l');
 8018a3e:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16EN_arch_small);
 8018a40:	f005 fe8c 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'l');
 8018a44:	f104 000d 	add.w	r0, r4, #13
 8018a48:	4629      	mov	r1, r5
 8018a4a:	226c      	movs	r2, #108	; 0x6c
 8018a4c:	b280      	uxth	r0, r0
 8018a4e:	f005 ff4f 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 't');
 8018a52:	f104 002f 	add.w	r0, r4, #47	; 0x2f
 8018a56:	4629      	mov	r1, r5
 8018a58:	2274      	movs	r2, #116	; 0x74
 8018a5a:	b280      	uxth	r0, r0
 8018a5c:	f005 ff48 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+81, Y+2, 't');
 8018a60:	f104 0051 	add.w	r0, r4, #81	; 0x51
 8018a64:	4629      	mov	r1, r5
 8018a66:	2274      	movs	r2, #116	; 0x74
 8018a68:	b280      	uxth	r0, r0
 8018a6a:	f005 ff41 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8018a6e:	4819      	ldr	r0, [pc, #100]	; (8018ad4 <GUI_Text_Bluetooth+0xb0>)
 8018a70:	f005 fe74 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'B');
 8018a74:	4639      	mov	r1, r7
 8018a76:	2242      	movs	r2, #66	; 0x42
 8018a78:	4620      	mov	r0, r4
 8018a7a:	f005 ff39 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8018a7e:	4630      	mov	r0, r6
 8018a80:	f005 fe6c 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+23, Y+2, 'u');
 8018a84:	f104 0017 	add.w	r0, r4, #23
 8018a88:	4629      	mov	r1, r5
 8018a8a:	2275      	movs	r2, #117	; 0x75
 8018a8c:	b280      	uxth	r0, r0
 8018a8e:	f005 ff2f 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+36, Y+2, 'e');
 8018a92:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8018a96:	4629      	mov	r1, r5
 8018a98:	2265      	movs	r2, #101	; 0x65
 8018a9a:	b280      	uxth	r0, r0
 8018a9c:	f005 ff28 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'o');
 8018aa0:	f104 0039 	add.w	r0, r4, #57	; 0x39
 8018aa4:	4629      	mov	r1, r5
 8018aa6:	226f      	movs	r2, #111	; 0x6f
 8018aa8:	b280      	uxth	r0, r0
 8018aaa:	f005 ff21 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'o');
 8018aae:	f104 0046 	add.w	r0, r4, #70	; 0x46
 8018ab2:	4629      	mov	r1, r5
 8018ab4:	226f      	movs	r2, #111	; 0x6f
 8018ab6:	b280      	uxth	r0, r0
 8018ab8:	f005 ff1a 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y+2, 'h');
 8018abc:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 8018ac0:	4629      	mov	r1, r5
 8018ac2:	2268      	movs	r2, #104	; 0x68
 8018ac4:	b280      	uxth	r0, r0
}
 8018ac6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawChar(X+91, Y+2, 'h');
 8018aca:	f005 bf11 	b.w	801e8f0 <TFT_DrawChar>
 8018ace:	bf00      	nop
 8018ad0:	200001c0 	.word	0x200001c0
 8018ad4:	200001b0 	.word	0x200001b0

08018ad8 <GUI_Text_A>:

void GUI_Text_A(uint16_t X, uint16_t Y)
{
 8018ad8:	b538      	push	{r3, r4, r5, lr}
 8018ada:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018adc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018ae0:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018ae2:	f005 fe41 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018ae6:	2063      	movs	r0, #99	; 0x63
 8018ae8:	f005 fe44 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018aec:	4804      	ldr	r0, [pc, #16]	; (8018b00 <GUI_Text_A+0x28>)
 8018aee:	f005 fe35 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'A');
 8018af2:	4629      	mov	r1, r5
 8018af4:	4620      	mov	r0, r4
 8018af6:	2241      	movs	r2, #65	; 0x41
}
 8018af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'A');
 8018afc:	f005 bef8 	b.w	801e8f0 <TFT_DrawChar>
 8018b00:	200001b0 	.word	0x200001b0

08018b04 <GUI_Text_D65>:

void GUI_Text_D65(uint16_t X, uint16_t Y)
{
 8018b04:	b538      	push	{r3, r4, r5, lr}
 8018b06:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018b08:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018b0c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018b0e:	f005 fe2b 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018b12:	2063      	movs	r0, #99	; 0x63
 8018b14:	f005 fe2e 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018b18:	480b      	ldr	r0, [pc, #44]	; (8018b48 <GUI_Text_D65+0x44>)
 8018b1a:	f005 fe1f 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8018b1e:	4629      	mov	r1, r5
 8018b20:	4620      	mov	r0, r4
 8018b22:	2244      	movs	r2, #68	; 0x44
 8018b24:	f005 fee4 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '6');
 8018b28:	f104 000f 	add.w	r0, r4, #15
 8018b2c:	4629      	mov	r1, r5
 8018b2e:	2236      	movs	r2, #54	; 0x36
 8018b30:	b280      	uxth	r0, r0
 8018b32:	f005 fedd 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, '5');
 8018b36:	f104 0020 	add.w	r0, r4, #32
 8018b3a:	4629      	mov	r1, r5
 8018b3c:	2235      	movs	r2, #53	; 0x35
 8018b3e:	b280      	uxth	r0, r0
}
 8018b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+32, Y, '5');
 8018b44:	f005 bed4 	b.w	801e8f0 <TFT_DrawChar>
 8018b48:	200001b0 	.word	0x200001b0

08018b4c <GUI_Text_C>:

void GUI_Text_C(uint16_t X, uint16_t Y)
{
 8018b4c:	b538      	push	{r3, r4, r5, lr}
 8018b4e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018b50:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018b54:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018b56:	f005 fe07 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018b5a:	2063      	movs	r0, #99	; 0x63
 8018b5c:	f005 fe0a 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018b60:	4804      	ldr	r0, [pc, #16]	; (8018b74 <GUI_Text_C+0x28>)
 8018b62:	f005 fdfb 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018b66:	4629      	mov	r1, r5
 8018b68:	4620      	mov	r0, r4
 8018b6a:	2243      	movs	r2, #67	; 0x43
}
 8018b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'C');
 8018b70:	f005 bebe 	b.w	801e8f0 <TFT_DrawChar>
 8018b74:	200001b0 	.word	0x200001b0

08018b78 <GUI_Text_D50>:

void GUI_Text_D50(uint16_t X, uint16_t Y)
{
 8018b78:	b538      	push	{r3, r4, r5, lr}
 8018b7a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018b7c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018b80:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018b82:	f005 fdf1 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018b86:	2063      	movs	r0, #99	; 0x63
 8018b88:	f005 fdf4 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018b8c:	480b      	ldr	r0, [pc, #44]	; (8018bbc <GUI_Text_D50+0x44>)
 8018b8e:	f005 fde5 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8018b92:	4629      	mov	r1, r5
 8018b94:	4620      	mov	r0, r4
 8018b96:	2244      	movs	r2, #68	; 0x44
 8018b98:	f005 feaa 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 8018b9c:	f104 000f 	add.w	r0, r4, #15
 8018ba0:	4629      	mov	r1, r5
 8018ba2:	2235      	movs	r2, #53	; 0x35
 8018ba4:	b280      	uxth	r0, r0
 8018ba6:	f005 fea3 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '0');
 8018baa:	f104 001f 	add.w	r0, r4, #31
 8018bae:	4629      	mov	r1, r5
 8018bb0:	2230      	movs	r2, #48	; 0x30
 8018bb2:	b280      	uxth	r0, r0
}
 8018bb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '0');
 8018bb8:	f005 be9a 	b.w	801e8f0 <TFT_DrawChar>
 8018bbc:	200001b0 	.word	0x200001b0

08018bc0 <GUI_Text_D55>:

void GUI_Text_D55(uint16_t X, uint16_t Y)
{
 8018bc0:	b538      	push	{r3, r4, r5, lr}
 8018bc2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018bc4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018bc8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018bca:	f005 fdcd 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018bce:	2063      	movs	r0, #99	; 0x63
 8018bd0:	f005 fdd0 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018bd4:	480b      	ldr	r0, [pc, #44]	; (8018c04 <GUI_Text_D55+0x44>)
 8018bd6:	f005 fdc1 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8018bda:	4629      	mov	r1, r5
 8018bdc:	4620      	mov	r0, r4
 8018bde:	2244      	movs	r2, #68	; 0x44
 8018be0:	f005 fe86 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '5');
 8018be4:	f104 000f 	add.w	r0, r4, #15
 8018be8:	4629      	mov	r1, r5
 8018bea:	2235      	movs	r2, #53	; 0x35
 8018bec:	b280      	uxth	r0, r0
 8018bee:	f005 fe7f 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8018bf2:	f104 001f 	add.w	r0, r4, #31
 8018bf6:	4629      	mov	r1, r5
 8018bf8:	2235      	movs	r2, #53	; 0x35
 8018bfa:	b280      	uxth	r0, r0
}
 8018bfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8018c00:	f005 be76 	b.w	801e8f0 <TFT_DrawChar>
 8018c04:	200001b0 	.word	0x200001b0

08018c08 <GUI_Text_D75>:

void GUI_Text_D75(uint16_t X, uint16_t Y)
{
 8018c08:	b538      	push	{r3, r4, r5, lr}
 8018c0a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018c0c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018c10:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018c12:	f005 fda9 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018c16:	2063      	movs	r0, #99	; 0x63
 8018c18:	f005 fdac 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018c1c:	480b      	ldr	r0, [pc, #44]	; (8018c4c <GUI_Text_D75+0x44>)
 8018c1e:	f005 fd9d 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'D');
 8018c22:	4629      	mov	r1, r5
 8018c24:	4620      	mov	r0, r4
 8018c26:	2244      	movs	r2, #68	; 0x44
 8018c28:	f005 fe62 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+15, Y, '7');
 8018c2c:	f104 000f 	add.w	r0, r4, #15
 8018c30:	4629      	mov	r1, r5
 8018c32:	2237      	movs	r2, #55	; 0x37
 8018c34:	b280      	uxth	r0, r0
 8018c36:	f005 fe5b 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, '5');
 8018c3a:	f104 001f 	add.w	r0, r4, #31
 8018c3e:	4629      	mov	r1, r5
 8018c40:	2235      	movs	r2, #53	; 0x35
 8018c42:	b280      	uxth	r0, r0
}
 8018c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+31, Y, '5');
 8018c48:	f005 be52 	b.w	801e8f0 <TFT_DrawChar>
 8018c4c:	200001b0 	.word	0x200001b0

08018c50 <GUI_Text_CIE_xy>:


void GUI_Text_CIE_xy(uint16_t X, uint16_t Y)
{
 8018c50:	b538      	push	{r3, r4, r5, lr}
 8018c52:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8018c54:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018c58:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8018c5a:	f005 fd85 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018c5e:	2063      	movs	r0, #99	; 0x63
 8018c60:	f005 fd88 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018c64:	4815      	ldr	r0, [pc, #84]	; (8018cbc <GUI_Text_CIE_xy+0x6c>)
 8018c66:	f005 fd79 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018c6a:	4621      	mov	r1, r4
 8018c6c:	4628      	mov	r0, r5
 8018c6e:	2243      	movs	r2, #67	; 0x43
 8018c70:	f005 fe3e 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'I');
 8018c74:	f105 000d 	add.w	r0, r5, #13
 8018c78:	4621      	mov	r1, r4
 8018c7a:	2249      	movs	r2, #73	; 0x49
 8018c7c:	b280      	uxth	r0, r0
 8018c7e:	f005 fe37 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y, 'E');
 8018c82:	f105 001b 	add.w	r0, r5, #27
 8018c86:	4621      	mov	r1, r4
 8018c88:	2245      	movs	r2, #69	; 0x45
 8018c8a:	b280      	uxth	r0, r0
 8018c8c:	f005 fe30 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+49, Y+1, 'x');
 8018c90:	3401      	adds	r4, #1
	TFT_SetFont(&Font16EN_arch_small);
 8018c92:	480b      	ldr	r0, [pc, #44]	; (8018cc0 <GUI_Text_CIE_xy+0x70>)
 8018c94:	f005 fd62 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+49, Y+1, 'x');
 8018c98:	b2a4      	uxth	r4, r4
 8018c9a:	f105 0031 	add.w	r0, r5, #49	; 0x31
 8018c9e:	4621      	mov	r1, r4
 8018ca0:	2278      	movs	r2, #120	; 0x78
 8018ca2:	b280      	uxth	r0, r0
 8018ca4:	f005 fe24 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+61, Y+1, 'y');
 8018ca8:	f105 003d 	add.w	r0, r5, #61	; 0x3d
 8018cac:	4621      	mov	r1, r4
 8018cae:	2279      	movs	r2, #121	; 0x79
 8018cb0:	b280      	uxth	r0, r0
}
 8018cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+61, Y+1, 'y');
 8018cb6:	f005 be1b 	b.w	801e8f0 <TFT_DrawChar>
 8018cba:	bf00      	nop
 8018cbc:	200001b0 	.word	0x200001b0
 8018cc0:	200001c0 	.word	0x200001c0

08018cc4 <GUI_Text_CRI>:

void GUI_Text_CRI(uint16_t X, uint16_t Y)
{
 8018cc4:	b538      	push	{r3, r4, r5, lr}
 8018cc6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018cc8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018ccc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018cce:	f005 fd4b 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018cd2:	2063      	movs	r0, #99	; 0x63
 8018cd4:	f005 fd4e 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018cd8:	480b      	ldr	r0, [pc, #44]	; (8018d08 <GUI_Text_CRI+0x44>)
 8018cda:	f005 fd3f 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+27, Y, 'I');
 8018cde:	f104 001b 	add.w	r0, r4, #27
 8018ce2:	4629      	mov	r1, r5
 8018ce4:	2249      	movs	r2, #73	; 0x49
 8018ce6:	b280      	uxth	r0, r0
 8018ce8:	f005 fe02 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'C');
 8018cec:	4629      	mov	r1, r5
 8018cee:	4620      	mov	r0, r4
 8018cf0:	2243      	movs	r2, #67	; 0x43
 8018cf2:	f005 fdfd 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'R');
 8018cf6:	f104 000d 	add.w	r0, r4, #13
 8018cfa:	4629      	mov	r1, r5
 8018cfc:	2252      	movs	r2, #82	; 0x52
 8018cfe:	b280      	uxth	r0, r0
}
 8018d00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+13, Y, 'R');
 8018d04:	f005 bdf4 	b.w	801e8f0 <TFT_DrawChar>
 8018d08:	200001b0 	.word	0x200001b0

08018d0c <GUI_Text_CQS>:

void GUI_Text_CQS(uint16_t X, uint16_t Y)
{
 8018d0c:	b538      	push	{r3, r4, r5, lr}
 8018d0e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018d10:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018d14:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018d16:	f005 fd27 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018d1a:	2063      	movs	r0, #99	; 0x63
 8018d1c:	f005 fd2a 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018d20:	480b      	ldr	r0, [pc, #44]	; (8018d50 <GUI_Text_CQS+0x44>)
 8018d22:	f005 fd1b 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 8018d26:	4629      	mov	r1, r5
 8018d28:	4620      	mov	r0, r4
 8018d2a:	2243      	movs	r2, #67	; 0x43
 8018d2c:	f005 fde0 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y, 'Q');
 8018d30:	f104 000d 	add.w	r0, r4, #13
 8018d34:	4629      	mov	r1, r5
 8018d36:	2251      	movs	r2, #81	; 0x51
 8018d38:	b280      	uxth	r0, r0
 8018d3a:	f005 fdd9 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'S');
 8018d3e:	f104 001c 	add.w	r0, r4, #28
 8018d42:	4629      	mov	r1, r5
 8018d44:	2253      	movs	r2, #83	; 0x53
 8018d46:	b280      	uxth	r0, r0
}
 8018d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'S');
 8018d4c:	f005 bdd0 	b.w	801e8f0 <TFT_DrawChar>
 8018d50:	200001b0 	.word	0x200001b0

08018d54 <GUI_Text_SP>:



void GUI_Text_SP(uint16_t X, uint16_t Y)
{
 8018d54:	b538      	push	{r3, r4, r5, lr}
 8018d56:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018d58:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018d5c:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018d5e:	f005 fd03 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018d62:	2063      	movs	r0, #99	; 0x63
 8018d64:	f005 fd06 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018d68:	480b      	ldr	r0, [pc, #44]	; (8018d98 <GUI_Text_SP+0x44>)
 8018d6a:	f005 fcf7 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+13, Y, '/');
 8018d6e:	f104 000d 	add.w	r0, r4, #13
 8018d72:	4629      	mov	r1, r5
 8018d74:	222f      	movs	r2, #47	; 0x2f
 8018d76:	b280      	uxth	r0, r0
 8018d78:	f005 fdba 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'S');
 8018d7c:	4629      	mov	r1, r5
 8018d7e:	4620      	mov	r0, r4
 8018d80:	2253      	movs	r2, #83	; 0x53
 8018d82:	f005 fdb5 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y, 'P');
 8018d86:	f104 001c 	add.w	r0, r4, #28
 8018d8a:	4629      	mov	r1, r5
 8018d8c:	2250      	movs	r2, #80	; 0x50
 8018d8e:	b280      	uxth	r0, r0
}
 8018d90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+28, Y, 'P');
 8018d94:	f005 bdac 	b.w	801e8f0 <TFT_DrawChar>
 8018d98:	200001b0 	.word	0x200001b0

08018d9c <GUI_Text_lambda_d>:



void GUI_Text_lambda_d(uint16_t X, uint16_t Y)
{
 8018d9c:	b538      	push	{r3, r4, r5, lr}
 8018d9e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018da0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018da4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018da6:	f005 fcdf 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018daa:	2063      	movs	r0, #99	; 0x63
 8018dac:	f005 fce2 	bl	801e774 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8018db0:	480a      	ldr	r0, [pc, #40]	; (8018ddc <GUI_Text_lambda_d+0x40>)
 8018db2:	f005 fcd3 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, '~'+1);
 8018db6:	4629      	mov	r1, r5
 8018db8:	227f      	movs	r2, #127	; 0x7f
 8018dba:	4620      	mov	r0, r4
 8018dbc:	f005 fd98 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 8018dc0:	4807      	ldr	r0, [pc, #28]	; (8018de0 <GUI_Text_lambda_d+0x44>)
 8018dc2:	f005 fccb 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+15, Y+7, 'd');
 8018dc6:	1de9      	adds	r1, r5, #7
 8018dc8:	f104 000f 	add.w	r0, r4, #15
 8018dcc:	2264      	movs	r2, #100	; 0x64
 8018dce:	b289      	uxth	r1, r1
 8018dd0:	b280      	uxth	r0, r0
}
 8018dd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+15, Y+7, 'd');
 8018dd6:	f005 bd8b 	b.w	801e8f0 <TFT_DrawChar>
 8018dda:	bf00      	nop
 8018ddc:	200001b0 	.word	0x200001b0
 8018de0:	200001c0 	.word	0x200001c0

08018de4 <GUI_Text_V_lambda>:
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+15, Y+7, 'c');
}

void GUI_Text_V_lambda(uint16_t X, uint16_t Y)
{
 8018de4:	b538      	push	{r3, r4, r5, lr}
 8018de6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018de8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018dec:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018dee:	f005 fcbb 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018df2:	2063      	movs	r0, #99	; 0x63
 8018df4:	f005 fcbe 	bl	801e774 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 8018df8:	4824      	ldr	r0, [pc, #144]	; (8018e8c <GUI_Text_V_lambda+0xa8>)
 8018dfa:	f005 fcaf 	bl	801e75c <TFT_SetFont>

	TFT_DrawChar(X+13, Y, '(');
 8018dfe:	f104 000d 	add.w	r0, r4, #13
 8018e02:	4629      	mov	r1, r5
 8018e04:	2228      	movs	r2, #40	; 0x28
 8018e06:	b280      	uxth	r0, r0
 8018e08:	f005 fd72 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y, ')');
 8018e0c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8018e10:	4629      	mov	r1, r5
 8018e12:	2229      	movs	r2, #41	; 0x29
 8018e14:	b280      	uxth	r0, r0
 8018e16:	f005 fd6b 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'V');
 8018e1a:	4629      	mov	r1, r5
 8018e1c:	4620      	mov	r0, r4
 8018e1e:	2256      	movs	r2, #86	; 0x56
 8018e20:	f005 fd66 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y, '~'+1);
 8018e24:	f104 001a 	add.w	r0, r4, #26
 8018e28:	4629      	mov	r1, r5
 8018e2a:	227f      	movs	r2, #127	; 0x7f
 8018e2c:	b280      	uxth	r0, r0
 8018e2e:	f005 fd5f 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y, '/');
 8018e32:	f104 0035 	add.w	r0, r4, #53	; 0x35
 8018e36:	4629      	mov	r1, r5
 8018e38:	222f      	movs	r2, #47	; 0x2f
 8018e3a:	b280      	uxth	r0, r0
 8018e3c:	f005 fd58 	bl	801e8f0 <TFT_DrawChar>
		
	TFT_DrawChar(X+80, Y, '('-1);
 8018e40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018e44:	4629      	mov	r1, r5
 8018e46:	2227      	movs	r2, #39	; 0x27
 8018e48:	b280      	uxth	r0, r0
 8018e4a:	f005 fd51 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y, '(');
 8018e4e:	f104 005a 	add.w	r0, r4, #90	; 0x5a
 8018e52:	4629      	mov	r1, r5
 8018e54:	2228      	movs	r2, #40	; 0x28
 8018e56:	b280      	uxth	r0, r0
 8018e58:	f005 fd4a 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+117, Y, ')');
 8018e5c:	f104 0075 	add.w	r0, r4, #117	; 0x75
 8018e60:	4629      	mov	r1, r5
 8018e62:	2229      	movs	r2, #41	; 0x29
 8018e64:	b280      	uxth	r0, r0
 8018e66:	f005 fd43 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+68, Y, 'V');
 8018e6a:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8018e6e:	4629      	mov	r1, r5
 8018e70:	2256      	movs	r2, #86	; 0x56
 8018e72:	b280      	uxth	r0, r0
 8018e74:	f005 fd3c 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, '~'+1);
 8018e78:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8018e7c:	4629      	mov	r1, r5
 8018e7e:	227f      	movs	r2, #127	; 0x7f
 8018e80:	b280      	uxth	r0, r0
		
}
 8018e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, '~'+1);
 8018e86:	f005 bd33 	b.w	801e8f0 <TFT_DrawChar>
 8018e8a:	bf00      	nop
 8018e8c:	200001b0 	.word	0x200001b0

08018e90 <GUI_Text_deltaE>:

void GUI_Text_deltaE(uint16_t X, uint16_t Y)
{
 8018e90:	b538      	push	{r3, r4, r5, lr}
 8018e92:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018e94:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018e98:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018e9a:	f005 fc65 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018e9e:	2063      	movs	r0, #99	; 0x63
 8018ea0:	f005 fc68 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8018ea4:	4808      	ldr	r0, [pc, #32]	; (8018ec8 <GUI_Text_deltaE+0x38>)
 8018ea6:	f005 fc59 	bl	801e75c <TFT_SetFont>

	TFT_DrawChar(X, Y, '~'+2);
 8018eaa:	4629      	mov	r1, r5
 8018eac:	4620      	mov	r0, r4
 8018eae:	2280      	movs	r2, #128	; 0x80
 8018eb0:	f005 fd1e 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+14, Y, 'E');
 8018eb4:	f104 000e 	add.w	r0, r4, #14
 8018eb8:	4629      	mov	r1, r5
 8018eba:	2245      	movs	r2, #69	; 0x45
 8018ebc:	b280      	uxth	r0, r0
}
 8018ebe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+14, Y, 'E');
 8018ec2:	f005 bd15 	b.w	801e8f0 <TFT_DrawChar>
 8018ec6:	bf00      	nop
 8018ec8:	200001b0 	.word	0x200001b0

08018ecc <GUI_TextEn_umol>:

void GUI_TextEn_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 8018ecc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018ed0:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018ed2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018ed6:	4616      	mov	r6, r2
 8018ed8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8018eda:	f005 fc45 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018ede:	2063      	movs	r0, #99	; 0x63
 8018ee0:	f005 fc48 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 8018ee4:	482b      	ldr	r0, [pc, #172]	; (8018f94 <GUI_TextEn_umol+0xc8>)
 8018ee6:	f005 fc39 	bl	801e75c <TFT_SetFont>
	
	if(deg){
 8018eea:	2e00      	cmp	r6, #0
 8018eec:	d050      	beq.n	8018f90 <GUI_TextEn_umol+0xc4>
			TFT_DrawChar(X, Y, 'm'-65);
 8018eee:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X, Y, 'z'-64);
 8018ef0:	4629      	mov	r1, r5
 8018ef2:	4620      	mov	r0, r4
 8018ef4:	f005 fcfc 	bl	801e8f0 <TFT_DrawChar>
	}
	TFT_DrawChar(X+8, Y, 'm'-65);
	TFT_DrawChar(X+16, Y, 'o'-65);
 8018ef8:	f104 0710 	add.w	r7, r4, #16
	TFT_DrawChar(X+8, Y, 'm'-65);
 8018efc:	f104 0008 	add.w	r0, r4, #8
 8018f00:	4629      	mov	r1, r5
	TFT_DrawChar(X+16, Y, 'o'-65);
 8018f02:	b2bf      	uxth	r7, r7
	TFT_DrawChar(X+8, Y, 'm'-65);
 8018f04:	222c      	movs	r2, #44	; 0x2c
 8018f06:	b280      	uxth	r0, r0
 8018f08:	f005 fcf2 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'o'-65);
 8018f0c:	4629      	mov	r1, r5
 8018f0e:	4638      	mov	r0, r7
 8018f10:	222e      	movs	r2, #46	; 0x2e
 8018f12:	f005 fced 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+22, Y, 'l'-65);
 8018f16:	f104 0016 	add.w	r0, r4, #22
 8018f1a:	4629      	mov	r1, r5
 8018f1c:	222b      	movs	r2, #43	; 0x2b
 8018f1e:	b280      	uxth	r0, r0
 8018f20:	f005 fce6 	bl	801e8f0 <TFT_DrawChar>
	
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8018f24:	f105 030a 	add.w	r3, r5, #10
 8018f28:	b29b      	uxth	r3, r3
 8018f2a:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8018f2e:	f104 0219 	add.w	r2, r4, #25
 8018f32:	4619      	mov	r1, r3
 8018f34:	4620      	mov	r0, r4
 8018f36:	f8cd 8000 	str.w	r8, [sp]
 8018f3a:	b292      	uxth	r2, r2
	
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8018f3c:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+25, Y+10, TFT_White);
 8018f40:	f005 f986 	bl	801e250 <TFT_DrawLine>
	TFT_DrawChar(X+10, Y+11, 'z'-63);
 8018f44:	b2b6      	uxth	r6, r6
 8018f46:	f104 000a 	add.w	r0, r4, #10
 8018f4a:	4631      	mov	r1, r6
 8018f4c:	223b      	movs	r2, #59	; 0x3b
 8018f4e:	b280      	uxth	r0, r0
 8018f50:	f005 fcce 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+2, Y+11, 'm'-65);
 8018f54:	1ca0      	adds	r0, r4, #2
 8018f56:	4631      	mov	r1, r6
 8018f58:	222c      	movs	r2, #44	; 0x2c
 8018f5a:	b280      	uxth	r0, r0
 8018f5c:	f005 fcc8 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawRectangle(X+16, Y+14, X+17, Y+15, TFT_White);
 8018f60:	f105 030f 	add.w	r3, r5, #15
 8018f64:	f104 0211 	add.w	r2, r4, #17
 8018f68:	f105 010e 	add.w	r1, r5, #14
 8018f6c:	4638      	mov	r0, r7
 8018f6e:	f8cd 8000 	str.w	r8, [sp]
 8018f72:	b29b      	uxth	r3, r3
 8018f74:	b292      	uxth	r2, r2
 8018f76:	b289      	uxth	r1, r1
 8018f78:	f005 f9df 	bl	801e33a <TFT_DrawRectangle>
	TFT_DrawChar(X+19, Y+11, 's'-65);
 8018f7c:	f104 0013 	add.w	r0, r4, #19
 8018f80:	2232      	movs	r2, #50	; 0x32
 8018f82:	4631      	mov	r1, r6
 8018f84:	b280      	uxth	r0, r0
}
 8018f86:	b002      	add	sp, #8
 8018f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+19, Y+11, 's'-65);
 8018f8c:	f005 bcb0 	b.w	801e8f0 <TFT_DrawChar>
			TFT_DrawChar(X, Y, 'z'-64);
 8018f90:	223a      	movs	r2, #58	; 0x3a
 8018f92:	e7ad      	b.n	8018ef0 <GUI_TextEn_umol+0x24>
 8018f94:	20000190 	.word	0x20000190

08018f98 <GUI_TextEn_umol_sr>:

void GUI_TextEn_umol_sr(uint16_t X, uint16_t Y, uint8_t deg)
{
 8018f98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8018f9c:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8018f9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8018fa2:	460d      	mov	r5, r1
 8018fa4:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 8018fa6:	f005 fbdf 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8018faa:	2063      	movs	r0, #99	; 0x63
 8018fac:	f005 fbe2 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font12EN_arch_small);
 8018fb0:	483b      	ldr	r0, [pc, #236]	; (80190a0 <GUI_TextEn_umol_sr+0x108>)
 8018fb2:	f005 fbd3 	bl	801e75c <TFT_SetFont>
 8018fb6:	f104 0009 	add.w	r0, r4, #9
	
	if(deg){
 8018fba:	2e00      	cmp	r6, #0
 8018fbc:	d06d      	beq.n	801909a <GUI_TextEn_umol_sr+0x102>
			TFT_DrawChar(X+9, Y, 'm'-65);
 8018fbe:	222c      	movs	r2, #44	; 0x2c
	} else
	{
			TFT_DrawChar(X+9, Y, 'z'-64);
 8018fc0:	4629      	mov	r1, r5
 8018fc2:	b280      	uxth	r0, r0
 8018fc4:	f005 fc94 	bl	801e8f0 <TFT_DrawChar>
	}
	TFT_DrawChar(X+17, Y, 'm'-65);
 8018fc8:	f104 0011 	add.w	r0, r4, #17
 8018fcc:	4629      	mov	r1, r5
 8018fce:	222c      	movs	r2, #44	; 0x2c
 8018fd0:	b280      	uxth	r0, r0
 8018fd2:	f005 fc8d 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+25, Y, 'o'-65);
 8018fd6:	f104 0019 	add.w	r0, r4, #25
 8018fda:	4629      	mov	r1, r5
 8018fdc:	222e      	movs	r2, #46	; 0x2e
 8018fde:	b280      	uxth	r0, r0
 8018fe0:	f005 fc86 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'l'-65);
 8018fe4:	f104 001f 	add.w	r0, r4, #31
 8018fe8:	4629      	mov	r1, r5
 8018fea:	222b      	movs	r2, #43	; 0x2b
 8018fec:	b280      	uxth	r0, r0
 8018fee:	f005 fc7f 	bl	801e8f0 <TFT_DrawChar>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8018ff2:	f105 030a 	add.w	r3, r5, #10
 8018ff6:	b29b      	uxth	r3, r3
 8018ff8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 8018ffc:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 8019000:	1ce0      	adds	r0, r4, #3
 8019002:	4619      	mov	r1, r3
 8019004:	f8cd 8000 	str.w	r8, [sp]
 8019008:	b292      	uxth	r2, r2
 801900a:	b280      	uxth	r0, r0
	
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 801900c:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 8019010:	f005 f91e 	bl	801e250 <TFT_DrawLine>
	TFT_DrawChar(X+13, Y+11, 'z'-63);
 8019014:	b2b6      	uxth	r6, r6
 8019016:	f104 000d 	add.w	r0, r4, #13
 801901a:	4631      	mov	r1, r6
 801901c:	223b      	movs	r2, #59	; 0x3b
 801901e:	b280      	uxth	r0, r0
 8019020:	f005 fc66 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 8019024:	1d60      	adds	r0, r4, #5
 8019026:	4631      	mov	r1, r6
 8019028:	222c      	movs	r2, #44	; 0x2c
 801902a:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 801902c:	f105 070e 	add.w	r7, r5, #14
 8019030:	350f      	adds	r5, #15
	TFT_DrawChar(X+5, Y+11, 'm'-65);
 8019032:	f005 fc5d 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 8019036:	b2bf      	uxth	r7, r7
 8019038:	b2ad      	uxth	r5, r5
 801903a:	f104 0214 	add.w	r2, r4, #20
 801903e:	f104 0013 	add.w	r0, r4, #19
 8019042:	462b      	mov	r3, r5
 8019044:	4639      	mov	r1, r7
 8019046:	f8cd 8000 	str.w	r8, [sp]
 801904a:	b292      	uxth	r2, r2
 801904c:	b280      	uxth	r0, r0
 801904e:	f005 f974 	bl	801e33a <TFT_DrawRectangle>
	TFT_DrawChar(X+22, Y+11, 's'-65);
 8019052:	f104 0016 	add.w	r0, r4, #22
 8019056:	4631      	mov	r1, r6
 8019058:	2232      	movs	r2, #50	; 0x32
 801905a:	b280      	uxth	r0, r0
 801905c:	f005 fc48 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawRectangle(X+30, Y+14, X+36, Y+15, TFT_White);
 8019060:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8019064:	f104 001e 	add.w	r0, r4, #30
 8019068:	462b      	mov	r3, r5
 801906a:	4639      	mov	r1, r7
 801906c:	f8cd 8000 	str.w	r8, [sp]
 8019070:	b292      	uxth	r2, r2
 8019072:	b280      	uxth	r0, r0
 8019074:	f005 f961 	bl	801e33a <TFT_DrawRectangle>
	TFT_DrawChar(X+32, Y+11, 's'-65);
 8019078:	f104 0020 	add.w	r0, r4, #32
 801907c:	4631      	mov	r1, r6
 801907e:	2232      	movs	r2, #50	; 0x32
 8019080:	b280      	uxth	r0, r0
 8019082:	f005 fc35 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 8019086:	f104 0027 	add.w	r0, r4, #39	; 0x27
 801908a:	2231      	movs	r2, #49	; 0x31
 801908c:	4631      	mov	r1, r6
 801908e:	b280      	uxth	r0, r0
}
 8019090:	b002      	add	sp, #8
 8019092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawChar(X+39, Y+11, 'r'-65);
 8019096:	f005 bc2b 	b.w	801e8f0 <TFT_DrawChar>
			TFT_DrawChar(X+9, Y, 'z'-64);
 801909a:	223a      	movs	r2, #58	; 0x3a
 801909c:	e790      	b.n	8018fc0 <GUI_TextEn_umol_sr+0x28>
 801909e:	bf00      	nop
 80190a0:	20000190 	.word	0x20000190

080190a4 <GUI_Text_On>:


void GUI_Text_On(uint16_t X, uint16_t Y)
{
 80190a4:	b538      	push	{r3, r4, r5, lr}
 80190a6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 80190a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80190ac:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 80190ae:	f005 fb5b 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80190b2:	2063      	movs	r0, #99	; 0x63
 80190b4:	f005 fb5e 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80190b8:	480a      	ldr	r0, [pc, #40]	; (80190e4 <GUI_Text_On+0x40>)
 80190ba:	f005 fb4f 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 80190be:	4629      	mov	r1, r5
 80190c0:	224f      	movs	r2, #79	; 0x4f
 80190c2:	4620      	mov	r0, r4
 80190c4:	f005 fc14 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 80190c8:	4807      	ldr	r0, [pc, #28]	; (80190e8 <GUI_Text_On+0x44>)
 80190ca:	f005 fb47 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 80190ce:	1ca9      	adds	r1, r5, #2
 80190d0:	f104 0010 	add.w	r0, r4, #16
 80190d4:	226e      	movs	r2, #110	; 0x6e
 80190d6:	b289      	uxth	r1, r1
 80190d8:	b280      	uxth	r0, r0
	
}
 80190da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+16, Y+2, 'n');
 80190de:	f005 bc07 	b.w	801e8f0 <TFT_DrawChar>
 80190e2:	bf00      	nop
 80190e4:	200001b0 	.word	0x200001b0
 80190e8:	200001c0 	.word	0x200001c0

080190ec <GUI_Text_Off>:

void GUI_Text_Off(uint16_t X, uint16_t Y)
{
 80190ec:	b570      	push	{r4, r5, r6, lr}
 80190ee:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80190f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80190f4:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 80190f6:	f005 fb37 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80190fa:	2063      	movs	r0, #99	; 0x63
 80190fc:	f005 fb3a 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+13, Y+2, 'f');
 8019100:	1cb4      	adds	r4, r6, #2
	TFT_SetFont(&Font16EN_arch_small);
 8019102:	480e      	ldr	r0, [pc, #56]	; (801913c <GUI_Text_Off+0x50>)
 8019104:	f005 fb2a 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'f');
 8019108:	b2a4      	uxth	r4, r4
 801910a:	f105 000d 	add.w	r0, r5, #13
 801910e:	4621      	mov	r1, r4
 8019110:	2266      	movs	r2, #102	; 0x66
 8019112:	b280      	uxth	r0, r0
 8019114:	f005 fbec 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y+2, 'f');
 8019118:	f105 0017 	add.w	r0, r5, #23
 801911c:	4621      	mov	r1, r4
 801911e:	2266      	movs	r2, #102	; 0x66
 8019120:	b280      	uxth	r0, r0
 8019122:	f005 fbe5 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 8019126:	4806      	ldr	r0, [pc, #24]	; (8019140 <GUI_Text_Off+0x54>)
 8019128:	f005 fb18 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'O');
 801912c:	4631      	mov	r1, r6
 801912e:	4628      	mov	r0, r5
 8019130:	224f      	movs	r2, #79	; 0x4f
}
 8019132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	TFT_DrawChar(X, Y, 'O');
 8019136:	f005 bbdb 	b.w	801e8f0 <TFT_DrawChar>
 801913a:	bf00      	nop
 801913c:	200001c0 	.word	0x200001c0
 8019140:	200001b0 	.word	0x200001b0

08019144 <GUI_Text_EbEr>:

void GUI_Text_EbEr(uint16_t X, uint16_t Y)
{
 8019144:	b538      	push	{r3, r4, r5, lr}
 8019146:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019148:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801914c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801914e:	f005 fb0b 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019152:	2063      	movs	r0, #99	; 0x63
 8019154:	f005 fb0e 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8019158:	4815      	ldr	r0, [pc, #84]	; (80191b0 <GUI_Text_EbEr+0x6c>)
 801915a:	f005 faff 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 801915e:	1ca1      	adds	r1, r4, #2
 8019160:	f105 0013 	add.w	r0, r5, #19
 8019164:	222c      	movs	r2, #44	; 0x2c
 8019166:	b289      	uxth	r1, r1
 8019168:	b280      	uxth	r0, r0
 801916a:	f005 fbc1 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'E');
 801916e:	4621      	mov	r1, r4
 8019170:	4628      	mov	r0, r5
 8019172:	2245      	movs	r2, #69	; 0x45
 8019174:	f005 fbbc 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y, 'E');
 8019178:	f105 0020 	add.w	r0, r5, #32
 801917c:	4621      	mov	r1, r4
 801917e:	2245      	movs	r2, #69	; 0x45
 8019180:	b280      	uxth	r0, r0
 8019182:	f005 fbb5 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 8019186:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 8019188:	480a      	ldr	r0, [pc, #40]	; (80191b4 <GUI_Text_EbEr+0x70>)
 801918a:	f005 fae7 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 801918e:	b2a4      	uxth	r4, r4
 8019190:	f105 0012 	add.w	r0, r5, #18
 8019194:	4621      	mov	r1, r4
 8019196:	2242      	movs	r2, #66	; 0x42
 8019198:	b280      	uxth	r0, r0
 801919a:	f005 fba9 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+12, 'R');
 801919e:	f105 0032 	add.w	r0, r5, #50	; 0x32
 80191a2:	4621      	mov	r1, r4
 80191a4:	2252      	movs	r2, #82	; 0x52
 80191a6:	b280      	uxth	r0, r0
}
 80191a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+50, Y+12, 'R');
 80191ac:	f005 bba0 	b.w	801e8f0 <TFT_DrawChar>
 80191b0:	200001b0 	.word	0x200001b0
 80191b4:	20000218 	.word	0x20000218

080191b8 <GUI_Text_LbLr>:

void GUI_Text_LbLr(uint16_t X, uint16_t Y)
{
 80191b8:	b538      	push	{r3, r4, r5, lr}
 80191ba:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80191bc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80191c0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80191c2:	f005 fad1 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80191c6:	2063      	movs	r0, #99	; 0x63
 80191c8:	f005 fad4 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 80191cc:	4815      	ldr	r0, [pc, #84]	; (8019224 <GUI_Text_LbLr+0x6c>)
 80191ce:	f005 fac5 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, ',');
 80191d2:	1ca1      	adds	r1, r4, #2
 80191d4:	f105 0013 	add.w	r0, r5, #19
 80191d8:	222c      	movs	r2, #44	; 0x2c
 80191da:	b289      	uxth	r1, r1
 80191dc:	b280      	uxth	r0, r0
 80191de:	f005 fb87 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'L');
 80191e2:	4621      	mov	r1, r4
 80191e4:	4628      	mov	r0, r5
 80191e6:	224c      	movs	r2, #76	; 0x4c
 80191e8:	f005 fb82 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y, 'L');
 80191ec:	f105 001e 	add.w	r0, r5, #30
 80191f0:	4621      	mov	r1, r4
 80191f2:	224c      	movs	r2, #76	; 0x4c
 80191f4:	b280      	uxth	r0, r0
 80191f6:	f005 fb7b 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font8);
	TFT_DrawChar(X+18, Y+12, 'B');
 80191fa:	340c      	adds	r4, #12
	TFT_SetFont(&Font8);
 80191fc:	480a      	ldr	r0, [pc, #40]	; (8019228 <GUI_Text_LbLr+0x70>)
 80191fe:	f005 faad 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+18, Y+12, 'B');
 8019202:	b2a4      	uxth	r4, r4
 8019204:	f105 0012 	add.w	r0, r5, #18
 8019208:	4621      	mov	r1, r4
 801920a:	2242      	movs	r2, #66	; 0x42
 801920c:	b280      	uxth	r0, r0
 801920e:	f005 fb6f 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+48, Y+12, 'R');
 8019212:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8019216:	4621      	mov	r1, r4
 8019218:	2252      	movs	r2, #82	; 0x52
 801921a:	b280      	uxth	r0, r0
}
 801921c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+48, Y+12, 'R');
 8019220:	f005 bb66 	b.w	801e8f0 <TFT_DrawChar>
 8019224:	200001b0 	.word	0x200001b0
 8019228:	20000218 	.word	0x20000218

0801922c <GUI_TextEn_Language>:
///////////////////////////////////////////////////////////////////////
void GUI_TextEn_Language(uint16_t X, uint16_t Y)
{	/* Print word 'Language' */
 801922c:	b538      	push	{r3, r4, r5, lr}
 801922e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019230:	f64f 70ff 	movw	r0, #65535	; 0xffff
{	/* Print word 'Language' */
 8019234:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019236:	f005 fa97 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801923a:	2063      	movs	r0, #99	; 0x63
 801923c:	f005 fa9a 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019240:	481f      	ldr	r0, [pc, #124]	; (80192c0 <GUI_TextEn_Language+0x94>)
 8019242:	f005 fa8b 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 8019246:	4621      	mov	r1, r4
 8019248:	224c      	movs	r2, #76	; 0x4c
 801924a:	4628      	mov	r0, r5
 801924c:	f005 fb50 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+14, Y+2, 'a');
 8019250:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019252:	481c      	ldr	r0, [pc, #112]	; (80192c4 <GUI_TextEn_Language+0x98>)
	TFT_DrawChar(X+14, Y+2, 'a');
 8019254:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019256:	f005 fa81 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+14, Y+2, 'a');
 801925a:	f105 000e 	add.w	r0, r5, #14
 801925e:	4621      	mov	r1, r4
 8019260:	2261      	movs	r2, #97	; 0x61
 8019262:	b280      	uxth	r0, r0
 8019264:	f005 fb44 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+26, Y+2, 'n');
 8019268:	f105 001a 	add.w	r0, r5, #26
 801926c:	4621      	mov	r1, r4
 801926e:	226e      	movs	r2, #110	; 0x6e
 8019270:	b280      	uxth	r0, r0
 8019272:	f005 fb3d 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+39, Y+2, 'g');
 8019276:	f105 0027 	add.w	r0, r5, #39	; 0x27
 801927a:	4621      	mov	r1, r4
 801927c:	2267      	movs	r2, #103	; 0x67
 801927e:	b280      	uxth	r0, r0
 8019280:	f005 fb36 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'a');
 8019284:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8019288:	4621      	mov	r1, r4
 801928a:	2261      	movs	r2, #97	; 0x61
 801928c:	b280      	uxth	r0, r0
 801928e:	f005 fb2f 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+52, Y+2, 'u');
 8019292:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8019296:	4621      	mov	r1, r4
 8019298:	2275      	movs	r2, #117	; 0x75
 801929a:	b280      	uxth	r0, r0
 801929c:	f005 fb28 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+77, Y+2, 'g');
 80192a0:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 80192a4:	4621      	mov	r1, r4
 80192a6:	2267      	movs	r2, #103	; 0x67
 80192a8:	b280      	uxth	r0, r0
 80192aa:	f005 fb21 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+90, Y+2, 'e');
 80192ae:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 80192b2:	4621      	mov	r1, r4
 80192b4:	2265      	movs	r2, #101	; 0x65
 80192b6:	b280      	uxth	r0, r0
}
 80192b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+90, Y+2, 'e');
 80192bc:	f005 bb18 	b.w	801e8f0 <TFT_DrawChar>
 80192c0:	200001b8 	.word	0x200001b8
 80192c4:	200001c8 	.word	0x200001c8

080192c8 <GUI_TextEn_English>:
void GUI_TextEn_English(uint16_t X, uint16_t Y)
{
 80192c8:	b538      	push	{r3, r4, r5, lr}
 80192ca:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80192cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80192d0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80192d2:	f005 fa49 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80192d6:	2063      	movs	r0, #99	; 0x63
 80192d8:	f005 fa4c 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80192dc:	481c      	ldr	r0, [pc, #112]	; (8019350 <GUI_TextEn_English+0x88>)
 80192de:	f005 fa3d 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'E');
 80192e2:	4621      	mov	r1, r4
 80192e4:	2245      	movs	r2, #69	; 0x45
 80192e6:	4628      	mov	r0, r5
 80192e8:	f005 fb02 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'n');
 80192ec:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80192ee:	4819      	ldr	r0, [pc, #100]	; (8019354 <GUI_TextEn_English+0x8c>)
	TFT_DrawChar(X+16, Y+2, 'n');
 80192f0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80192f2:	f005 fa33 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'n');
 80192f6:	f105 0010 	add.w	r0, r5, #16
 80192fa:	4621      	mov	r1, r4
 80192fc:	226e      	movs	r2, #110	; 0x6e
 80192fe:	b280      	uxth	r0, r0
 8019300:	f005 faf6 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'g');
 8019304:	f105 001d 	add.w	r0, r5, #29
 8019308:	4621      	mov	r1, r4
 801930a:	2267      	movs	r2, #103	; 0x67
 801930c:	b280      	uxth	r0, r0
 801930e:	f005 faef 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'l');
 8019312:	f105 002a 	add.w	r0, r5, #42	; 0x2a
 8019316:	4621      	mov	r1, r4
 8019318:	226c      	movs	r2, #108	; 0x6c
 801931a:	b280      	uxth	r0, r0
 801931c:	f005 fae8 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+47, Y+2, 'i');
 8019320:	f105 002f 	add.w	r0, r5, #47	; 0x2f
 8019324:	4621      	mov	r1, r4
 8019326:	2269      	movs	r2, #105	; 0x69
 8019328:	b280      	uxth	r0, r0
 801932a:	f005 fae1 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 's');
 801932e:	f105 0035 	add.w	r0, r5, #53	; 0x35
 8019332:	4621      	mov	r1, r4
 8019334:	2273      	movs	r2, #115	; 0x73
 8019336:	b280      	uxth	r0, r0
 8019338:	f005 fada 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+65, Y+2, 'h');
 801933c:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8019340:	4621      	mov	r1, r4
 8019342:	2268      	movs	r2, #104	; 0x68
 8019344:	b280      	uxth	r0, r0
	

}
 8019346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+65, Y+2, 'h');
 801934a:	f005 bad1 	b.w	801e8f0 <TFT_DrawChar>
 801934e:	bf00      	nop
 8019350:	200001b8 	.word	0x200001b8
 8019354:	200001c8 	.word	0x200001c8

08019358 <GUI_TextEn_Info>:
void GUI_TextEn_Info(uint16_t X, uint16_t Y)
{
 8019358:	b538      	push	{r3, r4, r5, lr}
 801935a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801935c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019360:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019362:	f005 fa01 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019366:	2063      	movs	r0, #99	; 0x63
 8019368:	f005 fa04 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801936c:	4811      	ldr	r0, [pc, #68]	; (80193b4 <GUI_TextEn_Info+0x5c>)
 801936e:	f005 f9f5 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8019372:	4621      	mov	r1, r4
 8019374:	2249      	movs	r2, #73	; 0x49
 8019376:	4628      	mov	r0, r5
 8019378:	f005 faba 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+18, Y+2, 'f');
 801937c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801937e:	480e      	ldr	r0, [pc, #56]	; (80193b8 <GUI_TextEn_Info+0x60>)
 8019380:	f005 f9ec 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+18, Y+2, 'f');
 8019384:	b2a4      	uxth	r4, r4
 8019386:	f105 0012 	add.w	r0, r5, #18
 801938a:	4621      	mov	r1, r4
 801938c:	2266      	movs	r2, #102	; 0x66
 801938e:	b280      	uxth	r0, r0
 8019390:	f005 faae 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+8, Y+2, 'n');
 8019394:	f105 0008 	add.w	r0, r5, #8
 8019398:	4621      	mov	r1, r4
 801939a:	226e      	movs	r2, #110	; 0x6e
 801939c:	b280      	uxth	r0, r0
 801939e:	f005 faa7 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'o');
 80193a2:	f105 001d 	add.w	r0, r5, #29
 80193a6:	4621      	mov	r1, r4
 80193a8:	226f      	movs	r2, #111	; 0x6f
 80193aa:	b280      	uxth	r0, r0
}
 80193ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+29, Y+2, 'o');
 80193b0:	f005 ba9e 	b.w	801e8f0 <TFT_DrawChar>
 80193b4:	200001b8 	.word	0x200001b8
 80193b8:	200001c8 	.word	0x200001c8

080193bc <GUI_TextEn_Radiance>:
void GUI_TextEn_Radiance(uint16_t X, uint16_t Y)
{
 80193bc:	b538      	push	{r3, r4, r5, lr}
 80193be:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80193c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80193c4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80193c6:	f005 f9cf 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80193ca:	2063      	movs	r0, #99	; 0x63
 80193cc:	f005 f9d2 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80193d0:	481f      	ldr	r0, [pc, #124]	; (8019450 <GUI_TextEn_Radiance+0x94>)
 80193d2:	f005 f9c3 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'R');
 80193d6:	4621      	mov	r1, r4
 80193d8:	2252      	movs	r2, #82	; 0x52
 80193da:	4628      	mov	r0, r5
 80193dc:	f005 fa88 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+16, Y+2, 'a');
 80193e0:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80193e2:	481c      	ldr	r0, [pc, #112]	; (8019454 <GUI_TextEn_Radiance+0x98>)
	TFT_DrawChar(X+16, Y+2, 'a');
 80193e4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80193e6:	f005 f9b9 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 80193ea:	f105 0010 	add.w	r0, r5, #16
 80193ee:	4621      	mov	r1, r4
 80193f0:	2261      	movs	r2, #97	; 0x61
 80193f2:	b280      	uxth	r0, r0
 80193f4:	f005 fa7c 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'd');
 80193f8:	f105 001c 	add.w	r0, r5, #28
 80193fc:	4621      	mov	r1, r4
 80193fe:	2264      	movs	r2, #100	; 0x64
 8019400:	b280      	uxth	r0, r0
 8019402:	f005 fa75 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 8019406:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801940a:	4621      	mov	r1, r4
 801940c:	2269      	movs	r2, #105	; 0x69
 801940e:	b280      	uxth	r0, r0
 8019410:	f005 fa6e 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'a');
 8019414:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8019418:	4621      	mov	r1, r4
 801941a:	2261      	movs	r2, #97	; 0x61
 801941c:	b280      	uxth	r0, r0
 801941e:	f005 fa67 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+58, Y+2, 'n');
 8019422:	f105 003a 	add.w	r0, r5, #58	; 0x3a
 8019426:	4621      	mov	r1, r4
 8019428:	226e      	movs	r2, #110	; 0x6e
 801942a:	b280      	uxth	r0, r0
 801942c:	f005 fa60 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'c');
 8019430:	f105 0047 	add.w	r0, r5, #71	; 0x47
 8019434:	4621      	mov	r1, r4
 8019436:	2263      	movs	r2, #99	; 0x63
 8019438:	b280      	uxth	r0, r0
 801943a:	f005 fa59 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+83, Y+2, 'e');
 801943e:	f105 0053 	add.w	r0, r5, #83	; 0x53
 8019442:	4621      	mov	r1, r4
 8019444:	2265      	movs	r2, #101	; 0x65
 8019446:	b280      	uxth	r0, r0
}
 8019448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+83, Y+2, 'e');
 801944c:	f005 ba50 	b.w	801e8f0 <TFT_DrawChar>
 8019450:	200001b8 	.word	0x200001b8
 8019454:	200001c8 	.word	0x200001c8

08019458 <GUI_TextEn_Irradiance>:
void GUI_TextEn_Irradiance(uint16_t X, uint16_t Y)
{
 8019458:	b538      	push	{r3, r4, r5, lr}
 801945a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801945c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019460:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019462:	f005 f981 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019466:	2063      	movs	r0, #99	; 0x63
 8019468:	f005 f984 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 801946c:	4826      	ldr	r0, [pc, #152]	; (8019508 <GUI_TextEn_Irradiance+0xb0>)
 801946e:	f005 f975 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8019472:	4621      	mov	r1, r4
 8019474:	2249      	movs	r2, #73	; 0x49
 8019476:	4628      	mov	r0, r5
 8019478:	f005 fa3a 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+9, Y+2, 'r');
 801947c:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 801947e:	4823      	ldr	r0, [pc, #140]	; (801950c <GUI_TextEn_Irradiance+0xb4>)
	TFT_DrawChar(X+9, Y+2, 'r');
 8019480:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019482:	f005 f96b 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+9, Y+2, 'r');
 8019486:	f105 0009 	add.w	r0, r5, #9
 801948a:	4621      	mov	r1, r4
 801948c:	2272      	movs	r2, #114	; 0x72
 801948e:	b280      	uxth	r0, r0
 8019490:	f005 fa2e 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+21, Y+2, 'r');
 8019494:	f105 0015 	add.w	r0, r5, #21
 8019498:	4621      	mov	r1, r4
 801949a:	2272      	movs	r2, #114	; 0x72
 801949c:	b280      	uxth	r0, r0
 801949e:	f005 fa27 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'a');
 80194a2:	f105 0020 	add.w	r0, r5, #32
 80194a6:	4621      	mov	r1, r4
 80194a8:	2261      	movs	r2, #97	; 0x61
 80194aa:	b280      	uxth	r0, r0
 80194ac:	f005 fa20 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y+2, 'd');
 80194b0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 80194b4:	4621      	mov	r1, r4
 80194b6:	2264      	movs	r2, #100	; 0x64
 80194b8:	b280      	uxth	r0, r0
 80194ba:	f005 fa19 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+57, Y+2, 'i');
 80194be:	f105 0039 	add.w	r0, r5, #57	; 0x39
 80194c2:	4621      	mov	r1, r4
 80194c4:	2269      	movs	r2, #105	; 0x69
 80194c6:	b280      	uxth	r0, r0
 80194c8:	f005 fa12 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+62, Y+2, 'a');
 80194cc:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 80194d0:	4621      	mov	r1, r4
 80194d2:	2261      	movs	r2, #97	; 0x61
 80194d4:	b280      	uxth	r0, r0
 80194d6:	f005 fa0b 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y+2, 'n');
 80194da:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 80194de:	4621      	mov	r1, r4
 80194e0:	226e      	movs	r2, #110	; 0x6e
 80194e2:	b280      	uxth	r0, r0
 80194e4:	f005 fa04 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'c');
 80194e8:	f105 0057 	add.w	r0, r5, #87	; 0x57
 80194ec:	4621      	mov	r1, r4
 80194ee:	2263      	movs	r2, #99	; 0x63
 80194f0:	b280      	uxth	r0, r0
 80194f2:	f005 f9fd 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 80194f6:	f105 0063 	add.w	r0, r5, #99	; 0x63
 80194fa:	4621      	mov	r1, r4
 80194fc:	2265      	movs	r2, #101	; 0x65
 80194fe:	b280      	uxth	r0, r0
}
 8019500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+99, Y+2, 'e');
 8019504:	f005 b9f4 	b.w	801e8f0 <TFT_DrawChar>
 8019508:	200001b8 	.word	0x200001b8
 801950c:	200001c8 	.word	0x200001c8

08019510 <GUI_TextMsgEn_HighIrradiance>:

void GUI_TextMsgEn_HighIrradiance(uint16_t X, uint16_t Y)
{
 8019510:	b538      	push	{r3, r4, r5, lr}
 8019512:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019514:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019518:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801951a:	f005 f925 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801951e:	2063      	movs	r0, #99	; 0x63
 8019520:	f005 f928 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019524:	4834      	ldr	r0, [pc, #208]	; (80195f8 <GUI_TextMsgEn_HighIrradiance+0xe8>)
 8019526:	f005 f919 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 801952a:	4621      	mov	r1, r4
 801952c:	2248      	movs	r2, #72	; 0x48
 801952e:	4628      	mov	r0, r5
 8019530:	f005 f9de 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 8019534:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019536:	4831      	ldr	r0, [pc, #196]	; (80195fc <GUI_TextMsgEn_HighIrradiance+0xec>)
  TFT_DrawChar(X+16, Y+2, 'i');
 8019538:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801953a:	f005 f90f 	bl	801e75c <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 801953e:	f105 0010 	add.w	r0, r5, #16
 8019542:	4621      	mov	r1, r4
 8019544:	2269      	movs	r2, #105	; 0x69
 8019546:	b280      	uxth	r0, r0
 8019548:	f005 f9d2 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 801954c:	f105 0017 	add.w	r0, r5, #23
 8019550:	4621      	mov	r1, r4
 8019552:	2267      	movs	r2, #103	; 0x67
 8019554:	b280      	uxth	r0, r0
 8019556:	f005 f9cb 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 801955a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801955e:	4621      	mov	r1, r4
 8019560:	2268      	movs	r2, #104	; 0x68
 8019562:	b280      	uxth	r0, r0
 8019564:	f005 f9c4 	bl	801e8f0 <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'i');
 8019568:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 801956c:	4621      	mov	r1, r4
 801956e:	2269      	movs	r2, #105	; 0x69
 8019570:	b280      	uxth	r0, r0
 8019572:	f005 f9bd 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+67, Y+2, 'r');
 8019576:	f105 0043 	add.w	r0, r5, #67	; 0x43
 801957a:	4621      	mov	r1, r4
 801957c:	2272      	movs	r2, #114	; 0x72
 801957e:	b280      	uxth	r0, r0
 8019580:	f005 f9b6 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+79, Y+2, 'r');
 8019584:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 8019588:	4621      	mov	r1, r4
 801958a:	2272      	movs	r2, #114	; 0x72
 801958c:	b280      	uxth	r0, r0
 801958e:	f005 f9af 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'a');
 8019592:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 8019596:	4621      	mov	r1, r4
 8019598:	2261      	movs	r2, #97	; 0x61
 801959a:	b280      	uxth	r0, r0
 801959c:	f005 f9a8 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+102, Y+2, 'd');
 80195a0:	f105 0066 	add.w	r0, r5, #102	; 0x66
 80195a4:	4621      	mov	r1, r4
 80195a6:	2264      	movs	r2, #100	; 0x64
 80195a8:	b280      	uxth	r0, r0
 80195aa:	f005 f9a1 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+115, Y+2, 'i');
 80195ae:	f105 0073 	add.w	r0, r5, #115	; 0x73
 80195b2:	4621      	mov	r1, r4
 80195b4:	2269      	movs	r2, #105	; 0x69
 80195b6:	b280      	uxth	r0, r0
 80195b8:	f005 f99a 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'a');
 80195bc:	f105 0078 	add.w	r0, r5, #120	; 0x78
 80195c0:	4621      	mov	r1, r4
 80195c2:	2261      	movs	r2, #97	; 0x61
 80195c4:	b280      	uxth	r0, r0
 80195c6:	f005 f993 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'n');
 80195ca:	f105 0084 	add.w	r0, r5, #132	; 0x84
 80195ce:	4621      	mov	r1, r4
 80195d0:	226e      	movs	r2, #110	; 0x6e
 80195d2:	b280      	uxth	r0, r0
 80195d4:	f005 f98c 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+145, Y+2, 'c');
 80195d8:	f105 0091 	add.w	r0, r5, #145	; 0x91
 80195dc:	4621      	mov	r1, r4
 80195de:	2263      	movs	r2, #99	; 0x63
 80195e0:	b280      	uxth	r0, r0
 80195e2:	f005 f985 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+157, Y+2, 'e');
 80195e6:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 80195ea:	4621      	mov	r1, r4
 80195ec:	2265      	movs	r2, #101	; 0x65
 80195ee:	b280      	uxth	r0, r0
}
 80195f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+157, Y+2, 'e');
 80195f4:	f005 b97c 	b.w	801e8f0 <TFT_DrawChar>
 80195f8:	200001b8 	.word	0x200001b8
 80195fc:	200001c8 	.word	0x200001c8

08019600 <GUI_TextMsgEn_HighRadiance>:

void GUI_TextMsgEn_HighRadiance(uint16_t X, uint16_t Y)
{
 8019600:	b538      	push	{r3, r4, r5, lr}
 8019602:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019604:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019608:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801960a:	f005 f8ad 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801960e:	2063      	movs	r0, #99	; 0x63
 8019610:	f005 f8b0 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019614:	482d      	ldr	r0, [pc, #180]	; (80196cc <GUI_TextMsgEn_HighRadiance+0xcc>)
 8019616:	f005 f8a1 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'H');
 801961a:	4621      	mov	r1, r4
 801961c:	2248      	movs	r2, #72	; 0x48
 801961e:	4628      	mov	r0, r5
 8019620:	f005 f966 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'i');
 8019624:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019626:	482a      	ldr	r0, [pc, #168]	; (80196d0 <GUI_TextMsgEn_HighRadiance+0xd0>)
  TFT_DrawChar(X+16, Y+2, 'i');
 8019628:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 801962a:	f005 f897 	bl	801e75c <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'i');
 801962e:	f105 0010 	add.w	r0, r5, #16
 8019632:	4621      	mov	r1, r4
 8019634:	2269      	movs	r2, #105	; 0x69
 8019636:	b280      	uxth	r0, r0
 8019638:	f005 f95a 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+23, Y+2, 'g');
 801963c:	f105 0017 	add.w	r0, r5, #23
 8019640:	4621      	mov	r1, r4
 8019642:	2267      	movs	r2, #103	; 0x67
 8019644:	b280      	uxth	r0, r0
 8019646:	f005 f953 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+36, Y+2, 'h');
 801964a:	f105 0024 	add.w	r0, r5, #36	; 0x24
 801964e:	4621      	mov	r1, r4
 8019650:	2268      	movs	r2, #104	; 0x68
 8019652:	b280      	uxth	r0, r0
 8019654:	f005 f94c 	bl	801e8f0 <TFT_DrawChar>
  
  TFT_DrawChar(X+59, Y+2, 'r');
 8019658:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 801965c:	4621      	mov	r1, r4
 801965e:	2272      	movs	r2, #114	; 0x72
 8019660:	b280      	uxth	r0, r0
 8019662:	f005 f945 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+70, Y+2, 'a');
 8019666:	f105 0046 	add.w	r0, r5, #70	; 0x46
 801966a:	4621      	mov	r1, r4
 801966c:	2261      	movs	r2, #97	; 0x61
 801966e:	b280      	uxth	r0, r0
 8019670:	f005 f93e 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+82, Y+2, 'd');
 8019674:	f105 0052 	add.w	r0, r5, #82	; 0x52
 8019678:	4621      	mov	r1, r4
 801967a:	2264      	movs	r2, #100	; 0x64
 801967c:	b280      	uxth	r0, r0
 801967e:	f005 f937 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'i');
 8019682:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 8019686:	4621      	mov	r1, r4
 8019688:	2269      	movs	r2, #105	; 0x69
 801968a:	b280      	uxth	r0, r0
 801968c:	f005 f930 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+100, Y+2, 'a');
 8019690:	f105 0064 	add.w	r0, r5, #100	; 0x64
 8019694:	4621      	mov	r1, r4
 8019696:	2261      	movs	r2, #97	; 0x61
 8019698:	b280      	uxth	r0, r0
 801969a:	f005 f929 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+112, Y+2, 'n');
 801969e:	f105 0070 	add.w	r0, r5, #112	; 0x70
 80196a2:	4621      	mov	r1, r4
 80196a4:	226e      	movs	r2, #110	; 0x6e
 80196a6:	b280      	uxth	r0, r0
 80196a8:	f005 f922 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+125, Y+2, 'c');
 80196ac:	f105 007d 	add.w	r0, r5, #125	; 0x7d
 80196b0:	4621      	mov	r1, r4
 80196b2:	2263      	movs	r2, #99	; 0x63
 80196b4:	b280      	uxth	r0, r0
 80196b6:	f005 f91b 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+137, Y+2, 'e');
 80196ba:	f105 0089 	add.w	r0, r5, #137	; 0x89
 80196be:	4621      	mov	r1, r4
 80196c0:	2265      	movs	r2, #101	; 0x65
 80196c2:	b280      	uxth	r0, r0
}
 80196c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+137, Y+2, 'e');
 80196c8:	f005 b912 	b.w	801e8f0 <TFT_DrawChar>
 80196cc:	200001b8 	.word	0x200001b8
 80196d0:	200001c8 	.word	0x200001c8

080196d4 <GUI_TextMsgEn_LowRadiance>:

void GUI_TextMsgEn_LowRadiance(uint16_t X, uint16_t Y)
{
 80196d4:	b538      	push	{r3, r4, r5, lr}
 80196d6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80196d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80196dc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80196de:	f005 f843 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80196e2:	2063      	movs	r0, #99	; 0x63
 80196e4:	f005 f846 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80196e8:	482a      	ldr	r0, [pc, #168]	; (8019794 <GUI_TextMsgEn_LowRadiance+0xc0>)
 80196ea:	f005 f837 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 80196ee:	4621      	mov	r1, r4
 80196f0:	224c      	movs	r2, #76	; 0x4c
 80196f2:	4628      	mov	r0, r5
 80196f4:	f005 f8fc 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 80196f8:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80196fa:	4827      	ldr	r0, [pc, #156]	; (8019798 <GUI_TextMsgEn_LowRadiance+0xc4>)
  TFT_DrawChar(X+16, Y+2, 'o');
 80196fc:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80196fe:	f005 f82d 	bl	801e75c <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 8019702:	f105 0010 	add.w	r0, r5, #16
 8019706:	4621      	mov	r1, r4
 8019708:	226f      	movs	r2, #111	; 0x6f
 801970a:	b280      	uxth	r0, r0
 801970c:	f005 f8f0 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 8019710:	f105 001d 	add.w	r0, r5, #29
 8019714:	4621      	mov	r1, r4
 8019716:	2277      	movs	r2, #119	; 0x77
 8019718:	b280      	uxth	r0, r0
 801971a:	f005 f8e9 	bl	801e8f0 <TFT_DrawChar>
  
  TFT_DrawChar(X+54, Y+2, 'r');
 801971e:	f105 0036 	add.w	r0, r5, #54	; 0x36
 8019722:	4621      	mov	r1, r4
 8019724:	2272      	movs	r2, #114	; 0x72
 8019726:	b280      	uxth	r0, r0
 8019728:	f005 f8e2 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+65, Y+2, 'a');
 801972c:	f105 0041 	add.w	r0, r5, #65	; 0x41
 8019730:	4621      	mov	r1, r4
 8019732:	2261      	movs	r2, #97	; 0x61
 8019734:	b280      	uxth	r0, r0
 8019736:	f005 f8db 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+77, Y+2, 'd');
 801973a:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 801973e:	4621      	mov	r1, r4
 8019740:	2264      	movs	r2, #100	; 0x64
 8019742:	b280      	uxth	r0, r0
 8019744:	f005 f8d4 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+90, Y+2, 'i');
 8019748:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 801974c:	4621      	mov	r1, r4
 801974e:	2269      	movs	r2, #105	; 0x69
 8019750:	b280      	uxth	r0, r0
 8019752:	f005 f8cd 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+95, Y+2, 'a');
 8019756:	f105 005f 	add.w	r0, r5, #95	; 0x5f
 801975a:	4621      	mov	r1, r4
 801975c:	2261      	movs	r2, #97	; 0x61
 801975e:	b280      	uxth	r0, r0
 8019760:	f005 f8c6 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+107, Y+2, 'n');
 8019764:	f105 006b 	add.w	r0, r5, #107	; 0x6b
 8019768:	4621      	mov	r1, r4
 801976a:	226e      	movs	r2, #110	; 0x6e
 801976c:	b280      	uxth	r0, r0
 801976e:	f005 f8bf 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+120, Y+2, 'c');
 8019772:	f105 0078 	add.w	r0, r5, #120	; 0x78
 8019776:	4621      	mov	r1, r4
 8019778:	2263      	movs	r2, #99	; 0x63
 801977a:	b280      	uxth	r0, r0
 801977c:	f005 f8b8 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+132, Y+2, 'e');
 8019780:	f105 0084 	add.w	r0, r5, #132	; 0x84
 8019784:	4621      	mov	r1, r4
 8019786:	2265      	movs	r2, #101	; 0x65
 8019788:	b280      	uxth	r0, r0
}
 801978a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+132, Y+2, 'e');
 801978e:	f005 b8af 	b.w	801e8f0 <TFT_DrawChar>
 8019792:	bf00      	nop
 8019794:	200001b8 	.word	0x200001b8
 8019798:	200001c8 	.word	0x200001c8

0801979c <GUI_TextMsgEn_LowIrradiance>:

void GUI_TextMsgEn_LowIrradiance(uint16_t X, uint16_t Y)
{
 801979c:	b538      	push	{r3, r4, r5, lr}
 801979e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80197a0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80197a4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80197a6:	f004 ffdf 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 80197aa:	2063      	movs	r0, #99	; 0x63
 80197ac:	f004 ffe2 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 80197b0:	4831      	ldr	r0, [pc, #196]	; (8019878 <GUI_TextMsgEn_LowIrradiance+0xdc>)
 80197b2:	f004 ffd3 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 80197b6:	4621      	mov	r1, r4
 80197b8:	224c      	movs	r2, #76	; 0x4c
 80197ba:	4628      	mov	r0, r5
 80197bc:	f005 f898 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
  TFT_DrawChar(X+16, Y+2, 'o');
 80197c0:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80197c2:	482e      	ldr	r0, [pc, #184]	; (801987c <GUI_TextMsgEn_LowIrradiance+0xe0>)
  TFT_DrawChar(X+16, Y+2, 'o');
 80197c4:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80197c6:	f004 ffc9 	bl	801e75c <TFT_SetFont>
  TFT_DrawChar(X+16, Y+2, 'o');
 80197ca:	f105 0010 	add.w	r0, r5, #16
 80197ce:	4621      	mov	r1, r4
 80197d0:	226f      	movs	r2, #111	; 0x6f
 80197d2:	b280      	uxth	r0, r0
 80197d4:	f005 f88c 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+29, Y+2, 'w');
 80197d8:	f105 001d 	add.w	r0, r5, #29
 80197dc:	4621      	mov	r1, r4
 80197de:	2277      	movs	r2, #119	; 0x77
 80197e0:	b280      	uxth	r0, r0
 80197e2:	f005 f885 	bl	801e8f0 <TFT_DrawChar>
	
  TFT_DrawChar(X+55, Y+2, 'i');
 80197e6:	f105 0037 	add.w	r0, r5, #55	; 0x37
 80197ea:	4621      	mov	r1, r4
 80197ec:	2269      	movs	r2, #105	; 0x69
 80197ee:	b280      	uxth	r0, r0
 80197f0:	f005 f87e 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+63, Y+2, 'r');
 80197f4:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 80197f8:	4621      	mov	r1, r4
 80197fa:	2272      	movs	r2, #114	; 0x72
 80197fc:	b280      	uxth	r0, r0
 80197fe:	f005 f877 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+75, Y+2, 'r');
 8019802:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 8019806:	4621      	mov	r1, r4
 8019808:	2272      	movs	r2, #114	; 0x72
 801980a:	b280      	uxth	r0, r0
 801980c:	f005 f870 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+86, Y+2, 'a');
 8019810:	f105 0056 	add.w	r0, r5, #86	; 0x56
 8019814:	4621      	mov	r1, r4
 8019816:	2261      	movs	r2, #97	; 0x61
 8019818:	b280      	uxth	r0, r0
 801981a:	f005 f869 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+98, Y+2, 'd');
 801981e:	f105 0062 	add.w	r0, r5, #98	; 0x62
 8019822:	4621      	mov	r1, r4
 8019824:	2264      	movs	r2, #100	; 0x64
 8019826:	b280      	uxth	r0, r0
 8019828:	f005 f862 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+111, Y+2, 'i');
 801982c:	f105 006f 	add.w	r0, r5, #111	; 0x6f
 8019830:	4621      	mov	r1, r4
 8019832:	2269      	movs	r2, #105	; 0x69
 8019834:	b280      	uxth	r0, r0
 8019836:	f005 f85b 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+116, Y+2, 'a');
 801983a:	f105 0074 	add.w	r0, r5, #116	; 0x74
 801983e:	4621      	mov	r1, r4
 8019840:	2261      	movs	r2, #97	; 0x61
 8019842:	b280      	uxth	r0, r0
 8019844:	f005 f854 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+128, Y+2, 'n');
 8019848:	f105 0080 	add.w	r0, r5, #128	; 0x80
 801984c:	4621      	mov	r1, r4
 801984e:	226e      	movs	r2, #110	; 0x6e
 8019850:	b280      	uxth	r0, r0
 8019852:	f005 f84d 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+141, Y+2, 'c');
 8019856:	f105 008d 	add.w	r0, r5, #141	; 0x8d
 801985a:	4621      	mov	r1, r4
 801985c:	2263      	movs	r2, #99	; 0x63
 801985e:	b280      	uxth	r0, r0
 8019860:	f005 f846 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawChar(X+153, Y+2, 'e');
 8019864:	f105 0099 	add.w	r0, r5, #153	; 0x99
 8019868:	4621      	mov	r1, r4
 801986a:	2265      	movs	r2, #101	; 0x65
 801986c:	b280      	uxth	r0, r0
	
	
}
 801986e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawChar(X+153, Y+2, 'e');
 8019872:	f005 b83d 	b.w	801e8f0 <TFT_DrawChar>
 8019876:	bf00      	nop
 8019878:	200001b8 	.word	0x200001b8
 801987c:	200001c8 	.word	0x200001c8

08019880 <GUI_TextEn_Luminance>:
void GUI_TextEn_Luminance(uint16_t X, uint16_t Y)
{
 8019880:	b538      	push	{r3, r4, r5, lr}
 8019882:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019884:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019888:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801988a:	f004 ff6d 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801988e:	2063      	movs	r0, #99	; 0x63
 8019890:	f004 ff70 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019894:	4823      	ldr	r0, [pc, #140]	; (8019924 <GUI_TextEn_Luminance+0xa4>)
 8019896:	f004 ff61 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'L');
 801989a:	4621      	mov	r1, r4
 801989c:	224c      	movs	r2, #76	; 0x4c
 801989e:	4628      	mov	r0, r5
 80198a0:	f005 f826 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+13, Y+2, 'u');
 80198a4:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 80198a6:	4820      	ldr	r0, [pc, #128]	; (8019928 <GUI_TextEn_Luminance+0xa8>)
	TFT_DrawChar(X+13, Y+2, 'u');
 80198a8:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 80198aa:	f004 ff57 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+13, Y+2, 'u');
 80198ae:	f105 000d 	add.w	r0, r5, #13
 80198b2:	4621      	mov	r1, r4
 80198b4:	2275      	movs	r2, #117	; 0x75
 80198b6:	b280      	uxth	r0, r0
 80198b8:	f005 f81a 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'm');
 80198bc:	f105 001b 	add.w	r0, r5, #27
 80198c0:	4621      	mov	r1, r4
 80198c2:	226d      	movs	r2, #109	; 0x6d
 80198c4:	b280      	uxth	r0, r0
 80198c6:	f005 f813 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 'i');
 80198ca:	f105 0029 	add.w	r0, r5, #41	; 0x29
 80198ce:	4621      	mov	r1, r4
 80198d0:	2269      	movs	r2, #105	; 0x69
 80198d2:	b280      	uxth	r0, r0
 80198d4:	f005 f80c 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y+2, 'a');
 80198d8:	f105 003b 	add.w	r0, r5, #59	; 0x3b
 80198dc:	4621      	mov	r1, r4
 80198de:	2261      	movs	r2, #97	; 0x61
 80198e0:	b280      	uxth	r0, r0
 80198e2:	f005 f805 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'n');
 80198e6:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 80198ea:	4621      	mov	r1, r4
 80198ec:	226e      	movs	r2, #110	; 0x6e
 80198ee:	b280      	uxth	r0, r0
 80198f0:	f004 fffe 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+71, Y+2, 'n');
 80198f4:	f105 0047 	add.w	r0, r5, #71	; 0x47
 80198f8:	4621      	mov	r1, r4
 80198fa:	226e      	movs	r2, #110	; 0x6e
 80198fc:	b280      	uxth	r0, r0
 80198fe:	f004 fff7 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+84, Y+2, 'c');
 8019902:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8019906:	4621      	mov	r1, r4
 8019908:	2263      	movs	r2, #99	; 0x63
 801990a:	b280      	uxth	r0, r0
 801990c:	f004 fff0 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+96, Y+2, 'e');
 8019910:	f105 0060 	add.w	r0, r5, #96	; 0x60
 8019914:	4621      	mov	r1, r4
 8019916:	2265      	movs	r2, #101	; 0x65
 8019918:	b280      	uxth	r0, r0
}
 801991a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+96, Y+2, 'e');
 801991e:	f004 bfe7 	b.w	801e8f0 <TFT_DrawChar>
 8019922:	bf00      	nop
 8019924:	200001b8 	.word	0x200001b8
 8019928:	200001c8 	.word	0x200001c8

0801992c <GUI_TextEn_Illuminance>:

void GUI_TextEn_Illuminance(uint16_t X, uint16_t Y)
{
 801992c:	b538      	push	{r3, r4, r5, lr}
 801992e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019930:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019934:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019936:	f004 ff17 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801993a:	2063      	movs	r0, #99	; 0x63
 801993c:	f004 ff1a 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019940:	482a      	ldr	r0, [pc, #168]	; (80199ec <GUI_TextEn_Illuminance+0xc0>)
 8019942:	f004 ff0b 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'I');
 8019946:	4621      	mov	r1, r4
 8019948:	2249      	movs	r2, #73	; 0x49
 801994a:	4628      	mov	r0, r5
 801994c:	f004 ffd0 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+8, Y+2, 'l');
 8019950:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019952:	4827      	ldr	r0, [pc, #156]	; (80199f0 <GUI_TextEn_Illuminance+0xc4>)
	TFT_DrawChar(X+8, Y+2, 'l');
 8019954:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019956:	f004 ff01 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+8, Y+2, 'l');
 801995a:	f105 0008 	add.w	r0, r5, #8
 801995e:	4621      	mov	r1, r4
 8019960:	226c      	movs	r2, #108	; 0x6c
 8019962:	b280      	uxth	r0, r0
 8019964:	f004 ffc4 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+13, Y+2, 'l');
 8019968:	f105 000d 	add.w	r0, r5, #13
 801996c:	4621      	mov	r1, r4
 801996e:	226c      	movs	r2, #108	; 0x6c
 8019970:	b280      	uxth	r0, r0
 8019972:	f004 ffbd 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+18, Y+2, 'u');
 8019976:	f105 0012 	add.w	r0, r5, #18
 801997a:	4621      	mov	r1, r4
 801997c:	2275      	movs	r2, #117	; 0x75
 801997e:	b280      	uxth	r0, r0
 8019980:	f004 ffb6 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+32, Y+2, 'm');
 8019984:	f105 0020 	add.w	r0, r5, #32
 8019988:	4621      	mov	r1, r4
 801998a:	226d      	movs	r2, #109	; 0x6d
 801998c:	b280      	uxth	r0, r0
 801998e:	f004 ffaf 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y+2, 'i');
 8019992:	f105 002e 	add.w	r0, r5, #46	; 0x2e
 8019996:	4621      	mov	r1, r4
 8019998:	2269      	movs	r2, #105	; 0x69
 801999a:	b280      	uxth	r0, r0
 801999c:	f004 ffa8 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+64, Y+2, 'a');
 80199a0:	f105 0040 	add.w	r0, r5, #64	; 0x40
 80199a4:	4621      	mov	r1, r4
 80199a6:	2261      	movs	r2, #97	; 0x61
 80199a8:	b280      	uxth	r0, r0
 80199aa:	f004 ffa1 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+51, Y+2, 'n');
 80199ae:	f105 0033 	add.w	r0, r5, #51	; 0x33
 80199b2:	4621      	mov	r1, r4
 80199b4:	226e      	movs	r2, #110	; 0x6e
 80199b6:	b280      	uxth	r0, r0
 80199b8:	f004 ff9a 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'n');
 80199bc:	f105 004c 	add.w	r0, r5, #76	; 0x4c
 80199c0:	4621      	mov	r1, r4
 80199c2:	226e      	movs	r2, #110	; 0x6e
 80199c4:	b280      	uxth	r0, r0
 80199c6:	f004 ff93 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'c');
 80199ca:	f105 0059 	add.w	r0, r5, #89	; 0x59
 80199ce:	4621      	mov	r1, r4
 80199d0:	2263      	movs	r2, #99	; 0x63
 80199d2:	b280      	uxth	r0, r0
 80199d4:	f004 ff8c 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 80199d8:	f105 0065 	add.w	r0, r5, #101	; 0x65
 80199dc:	4621      	mov	r1, r4
 80199de:	2265      	movs	r2, #101	; 0x65
 80199e0:	b280      	uxth	r0, r0
}
 80199e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+101, Y+2, 'e');
 80199e6:	f004 bf83 	b.w	801e8f0 <TFT_DrawChar>
 80199ea:	bf00      	nop
 80199ec:	200001b8 	.word	0x200001b8
 80199f0:	200001c8 	.word	0x200001c8

080199f4 <GUI_TextEn_Mode>:
void GUI_TextEn_Mode(uint16_t X, uint16_t Y)
{
 80199f4:	b538      	push	{r3, r4, r5, lr}
 80199f6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 80199f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 80199fc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 80199fe:	f004 feb3 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019a02:	2063      	movs	r0, #99	; 0x63
 8019a04:	f004 feb6 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019a08:	4811      	ldr	r0, [pc, #68]	; (8019a50 <GUI_TextEn_Mode+0x5c>)
 8019a0a:	f004 fea7 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'M');
 8019a0e:	4621      	mov	r1, r4
 8019a10:	224d      	movs	r2, #77	; 0x4d
 8019a12:	4628      	mov	r0, r5
 8019a14:	f004 ff6c 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+19, Y+2, 'o');
 8019a18:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019a1a:	480e      	ldr	r0, [pc, #56]	; (8019a54 <GUI_TextEn_Mode+0x60>)
 8019a1c:	f004 fe9e 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+19, Y+2, 'o');
 8019a20:	b2a4      	uxth	r4, r4
 8019a22:	f105 0013 	add.w	r0, r5, #19
 8019a26:	4621      	mov	r1, r4
 8019a28:	226f      	movs	r2, #111	; 0x6f
 8019a2a:	b280      	uxth	r0, r0
 8019a2c:	f004 ff60 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'd');
 8019a30:	f105 001e 	add.w	r0, r5, #30
 8019a34:	4621      	mov	r1, r4
 8019a36:	2264      	movs	r2, #100	; 0x64
 8019a38:	b280      	uxth	r0, r0
 8019a3a:	f004 ff59 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+43, Y+2, 'e');
 8019a3e:	f105 002b 	add.w	r0, r5, #43	; 0x2b
 8019a42:	4621      	mov	r1, r4
 8019a44:	2265      	movs	r2, #101	; 0x65
 8019a46:	b280      	uxth	r0, r0
}
 8019a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+43, Y+2, 'e');
 8019a4c:	f004 bf50 	b.w	801e8f0 <TFT_DrawChar>
 8019a50:	200001b8 	.word	0x200001b8
 8019a54:	200001c8 	.word	0x200001c8

08019a58 <GUI_TextEn_PPFD>:

void GUI_TextEn_PPFD(uint16_t X, uint16_t Y)
{
 8019a58:	b538      	push	{r3, r4, r5, lr}
 8019a5a:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019a5c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019a60:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019a62:	f004 fe81 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019a66:	2063      	movs	r0, #99	; 0x63
 8019a68:	f004 fe84 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019a6c:	480f      	ldr	r0, [pc, #60]	; (8019aac <GUI_TextEn_PPFD+0x54>)
 8019a6e:	f004 fe75 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+48, Y, 'D');
 8019a72:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8019a76:	4629      	mov	r1, r5
 8019a78:	2244      	movs	r2, #68	; 0x44
 8019a7a:	b280      	uxth	r0, r0
 8019a7c:	f004 ff38 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+31, Y, 'F');
 8019a80:	f104 001f 	add.w	r0, r4, #31
 8019a84:	4629      	mov	r1, r5
 8019a86:	2246      	movs	r2, #70	; 0x46
 8019a88:	b280      	uxth	r0, r0
 8019a8a:	f004 ff31 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 8019a8e:	f104 0010 	add.w	r0, r4, #16
 8019a92:	4629      	mov	r1, r5
 8019a94:	2250      	movs	r2, #80	; 0x50
 8019a96:	b280      	uxth	r0, r0
 8019a98:	f004 ff2a 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8019a9c:	4629      	mov	r1, r5
 8019a9e:	4620      	mov	r0, r4
 8019aa0:	2250      	movs	r2, #80	; 0x50
}
 8019aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 8019aa6:	f004 bf23 	b.w	801e8f0 <TFT_DrawChar>
 8019aaa:	bf00      	nop
 8019aac:	200001b8 	.word	0x200001b8

08019ab0 <GUI_TextEn_PPL>:
void GUI_TextEn_PPL(uint16_t X, uint16_t Y)
{
 8019ab0:	b538      	push	{r3, r4, r5, lr}
 8019ab2:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019ab4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019ab8:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019aba:	f004 fe55 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019abe:	2063      	movs	r0, #99	; 0x63
 8019ac0:	f004 fe58 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019ac4:	480b      	ldr	r0, [pc, #44]	; (8019af4 <GUI_TextEn_PPL+0x44>)
 8019ac6:	f004 fe49 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+31, Y, 'L');
 8019aca:	f104 001f 	add.w	r0, r4, #31
 8019ace:	4629      	mov	r1, r5
 8019ad0:	224c      	movs	r2, #76	; 0x4c
 8019ad2:	b280      	uxth	r0, r0
 8019ad4:	f004 ff0c 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'P');
 8019ad8:	f104 0010 	add.w	r0, r4, #16
 8019adc:	4629      	mov	r1, r5
 8019ade:	2250      	movs	r2, #80	; 0x50
 8019ae0:	b280      	uxth	r0, r0
 8019ae2:	f004 ff05 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8019ae6:	4629      	mov	r1, r5
 8019ae8:	4620      	mov	r0, r4
 8019aea:	2250      	movs	r2, #80	; 0x50
}
 8019aec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X, Y, 'P');
 8019af0:	f004 befe 	b.w	801e8f0 <TFT_DrawChar>
 8019af4:	200001b8 	.word	0x200001b8

08019af8 <GUI_TextEn_PARwavebands>:
void GUI_TextEn_PARwavebands(uint16_t X, uint16_t Y)
{
 8019af8:	b538      	push	{r3, r4, r5, lr}
 8019afa:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019afc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019b00:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019b02:	f004 fe31 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019b06:	2063      	movs	r0, #99	; 0x63
 8019b08:	f004 fe34 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019b0c:	482d      	ldr	r0, [pc, #180]	; (8019bc4 <GUI_TextEn_PARwavebands+0xcc>)
 8019b0e:	f004 fe25 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+32, Y, 'R');
 8019b12:	f105 0020 	add.w	r0, r5, #32
 8019b16:	4621      	mov	r1, r4
 8019b18:	2252      	movs	r2, #82	; 0x52
 8019b1a:	b280      	uxth	r0, r0
 8019b1c:	f004 fee8 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+16, Y, 'A');
 8019b20:	f105 0010 	add.w	r0, r5, #16
 8019b24:	4621      	mov	r1, r4
 8019b26:	2241      	movs	r2, #65	; 0x41
 8019b28:	b280      	uxth	r0, r0
 8019b2a:	f004 fee1 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'P');
 8019b2e:	4621      	mov	r1, r4
 8019b30:	2250      	movs	r2, #80	; 0x50
 8019b32:	4628      	mov	r0, r5
 8019b34:	f004 fedc 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small_A);
	TFT_DrawChar(X+75, Y+2, 'a');
 8019b38:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small_A);
 8019b3a:	4823      	ldr	r0, [pc, #140]	; (8019bc8 <GUI_TextEn_PARwavebands+0xd0>)
	TFT_DrawChar(X+75, Y+2, 'a');
 8019b3c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16EN_arch_small_A);
 8019b3e:	f004 fe0d 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+75, Y+2, 'a');
 8019b42:	f105 004b 	add.w	r0, r5, #75	; 0x4b
 8019b46:	4621      	mov	r1, r4
 8019b48:	2261      	movs	r2, #97	; 0x61
 8019b4a:	b280      	uxth	r0, r0
 8019b4c:	f004 fed0 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+60, Y+2, 'w');
 8019b50:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8019b54:	4621      	mov	r1, r4
 8019b56:	2277      	movs	r2, #119	; 0x77
 8019b58:	b280      	uxth	r0, r0
 8019b5a:	f004 fec9 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+101, Y+2, 'e');
 8019b5e:	f105 0065 	add.w	r0, r5, #101	; 0x65
 8019b62:	4621      	mov	r1, r4
 8019b64:	2265      	movs	r2, #101	; 0x65
 8019b66:	b280      	uxth	r0, r0
 8019b68:	f004 fec2 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y+2, 'v');
 8019b6c:	f105 0057 	add.w	r0, r5, #87	; 0x57
 8019b70:	4621      	mov	r1, r4
 8019b72:	2276      	movs	r2, #118	; 0x76
 8019b74:	b280      	uxth	r0, r0
 8019b76:	f004 febb 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+126, Y+2, 'a');
 8019b7a:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 8019b7e:	4621      	mov	r1, r4
 8019b80:	2261      	movs	r2, #97	; 0x61
 8019b82:	b280      	uxth	r0, r0
 8019b84:	f004 feb4 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+113, Y+2, 'b');
 8019b88:	f105 0071 	add.w	r0, r5, #113	; 0x71
 8019b8c:	4621      	mov	r1, r4
 8019b8e:	2262      	movs	r2, #98	; 0x62
 8019b90:	b280      	uxth	r0, r0
 8019b92:	f004 fead 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+138, Y+2, 'n');
 8019b96:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 8019b9a:	4621      	mov	r1, r4
 8019b9c:	226e      	movs	r2, #110	; 0x6e
 8019b9e:	b280      	uxth	r0, r0
 8019ba0:	f004 fea6 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+151, Y+2, 'd');
 8019ba4:	f105 0097 	add.w	r0, r5, #151	; 0x97
 8019ba8:	4621      	mov	r1, r4
 8019baa:	2264      	movs	r2, #100	; 0x64
 8019bac:	b280      	uxth	r0, r0
 8019bae:	f004 fe9f 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+165, Y+2, 's');
 8019bb2:	f105 00a5 	add.w	r0, r5, #165	; 0xa5
 8019bb6:	4621      	mov	r1, r4
 8019bb8:	2273      	movs	r2, #115	; 0x73
 8019bba:	b280      	uxth	r0, r0
}
 8019bbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+165, Y+2, 's');
 8019bc0:	f004 be96 	b.w	801e8f0 <TFT_DrawChar>
 8019bc4:	200001b8 	.word	0x200001b8
 8019bc8:	200001c8 	.word	0x200001c8

08019bcc <GUI_TextEn_B_G_R_FR>:
void GUI_TextEn_B_G_R_FR(uint16_t X, uint16_t Y)
{
 8019bcc:	b538      	push	{r3, r4, r5, lr}
 8019bce:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019bd0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019bd4:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019bd6:	f004 fdc7 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019bda:	2063      	movs	r0, #99	; 0x63
 8019bdc:	f004 fdca 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big_A);
 8019be0:	481d      	ldr	r0, [pc, #116]	; (8019c58 <GUI_TextEn_B_G_R_FR+0x8c>)
 8019be2:	f004 fdbb 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+15, Y, '-');
 8019be6:	f104 000f 	add.w	r0, r4, #15
 8019bea:	4629      	mov	r1, r5
 8019bec:	222d      	movs	r2, #45	; 0x2d
 8019bee:	b280      	uxth	r0, r0
 8019bf0:	f004 fe7e 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y, 'B');
 8019bf4:	4629      	mov	r1, r5
 8019bf6:	4620      	mov	r0, r4
 8019bf8:	2242      	movs	r2, #66	; 0x42
 8019bfa:	f004 fe79 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+44, Y, '-');
 8019bfe:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8019c02:	4629      	mov	r1, r5
 8019c04:	222d      	movs	r2, #45	; 0x2d
 8019c06:	b280      	uxth	r0, r0
 8019c08:	f004 fe72 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y, 'G');
 8019c0c:	f104 001d 	add.w	r0, r4, #29
 8019c10:	4629      	mov	r1, r5
 8019c12:	2247      	movs	r2, #71	; 0x47
 8019c14:	b280      	uxth	r0, r0
 8019c16:	f004 fe6b 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+74, Y, '-');
 8019c1a:	f104 004a 	add.w	r0, r4, #74	; 0x4a
 8019c1e:	4629      	mov	r1, r5
 8019c20:	222d      	movs	r2, #45	; 0x2d
 8019c22:	b280      	uxth	r0, r0
 8019c24:	f004 fe64 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+59, Y, 'R');	
 8019c28:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 8019c2c:	4629      	mov	r1, r5
 8019c2e:	2252      	movs	r2, #82	; 0x52
 8019c30:	b280      	uxth	r0, r0
 8019c32:	f004 fe5d 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+87, Y, 'F');
 8019c36:	f104 0057 	add.w	r0, r4, #87	; 0x57
 8019c3a:	4629      	mov	r1, r5
 8019c3c:	2246      	movs	r2, #70	; 0x46
 8019c3e:	b280      	uxth	r0, r0
 8019c40:	f004 fe56 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+103, Y, 'R');
 8019c44:	f104 0067 	add.w	r0, r4, #103	; 0x67
 8019c48:	4629      	mov	r1, r5
 8019c4a:	2252      	movs	r2, #82	; 0x52
 8019c4c:	b280      	uxth	r0, r0
}
 8019c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+103, Y, 'R');
 8019c52:	f004 be4d 	b.w	801e8f0 <TFT_DrawChar>
 8019c56:	bf00      	nop
 8019c58:	200001b8 	.word	0x200001b8

08019c5c <GUI_TextEn_CCT>:
	TFT_DrawChar(X, Y, 'L');
	TFT_SetFont(&Font11EN_arch_big);
	TFT_DrawChar(X+17, Y+7, 'R');
}
void GUI_TextEn_CCT(uint16_t X, uint16_t Y)
{
 8019c5c:	b538      	push	{r3, r4, r5, lr}
 8019c5e:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019c60:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019c64:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 8019c66:	f004 fd7f 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019c6a:	2063      	movs	r0, #99	; 0x63
 8019c6c:	f004 fd82 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font26EN_arch_big);
 8019c70:	480b      	ldr	r0, [pc, #44]	; (8019ca0 <GUI_TextEn_CCT+0x44>)
 8019c72:	f004 fd73 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C'-33);
 8019c76:	4629      	mov	r1, r5
 8019c78:	4620      	mov	r0, r4
 8019c7a:	2222      	movs	r2, #34	; 0x22
 8019c7c:	f004 fe38 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+23, Y, 'C'-33);
 8019c80:	f104 0017 	add.w	r0, r4, #23
 8019c84:	4629      	mov	r1, r5
 8019c86:	2222      	movs	r2, #34	; 0x22
 8019c88:	b280      	uxth	r0, r0
 8019c8a:	f004 fe31 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+46, Y, 'T'-33);
 8019c8e:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 8019c92:	4629      	mov	r1, r5
 8019c94:	2233      	movs	r2, #51	; 0x33
 8019c96:	b280      	uxth	r0, r0
}
 8019c98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+46, Y, 'T'-33);
 8019c9c:	f004 be28 	b.w	801e8f0 <TFT_DrawChar>
 8019ca0:	200001e8 	.word	0x200001e8

08019ca4 <GUI_TextEn_W_m2>:

/* Measure dimensions */
void GUI_TextEn_W_m2(uint16_t X, uint16_t Y)
{
 8019ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ca6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019ca8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019cac:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019cae:	f004 fd5b 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019cb2:	2063      	movs	r0, #99	; 0x63
 8019cb4:	f004 fd5e 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8019cb8:	4815      	ldr	r0, [pc, #84]	; (8019d10 <GUI_TextEn_W_m2+0x6c>)
 8019cba:	f004 fd4f 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+3, Y, 'W');
 8019cbe:	1ce8      	adds	r0, r5, #3
 8019cc0:	4621      	mov	r1, r4
 8019cc2:	2257      	movs	r2, #87	; 0x57
 8019cc4:	b280      	uxth	r0, r0
 8019cc6:	f004 fe13 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+1, Y+17, 'm');
 8019cca:	f104 0111 	add.w	r1, r4, #17
 8019cce:	1c68      	adds	r0, r5, #1
 8019cd0:	226d      	movs	r2, #109	; 0x6d
 8019cd2:	b289      	uxth	r1, r1
 8019cd4:	b280      	uxth	r0, r0
 8019cd6:	f004 fe0b 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font6EN_arch_big);
 8019cda:	480e      	ldr	r0, [pc, #56]	; (8019d14 <GUI_TextEn_W_m2+0x70>)
 8019cdc:	f004 fd3e 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+11, Y+16, '2');	
 8019ce0:	f104 0110 	add.w	r1, r4, #16
 8019ce4:	f105 000b 	add.w	r0, r5, #11
 8019ce8:	2232      	movs	r2, #50	; 0x32
 8019cea:	b289      	uxth	r1, r1
 8019cec:	b280      	uxth	r0, r0
 8019cee:	f004 fdff 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+17, Y+14, TFT_White);
 8019cf2:	f104 030e 	add.w	r3, r4, #14
 8019cf6:	b29b      	uxth	r3, r3
 8019cf8:	f105 0211 	add.w	r2, r5, #17
 8019cfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019d00:	9100      	str	r1, [sp, #0]
 8019d02:	b292      	uxth	r2, r2
 8019d04:	4619      	mov	r1, r3
 8019d06:	4628      	mov	r0, r5
 8019d08:	f004 faa2 	bl	801e250 <TFT_DrawLine>
}
 8019d0c:	b003      	add	sp, #12
 8019d0e:	bd30      	pop	{r4, r5, pc}
 8019d10:	20000220 	.word	0x20000220
 8019d14:	20000210 	.word	0x20000210

08019d18 <GUI_TextEn_W_m2_sr>:
void GUI_TextEn_W_m2_sr(uint16_t X, uint16_t Y)
{
 8019d18:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019d1a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019d1c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019d20:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019d22:	f004 fd21 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019d26:	2063      	movs	r0, #99	; 0x63
 8019d28:	f004 fd24 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8019d2c:	4824      	ldr	r0, [pc, #144]	; (8019dc0 <GUI_TextEn_W_m2_sr+0xa8>)
 8019d2e:	f004 fd15 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+12, Y, 'W');
 8019d32:	f105 000c 	add.w	r0, r5, #12
 8019d36:	4621      	mov	r1, r4
 8019d38:	2257      	movs	r2, #87	; 0x57
 8019d3a:	b280      	uxth	r0, r0
	TFT_DrawChar(X+20, Y+17, 'm');
 8019d3c:	f104 0611 	add.w	r6, r4, #17
	TFT_DrawChar(X+12, Y, 'W');
 8019d40:	f004 fdd6 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+20, Y+17, 'm');
 8019d44:	b2b6      	uxth	r6, r6
 8019d46:	f105 0014 	add.w	r0, r5, #20
 8019d4a:	4631      	mov	r1, r6
 8019d4c:	226d      	movs	r2, #109	; 0x6d
 8019d4e:	b280      	uxth	r0, r0
 8019d50:	f004 fdce 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X, Y+17, 's');
 8019d54:	4631      	mov	r1, r6
 8019d56:	4628      	mov	r0, r5
 8019d58:	2273      	movs	r2, #115	; 0x73
 8019d5a:	f004 fdc9 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+7, Y+17, 'r');
 8019d5e:	1de8      	adds	r0, r5, #7
 8019d60:	4631      	mov	r1, r6
 8019d62:	2272      	movs	r2, #114	; 0x72
 8019d64:	b280      	uxth	r0, r0
 8019d66:	f004 fdc3 	bl	801e8f0 <TFT_DrawChar>
	TFT_FillRectangle(X+17,Y+23,X+18,Y+24,TFT_White);
 8019d6a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019d6e:	f104 0318 	add.w	r3, r4, #24
 8019d72:	f105 0212 	add.w	r2, r5, #18
 8019d76:	f104 0117 	add.w	r1, r4, #23
 8019d7a:	f105 0011 	add.w	r0, r5, #17
 8019d7e:	b29b      	uxth	r3, r3
 8019d80:	b292      	uxth	r2, r2
 8019d82:	b289      	uxth	r1, r1
 8019d84:	9600      	str	r6, [sp, #0]
 8019d86:	b280      	uxth	r0, r0
 8019d88:	f004 fabf 	bl	801e30a <TFT_FillRectangle>
	TFT_SetFont(&Font6EN_arch_big);
 8019d8c:	480d      	ldr	r0, [pc, #52]	; (8019dc4 <GUI_TextEn_W_m2_sr+0xac>)
 8019d8e:	f004 fce5 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+30, Y+16, '2');	
 8019d92:	f104 0110 	add.w	r1, r4, #16
 8019d96:	f105 001e 	add.w	r0, r5, #30
 8019d9a:	2232      	movs	r2, #50	; 0x32
 8019d9c:	b289      	uxth	r1, r1
 8019d9e:	b280      	uxth	r0, r0
 8019da0:	f004 fda6 	bl	801e8f0 <TFT_DrawChar>
  TFT_DrawLine(X, Y+14, X+36, Y+14, TFT_White);
 8019da4:	f104 030e 	add.w	r3, r4, #14
 8019da8:	b29b      	uxth	r3, r3
 8019daa:	f105 0224 	add.w	r2, r5, #36	; 0x24
 8019dae:	9600      	str	r6, [sp, #0]
 8019db0:	b292      	uxth	r2, r2
 8019db2:	4619      	mov	r1, r3
 8019db4:	4628      	mov	r0, r5
 8019db6:	f004 fa4b 	bl	801e250 <TFT_DrawLine>
}
 8019dba:	b002      	add	sp, #8
 8019dbc:	bd70      	pop	{r4, r5, r6, pc}
 8019dbe:	bf00      	nop
 8019dc0:	20000220 	.word	0x20000220
 8019dc4:	20000210 	.word	0x20000210

08019dc8 <GUI_TextEn_cd_m2>:
void GUI_TextEn_cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 8019dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019dcc:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 8019dce:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019dd2:	460d      	mov	r5, r1
 8019dd4:	4616      	mov	r6, r2
	TFT_SetTextColor(TFT_White);
 8019dd6:	f004 fcc7 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019dda:	2063      	movs	r0, #99	; 0x63
 8019ddc:	f004 fcca 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font9EN_arch_big);
 8019de0:	482f      	ldr	r0, [pc, #188]	; (8019ea0 <GUI_TextEn_cd_m2+0xd8>)
 8019de2:	f004 fcbb 	bl	801e75c <TFT_SetFont>
	
	if (deg==1)
 8019de6:	2e01      	cmp	r6, #1
 8019de8:	f105 0911 	add.w	r9, r5, #17
 8019dec:	f105 0810 	add.w	r8, r5, #16
 8019df0:	f105 060e 	add.w	r6, r5, #14
 8019df4:	d131      	bne.n	8019e5a <GUI_TextEn_cd_m2+0x92>
	{
		TFT_DrawChar(X, Y, 'k');
 8019df6:	226b      	movs	r2, #107	; 0x6b
 8019df8:	4629      	mov	r1, r5
 8019dfa:	4620      	mov	r0, r4
 8019dfc:	f004 fd78 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+7, Y, 'c');
 8019e00:	1de0      	adds	r0, r4, #7
 8019e02:	2263      	movs	r2, #99	; 0x63
 8019e04:	4629      	mov	r1, r5
 8019e06:	b280      	uxth	r0, r0
 8019e08:	f004 fd72 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+14, Y, 'd');
 8019e0c:	f104 000e 	add.w	r0, r4, #14
 8019e10:	2264      	movs	r2, #100	; 0x64
 8019e12:	4629      	mov	r1, r5
 8019e14:	b280      	uxth	r0, r0
 8019e16:	f004 fd6b 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(X+5, Y+17, 'm');
 8019e1a:	1d60      	adds	r0, r4, #5
 8019e1c:	226d      	movs	r2, #109	; 0x6d
 8019e1e:	fa1f f189 	uxth.w	r1, r9
 8019e22:	b280      	uxth	r0, r0
 8019e24:	f004 fd64 	bl	801e8f0 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 8019e28:	481e      	ldr	r0, [pc, #120]	; (8019ea4 <GUI_TextEn_cd_m2+0xdc>)
 8019e2a:	f004 fc97 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(X+15, Y+16, '2');	
 8019e2e:	f104 000f 	add.w	r0, r4, #15
 8019e32:	2232      	movs	r2, #50	; 0x32
 8019e34:	fa1f f188 	uxth.w	r1, r8
 8019e38:	b280      	uxth	r0, r0
 8019e3a:	f004 fd59 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+22, Y+14, TFT_White);
 8019e3e:	b2b3      	uxth	r3, r6
 8019e40:	f104 0216 	add.w	r2, r4, #22
		TFT_DrawChar(X+9, Y, 'd');
		
		TFT_DrawChar(X+2, Y+17, 'm');
		TFT_SetFont(&Font6EN_arch_big);
		TFT_DrawChar(X+12, Y+16, '2');	
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 8019e44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8019e48:	9100      	str	r1, [sp, #0]
 8019e4a:	b292      	uxth	r2, r2
 8019e4c:	4619      	mov	r1, r3
 8019e4e:	4620      	mov	r0, r4
 8019e50:	f004 f9fe 	bl	801e250 <TFT_DrawLine>
	}
}
 8019e54:	b003      	add	sp, #12
 8019e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		TFT_DrawChar(X+2, Y, 'c');
 8019e5a:	1ca7      	adds	r7, r4, #2
 8019e5c:	b2bf      	uxth	r7, r7
 8019e5e:	2263      	movs	r2, #99	; 0x63
 8019e60:	4629      	mov	r1, r5
 8019e62:	4638      	mov	r0, r7
 8019e64:	f004 fd44 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+9, Y, 'd');
 8019e68:	f104 0009 	add.w	r0, r4, #9
 8019e6c:	2264      	movs	r2, #100	; 0x64
 8019e6e:	4629      	mov	r1, r5
 8019e70:	b280      	uxth	r0, r0
 8019e72:	f004 fd3d 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+2, Y+17, 'm');
 8019e76:	226d      	movs	r2, #109	; 0x6d
 8019e78:	fa1f f189 	uxth.w	r1, r9
 8019e7c:	4638      	mov	r0, r7
 8019e7e:	f004 fd37 	bl	801e8f0 <TFT_DrawChar>
		TFT_SetFont(&Font6EN_arch_big);
 8019e82:	4808      	ldr	r0, [pc, #32]	; (8019ea4 <GUI_TextEn_cd_m2+0xdc>)
 8019e84:	f004 fc6a 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(X+12, Y+16, '2');	
 8019e88:	f104 000c 	add.w	r0, r4, #12
 8019e8c:	2232      	movs	r2, #50	; 0x32
 8019e8e:	fa1f f188 	uxth.w	r1, r8
 8019e92:	b280      	uxth	r0, r0
 8019e94:	f004 fd2c 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawLine(X, Y+14, X+19, Y+14, TFT_White);
 8019e98:	b2b3      	uxth	r3, r6
 8019e9a:	f104 0213 	add.w	r2, r4, #19
 8019e9e:	e7d1      	b.n	8019e44 <GUI_TextEn_cd_m2+0x7c>
 8019ea0:	20000220 	.word	0x20000220
 8019ea4:	20000210 	.word	0x20000210

08019ea8 <GUI_TextEn_Green>:
	TFT_DrawChar(X+23, Y+16, '2');

  TFT_DrawLine(X, Y+14, X+30, Y+14, TFT_White);	
}
void GUI_TextEn_Green(uint16_t X, uint16_t Y)
{
 8019ea8:	b538      	push	{r3, r4, r5, lr}
 8019eaa:	4605      	mov	r5, r0
 8019eac:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 8019eae:	4815      	ldr	r0, [pc, #84]	; (8019f04 <GUI_TextEn_Green+0x5c>)
 8019eb0:	f004 fc54 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(X, Y, 'G');
 8019eb4:	4621      	mov	r1, r4
 8019eb6:	2247      	movs	r2, #71	; 0x47
 8019eb8:	4628      	mov	r0, r5
 8019eba:	f004 fd19 	bl	801e8f0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+15, Y+2, 'r');
 8019ebe:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 8019ec0:	4811      	ldr	r0, [pc, #68]	; (8019f08 <GUI_TextEn_Green+0x60>)
 8019ec2:	f004 fc4b 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'r');
 8019ec6:	b2a4      	uxth	r4, r4
 8019ec8:	f105 000f 	add.w	r0, r5, #15
 8019ecc:	4621      	mov	r1, r4
 8019ece:	2272      	movs	r2, #114	; 0x72
 8019ed0:	b280      	uxth	r0, r0
 8019ed2:	f004 fd0d 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+26, Y+2, 'e');
 8019ed6:	f105 001a 	add.w	r0, r5, #26
 8019eda:	4621      	mov	r1, r4
 8019edc:	2265      	movs	r2, #101	; 0x65
 8019ede:	b280      	uxth	r0, r0
 8019ee0:	f004 fd06 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+38, Y+2, 'e');
 8019ee4:	f105 0026 	add.w	r0, r5, #38	; 0x26
 8019ee8:	4621      	mov	r1, r4
 8019eea:	2265      	movs	r2, #101	; 0x65
 8019eec:	b280      	uxth	r0, r0
 8019eee:	f004 fcff 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+50, Y+2, 'n');
 8019ef2:	f105 0032 	add.w	r0, r5, #50	; 0x32
 8019ef6:	4621      	mov	r1, r4
 8019ef8:	226e      	movs	r2, #110	; 0x6e
 8019efa:	b280      	uxth	r0, r0
}
 8019efc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+50, Y+2, 'n');
 8019f00:	f004 bcf6 	b.w	801e8f0 <TFT_DrawChar>
 8019f04:	200001b0 	.word	0x200001b0
 8019f08:	200001c0 	.word	0x200001c0

08019f0c <GUI_TextEn_Blue>:
void GUI_TextEn_Blue(uint16_t X, uint16_t Y)
{
 8019f0c:	b538      	push	{r3, r4, r5, lr}
 8019f0e:	4605      	mov	r5, r0
 8019f10:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 8019f12:	4812      	ldr	r0, [pc, #72]	; (8019f5c <GUI_TextEn_Blue+0x50>)
 8019f14:	f004 fc22 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(X, Y, 'B');
 8019f18:	4621      	mov	r1, r4
 8019f1a:	2242      	movs	r2, #66	; 0x42
 8019f1c:	4628      	mov	r0, r5
 8019f1e:	f004 fce7 	bl	801e8f0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small_A);
		TFT_DrawChar(X+15, Y+2, 'l');
 8019f22:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small_A);
 8019f24:	480e      	ldr	r0, [pc, #56]	; (8019f60 <GUI_TextEn_Blue+0x54>)
 8019f26:	f004 fc19 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(X+15, Y+2, 'l');
 8019f2a:	b2a4      	uxth	r4, r4
 8019f2c:	f105 000f 	add.w	r0, r5, #15
 8019f30:	4621      	mov	r1, r4
 8019f32:	226c      	movs	r2, #108	; 0x6c
 8019f34:	b280      	uxth	r0, r0
 8019f36:	f004 fcdb 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+20, Y+2, 'u');
 8019f3a:	f105 0014 	add.w	r0, r5, #20
 8019f3e:	4621      	mov	r1, r4
 8019f40:	2275      	movs	r2, #117	; 0x75
 8019f42:	b280      	uxth	r0, r0
 8019f44:	f004 fcd4 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+33, Y+2, 'e');
 8019f48:	f105 0021 	add.w	r0, r5, #33	; 0x21
 8019f4c:	4621      	mov	r1, r4
 8019f4e:	2265      	movs	r2, #101	; 0x65
 8019f50:	b280      	uxth	r0, r0
}
 8019f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+33, Y+2, 'e');
 8019f56:	f004 bccb 	b.w	801e8f0 <TFT_DrawChar>
 8019f5a:	bf00      	nop
 8019f5c:	200001b0 	.word	0x200001b0
 8019f60:	200001c8 	.word	0x200001c8

08019f64 <GUI_TextEn_Red>:
void GUI_TextEn_Red(uint16_t X, uint16_t Y)
{
 8019f64:	b538      	push	{r3, r4, r5, lr}
 8019f66:	4605      	mov	r5, r0
 8019f68:	460c      	mov	r4, r1
		TFT_SetFont(&Font16EN_arch_big);
 8019f6a:	480e      	ldr	r0, [pc, #56]	; (8019fa4 <GUI_TextEn_Red+0x40>)
 8019f6c:	f004 fbf6 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(X, Y, 'R');
 8019f70:	4621      	mov	r1, r4
 8019f72:	2252      	movs	r2, #82	; 0x52
 8019f74:	4628      	mov	r0, r5
 8019f76:	f004 fcbb 	bl	801e8f0 <TFT_DrawChar>
		TFT_SetFont(&Font16EN_arch_small);
		TFT_DrawChar(X+16, Y+2, 'e');
 8019f7a:	3402      	adds	r4, #2
		TFT_SetFont(&Font16EN_arch_small);
 8019f7c:	480a      	ldr	r0, [pc, #40]	; (8019fa8 <GUI_TextEn_Red+0x44>)
 8019f7e:	f004 fbed 	bl	801e75c <TFT_SetFont>
		TFT_DrawChar(X+16, Y+2, 'e');
 8019f82:	b2a4      	uxth	r4, r4
 8019f84:	f105 0010 	add.w	r0, r5, #16
 8019f88:	4621      	mov	r1, r4
 8019f8a:	2265      	movs	r2, #101	; 0x65
 8019f8c:	b280      	uxth	r0, r0
 8019f8e:	f004 fcaf 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(X+29, Y+2, 'd');
 8019f92:	f105 001d 	add.w	r0, r5, #29
 8019f96:	4621      	mov	r1, r4
 8019f98:	2264      	movs	r2, #100	; 0x64
 8019f9a:	b280      	uxth	r0, r0
}
 8019f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		TFT_DrawChar(X+29, Y+2, 'd');
 8019fa0:	f004 bca6 	b.w	801e8f0 <TFT_DrawChar>
 8019fa4:	200001b0 	.word	0x200001b0
 8019fa8:	200001c0 	.word	0x200001c0

08019fac <GUI_TextEn_WriteSD>:

void GUI_TextEn_WriteSD(uint16_t X, uint16_t Y)
{
 8019fac:	b538      	push	{r3, r4, r5, lr}
 8019fae:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 8019fb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 8019fb4:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 8019fb6:	f004 fbd7 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 8019fba:	2063      	movs	r0, #99	; 0x63
 8019fbc:	f004 fbda 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 8019fc0:	4815      	ldr	r0, [pc, #84]	; (801a018 <GUI_TextEn_WriteSD+0x6c>)
 8019fc2:	f004 fbcb 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'W');
 8019fc6:	4621      	mov	r1, r4
 8019fc8:	2257      	movs	r2, #87	; 0x57
 8019fca:	4628      	mov	r0, r5
 8019fcc:	f004 fc90 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
	TFT_DrawChar(X+17, Y+2, 'r');
 8019fd0:	3402      	adds	r4, #2
	TFT_SetFont(&Font16EN_arch_small);
 8019fd2:	4812      	ldr	r0, [pc, #72]	; (801a01c <GUI_TextEn_WriteSD+0x70>)
 8019fd4:	f004 fbc2 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'r');
 8019fd8:	b2a4      	uxth	r4, r4
 8019fda:	f105 0011 	add.w	r0, r5, #17
 8019fde:	4621      	mov	r1, r4
 8019fe0:	2272      	movs	r2, #114	; 0x72
 8019fe2:	b280      	uxth	r0, r0
 8019fe4:	f004 fc84 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+28, Y+2, 'i');
 8019fe8:	f105 001c 	add.w	r0, r5, #28
 8019fec:	4621      	mov	r1, r4
 8019fee:	2269      	movs	r2, #105	; 0x69
 8019ff0:	b280      	uxth	r0, r0
 8019ff2:	f004 fc7d 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+41, Y+2, 't');
 8019ff6:	f105 0029 	add.w	r0, r5, #41	; 0x29
 8019ffa:	4621      	mov	r1, r4
 8019ffc:	2274      	movs	r2, #116	; 0x74
 8019ffe:	b280      	uxth	r0, r0
 801a000:	f004 fc76 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+53, Y+2, 'e');
 801a004:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801a008:	4621      	mov	r1, r4
 801a00a:	2265      	movs	r2, #101	; 0x65
 801a00c:	b280      	uxth	r0, r0
}
 801a00e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+53, Y+2, 'e');
 801a012:	f004 bc6d 	b.w	801e8f0 <TFT_DrawChar>
 801a016:	bf00      	nop
 801a018:	200001b0 	.word	0x200001b0
 801a01c:	200001c0 	.word	0x200001c0

0801a020 <GUI_TextEn_Info_Callibration>:


void GUI_TextEn_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 801a020:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a022:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 801a024:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801a028:	2300      	movs	r3, #0
 801a02a:	9300      	str	r3, [sp, #0]
 801a02c:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801a030:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 801a032:	f004 fb99 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a036:	2063      	movs	r0, #99	; 0x63
 801a038:	f004 fb9c 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801a03c:	4834      	ldr	r0, [pc, #208]	; (801a110 <GUI_TextEn_Info_Callibration+0xf0>)
	TFT_DrawChar(X+89, Y+2, 't');
	TFT_DrawChar(X+97, Y+2, 'i');
	TFT_DrawChar(X+108, Y+2, 'o');
	TFT_DrawChar(X+120, Y+2, 'n');
	
	sprintf (buffer, "%02u",  date);
 801a03e:	4d35      	ldr	r5, [pc, #212]	; (801a114 <GUI_TextEn_Info_Callibration+0xf4>)
	TFT_SetFont(&Font16EN_arch_big);
 801a040:	f004 fb8c 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'C');
 801a044:	2243      	movs	r2, #67	; 0x43
 801a046:	2164      	movs	r1, #100	; 0x64
 801a048:	2046      	movs	r0, #70	; 0x46
 801a04a:	f004 fc51 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801a04e:	4832      	ldr	r0, [pc, #200]	; (801a118 <GUI_TextEn_Info_Callibration+0xf8>)
 801a050:	f004 fb84 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'a');
 801a054:	2261      	movs	r2, #97	; 0x61
 801a056:	2166      	movs	r1, #102	; 0x66
 801a058:	2056      	movs	r0, #86	; 0x56
 801a05a:	f004 fc49 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+29, Y+2, 'l');
 801a05e:	226c      	movs	r2, #108	; 0x6c
 801a060:	2166      	movs	r1, #102	; 0x66
 801a062:	2063      	movs	r0, #99	; 0x63
 801a064:	f004 fc44 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+38, Y+2, 'i');
 801a068:	2269      	movs	r2, #105	; 0x69
 801a06a:	2166      	movs	r1, #102	; 0x66
 801a06c:	206c      	movs	r0, #108	; 0x6c
 801a06e:	f004 fc3f 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+50, Y+2, 'b');
 801a072:	2262      	movs	r2, #98	; 0x62
 801a074:	2166      	movs	r1, #102	; 0x66
 801a076:	2078      	movs	r0, #120	; 0x78
 801a078:	f004 fc3a 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y+2, 'r');
 801a07c:	2272      	movs	r2, #114	; 0x72
 801a07e:	2166      	movs	r1, #102	; 0x66
 801a080:	2085      	movs	r0, #133	; 0x85
 801a082:	f004 fc35 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y+2, 'a');
 801a086:	2261      	movs	r2, #97	; 0x61
 801a088:	2166      	movs	r1, #102	; 0x66
 801a08a:	2092      	movs	r0, #146	; 0x92
 801a08c:	f004 fc30 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 't');
 801a090:	2274      	movs	r2, #116	; 0x74
 801a092:	2166      	movs	r1, #102	; 0x66
 801a094:	209f      	movs	r0, #159	; 0x9f
 801a096:	f004 fc2b 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+97, Y+2, 'i');
 801a09a:	2269      	movs	r2, #105	; 0x69
 801a09c:	2166      	movs	r1, #102	; 0x66
 801a09e:	20a7      	movs	r0, #167	; 0xa7
 801a0a0:	f004 fc26 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+108, Y+2, 'o');
 801a0a4:	226f      	movs	r2, #111	; 0x6f
 801a0a6:	2166      	movs	r1, #102	; 0x66
 801a0a8:	20b2      	movs	r0, #178	; 0xb2
 801a0aa:	f004 fc21 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+120, Y+2, 'n');
 801a0ae:	226e      	movs	r2, #110	; 0x6e
 801a0b0:	2166      	movs	r1, #102	; 0x66
 801a0b2:	20be      	movs	r0, #190	; 0xbe
 801a0b4:	f004 fc1c 	bl	801e8f0 <TFT_DrawChar>
	sprintf (buffer, "%02u",  date);
 801a0b8:	4622      	mov	r2, r4
 801a0ba:	4629      	mov	r1, r5
 801a0bc:	4668      	mov	r0, sp
 801a0be:	f007 fe67 	bl	8021d90 <siprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801a0c2:	4816      	ldr	r0, [pc, #88]	; (801a11c <GUI_TextEn_Info_Callibration+0xfc>)
 801a0c4:	f004 fb4a 	bl	801e75c <TFT_SetFont>
	buffer[2] = '.';
 801a0c8:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a0ca:	2303      	movs	r3, #3
 801a0cc:	466a      	mov	r2, sp
 801a0ce:	2182      	movs	r1, #130	; 0x82
 801a0d0:	201e      	movs	r0, #30
	buffer[2] = '.';
 801a0d2:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a0d6:	f004 fc63 	bl	801e9a0 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 801a0da:	4632      	mov	r2, r6
 801a0dc:	4629      	mov	r1, r5
 801a0de:	4668      	mov	r0, sp
 801a0e0:	f007 fe56 	bl	8021d90 <siprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a0e4:	2303      	movs	r3, #3
 801a0e6:	466a      	mov	r2, sp
 801a0e8:	2182      	movs	r1, #130	; 0x82
 801a0ea:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 801a0ec:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a0f0:	f004 fc56 	bl	801e9a0 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 801a0f4:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801a0f8:	4909      	ldr	r1, [pc, #36]	; (801a120 <GUI_TextEn_Info_Callibration+0x100>)
 801a0fa:	4668      	mov	r0, sp
 801a0fc:	f007 fe48 	bl	8021d90 <siprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a100:	2303      	movs	r3, #3
 801a102:	466a      	mov	r2, sp
 801a104:	2182      	movs	r1, #130	; 0x82
 801a106:	209b      	movs	r0, #155	; 0x9b
 801a108:	f004 fc4a 	bl	801e9a0 <TFT_DisplayString>
}
 801a10c:	b002      	add	sp, #8
 801a10e:	bd70      	pop	{r4, r5, r6, pc}
 801a110:	200001b0 	.word	0x200001b0
 801a114:	0803125c 	.word	0x0803125c
 801a118:	200001c0 	.word	0x200001c0
 801a11c:	200001f0 	.word	0x200001f0
 801a120:	08031261 	.word	0x08031261

0801a124 <GUI_TextEn_Info_Serial>:

void GUI_TextEn_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 801a124:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a126:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 801a128:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801a12c:	2300      	movs	r3, #0
 801a12e:	9300      	str	r3, [sp, #0]
 801a130:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801a134:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 801a136:	f004 fb17 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a13a:	2063      	movs	r0, #99	; 0x63
 801a13c:	f004 fb1a 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801a140:	482e      	ldr	r0, [pc, #184]	; (801a1fc <GUI_TextEn_Info_Serial+0xd8>)
 801a142:	f004 fb0b 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'S');
 801a146:	2253      	movs	r2, #83	; 0x53
 801a148:	21c8      	movs	r1, #200	; 0xc8
 801a14a:	203c      	movs	r0, #60	; 0x3c
 801a14c:	f004 fbd0 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801a150:	482b      	ldr	r0, [pc, #172]	; (801a200 <GUI_TextEn_Info_Serial+0xdc>)
 801a152:	f004 fb03 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+17, Y+2, 'e');
 801a156:	2265      	movs	r2, #101	; 0x65
 801a158:	21ca      	movs	r1, #202	; 0xca
 801a15a:	204d      	movs	r0, #77	; 0x4d
 801a15c:	f004 fbc8 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+30, Y+2, 'r');
 801a160:	2272      	movs	r2, #114	; 0x72
 801a162:	21ca      	movs	r1, #202	; 0xca
 801a164:	205a      	movs	r0, #90	; 0x5a
 801a166:	f004 fbc3 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y+2, 'i');
 801a16a:	2269      	movs	r2, #105	; 0x69
 801a16c:	21ca      	movs	r1, #202	; 0xca
 801a16e:	2066      	movs	r0, #102	; 0x66
 801a170:	f004 fbbe 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+54, Y+2, 'a');
 801a174:	2261      	movs	r2, #97	; 0x61
 801a176:	21ca      	movs	r1, #202	; 0xca
 801a178:	2072      	movs	r0, #114	; 0x72
 801a17a:	f004 fbb9 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+67, Y+2, 'l');
 801a17e:	226c      	movs	r2, #108	; 0x6c
 801a180:	21ca      	movs	r1, #202	; 0xca
 801a182:	207f      	movs	r0, #127	; 0x7f
 801a184:	f004 fbb4 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+89, Y+2, 'n');
 801a188:	226e      	movs	r2, #110	; 0x6e
 801a18a:	21ca      	movs	r1, #202	; 0xca
 801a18c:	2095      	movs	r0, #149	; 0x95
 801a18e:	f004 fbaf 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+102, Y+2, 'u');
 801a192:	2275      	movs	r2, #117	; 0x75
 801a194:	21ca      	movs	r1, #202	; 0xca
 801a196:	20a2      	movs	r0, #162	; 0xa2
 801a198:	f004 fbaa 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+115, Y+2, 'm');
 801a19c:	226d      	movs	r2, #109	; 0x6d
 801a19e:	21ca      	movs	r1, #202	; 0xca
 801a1a0:	20af      	movs	r0, #175	; 0xaf
 801a1a2:	f004 fba5 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+128, Y+2, 'b');
 801a1a6:	2262      	movs	r2, #98	; 0x62
 801a1a8:	21ca      	movs	r1, #202	; 0xca
 801a1aa:	20bc      	movs	r0, #188	; 0xbc
 801a1ac:	f004 fba0 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+141, Y+2, 'e');
 801a1b0:	2265      	movs	r2, #101	; 0x65
 801a1b2:	21ca      	movs	r1, #202	; 0xca
 801a1b4:	20c9      	movs	r0, #201	; 0xc9
 801a1b6:	f004 fb9b 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+154, Y+2, 'r');
 801a1ba:	2272      	movs	r2, #114	; 0x72
 801a1bc:	21ca      	movs	r1, #202	; 0xca
 801a1be:	20d6      	movs	r0, #214	; 0xd6
 801a1c0:	f004 fb96 	bl	801e8f0 <TFT_DrawChar>

	
	sprintf (buffer, "%u",  Part);
 801a1c4:	462a      	mov	r2, r5
 801a1c6:	490f      	ldr	r1, [pc, #60]	; (801a204 <GUI_TextEn_Info_Serial+0xe0>)
 801a1c8:	4668      	mov	r0, sp
 801a1ca:	f007 fde1 	bl	8021d90 <siprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801a1ce:	480e      	ldr	r0, [pc, #56]	; (801a208 <GUI_TextEn_Info_Serial+0xe4>)
 801a1d0:	f004 fac4 	bl	801e75c <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a1d4:	2303      	movs	r3, #3
 801a1d6:	466a      	mov	r2, sp
 801a1d8:	21e6      	movs	r1, #230	; 0xe6
 801a1da:	2028      	movs	r0, #40	; 0x28
 801a1dc:	f004 fbe0 	bl	801e9a0 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 801a1e0:	4622      	mov	r2, r4
 801a1e2:	490a      	ldr	r1, [pc, #40]	; (801a20c <GUI_TextEn_Info_Serial+0xe8>)
 801a1e4:	4668      	mov	r0, sp
 801a1e6:	f007 fdd3 	bl	8021d90 <siprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801a1ea:	2303      	movs	r3, #3
 801a1ec:	466a      	mov	r2, sp
 801a1ee:	21e6      	movs	r1, #230	; 0xe6
 801a1f0:	2087      	movs	r0, #135	; 0x87
 801a1f2:	f004 fbd5 	bl	801e9a0 <TFT_DisplayString>
}
 801a1f6:	b003      	add	sp, #12
 801a1f8:	bd30      	pop	{r4, r5, pc}
 801a1fa:	bf00      	nop
 801a1fc:	200001b0 	.word	0x200001b0
 801a200:	200001c0 	.word	0x200001c0
 801a204:	08031265 	.word	0x08031265
 801a208:	200001f0 	.word	0x200001f0
 801a20c:	08031268 	.word	0x08031268

0801a210 <GUI_TextEn_Info_Ver>:

void GUI_TextEn_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 801a210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 801a212:	2300      	movs	r3, #0
	
	X = 20;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 801a214:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801a218:	9302      	str	r3, [sp, #8]
 801a21a:	f88d 300c 	strb.w	r3, [sp, #12]
{
 801a21e:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 801a222:	f004 faa1 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a226:	2063      	movs	r0, #99	; 0x63
 801a228:	f004 faa4 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_big);
 801a22c:	482e      	ldr	r0, [pc, #184]	; (801a2e8 <GUI_TextEn_Info_Ver+0xd8>)
	TFT_DrawChar(X+55, Y+2, 'w');
	TFT_DrawChar(X+70, Y+2, 'a');
	TFT_DrawChar(X+86, Y+2, 'r');
	TFT_DrawChar(X+99, Y+2, 'e');
	
	TFT_SetFont(&Font16);
 801a22e:	4c2f      	ldr	r4, [pc, #188]	; (801a2ec <GUI_TextEn_Info_Ver+0xdc>)
	TFT_SetFont(&Font16EN_arch_big);
 801a230:	f004 fa94 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, Y, 'F');
 801a234:	2246      	movs	r2, #70	; 0x46
 801a236:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801a23a:	2014      	movs	r0, #20
 801a23c:	f004 fb58 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801a240:	482b      	ldr	r0, [pc, #172]	; (801a2f0 <GUI_TextEn_Info_Ver+0xe0>)
 801a242:	f004 fa8b 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+16, Y+2, 'i');
 801a246:	2269      	movs	r2, #105	; 0x69
 801a248:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a24c:	2024      	movs	r0, #36	; 0x24
 801a24e:	f004 fb4f 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+27, Y+2, 'r');
 801a252:	2272      	movs	r2, #114	; 0x72
 801a254:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a258:	202f      	movs	r0, #47	; 0x2f
 801a25a:	f004 fb49 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+40, Y+2, 'm');
 801a25e:	226d      	movs	r2, #109	; 0x6d
 801a260:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a264:	203c      	movs	r0, #60	; 0x3c
 801a266:	f004 fb43 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+55, Y+2, 'w');
 801a26a:	2277      	movs	r2, #119	; 0x77
 801a26c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a270:	204b      	movs	r0, #75	; 0x4b
 801a272:	f004 fb3d 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+70, Y+2, 'a');
 801a276:	2261      	movs	r2, #97	; 0x61
 801a278:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a27c:	205a      	movs	r0, #90	; 0x5a
 801a27e:	f004 fb37 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+86, Y+2, 'r');
 801a282:	2272      	movs	r2, #114	; 0x72
 801a284:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a288:	206a      	movs	r0, #106	; 0x6a
 801a28a:	f004 fb31 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+99, Y+2, 'e');
 801a28e:	2265      	movs	r2, #101	; 0x65
 801a290:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801a294:	2077      	movs	r0, #119	; 0x77
 801a296:	f004 fb2b 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16);
 801a29a:	4620      	mov	r0, r4
 801a29c:	f004 fa5e 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+152, Y, '.');
 801a2a0:	222e      	movs	r2, #46	; 0x2e
 801a2a2:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801a2a6:	20ac      	movs	r0, #172	; 0xac
 801a2a8:	f004 fb22 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+142, Y, 'v');
 801a2ac:	2276      	movs	r2, #118	; 0x76
 801a2ae:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801a2b2:	20a2      	movs	r0, #162	; 0xa2
 801a2b4:	f004 fb1c 	bl	801e8f0 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 801a2b8:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a2bc:	ee10 0a10 	vmov	r0, s0
 801a2c0:	f7e6 f952 	bl	8000568 <__aeabi_f2d>
 801a2c4:	4602      	mov	r2, r0
 801a2c6:	460b      	mov	r3, r1
 801a2c8:	a802      	add	r0, sp, #8
 801a2ca:	490a      	ldr	r1, [pc, #40]	; (801a2f4 <GUI_TextEn_Info_Ver+0xe4>)
 801a2cc:	f007 fd60 	bl	8021d90 <siprintf>
	TFT_SetFont(&Font16);
 801a2d0:	4620      	mov	r0, r4
 801a2d2:	f004 fa43 	bl	801e75c <TFT_SetFont>
	TFT_DisplayString(X+172, Y, (uint8_t *)buffer, LEFT_MODE);
 801a2d6:	2303      	movs	r3, #3
 801a2d8:	aa02      	add	r2, sp, #8
 801a2da:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801a2de:	20c0      	movs	r0, #192	; 0xc0
 801a2e0:	f004 fb5e 	bl	801e9a0 <TFT_DisplayString>
 801a2e4:	b004      	add	sp, #16
 801a2e6:	bd10      	pop	{r4, pc}
 801a2e8:	200001b0 	.word	0x200001b0
 801a2ec:	200001a8 	.word	0x200001a8
 801a2f0:	200001c0 	.word	0x200001c0
 801a2f4:	0803124d 	.word	0x0803124d

0801a2f8 <GUI_TitleString_Name>:
#include "stdio.h"
#include "GUI_Text_Elements_RU.h"

void GUI_TitleString_Name(uint16_t X, uint16_t Y)
{
 801a2f8:	b538      	push	{r3, r4, r5, lr}
 801a2fa:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801a2fc:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a300:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801a302:	f004 fa31 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 801a306:	2084      	movs	r0, #132	; 0x84
 801a308:	f004 fa34 	bl	801e774 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16EN_arch_big);
 801a30c:	4825      	ldr	r0, [pc, #148]	; (801a3a4 <GUI_TitleString_Name+0xac>)
 801a30e:	f004 fa25 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'T');
 801a312:	4629      	mov	r1, r5
 801a314:	4620      	mov	r0, r4
 801a316:	2254      	movs	r2, #84	; 0x54
 801a318:	f004 faea 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+15, 	Y, 'K');
 801a31c:	f104 000f 	add.w	r0, r4, #15
 801a320:	4629      	mov	r1, r5
 801a322:	224b      	movs	r2, #75	; 0x4b
 801a324:	b280      	uxth	r0, r0
 801a326:	f004 fae3 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+30, 	Y, 'A');
 801a32a:	f104 001e 	add.w	r0, r4, #30
 801a32e:	4629      	mov	r1, r5
 801a330:	2241      	movs	r2, #65	; 0x41
 801a332:	b280      	uxth	r0, r0
 801a334:	f004 fadc 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+45, 	Y, '-');
 801a338:	f104 002d 	add.w	r0, r4, #45	; 0x2d
 801a33c:	4629      	mov	r1, r5
 801a33e:	222d      	movs	r2, #45	; 0x2d
 801a340:	b280      	uxth	r0, r0
 801a342:	f004 fad5 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+60, 	Y, 'S');
 801a346:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801a34a:	4629      	mov	r1, r5
 801a34c:	2253      	movs	r2, #83	; 0x53
 801a34e:	b280      	uxth	r0, r0
 801a350:	f004 face 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_small);
 801a354:	4814      	ldr	r0, [pc, #80]	; (801a3a8 <GUI_TitleString_Name+0xb0>)
 801a356:	f004 fa01 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+75, 	Y, 'p');
 801a35a:	f104 004b 	add.w	r0, r4, #75	; 0x4b
 801a35e:	4629      	mov	r1, r5
 801a360:	2270      	movs	r2, #112	; 0x70
 801a362:	b280      	uxth	r0, r0
 801a364:	f004 fac4 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+88, 	Y, 'e');
 801a368:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a36c:	4629      	mov	r1, r5
 801a36e:	2265      	movs	r2, #101	; 0x65
 801a370:	b280      	uxth	r0, r0
 801a372:	f004 fabd 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+99, 	Y, 'c');
 801a376:	f104 0063 	add.w	r0, r4, #99	; 0x63
 801a37a:	4629      	mov	r1, r5
 801a37c:	2263      	movs	r2, #99	; 0x63
 801a37e:	b280      	uxth	r0, r0
 801a380:	f004 fab6 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+109, 	Y, 't');
 801a384:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 801a388:	4629      	mov	r1, r5
 801a38a:	2274      	movs	r2, #116	; 0x74
 801a38c:	b280      	uxth	r0, r0
 801a38e:	f004 faaf 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+120, 	Y, 'r');
 801a392:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801a396:	4629      	mov	r1, r5
 801a398:	2272      	movs	r2, #114	; 0x72
 801a39a:	b280      	uxth	r0, r0
}
 801a39c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+120, 	Y, 'r');
 801a3a0:	f004 baa6 	b.w	801e8f0 <TFT_DrawChar>
 801a3a4:	200001b0 	.word	0x200001b0
 801a3a8:	200001c0 	.word	0x200001c0

0801a3ac <GUI_TitleString_Version>:

void GUI_TitleString_Version(uint16_t X, uint16_t Y, float Version)
{
 801a3ac:	b530      	push	{r4, r5, lr}
 801a3ae:	b085      	sub	sp, #20
	char buffer[5] = {0};
 801a3b0:	2300      	movs	r3, #0
{
 801a3b2:	4604      	mov	r4, r0
	
	TFT_SetTextColor(TFT_White);
 801a3b4:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801a3b8:	9302      	str	r3, [sp, #8]
 801a3ba:	f88d 300c 	strb.w	r3, [sp, #12]
{
 801a3be:	ed8d 0a01 	vstr	s0, [sp, #4]
 801a3c2:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801a3c4:	f004 f9d0 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(0x0084);
 801a3c8:	2084      	movs	r0, #132	; 0x84
 801a3ca:	f004 f9d3 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16EN_arch_small);
 801a3ce:	4815      	ldr	r0, [pc, #84]	; (801a424 <GUI_TitleString_Version+0x78>)
 801a3d0:	f004 f9c4 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X, 		Y, 'v');
 801a3d4:	4629      	mov	r1, r5
 801a3d6:	2276      	movs	r2, #118	; 0x76
 801a3d8:	4620      	mov	r0, r4
 801a3da:	f004 fa89 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16EN_arch_big);
 801a3de:	4812      	ldr	r0, [pc, #72]	; (801a428 <GUI_TitleString_Version+0x7c>)
 801a3e0:	f004 f9bc 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+13, 		Y, '.');
 801a3e4:	f104 000d 	add.w	r0, r4, #13
 801a3e8:	222e      	movs	r2, #46	; 0x2e
 801a3ea:	4629      	mov	r1, r5
 801a3ec:	b280      	uxth	r0, r0
 801a3ee:	f004 fa7f 	bl	801e8f0 <TFT_DrawChar>
	sprintf (buffer, "%.1f",  Version);
 801a3f2:	ed9d 0a01 	vldr	s0, [sp, #4]
 801a3f6:	ee10 0a10 	vmov	r0, s0
 801a3fa:	f7e6 f8b5 	bl	8000568 <__aeabi_f2d>
 801a3fe:	4602      	mov	r2, r0
 801a400:	460b      	mov	r3, r1
 801a402:	a802      	add	r0, sp, #8
 801a404:	4909      	ldr	r1, [pc, #36]	; (801a42c <GUI_TitleString_Version+0x80>)
 801a406:	f007 fcc3 	bl	8021d90 <siprintf>
	TFT_SetFont(&Font16);
 801a40a:	4809      	ldr	r0, [pc, #36]	; (801a430 <GUI_TitleString_Version+0x84>)
 801a40c:	f004 f9a6 	bl	801e75c <TFT_SetFont>
	TFT_DisplayString(X+24, Y, (uint8_t *)buffer, LEFT_MODE);
 801a410:	f104 0018 	add.w	r0, r4, #24
 801a414:	2303      	movs	r3, #3
 801a416:	aa02      	add	r2, sp, #8
 801a418:	4629      	mov	r1, r5
 801a41a:	b280      	uxth	r0, r0
 801a41c:	f004 fac0 	bl	801e9a0 <TFT_DisplayString>
}
 801a420:	b005      	add	sp, #20
 801a422:	bd30      	pop	{r4, r5, pc}
 801a424:	200001c0 	.word	0x200001c0
 801a428:	200001b0 	.word	0x200001b0
 801a42c:	0803124d 	.word	0x0803124d
 801a430:	200001a8 	.word	0x200001a8

0801a434 <GUI_TextRu_Language>:

void GUI_TextRu_Language(uint16_t X, uint16_t Y)
{
 801a434:	b538      	push	{r3, r4, r5, lr}
 801a436:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a438:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a43c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a43e:	f004 f993 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a442:	2063      	movs	r0, #99	; 0x63
 801a444:	f004 f996 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a448:	4811      	ldr	r0, [pc, #68]	; (801a490 <GUI_TextRu_Language+0x5c>)
 801a44a:	f004 f987 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 801a44e:	4621      	mov	r1, r4
 801a450:	22af      	movs	r2, #175	; 0xaf
 801a452:	4628      	mov	r0, r5
 801a454:	f004 f994 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'з');
 801a458:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801a45a:	480e      	ldr	r0, [pc, #56]	; (801a494 <GUI_TextRu_Language+0x60>)
 801a45c:	f004 f97e 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'з');
 801a460:	b2a4      	uxth	r4, r4
 801a462:	f105 000f 	add.w	r0, r5, #15
 801a466:	4621      	mov	r1, r4
 801a468:	22b7      	movs	r2, #183	; 0xb7
 801a46a:	b280      	uxth	r0, r0
 801a46c:	f004 f988 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ы');
 801a470:	f105 001c 	add.w	r0, r5, #28
 801a474:	4621      	mov	r1, r4
 801a476:	228b      	movs	r2, #139	; 0x8b
 801a478:	b280      	uxth	r0, r0
 801a47a:	f004 f981 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'к');
 801a47e:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801a482:	4621      	mov	r1, r4
 801a484:	22ba      	movs	r2, #186	; 0xba
 801a486:	b280      	uxth	r0, r0
}
 801a488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+41, Y+5, 'к');
 801a48c:	f004 b978 	b.w	801e780 <TFT_DrawCharRus>
 801a490:	200001d0 	.word	0x200001d0
 801a494:	200001d8 	.word	0x200001d8

0801a498 <GUI_TextRu_Russian>:

void GUI_TextRu_Russian(uint16_t X, uint16_t Y)
{
 801a498:	b538      	push	{r3, r4, r5, lr}
 801a49a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a49c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a4a0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a4a2:	f004 f961 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a4a6:	2063      	movs	r0, #99	; 0x63
 801a4a8:	f004 f964 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a4ac:	481c      	ldr	r0, [pc, #112]	; (801a520 <GUI_TextRu_Russian+0x88>)
 801a4ae:	f004 f955 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 801a4b2:	4621      	mov	r1, r4
 801a4b4:	22a0      	movs	r2, #160	; 0xa0
 801a4b6:	4628      	mov	r0, r5
 801a4b8:	f004 f962 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'у');
 801a4bc:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801a4be:	4819      	ldr	r0, [pc, #100]	; (801a524 <GUI_TextRu_Russian+0x8c>)
	TFT_DrawCharRus(X+15, Y+5, 'у');
 801a4c0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801a4c2:	f004 f94b 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'у');
 801a4c6:	f105 000f 	add.w	r0, r5, #15
 801a4ca:	4621      	mov	r1, r4
 801a4cc:	2283      	movs	r2, #131	; 0x83
 801a4ce:	b280      	uxth	r0, r0
 801a4d0:	f004 f956 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'с');
 801a4d4:	f105 001c 	add.w	r0, r5, #28
 801a4d8:	4621      	mov	r1, r4
 801a4da:	2281      	movs	r2, #129	; 0x81
 801a4dc:	b280      	uxth	r0, r0
 801a4de:	f004 f94f 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'с');
 801a4e2:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801a4e6:	4621      	mov	r1, r4
 801a4e8:	2281      	movs	r2, #129	; 0x81
 801a4ea:	b280      	uxth	r0, r0
 801a4ec:	f004 f948 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'к');
 801a4f0:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801a4f4:	4621      	mov	r1, r4
 801a4f6:	22ba      	movs	r2, #186	; 0xba
 801a4f8:	b280      	uxth	r0, r0
 801a4fa:	f004 f941 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+64, Y+5, 'и');
 801a4fe:	f105 0040 	add.w	r0, r5, #64	; 0x40
 801a502:	4621      	mov	r1, r4
 801a504:	22b8      	movs	r2, #184	; 0xb8
 801a506:	b280      	uxth	r0, r0
 801a508:	f004 f93a 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+77, Y+5, 'й');
 801a50c:	f105 004d 	add.w	r0, r5, #77	; 0x4d
 801a510:	4621      	mov	r1, r4
 801a512:	22b9      	movs	r2, #185	; 0xb9
 801a514:	b280      	uxth	r0, r0
}
 801a516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+77, Y+5, 'й');
 801a51a:	f004 b931 	b.w	801e780 <TFT_DrawCharRus>
 801a51e:	bf00      	nop
 801a520:	200001d0 	.word	0x200001d0
 801a524:	200001d8 	.word	0x200001d8

0801a528 <GUI_TextRu_Info>:



void GUI_TextRu_Info(uint16_t X, uint16_t Y)
{
 801a528:	b538      	push	{r3, r4, r5, lr}
 801a52a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a52c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a530:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a532:	f004 f919 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a536:	2063      	movs	r0, #99	; 0x63
 801a538:	f004 f91c 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a53c:	4849      	ldr	r0, [pc, #292]	; (801a664 <GUI_TextRu_Info+0x13c>)
 801a53e:	f004 f90d 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'И');
 801a542:	4621      	mov	r1, r4
 801a544:	2298      	movs	r2, #152	; 0x98
 801a546:	4628      	mov	r0, r5
 801a548:	f004 f91a 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'н');
 801a54c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801a54e:	4846      	ldr	r0, [pc, #280]	; (801a668 <GUI_TextRu_Info+0x140>)
	TFT_DrawCharRus(X+15, Y+5, 'н');
 801a550:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801a552:	f004 f903 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'н');
 801a556:	f105 000f 	add.w	r0, r5, #15
 801a55a:	4621      	mov	r1, r4
 801a55c:	22bd      	movs	r2, #189	; 0xbd
 801a55e:	b280      	uxth	r0, r0
 801a560:	f004 f90e 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ф');
 801a564:	f105 001c 	add.w	r0, r5, #28
 801a568:	4621      	mov	r1, r4
 801a56a:	2284      	movs	r2, #132	; 0x84
 801a56c:	b280      	uxth	r0, r0
 801a56e:	f004 f907 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'о');
 801a572:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801a576:	4621      	mov	r1, r4
 801a578:	22be      	movs	r2, #190	; 0xbe
 801a57a:	b280      	uxth	r0, r0
 801a57c:	f004 f900 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'р');
 801a580:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801a584:	4621      	mov	r1, r4
 801a586:	2280      	movs	r2, #128	; 0x80
 801a588:	b280      	uxth	r0, r0
 801a58a:	f004 f8f9 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'м');
 801a58e:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801a592:	4621      	mov	r1, r4
 801a594:	22bc      	movs	r2, #188	; 0xbc
 801a596:	b280      	uxth	r0, r0
 801a598:	f004 f8f2 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+78, Y+5, 'а');
 801a59c:	f105 004e 	add.w	r0, r5, #78	; 0x4e
 801a5a0:	4621      	mov	r1, r4
 801a5a2:	22b0      	movs	r2, #176	; 0xb0
 801a5a4:	b280      	uxth	r0, r0
 801a5a6:	f004 f8eb 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+90, Y+5, 'ц');
 801a5aa:	f105 005a 	add.w	r0, r5, #90	; 0x5a
 801a5ae:	4621      	mov	r1, r4
 801a5b0:	2286      	movs	r2, #134	; 0x86
 801a5b2:	b280      	uxth	r0, r0
 801a5b4:	f004 f8e4 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+102, Y+5, 'и');
 801a5b8:	f105 0066 	add.w	r0, r5, #102	; 0x66
 801a5bc:	4621      	mov	r1, r4
 801a5be:	22b8      	movs	r2, #184	; 0xb8
 801a5c0:	b280      	uxth	r0, r0
 801a5c2:	f004 f8dd 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+114, Y+5, 'я');
 801a5c6:	f105 0072 	add.w	r0, r5, #114	; 0x72
 801a5ca:	4621      	mov	r1, r4
 801a5cc:	228f      	movs	r2, #143	; 0x8f
 801a5ce:	b280      	uxth	r0, r0
 801a5d0:	f004 f8d6 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+126, Y+5, 0x01);
 801a5d4:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 801a5d8:	4621      	mov	r1, r4
 801a5da:	2201      	movs	r2, #1
 801a5dc:	b280      	uxth	r0, r0
 801a5de:	f004 f8cf 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+138, Y+5, 'о');
 801a5e2:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 801a5e6:	4621      	mov	r1, r4
 801a5e8:	22be      	movs	r2, #190	; 0xbe
 801a5ea:	b280      	uxth	r0, r0
 801a5ec:	f004 f8c8 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+150, Y+5, 0x01);
 801a5f0:	f105 0096 	add.w	r0, r5, #150	; 0x96
 801a5f4:	4621      	mov	r1, r4
 801a5f6:	2201      	movs	r2, #1
 801a5f8:	b280      	uxth	r0, r0
 801a5fa:	f004 f8c1 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+5, 'п');
 801a5fe:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 801a602:	4621      	mov	r1, r4
 801a604:	22bf      	movs	r2, #191	; 0xbf
 801a606:	b280      	uxth	r0, r0
 801a608:	f004 f8ba 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+174, Y+5, 'р');
 801a60c:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 801a610:	4621      	mov	r1, r4
 801a612:	2280      	movs	r2, #128	; 0x80
 801a614:	b280      	uxth	r0, r0
 801a616:	f004 f8b3 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+186, Y+5, 'и');
 801a61a:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 801a61e:	4621      	mov	r1, r4
 801a620:	22b8      	movs	r2, #184	; 0xb8
 801a622:	b280      	uxth	r0, r0
 801a624:	f004 f8ac 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+198, Y+5, 'б');
 801a628:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 801a62c:	4621      	mov	r1, r4
 801a62e:	22b1      	movs	r2, #177	; 0xb1
 801a630:	b280      	uxth	r0, r0
 801a632:	f004 f8a5 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+210, Y+5, 'о');
 801a636:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 801a63a:	4621      	mov	r1, r4
 801a63c:	22be      	movs	r2, #190	; 0xbe
 801a63e:	b280      	uxth	r0, r0
 801a640:	f004 f89e 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+222, Y+5, 'р');
 801a644:	f105 00de 	add.w	r0, r5, #222	; 0xde
 801a648:	4621      	mov	r1, r4
 801a64a:	2280      	movs	r2, #128	; 0x80
 801a64c:	b280      	uxth	r0, r0
 801a64e:	f004 f897 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+234, Y+5, 'е');
 801a652:	f105 00ea 	add.w	r0, r5, #234	; 0xea
 801a656:	4621      	mov	r1, r4
 801a658:	22b5      	movs	r2, #181	; 0xb5
 801a65a:	b280      	uxth	r0, r0
}
 801a65c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+234, Y+5, 'е');
 801a660:	f004 b88e 	b.w	801e780 <TFT_DrawCharRus>
 801a664:	200001d0 	.word	0x200001d0
 801a668:	200001d8 	.word	0x200001d8

0801a66c <GUI_TextRu_Mode>:

void GUI_TextRu_Mode(uint16_t X, uint16_t Y)
{
 801a66c:	b538      	push	{r3, r4, r5, lr}
 801a66e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a670:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a674:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a676:	f004 f877 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a67a:	2063      	movs	r0, #99	; 0x63
 801a67c:	f004 f87a 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a680:	4815      	ldr	r0, [pc, #84]	; (801a6d8 <GUI_TextRu_Mode+0x6c>)
 801a682:	f004 f86b 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Р');
 801a686:	4621      	mov	r1, r4
 801a688:	22a0      	movs	r2, #160	; 0xa0
 801a68a:	4628      	mov	r0, r5
 801a68c:	f004 f878 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'е');
 801a690:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801a692:	4812      	ldr	r0, [pc, #72]	; (801a6dc <GUI_TextRu_Mode+0x70>)
 801a694:	f004 f862 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'е');
 801a698:	b2a4      	uxth	r4, r4
 801a69a:	f105 000f 	add.w	r0, r5, #15
 801a69e:	4621      	mov	r1, r4
 801a6a0:	22b5      	movs	r2, #181	; 0xb5
 801a6a2:	b280      	uxth	r0, r0
 801a6a4:	f004 f86c 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'ж');
 801a6a8:	f105 001c 	add.w	r0, r5, #28
 801a6ac:	4621      	mov	r1, r4
 801a6ae:	22b6      	movs	r2, #182	; 0xb6
 801a6b0:	b280      	uxth	r0, r0
 801a6b2:	f004 f865 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 801a6b6:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801a6ba:	4621      	mov	r1, r4
 801a6bc:	22b8      	movs	r2, #184	; 0xb8
 801a6be:	b280      	uxth	r0, r0
 801a6c0:	f004 f85e 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+54, Y+5, 'м');
 801a6c4:	f105 0036 	add.w	r0, r5, #54	; 0x36
 801a6c8:	4621      	mov	r1, r4
 801a6ca:	22bc      	movs	r2, #188	; 0xbc
 801a6cc:	b280      	uxth	r0, r0
}
 801a6ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+54, Y+5, 'м');
 801a6d2:	f004 b855 	b.w	801e780 <TFT_DrawCharRus>
 801a6d6:	bf00      	nop
 801a6d8:	200001d0 	.word	0x200001d0
 801a6dc:	200001d8 	.word	0x200001d8

0801a6e0 <GUI_TextRu_Illuminance>:

void GUI_TextRu_Illuminance(uint16_t X, uint16_t Y)
{
 801a6e0:	b538      	push	{r3, r4, r5, lr}
 801a6e2:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a6e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a6e8:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a6ea:	f004 f83d 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a6ee:	2063      	movs	r0, #99	; 0x63
 801a6f0:	f004 f840 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a6f4:	482d      	ldr	r0, [pc, #180]	; (801a7ac <GUI_TextRu_Illuminance+0xcc>)
 801a6f6:	f004 f831 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 801a6fa:	4621      	mov	r1, r4
 801a6fc:	229e      	movs	r2, #158	; 0x9e
 801a6fe:	4628      	mov	r0, r5
 801a700:	f004 f83e 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'с');
 801a704:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801a706:	482a      	ldr	r0, [pc, #168]	; (801a7b0 <GUI_TextRu_Illuminance+0xd0>)
	TFT_DrawCharRus(X+15, Y+5, 'с');
 801a708:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801a70a:	f004 f827 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'с');
 801a70e:	f105 000f 	add.w	r0, r5, #15
 801a712:	4621      	mov	r1, r4
 801a714:	2281      	movs	r2, #129	; 0x81
 801a716:	b280      	uxth	r0, r0
 801a718:	f004 f832 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+26, Y+5, 'в');
 801a71c:	f105 001a 	add.w	r0, r5, #26
 801a720:	4621      	mov	r1, r4
 801a722:	22b2      	movs	r2, #178	; 0xb2
 801a724:	b280      	uxth	r0, r0
 801a726:	f004 f82b 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+38, Y+5, 'е');
 801a72a:	f105 0026 	add.w	r0, r5, #38	; 0x26
 801a72e:	4621      	mov	r1, r4
 801a730:	22b5      	movs	r2, #181	; 0xb5
 801a732:	b280      	uxth	r0, r0
 801a734:	f004 f824 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+50, Y+5, 'щ');
 801a738:	f105 0032 	add.w	r0, r5, #50	; 0x32
 801a73c:	4621      	mov	r1, r4
 801a73e:	2289      	movs	r2, #137	; 0x89
 801a740:	b280      	uxth	r0, r0
 801a742:	f004 f81d 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+62, Y+5, 'е');
 801a746:	f105 003e 	add.w	r0, r5, #62	; 0x3e
 801a74a:	4621      	mov	r1, r4
 801a74c:	22b5      	movs	r2, #181	; 0xb5
 801a74e:	b280      	uxth	r0, r0
 801a750:	f004 f816 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'н');
 801a754:	f105 0049 	add.w	r0, r5, #73	; 0x49
 801a758:	4621      	mov	r1, r4
 801a75a:	22bd      	movs	r2, #189	; 0xbd
 801a75c:	b280      	uxth	r0, r0
 801a75e:	f004 f80f 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'н');
 801a762:	f105 0055 	add.w	r0, r5, #85	; 0x55
 801a766:	4621      	mov	r1, r4
 801a768:	22bd      	movs	r2, #189	; 0xbd
 801a76a:	b280      	uxth	r0, r0
 801a76c:	f004 f808 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 801a770:	f105 0061 	add.w	r0, r5, #97	; 0x61
 801a774:	4621      	mov	r1, r4
 801a776:	22be      	movs	r2, #190	; 0xbe
 801a778:	b280      	uxth	r0, r0
 801a77a:	f004 f801 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 801a77e:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 801a782:	4621      	mov	r1, r4
 801a784:	2281      	movs	r2, #129	; 0x81
 801a786:	b280      	uxth	r0, r0
 801a788:	f003 fffa 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+5, 'т');
 801a78c:	f105 0076 	add.w	r0, r5, #118	; 0x76
 801a790:	4621      	mov	r1, r4
 801a792:	2282      	movs	r2, #130	; 0x82
 801a794:	b280      	uxth	r0, r0
 801a796:	f003 fff3 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 801a79a:	f105 0082 	add.w	r0, r5, #130	; 0x82
 801a79e:	4621      	mov	r1, r4
 801a7a0:	228c      	movs	r2, #140	; 0x8c
 801a7a2:	b280      	uxth	r0, r0
}
 801a7a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+130, Y+5, 'ь');
 801a7a8:	f003 bfea 	b.w	801e780 <TFT_DrawCharRus>
 801a7ac:	200001d0 	.word	0x200001d0
 801a7b0:	200001d8 	.word	0x200001d8

0801a7b4 <GUI_TextRu_PPF>:

void GUI_TextRu_PPF(uint16_t X, uint16_t Y)
{
 801a7b4:	b538      	push	{r3, r4, r5, lr}
 801a7b6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801a7b8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a7bc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801a7be:	f003 ffd3 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a7c2:	2063      	movs	r0, #99	; 0x63
 801a7c4:	f003 ffd6 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a7c8:	480b      	ldr	r0, [pc, #44]	; (801a7f8 <GUI_TextRu_PPF+0x44>)
 801a7ca:	f003 ffc7 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 801a7ce:	4629      	mov	r1, r5
 801a7d0:	4620      	mov	r0, r4
 801a7d2:	22a4      	movs	r2, #164	; 0xa4
 801a7d4:	f003 ffd4 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 801a7d8:	f104 0011 	add.w	r0, r4, #17
 801a7dc:	4629      	mov	r1, r5
 801a7de:	2290      	movs	r2, #144	; 0x90
 801a7e0:	b280      	uxth	r0, r0
 801a7e2:	f003 ffcd 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 801a7e6:	f104 0020 	add.w	r0, r4, #32
 801a7ea:	4629      	mov	r1, r5
 801a7ec:	22a0      	movs	r2, #160	; 0xa0
 801a7ee:	b280      	uxth	r0, r0
}
 801a7f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+32, Y, 'Р');
 801a7f4:	f003 bfc4 	b.w	801e780 <TFT_DrawCharRus>
 801a7f8:	200001d0 	.word	0x200001d0

0801a7fc <GUI_TextRu_PPF_RGB>:

void GUI_TextRu_PPF_RGB(uint16_t X, uint16_t Y)
{
 801a7fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a800:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
	TFT_SetBackColor(TFT_Black_Bkgr);
	TFT_SetFont(&Font16RU_arch_big);
 801a802:	f8df 910c 	ldr.w	r9, [pc, #268]	; 801a910 <GUI_TextRu_PPF_RGB+0x114>
	TFT_DrawCharRus(X, Y, 'С');
	TFT_SetFont(&Font16RU_arch_small);
 801a806:	f8df 810c 	ldr.w	r8, [pc, #268]	; 801a914 <GUI_TextRu_PPF_RGB+0x118>
	TFT_DrawCharRus(X+15, Y+5, 'и');
	TFT_DrawCharRus(X+27, Y+5, 'н');
	TFT_SetFont(&Font16EN_arch_big);
 801a80a:	4f40      	ldr	r7, [pc, #256]	; (801a90c <GUI_TextRu_PPF_RGB+0x110>)
	TFT_SetTextColor(TFT_White);
 801a80c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a810:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801a812:	f003 ffa9 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a816:	2063      	movs	r0, #99	; 0x63
 801a818:	f003 ffac 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a81c:	4648      	mov	r0, r9
 801a81e:	f003 ff9d 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'С');
 801a822:	4629      	mov	r1, r5
 801a824:	22a1      	movs	r2, #161	; 0xa1
 801a826:	4620      	mov	r0, r4
 801a828:	f003 ffaa 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 801a82c:	1d6e      	adds	r6, r5, #5
	TFT_SetFont(&Font16RU_arch_small);
 801a82e:	4640      	mov	r0, r8
	TFT_DrawCharRus(X+15, Y+5, 'и');
 801a830:	b2b6      	uxth	r6, r6
	TFT_SetFont(&Font16RU_arch_small);
 801a832:	f003 ff93 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'и');
 801a836:	f104 000f 	add.w	r0, r4, #15
 801a83a:	4631      	mov	r1, r6
 801a83c:	22b8      	movs	r2, #184	; 0xb8
 801a83e:	b280      	uxth	r0, r0
 801a840:	f003 ff9e 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'н');
 801a844:	f104 001b 	add.w	r0, r4, #27
 801a848:	4631      	mov	r1, r6
 801a84a:	22bd      	movs	r2, #189	; 0xbd
 801a84c:	b280      	uxth	r0, r0
 801a84e:	f003 ff97 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 801a852:	4638      	mov	r0, r7
 801a854:	f003 ff82 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+40, Y, '-');
 801a858:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801a85c:	4629      	mov	r1, r5
 801a85e:	222d      	movs	r2, #45	; 0x2d
 801a860:	b280      	uxth	r0, r0
 801a862:	f004 f845 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 801a866:	4648      	mov	r0, r9
 801a868:	f003 ff78 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+55, Y, 'З');
 801a86c:	f104 0037 	add.w	r0, r4, #55	; 0x37
 801a870:	4629      	mov	r1, r5
 801a872:	2297      	movs	r2, #151	; 0x97
 801a874:	b280      	uxth	r0, r0
 801a876:	f003 ff83 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801a87a:	4640      	mov	r0, r8
 801a87c:	f003 ff6e 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+70, Y+5, 'е');
 801a880:	f104 0046 	add.w	r0, r4, #70	; 0x46
 801a884:	4631      	mov	r1, r6
 801a886:	22b5      	movs	r2, #181	; 0xb5
 801a888:	b280      	uxth	r0, r0
 801a88a:	f003 ff79 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+5, 'л');
 801a88e:	f104 0052 	add.w	r0, r4, #82	; 0x52
 801a892:	4631      	mov	r1, r6
 801a894:	22bb      	movs	r2, #187	; 0xbb
 801a896:	b280      	uxth	r0, r0
 801a898:	f003 ff72 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 801a89c:	4638      	mov	r0, r7
 801a89e:	f003 ff5d 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+94, Y, '-');
 801a8a2:	f104 005e 	add.w	r0, r4, #94	; 0x5e
 801a8a6:	4629      	mov	r1, r5
 801a8a8:	222d      	movs	r2, #45	; 0x2d
 801a8aa:	b280      	uxth	r0, r0
 801a8ac:	f004 f820 	bl	801e8f0 <TFT_DrawChar>
	TFT_SetFont(&Font16RU_arch_big);
 801a8b0:	4648      	mov	r0, r9
 801a8b2:	f003 ff53 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+109, Y, 'К');
 801a8b6:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 801a8ba:	4629      	mov	r1, r5
 801a8bc:	229a      	movs	r2, #154	; 0x9a
 801a8be:	b280      	uxth	r0, r0
 801a8c0:	f003 ff5e 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801a8c4:	4640      	mov	r0, r8
 801a8c6:	f003 ff49 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+124, Y+5, 'р');
 801a8ca:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 801a8ce:	4631      	mov	r1, r6
 801a8d0:	2280      	movs	r2, #128	; 0x80
 801a8d2:	b280      	uxth	r0, r0
 801a8d4:	f003 ff54 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 801a8d8:	4638      	mov	r0, r7
 801a8da:	f003 ff3f 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+136, Y, '-');
 801a8de:	f104 0088 	add.w	r0, r4, #136	; 0x88
 801a8e2:	4629      	mov	r1, r5
 801a8e4:	222d      	movs	r2, #45	; 0x2d
 801a8e6:	b280      	uxth	r0, r0
 801a8e8:	f004 f802 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+152, Y, 'F');
 801a8ec:	f104 0098 	add.w	r0, r4, #152	; 0x98
 801a8f0:	4629      	mov	r1, r5
 801a8f2:	2246      	movs	r2, #70	; 0x46
 801a8f4:	b280      	uxth	r0, r0
 801a8f6:	f003 fffb 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+167, Y, 'R');
 801a8fa:	f104 00a7 	add.w	r0, r4, #167	; 0xa7
 801a8fe:	4629      	mov	r1, r5
 801a900:	2252      	movs	r2, #82	; 0x52
 801a902:	b280      	uxth	r0, r0
}
 801a904:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	TFT_DrawChar(X+167, Y, 'R');
 801a908:	f003 bff2 	b.w	801e8f0 <TFT_DrawChar>
 801a90c:	200001b0 	.word	0x200001b0
 801a910:	200001d0 	.word	0x200001d0
 801a914:	200001d8 	.word	0x200001d8

0801a918 <GUI_TextRu_PPF_bands>:
void GUI_TextRu_PPF_bands(uint16_t X, uint16_t Y)
{
 801a918:	b538      	push	{r3, r4, r5, lr}
 801a91a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801a91c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801a920:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801a922:	f003 ff21 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801a926:	2063      	movs	r0, #99	; 0x63
 801a928:	f003 ff24 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801a92c:	482d      	ldr	r0, [pc, #180]	; (801a9e4 <GUI_TextRu_PPF_bands+0xcc>)
 801a92e:	f003 ff15 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Ф');
 801a932:	4621      	mov	r1, r4
 801a934:	4628      	mov	r0, r5
 801a936:	22a4      	movs	r2, #164	; 0xa4
 801a938:	f003 ff22 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'А');
 801a93c:	f105 0011 	add.w	r0, r5, #17
 801a940:	4621      	mov	r1, r4
 801a942:	2290      	movs	r2, #144	; 0x90
 801a944:	b280      	uxth	r0, r0
 801a946:	f003 ff1b 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+32, Y, 'Р');
 801a94a:	f105 0020 	add.w	r0, r5, #32
 801a94e:	4621      	mov	r1, r4
 801a950:	22a0      	movs	r2, #160	; 0xa0
 801a952:	b280      	uxth	r0, r0
 801a954:	f003 ff14 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+57, Y+2, 'д');
 801a958:	3402      	adds	r4, #2
	TFT_SetFont(&Font16RU_arch_small);
 801a95a:	4823      	ldr	r0, [pc, #140]	; (801a9e8 <GUI_TextRu_PPF_bands+0xd0>)
	TFT_DrawCharRus(X+57, Y+2, 'д');
 801a95c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801a95e:	f003 fefd 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+57, Y+2, 'д');
 801a962:	f105 0039 	add.w	r0, r5, #57	; 0x39
 801a966:	4621      	mov	r1, r4
 801a968:	22b4      	movs	r2, #180	; 0xb4
 801a96a:	b280      	uxth	r0, r0
 801a96c:	f003 ff08 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+70, Y+2, 'и');
 801a970:	f105 0046 	add.w	r0, r5, #70	; 0x46
 801a974:	4621      	mov	r1, r4
 801a976:	22b8      	movs	r2, #184	; 0xb8
 801a978:	b280      	uxth	r0, r0
 801a97a:	f003 ff01 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+83, Y+2, 'а');
 801a97e:	f105 0053 	add.w	r0, r5, #83	; 0x53
 801a982:	4621      	mov	r1, r4
 801a984:	22b0      	movs	r2, #176	; 0xb0
 801a986:	b280      	uxth	r0, r0
 801a988:	f003 fefa 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+96, Y+2, 'п');
 801a98c:	f105 0060 	add.w	r0, r5, #96	; 0x60
 801a990:	4621      	mov	r1, r4
 801a992:	22bf      	movs	r2, #191	; 0xbf
 801a994:	b280      	uxth	r0, r0
 801a996:	f003 fef3 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+2, 'а');
 801a99a:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 801a99e:	4621      	mov	r1, r4
 801a9a0:	22b0      	movs	r2, #176	; 0xb0
 801a9a2:	b280      	uxth	r0, r0
 801a9a4:	f003 feec 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+122, Y+2, 'з');
 801a9a8:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 801a9ac:	4621      	mov	r1, r4
 801a9ae:	22b7      	movs	r2, #183	; 0xb7
 801a9b0:	b280      	uxth	r0, r0
 801a9b2:	f003 fee5 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+135, Y+2, 'о');
 801a9b6:	f105 0087 	add.w	r0, r5, #135	; 0x87
 801a9ba:	4621      	mov	r1, r4
 801a9bc:	22be      	movs	r2, #190	; 0xbe
 801a9be:	b280      	uxth	r0, r0
 801a9c0:	f003 fede 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+148, Y+2, 'н');
 801a9c4:	f105 0094 	add.w	r0, r5, #148	; 0x94
 801a9c8:	4621      	mov	r1, r4
 801a9ca:	22bd      	movs	r2, #189	; 0xbd
 801a9cc:	b280      	uxth	r0, r0
 801a9ce:	f003 fed7 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 801a9d2:	f105 00a2 	add.w	r0, r5, #162	; 0xa2
 801a9d6:	4621      	mov	r1, r4
 801a9d8:	228b      	movs	r2, #139	; 0x8b
 801a9da:	b280      	uxth	r0, r0
}
 801a9dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+162, Y+2, 'ы');
 801a9e0:	f003 bece 	b.w	801e780 <TFT_DrawCharRus>
 801a9e4:	200001d0 	.word	0x200001d0
 801a9e8:	200001d8 	.word	0x200001d8

0801a9ec <GUI_TextRu_Info_Callibration>:

void GUI_TextRu_Info_Callibration(uint16_t X, uint16_t Y, uint8_t date, uint8_t month, uint16_t year)
{
 801a9ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a9ee:	461e      	mov	r6, r3
	char buffer[5] = {0};
	
	X = 70;
	Y = 100;
	
	TFT_SetTextColor(TFT_White);
 801a9f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	9300      	str	r3, [sp, #0]
 801a9f8:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801a9fc:	4614      	mov	r4, r2
	TFT_SetTextColor(TFT_White);
 801a9fe:	f003 feb3 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801aa02:	2063      	movs	r0, #99	; 0x63
 801aa04:	f003 feb6 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801aa08:	4832      	ldr	r0, [pc, #200]	; (801aad4 <GUI_TextRu_Info_Callibration+0xe8>)
	TFT_DrawCharRus(X+82, Y+2, 'о');
	TFT_DrawCharRus(X+95, Y+2, 'в');
	TFT_DrawCharRus(X+108, Y+2, 'к');
	TFT_DrawCharRus(X+118, Y+2, 'а');
	
	sprintf (buffer, "%02u",  date);
 801aa0a:	4d33      	ldr	r5, [pc, #204]	; (801aad8 <GUI_TextRu_Info_Callibration+0xec>)
	TFT_SetFont(&Font16RU_arch_big);
 801aa0c:	f003 fea6 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'К');
 801aa10:	229a      	movs	r2, #154	; 0x9a
 801aa12:	2160      	movs	r1, #96	; 0x60
 801aa14:	2046      	movs	r0, #70	; 0x46
 801aa16:	f003 feb3 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801aa1a:	4830      	ldr	r0, [pc, #192]	; (801aadc <GUI_TextRu_Info_Callibration+0xf0>)
 801aa1c:	f003 fe9e 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'а');
 801aa20:	22b0      	movs	r2, #176	; 0xb0
 801aa22:	2166      	movs	r1, #102	; 0x66
 801aa24:	2057      	movs	r0, #87	; 0x57
 801aa26:	f003 feab 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'л');
 801aa2a:	22bb      	movs	r2, #187	; 0xbb
 801aa2c:	2166      	movs	r1, #102	; 0x66
 801aa2e:	2064      	movs	r0, #100	; 0x64
 801aa30:	f003 fea6 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 801aa34:	22b8      	movs	r2, #184	; 0xb8
 801aa36:	2166      	movs	r1, #102	; 0x66
 801aa38:	2071      	movs	r0, #113	; 0x71
 801aa3a:	f003 fea1 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'б');
 801aa3e:	22b1      	movs	r2, #177	; 0xb1
 801aa40:	2166      	movs	r1, #102	; 0x66
 801aa42:	207e      	movs	r0, #126	; 0x7e
 801aa44:	f003 fe9c 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'р');
 801aa48:	2280      	movs	r2, #128	; 0x80
 801aa4a:	2166      	movs	r1, #102	; 0x66
 801aa4c:	208b      	movs	r0, #139	; 0x8b
 801aa4e:	f003 fe97 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'о');
 801aa52:	22be      	movs	r2, #190	; 0xbe
 801aa54:	2166      	movs	r1, #102	; 0x66
 801aa56:	2098      	movs	r0, #152	; 0x98
 801aa58:	f003 fe92 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'в');
 801aa5c:	22b2      	movs	r2, #178	; 0xb2
 801aa5e:	2166      	movs	r1, #102	; 0x66
 801aa60:	20a5      	movs	r0, #165	; 0xa5
 801aa62:	f003 fe8d 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+108, Y+2, 'к');
 801aa66:	22ba      	movs	r2, #186	; 0xba
 801aa68:	2166      	movs	r1, #102	; 0x66
 801aa6a:	20b2      	movs	r0, #178	; 0xb2
 801aa6c:	f003 fe88 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+118, Y+2, 'а');
 801aa70:	22b0      	movs	r2, #176	; 0xb0
 801aa72:	2166      	movs	r1, #102	; 0x66
 801aa74:	20bc      	movs	r0, #188	; 0xbc
 801aa76:	f003 fe83 	bl	801e780 <TFT_DrawCharRus>
	sprintf (buffer, "%02u",  date);
 801aa7a:	4622      	mov	r2, r4
 801aa7c:	4629      	mov	r1, r5
 801aa7e:	4668      	mov	r0, sp
 801aa80:	f007 f986 	bl	8021d90 <siprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801aa84:	4816      	ldr	r0, [pc, #88]	; (801aae0 <GUI_TextRu_Info_Callibration+0xf4>)
 801aa86:	f003 fe69 	bl	801e75c <TFT_SetFont>
	buffer[2] = '.';
 801aa8a:	242e      	movs	r4, #46	; 0x2e
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801aa8c:	2303      	movs	r3, #3
 801aa8e:	466a      	mov	r2, sp
 801aa90:	2182      	movs	r1, #130	; 0x82
 801aa92:	201e      	movs	r0, #30
	buffer[2] = '.';
 801aa94:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801aa98:	f003 ff82 	bl	801e9a0 <TFT_DisplayString>
	
	sprintf (buffer, "%02u",  month);
 801aa9c:	4632      	mov	r2, r6
 801aa9e:	4629      	mov	r1, r5
 801aaa0:	4668      	mov	r0, sp
 801aaa2:	f007 f975 	bl	8021d90 <siprintf>
	buffer[2] = '.';
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801aaa6:	2303      	movs	r3, #3
 801aaa8:	466a      	mov	r2, sp
 801aaaa:	2182      	movs	r1, #130	; 0x82
 801aaac:	205a      	movs	r0, #90	; 0x5a
	buffer[2] = '.';
 801aaae:	f88d 4002 	strb.w	r4, [sp, #2]
	TFT_DisplayString(30+60, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801aab2:	f003 ff75 	bl	801e9a0 <TFT_DisplayString>
	
	sprintf (buffer, "%4u",  year);
 801aab6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
 801aaba:	490a      	ldr	r1, [pc, #40]	; (801aae4 <GUI_TextRu_Info_Callibration+0xf8>)
 801aabc:	4668      	mov	r0, sp
 801aabe:	f007 f967 	bl	8021d90 <siprintf>
	TFT_DisplayString(30+125, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801aac2:	2303      	movs	r3, #3
 801aac4:	466a      	mov	r2, sp
 801aac6:	2182      	movs	r1, #130	; 0x82
 801aac8:	209b      	movs	r0, #155	; 0x9b
 801aaca:	f003 ff69 	bl	801e9a0 <TFT_DisplayString>
}
 801aace:	b002      	add	sp, #8
 801aad0:	bd70      	pop	{r4, r5, r6, pc}
 801aad2:	bf00      	nop
 801aad4:	200001d0 	.word	0x200001d0
 801aad8:	0803125c 	.word	0x0803125c
 801aadc:	200001d8 	.word	0x200001d8
 801aae0:	200001f0 	.word	0x200001f0
 801aae4:	08031261 	.word	0x08031261

0801aae8 <GUI_TextRu_WriteSD>:

void GUI_TextRu_WriteSD(uint16_t X, uint16_t Y)
{
 801aae8:	b538      	push	{r3, r4, r5, lr}
 801aaea:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801aaec:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801aaf0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801aaf2:	f003 fe39 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801aaf6:	2063      	movs	r0, #99	; 0x63
 801aaf8:	f003 fe3c 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801aafc:	4818      	ldr	r0, [pc, #96]	; (801ab60 <GUI_TextRu_WriteSD+0x78>)
 801aafe:	f003 fe2d 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'З');
 801ab02:	4621      	mov	r1, r4
 801ab04:	2297      	movs	r2, #151	; 0x97
 801ab06:	4628      	mov	r0, r5
 801ab08:	f003 fe3a 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+15, Y+5, 'а');
 801ab0c:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801ab0e:	4815      	ldr	r0, [pc, #84]	; (801ab64 <GUI_TextRu_WriteSD+0x7c>)
	TFT_DrawCharRus(X+15, Y+5, 'а');
 801ab10:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801ab12:	f003 fe23 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+15, Y+5, 'а');
 801ab16:	f105 000f 	add.w	r0, r5, #15
 801ab1a:	4621      	mov	r1, r4
 801ab1c:	22b0      	movs	r2, #176	; 0xb0
 801ab1e:	b280      	uxth	r0, r0
 801ab20:	f003 fe2e 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'п');
 801ab24:	f105 001c 	add.w	r0, r5, #28
 801ab28:	4621      	mov	r1, r4
 801ab2a:	22bf      	movs	r2, #191	; 0xbf
 801ab2c:	b280      	uxth	r0, r0
 801ab2e:	f003 fe27 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+41, Y+5, 'и');
 801ab32:	f105 0029 	add.w	r0, r5, #41	; 0x29
 801ab36:	4621      	mov	r1, r4
 801ab38:	22b8      	movs	r2, #184	; 0xb8
 801ab3a:	b280      	uxth	r0, r0
 801ab3c:	f003 fe20 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+53, Y+5, 'с');
 801ab40:	f105 0035 	add.w	r0, r5, #53	; 0x35
 801ab44:	4621      	mov	r1, r4
 801ab46:	2281      	movs	r2, #129	; 0x81
 801ab48:	b280      	uxth	r0, r0
 801ab4a:	f003 fe19 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 801ab4e:	f105 0041 	add.w	r0, r5, #65	; 0x41
 801ab52:	4621      	mov	r1, r4
 801ab54:	228c      	movs	r2, #140	; 0x8c
 801ab56:	b280      	uxth	r0, r0
}
 801ab58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+65, Y+5, 'ь');
 801ab5c:	f003 be10 	b.w	801e780 <TFT_DrawCharRus>
 801ab60:	200001d0 	.word	0x200001d0
 801ab64:	200001d8 	.word	0x200001d8

0801ab68 <GUI_TextRu_Info_Serial>:

void GUI_TextRu_Info_Serial(uint16_t X, uint16_t Y, uint16_t Part, uint16_t Number)
{
 801ab68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ab6a:	461c      	mov	r4, r3
	char buffer[5] = {0};
	
	X = 60;
	Y = 200;
	
	TFT_SetTextColor(TFT_White);
 801ab6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801ab70:	2300      	movs	r3, #0
 801ab72:	9300      	str	r3, [sp, #0]
 801ab74:	f88d 3004 	strb.w	r3, [sp, #4]
{
 801ab78:	4615      	mov	r5, r2
	TFT_SetTextColor(TFT_White);
 801ab7a:	f003 fdf5 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ab7e:	2063      	movs	r0, #99	; 0x63
 801ab80:	f003 fdf8 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801ab84:	4830      	ldr	r0, [pc, #192]	; (801ac48 <GUI_TextRu_Info_Serial+0xe0>)
 801ab86:	f003 fde9 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y-4, 'С');
 801ab8a:	22a1      	movs	r2, #161	; 0xa1
 801ab8c:	21c4      	movs	r1, #196	; 0xc4
 801ab8e:	203c      	movs	r0, #60	; 0x3c
 801ab90:	f003 fdf6 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
 801ab94:	482d      	ldr	r0, [pc, #180]	; (801ac4c <GUI_TextRu_Info_Serial+0xe4>)
 801ab96:	f003 fde1 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+17, Y+2, 'е');
 801ab9a:	22b5      	movs	r2, #181	; 0xb5
 801ab9c:	21ca      	movs	r1, #202	; 0xca
 801ab9e:	204d      	movs	r0, #77	; 0x4d
 801aba0:	f003 fdee 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+30, Y+2, 'р');
 801aba4:	2280      	movs	r2, #128	; 0x80
 801aba6:	21ca      	movs	r1, #202	; 0xca
 801aba8:	205a      	movs	r0, #90	; 0x5a
 801abaa:	f003 fde9 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+43, Y+2, 'и');
 801abae:	22b8      	movs	r2, #184	; 0xb8
 801abb0:	21ca      	movs	r1, #202	; 0xca
 801abb2:	2067      	movs	r0, #103	; 0x67
 801abb4:	f003 fde4 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+56, Y+2, 'й');
 801abb8:	22b9      	movs	r2, #185	; 0xb9
 801abba:	21ca      	movs	r1, #202	; 0xca
 801abbc:	2074      	movs	r0, #116	; 0x74
 801abbe:	f003 fddf 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+69, Y+2, 'н');
 801abc2:	22bd      	movs	r2, #189	; 0xbd
 801abc4:	21ca      	movs	r1, #202	; 0xca
 801abc6:	2081      	movs	r0, #129	; 0x81
 801abc8:	f003 fdda 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+82, Y+2, 'ы');
 801abcc:	228b      	movs	r2, #139	; 0x8b
 801abce:	21ca      	movs	r1, #202	; 0xca
 801abd0:	208e      	movs	r0, #142	; 0x8e
 801abd2:	f003 fdd5 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+95, Y+2, 'й');
 801abd6:	22b9      	movs	r2, #185	; 0xb9
 801abd8:	21ca      	movs	r1, #202	; 0xca
 801abda:	209b      	movs	r0, #155	; 0x9b
 801abdc:	f003 fdd0 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+115, Y+2, 'н');
 801abe0:	22bd      	movs	r2, #189	; 0xbd
 801abe2:	21ca      	movs	r1, #202	; 0xca
 801abe4:	20af      	movs	r0, #175	; 0xaf
 801abe6:	f003 fdcb 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+128, Y+2, 'о');
 801abea:	22be      	movs	r2, #190	; 0xbe
 801abec:	21ca      	movs	r1, #202	; 0xca
 801abee:	20bc      	movs	r0, #188	; 0xbc
 801abf0:	f003 fdc6 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+141, Y+2, 'м');
 801abf4:	22bc      	movs	r2, #188	; 0xbc
 801abf6:	21ca      	movs	r1, #202	; 0xca
 801abf8:	20c9      	movs	r0, #201	; 0xc9
 801abfa:	f003 fdc1 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+154, Y+2, 'е');
 801abfe:	22b5      	movs	r2, #181	; 0xb5
 801ac00:	21ca      	movs	r1, #202	; 0xca
 801ac02:	20d6      	movs	r0, #214	; 0xd6
 801ac04:	f003 fdbc 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+165, Y+2, 'р');
 801ac08:	2280      	movs	r2, #128	; 0x80
 801ac0a:	21ca      	movs	r1, #202	; 0xca
 801ac0c:	20e1      	movs	r0, #225	; 0xe1
 801ac0e:	f003 fdb7 	bl	801e780 <TFT_DrawCharRus>

	sprintf (buffer, "%u",  Part);
 801ac12:	462a      	mov	r2, r5
 801ac14:	490e      	ldr	r1, [pc, #56]	; (801ac50 <GUI_TextRu_Info_Serial+0xe8>)
 801ac16:	4668      	mov	r0, sp
 801ac18:	f007 f8ba 	bl	8021d90 <siprintf>
	TFT_SetFont(&Font26EN_arch_digit);
 801ac1c:	480d      	ldr	r0, [pc, #52]	; (801ac54 <GUI_TextRu_Info_Serial+0xec>)
 801ac1e:	f003 fd9d 	bl	801e75c <TFT_SetFont>
	TFT_DisplayString(40, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801ac22:	2303      	movs	r3, #3
 801ac24:	466a      	mov	r2, sp
 801ac26:	21e6      	movs	r1, #230	; 0xe6
 801ac28:	2028      	movs	r0, #40	; 0x28
 801ac2a:	f003 feb9 	bl	801e9a0 <TFT_DisplayString>
	sprintf (buffer, "%04u",  Number);
 801ac2e:	4622      	mov	r2, r4
 801ac30:	4909      	ldr	r1, [pc, #36]	; (801ac58 <GUI_TextRu_Info_Serial+0xf0>)
 801ac32:	4668      	mov	r0, sp
 801ac34:	f007 f8ac 	bl	8021d90 <siprintf>
	TFT_DisplayString(135, Y+30, (uint8_t *)buffer, LEFT_MODE);
 801ac38:	2303      	movs	r3, #3
 801ac3a:	466a      	mov	r2, sp
 801ac3c:	21e6      	movs	r1, #230	; 0xe6
 801ac3e:	2087      	movs	r0, #135	; 0x87
 801ac40:	f003 feae 	bl	801e9a0 <TFT_DisplayString>
}
 801ac44:	b003      	add	sp, #12
 801ac46:	bd30      	pop	{r4, r5, pc}
 801ac48:	200001d0 	.word	0x200001d0
 801ac4c:	200001d8 	.word	0x200001d8
 801ac50:	08031265 	.word	0x08031265
 801ac54:	200001f0 	.word	0x200001f0
 801ac58:	08031268 	.word	0x08031268

0801ac5c <GUI_TextRu_Info_Ver>:

void GUI_TextRu_Info_Ver(uint16_t X, uint16_t Y, float Version)
{
 801ac5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char buffer[5] = {0};
 801ac5e:	2300      	movs	r3, #0
	
	X = 120;
	Y = 350;
	
	TFT_SetTextColor(TFT_White);
 801ac60:	f64f 70ff 	movw	r0, #65535	; 0xffff
	char buffer[5] = {0};
 801ac64:	9302      	str	r3, [sp, #8]
 801ac66:	f88d 300c 	strb.w	r3, [sp, #12]
{
 801ac6a:	ed8d 0a01 	vstr	s0, [sp, #4]
	TFT_SetTextColor(TFT_White);
 801ac6e:	f003 fd7b 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ac72:	2063      	movs	r0, #99	; 0x63
 801ac74:	f003 fd7e 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801ac78:	481b      	ldr	r0, [pc, #108]	; (801ace8 <GUI_TextRu_Info_Ver+0x8c>)
	TFT_DrawCharRus(X, Y-1, 'П');
	TFT_DrawCharRus(X+18, Y-1, 'О');
	
	TFT_SetFont(&Font16);
 801ac7a:	4c1c      	ldr	r4, [pc, #112]	; (801acec <GUI_TextRu_Info_Ver+0x90>)
	TFT_SetFont(&Font16RU_arch_big);
 801ac7c:	f003 fd6e 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y-1, 'П');
 801ac80:	229f      	movs	r2, #159	; 0x9f
 801ac82:	f240 115d 	movw	r1, #349	; 0x15d
 801ac86:	2078      	movs	r0, #120	; 0x78
 801ac88:	f003 fd7a 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+18, Y-1, 'О');
 801ac8c:	229e      	movs	r2, #158	; 0x9e
 801ac8e:	f240 115d 	movw	r1, #349	; 0x15d
 801ac92:	208a      	movs	r0, #138	; 0x8a
 801ac94:	f003 fd74 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16);
 801ac98:	4620      	mov	r0, r4
 801ac9a:	f003 fd5f 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+52, Y, '.');
 801ac9e:	222e      	movs	r2, #46	; 0x2e
 801aca0:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801aca4:	20ac      	movs	r0, #172	; 0xac
 801aca6:	f003 fe23 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+42, Y, 'v');
 801acaa:	2276      	movs	r2, #118	; 0x76
 801acac:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801acb0:	20a2      	movs	r0, #162	; 0xa2
 801acb2:	f003 fe1d 	bl	801e8f0 <TFT_DrawChar>
	
	sprintf (buffer, "%.1f",  Version);
 801acb6:	ed9d 0a01 	vldr	s0, [sp, #4]
 801acba:	ee10 0a10 	vmov	r0, s0
 801acbe:	f7e5 fc53 	bl	8000568 <__aeabi_f2d>
 801acc2:	4602      	mov	r2, r0
 801acc4:	460b      	mov	r3, r1
 801acc6:	a802      	add	r0, sp, #8
 801acc8:	4909      	ldr	r1, [pc, #36]	; (801acf0 <GUI_TextRu_Info_Ver+0x94>)
 801acca:	f007 f861 	bl	8021d90 <siprintf>
	TFT_SetFont(&Font16);
 801acce:	4620      	mov	r0, r4
 801acd0:	f003 fd44 	bl	801e75c <TFT_SetFont>
	TFT_DisplayString(185, Y, (uint8_t *)buffer, LEFT_MODE);
 801acd4:	2303      	movs	r3, #3
 801acd6:	aa02      	add	r2, sp, #8
 801acd8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 801acdc:	20b9      	movs	r0, #185	; 0xb9
 801acde:	f003 fe5f 	bl	801e9a0 <TFT_DisplayString>
}
 801ace2:	b004      	add	sp, #16
 801ace4:	bd10      	pop	{r4, pc}
 801ace6:	bf00      	nop
 801ace8:	200001d0 	.word	0x200001d0
 801acec:	200001a8 	.word	0x200001a8
 801acf0:	0803124d 	.word	0x0803124d

0801acf4 <GUI_TextRu_CCT>:

void GUI_TextRu_CCT(uint16_t X, uint16_t Y)
{
 801acf4:	b538      	push	{r3, r4, r5, lr}
 801acf6:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801acf8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801acfc:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801acfe:	f003 fd33 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ad02:	2063      	movs	r0, #99	; 0x63
 801ad04:	f003 fd36 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801ad08:	481e      	ldr	r0, [pc, #120]	; (801ad84 <GUI_TextRu_CCT+0x90>)
 801ad0a:	f003 fd27 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'К');
 801ad0e:	4629      	mov	r1, r5
 801ad10:	4620      	mov	r0, r4
 801ad12:	229a      	movs	r2, #154	; 0x9a
 801ad14:	f003 fd34 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+17, Y, 'Ц');
 801ad18:	f104 0011 	add.w	r0, r4, #17
 801ad1c:	4629      	mov	r1, r5
 801ad1e:	22a6      	movs	r2, #166	; 0xa6
 801ad20:	b280      	uxth	r0, r0
 801ad22:	f003 fd2d 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+33, Y, 'Т');
 801ad26:	f104 0021 	add.w	r0, r4, #33	; 0x21
 801ad2a:	4629      	mov	r1, r5
 801ad2c:	22a2      	movs	r2, #162	; 0xa2
 801ad2e:	b280      	uxth	r0, r0
 801ad30:	f003 fd26 	bl	801e780 <TFT_DrawCharRus>

	TFT_SetFont(&Font16EN_arch_big);
 801ad34:	4814      	ldr	r0, [pc, #80]	; (801ad88 <GUI_TextRu_CCT+0x94>)
 801ad36:	f003 fd11 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+49, Y, '(');
 801ad3a:	f104 0031 	add.w	r0, r4, #49	; 0x31
 801ad3e:	4629      	mov	r1, r5
 801ad40:	2228      	movs	r2, #40	; 0x28
 801ad42:	b280      	uxth	r0, r0
 801ad44:	f003 fdd4 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+104, Y, ')');
 801ad48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801ad4c:	4629      	mov	r1, r5
 801ad4e:	2229      	movs	r2, #41	; 0x29
 801ad50:	b280      	uxth	r0, r0
 801ad52:	f003 fdcd 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+63, Y, 'C');
 801ad56:	f104 003f 	add.w	r0, r4, #63	; 0x3f
 801ad5a:	4629      	mov	r1, r5
 801ad5c:	2243      	movs	r2, #67	; 0x43
 801ad5e:	b280      	uxth	r0, r0
 801ad60:	f003 fdc6 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+76, Y, 'C');
 801ad64:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801ad68:	4629      	mov	r1, r5
 801ad6a:	2243      	movs	r2, #67	; 0x43
 801ad6c:	b280      	uxth	r0, r0
 801ad6e:	f003 fdbf 	bl	801e8f0 <TFT_DrawChar>
	TFT_DrawChar(X+91, Y, 'T');
 801ad72:	f104 005b 	add.w	r0, r4, #91	; 0x5b
 801ad76:	4629      	mov	r1, r5
 801ad78:	2254      	movs	r2, #84	; 0x54
 801ad7a:	b280      	uxth	r0, r0
}
 801ad7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawChar(X+91, Y, 'T');
 801ad80:	f003 bdb6 	b.w	801e8f0 <TFT_DrawChar>
 801ad84:	200001d0 	.word	0x200001d0
 801ad88:	200001b0 	.word	0x200001b0

0801ad8c <GUI_TextRu_umol>:

void GUI_TextRu_umol(uint16_t X, uint16_t Y, uint8_t deg)
{
 801ad8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ad90:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801ad92:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801ad96:	4616      	mov	r6, r2
 801ad98:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801ad9a:	f003 fce5 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ad9e:	2063      	movs	r0, #99	; 0x63
 801ada0:	f003 fce8 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 801ada4:	482f      	ldr	r0, [pc, #188]	; (801ae64 <GUI_TextRu_umol+0xd8>)
 801ada6:	f003 fcd9 	bl	801e75c <TFT_SetFont>
	
	if(deg){
 801adaa:	2e00      	cmp	r6, #0
 801adac:	d057      	beq.n	801ae5e <GUI_TextRu_umol+0xd2>
		TFT_DrawCharRus(X, Y, 'м');
 801adae:	22bc      	movs	r2, #188	; 0xbc
	} else{
		TFT_DrawCharRus(X, Y, 'я'+1);
 801adb0:	4629      	mov	r1, r5
 801adb2:	4620      	mov	r0, r4
 801adb4:	f003 fce4 	bl	801e780 <TFT_DrawCharRus>
	}

	TFT_DrawCharRus(X+8, Y, 'м');
 801adb8:	f104 0008 	add.w	r0, r4, #8
 801adbc:	4629      	mov	r1, r5
 801adbe:	22bc      	movs	r2, #188	; 0xbc
 801adc0:	b280      	uxth	r0, r0
 801adc2:	f003 fcdd 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y, 'о');
	TFT_DrawCharRus(X+22, Y, 'л');
 801adc6:	f104 0716 	add.w	r7, r4, #22
	TFT_DrawCharRus(X+16, Y, 'о');
 801adca:	f104 0010 	add.w	r0, r4, #16
 801adce:	4629      	mov	r1, r5
	TFT_DrawCharRus(X+22, Y, 'л');
 801add0:	b2bf      	uxth	r7, r7
	TFT_DrawCharRus(X+16, Y, 'о');
 801add2:	22be      	movs	r2, #190	; 0xbe
 801add4:	b280      	uxth	r0, r0
 801add6:	f003 fcd3 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+22, Y, 'л');
 801adda:	4629      	mov	r1, r5
 801addc:	4638      	mov	r0, r7
 801adde:	22bb      	movs	r2, #187	; 0xbb
 801ade0:	f003 fcce 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y, 'ь');
 801ade4:	f104 001c 	add.w	r0, r4, #28
 801ade8:	4629      	mov	r1, r5
 801adea:	228c      	movs	r2, #140	; 0x8c
 801adec:	b280      	uxth	r0, r0
 801adee:	f003 fcc7 	bl	801e780 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801adf2:	f105 030a 	add.w	r3, r5, #10
 801adf6:	b29b      	uxth	r3, r3
 801adf8:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801adfc:	f104 0223 	add.w	r2, r4, #35	; 0x23
 801ae00:	4619      	mov	r1, r3
 801ae02:	4620      	mov	r0, r4
 801ae04:	f8cd 8000 	str.w	r8, [sp]
 801ae08:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 801ae0a:	f105 060b 	add.w	r6, r5, #11
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801ae0e:	f003 fa1f 	bl	801e250 <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+11, 'я'+2);
 801ae12:	b2b6      	uxth	r6, r6
 801ae14:	f104 000d 	add.w	r0, r4, #13
 801ae18:	4631      	mov	r1, r6
 801ae1a:	2291      	movs	r2, #145	; 0x91
 801ae1c:	b280      	uxth	r0, r0
 801ae1e:	f003 fcaf 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+11, 'м');
 801ae22:	1d60      	adds	r0, r4, #5
 801ae24:	4631      	mov	r1, r6
 801ae26:	22bc      	movs	r2, #188	; 0xbc
 801ae28:	b280      	uxth	r0, r0
 801ae2a:	f003 fca9 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+14, X+20, Y+15, TFT_White);
 801ae2e:	f105 030f 	add.w	r3, r5, #15
 801ae32:	f104 0214 	add.w	r2, r4, #20
 801ae36:	f105 010e 	add.w	r1, r5, #14
 801ae3a:	f104 0013 	add.w	r0, r4, #19
 801ae3e:	f8cd 8000 	str.w	r8, [sp]
 801ae42:	b29b      	uxth	r3, r3
 801ae44:	b292      	uxth	r2, r2
 801ae46:	b289      	uxth	r1, r1
 801ae48:	b280      	uxth	r0, r0
 801ae4a:	f003 fa76 	bl	801e33a <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+11, 'с');
 801ae4e:	2281      	movs	r2, #129	; 0x81
 801ae50:	4631      	mov	r1, r6
 801ae52:	4638      	mov	r0, r7
}
 801ae54:	b002      	add	sp, #8
 801ae56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+22, Y+11, 'с');
 801ae5a:	f003 bc91 	b.w	801e780 <TFT_DrawCharRus>
		TFT_DrawCharRus(X, Y, 'я'+1);
 801ae5e:	2290      	movs	r2, #144	; 0x90
 801ae60:	e7a6      	b.n	801adb0 <GUI_TextRu_umol+0x24>
 801ae62:	bf00      	nop
 801ae64:	200001a0 	.word	0x200001a0

0801ae68 <GUI_TextRu_umol_sr>:

void GUI_TextRu_umol_sr(uint16_t X, uint16_t Y)
{
 801ae68:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801ae6c:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801ae6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801ae72:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801ae74:	f003 fc78 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801ae78:	2063      	movs	r0, #99	; 0x63
 801ae7a:	f003 fc7b 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 801ae7e:	483c      	ldr	r0, [pc, #240]	; (801af70 <GUI_TextRu_umol_sr+0x108>)
 801ae80:	f003 fc6c 	bl	801e75c <TFT_SetFont>
	
	TFT_DrawCharRus(X+7, Y, 'я'+1);
 801ae84:	1de0      	adds	r0, r4, #7
 801ae86:	4629      	mov	r1, r5
 801ae88:	2290      	movs	r2, #144	; 0x90
 801ae8a:	b280      	uxth	r0, r0
 801ae8c:	f003 fc78 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+15, Y, 'м');
 801ae90:	f104 000f 	add.w	r0, r4, #15
 801ae94:	4629      	mov	r1, r5
 801ae96:	22bc      	movs	r2, #188	; 0xbc
 801ae98:	b280      	uxth	r0, r0
 801ae9a:	f003 fc71 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+23, Y, 'о');
 801ae9e:	f104 0017 	add.w	r0, r4, #23
 801aea2:	4629      	mov	r1, r5
 801aea4:	22be      	movs	r2, #190	; 0xbe
 801aea6:	b280      	uxth	r0, r0
 801aea8:	f003 fc6a 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y, 'л');
 801aeac:	f104 001d 	add.w	r0, r4, #29
 801aeb0:	4629      	mov	r1, r5
 801aeb2:	22bb      	movs	r2, #187	; 0xbb
 801aeb4:	b280      	uxth	r0, r0
 801aeb6:	f003 fc63 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+35, Y, 'ь');
 801aeba:	f104 0023 	add.w	r0, r4, #35	; 0x23
 801aebe:	4629      	mov	r1, r5
 801aec0:	228c      	movs	r2, #140	; 0x8c
 801aec2:	b280      	uxth	r0, r0
 801aec4:	f003 fc5c 	bl	801e780 <TFT_DrawCharRus>
	
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 801aec8:	f105 030a 	add.w	r3, r5, #10
 801aecc:	b29b      	uxth	r3, r3
 801aece:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801aed2:	f104 022e 	add.w	r2, r4, #46	; 0x2e
 801aed6:	1ce0      	adds	r0, r4, #3
 801aed8:	4619      	mov	r1, r3
 801aeda:	f8cd 8000 	str.w	r8, [sp]
 801aede:	b292      	uxth	r2, r2
 801aee0:	b280      	uxth	r0, r0
	
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 801aee2:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X+3, Y+10, X+46, Y+10, TFT_White);
 801aee6:	f003 f9b3 	bl	801e250 <TFT_DrawLine>
	TFT_DrawCharRus(X+13, Y+12, 'я'+2);
 801aeea:	b2b6      	uxth	r6, r6
 801aeec:	f104 000d 	add.w	r0, r4, #13
 801aef0:	4631      	mov	r1, r6
 801aef2:	2291      	movs	r2, #145	; 0x91
 801aef4:	b280      	uxth	r0, r0
 801aef6:	f003 fc43 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+5, Y+12, 'м');
 801aefa:	1d60      	adds	r0, r4, #5
 801aefc:	4631      	mov	r1, r6
 801aefe:	22bc      	movs	r2, #188	; 0xbc
 801af00:	b280      	uxth	r0, r0
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 801af02:	f105 0710 	add.w	r7, r5, #16
 801af06:	350f      	adds	r5, #15
	TFT_DrawCharRus(X+5, Y+12, 'м');
 801af08:	f003 fc3a 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+19, Y+16, X+20, Y+15, TFT_White);
 801af0c:	b2bf      	uxth	r7, r7
 801af0e:	b2ad      	uxth	r5, r5
 801af10:	f104 0214 	add.w	r2, r4, #20
 801af14:	f104 0013 	add.w	r0, r4, #19
 801af18:	462b      	mov	r3, r5
 801af1a:	4639      	mov	r1, r7
 801af1c:	f8cd 8000 	str.w	r8, [sp]
 801af20:	b292      	uxth	r2, r2
 801af22:	b280      	uxth	r0, r0
 801af24:	f003 fa09 	bl	801e33a <TFT_DrawRectangle>
	TFT_DrawCharRus(X+22, Y+12, 'с');
 801af28:	f104 0016 	add.w	r0, r4, #22
 801af2c:	4631      	mov	r1, r6
 801af2e:	2281      	movs	r2, #129	; 0x81
 801af30:	b280      	uxth	r0, r0
 801af32:	f003 fc25 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+30, Y+16, X+31, Y+15, TFT_White);
 801af36:	f104 021f 	add.w	r2, r4, #31
 801af3a:	f104 001e 	add.w	r0, r4, #30
 801af3e:	462b      	mov	r3, r5
 801af40:	4639      	mov	r1, r7
 801af42:	f8cd 8000 	str.w	r8, [sp]
 801af46:	b292      	uxth	r2, r2
 801af48:	b280      	uxth	r0, r0
 801af4a:	f003 f9f6 	bl	801e33a <TFT_DrawRectangle>
	TFT_DrawCharRus(X+32, Y+12, 'с');
 801af4e:	f104 0020 	add.w	r0, r4, #32
 801af52:	4631      	mov	r1, r6
 801af54:	2281      	movs	r2, #129	; 0x81
 801af56:	b280      	uxth	r0, r0
 801af58:	f003 fc12 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+12, 'р');
 801af5c:	f104 0027 	add.w	r0, r4, #39	; 0x27
 801af60:	2280      	movs	r2, #128	; 0x80
 801af62:	4631      	mov	r1, r6
 801af64:	b280      	uxth	r0, r0
	
}
 801af66:	b002      	add	sp, #8
 801af68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+39, Y+12, 'р');
 801af6c:	f003 bc08 	b.w	801e780 <TFT_DrawCharRus>
 801af70:	200001a0 	.word	0x200001a0

0801af74 <GUI_TextRu_W_m2>:

void GUI_TextRu_W_m2(uint16_t X, uint16_t Y)
{
 801af74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801af76:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801af78:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801af7c:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801af7e:	f003 fbf3 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801af82:	2063      	movs	r0, #99	; 0x63
 801af84:	f003 fbf6 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 801af88:	4819      	ldr	r0, [pc, #100]	; (801aff0 <GUI_TextRu_W_m2+0x7c>)
 801af8a:	f003 fbe7 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+3, Y, 'В'-17);
 801af8e:	1ce8      	adds	r0, r5, #3
 801af90:	4621      	mov	r1, r4
 801af92:	2281      	movs	r2, #129	; 0x81
 801af94:	b280      	uxth	r0, r0
 801af96:	f003 fbf3 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
 801af9a:	4816      	ldr	r0, [pc, #88]	; (801aff4 <GUI_TextRu_W_m2+0x80>)
 801af9c:	f003 fbde 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+13, Y+2, 'т');
 801afa0:	1ca1      	adds	r1, r4, #2
 801afa2:	f105 000d 	add.w	r0, r5, #13
 801afa6:	2282      	movs	r2, #130	; 0x82
 801afa8:	b289      	uxth	r1, r1
 801afaa:	b280      	uxth	r0, r0
 801afac:	f003 fbe8 	bl	801e780 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 801afb0:	f104 030a 	add.w	r3, r4, #10
 801afb4:	b29b      	uxth	r3, r3
 801afb6:	f105 0214 	add.w	r2, r5, #20
 801afba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801afbe:	9100      	str	r1, [sp, #0]
 801afc0:	4628      	mov	r0, r5
 801afc2:	4619      	mov	r1, r3
 801afc4:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 801afc6:	340c      	adds	r4, #12
	TFT_DrawLine(X, Y+10, X+20, Y+10, TFT_White);
 801afc8:	f003 f942 	bl	801e250 <TFT_DrawLine>
	TFT_DrawCharRus(X+12, Y+12, 'я'+2);
 801afcc:	b2a4      	uxth	r4, r4
 801afce:	f105 000c 	add.w	r0, r5, #12
 801afd2:	4621      	mov	r1, r4
 801afd4:	2291      	movs	r2, #145	; 0x91
 801afd6:	b280      	uxth	r0, r0
 801afd8:	f003 fbd2 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+4, Y+12, 'м');
 801afdc:	1d28      	adds	r0, r5, #4
 801afde:	22bc      	movs	r2, #188	; 0xbc
 801afe0:	4621      	mov	r1, r4
 801afe2:	b280      	uxth	r0, r0
}
 801afe4:	b003      	add	sp, #12
 801afe6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	TFT_DrawCharRus(X+4, Y+12, 'м');
 801afea:	f003 bbc9 	b.w	801e780 <TFT_DrawCharRus>
 801afee:	bf00      	nop
 801aff0:	20000198 	.word	0x20000198
 801aff4:	200001a0 	.word	0x200001a0

0801aff8 <GUI_TextRu_W_m2_sr>:

void GUI_TextRu_W_m2_sr(uint16_t X, uint16_t Y)
{
 801aff8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801affc:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801affe:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b002:	460d      	mov	r5, r1
	TFT_SetTextColor(TFT_White);
 801b004:	f003 fbb0 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b008:	2063      	movs	r0, #99	; 0x63
 801b00a:	f003 fbb3 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_big);
 801b00e:	4829      	ldr	r0, [pc, #164]	; (801b0b4 <GUI_TextRu_W_m2_sr+0xbc>)
 801b010:	f003 fba4 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+8, Y, 'В'-17);
 801b014:	f104 0008 	add.w	r0, r4, #8
 801b018:	4629      	mov	r1, r5
 801b01a:	2281      	movs	r2, #129	; 0x81
 801b01c:	b280      	uxth	r0, r0
 801b01e:	f003 fbaf 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font12RU_arch_small);
	TFT_DrawCharRus(X+18, Y+2, 'т');
 801b022:	f104 0712 	add.w	r7, r4, #18
	TFT_SetFont(&Font12RU_arch_small);
 801b026:	4824      	ldr	r0, [pc, #144]	; (801b0b8 <GUI_TextRu_W_m2_sr+0xc0>)
 801b028:	f003 fb98 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+18, Y+2, 'т');
 801b02c:	b2bf      	uxth	r7, r7
 801b02e:	1ca9      	adds	r1, r5, #2
 801b030:	4638      	mov	r0, r7
 801b032:	2282      	movs	r2, #130	; 0x82
 801b034:	b289      	uxth	r1, r1
 801b036:	f003 fba3 	bl	801e780 <TFT_DrawCharRus>
	
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801b03a:	f105 030a 	add.w	r3, r5, #10
 801b03e:	b29b      	uxth	r3, r3
 801b040:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801b044:	f104 0223 	add.w	r2, r4, #35	; 0x23
 801b048:	4619      	mov	r1, r3
 801b04a:	4620      	mov	r0, r4
 801b04c:	f8cd 8000 	str.w	r8, [sp]
 801b050:	b292      	uxth	r2, r2
	
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 801b052:	f105 060c 	add.w	r6, r5, #12
	TFT_DrawLine(X, Y+10, X+35, Y+10, TFT_White);
 801b056:	f003 f8fb 	bl	801e250 <TFT_DrawLine>
	TFT_DrawCharRus(X+10, Y+12, 'я'+2);
 801b05a:	b2b6      	uxth	r6, r6
 801b05c:	f104 000a 	add.w	r0, r4, #10
 801b060:	4631      	mov	r1, r6
 801b062:	2291      	movs	r2, #145	; 0x91
 801b064:	b280      	uxth	r0, r0
 801b066:	f003 fb8b 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+2, Y+12, 'м');
 801b06a:	1ca0      	adds	r0, r4, #2
 801b06c:	4631      	mov	r1, r6
 801b06e:	22bc      	movs	r2, #188	; 0xbc
 801b070:	b280      	uxth	r0, r0
 801b072:	f003 fb85 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawRectangle(X+17, Y+16, X+18, Y+15, TFT_White);
 801b076:	f105 030f 	add.w	r3, r5, #15
 801b07a:	f105 0110 	add.w	r1, r5, #16
 801b07e:	f104 0011 	add.w	r0, r4, #17
 801b082:	b29b      	uxth	r3, r3
 801b084:	463a      	mov	r2, r7
 801b086:	f8cd 8000 	str.w	r8, [sp]
 801b08a:	b289      	uxth	r1, r1
 801b08c:	b280      	uxth	r0, r0
 801b08e:	f003 f954 	bl	801e33a <TFT_DrawRectangle>
	TFT_DrawCharRus(X+21, Y+12, 'с');
 801b092:	f104 0015 	add.w	r0, r4, #21
 801b096:	4631      	mov	r1, r6
 801b098:	2281      	movs	r2, #129	; 0x81
 801b09a:	b280      	uxth	r0, r0
 801b09c:	f003 fb70 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+12, 'р');
 801b0a0:	f104 001c 	add.w	r0, r4, #28
 801b0a4:	2280      	movs	r2, #128	; 0x80
 801b0a6:	4631      	mov	r1, r6
 801b0a8:	b280      	uxth	r0, r0
}
 801b0aa:	b002      	add	sp, #8
 801b0ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawCharRus(X+28, Y+12, 'р');
 801b0b0:	f003 bb66 	b.w	801e780 <TFT_DrawCharRus>
 801b0b4:	20000198 	.word	0x20000198
 801b0b8:	200001a0 	.word	0x200001a0

0801b0bc <GUI_TextRu_Cd_m2>:

void GUI_TextRu_Cd_m2(uint16_t X, uint16_t Y, uint8_t deg)
{
 801b0bc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801b0c0:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801b0c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b0c6:	460e      	mov	r6, r1
 801b0c8:	4692      	mov	sl, r2
	TFT_SetTextColor(TFT_White);
 801b0ca:	f003 fb4d 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b0ce:	2063      	movs	r0, #99	; 0x63
 801b0d0:	f003 fb50 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font12RU_arch_small);
 801b0d4:	482f      	ldr	r0, [pc, #188]	; (801b194 <GUI_TextRu_Cd_m2+0xd8>)
 801b0d6:	f003 fb41 	bl	801e75c <TFT_SetFont>
 801b0da:	f104 0008 	add.w	r0, r4, #8
 801b0de:	f104 0810 	add.w	r8, r4, #16
 801b0e2:	f106 070a 	add.w	r7, r6, #10
 801b0e6:	f104 0906 	add.w	r9, r4, #6
 801b0ea:	f106 050c 	add.w	r5, r6, #12
	
	if(deg){
		TFT_DrawCharRus(X+8, Y, 'к');
 801b0ee:	22ba      	movs	r2, #186	; 0xba
 801b0f0:	4631      	mov	r1, r6
 801b0f2:	b280      	uxth	r0, r0
	if(deg){
 801b0f4:	f1ba 0f00 	cmp.w	sl, #0
 801b0f8:	d02c      	beq.n	801b154 <GUI_TextRu_Cd_m2+0x98>
		TFT_DrawCharRus(X+8, Y, 'к');
 801b0fa:	f003 fb41 	bl	801e780 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'к');
 801b0fe:	22ba      	movs	r2, #186	; 0xba
 801b100:	4631      	mov	r1, r6
 801b102:	fa1f f088 	uxth.w	r0, r8
 801b106:	f003 fb3b 	bl	801e780 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+24, Y, 'д');
 801b10a:	f104 0018 	add.w	r0, r4, #24
 801b10e:	22b4      	movs	r2, #180	; 0xb4
 801b110:	4631      	mov	r1, r6
 801b112:	b280      	uxth	r0, r0
 801b114:	f003 fb34 	bl	801e780 <TFT_DrawCharRus>
		
		TFT_DrawLine(X+6, Y+10, X+31, Y+10, TFT_White);
 801b118:	b2bb      	uxth	r3, r7
 801b11a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b11e:	f104 021f 	add.w	r2, r4, #31
 801b122:	9100      	str	r1, [sp, #0]
 801b124:	b292      	uxth	r2, r2
 801b126:	4619      	mov	r1, r3
 801b128:	fa1f f089 	uxth.w	r0, r9
 801b12c:	f003 f890 	bl	801e250 <TFT_DrawLine>
		
		TFT_DrawCharRus(X+20, Y+12, 'я'+2);
 801b130:	b2ad      	uxth	r5, r5
 801b132:	f104 0014 	add.w	r0, r4, #20
 801b136:	b280      	uxth	r0, r0
 801b138:	2291      	movs	r2, #145	; 0x91
 801b13a:	4629      	mov	r1, r5
 801b13c:	f003 fb20 	bl	801e780 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+12, Y+12, 'м');}
 801b140:	f104 000c 	add.w	r0, r4, #12
		TFT_DrawCharRus(X+16, Y, 'д');
		
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
		
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 801b144:	22bc      	movs	r2, #188	; 0xbc
 801b146:	4629      	mov	r1, r5
 801b148:	b280      	uxth	r0, r0
		
}
 801b14a:	b002      	add	sp, #8
 801b14c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 801b150:	f003 bb16 	b.w	801e780 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+8, Y, 'к');
 801b154:	f003 fb14 	bl	801e780 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+16, Y, 'д');
 801b158:	22b4      	movs	r2, #180	; 0xb4
 801b15a:	4631      	mov	r1, r6
 801b15c:	fa1f f088 	uxth.w	r0, r8
 801b160:	f003 fb0e 	bl	801e780 <TFT_DrawCharRus>
		TFT_DrawLine(X+6, Y+10, X+23, Y+10, TFT_White);
 801b164:	b2bb      	uxth	r3, r7
 801b166:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b16a:	f104 0217 	add.w	r2, r4, #23
 801b16e:	9100      	str	r1, [sp, #0]
 801b170:	b292      	uxth	r2, r2
 801b172:	4619      	mov	r1, r3
 801b174:	fa1f f089 	uxth.w	r0, r9
 801b178:	f003 f86a 	bl	801e250 <TFT_DrawLine>
		TFT_DrawCharRus(X+17, Y+12, 'я'+2);
 801b17c:	b2ad      	uxth	r5, r5
 801b17e:	f104 0011 	add.w	r0, r4, #17
 801b182:	b280      	uxth	r0, r0
 801b184:	2291      	movs	r2, #145	; 0x91
 801b186:	4629      	mov	r1, r5
 801b188:	f003 fafa 	bl	801e780 <TFT_DrawCharRus>
		TFT_DrawCharRus(X+9, Y+12, 'м');}
 801b18c:	f104 0009 	add.w	r0, r4, #9
 801b190:	e7d8      	b.n	801b144 <GUI_TextRu_Cd_m2+0x88>
 801b192:	bf00      	nop
 801b194:	200001a0 	.word	0x200001a0

0801b198 <GUI_TextRu_Irradiance>:

void GUI_TextRu_Irradiance(uint16_t X, uint16_t Y)
{
 801b198:	b538      	push	{r3, r4, r5, lr}
 801b19a:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b19c:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b1a0:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b1a2:	f003 fae1 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b1a6:	2063      	movs	r0, #99	; 0x63
 801b1a8:	f003 fae4 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801b1ac:	482d      	ldr	r0, [pc, #180]	; (801b264 <GUI_TextRu_Irradiance+0xcc>)
 801b1ae:	f003 fad5 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'О');
 801b1b2:	4621      	mov	r1, r4
 801b1b4:	229e      	movs	r2, #158	; 0x9e
 801b1b6:	4628      	mov	r0, r5
 801b1b8:	f003 fae2 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'б');
 801b1bc:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b1be:	482a      	ldr	r0, [pc, #168]	; (801b268 <GUI_TextRu_Irradiance+0xd0>)
	TFT_DrawCharRus(X+16, Y+5, 'б');
 801b1c0:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b1c2:	f003 facb 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'б');
 801b1c6:	f105 0010 	add.w	r0, r5, #16
 801b1ca:	4621      	mov	r1, r4
 801b1cc:	22b1      	movs	r2, #177	; 0xb1
 801b1ce:	b280      	uxth	r0, r0
 801b1d0:	f003 fad6 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+27, Y+5, 'л');
 801b1d4:	f105 001b 	add.w	r0, r5, #27
 801b1d8:	4621      	mov	r1, r4
 801b1da:	22bb      	movs	r2, #187	; 0xbb
 801b1dc:	b280      	uxth	r0, r0
 801b1de:	f003 facf 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+39, Y+5, 'у');
 801b1e2:	f105 0027 	add.w	r0, r5, #39	; 0x27
 801b1e6:	4621      	mov	r1, r4
 801b1e8:	2283      	movs	r2, #131	; 0x83
 801b1ea:	b280      	uxth	r0, r0
 801b1ec:	f003 fac8 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+51, Y+5, 'ч');
 801b1f0:	f105 0033 	add.w	r0, r5, #51	; 0x33
 801b1f4:	4621      	mov	r1, r4
 801b1f6:	2287      	movs	r2, #135	; 0x87
 801b1f8:	b280      	uxth	r0, r0
 801b1fa:	f003 fac1 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'е');
 801b1fe:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 801b202:	4621      	mov	r1, r4
 801b204:	22b5      	movs	r2, #181	; 0xb5
 801b206:	b280      	uxth	r0, r0
 801b208:	f003 faba 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'н');
 801b20c:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 801b210:	4621      	mov	r1, r4
 801b212:	22bd      	movs	r2, #189	; 0xbd
 801b214:	b280      	uxth	r0, r0
 801b216:	f003 fab3 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+86, Y+5, 'н');
 801b21a:	f105 0056 	add.w	r0, r5, #86	; 0x56
 801b21e:	4621      	mov	r1, r4
 801b220:	22bd      	movs	r2, #189	; 0xbd
 801b222:	b280      	uxth	r0, r0
 801b224:	f003 faac 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+98, Y+5, 'о');
 801b228:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801b22c:	4621      	mov	r1, r4
 801b22e:	22be      	movs	r2, #190	; 0xbe
 801b230:	b280      	uxth	r0, r0
 801b232:	f003 faa5 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+110, Y+5, 'с');
 801b236:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 801b23a:	4621      	mov	r1, r4
 801b23c:	2281      	movs	r2, #129	; 0x81
 801b23e:	b280      	uxth	r0, r0
 801b240:	f003 fa9e 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+119, Y+5, 'т');
 801b244:	f105 0077 	add.w	r0, r5, #119	; 0x77
 801b248:	4621      	mov	r1, r4
 801b24a:	2282      	movs	r2, #130	; 0x82
 801b24c:	b280      	uxth	r0, r0
 801b24e:	f003 fa97 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801b252:	f105 0083 	add.w	r0, r5, #131	; 0x83
 801b256:	4621      	mov	r1, r4
 801b258:	228c      	movs	r2, #140	; 0x8c
 801b25a:	b280      	uxth	r0, r0
}
 801b25c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801b260:	f003 ba8e 	b.w	801e780 <TFT_DrawCharRus>
 801b264:	200001d0 	.word	0x200001d0
 801b268:	200001d8 	.word	0x200001d8

0801b26c <GUI_TextRu_Luminance>:

void GUI_TextRu_Luminance(uint16_t X, uint16_t Y)
{
 801b26c:	b538      	push	{r3, r4, r5, lr}
 801b26e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b270:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b274:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b276:	f003 fa77 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b27a:	2063      	movs	r0, #99	; 0x63
 801b27c:	f003 fa7a 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
 801b280:	481c      	ldr	r0, [pc, #112]	; (801b2f4 <GUI_TextRu_Luminance+0x88>)
 801b282:	f003 fa6b 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Я');
 801b286:	4621      	mov	r1, r4
 801b288:	22af      	movs	r2, #175	; 0xaf
 801b28a:	4628      	mov	r0, r5
 801b28c:	f003 fa78 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
	TFT_DrawCharRus(X+16, Y+5, 'р');
 801b290:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b292:	4819      	ldr	r0, [pc, #100]	; (801b2f8 <GUI_TextRu_Luminance+0x8c>)
	TFT_DrawCharRus(X+16, Y+5, 'р');
 801b294:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b296:	f003 fa61 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'р');
 801b29a:	f105 0010 	add.w	r0, r5, #16
 801b29e:	4621      	mov	r1, r4
 801b2a0:	2280      	movs	r2, #128	; 0x80
 801b2a2:	b280      	uxth	r0, r0
 801b2a4:	f003 fa6c 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+28, Y+5, 'к');
 801b2a8:	f105 001c 	add.w	r0, r5, #28
 801b2ac:	4621      	mov	r1, r4
 801b2ae:	22ba      	movs	r2, #186	; 0xba
 801b2b0:	b280      	uxth	r0, r0
 801b2b2:	f003 fa65 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+40, Y+5, 'о');
 801b2b6:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801b2ba:	4621      	mov	r1, r4
 801b2bc:	22be      	movs	r2, #190	; 0xbe
 801b2be:	b280      	uxth	r0, r0
 801b2c0:	f003 fa5e 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+52, Y+5, 'с');
 801b2c4:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801b2c8:	4621      	mov	r1, r4
 801b2ca:	2281      	movs	r2, #129	; 0x81
 801b2cc:	b280      	uxth	r0, r0
 801b2ce:	f003 fa57 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+63, Y+5, 'т');
 801b2d2:	f105 003f 	add.w	r0, r5, #63	; 0x3f
 801b2d6:	4621      	mov	r1, r4
 801b2d8:	2282      	movs	r2, #130	; 0x82
 801b2da:	b280      	uxth	r0, r0
 801b2dc:	f003 fa50 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 801b2e0:	f105 004a 	add.w	r0, r5, #74	; 0x4a
 801b2e4:	4621      	mov	r1, r4
 801b2e6:	228c      	movs	r2, #140	; 0x8c
 801b2e8:	b280      	uxth	r0, r0
}
 801b2ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TFT_DrawCharRus(X+74, Y+5, 'ь');
 801b2ee:	f003 ba47 	b.w	801e780 <TFT_DrawCharRus>
 801b2f2:	bf00      	nop
 801b2f4:	200001d0 	.word	0x200001d0
 801b2f8:	200001d8 	.word	0x200001d8

0801b2fc <GUI_TextRu_Radiance>:

void GUI_TextRu_Radiance(uint16_t X, uint16_t Y)
{
 801b2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2fe:	4604      	mov	r4, r0
	TFT_SetTextColor(TFT_White);
 801b300:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b304:	460e      	mov	r6, r1
	TFT_SetTextColor(TFT_White);
 801b306:	f003 fa2f 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b30a:	2063      	movs	r0, #99	; 0x63
 801b30c:	f003 fa32 	bl	801e774 <TFT_SetBackColor>
	TFT_SetFont(&Font16RU_arch_big);
	TFT_DrawCharRus(X, Y, 'Э');
	TFT_SetFont(&Font16RU_arch_small);
 801b310:	4f31      	ldr	r7, [pc, #196]	; (801b3d8 <GUI_TextRu_Radiance+0xdc>)
	TFT_SetFont(&Font16RU_arch_big);
 801b312:	4832      	ldr	r0, [pc, #200]	; (801b3dc <GUI_TextRu_Radiance+0xe0>)
 801b314:	f003 fa22 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Э');
 801b318:	4631      	mov	r1, r6
 801b31a:	22ad      	movs	r2, #173	; 0xad
 801b31c:	4620      	mov	r0, r4
 801b31e:	f003 fa2f 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801b322:	1d75      	adds	r5, r6, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b324:	4638      	mov	r0, r7
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801b326:	b2ad      	uxth	r5, r5
	TFT_SetFont(&Font16RU_arch_small);
 801b328:	f003 fa18 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+16, Y+5, 'н');
 801b32c:	f104 0010 	add.w	r0, r4, #16
 801b330:	4629      	mov	r1, r5
 801b332:	22bd      	movs	r2, #189	; 0xbd
 801b334:	b280      	uxth	r0, r0
 801b336:	f003 fa23 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+29, Y+5, 'е');
 801b33a:	f104 001d 	add.w	r0, r4, #29
 801b33e:	4629      	mov	r1, r5
 801b340:	22b5      	movs	r2, #181	; 0xb5
 801b342:	b280      	uxth	r0, r0
 801b344:	f003 fa1c 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16EN_arch_big);
 801b348:	4825      	ldr	r0, [pc, #148]	; (801b3e0 <GUI_TextRu_Radiance+0xe4>)
 801b34a:	f003 fa07 	bl	801e75c <TFT_SetFont>
	TFT_DrawChar(X+46, 		Y, '.');
 801b34e:	f104 002e 	add.w	r0, r4, #46	; 0x2e
 801b352:	4631      	mov	r1, r6
 801b354:	222e      	movs	r2, #46	; 0x2e
 801b356:	b280      	uxth	r0, r0
 801b358:	f003 faca 	bl	801e8f0 <TFT_DrawChar>

	TFT_SetFont(&Font16RU_arch_small);
 801b35c:	4638      	mov	r0, r7
 801b35e:	f003 f9fd 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X+41, Y+5, 'р');
 801b362:	f104 0029 	add.w	r0, r4, #41	; 0x29
 801b366:	4629      	mov	r1, r5
 801b368:	2280      	movs	r2, #128	; 0x80
 801b36a:	b280      	uxth	r0, r0
 801b36c:	f003 fa08 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+61, Y+5, 'я');
 801b370:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 801b374:	4629      	mov	r1, r5
 801b376:	228f      	movs	r2, #143	; 0x8f
 801b378:	b280      	uxth	r0, r0
 801b37a:	f003 fa01 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+73, Y+5, 'р');
 801b37e:	f104 0049 	add.w	r0, r4, #73	; 0x49
 801b382:	4629      	mov	r1, r5
 801b384:	2280      	movs	r2, #128	; 0x80
 801b386:	b280      	uxth	r0, r0
 801b388:	f003 f9fa 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+85, Y+5, 'к');
 801b38c:	f104 0055 	add.w	r0, r4, #85	; 0x55
 801b390:	4629      	mov	r1, r5
 801b392:	22ba      	movs	r2, #186	; 0xba
 801b394:	b280      	uxth	r0, r0
 801b396:	f003 f9f3 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+97, Y+5, 'о');
 801b39a:	f104 0061 	add.w	r0, r4, #97	; 0x61
 801b39e:	4629      	mov	r1, r5
 801b3a0:	22be      	movs	r2, #190	; 0xbe
 801b3a2:	b280      	uxth	r0, r0
 801b3a4:	f003 f9ec 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+109, Y+5, 'с');
 801b3a8:	f104 006d 	add.w	r0, r4, #109	; 0x6d
 801b3ac:	4629      	mov	r1, r5
 801b3ae:	2281      	movs	r2, #129	; 0x81
 801b3b0:	b280      	uxth	r0, r0
 801b3b2:	f003 f9e5 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+120, Y+5, 'т');
 801b3b6:	f104 0078 	add.w	r0, r4, #120	; 0x78
 801b3ba:	4629      	mov	r1, r5
 801b3bc:	2282      	movs	r2, #130	; 0x82
 801b3be:	b280      	uxth	r0, r0
 801b3c0:	f003 f9de 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801b3c4:	f104 0083 	add.w	r0, r4, #131	; 0x83
 801b3c8:	4629      	mov	r1, r5
 801b3ca:	228c      	movs	r2, #140	; 0x8c
 801b3cc:	b280      	uxth	r0, r0

}
 801b3ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	TFT_DrawCharRus(X+131, Y+5, 'ь');
 801b3d2:	f003 b9d5 	b.w	801e780 <TFT_DrawCharRus>
 801b3d6:	bf00      	nop
 801b3d8:	200001d8 	.word	0x200001d8
 801b3dc:	200001d0 	.word	0x200001d0
 801b3e0:	200001b0 	.word	0x200001b0

0801b3e4 <GUI_TextMsgRu_LowIrradiance>:

void GUI_TextMsgRu_LowIrradiance(uint16_t X, uint16_t Y)
{
 801b3e4:	b538      	push	{r3, r4, r5, lr}
 801b3e6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b3e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b3ec:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b3ee:	f003 f9bb 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b3f2:	2063      	movs	r0, #99	; 0x63
 801b3f4:	f003 f9be 	bl	801e774 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801b3f8:	483f      	ldr	r0, [pc, #252]	; (801b4f8 <GUI_TextMsgRu_LowIrradiance+0x114>)
 801b3fa:	f003 f9af 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 801b3fe:	4621      	mov	r1, r4
 801b400:	229c      	movs	r2, #156	; 0x9c
 801b402:	4628      	mov	r0, r5
 801b404:	f003 f9bc 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801b408:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b40a:	483c      	ldr	r0, [pc, #240]	; (801b4fc <GUI_TextMsgRu_LowIrradiance+0x118>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801b40c:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b40e:	f003 f9a5 	bl	801e75c <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801b412:	f105 0010 	add.w	r0, r5, #16
 801b416:	4621      	mov	r1, r4
 801b418:	22b0      	movs	r2, #176	; 0xb0
 801b41a:	b280      	uxth	r0, r0
 801b41c:	f003 f9b0 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 801b420:	f105 001c 	add.w	r0, r5, #28
 801b424:	4621      	mov	r1, r4
 801b426:	22bb      	movs	r2, #187	; 0xbb
 801b428:	b280      	uxth	r0, r0
 801b42a:	f003 f9a9 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 801b42e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801b432:	4621      	mov	r1, r4
 801b434:	22b0      	movs	r2, #176	; 0xb0
 801b436:	b280      	uxth	r0, r0
 801b438:	f003 f9a2 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 801b43c:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801b440:	4621      	mov	r1, r4
 801b442:	228f      	movs	r2, #143	; 0x8f
 801b444:	b280      	uxth	r0, r0
 801b446:	f003 f99b 	bl	801e780 <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'о');
 801b44a:	f105 0049 	add.w	r0, r5, #73	; 0x49
 801b44e:	4621      	mov	r1, r4
 801b450:	22be      	movs	r2, #190	; 0xbe
 801b452:	b280      	uxth	r0, r0
 801b454:	f003 f994 	bl	801e780 <TFT_DrawCharRus>
	TFT_DrawCharRus(X+87, Y+5, 'б');
 801b458:	f105 0057 	add.w	r0, r5, #87	; 0x57
 801b45c:	4621      	mov	r1, r4
 801b45e:	22b1      	movs	r2, #177	; 0xb1
 801b460:	b280      	uxth	r0, r0
 801b462:	f003 f98d 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+98, Y+5, 'л');
 801b466:	f105 0062 	add.w	r0, r5, #98	; 0x62
 801b46a:	4621      	mov	r1, r4
 801b46c:	22bb      	movs	r2, #187	; 0xbb
 801b46e:	b280      	uxth	r0, r0
 801b470:	f003 f986 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+110, Y+5, 'у');
 801b474:	f105 006e 	add.w	r0, r5, #110	; 0x6e
 801b478:	4621      	mov	r1, r4
 801b47a:	2283      	movs	r2, #131	; 0x83
 801b47c:	b280      	uxth	r0, r0
 801b47e:	f003 f97f 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+122, Y+5, 'ч');
 801b482:	f105 007a 	add.w	r0, r5, #122	; 0x7a
 801b486:	4621      	mov	r1, r4
 801b488:	2287      	movs	r2, #135	; 0x87
 801b48a:	b280      	uxth	r0, r0
 801b48c:	f003 f978 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+134, Y+5, 'е');
 801b490:	f105 0086 	add.w	r0, r5, #134	; 0x86
 801b494:	4621      	mov	r1, r4
 801b496:	22b5      	movs	r2, #181	; 0xb5
 801b498:	b280      	uxth	r0, r0
 801b49a:	f003 f971 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+145, Y+5, 'н');
 801b49e:	f105 0091 	add.w	r0, r5, #145	; 0x91
 801b4a2:	4621      	mov	r1, r4
 801b4a4:	22bd      	movs	r2, #189	; 0xbd
 801b4a6:	b280      	uxth	r0, r0
 801b4a8:	f003 f96a 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+157, Y+5, 'н');
 801b4ac:	f105 009d 	add.w	r0, r5, #157	; 0x9d
 801b4b0:	4621      	mov	r1, r4
 801b4b2:	22bd      	movs	r2, #189	; 0xbd
 801b4b4:	b280      	uxth	r0, r0
 801b4b6:	f003 f963 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+169, Y+5, 'о');
 801b4ba:	f105 00a9 	add.w	r0, r5, #169	; 0xa9
 801b4be:	4621      	mov	r1, r4
 801b4c0:	22be      	movs	r2, #190	; 0xbe
 801b4c2:	b280      	uxth	r0, r0
 801b4c4:	f003 f95c 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+181, Y+5, 'с');
 801b4c8:	f105 00b5 	add.w	r0, r5, #181	; 0xb5
 801b4cc:	4621      	mov	r1, r4
 801b4ce:	2281      	movs	r2, #129	; 0x81
 801b4d0:	b280      	uxth	r0, r0
 801b4d2:	f003 f955 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+190, Y+5, 'т');
 801b4d6:	f105 00be 	add.w	r0, r5, #190	; 0xbe
 801b4da:	4621      	mov	r1, r4
 801b4dc:	2282      	movs	r2, #130	; 0x82
 801b4de:	b280      	uxth	r0, r0
 801b4e0:	f003 f94e 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 801b4e4:	f105 00ca 	add.w	r0, r5, #202	; 0xca
 801b4e8:	4621      	mov	r1, r4
 801b4ea:	228c      	movs	r2, #140	; 0x8c
 801b4ec:	b280      	uxth	r0, r0
}
 801b4ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+202, Y+5, 'ь');
 801b4f2:	f003 b945 	b.w	801e780 <TFT_DrawCharRus>
 801b4f6:	bf00      	nop
 801b4f8:	200001d0 	.word	0x200001d0
 801b4fc:	200001d8 	.word	0x200001d8

0801b500 <GUI_TextMsgRu_LowRadiance>:

void GUI_TextMsgRu_LowRadiance(uint16_t X, uint16_t Y)
{
 801b500:	b538      	push	{r3, r4, r5, lr}
 801b502:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b504:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b508:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b50a:	f003 f92d 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b50e:	2063      	movs	r0, #99	; 0x63
 801b510:	f003 f930 	bl	801e774 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801b514:	482d      	ldr	r0, [pc, #180]	; (801b5cc <GUI_TextMsgRu_LowRadiance+0xcc>)
 801b516:	f003 f921 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'М');
 801b51a:	4621      	mov	r1, r4
 801b51c:	229c      	movs	r2, #156	; 0x9c
 801b51e:	4628      	mov	r0, r5
 801b520:	f003 f92e 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801b524:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b526:	482a      	ldr	r0, [pc, #168]	; (801b5d0 <GUI_TextMsgRu_LowRadiance+0xd0>)
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801b528:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b52a:	f003 f917 	bl	801e75c <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'а');
 801b52e:	f105 0010 	add.w	r0, r5, #16
 801b532:	4621      	mov	r1, r4
 801b534:	22b0      	movs	r2, #176	; 0xb0
 801b536:	b280      	uxth	r0, r0
 801b538:	f003 f922 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 801b53c:	f105 001c 	add.w	r0, r5, #28
 801b540:	4621      	mov	r1, r4
 801b542:	22bb      	movs	r2, #187	; 0xbb
 801b544:	b280      	uxth	r0, r0
 801b546:	f003 f91b 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'а');
 801b54a:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801b54e:	4621      	mov	r1, r4
 801b550:	22b0      	movs	r2, #176	; 0xb0
 801b552:	b280      	uxth	r0, r0
 801b554:	f003 f914 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+52, Y+5, 'я');
 801b558:	f105 0034 	add.w	r0, r5, #52	; 0x34
 801b55c:	4621      	mov	r1, r4
 801b55e:	228f      	movs	r2, #143	; 0x8f
 801b560:	b280      	uxth	r0, r0
 801b562:	f003 f90d 	bl	801e780 <TFT_DrawCharRus>

  TFT_DrawCharRus(X+73, Y+5, 'я');
 801b566:	f105 0049 	add.w	r0, r5, #73	; 0x49
 801b56a:	4621      	mov	r1, r4
 801b56c:	228f      	movs	r2, #143	; 0x8f
 801b56e:	b280      	uxth	r0, r0
 801b570:	f003 f906 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+85, Y+5, 'р');
 801b574:	f105 0055 	add.w	r0, r5, #85	; 0x55
 801b578:	4621      	mov	r1, r4
 801b57a:	2280      	movs	r2, #128	; 0x80
 801b57c:	b280      	uxth	r0, r0
 801b57e:	f003 f8ff 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+97, Y+5, 'к');
 801b582:	f105 0061 	add.w	r0, r5, #97	; 0x61
 801b586:	4621      	mov	r1, r4
 801b588:	22ba      	movs	r2, #186	; 0xba
 801b58a:	b280      	uxth	r0, r0
 801b58c:	f003 f8f8 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+109, Y+5, 'о');
 801b590:	f105 006d 	add.w	r0, r5, #109	; 0x6d
 801b594:	4621      	mov	r1, r4
 801b596:	22be      	movs	r2, #190	; 0xbe
 801b598:	b280      	uxth	r0, r0
 801b59a:	f003 f8f1 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+121, Y+5, 'с');
 801b59e:	f105 0079 	add.w	r0, r5, #121	; 0x79
 801b5a2:	4621      	mov	r1, r4
 801b5a4:	2281      	movs	r2, #129	; 0x81
 801b5a6:	b280      	uxth	r0, r0
 801b5a8:	f003 f8ea 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+132, Y+5, 'т');
 801b5ac:	f105 0084 	add.w	r0, r5, #132	; 0x84
 801b5b0:	4621      	mov	r1, r4
 801b5b2:	2282      	movs	r2, #130	; 0x82
 801b5b4:	b280      	uxth	r0, r0
 801b5b6:	f003 f8e3 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 801b5ba:	f105 008f 	add.w	r0, r5, #143	; 0x8f
 801b5be:	4621      	mov	r1, r4
 801b5c0:	228c      	movs	r2, #140	; 0x8c
 801b5c2:	b280      	uxth	r0, r0
}
 801b5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+143, Y+5, 'ь');
 801b5c8:	f003 b8da 	b.w	801e780 <TFT_DrawCharRus>
 801b5cc:	200001d0 	.word	0x200001d0
 801b5d0:	200001d8 	.word	0x200001d8

0801b5d4 <GUI_TextMsgRu_HighIrradiance>:

void GUI_TextMsgRu_HighIrradiance(uint16_t X, uint16_t Y)
{
 801b5d4:	b538      	push	{r3, r4, r5, lr}
 801b5d6:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b5d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b5dc:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b5de:	f003 f8c3 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b5e2:	2063      	movs	r0, #99	; 0x63
 801b5e4:	f003 f8c6 	bl	801e774 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801b5e8:	4846      	ldr	r0, [pc, #280]	; (801b704 <GUI_TextMsgRu_HighIrradiance+0x130>)
 801b5ea:	f003 f8b7 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 801b5ee:	4621      	mov	r1, r4
 801b5f0:	2291      	movs	r2, #145	; 0x91
 801b5f2:	4628      	mov	r0, r5
 801b5f4:	f003 f8c4 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801b5f8:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b5fa:	4843      	ldr	r0, [pc, #268]	; (801b708 <GUI_TextMsgRu_HighIrradiance+0x134>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801b5fc:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b5fe:	f003 f8ad 	bl	801e75c <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801b602:	f105 0010 	add.w	r0, r5, #16
 801b606:	4621      	mov	r1, r4
 801b608:	22be      	movs	r2, #190	; 0xbe
 801b60a:	b280      	uxth	r0, r0
 801b60c:	f003 f8b8 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 801b610:	f105 001c 	add.w	r0, r5, #28
 801b614:	4621      	mov	r1, r4
 801b616:	22bb      	movs	r2, #187	; 0xbb
 801b618:	b280      	uxth	r0, r0
 801b61a:	f003 f8b1 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 801b61e:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801b622:	4621      	mov	r1, r4
 801b624:	228c      	movs	r2, #140	; 0x8c
 801b626:	b280      	uxth	r0, r0
 801b628:	f003 f8aa 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 801b62c:	f105 0036 	add.w	r0, r5, #54	; 0x36
 801b630:	4621      	mov	r1, r4
 801b632:	2288      	movs	r2, #136	; 0x88
 801b634:	b280      	uxth	r0, r0
 801b636:	f003 f8a3 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 801b63a:	f105 0043 	add.w	r0, r5, #67	; 0x43
 801b63e:	4621      	mov	r1, r4
 801b640:	22b0      	movs	r2, #176	; 0xb0
 801b642:	b280      	uxth	r0, r0
 801b644:	f003 f89c 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 801b648:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 801b64c:	4621      	mov	r1, r4
 801b64e:	228f      	movs	r2, #143	; 0x8f
 801b650:	b280      	uxth	r0, r0
 801b652:	f003 f895 	bl	801e780 <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'о');
 801b656:	f105 0066 	add.w	r0, r5, #102	; 0x66
 801b65a:	4621      	mov	r1, r4
 801b65c:	22be      	movs	r2, #190	; 0xbe
 801b65e:	b280      	uxth	r0, r0
 801b660:	f003 f88e 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+116, Y+5, 'б');
 801b664:	f105 0074 	add.w	r0, r5, #116	; 0x74
 801b668:	4621      	mov	r1, r4
 801b66a:	22b1      	movs	r2, #177	; 0xb1
 801b66c:	b280      	uxth	r0, r0
 801b66e:	f003 f887 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+127, Y+5, 'л');
 801b672:	f105 007f 	add.w	r0, r5, #127	; 0x7f
 801b676:	4621      	mov	r1, r4
 801b678:	22bb      	movs	r2, #187	; 0xbb
 801b67a:	b280      	uxth	r0, r0
 801b67c:	f003 f880 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+139, Y+5, 'у');
 801b680:	f105 008b 	add.w	r0, r5, #139	; 0x8b
 801b684:	4621      	mov	r1, r4
 801b686:	2283      	movs	r2, #131	; 0x83
 801b688:	b280      	uxth	r0, r0
 801b68a:	f003 f879 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+151, Y+5, 'ч');
 801b68e:	f105 0097 	add.w	r0, r5, #151	; 0x97
 801b692:	4621      	mov	r1, r4
 801b694:	2287      	movs	r2, #135	; 0x87
 801b696:	b280      	uxth	r0, r0
 801b698:	f003 f872 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+163, Y+5, 'е');
 801b69c:	f105 00a3 	add.w	r0, r5, #163	; 0xa3
 801b6a0:	4621      	mov	r1, r4
 801b6a2:	22b5      	movs	r2, #181	; 0xb5
 801b6a4:	b280      	uxth	r0, r0
 801b6a6:	f003 f86b 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+174, Y+5, 'н');
 801b6aa:	f105 00ae 	add.w	r0, r5, #174	; 0xae
 801b6ae:	4621      	mov	r1, r4
 801b6b0:	22bd      	movs	r2, #189	; 0xbd
 801b6b2:	b280      	uxth	r0, r0
 801b6b4:	f003 f864 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+186, Y+5, 'н');
 801b6b8:	f105 00ba 	add.w	r0, r5, #186	; 0xba
 801b6bc:	4621      	mov	r1, r4
 801b6be:	22bd      	movs	r2, #189	; 0xbd
 801b6c0:	b280      	uxth	r0, r0
 801b6c2:	f003 f85d 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+198, Y+5, 'о');
 801b6c6:	f105 00c6 	add.w	r0, r5, #198	; 0xc6
 801b6ca:	4621      	mov	r1, r4
 801b6cc:	22be      	movs	r2, #190	; 0xbe
 801b6ce:	b280      	uxth	r0, r0
 801b6d0:	f003 f856 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+210, Y+5, 'с');
 801b6d4:	f105 00d2 	add.w	r0, r5, #210	; 0xd2
 801b6d8:	4621      	mov	r1, r4
 801b6da:	2281      	movs	r2, #129	; 0x81
 801b6dc:	b280      	uxth	r0, r0
 801b6de:	f003 f84f 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+219, Y+5, 'т');
 801b6e2:	f105 00db 	add.w	r0, r5, #219	; 0xdb
 801b6e6:	4621      	mov	r1, r4
 801b6e8:	2282      	movs	r2, #130	; 0x82
 801b6ea:	b280      	uxth	r0, r0
 801b6ec:	f003 f848 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 801b6f0:	f105 00e7 	add.w	r0, r5, #231	; 0xe7
 801b6f4:	4621      	mov	r1, r4
 801b6f6:	228c      	movs	r2, #140	; 0x8c
 801b6f8:	b280      	uxth	r0, r0
}
 801b6fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+231, Y+5, 'ь');
 801b6fe:	f003 b83f 	b.w	801e780 <TFT_DrawCharRus>
 801b702:	bf00      	nop
 801b704:	200001d0 	.word	0x200001d0
 801b708:	200001d8 	.word	0x200001d8

0801b70c <GUI_TextMsgRu_HighRadiance>:

void GUI_TextMsgRu_HighRadiance(uint16_t X, uint16_t Y)
{
 801b70c:	b538      	push	{r3, r4, r5, lr}
 801b70e:	4605      	mov	r5, r0
	TFT_SetTextColor(TFT_White);
 801b710:	f64f 70ff 	movw	r0, #65535	; 0xffff
{
 801b714:	460c      	mov	r4, r1
	TFT_SetTextColor(TFT_White);
 801b716:	f003 f827 	bl	801e768 <TFT_SetTextColor>
	TFT_SetBackColor(TFT_Black_Bkgr);
 801b71a:	2063      	movs	r0, #99	; 0x63
 801b71c:	f003 f82a 	bl	801e774 <TFT_SetBackColor>
	
	TFT_SetFont(&Font16RU_arch_big);
 801b720:	4834      	ldr	r0, [pc, #208]	; (801b7f4 <GUI_TextMsgRu_HighRadiance+0xe8>)
 801b722:	f003 f81b 	bl	801e75c <TFT_SetFont>
	TFT_DrawCharRus(X, Y, 'Б');
 801b726:	4621      	mov	r1, r4
 801b728:	2291      	movs	r2, #145	; 0x91
 801b72a:	4628      	mov	r0, r5
 801b72c:	f003 f828 	bl	801e780 <TFT_DrawCharRus>
	TFT_SetFont(&Font16RU_arch_small);
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801b730:	3405      	adds	r4, #5
	TFT_SetFont(&Font16RU_arch_small);
 801b732:	4831      	ldr	r0, [pc, #196]	; (801b7f8 <GUI_TextMsgRu_HighRadiance+0xec>)
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801b734:	b2a4      	uxth	r4, r4
	TFT_SetFont(&Font16RU_arch_small);
 801b736:	f003 f811 	bl	801e75c <TFT_SetFont>
  TFT_DrawCharRus(X+16, Y+5, 'о');
 801b73a:	f105 0010 	add.w	r0, r5, #16
 801b73e:	4621      	mov	r1, r4
 801b740:	22be      	movs	r2, #190	; 0xbe
 801b742:	b280      	uxth	r0, r0
 801b744:	f003 f81c 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+28, Y+5, 'л');
 801b748:	f105 001c 	add.w	r0, r5, #28
 801b74c:	4621      	mov	r1, r4
 801b74e:	22bb      	movs	r2, #187	; 0xbb
 801b750:	b280      	uxth	r0, r0
 801b752:	f003 f815 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+40, Y+5, 'ь');
 801b756:	f105 0028 	add.w	r0, r5, #40	; 0x28
 801b75a:	4621      	mov	r1, r4
 801b75c:	228c      	movs	r2, #140	; 0x8c
 801b75e:	b280      	uxth	r0, r0
 801b760:	f003 f80e 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+54, Y+5, 'ш');
 801b764:	f105 0036 	add.w	r0, r5, #54	; 0x36
 801b768:	4621      	mov	r1, r4
 801b76a:	2288      	movs	r2, #136	; 0x88
 801b76c:	b280      	uxth	r0, r0
 801b76e:	f003 f807 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+67, Y+5, 'а');
 801b772:	f105 0043 	add.w	r0, r5, #67	; 0x43
 801b776:	4621      	mov	r1, r4
 801b778:	22b0      	movs	r2, #176	; 0xb0
 801b77a:	b280      	uxth	r0, r0
 801b77c:	f003 f800 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+79, Y+5, 'я');
 801b780:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 801b784:	4621      	mov	r1, r4
 801b786:	228f      	movs	r2, #143	; 0x8f
 801b788:	b280      	uxth	r0, r0
 801b78a:	f002 fff9 	bl	801e780 <TFT_DrawCharRus>
	
  TFT_DrawCharRus(X+102, Y+5, 'я');
 801b78e:	f105 0066 	add.w	r0, r5, #102	; 0x66
 801b792:	4621      	mov	r1, r4
 801b794:	228f      	movs	r2, #143	; 0x8f
 801b796:	b280      	uxth	r0, r0
 801b798:	f002 fff2 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+114, Y+5, 'р');
 801b79c:	f105 0072 	add.w	r0, r5, #114	; 0x72
 801b7a0:	4621      	mov	r1, r4
 801b7a2:	2280      	movs	r2, #128	; 0x80
 801b7a4:	b280      	uxth	r0, r0
 801b7a6:	f002 ffeb 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+126, Y+5, 'к');
 801b7aa:	f105 007e 	add.w	r0, r5, #126	; 0x7e
 801b7ae:	4621      	mov	r1, r4
 801b7b0:	22ba      	movs	r2, #186	; 0xba
 801b7b2:	b280      	uxth	r0, r0
 801b7b4:	f002 ffe4 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+138, Y+5, 'о');
 801b7b8:	f105 008a 	add.w	r0, r5, #138	; 0x8a
 801b7bc:	4621      	mov	r1, r4
 801b7be:	22be      	movs	r2, #190	; 0xbe
 801b7c0:	b280      	uxth	r0, r0
 801b7c2:	f002 ffdd 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+150, Y+5, 'с');
 801b7c6:	f105 0096 	add.w	r0, r5, #150	; 0x96
 801b7ca:	4621      	mov	r1, r4
 801b7cc:	2281      	movs	r2, #129	; 0x81
 801b7ce:	b280      	uxth	r0, r0
 801b7d0:	f002 ffd6 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+161, Y+5, 'т');
 801b7d4:	f105 00a1 	add.w	r0, r5, #161	; 0xa1
 801b7d8:	4621      	mov	r1, r4
 801b7da:	2282      	movs	r2, #130	; 0x82
 801b7dc:	b280      	uxth	r0, r0
 801b7de:	f002 ffcf 	bl	801e780 <TFT_DrawCharRus>
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 801b7e2:	f105 00ac 	add.w	r0, r5, #172	; 0xac
 801b7e6:	4621      	mov	r1, r4
 801b7e8:	228c      	movs	r2, #140	; 0x8c
 801b7ea:	b280      	uxth	r0, r0
 801b7ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TFT_DrawCharRus(X+172, Y+5, 'ь');
 801b7f0:	f002 bfc6 	b.w	801e780 <TFT_DrawCharRus>
 801b7f4:	200001d0 	.word	0x200001d0
 801b7f8:	200001d8 	.word	0x200001d8

0801b7fc <Set.part.0>:
void Set(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_SET);
 801b7fc:	2201      	movs	r2, #1
 801b7fe:	2102      	movs	r1, #2
 801b800:	4801      	ldr	r0, [pc, #4]	; (801b808 <Set.part.0+0xc>)
 801b802:	f7e6 bfd5 	b.w	80027b0 <HAL_GPIO_WritePin>
 801b806:	bf00      	nop
 801b808:	48000400 	.word	0x48000400

0801b80c <Reset.part.1>:
void Reset(uint8_t pin)
{
	switch(pin)
	{
		case io0:
			HAL_GPIO_WritePin(IO0_GPIO_PORT, IO0_PIN, GPIO_PIN_RESET);
 801b80c:	2200      	movs	r2, #0
 801b80e:	2102      	movs	r1, #2
 801b810:	4801      	ldr	r0, [pc, #4]	; (801b818 <Reset.part.1+0xc>)
 801b812:	f7e6 bfcd 	b.w	80027b0 <HAL_GPIO_WritePin>
 801b816:	bf00      	nop
 801b818:	48000400 	.word	0x48000400

0801b81c <GPIO_QSPI_Init>:
{
 801b81c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
		__HAL_RCC_GPIOF_CLK_ENABLE();
 801b820:	4b39      	ldr	r3, [pc, #228]	; (801b908 <GPIO_QSPI_Init+0xec>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801b822:	4c3a      	ldr	r4, [pc, #232]	; (801b90c <GPIO_QSPI_Init+0xf0>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 801b824:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b826:	4f3a      	ldr	r7, [pc, #232]	; (801b910 <GPIO_QSPI_Init+0xf4>)
		__HAL_RCC_GPIOF_CLK_ENABLE();
 801b828:	f042 0220 	orr.w	r2, r2, #32
 801b82c:	64da      	str	r2, [r3, #76]	; 0x4c
 801b82e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b830:	f002 0220 	and.w	r2, r2, #32
 801b834:	9201      	str	r2, [sp, #4]
 801b836:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801b838:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b83a:	f042 0201 	orr.w	r2, r2, #1
 801b83e:	64da      	str	r2, [r3, #76]	; 0x4c
 801b840:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b842:	f002 0201 	and.w	r2, r2, #1
 801b846:	9202      	str	r2, [sp, #8]
 801b848:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801b84a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801b84c:	f042 0202 	orr.w	r2, r2, #2
 801b850:	64da      	str	r2, [r3, #76]	; 0x4c
 801b852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b854:	f003 0302 	and.w	r3, r3, #2
 801b858:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b85a:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b85c:	2601      	movs	r6, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b85e:	f04f 0803 	mov.w	r8, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801b862:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b864:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b866:	23c0      	movs	r3, #192	; 0xc0
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b868:	4621      	mov	r1, r4
 801b86a:	4638      	mov	r0, r7
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b86c:	e884 0048 	stmia.w	r4, {r3, r6}
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801b870:	f04f 0904 	mov.w	r9, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b874:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b878:	f7e6 fe24 	bl	80024c4 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b87c:	4621      	mov	r1, r4
 801b87e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801b882:	f8c4 9000 	str.w	r9, [r4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b886:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 801b888:	60a6      	str	r6, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b88a:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801b88e:	f7e6 fe19 	bl	80024c4 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 801b892:	4649      	mov	r1, r9
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b894:	f8df 907c 	ldr.w	r9, [pc, #124]	; 801b914 <GPIO_QSPI_Init+0xf8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 801b898:	4632      	mov	r2, r6
 801b89a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b89e:	f7e6 ff87 	bl	80027b0 <HAL_GPIO_WritePin>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b8a2:	4621      	mov	r1, r4
 801b8a4:	4648      	mov	r0, r9
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 801b8a6:	f44f 6a80 	mov.w	sl, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801b8aa:	f8c4 8000 	str.w	r8, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b8ae:	6066      	str	r6, [r4, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b8b0:	60a5      	str	r5, [r4, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b8b2:	f8c4 800c 	str.w	r8, [r4, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b8b6:	f7e6 fe05 	bl	80024c4 <HAL_GPIO_Init>
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b8ba:	4621      	mov	r1, r4
 801b8bc:	4638      	mov	r0, r7
		GPIO_InitStruct.Pin = GPIO_PIN_10;
 801b8be:	f8c4 a000 	str.w	sl, [r4]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b8c2:	6066      	str	r6, [r4, #4]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801b8c4:	60a5      	str	r5, [r4, #8]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801b8c6:	f8c4 800c 	str.w	r8, [r4, #12]
		HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b8ca:	f7e6 fdfb 	bl	80024c4 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 801b8ce:	462a      	mov	r2, r5
 801b8d0:	4631      	mov	r1, r6
 801b8d2:	4648      	mov	r0, r9
 801b8d4:	f7e6 ff6c 	bl	80027b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 801b8d8:	462a      	mov	r2, r5
 801b8da:	4648      	mov	r0, r9
 801b8dc:	2102      	movs	r1, #2
 801b8de:	f7e6 ff67 	bl	80027b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 801b8e2:	462a      	mov	r2, r5
 801b8e4:	4638      	mov	r0, r7
 801b8e6:	2140      	movs	r1, #64	; 0x40
 801b8e8:	f7e6 ff62 	bl	80027b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 801b8ec:	462a      	mov	r2, r5
 801b8ee:	4638      	mov	r0, r7
 801b8f0:	2180      	movs	r1, #128	; 0x80
 801b8f2:	f7e6 ff5d 	bl	80027b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF, GPIO_PIN_10, GPIO_PIN_RESET);
 801b8f6:	462a      	mov	r2, r5
 801b8f8:	4651      	mov	r1, sl
 801b8fa:	4638      	mov	r0, r7
 801b8fc:	f7e6 ff58 	bl	80027b0 <HAL_GPIO_WritePin>
}
 801b900:	b004      	add	sp, #16
 801b902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b906:	bf00      	nop
 801b908:	40021000 	.word	0x40021000
 801b90c:	20004cb4 	.word	0x20004cb4
 801b910:	48001400 	.word	0x48001400
 801b914:	48000400 	.word	0x48000400

0801b918 <Set>:
	switch(pin)
 801b918:	3801      	subs	r0, #1
 801b91a:	2805      	cmp	r0, #5
 801b91c:	d81b      	bhi.n	801b956 <Set+0x3e>
 801b91e:	e8df f000 	tbb	[pc, r0]
 801b922:	0503      	.short	0x0503
 801b924:	16110e0a 	.word	0x16110e0a
 801b928:	f7ff bf68 	b.w	801b7fc <Set.part.0>
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_SET);
 801b92c:	2201      	movs	r2, #1
 801b92e:	480a      	ldr	r0, [pc, #40]	; (801b958 <Set+0x40>)
 801b930:	4611      	mov	r1, r2
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801b932:	f7e6 bf3d 	b.w	80027b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_SET);
 801b936:	2201      	movs	r2, #1
 801b938:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801b93a:	4808      	ldr	r0, [pc, #32]	; (801b95c <Set+0x44>)
 801b93c:	e7f9      	b.n	801b932 <Set+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_SET);
 801b93e:	2201      	movs	r2, #1
 801b940:	2140      	movs	r1, #64	; 0x40
 801b942:	e7fa      	b.n	801b93a <Set+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_SET);
 801b944:	2201      	movs	r2, #1
 801b946:	2104      	movs	r1, #4
 801b948:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b94c:	e7f1      	b.n	801b932 <Set+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_SET);
 801b94e:	2201      	movs	r2, #1
 801b950:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b954:	e7f1      	b.n	801b93a <Set+0x22>
 801b956:	4770      	bx	lr
 801b958:	48000400 	.word	0x48000400
 801b95c:	48001400 	.word	0x48001400

0801b960 <Reset>:
	switch(pin)
 801b960:	3801      	subs	r0, #1
 801b962:	2805      	cmp	r0, #5
 801b964:	d81b      	bhi.n	801b99e <Reset+0x3e>
 801b966:	e8df f000 	tbb	[pc, r0]
 801b96a:	0503      	.short	0x0503
 801b96c:	16110e0a 	.word	0x16110e0a
 801b970:	f7ff bf4c 	b.w	801b80c <Reset.part.1>
			break;
		case io1:
			HAL_GPIO_WritePin(IO1_GPIO_PORT, IO1_PIN, GPIO_PIN_RESET);
 801b974:	480a      	ldr	r0, [pc, #40]	; (801b9a0 <Reset+0x40>)
 801b976:	2200      	movs	r2, #0
 801b978:	2101      	movs	r1, #1
			break;
		case cs:
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
			break;
		case clk:
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801b97a:	f7e6 bf19 	b.w	80027b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(IO2_GPIO_PORT, IO2_PIN, GPIO_PIN_RESET);
 801b97e:	2200      	movs	r2, #0
 801b980:	2180      	movs	r1, #128	; 0x80
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801b982:	4808      	ldr	r0, [pc, #32]	; (801b9a4 <Reset+0x44>)
 801b984:	e7f9      	b.n	801b97a <Reset+0x1a>
			HAL_GPIO_WritePin(IO3_GPIO_PORT, IO3_PIN, GPIO_PIN_RESET);
 801b986:	2200      	movs	r2, #0
 801b988:	2140      	movs	r1, #64	; 0x40
 801b98a:	e7fa      	b.n	801b982 <Reset+0x22>
			HAL_GPIO_WritePin(CS_GPIO_PORT, CS_PIN, GPIO_PIN_RESET);
 801b98c:	2200      	movs	r2, #0
 801b98e:	2104      	movs	r1, #4
 801b990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801b994:	e7f1      	b.n	801b97a <Reset+0x1a>
			HAL_GPIO_WritePin(CLK_GPIO_PORT, CLK_PIN, GPIO_PIN_RESET);
 801b996:	2200      	movs	r2, #0
 801b998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b99c:	e7f1      	b.n	801b982 <Reset+0x22>
 801b99e:	4770      	bx	lr
 801b9a0:	48000400 	.word	0x48000400
 801b9a4:	48001400 	.word	0x48001400

0801b9a8 <QSPI_Recieve_Init>:
	}
}

/* */
void QSPI_Recieve_Init(void)
{
 801b9a8:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801b9aa:	4c09      	ldr	r4, [pc, #36]	; (801b9d0 <QSPI_Recieve_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b9ac:	4809      	ldr	r0, [pc, #36]	; (801b9d4 <QSPI_Recieve_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801b9ae:	2303      	movs	r3, #3
 801b9b0:	2500      	movs	r5, #0
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b9b2:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801b9b4:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b9b8:	f7e6 fd84 	bl	80024c4 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801b9bc:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801b9be:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b9c2:	4621      	mov	r1, r4
 801b9c4:	4804      	ldr	r0, [pc, #16]	; (801b9d8 <QSPI_Recieve_Init+0x30>)
}
 801b9c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b9ca:	f7e6 bd7b 	b.w	80024c4 <HAL_GPIO_Init>
 801b9ce:	bf00      	nop
 801b9d0:	20004cb4 	.word	0x20004cb4
 801b9d4:	48000400 	.word	0x48000400
 801b9d8:	48001400 	.word	0x48001400

0801b9dc <QSPI_Transmit_Init>:
void QSPI_Transmit_Init(void)
{
 801b9dc:	b538      	push	{r3, r4, r5, lr}
	/* PB0 (IO1), PB1 (IO0) */
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801b9de:	4c09      	ldr	r4, [pc, #36]	; (801ba04 <QSPI_Transmit_Init+0x28>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b9e0:	4809      	ldr	r0, [pc, #36]	; (801ba08 <QSPI_Transmit_Init+0x2c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b9e2:	2303      	movs	r3, #3
 801b9e4:	2501      	movs	r5, #1
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b9e6:	4621      	mov	r1, r4
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b9e8:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801b9ec:	f7e6 fd6a 	bl	80024c4 <HAL_GPIO_Init>
	
	/* PF6 (IO3), PF7 (IO2) */
	GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 801b9f0:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801b9f2:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b9f6:	4621      	mov	r1, r4
 801b9f8:	4804      	ldr	r0, [pc, #16]	; (801ba0c <QSPI_Transmit_Init+0x30>)
}
 801b9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801b9fe:	f7e6 bd61 	b.w	80024c4 <HAL_GPIO_Init>
 801ba02:	bf00      	nop
 801ba04:	20004cb4 	.word	0x20004cb4
 801ba08:	48000400 	.word	0x48000400
 801ba0c:	48001400 	.word	0x48001400

0801ba10 <Single_Mode>:
void Single_Mode(void)
{
 801ba10:	b570      	push	{r4, r5, r6, lr}
	/* PB1 (IO0) */
	GPIO_InitStruct.Pin = IO0_PIN;
 801ba12:	4c0d      	ldr	r4, [pc, #52]	; (801ba48 <Single_Mode+0x38>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 801ba14:	4e0d      	ldr	r6, [pc, #52]	; (801ba4c <Single_Mode+0x3c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801ba16:	2501      	movs	r5, #1
 801ba18:	2302      	movs	r3, #2
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 801ba1a:	4621      	mov	r1, r4
 801ba1c:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801ba1e:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO0_GPIO_PORT, &GPIO_InitStruct);
 801ba22:	f7e6 fd4f 	bl	80024c4 <HAL_GPIO_Init>
	
	/* PB0 (IO1) */
	GPIO_InitStruct.Pin = IO1_PIN;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801ba26:	2300      	movs	r3, #0
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 801ba28:	4621      	mov	r1, r4
 801ba2a:	4630      	mov	r0, r6
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801ba2c:	6063      	str	r3, [r4, #4]
	GPIO_InitStruct.Pin = IO1_PIN;
 801ba2e:	6025      	str	r5, [r4, #0]
	HAL_GPIO_Init(IO1_GPIO_PORT, &GPIO_InitStruct);
 801ba30:	f7e6 fd48 	bl	80024c4 <HAL_GPIO_Init>
	
	/* PF7 (IO2) */
	GPIO_InitStruct.Pin = IO2_PIN;
 801ba34:	2380      	movs	r3, #128	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801ba36:	e884 0028 	stmia.w	r4, {r3, r5}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 801ba3a:	4621      	mov	r1, r4
 801ba3c:	4804      	ldr	r0, [pc, #16]	; (801ba50 <Single_Mode+0x40>)
}
 801ba3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_Init(IO2_GPIO_PORT, &GPIO_InitStruct);
 801ba42:	f7e6 bd3f 	b.w	80024c4 <HAL_GPIO_Init>
 801ba46:	bf00      	nop
 801ba48:	20004cb4 	.word	0x20004cb4
 801ba4c:	48000400 	.word	0x48000400
 801ba50:	48001400 	.word	0x48001400

0801ba54 <SPI_Byte_T>:

/* Single mode SPI functions */

/* Byte transmit function */
void SPI_Byte_T(uint8_t byte)
{
 801ba54:	b538      	push	{r3, r4, r5, lr}
 801ba56:	4605      	mov	r5, r0
 801ba58:	2408      	movs	r4, #8
	for(uint8_t i=0; i<8; i++)
	{
		if(0x80 & byte)
 801ba5a:	062b      	lsls	r3, r5, #24
 801ba5c:	d501      	bpl.n	801ba62 <SPI_Byte_T+0xe>
 801ba5e:	f7ff fecd 	bl	801b7fc <Set.part.0>
		{
			Set(io0);
		}
		Set(clk);
 801ba62:	2006      	movs	r0, #6
 801ba64:	f7ff ff58 	bl	801b918 <Set>
 801ba68:	3c01      	subs	r4, #1
 801ba6a:	f7ff fecf 	bl	801b80c <Reset.part.1>
		Reset(io0);	
		byte=(byte<<1);
		Reset(clk);	
 801ba6e:	2006      	movs	r0, #6
		byte=(byte<<1);
 801ba70:	006d      	lsls	r5, r5, #1
		Reset(clk);	
 801ba72:	f7ff ff75 	bl	801b960 <Reset>
	for(uint8_t i=0; i<8; i++)
 801ba76:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
		byte=(byte<<1);
 801ba7a:	b2ed      	uxtb	r5, r5
	for(uint8_t i=0; i<8; i++)
 801ba7c:	d1ed      	bne.n	801ba5a <SPI_Byte_T+0x6>
	}	
}
 801ba7e:	bd38      	pop	{r3, r4, r5, pc}

0801ba80 <SPI_Byte_R>:
	
	SPI_Check_Busy();
}
/* Byte receive function */
uint8_t SPI_Byte_R(void)
{
 801ba80:	b570      	push	{r4, r5, r6, lr}
	uint8_t byte=0;
	for(uint8_t i=0; i<8; i++)
 801ba82:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 801ba84:	4e0d      	ldr	r6, [pc, #52]	; (801babc <SPI_Byte_R+0x3c>)
	uint8_t byte=0;
 801ba86:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x01;
 801ba88:	2101      	movs	r1, #1
 801ba8a:	4630      	mov	r0, r6
 801ba8c:	f7e6 fe8a 	bl	80027a4 <HAL_GPIO_ReadPin>
 801ba90:	b108      	cbz	r0, 801ba96 <SPI_Byte_R+0x16>
 801ba92:	f044 0401 	orr.w	r4, r4, #1
		Set(clk);
 801ba96:	2006      	movs	r0, #6
 801ba98:	f7ff ff3e 	bl	801b918 <Set>
		if (i<7) byte=(byte<<1);
 801ba9c:	2d07      	cmp	r5, #7
	for(uint8_t i=0; i<8; i++)
 801ba9e:	f105 0501 	add.w	r5, r5, #1
		if (i<7) byte=(byte<<1);
 801baa2:	bf18      	it	ne
 801baa4:	0064      	lslne	r4, r4, #1
		Reset(clk);
 801baa6:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<8; i++)
 801baaa:	b2ed      	uxtb	r5, r5
		if (i<7) byte=(byte<<1);
 801baac:	bf18      	it	ne
 801baae:	b2e4      	uxtbne	r4, r4
		Reset(clk);
 801bab0:	f7ff ff56 	bl	801b960 <Reset>
	for(uint8_t i=0; i<8; i++)
 801bab4:	2d08      	cmp	r5, #8
 801bab6:	d1e7      	bne.n	801ba88 <SPI_Byte_R+0x8>
	}
	return byte;
}
 801bab8:	4620      	mov	r0, r4
 801baba:	bd70      	pop	{r4, r5, r6, pc}
 801babc:	48000400 	.word	0x48000400

0801bac0 <SPI_Read_SR.part.2>:
	SPI_Address(address);
	Set(cs);
	SPI_Check_Busy();
}
/* Read status register */
uint8_t SPI_Read_SR(uint8_t sr)
 801bac0:	b510      	push	{r4, lr}
	uint8_t reg;
	
	switch(sr)
	{
		case 1:
			Reset(cs);
 801bac2:	2005      	movs	r0, #5
 801bac4:	f7ff ff4c 	bl	801b960 <Reset>
	SPI_Byte_T(cmd);
 801bac8:	2005      	movs	r0, #5
 801baca:	f7ff ffc3 	bl	801ba54 <SPI_Byte_T>
			SPI_Instruction(0x05);
			reg=SPI_Byte_R();
 801bace:	f7ff ffd7 	bl	801ba80 <SPI_Byte_R>
 801bad2:	4604      	mov	r4, r0
			Set(cs);
 801bad4:	2005      	movs	r0, #5
 801bad6:	f7ff ff1f 	bl	801b918 <Set>

	}
	return reg;

	SPI_Check_Busy();
}
 801bada:	4620      	mov	r0, r4
 801badc:	bd10      	pop	{r4, pc}

0801bade <SPI_Check_Busy>:
{
 801bade:	b508      	push	{r3, lr}
 801bae0:	f7ff ffee 	bl	801bac0 <SPI_Read_SR.part.2>
	while( SPI_Read_SR(1)&0x01 )
 801bae4:	07c3      	lsls	r3, r0, #31
 801bae6:	d400      	bmi.n	801baea <SPI_Check_Busy+0xc>
}
 801bae8:	bd08      	pop	{r3, pc}
		HAL_Delay(0);
 801baea:	2000      	movs	r0, #0
 801baec:	f7e5 fa96 	bl	800101c <HAL_Delay>
 801baf0:	e7f6      	b.n	801bae0 <SPI_Check_Busy+0x2>
	...

0801baf4 <QSPI_16_R>:
	}
	return byte;
}
/* Recieve 16 bit in quad mode  */
uint16_t QSPI_16_R(void)
{
 801baf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t byte=0;
	for(uint8_t i=0; i<4; i++)
 801baf6:	2500      	movs	r5, #0
	{
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 801baf8:	4e18      	ldr	r6, [pc, #96]	; (801bb5c <QSPI_16_R+0x68>)
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 801bafa:	4f19      	ldr	r7, [pc, #100]	; (801bb60 <QSPI_16_R+0x6c>)
	uint16_t byte=0;
 801bafc:	462c      	mov	r4, r5
		if (HAL_GPIO_ReadPin(IO0_GPIO_PORT, IO0_PIN)!=0) byte|=0x01;
 801bafe:	2102      	movs	r1, #2
 801bb00:	4630      	mov	r0, r6
 801bb02:	f7e6 fe4f 	bl	80027a4 <HAL_GPIO_ReadPin>
 801bb06:	b108      	cbz	r0, 801bb0c <QSPI_16_R+0x18>
 801bb08:	f044 0401 	orr.w	r4, r4, #1
		if (HAL_GPIO_ReadPin(IO1_GPIO_PORT, IO1_PIN)!=0) byte|=0x02;
 801bb0c:	2101      	movs	r1, #1
 801bb0e:	4630      	mov	r0, r6
 801bb10:	f7e6 fe48 	bl	80027a4 <HAL_GPIO_ReadPin>
 801bb14:	b108      	cbz	r0, 801bb1a <QSPI_16_R+0x26>
 801bb16:	f044 0402 	orr.w	r4, r4, #2
		if (HAL_GPIO_ReadPin(IO2_GPIO_PORT, IO2_PIN)!=0) byte|=0x04;
 801bb1a:	2180      	movs	r1, #128	; 0x80
 801bb1c:	4638      	mov	r0, r7
 801bb1e:	f7e6 fe41 	bl	80027a4 <HAL_GPIO_ReadPin>
 801bb22:	b108      	cbz	r0, 801bb28 <QSPI_16_R+0x34>
 801bb24:	f044 0404 	orr.w	r4, r4, #4
		if (HAL_GPIO_ReadPin(IO3_GPIO_PORT, IO3_PIN)!=0) byte|=0x08;
 801bb28:	2140      	movs	r1, #64	; 0x40
 801bb2a:	4638      	mov	r0, r7
 801bb2c:	f7e6 fe3a 	bl	80027a4 <HAL_GPIO_ReadPin>
 801bb30:	b108      	cbz	r0, 801bb36 <QSPI_16_R+0x42>
 801bb32:	f044 0408 	orr.w	r4, r4, #8
		Set(clk);
 801bb36:	2006      	movs	r0, #6
 801bb38:	f7ff feee 	bl	801b918 <Set>
		if (i<3) byte=(byte<<4);
 801bb3c:	2d03      	cmp	r5, #3
	for(uint8_t i=0; i<4; i++)
 801bb3e:	f105 0501 	add.w	r5, r5, #1
		if (i<3) byte=(byte<<4);
 801bb42:	bf18      	it	ne
 801bb44:	0124      	lslne	r4, r4, #4
		Reset(clk);
 801bb46:	f04f 0006 	mov.w	r0, #6
	for(uint8_t i=0; i<4; i++)
 801bb4a:	b2ed      	uxtb	r5, r5
		if (i<3) byte=(byte<<4);
 801bb4c:	bf18      	it	ne
 801bb4e:	b2a4      	uxthne	r4, r4
		Reset(clk);
 801bb50:	f7ff ff06 	bl	801b960 <Reset>
	for(uint8_t i=0; i<4; i++)
 801bb54:	2d04      	cmp	r5, #4
 801bb56:	d1d2      	bne.n	801bafe <QSPI_16_R+0xa>
	}
	return byte;
}
 801bb58:	4620      	mov	r0, r4
 801bb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb5c:	48000400 	.word	0x48000400
 801bb60:	48001400 	.word	0x48001400

0801bb64 <QSPI_Byte_T>:
	}
	return byte;
}
/* Send byte in quad mode */
void QSPI_Byte_T(uint8_t byte)
{
 801bb64:	b538      	push	{r3, r4, r5, lr}
 801bb66:	4604      	mov	r4, r0
 801bb68:	2502      	movs	r5, #2
	for(uint8_t i=0; i<2; i++)
	{
		if(0x80 & byte)	Set(io3);
 801bb6a:	0620      	lsls	r0, r4, #24
 801bb6c:	d502      	bpl.n	801bb74 <QSPI_Byte_T+0x10>
 801bb6e:	2004      	movs	r0, #4
 801bb70:	f7ff fed2 	bl	801b918 <Set>
		if(0x40 & byte)	Set(io2);
 801bb74:	0661      	lsls	r1, r4, #25
 801bb76:	d502      	bpl.n	801bb7e <QSPI_Byte_T+0x1a>
 801bb78:	2003      	movs	r0, #3
 801bb7a:	f7ff fecd 	bl	801b918 <Set>
		if(0x20 & byte)	Set(io1);
 801bb7e:	06a2      	lsls	r2, r4, #26
 801bb80:	d502      	bpl.n	801bb88 <QSPI_Byte_T+0x24>
 801bb82:	2002      	movs	r0, #2
 801bb84:	f7ff fec8 	bl	801b918 <Set>
		if(0x10 & byte)	Set(io0);
 801bb88:	06e3      	lsls	r3, r4, #27
 801bb8a:	d501      	bpl.n	801bb90 <QSPI_Byte_T+0x2c>
 801bb8c:	f7ff fe36 	bl	801b7fc <Set.part.0>

		Set(clk);
 801bb90:	2006      	movs	r0, #6
 801bb92:	f7ff fec1 	bl	801b918 <Set>
		Reset(io3);	Reset(io2);	Reset(io1);	Reset(io0);	
 801bb96:	2004      	movs	r0, #4
 801bb98:	f7ff fee2 	bl	801b960 <Reset>
 801bb9c:	2003      	movs	r0, #3
 801bb9e:	f7ff fedf 	bl	801b960 <Reset>
 801bba2:	2002      	movs	r0, #2
 801bba4:	f7ff fedc 	bl	801b960 <Reset>
 801bba8:	3d01      	subs	r5, #1
 801bbaa:	f7ff fe2f 	bl	801b80c <Reset.part.1>
		byte=(byte<<4);
		Reset(clk);	
 801bbae:	2006      	movs	r0, #6
		byte=(byte<<4);
 801bbb0:	0124      	lsls	r4, r4, #4
		Reset(clk);	
 801bbb2:	f7ff fed5 	bl	801b960 <Reset>
	for(uint8_t i=0; i<2; i++)
 801bbb6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		byte=(byte<<4);
 801bbba:	b2e4      	uxtb	r4, r4
	for(uint8_t i=0; i<2; i++)
 801bbbc:	d1d5      	bne.n	801bb6a <QSPI_Byte_T+0x6>
	}	
}
 801bbbe:	bd38      	pop	{r3, r4, r5, pc}

0801bbc0 <QSPI_Dummy>:
		Reset(clk);	
	}	
}
/* Dummy cycles in Quad Mode */
void QSPI_Dummy(uint8_t n) 	// n - number of dummy cycles
{
 801bbc0:	b570      	push	{r4, r5, r6, lr}
	for(uint8_t i=0; i<(n*4); i++)
	{
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 801bbc2:	4e07      	ldr	r6, [pc, #28]	; (801bbe0 <QSPI_Dummy+0x20>)
	for(uint8_t i=0; i<(n*4); i++)
 801bbc4:	0085      	lsls	r5, r0, #2
 801bbc6:	2400      	movs	r4, #0
 801bbc8:	b2e3      	uxtb	r3, r4
 801bbca:	42ab      	cmp	r3, r5
 801bbcc:	f104 0401 	add.w	r4, r4, #1
 801bbd0:	db00      	blt.n	801bbd4 <QSPI_Dummy+0x14>
	}
}
 801bbd2:	bd70      	pop	{r4, r5, r6, pc}
		HAL_GPIO_TogglePin(CLK_GPIO_PORT, CLK_PIN);
 801bbd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801bbd8:	4630      	mov	r0, r6
 801bbda:	f7e6 fdee 	bl	80027ba <HAL_GPIO_TogglePin>
 801bbde:	e7f3      	b.n	801bbc8 <QSPI_Dummy+0x8>
 801bbe0:	48001400 	.word	0x48001400

0801bbe4 <QSPI_Address>:
		arr[e]=QSPI_Byte_R();
	}
}
/* Address send in quad mode  */
void QSPI_Address(uint32_t addr)	// hasn't worked yet
{
 801bbe4:	b510      	push	{r4, lr}
 801bbe6:	4604      	mov	r4, r0
	uint8_t byte=0;
	
	for(uint8_t e=0; e<3; e++)
	{
		byte=(addr >> (8 * (2-e)));
		QSPI_Byte_T(byte);
 801bbe8:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801bbec:	f7ff ffba 	bl	801bb64 <QSPI_Byte_T>
 801bbf0:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801bbf4:	f7ff ffb6 	bl	801bb64 <QSPI_Byte_T>
 801bbf8:	b2e0      	uxtb	r0, r4
	}
}
 801bbfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		QSPI_Byte_T(byte);
 801bbfe:	f7ff bfb1 	b.w	801bb64 <QSPI_Byte_T>

0801bc02 <QSPI_Recieve_IO_16>:
	SPI_Check_Busy();
}
/* Ψ祠𳭪򨨠嬿 16 蠳2 ⩲ */
/* Read 16 bit array from memory in quad mode */
void QSPI_Recieve_IO_16(uint16_t* arr, uint32_t address, uint32_t size)		// be aware that this function reconfigurates GPIO
{
 801bc02:	b570      	push	{r4, r5, r6, lr}
 801bc04:	460c      	mov	r4, r1
 801bc06:	4615      	mov	r5, r2
 801bc08:	4606      	mov	r6, r0
	QSPI_Transmit_Init();	
 801bc0a:	f7ff fee7 	bl	801b9dc <QSPI_Transmit_Init>
	Reset(cs);
 801bc0e:	2005      	movs	r0, #5
 801bc10:	f7ff fea6 	bl	801b960 <Reset>
	SPI_Byte_T(cmd);
 801bc14:	20eb      	movs	r0, #235	; 0xeb
 801bc16:	f7ff ff1d 	bl	801ba54 <SPI_Byte_T>
	SPI_Instruction(fastread_quad_io);
	QSPI_Address(address);
 801bc1a:	4620      	mov	r0, r4
 801bc1c:	f7ff ffe2 	bl	801bbe4 <QSPI_Address>
	QSPI_Dummy(3);	
 801bc20:	2003      	movs	r0, #3
 801bc22:	f7ff ffcd 	bl	801bbc0 <QSPI_Dummy>
	
	QSPI_Recieve_Init();
 801bc26:	f7ff febf 	bl	801b9a8 <QSPI_Recieve_Init>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 801bc2a:	2400      	movs	r4, #0
 801bc2c:	42ac      	cmp	r4, r5
 801bc2e:	d108      	bne.n	801bc42 <QSPI_Recieve_IO_16+0x40>
	Set(cs);
 801bc30:	2005      	movs	r0, #5
 801bc32:	f7ff fe71 	bl	801b918 <Set>

	Single_Mode();
 801bc36:	f7ff feeb 	bl	801ba10 <Single_Mode>
	SPI_Check_Busy();
}
 801bc3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	SPI_Check_Busy();
 801bc3e:	f7ff bf4e 	b.w	801bade <SPI_Check_Busy>
	for(uint32_t e=0; e<size; e++) arr[e]=QSPI_16_R();
 801bc42:	f7ff ff57 	bl	801baf4 <QSPI_16_R>
 801bc46:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
 801bc4a:	3401      	adds	r4, #1
 801bc4c:	e7ee      	b.n	801bc2c <QSPI_Recieve_IO_16+0x2a>
	...

0801bc50 <Image_load>:
void Image_load(uint32_t address, uint32_t size){
 801bc50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bc54:	f5ad 6d2f 	sub.w	sp, sp, #2800	; 0xaf0
 801bc58:	4680      	mov	r8, r0
 801bc5a:	460f      	mov	r7, r1
	uint16_t buff[1400] = {0};
 801bc5c:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 801bc60:	2100      	movs	r1, #0
 801bc62:	4668      	mov	r0, sp
 801bc64:	f006 f88b 	bl	8021d7e <memset>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 801bc68:	f8df 9040 	ldr.w	r9, [pc, #64]	; 801bcac <Image_load+0x5c>
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 801bc6c:	2400      	movs	r4, #0
 801bc6e:	f44f 66af 	mov.w	r6, #1400	; 0x578
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 801bc72:	f44f 6a30 	mov.w	sl, #2816	; 0xb00
	for (uint32_t pn = 0; pn < size; pn=pn+0x578){
 801bc76:	fb06 f304 	mul.w	r3, r6, r4
 801bc7a:	429f      	cmp	r7, r3
 801bc7c:	d803      	bhi.n	801bc86 <Image_load+0x36>
}
 801bc7e:	f50d 6d2f 	add.w	sp, sp, #2800	; 0xaf0
 801bc82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			QSPI_Recieve_IO_16(buff, address+q*0x0B00, (sizeof(buff)/2));
 801bc86:	b2a5      	uxth	r5, r4
 801bc88:	f44f 62af 	mov.w	r2, #1400	; 0x578
 801bc8c:	fb0a 8105 	mla	r1, sl, r5, r8
 801bc90:	4668      	mov	r0, sp
 801bc92:	f7ff ffb6 	bl	801bc02 <QSPI_Recieve_IO_16>
			memcpy(&bmp[0+q*1400], buff, sizeof(buff));
 801bc96:	fb06 f005 	mul.w	r0, r6, r5
 801bc9a:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 801bc9e:	4669      	mov	r1, sp
 801bca0:	eb09 0040 	add.w	r0, r9, r0, lsl #1
 801bca4:	f006 f860 	bl	8021d68 <memcpy>
 801bca8:	3401      	adds	r4, #1
 801bcaa:	e7e4      	b.n	801bc76 <Image_load+0x26>
 801bcac:	20050bee 	.word	0x20050bee

0801bcb0 <Rabs_calc_Factor2_Settings_change>:
#include "Rabs_math.h"

float Rabs_calc_Factor2_Settings_change(float Kt, float P)
{
	return Kt * P;
}
 801bcb0:	ee20 0a20 	vmul.f32	s0, s0, s1
 801bcb4:	4770      	bx	lr
	...

0801bcb8 <Rabs_calc_Factor1>:

float Rabs_calc_Factor1(uint16_t Rdark, float Lt, uint16_t R_data[])
{
 801bcb8:	b538      	push	{r3, r4, r5, lr}
	uint32_t sum = 0;
	float Kl = 0;
	
	Kl = Lt/100.00;
 801bcba:	eddf 7a17 	vldr	s15, [pc, #92]	; 801bd18 <Rabs_calc_Factor1+0x60>
{
 801bcbe:	ed2d 8b02 	vpush	{d8}
	Kl = Lt/100.00;
 801bcc2:	ee80 8a27 	vdiv.f32	s16, s0, s15
 801bcc6:	1e8a      	subs	r2, r1, #2
	uint32_t sum = 0;
 801bcc8:	2300      	movs	r3, #0
 801bcca:	f201 71fe 	addw	r1, r1, #2046	; 0x7fe
	for (uint16_t i = 0; i < 1024; i++)
	{
		sum = sum + (R_data[i] - Rdark);
 801bcce:	f832 4f02 	ldrh.w	r4, [r2, #2]!
 801bcd2:	1a24      	subs	r4, r4, r0
	for (uint16_t i = 0; i < 1024; i++)
 801bcd4:	4291      	cmp	r1, r2
		sum = sum + (R_data[i] - Rdark);
 801bcd6:	4423      	add	r3, r4
	for (uint16_t i = 0; i < 1024; i++)
 801bcd8:	d1f9      	bne.n	801bcce <Rabs_calc_Factor1+0x16>
	}
	return Kl*(((float)sum)/1024.00);
 801bcda:	ee07 3a90 	vmov	s15, r3
 801bcde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bce2:	ee17 0a90 	vmov	r0, s15
 801bce6:	f7e4 fc3f 	bl	8000568 <__aeabi_f2d>
 801bcea:	2200      	movs	r2, #0
 801bcec:	4b0b      	ldr	r3, [pc, #44]	; (801bd1c <Rabs_calc_Factor1+0x64>)
 801bcee:	f7e4 fc8f 	bl	8000610 <__aeabi_dmul>
 801bcf2:	4604      	mov	r4, r0
 801bcf4:	ee18 0a10 	vmov	r0, s16
 801bcf8:	460d      	mov	r5, r1
 801bcfa:	f7e4 fc35 	bl	8000568 <__aeabi_f2d>
 801bcfe:	4602      	mov	r2, r0
 801bd00:	460b      	mov	r3, r1
 801bd02:	4620      	mov	r0, r4
 801bd04:	4629      	mov	r1, r5
 801bd06:	f7e4 fc83 	bl	8000610 <__aeabi_dmul>
 801bd0a:	f7e4 ff79 	bl	8000c00 <__aeabi_d2f>
}
 801bd0e:	ecbd 8b02 	vpop	{d8}
 801bd12:	ee00 0a10 	vmov	s0, r0
 801bd16:	bd38      	pop	{r3, r4, r5, pc}
 801bd18:	42c80000 	.word	0x42c80000
 801bd1c:	3f500000 	.word	0x3f500000

0801bd20 <Rabs_calc_main>:
//		
//		r--;
//	}
//}
void Rabs_calc_main(uint16_t R_data[], uint16_t Rdark, float Factor1, float Factor2, float Sn[], float Rabs[])
{	
 801bd20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd22:	3802      	subs	r0, #2
 801bd24:	f640 75fc 	movw	r5, #4092	; 0xffc
	
	for (uint16_t i = 0; i < 1024; i++)
	{
		if(R_data[i] - Rdark <= Factor1)
		{
			Rabs[1023-i] = 0;
 801bd28:	2700      	movs	r7, #0
		if(R_data[i] - Rdark <= Factor1)
 801bd2a:	f830 4f02 	ldrh.w	r4, [r0, #2]!
 801bd2e:	1a64      	subs	r4, r4, r1
 801bd30:	ee07 4a90 	vmov	s15, r4
 801bd34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd38:	195e      	adds	r6, r3, r5
 801bd3a:	eef4 7ac0 	vcmpe.f32	s15, s0
 801bd3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		} else
		{
			Rabs[1023-i] = (R_data[i] - Rdark)*Factor2*(Sn[r]);
 801bd42:	bf83      	ittte	hi
 801bd44:	1954      	addhi	r4, r2, r5
 801bd46:	ee67 7aa0 	vmulhi.f32	s15, s15, s1
 801bd4a:	ed94 7a00 	vldrhi	s14, [r4]
			Rabs[1023-i] = 0;
 801bd4e:	6037      	strls	r7, [r6, #0]
			Rabs[1023-i] = (R_data[i] - Rdark)*Factor2*(Sn[r]);
 801bd50:	bf88      	it	hi
 801bd52:	ee67 7a27 	vmulhi.f32	s15, s14, s15
 801bd56:	f1a5 0504 	sub.w	r5, r5, #4
 801bd5a:	bf88      	it	hi
 801bd5c:	edc6 7a00 	vstrhi	s15, [r6]
	for (uint16_t i = 0; i < 1024; i++)
 801bd60:	1d2c      	adds	r4, r5, #4
 801bd62:	d1e2      	bne.n	801bd2a <Rabs_calc_main+0xa>
//			Rabs[1023-i] = 0;
//		} 
		
		r--;
	}
}
 801bd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801bd68 <Rabs_find_MAX>:
	return Factor3*Factor2;
}

float Rabs_find_MAX(float Rabs[], uint8_t direction)
{	
	uint8_t    step = (direction == 0x00)? 4 :3;
 801bd68:	2900      	cmp	r1, #0

	float max = 0;
 801bd6a:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801bd9c <Rabs_find_MAX+0x34>

	for (uint16_t i = 1023; i >= step; i-=step)
 801bd6e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801bd72:	bf0c      	ite	eq
 801bd74:	2204      	moveq	r2, #4
 801bd76:	2203      	movne	r2, #3
 801bd78:	4293      	cmp	r3, r2
 801bd7a:	d200      	bcs.n	801bd7e <Rabs_find_MAX+0x16>
	{
		max = Rabs[i] > max ? Rabs[i] : max;
	}
	return max;
}
 801bd7c:	4770      	bx	lr
		max = Rabs[i] > max ? Rabs[i] : max;
 801bd7e:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801bd82:	edd1 7a00 	vldr	s15, [r1]
 801bd86:	eeb4 0a67 	vcmp.f32	s0, s15
 801bd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd8e:	eba3 0302 	sub.w	r3, r3, r2
 801bd92:	bf48      	it	mi
 801bd94:	eeb0 0a67 	vmovmi.f32	s0, s15
 801bd98:	b29b      	uxth	r3, r3
 801bd9a:	e7ed      	b.n	801bd78 <Rabs_find_MAX+0x10>
 801bd9c:	00000000 	.word	0x00000000

0801bda0 <Rabs_find_MAX_all>:

float Rabs_find_MAX_all(float Rabs[])
{	
	float max = 0;
 801bda0:	ed9f 0a07 	vldr	s0, [pc, #28]	; 801bdc0 <Rabs_find_MAX_all+0x20>
 801bda4:	f500 5380 	add.w	r3, r0, #4096	; 0x1000

	for (uint16_t i = 0; i < 1024; i++)
	{
		max = Rabs[i] > max ? Rabs[i] : max;
 801bda8:	ecf0 7a01 	vldmia	r0!, {s15}
 801bdac:	eef4 7a40 	vcmp.f32	s15, s0
 801bdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdb4:	bfc8      	it	gt
 801bdb6:	eeb0 0a67 	vmovgt.f32	s0, s15
	for (uint16_t i = 0; i < 1024; i++)
 801bdba:	4298      	cmp	r0, r3
 801bdbc:	d1f4      	bne.n	801bda8 <Rabs_find_MAX_all+0x8>
	}
	return max;
 801bdbe:	4770      	bx	lr
 801bdc0:	00000000 	.word	0x00000000

0801bdc4 <WriteSDFLASH_t>:
char buffer_sd[11];

FLASH_EraseInitTypeDef EraseInitStruct3;

void WriteSDFLASH_t(uint64_t filenum)
{
 801bdc4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bdc8:	4c52      	ldr	r4, [pc, #328]	; (801bf14 <WriteSDFLASH_t+0x150>)
uint32_t PAGEError = 0;
 801bdca:	f10d 0808 	add.w	r8, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bdce:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 801bdd2:	f04f 0900 	mov.w	r9, #0
 801bdd6:	f848 9d04 	str.w	r9, [r8, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bdda:	6125      	str	r5, [r4, #16]
{
 801bddc:	460f      	mov	r7, r1
 801bdde:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 801bde0:	f7e6 f9e2 	bl	80021a8 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 801bde4:	f7e6 f9e0 	bl	80021a8 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bde8:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 801bdea:	2064      	movs	r0, #100	; 0x64
 801bdec:	f7e5 f916 	bl	800101c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801bdf0:	4849      	ldr	r0, [pc, #292]	; (801bf18 <WriteSDFLASH_t+0x154>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 801bdf2:	2302      	movs	r3, #2
 801bdf4:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)43;
 801bdf6:	232b      	movs	r3, #43	; 0x2b
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801bdf8:	4641      	mov	r1, r8
		EraseInitStruct3.Page = (uint32_t)43;
 801bdfa:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 801bdfc:	2301      	movs	r3, #1
 801bdfe:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801be00:	f8c0 9000 	str.w	r9, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801be04:	f7e6 faea 	bl	80023dc <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 801be08:	2032      	movs	r0, #50	; 0x32
 801be0a:	f7e5 f907 	bl	800101c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be0e:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 801be10:	f7e6 f9dc 	bl	80021cc <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 801be14:	f7e6 f9c8 	bl	80021a8 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be18:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)FILENUMBER, filenum);
 801be1a:	4d40      	ldr	r5, [pc, #256]	; (801bf1c <WriteSDFLASH_t+0x158>)
 801be1c:	4632      	mov	r2, r6
 801be1e:	463b      	mov	r3, r7
 801be20:	4629      	mov	r1, r5
 801be22:	2000      	movs	r0, #0
 801be24:	f7e6 fa1a 	bl	800225c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801be28:	2800      	cmp	r0, #0
 801be2a:	d1f7      	bne.n	801be1c <WriteSDFLASH_t+0x58>
					}

				flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801be30:	6123      	str	r3, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MODEEL, Mode_EL);
 801be32:	4d3b      	ldr	r5, [pc, #236]	; (801bf20 <WriteSDFLASH_t+0x15c>)
 801be34:	4c3b      	ldr	r4, [pc, #236]	; (801bf24 <WriteSDFLASH_t+0x160>)
 801be36:	782a      	ldrb	r2, [r5, #0]
 801be38:	2300      	movs	r3, #0
 801be3a:	4621      	mov	r1, r4
 801be3c:	2000      	movs	r0, #0
 801be3e:	f7e6 fa0d 	bl	800225c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801be42:	2800      	cmp	r0, #0
 801be44:	d1f7      	bne.n	801be36 <WriteSDFLASH_t+0x72>
					}
						
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be46:	4b33      	ldr	r3, [pc, #204]	; (801bf14 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 801be48:	4d37      	ldr	r5, [pc, #220]	; (801bf28 <WriteSDFLASH_t+0x164>)
 801be4a:	4c38      	ldr	r4, [pc, #224]	; (801bf2c <WriteSDFLASH_t+0x168>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be4c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801be50:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_MEASUREFIELD, Measure_Field);
 801be52:	882a      	ldrh	r2, [r5, #0]
 801be54:	2300      	movs	r3, #0
 801be56:	4621      	mov	r1, r4
 801be58:	2000      	movs	r0, #0
 801be5a:	f7e6 f9ff 	bl	800225c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801be5e:	2800      	cmp	r0, #0
 801be60:	d1f7      	bne.n	801be52 <WriteSDFLASH_t+0x8e>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be62:	4b2c      	ldr	r3, [pc, #176]	; (801bf14 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 801be64:	4d32      	ldr	r5, [pc, #200]	; (801bf30 <WriteSDFLASH_t+0x16c>)
 801be66:	4c33      	ldr	r4, [pc, #204]	; (801bf34 <WriteSDFLASH_t+0x170>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801be6c:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_GRAPHFIELD, Graph_Field);
 801be6e:	782a      	ldrb	r2, [r5, #0]
 801be70:	2300      	movs	r3, #0
 801be72:	4621      	mov	r1, r4
 801be74:	2000      	movs	r0, #0
 801be76:	f7e6 f9f1 	bl	800225c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801be7a:	2800      	cmp	r0, #0
 801be7c:	d1f7      	bne.n	801be6e <WriteSDFLASH_t+0xaa>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be7e:	4b25      	ldr	r3, [pc, #148]	; (801bf14 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 801be80:	4d2d      	ldr	r5, [pc, #180]	; (801bf38 <WriteSDFLASH_t+0x174>)
 801be82:	4c2e      	ldr	r4, [pc, #184]	; (801bf3c <WriteSDFLASH_t+0x178>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801be88:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORFIELD, Color_Field);
 801be8a:	782a      	ldrb	r2, [r5, #0]
 801be8c:	2300      	movs	r3, #0
 801be8e:	4621      	mov	r1, r4
 801be90:	2000      	movs	r0, #0
 801be92:	f7e6 f9e3 	bl	800225c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801be96:	2800      	cmp	r0, #0
 801be98:	d1f7      	bne.n	801be8a <WriteSDFLASH_t+0xc6>
							}
						flash_ok = HAL_ERROR;
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801be9a:	4b1e      	ldr	r3, [pc, #120]	; (801bf14 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 801be9c:	4d28      	ldr	r5, [pc, #160]	; (801bf40 <WriteSDFLASH_t+0x17c>)
 801be9e:	4c29      	ldr	r4, [pc, #164]	; (801bf44 <WriteSDFLASH_t+0x180>)
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bea0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801bea4:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_COLORRENDFIELD, Color_rend_Field);
 801bea6:	782a      	ldrb	r2, [r5, #0]
 801bea8:	2300      	movs	r3, #0
 801beaa:	4621      	mov	r1, r4
 801beac:	2000      	movs	r0, #0
 801beae:	f7e6 f9d5 	bl	800225c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801beb2:	2800      	cmp	r0, #0
 801beb4:	d1f7      	bne.n	801bea6 <WriteSDFLASH_t+0xe2>
						}
						flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801beb6:	4b17      	ldr	r3, [pc, #92]	; (801bf14 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 801beb8:	4d23      	ldr	r5, [pc, #140]	; (801bf48 <WriteSDFLASH_t+0x184>)
 801beba:	4c24      	ldr	r4, [pc, #144]	; (801bf4c <WriteSDFLASH_t+0x188>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bebc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801bec0:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_LANGUAGE, Language_status);
 801bec2:	782a      	ldrb	r2, [r5, #0]
 801bec4:	2300      	movs	r3, #0
 801bec6:	4621      	mov	r1, r4
 801bec8:	2000      	movs	r0, #0
 801beca:	f7e6 f9c7 	bl	800225c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801bece:	2800      	cmp	r0, #0
 801bed0:	d1f7      	bne.n	801bec2 <WriteSDFLASH_t+0xfe>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bed2:	4b10      	ldr	r3, [pc, #64]	; (801bf14 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 801bed4:	4d1e      	ldr	r5, [pc, #120]	; (801bf50 <WriteSDFLASH_t+0x18c>)
 801bed6:	4c1f      	ldr	r4, [pc, #124]	; (801bf54 <WriteSDFLASH_t+0x190>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bed8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801bedc:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_SOURCETYPE, Source_Type);
 801bede:	782a      	ldrb	r2, [r5, #0]
 801bee0:	2300      	movs	r3, #0
 801bee2:	4621      	mov	r1, r4
 801bee4:	2000      	movs	r0, #0
 801bee6:	f7e6 f9b9 	bl	800225c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801beea:	2800      	cmp	r0, #0
 801beec:	d1f7      	bne.n	801bede <WriteSDFLASH_t+0x11a>
					}
					flash_ok = HAL_ERROR;
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801beee:	4b09      	ldr	r3, [pc, #36]	; (801bf14 <WriteSDFLASH_t+0x150>)
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 801bef0:	4d19      	ldr	r5, [pc, #100]	; (801bf58 <WriteSDFLASH_t+0x194>)
 801bef2:	4c1a      	ldr	r4, [pc, #104]	; (801bf5c <WriteSDFLASH_t+0x198>)
					__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bef4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801bef8:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SET_BLUETOOTH, Bluetooth);
 801befa:	782a      	ldrb	r2, [r5, #0]
 801befc:	2300      	movs	r3, #0
 801befe:	4621      	mov	r1, r4
 801bf00:	2000      	movs	r0, #0
 801bf02:	f7e6 f9ab 	bl	800225c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801bf06:	2800      	cmp	r0, #0
 801bf08:	d1f7      	bne.n	801befa <WriteSDFLASH_t+0x136>
					}
						HAL_FLASH_Lock();
 801bf0a:	f7e6 f95f 	bl	80021cc <HAL_FLASH_Lock>
}
 801bf0e:	b003      	add	sp, #12
 801bf10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf14:	40022000 	.word	0x40022000
 801bf18:	2008d870 	.word	0x2008d870
 801bf1c:	0812b020 	.word	0x0812b020
 801bf20:	20000a48 	.word	0x20000a48
 801bf24:	0812b030 	.word	0x0812b030
 801bf28:	20004c76 	.word	0x20004c76
 801bf2c:	0812b038 	.word	0x0812b038
 801bf30:	20004c72 	.word	0x20004c72
 801bf34:	0812b040 	.word	0x0812b040
 801bf38:	20004c6f 	.word	0x20004c6f
 801bf3c:	0812b048 	.word	0x0812b048
 801bf40:	20004c70 	.word	0x20004c70
 801bf44:	0812b050 	.word	0x0812b050
 801bf48:	20004c73 	.word	0x20004c73
 801bf4c:	0812b058 	.word	0x0812b058
 801bf50:	2008bce9 	.word	0x2008bce9
 801bf54:	0812b060 	.word	0x0812b060
 801bf58:	2008bcea 	.word	0x2008bcea
 801bf5c:	0812b068 	.word	0x0812b068

0801bf60 <WriteFLASH_Screen>:


void WriteFLASH_Screen(uint8_t Screen)
{
 801bf60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	
uint32_t PAGEError = 0;
HAL_StatusTypeDef	flash_ok = HAL_ERROR;

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bf64:	4c1b      	ldr	r4, [pc, #108]	; (801bfd4 <WriteFLASH_Screen+0x74>)
uint32_t PAGEError = 0;
 801bf66:	af02      	add	r7, sp, #8
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bf68:	f44f 4500 	mov.w	r5, #32768	; 0x8000
uint32_t PAGEError = 0;
 801bf6c:	f04f 0800 	mov.w	r8, #0
 801bf70:	f847 8d04 	str.w	r8, [r7, #-4]!
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bf74:	6125      	str	r5, [r4, #16]
{
 801bf76:	4606      	mov	r6, r0
		HAL_FLASH_Unlock();
 801bf78:	f7e6 f916 	bl	80021a8 <HAL_FLASH_Unlock>
		HAL_FLASH_Unlock();
 801bf7c:	f7e6 f914 	bl	80021a8 <HAL_FLASH_Unlock>
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bf80:	6125      	str	r5, [r4, #16]
		HAL_Delay(100);
 801bf82:	2064      	movs	r0, #100	; 0x64
 801bf84:	f7e5 f84a 	bl	800101c <HAL_Delay>
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801bf88:	4813      	ldr	r0, [pc, #76]	; (801bfd8 <WriteFLASH_Screen+0x78>)
		EraseInitStruct3.Banks = FLASH_BANK_2; 
 801bf8a:	2302      	movs	r3, #2
 801bf8c:	6043      	str	r3, [r0, #4]
		EraseInitStruct3.Page = (uint32_t)44;
 801bf8e:	232c      	movs	r3, #44	; 0x2c
		EraseInitStruct3.NbPages = (uint32_t)0x1; 

	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801bf90:	4639      	mov	r1, r7
		EraseInitStruct3.Page = (uint32_t)44;
 801bf92:	6083      	str	r3, [r0, #8]
		EraseInitStruct3.NbPages = (uint32_t)0x1; 
 801bf94:	2301      	movs	r3, #1
 801bf96:	60c3      	str	r3, [r0, #12]
		EraseInitStruct3.TypeErase = FLASH_TYPEERASE_PAGES;
 801bf98:	f8c0 8000 	str.w	r8, [r0]
	 HAL_FLASHEx_Erase(&EraseInitStruct3, &PAGEError);
 801bf9c:	f7e6 fa1e 	bl	80023dc <HAL_FLASHEx_Erase>

	HAL_Delay(50);
 801bfa0:	2032      	movs	r0, #50	; 0x32
 801bfa2:	f7e5 f83b 	bl	800101c <HAL_Delay>

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bfa6:	6125      	str	r5, [r4, #16]
		HAL_FLASH_Lock();
 801bfa8:	f7e6 f910 	bl	80021cc <HAL_FLASH_Lock>
			flash_ok = HAL_ERROR;
						HAL_FLASH_Unlock();
 801bfac:	f7e6 f8fc 	bl	80021a8 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801bfb0:	6125      	str	r5, [r4, #16]
						while(flash_ok != HAL_OK){
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)SCREENADDR, Screen);
 801bfb2:	b2f4      	uxtb	r4, r6
 801bfb4:	4e09      	ldr	r6, [pc, #36]	; (801bfdc <WriteFLASH_Screen+0x7c>)
 801bfb6:	2500      	movs	r5, #0
 801bfb8:	4622      	mov	r2, r4
 801bfba:	462b      	mov	r3, r5
 801bfbc:	4631      	mov	r1, r6
 801bfbe:	2000      	movs	r0, #0
 801bfc0:	f7e6 f94c 	bl	800225c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801bfc4:	2800      	cmp	r0, #0
 801bfc6:	d1f7      	bne.n	801bfb8 <WriteFLASH_Screen+0x58>
					}
		HAL_FLASH_Lock();
 801bfc8:	f7e6 f900 	bl	80021cc <HAL_FLASH_Lock>
}
 801bfcc:	b002      	add	sp, #8
 801bfce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bfd2:	bf00      	nop
 801bfd4:	40022000 	.word	0x40022000
 801bfd8:	2008d870 	.word	0x2008d870
 801bfdc:	0812c020 	.word	0x0812c020

0801bfe0 <Calculate_SD_Data>:


void Calculate_SD_Data()
{
 801bfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	SDWr_Status_bar = 0;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801bfe2:	4c5b      	ldr	r4, [pc, #364]	; (801c150 <Calculate_SD_Data+0x170>)
	SDWr_Status_bar = 0;
 801bfe4:	4e5b      	ldr	r6, [pc, #364]	; (801c154 <Calculate_SD_Data+0x174>)
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801bfe6:	4d5c      	ldr	r5, [pc, #368]	; (801c158 <Calculate_SD_Data+0x178>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801bfe8:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 801c15c <Calculate_SD_Data+0x17c>
	Calculate_xy1931(colorimetry_XYZ1931);
 801bfec:	4f5c      	ldr	r7, [pc, #368]	; (801c160 <Calculate_SD_Data+0x180>)
	SDWr_Status_bar = 0;
 801bfee:	2200      	movs	r2, #0
 801bff0:	2300      	movs	r3, #0
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801bff2:	f44f 718c 	mov.w	r1, #280	; 0x118
 801bff6:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0;
 801bff8:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801bffc:	f7f9 fb46 	bl	801568c <GUI_Bar_Measure>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801c000:	462a      	mov	r2, r5
 801c002:	4b58      	ldr	r3, [pc, #352]	; (801c164 <Calculate_SD_Data+0x184>)
 801c004:	4958      	ldr	r1, [pc, #352]	; (801c168 <Calculate_SD_Data+0x188>)
 801c006:	4620      	mov	r0, r4
 801c008:	f7f2 f888 	bl	800e11c <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801c00c:	4638      	mov	r0, r7
 801c00e:	f7f2 f8f1 	bl	800e1f4 <Calculate_xy1931>
	Calculate_uv1976(colorimetry_xy1931);
 801c012:	4856      	ldr	r0, [pc, #344]	; (801c16c <Calculate_SD_Data+0x18c>)
 801c014:	f7f2 f930 	bl	800e278 <Calculate_uv1976>
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801c018:	4b55      	ldr	r3, [pc, #340]	; (801c170 <Calculate_SD_Data+0x190>)
 801c01a:	781a      	ldrb	r2, [r3, #0]
 801c01c:	4b55      	ldr	r3, [pc, #340]	; (801c174 <Calculate_SD_Data+0x194>)
 801c01e:	4638      	mov	r0, r7
 801c020:	7819      	ldrb	r1, [r3, #0]
	
	SDWr_Status_bar = 0.1;
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
	delta_Eab_Measure = Calculate_deltaEab();
	
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c022:	4f55      	ldr	r7, [pc, #340]	; (801c178 <Calculate_SD_Data+0x198>)
	Calculate_Lab(colorimetry_XYZ1931, Measure_Color_xy, Source_Type);
 801c024:	f7f2 fae8 	bl	800e5f8 <Calculate_Lab>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801c028:	4620      	mov	r0, r4
 801c02a:	2101      	movs	r1, #1
 801c02c:	f7f2 f948 	bl	800e2c0 <Calculate_Tc>
 801c030:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801c034:	4b51      	ldr	r3, [pc, #324]	; (801c17c <Calculate_SD_Data+0x19c>)
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c036:	ed9f 0a52 	vldr	s0, [pc, #328]	; 801c180 <Calculate_SD_Data+0x1a0>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, 1);
 801c03a:	ee17 2a90 	vmov	r2, s15
 801c03e:	801a      	strh	r2, [r3, #0]
	SDWr_Status_bar = 0.1;
 801c040:	a33d      	add	r3, pc, #244	; (adr r3, 801c138 <Calculate_SD_Data+0x158>)
 801c042:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c046:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c04a:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.1;
 801c04c:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c050:	f7f9 fb1c 	bl	801568c <GUI_Bar_Measure>
	delta_Eab_Measure = Calculate_deltaEab();
 801c054:	f7f2 fd10 	bl	800ea78 <Calculate_deltaEab>
 801c058:	4b4a      	ldr	r3, [pc, #296]	; (801c184 <Calculate_SD_Data+0x1a4>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c05a:	4629      	mov	r1, r5
	delta_Eab_Measure = Calculate_deltaEab();
 801c05c:	8018      	strh	r0, [r3, #0]
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c05e:	4620      	mov	r0, r4
 801c060:	f7f1 fee0 	bl	800de24 <Calculate_EL_Day>
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801c064:	4620      	mov	r0, r4
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801c066:	4d48      	ldr	r5, [pc, #288]	; (801c188 <Calculate_SD_Data+0x1a8>)
	E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801c068:	ed87 0a00 	vstr	s0, [r7]
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801c06c:	f7f1 fefa 	bl	800de64 <Calculate_EL_Day_Wt>
 801c070:	4b46      	ldr	r3, [pc, #280]	; (801c18c <Calculate_SD_Data+0x1ac>)
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801c072:	4629      	mov	r1, r5
 801c074:	4620      	mov	r0, r4
	E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);
 801c076:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801c07a:	f7f1 ff39 	bl	800def0 <Calculate_PPFD_PPL>
 801c07e:	4b44      	ldr	r3, [pc, #272]	; (801c190 <Calculate_SD_Data+0x1b0>)
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801c080:	4629      	mov	r1, r5
 801c082:	4620      	mov	r0, r4
 801c084:	2200      	movs	r2, #0
	PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));
 801c086:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801c08a:	f7f1 ff6d 	bl	800df68 <Calculate_PPFD_PPL_Range>
 801c08e:	4b41      	ldr	r3, [pc, #260]	; (801c194 <Calculate_SD_Data+0x1b4>)
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801c090:	4629      	mov	r1, r5
 801c092:	4620      	mov	r0, r4
 801c094:	2201      	movs	r2, #1
	PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));
 801c096:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801c09a:	f7f1 ff65 	bl	800df68 <Calculate_PPFD_PPL_Range>
 801c09e:	4b3e      	ldr	r3, [pc, #248]	; (801c198 <Calculate_SD_Data+0x1b8>)
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801c0a0:	4629      	mov	r1, r5
 801c0a2:	4620      	mov	r0, r4
 801c0a4:	2202      	movs	r2, #2
	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));
 801c0a6:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801c0aa:	f7f1 ff5d 	bl	800df68 <Calculate_PPFD_PPL_Range>
 801c0ae:	4b3b      	ldr	r3, [pc, #236]	; (801c19c <Calculate_SD_Data+0x1bc>)
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 801c0b0:	4629      	mov	r1, r5
 801c0b2:	4620      	mov	r0, r4
 801c0b4:	2203      	movs	r2, #3
	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));
 801c0b6:	ed83 0a00 	vstr	s0, [r3]
	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));
 801c0ba:	f7f1 ff55 	bl	800df68 <Calculate_PPFD_PPL_Range>
 801c0be:	4b38      	ldr	r3, [pc, #224]	; (801c1a0 <Calculate_SD_Data+0x1c0>)
 801c0c0:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.3;
 801c0c4:	a31e      	add	r3, pc, #120	; (adr r3, 801c140 <Calculate_SD_Data+0x160>)
 801c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c0ca:	ed9f 0a36 	vldr	s0, [pc, #216]	; 801c1a4 <Calculate_SD_Data+0x1c4>
 801c0ce:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c0d2:	2055      	movs	r0, #85	; 0x55
	SDWr_Status_bar = 0.3;
 801c0d4:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c0d8:	f7f9 fad8 	bl	801568c <GUI_Bar_Measure>
	E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801c0dc:	4620      	mov	r0, r4
 801c0de:	4932      	ldr	r1, [pc, #200]	; (801c1a8 <Calculate_SD_Data+0x1c8>)
 801c0e0:	f7f1 fed8 	bl	800de94 <Calculate_EL_Night>
 801c0e4:	4b31      	ldr	r3, [pc, #196]	; (801c1ac <Calculate_SD_Data+0x1cc>)
 801c0e6:	eef0 0a40 	vmov.f32	s1, s0
 801c0ea:	ed83 0a00 	vstr	s0, [r3]
	SP_Measure = (Calculate_SP(E_day, E_Night));
 801c0ee:	ed97 0a00 	vldr	s0, [r7]
 801c0f2:	f7f1 feef 	bl	800ded4 <Calculate_SP>
 801c0f6:	4b2e      	ldr	r3, [pc, #184]	; (801c1b0 <Calculate_SD_Data+0x1d0>)
	
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801c0f8:	492e      	ldr	r1, [pc, #184]	; (801c1b4 <Calculate_SD_Data+0x1d4>)
	SP_Measure = (Calculate_SP(E_day, E_Night));
 801c0fa:	ed83 0a00 	vstr	s0, [r3]
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801c0fe:	4620      	mov	r0, r4
 801c100:	f7f1 ffbc 	bl	800e07c <Calculate_ELr>
 801c104:	4b2c      	ldr	r3, [pc, #176]	; (801c1b8 <Calculate_SD_Data+0x1d8>)
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 801c106:	492d      	ldr	r1, [pc, #180]	; (801c1bc <Calculate_SD_Data+0x1dc>)
	ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801c108:	ed83 0a00 	vstr	s0, [r3]
	ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);
 801c10c:	4620      	mov	r0, r4
 801c10e:	f7f1 ff9b 	bl	800e048 <Calculate_ELb>
 801c112:	4b2b      	ldr	r3, [pc, #172]	; (801c1c0 <Calculate_SD_Data+0x1e0>)
 801c114:	ed83 0a00 	vstr	s0, [r3]
	
	SDWr_Status_bar = 0.4;
 801c118:	a30b      	add	r3, pc, #44	; (adr r3, 801c148 <Calculate_SD_Data+0x168>)
 801c11a:	e9d3 2300 	ldrd	r2, r3, [r3]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c11e:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801c1c4 <Calculate_SD_Data+0x1e4>
	SDWr_Status_bar = 0.4;
 801c122:	e9c6 2300 	strd	r2, r3, [r6]
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c126:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c12a:	2055      	movs	r0, #85	; 0x55
}
 801c12c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c130:	f7f9 baac 	b.w	801568c <GUI_Bar_Measure>
 801c134:	f3af 8000 	nop.w
 801c138:	9999999a 	.word	0x9999999a
 801c13c:	3fb99999 	.word	0x3fb99999
 801c140:	33333333 	.word	0x33333333
 801c144:	3fd33333 	.word	0x3fd33333
 801c148:	9999999a 	.word	0x9999999a
 801c14c:	3fd99999 	.word	0x3fd99999
 801c150:	200077dc 	.word	0x200077dc
 801c154:	20004cc8 	.word	0x20004cc8
 801c158:	2004dbe0 	.word	0x2004dbe0
 801c15c:	00000000 	.word	0x00000000
 801c160:	2008a7be 	.word	0x2008a7be
 801c164:	200887b0 	.word	0x200887b0
 801c168:	200857b0 	.word	0x200857b0
 801c16c:	2008a7dc 	.word	0x2008a7dc
 801c170:	2008bce9 	.word	0x2008bce9
 801c174:	20004c74 	.word	0x20004c74
 801c178:	20090edc 	.word	0x20090edc
 801c17c:	2004fbe0 	.word	0x2004fbe0
 801c180:	3dcccccd 	.word	0x3dcccccd
 801c184:	2008bce6 	.word	0x2008bce6
 801c188:	2004fbe4 	.word	0x2004fbe4
 801c18c:	20090948 	.word	0x20090948
 801c190:	20090950 	.word	0x20090950
 801c194:	20090a34 	.word	0x20090a34
 801c198:	20090db8 	.word	0x20090db8
 801c19c:	20090cf4 	.word	0x20090cf4
 801c1a0:	2009094c 	.word	0x2009094c
 801c1a4:	3e99999a 	.word	0x3e99999a
 801c1a8:	2004ebe0 	.word	0x2004ebe0
 801c1ac:	2009093c 	.word	0x2009093c
 801c1b0:	20090a30 	.word	0x20090a30
 801c1b4:	20005fd8 	.word	0x20005fd8
 801c1b8:	20090ed8 	.word	0x20090ed8
 801c1bc:	20004fd8 	.word	0x20004fd8
 801c1c0:	20090ed4 	.word	0x20090ed4
 801c1c4:	3ecccccd 	.word	0x3ecccccd

0801c1c8 <SD_Witer>:



uint8_t mount = 0;
void SD_Witer(uint16_t file_cnt, uint8_t Language_status, uint8_t Memory_Data_satus, uint8_t Mode_EL, uint8_t CRICQS_done)
{
 801c1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1cc:	461f      	mov	r7, r3
	
	char digit_buff[3];
	char source_type[4];
	char measure_buff[12];

	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801c1ce:	4bb8      	ldr	r3, [pc, #736]	; (801c4b0 <SD_Witer+0x2e8>)
 801c1d0:	781b      	ldrb	r3, [r3, #0]
 801c1d2:	2b01      	cmp	r3, #1
{
 801c1d4:	b087      	sub	sp, #28
 801c1d6:	4605      	mov	r5, r0
 801c1d8:	460c      	mov	r4, r1
 801c1da:	4690      	mov	r8, r2
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801c1dc:	f000 85fe 	beq.w	801cddc <SD_Witer+0xc14>
 801c1e0:	2b02      	cmp	r3, #2
 801c1e2:	f000 85fe 	beq.w	801cde2 <SD_Witer+0xc1a>
 801c1e6:	2b04      	cmp	r3, #4
 801c1e8:	f000 85fe 	beq.w	801cde8 <SD_Witer+0xc20>
 801c1ec:	2b08      	cmp	r3, #8
 801c1ee:	f000 85fe 	beq.w	801cdee <SD_Witer+0xc26>
 801c1f2:	2b10      	cmp	r3, #16
 801c1f4:	f000 85fe 	beq.w	801cdf4 <SD_Witer+0xc2c>
 801c1f8:	4aae      	ldr	r2, [pc, #696]	; (801c4b4 <SD_Witer+0x2ec>)
 801c1fa:	49af      	ldr	r1, [pc, #700]	; (801c4b8 <SD_Witer+0x2f0>)
 801c1fc:	2b20      	cmp	r3, #32
 801c1fe:	bf18      	it	ne
 801c200:	4611      	movne	r1, r2
 801c202:	a802      	add	r0, sp, #8
 801c204:	f005 fdf7 	bl	8021df6 <strcpy>
	
	memset(measure_buff, 0, 12);
 801c208:	2300      	movs	r3, #0
	
		sprintf(digit_buff, "%.3d", file_cnt );
 801c20a:	462a      	mov	r2, r5
 801c20c:	49ab      	ldr	r1, [pc, #684]	; (801c4bc <SD_Witer+0x2f4>)
	memset(measure_buff, 0, 12);
 801c20e:	9303      	str	r3, [sp, #12]
		sprintf(digit_buff, "%.3d", file_cnt );
 801c210:	a801      	add	r0, sp, #4
	memset(measure_buff, 0, 12);
 801c212:	9304      	str	r3, [sp, #16]
 801c214:	9305      	str	r3, [sp, #20]
		sprintf(digit_buff, "%.3d", file_cnt );
 801c216:	f005 fdbb 	bl	8021d90 <siprintf>
		strcat(buffer_sd, digit_buff);
 801c21a:	a901      	add	r1, sp, #4
 801c21c:	48a8      	ldr	r0, [pc, #672]	; (801c4c0 <SD_Witer+0x2f8>)
		strcat(buffer_sd, ".txt");

		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 801c21e:	4da9      	ldr	r5, [pc, #676]	; (801c4c4 <SD_Witer+0x2fc>)
 801c220:	4ea7      	ldr	r6, [pc, #668]	; (801c4c0 <SD_Witer+0x2f8>)
		strcat(buffer_sd, digit_buff);
 801c222:	f005 fdd9 	bl	8021dd8 <strcat>
		strcat(buffer_sd, ".txt");
 801c226:	49a8      	ldr	r1, [pc, #672]	; (801c4c8 <SD_Witer+0x300>)
 801c228:	48a5      	ldr	r0, [pc, #660]	; (801c4c0 <SD_Witer+0x2f8>)
 801c22a:	f005 fdd5 	bl	8021dd8 <strcat>
		res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 1); 
 801c22e:	2201      	movs	r2, #1
 801c230:	49a6      	ldr	r1, [pc, #664]	; (801c4cc <SD_Witer+0x304>)
 801c232:	48a7      	ldr	r0, [pc, #668]	; (801c4d0 <SD_Witer+0x308>)
 801c234:	f7ed f9ca 	bl	80095cc <f_mount>
 801c238:	7028      	strb	r0, [r5, #0]
       if (res != FR_OK)
 801c23a:	2800      	cmp	r0, #0
 801c23c:	f040 85b1 	bne.w	801cda2 <SD_Witer+0xbda>
        {
                //printf("Ошибка монтирования диска %d\r\n", result);
        }
			else
				{
				res = f_open(&MyFile, buffer_sd, FA_CREATE_ALWAYS | FA_WRITE);
 801c240:	220a      	movs	r2, #10
 801c242:	4631      	mov	r1, r6
 801c244:	48a3      	ldr	r0, [pc, #652]	; (801c4d4 <SD_Witer+0x30c>)
 801c246:	f7ed f9f5 	bl	8009634 <f_open>
 801c24a:	7028      	strb	r0, [r5, #0]
				if (res == FR_OK)
 801c24c:	2800      	cmp	r0, #0
 801c24e:	f040 85a8 	bne.w	801cda2 <SD_Witer+0xbda>
					{
							
							SDWr_Status_bar = 0.5;
 801c252:	4ba1      	ldr	r3, [pc, #644]	; (801c4d8 <SD_Witer+0x310>)
 801c254:	49a1      	ldr	r1, [pc, #644]	; (801c4dc <SD_Witer+0x314>)
 801c256:	2000      	movs	r0, #0
 801c258:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c25c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801c260:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c264:	2055      	movs	r0, #85	; 0x55
 801c266:	f7f9 fa11 	bl	801568c <GUI_Bar_Measure>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801c26a:	4b9d      	ldr	r3, [pc, #628]	; (801c4e0 <SD_Witer+0x318>)
 801c26c:	2c00      	cmp	r4, #0
 801c26e:	f040 85c4 	bne.w	801cdfa <SD_Witer+0xc32>
 801c272:	499c      	ldr	r1, [pc, #624]	; (801c4e4 <SD_Witer+0x31c>)
 801c274:	2235      	movs	r2, #53	; 0x35
 801c276:	4897      	ldr	r0, [pc, #604]	; (801c4d4 <SD_Witer+0x30c>)
 801c278:	f7ed faf2 	bl	8009860 <f_write>
							sprintf(measure_buff, "%.4f", SP_Measure);
 801c27c:	4b9a      	ldr	r3, [pc, #616]	; (801c4e8 <SD_Witer+0x320>)
 801c27e:	6818      	ldr	r0, [r3, #0]
 801c280:	f7e4 f972 	bl	8000568 <__aeabi_f2d>
 801c284:	4602      	mov	r2, r0
 801c286:	460b      	mov	r3, r1
 801c288:	a803      	add	r0, sp, #12
 801c28a:	4998      	ldr	r1, [pc, #608]	; (801c4ec <SD_Witer+0x324>)
 801c28c:	f005 fd80 	bl	8021d90 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c290:	220c      	movs	r2, #12
 801c292:	4b93      	ldr	r3, [pc, #588]	; (801c4e0 <SD_Witer+0x318>)
 801c294:	488f      	ldr	r0, [pc, #572]	; (801c4d4 <SD_Witer+0x30c>)
 801c296:	eb0d 0102 	add.w	r1, sp, r2
 801c29a:	f7ed fae1 	bl	8009860 <f_write>
							memset(measure_buff, 0, 12);
 801c29e:	2300      	movs	r3, #0
 801c2a0:	9303      	str	r3, [sp, #12]
 801c2a2:	9304      	str	r3, [sp, #16]
 801c2a4:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801c2a6:	4b8e      	ldr	r3, [pc, #568]	; (801c4e0 <SD_Witer+0x318>)
 801c2a8:	2c00      	cmp	r4, #0
 801c2aa:	f040 85aa 	bne.w	801ce02 <SD_Witer+0xc3a>
 801c2ae:	4990      	ldr	r1, [pc, #576]	; (801c4f0 <SD_Witer+0x328>)
 801c2b0:	2226      	movs	r2, #38	; 0x26
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 801c2b2:	f8df 9264 	ldr.w	r9, [pc, #612]	; 801c518 <SD_Witer+0x350>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801c2b6:	4887      	ldr	r0, [pc, #540]	; (801c4d4 <SD_Witer+0x30c>)
 801c2b8:	f7ed fad2 	bl	8009860 <f_write>
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[0]);//X
 801c2bc:	f8b9 2000 	ldrh.w	r2, [r9]
 801c2c0:	498c      	ldr	r1, [pc, #560]	; (801c4f4 <SD_Witer+0x32c>)
 801c2c2:	a803      	add	r0, sp, #12
 801c2c4:	f005 fd64 	bl	8021d90 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c2c8:	220c      	movs	r2, #12
 801c2ca:	4b85      	ldr	r3, [pc, #532]	; (801c4e0 <SD_Witer+0x318>)
 801c2cc:	4881      	ldr	r0, [pc, #516]	; (801c4d4 <SD_Witer+0x30c>)
 801c2ce:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 801c2d2:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c2d4:	f7ed fac4 	bl	8009860 <f_write>
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801c2d8:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801c2dc:	4985      	ldr	r1, [pc, #532]	; (801c4f4 <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 801c2de:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801c2e0:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801c2e2:	9504      	str	r5, [sp, #16]
 801c2e4:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[1]);//Y
 801c2e6:	f005 fd53 	bl	8021d90 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c2ea:	220c      	movs	r2, #12
 801c2ec:	4b7c      	ldr	r3, [pc, #496]	; (801c4e0 <SD_Witer+0x318>)
 801c2ee:	4879      	ldr	r0, [pc, #484]	; (801c4d4 <SD_Witer+0x30c>)
 801c2f0:	eb0d 0102 	add.w	r1, sp, r2
 801c2f4:	f7ed fab4 	bl	8009860 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801c2f8:	f8b9 2004 	ldrh.w	r2, [r9, #4]
 801c2fc:	497d      	ldr	r1, [pc, #500]	; (801c4f4 <SD_Witer+0x32c>)
							memset(measure_buff, 0, 12);
 801c2fe:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801c300:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801c302:	9504      	str	r5, [sp, #16]
 801c304:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%d\t", colorimetry_XYZ1931[2]);//Z
 801c306:	f005 fd43 	bl	8021d90 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c30a:	220c      	movs	r2, #12
 801c30c:	4b74      	ldr	r3, [pc, #464]	; (801c4e0 <SD_Witer+0x318>)
 801c30e:	4871      	ldr	r0, [pc, #452]	; (801c4d4 <SD_Witer+0x30c>)
 801c310:	eb0d 0102 	add.w	r1, sp, r2
 801c314:	f7ed faa4 	bl	8009860 <f_write>
							memset(measure_buff, 0, 12);
 801c318:	9503      	str	r5, [sp, #12]
 801c31a:	9504      	str	r5, [sp, #16]
 801c31c:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801c31e:	4b70      	ldr	r3, [pc, #448]	; (801c4e0 <SD_Witer+0x318>)
 801c320:	2c00      	cmp	r4, #0
 801c322:	f040 8572 	bne.w	801ce0a <SD_Witer+0xc42>
 801c326:	4974      	ldr	r1, [pc, #464]	; (801c4f8 <SD_Witer+0x330>)
 801c328:	222e      	movs	r2, #46	; 0x2e
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 801c32a:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 801c51c <SD_Witer+0x354>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801c32e:	4869      	ldr	r0, [pc, #420]	; (801c4d4 <SD_Witer+0x30c>)
 801c330:	f7ed fa96 	bl	8009860 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_xy1931[0]); //x
 801c334:	f8d9 0000 	ldr.w	r0, [r9]
 801c338:	f7e4 f916 	bl	8000568 <__aeabi_f2d>
 801c33c:	4602      	mov	r2, r0
 801c33e:	460b      	mov	r3, r1
 801c340:	a803      	add	r0, sp, #12
 801c342:	496e      	ldr	r1, [pc, #440]	; (801c4fc <SD_Witer+0x334>)
 801c344:	f005 fd24 	bl	8021d90 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c348:	220c      	movs	r2, #12
 801c34a:	4b65      	ldr	r3, [pc, #404]	; (801c4e0 <SD_Witer+0x318>)
 801c34c:	4861      	ldr	r0, [pc, #388]	; (801c4d4 <SD_Witer+0x30c>)
 801c34e:	eb0d 0102 	add.w	r1, sp, r2
 801c352:	f7ed fa85 	bl	8009860 <f_write>
							memset(measure_buff, 0, 12);
 801c356:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 801c358:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 801c35c:	9503      	str	r5, [sp, #12]
 801c35e:	9504      	str	r5, [sp, #16]
 801c360:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_xy1931[1]);//y
 801c362:	f7e4 f901 	bl	8000568 <__aeabi_f2d>
 801c366:	4602      	mov	r2, r0
 801c368:	460b      	mov	r3, r1
 801c36a:	a803      	add	r0, sp, #12
 801c36c:	495f      	ldr	r1, [pc, #380]	; (801c4ec <SD_Witer+0x324>)
 801c36e:	f005 fd0f 	bl	8021d90 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c372:	220c      	movs	r2, #12
 801c374:	4b5a      	ldr	r3, [pc, #360]	; (801c4e0 <SD_Witer+0x318>)
 801c376:	4857      	ldr	r0, [pc, #348]	; (801c4d4 <SD_Witer+0x30c>)
 801c378:	eb0d 0102 	add.w	r1, sp, r2
 801c37c:	f7ed fa70 	bl	8009860 <f_write>
							memset(measure_buff, 0, 12);
 801c380:	9503      	str	r5, [sp, #12]
 801c382:	9504      	str	r5, [sp, #16]
 801c384:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801c386:	4b56      	ldr	r3, [pc, #344]	; (801c4e0 <SD_Witer+0x318>)
 801c388:	2c00      	cmp	r4, #0
 801c38a:	f040 8542 	bne.w	801ce12 <SD_Witer+0xc4a>
 801c38e:	495c      	ldr	r1, [pc, #368]	; (801c500 <SD_Witer+0x338>)
 801c390:	2230      	movs	r2, #48	; 0x30
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 801c392:	f8df 918c 	ldr.w	r9, [pc, #396]	; 801c520 <SD_Witer+0x358>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801c396:	484f      	ldr	r0, [pc, #316]	; (801c4d4 <SD_Witer+0x30c>)
 801c398:	f7ed fa62 	bl	8009860 <f_write>
							sprintf(measure_buff, "%.4f\t", colorimetry_uv1976[0]);//u'
 801c39c:	f8d9 0000 	ldr.w	r0, [r9]
 801c3a0:	f7e4 f8e2 	bl	8000568 <__aeabi_f2d>
 801c3a4:	4602      	mov	r2, r0
 801c3a6:	460b      	mov	r3, r1
 801c3a8:	a803      	add	r0, sp, #12
 801c3aa:	4954      	ldr	r1, [pc, #336]	; (801c4fc <SD_Witer+0x334>)
 801c3ac:	f005 fcf0 	bl	8021d90 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c3b0:	220c      	movs	r2, #12
 801c3b2:	4b4b      	ldr	r3, [pc, #300]	; (801c4e0 <SD_Witer+0x318>)
 801c3b4:	4847      	ldr	r0, [pc, #284]	; (801c4d4 <SD_Witer+0x30c>)
 801c3b6:	eb0d 0102 	add.w	r1, sp, r2
 801c3ba:	f7ed fa51 	bl	8009860 <f_write>
							memset(measure_buff, 0, 12);
 801c3be:	2500      	movs	r5, #0
						
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 801c3c0:	f8d9 0004 	ldr.w	r0, [r9, #4]
							memset(measure_buff, 0, 12);
 801c3c4:	9503      	str	r5, [sp, #12]
 801c3c6:	9504      	str	r5, [sp, #16]
 801c3c8:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%.4f", colorimetry_uv1976[1]);//v'
 801c3ca:	f7e4 f8cd 	bl	8000568 <__aeabi_f2d>
 801c3ce:	4602      	mov	r2, r0
 801c3d0:	460b      	mov	r3, r1
 801c3d2:	a803      	add	r0, sp, #12
 801c3d4:	4945      	ldr	r1, [pc, #276]	; (801c4ec <SD_Witer+0x324>)
 801c3d6:	f005 fcdb 	bl	8021d90 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c3da:	220c      	movs	r2, #12
 801c3dc:	4b40      	ldr	r3, [pc, #256]	; (801c4e0 <SD_Witer+0x318>)
 801c3de:	483d      	ldr	r0, [pc, #244]	; (801c4d4 <SD_Witer+0x30c>)
 801c3e0:	eb0d 0102 	add.w	r1, sp, r2
 801c3e4:	f7ed fa3c 	bl	8009860 <f_write>
							memset(measure_buff, 0, 12);
 801c3e8:	9503      	str	r5, [sp, #12]
 801c3ea:	9504      	str	r5, [sp, #16]
 801c3ec:	9505      	str	r5, [sp, #20]
							
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801c3ee:	4b3c      	ldr	r3, [pc, #240]	; (801c4e0 <SD_Witer+0x318>)
 801c3f0:	2c00      	cmp	r4, #0
 801c3f2:	f040 8512 	bne.w	801ce1a <SD_Witer+0xc52>
 801c3f6:	4943      	ldr	r1, [pc, #268]	; (801c504 <SD_Witer+0x33c>)
 801c3f8:	220e      	movs	r2, #14
 801c3fa:	4836      	ldr	r0, [pc, #216]	; (801c4d4 <SD_Witer+0x30c>)
 801c3fc:	f7ed fa30 	bl	8009860 <f_write>
							if(Tc_Measure == 0xFFFF){f_write(&MyFile, "NAN", 3, &byteswritten);}
 801c400:	4b41      	ldr	r3, [pc, #260]	; (801c508 <SD_Witer+0x340>)
 801c402:	881a      	ldrh	r2, [r3, #0]
 801c404:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c408:	429a      	cmp	r2, r3
 801c40a:	f040 8537 	bne.w	801ce7c <SD_Witer+0xcb4>
 801c40e:	4b34      	ldr	r3, [pc, #208]	; (801c4e0 <SD_Witer+0x318>)
 801c410:	4928      	ldr	r1, [pc, #160]	; (801c4b4 <SD_Witer+0x2ec>)
 801c412:	4830      	ldr	r0, [pc, #192]	; (801c4d4 <SD_Witer+0x30c>)
 801c414:	2203      	movs	r2, #3
 801c416:	f7ed fa23 	bl	8009860 <f_write>
										sprintf(measure_buff, "%.d", Tc_Measure);
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
										memset(measure_buff, 0, 12);
								}
						
								SDWr_Status_bar = 0.7;
 801c41a:	a123      	add	r1, pc, #140	; (adr r1, 801c4a8 <SD_Witer+0x2e0>)
 801c41c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c420:	4b2d      	ldr	r3, [pc, #180]	; (801c4d8 <SD_Witer+0x310>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c422:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 801c50c <SD_Witer+0x344>
								SDWr_Status_bar = 0.7;
 801c426:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c42a:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c42e:	2055      	movs	r0, #85	; 0x55
 801c430:	f7f9 f92c 	bl	801568c <GUI_Bar_Measure>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801c434:	4b2a      	ldr	r3, [pc, #168]	; (801c4e0 <SD_Witer+0x318>)
 801c436:	2c00      	cmp	r4, #0
 801c438:	f040 8531 	bne.w	801ce9e <SD_Witer+0xcd6>
 801c43c:	4934      	ldr	r1, [pc, #208]	; (801c510 <SD_Witer+0x348>)
 801c43e:	224a      	movs	r2, #74	; 0x4a
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 801c440:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 801c524 <SD_Witer+0x35c>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801c444:	4823      	ldr	r0, [pc, #140]	; (801c4d4 <SD_Witer+0x30c>)
 801c446:	f7ed fa0b 	bl	8009860 <f_write>
							sprintf(measure_buff, "%i\t", colorimetry_LAB[0]);//L
 801c44a:	f9b9 2000 	ldrsh.w	r2, [r9]
 801c44e:	4931      	ldr	r1, [pc, #196]	; (801c514 <SD_Witer+0x34c>)
 801c450:	a803      	add	r0, sp, #12
 801c452:	f005 fc9d 	bl	8021d90 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c456:	220c      	movs	r2, #12
 801c458:	4b21      	ldr	r3, [pc, #132]	; (801c4e0 <SD_Witer+0x318>)
 801c45a:	481e      	ldr	r0, [pc, #120]	; (801c4d4 <SD_Witer+0x30c>)
 801c45c:	eb0d 0102 	add.w	r1, sp, r2
							memset(measure_buff, 0, 12);
 801c460:	2500      	movs	r5, #0
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c462:	f7ed f9fd 	bl	8009860 <f_write>
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801c466:	f9b9 2002 	ldrsh.w	r2, [r9, #2]
 801c46a:	492a      	ldr	r1, [pc, #168]	; (801c514 <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 801c46c:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801c46e:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801c470:	9504      	str	r5, [sp, #16]
 801c472:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[1]);//a
 801c474:	f005 fc8c 	bl	8021d90 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c478:	220c      	movs	r2, #12
 801c47a:	4b19      	ldr	r3, [pc, #100]	; (801c4e0 <SD_Witer+0x318>)
 801c47c:	4815      	ldr	r0, [pc, #84]	; (801c4d4 <SD_Witer+0x30c>)
 801c47e:	eb0d 0102 	add.w	r1, sp, r2
 801c482:	f7ed f9ed 	bl	8009860 <f_write>
							memset(measure_buff, 0, 12);
						
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801c486:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801c48a:	4922      	ldr	r1, [pc, #136]	; (801c514 <SD_Witer+0x34c>)
							memset(measure_buff, 0, 12);
 801c48c:	9503      	str	r5, [sp, #12]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801c48e:	a803      	add	r0, sp, #12
							memset(measure_buff, 0, 12);
 801c490:	9504      	str	r5, [sp, #16]
 801c492:	9505      	str	r5, [sp, #20]
							sprintf(measure_buff, "%i\t", colorimetry_LAB[2]);//b
 801c494:	f005 fc7c 	bl	8021d90 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c498:	220c      	movs	r2, #12
 801c49a:	4b11      	ldr	r3, [pc, #68]	; (801c4e0 <SD_Witer+0x318>)
 801c49c:	480d      	ldr	r0, [pc, #52]	; (801c4d4 <SD_Witer+0x30c>)
 801c49e:	eb0d 0102 	add.w	r1, sp, r2
 801c4a2:	f7ed f9dd 	bl	8009860 <f_write>
 801c4a6:	e03f      	b.n	801c528 <SD_Witer+0x360>
 801c4a8:	66666666 	.word	0x66666666
 801c4ac:	3fe66666 	.word	0x3fe66666
 801c4b0:	2008bce9 	.word	0x2008bce9
 801c4b4:	0803127b 	.word	0x0803127b
 801c4b8:	0803127f 	.word	0x0803127f
 801c4bc:	08031283 	.word	0x08031283
 801c4c0:	2008d864 	.word	0x2008d864
 801c4c4:	2008e8b0 	.word	0x2008e8b0
 801c4c8:	08031288 	.word	0x08031288
 801c4cc:	2008e8b5 	.word	0x2008e8b5
 801c4d0:	2008c830 	.word	0x2008c830
 801c4d4:	2008d880 	.word	0x2008d880
 801c4d8:	20004cc8 	.word	0x20004cc8
 801c4dc:	3fe00000 	.word	0x3fe00000
 801c4e0:	2008c828 	.word	0x2008c828
 801c4e4:	20000928 	.word	0x20000928
 801c4e8:	20090a30 	.word	0x20090a30
 801c4ec:	08031257 	.word	0x08031257
 801c4f0:	20000441 	.word	0x20000441
 801c4f4:	080312ae 	.word	0x080312ae
 801c4f8:	200004bd 	.word	0x200004bd
 801c4fc:	0803128d 	.word	0x0803128d
 801c500:	2000047b 	.word	0x2000047b
 801c504:	2000024f 	.word	0x2000024f
 801c508:	2004fbe0 	.word	0x2004fbe0
 801c50c:	3f333333 	.word	0x3f333333
 801c510:	20000613 	.word	0x20000613
 801c514:	08031297 	.word	0x08031297
 801c518:	2008a7be 	.word	0x2008a7be
 801c51c:	2008a7dc 	.word	0x2008a7dc
 801c520:	2008a7d4 	.word	0x2008a7d4
 801c524:	2008a7b8 	.word	0x2008a7b8
							memset(measure_buff, 0, 12);
 801c528:	9503      	str	r5, [sp, #12]
 801c52a:	9504      	str	r5, [sp, #16]
 801c52c:	9505      	str	r5, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801c52e:	4bb4      	ldr	r3, [pc, #720]	; (801c800 <SD_Witer+0x638>)
 801c530:	2c00      	cmp	r4, #0
 801c532:	f040 84b8 	bne.w	801cea6 <SD_Witer+0xcde>
 801c536:	49b3      	ldr	r1, [pc, #716]	; (801c804 <SD_Witer+0x63c>)
 801c538:	222a      	movs	r2, #42	; 0x2a
 801c53a:	48b3      	ldr	r0, [pc, #716]	; (801c808 <SD_Witer+0x640>)
 801c53c:	f7ed f990 	bl	8009860 <f_write>
							f_write(&MyFile, &source_type, sizeof(source_type), &byteswritten);//SourceType
 801c540:	4baf      	ldr	r3, [pc, #700]	; (801c800 <SD_Witer+0x638>)
 801c542:	48b1      	ldr	r0, [pc, #708]	; (801c808 <SD_Witer+0x640>)
 801c544:	2204      	movs	r2, #4
 801c546:	a902      	add	r1, sp, #8
 801c548:	f7ed f98a 	bl	8009860 <f_write>
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801c54c:	4bac      	ldr	r3, [pc, #688]	; (801c800 <SD_Witer+0x638>)
 801c54e:	2c00      	cmp	r4, #0
 801c550:	f040 84ad 	bne.w	801ceae <SD_Witer+0xce6>
 801c554:	49ad      	ldr	r1, [pc, #692]	; (801c80c <SD_Witer+0x644>)
 801c556:	2235      	movs	r2, #53	; 0x35
 801c558:	48ab      	ldr	r0, [pc, #684]	; (801c808 <SD_Witer+0x640>)
 801c55a:	f7ed f981 	bl	8009860 <f_write>
							sprintf(measure_buff, "%d\t", lambda_d_Measure); //Lambda D
 801c55e:	4bac      	ldr	r3, [pc, #688]	; (801c810 <SD_Witer+0x648>)
 801c560:	49ac      	ldr	r1, [pc, #688]	; (801c814 <SD_Witer+0x64c>)
 801c562:	881a      	ldrh	r2, [r3, #0]
 801c564:	a803      	add	r0, sp, #12
 801c566:	f005 fc13 	bl	8021d90 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c56a:	220c      	movs	r2, #12
 801c56c:	4ba4      	ldr	r3, [pc, #656]	; (801c800 <SD_Witer+0x638>)
 801c56e:	48a6      	ldr	r0, [pc, #664]	; (801c808 <SD_Witer+0x640>)
 801c570:	eb0d 0102 	add.w	r1, sp, r2
 801c574:	f7ed f974 	bl	8009860 <f_write>
							memset(measure_buff, 0, 12);
 801c578:	2300      	movs	r3, #0
 801c57a:	9303      	str	r3, [sp, #12]
 801c57c:	9304      	str	r3, [sp, #16]
 801c57e:	9305      	str	r3, [sp, #20]
						
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801c580:	4b9f      	ldr	r3, [pc, #636]	; (801c800 <SD_Witer+0x638>)
 801c582:	2c00      	cmp	r4, #0
 801c584:	f040 8497 	bne.w	801ceb6 <SD_Witer+0xcee>
 801c588:	49a3      	ldr	r1, [pc, #652]	; (801c818 <SD_Witer+0x650>)
 801c58a:	223b      	movs	r2, #59	; 0x3b
 801c58c:	489e      	ldr	r0, [pc, #632]	; (801c808 <SD_Witer+0x640>)
 801c58e:	f7ed f967 	bl	8009860 <f_write>
							sprintf(measure_buff, "%d\t", lambda_c_Measure); //Lambda C
 801c592:	4ba2      	ldr	r3, [pc, #648]	; (801c81c <SD_Witer+0x654>)
 801c594:	499f      	ldr	r1, [pc, #636]	; (801c814 <SD_Witer+0x64c>)
 801c596:	881a      	ldrh	r2, [r3, #0]
 801c598:	a803      	add	r0, sp, #12
 801c59a:	f005 fbf9 	bl	8021d90 <siprintf>
							f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c59e:	220c      	movs	r2, #12
 801c5a0:	4b97      	ldr	r3, [pc, #604]	; (801c800 <SD_Witer+0x638>)
 801c5a2:	4899      	ldr	r0, [pc, #612]	; (801c808 <SD_Witer+0x640>)
 801c5a4:	eb0d 0102 	add.w	r1, sp, r2
 801c5a8:	f7ed f95a 	bl	8009860 <f_write>
							memset(measure_buff, 0, 12);
 801c5ac:	2300      	movs	r3, #0
						
							if(Memory_Data_satus == 0x01)
 801c5ae:	f1b8 0f01 	cmp.w	r8, #1
							memset(measure_buff, 0, 12);
 801c5b2:	9303      	str	r3, [sp, #12]
 801c5b4:	9304      	str	r3, [sp, #16]
 801c5b6:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801c5b8:	4b91      	ldr	r3, [pc, #580]	; (801c800 <SD_Witer+0x638>)
							if(Memory_Data_satus == 0x01)
 801c5ba:	f040 8484 	bne.w	801cec6 <SD_Witer+0xcfe>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801c5be:	2c00      	cmp	r4, #0
 801c5c0:	f040 847d 	bne.w	801cebe <SD_Witer+0xcf6>
 801c5c4:	4996      	ldr	r1, [pc, #600]	; (801c820 <SD_Witer+0x658>)
 801c5c6:	2224      	movs	r2, #36	; 0x24
 801c5c8:	488f      	ldr	r0, [pc, #572]	; (801c808 <SD_Witer+0x640>)
 801c5ca:	f7ed f949 	bl	8009860 <f_write>
								sprintf(measure_buff, "%d\t", delta_Eab_Measure); //Delta E
 801c5ce:	4b95      	ldr	r3, [pc, #596]	; (801c824 <SD_Witer+0x65c>)
 801c5d0:	4990      	ldr	r1, [pc, #576]	; (801c814 <SD_Witer+0x64c>)
 801c5d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c5d6:	a803      	add	r0, sp, #12
 801c5d8:	f005 fbda 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c5dc:	220c      	movs	r2, #12
 801c5de:	4b88      	ldr	r3, [pc, #544]	; (801c800 <SD_Witer+0x638>)
 801c5e0:	4889      	ldr	r0, [pc, #548]	; (801c808 <SD_Witer+0x640>)
 801c5e2:	eb0d 0102 	add.w	r1, sp, r2
 801c5e6:	f7ed f93b 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
 801c5ea:	2300      	movs	r3, #0
 801c5ec:	9303      	str	r3, [sp, #12]
 801c5ee:	9304      	str	r3, [sp, #16]
 801c5f0:	9305      	str	r3, [sp, #20]
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
								f_write(&MyFile, "NAN", 3, &byteswritten);
							}
							
							SDWr_Status_bar = 0.8;
 801c5f2:	a181      	add	r1, pc, #516	; (adr r1, 801c7f8 <SD_Witer+0x630>)
 801c5f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c5f8:	4b8b      	ldr	r3, [pc, #556]	; (801c828 <SD_Witer+0x660>)
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c5fa:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 801c82c <SD_Witer+0x664>
 801c5fe:	f8df 8278 	ldr.w	r8, [pc, #632]	; 801c878 <SD_Witer+0x6b0>
							SDWr_Status_bar = 0.8;
 801c602:	e9c3 0100 	strd	r0, r1, [r3]
							GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c606:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c60a:	2055      	movs	r0, #85	; 0x55
 801c60c:	f7f9 f83e 	bl	801568c <GUI_Bar_Measure>
							if(Mode_EL == 0x01) //E mode
 801c610:	2f01      	cmp	r7, #1
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801c612:	4b7b      	ldr	r3, [pc, #492]	; (801c800 <SD_Witer+0x638>)
							if(Mode_EL == 0x01) //E mode
 801c614:	f040 847d 	bne.w	801cf12 <SD_Witer+0xd4a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801c618:	2c00      	cmp	r4, #0
 801c61a:	f040 8465 	bne.w	801cee8 <SD_Witer+0xd20>
 801c61e:	4984      	ldr	r1, [pc, #528]	; (801c830 <SD_Witer+0x668>)
 801c620:	2263      	movs	r2, #99	; 0x63
 801c622:	4879      	ldr	r0, [pc, #484]	; (801c808 <SD_Witer+0x640>)
 801c624:	4f83      	ldr	r7, [pc, #524]	; (801c834 <SD_Witer+0x66c>)
 801c626:	f8df b254 	ldr.w	fp, [pc, #596]	; 801c87c <SD_Witer+0x6b4>
								
								for(uint16_t i=0; i < 1024; i++)
								{
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c62a:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801c800 <SD_Witer+0x638>
 801c62e:	f8df 91d8 	ldr.w	r9, [pc, #472]	; 801c808 <SD_Witer+0x640>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801c632:	f7ed f915 	bl	8009860 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //E(lambda)
 801c636:	f857 0b04 	ldr.w	r0, [r7], #4
 801c63a:	f7e3 ff95 	bl	8000568 <__aeabi_f2d>
 801c63e:	4602      	mov	r2, r0
 801c640:	460b      	mov	r3, r1
 801c642:	a803      	add	r0, sp, #12
 801c644:	497c      	ldr	r1, [pc, #496]	; (801c838 <SD_Witer+0x670>)
 801c646:	f005 fba3 	bl	8021d90 <siprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c64a:	220c      	movs	r2, #12
 801c64c:	4653      	mov	r3, sl
 801c64e:	eb0d 0102 	add.w	r1, sp, r2
 801c652:	4648      	mov	r0, r9
 801c654:	f7ed f904 	bl	8009860 <f_write>
									memset(measure_buff, 0, 12);
 801c658:	2500      	movs	r5, #0
									
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801c65a:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801c65e:	9503      	str	r5, [sp, #12]
 801c660:	9504      	str	r5, [sp, #16]
 801c662:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801c664:	f7e3 ff80 	bl	8000568 <__aeabi_f2d>
 801c668:	4602      	mov	r2, r0
 801c66a:	460b      	mov	r3, r1
 801c66c:	a803      	add	r0, sp, #12
 801c66e:	4973      	ldr	r1, [pc, #460]	; (801c83c <SD_Witer+0x674>)
 801c670:	f005 fb8e 	bl	8021d90 <siprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c674:	220c      	movs	r2, #12
 801c676:	4653      	mov	r3, sl
 801c678:	eb0d 0102 	add.w	r1, sp, r2
 801c67c:	4648      	mov	r0, r9
 801c67e:	f7ed f8ef 	bl	8009860 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801c682:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801c684:	9503      	str	r5, [sp, #12]
 801c686:	9504      	str	r5, [sp, #16]
 801c688:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801c68a:	d1d4      	bne.n	801c636 <SD_Witer+0x46e>
								}
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801c68c:	4b5c      	ldr	r3, [pc, #368]	; (801c800 <SD_Witer+0x638>)
 801c68e:	2c00      	cmp	r4, #0
 801c690:	f040 842e 	bne.w	801cef0 <SD_Witer+0xd28>
 801c694:	496a      	ldr	r1, [pc, #424]	; (801c840 <SD_Witer+0x678>)
 801c696:	2224      	movs	r2, #36	; 0x24
 801c698:	485b      	ldr	r0, [pc, #364]	; (801c808 <SD_Witer+0x640>)
 801c69a:	f7ed f8e1 	bl	8009860 <f_write>
								sprintf(measure_buff, "%.2f",  E_day); //Ee
 801c69e:	4b69      	ldr	r3, [pc, #420]	; (801c844 <SD_Witer+0x67c>)
 801c6a0:	6818      	ldr	r0, [r3, #0]
 801c6a2:	f7e3 ff61 	bl	8000568 <__aeabi_f2d>
 801c6a6:	4602      	mov	r2, r0
 801c6a8:	460b      	mov	r3, r1
 801c6aa:	a803      	add	r0, sp, #12
 801c6ac:	4966      	ldr	r1, [pc, #408]	; (801c848 <SD_Witer+0x680>)
 801c6ae:	f005 fb6f 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c6b2:	220c      	movs	r2, #12
 801c6b4:	4b52      	ldr	r3, [pc, #328]	; (801c800 <SD_Witer+0x638>)
 801c6b6:	4854      	ldr	r0, [pc, #336]	; (801c808 <SD_Witer+0x640>)
 801c6b8:	eb0d 0102 	add.w	r1, sp, r2
 801c6bc:	f7ed f8d0 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	9303      	str	r3, [sp, #12]
 801c6c4:	9304      	str	r3, [sp, #16]
 801c6c6:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801c6c8:	4b4d      	ldr	r3, [pc, #308]	; (801c800 <SD_Witer+0x638>)
 801c6ca:	2c00      	cmp	r4, #0
 801c6cc:	f040 8414 	bne.w	801cef8 <SD_Witer+0xd30>
 801c6d0:	495e      	ldr	r1, [pc, #376]	; (801c84c <SD_Witer+0x684>)
 801c6d2:	2221      	movs	r2, #33	; 0x21
 801c6d4:	484c      	ldr	r0, [pc, #304]	; (801c808 <SD_Witer+0x640>)
 801c6d6:	f7ed f8c3 	bl	8009860 <f_write>
								sprintf(measure_buff, "%.1f",  E_day_Wt); //Eu
 801c6da:	4b5d      	ldr	r3, [pc, #372]	; (801c850 <SD_Witer+0x688>)
 801c6dc:	6818      	ldr	r0, [r3, #0]
 801c6de:	f7e3 ff43 	bl	8000568 <__aeabi_f2d>
 801c6e2:	4602      	mov	r2, r0
 801c6e4:	460b      	mov	r3, r1
 801c6e6:	a803      	add	r0, sp, #12
 801c6e8:	495a      	ldr	r1, [pc, #360]	; (801c854 <SD_Witer+0x68c>)
 801c6ea:	f005 fb51 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c6ee:	220c      	movs	r2, #12
 801c6f0:	4b43      	ldr	r3, [pc, #268]	; (801c800 <SD_Witer+0x638>)
 801c6f2:	4845      	ldr	r0, [pc, #276]	; (801c808 <SD_Witer+0x640>)
 801c6f4:	eb0d 0102 	add.w	r1, sp, r2
 801c6f8:	f7ed f8b2 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
 801c6fc:	2300      	movs	r3, #0
 801c6fe:	9303      	str	r3, [sp, #12]
 801c700:	9304      	str	r3, [sp, #16]
 801c702:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801c704:	4b3e      	ldr	r3, [pc, #248]	; (801c800 <SD_Witer+0x638>)
 801c706:	2c00      	cmp	r4, #0
 801c708:	f040 83fa 	bne.w	801cf00 <SD_Witer+0xd38>
 801c70c:	4952      	ldr	r1, [pc, #328]	; (801c858 <SD_Witer+0x690>)
 801c70e:	2223      	movs	r2, #35	; 0x23
 801c710:	483d      	ldr	r0, [pc, #244]	; (801c808 <SD_Witer+0x640>)
 801c712:	f7ed f8a5 	bl	8009860 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPFD
 801c716:	4b51      	ldr	r3, [pc, #324]	; (801c85c <SD_Witer+0x694>)
 801c718:	6818      	ldr	r0, [r3, #0]
 801c71a:	f7e3 ff25 	bl	8000568 <__aeabi_f2d>
 801c71e:	4602      	mov	r2, r0
 801c720:	460b      	mov	r3, r1
 801c722:	a803      	add	r0, sp, #12
 801c724:	4948      	ldr	r1, [pc, #288]	; (801c848 <SD_Witer+0x680>)
 801c726:	f005 fb33 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c72a:	220c      	movs	r2, #12
 801c72c:	4b34      	ldr	r3, [pc, #208]	; (801c800 <SD_Witer+0x638>)
 801c72e:	4836      	ldr	r0, [pc, #216]	; (801c808 <SD_Witer+0x640>)
 801c730:	eb0d 0102 	add.w	r1, sp, r2
 801c734:	f7ed f894 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
 801c738:	2300      	movs	r3, #0
 801c73a:	9303      	str	r3, [sp, #12]
 801c73c:	9304      	str	r3, [sp, #16]
 801c73e:	9305      	str	r3, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801c740:	4b2f      	ldr	r3, [pc, #188]	; (801c800 <SD_Witer+0x638>)
 801c742:	2c00      	cmp	r4, #0
 801c744:	f040 83df 	bne.w	801cf06 <SD_Witer+0xd3e>
 801c748:	4945      	ldr	r1, [pc, #276]	; (801c860 <SD_Witer+0x698>)
 801c74a:	2239      	movs	r2, #57	; 0x39
 801c74c:	482e      	ldr	r0, [pc, #184]	; (801c808 <SD_Witer+0x640>)
 801c74e:	f7ed f887 	bl	8009860 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPFD B
 801c752:	4b44      	ldr	r3, [pc, #272]	; (801c864 <SD_Witer+0x69c>)
 801c754:	6818      	ldr	r0, [r3, #0]
 801c756:	f7e3 ff07 	bl	8000568 <__aeabi_f2d>
 801c75a:	4602      	mov	r2, r0
 801c75c:	460b      	mov	r3, r1
 801c75e:	a803      	add	r0, sp, #12
 801c760:	4941      	ldr	r1, [pc, #260]	; (801c868 <SD_Witer+0x6a0>)
 801c762:	f005 fb15 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c766:	220c      	movs	r2, #12
 801c768:	eb0d 0102 	add.w	r1, sp, r2
 801c76c:	4b24      	ldr	r3, [pc, #144]	; (801c800 <SD_Witer+0x638>)
 801c76e:	4826      	ldr	r0, [pc, #152]	; (801c808 <SD_Witer+0x640>)
 801c770:	f7ed f876 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801c774:	4b3d      	ldr	r3, [pc, #244]	; (801c86c <SD_Witer+0x6a4>)
								memset(measure_buff, 0, 12);
 801c776:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801c778:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801c77a:	9503      	str	r5, [sp, #12]
 801c77c:	9504      	str	r5, [sp, #16]
 801c77e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPFD G
 801c780:	f7e3 fef2 	bl	8000568 <__aeabi_f2d>
 801c784:	4602      	mov	r2, r0
 801c786:	460b      	mov	r3, r1
 801c788:	a803      	add	r0, sp, #12
 801c78a:	4937      	ldr	r1, [pc, #220]	; (801c868 <SD_Witer+0x6a0>)
 801c78c:	f005 fb00 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c790:	220c      	movs	r2, #12
 801c792:	eb0d 0102 	add.w	r1, sp, r2
 801c796:	4b1a      	ldr	r3, [pc, #104]	; (801c800 <SD_Witer+0x638>)
 801c798:	481b      	ldr	r0, [pc, #108]	; (801c808 <SD_Witer+0x640>)
 801c79a:	f7ed f861 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801c79e:	4b34      	ldr	r3, [pc, #208]	; (801c870 <SD_Witer+0x6a8>)
								memset(measure_buff, 0, 12);
 801c7a0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801c7a2:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801c7a4:	9504      	str	r5, [sp, #16]
 801c7a6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPFD R
 801c7a8:	f7e3 fede 	bl	8000568 <__aeabi_f2d>
 801c7ac:	4602      	mov	r2, r0
 801c7ae:	460b      	mov	r3, r1
 801c7b0:	a803      	add	r0, sp, #12
 801c7b2:	492d      	ldr	r1, [pc, #180]	; (801c868 <SD_Witer+0x6a0>)
 801c7b4:	f005 faec 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c7b8:	220c      	movs	r2, #12
 801c7ba:	eb0d 0102 	add.w	r1, sp, r2
 801c7be:	4b10      	ldr	r3, [pc, #64]	; (801c800 <SD_Witer+0x638>)
 801c7c0:	4811      	ldr	r0, [pc, #68]	; (801c808 <SD_Witer+0x640>)
 801c7c2:	f7ed f84d 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801c7c6:	4b2b      	ldr	r3, [pc, #172]	; (801c874 <SD_Witer+0x6ac>)
								memset(measure_buff, 0, 12);
 801c7c8:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801c7ca:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801c7cc:	9504      	str	r5, [sp, #16]
 801c7ce:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPFD FR
 801c7d0:	f7e3 feca 	bl	8000568 <__aeabi_f2d>
 801c7d4:	4602      	mov	r2, r0
 801c7d6:	460b      	mov	r3, r1
 801c7d8:	a803      	add	r0, sp, #12
 801c7da:	4923      	ldr	r1, [pc, #140]	; (801c868 <SD_Witer+0x6a0>)
 801c7dc:	f005 fad8 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c7e0:	220c      	movs	r2, #12
 801c7e2:	4b07      	ldr	r3, [pc, #28]	; (801c800 <SD_Witer+0x638>)
 801c7e4:	4808      	ldr	r0, [pc, #32]	; (801c808 <SD_Witer+0x640>)
 801c7e6:	eb0d 0102 	add.w	r1, sp, r2
 801c7ea:	f7ed f839 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
 801c7ee:	9503      	str	r5, [sp, #12]
 801c7f0:	9504      	str	r5, [sp, #16]
 801c7f2:	9505      	str	r5, [sp, #20]
 801c7f4:	e044      	b.n	801c880 <SD_Witer+0x6b8>
 801c7f6:	bf00      	nop
 801c7f8:	9999999a 	.word	0x9999999a
 801c7fc:	3fe99999 	.word	0x3fe99999
 801c800:	2008c828 	.word	0x2008c828
 801c804:	200008e0 	.word	0x200008e0
 801c808:	2008d880 	.word	0x2008d880
 801c80c:	20000a08 	.word	0x20000a08
 801c810:	20090db4 	.word	0x20090db4
 801c814:	080312ae 	.word	0x080312ae
 801c818:	200009b3 	.word	0x200009b3
 801c81c:	20090c74 	.word	0x20090c74
 801c820:	20000970 	.word	0x20000970
 801c824:	2008bce6 	.word	0x2008bce6
 801c828:	20004cc8 	.word	0x20004cc8
 801c82c:	3f4ccccd 	.word	0x3f4ccccd
 801c830:	20000568 	.word	0x20000568
 801c834:	200077dc 	.word	0x200077dc
 801c838:	0803129b 	.word	0x0803129b
 801c83c:	080312a0 	.word	0x080312a0
 801c840:	2000051f 	.word	0x2000051f
 801c844:	20090edc 	.word	0x20090edc
 801c848:	08031252 	.word	0x08031252
 801c84c:	200005dd 	.word	0x200005dd
 801c850:	20090948 	.word	0x20090948
 801c854:	0803124d 	.word	0x0803124d
 801c858:	20000811 	.word	0x20000811
 801c85c:	20090950 	.word	0x20090950
 801c860:	200007c5 	.word	0x200007c5
 801c864:	20090a34 	.word	0x20090a34
 801c868:	080312a7 	.word	0x080312a7
 801c86c:	20090db8 	.word	0x20090db8
 801c870:	20090cf4 	.word	0x20090cf4
 801c874:	2009094c 	.word	0x2009094c
 801c878:	200087dc 	.word	0x200087dc
 801c87c:	2004fbe4 	.word	0x2004fbe4
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801c880:	4baf      	ldr	r3, [pc, #700]	; (801cb40 <SD_Witer+0x978>)
 801c882:	2c00      	cmp	r4, #0
 801c884:	f040 8342 	bne.w	801cf0c <SD_Witer+0xd44>
 801c888:	49ae      	ldr	r1, [pc, #696]	; (801cb44 <SD_Witer+0x97c>)
 801c88a:	2213      	movs	r2, #19
								
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801c88c:	48ae      	ldr	r0, [pc, #696]	; (801cb48 <SD_Witer+0x980>)
 801c88e:	f7ec ffe7 	bl	8009860 <f_write>
								sprintf(measure_buff, "%.2f\t", ELb_Measure); //Lb
 801c892:	4bae      	ldr	r3, [pc, #696]	; (801cb4c <SD_Witer+0x984>)
 801c894:	6818      	ldr	r0, [r3, #0]
 801c896:	f7e3 fe67 	bl	8000568 <__aeabi_f2d>
 801c89a:	4602      	mov	r2, r0
 801c89c:	460b      	mov	r3, r1
 801c89e:	a803      	add	r0, sp, #12
 801c8a0:	49ab      	ldr	r1, [pc, #684]	; (801cb50 <SD_Witer+0x988>)
 801c8a2:	f005 fa75 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c8a6:	220c      	movs	r2, #12
 801c8a8:	eb0d 0102 	add.w	r1, sp, r2
 801c8ac:	4ba4      	ldr	r3, [pc, #656]	; (801cb40 <SD_Witer+0x978>)
 801c8ae:	48a6      	ldr	r0, [pc, #664]	; (801cb48 <SD_Witer+0x980>)
 801c8b0:	f7ec ffd6 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);

								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801c8b4:	4ba7      	ldr	r3, [pc, #668]	; (801cb54 <SD_Witer+0x98c>)
								memset(measure_buff, 0, 12);
 801c8b6:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801c8b8:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801c8ba:	9503      	str	r5, [sp, #12]
 801c8bc:	9504      	str	r5, [sp, #16]
 801c8be:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f", ELr_Measure); //Lr
 801c8c0:	f7e3 fe52 	bl	8000568 <__aeabi_f2d>
 801c8c4:	4602      	mov	r2, r0
 801c8c6:	460b      	mov	r3, r1
 801c8c8:	a803      	add	r0, sp, #12
 801c8ca:	49a3      	ldr	r1, [pc, #652]	; (801cb58 <SD_Witer+0x990>)
 801c8cc:	f005 fa60 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c8d0:	220c      	movs	r2, #12
 801c8d2:	eb0d 0102 	add.w	r1, sp, r2
 801c8d6:	4b9a      	ldr	r3, [pc, #616]	; (801cb40 <SD_Witer+0x978>)
 801c8d8:	489b      	ldr	r0, [pc, #620]	; (801cb48 <SD_Witer+0x980>)
 801c8da:	f7ec ffc1 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								
								SDWr_Status_bar = 0.9;
 801c8de:	a196      	add	r1, pc, #600	; (adr r1, 801cb38 <SD_Witer+0x970>)
 801c8e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c8e4:	4b9d      	ldr	r3, [pc, #628]	; (801cb5c <SD_Witer+0x994>)
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c8e6:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 801cb60 <SD_Witer+0x998>
								memset(measure_buff, 0, 12);
 801c8ea:	9503      	str	r5, [sp, #12]
								SDWr_Status_bar = 0.9;
 801c8ec:	e9c3 0100 	strd	r0, r1, [r3]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c8f0:	f44f 718c 	mov.w	r1, #280	; 0x118
 801c8f4:	2055      	movs	r0, #85	; 0x55
								memset(measure_buff, 0, 12);
 801c8f6:	9504      	str	r5, [sp, #16]
 801c8f8:	9505      	str	r5, [sp, #20]
								GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801c8fa:	f7f8 fec7 	bl	801568c <GUI_Bar_Measure>
						
							}
							if(CRICQS_done == 0x01)
 801c8fe:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801c902:	2b01      	cmp	r3, #1
 801c904:	f040 824d 	bne.w	801cda2 <SD_Witer+0xbda>
							{
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801c908:	4b8d      	ldr	r3, [pc, #564]	; (801cb40 <SD_Witer+0x978>)
 801c90a:	2c00      	cmp	r4, #0
 801c90c:	f040 8407 	bne.w	801d11e <SD_Witer+0xf56>
 801c910:	4994      	ldr	r1, [pc, #592]	; (801cb64 <SD_Witer+0x99c>)
 801c912:	227d      	movs	r2, #125	; 0x7d
 801c914:	488c      	ldr	r0, [pc, #560]	; (801cb48 <SD_Witer+0x980>)
 801c916:	f7ec ffa3 	bl	8009860 <f_write>
								sprintf(measure_buff, "%d\t", 151); //Ra
 801c91a:	2297      	movs	r2, #151	; 0x97
 801c91c:	4992      	ldr	r1, [pc, #584]	; (801cb68 <SD_Witer+0x9a0>)
 801c91e:	a803      	add	r0, sp, #12
 801c920:	f005 fa36 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c924:	220c      	movs	r2, #12
 801c926:	4b86      	ldr	r3, [pc, #536]	; (801cb40 <SD_Witer+0x978>)
 801c928:	4887      	ldr	r0, [pc, #540]	; (801cb48 <SD_Witer+0x980>)
 801c92a:	eb0d 0102 	add.w	r1, sp, r2
								memset(measure_buff, 0, 12);
 801c92e:	2500      	movs	r5, #0
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c930:	f7ec ff96 	bl	8009860 <f_write>
								
								sprintf(measure_buff, "%d", 231); //Rall
 801c934:	22e7      	movs	r2, #231	; 0xe7
 801c936:	498d      	ldr	r1, [pc, #564]	; (801cb6c <SD_Witer+0x9a4>)
								memset(measure_buff, 0, 12);
 801c938:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d", 231); //Rall
 801c93a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801c93c:	9504      	str	r5, [sp, #16]
 801c93e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d", 231); //Rall
 801c940:	f005 fa26 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c944:	220c      	movs	r2, #12
 801c946:	4b7e      	ldr	r3, [pc, #504]	; (801cb40 <SD_Witer+0x978>)
 801c948:	487f      	ldr	r0, [pc, #508]	; (801cb48 <SD_Witer+0x980>)
 801c94a:	eb0d 0102 	add.w	r1, sp, r2
 801c94e:	f7ec ff87 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801c952:	220d      	movs	r2, #13
 801c954:	4986      	ldr	r1, [pc, #536]	; (801cb70 <SD_Witer+0x9a8>)
								memset(measure_buff, 0, 12);
 801c956:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801c958:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801c95a:	9504      	str	r5, [sp, #16]
 801c95c:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "\n%d\t", 13); //R1
 801c95e:	f005 fa17 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c962:	220c      	movs	r2, #12
 801c964:	4b76      	ldr	r3, [pc, #472]	; (801cb40 <SD_Witer+0x978>)
 801c966:	4878      	ldr	r0, [pc, #480]	; (801cb48 <SD_Witer+0x980>)
 801c968:	eb0d 0102 	add.w	r1, sp, r2
 801c96c:	f7ec ff78 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 29); //R2
 801c970:	221d      	movs	r2, #29
 801c972:	497d      	ldr	r1, [pc, #500]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801c974:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 29); //R2
 801c976:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801c978:	9504      	str	r5, [sp, #16]
 801c97a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 29); //R2
 801c97c:	f005 fa08 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c980:	220c      	movs	r2, #12
 801c982:	4b6f      	ldr	r3, [pc, #444]	; (801cb40 <SD_Witer+0x978>)
 801c984:	4870      	ldr	r0, [pc, #448]	; (801cb48 <SD_Witer+0x980>)
 801c986:	eb0d 0102 	add.w	r1, sp, r2
 801c98a:	f7ec ff69 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 49); //R3
 801c98e:	2231      	movs	r2, #49	; 0x31
 801c990:	4975      	ldr	r1, [pc, #468]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801c992:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 49); //R3
 801c994:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801c996:	9504      	str	r5, [sp, #16]
 801c998:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 49); //R3
 801c99a:	f005 f9f9 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c99e:	220c      	movs	r2, #12
 801c9a0:	4b67      	ldr	r3, [pc, #412]	; (801cb40 <SD_Witer+0x978>)
 801c9a2:	4869      	ldr	r0, [pc, #420]	; (801cb48 <SD_Witer+0x980>)
 801c9a4:	eb0d 0102 	add.w	r1, sp, r2
 801c9a8:	f7ec ff5a 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 44); //R4
 801c9ac:	222c      	movs	r2, #44	; 0x2c
 801c9ae:	496e      	ldr	r1, [pc, #440]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801c9b0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 44); //R4
 801c9b2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801c9b4:	9504      	str	r5, [sp, #16]
 801c9b6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 44); //R4
 801c9b8:	f005 f9ea 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c9bc:	220c      	movs	r2, #12
 801c9be:	4b60      	ldr	r3, [pc, #384]	; (801cb40 <SD_Witer+0x978>)
 801c9c0:	4861      	ldr	r0, [pc, #388]	; (801cb48 <SD_Witer+0x980>)
 801c9c2:	eb0d 0102 	add.w	r1, sp, r2
 801c9c6:	f7ec ff4b 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 55); //R5
 801c9ca:	2237      	movs	r2, #55	; 0x37
 801c9cc:	4966      	ldr	r1, [pc, #408]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801c9ce:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 55); //R5
 801c9d0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801c9d2:	9504      	str	r5, [sp, #16]
 801c9d4:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 55); //R5
 801c9d6:	f005 f9db 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c9da:	220c      	movs	r2, #12
 801c9dc:	4b58      	ldr	r3, [pc, #352]	; (801cb40 <SD_Witer+0x978>)
 801c9de:	485a      	ldr	r0, [pc, #360]	; (801cb48 <SD_Witer+0x980>)
 801c9e0:	eb0d 0102 	add.w	r1, sp, r2
 801c9e4:	f7ec ff3c 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 68); //R6
 801c9e8:	2244      	movs	r2, #68	; 0x44
 801c9ea:	495f      	ldr	r1, [pc, #380]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801c9ec:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 68); //R6
 801c9ee:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801c9f0:	9504      	str	r5, [sp, #16]
 801c9f2:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 68); //R6
 801c9f4:	f005 f9cc 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801c9f8:	220c      	movs	r2, #12
 801c9fa:	4b51      	ldr	r3, [pc, #324]	; (801cb40 <SD_Witer+0x978>)
 801c9fc:	4852      	ldr	r0, [pc, #328]	; (801cb48 <SD_Witer+0x980>)
 801c9fe:	eb0d 0102 	add.w	r1, sp, r2
 801ca02:	f7ec ff2d 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",79); //R7
 801ca06:	224f      	movs	r2, #79	; 0x4f
 801ca08:	4957      	ldr	r1, [pc, #348]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ca0a:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",79); //R7
 801ca0c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ca0e:	9504      	str	r5, [sp, #16]
 801ca10:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",79); //R7
 801ca12:	f005 f9bd 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca16:	220c      	movs	r2, #12
 801ca18:	4b49      	ldr	r3, [pc, #292]	; (801cb40 <SD_Witer+0x978>)
 801ca1a:	484b      	ldr	r0, [pc, #300]	; (801cb48 <SD_Witer+0x980>)
 801ca1c:	eb0d 0102 	add.w	r1, sp, r2
 801ca20:	f7ec ff1e 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",88); //R8
 801ca24:	2258      	movs	r2, #88	; 0x58
 801ca26:	4950      	ldr	r1, [pc, #320]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ca28:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",88); //R8
 801ca2a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ca2c:	9504      	str	r5, [sp, #16]
 801ca2e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",88); //R8
 801ca30:	f005 f9ae 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca34:	220c      	movs	r2, #12
 801ca36:	4b42      	ldr	r3, [pc, #264]	; (801cb40 <SD_Witer+0x978>)
 801ca38:	4843      	ldr	r0, [pc, #268]	; (801cb48 <SD_Witer+0x980>)
 801ca3a:	eb0d 0102 	add.w	r1, sp, r2
 801ca3e:	f7ec ff0f 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",98); //R9
 801ca42:	2262      	movs	r2, #98	; 0x62
 801ca44:	4948      	ldr	r1, [pc, #288]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ca46:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t",98); //R9
 801ca48:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ca4a:	9504      	str	r5, [sp, #16]
 801ca4c:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t",98); //R9
 801ca4e:	f005 f99f 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca52:	220c      	movs	r2, #12
 801ca54:	4b3a      	ldr	r3, [pc, #232]	; (801cb40 <SD_Witer+0x978>)
 801ca56:	483c      	ldr	r0, [pc, #240]	; (801cb48 <SD_Witer+0x980>)
 801ca58:	eb0d 0102 	add.w	r1, sp, r2
 801ca5c:	f7ec ff00 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 105); //R10
 801ca60:	2269      	movs	r2, #105	; 0x69
 801ca62:	4941      	ldr	r1, [pc, #260]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ca64:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 105); //R10
 801ca66:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ca68:	9504      	str	r5, [sp, #16]
 801ca6a:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 105); //R10
 801ca6c:	f005 f990 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca70:	220c      	movs	r2, #12
 801ca72:	4b33      	ldr	r3, [pc, #204]	; (801cb40 <SD_Witer+0x978>)
 801ca74:	4834      	ldr	r0, [pc, #208]	; (801cb48 <SD_Witer+0x980>)
 801ca76:	eb0d 0102 	add.w	r1, sp, r2
 801ca7a:	f7ec fef1 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 112); //R11
 801ca7e:	2270      	movs	r2, #112	; 0x70
 801ca80:	4939      	ldr	r1, [pc, #228]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801ca82:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 112); //R11
 801ca84:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ca86:	9504      	str	r5, [sp, #16]
 801ca88:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 112); //R11
 801ca8a:	f005 f981 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ca8e:	220c      	movs	r2, #12
 801ca90:	4b2b      	ldr	r3, [pc, #172]	; (801cb40 <SD_Witer+0x978>)
 801ca92:	482d      	ldr	r0, [pc, #180]	; (801cb48 <SD_Witer+0x980>)
 801ca94:	eb0d 0102 	add.w	r1, sp, r2
 801ca98:	f7ec fee2 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 127); //R12
 801ca9c:	227f      	movs	r2, #127	; 0x7f
 801ca9e:	4932      	ldr	r1, [pc, #200]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801caa0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 127); //R12
 801caa2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801caa4:	9504      	str	r5, [sp, #16]
 801caa6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 127); //R12
 801caa8:	f005 f972 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801caac:	220c      	movs	r2, #12
 801caae:	4b24      	ldr	r3, [pc, #144]	; (801cb40 <SD_Witer+0x978>)
 801cab0:	4825      	ldr	r0, [pc, #148]	; (801cb48 <SD_Witer+0x980>)
 801cab2:	eb0d 0102 	add.w	r1, sp, r2
 801cab6:	f7ec fed3 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 133); //R13
 801caba:	2285      	movs	r2, #133	; 0x85
 801cabc:	492a      	ldr	r1, [pc, #168]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801cabe:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 133); //R13
 801cac0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cac2:	9504      	str	r5, [sp, #16]
 801cac4:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 133); //R13
 801cac6:	f005 f963 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801caca:	220c      	movs	r2, #12
 801cacc:	4b1c      	ldr	r3, [pc, #112]	; (801cb40 <SD_Witer+0x978>)
 801cace:	481e      	ldr	r0, [pc, #120]	; (801cb48 <SD_Witer+0x980>)
 801cad0:	eb0d 0102 	add.w	r1, sp, r2
 801cad4:	f7ec fec4 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 148); //R14
 801cad8:	2294      	movs	r2, #148	; 0x94
 801cada:	4923      	ldr	r1, [pc, #140]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801cadc:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 148); //R14
 801cade:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cae0:	9504      	str	r5, [sp, #16]
 801cae2:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 148); //R14
 801cae4:	f005 f954 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cae8:	220c      	movs	r2, #12
 801caea:	4b15      	ldr	r3, [pc, #84]	; (801cb40 <SD_Witer+0x978>)
 801caec:	4816      	ldr	r0, [pc, #88]	; (801cb48 <SD_Witer+0x980>)
 801caee:	eb0d 0102 	add.w	r1, sp, r2
 801caf2:	f7ec feb5 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", 152); //R15
 801caf6:	2298      	movs	r2, #152	; 0x98
 801caf8:	491b      	ldr	r1, [pc, #108]	; (801cb68 <SD_Witer+0x9a0>)
								memset(measure_buff, 0, 12);
 801cafa:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%d\t", 152); //R15
 801cafc:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cafe:	9504      	str	r5, [sp, #16]
 801cb00:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%d\t", 152); //R15
 801cb02:	f005 f945 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cb06:	220c      	movs	r2, #12
 801cb08:	4b0d      	ldr	r3, [pc, #52]	; (801cb40 <SD_Witer+0x978>)
 801cb0a:	480f      	ldr	r0, [pc, #60]	; (801cb48 <SD_Witer+0x980>)
 801cb0c:	eb0d 0102 	add.w	r1, sp, r2
 801cb10:	f7ec fea6 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
 801cb14:	9503      	str	r5, [sp, #12]
 801cb16:	9504      	str	r5, [sp, #16]
 801cb18:	9505      	str	r5, [sp, #20]
								
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801cb1a:	4b09      	ldr	r3, [pc, #36]	; (801cb40 <SD_Witer+0x978>)
 801cb1c:	2c00      	cmp	r4, #0
 801cb1e:	f040 8302 	bne.w	801d126 <SD_Witer+0xf5e>
 801cb22:	4914      	ldr	r1, [pc, #80]	; (801cb74 <SD_Witer+0x9ac>)
 801cb24:	227f      	movs	r2, #127	; 0x7f
 801cb26:	4808      	ldr	r0, [pc, #32]	; (801cb48 <SD_Witer+0x980>)
								
								sprintf(measure_buff, "%d", Qf); //Qf
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
								memset(measure_buff, 0, 12);
								
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801cb28:	4d13      	ldr	r5, [pc, #76]	; (801cb78 <SD_Witer+0x9b0>)
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801cb2a:	f7ec fe99 	bl	8009860 <f_write>
								sprintf(measure_buff, "%d\t", Qa); //Qa
 801cb2e:	4b13      	ldr	r3, [pc, #76]	; (801cb7c <SD_Witer+0x9b4>)
 801cb30:	e026      	b.n	801cb80 <SD_Witer+0x9b8>
 801cb32:	bf00      	nop
 801cb34:	f3af 8000 	nop.w
 801cb38:	cccccccd 	.word	0xcccccccd
 801cb3c:	3feccccc 	.word	0x3feccccc
 801cb40:	2008c828 	.word	0x2008c828
 801cb44:	200004fa 	.word	0x200004fa
 801cb48:	2008d880 	.word	0x2008d880
 801cb4c:	20090ed4 	.word	0x20090ed4
 801cb50:	080312a7 	.word	0x080312a7
 801cb54:	20090ed8 	.word	0x20090ed8
 801cb58:	08031252 	.word	0x08031252
 801cb5c:	20004cc8 	.word	0x20004cc8
 801cb60:	3f666666 	.word	0x3f666666
 801cb64:	200003b2 	.word	0x200003b2
 801cb68:	080312ae 	.word	0x080312ae
 801cb6c:	08024471 	.word	0x08024471
 801cb70:	080312ad 	.word	0x080312ad
 801cb74:	200002c8 	.word	0x200002c8
 801cb78:	20002b94 	.word	0x20002b94
 801cb7c:	20002ba3 	.word	0x20002ba3
 801cb80:	49a8      	ldr	r1, [pc, #672]	; (801ce24 <SD_Witer+0xc5c>)
 801cb82:	781a      	ldrb	r2, [r3, #0]
 801cb84:	a803      	add	r0, sp, #12
 801cb86:	f005 f903 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cb8a:	220c      	movs	r2, #12
 801cb8c:	eb0d 0102 	add.w	r1, sp, r2
 801cb90:	4ba5      	ldr	r3, [pc, #660]	; (801ce28 <SD_Witer+0xc60>)
 801cb92:	48a6      	ldr	r0, [pc, #664]	; (801ce2c <SD_Witer+0xc64>)
 801cb94:	f7ec fe64 	bl	8009860 <f_write>
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801cb98:	4ba5      	ldr	r3, [pc, #660]	; (801ce30 <SD_Witer+0xc68>)
 801cb9a:	49a2      	ldr	r1, [pc, #648]	; (801ce24 <SD_Witer+0xc5c>)
 801cb9c:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801cb9e:	2400      	movs	r4, #0
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801cba0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cba2:	9403      	str	r4, [sp, #12]
 801cba4:	9404      	str	r4, [sp, #16]
 801cba6:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Qp); //Qp
 801cba8:	f005 f8f2 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cbac:	220c      	movs	r2, #12
 801cbae:	eb0d 0102 	add.w	r1, sp, r2
 801cbb2:	4b9d      	ldr	r3, [pc, #628]	; (801ce28 <SD_Witer+0xc60>)
 801cbb4:	489d      	ldr	r0, [pc, #628]	; (801ce2c <SD_Witer+0xc64>)
 801cbb6:	f7ec fe53 	bl	8009860 <f_write>
								sprintf(measure_buff, "%d", Qf); //Qf
 801cbba:	4b9e      	ldr	r3, [pc, #632]	; (801ce34 <SD_Witer+0xc6c>)
 801cbbc:	499e      	ldr	r1, [pc, #632]	; (801ce38 <SD_Witer+0xc70>)
 801cbbe:	781a      	ldrb	r2, [r3, #0]
								memset(measure_buff, 0, 12);
 801cbc0:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d", Qf); //Qf
 801cbc2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cbc4:	9404      	str	r4, [sp, #16]
 801cbc6:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d", Qf); //Qf
 801cbc8:	f005 f8e2 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cbcc:	220c      	movs	r2, #12
 801cbce:	4b96      	ldr	r3, [pc, #600]	; (801ce28 <SD_Witer+0xc60>)
 801cbd0:	4896      	ldr	r0, [pc, #600]	; (801ce2c <SD_Witer+0xc64>)
 801cbd2:	eb0d 0102 	add.w	r1, sp, r2
 801cbd6:	f7ec fe43 	bl	8009860 <f_write>
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801cbda:	782a      	ldrb	r2, [r5, #0]
 801cbdc:	4997      	ldr	r1, [pc, #604]	; (801ce3c <SD_Witer+0xc74>)
								memset(measure_buff, 0, 12);
 801cbde:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801cbe0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cbe2:	9404      	str	r4, [sp, #16]
 801cbe4:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "\n%d\t", Q_i[0]); //Q1
 801cbe6:	f005 f8d3 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cbea:	220c      	movs	r2, #12
 801cbec:	4b8e      	ldr	r3, [pc, #568]	; (801ce28 <SD_Witer+0xc60>)
 801cbee:	488f      	ldr	r0, [pc, #572]	; (801ce2c <SD_Witer+0xc64>)
 801cbf0:	eb0d 0102 	add.w	r1, sp, r2
 801cbf4:	f7ec fe34 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801cbf8:	786a      	ldrb	r2, [r5, #1]
 801cbfa:	498a      	ldr	r1, [pc, #552]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cbfc:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801cbfe:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cc00:	9404      	str	r4, [sp, #16]
 801cc02:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[1]); //Q2
 801cc04:	f005 f8c4 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cc08:	220c      	movs	r2, #12
 801cc0a:	4b87      	ldr	r3, [pc, #540]	; (801ce28 <SD_Witer+0xc60>)
 801cc0c:	4887      	ldr	r0, [pc, #540]	; (801ce2c <SD_Witer+0xc64>)
 801cc0e:	eb0d 0102 	add.w	r1, sp, r2
 801cc12:	f7ec fe25 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801cc16:	78aa      	ldrb	r2, [r5, #2]
 801cc18:	4982      	ldr	r1, [pc, #520]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cc1a:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801cc1c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cc1e:	9404      	str	r4, [sp, #16]
 801cc20:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[2]); //Q3
 801cc22:	f005 f8b5 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cc26:	220c      	movs	r2, #12
 801cc28:	4b7f      	ldr	r3, [pc, #508]	; (801ce28 <SD_Witer+0xc60>)
 801cc2a:	4880      	ldr	r0, [pc, #512]	; (801ce2c <SD_Witer+0xc64>)
 801cc2c:	eb0d 0102 	add.w	r1, sp, r2
 801cc30:	f7ec fe16 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801cc34:	78ea      	ldrb	r2, [r5, #3]
 801cc36:	497b      	ldr	r1, [pc, #492]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cc38:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801cc3a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cc3c:	9404      	str	r4, [sp, #16]
 801cc3e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[3]); //Q4
 801cc40:	f005 f8a6 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cc44:	220c      	movs	r2, #12
 801cc46:	4b78      	ldr	r3, [pc, #480]	; (801ce28 <SD_Witer+0xc60>)
 801cc48:	4878      	ldr	r0, [pc, #480]	; (801ce2c <SD_Witer+0xc64>)
 801cc4a:	eb0d 0102 	add.w	r1, sp, r2
 801cc4e:	f7ec fe07 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801cc52:	792a      	ldrb	r2, [r5, #4]
 801cc54:	4973      	ldr	r1, [pc, #460]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cc56:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801cc58:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cc5a:	9404      	str	r4, [sp, #16]
 801cc5c:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[4]); //Q5
 801cc5e:	f005 f897 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cc62:	220c      	movs	r2, #12
 801cc64:	4b70      	ldr	r3, [pc, #448]	; (801ce28 <SD_Witer+0xc60>)
 801cc66:	4871      	ldr	r0, [pc, #452]	; (801ce2c <SD_Witer+0xc64>)
 801cc68:	eb0d 0102 	add.w	r1, sp, r2
 801cc6c:	f7ec fdf8 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801cc70:	796a      	ldrb	r2, [r5, #5]
 801cc72:	496c      	ldr	r1, [pc, #432]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cc74:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801cc76:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cc78:	9404      	str	r4, [sp, #16]
 801cc7a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[5]); //Q6
 801cc7c:	f005 f888 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cc80:	220c      	movs	r2, #12
 801cc82:	4b69      	ldr	r3, [pc, #420]	; (801ce28 <SD_Witer+0xc60>)
 801cc84:	4869      	ldr	r0, [pc, #420]	; (801ce2c <SD_Witer+0xc64>)
 801cc86:	eb0d 0102 	add.w	r1, sp, r2
 801cc8a:	f7ec fde9 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801cc8e:	79aa      	ldrb	r2, [r5, #6]
 801cc90:	4964      	ldr	r1, [pc, #400]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cc92:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801cc94:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cc96:	9404      	str	r4, [sp, #16]
 801cc98:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[6]); //Q7
 801cc9a:	f005 f879 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cc9e:	220c      	movs	r2, #12
 801cca0:	4b61      	ldr	r3, [pc, #388]	; (801ce28 <SD_Witer+0xc60>)
 801cca2:	4862      	ldr	r0, [pc, #392]	; (801ce2c <SD_Witer+0xc64>)
 801cca4:	eb0d 0102 	add.w	r1, sp, r2
 801cca8:	f7ec fdda 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801ccac:	79ea      	ldrb	r2, [r5, #7]
 801ccae:	495d      	ldr	r1, [pc, #372]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ccb0:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801ccb2:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ccb4:	9404      	str	r4, [sp, #16]
 801ccb6:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[7]); //Q8
 801ccb8:	f005 f86a 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ccbc:	220c      	movs	r2, #12
 801ccbe:	4b5a      	ldr	r3, [pc, #360]	; (801ce28 <SD_Witer+0xc60>)
 801ccc0:	485a      	ldr	r0, [pc, #360]	; (801ce2c <SD_Witer+0xc64>)
 801ccc2:	eb0d 0102 	add.w	r1, sp, r2
 801ccc6:	f7ec fdcb 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801ccca:	7a2a      	ldrb	r2, [r5, #8]
 801cccc:	4955      	ldr	r1, [pc, #340]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ccce:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801ccd0:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ccd2:	9404      	str	r4, [sp, #16]
 801ccd4:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t",Q_i[8]); //Q9
 801ccd6:	f005 f85b 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ccda:	220c      	movs	r2, #12
 801ccdc:	4b52      	ldr	r3, [pc, #328]	; (801ce28 <SD_Witer+0xc60>)
 801ccde:	4853      	ldr	r0, [pc, #332]	; (801ce2c <SD_Witer+0xc64>)
 801cce0:	eb0d 0102 	add.w	r1, sp, r2
 801cce4:	f7ec fdbc 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801cce8:	7a6a      	ldrb	r2, [r5, #9]
 801ccea:	494e      	ldr	r1, [pc, #312]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801ccec:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801ccee:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801ccf0:	9404      	str	r4, [sp, #16]
 801ccf2:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[9]); //Q10
 801ccf4:	f005 f84c 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ccf8:	220c      	movs	r2, #12
 801ccfa:	4b4b      	ldr	r3, [pc, #300]	; (801ce28 <SD_Witer+0xc60>)
 801ccfc:	484b      	ldr	r0, [pc, #300]	; (801ce2c <SD_Witer+0xc64>)
 801ccfe:	eb0d 0102 	add.w	r1, sp, r2
 801cd02:	f7ec fdad 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801cd06:	7aaa      	ldrb	r2, [r5, #10]
 801cd08:	4946      	ldr	r1, [pc, #280]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cd0a:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801cd0c:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cd0e:	9404      	str	r4, [sp, #16]
 801cd10:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[10]); //Q11
 801cd12:	f005 f83d 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd16:	220c      	movs	r2, #12
 801cd18:	4b43      	ldr	r3, [pc, #268]	; (801ce28 <SD_Witer+0xc60>)
 801cd1a:	4844      	ldr	r0, [pc, #272]	; (801ce2c <SD_Witer+0xc64>)
 801cd1c:	eb0d 0102 	add.w	r1, sp, r2
 801cd20:	f7ec fd9e 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801cd24:	7aea      	ldrb	r2, [r5, #11]
 801cd26:	493f      	ldr	r1, [pc, #252]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cd28:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801cd2a:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cd2c:	9404      	str	r4, [sp, #16]
 801cd2e:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[11]); //Q12
 801cd30:	f005 f82e 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd34:	220c      	movs	r2, #12
 801cd36:	4b3c      	ldr	r3, [pc, #240]	; (801ce28 <SD_Witer+0xc60>)
 801cd38:	483c      	ldr	r0, [pc, #240]	; (801ce2c <SD_Witer+0xc64>)
 801cd3a:	eb0d 0102 	add.w	r1, sp, r2
 801cd3e:	f7ec fd8f 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801cd42:	7b2a      	ldrb	r2, [r5, #12]
 801cd44:	4937      	ldr	r1, [pc, #220]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cd46:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801cd48:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cd4a:	9404      	str	r4, [sp, #16]
 801cd4c:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[12]); //Q13
 801cd4e:	f005 f81f 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd52:	220c      	movs	r2, #12
 801cd54:	4b34      	ldr	r3, [pc, #208]	; (801ce28 <SD_Witer+0xc60>)
 801cd56:	4835      	ldr	r0, [pc, #212]	; (801ce2c <SD_Witer+0xc64>)
 801cd58:	eb0d 0102 	add.w	r1, sp, r2
 801cd5c:	f7ec fd80 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801cd60:	7b6a      	ldrb	r2, [r5, #13]
 801cd62:	4930      	ldr	r1, [pc, #192]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cd64:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801cd66:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cd68:	9404      	str	r4, [sp, #16]
 801cd6a:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[13]); //Q14
 801cd6c:	f005 f810 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd70:	220c      	movs	r2, #12
 801cd72:	4b2d      	ldr	r3, [pc, #180]	; (801ce28 <SD_Witer+0xc60>)
 801cd74:	482d      	ldr	r0, [pc, #180]	; (801ce2c <SD_Witer+0xc64>)
 801cd76:	eb0d 0102 	add.w	r1, sp, r2
 801cd7a:	f7ec fd71 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801cd7e:	7baa      	ldrb	r2, [r5, #14]
 801cd80:	4928      	ldr	r1, [pc, #160]	; (801ce24 <SD_Witer+0xc5c>)
								memset(measure_buff, 0, 12);
 801cd82:	9403      	str	r4, [sp, #12]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801cd84:	a803      	add	r0, sp, #12
								memset(measure_buff, 0, 12);
 801cd86:	9404      	str	r4, [sp, #16]
 801cd88:	9405      	str	r4, [sp, #20]
								sprintf(measure_buff, "%d\t", Q_i[14]); //Q15
 801cd8a:	f005 f801 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cd8e:	220c      	movs	r2, #12
 801cd90:	4b25      	ldr	r3, [pc, #148]	; (801ce28 <SD_Witer+0xc60>)
 801cd92:	4826      	ldr	r0, [pc, #152]	; (801ce2c <SD_Witer+0xc64>)
 801cd94:	eb0d 0102 	add.w	r1, sp, r2
 801cd98:	f7ec fd62 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
 801cd9c:	9403      	str	r4, [sp, #12]
 801cd9e:	9404      	str	r4, [sp, #16]
 801cda0:	9405      	str	r4, [sp, #20]
							}
					}
				}
				
			
				f_close(&MyFile);
 801cda2:	4822      	ldr	r0, [pc, #136]	; (801ce2c <SD_Witer+0xc64>)
 801cda4:	f7ec fe7a 	bl	8009a9c <f_close>
				memset(buffer_sd, 0, 11);
 801cda8:	2200      	movs	r2, #0
				
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801cdaa:	4925      	ldr	r1, [pc, #148]	; (801ce40 <SD_Witer+0xc78>)
 801cdac:	4825      	ldr	r0, [pc, #148]	; (801ce44 <SD_Witer+0xc7c>)
				memset(buffer_sd, 0, 11);
 801cdae:	6072      	str	r2, [r6, #4]
 801cdb0:	6032      	str	r2, [r6, #0]
 801cdb2:	f8c6 2007 	str.w	r2, [r6, #7]
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801cdb6:	f7ec fc09 	bl	80095cc <f_mount>
 801cdba:	4b23      	ldr	r3, [pc, #140]	; (801ce48 <SD_Witer+0xc80>)
				SDWr_Status_bar = 1.0;
 801cdbc:	4923      	ldr	r1, [pc, #140]	; (801ce4c <SD_Witer+0xc84>)
				res = f_mount(&SDFatFs,(TCHAR const*)SDPath, 0);
 801cdbe:	7018      	strb	r0, [r3, #0]
				SDWr_Status_bar = 1.0;
 801cdc0:	4b23      	ldr	r3, [pc, #140]	; (801ce50 <SD_Witer+0xc88>)
 801cdc2:	2000      	movs	r0, #0
 801cdc4:	e9c3 0100 	strd	r0, r1, [r3]
				GUI_Bar_Measure(85, 280, SDWr_Status_bar);
 801cdc8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801cdcc:	f44f 718c 	mov.w	r1, #280	; 0x118
 801cdd0:	2055      	movs	r0, #85	; 0x55
 801cdd2:	f7f8 fc5b 	bl	801568c <GUI_Bar_Measure>
	}
 801cdd6:	b007      	add	sp, #28
 801cdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	strcpy(source_type, Source_Type == Source_A ? "A" : Source_Type == Source_D65 ? "D65" : Source_Type == Source_C ? "C" : Source_Type == Source_D50 ? "D50" : Source_Type == Source_D55 ? "D55" : Source_Type == Source_D75 ? "D75" : "NAN");
 801cddc:	491d      	ldr	r1, [pc, #116]	; (801ce54 <SD_Witer+0xc8c>)
 801cdde:	f7ff ba10 	b.w	801c202 <SD_Witer+0x3a>
 801cde2:	491d      	ldr	r1, [pc, #116]	; (801ce58 <SD_Witer+0xc90>)
 801cde4:	f7ff ba0d 	b.w	801c202 <SD_Witer+0x3a>
 801cde8:	491c      	ldr	r1, [pc, #112]	; (801ce5c <SD_Witer+0xc94>)
 801cdea:	f7ff ba0a 	b.w	801c202 <SD_Witer+0x3a>
 801cdee:	491c      	ldr	r1, [pc, #112]	; (801ce60 <SD_Witer+0xc98>)
 801cdf0:	f7ff ba07 	b.w	801c202 <SD_Witer+0x3a>
 801cdf4:	491b      	ldr	r1, [pc, #108]	; (801ce64 <SD_Witer+0xc9c>)
 801cdf6:	f7ff ba04 	b.w	801c202 <SD_Witer+0x3a>
						(Language_status==Ru)? (f_write(&MyFile, &SD_Text_SP_ru, sizeof(SD_Text_SP_ru), &byteswritten)) : (f_write(&MyFile, &SD_Text_SP_en, sizeof(SD_Text_SP_en), &byteswritten)); //S/P
 801cdfa:	221e      	movs	r2, #30
 801cdfc:	491a      	ldr	r1, [pc, #104]	; (801ce68 <SD_Witer+0xca0>)
 801cdfe:	f7ff ba3a 	b.w	801c276 <SD_Witer+0xae>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_ColorXYZ_ru, sizeof(SD_Text_ColorXYZ_ru), &byteswritten)) :(f_write(&MyFile, &SD_Text_ColorXYZ_en, sizeof(SD_Text_ColorXYZ_en), &byteswritten)); //XYZ
 801ce02:	2212      	movs	r2, #18
 801ce04:	4919      	ldr	r1, [pc, #100]	; (801ce6c <SD_Witer+0xca4>)
 801ce06:	f7ff ba54 	b.w	801c2b2 <SD_Witer+0xea>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Colorxy_ru, sizeof(SD_Text_Colorxy_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Colorxy_en, sizeof(SD_Text_Colorxy_en), &byteswritten));//xy
 801ce0a:	2212      	movs	r2, #18
 801ce0c:	4918      	ldr	r1, [pc, #96]	; (801ce70 <SD_Witer+0xca8>)
 801ce0e:	f7ff ba8c 	b.w	801c32a <SD_Witer+0x162>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Coloruv_ru, sizeof(SD_Text_Coloruv_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Coloruv_en, sizeof(SD_Text_Coloruv_en), &byteswritten));//u'v'
 801ce12:	2214      	movs	r2, #20
 801ce14:	4917      	ldr	r1, [pc, #92]	; (801ce74 <SD_Witer+0xcac>)
 801ce16:	f7ff babc 	b.w	801c392 <SD_Witer+0x1ca>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CCT_ru, sizeof(SD_Text_CCT_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CCT_en, sizeof(SD_Text_CCT_en), &byteswritten));//CCT
 801ce1a:	2209      	movs	r2, #9
 801ce1c:	4916      	ldr	r1, [pc, #88]	; (801ce78 <SD_Witer+0xcb0>)
 801ce1e:	f7ff baec 	b.w	801c3fa <SD_Witer+0x232>
 801ce22:	bf00      	nop
 801ce24:	080312ae 	.word	0x080312ae
 801ce28:	2008c828 	.word	0x2008c828
 801ce2c:	2008d880 	.word	0x2008d880
 801ce30:	20002ba5 	.word	0x20002ba5
 801ce34:	20002ba4 	.word	0x20002ba4
 801ce38:	08024471 	.word	0x08024471
 801ce3c:	080312ad 	.word	0x080312ad
 801ce40:	2008e8b5 	.word	0x2008e8b5
 801ce44:	2008c830 	.word	0x2008c830
 801ce48:	2008e8b0 	.word	0x2008e8b0
 801ce4c:	3ff00000 	.word	0x3ff00000
 801ce50:	20004cc8 	.word	0x20004cc8
 801ce54:	080313b2 	.word	0x080313b2
 801ce58:	0803126d 	.word	0x0803126d
 801ce5c:	08031271 	.word	0x08031271
 801ce60:	08031273 	.word	0x08031273
 801ce64:	08031277 	.word	0x08031277
 801ce68:	2000090a 	.word	0x2000090a
 801ce6c:	2000042f 	.word	0x2000042f
 801ce70:	200004ab 	.word	0x200004ab
 801ce74:	20000467 	.word	0x20000467
 801ce78:	20000246 	.word	0x20000246
										sprintf(measure_buff, "%.d", Tc_Measure);
 801ce7c:	49ab      	ldr	r1, [pc, #684]	; (801d12c <SD_Witer+0xf64>)
 801ce7e:	a803      	add	r0, sp, #12
 801ce80:	f004 ff86 	bl	8021d90 <siprintf>
										f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801ce84:	220c      	movs	r2, #12
 801ce86:	4baa      	ldr	r3, [pc, #680]	; (801d130 <SD_Witer+0xf68>)
 801ce88:	48aa      	ldr	r0, [pc, #680]	; (801d134 <SD_Witer+0xf6c>)
 801ce8a:	eb0d 0102 	add.w	r1, sp, r2
 801ce8e:	f7ec fce7 	bl	8009860 <f_write>
										memset(measure_buff, 0, 12);
 801ce92:	2300      	movs	r3, #0
 801ce94:	9303      	str	r3, [sp, #12]
 801ce96:	9304      	str	r3, [sp, #16]
 801ce98:	9305      	str	r3, [sp, #20]
 801ce9a:	f7ff babe 	b.w	801c41a <SD_Witer+0x252>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_LAB_ru, sizeof(SD_Text_LAB_ru), &byteswritten)):f_write(&MyFile, &SD_Text_LAB_en, sizeof(SD_Text_LAB_en), &byteswritten); //L*a*b*
 801ce9e:	2215      	movs	r2, #21
 801cea0:	49a5      	ldr	r1, [pc, #660]	; (801d138 <SD_Witer+0xf70>)
 801cea2:	f7ff bacd 	b.w	801c440 <SD_Witer+0x278>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_RefSource_ru, sizeof(SD_Text_RefSource_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_RefSource_en, sizeof(SD_Text_RefSource_en), &byteswritten)); //RefSource
 801cea6:	2213      	movs	r2, #19
 801cea8:	49a4      	ldr	r1, [pc, #656]	; (801d13c <SD_Witer+0xf74>)
 801ceaa:	f7ff bb46 	b.w	801c53a <SD_Witer+0x372>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaD_ru, sizeof(SD_Text_lambdaD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaD_en, sizeof(SD_Text_lambdaD_en), &byteswritten));//Lambda D
 801ceae:	221a      	movs	r2, #26
 801ceb0:	49a3      	ldr	r1, [pc, #652]	; (801d140 <SD_Witer+0xf78>)
 801ceb2:	f7ff bb51 	b.w	801c558 <SD_Witer+0x390>
							(Language_status==Ru)?(f_write(&MyFile, &SD_Text_lambdaC_ru, sizeof(SD_Text_lambdaC_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_lambdaC_en, sizeof(SD_Text_lambdaC_en), &byteswritten));//Lambda C
 801ceb6:	221f      	movs	r2, #31
 801ceb8:	49a2      	ldr	r1, [pc, #648]	; (801d144 <SD_Witer+0xf7c>)
 801ceba:	f7ff bb67 	b.w	801c58c <SD_Witer+0x3c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801cebe:	2213      	movs	r2, #19
 801cec0:	49a1      	ldr	r1, [pc, #644]	; (801d148 <SD_Witer+0xf80>)
 801cec2:	f7ff bb81 	b.w	801c5c8 <SD_Witer+0x400>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801cec6:	b964      	cbnz	r4, 801cee2 <SD_Witer+0xd1a>
 801cec8:	49a0      	ldr	r1, [pc, #640]	; (801d14c <SD_Witer+0xf84>)
 801ceca:	2224      	movs	r2, #36	; 0x24
 801cecc:	4899      	ldr	r0, [pc, #612]	; (801d134 <SD_Witer+0xf6c>)
 801cece:	f7ec fcc7 	bl	8009860 <f_write>
								f_write(&MyFile, "NAN", 3, &byteswritten);
 801ced2:	4b97      	ldr	r3, [pc, #604]	; (801d130 <SD_Witer+0xf68>)
 801ced4:	499e      	ldr	r1, [pc, #632]	; (801d150 <SD_Witer+0xf88>)
 801ced6:	4897      	ldr	r0, [pc, #604]	; (801d134 <SD_Witer+0xf6c>)
 801ced8:	2203      	movs	r2, #3
 801ceda:	f7ec fcc1 	bl	8009860 <f_write>
 801cede:	f7ff bb88 	b.w	801c5f2 <SD_Witer+0x42a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_deltaE_ru, sizeof(SD_Text_deltaE_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_deltaE_en, sizeof(SD_Text_deltaE_en), &byteswritten));//Delta E
 801cee2:	2213      	movs	r2, #19
 801cee4:	4998      	ldr	r1, [pc, #608]	; (801d148 <SD_Witer+0xf80>)
 801cee6:	e7f1      	b.n	801cecc <SD_Witer+0xd04>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Elambda_ru, sizeof(SD_Text_Elambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Elambda_en, sizeof(SD_Text_Elambda_en), &byteswritten));//Delta E
 801cee8:	2225      	movs	r2, #37	; 0x25
 801ceea:	499a      	ldr	r1, [pc, #616]	; (801d154 <SD_Witer+0xf8c>)
 801ceec:	f7ff bb99 	b.w	801c622 <SD_Witer+0x45a>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Ee_ru, sizeof(SD_Text_Ee_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Ee_en, sizeof(SD_Text_Ee_en), &byteswritten));//Ee
 801cef0:	2212      	movs	r2, #18
 801cef2:	4999      	ldr	r1, [pc, #612]	; (801d158 <SD_Witer+0xf90>)
 801cef4:	f7ff bbd0 	b.w	801c698 <SD_Witer+0x4d0>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eu_ru, sizeof(SD_Text_Eu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eu_en, sizeof(SD_Text_Eu_en), &byteswritten));//Eu
 801cef8:	2212      	movs	r2, #18
 801cefa:	4998      	ldr	r1, [pc, #608]	; (801d15c <SD_Witer+0xf94>)
 801cefc:	f7ff bbea 	b.w	801c6d4 <SD_Witer+0x50c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFD_ru, sizeof(SD_Text_PPFD_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFD_en, sizeof(SD_Text_PPFD_en), &byteswritten));//PPFD
 801cf00:	2213      	movs	r2, #19
 801cf02:	4997      	ldr	r1, [pc, #604]	; (801d160 <SD_Witer+0xf98>)
 801cf04:	e404      	b.n	801c710 <SD_Witer+0x548>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPFDRGB_ru, sizeof(SD_Text_PPFDRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPFDRGB_en, sizeof(SD_Text_PPFDRGB_en), &byteswritten));//PPFDRGB
 801cf06:	221e      	movs	r2, #30
 801cf08:	4996      	ldr	r1, [pc, #600]	; (801d164 <SD_Witer+0xf9c>)
 801cf0a:	e41f      	b.n	801c74c <SD_Witer+0x584>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Eb_Er_ru, sizeof(SD_Text_Eb_Er_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Eb_Er_en, sizeof(SD_Text_Eb_Er_en), &byteswritten));//Eb/Er
 801cf0c:	220f      	movs	r2, #15
 801cf0e:	4996      	ldr	r1, [pc, #600]	; (801d168 <SD_Witer+0xfa0>)
 801cf10:	e4bc      	b.n	801c88c <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801cf12:	2c00      	cmp	r4, #0
 801cf14:	f040 80f0 	bne.w	801d0f8 <SD_Witer+0xf30>
 801cf18:	4994      	ldr	r1, [pc, #592]	; (801d16c <SD_Witer+0xfa4>)
 801cf1a:	2276      	movs	r2, #118	; 0x76
 801cf1c:	4885      	ldr	r0, [pc, #532]	; (801d134 <SD_Witer+0xf6c>)
 801cf1e:	4f94      	ldr	r7, [pc, #592]	; (801d170 <SD_Witer+0xfa8>)
 801cf20:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 801d1d8 <SD_Witer+0x1010>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cf24:	f8df a208 	ldr.w	sl, [pc, #520]	; 801d130 <SD_Witer+0xf68>
 801cf28:	f8df 9208 	ldr.w	r9, [pc, #520]	; 801d134 <SD_Witer+0xf6c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801cf2c:	f7ec fc98 	bl	8009860 <f_write>
									sprintf(measure_buff, "%.7f", Line_Rabs_buff[i]); //L(lambda)
 801cf30:	f857 0b04 	ldr.w	r0, [r7], #4
 801cf34:	f7e3 fb18 	bl	8000568 <__aeabi_f2d>
 801cf38:	4602      	mov	r2, r0
 801cf3a:	460b      	mov	r3, r1
 801cf3c:	a803      	add	r0, sp, #12
 801cf3e:	498d      	ldr	r1, [pc, #564]	; (801d174 <SD_Witer+0xfac>)
 801cf40:	f004 ff26 	bl	8021d90 <siprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cf44:	220c      	movs	r2, #12
 801cf46:	4653      	mov	r3, sl
 801cf48:	eb0d 0102 	add.w	r1, sp, r2
 801cf4c:	4648      	mov	r0, r9
 801cf4e:	f7ec fc87 	bl	8009860 <f_write>
									memset(measure_buff, 0, 12);
 801cf52:	2500      	movs	r5, #0
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801cf54:	f85b 0b04 	ldr.w	r0, [fp], #4
									memset(measure_buff, 0, 12);
 801cf58:	9503      	str	r5, [sp, #12]
 801cf5a:	9504      	str	r5, [sp, #16]
 801cf5c:	9505      	str	r5, [sp, #20]
									sprintf(measure_buff, "\t%.2f\n", WaveLenght[i]); //lambda
 801cf5e:	f7e3 fb03 	bl	8000568 <__aeabi_f2d>
 801cf62:	4602      	mov	r2, r0
 801cf64:	460b      	mov	r3, r1
 801cf66:	a803      	add	r0, sp, #12
 801cf68:	4983      	ldr	r1, [pc, #524]	; (801d178 <SD_Witer+0xfb0>)
 801cf6a:	f004 ff11 	bl	8021d90 <siprintf>
									f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cf6e:	220c      	movs	r2, #12
 801cf70:	4653      	mov	r3, sl
 801cf72:	eb0d 0102 	add.w	r1, sp, r2
 801cf76:	4648      	mov	r0, r9
 801cf78:	f7ec fc72 	bl	8009860 <f_write>
								for(uint16_t i=0; i < 1024; i++)
 801cf7c:	45b8      	cmp	r8, r7
									memset(measure_buff, 0, 12);
 801cf7e:	9503      	str	r5, [sp, #12]
 801cf80:	9504      	str	r5, [sp, #16]
 801cf82:	9505      	str	r5, [sp, #20]
								for(uint16_t i=0; i < 1024; i++)
 801cf84:	d1d4      	bne.n	801cf30 <SD_Witer+0xd68>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801cf86:	4b6a      	ldr	r3, [pc, #424]	; (801d130 <SD_Witer+0xf68>)
 801cf88:	2c00      	cmp	r4, #0
 801cf8a:	f040 80b8 	bne.w	801d0fe <SD_Witer+0xf36>
 801cf8e:	497b      	ldr	r1, [pc, #492]	; (801d17c <SD_Witer+0xfb4>)
 801cf90:	223f      	movs	r2, #63	; 0x3f
 801cf92:	4868      	ldr	r0, [pc, #416]	; (801d134 <SD_Witer+0xf6c>)
 801cf94:	f7ec fc64 	bl	8009860 <f_write>
								sprintf(measure_buff, "%.2f", E_day); //Le
 801cf98:	4b79      	ldr	r3, [pc, #484]	; (801d180 <SD_Witer+0xfb8>)
 801cf9a:	6818      	ldr	r0, [r3, #0]
 801cf9c:	f7e3 fae4 	bl	8000568 <__aeabi_f2d>
 801cfa0:	4602      	mov	r2, r0
 801cfa2:	460b      	mov	r3, r1
 801cfa4:	a803      	add	r0, sp, #12
 801cfa6:	4977      	ldr	r1, [pc, #476]	; (801d184 <SD_Witer+0xfbc>)
 801cfa8:	f004 fef2 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cfac:	220c      	movs	r2, #12
 801cfae:	4b60      	ldr	r3, [pc, #384]	; (801d130 <SD_Witer+0xf68>)
 801cfb0:	4860      	ldr	r0, [pc, #384]	; (801d134 <SD_Witer+0xf6c>)
 801cfb2:	eb0d 0102 	add.w	r1, sp, r2
 801cfb6:	f7ec fc53 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
 801cfba:	2300      	movs	r3, #0
 801cfbc:	9303      	str	r3, [sp, #12]
 801cfbe:	9304      	str	r3, [sp, #16]
 801cfc0:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801cfc2:	4b5b      	ldr	r3, [pc, #364]	; (801d130 <SD_Witer+0xf68>)
 801cfc4:	2c00      	cmp	r4, #0
 801cfc6:	f040 809d 	bne.w	801d104 <SD_Witer+0xf3c>
 801cfca:	496f      	ldr	r1, [pc, #444]	; (801d188 <SD_Witer+0xfc0>)
 801cfcc:	221b      	movs	r2, #27
 801cfce:	4859      	ldr	r0, [pc, #356]	; (801d134 <SD_Witer+0xf6c>)
 801cfd0:	f7ec fc46 	bl	8009860 <f_write>
								sprintf(measure_buff, "%.1f", E_day_Wt); //Lu
 801cfd4:	4b6d      	ldr	r3, [pc, #436]	; (801d18c <SD_Witer+0xfc4>)
 801cfd6:	6818      	ldr	r0, [r3, #0]
 801cfd8:	f7e3 fac6 	bl	8000568 <__aeabi_f2d>
 801cfdc:	4602      	mov	r2, r0
 801cfde:	460b      	mov	r3, r1
 801cfe0:	a803      	add	r0, sp, #12
 801cfe2:	496b      	ldr	r1, [pc, #428]	; (801d190 <SD_Witer+0xfc8>)
 801cfe4:	f004 fed4 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801cfe8:	220c      	movs	r2, #12
 801cfea:	4b51      	ldr	r3, [pc, #324]	; (801d130 <SD_Witer+0xf68>)
 801cfec:	4851      	ldr	r0, [pc, #324]	; (801d134 <SD_Witer+0xf6c>)
 801cfee:	eb0d 0102 	add.w	r1, sp, r2
 801cff2:	f7ec fc35 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
 801cff6:	2300      	movs	r3, #0
 801cff8:	9303      	str	r3, [sp, #12]
 801cffa:	9304      	str	r3, [sp, #16]
 801cffc:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801cffe:	4b4c      	ldr	r3, [pc, #304]	; (801d130 <SD_Witer+0xf68>)
 801d000:	2c00      	cmp	r4, #0
 801d002:	f040 8082 	bne.w	801d10a <SD_Witer+0xf42>
 801d006:	4963      	ldr	r1, [pc, #396]	; (801d194 <SD_Witer+0xfcc>)
 801d008:	2227      	movs	r2, #39	; 0x27
 801d00a:	484a      	ldr	r0, [pc, #296]	; (801d134 <SD_Witer+0xf6c>)
 801d00c:	f7ec fc28 	bl	8009860 <f_write>
								sprintf(measure_buff, "%.2f", PPFD_PPL_Measure); //PPL
 801d010:	4b61      	ldr	r3, [pc, #388]	; (801d198 <SD_Witer+0xfd0>)
 801d012:	6818      	ldr	r0, [r3, #0]
 801d014:	f7e3 faa8 	bl	8000568 <__aeabi_f2d>
 801d018:	4602      	mov	r2, r0
 801d01a:	460b      	mov	r3, r1
 801d01c:	a803      	add	r0, sp, #12
 801d01e:	4959      	ldr	r1, [pc, #356]	; (801d184 <SD_Witer+0xfbc>)
 801d020:	f004 feb6 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d024:	220c      	movs	r2, #12
 801d026:	4b42      	ldr	r3, [pc, #264]	; (801d130 <SD_Witer+0xf68>)
 801d028:	4842      	ldr	r0, [pc, #264]	; (801d134 <SD_Witer+0xf6c>)
 801d02a:	eb0d 0102 	add.w	r1, sp, r2
 801d02e:	f7ec fc17 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
 801d032:	2300      	movs	r3, #0
 801d034:	9303      	str	r3, [sp, #12]
 801d036:	9304      	str	r3, [sp, #16]
 801d038:	9305      	str	r3, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801d03a:	4b3d      	ldr	r3, [pc, #244]	; (801d130 <SD_Witer+0xf68>)
 801d03c:	2c00      	cmp	r4, #0
 801d03e:	d167      	bne.n	801d110 <SD_Witer+0xf48>
 801d040:	4956      	ldr	r1, [pc, #344]	; (801d19c <SD_Witer+0xfd4>)
 801d042:	223d      	movs	r2, #61	; 0x3d
 801d044:	483b      	ldr	r0, [pc, #236]	; (801d134 <SD_Witer+0xf6c>)
 801d046:	f7ec fc0b 	bl	8009860 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Blue_Measure); //PPL B
 801d04a:	4b55      	ldr	r3, [pc, #340]	; (801d1a0 <SD_Witer+0xfd8>)
 801d04c:	6818      	ldr	r0, [r3, #0]
 801d04e:	f7e3 fa8b 	bl	8000568 <__aeabi_f2d>
 801d052:	4602      	mov	r2, r0
 801d054:	460b      	mov	r3, r1
 801d056:	a803      	add	r0, sp, #12
 801d058:	4952      	ldr	r1, [pc, #328]	; (801d1a4 <SD_Witer+0xfdc>)
 801d05a:	f004 fe99 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d05e:	220c      	movs	r2, #12
 801d060:	eb0d 0102 	add.w	r1, sp, r2
 801d064:	4b32      	ldr	r3, [pc, #200]	; (801d130 <SD_Witer+0xf68>)
 801d066:	4833      	ldr	r0, [pc, #204]	; (801d134 <SD_Witer+0xf6c>)
 801d068:	f7ec fbfa 	bl	8009860 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801d06c:	4b4e      	ldr	r3, [pc, #312]	; (801d1a8 <SD_Witer+0xfe0>)
								memset(measure_buff, 0, 12);
 801d06e:	2500      	movs	r5, #0
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801d070:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801d072:	9503      	str	r5, [sp, #12]
 801d074:	9504      	str	r5, [sp, #16]
 801d076:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Green_Measure); //PPL G
 801d078:	f7e3 fa76 	bl	8000568 <__aeabi_f2d>
 801d07c:	4602      	mov	r2, r0
 801d07e:	460b      	mov	r3, r1
 801d080:	a803      	add	r0, sp, #12
 801d082:	4948      	ldr	r1, [pc, #288]	; (801d1a4 <SD_Witer+0xfdc>)
 801d084:	f004 fe84 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d088:	220c      	movs	r2, #12
 801d08a:	eb0d 0102 	add.w	r1, sp, r2
 801d08e:	4b28      	ldr	r3, [pc, #160]	; (801d130 <SD_Witer+0xf68>)
 801d090:	4828      	ldr	r0, [pc, #160]	; (801d134 <SD_Witer+0xf6c>)
 801d092:	f7ec fbe5 	bl	8009860 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801d096:	4b45      	ldr	r3, [pc, #276]	; (801d1ac <SD_Witer+0xfe4>)
								memset(measure_buff, 0, 12);
 801d098:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801d09a:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801d09c:	9504      	str	r5, [sp, #16]
 801d09e:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Red_Measure); //PPL R
 801d0a0:	f7e3 fa62 	bl	8000568 <__aeabi_f2d>
 801d0a4:	4602      	mov	r2, r0
 801d0a6:	460b      	mov	r3, r1
 801d0a8:	a803      	add	r0, sp, #12
 801d0aa:	493e      	ldr	r1, [pc, #248]	; (801d1a4 <SD_Witer+0xfdc>)
 801d0ac:	f004 fe70 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d0b0:	220c      	movs	r2, #12
 801d0b2:	eb0d 0102 	add.w	r1, sp, r2
 801d0b6:	4b1e      	ldr	r3, [pc, #120]	; (801d130 <SD_Witer+0xf68>)
 801d0b8:	481e      	ldr	r0, [pc, #120]	; (801d134 <SD_Witer+0xf6c>)
 801d0ba:	f7ec fbd1 	bl	8009860 <f_write>
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801d0be:	4b3c      	ldr	r3, [pc, #240]	; (801d1b0 <SD_Witer+0xfe8>)
								memset(measure_buff, 0, 12);
 801d0c0:	9503      	str	r5, [sp, #12]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801d0c2:	6818      	ldr	r0, [r3, #0]
								memset(measure_buff, 0, 12);
 801d0c4:	9504      	str	r5, [sp, #16]
 801d0c6:	9505      	str	r5, [sp, #20]
								sprintf(measure_buff, "%.2f\t", PPFD_PPL_Far_Red_Measure); //PPL FR
 801d0c8:	f7e3 fa4e 	bl	8000568 <__aeabi_f2d>
 801d0cc:	4602      	mov	r2, r0
 801d0ce:	460b      	mov	r3, r1
 801d0d0:	a803      	add	r0, sp, #12
 801d0d2:	4934      	ldr	r1, [pc, #208]	; (801d1a4 <SD_Witer+0xfdc>)
 801d0d4:	f004 fe5c 	bl	8021d90 <siprintf>
								f_write(&MyFile, &measure_buff, sizeof(measure_buff), &byteswritten);
 801d0d8:	220c      	movs	r2, #12
 801d0da:	4b15      	ldr	r3, [pc, #84]	; (801d130 <SD_Witer+0xf68>)
 801d0dc:	4815      	ldr	r0, [pc, #84]	; (801d134 <SD_Witer+0xf6c>)
 801d0de:	eb0d 0102 	add.w	r1, sp, r2
 801d0e2:	f7ec fbbd 	bl	8009860 <f_write>
								memset(measure_buff, 0, 12);
 801d0e6:	9503      	str	r5, [sp, #12]
 801d0e8:	9504      	str	r5, [sp, #16]
 801d0ea:	9505      	str	r5, [sp, #20]
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801d0ec:	4b10      	ldr	r3, [pc, #64]	; (801d130 <SD_Witer+0xf68>)
 801d0ee:	b994      	cbnz	r4, 801d116 <SD_Witer+0xf4e>
 801d0f0:	221a      	movs	r2, #26
 801d0f2:	4930      	ldr	r1, [pc, #192]	; (801d1b4 <SD_Witer+0xfec>)
 801d0f4:	f7ff bbca 	b.w	801c88c <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Llambda_ru, sizeof(SD_Text_Llambda_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Llambda_en, sizeof(SD_Text_Llambda_en), &byteswritten));//Delta E
 801d0f8:	2223      	movs	r2, #35	; 0x23
 801d0fa:	492f      	ldr	r1, [pc, #188]	; (801d1b8 <SD_Witer+0xff0>)
 801d0fc:	e70e      	b.n	801cf1c <SD_Witer+0xd54>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Le_ru, sizeof(SD_Text_Le_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Le_en, sizeof(SD_Text_Le_en), &byteswritten));//Le
 801d0fe:	2216      	movs	r2, #22
 801d100:	492e      	ldr	r1, [pc, #184]	; (801d1bc <SD_Witer+0xff4>)
 801d102:	e746      	b.n	801cf92 <SD_Witer+0xdca>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lu_ru, sizeof(SD_Text_Lu_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lu_en, sizeof(SD_Text_Lu_en), &byteswritten));//Lu
 801d104:	2213      	movs	r2, #19
 801d106:	492e      	ldr	r1, [pc, #184]	; (801d1c0 <SD_Witer+0xff8>)
 801d108:	e761      	b.n	801cfce <SD_Witer+0xe06>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPL_ru, sizeof(SD_Text_PPL_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPL_en, sizeof(SD_Text_PPL_en), &byteswritten));//PPL
 801d10a:	2215      	movs	r2, #21
 801d10c:	492d      	ldr	r1, [pc, #180]	; (801d1c4 <SD_Witer+0xffc>)
 801d10e:	e77c      	b.n	801d00a <SD_Witer+0xe42>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_PPLRGB_ru, sizeof(SD_Text_PPLRGB_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_PPLRGB_en, sizeof(SD_Text_PPLRGB_en), &byteswritten));//PPFDRGB
 801d110:	2220      	movs	r2, #32
 801d112:	492d      	ldr	r1, [pc, #180]	; (801d1c8 <SD_Witer+0x1000>)
 801d114:	e796      	b.n	801d044 <SD_Witer+0xe7c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_Lb_Lr_ru, sizeof(SD_Text_Lb_Lr_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_Lb_Lr_en, sizeof(SD_Text_Lb_Lr_en), &byteswritten));//Lb/Lr
 801d116:	2214      	movs	r2, #20
 801d118:	492c      	ldr	r1, [pc, #176]	; (801d1cc <SD_Witer+0x1004>)
 801d11a:	f7ff bbb7 	b.w	801c88c <SD_Witer+0x6c4>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CRI_ru, sizeof(SD_Text_CRI_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CRI_en, sizeof(SD_Text_CRI_en), &byteswritten));
 801d11e:	226b      	movs	r2, #107	; 0x6b
 801d120:	492b      	ldr	r1, [pc, #172]	; (801d1d0 <SD_Witer+0x1008>)
 801d122:	f7ff bbf7 	b.w	801c914 <SD_Witer+0x74c>
								(Language_status==Ru)?(f_write(&MyFile, &SD_Text_CQS_ru, sizeof(SD_Text_CQS_ru), &byteswritten)):(f_write(&MyFile, &SD_Text_CQS_en, sizeof(SD_Text_CQS_en), &byteswritten));
 801d126:	226b      	movs	r2, #107	; 0x6b
 801d128:	492a      	ldr	r1, [pc, #168]	; (801d1d4 <SD_Witer+0x100c>)
 801d12a:	e4fc      	b.n	801cb26 <SD_Witer+0x95e>
 801d12c:	08031293 	.word	0x08031293
 801d130:	2008c828 	.word	0x2008c828
 801d134:	2008d880 	.word	0x2008d880
 801d138:	200005fe 	.word	0x200005fe
 801d13c:	200008cd 	.word	0x200008cd
 801d140:	200009ee 	.word	0x200009ee
 801d144:	20000994 	.word	0x20000994
 801d148:	2000095d 	.word	0x2000095d
 801d14c:	20000970 	.word	0x20000970
 801d150:	0803127b 	.word	0x0803127b
 801d154:	20000543 	.word	0x20000543
 801d158:	2000050d 	.word	0x2000050d
 801d15c:	200005cb 	.word	0x200005cb
 801d160:	200007fe 	.word	0x200007fe
 801d164:	200007a7 	.word	0x200007a7
 801d168:	200004eb 	.word	0x200004eb
 801d16c:	20000703 	.word	0x20000703
 801d170:	200077dc 	.word	0x200077dc
 801d174:	0803129b 	.word	0x0803129b
 801d178:	080312a0 	.word	0x080312a0
 801d17c:	200006a1 	.word	0x200006a1
 801d180:	20090edc 	.word	0x20090edc
 801d184:	08031252 	.word	0x08031252
 801d188:	2000078c 	.word	0x2000078c
 801d18c:	20090948 	.word	0x20090948
 801d190:	0803124d 	.word	0x0803124d
 801d194:	200008a6 	.word	0x200008a6
 801d198:	20090950 	.word	0x20090950
 801d19c:	20000854 	.word	0x20000854
 801d1a0:	20090a34 	.word	0x20090a34
 801d1a4:	080312a7 	.word	0x080312a7
 801d1a8:	20090db8 	.word	0x20090db8
 801d1ac:	20090cf4 	.word	0x20090cf4
 801d1b0:	2009094c 	.word	0x2009094c
 801d1b4:	20000671 	.word	0x20000671
 801d1b8:	200006e0 	.word	0x200006e0
 801d1bc:	2000068b 	.word	0x2000068b
 801d1c0:	20000779 	.word	0x20000779
 801d1c4:	20000891 	.word	0x20000891
 801d1c8:	20000834 	.word	0x20000834
 801d1cc:	2000065d 	.word	0x2000065d
 801d1d0:	20000347 	.word	0x20000347
 801d1d4:	2000025d 	.word	0x2000025d
 801d1d8:	2004fbe4 	.word	0x2004fbe4

0801d1dc <Spectral_Axes>:
extern uint8_t TFT_direction;
extern uint16_t WaveLenght_Graph[4];
extern uint16_t PARGraph_B, PARGraph_G, PARGraph_R, PARGraph_IR;
extern uint8_t Graph_Field;

void Spectral_Axes(uint8_t direction){
 801d1dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (direction == 0x00)
 801d1de:	2800      	cmp	r0, #0
 801d1e0:	d145      	bne.n	801d26e <Spectral_Axes+0x92>
	{
		TFT_FillRectangle(18, 95, 20, 412, TFT_Grey); //Yline
 801d1e2:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801d1e6:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801d1ea:	2214      	movs	r2, #20
 801d1ec:	215f      	movs	r1, #95	; 0x5f
 801d1ee:	2012      	movs	r0, #18
 801d1f0:	9400      	str	r4, [sp, #0]
 801d1f2:	f001 f88a 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(18, 412, 270, 414, TFT_Grey);//XLine
 801d1f6:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 801d1fa:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801d1fe:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 801d202:	2012      	movs	r0, #18
 801d204:	9400      	str	r4, [sp, #0]
 801d206:	f001 f880 	bl	801e30a <TFT_FillRectangle>
		
		TFT_DrawLine(18, 334, 268, 334, TFT_Grey); //25
 801d20a:	f44f 73a7 	mov.w	r3, #334	; 0x14e
 801d20e:	4619      	mov	r1, r3
 801d210:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801d214:	2012      	movs	r0, #18
 801d216:	9400      	str	r4, [sp, #0]
 801d218:	f001 f81a 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(18, 257, 268, 257, TFT_Grey); //50
 801d21c:	f240 1301 	movw	r3, #257	; 0x101
 801d220:	4619      	mov	r1, r3
 801d222:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801d226:	2012      	movs	r0, #18
 801d228:	9400      	str	r4, [sp, #0]
 801d22a:	f001 f811 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(18, 181, 268, 181, TFT_Grey); //75
 801d22e:	23b5      	movs	r3, #181	; 0xb5
 801d230:	4619      	mov	r1, r3
 801d232:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801d236:	2012      	movs	r0, #18
 801d238:	9400      	str	r4, [sp, #0]
 801d23a:	f001 f809 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(18, 105, 268, 105, TFT_Grey); //100
 801d23e:	2369      	movs	r3, #105	; 0x69
 801d240:	9400      	str	r4, [sp, #0]
 801d242:	f44f 7286 	mov.w	r2, #268	; 0x10c
 801d246:	4619      	mov	r1, r3
 801d248:	2012      	movs	r0, #18
 801d24a:	f001 f801 	bl	801e250 <TFT_DrawLine>
 801d24e:	2538      	movs	r5, #56	; 0x38
		
		for(uint16_t i = 0; i < 210; i+=40){
			TFT_FillRectangle(56+i, 95, 56+i, 412, TFT_Grey); 
 801d250:	462a      	mov	r2, r5
 801d252:	4628      	mov	r0, r5
 801d254:	3528      	adds	r5, #40	; 0x28
 801d256:	9400      	str	r4, [sp, #0]
 801d258:	f44f 73ce 	mov.w	r3, #412	; 0x19c
 801d25c:	215f      	movs	r1, #95	; 0x5f
 801d25e:	b2ad      	uxth	r5, r5
 801d260:	f001 f853 	bl	801e30a <TFT_FillRectangle>
		for(uint16_t i = 0; i < 210; i+=40){
 801d264:	f5b5 7f94 	cmp.w	r5, #296	; 0x128
 801d268:	d1f2      	bne.n	801d250 <Spectral_Axes+0x74>
		
		for(uint16_t i = 0; i < 260; i+=50){
			TFT_FillRectangle(17, 374-i, 232, 374-i, TFT_Grey);
		}
	}
}
 801d26a:	b003      	add	sp, #12
 801d26c:	bd30      	pop	{r4, r5, pc}
	} else if (direction == 0x01)
 801d26e:	2801      	cmp	r0, #1
 801d270:	d140      	bne.n	801d2f4 <Spectral_Axes+0x118>
		TFT_FillRectangle(253, 70, 255, 406, TFT_Grey); //XLine
 801d272:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801d276:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d27a:	22ff      	movs	r2, #255	; 0xff
 801d27c:	2146      	movs	r1, #70	; 0x46
 801d27e:	20fd      	movs	r0, #253	; 0xfd
 801d280:	9400      	str	r4, [sp, #0]
 801d282:	f001 f842 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(40, 404, 255, 406, TFT_Grey); //Yline
 801d286:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d28a:	22ff      	movs	r2, #255	; 0xff
 801d28c:	f44f 71ca 	mov.w	r1, #404	; 0x194
 801d290:	2028      	movs	r0, #40	; 0x28
 801d292:	9400      	str	r4, [sp, #0]
 801d294:	f001 f839 	bl	801e30a <TFT_FillRectangle>
		TFT_DrawLine(204, 70, 204, 406, TFT_Grey); //25
 801d298:	22cc      	movs	r2, #204	; 0xcc
 801d29a:	4610      	mov	r0, r2
 801d29c:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d2a0:	2146      	movs	r1, #70	; 0x46
 801d2a2:	9400      	str	r4, [sp, #0]
 801d2a4:	f000 ffd4 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(151, 70, 151, 406, TFT_Grey); //50
 801d2a8:	2297      	movs	r2, #151	; 0x97
 801d2aa:	4610      	mov	r0, r2
 801d2ac:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d2b0:	2146      	movs	r1, #70	; 0x46
 801d2b2:	9400      	str	r4, [sp, #0]
 801d2b4:	f000 ffcc 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(98, 70, 98, 406, TFT_Grey); //75
 801d2b8:	2262      	movs	r2, #98	; 0x62
 801d2ba:	4610      	mov	r0, r2
 801d2bc:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d2c0:	2146      	movs	r1, #70	; 0x46
 801d2c2:	9400      	str	r4, [sp, #0]
 801d2c4:	f000 ffc4 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(45, 70, 45, 406, TFT_Grey); //100
 801d2c8:	222d      	movs	r2, #45	; 0x2d
 801d2ca:	9400      	str	r4, [sp, #0]
 801d2cc:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d2d0:	2146      	movs	r1, #70	; 0x46
 801d2d2:	4610      	mov	r0, r2
 801d2d4:	f000 ffbc 	bl	801e250 <TFT_DrawLine>
 801d2d8:	f44f 75b1 	mov.w	r5, #354	; 0x162
			TFT_FillRectangle(40, 354-i, 255, 354-i, TFT_Grey);
 801d2dc:	462b      	mov	r3, r5
 801d2de:	4629      	mov	r1, r5
 801d2e0:	3d32      	subs	r5, #50	; 0x32
 801d2e2:	9400      	str	r4, [sp, #0]
 801d2e4:	22ff      	movs	r2, #255	; 0xff
 801d2e6:	2028      	movs	r0, #40	; 0x28
 801d2e8:	b2ad      	uxth	r5, r5
 801d2ea:	f001 f80e 	bl	801e30a <TFT_FillRectangle>
		for(uint16_t i = 0; i < 260; i+=50){
 801d2ee:	2d36      	cmp	r5, #54	; 0x36
 801d2f0:	d1f4      	bne.n	801d2dc <Spectral_Axes+0x100>
 801d2f2:	e7ba      	b.n	801d26a <Spectral_Axes+0x8e>
	} else if (direction == 0x02)
 801d2f4:	2802      	cmp	r0, #2
 801d2f6:	d1b8      	bne.n	801d26a <Spectral_Axes+0x8e>
		TFT_FillRectangle(18, 74, 16, 406, TFT_Grey); //XLine
 801d2f8:	f249 44d2 	movw	r4, #38098	; 0x94d2
 801d2fc:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d300:	2210      	movs	r2, #16
 801d302:	214a      	movs	r1, #74	; 0x4a
 801d304:	2012      	movs	r0, #18
 801d306:	9400      	str	r4, [sp, #0]
 801d308:	f000 ffff 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(17, 74, 232, 76, TFT_Grey); //Yline
 801d30c:	234c      	movs	r3, #76	; 0x4c
 801d30e:	22e8      	movs	r2, #232	; 0xe8
 801d310:	214a      	movs	r1, #74	; 0x4a
 801d312:	2011      	movs	r0, #17
 801d314:	9400      	str	r4, [sp, #0]
 801d316:	f000 fff8 	bl	801e30a <TFT_FillRectangle>
		TFT_DrawLine(68, 70, 68, 406, TFT_Grey); //25
 801d31a:	2244      	movs	r2, #68	; 0x44
 801d31c:	4610      	mov	r0, r2
 801d31e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d322:	2146      	movs	r1, #70	; 0x46
 801d324:	9400      	str	r4, [sp, #0]
 801d326:	f000 ff93 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(121, 70, 121, 406, TFT_Grey); //50
 801d32a:	2279      	movs	r2, #121	; 0x79
 801d32c:	4610      	mov	r0, r2
 801d32e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d332:	2146      	movs	r1, #70	; 0x46
 801d334:	9400      	str	r4, [sp, #0]
 801d336:	f000 ff8b 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(174, 70, 174, 406, TFT_Grey); //75
 801d33a:	22ae      	movs	r2, #174	; 0xae
 801d33c:	4610      	mov	r0, r2
 801d33e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d342:	2146      	movs	r1, #70	; 0x46
 801d344:	9400      	str	r4, [sp, #0]
 801d346:	f000 ff83 	bl	801e250 <TFT_DrawLine>
		TFT_DrawLine(227, 70, 227, 406, TFT_Grey); //100
 801d34a:	22e3      	movs	r2, #227	; 0xe3
 801d34c:	9400      	str	r4, [sp, #0]
 801d34e:	f44f 73cb 	mov.w	r3, #406	; 0x196
 801d352:	2146      	movs	r1, #70	; 0x46
 801d354:	4610      	mov	r0, r2
 801d356:	f000 ff7b 	bl	801e250 <TFT_DrawLine>
 801d35a:	f44f 75bb 	mov.w	r5, #374	; 0x176
			TFT_FillRectangle(17, 374-i, 232, 374-i, TFT_Grey);
 801d35e:	462b      	mov	r3, r5
 801d360:	4629      	mov	r1, r5
 801d362:	3d32      	subs	r5, #50	; 0x32
 801d364:	9400      	str	r4, [sp, #0]
 801d366:	22e8      	movs	r2, #232	; 0xe8
 801d368:	2011      	movs	r0, #17
 801d36a:	b2ad      	uxth	r5, r5
 801d36c:	f000 ffcd 	bl	801e30a <TFT_FillRectangle>
		for(uint16_t i = 0; i < 260; i+=50){
 801d370:	2d4a      	cmp	r5, #74	; 0x4a
 801d372:	d1f4      	bne.n	801d35e <Spectral_Axes+0x182>
 801d374:	e779      	b.n	801d26a <Spectral_Axes+0x8e>
	...

0801d378 <Spectral_PAR_Range>:

void Spectral_PAR_Range(uint8_t direction){
 801d378:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d37c:	4d6b      	ldr	r5, [pc, #428]	; (801d52c <Spectral_PAR_Range+0x1b4>)
 801d37e:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 801d538 <Spectral_PAR_Range+0x1c0>
 801d382:	4f6b      	ldr	r7, [pc, #428]	; (801d530 <Spectral_PAR_Range+0x1b8>)
 801d384:	4e6b      	ldr	r6, [pc, #428]	; (801d534 <Spectral_PAR_Range+0x1bc>)
	if (direction == 0x00)
 801d386:	2800      	cmp	r0, #0
 801d388:	d146      	bne.n	801d418 <Spectral_PAR_Range+0xa0>
	{
		TFT_FillRectangle(19, 105, 19+PARGraph_B/4, 411, TFT_Black_Bkgr);
 801d38a:	882a      	ldrh	r2, [r5, #0]
 801d38c:	2363      	movs	r3, #99	; 0x63
 801d38e:	0892      	lsrs	r2, r2, #2
 801d390:	9300      	str	r3, [sp, #0]
 801d392:	3213      	adds	r2, #19
 801d394:	f240 139b 	movw	r3, #411	; 0x19b
 801d398:	2169      	movs	r1, #105	; 0x69
 801d39a:	2013      	movs	r0, #19
 801d39c:	f000 ffb5 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_B/4, 105, 19+PARGraph_G/4, 411, TFT_PAR_Blue);
 801d3a0:	8828      	ldrh	r0, [r5, #0]
 801d3a2:	f8b8 2000 	ldrh.w	r2, [r8]
 801d3a6:	f242 23b2 	movw	r3, #8882	; 0x22b2
 801d3aa:	0892      	lsrs	r2, r2, #2
 801d3ac:	0880      	lsrs	r0, r0, #2
 801d3ae:	9300      	str	r3, [sp, #0]
 801d3b0:	3213      	adds	r2, #19
 801d3b2:	f240 139b 	movw	r3, #411	; 0x19b
 801d3b6:	2169      	movs	r1, #105	; 0x69
 801d3b8:	3013      	adds	r0, #19
 801d3ba:	f000 ffa6 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_G/4, 105, 19+PARGraph_R/4, 411, TFT_PAR_Green);
 801d3be:	883a      	ldrh	r2, [r7, #0]
 801d3c0:	f8b8 0000 	ldrh.w	r0, [r8]
 801d3c4:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801d3c8:	0892      	lsrs	r2, r2, #2
 801d3ca:	0880      	lsrs	r0, r0, #2
 801d3cc:	9300      	str	r3, [sp, #0]
 801d3ce:	3213      	adds	r2, #19
 801d3d0:	f240 139b 	movw	r3, #411	; 0x19b
 801d3d4:	2169      	movs	r1, #105	; 0x69
 801d3d6:	3013      	adds	r0, #19
 801d3d8:	f000 ff97 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_R/4, 105, 19+PARGraph_IR/4, 411, TFT_PAR_Red);
 801d3dc:	8838      	ldrh	r0, [r7, #0]
 801d3de:	8832      	ldrh	r2, [r6, #0]
 801d3e0:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801d3e4:	0892      	lsrs	r2, r2, #2
 801d3e6:	0880      	lsrs	r0, r0, #2
 801d3e8:	9300      	str	r3, [sp, #0]
 801d3ea:	3213      	adds	r2, #19
 801d3ec:	f240 139b 	movw	r3, #411	; 0x19b
 801d3f0:	2169      	movs	r1, #105	; 0x69
 801d3f2:	3013      	adds	r0, #19
 801d3f4:	f000 ff89 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle(19+PARGraph_IR/4, 105, 19+1000/4, 411, TFT_PAR_IRed);
 801d3f8:	8830      	ldrh	r0, [r6, #0]
 801d3fa:	f641 3346 	movw	r3, #6982	; 0x1b46
 801d3fe:	0880      	lsrs	r0, r0, #2
 801d400:	9300      	str	r3, [sp, #0]
 801d402:	f240 120d 	movw	r2, #269	; 0x10d
 801d406:	f240 139b 	movw	r3, #411	; 0x19b
 801d40a:	2169      	movs	r1, #105	; 0x69
 801d40c:	3013      	adds	r0, #19
	}else
	{
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801d40e:	f000 ff7c 	bl	801e30a <TFT_FillRectangle>
	}
}
 801d412:	b002      	add	sp, #8
 801d414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if(direction == 0x01)
 801d418:	2801      	cmp	r0, #1
 801d41a:	f04f 0403 	mov.w	r4, #3
 801d41e:	d142      	bne.n	801d4a6 <Spectral_PAR_Range+0x12e>
		TFT_FillRectangle( 45, 403-PARGraph_G/3, 253, 403-PARGraph_B/3, TFT_PAR_Blue);
 801d420:	882b      	ldrh	r3, [r5, #0]
 801d422:	f8b8 1000 	ldrh.w	r1, [r8]
 801d426:	fbb3 f3f4 	udiv	r3, r3, r4
 801d42a:	f240 1593 	movw	r5, #403	; 0x193
 801d42e:	f242 22b2 	movw	r2, #8882	; 0x22b2
 801d432:	1aeb      	subs	r3, r5, r3
 801d434:	fbb1 f1f4 	udiv	r1, r1, r4
 801d438:	1a69      	subs	r1, r5, r1
 801d43a:	9200      	str	r2, [sp, #0]
 801d43c:	b29b      	uxth	r3, r3
 801d43e:	22fd      	movs	r2, #253	; 0xfd
 801d440:	b289      	uxth	r1, r1
 801d442:	202d      	movs	r0, #45	; 0x2d
 801d444:	f000 ff61 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_R/3, 253, 403-PARGraph_G/3, TFT_PAR_Green);
 801d448:	8839      	ldrh	r1, [r7, #0]
 801d44a:	f8b8 3000 	ldrh.w	r3, [r8]
 801d44e:	fbb1 f1f4 	udiv	r1, r1, r4
 801d452:	f64c 7238 	movw	r2, #53048	; 0xcf38
 801d456:	fbb3 f3f4 	udiv	r3, r3, r4
 801d45a:	1a69      	subs	r1, r5, r1
 801d45c:	1aeb      	subs	r3, r5, r3
 801d45e:	9200      	str	r2, [sp, #0]
 801d460:	b29b      	uxth	r3, r3
 801d462:	22fd      	movs	r2, #253	; 0xfd
 801d464:	b289      	uxth	r1, r1
 801d466:	202d      	movs	r0, #45	; 0x2d
 801d468:	f000 ff4f 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-PARGraph_IR/3, 253, 403-PARGraph_R/3, TFT_PAR_Red);
 801d46c:	883b      	ldrh	r3, [r7, #0]
 801d46e:	8831      	ldrh	r1, [r6, #0]
 801d470:	fbb3 f3f4 	udiv	r3, r3, r4
 801d474:	f24f 52b9 	movw	r2, #62905	; 0xf5b9
 801d478:	1aeb      	subs	r3, r5, r3
 801d47a:	fbb1 f1f4 	udiv	r1, r1, r4
 801d47e:	1a69      	subs	r1, r5, r1
 801d480:	9200      	str	r2, [sp, #0]
 801d482:	b29b      	uxth	r3, r3
 801d484:	22fd      	movs	r2, #253	; 0xfd
 801d486:	b289      	uxth	r1, r1
 801d488:	202d      	movs	r0, #45	; 0x2d
 801d48a:	f000 ff3e 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle( 45, 403-1000/3, 253, 403-PARGraph_IR/3, TFT_PAR_IRed);
 801d48e:	f641 3246 	movw	r2, #6982	; 0x1b46
 801d492:	8833      	ldrh	r3, [r6, #0]
 801d494:	fbb3 f3f4 	udiv	r3, r3, r4
 801d498:	1aeb      	subs	r3, r5, r3
 801d49a:	9200      	str	r2, [sp, #0]
 801d49c:	b29b      	uxth	r3, r3
 801d49e:	22fd      	movs	r2, #253	; 0xfd
 801d4a0:	2146      	movs	r1, #70	; 0x46
 801d4a2:	202d      	movs	r0, #45	; 0x2d
 801d4a4:	e7b3      	b.n	801d40e <Spectral_PAR_Range+0x96>
		TFT_FillRectangle( 19, 74+PARGraph_B/3, 227, 74+PARGraph_G/3, TFT_PAR_Blue);
 801d4a6:	8829      	ldrh	r1, [r5, #0]
 801d4a8:	f8b8 3000 	ldrh.w	r3, [r8]
 801d4ac:	fbb1 f1f4 	udiv	r1, r1, r4
 801d4b0:	f242 22b2 	movw	r2, #8882	; 0x22b2
 801d4b4:	fbb3 f3f4 	udiv	r3, r3, r4
 801d4b8:	314a      	adds	r1, #74	; 0x4a
 801d4ba:	334a      	adds	r3, #74	; 0x4a
 801d4bc:	9200      	str	r2, [sp, #0]
 801d4be:	b29b      	uxth	r3, r3
 801d4c0:	22e3      	movs	r2, #227	; 0xe3
 801d4c2:	b289      	uxth	r1, r1
 801d4c4:	2013      	movs	r0, #19
 801d4c6:	f000 ff20 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_G/3, 227, 74+PARGraph_R/3, TFT_PAR_Green);
 801d4ca:	883b      	ldrh	r3, [r7, #0]
 801d4cc:	f8b8 1000 	ldrh.w	r1, [r8]
 801d4d0:	fbb3 f3f4 	udiv	r3, r3, r4
 801d4d4:	f64c 7238 	movw	r2, #53048	; 0xcf38
 801d4d8:	334a      	adds	r3, #74	; 0x4a
 801d4da:	fbb1 f1f4 	udiv	r1, r1, r4
 801d4de:	314a      	adds	r1, #74	; 0x4a
 801d4e0:	9200      	str	r2, [sp, #0]
 801d4e2:	b29b      	uxth	r3, r3
 801d4e4:	22e3      	movs	r2, #227	; 0xe3
 801d4e6:	b289      	uxth	r1, r1
 801d4e8:	2013      	movs	r0, #19
 801d4ea:	f000 ff0e 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_R/3, 227, 74+PARGraph_IR/3, TFT_PAR_Red);
 801d4ee:	8839      	ldrh	r1, [r7, #0]
 801d4f0:	8833      	ldrh	r3, [r6, #0]
 801d4f2:	fbb1 f1f4 	udiv	r1, r1, r4
 801d4f6:	f24f 52b9 	movw	r2, #62905	; 0xf5b9
 801d4fa:	fbb3 f3f4 	udiv	r3, r3, r4
 801d4fe:	314a      	adds	r1, #74	; 0x4a
 801d500:	334a      	adds	r3, #74	; 0x4a
 801d502:	9200      	str	r2, [sp, #0]
 801d504:	b29b      	uxth	r3, r3
 801d506:	22e3      	movs	r2, #227	; 0xe3
 801d508:	b289      	uxth	r1, r1
 801d50a:	2013      	movs	r0, #19
 801d50c:	f000 fefd 	bl	801e30a <TFT_FillRectangle>
		TFT_FillRectangle( 19, 74+PARGraph_IR/3, 227, 74+1000/3, TFT_PAR_IRed);
 801d510:	f641 3346 	movw	r3, #6982	; 0x1b46
 801d514:	8831      	ldrh	r1, [r6, #0]
 801d516:	fbb1 f1f4 	udiv	r1, r1, r4
 801d51a:	314a      	adds	r1, #74	; 0x4a
 801d51c:	9300      	str	r3, [sp, #0]
 801d51e:	22e3      	movs	r2, #227	; 0xe3
 801d520:	f240 1397 	movw	r3, #407	; 0x197
 801d524:	b289      	uxth	r1, r1
 801d526:	2013      	movs	r0, #19
 801d528:	e771      	b.n	801d40e <Spectral_PAR_Range+0x96>
 801d52a:	bf00      	nop
 801d52c:	20090cfa 	.word	0x20090cfa
 801d530:	20090f20 	.word	0x20090f20
 801d534:	20090cf8 	.word	0x20090cf8
 801d538:	20090dbc 	.word	0x20090dbc

0801d53c <Spectral_Axes_Text>:


void Spectral_Axes_Text(uint8_t direction){
 801d53c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char buffer[4] = {0};
 801d53e:	ac02      	add	r4, sp, #8
 801d540:	2300      	movs	r3, #0
 801d542:	f844 3d04 	str.w	r3, [r4, #-4]!
	
	if (direction == 0x00)
 801d546:	4606      	mov	r6, r0
 801d548:	4d67      	ldr	r5, [pc, #412]	; (801d6e8 <Spectral_Axes_Text+0x1ac>)
 801d54a:	2800      	cmp	r0, #0
 801d54c:	d162      	bne.n	801d614 <Spectral_Axes_Text+0xd8>
	{
		TFT_SetTextColor(TFT_White);
 801d54e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801d552:	f001 f909 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801d556:	2063      	movs	r0, #99	; 0x63
 801d558:	f001 f90c 	bl	801e774 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801d55c:	4863      	ldr	r0, [pc, #396]	; (801d6ec <Spectral_Axes_Text+0x1b0>)
 801d55e:	f001 f8fd 	bl	801e75c <TFT_SetFont>

		TFT_DrawChar(5, 410, '0');
 801d562:	2230      	movs	r2, #48	; 0x30
 801d564:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 801d568:	2005      	movs	r0, #5
 801d56a:	f001 f9c1 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(7, 257, '.');
 801d56e:	222e      	movs	r2, #46	; 0x2e
 801d570:	f240 1101 	movw	r1, #257	; 0x101
 801d574:	2007      	movs	r0, #7
 801d576:	f001 f9bb 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(3, 257, '0');
 801d57a:	2230      	movs	r2, #48	; 0x30
 801d57c:	f240 1101 	movw	r1, #257	; 0x101
 801d580:	2003      	movs	r0, #3
 801d582:	f001 f9b5 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(11, 257, '5');
 801d586:	2235      	movs	r2, #53	; 0x35
 801d588:	f240 1101 	movw	r1, #257	; 0x101
 801d58c:	200b      	movs	r0, #11
 801d58e:	f001 f9af 	bl	801e8f0 <TFT_DrawChar>
		
		TFT_DrawChar(0, 105, '1');
 801d592:	2231      	movs	r2, #49	; 0x31
 801d594:	2169      	movs	r1, #105	; 0x69
 801d596:	4630      	mov	r0, r6
 801d598:	f001 f9aa 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(4, 105, '.');
 801d59c:	222e      	movs	r2, #46	; 0x2e
 801d59e:	2169      	movs	r1, #105	; 0x69
 801d5a0:	2004      	movs	r0, #4
 801d5a2:	f001 f9a5 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(9, 105, '0');
 801d5a6:	2230      	movs	r2, #48	; 0x30
 801d5a8:	2169      	movs	r1, #105	; 0x69
 801d5aa:	2009      	movs	r0, #9
 801d5ac:	f001 f9a0 	bl	801e8f0 <TFT_DrawChar>
		
		
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801d5b0:	882a      	ldrh	r2, [r5, #0]
 801d5b2:	494f      	ldr	r1, [pc, #316]	; (801d6f0 <Spectral_Axes_Text+0x1b4>)
 801d5b4:	4620      	mov	r0, r4
 801d5b6:	f004 fbeb 	bl	8021d90 <siprintf>
		TFT_DisplayString(11, 416, (uint8_t *)buffer, LEFT_MODE);
 801d5ba:	2303      	movs	r3, #3
 801d5bc:	4622      	mov	r2, r4
 801d5be:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801d5c2:	200b      	movs	r0, #11
 801d5c4:	f001 f9ec 	bl	801e9a0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801d5c8:	886a      	ldrh	r2, [r5, #2]
 801d5ca:	4949      	ldr	r1, [pc, #292]	; (801d6f0 <Spectral_Axes_Text+0x1b4>)
 801d5cc:	4620      	mov	r0, r4
 801d5ce:	f004 fbdf 	bl	8021d90 <siprintf>
		TFT_DisplayString(85, 416, (uint8_t *)buffer, LEFT_MODE);
 801d5d2:	2303      	movs	r3, #3
 801d5d4:	4622      	mov	r2, r4
 801d5d6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801d5da:	2055      	movs	r0, #85	; 0x55
 801d5dc:	f001 f9e0 	bl	801e9a0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801d5e0:	88aa      	ldrh	r2, [r5, #4]
 801d5e2:	4943      	ldr	r1, [pc, #268]	; (801d6f0 <Spectral_Axes_Text+0x1b4>)
 801d5e4:	4620      	mov	r0, r4
 801d5e6:	f004 fbd3 	bl	8021d90 <siprintf>
		TFT_DisplayString(165, 416, (uint8_t *)buffer, LEFT_MODE);
 801d5ea:	2303      	movs	r3, #3
 801d5ec:	4622      	mov	r2, r4
 801d5ee:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801d5f2:	20a5      	movs	r0, #165	; 0xa5
 801d5f4:	f001 f9d4 	bl	801e9a0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801d5f8:	88ea      	ldrh	r2, [r5, #6]
 801d5fa:	493d      	ldr	r1, [pc, #244]	; (801d6f0 <Spectral_Axes_Text+0x1b4>)
 801d5fc:	4620      	mov	r0, r4
 801d5fe:	f004 fbc7 	bl	8021d90 <siprintf>
		TFT_DisplayString(245, 416, (uint8_t *)buffer, LEFT_MODE);
 801d602:	2303      	movs	r3, #3
 801d604:	4622      	mov	r2, r4
 801d606:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 801d60a:	20f5      	movs	r0, #245	; 0xf5
 801d60c:	f001 f9c8 	bl	801e9a0 <TFT_DisplayString>
		TFT_DrawChar(62, 43, '.');
		TFT_DrawChar(67, 43, '0');

		TFT_direction = 0x00;
	}
}
 801d610:	b003      	add	sp, #12
 801d612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d614:	4f37      	ldr	r7, [pc, #220]	; (801d6f4 <Spectral_Axes_Text+0x1b8>)
		if(direction == 0x01){TFT_direction = 0x01;} 
 801d616:	2801      	cmp	r0, #1
		else {TFT_direction = 0x02;}
 801d618:	bf14      	ite	ne
 801d61a:	2302      	movne	r3, #2
		if(direction == 0x01){TFT_direction = 0x01;} 
 801d61c:	7038      	strbeq	r0, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801d61e:	f64f 70ff 	movw	r0, #65535	; 0xffff
		else {TFT_direction = 0x02;}
 801d622:	bf18      	it	ne
 801d624:	703b      	strbne	r3, [r7, #0]
		TFT_SetTextColor(TFT_White);
 801d626:	f001 f89f 	bl	801e768 <TFT_SetTextColor>
		TFT_SetBackColor(TFT_Black_Bkgr);
 801d62a:	2063      	movs	r0, #99	; 0x63
 801d62c:	f001 f8a2 	bl	801e774 <TFT_SetBackColor>
		TFT_SetFont(&Font6EN_arch_big);
 801d630:	482e      	ldr	r0, [pc, #184]	; (801d6ec <Spectral_Axes_Text+0x1b0>)
 801d632:	f001 f893 	bl	801e75c <TFT_SetFont>
		sprintf (buffer, "%.0u", WaveLenght_Graph[0]);
 801d636:	882a      	ldrh	r2, [r5, #0]
 801d638:	492d      	ldr	r1, [pc, #180]	; (801d6f0 <Spectral_Axes_Text+0x1b4>)
 801d63a:	4620      	mov	r0, r4
 801d63c:	f004 fba8 	bl	8021d90 <siprintf>
		TFT_DisplayString(65, 258, (uint8_t *)buffer, LEFT_MODE);
 801d640:	2303      	movs	r3, #3
 801d642:	4622      	mov	r2, r4
 801d644:	f44f 7181 	mov.w	r1, #258	; 0x102
 801d648:	2041      	movs	r0, #65	; 0x41
 801d64a:	f001 f9a9 	bl	801e9a0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[1]);
 801d64e:	886a      	ldrh	r2, [r5, #2]
 801d650:	4927      	ldr	r1, [pc, #156]	; (801d6f0 <Spectral_Axes_Text+0x1b4>)
 801d652:	4620      	mov	r0, r4
 801d654:	f004 fb9c 	bl	8021d90 <siprintf>
		TFT_DisplayString(165, 258, (uint8_t *)buffer, LEFT_MODE);
 801d658:	2303      	movs	r3, #3
 801d65a:	4622      	mov	r2, r4
 801d65c:	f44f 7181 	mov.w	r1, #258	; 0x102
 801d660:	20a5      	movs	r0, #165	; 0xa5
 801d662:	f001 f99d 	bl	801e9a0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[2]);
 801d666:	88aa      	ldrh	r2, [r5, #4]
 801d668:	4921      	ldr	r1, [pc, #132]	; (801d6f0 <Spectral_Axes_Text+0x1b4>)
 801d66a:	4620      	mov	r0, r4
 801d66c:	f004 fb90 	bl	8021d90 <siprintf>
		TFT_DisplayString(265, 258, (uint8_t *)buffer, LEFT_MODE);
 801d670:	2303      	movs	r3, #3
 801d672:	4622      	mov	r2, r4
 801d674:	f44f 7181 	mov.w	r1, #258	; 0x102
 801d678:	f240 1009 	movw	r0, #265	; 0x109
 801d67c:	f001 f990 	bl	801e9a0 <TFT_DisplayString>
		sprintf (buffer, "%.0u", WaveLenght_Graph[3]);
 801d680:	88ea      	ldrh	r2, [r5, #6]
 801d682:	491b      	ldr	r1, [pc, #108]	; (801d6f0 <Spectral_Axes_Text+0x1b4>)
 801d684:	4620      	mov	r0, r4
 801d686:	f004 fb83 	bl	8021d90 <siprintf>
		TFT_DisplayString(365, 258, (uint8_t *)buffer, LEFT_MODE);
 801d68a:	2303      	movs	r3, #3
 801d68c:	4622      	mov	r2, r4
 801d68e:	f44f 7181 	mov.w	r1, #258	; 0x102
 801d692:	f240 106d 	movw	r0, #365	; 0x16d
 801d696:	f001 f983 	bl	801e9a0 <TFT_DisplayString>
		TFT_DrawChar(65, 250, '0');
 801d69a:	2230      	movs	r2, #48	; 0x30
 801d69c:	21fa      	movs	r1, #250	; 0xfa
 801d69e:	2041      	movs	r0, #65	; 0x41
 801d6a0:	f001 f926 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(57, 149, '0');
 801d6a4:	2230      	movs	r2, #48	; 0x30
 801d6a6:	2195      	movs	r1, #149	; 0x95
 801d6a8:	2039      	movs	r0, #57	; 0x39
 801d6aa:	f001 f921 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(62, 149, '.');
 801d6ae:	222e      	movs	r2, #46	; 0x2e
 801d6b0:	2195      	movs	r1, #149	; 0x95
 801d6b2:	203e      	movs	r0, #62	; 0x3e
 801d6b4:	f001 f91c 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(67, 149, '5');
 801d6b8:	2235      	movs	r2, #53	; 0x35
 801d6ba:	2195      	movs	r1, #149	; 0x95
 801d6bc:	2043      	movs	r0, #67	; 0x43
 801d6be:	f001 f917 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(57, 43, '1');
 801d6c2:	2231      	movs	r2, #49	; 0x31
 801d6c4:	212b      	movs	r1, #43	; 0x2b
 801d6c6:	2039      	movs	r0, #57	; 0x39
 801d6c8:	f001 f912 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(62, 43, '.');
 801d6cc:	222e      	movs	r2, #46	; 0x2e
 801d6ce:	212b      	movs	r1, #43	; 0x2b
 801d6d0:	203e      	movs	r0, #62	; 0x3e
 801d6d2:	f001 f90d 	bl	801e8f0 <TFT_DrawChar>
		TFT_DrawChar(67, 43, '0');
 801d6d6:	2230      	movs	r2, #48	; 0x30
 801d6d8:	212b      	movs	r1, #43	; 0x2b
 801d6da:	2043      	movs	r0, #67	; 0x43
 801d6dc:	f001 f908 	bl	801e8f0 <TFT_DrawChar>
		TFT_direction = 0x00;
 801d6e0:	2300      	movs	r3, #0
 801d6e2:	703b      	strb	r3, [r7, #0]
}
 801d6e4:	e794      	b.n	801d610 <Spectral_Axes_Text+0xd4>
 801d6e6:	bf00      	nop
 801d6e8:	20050be4 	.word	0x20050be4
 801d6ec:	20000210 	.word	0x20000210
 801d6f0:	080312b2 	.word	0x080312b2
 801d6f4:	20004c10 	.word	0x20004c10

0801d6f8 <Spectral_DrawGraph_Const>:
		memset(graph_data_old, 0, sizeof(graph_data_old));	
}


void Spectral_DrawGraph_Const(uint16_t ZeroX, uint16_t ZeroY, uint16_t *GraphData, uint16_t color, uint8_t direction)
{
 801d6f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d6fc:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
		uint16_t i, j = 0;
		uint16_t graph_data[335];
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801d700:	f1b8 0f00 	cmp.w	r8, #0
 801d704:	bf0c      	ite	eq
 801d706:	f04f 09f0 	moveq.w	r9, #240	; 0xf0
 801d70a:	f44f 79a5 	movne.w	r9, #330	; 0x14a
{
 801d70e:	4682      	mov	sl, r0
 801d710:	461f      	mov	r7, r3
 801d712:	4614      	mov	r4, r2
 801d714:	eb02 0649 	add.w	r6, r2, r9, lsl #1
		uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801d718:	2500      	movs	r5, #0
		uint8_t	step = (direction == 0x00)? 4 :3;
	
		for(i = 0; i < graph_lenht; i++)
	{
		if(direction == 0x00){
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801d71a:	f100 0b01 	add.w	fp, r0, #1
 801d71e:	b2a8      	uxth	r0, r5
		if(direction == 0x00){
 801d720:	f1b8 0f00 	cmp.w	r8, #0
 801d724:	d10e      	bne.n	801d744 <Spectral_DrawGraph_Const+0x4c>
			TFT_DrawLine(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);} 
 801d726:	8863      	ldrh	r3, [r4, #2]
 801d728:	8821      	ldrh	r1, [r4, #0]
 801d72a:	eb00 020b 	add.w	r2, r0, fp
 801d72e:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801d732:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801d736:	4450      	add	r0, sl
		else if(direction == 0x01)
		{
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801d738:	9700      	str	r7, [sp, #0]
 801d73a:	b29b      	uxth	r3, r3
 801d73c:	b292      	uxth	r2, r2
 801d73e:	b289      	uxth	r1, r1
 801d740:	b280      	uxth	r0, r0
 801d742:	e013      	b.n	801d76c <Spectral_DrawGraph_Const+0x74>
		else if(direction == 0x01)
 801d744:	f1b8 0f01 	cmp.w	r8, #1
 801d748:	d11d      	bne.n	801d786 <Spectral_DrawGraph_Const+0x8e>
			TFT_DrawLine(253 - GraphData[graph_lenht-i], 72+1+i, 253 - GraphData[graph_lenht-i+1], 72+i, color);
 801d74a:	8872      	ldrh	r2, [r6, #2]
 801d74c:	f8b6 e000 	ldrh.w	lr, [r6]
 801d750:	9700      	str	r7, [sp, #0]
 801d752:	f100 0348 	add.w	r3, r0, #72	; 0x48
 801d756:	f100 0149 	add.w	r1, r0, #73	; 0x49
 801d75a:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801d75e:	f1ce 0efd 	rsb	lr, lr, #253	; 0xfd
 801d762:	b29b      	uxth	r3, r3
 801d764:	b292      	uxth	r2, r2
 801d766:	b289      	uxth	r1, r1
 801d768:	fa1f f08e 	uxth.w	r0, lr
 801d76c:	3501      	adds	r5, #1
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801d76e:	f000 fd6f 	bl	801e250 <TFT_DrawLine>
		for(i = 0; i < graph_lenht; i++)
 801d772:	b2ab      	uxth	r3, r5
 801d774:	4599      	cmp	r9, r3
 801d776:	f104 0402 	add.w	r4, r4, #2
 801d77a:	f1a6 0602 	sub.w	r6, r6, #2
 801d77e:	d8ce      	bhi.n	801d71e <Spectral_DrawGraph_Const+0x26>
	}
}
 801d780:	b003      	add	sp, #12
 801d782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else {TFT_DrawLine(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);}
 801d786:	f100 034d 	add.w	r3, r0, #77	; 0x4d
 801d78a:	8862      	ldrh	r2, [r4, #2]
 801d78c:	f100 014c 	add.w	r1, r0, #76	; 0x4c
 801d790:	8820      	ldrh	r0, [r4, #0]
 801d792:	3212      	adds	r2, #18
 801d794:	3012      	adds	r0, #18
 801d796:	e7cf      	b.n	801d738 <Spectral_DrawGraph_Const+0x40>

0801d798 <Spectral_DrawGraph_Line2>:
				flag_spectral = 0;}
					}
}

void Spectral_DrawGraph_Line2(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint16_t color, uint8_t direction)
{
 801d798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d79c:	b085      	sub	sp, #20
 801d79e:	4699      	mov	r9, r3
 801d7a0:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
    float buf_pix;
    uint16_t i, j = 0;
    uint16_t graph_data[335];
    uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801d7a4:	2c00      	cmp	r4, #0
 801d7a6:	bf0c      	ite	eq
 801d7a8:	23f0      	moveq	r3, #240	; 0xf0
 801d7aa:	f44f 73a5 	movne.w	r3, #330	; 0x14a
 801d7ae:	9302      	str	r3, [sp, #8]
    uint8_t    step = (direction == 0x00)? 4 :3;
    uint16_t  jj = 0, ii = 0;

//    screen_cnt++;
//	screen_cnt > 200 ||
    if( direction != Rotation_Screen_Spectral_Old2){
 801d7b0:	4b41      	ldr	r3, [pc, #260]	; (801d8b8 <Spectral_DrawGraph_Line2+0x120>)
{
 801d7b2:	4616      	mov	r6, r2
    if( direction != Rotation_Screen_Spectral_Old2){
 801d7b4:	781a      	ldrb	r2, [r3, #0]
 801d7b6:	42a2      	cmp	r2, r4
{
 801d7b8:	4682      	mov	sl, r0
    if( direction != Rotation_Screen_Spectral_Old2){
 801d7ba:	d01a      	beq.n	801d7f2 <Spectral_DrawGraph_Line2+0x5a>
			Rotation_Screen_Spectral_Old2 = direction;
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801d7bc:	2563      	movs	r5, #99	; 0x63
			Rotation_Screen_Spectral_Old2 = direction;
 801d7be:	701c      	strb	r4, [r3, #0]
			TFT_FillRectangle(1, 55, 271, 421, TFT_Black_Bkgr);
 801d7c0:	f240 120f 	movw	r2, #271	; 0x10f
 801d7c4:	f240 13a5 	movw	r3, #421	; 0x1a5
 801d7c8:	9500      	str	r5, [sp, #0]
 801d7ca:	2137      	movs	r1, #55	; 0x37
 801d7cc:	2001      	movs	r0, #1
 801d7ce:	f000 fd9c 	bl	801e30a <TFT_FillRectangle>
        if(Graph_Field&PPF_Bands)
 801d7d2:	4b3a      	ldr	r3, [pc, #232]	; (801d8bc <Spectral_DrawGraph_Line2+0x124>)
 801d7d4:	781b      	ldrb	r3, [r3, #0]
 801d7d6:	07db      	lsls	r3, r3, #31
 801d7d8:	d53b      	bpl.n	801d852 <Spectral_DrawGraph_Line2+0xba>
        {
            Spectral_PAR_Range(direction);
 801d7da:	4620      	mov	r0, r4
 801d7dc:	f7ff fdcc 	bl	801d378 <Spectral_PAR_Range>
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
        }

    Spectral_Axes(direction);
 801d7e0:	4620      	mov	r0, r4
 801d7e2:	f7ff fcfb 	bl	801d1dc <Spectral_Axes>
    Spectral_Axes_Text(direction);
 801d7e6:	4620      	mov	r0, r4
 801d7e8:	f7ff fea8 	bl	801d53c <Spectral_Axes_Text>
						
    screen_cnt = 0;
 801d7ec:	4b34      	ldr	r3, [pc, #208]	; (801d8c0 <Spectral_DrawGraph_Line2+0x128>)
 801d7ee:	2200      	movs	r2, #0
 801d7f0:	801a      	strh	r2, [r3, #0]
    }
    flag_refresh = 1;
 801d7f2:	4a34      	ldr	r2, [pc, #208]	; (801d8c4 <Spectral_DrawGraph_Line2+0x12c>)
        {
            flag_spectral = 1;
           DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, color);
            flag_spectral = 0;
        } else if(direction == 0x02)
				{flag_spectral = 1; 
 801d7f4:	4f34      	ldr	r7, [pc, #208]	; (801d8c8 <Spectral_DrawGraph_Line2+0x130>)
    flag_refresh = 1;
 801d7f6:	2301      	movs	r3, #1
 801d7f8:	7013      	strb	r3, [r2, #0]
    i_coord = 0;
 801d7fa:	4a34      	ldr	r2, [pc, #208]	; (801d8cc <Spectral_DrawGraph_Line2+0x134>)
				{flag_spectral = 1; 
 801d7fc:	9303      	str	r3, [sp, #12]
    i_coord = 0;
 801d7fe:	2500      	movs	r5, #0
 801d800:	8015      	strh	r5, [r2, #0]
 801d802:	9a02      	ldr	r2, [sp, #8]
						DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
				flag_spectral = 0;}
 801d804:	46ab      	mov	fp, r5
 801d806:	eb06 0842 	add.w	r8, r6, r2, lsl #1
        if(direction == 0x00){
 801d80a:	bb64      	cbnz	r4, 801d866 <Spectral_DrawGraph_Line2+0xce>
            flag_spectral = 1;
 801d80c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801d810:	703b      	strb	r3, [r7, #0]
						DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], color);
 801d812:	8873      	ldrh	r3, [r6, #2]
 801d814:	8831      	ldrh	r1, [r6, #0]
 801d816:	f8cd 9000 	str.w	r9, [sp]
 801d81a:	b2a8      	uxth	r0, r5
 801d81c:	f10a 0201 	add.w	r2, sl, #1
 801d820:	4402      	add	r2, r0
 801d822:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801d826:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801d82a:	4450      	add	r0, sl
 801d82c:	b29b      	uxth	r3, r3
 801d82e:	b292      	uxth	r2, r2
 801d830:	b289      	uxth	r1, r1
 801d832:	b280      	uxth	r0, r0
 801d834:	f001 f8fc 	bl	801ea30 <DrawLineX>
            flag_spectral = 0;
 801d838:	703c      	strb	r4, [r7, #0]
 801d83a:	3501      	adds	r5, #1
    for(i = 0; i < graph_lenht; i++)
 801d83c:	9a02      	ldr	r2, [sp, #8]
 801d83e:	b2ab      	uxth	r3, r5
 801d840:	429a      	cmp	r2, r3
 801d842:	f106 0602 	add.w	r6, r6, #2
 801d846:	f1a8 0802 	sub.w	r8, r8, #2
 801d84a:	d8de      	bhi.n	801d80a <Spectral_DrawGraph_Line2+0x72>
					}
}
 801d84c:	b005      	add	sp, #20
 801d84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        }else{TFT_FillRectangle(5, 55, 270, 421, TFT_Black_Bkgr);
 801d852:	9500      	str	r5, [sp, #0]
 801d854:	f240 13a5 	movw	r3, #421	; 0x1a5
 801d858:	f44f 7287 	mov.w	r2, #270	; 0x10e
 801d85c:	2137      	movs	r1, #55	; 0x37
 801d85e:	2005      	movs	r0, #5
 801d860:	f000 fd53 	bl	801e30a <TFT_FillRectangle>
 801d864:	e7bc      	b.n	801d7e0 <Spectral_DrawGraph_Line2+0x48>
        else if(direction == 0x01)
 801d866:	2c01      	cmp	r4, #1
 801d868:	d117      	bne.n	801d89a <Spectral_DrawGraph_Line2+0x102>
            flag_spectral = 1;
 801d86a:	703c      	strb	r4, [r7, #0]
           DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, color);
 801d86c:	f8b8 2002 	ldrh.w	r2, [r8, #2]
 801d870:	f8b8 0000 	ldrh.w	r0, [r8]
 801d874:	b2a9      	uxth	r1, r5
 801d876:	f101 0348 	add.w	r3, r1, #72	; 0x48
 801d87a:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801d87e:	3149      	adds	r1, #73	; 0x49
 801d880:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
						DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
 801d884:	f8cd 9000 	str.w	r9, [sp]
 801d888:	b29b      	uxth	r3, r3
 801d88a:	b292      	uxth	r2, r2
 801d88c:	b289      	uxth	r1, r1
 801d88e:	b280      	uxth	r0, r0
 801d890:	f001 f8ce 	bl	801ea30 <DrawLineX>
				flag_spectral = 0;}
 801d894:	f887 b000 	strb.w	fp, [r7]
 801d898:	e7cf      	b.n	801d83a <Spectral_DrawGraph_Line2+0xa2>
        } else if(direction == 0x02)
 801d89a:	2c02      	cmp	r4, #2
 801d89c:	d1cd      	bne.n	801d83a <Spectral_DrawGraph_Line2+0xa2>
				{flag_spectral = 1; 
 801d89e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801d8a2:	703b      	strb	r3, [r7, #0]
						DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, color);
 801d8a4:	8872      	ldrh	r2, [r6, #2]
 801d8a6:	8830      	ldrh	r0, [r6, #0]
 801d8a8:	b2a9      	uxth	r1, r5
 801d8aa:	f101 034d 	add.w	r3, r1, #77	; 0x4d
 801d8ae:	3212      	adds	r2, #18
 801d8b0:	314c      	adds	r1, #76	; 0x4c
 801d8b2:	3012      	adds	r0, #18
 801d8b4:	e7e6      	b.n	801d884 <Spectral_DrawGraph_Line2+0xec>
 801d8b6:	bf00      	nop
 801d8b8:	2008e8b1 	.word	0x2008e8b1
 801d8bc:	20004c72 	.word	0x20004c72
 801d8c0:	20004f9a 	.word	0x20004f9a
 801d8c4:	20004f96 	.word	0x20004f96
 801d8c8:	20004f97 	.word	0x20004f97
 801d8cc:	20004f98 	.word	0x20004f98

0801d8d0 <Rabs_graph_to_display>:



uint16_t Line_Rabs_buff_graph2[355] = {0};
void Rabs_graph_to_display(uint8_t direction, float Line_Rabs_buff[])
{    
 801d8d0:	b570      	push	{r4, r5, r6, lr}
 801d8d2:	ed2d 8b02 	vpush	{d8}
	uint8_t    step = (direction == 0x00)? 4 :3;
 801d8d6:	eddf 7a23 	vldr	s15, [pc, #140]	; 801d964 <Rabs_graph_to_display+0x94>
 801d8da:	ed9f 8a23 	vldr	s16, [pc, #140]	; 801d968 <Rabs_graph_to_display+0x98>
 801d8de:	2800      	cmp	r0, #0
{    
 801d8e0:	b082      	sub	sp, #8
 801d8e2:	460e      	mov	r6, r1
	uint16_t  q = 0, res;
	float scale = (direction == 0x00)? 307 : 209; 
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801d8e4:	f240 22c6 	movw	r2, #710	; 0x2c6
 801d8e8:	f04f 0100 	mov.w	r1, #0
 801d8ec:	481f      	ldr	r0, [pc, #124]	; (801d96c <Rabs_graph_to_display+0x9c>)
	uint8_t    step = (direction == 0x00)? 4 :3;
 801d8ee:	bf14      	ite	ne
 801d8f0:	2403      	movne	r4, #3
 801d8f2:	2404      	moveq	r4, #4
 801d8f4:	bf08      	it	eq
 801d8f6:	eeb0 8a67 	vmoveq.f32	s16, s15
	memset(Line_Rabs_buff_graph2, 0, sizeof(Line_Rabs_buff_graph2));
 801d8fa:	f004 fa40 	bl	8021d7e <memset>

	for(uint16_t ic = 0; ic <= 1023; ic+=step){
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801d8fe:	4b1c      	ldr	r3, [pc, #112]	; (801d970 <Rabs_graph_to_display+0xa0>)
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801d900:	481a      	ldr	r0, [pc, #104]	; (801d96c <Rabs_graph_to_display+0x9c>)
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801d902:	ed93 7a00 	vldr	s14, [r3]
 801d906:	2100      	movs	r1, #0
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801d908:	460b      	mov	r3, r1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801d90a:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 801d90e:	edd2 6a00 	vldr	s13, [r2]
 801d912:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d916:	4423      	add	r3, r4
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801d918:	b28d      	uxth	r5, r1
 801d91a:	b29b      	uxth	r3, r3
 801d91c:	3101      	adds	r1, #1
		res = (uint16_t)((Line_Rabs_buff[ic]/max_Rabs_graph)*scale);
 801d91e:	ee67 7a88 	vmul.f32	s15, s15, s16
 801d922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d926:	edcd 7a01 	vstr	s15, [sp, #4]
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801d92a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801d92e:	ee07 2a90 	vmov	s15, r2
 801d932:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d936:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801d93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d93e:	bf4c      	ite	mi
 801d940:	eefc 7ac8 	vcvtmi.u32.f32	s15, s16
 801d944:	eefc 7ae7 	vcvtpl.u32.f32	s15, s15
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801d948:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
		Line_Rabs_buff_graph2[q] = (res > scale) ? scale : res;
 801d94c:	edcd 7a01 	vstr	s15, [sp, #4]
 801d950:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801d954:	f820 2015 	strh.w	r2, [r0, r5, lsl #1]
	for(uint16_t ic = 0; ic <= 1023; ic+=step){
 801d958:	d3d7      	bcc.n	801d90a <Rabs_graph_to_display+0x3a>
		q++;
	}
}
 801d95a:	b002      	add	sp, #8
 801d95c:	ecbd 8b02 	vpop	{d8}
 801d960:	bd70      	pop	{r4, r5, r6, pc}
 801d962:	bf00      	nop
 801d964:	43998000 	.word	0x43998000
 801d968:	43510000 	.word	0x43510000
 801d96c:	20004cd0 	.word	0x20004cd0
 801d970:	20090d10 	.word	0x20090d10

0801d974 <Refresh_screen_Graph>:

void Refresh_screen_Graph(uint16_t ZeroX, uint16_t ZeroY, uint16_t GraphData[], uint8_t direction)
{   
 801d974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d978:	b085      	sub	sp, #20
	uint16_t i = 0;
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801d97a:	461d      	mov	r5, r3
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);

        } else if(direction == 0x02)
				{
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801d97c:	f8df 8350 	ldr.w	r8, [pc, #848]	; 801dcd0 <Refresh_screen_Graph+0x35c>
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801d980:	2b00      	cmp	r3, #0
 801d982:	bf0c      	ite	eq
 801d984:	23f0      	moveq	r3, #240	; 0xf0
 801d986:	f44f 73a5 	movne.w	r3, #330	; 0x14a
{   
 801d98a:	4682      	mov	sl, r0
	uint16_t graph_lenht = (direction == 0x00)? 240 : 330;
 801d98c:	9303      	str	r3, [sp, #12]
 801d98e:	4616      	mov	r6, r2
 801d990:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801d994:	2400      	movs	r4, #0
        if(direction == 0x00){
 801d996:	2d00      	cmp	r5, #0
 801d998:	f040 80a0 	bne.w	801dadc <Refresh_screen_Graph+0x168>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(68, 18+PARGraph_G/4, 375, 20+PARGraph_G/4, TFT_PAR_Green);
 801d99c:	f898 3000 	ldrb.w	r3, [r8]
 801d9a0:	07db      	lsls	r3, r3, #31
 801d9a2:	d529      	bpl.n	801d9f8 <Refresh_screen_Graph+0x84>
 801d9a4:	4bc6      	ldr	r3, [pc, #792]	; (801dcc0 <Refresh_screen_Graph+0x34c>)
 801d9a6:	8819      	ldrh	r1, [r3, #0]
 801d9a8:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801d9ac:	0889      	lsrs	r1, r1, #2
 801d9ae:	9300      	str	r3, [sp, #0]
 801d9b0:	f240 1277 	movw	r2, #375	; 0x177
 801d9b4:	f101 0314 	add.w	r3, r1, #20
 801d9b8:	2044      	movs	r0, #68	; 0x44
 801d9ba:	3112      	adds	r1, #18
 801d9bc:	f000 fa66 	bl	801de8c <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_R/4, 375, 20+PARGraph_R/4, TFT_PAR_Red);
 801d9c0:	4bc0      	ldr	r3, [pc, #768]	; (801dcc4 <Refresh_screen_Graph+0x350>)
 801d9c2:	8819      	ldrh	r1, [r3, #0]
 801d9c4:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801d9c8:	0889      	lsrs	r1, r1, #2
 801d9ca:	9300      	str	r3, [sp, #0]
 801d9cc:	f240 1277 	movw	r2, #375	; 0x177
 801d9d0:	f101 0314 	add.w	r3, r1, #20
 801d9d4:	2044      	movs	r0, #68	; 0x44
 801d9d6:	3112      	adds	r1, #18
 801d9d8:	f000 fa58 	bl	801de8c <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(68, 18+PARGraph_IR/4, 375, 20+PARGraph_IR/4, TFT_PAR_IRed);}
 801d9dc:	4bba      	ldr	r3, [pc, #744]	; (801dcc8 <Refresh_screen_Graph+0x354>)
 801d9de:	8819      	ldrh	r1, [r3, #0]
 801d9e0:	f641 3346 	movw	r3, #6982	; 0x1b46
 801d9e4:	0889      	lsrs	r1, r1, #2
 801d9e6:	9300      	str	r3, [sp, #0]
 801d9e8:	f240 1277 	movw	r2, #375	; 0x177
 801d9ec:	f101 0314 	add.w	r3, r1, #20
 801d9f0:	2044      	movs	r0, #68	; 0x44
 801d9f2:	3112      	adds	r1, #18
 801d9f4:	f000 fa4a 	bl	801de8c <TFT_FillRectangle_DMA>
 801d9f8:	b2a2      	uxth	r2, r4
 801d9fa:	f10a 0301 	add.w	r3, sl, #1
 801d9fe:	eb02 000a 	add.w	r0, r2, sl
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801da02:	8831      	ldrh	r1, [r6, #0]
 801da04:	f898 7000 	ldrb.w	r7, [r8]
 801da08:	441a      	add	r2, r3
 801da0a:	8873      	ldrh	r3, [r6, #2]
 801da0c:	f5c1 71ce 	rsb	r1, r1, #412	; 0x19c
 801da10:	f5c3 73ce 	rsb	r3, r3, #412	; 0x19c
 801da14:	07ff      	lsls	r7, r7, #31
 801da16:	b280      	uxth	r0, r0
 801da18:	b289      	uxth	r1, r1
 801da1a:	b292      	uxth	r2, r2
 801da1c:	b29b      	uxth	r3, r3
 801da1e:	f140 8161 	bpl.w	801dce4 <Refresh_screen_Graph+0x370>
 801da22:	4faa      	ldr	r7, [pc, #680]	; (801dccc <Refresh_screen_Graph+0x358>)
 801da24:	883f      	ldrh	r7, [r7, #0]
 801da26:	08bf      	lsrs	r7, r7, #2
 801da28:	eb0a 0c04 	add.w	ip, sl, r4
 801da2c:	3712      	adds	r7, #18
 801da2e:	4567      	cmp	r7, ip
 801da30:	f280 8158 	bge.w	801dce4 <Refresh_screen_Graph+0x370>
 801da34:	4fa2      	ldr	r7, [pc, #648]	; (801dcc0 <Refresh_screen_Graph+0x34c>)
 801da36:	883f      	ldrh	r7, [r7, #0]
 801da38:	08bf      	lsrs	r7, r7, #2
 801da3a:	3712      	adds	r7, #18
 801da3c:	4567      	cmp	r7, ip
 801da3e:	f280 8153 	bge.w	801dce8 <Refresh_screen_Graph+0x374>
																																							(ZeroX+i < 19+PARGraph_R/4) ? TFT_PAR_Green :
 801da42:	4fa0      	ldr	r7, [pc, #640]	; (801dcc4 <Refresh_screen_Graph+0x350>)
 801da44:	883f      	ldrh	r7, [r7, #0]
 801da46:	08bf      	lsrs	r7, r7, #2
 801da48:	3712      	adds	r7, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801da4a:	4567      	cmp	r7, ip
 801da4c:	f280 814f 	bge.w	801dcee <Refresh_screen_Graph+0x37a>
																																							(ZeroX+i < 19+PARGraph_IR/4) ? TFT_PAR_Red : TFT_PAR_IRed) : TFT_Black_Bkgr);
 801da50:	4f9d      	ldr	r7, [pc, #628]	; (801dcc8 <Refresh_screen_Graph+0x354>)
 801da52:	f8b7 e000 	ldrh.w	lr, [r7]
 801da56:	ea4f 0e9e 	mov.w	lr, lr, lsr #2
 801da5a:	f10e 0e12 	add.w	lr, lr, #18
					DrawLineX(ZeroX+i, 412-GraphData[i], ZeroX+i+1, 412-GraphData[i+1], (Graph_Field&PPF_Bands) ? ((ZeroX+i < 19+PARGraph_B/4) ? TFT_Black_Bkgr : (ZeroX+i < 19+PARGraph_G/4 ) ? TFT_PAR_Blue :
 801da5e:	f641 3b46 	movw	fp, #6982	; 0x1b46
 801da62:	f24f 57b9 	movw	r7, #62905	; 0xf5b9
 801da66:	45e6      	cmp	lr, ip
 801da68:	bfb8      	it	lt
 801da6a:	465f      	movlt	r7, fp
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
					
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801da6c:	9700      	str	r7, [sp, #0]
 801da6e:	f000 ffdf 	bl	801ea30 <DrawLineX>
 801da72:	3401      	adds	r4, #1
	 for(i = 0; i < graph_lenht; i++)
 801da74:	9a03      	ldr	r2, [sp, #12]
 801da76:	b2a3      	uxth	r3, r4
 801da78:	429a      	cmp	r2, r3
 801da7a:	f106 0602 	add.w	r6, r6, #2
 801da7e:	f1a9 0902 	sub.w	r9, r9, #2
 801da82:	d888      	bhi.n	801d996 <Refresh_screen_Graph+0x22>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
           	:TFT_Black_Bkgr);
				}
			}
		Spectral_Axes(direction);
		 if(Graph_Field&V_lambda)
 801da84:	4c92      	ldr	r4, [pc, #584]	; (801dcd0 <Refresh_screen_Graph+0x35c>)
		Spectral_Axes(direction);
 801da86:	4628      	mov	r0, r5
 801da88:	f7ff fba8 	bl	801d1dc <Spectral_Axes>
		 if(Graph_Field&V_lambda)
 801da8c:	7822      	ldrb	r2, [r4, #0]
 801da8e:	0752      	lsls	r2, r2, #29
 801da90:	d50e      	bpl.n	801dab0 <Refresh_screen_Graph+0x13c>
			{
					Spectral_DrawGraph_Const(20, 20, graph_spectral_day, TFT_Yellow, direction);
 801da92:	2114      	movs	r1, #20
 801da94:	4608      	mov	r0, r1
 801da96:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 801da9a:	4a8e      	ldr	r2, [pc, #568]	; (801dcd4 <Refresh_screen_Graph+0x360>)
 801da9c:	9500      	str	r5, [sp, #0]
 801da9e:	f7ff fe2b 	bl	801d6f8 <Spectral_DrawGraph_Const>
					Spectral_DrawGraph_Const(20, 20, graph_spectral_night, TFT_Blue, direction);
 801daa2:	2114      	movs	r1, #20
 801daa4:	9500      	str	r5, [sp, #0]
 801daa6:	231f      	movs	r3, #31
 801daa8:	4a8b      	ldr	r2, [pc, #556]	; (801dcd8 <Refresh_screen_Graph+0x364>)
 801daaa:	4608      	mov	r0, r1
 801daac:	f7ff fe24 	bl	801d6f8 <Spectral_DrawGraph_Const>
					}
			
			if(Graph_Field&EbEr_graph)
 801dab0:	7823      	ldrb	r3, [r4, #0]
 801dab2:	079b      	lsls	r3, r3, #30
 801dab4:	d50f      	bpl.n	801dad6 <Refresh_screen_Graph+0x162>
					{
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Blue, TFT_DarkCyan, direction);
 801dab6:	2114      	movs	r1, #20
 801dab8:	4608      	mov	r0, r1
 801daba:	f240 33ef 	movw	r3, #1007	; 0x3ef
 801dabe:	4a87      	ldr	r2, [pc, #540]	; (801dcdc <Refresh_screen_Graph+0x368>)
 801dac0:	9500      	str	r5, [sp, #0]
 801dac2:	f7ff fe19 	bl	801d6f8 <Spectral_DrawGraph_Const>
							Spectral_DrawGraph_Const(20, 20, graph_spectral_Retina, TFT_Red, direction);
 801dac6:	2114      	movs	r1, #20
 801dac8:	9500      	str	r5, [sp, #0]
 801daca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 801dace:	4a84      	ldr	r2, [pc, #528]	; (801dce0 <Refresh_screen_Graph+0x36c>)
 801dad0:	4608      	mov	r0, r1
 801dad2:	f7ff fe11 	bl	801d6f8 <Spectral_DrawGraph_Const>
					}
 801dad6:	b005      	add	sp, #20
 801dad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(direction == 0x01)
 801dadc:	2d01      	cmp	r5, #1
 801dade:	d178      	bne.n	801dbd2 <Refresh_screen_Graph+0x25e>
				if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(76+PARGraph_G/3, 45, 79+PARGraph_G/3,253, TFT_PAR_Green);
 801dae0:	f898 3000 	ldrb.w	r3, [r8]
 801dae4:	07db      	lsls	r3, r3, #31
 801dae6:	d530      	bpl.n	801db4a <Refresh_screen_Graph+0x1d6>
 801dae8:	4b75      	ldr	r3, [pc, #468]	; (801dcc0 <Refresh_screen_Graph+0x34c>)
 801daea:	2703      	movs	r7, #3
 801daec:	8818      	ldrh	r0, [r3, #0]
 801daee:	fbb0 f0f7 	udiv	r0, r0, r7
 801daf2:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801daf6:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801dafa:	304c      	adds	r0, #76	; 0x4c
 801dafc:	9300      	str	r3, [sp, #0]
 801dafe:	b292      	uxth	r2, r2
 801db00:	23fd      	movs	r3, #253	; 0xfd
 801db02:	212d      	movs	r1, #45	; 0x2d
 801db04:	b280      	uxth	r0, r0
 801db06:	f000 f9c1 	bl	801de8c <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_R/3, 45, 79+PARGraph_R/3,253, TFT_PAR_Red);
 801db0a:	4b6e      	ldr	r3, [pc, #440]	; (801dcc4 <Refresh_screen_Graph+0x350>)
 801db0c:	8818      	ldrh	r0, [r3, #0]
 801db0e:	fbb0 f0f7 	udiv	r0, r0, r7
 801db12:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801db16:	f100 024f 	add.w	r2, r0, #79	; 0x4f
 801db1a:	304c      	adds	r0, #76	; 0x4c
 801db1c:	9300      	str	r3, [sp, #0]
 801db1e:	b292      	uxth	r2, r2
 801db20:	23fd      	movs	r3, #253	; 0xfd
 801db22:	212d      	movs	r1, #45	; 0x2d
 801db24:	b280      	uxth	r0, r0
 801db26:	f000 f9b1 	bl	801de8c <TFT_FillRectangle_DMA>
																			TFT_FillRectangle_DMA(76+PARGraph_IR/3,45, 79+PARGraph_IR/3,253, TFT_PAR_IRed);}
 801db2a:	4b67      	ldr	r3, [pc, #412]	; (801dcc8 <Refresh_screen_Graph+0x354>)
 801db2c:	8818      	ldrh	r0, [r3, #0]
 801db2e:	fbb0 f7f7 	udiv	r7, r0, r7
 801db32:	f641 3346 	movw	r3, #6982	; 0x1b46
 801db36:	f107 024f 	add.w	r2, r7, #79	; 0x4f
 801db3a:	374c      	adds	r7, #76	; 0x4c
 801db3c:	9300      	str	r3, [sp, #0]
 801db3e:	b292      	uxth	r2, r2
 801db40:	23fd      	movs	r3, #253	; 0xfd
 801db42:	212d      	movs	r1, #45	; 0x2d
 801db44:	b2b8      	uxth	r0, r7
 801db46:	f000 f9a1 	bl	801de8c <TFT_FillRectangle_DMA>
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801db4a:	f8b9 0000 	ldrh.w	r0, [r9]
 801db4e:	f8b9 2002 	ldrh.w	r2, [r9, #2]
 801db52:	f898 7000 	ldrb.w	r7, [r8]
 801db56:	b2a3      	uxth	r3, r4
 801db58:	f103 0149 	add.w	r1, r3, #73	; 0x49
 801db5c:	f1c0 00fd 	rsb	r0, r0, #253	; 0xfd
 801db60:	f1c2 02fd 	rsb	r2, r2, #253	; 0xfd
 801db64:	3348      	adds	r3, #72	; 0x48
 801db66:	07ff      	lsls	r7, r7, #31
 801db68:	b280      	uxth	r0, r0
 801db6a:	b289      	uxth	r1, r1
 801db6c:	b292      	uxth	r2, r2
 801db6e:	b29b      	uxth	r3, r3
 801db70:	f140 80b8 	bpl.w	801dce4 <Refresh_screen_Graph+0x370>
											   72+i+1 < 403-PARGraph_IR/3 ? TFT_PAR_IRed:
 801db74:	4f54      	ldr	r7, [pc, #336]	; (801dcc8 <Refresh_screen_Graph+0x354>)
 801db76:	f8b7 c000 	ldrh.w	ip, [r7]
 801db7a:	f240 1793 	movw	r7, #403	; 0x193
 801db7e:	f104 0b49 	add.w	fp, r4, #73	; 0x49
 801db82:	f04f 0e03 	mov.w	lr, #3
 801db86:	fbbc fcfe 	udiv	ip, ip, lr
 801db8a:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801db8e:	45dc      	cmp	ip, fp
 801db90:	dc19      	bgt.n	801dbc6 <Refresh_screen_Graph+0x252>
											   72+i+1 < 403-PARGraph_R/3 ? TFT_PAR_Red:
 801db92:	f8df c130 	ldr.w	ip, [pc, #304]	; 801dcc4 <Refresh_screen_Graph+0x350>
 801db96:	f8bc c000 	ldrh.w	ip, [ip]
 801db9a:	fbbc fcfe 	udiv	ip, ip, lr
 801db9e:	eba7 0c0c 	sub.w	ip, r7, ip
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801dba2:	45dc      	cmp	ip, fp
 801dba4:	dc12      	bgt.n	801dbcc <Refresh_screen_Graph+0x258>
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801dba6:	f8df c118 	ldr.w	ip, [pc, #280]	; 801dcc0 <Refresh_screen_Graph+0x34c>
 801dbaa:	f8bc c000 	ldrh.w	ip, [ip]
 801dbae:	fbbc fefe 	udiv	lr, ip, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801dbb2:	f242 2cb2 	movw	ip, #8882	; 0x22b2
											   72+i+1 < 403-PARGraph_G/3 ? TFT_PAR_Green:TFT_PAR_Blue) : TFT_Black_Bkgr);
 801dbb6:	eba7 0e0e 	sub.w	lr, r7, lr
				DrawLineX(253 - GraphData[graph_lenht-i], 72+i+1, 253 - GraphData[graph_lenht-i+1], 72+i, 
 801dbba:	f64c 7738 	movw	r7, #53048	; 0xcf38
 801dbbe:	45de      	cmp	lr, fp
 801dbc0:	bfd8      	it	le
 801dbc2:	4667      	movle	r7, ip
 801dbc4:	e752      	b.n	801da6c <Refresh_screen_Graph+0xf8>
 801dbc6:	f641 3746 	movw	r7, #6982	; 0x1b46
 801dbca:	e74f      	b.n	801da6c <Refresh_screen_Graph+0xf8>
 801dbcc:	f24f 57b9 	movw	r7, #62905	; 0xf5b9
 801dbd0:	e74c      	b.n	801da6c <Refresh_screen_Graph+0xf8>
        } else if(direction == 0x02)
 801dbd2:	2d02      	cmp	r5, #2
 801dbd4:	f47f af4d 	bne.w	801da72 <Refresh_screen_Graph+0xfe>
					if((Graph_Field&PPF_Bands)){TFT_FillRectangle_DMA(408-PARGraph_G/3, 19, 405-PARGraph_G/3,227, TFT_PAR_Green);//TFT_PAR_Green
 801dbd8:	f898 3000 	ldrb.w	r3, [r8]
 801dbdc:	07db      	lsls	r3, r3, #31
 801dbde:	d535      	bpl.n	801dc4c <Refresh_screen_Graph+0x2d8>
 801dbe0:	4b37      	ldr	r3, [pc, #220]	; (801dcc0 <Refresh_screen_Graph+0x34c>)
 801dbe2:	f240 1795 	movw	r7, #405	; 0x195
 801dbe6:	8818      	ldrh	r0, [r3, #0]
 801dbe8:	f04f 0b03 	mov.w	fp, #3
 801dbec:	f64c 7338 	movw	r3, #53048	; 0xcf38
 801dbf0:	fbb0 f0fb 	udiv	r0, r0, fp
 801dbf4:	1a3a      	subs	r2, r7, r0
 801dbf6:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801dbfa:	9300      	str	r3, [sp, #0]
 801dbfc:	b292      	uxth	r2, r2
 801dbfe:	23e3      	movs	r3, #227	; 0xe3
 801dc00:	2113      	movs	r1, #19
 801dc02:	b280      	uxth	r0, r0
 801dc04:	f000 f942 	bl	801de8c <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_R/3, 19, 405-PARGraph_R/3,227, TFT_PAR_Red);
 801dc08:	4b2e      	ldr	r3, [pc, #184]	; (801dcc4 <Refresh_screen_Graph+0x350>)
 801dc0a:	8818      	ldrh	r0, [r3, #0]
 801dc0c:	fbb0 f0fb 	udiv	r0, r0, fp
 801dc10:	f24f 53b9 	movw	r3, #62905	; 0xf5b9
 801dc14:	1a3a      	subs	r2, r7, r0
 801dc16:	f5c0 70cc 	rsb	r0, r0, #408	; 0x198
 801dc1a:	9300      	str	r3, [sp, #0]
 801dc1c:	b292      	uxth	r2, r2
 801dc1e:	23e3      	movs	r3, #227	; 0xe3
 801dc20:	2113      	movs	r1, #19
 801dc22:	b280      	uxth	r0, r0
 801dc24:	f000 f932 	bl	801de8c <TFT_FillRectangle_DMA>
															TFT_FillRectangle_DMA(408-PARGraph_IR/3,19, 405-PARGraph_IR/3,227, TFT_PAR_IRed);}
 801dc28:	4b27      	ldr	r3, [pc, #156]	; (801dcc8 <Refresh_screen_Graph+0x354>)
 801dc2a:	8818      	ldrh	r0, [r3, #0]
 801dc2c:	fbb0 fbfb 	udiv	fp, r0, fp
 801dc30:	f641 3346 	movw	r3, #6982	; 0x1b46
 801dc34:	eba7 020b 	sub.w	r2, r7, fp
 801dc38:	f5cb 7bcc 	rsb	fp, fp, #408	; 0x198
 801dc3c:	9300      	str	r3, [sp, #0]
 801dc3e:	b292      	uxth	r2, r2
 801dc40:	23e3      	movs	r3, #227	; 0xe3
 801dc42:	2113      	movs	r1, #19
 801dc44:	fa1f f08b 	uxth.w	r0, fp
 801dc48:	f000 f920 	bl	801de8c <TFT_FillRectangle_DMA>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801dc4c:	8830      	ldrh	r0, [r6, #0]
 801dc4e:	8872      	ldrh	r2, [r6, #2]
 801dc50:	f898 7000 	ldrb.w	r7, [r8]
 801dc54:	b2a3      	uxth	r3, r4
 801dc56:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 801dc5a:	3012      	adds	r0, #18
 801dc5c:	3212      	adds	r2, #18
 801dc5e:	334d      	adds	r3, #77	; 0x4d
 801dc60:	07ff      	lsls	r7, r7, #31
 801dc62:	b280      	uxth	r0, r0
 801dc64:	b289      	uxth	r1, r1
 801dc66:	b292      	uxth	r2, r2
 801dc68:	b29b      	uxth	r3, r3
 801dc6a:	d53b      	bpl.n	801dce4 <Refresh_screen_Graph+0x370>
 801dc6c:	4f17      	ldr	r7, [pc, #92]	; (801dccc <Refresh_screen_Graph+0x358>)
 801dc6e:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801dc72:	f8b7 e000 	ldrh.w	lr, [r7]
 801dc76:	2703      	movs	r7, #3
 801dc78:	fbbe fef7 	udiv	lr, lr, r7
 801dc7c:	45e6      	cmp	lr, ip
 801dc7e:	dc31      	bgt.n	801dce4 <Refresh_screen_Graph+0x370>
           	(76+i < 74+PARGraph_G/3) ? TFT_PAR_Blue : 
 801dc80:	f8df c03c 	ldr.w	ip, [pc, #60]	; 801dcc0 <Refresh_screen_Graph+0x34c>
 801dc84:	f104 0e02 	add.w	lr, r4, #2
 801dc88:	f8bc c000 	ldrh.w	ip, [ip]
 801dc8c:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801dc90:	45f4      	cmp	ip, lr
 801dc92:	dc29      	bgt.n	801dce8 <Refresh_screen_Graph+0x374>
           	(76+i < 74+PARGraph_R/3) ? TFT_PAR_Green : 
 801dc94:	f8df c02c 	ldr.w	ip, [pc, #44]	; 801dcc4 <Refresh_screen_Graph+0x350>
 801dc98:	f8bc c000 	ldrh.w	ip, [ip]
 801dc9c:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801dca0:	45f4      	cmp	ip, lr
 801dca2:	dc24      	bgt.n	801dcee <Refresh_screen_Graph+0x37a>
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801dca4:	f8df c020 	ldr.w	ip, [pc, #32]	; 801dcc8 <Refresh_screen_Graph+0x354>
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801dca8:	f641 3b46 	movw	fp, #6982	; 0x1b46
						(76+i < 74+PARGraph_IR/3) ? TFT_PAR_Red : TFT_PAR_IRed)
 801dcac:	f8bc c000 	ldrh.w	ip, [ip]
 801dcb0:	fbbc fcf7 	udiv	ip, ip, r7
					DrawLineX(GraphData[i]+18, 76+i, GraphData[i+1]+18, 76+i+1, (Graph_Field&PPF_Bands) ? ((76+i < PARGraph_B/3) ? TFT_Black_Bkgr :
 801dcb4:	f24f 57b9 	movw	r7, #62905	; 0xf5b9
 801dcb8:	45f4      	cmp	ip, lr
 801dcba:	bfd8      	it	le
 801dcbc:	465f      	movle	r7, fp
 801dcbe:	e6d5      	b.n	801da6c <Refresh_screen_Graph+0xf8>
 801dcc0:	20090dbc 	.word	0x20090dbc
 801dcc4:	20090f20 	.word	0x20090f20
 801dcc8:	20090cf8 	.word	0x20090cf8
 801dccc:	20090cfa 	.word	0x20090cfa
 801dcd0:	20004c72 	.word	0x20004c72
 801dcd4:	2008bfb2 	.word	0x2008bfb2
 801dcd8:	2008c550 	.word	0x2008c550
 801dcdc:	2008c28a 	.word	0x2008c28a
 801dce0:	2008bcec 	.word	0x2008bcec
 801dce4:	2763      	movs	r7, #99	; 0x63
 801dce6:	e6c1      	b.n	801da6c <Refresh_screen_Graph+0xf8>
 801dce8:	f242 27b2 	movw	r7, #8882	; 0x22b2
 801dcec:	e6be      	b.n	801da6c <Refresh_screen_Graph+0xf8>
 801dcee:	f64c 7738 	movw	r7, #53048	; 0xcf38
 801dcf2:	e6bb      	b.n	801da6c <Refresh_screen_Graph+0xf8>

0801dcf4 <TS_IO_Read>:
{

  }

uint8_t TS_IO_Read(uint8_t DeviceAddr, uint8_t Reg)
{
 801dcf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t read_value = 0;
 801dcf6:	aa06      	add	r2, sp, #24
 801dcf8:	2300      	movs	r3, #0
 801dcfa:	f802 3d01 	strb.w	r3, [r2, #-1]!
  HAL_I2C_Mem_Read(&hi2c1, DeviceAddr, Reg, I2C_MEMADD_SIZE_8BIT, &read_value, 1, 0x100);
 801dcfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 801dd02:	9302      	str	r3, [sp, #8]
 801dd04:	2301      	movs	r3, #1
 801dd06:	e88d 000c 	stmia.w	sp, {r2, r3}
 801dd0a:	460a      	mov	r2, r1
 801dd0c:	4601      	mov	r1, r0
 801dd0e:	4804      	ldr	r0, [pc, #16]	; (801dd20 <TS_IO_Read+0x2c>)
 801dd10:	f7e4 fef0 	bl	8002af4 <HAL_I2C_Mem_Read>

  return read_value;
}
 801dd14:	f89d 0017 	ldrb.w	r0, [sp, #23]
 801dd18:	b007      	add	sp, #28
 801dd1a:	f85d fb04 	ldr.w	pc, [sp], #4
 801dd1e:	bf00      	nop
 801dd20:	20090998 	.word	0x20090998

0801dd24 <TS_ReadID>:
  HAL_I2C_Mem_Write(&hi2c1, DeviceAddr, (uint8_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, 0x100);
  if(status != HAL_OK) Error();
}

uint8_t TS_ReadID(uint8_t DeviceAddr)
{
 801dd24:	b537      	push	{r0, r1, r2, r4, r5, lr}
  volatile uint8_t ucReadId = 0;
 801dd26:	2300      	movs	r3, #0
{
 801dd28:	4605      	mov	r5, r0
  volatile uint8_t ucReadId = 0;
 801dd2a:	f88d 3007 	strb.w	r3, [sp, #7]
 801dd2e:	2403      	movs	r4, #3
  uint8_t nbReadAttempts = 0;
  int8_t bFoundDevice = 0;

  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
  {
    ucReadId = TS_IO_Read(DeviceAddr, ID_G_CIPHER);
 801dd30:	21a3      	movs	r1, #163	; 0xa3
 801dd32:	4628      	mov	r0, r5
 801dd34:	f7ff ffde 	bl	801dcf4 <TS_IO_Read>
 801dd38:	f88d 0007 	strb.w	r0, [sp, #7]
    if(ucReadId == CHIP_ID)
 801dd3c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801dd40:	3c01      	subs	r4, #1
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801dd42:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    if(ucReadId == CHIP_ID)
 801dd46:	b2db      	uxtb	r3, r3
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 801dd48:	d001      	beq.n	801dd4e <TS_ReadID+0x2a>
 801dd4a:	2b0a      	cmp	r3, #10
 801dd4c:	d1f0      	bne.n	801dd30 <TS_ReadID+0xc>
    {
      bFoundDevice = 1;
    }
  }
  return (ucReadId);
 801dd4e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 801dd52:	b003      	add	sp, #12
 801dd54:	bd30      	pop	{r4, r5, pc}

0801dd56 <Touch_Ini>:

void Touch_Ini(void)
{
 801dd56:	b508      	push	{r3, lr}
	if(TS_ReadID(TS_I2C_ADDRESS) != CHIP_ID) Error();
 801dd58:	2070      	movs	r0, #112	; 0x70
 801dd5a:	f7ff ffe3 	bl	801dd24 <TS_ReadID>
  HAL_Delay(200);
 801dd5e:	20c8      	movs	r0, #200	; 0xc8
}
 801dd60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_Delay(200);
 801dd64:	f7e3 b95a 	b.w	800101c <HAL_Delay>

0801dd68 <TS_Get_XY1>:

void TS_Get_XY1(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 801dd68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	static uint16_t coord = 0x0000;
	uint16_t temp;
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0x0F00;
 801dd6a:	b2c5      	uxtb	r5, r0
{
 801dd6c:	460e      	mov	r6, r1
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0x0F00;
 801dd6e:	4628      	mov	r0, r5
 801dd70:	2103      	movs	r1, #3
{
 801dd72:	4617      	mov	r7, r2
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_XH) << 8) & 0x0F00;
 801dd74:	f7ff ffbe 	bl	801dcf4 <TS_IO_Read>
 801dd78:	4c11      	ldr	r4, [pc, #68]	; (801ddc0 <TS_Get_XY1+0x58>)
 801dd7a:	0200      	lsls	r0, r0, #8
 801dd7c:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 801dd80:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801dd82:	2104      	movs	r1, #4
 801dd84:	4628      	mov	r0, r5
 801dd86:	f7ff ffb5 	bl	801dcf4 <TS_IO_Read>
 801dd8a:	8823      	ldrh	r3, [r4, #0]
 801dd8c:	4318      	orrs	r0, r3
	
	if (Orientation90)
	{
		temp = coord;
		*Y = X_SIZE_Touch - coord;
 801dd8e:	4b0d      	ldr	r3, [pc, #52]	; (801ddc4 <TS_Get_XY1+0x5c>)
 801dd90:	881b      	ldrh	r3, [r3, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_XL);
 801dd92:	b280      	uxth	r0, r0
 801dd94:	8020      	strh	r0, [r4, #0]
		*Y = X_SIZE_Touch - coord;
 801dd96:	1a18      	subs	r0, r3, r0
 801dd98:	8038      	strh	r0, [r7, #0]
	}
	else{
		*X = coord;
	}
	
  coord = (TS_IO_Read(DeviceAddr, TOUCH1_YH) << 8) & 0x0F00;
 801dd9a:	2105      	movs	r1, #5
 801dd9c:	4628      	mov	r0, r5
 801dd9e:	f7ff ffa9 	bl	801dcf4 <TS_IO_Read>
 801dda2:	0200      	lsls	r0, r0, #8
 801dda4:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
 801dda8:	8020      	strh	r0, [r4, #0]
	coord |= TS_IO_Read(DeviceAddr, TOUCH1_YL);
 801ddaa:	2106      	movs	r1, #6
 801ddac:	4628      	mov	r0, r5
 801ddae:	f7ff ffa1 	bl	801dcf4 <TS_IO_Read>
 801ddb2:	8823      	ldrh	r3, [r4, #0]
 801ddb4:	4318      	orrs	r0, r3
 801ddb6:	b280      	uxth	r0, r0
 801ddb8:	8020      	strh	r0, [r4, #0]
	
		if (Orientation90)
	{
		*X = coord;
 801ddba:	8030      	strh	r0, [r6, #0]
 801ddbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ddbe:	bf00      	nop
 801ddc0:	20004f9c 	.word	0x20004f9c
 801ddc4:	20000a3e 	.word	0x20000a3e

0801ddc8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 801ddc8:	b507      	push	{r0, r1, r2, lr}
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
  __IO uint8_t status = SD_PRESENT;
 801ddca:	2301      	movs	r3, #1
 801ddcc:	f88d 3007 	strb.w	r3, [sp, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */    	

  return status;
 801ddd0:	f89d 3007 	ldrb.w	r3, [sp, #7]
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801ddd4:	2b01      	cmp	r3, #1
 801ddd6:	d10e      	bne.n	801ddf6 <BSP_SD_Init+0x2e>
  sd_state = HAL_SD_Init(&hsd1);
 801ddd8:	4808      	ldr	r0, [pc, #32]	; (801ddfc <BSP_SD_Init+0x34>)
 801ddda:	f7e7 fc97 	bl	800570c <HAL_SD_Init>
  if (sd_state == MSD_OK)
 801ddde:	b938      	cbnz	r0, 801ddf0 <BSP_SD_Init+0x28>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 801dde0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801dde4:	4805      	ldr	r0, [pc, #20]	; (801ddfc <BSP_SD_Init+0x34>)
 801dde6:	f7e7 fc0d 	bl	8005604 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 801ddea:	3000      	adds	r0, #0
 801ddec:	bf18      	it	ne
 801ddee:	2001      	movne	r0, #1
}
 801ddf0:	b003      	add	sp, #12
 801ddf2:	f85d fb04 	ldr.w	pc, [sp], #4
    return MSD_ERROR_SD_NOT_PRESENT;
 801ddf6:	2002      	movs	r0, #2
 801ddf8:	e7fa      	b.n	801ddf0 <BSP_SD_Init+0x28>
 801ddfa:	bf00      	nop
 801ddfc:	20090a38 	.word	0x20090a38

0801de00 <BSP_SD_ReadBlocks_DMA>:
{
 801de00:	b508      	push	{r3, lr}
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801de02:	4613      	mov	r3, r2
 801de04:	460a      	mov	r2, r1
 801de06:	4601      	mov	r1, r0
 801de08:	4803      	ldr	r0, [pc, #12]	; (801de18 <BSP_SD_ReadBlocks_DMA+0x18>)
 801de0a:	f7e7 f833 	bl	8004e74 <HAL_SD_ReadBlocks_DMA>
}
 801de0e:	3000      	adds	r0, #0
 801de10:	bf18      	it	ne
 801de12:	2001      	movne	r0, #1
 801de14:	bd08      	pop	{r3, pc}
 801de16:	bf00      	nop
 801de18:	20090a38 	.word	0x20090a38

0801de1c <BSP_SD_WriteBlocks_DMA>:
{
 801de1c:	b508      	push	{r3, lr}
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801de1e:	4613      	mov	r3, r2
 801de20:	460a      	mov	r2, r1
 801de22:	4601      	mov	r1, r0
 801de24:	4803      	ldr	r0, [pc, #12]	; (801de34 <BSP_SD_WriteBlocks_DMA+0x18>)
 801de26:	f7e7 f897 	bl	8004f58 <HAL_SD_WriteBlocks_DMA>
}
 801de2a:	3000      	adds	r0, #0
 801de2c:	bf18      	it	ne
 801de2e:	2001      	movne	r0, #1
 801de30:	bd08      	pop	{r3, pc}
 801de32:	bf00      	nop
 801de34:	20090a38 	.word	0x20090a38

0801de38 <BSP_SD_GetCardState>:
{
 801de38:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801de3a:	4803      	ldr	r0, [pc, #12]	; (801de48 <BSP_SD_GetCardState+0x10>)
 801de3c:	f7e7 fc9f 	bl	800577e <HAL_SD_GetCardState>
}
 801de40:	3804      	subs	r0, #4
 801de42:	bf18      	it	ne
 801de44:	2001      	movne	r0, #1
 801de46:	bd08      	pop	{r3, pc}
 801de48:	20090a38 	.word	0x20090a38

0801de4c <BSP_SD_GetCardInfo>:
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 801de4c:	4601      	mov	r1, r0
 801de4e:	4801      	ldr	r0, [pc, #4]	; (801de54 <BSP_SD_GetCardInfo+0x8>)
 801de50:	f7e7 bbc6 	b.w	80055e0 <HAL_SD_GetCardInfo>
 801de54:	20090a38 	.word	0x20090a38

0801de58 <BSP_SD_WriteCpltCallback>:
 801de58:	4770      	bx	lr

0801de5a <HAL_SD_TxCpltCallback>:
{
 801de5a:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 801de5c:	f7ff fffc 	bl	801de58 <BSP_SD_WriteCpltCallback>
 801de60:	bd08      	pop	{r3, pc}

0801de62 <BSP_SD_ReadCpltCallback>:
{
 801de62:	4770      	bx	lr

0801de64 <HAL_SD_RxCpltCallback>:
{
 801de64:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 801de66:	f7ff fffc 	bl	801de62 <BSP_SD_ReadCpltCallback>
 801de6a:	bd08      	pop	{r3, pc}

0801de6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 801de6c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801de6e:	4903      	ldr	r1, [pc, #12]	; (801de7c <MX_FATFS_Init+0x10>)
 801de70:	4803      	ldr	r0, [pc, #12]	; (801de80 <MX_FATFS_Init+0x14>)
 801de72:	f7eb fe47 	bl	8009b04 <FATFS_LinkDriver>
 801de76:	4b03      	ldr	r3, [pc, #12]	; (801de84 <MX_FATFS_Init+0x18>)
 801de78:	7018      	strb	r0, [r3, #0]
 801de7a:	bd08      	pop	{r3, pc}
 801de7c:	2008e8b5 	.word	0x2008e8b5
 801de80:	080312cc 	.word	0x080312cc
 801de84:	2008e8b4 	.word	0x2008e8b4

0801de88 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */  
}
 801de88:	2000      	movs	r0, #0
 801de8a:	4770      	bx	lr

0801de8c <TFT_FillRectangle_DMA>:
    }
}

void TFT_FillRectangle_DMA(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
  if(x1>x2) swap(x1,x2);
 801de8c:	4290      	cmp	r0, r2
{
 801de8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de92:	461d      	mov	r5, r3
  if(x1>x2) swap(x1,x2);
 801de94:	bf88      	it	hi
 801de96:	4603      	movhi	r3, r0
{
 801de98:	4680      	mov	r8, r0
  if(x1>x2) swap(x1,x2);
 801de9a:	bf84      	itt	hi
 801de9c:	4690      	movhi	r8, r2
 801de9e:	461a      	movhi	r2, r3
  if(y1>y2) swap(y1,y2);
 801dea0:	42a9      	cmp	r1, r5
 801dea2:	bf88      	it	hi
 801dea4:	460b      	movhi	r3, r1
{
 801dea6:	460f      	mov	r7, r1
  if(y1>y2) swap(y1,y2);
 801dea8:	bf84      	itt	hi
 801deaa:	462f      	movhi	r7, r5
 801deac:	461d      	movhi	r5, r3

  uint32_t addr = 0;
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801deae:	4b15      	ldr	r3, [pc, #84]	; (801df04 <TFT_FillRectangle_DMA+0x78>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801deb0:	4e15      	ldr	r6, [pc, #84]	; (801df08 <TFT_FillRectangle_DMA+0x7c>)
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801deb2:	f8d3 9060 	ldr.w	r9, [r3, #96]	; 0x60
 801deb6:	f8d3 b05c 	ldr.w	fp, [r3, #92]	; 0x5c
{
 801deba:	f8bd a030 	ldrh.w	sl, [sp, #48]	; 0x30
  hdma2d.Init.Mode = DMA2D_R2M;
 801debe:	f44f 3340 	mov.w	r3, #196608	; 0x30000

  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801dec2:	eba2 0408 	sub.w	r4, r2, r8
  hdma2d.Init.Mode = DMA2D_R2M;
 801dec6:	6073      	str	r3, [r6, #4]

  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801dec8:	4630      	mov	r0, r6
  hdma2d.Init.OutputOffset = hltdc.LayerCfg[0].ImageWidth-(x2-x1);
 801deca:	eba9 0304 	sub.w	r3, r9, r4
 801dece:	60f3      	str	r3, [r6, #12]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801ded0:	f7e3 ffc6 	bl	8001e60 <HAL_DMA2D_Init>
 801ded4:	b990      	cbnz	r0, 801defc <TFT_FillRectangle_DMA+0x70>
  addr = (hltdc.LayerCfg[0].FBStartAdress) + 2*(y1*hltdc.LayerCfg[0].ImageWidth + x1);
 801ded6:	fb09 8207 	mla	r2, r9, r7, r8
  {
    if (HAL_DMA2D_Start(&hdma2d, color, addr, x2-x1, y2-y1) == HAL_OK)
 801deda:	1bed      	subs	r5, r5, r7
 801dedc:	9500      	str	r5, [sp, #0]
 801dede:	4623      	mov	r3, r4
 801dee0:	eb0b 0242 	add.w	r2, fp, r2, lsl #1
 801dee4:	4651      	mov	r1, sl
 801dee6:	4630      	mov	r0, r6
 801dee8:	f7e4 f804 	bl	8001ef4 <HAL_DMA2D_Start>
 801deec:	b930      	cbnz	r0, 801defc <TFT_FillRectangle_DMA+0x70>
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801deee:	210a      	movs	r1, #10
 801def0:	4630      	mov	r0, r6
    }
  }
}
 801def2:	b003      	add	sp, #12
 801def4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 801def8:	f7e4 b815 	b.w	8001f26 <HAL_DMA2D_PollForTransfer>
}
 801defc:	b003      	add	sp, #12
 801defe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df02:	bf00      	nop
 801df04:	20090bb8 	.word	0x20090bb8
 801df08:	20090dcc 	.word	0x20090dcc

0801df0c <TFT_FillScreen_DMA>:
		*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(i*2))=(uint16_t) color;
	}
}

void TFT_FillScreen_DMA(uint16_t color)
{
 801df0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  hdma2d.Init.Mode = DMA2D_R2M;
 801df0e:	4c10      	ldr	r4, [pc, #64]	; (801df50 <TFT_FillScreen_DMA+0x44>)
 801df10:	f44f 3340 	mov.w	r3, #196608	; 0x30000
{
 801df14:	4606      	mov	r6, r0
  hdma2d.Init.Mode = DMA2D_R2M;
 801df16:	6063      	str	r3, [r4, #4]
  hdma2d.Init.OutputOffset = 0;
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801df18:	2502      	movs	r5, #2
  hdma2d.Init.OutputOffset = 0;
 801df1a:	2300      	movs	r3, #0
	
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801df1c:	4620      	mov	r0, r4
  hdma2d.Init.OutputOffset = 0;
 801df1e:	60e3      	str	r3, [r4, #12]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801df20:	60a5      	str	r5, [r4, #8]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 801df22:	f7e3 ff9d 	bl	8001e60 <HAL_DMA2D_Init>
 801df26:	b980      	cbnz	r0, 801df4a <TFT_FillScreen_DMA+0x3e>
  {
    if (HAL_DMA2D_Start(&hdma2d, color, hltdc.LayerCfg[0].FBStartAdress,
 801df28:	4a0a      	ldr	r2, [pc, #40]	; (801df54 <TFT_FillScreen_DMA+0x48>)
 801df2a:	6e53      	ldr	r3, [r2, #100]	; 0x64
 801df2c:	9300      	str	r3, [sp, #0]
 801df2e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 801df30:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801df32:	4631      	mov	r1, r6
 801df34:	4620      	mov	r0, r4
 801df36:	f7e3 ffdd 	bl	8001ef4 <HAL_DMA2D_Start>
 801df3a:	b930      	cbnz	r0, 801df4a <TFT_FillScreen_DMA+0x3e>
    hltdc.LayerCfg[0].ImageWidth, hltdc.LayerCfg[0].ImageHeight) == HAL_OK)
    {
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801df3c:	4629      	mov	r1, r5
 801df3e:	4620      	mov	r0, r4
    }
  }
}
 801df40:	b002      	add	sp, #8
 801df42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_DMA2D_PollForTransfer(&hdma2d, 2);
 801df46:	f7e3 bfee 	b.w	8001f26 <HAL_DMA2D_PollForTransfer>
}
 801df4a:	b002      	add	sp, #8
 801df4c:	bd70      	pop	{r4, r5, r6, pc}
 801df4e:	bf00      	nop
 801df50:	20090dcc 	.word	0x20090dcc
 801df54:	20090bb8 	.word	0x20090bb8

0801df58 <TFT_DrawPixel>:


//----------------------------------------
void TFT_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t color)
{
 801df58:	b510      	push	{r4, lr}
	
//	tmp = Xpos;
//	Xpos = Ypos;
//	Ypos = X_SIZE - 1 - tmp;
////////////////////////////////////////////rotate -90
	if(TFT_direction == 0x00){
 801df5a:	4b14      	ldr	r3, [pc, #80]	; (801dfac <TFT_DrawPixel+0x54>)
 801df5c:	781c      	ldrb	r4, [r3, #0]
 801df5e:	b97c      	cbnz	r4, 801df80 <TFT_DrawPixel+0x28>

	tmp = Xpos;
	Xpos = Ypos;
	Ypos = Y_SIZE - 1 - tmp;
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801df60:	4b13      	ldr	r3, [pc, #76]	; (801dfb0 <TFT_DrawPixel+0x58>)
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	1a5b      	subs	r3, r3, r1
	Ypos = Y_SIZE - 1 - tmp;
 801df66:	4913      	ldr	r1, [pc, #76]	; (801dfb4 <TFT_DrawPixel+0x5c>)
 801df68:	8809      	ldrh	r1, [r1, #0]
 801df6a:	3901      	subs	r1, #1
 801df6c:	1a09      	subs	r1, r1, r0
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;}
 801df6e:	4812      	ldr	r0, [pc, #72]	; (801dfb8 <TFT_DrawPixel+0x60>)
 801df70:	6e04      	ldr	r4, [r0, #96]	; 0x60
 801df72:	b289      	uxth	r1, r1
 801df74:	fb04 3111 	mls	r1, r4, r1, r3
 801df78:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
	else	if (TFT_direction == 0x01){
//////////////////////////////////////////// 0 - no rotate
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
	}else	if (TFT_direction == 0x02){
////////////////////////////////////////////rotate -180
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801df7a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 801df7e:	bd10      	pop	{r4, pc}
	else	if (TFT_direction == 0x01){
 801df80:	781c      	ldrb	r4, [r3, #0]
 801df82:	2c01      	cmp	r4, #1
 801df84:	d105      	bne.n	801df92 <TFT_DrawPixel+0x3a>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Ypos*hltdc.LayerCfg[0].ImageWidth+Xpos)))=(uint16_t) color;
 801df86:	4c0c      	ldr	r4, [pc, #48]	; (801dfb8 <TFT_DrawPixel+0x60>)
 801df88:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801df8a:	fb03 0101 	mla	r1, r3, r1, r0
 801df8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801df90:	e7f3      	b.n	801df7a <TFT_DrawPixel+0x22>
	}else	if (TFT_direction == 0x02){
 801df92:	781b      	ldrb	r3, [r3, #0]
 801df94:	2b02      	cmp	r3, #2
 801df96:	d1f2      	bne.n	801df7e <TFT_DrawPixel+0x26>
	*(__IO uint16_t*)(hltdc.LayerCfg[0].FBStartAdress+(2*(Pixels - Xpos - Ypos*hltdc.LayerCfg[0].ImageWidth))) = (uint16_t) color;
 801df98:	4b05      	ldr	r3, [pc, #20]	; (801dfb0 <TFT_DrawPixel+0x58>)
 801df9a:	681b      	ldr	r3, [r3, #0]
 801df9c:	1a18      	subs	r0, r3, r0
 801df9e:	4b06      	ldr	r3, [pc, #24]	; (801dfb8 <TFT_DrawPixel+0x60>)
 801dfa0:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 801dfa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801dfa4:	fb04 0111 	mls	r1, r4, r1, r0
 801dfa8:	e7e7      	b.n	801df7a <TFT_DrawPixel+0x22>
 801dfaa:	bf00      	nop
 801dfac:	20004c10 	.word	0x20004c10
 801dfb0:	20000a40 	.word	0x20000a40
 801dfb4:	20000a46 	.word	0x20000a46
 801dfb8:	20090bb8 	.word	0x20090bb8

0801dfbc <TFT_DrawCircleCorner>:
{
 801dfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfc0:	469a      	mov	sl, r3
	int16_t f = 1 - r;
 801dfc2:	b293      	uxth	r3, r2
 801dfc4:	f1c3 0401 	rsb	r4, r3, #1
	int16_t ddF_y = -2 * r;
 801dfc8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801dfcc:	b085      	sub	sp, #20
	int16_t ddF_y = -2 * r;
 801dfce:	005b      	lsls	r3, r3, #1
 801dfd0:	b21b      	sxth	r3, r3
 801dfd2:	9301      	str	r3, [sp, #4]
    while (x < y) {
 801dfd4:	2300      	movs	r3, #0
 801dfd6:	9300      	str	r3, [sp, #0]
        if (corner & 0x01) {	
 801dfd8:	f00a 0301 	and.w	r3, sl, #1
{
 801dfdc:	4689      	mov	r9, r1
 801dfde:	4616      	mov	r6, r2
	int16_t f = 1 - r;
 801dfe0:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801dfe2:	9302      	str	r3, [sp, #8]
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801dfe4:	b287      	uxth	r7, r0
    while (x < y) {
 801dfe6:	f9bd 3000 	ldrsh.w	r3, [sp]
 801dfea:	42b3      	cmp	r3, r6
 801dfec:	db02      	blt.n	801dff4 <TFT_DrawCircleCorner+0x38>
}
 801dfee:	b005      	add	sp, #20
 801dff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801dff4:	2c00      	cmp	r4, #0
 801dff6:	db08      	blt.n	801e00a <TFT_DrawCircleCorner+0x4e>
            ddF_y += 2;
 801dff8:	9b01      	ldr	r3, [sp, #4]
 801dffa:	3302      	adds	r3, #2
 801dffc:	b29b      	uxth	r3, r3
            y--;
 801dffe:	3e01      	subs	r6, #1
            ddF_y += 2;
 801e000:	b21a      	sxth	r2, r3
            f += ddF_y;
 801e002:	441c      	add	r4, r3
            y--;
 801e004:	b236      	sxth	r6, r6
            ddF_y += 2;
 801e006:	9201      	str	r2, [sp, #4]
            f += ddF_y;
 801e008:	b224      	sxth	r4, r4
 801e00a:	f8bd 5000 	ldrh.w	r5, [sp]
        if (corner & 0x01) {	
 801e00e:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801e010:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 801e014:	3403      	adds	r4, #3
 801e016:	b224      	sxth	r4, r4
        if (corner & 0x01) {	
 801e018:	b1e3      	cbz	r3, 801e054 <TFT_DrawCircleCorner+0x98>
			TFT_DrawPixel(x0 - y, y0 - x, color);
 801e01a:	fa1f f889 	uxth.w	r8, r9
 801e01e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e022:	9303      	str	r3, [sp, #12]
 801e024:	fa1f fb86 	uxth.w	fp, r6
 801e028:	f108 3eff 	add.w	lr, r8, #4294967295
 801e02c:	ebae 0e05 	sub.w	lr, lr, r5
 801e030:	eba7 000b 	sub.w	r0, r7, fp
 801e034:	461a      	mov	r2, r3
 801e036:	fa1f f18e 	uxth.w	r1, lr
 801e03a:	b280      	uxth	r0, r0
 801e03c:	f7ff ff8c 	bl	801df58 <TFT_DrawPixel>
			TFT_DrawPixel(x0 - x, y0 - y, color);
 801e040:	1e78      	subs	r0, r7, #1
 801e042:	9b03      	ldr	r3, [sp, #12]
 801e044:	eba8 010b 	sub.w	r1, r8, fp
 801e048:	1b40      	subs	r0, r0, r5
 801e04a:	461a      	mov	r2, r3
 801e04c:	b289      	uxth	r1, r1
 801e04e:	b280      	uxth	r0, r0
 801e050:	f7ff ff82 	bl	801df58 <TFT_DrawPixel>
        if (corner & 0x02) {	
 801e054:	f01a 0f02 	tst.w	sl, #2
 801e058:	d01a      	beq.n	801e090 <TFT_DrawCircleCorner+0xd4>
			TFT_DrawPixel(x0 + x, y0 - y, color);
 801e05a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e05e:	9303      	str	r3, [sp, #12]
 801e060:	fa1f f889 	uxth.w	r8, r9
 801e064:	fa1f fb86 	uxth.w	fp, r6
 801e068:	1c78      	adds	r0, r7, #1
 801e06a:	eba8 010b 	sub.w	r1, r8, fp
 801e06e:	4428      	add	r0, r5
 801e070:	461a      	mov	r2, r3
 801e072:	b289      	uxth	r1, r1
 801e074:	b280      	uxth	r0, r0
 801e076:	f7ff ff6f 	bl	801df58 <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 - x, color);
 801e07a:	f108 31ff 	add.w	r1, r8, #4294967295
 801e07e:	9b03      	ldr	r3, [sp, #12]
 801e080:	1b49      	subs	r1, r1, r5
 801e082:	eb07 000b 	add.w	r0, r7, fp
 801e086:	461a      	mov	r2, r3
 801e088:	b289      	uxth	r1, r1
 801e08a:	b280      	uxth	r0, r0
 801e08c:	f7ff ff64 	bl	801df58 <TFT_DrawPixel>
		if (corner & 0x04) {	
 801e090:	f01a 0f04 	tst.w	sl, #4
 801e094:	d01a      	beq.n	801e0cc <TFT_DrawCircleCorner+0x110>
			TFT_DrawPixel(x0 + x, y0 + y, color);
 801e096:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e09a:	9303      	str	r3, [sp, #12]
 801e09c:	fa1f f889 	uxth.w	r8, r9
 801e0a0:	fa1f fb86 	uxth.w	fp, r6
 801e0a4:	1c78      	adds	r0, r7, #1
 801e0a6:	eb08 010b 	add.w	r1, r8, fp
 801e0aa:	4428      	add	r0, r5
 801e0ac:	461a      	mov	r2, r3
 801e0ae:	b289      	uxth	r1, r1
 801e0b0:	b280      	uxth	r0, r0
 801e0b2:	f7ff ff51 	bl	801df58 <TFT_DrawPixel>
			TFT_DrawPixel(x0 + y, y0 + x, color);
 801e0b6:	f108 0101 	add.w	r1, r8, #1
 801e0ba:	9b03      	ldr	r3, [sp, #12]
 801e0bc:	4429      	add	r1, r5
 801e0be:	eb07 000b 	add.w	r0, r7, fp
 801e0c2:	461a      	mov	r2, r3
 801e0c4:	b289      	uxth	r1, r1
 801e0c6:	b280      	uxth	r0, r0
 801e0c8:	f7ff ff46 	bl	801df58 <TFT_DrawPixel>
        if (corner & 0x08) {	
 801e0cc:	f01a 0f08 	tst.w	sl, #8
 801e0d0:	d01a      	beq.n	801e108 <TFT_DrawCircleCorner+0x14c>
			TFT_DrawPixel(x0 - x, y0 + y, color);
 801e0d2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e0d6:	9303      	str	r3, [sp, #12]
 801e0d8:	fa1f fb89 	uxth.w	fp, r9
 801e0dc:	fa1f f886 	uxth.w	r8, r6
 801e0e0:	1e78      	subs	r0, r7, #1
 801e0e2:	eb0b 0108 	add.w	r1, fp, r8
 801e0e6:	1b40      	subs	r0, r0, r5
 801e0e8:	461a      	mov	r2, r3
 801e0ea:	b289      	uxth	r1, r1
 801e0ec:	b280      	uxth	r0, r0
 801e0ee:	f7ff ff33 	bl	801df58 <TFT_DrawPixel>
			TFT_DrawPixel(x0 - y, y0 + x, color);
 801e0f2:	f10b 0101 	add.w	r1, fp, #1
 801e0f6:	9b03      	ldr	r3, [sp, #12]
 801e0f8:	4429      	add	r1, r5
 801e0fa:	eba7 0008 	sub.w	r0, r7, r8
 801e0fe:	461a      	mov	r2, r3
 801e100:	b289      	uxth	r1, r1
 801e102:	b280      	uxth	r0, r0
 801e104:	f7ff ff28 	bl	801df58 <TFT_DrawPixel>
 801e108:	9b00      	ldr	r3, [sp, #0]
 801e10a:	3301      	adds	r3, #1
 801e10c:	9300      	str	r3, [sp, #0]
 801e10e:	e76a      	b.n	801dfe6 <TFT_DrawCircleCorner+0x2a>

0801e110 <TFT_DrawCircle>:
{
 801e110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801e114:	b295      	uxth	r5, r2
{
 801e116:	b089      	sub	sp, #36	; 0x24
 801e118:	4690      	mov	r8, r2
	int16_t f = 1 - r;
 801e11a:	f1c5 0201 	rsb	r2, r5, #1
 801e11e:	b212      	sxth	r2, r2
 801e120:	9201      	str	r2, [sp, #4]
	int16_t ddF_y = -2 * r;
 801e122:	ebc5 32c5 	rsb	r2, r5, r5, lsl #15
    TFT_DrawPixel(x0, y0 + r, color);
 801e126:	b28f      	uxth	r7, r1
	int16_t ddF_y = -2 * r;
 801e128:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801e12a:	b29c      	uxth	r4, r3
 801e12c:	b286      	uxth	r6, r0
	int16_t ddF_y = -2 * r;
 801e12e:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801e130:	19e9      	adds	r1, r5, r7
	int16_t ddF_y = -2 * r;
 801e132:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801e134:	b289      	uxth	r1, r1
 801e136:	4622      	mov	r2, r4
 801e138:	4630      	mov	r0, r6
 801e13a:	f7ff ff0d 	bl	801df58 <TFT_DrawPixel>
    TFT_DrawPixel(x0, y0 - r, color);
 801e13e:	1b79      	subs	r1, r7, r5
 801e140:	4622      	mov	r2, r4
 801e142:	b289      	uxth	r1, r1
 801e144:	4630      	mov	r0, r6
 801e146:	f7ff ff07 	bl	801df58 <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801e14a:	19a8      	adds	r0, r5, r6
 801e14c:	4622      	mov	r2, r4
 801e14e:	4639      	mov	r1, r7
 801e150:	b280      	uxth	r0, r0
 801e152:	f7ff ff01 	bl	801df58 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801e156:	1b70      	subs	r0, r6, r5
 801e158:	4622      	mov	r2, r4
 801e15a:	4639      	mov	r1, r7
 801e15c:	b280      	uxth	r0, r0
 801e15e:	f7ff fefb 	bl	801df58 <TFT_DrawPixel>
    while (x < y) {
 801e162:	2300      	movs	r3, #0
 801e164:	9302      	str	r3, [sp, #8]
 801e166:	1c73      	adds	r3, r6, #1
 801e168:	9304      	str	r3, [sp, #16]
 801e16a:	1e73      	subs	r3, r6, #1
 801e16c:	9305      	str	r3, [sp, #20]
 801e16e:	1c7b      	adds	r3, r7, #1
 801e170:	9306      	str	r3, [sp, #24]
 801e172:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801e176:	4543      	cmp	r3, r8
 801e178:	db02      	blt.n	801e180 <TFT_DrawCircle+0x70>
}
 801e17a:	b009      	add	sp, #36	; 0x24
 801e17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801e180:	9b01      	ldr	r3, [sp, #4]
 801e182:	2b00      	cmp	r3, #0
 801e184:	db0c      	blt.n	801e1a0 <TFT_DrawCircle+0x90>
            ddF_y += 2;
 801e186:	9b03      	ldr	r3, [sp, #12]
 801e188:	3302      	adds	r3, #2
 801e18a:	b29b      	uxth	r3, r3
 801e18c:	b21a      	sxth	r2, r3
 801e18e:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801e190:	9a01      	ldr	r2, [sp, #4]
 801e192:	4413      	add	r3, r2
            y--;
 801e194:	f108 38ff 	add.w	r8, r8, #4294967295
            f += ddF_y;
 801e198:	b21b      	sxth	r3, r3
            y--;
 801e19a:	fa0f f888 	sxth.w	r8, r8
            f += ddF_y;
 801e19e:	9301      	str	r3, [sp, #4]
 801e1a0:	f8bd 9008 	ldrh.w	r9, [sp, #8]
        f += ddF_x;
 801e1a4:	9b01      	ldr	r3, [sp, #4]
 801e1a6:	eb03 0349 	add.w	r3, r3, r9, lsl #1
 801e1aa:	3303      	adds	r3, #3
 801e1ac:	b21b      	sxth	r3, r3
 801e1ae:	9301      	str	r3, [sp, #4]
 801e1b0:	9b04      	ldr	r3, [sp, #16]
        TFT_DrawPixel(x0 + x, y0 + y, color);
 801e1b2:	fa1f f588 	uxth.w	r5, r8
 801e1b6:	444b      	add	r3, r9
 801e1b8:	eb07 0b05 	add.w	fp, r7, r5
 801e1bc:	b29b      	uxth	r3, r3
 801e1be:	fa1f fb8b 	uxth.w	fp, fp
 801e1c2:	4659      	mov	r1, fp
 801e1c4:	4618      	mov	r0, r3
 801e1c6:	4622      	mov	r2, r4
 801e1c8:	9307      	str	r3, [sp, #28]
 801e1ca:	f7ff fec5 	bl	801df58 <TFT_DrawPixel>
 801e1ce:	9b05      	ldr	r3, [sp, #20]
 801e1d0:	eba3 0a09 	sub.w	sl, r3, r9
 801e1d4:	fa1f fa8a 	uxth.w	sl, sl
        TFT_DrawPixel(x0 - x, y0 + y, color);
 801e1d8:	4659      	mov	r1, fp
 801e1da:	4650      	mov	r0, sl
 801e1dc:	4622      	mov	r2, r4
 801e1de:	f7ff febb 	bl	801df58 <TFT_DrawPixel>
        TFT_DrawPixel(x0 + x, y0 - y, color);
 801e1e2:	eba7 0b05 	sub.w	fp, r7, r5
 801e1e6:	9b07      	ldr	r3, [sp, #28]
 801e1e8:	fa1f fb8b 	uxth.w	fp, fp
 801e1ec:	4618      	mov	r0, r3
 801e1ee:	4659      	mov	r1, fp
 801e1f0:	4622      	mov	r2, r4
 801e1f2:	f7ff feb1 	bl	801df58 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - x, y0 - y, color);
 801e1f6:	4659      	mov	r1, fp
 801e1f8:	4650      	mov	r0, sl
 801e1fa:	4622      	mov	r2, r4
 801e1fc:	f7ff feac 	bl	801df58 <TFT_DrawPixel>
 801e200:	9b06      	ldr	r3, [sp, #24]
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801e202:	eb06 0a05 	add.w	sl, r6, r5
 801e206:	eb09 0b03 	add.w	fp, r9, r3
 801e20a:	fa1f fa8a 	uxth.w	sl, sl
 801e20e:	fa1f fb8b 	uxth.w	fp, fp
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801e212:	1b75      	subs	r5, r6, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801e214:	4622      	mov	r2, r4
 801e216:	4659      	mov	r1, fp
 801e218:	4650      	mov	r0, sl
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801e21a:	b2ad      	uxth	r5, r5
        TFT_DrawPixel(x0 + y, y0 + x, color);
 801e21c:	f7ff fe9c 	bl	801df58 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 + x, color);
 801e220:	4622      	mov	r2, r4
 801e222:	4659      	mov	r1, fp
 801e224:	4628      	mov	r0, r5
 801e226:	f7ff fe97 	bl	801df58 <TFT_DrawPixel>
 801e22a:	1e7b      	subs	r3, r7, #1
 801e22c:	eba3 0909 	sub.w	r9, r3, r9
 801e230:	fa1f f989 	uxth.w	r9, r9
        TFT_DrawPixel(x0 + y, y0 - x, color);
 801e234:	4622      	mov	r2, r4
 801e236:	4649      	mov	r1, r9
 801e238:	4650      	mov	r0, sl
 801e23a:	f7ff fe8d 	bl	801df58 <TFT_DrawPixel>
        TFT_DrawPixel(x0 - y, y0 - x, color);
 801e23e:	4622      	mov	r2, r4
 801e240:	4649      	mov	r1, r9
 801e242:	4628      	mov	r0, r5
 801e244:	f7ff fe88 	bl	801df58 <TFT_DrawPixel>
 801e248:	9b02      	ldr	r3, [sp, #8]
 801e24a:	3301      	adds	r3, #1
 801e24c:	9302      	str	r3, [sp, #8]
 801e24e:	e790      	b.n	801e172 <TFT_DrawCircle+0x62>

0801e250 <TFT_DrawLine>:


int16_t prev_x=0, prev_y=0; 
//----------------------------------------
void TFT_DrawLine(uint16_t x0, uint16_t y0,	uint16_t x1, uint16_t y1, uint16_t color)
{
 801e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e254:	b085      	sub	sp, #20
 801e256:	469a      	mov	sl, r3
	int16_t dx, dy, sx, sy, err, e2;
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e258:	4290      	cmp	r0, r2
{
 801e25a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 801e25e:	9301      	str	r3, [sp, #4]
 801e260:	4607      	mov	r7, r0
 801e262:	460e      	mov	r6, r1
 801e264:	4693      	mov	fp, r2
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e266:	d211      	bcs.n	801e28c <TFT_DrawLine+0x3c>
 801e268:	eba2 0800 	sub.w	r8, r2, r0
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e26c:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e26e:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e272:	d341      	bcc.n	801e2f8 <TFT_DrawLine+0xa8>
	sx = (x0 < x1) ? 1 : -1; 
 801e274:	455f      	cmp	r7, fp
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e276:	eba6 050a 	sub.w	r5, r6, sl
 801e27a:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801e27c:	bf2c      	ite	cs
 801e27e:	f04f 39ff 	movcs.w	r9, #4294967295
 801e282:	f04f 0901 	movcc.w	r9, #1
	sy = (y0 < y1) ? 1 : -1; 
 801e286:	f04f 33ff 	mov.w	r3, #4294967295
 801e28a:	e00b      	b.n	801e2a4 <TFT_DrawLine+0x54>
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e28c:	eba0 0802 	sub.w	r8, r0, r2
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e290:	4551      	cmp	r1, sl
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 801e292:	fa0f f888 	sxth.w	r8, r8
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e296:	d2ed      	bcs.n	801e274 <TFT_DrawLine+0x24>
 801e298:	ebaa 0501 	sub.w	r5, sl, r1
 801e29c:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801e29e:	f04f 39ff 	mov.w	r9, #4294967295
	sy = (y0 < y1) ? 1 : -1; 
 801e2a2:	2301      	movs	r3, #1
	err = ((dx > dy) ? dx : -dy) / 2; 
 801e2a4:	45a8      	cmp	r8, r5
 801e2a6:	f04f 0402 	mov.w	r4, #2
 801e2aa:	dd20      	ble.n	801e2ee <TFT_DrawLine+0x9e>
 801e2ac:	fb98 f4f4 	sdiv	r4, r8, r4

		if (x0 == x1 && y0 == y1) {
			break;
		}
		e2 = err; 
		if (e2 > -dx) {
 801e2b0:	f1c8 0200 	rsb	r2, r8, #0
 801e2b4:	9202      	str	r2, [sp, #8]
		TFT_DrawPixel(x0, y0, color); 
 801e2b6:	9a01      	ldr	r2, [sp, #4]
 801e2b8:	9303      	str	r3, [sp, #12]
 801e2ba:	4631      	mov	r1, r6
 801e2bc:	4638      	mov	r0, r7
 801e2be:	f7ff fe4b 	bl	801df58 <TFT_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 801e2c2:	455f      	cmp	r7, fp
 801e2c4:	9b03      	ldr	r3, [sp, #12]
 801e2c6:	d101      	bne.n	801e2cc <TFT_DrawLine+0x7c>
 801e2c8:	4556      	cmp	r6, sl
 801e2ca:	d01b      	beq.n	801e304 <TFT_DrawLine+0xb4>
		if (e2 > -dx) {
 801e2cc:	9a02      	ldr	r2, [sp, #8]
 801e2ce:	4294      	cmp	r4, r2
			err -= dy;
 801e2d0:	bfc1      	itttt	gt
 801e2d2:	1b62      	subgt	r2, r4, r5
			x0 += sx;
 801e2d4:	444f      	addgt	r7, r9
			err -= dy;
 801e2d6:	b212      	sxthgt	r2, r2
			x0 += sx;
 801e2d8:	b2bf      	uxthgt	r7, r7
 801e2da:	bfd8      	it	le
 801e2dc:	4622      	movle	r2, r4
		} 
		if (e2 < dy) {
 801e2de:	42ac      	cmp	r4, r5
 801e2e0:	da03      	bge.n	801e2ea <TFT_DrawLine+0x9a>
			err += dx;
 801e2e2:	4442      	add	r2, r8
			y0 += sy;
 801e2e4:	441e      	add	r6, r3
			err += dx;
 801e2e6:	b212      	sxth	r2, r2
			y0 += sy;
 801e2e8:	b2b6      	uxth	r6, r6
	sy = (y0 < y1) ? 1 : -1; 
 801e2ea:	4614      	mov	r4, r2
 801e2ec:	e7e3      	b.n	801e2b6 <TFT_DrawLine+0x66>
	err = ((dx > dy) ? dx : -dy) / 2; 
 801e2ee:	fb95 f4f4 	sdiv	r4, r5, r4
 801e2f2:	4264      	negs	r4, r4
 801e2f4:	b224      	sxth	r4, r4
 801e2f6:	e7db      	b.n	801e2b0 <TFT_DrawLine+0x60>
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 801e2f8:	ebaa 0501 	sub.w	r5, sl, r1
 801e2fc:	b22d      	sxth	r5, r5
	sx = (x0 < x1) ? 1 : -1; 
 801e2fe:	f04f 0901 	mov.w	r9, #1
 801e302:	e7ce      	b.n	801e2a2 <TFT_DrawLine+0x52>
		} 
	}
}
 801e304:	b005      	add	sp, #20
 801e306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e30a <TFT_FillRectangle>:
{
 801e30a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801e30e:	f8bd 8020 	ldrh.w	r8, [sp, #32]
{
 801e312:	4606      	mov	r6, r0
 801e314:	460c      	mov	r4, r1
 801e316:	4617      	mov	r7, r2
 801e318:	461d      	mov	r5, r3
	for (; y0 <= y1; y0++) {
 801e31a:	42ac      	cmp	r4, r5
 801e31c:	d902      	bls.n	801e324 <TFT_FillRectangle+0x1a>
}
 801e31e:	b002      	add	sp, #8
 801e320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		TFT_DrawLine(x0, y0, x1, y0, color);
 801e324:	4623      	mov	r3, r4
 801e326:	4621      	mov	r1, r4
 801e328:	f8cd 8000 	str.w	r8, [sp]
 801e32c:	463a      	mov	r2, r7
 801e32e:	4630      	mov	r0, r6
	for (; y0 <= y1; y0++) {
 801e330:	3401      	adds	r4, #1
		TFT_DrawLine(x0, y0, x1, y0, color);
 801e332:	f7ff ff8d 	bl	801e250 <TFT_DrawLine>
	for (; y0 <= y1; y0++) {
 801e336:	b2a4      	uxth	r4, r4
 801e338:	e7ef      	b.n	801e31a <TFT_FillRectangle+0x10>

0801e33a <TFT_DrawRectangle>:
{
 801e33a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801e33e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 801e342:	9400      	str	r4, [sp, #0]
{
 801e344:	461f      	mov	r7, r3
 801e346:	4605      	mov	r5, r0
 801e348:	4688      	mov	r8, r1
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801e34a:	460b      	mov	r3, r1
{
 801e34c:	4616      	mov	r6, r2
	TFT_DrawLine(x0, y0, x1, y0, color); /* Top */
 801e34e:	f7ff ff7f 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(x0, y0, x0, y1, color);	/* Left */
 801e352:	463b      	mov	r3, r7
 801e354:	462a      	mov	r2, r5
 801e356:	4641      	mov	r1, r8
 801e358:	4628      	mov	r0, r5
 801e35a:	9400      	str	r4, [sp, #0]
 801e35c:	f7ff ff78 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(x1, y0, x1, y1, color);	/* Right */
 801e360:	463b      	mov	r3, r7
 801e362:	4632      	mov	r2, r6
 801e364:	4641      	mov	r1, r8
 801e366:	4630      	mov	r0, r6
 801e368:	9400      	str	r4, [sp, #0]
 801e36a:	f7ff ff71 	bl	801e250 <TFT_DrawLine>
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801e36e:	463b      	mov	r3, r7
 801e370:	4632      	mov	r2, r6
 801e372:	4639      	mov	r1, r7
 801e374:	4628      	mov	r0, r5
 801e376:	9408      	str	r4, [sp, #32]
}
 801e378:	b002      	add	sp, #8
 801e37a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	TFT_DrawLine(x0, y1, x1, y1, color);	/* Bottom */
 801e37e:	f7ff bf67 	b.w	801e250 <TFT_DrawLine>

0801e382 <TFT_DrawFilledCircle>:
{
 801e382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int16_t f = 1 - r;
 801e386:	b297      	uxth	r7, r2
{
 801e388:	4691      	mov	r9, r2
	int16_t ddF_y = -2 * r;
 801e38a:	ebc7 32c7 	rsb	r2, r7, r7, lsl #15
{
 801e38e:	b089      	sub	sp, #36	; 0x24
    TFT_DrawPixel(x0, y0 + r, color);
 801e390:	b28d      	uxth	r5, r1
	int16_t ddF_y = -2 * r;
 801e392:	0052      	lsls	r2, r2, #1
    TFT_DrawPixel(x0, y0 + r, color);
 801e394:	b29e      	uxth	r6, r3
 801e396:	fa1f f880 	uxth.w	r8, r0
	int16_t ddF_y = -2 * r;
 801e39a:	b212      	sxth	r2, r2
    TFT_DrawPixel(x0, y0 + r, color);
 801e39c:	1979      	adds	r1, r7, r5
	int16_t ddF_y = -2 * r;
 801e39e:	9203      	str	r2, [sp, #12]
    TFT_DrawPixel(x0, y0 + r, color);
 801e3a0:	b289      	uxth	r1, r1
 801e3a2:	4632      	mov	r2, r6
 801e3a4:	4640      	mov	r0, r8
 801e3a6:	f7ff fdd7 	bl	801df58 <TFT_DrawPixel>
    TFT_DrawPixel(x0 + r, y0, color);
 801e3aa:	eb07 0a08 	add.w	sl, r7, r8
    TFT_DrawPixel(x0, y0 - r, color);
 801e3ae:	1be9      	subs	r1, r5, r7
	int16_t f = 1 - r;
 801e3b0:	f1c7 0401 	rsb	r4, r7, #1
    TFT_DrawPixel(x0, y0 - r, color);
 801e3b4:	4632      	mov	r2, r6
 801e3b6:	b289      	uxth	r1, r1
 801e3b8:	4640      	mov	r0, r8
    TFT_DrawPixel(x0 + r, y0, color);
 801e3ba:	fa1f fa8a 	uxth.w	sl, sl
    TFT_DrawPixel(x0 - r, y0, color);
 801e3be:	eba8 0707 	sub.w	r7, r8, r7
    TFT_DrawPixel(x0, y0 - r, color);
 801e3c2:	f7ff fdc9 	bl	801df58 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801e3c6:	b2bf      	uxth	r7, r7
    TFT_DrawPixel(x0 + r, y0, color);
 801e3c8:	4632      	mov	r2, r6
 801e3ca:	4629      	mov	r1, r5
 801e3cc:	4650      	mov	r0, sl
 801e3ce:	f7ff fdc3 	bl	801df58 <TFT_DrawPixel>
    TFT_DrawPixel(x0 - r, y0, color);
 801e3d2:	4632      	mov	r2, r6
 801e3d4:	4629      	mov	r1, r5
 801e3d6:	4638      	mov	r0, r7
 801e3d8:	f7ff fdbe 	bl	801df58 <TFT_DrawPixel>
    TFT_DrawLine(x0 - r, y0, x0 + r, y0, color);
 801e3dc:	462b      	mov	r3, r5
 801e3de:	9600      	str	r6, [sp, #0]
 801e3e0:	4652      	mov	r2, sl
 801e3e2:	4629      	mov	r1, r5
 801e3e4:	4638      	mov	r0, r7
 801e3e6:	f7ff ff33 	bl	801e250 <TFT_DrawLine>
    while (x < y) {
 801e3ea:	2300      	movs	r3, #0
 801e3ec:	9302      	str	r3, [sp, #8]
 801e3ee:	f108 33ff 	add.w	r3, r8, #4294967295
 801e3f2:	9305      	str	r3, [sp, #20]
 801e3f4:	f108 0301 	add.w	r3, r8, #1
 801e3f8:	9306      	str	r3, [sp, #24]
 801e3fa:	1c6b      	adds	r3, r5, #1
	int16_t f = 1 - r;
 801e3fc:	b224      	sxth	r4, r4
 801e3fe:	9307      	str	r3, [sp, #28]
    while (x < y) {
 801e400:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801e404:	454b      	cmp	r3, r9
 801e406:	db02      	blt.n	801e40e <TFT_DrawFilledCircle+0x8c>
}
 801e408:	b009      	add	sp, #36	; 0x24
 801e40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801e40e:	2c00      	cmp	r4, #0
 801e410:	db0a      	blt.n	801e428 <TFT_DrawFilledCircle+0xa6>
            ddF_y += 2;
 801e412:	9b03      	ldr	r3, [sp, #12]
 801e414:	3302      	adds	r3, #2
 801e416:	b29b      	uxth	r3, r3
            y--;
 801e418:	f109 39ff 	add.w	r9, r9, #4294967295
            ddF_y += 2;
 801e41c:	b21a      	sxth	r2, r3
            f += ddF_y;
 801e41e:	441c      	add	r4, r3
            y--;
 801e420:	fa0f f989 	sxth.w	r9, r9
            ddF_y += 2;
 801e424:	9203      	str	r2, [sp, #12]
            f += ddF_y;
 801e426:	b224      	sxth	r4, r4
 801e428:	f8bd a008 	ldrh.w	sl, [sp, #8]
 801e42c:	9b05      	ldr	r3, [sp, #20]
 801e42e:	9a06      	ldr	r2, [sp, #24]
        TFT_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, color);
 801e430:	9600      	str	r6, [sp, #0]
 801e432:	fa1f f789 	uxth.w	r7, r9
 801e436:	eba3 0b0a 	sub.w	fp, r3, sl
 801e43a:	19eb      	adds	r3, r5, r7
 801e43c:	fa1f fb8b 	uxth.w	fp, fp
 801e440:	b29b      	uxth	r3, r3
 801e442:	4452      	add	r2, sl
 801e444:	b292      	uxth	r2, r2
 801e446:	4619      	mov	r1, r3
 801e448:	4658      	mov	r0, fp
 801e44a:	9204      	str	r2, [sp, #16]
 801e44c:	f7ff ff00 	bl	801e250 <TFT_DrawLine>
        TFT_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, color);
 801e450:	1beb      	subs	r3, r5, r7
 801e452:	b29b      	uxth	r3, r3
 801e454:	465a      	mov	r2, fp
 801e456:	4619      	mov	r1, r3
 801e458:	9804      	ldr	r0, [sp, #16]
 801e45a:	9600      	str	r6, [sp, #0]
 801e45c:	f7ff fef8 	bl	801e250 <TFT_DrawLine>
 801e460:	9b07      	ldr	r3, [sp, #28]
        TFT_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, color);
 801e462:	9600      	str	r6, [sp, #0]
 801e464:	eb08 0b07 	add.w	fp, r8, r7
 801e468:	4453      	add	r3, sl
 801e46a:	eba8 0707 	sub.w	r7, r8, r7
 801e46e:	b29b      	uxth	r3, r3
 801e470:	fa1f fb8b 	uxth.w	fp, fp
 801e474:	b2bf      	uxth	r7, r7
 801e476:	4619      	mov	r1, r3
 801e478:	463a      	mov	r2, r7
 801e47a:	4658      	mov	r0, fp
 801e47c:	f7ff fee8 	bl	801e250 <TFT_DrawLine>
 801e480:	1e6b      	subs	r3, r5, #1
 801e482:	eba3 030a 	sub.w	r3, r3, sl
 801e486:	b29b      	uxth	r3, r3
        TFT_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, color);
 801e488:	4619      	mov	r1, r3
 801e48a:	9600      	str	r6, [sp, #0]
 801e48c:	463a      	mov	r2, r7
 801e48e:	4658      	mov	r0, fp
 801e490:	f7ff fede 	bl	801e250 <TFT_DrawLine>
 801e494:	9b02      	ldr	r3, [sp, #8]
        f += ddF_x;
 801e496:	eb04 044a 	add.w	r4, r4, sl, lsl #1
 801e49a:	3403      	adds	r4, #3
 801e49c:	3301      	adds	r3, #1
 801e49e:	b224      	sxth	r4, r4
 801e4a0:	9302      	str	r3, [sp, #8]
 801e4a2:	e7ad      	b.n	801e400 <TFT_DrawFilledCircle+0x7e>

0801e4a4 <TFT_DrawFilledCircleCorner>:
{
 801e4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e4a8:	4699      	mov	r9, r3
	int16_t f = 1 - r;
 801e4aa:	b293      	uxth	r3, r2
 801e4ac:	f1c3 0601 	rsb	r6, r3, #1
	int16_t ddF_y = -2 * r;
 801e4b0:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
{
 801e4b4:	b087      	sub	sp, #28
	int16_t ddF_y = -2 * r;
 801e4b6:	005b      	lsls	r3, r3, #1
 801e4b8:	b21b      	sxth	r3, r3
 801e4ba:	9304      	str	r3, [sp, #16]
    while (x < y) {
 801e4bc:	2300      	movs	r3, #0
 801e4be:	9302      	str	r3, [sp, #8]
        if (corner & 0x01) {
 801e4c0:	f009 0301 	and.w	r3, r9, #1
{
 801e4c4:	9103      	str	r1, [sp, #12]
 801e4c6:	4617      	mov	r7, r2
	int16_t f = 1 - r;
 801e4c8:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801e4ca:	9305      	str	r3, [sp, #20]
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801e4cc:	b284      	uxth	r4, r0
    while (x < y) {
 801e4ce:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801e4d2:	42bb      	cmp	r3, r7
 801e4d4:	db02      	blt.n	801e4dc <TFT_DrawFilledCircleCorner+0x38>
}
 801e4d6:	b007      	add	sp, #28
 801e4d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (f >= 0) {
 801e4dc:	2e00      	cmp	r6, #0
 801e4de:	db08      	blt.n	801e4f2 <TFT_DrawFilledCircleCorner+0x4e>
            ddF_y += 2;
 801e4e0:	9b04      	ldr	r3, [sp, #16]
 801e4e2:	3302      	adds	r3, #2
 801e4e4:	b29b      	uxth	r3, r3
            y--;
 801e4e6:	3f01      	subs	r7, #1
            ddF_y += 2;
 801e4e8:	b21a      	sxth	r2, r3
            f += ddF_y;
 801e4ea:	441e      	add	r6, r3
            y--;
 801e4ec:	b23f      	sxth	r7, r7
            ddF_y += 2;
 801e4ee:	9204      	str	r2, [sp, #16]
            f += ddF_y;
 801e4f0:	b236      	sxth	r6, r6
 801e4f2:	f8bd 5008 	ldrh.w	r5, [sp, #8]
        if (corner & 0x01) {
 801e4f6:	9b05      	ldr	r3, [sp, #20]
        f += ddF_x;
 801e4f8:	eb06 0645 	add.w	r6, r6, r5, lsl #1
 801e4fc:	3603      	adds	r6, #3
 801e4fe:	b236      	sxth	r6, r6
        if (corner & 0x01) {
 801e500:	b1f3      	cbz	r3, 801e540 <TFT_DrawFilledCircleCorner+0x9c>
			TFT_DrawLine(x0, y0 - y, x0 - x, y0 - y, color);
 801e502:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801e506:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801e50a:	f8cd b000 	str.w	fp, [sp]
 801e50e:	fa1f fa87 	uxth.w	sl, r7
 801e512:	eba8 030a 	sub.w	r3, r8, sl
 801e516:	1e62      	subs	r2, r4, #1
 801e518:	b29b      	uxth	r3, r3
 801e51a:	1b52      	subs	r2, r2, r5
 801e51c:	4619      	mov	r1, r3
 801e51e:	b292      	uxth	r2, r2
 801e520:	4620      	mov	r0, r4
 801e522:	f7ff fe95 	bl	801e250 <TFT_DrawLine>
 801e526:	f108 33ff 	add.w	r3, r8, #4294967295
 801e52a:	1b5b      	subs	r3, r3, r5
 801e52c:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 - x, x0 - y, y0 - x, color);
 801e52e:	eba4 020a 	sub.w	r2, r4, sl
 801e532:	f8cd b000 	str.w	fp, [sp]
 801e536:	b292      	uxth	r2, r2
 801e538:	4619      	mov	r1, r3
 801e53a:	4620      	mov	r0, r4
 801e53c:	f7ff fe88 	bl	801e250 <TFT_DrawLine>
        if (corner & 0x02) {	
 801e540:	f019 0f02 	tst.w	r9, #2
 801e544:	d01e      	beq.n	801e584 <TFT_DrawFilledCircleCorner+0xe0>
			TFT_DrawLine(x0 + x, y0 - y, x0, y0 - y, color);
 801e546:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801e54a:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801e54e:	f8cd b000 	str.w	fp, [sp]
 801e552:	fa1f fa87 	uxth.w	sl, r7
 801e556:	eba8 030a 	sub.w	r3, r8, sl
 801e55a:	1c60      	adds	r0, r4, #1
 801e55c:	b29b      	uxth	r3, r3
 801e55e:	4428      	add	r0, r5
 801e560:	4619      	mov	r1, r3
 801e562:	4622      	mov	r2, r4
 801e564:	b280      	uxth	r0, r0
 801e566:	f7ff fe73 	bl	801e250 <TFT_DrawLine>
 801e56a:	f108 33ff 	add.w	r3, r8, #4294967295
 801e56e:	1b5b      	subs	r3, r3, r5
 801e570:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 - x, x0, y0 - x, color);
 801e572:	eb04 000a 	add.w	r0, r4, sl
 801e576:	f8cd b000 	str.w	fp, [sp]
 801e57a:	4622      	mov	r2, r4
 801e57c:	4619      	mov	r1, r3
 801e57e:	b280      	uxth	r0, r0
 801e580:	f7ff fe66 	bl	801e250 <TFT_DrawLine>
		if (corner & 0x04) {
 801e584:	f019 0f04 	tst.w	r9, #4
 801e588:	d01e      	beq.n	801e5c8 <TFT_DrawFilledCircleCorner+0x124>
			TFT_DrawLine(x0, y0 + y, x0 + x, y0 + y, color);
 801e58a:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801e58e:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801e592:	f8cd b000 	str.w	fp, [sp]
 801e596:	fa1f fa87 	uxth.w	sl, r7
 801e59a:	eb08 030a 	add.w	r3, r8, sl
 801e59e:	1c62      	adds	r2, r4, #1
 801e5a0:	b29b      	uxth	r3, r3
 801e5a2:	442a      	add	r2, r5
 801e5a4:	4619      	mov	r1, r3
 801e5a6:	b292      	uxth	r2, r2
 801e5a8:	4620      	mov	r0, r4
 801e5aa:	f7ff fe51 	bl	801e250 <TFT_DrawLine>
 801e5ae:	f108 0301 	add.w	r3, r8, #1
 801e5b2:	442b      	add	r3, r5
 801e5b4:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0 + y, y0 + x, x0, y0 + x, color);
 801e5b6:	eb04 000a 	add.w	r0, r4, sl
 801e5ba:	f8cd b000 	str.w	fp, [sp]
 801e5be:	4622      	mov	r2, r4
 801e5c0:	4619      	mov	r1, r3
 801e5c2:	b280      	uxth	r0, r0
 801e5c4:	f7ff fe44 	bl	801e250 <TFT_DrawLine>
        if (corner & 0x08) {
 801e5c8:	f019 0f08 	tst.w	r9, #8
 801e5cc:	d01e      	beq.n	801e60c <TFT_DrawFilledCircleCorner+0x168>
			TFT_DrawLine(x0 - x, y0 + y, x0, y0 + y, color);
 801e5ce:	f8bd 800c 	ldrh.w	r8, [sp, #12]
 801e5d2:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
 801e5d6:	f8cd b000 	str.w	fp, [sp]
 801e5da:	fa1f fa87 	uxth.w	sl, r7
 801e5de:	eb08 030a 	add.w	r3, r8, sl
 801e5e2:	1e60      	subs	r0, r4, #1
 801e5e4:	b29b      	uxth	r3, r3
 801e5e6:	1b40      	subs	r0, r0, r5
 801e5e8:	4619      	mov	r1, r3
 801e5ea:	4622      	mov	r2, r4
 801e5ec:	b280      	uxth	r0, r0
 801e5ee:	f7ff fe2f 	bl	801e250 <TFT_DrawLine>
 801e5f2:	f108 0301 	add.w	r3, r8, #1
 801e5f6:	442b      	add	r3, r5
 801e5f8:	b29b      	uxth	r3, r3
			TFT_DrawLine(x0, y0 + x, x0 - y, y0 + x, color);
 801e5fa:	eba4 020a 	sub.w	r2, r4, sl
 801e5fe:	f8cd b000 	str.w	fp, [sp]
 801e602:	b292      	uxth	r2, r2
 801e604:	4619      	mov	r1, r3
 801e606:	4620      	mov	r0, r4
 801e608:	f7ff fe22 	bl	801e250 <TFT_DrawLine>
 801e60c:	9b02      	ldr	r3, [sp, #8]
 801e60e:	3301      	adds	r3, #1
 801e610:	9302      	str	r3, [sp, #8]
 801e612:	e75c      	b.n	801e4ce <TFT_DrawFilledCircleCorner+0x2a>

0801e614 <TFT_DrawFilledRoundedRectangle>:
{
 801e614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (x1 == x0 || y1 == y0) {
 801e618:	4282      	cmp	r2, r0
{
 801e61a:	4683      	mov	fp, r0
 801e61c:	460d      	mov	r5, r1
 801e61e:	4692      	mov	sl, r2
 801e620:	461c      	mov	r4, r3
 801e622:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 801e626:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	if (x1 == x0 || y1 == y0) {
 801e62a:	d06d      	beq.n	801e708 <TFT_DrawFilledRoundedRectangle+0xf4>
 801e62c:	428b      	cmp	r3, r1
 801e62e:	d06b      	beq.n	801e708 <TFT_DrawFilledRoundedRectangle+0xf4>
	if (r == 0) {
 801e630:	b91e      	cbnz	r6, 801e63a <TFT_DrawFilledRoundedRectangle+0x26>
		TFT_FillRectangle(x0, y0, x1, y1, color);
 801e632:	f8cd 8000 	str.w	r8, [sp]
 801e636:	f7ff fe68 	bl	801e30a <TFT_FillRectangle>
	if (x0 > x1) {
 801e63a:	45da      	cmp	sl, fp
 801e63c:	bf3e      	ittt	cc
 801e63e:	465b      	movcc	r3, fp
 801e640:	46d3      	movcc	fp, sl
 801e642:	469a      	movcc	sl, r3
	if (y0 > y1) {
 801e644:	42ac      	cmp	r4, r5
 801e646:	bf38      	it	cc
 801e648:	462b      	movcc	r3, r5
	if (r > ((x1 - x0) / 2)) {
 801e64a:	ebaa 010b 	sub.w	r1, sl, fp
	if (y0 > y1) {
 801e64e:	bf3c      	itt	cc
 801e650:	4625      	movcc	r5, r4
 801e652:	461c      	movcc	r4, r3
	if (r > ((x1 - x0) / 2)) {
 801e654:	2302      	movs	r3, #2
 801e656:	fb91 f1f3 	sdiv	r1, r1, r3
 801e65a:	428e      	cmp	r6, r1
		r = (x1 - x0) / 2;
 801e65c:	bfc8      	it	gt
 801e65e:	b28e      	uxthgt	r6, r1
 801e660:	461a      	mov	r2, r3
	if (r > ((y1 - y0) / 2)) {
 801e662:	1b63      	subs	r3, r4, r5
 801e664:	fb93 f3f2 	sdiv	r3, r3, r2
 801e668:	429e      	cmp	r6, r3
		r = (y1 - y0) / 2;
 801e66a:	bfc8      	it	gt
 801e66c:	b29e      	uxthgt	r6, r3
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801e66e:	eb0b 0706 	add.w	r7, fp, r6
 801e672:	ebaa 0906 	sub.w	r9, sl, r6
 801e676:	b2bf      	uxth	r7, r7
 801e678:	fa1f f989 	uxth.w	r9, r9
 801e67c:	4623      	mov	r3, r4
 801e67e:	4629      	mov	r1, r5
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801e680:	1ba4      	subs	r4, r4, r6
 801e682:	4435      	add	r5, r6
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801e684:	464a      	mov	r2, r9
 801e686:	4638      	mov	r0, r7
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801e688:	b2ad      	uxth	r5, r5
 801e68a:	b2a4      	uxth	r4, r4
	TFT_FillRectangle(x0 + r, y0, x1 - r, y1, color);
 801e68c:	f8cd 8000 	str.w	r8, [sp]
 801e690:	f7ff fe3b 	bl	801e30a <TFT_FillRectangle>
	TFT_FillRectangle(x0, y0 + r, x0 + r, y1 - r, color);
 801e694:	4623      	mov	r3, r4
 801e696:	463a      	mov	r2, r7
 801e698:	4629      	mov	r1, r5
 801e69a:	4658      	mov	r0, fp
 801e69c:	f8cd 8000 	str.w	r8, [sp]
 801e6a0:	f7ff fe33 	bl	801e30a <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801e6a4:	b236      	sxth	r6, r6
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801e6a6:	4623      	mov	r3, r4
 801e6a8:	4652      	mov	r2, sl
 801e6aa:	4629      	mov	r1, r5
 801e6ac:	4648      	mov	r0, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801e6ae:	b23f      	sxth	r7, r7
 801e6b0:	b22d      	sxth	r5, r5
	TFT_FillRectangle(x1 - r, y0 + r, x1, y1 - r, color);
 801e6b2:	f8cd 8000 	str.w	r8, [sp]
 801e6b6:	f7ff fe28 	bl	801e30a <TFT_FillRectangle>
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801e6ba:	fa0f f989 	sxth.w	r9, r9
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801e6be:	4632      	mov	r2, r6
 801e6c0:	4629      	mov	r1, r5
 801e6c2:	4638      	mov	r0, r7
 801e6c4:	f8cd 8000 	str.w	r8, [sp]
 801e6c8:	2301      	movs	r3, #1
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801e6ca:	3c01      	subs	r4, #1
	TFT_DrawFilledCircleCorner(x0 + r, y0 + r, r, 0x01, color);
 801e6cc:	f7ff feea 	bl	801e4a4 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801e6d0:	b224      	sxth	r4, r4
	TFT_DrawFilledCircleCorner(x1 - r, y0 + r, r, 0x02, color);
 801e6d2:	4632      	mov	r2, r6
 801e6d4:	4629      	mov	r1, r5
 801e6d6:	4648      	mov	r0, r9
 801e6d8:	f8cd 8000 	str.w	r8, [sp]
 801e6dc:	2302      	movs	r3, #2
 801e6de:	f7ff fee1 	bl	801e4a4 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x1 - r, y1 - r - 1, r, 0x04, color);
 801e6e2:	4632      	mov	r2, r6
 801e6e4:	4621      	mov	r1, r4
 801e6e6:	4648      	mov	r0, r9
 801e6e8:	f8cd 8000 	str.w	r8, [sp]
 801e6ec:	2304      	movs	r3, #4
 801e6ee:	f7ff fed9 	bl	801e4a4 <TFT_DrawFilledCircleCorner>
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801e6f2:	2308      	movs	r3, #8
 801e6f4:	4632      	mov	r2, r6
 801e6f6:	4621      	mov	r1, r4
 801e6f8:	4638      	mov	r0, r7
 801e6fa:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
}
 801e6fe:	b003      	add	sp, #12
 801e700:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TFT_DrawFilledCircleCorner(x0 + r, y1 - r - 1, r, 0x08, color);
 801e704:	f7ff bece 	b.w	801e4a4 <TFT_DrawFilledCircleCorner>
}
 801e708:	b003      	add	sp, #12
 801e70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e70e <TFT_DrawBitmap>:
	}
}


void TFT_DrawBitmap(uint16_t X1, uint16_t Y1, sImage pbmp)
{
 801e70e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e712:	4688      	mov	r8, r1
 801e714:	a902      	add	r1, sp, #8
 801e716:	e901 000c 	stmdb	r1, {r2, r3}
 801e71a:	4607      	mov	r7, r0
	uint16_t Xpos, Ypos;
	uint32_t i = 0;
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801e71c:	4645      	mov	r5, r8
	uint32_t i = 0;
 801e71e:	2400      	movs	r4, #0
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801e720:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801e724:	4443      	add	r3, r8
 801e726:	429d      	cmp	r5, r3
 801e728:	da15      	bge.n	801e756 <TFT_DrawBitmap+0x48>
 801e72a:	0066      	lsls	r6, r4, #1
 801e72c:	eba7 0904 	sub.w	r9, r7, r4
 801e730:	e006      	b.n	801e740 <TFT_DrawBitmap+0x32>
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[i]);
 801e732:	9b01      	ldr	r3, [sp, #4]
 801e734:	4629      	mov	r1, r5
 801e736:	5b9a      	ldrh	r2, [r3, r6]
 801e738:	f7ff fc0e 	bl	801df58 <TFT_DrawPixel>
			i++;
 801e73c:	3401      	adds	r4, #1
 801e73e:	3602      	adds	r6, #2
		for(Xpos=X1; Xpos < pbmp.Width+X1; Xpos++){
 801e740:	f8bd 3000 	ldrh.w	r3, [sp]
 801e744:	eb09 0004 	add.w	r0, r9, r4
 801e748:	b280      	uxth	r0, r0
 801e74a:	443b      	add	r3, r7
 801e74c:	4298      	cmp	r0, r3
 801e74e:	dbf0      	blt.n	801e732 <TFT_DrawBitmap+0x24>
	for(Ypos = Y1; Ypos < pbmp.Height+Y1; Ypos++){
 801e750:	3501      	adds	r5, #1
 801e752:	b2ad      	uxth	r5, r5
 801e754:	e7e4      	b.n	801e720 <TFT_DrawBitmap+0x12>
		}
	}
}
 801e756:	b003      	add	sp, #12
 801e758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801e75c <TFT_SetFont>:

//----------------------------------------

void TFT_SetFont(sFONT *fonts)
{
  lcdprop.pFont=fonts;
 801e75c:	4b01      	ldr	r3, [pc, #4]	; (801e764 <TFT_SetFont+0x8>)
 801e75e:	6098      	str	r0, [r3, #8]
 801e760:	4770      	bx	lr
 801e762:	bf00      	nop
 801e764:	20090924 	.word	0x20090924

0801e768 <TFT_SetTextColor>:

//----------------------------------------

void TFT_SetTextColor(uint32_t color)
{
  lcdprop.TextColor=color;
 801e768:	4b01      	ldr	r3, [pc, #4]	; (801e770 <TFT_SetTextColor+0x8>)
 801e76a:	6018      	str	r0, [r3, #0]
 801e76c:	4770      	bx	lr
 801e76e:	bf00      	nop
 801e770:	20090924 	.word	0x20090924

0801e774 <TFT_SetBackColor>:

//----------------------------------------

void TFT_SetBackColor(uint32_t color)
{
  lcdprop.BackColor=color;
 801e774:	4b01      	ldr	r3, [pc, #4]	; (801e77c <TFT_SetBackColor+0x8>)
 801e776:	6058      	str	r0, [r3, #4]
 801e778:	4770      	bx	lr
 801e77a:	bf00      	nop
 801e77c:	20090924 	.word	0x20090924

0801e780 <TFT_DrawCharRus>:

//----------------------------------------
	//--------------------------------------------------------------

void TFT_DrawCharRus(uint16_t x, uint16_t y, const uint8_t c)
{
 801e780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e784:	b085      	sub	sp, #20
  uint32_t i = 0, j = 0;
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
	if(c == 0x01)
 801e786:	2a01      	cmp	r2, #1
{
 801e788:	9001      	str	r0, [sp, #4]
 801e78a:	9102      	str	r1, [sp, #8]
 801e78c:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801e844 <TFT_DrawCharRus+0xc4>
 801e790:	482b      	ldr	r0, [pc, #172]	; (801e840 <TFT_DrawCharRus+0xc0>)
	if(c == 0x01)
 801e792:	d11f      	bne.n	801e7d4 <TFT_DrawCharRus+0x54>
	{
		ch = &lcdprop.pFont->table[0];
 801e794:	6882      	ldr	r2, [r0, #8]
 801e796:	6812      	ldr	r2, [r2, #0]
	}
	else
	{
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801e798:	f8cb 2000 	str.w	r2, [fp]
	}
	
	height = lcdprop.pFont->Height;
 801e79c:	6882      	ldr	r2, [r0, #8]
	width = lcdprop.pFont->Width;
 801e79e:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	height = lcdprop.pFont->Height;
 801e7a2:	88d3      	ldrh	r3, [r2, #6]
 801e7a4:	9300      	str	r3, [sp, #0]
	offset = 8 *((width + 7)/8) - width ;
 801e7a6:	f10a 0507 	add.w	r5, sl, #7
 801e7aa:	10ed      	asrs	r5, r5, #3
 801e7ac:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
			break;
		}
		for (j = 0; j < width; j++)
		{
				if(line & (1 << (width- j + offset- 1)))
 801e7b0:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0; i < height; i++)
 801e7b4:	2600      	movs	r6, #0
				if(line & (1 << (width- j + offset- 1)))
 801e7b6:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0; i < height; i++)
 801e7ba:	46b0      	mov	r8, r6
				if(line & (1 << (width- j + offset- 1)))
 801e7bc:	9303      	str	r3, [sp, #12]
 801e7be:	9b02      	ldr	r3, [sp, #8]
 801e7c0:	eb03 0908 	add.w	r9, r3, r8
	for(i = 0; i < height; i++)
 801e7c4:	9b00      	ldr	r3, [sp, #0]
 801e7c6:	4598      	cmp	r8, r3
 801e7c8:	fa1f f989 	uxth.w	r9, r9
 801e7cc:	d30e      	bcc.n	801e7ec <TFT_DrawCharRus+0x6c>
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801e7ce:	b005      	add	sp, #20
 801e7d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ch = &lcdprop.pFont->table[(c-0x7F) * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)];
 801e7d4:	6884      	ldr	r4, [r0, #8]
 801e7d6:	f1a2 017f 	sub.w	r1, r2, #127	; 0x7f
 801e7da:	88e2      	ldrh	r2, [r4, #6]
 801e7dc:	434a      	muls	r2, r1
 801e7de:	88a1      	ldrh	r1, [r4, #4]
 801e7e0:	6824      	ldr	r4, [r4, #0]
 801e7e2:	3107      	adds	r1, #7
 801e7e4:	10c9      	asrs	r1, r1, #3
 801e7e6:	fb01 4202 	mla	r2, r1, r2, r4
 801e7ea:	e7d5      	b.n	801e798 <TFT_DrawCharRus+0x18>
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801e7ec:	f8db 2000 	ldr.w	r2, [fp]
		switch((width + 7)/8)
 801e7f0:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801e7f2:	eb02 0106 	add.w	r1, r2, r6
 801e7f6:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801e7f8:	d00a      	beq.n	801e810 <TFT_DrawCharRus+0x90>
 801e7fa:	784a      	ldrb	r2, [r1, #1]
 801e7fc:	2d02      	cmp	r5, #2
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801e7fe:	bf1d      	ittte	ne
 801e800:	0212      	lslne	r2, r2, #8
 801e802:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801e806:	788a      	ldrbne	r2, [r1, #2]
				line = (pchar[0]<< 8) | pchar[1];
 801e808:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
				line = (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 801e80c:	bf18      	it	ne
 801e80e:	4314      	orrne	r4, r2
		for (j = 0; j < width; j++)
 801e810:	2700      	movs	r7, #0
 801e812:	4557      	cmp	r7, sl
 801e814:	d303      	bcc.n	801e81e <TFT_DrawCharRus+0x9e>
	for(i = 0; i < height; i++)
 801e816:	f108 0801 	add.w	r8, r8, #1
 801e81a:	442e      	add	r6, r5
 801e81c:	e7cf      	b.n	801e7be <TFT_DrawCharRus+0x3e>
				if(line & (1 << (width- j + offset- 1)))
 801e81e:	9b03      	ldr	r3, [sp, #12]
 801e820:	1bd9      	subs	r1, r3, r7
 801e822:	9b01      	ldr	r3, [sp, #4]
 801e824:	2201      	movs	r2, #1
 801e826:	408a      	lsls	r2, r1
 801e828:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801e82a:	4b05      	ldr	r3, [pc, #20]	; (801e840 <TFT_DrawCharRus+0xc0>)
				if(line & (1 << (width- j + offset- 1)))
 801e82c:	4222      	tst	r2, r4
				TFT_DrawPixel((x + j), y, lcdprop.TextColor);
 801e82e:	bf14      	ite	ne
 801e830:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x + j), y, lcdprop.BackColor);
 801e832:	889a      	ldrheq	r2, [r3, #4]
 801e834:	4649      	mov	r1, r9
 801e836:	b280      	uxth	r0, r0
 801e838:	f7ff fb8e 	bl	801df58 <TFT_DrawPixel>
		for (j = 0; j < width; j++)
 801e83c:	3701      	adds	r7, #1
 801e83e:	e7e8      	b.n	801e812 <TFT_DrawCharRus+0x92>
 801e840:	20090924 	.word	0x20090924
 801e844:	20090934 	.word	0x20090934

0801e848 <TFT_DrawCutBMP>:


	uint16_t Xpos, Ypos;
	uint32_t ip = 0;
void TFT_DrawCutBMP(uint16_t x_pos, uint16_t y_pos, uint16_t xs, uint16_t ys, uint16_t size, sImage pbmp)
{
 801e848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e84c:	b085      	sub	sp, #20
	uint16_t q = 1;
	ip = pbmp.Width*ys+xs-1;
 801e84e:	4d25      	ldr	r5, [pc, #148]	; (801e8e4 <TFT_DrawCutBMP+0x9c>)
 801e850:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
{
 801e854:	f8bd 7038 	ldrh.w	r7, [sp, #56]	; 0x38
	
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801e858:	4c23      	ldr	r4, [pc, #140]	; (801e8e8 <TFT_DrawCutBMP+0xa0>)
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e85a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801e8ec <TFT_DrawCutBMP+0xa4>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801e85e:	8021      	strh	r1, [r4, #0]
	ip = pbmp.Width*ys+xs-1;
 801e860:	fb09 2303 	mla	r3, r9, r3, r2
 801e864:	1e5a      	subs	r2, r3, #1
 801e866:	602a      	str	r2, [r5, #0]
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801e868:	19ca      	adds	r2, r1, r7
{
 801e86a:	4683      	mov	fp, r0
	uint16_t q = 1;
 801e86c:	2601      	movs	r6, #1
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801e86e:	9202      	str	r2, [sp, #8]
 801e870:	8822      	ldrh	r2, [r4, #0]
 801e872:	9902      	ldr	r1, [sp, #8]
 801e874:	428a      	cmp	r2, r1
 801e876:	db02      	blt.n	801e87e <TFT_DrawCutBMP+0x36>
				{ip = ip + pbmp.Width-size+1; 
					q++;}
		}
	}
	
}
 801e878:	b005      	add	sp, #20
 801e87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e87e:	eb0b 0207 	add.w	r2, fp, r7
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801e882:	eb03 0a07 	add.w	sl, r3, r7
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e886:	f8a8 b000 	strh.w	fp, [r8]
 801e88a:	9201      	str	r2, [sp, #4]
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801e88c:	f1aa 0a02 	sub.w	sl, sl, #2
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e890:	f8b8 0000 	ldrh.w	r0, [r8]
 801e894:	9a01      	ldr	r2, [sp, #4]
 801e896:	4290      	cmp	r0, r2
 801e898:	db03      	blt.n	801e8a2 <TFT_DrawCutBMP+0x5a>
	for(Ypos = y_pos; Ypos < y_pos+size; Ypos++){
 801e89a:	8822      	ldrh	r2, [r4, #0]
 801e89c:	3201      	adds	r2, #1
 801e89e:	8022      	strh	r2, [r4, #0]
 801e8a0:	e7e6      	b.n	801e870 <TFT_DrawCutBMP+0x28>
			TFT_DrawPixel(Xpos, Ypos, (uint16_t)pbmp.pData[ip]);
 801e8a2:	6829      	ldr	r1, [r5, #0]
 801e8a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e8a6:	9303      	str	r3, [sp, #12]
 801e8a8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801e8ac:	8821      	ldrh	r1, [r4, #0]
 801e8ae:	f7ff fb53 	bl	801df58 <TFT_DrawPixel>
			if(ip < ys*(pbmp.Width)+xs+size-2+(q-1)*pbmp.Width)
 801e8b2:	682a      	ldr	r2, [r5, #0]
 801e8b4:	9b03      	ldr	r3, [sp, #12]
 801e8b6:	1e71      	subs	r1, r6, #1
 801e8b8:	fb09 a101 	mla	r1, r9, r1, sl
 801e8bc:	4291      	cmp	r1, r2
 801e8be:	f102 0201 	add.w	r2, r2, #1
				{ip = ip + pbmp.Width-size+1; 
 801e8c2:	bf9b      	ittet	ls
 801e8c4:	444a      	addls	r2, r9
 801e8c6:	1bd2      	subls	r2, r2, r7
				{	ip++;} 
 801e8c8:	602a      	strhi	r2, [r5, #0]
				{ip = ip + pbmp.Width-size+1; 
 801e8ca:	602a      	strls	r2, [r5, #0]
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e8cc:	f8b8 2000 	ldrh.w	r2, [r8]
					q++;}
 801e8d0:	bf98      	it	ls
 801e8d2:	3601      	addls	r6, #1
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e8d4:	f102 0201 	add.w	r2, r2, #1
					q++;}
 801e8d8:	bf98      	it	ls
 801e8da:	b2b6      	uxthls	r6, r6
		for(Xpos=x_pos; Xpos < x_pos+size; Xpos++){
 801e8dc:	f8a8 2000 	strh.w	r2, [r8]
 801e8e0:	e7d6      	b.n	801e890 <TFT_DrawCutBMP+0x48>
 801e8e2:	bf00      	nop
 801e8e4:	20004fbc 	.word	0x20004fbc
 801e8e8:	20090920 	.word	0x20090920
 801e8ec:	20090930 	.word	0x20090930

0801e8f0 <TFT_DrawChar>:
		i++;
	}
}

void TFT_DrawChar(uint16_t x, uint16_t y, const uint8_t c)
{
 801e8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t i=0, j=0;
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line;
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801e8f4:	4b28      	ldr	r3, [pc, #160]	; (801e998 <TFT_DrawChar+0xa8>)
{
 801e8f6:	b085      	sub	sp, #20
 801e8f8:	e88d 0003 	stmia.w	sp, {r0, r1}
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801e8fc:	6899      	ldr	r1, [r3, #8]
 801e8fe:	4827      	ldr	r0, [pc, #156]	; (801e99c <TFT_DrawChar+0xac>)
		((lcdprop.pFont->Width +7) / 8)];
 801e900:	f8b1 a004 	ldrh.w	sl, [r1, #4]
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801e904:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 801e908:	6809      	ldr	r1, [r1, #0]
 801e90a:	9002      	str	r0, [sp, #8]
		((lcdprop.pFont->Width +7) / 8)];
 801e90c:	f10a 0507 	add.w	r5, sl, #7
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801e910:	3a20      	subs	r2, #32
		((lcdprop.pFont->Width +7) / 8)];
 801e912:	10ed      	asrs	r5, r5, #3
	ch = &lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height *
 801e914:	fb0b f202 	mul.w	r2, fp, r2
 801e918:	fb05 1202 	mla	r2, r5, r2, r1
 801e91c:	6002      	str	r2, [r0, #0]
	height = lcdprop.pFont->Height;
	width = lcdprop.pFont->Width;
	offset = 8 * ((width + 7)/8) - width;
 801e91e:	ebca 01c5 	rsb	r1, sl, r5, lsl #3
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
			break;
		}
		for(j = 0;j < width; j++)
		{
			if(line & (1 << (width - j + offset -1)))
 801e922:	f10a 32ff 	add.w	r2, sl, #4294967295
	for(i = 0;i < height; i++)
 801e926:	2600      	movs	r6, #0
			if(line & (1 << (width - j + offset -1)))
 801e928:	fa52 f381 	uxtab	r3, r2, r1
	for(i = 0;i < height; i++)
 801e92c:	46b0      	mov	r8, r6
			if(line & (1 << (width - j + offset -1)))
 801e92e:	9303      	str	r3, [sp, #12]
 801e930:	9b01      	ldr	r3, [sp, #4]
	for(i = 0;i < height; i++)
 801e932:	45d8      	cmp	r8, fp
 801e934:	eb03 0908 	add.w	r9, r3, r8
 801e938:	fa1f f989 	uxth.w	r9, r9
 801e93c:	d302      	bcc.n	801e944 <TFT_DrawChar+0x54>
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
			}
		}
		y++;
	}
}
 801e93e:	b005      	add	sp, #20
 801e940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801e944:	9b02      	ldr	r3, [sp, #8]
 801e946:	681a      	ldr	r2, [r3, #0]
		switch((width + 7)/8)
 801e948:	2d01      	cmp	r5, #1
		pchar = ((uint8_t *)ch + (width + 7)/8 * i);
 801e94a:	eb02 0106 	add.w	r1, r2, r6
 801e94e:	5d94      	ldrb	r4, [r2, r6]
		switch((width + 7)/8)
 801e950:	d00a      	beq.n	801e968 <TFT_DrawChar+0x78>
 801e952:	784a      	ldrb	r2, [r1, #1]
 801e954:	2d02      	cmp	r5, #2
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801e956:	bf1d      	ittte	ne
 801e958:	0212      	lslne	r2, r2, #8
 801e95a:	ea42 4404 	orrne.w	r4, r2, r4, lsl #16
 801e95e:	788a      	ldrbne	r2, [r1, #2]
			line = (pchar[0]<<8) | pchar[1];
 801e960:	ea42 2404 	orreq.w	r4, r2, r4, lsl #8
			line = (pchar[0]<<16) | (pchar[1]<<8) | pchar[2];
 801e964:	bf18      	it	ne
 801e966:	4314      	orrne	r4, r2
		for(j = 0;j < width; j++)
 801e968:	2700      	movs	r7, #0
 801e96a:	4557      	cmp	r7, sl
 801e96c:	d303      	bcc.n	801e976 <TFT_DrawChar+0x86>
	for(i = 0;i < height; i++)
 801e96e:	f108 0801 	add.w	r8, r8, #1
 801e972:	442e      	add	r6, r5
 801e974:	e7dc      	b.n	801e930 <TFT_DrawChar+0x40>
			if(line & (1 << (width - j + offset -1)))
 801e976:	9b03      	ldr	r3, [sp, #12]
 801e978:	1bd9      	subs	r1, r3, r7
 801e97a:	9b00      	ldr	r3, [sp, #0]
 801e97c:	2201      	movs	r2, #1
 801e97e:	408a      	lsls	r2, r1
 801e980:	19d8      	adds	r0, r3, r7
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801e982:	4b05      	ldr	r3, [pc, #20]	; (801e998 <TFT_DrawChar+0xa8>)
			if(line & (1 << (width - j + offset -1)))
 801e984:	4222      	tst	r2, r4
				TFT_DrawPixel((x+j), y, lcdprop.TextColor);
 801e986:	bf14      	ite	ne
 801e988:	881a      	ldrhne	r2, [r3, #0]
				TFT_DrawPixel((x+j), y, lcdprop.BackColor);
 801e98a:	889a      	ldrheq	r2, [r3, #4]
 801e98c:	4649      	mov	r1, r9
 801e98e:	b280      	uxth	r0, r0
 801e990:	f7ff fae2 	bl	801df58 <TFT_DrawPixel>
		for(j = 0;j < width; j++)
 801e994:	3701      	adds	r7, #1
 801e996:	e7e8      	b.n	801e96a <TFT_DrawChar+0x7a>
 801e998:	20090924 	.word	0x20090924
 801e99c:	20090934 	.word	0x20090934

0801e9a0 <TFT_DisplayString>:
//----------------------------------------
void TFT_DisplayString(uint16_t Xpos, uint16_t Ypos, const uint8_t *Text,	Text_AlignModeTypdef Mode)
{
 801e9a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e9a4:	460e      	mov	r6, r1
 801e9a6:	4604      	mov	r4, r0
 801e9a8:	4615      	mov	r5, r2
	uint16_t ref_column = 1, i = 0;
	uint32_t size = 0, xsize = 0;
	const uint8_t *ptr = Text;
 801e9aa:	4611      	mov	r1, r2
 801e9ac:	eba1 0e05 	sub.w	lr, r1, r5
	
	while(*ptr++) size++ ;
 801e9b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e9b4:	2a00      	cmp	r2, #0
 801e9b6:	d1f9      	bne.n	801e9ac <TFT_DisplayString+0xc>
	xsize = (X_SIZE/lcdprop.pFont->Width);
 801e9b8:	4f1b      	ldr	r7, [pc, #108]	; (801ea28 <TFT_DisplayString+0x88>)
 801e9ba:	f8df 8070 	ldr.w	r8, [pc, #112]	; 801ea2c <TFT_DisplayString+0x8c>
 801e9be:	68ba      	ldr	r2, [r7, #8]
 801e9c0:	f8b8 1000 	ldrh.w	r1, [r8]
 801e9c4:	8890      	ldrh	r0, [r2, #4]
 801e9c6:	fbb1 f2f0 	udiv	r2, r1, r0
	switch (Mode)
 801e9ca:	2b01      	cmp	r3, #1
 801e9cc:	d017      	beq.n	801e9fe <TFT_DisplayString+0x5e>
 801e9ce:	2b02      	cmp	r3, #2
 801e9d0:	d01c      	beq.n	801ea0c <TFT_DisplayString+0x6c>
		{
			ref_column = Xpos;
			break;
		}
	}
	if((ref_column < 1) || (ref_column >= 0x8000))
 801e9d2:	b223      	sxth	r3, r4
	{
		ref_column = 1;
 801e9d4:	2b00      	cmp	r3, #0
 801e9d6:	bfd8      	it	le
 801e9d8:	2401      	movle	r4, #1
 801e9da:	46a9      	mov	r9, r5
	}
	
	while ((*Text != 0) & (((X_SIZE - (i*lcdprop.pFont->Width)) & 0xFFFF) >=
 801e9dc:	68b9      	ldr	r1, [r7, #8]
 801e9de:	f8b8 0000 	ldrh.w	r0, [r8]
 801e9e2:	8889      	ldrh	r1, [r1, #4]
 801e9e4:	eba9 0305 	sub.w	r3, r9, r5
 801e9e8:	b29b      	uxth	r3, r3
 801e9ea:	fb01 0313 	mls	r3, r1, r3, r0
 801e9ee:	b29b      	uxth	r3, r3
 801e9f0:	4299      	cmp	r1, r3
 801e9f2:	f819 2b01 	ldrb.w	r2, [r9], #1
 801e9f6:	dc00      	bgt.n	801e9fa <TFT_DisplayString+0x5a>
 801e9f8:	b96a      	cbnz	r2, 801ea16 <TFT_DisplayString+0x76>
 801e9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width) / 2;
 801e9fe:	eba2 020e 	sub.w	r2, r2, lr
 801ea02:	4342      	muls	r2, r0
 801ea04:	eb04 0452 	add.w	r4, r4, r2, lsr #1
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801ea08:	b2a4      	uxth	r4, r4
			break;
 801ea0a:	e7e2      	b.n	801e9d2 <TFT_DisplayString+0x32>
			ref_column = Xpos + ((xsize-size) * lcdprop.pFont->Width);
 801ea0c:	eba2 020e 	sub.w	r2, r2, lr
 801ea10:	fb12 4400 	smlabb	r4, r2, r0, r4
 801ea14:	e7f8      	b.n	801ea08 <TFT_DisplayString+0x68>
			lcdprop.pFont->Width))
	{
		TFT_DrawChar(ref_column, Ypos, *Text);
 801ea16:	4620      	mov	r0, r4
 801ea18:	4631      	mov	r1, r6
 801ea1a:	f7ff ff69 	bl	801e8f0 <TFT_DrawChar>
		ref_column += lcdprop.pFont->Width;
 801ea1e:	68bb      	ldr	r3, [r7, #8]
 801ea20:	889b      	ldrh	r3, [r3, #4]
 801ea22:	441c      	add	r4, r3
 801ea24:	b2a4      	uxth	r4, r4
 801ea26:	e7d9      	b.n	801e9dc <TFT_DisplayString+0x3c>
 801ea28:	20090924 	.word	0x20090924
 801ea2c:	20000a44 	.word	0x20000a44

0801ea30 <DrawLineX>:
		Text++;
		i++;
	}
}

void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801ea30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801ea34:	1a5f      	subs	r7, r3, r1
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801ea36:	4616      	mov	r6, r2
    uint8_t steep = abs(y2-y1)>abs(x2-x1);
 801ea38:	eba6 0800 	sub.w	r8, r6, r0
 801ea3c:	2f00      	cmp	r7, #0
 801ea3e:	bfb8      	it	lt
 801ea40:	427f      	neglt	r7, r7
 801ea42:	f1b8 0f00 	cmp.w	r8, #0
 801ea46:	bfb8      	it	lt
 801ea48:	f1c8 0800 	rsblt	r8, r8, #0
    if (steep){
 801ea4c:	4547      	cmp	r7, r8
void DrawLineX(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color){
 801ea4e:	4604      	mov	r4, r0
 801ea50:	460d      	mov	r5, r1
 801ea52:	461a      	mov	r2, r3
 801ea54:	f8bd b030 	ldrh.w	fp, [sp, #48]	; 0x30
    if (steep){
 801ea58:	dd04      	ble.n	801ea64 <DrawLineX+0x34>
 801ea5a:	4633      	mov	r3, r6
        swap(x1, y1);
 801ea5c:	460c      	mov	r4, r1
        swap(x2, y2);
 801ea5e:	4616      	mov	r6, r2
        swap(x1, y1);
 801ea60:	4605      	mov	r5, r0
        swap(x2, y2);
 801ea62:	461a      	mov	r2, r3
    }
    if(x1>x2){
 801ea64:	42b4      	cmp	r4, r6
 801ea66:	d905      	bls.n	801ea74 <DrawLineX+0x44>
 801ea68:	462b      	mov	r3, r5
        swap(x1, x2);
        swap(y1, y2);
 801ea6a:	4615      	mov	r5, r2
 801ea6c:	461a      	mov	r2, r3
    if(x1>x2){
 801ea6e:	4623      	mov	r3, r4
 801ea70:	4634      	mov	r4, r6
 801ea72:	461e      	mov	r6, r3
    }
    int dx,dy;
    dx=x2-x1;
    dy=abs(y2-y1);
 801ea74:	eba2 0905 	sub.w	r9, r2, r5
 801ea78:	464b      	mov	r3, r9
 801ea7a:	2b00      	cmp	r3, #0
 801ea7c:	bfb8      	it	lt
 801ea7e:	425b      	neglt	r3, r3
    dx=x2-x1;
 801ea80:	eba6 0a04 	sub.w	sl, r6, r4
    dy=abs(y2-y1);
 801ea84:	9301      	str	r3, [sp, #4]
    int err=dx/2;
 801ea86:	2302      	movs	r3, #2
 801ea88:	fb9a f9f3 	sdiv	r9, sl, r3
    int ystep;
    if(y1<y2) ystep = 1;
    else  ystep = -1;
 801ea8c:	4295      	cmp	r5, r2
 801ea8e:	bf34      	ite	cc
 801ea90:	2301      	movcc	r3, #1
 801ea92:	f04f 33ff 	movcs.w	r3, #4294967295
 801ea96:	9300      	str	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801ea98:	42b4      	cmp	r4, r6
 801ea9a:	d902      	bls.n	801eaa2 <DrawLineX+0x72>
        if (err<0){
            y1 += ystep;
            err+=dx;
        }
    }
}
 801ea9c:	b003      	add	sp, #12
 801ea9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801eaa2:	4547      	cmp	r7, r8
 801eaa4:	bfcb      	itete	gt
 801eaa6:	4628      	movgt	r0, r5
        else {TFT_DrawPixel(x1, y1, color);
 801eaa8:	4629      	movle	r1, r5
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801eaaa:	4621      	movgt	r1, r4
        else {TFT_DrawPixel(x1, y1, color);
 801eaac:	4620      	movle	r0, r4
        if (steep) {TFT_DrawPixel(y1, x1, color);
 801eaae:	465a      	mov	r2, fp
        else {TFT_DrawPixel(x1, y1, color);
 801eab0:	f7ff fa52 	bl	801df58 <TFT_DrawPixel>
        if (err<0){
 801eab4:	9b01      	ldr	r3, [sp, #4]
 801eab6:	ebb9 0903 	subs.w	r9, r9, r3
            y1 += ystep;
 801eaba:	bf48      	it	mi
 801eabc:	9b00      	ldrmi	r3, [sp, #0]
    for ( ; x1<=x2; x1++){
 801eabe:	f104 0401 	add.w	r4, r4, #1
            y1 += ystep;
 801eac2:	bf42      	ittt	mi
 801eac4:	18ed      	addmi	r5, r5, r3
 801eac6:	b2ad      	uxthmi	r5, r5
            err+=dx;
 801eac8:	44d1      	addmi	r9, sl
    for ( ; x1<=x2; x1++){
 801eaca:	b2a4      	uxth	r4, r4
 801eacc:	e7e4      	b.n	801ea98 <DrawLineX+0x68>
	...

0801ead0 <MX_SDMMC1_SD_Init>:

/* SDMMC1 init function */
static void MX_SDMMC1_SD_Init(void)
{

  hsd1.Instance = SDMMC1;
 801ead0:	4b06      	ldr	r3, [pc, #24]	; (801eaec <MX_SDMMC1_SD_Init+0x1c>)
 801ead2:	4a07      	ldr	r2, [pc, #28]	; (801eaf0 <MX_SDMMC1_SD_Init+0x20>)
 801ead4:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801ead6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801eada:	2200      	movs	r2, #0
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 801eadc:	60d9      	str	r1, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 10;
 801eade:	210a      	movs	r1, #10
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 801eae0:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801eae2:	609a      	str	r2, [r3, #8]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801eae4:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 10;
 801eae6:	6159      	str	r1, [r3, #20]
  hsd1.Init.Transceiver = SDMMC_TRANSCEIVER_DISABLE;
 801eae8:	619a      	str	r2, [r3, #24]
 801eaea:	4770      	bx	lr
 801eaec:	20090a38 	.word	0x20090a38
 801eaf0:	50062400 	.word	0x50062400

0801eaf4 <MX_TIM2_Init>:
{
 801eaf4:	b510      	push	{r4, lr}
  htim2.Init.Period = exposure_timer_period[exp_num];
 801eaf6:	4a16      	ldr	r2, [pc, #88]	; (801eb50 <MX_TIM2_Init+0x5c>)
  htim2.Instance = TIM2;
 801eaf8:	4c16      	ldr	r4, [pc, #88]	; (801eb54 <MX_TIM2_Init+0x60>)
  htim2.Init.Period = exposure_timer_period[exp_num];
 801eafa:	7811      	ldrb	r1, [r2, #0]
 801eafc:	4a16      	ldr	r2, [pc, #88]	; (801eb58 <MX_TIM2_Init+0x64>)
  htim2.Init.Prescaler = 10000;
 801eafe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 801eb02:	f242 7310 	movw	r3, #10000	; 0x2710
 801eb06:	e884 0009 	stmia.w	r4, {r0, r3}
{
 801eb0a:	b088      	sub	sp, #32
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801eb0c:	2300      	movs	r3, #0
  htim2.Init.Period = exposure_timer_period[exp_num];
 801eb0e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 801eb12:	60a3      	str	r3, [r4, #8]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801eb14:	4620      	mov	r0, r4
  htim2.Init.Period = exposure_timer_period[exp_num];
 801eb16:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801eb18:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801eb1a:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 801eb1c:	f7e7 faac 	bl	8006078 <HAL_TIM_Base_Init>
 801eb20:	b100      	cbz	r0, 801eb24 <MX_TIM2_Init+0x30>
 801eb22:	e7fe      	b.n	801eb22 <MX_TIM2_Init+0x2e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 801eb24:	a908      	add	r1, sp, #32
 801eb26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801eb2a:	f841 3d10 	str.w	r3, [r1, #-16]!
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 801eb2e:	4620      	mov	r0, r4
 801eb30:	f7e7 fbfe 	bl	8006330 <HAL_TIM_ConfigClockSource>
 801eb34:	b100      	cbz	r0, 801eb38 <MX_TIM2_Init+0x44>
 801eb36:	e7fe      	b.n	801eb36 <MX_TIM2_Init+0x42>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801eb38:	2320      	movs	r3, #32
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801eb3a:	9003      	str	r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801eb3c:	a901      	add	r1, sp, #4
 801eb3e:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801eb40:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 801eb42:	f7e7 fd19 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 801eb46:	b100      	cbz	r0, 801eb4a <MX_TIM2_Init+0x56>
 801eb48:	e7fe      	b.n	801eb48 <MX_TIM2_Init+0x54>
}
 801eb4a:	b008      	add	sp, #32
 801eb4c:	bd10      	pop	{r4, pc}
 801eb4e:	bf00      	nop
 801eb50:	2008b852 	.word	0x2008b852
 801eb54:	20090e94 	.word	0x20090e94
 801eb58:	080312b8 	.word	0x080312b8

0801eb5c <DWT_Init>:
  if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) 
 801eb5c:	4a07      	ldr	r2, [pc, #28]	; (801eb7c <DWT_Init+0x20>)
 801eb5e:	68d3      	ldr	r3, [r2, #12]
 801eb60:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 801eb64:	d109      	bne.n	801eb7a <DWT_Init+0x1e>
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 801eb66:	68d1      	ldr	r1, [r2, #12]
 801eb68:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 801eb6c:	60d1      	str	r1, [r2, #12]
    DWT->CYCCNT = 0;
 801eb6e:	4a04      	ldr	r2, [pc, #16]	; (801eb80 <DWT_Init+0x24>)
 801eb70:	6053      	str	r3, [r2, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 801eb72:	6813      	ldr	r3, [r2, #0]
 801eb74:	f043 0301 	orr.w	r3, r3, #1
 801eb78:	6013      	str	r3, [r2, #0]
 801eb7a:	4770      	bx	lr
 801eb7c:	e000edf0 	.word	0xe000edf0
 801eb80:	e0001000 	.word	0xe0001000

0801eb84 <DWT_Delay>:
  return DWT->CYCCNT;
 801eb84:	4a07      	ldr	r2, [pc, #28]	; (801eba4 <DWT_Delay+0x20>)
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801eb86:	4b08      	ldr	r3, [pc, #32]	; (801eba8 <DWT_Delay+0x24>)
  return DWT->CYCCNT;
 801eb88:	6851      	ldr	r1, [r2, #4]
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801eb8a:	681b      	ldr	r3, [r3, #0]
{
 801eb8c:	b510      	push	{r4, lr}
  int32_t tp = DWT_Get() + us * (SystemCoreClock/1000000);
 801eb8e:	4c07      	ldr	r4, [pc, #28]	; (801ebac <DWT_Delay+0x28>)
 801eb90:	fbb3 f3f4 	udiv	r3, r3, r4
 801eb94:	fb00 1003 	mla	r0, r0, r3, r1
  return DWT->CYCCNT;
 801eb98:	6853      	ldr	r3, [r2, #4]
  return (((int32_t)DWT_Get() - tp) < 0);
 801eb9a:	1a1b      	subs	r3, r3, r0
  while (DWT_Compare(tp));
 801eb9c:	2b00      	cmp	r3, #0
 801eb9e:	dbfb      	blt.n	801eb98 <DWT_Delay+0x14>
}
 801eba0:	bd10      	pop	{r4, pc}
 801eba2:	bf00      	nop
 801eba4:	e0001000 	.word	0xe0001000
 801eba8:	20000a50 	.word	0x20000a50
 801ebac:	000f4240 	.word	0x000f4240

0801ebb0 <Calculate_Data>:
{
 801ebb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801ebb2:	4a78      	ldr	r2, [pc, #480]	; (801ed94 <Calculate_Data+0x1e4>)
 801ebb4:	4b78      	ldr	r3, [pc, #480]	; (801ed98 <Calculate_Data+0x1e8>)
 801ebb6:	4979      	ldr	r1, [pc, #484]	; (801ed9c <Calculate_Data+0x1ec>)
 801ebb8:	4879      	ldr	r0, [pc, #484]	; (801eda0 <Calculate_Data+0x1f0>)
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801ebba:	4d7a      	ldr	r5, [pc, #488]	; (801eda4 <Calculate_Data+0x1f4>)
	if(GUI_screen_state == Color_Screen)
 801ebbc:	4f7a      	ldr	r7, [pc, #488]	; (801eda8 <Calculate_Data+0x1f8>)
	Calculate_XYZ1964(Line_Rabs_buff, calibratre_x_1964, calibratre_y_1964, calibratre_z_1964);
 801ebbe:	f7ef fa5f 	bl	800e080 <Calculate_XYZ1964>
	Calculate_xy1964(colorimetry_XYZ1964);
 801ebc2:	487a      	ldr	r0, [pc, #488]	; (801edac <Calculate_Data+0x1fc>)
 801ebc4:	f7ef faf8 	bl	800e1b8 <Calculate_xy1964>
	Calculate_XYZ1931(Line_Rabs_buff, calibratre_x_1931, Spectral_day, calibratre_z_1931);
 801ebc8:	4b79      	ldr	r3, [pc, #484]	; (801edb0 <Calculate_Data+0x200>)
 801ebca:	4a7a      	ldr	r2, [pc, #488]	; (801edb4 <Calculate_Data+0x204>)
 801ebcc:	497a      	ldr	r1, [pc, #488]	; (801edb8 <Calculate_Data+0x208>)
 801ebce:	4874      	ldr	r0, [pc, #464]	; (801eda0 <Calculate_Data+0x1f0>)
 801ebd0:	f7ef faa4 	bl	800e11c <Calculate_XYZ1931>
	Calculate_xy1931(colorimetry_XYZ1931);
 801ebd4:	4879      	ldr	r0, [pc, #484]	; (801edbc <Calculate_Data+0x20c>)
 801ebd6:	f7ef fb0d 	bl	800e1f4 <Calculate_xy1931>
	Tc_Measure = Calculate_Tc(Line_Rabs_buff, Measure_Color_xy);
 801ebda:	7829      	ldrb	r1, [r5, #0]
 801ebdc:	4870      	ldr	r0, [pc, #448]	; (801eda0 <Calculate_Data+0x1f0>)
 801ebde:	f7ef fb6f 	bl	800e2c0 <Calculate_Tc>
 801ebe2:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801ebe6:	4b76      	ldr	r3, [pc, #472]	; (801edc0 <Calculate_Data+0x210>)
 801ebe8:	ee17 2a90 	vmov	r2, s15
 801ebec:	801a      	strh	r2, [r3, #0]
	if(GUI_screen_state == Color_Screen)
 801ebee:	783a      	ldrb	r2, [r7, #0]
 801ebf0:	2a05      	cmp	r2, #5
 801ebf2:	d114      	bne.n	801ec1e <Calculate_Data+0x6e>
		if(Color_Field&Color_CIE_Luv) {Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);} else 
 801ebf4:	4b73      	ldr	r3, [pc, #460]	; (801edc4 <Calculate_Data+0x214>)
 801ebf6:	781b      	ldrb	r3, [r3, #0]
 801ebf8:	075a      	lsls	r2, r3, #29
 801ebfa:	f140 80ba 	bpl.w	801ed72 <Calculate_Data+0x1c2>
 801ebfe:	7828      	ldrb	r0, [r5, #0]
 801ec00:	4e71      	ldr	r6, [pc, #452]	; (801edc8 <Calculate_Data+0x218>)
 801ec02:	4c72      	ldr	r4, [pc, #456]	; (801edcc <Calculate_Data+0x21c>)
 801ec04:	2800      	cmp	r0, #0
 801ec06:	bf0c      	ite	eq
 801ec08:	4630      	moveq	r0, r6
 801ec0a:	4620      	movne	r0, r4
 801ec0c:	f7ef fb34 	bl	800e278 <Calculate_uv1976>
 801ec10:	7828      	ldrb	r0, [r5, #0]
 801ec12:	2800      	cmp	r0, #0
 801ec14:	bf0c      	ite	eq
 801ec16:	4630      	moveq	r0, r6
 801ec18:	4620      	movne	r0, r4
 801ec1a:	f7ef fb09 	bl	800e230 <Calculate_uv>
	if(GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen|| GUI_screen_state == Measure3_Screen)
 801ec1e:	783b      	ldrb	r3, [r7, #0]
 801ec20:	3b01      	subs	r3, #1
 801ec22:	2b02      	cmp	r3, #2
 801ec24:	f200 80a4 	bhi.w	801ed70 <Calculate_Data+0x1c0>
			if(Measure_Field&Illuminance) {E_day = Calculate_EL_Day(Line_Rabs_buff, Spectral_day);}
 801ec28:	4c69      	ldr	r4, [pc, #420]	; (801edd0 <Calculate_Data+0x220>)
 801ec2a:	8823      	ldrh	r3, [r4, #0]
 801ec2c:	07de      	lsls	r6, r3, #31
 801ec2e:	d506      	bpl.n	801ec3e <Calculate_Data+0x8e>
 801ec30:	4960      	ldr	r1, [pc, #384]	; (801edb4 <Calculate_Data+0x204>)
 801ec32:	485b      	ldr	r0, [pc, #364]	; (801eda0 <Calculate_Data+0x1f0>)
 801ec34:	f7ef f8f6 	bl	800de24 <Calculate_EL_Day>
 801ec38:	4b66      	ldr	r3, [pc, #408]	; (801edd4 <Calculate_Data+0x224>)
 801ec3a:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&Irradiance) {E_day_Wt = Calculate_EL_Day_Wt(Line_Rabs_buff);}
 801ec3e:	8823      	ldrh	r3, [r4, #0]
 801ec40:	0798      	lsls	r0, r3, #30
 801ec42:	d505      	bpl.n	801ec50 <Calculate_Data+0xa0>
 801ec44:	4856      	ldr	r0, [pc, #344]	; (801eda0 <Calculate_Data+0x1f0>)
 801ec46:	f7ef f90d 	bl	800de64 <Calculate_EL_Day_Wt>
 801ec4a:	4b63      	ldr	r3, [pc, #396]	; (801edd8 <Calculate_Data+0x228>)
 801ec4c:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801ec50:	8823      	ldrh	r3, [r4, #0]
 801ec52:	0499      	lsls	r1, r3, #18
 801ec54:	d519      	bpl.n	801ec8a <Calculate_Data+0xda>
 801ec56:	4961      	ldr	r1, [pc, #388]	; (801eddc <Calculate_Data+0x22c>)
 801ec58:	4851      	ldr	r0, [pc, #324]	; (801eda0 <Calculate_Data+0x1f0>)
 801ec5a:	4e61      	ldr	r6, [pc, #388]	; (801ede0 <Calculate_Data+0x230>)
 801ec5c:	4f5d      	ldr	r7, [pc, #372]	; (801edd4 <Calculate_Data+0x224>)
 801ec5e:	f7ef f919 	bl	800de94 <Calculate_EL_Night>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801ec62:	8822      	ldrh	r2, [r4, #0]
			if(Measure_Field&SP_measure) {E_Night = Calculate_EL_Night(Line_Rabs_buff, Spectral_night);
 801ec64:	ed86 0a00 	vstr	s0, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801ec68:	f012 0f01 	tst.w	r2, #1
 801ec6c:	f040 808f 	bne.w	801ed8e <Calculate_Data+0x1de>
 801ec70:	4950      	ldr	r1, [pc, #320]	; (801edb4 <Calculate_Data+0x204>)
 801ec72:	484b      	ldr	r0, [pc, #300]	; (801eda0 <Calculate_Data+0x1f0>)
 801ec74:	f7ef f8d6 	bl	800de24 <Calculate_EL_Day>
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801ec78:	edd6 0a00 	vldr	s1, [r6]
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801ec7c:	ed87 0a00 	vstr	s0, [r7]
														SP_Measure = (Calculate_SP(E_day, E_Night));}
 801ec80:	f7ef f928 	bl	800ded4 <Calculate_SP>
 801ec84:	4b57      	ldr	r3, [pc, #348]	; (801ede4 <Calculate_Data+0x234>)
 801ec86:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD) {PPFD_PPL_Measure = (Calculate_PPFD_PPL(Line_Rabs_buff, WaveLenght));//*100000
 801ec8a:	8823      	ldrh	r3, [r4, #0]
 801ec8c:	075a      	lsls	r2, r3, #29
 801ec8e:	d506      	bpl.n	801ec9e <Calculate_Data+0xee>
 801ec90:	4955      	ldr	r1, [pc, #340]	; (801ede8 <Calculate_Data+0x238>)
 801ec92:	4843      	ldr	r0, [pc, #268]	; (801eda0 <Calculate_Data+0x1f0>)
 801ec94:	f7ef f92c 	bl	800def0 <Calculate_PPFD_PPL>
 801ec98:	4b54      	ldr	r3, [pc, #336]	; (801edec <Calculate_Data+0x23c>)
 801ec9a:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801ec9e:	8823      	ldrh	r3, [r4, #0]
 801eca0:	071b      	lsls	r3, r3, #28
 801eca2:	d51f      	bpl.n	801ece4 <Calculate_Data+0x134>
 801eca4:	2200      	movs	r2, #0
 801eca6:	4950      	ldr	r1, [pc, #320]	; (801ede8 <Calculate_Data+0x238>)
 801eca8:	483d      	ldr	r0, [pc, #244]	; (801eda0 <Calculate_Data+0x1f0>)
 801ecaa:	f7ef f95d 	bl	800df68 <Calculate_PPFD_PPL_Range>
 801ecae:	4b50      	ldr	r3, [pc, #320]	; (801edf0 <Calculate_Data+0x240>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801ecb0:	494d      	ldr	r1, [pc, #308]	; (801ede8 <Calculate_Data+0x238>)
 801ecb2:	483b      	ldr	r0, [pc, #236]	; (801eda0 <Calculate_Data+0x1f0>)
			if(Measure_Field&PPFD_BGR) {PPFD_PPL_Blue_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, BLUE_RANGE));//*100000
 801ecb4:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801ecb8:	2201      	movs	r2, #1
 801ecba:	f7ef f955 	bl	800df68 <Calculate_PPFD_PPL_Range>
 801ecbe:	4b4d      	ldr	r3, [pc, #308]	; (801edf4 <Calculate_Data+0x244>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801ecc0:	4949      	ldr	r1, [pc, #292]	; (801ede8 <Calculate_Data+0x238>)
 801ecc2:	4837      	ldr	r0, [pc, #220]	; (801eda0 <Calculate_Data+0x1f0>)
																	PPFD_PPL_Green_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, GREEN_RANGE));//*100000
 801ecc4:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801ecc8:	2202      	movs	r2, #2
 801ecca:	f7ef f94d 	bl	800df68 <Calculate_PPFD_PPL_Range>
 801ecce:	4b4a      	ldr	r3, [pc, #296]	; (801edf8 <Calculate_Data+0x248>)
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801ecd0:	4945      	ldr	r1, [pc, #276]	; (801ede8 <Calculate_Data+0x238>)
 801ecd2:	4833      	ldr	r0, [pc, #204]	; (801eda0 <Calculate_Data+0x1f0>)
																	PPFD_PPL_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, RED_RANGE));//*100000
 801ecd4:	ed83 0a00 	vstr	s0, [r3]
																	PPFD_PPL_Far_Red_Measure = (Calculate_PPFD_PPL_Range(Line_Rabs_buff, WaveLenght, FAR_RED_RANGE));//*100000
 801ecd8:	2203      	movs	r2, #3
 801ecda:	f7ef f945 	bl	800df68 <Calculate_PPFD_PPL_Range>
 801ecde:	4b47      	ldr	r3, [pc, #284]	; (801edfc <Calculate_Data+0x24c>)
 801ece0:	ed83 0a00 	vstr	s0, [r3]
			if(Measure_Field&delta_E){delta_Eab_Measure = Calculate_deltaEab();}
 801ece4:	8823      	ldrh	r3, [r4, #0]
 801ece6:	051f      	lsls	r7, r3, #20
 801ece8:	d503      	bpl.n	801ecf2 <Calculate_Data+0x142>
 801ecea:	f7ef fec5 	bl	800ea78 <Calculate_deltaEab>
 801ecee:	4b44      	ldr	r3, [pc, #272]	; (801ee00 <Calculate_Data+0x250>)
 801ecf0:	8018      	strh	r0, [r3, #0]
			if(Measure_Field&CIE_Luv){Calculate_uv1976((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);Calculate_uv((Measure_Color_xy == 0x00) ? colorimetry_xy1964 : colorimetry_xy1931);}
 801ecf2:	8823      	ldrh	r3, [r4, #0]
 801ecf4:	065e      	lsls	r6, r3, #25
 801ecf6:	d50f      	bpl.n	801ed18 <Calculate_Data+0x168>
 801ecf8:	7828      	ldrb	r0, [r5, #0]
 801ecfa:	4f33      	ldr	r7, [pc, #204]	; (801edc8 <Calculate_Data+0x218>)
 801ecfc:	4e33      	ldr	r6, [pc, #204]	; (801edcc <Calculate_Data+0x21c>)
 801ecfe:	2800      	cmp	r0, #0
 801ed00:	bf0c      	ite	eq
 801ed02:	4638      	moveq	r0, r7
 801ed04:	4630      	movne	r0, r6
 801ed06:	f7ef fab7 	bl	800e278 <Calculate_uv1976>
 801ed0a:	7828      	ldrb	r0, [r5, #0]
 801ed0c:	2800      	cmp	r0, #0
 801ed0e:	bf0c      	ite	eq
 801ed10:	4638      	moveq	r0, r7
 801ed12:	4630      	movne	r0, r6
 801ed14:	f7ef fa8c 	bl	800e230 <Calculate_uv>
			if(Measure_Field&CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801ed18:	8823      	ldrh	r3, [r4, #0]
 801ed1a:	0618      	lsls	r0, r3, #24
 801ed1c:	d509      	bpl.n	801ed32 <Calculate_Data+0x182>
 801ed1e:	4b39      	ldr	r3, [pc, #228]	; (801ee04 <Calculate_Data+0x254>)
 801ed20:	7829      	ldrb	r1, [r5, #0]
 801ed22:	781a      	ldrb	r2, [r3, #0]
 801ed24:	4821      	ldr	r0, [pc, #132]	; (801edac <Calculate_Data+0x1fc>)
 801ed26:	4b25      	ldr	r3, [pc, #148]	; (801edbc <Calculate_Data+0x20c>)
 801ed28:	2900      	cmp	r1, #0
 801ed2a:	bf18      	it	ne
 801ed2c:	4618      	movne	r0, r3
 801ed2e:	f7ef fc63 	bl	800e5f8 <Calculate_Lab>
			if(Measure_Field&lambda_d){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801ed32:	8823      	ldrh	r3, [r4, #0]
 801ed34:	0599      	lsls	r1, r3, #22
 801ed36:	d503      	bpl.n	801ed40 <Calculate_Data+0x190>
 801ed38:	7829      	ldrb	r1, [r5, #0]
 801ed3a:	4819      	ldr	r0, [pc, #100]	; (801eda0 <Calculate_Data+0x1f0>)
 801ed3c:	f7ef fd92 	bl	800e864 <Calculate_Lambda_Dominant>
			if(Measure_Field&lambda_c){Calculate_Lambda_Dominant(Line_Rabs_buff, Measure_Color_xy);}	
 801ed40:	8823      	ldrh	r3, [r4, #0]
 801ed42:	055a      	lsls	r2, r3, #21
 801ed44:	d503      	bpl.n	801ed4e <Calculate_Data+0x19e>
 801ed46:	7829      	ldrb	r1, [r5, #0]
 801ed48:	4815      	ldr	r0, [pc, #84]	; (801eda0 <Calculate_Data+0x1f0>)
 801ed4a:	f7ef fd8b 	bl	800e864 <Calculate_Lambda_Dominant>
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801ed4e:	8823      	ldrh	r3, [r4, #0]
 801ed50:	04db      	lsls	r3, r3, #19
 801ed52:	d50d      	bpl.n	801ed70 <Calculate_Data+0x1c0>
 801ed54:	492c      	ldr	r1, [pc, #176]	; (801ee08 <Calculate_Data+0x258>)
 801ed56:	4812      	ldr	r0, [pc, #72]	; (801eda0 <Calculate_Data+0x1f0>)
 801ed58:	f7ef f990 	bl	800e07c <Calculate_ELr>
 801ed5c:	4b2b      	ldr	r3, [pc, #172]	; (801ee0c <Calculate_Data+0x25c>)
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801ed5e:	492c      	ldr	r1, [pc, #176]	; (801ee10 <Calculate_Data+0x260>)
 801ed60:	480f      	ldr	r0, [pc, #60]	; (801eda0 <Calculate_Data+0x1f0>)
			if(Measure_Field&EbEr){ELr_Measure = Calculate_ELr(Line_Rabs_buff,Hazard_Retina);
 801ed62:	ed83 0a00 	vstr	s0, [r3]
														 ELb_Measure = Calculate_ELb(Line_Rabs_buff, Hazard_Blue);}
 801ed66:	f7ef f96f 	bl	800e048 <Calculate_ELb>
 801ed6a:	4b2a      	ldr	r3, [pc, #168]	; (801ee14 <Calculate_Data+0x264>)
 801ed6c:	ed83 0a00 	vstr	s0, [r3]
 801ed70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(Color_Field&Color_CIE_Lab){Calculate_Lab((Measure_Color_xy == 0x00) ? colorimetry_XYZ1964 : colorimetry_XYZ1931, Measure_Color_xy, Source_Type);}
 801ed72:	079b      	lsls	r3, r3, #30
 801ed74:	f57f af53 	bpl.w	801ec1e <Calculate_Data+0x6e>
 801ed78:	4b22      	ldr	r3, [pc, #136]	; (801ee04 <Calculate_Data+0x254>)
 801ed7a:	7829      	ldrb	r1, [r5, #0]
 801ed7c:	781a      	ldrb	r2, [r3, #0]
 801ed7e:	480b      	ldr	r0, [pc, #44]	; (801edac <Calculate_Data+0x1fc>)
 801ed80:	4b0e      	ldr	r3, [pc, #56]	; (801edbc <Calculate_Data+0x20c>)
 801ed82:	2900      	cmp	r1, #0
 801ed84:	bf18      	it	ne
 801ed86:	4618      	movne	r0, r3
 801ed88:	f7ef fc36 	bl	800e5f8 <Calculate_Lab>
 801ed8c:	e747      	b.n	801ec1e <Calculate_Data+0x6e>
														E_day = (Measure_Field&Illuminance) ? E_day : Calculate_EL_Day(Line_Rabs_buff, Spectral_day);
 801ed8e:	ed97 0a00 	vldr	s0, [r7]
 801ed92:	e771      	b.n	801ec78 <Calculate_Data+0xc8>
 801ed94:	200877b0 	.word	0x200877b0
 801ed98:	200897b0 	.word	0x200897b0
 801ed9c:	200867b0 	.word	0x200867b0
 801eda0:	200077dc 	.word	0x200077dc
 801eda4:	20004c74 	.word	0x20004c74
 801eda8:	20004c71 	.word	0x20004c71
 801edac:	2008a7c4 	.word	0x2008a7c4
 801edb0:	200887b0 	.word	0x200887b0
 801edb4:	2004dbe0 	.word	0x2004dbe0
 801edb8:	200857b0 	.word	0x200857b0
 801edbc:	2008a7be 	.word	0x2008a7be
 801edc0:	2004fbe0 	.word	0x2004fbe0
 801edc4:	20004c6f 	.word	0x20004c6f
 801edc8:	2008a7e4 	.word	0x2008a7e4
 801edcc:	2008a7dc 	.word	0x2008a7dc
 801edd0:	20004c76 	.word	0x20004c76
 801edd4:	20090edc 	.word	0x20090edc
 801edd8:	20090948 	.word	0x20090948
 801eddc:	2004ebe0 	.word	0x2004ebe0
 801ede0:	2009093c 	.word	0x2009093c
 801ede4:	20090a30 	.word	0x20090a30
 801ede8:	2004fbe4 	.word	0x2004fbe4
 801edec:	20090950 	.word	0x20090950
 801edf0:	20090a34 	.word	0x20090a34
 801edf4:	20090db8 	.word	0x20090db8
 801edf8:	20090cf4 	.word	0x20090cf4
 801edfc:	2009094c 	.word	0x2009094c
 801ee00:	2008bce6 	.word	0x2008bce6
 801ee04:	2008bce9 	.word	0x2008bce9
 801ee08:	20005fd8 	.word	0x20005fd8
 801ee0c:	20090ed8 	.word	0x20090ed8
 801ee10:	20004fd8 	.word	0x20004fd8
 801ee14:	20090ed4 	.word	0x20090ed4

0801ee18 <Get_Battery_Level>:
{
 801ee18:	b538      	push	{r3, r4, r5, lr}
	HAL_ADC_Start(&hadc1);
 801ee1a:	4c13      	ldr	r4, [pc, #76]	; (801ee68 <Get_Battery_Level+0x50>)
	adcResult = HAL_ADC_GetValue(&hadc1);
 801ee1c:	4d13      	ldr	r5, [pc, #76]	; (801ee6c <Get_Battery_Level+0x54>)
	HAL_ADC_Start(&hadc1);
 801ee1e:	4620      	mov	r0, r4
 801ee20:	f7e2 fd06 	bl	8001830 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 2);
 801ee24:	2102      	movs	r1, #2
 801ee26:	4620      	mov	r0, r4
 801ee28:	f7e2 f9fc 	bl	8001224 <HAL_ADC_PollForConversion>
	adcResult = HAL_ADC_GetValue(&hadc1);
 801ee2c:	4620      	mov	r0, r4
 801ee2e:	f7e2 fa47 	bl	80012c0 <HAL_ADC_GetValue>
 801ee32:	7028      	strb	r0, [r5, #0]
	HAL_ADC_Stop(&hadc1);
 801ee34:	4620      	mov	r0, r4
 801ee36:	f7e2 fd7a 	bl	800192e <HAL_ADC_Stop>
	return percentage_charge = 100.0*adcResult/190;
 801ee3a:	7828      	ldrb	r0, [r5, #0]
 801ee3c:	f7e1 fb82 	bl	8000544 <__aeabi_i2d>
 801ee40:	2200      	movs	r2, #0
 801ee42:	4b0b      	ldr	r3, [pc, #44]	; (801ee70 <Get_Battery_Level+0x58>)
 801ee44:	f7e1 fbe4 	bl	8000610 <__aeabi_dmul>
 801ee48:	a305      	add	r3, pc, #20	; (adr r3, 801ee60 <Get_Battery_Level+0x48>)
 801ee4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee4e:	f7e1 fd09 	bl	8000864 <__aeabi_ddiv>
 801ee52:	4b08      	ldr	r3, [pc, #32]	; (801ee74 <Get_Battery_Level+0x5c>)
}
 801ee54:	ec41 0b10 	vmov	d0, r0, r1
	return percentage_charge = 100.0*adcResult/190;
 801ee58:	e9c3 0100 	strd	r0, r1, [r3]
}
 801ee5c:	bd38      	pop	{r3, r4, r5, pc}
 801ee5e:	bf00      	nop
 801ee60:	00000000 	.word	0x00000000
 801ee64:	4067c000 	.word	0x4067c000
 801ee68:	20090c88 	.word	0x20090c88
 801ee6c:	20050bec 	.word	0x20050bec
 801ee70:	40590000 	.word	0x40590000
 801ee74:	20090dc0 	.word	0x20090dc0

0801ee78 <packet_generator_data_send>:
{
 801ee78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801ee7c:	4c25      	ldr	r4, [pc, #148]	; (801ef14 <packet_generator_data_send+0x9c>)
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801ee7e:	4f26      	ldr	r7, [pc, #152]	; (801ef18 <packet_generator_data_send+0xa0>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ee80:	f8df 909c 	ldr.w	r9, [pc, #156]	; 801ef20 <packet_generator_data_send+0xa8>
			memset(dataToSend, 0, sizeof(dataToSend));
 801ee84:	2100      	movs	r1, #0
 801ee86:	2240      	movs	r2, #64	; 0x40
 801ee88:	4620      	mov	r0, r4
 801ee8a:	f002 ff78 	bl	8021d7e <memset>
			dataToSend[0] = 0xAB;
 801ee8e:	23ab      	movs	r3, #171	; 0xab
 801ee90:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801ee92:	2312      	movs	r3, #18
			dataToSend[2] = 0x01;
 801ee94:	2500      	movs	r5, #0
			dataToSend[1] = 0x12;
 801ee96:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x01;
 801ee98:	2301      	movs	r3, #1
 801ee9a:	70a3      	strb	r3, [r4, #2]
			packet_number = 0;
 801ee9c:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801ee9e:	4629      	mov	r1, r5
			q = 5;
 801eea0:	2305      	movs	r3, #5
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801eea2:	46a0      	mov	r8, r4
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801eea4:	f837 2015 	ldrh.w	r2, [r7, r5, lsl #1]
				dataToSend[q+1] = byte_low;
 801eea8:	eb04 0e03 	add.w	lr, r4, r3
				byte_high = (Line_buff[cnt] >> 8) & 0x00FF;
 801eeac:	0a10      	lsrs	r0, r2, #8
 801eeae:	54e0      	strb	r0, [r4, r3]
				q = q + 2;
 801eeb0:	3302      	adds	r3, #2
				byte_low = Line_buff[cnt] & 0x00FF;
 801eeb2:	f88e 2001 	strb.w	r2, [lr, #1]
				q = q + 2;
 801eeb6:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + byte_high + byte_low;
 801eeb8:	fa50 f282 	uxtab	r2, r0, r2
 801eebc:	440a      	add	r2, r1
				if(q >= 62 || cnt == 1023){
 801eebe:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + byte_high + byte_low;
 801eec0:	b291      	uxth	r1, r2
				if(q >= 62 || cnt == 1023){
 801eec2:	d803      	bhi.n	801eecc <packet_generator_data_send+0x54>
 801eec4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801eec8:	4295      	cmp	r5, r2
 801eeca:	d118      	bne.n	801eefe <packet_generator_data_send+0x86>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801eecc:	7860      	ldrb	r0, [r4, #1]
 801eece:	7822      	ldrb	r2, [r4, #0]
 801eed0:	4402      	add	r2, r0
 801eed2:	78a0      	ldrb	r0, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801eed4:	0a33      	lsrs	r3, r6, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801eed6:	4402      	add	r2, r0
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801eed8:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801eeda:	b2f3      	uxtb	r3, r6
 801eedc:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801eede:	4413      	add	r3, r2
 801eee0:	185a      	adds	r2, r3, r1
 801eee2:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801eee6:	4641      	mov	r1, r8
 801eee8:	2240      	movs	r2, #64	; 0x40
 801eeea:	4648      	mov	r0, r9
 801eeec:	f7e9 f8ce 	bl	800808c <USBD_CUSTOM_HID_SendReport>
					packet_number = packet_number + 1;
 801eef0:	3601      	adds	r6, #1
					HAL_Delay(2);
 801eef2:	2002      	movs	r0, #2
 801eef4:	f7e2 f892 	bl	800101c <HAL_Delay>
					packet_number = packet_number + 1;
 801eef8:	b2b6      	uxth	r6, r6
					CRC_pack = 0;
 801eefa:	2100      	movs	r1, #0
					q = 5;
 801eefc:	2305      	movs	r3, #5
 801eefe:	3501      	adds	r5, #1
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801ef00:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801ef04:	d1ce      	bne.n	801eea4 <packet_generator_data_send+0x2c>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801ef06:	4b05      	ldr	r3, [pc, #20]	; (801ef1c <packet_generator_data_send+0xa4>)
 801ef08:	2200      	movs	r2, #0
 801ef0a:	601a      	str	r2, [r3, #0]
 801ef0c:	605a      	str	r2, [r3, #4]
 801ef0e:	609a      	str	r2, [r3, #8]
 801ef10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef14:	2008a7f8 	.word	0x2008a7f8
 801ef18:	200097dc 	.word	0x200097dc
 801ef1c:	2008a7ec 	.word	0x2008a7ec
 801ef20:	20090f28 	.word	0x20090f28

0801ef24 <packet_generator_Rabs_data_send>:
{
 801ef24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801ef28:	4c3b      	ldr	r4, [pc, #236]	; (801f018 <packet_generator_Rabs_data_send+0xf4>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801ef2a:	4d3c      	ldr	r5, [pc, #240]	; (801f01c <packet_generator_Rabs_data_send+0xf8>)
 801ef2c:	4f3c      	ldr	r7, [pc, #240]	; (801f020 <packet_generator_Rabs_data_send+0xfc>)
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ef2e:	f8df 9114 	ldr.w	r9, [pc, #276]	; 801f044 <packet_generator_Rabs_data_send+0x120>
			memset(dataToSend, 0, sizeof(dataToSend));
 801ef32:	2240      	movs	r2, #64	; 0x40
 801ef34:	2100      	movs	r1, #0
 801ef36:	4620      	mov	r0, r4
 801ef38:	f002 ff21 	bl	8021d7e <memset>
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801ef3c:	4b39      	ldr	r3, [pc, #228]	; (801f024 <packet_generator_Rabs_data_send+0x100>)
 801ef3e:	8828      	ldrh	r0, [r5, #0]
 801ef40:	4939      	ldr	r1, [pc, #228]	; (801f028 <packet_generator_Rabs_data_send+0x104>)
 801ef42:	ed93 0a00 	vldr	s0, [r3]
 801ef46:	f7fc feb7 	bl	801bcb8 <Rabs_calc_Factor1>
 801ef4a:	4b38      	ldr	r3, [pc, #224]	; (801f02c <packet_generator_Rabs_data_send+0x108>)
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801ef4c:	4938      	ldr	r1, [pc, #224]	; (801f030 <packet_generator_Rabs_data_send+0x10c>)
			Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 801ef4e:	ed83 0a00 	vstr	s0, [r3]
			Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 801ef52:	edd1 0a00 	vldr	s1, [r1]
 801ef56:	4b37      	ldr	r3, [pc, #220]	; (801f034 <packet_generator_Rabs_data_send+0x110>)
 801ef58:	8829      	ldrh	r1, [r5, #0]
 801ef5a:	4a37      	ldr	r2, [pc, #220]	; (801f038 <packet_generator_Rabs_data_send+0x114>)
 801ef5c:	4832      	ldr	r0, [pc, #200]	; (801f028 <packet_generator_Rabs_data_send+0x104>)
 801ef5e:	f7fc fedf 	bl	801bd20 <Rabs_calc_main>
			dataToSend[0] = 0xAB;
 801ef62:	23ab      	movs	r3, #171	; 0xab
 801ef64:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801ef66:	2312      	movs	r3, #18
 801ef68:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x03;
 801ef6a:	2303      	movs	r3, #3
 801ef6c:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801ef6e:	4b33      	ldr	r3, [pc, #204]	; (801f03c <packet_generator_Rabs_data_send+0x118>)
 801ef70:	781b      	ldrb	r3, [r3, #0]
 801ef72:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801ef74:	f04f 0500 	mov.w	r5, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801ef78:	bf18      	it	ne
 801ef7a:	2301      	movne	r3, #1
 801ef7c:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801ef7e:	71a5      	strb	r5, [r4, #6]
			packet_number = 0;
 801ef80:	462e      	mov	r6, r5
			uint16_t CRC_pack = 0, packet_number = 0;
 801ef82:	4629      	mov	r1, r5
			q = 7;
 801ef84:	2307      	movs	r3, #7
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801ef86:	46a0      	mov	r8, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801ef88:	f857 2d04 	ldr.w	r2, [r7, #-4]!
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801ef8c:	f103 0c01 	add.w	ip, r3, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801ef90:	0e10      	lsrs	r0, r2, #24
 801ef92:	54e0      	strb	r0, [r4, r3]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801ef94:	f103 0e02 	add.w	lr, r3, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801ef98:	0c10      	lsrs	r0, r2, #16
 801ef9a:	f804 000c 	strb.w	r0, [r4, ip]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801ef9e:	0a10      	lsrs	r0, r2, #8
 801efa0:	f804 000e 	strb.w	r0, [r4, lr]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801efa4:	18e0      	adds	r0, r4, r3
 801efa6:	b2d2      	uxtb	r2, r2
 801efa8:	70c2      	strb	r2, [r0, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801efaa:	5ce0      	ldrb	r0, [r4, r3]
 801efac:	4402      	add	r2, r0
 801efae:	f814 000c 	ldrb.w	r0, [r4, ip]
 801efb2:	4410      	add	r0, r2
 801efb4:	f814 200e 	ldrb.w	r2, [r4, lr]
				q = q + 4;
 801efb8:	3304      	adds	r3, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801efba:	4402      	add	r2, r0
				q = q + 4;
 801efbc:	b2db      	uxtb	r3, r3
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801efbe:	4411      	add	r1, r2
				if(q >= 62 || cnt == 1023){
 801efc0:	2b3d      	cmp	r3, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801efc2:	b289      	uxth	r1, r1
				if(q >= 62 || cnt == 1023){
 801efc4:	d803      	bhi.n	801efce <packet_generator_Rabs_data_send+0xaa>
 801efc6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801efca:	4295      	cmp	r5, r2
 801efcc:	d118      	bne.n	801f000 <packet_generator_Rabs_data_send+0xdc>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801efce:	7860      	ldrb	r0, [r4, #1]
 801efd0:	7822      	ldrb	r2, [r4, #0]
 801efd2:	4402      	add	r2, r0
 801efd4:	78a0      	ldrb	r0, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801efd6:	0a33      	lsrs	r3, r6, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801efd8:	4402      	add	r2, r0
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801efda:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801efdc:	b2f3      	uxtb	r3, r6
 801efde:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801efe0:	4413      	add	r3, r2
 801efe2:	440b      	add	r3, r1
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801efe4:	2240      	movs	r2, #64	; 0x40
 801efe6:	4641      	mov	r1, r8
 801efe8:	4648      	mov	r0, r9
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801efea:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
					packet_number = packet_number + 1;
 801efee:	3601      	adds	r6, #1
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801eff0:	f7e9 f84c 	bl	800808c <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(2);
 801eff4:	2002      	movs	r0, #2
 801eff6:	f7e2 f811 	bl	800101c <HAL_Delay>
					packet_number = packet_number + 1;
 801effa:	b2b6      	uxth	r6, r6
					CRC_pack = 0;
 801effc:	2100      	movs	r1, #0
					q = 7;
 801effe:	2307      	movs	r3, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801f000:	3501      	adds	r5, #1
 801f002:	b2ad      	uxth	r5, r5
 801f004:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 801f008:	d1be      	bne.n	801ef88 <packet_generator_Rabs_data_send+0x64>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801f00a:	4b0d      	ldr	r3, [pc, #52]	; (801f040 <packet_generator_Rabs_data_send+0x11c>)
 801f00c:	2200      	movs	r2, #0
 801f00e:	601a      	str	r2, [r3, #0]
 801f010:	605a      	str	r2, [r3, #4]
 801f012:	609a      	str	r2, [r3, #8]
 801f014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f018:	2008a7f8 	.word	0x2008a7f8
 801f01c:	20004fc2 	.word	0x20004fc2
 801f020:	200087dc 	.word	0x200087dc
 801f024:	2004cbdc 	.word	0x2004cbdc
 801f028:	200097dc 	.word	0x200097dc
 801f02c:	20004fd0 	.word	0x20004fd0
 801f030:	20004fd4 	.word	0x20004fd4
 801f034:	200077dc 	.word	0x200077dc
 801f038:	2004cbe0 	.word	0x2004cbe0
 801f03c:	20000a48 	.word	0x20000a48
 801f040:	2008a7ec 	.word	0x2008a7ec
 801f044:	20090f28 	.word	0x20090f28

0801f048 <packet_generator_Calculated_data_send>:
{
 801f048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memset(dataToSend, 0, sizeof(dataToSend));
 801f04c:	4c88      	ldr	r4, [pc, #544]	; (801f270 <packet_generator_Calculated_data_send+0x228>)
 801f04e:	f8df 9248 	ldr.w	r9, [pc, #584]	; 801f298 <packet_generator_Calculated_data_send+0x250>
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f052:	f8df b23c 	ldr.w	fp, [pc, #572]	; 801f290 <packet_generator_Calculated_data_send+0x248>
{
 801f056:	b087      	sub	sp, #28
			memset(dataToSend, 0, sizeof(dataToSend));
 801f058:	2240      	movs	r2, #64	; 0x40
 801f05a:	2100      	movs	r1, #0
 801f05c:	4620      	mov	r0, r4
 801f05e:	f002 fe8e 	bl	8021d7e <memset>
			delta_Eab_Measure = Calculate_deltaEab();
 801f062:	f7ef fd09 	bl	800ea78 <Calculate_deltaEab>
 801f066:	4b83      	ldr	r3, [pc, #524]	; (801f274 <packet_generator_Calculated_data_send+0x22c>)
 801f068:	8018      	strh	r0, [r3, #0]
			dataToSend[0] = 0xAB;
 801f06a:	23ab      	movs	r3, #171	; 0xab
 801f06c:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801f06e:	2312      	movs	r3, #18
 801f070:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801f072:	2304      	movs	r3, #4
 801f074:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801f076:	4b80      	ldr	r3, [pc, #512]	; (801f278 <packet_generator_Calculated_data_send+0x230>)
 801f078:	781b      	ldrb	r3, [r3, #0]
 801f07a:	3300      	adds	r3, #0
			dataToSend[6] = 0;
 801f07c:	f04f 0800 	mov.w	r8, #0
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801f080:	bf18      	it	ne
 801f082:	2301      	movne	r3, #1
 801f084:	7163      	strb	r3, [r4, #5]
			dataToSend[6] = 0;
 801f086:	f884 8006 	strb.w	r8, [r4, #6]
			packet_number = 0;
 801f08a:	4645      	mov	r5, r8
			uint16_t CRC_pack = 0, packet_number = 0;
 801f08c:	4647      	mov	r7, r8
			q = 7;
 801f08e:	2607      	movs	r6, #7
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f090:	46a2      	mov	sl, r4
				memcpy(&buff_float, &Line_Rabs_buff[1023-cnt], sizeof(float));
 801f092:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 801f096:	9305      	str	r3, [sp, #20]
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801f098:	0e1a      	lsrs	r2, r3, #24
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f09a:	1c70      	adds	r0, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801f09c:	55a2      	strb	r2, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801f09e:	1cb1      	adds	r1, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f0a0:	0c1a      	lsrs	r2, r3, #16
 801f0a2:	5422      	strb	r2, [r4, r0]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801f0a4:	0a1a      	lsrs	r2, r3, #8
 801f0a6:	5462      	strb	r2, [r4, r1]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801f0a8:	19a2      	adds	r2, r4, r6
 801f0aa:	b2db      	uxtb	r3, r3
 801f0ac:	70d3      	strb	r3, [r2, #3]
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801f0ae:	5da2      	ldrb	r2, [r4, r6]
 801f0b0:	4413      	add	r3, r2
 801f0b2:	5c22      	ldrb	r2, [r4, r0]
 801f0b4:	441a      	add	r2, r3
 801f0b6:	5c63      	ldrb	r3, [r4, r1]
				q = q + 4;
 801f0b8:	3604      	adds	r6, #4
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801f0ba:	4413      	add	r3, r2
				q = q + 4;
 801f0bc:	b2f6      	uxtb	r6, r6
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801f0be:	441f      	add	r7, r3
				if(q >= 62 || cnt == 1023){
 801f0c0:	2e3d      	cmp	r6, #61	; 0x3d
				CRC_pack = CRC_pack + dataToSend[q] + dataToSend[q+1] + dataToSend[q+2] + dataToSend[q+3];
 801f0c2:	b2bf      	uxth	r7, r7
				if(q >= 62 || cnt == 1023){
 801f0c4:	d803      	bhi.n	801f0ce <packet_generator_Calculated_data_send+0x86>
 801f0c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 801f0ca:	4598      	cmp	r8, r3
 801f0cc:	d118      	bne.n	801f100 <packet_generator_Calculated_data_send+0xb8>
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f0ce:	7861      	ldrb	r1, [r4, #1]
 801f0d0:	7822      	ldrb	r2, [r4, #0]
 801f0d2:	440a      	add	r2, r1
 801f0d4:	78a1      	ldrb	r1, [r4, #2]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801f0d6:	0a2b      	lsrs	r3, r5, #8
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f0d8:	440a      	add	r2, r1
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801f0da:	70e3      	strb	r3, [r4, #3]
					dataToSend[4] = packet_number & 0x00FF;
 801f0dc:	b2eb      	uxtb	r3, r5
 801f0de:	7123      	strb	r3, [r4, #4]
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f0e0:	4413      	add	r3, r2
 801f0e2:	441f      	add	r7, r3
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f0e4:	2240      	movs	r2, #64	; 0x40
 801f0e6:	4651      	mov	r1, sl
 801f0e8:	4658      	mov	r0, fp
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + packet_number);
 801f0ea:	f884 703f 	strb.w	r7, [r4, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f0ee:	f7e8 ffcd 	bl	800808c <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(2);
 801f0f2:	2002      	movs	r0, #2
 801f0f4:	f7e1 ff92 	bl	800101c <HAL_Delay>
					packet_number = packet_number + 1;
 801f0f8:	3501      	adds	r5, #1
 801f0fa:	b2ad      	uxth	r5, r5
					CRC_pack = 0;
 801f0fc:	2700      	movs	r7, #0
					q = 7;
 801f0fe:	2607      	movs	r6, #7
			for (uint16_t cnt = 0; cnt < 1024; cnt++){
 801f100:	f108 0801 	add.w	r8, r8, #1
 801f104:	fa1f f888 	uxth.w	r8, r8
 801f108:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 801f10c:	d1c1      	bne.n	801f092 <packet_generator_Calculated_data_send+0x4a>
			memset(dataToSend, 0, sizeof(dataToSend)); 
 801f10e:	2240      	movs	r2, #64	; 0x40
 801f110:	2100      	movs	r1, #0
 801f112:	4857      	ldr	r0, [pc, #348]	; (801f270 <packet_generator_Calculated_data_send+0x228>)
 801f114:	f002 fe33 	bl	8021d7e <memset>
			dataToSend[0] = 0xAB;
 801f118:	23ab      	movs	r3, #171	; 0xab
 801f11a:	7023      	strb	r3, [r4, #0]
			dataToSend[1] = 0x12;
 801f11c:	2312      	movs	r3, #18
 801f11e:	7063      	strb	r3, [r4, #1]
			dataToSend[2] = 0x04;
 801f120:	2304      	movs	r3, #4
 801f122:	70a3      	strb	r3, [r4, #2]
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801f124:	4b54      	ldr	r3, [pc, #336]	; (801f278 <packet_generator_Calculated_data_send+0x230>)
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801f126:	4a55      	ldr	r2, [pc, #340]	; (801f27c <packet_generator_Calculated_data_send+0x234>)
			dataToSend[5] = (Mode_EL == 0)? 0 : 1;
 801f128:	781b      	ldrb	r3, [r3, #0]
 801f12a:	3300      	adds	r3, #0
 801f12c:	bf18      	it	ne
 801f12e:	2301      	movne	r3, #1
 801f130:	7163      	strb	r3, [r4, #5]
				memcpy(&buff_float, &colorimetry_xy1964[0], sizeof(float));
 801f132:	6813      	ldr	r3, [r2, #0]
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f134:	f106 0a01 	add.w	sl, r6, #1
				dataToSend[q] = (buff_float >> 24) & 0x000000FF;
 801f138:	0e19      	lsrs	r1, r3, #24
 801f13a:	55a1      	strb	r1, [r4, r6]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801f13c:	f106 0902 	add.w	r9, r6, #2
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f140:	0c19      	lsrs	r1, r3, #16
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801f142:	f106 0803 	add.w	r8, r6, #3
				dataToSend[q+1] = (buff_float >> 16) & 0x000000FF;
 801f146:	f804 100a 	strb.w	r1, [r4, sl]
				dataToSend[q+2] = (buff_float >> 8) & 0x000000FF;
 801f14a:	0a19      	lsrs	r1, r3, #8
 801f14c:	f804 1009 	strb.w	r1, [r4, r9]
				dataToSend[q+3] = (buff_float) & 0x000000FF;
 801f150:	f804 3008 	strb.w	r3, [r4, r8]
				memcpy(&buff_float, &colorimetry_xy1964[1], sizeof(float));
 801f154:	6853      	ldr	r3, [r2, #4]
 801f156:	9305      	str	r3, [sp, #20]
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801f158:	f106 0c04 	add.w	ip, r6, #4
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801f15c:	f106 0e05 	add.w	lr, r6, #5
				dataToSend[q+4] = (buff_float >> 24) & 0x000000FF;
 801f160:	0e1a      	lsrs	r2, r3, #24
 801f162:	f804 200c 	strb.w	r2, [r4, ip]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801f166:	1db0      	adds	r0, r6, #6
				dataToSend[q+5] = (buff_float >> 16) & 0x000000FF;
 801f168:	0c1a      	lsrs	r2, r3, #16
 801f16a:	f804 200e 	strb.w	r2, [r4, lr]
				dataToSend[q+6] = (buff_float >> 8) & 0x000000FF;
 801f16e:	0a1a      	lsrs	r2, r3, #8
 801f170:	5422      	strb	r2, [r4, r0]
				dataToSend[q+7] = (buff_float) & 0x000000FF;
 801f172:	1df2      	adds	r2, r6, #7
 801f174:	9203      	str	r2, [sp, #12]
 801f176:	54a3      	strb	r3, [r4, r2]
				memcpy(&buff_float, &Tc_Measure, sizeof(uint16_t));
 801f178:	4b41      	ldr	r3, [pc, #260]	; (801f280 <packet_generator_Calculated_data_send+0x238>)
 801f17a:	881b      	ldrh	r3, [r3, #0]
 801f17c:	f8ad 3014 	strh.w	r3, [sp, #20]
				dataToSend[q+8]= (buff_float >> 8) & 0x000000FF;
 801f180:	f106 0308 	add.w	r3, r6, #8
 801f184:	9300      	str	r3, [sp, #0]
 801f186:	9b05      	ldr	r3, [sp, #20]
 801f188:	9900      	ldr	r1, [sp, #0]
 801f18a:	0a1a      	lsrs	r2, r3, #8
 801f18c:	5462      	strb	r2, [r4, r1]
				dataToSend[q+9] = (buff_float) & 0x000000FF;
 801f18e:	f106 0209 	add.w	r2, r6, #9
 801f192:	9201      	str	r2, [sp, #4]
 801f194:	54a3      	strb	r3, [r4, r2]
				dataToSend[q+10]= Source_Type;
 801f196:	f106 030a 	add.w	r3, r6, #10
 801f19a:	9302      	str	r3, [sp, #8]
 801f19c:	4b39      	ldr	r3, [pc, #228]	; (801f284 <packet_generator_Calculated_data_send+0x23c>)
 801f19e:	9a02      	ldr	r2, [sp, #8]
 801f1a0:	781b      	ldrb	r3, [r3, #0]
 801f1a2:	54a3      	strb	r3, [r4, r2]
			if(Calculate_deltaEab_Done == 0x01)
 801f1a4:	4b38      	ldr	r3, [pc, #224]	; (801f288 <packet_generator_Calculated_data_send+0x240>)
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801f1a6:	4932      	ldr	r1, [pc, #200]	; (801f270 <packet_generator_Calculated_data_send+0x228>)
			if(Calculate_deltaEab_Done == 0x01)
 801f1a8:	781b      	ldrb	r3, [r3, #0]
 801f1aa:	2b01      	cmp	r3, #1
				memcpy(&buff_float, &delta_Eab_Measure, sizeof(int16_t));
 801f1ac:	bf01      	itttt	eq
 801f1ae:	4b31      	ldreq	r3, [pc, #196]	; (801f274 <packet_generator_Calculated_data_send+0x22c>)
 801f1b0:	881b      	ldrheq	r3, [r3, #0]
 801f1b2:	f8ad 3014 	strheq.w	r3, [sp, #20]
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801f1b6:	9b05      	ldreq	r3, [sp, #20]
 801f1b8:	4434      	add	r4, r6
 801f1ba:	bf0b      	itete	eq
 801f1bc:	0a1a      	lsreq	r2, r3, #8
			} else {dataToSend[q+11] = 0;
 801f1be:	2300      	movne	r3, #0
				dataToSend[q+11] = (buff_float >> 8) & 0x000000FF;
 801f1c0:	72e2      	strbeq	r2, [r4, #11]
			} else {dataToSend[q+11] = 0;
 801f1c2:	72e3      	strbne	r3, [r4, #11]
				dataToSend[q+12] = 0;
 801f1c4:	7323      	strb	r3, [r4, #12]
				memcpy(&buff_float, &colorimetry_xy1931[0], sizeof(float));
 801f1c6:	4c31      	ldr	r4, [pc, #196]	; (801f28c <packet_generator_Calculated_data_send+0x244>)
 801f1c8:	6822      	ldr	r2, [r4, #0]
				dataToSend[q+13] = (buff_float >> 24) & 0x000000FF;
 801f1ca:	198b      	adds	r3, r1, r6
 801f1cc:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 801f1d0:	f883 b00d 	strb.w	fp, [r3, #13]
				dataToSend[q+14] = (buff_float >> 16) & 0x000000FF;
 801f1d4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801f1d8:	f883 b00e 	strb.w	fp, [r3, #14]
				dataToSend[q+16] = (buff_float) & 0x000000FF;
 801f1dc:	741a      	strb	r2, [r3, #16]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801f1de:	ea4f 2b12 	mov.w	fp, r2, lsr #8
				memcpy(&buff_float, &colorimetry_xy1931[1], sizeof(float));
 801f1e2:	6862      	ldr	r2, [r4, #4]
				dataToSend[q+15]= (buff_float >> 8) & 0x000000FF;
 801f1e4:	f883 b00f 	strb.w	fp, [r3, #15]
				dataToSend[q+17] = (buff_float >> 24) & 0x000000FF;
 801f1e8:	0e14      	lsrs	r4, r2, #24
 801f1ea:	745c      	strb	r4, [r3, #17]
				dataToSend[q+18] = (buff_float >> 16) & 0x000000FF;
 801f1ec:	0c14      	lsrs	r4, r2, #16
 801f1ee:	749c      	strb	r4, [r3, #18]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801f1f0:	0a14      	lsrs	r4, r2, #8
				dataToSend[q+20] = (buff_float) & 0x000000FF;
 801f1f2:	751a      	strb	r2, [r3, #20]
				dataToSend[q+19] = (buff_float >> 8) & 0x000000FF;
 801f1f4:	74dc      	strb	r4, [r3, #19]
					dataToSend[3] = (packet_number>> 8) & 0x00FF;
 801f1f6:	0a2a      	lsrs	r2, r5, #8
 801f1f8:	70ca      	strb	r2, [r1, #3]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801f1fa:	780c      	ldrb	r4, [r1, #0]
 801f1fc:	784a      	ldrb	r2, [r1, #1]
 801f1fe:	4422      	add	r2, r4
 801f200:	788c      	ldrb	r4, [r1, #2]
					dataToSend[4] = packet_number & 0x00FF;
 801f202:	b2ed      	uxtb	r5, r5
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801f204:	4422      	add	r2, r4
					dataToSend[4] = packet_number & 0x00FF;
 801f206:	710d      	strb	r5, [r1, #4]
					dataToSend[q+5] + dataToSend[q+6] + dataToSend[q+7] + dataToSend[q+8] + dataToSend[q+9] + dataToSend[q+10] + dataToSend[q+11]+ packet_number);
 801f208:	4415      	add	r5, r2
 801f20a:	19ea      	adds	r2, r5, r7
 801f20c:	5d8d      	ldrb	r5, [r1, r6]
 801f20e:	f811 4008 	ldrb.w	r4, [r1, r8]
 801f212:	5c08      	ldrb	r0, [r1, r0]
 801f214:	442a      	add	r2, r5
 801f216:	f811 500a 	ldrb.w	r5, [r1, sl]
 801f21a:	442a      	add	r2, r5
 801f21c:	f811 5009 	ldrb.w	r5, [r1, r9]
 801f220:	442a      	add	r2, r5
 801f222:	4422      	add	r2, r4
 801f224:	f811 400c 	ldrb.w	r4, [r1, ip]
 801f228:	4422      	add	r2, r4
 801f22a:	f811 400e 	ldrb.w	r4, [r1, lr]
 801f22e:	4422      	add	r2, r4
 801f230:	4402      	add	r2, r0
 801f232:	9803      	ldr	r0, [sp, #12]
 801f234:	5c08      	ldrb	r0, [r1, r0]
 801f236:	4402      	add	r2, r0
 801f238:	9800      	ldr	r0, [sp, #0]
 801f23a:	5c08      	ldrb	r0, [r1, r0]
 801f23c:	4402      	add	r2, r0
 801f23e:	9801      	ldr	r0, [sp, #4]
 801f240:	5c08      	ldrb	r0, [r1, r0]
 801f242:	4402      	add	r2, r0
 801f244:	9802      	ldr	r0, [sp, #8]
 801f246:	7adb      	ldrb	r3, [r3, #11]
 801f248:	5c08      	ldrb	r0, [r1, r0]
 801f24a:	4402      	add	r2, r0
 801f24c:	4413      	add	r3, r2
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f24e:	4810      	ldr	r0, [pc, #64]	; (801f290 <packet_generator_Calculated_data_send+0x248>)
					dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2] + dataToSend[q]+dataToSend[q+1]+dataToSend[q+2] + dataToSend[q+3] + dataToSend[q+4]+
 801f250:	f881 303f 	strb.w	r3, [r1, #63]	; 0x3f
					USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f254:	2240      	movs	r2, #64	; 0x40
 801f256:	f7e8 ff19 	bl	800808c <USBD_CUSTOM_HID_SendReport>
					HAL_Delay(2);
 801f25a:	2002      	movs	r0, #2
 801f25c:	f7e1 fede 	bl	800101c <HAL_Delay>
			memset(dataToReceive, 0, sizeof(dataToReceive));
 801f260:	4b0c      	ldr	r3, [pc, #48]	; (801f294 <packet_generator_Calculated_data_send+0x24c>)
 801f262:	2200      	movs	r2, #0
 801f264:	601a      	str	r2, [r3, #0]
 801f266:	605a      	str	r2, [r3, #4]
 801f268:	609a      	str	r2, [r3, #8]
}
 801f26a:	b007      	add	sp, #28
 801f26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f270:	2008a7f8 	.word	0x2008a7f8
 801f274:	2008bce6 	.word	0x2008bce6
 801f278:	20000a48 	.word	0x20000a48
 801f27c:	2008a7e4 	.word	0x2008a7e4
 801f280:	2004fbe0 	.word	0x2004fbe0
 801f284:	2008bce9 	.word	0x2008bce9
 801f288:	20004c11 	.word	0x20004c11
 801f28c:	2008a7dc 	.word	0x2008a7dc
 801f290:	20090f28 	.word	0x20090f28
 801f294:	2008a7ec 	.word	0x2008a7ec
 801f298:	200087dc 	.word	0x200087dc

0801f29c <usb_receive_processing>:
{
 801f29c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
		if(dataToReceive[0] == 0xAB)
 801f2a0:	4ca6      	ldr	r4, [pc, #664]	; (801f53c <usb_receive_processing+0x2a0>)
 801f2a2:	f894 9000 	ldrb.w	r9, [r4]
	uint32_t PAGEError = 0;
 801f2a6:	2500      	movs	r5, #0
		if(dataToReceive[0] == 0xAB)
 801f2a8:	f1b9 0fab 	cmp.w	r9, #171	; 0xab
	uint32_t PAGEError = 0;
 801f2ac:	9501      	str	r5, [sp, #4]
 801f2ae:	4626      	mov	r6, r4
		if(dataToReceive[0] == 0xAB)
 801f2b0:	d12a      	bne.n	801f308 <usb_receive_processing+0x6c>
			if(dataToReceive[1] == 0x12)
 801f2b2:	f894 8001 	ldrb.w	r8, [r4, #1]
 801f2b6:	f1b8 0f12 	cmp.w	r8, #18
 801f2ba:	d117      	bne.n	801f2ec <usb_receive_processing+0x50>
			switch(dataToReceive[2])
 801f2bc:	78a7      	ldrb	r7, [r4, #2]
 801f2be:	2f0a      	cmp	r7, #10
 801f2c0:	f000 80dd 	beq.w	801f47e <usb_receive_processing+0x1e2>
 801f2c4:	d815      	bhi.n	801f2f2 <usb_receive_processing+0x56>
 801f2c6:	2f02      	cmp	r7, #2
 801f2c8:	d023      	beq.n	801f312 <usb_receive_processing+0x76>
 801f2ca:	2f04      	cmp	r7, #4
 801f2cc:	f000 81a2 	beq.w	801f614 <usb_receive_processing+0x378>
 801f2d0:	2f01      	cmp	r7, #1
 801f2d2:	d119      	bne.n	801f308 <usb_receive_processing+0x6c>
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801f2d4:	78f2      	ldrb	r2, [r6, #3]
						send_usb_block = 1;
 801f2d6:	4c9a      	ldr	r4, [pc, #616]	; (801f540 <usb_receive_processing+0x2a4>)
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801f2d8:	2a01      	cmp	r2, #1
						send_usb_block = 1;
 801f2da:	7027      	strb	r7, [r4, #0]
					if(dataToReceive[3] == CMD_RABS_DATA_TRANSMIT)
 801f2dc:	d116      	bne.n	801f30c <usb_receive_processing+0x70>
						packet_generator_Rabs_data_send();
 801f2de:	f7ff fe21 	bl	801ef24 <packet_generator_Rabs_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f2e2:	2300      	movs	r3, #0
 801f2e4:	6033      	str	r3, [r6, #0]
 801f2e6:	6073      	str	r3, [r6, #4]
 801f2e8:	60b3      	str	r3, [r6, #8]
						send_usb_block = 0;
 801f2ea:	7023      	strb	r3, [r4, #0]
}
 801f2ec:	b002      	add	sp, #8
 801f2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			switch(dataToReceive[2])
 801f2f2:	2f0c      	cmp	r7, #12
 801f2f4:	f000 8146 	beq.w	801f584 <usb_receive_processing+0x2e8>
 801f2f8:	f0c0 80d8 	bcc.w	801f4ac <usb_receive_processing+0x210>
 801f2fc:	2f0d      	cmp	r7, #13
 801f2fe:	f000 80a7 	beq.w	801f450 <usb_receive_processing+0x1b4>
 801f302:	2f66      	cmp	r7, #102	; 0x66
 801f304:	f000 816f 	beq.w	801f5e6 <usb_receive_processing+0x34a>
			__asm("nop");
 801f308:	bf00      	nop
}
 801f30a:	e7ef      	b.n	801f2ec <usb_receive_processing+0x50>
						packet_generator_data_send();
 801f30c:	f7ff fdb4 	bl	801ee78 <packet_generator_data_send>
 801f310:	e7e7      	b.n	801f2e2 <usb_receive_processing+0x46>
						send_usb_block = 0;
 801f312:	4b8b      	ldr	r3, [pc, #556]	; (801f540 <usb_receive_processing+0x2a4>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801f314:	4c8b      	ldr	r4, [pc, #556]	; (801f544 <usb_receive_processing+0x2a8>)
						send_usb_block = 0;
 801f316:	701d      	strb	r5, [r3, #0]
						memset(dataToSend, 0, sizeof(dataToSend));
 801f318:	4629      	mov	r1, r5
						if (exp_num != dataToReceive[3]){
 801f31a:	4d8b      	ldr	r5, [pc, #556]	; (801f548 <usb_receive_processing+0x2ac>)
						memset(dataToSend, 0, sizeof(dataToSend));
 801f31c:	2240      	movs	r2, #64	; 0x40
 801f31e:	4620      	mov	r0, r4
 801f320:	f002 fd2d 	bl	8021d7e <memset>
						if (exp_num != dataToReceive[3]){
 801f324:	78f3      	ldrb	r3, [r6, #3]
 801f326:	782a      	ldrb	r2, [r5, #0]
						dataToSend[0] = 0xAB;
 801f328:	f884 9000 	strb.w	r9, [r4]
						if (exp_num != dataToReceive[3]){
 801f32c:	4293      	cmp	r3, r2
						dataToSend[1] = 0x12;
 801f32e:	f884 8001 	strb.w	r8, [r4, #1]
						dataToSend[2] = CMD_CNFG;
 801f332:	70a7      	strb	r7, [r4, #2]
						if (exp_num != dataToReceive[3]){
 801f334:	d07a      	beq.n	801f42c <usb_receive_processing+0x190>
							exp_num = dataToReceive[3];
 801f336:	702b      	strb	r3, [r5, #0]
							htim2.Init.Period = exposure_timer_period[exp_num];
 801f338:	782a      	ldrb	r2, [r5, #0]
 801f33a:	4b84      	ldr	r3, [pc, #528]	; (801f54c <usb_receive_processing+0x2b0>)
 801f33c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f340:	4b83      	ldr	r3, [pc, #524]	; (801f550 <usb_receive_processing+0x2b4>)
 801f342:	60da      	str	r2, [r3, #12]
							MX_TIM2_Init();
 801f344:	f7ff fbd6 	bl	801eaf4 <MX_TIM2_Init>
							Calibration_Exposure_Change(exp_num);
 801f348:	7828      	ldrb	r0, [r5, #0]
 801f34a:	f7ef fcaf 	bl	800ecac <Calibration_Exposure_Change>
						if (LaserOnOff != dataToReceive[4]){
 801f34e:	4a81      	ldr	r2, [pc, #516]	; (801f554 <usb_receive_processing+0x2b8>)
 801f350:	7933      	ldrb	r3, [r6, #4]
 801f352:	7811      	ldrb	r1, [r2, #0]
 801f354:	428b      	cmp	r3, r1
 801f356:	4691      	mov	r9, r2
 801f358:	d06c      	beq.n	801f434 <usb_receive_processing+0x198>
							LaserOnOff = (dataToReceive[4] > 0) ? 1 : 0;
 801f35a:	3300      	adds	r3, #0
 801f35c:	bf18      	it	ne
 801f35e:	2301      	movne	r3, #1
 801f360:	7013      	strb	r3, [r2, #0]
							if(LaserOnOff == 0){
 801f362:	7813      	ldrb	r3, [r2, #0]
 801f364:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801f368:	2b00      	cmp	r3, #0
 801f36a:	d161      	bne.n	801f430 <usb_receive_processing+0x194>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801f36c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801f370:	4879      	ldr	r0, [pc, #484]	; (801f558 <usb_receive_processing+0x2bc>)
 801f372:	f7e3 fa1d 	bl	80027b0 <HAL_GPIO_WritePin>
						if (VGain != dataToReceive[5]){
 801f376:	4a79      	ldr	r2, [pc, #484]	; (801f55c <usb_receive_processing+0x2c0>)
 801f378:	7973      	ldrb	r3, [r6, #5]
 801f37a:	7811      	ldrb	r1, [r2, #0]
 801f37c:	428b      	cmp	r3, r1
 801f37e:	4690      	mov	r8, r2
 801f380:	d05c      	beq.n	801f43c <usb_receive_processing+0x1a0>
							VGain = (dataToReceive[5] > 0) ? 1 : 0;
 801f382:	3300      	adds	r3, #0
 801f384:	bf18      	it	ne
 801f386:	2301      	movne	r3, #1
 801f388:	7013      	strb	r3, [r2, #0]
							if(VGain == 0){
 801f38a:	7813      	ldrb	r3, [r2, #0]
 801f38c:	2b00      	cmp	r3, #0
 801f38e:	d153      	bne.n	801f438 <usb_receive_processing+0x19c>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 801f390:	2201      	movs	r2, #1
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801f392:	2120      	movs	r1, #32
 801f394:	4872      	ldr	r0, [pc, #456]	; (801f560 <usb_receive_processing+0x2c4>)
 801f396:	f7e3 fa0b 	bl	80027b0 <HAL_GPIO_WritePin>
						if (TFT_ON_OFF != dataToReceive[6]){
 801f39a:	4f72      	ldr	r7, [pc, #456]	; (801f564 <usb_receive_processing+0x2c8>)
 801f39c:	79b3      	ldrb	r3, [r6, #6]
 801f39e:	783a      	ldrb	r2, [r7, #0]
 801f3a0:	4293      	cmp	r3, r2
 801f3a2:	d051      	beq.n	801f448 <usb_receive_processing+0x1ac>
							TFT_ON_OFF = (dataToReceive[6] > 0) ? 1 : 0;
 801f3a4:	3300      	adds	r3, #0
 801f3a6:	bf18      	it	ne
 801f3a8:	2301      	movne	r3, #1
 801f3aa:	703b      	strb	r3, [r7, #0]
							if(TFT_ON_OFF == 1){
 801f3ac:	f897 a000 	ldrb.w	sl, [r7]
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801f3b0:	486d      	ldr	r0, [pc, #436]	; (801f568 <usb_receive_processing+0x2cc>)
							if(TFT_ON_OFF == 1){
 801f3b2:	fa5f fa8a 	uxtb.w	sl, sl
 801f3b6:	f1ba 0f01 	cmp.w	sl, #1
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801f3ba:	f04f 0104 	mov.w	r1, #4
							if(TFT_ON_OFF == 1){
 801f3be:	d13f      	bne.n	801f440 <usb_receive_processing+0x1a4>
								HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801f3c0:	f7e7 f866 	bl	8006490 <HAL_TIM_PWM_Start>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET); //LTDC_En on
 801f3c4:	4652      	mov	r2, sl
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801f3c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 801f3ca:	4865      	ldr	r0, [pc, #404]	; (801f560 <usb_receive_processing+0x2c4>)
 801f3cc:	f7e3 f9f0 	bl	80027b0 <HAL_GPIO_WritePin>
						if (Mode_EL != dataToReceive[7]){
 801f3d0:	4866      	ldr	r0, [pc, #408]	; (801f56c <usb_receive_processing+0x2d0>)
 801f3d2:	79f3      	ldrb	r3, [r6, #7]
 801f3d4:	7802      	ldrb	r2, [r0, #0]
 801f3d6:	429a      	cmp	r2, r3
 801f3d8:	d038      	beq.n	801f44c <usb_receive_processing+0x1b0>
							Mode_EL = (dataToReceive[7] > 0) ? 1 : 0; //Mode_EL=1 -Rabs_E, Mode_EL=0 -Rabs_L
 801f3da:	3300      	adds	r3, #0
 801f3dc:	bf18      	it	ne
 801f3de:	2301      	movne	r3, #1
 801f3e0:	7003      	strb	r3, [r0, #0]
						dataToSend[3] = exp_num;
 801f3e2:	7829      	ldrb	r1, [r5, #0]
						dataToSend[4] = LaserOnOff;
 801f3e4:	f899 5000 	ldrb.w	r5, [r9]
						dataToSend[5] = VGain;
 801f3e8:	f898 3000 	ldrb.w	r3, [r8]
						dataToSend[7] = Mode_EL;
 801f3ec:	7800      	ldrb	r0, [r0, #0]
 801f3ee:	71e0      	strb	r0, [r4, #7]
						dataToSend[5] = VGain;
 801f3f0:	b2da      	uxtb	r2, r3
						dataToSend[3] = exp_num;
 801f3f2:	b2c9      	uxtb	r1, r1
						dataToSend[4] = LaserOnOff;
 801f3f4:	b2ed      	uxtb	r5, r5
						dataToSend[6] = TFT_ON_OFF;
 801f3f6:	783b      	ldrb	r3, [r7, #0]
						dataToSend[3] = exp_num;
 801f3f8:	70e1      	strb	r1, [r4, #3]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801f3fa:	4429      	add	r1, r5
						dataToSend[5] = VGain;
 801f3fc:	7162      	strb	r2, [r4, #5]
						dataToSend[6] = TFT_ON_OFF;
 801f3fe:	b2db      	uxtb	r3, r3
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801f400:	440a      	add	r2, r1
						dataToSend[6] = TFT_ON_OFF;
 801f402:	71a3      	strb	r3, [r4, #6]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801f404:	4413      	add	r3, r2
 801f406:	7822      	ldrb	r2, [r4, #0]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f408:	494e      	ldr	r1, [pc, #312]	; (801f544 <usb_receive_processing+0x2a8>)
 801f40a:	4859      	ldr	r0, [pc, #356]	; (801f570 <usb_receive_processing+0x2d4>)
						dataToSend[4] = LaserOnOff;
 801f40c:	7125      	strb	r5, [r4, #4]
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801f40e:	4413      	add	r3, r2
 801f410:	7862      	ldrb	r2, [r4, #1]
 801f412:	4413      	add	r3, r2
 801f414:	78a2      	ldrb	r2, [r4, #2]
 801f416:	4413      	add	r3, r2
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f418:	2240      	movs	r2, #64	; 0x40
						dataToSend[63] = (CRC_pack+dataToSend[0]+dataToSend[1]+dataToSend[2]+dataToSend[3]+dataToSend[4]+dataToSend[5]+dataToSend[6]);
 801f41a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f41e:	f7e8 fe35 	bl	800808c <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f422:	2300      	movs	r3, #0
 801f424:	6033      	str	r3, [r6, #0]
 801f426:	6073      	str	r3, [r6, #4]
 801f428:	60b3      	str	r3, [r6, #8]
					break;
 801f42a:	e75f      	b.n	801f2ec <usb_receive_processing+0x50>
							__asm("nop");
 801f42c:	bf00      	nop
 801f42e:	e78e      	b.n	801f34e <usb_receive_processing+0xb2>
								HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801f430:	2201      	movs	r2, #1
 801f432:	e79b      	b.n	801f36c <usb_receive_processing+0xd0>
							__asm("nop");
 801f434:	bf00      	nop
 801f436:	e79e      	b.n	801f376 <usb_receive_processing+0xda>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801f438:	2200      	movs	r2, #0
 801f43a:	e7aa      	b.n	801f392 <usb_receive_processing+0xf6>
							__asm("nop");
 801f43c:	bf00      	nop
 801f43e:	e7ac      	b.n	801f39a <usb_receive_processing+0xfe>
								HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_2);	//TFT_booster SHDN off
 801f440:	f7e7 f85c 	bl	80064fc <HAL_TIM_PWM_Stop>
								HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET); //LTDC_En off
 801f444:	2200      	movs	r2, #0
 801f446:	e7be      	b.n	801f3c6 <usb_receive_processing+0x12a>
							__asm("nop");
 801f448:	bf00      	nop
 801f44a:	e7c1      	b.n	801f3d0 <usb_receive_processing+0x134>
							__asm("nop");
 801f44c:	bf00      	nop
 801f44e:	e7c8      	b.n	801f3e2 <usb_receive_processing+0x146>
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801f450:	4e48      	ldr	r6, [pc, #288]	; (801f574 <usb_receive_processing+0x2d8>)
						EraseInitStruct.NbPages = 44; 
 801f452:	232c      	movs	r3, #44	; 0x2c
 801f454:	60f3      	str	r3, [r6, #12]
						EraseInitStruct.Banks = FLASH_BANK_2; 
 801f456:	2302      	movs	r3, #2
 801f458:	6073      	str	r3, [r6, #4]
						EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 801f45a:	6035      	str	r5, [r6, #0]
						EraseInitStruct.Page = 0;
 801f45c:	60b5      	str	r5, [r6, #8]
						HAL_FLASH_Unlock(); 
 801f45e:	f7e2 fea3 	bl	80021a8 <HAL_FLASH_Unlock>
						if(HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK) {
 801f462:	a901      	add	r1, sp, #4
 801f464:	4630      	mov	r0, r6
 801f466:	f7e2 ffb9 	bl	80023dc <HAL_FLASHEx_Erase>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801f46a:	4b43      	ldr	r3, [pc, #268]	; (801f578 <usb_receive_processing+0x2dc>)
 801f46c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801f470:	611a      	str	r2, [r3, #16]
						HAL_FLASH_Lock();
 801f472:	f7e2 feab 	bl	80021cc <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f476:	6025      	str	r5, [r4, #0]
 801f478:	6065      	str	r5, [r4, #4]
 801f47a:	60a5      	str	r5, [r4, #8]
					break;
 801f47c:	e736      	b.n	801f2ec <usb_receive_processing+0x50>
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801f47e:	7923      	ldrb	r3, [r4, #4]
 801f480:	78e2      	ldrb	r2, [r4, #3]
 801f482:	041b      	lsls	r3, r3, #16
 801f484:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801f488:	79a2      	ldrb	r2, [r4, #6]
 801f48a:	4313      	orrs	r3, r2
 801f48c:	7962      	ldrb	r2, [r4, #5]
 801f48e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 801f492:	4a3a      	ldr	r2, [pc, #232]	; (801f57c <usb_receive_processing+0x2e0>)
 801f494:	6013      	str	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801f496:	4b2b      	ldr	r3, [pc, #172]	; (801f544 <usb_receive_processing+0x2a8>)
						dataToSend[2] = 0x1A;
 801f498:	221a      	movs	r2, #26
						dataToSend[0] = 0xAB;
 801f49a:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801f49e:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x1A;
 801f4a2:	709a      	strb	r2, [r3, #2]
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f4a4:	6025      	str	r5, [r4, #0]
 801f4a6:	6065      	str	r5, [r4, #4]
 801f4a8:	60a5      	str	r5, [r4, #8]
 801f4aa:	e043      	b.n	801f534 <usb_receive_processing+0x298>
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801f4ac:	79e0      	ldrb	r0, [r4, #7]
 801f4ae:	f894 8008 	ldrb.w	r8, [r4, #8]
 801f4b2:	4e33      	ldr	r6, [pc, #204]	; (801f580 <usb_receive_processing+0x2e4>)
 801f4b4:	ea4f 4108 	mov.w	r1, r8, lsl #16
 801f4b8:	0603      	lsls	r3, r0, #24
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801f4ba:	f894 8009 	ldrb.w	r8, [r4, #9]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4be:	79a0      	ldrb	r0, [r4, #6]
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801f4c0:	462a      	mov	r2, r5
 801f4c2:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4c4:	2100      	movs	r1, #0
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801f4c6:	432a      	orrs	r2, r5
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4c8:	430b      	orrs	r3, r1
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801f4ca:	ea4f 2108 	mov.w	r1, r8, lsl #8
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801f4ce:	f894 8003 	ldrb.w	r8, [r4, #3]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4d2:	4302      	orrs	r2, r0
 801f4d4:	432a      	orrs	r2, r5
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801f4d6:	ea4f 6008 	mov.w	r0, r8, lsl #24
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4da:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801f4dc:	f894 8004 	ldrb.w	r8, [r4, #4]
																((uint64_t)dataToReceive[9]<<40)|((uint64_t)dataToReceive[10]<<32|\
 801f4e0:	7aa1      	ldrb	r1, [r4, #10]
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4e2:	432a      	orrs	r2, r5
 801f4e4:	430b      	orrs	r3, r1
 801f4e6:	4302      	orrs	r2, r0
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801f4e8:	2100      	movs	r1, #0
 801f4ea:	ea4f 4008 	mov.w	r0, r8, lsl #16
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4ee:	f894 8005 	ldrb.w	r8, [r4, #5]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801f4f2:	4d22      	ldr	r5, [pc, #136]	; (801f57c <usb_receive_processing+0x2e0>)
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4f4:	430b      	orrs	r3, r1
																(uint64_t)dataToReceive[3]<<24)|((uint64_t)dataToReceive[4]<<16)|\
 801f4f6:	2100      	movs	r1, #0
																((uint64_t)dataToReceive[5]<<8)|((uint64_t)dataToReceive[6]);
 801f4f8:	4302      	orrs	r2, r0
 801f4fa:	430b      	orrs	r3, r1
 801f4fc:	ea4f 2008 	mov.w	r0, r8, lsl #8
 801f500:	2100      	movs	r1, #0
 801f502:	4310      	orrs	r0, r2
 801f504:	4319      	orrs	r1, r3
						flash_data_write = ((uint64_t)dataToReceive[7]<<56)|((uint64_t)dataToReceive[8]<<48)|\
 801f506:	e9c6 0100 	strd	r0, r1, [r6]
						HAL_FLASH_Unlock();
 801f50a:	f7e2 fe4d 	bl	80021a8 <HAL_FLASH_Unlock>
						__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); 
 801f50e:	4b1a      	ldr	r3, [pc, #104]	; (801f578 <usb_receive_processing+0x2dc>)
 801f510:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801f514:	611a      	str	r2, [r3, #16]
							flash_ok = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, flash_address, flash_data_write);
 801f516:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f51a:	6829      	ldr	r1, [r5, #0]
 801f51c:	2000      	movs	r0, #0
 801f51e:	f7e2 fe9d 	bl	800225c <HAL_FLASH_Program>
						while(flash_ok != HAL_OK){
 801f522:	4604      	mov	r4, r0
 801f524:	2800      	cmp	r0, #0
 801f526:	d1f6      	bne.n	801f516 <usb_receive_processing+0x27a>
						HAL_FLASH_Lock();
 801f528:	f7e2 fe50 	bl	80021cc <HAL_FLASH_Lock>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f52c:	4b03      	ldr	r3, [pc, #12]	; (801f53c <usb_receive_processing+0x2a0>)
 801f52e:	601c      	str	r4, [r3, #0]
 801f530:	605c      	str	r4, [r3, #4]
 801f532:	609c      	str	r4, [r3, #8]
						HAL_Delay(2);
 801f534:	2002      	movs	r0, #2
 801f536:	f7e1 fd71 	bl	800101c <HAL_Delay>
					break;
 801f53a:	e6d7      	b.n	801f2ec <usb_receive_processing+0x50>
 801f53c:	2008a7ec 	.word	0x2008a7ec
 801f540:	2008b865 	.word	0x2008b865
 801f544:	2008a7f8 	.word	0x2008a7f8
 801f548:	2008b852 	.word	0x2008b852
 801f54c:	080312b8 	.word	0x080312b8
 801f550:	20090e94 	.word	0x20090e94
 801f554:	20006fd8 	.word	0x20006fd8
 801f558:	48000800 	.word	0x48000800
 801f55c:	20000a4b 	.word	0x20000a4b
 801f560:	48001400 	.word	0x48001400
 801f564:	20000a4a 	.word	0x20000a4a
 801f568:	200909e4 	.word	0x200909e4
 801f56c:	20000a48 	.word	0x20000a48
 801f570:	20090f28 	.word	0x20090f28
 801f574:	20090c64 	.word	0x20090c64
 801f578:	40022000 	.word	0x40022000
 801f57c:	20090d0c 	.word	0x20090d0c
 801f580:	20090d00 	.word	0x20090d00
						flash_address = ((uint32_t)dataToReceive[3]<<24)|((uint32_t)dataToReceive[4]<<16)|((uint32_t)dataToReceive[5]<<8)|((uint32_t)dataToReceive[6]);
 801f584:	7920      	ldrb	r0, [r4, #4]
 801f586:	78e3      	ldrb	r3, [r4, #3]
 801f588:	0400      	lsls	r0, r0, #16
 801f58a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 801f58e:	79a3      	ldrb	r3, [r4, #6]
 801f590:	4318      	orrs	r0, r3
 801f592:	7963      	ldrb	r3, [r4, #5]
 801f594:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 801f598:	4b23      	ldr	r3, [pc, #140]	; (801f628 <usb_receive_processing+0x38c>)
 801f59a:	6018      	str	r0, [r3, #0]
						flash_data_read = flash_data_read_buff(flash_address);
 801f59c:	f7ec fc17 	bl	800bdce <flash_data_read_buff>
 801f5a0:	4b22      	ldr	r3, [pc, #136]	; (801f62c <usb_receive_processing+0x390>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801f5a2:	4a23      	ldr	r2, [pc, #140]	; (801f630 <usb_receive_processing+0x394>)
						flash_data_read = flash_data_read_buff(flash_address);
 801f5a4:	e9c3 0100 	strd	r0, r1, [r3]
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801f5a8:	cb03      	ldmia	r3!, {r0, r1}
 801f5aa:	6051      	str	r1, [r2, #4]
						dataToSend[0] = 0xAB;
 801f5ac:	4921      	ldr	r1, [pc, #132]	; (801f634 <usb_receive_processing+0x398>)
						memcpy(flash_data_read_SND, &flash_data_read, sizeof(uint64_t));
 801f5ae:	6010      	str	r0, [r2, #0]
						dataToSend[2] = 0x1C;
 801f5b0:	231c      	movs	r3, #28
 801f5b2:	708b      	strb	r3, [r1, #2]
						dataToSend[7] = flash_data_read_SND[7];
 801f5b4:	79d3      	ldrb	r3, [r2, #7]
 801f5b6:	71cb      	strb	r3, [r1, #7]
						dataToSend[8] = flash_data_read_SND[6];
 801f5b8:	7993      	ldrb	r3, [r2, #6]
 801f5ba:	720b      	strb	r3, [r1, #8]
						dataToSend[9] = flash_data_read_SND[5];
 801f5bc:	7953      	ldrb	r3, [r2, #5]
 801f5be:	724b      	strb	r3, [r1, #9]
						dataToSend[10]= flash_data_read_SND[4];
 801f5c0:	7913      	ldrb	r3, [r2, #4]
 801f5c2:	728b      	strb	r3, [r1, #10]
						dataToSend[3] = flash_data_read_SND[3];
 801f5c4:	78d3      	ldrb	r3, [r2, #3]
 801f5c6:	70cb      	strb	r3, [r1, #3]
						dataToSend[4] = flash_data_read_SND[2];
 801f5c8:	7893      	ldrb	r3, [r2, #2]
 801f5ca:	710b      	strb	r3, [r1, #4]
						dataToSend[5] = flash_data_read_SND[1];
 801f5cc:	7853      	ldrb	r3, [r2, #1]
 801f5ce:	714b      	strb	r3, [r1, #5]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f5d0:	4819      	ldr	r0, [pc, #100]	; (801f638 <usb_receive_processing+0x39c>)
						dataToSend[6]	= flash_data_read_SND[0];
 801f5d2:	7813      	ldrb	r3, [r2, #0]
						dataToSend[0] = 0xAB;
 801f5d4:	f881 9000 	strb.w	r9, [r1]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f5d8:	2240      	movs	r2, #64	; 0x40
						dataToSend[1] = 0x12;
 801f5da:	f881 8001 	strb.w	r8, [r1, #1]
						dataToSend[6]	= flash_data_read_SND[0];
 801f5de:	718b      	strb	r3, [r1, #6]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f5e0:	f7e8 fd54 	bl	800808c <USBD_CUSTOM_HID_SendReport>
 801f5e4:	e75e      	b.n	801f4a4 <usb_receive_processing+0x208>
						if(CRC_STATUS == CRC_OK){
 801f5e6:	4a15      	ldr	r2, [pc, #84]	; (801f63c <usb_receive_processing+0x3a0>)
						dataToSend[0] = 0xAB;
 801f5e8:	4b12      	ldr	r3, [pc, #72]	; (801f634 <usb_receive_processing+0x398>)
						if(CRC_STATUS == CRC_OK){
 801f5ea:	7812      	ldrb	r2, [r2, #0]
						dataToSend[0] = 0xAB;
 801f5ec:	f883 9000 	strb.w	r9, [r3]
						dataToSend[1] = 0x12;
 801f5f0:	f883 8001 	strb.w	r8, [r3, #1]
						dataToSend[2] = 0x66;
 801f5f4:	709f      	strb	r7, [r3, #2]
						if(CRC_STATUS == CRC_OK){
 801f5f6:	b95a      	cbnz	r2, 801f610 <usb_receive_processing+0x374>
							dataToSend[3] = 0x01;
 801f5f8:	2201      	movs	r2, #1
 801f5fa:	70da      	strb	r2, [r3, #3]
						USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, dataToSend, 64);
 801f5fc:	2240      	movs	r2, #64	; 0x40
 801f5fe:	490d      	ldr	r1, [pc, #52]	; (801f634 <usb_receive_processing+0x398>)
 801f600:	480d      	ldr	r0, [pc, #52]	; (801f638 <usb_receive_processing+0x39c>)
 801f602:	f7e8 fd43 	bl	800808c <USBD_CUSTOM_HID_SendReport>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f606:	2300      	movs	r3, #0
 801f608:	6033      	str	r3, [r6, #0]
 801f60a:	6073      	str	r3, [r6, #4]
 801f60c:	60b3      	str	r3, [r6, #8]
 801f60e:	e791      	b.n	801f534 <usb_receive_processing+0x298>
							dataToSend[3] = 0x00;
 801f610:	70dd      	strb	r5, [r3, #3]
 801f612:	e7f3      	b.n	801f5fc <usb_receive_processing+0x360>
						send_usb_block = 1;
 801f614:	4e0a      	ldr	r6, [pc, #40]	; (801f640 <usb_receive_processing+0x3a4>)
 801f616:	2301      	movs	r3, #1
 801f618:	7033      	strb	r3, [r6, #0]
						packet_generator_Calculated_data_send();
 801f61a:	f7ff fd15 	bl	801f048 <packet_generator_Calculated_data_send>
						memset(dataToReceive, 0, sizeof(dataToReceive));
 801f61e:	6025      	str	r5, [r4, #0]
 801f620:	6065      	str	r5, [r4, #4]
 801f622:	60a5      	str	r5, [r4, #8]
						send_usb_block = 0;
 801f624:	7035      	strb	r5, [r6, #0]
					break;
 801f626:	e661      	b.n	801f2ec <usb_receive_processing+0x50>
 801f628:	20090d0c 	.word	0x20090d0c
 801f62c:	20090a28 	.word	0x20090a28
 801f630:	2008b853 	.word	0x2008b853
 801f634:	2008a7f8 	.word	0x2008a7f8
 801f638:	20090f28 	.word	0x20090f28
 801f63c:	20090942 	.word	0x20090942
 801f640:	2008b865 	.word	0x2008b865

0801f644 <auto_exposure>:
{ 
 801f644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f646:	4d45      	ldr	r5, [pc, #276]	; (801f75c <auto_exposure+0x118>)
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801f648:	4c45      	ldr	r4, [pc, #276]	; (801f760 <auto_exposure+0x11c>)
 801f64a:	882b      	ldrh	r3, [r5, #0]
{ 
 801f64c:	2200      	movs	r2, #0
	for (uint16_t i = 5; i<1024; i++){
 801f64e:	f240 71f6 	movw	r1, #2038	; 0x7f6
		max_el = Line_buff[i] > max_el ? Line_buff[i] : max_el;
 801f652:	18a0      	adds	r0, r4, r2
 801f654:	3202      	adds	r2, #2
 801f656:	8940      	ldrh	r0, [r0, #10]
 801f658:	4283      	cmp	r3, r0
 801f65a:	bf38      	it	cc
 801f65c:	4603      	movcc	r3, r0
	for (uint16_t i = 5; i<1024; i++){
 801f65e:	428a      	cmp	r2, r1
 801f660:	d1f7      	bne.n	801f652 <auto_exposure+0xe>
	if(max_el < 20000 && exp_num != 9)
 801f662:	f644 621f 	movw	r2, #19999	; 0x4e1f
 801f666:	4293      	cmp	r3, r2
 801f668:	802b      	strh	r3, [r5, #0]
 801f66a:	4c3e      	ldr	r4, [pc, #248]	; (801f764 <auto_exposure+0x120>)
 801f66c:	d840      	bhi.n	801f6f0 <auto_exposure+0xac>
 801f66e:	7823      	ldrb	r3, [r4, #0]
 801f670:	2b09      	cmp	r3, #9
 801f672:	d027      	beq.n	801f6c4 <auto_exposure+0x80>
		highSignal = 0;
 801f674:	4a3c      	ldr	r2, [pc, #240]	; (801f768 <auto_exposure+0x124>)
		send_usb_block =1;
 801f676:	4f3d      	ldr	r7, [pc, #244]	; (801f76c <auto_exposure+0x128>)
		highSignal = 0;
 801f678:	2300      	movs	r3, #0
 801f67a:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801f67c:	4a3c      	ldr	r2, [pc, #240]	; (801f770 <auto_exposure+0x12c>)
 801f67e:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801f680:	2301      	movs	r3, #1
 801f682:	703b      	strb	r3, [r7, #0]
		exp_num++;
 801f684:	7823      	ldrb	r3, [r4, #0]
 801f686:	3301      	adds	r3, #1
		exp_num--;
 801f688:	b2db      	uxtb	r3, r3
 801f68a:	7023      	strb	r3, [r4, #0]
		htim2.Init.Period = exposure_timer_period[exp_num];
 801f68c:	7822      	ldrb	r2, [r4, #0]
 801f68e:	4b39      	ldr	r3, [pc, #228]	; (801f774 <auto_exposure+0x130>)
 801f690:	4e39      	ldr	r6, [pc, #228]	; (801f778 <auto_exposure+0x134>)
 801f692:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f696:	4b39      	ldr	r3, [pc, #228]	; (801f77c <auto_exposure+0x138>)
 801f698:	60da      	str	r2, [r3, #12]
		MX_TIM2_Init();
 801f69a:	f7ff fa2b 	bl	801eaf4 <MX_TIM2_Init>
		Calibration_Exposure_Change(exp_num);
 801f69e:	7820      	ldrb	r0, [r4, #0]
 801f6a0:	f7ef fb04 	bl	800ecac <Calibration_Exposure_Change>
		if(Mode_EL == 0){
 801f6a4:	4b36      	ldr	r3, [pc, #216]	; (801f780 <auto_exposure+0x13c>)
 801f6a6:	781a      	ldrb	r2, [r3, #0]
 801f6a8:	4b36      	ldr	r3, [pc, #216]	; (801f784 <auto_exposure+0x140>)
 801f6aa:	2a00      	cmp	r2, #0
 801f6ac:	d132      	bne.n	801f714 <auto_exposure+0xd0>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 801f6ae:	4a36      	ldr	r2, [pc, #216]	; (801f788 <auto_exposure+0x144>)
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f6b0:	ed93 0a00 	vldr	s0, [r3]
 801f6b4:	edd2 0a00 	vldr	s1, [r2]
 801f6b8:	f7fc fafa 	bl	801bcb0 <Rabs_calc_Factor2_Settings_change>
		send_usb_block =0;
 801f6bc:	2300      	movs	r3, #0
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f6be:	ed86 0a00 	vstr	s0, [r6]
		send_usb_block =0;
 801f6c2:	703b      	strb	r3, [r7, #0]
	if(old_exp_num!=exp_num ){exp_set = 1; }else{exp_set = 0;}
 801f6c4:	4b31      	ldr	r3, [pc, #196]	; (801f78c <auto_exposure+0x148>)
 801f6c6:	7822      	ldrb	r2, [r4, #0]
 801f6c8:	7819      	ldrb	r1, [r3, #0]
 801f6ca:	4291      	cmp	r1, r2
 801f6cc:	4a30      	ldr	r2, [pc, #192]	; (801f790 <auto_exposure+0x14c>)
 801f6ce:	bf14      	ite	ne
 801f6d0:	2101      	movne	r1, #1
 801f6d2:	2100      	moveq	r1, #0
 801f6d4:	7011      	strb	r1, [r2, #0]
	old_exp_num = exp_num;
 801f6d6:	7822      	ldrb	r2, [r4, #0]
 801f6d8:	701a      	strb	r2, [r3, #0]
	if(exp_num ==0 && max_el >=50000)
 801f6da:	7823      	ldrb	r3, [r4, #0]
 801f6dc:	b9e3      	cbnz	r3, 801f718 <auto_exposure+0xd4>
 801f6de:	882a      	ldrh	r2, [r5, #0]
 801f6e0:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801f6e4:	429a      	cmp	r2, r3
 801f6e6:	d917      	bls.n	801f718 <auto_exposure+0xd4>
		highSignal = 1;
 801f6e8:	2201      	movs	r2, #1
			highSignal = 0;
 801f6ea:	4b1f      	ldr	r3, [pc, #124]	; (801f768 <auto_exposure+0x124>)
			lowSignal = 0;
 801f6ec:	701a      	strb	r2, [r3, #0]
 801f6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if(max_el > 45000 && exp_num != 0)
 801f6f0:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 801f6f4:	4293      	cmp	r3, r2
 801f6f6:	d9e5      	bls.n	801f6c4 <auto_exposure+0x80>
 801f6f8:	7823      	ldrb	r3, [r4, #0]
 801f6fa:	2b00      	cmp	r3, #0
 801f6fc:	d0e2      	beq.n	801f6c4 <auto_exposure+0x80>
		highSignal = 0;
 801f6fe:	4a1a      	ldr	r2, [pc, #104]	; (801f768 <auto_exposure+0x124>)
		send_usb_block =1;
 801f700:	4f1a      	ldr	r7, [pc, #104]	; (801f76c <auto_exposure+0x128>)
		highSignal = 0;
 801f702:	2300      	movs	r3, #0
 801f704:	7013      	strb	r3, [r2, #0]
		lowSignal = 0;
 801f706:	4a1a      	ldr	r2, [pc, #104]	; (801f770 <auto_exposure+0x12c>)
 801f708:	7013      	strb	r3, [r2, #0]
		send_usb_block =1;
 801f70a:	2301      	movs	r3, #1
 801f70c:	703b      	strb	r3, [r7, #0]
		exp_num--;
 801f70e:	7823      	ldrb	r3, [r4, #0]
 801f710:	3b01      	subs	r3, #1
 801f712:	e7b9      	b.n	801f688 <auto_exposure+0x44>
			Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 801f714:	4a1f      	ldr	r2, [pc, #124]	; (801f794 <auto_exposure+0x150>)
 801f716:	e7cb      	b.n	801f6b0 <auto_exposure+0x6c>
	} else if((exp_num ==0 && max_el < 50000))
 801f718:	7823      	ldrb	r3, [r4, #0]
 801f71a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801f71e:	b923      	cbnz	r3, 801f72a <auto_exposure+0xe6>
 801f720:	8829      	ldrh	r1, [r5, #0]
 801f722:	f24c 334f 	movw	r3, #49999	; 0xc34f
 801f726:	4299      	cmp	r1, r3
 801f728:	d9df      	bls.n	801f6ea <auto_exposure+0xa6>
	} else if((exp_num ==9 && max_el < DarkSignal+2000)) //20000
 801f72a:	7823      	ldrb	r3, [r4, #0]
 801f72c:	2b09      	cmp	r3, #9
 801f72e:	d109      	bne.n	801f744 <auto_exposure+0x100>
 801f730:	4b19      	ldr	r3, [pc, #100]	; (801f798 <auto_exposure+0x154>)
 801f732:	882a      	ldrh	r2, [r5, #0]
 801f734:	881b      	ldrh	r3, [r3, #0]
 801f736:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 801f73a:	4293      	cmp	r3, r2
 801f73c:	db02      	blt.n	801f744 <auto_exposure+0x100>
			lowSignal = 1;
 801f73e:	2201      	movs	r2, #1
			lowSignal = 0;
 801f740:	4b0b      	ldr	r3, [pc, #44]	; (801f770 <auto_exposure+0x12c>)
 801f742:	e7d3      	b.n	801f6ec <auto_exposure+0xa8>
	}else if((exp_num ==9 && max_el > DarkSignal+2000))
 801f744:	7823      	ldrb	r3, [r4, #0]
 801f746:	2b09      	cmp	r3, #9
 801f748:	d1d1      	bne.n	801f6ee <auto_exposure+0xaa>
 801f74a:	4b13      	ldr	r3, [pc, #76]	; (801f798 <auto_exposure+0x154>)
 801f74c:	882a      	ldrh	r2, [r5, #0]
 801f74e:	881b      	ldrh	r3, [r3, #0]
 801f750:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801f754:	429a      	cmp	r2, r3
 801f756:	ddca      	ble.n	801f6ee <auto_exposure+0xaa>
			lowSignal = 0;
 801f758:	2200      	movs	r2, #0
 801f75a:	e7f1      	b.n	801f740 <auto_exposure+0xfc>
 801f75c:	2008b860 	.word	0x2008b860
 801f760:	200097dc 	.word	0x200097dc
 801f764:	2008b852 	.word	0x2008b852
 801f768:	2008b85b 	.word	0x2008b85b
 801f76c:	2008b865 	.word	0x2008b865
 801f770:	2008b85e 	.word	0x2008b85e
 801f774:	080312b8 	.word	0x080312b8
 801f778:	20004fd4 	.word	0x20004fd4
 801f77c:	20090e94 	.word	0x20090e94
 801f780:	20000a48 	.word	0x20000a48
 801f784:	20004fcc 	.word	0x20004fcc
 801f788:	20004fc8 	.word	0x20004fc8
 801f78c:	2008b862 	.word	0x2008b862
 801f790:	20000a4c 	.word	0x20000a4c
 801f794:	20004fc4 	.word	0x20004fc4
 801f798:	20004fc2 	.word	0x20004fc2

0801f79c <TIM2_IRQHandler>:
{
 801f79c:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 801f79e:	4d0d      	ldr	r5, [pc, #52]	; (801f7d4 <TIM2_IRQHandler+0x38>)
 801f7a0:	2200      	movs	r2, #0
 801f7a2:	2110      	movs	r1, #16
 801f7a4:	4628      	mov	r0, r5
 801f7a6:	f7e3 f803 	bl	80027b0 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 801f7aa:	200a      	movs	r0, #10
 801f7ac:	f7ff f9ea 	bl	801eb84 <DWT_Delay>
	i = 0;
 801f7b0:	4b09      	ldr	r3, [pc, #36]	; (801f7d8 <TIM2_IRQHandler+0x3c>)
 801f7b2:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801f7b4:	4628      	mov	r0, r5
 801f7b6:	2201      	movs	r2, #1
 801f7b8:	2110      	movs	r1, #16
	i = 0;
 801f7ba:	801c      	strh	r4, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);
 801f7bc:	f7e2 fff8 	bl	80027b0 <HAL_GPIO_WritePin>
  cnt_delay_bar = 0;
 801f7c0:	4b06      	ldr	r3, [pc, #24]	; (801f7dc <TIM2_IRQHandler+0x40>)
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801f7c2:	201c      	movs	r0, #28
  cnt_delay_bar = 0;
 801f7c4:	801c      	strh	r4, [r3, #0]
	HAL_NVIC_ClearPendingIRQ(TIM2_IRQn);
 801f7c6:	f7e2 f947 	bl	8001a58 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim2);
 801f7ca:	4805      	ldr	r0, [pc, #20]	; (801f7e0 <TIM2_IRQHandler+0x44>)
}																					//	7.812ms	15.625ms	31.25ms	62.5ms	125ms	250ms	500ms	1s			2s			4s
 801f7cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_TIM_IRQHandler(&htim2);
 801f7d0:	f7e6 bb3b 	b.w	8005e4a <HAL_TIM_IRQHandler>
 801f7d4:	48000800 	.word	0x48000800
 801f7d8:	2008b85c 	.word	0x2008b85c
 801f7dc:	2008a7b0 	.word	0x2008a7b0
 801f7e0:	20090e94 	.word	0x20090e94

0801f7e4 <TIM6_DAC_IRQHandler>:
{
 801f7e4:	b508      	push	{r3, lr}
	pause_button = 0;
 801f7e6:	4b06      	ldr	r3, [pc, #24]	; (801f800 <TIM6_DAC_IRQHandler+0x1c>)
 801f7e8:	2200      	movs	r2, #0
 801f7ea:	701a      	strb	r2, [r3, #0]
	Get_Battery_Level();
 801f7ec:	f7ff fb14 	bl	801ee18 <Get_Battery_Level>
	HAL_NVIC_ClearPendingIRQ(TIM6_DAC_IRQn);
 801f7f0:	2036      	movs	r0, #54	; 0x36
 801f7f2:	f7e2 f931 	bl	8001a58 <HAL_NVIC_ClearPendingIRQ>
  HAL_TIM_IRQHandler(&htim6);
 801f7f6:	4803      	ldr	r0, [pc, #12]	; (801f804 <TIM6_DAC_IRQHandler+0x20>)
}
 801f7f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 801f7fc:	f7e6 bb25 	b.w	8005e4a <HAL_TIM_IRQHandler>
 801f800:	2008b863 	.word	0x2008b863
 801f804:	20090d14 	.word	0x20090d14

0801f808 <TIM7_IRQHandler>:
{
 801f808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801f80a:	4b48      	ldr	r3, [pc, #288]	; (801f92c <TIM7_IRQHandler+0x124>)
 801f80c:	781b      	ldrb	r3, [r3, #0]
	if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen||
 801f80e:	3b01      	subs	r3, #1
 801f810:	2b04      	cmp	r3, #4
 801f812:	d81e      	bhi.n	801f852 <TIM7_IRQHandler+0x4a>
			GUI_screen_state == Graph_Screen || GUI_screen_state == Color_Screen) && !pause &&  !flag_spectral) 
 801f814:	4b46      	ldr	r3, [pc, #280]	; (801f930 <TIM7_IRQHandler+0x128>)
 801f816:	781b      	ldrb	r3, [r3, #0]
 801f818:	b9db      	cbnz	r3, 801f852 <TIM7_IRQHandler+0x4a>
 801f81a:	4b46      	ldr	r3, [pc, #280]	; (801f934 <TIM7_IRQHandler+0x12c>)
 801f81c:	781b      	ldrb	r3, [r3, #0]
 801f81e:	b9c3      	cbnz	r3, 801f852 <TIM7_IRQHandler+0x4a>
			cnt_delay_bar++;
 801f820:	4a45      	ldr	r2, [pc, #276]	; (801f938 <TIM7_IRQHandler+0x130>)
			if(exp_num > 4){
 801f822:	4946      	ldr	r1, [pc, #280]	; (801f93c <TIM7_IRQHandler+0x134>)
			cnt_delay_bar++;
 801f824:	8813      	ldrh	r3, [r2, #0]
 801f826:	3301      	adds	r3, #1
 801f828:	b29b      	uxth	r3, r3
 801f82a:	8013      	strh	r3, [r2, #0]
			if(exp_num > 4){
 801f82c:	780a      	ldrb	r2, [r1, #0]
 801f82e:	2a04      	cmp	r2, #4
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801f830:	780a      	ldrb	r2, [r1, #0]
			if(exp_num > 4){
 801f832:	d96b      	bls.n	801f90c <TIM7_IRQHandler+0x104>
				if(cnt_delay_bar == ((exposure_timer_period[exp_num]/12)/500))
 801f834:	4842      	ldr	r0, [pc, #264]	; (801f940 <TIM7_IRQHandler+0x138>)
 801f836:	f241 7670 	movw	r6, #6000	; 0x1770
 801f83a:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801f83e:	fbb2 f2f6 	udiv	r2, r2, r6
 801f842:	4293      	cmp	r3, r2
 801f844:	d12b      	bne.n	801f89e <TIM7_IRQHandler+0x96>
						GUI_Bar_Measure(85, 13, 0.2);
 801f846:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 801f944 <TIM7_IRQHandler+0x13c>
						GUI_Bar_Measure(85, 13, 0.6);
 801f84a:	210d      	movs	r1, #13
 801f84c:	2055      	movs	r0, #85	; 0x55
 801f84e:	f7f5 ff1d 	bl	801568c <GUI_Bar_Measure>
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801f852:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801f856:	483c      	ldr	r0, [pc, #240]	; (801f948 <TIM7_IRQHandler+0x140>)
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801f858:	4c3c      	ldr	r4, [pc, #240]	; (801f94c <TIM7_IRQHandler+0x144>)
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801f85a:	4d3d      	ldr	r5, [pc, #244]	; (801f950 <TIM7_IRQHandler+0x148>)
 801f85c:	f7e2 ffa2 	bl	80027a4 <HAL_GPIO_ReadPin>
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801f860:	7823      	ldrb	r3, [r4, #0]
	SD_Detect = HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15);
 801f862:	7028      	strb	r0, [r5, #0]
	if(old_sd_detect != SD_Detect & CRC_STATUS == CRC_OK){
 801f864:	4283      	cmp	r3, r0
 801f866:	d012      	beq.n	801f88e <TIM7_IRQHandler+0x86>
 801f868:	4b3a      	ldr	r3, [pc, #232]	; (801f954 <TIM7_IRQHandler+0x14c>)
 801f86a:	781b      	ldrb	r3, [r3, #0]
 801f86c:	b97b      	cbnz	r3, 801f88e <TIM7_IRQHandler+0x86>
		GUI_Button_SD_Card(55, 426, !SD_Detect);
 801f86e:	fab0 f280 	clz	r2, r0
 801f872:	0952      	lsrs	r2, r2, #5
 801f874:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801f878:	2037      	movs	r0, #55	; 0x37
 801f87a:	f7f5 f981 	bl	8014b80 <GUI_Button_SD_Card>
		old_sd_detect = SD_Detect;
 801f87e:	782b      	ldrb	r3, [r5, #0]
 801f880:	7023      	strb	r3, [r4, #0]
		if(SD_Detect == 0){
 801f882:	2b00      	cmp	r3, #0
 801f884:	d14b      	bne.n	801f91e <TIM7_IRQHandler+0x116>
				MX_SDMMC1_SD_Init();
 801f886:	f7ff f923 	bl	801ead0 <MX_SDMMC1_SD_Init>
				MX_FATFS_Init();
 801f88a:	f7fe faef 	bl	801de6c <MX_FATFS_Init>
	HAL_NVIC_ClearPendingIRQ(TIM7_IRQn);
 801f88e:	2037      	movs	r0, #55	; 0x37
 801f890:	f7e2 f8e2 	bl	8001a58 <HAL_NVIC_ClearPendingIRQ>
	HAL_TIM_IRQHandler(&htim7);
 801f894:	4830      	ldr	r0, [pc, #192]	; (801f958 <TIM7_IRQHandler+0x150>)
}
 801f896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_TIM_IRQHandler(&htim7);
 801f89a:	f7e6 bad6 	b.w	8005e4a <HAL_TIM_IRQHandler>
				else if (cnt_delay_bar == 2*(exposure_timer_period[exp_num]/12)/500)
 801f89e:	780a      	ldrb	r2, [r1, #0]
 801f8a0:	270c      	movs	r7, #12
 801f8a2:	f830 5012 	ldrh.w	r5, [r0, r2, lsl #1]
 801f8a6:	fbb5 f5f7 	udiv	r5, r5, r7
 801f8aa:	22fa      	movs	r2, #250	; 0xfa
 801f8ac:	fb95 f5f2 	sdiv	r5, r5, r2
 801f8b0:	42ab      	cmp	r3, r5
 801f8b2:	d102      	bne.n	801f8ba <TIM7_IRQHandler+0xb2>
						GUI_Bar_Measure(85, 13, 0.4);
 801f8b4:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801f95c <TIM7_IRQHandler+0x154>
 801f8b8:	e7c7      	b.n	801f84a <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 3*(exposure_timer_period[exp_num]/12)/500)
 801f8ba:	780a      	ldrb	r2, [r1, #0]
 801f8bc:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 801f8c0:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801f8c4:	fbb2 f2f7 	udiv	r2, r2, r7
 801f8c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f8cc:	fb92 f2f4 	sdiv	r2, r2, r4
 801f8d0:	4293      	cmp	r3, r2
 801f8d2:	d102      	bne.n	801f8da <TIM7_IRQHandler+0xd2>
						GUI_Bar_Measure(85, 13, 0.6);
 801f8d4:	ed9f 0a22 	vldr	s0, [pc, #136]	; 801f960 <TIM7_IRQHandler+0x158>
 801f8d8:	e7b7      	b.n	801f84a <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 4*(exposure_timer_period[exp_num]/12)/500)
 801f8da:	780a      	ldrb	r2, [r1, #0]
 801f8dc:	f830 4012 	ldrh.w	r4, [r0, r2, lsl #1]
 801f8e0:	fbb4 f4f7 	udiv	r4, r4, r7
 801f8e4:	227d      	movs	r2, #125	; 0x7d
 801f8e6:	fb94 f4f2 	sdiv	r4, r4, r2
 801f8ea:	42a3      	cmp	r3, r4
 801f8ec:	d102      	bne.n	801f8f4 <TIM7_IRQHandler+0xec>
						GUI_Bar_Measure(85, 13, 0.8);
 801f8ee:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801f964 <TIM7_IRQHandler+0x15c>
 801f8f2:	e7aa      	b.n	801f84a <TIM7_IRQHandler+0x42>
					else if (cnt_delay_bar == 5*((exposure_timer_period[exp_num]/12)/500))
 801f8f4:	780a      	ldrb	r2, [r1, #0]
 801f8f6:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 801f8fa:	fbb2 f2f6 	udiv	r2, r2, r6
 801f8fe:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801f902:	4293      	cmp	r3, r2
 801f904:	d1a5      	bne.n	801f852 <TIM7_IRQHandler+0x4a>
						GUI_Bar_Measure(85, 13, 1);
 801f906:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801f90a:	e79e      	b.n	801f84a <TIM7_IRQHandler+0x42>
				} else if(exp_num > 2)
 801f90c:	2a02      	cmp	r2, #2
 801f90e:	d9fa      	bls.n	801f906 <TIM7_IRQHandler+0xfe>
							if(cnt_delay_bar == 1){
 801f910:	2b01      	cmp	r3, #1
 801f912:	d102      	bne.n	801f91a <TIM7_IRQHandler+0x112>
								GUI_Bar_Measure(85, 13, 0.5);
 801f914:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 801f918:	e797      	b.n	801f84a <TIM7_IRQHandler+0x42>
							} else if(cnt_delay_bar == 2){
 801f91a:	2b02      	cmp	r3, #2
 801f91c:	e7f2      	b.n	801f904 <TIM7_IRQHandler+0xfc>
			FATFS_UnLinkDriver(SDPath);
 801f91e:	4812      	ldr	r0, [pc, #72]	; (801f968 <TIM7_IRQHandler+0x160>)
 801f920:	f7ea f90c 	bl	8009b3c <FATFS_UnLinkDriver>
				HAL_SD_DeInit(&hsd1);
 801f924:	4811      	ldr	r0, [pc, #68]	; (801f96c <TIM7_IRQHandler+0x164>)
 801f926:	f7e5 fa91 	bl	8004e4c <HAL_SD_DeInit>
 801f92a:	e7b0      	b.n	801f88e <TIM7_IRQHandler+0x86>
 801f92c:	20004c71 	.word	0x20004c71
 801f930:	20004c98 	.word	0x20004c98
 801f934:	20004f97 	.word	0x20004f97
 801f938:	2008a7b0 	.word	0x2008a7b0
 801f93c:	2008b852 	.word	0x2008b852
 801f940:	080312b8 	.word	0x080312b8
 801f944:	3e4ccccd 	.word	0x3e4ccccd
 801f948:	48000800 	.word	0x48000800
 801f94c:	20000a4e 	.word	0x20000a4e
 801f950:	20090e90 	.word	0x20090e90
 801f954:	20090942 	.word	0x20090942
 801f958:	20090ee0 	.word	0x20090ee0
 801f95c:	3ecccccd 	.word	0x3ecccccd
 801f960:	3f19999a 	.word	0x3f19999a
 801f964:	3f4ccccd 	.word	0x3f4ccccd
 801f968:	2008e8b5 	.word	0x2008e8b5
 801f96c:	20090a38 	.word	0x20090a38

0801f970 <EXTI9_5_IRQHandler>:
{
 801f970:	b513      	push	{r0, r1, r4, lr}
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801f972:	4c22      	ldr	r4, [pc, #136]	; (801f9fc <EXTI9_5_IRQHandler+0x8c>)
	DWT_Delay(1);
 801f974:	2001      	movs	r0, #1
 801f976:	f7ff f905 	bl	801eb84 <DWT_Delay>
  HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)&RxBuf, (uint8_t*)&RxBuf, 2, 0);
 801f97a:	2300      	movs	r3, #0
 801f97c:	4622      	mov	r2, r4
 801f97e:	4621      	mov	r1, r4
 801f980:	9300      	str	r3, [sp, #0]
 801f982:	481f      	ldr	r0, [pc, #124]	; (801fa00 <EXTI9_5_IRQHandler+0x90>)
 801f984:	2302      	movs	r3, #2
 801f986:	f7e5 fff0 	bl	800596a <HAL_SPI_TransmitReceive>
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801f98a:	7823      	ldrb	r3, [r4, #0]
 801f98c:	7862      	ldrb	r2, [r4, #1]
 801f98e:	4c1d      	ldr	r4, [pc, #116]	; (801fa04 <EXTI9_5_IRQHandler+0x94>)
 801f990:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
		Line[i] = Line[i-1]; 
 801f994:	8821      	ldrh	r1, [r4, #0]
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801f996:	f64c 73fe 	movw	r3, #53246	; 0xcffe
 801f99a:	429a      	cmp	r2, r3
		Line[i] = Line[i-1]; 
 801f99c:	b289      	uxth	r1, r1
 801f99e:	4b1a      	ldr	r3, [pc, #104]	; (801fa08 <EXTI9_5_IRQHandler+0x98>)
	if((RxBuf[0] << 8 | RxBuf[1])>=0xCFFF)
 801f9a0:	dd05      	ble.n	801f9ae <EXTI9_5_IRQHandler+0x3e>
		Line[i] = Line[i-1]; 
 801f9a2:	8822      	ldrh	r2, [r4, #0]
 801f9a4:	b292      	uxth	r2, r2
 801f9a6:	3a01      	subs	r2, #1
 801f9a8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801f9ac:	e002      	b.n	801f9b4 <EXTI9_5_IRQHandler+0x44>
	} else if((RxBuf[0] << 8 | RxBuf[1])<=0x0EFF)
 801f9ae:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 801f9b2:	dbf6      	blt.n	801f9a2 <EXTI9_5_IRQHandler+0x32>
		Line[i] = RxBuf[0] << 8 | RxBuf[1];
 801f9b4:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	if(i >= 1023)
 801f9b8:	8823      	ldrh	r3, [r4, #0]
 801f9ba:	f240 32fe 	movw	r2, #1022	; 0x3fe
 801f9be:	b29b      	uxth	r3, r3
 801f9c0:	4293      	cmp	r3, r2
 801f9c2:	d916      	bls.n	801f9f2 <EXTI9_5_IRQHandler+0x82>
		if(send_usb_block == 0 && (!pause))
 801f9c4:	4b11      	ldr	r3, [pc, #68]	; (801fa0c <EXTI9_5_IRQHandler+0x9c>)
 801f9c6:	781b      	ldrb	r3, [r3, #0]
 801f9c8:	b943      	cbnz	r3, 801f9dc <EXTI9_5_IRQHandler+0x6c>
 801f9ca:	4b11      	ldr	r3, [pc, #68]	; (801fa10 <EXTI9_5_IRQHandler+0xa0>)
 801f9cc:	781b      	ldrb	r3, [r3, #0]
 801f9ce:	b92b      	cbnz	r3, 801f9dc <EXTI9_5_IRQHandler+0x6c>
				memcpy(Line_buff, Line, sizeof(Line));
 801f9d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f9d4:	490c      	ldr	r1, [pc, #48]	; (801fa08 <EXTI9_5_IRQHandler+0x98>)
 801f9d6:	480f      	ldr	r0, [pc, #60]	; (801fa14 <EXTI9_5_IRQHandler+0xa4>)
 801f9d8:	f002 f9c6 	bl	8021d68 <memcpy>
			i = 0;
 801f9dc:	2300      	movs	r3, #0
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801f9de:	2017      	movs	r0, #23
			i++;
 801f9e0:	8023      	strh	r3, [r4, #0]
	HAL_NVIC_ClearPendingIRQ(EXTI9_5_IRQn);
 801f9e2:	f7e2 f839 	bl	8001a58 <HAL_NVIC_ClearPendingIRQ>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801f9e6:	2080      	movs	r0, #128	; 0x80
}
 801f9e8:	b002      	add	sp, #8
 801f9ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 801f9ee:	f7e2 bee9 	b.w	80027c4 <HAL_GPIO_EXTI_IRQHandler>
			i++;
 801f9f2:	8823      	ldrh	r3, [r4, #0]
 801f9f4:	3301      	adds	r3, #1
 801f9f6:	b29b      	uxth	r3, r3
 801f9f8:	e7f1      	b.n	801f9de <EXTI9_5_IRQHandler+0x6e>
 801f9fa:	bf00      	nop
 801f9fc:	20090dc8 	.word	0x20090dc8
 801fa00:	20090e2c 	.word	0x20090e2c
 801fa04:	2008b85c 	.word	0x2008b85c
 801fa08:	20006fda 	.word	0x20006fda
 801fa0c:	2008b865 	.word	0x2008b865
 801fa10:	20004c98 	.word	0x20004c98
 801fa14:	200097dc 	.word	0x200097dc

0801fa18 <EXTI3_IRQHandler>:
{	
 801fa18:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	cnt_touch_delay = cnt_touch_delay + 1;
 801fa1c:	4d4c      	ldr	r5, [pc, #304]	; (801fb50 <EXTI3_IRQHandler+0x138>)
 801fa1e:	682b      	ldr	r3, [r5, #0]
	uint16_t Touch_x = 0, Touch_y = 0;
 801fa20:	aa02      	add	r2, sp, #8
	cnt_touch_delay = cnt_touch_delay + 1;
 801fa22:	3301      	adds	r3, #1
 801fa24:	602b      	str	r3, [r5, #0]
	uint16_t Touch_x = 0, Touch_y = 0;
 801fa26:	2300      	movs	r3, #0
 801fa28:	f822 3d02 	strh.w	r3, [r2, #-2]!
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 801fa2c:	a901      	add	r1, sp, #4
 801fa2e:	2070      	movs	r0, #112	; 0x70
	uint16_t Touch_x = 0, Touch_y = 0;
 801fa30:	f8ad 3004 	strh.w	r3, [sp, #4]
	TS_Get_XY1(TS_I2C_ADDRESS, &Touch_x, &Touch_y);
 801fa34:	f7fe f998 	bl	801dd68 <TS_Get_XY1>
	if((!TFT_ON_OFF) && (cnt_touch_delay >= 50))
 801fa38:	4b46      	ldr	r3, [pc, #280]	; (801fb54 <EXTI3_IRQHandler+0x13c>)
 801fa3a:	7819      	ldrb	r1, [r3, #0]
 801fa3c:	462c      	mov	r4, r5
 801fa3e:	461a      	mov	r2, r3
 801fa40:	b959      	cbnz	r1, 801fa5a <EXTI3_IRQHandler+0x42>
 801fa42:	6829      	ldr	r1, [r5, #0]
 801fa44:	2931      	cmp	r1, #49	; 0x31
 801fa46:	d908      	bls.n	801fa5a <EXTI3_IRQHandler+0x42>
			TFT_ON_OFF = 0x01;
 801fa48:	2201      	movs	r2, #1
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801fa4a:	2104      	movs	r1, #4
 801fa4c:	4842      	ldr	r0, [pc, #264]	; (801fb58 <EXTI3_IRQHandler+0x140>)
			TFT_ON_OFF = 0x01;
 801fa4e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 801fa50:	f7e6 fd1e 	bl	8006490 <HAL_TIM_PWM_Start>
}
 801fa54:	b002      	add	sp, #8
 801fa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if(TFT_ON_OFF && (cnt_touch_delay >= 0x0B)){
 801fa5a:	7813      	ldrb	r3, [r2, #0]
 801fa5c:	2b00      	cmp	r3, #0
 801fa5e:	d062      	beq.n	801fb26 <EXTI3_IRQHandler+0x10e>
 801fa60:	6823      	ldr	r3, [r4, #0]
 801fa62:	2b0a      	cmp	r3, #10
 801fa64:	d95f      	bls.n	801fb26 <EXTI3_IRQHandler+0x10e>
			if((Mode_EL == 0x00) && ((Touch_x >= 109*TS_Callib & Touch_x <= (109+54)*TS_Callib & Touch_y >=426*TS_Callib & Touch_y <=(426+54)*TS_Callib)))
 801fa66:	4b3d      	ldr	r3, [pc, #244]	; (801fb5c <EXTI3_IRQHandler+0x144>)
 801fa68:	781b      	ldrb	r3, [r3, #0]
 801fa6a:	2b00      	cmp	r3, #0
 801fa6c:	d157      	bne.n	801fb1e <EXTI3_IRQHandler+0x106>
 801fa6e:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 801fa72:	f7e0 fd67 	bl	8000544 <__aeabi_i2d>
 801fa76:	4680      	mov	r8, r0
 801fa78:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801fa7c:	4689      	mov	r9, r1
 801fa7e:	f7e0 fd61 	bl	8000544 <__aeabi_i2d>
 801fa82:	a32d      	add	r3, pc, #180	; (adr r3, 801fb38 <EXTI3_IRQHandler+0x120>)
 801fa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa88:	4606      	mov	r6, r0
 801fa8a:	460f      	mov	r7, r1
 801fa8c:	4640      	mov	r0, r8
 801fa8e:	4649      	mov	r1, r9
 801fa90:	f04f 0501 	mov.w	r5, #1
 801fa94:	f7e1 f842 	bl	8000b1c <__aeabi_dcmpge>
 801fa98:	b900      	cbnz	r0, 801fa9c <EXTI3_IRQHandler+0x84>
 801fa9a:	4605      	mov	r5, r0
 801fa9c:	a328      	add	r3, pc, #160	; (adr r3, 801fb40 <EXTI3_IRQHandler+0x128>)
 801fa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801faa2:	4640      	mov	r0, r8
 801faa4:	4649      	mov	r1, r9
 801faa6:	f04f 0a01 	mov.w	sl, #1
 801faaa:	f7e1 f82d 	bl	8000b08 <__aeabi_dcmple>
 801faae:	b900      	cbnz	r0, 801fab2 <EXTI3_IRQHandler+0x9a>
 801fab0:	4682      	mov	sl, r0
 801fab2:	a325      	add	r3, pc, #148	; (adr r3, 801fb48 <EXTI3_IRQHandler+0x130>)
 801fab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fab8:	4630      	mov	r0, r6
 801faba:	4639      	mov	r1, r7
 801fabc:	ea05 050a 	and.w	r5, r5, sl
 801fac0:	f04f 0801 	mov.w	r8, #1
 801fac4:	f7e1 f82a 	bl	8000b1c <__aeabi_dcmpge>
 801fac8:	b900      	cbnz	r0, 801facc <EXTI3_IRQHandler+0xb4>
 801faca:	4680      	mov	r8, r0
 801facc:	ea05 0508 	and.w	r5, r5, r8
 801fad0:	07eb      	lsls	r3, r5, #31
 801fad2:	d524      	bpl.n	801fb1e <EXTI3_IRQHandler+0x106>
 801fad4:	2200      	movs	r2, #0
 801fad6:	4b22      	ldr	r3, [pc, #136]	; (801fb60 <EXTI3_IRQHandler+0x148>)
 801fad8:	4630      	mov	r0, r6
 801fada:	4639      	mov	r1, r7
 801fadc:	f04f 0501 	mov.w	r5, #1
 801fae0:	f7e1 f812 	bl	8000b08 <__aeabi_dcmple>
 801fae4:	b900      	cbnz	r0, 801fae8 <EXTI3_IRQHandler+0xd0>
 801fae6:	4605      	mov	r5, r0
 801fae8:	f015 0fff 	tst.w	r5, #255	; 0xff
 801faec:	d017      	beq.n	801fb1e <EXTI3_IRQHandler+0x106>
				pause_button++;
 801faee:	4d1d      	ldr	r5, [pc, #116]	; (801fb64 <EXTI3_IRQHandler+0x14c>)
 801faf0:	782b      	ldrb	r3, [r5, #0]
 801faf2:	3301      	adds	r3, #1
 801faf4:	b2db      	uxtb	r3, r3
				if(pause_button > 3)
 801faf6:	2b03      	cmp	r3, #3
				pause_button++;
 801faf8:	702b      	strb	r3, [r5, #0]
				if(pause_button > 3)
 801fafa:	d910      	bls.n	801fb1e <EXTI3_IRQHandler+0x106>
					LaserOnOff = !LaserOnOff;
 801fafc:	4a1a      	ldr	r2, [pc, #104]	; (801fb68 <EXTI3_IRQHandler+0x150>)
 801fafe:	7813      	ldrb	r3, [r2, #0]
 801fb00:	fab3 f383 	clz	r3, r3
 801fb04:	095b      	lsrs	r3, r3, #5
 801fb06:	7013      	strb	r3, [r2, #0]
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801fb08:	7813      	ldrb	r3, [r2, #0]
 801fb0a:	b19b      	cbz	r3, 801fb34 <EXTI3_IRQHandler+0x11c>
 801fb0c:	2200      	movs	r2, #0
 801fb0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801fb12:	4816      	ldr	r0, [pc, #88]	; (801fb6c <EXTI3_IRQHandler+0x154>)
 801fb14:	f7e2 fe4c 	bl	80027b0 <HAL_GPIO_WritePin>
					cnt_touch_delay = 0;
 801fb18:	2300      	movs	r3, #0
 801fb1a:	6023      	str	r3, [r4, #0]
					pause_button = 0;
 801fb1c:	702b      	strb	r3, [r5, #0]
				GUI_Touch_Processing();
 801fb1e:	f7f1 f833 	bl	8010b88 <GUI_Touch_Processing>
				cnt_touch_delay = 0;
 801fb22:	2300      	movs	r3, #0
 801fb24:	6023      	str	r3, [r4, #0]
		HAL_NVIC_ClearPendingIRQ(EXTI3_IRQn);
 801fb26:	2009      	movs	r0, #9
 801fb28:	f7e1 ff96 	bl	8001a58 <HAL_NVIC_ClearPendingIRQ>
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 801fb2c:	2008      	movs	r0, #8
 801fb2e:	f7e2 fe49 	bl	80027c4 <HAL_GPIO_EXTI_IRQHandler>
}
 801fb32:	e78f      	b.n	801fa54 <EXTI3_IRQHandler+0x3c>
					LaserOnOff ? HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET):HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 801fb34:	2201      	movs	r2, #1
 801fb36:	e7ea      	b.n	801fb0e <EXTI3_IRQHandler+0xf6>
 801fb38:	99999999 	.word	0x99999999
 801fb3c:	40720d99 	.word	0x40720d99
 801fb40:	33333333 	.word	0x33333333
 801fb44:	407aff33 	.word	0x407aff33
 801fb48:	99999999 	.word	0x99999999
 801fb4c:	4091a399 	.word	0x4091a399
 801fb50:	2008a7b4 	.word	0x2008a7b4
 801fb54:	20000a4a 	.word	0x20000a4a
 801fb58:	200909e4 	.word	0x200909e4
 801fb5c:	20000a48 	.word	0x20000a48
 801fb60:	4093e000 	.word	0x4093e000
 801fb64:	2008b863 	.word	0x2008b863
 801fb68:	20006fd8 	.word	0x20006fd8
 801fb6c:	48000800 	.word	0x48000800

0801fb70 <SystemClock_Config>:
{
 801fb70:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801fb72:	2000      	movs	r0, #0
{
 801fb74:	b0bf      	sub	sp, #252	; 0xfc
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 801fb76:	f7e4 f921 	bl	8003dbc <HAL_PWREx_ControlVoltageScaling>
 801fb7a:	b100      	cbz	r0, 801fb7e <SystemClock_Config+0xe>
 801fb7c:	e7fe      	b.n	801fb7c <SystemClock_Config+0xc>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801fb7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801fb82:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801fb84:	2340      	movs	r3, #64	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801fb86:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801fb88:	2503      	movs	r5, #3
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801fb8a:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  RCC_OscInitStruct.HSICalibrationValue = 64;
 801fb8e:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801fb90:	2705      	movs	r7, #5
  RCC_OscInitStruct.PLL.PLLN = 30;
 801fb92:	231e      	movs	r3, #30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801fb94:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 801fb96:	9506      	str	r5, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801fb98:	9607      	str	r6, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801fb9a:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 801fb9c:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 2;
 801fb9e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 30;
 801fba0:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV5;
 801fba2:	9714      	str	r7, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 801fba4:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801fba6:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801fba8:	f7e4 f9fe 	bl	8003fa8 <HAL_RCC_OscConfig>
 801fbac:	b100      	cbz	r0, 801fbb0 <SystemClock_Config+0x40>
 801fbae:	e7fe      	b.n	801fbae <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801fbb0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801fbb2:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801fbb4:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801fbb6:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801fbb8:	4639      	mov	r1, r7
 801fbba:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801fbbc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801fbbe:	9502      	str	r5, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 801fbc0:	f7e4 fc44 	bl	800444c <HAL_RCC_ClockConfig>
 801fbc4:	b100      	cbz	r0, 801fbc8 <SystemClock_Config+0x58>
 801fbc6:	e7fe      	b.n	801fbc6 <SystemClock_Config+0x56>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_USB|RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_SDMMC1;
 801fbc8:	4b1e      	ldr	r3, [pc, #120]	; (801fc44 <SystemClock_Config+0xd4>)
 801fbca:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_HSI;
 801fbcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801fbd0:	932b      	str	r3, [sp, #172]	; 0xac
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 801fbd2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 801fbd6:	9334      	str	r3, [sp, #208]	; 0xd0
	PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 801fbd8:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 801fbdc:	9337      	str	r3, [sp, #220]	; 0xdc
	PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 801fbde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801fbe2:	9335      	str	r3, [sp, #212]	; 0xd4
  PeriphClkInit.PLLSAI2.PLLSAI2N = 9;
 801fbe4:	2309      	movs	r3, #9
 801fbe6:	9321      	str	r3, [sp, #132]	; 0x84
  PeriphClkInit.PLLSAI2.PLLSAI2ClockOut = RCC_PLLSAI2_LTDCCLK;
 801fbe8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801fbec:	9325      	str	r3, [sp, #148]	; 0x94
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801fbee:	230c      	movs	r3, #12
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801fbf0:	902c      	str	r0, [sp, #176]	; 0xb0
  PeriphClkInit.PLLSAI1.PLLSAI1N = 12;
 801fbf2:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801fbf4:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801fbf6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
	PeriphClkInit.PLLSAI2.PLLSAI2M = 2;
 801fbfa:	9420      	str	r4, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI2.PLLSAI2P = RCC_PLLP_DIV2;
 801fbfc:	9422      	str	r4, [sp, #136]	; 0x88
  PeriphClkInit.PLLSAI2.PLLSAI2R = RCC_PLLR_DIV2;
 801fbfe:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.PLLSAI2.PLLSAI2Q = RCC_PLLQ_DIV2;
 801fc00:	9423      	str	r4, [sp, #140]	; 0x8c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 801fc02:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 801fc04:	941b      	str	r4, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 801fc06:	941c      	str	r4, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 801fc08:	941d      	str	r4, [sp, #116]	; 0x74
	PeriphClkInit.LtdcClockSelection = RCC_LTDCCLKSOURCE_PLLSAI2_DIV4;
 801fc0a:	963a      	str	r6, [sp, #232]	; 0xe8
  PeriphClkInit.PLLSAI2.PLLSAI2Source = RCC_PLLSOURCE_HSE;
 801fc0c:	951f      	str	r5, [sp, #124]	; 0x7c
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSE;
 801fc0e:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 801fc10:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801fc12:	f7e4 fe4f 	bl	80048b4 <HAL_RCCEx_PeriphCLKConfig>
 801fc16:	4604      	mov	r4, r0
 801fc18:	b100      	cbz	r0, 801fc1c <SystemClock_Config+0xac>
 801fc1a:	e7fe      	b.n	801fc1a <SystemClock_Config+0xaa>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 801fc1c:	f7e4 fd10 	bl	8004640 <HAL_RCC_GetHCLKFreq>
 801fc20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801fc24:	fbb0 f0f3 	udiv	r0, r0, r3
 801fc28:	f7e1 ff00 	bl	8001a2c <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 801fc2c:	2004      	movs	r0, #4
 801fc2e:	f7e1 ff21 	bl	8001a74 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 801fc32:	4622      	mov	r2, r4
 801fc34:	4621      	mov	r1, r4
 801fc36:	f04f 30ff 	mov.w	r0, #4294967295
 801fc3a:	f7e1 fea9 	bl	8001990 <HAL_NVIC_SetPriority>
}
 801fc3e:	b03f      	add	sp, #252	; 0xfc
 801fc40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc42:	bf00      	nop
 801fc44:	00486060 	.word	0x00486060

0801fc48 <main>:
{
 801fc48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc4c:	ed2d 8b02 	vpush	{d8}
 801fc50:	b0a7      	sub	sp, #156	; 0x9c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801fc52:	4db2      	ldr	r5, [pc, #712]	; (801ff1c <main+0x2d4>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801fc54:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 801ff38 <main+0x2f0>
  HAL_Init();
 801fc58:	f7e1 f9c2 	bl	8000fe0 <HAL_Init>
	HAL_Delay(1);
 801fc5c:	2001      	movs	r0, #1
 801fc5e:	f7e1 f9dd 	bl	800101c <HAL_Delay>
  SystemClock_Config();
 801fc62:	f7ff ff85 	bl	801fb70 <SystemClock_Config>
	HAL_Delay(1);
 801fc66:	2001      	movs	r0, #1
 801fc68:	f7e1 f9d8 	bl	800101c <HAL_Delay>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 801fc6c:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fc6e:	f043 0310 	orr.w	r3, r3, #16
 801fc72:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fc74:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fc76:	f003 0310 	and.w	r3, r3, #16
 801fc7a:	9307      	str	r3, [sp, #28]
 801fc7c:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 801fc7e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fc80:	f043 0320 	orr.w	r3, r3, #32
 801fc84:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fc86:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fc88:	f003 0320 	and.w	r3, r3, #32
 801fc8c:	9308      	str	r3, [sp, #32]
 801fc8e:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801fc90:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fc92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801fc96:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fc98:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fc9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fc9e:	9309      	str	r3, [sp, #36]	; 0x24
 801fca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801fca2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fca4:	f043 0301 	orr.w	r3, r3, #1
 801fca8:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fcaa:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcac:	f003 0301 	and.w	r3, r3, #1
 801fcb0:	930a      	str	r3, [sp, #40]	; 0x28
 801fcb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801fcb4:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcb6:	f043 0304 	orr.w	r3, r3, #4
 801fcba:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fcbc:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcbe:	f003 0304 	and.w	r3, r3, #4
 801fcc2:	930b      	str	r3, [sp, #44]	; 0x2c
 801fcc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801fcc6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcc8:	f043 0302 	orr.w	r3, r3, #2
 801fccc:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fcce:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcd0:	f003 0302 	and.w	r3, r3, #2
 801fcd4:	930c      	str	r3, [sp, #48]	; 0x30
 801fcd6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	__HAL_RCC_GPIOD_CLK_ENABLE();
 801fcd8:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcda:	f043 0308 	orr.w	r3, r3, #8
 801fcde:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fce0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fce2:	f003 0308 	and.w	r3, r3, #8
 801fce6:	930d      	str	r3, [sp, #52]	; 0x34
 801fce8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	__HAL_RCC_GPIOG_CLK_ENABLE();
 801fcea:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801fcf0:	64eb      	str	r3, [r5, #76]	; 0x4c
 801fcf2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 801fcf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fcf8:	930e      	str	r3, [sp, #56]	; 0x38
 801fcfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	  HAL_PWREx_EnableVddIO2();
 801fcfc:	f7e4 f8c0 	bl	8003e80 <HAL_PWREx_EnableVddIO2>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_RESET);
 801fd00:	2200      	movs	r2, #0
 801fd02:	f242 0110 	movw	r1, #8208	; 0x2010
 801fd06:	4886      	ldr	r0, [pc, #536]	; (801ff20 <main+0x2d8>)
 801fd08:	f7e2 fd52 	bl	80027b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801fd0c:	2200      	movs	r2, #0
 801fd0e:	2120      	movs	r1, #32
 801fd10:	4884      	ldr	r0, [pc, #528]	; (801ff24 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd12:	2400      	movs	r4, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801fd14:	2601      	movs	r6, #1
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 801fd16:	f7e2 fd4b 	bl	80027b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801fd1a:	2720      	movs	r7, #32
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fd1c:	a919      	add	r1, sp, #100	; 0x64
 801fd1e:	4881      	ldr	r0, [pc, #516]	; (801ff24 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 801fd20:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801fd22:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd24:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fd26:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fd28:	f7e2 fbcc 	bl	80024c4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET); //VIDEO_GAIN ON
 801fd2c:	4622      	mov	r2, r4
 801fd2e:	4639      	mov	r1, r7
 801fd30:	487c      	ldr	r0, [pc, #496]	; (801ff24 <main+0x2dc>)
 801fd32:	f7e2 fd3d 	bl	80027b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801fd36:	f242 0310 	movw	r3, #8208	; 0x2010
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fd3a:	a919      	add	r1, sp, #100	; 0x64
 801fd3c:	4878      	ldr	r0, [pc, #480]	; (801ff20 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_4;
 801fd3e:	9319      	str	r3, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801fd40:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd42:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fd44:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fd46:	f7e2 fbbd 	bl	80024c4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//ST init HIGH
 801fd4a:	4632      	mov	r2, r6
 801fd4c:	2110      	movs	r1, #16
 801fd4e:	4874      	ldr	r0, [pc, #464]	; (801ff20 <main+0x2d8>)
 801fd50:	f7e2 fd2e 	bl	80027b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);	//Laser init OFF
 801fd54:	4622      	mov	r2, r4
 801fd56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801fd5a:	4871      	ldr	r0, [pc, #452]	; (801ff20 <main+0x2d8>)
 801fd5c:	f7e2 fd28 	bl	80027b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 801fd60:	2380      	movs	r3, #128	; 0x80
 801fd62:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fd64:	a919      	add	r1, sp, #100	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801fd66:	4b70      	ldr	r3, [pc, #448]	; (801ff28 <main+0x2e0>)
 801fd68:	931a      	str	r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fd6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd6e:	941b      	str	r4, [sp, #108]	; 0x6c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801fd70:	f7e2 fba8 	bl	80024c4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_RESET);
 801fd74:	4622      	mov	r2, r4
 801fd76:	2104      	movs	r1, #4
 801fd78:	486a      	ldr	r0, [pc, #424]	; (801ff24 <main+0x2dc>)
 801fd7a:	f7e2 fd19 	bl	80027b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801fd7e:	f04f 0a04 	mov.w	sl, #4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fd82:	a919      	add	r1, sp, #100	; 0x64
 801fd84:	4867      	ldr	r0, [pc, #412]	; (801ff24 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 801fd86:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801fd8a:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fd8c:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fd8e:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fd90:	f7e2 fb98 	bl	80024c4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 801fd94:	4632      	mov	r2, r6
 801fd96:	4651      	mov	r1, sl
 801fd98:	4862      	ldr	r0, [pc, #392]	; (801ff24 <main+0x2dc>)
 801fd9a:	f7e2 fd09 	bl	80027b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_RESET);
 801fd9e:	4622      	mov	r2, r4
 801fda0:	2102      	movs	r1, #2
 801fda2:	4860      	ldr	r0, [pc, #384]	; (801ff24 <main+0x2dc>)
 801fda4:	f7e2 fd04 	bl	80027b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801fda8:	2702      	movs	r7, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fdaa:	a919      	add	r1, sp, #100	; 0x64
 801fdac:	485d      	ldr	r0, [pc, #372]	; (801ff24 <main+0x2dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 801fdae:	9719      	str	r7, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801fdb0:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fdb2:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fdb4:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fdb6:	f7e2 fb85 	bl	80024c4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_1, GPIO_PIN_SET);
 801fdba:	4632      	mov	r2, r6
 801fdbc:	4639      	mov	r1, r7
 801fdbe:	4859      	ldr	r0, [pc, #356]	; (801ff24 <main+0x2dc>)
 801fdc0:	f7e2 fcf6 	bl	80027b0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801fdc4:	f44f 6800 	mov.w	r8, #2048	; 0x800
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fdc8:	a919      	add	r1, sp, #100	; 0x64
 801fdca:	4856      	ldr	r0, [pc, #344]	; (801ff24 <main+0x2dc>)
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 801fdcc:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801fdd0:	961a      	str	r6, [sp, #104]	; 0x68
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fdd2:	941b      	str	r4, [sp, #108]	; 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801fdd4:	941c      	str	r4, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fdd6:	f7e2 fb75 	bl	80024c4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_SET);
 801fdda:	4632      	mov	r2, r6
 801fddc:	4641      	mov	r1, r8
 801fdde:	4851      	ldr	r0, [pc, #324]	; (801ff24 <main+0x2dc>)
 801fde0:	f7e2 fce6 	bl	80027b0 <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801fde4:	f04f 0808 	mov.w	r8, #8
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fde8:	a919      	add	r1, sp, #100	; 0x64
 801fdea:	484e      	ldr	r0, [pc, #312]	; (801ff24 <main+0x2dc>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801fdec:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 801fdf0:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fdf4:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801fdf6:	f7e2 fb65 	bl	80024c4 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801fdfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fdfe:	a919      	add	r1, sp, #100	; 0x64
 801fe00:	4847      	ldr	r0, [pc, #284]	; (801ff20 <main+0x2d8>)
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 801fe02:	9319      	str	r3, [sp, #100]	; 0x64
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801fe04:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801fe08:	941b      	str	r4, [sp, #108]	; 0x6c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801fe0a:	f7e2 fb5b 	bl	80024c4 <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 2); //SDO IRQ
 801fe0e:	463a      	mov	r2, r7
 801fe10:	4621      	mov	r1, r4
 801fe12:	2017      	movs	r0, #23
 801fe14:	f7e1 fdbc 	bl	8001990 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0); //Touchscreen IRQ
 801fe18:	4622      	mov	r2, r4
 801fe1a:	4639      	mov	r1, r7
 801fe1c:	2009      	movs	r0, #9
 801fe1e:	f7e1 fdb7 	bl	8001990 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 801fe22:	2017      	movs	r0, #23
 801fe24:	f7e1 fde8 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 801fe28:	2009      	movs	r0, #9
 801fe2a:	f7e1 fde5 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 801fe2e:	4630      	mov	r0, r6
 801fe30:	f7e1 f8f4 	bl	800101c <HAL_Delay>
	DWT_Init();
 801fe34:	f7fe fe92 	bl	801eb5c <DWT_Init>
	HAL_Delay(1);
 801fe38:	4630      	mov	r0, r6
 801fe3a:	f7e1 f8ef 	bl	800101c <HAL_Delay>
	MX_TIM2_Init();
 801fe3e:	f7fe fe59 	bl	801eaf4 <MX_TIM2_Init>

//PWM Timer for booster
static void MX_TIM15_Init(void)
{
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
 801fe42:	221c      	movs	r2, #28
 801fe44:	4621      	mov	r1, r4
 801fe46:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801fe48:	940f      	str	r4, [sp, #60]	; 0x3c
 801fe4a:	9410      	str	r4, [sp, #64]	; 0x40
 801fe4c:	9411      	str	r4, [sp, #68]	; 0x44
  TIM_OC_InitTypeDef sConfigOC = {0};
 801fe4e:	f001 ff96 	bl	8021d7e <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801fe52:	222c      	movs	r2, #44	; 0x2c
 801fe54:	4621      	mov	r1, r4
 801fe56:	a819      	add	r0, sp, #100	; 0x64
 801fe58:	f001 ff91 	bl	8021d7e <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 801fe5c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 801ff3c <main+0x2f4>
  htim15.Init.Prescaler = 1200;
 801fe60:	4b32      	ldr	r3, [pc, #200]	; (801ff2c <main+0x2e4>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 801fe62:	f8c9 4008 	str.w	r4, [r9, #8]
  htim15.Init.Prescaler = 1200;
 801fe66:	f44f 6b96 	mov.w	fp, #1200	; 0x4b0
 801fe6a:	e889 0808 	stmia.w	r9, {r3, fp}
  htim15.Init.Period = 100;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim15.Init.RepetitionCounter = 0;
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801fe6e:	4648      	mov	r0, r9
  htim15.Init.Period = 100;
 801fe70:	2364      	movs	r3, #100	; 0x64
 801fe72:	f8c9 300c 	str.w	r3, [r9, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801fe76:	f8c9 4010 	str.w	r4, [r9, #16]
  htim15.Init.RepetitionCounter = 0;
 801fe7a:	f8c9 4014 	str.w	r4, [r9, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801fe7e:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 801fe82:	f7e6 f92d 	bl	80060e0 <HAL_TIM_PWM_Init>
 801fe86:	b100      	cbz	r0, 801fe8a <main+0x242>
 801fe88:	e7fe      	b.n	801fe88 <main+0x240>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801fe8a:	900f      	str	r0, [sp, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801fe8c:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 801fe8e:	a90f      	add	r1, sp, #60	; 0x3c
 801fe90:	4648      	mov	r0, r9
 801fe92:	f7e6 fb71 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 801fe96:	b100      	cbz	r0, 801fe9a <main+0x252>
 801fe98:	e7fe      	b.n	801fe98 <main+0x250>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801fe9a:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 801fe9c:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801fe9e:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 801fea0:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801fea2:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801fea4:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801fea6:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801fea8:	4652      	mov	r2, sl
 801feaa:	a912      	add	r1, sp, #72	; 0x48
 801feac:	4648      	mov	r0, r9
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801feae:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801feb0:	f7e6 f9ae 	bl	8006210 <HAL_TIM_PWM_ConfigChannel>
 801feb4:	b100      	cbz	r0, 801feb8 <main+0x270>
 801feb6:	e7fe      	b.n	801feb6 <main+0x26e>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801feb8:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801feba:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801febc:	901b      	str	r0, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.DeadTime = 0;
 801febe:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 801fec0:	901d      	str	r0, [sp, #116]	; 0x74
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801fec2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.BreakFilter = 0;
 801fec6:	901f      	str	r0, [sp, #124]	; 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801fec8:	9023      	str	r0, [sp, #140]	; 0x8c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801feca:	a919      	add	r1, sp, #100	; 0x64
 801fecc:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801fece:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 801fed0:	f7e6 fb7e 	bl	80065d0 <HAL_TIMEx_ConfigBreakDeadTime>
 801fed4:	4682      	mov	sl, r0
 801fed6:	b100      	cbz	r0, 801feda <main+0x292>
 801fed8:	e7fe      	b.n	801fed8 <main+0x290>
    Error_Handler();
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 801feda:	4648      	mov	r0, r9
 801fedc:	f001 fb3c 	bl	8021558 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801fee0:	4630      	mov	r0, r6
 801fee2:	f7e1 f89b 	bl	800101c <HAL_Delay>
	HAL_Delay(1);
 801fee6:	4630      	mov	r0, r6
 801fee8:	f7e1 f898 	bl	800101c <HAL_Delay>
  htim5.Instance = TIM5;
 801feec:	4c10      	ldr	r4, [pc, #64]	; (801ff30 <main+0x2e8>)
 801feee:	4b11      	ldr	r3, [pc, #68]	; (801ff34 <main+0x2ec>)
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 801fef0:	f8c4 a010 	str.w	sl, [r4, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801fef4:	e884 0488 	stmia.w	r4, {r3, r7, sl}
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801fef8:	4620      	mov	r0, r4
  htim5.Init.Period = 30;
 801fefa:	231e      	movs	r3, #30
 801fefc:	60e3      	str	r3, [r4, #12]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801fefe:	f8c4 a018 	str.w	sl, [r4, #24]
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 801ff02:	f7e6 f8d3 	bl	80060ac <HAL_TIM_OC_Init>
 801ff06:	b100      	cbz	r0, 801ff0a <main+0x2c2>
 801ff08:	e7fe      	b.n	801ff08 <main+0x2c0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 801ff0a:	9012      	str	r0, [sp, #72]	; 0x48
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801ff0c:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801ff0e:	a912      	add	r1, sp, #72	; 0x48
 801ff10:	4620      	mov	r0, r4
 801ff12:	f7e6 fb31 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 801ff16:	4602      	mov	r2, r0
 801ff18:	b190      	cbz	r0, 801ff40 <main+0x2f8>
 801ff1a:	e7fe      	b.n	801ff1a <main+0x2d2>
 801ff1c:	40021000 	.word	0x40021000
 801ff20:	48000800 	.word	0x48000800
 801ff24:	48001400 	.word	0x48001400
 801ff28:	10210000 	.word	0x10210000
 801ff2c:	40014000 	.word	0x40014000
 801ff30:	20090acc 	.word	0x20090acc
 801ff34:	40000c00 	.word	0x40000c00
 801ff38:	10110000 	.word	0x10110000
 801ff3c:	200909e4 	.word	0x200909e4
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 801ff40:	2330      	movs	r3, #48	; 0x30
 801ff42:	9319      	str	r3, [sp, #100]	; 0x64
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801ff44:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigOC.Pulse = 5;
 801ff46:	2305      	movs	r3, #5
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801ff48:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801ff4a:	a919      	add	r1, sp, #100	; 0x64
 801ff4c:	4620      	mov	r0, r4
  sConfigOC.Pulse = 5;
 801ff4e:	931a      	str	r3, [sp, #104]	; 0x68
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801ff50:	f7e6 f926 	bl	80061a0 <HAL_TIM_OC_ConfigChannel>
 801ff54:	4681      	mov	r9, r0
 801ff56:	b100      	cbz	r0, 801ff5a <main+0x312>
 801ff58:	e7fe      	b.n	801ff58 <main+0x310>
  HAL_TIM_MspPostInit(&htim5);
 801ff5a:	4620      	mov	r0, r4
 801ff5c:	f001 fafc 	bl	8021558 <HAL_TIM_MspPostInit>
	HAL_Delay(1);
 801ff60:	4630      	mov	r0, r6
 801ff62:	f7e1 f85b 	bl	800101c <HAL_Delay>
	MX_USB_DEVICE_Init();
 801ff66:	f001 fc79 	bl	802185c <MX_USB_DEVICE_Init>
	HAL_Delay(1);
 801ff6a:	4630      	mov	r0, r6
 801ff6c:	f7e1 f856 	bl	800101c <HAL_Delay>
  hdma2d.Instance = DMA2D;
 801ff70:	4c8c      	ldr	r4, [pc, #560]	; (80201a4 <main+0x55c>)
  hdma2d.Init.Mode = DMA2D_R2M;
 801ff72:	4b8d      	ldr	r3, [pc, #564]	; (80201a8 <main+0x560>)
	hdma2d.LayerCfg[0].InputOffset = 0;
 801ff74:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hdma2d.Init.Mode = DMA2D_R2M;
 801ff78:	f44f 3a40 	mov.w	sl, #196608	; 0x30000
 801ff7c:	e884 0408 	stmia.w	r4, {r3, sl}
  hdma2d.LayerCfg[0].InputAlpha =125;
 801ff80:	237d      	movs	r3, #125	; 0x7d
  hdma2d.LayerCfg[0].InputColorMode = DMA2D_INPUT_RGB565;
 801ff82:	62e7      	str	r7, [r4, #44]	; 0x2c
  hdma2d.LayerCfg[0].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801ff84:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hdma2d.LayerCfg[0].InputAlpha =125;
 801ff88:	6363      	str	r3, [r4, #52]	; 0x34
  hdma2d.LayerCfg[1].InputOffset = 0;
 801ff8a:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 801ff8e:	6467      	str	r7, [r4, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 801ff90:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
  hdma2d.LayerCfg[1].InputAlpha = 125;
 801ff94:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801ff96:	4620      	mov	r0, r4
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 801ff98:	60a7      	str	r7, [r4, #8]
  hdma2d.Init.OutputOffset = 0;
 801ff9a:	f8c4 900c 	str.w	r9, [r4, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 801ff9e:	f7e1 ff5f 	bl	8001e60 <HAL_DMA2D_Init>
 801ffa2:	b100      	cbz	r0, 801ffa6 <main+0x35e>
 801ffa4:	e7fe      	b.n	801ffa4 <main+0x35c>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 801ffa6:	4631      	mov	r1, r6
 801ffa8:	4620      	mov	r0, r4
 801ffaa:	f7e2 f83f 	bl	800202c <HAL_DMA2D_ConfigLayer>
 801ffae:	4681      	mov	r9, r0
 801ffb0:	b100      	cbz	r0, 801ffb4 <main+0x36c>
 801ffb2:	e7fe      	b.n	801ffb2 <main+0x36a>
	HAL_Delay(1);
 801ffb4:	4630      	mov	r0, r6
 801ffb6:	f7e1 f831 	bl	800101c <HAL_Delay>
  hspi1.Instance = SPI1;
 801ffba:	4c7c      	ldr	r4, [pc, #496]	; (80201ac <main+0x564>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801ffbc:	4b7c      	ldr	r3, [pc, #496]	; (80201b0 <main+0x568>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801ffbe:	f8c4 9008 	str.w	r9, [r4, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801ffc2:	f44f 7c82 	mov.w	ip, #260	; 0x104
 801ffc6:	e884 1008 	stmia.w	r4, {r3, ip}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801ffca:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 801ffce:	60e3      	str	r3, [r4, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 801ffd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ffd4:	61a3      	str	r3, [r4, #24]
  hspi1.Init.TIMode = SPI_TIMODE_ENABLE;
 801ffd6:	2310      	movs	r3, #16
 801ffd8:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801ffda:	4620      	mov	r0, r4
  hspi1.Init.CRCPolynomial = 7;
 801ffdc:	2307      	movs	r3, #7
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 801ffde:	6127      	str	r7, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 801ffe0:	6166      	str	r6, [r4, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;//SPI_BAUDRATEPRESCALER_2
 801ffe2:	f8c4 801c 	str.w	r8, [r4, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801ffe6:	f8c4 9020 	str.w	r9, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801ffea:	f8c4 9028 	str.w	r9, [r4, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 801ffee:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801fff0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 801fff4:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801fff8:	f7e5 fc66 	bl	80058c8 <HAL_SPI_Init>
 801fffc:	b100      	cbz	r0, 8020000 <main+0x3b8>
 801fffe:	e7fe      	b.n	801fffe <main+0x3b6>
	__HAL_SPI_ENABLE(&hspi1);
 8020000:	6822      	ldr	r2, [r4, #0]
  hi2c1.Instance = I2C1;
 8020002:	4c6c      	ldr	r4, [pc, #432]	; (80201b4 <main+0x56c>)
	__HAL_SPI_ENABLE(&hspi1);
 8020004:	6813      	ldr	r3, [r2, #0]
 8020006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802000a:	6013      	str	r3, [r2, #0]
	HAL_Delay(1);
 802000c:	2001      	movs	r0, #1
 802000e:	f7e1 f805 	bl	800101c <HAL_Delay>
  hi2c1.Instance = I2C1;
 8020012:	4b69      	ldr	r3, [pc, #420]	; (80201b8 <main+0x570>)
 8020014:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8020016:	f1a3 6378 	sub.w	r3, r3, #260046848	; 0xf800000
 802001a:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 802001e:	f6a3 634f 	subw	r3, r3, #3663	; 0xe4f
 8020022:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 112;
 8020024:	2370      	movs	r3, #112	; 0x70
 8020026:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8020028:	2701      	movs	r7, #1
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 802002a:	2300      	movs	r3, #0
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 802002c:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 802002e:	60e7      	str	r7, [r4, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8020030:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8020032:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8020034:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8020036:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8020038:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 802003a:	f7e2 fd0a 	bl	8002a52 <HAL_I2C_Init>
 802003e:	4601      	mov	r1, r0
 8020040:	b100      	cbz	r0, 8020044 <main+0x3fc>
 8020042:	e7fe      	b.n	8020042 <main+0x3fa>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8020044:	4620      	mov	r0, r4
 8020046:	f7e3 f86d 	bl	8003124 <HAL_I2CEx_ConfigAnalogFilter>
 802004a:	4601      	mov	r1, r0
 802004c:	b100      	cbz	r0, 8020050 <main+0x408>
 802004e:	e7fe      	b.n	802004e <main+0x406>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8020050:	4620      	mov	r0, r4
 8020052:	f7e3 f88d 	bl	8003170 <HAL_I2CEx_ConfigDigitalFilter>
 8020056:	4606      	mov	r6, r0
 8020058:	b100      	cbz	r0, 802005c <main+0x414>
 802005a:	e7fe      	b.n	802005a <main+0x412>
	HAL_Delay(1);
 802005c:	4638      	mov	r0, r7
 802005e:	f7e0 ffdd 	bl	800101c <HAL_Delay>

/* LPUART1 init function */
static void MX_LPUART1_UART_Init(void)
{

	hlpuart1.Instance = LPUART1;
 8020062:	4c56      	ldr	r4, [pc, #344]	; (80201bc <main+0x574>)
  hlpuart1.Init.BaudRate = 9600;
 8020064:	4b56      	ldr	r3, [pc, #344]	; (80201c0 <main+0x578>)
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8020066:	60a6      	str	r6, [r4, #8]
  hlpuart1.Init.BaudRate = 9600;
 8020068:	f44f 5e16 	mov.w	lr, #9600	; 0x2580
 802006c:	e884 4008 	stmia.w	r4, {r3, lr}
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8020070:	4620      	mov	r0, r4
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8020072:	230c      	movs	r3, #12
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8020074:	60e6      	str	r6, [r4, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8020076:	6126      	str	r6, [r4, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8020078:	6163      	str	r3, [r4, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 802007a:	61a6      	str	r6, [r4, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 802007c:	6226      	str	r6, [r4, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 802007e:	6266      	str	r6, [r4, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8020080:	62a6      	str	r6, [r4, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8020082:	66a6      	str	r6, [r4, #104]	; 0x68
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8020084:	f7e6 ff00 	bl	8006e88 <HAL_UART_Init>
 8020088:	4601      	mov	r1, r0
 802008a:	b100      	cbz	r0, 802008e <main+0x446>
 802008c:	e7fe      	b.n	802008c <main+0x444>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 802008e:	4620      	mov	r0, r4
 8020090:	f7e6 ff73 	bl	8006f7a <HAL_UARTEx_SetTxFifoThreshold>
 8020094:	4601      	mov	r1, r0
 8020096:	b100      	cbz	r0, 802009a <main+0x452>
 8020098:	e7fe      	b.n	8020098 <main+0x450>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 802009a:	4620      	mov	r0, r4
 802009c:	f7e6 ff91 	bl	8006fc2 <HAL_UARTEx_SetRxFifoThreshold>
 80200a0:	4606      	mov	r6, r0
 80200a2:	b100      	cbz	r0, 80200a6 <main+0x45e>
 80200a4:	e7fe      	b.n	80200a4 <main+0x45c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }
	
	HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 3); 
 80200a6:	2203      	movs	r2, #3
 80200a8:	4639      	mov	r1, r7
 80200aa:	2046      	movs	r0, #70	; 0x46
 80200ac:	f7e1 fc70 	bl	8001990 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 80200b0:	4638      	mov	r0, r7
 80200b2:	f7e0 ffb3 	bl	800101c <HAL_Delay>
  hltdc.Instance = LTDC;
 80200b6:	4c43      	ldr	r4, [pc, #268]	; (80201c4 <main+0x57c>)
 80200b8:	4b43      	ldr	r3, [pc, #268]	; (80201c8 <main+0x580>)
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80200ba:	60a6      	str	r6, [r4, #8]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80200bc:	e884 0048 	stmia.w	r4, {r3, r6}
  hltdc.Init.HorizontalSync = 5;
 80200c0:	2305      	movs	r3, #5
 80200c2:	6163      	str	r3, [r4, #20]
  hltdc.Init.VerticalSync = 30;
 80200c4:	231e      	movs	r3, #30
 80200c6:	61a3      	str	r3, [r4, #24]
  hltdc.Init.AccumulatedHBP = 40;
 80200c8:	2328      	movs	r3, #40	; 0x28
 80200ca:	61e3      	str	r3, [r4, #28]
  hltdc.Init.AccumulatedVBP = 8;
 80200cc:	2308      	movs	r3, #8
 80200ce:	6223      	str	r3, [r4, #32]
  hltdc.Init.AccumulatedActiveW = 520;
 80200d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80200d4:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 280;
 80200d6:	f44f 738c 	mov.w	r3, #280	; 0x118
 80200da:	62a3      	str	r3, [r4, #40]	; 0x28
  hltdc.Init.TotalWidth = 525;
 80200dc:	f240 230d 	movw	r3, #525	; 0x20d
 80200e0:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80200e2:	4620      	mov	r0, r4
  hltdc.Init.TotalHeigh = 288;
 80200e4:	f44f 7390 	mov.w	r3, #288	; 0x120
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80200e8:	60e6      	str	r6, [r4, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80200ea:	6126      	str	r6, [r4, #16]
  hltdc.Init.TotalHeigh = 288;
 80200ec:	6323      	str	r3, [r4, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80200ee:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80200f2:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80200f6:	f884 6036 	strb.w	r6, [r4, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80200fa:	f7e3 f8e5 	bl	80032c8 <HAL_LTDC_Init>
 80200fe:	4602      	mov	r2, r0
 8020100:	b100      	cbz	r0, 8020104 <main+0x4bc>
 8020102:	e7fe      	b.n	8020102 <main+0x4ba>
  pLayerCfg.WindowY1 = 272;
 8020104:	f44f 7188 	mov.w	r1, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
 8020108:	9019      	str	r0, [sp, #100]	; 0x64
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 802010a:	2302      	movs	r3, #2
  pLayerCfg.WindowX1 = 480;
 802010c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8020110:	f44f 6680 	mov.w	r6, #1024	; 0x400
  pLayerCfg.WindowX1 = 480;
 8020114:	901a      	str	r0, [sp, #104]	; 0x68
  pLayerCfg.WindowY1 = 272;
 8020116:	911c      	str	r1, [sp, #112]	; 0x70
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8020118:	931d      	str	r3, [sp, #116]	; 0x74
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 802011a:	9620      	str	r6, [sp, #128]	; 0x80
  pLayerCfg.Alpha = 255;
 802011c:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 802011e:	2607      	movs	r6, #7
  pLayerCfg.ImageWidth = 480;
 8020120:	9023      	str	r0, [sp, #140]	; 0x8c
  pLayerCfg.ImageHeight = 272;
 8020122:	9124      	str	r1, [sp, #144]	; 0x90
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8020124:	4620      	mov	r0, r4
 8020126:	a919      	add	r1, sp, #100	; 0x64
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8020128:	9621      	str	r6, [sp, #132]	; 0x84
  pLayerCfg.WindowY0 = 0;
 802012a:	921b      	str	r2, [sp, #108]	; 0x6c
  pLayerCfg.Alpha = 255;
 802012c:	931e      	str	r3, [sp, #120]	; 0x78
  pLayerCfg.Alpha0 = 0;
 802012e:	921f      	str	r2, [sp, #124]	; 0x7c
  pLayerCfg.FBStartAdress = 0;
 8020130:	9222      	str	r2, [sp, #136]	; 0x88
  pLayerCfg.Backcolor.Blue = 255;
 8020132:	f88d 3094 	strb.w	r3, [sp, #148]	; 0x94
  pLayerCfg.Backcolor.Green = 255;
 8020136:	f88d 3095 	strb.w	r3, [sp, #149]	; 0x95
  pLayerCfg.Backcolor.Red = 255;
 802013a:	f88d 3096 	strb.w	r3, [sp, #150]	; 0x96
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 802013e:	f7e3 f92f 	bl	80033a0 <HAL_LTDC_ConfigLayer>
 8020142:	4606      	mov	r6, r0
 8020144:	b100      	cbz	r0, 8020148 <main+0x500>
 8020146:	e7fe      	b.n	8020146 <main+0x4fe>
	HAL_Delay(1);
 8020148:	4638      	mov	r0, r7
 802014a:	f7e0 ff67 	bl	800101c <HAL_Delay>
  hadc1.Instance = ADC1;
 802014e:	4c1f      	ldr	r4, [pc, #124]	; (80201cc <main+0x584>)
 8020150:	4b1f      	ldr	r3, [pc, #124]	; (80201d0 <main+0x588>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8020152:	60e6      	str	r6, [r4, #12]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8020154:	e884 0048 	stmia.w	r4, {r3, r6}
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020158:	f04f 0804 	mov.w	r8, #4
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 802015c:	2310      	movs	r3, #16
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 802015e:	4620      	mov	r0, r4
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8020160:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8020162:	6126      	str	r6, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8020164:	f8c4 8014 	str.w	r8, [r4, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8020168:	61a6      	str	r6, [r4, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 802016a:	61e7      	str	r7, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 802016c:	6227      	str	r7, [r4, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 802016e:	6266      	str	r6, [r4, #36]	; 0x24
  hadc1.Init.NbrOfDiscConversion = 1;
 8020170:	62a7      	str	r7, [r4, #40]	; 0x28
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8020172:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8020174:	6326      	str	r6, [r4, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8020176:	6366      	str	r6, [r4, #52]	; 0x34
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8020178:	63a6      	str	r6, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 802017a:	63e6      	str	r6, [r4, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 802017c:	f7e0 ff84 	bl	8001088 <HAL_ADC_Init>
 8020180:	b100      	cbz	r0, 8020184 <main+0x53c>
 8020182:	e7fe      	b.n	8020182 <main+0x53a>
  sConfig.Channel = ADC_CHANNEL_3;
 8020184:	4b13      	ldr	r3, [pc, #76]	; (80201d4 <main+0x58c>)
 8020186:	9319      	str	r3, [sp, #100]	; 0x64
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8020188:	2306      	movs	r3, #6
 802018a:	931a      	str	r3, [sp, #104]	; 0x68
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 802018c:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 802018e:	237f      	movs	r3, #127	; 0x7f
  sConfig.Offset = 0;
 8020190:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8020192:	a919      	add	r1, sp, #100	; 0x64
 8020194:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8020196:	931c      	str	r3, [sp, #112]	; 0x70
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8020198:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 802019c:	f7e1 f894 	bl	80012c8 <HAL_ADC_ConfigChannel>
 80201a0:	b1d0      	cbz	r0, 80201d8 <main+0x590>
 80201a2:	e7fe      	b.n	80201a2 <main+0x55a>
 80201a4:	20090dcc 	.word	0x20090dcc
 80201a8:	4002b000 	.word	0x4002b000
 80201ac:	20090e2c 	.word	0x20090e2c
 80201b0:	40013000 	.word	0x40013000
 80201b4:	20090998 	.word	0x20090998
 80201b8:	40005400 	.word	0x40005400
 80201bc:	20090b30 	.word	0x20090b30
 80201c0:	40008000 	.word	0x40008000
 80201c4:	20090bb8 	.word	0x20090bb8
 80201c8:	40016800 	.word	0x40016800
 80201cc:	20090c88 	.word	0x20090c88
 80201d0:	50040000 	.word	0x50040000
 80201d4:	0c900008 	.word	0x0c900008
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80201d8:	6cab      	ldr	r3, [r5, #72]	; 0x48
  htim6.Instance = TIM6;
 80201da:	4c35      	ldr	r4, [pc, #212]	; (80202b0 <main+0x668>)
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80201dc:	f043 0304 	orr.w	r3, r3, #4
 80201e0:	64ab      	str	r3, [r5, #72]	; 0x48
 80201e2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80201e4:	f003 0304 	and.w	r3, r3, #4
 80201e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80201ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 80201ec:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80201ee:	f043 0301 	orr.w	r3, r3, #1
 80201f2:	64ab      	str	r3, [r5, #72]	; 0x48
 80201f4:	6cab      	ldr	r3, [r5, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80201f6:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80201f8:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80201fc:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80201fe:	9312      	str	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8020200:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8020202:	9b12      	ldr	r3, [sp, #72]	; 0x48
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8020204:	f7e1 fbc4 	bl	8001990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8020208:	200b      	movs	r0, #11
 802020a:	f7e1 fbf5 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 802020e:	2001      	movs	r0, #1
 8020210:	f7e0 ff04 	bl	800101c <HAL_Delay>
	HAL_TIM_OC_Start(&htim5, TIM_CHANNEL_1);
 8020214:	2100      	movs	r1, #0
 8020216:	4827      	ldr	r0, [pc, #156]	; (80202b4 <main+0x66c>)
 8020218:	f7e6 f96e 	bl	80064f8 <HAL_TIM_OC_Start>
	HAL_Delay(1);
 802021c:	2001      	movs	r0, #1
 802021e:	f7e0 fefd 	bl	800101c <HAL_Delay>
	HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);  //ST Signal
 8020222:	2201      	movs	r2, #1
 8020224:	2100      	movs	r1, #0
 8020226:	201c      	movs	r0, #28
 8020228:	f7e1 fbb2 	bl	8001990 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 802022c:	2002      	movs	r0, #2
 802022e:	f7e0 fef5 	bl	800101c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8020232:	201c      	movs	r0, #28
 8020234:	f7e1 fbe0 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 8020238:	2001      	movs	r0, #1
 802023a:	f7e0 feef 	bl	800101c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim2);
 802023e:	481e      	ldr	r0, [pc, #120]	; (80202b8 <main+0x670>)
 8020240:	f7e5 fde6 	bl	8005e10 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1);
 8020244:	2001      	movs	r0, #1
 8020246:	f7e0 fee9 	bl	800101c <HAL_Delay>
	HAL_NVIC_SetPriority(LTDC_IRQn, 1, 3);  //
 802024a:	2203      	movs	r2, #3
 802024c:	2101      	movs	r1, #1
 802024e:	205b      	movs	r0, #91	; 0x5b
 8020250:	f7e1 fb9e 	bl	8001990 <HAL_NVIC_SetPriority>
	HAL_Delay(2);
 8020254:	2002      	movs	r0, #2
 8020256:	f7e0 fee1 	bl	800101c <HAL_Delay>
	HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);//booster
 802025a:	2104      	movs	r1, #4
 802025c:	4817      	ldr	r0, [pc, #92]	; (80202bc <main+0x674>)
 802025e:	f7e6 f917 	bl	8006490 <HAL_TIM_PWM_Start>
	TIM15->CCR2 = 50;
 8020262:	4b17      	ldr	r3, [pc, #92]	; (80202c0 <main+0x678>)
 8020264:	2232      	movs	r2, #50	; 0x32
 8020266:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_Delay(1);
 8020268:	2001      	movs	r0, #1
 802026a:	f7e0 fed7 	bl	800101c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_2, GPIO_PIN_SET);
 802026e:	2201      	movs	r2, #1
 8020270:	4814      	ldr	r0, [pc, #80]	; (80202c4 <main+0x67c>)
 8020272:	2104      	movs	r1, #4
 8020274:	f7e2 fa9c 	bl	80027b0 <HAL_GPIO_WritePin>
  htim6.Init.Prescaler = 48000;
 8020278:	4a13      	ldr	r2, [pc, #76]	; (80202c8 <main+0x680>)
 802027a:	f64b 3580 	movw	r5, #48000	; 0xbb80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802027e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = 48000;
 8020280:	e884 0024 	stmia.w	r4, {r2, r5}
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8020284:	4620      	mov	r0, r4
  htim6.Init.Period = 3800;
 8020286:	f640 62d8 	movw	r2, #3800	; 0xed8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 802028a:	9319      	str	r3, [sp, #100]	; 0x64
 802028c:	931a      	str	r3, [sp, #104]	; 0x68
 802028e:	931b      	str	r3, [sp, #108]	; 0x6c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020290:	60a3      	str	r3, [r4, #8]
  htim6.Init.Period = 3800;
 8020292:	60e2      	str	r2, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020294:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8020296:	f7e5 feef 	bl	8006078 <HAL_TIM_Base_Init>
 802029a:	b100      	cbz	r0, 802029e <main+0x656>
 802029c:	e7fe      	b.n	802029c <main+0x654>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 802029e:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80202a0:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80202a2:	a919      	add	r1, sp, #100	; 0x64
 80202a4:	4620      	mov	r0, r4
 80202a6:	f7e6 f967 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 80202aa:	4605      	mov	r5, r0
 80202ac:	b170      	cbz	r0, 80202cc <main+0x684>
 80202ae:	e7fe      	b.n	80202ae <main+0x666>
 80202b0:	20090d14 	.word	0x20090d14
 80202b4:	20090acc 	.word	0x20090acc
 80202b8:	20090e94 	.word	0x20090e94
 80202bc:	200909e4 	.word	0x200909e4
 80202c0:	40014000 	.word	0x40014000
 80202c4:	48001400 	.word	0x48001400
 80202c8:	40001000 	.word	0x40001000
	HAL_Delay(1);
 80202cc:	2001      	movs	r0, #1
 80202ce:	f7e0 fea5 	bl	800101c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80202d2:	2036      	movs	r0, #54	; 0x36
 80202d4:	f7e1 fb90 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 80202d8:	2001      	movs	r0, #1
 80202da:	f7e0 fe9f 	bl	800101c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim6);
 80202de:	4620      	mov	r0, r4
 80202e0:	f7e5 fd96 	bl	8005e10 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM2_IRQn, 1, 4);
 80202e4:	2204      	movs	r2, #4
 80202e6:	2101      	movs	r1, #1
 80202e8:	201c      	movs	r0, #28
 80202ea:	f7e1 fb51 	bl	8001990 <HAL_NVIC_SetPriority>
	HAL_Delay(1);
 80202ee:	2001      	movs	r0, #1
 80202f0:	f7e0 fe94 	bl	800101c <HAL_Delay>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 80202f4:	462a      	mov	r2, r5
 80202f6:	49d0      	ldr	r1, [pc, #832]	; (8020638 <main+0x9f0>)
 80202f8:	48d0      	ldr	r0, [pc, #832]	; (802063c <main+0x9f4>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 80202fa:	4cd1      	ldr	r4, [pc, #836]	; (8020640 <main+0x9f8>)
 80202fc:	4fd1      	ldr	r7, [pc, #836]	; (8020644 <main+0x9fc>)
 80202fe:	4ed2      	ldr	r6, [pc, #840]	; (8020648 <main+0xa00>)
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 8020300:	f8df 9400 	ldr.w	r9, [pc, #1024]	; 8020704 <main+0xabc>
	HAL_LTDC_SetAddress(&hltdc,(uint32_t) &RGB565_480x272,0);
 8020304:	f7e3 f875 	bl	80033f2 <HAL_LTDC_SetAddress>
	HAL_Delay(1);
 8020308:	2001      	movs	r0, #1
 802030a:	f7e0 fe87 	bl	800101c <HAL_Delay>
	Touch_Ini();
 802030e:	f7fd fd22 	bl	801dd56 <Touch_Ini>
	MX_SDMMC1_SD_Init();
 8020312:	f7fe fbdd 	bl	801ead0 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8020316:	f7fd fda9 	bl	801de6c <MX_FATFS_Init>
	GPIO_QSPI_Init();
 802031a:	f7fb fa7f 	bl	801b81c <GPIO_QSPI_Init>
	Single_Mode();	
 802031e:	f7fb fb77 	bl	801ba10 <Single_Mode>
	HAL_Delay(20);
 8020322:	2014      	movs	r0, #20
 8020324:	f7e0 fe7a 	bl	800101c <HAL_Delay>
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 8020328:	2103      	movs	r1, #3
 802032a:	48c8      	ldr	r0, [pc, #800]	; (802064c <main+0xa04>)
 802032c:	f7ee fc38 	bl	800eba0 <Calibration_Load_1byte>
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 8020330:	4bc7      	ldr	r3, [pc, #796]	; (8020650 <main+0xa08>)
	buff_set = Calibration_Load_1byte(SET_MODEEL, 3);
 8020332:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 8020334:	28ff      	cmp	r0, #255	; 0xff
 8020336:	bf18      	it	ne
 8020338:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 802033a:	f04f 0103 	mov.w	r1, #3
 802033e:	48c5      	ldr	r0, [pc, #788]	; (8020654 <main+0xa0c>)
	if(buff_set == 0xFF){Mode_EL = 0;} else{Mode_EL = buff_set;}		
 8020340:	bf08      	it	eq
 8020342:	701d      	strbeq	r5, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_GRAPHFIELD, 3);
 8020344:	f7ee fc2c 	bl	800eba0 <Calibration_Load_1byte>
 8020348:	4bc3      	ldr	r3, [pc, #780]	; (8020658 <main+0xa10>)
 802034a:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 802034c:	28ff      	cmp	r0, #255	; 0xff
 802034e:	bf0c      	ite	eq
 8020350:	2200      	moveq	r2, #0
 8020352:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 8020354:	f04f 0103 	mov.w	r1, #3
 8020358:	48c0      	ldr	r0, [pc, #768]	; (802065c <main+0xa14>)
	if(buff_set == 0xFF){Graph_Field = 0;} else{Graph_Field = buff_set;}
 802035a:	bf08      	it	eq
 802035c:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORFIELD, 3);
 802035e:	f7ee fc1f 	bl	800eba0 <Calibration_Load_1byte>
 8020362:	4bbf      	ldr	r3, [pc, #764]	; (8020660 <main+0xa18>)
 8020364:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 8020366:	28ff      	cmp	r0, #255	; 0xff
 8020368:	bf0a      	itet	eq
 802036a:	781a      	ldrbeq	r2, [r3, #0]
 802036c:	7018      	strbne	r0, [r3, #0]
 802036e:	f042 0201 	orreq.w	r2, r2, #1
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 8020372:	f04f 0103 	mov.w	r1, #3
 8020376:	48bb      	ldr	r0, [pc, #748]	; (8020664 <main+0xa1c>)
	if(buff_set == 0xFF){Color_Field |= Color_CIE_xy;} else{Color_Field = buff_set;}	
 8020378:	bf08      	it	eq
 802037a:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_COLORRENDFIELD, 3);
 802037c:	f7ee fc10 	bl	800eba0 <Calibration_Load_1byte>
 8020380:	4bb9      	ldr	r3, [pc, #740]	; (8020668 <main+0xa20>)
 8020382:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 8020384:	28ff      	cmp	r0, #255	; 0xff
 8020386:	bf0c      	ite	eq
 8020388:	2200      	moveq	r2, #0
 802038a:	7018      	strbne	r0, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 802038c:	f04f 0103 	mov.w	r1, #3
 8020390:	48b6      	ldr	r0, [pc, #728]	; (802066c <main+0xa24>)
	if(buff_set == 0xFF){Color_rend_Field = 0;} else{Color_rend_Field = buff_set;}	
 8020392:	bf08      	it	eq
 8020394:	701a      	strbeq	r2, [r3, #0]
		buff_set = Calibration_Load_1byte(SET_LANGUAGE, 3);
 8020396:	f7ee fc03 	bl	800eba0 <Calibration_Load_1byte>
 802039a:	4bb5      	ldr	r3, [pc, #724]	; (8020670 <main+0xa28>)
 802039c:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 802039e:	28ff      	cmp	r0, #255	; 0xff
 80203a0:	bf0c      	ite	eq
 80203a2:	2200      	moveq	r2, #0
 80203a4:	7018      	strbne	r0, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 80203a6:	f04f 0103 	mov.w	r1, #3
 80203aa:	48b2      	ldr	r0, [pc, #712]	; (8020674 <main+0xa2c>)
	if(buff_set == 0xFF){Language_status = Ru;} else{Language_status = buff_set;}	
 80203ac:	bf08      	it	eq
 80203ae:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_SOURCETYPE, 3);
 80203b0:	f7ee fbf6 	bl	800eba0 <Calibration_Load_1byte>
 80203b4:	4bb0      	ldr	r3, [pc, #704]	; (8020678 <main+0xa30>)
 80203b6:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 80203b8:	28ff      	cmp	r0, #255	; 0xff
 80203ba:	bf0a      	itet	eq
 80203bc:	781a      	ldrbeq	r2, [r3, #0]
 80203be:	7018      	strbne	r0, [r3, #0]
 80203c0:	f042 0210 	orreq.w	r2, r2, #16
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 80203c4:	f04f 0103 	mov.w	r1, #3
 80203c8:	48ac      	ldr	r0, [pc, #688]	; (802067c <main+0xa34>)
	if(buff_set == 0xFF){Source_Type |= Source_D55;} else{Source_Type = buff_set;}	
 80203ca:	bf08      	it	eq
 80203cc:	701a      	strbeq	r2, [r3, #0]
	buff_set = Calibration_Load_1byte(SET_BLUETOOTH, 3);
 80203ce:	f7ee fbe7 	bl	800eba0 <Calibration_Load_1byte>
 80203d2:	4bab      	ldr	r3, [pc, #684]	; (8020680 <main+0xa38>)
 80203d4:	7020      	strb	r0, [r4, #0]
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 80203d6:	28ff      	cmp	r0, #255	; 0xff
 80203d8:	bf0c      	ite	eq
 80203da:	2200      	moveq	r2, #0
 80203dc:	7018      	strbne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 80203de:	f04f 0101 	mov.w	r1, #1
 80203e2:	48a8      	ldr	r0, [pc, #672]	; (8020684 <main+0xa3c>)
	if(buff_set == 0xFF){Bluetooth = 0x00;} else{Bluetooth = buff_set;}	
 80203e4:	bf08      	it	eq
 80203e6:	701a      	strbeq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(SET_MEASUREFIELD, 1);		
 80203e8:	f7ee fbb6 	bl	800eb58 <Calibration_Load_2byte>
 80203ec:	4ca6      	ldr	r4, [pc, #664]	; (8020688 <main+0xa40>)
 80203ee:	4ba7      	ldr	r3, [pc, #668]	; (802068c <main+0xa44>)
 80203f0:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 80203f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80203f6:	4290      	cmp	r0, r2
 80203f8:	bf0c      	ite	eq
 80203fa:	2200      	moveq	r2, #0
 80203fc:	8018      	strhne	r0, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 80203fe:	f04f 0101 	mov.w	r1, #1
 8020402:	48a3      	ldr	r0, [pc, #652]	; (8020690 <main+0xa48>)
	if(buff_set2 == 0xFFFF){Measure_Field = 0;} else{Measure_Field = buff_set2;}		
 8020404:	bf08      	it	eq
 8020406:	801a      	strheq	r2, [r3, #0]
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 8020408:	f7ee fba6 	bl	800eb58 <Calibration_Load_2byte>
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 802040c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020410:	4298      	cmp	r0, r3
 8020412:	4ba0      	ldr	r3, [pc, #640]	; (8020694 <main+0xa4c>)
	buff_set2 = Calibration_Load_2byte(FILENUMBER, 1);		
 8020414:	8020      	strh	r0, [r4, #0]
	if(buff_set2 == 0xFFFF){sdfile_cnt = 0;} else{sdfile_cnt = buff_set2;}	
 8020416:	bf06      	itte	eq
 8020418:	2200      	moveq	r2, #0
 802041a:	801a      	strheq	r2, [r3, #0]
 802041c:	8018      	strhne	r0, [r3, #0]
	Calibration_WaveLenght_Graph();
 802041e:	f7ee fc83 	bl	800ed28 <Calibration_WaveLenght_Graph>
	Calibration_Exposure_Change(exp_num);
 8020422:	4b9d      	ldr	r3, [pc, #628]	; (8020698 <main+0xa50>)
 8020424:	4d9d      	ldr	r5, [pc, #628]	; (802069c <main+0xa54>)
 8020426:	7818      	ldrb	r0, [r3, #0]
 8020428:	f7ee fc40 	bl	800ecac <Calibration_Exposure_Change>
	Calibration_Load_Pack(Mode_EL == 0x00 ? SPECTRAL_CORRECTION_L:SPECTRAL_CORRECTION_E, 0x400, Spectral_Corection_Buff);
 802042c:	4b88      	ldr	r3, [pc, #544]	; (8020650 <main+0xa08>)
 802042e:	489c      	ldr	r0, [pc, #624]	; (80206a0 <main+0xa58>)
 8020430:	781c      	ldrb	r4, [r3, #0]
 8020432:	4b9c      	ldr	r3, [pc, #624]	; (80206a4 <main+0xa5c>)
 8020434:	4a9c      	ldr	r2, [pc, #624]	; (80206a8 <main+0xa60>)
 8020436:	2c00      	cmp	r4, #0
 8020438:	bf18      	it	ne
 802043a:	4618      	movne	r0, r3
 802043c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020440:	f7ee fbf2 	bl	800ec28 <Calibration_Load_Pack>
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 8020444:	4899      	ldr	r0, [pc, #612]	; (80206ac <main+0xa64>)
 8020446:	f7ee fbdd 	bl	800ec04 <Calibration_Load_float>
 802044a:	4b99      	ldr	r3, [pc, #612]	; (80206b0 <main+0xa68>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 802044c:	4899      	ldr	r0, [pc, #612]	; (80206b4 <main+0xa6c>)
	EnergyFactor_E = Calibration_Load_float(ENERGY_FACTOR_E);
 802044e:	ed83 0a00 	vstr	s0, [r3]
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 8020452:	f7ee fbd7 	bl	800ec04 <Calibration_Load_float>
 8020456:	4b98      	ldr	r3, [pc, #608]	; (80206b8 <main+0xa70>)
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 8020458:	4a98      	ldr	r2, [pc, #608]	; (80206bc <main+0xa74>)
 802045a:	4899      	ldr	r0, [pc, #612]	; (80206c0 <main+0xa78>)
	EnergyFactor_L = Calibration_Load_float(ENERGY_FACTOR_L);
 802045c:	ed83 0a00 	vstr	s0, [r3]
	Calibration_Load_Pack(SPECTRAL_DAY, 0x400, Spectral_day);
 8020460:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020464:	f7ee fbe0 	bl	800ec28 <Calibration_Load_Pack>
	Calibration_Load_Pack(SPECTRAL_NIGHT, 0x400, Spectral_night);
 8020468:	4a96      	ldr	r2, [pc, #600]	; (80206c4 <main+0xa7c>)
 802046a:	4897      	ldr	r0, [pc, #604]	; (80206c8 <main+0xa80>)
 802046c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020470:	f7ee fbda 	bl	800ec28 <Calibration_Load_Pack>
	Calibration_Load_Pack(X10_CIE1964, 0x400, calibratre_x_1964);
 8020474:	4a95      	ldr	r2, [pc, #596]	; (80206cc <main+0xa84>)
 8020476:	4896      	ldr	r0, [pc, #600]	; (80206d0 <main+0xa88>)
 8020478:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802047c:	f7ee fbd4 	bl	800ec28 <Calibration_Load_Pack>
	Calibration_Load_Pack(Y10_CIE1964, 0x400, calibratre_y_1964);
 8020480:	4a94      	ldr	r2, [pc, #592]	; (80206d4 <main+0xa8c>)
 8020482:	4895      	ldr	r0, [pc, #596]	; (80206d8 <main+0xa90>)
 8020484:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020488:	f7ee fbce 	bl	800ec28 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z10_CIE1964, 0x400, calibratre_z_1964);
 802048c:	4a93      	ldr	r2, [pc, #588]	; (80206dc <main+0xa94>)
 802048e:	4894      	ldr	r0, [pc, #592]	; (80206e0 <main+0xa98>)
 8020490:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8020494:	f7ee fbc8 	bl	800ec28 <Calibration_Load_Pack>
	Calibration_Load_Pack(X2_CIE1931, 0x400, calibratre_x_1931);
 8020498:	4a92      	ldr	r2, [pc, #584]	; (80206e4 <main+0xa9c>)
 802049a:	4893      	ldr	r0, [pc, #588]	; (80206e8 <main+0xaa0>)
 802049c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80204a0:	f7ee fbc2 	bl	800ec28 <Calibration_Load_Pack>
	Calibration_Load_Pack(Z2_CIE1931, 0x400, calibratre_z_1931);
 80204a4:	4a91      	ldr	r2, [pc, #580]	; (80206ec <main+0xaa4>)
 80204a6:	4892      	ldr	r0, [pc, #584]	; (80206f0 <main+0xaa8>)
 80204a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80204ac:	f7ee fbbc 	bl	800ec28 <Calibration_Load_Pack>
 80204b0:	4b90      	ldr	r3, [pc, #576]	; (80206f4 <main+0xaac>)
 80204b2:	9303      	str	r3, [sp, #12]
 80204b4:	4b90      	ldr	r3, [pc, #576]	; (80206f8 <main+0xab0>)
 80204b6:	9305      	str	r3, [sp, #20]
 80204b8:	4b90      	ldr	r3, [pc, #576]	; (80206fc <main+0xab4>)
 80204ba:	9304      	str	r3, [sp, #16]
 80204bc:	46aa      	mov	sl, r5
 80204be:	f04f 6401 	mov.w	r4, #135266304	; 0x8100000
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 80204c2:	f04f 0800 	mov.w	r8, #0
 80204c6:	2100      	movs	r1, #0
 80204c8:	4620      	mov	r0, r4
 80204ca:	f7ee fb45 	bl	800eb58 <Calibration_Load_2byte>
 80204ce:	ee07 0a90 	vmov	s15, r0
 80204d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80204d6:	f504 4b90 	add.w	fp, r4, #18432	; 0x4800
 80204da:	ee17 0a90 	vmov	r0, s15
 80204de:	f7e0 f843 	bl	8000568 <__aeabi_f2d>
 80204e2:	4642      	mov	r2, r8
 80204e4:	464b      	mov	r3, r9
 80204e6:	f7e0 f9bd 	bl	8000864 <__aeabi_ddiv>
 80204ea:	a351      	add	r3, pc, #324	; (adr r3, 8020630 <main+0x9e8>)
 80204ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204f0:	f7df fedc 	bl	80002ac <__adddf3>
 80204f4:	f7e0 fb84 	bl	8000c00 <__aeabi_d2f>
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 80204f8:	2101      	movs	r1, #1
		WaveLenght[wave_num] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 0))/100.0+300.0;
 80204fa:	f8ca 0000 	str.w	r0, [sl]
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 80204fe:	4620      	mov	r0, r4
 8020500:	f7ee fb2a 	bl	800eb58 <Calibration_Load_2byte>
 8020504:	ee07 0a90 	vmov	s15, r0
 8020508:	eef8 7a67 	vcvt.f32.u32	s15, s15
 802050c:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8020510:	ee17 0a90 	vmov	r0, s15
 8020514:	f7e0 f828 	bl	8000568 <__aeabi_f2d>
 8020518:	4642      	mov	r2, r8
 802051a:	464b      	mov	r3, r9
 802051c:	f7e0 f9a2 	bl	8000864 <__aeabi_ddiv>
 8020520:	a343      	add	r3, pc, #268	; (adr r3, 8020630 <main+0x9e8>)
 8020522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020526:	f7df fec1 	bl	80002ac <__adddf3>
 802052a:	f7e0 fb69 	bl	8000c00 <__aeabi_d2f>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 802052e:	2102      	movs	r1, #2
		WaveLenght[wave_num+1] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 1))/100.0+300.0;
 8020530:	f8ca 0004 	str.w	r0, [sl, #4]
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 8020534:	4620      	mov	r0, r4
 8020536:	f7ee fb0f 	bl	800eb58 <Calibration_Load_2byte>
 802053a:	ee07 0a90 	vmov	s15, r0
 802053e:	eef8 7a67 	vcvt.f32.u32	s15, s15
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 8020542:	ed9f 8a6f 	vldr	s16, [pc, #444]	; 8020700 <main+0xab8>
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 8020546:	ee17 0a90 	vmov	r0, s15
 802054a:	f7e0 f80d 	bl	8000568 <__aeabi_f2d>
 802054e:	4642      	mov	r2, r8
 8020550:	464b      	mov	r3, r9
 8020552:	f7e0 f987 	bl	8000864 <__aeabi_ddiv>
 8020556:	a336      	add	r3, pc, #216	; (adr r3, 8020630 <main+0x9e8>)
 8020558:	e9d3 2300 	ldrd	r2, r3, [r3]
 802055c:	f7df fea6 	bl	80002ac <__adddf3>
 8020560:	f7e0 fb4e 	bl	8000c00 <__aeabi_d2f>
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 8020564:	2103      	movs	r1, #3
		WaveLenght[wave_num+2] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 2))/100.0+300.0;
 8020566:	f8ca 0008 	str.w	r0, [sl, #8]
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 802056a:	4620      	mov	r0, r4
 802056c:	f7ee faf4 	bl	800eb58 <Calibration_Load_2byte>
 8020570:	ee07 0a90 	vmov	s15, r0
 8020574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020578:	f10a 0a10 	add.w	sl, sl, #16
 802057c:	ee17 0a90 	vmov	r0, s15
 8020580:	f7df fff2 	bl	8000568 <__aeabi_f2d>
 8020584:	4642      	mov	r2, r8
 8020586:	464b      	mov	r3, r9
 8020588:	f7e0 f96c 	bl	8000864 <__aeabi_ddiv>
 802058c:	a328      	add	r3, pc, #160	; (adr r3, 8020630 <main+0x9e8>)
 802058e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020592:	f7df fe8b 	bl	80002ac <__adddf3>
 8020596:	f7e0 fb33 	bl	8000c00 <__aeabi_d2f>
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 802059a:	2100      	movs	r1, #0
		WaveLenght[wave_num+3] = ((float)Calibration_Load_2byte(WAVELENGHT+i, 3))/100.0+300.0;
 802059c:	f84a 0c04 	str.w	r0, [sl, #-4]
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 80205a0:	4658      	mov	r0, fp
 80205a2:	f7ee fad9 	bl	800eb58 <Calibration_Load_2byte>
 80205a6:	ee07 0a90 	vmov	s15, r0
 80205aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80205ae:	9b03      	ldr	r3, [sp, #12]
 80205b0:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 80205b4:	2101      	movs	r1, #1
 80205b6:	4658      	mov	r0, fp
 80205b8:	3710      	adds	r7, #16
 80205ba:	3610      	adds	r6, #16
		Hazard_Blue[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 0))/1000.0;
 80205bc:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 80205c0:	f7ee faca 	bl	800eb58 <Calibration_Load_2byte>
 80205c4:	ee07 0a90 	vmov	s15, r0
 80205c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80205cc:	9b03      	ldr	r3, [sp, #12]
 80205ce:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 80205d2:	2102      	movs	r1, #2
 80205d4:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 1))/1000.0;
 80205d6:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 80205da:	f7ee fabd 	bl	800eb58 <Calibration_Load_2byte>
 80205de:	ee07 0a90 	vmov	s15, r0
 80205e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80205e6:	9b03      	ldr	r3, [sp, #12]
 80205e8:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 80205ec:	2103      	movs	r1, #3
 80205ee:	4658      	mov	r0, fp
 80205f0:	f504 4ba0 	add.w	fp, r4, #20480	; 0x5000
 80205f4:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Blue[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 2))/1000.0;
 80205f8:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 80205fc:	f7ee faac 	bl	800eb58 <Calibration_Load_2byte>
 8020600:	ee07 0a90 	vmov	s15, r0
 8020604:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020608:	9b03      	ldr	r3, [sp, #12]
 802060a:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 802060e:	2100      	movs	r1, #0
 8020610:	4658      	mov	r0, fp
		Hazard_Blue[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_BLUELIGHT+i, 3))/1000.0;
 8020612:	edc3 7a03 	vstr	s15, [r3, #12]
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 8020616:	f7ee fa9f 	bl	800eb58 <Calibration_Load_2byte>
 802061a:	ee07 0a90 	vmov	s15, r0
 802061e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020622:	9b05      	ldr	r3, [sp, #20]
 8020624:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 8020628:	2101      	movs	r1, #1
 802062a:	e06d      	b.n	8020708 <main+0xac0>
 802062c:	f3af 8000 	nop.w
 8020630:	00000000 	.word	0x00000000
 8020634:	4072c000 	.word	0x4072c000
 8020638:	20009fdc 	.word	0x20009fdc
 802063c:	20090bb8 	.word	0x20090bb8
 8020640:	20090a24 	.word	0x20090a24
 8020644:	20049bdc 	.word	0x20049bdc
 8020648:	2004abdc 	.word	0x2004abdc
 802064c:	0812b030 	.word	0x0812b030
 8020650:	20000a48 	.word	0x20000a48
 8020654:	0812b040 	.word	0x0812b040
 8020658:	20004c72 	.word	0x20004c72
 802065c:	0812b048 	.word	0x0812b048
 8020660:	20004c6f 	.word	0x20004c6f
 8020664:	0812b050 	.word	0x0812b050
 8020668:	20004c70 	.word	0x20004c70
 802066c:	0812b058 	.word	0x0812b058
 8020670:	20004c73 	.word	0x20004c73
 8020674:	0812b060 	.word	0x0812b060
 8020678:	2008bce9 	.word	0x2008bce9
 802067c:	0812b068 	.word	0x0812b068
 8020680:	2008bcea 	.word	0x2008bcea
 8020684:	0812b038 	.word	0x0812b038
 8020688:	20090ab8 	.word	0x20090ab8
 802068c:	20004c76 	.word	0x20004c76
 8020690:	0812b020 	.word	0x0812b020
 8020694:	20004c9e 	.word	0x20004c9e
 8020698:	2008b852 	.word	0x2008b852
 802069c:	2004fbe4 	.word	0x2004fbe4
 80206a0:	08101838 	.word	0x08101838
 80206a4:	08100838 	.word	0x08100838
 80206a8:	2004cbe0 	.word	0x2004cbe0
 80206ac:	08102838 	.word	0x08102838
 80206b0:	20004fc4 	.word	0x20004fc4
 80206b4:	0810283c 	.word	0x0810283c
 80206b8:	20004fc8 	.word	0x20004fc8
 80206bc:	2004dbe0 	.word	0x2004dbe0
 80206c0:	08102840 	.word	0x08102840
 80206c4:	2004ebe0 	.word	0x2004ebe0
 80206c8:	08103844 	.word	0x08103844
 80206cc:	200867b0 	.word	0x200867b0
 80206d0:	08107840 	.word	0x08107840
 80206d4:	200877b0 	.word	0x200877b0
 80206d8:	08108840 	.word	0x08108840
 80206dc:	200897b0 	.word	0x200897b0
 80206e0:	08109840 	.word	0x08109840
 80206e4:	200857b0 	.word	0x200857b0
 80206e8:	08105840 	.word	0x08105840
 80206ec:	200887b0 	.word	0x200887b0
 80206f0:	08106840 	.word	0x08106840
 80206f4:	20004fd8 	.word	0x20004fd8
 80206f8:	20005fd8 	.word	0x20005fd8
 80206fc:	2004bbdc 	.word	0x2004bbdc
 8020700:	447a0000 	.word	0x447a0000
 8020704:	40590000 	.word	0x40590000
 8020708:	4658      	mov	r0, fp
		Hazard_Retina[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 0))/1000.0;
 802070a:	edc3 7a00 	vstr	s15, [r3]
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 802070e:	f7ee fa23 	bl	800eb58 <Calibration_Load_2byte>
 8020712:	ee07 0a90 	vmov	s15, r0
 8020716:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 802071a:	9b05      	ldr	r3, [sp, #20]
 802071c:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 8020720:	2102      	movs	r1, #2
 8020722:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 1))/1000.0;
 8020724:	edc3 7a01 	vstr	s15, [r3, #4]
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 8020728:	f7ee fa16 	bl	800eb58 <Calibration_Load_2byte>
 802072c:	ee07 0a90 	vmov	s15, r0
 8020730:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020734:	9b05      	ldr	r3, [sp, #20]
 8020736:	eec7 7a08 	vdiv.f32	s15, s14, s16
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 802073a:	2103      	movs	r1, #3
 802073c:	4658      	mov	r0, fp
 802073e:	f504 4b28 	add.w	fp, r4, #43008	; 0xa800
 8020742:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
		Hazard_Retina[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 2))/1000.0;
 8020746:	edc3 7a02 	vstr	s15, [r3, #8]
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 802074a:	f7ee fa05 	bl	800eb58 <Calibration_Load_2byte>
 802074e:	ee07 0a90 	vmov	s15, r0
 8020752:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8020756:	9b05      	ldr	r3, [sp, #20]
 8020758:	eec7 7a08 	vdiv.f32	s15, s14, s16
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 802075c:	2100      	movs	r1, #0
 802075e:	4658      	mov	r0, fp
		Hazard_Retina[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_RETINA+i, 3))/1000.0;
 8020760:	edc3 7a03 	vstr	s15, [r3, #12]
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 8020764:	f7ee f9f8 	bl	800eb58 <Calibration_Load_2byte>
 8020768:	ee07 0a90 	vmov	s15, r0
 802076c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020770:	ee17 0a90 	vmov	r0, s15
 8020774:	f7df fef8 	bl	8000568 <__aeabi_f2d>
 8020778:	4642      	mov	r2, r8
 802077a:	464b      	mov	r3, r9
 802077c:	f7e0 f872 	bl	8000864 <__aeabi_ddiv>
 8020780:	2200      	movs	r2, #0
 8020782:	4bda      	ldr	r3, [pc, #872]	; (8020aec <main+0xea4>)
 8020784:	f7df fd90 	bl	80002a8 <__aeabi_dsub>
 8020788:	f7e0 fa3a 	bl	8000c00 <__aeabi_d2f>
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 802078c:	2101      	movs	r1, #1
		S0_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 0))/100.0-50;
 802078e:	f847 0c10 	str.w	r0, [r7, #-16]
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 8020792:	4658      	mov	r0, fp
 8020794:	f7ee f9e0 	bl	800eb58 <Calibration_Load_2byte>
 8020798:	ee07 0a90 	vmov	s15, r0
 802079c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80207a0:	ee17 0a90 	vmov	r0, s15
 80207a4:	f7df fee0 	bl	8000568 <__aeabi_f2d>
 80207a8:	4642      	mov	r2, r8
 80207aa:	464b      	mov	r3, r9
 80207ac:	f7e0 f85a 	bl	8000864 <__aeabi_ddiv>
 80207b0:	2200      	movs	r2, #0
 80207b2:	4bce      	ldr	r3, [pc, #824]	; (8020aec <main+0xea4>)
 80207b4:	f7df fd78 	bl	80002a8 <__aeabi_dsub>
 80207b8:	f7e0 fa22 	bl	8000c00 <__aeabi_d2f>
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 80207bc:	2102      	movs	r1, #2
		S0_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 1))/100.0-50;
 80207be:	f847 0c0c 	str.w	r0, [r7, #-12]
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 80207c2:	4658      	mov	r0, fp
 80207c4:	f7ee f9c8 	bl	800eb58 <Calibration_Load_2byte>
 80207c8:	ee07 0a90 	vmov	s15, r0
 80207cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80207d0:	ee17 0a90 	vmov	r0, s15
 80207d4:	f7df fec8 	bl	8000568 <__aeabi_f2d>
 80207d8:	4642      	mov	r2, r8
 80207da:	464b      	mov	r3, r9
 80207dc:	f7e0 f842 	bl	8000864 <__aeabi_ddiv>
 80207e0:	2200      	movs	r2, #0
 80207e2:	4bc2      	ldr	r3, [pc, #776]	; (8020aec <main+0xea4>)
 80207e4:	f7df fd60 	bl	80002a8 <__aeabi_dsub>
 80207e8:	f7e0 fa0a 	bl	8000c00 <__aeabi_d2f>
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 80207ec:	2103      	movs	r1, #3
		S0_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 2))/100.0-50;
 80207ee:	f847 0c08 	str.w	r0, [r7, #-8]
		S0_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S0+i, 3))/100.0-50;
 80207f2:	4658      	mov	r0, fp
 80207f4:	f7ee f9b0 	bl	800eb58 <Calibration_Load_2byte>
 80207f8:	ee07 0a90 	vmov	s15, r0
 80207fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020800:	f504 4b30 	add.w	fp, r4, #45056	; 0xb000
 8020804:	ee17 0a90 	vmov	r0, s15
 8020808:	f7df feae 	bl	8000568 <__aeabi_f2d>
 802080c:	4642      	mov	r2, r8
 802080e:	464b      	mov	r3, r9
 8020810:	f7e0 f828 	bl	8000864 <__aeabi_ddiv>
 8020814:	2200      	movs	r2, #0
 8020816:	4bb5      	ldr	r3, [pc, #724]	; (8020aec <main+0xea4>)
 8020818:	f7df fd46 	bl	80002a8 <__aeabi_dsub>
 802081c:	f7e0 f9f0 	bl	8000c00 <__aeabi_d2f>
 8020820:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 8020824:	f847 0c04 	str.w	r0, [r7, #-4]
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 8020828:	2100      	movs	r1, #0
 802082a:	4658      	mov	r0, fp
 802082c:	f7ee f994 	bl	800eb58 <Calibration_Load_2byte>
 8020830:	ee07 0a90 	vmov	s15, r0
 8020834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020838:	ee17 0a90 	vmov	r0, s15
 802083c:	f7df fe94 	bl	8000568 <__aeabi_f2d>
 8020840:	4642      	mov	r2, r8
 8020842:	464b      	mov	r3, r9
 8020844:	f7e0 f80e 	bl	8000864 <__aeabi_ddiv>
 8020848:	2200      	movs	r2, #0
 802084a:	4ba8      	ldr	r3, [pc, #672]	; (8020aec <main+0xea4>)
 802084c:	f7df fd2c 	bl	80002a8 <__aeabi_dsub>
 8020850:	f7e0 f9d6 	bl	8000c00 <__aeabi_d2f>
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 8020854:	2101      	movs	r1, #1
		S1_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 0))/100.0-50;
 8020856:	f846 0c10 	str.w	r0, [r6, #-16]
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 802085a:	4658      	mov	r0, fp
 802085c:	f7ee f97c 	bl	800eb58 <Calibration_Load_2byte>
 8020860:	ee07 0a90 	vmov	s15, r0
 8020864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020868:	ee17 0a90 	vmov	r0, s15
 802086c:	f7df fe7c 	bl	8000568 <__aeabi_f2d>
 8020870:	4642      	mov	r2, r8
 8020872:	464b      	mov	r3, r9
 8020874:	f7df fff6 	bl	8000864 <__aeabi_ddiv>
 8020878:	2200      	movs	r2, #0
 802087a:	4b9c      	ldr	r3, [pc, #624]	; (8020aec <main+0xea4>)
 802087c:	f7df fd14 	bl	80002a8 <__aeabi_dsub>
 8020880:	f7e0 f9be 	bl	8000c00 <__aeabi_d2f>
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 8020884:	2102      	movs	r1, #2
		S1_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 1))/100.0-50;
 8020886:	f846 0c0c 	str.w	r0, [r6, #-12]
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 802088a:	4658      	mov	r0, fp
 802088c:	f7ee f964 	bl	800eb58 <Calibration_Load_2byte>
 8020890:	ee07 0a90 	vmov	s15, r0
 8020894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020898:	ee17 0a90 	vmov	r0, s15
 802089c:	f7df fe64 	bl	8000568 <__aeabi_f2d>
 80208a0:	4642      	mov	r2, r8
 80208a2:	464b      	mov	r3, r9
 80208a4:	f7df ffde 	bl	8000864 <__aeabi_ddiv>
 80208a8:	2200      	movs	r2, #0
 80208aa:	4b90      	ldr	r3, [pc, #576]	; (8020aec <main+0xea4>)
 80208ac:	f7df fcfc 	bl	80002a8 <__aeabi_dsub>
 80208b0:	f7e0 f9a6 	bl	8000c00 <__aeabi_d2f>
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 80208b4:	2103      	movs	r1, #3
		S1_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 2))/100.0-50;
 80208b6:	f846 0c08 	str.w	r0, [r6, #-8]
		S1_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S1+i, 3))/100.0-50;
 80208ba:	4658      	mov	r0, fp
 80208bc:	f7ee f94c 	bl	800eb58 <Calibration_Load_2byte>
 80208c0:	ee07 0a90 	vmov	s15, r0
 80208c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80208c8:	f504 4b38 	add.w	fp, r4, #47104	; 0xb800
 80208cc:	ee17 0a90 	vmov	r0, s15
 80208d0:	f7df fe4a 	bl	8000568 <__aeabi_f2d>
 80208d4:	4642      	mov	r2, r8
 80208d6:	464b      	mov	r3, r9
 80208d8:	f7df ffc4 	bl	8000864 <__aeabi_ddiv>
 80208dc:	2200      	movs	r2, #0
 80208de:	4b83      	ldr	r3, [pc, #524]	; (8020aec <main+0xea4>)
 80208e0:	f7df fce2 	bl	80002a8 <__aeabi_dsub>
 80208e4:	f7e0 f98c 	bl	8000c00 <__aeabi_d2f>
 80208e8:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 80208ec:	f846 0c04 	str.w	r0, [r6, #-4]
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 80208f0:	2100      	movs	r1, #0
 80208f2:	4658      	mov	r0, fp
 80208f4:	f7ee f930 	bl	800eb58 <Calibration_Load_2byte>
 80208f8:	ee07 0a90 	vmov	s15, r0
 80208fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020900:	3408      	adds	r4, #8
 8020902:	ee17 0a90 	vmov	r0, s15
 8020906:	f7df fe2f 	bl	8000568 <__aeabi_f2d>
 802090a:	4642      	mov	r2, r8
 802090c:	464b      	mov	r3, r9
 802090e:	f7df ffa9 	bl	8000864 <__aeabi_ddiv>
 8020912:	2200      	movs	r2, #0
 8020914:	4b75      	ldr	r3, [pc, #468]	; (8020aec <main+0xea4>)
 8020916:	f7df fcc7 	bl	80002a8 <__aeabi_dsub>
 802091a:	f7e0 f971 	bl	8000c00 <__aeabi_d2f>
 802091e:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 8020920:	2101      	movs	r1, #1
		S2_lambda[wave_num] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 0))/100.0-50;
 8020922:	6018      	str	r0, [r3, #0]
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 8020924:	4658      	mov	r0, fp
 8020926:	f7ee f917 	bl	800eb58 <Calibration_Load_2byte>
 802092a:	ee07 0a90 	vmov	s15, r0
 802092e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020932:	ee17 0a90 	vmov	r0, s15
 8020936:	f7df fe17 	bl	8000568 <__aeabi_f2d>
 802093a:	4642      	mov	r2, r8
 802093c:	464b      	mov	r3, r9
 802093e:	f7df ff91 	bl	8000864 <__aeabi_ddiv>
 8020942:	2200      	movs	r2, #0
 8020944:	4b69      	ldr	r3, [pc, #420]	; (8020aec <main+0xea4>)
 8020946:	f7df fcaf 	bl	80002a8 <__aeabi_dsub>
 802094a:	f7e0 f959 	bl	8000c00 <__aeabi_d2f>
 802094e:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 8020950:	2102      	movs	r1, #2
		S2_lambda[wave_num+1] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 1))/100.0-50;
 8020952:	6058      	str	r0, [r3, #4]
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 8020954:	4658      	mov	r0, fp
 8020956:	f7ee f8ff 	bl	800eb58 <Calibration_Load_2byte>
 802095a:	ee07 0a90 	vmov	s15, r0
 802095e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020962:	ee17 0a90 	vmov	r0, s15
 8020966:	f7df fdff 	bl	8000568 <__aeabi_f2d>
 802096a:	4642      	mov	r2, r8
 802096c:	464b      	mov	r3, r9
 802096e:	f7df ff79 	bl	8000864 <__aeabi_ddiv>
 8020972:	2200      	movs	r2, #0
 8020974:	4b5d      	ldr	r3, [pc, #372]	; (8020aec <main+0xea4>)
 8020976:	f7df fc97 	bl	80002a8 <__aeabi_dsub>
 802097a:	f7e0 f941 	bl	8000c00 <__aeabi_d2f>
 802097e:	9b04      	ldr	r3, [sp, #16]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 8020980:	2103      	movs	r1, #3
		S2_lambda[wave_num+2] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 2))/100.0-50;
 8020982:	6098      	str	r0, [r3, #8]
		S2_lambda[wave_num+3] = ((float)Calibration_Load_2byte(SPECTRAL_S2+i, 3))/100.0-50;
 8020984:	4658      	mov	r0, fp
 8020986:	f7ee f8e7 	bl	800eb58 <Calibration_Load_2byte>
 802098a:	ee07 0a90 	vmov	s15, r0
 802098e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8020992:	ee17 0a90 	vmov	r0, s15
 8020996:	f7df fde7 	bl	8000568 <__aeabi_f2d>
 802099a:	4642      	mov	r2, r8
 802099c:	464b      	mov	r3, r9
 802099e:	f7df ff61 	bl	8000864 <__aeabi_ddiv>
 80209a2:	4b52      	ldr	r3, [pc, #328]	; (8020aec <main+0xea4>)
 80209a4:	2200      	movs	r2, #0
 80209a6:	f7df fc7f 	bl	80002a8 <__aeabi_dsub>
 80209aa:	f7e0 f929 	bl	8000c00 <__aeabi_d2f>
 80209ae:	9b04      	ldr	r3, [sp, #16]
 80209b0:	60d8      	str	r0, [r3, #12]
 80209b2:	9b03      	ldr	r3, [sp, #12]
 80209b4:	3310      	adds	r3, #16
 80209b6:	9303      	str	r3, [sp, #12]
 80209b8:	9b05      	ldr	r3, [sp, #20]
 80209ba:	3310      	adds	r3, #16
 80209bc:	9305      	str	r3, [sp, #20]
 80209be:	9b04      	ldr	r3, [sp, #16]
 80209c0:	3310      	adds	r3, #16
 80209c2:	9304      	str	r3, [sp, #16]
	for(uint16_t i = 0; i < 2*1024; i=i+8){
 80209c4:	4b4a      	ldr	r3, [pc, #296]	; (8020af0 <main+0xea8>)
 80209c6:	429c      	cmp	r4, r3
 80209c8:	f47f ad7d 	bne.w	80204c6 <main+0x87e>
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 80209cc:	2100      	movs	r1, #0
 80209ce:	4849      	ldr	r0, [pc, #292]	; (8020af4 <main+0xeac>)
 80209d0:	f7ee f8c2 	bl	800eb58 <Calibration_Load_2byte>
 80209d4:	4b48      	ldr	r3, [pc, #288]	; (8020af8 <main+0xeb0>)
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 80209d6:	2101      	movs	r1, #1
	Calibration_date =	Calibration_Load_2byte(CALIBRATION_DATE, 0);
 80209d8:	8018      	strh	r0, [r3, #0]
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 80209da:	4846      	ldr	r0, [pc, #280]	; (8020af4 <main+0xeac>)
 80209dc:	f7ee f8bc 	bl	800eb58 <Calibration_Load_2byte>
 80209e0:	4b46      	ldr	r3, [pc, #280]	; (8020afc <main+0xeb4>)
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 80209e2:	2100      	movs	r1, #0
	Calibration_month =	Calibration_Load_2byte(CALIBRATION_DATE, 1);
 80209e4:	8018      	strh	r0, [r3, #0]
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 80209e6:	4846      	ldr	r0, [pc, #280]	; (8020b00 <main+0xeb8>)
 80209e8:	f7ee f8b6 	bl	800eb58 <Calibration_Load_2byte>
 80209ec:	4b45      	ldr	r3, [pc, #276]	; (8020b04 <main+0xebc>)
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 80209ee:	2100      	movs	r1, #0
	Calibration_year =  Calibration_Load_2byte(CALIBRATION_YEAR, 0);
 80209f0:	8018      	strh	r0, [r3, #0]
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 80209f2:	4845      	ldr	r0, [pc, #276]	; (8020b08 <main+0xec0>)
 80209f4:	f7ee f8b0 	bl	800eb58 <Calibration_Load_2byte>
 80209f8:	4b44      	ldr	r3, [pc, #272]	; (8020b0c <main+0xec4>)
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 80209fa:	2101      	movs	r1, #1
	Serial_part_device =  Calibration_Load_2byte(SERIAL_DEVICE, 0);
 80209fc:	8018      	strh	r0, [r3, #0]
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 80209fe:	4842      	ldr	r0, [pc, #264]	; (8020b08 <main+0xec0>)
 8020a00:	f7ee f8aa 	bl	800eb58 <Calibration_Load_2byte>
 8020a04:	4b42      	ldr	r3, [pc, #264]	; (8020b10 <main+0xec8>)
 8020a06:	4943      	ldr	r1, [pc, #268]	; (8020b14 <main+0xecc>)
 8020a08:	8018      	strh	r0, [r3, #0]
 8020a0a:	4b43      	ldr	r3, [pc, #268]	; (8020b18 <main+0xed0>)
 8020a0c:	4a43      	ldr	r2, [pc, #268]	; (8020b1c <main+0xed4>)
 8020a0e:	f8b3 e000 	ldrh.w	lr, [r3]
 8020a12:	4b43      	ldr	r3, [pc, #268]	; (8020b20 <main+0xed8>)
 8020a14:	8810      	ldrh	r0, [r2, #0]
 8020a16:	f8b3 8000 	ldrh.w	r8, [r3]
 8020a1a:	880e      	ldrh	r6, [r1, #0]
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 8020a1c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8020b24 <main+0xedc>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 8020a20:	eddf 6a41 	vldr	s13, [pc, #260]	; 8020b28 <main+0xee0>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 8020a24:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8020b2c <main+0xee4>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 8020a28:	eddf 5a41 	vldr	s11, [pc, #260]	; 8020b30 <main+0xee8>
	Serial_number_device =  Calibration_Load_2byte(SERIAL_DEVICE, 1);
 8020a2c:	2300      	movs	r3, #0
 8020a2e:	461c      	mov	r4, r3
 8020a30:	461f      	mov	r7, r3
 8020a32:	469c      	mov	ip, r3
 8020a34:	4699      	mov	r9, r3
 8020a36:	468a      	mov	sl, r1
		if(WaveLenght[i]<=400 && WaveLenght[i+1]>=400)
 8020a38:	ecf5 7a01 	vldmia	r5!, {s15}
 8020a3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a44:	b299      	uxth	r1, r3
 8020a46:	d807      	bhi.n	8020a58 <main+0xe10>
 8020a48:	ed95 5a00 	vldr	s10, [r5]
 8020a4c:	eeb4 5ac7 	vcmpe.f32	s10, s14
 8020a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a54:	f280 80f3 	bge.w	8020c3e <main+0xff6>
		} else if (WaveLenght[i]<=500 && WaveLenght[i+1]>=500)
 8020a58:	eef4 7ae6 	vcmpe.f32	s15, s13
 8020a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a60:	d807      	bhi.n	8020a72 <main+0xe2a>
 8020a62:	ed95 5a00 	vldr	s10, [r5]
 8020a66:	eeb4 5ae6 	vcmpe.f32	s10, s13
 8020a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a6e:	f280 80ea 	bge.w	8020c46 <main+0xffe>
		}else if (WaveLenght[i]<=600 && WaveLenght[i+1]>=600)
 8020a72:	eef4 7ac6 	vcmpe.f32	s15, s12
 8020a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a7a:	d807      	bhi.n	8020a8c <main+0xe44>
 8020a7c:	ed95 5a00 	vldr	s10, [r5]
 8020a80:	eeb4 5ac6 	vcmpe.f32	s10, s12
 8020a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a88:	f280 80e1 	bge.w	8020c4e <main+0x1006>
		else if (WaveLenght[i]<=700 && WaveLenght[i+1]>=700)
 8020a8c:	eef4 7ae5 	vcmpe.f32	s15, s11
 8020a90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020a94:	d808      	bhi.n	8020aa8 <main+0xe60>
 8020a96:	edd5 7a00 	vldr	s15, [r5]
			PARGraph_IR = i;
 8020a9a:	eef4 7a65 	vcmp.f32	s15, s11
 8020a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020aa2:	bfa4      	itt	ge
 8020aa4:	4608      	movge	r0, r1
 8020aa6:	2401      	movge	r4, #1
 8020aa8:	3301      	adds	r3, #1
	for(uint16_t i = 0; i < 1024; i++){
 8020aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020aae:	d1c3      	bne.n	8020a38 <main+0xdf0>
 8020ab0:	f1b9 0f00 	cmp.w	r9, #0
 8020ab4:	d002      	beq.n	8020abc <main+0xe74>
 8020ab6:	4b1a      	ldr	r3, [pc, #104]	; (8020b20 <main+0xed8>)
 8020ab8:	f8a3 8000 	strh.w	r8, [r3]
 8020abc:	f1bc 0f00 	cmp.w	ip, #0
 8020ac0:	d002      	beq.n	8020ac8 <main+0xe80>
 8020ac2:	4b15      	ldr	r3, [pc, #84]	; (8020b18 <main+0xed0>)
 8020ac4:	f8a3 e000 	strh.w	lr, [r3]
 8020ac8:	b10f      	cbz	r7, 8020ace <main+0xe86>
 8020aca:	f8aa 6000 	strh.w	r6, [sl]
 8020ace:	b104      	cbz	r4, 8020ad2 <main+0xe8a>
 8020ad0:	8010      	strh	r0, [r2, #0]
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 8020ad2:	4b18      	ldr	r3, [pc, #96]	; (8020b34 <main+0xeec>)
 8020ad4:	4a18      	ldr	r2, [pc, #96]	; (8020b38 <main+0xef0>)
 8020ad6:	edd3 7a00 	vldr	s15, [r3]
 8020ada:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8020b3c <main+0xef4>
 8020ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020ae2:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 8020ae6:	edd3 7aff 	vldr	s15, [r3, #1020]	; 0x3fc
 8020aea:	e029      	b.n	8020b40 <main+0xef8>
 8020aec:	40490000 	.word	0x40490000
 8020af0:	08100800 	.word	0x08100800
 8020af4:	0812a048 	.word	0x0812a048
 8020af8:	20090940 	.word	0x20090940
 8020afc:	20090954 	.word	0x20090954
 8020b00:	0812a04c 	.word	0x0812a04c
 8020b04:	20090c60 	.word	0x20090c60
 8020b08:	0812a040 	.word	0x0812a040
 8020b0c:	20090944 	.word	0x20090944
 8020b10:	20090d08 	.word	0x20090d08
 8020b14:	20090f20 	.word	0x20090f20
 8020b18:	20090dbc 	.word	0x20090dbc
 8020b1c:	20090cf8 	.word	0x20090cf8
 8020b20:	20090cfa 	.word	0x20090cfa
 8020b24:	43c80000 	.word	0x43c80000
 8020b28:	43fa0000 	.word	0x43fa0000
 8020b2c:	44160000 	.word	0x44160000
 8020b30:	442f0000 	.word	0x442f0000
 8020b34:	2004fbe4 	.word	0x2004fbe4
 8020b38:	20050be4 	.word	0x20050be4
 8020b3c:	20004fd4 	.word	0x20004fd4
	WaveLenght_Graph[0] = (uint16_t)WaveLenght[0];
 8020b40:	8011      	strh	r1, [r2, #0]
	WaveLenght_Graph[1] = (uint16_t)WaveLenght[255];
 8020b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020b46:	ee17 1a90 	vmov	r1, s15
 8020b4a:	8051      	strh	r1, [r2, #2]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 8020b4c:	f203 71fc 	addw	r1, r3, #2044	; 0x7fc
 8020b50:	edd1 7a00 	vldr	s15, [r1]
 8020b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 8020b58:	f603 73fc 	addw	r3, r3, #4092	; 0xffc
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 8020b5c:	ee17 1a90 	vmov	r1, s15
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 8020b60:	edd3 7a00 	vldr	s15, [r3]
	WaveLenght_Graph[2] = (uint16_t)WaveLenght[511];
 8020b64:	8091      	strh	r1, [r2, #4]
	WaveLenght_Graph[3] = (uint16_t)WaveLenght[1023];
 8020b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020b6a:	ee17 3a90 	vmov	r3, s15
 8020b6e:	80d3      	strh	r3, [r2, #6]
	if(Mode_EL == 0){
 8020b70:	4b67      	ldr	r3, [pc, #412]	; (8020d10 <main+0x10c8>)
 8020b72:	781a      	ldrb	r2, [r3, #0]
 8020b74:	4b67      	ldr	r3, [pc, #412]	; (8020d14 <main+0x10cc>)
 8020b76:	2a00      	cmp	r2, #0
 8020b78:	d16c      	bne.n	8020c54 <main+0x100c>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_L);
 8020b7a:	4a67      	ldr	r2, [pc, #412]	; (8020d18 <main+0x10d0>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 8020b7c:	ed93 0a00 	vldr	s0, [r3]
 8020b80:	edd2 0a00 	vldr	s1, [r2]
 8020b84:	f7fb f894 	bl	801bcb0 <Rabs_calc_Factor2_Settings_change>
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&hlpuart1);} else{HAL_UART_MspInit(&hlpuart1);}
 8020b88:	4b64      	ldr	r3, [pc, #400]	; (8020d1c <main+0x10d4>)
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 8020b8a:	ed89 0a00 	vstr	s0, [r9]
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&hlpuart1);} else{HAL_UART_MspInit(&hlpuart1);}
 8020b8e:	781b      	ldrb	r3, [r3, #0]
 8020b90:	4863      	ldr	r0, [pc, #396]	; (8020d20 <main+0x10d8>)
 8020b92:	2b00      	cmp	r3, #0
 8020b94:	d160      	bne.n	8020c58 <main+0x1010>
 8020b96:	f000 fc1d 	bl	80213d4 <HAL_UART_MspDeInit>
	GUI_screen_state = Calibration_Load_1byte(SCREENADDR, 3);
 8020b9a:	2103      	movs	r1, #3
 8020b9c:	4861      	ldr	r0, [pc, #388]	; (8020d24 <main+0x10dc>)
 8020b9e:	4c62      	ldr	r4, [pc, #392]	; (8020d28 <main+0x10e0>)
 8020ba0:	f7ed fffe 	bl	800eba0 <Calibration_Load_1byte>
 8020ba4:	7020      	strb	r0, [r4, #0]
	Calculate_Data();
 8020ba6:	f7fe f803 	bl	801ebb0 <Calculate_Data>
	Get_Battery_Level();
 8020baa:	f7fe f935 	bl	801ee18 <Get_Battery_Level>
	HAL_Delay(1);
 8020bae:	2001      	movs	r0, #1
 8020bb0:	f7e0 fa34 	bl	800101c <HAL_Delay>
	Image_load(TKA_LOGO_BMP, TKA_LOGO_BMP_SIZEX*TKA_LOGO_BMP_SIZEY);
 8020bb4:	f64b 61e6 	movw	r1, #48870	; 0xbee6
 8020bb8:	2000      	movs	r0, #0
 8020bba:	f7fb f849 	bl	801bc50 <Image_load>
	CRC_STATUS = CRC_Check(FLASH_DATA_START, FLASH_DATA_SIZE, FLASH_CRC_ADDR);
 8020bbe:	4a5b      	ldr	r2, [pc, #364]	; (8020d2c <main+0x10e4>)
 8020bc0:	f245 410a 	movw	r1, #21514	; 0x540a
 8020bc4:	f04f 6001 	mov.w	r0, #135266304	; 0x8100000
 8020bc8:	f7eb f904 	bl	800bdd4 <CRC_Check>
 8020bcc:	4b58      	ldr	r3, [pc, #352]	; (8020d30 <main+0x10e8>)
 8020bce:	46a0      	mov	r8, r4
 8020bd0:	7018      	strb	r0, [r3, #0]
	if(CRC_STATUS == CRC_OK)
 8020bd2:	2800      	cmp	r0, #0
 8020bd4:	d143      	bne.n	8020c5e <main+0x1016>
		GUI_Title_Screen();
 8020bd6:	f7ee f9c3 	bl	800ef60 <GUI_Title_Screen>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8020bda:	4c56      	ldr	r4, [pc, #344]	; (8020d34 <main+0x10ec>)
		HAL_Delay(2000);	
 8020bdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8020be0:	f7e0 fa1c 	bl	800101c <HAL_Delay>
		usb_receive_processing();
 8020be4:	f7fe fb5a 	bl	801f29c <usb_receive_processing>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8020be8:	7823      	ldrb	r3, [r4, #0]
 8020bea:	07d8      	lsls	r0, r3, #31
 8020bec:	d53c      	bpl.n	8020c68 <main+0x1020>
 8020bee:	4b52      	ldr	r3, [pc, #328]	; (8020d38 <main+0x10f0>)
 8020bf0:	4852      	ldr	r0, [pc, #328]	; (8020d3c <main+0x10f4>)
 8020bf2:	781b      	ldrb	r3, [r3, #0]
 8020bf4:	f013 0f01 	tst.w	r3, #1
 8020bf8:	bf18      	it	ne
 8020bfa:	f44f 305c 	movne.w	r0, #225280	; 0x37000
 8020bfe:	f24d 21f0 	movw	r1, #54000	; 0xd2f0
 8020c02:	f7fb f825 	bl	801bc50 <Image_load>
		Locus.pData = (uint16_t *)bmp;
 8020c06:	4b4e      	ldr	r3, [pc, #312]	; (8020d40 <main+0x10f8>)
 8020c08:	4a4e      	ldr	r2, [pc, #312]	; (8020d44 <main+0x10fc>)
 8020c0a:	605a      	str	r2, [r3, #4]
		Locus.Width = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEX : XY10_LOCUS_BMP_SIZEX):
 8020c0c:	7822      	ldrb	r2, [r4, #0]
 8020c0e:	f002 0101 	and.w	r1, r2, #1
 8020c12:	2900      	cmp	r1, #0
 8020c14:	bf14      	ite	ne
 8020c16:	21d8      	movne	r1, #216	; 0xd8
 8020c18:	21fa      	moveq	r1, #250	; 0xfa
 8020c1a:	8019      	strh	r1, [r3, #0]
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8020c1c:	d132      	bne.n	8020c84 <main+0x103c>
 8020c1e:	f012 0f04 	tst.w	r2, #4
 8020c22:	bf0c      	ite	eq
 8020c24:	22fa      	moveq	r2, #250	; 0xfa
 8020c26:	22ea      	movne	r2, #234	; 0xea
 8020c28:	805a      	strh	r2, [r3, #2]
		switch(GUI_screen_state){
 8020c2a:	f898 3000 	ldrb.w	r3, [r8]
 8020c2e:	3b01      	subs	r3, #1
 8020c30:	2b05      	cmp	r3, #5
 8020c32:	d85d      	bhi.n	8020cf0 <main+0x10a8>
 8020c34:	e8df f003 	tbb	[pc, r3]
 8020c38:	4a40285f 	.word	0x4a40285f
 8020c3c:	5650      	.short	0x5650
			PARGraph_B = i;
 8020c3e:	4688      	mov	r8, r1
 8020c40:	f04f 0901 	mov.w	r9, #1
 8020c44:	e730      	b.n	8020aa8 <main+0xe60>
			PARGraph_G = i;
 8020c46:	468e      	mov	lr, r1
 8020c48:	f04f 0c01 	mov.w	ip, #1
 8020c4c:	e72c      	b.n	8020aa8 <main+0xe60>
			PARGraph_R = i;
 8020c4e:	460e      	mov	r6, r1
 8020c50:	2701      	movs	r7, #1
 8020c52:	e729      	b.n	8020aa8 <main+0xe60>
		Factor2 = Rabs_calc_Factor2_Settings_change(Exposure_Factor, EnergyFactor_E);
 8020c54:	4a3c      	ldr	r2, [pc, #240]	; (8020d48 <main+0x1100>)
 8020c56:	e791      	b.n	8020b7c <main+0xf34>
	if(Bluetooth == 0) {HAL_UART_MspDeInit(&hlpuart1);} else{HAL_UART_MspInit(&hlpuart1);}
 8020c58:	f000 fb70 	bl	802133c <HAL_UART_MspInit>
 8020c5c:	e79d      	b.n	8020b9a <main+0xf52>
	} else{TFT_FillScreen_DMA(TFT_Red);}
 8020c5e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8020c62:	f7fd f953 	bl	801df0c <TFT_FillScreen_DMA>
 8020c66:	e7b8      	b.n	8020bda <main+0xf92>
		Image_load(Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP : XY10_LOCUS_BMP):
 8020c68:	f003 0304 	and.w	r3, r3, #4
 8020c6c:	2b00      	cmp	r3, #0
 8020c6e:	4b37      	ldr	r3, [pc, #220]	; (8020d4c <main+0x1104>)
 8020c70:	4837      	ldr	r0, [pc, #220]	; (8020d50 <main+0x1108>)
 8020c72:	bf08      	it	eq
 8020c74:	4618      	moveq	r0, r3
 8020c76:	f24f 4324 	movw	r3, #62500	; 0xf424
 8020c7a:	f24e 4184 	movw	r1, #58500	; 0xe484
 8020c7e:	bf08      	it	eq
 8020c80:	4619      	moveq	r1, r3
 8020c82:	e7be      	b.n	8020c02 <main+0xfba>
		Locus.Height = Color_Field&Color_CIE_xy ? (Measure_Color_xy&CIE_xy_1931_1964 ? XY2_LOCUS_BMP_SIZEY : XY10_LOCUS_BMP_SIZEY):
 8020c84:	22fa      	movs	r2, #250	; 0xfa
 8020c86:	e7cf      	b.n	8020c28 <main+0xfe0>
		case Measure2_Screen: preGUI_screen_state = Measure_Screen; GUI_Measure2_Screen();  break;
 8020c88:	4b32      	ldr	r3, [pc, #200]	; (8020d54 <main+0x110c>)
 8020c8a:	2201      	movs	r2, #1
 8020c8c:	701a      	strb	r2, [r3, #0]
 8020c8e:	f7ef faa1 	bl	80101d4 <GUI_Measure2_Screen>
  htim7.Instance = TIM7;
 8020c92:	4c31      	ldr	r4, [pc, #196]	; (8020d58 <main+0x1110>)
  htim7.Init.Prescaler = 60000;
 8020c94:	4931      	ldr	r1, [pc, #196]	; (8020d5c <main+0x1114>)
 8020c96:	f64e 2260 	movw	r2, #60000	; 0xea60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020c9a:	2300      	movs	r3, #0
  htim7.Init.Prescaler = 60000;
 8020c9c:	e884 0006 	stmia.w	r4, {r1, r2}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8020ca0:	4620      	mov	r0, r4
  htim7.Init.Period = 200;
 8020ca2:	22c8      	movs	r2, #200	; 0xc8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8020ca4:	9319      	str	r3, [sp, #100]	; 0x64
 8020ca6:	931a      	str	r3, [sp, #104]	; 0x68
 8020ca8:	931b      	str	r3, [sp, #108]	; 0x6c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8020caa:	60a3      	str	r3, [r4, #8]
  htim7.Init.Period = 200;
 8020cac:	60e2      	str	r2, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8020cae:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8020cb0:	f7e5 f9e2 	bl	8006078 <HAL_TIM_Base_Init>
 8020cb4:	b310      	cbz	r0, 8020cfc <main+0x10b4>
 8020cb6:	e7fe      	b.n	8020cb6 <main+0x106e>
		case Measure3_Screen: preGUI_screen_state = Measure2_Screen; GUI_Measure_Screen(); GUI_Measure2_Screen();GUI_Measure3_Screen();  break;
 8020cb8:	4b26      	ldr	r3, [pc, #152]	; (8020d54 <main+0x110c>)
 8020cba:	2202      	movs	r2, #2
 8020cbc:	701a      	strb	r2, [r3, #0]
 8020cbe:	f7ef fa5b 	bl	8010178 <GUI_Measure_Screen>
 8020cc2:	f7ef fa87 	bl	80101d4 <GUI_Measure2_Screen>
 8020cc6:	f7ef fabd 	bl	8010244 <GUI_Measure3_Screen>
 8020cca:	e7e2      	b.n	8020c92 <main+0x104a>
		case Graph_Screen: preGUI_screen_state = Measure_Screen; GUI_Graph_Screen(); break;
 8020ccc:	4b21      	ldr	r3, [pc, #132]	; (8020d54 <main+0x110c>)
 8020cce:	2201      	movs	r2, #1
 8020cd0:	701a      	strb	r2, [r3, #0]
 8020cd2:	f7ef f8b5 	bl	800fe40 <GUI_Graph_Screen>
 8020cd6:	e7dc      	b.n	8020c92 <main+0x104a>
		case Color_Screen: preGUI_screen_state = ColorSet1_Screen; GUI_Color_Screen();  break; 
 8020cd8:	4b1e      	ldr	r3, [pc, #120]	; (8020d54 <main+0x110c>)
 8020cda:	220e      	movs	r2, #14
 8020cdc:	701a      	strb	r2, [r3, #0]
 8020cde:	f7ef fae7 	bl	80102b0 <GUI_Color_Screen>
 8020ce2:	e7d6      	b.n	8020c92 <main+0x104a>
		case Color_Rendition_Screen: preGUI_screen_state = Measure_Screen; GUI_ColorRend_Screen();break;
 8020ce4:	4b1b      	ldr	r3, [pc, #108]	; (8020d54 <main+0x110c>)
 8020ce6:	2201      	movs	r2, #1
 8020ce8:	701a      	strb	r2, [r3, #0]
 8020cea:	f7ef fe4f 	bl	801098c <GUI_ColorRend_Screen>
 8020cee:	e7d0      	b.n	8020c92 <main+0x104a>
		default: GUI_screen_state =  Measure_Screen; GUI_Measure_Screen();  break;
 8020cf0:	2301      	movs	r3, #1
 8020cf2:	f888 3000 	strb.w	r3, [r8]
 8020cf6:	f7ef fa3f 	bl	8010178 <GUI_Measure_Screen>
 8020cfa:	e7ca      	b.n	8020c92 <main+0x104a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8020cfc:	9019      	str	r0, [sp, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8020cfe:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8020d00:	a919      	add	r1, sp, #100	; 0x64
 8020d02:	4620      	mov	r0, r4
 8020d04:	f7e5 fc38 	bl	8006578 <HAL_TIMEx_MasterConfigSynchronization>
 8020d08:	4607      	mov	r7, r0
 8020d0a:	b348      	cbz	r0, 8020d60 <main+0x1118>
 8020d0c:	e7fe      	b.n	8020d0c <main+0x10c4>
 8020d0e:	bf00      	nop
 8020d10:	20000a48 	.word	0x20000a48
 8020d14:	20004fcc 	.word	0x20004fcc
 8020d18:	20004fc8 	.word	0x20004fc8
 8020d1c:	2008bcea 	.word	0x2008bcea
 8020d20:	20090b30 	.word	0x20090b30
 8020d24:	0812c020 	.word	0x0812c020
 8020d28:	20004c71 	.word	0x20004c71
 8020d2c:	0812a050 	.word	0x0812a050
 8020d30:	20090942 	.word	0x20090942
 8020d34:	20004c6f 	.word	0x20004c6f
 8020d38:	20004c74 	.word	0x20004c74
 8020d3c:	00051d00 	.word	0x00051d00
 8020d40:	2008c280 	.word	0x2008c280
 8020d44:	20050bee 	.word	0x20050bee
 8020d48:	20004fc4 	.word	0x20004fc4
 8020d4c:	00018100 	.word	0x00018100
 8020d50:	0006ca00 	.word	0x0006ca00
 8020d54:	2000022a 	.word	0x2000022a
 8020d58:	20090ee0 	.word	0x20090ee0
 8020d5c:	40001400 	.word	0x40001400
	HAL_Delay(1);
 8020d60:	2001      	movs	r0, #1
 8020d62:	f7e0 f95b 	bl	800101c <HAL_Delay>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8020d66:	2037      	movs	r0, #55	; 0x37
 8020d68:	f7e0 fe46 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8020d6c:	2046      	movs	r0, #70	; 0x46
 8020d6e:	f7e0 fe43 	bl	80019f8 <HAL_NVIC_EnableIRQ>
	HAL_Delay(1);
 8020d72:	2001      	movs	r0, #1
 8020d74:	f7e0 f952 	bl	800101c <HAL_Delay>
	HAL_TIM_Base_Start(&htim7);
 8020d78:	4620      	mov	r0, r4
 8020d7a:	f7e5 f82f 	bl	8005ddc <HAL_TIM_Base_Start>
	HAL_Delay(1);
 8020d7e:	2001      	movs	r0, #1
 8020d80:	f7e0 f94c 	bl	800101c <HAL_Delay>
	HAL_TIM_Base_Start_IT(&htim7);
 8020d84:	4620      	mov	r0, r4
 8020d86:	f7e5 f843 	bl	8005e10 <HAL_TIM_Base_Start_IT>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 8020d8a:	4c91      	ldr	r4, [pc, #580]	; (8020fd0 <main+0x1388>)
	uint8_t exp_stable = 0, start = 1;
 8020d8c:	2301      	movs	r3, #1
	uint32_t cnt_delay = 0, scr_refresh = 0;
 8020d8e:	463e      	mov	r6, r7
	uint8_t exp_stable = 0, start = 1;
 8020d90:	9303      	str	r3, [sp, #12]
 8020d92:	46bb      	mov	fp, r7
	 if(send_bluetooth) 
 8020d94:	4d8f      	ldr	r5, [pc, #572]	; (8020fd4 <main+0x138c>)
   usb_receive_processing();
 8020d96:	f7fe fa81 	bl	801f29c <usb_receive_processing>
	 if(send_bluetooth) 
 8020d9a:	782b      	ldrb	r3, [r5, #0]
 8020d9c:	b13b      	cbz	r3, 8020dae <main+0x1166>
			HAL_UART_Transmit_DMA(&hlpuart1, (uint8_t*)&data_bluetooth_send, 4122);
 8020d9e:	f241 021a 	movw	r2, #4122	; 0x101a
 8020da2:	498d      	ldr	r1, [pc, #564]	; (8020fd8 <main+0x1390>)
 8020da4:	488d      	ldr	r0, [pc, #564]	; (8020fdc <main+0x1394>)
 8020da6:	f7e5 fc67 	bl	8006678 <HAL_UART_Transmit_DMA>
			send_bluetooth = 0;
 8020daa:	2300      	movs	r3, #0
 8020dac:	702b      	strb	r3, [r5, #0]
 8020dae:	f8df a270 	ldr.w	sl, [pc, #624]	; 8021020 <main+0x13d8>
		while(start)
 8020db2:	9b03      	ldr	r3, [sp, #12]
 8020db4:	1c75      	adds	r5, r6, #1
 8020db6:	2b00      	cmp	r3, #0
 8020db8:	d174      	bne.n	8020ea4 <main+0x125c>
		if(!exp_set){
 8020dba:	4b89      	ldr	r3, [pc, #548]	; (8020fe0 <main+0x1398>)
 8020dbc:	781b      	ldrb	r3, [r3, #0]
 8020dbe:	b993      	cbnz	r3, 8020de6 <main+0x119e>
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 8020dc0:	4b88      	ldr	r3, [pc, #544]	; (8020fe4 <main+0x139c>)
 8020dc2:	4e89      	ldr	r6, [pc, #548]	; (8020fe8 <main+0x13a0>)
 8020dc4:	4989      	ldr	r1, [pc, #548]	; (8020fec <main+0x13a4>)
 8020dc6:	ed93 0a00 	vldr	s0, [r3]
 8020dca:	8830      	ldrh	r0, [r6, #0]
 8020dcc:	f7fa ff74 	bl	801bcb8 <Rabs_calc_Factor1>
 8020dd0:	4b87      	ldr	r3, [pc, #540]	; (8020ff0 <main+0x13a8>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 8020dd2:	4a88      	ldr	r2, [pc, #544]	; (8020ff4 <main+0x13ac>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 8020dd4:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);}
 8020dd8:	edd9 0a00 	vldr	s1, [r9]
 8020ddc:	4b86      	ldr	r3, [pc, #536]	; (8020ff8 <main+0x13b0>)
 8020dde:	8831      	ldrh	r1, [r6, #0]
 8020de0:	4882      	ldr	r0, [pc, #520]	; (8020fec <main+0x13a4>)
 8020de2:	f7fa ff9d 	bl	801bd20 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 8020de6:	f89a 3000 	ldrb.w	r3, [sl]
 8020dea:	b92b      	cbnz	r3, 8020df8 <main+0x11b0>
 8020dec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8020df0:	4981      	ldr	r1, [pc, #516]	; (8020ff8 <main+0x13b0>)
 8020df2:	4882      	ldr	r0, [pc, #520]	; (8020ffc <main+0x13b4>)
 8020df4:	f000 ffb8 	bl	8021d68 <memcpy>
			exp_start = 0;
 8020df8:	4b81      	ldr	r3, [pc, #516]	; (8021000 <main+0x13b8>)
 8020dfa:	2200      	movs	r2, #0
 8020dfc:	701a      	strb	r2, [r3, #0]
		if((GUI_screen_state == Measure_Screen || GUI_screen_state == Measure2_Screen || GUI_screen_state == Measure3_Screen) && !pause)
 8020dfe:	f898 3000 	ldrb.w	r3, [r8]
 8020e02:	1e5a      	subs	r2, r3, #1
 8020e04:	2a02      	cmp	r2, #2
 8020e06:	f200 80a6 	bhi.w	8020f56 <main+0x130e>
 8020e0a:	4b7e      	ldr	r3, [pc, #504]	; (8021004 <main+0x13bc>)
 8020e0c:	781b      	ldrb	r3, [r3, #0]
 8020e0e:	2b00      	cmp	r3, #0
 8020e10:	f040 80c2 	bne.w	8020f98 <main+0x1350>
			if(!pause & !exp_set){Calculate_Data();}
 8020e14:	4b72      	ldr	r3, [pc, #456]	; (8020fe0 <main+0x1398>)
 8020e16:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 8020e18:	462e      	mov	r6, r5
			if(!pause & !exp_set){Calculate_Data();}
 8020e1a:	b90b      	cbnz	r3, 8020e20 <main+0x11d8>
 8020e1c:	f7fd fec8 	bl	801ebb0 <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 8020e20:	2d28      	cmp	r5, #40	; 0x28
 8020e22:	d908      	bls.n	8020e36 <main+0x11ee>
 8020e24:	7823      	ldrb	r3, [r4, #0]
 8020e26:	2b05      	cmp	r3, #5
 8020e28:	f200 8086 	bhi.w	8020f38 <main+0x12f0>
								auto_exposure();
 8020e2c:	f7fe fc0a 	bl	801f644 <auto_exposure>
								max_el = 0;
 8020e30:	4b75      	ldr	r3, [pc, #468]	; (8021008 <main+0x13c0>)
 8020e32:	2600      	movs	r6, #0
 8020e34:	801e      	strh	r6, [r3, #0]
        if(GUI_screen_state == Graph_Screen)
 8020e36:	f898 3000 	ldrb.w	r3, [r8]
 8020e3a:	2b04      	cmp	r3, #4
 8020e3c:	f040 80c6 	bne.w	8020fcc <main+0x1384>
            scr_refresh++;
 8020e40:	3701      	adds	r7, #1
            if(scr_refresh > 40 ){
 8020e42:	2f28      	cmp	r7, #40	; 0x28
 8020e44:	d92b      	bls.n	8020e9e <main+0x1256>
							block_graph = 1;
 8020e46:	2301      	movs	r3, #1
 8020e48:	f88a 3000 	strb.w	r3, [sl]
								if(preGUI_screen_state == Graph_Screen && Rotation_Screen_Spectral_Old3 == Rotation_Screen_Spectral){ Refresh_screen_Graph(20, 20, Line_Rabs_buff_graph2, Rotation_Screen_Spectral_Old3);}
 8020e4c:	4b6f      	ldr	r3, [pc, #444]	; (802100c <main+0x13c4>)
 8020e4e:	4d70      	ldr	r5, [pc, #448]	; (8021010 <main+0x13c8>)
 8020e50:	781b      	ldrb	r3, [r3, #0]
 8020e52:	4f70      	ldr	r7, [pc, #448]	; (8021014 <main+0x13cc>)
 8020e54:	2b04      	cmp	r3, #4
 8020e56:	d108      	bne.n	8020e6a <main+0x1222>
 8020e58:	782a      	ldrb	r2, [r5, #0]
 8020e5a:	783b      	ldrb	r3, [r7, #0]
 8020e5c:	4293      	cmp	r3, r2
 8020e5e:	d104      	bne.n	8020e6a <main+0x1222>
 8020e60:	2114      	movs	r1, #20
 8020e62:	4a6d      	ldr	r2, [pc, #436]	; (8021018 <main+0x13d0>)
 8020e64:	4608      	mov	r0, r1
 8020e66:	f7fc fd85 	bl	801d974 <Refresh_screen_Graph>
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 8020e6a:	7839      	ldrb	r1, [r7, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 8020e6c:	4863      	ldr	r0, [pc, #396]	; (8020ffc <main+0x13b4>)
								Rotation_Screen_Spectral_Old3 = Rotation_Screen_Spectral;
 8020e6e:	7029      	strb	r1, [r5, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 8020e70:	f7fa ff7a 	bl	801bd68 <Rabs_find_MAX>
 8020e74:	4b69      	ldr	r3, [pc, #420]	; (802101c <main+0x13d4>)
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 8020e76:	4961      	ldr	r1, [pc, #388]	; (8020ffc <main+0x13b4>)
 8020e78:	7828      	ldrb	r0, [r5, #0]
								max_Rabs_graph = Rabs_find_MAX(Line_Rabs_buff_graph_test, Rotation_Screen_Spectral_Old3);
 8020e7a:	ed83 0a00 	vstr	s0, [r3]
								Rabs_graph_to_display(Rotation_Screen_Spectral_Old3, Line_Rabs_buff_graph_test);
 8020e7e:	f7fc fd27 	bl	801d8d0 <Rabs_graph_to_display>
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 8020e82:	782b      	ldrb	r3, [r5, #0]
 8020e84:	9300      	str	r3, [sp, #0]
 8020e86:	2114      	movs	r1, #20
 8020e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8020e8c:	4a62      	ldr	r2, [pc, #392]	; (8021018 <main+0x13d0>)
 8020e8e:	4608      	mov	r0, r1
								block_graph = 0;
 8020e90:	2700      	movs	r7, #0
								Spectral_DrawGraph_Line2(20, 20, Line_Rabs_buff_graph2, TFT_White, Rotation_Screen_Spectral_Old3);
 8020e92:	f7fc fc81 	bl	801d798 <Spectral_DrawGraph_Line2>
								block_graph = 0;
 8020e96:	f88a 7000 	strb.w	r7, [sl]
								GUI_SignalLevel();
 8020e9a:	f7ef f90b 	bl	80100b4 <GUI_SignalLevel>
        GUI_Display_Refresh();
 8020e9e:	f7ef fe13 	bl	8010ac8 <GUI_Display_Refresh>
   usb_receive_processing();
 8020ea2:	e777      	b.n	8020d94 <main+0x114c>
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 8020ea4:	4b4f      	ldr	r3, [pc, #316]	; (8020fe4 <main+0x139c>)
 8020ea6:	4e50      	ldr	r6, [pc, #320]	; (8020fe8 <main+0x13a0>)
 8020ea8:	4950      	ldr	r1, [pc, #320]	; (8020fec <main+0x13a4>)
 8020eaa:	ed93 0a00 	vldr	s0, [r3]
 8020eae:	8830      	ldrh	r0, [r6, #0]
 8020eb0:	f7fa ff02 	bl	801bcb8 <Rabs_calc_Factor1>
 8020eb4:	4b4e      	ldr	r3, [pc, #312]	; (8020ff0 <main+0x13a8>)
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 8020eb6:	4a4f      	ldr	r2, [pc, #316]	; (8020ff4 <main+0x13ac>)
		Factor1 = Rabs_calc_Factor1(DarkSignal, Scattering_Light, Line_buff);
 8020eb8:	ed83 0a00 	vstr	s0, [r3]
    Rabs_calc_main(Line_buff, DarkSignal, Factor1, Factor2, Spectral_Corection_Buff, Line_Rabs_buff);
 8020ebc:	edd9 0a00 	vldr	s1, [r9]
 8020ec0:	4b4d      	ldr	r3, [pc, #308]	; (8020ff8 <main+0x13b0>)
 8020ec2:	8831      	ldrh	r1, [r6, #0]
 8020ec4:	4849      	ldr	r0, [pc, #292]	; (8020fec <main+0x13a4>)
 8020ec6:	f7fa ff2b 	bl	801bd20 <Rabs_calc_main>
		if(!block_graph) {memcpy(Line_Rabs_buff_graph_test, Line_Rabs_buff, sizeof(Line_Rabs_buff));}
 8020eca:	f89a 3000 	ldrb.w	r3, [sl]
 8020ece:	b92b      	cbnz	r3, 8020edc <main+0x1294>
 8020ed0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8020ed4:	4948      	ldr	r1, [pc, #288]	; (8020ff8 <main+0x13b0>)
 8020ed6:	4849      	ldr	r0, [pc, #292]	; (8020ffc <main+0x13b4>)
 8020ed8:	f000 ff46 	bl	8021d68 <memcpy>
			Calculate_Data();
 8020edc:	f7fd fe68 	bl	801ebb0 <Calculate_Data>
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 8020ee0:	2d14      	cmp	r5, #20
			cnt_delay++;
 8020ee2:	462e      	mov	r6, r5
			if((cnt_delay > 20 && exp_num < 6) || (cnt_delay > 50 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 400 && exp_num >= 8)){
 8020ee4:	f67f af65 	bls.w	8020db2 <main+0x116a>
 8020ee8:	7823      	ldrb	r3, [r4, #0]
 8020eea:	2b05      	cmp	r3, #5
 8020eec:	d910      	bls.n	8020f10 <main+0x12c8>
 8020eee:	2d32      	cmp	r5, #50	; 0x32
 8020ef0:	f67f af5f 	bls.w	8020db2 <main+0x116a>
 8020ef4:	7823      	ldrb	r3, [r4, #0]
 8020ef6:	2b05      	cmp	r3, #5
 8020ef8:	d902      	bls.n	8020f00 <main+0x12b8>
 8020efa:	7823      	ldrb	r3, [r4, #0]
 8020efc:	2b07      	cmp	r3, #7
 8020efe:	d907      	bls.n	8020f10 <main+0x12c8>
 8020f00:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
 8020f04:	f67f af55 	bls.w	8020db2 <main+0x116a>
 8020f08:	7823      	ldrb	r3, [r4, #0]
 8020f0a:	2b07      	cmp	r3, #7
 8020f0c:	f67f af51 	bls.w	8020db2 <main+0x116a>
								auto_exposure();
 8020f10:	f7fe fb98 	bl	801f644 <auto_exposure>
								max_el = 0;
 8020f14:	4b3c      	ldr	r3, [pc, #240]	; (8021008 <main+0x13c0>)
 8020f16:	2600      	movs	r6, #0
 8020f18:	801e      	strh	r6, [r3, #0]
								exp_stable = exp_stable+1;
 8020f1a:	f10b 0301 	add.w	r3, fp, #1
 8020f1e:	fa5f fb83 	uxtb.w	fp, r3
								exp_start = 1;
 8020f22:	4b37      	ldr	r3, [pc, #220]	; (8021000 <main+0x13b8>)
 8020f24:	f1bb 0f0a 	cmp.w	fp, #10
 8020f28:	f04f 0201 	mov.w	r2, #1
 8020f2c:	701a      	strb	r2, [r3, #0]
 8020f2e:	bf8c      	ite	hi
 8020f30:	2300      	movhi	r3, #0
 8020f32:	2301      	movls	r3, #1
 8020f34:	9303      	str	r3, [sp, #12]
 8020f36:	e73c      	b.n	8020db2 <main+0x116a>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 70 && exp_num >= 8)){
 8020f38:	2d46      	cmp	r5, #70	; 0x46
 8020f3a:	f67f af7c 	bls.w	8020e36 <main+0x11ee>
 8020f3e:	7823      	ldrb	r3, [r4, #0]
 8020f40:	2b05      	cmp	r3, #5
 8020f42:	d903      	bls.n	8020f4c <main+0x1304>
 8020f44:	7823      	ldrb	r3, [r4, #0]
 8020f46:	2b07      	cmp	r3, #7
 8020f48:	f67f af70 	bls.w	8020e2c <main+0x11e4>
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 8020f4c:	7823      	ldrb	r3, [r4, #0]
 8020f4e:	2b07      	cmp	r3, #7
 8020f50:	f63f af6c 	bhi.w	8020e2c <main+0x11e4>
 8020f54:	e76f      	b.n	8020e36 <main+0x11ee>
		else	if((GUI_screen_state == Color_Screen) && !pause)
 8020f56:	2b05      	cmp	r3, #5
 8020f58:	d11e      	bne.n	8020f98 <main+0x1350>
 8020f5a:	4b2a      	ldr	r3, [pc, #168]	; (8021004 <main+0x13bc>)
 8020f5c:	781b      	ldrb	r3, [r3, #0]
 8020f5e:	b9db      	cbnz	r3, 8020f98 <main+0x1350>
			if(!pause & !exp_set){Calculate_Data();}
 8020f60:	4b1f      	ldr	r3, [pc, #124]	; (8020fe0 <main+0x1398>)
 8020f62:	781b      	ldrb	r3, [r3, #0]
			cnt_delay++;
 8020f64:	462e      	mov	r6, r5
			if(!pause & !exp_set){Calculate_Data();}
 8020f66:	bb7b      	cbnz	r3, 8020fc8 <main+0x1380>
 8020f68:	f7fd fe22 	bl	801ebb0 <Calculate_Data>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 8020f6c:	2d28      	cmp	r5, #40	; 0x28
 8020f6e:	f67f af62 	bls.w	8020e36 <main+0x11ee>
 8020f72:	7823      	ldrb	r3, [r4, #0]
 8020f74:	2b05      	cmp	r3, #5
 8020f76:	f67f af59 	bls.w	8020e2c <main+0x11e4>
 8020f7a:	2d46      	cmp	r5, #70	; 0x46
 8020f7c:	f67f af5b 	bls.w	8020e36 <main+0x11ee>
 8020f80:	7823      	ldrb	r3, [r4, #0]
 8020f82:	2b05      	cmp	r3, #5
 8020f84:	d903      	bls.n	8020f8e <main+0x1346>
 8020f86:	7823      	ldrb	r3, [r4, #0]
 8020f88:	2b07      	cmp	r3, #7
 8020f8a:	f67f af4f 	bls.w	8020e2c <main+0x11e4>
 8020f8e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 8020f92:	f67f af50 	bls.w	8020e36 <main+0x11ee>
 8020f96:	e7d9      	b.n	8020f4c <main+0x1304>
 8020f98:	2dfa      	cmp	r5, #250	; 0xfa
				cnt_delay++;
 8020f9a:	462e      	mov	r6, r5
				if((cnt_delay > 250 && exp_num < 6) || (cnt_delay > 950 && (exp_num >=+ 6 && exp_num < 8))||(cnt_delay > 1450 && exp_num >= 8)){
 8020f9c:	f67f af4b 	bls.w	8020e36 <main+0x11ee>
 8020fa0:	7823      	ldrb	r3, [r4, #0]
 8020fa2:	2b05      	cmp	r3, #5
 8020fa4:	f67f af42 	bls.w	8020e2c <main+0x11e4>
 8020fa8:	f240 33b6 	movw	r3, #950	; 0x3b6
 8020fac:	429d      	cmp	r5, r3
 8020fae:	f67f af42 	bls.w	8020e36 <main+0x11ee>
 8020fb2:	7823      	ldrb	r3, [r4, #0]
 8020fb4:	2b05      	cmp	r3, #5
 8020fb6:	d903      	bls.n	8020fc0 <main+0x1378>
 8020fb8:	7823      	ldrb	r3, [r4, #0]
 8020fba:	2b07      	cmp	r3, #7
 8020fbc:	f67f af36 	bls.w	8020e2c <main+0x11e4>
 8020fc0:	f240 53aa 	movw	r3, #1450	; 0x5aa
 8020fc4:	429d      	cmp	r5, r3
 8020fc6:	e7e4      	b.n	8020f92 <main+0x134a>
			if((cnt_delay > 40 && exp_num < 6) || (cnt_delay > 70 && (exp_num >= 6 && exp_num < 8))||(cnt_delay > 500 && exp_num >= 8)){
 8020fc8:	2d28      	cmp	r5, #40	; 0x28
 8020fca:	d8d2      	bhi.n	8020f72 <main+0x132a>
        } else{__asm("nop");}
 8020fcc:	bf00      	nop
 8020fce:	e766      	b.n	8020e9e <main+0x1256>
 8020fd0:	2008b852 	.word	0x2008b852
 8020fd4:	2008b864 	.word	0x2008b864
 8020fd8:	2008a838 	.word	0x2008a838
 8020fdc:	20090b30 	.word	0x20090b30
 8020fe0:	20000a4c 	.word	0x20000a4c
 8020fe4:	2004cbdc 	.word	0x2004cbdc
 8020fe8:	20004fc2 	.word	0x20004fc2
 8020fec:	200097dc 	.word	0x200097dc
 8020ff0:	20004fd0 	.word	0x20004fd0
 8020ff4:	2004cbe0 	.word	0x2004cbe0
 8020ff8:	200077dc 	.word	0x200077dc
 8020ffc:	200087dc 	.word	0x200087dc
 8021000:	20000a4d 	.word	0x20000a4d
 8021004:	20004c98 	.word	0x20004c98
 8021008:	2008b860 	.word	0x2008b860
 802100c:	2000022a 	.word	0x2000022a
 8021010:	20000a49 	.word	0x20000a49
 8021014:	20004c7a 	.word	0x20004c7a
 8021018:	20004cd0 	.word	0x20004cd0
 802101c:	20090d10 	.word	0x20090d10
 8021020:	20050bed 	.word	0x20050bed

08021024 <_Error_Handler>:
}
void _Error_Handler(char *file, int line)
{
 8021024:	e7fe      	b.n	8021024 <_Error_Handler>
	...

08021028 <SD_CheckStatus.isra.0>:
/* USER CODE BEGIN beforeFunctionSection */
/* can be used to modify / undefine following code or add new code */
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
 8021028:	b510      	push	{r4, lr}
{
  Stat = STA_NOINIT;
 802102a:	4c06      	ldr	r4, [pc, #24]	; (8021044 <SD_CheckStatus.isra.0+0x1c>)
 802102c:	2301      	movs	r3, #1
 802102e:	7023      	strb	r3, [r4, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8021030:	f7fc ff02 	bl	801de38 <BSP_SD_GetCardState>
 8021034:	4623      	mov	r3, r4
 8021036:	b918      	cbnz	r0, 8021040 <SD_CheckStatus.isra.0+0x18>
  {
    Stat &= ~STA_NOINIT;
 8021038:	7822      	ldrb	r2, [r4, #0]
 802103a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 802103e:	7022      	strb	r2, [r4, #0]
  }

  return Stat;
 8021040:	7818      	ldrb	r0, [r3, #0]
}
 8021042:	bd10      	pop	{r4, pc}
 8021044:	20000a4f 	.word	0x20000a4f

08021048 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8021048:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 802104a:	4c05      	ldr	r4, [pc, #20]	; (8021060 <SD_initialize+0x18>)
 802104c:	2301      	movs	r3, #1
 802104e:	7023      	strb	r3, [r4, #0]
#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8021050:	f7fc feba 	bl	801ddc8 <BSP_SD_Init>
 8021054:	b910      	cbnz	r0, 802105c <SD_initialize+0x14>
  {
    Stat = SD_CheckStatus(lun);
 8021056:	f7ff ffe7 	bl	8021028 <SD_CheckStatus.isra.0>
 802105a:	7020      	strb	r0, [r4, #0]
  }

#else
  Stat = SD_CheckStatus(lun);
#endif
  return Stat;
 802105c:	7820      	ldrb	r0, [r4, #0]
}
 802105e:	bd10      	pop	{r4, pc}
 8021060:	20000a4f 	.word	0x20000a4f

08021064 <SD_status>:
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
  return SD_CheckStatus(lun);
 8021064:	f7ff bfe0 	b.w	8021028 <SD_CheckStatus.isra.0>

08021068 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8021068:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  ReadStatus = 0;
 802106a:	4c16      	ldr	r4, [pc, #88]	; (80210c4 <SD_read+0x5c>)
{
 802106c:	4608      	mov	r0, r1
 802106e:	4611      	mov	r1, r2
  ReadStatus = 0;
 8021070:	2200      	movs	r2, #0
 8021072:	6022      	str	r2, [r4, #0]
  uint32_t timeout;
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8021074:	461a      	mov	r2, r3
 8021076:	f7fc fec3 	bl	801de00 <BSP_SD_ReadBlocks_DMA>
 802107a:	b108      	cbz	r0, 8021080 <SD_read+0x18>
  DRESULT res = RES_ERROR;
 802107c:	2001      	movs	r0, #1
 802107e:	bd70      	pop	{r4, r5, r6, pc}
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
    /* Wait that the reading process is completed or a timeout occurs */
    timeout = HAL_GetTick();
 8021080:	f7df ffc6 	bl	8001010 <HAL_GetTick>
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8021084:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 8021088:	4606      	mov	r6, r0
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 802108a:	6823      	ldr	r3, [r4, #0]
 802108c:	b19b      	cbz	r3, 80210b6 <SD_read+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (ReadStatus == 0)
 802108e:	6823      	ldr	r3, [r4, #0]
 8021090:	2b00      	cmp	r3, #0
 8021092:	d0f3      	beq.n	802107c <SD_read+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      ReadStatus = 0;
 8021094:	2300      	movs	r3, #0
 8021096:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 8021098:	f7df ffba 	bl	8001010 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 802109c:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 80210a0:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80210a2:	f7df ffb5 	bl	8001010 <HAL_GetTick>
 80210a6:	1b40      	subs	r0, r0, r5
 80210a8:	42a0      	cmp	r0, r4
 80210aa:	d8e7      	bhi.n	802107c <SD_read+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80210ac:	f7fc fec4 	bl	801de38 <BSP_SD_GetCardState>
 80210b0:	2800      	cmp	r0, #0
 80210b2:	d1f6      	bne.n	80210a2 <SD_read+0x3a>
      }
    }
  }

  return res;
}
 80210b4:	bd70      	pop	{r4, r5, r6, pc}
    while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80210b6:	f7df ffab 	bl	8001010 <HAL_GetTick>
 80210ba:	1b80      	subs	r0, r0, r6
 80210bc:	42a8      	cmp	r0, r5
 80210be:	d9e4      	bls.n	802108a <SD_read+0x22>
 80210c0:	e7e5      	b.n	802108e <SD_read+0x26>
 80210c2:	bf00      	nop
 80210c4:	2008b868 	.word	0x2008b868

080210c8 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80210c8:	b570      	push	{r4, r5, r6, lr}
  DRESULT res = RES_ERROR;
  WriteStatus = 0;
 80210ca:	4c16      	ldr	r4, [pc, #88]	; (8021124 <SD_write+0x5c>)
{
 80210cc:	4608      	mov	r0, r1
 80210ce:	4611      	mov	r1, r2
  WriteStatus = 0;
 80210d0:	2200      	movs	r2, #0
 80210d2:	6022      	str	r2, [r4, #0]
   */
  alignedAddr = (uint32_t)buff &  ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80210d4:	461a      	mov	r2, r3
 80210d6:	f7fc fea1 	bl	801de1c <BSP_SD_WriteBlocks_DMA>
 80210da:	b108      	cbz	r0, 80210e0 <SD_write+0x18>
  DRESULT res = RES_ERROR;
 80210dc:	2001      	movs	r0, #1
 80210de:	bd70      	pop	{r4, r5, r6, pc}
                            (uint32_t) (sector),
                            count) == MSD_OK)
  {
    /* Wait that writing process is completed or a timeout occurs */

    timeout = HAL_GetTick();
 80210e0:	f7df ff96 	bl	8001010 <HAL_GetTick>
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80210e4:	f247 552f 	movw	r5, #29999	; 0x752f
    timeout = HAL_GetTick();
 80210e8:	4606      	mov	r6, r0
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80210ea:	6823      	ldr	r3, [r4, #0]
 80210ec:	b19b      	cbz	r3, 8021116 <SD_write+0x4e>
    {
    }
    /* incase of a timeout return error */
    if (WriteStatus == 0)
 80210ee:	6823      	ldr	r3, [r4, #0]
 80210f0:	2b00      	cmp	r3, #0
 80210f2:	d0f3      	beq.n	80210dc <SD_write+0x14>
    {
      res = RES_ERROR;
    }
    else
    {
      WriteStatus = 0;
 80210f4:	2300      	movs	r3, #0
 80210f6:	6023      	str	r3, [r4, #0]
      timeout = HAL_GetTick();
 80210f8:	f7df ff8a 	bl	8001010 <HAL_GetTick>

      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80210fc:	f247 542f 	movw	r4, #29999	; 0x752f
      timeout = HAL_GetTick();
 8021100:	4605      	mov	r5, r0
      while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8021102:	f7df ff85 	bl	8001010 <HAL_GetTick>
 8021106:	1b40      	subs	r0, r0, r5
 8021108:	42a0      	cmp	r0, r4
 802110a:	d8e7      	bhi.n	80210dc <SD_write+0x14>
      {
        if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 802110c:	f7fc fe94 	bl	801de38 <BSP_SD_GetCardState>
 8021110:	2800      	cmp	r0, #0
 8021112:	d1f6      	bne.n	8021102 <SD_write+0x3a>
      }
    }
  }

  return res;
}
 8021114:	bd70      	pop	{r4, r5, r6, pc}
    while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8021116:	f7df ff7b 	bl	8001010 <HAL_GetTick>
 802111a:	1b80      	subs	r0, r0, r6
 802111c:	42a8      	cmp	r0, r5
 802111e:	d9e4      	bls.n	80210ea <SD_write+0x22>
 8021120:	e7e5      	b.n	80210ee <SD_write+0x26>
 8021122:	bf00      	nop
 8021124:	2008b86c 	.word	0x2008b86c

08021128 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8021128:	b510      	push	{r4, lr}
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 802112a:	4b12      	ldr	r3, [pc, #72]	; (8021174 <SD_ioctl+0x4c>)
 802112c:	781b      	ldrb	r3, [r3, #0]
 802112e:	07db      	lsls	r3, r3, #31
{
 8021130:	b08a      	sub	sp, #40	; 0x28
 8021132:	4614      	mov	r4, r2
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8021134:	d41b      	bmi.n	802116e <SD_ioctl+0x46>

  switch (cmd)
 8021136:	2903      	cmp	r1, #3
 8021138:	d803      	bhi.n	8021142 <SD_ioctl+0x1a>
 802113a:	e8df f001 	tbb	[pc, r1]
 802113e:	0510      	.short	0x0510
 8021140:	120b      	.short	0x120b
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
    res = RES_OK;
    break;

  default:
    res = RES_PARERR;
 8021142:	2004      	movs	r0, #4
  }

  return res;
}
 8021144:	b00a      	add	sp, #40	; 0x28
 8021146:	bd10      	pop	{r4, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 8021148:	a801      	add	r0, sp, #4
 802114a:	f7fc fe7f 	bl	801de4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 802114e:	9b07      	ldr	r3, [sp, #28]
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8021150:	6023      	str	r3, [r4, #0]
 8021152:	e004      	b.n	802115e <SD_ioctl+0x36>
    BSP_SD_GetCardInfo(&CardInfo);
 8021154:	a801      	add	r0, sp, #4
 8021156:	f7fc fe79 	bl	801de4c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 802115a:	9b08      	ldr	r3, [sp, #32]
 802115c:	8023      	strh	r3, [r4, #0]
    res = RES_OK;
 802115e:	2000      	movs	r0, #0
 8021160:	e7f0      	b.n	8021144 <SD_ioctl+0x1c>
    BSP_SD_GetCardInfo(&CardInfo);
 8021162:	a801      	add	r0, sp, #4
 8021164:	f7fc fe72 	bl	801de4c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8021168:	9b08      	ldr	r3, [sp, #32]
 802116a:	0a5b      	lsrs	r3, r3, #9
 802116c:	e7f0      	b.n	8021150 <SD_ioctl+0x28>
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 802116e:	2003      	movs	r0, #3
 8021170:	e7e8      	b.n	8021144 <SD_ioctl+0x1c>
 8021172:	bf00      	nop
 8021174:	20000a4f 	.word	0x20000a4f

08021178 <HAL_MspInit>:
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

	
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8021178:	4b21      	ldr	r3, [pc, #132]	; (8021200 <HAL_MspInit+0x88>)
{
 802117a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802117c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 802117e:	f042 0201 	orr.w	r2, r2, #1
 8021182:	661a      	str	r2, [r3, #96]	; 0x60
 8021184:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021186:	f002 0201 	and.w	r2, r2, #1
 802118a:	9200      	str	r2, [sp, #0]
 802118c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 802118e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021190:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8021194:	659a      	str	r2, [r3, #88]	; 0x58
 8021196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 802119c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 802119e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 80211a0:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80211a2:	f7e0 fbe3 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80211a6:	2200      	movs	r2, #0
 80211a8:	4611      	mov	r1, r2
 80211aa:	f06f 000b 	mvn.w	r0, #11
 80211ae:	f7e0 fbef 	bl	8001990 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80211b2:	2200      	movs	r2, #0
 80211b4:	4611      	mov	r1, r2
 80211b6:	f06f 000a 	mvn.w	r0, #10
 80211ba:	f7e0 fbe9 	bl	8001990 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80211be:	2200      	movs	r2, #0
 80211c0:	4611      	mov	r1, r2
 80211c2:	f06f 0009 	mvn.w	r0, #9
 80211c6:	f7e0 fbe3 	bl	8001990 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80211ca:	2200      	movs	r2, #0
 80211cc:	4611      	mov	r1, r2
 80211ce:	f06f 0004 	mvn.w	r0, #4
 80211d2:	f7e0 fbdd 	bl	8001990 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80211d6:	2200      	movs	r2, #0
 80211d8:	4611      	mov	r1, r2
 80211da:	f06f 0003 	mvn.w	r0, #3
 80211de:	f7e0 fbd7 	bl	8001990 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80211e2:	2200      	movs	r2, #0
 80211e4:	4611      	mov	r1, r2
 80211e6:	f06f 0001 	mvn.w	r0, #1
 80211ea:	f7e0 fbd1 	bl	8001990 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80211ee:	2200      	movs	r2, #0
 80211f0:	4611      	mov	r1, r2
 80211f2:	f04f 30ff 	mov.w	r0, #4294967295
 80211f6:	f7e0 fbcb 	bl	8001990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80211fa:	b003      	add	sp, #12
 80211fc:	f85d fb04 	ldr.w	pc, [sp], #4
 8021200:	40021000 	.word	0x40021000

08021204 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8021204:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hltdc->Instance==LTDC)
 8021206:	6802      	ldr	r2, [r0, #0]
 8021208:	4b31      	ldr	r3, [pc, #196]	; (80212d0 <HAL_LTDC_MspInit+0xcc>)
 802120a:	429a      	cmp	r2, r3
{
 802120c:	b08a      	sub	sp, #40	; 0x28
  if(hltdc->Instance==LTDC)
 802120e:	d15d      	bne.n	80212cc <HAL_LTDC_MspInit+0xc8>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8021210:	f503 4328 	add.w	r3, r3, #43008	; 0xa800
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9 
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13 
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021214:	2400      	movs	r4, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8021216:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021218:	482e      	ldr	r0, [pc, #184]	; (80212d4 <HAL_LTDC_MspInit+0xd0>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 802121a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 802121e:	661a      	str	r2, [r3, #96]	; 0x60
 8021220:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021222:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8021226:	9200      	str	r2, [sp, #0]
 8021228:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 802122a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802122c:	f042 0210 	orr.w	r2, r2, #16
 8021230:	64da      	str	r2, [r3, #76]	; 0x4c
 8021232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021234:	f002 0210 	and.w	r2, r2, #16
 8021238:	9201      	str	r2, [sp, #4]
 802123a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 802123c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802123e:	f042 0202 	orr.w	r2, r2, #2
 8021242:	64da      	str	r2, [r3, #76]	; 0x4c
 8021244:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021246:	f002 0202 	and.w	r2, r2, #2
 802124a:	9202      	str	r2, [sp, #8]
 802124c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 802124e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021250:	f042 0220 	orr.w	r2, r2, #32
 8021254:	64da      	str	r2, [r3, #76]	; 0x4c
 8021256:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021258:	f002 0220 	and.w	r2, r2, #32
 802125c:	9203      	str	r2, [sp, #12]
 802125e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021260:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8021262:	f042 0208 	orr.w	r2, r2, #8
 8021266:	64da      	str	r2, [r3, #76]	; 0x4c
 8021268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802126a:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 802126c:	f003 0308 	and.w	r3, r3, #8
 8021270:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021272:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8021274:	260b      	movs	r6, #11
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8021276:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021278:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 802127a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 802127e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8021280:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021282:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8021284:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8021286:	f7e1 f91d 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 802128a:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802128c:	a905      	add	r1, sp, #20
 802128e:	4812      	ldr	r0, [pc, #72]	; (80212d8 <HAL_LTDC_MspInit+0xd4>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021290:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021292:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021294:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021296:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 8021298:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 802129a:	f7e1 f913 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 802129e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80212a2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80212a4:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80212a6:	2309      	movs	r3, #9
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80212a8:	480c      	ldr	r0, [pc, #48]	; (80212dc <HAL_LTDC_MspInit+0xd8>)
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80212aa:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80212ac:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80212ae:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80212b0:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80212b2:	f7e1 f907 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80212b6:	f64d 730b 	movw	r3, #57099	; 0xdf0b
                          |GPIO_PIN_1|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80212ba:	a905      	add	r1, sp, #20
 80212bc:	4808      	ldr	r0, [pc, #32]	; (80212e0 <HAL_LTDC_MspInit+0xdc>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80212be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80212c0:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80212c2:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80212c4:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_LTDC;
 80212c6:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80212c8:	f7e1 f8fc 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80212cc:	b00a      	add	sp, #40	; 0x28
 80212ce:	bd70      	pop	{r4, r5, r6, pc}
 80212d0:	40016800 	.word	0x40016800
 80212d4:	48001000 	.word	0x48001000
 80212d8:	48000400 	.word	0x48000400
 80212dc:	48001400 	.word	0x48001400
 80212e0:	48000c00 	.word	0x48000c00

080212e4 <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80212e4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 80212e6:	6802      	ldr	r2, [r0, #0]
 80212e8:	4b13      	ldr	r3, [pc, #76]	; (8021338 <HAL_SPI_MspInit+0x54>)
 80212ea:	429a      	cmp	r2, r3
{
 80212ec:	b086      	sub	sp, #24
  if(hspi->Instance==SPI1)
 80212ee:	d121      	bne.n	8021334 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80212f0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80212f4:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80212f6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80212f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80212fc:	661a      	str	r2, [r3, #96]	; 0x60
 80212fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021300:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8021302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8021306:	9300      	str	r3, [sp, #0]
 8021308:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 802130a:	2342      	movs	r3, #66	; 0x42
 802130c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802130e:	2302      	movs	r3, #2
 8021310:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021312:	2303      	movs	r3, #3
 8021314:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021316:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8021318:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802131a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 802131e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021320:	f7e1 f8d0 	bl	80024c4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8021324:	2023      	movs	r0, #35	; 0x23
 8021326:	4622      	mov	r2, r4
 8021328:	4621      	mov	r1, r4
 802132a:	f7e0 fb31 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 802132e:	2023      	movs	r0, #35	; 0x23
 8021330:	f7e0 fb62 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8021334:	b006      	add	sp, #24
 8021336:	bd10      	pop	{r4, pc}
 8021338:	40013000 	.word	0x40013000

0802133c <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 802133c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==LPUART1)
 802133e:	6802      	ldr	r2, [r0, #0]
 8021340:	4b1f      	ldr	r3, [pc, #124]	; (80213c0 <HAL_UART_MspInit+0x84>)
 8021342:	429a      	cmp	r2, r3
{
 8021344:	b086      	sub	sp, #24
 8021346:	4606      	mov	r6, r0
  if(huart->Instance==LPUART1)
 8021348:	d137      	bne.n	80213ba <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 802134a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802134e:	2500      	movs	r5, #0
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8021350:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021352:	481c      	ldr	r0, [pc, #112]	; (80213c4 <HAL_UART_MspInit+0x88>)
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8021354:	f042 0201 	orr.w	r2, r2, #1
 8021358:	65da      	str	r2, [r3, #92]	; 0x5c
 802135a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802135c:	9503      	str	r5, [sp, #12]
    __HAL_RCC_LPUART1_CLK_ENABLE();
 802135e:	f003 0301 	and.w	r3, r3, #1
 8021362:	9300      	str	r3, [sp, #0]
 8021364:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021366:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8021368:	2403      	movs	r4, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802136a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802136c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 802136e:	2308      	movs	r3, #8
 8021370:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8021372:	9401      	str	r4, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021374:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021376:	f7e1 f8a5 	bl	80024c4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 1, 3);
 802137a:	4622      	mov	r2, r4
 802137c:	2101      	movs	r1, #1
 802137e:	2046      	movs	r0, #70	; 0x46
 8021380:	f7e0 fb06 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8021384:	2046      	movs	r0, #70	; 0x46
 8021386:	f7e0 fb37 	bl	80019f8 <HAL_NVIC_EnableIRQ>
		
		  /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 802138a:	4c0f      	ldr	r4, [pc, #60]	; (80213c8 <HAL_UART_MspInit+0x8c>)
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 802138c:	490f      	ldr	r1, [pc, #60]	; (80213cc <HAL_UART_MspInit+0x90>)
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 802138e:	60e5      	str	r5, [r4, #12]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8021390:	2310      	movs	r3, #16
 8021392:	2223      	movs	r2, #35	; 0x23
 8021394:	e884 000e 	stmia.w	r4, {r1, r2, r3}
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8021398:	4620      	mov	r0, r4
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 802139a:	2380      	movs	r3, #128	; 0x80
 802139c:	6123      	str	r3, [r4, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 802139e:	6165      	str	r5, [r4, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80213a0:	61a5      	str	r5, [r4, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80213a2:	61e5      	str	r5, [r4, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80213a4:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80213a6:	f7e0 fbb5 	bl	8001b14 <HAL_DMA_Init>
 80213aa:	b120      	cbz	r0, 80213b6 <HAL_UART_MspInit+0x7a>
    {
      Error_Handler();
 80213ac:	f240 1109 	movw	r1, #265	; 0x109
 80213b0:	4807      	ldr	r0, [pc, #28]	; (80213d0 <HAL_UART_MspInit+0x94>)
 80213b2:	f7ff fe37 	bl	8021024 <_Error_Handler>
    }

		
    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80213b6:	67b4      	str	r4, [r6, #120]	; 0x78
 80213b8:	62a6      	str	r6, [r4, #40]	; 0x28
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80213ba:	b006      	add	sp, #24
 80213bc:	bd70      	pop	{r4, r5, r6, pc}
 80213be:	bf00      	nop
 80213c0:	40008000 	.word	0x40008000
 80213c4:	48000800 	.word	0x48000800
 80213c8:	20090d54 	.word	0x20090d54
 80213cc:	40020008 	.word	0x40020008
 80213d0:	080312e0 	.word	0x080312e0

080213d4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{

  if(huart->Instance==LPUART1)
 80213d4:	6802      	ldr	r2, [r0, #0]
 80213d6:	4b0b      	ldr	r3, [pc, #44]	; (8021404 <HAL_UART_MspDeInit+0x30>)
 80213d8:	429a      	cmp	r2, r3
{
 80213da:	b510      	push	{r4, lr}
 80213dc:	4604      	mov	r4, r0
  if(huart->Instance==LPUART1)
 80213de:	d110      	bne.n	8021402 <HAL_UART_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 80213e0:	4a09      	ldr	r2, [pc, #36]	; (8021408 <HAL_UART_MspDeInit+0x34>)
  
    /**LPUART1 GPIO Configuration    
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 80213e2:	480a      	ldr	r0, [pc, #40]	; (802140c <HAL_UART_MspDeInit+0x38>)
    __HAL_RCC_LPUART1_CLK_DISABLE();
 80213e4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 80213e6:	f023 0301 	bic.w	r3, r3, #1
 80213ea:	65d3      	str	r3, [r2, #92]	; 0x5c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0|GPIO_PIN_1);
 80213ec:	2103      	movs	r1, #3
 80213ee:	f7e1 f941 	bl	8002674 <HAL_GPIO_DeInit>

    /* LPUART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 80213f2:	2046      	movs	r0, #70	; 0x46
 80213f4:	f7e0 fb0c 	bl	8001a10 <HAL_NVIC_DisableIRQ>
		/* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 80213f8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }

}
 80213fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_DMA_DeInit(huart->hdmatx);
 80213fe:	f7e0 bbf9 	b.w	8001bf4 <HAL_DMA_DeInit>
 8021402:	bd10      	pop	{r4, pc}
 8021404:	40008000 	.word	0x40008000
 8021408:	40021000 	.word	0x40021000
 802140c:	48000800 	.word	0x48000800

08021410 <HAL_ADC_MspInit>:



void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8021410:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8021412:	6802      	ldr	r2, [r0, #0]
 8021414:	4b0e      	ldr	r3, [pc, #56]	; (8021450 <HAL_ADC_MspInit+0x40>)
 8021416:	429a      	cmp	r2, r3
 8021418:	d116      	bne.n	8021448 <HAL_ADC_MspInit+0x38>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 802141a:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 802141e:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PC2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021422:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC_CLK_ENABLE();
 8021424:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021426:	480b      	ldr	r0, [pc, #44]	; (8021454 <HAL_ADC_MspInit+0x44>)
    __HAL_RCC_ADC_CLK_ENABLE();
 8021428:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 802142c:	64da      	str	r2, [r3, #76]	; 0x4c
 802142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8021434:	9300      	str	r3, [sp, #0]
 8021436:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8021438:	2304      	movs	r3, #4
 802143a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 802143c:	230b      	movs	r3, #11
 802143e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021440:	2300      	movs	r3, #0
 8021442:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8021444:	f7e1 f83e 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8021448:	b007      	add	sp, #28
 802144a:	f85d fb04 	ldr.w	pc, [sp], #4
 802144e:	bf00      	nop
 8021450:	50040000 	.word	0x50040000
 8021454:	48000800 	.word	0x48000800

08021458 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8021458:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 802145a:	6803      	ldr	r3, [r0, #0]
 802145c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8021460:	4604      	mov	r4, r0
  if(htim_base->Instance==TIM2)
 8021462:	d112      	bne.n	802148a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8021464:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8021468:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 802146a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802146c:	f042 0201 	orr.w	r2, r2, #1
 8021470:	659a      	str	r2, [r3, #88]	; 0x58
 8021472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8021474:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8021476:	f003 0301 	and.w	r3, r3, #1
 802147a:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 802147c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 802147e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8021480:	f7e0 fa86 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8021484:	201c      	movs	r0, #28
 8021486:	f7e0 fab7 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
	
	if(htim_base->Instance==TIM7)
 802148a:	6822      	ldr	r2, [r4, #0]
 802148c:	4b20      	ldr	r3, [pc, #128]	; (8021510 <HAL_TIM_Base_MspInit+0xb8>)
 802148e:	429a      	cmp	r2, r3
 8021490:	d10d      	bne.n	80214ae <HAL_TIM_Base_MspInit+0x56>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8021492:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8021496:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8021498:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802149a:	f042 0220 	orr.w	r2, r2, #32
 802149e:	659a      	str	r2, [r3, #88]	; 0x58
 80214a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80214a2:	f003 0320 	and.w	r3, r3, #32
 80214a6:	9301      	str	r3, [sp, #4]
 80214a8:	9b01      	ldr	r3, [sp, #4]
		HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80214aa:	f7e0 faa5 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
	
	 if(htim_base->Instance==TIM4)
 80214ae:	6822      	ldr	r2, [r4, #0]
 80214b0:	4b18      	ldr	r3, [pc, #96]	; (8021514 <HAL_TIM_Base_MspInit+0xbc>)
 80214b2:	429a      	cmp	r2, r3
 80214b4:	d112      	bne.n	80214dc <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80214b6:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80214ba:	201e      	movs	r0, #30
    __HAL_RCC_TIM4_CLK_ENABLE();
 80214bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80214be:	f042 0204 	orr.w	r2, r2, #4
 80214c2:	659a      	str	r2, [r3, #88]	; 0x58
 80214c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80214c6:	2200      	movs	r2, #0
    __HAL_RCC_TIM4_CLK_ENABLE();
 80214c8:	f003 0304 	and.w	r3, r3, #4
 80214cc:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80214ce:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 80214d0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80214d2:	f7e0 fa5d 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80214d6:	201e      	movs	r0, #30
 80214d8:	f7e0 fa8e 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
	}
		if(htim_base->Instance==TIM6)
 80214dc:	6822      	ldr	r2, [r4, #0]
 80214de:	4b0e      	ldr	r3, [pc, #56]	; (8021518 <HAL_TIM_Base_MspInit+0xc0>)
 80214e0:	429a      	cmp	r2, r3
 80214e2:	d112      	bne.n	802150a <HAL_TIM_Base_MspInit+0xb2>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80214e4:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80214e8:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 80214ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80214ec:	f042 0210 	orr.w	r2, r2, #16
 80214f0:	659a      	str	r2, [r3, #88]	; 0x58
 80214f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80214f4:	f003 0310 	and.w	r3, r3, #16
 80214f8:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80214fa:	2200      	movs	r2, #0
 80214fc:	2103      	movs	r1, #3
    __HAL_RCC_TIM6_CLK_ENABLE();
 80214fe:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8021500:	f7e0 fa46 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8021504:	2036      	movs	r0, #54	; 0x36
 8021506:	f7e0 fa77 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 802150a:	b004      	add	sp, #16
 802150c:	bd10      	pop	{r4, pc}
 802150e:	bf00      	nop
 8021510:	40001400 	.word	0x40001400
 8021514:	40000800 	.word	0x40000800
 8021518:	40001000 	.word	0x40001000

0802151c <HAL_TIM_OC_MspInit>:


void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 802151c:	b507      	push	{r0, r1, r2, lr}

  if(htim_oc->Instance==TIM5)
 802151e:	4b0d      	ldr	r3, [pc, #52]	; (8021554 <HAL_TIM_OC_MspInit+0x38>)
 8021520:	6802      	ldr	r2, [r0, #0]
 8021522:	429a      	cmp	r2, r3
 8021524:	d112      	bne.n	802154c <HAL_TIM_OC_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8021526:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 802152a:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 802152c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 802152e:	f042 0208 	orr.w	r2, r2, #8
 8021532:	659a      	str	r2, [r3, #88]	; 0x58
 8021534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8021536:	2200      	movs	r2, #0
    __HAL_RCC_TIM5_CLK_ENABLE();
 8021538:	f003 0308 	and.w	r3, r3, #8
 802153c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 802153e:	4611      	mov	r1, r2
    __HAL_RCC_TIM5_CLK_ENABLE();
 8021540:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8021542:	f7e0 fa25 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8021546:	2032      	movs	r0, #50	; 0x32
 8021548:	f7e0 fa56 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 802154c:	b003      	add	sp, #12
 802154e:	f85d fb04 	ldr.w	pc, [sp], #4
 8021552:	bf00      	nop
 8021554:	40000c00 	.word	0x40000c00

08021558 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8021558:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM5)
 802155a:	6802      	ldr	r2, [r0, #0]
 802155c:	4b19      	ldr	r3, [pc, #100]	; (80215c4 <HAL_TIM_MspPostInit+0x6c>)
 802155e:	429a      	cmp	r2, r3
{
 8021560:	b086      	sub	sp, #24
 8021562:	4604      	mov	r4, r0
  if(htim->Instance==TIM5)
 8021564:	d10c      	bne.n	8021580 <HAL_TIM_MspPostInit+0x28>
  /* USER CODE END TIM5_MspPostInit 0 */
  
    /**TIM5 GPIO Configuration    
    PA0     ------> TIM5_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8021566:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021568:	2200      	movs	r2, #0
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 802156a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802156c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802156e:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021574:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021576:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021578:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 802157a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802157c:	f7e0 ffa2 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

  if(htim->Instance==TIM15)
 8021580:	6822      	ldr	r2, [r4, #0]
 8021582:	4b11      	ldr	r3, [pc, #68]	; (80215c8 <HAL_TIM_MspPostInit+0x70>)
 8021584:	429a      	cmp	r2, r3
 8021586:	d11a      	bne.n	80215be <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8021588:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 802158c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802158e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8021592:	64da      	str	r2, [r3, #76]	; 0x4c
 8021594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802159a:	9300      	str	r3, [sp, #0]
 802159c:	9b00      	ldr	r3, [sp, #0]
    HAL_PWREx_EnableVddIO2();
 802159e:	f7e2 fc6f 	bl	8003e80 <HAL_PWREx_EnableVddIO2>
    /**TIM15 GPIO Configuration    
    PG11     ------> TIM15_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80215a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80215a6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80215a8:	2302      	movs	r3, #2
 80215aa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80215ac:	2300      	movs	r3, #0
 80215ae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80215b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80215b2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80215b4:	230e      	movs	r3, #14
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80215b6:	4805      	ldr	r0, [pc, #20]	; (80215cc <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 80215b8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80215ba:	f7e0 ff83 	bl	80024c4 <HAL_GPIO_Init>
	}
}
 80215be:	b006      	add	sp, #24
 80215c0:	bd10      	pop	{r4, pc}
 80215c2:	bf00      	nop
 80215c4:	40000c00 	.word	0x40000c00
 80215c8:	40014000 	.word	0x40014000
 80215cc:	48001800 	.word	0x48001800

080215d0 <HAL_DMA2D_MspInit>:
  }

}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80215d0:	b507      	push	{r0, r1, r2, lr}

  if(hdma2d->Instance==DMA2D)
 80215d2:	4b0d      	ldr	r3, [pc, #52]	; (8021608 <HAL_DMA2D_MspInit+0x38>)
 80215d4:	6802      	ldr	r2, [r0, #0]
 80215d6:	429a      	cmp	r2, r3
 80215d8:	d112      	bne.n	8021600 <HAL_DMA2D_MspInit+0x30>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80215da:	f5a3 4320 	sub.w	r3, r3, #40960	; 0xa000
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80215de:	205a      	movs	r0, #90	; 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80215e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80215e2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80215e6:	649a      	str	r2, [r3, #72]	; 0x48
 80215e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80215ea:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80215ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80215f0:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80215f2:	4611      	mov	r1, r2
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80215f4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80215f6:	f7e0 f9cb 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80215fa:	205a      	movs	r0, #90	; 0x5a
 80215fc:	f7e0 f9fc 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8021600:	b003      	add	sp, #12
 8021602:	f85d fb04 	ldr.w	pc, [sp], #4
 8021606:	bf00      	nop
 8021608:	4002b000 	.word	0x4002b000

0802160c <HAL_I2C_MspInit>:
  }

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 802160c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 802160e:	6802      	ldr	r2, [r0, #0]
 8021610:	4b17      	ldr	r3, [pc, #92]	; (8021670 <HAL_I2C_MspInit+0x64>)
 8021612:	429a      	cmp	r2, r3
 8021614:	d128      	bne.n	8021668 <HAL_I2C_MspInit+0x5c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8021616:	23c0      	movs	r3, #192	; 0xc0
 8021618:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 802161a:	2312      	movs	r3, #18
 802161c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 802161e:	2301      	movs	r3, #1
 8021620:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021622:	2303      	movs	r3, #3
 8021624:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8021626:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021628:	eb0d 0103 	add.w	r1, sp, r3
 802162c:	4811      	ldr	r0, [pc, #68]	; (8021674 <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 802162e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8021630:	f7e0 ff48 	bl	80024c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021634:	4b10      	ldr	r3, [pc, #64]	; (8021678 <HAL_I2C_MspInit+0x6c>)
 8021636:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8021638:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 802163c:	659a      	str	r2, [r3, #88]	; 0x58
 802163e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8021640:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8021646:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 8021648:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 802164a:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 802164c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 802164e:	f7e0 f99f 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8021652:	201f      	movs	r0, #31
 8021654:	f7e0 f9d0 	bl	80019f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8021658:	2200      	movs	r2, #0
 802165a:	2020      	movs	r0, #32
 802165c:	4611      	mov	r1, r2
 802165e:	f7e0 f997 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8021662:	2020      	movs	r0, #32
 8021664:	f7e0 f9c8 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8021668:	b007      	add	sp, #28
 802166a:	f85d fb04 	ldr.w	pc, [sp], #4
 802166e:	bf00      	nop
 8021670:	40005400 	.word	0x40005400
 8021674:	48000400 	.word	0x48000400
 8021678:	40021000 	.word	0x40021000

0802167c <HAL_SD_MspInit>:

}


void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 802167c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hsd->Instance==SDMMC1)
 802167e:	6802      	ldr	r2, [r0, #0]
 8021680:	4b18      	ldr	r3, [pc, #96]	; (80216e4 <HAL_SD_MspInit+0x68>)
 8021682:	429a      	cmp	r2, r3
{
 8021684:	b087      	sub	sp, #28
  if(hsd->Instance==SDMMC1)
 8021686:	d12b      	bne.n	80216e0 <HAL_SD_MspInit+0x64>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8021688:	4b17      	ldr	r3, [pc, #92]	; (80216e8 <HAL_SD_MspInit+0x6c>)
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 802168a:	4818      	ldr	r0, [pc, #96]	; (80216ec <HAL_SD_MspInit+0x70>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 802168c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 802168e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8021692:	64da      	str	r2, [r3, #76]	; 0x4c
 8021694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8021696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802169a:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 802169c:	2400      	movs	r4, #0
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 802169e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80216a0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80216a2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80216a6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80216a8:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80216aa:	250c      	movs	r5, #12
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80216ac:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80216ae:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80216b0:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80216b2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80216b4:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80216b6:	f7e0 ff05 	bl	80024c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80216ba:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80216bc:	eb0d 0103 	add.w	r1, sp, r3
 80216c0:	480b      	ldr	r0, [pc, #44]	; (80216f0 <HAL_SD_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80216c2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80216c4:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80216c6:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80216c8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80216ca:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80216cc:	f7e0 fefa 	bl	80024c4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80216d0:	2031      	movs	r0, #49	; 0x31
 80216d2:	4622      	mov	r2, r4
 80216d4:	4621      	mov	r1, r4
 80216d6:	f7e0 f95b 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80216da:	2031      	movs	r0, #49	; 0x31
 80216dc:	f7e0 f98c 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80216e0:	b007      	add	sp, #28
 80216e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80216e4:	50062400 	.word	0x50062400
 80216e8:	40021000 	.word	0x40021000
 80216ec:	48000800 	.word	0x48000800
 80216f0:	48000c00 	.word	0x48000c00

080216f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM15)
 80216f4:	6802      	ldr	r2, [r0, #0]
 80216f6:	4b08      	ldr	r3, [pc, #32]	; (8021718 <HAL_TIM_PWM_MspInit+0x24>)
 80216f8:	429a      	cmp	r2, r3
{
 80216fa:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM15)
 80216fc:	d10a      	bne.n	8021714 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80216fe:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
 8021702:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8021704:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8021708:	661a      	str	r2, [r3, #96]	; 0x60
 802170a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 802170c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8021710:	9301      	str	r3, [sp, #4]
 8021712:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8021714:	b002      	add	sp, #8
 8021716:	4770      	bx	lr
 8021718:	40014000 	.word	0x40014000

0802171c <HAL_SD_MspDeInit>:

void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 802171c:	b508      	push	{r3, lr}

  if(hsd->Instance==SDMMC1)
 802171e:	6802      	ldr	r2, [r0, #0]
 8021720:	4b0b      	ldr	r3, [pc, #44]	; (8021750 <HAL_SD_MspDeInit+0x34>)
 8021722:	429a      	cmp	r2, r3
 8021724:	d112      	bne.n	802174c <HAL_SD_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8021726:	4a0b      	ldr	r2, [pc, #44]	; (8021754 <HAL_SD_MspDeInit+0x38>)
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8021728:	480b      	ldr	r0, [pc, #44]	; (8021758 <HAL_SD_MspDeInit+0x3c>)
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 802172a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 802172c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8021730:	64d3      	str	r3, [r2, #76]	; 0x4c
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8021732:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8021736:	f7e0 ff9d 	bl	8002674 <HAL_GPIO_DeInit>
                          |GPIO_PIN_12);

    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 802173a:	4808      	ldr	r0, [pc, #32]	; (802175c <HAL_SD_MspDeInit+0x40>)
 802173c:	2104      	movs	r1, #4
 802173e:	f7e0 ff99 	bl	8002674 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8021742:	2031      	movs	r0, #49	; 0x31
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 8021744:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8021748:	f7e0 b962 	b.w	8001a10 <HAL_NVIC_DisableIRQ>
 802174c:	bd08      	pop	{r3, pc}
 802174e:	bf00      	nop
 8021750:	50062400 	.word	0x50062400
 8021754:	40021000 	.word	0x40021000
 8021758:	48000800 	.word	0x48000800
 802175c:	48000c00 	.word	0x48000c00

08021760 <DMA1_Channel1_IRQHandler>:
*/

void DMA1_Channel1_IRQHandler(void)
{

  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8021760:	4801      	ldr	r0, [pc, #4]	; (8021768 <DMA1_Channel1_IRQHandler+0x8>)
 8021762:	f7e0 bb18 	b.w	8001d96 <HAL_DMA_IRQHandler>
 8021766:	bf00      	nop
 8021768:	20090d54 	.word	0x20090d54

0802176c <NMI_Handler>:
 802176c:	4770      	bx	lr

0802176e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 802176e:	e7fe      	b.n	802176e <HardFault_Handler>

08021770 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8021770:	e7fe      	b.n	8021770 <MemManage_Handler>

08021772 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8021772:	e7fe      	b.n	8021772 <BusFault_Handler>

08021774 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8021774:	e7fe      	b.n	8021774 <UsageFault_Handler>

08021776 <SVC_Handler>:
 8021776:	4770      	bx	lr

08021778 <DebugMon_Handler>:
 8021778:	4770      	bx	lr

0802177a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 802177a:	4770      	bx	lr

0802177c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 802177c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 802177e:	f7df fc3f 	bl	8001000 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8021782:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8021786:	f7e0 b982 	b.w	8001a8e <HAL_SYSTICK_IRQHandler>
	...

0802178c <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 802178c:	4801      	ldr	r0, [pc, #4]	; (8021794 <SPI1_IRQHandler+0x8>)
 802178e:	f7e4 b97b 	b.w	8005a88 <HAL_SPI_IRQHandler>
 8021792:	bf00      	nop
 8021794:	20090e2c 	.word	0x20090e2c

08021798 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8021798:	4801      	ldr	r0, [pc, #4]	; (80217a0 <TIM5_IRQHandler+0x8>)
 802179a:	f7e4 bb56 	b.w	8005e4a <HAL_TIM_IRQHandler>
 802179e:	bf00      	nop
 80217a0:	20090acc 	.word	0x20090acc

080217a4 <LPUART1_IRQHandler>:
void LPUART1_IRQHandler(void)
{
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80217a4:	4801      	ldr	r0, [pc, #4]	; (80217ac <LPUART1_IRQHandler+0x8>)
 80217a6:	f7e4 bfef 	b.w	8006788 <HAL_UART_IRQHandler>
 80217aa:	bf00      	nop
 80217ac:	20090b30 	.word	0x20090b30

080217b0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80217b0:	4801      	ldr	r0, [pc, #4]	; (80217b8 <OTG_FS_IRQHandler+0x8>)
 80217b2:	f7e1 bed1 	b.w	8003558 <HAL_PCD_IRQHandler>
 80217b6:	bf00      	nop
 80217b8:	200911c4 	.word	0x200911c4

080217bc <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80217bc:	4801      	ldr	r0, [pc, #4]	; (80217c4 <I2C1_EV_IRQHandler+0x8>)
 80217be:	f7e1 ba57 	b.w	8002c70 <HAL_I2C_EV_IRQHandler>
 80217c2:	bf00      	nop
 80217c4:	20090998 	.word	0x20090998

080217c8 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80217c8:	4801      	ldr	r0, [pc, #4]	; (80217d0 <I2C1_ER_IRQHandler+0x8>)
 80217ca:	f7e1 bc67 	b.w	800309c <HAL_I2C_ER_IRQHandler>
 80217ce:	bf00      	nop
 80217d0:	20090998 	.word	0x20090998

080217d4 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80217d4:	4801      	ldr	r0, [pc, #4]	; (80217dc <SDMMC1_IRQHandler+0x8>)
 80217d6:	f7e3 bc35 	b.w	8005044 <HAL_SD_IRQHandler>
 80217da:	bf00      	nop
 80217dc:	20090a38 	.word	0x20090a38

080217e0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80217e0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80217e2:	4b0a      	ldr	r3, [pc, #40]	; (802180c <_sbrk+0x2c>)
 80217e4:	6819      	ldr	r1, [r3, #0]
{
 80217e6:	4602      	mov	r2, r0
	if (heap_end == 0)
 80217e8:	b909      	cbnz	r1, 80217ee <_sbrk+0xe>
		heap_end = &end;
 80217ea:	4909      	ldr	r1, [pc, #36]	; (8021810 <_sbrk+0x30>)
 80217ec:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80217ee:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80217f0:	4669      	mov	r1, sp
 80217f2:	4402      	add	r2, r0
 80217f4:	428a      	cmp	r2, r1
 80217f6:	d906      	bls.n	8021806 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80217f8:	f000 fa8c 	bl	8021d14 <__errno>
 80217fc:	230c      	movs	r3, #12
 80217fe:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8021800:	f04f 30ff 	mov.w	r0, #4294967295
 8021804:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 8021806:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8021808:	bd08      	pop	{r3, pc}
 802180a:	bf00      	nop
 802180c:	2008b870 	.word	0x2008b870
 8021810:	200917d0 	.word	0x200917d0

08021814 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021814:	490f      	ldr	r1, [pc, #60]	; (8021854 <SystemInit+0x40>)
 8021816:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 802181a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 802181e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8021822:	4b0d      	ldr	r3, [pc, #52]	; (8021858 <SystemInit+0x44>)
 8021824:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8021826:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8021828:	f042 0201 	orr.w	r2, r2, #1
 802182c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 802182e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8021830:	681a      	ldr	r2, [r3, #0]
 8021832:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8021836:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 802183a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 802183c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8021840:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8021842:	681a      	ldr	r2, [r3, #0]
 8021844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8021848:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 802184a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 802184c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8021850:	608b      	str	r3, [r1, #8]
 8021852:	4770      	bx	lr
 8021854:	e000ed00 	.word	0xe000ed00
 8021858:	40021000 	.word	0x40021000

0802185c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 802185c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 802185e:	2200      	movs	r2, #0
 8021860:	490a      	ldr	r1, [pc, #40]	; (802188c <MX_USB_DEVICE_Init+0x30>)
 8021862:	480b      	ldr	r0, [pc, #44]	; (8021890 <MX_USB_DEVICE_Init+0x34>)
 8021864:	f7e6 fc2d 	bl	80080c2 <USBD_Init>
  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID);
 8021868:	490a      	ldr	r1, [pc, #40]	; (8021894 <MX_USB_DEVICE_Init+0x38>)
 802186a:	4809      	ldr	r0, [pc, #36]	; (8021890 <MX_USB_DEVICE_Init+0x34>)
 802186c:	f7e6 fc3e 	bl	80080ec <USBD_RegisterClass>
  USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS);
 8021870:	4909      	ldr	r1, [pc, #36]	; (8021898 <MX_USB_DEVICE_Init+0x3c>)
 8021872:	4807      	ldr	r0, [pc, #28]	; (8021890 <MX_USB_DEVICE_Init+0x34>)
 8021874:	f7e6 fc1e 	bl	80080b4 <USBD_CUSTOM_HID_RegisterInterface>
  /* Verify if the Battery Charging Detection mode (BCD) is used : */
  /* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
  /* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
  /* If no, the USB device is started now. */
  if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 8021878:	4805      	ldr	r0, [pc, #20]	; (8021890 <MX_USB_DEVICE_Init+0x34>)
 802187a:	f000 f9ac 	bl	8021bd6 <USBD_LL_BatteryCharging>
 802187e:	b120      	cbz	r0, 802188a <MX_USB_DEVICE_Init+0x2e>
  USBD_Start(&hUsbDeviceFS);
 8021880:	4803      	ldr	r0, [pc, #12]	; (8021890 <MX_USB_DEVICE_Init+0x34>)
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8021882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  USBD_Start(&hUsbDeviceFS);
 8021886:	f7e6 bc38 	b.w	80080fa <USBD_Start>
 802188a:	bd08      	pop	{r3, pc}
 802188c:	20000a88 	.word	0x20000a88
 8021890:	20090f28 	.word	0x20090f28
 8021894:	20000020 	.word	0x20000020
 8021898:	20000a78 	.word	0x20000a78

0802189c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 802189c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 802189e:	6803      	ldr	r3, [r0, #0]
 80218a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80218a4:	b088      	sub	sp, #32
  if(pcdHandle->Instance==USB_OTG_FS)
 80218a6:	d133      	bne.n	8021910 <HAL_PCD_MspInit+0x74>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80218a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80218ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80218ae:	2302      	movs	r3, #2
 80218b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80218b2:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80218b4:	4c19      	ldr	r4, [pc, #100]	; (802191c <HAL_PCD_MspInit+0x80>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80218b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80218b8:	2303      	movs	r3, #3
 80218ba:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80218bc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80218be:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80218c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80218c4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80218c6:	f7e0 fdfd 	bl	80024c4 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80218ca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80218cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80218d0:	64e3      	str	r3, [r4, #76]	; 0x4c
 80218d2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80218d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80218d8:	9301      	str	r3, [sp, #4]
 80218da:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80218dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80218de:	00db      	lsls	r3, r3, #3
 80218e0:	d418      	bmi.n	8021914 <HAL_PCD_MspInit+0x78>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80218e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80218e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80218e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80218ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80218ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80218f0:	9302      	str	r3, [sp, #8]
 80218f2:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 80218f4:	f7e2 fabc 	bl	8003e70 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80218f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80218fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80218fe:	65a3      	str	r3, [r4, #88]	; 0x58
    {
      HAL_PWREx_EnableVddUSB();
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8021900:	2200      	movs	r2, #0
 8021902:	2043      	movs	r0, #67	; 0x43
 8021904:	4611      	mov	r1, r2
 8021906:	f7e0 f843 	bl	8001990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 802190a:	2043      	movs	r0, #67	; 0x43
 802190c:	f7e0 f874 	bl	80019f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8021910:	b008      	add	sp, #32
 8021912:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 8021914:	f7e2 faac 	bl	8003e70 <HAL_PWREx_EnableVddUSB>
 8021918:	e7f2      	b.n	8021900 <HAL_PCD_MspInit+0x64>
 802191a:	bf00      	nop
 802191c:	40021000 	.word	0x40021000

08021920 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8021920:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8021924:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021928:	f7e6 bbfe 	b.w	8008128 <USBD_LL_SetupStage>

0802192c <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 802192c:	231c      	movs	r3, #28
 802192e:	fb03 0301 	mla	r3, r3, r1, r0
 8021932:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021936:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 802193a:	f7e6 bc22 	b.w	8008182 <USBD_LL_DataOutStage>

0802193e <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802193e:	231c      	movs	r3, #28
 8021940:	fb03 0301 	mla	r3, r3, r1, r0
 8021944:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802194a:	f7e6 bc52 	b.w	80081f2 <USBD_LL_DataInStage>

0802194e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 802194e:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021952:	f7e6 bce3 	b.w	800831c <USBD_LL_SOF>

08021956 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8021956:	b510      	push	{r4, lr}
 8021958:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 802195a:	2101      	movs	r1, #1
 802195c:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021960:	f7e6 fcca 	bl	80082f8 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8021964:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 8021968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 802196c:	f7e6 bc9d 	b.w	80082aa <USBD_LL_Reset>

08021970 <HAL_PCD_SuspendCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021970:	6802      	ldr	r2, [r0, #0]
 8021972:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
{
 8021976:	b510      	push	{r4, lr}
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021978:	f043 0301 	orr.w	r3, r3, #1
{
 802197c:	4604      	mov	r4, r0
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 802197e:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8021982:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 8021986:	f7e6 fcba 	bl	80082fe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 802198a:	6a23      	ldr	r3, [r4, #32]
 802198c:	b123      	cbz	r3, 8021998 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 802198e:	4a03      	ldr	r2, [pc, #12]	; (802199c <HAL_PCD_SuspendCallback+0x2c>)
 8021990:	6913      	ldr	r3, [r2, #16]
 8021992:	f043 0306 	orr.w	r3, r3, #6
 8021996:	6113      	str	r3, [r2, #16]
 8021998:	bd10      	pop	{r4, pc}
 802199a:	bf00      	nop
 802199c:	e000ed00 	.word	0xe000ed00

080219a0 <HAL_PCD_ResumeCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80219a0:	6802      	ldr	r2, [r0, #0]
 80219a2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80219a6:	f023 0301 	bic.w	r3, r3, #1
{
 80219aa:	b510      	push	{r4, lr}
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80219ac:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80219b0:	6a03      	ldr	r3, [r0, #32]
{
 80219b2:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80219b4:	b133      	cbz	r3, 80219c4 <HAL_PCD_ResumeCallback+0x24>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80219b6:	4a06      	ldr	r2, [pc, #24]	; (80219d0 <HAL_PCD_ResumeCallback+0x30>)
 80219b8:	6913      	ldr	r3, [r2, #16]
 80219ba:	f023 0306 	bic.w	r3, r3, #6
 80219be:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 80219c0:	f7fe f8d6 	bl	801fb70 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80219c4:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
}
 80219c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80219cc:	f7e6 bca0 	b.w	8008310 <USBD_LL_Resume>
 80219d0:	e000ed00 	.word	0xe000ed00

080219d4 <HAL_PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80219d4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80219d8:	f7e6 bcae 	b.w	8008338 <USBD_LL_IsoOUTIncomplete>

080219dc <HAL_PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80219dc:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80219e0:	f7e6 bca8 	b.w	8008334 <USBD_LL_IsoINIncomplete>

080219e4 <HAL_PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80219e4:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80219e8:	f7e6 bca8 	b.w	800833c <USBD_LL_DevConnected>

080219ec <HAL_PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80219ec:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
 80219f0:	f7e6 bca6 	b.w	8008340 <USBD_LL_DevDisconnected>

080219f4 <USBD_LL_Init>:
{
 80219f4:	b508      	push	{r3, lr}
  if (pdev->id == DEVICE_FS) {
 80219f6:	7802      	ldrb	r2, [r0, #0]
 80219f8:	bb4a      	cbnz	r2, 8021a4e <USBD_LL_Init+0x5a>
  hpcd_USB_OTG_FS.pData = pdev;
 80219fa:	4b16      	ldr	r3, [pc, #88]	; (8021a54 <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80219fc:	2106      	movs	r1, #6
  hpcd_USB_OTG_FS.pData = pdev;
 80219fe:	f8c3 0404 	str.w	r0, [r3, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8021a02:	f8c0 3298 	str.w	r3, [r0, #664]	; 0x298
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8021a06:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8021a0a:	e883 0003 	stmia.w	r3, {r0, r1}
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8021a0e:	2102      	movs	r1, #2
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8021a10:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8021a12:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8021a14:	6199      	str	r1, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8021a16:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8021a18:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8021a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8021a1c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8021a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8021a20:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8021a22:	f7e1 fd06 	bl	8003432 <HAL_PCD_Init>
 8021a26:	b120      	cbz	r0, 8021a32 <USBD_LL_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 8021a28:	f240 116b 	movw	r1, #363	; 0x16b
 8021a2c:	480a      	ldr	r0, [pc, #40]	; (8021a58 <USBD_LL_Init+0x64>)
 8021a2e:	f7ff faf9 	bl	8021024 <_Error_Handler>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8021a32:	2180      	movs	r1, #128	; 0x80
 8021a34:	4807      	ldr	r0, [pc, #28]	; (8021a54 <USBD_LL_Init+0x60>)
 8021a36:	f7e2 f98d 	bl	8003d54 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8021a3a:	2240      	movs	r2, #64	; 0x40
 8021a3c:	2100      	movs	r1, #0
 8021a3e:	4805      	ldr	r0, [pc, #20]	; (8021a54 <USBD_LL_Init+0x60>)
 8021a40:	f7e2 f967 	bl	8003d12 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8021a44:	2280      	movs	r2, #128	; 0x80
 8021a46:	2101      	movs	r1, #1
 8021a48:	4802      	ldr	r0, [pc, #8]	; (8021a54 <USBD_LL_Init+0x60>)
 8021a4a:	f7e2 f962 	bl	8003d12 <HAL_PCDEx_SetTxFiFo>
}
 8021a4e:	2000      	movs	r0, #0
 8021a50:	bd08      	pop	{r3, pc}
 8021a52:	bf00      	nop
 8021a54:	200911c4 	.word	0x200911c4
 8021a58:	08031348 	.word	0x08031348

08021a5c <USBD_LL_Start>:
{
 8021a5c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8021a5e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021a62:	f7e1 fd63 	bl	800352c <HAL_PCD_Start>
 8021a66:	2803      	cmp	r0, #3
 8021a68:	bf9a      	itte	ls
 8021a6a:	4b02      	ldrls	r3, [pc, #8]	; (8021a74 <USBD_LL_Start+0x18>)
 8021a6c:	5c18      	ldrbls	r0, [r3, r0]
 8021a6e:	2002      	movhi	r0, #2
}
 8021a70:	bd08      	pop	{r3, pc}
 8021a72:	bf00      	nop
 8021a74:	08031344 	.word	0x08031344

08021a78 <USBD_LL_OpenEP>:
{
 8021a78:	b510      	push	{r4, lr}
 8021a7a:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021a7c:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021a80:	4613      	mov	r3, r2
 8021a82:	4622      	mov	r2, r4
 8021a84:	f7e2 f842 	bl	8003b0c <HAL_PCD_EP_Open>
 8021a88:	2803      	cmp	r0, #3
 8021a8a:	bf9a      	itte	ls
 8021a8c:	4b01      	ldrls	r3, [pc, #4]	; (8021a94 <USBD_LL_OpenEP+0x1c>)
 8021a8e:	5c18      	ldrbls	r0, [r3, r0]
 8021a90:	2002      	movhi	r0, #2
}
 8021a92:	bd10      	pop	{r4, pc}
 8021a94:	08031344 	.word	0x08031344

08021a98 <USBD_LL_CloseEP>:
{
 8021a98:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8021a9a:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021a9e:	f7e2 f86a 	bl	8003b76 <HAL_PCD_EP_Close>
 8021aa2:	2803      	cmp	r0, #3
 8021aa4:	bf9a      	itte	ls
 8021aa6:	4b02      	ldrls	r3, [pc, #8]	; (8021ab0 <USBD_LL_CloseEP+0x18>)
 8021aa8:	5c18      	ldrbls	r0, [r3, r0]
 8021aaa:	2002      	movhi	r0, #2
}
 8021aac:	bd08      	pop	{r3, pc}
 8021aae:	bf00      	nop
 8021ab0:	08031344 	.word	0x08031344

08021ab4 <USBD_LL_StallEP>:
{
 8021ab4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8021ab6:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021aba:	f7e2 f8bf 	bl	8003c3c <HAL_PCD_EP_SetStall>
 8021abe:	2803      	cmp	r0, #3
 8021ac0:	bf9a      	itte	ls
 8021ac2:	4b02      	ldrls	r3, [pc, #8]	; (8021acc <USBD_LL_StallEP+0x18>)
 8021ac4:	5c18      	ldrbls	r0, [r3, r0]
 8021ac6:	2002      	movhi	r0, #2
}
 8021ac8:	bd08      	pop	{r3, pc}
 8021aca:	bf00      	nop
 8021acc:	08031344 	.word	0x08031344

08021ad0 <USBD_LL_ClearStallEP>:
{
 8021ad0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8021ad2:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021ad6:	f7e2 f8ea 	bl	8003cae <HAL_PCD_EP_ClrStall>
 8021ada:	2803      	cmp	r0, #3
 8021adc:	bf9a      	itte	ls
 8021ade:	4b02      	ldrls	r3, [pc, #8]	; (8021ae8 <USBD_LL_ClearStallEP+0x18>)
 8021ae0:	5c18      	ldrbls	r0, [r3, r0]
 8021ae2:	2002      	movhi	r0, #2
}
 8021ae4:	bd08      	pop	{r3, pc}
 8021ae6:	bf00      	nop
 8021ae8:	08031344 	.word	0x08031344

08021aec <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8021aec:	f011 0f80 	tst.w	r1, #128	; 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8021af0:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8021af4:	f04f 021c 	mov.w	r2, #28
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8021af8:	bf1b      	ittet	ne
 8021afa:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8021afe:	fb02 3101 	mlane	r1, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8021b02:	fb02 3101 	mlaeq	r1, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8021b06:	f891 003e 	ldrbne.w	r0, [r1, #62]	; 0x3e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8021b0a:	bf08      	it	eq
 8021b0c:	f891 01fe 	ldrbeq.w	r0, [r1, #510]	; 0x1fe
}
 8021b10:	4770      	bx	lr
	...

08021b14 <USBD_LL_SetUSBAddress>:
{
 8021b14:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8021b16:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021b1a:	f7e1 ffe3 	bl	8003ae4 <HAL_PCD_SetAddress>
 8021b1e:	2803      	cmp	r0, #3
 8021b20:	bf9a      	itte	ls
 8021b22:	4b02      	ldrls	r3, [pc, #8]	; (8021b2c <USBD_LL_SetUSBAddress+0x18>)
 8021b24:	5c18      	ldrbls	r0, [r3, r0]
 8021b26:	2002      	movhi	r0, #2
}
 8021b28:	bd08      	pop	{r3, pc}
 8021b2a:	bf00      	nop
 8021b2c:	08031344 	.word	0x08031344

08021b30 <USBD_LL_Transmit>:
{
 8021b30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8021b32:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021b36:	f7e2 f866 	bl	8003c06 <HAL_PCD_EP_Transmit>
 8021b3a:	2803      	cmp	r0, #3
 8021b3c:	bf9a      	itte	ls
 8021b3e:	4b02      	ldrls	r3, [pc, #8]	; (8021b48 <USBD_LL_Transmit+0x18>)
 8021b40:	5c18      	ldrbls	r0, [r3, r0]
 8021b42:	2002      	movhi	r0, #2
}
 8021b44:	bd08      	pop	{r3, pc}
 8021b46:	bf00      	nop
 8021b48:	08031344 	.word	0x08031344

08021b4c <USBD_LL_PrepareReceive>:
{
 8021b4c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021b4e:	f8d0 0298 	ldr.w	r0, [r0, #664]	; 0x298
 8021b52:	f7e2 f83a 	bl	8003bca <HAL_PCD_EP_Receive>
 8021b56:	2803      	cmp	r0, #3
 8021b58:	bf9a      	itte	ls
 8021b5a:	4b02      	ldrls	r3, [pc, #8]	; (8021b64 <USBD_LL_PrepareReceive+0x18>)
 8021b5c:	5c18      	ldrbls	r0, [r3, r0]
 8021b5e:	2002      	movhi	r0, #2
}
 8021b60:	bd08      	pop	{r3, pc}
 8021b62:	bf00      	nop
 8021b64:	08031344 	.word	0x08031344

08021b68 <HAL_PCDEx_LPM_Callback>:
{
 8021b68:	b510      	push	{r4, lr}
 8021b6a:	4604      	mov	r4, r0
  switch (msg)
 8021b6c:	b111      	cbz	r1, 8021b74 <HAL_PCDEx_LPM_Callback+0xc>
 8021b6e:	2901      	cmp	r1, #1
 8021b70:	d016      	beq.n	8021ba0 <HAL_PCDEx_LPM_Callback+0x38>
 8021b72:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8021b74:	6a03      	ldr	r3, [r0, #32]
 8021b76:	b133      	cbz	r3, 8021b86 <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 8021b78:	f7fd fffa 	bl	801fb70 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021b7c:	4a12      	ldr	r2, [pc, #72]	; (8021bc8 <HAL_PCDEx_LPM_Callback+0x60>)
 8021b7e:	6913      	ldr	r3, [r2, #16]
 8021b80:	f023 0306 	bic.w	r3, r3, #6
 8021b84:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8021b86:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8021b88:	f8d4 0404 	ldr.w	r0, [r4, #1028]	; 0x404
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8021b8c:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8021b90:	f023 0301 	bic.w	r3, r3, #1
 8021b94:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
}
 8021b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 8021b9c:	f7e6 bbb8 	b.w	8008310 <USBD_LL_Resume>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021ba0:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8021ba2:	f8d0 0404 	ldr.w	r0, [r0, #1028]	; 0x404
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021ba6:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8021baa:	f043 0301 	orr.w	r3, r3, #1
 8021bae:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8021bb2:	f7e6 fba4 	bl	80082fe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8021bb6:	6a23      	ldr	r3, [r4, #32]
 8021bb8:	b123      	cbz	r3, 8021bc4 <HAL_PCDEx_LPM_Callback+0x5c>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021bba:	4a03      	ldr	r2, [pc, #12]	; (8021bc8 <HAL_PCDEx_LPM_Callback+0x60>)
 8021bbc:	6913      	ldr	r3, [r2, #16]
 8021bbe:	f043 0306 	orr.w	r3, r3, #6
 8021bc2:	6113      	str	r3, [r2, #16]
 8021bc4:	bd10      	pop	{r4, pc}
 8021bc6:	bf00      	nop
 8021bc8:	e000ed00 	.word	0xe000ed00

08021bcc <USBD_static_malloc>:
}
 8021bcc:	4800      	ldr	r0, [pc, #0]	; (8021bd0 <USBD_static_malloc+0x4>)
 8021bce:	4770      	bx	lr
 8021bd0:	2008b874 	.word	0x2008b874

08021bd4 <USBD_static_free>:
{
 8021bd4:	4770      	bx	lr

08021bd6 <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 8021bd6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8021bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021bdc:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8021bde:	bf14      	ite	ne
 8021be0:	2002      	movne	r0, #2
 8021be2:	2000      	moveq	r0, #0
 8021be4:	4770      	bx	lr

08021be6 <CUSTOM_HID_DeInit_FS>:
static int8_t CUSTOM_HID_DeInit_FS(void)
{
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
  /* USER CODE END 5 */
}
 8021be6:	2000      	movs	r0, #0
 8021be8:	4770      	bx	lr
	...

08021bec <CUSTOM_HID_OutEvent_FS>:
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 8021bec:	4b05      	ldr	r3, [pc, #20]	; (8021c04 <CUSTOM_HID_OutEvent_FS+0x18>)
 
  for (uint8_t i = 0; i < 12; i++)
  {
    dataToReceive[i] = hhid->Report_buf[i];
 8021bee:	4a06      	ldr	r2, [pc, #24]	; (8021c08 <CUSTOM_HID_OutEvent_FS+0x1c>)
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef*)hUsbDeviceFS.pClassData;;  
 8021bf0:	f8d3 0290 	ldr.w	r0, [r3, #656]	; 0x290
 8021bf4:	2300      	movs	r3, #0
    dataToReceive[i] = hhid->Report_buf[i];
 8021bf6:	5cc1      	ldrb	r1, [r0, r3]
 8021bf8:	5499      	strb	r1, [r3, r2]
 8021bfa:	3301      	adds	r3, #1
  for (uint8_t i = 0; i < 12; i++)
 8021bfc:	2b0c      	cmp	r3, #12
 8021bfe:	d1fa      	bne.n	8021bf6 <CUSTOM_HID_OutEvent_FS+0xa>
  }
 
 
  return (USBD_OK);
}
 8021c00:	2000      	movs	r0, #0
 8021c02:	4770      	bx	lr
 8021c04:	20090f28 	.word	0x20090f28
 8021c08:	2008a7ec 	.word	0x2008a7ec

08021c0c <CUSTOM_HID_Init_FS>:
 8021c0c:	2000      	movs	r0, #0
 8021c0e:	4770      	bx	lr

08021c10 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8021c10:	2312      	movs	r3, #18
 8021c12:	800b      	strh	r3, [r1, #0]
  return USBD_FS_DeviceDesc;
}
 8021c14:	4800      	ldr	r0, [pc, #0]	; (8021c18 <USBD_FS_DeviceDescriptor+0x8>)
 8021c16:	4770      	bx	lr
 8021c18:	20000ab4 	.word	0x20000ab4

08021c1c <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8021c1c:	2304      	movs	r3, #4
 8021c1e:	800b      	strh	r3, [r1, #0]
  return USBD_LangIDDesc;
}
 8021c20:	4800      	ldr	r0, [pc, #0]	; (8021c24 <USBD_FS_LangIDStrDescriptor+0x8>)
 8021c22:	4770      	bx	lr
 8021c24:	20000ac8 	.word	0x20000ac8

08021c28 <USBD_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_BOSDesc);
 8021c28:	230c      	movs	r3, #12
 8021c2a:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8021c2c:	4800      	ldr	r0, [pc, #0]	; (8021c30 <USBD_FS_USR_BOSDescriptor+0x8>)
 8021c2e:	4770      	bx	lr
 8021c30:	20000aa8 	.word	0x20000aa8

08021c34 <USBD_FS_ManufacturerStrDescriptor>:
{
 8021c34:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8021c36:	4c04      	ldr	r4, [pc, #16]	; (8021c48 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8021c38:	4804      	ldr	r0, [pc, #16]	; (8021c4c <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8021c3a:	460a      	mov	r2, r1
 8021c3c:	4621      	mov	r1, r4
 8021c3e:	f7e6 fd8b 	bl	8008758 <USBD_GetString>
}
 8021c42:	4620      	mov	r0, r4
 8021c44:	bd10      	pop	{r4, pc}
 8021c46:	bf00      	nop
 8021c48:	200915cc 	.word	0x200915cc
 8021c4c:	08031382 	.word	0x08031382

08021c50 <USBD_FS_ProductStrDescriptor>:
{
 8021c50:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8021c52:	4c04      	ldr	r4, [pc, #16]	; (8021c64 <USBD_FS_ProductStrDescriptor+0x14>)
 8021c54:	4804      	ldr	r0, [pc, #16]	; (8021c68 <USBD_FS_ProductStrDescriptor+0x18>)
 8021c56:	460a      	mov	r2, r1
 8021c58:	4621      	mov	r1, r4
 8021c5a:	f7e6 fd7d 	bl	8008758 <USBD_GetString>
}
 8021c5e:	4620      	mov	r0, r4
 8021c60:	bd10      	pop	{r4, pc}
 8021c62:	bf00      	nop
 8021c64:	200915cc 	.word	0x200915cc
 8021c68:	08031389 	.word	0x08031389

08021c6c <USBD_FS_SerialStrDescriptor>:
{
 8021c6c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8021c6e:	4c04      	ldr	r4, [pc, #16]	; (8021c80 <USBD_FS_SerialStrDescriptor+0x14>)
 8021c70:	4804      	ldr	r0, [pc, #16]	; (8021c84 <USBD_FS_SerialStrDescriptor+0x18>)
 8021c72:	460a      	mov	r2, r1
 8021c74:	4621      	mov	r1, r4
 8021c76:	f7e6 fd6f 	bl	8008758 <USBD_GetString>
}
 8021c7a:	4620      	mov	r0, r4
 8021c7c:	bd10      	pop	{r4, pc}
 8021c7e:	bf00      	nop
 8021c80:	200915cc 	.word	0x200915cc
 8021c84:	080313a7 	.word	0x080313a7

08021c88 <USBD_FS_ConfigStrDescriptor>:
{
 8021c88:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8021c8a:	4c04      	ldr	r4, [pc, #16]	; (8021c9c <USBD_FS_ConfigStrDescriptor+0x14>)
 8021c8c:	4804      	ldr	r0, [pc, #16]	; (8021ca0 <USBD_FS_ConfigStrDescriptor+0x18>)
 8021c8e:	460a      	mov	r2, r1
 8021c90:	4621      	mov	r1, r4
 8021c92:	f7e6 fd61 	bl	8008758 <USBD_GetString>
}
 8021c96:	4620      	mov	r0, r4
 8021c98:	bd10      	pop	{r4, pc}
 8021c9a:	bf00      	nop
 8021c9c:	200915cc 	.word	0x200915cc
 8021ca0:	0803135b 	.word	0x0803135b

08021ca4 <USBD_FS_InterfaceStrDescriptor>:
{
 8021ca4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8021ca6:	4c04      	ldr	r4, [pc, #16]	; (8021cb8 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8021ca8:	4804      	ldr	r0, [pc, #16]	; (8021cbc <USBD_FS_InterfaceStrDescriptor+0x18>)
 8021caa:	460a      	mov	r2, r1
 8021cac:	4621      	mov	r1, r4
 8021cae:	f7e6 fd53 	bl	8008758 <USBD_GetString>
}
 8021cb2:	4620      	mov	r0, r4
 8021cb4:	bd10      	pop	{r4, pc}
 8021cb6:	bf00      	nop
 8021cb8:	200915cc 	.word	0x200915cc
 8021cbc:	0803136d 	.word	0x0803136d

08021cc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8021cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021cf8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8021cc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8021cc6:	e003      	b.n	8021cd0 <LoopCopyDataInit>

08021cc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8021cc8:	4b0c      	ldr	r3, [pc, #48]	; (8021cfc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8021cca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8021ccc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8021cce:	3104      	adds	r1, #4

08021cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8021cd0:	480b      	ldr	r0, [pc, #44]	; (8021d00 <LoopForever+0xa>)
	ldr	r3, =_edata
 8021cd2:	4b0c      	ldr	r3, [pc, #48]	; (8021d04 <LoopForever+0xe>)
	adds	r2, r0, r1
 8021cd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8021cd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8021cd8:	d3f6      	bcc.n	8021cc8 <CopyDataInit>
	ldr	r2, =_sbss
 8021cda:	4a0b      	ldr	r2, [pc, #44]	; (8021d08 <LoopForever+0x12>)
	b	LoopFillZerobss
 8021cdc:	e002      	b.n	8021ce4 <LoopFillZerobss>

08021cde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8021cde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8021ce0:	f842 3b04 	str.w	r3, [r2], #4

08021ce4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8021ce4:	4b09      	ldr	r3, [pc, #36]	; (8021d0c <LoopForever+0x16>)
	cmp	r2, r3
 8021ce6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8021ce8:	d3f9      	bcc.n	8021cde <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8021cea:	f7ff fd93 	bl	8021814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021cee:	f000 f817 	bl	8021d20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8021cf2:	f7fd ffa9 	bl	801fc48 <main>

08021cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8021cf6:	e7fe      	b.n	8021cf6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8021cf8:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8021cfc:	08031480 	.word	0x08031480
	ldr	r0, =_sdata
 8021d00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8021d04:	20000b34 	.word	0x20000b34
	ldr	r2, =_sbss
 8021d08:	20000b38 	.word	0x20000b38
	ldr	r3, = _ebss
 8021d0c:	200917d0 	.word	0x200917d0

08021d10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8021d10:	e7fe      	b.n	8021d10 <ADC1_IRQHandler>
	...

08021d14 <__errno>:
 8021d14:	4b01      	ldr	r3, [pc, #4]	; (8021d1c <__errno+0x8>)
 8021d16:	6818      	ldr	r0, [r3, #0]
 8021d18:	4770      	bx	lr
 8021d1a:	bf00      	nop
 8021d1c:	20000acc 	.word	0x20000acc

08021d20 <__libc_init_array>:
 8021d20:	b570      	push	{r4, r5, r6, lr}
 8021d22:	4e0d      	ldr	r6, [pc, #52]	; (8021d58 <__libc_init_array+0x38>)
 8021d24:	4c0d      	ldr	r4, [pc, #52]	; (8021d5c <__libc_init_array+0x3c>)
 8021d26:	1ba4      	subs	r4, r4, r6
 8021d28:	10a4      	asrs	r4, r4, #2
 8021d2a:	2500      	movs	r5, #0
 8021d2c:	42a5      	cmp	r5, r4
 8021d2e:	d109      	bne.n	8021d44 <__libc_init_array+0x24>
 8021d30:	4e0b      	ldr	r6, [pc, #44]	; (8021d60 <__libc_init_array+0x40>)
 8021d32:	4c0c      	ldr	r4, [pc, #48]	; (8021d64 <__libc_init_array+0x44>)
 8021d34:	f002 fb34 	bl	80243a0 <_init>
 8021d38:	1ba4      	subs	r4, r4, r6
 8021d3a:	10a4      	asrs	r4, r4, #2
 8021d3c:	2500      	movs	r5, #0
 8021d3e:	42a5      	cmp	r5, r4
 8021d40:	d105      	bne.n	8021d4e <__libc_init_array+0x2e>
 8021d42:	bd70      	pop	{r4, r5, r6, pc}
 8021d44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021d48:	4798      	blx	r3
 8021d4a:	3501      	adds	r5, #1
 8021d4c:	e7ee      	b.n	8021d2c <__libc_init_array+0xc>
 8021d4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8021d52:	4798      	blx	r3
 8021d54:	3501      	adds	r5, #1
 8021d56:	e7f2      	b.n	8021d3e <__libc_init_array+0x1e>
 8021d58:	08031478 	.word	0x08031478
 8021d5c:	08031478 	.word	0x08031478
 8021d60:	08031478 	.word	0x08031478
 8021d64:	0803147c 	.word	0x0803147c

08021d68 <memcpy>:
 8021d68:	b510      	push	{r4, lr}
 8021d6a:	1e43      	subs	r3, r0, #1
 8021d6c:	440a      	add	r2, r1
 8021d6e:	4291      	cmp	r1, r2
 8021d70:	d100      	bne.n	8021d74 <memcpy+0xc>
 8021d72:	bd10      	pop	{r4, pc}
 8021d74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021d78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021d7c:	e7f7      	b.n	8021d6e <memcpy+0x6>

08021d7e <memset>:
 8021d7e:	4402      	add	r2, r0
 8021d80:	4603      	mov	r3, r0
 8021d82:	4293      	cmp	r3, r2
 8021d84:	d100      	bne.n	8021d88 <memset+0xa>
 8021d86:	4770      	bx	lr
 8021d88:	f803 1b01 	strb.w	r1, [r3], #1
 8021d8c:	e7f9      	b.n	8021d82 <memset+0x4>
	...

08021d90 <siprintf>:
 8021d90:	b40e      	push	{r1, r2, r3}
 8021d92:	b500      	push	{lr}
 8021d94:	b09c      	sub	sp, #112	; 0x70
 8021d96:	f44f 7102 	mov.w	r1, #520	; 0x208
 8021d9a:	ab1d      	add	r3, sp, #116	; 0x74
 8021d9c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8021da0:	9002      	str	r0, [sp, #8]
 8021da2:	9006      	str	r0, [sp, #24]
 8021da4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8021da8:	480a      	ldr	r0, [pc, #40]	; (8021dd4 <siprintf+0x44>)
 8021daa:	9104      	str	r1, [sp, #16]
 8021dac:	9107      	str	r1, [sp, #28]
 8021dae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8021db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8021db6:	f8ad 1016 	strh.w	r1, [sp, #22]
 8021dba:	6800      	ldr	r0, [r0, #0]
 8021dbc:	9301      	str	r3, [sp, #4]
 8021dbe:	a902      	add	r1, sp, #8
 8021dc0:	f000 f87c 	bl	8021ebc <_svfiprintf_r>
 8021dc4:	9b02      	ldr	r3, [sp, #8]
 8021dc6:	2200      	movs	r2, #0
 8021dc8:	701a      	strb	r2, [r3, #0]
 8021dca:	b01c      	add	sp, #112	; 0x70
 8021dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8021dd0:	b003      	add	sp, #12
 8021dd2:	4770      	bx	lr
 8021dd4:	20000acc 	.word	0x20000acc

08021dd8 <strcat>:
 8021dd8:	b510      	push	{r4, lr}
 8021dda:	4602      	mov	r2, r0
 8021ddc:	4613      	mov	r3, r2
 8021dde:	3201      	adds	r2, #1
 8021de0:	781c      	ldrb	r4, [r3, #0]
 8021de2:	2c00      	cmp	r4, #0
 8021de4:	d1fa      	bne.n	8021ddc <strcat+0x4>
 8021de6:	3b01      	subs	r3, #1
 8021de8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021dec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021df0:	2a00      	cmp	r2, #0
 8021df2:	d1f9      	bne.n	8021de8 <strcat+0x10>
 8021df4:	bd10      	pop	{r4, pc}

08021df6 <strcpy>:
 8021df6:	4603      	mov	r3, r0
 8021df8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021dfc:	f803 2b01 	strb.w	r2, [r3], #1
 8021e00:	2a00      	cmp	r2, #0
 8021e02:	d1f9      	bne.n	8021df8 <strcpy+0x2>
 8021e04:	4770      	bx	lr

08021e06 <__ssputs_r>:
 8021e06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021e0a:	688e      	ldr	r6, [r1, #8]
 8021e0c:	429e      	cmp	r6, r3
 8021e0e:	4682      	mov	sl, r0
 8021e10:	460c      	mov	r4, r1
 8021e12:	4691      	mov	r9, r2
 8021e14:	4698      	mov	r8, r3
 8021e16:	d835      	bhi.n	8021e84 <__ssputs_r+0x7e>
 8021e18:	898a      	ldrh	r2, [r1, #12]
 8021e1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021e1e:	d031      	beq.n	8021e84 <__ssputs_r+0x7e>
 8021e20:	6825      	ldr	r5, [r4, #0]
 8021e22:	6909      	ldr	r1, [r1, #16]
 8021e24:	1a6f      	subs	r7, r5, r1
 8021e26:	6965      	ldr	r5, [r4, #20]
 8021e28:	2302      	movs	r3, #2
 8021e2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021e2e:	fb95 f5f3 	sdiv	r5, r5, r3
 8021e32:	f108 0301 	add.w	r3, r8, #1
 8021e36:	443b      	add	r3, r7
 8021e38:	429d      	cmp	r5, r3
 8021e3a:	bf38      	it	cc
 8021e3c:	461d      	movcc	r5, r3
 8021e3e:	0553      	lsls	r3, r2, #21
 8021e40:	d531      	bpl.n	8021ea6 <__ssputs_r+0xa0>
 8021e42:	4629      	mov	r1, r5
 8021e44:	f000 fb2c 	bl	80224a0 <_malloc_r>
 8021e48:	4606      	mov	r6, r0
 8021e4a:	b950      	cbnz	r0, 8021e62 <__ssputs_r+0x5c>
 8021e4c:	230c      	movs	r3, #12
 8021e4e:	f8ca 3000 	str.w	r3, [sl]
 8021e52:	89a3      	ldrh	r3, [r4, #12]
 8021e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021e58:	81a3      	strh	r3, [r4, #12]
 8021e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8021e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e62:	463a      	mov	r2, r7
 8021e64:	6921      	ldr	r1, [r4, #16]
 8021e66:	f7ff ff7f 	bl	8021d68 <memcpy>
 8021e6a:	89a3      	ldrh	r3, [r4, #12]
 8021e6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021e74:	81a3      	strh	r3, [r4, #12]
 8021e76:	6126      	str	r6, [r4, #16]
 8021e78:	6165      	str	r5, [r4, #20]
 8021e7a:	443e      	add	r6, r7
 8021e7c:	1bed      	subs	r5, r5, r7
 8021e7e:	6026      	str	r6, [r4, #0]
 8021e80:	60a5      	str	r5, [r4, #8]
 8021e82:	4646      	mov	r6, r8
 8021e84:	4546      	cmp	r6, r8
 8021e86:	bf28      	it	cs
 8021e88:	4646      	movcs	r6, r8
 8021e8a:	4632      	mov	r2, r6
 8021e8c:	4649      	mov	r1, r9
 8021e8e:	6820      	ldr	r0, [r4, #0]
 8021e90:	f000 fa9e 	bl	80223d0 <memmove>
 8021e94:	68a3      	ldr	r3, [r4, #8]
 8021e96:	1b9b      	subs	r3, r3, r6
 8021e98:	60a3      	str	r3, [r4, #8]
 8021e9a:	6823      	ldr	r3, [r4, #0]
 8021e9c:	441e      	add	r6, r3
 8021e9e:	6026      	str	r6, [r4, #0]
 8021ea0:	2000      	movs	r0, #0
 8021ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021ea6:	462a      	mov	r2, r5
 8021ea8:	f000 fb58 	bl	802255c <_realloc_r>
 8021eac:	4606      	mov	r6, r0
 8021eae:	2800      	cmp	r0, #0
 8021eb0:	d1e1      	bne.n	8021e76 <__ssputs_r+0x70>
 8021eb2:	6921      	ldr	r1, [r4, #16]
 8021eb4:	4650      	mov	r0, sl
 8021eb6:	f000 faa5 	bl	8022404 <_free_r>
 8021eba:	e7c7      	b.n	8021e4c <__ssputs_r+0x46>

08021ebc <_svfiprintf_r>:
 8021ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ec0:	b09d      	sub	sp, #116	; 0x74
 8021ec2:	4680      	mov	r8, r0
 8021ec4:	9303      	str	r3, [sp, #12]
 8021ec6:	898b      	ldrh	r3, [r1, #12]
 8021ec8:	061c      	lsls	r4, r3, #24
 8021eca:	460d      	mov	r5, r1
 8021ecc:	4616      	mov	r6, r2
 8021ece:	d50f      	bpl.n	8021ef0 <_svfiprintf_r+0x34>
 8021ed0:	690b      	ldr	r3, [r1, #16]
 8021ed2:	b96b      	cbnz	r3, 8021ef0 <_svfiprintf_r+0x34>
 8021ed4:	2140      	movs	r1, #64	; 0x40
 8021ed6:	f000 fae3 	bl	80224a0 <_malloc_r>
 8021eda:	6028      	str	r0, [r5, #0]
 8021edc:	6128      	str	r0, [r5, #16]
 8021ede:	b928      	cbnz	r0, 8021eec <_svfiprintf_r+0x30>
 8021ee0:	230c      	movs	r3, #12
 8021ee2:	f8c8 3000 	str.w	r3, [r8]
 8021ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8021eea:	e0c5      	b.n	8022078 <_svfiprintf_r+0x1bc>
 8021eec:	2340      	movs	r3, #64	; 0x40
 8021eee:	616b      	str	r3, [r5, #20]
 8021ef0:	2300      	movs	r3, #0
 8021ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8021ef4:	2320      	movs	r3, #32
 8021ef6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021efa:	2330      	movs	r3, #48	; 0x30
 8021efc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021f00:	f04f 0b01 	mov.w	fp, #1
 8021f04:	4637      	mov	r7, r6
 8021f06:	463c      	mov	r4, r7
 8021f08:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021f0c:	2b00      	cmp	r3, #0
 8021f0e:	d13c      	bne.n	8021f8a <_svfiprintf_r+0xce>
 8021f10:	ebb7 0a06 	subs.w	sl, r7, r6
 8021f14:	d00b      	beq.n	8021f2e <_svfiprintf_r+0x72>
 8021f16:	4653      	mov	r3, sl
 8021f18:	4632      	mov	r2, r6
 8021f1a:	4629      	mov	r1, r5
 8021f1c:	4640      	mov	r0, r8
 8021f1e:	f7ff ff72 	bl	8021e06 <__ssputs_r>
 8021f22:	3001      	adds	r0, #1
 8021f24:	f000 80a3 	beq.w	802206e <_svfiprintf_r+0x1b2>
 8021f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f2a:	4453      	add	r3, sl
 8021f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8021f2e:	783b      	ldrb	r3, [r7, #0]
 8021f30:	2b00      	cmp	r3, #0
 8021f32:	f000 809c 	beq.w	802206e <_svfiprintf_r+0x1b2>
 8021f36:	2300      	movs	r3, #0
 8021f38:	f04f 32ff 	mov.w	r2, #4294967295
 8021f3c:	9304      	str	r3, [sp, #16]
 8021f3e:	9307      	str	r3, [sp, #28]
 8021f40:	9205      	str	r2, [sp, #20]
 8021f42:	9306      	str	r3, [sp, #24]
 8021f44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021f48:	931a      	str	r3, [sp, #104]	; 0x68
 8021f4a:	2205      	movs	r2, #5
 8021f4c:	7821      	ldrb	r1, [r4, #0]
 8021f4e:	4850      	ldr	r0, [pc, #320]	; (8022090 <_svfiprintf_r+0x1d4>)
 8021f50:	f7de f956 	bl	8000200 <memchr>
 8021f54:	1c67      	adds	r7, r4, #1
 8021f56:	9b04      	ldr	r3, [sp, #16]
 8021f58:	b9d8      	cbnz	r0, 8021f92 <_svfiprintf_r+0xd6>
 8021f5a:	06d9      	lsls	r1, r3, #27
 8021f5c:	bf44      	itt	mi
 8021f5e:	2220      	movmi	r2, #32
 8021f60:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021f64:	071a      	lsls	r2, r3, #28
 8021f66:	bf44      	itt	mi
 8021f68:	222b      	movmi	r2, #43	; 0x2b
 8021f6a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8021f6e:	7822      	ldrb	r2, [r4, #0]
 8021f70:	2a2a      	cmp	r2, #42	; 0x2a
 8021f72:	d016      	beq.n	8021fa2 <_svfiprintf_r+0xe6>
 8021f74:	9a07      	ldr	r2, [sp, #28]
 8021f76:	2100      	movs	r1, #0
 8021f78:	200a      	movs	r0, #10
 8021f7a:	4627      	mov	r7, r4
 8021f7c:	3401      	adds	r4, #1
 8021f7e:	783b      	ldrb	r3, [r7, #0]
 8021f80:	3b30      	subs	r3, #48	; 0x30
 8021f82:	2b09      	cmp	r3, #9
 8021f84:	d951      	bls.n	802202a <_svfiprintf_r+0x16e>
 8021f86:	b1c9      	cbz	r1, 8021fbc <_svfiprintf_r+0x100>
 8021f88:	e011      	b.n	8021fae <_svfiprintf_r+0xf2>
 8021f8a:	2b25      	cmp	r3, #37	; 0x25
 8021f8c:	d0c0      	beq.n	8021f10 <_svfiprintf_r+0x54>
 8021f8e:	4627      	mov	r7, r4
 8021f90:	e7b9      	b.n	8021f06 <_svfiprintf_r+0x4a>
 8021f92:	4a3f      	ldr	r2, [pc, #252]	; (8022090 <_svfiprintf_r+0x1d4>)
 8021f94:	1a80      	subs	r0, r0, r2
 8021f96:	fa0b f000 	lsl.w	r0, fp, r0
 8021f9a:	4318      	orrs	r0, r3
 8021f9c:	9004      	str	r0, [sp, #16]
 8021f9e:	463c      	mov	r4, r7
 8021fa0:	e7d3      	b.n	8021f4a <_svfiprintf_r+0x8e>
 8021fa2:	9a03      	ldr	r2, [sp, #12]
 8021fa4:	1d11      	adds	r1, r2, #4
 8021fa6:	6812      	ldr	r2, [r2, #0]
 8021fa8:	9103      	str	r1, [sp, #12]
 8021faa:	2a00      	cmp	r2, #0
 8021fac:	db01      	blt.n	8021fb2 <_svfiprintf_r+0xf6>
 8021fae:	9207      	str	r2, [sp, #28]
 8021fb0:	e004      	b.n	8021fbc <_svfiprintf_r+0x100>
 8021fb2:	4252      	negs	r2, r2
 8021fb4:	f043 0302 	orr.w	r3, r3, #2
 8021fb8:	9207      	str	r2, [sp, #28]
 8021fba:	9304      	str	r3, [sp, #16]
 8021fbc:	783b      	ldrb	r3, [r7, #0]
 8021fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8021fc0:	d10e      	bne.n	8021fe0 <_svfiprintf_r+0x124>
 8021fc2:	787b      	ldrb	r3, [r7, #1]
 8021fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8021fc6:	f107 0101 	add.w	r1, r7, #1
 8021fca:	d132      	bne.n	8022032 <_svfiprintf_r+0x176>
 8021fcc:	9b03      	ldr	r3, [sp, #12]
 8021fce:	1d1a      	adds	r2, r3, #4
 8021fd0:	681b      	ldr	r3, [r3, #0]
 8021fd2:	9203      	str	r2, [sp, #12]
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	bfb8      	it	lt
 8021fd8:	f04f 33ff 	movlt.w	r3, #4294967295
 8021fdc:	3702      	adds	r7, #2
 8021fde:	9305      	str	r3, [sp, #20]
 8021fe0:	4c2c      	ldr	r4, [pc, #176]	; (8022094 <_svfiprintf_r+0x1d8>)
 8021fe2:	7839      	ldrb	r1, [r7, #0]
 8021fe4:	2203      	movs	r2, #3
 8021fe6:	4620      	mov	r0, r4
 8021fe8:	f7de f90a 	bl	8000200 <memchr>
 8021fec:	b138      	cbz	r0, 8021ffe <_svfiprintf_r+0x142>
 8021fee:	2340      	movs	r3, #64	; 0x40
 8021ff0:	1b00      	subs	r0, r0, r4
 8021ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8021ff6:	9b04      	ldr	r3, [sp, #16]
 8021ff8:	4303      	orrs	r3, r0
 8021ffa:	9304      	str	r3, [sp, #16]
 8021ffc:	3701      	adds	r7, #1
 8021ffe:	7839      	ldrb	r1, [r7, #0]
 8022000:	4825      	ldr	r0, [pc, #148]	; (8022098 <_svfiprintf_r+0x1dc>)
 8022002:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022006:	2206      	movs	r2, #6
 8022008:	1c7e      	adds	r6, r7, #1
 802200a:	f7de f8f9 	bl	8000200 <memchr>
 802200e:	2800      	cmp	r0, #0
 8022010:	d035      	beq.n	802207e <_svfiprintf_r+0x1c2>
 8022012:	4b22      	ldr	r3, [pc, #136]	; (802209c <_svfiprintf_r+0x1e0>)
 8022014:	b9fb      	cbnz	r3, 8022056 <_svfiprintf_r+0x19a>
 8022016:	9b03      	ldr	r3, [sp, #12]
 8022018:	3307      	adds	r3, #7
 802201a:	f023 0307 	bic.w	r3, r3, #7
 802201e:	3308      	adds	r3, #8
 8022020:	9303      	str	r3, [sp, #12]
 8022022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022024:	444b      	add	r3, r9
 8022026:	9309      	str	r3, [sp, #36]	; 0x24
 8022028:	e76c      	b.n	8021f04 <_svfiprintf_r+0x48>
 802202a:	fb00 3202 	mla	r2, r0, r2, r3
 802202e:	2101      	movs	r1, #1
 8022030:	e7a3      	b.n	8021f7a <_svfiprintf_r+0xbe>
 8022032:	2300      	movs	r3, #0
 8022034:	9305      	str	r3, [sp, #20]
 8022036:	4618      	mov	r0, r3
 8022038:	240a      	movs	r4, #10
 802203a:	460f      	mov	r7, r1
 802203c:	3101      	adds	r1, #1
 802203e:	783a      	ldrb	r2, [r7, #0]
 8022040:	3a30      	subs	r2, #48	; 0x30
 8022042:	2a09      	cmp	r2, #9
 8022044:	d903      	bls.n	802204e <_svfiprintf_r+0x192>
 8022046:	2b00      	cmp	r3, #0
 8022048:	d0ca      	beq.n	8021fe0 <_svfiprintf_r+0x124>
 802204a:	9005      	str	r0, [sp, #20]
 802204c:	e7c8      	b.n	8021fe0 <_svfiprintf_r+0x124>
 802204e:	fb04 2000 	mla	r0, r4, r0, r2
 8022052:	2301      	movs	r3, #1
 8022054:	e7f1      	b.n	802203a <_svfiprintf_r+0x17e>
 8022056:	ab03      	add	r3, sp, #12
 8022058:	9300      	str	r3, [sp, #0]
 802205a:	462a      	mov	r2, r5
 802205c:	4b10      	ldr	r3, [pc, #64]	; (80220a0 <_svfiprintf_r+0x1e4>)
 802205e:	a904      	add	r1, sp, #16
 8022060:	4640      	mov	r0, r8
 8022062:	f3af 8000 	nop.w
 8022066:	f1b0 3fff 	cmp.w	r0, #4294967295
 802206a:	4681      	mov	r9, r0
 802206c:	d1d9      	bne.n	8022022 <_svfiprintf_r+0x166>
 802206e:	89ab      	ldrh	r3, [r5, #12]
 8022070:	065b      	lsls	r3, r3, #25
 8022072:	f53f af38 	bmi.w	8021ee6 <_svfiprintf_r+0x2a>
 8022076:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022078:	b01d      	add	sp, #116	; 0x74
 802207a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802207e:	ab03      	add	r3, sp, #12
 8022080:	9300      	str	r3, [sp, #0]
 8022082:	462a      	mov	r2, r5
 8022084:	4b06      	ldr	r3, [pc, #24]	; (80220a0 <_svfiprintf_r+0x1e4>)
 8022086:	a904      	add	r1, sp, #16
 8022088:	4640      	mov	r0, r8
 802208a:	f000 f881 	bl	8022190 <_printf_i>
 802208e:	e7ea      	b.n	8022066 <_svfiprintf_r+0x1aa>
 8022090:	080313b4 	.word	0x080313b4
 8022094:	080313ba 	.word	0x080313ba
 8022098:	080313be 	.word	0x080313be
 802209c:	00000000 	.word	0x00000000
 80220a0:	08021e07 	.word	0x08021e07

080220a4 <_printf_common>:
 80220a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220a8:	4691      	mov	r9, r2
 80220aa:	461f      	mov	r7, r3
 80220ac:	688a      	ldr	r2, [r1, #8]
 80220ae:	690b      	ldr	r3, [r1, #16]
 80220b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80220b4:	4293      	cmp	r3, r2
 80220b6:	bfb8      	it	lt
 80220b8:	4613      	movlt	r3, r2
 80220ba:	f8c9 3000 	str.w	r3, [r9]
 80220be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80220c2:	4606      	mov	r6, r0
 80220c4:	460c      	mov	r4, r1
 80220c6:	b112      	cbz	r2, 80220ce <_printf_common+0x2a>
 80220c8:	3301      	adds	r3, #1
 80220ca:	f8c9 3000 	str.w	r3, [r9]
 80220ce:	6823      	ldr	r3, [r4, #0]
 80220d0:	0699      	lsls	r1, r3, #26
 80220d2:	bf42      	ittt	mi
 80220d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80220d8:	3302      	addmi	r3, #2
 80220da:	f8c9 3000 	strmi.w	r3, [r9]
 80220de:	6825      	ldr	r5, [r4, #0]
 80220e0:	f015 0506 	ands.w	r5, r5, #6
 80220e4:	d107      	bne.n	80220f6 <_printf_common+0x52>
 80220e6:	f104 0a19 	add.w	sl, r4, #25
 80220ea:	68e3      	ldr	r3, [r4, #12]
 80220ec:	f8d9 2000 	ldr.w	r2, [r9]
 80220f0:	1a9b      	subs	r3, r3, r2
 80220f2:	429d      	cmp	r5, r3
 80220f4:	db29      	blt.n	802214a <_printf_common+0xa6>
 80220f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80220fa:	6822      	ldr	r2, [r4, #0]
 80220fc:	3300      	adds	r3, #0
 80220fe:	bf18      	it	ne
 8022100:	2301      	movne	r3, #1
 8022102:	0692      	lsls	r2, r2, #26
 8022104:	d42e      	bmi.n	8022164 <_printf_common+0xc0>
 8022106:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802210a:	4639      	mov	r1, r7
 802210c:	4630      	mov	r0, r6
 802210e:	47c0      	blx	r8
 8022110:	3001      	adds	r0, #1
 8022112:	d021      	beq.n	8022158 <_printf_common+0xb4>
 8022114:	6823      	ldr	r3, [r4, #0]
 8022116:	68e5      	ldr	r5, [r4, #12]
 8022118:	f8d9 2000 	ldr.w	r2, [r9]
 802211c:	f003 0306 	and.w	r3, r3, #6
 8022120:	2b04      	cmp	r3, #4
 8022122:	bf08      	it	eq
 8022124:	1aad      	subeq	r5, r5, r2
 8022126:	68a3      	ldr	r3, [r4, #8]
 8022128:	6922      	ldr	r2, [r4, #16]
 802212a:	bf0c      	ite	eq
 802212c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022130:	2500      	movne	r5, #0
 8022132:	4293      	cmp	r3, r2
 8022134:	bfc4      	itt	gt
 8022136:	1a9b      	subgt	r3, r3, r2
 8022138:	18ed      	addgt	r5, r5, r3
 802213a:	f04f 0900 	mov.w	r9, #0
 802213e:	341a      	adds	r4, #26
 8022140:	454d      	cmp	r5, r9
 8022142:	d11b      	bne.n	802217c <_printf_common+0xd8>
 8022144:	2000      	movs	r0, #0
 8022146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802214a:	2301      	movs	r3, #1
 802214c:	4652      	mov	r2, sl
 802214e:	4639      	mov	r1, r7
 8022150:	4630      	mov	r0, r6
 8022152:	47c0      	blx	r8
 8022154:	3001      	adds	r0, #1
 8022156:	d103      	bne.n	8022160 <_printf_common+0xbc>
 8022158:	f04f 30ff 	mov.w	r0, #4294967295
 802215c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022160:	3501      	adds	r5, #1
 8022162:	e7c2      	b.n	80220ea <_printf_common+0x46>
 8022164:	18e1      	adds	r1, r4, r3
 8022166:	1c5a      	adds	r2, r3, #1
 8022168:	2030      	movs	r0, #48	; 0x30
 802216a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802216e:	4422      	add	r2, r4
 8022170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022178:	3302      	adds	r3, #2
 802217a:	e7c4      	b.n	8022106 <_printf_common+0x62>
 802217c:	2301      	movs	r3, #1
 802217e:	4622      	mov	r2, r4
 8022180:	4639      	mov	r1, r7
 8022182:	4630      	mov	r0, r6
 8022184:	47c0      	blx	r8
 8022186:	3001      	adds	r0, #1
 8022188:	d0e6      	beq.n	8022158 <_printf_common+0xb4>
 802218a:	f109 0901 	add.w	r9, r9, #1
 802218e:	e7d7      	b.n	8022140 <_printf_common+0x9c>

08022190 <_printf_i>:
 8022190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022194:	4617      	mov	r7, r2
 8022196:	7e0a      	ldrb	r2, [r1, #24]
 8022198:	b085      	sub	sp, #20
 802219a:	2a6e      	cmp	r2, #110	; 0x6e
 802219c:	4698      	mov	r8, r3
 802219e:	4606      	mov	r6, r0
 80221a0:	460c      	mov	r4, r1
 80221a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80221a4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80221a8:	f000 80bc 	beq.w	8022324 <_printf_i+0x194>
 80221ac:	d81a      	bhi.n	80221e4 <_printf_i+0x54>
 80221ae:	2a63      	cmp	r2, #99	; 0x63
 80221b0:	d02e      	beq.n	8022210 <_printf_i+0x80>
 80221b2:	d80a      	bhi.n	80221ca <_printf_i+0x3a>
 80221b4:	2a00      	cmp	r2, #0
 80221b6:	f000 80c8 	beq.w	802234a <_printf_i+0x1ba>
 80221ba:	2a58      	cmp	r2, #88	; 0x58
 80221bc:	f000 808a 	beq.w	80222d4 <_printf_i+0x144>
 80221c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80221c4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80221c8:	e02a      	b.n	8022220 <_printf_i+0x90>
 80221ca:	2a64      	cmp	r2, #100	; 0x64
 80221cc:	d001      	beq.n	80221d2 <_printf_i+0x42>
 80221ce:	2a69      	cmp	r2, #105	; 0x69
 80221d0:	d1f6      	bne.n	80221c0 <_printf_i+0x30>
 80221d2:	6821      	ldr	r1, [r4, #0]
 80221d4:	681a      	ldr	r2, [r3, #0]
 80221d6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80221da:	d023      	beq.n	8022224 <_printf_i+0x94>
 80221dc:	1d11      	adds	r1, r2, #4
 80221de:	6019      	str	r1, [r3, #0]
 80221e0:	6813      	ldr	r3, [r2, #0]
 80221e2:	e027      	b.n	8022234 <_printf_i+0xa4>
 80221e4:	2a73      	cmp	r2, #115	; 0x73
 80221e6:	f000 80b4 	beq.w	8022352 <_printf_i+0x1c2>
 80221ea:	d808      	bhi.n	80221fe <_printf_i+0x6e>
 80221ec:	2a6f      	cmp	r2, #111	; 0x6f
 80221ee:	d02a      	beq.n	8022246 <_printf_i+0xb6>
 80221f0:	2a70      	cmp	r2, #112	; 0x70
 80221f2:	d1e5      	bne.n	80221c0 <_printf_i+0x30>
 80221f4:	680a      	ldr	r2, [r1, #0]
 80221f6:	f042 0220 	orr.w	r2, r2, #32
 80221fa:	600a      	str	r2, [r1, #0]
 80221fc:	e003      	b.n	8022206 <_printf_i+0x76>
 80221fe:	2a75      	cmp	r2, #117	; 0x75
 8022200:	d021      	beq.n	8022246 <_printf_i+0xb6>
 8022202:	2a78      	cmp	r2, #120	; 0x78
 8022204:	d1dc      	bne.n	80221c0 <_printf_i+0x30>
 8022206:	2278      	movs	r2, #120	; 0x78
 8022208:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 802220c:	496e      	ldr	r1, [pc, #440]	; (80223c8 <_printf_i+0x238>)
 802220e:	e064      	b.n	80222da <_printf_i+0x14a>
 8022210:	681a      	ldr	r2, [r3, #0]
 8022212:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8022216:	1d11      	adds	r1, r2, #4
 8022218:	6019      	str	r1, [r3, #0]
 802221a:	6813      	ldr	r3, [r2, #0]
 802221c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022220:	2301      	movs	r3, #1
 8022222:	e0a3      	b.n	802236c <_printf_i+0x1dc>
 8022224:	f011 0f40 	tst.w	r1, #64	; 0x40
 8022228:	f102 0104 	add.w	r1, r2, #4
 802222c:	6019      	str	r1, [r3, #0]
 802222e:	d0d7      	beq.n	80221e0 <_printf_i+0x50>
 8022230:	f9b2 3000 	ldrsh.w	r3, [r2]
 8022234:	2b00      	cmp	r3, #0
 8022236:	da03      	bge.n	8022240 <_printf_i+0xb0>
 8022238:	222d      	movs	r2, #45	; 0x2d
 802223a:	425b      	negs	r3, r3
 802223c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8022240:	4962      	ldr	r1, [pc, #392]	; (80223cc <_printf_i+0x23c>)
 8022242:	220a      	movs	r2, #10
 8022244:	e017      	b.n	8022276 <_printf_i+0xe6>
 8022246:	6820      	ldr	r0, [r4, #0]
 8022248:	6819      	ldr	r1, [r3, #0]
 802224a:	f010 0f80 	tst.w	r0, #128	; 0x80
 802224e:	d003      	beq.n	8022258 <_printf_i+0xc8>
 8022250:	1d08      	adds	r0, r1, #4
 8022252:	6018      	str	r0, [r3, #0]
 8022254:	680b      	ldr	r3, [r1, #0]
 8022256:	e006      	b.n	8022266 <_printf_i+0xd6>
 8022258:	f010 0f40 	tst.w	r0, #64	; 0x40
 802225c:	f101 0004 	add.w	r0, r1, #4
 8022260:	6018      	str	r0, [r3, #0]
 8022262:	d0f7      	beq.n	8022254 <_printf_i+0xc4>
 8022264:	880b      	ldrh	r3, [r1, #0]
 8022266:	4959      	ldr	r1, [pc, #356]	; (80223cc <_printf_i+0x23c>)
 8022268:	2a6f      	cmp	r2, #111	; 0x6f
 802226a:	bf14      	ite	ne
 802226c:	220a      	movne	r2, #10
 802226e:	2208      	moveq	r2, #8
 8022270:	2000      	movs	r0, #0
 8022272:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8022276:	6865      	ldr	r5, [r4, #4]
 8022278:	60a5      	str	r5, [r4, #8]
 802227a:	2d00      	cmp	r5, #0
 802227c:	f2c0 809c 	blt.w	80223b8 <_printf_i+0x228>
 8022280:	6820      	ldr	r0, [r4, #0]
 8022282:	f020 0004 	bic.w	r0, r0, #4
 8022286:	6020      	str	r0, [r4, #0]
 8022288:	2b00      	cmp	r3, #0
 802228a:	d13f      	bne.n	802230c <_printf_i+0x17c>
 802228c:	2d00      	cmp	r5, #0
 802228e:	f040 8095 	bne.w	80223bc <_printf_i+0x22c>
 8022292:	4675      	mov	r5, lr
 8022294:	2a08      	cmp	r2, #8
 8022296:	d10b      	bne.n	80222b0 <_printf_i+0x120>
 8022298:	6823      	ldr	r3, [r4, #0]
 802229a:	07da      	lsls	r2, r3, #31
 802229c:	d508      	bpl.n	80222b0 <_printf_i+0x120>
 802229e:	6923      	ldr	r3, [r4, #16]
 80222a0:	6862      	ldr	r2, [r4, #4]
 80222a2:	429a      	cmp	r2, r3
 80222a4:	bfde      	ittt	le
 80222a6:	2330      	movle	r3, #48	; 0x30
 80222a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80222ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80222b0:	ebae 0305 	sub.w	r3, lr, r5
 80222b4:	6123      	str	r3, [r4, #16]
 80222b6:	f8cd 8000 	str.w	r8, [sp]
 80222ba:	463b      	mov	r3, r7
 80222bc:	aa03      	add	r2, sp, #12
 80222be:	4621      	mov	r1, r4
 80222c0:	4630      	mov	r0, r6
 80222c2:	f7ff feef 	bl	80220a4 <_printf_common>
 80222c6:	3001      	adds	r0, #1
 80222c8:	d155      	bne.n	8022376 <_printf_i+0x1e6>
 80222ca:	f04f 30ff 	mov.w	r0, #4294967295
 80222ce:	b005      	add	sp, #20
 80222d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80222d4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80222d8:	493c      	ldr	r1, [pc, #240]	; (80223cc <_printf_i+0x23c>)
 80222da:	6822      	ldr	r2, [r4, #0]
 80222dc:	6818      	ldr	r0, [r3, #0]
 80222de:	f012 0f80 	tst.w	r2, #128	; 0x80
 80222e2:	f100 0504 	add.w	r5, r0, #4
 80222e6:	601d      	str	r5, [r3, #0]
 80222e8:	d001      	beq.n	80222ee <_printf_i+0x15e>
 80222ea:	6803      	ldr	r3, [r0, #0]
 80222ec:	e002      	b.n	80222f4 <_printf_i+0x164>
 80222ee:	0655      	lsls	r5, r2, #25
 80222f0:	d5fb      	bpl.n	80222ea <_printf_i+0x15a>
 80222f2:	8803      	ldrh	r3, [r0, #0]
 80222f4:	07d0      	lsls	r0, r2, #31
 80222f6:	bf44      	itt	mi
 80222f8:	f042 0220 	orrmi.w	r2, r2, #32
 80222fc:	6022      	strmi	r2, [r4, #0]
 80222fe:	b91b      	cbnz	r3, 8022308 <_printf_i+0x178>
 8022300:	6822      	ldr	r2, [r4, #0]
 8022302:	f022 0220 	bic.w	r2, r2, #32
 8022306:	6022      	str	r2, [r4, #0]
 8022308:	2210      	movs	r2, #16
 802230a:	e7b1      	b.n	8022270 <_printf_i+0xe0>
 802230c:	4675      	mov	r5, lr
 802230e:	fbb3 f0f2 	udiv	r0, r3, r2
 8022312:	fb02 3310 	mls	r3, r2, r0, r3
 8022316:	5ccb      	ldrb	r3, [r1, r3]
 8022318:	f805 3d01 	strb.w	r3, [r5, #-1]!
 802231c:	4603      	mov	r3, r0
 802231e:	2800      	cmp	r0, #0
 8022320:	d1f5      	bne.n	802230e <_printf_i+0x17e>
 8022322:	e7b7      	b.n	8022294 <_printf_i+0x104>
 8022324:	6808      	ldr	r0, [r1, #0]
 8022326:	681a      	ldr	r2, [r3, #0]
 8022328:	6949      	ldr	r1, [r1, #20]
 802232a:	f010 0f80 	tst.w	r0, #128	; 0x80
 802232e:	d004      	beq.n	802233a <_printf_i+0x1aa>
 8022330:	1d10      	adds	r0, r2, #4
 8022332:	6018      	str	r0, [r3, #0]
 8022334:	6813      	ldr	r3, [r2, #0]
 8022336:	6019      	str	r1, [r3, #0]
 8022338:	e007      	b.n	802234a <_printf_i+0x1ba>
 802233a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802233e:	f102 0004 	add.w	r0, r2, #4
 8022342:	6018      	str	r0, [r3, #0]
 8022344:	6813      	ldr	r3, [r2, #0]
 8022346:	d0f6      	beq.n	8022336 <_printf_i+0x1a6>
 8022348:	8019      	strh	r1, [r3, #0]
 802234a:	2300      	movs	r3, #0
 802234c:	6123      	str	r3, [r4, #16]
 802234e:	4675      	mov	r5, lr
 8022350:	e7b1      	b.n	80222b6 <_printf_i+0x126>
 8022352:	681a      	ldr	r2, [r3, #0]
 8022354:	1d11      	adds	r1, r2, #4
 8022356:	6019      	str	r1, [r3, #0]
 8022358:	6815      	ldr	r5, [r2, #0]
 802235a:	6862      	ldr	r2, [r4, #4]
 802235c:	2100      	movs	r1, #0
 802235e:	4628      	mov	r0, r5
 8022360:	f7dd ff4e 	bl	8000200 <memchr>
 8022364:	b108      	cbz	r0, 802236a <_printf_i+0x1da>
 8022366:	1b40      	subs	r0, r0, r5
 8022368:	6060      	str	r0, [r4, #4]
 802236a:	6863      	ldr	r3, [r4, #4]
 802236c:	6123      	str	r3, [r4, #16]
 802236e:	2300      	movs	r3, #0
 8022370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022374:	e79f      	b.n	80222b6 <_printf_i+0x126>
 8022376:	6923      	ldr	r3, [r4, #16]
 8022378:	462a      	mov	r2, r5
 802237a:	4639      	mov	r1, r7
 802237c:	4630      	mov	r0, r6
 802237e:	47c0      	blx	r8
 8022380:	3001      	adds	r0, #1
 8022382:	d0a2      	beq.n	80222ca <_printf_i+0x13a>
 8022384:	6823      	ldr	r3, [r4, #0]
 8022386:	079b      	lsls	r3, r3, #30
 8022388:	d507      	bpl.n	802239a <_printf_i+0x20a>
 802238a:	2500      	movs	r5, #0
 802238c:	f104 0919 	add.w	r9, r4, #25
 8022390:	68e3      	ldr	r3, [r4, #12]
 8022392:	9a03      	ldr	r2, [sp, #12]
 8022394:	1a9b      	subs	r3, r3, r2
 8022396:	429d      	cmp	r5, r3
 8022398:	db05      	blt.n	80223a6 <_printf_i+0x216>
 802239a:	68e0      	ldr	r0, [r4, #12]
 802239c:	9b03      	ldr	r3, [sp, #12]
 802239e:	4298      	cmp	r0, r3
 80223a0:	bfb8      	it	lt
 80223a2:	4618      	movlt	r0, r3
 80223a4:	e793      	b.n	80222ce <_printf_i+0x13e>
 80223a6:	2301      	movs	r3, #1
 80223a8:	464a      	mov	r2, r9
 80223aa:	4639      	mov	r1, r7
 80223ac:	4630      	mov	r0, r6
 80223ae:	47c0      	blx	r8
 80223b0:	3001      	adds	r0, #1
 80223b2:	d08a      	beq.n	80222ca <_printf_i+0x13a>
 80223b4:	3501      	adds	r5, #1
 80223b6:	e7eb      	b.n	8022390 <_printf_i+0x200>
 80223b8:	2b00      	cmp	r3, #0
 80223ba:	d1a7      	bne.n	802230c <_printf_i+0x17c>
 80223bc:	780b      	ldrb	r3, [r1, #0]
 80223be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80223c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80223c6:	e765      	b.n	8022294 <_printf_i+0x104>
 80223c8:	080313d6 	.word	0x080313d6
 80223cc:	080313c5 	.word	0x080313c5

080223d0 <memmove>:
 80223d0:	4288      	cmp	r0, r1
 80223d2:	b510      	push	{r4, lr}
 80223d4:	eb01 0302 	add.w	r3, r1, r2
 80223d8:	d803      	bhi.n	80223e2 <memmove+0x12>
 80223da:	1e42      	subs	r2, r0, #1
 80223dc:	4299      	cmp	r1, r3
 80223de:	d10c      	bne.n	80223fa <memmove+0x2a>
 80223e0:	bd10      	pop	{r4, pc}
 80223e2:	4298      	cmp	r0, r3
 80223e4:	d2f9      	bcs.n	80223da <memmove+0xa>
 80223e6:	1881      	adds	r1, r0, r2
 80223e8:	1ad2      	subs	r2, r2, r3
 80223ea:	42d3      	cmn	r3, r2
 80223ec:	d100      	bne.n	80223f0 <memmove+0x20>
 80223ee:	bd10      	pop	{r4, pc}
 80223f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80223f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80223f8:	e7f7      	b.n	80223ea <memmove+0x1a>
 80223fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80223fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 8022402:	e7eb      	b.n	80223dc <memmove+0xc>

08022404 <_free_r>:
 8022404:	b538      	push	{r3, r4, r5, lr}
 8022406:	4605      	mov	r5, r0
 8022408:	2900      	cmp	r1, #0
 802240a:	d045      	beq.n	8022498 <_free_r+0x94>
 802240c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022410:	1f0c      	subs	r4, r1, #4
 8022412:	2b00      	cmp	r3, #0
 8022414:	bfb8      	it	lt
 8022416:	18e4      	addlt	r4, r4, r3
 8022418:	f000 f8d6 	bl	80225c8 <__malloc_lock>
 802241c:	4a1f      	ldr	r2, [pc, #124]	; (802249c <_free_r+0x98>)
 802241e:	6813      	ldr	r3, [r2, #0]
 8022420:	4610      	mov	r0, r2
 8022422:	b933      	cbnz	r3, 8022432 <_free_r+0x2e>
 8022424:	6063      	str	r3, [r4, #4]
 8022426:	6014      	str	r4, [r2, #0]
 8022428:	4628      	mov	r0, r5
 802242a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802242e:	f000 b8cc 	b.w	80225ca <__malloc_unlock>
 8022432:	42a3      	cmp	r3, r4
 8022434:	d90c      	bls.n	8022450 <_free_r+0x4c>
 8022436:	6821      	ldr	r1, [r4, #0]
 8022438:	1862      	adds	r2, r4, r1
 802243a:	4293      	cmp	r3, r2
 802243c:	bf04      	itt	eq
 802243e:	681a      	ldreq	r2, [r3, #0]
 8022440:	685b      	ldreq	r3, [r3, #4]
 8022442:	6063      	str	r3, [r4, #4]
 8022444:	bf04      	itt	eq
 8022446:	1852      	addeq	r2, r2, r1
 8022448:	6022      	streq	r2, [r4, #0]
 802244a:	6004      	str	r4, [r0, #0]
 802244c:	e7ec      	b.n	8022428 <_free_r+0x24>
 802244e:	4613      	mov	r3, r2
 8022450:	685a      	ldr	r2, [r3, #4]
 8022452:	b10a      	cbz	r2, 8022458 <_free_r+0x54>
 8022454:	42a2      	cmp	r2, r4
 8022456:	d9fa      	bls.n	802244e <_free_r+0x4a>
 8022458:	6819      	ldr	r1, [r3, #0]
 802245a:	1858      	adds	r0, r3, r1
 802245c:	42a0      	cmp	r0, r4
 802245e:	d10b      	bne.n	8022478 <_free_r+0x74>
 8022460:	6820      	ldr	r0, [r4, #0]
 8022462:	4401      	add	r1, r0
 8022464:	1858      	adds	r0, r3, r1
 8022466:	4282      	cmp	r2, r0
 8022468:	6019      	str	r1, [r3, #0]
 802246a:	d1dd      	bne.n	8022428 <_free_r+0x24>
 802246c:	6810      	ldr	r0, [r2, #0]
 802246e:	6852      	ldr	r2, [r2, #4]
 8022470:	605a      	str	r2, [r3, #4]
 8022472:	4401      	add	r1, r0
 8022474:	6019      	str	r1, [r3, #0]
 8022476:	e7d7      	b.n	8022428 <_free_r+0x24>
 8022478:	d902      	bls.n	8022480 <_free_r+0x7c>
 802247a:	230c      	movs	r3, #12
 802247c:	602b      	str	r3, [r5, #0]
 802247e:	e7d3      	b.n	8022428 <_free_r+0x24>
 8022480:	6820      	ldr	r0, [r4, #0]
 8022482:	1821      	adds	r1, r4, r0
 8022484:	428a      	cmp	r2, r1
 8022486:	bf04      	itt	eq
 8022488:	6811      	ldreq	r1, [r2, #0]
 802248a:	6852      	ldreq	r2, [r2, #4]
 802248c:	6062      	str	r2, [r4, #4]
 802248e:	bf04      	itt	eq
 8022490:	1809      	addeq	r1, r1, r0
 8022492:	6021      	streq	r1, [r4, #0]
 8022494:	605c      	str	r4, [r3, #4]
 8022496:	e7c7      	b.n	8022428 <_free_r+0x24>
 8022498:	bd38      	pop	{r3, r4, r5, pc}
 802249a:	bf00      	nop
 802249c:	2008b898 	.word	0x2008b898

080224a0 <_malloc_r>:
 80224a0:	b570      	push	{r4, r5, r6, lr}
 80224a2:	1ccd      	adds	r5, r1, #3
 80224a4:	f025 0503 	bic.w	r5, r5, #3
 80224a8:	3508      	adds	r5, #8
 80224aa:	2d0c      	cmp	r5, #12
 80224ac:	bf38      	it	cc
 80224ae:	250c      	movcc	r5, #12
 80224b0:	2d00      	cmp	r5, #0
 80224b2:	4606      	mov	r6, r0
 80224b4:	db01      	blt.n	80224ba <_malloc_r+0x1a>
 80224b6:	42a9      	cmp	r1, r5
 80224b8:	d903      	bls.n	80224c2 <_malloc_r+0x22>
 80224ba:	230c      	movs	r3, #12
 80224bc:	6033      	str	r3, [r6, #0]
 80224be:	2000      	movs	r0, #0
 80224c0:	bd70      	pop	{r4, r5, r6, pc}
 80224c2:	f000 f881 	bl	80225c8 <__malloc_lock>
 80224c6:	4a23      	ldr	r2, [pc, #140]	; (8022554 <_malloc_r+0xb4>)
 80224c8:	6814      	ldr	r4, [r2, #0]
 80224ca:	4621      	mov	r1, r4
 80224cc:	b991      	cbnz	r1, 80224f4 <_malloc_r+0x54>
 80224ce:	4c22      	ldr	r4, [pc, #136]	; (8022558 <_malloc_r+0xb8>)
 80224d0:	6823      	ldr	r3, [r4, #0]
 80224d2:	b91b      	cbnz	r3, 80224dc <_malloc_r+0x3c>
 80224d4:	4630      	mov	r0, r6
 80224d6:	f000 f867 	bl	80225a8 <_sbrk_r>
 80224da:	6020      	str	r0, [r4, #0]
 80224dc:	4629      	mov	r1, r5
 80224de:	4630      	mov	r0, r6
 80224e0:	f000 f862 	bl	80225a8 <_sbrk_r>
 80224e4:	1c43      	adds	r3, r0, #1
 80224e6:	d126      	bne.n	8022536 <_malloc_r+0x96>
 80224e8:	230c      	movs	r3, #12
 80224ea:	6033      	str	r3, [r6, #0]
 80224ec:	4630      	mov	r0, r6
 80224ee:	f000 f86c 	bl	80225ca <__malloc_unlock>
 80224f2:	e7e4      	b.n	80224be <_malloc_r+0x1e>
 80224f4:	680b      	ldr	r3, [r1, #0]
 80224f6:	1b5b      	subs	r3, r3, r5
 80224f8:	d41a      	bmi.n	8022530 <_malloc_r+0x90>
 80224fa:	2b0b      	cmp	r3, #11
 80224fc:	d90f      	bls.n	802251e <_malloc_r+0x7e>
 80224fe:	600b      	str	r3, [r1, #0]
 8022500:	50cd      	str	r5, [r1, r3]
 8022502:	18cc      	adds	r4, r1, r3
 8022504:	4630      	mov	r0, r6
 8022506:	f000 f860 	bl	80225ca <__malloc_unlock>
 802250a:	f104 000b 	add.w	r0, r4, #11
 802250e:	1d23      	adds	r3, r4, #4
 8022510:	f020 0007 	bic.w	r0, r0, #7
 8022514:	1ac3      	subs	r3, r0, r3
 8022516:	d01b      	beq.n	8022550 <_malloc_r+0xb0>
 8022518:	425a      	negs	r2, r3
 802251a:	50e2      	str	r2, [r4, r3]
 802251c:	bd70      	pop	{r4, r5, r6, pc}
 802251e:	428c      	cmp	r4, r1
 8022520:	bf0d      	iteet	eq
 8022522:	6863      	ldreq	r3, [r4, #4]
 8022524:	684b      	ldrne	r3, [r1, #4]
 8022526:	6063      	strne	r3, [r4, #4]
 8022528:	6013      	streq	r3, [r2, #0]
 802252a:	bf18      	it	ne
 802252c:	460c      	movne	r4, r1
 802252e:	e7e9      	b.n	8022504 <_malloc_r+0x64>
 8022530:	460c      	mov	r4, r1
 8022532:	6849      	ldr	r1, [r1, #4]
 8022534:	e7ca      	b.n	80224cc <_malloc_r+0x2c>
 8022536:	1cc4      	adds	r4, r0, #3
 8022538:	f024 0403 	bic.w	r4, r4, #3
 802253c:	42a0      	cmp	r0, r4
 802253e:	d005      	beq.n	802254c <_malloc_r+0xac>
 8022540:	1a21      	subs	r1, r4, r0
 8022542:	4630      	mov	r0, r6
 8022544:	f000 f830 	bl	80225a8 <_sbrk_r>
 8022548:	3001      	adds	r0, #1
 802254a:	d0cd      	beq.n	80224e8 <_malloc_r+0x48>
 802254c:	6025      	str	r5, [r4, #0]
 802254e:	e7d9      	b.n	8022504 <_malloc_r+0x64>
 8022550:	bd70      	pop	{r4, r5, r6, pc}
 8022552:	bf00      	nop
 8022554:	2008b898 	.word	0x2008b898
 8022558:	2008b89c 	.word	0x2008b89c

0802255c <_realloc_r>:
 802255c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802255e:	4607      	mov	r7, r0
 8022560:	4614      	mov	r4, r2
 8022562:	460e      	mov	r6, r1
 8022564:	b921      	cbnz	r1, 8022570 <_realloc_r+0x14>
 8022566:	4611      	mov	r1, r2
 8022568:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 802256c:	f7ff bf98 	b.w	80224a0 <_malloc_r>
 8022570:	b922      	cbnz	r2, 802257c <_realloc_r+0x20>
 8022572:	f7ff ff47 	bl	8022404 <_free_r>
 8022576:	4625      	mov	r5, r4
 8022578:	4628      	mov	r0, r5
 802257a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802257c:	f000 f826 	bl	80225cc <_malloc_usable_size_r>
 8022580:	4284      	cmp	r4, r0
 8022582:	d90f      	bls.n	80225a4 <_realloc_r+0x48>
 8022584:	4621      	mov	r1, r4
 8022586:	4638      	mov	r0, r7
 8022588:	f7ff ff8a 	bl	80224a0 <_malloc_r>
 802258c:	4605      	mov	r5, r0
 802258e:	2800      	cmp	r0, #0
 8022590:	d0f2      	beq.n	8022578 <_realloc_r+0x1c>
 8022592:	4631      	mov	r1, r6
 8022594:	4622      	mov	r2, r4
 8022596:	f7ff fbe7 	bl	8021d68 <memcpy>
 802259a:	4631      	mov	r1, r6
 802259c:	4638      	mov	r0, r7
 802259e:	f7ff ff31 	bl	8022404 <_free_r>
 80225a2:	e7e9      	b.n	8022578 <_realloc_r+0x1c>
 80225a4:	4635      	mov	r5, r6
 80225a6:	e7e7      	b.n	8022578 <_realloc_r+0x1c>

080225a8 <_sbrk_r>:
 80225a8:	b538      	push	{r3, r4, r5, lr}
 80225aa:	4c06      	ldr	r4, [pc, #24]	; (80225c4 <_sbrk_r+0x1c>)
 80225ac:	2300      	movs	r3, #0
 80225ae:	4605      	mov	r5, r0
 80225b0:	4608      	mov	r0, r1
 80225b2:	6023      	str	r3, [r4, #0]
 80225b4:	f7ff f914 	bl	80217e0 <_sbrk>
 80225b8:	1c43      	adds	r3, r0, #1
 80225ba:	d102      	bne.n	80225c2 <_sbrk_r+0x1a>
 80225bc:	6823      	ldr	r3, [r4, #0]
 80225be:	b103      	cbz	r3, 80225c2 <_sbrk_r+0x1a>
 80225c0:	602b      	str	r3, [r5, #0]
 80225c2:	bd38      	pop	{r3, r4, r5, pc}
 80225c4:	200917cc 	.word	0x200917cc

080225c8 <__malloc_lock>:
 80225c8:	4770      	bx	lr

080225ca <__malloc_unlock>:
 80225ca:	4770      	bx	lr

080225cc <_malloc_usable_size_r>:
 80225cc:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80225d0:	2800      	cmp	r0, #0
 80225d2:	f1a0 0004 	sub.w	r0, r0, #4
 80225d6:	bfbc      	itt	lt
 80225d8:	580b      	ldrlt	r3, [r1, r0]
 80225da:	18c0      	addlt	r0, r0, r3
 80225dc:	4770      	bx	lr
	...

080225e0 <cbrt>:
 80225e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80225e4:	ec51 0b10 	vmov	r0, r1, d0
 80225e8:	4a59      	ldr	r2, [pc, #356]	; (8022750 <cbrt+0x170>)
 80225ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80225ee:	4293      	cmp	r3, r2
 80225f0:	468a      	mov	sl, r1
 80225f2:	ee10 2a10 	vmov	r2, s0
 80225f6:	d907      	bls.n	8022608 <cbrt+0x28>
 80225f8:	460b      	mov	r3, r1
 80225fa:	f7dd fe57 	bl	80002ac <__adddf3>
 80225fe:	ec41 0b10 	vmov	d0, r0, r1
 8022602:	b002      	add	sp, #8
 8022604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022608:	431a      	orrs	r2, r3
 802260a:	d0f8      	beq.n	80225fe <cbrt+0x1e>
 802260c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8022610:	4619      	mov	r1, r3
 8022612:	4606      	mov	r6, r0
 8022614:	461f      	mov	r7, r3
 8022616:	d27c      	bcs.n	8022712 <cbrt+0x132>
 8022618:	2200      	movs	r2, #0
 802261a:	4b4e      	ldr	r3, [pc, #312]	; (8022754 <cbrt+0x174>)
 802261c:	f7dd fff8 	bl	8000610 <__aeabi_dmul>
 8022620:	2203      	movs	r2, #3
 8022622:	fbb1 f3f2 	udiv	r3, r1, r2
 8022626:	f103 5525 	add.w	r5, r3, #692060160	; 0x29400000
 802262a:	f505 157d 	add.w	r5, r5, #4145152	; 0x3f4000
 802262e:	f505 5562 	add.w	r5, r5, #14464	; 0x3880
 8022632:	4604      	mov	r4, r0
 8022634:	3513      	adds	r5, #19
 8022636:	4622      	mov	r2, r4
 8022638:	462b      	mov	r3, r5
 802263a:	4620      	mov	r0, r4
 802263c:	4629      	mov	r1, r5
 802263e:	f7dd ffe7 	bl	8000610 <__aeabi_dmul>
 8022642:	4632      	mov	r2, r6
 8022644:	463b      	mov	r3, r7
 8022646:	f7de f90d 	bl	8000864 <__aeabi_ddiv>
 802264a:	4622      	mov	r2, r4
 802264c:	462b      	mov	r3, r5
 802264e:	f7dd ffdf 	bl	8000610 <__aeabi_dmul>
 8022652:	a335      	add	r3, pc, #212	; (adr r3, 8022728 <cbrt+0x148>)
 8022654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022658:	f7dd fe28 	bl	80002ac <__adddf3>
 802265c:	a334      	add	r3, pc, #208	; (adr r3, 8022730 <cbrt+0x150>)
 802265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022662:	e9cd 0100 	strd	r0, r1, [sp]
 8022666:	f7dd fe21 	bl	80002ac <__adddf3>
 802266a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802266e:	4680      	mov	r8, r0
 8022670:	4689      	mov	r9, r1
 8022672:	a131      	add	r1, pc, #196	; (adr r1, 8022738 <cbrt+0x158>)
 8022674:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022678:	f7de f8f4 	bl	8000864 <__aeabi_ddiv>
 802267c:	4602      	mov	r2, r0
 802267e:	460b      	mov	r3, r1
 8022680:	4640      	mov	r0, r8
 8022682:	4649      	mov	r1, r9
 8022684:	f7dd fe12 	bl	80002ac <__adddf3>
 8022688:	4602      	mov	r2, r0
 802268a:	460b      	mov	r3, r1
 802268c:	a12c      	add	r1, pc, #176	; (adr r1, 8022740 <cbrt+0x160>)
 802268e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8022692:	f7de f8e7 	bl	8000864 <__aeabi_ddiv>
 8022696:	a32c      	add	r3, pc, #176	; (adr r3, 8022748 <cbrt+0x168>)
 8022698:	e9d3 2300 	ldrd	r2, r3, [r3]
 802269c:	f7dd fe06 	bl	80002ac <__adddf3>
 80226a0:	4622      	mov	r2, r4
 80226a2:	462b      	mov	r3, r5
 80226a4:	f7dd ffb4 	bl	8000610 <__aeabi_dmul>
 80226a8:	2400      	movs	r4, #0
 80226aa:	1c4d      	adds	r5, r1, #1
 80226ac:	4622      	mov	r2, r4
 80226ae:	462b      	mov	r3, r5
 80226b0:	4620      	mov	r0, r4
 80226b2:	4629      	mov	r1, r5
 80226b4:	f7dd ffac 	bl	8000610 <__aeabi_dmul>
 80226b8:	4602      	mov	r2, r0
 80226ba:	460b      	mov	r3, r1
 80226bc:	4630      	mov	r0, r6
 80226be:	4639      	mov	r1, r7
 80226c0:	f7de f8d0 	bl	8000864 <__aeabi_ddiv>
 80226c4:	4622      	mov	r2, r4
 80226c6:	462b      	mov	r3, r5
 80226c8:	4680      	mov	r8, r0
 80226ca:	4689      	mov	r9, r1
 80226cc:	f7dd fdec 	bl	80002a8 <__aeabi_dsub>
 80226d0:	4622      	mov	r2, r4
 80226d2:	4606      	mov	r6, r0
 80226d4:	460f      	mov	r7, r1
 80226d6:	462b      	mov	r3, r5
 80226d8:	4620      	mov	r0, r4
 80226da:	4629      	mov	r1, r5
 80226dc:	f7dd fde6 	bl	80002ac <__adddf3>
 80226e0:	4642      	mov	r2, r8
 80226e2:	464b      	mov	r3, r9
 80226e4:	f7dd fde2 	bl	80002ac <__adddf3>
 80226e8:	4602      	mov	r2, r0
 80226ea:	460b      	mov	r3, r1
 80226ec:	4630      	mov	r0, r6
 80226ee:	4639      	mov	r1, r7
 80226f0:	f7de f8b8 	bl	8000864 <__aeabi_ddiv>
 80226f4:	4622      	mov	r2, r4
 80226f6:	462b      	mov	r3, r5
 80226f8:	f7dd ff8a 	bl	8000610 <__aeabi_dmul>
 80226fc:	4602      	mov	r2, r0
 80226fe:	460b      	mov	r3, r1
 8022700:	4620      	mov	r0, r4
 8022702:	4629      	mov	r1, r5
 8022704:	f7dd fdd2 	bl	80002ac <__adddf3>
 8022708:	f00a 4a00 	and.w	sl, sl, #2147483648	; 0x80000000
 802270c:	ea4a 0101 	orr.w	r1, sl, r1
 8022710:	e775      	b.n	80225fe <cbrt+0x1e>
 8022712:	2203      	movs	r2, #3
 8022714:	fb93 f3f2 	sdiv	r3, r3, r2
 8022718:	f103 552c 	add.w	r5, r3, #721420288	; 0x2b000000
 802271c:	f5a5 05c1 	sub.w	r5, r5, #6324224	; 0x608000
 8022720:	2400      	movs	r4, #0
 8022722:	f2a5 756d 	subw	r5, r5, #1901	; 0x76d
 8022726:	e786      	b.n	8022636 <cbrt+0x56>
 8022728:	f15f15f1 	.word	0xf15f15f1
 802272c:	3fe15f15 	.word	0x3fe15f15
 8022730:	0ea0ea0f 	.word	0x0ea0ea0f
 8022734:	3ff6a0ea 	.word	0x3ff6a0ea
 8022738:	2532c834 	.word	0x2532c834
 802273c:	bfe691de 	.word	0xbfe691de
 8022740:	6db6db6e 	.word	0x6db6db6e
 8022744:	3ff9b6db 	.word	0x3ff9b6db
 8022748:	b6db6db7 	.word	0xb6db6db7
 802274c:	3fd6db6d 	.word	0x3fd6db6d
 8022750:	7fefffff 	.word	0x7fefffff
 8022754:	43500000 	.word	0x43500000

08022758 <floor>:
 8022758:	ec51 0b10 	vmov	r0, r1, d0
 802275c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022760:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8022764:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8022768:	2e13      	cmp	r6, #19
 802276a:	ee10 8a10 	vmov	r8, s0
 802276e:	460c      	mov	r4, r1
 8022770:	ee10 5a10 	vmov	r5, s0
 8022774:	dc35      	bgt.n	80227e2 <floor+0x8a>
 8022776:	2e00      	cmp	r6, #0
 8022778:	da17      	bge.n	80227aa <floor+0x52>
 802277a:	a335      	add	r3, pc, #212	; (adr r3, 8022850 <floor+0xf8>)
 802277c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022780:	f7dd fd94 	bl	80002ac <__adddf3>
 8022784:	2200      	movs	r2, #0
 8022786:	2300      	movs	r3, #0
 8022788:	f7de f9d2 	bl	8000b30 <__aeabi_dcmpgt>
 802278c:	b150      	cbz	r0, 80227a4 <floor+0x4c>
 802278e:	2c00      	cmp	r4, #0
 8022790:	da5a      	bge.n	8022848 <floor+0xf0>
 8022792:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8022796:	ea53 0308 	orrs.w	r3, r3, r8
 802279a:	4b2f      	ldr	r3, [pc, #188]	; (8022858 <floor+0x100>)
 802279c:	f04f 0500 	mov.w	r5, #0
 80227a0:	bf18      	it	ne
 80227a2:	461c      	movne	r4, r3
 80227a4:	4621      	mov	r1, r4
 80227a6:	4628      	mov	r0, r5
 80227a8:	e025      	b.n	80227f6 <floor+0x9e>
 80227aa:	4f2c      	ldr	r7, [pc, #176]	; (802285c <floor+0x104>)
 80227ac:	4137      	asrs	r7, r6
 80227ae:	ea01 0307 	and.w	r3, r1, r7
 80227b2:	4303      	orrs	r3, r0
 80227b4:	d01f      	beq.n	80227f6 <floor+0x9e>
 80227b6:	a326      	add	r3, pc, #152	; (adr r3, 8022850 <floor+0xf8>)
 80227b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80227bc:	f7dd fd76 	bl	80002ac <__adddf3>
 80227c0:	2200      	movs	r2, #0
 80227c2:	2300      	movs	r3, #0
 80227c4:	f7de f9b4 	bl	8000b30 <__aeabi_dcmpgt>
 80227c8:	2800      	cmp	r0, #0
 80227ca:	d0eb      	beq.n	80227a4 <floor+0x4c>
 80227cc:	2c00      	cmp	r4, #0
 80227ce:	bfbe      	ittt	lt
 80227d0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80227d4:	fa43 f606 	asrlt.w	r6, r3, r6
 80227d8:	19a4      	addlt	r4, r4, r6
 80227da:	ea24 0407 	bic.w	r4, r4, r7
 80227de:	2500      	movs	r5, #0
 80227e0:	e7e0      	b.n	80227a4 <floor+0x4c>
 80227e2:	2e33      	cmp	r6, #51	; 0x33
 80227e4:	dd0b      	ble.n	80227fe <floor+0xa6>
 80227e6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80227ea:	d104      	bne.n	80227f6 <floor+0x9e>
 80227ec:	ee10 2a10 	vmov	r2, s0
 80227f0:	460b      	mov	r3, r1
 80227f2:	f7dd fd5b 	bl	80002ac <__adddf3>
 80227f6:	ec41 0b10 	vmov	d0, r0, r1
 80227fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80227fe:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8022802:	f04f 33ff 	mov.w	r3, #4294967295
 8022806:	fa23 f707 	lsr.w	r7, r3, r7
 802280a:	4238      	tst	r0, r7
 802280c:	d0f3      	beq.n	80227f6 <floor+0x9e>
 802280e:	a310      	add	r3, pc, #64	; (adr r3, 8022850 <floor+0xf8>)
 8022810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022814:	f7dd fd4a 	bl	80002ac <__adddf3>
 8022818:	2200      	movs	r2, #0
 802281a:	2300      	movs	r3, #0
 802281c:	f7de f988 	bl	8000b30 <__aeabi_dcmpgt>
 8022820:	2800      	cmp	r0, #0
 8022822:	d0bf      	beq.n	80227a4 <floor+0x4c>
 8022824:	2c00      	cmp	r4, #0
 8022826:	da02      	bge.n	802282e <floor+0xd6>
 8022828:	2e14      	cmp	r6, #20
 802282a:	d103      	bne.n	8022834 <floor+0xdc>
 802282c:	3401      	adds	r4, #1
 802282e:	ea25 0507 	bic.w	r5, r5, r7
 8022832:	e7b7      	b.n	80227a4 <floor+0x4c>
 8022834:	2301      	movs	r3, #1
 8022836:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 802283a:	fa03 f606 	lsl.w	r6, r3, r6
 802283e:	4435      	add	r5, r6
 8022840:	45a8      	cmp	r8, r5
 8022842:	bf88      	it	hi
 8022844:	18e4      	addhi	r4, r4, r3
 8022846:	e7f2      	b.n	802282e <floor+0xd6>
 8022848:	2500      	movs	r5, #0
 802284a:	462c      	mov	r4, r5
 802284c:	e7aa      	b.n	80227a4 <floor+0x4c>
 802284e:	bf00      	nop
 8022850:	8800759c 	.word	0x8800759c
 8022854:	7e37e43c 	.word	0x7e37e43c
 8022858:	bff00000 	.word	0xbff00000
 802285c:	000fffff 	.word	0x000fffff

08022860 <exp>:
 8022860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022862:	ed2d 8b02 	vpush	{d8}
 8022866:	4e38      	ldr	r6, [pc, #224]	; (8022948 <exp+0xe8>)
 8022868:	b08b      	sub	sp, #44	; 0x2c
 802286a:	ec55 4b10 	vmov	r4, r5, d0
 802286e:	f000 fb17 	bl	8022ea0 <__ieee754_exp>
 8022872:	f996 3000 	ldrsb.w	r3, [r6]
 8022876:	eeb0 8a40 	vmov.f32	s16, s0
 802287a:	eef0 8a60 	vmov.f32	s17, s1
 802287e:	3301      	adds	r3, #1
 8022880:	d02c      	beq.n	80228dc <exp+0x7c>
 8022882:	ec45 4b10 	vmov	d0, r4, r5
 8022886:	f001 fc67 	bl	8024158 <finite>
 802288a:	b338      	cbz	r0, 80228dc <exp+0x7c>
 802288c:	a32a      	add	r3, pc, #168	; (adr r3, 8022938 <exp+0xd8>)
 802288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022892:	4620      	mov	r0, r4
 8022894:	4629      	mov	r1, r5
 8022896:	f7de f94b 	bl	8000b30 <__aeabi_dcmpgt>
 802289a:	4607      	mov	r7, r0
 802289c:	2800      	cmp	r0, #0
 802289e:	d030      	beq.n	8022902 <exp+0xa2>
 80228a0:	2303      	movs	r3, #3
 80228a2:	9300      	str	r3, [sp, #0]
 80228a4:	4b29      	ldr	r3, [pc, #164]	; (802294c <exp+0xec>)
 80228a6:	9301      	str	r3, [sp, #4]
 80228a8:	2300      	movs	r3, #0
 80228aa:	9308      	str	r3, [sp, #32]
 80228ac:	f996 3000 	ldrsb.w	r3, [r6]
 80228b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80228b4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80228b8:	b9c3      	cbnz	r3, 80228ec <exp+0x8c>
 80228ba:	4b25      	ldr	r3, [pc, #148]	; (8022950 <exp+0xf0>)
 80228bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80228c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80228c4:	4668      	mov	r0, sp
 80228c6:	f001 fc4f 	bl	8024168 <matherr>
 80228ca:	b1a8      	cbz	r0, 80228f8 <exp+0x98>
 80228cc:	9b08      	ldr	r3, [sp, #32]
 80228ce:	b11b      	cbz	r3, 80228d8 <exp+0x78>
 80228d0:	f7ff fa20 	bl	8021d14 <__errno>
 80228d4:	9b08      	ldr	r3, [sp, #32]
 80228d6:	6003      	str	r3, [r0, #0]
 80228d8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80228dc:	eeb0 0a48 	vmov.f32	s0, s16
 80228e0:	eef0 0a68 	vmov.f32	s1, s17
 80228e4:	b00b      	add	sp, #44	; 0x2c
 80228e6:	ecbd 8b02 	vpop	{d8}
 80228ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80228ec:	4919      	ldr	r1, [pc, #100]	; (8022954 <exp+0xf4>)
 80228ee:	2000      	movs	r0, #0
 80228f0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80228f4:	2b02      	cmp	r3, #2
 80228f6:	d1e5      	bne.n	80228c4 <exp+0x64>
 80228f8:	f7ff fa0c 	bl	8021d14 <__errno>
 80228fc:	2322      	movs	r3, #34	; 0x22
 80228fe:	6003      	str	r3, [r0, #0]
 8022900:	e7e4      	b.n	80228cc <exp+0x6c>
 8022902:	a30f      	add	r3, pc, #60	; (adr r3, 8022940 <exp+0xe0>)
 8022904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022908:	4620      	mov	r0, r4
 802290a:	4629      	mov	r1, r5
 802290c:	f7de f8f2 	bl	8000af4 <__aeabi_dcmplt>
 8022910:	2800      	cmp	r0, #0
 8022912:	d0e3      	beq.n	80228dc <exp+0x7c>
 8022914:	2304      	movs	r3, #4
 8022916:	9300      	str	r3, [sp, #0]
 8022918:	4b0c      	ldr	r3, [pc, #48]	; (802294c <exp+0xec>)
 802291a:	9301      	str	r3, [sp, #4]
 802291c:	2200      	movs	r2, #0
 802291e:	2300      	movs	r3, #0
 8022920:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022924:	9708      	str	r7, [sp, #32]
 8022926:	e9cd 4504 	strd	r4, r5, [sp, #16]
 802292a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 802292e:	f996 3000 	ldrsb.w	r3, [r6]
 8022932:	e7df      	b.n	80228f4 <exp+0x94>
 8022934:	f3af 8000 	nop.w
 8022938:	fefa39ef 	.word	0xfefa39ef
 802293c:	40862e42 	.word	0x40862e42
 8022940:	d52d3051 	.word	0xd52d3051
 8022944:	c0874910 	.word	0xc0874910
 8022948:	20000b30 	.word	0x20000b30
 802294c:	080313e7 	.word	0x080313e7
 8022950:	47efffff 	.word	0x47efffff
 8022954:	7ff00000 	.word	0x7ff00000

08022958 <log>:
 8022958:	b570      	push	{r4, r5, r6, lr}
 802295a:	ed2d 8b02 	vpush	{d8}
 802295e:	b08a      	sub	sp, #40	; 0x28
 8022960:	ec55 4b10 	vmov	r4, r5, d0
 8022964:	f000 fc10 	bl	8023188 <__ieee754_log>
 8022968:	4b36      	ldr	r3, [pc, #216]	; (8022a44 <log+0xec>)
 802296a:	eeb0 8a40 	vmov.f32	s16, s0
 802296e:	eef0 8a60 	vmov.f32	s17, s1
 8022972:	f993 6000 	ldrsb.w	r6, [r3]
 8022976:	1c73      	adds	r3, r6, #1
 8022978:	d05b      	beq.n	8022a32 <log+0xda>
 802297a:	4622      	mov	r2, r4
 802297c:	462b      	mov	r3, r5
 802297e:	4620      	mov	r0, r4
 8022980:	4629      	mov	r1, r5
 8022982:	f7de f8df 	bl	8000b44 <__aeabi_dcmpun>
 8022986:	2800      	cmp	r0, #0
 8022988:	d153      	bne.n	8022a32 <log+0xda>
 802298a:	2200      	movs	r2, #0
 802298c:	2300      	movs	r3, #0
 802298e:	4620      	mov	r0, r4
 8022990:	4629      	mov	r1, r5
 8022992:	f7de f8cd 	bl	8000b30 <__aeabi_dcmpgt>
 8022996:	2800      	cmp	r0, #0
 8022998:	d14b      	bne.n	8022a32 <log+0xda>
 802299a:	4b2b      	ldr	r3, [pc, #172]	; (8022a48 <log+0xf0>)
 802299c:	9301      	str	r3, [sp, #4]
 802299e:	9008      	str	r0, [sp, #32]
 80229a0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80229a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80229a8:	b9a6      	cbnz	r6, 80229d4 <log+0x7c>
 80229aa:	4b28      	ldr	r3, [pc, #160]	; (8022a4c <log+0xf4>)
 80229ac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80229b0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80229b4:	4620      	mov	r0, r4
 80229b6:	2200      	movs	r2, #0
 80229b8:	2300      	movs	r3, #0
 80229ba:	4629      	mov	r1, r5
 80229bc:	f7de f890 	bl	8000ae0 <__aeabi_dcmpeq>
 80229c0:	bb40      	cbnz	r0, 8022a14 <log+0xbc>
 80229c2:	2301      	movs	r3, #1
 80229c4:	2e02      	cmp	r6, #2
 80229c6:	9300      	str	r3, [sp, #0]
 80229c8:	d119      	bne.n	80229fe <log+0xa6>
 80229ca:	f7ff f9a3 	bl	8021d14 <__errno>
 80229ce:	2321      	movs	r3, #33	; 0x21
 80229d0:	6003      	str	r3, [r0, #0]
 80229d2:	e019      	b.n	8022a08 <log+0xb0>
 80229d4:	4b1e      	ldr	r3, [pc, #120]	; (8022a50 <log+0xf8>)
 80229d6:	2200      	movs	r2, #0
 80229d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80229dc:	4620      	mov	r0, r4
 80229de:	2200      	movs	r2, #0
 80229e0:	2300      	movs	r3, #0
 80229e2:	4629      	mov	r1, r5
 80229e4:	f7de f87c 	bl	8000ae0 <__aeabi_dcmpeq>
 80229e8:	2800      	cmp	r0, #0
 80229ea:	d0ea      	beq.n	80229c2 <log+0x6a>
 80229ec:	2302      	movs	r3, #2
 80229ee:	429e      	cmp	r6, r3
 80229f0:	9300      	str	r3, [sp, #0]
 80229f2:	d111      	bne.n	8022a18 <log+0xc0>
 80229f4:	f7ff f98e 	bl	8021d14 <__errno>
 80229f8:	2322      	movs	r3, #34	; 0x22
 80229fa:	6003      	str	r3, [r0, #0]
 80229fc:	e011      	b.n	8022a22 <log+0xca>
 80229fe:	4668      	mov	r0, sp
 8022a00:	f001 fbb2 	bl	8024168 <matherr>
 8022a04:	2800      	cmp	r0, #0
 8022a06:	d0e0      	beq.n	80229ca <log+0x72>
 8022a08:	4812      	ldr	r0, [pc, #72]	; (8022a54 <log+0xfc>)
 8022a0a:	f001 fbb1 	bl	8024170 <nan>
 8022a0e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8022a12:	e006      	b.n	8022a22 <log+0xca>
 8022a14:	2302      	movs	r3, #2
 8022a16:	9300      	str	r3, [sp, #0]
 8022a18:	4668      	mov	r0, sp
 8022a1a:	f001 fba5 	bl	8024168 <matherr>
 8022a1e:	2800      	cmp	r0, #0
 8022a20:	d0e8      	beq.n	80229f4 <log+0x9c>
 8022a22:	9b08      	ldr	r3, [sp, #32]
 8022a24:	b11b      	cbz	r3, 8022a2e <log+0xd6>
 8022a26:	f7ff f975 	bl	8021d14 <__errno>
 8022a2a:	9b08      	ldr	r3, [sp, #32]
 8022a2c:	6003      	str	r3, [r0, #0]
 8022a2e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8022a32:	eeb0 0a48 	vmov.f32	s0, s16
 8022a36:	eef0 0a68 	vmov.f32	s1, s17
 8022a3a:	b00a      	add	sp, #40	; 0x28
 8022a3c:	ecbd 8b02 	vpop	{d8}
 8022a40:	bd70      	pop	{r4, r5, r6, pc}
 8022a42:	bf00      	nop
 8022a44:	20000b30 	.word	0x20000b30
 8022a48:	080313eb 	.word	0x080313eb
 8022a4c:	c7efffff 	.word	0xc7efffff
 8022a50:	fff00000 	.word	0xfff00000
 8022a54:	080312b1 	.word	0x080312b1

08022a58 <pow>:
 8022a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a5c:	ed2d 8b04 	vpush	{d8-d9}
 8022a60:	b08d      	sub	sp, #52	; 0x34
 8022a62:	ec57 6b10 	vmov	r6, r7, d0
 8022a66:	ec55 4b11 	vmov	r4, r5, d1
 8022a6a:	f000 fd65 	bl	8023538 <__ieee754_pow>
 8022a6e:	4bae      	ldr	r3, [pc, #696]	; (8022d28 <pow+0x2d0>)
 8022a70:	eeb0 8a40 	vmov.f32	s16, s0
 8022a74:	eef0 8a60 	vmov.f32	s17, s1
 8022a78:	f993 9000 	ldrsb.w	r9, [r3]
 8022a7c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8022a80:	4698      	mov	r8, r3
 8022a82:	d05f      	beq.n	8022b44 <pow+0xec>
 8022a84:	4622      	mov	r2, r4
 8022a86:	462b      	mov	r3, r5
 8022a88:	4620      	mov	r0, r4
 8022a8a:	4629      	mov	r1, r5
 8022a8c:	f7de f85a 	bl	8000b44 <__aeabi_dcmpun>
 8022a90:	4683      	mov	fp, r0
 8022a92:	2800      	cmp	r0, #0
 8022a94:	d156      	bne.n	8022b44 <pow+0xec>
 8022a96:	4632      	mov	r2, r6
 8022a98:	463b      	mov	r3, r7
 8022a9a:	4630      	mov	r0, r6
 8022a9c:	4639      	mov	r1, r7
 8022a9e:	f7de f851 	bl	8000b44 <__aeabi_dcmpun>
 8022aa2:	9001      	str	r0, [sp, #4]
 8022aa4:	b1e8      	cbz	r0, 8022ae2 <pow+0x8a>
 8022aa6:	2200      	movs	r2, #0
 8022aa8:	2300      	movs	r3, #0
 8022aaa:	4620      	mov	r0, r4
 8022aac:	4629      	mov	r1, r5
 8022aae:	f7de f817 	bl	8000ae0 <__aeabi_dcmpeq>
 8022ab2:	2800      	cmp	r0, #0
 8022ab4:	d046      	beq.n	8022b44 <pow+0xec>
 8022ab6:	2301      	movs	r3, #1
 8022ab8:	9302      	str	r3, [sp, #8]
 8022aba:	4b9c      	ldr	r3, [pc, #624]	; (8022d2c <pow+0x2d4>)
 8022abc:	9303      	str	r3, [sp, #12]
 8022abe:	4b9c      	ldr	r3, [pc, #624]	; (8022d30 <pow+0x2d8>)
 8022ac0:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8022ac4:	2200      	movs	r2, #0
 8022ac6:	f1b9 0f02 	cmp.w	r9, #2
 8022aca:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022ace:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022ad2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022ad6:	d033      	beq.n	8022b40 <pow+0xe8>
 8022ad8:	a802      	add	r0, sp, #8
 8022ada:	f001 fb45 	bl	8024168 <matherr>
 8022ade:	bb48      	cbnz	r0, 8022b34 <pow+0xdc>
 8022ae0:	e05e      	b.n	8022ba0 <pow+0x148>
 8022ae2:	f04f 0a00 	mov.w	sl, #0
 8022ae6:	f04f 0b00 	mov.w	fp, #0
 8022aea:	4652      	mov	r2, sl
 8022aec:	465b      	mov	r3, fp
 8022aee:	4630      	mov	r0, r6
 8022af0:	4639      	mov	r1, r7
 8022af2:	f7dd fff5 	bl	8000ae0 <__aeabi_dcmpeq>
 8022af6:	ec4b ab19 	vmov	d9, sl, fp
 8022afa:	2800      	cmp	r0, #0
 8022afc:	d055      	beq.n	8022baa <pow+0x152>
 8022afe:	4652      	mov	r2, sl
 8022b00:	465b      	mov	r3, fp
 8022b02:	4620      	mov	r0, r4
 8022b04:	4629      	mov	r1, r5
 8022b06:	f7dd ffeb 	bl	8000ae0 <__aeabi_dcmpeq>
 8022b0a:	4680      	mov	r8, r0
 8022b0c:	b318      	cbz	r0, 8022b56 <pow+0xfe>
 8022b0e:	2301      	movs	r3, #1
 8022b10:	9302      	str	r3, [sp, #8]
 8022b12:	4b86      	ldr	r3, [pc, #536]	; (8022d2c <pow+0x2d4>)
 8022b14:	9303      	str	r3, [sp, #12]
 8022b16:	9b01      	ldr	r3, [sp, #4]
 8022b18:	930a      	str	r3, [sp, #40]	; 0x28
 8022b1a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022b1e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022b22:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8022b26:	f1b9 0f00 	cmp.w	r9, #0
 8022b2a:	d0d5      	beq.n	8022ad8 <pow+0x80>
 8022b2c:	4b80      	ldr	r3, [pc, #512]	; (8022d30 <pow+0x2d8>)
 8022b2e:	2200      	movs	r2, #0
 8022b30:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022b34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b36:	b11b      	cbz	r3, 8022b40 <pow+0xe8>
 8022b38:	f7ff f8ec 	bl	8021d14 <__errno>
 8022b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b3e:	6003      	str	r3, [r0, #0]
 8022b40:	ed9d 8b08 	vldr	d8, [sp, #32]
 8022b44:	eeb0 0a48 	vmov.f32	s0, s16
 8022b48:	eef0 0a68 	vmov.f32	s1, s17
 8022b4c:	b00d      	add	sp, #52	; 0x34
 8022b4e:	ecbd 8b04 	vpop	{d8-d9}
 8022b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b56:	ec45 4b10 	vmov	d0, r4, r5
 8022b5a:	f001 fafd 	bl	8024158 <finite>
 8022b5e:	2800      	cmp	r0, #0
 8022b60:	d0f0      	beq.n	8022b44 <pow+0xec>
 8022b62:	4652      	mov	r2, sl
 8022b64:	465b      	mov	r3, fp
 8022b66:	4620      	mov	r0, r4
 8022b68:	4629      	mov	r1, r5
 8022b6a:	f7dd ffc3 	bl	8000af4 <__aeabi_dcmplt>
 8022b6e:	2800      	cmp	r0, #0
 8022b70:	d0e8      	beq.n	8022b44 <pow+0xec>
 8022b72:	2301      	movs	r3, #1
 8022b74:	9302      	str	r3, [sp, #8]
 8022b76:	4b6d      	ldr	r3, [pc, #436]	; (8022d2c <pow+0x2d4>)
 8022b78:	9303      	str	r3, [sp, #12]
 8022b7a:	4b6b      	ldr	r3, [pc, #428]	; (8022d28 <pow+0x2d0>)
 8022b7c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8022b80:	f993 3000 	ldrsb.w	r3, [r3]
 8022b84:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022b88:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022b8c:	b913      	cbnz	r3, 8022b94 <pow+0x13c>
 8022b8e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8022b92:	e7a1      	b.n	8022ad8 <pow+0x80>
 8022b94:	4967      	ldr	r1, [pc, #412]	; (8022d34 <pow+0x2dc>)
 8022b96:	2000      	movs	r0, #0
 8022b98:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022b9c:	2b02      	cmp	r3, #2
 8022b9e:	d19b      	bne.n	8022ad8 <pow+0x80>
 8022ba0:	f7ff f8b8 	bl	8021d14 <__errno>
 8022ba4:	2321      	movs	r3, #33	; 0x21
 8022ba6:	6003      	str	r3, [r0, #0]
 8022ba8:	e7c4      	b.n	8022b34 <pow+0xdc>
 8022baa:	eeb0 0a48 	vmov.f32	s0, s16
 8022bae:	eef0 0a68 	vmov.f32	s1, s17
 8022bb2:	f001 fad1 	bl	8024158 <finite>
 8022bb6:	9001      	str	r0, [sp, #4]
 8022bb8:	2800      	cmp	r0, #0
 8022bba:	f040 808a 	bne.w	8022cd2 <pow+0x27a>
 8022bbe:	ec47 6b10 	vmov	d0, r6, r7
 8022bc2:	f001 fac9 	bl	8024158 <finite>
 8022bc6:	2800      	cmp	r0, #0
 8022bc8:	f000 8083 	beq.w	8022cd2 <pow+0x27a>
 8022bcc:	ec45 4b10 	vmov	d0, r4, r5
 8022bd0:	f001 fac2 	bl	8024158 <finite>
 8022bd4:	2800      	cmp	r0, #0
 8022bd6:	d07c      	beq.n	8022cd2 <pow+0x27a>
 8022bd8:	ec53 2b18 	vmov	r2, r3, d8
 8022bdc:	ee18 0a10 	vmov	r0, s16
 8022be0:	4619      	mov	r1, r3
 8022be2:	f7dd ffaf 	bl	8000b44 <__aeabi_dcmpun>
 8022be6:	f998 9000 	ldrsb.w	r9, [r8]
 8022bea:	4b50      	ldr	r3, [pc, #320]	; (8022d2c <pow+0x2d4>)
 8022bec:	b1b0      	cbz	r0, 8022c1c <pow+0x1c4>
 8022bee:	2201      	movs	r2, #1
 8022bf0:	9303      	str	r3, [sp, #12]
 8022bf2:	9b01      	ldr	r3, [sp, #4]
 8022bf4:	9202      	str	r2, [sp, #8]
 8022bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8022bf8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022bfc:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022c00:	f1b9 0f00 	cmp.w	r9, #0
 8022c04:	d0c3      	beq.n	8022b8e <pow+0x136>
 8022c06:	4652      	mov	r2, sl
 8022c08:	465b      	mov	r3, fp
 8022c0a:	4650      	mov	r0, sl
 8022c0c:	4659      	mov	r1, fp
 8022c0e:	f7dd fe29 	bl	8000864 <__aeabi_ddiv>
 8022c12:	f1b9 0f02 	cmp.w	r9, #2
 8022c16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8022c1a:	e7c0      	b.n	8022b9e <pow+0x146>
 8022c1c:	2203      	movs	r2, #3
 8022c1e:	9202      	str	r2, [sp, #8]
 8022c20:	9303      	str	r3, [sp, #12]
 8022c22:	900a      	str	r0, [sp, #40]	; 0x28
 8022c24:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022c28:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022c2c:	f1b9 0f00 	cmp.w	r9, #0
 8022c30:	d12c      	bne.n	8022c8c <pow+0x234>
 8022c32:	4b41      	ldr	r3, [pc, #260]	; (8022d38 <pow+0x2e0>)
 8022c34:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8022c38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022c3c:	4630      	mov	r0, r6
 8022c3e:	4652      	mov	r2, sl
 8022c40:	465b      	mov	r3, fp
 8022c42:	4639      	mov	r1, r7
 8022c44:	f7dd ff56 	bl	8000af4 <__aeabi_dcmplt>
 8022c48:	2800      	cmp	r0, #0
 8022c4a:	d066      	beq.n	8022d1a <pow+0x2c2>
 8022c4c:	2200      	movs	r2, #0
 8022c4e:	4b3b      	ldr	r3, [pc, #236]	; (8022d3c <pow+0x2e4>)
 8022c50:	4620      	mov	r0, r4
 8022c52:	4629      	mov	r1, r5
 8022c54:	f7dd fcdc 	bl	8000610 <__aeabi_dmul>
 8022c58:	4604      	mov	r4, r0
 8022c5a:	460d      	mov	r5, r1
 8022c5c:	ec45 4b10 	vmov	d0, r4, r5
 8022c60:	f001 fa8e 	bl	8024180 <rint>
 8022c64:	4620      	mov	r0, r4
 8022c66:	ec53 2b10 	vmov	r2, r3, d0
 8022c6a:	4629      	mov	r1, r5
 8022c6c:	f7dd ff38 	bl	8000ae0 <__aeabi_dcmpeq>
 8022c70:	b920      	cbnz	r0, 8022c7c <pow+0x224>
 8022c72:	4b33      	ldr	r3, [pc, #204]	; (8022d40 <pow+0x2e8>)
 8022c74:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8022c78:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022c7c:	f998 3000 	ldrsb.w	r3, [r8]
 8022c80:	2b02      	cmp	r3, #2
 8022c82:	d14a      	bne.n	8022d1a <pow+0x2c2>
 8022c84:	f7ff f846 	bl	8021d14 <__errno>
 8022c88:	2322      	movs	r3, #34	; 0x22
 8022c8a:	e78c      	b.n	8022ba6 <pow+0x14e>
 8022c8c:	4b2d      	ldr	r3, [pc, #180]	; (8022d44 <pow+0x2ec>)
 8022c8e:	2200      	movs	r2, #0
 8022c90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8022c94:	4630      	mov	r0, r6
 8022c96:	4652      	mov	r2, sl
 8022c98:	465b      	mov	r3, fp
 8022c9a:	4639      	mov	r1, r7
 8022c9c:	f7dd ff2a 	bl	8000af4 <__aeabi_dcmplt>
 8022ca0:	2800      	cmp	r0, #0
 8022ca2:	d0eb      	beq.n	8022c7c <pow+0x224>
 8022ca4:	2200      	movs	r2, #0
 8022ca6:	4b25      	ldr	r3, [pc, #148]	; (8022d3c <pow+0x2e4>)
 8022ca8:	4620      	mov	r0, r4
 8022caa:	4629      	mov	r1, r5
 8022cac:	f7dd fcb0 	bl	8000610 <__aeabi_dmul>
 8022cb0:	4604      	mov	r4, r0
 8022cb2:	460d      	mov	r5, r1
 8022cb4:	ec45 4b10 	vmov	d0, r4, r5
 8022cb8:	f001 fa62 	bl	8024180 <rint>
 8022cbc:	4620      	mov	r0, r4
 8022cbe:	ec53 2b10 	vmov	r2, r3, d0
 8022cc2:	4629      	mov	r1, r5
 8022cc4:	f7dd ff0c 	bl	8000ae0 <__aeabi_dcmpeq>
 8022cc8:	2800      	cmp	r0, #0
 8022cca:	d1d7      	bne.n	8022c7c <pow+0x224>
 8022ccc:	2200      	movs	r2, #0
 8022cce:	4b19      	ldr	r3, [pc, #100]	; (8022d34 <pow+0x2dc>)
 8022cd0:	e7d2      	b.n	8022c78 <pow+0x220>
 8022cd2:	2200      	movs	r2, #0
 8022cd4:	2300      	movs	r3, #0
 8022cd6:	ec51 0b18 	vmov	r0, r1, d8
 8022cda:	f7dd ff01 	bl	8000ae0 <__aeabi_dcmpeq>
 8022cde:	2800      	cmp	r0, #0
 8022ce0:	f43f af30 	beq.w	8022b44 <pow+0xec>
 8022ce4:	ec47 6b10 	vmov	d0, r6, r7
 8022ce8:	f001 fa36 	bl	8024158 <finite>
 8022cec:	2800      	cmp	r0, #0
 8022cee:	f43f af29 	beq.w	8022b44 <pow+0xec>
 8022cf2:	ec45 4b10 	vmov	d0, r4, r5
 8022cf6:	f001 fa2f 	bl	8024158 <finite>
 8022cfa:	2800      	cmp	r0, #0
 8022cfc:	f43f af22 	beq.w	8022b44 <pow+0xec>
 8022d00:	2304      	movs	r3, #4
 8022d02:	9302      	str	r3, [sp, #8]
 8022d04:	4b09      	ldr	r3, [pc, #36]	; (8022d2c <pow+0x2d4>)
 8022d06:	9303      	str	r3, [sp, #12]
 8022d08:	2300      	movs	r3, #0
 8022d0a:	930a      	str	r3, [sp, #40]	; 0x28
 8022d0c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8022d10:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8022d14:	ed8d 9b08 	vstr	d9, [sp, #32]
 8022d18:	e7b0      	b.n	8022c7c <pow+0x224>
 8022d1a:	a802      	add	r0, sp, #8
 8022d1c:	f001 fa24 	bl	8024168 <matherr>
 8022d20:	2800      	cmp	r0, #0
 8022d22:	f47f af07 	bne.w	8022b34 <pow+0xdc>
 8022d26:	e7ad      	b.n	8022c84 <pow+0x22c>
 8022d28:	20000b30 	.word	0x20000b30
 8022d2c:	080313ef 	.word	0x080313ef
 8022d30:	3ff00000 	.word	0x3ff00000
 8022d34:	fff00000 	.word	0xfff00000
 8022d38:	47efffff 	.word	0x47efffff
 8022d3c:	3fe00000 	.word	0x3fe00000
 8022d40:	c7efffff 	.word	0xc7efffff
 8022d44:	7ff00000 	.word	0x7ff00000

08022d48 <sqrt>:
 8022d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022d4c:	ed2d 8b02 	vpush	{d8}
 8022d50:	b08b      	sub	sp, #44	; 0x2c
 8022d52:	ec55 4b10 	vmov	r4, r5, d0
 8022d56:	f001 f901 	bl	8023f5c <__ieee754_sqrt>
 8022d5a:	4b26      	ldr	r3, [pc, #152]	; (8022df4 <sqrt+0xac>)
 8022d5c:	eeb0 8a40 	vmov.f32	s16, s0
 8022d60:	eef0 8a60 	vmov.f32	s17, s1
 8022d64:	f993 6000 	ldrsb.w	r6, [r3]
 8022d68:	1c73      	adds	r3, r6, #1
 8022d6a:	d02a      	beq.n	8022dc2 <sqrt+0x7a>
 8022d6c:	4622      	mov	r2, r4
 8022d6e:	462b      	mov	r3, r5
 8022d70:	4620      	mov	r0, r4
 8022d72:	4629      	mov	r1, r5
 8022d74:	f7dd fee6 	bl	8000b44 <__aeabi_dcmpun>
 8022d78:	4607      	mov	r7, r0
 8022d7a:	bb10      	cbnz	r0, 8022dc2 <sqrt+0x7a>
 8022d7c:	f04f 0800 	mov.w	r8, #0
 8022d80:	f04f 0900 	mov.w	r9, #0
 8022d84:	4642      	mov	r2, r8
 8022d86:	464b      	mov	r3, r9
 8022d88:	4620      	mov	r0, r4
 8022d8a:	4629      	mov	r1, r5
 8022d8c:	f7dd feb2 	bl	8000af4 <__aeabi_dcmplt>
 8022d90:	b1b8      	cbz	r0, 8022dc2 <sqrt+0x7a>
 8022d92:	2301      	movs	r3, #1
 8022d94:	9300      	str	r3, [sp, #0]
 8022d96:	4b18      	ldr	r3, [pc, #96]	; (8022df8 <sqrt+0xb0>)
 8022d98:	9301      	str	r3, [sp, #4]
 8022d9a:	9708      	str	r7, [sp, #32]
 8022d9c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8022da0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8022da4:	b9b6      	cbnz	r6, 8022dd4 <sqrt+0x8c>
 8022da6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8022daa:	4668      	mov	r0, sp
 8022dac:	f001 f9dc 	bl	8024168 <matherr>
 8022db0:	b1d0      	cbz	r0, 8022de8 <sqrt+0xa0>
 8022db2:	9b08      	ldr	r3, [sp, #32]
 8022db4:	b11b      	cbz	r3, 8022dbe <sqrt+0x76>
 8022db6:	f7fe ffad 	bl	8021d14 <__errno>
 8022dba:	9b08      	ldr	r3, [sp, #32]
 8022dbc:	6003      	str	r3, [r0, #0]
 8022dbe:	ed9d 8b06 	vldr	d8, [sp, #24]
 8022dc2:	eeb0 0a48 	vmov.f32	s0, s16
 8022dc6:	eef0 0a68 	vmov.f32	s1, s17
 8022dca:	b00b      	add	sp, #44	; 0x2c
 8022dcc:	ecbd 8b02 	vpop	{d8}
 8022dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022dd4:	4642      	mov	r2, r8
 8022dd6:	464b      	mov	r3, r9
 8022dd8:	4640      	mov	r0, r8
 8022dda:	4649      	mov	r1, r9
 8022ddc:	f7dd fd42 	bl	8000864 <__aeabi_ddiv>
 8022de0:	2e02      	cmp	r6, #2
 8022de2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022de6:	d1e0      	bne.n	8022daa <sqrt+0x62>
 8022de8:	f7fe ff94 	bl	8021d14 <__errno>
 8022dec:	2321      	movs	r3, #33	; 0x21
 8022dee:	6003      	str	r3, [r0, #0]
 8022df0:	e7df      	b.n	8022db2 <sqrt+0x6a>
 8022df2:	bf00      	nop
 8022df4:	20000b30 	.word	0x20000b30
 8022df8:	080313f3 	.word	0x080313f3

08022dfc <sqrtf>:
 8022dfc:	b510      	push	{r4, lr}
 8022dfe:	ed2d 8b02 	vpush	{d8}
 8022e02:	b08a      	sub	sp, #40	; 0x28
 8022e04:	eeb0 8a40 	vmov.f32	s16, s0
 8022e08:	f001 f958 	bl	80240bc <__ieee754_sqrtf>
 8022e0c:	4b21      	ldr	r3, [pc, #132]	; (8022e94 <sqrtf+0x98>)
 8022e0e:	f993 4000 	ldrsb.w	r4, [r3]
 8022e12:	1c63      	adds	r3, r4, #1
 8022e14:	d02c      	beq.n	8022e70 <sqrtf+0x74>
 8022e16:	eeb4 8a48 	vcmp.f32	s16, s16
 8022e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e1e:	d627      	bvs.n	8022e70 <sqrtf+0x74>
 8022e20:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8022e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022e28:	d522      	bpl.n	8022e70 <sqrtf+0x74>
 8022e2a:	2301      	movs	r3, #1
 8022e2c:	9300      	str	r3, [sp, #0]
 8022e2e:	4b1a      	ldr	r3, [pc, #104]	; (8022e98 <sqrtf+0x9c>)
 8022e30:	9301      	str	r3, [sp, #4]
 8022e32:	ee18 0a10 	vmov	r0, s16
 8022e36:	2300      	movs	r3, #0
 8022e38:	9308      	str	r3, [sp, #32]
 8022e3a:	f7dd fb95 	bl	8000568 <__aeabi_f2d>
 8022e3e:	2200      	movs	r2, #0
 8022e40:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8022e48:	2300      	movs	r3, #0
 8022e4a:	b9ac      	cbnz	r4, 8022e78 <sqrtf+0x7c>
 8022e4c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8022e50:	4668      	mov	r0, sp
 8022e52:	f001 f989 	bl	8024168 <matherr>
 8022e56:	b1b8      	cbz	r0, 8022e88 <sqrtf+0x8c>
 8022e58:	9b08      	ldr	r3, [sp, #32]
 8022e5a:	b11b      	cbz	r3, 8022e64 <sqrtf+0x68>
 8022e5c:	f7fe ff5a 	bl	8021d14 <__errno>
 8022e60:	9b08      	ldr	r3, [sp, #32]
 8022e62:	6003      	str	r3, [r0, #0]
 8022e64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8022e68:	f7dd feca 	bl	8000c00 <__aeabi_d2f>
 8022e6c:	ee00 0a10 	vmov	s0, r0
 8022e70:	b00a      	add	sp, #40	; 0x28
 8022e72:	ecbd 8b02 	vpop	{d8}
 8022e76:	bd10      	pop	{r4, pc}
 8022e78:	4610      	mov	r0, r2
 8022e7a:	4619      	mov	r1, r3
 8022e7c:	f7dd fcf2 	bl	8000864 <__aeabi_ddiv>
 8022e80:	2c02      	cmp	r4, #2
 8022e82:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8022e86:	d1e3      	bne.n	8022e50 <sqrtf+0x54>
 8022e88:	f7fe ff44 	bl	8021d14 <__errno>
 8022e8c:	2321      	movs	r3, #33	; 0x21
 8022e8e:	6003      	str	r3, [r0, #0]
 8022e90:	e7e2      	b.n	8022e58 <sqrtf+0x5c>
 8022e92:	bf00      	nop
 8022e94:	20000b30 	.word	0x20000b30
 8022e98:	080313f8 	.word	0x080313f8
 8022e9c:	00000000 	.word	0x00000000

08022ea0 <__ieee754_exp>:
 8022ea0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022ea4:	ec55 4b10 	vmov	r4, r5, d0
 8022ea8:	4aad      	ldr	r2, [pc, #692]	; (8023160 <__ieee754_exp+0x2c0>)
 8022eaa:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8022eae:	4297      	cmp	r7, r2
 8022eb0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8022eb4:	f240 80af 	bls.w	8023016 <__ieee754_exp+0x176>
 8022eb8:	4aaa      	ldr	r2, [pc, #680]	; (8023164 <__ieee754_exp+0x2c4>)
 8022eba:	4297      	cmp	r7, r2
 8022ebc:	d915      	bls.n	8022eea <__ieee754_exp+0x4a>
 8022ebe:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8022ec2:	4323      	orrs	r3, r4
 8022ec4:	d009      	beq.n	8022eda <__ieee754_exp+0x3a>
 8022ec6:	ee10 2a10 	vmov	r2, s0
 8022eca:	462b      	mov	r3, r5
 8022ecc:	4620      	mov	r0, r4
 8022ece:	4629      	mov	r1, r5
 8022ed0:	f7dd f9ec 	bl	80002ac <__adddf3>
 8022ed4:	4604      	mov	r4, r0
 8022ed6:	460d      	mov	r5, r1
 8022ed8:	e002      	b.n	8022ee0 <__ieee754_exp+0x40>
 8022eda:	b10e      	cbz	r6, 8022ee0 <__ieee754_exp+0x40>
 8022edc:	2400      	movs	r4, #0
 8022ede:	2500      	movs	r5, #0
 8022ee0:	ec45 4b10 	vmov	d0, r4, r5
 8022ee4:	b003      	add	sp, #12
 8022ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022eea:	a387      	add	r3, pc, #540	; (adr r3, 8023108 <__ieee754_exp+0x268>)
 8022eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ef0:	ee10 0a10 	vmov	r0, s0
 8022ef4:	4629      	mov	r1, r5
 8022ef6:	f7dd fe1b 	bl	8000b30 <__aeabi_dcmpgt>
 8022efa:	b138      	cbz	r0, 8022f0c <__ieee754_exp+0x6c>
 8022efc:	a384      	add	r3, pc, #528	; (adr r3, 8023110 <__ieee754_exp+0x270>)
 8022efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f02:	4610      	mov	r0, r2
 8022f04:	4619      	mov	r1, r3
 8022f06:	f7dd fb83 	bl	8000610 <__aeabi_dmul>
 8022f0a:	e7e3      	b.n	8022ed4 <__ieee754_exp+0x34>
 8022f0c:	a382      	add	r3, pc, #520	; (adr r3, 8023118 <__ieee754_exp+0x278>)
 8022f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f12:	4620      	mov	r0, r4
 8022f14:	4629      	mov	r1, r5
 8022f16:	f7dd fded 	bl	8000af4 <__aeabi_dcmplt>
 8022f1a:	2800      	cmp	r0, #0
 8022f1c:	d1de      	bne.n	8022edc <__ieee754_exp+0x3c>
 8022f1e:	4b92      	ldr	r3, [pc, #584]	; (8023168 <__ieee754_exp+0x2c8>)
 8022f20:	429f      	cmp	r7, r3
 8022f22:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 8022f26:	f200 808e 	bhi.w	8023046 <__ieee754_exp+0x1a6>
 8022f2a:	4b90      	ldr	r3, [pc, #576]	; (802316c <__ieee754_exp+0x2cc>)
 8022f2c:	443b      	add	r3, r7
 8022f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f32:	4620      	mov	r0, r4
 8022f34:	4629      	mov	r1, r5
 8022f36:	f7dd f9b7 	bl	80002a8 <__aeabi_dsub>
 8022f3a:	4b8d      	ldr	r3, [pc, #564]	; (8023170 <__ieee754_exp+0x2d0>)
 8022f3c:	441f      	add	r7, r3
 8022f3e:	ed97 7b00 	vldr	d7, [r7]
 8022f42:	ed8d 7b00 	vstr	d7, [sp]
 8022f46:	4682      	mov	sl, r0
 8022f48:	f1c6 0001 	rsb	r0, r6, #1
 8022f4c:	468b      	mov	fp, r1
 8022f4e:	1b86      	subs	r6, r0, r6
 8022f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8022f54:	4650      	mov	r0, sl
 8022f56:	4659      	mov	r1, fp
 8022f58:	f7dd f9a6 	bl	80002a8 <__aeabi_dsub>
 8022f5c:	4604      	mov	r4, r0
 8022f5e:	460d      	mov	r5, r1
 8022f60:	4622      	mov	r2, r4
 8022f62:	462b      	mov	r3, r5
 8022f64:	4620      	mov	r0, r4
 8022f66:	4629      	mov	r1, r5
 8022f68:	f7dd fb52 	bl	8000610 <__aeabi_dmul>
 8022f6c:	a36c      	add	r3, pc, #432	; (adr r3, 8023120 <__ieee754_exp+0x280>)
 8022f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f72:	4680      	mov	r8, r0
 8022f74:	4689      	mov	r9, r1
 8022f76:	f7dd fb4b 	bl	8000610 <__aeabi_dmul>
 8022f7a:	a36b      	add	r3, pc, #428	; (adr r3, 8023128 <__ieee754_exp+0x288>)
 8022f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f80:	f7dd f992 	bl	80002a8 <__aeabi_dsub>
 8022f84:	4642      	mov	r2, r8
 8022f86:	464b      	mov	r3, r9
 8022f88:	f7dd fb42 	bl	8000610 <__aeabi_dmul>
 8022f8c:	a368      	add	r3, pc, #416	; (adr r3, 8023130 <__ieee754_exp+0x290>)
 8022f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f92:	f7dd f98b 	bl	80002ac <__adddf3>
 8022f96:	4642      	mov	r2, r8
 8022f98:	464b      	mov	r3, r9
 8022f9a:	f7dd fb39 	bl	8000610 <__aeabi_dmul>
 8022f9e:	a366      	add	r3, pc, #408	; (adr r3, 8023138 <__ieee754_exp+0x298>)
 8022fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fa4:	f7dd f980 	bl	80002a8 <__aeabi_dsub>
 8022fa8:	4642      	mov	r2, r8
 8022faa:	464b      	mov	r3, r9
 8022fac:	f7dd fb30 	bl	8000610 <__aeabi_dmul>
 8022fb0:	a363      	add	r3, pc, #396	; (adr r3, 8023140 <__ieee754_exp+0x2a0>)
 8022fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fb6:	f7dd f979 	bl	80002ac <__adddf3>
 8022fba:	4642      	mov	r2, r8
 8022fbc:	464b      	mov	r3, r9
 8022fbe:	f7dd fb27 	bl	8000610 <__aeabi_dmul>
 8022fc2:	4602      	mov	r2, r0
 8022fc4:	460b      	mov	r3, r1
 8022fc6:	4620      	mov	r0, r4
 8022fc8:	4629      	mov	r1, r5
 8022fca:	f7dd f96d 	bl	80002a8 <__aeabi_dsub>
 8022fce:	4680      	mov	r8, r0
 8022fd0:	4689      	mov	r9, r1
 8022fd2:	4602      	mov	r2, r0
 8022fd4:	460b      	mov	r3, r1
 8022fd6:	4620      	mov	r0, r4
 8022fd8:	4629      	mov	r1, r5
 8022fda:	2e00      	cmp	r6, #0
 8022fdc:	d162      	bne.n	80230a4 <__ieee754_exp+0x204>
 8022fde:	f7dd fb17 	bl	8000610 <__aeabi_dmul>
 8022fe2:	2200      	movs	r2, #0
 8022fe4:	4606      	mov	r6, r0
 8022fe6:	460f      	mov	r7, r1
 8022fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8022fec:	4640      	mov	r0, r8
 8022fee:	4649      	mov	r1, r9
 8022ff0:	f7dd f95a 	bl	80002a8 <__aeabi_dsub>
 8022ff4:	4602      	mov	r2, r0
 8022ff6:	460b      	mov	r3, r1
 8022ff8:	4630      	mov	r0, r6
 8022ffa:	4639      	mov	r1, r7
 8022ffc:	f7dd fc32 	bl	8000864 <__aeabi_ddiv>
 8023000:	4622      	mov	r2, r4
 8023002:	462b      	mov	r3, r5
 8023004:	f7dd f950 	bl	80002a8 <__aeabi_dsub>
 8023008:	4602      	mov	r2, r0
 802300a:	460b      	mov	r3, r1
 802300c:	2000      	movs	r0, #0
 802300e:	4959      	ldr	r1, [pc, #356]	; (8023174 <__ieee754_exp+0x2d4>)
 8023010:	f7dd f94a 	bl	80002a8 <__aeabi_dsub>
 8023014:	e75e      	b.n	8022ed4 <__ieee754_exp+0x34>
 8023016:	4b58      	ldr	r3, [pc, #352]	; (8023178 <__ieee754_exp+0x2d8>)
 8023018:	429f      	cmp	r7, r3
 802301a:	d880      	bhi.n	8022f1e <__ieee754_exp+0x7e>
 802301c:	4b57      	ldr	r3, [pc, #348]	; (802317c <__ieee754_exp+0x2dc>)
 802301e:	429f      	cmp	r7, r3
 8023020:	d83c      	bhi.n	802309c <__ieee754_exp+0x1fc>
 8023022:	a33b      	add	r3, pc, #236	; (adr r3, 8023110 <__ieee754_exp+0x270>)
 8023024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023028:	ee10 0a10 	vmov	r0, s0
 802302c:	4629      	mov	r1, r5
 802302e:	f7dd f93d 	bl	80002ac <__adddf3>
 8023032:	2200      	movs	r2, #0
 8023034:	4b4f      	ldr	r3, [pc, #316]	; (8023174 <__ieee754_exp+0x2d4>)
 8023036:	f7dd fd7b 	bl	8000b30 <__aeabi_dcmpgt>
 802303a:	b388      	cbz	r0, 80230a0 <__ieee754_exp+0x200>
 802303c:	2200      	movs	r2, #0
 802303e:	4b4d      	ldr	r3, [pc, #308]	; (8023174 <__ieee754_exp+0x2d4>)
 8023040:	4620      	mov	r0, r4
 8023042:	4629      	mov	r1, r5
 8023044:	e744      	b.n	8022ed0 <__ieee754_exp+0x30>
 8023046:	4e4e      	ldr	r6, [pc, #312]	; (8023180 <__ieee754_exp+0x2e0>)
 8023048:	a33f      	add	r3, pc, #252	; (adr r3, 8023148 <__ieee754_exp+0x2a8>)
 802304a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802304e:	443e      	add	r6, r7
 8023050:	4620      	mov	r0, r4
 8023052:	4629      	mov	r1, r5
 8023054:	f7dd fadc 	bl	8000610 <__aeabi_dmul>
 8023058:	e9d6 2300 	ldrd	r2, r3, [r6]
 802305c:	f7dd f926 	bl	80002ac <__adddf3>
 8023060:	f7dd fd86 	bl	8000b70 <__aeabi_d2iz>
 8023064:	4606      	mov	r6, r0
 8023066:	f7dd fa6d 	bl	8000544 <__aeabi_i2d>
 802306a:	a339      	add	r3, pc, #228	; (adr r3, 8023150 <__ieee754_exp+0x2b0>)
 802306c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023070:	4680      	mov	r8, r0
 8023072:	4689      	mov	r9, r1
 8023074:	f7dd facc 	bl	8000610 <__aeabi_dmul>
 8023078:	4602      	mov	r2, r0
 802307a:	460b      	mov	r3, r1
 802307c:	4620      	mov	r0, r4
 802307e:	4629      	mov	r1, r5
 8023080:	f7dd f912 	bl	80002a8 <__aeabi_dsub>
 8023084:	a334      	add	r3, pc, #208	; (adr r3, 8023158 <__ieee754_exp+0x2b8>)
 8023086:	e9d3 2300 	ldrd	r2, r3, [r3]
 802308a:	4682      	mov	sl, r0
 802308c:	468b      	mov	fp, r1
 802308e:	4640      	mov	r0, r8
 8023090:	4649      	mov	r1, r9
 8023092:	f7dd fabd 	bl	8000610 <__aeabi_dmul>
 8023096:	e9cd 0100 	strd	r0, r1, [sp]
 802309a:	e759      	b.n	8022f50 <__ieee754_exp+0xb0>
 802309c:	2600      	movs	r6, #0
 802309e:	e75f      	b.n	8022f60 <__ieee754_exp+0xc0>
 80230a0:	4606      	mov	r6, r0
 80230a2:	e75d      	b.n	8022f60 <__ieee754_exp+0xc0>
 80230a4:	f7dd fab4 	bl	8000610 <__aeabi_dmul>
 80230a8:	4642      	mov	r2, r8
 80230aa:	4604      	mov	r4, r0
 80230ac:	460d      	mov	r5, r1
 80230ae:	464b      	mov	r3, r9
 80230b0:	2000      	movs	r0, #0
 80230b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80230b6:	f7dd f8f7 	bl	80002a8 <__aeabi_dsub>
 80230ba:	4602      	mov	r2, r0
 80230bc:	460b      	mov	r3, r1
 80230be:	4620      	mov	r0, r4
 80230c0:	4629      	mov	r1, r5
 80230c2:	f7dd fbcf 	bl	8000864 <__aeabi_ddiv>
 80230c6:	4602      	mov	r2, r0
 80230c8:	460b      	mov	r3, r1
 80230ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80230ce:	f7dd f8eb 	bl	80002a8 <__aeabi_dsub>
 80230d2:	4652      	mov	r2, sl
 80230d4:	465b      	mov	r3, fp
 80230d6:	f7dd f8e7 	bl	80002a8 <__aeabi_dsub>
 80230da:	460b      	mov	r3, r1
 80230dc:	4602      	mov	r2, r0
 80230de:	4925      	ldr	r1, [pc, #148]	; (8023174 <__ieee754_exp+0x2d4>)
 80230e0:	2000      	movs	r0, #0
 80230e2:	f7dd f8e1 	bl	80002a8 <__aeabi_dsub>
 80230e6:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 80230ea:	429e      	cmp	r6, r3
 80230ec:	db02      	blt.n	80230f4 <__ieee754_exp+0x254>
 80230ee:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 80230f2:	e6ef      	b.n	8022ed4 <__ieee754_exp+0x34>
 80230f4:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 80230f8:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 80230fc:	2200      	movs	r2, #0
 80230fe:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8023102:	e700      	b.n	8022f06 <__ieee754_exp+0x66>
 8023104:	f3af 8000 	nop.w
 8023108:	fefa39ef 	.word	0xfefa39ef
 802310c:	40862e42 	.word	0x40862e42
 8023110:	8800759c 	.word	0x8800759c
 8023114:	7e37e43c 	.word	0x7e37e43c
 8023118:	d52d3051 	.word	0xd52d3051
 802311c:	c0874910 	.word	0xc0874910
 8023120:	72bea4d0 	.word	0x72bea4d0
 8023124:	3e663769 	.word	0x3e663769
 8023128:	c5d26bf1 	.word	0xc5d26bf1
 802312c:	3ebbbd41 	.word	0x3ebbbd41
 8023130:	af25de2c 	.word	0xaf25de2c
 8023134:	3f11566a 	.word	0x3f11566a
 8023138:	16bebd93 	.word	0x16bebd93
 802313c:	3f66c16c 	.word	0x3f66c16c
 8023140:	5555553e 	.word	0x5555553e
 8023144:	3fc55555 	.word	0x3fc55555
 8023148:	652b82fe 	.word	0x652b82fe
 802314c:	3ff71547 	.word	0x3ff71547
 8023150:	fee00000 	.word	0xfee00000
 8023154:	3fe62e42 	.word	0x3fe62e42
 8023158:	35793c76 	.word	0x35793c76
 802315c:	3dea39ef 	.word	0x3dea39ef
 8023160:	40862e41 	.word	0x40862e41
 8023164:	7fefffff 	.word	0x7fefffff
 8023168:	3ff0a2b1 	.word	0x3ff0a2b1
 802316c:	08031410 	.word	0x08031410
 8023170:	08031420 	.word	0x08031420
 8023174:	3ff00000 	.word	0x3ff00000
 8023178:	3fd62e42 	.word	0x3fd62e42
 802317c:	3e2fffff 	.word	0x3e2fffff
 8023180:	08031400 	.word	0x08031400
 8023184:	00000000 	.word	0x00000000

08023188 <__ieee754_log>:
 8023188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802318c:	ec51 0b10 	vmov	r0, r1, d0
 8023190:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8023194:	b087      	sub	sp, #28
 8023196:	ee10 3a10 	vmov	r3, s0
 802319a:	460d      	mov	r5, r1
 802319c:	da27      	bge.n	80231ee <__ieee754_log+0x66>
 802319e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80231a2:	4313      	orrs	r3, r2
 80231a4:	d10a      	bne.n	80231bc <__ieee754_log+0x34>
 80231a6:	49cc      	ldr	r1, [pc, #816]	; (80234d8 <__ieee754_log+0x350>)
 80231a8:	2200      	movs	r2, #0
 80231aa:	2300      	movs	r3, #0
 80231ac:	2000      	movs	r0, #0
 80231ae:	f7dd fb59 	bl	8000864 <__aeabi_ddiv>
 80231b2:	ec41 0b10 	vmov	d0, r0, r1
 80231b6:	b007      	add	sp, #28
 80231b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80231bc:	2900      	cmp	r1, #0
 80231be:	da07      	bge.n	80231d0 <__ieee754_log+0x48>
 80231c0:	ee10 2a10 	vmov	r2, s0
 80231c4:	460b      	mov	r3, r1
 80231c6:	f7dd f86f 	bl	80002a8 <__aeabi_dsub>
 80231ca:	2200      	movs	r2, #0
 80231cc:	2300      	movs	r3, #0
 80231ce:	e7ee      	b.n	80231ae <__ieee754_log+0x26>
 80231d0:	4bc2      	ldr	r3, [pc, #776]	; (80234dc <__ieee754_log+0x354>)
 80231d2:	2200      	movs	r2, #0
 80231d4:	f7dd fa1c 	bl	8000610 <__aeabi_dmul>
 80231d8:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80231dc:	460d      	mov	r5, r1
 80231de:	4ac0      	ldr	r2, [pc, #768]	; (80234e0 <__ieee754_log+0x358>)
 80231e0:	4295      	cmp	r5, r2
 80231e2:	dd06      	ble.n	80231f2 <__ieee754_log+0x6a>
 80231e4:	4602      	mov	r2, r0
 80231e6:	460b      	mov	r3, r1
 80231e8:	f7dd f860 	bl	80002ac <__adddf3>
 80231ec:	e7e1      	b.n	80231b2 <__ieee754_log+0x2a>
 80231ee:	2300      	movs	r3, #0
 80231f0:	e7f5      	b.n	80231de <__ieee754_log+0x56>
 80231f2:	152c      	asrs	r4, r5, #20
 80231f4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80231f8:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80231fc:	441c      	add	r4, r3
 80231fe:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8023202:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8023206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 802320a:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 802320e:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8023212:	ea42 0105 	orr.w	r1, r2, r5
 8023216:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 802321a:	2200      	movs	r2, #0
 802321c:	4bb1      	ldr	r3, [pc, #708]	; (80234e4 <__ieee754_log+0x35c>)
 802321e:	f7dd f843 	bl	80002a8 <__aeabi_dsub>
 8023222:	1cab      	adds	r3, r5, #2
 8023224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8023228:	2b02      	cmp	r3, #2
 802322a:	4682      	mov	sl, r0
 802322c:	468b      	mov	fp, r1
 802322e:	f04f 0200 	mov.w	r2, #0
 8023232:	dc5b      	bgt.n	80232ec <__ieee754_log+0x164>
 8023234:	2300      	movs	r3, #0
 8023236:	f7dd fc53 	bl	8000ae0 <__aeabi_dcmpeq>
 802323a:	b1d0      	cbz	r0, 8023272 <__ieee754_log+0xea>
 802323c:	2c00      	cmp	r4, #0
 802323e:	f000 8170 	beq.w	8023522 <__ieee754_log+0x39a>
 8023242:	4620      	mov	r0, r4
 8023244:	f7dd f97e 	bl	8000544 <__aeabi_i2d>
 8023248:	a38f      	add	r3, pc, #572	; (adr r3, 8023488 <__ieee754_log+0x300>)
 802324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802324e:	4606      	mov	r6, r0
 8023250:	460f      	mov	r7, r1
 8023252:	f7dd f9dd 	bl	8000610 <__aeabi_dmul>
 8023256:	a38e      	add	r3, pc, #568	; (adr r3, 8023490 <__ieee754_log+0x308>)
 8023258:	e9d3 2300 	ldrd	r2, r3, [r3]
 802325c:	4604      	mov	r4, r0
 802325e:	460d      	mov	r5, r1
 8023260:	4630      	mov	r0, r6
 8023262:	4639      	mov	r1, r7
 8023264:	f7dd f9d4 	bl	8000610 <__aeabi_dmul>
 8023268:	4602      	mov	r2, r0
 802326a:	460b      	mov	r3, r1
 802326c:	4620      	mov	r0, r4
 802326e:	4629      	mov	r1, r5
 8023270:	e7ba      	b.n	80231e8 <__ieee754_log+0x60>
 8023272:	a389      	add	r3, pc, #548	; (adr r3, 8023498 <__ieee754_log+0x310>)
 8023274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023278:	4650      	mov	r0, sl
 802327a:	4659      	mov	r1, fp
 802327c:	f7dd f9c8 	bl	8000610 <__aeabi_dmul>
 8023280:	4602      	mov	r2, r0
 8023282:	460b      	mov	r3, r1
 8023284:	2000      	movs	r0, #0
 8023286:	4998      	ldr	r1, [pc, #608]	; (80234e8 <__ieee754_log+0x360>)
 8023288:	f7dd f80e 	bl	80002a8 <__aeabi_dsub>
 802328c:	4652      	mov	r2, sl
 802328e:	4606      	mov	r6, r0
 8023290:	460f      	mov	r7, r1
 8023292:	465b      	mov	r3, fp
 8023294:	4650      	mov	r0, sl
 8023296:	4659      	mov	r1, fp
 8023298:	f7dd f9ba 	bl	8000610 <__aeabi_dmul>
 802329c:	4602      	mov	r2, r0
 802329e:	460b      	mov	r3, r1
 80232a0:	4630      	mov	r0, r6
 80232a2:	4639      	mov	r1, r7
 80232a4:	f7dd f9b4 	bl	8000610 <__aeabi_dmul>
 80232a8:	4606      	mov	r6, r0
 80232aa:	460f      	mov	r7, r1
 80232ac:	b934      	cbnz	r4, 80232bc <__ieee754_log+0x134>
 80232ae:	4602      	mov	r2, r0
 80232b0:	460b      	mov	r3, r1
 80232b2:	4650      	mov	r0, sl
 80232b4:	4659      	mov	r1, fp
 80232b6:	f7dc fff7 	bl	80002a8 <__aeabi_dsub>
 80232ba:	e77a      	b.n	80231b2 <__ieee754_log+0x2a>
 80232bc:	4620      	mov	r0, r4
 80232be:	f7dd f941 	bl	8000544 <__aeabi_i2d>
 80232c2:	a371      	add	r3, pc, #452	; (adr r3, 8023488 <__ieee754_log+0x300>)
 80232c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232c8:	4680      	mov	r8, r0
 80232ca:	4689      	mov	r9, r1
 80232cc:	f7dd f9a0 	bl	8000610 <__aeabi_dmul>
 80232d0:	a36f      	add	r3, pc, #444	; (adr r3, 8023490 <__ieee754_log+0x308>)
 80232d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232d6:	4604      	mov	r4, r0
 80232d8:	460d      	mov	r5, r1
 80232da:	4640      	mov	r0, r8
 80232dc:	4649      	mov	r1, r9
 80232de:	f7dd f997 	bl	8000610 <__aeabi_dmul>
 80232e2:	4602      	mov	r2, r0
 80232e4:	460b      	mov	r3, r1
 80232e6:	4630      	mov	r0, r6
 80232e8:	4639      	mov	r1, r7
 80232ea:	e0b2      	b.n	8023452 <__ieee754_log+0x2ca>
 80232ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80232f0:	f7dc ffdc 	bl	80002ac <__adddf3>
 80232f4:	4602      	mov	r2, r0
 80232f6:	460b      	mov	r3, r1
 80232f8:	4650      	mov	r0, sl
 80232fa:	4659      	mov	r1, fp
 80232fc:	f7dd fab2 	bl	8000864 <__aeabi_ddiv>
 8023300:	e9cd 0100 	strd	r0, r1, [sp]
 8023304:	4620      	mov	r0, r4
 8023306:	f7dd f91d 	bl	8000544 <__aeabi_i2d>
 802330a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802330e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023312:	4610      	mov	r0, r2
 8023314:	4619      	mov	r1, r3
 8023316:	f7dd f97b 	bl	8000610 <__aeabi_dmul>
 802331a:	4602      	mov	r2, r0
 802331c:	460b      	mov	r3, r1
 802331e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023322:	f7dd f975 	bl	8000610 <__aeabi_dmul>
 8023326:	a35e      	add	r3, pc, #376	; (adr r3, 80234a0 <__ieee754_log+0x318>)
 8023328:	e9d3 2300 	ldrd	r2, r3, [r3]
 802332c:	4606      	mov	r6, r0
 802332e:	460f      	mov	r7, r1
 8023330:	f7dd f96e 	bl	8000610 <__aeabi_dmul>
 8023334:	a35c      	add	r3, pc, #368	; (adr r3, 80234a8 <__ieee754_log+0x320>)
 8023336:	e9d3 2300 	ldrd	r2, r3, [r3]
 802333a:	f7dc ffb7 	bl	80002ac <__adddf3>
 802333e:	4632      	mov	r2, r6
 8023340:	463b      	mov	r3, r7
 8023342:	f7dd f965 	bl	8000610 <__aeabi_dmul>
 8023346:	a35a      	add	r3, pc, #360	; (adr r3, 80234b0 <__ieee754_log+0x328>)
 8023348:	e9d3 2300 	ldrd	r2, r3, [r3]
 802334c:	f7dc ffae 	bl	80002ac <__adddf3>
 8023350:	4632      	mov	r2, r6
 8023352:	463b      	mov	r3, r7
 8023354:	f7dd f95c 	bl	8000610 <__aeabi_dmul>
 8023358:	a357      	add	r3, pc, #348	; (adr r3, 80234b8 <__ieee754_log+0x330>)
 802335a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802335e:	f7dc ffa5 	bl	80002ac <__adddf3>
 8023362:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023366:	f7dd f953 	bl	8000610 <__aeabi_dmul>
 802336a:	a355      	add	r3, pc, #340	; (adr r3, 80234c0 <__ieee754_log+0x338>)
 802336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023370:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023374:	4630      	mov	r0, r6
 8023376:	4639      	mov	r1, r7
 8023378:	f7dd f94a 	bl	8000610 <__aeabi_dmul>
 802337c:	a352      	add	r3, pc, #328	; (adr r3, 80234c8 <__ieee754_log+0x340>)
 802337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023382:	f7dc ff93 	bl	80002ac <__adddf3>
 8023386:	4632      	mov	r2, r6
 8023388:	463b      	mov	r3, r7
 802338a:	f7dd f941 	bl	8000610 <__aeabi_dmul>
 802338e:	a350      	add	r3, pc, #320	; (adr r3, 80234d0 <__ieee754_log+0x348>)
 8023390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023394:	f7dc ff8a 	bl	80002ac <__adddf3>
 8023398:	4632      	mov	r2, r6
 802339a:	463b      	mov	r3, r7
 802339c:	f7dd f938 	bl	8000610 <__aeabi_dmul>
 80233a0:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 80233a4:	4602      	mov	r2, r0
 80233a6:	460b      	mov	r3, r1
 80233a8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80233ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80233b0:	f7dc ff7c 	bl	80002ac <__adddf3>
 80233b4:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 80233b8:	3551      	adds	r5, #81	; 0x51
 80233ba:	ea45 0508 	orr.w	r5, r5, r8
 80233be:	2d00      	cmp	r5, #0
 80233c0:	4606      	mov	r6, r0
 80233c2:	460f      	mov	r7, r1
 80233c4:	dd50      	ble.n	8023468 <__ieee754_log+0x2e0>
 80233c6:	2200      	movs	r2, #0
 80233c8:	4b47      	ldr	r3, [pc, #284]	; (80234e8 <__ieee754_log+0x360>)
 80233ca:	4650      	mov	r0, sl
 80233cc:	4659      	mov	r1, fp
 80233ce:	f7dd f91f 	bl	8000610 <__aeabi_dmul>
 80233d2:	4652      	mov	r2, sl
 80233d4:	465b      	mov	r3, fp
 80233d6:	f7dd f91b 	bl	8000610 <__aeabi_dmul>
 80233da:	4680      	mov	r8, r0
 80233dc:	4689      	mov	r9, r1
 80233de:	b994      	cbnz	r4, 8023406 <__ieee754_log+0x27e>
 80233e0:	4602      	mov	r2, r0
 80233e2:	460b      	mov	r3, r1
 80233e4:	4630      	mov	r0, r6
 80233e6:	4639      	mov	r1, r7
 80233e8:	f7dc ff60 	bl	80002ac <__adddf3>
 80233ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80233f0:	f7dd f90e 	bl	8000610 <__aeabi_dmul>
 80233f4:	4602      	mov	r2, r0
 80233f6:	460b      	mov	r3, r1
 80233f8:	4640      	mov	r0, r8
 80233fa:	4649      	mov	r1, r9
 80233fc:	f7dc ff54 	bl	80002a8 <__aeabi_dsub>
 8023400:	4602      	mov	r2, r0
 8023402:	460b      	mov	r3, r1
 8023404:	e755      	b.n	80232b2 <__ieee754_log+0x12a>
 8023406:	a320      	add	r3, pc, #128	; (adr r3, 8023488 <__ieee754_log+0x300>)
 8023408:	e9d3 2300 	ldrd	r2, r3, [r3]
 802340c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023410:	f7dd f8fe 	bl	8000610 <__aeabi_dmul>
 8023414:	4642      	mov	r2, r8
 8023416:	464b      	mov	r3, r9
 8023418:	4604      	mov	r4, r0
 802341a:	460d      	mov	r5, r1
 802341c:	4630      	mov	r0, r6
 802341e:	4639      	mov	r1, r7
 8023420:	f7dc ff44 	bl	80002ac <__adddf3>
 8023424:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023428:	f7dd f8f2 	bl	8000610 <__aeabi_dmul>
 802342c:	a318      	add	r3, pc, #96	; (adr r3, 8023490 <__ieee754_log+0x308>)
 802342e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023432:	4606      	mov	r6, r0
 8023434:	460f      	mov	r7, r1
 8023436:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802343a:	f7dd f8e9 	bl	8000610 <__aeabi_dmul>
 802343e:	4602      	mov	r2, r0
 8023440:	460b      	mov	r3, r1
 8023442:	4630      	mov	r0, r6
 8023444:	4639      	mov	r1, r7
 8023446:	f7dc ff31 	bl	80002ac <__adddf3>
 802344a:	4602      	mov	r2, r0
 802344c:	460b      	mov	r3, r1
 802344e:	4640      	mov	r0, r8
 8023450:	4649      	mov	r1, r9
 8023452:	f7dc ff29 	bl	80002a8 <__aeabi_dsub>
 8023456:	4652      	mov	r2, sl
 8023458:	465b      	mov	r3, fp
 802345a:	f7dc ff25 	bl	80002a8 <__aeabi_dsub>
 802345e:	4602      	mov	r2, r0
 8023460:	460b      	mov	r3, r1
 8023462:	4620      	mov	r0, r4
 8023464:	4629      	mov	r1, r5
 8023466:	e726      	b.n	80232b6 <__ieee754_log+0x12e>
 8023468:	2c00      	cmp	r4, #0
 802346a:	d13f      	bne.n	80234ec <__ieee754_log+0x364>
 802346c:	4602      	mov	r2, r0
 802346e:	460b      	mov	r3, r1
 8023470:	4650      	mov	r0, sl
 8023472:	4659      	mov	r1, fp
 8023474:	f7dc ff18 	bl	80002a8 <__aeabi_dsub>
 8023478:	e9dd 2300 	ldrd	r2, r3, [sp]
 802347c:	f7dd f8c8 	bl	8000610 <__aeabi_dmul>
 8023480:	e7be      	b.n	8023400 <__ieee754_log+0x278>
 8023482:	bf00      	nop
 8023484:	f3af 8000 	nop.w
 8023488:	fee00000 	.word	0xfee00000
 802348c:	3fe62e42 	.word	0x3fe62e42
 8023490:	35793c76 	.word	0x35793c76
 8023494:	3dea39ef 	.word	0x3dea39ef
 8023498:	55555555 	.word	0x55555555
 802349c:	3fd55555 	.word	0x3fd55555
 80234a0:	df3e5244 	.word	0xdf3e5244
 80234a4:	3fc2f112 	.word	0x3fc2f112
 80234a8:	96cb03de 	.word	0x96cb03de
 80234ac:	3fc74664 	.word	0x3fc74664
 80234b0:	94229359 	.word	0x94229359
 80234b4:	3fd24924 	.word	0x3fd24924
 80234b8:	55555593 	.word	0x55555593
 80234bc:	3fe55555 	.word	0x3fe55555
 80234c0:	d078c69f 	.word	0xd078c69f
 80234c4:	3fc39a09 	.word	0x3fc39a09
 80234c8:	1d8e78af 	.word	0x1d8e78af
 80234cc:	3fcc71c5 	.word	0x3fcc71c5
 80234d0:	9997fa04 	.word	0x9997fa04
 80234d4:	3fd99999 	.word	0x3fd99999
 80234d8:	c3500000 	.word	0xc3500000
 80234dc:	43500000 	.word	0x43500000
 80234e0:	7fefffff 	.word	0x7fefffff
 80234e4:	3ff00000 	.word	0x3ff00000
 80234e8:	3fe00000 	.word	0x3fe00000
 80234ec:	a30e      	add	r3, pc, #56	; (adr r3, 8023528 <__ieee754_log+0x3a0>)
 80234ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80234f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80234f6:	f7dd f88b 	bl	8000610 <__aeabi_dmul>
 80234fa:	4632      	mov	r2, r6
 80234fc:	463b      	mov	r3, r7
 80234fe:	4604      	mov	r4, r0
 8023500:	460d      	mov	r5, r1
 8023502:	4650      	mov	r0, sl
 8023504:	4659      	mov	r1, fp
 8023506:	f7dc fecf 	bl	80002a8 <__aeabi_dsub>
 802350a:	e9dd 2300 	ldrd	r2, r3, [sp]
 802350e:	f7dd f87f 	bl	8000610 <__aeabi_dmul>
 8023512:	a307      	add	r3, pc, #28	; (adr r3, 8023530 <__ieee754_log+0x3a8>)
 8023514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023518:	4606      	mov	r6, r0
 802351a:	460f      	mov	r7, r1
 802351c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023520:	e6dd      	b.n	80232de <__ieee754_log+0x156>
 8023522:	2000      	movs	r0, #0
 8023524:	2100      	movs	r1, #0
 8023526:	e644      	b.n	80231b2 <__ieee754_log+0x2a>
 8023528:	fee00000 	.word	0xfee00000
 802352c:	3fe62e42 	.word	0x3fe62e42
 8023530:	35793c76 	.word	0x35793c76
 8023534:	3dea39ef 	.word	0x3dea39ef

08023538 <__ieee754_pow>:
 8023538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802353c:	b091      	sub	sp, #68	; 0x44
 802353e:	ed8d 1b00 	vstr	d1, [sp]
 8023542:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8023546:	ec57 6b10 	vmov	r6, r7, d0
 802354a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802354e:	ea58 0302 	orrs.w	r3, r8, r2
 8023552:	ee10 aa10 	vmov	sl, s0
 8023556:	463d      	mov	r5, r7
 8023558:	f000 84bd 	beq.w	8023ed6 <__ieee754_pow+0x99e>
 802355c:	4b78      	ldr	r3, [pc, #480]	; (8023740 <__ieee754_pow+0x208>)
 802355e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8023562:	429c      	cmp	r4, r3
 8023564:	dc09      	bgt.n	802357a <__ieee754_pow+0x42>
 8023566:	d103      	bne.n	8023570 <__ieee754_pow+0x38>
 8023568:	b93e      	cbnz	r6, 802357a <__ieee754_pow+0x42>
 802356a:	45a0      	cmp	r8, r4
 802356c:	dc0d      	bgt.n	802358a <__ieee754_pow+0x52>
 802356e:	e001      	b.n	8023574 <__ieee754_pow+0x3c>
 8023570:	4598      	cmp	r8, r3
 8023572:	dc02      	bgt.n	802357a <__ieee754_pow+0x42>
 8023574:	4598      	cmp	r8, r3
 8023576:	d10e      	bne.n	8023596 <__ieee754_pow+0x5e>
 8023578:	b16a      	cbz	r2, 8023596 <__ieee754_pow+0x5e>
 802357a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802357e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8023582:	ea54 030a 	orrs.w	r3, r4, sl
 8023586:	f000 84a6 	beq.w	8023ed6 <__ieee754_pow+0x99e>
 802358a:	486e      	ldr	r0, [pc, #440]	; (8023744 <__ieee754_pow+0x20c>)
 802358c:	b011      	add	sp, #68	; 0x44
 802358e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023592:	f000 bded 	b.w	8024170 <nan>
 8023596:	2d00      	cmp	r5, #0
 8023598:	da53      	bge.n	8023642 <__ieee754_pow+0x10a>
 802359a:	4b6b      	ldr	r3, [pc, #428]	; (8023748 <__ieee754_pow+0x210>)
 802359c:	4598      	cmp	r8, r3
 802359e:	dc4d      	bgt.n	802363c <__ieee754_pow+0x104>
 80235a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80235a4:	4598      	cmp	r8, r3
 80235a6:	dd4c      	ble.n	8023642 <__ieee754_pow+0x10a>
 80235a8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80235ac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80235b0:	2b14      	cmp	r3, #20
 80235b2:	dd26      	ble.n	8023602 <__ieee754_pow+0xca>
 80235b4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80235b8:	fa22 f103 	lsr.w	r1, r2, r3
 80235bc:	fa01 f303 	lsl.w	r3, r1, r3
 80235c0:	429a      	cmp	r2, r3
 80235c2:	d13e      	bne.n	8023642 <__ieee754_pow+0x10a>
 80235c4:	f001 0101 	and.w	r1, r1, #1
 80235c8:	f1c1 0b02 	rsb	fp, r1, #2
 80235cc:	2a00      	cmp	r2, #0
 80235ce:	d15b      	bne.n	8023688 <__ieee754_pow+0x150>
 80235d0:	4b5b      	ldr	r3, [pc, #364]	; (8023740 <__ieee754_pow+0x208>)
 80235d2:	4598      	cmp	r8, r3
 80235d4:	d124      	bne.n	8023620 <__ieee754_pow+0xe8>
 80235d6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80235da:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80235de:	ea53 030a 	orrs.w	r3, r3, sl
 80235e2:	f000 8478 	beq.w	8023ed6 <__ieee754_pow+0x99e>
 80235e6:	4b59      	ldr	r3, [pc, #356]	; (802374c <__ieee754_pow+0x214>)
 80235e8:	429c      	cmp	r4, r3
 80235ea:	dd2d      	ble.n	8023648 <__ieee754_pow+0x110>
 80235ec:	f1b9 0f00 	cmp.w	r9, #0
 80235f0:	f280 8475 	bge.w	8023ede <__ieee754_pow+0x9a6>
 80235f4:	2000      	movs	r0, #0
 80235f6:	2100      	movs	r1, #0
 80235f8:	ec41 0b10 	vmov	d0, r0, r1
 80235fc:	b011      	add	sp, #68	; 0x44
 80235fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023602:	2a00      	cmp	r2, #0
 8023604:	d13e      	bne.n	8023684 <__ieee754_pow+0x14c>
 8023606:	f1c3 0314 	rsb	r3, r3, #20
 802360a:	fa48 f103 	asr.w	r1, r8, r3
 802360e:	fa01 f303 	lsl.w	r3, r1, r3
 8023612:	4598      	cmp	r8, r3
 8023614:	f040 846b 	bne.w	8023eee <__ieee754_pow+0x9b6>
 8023618:	f001 0101 	and.w	r1, r1, #1
 802361c:	f1c1 0b02 	rsb	fp, r1, #2
 8023620:	4b4b      	ldr	r3, [pc, #300]	; (8023750 <__ieee754_pow+0x218>)
 8023622:	4598      	cmp	r8, r3
 8023624:	d118      	bne.n	8023658 <__ieee754_pow+0x120>
 8023626:	f1b9 0f00 	cmp.w	r9, #0
 802362a:	f280 845c 	bge.w	8023ee6 <__ieee754_pow+0x9ae>
 802362e:	4948      	ldr	r1, [pc, #288]	; (8023750 <__ieee754_pow+0x218>)
 8023630:	4632      	mov	r2, r6
 8023632:	463b      	mov	r3, r7
 8023634:	2000      	movs	r0, #0
 8023636:	f7dd f915 	bl	8000864 <__aeabi_ddiv>
 802363a:	e7dd      	b.n	80235f8 <__ieee754_pow+0xc0>
 802363c:	f04f 0b02 	mov.w	fp, #2
 8023640:	e7c4      	b.n	80235cc <__ieee754_pow+0x94>
 8023642:	f04f 0b00 	mov.w	fp, #0
 8023646:	e7c1      	b.n	80235cc <__ieee754_pow+0x94>
 8023648:	f1b9 0f00 	cmp.w	r9, #0
 802364c:	dad2      	bge.n	80235f4 <__ieee754_pow+0xbc>
 802364e:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8023652:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023656:	e7cf      	b.n	80235f8 <__ieee754_pow+0xc0>
 8023658:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802365c:	d106      	bne.n	802366c <__ieee754_pow+0x134>
 802365e:	4632      	mov	r2, r6
 8023660:	463b      	mov	r3, r7
 8023662:	4610      	mov	r0, r2
 8023664:	4619      	mov	r1, r3
 8023666:	f7dc ffd3 	bl	8000610 <__aeabi_dmul>
 802366a:	e7c5      	b.n	80235f8 <__ieee754_pow+0xc0>
 802366c:	4b39      	ldr	r3, [pc, #228]	; (8023754 <__ieee754_pow+0x21c>)
 802366e:	4599      	cmp	r9, r3
 8023670:	d10a      	bne.n	8023688 <__ieee754_pow+0x150>
 8023672:	2d00      	cmp	r5, #0
 8023674:	db08      	blt.n	8023688 <__ieee754_pow+0x150>
 8023676:	ec47 6b10 	vmov	d0, r6, r7
 802367a:	b011      	add	sp, #68	; 0x44
 802367c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023680:	f000 bc6c 	b.w	8023f5c <__ieee754_sqrt>
 8023684:	f04f 0b00 	mov.w	fp, #0
 8023688:	ec47 6b10 	vmov	d0, r6, r7
 802368c:	f000 fd5d 	bl	802414a <fabs>
 8023690:	ec51 0b10 	vmov	r0, r1, d0
 8023694:	f1ba 0f00 	cmp.w	sl, #0
 8023698:	d127      	bne.n	80236ea <__ieee754_pow+0x1b2>
 802369a:	b124      	cbz	r4, 80236a6 <__ieee754_pow+0x16e>
 802369c:	4b2c      	ldr	r3, [pc, #176]	; (8023750 <__ieee754_pow+0x218>)
 802369e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80236a2:	429a      	cmp	r2, r3
 80236a4:	d121      	bne.n	80236ea <__ieee754_pow+0x1b2>
 80236a6:	f1b9 0f00 	cmp.w	r9, #0
 80236aa:	da05      	bge.n	80236b8 <__ieee754_pow+0x180>
 80236ac:	4602      	mov	r2, r0
 80236ae:	460b      	mov	r3, r1
 80236b0:	2000      	movs	r0, #0
 80236b2:	4927      	ldr	r1, [pc, #156]	; (8023750 <__ieee754_pow+0x218>)
 80236b4:	f7dd f8d6 	bl	8000864 <__aeabi_ddiv>
 80236b8:	2d00      	cmp	r5, #0
 80236ba:	da9d      	bge.n	80235f8 <__ieee754_pow+0xc0>
 80236bc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80236c0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80236c4:	ea54 030b 	orrs.w	r3, r4, fp
 80236c8:	d108      	bne.n	80236dc <__ieee754_pow+0x1a4>
 80236ca:	4602      	mov	r2, r0
 80236cc:	460b      	mov	r3, r1
 80236ce:	4610      	mov	r0, r2
 80236d0:	4619      	mov	r1, r3
 80236d2:	f7dc fde9 	bl	80002a8 <__aeabi_dsub>
 80236d6:	4602      	mov	r2, r0
 80236d8:	460b      	mov	r3, r1
 80236da:	e7ac      	b.n	8023636 <__ieee754_pow+0xfe>
 80236dc:	f1bb 0f01 	cmp.w	fp, #1
 80236e0:	d18a      	bne.n	80235f8 <__ieee754_pow+0xc0>
 80236e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80236e6:	4619      	mov	r1, r3
 80236e8:	e786      	b.n	80235f8 <__ieee754_pow+0xc0>
 80236ea:	0fed      	lsrs	r5, r5, #31
 80236ec:	1e6b      	subs	r3, r5, #1
 80236ee:	930d      	str	r3, [sp, #52]	; 0x34
 80236f0:	ea5b 0303 	orrs.w	r3, fp, r3
 80236f4:	d102      	bne.n	80236fc <__ieee754_pow+0x1c4>
 80236f6:	4632      	mov	r2, r6
 80236f8:	463b      	mov	r3, r7
 80236fa:	e7e8      	b.n	80236ce <__ieee754_pow+0x196>
 80236fc:	4b16      	ldr	r3, [pc, #88]	; (8023758 <__ieee754_pow+0x220>)
 80236fe:	4598      	cmp	r8, r3
 8023700:	f340 80fe 	ble.w	8023900 <__ieee754_pow+0x3c8>
 8023704:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8023708:	4598      	cmp	r8, r3
 802370a:	dd0a      	ble.n	8023722 <__ieee754_pow+0x1ea>
 802370c:	4b0f      	ldr	r3, [pc, #60]	; (802374c <__ieee754_pow+0x214>)
 802370e:	429c      	cmp	r4, r3
 8023710:	dc0d      	bgt.n	802372e <__ieee754_pow+0x1f6>
 8023712:	f1b9 0f00 	cmp.w	r9, #0
 8023716:	f6bf af6d 	bge.w	80235f4 <__ieee754_pow+0xbc>
 802371a:	a307      	add	r3, pc, #28	; (adr r3, 8023738 <__ieee754_pow+0x200>)
 802371c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023720:	e79f      	b.n	8023662 <__ieee754_pow+0x12a>
 8023722:	4b0e      	ldr	r3, [pc, #56]	; (802375c <__ieee754_pow+0x224>)
 8023724:	429c      	cmp	r4, r3
 8023726:	ddf4      	ble.n	8023712 <__ieee754_pow+0x1da>
 8023728:	4b09      	ldr	r3, [pc, #36]	; (8023750 <__ieee754_pow+0x218>)
 802372a:	429c      	cmp	r4, r3
 802372c:	dd18      	ble.n	8023760 <__ieee754_pow+0x228>
 802372e:	f1b9 0f00 	cmp.w	r9, #0
 8023732:	dcf2      	bgt.n	802371a <__ieee754_pow+0x1e2>
 8023734:	e75e      	b.n	80235f4 <__ieee754_pow+0xbc>
 8023736:	bf00      	nop
 8023738:	8800759c 	.word	0x8800759c
 802373c:	7e37e43c 	.word	0x7e37e43c
 8023740:	7ff00000 	.word	0x7ff00000
 8023744:	080312b1 	.word	0x080312b1
 8023748:	433fffff 	.word	0x433fffff
 802374c:	3fefffff 	.word	0x3fefffff
 8023750:	3ff00000 	.word	0x3ff00000
 8023754:	3fe00000 	.word	0x3fe00000
 8023758:	41e00000 	.word	0x41e00000
 802375c:	3feffffe 	.word	0x3feffffe
 8023760:	2200      	movs	r2, #0
 8023762:	4b63      	ldr	r3, [pc, #396]	; (80238f0 <__ieee754_pow+0x3b8>)
 8023764:	f7dc fda0 	bl	80002a8 <__aeabi_dsub>
 8023768:	a355      	add	r3, pc, #340	; (adr r3, 80238c0 <__ieee754_pow+0x388>)
 802376a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802376e:	4604      	mov	r4, r0
 8023770:	460d      	mov	r5, r1
 8023772:	f7dc ff4d 	bl	8000610 <__aeabi_dmul>
 8023776:	a354      	add	r3, pc, #336	; (adr r3, 80238c8 <__ieee754_pow+0x390>)
 8023778:	e9d3 2300 	ldrd	r2, r3, [r3]
 802377c:	4606      	mov	r6, r0
 802377e:	460f      	mov	r7, r1
 8023780:	4620      	mov	r0, r4
 8023782:	4629      	mov	r1, r5
 8023784:	f7dc ff44 	bl	8000610 <__aeabi_dmul>
 8023788:	2200      	movs	r2, #0
 802378a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802378e:	4b59      	ldr	r3, [pc, #356]	; (80238f4 <__ieee754_pow+0x3bc>)
 8023790:	4620      	mov	r0, r4
 8023792:	4629      	mov	r1, r5
 8023794:	f7dc ff3c 	bl	8000610 <__aeabi_dmul>
 8023798:	4602      	mov	r2, r0
 802379a:	460b      	mov	r3, r1
 802379c:	a14c      	add	r1, pc, #304	; (adr r1, 80238d0 <__ieee754_pow+0x398>)
 802379e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80237a2:	f7dc fd81 	bl	80002a8 <__aeabi_dsub>
 80237a6:	4622      	mov	r2, r4
 80237a8:	462b      	mov	r3, r5
 80237aa:	f7dc ff31 	bl	8000610 <__aeabi_dmul>
 80237ae:	4602      	mov	r2, r0
 80237b0:	460b      	mov	r3, r1
 80237b2:	2000      	movs	r0, #0
 80237b4:	4950      	ldr	r1, [pc, #320]	; (80238f8 <__ieee754_pow+0x3c0>)
 80237b6:	f7dc fd77 	bl	80002a8 <__aeabi_dsub>
 80237ba:	4622      	mov	r2, r4
 80237bc:	462b      	mov	r3, r5
 80237be:	4680      	mov	r8, r0
 80237c0:	4689      	mov	r9, r1
 80237c2:	4620      	mov	r0, r4
 80237c4:	4629      	mov	r1, r5
 80237c6:	f7dc ff23 	bl	8000610 <__aeabi_dmul>
 80237ca:	4602      	mov	r2, r0
 80237cc:	460b      	mov	r3, r1
 80237ce:	4640      	mov	r0, r8
 80237d0:	4649      	mov	r1, r9
 80237d2:	f7dc ff1d 	bl	8000610 <__aeabi_dmul>
 80237d6:	a340      	add	r3, pc, #256	; (adr r3, 80238d8 <__ieee754_pow+0x3a0>)
 80237d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237dc:	f7dc ff18 	bl	8000610 <__aeabi_dmul>
 80237e0:	4602      	mov	r2, r0
 80237e2:	460b      	mov	r3, r1
 80237e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80237e8:	f7dc fd5e 	bl	80002a8 <__aeabi_dsub>
 80237ec:	4602      	mov	r2, r0
 80237ee:	460b      	mov	r3, r1
 80237f0:	4604      	mov	r4, r0
 80237f2:	460d      	mov	r5, r1
 80237f4:	4630      	mov	r0, r6
 80237f6:	4639      	mov	r1, r7
 80237f8:	f7dc fd58 	bl	80002ac <__adddf3>
 80237fc:	2000      	movs	r0, #0
 80237fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023802:	4632      	mov	r2, r6
 8023804:	463b      	mov	r3, r7
 8023806:	f7dc fd4f 	bl	80002a8 <__aeabi_dsub>
 802380a:	4602      	mov	r2, r0
 802380c:	460b      	mov	r3, r1
 802380e:	4620      	mov	r0, r4
 8023810:	4629      	mov	r1, r5
 8023812:	f7dc fd49 	bl	80002a8 <__aeabi_dsub>
 8023816:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8023818:	f10b 33ff 	add.w	r3, fp, #4294967295
 802381c:	4313      	orrs	r3, r2
 802381e:	4606      	mov	r6, r0
 8023820:	460f      	mov	r7, r1
 8023822:	f040 81eb 	bne.w	8023bfc <__ieee754_pow+0x6c4>
 8023826:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80238e0 <__ieee754_pow+0x3a8>
 802382a:	e9dd 4500 	ldrd	r4, r5, [sp]
 802382e:	2400      	movs	r4, #0
 8023830:	4622      	mov	r2, r4
 8023832:	462b      	mov	r3, r5
 8023834:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023838:	ed8d 7b02 	vstr	d7, [sp, #8]
 802383c:	f7dc fd34 	bl	80002a8 <__aeabi_dsub>
 8023840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023844:	f7dc fee4 	bl	8000610 <__aeabi_dmul>
 8023848:	e9dd 2300 	ldrd	r2, r3, [sp]
 802384c:	4680      	mov	r8, r0
 802384e:	4689      	mov	r9, r1
 8023850:	4630      	mov	r0, r6
 8023852:	4639      	mov	r1, r7
 8023854:	f7dc fedc 	bl	8000610 <__aeabi_dmul>
 8023858:	4602      	mov	r2, r0
 802385a:	460b      	mov	r3, r1
 802385c:	4640      	mov	r0, r8
 802385e:	4649      	mov	r1, r9
 8023860:	f7dc fd24 	bl	80002ac <__adddf3>
 8023864:	4622      	mov	r2, r4
 8023866:	462b      	mov	r3, r5
 8023868:	4680      	mov	r8, r0
 802386a:	4689      	mov	r9, r1
 802386c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023870:	f7dc fece 	bl	8000610 <__aeabi_dmul>
 8023874:	460b      	mov	r3, r1
 8023876:	4604      	mov	r4, r0
 8023878:	460d      	mov	r5, r1
 802387a:	4602      	mov	r2, r0
 802387c:	4649      	mov	r1, r9
 802387e:	4640      	mov	r0, r8
 8023880:	e9cd 4500 	strd	r4, r5, [sp]
 8023884:	f7dc fd12 	bl	80002ac <__adddf3>
 8023888:	4b1c      	ldr	r3, [pc, #112]	; (80238fc <__ieee754_pow+0x3c4>)
 802388a:	4299      	cmp	r1, r3
 802388c:	4606      	mov	r6, r0
 802388e:	460f      	mov	r7, r1
 8023890:	468b      	mov	fp, r1
 8023892:	f340 82f7 	ble.w	8023e84 <__ieee754_pow+0x94c>
 8023896:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802389a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802389e:	4303      	orrs	r3, r0
 80238a0:	f000 81ea 	beq.w	8023c78 <__ieee754_pow+0x740>
 80238a4:	a310      	add	r3, pc, #64	; (adr r3, 80238e8 <__ieee754_pow+0x3b0>)
 80238a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80238ae:	f7dc feaf 	bl	8000610 <__aeabi_dmul>
 80238b2:	a30d      	add	r3, pc, #52	; (adr r3, 80238e8 <__ieee754_pow+0x3b0>)
 80238b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238b8:	e6d5      	b.n	8023666 <__ieee754_pow+0x12e>
 80238ba:	bf00      	nop
 80238bc:	f3af 8000 	nop.w
 80238c0:	60000000 	.word	0x60000000
 80238c4:	3ff71547 	.word	0x3ff71547
 80238c8:	f85ddf44 	.word	0xf85ddf44
 80238cc:	3e54ae0b 	.word	0x3e54ae0b
 80238d0:	55555555 	.word	0x55555555
 80238d4:	3fd55555 	.word	0x3fd55555
 80238d8:	652b82fe 	.word	0x652b82fe
 80238dc:	3ff71547 	.word	0x3ff71547
 80238e0:	00000000 	.word	0x00000000
 80238e4:	bff00000 	.word	0xbff00000
 80238e8:	8800759c 	.word	0x8800759c
 80238ec:	7e37e43c 	.word	0x7e37e43c
 80238f0:	3ff00000 	.word	0x3ff00000
 80238f4:	3fd00000 	.word	0x3fd00000
 80238f8:	3fe00000 	.word	0x3fe00000
 80238fc:	408fffff 	.word	0x408fffff
 8023900:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8023904:	f04f 0200 	mov.w	r2, #0
 8023908:	da05      	bge.n	8023916 <__ieee754_pow+0x3de>
 802390a:	4bd3      	ldr	r3, [pc, #844]	; (8023c58 <__ieee754_pow+0x720>)
 802390c:	f7dc fe80 	bl	8000610 <__aeabi_dmul>
 8023910:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8023914:	460c      	mov	r4, r1
 8023916:	1523      	asrs	r3, r4, #20
 8023918:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802391c:	4413      	add	r3, r2
 802391e:	9307      	str	r3, [sp, #28]
 8023920:	4bce      	ldr	r3, [pc, #824]	; (8023c5c <__ieee754_pow+0x724>)
 8023922:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8023926:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802392a:	429c      	cmp	r4, r3
 802392c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8023930:	dd08      	ble.n	8023944 <__ieee754_pow+0x40c>
 8023932:	4bcb      	ldr	r3, [pc, #812]	; (8023c60 <__ieee754_pow+0x728>)
 8023934:	429c      	cmp	r4, r3
 8023936:	f340 815e 	ble.w	8023bf6 <__ieee754_pow+0x6be>
 802393a:	9b07      	ldr	r3, [sp, #28]
 802393c:	3301      	adds	r3, #1
 802393e:	9307      	str	r3, [sp, #28]
 8023940:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8023944:	f04f 0a00 	mov.w	sl, #0
 8023948:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 802394c:	930c      	str	r3, [sp, #48]	; 0x30
 802394e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023950:	4bc4      	ldr	r3, [pc, #784]	; (8023c64 <__ieee754_pow+0x72c>)
 8023952:	4413      	add	r3, r2
 8023954:	ed93 7b00 	vldr	d7, [r3]
 8023958:	4629      	mov	r1, r5
 802395a:	ec53 2b17 	vmov	r2, r3, d7
 802395e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8023962:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023966:	f7dc fc9f 	bl	80002a8 <__aeabi_dsub>
 802396a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 802396e:	4606      	mov	r6, r0
 8023970:	460f      	mov	r7, r1
 8023972:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023976:	f7dc fc99 	bl	80002ac <__adddf3>
 802397a:	4602      	mov	r2, r0
 802397c:	460b      	mov	r3, r1
 802397e:	2000      	movs	r0, #0
 8023980:	49b9      	ldr	r1, [pc, #740]	; (8023c68 <__ieee754_pow+0x730>)
 8023982:	f7dc ff6f 	bl	8000864 <__aeabi_ddiv>
 8023986:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 802398a:	4602      	mov	r2, r0
 802398c:	460b      	mov	r3, r1
 802398e:	4630      	mov	r0, r6
 8023990:	4639      	mov	r1, r7
 8023992:	f7dc fe3d 	bl	8000610 <__aeabi_dmul>
 8023996:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802399a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 802399e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80239a2:	2300      	movs	r3, #0
 80239a4:	9302      	str	r3, [sp, #8]
 80239a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80239aa:	106d      	asrs	r5, r5, #1
 80239ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80239b0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80239b4:	2200      	movs	r2, #0
 80239b6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80239ba:	4640      	mov	r0, r8
 80239bc:	4649      	mov	r1, r9
 80239be:	4614      	mov	r4, r2
 80239c0:	461d      	mov	r5, r3
 80239c2:	f7dc fe25 	bl	8000610 <__aeabi_dmul>
 80239c6:	4602      	mov	r2, r0
 80239c8:	460b      	mov	r3, r1
 80239ca:	4630      	mov	r0, r6
 80239cc:	4639      	mov	r1, r7
 80239ce:	f7dc fc6b 	bl	80002a8 <__aeabi_dsub>
 80239d2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80239d6:	4606      	mov	r6, r0
 80239d8:	460f      	mov	r7, r1
 80239da:	4620      	mov	r0, r4
 80239dc:	4629      	mov	r1, r5
 80239de:	f7dc fc63 	bl	80002a8 <__aeabi_dsub>
 80239e2:	4602      	mov	r2, r0
 80239e4:	460b      	mov	r3, r1
 80239e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80239ea:	f7dc fc5d 	bl	80002a8 <__aeabi_dsub>
 80239ee:	4642      	mov	r2, r8
 80239f0:	464b      	mov	r3, r9
 80239f2:	f7dc fe0d 	bl	8000610 <__aeabi_dmul>
 80239f6:	4602      	mov	r2, r0
 80239f8:	460b      	mov	r3, r1
 80239fa:	4630      	mov	r0, r6
 80239fc:	4639      	mov	r1, r7
 80239fe:	f7dc fc53 	bl	80002a8 <__aeabi_dsub>
 8023a02:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8023a06:	f7dc fe03 	bl	8000610 <__aeabi_dmul>
 8023a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023a0e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023a12:	4610      	mov	r0, r2
 8023a14:	4619      	mov	r1, r3
 8023a16:	f7dc fdfb 	bl	8000610 <__aeabi_dmul>
 8023a1a:	a37b      	add	r3, pc, #492	; (adr r3, 8023c08 <__ieee754_pow+0x6d0>)
 8023a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a20:	4604      	mov	r4, r0
 8023a22:	460d      	mov	r5, r1
 8023a24:	f7dc fdf4 	bl	8000610 <__aeabi_dmul>
 8023a28:	a379      	add	r3, pc, #484	; (adr r3, 8023c10 <__ieee754_pow+0x6d8>)
 8023a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a2e:	f7dc fc3d 	bl	80002ac <__adddf3>
 8023a32:	4622      	mov	r2, r4
 8023a34:	462b      	mov	r3, r5
 8023a36:	f7dc fdeb 	bl	8000610 <__aeabi_dmul>
 8023a3a:	a377      	add	r3, pc, #476	; (adr r3, 8023c18 <__ieee754_pow+0x6e0>)
 8023a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a40:	f7dc fc34 	bl	80002ac <__adddf3>
 8023a44:	4622      	mov	r2, r4
 8023a46:	462b      	mov	r3, r5
 8023a48:	f7dc fde2 	bl	8000610 <__aeabi_dmul>
 8023a4c:	a374      	add	r3, pc, #464	; (adr r3, 8023c20 <__ieee754_pow+0x6e8>)
 8023a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a52:	f7dc fc2b 	bl	80002ac <__adddf3>
 8023a56:	4622      	mov	r2, r4
 8023a58:	462b      	mov	r3, r5
 8023a5a:	f7dc fdd9 	bl	8000610 <__aeabi_dmul>
 8023a5e:	a372      	add	r3, pc, #456	; (adr r3, 8023c28 <__ieee754_pow+0x6f0>)
 8023a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a64:	f7dc fc22 	bl	80002ac <__adddf3>
 8023a68:	4622      	mov	r2, r4
 8023a6a:	462b      	mov	r3, r5
 8023a6c:	f7dc fdd0 	bl	8000610 <__aeabi_dmul>
 8023a70:	a36f      	add	r3, pc, #444	; (adr r3, 8023c30 <__ieee754_pow+0x6f8>)
 8023a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023a76:	f7dc fc19 	bl	80002ac <__adddf3>
 8023a7a:	4622      	mov	r2, r4
 8023a7c:	4606      	mov	r6, r0
 8023a7e:	460f      	mov	r7, r1
 8023a80:	462b      	mov	r3, r5
 8023a82:	4620      	mov	r0, r4
 8023a84:	4629      	mov	r1, r5
 8023a86:	f7dc fdc3 	bl	8000610 <__aeabi_dmul>
 8023a8a:	4602      	mov	r2, r0
 8023a8c:	460b      	mov	r3, r1
 8023a8e:	4630      	mov	r0, r6
 8023a90:	4639      	mov	r1, r7
 8023a92:	f7dc fdbd 	bl	8000610 <__aeabi_dmul>
 8023a96:	4642      	mov	r2, r8
 8023a98:	4604      	mov	r4, r0
 8023a9a:	460d      	mov	r5, r1
 8023a9c:	464b      	mov	r3, r9
 8023a9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023aa2:	f7dc fc03 	bl	80002ac <__adddf3>
 8023aa6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8023aaa:	f7dc fdb1 	bl	8000610 <__aeabi_dmul>
 8023aae:	4622      	mov	r2, r4
 8023ab0:	462b      	mov	r3, r5
 8023ab2:	f7dc fbfb 	bl	80002ac <__adddf3>
 8023ab6:	4642      	mov	r2, r8
 8023ab8:	4606      	mov	r6, r0
 8023aba:	460f      	mov	r7, r1
 8023abc:	464b      	mov	r3, r9
 8023abe:	4640      	mov	r0, r8
 8023ac0:	4649      	mov	r1, r9
 8023ac2:	f7dc fda5 	bl	8000610 <__aeabi_dmul>
 8023ac6:	2200      	movs	r2, #0
 8023ac8:	4b68      	ldr	r3, [pc, #416]	; (8023c6c <__ieee754_pow+0x734>)
 8023aca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8023ace:	f7dc fbed 	bl	80002ac <__adddf3>
 8023ad2:	4632      	mov	r2, r6
 8023ad4:	463b      	mov	r3, r7
 8023ad6:	f7dc fbe9 	bl	80002ac <__adddf3>
 8023ada:	9802      	ldr	r0, [sp, #8]
 8023adc:	460d      	mov	r5, r1
 8023ade:	4604      	mov	r4, r0
 8023ae0:	4602      	mov	r2, r0
 8023ae2:	460b      	mov	r3, r1
 8023ae4:	4640      	mov	r0, r8
 8023ae6:	4649      	mov	r1, r9
 8023ae8:	f7dc fd92 	bl	8000610 <__aeabi_dmul>
 8023aec:	2200      	movs	r2, #0
 8023aee:	4680      	mov	r8, r0
 8023af0:	4689      	mov	r9, r1
 8023af2:	4b5e      	ldr	r3, [pc, #376]	; (8023c6c <__ieee754_pow+0x734>)
 8023af4:	4620      	mov	r0, r4
 8023af6:	4629      	mov	r1, r5
 8023af8:	f7dc fbd6 	bl	80002a8 <__aeabi_dsub>
 8023afc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8023b00:	f7dc fbd2 	bl	80002a8 <__aeabi_dsub>
 8023b04:	4602      	mov	r2, r0
 8023b06:	460b      	mov	r3, r1
 8023b08:	4630      	mov	r0, r6
 8023b0a:	4639      	mov	r1, r7
 8023b0c:	f7dc fbcc 	bl	80002a8 <__aeabi_dsub>
 8023b10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8023b14:	f7dc fd7c 	bl	8000610 <__aeabi_dmul>
 8023b18:	4622      	mov	r2, r4
 8023b1a:	4606      	mov	r6, r0
 8023b1c:	460f      	mov	r7, r1
 8023b1e:	462b      	mov	r3, r5
 8023b20:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023b24:	f7dc fd74 	bl	8000610 <__aeabi_dmul>
 8023b28:	4602      	mov	r2, r0
 8023b2a:	460b      	mov	r3, r1
 8023b2c:	4630      	mov	r0, r6
 8023b2e:	4639      	mov	r1, r7
 8023b30:	f7dc fbbc 	bl	80002ac <__adddf3>
 8023b34:	4606      	mov	r6, r0
 8023b36:	460f      	mov	r7, r1
 8023b38:	4602      	mov	r2, r0
 8023b3a:	460b      	mov	r3, r1
 8023b3c:	4640      	mov	r0, r8
 8023b3e:	4649      	mov	r1, r9
 8023b40:	f7dc fbb4 	bl	80002ac <__adddf3>
 8023b44:	9802      	ldr	r0, [sp, #8]
 8023b46:	a33c      	add	r3, pc, #240	; (adr r3, 8023c38 <__ieee754_pow+0x700>)
 8023b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b4c:	4604      	mov	r4, r0
 8023b4e:	460d      	mov	r5, r1
 8023b50:	f7dc fd5e 	bl	8000610 <__aeabi_dmul>
 8023b54:	4642      	mov	r2, r8
 8023b56:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8023b5a:	464b      	mov	r3, r9
 8023b5c:	4620      	mov	r0, r4
 8023b5e:	4629      	mov	r1, r5
 8023b60:	f7dc fba2 	bl	80002a8 <__aeabi_dsub>
 8023b64:	4602      	mov	r2, r0
 8023b66:	460b      	mov	r3, r1
 8023b68:	4630      	mov	r0, r6
 8023b6a:	4639      	mov	r1, r7
 8023b6c:	f7dc fb9c 	bl	80002a8 <__aeabi_dsub>
 8023b70:	a333      	add	r3, pc, #204	; (adr r3, 8023c40 <__ieee754_pow+0x708>)
 8023b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b76:	f7dc fd4b 	bl	8000610 <__aeabi_dmul>
 8023b7a:	a333      	add	r3, pc, #204	; (adr r3, 8023c48 <__ieee754_pow+0x710>)
 8023b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b80:	4606      	mov	r6, r0
 8023b82:	460f      	mov	r7, r1
 8023b84:	4620      	mov	r0, r4
 8023b86:	4629      	mov	r1, r5
 8023b88:	f7dc fd42 	bl	8000610 <__aeabi_dmul>
 8023b8c:	4602      	mov	r2, r0
 8023b8e:	460b      	mov	r3, r1
 8023b90:	4630      	mov	r0, r6
 8023b92:	4639      	mov	r1, r7
 8023b94:	f7dc fb8a 	bl	80002ac <__adddf3>
 8023b98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023b9a:	4b35      	ldr	r3, [pc, #212]	; (8023c70 <__ieee754_pow+0x738>)
 8023b9c:	4413      	add	r3, r2
 8023b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ba2:	f7dc fb83 	bl	80002ac <__adddf3>
 8023ba6:	4604      	mov	r4, r0
 8023ba8:	9807      	ldr	r0, [sp, #28]
 8023baa:	460d      	mov	r5, r1
 8023bac:	f7dc fcca 	bl	8000544 <__aeabi_i2d>
 8023bb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023bb2:	4b30      	ldr	r3, [pc, #192]	; (8023c74 <__ieee754_pow+0x73c>)
 8023bb4:	4413      	add	r3, r2
 8023bb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8023bba:	4606      	mov	r6, r0
 8023bbc:	460f      	mov	r7, r1
 8023bbe:	4622      	mov	r2, r4
 8023bc0:	462b      	mov	r3, r5
 8023bc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8023bc6:	f7dc fb71 	bl	80002ac <__adddf3>
 8023bca:	4642      	mov	r2, r8
 8023bcc:	464b      	mov	r3, r9
 8023bce:	f7dc fb6d 	bl	80002ac <__adddf3>
 8023bd2:	4632      	mov	r2, r6
 8023bd4:	463b      	mov	r3, r7
 8023bd6:	f7dc fb69 	bl	80002ac <__adddf3>
 8023bda:	9802      	ldr	r0, [sp, #8]
 8023bdc:	4632      	mov	r2, r6
 8023bde:	463b      	mov	r3, r7
 8023be0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023be4:	f7dc fb60 	bl	80002a8 <__aeabi_dsub>
 8023be8:	4642      	mov	r2, r8
 8023bea:	464b      	mov	r3, r9
 8023bec:	f7dc fb5c 	bl	80002a8 <__aeabi_dsub>
 8023bf0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8023bf4:	e607      	b.n	8023806 <__ieee754_pow+0x2ce>
 8023bf6:	f04f 0a01 	mov.w	sl, #1
 8023bfa:	e6a5      	b.n	8023948 <__ieee754_pow+0x410>
 8023bfc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8023c50 <__ieee754_pow+0x718>
 8023c00:	e613      	b.n	802382a <__ieee754_pow+0x2f2>
 8023c02:	bf00      	nop
 8023c04:	f3af 8000 	nop.w
 8023c08:	4a454eef 	.word	0x4a454eef
 8023c0c:	3fca7e28 	.word	0x3fca7e28
 8023c10:	93c9db65 	.word	0x93c9db65
 8023c14:	3fcd864a 	.word	0x3fcd864a
 8023c18:	a91d4101 	.word	0xa91d4101
 8023c1c:	3fd17460 	.word	0x3fd17460
 8023c20:	518f264d 	.word	0x518f264d
 8023c24:	3fd55555 	.word	0x3fd55555
 8023c28:	db6fabff 	.word	0xdb6fabff
 8023c2c:	3fdb6db6 	.word	0x3fdb6db6
 8023c30:	33333303 	.word	0x33333303
 8023c34:	3fe33333 	.word	0x3fe33333
 8023c38:	e0000000 	.word	0xe0000000
 8023c3c:	3feec709 	.word	0x3feec709
 8023c40:	dc3a03fd 	.word	0xdc3a03fd
 8023c44:	3feec709 	.word	0x3feec709
 8023c48:	145b01f5 	.word	0x145b01f5
 8023c4c:	be3e2fe0 	.word	0xbe3e2fe0
 8023c50:	00000000 	.word	0x00000000
 8023c54:	3ff00000 	.word	0x3ff00000
 8023c58:	43400000 	.word	0x43400000
 8023c5c:	0003988e 	.word	0x0003988e
 8023c60:	000bb679 	.word	0x000bb679
 8023c64:	08031430 	.word	0x08031430
 8023c68:	3ff00000 	.word	0x3ff00000
 8023c6c:	40080000 	.word	0x40080000
 8023c70:	08031450 	.word	0x08031450
 8023c74:	08031440 	.word	0x08031440
 8023c78:	a3b6      	add	r3, pc, #728	; (adr r3, 8023f54 <__ieee754_pow+0xa1c>)
 8023c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c7e:	4640      	mov	r0, r8
 8023c80:	4649      	mov	r1, r9
 8023c82:	f7dc fb13 	bl	80002ac <__adddf3>
 8023c86:	4622      	mov	r2, r4
 8023c88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023c8c:	462b      	mov	r3, r5
 8023c8e:	4630      	mov	r0, r6
 8023c90:	4639      	mov	r1, r7
 8023c92:	f7dc fb09 	bl	80002a8 <__aeabi_dsub>
 8023c96:	4602      	mov	r2, r0
 8023c98:	460b      	mov	r3, r1
 8023c9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8023c9e:	f7dc ff47 	bl	8000b30 <__aeabi_dcmpgt>
 8023ca2:	2800      	cmp	r0, #0
 8023ca4:	f47f adfe 	bne.w	80238a4 <__ieee754_pow+0x36c>
 8023ca8:	4aa5      	ldr	r2, [pc, #660]	; (8023f40 <__ieee754_pow+0xa08>)
 8023caa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8023cae:	4293      	cmp	r3, r2
 8023cb0:	f340 810c 	ble.w	8023ecc <__ieee754_pow+0x994>
 8023cb4:	151b      	asrs	r3, r3, #20
 8023cb6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8023cba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8023cbe:	fa4a f303 	asr.w	r3, sl, r3
 8023cc2:	445b      	add	r3, fp
 8023cc4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023cc8:	4e9e      	ldr	r6, [pc, #632]	; (8023f44 <__ieee754_pow+0xa0c>)
 8023cca:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8023cce:	4116      	asrs	r6, r2
 8023cd0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8023cd4:	2000      	movs	r0, #0
 8023cd6:	ea23 0106 	bic.w	r1, r3, r6
 8023cda:	f1c2 0214 	rsb	r2, r2, #20
 8023cde:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8023ce2:	fa4a fa02 	asr.w	sl, sl, r2
 8023ce6:	f1bb 0f00 	cmp.w	fp, #0
 8023cea:	4602      	mov	r2, r0
 8023cec:	460b      	mov	r3, r1
 8023cee:	4620      	mov	r0, r4
 8023cf0:	4629      	mov	r1, r5
 8023cf2:	bfb8      	it	lt
 8023cf4:	f1ca 0a00 	rsblt	sl, sl, #0
 8023cf8:	f7dc fad6 	bl	80002a8 <__aeabi_dsub>
 8023cfc:	e9cd 0100 	strd	r0, r1, [sp]
 8023d00:	4642      	mov	r2, r8
 8023d02:	464b      	mov	r3, r9
 8023d04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023d08:	f7dc fad0 	bl	80002ac <__adddf3>
 8023d0c:	2000      	movs	r0, #0
 8023d0e:	a37a      	add	r3, pc, #488	; (adr r3, 8023ef8 <__ieee754_pow+0x9c0>)
 8023d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d14:	4604      	mov	r4, r0
 8023d16:	460d      	mov	r5, r1
 8023d18:	f7dc fc7a 	bl	8000610 <__aeabi_dmul>
 8023d1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023d20:	4606      	mov	r6, r0
 8023d22:	460f      	mov	r7, r1
 8023d24:	4620      	mov	r0, r4
 8023d26:	4629      	mov	r1, r5
 8023d28:	f7dc fabe 	bl	80002a8 <__aeabi_dsub>
 8023d2c:	4602      	mov	r2, r0
 8023d2e:	460b      	mov	r3, r1
 8023d30:	4640      	mov	r0, r8
 8023d32:	4649      	mov	r1, r9
 8023d34:	f7dc fab8 	bl	80002a8 <__aeabi_dsub>
 8023d38:	a371      	add	r3, pc, #452	; (adr r3, 8023f00 <__ieee754_pow+0x9c8>)
 8023d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d3e:	f7dc fc67 	bl	8000610 <__aeabi_dmul>
 8023d42:	a371      	add	r3, pc, #452	; (adr r3, 8023f08 <__ieee754_pow+0x9d0>)
 8023d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d48:	4680      	mov	r8, r0
 8023d4a:	4689      	mov	r9, r1
 8023d4c:	4620      	mov	r0, r4
 8023d4e:	4629      	mov	r1, r5
 8023d50:	f7dc fc5e 	bl	8000610 <__aeabi_dmul>
 8023d54:	4602      	mov	r2, r0
 8023d56:	460b      	mov	r3, r1
 8023d58:	4640      	mov	r0, r8
 8023d5a:	4649      	mov	r1, r9
 8023d5c:	f7dc faa6 	bl	80002ac <__adddf3>
 8023d60:	4604      	mov	r4, r0
 8023d62:	460d      	mov	r5, r1
 8023d64:	4602      	mov	r2, r0
 8023d66:	460b      	mov	r3, r1
 8023d68:	4630      	mov	r0, r6
 8023d6a:	4639      	mov	r1, r7
 8023d6c:	f7dc fa9e 	bl	80002ac <__adddf3>
 8023d70:	4632      	mov	r2, r6
 8023d72:	463b      	mov	r3, r7
 8023d74:	4680      	mov	r8, r0
 8023d76:	4689      	mov	r9, r1
 8023d78:	f7dc fa96 	bl	80002a8 <__aeabi_dsub>
 8023d7c:	4602      	mov	r2, r0
 8023d7e:	460b      	mov	r3, r1
 8023d80:	4620      	mov	r0, r4
 8023d82:	4629      	mov	r1, r5
 8023d84:	f7dc fa90 	bl	80002a8 <__aeabi_dsub>
 8023d88:	4642      	mov	r2, r8
 8023d8a:	4606      	mov	r6, r0
 8023d8c:	460f      	mov	r7, r1
 8023d8e:	464b      	mov	r3, r9
 8023d90:	4640      	mov	r0, r8
 8023d92:	4649      	mov	r1, r9
 8023d94:	f7dc fc3c 	bl	8000610 <__aeabi_dmul>
 8023d98:	a35d      	add	r3, pc, #372	; (adr r3, 8023f10 <__ieee754_pow+0x9d8>)
 8023d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d9e:	4604      	mov	r4, r0
 8023da0:	460d      	mov	r5, r1
 8023da2:	f7dc fc35 	bl	8000610 <__aeabi_dmul>
 8023da6:	a35c      	add	r3, pc, #368	; (adr r3, 8023f18 <__ieee754_pow+0x9e0>)
 8023da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dac:	f7dc fa7c 	bl	80002a8 <__aeabi_dsub>
 8023db0:	4622      	mov	r2, r4
 8023db2:	462b      	mov	r3, r5
 8023db4:	f7dc fc2c 	bl	8000610 <__aeabi_dmul>
 8023db8:	a359      	add	r3, pc, #356	; (adr r3, 8023f20 <__ieee754_pow+0x9e8>)
 8023dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dbe:	f7dc fa75 	bl	80002ac <__adddf3>
 8023dc2:	4622      	mov	r2, r4
 8023dc4:	462b      	mov	r3, r5
 8023dc6:	f7dc fc23 	bl	8000610 <__aeabi_dmul>
 8023dca:	a357      	add	r3, pc, #348	; (adr r3, 8023f28 <__ieee754_pow+0x9f0>)
 8023dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023dd0:	f7dc fa6a 	bl	80002a8 <__aeabi_dsub>
 8023dd4:	4622      	mov	r2, r4
 8023dd6:	462b      	mov	r3, r5
 8023dd8:	f7dc fc1a 	bl	8000610 <__aeabi_dmul>
 8023ddc:	a354      	add	r3, pc, #336	; (adr r3, 8023f30 <__ieee754_pow+0x9f8>)
 8023dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023de2:	f7dc fa63 	bl	80002ac <__adddf3>
 8023de6:	4622      	mov	r2, r4
 8023de8:	462b      	mov	r3, r5
 8023dea:	f7dc fc11 	bl	8000610 <__aeabi_dmul>
 8023dee:	4602      	mov	r2, r0
 8023df0:	460b      	mov	r3, r1
 8023df2:	4640      	mov	r0, r8
 8023df4:	4649      	mov	r1, r9
 8023df6:	f7dc fa57 	bl	80002a8 <__aeabi_dsub>
 8023dfa:	4604      	mov	r4, r0
 8023dfc:	460d      	mov	r5, r1
 8023dfe:	4602      	mov	r2, r0
 8023e00:	460b      	mov	r3, r1
 8023e02:	4640      	mov	r0, r8
 8023e04:	4649      	mov	r1, r9
 8023e06:	f7dc fc03 	bl	8000610 <__aeabi_dmul>
 8023e0a:	2200      	movs	r2, #0
 8023e0c:	e9cd 0100 	strd	r0, r1, [sp]
 8023e10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023e14:	4620      	mov	r0, r4
 8023e16:	4629      	mov	r1, r5
 8023e18:	f7dc fa46 	bl	80002a8 <__aeabi_dsub>
 8023e1c:	4602      	mov	r2, r0
 8023e1e:	460b      	mov	r3, r1
 8023e20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023e24:	f7dc fd1e 	bl	8000864 <__aeabi_ddiv>
 8023e28:	4632      	mov	r2, r6
 8023e2a:	4604      	mov	r4, r0
 8023e2c:	460d      	mov	r5, r1
 8023e2e:	463b      	mov	r3, r7
 8023e30:	4640      	mov	r0, r8
 8023e32:	4649      	mov	r1, r9
 8023e34:	f7dc fbec 	bl	8000610 <__aeabi_dmul>
 8023e38:	4632      	mov	r2, r6
 8023e3a:	463b      	mov	r3, r7
 8023e3c:	f7dc fa36 	bl	80002ac <__adddf3>
 8023e40:	4602      	mov	r2, r0
 8023e42:	460b      	mov	r3, r1
 8023e44:	4620      	mov	r0, r4
 8023e46:	4629      	mov	r1, r5
 8023e48:	f7dc fa2e 	bl	80002a8 <__aeabi_dsub>
 8023e4c:	4642      	mov	r2, r8
 8023e4e:	464b      	mov	r3, r9
 8023e50:	f7dc fa2a 	bl	80002a8 <__aeabi_dsub>
 8023e54:	4602      	mov	r2, r0
 8023e56:	460b      	mov	r3, r1
 8023e58:	2000      	movs	r0, #0
 8023e5a:	493b      	ldr	r1, [pc, #236]	; (8023f48 <__ieee754_pow+0xa10>)
 8023e5c:	f7dc fa24 	bl	80002a8 <__aeabi_dsub>
 8023e60:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8023e64:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8023e68:	4602      	mov	r2, r0
 8023e6a:	460b      	mov	r3, r1
 8023e6c:	da31      	bge.n	8023ed2 <__ieee754_pow+0x99a>
 8023e6e:	4650      	mov	r0, sl
 8023e70:	ec43 2b10 	vmov	d0, r2, r3
 8023e74:	f000 fa0c 	bl	8024290 <scalbn>
 8023e78:	ec51 0b10 	vmov	r0, r1, d0
 8023e7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8023e80:	f7ff bbf1 	b.w	8023666 <__ieee754_pow+0x12e>
 8023e84:	4b31      	ldr	r3, [pc, #196]	; (8023f4c <__ieee754_pow+0xa14>)
 8023e86:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8023e8a:	429e      	cmp	r6, r3
 8023e8c:	f77f af0c 	ble.w	8023ca8 <__ieee754_pow+0x770>
 8023e90:	4b2f      	ldr	r3, [pc, #188]	; (8023f50 <__ieee754_pow+0xa18>)
 8023e92:	440b      	add	r3, r1
 8023e94:	4303      	orrs	r3, r0
 8023e96:	d00b      	beq.n	8023eb0 <__ieee754_pow+0x978>
 8023e98:	a327      	add	r3, pc, #156	; (adr r3, 8023f38 <__ieee754_pow+0xa00>)
 8023e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8023ea2:	f7dc fbb5 	bl	8000610 <__aeabi_dmul>
 8023ea6:	a324      	add	r3, pc, #144	; (adr r3, 8023f38 <__ieee754_pow+0xa00>)
 8023ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eac:	f7ff bbdb 	b.w	8023666 <__ieee754_pow+0x12e>
 8023eb0:	4622      	mov	r2, r4
 8023eb2:	462b      	mov	r3, r5
 8023eb4:	f7dc f9f8 	bl	80002a8 <__aeabi_dsub>
 8023eb8:	4602      	mov	r2, r0
 8023eba:	460b      	mov	r3, r1
 8023ebc:	4640      	mov	r0, r8
 8023ebe:	4649      	mov	r1, r9
 8023ec0:	f7dc fe22 	bl	8000b08 <__aeabi_dcmple>
 8023ec4:	2800      	cmp	r0, #0
 8023ec6:	f43f aeef 	beq.w	8023ca8 <__ieee754_pow+0x770>
 8023eca:	e7e5      	b.n	8023e98 <__ieee754_pow+0x960>
 8023ecc:	f04f 0a00 	mov.w	sl, #0
 8023ed0:	e716      	b.n	8023d00 <__ieee754_pow+0x7c8>
 8023ed2:	4621      	mov	r1, r4
 8023ed4:	e7d2      	b.n	8023e7c <__ieee754_pow+0x944>
 8023ed6:	2000      	movs	r0, #0
 8023ed8:	491b      	ldr	r1, [pc, #108]	; (8023f48 <__ieee754_pow+0xa10>)
 8023eda:	f7ff bb8d 	b.w	80235f8 <__ieee754_pow+0xc0>
 8023ede:	e9dd 0100 	ldrd	r0, r1, [sp]
 8023ee2:	f7ff bb89 	b.w	80235f8 <__ieee754_pow+0xc0>
 8023ee6:	4630      	mov	r0, r6
 8023ee8:	4639      	mov	r1, r7
 8023eea:	f7ff bb85 	b.w	80235f8 <__ieee754_pow+0xc0>
 8023eee:	4693      	mov	fp, r2
 8023ef0:	f7ff bb96 	b.w	8023620 <__ieee754_pow+0xe8>
 8023ef4:	f3af 8000 	nop.w
 8023ef8:	00000000 	.word	0x00000000
 8023efc:	3fe62e43 	.word	0x3fe62e43
 8023f00:	fefa39ef 	.word	0xfefa39ef
 8023f04:	3fe62e42 	.word	0x3fe62e42
 8023f08:	0ca86c39 	.word	0x0ca86c39
 8023f0c:	be205c61 	.word	0xbe205c61
 8023f10:	72bea4d0 	.word	0x72bea4d0
 8023f14:	3e663769 	.word	0x3e663769
 8023f18:	c5d26bf1 	.word	0xc5d26bf1
 8023f1c:	3ebbbd41 	.word	0x3ebbbd41
 8023f20:	af25de2c 	.word	0xaf25de2c
 8023f24:	3f11566a 	.word	0x3f11566a
 8023f28:	16bebd93 	.word	0x16bebd93
 8023f2c:	3f66c16c 	.word	0x3f66c16c
 8023f30:	5555553e 	.word	0x5555553e
 8023f34:	3fc55555 	.word	0x3fc55555
 8023f38:	c2f8f359 	.word	0xc2f8f359
 8023f3c:	01a56e1f 	.word	0x01a56e1f
 8023f40:	3fe00000 	.word	0x3fe00000
 8023f44:	000fffff 	.word	0x000fffff
 8023f48:	3ff00000 	.word	0x3ff00000
 8023f4c:	4090cbff 	.word	0x4090cbff
 8023f50:	3f6f3400 	.word	0x3f6f3400
 8023f54:	652b82fe 	.word	0x652b82fe
 8023f58:	3c971547 	.word	0x3c971547

08023f5c <__ieee754_sqrt>:
 8023f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023f60:	ec55 4b10 	vmov	r4, r5, d0
 8023f64:	4e54      	ldr	r6, [pc, #336]	; (80240b8 <__ieee754_sqrt+0x15c>)
 8023f66:	43ae      	bics	r6, r5
 8023f68:	ee10 0a10 	vmov	r0, s0
 8023f6c:	462b      	mov	r3, r5
 8023f6e:	462a      	mov	r2, r5
 8023f70:	4621      	mov	r1, r4
 8023f72:	d113      	bne.n	8023f9c <__ieee754_sqrt+0x40>
 8023f74:	ee10 2a10 	vmov	r2, s0
 8023f78:	462b      	mov	r3, r5
 8023f7a:	ee10 0a10 	vmov	r0, s0
 8023f7e:	4629      	mov	r1, r5
 8023f80:	f7dc fb46 	bl	8000610 <__aeabi_dmul>
 8023f84:	4602      	mov	r2, r0
 8023f86:	460b      	mov	r3, r1
 8023f88:	4620      	mov	r0, r4
 8023f8a:	4629      	mov	r1, r5
 8023f8c:	f7dc f98e 	bl	80002ac <__adddf3>
 8023f90:	4604      	mov	r4, r0
 8023f92:	460d      	mov	r5, r1
 8023f94:	ec45 4b10 	vmov	d0, r4, r5
 8023f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023f9c:	2d00      	cmp	r5, #0
 8023f9e:	dc10      	bgt.n	8023fc2 <__ieee754_sqrt+0x66>
 8023fa0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8023fa4:	4330      	orrs	r0, r6
 8023fa6:	d0f5      	beq.n	8023f94 <__ieee754_sqrt+0x38>
 8023fa8:	b15d      	cbz	r5, 8023fc2 <__ieee754_sqrt+0x66>
 8023faa:	ee10 2a10 	vmov	r2, s0
 8023fae:	462b      	mov	r3, r5
 8023fb0:	4620      	mov	r0, r4
 8023fb2:	4629      	mov	r1, r5
 8023fb4:	f7dc f978 	bl	80002a8 <__aeabi_dsub>
 8023fb8:	4602      	mov	r2, r0
 8023fba:	460b      	mov	r3, r1
 8023fbc:	f7dc fc52 	bl	8000864 <__aeabi_ddiv>
 8023fc0:	e7e6      	b.n	8023f90 <__ieee754_sqrt+0x34>
 8023fc2:	151b      	asrs	r3, r3, #20
 8023fc4:	d10c      	bne.n	8023fe0 <__ieee754_sqrt+0x84>
 8023fc6:	2a00      	cmp	r2, #0
 8023fc8:	d06d      	beq.n	80240a6 <__ieee754_sqrt+0x14a>
 8023fca:	2000      	movs	r0, #0
 8023fcc:	02d6      	lsls	r6, r2, #11
 8023fce:	d56e      	bpl.n	80240ae <__ieee754_sqrt+0x152>
 8023fd0:	1e44      	subs	r4, r0, #1
 8023fd2:	1b1b      	subs	r3, r3, r4
 8023fd4:	f1c0 0420 	rsb	r4, r0, #32
 8023fd8:	fa21 f404 	lsr.w	r4, r1, r4
 8023fdc:	4322      	orrs	r2, r4
 8023fde:	4081      	lsls	r1, r0
 8023fe0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8023fe4:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8023fe8:	07dd      	lsls	r5, r3, #31
 8023fea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8023fee:	bf42      	ittt	mi
 8023ff0:	0052      	lslmi	r2, r2, #1
 8023ff2:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8023ff6:	0049      	lslmi	r1, r1, #1
 8023ff8:	1058      	asrs	r0, r3, #1
 8023ffa:	2500      	movs	r5, #0
 8023ffc:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8024000:	441a      	add	r2, r3
 8024002:	0049      	lsls	r1, r1, #1
 8024004:	2316      	movs	r3, #22
 8024006:	462c      	mov	r4, r5
 8024008:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 802400c:	19a7      	adds	r7, r4, r6
 802400e:	4297      	cmp	r7, r2
 8024010:	bfde      	ittt	le
 8024012:	1bd2      	suble	r2, r2, r7
 8024014:	19bc      	addle	r4, r7, r6
 8024016:	19ad      	addle	r5, r5, r6
 8024018:	0052      	lsls	r2, r2, #1
 802401a:	3b01      	subs	r3, #1
 802401c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8024020:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8024024:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024028:	d1f0      	bne.n	802400c <__ieee754_sqrt+0xb0>
 802402a:	f04f 0e20 	mov.w	lr, #32
 802402e:	469c      	mov	ip, r3
 8024030:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8024034:	42a2      	cmp	r2, r4
 8024036:	eb06 070c 	add.w	r7, r6, ip
 802403a:	dc02      	bgt.n	8024042 <__ieee754_sqrt+0xe6>
 802403c:	d112      	bne.n	8024064 <__ieee754_sqrt+0x108>
 802403e:	428f      	cmp	r7, r1
 8024040:	d810      	bhi.n	8024064 <__ieee754_sqrt+0x108>
 8024042:	2f00      	cmp	r7, #0
 8024044:	eb07 0c06 	add.w	ip, r7, r6
 8024048:	da34      	bge.n	80240b4 <__ieee754_sqrt+0x158>
 802404a:	f1bc 0f00 	cmp.w	ip, #0
 802404e:	db31      	blt.n	80240b4 <__ieee754_sqrt+0x158>
 8024050:	f104 0801 	add.w	r8, r4, #1
 8024054:	1b12      	subs	r2, r2, r4
 8024056:	428f      	cmp	r7, r1
 8024058:	bf88      	it	hi
 802405a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 802405e:	1bc9      	subs	r1, r1, r7
 8024060:	4433      	add	r3, r6
 8024062:	4644      	mov	r4, r8
 8024064:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 8024068:	f1be 0e01 	subs.w	lr, lr, #1
 802406c:	443a      	add	r2, r7
 802406e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8024072:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8024076:	d1dd      	bne.n	8024034 <__ieee754_sqrt+0xd8>
 8024078:	430a      	orrs	r2, r1
 802407a:	d006      	beq.n	802408a <__ieee754_sqrt+0x12e>
 802407c:	1c5c      	adds	r4, r3, #1
 802407e:	bf13      	iteet	ne
 8024080:	3301      	addne	r3, #1
 8024082:	3501      	addeq	r5, #1
 8024084:	4673      	moveq	r3, lr
 8024086:	f023 0301 	bicne.w	r3, r3, #1
 802408a:	106a      	asrs	r2, r5, #1
 802408c:	085b      	lsrs	r3, r3, #1
 802408e:	07e9      	lsls	r1, r5, #31
 8024090:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8024094:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8024098:	bf48      	it	mi
 802409a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 802409e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80240a2:	461c      	mov	r4, r3
 80240a4:	e776      	b.n	8023f94 <__ieee754_sqrt+0x38>
 80240a6:	0aca      	lsrs	r2, r1, #11
 80240a8:	3b15      	subs	r3, #21
 80240aa:	0549      	lsls	r1, r1, #21
 80240ac:	e78b      	b.n	8023fc6 <__ieee754_sqrt+0x6a>
 80240ae:	0052      	lsls	r2, r2, #1
 80240b0:	3001      	adds	r0, #1
 80240b2:	e78b      	b.n	8023fcc <__ieee754_sqrt+0x70>
 80240b4:	46a0      	mov	r8, r4
 80240b6:	e7cd      	b.n	8024054 <__ieee754_sqrt+0xf8>
 80240b8:	7ff00000 	.word	0x7ff00000

080240bc <__ieee754_sqrtf>:
 80240bc:	ee10 2a10 	vmov	r2, s0
 80240c0:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80240c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80240c8:	b570      	push	{r4, r5, r6, lr}
 80240ca:	d302      	bcc.n	80240d2 <__ieee754_sqrtf+0x16>
 80240cc:	eea0 0a00 	vfma.f32	s0, s0, s0
 80240d0:	bd70      	pop	{r4, r5, r6, pc}
 80240d2:	b3b1      	cbz	r1, 8024142 <__ieee754_sqrtf+0x86>
 80240d4:	2a00      	cmp	r2, #0
 80240d6:	da04      	bge.n	80240e2 <__ieee754_sqrtf+0x26>
 80240d8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80240dc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80240e0:	bd70      	pop	{r4, r5, r6, pc}
 80240e2:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80240e6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80240ea:	d204      	bcs.n	80240f6 <__ieee754_sqrtf+0x3a>
 80240ec:	2100      	movs	r1, #0
 80240ee:	0210      	lsls	r0, r2, #8
 80240f0:	d528      	bpl.n	8024144 <__ieee754_sqrtf+0x88>
 80240f2:	3901      	subs	r1, #1
 80240f4:	1a5b      	subs	r3, r3, r1
 80240f6:	3b7f      	subs	r3, #127	; 0x7f
 80240f8:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80240fc:	07d9      	lsls	r1, r3, #31
 80240fe:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8024102:	bf48      	it	mi
 8024104:	0052      	lslmi	r2, r2, #1
 8024106:	1059      	asrs	r1, r3, #1
 8024108:	2300      	movs	r3, #0
 802410a:	0052      	lsls	r2, r2, #1
 802410c:	2419      	movs	r4, #25
 802410e:	461e      	mov	r6, r3
 8024110:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8024114:	1835      	adds	r5, r6, r0
 8024116:	4295      	cmp	r5, r2
 8024118:	bfde      	ittt	le
 802411a:	182e      	addle	r6, r5, r0
 802411c:	1b52      	suble	r2, r2, r5
 802411e:	181b      	addle	r3, r3, r0
 8024120:	3c01      	subs	r4, #1
 8024122:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024126:	ea4f 0050 	mov.w	r0, r0, lsr #1
 802412a:	d1f3      	bne.n	8024114 <__ieee754_sqrtf+0x58>
 802412c:	b112      	cbz	r2, 8024134 <__ieee754_sqrtf+0x78>
 802412e:	3301      	adds	r3, #1
 8024130:	f023 0301 	bic.w	r3, r3, #1
 8024134:	105b      	asrs	r3, r3, #1
 8024136:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 802413a:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 802413e:	ee00 3a10 	vmov	s0, r3
 8024142:	bd70      	pop	{r4, r5, r6, pc}
 8024144:	0052      	lsls	r2, r2, #1
 8024146:	3101      	adds	r1, #1
 8024148:	e7d1      	b.n	80240ee <__ieee754_sqrtf+0x32>

0802414a <fabs>:
 802414a:	ec53 2b10 	vmov	r2, r3, d0
 802414e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8024152:	ec43 2b10 	vmov	d0, r2, r3
 8024156:	4770      	bx	lr

08024158 <finite>:
 8024158:	ee10 3a90 	vmov	r3, s1
 802415c:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8024160:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8024164:	0fc0      	lsrs	r0, r0, #31
 8024166:	4770      	bx	lr

08024168 <matherr>:
 8024168:	2000      	movs	r0, #0
 802416a:	4770      	bx	lr
 802416c:	0000      	movs	r0, r0
	...

08024170 <nan>:
 8024170:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8024178 <nan+0x8>
 8024174:	4770      	bx	lr
 8024176:	bf00      	nop
 8024178:	00000000 	.word	0x00000000
 802417c:	7ff80000 	.word	0x7ff80000

08024180 <rint>:
 8024180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024182:	ec51 0b10 	vmov	r0, r1, d0
 8024186:	f3c1 540a 	ubfx	r4, r1, #20, #11
 802418a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 802418e:	2e13      	cmp	r6, #19
 8024190:	ee10 7a10 	vmov	r7, s0
 8024194:	460b      	mov	r3, r1
 8024196:	4602      	mov	r2, r0
 8024198:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 802419c:	dc58      	bgt.n	8024250 <rint+0xd0>
 802419e:	2e00      	cmp	r6, #0
 80241a0:	da2b      	bge.n	80241fa <rint+0x7a>
 80241a2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80241a6:	4302      	orrs	r2, r0
 80241a8:	d023      	beq.n	80241f2 <rint+0x72>
 80241aa:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80241ae:	4302      	orrs	r2, r0
 80241b0:	4251      	negs	r1, r2
 80241b2:	4311      	orrs	r1, r2
 80241b4:	0b09      	lsrs	r1, r1, #12
 80241b6:	0c5b      	lsrs	r3, r3, #17
 80241b8:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 80241bc:	045b      	lsls	r3, r3, #17
 80241be:	ea41 0703 	orr.w	r7, r1, r3
 80241c2:	4b31      	ldr	r3, [pc, #196]	; (8024288 <rint+0x108>)
 80241c4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80241c8:	4639      	mov	r1, r7
 80241ca:	e9d3 6700 	ldrd	r6, r7, [r3]
 80241ce:	ee10 0a10 	vmov	r0, s0
 80241d2:	4632      	mov	r2, r6
 80241d4:	463b      	mov	r3, r7
 80241d6:	f7dc f869 	bl	80002ac <__adddf3>
 80241da:	e9cd 0100 	strd	r0, r1, [sp]
 80241de:	463b      	mov	r3, r7
 80241e0:	4632      	mov	r2, r6
 80241e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80241e6:	f7dc f85f 	bl	80002a8 <__aeabi_dsub>
 80241ea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80241ee:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 80241f2:	ec41 0b10 	vmov	d0, r0, r1
 80241f6:	b003      	add	sp, #12
 80241f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80241fa:	4c24      	ldr	r4, [pc, #144]	; (802428c <rint+0x10c>)
 80241fc:	4134      	asrs	r4, r6
 80241fe:	ea01 0704 	and.w	r7, r1, r4
 8024202:	4307      	orrs	r7, r0
 8024204:	d0f5      	beq.n	80241f2 <rint+0x72>
 8024206:	0861      	lsrs	r1, r4, #1
 8024208:	ea03 0001 	and.w	r0, r3, r1
 802420c:	4302      	orrs	r2, r0
 802420e:	d00b      	beq.n	8024228 <rint+0xa8>
 8024210:	ea23 0101 	bic.w	r1, r3, r1
 8024214:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8024218:	2e13      	cmp	r6, #19
 802421a:	fa43 f306 	asr.w	r3, r3, r6
 802421e:	bf0c      	ite	eq
 8024220:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8024224:	2200      	movne	r2, #0
 8024226:	430b      	orrs	r3, r1
 8024228:	4619      	mov	r1, r3
 802422a:	4b17      	ldr	r3, [pc, #92]	; (8024288 <rint+0x108>)
 802422c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8024230:	e9d5 4500 	ldrd	r4, r5, [r5]
 8024234:	4610      	mov	r0, r2
 8024236:	462b      	mov	r3, r5
 8024238:	4622      	mov	r2, r4
 802423a:	f7dc f837 	bl	80002ac <__adddf3>
 802423e:	e9cd 0100 	strd	r0, r1, [sp]
 8024242:	4622      	mov	r2, r4
 8024244:	462b      	mov	r3, r5
 8024246:	e9dd 0100 	ldrd	r0, r1, [sp]
 802424a:	f7dc f82d 	bl	80002a8 <__aeabi_dsub>
 802424e:	e7d0      	b.n	80241f2 <rint+0x72>
 8024250:	2e33      	cmp	r6, #51	; 0x33
 8024252:	dd08      	ble.n	8024266 <rint+0xe6>
 8024254:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024258:	d1cb      	bne.n	80241f2 <rint+0x72>
 802425a:	ee10 2a10 	vmov	r2, s0
 802425e:	460b      	mov	r3, r1
 8024260:	f7dc f824 	bl	80002ac <__adddf3>
 8024264:	e7c5      	b.n	80241f2 <rint+0x72>
 8024266:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 802426a:	f04f 34ff 	mov.w	r4, #4294967295
 802426e:	40f4      	lsrs	r4, r6
 8024270:	4220      	tst	r0, r4
 8024272:	d0be      	beq.n	80241f2 <rint+0x72>
 8024274:	0861      	lsrs	r1, r4, #1
 8024276:	420f      	tst	r7, r1
 8024278:	bf1f      	itttt	ne
 802427a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 802427e:	ea27 0101 	bicne.w	r1, r7, r1
 8024282:	4132      	asrne	r2, r6
 8024284:	430a      	orrne	r2, r1
 8024286:	e7cf      	b.n	8024228 <rint+0xa8>
 8024288:	08031460 	.word	0x08031460
 802428c:	000fffff 	.word	0x000fffff

08024290 <scalbn>:
 8024290:	b570      	push	{r4, r5, r6, lr}
 8024292:	ec55 4b10 	vmov	r4, r5, d0
 8024296:	f3c5 520a 	ubfx	r2, r5, #20, #11
 802429a:	4606      	mov	r6, r0
 802429c:	462b      	mov	r3, r5
 802429e:	b9b2      	cbnz	r2, 80242ce <scalbn+0x3e>
 80242a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80242a4:	4323      	orrs	r3, r4
 80242a6:	d03c      	beq.n	8024322 <scalbn+0x92>
 80242a8:	2200      	movs	r2, #0
 80242aa:	4b33      	ldr	r3, [pc, #204]	; (8024378 <scalbn+0xe8>)
 80242ac:	4629      	mov	r1, r5
 80242ae:	ee10 0a10 	vmov	r0, s0
 80242b2:	f7dc f9ad 	bl	8000610 <__aeabi_dmul>
 80242b6:	4a31      	ldr	r2, [pc, #196]	; (802437c <scalbn+0xec>)
 80242b8:	4296      	cmp	r6, r2
 80242ba:	4604      	mov	r4, r0
 80242bc:	460d      	mov	r5, r1
 80242be:	460b      	mov	r3, r1
 80242c0:	da13      	bge.n	80242ea <scalbn+0x5a>
 80242c2:	a329      	add	r3, pc, #164	; (adr r3, 8024368 <scalbn+0xd8>)
 80242c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242c8:	f7dc f9a2 	bl	8000610 <__aeabi_dmul>
 80242cc:	e00a      	b.n	80242e4 <scalbn+0x54>
 80242ce:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80242d2:	428a      	cmp	r2, r1
 80242d4:	d10c      	bne.n	80242f0 <scalbn+0x60>
 80242d6:	ee10 2a10 	vmov	r2, s0
 80242da:	462b      	mov	r3, r5
 80242dc:	4620      	mov	r0, r4
 80242de:	4629      	mov	r1, r5
 80242e0:	f7db ffe4 	bl	80002ac <__adddf3>
 80242e4:	4604      	mov	r4, r0
 80242e6:	460d      	mov	r5, r1
 80242e8:	e01b      	b.n	8024322 <scalbn+0x92>
 80242ea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80242ee:	3a36      	subs	r2, #54	; 0x36
 80242f0:	4432      	add	r2, r6
 80242f2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80242f6:	428a      	cmp	r2, r1
 80242f8:	dd0b      	ble.n	8024312 <scalbn+0x82>
 80242fa:	ec45 4b11 	vmov	d1, r4, r5
 80242fe:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8024370 <scalbn+0xe0>
 8024302:	f000 f83f 	bl	8024384 <copysign>
 8024306:	a31a      	add	r3, pc, #104	; (adr r3, 8024370 <scalbn+0xe0>)
 8024308:	e9d3 2300 	ldrd	r2, r3, [r3]
 802430c:	ec51 0b10 	vmov	r0, r1, d0
 8024310:	e7da      	b.n	80242c8 <scalbn+0x38>
 8024312:	2a00      	cmp	r2, #0
 8024314:	dd08      	ble.n	8024328 <scalbn+0x98>
 8024316:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802431a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802431e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024322:	ec45 4b10 	vmov	d0, r4, r5
 8024326:	bd70      	pop	{r4, r5, r6, pc}
 8024328:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802432c:	da0d      	bge.n	802434a <scalbn+0xba>
 802432e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024332:	429e      	cmp	r6, r3
 8024334:	ec45 4b11 	vmov	d1, r4, r5
 8024338:	dce1      	bgt.n	80242fe <scalbn+0x6e>
 802433a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8024368 <scalbn+0xd8>
 802433e:	f000 f821 	bl	8024384 <copysign>
 8024342:	a309      	add	r3, pc, #36	; (adr r3, 8024368 <scalbn+0xd8>)
 8024344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024348:	e7e0      	b.n	802430c <scalbn+0x7c>
 802434a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802434e:	3236      	adds	r2, #54	; 0x36
 8024350:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024354:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024358:	4620      	mov	r0, r4
 802435a:	4629      	mov	r1, r5
 802435c:	2200      	movs	r2, #0
 802435e:	4b08      	ldr	r3, [pc, #32]	; (8024380 <scalbn+0xf0>)
 8024360:	e7b2      	b.n	80242c8 <scalbn+0x38>
 8024362:	bf00      	nop
 8024364:	f3af 8000 	nop.w
 8024368:	c2f8f359 	.word	0xc2f8f359
 802436c:	01a56e1f 	.word	0x01a56e1f
 8024370:	8800759c 	.word	0x8800759c
 8024374:	7e37e43c 	.word	0x7e37e43c
 8024378:	43500000 	.word	0x43500000
 802437c:	ffff3cb0 	.word	0xffff3cb0
 8024380:	3c900000 	.word	0x3c900000

08024384 <copysign>:
 8024384:	ec53 2b10 	vmov	r2, r3, d0
 8024388:	ee11 0a90 	vmov	r0, s3
 802438c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8024390:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8024394:	ea41 0300 	orr.w	r3, r1, r0
 8024398:	ec43 2b10 	vmov	d0, r2, r3
 802439c:	4770      	bx	lr
	...

080243a0 <_init>:
 80243a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80243a2:	bf00      	nop
 80243a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80243a6:	bc08      	pop	{r3}
 80243a8:	469e      	mov	lr, r3
 80243aa:	4770      	bx	lr

080243ac <_fini>:
 80243ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80243ae:	bf00      	nop
 80243b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80243b2:	bc08      	pop	{r3}
 80243b4:	469e      	mov	lr, r3
 80243b6:	4770      	bx	lr
